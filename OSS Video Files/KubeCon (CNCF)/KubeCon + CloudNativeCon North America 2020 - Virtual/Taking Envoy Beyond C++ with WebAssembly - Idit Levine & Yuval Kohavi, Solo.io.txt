Title: Taking Envoy Beyond C++ with WebAssembly - Idit Levine & Yuval Kohavi, Solo.io
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Taking Envoy Beyond C++ with WebAssembly - Idit Levine & Yuval Kohavi, Solo.io 

Envoy is the leading proxy for handling cloud-native application traffic at the edge and in the service mesh for its performance, speed and extensibility. The extensibility is in the form of filters that are configured in the proxy that shape, secure and manage the traffic that flows through it. These filters are only written in C++....so limited to those developers That is until WebAssembly (wasm) entered the picture, making Envoy filters effectively polyglot. Through wasm, the deployment of the filters is isolated making secure, resilient to failure and able to deploy without a restart This demo filled session will deep dive into - how WebAssembly works with Envoy - dev and ops workflow to build and deploy filters with wasm - demo examples of wasm filters 

https://sched.co/ekAO
Captions: 
	00:00:01,760 --> 00:00:04,960
hi everyone

00:00:03,199 --> 00:00:09,520
today we're going to talk about

00:00:04,960 --> 00:00:09,520
extending envoy proxy with webassembly

00:00:11,440 --> 00:00:15,440
my name is edith levine and i'm the

00:00:13,040 --> 00:00:17,680
founder and ceo of solo io

00:00:15,440 --> 00:00:19,760
and i have here you valko javi the chief

00:00:17,680 --> 00:00:21,920
architect of solo ayo

00:00:19,760 --> 00:00:25,199
and we will share with you about

00:00:21,920 --> 00:00:25,199
webassembly and envoy

00:00:26,480 --> 00:00:32,480
so let's start giving a bit of an intro

00:00:30,080 --> 00:00:33,600
a little bit about the control plane and

00:00:32,480 --> 00:00:36,079
data plane

00:00:33,600 --> 00:00:38,160
separation just as it's important to

00:00:36,079 --> 00:00:40,480
understand the moving parts here

00:00:38,160 --> 00:00:41,440
so you will go to the next slide we will

00:00:40,480 --> 00:00:44,559
see

00:00:41,440 --> 00:00:47,840
that the way envoy is

00:00:44,559 --> 00:00:49,600
structured is that envoy itself

00:00:47,840 --> 00:00:51,600
is configured through a different

00:00:49,600 --> 00:00:54,079
component called a controlling plane

00:00:51,600 --> 00:00:55,520
that's responsible of processing user

00:00:54,079 --> 00:00:57,840
configuration

00:00:55,520 --> 00:00:58,879
and updating android in real time

00:00:57,840 --> 00:01:01,359
dynamically

00:00:58,879 --> 00:01:02,640
in an eventual consistent way of that

00:01:01,359 --> 00:01:04,080
configuration

00:01:02,640 --> 00:01:06,640
and in this slide you can see that we

00:01:04,080 --> 00:01:07,280
have two examples one over ico and one

00:01:06,640 --> 00:01:10,640
of glue

00:01:07,280 --> 00:01:12,000
both of these use envoy as the data

00:01:10,640 --> 00:01:15,600
plane component right

00:01:12,000 --> 00:01:19,360
the data plan is where a user data

00:01:15,600 --> 00:01:21,600
http requests flow through and

00:01:19,360 --> 00:01:23,200
they are the control plane component for

00:01:21,600 --> 00:01:26,240
onward and the control plane is the

00:01:23,200 --> 00:01:29,200
channel where configuration messages

00:01:26,240 --> 00:01:31,000
go through and if we'll move on to the

00:01:29,200 --> 00:01:32,240
next slide we can see sort of this

00:01:31,000 --> 00:01:34,799
visualization

00:01:32,240 --> 00:01:35,759
where a user configuration in glue's

00:01:34,799 --> 00:01:38,400
case

00:01:35,759 --> 00:01:41,040
glue processes kubernetes crds and one

00:01:38,400 --> 00:01:44,560
of the crds is a virtual service

00:01:41,040 --> 00:01:47,600
goes into glue and then a

00:01:44,560 --> 00:01:49,840
if glue processes it through a

00:01:47,600 --> 00:01:52,479
glue list of plugins that understand the

00:01:49,840 --> 00:01:54,079
user configuration

00:01:52,479 --> 00:01:56,640
it gets translated to android

00:01:54,079 --> 00:02:00,560
configuration and delivered onto android

00:01:56,640 --> 00:02:03,439
and now the reason for this uh extra api

00:02:00,560 --> 00:02:04,000
because the user configuration that glue

00:02:03,439 --> 00:02:07,040
provide

00:02:04,000 --> 00:02:09,119
is use case specific and simpler

00:02:07,040 --> 00:02:11,599
to understand than the android

00:02:09,119 --> 00:02:12,959
configuration glue also can automate a

00:02:11,599 --> 00:02:15,040
lot of the parts

00:02:12,959 --> 00:02:17,440
that android needs for example cluster

00:02:15,040 --> 00:02:20,800
membership and endpoints

00:02:17,440 --> 00:02:23,040
and making envoy easier to operate

00:02:20,800 --> 00:02:25,120
now if we'll continue we can talk about

00:02:23,040 --> 00:02:27,520
how the data path looks like

00:02:25,120 --> 00:02:28,319
and we can see that an http request

00:02:27,520 --> 00:02:31,680
comes into

00:02:28,319 --> 00:02:32,319
envoy and that's one of the key parts

00:02:31,680 --> 00:02:35,840
that make

00:02:32,319 --> 00:02:38,160
envoy very useful as a cloud native

00:02:35,840 --> 00:02:40,560
proxy the ability to extend it

00:02:38,160 --> 00:02:41,440
right the request doesn't just pass

00:02:40,560 --> 00:02:43,840
through

00:02:41,440 --> 00:02:46,239
a envoy onto the upstream it actually

00:02:43,840 --> 00:02:46,560
goes through a series of filters that

00:02:46,239 --> 00:02:49,920
can

00:02:46,560 --> 00:02:53,040
modify the request and impact glub

00:02:49,920 --> 00:02:55,680
impact their behavior of the proxy so

00:02:53,040 --> 00:02:56,319
in this example we can see that the

00:02:55,680 --> 00:02:58,239
request

00:02:56,319 --> 00:03:00,159
goes through through on voice filter

00:02:58,239 --> 00:03:02,640
chain first hit in the external

00:03:00,159 --> 00:03:03,440
filter where it's con consulted with an

00:03:02,640 --> 00:03:05,599
external

00:03:03,440 --> 00:03:06,640
server whether or not to authorize the

00:03:05,599 --> 00:03:08,480
request

00:03:06,640 --> 00:03:10,080
moving on to the raid limit filter where

00:03:08,480 --> 00:03:11,040
it consults a rail limiting server

00:03:10,080 --> 00:03:12,720
whether or not to

00:03:11,040 --> 00:03:16,000
allow the request for rate limiting

00:03:12,720 --> 00:03:19,200
purposes and finally traverses to a grpc

00:03:16,000 --> 00:03:20,480
transcoder filter that allows you to

00:03:19,200 --> 00:03:24,080
provide a rest

00:03:20,480 --> 00:03:26,080
interface externally but convert it to a

00:03:24,080 --> 00:03:28,959
grpc interface

00:03:26,080 --> 00:03:30,239
internally so your microservices can

00:03:28,959 --> 00:03:33,599
talk grpc

00:03:30,239 --> 00:03:35,519
which is very common in the go micro

00:03:33,599 --> 00:03:39,519
services ecosystem

00:03:35,519 --> 00:03:42,720
while your front end your

00:03:39,519 --> 00:03:44,840
external facing api will be a rest api

00:03:42,720 --> 00:03:47,680
that's easier to consume from

00:03:44,840 --> 00:03:51,360
javascript so that's kind of

00:03:47,680 --> 00:03:53,680
how android looks likes and one of the

00:03:51,360 --> 00:03:56,080
nice things about envoy is that it's

00:03:53,680 --> 00:03:59,120
extendable so if you'll go in the

00:03:56,080 --> 00:04:00,480
next slide we can see that we can also

00:03:59,120 --> 00:04:03,840
insert custom

00:04:00,480 --> 00:04:05,360
extension points custom filters onto

00:04:03,840 --> 00:04:07,040
envoy and the rest of the talk we

00:04:05,360 --> 00:04:09,920
are going to talk a little bit more

00:04:07,040 --> 00:04:13,439
about these custom filters and how

00:04:09,920 --> 00:04:16,160
wasm fits in now

00:04:13,439 --> 00:04:18,000
when talking about extending a product

00:04:16,160 --> 00:04:20,560
usually we have a checklist of

00:04:18,000 --> 00:04:21,359
things we want to to get out of it right

00:04:20,560 --> 00:04:23,520
so

00:04:21,359 --> 00:04:25,040
we want to be able a language to use a

00:04:23,520 --> 00:04:27,440
language of our choice

00:04:25,040 --> 00:04:28,240
we want this extension to work fast we

00:04:27,440 --> 00:04:29,840
want it to be

00:04:28,240 --> 00:04:32,080
safe that if we have an issue in the

00:04:29,840 --> 00:04:33,919
extension it doesn't bring down

00:04:32,080 --> 00:04:36,240
the whole proxy where a lot of other

00:04:33,919 --> 00:04:37,520
traffic potentially multi-tenant traffic

00:04:36,240 --> 00:04:40,000
flows through

00:04:37,520 --> 00:04:41,919
and we don't want to now we only want to

00:04:40,000 --> 00:04:44,160
build our code we probably don't want to

00:04:41,919 --> 00:04:47,040
rebuild all of envoy

00:04:44,160 --> 00:04:49,120
just to extend it and we want an easy to

00:04:47,040 --> 00:04:52,160
use experience

00:04:49,120 --> 00:04:53,759
and with that in mind let's uh i'll hand

00:04:52,160 --> 00:04:54,560
it over to edit to talk a little bit

00:04:53,759 --> 00:04:58,080
more

00:04:54,560 --> 00:05:00,400
about that thank you well so basically

00:04:58,080 --> 00:05:01,360
basically we'll take an example of the

00:05:00,400 --> 00:05:03,360
two uh

00:05:01,360 --> 00:05:04,800
control plan that basically extending

00:05:03,360 --> 00:05:06,960
envoy um

00:05:04,800 --> 00:05:08,479
and managing envoy and basically see how

00:05:06,960 --> 00:05:10,880
they decided to go about

00:05:08,479 --> 00:05:12,720
extending the data plane so the first

00:05:10,880 --> 00:05:14,800
thing that we will look at is glue

00:05:12,720 --> 00:05:15,759
and glue is an api gateway based on

00:05:14,800 --> 00:05:19,280
envoy

00:05:15,759 --> 00:05:20,800
is focusing majorly on the edge that's

00:05:19,280 --> 00:05:23,919
the use case

00:05:20,800 --> 00:05:24,800
and when we looked at how we can

00:05:23,919 --> 00:05:28,000
actually extend

00:05:24,800 --> 00:05:31,759
envoy we decided that because

00:05:28,000 --> 00:05:33,440
we won't care about a the performance

00:05:31,759 --> 00:05:34,880
right we want to make sure this is a

00:05:33,440 --> 00:05:37,840
basically on the

00:05:34,880 --> 00:05:39,840
control pad on the request path so

00:05:37,840 --> 00:05:41,440
latency is extremely important

00:05:39,840 --> 00:05:42,800
we decided that we want to make sure

00:05:41,440 --> 00:05:44,560
that those filter is going to leave

00:05:42,800 --> 00:05:45,919
still in the proxy and not going to do

00:05:44,560 --> 00:05:48,240
any round trip

00:05:45,919 --> 00:05:50,560
but that means that it's hard because

00:05:48,240 --> 00:05:53,280
the way to actually extend those uh

00:05:50,560 --> 00:05:53,840
filter is is by writing a c plus plus

00:05:53,280 --> 00:05:57,680
asking

00:05:53,840 --> 00:05:58,560
um a a filter code and then recompile

00:05:57,680 --> 00:06:00,720
anyway

00:05:58,560 --> 00:06:01,919
so by ask children to decide to take

00:06:00,720 --> 00:06:04,560
this vendor on

00:06:01,919 --> 00:06:05,600
us in that case the solar company solo

00:06:04,560 --> 00:06:08,639
oil company

00:06:05,600 --> 00:06:10,880
basically we make it extremely

00:06:08,639 --> 00:06:13,039
you know it's extremely to the user

00:06:10,880 --> 00:06:14,960
itself we make sure that it's extremely

00:06:13,039 --> 00:06:17,520
fast right because it's in the control

00:06:14,960 --> 00:06:20,800
pad and it's built into the binary

00:06:17,520 --> 00:06:22,639
basically of envoy it's extremely safe

00:06:20,800 --> 00:06:24,479
because you know there is no round trip

00:06:22,639 --> 00:06:26,000
right there is no network involved or

00:06:24,479 --> 00:06:27,840
wire involved in this

00:06:26,000 --> 00:06:30,000
but of course it's not the easiest thing

00:06:27,840 --> 00:06:31,680
to do right as i said c plus plus quad

00:06:30,000 --> 00:06:34,960
is not something easy to do

00:06:31,680 --> 00:06:37,600
we will we are basically recompiling

00:06:34,960 --> 00:06:39,520
android for for the users so there's

00:06:37,600 --> 00:06:41,440
nothing easy about that right

00:06:39,520 --> 00:06:43,199
we chose this we're taking the lore for

00:06:41,440 --> 00:06:45,199
us so it's you know it is

00:06:43,199 --> 00:06:47,120
easy for our customers but in the

00:06:45,199 --> 00:06:48,160
natural for us it's you know it's a

00:06:47,120 --> 00:06:49,520
challenging thing

00:06:48,160 --> 00:06:52,160
and you know there's not a lot of people

00:06:49,520 --> 00:06:54,479
who can do that um

00:06:52,160 --> 00:06:55,599
sto took a different approach and when

00:06:54,479 --> 00:06:58,639
sto started

00:06:55,599 --> 00:07:00,800
basically their idea was we

00:06:58,639 --> 00:07:02,000
really care about extensibility we

00:07:00,800 --> 00:07:03,440
really want people to be

00:07:02,000 --> 00:07:05,440
able to take that and write it by

00:07:03,440 --> 00:07:07,199
themselves and not be depending on us

00:07:05,440 --> 00:07:08,479
and in order to do this they basically

00:07:07,199 --> 00:07:10,240
came with mixing

00:07:08,479 --> 00:07:12,160
and the idea with mixer is basically

00:07:10,240 --> 00:07:12,560
that every time that a request is coming

00:07:12,160 --> 00:07:14,960
to

00:07:12,560 --> 00:07:17,120
a to the proxy it's going to basically

00:07:14,960 --> 00:07:19,039
take the request and route it to mixer

00:07:17,120 --> 00:07:20,639
and mix eventually we will get all the

00:07:19,039 --> 00:07:22,000
requests and we'll be able to do

00:07:20,639 --> 00:07:24,880
whatever you want from it

00:07:22,000 --> 00:07:26,800
telemetry or maybe you wanted to do some

00:07:24,880 --> 00:07:27,440
you know any adapter that people might

00:07:26,800 --> 00:07:30,000
want

00:07:27,440 --> 00:07:31,360
and basically return the request to the

00:07:30,000 --> 00:07:33,360
proxy after it

00:07:31,360 --> 00:07:34,880
the problem with that is you know there

00:07:33,360 --> 00:07:38,160
is a lot of advantage with this

00:07:34,880 --> 00:07:40,479
right potentially right now people right

00:07:38,160 --> 00:07:43,199
be able to use their own language

00:07:40,479 --> 00:07:44,879
because mixer can communicate grpc

00:07:43,199 --> 00:07:46,560
you know honest to god most of the

00:07:44,879 --> 00:07:49,360
people were using go

00:07:46,560 --> 00:07:51,280
um it's not fast right i mean that's the

00:07:49,360 --> 00:07:53,919
majority problem that the

00:07:51,280 --> 00:07:55,840
if people's talking about talked about

00:07:53,919 --> 00:07:57,039
stability in seo that was the majority

00:07:55,840 --> 00:07:59,440
of the problem because

00:07:57,039 --> 00:08:00,879
there is a full request for constantly

00:07:59,440 --> 00:08:04,560
going on the wire

00:08:00,879 --> 00:08:06,479
um it is safe right i mean

00:08:04,560 --> 00:08:08,000
it is going over the wall you know again

00:08:06,479 --> 00:08:09,280
there is communication between two

00:08:08,000 --> 00:08:10,879
components here it's not in the same

00:08:09,280 --> 00:08:11,759
binary so potentially there's always a

00:08:10,879 --> 00:08:14,080
problem

00:08:11,759 --> 00:08:15,280
but you know relatively safe you

00:08:14,080 --> 00:08:17,520
definitely don't need to compile

00:08:15,280 --> 00:08:18,560
anywhere which is a very very uh huge

00:08:17,520 --> 00:08:21,280
advantage

00:08:18,560 --> 00:08:23,039
and it it easy you know i don't know

00:08:21,280 --> 00:08:24,639
it's still complex problem to solve but

00:08:23,039 --> 00:08:26,240
it's easier than write a c plus

00:08:24,639 --> 00:08:28,800
fastassing and recompile

00:08:26,240 --> 00:08:29,280
so you know when you're looking at this

00:08:28,800 --> 00:08:32,399
um

00:08:29,280 --> 00:08:35,519
you know the google guys a and the

00:08:32,399 --> 00:08:37,760
invo community understood that this

00:08:35,519 --> 00:08:39,279
approach that the sdo community took is

00:08:37,760 --> 00:08:40,959
a little bit problematic there was a lot

00:08:39,279 --> 00:08:42,000
of problem with that and tried to figure

00:08:40,959 --> 00:08:44,159
out

00:08:42,000 --> 00:08:45,600
what different way we can go so as an

00:08:44,159 --> 00:08:48,240
android community we decided to

00:08:45,600 --> 00:08:50,080
basically to explore the web assembly

00:08:48,240 --> 00:08:51,839
so that's kind of like overview a little

00:08:50,080 --> 00:08:53,200
bit of what is webassembly and why we

00:08:51,839 --> 00:08:54,160
thought we thought that this would be a

00:08:53,200 --> 00:08:56,720
good way to

00:08:54,160 --> 00:08:58,720
leverage that technology so first of all

00:08:56,720 --> 00:09:00,399
webassembly funny enough it's not an

00:08:58,720 --> 00:09:01,839
assembly code right it's a binary

00:09:00,399 --> 00:09:03,839
structure format

00:09:01,839 --> 00:09:05,360
and it's not only for the web as you

00:09:03,839 --> 00:09:07,839
know because we're bringing it to us

00:09:05,360 --> 00:09:09,680
to envoy so it's a little bit misled but

00:09:07,839 --> 00:09:10,480
the idea with actually creating web

00:09:09,680 --> 00:09:13,600
assembly the

00:09:10,480 --> 00:09:16,399
the the major reason for its existence

00:09:13,600 --> 00:09:17,440
is to extending the browser right that's

00:09:16,399 --> 00:09:20,320
why people

00:09:17,440 --> 00:09:22,160
did it and the idea was that they wanted

00:09:20,320 --> 00:09:23,600
an ability to be able to extend the

00:09:22,160 --> 00:09:25,600
browser we

00:09:23,600 --> 00:09:27,279
but you know with that they needed to

00:09:25,600 --> 00:09:28,880
have some use case to make sure that for

00:09:27,279 --> 00:09:30,320
instance it's portable

00:09:28,880 --> 00:09:32,160
right because the browser can run

00:09:30,320 --> 00:09:34,080
everywhere so we need to make sure that

00:09:32,160 --> 00:09:35,360
it doesn't matter which operating system

00:09:34,080 --> 00:09:37,279
you're using

00:09:35,360 --> 00:09:39,040
they need to make sure that it's secure

00:09:37,279 --> 00:09:39,839
because the last thing that they want is

00:09:39,040 --> 00:09:42,720
that the right

00:09:39,839 --> 00:09:43,760
because some wasm extension that is not

00:09:42,720 --> 00:09:45,360
you know

00:09:43,760 --> 00:09:46,720
you know that there's some error prone

00:09:45,360 --> 00:09:48,399
or something like that it will take all

00:09:46,720 --> 00:09:49,760
the browser down that's something that

00:09:48,399 --> 00:09:50,560
we definitely don't want to make sure

00:09:49,760 --> 00:09:53,680
that's fine

00:09:50,560 --> 00:09:55,279
so they created a sandbox

00:09:53,680 --> 00:09:57,360
we want to make sure that it's fast

00:09:55,279 --> 00:09:59,760
because again performance is extremely

00:09:57,360 --> 00:10:03,120
important in the browser as well

00:09:59,760 --> 00:10:04,640
as the sdm envoy

00:10:03,120 --> 00:10:06,320
and you can actually see it that it's

00:10:04,640 --> 00:10:08,160
very interesting is that if

00:10:06,320 --> 00:10:09,600
before if you know before there was and

00:10:08,160 --> 00:10:12,959
people were using um

00:10:09,600 --> 00:10:14,880
javascript javascript is not going to be

00:10:12,959 --> 00:10:17,120
extremely fast and the reason is because

00:10:14,880 --> 00:10:20,399
there's just more things that should be

00:10:17,120 --> 00:10:21,040
you know a process while actually it's

00:10:20,399 --> 00:10:23,519
running

00:10:21,040 --> 00:10:24,720
with webassembly it's basically much

00:10:23,519 --> 00:10:27,519
more a slim

00:10:24,720 --> 00:10:29,920
version of what should be happening when

00:10:27,519 --> 00:10:31,680
the thing is running so you only need to

00:10:29,920 --> 00:10:33,040
uh you don't need to pause you don't

00:10:31,680 --> 00:10:34,399
need to do a lot of stuff it's already

00:10:33,040 --> 00:10:37,120
basically packaged very

00:10:34,399 --> 00:10:37,600
minimum uh the last you know the other

00:10:37,120 --> 00:10:39,519
thing

00:10:37,600 --> 00:10:40,640
as you've all mentioned before you

00:10:39,519 --> 00:10:42,320
probably

00:10:40,640 --> 00:10:44,399
prefer that the customer will be able

00:10:42,320 --> 00:10:47,440
you know your user will be able to use

00:10:44,399 --> 00:10:49,279
any language and for that in web

00:10:47,440 --> 00:10:53,120
assembly they created a very

00:10:49,279 --> 00:10:55,440
interesting you know nice interface

00:10:53,120 --> 00:10:56,320
that basically mean that you can choose

00:10:55,440 --> 00:10:59,200
the language

00:10:56,320 --> 00:11:00,399
of your choice and there is some

00:10:59,200 --> 00:11:02,720
representative

00:11:00,399 --> 00:11:03,440
a individual intermediate representative

00:11:02,720 --> 00:11:07,200
that can

00:11:03,440 --> 00:11:11,279
go to whatever process like eight a

00:11:07,200 --> 00:11:13,839
you know 86 or arm and the last one

00:11:11,279 --> 00:11:14,320
that is that was extremely interesting

00:11:13,839 --> 00:11:16,880
when they

00:11:14,320 --> 00:11:19,760
um when they where they came in is the

00:11:16,880 --> 00:11:23,040
ability to actually run it outside

00:11:19,760 --> 00:11:23,360
the the browser itself and by creating

00:11:23,040 --> 00:11:26,240
this

00:11:23,360 --> 00:11:27,920
uh interface wazi that's what basically

00:11:26,240 --> 00:11:28,800
allowing us to eventually bring it to

00:11:27,920 --> 00:11:32,079
endpoint

00:11:28,800 --> 00:11:35,680
so all those functionality of

00:11:32,079 --> 00:11:38,880
fast secure portable

00:11:35,680 --> 00:11:40,000
and as well as as any language it's what

00:11:38,880 --> 00:11:42,560
basically make

00:11:40,000 --> 00:11:44,640
that attractive technology extremely

00:11:42,560 --> 00:11:45,440
extremely attractive for something like

00:11:44,640 --> 00:11:47,279
endpoint

00:11:45,440 --> 00:11:48,720
and this is what we decided to bring in

00:11:47,279 --> 00:11:49,839
because if you think about if you will

00:11:48,720 --> 00:11:52,160
leverage it

00:11:49,839 --> 00:11:53,279
then we can use any function any

00:11:52,160 --> 00:11:55,120
language

00:11:53,279 --> 00:11:57,360
it will be very fast because it's very

00:11:55,120 --> 00:11:59,040
close to um assembly code

00:11:57,360 --> 00:12:00,639
it will be safe because it will be on

00:11:59,040 --> 00:12:02,800
the same binary

00:12:00,639 --> 00:12:03,920
there is no need to compile because it's

00:12:02,800 --> 00:12:06,000
basically

00:12:03,920 --> 00:12:07,279
extended and but without needed to

00:12:06,000 --> 00:12:09,760
actually compile it

00:12:07,279 --> 00:12:11,360
and it will be x relatively extremely

00:12:09,760 --> 00:12:14,079
easy or easier

00:12:11,360 --> 00:12:16,639
than do the rest so i will hand out to

00:12:14,079 --> 00:12:19,279
you val to explain you how exactly we do

00:12:16,639 --> 00:12:21,120
webassembly and brought it to the envoy

00:12:19,279 --> 00:12:23,120
together with the community

00:12:21,120 --> 00:12:25,279
thank you indeed so let's talk about

00:12:23,120 --> 00:12:27,839
that as mentioned before the

00:12:25,279 --> 00:12:30,480
envoy has a series of filters that can

00:12:27,839 --> 00:12:33,279
act on the request and change it

00:12:30,480 --> 00:12:36,079
and essentially the way wasm is

00:12:33,279 --> 00:12:36,800
integrated onto envoy is as a custom

00:12:36,079 --> 00:12:40,240
filter

00:12:36,800 --> 00:12:42,399
right so as far as envoy is concerned

00:12:40,240 --> 00:12:43,839
most of android core is not aware of

00:12:42,399 --> 00:12:46,079
wasm at all

00:12:43,839 --> 00:12:47,600
but rather wasm is implemented as a

00:12:46,079 --> 00:12:49,920
native onway filter

00:12:47,600 --> 00:12:51,839
as we can see in the next slide that

00:12:49,920 --> 00:12:55,760
filter

00:12:51,839 --> 00:12:59,680
actually talks with the envoy runtime

00:12:55,760 --> 00:13:02,720
and runs wasm code so most of core

00:12:59,680 --> 00:13:05,440
envoy is not really aware

00:13:02,720 --> 00:13:06,000
that it's running wasim and that also

00:13:05,440 --> 00:13:09,680
has the

00:13:06,000 --> 00:13:10,959
advantage of those filters having almost

00:13:09,680 --> 00:13:14,079
the full power

00:13:10,959 --> 00:13:17,440
of a native envoy filter

00:13:14,079 --> 00:13:18,399
and that is accomplished using something

00:13:17,440 --> 00:13:23,279
we call the

00:13:18,399 --> 00:13:27,200
abi so the way the workflow works

00:13:23,279 --> 00:13:30,399
is that a wasan vm is built

00:13:27,200 --> 00:13:31,200
into an voice so we have v8 and we have

00:13:30,399 --> 00:13:33,200
huaven

00:13:31,200 --> 00:13:34,480
and we have an album that's not really

00:13:33,200 --> 00:13:36,000
awesome but more for

00:13:34,480 --> 00:13:38,560
development purposes and testing

00:13:36,000 --> 00:13:38,560
purposes

00:13:38,720 --> 00:13:43,360
when you want to use a wasam filter in

00:13:41,519 --> 00:13:46,800
envoy you create

00:13:43,360 --> 00:13:48,079
a an envoy filter or you instantiate in

00:13:46,800 --> 00:13:50,720
that downward config

00:13:48,079 --> 00:13:53,120
and android filter of typewasm and tell

00:13:50,720 --> 00:13:57,120
the wasan filter to load

00:13:53,120 --> 00:14:01,519
your wasam code with a specific

00:13:57,120 --> 00:14:04,560
wasan vm the wasam envoy native filter

00:14:01,519 --> 00:14:07,680
communicates with your wasm code

00:14:04,560 --> 00:14:09,920
using this interface called the avi

00:14:07,680 --> 00:14:12,240
and in the next slide we see sort of an

00:14:09,920 --> 00:14:14,160
illustration of what this api looks like

00:14:12,240 --> 00:14:16,160
it's all open source on github so you

00:14:14,160 --> 00:14:19,360
can check it out yourself

00:14:16,160 --> 00:14:20,800
essentially it's a definition of c like

00:14:19,360 --> 00:14:23,199
functions that

00:14:20,800 --> 00:14:25,920
pretty much correspond to the envoy

00:14:23,199 --> 00:14:28,040
internal interfaces today

00:14:25,920 --> 00:14:30,639
and allow you to do the same request

00:14:28,040 --> 00:14:31,519
modifications that filters can do today

00:14:30,639 --> 00:14:33,360
so

00:14:31,519 --> 00:14:35,519
again things like we saw before like

00:14:33,360 --> 00:14:39,360
external loads like transformation

00:14:35,519 --> 00:14:42,560
all of this a wasm filter can do

00:14:39,360 --> 00:14:45,120
it has the advantages that the

00:14:42,560 --> 00:14:47,279
you can load it dynamically into android

00:14:45,120 --> 00:14:49,600
you don't need to recompile android you

00:14:47,279 --> 00:14:52,720
don't even need to restart android

00:14:49,600 --> 00:14:54,880
right it's all loaded dynamically as

00:14:52,720 --> 00:14:56,839
as regular filters can be loaded

00:14:54,880 --> 00:15:00,399
dynamically

00:14:56,839 --> 00:15:01,839
and it has the advantage of you being

00:15:00,399 --> 00:15:04,320
able to externally

00:15:01,839 --> 00:15:05,920
write and develop it if we go in the

00:15:04,320 --> 00:15:08,079
next site we can see that

00:15:05,920 --> 00:15:10,079
today there are various languages

00:15:08,079 --> 00:15:13,360
already supported so you

00:15:10,079 --> 00:15:15,680
in order to essentially write a filter

00:15:13,360 --> 00:15:16,959
you can write it using the raw sdk but

00:15:15,680 --> 00:15:20,160
it'd be much

00:15:16,959 --> 00:15:22,800
easier to use a language specific sdk

00:15:20,160 --> 00:15:24,720
that brings the native language concepts

00:15:22,800 --> 00:15:26,560
to your development flow so today we

00:15:24,720 --> 00:15:27,440
have is the case for a c plus plus

00:15:26,560 --> 00:15:30,880
assembly script

00:15:27,440 --> 00:15:33,360
and rust there is an additional tiny go

00:15:30,880 --> 00:15:35,199
and we have a list of them all in our a

00:15:33,360 --> 00:15:36,320
wasmery repo and we'll refer to that

00:15:35,199 --> 00:15:39,199
later

00:15:36,320 --> 00:15:39,759
and using the sdk allows you a much

00:15:39,199 --> 00:15:42,959
easier

00:15:39,759 --> 00:15:44,800
development experience than the raw abi

00:15:42,959 --> 00:15:46,959
because they abstract much of the low

00:15:44,800 --> 00:15:49,199
level details of awesome

00:15:46,959 --> 00:15:51,839
of you know memory management sandboxing

00:15:49,199 --> 00:15:51,839
all that stuff

00:15:52,079 --> 00:15:55,680
so if we'll move on to the next slide we

00:15:54,079 --> 00:15:58,800
can summarize that

00:15:55,680 --> 00:16:01,680
and the way it works today is that you

00:15:58,800 --> 00:16:02,480
use a language specific sdk to build

00:16:01,680 --> 00:16:05,839
your

00:16:02,480 --> 00:16:07,680
wasan filter and then the wasam filter

00:16:05,839 --> 00:16:10,800
that you wrote communicates with the

00:16:07,680 --> 00:16:15,199
envoy wasm native filter

00:16:10,800 --> 00:16:16,959
using the api in a wason vm of your

00:16:15,199 --> 00:16:21,199
choice where currently

00:16:16,959 --> 00:16:23,199
v8 and huaweim are supported

00:16:21,199 --> 00:16:24,880
and with that we can summarize and we

00:16:23,199 --> 00:16:27,600
can see that we achieve

00:16:24,880 --> 00:16:28,639
almost all our uh requirements from

00:16:27,600 --> 00:16:30,880
before

00:16:28,639 --> 00:16:31,680
and the one thing the one point of

00:16:30,880 --> 00:16:34,880
friction

00:16:31,680 --> 00:16:37,440
is how to get the wasa module

00:16:34,880 --> 00:16:38,800
from your developer laptop into the

00:16:37,440 --> 00:16:40,880
cluster

00:16:38,800 --> 00:16:43,199
and i let it did talk a little bit more

00:16:40,880 --> 00:16:44,160
about how this developer experience is

00:16:43,199 --> 00:16:47,519
solved using

00:16:44,160 --> 00:16:47,519
a tool we created

00:16:48,000 --> 00:16:52,320
thanks you well so basically when we

00:16:49,920 --> 00:16:54,240
looked at this and we understand the

00:16:52,320 --> 00:16:55,440
amazing power that it's giving right now

00:16:54,240 --> 00:16:57,759
to the user

00:16:55,440 --> 00:16:59,120
i also saw this tweet and that's what is

00:16:57,759 --> 00:17:02,560
from solomon hike

00:16:59,120 --> 00:17:05,760
the founder of uh docker and basically

00:17:02,560 --> 00:17:06,240
link cloud is one of the the the the

00:17:05,760 --> 00:17:08,959
leader

00:17:06,240 --> 00:17:09,600
of webassembly ecosystem basically

00:17:08,959 --> 00:17:12,880
announcing

00:17:09,600 --> 00:17:16,720
wazi solomon hike mentioned that

00:17:12,880 --> 00:17:19,360
if wazi and wasn't was exist in 2008

00:17:16,720 --> 00:17:20,000
that we will never created a docker

00:17:19,360 --> 00:17:21,839
right

00:17:20,000 --> 00:17:23,839
and that's basically gave me kind of

00:17:21,839 --> 00:17:25,439
like the connotation of the fact that as

00:17:23,839 --> 00:17:27,600
you well mentioned before it will be

00:17:25,439 --> 00:17:29,440
extremely hard like it's really nice

00:17:27,600 --> 00:17:30,799
technology but it's extremely hard to go

00:17:29,440 --> 00:17:32,400
about doing it

00:17:30,799 --> 00:17:34,240
and when you think about it this is what

00:17:32,400 --> 00:17:36,960
happened with the container ecosystem

00:17:34,240 --> 00:17:38,960
because back then you know google did an

00:17:36,960 --> 00:17:40,240
amazing job google and the ecosystem to

00:17:38,960 --> 00:17:42,799
basically created the

00:17:40,240 --> 00:17:43,840
linux container but to make the linux

00:17:42,799 --> 00:17:47,360
container as

00:17:43,840 --> 00:17:50,160
popular right that everybody can use it

00:17:47,360 --> 00:17:51,360
including us we need a doctor to make it

00:17:50,160 --> 00:17:53,600
very simple to use

00:17:51,360 --> 00:17:54,640
so when i saw that i realized that this

00:17:53,600 --> 00:17:57,200
is something that we can

00:17:54,640 --> 00:17:59,039
help with and it and there is a lot of

00:17:57,200 --> 00:18:01,520
of

00:17:59,039 --> 00:18:02,160
similarity between what happened with

00:18:01,520 --> 00:18:03,440
docker

00:18:02,160 --> 00:18:05,440
and what happened right now with web

00:18:03,440 --> 00:18:07,120
assembly and that's why we decided to

00:18:05,440 --> 00:18:09,360
create webassembly hub

00:18:07,120 --> 00:18:11,039
so what is web assembly hub so it's very

00:18:09,360 --> 00:18:12,720
familiar it's basically giving you the

00:18:11,039 --> 00:18:14,559
docker like experience

00:18:12,720 --> 00:18:15,840
for web assembly bringing into android

00:18:14,559 --> 00:18:18,720
platform so

00:18:15,840 --> 00:18:19,679
in the natural is is very very simple uh

00:18:18,720 --> 00:18:21,919
interfaces

00:18:19,679 --> 00:18:23,600
it's a command line and it's a registry

00:18:21,919 --> 00:18:24,559
and i will let actually you will show

00:18:23,600 --> 00:18:28,080
you that

00:18:24,559 --> 00:18:28,480
instead of me actually talk about it but

00:18:28,080 --> 00:18:30,559
by

00:18:28,480 --> 00:18:32,320
actually bringing this experience as

00:18:30,559 --> 00:18:35,039
well to the user we kind of like

00:18:32,320 --> 00:18:36,640
checked everything every thing that we

00:18:35,039 --> 00:18:39,520
wanted on the list right

00:18:36,640 --> 00:18:40,080
it's use any language it's fast it's

00:18:39,520 --> 00:18:42,559
safe

00:18:40,080 --> 00:18:43,679
there's no need to compile and now with

00:18:42,559 --> 00:18:46,880
webassembly app it's

00:18:43,679 --> 00:18:48,960
also extremely simple and now

00:18:46,880 --> 00:18:51,520
i will lend it to you val to show us

00:18:48,960 --> 00:18:51,520
quick demo

00:18:51,600 --> 00:18:56,000
thank you let me share my screen and i

00:18:54,559 --> 00:18:59,520
will do a quick demonstration

00:18:56,000 --> 00:19:02,320
of one's me are a tool for developer

00:18:59,520 --> 00:19:02,320
experience

00:19:06,559 --> 00:19:10,400
all right i hope everybody can see my

00:19:09,600 --> 00:19:12,799
ide

00:19:10,400 --> 00:19:13,840
let me make it a bit bigger let's start

00:19:12,799 --> 00:19:15,520
with the demo so

00:19:13,840 --> 00:19:16,960
in this demo we're going to show how we

00:19:15,520 --> 00:19:19,520
can use wasmi

00:19:16,960 --> 00:19:21,039
to create a nice developer workflow of

00:19:19,520 --> 00:19:23,520
creating building

00:19:21,039 --> 00:19:25,360
and distributing and running are web

00:19:23,520 --> 00:19:28,480
assembly envoy filters

00:19:25,360 --> 00:19:31,440
so the first thing we'll start with is

00:19:28,480 --> 00:19:33,760
with wasmi in it and was me in it

00:19:31,440 --> 00:19:34,640
essentially has a template of a filter

00:19:33,760 --> 00:19:36,840
so we can

00:19:34,640 --> 00:19:38,000
you know have something to start with

00:19:36,840 --> 00:19:41,280
right

00:19:38,000 --> 00:19:43,200
kind of like the react app template

00:19:41,280 --> 00:19:45,039
and when we run this command we choose

00:19:43,200 --> 00:19:47,280
the language we would like to use we'll

00:19:45,039 --> 00:19:51,760
use assembly script and we choose

00:19:47,280 --> 00:19:55,360
the platform we want to support the wasm

00:19:51,760 --> 00:19:58,400
has multiple avi versions so this step

00:19:55,360 --> 00:19:58,640
explains to us which version of the glue

00:19:58,400 --> 00:20:02,400
and

00:19:58,640 --> 00:20:02,400
zeo this builder will support

00:20:02,559 --> 00:20:05,760
once it's done you can see that it has

00:20:04,559 --> 00:20:09,679
extracted

00:20:05,760 --> 00:20:12,480
a our wasam template and we can open

00:20:09,679 --> 00:20:14,320
a bit of code right now inside of the

00:20:12,480 --> 00:20:17,760
new filter folder

00:20:14,320 --> 00:20:20,159
the index cs in the assembly folder

00:20:17,760 --> 00:20:22,000
and you can see this is a assembly

00:20:20,159 --> 00:20:23,039
script file it's very similar in the

00:20:22,000 --> 00:20:26,159
syntax

00:20:23,039 --> 00:20:29,280
to typescript and now just for a

00:20:26,159 --> 00:20:30,960
fun we'll change this a little bit so

00:20:29,280 --> 00:20:33,520
what this filter does

00:20:30,960 --> 00:20:35,440
it's a very simple filter and on

00:20:33,520 --> 00:20:37,039
response headers right whenever a

00:20:35,440 --> 00:20:41,600
response comes into

00:20:37,039 --> 00:20:42,799
envoy it appends additional header onto

00:20:41,600 --> 00:20:44,559
the response

00:20:42,799 --> 00:20:46,080
and now i can just change this from

00:20:44,559 --> 00:20:50,320
hello world to a low

00:20:46,080 --> 00:20:53,840
sm it wasam and save

00:20:50,320 --> 00:20:56,880
now do note that this

00:20:53,840 --> 00:20:58,159
uh what we'll see is how we build and

00:20:56,880 --> 00:21:02,880
inject this filter

00:20:58,159 --> 00:21:06,080
onto envoy so the next step

00:21:02,880 --> 00:21:07,120
would be to build the filter and we do

00:21:06,080 --> 00:21:10,159
that using

00:21:07,120 --> 00:21:12,400
was me build once we build takes an

00:21:10,159 --> 00:21:14,159
argument what builder type to use in our

00:21:12,400 --> 00:21:16,320
case assembly script

00:21:14,159 --> 00:21:17,360
and the image tag to use and this is a

00:21:16,320 --> 00:21:20,159
very similar

00:21:17,360 --> 00:21:22,799
concept to docker images and in our case

00:21:20,159 --> 00:21:24,799
the image tag is webassembly have io

00:21:22,799 --> 00:21:26,320
slash eval which is my username or

00:21:24,799 --> 00:21:29,679
webserie have a yo

00:21:26,320 --> 00:21:30,880
and then the imagery name add header and

00:21:29,679 --> 00:21:32,799
a version

00:21:30,880 --> 00:21:33,919
and finally dot to build the local

00:21:32,799 --> 00:21:36,799
directory

00:21:33,919 --> 00:21:38,480
so this now pulls in a build container

00:21:36,799 --> 00:21:40,000
with all the build tools you need

00:21:38,480 --> 00:21:41,600
so you don't need to have npm

00:21:40,000 --> 00:21:45,440
pre-installed and

00:21:41,600 --> 00:21:49,280
builds the filter for us

00:21:45,440 --> 00:21:49,280
and let's give it a second to finish

00:21:50,640 --> 00:21:54,159
all right it as you can see it created a

00:21:53,280 --> 00:21:57,840
filter

00:21:54,159 --> 00:21:58,240
with our image tag and that filter has

00:21:57,840 --> 00:22:01,440
our

00:21:58,240 --> 00:22:03,520
wasam already in it

00:22:01,440 --> 00:22:05,280
and we can see if we'll do osmi list you

00:22:03,520 --> 00:22:07,919
can see that we have

00:22:05,280 --> 00:22:09,840
this image listed as an image that was

00:22:07,919 --> 00:22:11,919
just built

00:22:09,840 --> 00:22:13,200
now in order to distribute this we can

00:22:11,919 --> 00:22:15,200
do wasmi push

00:22:13,200 --> 00:22:17,200
now this is very very similar to how

00:22:15,200 --> 00:22:20,559
docker push work

00:22:17,200 --> 00:22:22,799
and in fact we even use the same code

00:22:20,559 --> 00:22:24,799
and was me push will push this to

00:22:22,799 --> 00:22:27,760
webassembly hub

00:22:24,799 --> 00:22:29,039
speaking of web assembly hub let's take

00:22:27,760 --> 00:22:33,280
a look at that

00:22:29,039 --> 00:22:35,919
so we have here the webassembly hub open

00:22:33,280 --> 00:22:38,640
and this is our portal to essentially

00:22:35,919 --> 00:22:42,000
help you discover deploy and pull

00:22:38,640 --> 00:22:42,559
and publish all your extensions and as

00:22:42,000 --> 00:22:44,559
you can see

00:22:42,559 --> 00:22:46,240
let's explore this a little bit let's

00:22:44,559 --> 00:22:47,679
view more repositories

00:22:46,240 --> 00:22:50,960
you can see that there's a lot of

00:22:47,679 --> 00:22:53,200
existing filters already from

00:22:50,960 --> 00:22:54,240
users in the community just sign up it's

00:22:53,200 --> 00:22:57,600
free to sign up

00:22:54,240 --> 00:22:59,440
and push your code and we can filter by

00:22:57,600 --> 00:23:01,679
label to kind of help you narrow down by

00:22:59,440 --> 00:23:04,960
use case if we look for example

00:23:01,679 --> 00:23:07,440
at the security label we can see

00:23:04,960 --> 00:23:09,280
this filter that has a nice description

00:23:07,440 --> 00:23:10,880
to it and then it also gives you the

00:23:09,280 --> 00:23:12,960
command you need to pull it

00:23:10,880 --> 00:23:14,320
so you can do was me pull to pull this

00:23:12,960 --> 00:23:17,840
filter from

00:23:14,320 --> 00:23:22,000
a web assembly hub locally into

00:23:17,840 --> 00:23:24,880
your local uh laptop

00:23:22,000 --> 00:23:26,159
now and let's log in just to show you

00:23:24,880 --> 00:23:28,799
how my

00:23:26,159 --> 00:23:30,240
user looks like and you can see that i'm

00:23:28,799 --> 00:23:32,159
also a member of the solo

00:23:30,240 --> 00:23:34,640
organization and these are fillers

00:23:32,159 --> 00:23:37,440
published to the solo org but if i go to

00:23:34,640 --> 00:23:38,559
my own user you can see the add header

00:23:37,440 --> 00:23:41,440
filter that we

00:23:38,559 --> 00:23:41,440
just pushed

00:23:43,200 --> 00:23:49,840
all right let's continue with that demo

00:23:46,960 --> 00:23:52,880
so once the filter is all built and all

00:23:49,840 --> 00:23:55,279
push we can deploy it so once we deploy

00:23:52,880 --> 00:23:58,240
here i'll just deploy locally to android

00:23:55,279 --> 00:24:01,440
to have it just run fast

00:23:58,240 --> 00:24:04,240
and let's run this command deploy we

00:24:01,440 --> 00:24:06,240
currently support a glue and hcl

00:24:04,240 --> 00:24:07,440
or local envoy what it'll do is

00:24:06,240 --> 00:24:10,720
essentially

00:24:07,440 --> 00:24:11,279
pull in the image if needed and then run

00:24:10,720 --> 00:24:14,320
it

00:24:11,279 --> 00:24:15,440
and essentially give you a very quick

00:24:14,320 --> 00:24:18,320
and easy way

00:24:15,440 --> 00:24:20,320
to get your filter loaded and running

00:24:18,320 --> 00:24:21,919
now let's see that everything is working

00:24:20,320 --> 00:24:25,200
if everything is working

00:24:21,919 --> 00:24:26,720
i expect to see this hello wassum header

00:24:25,200 --> 00:24:28,880
on the response

00:24:26,720 --> 00:24:31,039
so let's do a head request just so we

00:24:28,880 --> 00:24:33,679
can get some headers

00:24:31,039 --> 00:24:35,440
and you can see here the request was

00:24:33,679 --> 00:24:38,640
sent successfully

00:24:35,440 --> 00:24:42,480
and the response indeed contains the

00:24:38,640 --> 00:24:46,159
hello wasam response header that i just

00:24:42,480 --> 00:24:48,799
created in this filter

00:24:46,159 --> 00:24:50,799
and that's it that is our demo for wasmi

00:24:48,799 --> 00:24:54,559
the tools that allow you to

00:24:50,799 --> 00:24:58,720
build publish and deploy

00:24:54,559 --> 00:25:02,559
your web assembly envoy filters

00:24:58,720 --> 00:25:05,520
take it away dude for some final words

00:25:02,559 --> 00:25:05,520
thanks so much you well

00:25:08,559 --> 00:25:12,880
so guys as you see we are extremely

00:25:10,640 --> 00:25:15,360
extremely passionate about

00:25:12,880 --> 00:25:17,120
everything related to wasm and the

00:25:15,360 --> 00:25:19,919
extension of service mesh and

00:25:17,120 --> 00:25:21,679
envoy specifically uh we think that this

00:25:19,919 --> 00:25:24,159
is the future of the cloud

00:25:21,679 --> 00:25:26,240
we worked very hard to create a tooling

00:25:24,159 --> 00:25:27,760
to make it extremely simple to use it

00:25:26,240 --> 00:25:29,440
and we really hope that everybody will

00:25:27,760 --> 00:25:31,360
use it running as

00:25:29,440 --> 00:25:32,880
envoy in production for a lot of big

00:25:31,360 --> 00:25:34,640
huge enterprise

00:25:32,880 --> 00:25:36,960
our customers i can tell you that this

00:25:34,640 --> 00:25:40,159
is so valuable and extremely

00:25:36,960 --> 00:25:41,520
desired um look everything that we're

00:25:40,159 --> 00:25:42,559
doing most of the stuff that we're doing

00:25:41,520 --> 00:25:45,760
is open source

00:25:42,559 --> 00:25:47,679
including glue and uh in a service mesh

00:25:45,760 --> 00:25:48,720
all the work that we're doing is almost

00:25:47,679 --> 00:25:52,000
open source

00:25:48,720 --> 00:25:55,279
um come you know follow us on twitter uh

00:25:52,000 --> 00:25:57,200
go visit our repository and specifically

00:25:55,279 --> 00:25:59,039
the wasa repository

00:25:57,200 --> 00:26:00,480
there you will find everything that solo

00:25:59,039 --> 00:26:03,840
is doing including

00:26:00,480 --> 00:26:04,880
a spec for awesome oci image so please

00:26:03,840 --> 00:26:06,799
check it out

00:26:04,880 --> 00:26:08,080
and we would love to take you you know

00:26:06,799 --> 00:26:11,840
to get any feedback

00:26:08,080 --> 00:26:11,840

YouTube URL: https://www.youtube.com/watch?v=qZqN9PYzxPY


