Title: Introduction to SIG Cluster Lifecycle - Lubomir I. Ivanov, VMware & Justin Santa Barbara, Google
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4â€“7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Introduction to SIG Cluster Lifecycle - Lubomir I. Ivanov, VMware & Justin Santa Barbara, Google 

The Cluster Lifecycle SIG is the Special Interest Group that is responsible for building the user experience for deploying and upgrading Kubernetes clusters. Our mission is examining how we should change Kubernetes to make it easier to operate. Since the group's formation we have focused on creating kubeadm, a streamlined installer tool and building block to simplify the installation and upgrade experience, and building a Cluster API to provide an abstraction of machines across different deployment environments and a common control plane configuration. In this introduction session, we will present the SIG's mission statement, review recent accomplishments, and discuss our future plans, where you are very welcome to contribute to the discussion. We will also focus on how new contributors can get involved in helping shape the future of Kubernetes' cluster lifecycle management. 

https://sched.co/ekH4
Captions: 
	00:00:04,480 --> 00:00:07,440
hello everybody

00:00:05,440 --> 00:00:09,760
welcome to the introduction to sig

00:00:07,440 --> 00:00:11,759
cluster lifecycle

00:00:09,760 --> 00:00:13,840
my name is justin santa barbara i am one

00:00:11,759 --> 00:00:16,160
of the sig cluster lifecycle co-leads

00:00:13,840 --> 00:00:18,400
i'm also a software engineer at google

00:00:16,160 --> 00:00:20,000
my github handle is just an sb

00:00:18,400 --> 00:00:21,680
lubermir and myself are going to be

00:00:20,000 --> 00:00:23,519
giving this presentation together

00:00:21,680 --> 00:00:25,920
but we are representing the work of a

00:00:23,519 --> 00:00:28,080
great many people within the sig

00:00:25,920 --> 00:00:30,480
hello my name is loubovanov i'm a

00:00:28,080 --> 00:00:33,040
sequester life cycle colleague

00:00:30,480 --> 00:00:34,719
software engineer at vmware's open

00:00:33,040 --> 00:00:39,280
source program office

00:00:34,719 --> 00:00:39,280
and my github handle is neolit123

00:00:39,520 --> 00:00:42,640
so here is what we are going to talk

00:00:40,960 --> 00:00:45,280
about today we are going to

00:00:42,640 --> 00:00:46,879
explain what is sequence the lifecycle

00:00:45,280 --> 00:00:48,640
what is the mission and philosophy of

00:00:46,879 --> 00:00:50,640
the special interest group

00:00:48,640 --> 00:00:52,719
also we are going to cover the stack of

00:00:50,640 --> 00:00:54,239
subprojects that we maintain

00:00:52,719 --> 00:00:56,800
in particular we are going to highlight

00:00:54,239 --> 00:00:59,359
three of them these are cluster api

00:00:56,800 --> 00:01:01,120
component config and image builder and

00:00:59,359 --> 00:01:02,960
finally we're going to show you how you

00:01:01,120 --> 00:01:06,000
can get involved into contributing to

00:01:02,960 --> 00:01:06,000
the special interest group

00:01:07,439 --> 00:01:11,200
what is sequence the lifecycle

00:01:11,680 --> 00:01:15,680
in kubernetes we have special interest

00:01:13,439 --> 00:01:18,799
groups also known as six

00:01:15,680 --> 00:01:21,360
and sequester lifecycle is one of those

00:01:18,799 --> 00:01:22,720
all the six also have charter documents

00:01:21,360 --> 00:01:25,200
and a chartered document

00:01:22,720 --> 00:01:27,200
is something that defines what are the

00:01:25,200 --> 00:01:28,400
goals and long goals of a particular

00:01:27,200 --> 00:01:31,200
group

00:01:28,400 --> 00:01:33,360
sequester lifecycle's objective is to

00:01:31,200 --> 00:01:35,200
simplify the creation configuration

00:01:33,360 --> 00:01:36,799
upgrade downgrade and tear down of

00:01:35,200 --> 00:01:40,320
kubernetes clusters

00:01:36,799 --> 00:01:42,000
and their components

00:01:40,320 --> 00:01:44,240
as a special interest group you also

00:01:42,000 --> 00:01:46,159
have a vision to develop the tooling

00:01:44,240 --> 00:01:47,280
necessary to build a highly automated

00:01:46,159 --> 00:01:50,320
meta cloud

00:01:47,280 --> 00:01:53,280
americorps here means imagine

00:01:50,320 --> 00:01:54,720
something that is a kubernetes cluster

00:01:53,280 --> 00:01:57,759
that can be deployed on

00:01:54,720 --> 00:01:59,119
any cloud provider we want to avoid the

00:01:57,759 --> 00:02:00,880
pitfalls of the past

00:01:59,119 --> 00:02:02,880
because we had some unsuccessful

00:02:00,880 --> 00:02:05,040
experiments in the past

00:02:02,880 --> 00:02:06,240
everything should be declarative api

00:02:05,040 --> 00:02:10,160
driven

00:02:06,240 --> 00:02:12,560
arcades like deployment type of style

00:02:10,160 --> 00:02:15,040
and managing these questions should be

00:02:12,560 --> 00:02:18,000
as easy as managing the

00:02:15,040 --> 00:02:20,080
kubernetes objects like pots that is a

00:02:18,000 --> 00:02:23,280
familiar pattern to everyone

00:02:20,080 --> 00:02:26,560
we want to make the 80 use case simple

00:02:23,280 --> 00:02:27,680
and the 20 use case possible always

00:02:26,560 --> 00:02:29,599
consider

00:02:27,680 --> 00:02:31,440
a simple configuration available to

00:02:29,599 --> 00:02:33,519
everyone but

00:02:31,440 --> 00:02:34,480
there has to be this advanced

00:02:33,519 --> 00:02:36,640
configuration

00:02:34,480 --> 00:02:38,480
that is still possible to the rest of

00:02:36,640 --> 00:02:40,720
the users

00:02:38,480 --> 00:02:42,239
we also want to commoditize or

00:02:40,720 --> 00:02:45,200
standardize

00:02:42,239 --> 00:02:47,840
kate's cluster deployments so if

00:02:45,200 --> 00:02:49,440
somebody is looking at your cluster

00:02:47,840 --> 00:02:51,280
eventually they're going to know that

00:02:49,440 --> 00:02:54,000
okay this is following

00:02:51,280 --> 00:02:57,519
a standardized way a standardized

00:02:54,000 --> 00:02:57,519
pattern for coastal deployment

00:02:58,000 --> 00:03:01,519
so in this slide we have a diagram of

00:02:59,680 --> 00:03:03,040
the current stack of tools that we are

00:03:01,519 --> 00:03:04,640
working on

00:03:03,040 --> 00:03:07,040
at the bottom we have eight serie adm

00:03:04,640 --> 00:03:10,080
and cddm is potentially a manager of

00:03:07,040 --> 00:03:12,239
etsy requesters a cli and

00:03:10,080 --> 00:03:13,519
a library that is working progress

00:03:12,239 --> 00:03:16,640
potentially consumable

00:03:13,519 --> 00:03:17,280
by high level tools on top we have cube

00:03:16,640 --> 00:03:20,640
adm

00:03:17,280 --> 00:03:23,200
cube adm is a coaster bootstrapper as a

00:03:20,640 --> 00:03:26,159
lot of people should know already

00:03:23,200 --> 00:03:28,480
equestrados is a project where we are

00:03:26,159 --> 00:03:31,200
working on standardizing the way

00:03:28,480 --> 00:03:31,920
adults are deployed in a cluster and

00:03:31,200 --> 00:03:34,239
they're

00:03:31,920 --> 00:03:36,799
managed as a life cycle like how do you

00:03:34,239 --> 00:03:38,720
upgrade them how do you downgrade them

00:03:36,799 --> 00:03:40,640
quasar api a lot of people should be

00:03:38,720 --> 00:03:42,239
familiar with quest api as well this is

00:03:40,640 --> 00:03:44,480
a project where you can

00:03:42,239 --> 00:03:45,280
create clusters using a declarative

00:03:44,480 --> 00:03:47,680
model

00:03:45,280 --> 00:03:49,280
it's very similar to the kubernetes

00:03:47,680 --> 00:03:53,360
declarative patterns

00:03:49,280 --> 00:03:55,519
so if you combine these two these tools

00:03:53,360 --> 00:03:57,040
you can potentially produce artifacts

00:03:55,519 --> 00:03:57,680
that you can then fit to your image

00:03:57,040 --> 00:04:00,239
builder

00:03:57,680 --> 00:04:02,000
an image builder can create like a

00:04:00,239 --> 00:04:03,599
virtual machine image for you

00:04:02,000 --> 00:04:05,760
and the virtual machine image can then

00:04:03,599 --> 00:04:06,080
be fed to the cosa provisioner which is

00:04:05,760 --> 00:04:08,640
a

00:04:06,080 --> 00:04:10,640
layer on top the costa provisional can

00:04:08,640 --> 00:04:14,560
create you a cluster

00:04:10,640 --> 00:04:16,560
that uses this virtual machine image

00:04:14,560 --> 00:04:19,120
and finally on the left we have

00:04:16,560 --> 00:04:21,919
component config corporate config's idea

00:04:19,120 --> 00:04:23,919
is that we can configure all these

00:04:21,919 --> 00:04:27,120
components on the right side

00:04:23,919 --> 00:04:29,199
with the declarative api

00:04:27,120 --> 00:04:30,479
that is very similar to the kubernetes

00:04:29,199 --> 00:04:34,560
api

00:04:30,479 --> 00:04:34,560
and in fact it uses the same machinery

00:04:35,199 --> 00:04:39,600
as a group we are also trying to follow

00:04:37,680 --> 00:04:43,120
a particular philosophy

00:04:39,600 --> 00:04:45,919
and that is arguably the unix philosophy

00:04:43,120 --> 00:04:46,479
we want to make each program do one

00:04:45,919 --> 00:04:48,960
thing

00:04:46,479 --> 00:04:50,320
and do it very well the boundaries

00:04:48,960 --> 00:04:52,720
between the

00:04:50,320 --> 00:04:54,720
separate projects should be clear and

00:04:52,720 --> 00:04:57,360
there should not be ideally

00:04:54,720 --> 00:04:58,720
that much overlap every computing

00:04:57,360 --> 00:05:01,759
infrastructure project

00:04:58,720 --> 00:05:04,560
that initially meets one need well

00:05:01,759 --> 00:05:04,960
will eventually expand in scope to only

00:05:04,560 --> 00:05:07,759
meet

00:05:04,960 --> 00:05:09,440
several needs poorly this is something

00:05:07,759 --> 00:05:11,199
that we have to avoid

00:05:09,440 --> 00:05:12,960
we also expect the output of every

00:05:11,199 --> 00:05:13,840
program to become the input of another

00:05:12,960 --> 00:05:16,880
program

00:05:13,840 --> 00:05:21,840
and combining all the tools that we have

00:05:16,880 --> 00:05:21,840
we want to create this voltron like

00:05:22,840 --> 00:05:26,080
software

00:05:24,000 --> 00:05:27,360
on this slide you can see a seldo

00:05:26,080 --> 00:05:30,479
voltron example

00:05:27,360 --> 00:05:31,360
it's a immutable node update type of

00:05:30,479 --> 00:05:33,680
scenario

00:05:31,360 --> 00:05:34,720
so the left side we have a ci that

00:05:33,680 --> 00:05:38,240
triggers

00:05:34,720 --> 00:05:42,639
a rebuild of artifacts notifies

00:05:38,240 --> 00:05:44,160
an operator to update customer manifests

00:05:42,639 --> 00:05:46,560
that are potentially consumed by the

00:05:44,160 --> 00:05:48,320
cluster api the cluster api can then

00:05:46,560 --> 00:05:50,320
perform a rolling update

00:05:48,320 --> 00:05:52,720
then a bootstrap provider which in this

00:05:50,320 --> 00:05:57,759
case is cube atm to trigger

00:05:52,720 --> 00:05:57,759
the new nodes to join the cluster

00:05:58,160 --> 00:06:01,280
during kubecon eu 2020 we created a

00:06:00,639 --> 00:06:03,520
survey

00:06:01,280 --> 00:06:05,120
to let our users get back to us with

00:06:03,520 --> 00:06:08,000
some feedback

00:06:05,120 --> 00:06:09,919
the main takeaways are users are still

00:06:08,000 --> 00:06:11,919
struggling to keep up with the release

00:06:09,919 --> 00:06:14,319
cadence of kubernetes

00:06:11,919 --> 00:06:14,960
currently there is a proposal to shift

00:06:14,319 --> 00:06:17,360
to a

00:06:14,960 --> 00:06:18,319
three releases per year process instead

00:06:17,360 --> 00:06:20,560
of four

00:06:18,319 --> 00:06:22,639
this seems to be a very favorable option

00:06:20,560 --> 00:06:24,800
by a lot of users

00:06:22,639 --> 00:06:26,639
the upgrade process can be difficult due

00:06:24,800 --> 00:06:29,360
to core api changes

00:06:26,639 --> 00:06:31,280
and applications and removals basically

00:06:29,360 --> 00:06:34,560
we saw a number of comments about this

00:06:31,280 --> 00:06:38,160
as direct responses in the survey itself

00:06:34,560 --> 00:06:41,840
ubuntu as an operating system for vms

00:06:38,160 --> 00:06:44,639
docker as a container runtime using

00:06:41,840 --> 00:06:45,759
docker shim in this case and calico as a

00:06:44,639 --> 00:06:47,840
cni

00:06:45,759 --> 00:06:50,560
appear to still be the most used

00:06:47,840 --> 00:06:52,720
projects in their respective areas

00:06:50,560 --> 00:06:54,639
we also saw that projects like quasar

00:06:52,720 --> 00:06:55,280
api and cube adm are gaining more

00:06:54,639 --> 00:06:57,360
traction

00:06:55,280 --> 00:06:58,400
and are getting positive feedback from

00:06:57,360 --> 00:07:00,080
the users but

00:06:58,400 --> 00:07:03,840
there is still desire to improve the

00:07:00,080 --> 00:07:03,840
overall ux of these projects

00:07:04,479 --> 00:07:07,520
in this section we would like to

00:07:05,919 --> 00:07:10,560
highlight some projects that we are

00:07:07,520 --> 00:07:10,560
currently working on

00:07:10,639 --> 00:07:14,800
okay i'm going to highlight another one

00:07:12,160 --> 00:07:17,199
of our projects the cluster api

00:07:14,800 --> 00:07:18,720
cluster api is building a declarative

00:07:17,199 --> 00:07:22,560
kubernetes style api

00:07:18,720 --> 00:07:24,400
for creation and management of clusters

00:07:22,560 --> 00:07:25,680
it also manages some of the

00:07:24,400 --> 00:07:28,479
infrastructure that is

00:07:25,680 --> 00:07:31,759
cluster scoped things like networks or

00:07:28,479 --> 00:07:33,759
iam policy from your cloud provider

00:07:31,759 --> 00:07:35,680
it's focused around a declarative

00:07:33,759 --> 00:07:38,960
specification of the machines

00:07:35,680 --> 00:07:41,520
that become the nodes of the cluster

00:07:38,960 --> 00:07:43,440
some important things to understand this

00:07:41,520 --> 00:07:44,080
is different from the kubernetes cloud

00:07:43,440 --> 00:07:46,560
provider

00:07:44,080 --> 00:07:47,759
which provides workload cloud resources

00:07:46,560 --> 00:07:50,319
like volumes

00:07:47,759 --> 00:07:51,840
and load balancers this is provisioning

00:07:50,319 --> 00:07:55,280
similar infrastructure but

00:07:51,840 --> 00:07:57,039
for the cluster itself and

00:07:55,280 --> 00:08:00,000
one of the important design decisions

00:07:57,039 --> 00:08:02,800
was that the specification of a machine

00:08:00,000 --> 00:08:04,639
is immutable but it's interesting in

00:08:02,800 --> 00:08:05,360
that cluster api still provides the

00:08:04,639 --> 00:08:08,639
ability to

00:08:05,360 --> 00:08:08,639
upgrade the cluster

00:08:09,199 --> 00:08:13,440
you may be asking yourself how is this

00:08:11,199 --> 00:08:14,560
possible how can the machine be

00:08:13,440 --> 00:08:16,960
immutable

00:08:14,560 --> 00:08:17,759
yet the cluster can be upgraded and

00:08:16,960 --> 00:08:20,319
therefore be

00:08:17,759 --> 00:08:21,759
mutable and the answer is that we follow

00:08:20,319 --> 00:08:24,080
a similar pattern

00:08:21,759 --> 00:08:26,000
as kubernetes does we don't just want to

00:08:24,080 --> 00:08:27,919
use kubernetes crds

00:08:26,000 --> 00:08:29,840
we want to follow the kubernetes api

00:08:27,919 --> 00:08:31,520
design patterns

00:08:29,840 --> 00:08:32,959
and in kubernetes there is indeed a

00:08:31,520 --> 00:08:35,599
similar design pattern

00:08:32,959 --> 00:08:37,599
pods are immutable but pods are wrapped

00:08:35,599 --> 00:08:38,719
by replica sets which runs a number of

00:08:37,599 --> 00:08:41,680
them

00:08:38,719 --> 00:08:44,080
a replica set remains immutable but a

00:08:41,680 --> 00:08:45,519
deployment creates mutability over those

00:08:44,080 --> 00:08:47,839
replica sets

00:08:45,519 --> 00:08:50,000
uh it is able to create a new replica

00:08:47,839 --> 00:08:52,399
set and scales down the old one

00:08:50,000 --> 00:08:55,200
and scales up the new one so we use

00:08:52,399 --> 00:08:58,720
exactly the same pattern and cluster api

00:08:55,200 --> 00:09:01,200
a machine like a pod is immutable

00:08:58,720 --> 00:09:02,480
a machine has a number of replicas in a

00:09:01,200 --> 00:09:05,519
machine set

00:09:02,480 --> 00:09:06,720
like a replica set and a machine set is

00:09:05,519 --> 00:09:08,880
still immutable

00:09:06,720 --> 00:09:10,240
but a machine deployment can create a

00:09:08,880 --> 00:09:12,560
new machine set

00:09:10,240 --> 00:09:13,760
scale down the old machine set and scale

00:09:12,560 --> 00:09:15,519
up the new one

00:09:13,760 --> 00:09:16,800
a machine deployment is just like a

00:09:15,519 --> 00:09:18,240
deployment

00:09:16,800 --> 00:09:20,839
and that's how we can achieve

00:09:18,240 --> 00:09:23,839
immutability at the machine deployment

00:09:20,839 --> 00:09:26,160
level the machine is the same crd

00:09:23,839 --> 00:09:28,880
whether this is on aws or gcp

00:09:26,160 --> 00:09:30,240
or vmware and there's an analogy here to

00:09:28,880 --> 00:09:32,000
storage classes

00:09:30,240 --> 00:09:33,920
in kubernetes there is similarly a

00:09:32,000 --> 00:09:35,600
machine class

00:09:33,920 --> 00:09:37,760
machine class is a kubernetes object

00:09:35,600 --> 00:09:40,160
that describes attributes of the machine

00:09:37,760 --> 00:09:41,920
that are specific to that cloud provider

00:09:40,160 --> 00:09:43,519
just as a storage class describes

00:09:41,920 --> 00:09:46,240
attributes that are specific to a

00:09:43,519 --> 00:09:48,959
particular storage backend

00:09:46,240 --> 00:09:50,880
cluster api is a newer api and we've

00:09:48,959 --> 00:09:52,959
actually developed our thinking around

00:09:50,880 --> 00:09:55,440
this design pattern over time

00:09:52,959 --> 00:09:56,560
machine class objects are actually typed

00:09:55,440 --> 00:09:59,360
objects

00:09:56,560 --> 00:10:00,480
it has a different kind on aws than on

00:09:59,360 --> 00:10:03,680
gcp

00:10:00,480 --> 00:10:06,959
aws is an aws machine template

00:10:03,680 --> 00:10:09,040
gce is a gce machine template

00:10:06,959 --> 00:10:10,079
this allows for the fields of a machine

00:10:09,040 --> 00:10:12,240
class object

00:10:10,079 --> 00:10:14,079
to be specific to the cloud or

00:10:12,240 --> 00:10:16,720
infrastructure provider

00:10:14,079 --> 00:10:18,320
and that allows us to get richer type

00:10:16,720 --> 00:10:20,480
checking and validation

00:10:18,320 --> 00:10:23,040
than we do in the storage class where a

00:10:20,480 --> 00:10:26,240
storage class has the same kind across

00:10:23,040 --> 00:10:28,480
all the storage backends so not only

00:10:26,240 --> 00:10:33,519
reuse but also evolution

00:10:28,480 --> 00:10:34,959
of the kubernetes design patterns

00:10:33,519 --> 00:10:37,040
so let's talk a little bit about the

00:10:34,959 --> 00:10:39,760
cluster api roadmap

00:10:37,040 --> 00:10:41,680
cluster api is still in alpha so how

00:10:39,760 --> 00:10:43,920
does it get to beta

00:10:41,680 --> 00:10:45,360
generally the main goal is to get it

00:10:43,920 --> 00:10:47,519
into widespread

00:10:45,360 --> 00:10:49,040
real world use and continue to get

00:10:47,519 --> 00:10:51,279
feedback on whether

00:10:49,040 --> 00:10:53,279
our expectations match how this thing is

00:10:51,279 --> 00:10:55,040
used in production

00:10:53,279 --> 00:10:57,120
more automation also helps with this

00:10:55,040 --> 00:10:58,880
goal both automation of testing and of

00:10:57,120 --> 00:11:00,320
the project processes

00:10:58,880 --> 00:11:02,720
but the next couple of alphas are going

00:11:00,320 --> 00:11:05,120
to focus on some of those blockers

00:11:02,720 --> 00:11:07,040
robustness of the control plane a few

00:11:05,120 --> 00:11:08,240
features like auto scaling and spot

00:11:07,040 --> 00:11:09,920
instances

00:11:08,240 --> 00:11:12,480
some improvements to the primary user

00:11:09,920 --> 00:11:14,640
facing tool called cluster ctl

00:11:12,480 --> 00:11:15,519
and in the alpha after that resiliency

00:11:14,640 --> 00:11:18,079
of the nodes

00:11:15,519 --> 00:11:19,839
extensibility of load balancing using

00:11:18,079 --> 00:11:22,000
the latest features from some of the

00:11:19,839 --> 00:11:23,680
other sig sub-projects

00:11:22,000 --> 00:11:25,680
in order to get to beta the really big

00:11:23,680 --> 00:11:27,200
thing we need is better documentation

00:11:25,680 --> 00:11:28,000
which goes hand-in-hand with more

00:11:27,200 --> 00:11:31,519
feedback from

00:11:28,000 --> 00:11:33,600
real world users like you

00:11:31,519 --> 00:11:35,040
also getting it integrated into some of

00:11:33,600 --> 00:11:36,880
those higher level tools

00:11:35,040 --> 00:11:38,480
so for example cops is planning to

00:11:36,880 --> 00:11:41,040
support cluster api

00:11:38,480 --> 00:11:43,360
initially for the nodes and getting the

00:11:41,040 --> 00:11:48,399
existing kubernetes e to e tests

00:11:43,360 --> 00:11:48,399
using cluster api on gcp and on aws

00:11:48,959 --> 00:11:53,440
to learn more about the cluster api you

00:11:51,040 --> 00:11:54,959
can join a deep dive session we have

00:11:53,440 --> 00:11:57,920
about it here at cubecon

00:11:54,959 --> 00:11:59,680
na2020 is going to be presented by katy

00:11:57,920 --> 00:12:03,680
gibanji and carlos panato

00:11:59,680 --> 00:12:03,680
on friday november the 20th

00:12:05,440 --> 00:12:09,680
another project that we wish to

00:12:07,040 --> 00:12:11,760
highlight is component config

00:12:09,680 --> 00:12:14,079
corporate config is a kubernetes style

00:12:11,760 --> 00:12:17,360
api for configuring components

00:12:14,079 --> 00:12:18,720
and component config is trying to solve

00:12:17,360 --> 00:12:21,200
some problems

00:12:18,720 --> 00:12:23,519
the first one is that the core

00:12:21,200 --> 00:12:24,000
kubernetes components are not consistent

00:12:23,519 --> 00:12:26,800
in how

00:12:24,000 --> 00:12:27,519
they are configured they use a lot of

00:12:26,800 --> 00:12:29,839
flags

00:12:27,519 --> 00:12:31,680
and often times the flags across

00:12:29,839 --> 00:12:32,480
different components that do exactly the

00:12:31,680 --> 00:12:35,120
same thing

00:12:32,480 --> 00:12:37,440
have different names the solution for

00:12:35,120 --> 00:12:40,240
that is that the core component should

00:12:37,440 --> 00:12:41,040
implement component config and in fact

00:12:40,240 --> 00:12:42,720
most of the

00:12:41,040 --> 00:12:44,480
core components have already started

00:12:42,720 --> 00:12:47,680
doing that another problem

00:12:44,480 --> 00:12:50,639
is that it's pretty hard to write a

00:12:47,680 --> 00:12:51,600
cades like component with declarative

00:12:50,639 --> 00:12:53,839
config

00:12:51,600 --> 00:12:54,639
so adding a corporate coffee itself is

00:12:53,839 --> 00:12:56,399
not that easy

00:12:54,639 --> 00:12:58,160
so the solution for that is that we

00:12:56,399 --> 00:13:01,839
should factor

00:12:58,160 --> 00:13:04,480
common logic for component related code

00:13:01,839 --> 00:13:06,000
in the repository designated for that

00:13:04,480 --> 00:13:08,240
that is component base

00:13:06,000 --> 00:13:10,320
and it's a toolkit it's going to make it

00:13:08,240 --> 00:13:11,920
easier to write a new component that

00:13:10,320 --> 00:13:12,480
immediately implements a corporate

00:13:11,920 --> 00:13:15,519
config

00:13:12,480 --> 00:13:18,560
that uses cades api style

00:13:15,519 --> 00:13:20,560
of configuration and existing components

00:13:18,560 --> 00:13:23,040
should be retrofitted to use the same

00:13:20,560 --> 00:13:23,040
toolkit

00:13:24,480 --> 00:13:28,000
component config gives us a lot of

00:13:26,880 --> 00:13:30,320
benefits

00:13:28,000 --> 00:13:31,040
it has maintainability so when a

00:13:30,320 --> 00:13:34,320
component

00:13:31,040 --> 00:13:36,639
has a flag set that grows over 50 flags

00:13:34,320 --> 00:13:37,760
configuration becomes painful

00:13:36,639 --> 00:13:40,639
upgradability

00:13:37,760 --> 00:13:42,320
so for upgrades version configuration is

00:13:40,639 --> 00:13:46,480
arguably easier to manage

00:13:42,320 --> 00:13:48,959
than flags since flags are convergent

00:13:46,480 --> 00:13:50,959
programmability configuration expressed

00:13:48,959 --> 00:13:52,959
as json and yaml objects

00:13:50,959 --> 00:13:55,279
allows for consistent manipulation

00:13:52,959 --> 00:13:57,120
templating patching and introspection

00:13:55,279 --> 00:13:59,120
and also possibility many types of

00:13:57,120 --> 00:14:01,360
configs simply cannot be expressed as

00:13:59,120 --> 00:14:03,920
key value pairs

00:14:01,360 --> 00:14:05,519
and finally it's also declarative open

00:14:03,920 --> 00:14:08,880
api information can be

00:14:05,519 --> 00:14:09,360
exposed using component config and used

00:14:08,880 --> 00:14:13,040
for

00:14:09,360 --> 00:14:15,440
generating documentation for your config

00:14:13,040 --> 00:14:17,600
to learn more about component config you

00:14:15,440 --> 00:14:20,560
can watch this talk that

00:14:17,600 --> 00:14:22,240
lucas kelstrom gave a previous cube call

00:14:20,560 --> 00:14:24,079
and in this talk you can actually see

00:14:22,240 --> 00:14:25,360
some of the details implementation

00:14:24,079 --> 00:14:27,920
details

00:14:25,360 --> 00:14:30,800
around how we are actually implementing

00:14:27,920 --> 00:14:34,399
component config in existing components

00:14:30,800 --> 00:14:37,040
or how do we want future components to

00:14:34,399 --> 00:14:37,040
implement it

00:14:38,160 --> 00:14:42,560
in kubernetes we have a working group

00:14:39,839 --> 00:14:44,959
that is called component standards

00:14:42,560 --> 00:14:46,399
it's uh a combined effort between

00:14:44,959 --> 00:14:49,519
sequester lifecycle

00:14:46,399 --> 00:14:52,160
and sick api machinery trying to

00:14:49,519 --> 00:14:53,440
tackle some of these problems around

00:14:52,160 --> 00:14:56,160
component config

00:14:53,440 --> 00:14:56,560
to get engaged to find more about it you

00:14:56,160 --> 00:14:59,839
can

00:14:56,560 --> 00:14:59,839
follow these links

00:15:02,880 --> 00:15:06,240
another project that we wish to

00:15:04,240 --> 00:15:07,920
highlight is image builder image builder

00:15:06,240 --> 00:15:09,440
is essentially a tool for building

00:15:07,920 --> 00:15:11,519
virtual machine images not to be

00:15:09,440 --> 00:15:13,760
confused with container images

00:15:11,519 --> 00:15:15,519
it includes ansible and packer scripts

00:15:13,760 --> 00:15:17,199
which are well supported by vmware

00:15:15,519 --> 00:15:19,760
microsoft and other companies for

00:15:17,199 --> 00:15:21,680
creating quasar api machine images

00:15:19,760 --> 00:15:23,360
the current list of supported operating

00:15:21,680 --> 00:15:26,560
systems include ubuntu

00:15:23,360 --> 00:15:28,639
centos 307 photon amazon linux and flat

00:15:26,560 --> 00:15:31,279
car support is coming soon

00:15:28,639 --> 00:15:33,920
image builder is targeting vmware aws

00:15:31,279 --> 00:15:36,480
azure qmo and digital ocean

00:15:33,920 --> 00:15:38,320
as providers of infrastructure the

00:15:36,480 --> 00:15:41,040
project has also started working

00:15:38,320 --> 00:15:43,680
on a conformant test suite which uses

00:15:41,040 --> 00:15:46,000
goss which is a yamo based several spec

00:15:43,680 --> 00:15:47,120
alternative tool for validating servers

00:15:46,000 --> 00:15:48,800
configuration

00:15:47,120 --> 00:15:50,480
the repository of the project also

00:15:48,800 --> 00:15:52,880
includes some other tools

00:15:50,480 --> 00:15:54,399
such as cube deploy which is still used

00:15:52,880 --> 00:15:58,160
by cops for creating

00:15:54,399 --> 00:16:00,000
images for aws config adm

00:15:58,160 --> 00:16:01,360
which is a tool for generating cloud

00:16:00,000 --> 00:16:03,440
init and bash

00:16:01,360 --> 00:16:05,920
for configuration of virtual machine

00:16:03,440 --> 00:16:05,920
images

00:16:06,800 --> 00:16:09,839
here are some of the goals of the image

00:16:08,560 --> 00:16:12,160
builder project

00:16:09,839 --> 00:16:12,959
provide a consistent tooling for all

00:16:12,160 --> 00:16:14,639
approaches

00:16:12,959 --> 00:16:16,240
for building images so that we can

00:16:14,639 --> 00:16:18,880
create more standardized

00:16:16,240 --> 00:16:19,440
reusable adjustable images make it

00:16:18,880 --> 00:16:21,279
easier

00:16:19,440 --> 00:16:22,639
for downstream consumers to customize

00:16:21,279 --> 00:16:24,480
their own images and keep their

00:16:22,639 --> 00:16:26,639
customizations up to date

00:16:24,480 --> 00:16:27,759
testing of images to verify conformance

00:16:26,639 --> 00:16:30,959
using tools like

00:16:27,759 --> 00:16:32,480
inspec and goss release of images for

00:16:30,959 --> 00:16:33,440
different cloud operating system

00:16:32,480 --> 00:16:37,839
combinations

00:16:33,440 --> 00:16:37,839
with regular updates

00:16:38,000 --> 00:16:42,000
image builder is a fairly new project so

00:16:40,079 --> 00:16:44,399
we have a big roadmap for it

00:16:42,000 --> 00:16:46,399
the coi is still offers one of the goals

00:16:44,399 --> 00:16:50,320
is to get it to beta

00:16:46,399 --> 00:16:53,360
pr testing for builds on aws gcp and qmo

00:16:50,320 --> 00:16:56,880
are planned azure is already running

00:16:53,360 --> 00:16:57,519
on pr submits vodka support and windows

00:16:56,880 --> 00:16:59,839
support

00:16:57,519 --> 00:17:02,240
are also on the roadmap conformant

00:16:59,839 --> 00:17:04,400
testing and testing suites

00:17:02,240 --> 00:17:05,760
stress testing for log rotation and

00:17:04,400 --> 00:17:07,839
immutability

00:17:05,760 --> 00:17:09,360
submissions to the kubernetes test grid

00:17:07,839 --> 00:17:12,640
which is the tool

00:17:09,360 --> 00:17:15,199
we use to monitor end-to-end tests

00:17:12,640 --> 00:17:17,679
and finally image publishing signing can

00:17:15,199 --> 00:17:19,760
release which is similar to a way

00:17:17,679 --> 00:17:22,640
the official kubernetes containers are

00:17:19,760 --> 00:17:22,640
promoted today

00:17:22,880 --> 00:17:26,640
to learn more about image builder you

00:17:24,720 --> 00:17:29,760
can see our deep dive session

00:17:26,640 --> 00:17:32,000
here our kubecon na2020 is going to be

00:17:29,760 --> 00:17:34,400
on thursday november 19th

00:17:32,000 --> 00:17:37,120
presented by moshi merman and tushar

00:17:34,400 --> 00:17:37,120
agarwal

00:17:38,160 --> 00:17:43,039
i wanted to talk a little bit about how

00:17:39,760 --> 00:17:43,039
you can get involved

00:17:44,640 --> 00:17:48,799
most of the projects we've described are

00:17:46,960 --> 00:17:50,960
not yet in ga

00:17:48,799 --> 00:17:52,720
kube dm is some of the high level

00:17:50,960 --> 00:17:53,280
provisioning cluster provisioning tools

00:17:52,720 --> 00:17:56,960
are

00:17:53,280 --> 00:18:00,000
but otherwise the projects are in beta

00:17:56,960 --> 00:18:03,200
in alpha or even pre-alpha so

00:18:00,000 --> 00:18:04,880
we need your help and i'd suggest this

00:18:03,200 --> 00:18:07,039
is also an opportunity

00:18:04,880 --> 00:18:08,799
sometimes as a kubernetes contributor it

00:18:07,039 --> 00:18:09,120
can feel like everything that can be

00:18:08,799 --> 00:18:11,600
done

00:18:09,120 --> 00:18:12,160
has either already been done or there

00:18:11,600 --> 00:18:14,000
are 10

00:18:12,160 --> 00:18:15,919
existing issues stating why you can't do

00:18:14,000 --> 00:18:17,679
it that is very much

00:18:15,919 --> 00:18:19,600
not the case in sig cluster lifecycle

00:18:17,679 --> 00:18:21,840
there's a lot of work still to do

00:18:19,600 --> 00:18:25,919
that work is very concrete and we are

00:18:21,840 --> 00:18:25,919
very oriented around encouraging

00:18:26,840 --> 00:18:30,080
contributors

00:18:28,160 --> 00:18:31,360
specifically we have some onboarding

00:18:30,080 --> 00:18:33,520
documentation which is

00:18:31,360 --> 00:18:35,360
a great place to start along with our

00:18:33,520 --> 00:18:37,360
community page

00:18:35,360 --> 00:18:39,600
many of the sub-projects are excellent

00:18:37,360 --> 00:18:41,760
triaging issues they label issues with

00:18:39,600 --> 00:18:43,280
good first issue or help wanted to try

00:18:41,760 --> 00:18:45,039
to steer you to issues that don't

00:18:43,280 --> 00:18:45,760
require the in-depth knowledge that

00:18:45,039 --> 00:18:48,559
you'll

00:18:45,760 --> 00:18:50,640
likely gain over time a great way to get

00:18:48,559 --> 00:18:52,160
involved is with documentation or even

00:18:50,640 --> 00:18:54,480
just trying out different things and

00:18:52,160 --> 00:18:56,240
reporting any issues you encounter

00:18:54,480 --> 00:18:58,400
there are a number of zoom meetings

00:18:56,240 --> 00:18:59,039
there's an overall sig cluster lifecycle

00:18:58,400 --> 00:19:01,200
week

00:18:59,039 --> 00:19:02,720
meeting bi-weekly and many of the

00:19:01,200 --> 00:19:03,919
sub-projects have their own bi-weekly

00:19:02,720 --> 00:19:07,120
meetings as well

00:19:03,919 --> 00:19:08,160
so please attend ask questions introduce

00:19:07,120 --> 00:19:09,679
yourself

00:19:08,160 --> 00:19:11,600
introduce yourself on slack there's a

00:19:09,679 --> 00:19:12,559
very active slack channel where you can

00:19:11,600 --> 00:19:15,440
find people

00:19:12,559 --> 00:19:17,280
at all hours of the day and night if

00:19:15,440 --> 00:19:18,720
you're not yet a kubernetes contributor

00:19:17,280 --> 00:19:20,559
i encourage you to attend the new

00:19:18,720 --> 00:19:23,679
contributor sessions that are run

00:19:20,559 --> 00:19:25,520
by sig contributor experience

00:19:23,679 --> 00:19:27,200
in general the kubernetes community

00:19:25,520 --> 00:19:28,320
philosophy is that you earn your place

00:19:27,200 --> 00:19:30,400
at the table by

00:19:28,320 --> 00:19:32,880
chopping wood and carrying water by

00:19:30,400 --> 00:19:35,679
taking on the tasks that need to be done

00:19:32,880 --> 00:19:37,440
so everyone is expected to get involved

00:19:35,679 --> 00:19:38,480
and the flip side of that is that you

00:19:37,440 --> 00:19:42,559
are therefore

00:19:38,480 --> 00:19:42,559
welcome and encouraged to get involved

00:19:45,919 --> 00:19:49,039
we have reached the end of the

00:19:47,120 --> 00:19:51,120
presentation thank you very much for

00:19:49,039 --> 00:19:53,840
your time and now we can have a q a

00:19:51,120 --> 00:19:53,840

YouTube URL: https://www.youtube.com/watch?v=qi-X-Wszetc


