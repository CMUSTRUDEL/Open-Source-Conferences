Title: Simplifying Windows Runtime and Deployment in Kubernetes - Michael Michael, Mark Rossetti
Publication date: 2020-11-23
Playlist: KubeCon + CloudNativeCon North America 2020 - Virtual
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Simplifying Windows Runtime and Deployment in Kubernetes - MICHAEL MICHAEL, VMware, Mark Rossetti & Muzz Imam, Microsoft, & Deep Debroy, Docker 

The leaders of SIG-Windows will provide an update on the efforts to bring Windows to Kubernetes. This session will concentrate on presenting new features and capabilities as well as focus on advanced capabilities like ContainerD integration, CSI, Networking, and Cluster API/kubeadm for Windows. Some familiarity with Windows on Kubernetes is required for the in-depth discussion on advanced features that are in the pipeline for Windows. At the end, we will open the floor for Q&A with users and members of the SIG-Windows community, discussing implementation and trade-offs. 

https://sched.co/ekFu
Captions: 
	00:00:02,879 --> 00:00:07,440
hello everybody and welcome to

00:00:05,200 --> 00:00:09,280
the cubicle presentation on simplifying

00:00:07,440 --> 00:00:10,480
windows runtime and deployment in

00:00:09,280 --> 00:00:12,639
kubernetes

00:00:10,480 --> 00:00:13,840
uh we have the team from seek windows

00:00:12,639 --> 00:00:14,559
here that's going to present to you

00:00:13,840 --> 00:00:17,600
today and

00:00:14,559 --> 00:00:19,039
go over some key topics that we want to

00:00:17,600 --> 00:00:21,359
basically get the community to know

00:00:19,039 --> 00:00:21,359
about

00:00:22,000 --> 00:00:27,119
let's start with introductions maz

00:00:25,119 --> 00:00:31,679
thanks mike i am maz i'm a sick windows

00:00:27,119 --> 00:00:33,920
contributor and a senior pm at microsoft

00:00:31,679 --> 00:00:34,719
hey folks this is deep de bruy i'm an

00:00:33,920 --> 00:00:36,800
engineering

00:00:34,719 --> 00:00:39,120
manager over at docker and tech lead

00:00:36,800 --> 00:00:42,239
insect windows

00:00:39,120 --> 00:00:43,840
hi i'm mark rossetti i'm a

00:00:42,239 --> 00:00:45,600
software engineer in the azure org at

00:00:43,840 --> 00:00:47,200
microsoft and one of the sig windows

00:00:45,600 --> 00:00:48,960
co-chairs

00:00:47,200 --> 00:00:50,800
hi everybody my name is michael i'm a

00:00:48,960 --> 00:00:52,559
sql windows co-chair along with mark

00:00:50,800 --> 00:00:55,199
and i'm a director of product management

00:00:52,559 --> 00:00:55,199
at vmware

00:00:56,239 --> 00:01:00,000
hi everybody i'm james i'm at microsoft

00:00:59,680 --> 00:01:02,000
and

00:01:00,000 --> 00:01:04,640
an engineer there and also contributor

00:01:02,000 --> 00:01:04,640
in sig windows

00:01:05,600 --> 00:01:08,640
thank you all so today we're going to

00:01:07,520 --> 00:01:10,840
talk about

00:01:08,640 --> 00:01:12,080
all the investments that seek windows

00:01:10,840 --> 00:01:14,560
and

00:01:12,080 --> 00:01:16,320
cloud native windows community have been

00:01:14,560 --> 00:01:17,600
doing in the last few months

00:01:16,320 --> 00:01:19,920
we're going to basically talk to you

00:01:17,600 --> 00:01:21,759
about our future

00:01:19,920 --> 00:01:23,680
roadmap and what that looks like and

00:01:21,759 --> 00:01:25,040
talk about some of the key areas that

00:01:23,680 --> 00:01:26,400
you might be interested in

00:01:25,040 --> 00:01:27,840
in addition to that we're going to spend

00:01:26,400 --> 00:01:28,640
a little bit of time talking about

00:01:27,840 --> 00:01:30,720
modernizing

00:01:28,640 --> 00:01:32,240
legacy applications and what that means

00:01:30,720 --> 00:01:35,119
for you we're going to give you

00:01:32,240 --> 00:01:36,720
a dynamite demo on cluster api and then

00:01:35,119 --> 00:01:41,360
also leave some time for

00:01:36,720 --> 00:01:42,640
q a let's dig in

00:01:41,360 --> 00:01:45,280
must go ahead and talk to us about

00:01:42,640 --> 00:01:47,520
windows thanks michael

00:01:45,280 --> 00:01:48,479
so in windows operating system update so

00:01:47,520 --> 00:01:50,640
we have a lot of

00:01:48,479 --> 00:01:52,079
exciting stuff starting with nano server

00:01:50,640 --> 00:01:55,040
1809 support

00:01:52,079 --> 00:01:56,000
has been extended officially to 2024 uh

00:01:55,040 --> 00:01:59,360
same as the

00:01:56,000 --> 00:02:01,520
windows 2019 ltsc support cycle

00:01:59,360 --> 00:02:02,960
uh this was based on the request we got

00:02:01,520 --> 00:02:05,280
from kubernetes community

00:02:02,960 --> 00:02:06,560
um the other one important that mark is

00:02:05,280 --> 00:02:08,000
going to talk about in container d as

00:02:06,560 --> 00:02:08,959
well is the single file mapping is now

00:02:08,000 --> 00:02:10,959
fully supported

00:02:08,959 --> 00:02:12,800
um the from an operating system

00:02:10,959 --> 00:02:15,840
perspective the bug has been fixed

00:02:12,800 --> 00:02:17,520
uh the dsr support long awaited uh is

00:02:15,840 --> 00:02:20,560
going to be in october release

00:02:17,520 --> 00:02:24,239
that's a huge one and then the last one

00:02:20,560 --> 00:02:25,680
is 2004 support uh is for windows server

00:02:24,239 --> 00:02:27,360
the latest sec release

00:02:25,680 --> 00:02:28,879
is now fully supported and is being

00:02:27,360 --> 00:02:30,080
tested uh in the test grid for

00:02:28,879 --> 00:02:33,040
kubernetes

00:02:30,080 --> 00:02:33,760
um as far as the plans for v120 goes uh

00:02:33,040 --> 00:02:35,680
we have

00:02:33,760 --> 00:02:37,840
a couple of critical bugs that were

00:02:35,680 --> 00:02:39,440
filed by the kubernetes community

00:02:37,840 --> 00:02:41,200
that are being resolved for example

00:02:39,440 --> 00:02:44,000
virtualized time zone

00:02:41,200 --> 00:02:45,440
for containers and in future based on

00:02:44,000 --> 00:02:45,840
this relationship between the kubernetes

00:02:45,440 --> 00:02:49,440
and the

00:02:45,840 --> 00:02:50,000
windows os team we're looking at the

00:02:49,440 --> 00:02:51,760
changes for

00:02:50,000 --> 00:02:55,200
service mesh that michael is going to

00:02:51,760 --> 00:02:57,680
talk about session affinity for q proxy

00:02:55,200 --> 00:02:58,879
and especially msmq msdtc supported

00:02:57,680 --> 00:03:01,440
scenarios

00:02:58,879 --> 00:03:04,800
in future with that i will hand it to

00:03:01,440 --> 00:03:06,640
mark who will talk about container d

00:03:04,800 --> 00:03:08,080
hi um yep so anybody who's been

00:03:06,640 --> 00:03:09,200
following sig windows has noticed that

00:03:08,080 --> 00:03:11,360
in the compute space

00:03:09,200 --> 00:03:13,599
um recently we're really just focusing

00:03:11,360 --> 00:03:16,159
on our efforts on container d

00:03:13,599 --> 00:03:18,319
um container d as the container runtime

00:03:16,159 --> 00:03:19,440
provides a lot of benefits over docker

00:03:18,319 --> 00:03:20,800
at least with the current windows

00:03:19,440 --> 00:03:22,080
implementation today

00:03:20,800 --> 00:03:24,400
um so i'll go over a couple of those

00:03:22,080 --> 00:03:25,680
real quickly um the first one is is that

00:03:24,400 --> 00:03:28,640
it utilizes the

00:03:25,680 --> 00:03:30,000
host compute service v2 schema for those

00:03:28,640 --> 00:03:31,760
unfamiliar with

00:03:30,000 --> 00:03:33,120
windows um the host compute service is a

00:03:31,760 --> 00:03:35,760
management service

00:03:33,120 --> 00:03:36,799
that uh just helps start and stop and

00:03:35,760 --> 00:03:39,599
run containers

00:03:36,799 --> 00:03:41,200
um the host compute service v1

00:03:39,599 --> 00:03:44,480
introduced with windows server

00:03:41,200 --> 00:03:46,000
uh 2016 and it was revamped it's windows

00:03:44,480 --> 00:03:47,440
server 2019.

00:03:46,000 --> 00:03:49,120
some key benefits that that brings to

00:03:47,440 --> 00:03:49,680
the kubernetes community is it allows us

00:03:49,120 --> 00:03:51,920
to address

00:03:49,680 --> 00:03:53,120
some kind of parity issues with uh

00:03:51,920 --> 00:03:55,680
features in terms

00:03:53,120 --> 00:03:57,519
of with respect to linux containers um

00:03:55,680 --> 00:03:58,560
some of those are highlighted here and

00:03:57,519 --> 00:04:00,959
that's

00:03:58,560 --> 00:04:02,959
with this new schema we can support

00:04:00,959 --> 00:04:06,640
properly support um single file mappings

00:04:02,959 --> 00:04:08,799
so you can get an updated cd host files

00:04:06,640 --> 00:04:10,000
uh into your container and also

00:04:08,799 --> 00:04:12,159
containers can just

00:04:10,000 --> 00:04:14,799
write to dev slash termination log to

00:04:12,159 --> 00:04:15,200
get their error messages um in addition

00:04:14,799 --> 00:04:17,519
to

00:04:15,200 --> 00:04:18,239
the windows specific functionality uh

00:04:17,519 --> 00:04:20,479
container d

00:04:18,239 --> 00:04:22,479
is based fully on the cry of the

00:04:20,479 --> 00:04:24,720
container runtime interface

00:04:22,479 --> 00:04:27,520
this means that when there are updates

00:04:24,720 --> 00:04:29,040
to the cry interface in general

00:04:27,520 --> 00:04:30,560
windows will just automatically get them

00:04:29,040 --> 00:04:33,120
if you're using container d

00:04:30,560 --> 00:04:34,479
as you contain at runtime um some

00:04:33,120 --> 00:04:36,240
specifics for what we're planning on

00:04:34,479 --> 00:04:38,639
doing in 120 is

00:04:36,240 --> 00:04:40,000
we're pushing windows continue d support

00:04:38,639 --> 00:04:41,919
to stable

00:04:40,000 --> 00:04:43,199
that includes a couple of bug fixes a

00:04:41,919 --> 00:04:45,280
lot of documentation

00:04:43,199 --> 00:04:47,280
and addressing a couple known kind of

00:04:45,280 --> 00:04:49,360
feature parity issues

00:04:47,280 --> 00:04:50,400
um the big one being group managed

00:04:49,360 --> 00:04:52,080
service accounts

00:04:50,400 --> 00:04:53,759
for everybody who wants to run a windows

00:04:52,080 --> 00:04:55,120
cluster that's pretty important for

00:04:53,759 --> 00:04:57,360
security

00:04:55,120 --> 00:04:59,520
another kind of important one is we're

00:04:57,360 --> 00:05:01,280
working to enable gpu support through

00:04:59,520 --> 00:05:03,440
device assignments

00:05:01,280 --> 00:05:05,840
um and some future things we're

00:05:03,440 --> 00:05:07,919
investing in but not necessarily in 120

00:05:05,840 --> 00:05:10,000
in this space are we hope to enable

00:05:07,919 --> 00:05:11,840
privileged container support for windows

00:05:10,000 --> 00:05:13,120
in the near future and are also working

00:05:11,840 --> 00:05:16,160
on enabling hyper-v

00:05:13,120 --> 00:05:17,759
isolated containers next

00:05:16,160 --> 00:05:19,520
is deep who's going to give an overview

00:05:17,759 --> 00:05:22,080
of storage

00:05:19,520 --> 00:05:24,560
thanks mark so we have been mainly

00:05:22,080 --> 00:05:27,120
concentrating on the csi proxy

00:05:24,560 --> 00:05:29,199
in order to enable csi support for node

00:05:27,120 --> 00:05:31,759
plugins in windows

00:05:29,199 --> 00:05:32,479
we have introduced the new system api

00:05:31,759 --> 00:05:34,880
group

00:05:32,479 --> 00:05:36,639
in csi proxy this involves adding

00:05:34,880 --> 00:05:38,560
support for a bunch of things around

00:05:36,639 --> 00:05:40,400
querying the status of the service

00:05:38,560 --> 00:05:43,520
that's running within windows as well as

00:05:40,400 --> 00:05:45,440
enabling uh support for iscsi

00:05:43,520 --> 00:05:47,759
we have introduced several new apis to

00:05:45,440 --> 00:05:49,759
the existing disk and volume api groups

00:05:47,759 --> 00:05:51,840
uh this is mainly to support operations

00:05:49,759 --> 00:05:53,280
like resize and online offlining of

00:05:51,840 --> 00:05:56,800
disks in accordance with

00:05:53,280 --> 00:05:58,639
systems and policy we are starting to

00:05:56,800 --> 00:05:59,520
support csi proxy as a native windows

00:05:58,639 --> 00:06:01,039
service

00:05:59,520 --> 00:06:02,960
so that you can just configure it as a

00:06:01,039 --> 00:06:06,240
service when you set up the

00:06:02,960 --> 00:06:08,479
windows host and finally on the cicd

00:06:06,240 --> 00:06:09,680
side of things uh we have enabled github

00:06:08,479 --> 00:06:11,840
action based unit

00:06:09,680 --> 00:06:13,759
and integration tests that are fairly

00:06:11,840 --> 00:06:16,800
stable at this point

00:06:13,759 --> 00:06:19,759
uh plans for upcoming plans for uh

00:06:16,800 --> 00:06:21,120
120 is to continue to add apis to csi

00:06:19,759 --> 00:06:24,560
proxy so that

00:06:21,120 --> 00:06:25,039
we can support uh the vsphere plugin as

00:06:24,560 --> 00:06:27,600
well as

00:06:25,039 --> 00:06:28,639
as well as the generic iscsi plugin on

00:06:27,600 --> 00:06:30,479
windows

00:06:28,639 --> 00:06:32,160
we want to analyze and improve some of

00:06:30,479 --> 00:06:34,080
the latencies that we are finding

00:06:32,160 --> 00:06:35,759
when performing windows operations such

00:06:34,080 --> 00:06:38,160
as partitioning and formatting

00:06:35,759 --> 00:06:39,199
volumes we want to improve on those

00:06:38,160 --> 00:06:41,759
latencies and

00:06:39,199 --> 00:06:43,440
figure out what's causing them uh we

00:06:41,759 --> 00:06:46,720
want to introduce automated

00:06:43,440 --> 00:06:48,000
automated api documentation and generate

00:06:46,720 --> 00:06:50,880
them directly from the api

00:06:48,000 --> 00:06:52,720
protofiles so that we can continue to

00:06:50,880 --> 00:06:53,360
publish documentation that's fairly

00:06:52,720 --> 00:06:56,960
up-to-date

00:06:53,360 --> 00:06:59,599
on the csi dev documentation sites

00:06:56,960 --> 00:07:01,599
and finally we want to investigate a

00:06:59,599 --> 00:07:04,240
smooth and seamless migration path

00:07:01,599 --> 00:07:04,800
from the current csi proxy to the future

00:07:04,240 --> 00:07:07,919
which is

00:07:04,800 --> 00:07:10,720
privileged container support in windows

00:07:07,919 --> 00:07:11,360
so beyond 120 the future would be to

00:07:10,720 --> 00:07:13,199
take

00:07:11,360 --> 00:07:14,880
in the future we want to take csi proxy

00:07:13,199 --> 00:07:16,960
to a stable state

00:07:14,880 --> 00:07:19,039
add more storage plugins that can be

00:07:16,960 --> 00:07:20,560
supported through csi proxy for example

00:07:19,039 --> 00:07:23,280
the aws eps

00:07:20,560 --> 00:07:24,319
plugin and uh finally look to was

00:07:23,280 --> 00:07:27,199
deprecating the

00:07:24,319 --> 00:07:31,039
entries entry storage plugins that

00:07:27,199 --> 00:07:31,840
target windows today in the next slide

00:07:31,039 --> 00:07:34,160
we have

00:07:31,840 --> 00:07:36,720
architecture diagram of how csi proxy

00:07:34,160 --> 00:07:38,160
enables a csi note plugin in windows

00:07:36,720 --> 00:07:40,240
to communicate with the various

00:07:38,160 --> 00:07:41,599
components such as cubelet and the csi

00:07:40,240 --> 00:07:43,440
note driver register

00:07:41,599 --> 00:07:45,520
as well as to the host operating system

00:07:43,440 --> 00:07:47,919
to drive privileged operations

00:07:45,520 --> 00:07:48,960
if you have questions around this feel

00:07:47,919 --> 00:07:52,639
free to ask us

00:07:48,960 --> 00:07:58,240
in the follow-up or jump into the csi

00:07:52,639 --> 00:08:00,800
windows channel in in slack

00:07:58,240 --> 00:08:02,720
thanks thank you thank you deep uh so

00:08:00,800 --> 00:08:04,639
let's talk a little bit about networking

00:08:02,720 --> 00:08:06,560
um you know we've been seeing a lot of

00:08:04,639 --> 00:08:07,199
advancements in storage as well as

00:08:06,560 --> 00:08:09,440
compute

00:08:07,199 --> 00:08:10,960
and we're actually putting a tremendous

00:08:09,440 --> 00:08:11,759
amount of effort around networking as

00:08:10,960 --> 00:08:14,080
well

00:08:11,759 --> 00:08:15,680
in the latest release we've enabled dsr

00:08:14,080 --> 00:08:16,720
mode for low balancing as well as

00:08:15,680 --> 00:08:18,639
endpoint slices

00:08:16,720 --> 00:08:20,319
both of these features make it easier

00:08:18,639 --> 00:08:23,520
for you to run

00:08:20,319 --> 00:08:24,479
more applications on the same node in

00:08:23,520 --> 00:08:26,080
kubernetes

00:08:24,479 --> 00:08:27,599
and we make it more efficient for you to

00:08:26,080 --> 00:08:30,639
run have more endpoints

00:08:27,599 --> 00:08:31,599
on your kubernetes containers in

00:08:30,639 --> 00:08:33,360
addition to that

00:08:31,599 --> 00:08:35,599
there's two major changes that are

00:08:33,360 --> 00:08:37,919
happening on the cni world the

00:08:35,599 --> 00:08:39,039
container networking plugins for

00:08:37,919 --> 00:08:42,399
kubernetes

00:08:39,039 --> 00:08:45,200
calico has open source their network

00:08:42,399 --> 00:08:46,720
plug-in for kubernetes for windows which

00:08:45,200 --> 00:08:49,360
is a major major thing

00:08:46,720 --> 00:08:50,000
now you get the great advantages of

00:08:49,360 --> 00:08:51,920
caligo

00:08:50,000 --> 00:08:54,080
and you can try it out without requiring

00:08:51,920 --> 00:08:56,560
a subscription in addition to that the

00:08:54,080 --> 00:08:58,560
andrea cni now supports windows

00:08:56,560 --> 00:09:00,160
including support for network policies

00:08:58,560 --> 00:09:01,760
so now if you're looking to get started

00:09:00,160 --> 00:09:03,760
with windows containers

00:09:01,760 --> 00:09:05,600
on kubernetes and you're looking at you

00:09:03,760 --> 00:09:07,680
know your network plugins and what

00:09:05,600 --> 00:09:09,040
can support your needs as an

00:09:07,680 --> 00:09:10,880
infrastructure operator

00:09:09,040 --> 00:09:12,640
you have two great cni's that are made

00:09:10,880 --> 00:09:15,200
available for you

00:09:12,640 --> 00:09:16,959
in addition to that the envoy proxy

00:09:15,200 --> 00:09:18,640
which is kind of the base for

00:09:16,959 --> 00:09:20,399
a lot of other features in the cloud

00:09:18,640 --> 00:09:22,880
native ecosystem for example

00:09:20,399 --> 00:09:23,920
istio and contour and other ingress

00:09:22,880 --> 00:09:26,240
controllers

00:09:23,920 --> 00:09:26,959
had their alpha release of supporting

00:09:26,240 --> 00:09:29,680
windows

00:09:26,959 --> 00:09:31,360
this is huge now we make it possible for

00:09:29,680 --> 00:09:33,279
you to start trying out

00:09:31,360 --> 00:09:35,200
what it will mean to run the envoy proxy

00:09:33,279 --> 00:09:37,839
in some of these capabilities like

00:09:35,200 --> 00:09:38,959
ingress and and other tools on top of

00:09:37,839 --> 00:09:42,399
windows

00:09:38,959 --> 00:09:44,399
for 1.20 our plan is to promote envoy

00:09:42,399 --> 00:09:46,240
proxy to beta so you're going to see

00:09:44,399 --> 00:09:48,080
an advancement of the capabilities there

00:09:46,240 --> 00:09:51,360
making it uh

00:09:48,080 --> 00:09:52,399
making more uh more solid as a as a

00:09:51,360 --> 00:09:54,720
supported offering

00:09:52,399 --> 00:09:56,399
we're going to have ipv4 and ipv6 dual

00:09:54,720 --> 00:09:58,720
star networking

00:09:56,399 --> 00:10:00,160
so that's going to require some of the

00:09:58,720 --> 00:10:03,680
windows releases

00:10:00,160 --> 00:10:05,760
windows release features in version 2004

00:10:03,680 --> 00:10:07,920
and then as well as external traffic

00:10:05,760 --> 00:10:09,519
policy caused local support for client

00:10:07,920 --> 00:10:12,160
ip preservation

00:10:09,519 --> 00:10:13,920
in the future like maz mentioned earlier

00:10:12,160 --> 00:10:17,600
we're going to have service mesh support

00:10:13,920 --> 00:10:18,640
so look for support on osm smi as well

00:10:17,600 --> 00:10:22,160
as others

00:10:18,640 --> 00:10:24,000
as well as ipv6 ipv4 uh

00:10:22,160 --> 00:10:25,519
dual star networking for overlay

00:10:24,000 --> 00:10:27,760
networks so

00:10:25,519 --> 00:10:31,920
lots of advancements here and let's move

00:10:27,760 --> 00:10:32,959
on and with james on cluster lifecycle

00:10:31,920 --> 00:10:35,200
yeah so for

00:10:32,959 --> 00:10:36,000
the last few releases we've enabled you

00:10:35,200 --> 00:10:38,720
to add windows

00:10:36,000 --> 00:10:39,279
nodes uh and we're working towards

00:10:38,720 --> 00:10:42,000
making this

00:10:39,279 --> 00:10:43,920
even easier for you to add the windows

00:10:42,000 --> 00:10:46,959
nodes to your clusters

00:10:43,920 --> 00:10:48,320
so in a couple releases ago we added

00:10:46,959 --> 00:10:50,720
cube adm support

00:10:48,320 --> 00:10:52,240
and we are now in beta with that and as

00:10:50,720 --> 00:10:53,279
we look forward we're going to be adding

00:10:52,240 --> 00:10:56,000
support to

00:10:53,279 --> 00:10:58,079
cluster api cluster api is going to be

00:10:56,000 --> 00:11:00,800
using the cube adm support that we did

00:10:58,079 --> 00:11:02,880
that we added it'll also be using some

00:11:00,800 --> 00:11:04,560
uh tooling that's out in the ecosystem

00:11:02,880 --> 00:11:06,720
around cloud base that enables

00:11:04,560 --> 00:11:08,880
cube adm to boot these nodes very

00:11:06,720 --> 00:11:10,399
quickly uh this will be support for

00:11:08,880 --> 00:11:13,360
workload clusters only

00:11:10,399 --> 00:11:14,240
um so that's important to recognize that

00:11:13,360 --> 00:11:16,000
there's

00:11:14,240 --> 00:11:17,920
in cluster api there's a concept of

00:11:16,000 --> 00:11:18,320
management clusters that's what creates

00:11:17,920 --> 00:11:20,640
all

00:11:18,320 --> 00:11:21,839
your target workload clusters and so

00:11:20,640 --> 00:11:23,440
we'll be supporting windows in the

00:11:21,839 --> 00:11:25,279
workloads clusters

00:11:23,440 --> 00:11:26,800
and as we move look forward to the

00:11:25,279 --> 00:11:31,839
future we're going to be

00:11:26,800 --> 00:11:33,279
moving towards cube adm support for ga

00:11:31,839 --> 00:11:35,360
and so i'm going to be doing a demo here

00:11:33,279 --> 00:11:37,839
in just a little bit on

00:11:35,360 --> 00:11:38,880
how we've started to add support to

00:11:37,839 --> 00:11:41,760
cluster api

00:11:38,880 --> 00:11:42,959
for windows thank you james and we look

00:11:41,760 --> 00:11:45,519
forward to that demo

00:11:42,959 --> 00:11:47,279
uh maz uh you know we've talked about

00:11:45,519 --> 00:11:49,839
all of these features compute network

00:11:47,279 --> 00:11:51,360
storage making it easy for people to run

00:11:49,839 --> 00:11:53,519
uh and our users to run windows

00:11:51,360 --> 00:11:55,440
containers and kubernetes and production

00:11:53,519 --> 00:11:57,040
but the big issue is what do you do with

00:11:55,440 --> 00:11:59,760
all these legacy apps that are

00:11:57,040 --> 00:12:00,800
running windows out there in the wild

00:11:59,760 --> 00:12:03,279
yeah thanks mike

00:12:00,800 --> 00:12:05,200
uh and that's that's the one of the uh

00:12:03,279 --> 00:12:06,399
feedbacks and questions we got from the

00:12:05,200 --> 00:12:09,279
last coupon as well

00:12:06,399 --> 00:12:10,000
so the so i think that the first thing

00:12:09,279 --> 00:12:11,839
uh to start

00:12:10,000 --> 00:12:13,360
with the with the modernizing legacy

00:12:11,839 --> 00:12:14,639
application is of course to lift and

00:12:13,360 --> 00:12:17,519
shift your application

00:12:14,639 --> 00:12:18,240
uh from mono from monoliths to to micro

00:12:17,519 --> 00:12:21,279
services

00:12:18,240 --> 00:12:23,120
uh and the first step uh is is pretty

00:12:21,279 --> 00:12:25,279
simple one all you need to do is

00:12:23,120 --> 00:12:26,639
basically try to containerize the

00:12:25,279 --> 00:12:28,720
application locally

00:12:26,639 --> 00:12:30,639
on your own computer uh using docker

00:12:28,720 --> 00:12:33,279
containers and see if it works

00:12:30,639 --> 00:12:34,240
um and and the general rule of thumb uh

00:12:33,279 --> 00:12:35,760
here is

00:12:34,240 --> 00:12:37,839
the web-based applications the

00:12:35,760 --> 00:12:40,000
simple.net application that been running

00:12:37,839 --> 00:12:41,760
the legacy application which work great

00:12:40,000 --> 00:12:43,519
in your organization you want to keep it

00:12:41,760 --> 00:12:46,079
and modernize the infrastructure

00:12:43,519 --> 00:12:47,040
start with those uh you know the low

00:12:46,079 --> 00:12:49,440
hanging fruit

00:12:47,040 --> 00:12:51,360
uh and generally we've seen a majority

00:12:49,440 --> 00:12:53,440
of the application lie into that

00:12:51,360 --> 00:12:54,560
the complex application leave them for

00:12:53,440 --> 00:12:56,320
later um

00:12:54,560 --> 00:12:58,079
now in terms of containerization of

00:12:56,320 --> 00:12:59,839
applications locally there are many

00:12:58,079 --> 00:13:01,360
tools out there as well to help you

00:12:59,839 --> 00:13:03,600
write the docker file

00:13:01,360 --> 00:13:05,440
uh getting the first step going and

00:13:03,600 --> 00:13:07,680
testing it on your local machine

00:13:05,440 --> 00:13:08,880
one of those is the windows admin center

00:13:07,680 --> 00:13:11,600
which a lot of

00:13:08,880 --> 00:13:13,360
windows administrators use uh we have a

00:13:11,600 --> 00:13:14,720
new extension called container extension

00:13:13,360 --> 00:13:15,760
and the link is right there you can go

00:13:14,720 --> 00:13:17,279
and watch the video

00:13:15,760 --> 00:13:18,959
which is a pretty cool tool to

00:13:17,279 --> 00:13:21,279
containerize your application locally

00:13:18,959 --> 00:13:22,320
test it and then push it to a registry

00:13:21,279 --> 00:13:24,160
to get it started

00:13:22,320 --> 00:13:26,240
um the last thing i want to call out

00:13:24,160 --> 00:13:27,120
before i hand it back to you michael for

00:13:26,240 --> 00:13:29,600
more gotchas

00:13:27,120 --> 00:13:31,040
is the importance of linux nodes uh

00:13:29,600 --> 00:13:32,639
especially when you were starting

00:13:31,040 --> 00:13:34,320
if you're starting with a with a basic

00:13:32,639 --> 00:13:35,519
kubernetes cluster uh

00:13:34,320 --> 00:13:37,360
and once you have containerized your

00:13:35,519 --> 00:13:38,880
application now you need to deploy it to

00:13:37,360 --> 00:13:41,040
your kubernetes cluster

00:13:38,880 --> 00:13:42,639
uh make sure that you know your control

00:13:41,040 --> 00:13:44,720
plane uh and the linux node which

00:13:42,639 --> 00:13:46,000
which has dns and other key components

00:13:44,720 --> 00:13:49,120
you pay attention to it

00:13:46,000 --> 00:13:49,680
uh because often uh you forget about

00:13:49,120 --> 00:13:50,880
them and

00:13:49,680 --> 00:13:53,440
they're pretty critical to run

00:13:50,880 --> 00:13:55,680
kubernetes today um if you have any more

00:13:53,440 --> 00:13:57,360
questions we're here at kubernetes slack

00:13:55,680 --> 00:13:58,720
there's a lot of documentation in

00:13:57,360 --> 00:14:01,839
kubernetes

00:13:58,720 --> 00:14:02,399
website as well on microsoft's website

00:14:01,839 --> 00:14:04,240
as well

00:14:02,399 --> 00:14:05,600
uh feel free to ping us with that

00:14:04,240 --> 00:14:07,120
michael you want to talk about the

00:14:05,600 --> 00:14:09,199
gotchas

00:14:07,120 --> 00:14:11,360
absolutely thank you uh thank you mars

00:14:09,199 --> 00:14:13,760
and you know like must mentioned

00:14:11,360 --> 00:14:14,959
it's the best thing to do is you start

00:14:13,760 --> 00:14:16,560
uh slow

00:14:14,959 --> 00:14:18,320
you start with some applications that

00:14:16,560 --> 00:14:21,040
you lift and shift and

00:14:18,320 --> 00:14:22,720
as you get more knowledge about how to

00:14:21,040 --> 00:14:24,320
modernize some of those applications

00:14:22,720 --> 00:14:26,160
as you understand some of the gotchas

00:14:24,320 --> 00:14:27,920
then you can slowly apply

00:14:26,160 --> 00:14:30,160
the same blueprint to more and more

00:14:27,920 --> 00:14:32,240
applications because

00:14:30,160 --> 00:14:34,000
there's a lot of classes of applications

00:14:32,240 --> 00:14:34,959
out there at organizations that look

00:14:34,000 --> 00:14:36,959
very similar

00:14:34,959 --> 00:14:38,480
so what the knowledge that you're going

00:14:36,959 --> 00:14:39,440
to get from modernizing some of them is

00:14:38,480 --> 00:14:42,079
going to apply

00:14:39,440 --> 00:14:43,120
very equally to other ones but as you go

00:14:42,079 --> 00:14:44,880
through that process you're going to

00:14:43,120 --> 00:14:45,839
identify some things that don't really

00:14:44,880 --> 00:14:47,760
work as well

00:14:45,839 --> 00:14:49,360
and some things that you have to know

00:14:47,760 --> 00:14:50,639
note into your uh

00:14:49,360 --> 00:14:52,560
as you're going through that process so

00:14:50,639 --> 00:14:54,399
the first one is image selection use

00:14:52,560 --> 00:14:56,160
derived images to share application

00:14:54,399 --> 00:14:57,760
building blocks and dependencies

00:14:56,160 --> 00:14:59,920
why is that important you don't need to

00:14:57,760 --> 00:15:02,399
figure out how to put iis

00:14:59,920 --> 00:15:03,760
into a base windows server image start

00:15:02,399 --> 00:15:06,079
with the iis

00:15:03,760 --> 00:15:07,519
derived image same thing for python and

00:15:06,079 --> 00:15:09,600
other programming languages

00:15:07,519 --> 00:15:12,399
like leverage the power of microsoft

00:15:09,600 --> 00:15:14,320
that produces these base images for you

00:15:12,399 --> 00:15:15,760
with all these applications in it so you

00:15:14,320 --> 00:15:16,880
don't have to do that work

00:15:15,760 --> 00:15:18,639
they're going to make sure they're

00:15:16,880 --> 00:15:19,279
patched they're going to release them

00:15:18,639 --> 00:15:20,959
frequently

00:15:19,279 --> 00:15:23,120
and then you can just build on top of it

00:15:20,959 --> 00:15:26,000
in some ways you're becoming operating

00:15:23,120 --> 00:15:28,480
system independent by doing this

00:15:26,000 --> 00:15:30,560
be careful windows registry storage a

00:15:28,480 --> 00:15:32,959
lot of legacy applications

00:15:30,560 --> 00:15:35,199
use windows registry as a storage you

00:15:32,959 --> 00:15:35,759
have to figure out a way to redirect

00:15:35,199 --> 00:15:39,120
that

00:15:35,759 --> 00:15:42,959
output into persistent volumes

00:15:39,120 --> 00:15:46,160
or other kubernetes friendly storage

00:15:42,959 --> 00:15:46,800
providers so that you can maintain that

00:15:46,160 --> 00:15:49,040
storage

00:15:46,800 --> 00:15:50,480
and that ability to access that data as

00:15:49,040 --> 00:15:52,880
your application

00:15:50,480 --> 00:15:55,040
could be shut down or move from node to

00:15:52,880 --> 00:15:57,199
node in kubernetes

00:15:55,040 --> 00:15:58,240
same requirement applies to local

00:15:57,199 --> 00:16:00,240
storage so

00:15:58,240 --> 00:16:03,600
not just registry but local storage as

00:16:00,240 --> 00:16:05,519
well or usage of local databases

00:16:03,600 --> 00:16:07,519
kernel drivers or application drivers

00:16:05,519 --> 00:16:09,120
may not exist in windows containers so

00:16:07,519 --> 00:16:09,680
if your application is making use of

00:16:09,120 --> 00:16:11,519
those

00:16:09,680 --> 00:16:13,279
you have to identify them figure out if

00:16:11,519 --> 00:16:15,199
they are necessary and either split the

00:16:13,279 --> 00:16:17,040
application into different components

00:16:15,199 --> 00:16:18,399
where some components could still run in

00:16:17,040 --> 00:16:20,839
virtual machines

00:16:18,399 --> 00:16:22,079
or completely re-architect those

00:16:20,839 --> 00:16:24,160
components

00:16:22,079 --> 00:16:26,240
active directory support at the os level

00:16:24,160 --> 00:16:28,240
does not exist in windows containers

00:16:26,240 --> 00:16:29,759
you have to think about that and use

00:16:28,240 --> 00:16:32,240
gmsa that

00:16:29,759 --> 00:16:33,360
mark mentioned earlier as the ability to

00:16:32,240 --> 00:16:35,920
reach out

00:16:33,360 --> 00:16:36,880
from the container into active directory

00:16:35,920 --> 00:16:39,600
assets

00:16:36,880 --> 00:16:40,959
be careful be careful of dotnet version

00:16:39,600 --> 00:16:43,680
compatibility

00:16:40,959 --> 00:16:44,079
you know wcf for example may not exist

00:16:43,680 --> 00:16:46,560
in

00:16:44,079 --> 00:16:48,000
net core database requirements

00:16:46,560 --> 00:16:50,160
certificate management

00:16:48,000 --> 00:16:52,079
other application dependencies like for

00:16:50,160 --> 00:16:53,519
example windows api dependencies like

00:16:52,079 --> 00:16:56,480
msmq and ms

00:16:53,519 --> 00:16:58,399
dtc you know if you have old style

00:16:56,480 --> 00:17:00,160
applications using com

00:16:58,399 --> 00:17:01,759
and they require the distributed

00:17:00,160 --> 00:17:02,800
transaction coordinator that's something

00:17:01,759 --> 00:17:04,000
to think about

00:17:02,800 --> 00:17:06,400
do you have source code for the

00:17:04,000 --> 00:17:07,760
applications of delta many users that

00:17:06,400 --> 00:17:09,839
don't even have source code

00:17:07,760 --> 00:17:12,079
so maybe you have to use process monitor

00:17:09,839 --> 00:17:14,799
and fiddler and other tools and kind of

00:17:12,079 --> 00:17:15,839
lift the application from iis and put it

00:17:14,799 --> 00:17:18,160
in a container

00:17:15,839 --> 00:17:19,039
and trust me a lot of times that really

00:17:18,160 --> 00:17:21,679
really works

00:17:19,039 --> 00:17:23,919
and you can run your app in a container

00:17:21,679 --> 00:17:25,679
use the.net portability analyzer

00:17:23,919 --> 00:17:27,039
to evaluate your workloads and identify

00:17:25,679 --> 00:17:29,200
all the libraries

00:17:27,039 --> 00:17:30,559
and and and basically requirements and

00:17:29,200 --> 00:17:32,320
dependencies that they have

00:17:30,559 --> 00:17:34,320
it's a great tool to give you a full

00:17:32,320 --> 00:17:37,039
view into your application workloads

00:17:34,320 --> 00:17:38,720
and also be aware of os patching and how

00:17:37,039 --> 00:17:39,440
that could be applied because it's

00:17:38,720 --> 00:17:42,080
different

00:17:39,440 --> 00:17:42,640
for containers than for virtual machines

00:17:42,080 --> 00:17:44,640
so

00:17:42,640 --> 00:17:46,480
containers you wipe it out and you

00:17:44,640 --> 00:17:47,520
restart new while virtual machines you

00:17:46,480 --> 00:17:50,320
get to patch them

00:17:47,520 --> 00:17:50,799
and maintain the same instance over time

00:17:50,320 --> 00:17:52,400
so

00:17:50,799 --> 00:17:54,160
with that if you have more questions

00:17:52,400 --> 00:17:54,880
come and find our entire team is

00:17:54,160 --> 00:17:56,400
available

00:17:54,880 --> 00:17:58,559
we're all knowledgeable in this we've

00:17:56,400 --> 00:18:00,160
done it many many times can find us on

00:17:58,559 --> 00:18:02,480
slack as well

00:18:00,160 --> 00:18:04,080
now we're going to move into the demo so

00:18:02,480 --> 00:18:04,480
i'm going to stop sharing and let james

00:18:04,080 --> 00:18:06,720
do

00:18:04,480 --> 00:18:06,720
share

00:18:09,039 --> 00:18:15,840
and james let me make your co-host here

00:18:11,120 --> 00:18:15,840
as well

00:18:16,320 --> 00:18:22,960
go ahead james all right

00:18:19,520 --> 00:18:23,520
can you see the screen here uh yes we

00:18:22,960 --> 00:18:29,280
can

00:18:23,520 --> 00:18:32,320
i think i need to

00:18:29,280 --> 00:18:32,720
do i need to do side by side here i know

00:18:32,320 --> 00:18:36,640
it's

00:18:32,720 --> 00:18:39,679
you're good to go james excellent okay

00:18:36,640 --> 00:18:42,880
uh so i've got a video here of um

00:18:39,679 --> 00:18:43,520
using a cluster api and image builder to

00:18:42,880 --> 00:18:45,520
start

00:18:43,520 --> 00:18:47,360
building images so one of the challenges

00:18:45,520 --> 00:18:48,720
is just building that base image with

00:18:47,360 --> 00:18:51,520
all the best practices

00:18:48,720 --> 00:18:52,000
uh baked in and so there's a repository

00:18:51,520 --> 00:18:54,720
out there

00:18:52,000 --> 00:18:56,000
called image builder and you can run a

00:18:54,720 --> 00:18:58,080
simple command uh

00:18:56,000 --> 00:18:59,039
and it will kick off building an azure

00:18:58,080 --> 00:19:02,080
vm

00:18:59,039 --> 00:19:02,480
uh in as well as uh several other types

00:19:02,080 --> 00:19:05,760
of

00:19:02,480 --> 00:19:08,000
vms uh and then we'll begin to install

00:19:05,760 --> 00:19:10,240
all the components that are required for

00:19:08,000 --> 00:19:13,440
cluster api so you can see here

00:19:10,240 --> 00:19:14,640
it's installing making sure cloud-based

00:19:13,440 --> 00:19:17,600
init's installed

00:19:14,640 --> 00:19:18,000
making sure automatic updates are turned

00:19:17,600 --> 00:19:19,520
off

00:19:18,000 --> 00:19:21,440
making sure all the base images are

00:19:19,520 --> 00:19:24,000
installed

00:19:21,440 --> 00:19:25,440
whether you want container d or docker

00:19:24,000 --> 00:19:26,880
ee installed

00:19:25,440 --> 00:19:28,480
and then configuring all those things

00:19:26,880 --> 00:19:29,919
and getting them ready

00:19:28,480 --> 00:19:31,760
at the end of this you're going to have

00:19:29,919 --> 00:19:34,720
a fully functional

00:19:31,760 --> 00:19:36,080
image that you can then deploy with your

00:19:34,720 --> 00:19:40,240
cluster api

00:19:36,080 --> 00:19:43,679
providers so you see it ran through

00:19:40,240 --> 00:19:48,640
i've got this speed sped up so that it

00:19:43,679 --> 00:19:50,480
moves pretty quickly here and

00:19:48,640 --> 00:19:53,120
in just a moment it's going to be

00:19:50,480 --> 00:19:55,520
finished with

00:19:53,120 --> 00:19:56,559
deploying the image and we can turn that

00:19:55,520 --> 00:19:59,679
final image

00:19:56,559 --> 00:20:03,120
into a cis prepped ready to

00:19:59,679 --> 00:20:03,120
deployed across multiple

00:20:03,600 --> 00:20:07,120
resources so at the at the end here you

00:20:06,240 --> 00:20:10,159
get a

00:20:07,120 --> 00:20:10,640
disk url that you can then reuse and

00:20:10,159 --> 00:20:12,000
then

00:20:10,640 --> 00:20:14,080
what i'm doing here is transitioning

00:20:12,000 --> 00:20:16,559
over to the cluster api

00:20:14,080 --> 00:20:17,760
so cluster api has a concept of a

00:20:16,559 --> 00:20:19,600
management cluster

00:20:17,760 --> 00:20:21,120
uh and so what i'm showing you here is

00:20:19,600 --> 00:20:22,640
the management cluster

00:20:21,120 --> 00:20:24,480
and then once we have the management

00:20:22,640 --> 00:20:27,120
cluster run we

00:20:24,480 --> 00:20:28,480
then deploy the workload cluster so i

00:20:27,120 --> 00:20:30,960
can there's many different templates out

00:20:28,480 --> 00:20:34,320
there that have

00:20:30,960 --> 00:20:37,679
different types of um

00:20:34,320 --> 00:20:39,360
crds we're going to deploy those out and

00:20:37,679 --> 00:20:42,159
the it's going to begin to create the

00:20:39,360 --> 00:20:42,159
workload cluster

00:20:42,960 --> 00:20:47,919
here is the management cluster logs

00:20:46,000 --> 00:20:49,760
these logs are just showing you that the

00:20:47,919 --> 00:20:53,440
the workload cluster is actually being

00:20:49,760 --> 00:20:55,600
uh reconciled as it gets deployed

00:20:53,440 --> 00:20:56,720
and in a moment here we're going to see

00:20:55,600 --> 00:20:59,200
that the

00:20:56,720 --> 00:21:01,120
first control plane node came up now

00:20:59,200 --> 00:21:03,760
this is a linux control plane node

00:21:01,120 --> 00:21:05,360
and on the right hand side now that that

00:21:03,760 --> 00:21:07,280
control plane node has been deployed i

00:21:05,360 --> 00:21:10,240
can connect to it

00:21:07,280 --> 00:21:12,080
and on the left hand side i'm going to

00:21:10,240 --> 00:21:15,440
query the crds for

00:21:12,080 --> 00:21:18,480
the management cluster and watch

00:21:15,440 --> 00:21:20,480
these components come online as

00:21:18,480 --> 00:21:21,600
cluster api begins to provision each of

00:21:20,480 --> 00:21:24,080
these

00:21:21,600 --> 00:21:24,080
vms

00:21:24,799 --> 00:21:28,000
on the right hand side here i'm now

00:21:26,799 --> 00:21:31,360
talking to

00:21:28,000 --> 00:21:33,919
my cluster the workload cluster

00:21:31,360 --> 00:21:36,000
that's been deployed you can see that

00:21:33,919 --> 00:21:39,440
the nodes are have come online so

00:21:36,000 --> 00:21:42,080
we've got the windows nodes deployed and

00:21:39,440 --> 00:21:43,120
we've got a fully functioning cluster

00:21:42,080 --> 00:21:45,200
here so we've got

00:21:43,120 --> 00:21:47,360
all of the management cluster components

00:21:45,200 --> 00:21:50,640
that deployed

00:21:47,360 --> 00:21:54,640
and now we can deploy our

00:21:50,640 --> 00:21:55,600
um our extra components on there so

00:21:54,640 --> 00:21:58,960
we'll deploy

00:21:55,600 --> 00:22:01,039
out the

00:21:58,960 --> 00:22:02,400
um let's see here so we're going to

00:22:01,039 --> 00:22:05,280
deploy out

00:22:02,400 --> 00:22:06,559
our uh flannel we'll deploy it to the

00:22:05,280 --> 00:22:08,720
linux

00:22:06,559 --> 00:22:10,480
once those are all up and ready and and

00:22:08,720 --> 00:22:14,159
running we can then deploy

00:22:10,480 --> 00:22:16,080
flannel using for windows

00:22:14,159 --> 00:22:17,520
and so now we can see that the windows

00:22:16,080 --> 00:22:20,559
nodes have come up

00:22:17,520 --> 00:22:24,080
and finally now that we've got that up

00:22:20,559 --> 00:22:26,080
um the flannel

00:22:24,080 --> 00:22:27,840
flannel host is his network is

00:22:26,080 --> 00:22:32,000
completely set up we'll deploy

00:22:27,840 --> 00:22:32,000
cube proxy to the cluster

00:22:36,960 --> 00:22:42,080
so here we go and deploy cube proxy q

00:22:40,080 --> 00:22:44,000
proxy is going to take a few minutes to

00:22:42,080 --> 00:22:45,760
come up those containers will be created

00:22:44,000 --> 00:22:48,000
and now we've got a fully functional

00:22:45,760 --> 00:22:49,039
cluster across that can deploy windows

00:22:48,000 --> 00:22:52,159
and linux nodes

00:22:49,039 --> 00:22:54,240
so the next step that we'll do is we'll

00:22:52,159 --> 00:22:56,640
go out and deploy uh two different

00:22:54,240 --> 00:22:58,240
workload components so we'll deploy an

00:22:56,640 --> 00:23:01,919
iis application

00:22:58,240 --> 00:23:03,919
and then we'll also deploy a helper

00:23:01,919 --> 00:23:06,840
pod so that we can see communication

00:23:03,919 --> 00:23:08,640
happening back and forth between those

00:23:06,840 --> 00:23:10,880
pods

00:23:08,640 --> 00:23:12,880
so just switching over to default just

00:23:10,880 --> 00:23:16,240
to deploy out the

00:23:12,880 --> 00:23:18,799
um iis component and then

00:23:16,240 --> 00:23:19,440
we're going to deploy out a multi-arch

00:23:18,799 --> 00:23:21,919
image

00:23:19,440 --> 00:23:23,600
that's going to be our helper test

00:23:21,919 --> 00:23:27,440
component so we can see that they've

00:23:23,600 --> 00:23:30,480
come up online here and

00:23:27,440 --> 00:23:33,520
and uh we've got ip addresses

00:23:30,480 --> 00:23:34,320
and here we have the is service we're

00:23:33,520 --> 00:23:36,480
going to

00:23:34,320 --> 00:23:39,120
go out and actually make sure that that

00:23:36,480 --> 00:23:42,320
got provisioned correctly here

00:23:39,120 --> 00:23:43,279
so copy that ip address and open up a

00:23:42,320 --> 00:23:45,200
browser and

00:23:43,279 --> 00:23:48,240
here we've got iis running on that

00:23:45,200 --> 00:23:48,240
workload cluster

00:23:48,559 --> 00:23:54,640
and then the last step of this is um

00:23:52,159 --> 00:23:55,360
executing into that test component we're

00:23:54,640 --> 00:23:58,640
going to query

00:23:55,360 --> 00:23:59,440
the iis cluster and we'll also query out

00:23:58,640 --> 00:24:01,760
make sure that we have

00:23:59,440 --> 00:24:02,840
internet connection out to an external

00:24:01,760 --> 00:24:06,159
site

00:24:02,840 --> 00:24:09,360
and finally here we'll see that

00:24:06,159 --> 00:24:11,440
we've got all of the pods and at the

00:24:09,360 --> 00:24:14,799
bottom here you'll see

00:24:11,440 --> 00:24:18,480
that we have um

00:24:14,799 --> 00:24:21,360
windows server 2019 with docker

00:24:18,480 --> 00:24:22,640
ee running on it and we were able to do

00:24:21,360 --> 00:24:25,840
query and deploy all those

00:24:22,640 --> 00:24:28,880
those pods to it and so this is

00:24:25,840 --> 00:24:30,799
uh an example of using uh cluster api

00:24:28,880 --> 00:24:34,240
azure to deploy windows notes

00:24:30,799 --> 00:24:35,760
i'll hand it back to you what a dynamite

00:24:34,240 --> 00:24:37,600
demo thank you james

00:24:35,760 --> 00:24:39,679
and the entire team both from sig

00:24:37,600 --> 00:24:40,559
windows as well as from the c-cluster

00:24:39,679 --> 00:24:42,159
life cycle

00:24:40,559 --> 00:24:44,080
that's been working on this you know it

00:24:42,159 --> 00:24:47,440
is super super exciting for me

00:24:44,080 --> 00:24:50,480
it's gonna make it easier for it admins

00:24:47,440 --> 00:24:51,279
and operators to deploy uh windows

00:24:50,480 --> 00:24:53,600
clusters

00:24:51,279 --> 00:24:54,559
uh by basically defining just a yaml for

00:24:53,600 --> 00:24:57,200
their clusters

00:24:54,559 --> 00:24:58,480
giving us a specification and then we do

00:24:57,200 --> 00:25:00,640
all the work and all the plumbing

00:24:58,480 --> 00:25:02,559
together cluster up and running

00:25:00,640 --> 00:25:03,760
based on the definition and the desired

00:25:02,559 --> 00:25:05,840
config this is

00:25:03,760 --> 00:25:06,880
great and it's going to make operations

00:25:05,840 --> 00:25:08,480
so much better

00:25:06,880 --> 00:25:09,600
and then you know on top of that now

00:25:08,480 --> 00:25:10,880
we're going to make it easy for you to

00:25:09,600 --> 00:25:11,600
create your cluster so now you can

00:25:10,880 --> 00:25:14,080
modernize

00:25:11,600 --> 00:25:16,080
your apps and run windows containers on

00:25:14,080 --> 00:25:18,240
kubernetes

00:25:16,080 --> 00:25:19,679
so as you've seen you know we have a

00:25:18,240 --> 00:25:22,320
tremendous amount of

00:25:19,679 --> 00:25:23,760
innovation happening in sick windows and

00:25:22,320 --> 00:25:24,480
one of the things that mark and i have

00:25:23,760 --> 00:25:26,559
talked about

00:25:24,480 --> 00:25:28,000
in community in the past and one of the

00:25:26,559 --> 00:25:30,000
blogs we've created

00:25:28,000 --> 00:25:32,559
come and join sick windows it's one of

00:25:30,000 --> 00:25:33,600
the few unique opportunities you have in

00:25:32,559 --> 00:25:36,159
kubernetes

00:25:33,600 --> 00:25:37,679
to work across the board of the entire

00:25:36,159 --> 00:25:40,480
kubernetes subsystem

00:25:37,679 --> 00:25:41,360
you can work in storage compute

00:25:40,480 --> 00:25:44,799
networking

00:25:41,360 --> 00:25:46,559
api cluster api who have

00:25:44,799 --> 00:25:48,559
everything so if you want to really

00:25:46,559 --> 00:25:51,120
touch everything in kubernetes

00:25:48,559 --> 00:25:52,240
windows is one of those areas we have

00:25:51,120 --> 00:25:53,919
weekly meetings

00:25:52,240 --> 00:25:55,520
they're all recorded so you can go and

00:25:53,919 --> 00:25:56,559
record and view all the recordings from

00:25:55,520 --> 00:25:58,000
past meetings

00:25:56,559 --> 00:25:59,840
if you want to come in and help us write

00:25:58,000 --> 00:26:01,760
documentation and user stories

00:25:59,840 --> 00:26:04,559
or fix some bugs starting with the good

00:26:01,760 --> 00:26:06,640
first issue or even review our open prs

00:26:04,559 --> 00:26:08,400
we're a welcoming community we want to

00:26:06,640 --> 00:26:10,960
need to come in and contribute

00:26:08,400 --> 00:26:11,600
we'll mentor you or help you get started

00:26:10,960 --> 00:26:13,919
um

00:26:11,600 --> 00:26:15,840
i'm going to leave this slide up this is

00:26:13,919 --> 00:26:18,400
how you can engage with our community

00:26:15,840 --> 00:26:20,000
we have our ids on the left on github as

00:26:18,400 --> 00:26:23,120
well as slack

00:26:20,000 --> 00:26:25,200
we have our channels our mailing list uh

00:26:23,120 --> 00:26:26,240
the documentation that you have our

00:26:25,200 --> 00:26:28,159
youtube playlist

00:26:26,240 --> 00:26:30,080
as well as our zoom link we're gonna

00:26:28,159 --> 00:26:32,880
leave the last 10 minutes or so

00:26:30,080 --> 00:26:34,919
here for q a thank you all and we

00:26:32,880 --> 00:26:37,919
appreciate your time spending with us

00:26:34,919 --> 00:26:37,919

YouTube URL: https://www.youtube.com/watch?v=-k6Zrv2SaGM


