Title: How to deploy your .NET Core Apps In Azure Kubernetes
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	The talk will be based on deploying a .NET Core App in Azure Kubernetes. The demo will illustrate how to do the following:
1) Creating a simple .NET Core App
2) Creating a Docker Image
3) Creating an Azure Container Registry
4) Pushing the Docker Image To ACR
5) Creating a Kubernetes Cluster and
6) Deploying your Application.

Busayo Amowe is a .NET core developer by day and a HashiCorp Ambassador.
Captions: 
	00:00:00,000 --> 00:00:04,080
hello everyone my name is busayo and i'm

00:00:02,720 --> 00:00:06,640
a software engineer and

00:00:04,080 --> 00:00:08,559
i'm also an ash cup ambassador so today

00:00:06,640 --> 00:00:10,320
i'm going to be talking about how

00:00:08,559 --> 00:00:13,040
you can deploy your dot network apps to

00:00:10,320 --> 00:00:14,400
azure kubernetes

00:00:13,040 --> 00:00:16,720
um so i'm not going to give a brief

00:00:14,400 --> 00:00:18,800
summary about what dot net core is so

00:00:16,720 --> 00:00:21,680
dot net core is an open source

00:00:18,800 --> 00:00:22,640
and the cross platform framework is used

00:00:21,680 --> 00:00:25,519
to build

00:00:22,640 --> 00:00:27,920
applications such as web apps iot apps

00:00:25,519 --> 00:00:31,359
web apis mobile backends

00:00:27,920 --> 00:00:32,000
and so on and the netco app runs on.net

00:00:31,359 --> 00:00:35,600
core

00:00:32,000 --> 00:00:37,680
or the food.net framework so

00:00:35,600 --> 00:00:39,200
there's um this thing that that network

00:00:37,680 --> 00:00:42,000
has it's called kesho

00:00:39,200 --> 00:00:43,600
it's a managed cross-platform web server

00:00:42,000 --> 00:00:46,960
and you typically run

00:00:43,600 --> 00:00:49,920
behind a production web server like is

00:00:46,960 --> 00:00:51,039
engines so there are various ways and

00:00:49,920 --> 00:00:53,600
different

00:00:51,039 --> 00:00:55,120
ways um to publish and deploy your

00:00:53,600 --> 00:00:56,079
network app so at least there's some of

00:00:55,120 --> 00:00:59,120
them here

00:00:56,079 --> 00:01:00,719
you can publish your app to iis you can

00:00:59,120 --> 00:01:03,120
publish your apps on ftp

00:01:00,719 --> 00:01:04,559
server and you can publish your app to a

00:01:03,120 --> 00:01:05,680
container registry that works with

00:01:04,559 --> 00:01:07,040
docker images

00:01:05,680 --> 00:01:09,680
which is what we're going to be looking

00:01:07,040 --> 00:01:09,680
at today

00:01:09,760 --> 00:01:15,439
so what's a kubernetes service um it's a

00:01:13,040 --> 00:01:16,400
logical abstraction for a different

00:01:15,439 --> 00:01:18,479
group of ports

00:01:16,400 --> 00:01:19,600
in the cluster that typically like

00:01:18,479 --> 00:01:23,840
perform the same

00:01:19,600 --> 00:01:26,640
function so um there's aks which is

00:01:23,840 --> 00:01:27,840
azure kubernetes service and what it

00:01:26,640 --> 00:01:29,439
helps you do is um

00:01:27,840 --> 00:01:31,360
it helps it helps simplify your

00:01:29,439 --> 00:01:35,200
deployment process

00:01:31,360 --> 00:01:38,799
um so your workload or your personal

00:01:35,200 --> 00:01:41,680
overhead is handed over to azure

00:01:38,799 --> 00:01:42,240
um and so what azure does is it handles

00:01:41,680 --> 00:01:45,360
like

00:01:42,240 --> 00:01:46,399
critical tasks for you attacks such as

00:01:45,360 --> 00:01:49,520
health monitoring

00:01:46,399 --> 00:01:52,159
maintenance um the part is being

00:01:49,520 --> 00:01:56,240
restored if there's a failure so

00:01:52,159 --> 00:01:59,360
your um when you deploy your cluster

00:01:56,240 --> 00:02:01,360
um things like your nodes

00:01:59,360 --> 00:02:04,719
and your humanity master they're all

00:02:01,360 --> 00:02:07,119
deployed and they're configured for you

00:02:04,719 --> 00:02:08,160
so yeah i mentioned earlier that one way

00:02:07,119 --> 00:02:11,039
to publish

00:02:08,160 --> 00:02:12,400
or deploy your app is um by using a

00:02:11,039 --> 00:02:14,400
container registry

00:02:12,400 --> 00:02:15,440
so we have what is called azure

00:02:14,400 --> 00:02:17,920
container registry

00:02:15,440 --> 00:02:18,560
it's a private docker registry in azure

00:02:17,920 --> 00:02:21,440
and

00:02:18,560 --> 00:02:22,879
you can use it to store and manage your

00:02:21,440 --> 00:02:25,760
docker container images

00:02:22,879 --> 00:02:26,480
also you should store related artifacts

00:02:25,760 --> 00:02:28,879
and

00:02:26,480 --> 00:02:30,560
one way to use azure registry or a way

00:02:28,879 --> 00:02:33,440
to use azure container registry

00:02:30,560 --> 00:02:33,920
is by pushing your image to the registry

00:02:33,440 --> 00:02:36,319
using

00:02:33,920 --> 00:02:37,680
docker commands so we have the commands

00:02:36,319 --> 00:02:38,560
i can use to show image should be

00:02:37,680 --> 00:02:40,560
registered

00:02:38,560 --> 00:02:41,920
you can pull from a registry you can run

00:02:40,560 --> 00:02:44,720
an email from your registry

00:02:41,920 --> 00:02:46,400
it can also deploy to your humanity

00:02:44,720 --> 00:02:48,879
poster

00:02:46,400 --> 00:02:51,440
so here is the workflow and this is how

00:02:48,879 --> 00:02:54,080
um typically like

00:02:51,440 --> 00:02:54,800
deploy your app i move from um just a

00:02:54,080 --> 00:02:57,519
basic

00:02:54,800 --> 00:02:59,360
number up here and i mean it's you can

00:02:57,519 --> 00:03:01,440
run it from your azure keyboard

00:02:59,360 --> 00:03:03,200
so we have our web app here which speaks

00:03:01,440 --> 00:03:05,920
to our api application

00:03:03,200 --> 00:03:07,280
it's um like a regular front-end speaks

00:03:05,920 --> 00:03:09,280
on api

00:03:07,280 --> 00:03:11,120
comes with like a web application just

00:03:09,280 --> 00:03:14,640
picks an external api

00:03:11,120 --> 00:03:16,480
and then the api speaks to a database

00:03:14,640 --> 00:03:19,440
application which in turn i mean

00:03:16,480 --> 00:03:21,519
communicates with azure sql database so

00:03:19,440 --> 00:03:24,720
what happens is as you can see

00:03:21,519 --> 00:03:27,360
um these two applications are

00:03:24,720 --> 00:03:28,720
moved to the azure container registry

00:03:27,360 --> 00:03:29,280
but before they are moved to the other

00:03:28,720 --> 00:03:31,440
container

00:03:29,280 --> 00:03:33,440
you see what happens is they have to be

00:03:31,440 --> 00:03:35,120
a docker image so you just typically

00:03:33,440 --> 00:03:38,159
have to um

00:03:35,120 --> 00:03:39,680
um containerize these applications

00:03:38,159 --> 00:03:42,239
and then when they are containerized you

00:03:39,680 --> 00:03:43,840
move it to or you push it to your azure

00:03:42,239 --> 00:03:47,360
container registry

00:03:43,840 --> 00:03:48,799
and then when your image is

00:03:47,360 --> 00:03:51,200
confirmed to be your azure container

00:03:48,799 --> 00:03:53,760
registry you deploy to

00:03:51,200 --> 00:03:54,959
um the kubernetes cluster and you can

00:03:53,760 --> 00:03:58,640
run your app

00:03:54,959 --> 00:03:58,640
from azure kubernetes

00:03:58,720 --> 00:04:05,200
so yeah um these steps just basically

00:04:02,319 --> 00:04:05,439
exponentiate the diagram dimension that

00:04:05,200 --> 00:04:08,720
i

00:04:05,439 --> 00:04:10,319
showed earlier so um let me create your

00:04:08,720 --> 00:04:12,400
app

00:04:10,319 --> 00:04:14,480
um create a docker image from your app

00:04:12,400 --> 00:04:17,759
containerize your image quality

00:04:14,480 --> 00:04:20,160
app rather than um there you create

00:04:17,759 --> 00:04:21,840
an azure container registry you push

00:04:20,160 --> 00:04:22,960
your image to the azure container

00:04:21,840 --> 00:04:25,520
registry

00:04:22,960 --> 00:04:26,240
you create a community cluster and you

00:04:25,520 --> 00:04:28,960
also create

00:04:26,240 --> 00:04:29,520
your manifest files and you deploy and

00:04:28,960 --> 00:04:31,680
run

00:04:29,520 --> 00:04:32,880
your app so i'm just going to go right

00:04:31,680 --> 00:04:36,000
into

00:04:32,880 --> 00:04:39,120
um looking at the requirements

00:04:36,000 --> 00:04:42,880
so here are some the tools that

00:04:39,120 --> 00:04:45,199
will be required for this demo um docker

00:04:42,880 --> 00:04:46,720
then i'm only using an id i'm going to

00:04:45,199 --> 00:04:47,280
use visual studio code so you can use

00:04:46,720 --> 00:04:50,960
this just to

00:04:47,280 --> 00:04:55,280
code as well it's fine then um

00:04:50,960 --> 00:04:58,240
i just cli have been installed on your

00:04:55,280 --> 00:04:59,360
pc so you can use azure seller from a

00:04:58,240 --> 00:05:03,120
temmie now uh

00:04:59,360 --> 00:05:06,960
or you can use this cli on

00:05:03,120 --> 00:05:10,000
hotado azure so either ways then

00:05:06,960 --> 00:05:13,039
i'm gonna using them cube ctl for

00:05:10,000 --> 00:05:16,960
um to run my kubernetes commands

00:05:13,039 --> 00:05:19,919
so yeah um we'll go to the demo now

00:05:16,960 --> 00:05:20,800
okay so i'm going to be creating my app

00:05:19,919 --> 00:05:24,320
right now

00:05:20,800 --> 00:05:39,840
so um my business

00:05:24,320 --> 00:05:39,840
i want to create an mvc

00:05:55,600 --> 00:06:00,000
um i did you were supposed to let

00:05:58,240 --> 00:06:00,960
justice hit your keyboard let's just go

00:06:00,000 --> 00:06:03,680
ahead

00:06:00,960 --> 00:06:07,840
okay so um i'm going to navigate to the

00:06:03,680 --> 00:06:07,840
app folder now

00:06:10,080 --> 00:06:14,960
then i'm going to um restart

00:06:17,199 --> 00:06:23,360
the second section i mean i can't really

00:06:20,560 --> 00:06:23,680
view it or run brother i'm just going to

00:06:23,360 --> 00:06:27,199
do

00:06:23,680 --> 00:06:27,199
a next one

00:06:29,280 --> 00:06:33,360
yep so app is running so we can go ahead

00:06:31,759 --> 00:06:36,800
and confirm

00:06:33,360 --> 00:06:38,960
this um on our browser so it's really

00:06:36,800 --> 00:06:38,960
nice

00:06:40,960 --> 00:06:49,840
we're just going to copy that um

00:06:59,599 --> 00:07:03,840
from our id

00:07:28,560 --> 00:07:36,160
so what we are going to do next is um

00:07:32,160 --> 00:07:37,759
we're going to um containerize our app

00:07:36,160 --> 00:07:40,560
that's

00:07:37,759 --> 00:07:41,360
make it up into a docker image so let's

00:07:40,560 --> 00:07:45,199
go back to

00:07:41,360 --> 00:07:47,360
terminal and then all just have to do

00:07:45,199 --> 00:07:47,360
is

00:07:50,800 --> 00:07:55,280
you can do it from here from terminal

00:07:53,039 --> 00:07:57,840
here or from the terminal on

00:07:55,280 --> 00:07:57,840
the id

00:08:24,840 --> 00:08:29,280
me

00:08:26,080 --> 00:08:41,839
okay so next stop

00:08:29,280 --> 00:08:41,839
um we're gonna um create

00:08:48,160 --> 00:08:56,640
okay so we can see that um our

00:08:53,040 --> 00:08:57,519
offer has been created so let's just go

00:08:56,640 --> 00:08:59,279
ahead

00:08:57,519 --> 00:09:01,120
um so because i've done this before i'll

00:08:59,279 --> 00:09:09,839
just go ahead to

00:09:01,120 --> 00:09:09,839
um copy what i have here

00:09:21,279 --> 00:09:25,519
have before so just make some

00:09:23,040 --> 00:09:28,959
adjustments and then people do that

00:09:25,519 --> 00:09:37,839
um our dear ladies

00:09:28,959 --> 00:09:37,839
from the africa pcb

00:09:42,800 --> 00:09:49,399
so typically so what this does

00:09:46,240 --> 00:09:52,560
is that um we are selecting

00:09:49,399 --> 00:09:55,839
5.00 of asp.net

00:09:52,560 --> 00:09:58,959
and then we are copying our

00:09:55,839 --> 00:10:01,760
published app into this folder

00:09:58,959 --> 00:10:03,040
uh this is working directory app then we

00:10:01,760 --> 00:10:06,079
are telling

00:10:03,040 --> 00:10:06,880
that you should use up as the working

00:10:06,079 --> 00:10:11,200
directory

00:10:06,880 --> 00:10:11,200
and then the entry point is um.net

00:10:12,160 --> 00:10:19,120
which is like an executive command

00:10:15,760 --> 00:10:23,040
so next up is

00:10:19,120 --> 00:10:33,839
let's just create another folder

00:10:23,040 --> 00:10:33,839
called um

00:10:44,839 --> 00:10:47,839
um

00:10:54,480 --> 00:10:58,720
so yeah so um what i want to do next is

00:10:57,040 --> 00:11:00,959
now i'm going to build

00:10:58,720 --> 00:11:00,959
our

00:11:12,320 --> 00:11:15,839
let's call this um

00:11:26,839 --> 00:11:29,839
image

00:11:34,320 --> 00:11:45,440
and let's just specify another created

00:11:42,399 --> 00:11:46,399
let's then go ahead and use our image

00:11:45,440 --> 00:11:48,880
speed

00:11:46,399 --> 00:11:48,880
right now

00:11:49,600 --> 00:11:54,000
and yep our image is done so as you can

00:11:52,560 --> 00:11:58,480
see

00:11:54,000 --> 00:12:02,480
um a command from asp.net user execute

00:11:58,480 --> 00:12:05,760
the copying from here to here selecting

00:12:02,480 --> 00:12:07,200
up other working directory and then here

00:12:05,760 --> 00:12:10,639
our

00:12:07,200 --> 00:12:12,800
um image has been so as you can see we

00:12:10,639 --> 00:12:13,839
have an image here that contains our app

00:12:12,800 --> 00:12:16,240
so

00:12:13,839 --> 00:12:18,880
um you can check the list of images that

00:12:16,240 --> 00:12:22,079
you had before

00:12:18,880 --> 00:12:25,839
um so this is the last one we just ran

00:12:22,079 --> 00:12:25,839
46 seconds ago

00:12:26,240 --> 00:12:28,800
well good

00:12:34,800 --> 00:12:38,079
okay so let's go ahead and create our

00:12:37,360 --> 00:12:41,680
container

00:12:38,079 --> 00:12:44,240
so you have docker

00:12:41,680 --> 00:12:44,240
its

00:12:45,760 --> 00:12:53,839
memorable container

00:13:09,360 --> 00:13:13,920
the name of our image which is this

00:13:14,160 --> 00:13:20,320
so yeah we get back our container id so

00:13:17,680 --> 00:13:23,519
you can only docker commands you get a

00:13:20,320 --> 00:13:23,519
list of all the containers

00:13:27,920 --> 00:13:31,360
10 seconds ago

00:13:33,200 --> 00:13:36,720
so you can set to start off container so

00:13:36,160 --> 00:13:42,800
let's just

00:13:36,720 --> 00:13:49,680
docker start of our containers for

00:13:42,800 --> 00:13:52,240
sample container

00:13:49,680 --> 00:13:52,240
and here

00:13:54,000 --> 00:14:03,839
it's been started okay so no no

00:13:57,040 --> 00:14:03,839
no image so there's the docker

00:14:15,440 --> 00:14:17,920
image

00:14:22,880 --> 00:14:31,839
so yeah our app is running on the card

00:14:26,480 --> 00:14:31,839
so i'm going to check our browser

00:14:35,279 --> 00:14:43,279
so yeah just run our image

00:14:39,920 --> 00:14:45,920
from so

00:14:43,279 --> 00:14:47,760
um going back to our terminal now what

00:14:45,920 --> 00:14:50,959
all we're supposed to do next is

00:14:47,760 --> 00:14:54,160
push our image to

00:14:50,959 --> 00:14:56,079
azure container right here so

00:14:54,160 --> 00:14:58,800
if i do that you have to create a

00:14:56,079 --> 00:14:58,800
research because

00:15:07,360 --> 00:15:12,240
so i'm just going to use the one that i

00:15:09,680 --> 00:15:12,240
created

00:15:24,839 --> 00:15:27,839
um

00:15:39,600 --> 00:15:42,959
um registry

00:15:50,959 --> 00:15:55,839
and then yes

00:16:20,839 --> 00:16:23,839
um

00:16:44,450 --> 00:16:47,529
[Music]

00:16:48,839 --> 00:16:51,839
image

00:16:57,040 --> 00:17:05,920
server for our container instance

00:17:00,959 --> 00:17:05,920
so let's just um try to get the

00:17:06,079 --> 00:17:14,480
server for that to our status

00:17:11,600 --> 00:17:14,480
registration

00:17:15,839 --> 00:17:19,039
translate clearly

00:17:30,720 --> 00:17:32,880
this

00:17:42,960 --> 00:17:47,840
to find our images again

00:17:58,840 --> 00:18:03,520
image

00:18:00,000 --> 00:18:14,320
and the name of our

00:18:03,520 --> 00:18:17,510
um server

00:18:14,320 --> 00:18:17,510
[Music]

00:18:26,840 --> 00:18:29,840
um

00:18:40,840 --> 00:18:43,840
query

00:18:54,240 --> 00:18:57,840
this is

00:19:19,840 --> 00:19:25,840
[Music]

00:19:22,840 --> 00:19:25,840
as

00:19:26,799 --> 00:19:30,559
so we're done with that now the next

00:19:29,200 --> 00:19:34,400
stage is to push

00:19:30,559 --> 00:19:39,840
our image to our concentrated shape

00:19:34,400 --> 00:19:39,840
that we just created

00:19:40,880 --> 00:19:45,039
um our

00:19:45,840 --> 00:19:53,440
acr server

00:19:49,039 --> 00:19:53,440
and then our images

00:20:04,320 --> 00:20:09,700
to push

00:20:06,540 --> 00:20:09,700
[Music]

00:20:14,000 --> 00:20:21,840
as well

00:20:28,640 --> 00:20:33,760
so yeah says images and

00:20:57,840 --> 00:21:03,679
so this is azure photo

00:21:03,840 --> 00:21:06,640
you see um

00:21:11,039 --> 00:21:17,840
i have actually um created one

00:21:14,840 --> 00:21:17,840
before

00:21:26,420 --> 00:21:31,840
[Music]

00:21:28,840 --> 00:21:31,840
another

00:21:41,760 --> 00:21:46,799
okay so i'm just gonna go ahead

00:21:47,520 --> 00:21:53,760
choose my research um and then call my

00:21:50,960 --> 00:21:53,760
cluster

00:21:56,840 --> 00:21:59,840
kcd

00:22:06,070 --> 00:22:09,300
[Music]

00:22:23,440 --> 00:22:30,059
so initializing um

00:22:26,880 --> 00:22:30,059
[Music]

00:22:38,880 --> 00:22:42,640
bit for that

00:22:48,559 --> 00:22:55,840
and as you can see it's been created

00:23:01,919 --> 00:23:09,840
check out um

00:23:05,280 --> 00:23:09,840
our container registry

00:23:20,840 --> 00:23:24,799
registry

00:23:22,880 --> 00:23:26,799
and you can just go ahead to check it

00:23:24,799 --> 00:23:37,840
out

00:23:26,799 --> 00:23:37,840
we'll create it um

00:23:44,080 --> 00:23:48,000
so if you go to repositories here we

00:23:46,720 --> 00:23:52,400
should see

00:23:48,000 --> 00:23:52,400
the image that you created

00:23:56,400 --> 00:23:59,039
click on that

00:24:02,559 --> 00:24:05,039
you see

00:24:16,840 --> 00:24:22,240
stuff so um

00:24:19,940 --> 00:24:24,000
[Music]

00:24:22,240 --> 00:24:28,080
let's just go ahead and download our

00:24:24,000 --> 00:24:28,080
cluster configuration

00:24:30,840 --> 00:24:33,840
so

00:24:44,840 --> 00:24:50,000
um

00:24:46,240 --> 00:24:50,000
is my resource

00:24:50,480 --> 00:24:52,799
group

00:24:55,600 --> 00:25:01,840
and the name of our cluster is casey

00:25:14,640 --> 00:25:19,600
so next is um we verify our cube ctrl

00:25:17,840 --> 00:25:22,559
context so you do that by running

00:25:19,600 --> 00:25:22,559
keep ctrl

00:25:26,840 --> 00:25:29,840
config

00:25:40,799 --> 00:25:43,039
so

00:25:54,840 --> 00:25:57,840
so

00:26:09,360 --> 00:26:17,039
kubernetes finance manifesto so

00:26:12,880 --> 00:26:24,400
um let's just go ahead to

00:26:17,039 --> 00:26:28,960
create um

00:26:24,400 --> 00:26:28,960
so now go back to our id to create that

00:26:32,320 --> 00:26:41,200
so all you do is um do

00:26:38,240 --> 00:26:41,200
let's create a board

00:26:45,279 --> 00:26:53,840
and let's create a service

00:26:54,159 --> 00:26:59,279
so the smallest unit of work in

00:26:56,159 --> 00:27:01,600
humanities is called the port

00:26:59,279 --> 00:27:01,600
and

00:27:02,480 --> 00:27:07,039
going back to our area now so i'm just

00:27:25,520 --> 00:27:29,360
and then i just give like the

00:27:27,200 --> 00:27:30,000
appropriate names i'm going to name this

00:27:29,360 --> 00:27:35,840
up

00:27:30,000 --> 00:27:35,840
africa kcd up

00:27:44,640 --> 00:27:52,080
up and then our

00:27:48,320 --> 00:27:52,080
image is

00:27:53,279 --> 00:27:56,720
from docker images

00:27:59,120 --> 00:28:17,840
here's our image

00:28:02,480 --> 00:28:17,840
i'm ready to replace that

00:28:22,240 --> 00:28:29,039
and then yes roman should be exposed on

00:28:26,240 --> 00:28:29,039
port 18

00:28:43,600 --> 00:28:47,520
please don't cook him you might make me

00:28:45,520 --> 00:28:50,799
speak see

00:28:47,520 --> 00:28:54,960
just writes from scratch so

00:28:50,799 --> 00:28:54,960
i'm just going to copy my app

00:29:25,360 --> 00:29:33,200
this port

00:29:30,080 --> 00:29:35,679
so let's go back to our port so i can

00:29:33,200 --> 00:29:38,000
sort of like explain what's going on

00:29:35,679 --> 00:29:40,399
here

00:29:38,000 --> 00:29:42,080
so you can see we have labels here so

00:29:40,399 --> 00:29:43,039
what labels does is they're basically

00:29:42,080 --> 00:29:44,720
like

00:29:43,039 --> 00:29:46,799
key value pairs that attach to

00:29:44,720 --> 00:29:49,279
kubernetes objects

00:29:46,799 --> 00:29:51,520
so they are basically like used to

00:29:49,279 --> 00:29:54,159
identify the attributes of

00:29:51,520 --> 00:29:55,840
the object and i mean this is for

00:29:54,159 --> 00:29:59,520
organizing

00:29:55,840 --> 00:30:01,919
subsets of objects so spec

00:29:59,520 --> 00:30:04,000
may describe the properties of the port

00:30:01,919 --> 00:30:07,440
as you can see we're refreshing

00:30:04,000 --> 00:30:08,000
our image and then like what's the image

00:30:07,440 --> 00:30:10,480
our image

00:30:08,000 --> 00:30:12,720
is a web page and then when instructing

00:30:10,480 --> 00:30:17,200
kubernetes is that

00:30:12,720 --> 00:30:20,559
nato traffic um it's on port 18

00:30:17,200 --> 00:30:23,039
so the reason for this service

00:30:20,559 --> 00:30:25,200
is because we're trying to expose

00:30:23,039 --> 00:30:28,799
kubernetes and postal

00:30:25,200 --> 00:30:33,279
externally so that's why we created this

00:30:28,799 --> 00:30:33,279
service right now which is um

00:30:34,840 --> 00:30:39,600
referencing

00:30:36,159 --> 00:30:41,440
is referencing our um

00:30:39,600 --> 00:30:44,640
point so you see the container process

00:30:41,440 --> 00:30:47,039
on 80 and then

00:30:44,640 --> 00:30:48,960
this is the target for 80 but then like

00:30:47,039 --> 00:30:52,960
our f

00:30:48,960 --> 00:30:56,240
on expose on 5003

00:30:52,960 --> 00:30:59,200
and then we're also specifying a load

00:30:56,240 --> 00:30:59,200
balancer here

00:31:00,240 --> 00:31:06,640
so let's just go ahead to apply

00:31:03,519 --> 00:31:08,880
our changes we have to apply

00:31:06,640 --> 00:31:08,880
um

00:31:11,120 --> 00:31:14,640
so let's just go ahead to apply our

00:31:13,440 --> 00:31:17,760
manifesto

00:31:14,640 --> 00:31:22,480
go back to 10 now

00:31:17,760 --> 00:31:26,240
and then we're gonna do cube

00:31:22,480 --> 00:31:26,240
ctl apply

00:31:30,840 --> 00:31:35,919
for

00:31:32,240 --> 00:31:38,720
this is um applying

00:31:35,919 --> 00:31:39,760
report sources it's been created and

00:31:38,720 --> 00:31:43,760
then

00:31:39,760 --> 00:31:43,760
go ahead to apply our service

00:31:50,960 --> 00:31:54,159
and it's been created

00:31:54,640 --> 00:31:58,720
so what we just have to do now is we're

00:31:56,480 --> 00:32:02,480
gonna watch

00:31:58,720 --> 00:32:04,720
our services to see if they are off or

00:32:02,480 --> 00:32:04,720
not

00:32:05,600 --> 00:32:10,240
you see watch

00:32:11,279 --> 00:32:20,000
so as you can see our app is up

00:32:15,679 --> 00:32:21,919
um this is the name of our podge

00:32:20,000 --> 00:32:24,399
type it's a load balancer this is the

00:32:21,919 --> 00:32:27,519
cluster again this is external ip

00:32:24,399 --> 00:32:30,880
you can access it on this is the

00:32:27,519 --> 00:32:34,080
port so let's just now go ahead and go

00:32:30,880 --> 00:32:34,080
to our browser

00:32:35,039 --> 00:32:43,840
and copy your external id

00:32:54,840 --> 00:32:57,840
upgrade

00:33:01,360 --> 00:33:05,440
so thank you so much for listening

00:33:03,600 --> 00:33:08,080
here's my twitter handle and

00:33:05,440 --> 00:33:09,600
if you have any questions as this was a

00:33:08,080 --> 00:33:12,240
recording you can

00:33:09,600 --> 00:33:13,679
drop it in the chat i'll be listening in

00:33:12,240 --> 00:33:19,120
and i would love to answer

00:33:13,679 --> 00:33:19,120

YouTube URL: https://www.youtube.com/watch?v=22i9BftJdMw


