Title: How to automate the setup of a Kubernetes cluster on GCP
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	Using Ansible to install, setup, and configure a Google Kubernetes Cluster (GKE) on Google Cloud Platform (GCP). Infrastructure as Code (IaC) is paramount to maintain consistency across different environments. IaC resolves the environment drift issue where each environment has unique configurations that are not reproducible automatically. Ansible is the tool of choice to implement this tutorial. It helps us to create the necessary code to provision a basic Kubernetes cluster on GCP (GKE) automation.
Captions: 
	00:00:00,080 --> 00:00:04,960
hello everyone welcome to the inaugural

00:00:02,720 --> 00:00:07,759
kubernetes community day africa

00:00:04,960 --> 00:00:08,400
i hope you are enjoying the event so far

00:00:07,759 --> 00:00:11,120
let me

00:00:08,400 --> 00:00:12,160
introduce myself my name is rafael

00:00:11,120 --> 00:00:14,960
natali

00:00:12,160 --> 00:00:15,839
and i will be talking about kubernetes

00:00:14,960 --> 00:00:18,880
ansible

00:00:15,839 --> 00:00:21,199
automation infrastructure as code and

00:00:18,880 --> 00:00:24,000
how all they work together

00:00:21,199 --> 00:00:26,320
a little bit about myself i am currently

00:00:24,000 --> 00:00:28,720
a senior devops engineer

00:00:26,320 --> 00:00:30,320
at marionette consulting i have been

00:00:28,720 --> 00:00:33,920
working with cloud

00:00:30,320 --> 00:00:35,600
and devops for about five years now

00:00:33,920 --> 00:00:37,680
across different industries and

00:00:35,600 --> 00:00:40,719
geographies before that

00:00:37,680 --> 00:00:41,280
i was a system administrator working

00:00:40,719 --> 00:00:44,559
mainly

00:00:41,280 --> 00:00:48,239
with middleware technologies also i

00:00:44,559 --> 00:00:50,800
am an aws and gcp certified professional

00:00:48,239 --> 00:00:52,160
and more relevant for today's topic i am

00:00:50,800 --> 00:00:55,280
a certified

00:00:52,160 --> 00:00:58,960
kubernetes administrator okay so

00:00:55,280 --> 00:01:01,520
let's get started infrastructure is code

00:00:58,960 --> 00:01:02,320
infrastructures code is an intrinsic

00:01:01,520 --> 00:01:05,360
part

00:01:02,320 --> 00:01:08,320
of the devops culture and best practices

00:01:05,360 --> 00:01:09,280
the goal is to guarantee configuration

00:01:08,320 --> 00:01:12,400
consistency

00:01:09,280 --> 00:01:15,040
and traceability across environments

00:01:12,400 --> 00:01:17,759
there are a plethora of tools that can

00:01:15,040 --> 00:01:20,159
help us to code our infrastructure

00:01:17,759 --> 00:01:21,520
ansible is one of the most well-known

00:01:20,159 --> 00:01:24,320
automation tools

00:01:21,520 --> 00:01:25,360
in the devops space it's a simple and

00:01:24,320 --> 00:01:28,720
powerful tool

00:01:25,360 --> 00:01:31,280
that we're going to be using today

00:01:28,720 --> 00:01:32,640
for provision or kubernetes cluster on

00:01:31,280 --> 00:01:36,240
google cloud

00:01:32,640 --> 00:01:37,520
okay so the first step and to have our

00:01:36,240 --> 00:01:41,439
code up and running

00:01:37,520 --> 00:01:44,880
is to create a couple of folders

00:01:41,439 --> 00:01:47,280
for or ansible i will create

00:01:44,880 --> 00:01:48,320
just an ansible folder and a couple of

00:01:47,280 --> 00:01:52,799
subfolders

00:01:48,320 --> 00:01:56,000
inventory and rows okay

00:01:52,799 --> 00:02:00,640
inside of the inventory

00:01:56,000 --> 00:02:04,000
folder i will create what we call

00:02:00,640 --> 00:02:05,200
inventory file in our case today the

00:02:04,000 --> 00:02:09,039
inventory file

00:02:05,200 --> 00:02:11,280
will have

00:02:09,039 --> 00:02:12,959
the declaration of all the variables

00:02:11,280 --> 00:02:16,480
that we are going to be using

00:02:12,959 --> 00:02:16,959
uh through our code i have a section

00:02:16,480 --> 00:02:19,520
here

00:02:16,959 --> 00:02:20,480
for gcp related information where i

00:02:19,520 --> 00:02:22,879
define my zone

00:02:20,480 --> 00:02:24,560
my region i will define my project id my

00:02:22,879 --> 00:02:28,000
service accounts

00:02:24,560 --> 00:02:30,080
and also a section where i will be

00:02:28,000 --> 00:02:31,280
defining some variables for our

00:02:30,080 --> 00:02:34,800
kubernetes cluster

00:02:31,280 --> 00:02:36,000
so for example the name i can say kcd

00:02:34,800 --> 00:02:38,000
africa

00:02:36,000 --> 00:02:40,400
and the number of nodes let's create

00:02:38,000 --> 00:02:43,760
that cluster with three nodes

00:02:40,400 --> 00:02:44,800
with 400 gigabytes of disk uh solid

00:02:43,760 --> 00:02:48,879
state

00:02:44,800 --> 00:02:52,560
and machine type n1 standard two

00:02:48,879 --> 00:02:53,760
okay those are the variables that we are

00:02:52,560 --> 00:02:56,480
going to be using

00:02:53,760 --> 00:02:57,120
uh through out we will see uh when you

00:02:56,480 --> 00:02:59,840
start to

00:02:57,120 --> 00:03:02,159
go with the rows where we're going to be

00:02:59,840 --> 00:03:05,920
using that

00:03:02,159 --> 00:03:06,720
okay so as for the inventory file i will

00:03:05,920 --> 00:03:10,159
be using

00:03:06,720 --> 00:03:11,440
a file that i created beforehand uh just

00:03:10,159 --> 00:03:14,640
for security reasons

00:03:11,440 --> 00:03:17,599
uh i will not be showing here but

00:03:14,640 --> 00:03:20,640
has the the same variables that i show

00:03:17,599 --> 00:03:24,000
in the example before

00:03:20,640 --> 00:03:27,200
okay after the inventory file

00:03:24,000 --> 00:03:29,519
we are going to be using the rows

00:03:27,200 --> 00:03:31,519
the ansible rows to configure the

00:03:29,519 --> 00:03:34,480
ansible tasks

00:03:31,519 --> 00:03:35,440
to provision or cluster roles are

00:03:34,480 --> 00:03:38,319
basically

00:03:35,440 --> 00:03:39,599
a set of instructions also known as

00:03:38,319 --> 00:03:42,879
tasks

00:03:39,599 --> 00:03:45,840
that ansible you will execute in

00:03:42,879 --> 00:03:48,000
the specific order to achieve the

00:03:45,840 --> 00:03:50,239
desired state

00:03:48,000 --> 00:03:52,239
it will be clear when we start to code

00:03:50,239 --> 00:03:55,200
it okay

00:03:52,239 --> 00:03:56,720
so the first row i'm going to be create

00:03:55,200 --> 00:04:01,360
is a row that will

00:03:56,720 --> 00:04:05,840
create a gcp network a vpc

00:04:01,360 --> 00:04:09,840
in my project so i create

00:04:05,840 --> 00:04:13,840
a folder called network inside of the

00:04:09,840 --> 00:04:17,919
folders the folder rows sorry

00:04:13,840 --> 00:04:20,400
tasks okay so i don't want to use the

00:04:17,919 --> 00:04:23,280
default network of my gcp project

00:04:20,400 --> 00:04:23,919
to host my kubernetes cluster in that

00:04:23,280 --> 00:04:28,720
case i

00:04:23,919 --> 00:04:34,000
am first creating a specific gcp network

00:04:28,720 --> 00:04:34,000
okay the tasks

00:04:34,160 --> 00:04:41,199
is just a ymo file that should

00:04:38,000 --> 00:04:43,120
must actually exist inside of the tasks

00:04:41,199 --> 00:04:46,160
folder

00:04:43,120 --> 00:04:51,360
name should be main

00:04:46,160 --> 00:04:51,360
data okay

00:04:51,600 --> 00:04:59,840
so in this task

00:04:55,120 --> 00:05:03,360
i just have a name for the task

00:04:59,840 --> 00:05:06,880
create ucp network and here i declare

00:05:03,360 --> 00:05:08,639
the module that

00:05:06,880 --> 00:05:11,199
the ansible module that we are going to

00:05:08,639 --> 00:05:13,759
be using the ansible module

00:05:11,199 --> 00:05:16,000
as we can see here in the documentation

00:05:13,759 --> 00:05:19,120
is a piece of code

00:05:16,000 --> 00:05:22,960
that ansible uses to know

00:05:19,120 --> 00:05:24,880
what to do when connect to gcp

00:05:22,960 --> 00:05:27,120
uh so here we can see in the

00:05:24,880 --> 00:05:30,240
documentation all the parameters that

00:05:27,120 --> 00:05:31,680
i can use uh in case in the case for the

00:05:30,240 --> 00:05:34,639
network

00:05:31,680 --> 00:05:35,919
uh we have an example which is pretty

00:05:34,639 --> 00:05:38,960
much the same

00:05:35,919 --> 00:05:39,840
that we're using here and all the return

00:05:38,960 --> 00:05:43,600
values

00:05:39,840 --> 00:05:46,479
so when we create the gcp network we can

00:05:43,600 --> 00:05:47,520
return we can register this in firewall

00:05:46,479 --> 00:05:52,479
for example

00:05:47,520 --> 00:05:56,319
the name as we are going to see here in

00:05:52,479 --> 00:06:00,160
in the row okay so the module is

00:05:56,319 --> 00:06:01,440
a piece of code that ansible knows what

00:06:00,160 --> 00:06:07,280
you do

00:06:01,440 --> 00:06:11,360
in the gcp i will come back to uh

00:06:07,280 --> 00:06:14,240
to the rows to the tasks later on

00:06:11,360 --> 00:06:16,880
uh before that i will just create

00:06:14,240 --> 00:06:21,280
another row

00:06:16,880 --> 00:06:25,520
for kubernetes cluster

00:06:21,280 --> 00:06:28,240
okay create a row the same

00:06:25,520 --> 00:06:30,240
as i did before i just created another

00:06:28,240 --> 00:06:33,600
folder

00:06:30,240 --> 00:06:35,840
kubernetes created tasks

00:06:33,600 --> 00:06:37,440
inside of these tasks i will create

00:06:35,840 --> 00:06:40,240
another

00:06:37,440 --> 00:06:40,240
main.yaml

00:06:40,720 --> 00:06:49,039
and now i will

00:06:44,080 --> 00:06:52,479
have two ansible modules

00:06:49,039 --> 00:06:53,919
okay so in order to create a kubernetes

00:06:52,479 --> 00:06:56,960
cluster in gcp

00:06:53,919 --> 00:07:00,560
i need to use two ansible modules

00:06:56,960 --> 00:07:02,880
i need to use the google cloud gcp

00:07:00,560 --> 00:07:06,560
container cluster

00:07:02,880 --> 00:07:09,759
and after i need to use the google

00:07:06,560 --> 00:07:12,479
cloud gcp container notebook

00:07:09,759 --> 00:07:14,880
to create a notebook inside of the

00:07:12,479 --> 00:07:18,080
kubernetes cluster

00:07:14,880 --> 00:07:21,280
okay again

00:07:18,080 --> 00:07:24,479
i will come back this later

00:07:21,280 --> 00:07:27,120
when the cluster is

00:07:24,479 --> 00:07:27,120
is creating

00:07:28,080 --> 00:07:36,000
and the last step

00:07:31,599 --> 00:07:39,280
is to create a instanceable playbook

00:07:36,000 --> 00:07:42,840
inside of the ansible folder here

00:07:39,280 --> 00:07:46,400
i will create a file called

00:07:42,840 --> 00:07:51,599
create kubernetes

00:07:46,400 --> 00:07:51,599
yemo again another even file

00:07:52,720 --> 00:07:59,680
and the playbook the ansible playbook

00:07:56,560 --> 00:08:00,400
is created is a file that we create to

00:07:59,680 --> 00:08:04,319
execute

00:08:00,400 --> 00:08:07,680
the rows uh is a ordered

00:08:04,319 --> 00:08:10,960
list of tasks or that's in that case

00:08:07,680 --> 00:08:14,080
rows that we use to

00:08:10,960 --> 00:08:17,280
execute the same code

00:08:14,080 --> 00:08:19,840
every time the same way the same manner

00:08:17,280 --> 00:08:20,960
is important to highlight that as i

00:08:19,840 --> 00:08:24,879
mentioned is an

00:08:20,960 --> 00:08:28,000
order at least so when i declare here

00:08:24,879 --> 00:08:31,360
to rows i will first create

00:08:28,000 --> 00:08:35,599
the network and then i will create the

00:08:31,360 --> 00:08:39,279
kubernetes cluster because i need

00:08:35,599 --> 00:08:39,279
the network created first

00:08:39,680 --> 00:08:43,039
and then create the kubernetes because

00:08:41,519 --> 00:08:47,839
the carbonates exist

00:08:43,039 --> 00:08:47,839
inside of this network okay

00:08:48,399 --> 00:08:55,680
so now

00:08:52,480 --> 00:09:00,399
we use the

00:08:55,680 --> 00:09:04,959
ansible playbook command to execute

00:09:00,399 --> 00:09:07,120
this playbook and the playbook will call

00:09:04,959 --> 00:09:08,880
the two rows the network and the

00:09:07,120 --> 00:09:12,240
kubernetes

00:09:08,880 --> 00:09:16,399
rows and will execute all the steps

00:09:12,240 --> 00:09:21,360
so as we can see here it start the play

00:09:16,399 --> 00:09:24,480
create infer which is this one it

00:09:21,360 --> 00:09:26,240
and simple find the rows

00:09:24,480 --> 00:09:27,680
and it finds the first row is the

00:09:26,240 --> 00:09:32,080
network okay

00:09:27,680 --> 00:09:36,240
so the network the network

00:09:32,080 --> 00:09:38,399
is in here natural tasks main.tml

00:09:36,240 --> 00:09:40,720
so ansible knows that you need to use

00:09:38,399 --> 00:09:43,760
this ansible module

00:09:40,720 --> 00:09:47,200
the google cloud gcp compute

00:09:43,760 --> 00:09:51,839
network to create

00:09:47,200 --> 00:09:55,360
the network so it will use

00:09:51,839 --> 00:09:58,800
the name network dash

00:09:55,360 --> 00:10:02,000
cluster name you can see here this

00:09:58,800 --> 00:10:06,000
is a jinja 2 type of variable

00:10:02,000 --> 00:10:09,680
and i replace this value cluster name

00:10:06,000 --> 00:10:11,600
with the name of the cluster name that i

00:10:09,680 --> 00:10:12,399
specified previously in the inventory

00:10:11,600 --> 00:10:15,680
file

00:10:12,399 --> 00:10:19,120
remember i put kcd africa so

00:10:15,680 --> 00:10:20,000
uh ansible will ask gcp to create a

00:10:19,120 --> 00:10:24,640
network

00:10:20,000 --> 00:10:27,200
called network dash kcd dash africa

00:10:24,640 --> 00:10:28,160
it will create all the sub networks

00:10:27,200 --> 00:10:30,480
automatically

00:10:28,160 --> 00:10:31,680
because i set this to true in the

00:10:30,480 --> 00:10:34,160
project id

00:10:31,680 --> 00:10:35,760
project again ginger true type it's

00:10:34,160 --> 00:10:39,279
going to replace

00:10:35,760 --> 00:10:41,040
uh with the project id that i specify

00:10:39,279 --> 00:10:42,640
in the inventory file with the

00:10:41,040 --> 00:10:47,040
credential file

00:10:42,640 --> 00:10:50,800
again that i use in the

00:10:47,040 --> 00:10:54,959
inventory file okay the state

00:10:50,800 --> 00:10:57,600
the state for this task is to be present

00:10:54,959 --> 00:10:59,200
which means that i'm telling ansible

00:10:57,600 --> 00:11:03,040
that

00:10:59,200 --> 00:11:06,399
whenever it runs it needs to ensure

00:11:03,040 --> 00:11:10,959
that the network exists okay

00:11:06,399 --> 00:11:13,200
so for now i already run the first time

00:11:10,959 --> 00:11:14,560
it changes which means that it already

00:11:13,200 --> 00:11:19,600
created

00:11:14,560 --> 00:11:22,640
we can see here in the gcp

00:11:19,600 --> 00:11:25,920
console see

00:11:22,640 --> 00:11:29,360
already created with all

00:11:25,920 --> 00:11:30,959
the subnetworks so that's why it's

00:11:29,360 --> 00:11:32,959
changed

00:11:30,959 --> 00:11:34,560
okay because previous it doesn't exist

00:11:32,959 --> 00:11:36,020
and now it exists

00:11:34,560 --> 00:11:38,000
if for whatever reason

00:11:36,020 --> 00:11:42,000
[Music]

00:11:38,000 --> 00:11:45,120
this network is removed

00:11:42,000 --> 00:11:49,519
it's deleted and we run this

00:11:45,120 --> 00:11:53,440
uh ansible again it will recreate

00:11:49,519 --> 00:11:57,120
okay and if we run danceable again

00:11:53,440 --> 00:11:59,279
and then symbol see

00:11:57,120 --> 00:12:01,040
that the network already exists it

00:11:59,279 --> 00:12:02,000
doesn't do anything it doesn't recreate

00:12:01,040 --> 00:12:04,720
or delete or

00:12:02,000 --> 00:12:06,000
do anything you just say okay the the

00:12:04,720 --> 00:12:09,279
state is present

00:12:06,000 --> 00:12:13,279
so i i'm okay with that

00:12:09,279 --> 00:12:17,600
uh in this using this keyword register

00:12:13,279 --> 00:12:21,279
i am registering all the outcomes

00:12:17,600 --> 00:12:24,399
of the this module remember

00:12:21,279 --> 00:12:25,839
when i show you guys

00:12:24,399 --> 00:12:27,680
the return values here in the

00:12:25,839 --> 00:12:30,480
documentation so

00:12:27,680 --> 00:12:31,120
all these values how to create sub

00:12:30,480 --> 00:12:34,240
network

00:12:31,120 --> 00:12:38,000
description name all of this

00:12:34,240 --> 00:12:43,680
is registered in this variable

00:12:38,000 --> 00:12:47,040
okay and this is important because

00:12:43,680 --> 00:12:50,839
when i am creating

00:12:47,040 --> 00:12:53,600
the kubernetes cluster i use this

00:12:50,839 --> 00:12:56,399
okay now as we can see here in the

00:12:53,600 --> 00:12:59,519
playbook it is running the task

00:12:56,399 --> 00:13:03,279
of the row kubernetes and the task

00:12:59,519 --> 00:13:06,560
kubernetes clay kubernetes cluster

00:13:03,279 --> 00:13:09,839
which is this first one which use these

00:13:06,560 --> 00:13:13,519
container this module the google cloud

00:13:09,839 --> 00:13:13,519
gcp container cluster

00:13:14,000 --> 00:13:20,480
again the same in the documentation

00:13:17,440 --> 00:13:23,360
it creates the cluster

00:13:20,480 --> 00:13:24,320
the very first part of the the cluster

00:13:23,360 --> 00:13:26,880
there are

00:13:24,320 --> 00:13:28,240
several all the parameters that we can

00:13:26,880 --> 00:13:30,560
specify through the console we can

00:13:28,240 --> 00:13:35,839
specify here

00:13:30,560 --> 00:13:35,839
okay as you can see a lot of things

00:13:35,920 --> 00:13:40,480
uh so what i did here i used the name

00:13:38,780 --> 00:13:42,399
[Music]

00:13:40,480 --> 00:13:45,120
which is the same name that i specify in

00:13:42,399 --> 00:13:47,680
the adventure file the kcd africa

00:13:45,120 --> 00:13:48,959
uh the number of nodes that i want this

00:13:47,680 --> 00:13:52,480
tree

00:13:48,959 --> 00:13:55,920
the location is the zone europe was

00:13:52,480 --> 00:13:58,480
2 in my case here is the

00:13:55,920 --> 00:13:59,360
important part is the different part

00:13:58,480 --> 00:14:02,160
network

00:13:59,360 --> 00:14:03,519
which network i'm going to create the

00:14:02,160 --> 00:14:04,800
kubernetes cluster

00:14:03,519 --> 00:14:06,720
i don't want to create in the default

00:14:04,800 --> 00:14:09,600
one i want to create the one that

00:14:06,720 --> 00:14:11,279
i created before so that's why i

00:14:09,600 --> 00:14:14,959
register here

00:14:11,279 --> 00:14:18,959
i use the variable network with the

00:14:14,959 --> 00:14:23,440
return value name to create

00:14:18,959 --> 00:14:26,800
this kubernetes cluster so i associating

00:14:23,440 --> 00:14:28,639
my kubernetes cluster with my network

00:14:26,800 --> 00:14:30,560
if i don't specify anything it will

00:14:28,639 --> 00:14:35,360
create in the default network

00:14:30,560 --> 00:14:38,720
but i don't want that uh my project id

00:14:35,360 --> 00:14:40,800
is coming from the inventory file

00:14:38,720 --> 00:14:42,160
i'm authenticating using the service

00:14:40,800 --> 00:14:45,279
account again

00:14:42,160 --> 00:14:46,880
that i specify in the eventual file the

00:14:45,279 --> 00:14:51,600
state is present

00:14:46,880 --> 00:14:55,199
so if forever if for any reason

00:14:51,600 --> 00:14:57,360
this cluster is deleted when i rerun

00:14:55,199 --> 00:15:01,040
this sensible it will create

00:14:57,360 --> 00:15:04,079
or if i run in a project id

00:15:01,040 --> 00:15:06,000
that doesn't or in a zone or a network

00:15:04,079 --> 00:15:06,880
that doesn't have this cluster it will

00:15:06,000 --> 00:15:10,160
create

00:15:06,880 --> 00:15:11,600
okay to remove we just need to create

00:15:10,160 --> 00:15:15,040
another

00:15:11,600 --> 00:15:18,079
row with another playbook

00:15:15,040 --> 00:15:20,720
and change this to absent

00:15:18,079 --> 00:15:22,800
so if it exists it will change the

00:15:20,720 --> 00:15:26,240
status

00:15:22,800 --> 00:15:27,440
the state from present to absent it will

00:15:26,240 --> 00:15:31,519
remove

00:15:27,440 --> 00:15:32,800
okay so this is the first part let's

00:15:31,519 --> 00:15:36,399
jump to the console

00:15:32,800 --> 00:15:39,519
and see what's what is happening in our

00:15:36,399 --> 00:15:42,560
kubernetes cluster console okay

00:15:39,519 --> 00:15:46,399
you see that we have a

00:15:42,560 --> 00:15:50,000
cluster we name it kcd africa

00:15:46,399 --> 00:15:50,000
uh in europe west 2c

00:15:51,680 --> 00:15:55,839
with all the information here

00:15:56,720 --> 00:16:04,720
for the network you see is creating in

00:16:01,519 --> 00:16:08,240
the network that we specified previously

00:16:04,720 --> 00:16:12,720
that's great

00:16:08,240 --> 00:16:15,600
now the second part is

00:16:12,720 --> 00:16:16,560
the notebook so this this module only

00:16:15,600 --> 00:16:18,480
creates

00:16:16,560 --> 00:16:19,600
uh the cluster but doesn't have any

00:16:18,480 --> 00:16:23,440
nodes

00:16:19,600 --> 00:16:26,639
that's why we need the second module

00:16:23,440 --> 00:16:29,199
the google cloud gcp container

00:16:26,639 --> 00:16:29,199
node pool

00:16:29,759 --> 00:16:34,399
again i'm specifying a name let's just

00:16:32,800 --> 00:16:37,680
jump for the documentation just

00:16:34,399 --> 00:16:41,519
for you guys to see again uh

00:16:37,680 --> 00:16:44,959
in the same way there are several

00:16:41,519 --> 00:16:47,440
parameters you can specify i just choose

00:16:44,959 --> 00:16:49,040
a couple ones for this presentation for

00:16:47,440 --> 00:16:51,839
simplicity

00:16:49,040 --> 00:16:52,800
so the name is node pool and the cluster

00:16:51,839 --> 00:16:55,120
name

00:16:52,800 --> 00:16:56,480
the initial node count is the same that

00:16:55,120 --> 00:17:00,399
is specified

00:16:56,480 --> 00:17:03,440
before and the cluster which cluster

00:17:00,399 --> 00:17:06,720
i am going to associate

00:17:03,440 --> 00:17:10,000
my notebook i'm going to associate

00:17:06,720 --> 00:17:13,679
with the cluster

00:17:10,000 --> 00:17:18,480
that i create in the step before

00:17:13,679 --> 00:17:19,120
the kubernetes cluster okay and i will

00:17:18,480 --> 00:17:22,240
create

00:17:19,120 --> 00:17:26,559
with uh the disk size of

00:17:22,240 --> 00:17:29,760
100 gigabytes ssd the machine

00:17:26,559 --> 00:17:33,360
and 102 and again

00:17:29,760 --> 00:17:36,400
present so i i want this to

00:17:33,360 --> 00:17:39,039
be present okay

00:17:36,400 --> 00:17:40,240
so we can see uh here in the terminal

00:17:39,039 --> 00:17:43,679
that

00:17:40,240 --> 00:17:45,039
it already run so it already created the

00:17:43,679 --> 00:17:47,440
kubernetes cluster

00:17:45,039 --> 00:17:48,320
it already creates the kubernetes node

00:17:47,440 --> 00:17:53,120
pull

00:17:48,320 --> 00:17:53,120
so two here okay three are changed

00:17:54,000 --> 00:18:01,440
so if we go to the

00:17:57,760 --> 00:18:07,200
kubernetes the engine we can see

00:18:01,440 --> 00:18:07,200
the node is here it's created

00:18:07,440 --> 00:18:15,919
it has all the three nodes

00:18:12,640 --> 00:18:19,919
for those who don't know these nodes

00:18:15,919 --> 00:18:24,160
are nothing else than three

00:18:19,919 --> 00:18:26,640
compute engines instance

00:18:24,160 --> 00:18:27,440
that gcp creates automatically for us we

00:18:26,640 --> 00:18:30,320
don't need to

00:18:27,440 --> 00:18:30,320
to worry about that

00:18:33,039 --> 00:18:43,840
see those are the three

00:18:36,400 --> 00:18:43,840
nodes of my kubernetes cluster

00:18:45,200 --> 00:18:49,840
now just to show you

00:18:46,990 --> 00:18:53,039
[Music]

00:18:49,840 --> 00:18:57,840
what happens if i run

00:18:53,039 --> 00:18:57,840
this ansible playbook again

00:18:58,320 --> 00:19:01,760
now all the resources that we want

00:19:00,000 --> 00:19:04,880
already exists

00:19:01,760 --> 00:19:08,000
so i don't want

00:19:04,880 --> 00:19:11,360
ansible to do anything

00:19:08,000 --> 00:19:15,360
you see so when we rerun

00:19:11,360 --> 00:19:18,400
this with uh this information

00:19:15,360 --> 00:19:20,000
and ansible checks that everything

00:19:18,400 --> 00:19:23,120
already exists in gcp

00:19:20,000 --> 00:19:26,320
you just say okay okay okay

00:19:23,120 --> 00:19:29,679
so everything's okay because all these

00:19:26,320 --> 00:19:32,559
states are true

00:19:29,679 --> 00:19:33,600
so i have a cluster i have the node poll

00:19:32,559 --> 00:19:37,360
i have the network

00:19:33,600 --> 00:19:38,160
so everything's okay uh ansible doesn't

00:19:37,360 --> 00:19:41,600
need to do

00:19:38,160 --> 00:19:46,000
any change in the environment

00:19:41,600 --> 00:19:46,000
okay and now

00:19:47,280 --> 00:19:55,280
just to show how do we connect

00:19:50,880 --> 00:19:58,880
i just increase a little bit my screen

00:19:55,280 --> 00:20:02,880
and how do we

00:19:58,880 --> 00:20:02,880
if you go here in the cluster

00:20:04,080 --> 00:20:10,480
i just connect i will

00:20:07,440 --> 00:20:15,039
copy the gcloud command

00:20:10,480 --> 00:20:15,039
to connect with my cluster

00:20:16,559 --> 00:20:23,760
i copy here paste

00:20:20,720 --> 00:20:29,200
okay my good config was configured

00:20:23,760 --> 00:20:34,559
and now i can just oops group cto

00:20:29,200 --> 00:20:37,919
get notes

00:20:34,559 --> 00:20:40,880
and here they are uh the same three

00:20:37,919 --> 00:20:45,200
notes that we saw in the console before

00:20:40,880 --> 00:20:49,760
um if i do ctl get namespaces

00:20:45,200 --> 00:20:53,280
i can see all the default uh namespaces

00:20:49,760 --> 00:20:53,280
get parts and exam

00:20:53,760 --> 00:20:56,880
uh group system do we have anything that

00:20:55,840 --> 00:21:01,440
could assist in rainy

00:20:56,880 --> 00:21:04,640
oh we have great let's go that's good

00:21:01,440 --> 00:21:08,159
from this point on you can manage

00:21:04,640 --> 00:21:12,400
the kubernetes cluster

00:21:08,159 --> 00:21:16,000
with kubctl no problems at all

00:21:12,400 --> 00:21:19,200
okay so that's

00:21:16,000 --> 00:21:21,919
what i wanted to show uh to you

00:21:19,200 --> 00:21:22,799
today uh this presentation was just to

00:21:21,919 --> 00:21:26,240
demonstrate

00:21:22,799 --> 00:21:29,360
uh the use of infrastructure as code

00:21:26,240 --> 00:21:32,799
to install setup and configure

00:21:29,360 --> 00:21:34,320
a simple kubernetes cluster on google

00:21:32,799 --> 00:21:37,600
cloud platform

00:21:34,320 --> 00:21:40,799
and also to show some essential concepts

00:21:37,600 --> 00:21:43,440
uh from ansible like rows and playbooks

00:21:40,799 --> 00:21:46,240
and how to configure and structure them

00:21:43,440 --> 00:21:48,640
to provision resources in the cloud

00:21:46,240 --> 00:21:51,039
much much more is possible with ansible

00:21:48,640 --> 00:21:54,159
gcp kubernetes obviously

00:21:51,039 --> 00:21:56,840
this is just a starting point to

00:21:54,159 --> 00:21:58,159
you be able to organize your kubernetes

00:21:56,840 --> 00:22:00,480
configuration

00:21:58,159 --> 00:22:01,600
such as namespace deployments and

00:22:00,480 --> 00:22:04,640
policies

00:22:01,600 --> 00:22:06,400
as code okay so

00:22:04,640 --> 00:22:08,559
thank you very much for being with me

00:22:06,400 --> 00:22:13,840
today and continue to join

00:22:08,559 --> 00:22:13,840

YouTube URL: https://www.youtube.com/watch?v=3EaFfOguOW0


