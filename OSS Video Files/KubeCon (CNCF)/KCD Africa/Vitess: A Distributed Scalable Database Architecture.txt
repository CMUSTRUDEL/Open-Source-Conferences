Title: Vitess: A Distributed Scalable Database Architecture
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	Vitess is a database clustering system for horizontal scaling of MySQL through sharding. By enabling shard-routing logic, Vitess allows application code and database queries to remain agnostic to data distribution onto multiple shards. With Vitess, you can split, merge, and migrate shards as your needs grow. With its compatibility with development frameworks and integration to open-source tools, Vitess has been a core component of several high-traffic OLTP sites worldwide and serves data across different platforms.

Alkin Tezuysal has extensive experience in enterprise relational databases, working in various sectors for large corporations. With more than 20 years of industry experience, he has acquired skills for managing large projects from the ground up to production. For the past decade, he's been focused on e-commerce, SaaS, and MySQL technologies. Alkin has managed and architected database topologies for high-volume sites at eBay Intl. He has several years of experience in 24X7 support and operational tasks and improving database systems for major companies. He has led global operations teams on Tier 1/2/3 support for MySQL customers.
In late 2020, he joined PlanetScale's expert engineering team over Vitess.
Captions: 
	00:00:00,240 --> 00:00:07,200
so thank you um for inviting me over

00:00:04,560 --> 00:00:08,000
and um for this and so far i've been

00:00:07,200 --> 00:00:11,360
listening the

00:00:08,000 --> 00:00:13,200
the the other um speakers and

00:00:11,360 --> 00:00:15,599
content is amazing because i've learned

00:00:13,200 --> 00:00:16,880
a lot and i hope you enjoy

00:00:15,599 --> 00:00:18,720
learning a little bit about the test

00:00:16,880 --> 00:00:21,760
today also and

00:00:18,720 --> 00:00:23,680
um let's get started so

00:00:21,760 --> 00:00:25,760
first of all let's connect and my name

00:00:23,680 --> 00:00:29,039
is alken i am joining from

00:00:25,760 --> 00:00:31,039
istanbul turkey and i'm a

00:00:29,039 --> 00:00:32,079
senior technical manager developer

00:00:31,039 --> 00:00:34,960
advocate and

00:00:32,079 --> 00:00:36,399
i wear some other hats as as with this

00:00:34,960 --> 00:00:40,000
maintainer

00:00:36,399 --> 00:00:41,680
and i have been evangelists for the open

00:00:40,000 --> 00:00:44,719
source database projects

00:00:41,680 --> 00:00:47,600
before or worked at parakona

00:00:44,719 --> 00:00:48,719
and i also have a very uh long list of

00:00:47,600 --> 00:00:51,280
enterprise background

00:00:48,719 --> 00:00:53,039
uh working in very large corporations

00:00:51,280 --> 00:00:55,840
like bank of america atnt

00:00:53,039 --> 00:00:59,039
and so on so forth and uh and i'm also

00:00:55,840 --> 00:01:03,440
one of the mysql smes

00:00:59,039 --> 00:01:05,760
and i am also an avid sailor

00:01:03,440 --> 00:01:06,640
and if you want to talk if anybody wants

00:01:05,760 --> 00:01:09,600
to talk about

00:01:06,640 --> 00:01:11,439
sailing please do find me and hope to

00:01:09,600 --> 00:01:12,159
sail one day to africa also that would

00:01:11,439 --> 00:01:15,680
be amazing

00:01:12,159 --> 00:01:17,040
trip so i'm on on linkedin and twitter

00:01:15,680 --> 00:01:20,320
for my business accounts

00:01:17,040 --> 00:01:23,439
and if you want to connect ask questions

00:01:20,320 --> 00:01:26,159
before or after during later

00:01:23,439 --> 00:01:27,520
and any ideas later on and you can

00:01:26,159 --> 00:01:30,640
connect and ask questions

00:01:27,520 --> 00:01:32,799
uh or or interact with me a little bit

00:01:30,640 --> 00:01:36,079
about my employer it was founded by

00:01:32,799 --> 00:01:38,000
um the co-creators of vitesse so

00:01:36,079 --> 00:01:40,159
our subject is vitesse the project is

00:01:38,000 --> 00:01:43,280
vitesse and the planet scale was was

00:01:40,159 --> 00:01:45,920
uh founded by co-creators uh of vitesse

00:01:43,280 --> 00:01:48,880
at youtube and uh youtube became google

00:01:45,920 --> 00:01:49,600
and and um and and we became a planet

00:01:48,880 --> 00:01:51,759
scale

00:01:49,600 --> 00:01:53,280
so we're a little over 50 employees

00:01:51,759 --> 00:01:56,399
maybe a little over that

00:01:53,280 --> 00:01:57,520
and located in in california in the

00:01:56,399 --> 00:01:59,840
united states

00:01:57,520 --> 00:02:01,280
but with the pandemic we are 100 percent

00:01:59,840 --> 00:02:02,320
remote team as you can see i'm from

00:02:01,280 --> 00:02:05,439
istanbul

00:02:02,320 --> 00:02:06,799
and we provide services on cloud

00:02:05,439 --> 00:02:10,239
database

00:02:06,799 --> 00:02:12,480
cloud database offering so um

00:02:10,239 --> 00:02:14,000
today's agenda will be i wanna uh

00:02:12,480 --> 00:02:16,959
introduce vitel okay

00:02:14,000 --> 00:02:18,640
um so um we were gonna talk about

00:02:16,959 --> 00:02:19,440
witness architecture basics and then

00:02:18,640 --> 00:02:22,480
we're gonna put

00:02:19,440 --> 00:02:26,160
uh together the puzzle together okay

00:02:22,480 --> 00:02:29,520
and basically we test

00:02:26,160 --> 00:02:30,879
wants to um enable transparent database

00:02:29,520 --> 00:02:32,239
and for infrastructure for the

00:02:30,879 --> 00:02:35,519
applications that you're actually

00:02:32,239 --> 00:02:37,840
going to point and it has its own

00:02:35,519 --> 00:02:39,200
terminology which is slightly different

00:02:37,840 --> 00:02:42,239
because it's a different

00:02:39,200 --> 00:02:44,239
uh um than the database

00:02:42,239 --> 00:02:46,400
in the back end it's a it's a framework

00:02:44,239 --> 00:02:49,680
that sits on top of a database

00:02:46,400 --> 00:02:52,239
in this case mysql so we call it a

00:02:49,680 --> 00:02:54,800
database logical database is a key space

00:02:52,239 --> 00:02:55,599
and then and then the reason for that is

00:02:54,800 --> 00:02:57,519
we're not going to go

00:02:55,599 --> 00:02:58,959
in too much detail but because this is a

00:02:57,519 --> 00:03:01,840
sharded implementation

00:02:58,959 --> 00:03:02,720
or designed for sharding of the database

00:03:01,840 --> 00:03:05,440
it actually

00:03:02,720 --> 00:03:06,800
um has a key space concept with the key

00:03:05,440 --> 00:03:10,239
space id there's a

00:03:06,800 --> 00:03:12,959
primary windex and and of index uh

00:03:10,239 --> 00:03:13,519
settings into that so there's a vt gate

00:03:12,959 --> 00:03:15,840
and

00:03:13,519 --> 00:03:17,440
that's a proxy server vt tablet and then

00:03:15,840 --> 00:03:19,360
we have a topology manager

00:03:17,440 --> 00:03:21,599
so we're going to look into these a

00:03:19,360 --> 00:03:23,360
little bit so you have

00:03:21,599 --> 00:03:25,360
consider a common replication cluster

00:03:23,360 --> 00:03:28,720
you have a replicated cluster

00:03:25,360 --> 00:03:31,680
usually it's actually

00:03:28,720 --> 00:03:33,040
one primary and then multiple replicas

00:03:31,680 --> 00:03:37,120
uh behind it

00:03:33,040 --> 00:03:40,480
so vt tablet sits in into these

00:03:37,120 --> 00:03:42,560
the to to this very a common

00:03:40,480 --> 00:03:43,680
scenario of mysql implementation with a

00:03:42,560 --> 00:03:46,239
primary and

00:03:43,680 --> 00:03:48,080
and replicas around it so vt tablet is

00:03:46,239 --> 00:03:51,440
like a daemon a sidecar

00:03:48,080 --> 00:03:53,920
and it controls the mysqld mysql server

00:03:51,440 --> 00:03:54,879
it interacts with the mysql server and

00:03:53,920 --> 00:03:58,159
usually we

00:03:54,879 --> 00:04:01,760
place them on the same server where the

00:03:58,159 --> 00:04:04,879
mysql sits um

00:04:01,760 --> 00:04:06,640
but in in large scale

00:04:04,879 --> 00:04:08,400
database implementations you will have

00:04:06,640 --> 00:04:10,720
multiple clusters

00:04:08,400 --> 00:04:12,720
and then to be able to drive these

00:04:10,720 --> 00:04:14,000
multiple clusters you will actually have

00:04:12,720 --> 00:04:16,160
some sort of a proxy server

00:04:14,000 --> 00:04:18,560
so we test comes with a built-in proxy

00:04:16,160 --> 00:04:21,199
server that is called vtgate

00:04:18,560 --> 00:04:22,639
and it's a stateless proxy it says it is

00:04:21,199 --> 00:04:25,120
stateless but it's smart

00:04:22,639 --> 00:04:26,400
it speaks to mysql protocol also it does

00:04:25,120 --> 00:04:29,600
connection pooling

00:04:26,400 --> 00:04:30,960
caching and some other stuff and and it

00:04:29,600 --> 00:04:33,199
it it acts like a

00:04:30,960 --> 00:04:34,080
monolith mysql database in the backend

00:04:33,199 --> 00:04:36,800
basically

00:04:34,080 --> 00:04:37,759
you connect to the vt gate you connect

00:04:36,800 --> 00:04:40,639
like a

00:04:37,759 --> 00:04:42,000
connected like to a a database

00:04:40,639 --> 00:04:44,800
standalone database in the back

00:04:42,000 --> 00:04:46,000
end but in reality you will have n

00:04:44,800 --> 00:04:48,880
number of custom

00:04:46,000 --> 00:04:50,800
clusters and n number of servers that

00:04:48,880 --> 00:04:52,080
are acting as primary and replicas

00:04:50,800 --> 00:04:55,440
behind the scenes

00:04:52,080 --> 00:04:58,320
so it relays the queries to et tablets

00:04:55,440 --> 00:05:00,240
so in very very large implementation

00:04:58,320 --> 00:05:01,600
then you will have multiple vtas

00:05:00,240 --> 00:05:03,919
pointing to the multiple

00:05:01,600 --> 00:05:04,639
clusters behind the scenes and this is

00:05:03,919 --> 00:05:08,479
how

00:05:04,639 --> 00:05:11,600
the very large shops like get up or

00:05:08,479 --> 00:05:14,240
uh we'll get to that so

00:05:11,600 --> 00:05:15,840
we to get to the vt gate you also have

00:05:14,240 --> 00:05:16,639
the application that's pointing to the

00:05:15,840 --> 00:05:20,080
vt gate

00:05:16,639 --> 00:05:22,479
and and it needs to know where the data

00:05:20,080 --> 00:05:24,560
sits so the idea behind this is as you

00:05:22,479 --> 00:05:25,199
can see in this example we have a

00:05:24,560 --> 00:05:27,840
commerce

00:05:25,199 --> 00:05:30,400
database which is charted it's probably

00:05:27,840 --> 00:05:32,240
shorted by a customer id or a product id

00:05:30,400 --> 00:05:33,440
uh it depends on the scenario we'll talk

00:05:32,240 --> 00:05:35,680
about that a little bit

00:05:33,440 --> 00:05:36,960
but then you can also have an internal

00:05:35,680 --> 00:05:40,160
uncharted database

00:05:36,960 --> 00:05:43,759
so the application pointing to the

00:05:40,160 --> 00:05:46,639
to the vt gate knows where the shard

00:05:43,759 --> 00:05:47,199
is so this is the v-test so this this is

00:05:46,639 --> 00:05:49,520
what

00:05:47,199 --> 00:05:50,639
we can achieve with the test uh

00:05:49,520 --> 00:05:53,680
architecture

00:05:50,639 --> 00:05:54,560
given the uh you know the simple example

00:05:53,680 --> 00:05:57,280
of

00:05:54,560 --> 00:05:58,400
select order id price from orders and

00:05:57,280 --> 00:06:01,120
equals to four

00:05:58,400 --> 00:06:02,000
it knows where that chart is so usually

00:06:01,120 --> 00:06:04,560
um

00:06:02,000 --> 00:06:05,840
sharding is a very complex terminology

00:06:04,560 --> 00:06:09,120
in the databases but

00:06:05,840 --> 00:06:09,520
usually you start by uh the key id which

00:06:09,120 --> 00:06:11,120
is

00:06:09,520 --> 00:06:12,720
in this case customer id and then you

00:06:11,120 --> 00:06:13,680
split up depending on your how big is

00:06:12,720 --> 00:06:16,720
your cluster

00:06:13,680 --> 00:06:17,440
and then you have smaller set of

00:06:16,720 --> 00:06:19,759
clusters

00:06:17,440 --> 00:06:21,600
behind the cs instead of having the

00:06:19,759 --> 00:06:23,919
largest host

00:06:21,600 --> 00:06:25,039
or largest instances of the

00:06:23,919 --> 00:06:27,039
implementation

00:06:25,039 --> 00:06:28,479
that's going to serve your database

00:06:27,039 --> 00:06:31,120
traffic

00:06:28,479 --> 00:06:32,639
so also there is another component

00:06:31,120 --> 00:06:34,560
called we call it a topo but it's a

00:06:32,639 --> 00:06:35,600
topology server it's a distributed key

00:06:34,560 --> 00:06:38,160
value store

00:06:35,600 --> 00:06:39,199
and usually it's implementations that we

00:06:38,160 --> 00:06:42,080
we have

00:06:39,199 --> 00:06:44,240
is a cd console or zookeeper so these

00:06:42,080 --> 00:06:46,960
are also other open source utilities

00:06:44,240 --> 00:06:48,400
that you can integrate into we test with

00:06:46,960 --> 00:06:51,520
the topology manager

00:06:48,400 --> 00:06:54,319
and then topology is required for

00:06:51,520 --> 00:06:55,280
uh keeping this uh information about

00:06:54,319 --> 00:06:59,280
okay where this

00:06:55,280 --> 00:07:02,160
the shard is where is this where is this

00:06:59,280 --> 00:07:02,800
schema sits and then and then vtgas

00:07:02,160 --> 00:07:04,400
knows

00:07:02,800 --> 00:07:06,240
that information it exchanges that

00:07:04,400 --> 00:07:07,199
information with the with the topology

00:07:06,240 --> 00:07:09,840
server

00:07:07,199 --> 00:07:10,800
and then it actually makes it uh makes

00:07:09,840 --> 00:07:14,240
it serving

00:07:10,800 --> 00:07:17,680
so um the key value store

00:07:14,240 --> 00:07:19,440
is another data store of course um

00:07:17,680 --> 00:07:21,360
why are we keeping that because these

00:07:19,440 --> 00:07:23,680
are known and and proven

00:07:21,360 --> 00:07:24,880
proven technologies to keep this type of

00:07:23,680 --> 00:07:28,160
information

00:07:24,880 --> 00:07:30,400
they keep this type of data data so

00:07:28,160 --> 00:07:31,599
they are redundantly served within the

00:07:30,400 --> 00:07:33,599
same

00:07:31,599 --> 00:07:35,120
data center or or other data centers

00:07:33,599 --> 00:07:38,080
that is distributed

00:07:35,120 --> 00:07:40,960
so so there is another component in the

00:07:38,080 --> 00:07:43,840
test architecture is it called vtc tld

00:07:40,960 --> 00:07:44,960
which actually controls the topology in

00:07:43,840 --> 00:07:47,360
overall

00:07:44,960 --> 00:07:48,639
so so you have multiple components the

00:07:47,360 --> 00:07:51,840
controlling the i er

00:07:48,639 --> 00:07:54,080
the the architecture but um

00:07:51,840 --> 00:07:56,400
but basically it allows this this

00:07:54,080 --> 00:07:59,199
operation operation of the tablets

00:07:56,400 --> 00:08:00,960
and the topology server uh keeping a

00:07:59,199 --> 00:08:03,280
consistent state of things

00:08:00,960 --> 00:08:05,599
how things are so it sounds a little bit

00:08:03,280 --> 00:08:09,360
complex but it's pretty straightforward

00:08:05,599 --> 00:08:12,080
when we come to that so it's it's uh

00:08:09,360 --> 00:08:14,080
we test knows what's happening with your

00:08:12,080 --> 00:08:16,400
schemas shards and clusters

00:08:14,080 --> 00:08:17,520
including the server roles uh when we

00:08:16,400 --> 00:08:19,919
say a server role

00:08:17,520 --> 00:08:20,560
i mentioned about like the having the

00:08:19,919 --> 00:08:23,840
primary

00:08:20,560 --> 00:08:26,000
and and the replicas so so some of the

00:08:23,840 --> 00:08:27,199
replicas are read read-only some of

00:08:26,000 --> 00:08:29,520
these replicas are

00:08:27,199 --> 00:08:30,720
are are for serving for other purposes

00:08:29,520 --> 00:08:34,719
then you can actually

00:08:30,720 --> 00:08:36,719
set those um readable or writeable

00:08:34,719 --> 00:08:38,399
flags and then and then we test we'll

00:08:36,719 --> 00:08:41,519
know what to do about those

00:08:38,399 --> 00:08:43,680
so if you look at it uh in in summary

00:08:41,519 --> 00:08:44,959
um we test control plane includes a

00:08:43,680 --> 00:08:46,959
proxy server

00:08:44,959 --> 00:08:48,000
a backup and recovery recovery

00:08:46,959 --> 00:08:50,320
operations

00:08:48,000 --> 00:08:51,279
it does an integrated failover it can

00:08:50,320 --> 00:08:53,120
use the

00:08:51,279 --> 00:08:54,640
third party tool another open source

00:08:53,120 --> 00:08:57,600
tool like orchestrator

00:08:54,640 --> 00:08:58,959
um it it it does the the sharding of

00:08:57,600 --> 00:09:00,959
course that's the one of the

00:08:58,959 --> 00:09:02,480
strengths of it but it also comes with

00:09:00,959 --> 00:09:04,480
an advanced replication called the

00:09:02,480 --> 00:09:06,080
replication or vstream so what that

00:09:04,480 --> 00:09:08,800
means is you can

00:09:06,080 --> 00:09:10,240
migrate data within or outside of the

00:09:08,800 --> 00:09:12,560
vtest cluster

00:09:10,240 --> 00:09:15,120
using dv replication technologies this

00:09:12,560 --> 00:09:17,600
is like binary logging

00:09:15,120 --> 00:09:19,279
and streaming and then it's actually

00:09:17,600 --> 00:09:22,320
applying to correct nodes

00:09:19,279 --> 00:09:25,360
so why this is important for vts

00:09:22,320 --> 00:09:27,760
uh it is because of the the bullet point

00:09:25,360 --> 00:09:30,959
about it's a sharding schemes because

00:09:27,760 --> 00:09:32,160
normally if you shard it you're stuck

00:09:30,959 --> 00:09:34,880
with that sharding and then

00:09:32,160 --> 00:09:35,279
when you try start serving traffic off

00:09:34,880 --> 00:09:38,320
of that

00:09:35,279 --> 00:09:39,360
those sharding uh methodology you can't

00:09:38,320 --> 00:09:41,200
actually change that

00:09:39,360 --> 00:09:42,560
with vitas you can you can do the

00:09:41,200 --> 00:09:44,399
resharding

00:09:42,560 --> 00:09:46,399
let's say your key change your schema

00:09:44,399 --> 00:09:48,959
change your your application

00:09:46,399 --> 00:09:51,200
um has changed and you can actually

00:09:48,959 --> 00:09:53,279
reshard and then change

00:09:51,200 --> 00:09:54,720
and maybe you actually you know scale

00:09:53,279 --> 00:09:56,560
for 16 clusters

00:09:54,720 --> 00:09:57,920
and you want to do 32 clusters because

00:09:56,560 --> 00:10:00,080
your business is booming

00:09:57,920 --> 00:10:01,360
you can actually do this live with a

00:10:00,080 --> 00:10:04,240
very

00:10:01,360 --> 00:10:06,079
small like split second failover using

00:10:04,240 --> 00:10:08,640
the test so you serve the traffic

00:10:06,079 --> 00:10:10,160
you reshart while applying the changes

00:10:08,640 --> 00:10:12,720
to the new uh

00:10:10,160 --> 00:10:14,399
shard and then and then you say okay cut

00:10:12,720 --> 00:10:15,760
over it'll cut over with it with a

00:10:14,399 --> 00:10:17,680
minimal effect

00:10:15,760 --> 00:10:19,120
uh to the application application may or

00:10:17,680 --> 00:10:22,079
may not even notice that

00:10:19,120 --> 00:10:23,600
so it also you can also do an online ddl

00:10:22,079 --> 00:10:26,720
management this is very

00:10:23,600 --> 00:10:29,279
um a hot topic in the database world

00:10:26,720 --> 00:10:31,440
because when you do a locking operation

00:10:29,279 --> 00:10:32,959
then your replicas get behind and then

00:10:31,440 --> 00:10:34,959
you have other issues

00:10:32,959 --> 00:10:36,240
and and we're talking about very large

00:10:34,959 --> 00:10:39,360
implementations like

00:10:36,240 --> 00:10:42,160
youtube uh github and other places so

00:10:39,360 --> 00:10:44,079
these are even more uh problematic so

00:10:42,160 --> 00:10:44,480
vtes can actually help you overcome

00:10:44,079 --> 00:10:47,760
these

00:10:44,480 --> 00:10:49,839
obstacles and there's more so uh

00:10:47,760 --> 00:10:51,360
in a picture just just to remind

00:10:49,839 --> 00:10:53,200
everyone and

00:10:51,360 --> 00:10:54,800
hopefully we're doing very good in on

00:10:53,200 --> 00:10:56,800
time to um

00:10:54,800 --> 00:10:58,399
to show you so we have an application

00:10:56,800 --> 00:11:00,800
server that's pointing to a load

00:10:58,399 --> 00:11:03,360
balancer and then load pencil points to

00:11:00,800 --> 00:11:05,279
to vt gate and that's actually serving

00:11:03,360 --> 00:11:07,600
sharded or uncharted clusters

00:11:05,279 --> 00:11:09,920
in the meantime with this actually owns

00:11:07,600 --> 00:11:12,560
the topology server the topo server

00:11:09,920 --> 00:11:14,720
and then vtc tld component to the to do

00:11:12,560 --> 00:11:16,640
the cluster management so this is a

00:11:14,720 --> 00:11:19,360
summary of the test architecture

00:11:16,640 --> 00:11:21,120
again this is completely open source all

00:11:19,360 --> 00:11:21,680
these components on the right hand side

00:11:21,120 --> 00:11:24,160
over here

00:11:21,680 --> 00:11:24,959
over here you can actually see the code

00:11:24,160 --> 00:11:28,480
in github

00:11:24,959 --> 00:11:29,440
and again this code is is owned by cncf

00:11:28,480 --> 00:11:31,920
basically

00:11:29,440 --> 00:11:33,440
and and then you can read what's

00:11:31,920 --> 00:11:35,040
actually what what what is actually

00:11:33,440 --> 00:11:38,160
behind the scenes so i'm

00:11:35,040 --> 00:11:41,360
stoked about that um supported back-end

00:11:38,160 --> 00:11:44,480
databases uh we do support mysql

00:11:41,360 --> 00:11:45,360
bts is very mysql centric implementation

00:11:44,480 --> 00:11:48,480
we can say that

00:11:45,360 --> 00:11:49,600
um clearly and and adopters are are very

00:11:48,480 --> 00:11:54,000
mysql

00:11:49,600 --> 00:11:56,720
um focused uh shops so mysql 5.7

00:11:54,000 --> 00:11:57,839
80 are supported maria db support until

00:11:56,720 --> 00:12:01,519
10.3

00:11:57,839 --> 00:12:03,120
and and and and and we don't have

00:12:01,519 --> 00:12:05,839
extensive experience or

00:12:03,120 --> 00:12:06,720
or user base in mariadb just as a side

00:12:05,839 --> 00:12:10,560
there are no

00:12:06,720 --> 00:12:13,040
implementations uh um pointing with us

00:12:10,560 --> 00:12:14,320
into postgres but uh it's not on the

00:12:13,040 --> 00:12:16,000
roadmap for this year

00:12:14,320 --> 00:12:18,079
maybe it will come depending on the

00:12:16,000 --> 00:12:21,360
contributions uh coming up from

00:12:18,079 --> 00:12:23,120
from that those communities um it may be

00:12:21,360 --> 00:12:26,480
a possibility but at this point

00:12:23,120 --> 00:12:27,680
that is not the case so we're going to

00:12:26,480 --> 00:12:31,040
talk about a little bit

00:12:27,680 --> 00:12:33,040
uh very briefly about the use cases so

00:12:31,040 --> 00:12:34,639
when i have a b test do i actually have

00:12:33,040 --> 00:12:36,399
this chart no you don't have to actually

00:12:34,639 --> 00:12:38,639
sharp you can still

00:12:36,399 --> 00:12:40,240
do uncharted implementation and if you

00:12:38,639 --> 00:12:41,360
think you you will you will get some

00:12:40,240 --> 00:12:43,360
sort of a

00:12:41,360 --> 00:12:44,560
scaling uh issues in the future that

00:12:43,360 --> 00:12:48,079
will prepare you for

00:12:44,560 --> 00:12:49,680
for scaling and um so management of

00:12:48,079 --> 00:12:52,639
mysql topology yes

00:12:49,680 --> 00:12:54,720
if you put it behind the vitesse we test

00:12:52,639 --> 00:12:55,920
does its own management with dvt tablets

00:12:54,720 --> 00:12:58,240
topology it knows

00:12:55,920 --> 00:12:58,959
where things are it gives you other

00:12:58,240 --> 00:13:02,079
tooling

00:12:58,959 --> 00:13:04,320
other command line tools to do

00:13:02,079 --> 00:13:05,839
let's say you want to do re-parenting

00:13:04,320 --> 00:13:07,760
normally you have to do like change

00:13:05,839 --> 00:13:10,959
master too and then typing commands

00:13:07,760 --> 00:13:11,519
find the coordinates of the master and

00:13:10,959 --> 00:13:13,600
then

00:13:11,519 --> 00:13:14,560
you know fail over to that and cut over

00:13:13,600 --> 00:13:16,480
the application

00:13:14,560 --> 00:13:18,079
this all all of that you can contain it

00:13:16,480 --> 00:13:20,000
with a simple command

00:13:18,079 --> 00:13:21,680
with a maybe simple shortcut within

00:13:20,000 --> 00:13:24,000
within the test world so

00:13:21,680 --> 00:13:25,600
so it because because we test knows

00:13:24,000 --> 00:13:27,519
which one is a primary which one is a

00:13:25,600 --> 00:13:29,040
replica and the primary is no good

00:13:27,519 --> 00:13:30,639
or you want to do a maintenance on it

00:13:29,040 --> 00:13:32,639
you want to you want to assign

00:13:30,639 --> 00:13:34,399
one of the one of the replicas as a

00:13:32,639 --> 00:13:36,720
primary on that cluster

00:13:34,399 --> 00:13:39,760
you can give one command uh just with

00:13:36,720 --> 00:13:42,399
their tablet id and it'll it'll be done

00:13:39,760 --> 00:13:44,079
so we test also is very open source

00:13:42,399 --> 00:13:46,240
friendly as an open source tool

00:13:44,079 --> 00:13:48,240
we mentioned about uh backup and

00:13:46,240 --> 00:13:49,440
recovery so extra backup is a is an

00:13:48,240 --> 00:13:51,680
online

00:13:49,440 --> 00:13:52,880
hot backup utility very known by the

00:13:51,680 --> 00:13:54,399
parkour toolkit

00:13:52,880 --> 00:13:56,480
it's part of the paracord toolkit and

00:13:54,399 --> 00:13:59,600
it's supported by by vitesse

00:13:56,480 --> 00:14:01,839
so large databases having to

00:13:59,600 --> 00:14:03,120
backup and restored and and and

00:14:01,839 --> 00:14:06,160
implemented it will be

00:14:03,120 --> 00:14:08,560
um a very you know wise thing to do

00:14:06,160 --> 00:14:10,560
a pt online schema change again is a

00:14:08,560 --> 00:14:12,240
parkour toolkit utility to do the online

00:14:10,560 --> 00:14:16,399
schema change changes

00:14:12,240 --> 00:14:17,120
and and github online schema transfers

00:14:16,399 --> 00:14:20,240
is a

00:14:17,120 --> 00:14:23,279
ghost utility by github these are all

00:14:20,240 --> 00:14:25,360
already built into uh vts

00:14:23,279 --> 00:14:26,880
so you actually can just set the ddr

00:14:25,360 --> 00:14:29,360
strategy and then run it

00:14:26,880 --> 00:14:30,720
it will it'll basically drive these open

00:14:29,360 --> 00:14:33,760
source utilities

00:14:30,720 --> 00:14:35,360
um along with the test operations so see

00:14:33,760 --> 00:14:37,440
the other one is an orchestrator

00:14:35,360 --> 00:14:38,720
that's an a high availability and a

00:14:37,440 --> 00:14:41,279
failover uh

00:14:38,720 --> 00:14:42,160
cluster management utility vtor we call

00:14:41,279 --> 00:14:44,399
it is a is

00:14:42,160 --> 00:14:46,639
still in progress it's experimental it

00:14:44,399 --> 00:14:47,839
works um i have a talk in parkour live

00:14:46,639 --> 00:14:51,519
in may 12 and

00:14:47,839 --> 00:14:51,920
and 13th if i'm not mistaken by the date

00:14:51,519 --> 00:14:54,959
and

00:14:51,920 --> 00:14:56,880
um and then um there's there's

00:14:54,959 --> 00:14:58,480
going to be some representation of that

00:14:56,880 --> 00:15:01,600
also

00:14:58,480 --> 00:15:04,959
so we talked about online schema

00:15:01,600 --> 00:15:08,000
change utilities but also um there is

00:15:04,959 --> 00:15:11,279
a way to do this in

00:15:08,000 --> 00:15:13,120
migration style within the vtest so we

00:15:11,279 --> 00:15:14,959
are very excited about this technology

00:15:13,120 --> 00:15:18,000
because this v replication

00:15:14,959 --> 00:15:18,399
can actually make schema changes while

00:15:18,000 --> 00:15:20,399
you're

00:15:18,399 --> 00:15:21,440
serving the data and then you can flip

00:15:20,399 --> 00:15:24,639
over to that

00:15:21,440 --> 00:15:26,320
schema when you're ready so um you

00:15:24,639 --> 00:15:28,480
there's a link over here i will share

00:15:26,320 --> 00:15:30,720
the slides so um

00:15:28,480 --> 00:15:31,920
do some reading about if you think you

00:15:30,720 --> 00:15:33,600
have a large cluster

00:15:31,920 --> 00:15:35,839
and then you will hit some scalability

00:15:33,600 --> 00:15:36,560
issues and how do i do online schema

00:15:35,839 --> 00:15:39,680
changes

00:15:36,560 --> 00:15:40,000
and we test maybe your option to uh help

00:15:39,680 --> 00:15:42,639
over

00:15:40,000 --> 00:15:43,279
there so the other thing is uh we v

00:15:42,639 --> 00:15:46,000
torque

00:15:43,279 --> 00:15:47,600
it's an experimental uh there's a

00:15:46,000 --> 00:15:49,759
development ongoing but

00:15:47,600 --> 00:15:51,519
but the orchestrator itself is an

00:15:49,759 --> 00:15:52,000
amazing tool if you haven't heard about

00:15:51,519 --> 00:15:55,519
it

00:15:52,000 --> 00:15:59,199
managing as a sre or a dba

00:15:55,519 --> 00:16:01,839
um it's a very uh de facto

00:15:59,199 --> 00:16:02,720
uh utility for for um topology

00:16:01,839 --> 00:16:05,199
management

00:16:02,720 --> 00:16:06,639
and a high availability solution so it

00:16:05,199 --> 00:16:08,959
has a smart

00:16:06,639 --> 00:16:09,680
settings and it can fail over if it

00:16:08,959 --> 00:16:13,120
detects

00:16:09,680 --> 00:16:16,399
uh lags or or other other

00:16:13,120 --> 00:16:18,639
flags and and it's it's useful so we are

00:16:16,399 --> 00:16:20,079
actually planning to integrate more into

00:16:18,639 --> 00:16:23,519
this uh

00:16:20,079 --> 00:16:25,680
to the bts so who uses it as we

00:16:23,519 --> 00:16:26,880
i mentioned i happen to mention github

00:16:25,680 --> 00:16:27,950
already but

00:16:26,880 --> 00:16:30,480
one of our um

00:16:27,950 --> 00:16:32,720
[Music]

00:16:30,480 --> 00:16:34,880
early adopter is is slack as you know

00:16:32,720 --> 00:16:35,440
slack is very popular and slack needed

00:16:34,880 --> 00:16:38,240
to scale

00:16:35,440 --> 00:16:40,959
during the pandemic they have grown uh

00:16:38,240 --> 00:16:42,600
extremely and and they are like uh

00:16:40,959 --> 00:16:45,360
at the time of this slide maybe it was

00:16:42,600 --> 00:16:46,880
99.9 percent or they migrated completely

00:16:45,360 --> 00:16:50,639
serving all traffic

00:16:46,880 --> 00:16:53,600
using the tests so um you think about

00:16:50,639 --> 00:16:54,639
um a slack slack implementation every

00:16:53,600 --> 00:16:56,639
customer id

00:16:54,639 --> 00:16:58,480
uh needs to be have its own space and

00:16:56,639 --> 00:17:01,519
then you're scaling

00:16:58,480 --> 00:17:03,759
uh you know that's that's a very good

00:17:01,519 --> 00:17:05,199
example there's a square it's a online

00:17:03,759 --> 00:17:08,319
transaction there's pinterest

00:17:05,199 --> 00:17:11,760
there's github hop spots there's more

00:17:08,319 --> 00:17:13,760
adapters in in in that

00:17:11,760 --> 00:17:15,679
some of uh some of them are very large

00:17:13,760 --> 00:17:18,400
shops and some of them are

00:17:15,679 --> 00:17:18,720
are going to be growing into expecting

00:17:18,400 --> 00:17:20,880
an

00:17:18,720 --> 00:17:21,760
exponential growth in the coming months

00:17:20,880 --> 00:17:26,720
or years

00:17:21,760 --> 00:17:30,080
so that is the case over here

00:17:26,720 --> 00:17:32,960
all right so we are

00:17:30,080 --> 00:17:34,000
doing good on time so i want to touch

00:17:32,960 --> 00:17:36,799
base on on

00:17:34,000 --> 00:17:38,480
data on kubernetes so every dba

00:17:36,799 --> 00:17:41,520
including myself maybe

00:17:38,480 --> 00:17:43,919
like uh when the kubernetes came or

00:17:41,520 --> 00:17:46,720
the cloud came well the cloud is gonna

00:17:43,919 --> 00:17:48,640
add latency on it then then the

00:17:46,720 --> 00:17:50,000
containers came all the containers

00:17:48,640 --> 00:17:52,000
aren't uh

00:17:50,000 --> 00:17:53,760
you know consistent data stores and and

00:17:52,000 --> 00:17:55,679
they're they're not persistent

00:17:53,760 --> 00:17:57,200
they're not meant to for serving

00:17:55,679 --> 00:18:00,240
production traffic

00:17:57,200 --> 00:18:02,000
um you know i remember reading

00:18:00,240 --> 00:18:03,520
you know it was when when docker came

00:18:02,000 --> 00:18:05,840
out on on the docker's

00:18:03,520 --> 00:18:08,000
homepage do not use this in production

00:18:05,840 --> 00:18:09,440
and uh and then now it's kubernetes and

00:18:08,000 --> 00:18:12,000
and the kubernetes

00:18:09,440 --> 00:18:13,200
community is growing probably faster

00:18:12,000 --> 00:18:16,240
than anything else

00:18:13,200 --> 00:18:16,880
and data on kubernetes is is is doable

00:18:16,240 --> 00:18:19,919
so i

00:18:16,880 --> 00:18:21,679
i i'm here to i'm here to say it is it

00:18:19,919 --> 00:18:22,400
is doable and it's it's also a growing

00:18:21,679 --> 00:18:25,120
community

00:18:22,400 --> 00:18:26,840
there are other uh graduated projects

00:18:25,120 --> 00:18:30,640
check out the cncf

00:18:26,840 --> 00:18:33,200
um doing um kubernetes uh

00:18:30,640 --> 00:18:34,880
data on kubernetes actually so who needs

00:18:33,200 --> 00:18:35,520
the data on kubernetes so you if if

00:18:34,880 --> 00:18:38,320
you're like

00:18:35,520 --> 00:18:38,640
what i'm hearing from the community and

00:18:38,320 --> 00:18:41,360
the

00:18:38,640 --> 00:18:43,679
and the and the prospects or the clients

00:18:41,360 --> 00:18:46,080
that i we have

00:18:43,679 --> 00:18:47,840
today and in the past like whoever

00:18:46,080 --> 00:18:51,200
actually already migrated into

00:18:47,840 --> 00:18:55,120
microservices containers

00:18:51,200 --> 00:18:57,440
on-premise or in the cloud so this is

00:18:55,120 --> 00:18:59,280
they are already becoming a kubernetes

00:18:57,440 --> 00:19:03,200
shop and they want to keep it

00:18:59,280 --> 00:19:05,280
kubernetes side by side with their data

00:19:03,200 --> 00:19:09,120
so that actually makes sense

00:19:05,280 --> 00:19:12,400
uh but but how do you do that so

00:19:09,120 --> 00:19:16,000
a mysql in kubernetes itself is

00:19:12,400 --> 00:19:17,280
is uh if you look at outside of the box

00:19:16,000 --> 00:19:21,200
mysql wasn't

00:19:17,280 --> 00:19:21,600
designed for um this type of operation

00:19:21,200 --> 00:19:23,919
because

00:19:21,600 --> 00:19:25,039
it it's a very consistent asset data

00:19:23,919 --> 00:19:28,320
store right so

00:19:25,039 --> 00:19:30,240
so you actually at mysql his mysql

00:19:28,320 --> 00:19:31,360
internally actually keeps a very

00:19:30,240 --> 00:19:34,559
consistent

00:19:31,360 --> 00:19:37,440
uh data uh and

00:19:34,559 --> 00:19:38,480
and and it serves the data if only it's

00:19:37,440 --> 00:19:41,600
consistent

00:19:38,480 --> 00:19:42,799
and uh and um so mysql provides high

00:19:41,600 --> 00:19:44,960
availability

00:19:42,799 --> 00:19:46,480
and and works with purchases storage it

00:19:44,960 --> 00:19:50,080
does back up and recovery

00:19:46,480 --> 00:19:50,799
so so you can do you can all orchestrate

00:19:50,080 --> 00:19:54,240
this in

00:19:50,799 --> 00:19:57,440
in kubernetes using uh with with mysql

00:19:54,240 --> 00:19:59,280
but we test on kubernetes actually

00:19:57,440 --> 00:20:01,280
predates the kubernetes so this is an

00:19:59,280 --> 00:20:04,559
interesting fact over here

00:20:01,280 --> 00:20:04,880
that um the release of the tess because

00:20:04,559 --> 00:20:08,720
this

00:20:04,880 --> 00:20:12,000
all born in in google and the release of

00:20:08,720 --> 00:20:15,600
vitesse was you know and

00:20:12,000 --> 00:20:19,039
initial release of kubernetes came um

00:20:15,600 --> 00:20:21,520
so by nature we test is actually

00:20:19,039 --> 00:20:22,400
very kubernetes friendly implementation

00:20:21,520 --> 00:20:25,919
from day one

00:20:22,400 --> 00:20:27,280
even um you know t minus day before

00:20:25,919 --> 00:20:30,720
before day one

00:20:27,280 --> 00:20:33,280
and uh the mindset of of

00:20:30,720 --> 00:20:36,080
the the framework that the skeleton the

00:20:33,280 --> 00:20:39,280
the the code set code base is actually

00:20:36,080 --> 00:20:41,120
a kubernetes friendly so well how do i

00:20:39,280 --> 00:20:42,559
run the test on kubernetes if that's

00:20:41,120 --> 00:20:44,799
that's my next question right

00:20:42,559 --> 00:20:45,760
you can either build your own because

00:20:44,799 --> 00:20:48,640
it's a go

00:20:45,760 --> 00:20:50,640
uh product right you can compile and

00:20:48,640 --> 00:20:54,480
embed it into your kubernetes

00:20:50,640 --> 00:20:57,039
orchestration initially uh we've heard

00:20:54,480 --> 00:20:58,640
a lot of uh the helm charts there are

00:20:57,039 --> 00:21:03,039
still shops

00:20:58,640 --> 00:21:05,039
using helm charts uh i don't have any uh

00:21:03,039 --> 00:21:07,360
personal opinion against hound charts

00:21:05,039 --> 00:21:09,840
but there's a caveat using helm charts

00:21:07,360 --> 00:21:11,840
because they are very specific to

00:21:09,840 --> 00:21:15,440
individual implementation

00:21:11,840 --> 00:21:16,799
so when we first implemented helm charts

00:21:15,440 --> 00:21:19,520
for vts even for

00:21:16,799 --> 00:21:20,080
for testing it automatic it quickly

00:21:19,520 --> 00:21:22,880
became

00:21:20,080 --> 00:21:23,679
absolute it became outdated very quickly

00:21:22,880 --> 00:21:26,640
so

00:21:23,679 --> 00:21:28,080
if you were to do hand charts your own

00:21:26,640 --> 00:21:31,120
with this will still work

00:21:28,080 --> 00:21:34,400
in kubernetes but what i think is

00:21:31,120 --> 00:21:35,679
is the best option is the operator so uh

00:21:34,400 --> 00:21:37,600
we test we test

00:21:35,679 --> 00:21:38,720
has its own open source operator by

00:21:37,600 --> 00:21:41,840
planet scale

00:21:38,720 --> 00:21:42,880
and uh and and that is the best uh place

00:21:41,840 --> 00:21:46,480
to start with

00:21:42,880 --> 00:21:49,120
so uh what other uh

00:21:46,480 --> 00:21:50,720
mysql implementations are doing for the

00:21:49,120 --> 00:21:52,480
kubernetes there's a parkour

00:21:50,720 --> 00:21:53,679
implementation this is not included with

00:21:52,480 --> 00:21:56,080
this but that's more

00:21:53,679 --> 00:21:58,080
extra db cluster implementation it's a

00:21:56,080 --> 00:22:00,159
it's a consistent cluster

00:21:58,080 --> 00:22:01,120
uh keeping multiple replicas a

00:22:00,159 --> 00:22:03,120
consistent

00:22:01,120 --> 00:22:04,320
way that's an extra db i don't know if

00:22:03,120 --> 00:22:06,480
you ever heard about it

00:22:04,320 --> 00:22:07,760
there's a press lapse implementation of

00:22:06,480 --> 00:22:11,039
of the mysql

00:22:07,760 --> 00:22:13,679
and and there's the test operator and

00:22:11,039 --> 00:22:14,240
and there are some others uh and and

00:22:13,679 --> 00:22:16,320
more

00:22:14,240 --> 00:22:18,320
others are coming if you look at the

00:22:16,320 --> 00:22:22,080
operators operators worlds

00:22:18,320 --> 00:22:22,559
are the key for uh success in kubernetes

00:22:22,080 --> 00:22:26,080
so

00:22:22,559 --> 00:22:27,919
and i also have um um the test operator

00:22:26,080 --> 00:22:30,400
for kubernetes blog post

00:22:27,919 --> 00:22:31,919
and that is a good way if you're

00:22:30,400 --> 00:22:33,520
interested in kubernetes if you're

00:22:31,919 --> 00:22:35,200
interested in in operators

00:22:33,520 --> 00:22:37,120
and you want to try some data source

00:22:35,200 --> 00:22:38,880
like mysql and vtes

00:22:37,120 --> 00:22:40,159
and this is a good good example of

00:22:38,880 --> 00:22:43,360
representation

00:22:40,159 --> 00:22:45,840
uh and uh of the that's what i

00:22:43,360 --> 00:22:47,200
i thought of thought of um giving an

00:22:45,840 --> 00:22:49,760
example over here

00:22:47,200 --> 00:22:51,440
uh because if i were to run this this we

00:22:49,760 --> 00:22:54,400
won't have enough time for it

00:22:51,440 --> 00:22:55,280
so um where do i get information about

00:22:54,400 --> 00:22:57,919
vtes

00:22:55,280 --> 00:22:59,919
so we have it as io and there's like a

00:22:57,919 --> 00:23:01,360
lots of docs there are examples getting

00:22:59,919 --> 00:23:03,280
started pages

00:23:01,360 --> 00:23:04,640
um there's a contributor guide if you

00:23:03,280 --> 00:23:07,760
want to contribute for

00:23:04,640 --> 00:23:09,200
uh the vtest project and uh we have a

00:23:07,760 --> 00:23:11,520
test slack

00:23:09,200 --> 00:23:13,840
and uh that is the best place to ask

00:23:11,520 --> 00:23:16,159
questions specifically about with this

00:23:13,840 --> 00:23:17,039
uh your your experience if you run into

00:23:16,159 --> 00:23:19,360
issues

00:23:17,039 --> 00:23:21,120
understanding any issues because we have

00:23:19,360 --> 00:23:23,440
the maintainers

00:23:21,120 --> 00:23:25,679
and the slack and and and watching this

00:23:23,440 --> 00:23:28,159
space and then we get we get help

00:23:25,679 --> 00:23:29,360
around the community about about uh uh

00:23:28,159 --> 00:23:32,480
the vitesse

00:23:29,360 --> 00:23:33,360
and uh thank you very much and um my

00:23:32,480 --> 00:23:36,159
twitter handle

00:23:33,360 --> 00:23:38,880
is over here i'm also on github linkedin

00:23:36,159 --> 00:23:38,880
and um

00:23:39,280 --> 00:23:45,600
that's uh was my presentation about with

00:23:43,279 --> 00:23:49,679
this hopefully we did good on time

00:23:45,600 --> 00:23:52,960
yeah yeah we are solidly on

00:23:49,679 --> 00:23:54,159
that was an awesome presentation thanks

00:23:52,960 --> 00:23:57,919
a lot okay

00:23:54,159 --> 00:24:02,080
um and i'm glad

00:23:57,919 --> 00:24:05,200
you also added some useful links on

00:24:02,080 --> 00:24:07,840
the slides as well so definitely um

00:24:05,200 --> 00:24:08,720
we'll definitely share the slides um if

00:24:07,840 --> 00:24:11,679
it places you

00:24:08,720 --> 00:24:12,480
so share the slides with the attendees

00:24:11,679 --> 00:24:15,039
um

00:24:12,480 --> 00:24:17,120
immediately after this session so yeah

00:24:15,039 --> 00:24:19,039
um this is the time for qra

00:24:17,120 --> 00:24:20,720
if you have any questions please feel

00:24:19,039 --> 00:24:22,960
free to

00:24:20,720 --> 00:24:23,919
put it out there on the chat section

00:24:22,960 --> 00:24:26,240
okay

00:24:23,919 --> 00:24:27,279
if you're streaming live feel free to

00:24:26,240 --> 00:24:29,679
also

00:24:27,279 --> 00:24:31,039
ask your questions on the youtube chats

00:24:29,679 --> 00:24:34,400
as well

00:24:31,039 --> 00:24:37,440
um yeah let's maybe let's give

00:24:34,400 --> 00:24:47,840
maybe a minute and see if i get

00:24:37,440 --> 00:24:47,840
any questions

00:24:56,080 --> 00:25:02,480
um i think

00:24:59,200 --> 00:25:04,320
we have none okay

00:25:02,480 --> 00:25:06,080
well thank you very much for organizing

00:25:04,320 --> 00:25:08,320
and inviting us over

00:25:06,080 --> 00:25:10,000
and appreciate all the all the great

00:25:08,320 --> 00:25:12,720
work that you did this uh

00:25:10,000 --> 00:25:14,240
community days in africa hopefully uh

00:25:12,720 --> 00:25:17,360
i'll get to see you

00:25:14,240 --> 00:25:20,080
in africa someday oh yeah yeah

00:25:17,360 --> 00:25:20,640
that would be amazing after the pandemic

00:25:20,080 --> 00:25:24,000
all right

00:25:20,640 --> 00:25:25,520
of course of course yeah thanks a lot

00:25:24,000 --> 00:25:28,919
for coming all right thank you very much

00:25:25,520 --> 00:25:31,919
appreciate it yeah see you some other

00:25:28,919 --> 00:25:31,919

YouTube URL: https://www.youtube.com/watch?v=SXJZuGgXINk


