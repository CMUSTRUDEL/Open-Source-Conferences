Title: Strengthening your Kuberentes security - Cloud Native way
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	Attackers always get better with new attack techniques, so our threat modelling and defense mechanisms need to level up.

The aim of the presentation is to demonstrate the kind of attacks that are possible due to
misconfigurations. In particular, through the use of multiple examples, I will explain scenarios
such as how misconfigured cluster privileges can lead to backdooring cloud environments,
avoid detection by manipulating logging controls and access sensitive information and trade
secrets due to IAM, pod security policy and webhook misconfigurations. The presentation
will also include the demonstration of the tool, Kubestriker which is designed to perform
automatic checks and scans to detect various misconfigurations and mitigate such
consequences.


Vasant is a security enthusiast speaker and currently serves as a Security Architect, DevSecOps Practitioner/learner and working towards securing cloud and cloud native in a Continuous Deployment world at mx51.

He is Passionate about Cloud Security, Cloud Native and containerisation Technology, DevSecOps and Security automation and acts as a security advisor for small medium and large scale businesses.

Always a Learner and currently ramping up DevOps skills to bridge the gap between the security and DevOps teams.
Captions: 
	00:00:00,560 --> 00:00:04,560
cool uh welcome fellow kubernetes and

00:00:02,960 --> 00:00:05,600
this here and thank you for joining the

00:00:04,560 --> 00:00:07,759
session today

00:00:05,600 --> 00:00:10,080
and of course we will be talking about

00:00:07,759 --> 00:00:12,000
uh the kubernetes and securing numerous

00:00:10,080 --> 00:00:13,920
moving pieces in humanities cluster

00:00:12,000 --> 00:00:15,120
in order to build a secure kubernetes

00:00:13,920 --> 00:00:17,119
ecosystem

00:00:15,120 --> 00:00:19,600
we will also be looking at an open

00:00:17,119 --> 00:00:21,279
source tool named cube striker that i

00:00:19,600 --> 00:00:21,840
have been developing for the last few

00:00:21,279 --> 00:00:24,640
months

00:00:21,840 --> 00:00:26,080
so let me start by introducing myself my

00:00:24,640 --> 00:00:28,880
name is basan chinipili

00:00:26,080 --> 00:00:30,080
like many of you i'm sure i am an i.t

00:00:28,880 --> 00:00:32,000
and security fanatic

00:00:30,080 --> 00:00:33,680
and my experience spans across various

00:00:32,000 --> 00:00:35,840
domains of information security

00:00:33,680 --> 00:00:38,000
such as like cloud security container

00:00:35,840 --> 00:00:40,160
security and penetration testing

00:00:38,000 --> 00:00:41,360
i am currently working for a startup

00:00:40,160 --> 00:00:43,840
named mx51

00:00:41,360 --> 00:00:45,840
in sydney where i play the role of a

00:00:43,840 --> 00:00:47,440
security architect a security engineer

00:00:45,840 --> 00:00:48,239
penetration tester and a compliance

00:00:47,440 --> 00:00:51,120
specialist

00:00:48,239 --> 00:00:51,520
as you can tell i wear multiple hats

00:00:51,120 --> 00:00:54,719
which

00:00:51,520 --> 00:00:56,239
certainly keeps me on my toes now let's

00:00:54,719 --> 00:00:58,079
well now that's the introduction is done

00:00:56,239 --> 00:01:00,480
let's dive into more fascinating

00:00:58,079 --> 00:01:01,359
stuff the world of kubernetes getting

00:01:00,480 --> 00:01:03,840
started with

00:01:01,359 --> 00:01:05,519
kubernetes is easy it takes a matter of

00:01:03,840 --> 00:01:07,840
minutes to set up the new cluster

00:01:05,519 --> 00:01:10,000
and run applications however the real

00:01:07,840 --> 00:01:10,640
concern of the challenge is what follows

00:01:10,000 --> 00:01:12,479
this

00:01:10,640 --> 00:01:14,080
the pivotal question of how to make sure

00:01:12,479 --> 00:01:15,920
your cluster is a cure

00:01:14,080 --> 00:01:17,520
in fact let me tell you exactly what

00:01:15,920 --> 00:01:19,840
happens in the real world

00:01:17,520 --> 00:01:21,040
when kubernetes clusters aren't secured

00:01:19,840 --> 00:01:23,759
properly

00:01:21,040 --> 00:01:25,920
in mid 2019 second largest auto finance

00:01:23,759 --> 00:01:28,000
company in the united states was hacked

00:01:25,920 --> 00:01:30,320
and huge amounts of credit card data

00:01:28,000 --> 00:01:32,000
social security numbers and bank account

00:01:30,320 --> 00:01:33,600
numbers of more than 100 million

00:01:32,000 --> 00:01:36,799
customers was leaked

00:01:33,600 --> 00:01:36,799
do you recall who this was

00:01:39,280 --> 00:01:43,759
it was capital one and world's famous

00:01:42,079 --> 00:01:45,600
automaker was one of the earlier victims

00:01:43,759 --> 00:01:47,119
of crypto jacking when a kubernetes

00:01:45,600 --> 00:01:48,399
cluster was compromised due to an

00:01:47,119 --> 00:01:49,520
administrative console not being

00:01:48,399 --> 00:01:53,119
password protected

00:01:49,520 --> 00:01:54,479
can you guess who this was it's tesla

00:01:53,119 --> 00:01:56,159
there are many other incidents like

00:01:54,479 --> 00:01:58,479
microsoft's cube flow breach

00:01:56,159 --> 00:02:00,880
and docker hub last year where attackers

00:01:58,479 --> 00:02:02,479
managed to plant malicious images

00:02:00,880 --> 00:02:04,240
well now that we have understood the

00:02:02,479 --> 00:02:05,200
dangers facing our industry and given

00:02:04,240 --> 00:02:06,960
the knowledge gap

00:02:05,200 --> 00:02:09,039
among the teams and the lack of solid

00:02:06,960 --> 00:02:11,120
security measures to protect humanities

00:02:09,039 --> 00:02:12,560
you might be wondering how in the world

00:02:11,120 --> 00:02:14,239
are we ever going to secure

00:02:12,560 --> 00:02:16,720
all these moving pieces and stop these

00:02:14,239 --> 00:02:18,959
attacks i have the same exact thought

00:02:16,720 --> 00:02:20,879
and that's what led me to build a tool

00:02:18,959 --> 00:02:22,720
named cube striker

00:02:20,879 --> 00:02:24,959
in simple terms the object of cube

00:02:22,720 --> 00:02:25,599
striker is to secure the cloud native in

00:02:24,959 --> 00:02:27,920
the most

00:02:25,599 --> 00:02:30,480
efficient and user-friendly way the

00:02:27,920 --> 00:02:32,720
cornerstone of security is visibility

00:02:30,480 --> 00:02:34,480
you can't secure what you can't see

00:02:32,720 --> 00:02:35,200
therefore cube striker adopts this

00:02:34,480 --> 00:02:37,440
philosophy

00:02:35,200 --> 00:02:39,280
and aims to enhance the visibility by

00:02:37,440 --> 00:02:40,400
acting as a security auditing tool for

00:02:39,280 --> 00:02:42,319
communities

00:02:40,400 --> 00:02:44,239
it is platform agnostic tool and

00:02:42,319 --> 00:02:45,920
compatible with various platforms such

00:02:44,239 --> 00:02:49,920
as self-hosted kubernetes

00:02:45,920 --> 00:02:51,440
amazon eks azure aks and google gke it

00:02:49,920 --> 00:02:53,120
is specifically designed

00:02:51,440 --> 00:02:54,800
to tackle kubernetes cluster security

00:02:53,120 --> 00:02:57,280
issues due to misconfigurations

00:02:54,800 --> 00:02:59,840
and will help strengthen the overall id

00:02:57,280 --> 00:03:01,840
infrastructure of any organization

00:02:59,840 --> 00:03:03,120
now let me show you exactly how the

00:03:01,840 --> 00:03:04,879
magic happens

00:03:03,120 --> 00:03:06,959
you can install cube striker using

00:03:04,879 --> 00:03:07,760
python or pip not just a matter of

00:03:06,959 --> 00:03:09,760
seconds

00:03:07,760 --> 00:03:11,840
in addition to that you can also spin up

00:03:09,760 --> 00:03:14,000
the cube striker with just one command

00:03:11,840 --> 00:03:15,599
and it can run anywhere regardless of

00:03:14,000 --> 00:03:18,400
the operating system as long as you have

00:03:15,599 --> 00:03:20,879
a container runtime installed

00:03:18,400 --> 00:03:23,760
now let me spin up the quickly the cube

00:03:20,879 --> 00:03:23,760
striker container

00:03:24,159 --> 00:03:27,519
there we go and cube striker accepts

00:03:26,239 --> 00:03:30,319
three forms of inputs

00:03:27,519 --> 00:03:32,239
a url on an ip address or you can choose

00:03:30,319 --> 00:03:33,920
from your cube config file or

00:03:32,239 --> 00:03:35,120
you can provide a range of ip addresses

00:03:33,920 --> 00:03:36,640
which could be combination of your

00:03:35,120 --> 00:03:38,319
master node and the worker nodes

00:03:36,640 --> 00:03:40,159
for the first scenario let's scan a

00:03:38,319 --> 00:03:42,239
cluster that is hosted in the google

00:03:40,159 --> 00:03:45,360
cloud the gke engine

00:03:42,239 --> 00:03:48,720
so let me provide the ip address

00:03:45,360 --> 00:03:50,720
of the cluster and cube striker

00:03:48,720 --> 00:03:52,159
gears up with a reconnaissance space

00:03:50,720 --> 00:03:54,239
where it checks for a host of

00:03:52,159 --> 00:03:56,000
ports and various services such as like

00:03:54,239 --> 00:03:56,480
cube server secure service in secure

00:03:56,000 --> 00:03:58,799
service

00:03:56,480 --> 00:04:00,000
cubelet read write and read only ports

00:03:58,799 --> 00:04:02,640
at cd ports

00:04:00,000 --> 00:04:05,680
and q proxy ports and any other posts

00:04:02,640 --> 00:04:07,760
that are open on the cluster

00:04:05,680 --> 00:04:09,280
and once the services are identified it

00:04:07,760 --> 00:04:10,640
lists all the different services that

00:04:09,280 --> 00:04:11,360
are identified during the reconstant

00:04:10,640 --> 00:04:13,120
space

00:04:11,360 --> 00:04:14,720
this snag it has identified cube server

00:04:13,120 --> 00:04:16,239
secure and point identified

00:04:14,720 --> 00:04:17,519
and it also tells us the version of the

00:04:16,239 --> 00:04:18,479
kubernetes that is running on the

00:04:17,519 --> 00:04:20,079
cluster

00:04:18,479 --> 00:04:22,240
and then it gives us two options whether

00:04:20,079 --> 00:04:22,720
we want to perform an authenticated scan

00:04:22,240 --> 00:04:25,199
or an

00:04:22,720 --> 00:04:25,759
authenticated scan so you can relate

00:04:25,199 --> 00:04:28,240
them

00:04:25,759 --> 00:04:29,840
as a black box and a white box testing

00:04:28,240 --> 00:04:30,639
in order to perform an authenticated

00:04:29,840 --> 00:04:33,680
scan

00:04:30,639 --> 00:04:35,199
we need to provide the token so that the

00:04:33,680 --> 00:04:37,120
tool will assume the token and reach out

00:04:35,199 --> 00:04:39,040
to the kubernetes cluster and enumerate

00:04:37,120 --> 00:04:40,560
all the misconfigured services because

00:04:39,040 --> 00:04:41,040
the cluster is hosted in the google

00:04:40,560 --> 00:04:44,800
cloud

00:04:41,040 --> 00:04:44,800
let's grab the google cloud token

00:04:46,960 --> 00:04:50,400
i have the token and let me punch in the

00:04:49,600 --> 00:04:52,479
token

00:04:50,400 --> 00:04:54,000
and it says authentication successful

00:04:52,479 --> 00:04:55,520
and gives us two options whether we want

00:04:54,000 --> 00:04:57,040
to perform all the checks and individual

00:04:55,520 --> 00:04:59,759
checks so let's start with

00:04:57,040 --> 00:05:01,520
by performing all the checks so it will

00:04:59,759 --> 00:05:03,520
gear up by scanning for a wide

00:05:01,520 --> 00:05:06,000
range of iam misconfigurations in the

00:05:03,520 --> 00:05:07,440
cluster such as like admin roles read

00:05:06,000 --> 00:05:10,400
admin roles secrets roles

00:05:07,440 --> 00:05:11,919
privileged roles etc and then it moves

00:05:10,400 --> 00:05:13,360
on to detecting a variety of

00:05:11,919 --> 00:05:14,720
misconfigured containers

00:05:13,360 --> 00:05:16,400
and then initiates scans on this

00:05:14,720 --> 00:05:17,600
configured call security policies and

00:05:16,400 --> 00:05:20,000
network policies

00:05:17,600 --> 00:05:21,600
not only that it can also assess the

00:05:20,000 --> 00:05:22,720
excessive privileges of the subjects

00:05:21,600 --> 00:05:24,880
inside the cluster

00:05:22,720 --> 00:05:26,720
and also run commands on the containers

00:05:24,880 --> 00:05:28,400
and streams back the output

00:05:26,720 --> 00:05:30,639
so let's see an example how we can

00:05:28,400 --> 00:05:32,240
execute commands on the containers

00:05:30,639 --> 00:05:34,160
so if we list all the parts that we have

00:05:32,240 --> 00:05:36,800
in the container let's choose

00:05:34,160 --> 00:05:38,479
this port and it will list the

00:05:36,800 --> 00:05:39,680
containers that are running inside this

00:05:38,479 --> 00:05:41,840
board

00:05:39,680 --> 00:05:44,240
and it says execute enter the command

00:05:41,840 --> 00:05:46,400
that needs to be executed

00:05:44,240 --> 00:05:48,400
there you go it streams us the output so

00:05:46,400 --> 00:05:49,280
if i click on exit it says the scan has

00:05:48,400 --> 00:05:50,800
been completed

00:05:49,280 --> 00:05:52,880
and the results generated with the

00:05:50,800 --> 00:05:56,320
target file name so after a couple of

00:05:52,880 --> 00:05:56,320
scans we will go through the results

00:05:56,560 --> 00:06:02,960
well in the second scenario let's scan a

00:05:58,240 --> 00:06:04,880
cluster that is hosted on the amazon eks

00:06:02,960 --> 00:06:07,199
and for this one let's use the second

00:06:04,880 --> 00:06:08,880
option like config file

00:06:07,199 --> 00:06:10,560
i have like so many clusters in my queue

00:06:08,880 --> 00:06:12,479
config file and this is the dev cluster

00:06:10,560 --> 00:06:15,280
which i use for our demos

00:06:12,479 --> 00:06:16,720
have chosen the cluster it goes through

00:06:15,280 --> 00:06:21,840
all the basic checks that we have seen

00:06:16,720 --> 00:06:21,840
in the first scenario

00:06:34,720 --> 00:06:38,639
and once it identifies the services it

00:06:36,720 --> 00:06:39,919
says this is this port has been

00:06:38,639 --> 00:06:40,960
identified and this is the version of

00:06:39,919 --> 00:06:42,479
the community

00:06:40,960 --> 00:06:44,800
and let's go through the authenticated

00:06:42,479 --> 00:06:47,759
scan because this is uh

00:06:44,800 --> 00:06:48,000
hosted in aws eks let's grab the token

00:06:47,759 --> 00:06:51,919
for

00:06:48,000 --> 00:06:55,120
this one okay yes okay there we go

00:06:51,919 --> 00:06:58,240
i have the token now

00:06:55,120 --> 00:07:00,319
and now let me punch in the token

00:06:58,240 --> 00:07:01,759
it says authentication successful and

00:07:00,319 --> 00:07:04,319
you can perform all the checks

00:07:01,759 --> 00:07:05,840
so the tool supports all kinds of uh

00:07:04,319 --> 00:07:09,680
kubernetes clusters hosted in

00:07:05,840 --> 00:07:12,000
amazon eks azure aks the google cloud

00:07:09,680 --> 00:07:13,039
or it could be like openshift or ibm

00:07:12,000 --> 00:07:15,840
communities engine

00:07:13,039 --> 00:07:17,440
or even your like self hosted kubernetes

00:07:15,840 --> 00:07:19,199
clusters

00:07:17,440 --> 00:07:20,800
well in the first two scenarios we have

00:07:19,199 --> 00:07:21,680
seen scanning like the kubernetes

00:07:20,800 --> 00:07:24,160
clusters

00:07:21,680 --> 00:07:25,120
now let's look at scanning a kubernetes

00:07:24,160 --> 00:07:26,960
worker node

00:07:25,120 --> 00:07:28,240
which will have important components

00:07:26,960 --> 00:07:30,319
such as like cube led

00:07:28,240 --> 00:07:32,319
read write portrait only quotes although

00:07:30,319 --> 00:07:34,560
these are like not enabled to public by

00:07:32,319 --> 00:07:36,000
default however some engineers like me

00:07:34,560 --> 00:07:37,759
might end up enabling it for testing

00:07:36,000 --> 00:07:39,520
purposes and then forget

00:07:37,759 --> 00:07:41,840
to revert those changes once the testing

00:07:39,520 --> 00:07:42,319
is done this issue might escalate over

00:07:41,840 --> 00:07:43,919
the time

00:07:42,319 --> 00:07:45,440
especially during the pandemic where

00:07:43,919 --> 00:07:50,240
most people work from home

00:07:45,440 --> 00:07:50,240
so this time let's quickly scan a worker

00:07:56,840 --> 00:07:59,840
node

00:08:04,560 --> 00:08:08,160
and because this is a worker node it

00:08:06,240 --> 00:08:10,560
will usually not ask us

00:08:08,160 --> 00:08:12,560
for an authenticated or an authenticator

00:08:10,560 --> 00:08:14,240
scan because the services that run on

00:08:12,560 --> 00:08:16,000
the worker node are quite different from

00:08:14,240 --> 00:08:18,560
the master node

00:08:16,000 --> 00:08:20,479
and yeah the scan has completed and it

00:08:18,560 --> 00:08:22,479
says like it has identified the ports

00:08:20,479 --> 00:08:23,280
such as like cube let's read write cable

00:08:22,479 --> 00:08:24,720
read only

00:08:23,280 --> 00:08:26,400
q proxy health check and there is an

00:08:24,720 --> 00:08:27,840
open 422 and also the kubernetes

00:08:26,400 --> 00:08:29,759
dashboard and pointing file

00:08:27,840 --> 00:08:31,199
and it also tells us like what are the

00:08:29,759 --> 00:08:33,200
end points that have been identified for

00:08:31,199 --> 00:08:33,839
example on cubelet read write port these

00:08:33,200 --> 00:08:36,080
are the

00:08:33,839 --> 00:08:37,760
endpoints that have been identified and

00:08:36,080 --> 00:08:41,760
on the cumulate read only port these are

00:08:37,760 --> 00:08:44,399
the end points that have been identified

00:08:41,760 --> 00:08:45,600
we have completed our scans let's look

00:08:44,399 --> 00:08:47,680
at the results

00:08:45,600 --> 00:08:49,120
every time a scan is initiated and once

00:08:47,680 --> 00:08:51,440
the scan is done it will

00:08:49,120 --> 00:08:53,120
create a report will generate a report

00:08:51,440 --> 00:08:56,160
with the same target file name

00:08:53,120 --> 00:08:57,399
for example we have scanned cluster with

00:08:56,160 --> 00:09:00,800
the ipad

00:08:57,399 --> 00:09:05,200
3411669 it generates a report

00:09:00,800 --> 00:09:06,320
with that one cube cycle creates a very

00:09:05,200 --> 00:09:08,720
elaborate report

00:09:06,320 --> 00:09:09,839
it says what all ports it has stand for

00:09:08,720 --> 00:09:12,240
and once

00:09:09,839 --> 00:09:14,240
identifies it says hey endpoint has been

00:09:12,240 --> 00:09:16,320
identified on this ip on this port

00:09:14,240 --> 00:09:18,080
and it gives us all the informations are

00:09:16,320 --> 00:09:19,600
like admin roles read-only admin roles

00:09:18,080 --> 00:09:20,560
the distracted roles and the secret

00:09:19,600 --> 00:09:22,480
privileged roles

00:09:20,560 --> 00:09:23,680
to also give us very clear information

00:09:22,480 --> 00:09:25,839
like hey this is

00:09:23,680 --> 00:09:27,839
a role which has privileges to secrets

00:09:25,839 --> 00:09:29,760
and this role has been attached to these

00:09:27,839 --> 00:09:31,760
service accounts this service account

00:09:29,760 --> 00:09:32,720
can access secrets in this name space

00:09:31,760 --> 00:09:34,160
ingress engineering

00:09:32,720 --> 00:09:36,480
so that way it gives us like a clear

00:09:34,160 --> 00:09:38,320
visibility like who have what kind of

00:09:36,480 --> 00:09:39,920
privileges inside the cluster

00:09:38,320 --> 00:09:42,480
and then it will give us the information

00:09:39,920 --> 00:09:43,600
about the privileged containers

00:09:42,480 --> 00:09:44,880
like hey these are the privileged

00:09:43,600 --> 00:09:45,519
containers it will also give us the

00:09:44,880 --> 00:09:47,440
information

00:09:45,519 --> 00:09:48,800
why a container is flagged as a

00:09:47,440 --> 00:09:50,560
privileged container

00:09:48,800 --> 00:09:53,040
for this container it has like a low

00:09:50,560 --> 00:09:54,240
privileged escalation flag enabled too

00:09:53,040 --> 00:09:56,000
and there are some other containers

00:09:54,240 --> 00:09:57,839
which are sharing like the host networks

00:09:56,000 --> 00:09:58,959
that is the reason why these containers

00:09:57,839 --> 00:10:01,519
have been flagged as

00:09:58,959 --> 00:10:03,120
released containers it also lists all

00:10:01,519 --> 00:10:04,720
the containers where the liveness probe

00:10:03,120 --> 00:10:05,200
is not set the readiness probe is not

00:10:04,720 --> 00:10:06,880
set

00:10:05,200 --> 00:10:08,560
or where the cpu and the memory limits

00:10:06,880 --> 00:10:10,240
are not set and the priority class name

00:10:08,560 --> 00:10:11,040
is not set and the containers where the

00:10:10,240 --> 00:10:13,040
service account

00:10:11,040 --> 00:10:14,480
has been mounted and also the containers

00:10:13,040 --> 00:10:15,760
where secrets have been mounted

00:10:14,480 --> 00:10:17,760
and the containers where the docker

00:10:15,760 --> 00:10:19,279
sockets have been mounted to also give

00:10:17,760 --> 00:10:20,640
us the information about uh the

00:10:19,279 --> 00:10:22,480
communities worker notes and the

00:10:20,640 --> 00:10:24,560
privileged board security policies

00:10:22,480 --> 00:10:26,240
to also tell you why a particular power

00:10:24,560 --> 00:10:26,880
security policy has been flagged as a

00:10:26,240 --> 00:10:33,839
privilege

00:10:26,880 --> 00:10:33,839
because it has different flags enabled

00:10:34,560 --> 00:10:38,320
well what i have showed you so far are

00:10:36,480 --> 00:10:40,160
the capabilities of the first version of

00:10:38,320 --> 00:10:41,360
the cube striker which was released uh

00:10:40,160 --> 00:10:43,360
four months ago

00:10:41,360 --> 00:10:45,440
since its launch has received a great

00:10:43,360 --> 00:10:47,440
response and it has been viewed more

00:10:45,440 --> 00:10:49,040
than 10 000 occasions

00:10:47,440 --> 00:10:50,560
people have started using it to scan

00:10:49,040 --> 00:10:50,959
their infrastructures and i have been

00:10:50,560 --> 00:10:52,959
asked

00:10:50,959 --> 00:10:55,040
to develop more features this gave me

00:10:52,959 --> 00:10:56,800
the guidance and encouragement and that

00:10:55,040 --> 00:10:58,800
i needed to build the next version with

00:10:56,800 --> 00:11:00,079
more advanced capabilities and an easy

00:10:58,800 --> 00:11:01,920
to use interface

00:11:00,079 --> 00:11:04,079
here is the new and the improved version

00:11:01,920 --> 00:11:06,160
of cube striker

00:11:04,079 --> 00:11:07,839
this new release has a front end and now

00:11:06,160 --> 00:11:08,800
provides security for containers running

00:11:07,839 --> 00:11:10,959
in the cluster

00:11:08,800 --> 00:11:12,560
by continuously discovering tracking

00:11:10,959 --> 00:11:14,800
scanning and reporting them using open

00:11:12,560 --> 00:11:16,079
source scanners the new version of cube

00:11:14,800 --> 00:11:18,560
striker can be installed

00:11:16,079 --> 00:11:20,800
anywhere such as your workstation or an

00:11:18,560 --> 00:11:21,760
amazon ec2 instance or an azure virtual

00:11:20,800 --> 00:11:23,920
machine or indeed

00:11:21,760 --> 00:11:25,440
any machine which has access to the

00:11:23,920 --> 00:11:28,560
target humanities clusters that you want

00:11:25,440 --> 00:11:29,839
to scan and secure

00:11:28,560 --> 00:11:31,360
well if you're in the stock you are

00:11:29,839 --> 00:11:33,120
likely familiar with the concept of

00:11:31,360 --> 00:11:34,880
containerizing applications

00:11:33,120 --> 00:11:36,079
currently the cube striker web

00:11:34,880 --> 00:11:38,160
application is made up of three

00:11:36,079 --> 00:11:40,839
containers a front and angular app

00:11:38,160 --> 00:11:42,079
the backend python rest service and a

00:11:40,839 --> 00:11:43,839
dynamodb

00:11:42,079 --> 00:11:45,120
the new environment can be installed

00:11:43,839 --> 00:11:47,200
using either

00:11:45,120 --> 00:11:48,240
kubernetes ammo manifestation files or

00:11:47,200 --> 00:11:51,519
helm charts are

00:11:48,240 --> 00:11:51,519
even using docker compose

00:11:54,320 --> 00:12:00,480
let's look at a quick demo of using the

00:11:57,040 --> 00:12:00,480
new version of the cube striker

00:12:02,000 --> 00:12:06,160
so we have like uh ammo manifestation

00:12:04,560 --> 00:12:09,440
files

00:12:06,160 --> 00:12:10,079
and now let's deploy these files which

00:12:09,440 --> 00:12:12,880
will basically

00:12:10,079 --> 00:12:16,800
create of service and the deployments of

00:12:12,880 --> 00:12:16,800
the front-end back-end and the dynamodb

00:12:17,680 --> 00:12:21,200
it created all the services there we go

00:12:19,440 --> 00:12:23,600
and in order to access

00:12:21,200 --> 00:12:24,320
the cube and his web application we need

00:12:23,600 --> 00:12:25,920
to grab

00:12:24,320 --> 00:12:28,000
the load balancer or the ip address of

00:12:25,920 --> 00:12:32,639
the front-end service there we go

00:12:28,000 --> 00:12:32,639
that is the load balancer ip address

00:12:36,959 --> 00:12:40,560
let me put it in the browser and the

00:12:39,040 --> 00:12:41,839
very first time it takes like a couple

00:12:40,560 --> 00:12:44,000
of minutes uh

00:12:41,839 --> 00:12:45,040
was not because it usually takes like a

00:12:44,000 --> 00:12:48,639
few seconds

00:12:45,040 --> 00:12:50,560
in order to uh

00:12:48,639 --> 00:12:52,320
interact with the underlying instances

00:12:50,560 --> 00:12:54,959
and once everything is done it will

00:12:52,320 --> 00:12:54,959
start working

00:12:55,760 --> 00:13:01,120
and there we go that is like the new uh

00:12:59,279 --> 00:13:03,200
version of the cube striker which i'm

00:13:01,120 --> 00:13:04,639
about to release in the next one week

00:13:03,200 --> 00:13:06,800
so it will give us information about the

00:13:04,639 --> 00:13:09,680
clusters and the containers inside

00:13:06,800 --> 00:13:11,760
uh running inside the clusters and you

00:13:09,680 --> 00:13:12,480
can add or scan a cluster by creating

00:13:11,760 --> 00:13:15,519
that button

00:13:12,480 --> 00:13:17,200
and it will add aws azure google and

00:13:15,519 --> 00:13:19,040
uh generate clusters such as like

00:13:17,200 --> 00:13:20,800
self-hosted or openshift

00:13:19,040 --> 00:13:23,279
and in order to scan a cluster you need

00:13:20,800 --> 00:13:25,120
to provide the name of the cluster

00:13:23,279 --> 00:13:26,880
and then the iem role which has enough

00:13:25,120 --> 00:13:28,240
privileges to scan the cluster

00:13:26,880 --> 00:13:30,079
and the region where the cluster has

00:13:28,240 --> 00:13:32,000
been hosted and once if you create

00:13:30,079 --> 00:13:33,760
it may take anywhere close to seven to

00:13:32,000 --> 00:13:36,560
eight seconds to scan the cluster

00:13:33,760 --> 00:13:38,480
and show the results on the dashboard

00:13:36,560 --> 00:13:39,519
there we go the scan has been completed

00:13:38,480 --> 00:13:41,440
it says the scans

00:13:39,519 --> 00:13:42,880
total number count one and here are the

00:13:41,440 --> 00:13:44,720
results that we have on the screen

00:13:42,880 --> 00:13:45,920
so it says it has scanned total hundred

00:13:44,720 --> 00:13:47,360
and forty nine goals out of which

00:13:45,920 --> 00:13:49,360
hundred and thirteen are misconfigured

00:13:47,360 --> 00:13:50,720
so total seven misconduct containers and

00:13:49,360 --> 00:13:53,519
power security policies

00:13:50,720 --> 00:13:55,360
network policies total nodes and if you

00:13:53,519 --> 00:13:56,320
want to see further down the results of

00:13:55,360 --> 00:13:58,399
each and every cluster

00:13:56,320 --> 00:13:59,920
click on the cluster name it will give

00:13:58,399 --> 00:14:01,519
you the version of the kubernetes that

00:13:59,920 --> 00:14:03,839
is running inside the cluster

00:14:01,519 --> 00:14:05,680
and the version of the docker and the

00:14:03,839 --> 00:14:08,320
total account of the misconfigured roles

00:14:05,680 --> 00:14:11,040
containers or security policies etc

00:14:08,320 --> 00:14:12,560
and if you further go down whatever we

00:14:11,040 --> 00:14:14,000
have seen using the cli

00:14:12,560 --> 00:14:16,079
it will give us all the information like

00:14:14,000 --> 00:14:18,079
admin roles read admin role secret roles

00:14:16,079 --> 00:14:19,120
you could also give us information why a

00:14:18,079 --> 00:14:21,279
particular role is called

00:14:19,120 --> 00:14:23,360
admin role for this one the web has the

00:14:21,279 --> 00:14:24,480
verbs start resources which means this

00:14:23,360 --> 00:14:26,240
particular role

00:14:24,480 --> 00:14:28,000
or any service account that has this

00:14:26,240 --> 00:14:29,120
role attached can perform any actions

00:14:28,000 --> 00:14:31,519
inside the cluster

00:14:29,120 --> 00:14:33,120
so the destructive roles anywhere any

00:14:31,519 --> 00:14:34,160
role which has the privileges to delete

00:14:33,120 --> 00:14:35,040
some things is considered as a

00:14:34,160 --> 00:14:36,800
destructive

00:14:35,040 --> 00:14:38,399
and any role which has the privileges to

00:14:36,800 --> 00:14:41,360
play with secrets inside the cluster is

00:14:38,399 --> 00:14:41,360
called the secret roles

00:14:41,760 --> 00:14:44,880
and then if you look at the miss config

00:14:43,279 --> 00:14:46,560
containers it will give us the list of

00:14:44,880 --> 00:14:48,639
all the privileged containers containers

00:14:46,560 --> 00:14:50,720
where liveness probe readiness probe cpu

00:14:48,639 --> 00:14:52,480
memory limits are missing

00:14:50,720 --> 00:14:54,399
and when we click on a particular

00:14:52,480 --> 00:14:57,279
container it will also tell why that

00:14:54,399 --> 00:15:00,959
particular container has been

00:14:57,279 --> 00:15:00,959
marked or flagged as a privileged

00:15:10,839 --> 00:15:13,839
container

00:15:14,639 --> 00:15:18,399
in the misconfigured possibly policies

00:15:16,880 --> 00:15:19,680
it could also tell you why a particular

00:15:18,399 --> 00:15:20,959
particular policies match

00:15:19,680 --> 00:15:22,480
is flagged as a privileged one for

00:15:20,959 --> 00:15:25,199
example if you look at this one it has

00:15:22,480 --> 00:15:27,279
flags such as privileged run as any user

00:15:25,199 --> 00:15:30,880
star capabilities allowed and privileged

00:15:27,279 --> 00:15:30,880
escalation flag has been enabled

00:15:35,680 --> 00:15:39,440
it's also versus information of the

00:15:37,279 --> 00:15:41,759
nodes

00:15:39,440 --> 00:15:44,079
for that cluster and now let's quickly

00:15:41,759 --> 00:15:45,920
add a couple more clusters the demo

00:15:44,079 --> 00:15:48,399
clusters that i have

00:15:45,920 --> 00:15:51,519
so let me quickly give the cluster name

00:15:48,399 --> 00:15:51,519
and the im role

00:15:53,680 --> 00:15:56,399
in the region

00:16:00,160 --> 00:16:04,079
let me quickly add one more cluster

00:16:07,519 --> 00:16:10,800
in fact it just takes like a few seconds

00:16:09,600 --> 00:16:14,079
to scan your cluster and

00:16:10,800 --> 00:16:15,920
if i identify all these configurations

00:16:14,079 --> 00:16:19,120
uh the next four to five seconds we

00:16:15,920 --> 00:16:19,120
should have all the information

00:16:19,680 --> 00:16:23,519
there we go the page has been refreshed

00:16:21,360 --> 00:16:25,440
and we have all the television reports

00:16:23,519 --> 00:16:26,399
or the count of the clusters on the main

00:16:25,440 --> 00:16:28,880
dashboard

00:16:26,399 --> 00:16:30,880
and when we go to the clusters section

00:16:28,880 --> 00:16:31,199
we can see the different clusters that

00:16:30,880 --> 00:16:33,279
we

00:16:31,199 --> 00:16:34,800
have and if you click on each and every

00:16:33,279 --> 00:16:38,240
cluster it will give the individual

00:16:34,800 --> 00:16:38,240
results of that particular cluster

00:16:38,320 --> 00:16:41,920
and on the containers section it will

00:16:40,399 --> 00:16:45,360
also give you the list of containers

00:16:41,920 --> 00:16:45,360
that are running in each and every

00:16:48,839 --> 00:16:51,839
cluster

00:16:57,600 --> 00:17:01,279
and i strongly believe that security

00:16:59,600 --> 00:17:03,440
should be baked into the devops process

00:17:01,279 --> 00:17:05,280
and the security tool should also

00:17:03,440 --> 00:17:07,039
flow very freely through the devops

00:17:05,280 --> 00:17:08,720
pipelines giving the developers

00:17:07,039 --> 00:17:10,480
more autonomy and authority without

00:17:08,720 --> 00:17:11,280
compromising the security or elevating

00:17:10,480 --> 00:17:14,240
the risk

00:17:11,280 --> 00:17:15,679
keeping this in mind i made cube striker

00:17:14,240 --> 00:17:17,679
the acd integration

00:17:15,679 --> 00:17:20,160
uh with the box by pencil such as like

00:17:17,679 --> 00:17:21,360
jenkins or azure pipelines or pit bucket

00:17:20,160 --> 00:17:23,039
pipelines or bamboo

00:17:21,360 --> 00:17:24,559
this basically allows for continuous

00:17:23,039 --> 00:17:27,039
scanning of the infrastructure to

00:17:24,559 --> 00:17:28,799
identify any misconfigurations prior

00:17:27,039 --> 00:17:30,640
to deployment into the sandbox or the

00:17:28,799 --> 00:17:47,840
production environments

00:17:30,640 --> 00:17:47,840
like i mentioned before the cube striker

00:17:51,360 --> 00:17:55,360
cube striker this new version of cube

00:17:52,960 --> 00:17:56,960
striker uh also incorporates the ability

00:17:55,360 --> 00:17:59,039
to see some critical resources in the

00:17:56,960 --> 00:18:00,880
communities infrastructure and the ways

00:17:59,039 --> 00:18:02,320
in which it could be compromised you can

00:18:00,880 --> 00:18:04,480
see like a visualized

00:18:02,320 --> 00:18:06,000
attack parts of how hackers can advance

00:18:04,480 --> 00:18:07,200
their attacks by changing different

00:18:06,000 --> 00:18:09,120
misconception components in the

00:18:07,200 --> 00:18:10,640
kubernetes cluster this feature is

00:18:09,120 --> 00:18:11,840
currently in the beta version and will

00:18:10,640 --> 00:18:14,080
be further improved as the threat

00:18:11,840 --> 00:18:15,520
analysis in the visualization tool for

00:18:14,080 --> 00:18:17,200
example if you click on the roles it

00:18:15,520 --> 00:18:18,640
will give you the list of all the admin

00:18:17,200 --> 00:18:20,000
roles the structure roles privileged

00:18:18,640 --> 00:18:20,960
roles and if you click on the admin

00:18:20,000 --> 00:18:22,640
rules

00:18:20,960 --> 00:18:24,559
on the cluster-wide rules that will say

00:18:22,640 --> 00:18:26,480
which subject has access over the

00:18:24,559 --> 00:18:27,360
cluster-wide and what resources they can

00:18:26,480 --> 00:18:29,120
access

00:18:27,360 --> 00:18:30,960
and in any particular name space in the

00:18:29,120 --> 00:18:32,640
namespace or cube system

00:18:30,960 --> 00:18:35,840
it says these are the users and they can

00:18:32,640 --> 00:18:35,840
access these resources

00:18:36,320 --> 00:18:40,080
or if you choose like admin roles will

00:18:38,320 --> 00:18:41,520
give us information like cluster wide

00:18:40,080 --> 00:18:44,640
these are the users that can access

00:18:41,520 --> 00:18:44,640
everything inside the cluster

00:18:46,320 --> 00:18:49,679
or in a particular name space it says in

00:18:48,320 --> 00:18:57,840
this name space

00:18:49,679 --> 00:18:57,840
these users have admin access

00:18:58,320 --> 00:19:02,160
i'm currently working on enhancing this

00:18:59,919 --> 00:19:03,679
feature and working on

00:19:02,160 --> 00:19:05,200
setting up all other features where it

00:19:03,679 --> 00:19:07,280
will give us the complete visibility of

00:19:05,200 --> 00:19:08,160
the entire kubernetes clusters and the

00:19:07,280 --> 00:19:09,440
ways

00:19:08,160 --> 00:19:11,520
uh the different loopholes that

00:19:09,440 --> 00:19:13,039
attackers can use and gain access to

00:19:11,520 --> 00:19:14,240
your clusters and perform privileged

00:19:13,039 --> 00:19:16,080
installations

00:19:14,240 --> 00:19:18,080
and i'm also currently working on

00:19:16,080 --> 00:19:18,960
setting up our documentation for this

00:19:18,080 --> 00:19:21,120
website

00:19:18,960 --> 00:19:22,720
this new version of cubestriker will go

00:19:21,120 --> 00:19:24,480
live on may 9th

00:19:22,720 --> 00:19:25,919
and also the documentation site will be

00:19:24,480 --> 00:19:27,679
available the documentation site will

00:19:25,919 --> 00:19:29,919
have all the information such as how to

00:19:27,679 --> 00:19:30,720
use different versions like cli and the

00:19:29,919 --> 00:19:32,720
web app

00:19:30,720 --> 00:19:35,360
how to use them on uh different

00:19:32,720 --> 00:19:36,799
infrastructures such as like aws gkeks

00:19:35,360 --> 00:19:39,840
openshift self-management scanning

00:19:36,799 --> 00:19:39,840
worker nodes etcetera

00:19:42,960 --> 00:19:46,400
the new weber version as i mentioned it

00:19:44,480 --> 00:19:48,160
will be released on github on may 9

00:19:46,400 --> 00:19:52,000
however the command line interface is

00:19:48,160 --> 00:19:53,520
already available on the github

00:19:52,000 --> 00:19:55,280
so the link is shown on the slides

00:19:53,520 --> 00:19:57,440
please give it a test drive yourself

00:19:55,280 --> 00:19:58,960
and then uh share your thoughts any

00:19:57,440 --> 00:20:01,039
feedback or any suggestions or

00:19:58,960 --> 00:20:04,240
improvements are always welcome

00:20:01,039 --> 00:20:07,840
and uh needless to say like

00:20:04,240 --> 00:20:07,840
innovation needs collaboration

00:20:09,919 --> 00:20:13,360
so while the cube striker community of

00:20:11,600 --> 00:20:14,000
adopters and contributors are growing

00:20:13,360 --> 00:20:15,760
steadily

00:20:14,000 --> 00:20:17,919
i hope to continue the expansion of its

00:20:15,760 --> 00:20:20,080
use by collaborating with more users

00:20:17,919 --> 00:20:21,840
and get more contributors on board if

00:20:20,080 --> 00:20:23,679
you're keen to learn more and get

00:20:21,840 --> 00:20:25,760
involved please get in touch with me

00:20:23,679 --> 00:20:27,679
through any of these channels

00:20:25,760 --> 00:20:29,679
and i would like to thank the

00:20:27,679 --> 00:20:31,280
organization organizers for giving me

00:20:29,679 --> 00:20:33,360
this wonderful opportunity

00:20:31,280 --> 00:20:34,960
well that uh pretty much that's it that

00:20:33,360 --> 00:20:38,480
concludes my presentation and i'm happy

00:20:34,960 --> 00:20:38,480
to take any questions that you have now

00:20:44,720 --> 00:20:52,240
yeah uh awesome presentation

00:20:48,480 --> 00:20:55,280
and i think that was really awesome

00:20:52,240 --> 00:20:57,360
so yeah it's qrp session if

00:20:55,280 --> 00:20:58,400
you have any questions please feel free

00:20:57,360 --> 00:21:01,760
to

00:20:58,400 --> 00:21:02,400
ask us or use the chat section and this

00:21:01,760 --> 00:21:04,559
platform

00:21:02,400 --> 00:21:06,000
if you're streaming live please feel

00:21:04,559 --> 00:21:10,080
free to

00:21:06,000 --> 00:21:14,559
answer questions as well

00:21:10,080 --> 00:21:17,760
and yeah just like that

00:21:14,559 --> 00:21:21,360
feel free to check out these urls

00:21:17,760 --> 00:21:24,480
and um to learn more about keep striker

00:21:21,360 --> 00:21:26,320
and also feel free to follow us on

00:21:24,480 --> 00:21:30,159
[Music]

00:21:26,320 --> 00:21:33,440
his social media channels

00:21:30,159 --> 00:21:35,760
and yeah um

00:21:33,440 --> 00:21:36,480
thank you once again uh i think that was

00:21:35,760 --> 00:21:39,760
really cool

00:21:36,480 --> 00:21:43,440
i was really insightful and i i i

00:21:39,760 --> 00:21:46,159
this is more or less requests

00:21:43,440 --> 00:21:46,480
i would like you to share your slides as

00:21:46,159 --> 00:21:50,480
well

00:21:46,480 --> 00:21:50,480
with some of your things if possible

00:21:50,559 --> 00:21:56,080
yeah okay cool cool i'll definitely post

00:21:54,559 --> 00:21:57,919
uh i'll upload the documents on the

00:21:56,080 --> 00:21:59,120
google slides and i will share the link

00:21:57,919 --> 00:22:00,720
with you guys

00:21:59,120 --> 00:22:02,640
well then thank you so much for the

00:22:00,720 --> 00:22:06,720
opportunity today all right

00:22:02,640 --> 00:22:09,120
i think we uh okay okay okay cool

00:22:06,720 --> 00:22:09,760
actually thought the question came here

00:22:09,120 --> 00:22:13,120
nice

00:22:09,760 --> 00:22:14,799
uh thanks a lot yeah i hope to see you

00:22:13,120 --> 00:22:18,080
some other time

00:22:14,799 --> 00:22:18,080
yes thank you so much guys

00:22:19,480 --> 00:22:22,480

YouTube URL: https://www.youtube.com/watch?v=j7RinqfBO0g


