Title: Build your first multiplayer dedicated game server on Kubernetes
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	In this session, we will first understand basic gaming architecture and then quickly deploy running real-time, session-based multiplayer dedicated game servers on Kubernetes clusters. We will be using the public cloud to spin up a Kubernetes cluster and understand how easy it is to quickly deploy, scale and run a dedicated gaming server.

KC Ayyagari (Krishna Chytanya Ayyagari) currently works for Google as a Senior Customer Engineer and he specializes in Cloud Infrastructure Modernization. Based out of New York, in his role, he focuses on Google Cloud technologies and works for enterprise sales teams. Prior to Google, KC worked for Microsoft, IBM, Thomas Reuters, Infosys and he has over 13 years of industry experience. A startup mentor, program manager and a trained architect, he has been active in the space of cloud computing for over 10 years and had experience in building large scale startup programs and designing technical solutions for some of the largest companies as well as Governments. He had experience working with and mentoring startups from all over the world. He is an active startup mentor for many accelerators including the United Nations (UN) and Google Launchpad.
Captions: 
	00:00:01,520 --> 00:00:05,200
yeah i have

00:00:03,199 --> 00:00:06,240
not tried to pronounce the full name of

00:00:05,200 --> 00:00:08,240
krishna

00:00:06,240 --> 00:00:09,280
at least i can't pronounce krishna

00:00:08,240 --> 00:00:10,800
correctly but

00:00:09,280 --> 00:00:12,719
i'm not sure i can't pronounce the rest

00:00:10,800 --> 00:00:16,240
of the name correctly

00:00:12,719 --> 00:00:18,720
you can just call me

00:00:16,240 --> 00:00:19,520
so krishna is a senior customer engineer

00:00:18,720 --> 00:00:22,000
at google

00:00:19,520 --> 00:00:23,519
and i think we are currently based out

00:00:22,000 --> 00:00:27,680
of new york and the us

00:00:23,519 --> 00:00:30,800
right yes thank you very much for

00:00:27,680 --> 00:00:31,359
joining us and krishna will be talking

00:00:30,800 --> 00:00:33,440
to us

00:00:31,359 --> 00:00:34,960
about how to build your first

00:00:33,440 --> 00:00:37,440
multiplayer dedicated

00:00:34,960 --> 00:00:39,200
game server on cuba this is an exciting

00:00:37,440 --> 00:00:42,079
thing we have a lot of gamers in the

00:00:39,200 --> 00:00:44,079
community here so they'll definitely

00:00:42,079 --> 00:00:46,239
want to know how to do this so over to

00:00:44,079 --> 00:00:48,320
you krishna

00:00:46,239 --> 00:00:50,480
definitely hi everyone uh let me share

00:00:48,320 --> 00:00:52,320
my screen um

00:00:50,480 --> 00:00:54,239
please let me know if i can if you if

00:00:52,320 --> 00:00:57,600
everyone can see my screen

00:00:54,239 --> 00:01:01,120
i'm just sharing my whole screen

00:00:57,600 --> 00:01:06,320
it's not up yet okay it's up now

00:01:01,120 --> 00:01:07,680
excellent yeah perfect um

00:01:06,320 --> 00:01:10,560
i can go ahead and start the session

00:01:07,680 --> 00:01:12,640
right yes please

00:01:10,560 --> 00:01:13,680
yeah okay great um by the way i'll be

00:01:12,640 --> 00:01:16,400
presenting the screen

00:01:13,680 --> 00:01:17,759
uh do if there is any pings please feel

00:01:16,400 --> 00:01:20,799
free to stop me

00:01:17,759 --> 00:01:23,520
uh but uh here's our agenda

00:01:20,799 --> 00:01:24,640
so we'll just do some small intro i'll

00:01:23,520 --> 00:01:26,640
be talking about

00:01:24,640 --> 00:01:28,320
the game infrastructure as a whole how

00:01:26,640 --> 00:01:29,119
the game backhand and frontline looks

00:01:28,320 --> 00:01:31,520
like

00:01:29,119 --> 00:01:32,479
i'll take you through building a game

00:01:31,520 --> 00:01:35,600
step by step

00:01:32,479 --> 00:01:36,799
by the way i have a a core script which

00:01:35,600 --> 00:01:38,479
i already executed

00:01:36,799 --> 00:01:40,320
given the time but also i have the

00:01:38,479 --> 00:01:43,439
course script which i'll explain you

00:01:40,320 --> 00:01:44,560
how to build or deploy a game server on

00:01:43,439 --> 00:01:47,280
kubernetes

00:01:44,560 --> 00:01:48,799
i'll also talk to talk you through a

00:01:47,280 --> 00:01:50,399
another way of doing that

00:01:48,799 --> 00:01:52,720
using agonist which is an open source

00:01:50,399 --> 00:01:54,479
project and i'll tell you the difference

00:01:52,720 --> 00:01:55,520
between doing the hard way versus our

00:01:54,479 --> 00:01:58,479
secondary

00:01:55,520 --> 00:01:59,040
and i'll summarize that and we'll leave

00:01:58,479 --> 00:02:00,880
there

00:01:59,040 --> 00:02:02,320
so within half an hour i'll try to cover

00:02:00,880 --> 00:02:04,719
as much as possible

00:02:02,320 --> 00:02:05,520
um i have some simulation i have some i

00:02:04,719 --> 00:02:08,080
have

00:02:05,520 --> 00:02:09,119
i mean two demos for you to look into

00:02:08,080 --> 00:02:10,959
and understand how the game

00:02:09,119 --> 00:02:13,760
infrastructure looks like

00:02:10,959 --> 00:02:14,480
so uh intros uh my name is krishna

00:02:13,760 --> 00:02:16,720
chaitanya

00:02:14,480 --> 00:02:17,680
you can call me casey that should be

00:02:16,720 --> 00:02:19,520
good enough

00:02:17,680 --> 00:02:21,680
i am a senior customer engineer working

00:02:19,520 --> 00:02:23,040
with google it i've been with google for

00:02:21,680 --> 00:02:26,319
last four and a half years

00:02:23,040 --> 00:02:27,840
uh did a lot of roles uh you know random

00:02:26,319 --> 00:02:29,760
startup program in india

00:02:27,840 --> 00:02:32,319
moved to u.s now working with enterprise

00:02:29,760 --> 00:02:34,879
customers and their sales

00:02:32,319 --> 00:02:35,599
belongs to enterprise sales division so

00:02:34,879 --> 00:02:38,080
that's me

00:02:35,599 --> 00:02:39,360
uh love working with startups uh i love

00:02:38,080 --> 00:02:42,720
working with community

00:02:39,360 --> 00:02:44,879
uh i love sharing uh what i learned

00:02:42,720 --> 00:02:47,519
uh that's that's all about me now let's

00:02:44,879 --> 00:02:50,480
talk about the game infrastructure

00:02:47,519 --> 00:02:51,680
so what you see on the screen is a

00:02:50,480 --> 00:02:54,800
typical

00:02:51,680 --> 00:02:56,480
very high level game infrastructure the

00:02:54,800 --> 00:02:59,920
way it looks like is you have

00:02:56,480 --> 00:03:02,319
multiple clients it can be mobile pc

00:02:59,920 --> 00:03:04,400
handhold whatever the client you use you

00:03:02,319 --> 00:03:05,599
have a front end and you have a back end

00:03:04,400 --> 00:03:08,400
on the front and have

00:03:05,599 --> 00:03:10,560
two components game platform services

00:03:08,400 --> 00:03:12,640
and dedicated game servers dedicated

00:03:10,560 --> 00:03:15,680
game servers is the place where

00:03:12,640 --> 00:03:19,280
your your game is actually deployed now

00:03:15,680 --> 00:03:21,599
analytics and game database is again

00:03:19,280 --> 00:03:24,239
you know at backend now if you go deep

00:03:21,599 --> 00:03:26,159
dive into what is game platform services

00:03:24,239 --> 00:03:27,280
this is where a lot of things happen

00:03:26,159 --> 00:03:30,159
like leaderboard

00:03:27,280 --> 00:03:31,599
matchmaking so imagine i wanted to play

00:03:30,159 --> 00:03:34,080
a game with abu bakr

00:03:31,599 --> 00:03:35,599
now we both actually join online someone

00:03:34,080 --> 00:03:38,560
has to match us

00:03:35,599 --> 00:03:40,159
for a game uh onto a dedicated server

00:03:38,560 --> 00:03:42,159
nearby so that we can play

00:03:40,159 --> 00:03:43,680
so that kind of services happen on game

00:03:42,159 --> 00:03:44,560
platform so i mean these combined

00:03:43,680 --> 00:03:46,959
together are called

00:03:44,560 --> 00:03:49,360
game platform services this can be like

00:03:46,959 --> 00:03:51,680
online lobby chat inventory management

00:03:49,360 --> 00:03:52,400
all the you know axillary services which

00:03:51,680 --> 00:03:54,720
ones

00:03:52,400 --> 00:03:56,000
uh which you see on top of the games are

00:03:54,720 --> 00:03:58,159
kind of like

00:03:56,000 --> 00:03:59,599
we can bundle them into something called

00:03:58,159 --> 00:04:01,680
game platform services

00:03:59,599 --> 00:04:03,360
we have dedicated game servers this is

00:04:01,680 --> 00:04:03,920
exactly where the game is actually

00:04:03,360 --> 00:04:06,319
hosted

00:04:03,920 --> 00:04:08,080
this can be thousand thousands of

00:04:06,319 --> 00:04:10,080
servers based on the game you're playing

00:04:08,080 --> 00:04:13,360
it can be deployed in multiple regions

00:04:10,080 --> 00:04:16,079
it can be deployed in multiple

00:04:13,360 --> 00:04:17,280
hardware no matter where the game is uh

00:04:16,079 --> 00:04:20,400
residing on

00:04:17,280 --> 00:04:24,000
now coming to the game database

00:04:20,400 --> 00:04:24,400
this is where you know game also comes

00:04:24,000 --> 00:04:26,800
with

00:04:24,400 --> 00:04:29,120
compute and all as well as assets the

00:04:26,800 --> 00:04:31,440
assets are something where

00:04:29,120 --> 00:04:32,720
the images the video files all the

00:04:31,440 --> 00:04:36,080
assets which are like

00:04:32,720 --> 00:04:37,040
very heavy in size they typically

00:04:36,080 --> 00:04:39,120
actually

00:04:37,040 --> 00:04:40,880
can be residing i mean you you can

00:04:39,120 --> 00:04:43,040
create a shared state

00:04:40,880 --> 00:04:44,160
where you can store the game assets in a

00:04:43,040 --> 00:04:45,840
game database

00:04:44,160 --> 00:04:47,199
and all and and finally you have

00:04:45,840 --> 00:04:48,960
analytics back

00:04:47,199 --> 00:04:50,479
so where the queries you understand how

00:04:48,960 --> 00:04:52,080
what's happening within the game the

00:04:50,479 --> 00:04:54,320
events within the game

00:04:52,080 --> 00:04:55,840
all that information which are real time

00:04:54,320 --> 00:04:58,160
happening can be

00:04:55,840 --> 00:04:58,880
captured in analytic stack so these are

00:04:58,160 --> 00:05:01,039
like four

00:04:58,880 --> 00:05:03,440
major blocks i just simplified a lot of

00:05:01,039 --> 00:05:05,919
gaming infrastructure for your

00:05:03,440 --> 00:05:08,000
understanding but try looking at these

00:05:05,919 --> 00:05:10,479
i4 foundational building blocks to build

00:05:08,000 --> 00:05:13,840
any kind of back-end for a game server

00:05:10,479 --> 00:05:14,639
now this entire back-end can be deployed

00:05:13,840 --> 00:05:16,240
anywhere

00:05:14,639 --> 00:05:17,840
like you can deploy it in on private

00:05:16,240 --> 00:05:19,520
cloud you can deploy it on public cloud

00:05:17,840 --> 00:05:20,479
you can actually do even make a fully

00:05:19,520 --> 00:05:22,479
managed solution

00:05:20,479 --> 00:05:24,400
doesn't matter it's like you're running

00:05:22,479 --> 00:05:27,199
on kubernetes you can run it anywhere

00:05:24,400 --> 00:05:28,080
uh for for this session a lot of demos

00:05:27,199 --> 00:05:30,479
you will see

00:05:28,080 --> 00:05:31,440
i created kubernetes engine on google

00:05:30,479 --> 00:05:34,320
cloud uh

00:05:31,440 --> 00:05:36,000
just it just makes my uh uh you know

00:05:34,320 --> 00:05:38,080
deployment easy but you can choose to

00:05:36,000 --> 00:05:38,639
deploy that anywhere in any cloud or any

00:05:38,080 --> 00:05:40,479
public

00:05:38,639 --> 00:05:42,560
data center i mean your own private data

00:05:40,479 --> 00:05:45,520
center now let's

00:05:42,560 --> 00:05:47,520
go through what happens when two players

00:05:45,520 --> 00:05:50,080
wanted to play

00:05:47,520 --> 00:05:51,600
now this is kind of a traditional

00:05:50,080 --> 00:05:55,440
workflow

00:05:51,600 --> 00:05:58,080
where when two players if you look at uh

00:05:55,440 --> 00:06:00,000
i'm just uh turning on the laser pointer

00:05:58,080 --> 00:06:03,039
so here are the two

00:06:00,000 --> 00:06:04,160
players who wanted to play a game so

00:06:03,039 --> 00:06:05,520
there will be something called

00:06:04,160 --> 00:06:08,639
matchmaker

00:06:05,520 --> 00:06:10,800
who will decide who two players

00:06:08,639 --> 00:06:12,240
would be playing with each other or kind

00:06:10,800 --> 00:06:15,440
of match them

00:06:12,240 --> 00:06:17,520
send a request to a service

00:06:15,440 --> 00:06:19,199
called a server manager which

00:06:17,520 --> 00:06:22,000
essentially takes

00:06:19,199 --> 00:06:22,880
a game server from the machine cluster

00:06:22,000 --> 00:06:25,120
and then

00:06:22,880 --> 00:06:26,319
dedicate i mean send the request back to

00:06:25,120 --> 00:06:29,600
matchmaker which will

00:06:26,319 --> 00:06:30,720
allocate two players on the dedicated

00:06:29,600 --> 00:06:34,319
game server

00:06:30,720 --> 00:06:36,240
now rephrasing it

00:06:34,319 --> 00:06:38,479
you send a request to matchmaker

00:06:36,240 --> 00:06:41,199
matchmaker talks to server manager

00:06:38,479 --> 00:06:42,880
server manager talks to machine cluster

00:06:41,199 --> 00:06:44,960
dedicates a game server

00:06:42,880 --> 00:06:46,319
i mean takes takes out a game server

00:06:44,960 --> 00:06:48,720
which is

00:06:46,319 --> 00:06:50,319
near to the players send the request

00:06:48,720 --> 00:06:51,919
back players directly connect to the

00:06:50,319 --> 00:06:53,120
machine cluster i mean dedicated game

00:06:51,919 --> 00:06:54,960
server design uh

00:06:53,120 --> 00:06:57,360
you know which which the server manager

00:06:54,960 --> 00:06:59,599
decided and then they start playing

00:06:57,360 --> 00:07:00,960
why don't you use load balancer and etc

00:06:59,599 --> 00:07:03,120
obviously the game

00:07:00,960 --> 00:07:04,720
the latency is very very important the

00:07:03,120 --> 00:07:06,400
typical architecture of having a load

00:07:04,720 --> 00:07:08,160
balancer between clusters

00:07:06,400 --> 00:07:10,160
all this doesn't work so you need to

00:07:08,160 --> 00:07:10,960
think differently in terms of how two

00:07:10,160 --> 00:07:13,680
players

00:07:10,960 --> 00:07:15,199
talk i mean connect to a game it's more

00:07:13,680 --> 00:07:17,599
like a server manager

00:07:15,199 --> 00:07:19,039
assign some sort of code which i would

00:07:17,599 --> 00:07:20,880
say the server manager

00:07:19,039 --> 00:07:23,120
talking to a cluster taking the game

00:07:20,880 --> 00:07:26,479
server sending it back to two people

00:07:23,120 --> 00:07:29,520
that's how the workflow looks like

00:07:26,479 --> 00:07:31,919
now the highlighted part on the right

00:07:29,520 --> 00:07:32,800
is what we need to concentrate on what

00:07:31,919 --> 00:07:35,280
do we do

00:07:32,800 --> 00:07:36,639
to create a server manager which will

00:07:35,280 --> 00:07:38,800
take a game server

00:07:36,639 --> 00:07:40,000
or how this deployment of cluster of

00:07:38,800 --> 00:07:43,039
game servers via

00:07:40,000 --> 00:07:45,840
server manager looks like

00:07:43,039 --> 00:07:46,400
now i'm going to show you a simple demon

00:07:45,840 --> 00:07:50,319
of of

00:07:46,400 --> 00:07:53,360
of a first bit of open arena again which

00:07:50,319 --> 00:07:55,440
uh which i deployed on kubernetes engine

00:07:53,360 --> 00:07:57,280
now the whole there are so many

00:07:55,440 --> 00:07:59,039
constraints don't look at this game as

00:07:57,280 --> 00:08:02,080
like a fully production game

00:07:59,039 --> 00:08:04,000
but more on more or less a

00:08:02,080 --> 00:08:05,360
a smaller version of a dedicated game

00:08:04,000 --> 00:08:07,759
server i deployed

00:08:05,360 --> 00:08:08,479
just before joining this call so what

00:08:07,759 --> 00:08:12,080
i'll show

00:08:08,479 --> 00:08:13,599
you know it runs one match it i mean

00:08:12,080 --> 00:08:16,080
you can look at the constraints it's

00:08:13,599 --> 00:08:18,080
it's not uh what i wanted to showcase is

00:08:16,080 --> 00:08:18,560
this is not a production grade gaming

00:08:18,080 --> 00:08:20,479
but

00:08:18,560 --> 00:08:21,680
obviously this is exactly what i just

00:08:20,479 --> 00:08:23,759
showed you on this screen

00:08:21,680 --> 00:08:25,039
i'm gonna deploy that i already deployed

00:08:23,759 --> 00:08:26,479
that and i'll show you

00:08:25,039 --> 00:08:28,560
so before we go there what is the

00:08:26,479 --> 00:08:31,199
step-by-step process of building this

00:08:28,560 --> 00:08:33,599
uh architecture first of all you can

00:08:31,199 --> 00:08:35,360
take open arena game server

00:08:33,599 --> 00:08:37,039
you can set up i mean you can

00:08:35,360 --> 00:08:38,399
containerize it

00:08:37,039 --> 00:08:40,159
before you deploy under kubernetes

00:08:38,399 --> 00:08:42,320
cluster and

00:08:40,159 --> 00:08:43,680
setting up a kubernetes cluster i did it

00:08:42,320 --> 00:08:45,760
on google cloud

00:08:43,680 --> 00:08:46,720
you can i had something called scale

00:08:45,760 --> 00:08:49,279
manager

00:08:46,720 --> 00:08:51,040
scale manager is a service which will

00:08:49,279 --> 00:08:53,120
look into the cluster

00:08:51,040 --> 00:08:55,360
scales the cluster if there is a huge

00:08:53,120 --> 00:08:58,240
load that is an optional service

00:08:55,360 --> 00:09:00,000
i did it because you just need to have

00:08:58,240 --> 00:09:03,440
that scaling on workloads

00:09:00,000 --> 00:09:04,560
like you you need to have more virtual

00:09:03,440 --> 00:09:06,240
machines

00:09:04,560 --> 00:09:08,000
available to you if the game is actually

00:09:06,240 --> 00:09:09,839
scaling so scale manager

00:09:08,000 --> 00:09:11,360
is a service which runs on top of

00:09:09,839 --> 00:09:14,320
kubernetes which will scale the

00:09:11,360 --> 00:09:15,760
cluster if at all needed and we verify

00:09:14,320 --> 00:09:17,839
the setup we connect to the game server

00:09:15,760 --> 00:09:20,399
we start playing the game

00:09:17,839 --> 00:09:21,920
now most of them is one-time work

00:09:20,399 --> 00:09:23,519
setting up kubernetes cluster is

00:09:21,920 --> 00:09:25,839
obviously done on cloud

00:09:23,519 --> 00:09:27,760
uh we verify uh connecting to game

00:09:25,839 --> 00:09:28,720
servers that's what we do it like let me

00:09:27,760 --> 00:09:31,519
show you the script

00:09:28,720 --> 00:09:32,160
first of all before i take you through

00:09:31,519 --> 00:09:34,880
um

00:09:32,160 --> 00:09:38,640
the the demo part so i hope everyone can

00:09:34,880 --> 00:09:38,640
see my screen right like the game's over

00:09:43,839 --> 00:09:50,160
you can see okay see your screen

00:09:47,600 --> 00:09:50,880
excellent so if you look at the script

00:09:50,160 --> 00:09:53,279
for which

00:09:50,880 --> 00:09:54,480
the first time you know you install the

00:09:53,279 --> 00:09:56,240
tools

00:09:54,480 --> 00:09:57,600
there there are i mean obviously the

00:09:56,240 --> 00:10:00,399
tools are cubelet

00:09:57,600 --> 00:10:02,839
and docker uh you start actually

00:10:00,399 --> 00:10:06,320
downloading the game server from

00:10:02,839 --> 00:10:08,560
from from from the storage which we have

00:10:06,320 --> 00:10:10,240
once you have that the second step is

00:10:08,560 --> 00:10:11,680
containerizing this

00:10:10,240 --> 00:10:13,600
i don't want to go deep dive into

00:10:11,680 --> 00:10:14,720
individual commands but giving you a

00:10:13,600 --> 00:10:16,880
high level idea

00:10:14,720 --> 00:10:18,800
that this part is about containerizing

00:10:16,880 --> 00:10:20,560
and uploading it to content registry

00:10:18,800 --> 00:10:22,560
once you have that this is an important

00:10:20,560 --> 00:10:23,839
step as i mentioned if you remember the

00:10:22,560 --> 00:10:26,720
first slide

00:10:23,839 --> 00:10:27,279
of what i showed you there is a game

00:10:26,720 --> 00:10:30,399
server

00:10:27,279 --> 00:10:31,600
game state and a game database so the

00:10:30,399 --> 00:10:34,880
game assets

00:10:31,600 --> 00:10:36,240
has to be deployed on a storage which is

00:10:34,880 --> 00:10:38,560
shared with kubernetes

00:10:36,240 --> 00:10:40,000
so i created a virtual machine attached

00:10:38,560 --> 00:10:43,600
a file attached a

00:10:40,000 --> 00:10:47,279
storage file into it onto it um and then

00:10:43,600 --> 00:10:50,720
you know cleansed formatted the disk

00:10:47,279 --> 00:10:53,040
uh set up my uh assets into it deleted

00:10:50,720 --> 00:10:55,200
the virtual machine had the disk ready

00:10:53,040 --> 00:10:56,959
set up firewall network created a

00:10:55,200 --> 00:10:57,440
computing uh created a kubernetes

00:10:56,959 --> 00:10:59,760
cluster

00:10:57,440 --> 00:11:01,760
on google cloud and then attach to the

00:10:59,760 --> 00:11:02,240
disk as a volume on volume claim by the

00:11:01,760 --> 00:11:04,800
way

00:11:02,240 --> 00:11:07,040
whoever is new to kubernetes think of it

00:11:04,800 --> 00:11:09,760
is a declarative programming way of

00:11:07,040 --> 00:11:10,399
um you know it's a content orchestration

00:11:09,760 --> 00:11:13,680
engine for

00:11:10,399 --> 00:11:16,000
uh for containers so what we are what

00:11:13,680 --> 00:11:17,519
for for you to summarize the assets

00:11:16,000 --> 00:11:19,760
volume is where the

00:11:17,519 --> 00:11:22,079
assets like the videos audios all that

00:11:19,760 --> 00:11:23,680
file access of the game are located on

00:11:22,079 --> 00:11:25,519
so i'm sharing that assets with

00:11:23,680 --> 00:11:28,560
kubernetes engine so that i can start

00:11:25,519 --> 00:11:29,519
uh using them now the scale manager is

00:11:28,560 --> 00:11:32,560
something where

00:11:29,519 --> 00:11:33,440
as i mentioned i would use this program

00:11:32,560 --> 00:11:36,399
to scale my

00:11:33,440 --> 00:11:38,320
kubernetes cluster whenever it is needed

00:11:36,399 --> 00:11:42,240
the nodes when it is needed

00:11:38,320 --> 00:11:43,279
um and finally i deploy open arena using

00:11:42,240 --> 00:11:46,079
the

00:11:43,279 --> 00:11:47,120
uh open arena which i already

00:11:46,079 --> 00:11:50,800
containerized

00:11:47,120 --> 00:11:52,639
deployed r2 as uh my content registry

00:11:50,800 --> 00:11:53,839
um i'll go ahead and deploy let me show

00:11:52,639 --> 00:11:57,200
you my screen uh

00:11:53,839 --> 00:11:59,519
of what i where i deployed this so

00:11:57,200 --> 00:12:01,440
if you can see my screen this is the

00:11:59,519 --> 00:12:03,360
cluster which i created

00:12:01,440 --> 00:12:06,079
and here is uh let me show you

00:12:03,360 --> 00:12:08,079
kubernetes cluster

00:12:06,079 --> 00:12:09,760
one it is engine so this is the cluster

00:12:08,079 --> 00:12:12,959
which i created open arena

00:12:09,760 --> 00:12:16,320
if you look at it has

00:12:12,959 --> 00:12:18,160
a couple of nodes located in uh located

00:12:16,320 --> 00:12:21,360
in u.s

00:12:18,160 --> 00:12:22,240
so now i've been running this before we

00:12:21,360 --> 00:12:24,720
joined the call

00:12:22,240 --> 00:12:26,639
so what i did is if you look at let's

00:12:24,720 --> 00:12:39,839
let's uh

00:12:26,639 --> 00:12:39,839
get the notes okay let me

00:12:43,200 --> 00:12:48,480
here now cube ctrl

00:12:51,519 --> 00:12:56,160
so ports can see there are scale manager

00:12:54,240 --> 00:13:00,079
which is running and there is

00:12:56,160 --> 00:13:02,800
open arena dns which is actually the

00:13:00,079 --> 00:13:03,600
the the node which inside the pod which

00:13:02,800 --> 00:13:07,200
is running

00:13:03,600 --> 00:13:09,040
so this already executed and it's done

00:13:07,200 --> 00:13:12,399
now let's delete that

00:13:09,040 --> 00:13:14,959
cube cpl delete pod

00:13:12,399 --> 00:13:18,320
open arena dns let's redeploy that open

00:13:14,959 --> 00:13:18,320
arena dns part again

00:13:18,839 --> 00:13:24,000
now

00:13:20,480 --> 00:13:24,639
let's deploy the pod again if you wanted

00:13:24,000 --> 00:13:28,240
to see

00:13:24,639 --> 00:13:30,160
how the part looks like it's very simple

00:13:28,240 --> 00:13:32,480
this is how the part looks like there is

00:13:30,160 --> 00:13:34,240
uh it's talking to a volume claim

00:13:32,480 --> 00:13:35,760
where the assets are located and then

00:13:34,240 --> 00:13:39,040
starting actually and play

00:13:35,760 --> 00:13:41,600
is you know opening up a container with

00:13:39,040 --> 00:13:42,560
certain arguments which says hey run

00:13:41,600 --> 00:13:46,000
this container

00:13:42,560 --> 00:13:46,480
uh run this game server on a specific

00:13:46,000 --> 00:13:49,519
pod

00:13:46,480 --> 00:13:52,720
and make it ready so it's a very simple

00:13:49,519 --> 00:13:54,079
uh service now if you go ahead and look

00:13:52,720 --> 00:13:56,639
at

00:13:54,079 --> 00:13:57,680
parts again you'll see open arena

00:13:56,639 --> 00:14:03,839
running

00:13:57,680 --> 00:14:03,839
now let's do this

00:14:05,839 --> 00:14:15,120
this is where my open arena is running

00:14:10,079 --> 00:14:18,079
now so i just had open arena client

00:14:15,120 --> 00:14:20,639
installed and connected let's connect to

00:14:18,079 --> 00:14:20,639
the server

00:14:22,320 --> 00:14:25,920
it might be a small glitch but

00:14:27,760 --> 00:14:31,519
you see it's connecting to the same

00:14:29,040 --> 00:14:34,399
server which i have and

00:14:31,519 --> 00:14:34,399
my game started

00:14:43,199 --> 00:15:01,760
what's up

00:14:58,720 --> 00:15:01,760
let's exit the game

00:15:02,880 --> 00:15:08,240
so this game is connected or running on

00:15:06,160 --> 00:15:09,360
an open arena cluster which i already

00:15:08,240 --> 00:15:13,519
deployed

00:15:09,360 --> 00:15:17,120
on on on kubernetes on google cloud

00:15:13,519 --> 00:15:20,480
and uh you can see the whole setup

00:15:17,120 --> 00:15:23,440
launching here so if i delete the pod

00:15:20,480 --> 00:15:24,959
imagine if i wanted to delete the pod

00:15:23,440 --> 00:15:28,000
again

00:15:24,959 --> 00:15:30,320
let's get the parts and let's delete the

00:15:28,000 --> 00:15:30,320
pod

00:15:36,240 --> 00:15:41,839
and let's start connecting the game

00:15:38,839 --> 00:15:41,839
again

00:15:42,560 --> 00:15:46,160
you'll not be able to connect to the

00:15:43,920 --> 00:15:46,160
game

00:15:49,040 --> 00:15:57,839
you see that

00:15:55,040 --> 00:16:08,720
so what did we do i'll just summarize uh

00:15:57,839 --> 00:16:23,839
the information again for you

00:16:08,720 --> 00:16:23,839
i'm sorry so consoles open

00:16:26,000 --> 00:16:31,279
did i lost you guys can i can someone

00:16:28,800 --> 00:16:31,279
say hi

00:16:33,759 --> 00:16:40,000
oh yeah what did we do

00:16:37,440 --> 00:16:42,000
uh just to summarize uh sorry is it

00:16:40,000 --> 00:16:45,360
possible for you to like maybe

00:16:42,000 --> 00:16:48,399
produce uh your resolution because

00:16:45,360 --> 00:16:50,959
there's some forks on livestream that's

00:16:48,399 --> 00:16:50,959
indeed i'm

00:16:53,279 --> 00:16:57,120
i'll expand that so maybe i'll uh zoom

00:16:55,680 --> 00:17:00,240
it again for you

00:16:57,120 --> 00:17:02,160
yeah thank you sure thanks uh so

00:17:00,240 --> 00:17:03,920
um you missed nothing by the way if you

00:17:02,160 --> 00:17:05,439
don't even see the text because i'll

00:17:03,920 --> 00:17:08,640
share this script uh

00:17:05,439 --> 00:17:10,959
later but to for your information

00:17:08,640 --> 00:17:12,160
what i did is i just deployed the game

00:17:10,959 --> 00:17:14,079
server like i did

00:17:12,160 --> 00:17:16,319
i just deployed i just did the same

00:17:14,079 --> 00:17:18,240
steps i containerized a game server

00:17:16,319 --> 00:17:20,240
which is an open arena game server

00:17:18,240 --> 00:17:22,319
i set up a kubernetes cluster i set up a

00:17:20,240 --> 00:17:24,319
scale manager i verified the setup

00:17:22,319 --> 00:17:26,160
i connected to a game server and started

00:17:24,319 --> 00:17:28,480
showing you the connection directly

00:17:26,160 --> 00:17:29,919
so it's a very simple task step by step

00:17:28,480 --> 00:17:31,679
this is how you can actually build a

00:17:29,919 --> 00:17:34,799
game server if you wanted to do

00:17:31,679 --> 00:17:36,080
of your own uh and and as i said the

00:17:34,799 --> 00:17:36,799
kubernetes cluster can be deployed

00:17:36,080 --> 00:17:38,640
anywhere

00:17:36,799 --> 00:17:40,400
i chose google cloud you can set up on

00:17:38,640 --> 00:17:41,760
your laptop it can be done

00:17:40,400 --> 00:17:43,919
now the challenge with this kind of

00:17:41,760 --> 00:17:45,280
approach is uh if you look at the whole

00:17:43,919 --> 00:17:46,000
architecture you're building everything

00:17:45,280 --> 00:17:48,320
of your own

00:17:46,000 --> 00:17:51,120
you're actually building your game

00:17:48,320 --> 00:17:52,880
machine cluster the server matchmaker

00:17:51,120 --> 00:17:54,559
the best part is you're getting all the

00:17:52,880 --> 00:17:56,320
benefits of kubernetes your parts are

00:17:54,559 --> 00:17:57,039
deployed it's scalable you can run

00:17:56,320 --> 00:17:59,280
anywhere

00:17:57,039 --> 00:18:01,120
it's a hybrid cloud now what if i tell

00:17:59,280 --> 00:18:01,919
you there is a better way of doing this

00:18:01,120 --> 00:18:04,880
though this is

00:18:01,919 --> 00:18:06,640
absolutely a perfect way of doing but

00:18:04,880 --> 00:18:08,320
there is another way of doing that so

00:18:06,640 --> 00:18:10,080
that's called agonist way agonist is an

00:18:08,320 --> 00:18:11,440
open source project let me show you what

00:18:10,080 --> 00:18:14,120
agnes looks like

00:18:11,440 --> 00:18:17,200
a goodness regardless

00:18:14,120 --> 00:18:17,200
[Music]

00:18:20,960 --> 00:18:24,960
so if you look at this is an open source

00:18:22,559 --> 00:18:26,720
project dedicated uh to run dedicated

00:18:24,960 --> 00:18:29,120
game servers on kubernetes it was

00:18:26,720 --> 00:18:31,360
it was done by ubisoft and google cloud

00:18:29,120 --> 00:18:32,960
uh uh you can you can find all the kinds

00:18:31,360 --> 00:18:34,799
of examples also all sort of

00:18:32,960 --> 00:18:36,000
documentation on it it's as good as a

00:18:34,799 --> 00:18:39,120
kubernetes project

00:18:36,000 --> 00:18:41,039
now what against does is against is a

00:18:39,120 --> 00:18:42,559
battery's included open source dedicated

00:18:41,039 --> 00:18:44,880
game server hosting

00:18:42,559 --> 00:18:45,600
and scaling project which runs on top of

00:18:44,880 --> 00:18:48,320
kubernetes

00:18:45,600 --> 00:18:48,720
so basically what again does is if you

00:18:48,320 --> 00:18:50,480
are

00:18:48,720 --> 00:18:51,919
familiar with kubernetes it takes the

00:18:50,480 --> 00:18:53,360
controller part of it

00:18:51,919 --> 00:18:56,080
creates a new controller for game

00:18:53,360 --> 00:18:58,559
servers which it extends kubernetes

00:18:56,080 --> 00:19:00,320
for gaming so you don't need to do all

00:18:58,559 --> 00:19:02,160
that cluster deployment it will do it i

00:19:00,320 --> 00:19:05,360
mean agonist can do it for you

00:19:02,160 --> 00:19:06,400
now how does the game server looks in a

00:19:05,360 --> 00:19:08,080
guinness world

00:19:06,400 --> 00:19:09,840
so the way games over looks in against

00:19:08,080 --> 00:19:10,960
world is obviously you take a game

00:19:09,840 --> 00:19:13,919
server application

00:19:10,960 --> 00:19:16,000
create attempt uh declaratively create a

00:19:13,919 --> 00:19:18,160
game server and then actually start

00:19:16,000 --> 00:19:19,919
send it to kubernetes api the benefits

00:19:18,160 --> 00:19:21,520
of that is again it can be deployed in

00:19:19,919 --> 00:19:23,200
hybrid environments physical missions

00:19:21,520 --> 00:19:24,320
can reduce the cost cloudbus can handle

00:19:23,200 --> 00:19:26,880
the capacity

00:19:24,320 --> 00:19:28,720
now comparing that with the traditional

00:19:26,880 --> 00:19:30,960
architecture traditional architecture

00:19:28,720 --> 00:19:31,840
send them request a matchmaker send a

00:19:30,960 --> 00:19:34,160
request to

00:19:31,840 --> 00:19:35,280
server manager server manager dedicates

00:19:34,160 --> 00:19:36,960
again server

00:19:35,280 --> 00:19:39,039
clients connect to the server you start

00:19:36,960 --> 00:19:41,679
playing that's what we saw in our demo

00:19:39,039 --> 00:19:43,520
now compare that with agonists the

00:19:41,679 --> 00:19:45,919
kavanaugh's looks like this

00:19:43,520 --> 00:19:47,520
everything now is part of kubernetes so

00:19:45,919 --> 00:19:48,000
if you look at back and forth there is

00:19:47,520 --> 00:19:49,840
nothing

00:19:48,000 --> 00:19:51,360
like the machine cluster is only in

00:19:49,840 --> 00:19:52,720
kubernetes everything is actually

00:19:51,360 --> 00:19:55,120
outside i mean

00:19:52,720 --> 00:19:56,240
our components within kubernetes now if

00:19:55,120 --> 00:19:59,120
you look at kubernetes

00:19:56,240 --> 00:19:59,679
against architecture now i'm going to

00:19:59,120 --> 00:20:01,280
have

00:19:59,679 --> 00:20:02,799
you know i still have custom matchmaker

00:20:01,280 --> 00:20:04,080
i'll talk about custom matchmaker in a

00:20:02,799 --> 00:20:04,799
while there is another open source

00:20:04,080 --> 00:20:07,520
project

00:20:04,799 --> 00:20:08,640
called open match which can do a better

00:20:07,520 --> 00:20:10,559
job of

00:20:08,640 --> 00:20:11,760
you know talking to agnes and does

00:20:10,559 --> 00:20:13,600
matchmaking for you

00:20:11,760 --> 00:20:15,280
but imagine you have a custom matchmaker

00:20:13,600 --> 00:20:17,280
again now

00:20:15,280 --> 00:20:18,880
client wanted to play a game like i

00:20:17,280 --> 00:20:20,080
wanted to play a game i send eric my

00:20:18,880 --> 00:20:20,960
mission sends a request to custom

00:20:20,080 --> 00:20:22,960
matchmaker

00:20:20,960 --> 00:20:24,960
abu bakr wanted to play a game he sends

00:20:22,960 --> 00:20:27,120
his request goes to custom matchmaker

00:20:24,960 --> 00:20:28,480
now the request the matchmaking is done

00:20:27,120 --> 00:20:30,159
there and

00:20:28,480 --> 00:20:32,799
it the request will be sent to

00:20:30,159 --> 00:20:34,480
kubernetes api kubernetes api will talks

00:20:32,799 --> 00:20:36,320
to against controller

00:20:34,480 --> 00:20:38,159
where address controller will talk to a

00:20:36,320 --> 00:20:38,559
fleet i'll talk about fleet in a short

00:20:38,159 --> 00:20:40,240
while

00:20:38,559 --> 00:20:42,880
but against controller will talk to your

00:20:40,240 --> 00:20:45,120
fleet takes a dedicated game server

00:20:42,880 --> 00:20:46,640
allocates a dedicated game summer for us

00:20:45,120 --> 00:20:48,480
send the request back to custom

00:20:46,640 --> 00:20:50,000
matchmaker will custom matchmakers send

00:20:48,480 --> 00:20:51,440
that information to the clients

00:20:50,000 --> 00:20:53,200
and the clients connected to game

00:20:51,440 --> 00:20:55,360
connect to game server

00:20:53,200 --> 00:20:57,360
same process traditional architecture in

00:20:55,360 --> 00:20:58,880
an agonist way everything is kubernetes

00:20:57,360 --> 00:21:02,080
now how you deploy

00:20:58,880 --> 00:21:04,960
uh you know kubernetes i mean uh

00:21:02,080 --> 00:21:06,720
a game in agonist is very simple by the

00:21:04,960 --> 00:21:07,440
way before we go how we can deploy

00:21:06,720 --> 00:21:09,120
against

00:21:07,440 --> 00:21:11,120
has sdk integrations in different

00:21:09,120 --> 00:21:12,960
languages have different functionalities

00:21:11,120 --> 00:21:14,559
the reason why you need this kind of sdk

00:21:12,960 --> 00:21:15,360
functionality is if you are if your game

00:21:14,559 --> 00:21:17,520
server

00:21:15,360 --> 00:21:18,880
wanted to talk to again us wanted to

00:21:17,520 --> 00:21:21,760
integrate to against

00:21:18,880 --> 00:21:23,200
to do a lot of activities um sdks really

00:21:21,760 --> 00:21:23,600
helped so you can actually build your

00:21:23,200 --> 00:21:25,280
own

00:21:23,600 --> 00:21:27,120
integrate your own custom game server

00:21:25,280 --> 00:21:29,520
with economist start playing that

00:21:27,120 --> 00:21:31,360
so it kind of gives you it takes away

00:21:29,520 --> 00:21:32,400
the problem of you managing the entire

00:21:31,360 --> 00:21:34,320
cluster agnes

00:21:32,400 --> 00:21:36,159
does that for you your game server

00:21:34,320 --> 00:21:38,400
actually can talk to agnes can do a lot

00:21:36,159 --> 00:21:42,000
of functionality using sdks

00:21:38,400 --> 00:21:43,760
now it works across cloud providers

00:21:42,000 --> 00:21:45,120
uh it does auto scaling it's auto

00:21:43,760 --> 00:21:46,960
scaling is very easy

00:21:45,120 --> 00:21:48,480
it has local tool deployments and you'll

00:21:46,960 --> 00:21:50,320
have you'll have a map dashboard and

00:21:48,480 --> 00:21:52,480
metrics for uh for agnes

00:21:50,320 --> 00:21:53,360
now this is how it's typical game server

00:21:52,480 --> 00:21:56,400
deployment

00:21:53,360 --> 00:22:00,000
uh declaration looks like

00:21:56,400 --> 00:22:01,200
so sonic uh let's take a first person

00:22:00,000 --> 00:22:03,919
shooter fbs game

00:22:01,200 --> 00:22:06,480
uh called zanatec and if you wanted to

00:22:03,919 --> 00:22:10,400
dedicate or deploy a game server

00:22:06,480 --> 00:22:12,720
you can now deploy a game server using

00:22:10,400 --> 00:22:14,000
same as what kubernetes does you can

00:22:12,720 --> 00:22:17,120
have a game server

00:22:14,000 --> 00:22:19,039
kind and you can specify the ports where

00:22:17,120 --> 00:22:20,159
the name obviously and you can specify

00:22:19,039 --> 00:22:22,240
the ports where

00:22:20,159 --> 00:22:24,960
the game server will actually open and

00:22:22,240 --> 00:22:26,960
run and the template of image of the

00:22:24,960 --> 00:22:29,039
zonatic example i mean zonatic game

00:22:26,960 --> 00:22:29,760
server which you wanted to containerize

00:22:29,039 --> 00:22:32,320
and deploy

00:22:29,760 --> 00:22:33,679
so previously if you look at the script

00:22:32,320 --> 00:22:36,159
which i did

00:22:33,679 --> 00:22:38,159
you do a lot of stuff for actually

00:22:36,159 --> 00:22:39,840
deploying containerizing deploying that

00:22:38,159 --> 00:22:40,480
managing that and all that stuff now

00:22:39,840 --> 00:22:42,960
nothing

00:22:40,480 --> 00:22:44,400
you just say i want a game server like

00:22:42,960 --> 00:22:47,200
how you wanted a pod

00:22:44,400 --> 00:22:48,480
you can say i want a kind of game server

00:22:47,200 --> 00:22:51,840
and this is my container

00:22:48,480 --> 00:22:52,400
this is my port and and against will be

00:22:51,840 --> 00:22:54,320
able to

00:22:52,400 --> 00:22:55,600
deploy that for you so game server

00:22:54,320 --> 00:22:57,440
deployment is easy now

00:22:55,600 --> 00:22:59,919
you want a fleet of game servers you

00:22:57,440 --> 00:23:01,840
need multiple game servers not just one

00:22:59,919 --> 00:23:03,840
now you have another template called

00:23:01,840 --> 00:23:06,480
like another declarative way of

00:23:03,840 --> 00:23:08,159
creating fleet so fleet is more like

00:23:06,480 --> 00:23:10,480
multiple game servers

00:23:08,159 --> 00:23:13,200
same as how you look at deployment in

00:23:10,480 --> 00:23:15,200
kubernetes fleet has multiple replicas

00:23:13,200 --> 00:23:17,440
have a template where you can specify

00:23:15,200 --> 00:23:20,400
the ports and the template for image

00:23:17,440 --> 00:23:20,880
which will run the fleet for you so

00:23:20,400 --> 00:23:22,480
things

00:23:20,880 --> 00:23:24,240
boil down to very simple now the

00:23:22,480 --> 00:23:26,640
controller will be running that

00:23:24,240 --> 00:23:28,640
running fleet running game server for

00:23:26,640 --> 00:23:29,360
you and the last one is game server

00:23:28,640 --> 00:23:31,679
allocation

00:23:29,360 --> 00:23:34,240
now you have a fleet of game servers

00:23:31,679 --> 00:23:35,679
kubernetes api wanted to delete allocate

00:23:34,240 --> 00:23:38,080
a game server for you

00:23:35,679 --> 00:23:39,919
and send the request back to matchmaker

00:23:38,080 --> 00:23:42,000
based on whether the game server is

00:23:39,919 --> 00:23:44,080
available for connection or not you

00:23:42,000 --> 00:23:46,000
don't want to delete a game server which

00:23:44,080 --> 00:23:48,640
is which in which players are running

00:23:46,000 --> 00:23:50,159
so these kind of requests are done using

00:23:48,640 --> 00:23:51,760
game server allocation

00:23:50,159 --> 00:23:54,400
so game server location is another

00:23:51,760 --> 00:23:56,960
request which you can actually send

00:23:54,400 --> 00:23:57,679
where you will be matching with the name

00:23:56,960 --> 00:24:00,960
the fleet

00:23:57,679 --> 00:24:02,720
within the fleet help me with a cluster

00:24:00,960 --> 00:24:05,120
image called zonatic

00:24:02,720 --> 00:24:06,720
you will be able to get a request a game

00:24:05,120 --> 00:24:09,760
server back for you

00:24:06,720 --> 00:24:12,799
so putting this together it's uh

00:24:09,760 --> 00:24:13,760
uh the biggest difference what you have

00:24:12,799 --> 00:24:15,520
seen from

00:24:13,760 --> 00:24:16,960
traditional way of deploying is you

00:24:15,520 --> 00:24:17,679
don't need to do everything of your own

00:24:16,960 --> 00:24:18,880
kubernetes

00:24:17,679 --> 00:24:21,679
you're extending kubernetes

00:24:18,880 --> 00:24:24,320
functionality to build something called

00:24:21,679 --> 00:24:24,880
uh against which is a cluster which is

00:24:24,320 --> 00:24:26,720
again

00:24:24,880 --> 00:24:28,480
uh having a controller of its own which

00:24:26,720 --> 00:24:29,200
will do the job for you of creating a

00:24:28,480 --> 00:24:32,559
fleet

00:24:29,200 --> 00:24:34,159
creating uh uh creating a game server

00:24:32,559 --> 00:24:36,720
creating a fleet and then actually

00:24:34,159 --> 00:24:37,840
doing multiple game server allocations

00:24:36,720 --> 00:24:40,240
and then give you the back

00:24:37,840 --> 00:24:41,600
first again so everything is now handled

00:24:40,240 --> 00:24:42,480
within kubernetes instead of you

00:24:41,600 --> 00:24:45,039
managing it

00:24:42,480 --> 00:24:47,440
off your own so it just makes the back

00:24:45,039 --> 00:24:50,559
end development so so so easy

00:24:47,440 --> 00:24:53,360
now combining this with

00:24:50,559 --> 00:24:53,760
something called open match will give

00:24:53,360 --> 00:24:55,760
you

00:24:53,760 --> 00:24:56,880
much more advanced features so open

00:24:55,760 --> 00:24:59,120
match you can write

00:24:56,880 --> 00:25:00,320
custom logic within your console custom

00:24:59,120 --> 00:25:02,880
logic to

00:25:00,320 --> 00:25:04,400
create or find compatible players uh

00:25:02,880 --> 00:25:08,400
items with open match

00:25:04,400 --> 00:25:10,080
running together uh can actually build

00:25:08,400 --> 00:25:12,080
you can build a better game server

00:25:10,080 --> 00:25:15,520
within very short period of time

00:25:12,080 --> 00:25:16,720
now to summarize obviously the request

00:25:15,520 --> 00:25:18,799
comes to open match

00:25:16,720 --> 00:25:20,320
you can write custom match logic with an

00:25:18,799 --> 00:25:22,400
open match talks to

00:25:20,320 --> 00:25:23,360
kubernetes kubernetes talks to against

00:25:22,400 --> 00:25:25,360
controller

00:25:23,360 --> 00:25:27,360
uh antagonist controller finds a

00:25:25,360 --> 00:25:28,880
dedicated game server within the fleet

00:25:27,360 --> 00:25:30,720
takes the game servers and the requests

00:25:28,880 --> 00:25:32,640
back to controllers where the people

00:25:30,720 --> 00:25:34,799
uh or the clients get connected now let

00:25:32,640 --> 00:25:36,400
me show you again a script again so let

00:25:34,799 --> 00:25:37,679
me show you i guess before we go to

00:25:36,400 --> 00:25:41,279
agnes script

00:25:37,679 --> 00:25:42,159
um here is what how you can deploy that

00:25:41,279 --> 00:25:44,960
in again so

00:25:42,159 --> 00:25:45,840
i have shown you a big script for gaming

00:25:44,960 --> 00:25:48,240
on the hardware

00:25:45,840 --> 00:25:49,360
so again a script is very simple create

00:25:48,240 --> 00:25:51,760
a cluster

00:25:49,360 --> 00:25:53,039
and uh you know call the cluster give a

00:25:51,760 --> 00:25:56,159
cluster a name

00:25:53,039 --> 00:25:59,279
and this is uh let me

00:25:56,159 --> 00:26:03,520
quickly run that for you i know we are

00:25:59,279 --> 00:26:03,520
running out of time but let me show you

00:26:03,760 --> 00:26:07,840
a demo quickly so what we what we are

00:26:06,159 --> 00:26:08,400
doing is i just created a kubernetes

00:26:07,840 --> 00:26:11,039
cluster

00:26:08,400 --> 00:26:12,000
restore and deployed uh installed agnes

00:26:11,039 --> 00:26:14,320
onto it

00:26:12,000 --> 00:26:16,400
and then deployed again that's it so

00:26:14,320 --> 00:26:18,000
three-step process very very simple

00:26:16,400 --> 00:26:19,840
rest of everything is handled by the

00:26:18,000 --> 00:26:20,559
scaling the deployment of a game server

00:26:19,840 --> 00:26:22,400
everything is

00:26:20,559 --> 00:26:24,080
the packaging of solution and then

00:26:22,400 --> 00:26:24,799
deploying that everything is handled by

00:26:24,080 --> 00:26:26,720
agnes

00:26:24,799 --> 00:26:28,240
so you don't need to do a lot of hard

00:26:26,720 --> 00:26:31,440
lifting on your part

00:26:28,240 --> 00:26:35,039
so i already created a cluster uh

00:26:31,440 --> 00:26:35,039
um if you look at the

00:26:35,360 --> 00:26:42,080
sorry i already created a cluster

00:26:39,600 --> 00:26:44,960
called against demo cluster i'm just

00:26:42,080 --> 00:26:47,919
reusing the same

00:26:44,960 --> 00:26:47,919
for this demo

00:26:50,799 --> 00:26:54,720
and let me create a firewall i mean this

00:26:53,120 --> 00:26:57,760
is a tricky part because

00:26:54,720 --> 00:26:58,480
obviously i need to uh dedicate uh open

00:26:57,760 --> 00:27:06,000
up a port

00:26:58,480 --> 00:27:11,039
with a firewall

00:27:06,000 --> 00:27:14,000
and then deploy

00:27:11,039 --> 00:27:14,000
agnes into it

00:27:19,600 --> 00:27:23,279
okay now let me go to

00:27:23,679 --> 00:27:30,960
view engine so this is a simple game um

00:27:27,279 --> 00:27:33,039
what it is doing is i i'm gonna send a

00:27:30,960 --> 00:27:35,039
whatever i type it will send me back the

00:27:33,039 --> 00:27:37,200
request so it's a simple server

00:27:35,039 --> 00:27:38,240
game server running on kubernetes

00:27:37,200 --> 00:27:41,279
cluster use

00:27:38,240 --> 00:27:42,960
on against what which i created so let

00:27:41,279 --> 00:27:46,320
me open a virtual machine

00:27:42,960 --> 00:27:48,720
and then send a request to this terminal

00:27:46,320 --> 00:27:51,120
and see what it does

00:27:48,720 --> 00:27:52,480
uh i have five more minutes just give me

00:27:51,120 --> 00:28:03,840
a moment i just wanted to show you this

00:27:52,480 --> 00:28:03,840
demand we can close this

00:28:07,360 --> 00:28:09,679
sorry

00:28:15,120 --> 00:28:18,559
so meanwhile if you have any questions

00:28:16,799 --> 00:28:20,720
maybe i'll start answering them

00:28:18,559 --> 00:28:31,679
and then i can show you the demo before

00:28:20,720 --> 00:28:34,320
it loads

00:28:31,679 --> 00:28:34,320
any questions

00:28:37,840 --> 00:28:41,120
you don't have any questions from the

00:28:39,840 --> 00:28:43,039
audience yet

00:28:41,120 --> 00:28:45,039
you can probably complete what you want

00:28:43,039 --> 00:28:47,120
to do before

00:28:45,039 --> 00:28:49,039
i think i have a particular question i

00:28:47,120 --> 00:28:52,399
need to ask

00:28:49,039 --> 00:28:56,399
i'm sorry you have yeah

00:28:52,399 --> 00:28:56,399
you can complete the rest of the game

00:28:56,840 --> 00:28:59,840
first

00:29:01,279 --> 00:29:08,159
so this is what we did uh i deployed a

00:29:04,640 --> 00:29:11,360
a service now let's open

00:29:08,159 --> 00:29:27,840
a virtual machine and start pinging the

00:29:11,360 --> 00:29:27,840
cluster and see what it does

00:29:39,440 --> 00:29:44,640
okay and uh this is

00:29:42,559 --> 00:29:47,279
where we are this is where i always pray

00:29:44,640 --> 00:29:49,520
to god and see whether for works or not

00:29:47,279 --> 00:29:50,720
first demo works perfectly now let's get

00:29:49,520 --> 00:29:52,240
the game server

00:29:50,720 --> 00:29:54,080
this is the ip address on the board

00:29:52,240 --> 00:29:58,000
which i need to get connected to

00:29:54,080 --> 00:30:00,799
and let's uh call this nc

00:29:58,000 --> 00:30:00,799
typhon view

00:30:01,010 --> 00:30:09,840
[Music]

00:30:02,559 --> 00:30:09,840
port and

00:30:10,159 --> 00:30:14,480
so i'm actually bringing the game server

00:30:12,240 --> 00:30:17,279
i'm actually deploying uh uh

00:30:14,480 --> 00:30:22,640
so if you observe this um let me zoom it

00:30:17,279 --> 00:30:25,440
a little

00:30:22,640 --> 00:30:26,399
so if you observe now i can say cube get

00:30:25,440 --> 00:30:28,960
cube ctl gets

00:30:26,399 --> 00:30:29,919
game servers game server is another uh

00:30:28,960 --> 00:30:32,080
declarative

00:30:29,919 --> 00:30:33,520
uh when if i install logins you will get

00:30:32,080 --> 00:30:36,880
game servers as

00:30:33,520 --> 00:30:37,440
another uh type actually so i'm saying

00:30:36,880 --> 00:30:41,440
hello

00:30:37,440 --> 00:30:45,039
uh world uh you know creators

00:30:41,440 --> 00:30:46,960
community so you can see

00:30:45,039 --> 00:30:48,720
that i'm actually playing with i mean

00:30:46,960 --> 00:30:50,799
i'm able to ping

00:30:48,720 --> 00:30:52,480
the game server on a udp report and then

00:30:50,799 --> 00:30:54,320
get the request so if i wanted to shut

00:30:52,480 --> 00:30:55,360
down the game server i can do that i can

00:30:54,320 --> 00:30:57,600
say exit

00:30:55,360 --> 00:30:59,760
and if you see get game servers you'll

00:30:57,600 --> 00:31:01,440
be seeing it is getting shut down

00:30:59,760 --> 00:31:03,120
so essentially what we did is i've

00:31:01,440 --> 00:31:04,799
deployed a game server i installed

00:31:03,120 --> 00:31:06,799
against i deployed a game server on top

00:31:04,799 --> 00:31:09,600
of it i connected to the game server

00:31:06,799 --> 00:31:10,320
and then started actually uh playing

00:31:09,600 --> 00:31:13,200
with that

00:31:10,320 --> 00:31:14,320
from another virtual machine so to

00:31:13,200 --> 00:31:18,320
summarize

00:31:14,320 --> 00:31:20,480
uh the the

00:31:18,320 --> 00:31:21,919
kubernetes agonist way of doing this

00:31:20,480 --> 00:31:24,000
again clients requests and

00:31:21,919 --> 00:31:25,840
uh agnes will do the fleet management

00:31:24,000 --> 00:31:29,039
dedicate the game server back to it

00:31:25,840 --> 00:31:32,159
so this is what uh the two ways of like

00:31:29,039 --> 00:31:33,519
if we go back to our agenda what we

00:31:32,159 --> 00:31:36,000
discussed so far is um

00:31:33,519 --> 00:31:36,559
to summarize i explained you the game

00:31:36,000 --> 00:31:38,320
server

00:31:36,559 --> 00:31:40,320
then i explained you how you can build

00:31:38,320 --> 00:31:44,000
the game from scratch

00:31:40,320 --> 00:31:46,000
by creating multiple services uh like

00:31:44,000 --> 00:31:48,080
you know by containerizing game server

00:31:46,000 --> 00:31:49,760
and then deploying on kubernetes cluster

00:31:48,080 --> 00:31:51,919
then i showed you the difference between

00:31:49,760 --> 00:31:52,480
that and against agnes is an open source

00:31:51,919 --> 00:31:54,480
project

00:31:52,480 --> 00:31:56,399
and how it is differentiates how it

00:31:54,480 --> 00:31:57,840
extends kubernetes api to give you much

00:31:56,399 --> 00:32:00,000
more functionality

00:31:57,840 --> 00:32:00,880
and how that how there is an sdk

00:32:00,000 --> 00:32:02,880
functional uh

00:32:00,880 --> 00:32:04,240
sdk integration where your game servers

00:32:02,880 --> 00:32:05,919
can work with economist

00:32:04,240 --> 00:32:07,519
and then explain you multiple

00:32:05,919 --> 00:32:09,519
terminologies and agonists

00:32:07,519 --> 00:32:10,720
uh a lot there are a lot of examples for

00:32:09,519 --> 00:32:13,360
against you can build

00:32:10,720 --> 00:32:14,000
you can start playing a lot of games by

00:32:13,360 --> 00:32:16,640
deploying

00:32:14,000 --> 00:32:17,519
that uh there is you can play zonatix uh

00:32:16,640 --> 00:32:20,320
game

00:32:17,519 --> 00:32:22,080
uh on against very short time all the

00:32:20,320 --> 00:32:24,960
examples are there in github

00:32:22,080 --> 00:32:25,519
and uh and you can you can find more

00:32:24,960 --> 00:32:28,640
information

00:32:25,519 --> 00:32:31,600
at agonist.dev and if you wanted to and

00:32:28,640 --> 00:32:33,440
i can actually share the script for uh

00:32:31,600 --> 00:32:34,960
deploying games over without diagonals

00:32:33,440 --> 00:32:36,240
also and you can compare and contrast

00:32:34,960 --> 00:32:37,360
these two and understand how the game

00:32:36,240 --> 00:32:40,000
server works

00:32:37,360 --> 00:32:40,799
so this is i'll stop here on right out

00:32:40,000 --> 00:32:42,640
of time

00:32:40,799 --> 00:32:44,320
but uh over to you if you have any

00:32:42,640 --> 00:32:47,519
questions or else uh this is

00:32:44,320 --> 00:32:50,960
this is it yeah

00:32:47,519 --> 00:32:52,799
that's awesome um i think

00:32:50,960 --> 00:32:53,560
what we'll be looking forward to is

00:32:52,799 --> 00:32:55,200
sharing the

00:32:53,560 --> 00:32:58,240
[Music]

00:32:55,200 --> 00:33:00,880
scripts and the your slides so we can

00:32:58,240 --> 00:33:03,440
share to the community we'll send it to

00:33:00,880 --> 00:33:04,480
everyone that has vp and also when we

00:33:03,440 --> 00:33:07,430
are uploading

00:33:04,480 --> 00:33:08,640
your video online we also share the

00:33:07,430 --> 00:33:10,559
[Music]

00:33:08,640 --> 00:33:12,880
uh the scripts and the facts that you

00:33:10,559 --> 00:33:15,279
shared thank you very much for your time

00:33:12,880 --> 00:33:18,120
and uh it's been awesome having you

00:33:15,279 --> 00:33:21,120
thanks thanks everyone thanks for your

00:33:18,120 --> 00:33:21,120

YouTube URL: https://www.youtube.com/watch?v=lCUs89nAZZA


