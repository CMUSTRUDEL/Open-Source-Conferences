Title: Automating Chaos with LitmusChaos to ensure Kubernetes Application Resiliency
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	As resilience use-cases proliferate, Chaos Engineering has become a compelling practice for enhancing your application resilience in production. If you’ve ever gone through the pain and anxiety of responding to an unexpected failure in your production system, then Chaos Engineering is the right fit for you.

Whether you want to run chaos manually or through CI/CD! Litmus brings together configurable environments to trigger chaos experiments automatically with the change in application states. Chaos on the Edge with Litmus brings together thought leaders, technologies, and customers across the entire Kubernetes community to share their knowledge and insight. If Chaos Engineering is on your radar, this is a talk you won’t want to miss!
Captions: 
	00:00:00,880 --> 00:00:04,240
hola namaste and a very warm welcome to

00:00:03,120 --> 00:00:06,240
this talk

00:00:04,240 --> 00:00:08,960
automating chaos with litmus chaos to

00:00:06,240 --> 00:00:11,040
ensure kubernetes application resiliency

00:00:08,960 --> 00:00:12,240
first things first i would like to thank

00:00:11,040 --> 00:00:15,679
the organizers for

00:00:12,240 --> 00:00:17,440
uh organizing this amazing kcd africa

00:00:15,679 --> 00:00:19,199
edition and i would also like to thank

00:00:17,440 --> 00:00:20,400
all the viewers and all the participants

00:00:19,199 --> 00:00:22,640
and all the speakers

00:00:20,400 --> 00:00:23,600
who have ended up making this conference

00:00:22,640 --> 00:00:25,840
a success

00:00:23,600 --> 00:00:27,680
and i look forward to many more editions

00:00:25,840 --> 00:00:30,640
of kcd africa

00:00:27,680 --> 00:00:32,000
moving on introducing myself my name is

00:00:30,640 --> 00:00:33,040
prithvi raj and i'm based out of

00:00:32,000 --> 00:00:34,880
bhubaneshwar

00:00:33,040 --> 00:00:36,559
uh odisha india india is going through a

00:00:34,880 --> 00:00:38,079
very tough time due to the covet 19

00:00:36,559 --> 00:00:40,079
crisis and i hope

00:00:38,079 --> 00:00:41,600
everyone is praying for india and we

00:00:40,079 --> 00:00:43,040
pray for the same that we get out of

00:00:41,600 --> 00:00:45,120
this condition very soon

00:00:43,040 --> 00:00:47,120
i've been uh i work at chaos native as a

00:00:45,120 --> 00:00:48,640
community manager for litmus chaos and

00:00:47,120 --> 00:00:49,280
since one year i am working with litmus

00:00:48,640 --> 00:00:51,440
kiosks

00:00:49,280 --> 00:00:53,440
i joined my data back in 2020 and then

00:00:51,440 --> 00:00:55,920
chaos net focusing on chaos engineering

00:00:53,440 --> 00:00:56,879
itself i also am a co-organizer at chaos

00:00:55,920 --> 00:00:58,800
carnival

00:00:56,879 --> 00:01:00,480
it's a global conference which hosted

00:00:58,800 --> 00:01:01,359
its inaugural addition this february and

00:01:00,480 --> 00:01:02,879
i organize

00:01:01,359 --> 00:01:05,119
kubernetes key orchestrating meetups

00:01:02,879 --> 00:01:06,479
part of the cncf community every

00:01:05,119 --> 00:01:08,400
last saturday of the month so you can

00:01:06,479 --> 00:01:09,200
join in and talk about litmus or kiosk

00:01:08,400 --> 00:01:10,960
engineering

00:01:09,200 --> 00:01:12,479
on kubernetes and we can learn a lot

00:01:10,960 --> 00:01:15,119
together my

00:01:12,479 --> 00:01:17,200
co-speaker is cyan model who i mean

00:01:15,119 --> 00:01:19,040
there's a lot to talk about him but he

00:01:17,200 --> 00:01:21,119
majorly works as a software development

00:01:19,040 --> 00:01:23,119
engineer as well as a chaos engineering

00:01:21,119 --> 00:01:24,640
a chaos engineer point a new term which

00:01:23,119 --> 00:01:26,080
has been coined after chaos engineering

00:01:24,640 --> 00:01:28,080
came into play and

00:01:26,080 --> 00:01:29,439
he's gonna talk more about the technical

00:01:28,080 --> 00:01:30,240
aspects and i'll start with the

00:01:29,439 --> 00:01:32,000
introduction

00:01:30,240 --> 00:01:33,520
so moving on to the agenda that we have

00:01:32,000 --> 00:01:35,119
in hand first things first we'll be

00:01:33,520 --> 00:01:36,240
talking about chaos what is kiosk

00:01:35,119 --> 00:01:38,640
engineering and

00:01:36,240 --> 00:01:40,479
a lot of people might be uh knowing

00:01:38,640 --> 00:01:41,520
about the term knowing what chaos tests

00:01:40,479 --> 00:01:43,280
are exactly

00:01:41,520 --> 00:01:44,640
but it's also for the ones who do not

00:01:43,280 --> 00:01:46,000
know about it and

00:01:44,640 --> 00:01:47,520
obviously then we'll be moving on to

00:01:46,000 --> 00:01:48,720
okay us using the cloud native of

00:01:47,520 --> 00:01:50,799
kubernetes systems

00:01:48,720 --> 00:01:52,159
what exactly is litmus chaos and further

00:01:50,799 --> 00:01:52,640
sign we'll be taking forward talking

00:01:52,159 --> 00:01:54,880
about the

00:01:52,640 --> 00:01:56,880
crds and how you can install litmus and

00:01:54,880 --> 00:01:58,479
you'll be giving a technical demo and

00:01:56,880 --> 00:02:00,000
showing you dashboards and how you can

00:01:58,479 --> 00:02:01,680
deploy your kiosks experiment to your

00:02:00,000 --> 00:02:03,439
first year's test

00:02:01,680 --> 00:02:06,159
so first first things first i would like

00:02:03,439 --> 00:02:07,680
to thank the cncf for obviously

00:02:06,159 --> 00:02:09,759
thinking about chaos engineering as one

00:02:07,680 --> 00:02:10,479
of the technologies to look up to one of

00:02:09,759 --> 00:02:13,360
the

00:02:10,479 --> 00:02:14,560
most sought after technologies in 2021

00:02:13,360 --> 00:02:16,400
and beyond and i think

00:02:14,560 --> 00:02:18,160
you all might agree that chaos testing

00:02:16,400 --> 00:02:20,239
is coming up in a grand way so what

00:02:18,160 --> 00:02:22,400
exactly is chaos testing

00:02:20,239 --> 00:02:23,920
before that i'll start with an example

00:02:22,400 --> 00:02:27,200
obviously as you can see

00:02:23,920 --> 00:02:29,200
my my ppt or my page shows slide shows

00:02:27,200 --> 00:02:31,680
that down times are expensive so

00:02:29,200 --> 00:02:32,959
i'll give you a short example of of how

00:02:31,680 --> 00:02:34,800
you can think about it

00:02:32,959 --> 00:02:36,319
let's say in india there are the

00:02:34,800 --> 00:02:38,319
e-commerce market is developing in a

00:02:36,319 --> 00:02:39,280
very huge way and amazon and flipkart

00:02:38,319 --> 00:02:42,000
are two major

00:02:39,280 --> 00:02:43,040
tycoons of of this business and usually

00:02:42,000 --> 00:02:45,760
they they host

00:02:43,040 --> 00:02:47,680
yearly or annual sales which are coined

00:02:45,760 --> 00:02:49,760
as big billion days or

00:02:47,680 --> 00:02:51,360
let's say amazon great indian festival

00:02:49,760 --> 00:02:53,280
and these sales

00:02:51,360 --> 00:02:54,959
see a lot of people jumping in to grab

00:02:53,280 --> 00:02:56,080
the offers a lot of there's a spike in

00:02:54,959 --> 00:02:58,800
the number of users

00:02:56,080 --> 00:03:00,560
and usually or you know sometimes it

00:02:58,800 --> 00:03:02,239
happens that due to the spike

00:03:00,560 --> 00:03:04,319
there's a condition which causes an

00:03:02,239 --> 00:03:06,640
outage which causes a downtime which

00:03:04,319 --> 00:03:08,239
leads to loss of millions and billions

00:03:06,640 --> 00:03:10,480
of rupees or

00:03:08,239 --> 00:03:12,480
dollars for these companies kiosk

00:03:10,480 --> 00:03:14,159
engineering is a term coined by netflix

00:03:12,480 --> 00:03:15,680
netflix coined this term and netflix

00:03:14,159 --> 00:03:18,800
started off chaos

00:03:15,680 --> 00:03:21,360
way back in 2011 and they started it

00:03:18,800 --> 00:03:22,400
to test their systems to check how does

00:03:21,360 --> 00:03:23,840
chaos function

00:03:22,400 --> 00:03:25,599
so basically chaos engineering is

00:03:23,840 --> 00:03:27,440
nothing but putting it or

00:03:25,599 --> 00:03:29,040
putting in or inducing a fault in the

00:03:27,440 --> 00:03:30,959
system to

00:03:29,040 --> 00:03:32,400
figure out how will the system actually

00:03:30,959 --> 00:03:33,120
react when there's an outage or when

00:03:32,400 --> 00:03:35,360
there is a

00:03:33,120 --> 00:03:37,040
downtime so basically predicting what

00:03:35,360 --> 00:03:38,720
will happen in the future beforehand so

00:03:37,040 --> 00:03:40,720
that that outage doesn't

00:03:38,720 --> 00:03:42,640
occur in future and doesn't occur when

00:03:40,720 --> 00:03:45,280
the system is in production

00:03:42,640 --> 00:03:46,720
so why why is chaos testing important or

00:03:45,280 --> 00:03:48,799
exactly

00:03:46,720 --> 00:03:49,840
why should you think about chaos because

00:03:48,799 --> 00:03:51,280
you need to test

00:03:49,840 --> 00:03:53,360
you know you shouldn't wait we believe

00:03:51,280 --> 00:03:55,120
in the chaos first principle that is

00:03:53,360 --> 00:03:56,640
why test your system when it already

00:03:55,120 --> 00:03:57,200
goes through an outage why i don't test

00:03:56,640 --> 00:03:59,519
it before

00:03:57,200 --> 00:04:01,599
and this also helps in activating the

00:03:59,519 --> 00:04:04,480
feedback loop in the devops system

00:04:01,599 --> 00:04:06,239
devops engineers and sres need to focus

00:04:04,480 --> 00:04:07,920
on chaos engineering so that

00:04:06,239 --> 00:04:09,760
they can go ahead with proactive testing

00:04:07,920 --> 00:04:11,360
in production staging in the ci cd

00:04:09,760 --> 00:04:12,799
anywhere and they can

00:04:11,360 --> 00:04:14,799
actually predict what can happen and

00:04:12,799 --> 00:04:17,759
save their systems from these outages

00:04:14,799 --> 00:04:19,359
so how is like what exactly is the state

00:04:17,759 --> 00:04:20,799
of kiosk engineering till now

00:04:19,359 --> 00:04:23,360
obviously there are standard practices a

00:04:20,799 --> 00:04:26,400
few companies big companies like

00:04:23,360 --> 00:04:28,320
amazon netflix flipkart i mean

00:04:26,400 --> 00:04:29,440
the apple google these companies have

00:04:28,320 --> 00:04:30,880
already started

00:04:29,440 --> 00:04:32,800
practicing chaos in some way or the

00:04:30,880 --> 00:04:33,840
other but this is limited to experts and

00:04:32,800 --> 00:04:35,840
enthusiasts those

00:04:33,840 --> 00:04:37,680
are already aware of what chaos is or

00:04:35,840 --> 00:04:38,960
those are already aware of what exactly

00:04:37,680 --> 00:04:41,280
chaos engineering does

00:04:38,960 --> 00:04:43,199
they are more into adoption and slowly

00:04:41,280 --> 00:04:46,080
people have started adopting although

00:04:43,199 --> 00:04:46,880
the the there's still time to it and

00:04:46,080 --> 00:04:48,880
obviously it's

00:04:46,880 --> 00:04:51,199
part of large deployments various

00:04:48,880 --> 00:04:53,199
companies have come out let's say ibm

00:04:51,199 --> 00:04:55,120
and maybe various folks are applying

00:04:53,199 --> 00:04:56,880
chaos in their large deployments but we

00:04:55,120 --> 00:04:58,479
believe that small deployments are

00:04:56,880 --> 00:05:00,479
you know individuals should also get

00:04:58,479 --> 00:05:01,919
started practicing chaos because as of

00:05:00,479 --> 00:05:03,680
now those have already burned their

00:05:01,919 --> 00:05:05,440
hands those who have already seen what

00:05:03,680 --> 00:05:06,960
how an outage occurs for them as a

00:05:05,440 --> 00:05:08,880
resolution is chaos engineering but a

00:05:06,960 --> 00:05:11,199
chaos engineering

00:05:08,880 --> 00:05:12,639
practice can be a resolution for each

00:05:11,199 --> 00:05:13,360
and every engineer or each and every

00:05:12,639 --> 00:05:16,160
company

00:05:13,360 --> 00:05:17,600
so moving on we can see kubernetes as we

00:05:16,160 --> 00:05:18,160
know we are talking about kubernetes

00:05:17,600 --> 00:05:19,919
here

00:05:18,160 --> 00:05:21,360
it's it's already crossed the chasm it

00:05:19,919 --> 00:05:23,120
has already reached the mainstream

00:05:21,360 --> 00:05:24,560
market and as you can see

00:05:23,120 --> 00:05:26,240
most of the people are majority of the

00:05:24,560 --> 00:05:26,960
people have adopted kubernetes in some

00:05:26,240 --> 00:05:28,160
way or the other

00:05:26,960 --> 00:05:30,479
to build their infrastructure or

00:05:28,160 --> 00:05:31,120
architecture but what about chaos

00:05:30,479 --> 00:05:33,120
engineering

00:05:31,120 --> 00:05:34,720
how is chaos engineering faring in the

00:05:33,120 --> 00:05:35,600
chasm we believe chaos engineering is

00:05:34,720 --> 00:05:37,199
yet to

00:05:35,600 --> 00:05:39,280
cross the chasm it's still in the early

00:05:37,199 --> 00:05:41,039
market and we are seeing you know early

00:05:39,280 --> 00:05:42,080
adopters there's early adoption but it's

00:05:41,039 --> 00:05:44,320
yet to see me

00:05:42,080 --> 00:05:45,199
go to the mainstream market in form of a

00:05:44,320 --> 00:05:46,960
huge

00:05:45,199 --> 00:05:49,360
business or in form of huge adoption

00:05:46,960 --> 00:05:51,919
there's still a lot to do and a lot to

00:05:49,360 --> 00:05:53,440
develop so that people can adopt chaos

00:05:51,919 --> 00:05:54,240
and there's there's a lot of fear in

00:05:53,440 --> 00:05:56,400
people's

00:05:54,240 --> 00:05:58,400
minds as well that should i adopt chaos

00:05:56,400 --> 00:06:00,240
undoubtedly you should go ahead adopting

00:05:58,400 --> 00:06:02,160
chaos engineering because testing for

00:06:00,240 --> 00:06:05,039
infrastructure and systems

00:06:02,160 --> 00:06:05,680
moving on how how is it typically done

00:06:05,039 --> 00:06:08,240
how is

00:06:05,680 --> 00:06:10,080
chaos engineering practice usually chaos

00:06:08,240 --> 00:06:11,520
is giving practice to game days and

00:06:10,080 --> 00:06:13,759
some of them have already integrated

00:06:11,520 --> 00:06:14,160
them in their ci series but as of now

00:06:13,759 --> 00:06:16,800
only

00:06:14,160 --> 00:06:17,360
sres are practicing chaos engineering

00:06:16,800 --> 00:06:18,880
here

00:06:17,360 --> 00:06:21,120
chaos engineering is practiced by

00:06:18,880 --> 00:06:22,160
basically q a engineers sres or devops

00:06:21,120 --> 00:06:23,680
engineers but

00:06:22,160 --> 00:06:25,280
most of the developers have still not

00:06:23,680 --> 00:06:26,880
started engaging in chaos engineering

00:06:25,280 --> 00:06:27,600
but we believe that every developer

00:06:26,880 --> 00:06:29,199
should

00:06:27,600 --> 00:06:30,800
try and practice cures in some way or

00:06:29,199 --> 00:06:31,440
the other if not today think about it

00:06:30,800 --> 00:06:32,960
tomorrow

00:06:31,440 --> 00:06:35,039
manual planning and execution is

00:06:32,960 --> 00:06:37,280
happening it's it's obviously necessary

00:06:35,039 --> 00:06:39,680
but preparing a roadmap is something we

00:06:37,280 --> 00:06:41,840
believe can help

00:06:39,680 --> 00:06:43,039
enterprises or help companies come

00:06:41,840 --> 00:06:44,960
forward adopting chaos

00:06:43,039 --> 00:06:46,639
observability is a very important aspect

00:06:44,960 --> 00:06:47,440
people need to think about monitoring

00:06:46,639 --> 00:06:49,840
these

00:06:47,440 --> 00:06:53,199
chaos tests and which is obviously not a

00:06:49,840 --> 00:06:55,039
commodity everyone needs to think about

00:06:53,199 --> 00:06:57,280
observing the chaos test so what is

00:06:55,039 --> 00:06:59,280
happening so typically as of now

00:06:57,280 --> 00:07:01,360
there's a long road ahead people need to

00:06:59,280 --> 00:07:02,800
start looking at what are the practices

00:07:01,360 --> 00:07:06,319
that they need to start

00:07:02,800 --> 00:07:07,599
uh to adopt chaos or to get started with

00:07:06,319 --> 00:07:09,360
your engineering because all in all

00:07:07,599 --> 00:07:11,840
eventually it's gonna increase your

00:07:09,360 --> 00:07:13,360
resilience increase your reliability

00:07:11,840 --> 00:07:15,120
so moving on we'll be talking about

00:07:13,360 --> 00:07:16,880
cloud native chaos engineering what is

00:07:15,120 --> 00:07:19,120
exactly cloud native chaos and

00:07:16,880 --> 00:07:20,720
how does kiosk engineering function in

00:07:19,120 --> 00:07:22,800
the kubernetes world obviously

00:07:20,720 --> 00:07:24,560
kubernetes is a very dynamic space and

00:07:22,800 --> 00:07:26,720
every uh now and then with

00:07:24,560 --> 00:07:28,560
such a huge amount of adoption and with

00:07:26,720 --> 00:07:30,240
highly dynamic applications being built

00:07:28,560 --> 00:07:31,759
there might be an outage or a fault

00:07:30,240 --> 00:07:33,680
here and there and there are security

00:07:31,759 --> 00:07:37,199
concerns or there might be concerns

00:07:33,680 --> 00:07:38,800
of testing amongst engineers and sres so

00:07:37,199 --> 00:07:40,880
how how does chaos engineering come into

00:07:38,800 --> 00:07:43,120
play on in the kubernetes

00:07:40,880 --> 00:07:44,560
way or in the community space obviously

00:07:43,120 --> 00:07:45,919
for example there might be an outage in

00:07:44,560 --> 00:07:48,000
a pod and a node so

00:07:45,919 --> 00:07:49,599
experiments like pod delete or no delete

00:07:48,000 --> 00:07:51,520
respectively come into play and

00:07:49,599 --> 00:07:52,720
help you understand and analyze how your

00:07:51,520 --> 00:07:55,120
system might behave there are

00:07:52,720 --> 00:07:56,240
a lot of experiments that can come up i

00:07:55,120 --> 00:07:59,520
i have heard about

00:07:56,240 --> 00:08:01,280
black hole experiments and unlimited

00:07:59,520 --> 00:08:03,280
experiments that that can be possible

00:08:01,280 --> 00:08:03,919
but what exactly is cloud native chaos

00:08:03,280 --> 00:08:05,599
engineering

00:08:03,919 --> 00:08:07,520
so the principles that we believe of

00:08:05,599 --> 00:08:09,280
cloud native kiosk obviously it needs to

00:08:07,520 --> 00:08:10,720
be open source open source is the future

00:08:09,280 --> 00:08:12,319
every other technology

00:08:10,720 --> 00:08:13,840
is coming out to be open so the cloud

00:08:12,319 --> 00:08:15,280
native world is

00:08:13,840 --> 00:08:16,720
obviously based on open source

00:08:15,280 --> 00:08:18,160
technologies which further leads to

00:08:16,720 --> 00:08:19,360
community collaboration it's very

00:08:18,160 --> 00:08:20,960
important

00:08:19,360 --> 00:08:22,879
for the community to come out and

00:08:20,960 --> 00:08:24,479
suggest changes or work together hand in

00:08:22,879 --> 00:08:25,840
hand suggesting

00:08:24,479 --> 00:08:27,759
what are the additions or what are the

00:08:25,840 --> 00:08:29,120
issues that can be created and how a

00:08:27,759 --> 00:08:31,759
project can develop

00:08:29,120 --> 00:08:32,479
obviously with with kiosk engineering

00:08:31,759 --> 00:08:35,120
having

00:08:32,479 --> 00:08:36,640
uh custom resources and all the ml files

00:08:35,120 --> 00:08:38,240
i think an open api and life cycle

00:08:36,640 --> 00:08:40,240
management is very important

00:08:38,240 --> 00:08:42,000
for chaos engineering to be cloud native

00:08:40,240 --> 00:08:43,839
and obviously scalability we do not talk

00:08:42,000 --> 00:08:45,839
about scalability but scalability is

00:08:43,839 --> 00:08:49,519
very important and that is why as

00:08:45,839 --> 00:08:50,800
kubernetes is being like the principle

00:08:49,519 --> 00:08:53,040
of kubernetes are being changed by

00:08:50,800 --> 00:08:54,800
github skilltops is very important for

00:08:53,040 --> 00:08:57,600
kiosk engineering to be adopted and for

00:08:54,800 --> 00:08:59,360
users to get a whole new experience and

00:08:57,600 --> 00:09:01,360
observability as you know as i mentioned

00:08:59,360 --> 00:09:04,880
monitoring is very important

00:09:01,360 --> 00:09:06,480
ex these experiments and how their

00:09:04,880 --> 00:09:08,399
function should be monitored so open

00:09:06,480 --> 00:09:11,040
observability helps users

00:09:08,399 --> 00:09:11,680
to monitor these experiments properly so

00:09:11,040 --> 00:09:13,600
moving on

00:09:11,680 --> 00:09:14,959
litmus as you know follows all these

00:09:13,600 --> 00:09:18,000
principles and i think is

00:09:14,959 --> 00:09:19,760
a cncf sandbox project having a pool of

00:09:18,000 --> 00:09:21,600
amazing experiments we will go to

00:09:19,760 --> 00:09:23,120
go back to the next slide and talk about

00:09:21,600 --> 00:09:25,600
it and

00:09:23,120 --> 00:09:27,519
they follow all these principles and it

00:09:25,600 --> 00:09:28,720
is built for modern chaos engineering it

00:09:27,519 --> 00:09:30,480
is

00:09:28,720 --> 00:09:32,080
coming up in such a way where chaos

00:09:30,480 --> 00:09:33,680
engineering the dynamism of chaos

00:09:32,080 --> 00:09:35,440
engineering will change and

00:09:33,680 --> 00:09:37,279
testing will will become feasible and

00:09:35,440 --> 00:09:39,120
easier for each and every

00:09:37,279 --> 00:09:40,640
engineer out there testing on their

00:09:39,120 --> 00:09:43,360
communities architectures

00:09:40,640 --> 00:09:44,320
so what exactly is nothing but an open

00:09:43,360 --> 00:09:45,920
source tool set

00:09:44,320 --> 00:09:47,440
practicing highly scalable kiosk

00:09:45,920 --> 00:09:48,399
engineering practices for sres

00:09:47,440 --> 00:09:50,480
developers

00:09:48,399 --> 00:09:52,320
kubernetes engineers software engineers

00:09:50,480 --> 00:09:54,080
who who want to practice

00:09:52,320 --> 00:09:55,839
chaos tests in somewhere and want to

00:09:54,080 --> 00:09:57,519
bring in the resiliency in some form

00:09:55,839 --> 00:09:59,279
to their communities applications as you

00:09:57,519 --> 00:10:01,040
can see the stats obviously stats do not

00:09:59,279 --> 00:10:05,040
define a lot but it has got

00:10:01,040 --> 00:10:05,519
a pool of contributors 1600 plus github

00:10:05,040 --> 00:10:07,920
stars

00:10:05,519 --> 00:10:08,800
we are talking about community here at

00:10:07,920 --> 00:10:11,920
the cncf

00:10:08,800 --> 00:10:13,680
uh kcd africa and community

00:10:11,920 --> 00:10:15,120
is what is what matters when i joined

00:10:13,680 --> 00:10:16,800
back last year this

00:10:15,120 --> 00:10:18,399
project just had 60 slack members and

00:10:16,800 --> 00:10:19,600
500 github stars but

00:10:18,399 --> 00:10:21,120
now you can see there's a pool of

00:10:19,600 --> 00:10:22,000
experiments the github stars are

00:10:21,120 --> 00:10:24,880
increasing

00:10:22,000 --> 00:10:26,240
and the project is seeing amazing amount

00:10:24,880 --> 00:10:26,880
of attraction in the community and we

00:10:26,240 --> 00:10:29,200
believe

00:10:26,880 --> 00:10:31,200
that in the upcoming years this chaos

00:10:29,200 --> 00:10:32,720
testing is going to be the go to

00:10:31,200 --> 00:10:34,720
project or go to technology to look

00:10:32,720 --> 00:10:35,920
forward to with this i would like to

00:10:34,720 --> 00:10:38,079
hand over to my

00:10:35,920 --> 00:10:39,440
co-speaker scion model who will be

00:10:38,079 --> 00:10:40,800
getting into the in depth of fitness

00:10:39,440 --> 00:10:41,680
chaos and kubernetes applications

00:10:40,800 --> 00:10:44,959
resiliency

00:10:41,680 --> 00:10:46,399
thank you folks thanks brittany for

00:10:44,959 --> 00:10:47,680
sharing about chaos engineering and

00:10:46,399 --> 00:10:49,839
litmus in general

00:10:47,680 --> 00:10:50,720
so i'm cheyenne i am a kiosk engineer at

00:10:49,839 --> 00:10:52,720
chaos native

00:10:50,720 --> 00:10:53,760
and i'm going to talk more about how you

00:10:52,720 --> 00:10:55,600
can use litmus

00:10:53,760 --> 00:10:56,880
to inject chaos for your particular use

00:10:55,600 --> 00:11:00,240
case for your enterprise

00:10:56,880 --> 00:11:03,120
needs so to start off with i am going to

00:11:00,240 --> 00:11:04,720
uh show you how you can install litmus

00:11:03,120 --> 00:11:06,720
so there are two ways you can do it

00:11:04,720 --> 00:11:07,760
either using helm or you can directly

00:11:06,720 --> 00:11:10,000
apply the manifest

00:11:07,760 --> 00:11:11,519
so if you visit the litmus docs beta dot

00:11:10,000 --> 00:11:13,519
netify app

00:11:11,519 --> 00:11:15,360
and you move over to this installation

00:11:13,519 --> 00:11:15,760
section and over the con over to control

00:11:15,360 --> 00:11:17,200
plane

00:11:15,760 --> 00:11:19,920
you should be able to see um

00:11:17,200 --> 00:11:22,720
installation using helm and using uh

00:11:19,920 --> 00:11:24,560
cubesat apply the manifest command so

00:11:22,720 --> 00:11:26,720
this is the 2.2.0

00:11:24,560 --> 00:11:28,320
manifest that is currently we have the

00:11:26,720 --> 00:11:30,880
current version we have

00:11:28,320 --> 00:11:32,880
you can use that version or you can go

00:11:30,880 --> 00:11:36,320
to the github repository which is litmus

00:11:32,880 --> 00:11:38,000
chaos litmus github.com

00:11:36,320 --> 00:11:40,480
and go to this folder called litmus

00:11:38,000 --> 00:11:42,480
portal once you are inside the folder

00:11:40,480 --> 00:11:43,440
uh scroll down to see the readme section

00:11:42,480 --> 00:11:44,560
and you should be able to see

00:11:43,440 --> 00:11:47,200
installation using

00:11:44,560 --> 00:11:48,399
uh k test manifest so you can either

00:11:47,200 --> 00:11:50,399
apply the master

00:11:48,399 --> 00:11:52,160
latest cluster scope manifest or the 2.0

00:11:50,399 --> 00:11:54,320
beta 4 manifest

00:11:52,160 --> 00:11:55,440
so i what i'm going to do is i'm going

00:11:54,320 --> 00:11:58,639
to use this

00:11:55,440 --> 00:12:01,519
master manifest for this demo

00:11:58,639 --> 00:12:03,360
and to apply it basically what i have is

00:12:01,519 --> 00:12:04,880
a mini cube running right now you can

00:12:03,360 --> 00:12:07,680
either use kind k3s

00:12:04,880 --> 00:12:08,880
or even do the same in your cloud

00:12:07,680 --> 00:12:10,399
provider

00:12:08,880 --> 00:12:12,639
so now that i already have mini cube

00:12:10,399 --> 00:12:16,240
running i just use this command

00:12:12,639 --> 00:12:17,680
to install litmus in my in my local

00:12:16,240 --> 00:12:20,320
cluster

00:12:17,680 --> 00:12:21,120
so while that is happening i would just

00:12:20,320 --> 00:12:25,839
uh

00:12:21,120 --> 00:12:25,839
watch the same

00:12:27,120 --> 00:12:30,560
in the litmus namespace so when i do it

00:12:29,440 --> 00:12:32,320
i should be able to see these three

00:12:30,560 --> 00:12:33,279
things now while that is happening i

00:12:32,320 --> 00:12:35,120
would want to

00:12:33,279 --> 00:12:39,519
come back to my slide and explain what

00:12:35,120 --> 00:12:41,279
exactly happens behind the hood

00:12:39,519 --> 00:12:42,720
so if you take a look at this diagram

00:12:41,279 --> 00:12:45,200
this is basically the

00:12:42,720 --> 00:12:46,079
crds that linmus leverages the three

00:12:45,200 --> 00:12:48,240
primary chaos

00:12:46,079 --> 00:12:50,000
crds we have is uh chaos experiment

00:12:48,240 --> 00:12:52,720
kiosk engine and class results

00:12:50,000 --> 00:12:54,240
so what we have here is uh chaos

00:12:52,720 --> 00:12:55,920
experiment comes first which has been

00:12:54,240 --> 00:12:57,600
fetched from chaos hub now what is chaos

00:12:55,920 --> 00:12:59,519
up we have a list of

00:12:57,600 --> 00:13:02,000
different experiments listed down in our

00:12:59,519 --> 00:13:04,000
hub which is hub.litmuscloser io

00:13:02,000 --> 00:13:05,760
if you visit this particular hub you

00:13:04,000 --> 00:13:07,440
would see a lot of public uh

00:13:05,760 --> 00:13:10,000
chaos experiments already up and running

00:13:07,440 --> 00:13:12,079
for you so you can pick any one of these

00:13:10,000 --> 00:13:13,519
experiments uh they are predefined and

00:13:12,079 --> 00:13:15,040
you can either

00:13:13,519 --> 00:13:16,720
build on top of it or you can just use

00:13:15,040 --> 00:13:17,600
this pretty fine ones now this is what

00:13:16,720 --> 00:13:19,360
chaos hub is

00:13:17,600 --> 00:13:21,519
you can pull this experiments and start

00:13:19,360 --> 00:13:24,320
uh you're injecting chaos directly with

00:13:21,519 --> 00:13:26,480
the predefined configurations so the

00:13:24,320 --> 00:13:28,160
chaos experiment.yaml is what pulls this

00:13:26,480 --> 00:13:30,000
particular chaos experiment so the kiosk

00:13:28,160 --> 00:13:30,800
experiment crd is basically a low level

00:13:30,000 --> 00:13:32,639
uh chaos

00:13:30,800 --> 00:13:34,720
uh your chaos experiment itself with the

00:13:32,639 --> 00:13:36,560
default tunables now chaos engine is

00:13:34,720 --> 00:13:37,760
what binds the application instance with

00:13:36,560 --> 00:13:39,279
this particular experiment

00:13:37,760 --> 00:13:41,120
a chaos engine is what would trigger

00:13:39,279 --> 00:13:41,760
your chaos injection in your particular

00:13:41,120 --> 00:13:43,440
application

00:13:41,760 --> 00:13:44,959
so chaos experiment is only installing

00:13:43,440 --> 00:13:46,639
the experiment not injecting it

00:13:44,959 --> 00:13:48,320
kiosk engine would bind your application

00:13:46,639 --> 00:13:48,959
instance with the experiment and inject

00:13:48,320 --> 00:13:51,600
it

00:13:48,959 --> 00:13:52,800
and uh the chaos result is what would

00:13:51,600 --> 00:13:54,800
store all the default

00:13:52,800 --> 00:13:56,320
parameters the status of your experiment

00:13:54,800 --> 00:13:58,079
and those things so it will

00:13:56,320 --> 00:13:59,519
save a word it will say if you have

00:13:58,079 --> 00:14:02,320
probes in your system

00:13:59,519 --> 00:14:04,000
it will it will save the status of your

00:14:02,320 --> 00:14:04,480
probes the success percent and those

00:14:04,000 --> 00:14:06,639
things so

00:14:04,480 --> 00:14:08,800
it's basically store the metrics so what

00:14:06,639 --> 00:14:10,320
chaos operator will do is it will take a

00:14:08,800 --> 00:14:11,920
deeper watch into chaos engine and

00:14:10,320 --> 00:14:13,519
whenever a kiosk engine is triggered

00:14:11,920 --> 00:14:14,800
it will also spawn a kiosk runner and

00:14:13,519 --> 00:14:17,199
the chaos runner part is who is

00:14:14,800 --> 00:14:18,800
responsible for spawning multiple chaos

00:14:17,199 --> 00:14:19,120
jobs and these chaos jobs are nothing

00:14:18,800 --> 00:14:21,519
but

00:14:19,120 --> 00:14:22,720
um the particular chaos experiment which

00:14:21,519 --> 00:14:24,480
are so let's say you want to run a 40

00:14:22,720 --> 00:14:26,320
liter of container kill so the kiosk

00:14:24,480 --> 00:14:26,959
runner would uh the net kia center part

00:14:26,320 --> 00:14:29,199
would

00:14:26,959 --> 00:14:30,160
spawn multiple quadra pod delete or

00:14:29,199 --> 00:14:33,279
multiple

00:14:30,160 --> 00:14:34,720
um container kill jobs that you have

00:14:33,279 --> 00:14:36,560
scheduled as per your particular

00:14:34,720 --> 00:14:38,160
tunables so you can

00:14:36,560 --> 00:14:40,320
do all these tunings in the chaos engine

00:14:38,160 --> 00:14:41,760
itself so whatever a way you have tuned

00:14:40,320 --> 00:14:44,240
and overridden the

00:14:41,760 --> 00:14:45,920
basic tunings in that particular manner

00:14:44,240 --> 00:14:48,959
the kiosk runner would generate

00:14:45,920 --> 00:14:52,320
successive chaos jobs you can either

00:14:48,959 --> 00:14:54,240
change the chaos duration you can add uh

00:14:52,320 --> 00:14:55,839
annotations to control the blast radius

00:14:54,240 --> 00:14:59,120
and all those kinds of things

00:14:55,839 --> 00:15:00,720
so that's it in a high level

00:14:59,120 --> 00:15:02,480
so let's go back to the previous watch

00:15:00,720 --> 00:15:04,399
statement and take a look so now uh we

00:15:02,480 --> 00:15:06,880
can see that this has been finished if i

00:15:04,399 --> 00:15:08,160
uh just get out of the watch command and

00:15:06,880 --> 00:15:09,920
i see take a look at the

00:15:08,160 --> 00:15:11,680
installed steps so you can see that it

00:15:09,920 --> 00:15:13,120
has installed this configure this

00:15:11,680 --> 00:15:15,040
namespace litmus

00:15:13,120 --> 00:15:16,800
and the configmap deployment services

00:15:15,040 --> 00:15:18,240
the rule bindings and

00:15:16,800 --> 00:15:20,079
all the dependencies that are needed for

00:15:18,240 --> 00:15:22,320
it must run if you install

00:15:20,079 --> 00:15:23,279
a helm or apply the beta manifest you

00:15:22,320 --> 00:15:25,279
need to

00:15:23,279 --> 00:15:26,880
install the name create namespace of

00:15:25,279 --> 00:15:28,399
litmus first so if you go through this

00:15:26,880 --> 00:15:30,000
documentation of how to install you can

00:15:28,399 --> 00:15:30,240
find all these different details but if

00:15:30,000 --> 00:15:31,519
i

00:15:30,240 --> 00:15:33,440
uh if you apply the latest master

00:15:31,519 --> 00:15:34,959
manifest it'll create the namespace for

00:15:33,440 --> 00:15:37,519
you

00:15:34,959 --> 00:15:39,040
now that we have litmus installed and

00:15:37,519 --> 00:15:40,639
let me go back to the watch statement

00:15:39,040 --> 00:15:43,040
since this is going to be handy

00:15:40,639 --> 00:15:44,240
i'll open another tab and i'll check

00:15:43,040 --> 00:15:45,279
i'll take a look at those

00:15:44,240 --> 00:15:47,360
i'll take a look at the different

00:15:45,279 --> 00:15:54,800
services that are there currently in

00:15:47,360 --> 00:15:56,399
litmus same space

00:15:54,800 --> 00:15:57,839
so we can see that there's uh the litmus

00:15:56,399 --> 00:15:59,519
for the front front end the server

00:15:57,839 --> 00:16:01,199
service and the server so we need

00:15:59,519 --> 00:16:03,040
the node ip followed by the port in

00:16:01,199 --> 00:16:04,639
order to visit our front end service

00:16:03,040 --> 00:16:06,240
so in this case i'll just go and i'm

00:16:04,639 --> 00:16:08,320
going to use my mini qyp

00:16:06,240 --> 00:16:10,320
with this particular front-end port

00:16:08,320 --> 00:16:14,320
there is going to be this

00:16:10,320 --> 00:16:14,320
colon this particular port

00:16:15,600 --> 00:16:20,959
let me just copy over the port and

00:16:18,880 --> 00:16:22,720
with that i should be able to access the

00:16:20,959 --> 00:16:25,360
front-end service of litmus

00:16:22,720 --> 00:16:27,120
so now we have this i am going to login

00:16:25,360 --> 00:16:28,800
with my admin and litmus

00:16:27,120 --> 00:16:31,199
credentials so by default the username

00:16:28,800 --> 00:16:33,120
is admin and password is litmus

00:16:31,199 --> 00:16:34,880
once you try to login since you are a

00:16:33,120 --> 00:16:36,480
new user and this is a fresh cluster you

00:16:34,880 --> 00:16:37,920
installed it on you should you will be

00:16:36,480 --> 00:16:40,480
treated with a

00:16:37,920 --> 00:16:42,000
project creation uh onboarding step so

00:16:40,480 --> 00:16:42,959
you need to confirm your password if you

00:16:42,000 --> 00:16:45,040
have if you want to create a new

00:16:42,959 --> 00:16:46,720
password at the time of the first login

00:16:45,040 --> 00:16:48,560
i'm just going to keep it the same and

00:16:46,720 --> 00:16:50,720
my project name would be demo

00:16:48,560 --> 00:16:51,600
so this is only a one-time thing for new

00:16:50,720 --> 00:16:53,440
users so

00:16:51,600 --> 00:16:54,399
if you create another user as an admin

00:16:53,440 --> 00:16:56,480
they would have to go through this

00:16:54,399 --> 00:16:58,560
onboarding process just once

00:16:56,480 --> 00:16:59,920
so this is my control plane the litmus

00:16:58,560 --> 00:17:01,600
control plane that i have

00:16:59,920 --> 00:17:03,199
and there are multiple options that you

00:17:01,600 --> 00:17:04,000
can do you can schedule a workflow you

00:17:03,199 --> 00:17:06,160
have particularly

00:17:04,000 --> 00:17:08,000
one agent right now you can see your

00:17:06,160 --> 00:17:09,760
project up at the top

00:17:08,000 --> 00:17:11,039
you can see your details if you have set

00:17:09,760 --> 00:17:13,039
up an email which you

00:17:11,039 --> 00:17:15,039
want if you have if you're a first time

00:17:13,039 --> 00:17:16,559
login you have to set it up manually

00:17:15,039 --> 00:17:18,000
so you can set up your email you can log

00:17:16,559 --> 00:17:18,959
out you can edit your profile and you'll

00:17:18,000 --> 00:17:20,799
see all the

00:17:18,959 --> 00:17:22,000
project related details like who is

00:17:20,799 --> 00:17:23,439
sharing uh

00:17:22,000 --> 00:17:25,039
who you are sharing your projects with

00:17:23,439 --> 00:17:26,799
so you can invite other people as well

00:17:25,039 --> 00:17:27,679
into your project you can give them your

00:17:26,799 --> 00:17:30,559
editor owner

00:17:27,679 --> 00:17:31,919
different types of access and there's

00:17:30,559 --> 00:17:33,200
something called as an agent so what is

00:17:31,919 --> 00:17:35,360
an agent it is basically

00:17:33,200 --> 00:17:36,720
uh when you install litmus by default we

00:17:35,360 --> 00:17:37,840
create a self agent

00:17:36,720 --> 00:17:39,440
which is already running in your

00:17:37,840 --> 00:17:40,400
particular cluster so with the help of

00:17:39,440 --> 00:17:42,160
this agent uh

00:17:40,400 --> 00:17:43,440
we will be running all the chaos

00:17:42,160 --> 00:17:45,679
experiments in this

00:17:43,440 --> 00:17:47,360
uh particular agent so if you want to

00:17:45,679 --> 00:17:49,360
create an uh so if you want to

00:17:47,360 --> 00:17:50,320
uh also include an external agent you

00:17:49,360 --> 00:17:52,000
can do so you can connect an

00:17:50,320 --> 00:17:53,360
externalization by clicking on this

00:17:52,000 --> 00:17:55,440
uh you have to go through this process

00:17:53,360 --> 00:17:57,679
to download it my ctl binary and connect

00:17:55,440 --> 00:17:59,520
your own personal external agent

00:17:57,679 --> 00:18:00,880
so we are going to use the self agent

00:17:59,520 --> 00:18:02,080
for now and

00:18:00,880 --> 00:18:04,160
if you go to settings you have the

00:18:02,080 --> 00:18:04,559
teaming option where you can uh invite

00:18:04,160 --> 00:18:06,160
new

00:18:04,559 --> 00:18:08,000
team members who are already a part of

00:18:06,160 --> 00:18:09,760
litmus and then you can choose the rule

00:18:08,000 --> 00:18:11,200
like i mentioned

00:18:09,760 --> 00:18:12,799
and there's another section called as a

00:18:11,200 --> 00:18:14,240
workflow which is where your workflows

00:18:12,799 --> 00:18:15,280
will be scheduled whenever whenever you

00:18:14,240 --> 00:18:16,559
should use the workflow this is where

00:18:15,280 --> 00:18:17,760
you'll be able to view all the different

00:18:16,559 --> 00:18:19,919
details of the workflow

00:18:17,760 --> 00:18:22,080
if you create a schedule and you do not

00:18:19,919 --> 00:18:24,400
just run it once if you want it to be a

00:18:22,080 --> 00:18:25,840
scheduled uh cron job then you can

00:18:24,400 --> 00:18:27,600
do the same and all the schedules will

00:18:25,840 --> 00:18:28,880
be uh visible here

00:18:27,600 --> 00:18:30,640
and you also have some predefined

00:18:28,880 --> 00:18:32,400
templates that you can use to directly

00:18:30,640 --> 00:18:34,160
uh inject yours without any

00:18:32,400 --> 00:18:34,880
configuration so you can just use this

00:18:34,160 --> 00:18:37,520
predefined

00:18:34,880 --> 00:18:37,919
templates so what you're going to do is

00:18:37,520 --> 00:18:39,760
uh

00:18:37,919 --> 00:18:41,600
create a scheduler workflow on the

00:18:39,760 --> 00:18:43,919
particular names on the particular agent

00:18:41,600 --> 00:18:45,760
self agent that we have already

00:18:43,919 --> 00:18:47,120
now moving forward we have four

00:18:45,760 --> 00:18:48,880
different options which is uh

00:18:47,120 --> 00:18:50,160
we can either create from a set of

00:18:48,880 --> 00:18:51,200
predefined workflows which is the same

00:18:50,160 --> 00:18:53,200
as the templates

00:18:51,200 --> 00:18:55,039
and let's say you have a particular pod

00:18:53,200 --> 00:18:55,679
delete or a certain template which you

00:18:55,039 --> 00:18:57,600
want to

00:18:55,679 --> 00:18:58,720
modify and extend its capabilities so

00:18:57,600 --> 00:19:00,480
let's say you have quarter lead and you

00:18:58,720 --> 00:19:02,000
want some sort of specific uh

00:19:00,480 --> 00:19:03,600
pod delete application method to your

00:19:02,000 --> 00:19:05,360
enterprise requirements so you can

00:19:03,600 --> 00:19:07,280
save it you can modify it and save it as

00:19:05,360 --> 00:19:08,320
a template and from the next time

00:19:07,280 --> 00:19:09,760
onwards you can

00:19:08,320 --> 00:19:11,360
click on this create a new workflow by

00:19:09,760 --> 00:19:12,559
cloning an existing workflow and see

00:19:11,360 --> 00:19:13,760
this is where you'll find a particular

00:19:12,559 --> 00:19:15,760
template that you have saved

00:19:13,760 --> 00:19:17,120
so you can uh use that template and run

00:19:15,760 --> 00:19:19,280
your workflows again and again with the

00:19:17,120 --> 00:19:21,360
same configuration

00:19:19,280 --> 00:19:23,039
and then you have this option of my hub

00:19:21,360 --> 00:19:24,960
so what my hub is essentially like i

00:19:23,039 --> 00:19:26,480
already showed you there's a kiosk hub

00:19:24,960 --> 00:19:28,160
so my hub is essentially your own

00:19:26,480 --> 00:19:30,799
personal chart

00:19:28,160 --> 00:19:31,520
uh your own personal uh chart so let's

00:19:30,799 --> 00:19:34,640
say for

00:19:31,520 --> 00:19:35,840
example i have this demo chart here so

00:19:34,640 --> 00:19:37,760
you have to make sure that this is

00:19:35,840 --> 00:19:39,600
exactly in this particular format so you

00:19:37,760 --> 00:19:41,360
have to have a charts folder and inside

00:19:39,600 --> 00:19:43,679
of it you can create your own personal

00:19:41,360 --> 00:19:44,960
chaos experiment so i have generic

00:19:43,679 --> 00:19:45,760
experiments which are all this

00:19:44,960 --> 00:19:47,679
notetained

00:19:45,760 --> 00:19:49,440
no drain disk fill this clause and i

00:19:47,679 --> 00:19:50,080
also have a code dns which is code in a

00:19:49,440 --> 00:19:51,520
squad delete

00:19:50,080 --> 00:19:53,760
experiment and these are the different

00:19:51,520 --> 00:19:55,120
metadatas the icons and the back html

00:19:53,760 --> 00:19:58,000
experiment yeah

00:19:55,120 --> 00:19:59,600
so now if i go to uh the portal and i

00:19:58,000 --> 00:20:01,360
select the hub i'll only be able to seek

00:19:59,600 --> 00:20:01,840
yourself so if i visit this here sub

00:20:01,360 --> 00:20:03,280
section

00:20:01,840 --> 00:20:04,880
i should be able to see chaos up only

00:20:03,280 --> 00:20:06,240
which is exactly if i view this it is

00:20:04,880 --> 00:20:08,880
exactly similar to this

00:20:06,240 --> 00:20:10,640
hub so we already have this inbuilt with

00:20:08,880 --> 00:20:11,919
the litmus portal so whenever you open

00:20:10,640 --> 00:20:14,159
portal you should already have

00:20:11,919 --> 00:20:16,080
hub pre like already there but if you

00:20:14,159 --> 00:20:18,159
want to connect your own hub you can

00:20:16,080 --> 00:20:19,120
choose the connect new hub section i'll

00:20:18,159 --> 00:20:23,039
name my hub as

00:20:19,120 --> 00:20:25,280
demo hub and i'll just give my get url

00:20:23,039 --> 00:20:28,400
which is in this case

00:20:25,280 --> 00:20:29,520
this one so i'll just use this get url

00:20:28,400 --> 00:20:31,760
and i just want the mask

00:20:29,520 --> 00:20:33,520
branch to be mastered so it's public

00:20:31,760 --> 00:20:34,799
repo so i'm using it as public if you

00:20:33,520 --> 00:20:37,120
have a private repo you can either

00:20:34,799 --> 00:20:38,640
choose to ssh or use the access token

00:20:37,120 --> 00:20:40,159
and just add the deploy key in your get

00:20:38,640 --> 00:20:41,600
repository that should work so if i

00:20:40,159 --> 00:20:44,799
submit it now i should

00:20:41,600 --> 00:20:46,559
be successfully adding the demo hub to

00:20:44,799 --> 00:20:48,240
my list of qr subs

00:20:46,559 --> 00:20:50,000
so if i view this demo hub now i should

00:20:48,240 --> 00:20:52,960
be able to see all the generic

00:20:50,000 --> 00:20:54,640
experiments as well as the um

00:20:52,960 --> 00:20:56,159
core dns experiment which is just one

00:20:54,640 --> 00:20:58,240
that i had in this git repo

00:20:56,159 --> 00:21:00,000
so this is one feature that allows you

00:20:58,240 --> 00:21:00,480
to create your own custom charts if you

00:21:00,000 --> 00:21:03,840
want to

00:21:00,480 --> 00:21:06,159
and then use your enterprise

00:21:03,840 --> 00:21:07,440
particular enterprise use case so you

00:21:06,159 --> 00:21:09,440
can create your own uh

00:21:07,440 --> 00:21:11,840
experiments use experiments and push

00:21:09,440 --> 00:21:14,240
them on git github and then use

00:21:11,840 --> 00:21:15,360
your own hubs to schedule yours

00:21:14,240 --> 00:21:16,960
according to your needs

00:21:15,360 --> 00:21:19,200
so now if i go to workflows and i

00:21:16,960 --> 00:21:20,880
schedule a workflow and i select my demo

00:21:19,200 --> 00:21:22,640
hub

00:21:20,880 --> 00:21:24,000
there's also an option to uh import a

00:21:22,640 --> 00:21:25,679
workflow from yaml so if you have a

00:21:24,000 --> 00:21:26,080
custom you have already created you can

00:21:25,679 --> 00:21:27,520
just

00:21:26,080 --> 00:21:29,679
click on this and drag and drop or

00:21:27,520 --> 00:21:31,520
upload your yaml and the

00:21:29,679 --> 00:21:33,360
experiment would be picked up from this

00:21:31,520 --> 00:21:35,840
particular yaml so i'm going to select

00:21:33,360 --> 00:21:38,960
my demo hub that i have just

00:21:35,840 --> 00:21:40,400
set newly so i will keep the experiment

00:21:38,960 --> 00:21:42,000
name as demo

00:21:40,400 --> 00:21:43,600
let me move forward so that right now i

00:21:42,000 --> 00:21:45,200
don't have any experiment so when i add

00:21:43,600 --> 00:21:45,600
a new experiment let's say a container

00:21:45,200 --> 00:21:49,039
kill

00:21:45,600 --> 00:21:50,559
and a pod delete experiment

00:21:49,039 --> 00:21:53,039
i should be able to see a visualization

00:21:50,559 --> 00:21:55,360
of the right side which is giving me

00:21:53,039 --> 00:21:56,400
an exact example of what would happen

00:21:55,360 --> 00:21:58,559
when

00:21:56,400 --> 00:21:59,440
like how this experiment would look how

00:21:58,559 --> 00:22:01,120
this workflow would

00:21:59,440 --> 00:22:02,960
look when i finalize it and i see the

00:22:01,120 --> 00:22:05,039
visualization so this is just a demo

00:22:02,960 --> 00:22:06,559
visualization uh of a predicted

00:22:05,039 --> 00:22:08,400
visualization that it should

00:22:06,559 --> 00:22:09,840
happen once we select it so you can of

00:22:08,400 --> 00:22:11,200
course click on edit ml and see the

00:22:09,840 --> 00:22:13,440
different yaml configuration

00:22:11,200 --> 00:22:14,640
so like i mentioned chaos engine chaos

00:22:13,440 --> 00:22:16,159
experiments at the top you would have

00:22:14,640 --> 00:22:17,280
the kiosk experiments these are all the

00:22:16,159 --> 00:22:18,960
different chaos experiments

00:22:17,280 --> 00:22:19,919
and if i scroll down to the bottom i

00:22:18,960 --> 00:22:21,440
should be able to see the different

00:22:19,919 --> 00:22:22,400
chaos engine

00:22:21,440 --> 00:22:24,640
these are all different chaos

00:22:22,400 --> 00:22:26,240
experiments and if i scroll down i

00:22:24,640 --> 00:22:27,679
should be able to see the chaos kind

00:22:26,240 --> 00:22:29,039
chaos engine and these are the chaos

00:22:27,679 --> 00:22:31,440
engine of the two particular uh

00:22:29,039 --> 00:22:33,760
experiments that i just installed

00:22:31,440 --> 00:22:35,280
all right so if and there's an option

00:22:33,760 --> 00:22:35,919
called a virtue so reverse schedule

00:22:35,280 --> 00:22:37,440
actually

00:22:35,919 --> 00:22:38,880
allows you to revert all the particular

00:22:37,440 --> 00:22:40,400
chaos that has been happened if you turn

00:22:38,880 --> 00:22:42,080
it to false it will not reward it and

00:22:40,400 --> 00:22:43,520
your chaos metadata all the experiment

00:22:42,080 --> 00:22:46,159
details job details will be

00:22:43,520 --> 00:22:47,600
persistent and will be present there so

00:22:46,159 --> 00:22:49,280
now i if i click on next

00:22:47,600 --> 00:22:50,799
i should be able to adjust the weights

00:22:49,280 --> 00:22:52,240
of the particular experiment

00:22:50,799 --> 00:22:54,000
and i have the option to create a

00:22:52,240 --> 00:22:56,960
recurring schedule or schedule now

00:22:54,000 --> 00:22:58,480
so if i schedule it now and this this is

00:22:56,960 --> 00:22:59,360
the summary of your entire workflow if i

00:22:58,480 --> 00:23:01,360
schedule it now

00:22:59,360 --> 00:23:03,039
and i click on finish i should be able

00:23:01,360 --> 00:23:04,960
to view the particular

00:23:03,039 --> 00:23:07,039
workflow that i just scheduled and if i

00:23:04,960 --> 00:23:09,440
click on the particular workflows name

00:23:07,039 --> 00:23:10,559
or even go back and click on this option

00:23:09,440 --> 00:23:12,159
to show the workflow or show the

00:23:10,559 --> 00:23:13,679
analytics i should be able to see the

00:23:12,159 --> 00:23:14,960
workflow details

00:23:13,679 --> 00:23:16,240
this is how the workflow details would

00:23:14,960 --> 00:23:16,799
look like this is the current step that

00:23:16,240 --> 00:23:17,840
is running

00:23:16,799 --> 00:23:19,120
it will install all the chaos

00:23:17,840 --> 00:23:20,880
experiments it will spawn up the port

00:23:19,120 --> 00:23:22,799
lead and container kill experiment

00:23:20,880 --> 00:23:24,640
and once we click on the particular uh

00:23:22,799 --> 00:23:26,480
node it will also give us the cures uh

00:23:24,640 --> 00:23:27,200
results as well as the logs so let's

00:23:26,480 --> 00:23:28,880
this is the

00:23:27,200 --> 00:23:31,200
master node so that's why we are getting

00:23:28,880 --> 00:23:33,039
a total uh an entire uh

00:23:31,200 --> 00:23:34,480
overview so this is just a graph view if

00:23:33,039 --> 00:23:36,000
i move on to table view i should be able

00:23:34,480 --> 00:23:37,360
to see the same but in a table

00:23:36,000 --> 00:23:39,360
view which will give us the individual

00:23:37,360 --> 00:23:41,200
node duration how much it took and

00:23:39,360 --> 00:23:42,720
the log and the result and if i take a

00:23:41,200 --> 00:23:44,240
look at this watch statement that i had

00:23:42,720 --> 00:23:44,960
already running i should be able to see

00:23:44,240 --> 00:23:47,760
all these different

00:23:44,960 --> 00:23:49,200
uh services like i i had chaos

00:23:47,760 --> 00:23:51,279
experiment the kiosk operator the

00:23:49,200 --> 00:23:53,840
subscriber the workflow controller and

00:23:51,279 --> 00:23:54,880
the event tracker so these are the same

00:23:53,840 --> 00:23:57,600
things that i talked about

00:23:54,880 --> 00:23:58,000
when i was discussing the crds and this

00:23:57,600 --> 00:23:59,840
is the

00:23:58,000 --> 00:24:01,600
experiment that we just the kiosk

00:23:59,840 --> 00:24:02,559
experiment that we just created so demo

00:24:01,600 --> 00:24:04,320
this one is running

00:24:02,559 --> 00:24:06,640
and since it has installed the different

00:24:04,320 --> 00:24:08,080
experiments it will create more uh two

00:24:06,640 --> 00:24:09,039
two more experiments which are port

00:24:08,080 --> 00:24:11,120
delete and chaos

00:24:09,039 --> 00:24:12,480
container kill and that would be working

00:24:11,120 --> 00:24:14,159
on this particular target that we have

00:24:12,480 --> 00:24:15,679
so current target is nginx application

00:24:14,159 --> 00:24:16,960
which is already inbuilt

00:24:15,679 --> 00:24:18,400
now if you want you can change your

00:24:16,960 --> 00:24:19,120
target to a particular application that

00:24:18,400 --> 00:24:21,279
you want to

00:24:19,120 --> 00:24:23,440
target the chaos on of course that will

00:24:21,279 --> 00:24:26,480
change based on your aml configurations

00:24:23,440 --> 00:24:27,600
and that's how we do it so let's just

00:24:26,480 --> 00:24:29,840
wait for this

00:24:27,600 --> 00:24:31,520
experiment to finish so now that the

00:24:29,840 --> 00:24:32,000
install experiment finished we have a

00:24:31,520 --> 00:24:33,600
container

00:24:32,000 --> 00:24:35,520
kill that is in the pending state so if

00:24:33,600 --> 00:24:36,799
i visit the logs again i should be if i

00:24:35,520 --> 00:24:37,760
visit the watch statement again i should

00:24:36,799 --> 00:24:39,919
be able to see the

00:24:37,760 --> 00:24:41,840
another instance pop-up which is called

00:24:39,919 --> 00:24:42,880
an initializing state and this is uh the

00:24:41,840 --> 00:24:46,080
container kill

00:24:42,880 --> 00:24:48,159
uh chaos experiment that is trying to

00:24:46,080 --> 00:24:50,080
install itself and inject geos so after

00:24:48,159 --> 00:24:53,279
container field will be also able to see

00:24:50,080 --> 00:24:55,039
uh what delete it's gone up so

00:24:53,279 --> 00:24:56,400
yeah now you can see container kill

00:24:55,039 --> 00:24:57,360
runner is being there so this is the

00:24:56,400 --> 00:25:01,039
chaos runner

00:24:57,360 --> 00:25:03,919
and it is uh spawning the kiosk jobs

00:25:01,039 --> 00:25:05,440
so now if i if i visit the container if

00:25:03,919 --> 00:25:07,520
i visit the container kill

00:25:05,440 --> 00:25:09,200
uh node i should be able to see the logs

00:25:07,520 --> 00:25:10,240
as well as the chaos results as well so

00:25:09,200 --> 00:25:11,520
right now it's running that's why we

00:25:10,240 --> 00:25:12,960
don't have any kiosk results once it

00:25:11,520 --> 00:25:14,080
finishes we'll be able to see the case

00:25:12,960 --> 00:25:16,880
results

00:25:14,080 --> 00:25:18,559
so yeah that's that's it for the portal

00:25:16,880 --> 00:25:21,200
how you can inject your personal

00:25:18,559 --> 00:25:21,760
uh your own chaos if i also go ahead and

00:25:21,200 --> 00:25:23,679
change

00:25:21,760 --> 00:25:24,960
my charts detail in this section let's

00:25:23,679 --> 00:25:26,720
say generic port delete

00:25:24,960 --> 00:25:28,000
if i modify the body lead experiment

00:25:26,720 --> 00:25:31,200
here and i come

00:25:28,000 --> 00:25:32,559
back to this scheduling a workflow and

00:25:31,200 --> 00:25:34,080
viewing that particular experiment i

00:25:32,559 --> 00:25:35,279
should be able to also see the changes

00:25:34,080 --> 00:25:36,960
there so whatever change you do in

00:25:35,279 --> 00:25:40,080
github would also be reflecting your

00:25:36,960 --> 00:25:40,799
workflow itself and yeah that's that's

00:25:40,080 --> 00:25:42,799
all about

00:25:40,799 --> 00:25:44,799
litmus and how you can leverage it in a

00:25:42,799 --> 00:25:46,159
high level view so this is the exact

00:25:44,799 --> 00:25:47,039
architecture that i talked about so you

00:25:46,159 --> 00:25:48,960
have the portal

00:25:47,039 --> 00:25:50,559
you have your chaos workflows and the

00:25:48,960 --> 00:25:51,600
metrics and events and the operators and

00:25:50,559 --> 00:25:52,159
the different experiments that are

00:25:51,600 --> 00:25:54,320
running

00:25:52,159 --> 00:25:55,919
so these are all exported into chaos

00:25:54,320 --> 00:25:57,200
results so the case results you can also

00:25:55,919 --> 00:25:58,000
monitor the chaos results using

00:25:57,200 --> 00:25:59,919
prometheus

00:25:58,000 --> 00:26:01,679
uh with the kiosk interleaved analytics

00:25:59,919 --> 00:26:03,840
also you can run this on a bare metal

00:26:01,679 --> 00:26:05,600
environment as well as public clouds aws

00:26:03,840 --> 00:26:08,080
azure or vmware with the bare metal

00:26:05,600 --> 00:26:08,960
environment so that's all from my side

00:26:08,080 --> 00:26:11,360
and that's how you can

00:26:08,960 --> 00:26:13,200
leverage mass to your own enterprise

00:26:11,360 --> 00:26:13,840
requirements and inject chaos as you

00:26:13,200 --> 00:26:17,279
want

00:26:13,840 --> 00:26:17,279

YouTube URL: https://www.youtube.com/watch?v=618rXhCp03Y


