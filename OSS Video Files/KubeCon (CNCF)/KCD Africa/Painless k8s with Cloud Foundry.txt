Title: Painless k8s with Cloud Foundry
Publication date: 2021-06-01
Playlist: KCD Africa
Description: 
	Shedrack Akitayo is a Senior Developer Advocate at Cloud Foundry
Captions: 
	00:00:00,320 --> 00:00:07,600
cool awesome i'm high school

00:00:03,840 --> 00:00:07,600
um let's see

00:00:08,960 --> 00:00:20,480
can you hear me so hi everyone

00:00:17,039 --> 00:00:23,920
um let's see if we could get

00:00:20,480 --> 00:00:23,920
shadrack on board

00:00:28,840 --> 00:00:31,840
okay

00:00:43,200 --> 00:00:47,840
okay awesome awesome so in my i don't

00:00:45,920 --> 00:00:51,520
know what happened

00:00:47,840 --> 00:00:59,039
it's fine it's fine cool so um

00:00:51,520 --> 00:01:02,879
the floor is yours okay shopping

00:00:59,039 --> 00:01:06,560
can you see my screen yes

00:01:02,879 --> 00:01:08,640
okay okay yeah so um hi everybody my

00:01:06,560 --> 00:01:10,159
name is chadra kakintayo i'm a developer

00:01:08,640 --> 00:01:11,040
advocate at the crowdfunding foundation

00:01:10,159 --> 00:01:12,560
and today

00:01:11,040 --> 00:01:14,320
i'm basically going to talk about

00:01:12,560 --> 00:01:15,200
painless kubernetes with cloud foundry

00:01:14,320 --> 00:01:18,240
so i mean

00:01:15,200 --> 00:01:20,479
um this talk is basically

00:01:18,240 --> 00:01:22,320
me trying to um talk about the cloud for

00:01:20,479 --> 00:01:24,560
any projectors and open source projects

00:01:22,320 --> 00:01:26,720
and how it leverages kubernetes

00:01:24,560 --> 00:01:27,680
where how it abstracts about bonuses to

00:01:26,720 --> 00:01:29,680
make um

00:01:27,680 --> 00:01:31,119
life easier for developers that want to

00:01:29,680 --> 00:01:32,640
like have their stuff

00:01:31,119 --> 00:01:34,400
or have their projects deployed on

00:01:32,640 --> 00:01:36,560
kubernetes so um

00:01:34,400 --> 00:01:38,159
a little bit about me is like i said i'm

00:01:36,560 --> 00:01:39,280
a developer advocate at the cloud

00:01:38,159 --> 00:01:41,520
foundry foundation

00:01:39,280 --> 00:01:42,560
i'm also a technical writer i write for

00:01:41,520 --> 00:01:44,960
everything for

00:01:42,560 --> 00:01:45,840
um blogs like smashing magazine log

00:01:44,960 --> 00:01:48,079
rockets

00:01:45,840 --> 00:01:50,000
open source.com even container joe now

00:01:48,079 --> 00:01:51,840
so i'm a very big fan of thanks and i'm

00:01:50,000 --> 00:01:54,240
always open to sharing my knowledge

00:01:51,840 --> 00:01:56,079
with um the community i'm also an open

00:01:54,240 --> 00:01:56,399
source advocate so i try my best to talk

00:01:56,079 --> 00:01:59,119
about

00:01:56,399 --> 00:01:59,680
open source um software generally in

00:01:59,119 --> 00:02:03,439
various

00:01:59,680 --> 00:02:05,680
parts of the world generally um

00:02:03,439 --> 00:02:07,680
so let's just get started i'm not about

00:02:05,680 --> 00:02:08,640
to waste anybody's time and i want to

00:02:07,680 --> 00:02:10,720
make sure that

00:02:08,640 --> 00:02:11,920
we have time for christians and um it's

00:02:10,720 --> 00:02:13,440
time for

00:02:11,920 --> 00:02:15,520
everybody to really share their thoughts

00:02:13,440 --> 00:02:17,599
on the presentation generally

00:02:15,520 --> 00:02:19,280
um so cloud foundry whenever you think

00:02:17,599 --> 00:02:21,280
cloud foundry basically

00:02:19,280 --> 00:02:22,560
um is an open source platform that

00:02:21,280 --> 00:02:24,560
allows applications

00:02:22,560 --> 00:02:26,239
um application development teams to

00:02:24,560 --> 00:02:29,360
build test and deploy

00:02:26,239 --> 00:02:31,040
um and scale applications so uh

00:02:29,360 --> 00:02:32,480
to make this even simpler if you're

00:02:31,040 --> 00:02:32,959
thinking cloud foundry probably should

00:02:32,480 --> 00:02:36,160
think

00:02:32,959 --> 00:02:37,680
um heroku but open source generally um

00:02:36,160 --> 00:02:39,760
cloud foundry um

00:02:37,680 --> 00:02:42,080
was the idea of platform you basically

00:02:39,760 --> 00:02:44,800
came about when you who came out and

00:02:42,080 --> 00:02:46,560
the people wanted to the um the vmware

00:02:44,800 --> 00:02:46,879
generally wanted to make sure that there

00:02:46,560 --> 00:02:50,160
is

00:02:46,879 --> 00:02:52,560
um a um open source version of um

00:02:50,160 --> 00:02:54,560
of hiroku that's how cloudflare came

00:02:52,560 --> 00:02:56,319
about generally now cloud foundry has

00:02:54,560 --> 00:02:57,040
been leveraging on kubernetes for a

00:02:56,319 --> 00:02:59,120
while now

00:02:57,040 --> 00:03:00,800
and um it's just really i'm just really

00:02:59,120 --> 00:03:02,800
excited to talk about how cloud5 really

00:03:00,800 --> 00:03:03,519
leverages kubernetes and abstracts over

00:03:02,800 --> 00:03:05,280
its

00:03:03,519 --> 00:03:07,760
um you know make um deployments to

00:03:05,280 --> 00:03:10,800
kubernetes is even much more friendlier

00:03:07,760 --> 00:03:13,680
than what we are currently used to

00:03:10,800 --> 00:03:15,040
so um basically the the most selling

00:03:13,680 --> 00:03:16,400
point of platform in general

00:03:15,040 --> 00:03:18,159
i wouldn't use selling points because

00:03:16,400 --> 00:03:18,800
sorry for that because the open source

00:03:18,159 --> 00:03:21,040
project

00:03:18,800 --> 00:03:22,800
but what's um the most interesting part

00:03:21,040 --> 00:03:24,239
of platforming and what it really brings

00:03:22,800 --> 00:03:26,959
to your developer experience

00:03:24,239 --> 00:03:28,480
is um how you deploy your application uh

00:03:26,959 --> 00:03:30,799
with just a single command

00:03:28,480 --> 00:03:32,239
so all you need to do is just to do a cf

00:03:30,799 --> 00:03:33,599
push and um

00:03:32,239 --> 00:03:35,920
in the um root folder of your

00:03:33,599 --> 00:03:37,519
application and it gets deployed to

00:03:35,920 --> 00:03:39,040
a cloud-friendly cluster any

00:03:37,519 --> 00:03:40,560
infrastructure of your choice

00:03:39,040 --> 00:03:42,480
so it makes you it gives you the

00:03:40,560 --> 00:03:45,120
flexibility of running on

00:03:42,480 --> 00:03:45,519
your or your own infrastructure and

00:03:45,120 --> 00:03:46,560
having

00:03:45,519 --> 00:03:48,799
running combinations on your own

00:03:46,560 --> 00:03:50,400
infrastructure and having um um

00:03:48,799 --> 00:03:52,480
the awesome developer experience that

00:03:50,400 --> 00:03:55,200
comes with um cloud foundry

00:03:52,480 --> 00:03:56,000
now next is code supernexus in one

00:03:55,200 --> 00:03:59,040
command now

00:03:56,000 --> 00:04:00,480
platform us has has now evolved over

00:03:59,040 --> 00:04:02,480
a couple of years i thought there's been

00:04:00,480 --> 00:04:05,120
existing for a while but um as at last

00:04:02,480 --> 00:04:07,040
year crafty evolves to allow developers

00:04:05,120 --> 00:04:08,239
um leverage companies keep doing stuff

00:04:07,040 --> 00:04:10,159
developers that want to

00:04:08,239 --> 00:04:11,840
really really have the flexibility that

00:04:10,159 --> 00:04:14,319
california provides in general

00:04:11,840 --> 00:04:15,920
on kubernetes so we still have the same

00:04:14,319 --> 00:04:18,400
experience that comes to

00:04:15,920 --> 00:04:19,359
that scaffolding originally have super

00:04:18,400 --> 00:04:21,759
body this time

00:04:19,359 --> 00:04:23,280
for default kubernetes so the same cf

00:04:21,759 --> 00:04:24,960
push you use for just deploying to

00:04:23,280 --> 00:04:25,600
platform in general you can also do the

00:04:24,960 --> 00:04:27,520
same

00:04:25,600 --> 00:04:28,960
for kubernetes which is the cloud

00:04:27,520 --> 00:04:29,840
funding for kubernetes projects i will

00:04:28,960 --> 00:04:33,919
talk about that

00:04:29,840 --> 00:04:37,120
um ahead in the presentation um

00:04:33,919 --> 00:04:38,080
so like i said um kavanaugh is just like

00:04:37,120 --> 00:04:39,919
heroku but

00:04:38,080 --> 00:04:41,759
it's on your own infrastructure so you

00:04:39,919 --> 00:04:43,280
can install clarify your infrastructure

00:04:41,759 --> 00:04:46,080
and manage it by yourself

00:04:43,280 --> 00:04:47,759
and um it could be on aws it could be on

00:04:46,080 --> 00:04:48,560
google cloud it can be on wherever you

00:04:47,759 --> 00:04:51,600
really want

00:04:48,560 --> 00:04:53,440
to um host your or um cloudflare

00:04:51,600 --> 00:04:54,800
it's basically on your infrastructure so

00:04:53,440 --> 00:04:56,479
think about the possibilities that the

00:04:54,800 --> 00:04:58,400
flexibilities that it gives you

00:04:56,479 --> 00:05:00,240
and um when it comes to scaling also

00:04:58,400 --> 00:05:02,320
provides um that's

00:05:00,240 --> 00:05:03,360
very easy support for you to skill your

00:05:02,320 --> 00:05:05,120
application or

00:05:03,360 --> 00:05:06,479
for your users with basically a single

00:05:05,120 --> 00:05:08,080
command cf skill

00:05:06,479 --> 00:05:10,400
so the whole concept of platform is

00:05:08,080 --> 00:05:12,720
making developers or devops and

00:05:10,400 --> 00:05:14,160
devops engineering teams even um have

00:05:12,720 --> 00:05:16,240
sort of a very very

00:05:14,160 --> 00:05:18,000
easy way to get their application from

00:05:16,240 --> 00:05:20,479
testing to deployments

00:05:18,000 --> 00:05:22,000
generally so this one will be like the

00:05:20,479 --> 00:05:23,280
awesome part of platform that i'm going

00:05:22,000 --> 00:05:25,680
to be talking about

00:05:23,280 --> 00:05:27,600
now the next is supports all languages

00:05:25,680 --> 00:05:30,320
and frameworks so irrespective of

00:05:27,600 --> 00:05:32,080
whatever type of way you build your

00:05:30,320 --> 00:05:33,120
application whatever language you use to

00:05:32,080 --> 00:05:36,000
use your application

00:05:33,120 --> 00:05:38,400
platform it produces um gives developers

00:05:36,000 --> 00:05:40,800
um teams generally the um support for

00:05:38,400 --> 00:05:43,199
most of these languages

00:05:40,800 --> 00:05:44,320
it could be java it could be javascript

00:05:43,199 --> 00:05:46,639
it could be ruby

00:05:44,320 --> 00:05:47,440
so python depends on whatever on team

00:05:46,639 --> 00:05:50,720
your whatever

00:05:47,440 --> 00:05:52,639
um um whatever language that your

00:05:50,720 --> 00:05:54,639
team is using clark only has support for

00:05:52,639 --> 00:05:57,039
that and it's always very very

00:05:54,639 --> 00:05:58,880
um easy for you to deploy on your

00:05:57,039 --> 00:06:00,639
applications to kubernetes

00:05:58,880 --> 00:06:02,160
now let's talk about the clarifying for

00:06:00,639 --> 00:06:03,680
companies project so this is

00:06:02,160 --> 00:06:05,280
um this is basically an abstract

00:06:03,680 --> 00:06:06,560
bringing the cloud foundry

00:06:05,280 --> 00:06:08,479
original cloud from the developer

00:06:06,560 --> 00:06:09,440
experience to kubernetes i know like a

00:06:08,479 --> 00:06:12,560
bunch of us

00:06:09,440 --> 00:06:14,000
um have um have faced upon a various

00:06:12,560 --> 00:06:15,360
number of issues when we are trying to

00:06:14,000 --> 00:06:17,280
get started with kubernetes trying to

00:06:15,360 --> 00:06:19,039
learn components generally so cloud

00:06:17,280 --> 00:06:20,960
foundry has an open source project

00:06:19,039 --> 00:06:22,479
um the team came together like okay why

00:06:20,960 --> 00:06:24,400
don't we bring the um

00:06:22,479 --> 00:06:26,479
the cf push experience that already

00:06:24,400 --> 00:06:28,080
exists in california companies make

00:06:26,479 --> 00:06:29,919
um i mean this is two open source

00:06:28,080 --> 00:06:31,520
projects coming together to like work as

00:06:29,919 --> 00:06:32,240
one which is always very very exciting

00:06:31,520 --> 00:06:34,720
and

00:06:32,240 --> 00:06:35,440
exciting now let's see how the cfo case

00:06:34,720 --> 00:06:37,840
project

00:06:35,440 --> 00:06:39,280
um can really really uh make this um

00:06:37,840 --> 00:06:42,240
life easier for us right

00:06:39,280 --> 00:06:43,280
um so uh let's let's just give you a

00:06:42,240 --> 00:06:45,600
quick run through

00:06:43,280 --> 00:06:47,280
of how the components of the chat

00:06:45,600 --> 00:06:49,360
application with cf looks like

00:06:47,280 --> 00:06:51,039
now um from your phone from your browser

00:06:49,360 --> 00:06:52,960
wherever it is it is which

00:06:51,039 --> 00:06:54,080
is pushed to cloud foundry to any

00:06:52,960 --> 00:06:55,440
infrastructure

00:06:54,080 --> 00:06:57,599
that cloudfront user has been installed

00:06:55,440 --> 00:07:00,720
on through the cf api

00:06:57,599 --> 00:07:03,360
so um safe api basically connects

00:07:00,720 --> 00:07:05,680
gives you a emotion means of interaction

00:07:03,360 --> 00:07:08,319
between um your cluster and you on the

00:07:05,680 --> 00:07:10,160
receiving end so from there you can also

00:07:08,319 --> 00:07:11,599
connect when you deploy it in your

00:07:10,160 --> 00:07:13,440
infrastructure you can also connect the

00:07:11,599 --> 00:07:14,960
database which is also known as a

00:07:13,440 --> 00:07:16,800
service in car foundry

00:07:14,960 --> 00:07:18,960
uh we have like cavalry has support for

00:07:16,800 --> 00:07:19,840
videos on database um depending on your

00:07:18,960 --> 00:07:22,479
broker

00:07:19,840 --> 00:07:23,199
from postgres to mysql to mongodb

00:07:22,479 --> 00:07:27,039
basically

00:07:23,199 --> 00:07:28,560
and most of the um the popular um

00:07:27,039 --> 00:07:30,720
the database services are actually

00:07:28,560 --> 00:07:32,479
available on cloud 400 so this is how

00:07:30,720 --> 00:07:34,400
um it is really structured it's a very

00:07:32,479 --> 00:07:36,319
simple it's very very

00:07:34,400 --> 00:07:37,840
very very simple architecture generally

00:07:36,319 --> 00:07:38,720
for you for you to easily deploy your

00:07:37,840 --> 00:07:42,319
applications

00:07:38,720 --> 00:07:44,000
um and on cooperatives now

00:07:42,319 --> 00:07:45,520
the next thing is like i said it

00:07:44,000 --> 00:07:47,280
supports all language and frameworks

00:07:45,520 --> 00:07:49,840
even on kubernetes so

00:07:47,280 --> 00:07:51,520
i mean um if you have if you're a kind

00:07:49,840 --> 00:07:52,000
of person that wants to like i don't

00:07:51,520 --> 00:07:55,120
know

00:07:52,000 --> 00:07:57,039
um deploy a something like a gatsby um

00:07:55,120 --> 00:07:58,879
application or cloud foundry or a

00:07:57,039 --> 00:08:00,080
strappy application on cloud name

00:07:58,879 --> 00:08:02,000
kubernetes sorry

00:08:00,080 --> 00:08:04,240
um software for kubernetes actually

00:08:02,000 --> 00:08:06,080
gives you that power to be able to do

00:08:04,240 --> 00:08:07,520
um use those hip start javascript

00:08:06,080 --> 00:08:08,240
frameworks that maybe your front end is

00:08:07,520 --> 00:08:10,560
built with

00:08:08,240 --> 00:08:12,720
and deployed on kubernetes so you don't

00:08:10,560 --> 00:08:16,560
necessarily have to be um

00:08:12,720 --> 00:08:16,800
a a very fully large application but if

00:08:16,560 --> 00:08:18,240
you

00:08:16,800 --> 00:08:20,319
for let's say you want to try out or you

00:08:18,240 --> 00:08:21,599
want to learn or how to you know deploy

00:08:20,319 --> 00:08:23,120
stuff to governance is

00:08:21,599 --> 00:08:25,599
uh with all these hipster javascript

00:08:23,120 --> 00:08:27,199
framework um certainly for kids

00:08:25,599 --> 00:08:28,800
um preference for components generally

00:08:27,199 --> 00:08:30,160
allows you to do that and um

00:08:28,800 --> 00:08:30,960
irrespective of the kind of language

00:08:30,160 --> 00:08:33,039
your frameworks are

00:08:30,960 --> 00:08:34,560
using now how does the whole process

00:08:33,039 --> 00:08:36,959
happen how um does

00:08:34,560 --> 00:08:37,680
it really really work um in layman's

00:08:36,959 --> 00:08:39,680
terms so

00:08:37,680 --> 00:08:41,440
it's it the whole process is actually

00:08:39,680 --> 00:08:43,680
about four stages right

00:08:41,440 --> 00:08:46,080
when you when you are you know on your

00:08:43,680 --> 00:08:48,560
terminal or wherever you choose to um

00:08:46,080 --> 00:08:49,800
make a command when you run the cf push

00:08:48,560 --> 00:08:52,959
command where the

00:08:49,800 --> 00:08:56,080
umi is installed it's basically

00:08:52,959 --> 00:08:58,240
what we um it has a view trigger so when

00:08:56,080 --> 00:09:00,480
it's when this build has been triggered

00:08:58,240 --> 00:09:02,720
um it uses what we call build packs

00:09:00,480 --> 00:09:04,160
which provides a runtime environment for

00:09:02,720 --> 00:09:06,880
your application i'll talk about

00:09:04,160 --> 00:09:08,800
grid parts um after this slide a little

00:09:06,880 --> 00:09:09,279
bit so you basically use boot packs view

00:09:08,800 --> 00:09:11,120
cut

00:09:09,279 --> 00:09:12,399
basically gives your application you

00:09:11,120 --> 00:09:14,240
irrespective of

00:09:12,399 --> 00:09:15,680
um whatever application you use it gives

00:09:14,240 --> 00:09:17,839
your application is click

00:09:15,680 --> 00:09:19,519
run generally with a series of steps

00:09:17,839 --> 00:09:22,000
that already be specified for

00:09:19,519 --> 00:09:23,600
each um use pack for each good package

00:09:22,000 --> 00:09:23,920
that is very specific to your language

00:09:23,600 --> 00:09:26,240
so

00:09:23,920 --> 00:09:27,040
if your application is a node.js um

00:09:26,240 --> 00:09:29,279
application

00:09:27,040 --> 00:09:31,360
whenever a build is pushed the view

00:09:29,279 --> 00:09:32,080
triggers actually help detect double

00:09:31,360 --> 00:09:33,440
boot pack

00:09:32,080 --> 00:09:35,279
that has been the kind of application

00:09:33,440 --> 00:09:37,040
that has been used and assigned it to a

00:09:35,279 --> 00:09:38,959
which is respective good pack so now

00:09:37,040 --> 00:09:39,920
that big box could provide some stuff

00:09:38,959 --> 00:09:41,839
like npm

00:09:39,920 --> 00:09:43,519
to provide stuff like yarn depending on

00:09:41,839 --> 00:09:45,519
what your application really uses

00:09:43,519 --> 00:09:47,680
then whenever the boot pack is really um

00:09:45,519 --> 00:09:49,200
has finished its job of

00:09:47,680 --> 00:09:50,160
allowing your application and installing

00:09:49,200 --> 00:09:51,440
your application and installing the

00:09:50,160 --> 00:09:52,399
various dependencies needed for your

00:09:51,440 --> 00:09:54,399
application to run

00:09:52,399 --> 00:09:56,320
then your release happens and this

00:09:54,399 --> 00:09:56,800
release is generally created into an

00:09:56,320 --> 00:09:59,519
image

00:09:56,800 --> 00:10:01,600
so a a an image of your application is

00:09:59,519 --> 00:10:02,480
then deployed to kubernetes on wherever

00:10:01,600 --> 00:10:05,519
on um

00:10:02,480 --> 00:10:06,880
um well whatever whatever infrastructure

00:10:05,519 --> 00:10:08,800
your application has been

00:10:06,880 --> 00:10:09,920
um you've basically installed california

00:10:08,800 --> 00:10:12,160
focuses on

00:10:09,920 --> 00:10:13,360
so it basically takes you the image of

00:10:12,160 --> 00:10:14,240
your application and then deploys the

00:10:13,360 --> 00:10:16,480
kubernetes

00:10:14,240 --> 00:10:18,480
um as with just a single command so you

00:10:16,480 --> 00:10:20,160
do need to worry about the stress of

00:10:18,480 --> 00:10:22,240
doing those configurations yourself

00:10:20,160 --> 00:10:23,920
you you really really do not need to

00:10:22,240 --> 00:10:25,440
write down for most of the time

00:10:23,920 --> 00:10:27,120
except you have very specific

00:10:25,440 --> 00:10:29,519
configurations that you need to do

00:10:27,120 --> 00:10:30,560
but you really do not need to have um um

00:10:29,519 --> 00:10:32,160
to write yaml to

00:10:30,560 --> 00:10:33,680
be able to deploy your application to

00:10:32,160 --> 00:10:35,680
kubernetes with traffic all you just

00:10:33,680 --> 00:10:37,760
need to do is do a safe push and

00:10:35,680 --> 00:10:40,079
um leave the rest of the build pack and

00:10:37,760 --> 00:10:40,079
um

00:10:41,600 --> 00:10:45,120
now let's talk about build packs if the

00:10:43,440 --> 00:10:46,000
history of build packs so build packs

00:10:45,120 --> 00:10:48,000
the first

00:10:46,000 --> 00:10:49,600
the first place we basically this cloud

00:10:48,000 --> 00:10:52,320
native board head about

00:10:49,600 --> 00:10:53,600
build pack was on heroku i mean really

00:10:52,320 --> 00:10:55,920
did they love like

00:10:53,600 --> 00:10:56,800
really um brought that change when it

00:10:55,920 --> 00:10:58,640
comes to um

00:10:56,800 --> 00:11:00,000
cloud native community it brought what

00:10:58,640 --> 00:11:01,680
we called butte back now the first

00:11:00,000 --> 00:11:04,880
version of brickpack was created by

00:11:01,680 --> 00:11:08,000
and which is um which was then

00:11:04,880 --> 00:11:08,800
taken which was then taken by vmware but

00:11:08,000 --> 00:11:12,079
basically by

00:11:08,800 --> 00:11:12,880
people sorry and um they made their own

00:11:12,079 --> 00:11:15,200
version

00:11:12,880 --> 00:11:16,880
of um debut pack which is what cloud

00:11:15,200 --> 00:11:17,680
foundry the first version of platform he

00:11:16,880 --> 00:11:20,720
was using

00:11:17,680 --> 00:11:21,440
and um then heroku also created another

00:11:20,720 --> 00:11:23,440
version

00:11:21,440 --> 00:11:25,040
of the boot pack maybe trying to um

00:11:23,440 --> 00:11:26,640
increase their range and also trying to

00:11:25,040 --> 00:11:28,480
make the packs even better

00:11:26,640 --> 00:11:30,800
then the cloud native community came

00:11:28,480 --> 00:11:33,680
together and said okay why do we have to

00:11:30,800 --> 00:11:34,320
um to let's say two different entities

00:11:33,680 --> 00:11:36,720
is trying to

00:11:34,320 --> 00:11:38,160
specify what kind of big pack is created

00:11:36,720 --> 00:11:40,240
and what not to split again

00:11:38,160 --> 00:11:42,079
which basically what now came about was

00:11:40,240 --> 00:11:43,440
the cloud native parts now this is the

00:11:42,079 --> 00:11:45,360
specification that

00:11:43,440 --> 00:11:47,040
all our people other open source

00:11:45,360 --> 00:11:48,079
projects other companies can basically

00:11:47,040 --> 00:11:50,000
use to create their

00:11:48,079 --> 00:11:51,680
um beauty packs so people tell them hero

00:11:50,000 --> 00:11:54,480
who came together to form

00:11:51,680 --> 00:11:54,480
the cloud needs to be

00:11:59,360 --> 00:12:03,040
which i'm going to talk about after this

00:12:00,959 --> 00:12:06,079
slide so that's how on paper

00:12:03,040 --> 00:12:09,279
he came into an extent

00:12:06,079 --> 00:12:10,079
now cf push now when on top only for

00:12:09,279 --> 00:12:12,880
kubernetes

00:12:10,079 --> 00:12:14,320
on basically when you do a cf push the

00:12:12,880 --> 00:12:17,440
app source is taken

00:12:14,320 --> 00:12:18,720
um through a phase to a phase with

00:12:17,440 --> 00:12:21,279
packet to build packs

00:12:18,720 --> 00:12:23,200
now packet of big box is a specification

00:12:21,279 --> 00:12:26,000
of the cloud native blue part

00:12:23,200 --> 00:12:27,839
like i said it's um built by it's a

00:12:26,000 --> 00:12:28,959
project that we offered to on the cloud

00:12:27,839 --> 00:12:31,440
funny foundation

00:12:28,959 --> 00:12:32,800
um by vmware and um it's currently being

00:12:31,440 --> 00:12:35,040
maintained by

00:12:32,800 --> 00:12:36,000
the california community so this

00:12:35,040 --> 00:12:37,839
basically

00:12:36,000 --> 00:12:39,519
this um package boot pack is basically

00:12:37,839 --> 00:12:41,279
an abstraction over the cloud native

00:12:39,519 --> 00:12:42,160
grid pack it uses excitability feedback

00:12:41,279 --> 00:12:44,240
specification

00:12:42,160 --> 00:12:45,760
so anybody can take out of the

00:12:44,240 --> 00:12:47,279
cloudiness without specification and

00:12:45,760 --> 00:12:49,040
make a version of their own build pack

00:12:47,279 --> 00:12:51,200
because this is like the standard so

00:12:49,040 --> 00:12:52,800
the spec has been treated and what

00:12:51,200 --> 00:12:54,720
vmware did with packet will be

00:12:52,800 --> 00:12:56,399
built by this to create a specification

00:12:54,720 --> 00:12:58,160
for it for the cloud finding project now

00:12:56,399 --> 00:13:00,320
packaging blue parts makes it very very

00:12:58,160 --> 00:13:01,440
easy for you to deploy whatever type of

00:13:00,320 --> 00:13:02,639
your application whatever type of

00:13:01,440 --> 00:13:04,079
application you want to deploy on

00:13:02,639 --> 00:13:05,920
kubernetes basically

00:13:04,079 --> 00:13:07,600
so it does the recognizing of your

00:13:05,920 --> 00:13:08,240
application you don't need to tell it

00:13:07,600 --> 00:13:10,160
that

00:13:08,240 --> 00:13:11,519
okay this application is in node it

00:13:10,160 --> 00:13:13,200
searches it scans through your

00:13:11,519 --> 00:13:14,480
application folder and sets it for very

00:13:13,200 --> 00:13:17,519
specific things now

00:13:14,480 --> 00:13:19,040
for a project like a javascript project

00:13:17,519 --> 00:13:20,560
for example when you push when you do a

00:13:19,040 --> 00:13:21,760
cf push button

00:13:20,560 --> 00:13:24,079
goes through the points of scanning

00:13:21,760 --> 00:13:27,440
searching for a package edition json

00:13:24,079 --> 00:13:28,000
a node modules folder or a package logo

00:13:27,440 --> 00:13:29,519
this one

00:13:28,000 --> 00:13:31,440
which is very very specific to the

00:13:29,519 --> 00:13:33,519
javascript community here and

00:13:31,440 --> 00:13:35,760
also for other languages it searches for

00:13:33,519 --> 00:13:38,160
various um very specific files to

00:13:35,760 --> 00:13:39,920
understand that okay this um language

00:13:38,160 --> 00:13:43,120
this particular project is

00:13:39,920 --> 00:13:44,720
just for um a this is possibly

00:13:43,120 --> 00:13:46,720
the python project this is a new js

00:13:44,720 --> 00:13:47,600
project and assigns this to the specific

00:13:46,720 --> 00:13:50,560
items the

00:13:47,600 --> 00:13:50,560
specified grid pack

00:13:50,639 --> 00:13:56,240
to phase to check

00:13:53,920 --> 00:13:59,120
going through it on time installing the

00:13:56,240 --> 00:14:00,959
needed dependencies for that application

00:13:59,120 --> 00:14:02,399
then also at the end of the day

00:14:00,959 --> 00:14:04,160
everything becomes an image which is

00:14:02,399 --> 00:14:04,720
then up to there deployed on kubernetes

00:14:04,160 --> 00:14:07,360
so

00:14:04,720 --> 00:14:08,000
it's still a containerization process

00:14:07,360 --> 00:14:09,600
happens

00:14:08,000 --> 00:14:11,120
in the result of the quantization player

00:14:09,600 --> 00:14:12,160
which is an image is then deployed to

00:14:11,120 --> 00:14:15,040
kubernetes so

00:14:12,160 --> 00:14:16,800
you really don't need to worry about um

00:14:15,040 --> 00:14:18,480
to worry about stressing yourself of

00:14:16,800 --> 00:14:20,800
going through this process yourself

00:14:18,480 --> 00:14:22,480
um with good packs uh with the packet of

00:14:20,800 --> 00:14:24,000
build packs bluetooth generally they

00:14:22,480 --> 00:14:24,639
help you in dictating your application

00:14:24,000 --> 00:14:26,480
language

00:14:24,639 --> 00:14:30,639
and then specify a list of commands that

00:14:26,480 --> 00:14:32,240
are needed for the application to run

00:14:30,639 --> 00:14:33,920
so let's go over the process again to

00:14:32,240 --> 00:14:35,680
make it even much more easier

00:14:33,920 --> 00:14:38,240
so you you have your app source when you

00:14:35,680 --> 00:14:40,160
do a cf push to a cluster that has been

00:14:38,240 --> 00:14:42,480
um that has a kubernetes cluster that

00:14:40,160 --> 00:14:44,399
has been um created for for you with

00:14:42,480 --> 00:14:46,000
cloudfunctional kubernetes it generally

00:14:44,399 --> 00:14:47,279
converts your apps to an image and it's

00:14:46,000 --> 00:14:49,360
then deployed to captain

00:14:47,279 --> 00:14:50,639
to companies that's how simple it is

00:14:49,360 --> 00:14:52,800
with just a single command

00:14:50,639 --> 00:14:54,160
with cf which does the developer

00:14:52,800 --> 00:14:55,440
experience platform you really really

00:14:54,160 --> 00:14:58,399
brings to components

00:14:55,440 --> 00:14:59,519
and um makes it more even easier for um

00:14:58,399 --> 00:15:01,279
developers to

00:14:59,519 --> 00:15:02,560
leverage the power of components in an

00:15:01,279 --> 00:15:05,040
easier way

00:15:02,560 --> 00:15:06,720
for example um before let me just give

00:15:05,040 --> 00:15:08,480
you a personal experience for example

00:15:06,720 --> 00:15:08,959
before i even got into the cloud native

00:15:08,480 --> 00:15:10,720
space

00:15:08,959 --> 00:15:12,800
i did not do anything about kubernetes i

00:15:10,720 --> 00:15:16,560
wouldn't say

00:15:12,800 --> 00:15:18,079
um but um understanding how um the clock

00:15:16,560 --> 00:15:19,839
platform for kubernetes really works

00:15:18,079 --> 00:15:21,360
made me really really deploy

00:15:19,839 --> 00:15:23,519
applications and kubernetes without

00:15:21,360 --> 00:15:25,440
having so much of the technical know-how

00:15:23,519 --> 00:15:27,040
so that's the experience the developer

00:15:25,440 --> 00:15:28,320
experience that california really really

00:15:27,040 --> 00:15:31,040
brings to kubernetes

00:15:28,320 --> 00:15:31,839
um for combat combinations is a really

00:15:31,040 --> 00:15:33,440
really uh

00:15:31,839 --> 00:15:35,360
really really great solution for the

00:15:33,440 --> 00:15:37,120
playing for basically um

00:15:35,360 --> 00:15:40,399
having an infrastructure experience so a

00:15:37,120 --> 00:15:42,160
lot of teams is always application that

00:15:40,399 --> 00:15:44,000
i want to scale so all these different

00:15:42,160 --> 00:15:46,079
components is really really interesting

00:15:44,000 --> 00:15:47,279
now i finally basically just brought the

00:15:46,079 --> 00:15:49,279
cf experience the

00:15:47,279 --> 00:15:50,880
existing original classroom experience

00:15:49,279 --> 00:15:53,920
to um kubernetes

00:15:50,880 --> 00:15:54,560
and then make it easier for developers

00:15:53,920 --> 00:15:56,399
to just

00:15:54,560 --> 00:15:57,759
um plug and play so you just install the

00:15:56,399 --> 00:15:59,120
platform and say like install cloud

00:15:57,759 --> 00:16:01,040
running for when it's on any

00:15:59,120 --> 00:16:02,959
um plus on any infrastructure of your

00:16:01,040 --> 00:16:04,160
choice i personally enjoy using google

00:16:02,959 --> 00:16:07,120
um kubernetes um

00:16:04,160 --> 00:16:08,639
engine so install on any of those and

00:16:07,120 --> 00:16:09,759
you're good to go so just log in and

00:16:08,639 --> 00:16:11,680
you're good to go that's how the whole

00:16:09,759 --> 00:16:13,680
cloud finding process works

00:16:11,680 --> 00:16:14,880
now for example unless this is a very

00:16:13,680 --> 00:16:16,160
simple process now

00:16:14,880 --> 00:16:17,519
you imagine you have a node.js

00:16:16,160 --> 00:16:18,079
application that you want to deploy to

00:16:17,519 --> 00:16:19,519
finance

00:16:18,079 --> 00:16:21,360
that's how the staff only makes that

00:16:19,519 --> 00:16:23,199
process even easier for you when you do

00:16:21,360 --> 00:16:25,120
a safe push

00:16:23,199 --> 00:16:27,199
when the safe push and your project uses

00:16:25,120 --> 00:16:27,199
it

00:16:28,079 --> 00:16:32,320
um detected that this new js application

00:16:31,839 --> 00:16:35,759
this

00:16:32,320 --> 00:16:37,360
steps i just happened now it looks for a

00:16:35,759 --> 00:16:38,880
node a node modulus folder

00:16:37,360 --> 00:16:40,720
if there's no modern modules folder it

00:16:38,880 --> 00:16:43,759
looks for a package of this one folder

00:16:40,720 --> 00:16:47,199
now when this packet evaluation file

00:16:43,759 --> 00:16:48,720
now it runs an npm install which

00:16:47,199 --> 00:16:50,320
automatically creates a new modules

00:16:48,720 --> 00:16:51,600
folder and install the dependencies that

00:16:50,320 --> 00:16:52,639
is needed for your application to

00:16:51,600 --> 00:16:55,279
actually work

00:16:52,639 --> 00:16:56,079
right um you of course use this node

00:16:55,279 --> 00:16:58,240
runtime

00:16:56,079 --> 00:16:59,680
then um from there when all these

00:16:58,240 --> 00:17:01,120
processes has been done one of the

00:16:59,680 --> 00:17:02,959
required dependencies for

00:17:01,120 --> 00:17:04,559
on the application based on what is in

00:17:02,959 --> 00:17:06,720
the package.judicial file

00:17:04,559 --> 00:17:07,839
it then containerize the entire

00:17:06,720 --> 00:17:09,919
application and

00:17:07,839 --> 00:17:11,679
create an image now this image is just

00:17:09,919 --> 00:17:13,439
basically what is going to be deployed

00:17:11,679 --> 00:17:14,799
to kubernetes you do not really need to

00:17:13,439 --> 00:17:17,120
worry about how this how

00:17:14,799 --> 00:17:18,480
this whole process really really happens

00:17:17,120 --> 00:17:20,480
you just need to do is to

00:17:18,480 --> 00:17:22,079
push your node.js application and you're

00:17:20,480 --> 00:17:22,799
good to go this is what happens

00:17:22,079 --> 00:17:24,799
underneath

00:17:22,799 --> 00:17:26,240
and um you really need no need to worry

00:17:24,799 --> 00:17:28,240
about it's all thanks to

00:17:26,240 --> 00:17:29,520
um boot packs the clogging design and

00:17:28,240 --> 00:17:32,799
packet to build packs and

00:17:29,520 --> 00:17:35,520
um and suffering for kubernetes

00:17:32,799 --> 00:17:37,679
now so now just not just application

00:17:35,520 --> 00:17:40,240
code but dev tools as well so something

00:17:37,679 --> 00:17:43,520
is basically makes it really really um

00:17:40,240 --> 00:17:44,640
easy for you to add um other development

00:17:43,520 --> 00:17:46,799
tools to your

00:17:44,640 --> 00:17:47,679
whole process of deployment to

00:17:46,799 --> 00:17:49,360
opennesses

00:17:47,679 --> 00:17:51,120
so i mean a lot of us i mean use

00:17:49,360 --> 00:17:52,640
kubernetes infrastructure but we need to

00:17:51,120 --> 00:17:55,440
we like to always plug extra

00:17:52,640 --> 00:17:56,799
things to it and um to the entire and

00:17:55,440 --> 00:17:59,840
the existing workflow

00:17:56,799 --> 00:18:00,480
so things like github action security

00:17:59,840 --> 00:18:03,200
travis

00:18:00,480 --> 00:18:04,320
for monitoring um graphing permissions

00:18:03,200 --> 00:18:06,160
you can really really

00:18:04,320 --> 00:18:08,000
add these things to your existing

00:18:06,160 --> 00:18:09,039
workflow and to existing deployments to

00:18:08,000 --> 00:18:10,960
kubernetes workflow

00:18:09,039 --> 00:18:12,640
i mean for much more things like um

00:18:10,960 --> 00:18:15,120
track uh monitoring and um

00:18:12,640 --> 00:18:15,120
city

00:18:16,160 --> 00:18:19,200
development seems really really likes to

00:18:17,840 --> 00:18:20,799
include include these things in their

00:18:19,200 --> 00:18:21,440
entire process which is really really

00:18:20,799 --> 00:18:23,280
exciting

00:18:21,440 --> 00:18:25,200
now cleverly brings that experience to

00:18:23,280 --> 00:18:26,640
components and also allows you to plug

00:18:25,200 --> 00:18:29,039
in all these things wherever you want

00:18:26,640 --> 00:18:30,960
and as easy as possible

00:18:29,039 --> 00:18:33,600
now how do you really get started with

00:18:30,960 --> 00:18:34,720
this with um california for kubernetes

00:18:33,600 --> 00:18:37,520
it's really really easy

00:18:34,720 --> 00:18:39,120
you can check out the tutorials on cf um

00:18:37,520 --> 00:18:40,960
website on the cloudfront website

00:18:39,120 --> 00:18:42,400
and we always assume that you already

00:18:40,960 --> 00:18:43,679
have sort of like an existing knowledge

00:18:42,400 --> 00:18:47,120
of combinations of how

00:18:43,679 --> 00:18:48,960
um quantization works and then um

00:18:47,120 --> 00:18:50,400
we have a medium pager we do a lot of

00:18:48,960 --> 00:18:52,480
experiments with various

00:18:50,400 --> 00:18:54,080
other open source projects and um

00:18:52,480 --> 00:18:55,039
frameworks then you can also check the

00:18:54,080 --> 00:18:57,679
youtube if you are more

00:18:55,039 --> 00:18:58,640
visual person on how um software

00:18:57,679 --> 00:19:00,720
components is really

00:18:58,640 --> 00:19:01,840
makes your existing deployments but it

00:19:00,720 --> 00:19:05,039
is even easier

00:19:01,840 --> 00:19:06,640
um yeah so that's pretty much it and we

00:19:05,039 --> 00:19:08,559
also have the california summit coming

00:19:06,640 --> 00:19:10,960
up very soon which is also part of the

00:19:08,559 --> 00:19:12,400
linux foundation and um you can easily

00:19:10,960 --> 00:19:12,880
go to this link and register if you want

00:19:12,400 --> 00:19:14,960
to know

00:19:12,880 --> 00:19:16,640
exactly how california for component is

00:19:14,960 --> 00:19:17,760
really really um if you want to see

00:19:16,640 --> 00:19:19,120
exciting talks

00:19:17,760 --> 00:19:20,799
and from people that have used cloud

00:19:19,120 --> 00:19:22,080
from the pokemon because i want to share

00:19:20,799 --> 00:19:24,559
their experience with it

00:19:22,080 --> 00:19:25,919
um you can always go um um this happens

00:19:24,559 --> 00:19:26,480
this is happening in june i think you

00:19:25,919 --> 00:19:28,960
can

00:19:26,480 --> 00:19:29,520
register and join the events which is um

00:19:28,960 --> 00:19:32,160
really really

00:19:29,520 --> 00:19:33,919
going to be an exciting um devops

00:19:32,160 --> 00:19:35,039
related event so if you're really a big

00:19:33,919 --> 00:19:37,760
fan of devops too

00:19:35,039 --> 00:19:38,720
you can also um i mean most of us i mean

00:19:37,760 --> 00:19:41,280
you cannot behave and

00:19:38,720 --> 00:19:42,559
if you know it um a fan of devops you

00:19:41,280 --> 00:19:45,280
cannot be here so

00:19:42,559 --> 00:19:46,960
uh but then yeah so if you are a fan of

00:19:45,280 --> 00:19:48,559
tables and kubernetes then you can

00:19:46,960 --> 00:19:51,679
always come to the safe summit

00:19:48,559 --> 00:19:53,679
and um so yeah that's pretty much uh

00:19:51,679 --> 00:19:55,520
it's um how you can really really have a

00:19:53,679 --> 00:19:58,400
penis kubernetes deployment

00:19:55,520 --> 00:19:59,840
um solution to um what is currently to

00:19:58,400 --> 00:20:01,600
your existing infrastructure

00:19:59,840 --> 00:20:02,880
so um if you want to reach out to me you

00:20:01,600 --> 00:20:04,720
can always reach out to me i'll put

00:20:02,880 --> 00:20:06,159
underscore block black on twitter if you

00:20:04,720 --> 00:20:07,360
want to have like specific questions you

00:20:06,159 --> 00:20:09,440
need to ask personally

00:20:07,360 --> 00:20:10,880
instead of like on here i don't know but

00:20:09,440 --> 00:20:12,000
i'll advise you to actually questions

00:20:10,880 --> 00:20:13,919
you have it on here

00:20:12,000 --> 00:20:15,120
then um at cloud foundry of course on

00:20:13,919 --> 00:20:16,559
twitter then if you want to join the

00:20:15,120 --> 00:20:18,000
california community

00:20:16,559 --> 00:20:19,440
and really connect with other people

00:20:18,000 --> 00:20:19,919
that are using california for kubernetes

00:20:19,440 --> 00:20:22,400
system

00:20:19,919 --> 00:20:23,600
slack was cleverly for the world so yeah

00:20:22,400 --> 00:20:26,720
that's pretty much

00:20:23,600 --> 00:20:29,440
it um thank you so much for um

00:20:26,720 --> 00:20:30,159
being here and i hope i didn't bore you

00:20:29,440 --> 00:20:33,520
i hope i

00:20:30,159 --> 00:20:35,840
know um talk too much so yeah

00:20:33,520 --> 00:20:36,559
that's pretty much it thank you so much

00:20:35,840 --> 00:20:39,360
everybody for

00:20:36,559 --> 00:20:41,919
coming to this particular presentation

00:20:39,360 --> 00:20:41,919
and um

00:20:44,720 --> 00:20:49,679
looking forward to hearing the questions

00:20:46,799 --> 00:21:03,840
so is there any question that

00:20:49,679 --> 00:21:03,840
i should answer

00:21:20,720 --> 00:21:25,520
hello if you have any questions just

00:21:22,799 --> 00:21:28,080
easily just quickly drop it in

00:21:25,520 --> 00:21:31,840
the chat section and i would google to

00:21:28,080 --> 00:21:31,840
answer it

00:21:54,159 --> 00:21:59,840
so i do not see any question apparently

00:22:03,760 --> 00:22:13,840
i would say sorry could you come on do

00:22:06,400 --> 00:22:13,840
you have any specific question for me

00:22:24,840 --> 00:22:29,600
foreign

00:22:26,400 --> 00:22:31,919
okay okay

00:22:29,600 --> 00:22:33,280
so uchi is having different commuting

00:22:31,919 --> 00:22:41,840
himself and coming on

00:22:33,280 --> 00:22:41,840
the call i think you should

00:23:20,840 --> 00:23:23,840
so

00:23:48,840 --> 00:23:51,840
four

00:23:56,320 --> 00:23:59,440
okay i think there's a little bit of

00:23:58,000 --> 00:24:02,720
technical difficulties

00:23:59,440 --> 00:24:05,760
and i'm sorry yeah so

00:24:02,720 --> 00:24:07,840
so i think someone asks how do you when

00:24:05,760 --> 00:24:19,840
connected to social media yeah so you

00:24:07,840 --> 00:24:19,840
can reach out to me at cooldowns.com

00:24:24,240 --> 00:24:27,600
yeah yeah so i'm not only asked when i

00:24:26,720 --> 00:24:31,279
deployed

00:24:27,600 --> 00:24:32,960
to um hold

00:24:31,279 --> 00:24:35,600
you know on acts where i deployed to

00:24:32,960 --> 00:24:37,360
cloud foundry sorry i need to

00:24:35,600 --> 00:24:39,039
um when i deployed to cloud 400 do i

00:24:37,360 --> 00:24:41,120
have full access to the infrastructure

00:24:39,039 --> 00:24:42,799
and yes you do have access to

00:24:41,120 --> 00:24:43,919
infrastructure yes every single thing

00:24:42,799 --> 00:24:46,000
you begin to do

00:24:43,919 --> 00:24:48,000
um you have access to the infrastructure

00:24:46,000 --> 00:24:49,600
yes you do um essentially i want to know

00:24:48,000 --> 00:24:51,440
if platforms is like a pass for

00:24:49,600 --> 00:24:55,440
kubernetes

00:24:51,440 --> 00:24:57,200
yes and no but generally um

00:24:55,440 --> 00:24:59,279
okay i would say yes so cloud funny big

00:24:57,200 --> 00:25:00,080
soup um i saw it switch where someone

00:24:59,279 --> 00:25:02,320
said um

00:25:00,080 --> 00:25:03,279
you do not need companies you need a

00:25:02,320 --> 00:25:04,720
pass

00:25:03,279 --> 00:25:06,799
cloud funnel basically brings both

00:25:04,720 --> 00:25:07,440
experience it brings it brings a past

00:25:06,799 --> 00:25:09,679
experience

00:25:07,440 --> 00:25:11,360
and also gives you access to kubernetes

00:25:09,679 --> 00:25:12,880
so it's generally a password awareness

00:25:11,360 --> 00:25:15,039
so i agree with you that

00:25:12,880 --> 00:25:15,039
it's

00:25:17,520 --> 00:25:20,640
it's basically an abstraction over

00:25:20,000 --> 00:25:29,840
kubernetes

00:25:20,640 --> 00:25:29,840
so it's a password

00:25:34,960 --> 00:25:39,919
i think which is having issues coming on

00:25:38,159 --> 00:25:41,679
if you have any more questions please do

00:25:39,919 --> 00:25:44,720
let me know

00:25:41,679 --> 00:25:48,320
cool um yeah i'm

00:25:44,720 --> 00:25:50,240
sorry for the inconveniences or the

00:25:48,320 --> 00:25:54,480
inconsistencies

00:25:50,240 --> 00:25:57,360
actually yeah

00:25:54,480 --> 00:25:57,840
yeah so yeah uh thanks a lot uh shadrach

00:25:57,360 --> 00:26:00,000
um i

00:25:57,840 --> 00:26:00,880
i think your session was really really

00:26:00,000 --> 00:26:02,799
insightful

00:26:00,880 --> 00:26:05,039
um and i i thought that was also the

00:26:02,799 --> 00:26:07,440
case for the attendees as well

00:26:05,039 --> 00:26:10,159
um please feel free to drop your

00:26:07,440 --> 00:26:12,640
questions on the chat sections uh

00:26:10,159 --> 00:26:15,279
i go for sure jack will be but i'm happy

00:26:12,640 --> 00:26:18,799
to answer any questions you might have

00:26:15,279 --> 00:26:24,640
uh yeah we still have a lot of time

00:26:18,799 --> 00:26:28,720
left uh i mean like 15 minutes

00:26:24,640 --> 00:26:31,679
well yeah um i'm just going to the

00:26:28,720 --> 00:26:38,760
youtube live to see if we have

00:26:31,679 --> 00:26:41,789
any questions on youtube

00:26:38,760 --> 00:26:41,789
[Music]

00:26:42,480 --> 00:26:50,840
okay cool uh so thanks a lot shadrach

00:26:46,480 --> 00:26:53,840
um if if of course

00:26:50,840 --> 00:26:53,840
if

00:26:55,820 --> 00:26:58,480
[Music]

00:26:57,120 --> 00:27:00,880
if you don't know if you don't if you

00:26:58,480 --> 00:27:03,120
don't know him please feel free to

00:27:00,880 --> 00:27:04,720
follow him on twitter you know i think

00:27:03,120 --> 00:27:06,320
he just

00:27:04,720 --> 00:27:09,120
he just share this twitter handle as

00:27:06,320 --> 00:27:09,120
well on the chats

00:27:10,240 --> 00:27:16,640
to get information so

00:27:13,520 --> 00:27:19,200
anything basically

00:27:16,640 --> 00:27:21,760
yeah yeah yeah yeah thank you so much

00:27:19,200 --> 00:27:24,399
for having me um this is really really

00:27:21,760 --> 00:27:26,799
a very very good um initiative um thank

00:27:24,399 --> 00:27:27,679
you the cnc for doing this for africa um

00:27:26,799 --> 00:27:30,720
thank you

00:27:27,679 --> 00:27:31,360
for you know i'm calling this thank you

00:27:30,720 --> 00:27:34,960
for being

00:27:31,360 --> 00:27:36,159
my co-presenter i guess

00:27:34,960 --> 00:27:37,760
thank you everybody yeah thank you

00:27:36,159 --> 00:27:39,120
everybody for coming on for this

00:27:37,760 --> 00:27:40,960
something this is really really exciting

00:27:39,120 --> 00:27:42,720
to see africa embrace the

00:27:40,960 --> 00:27:44,240
cloud native space and also devops is

00:27:42,720 --> 00:27:45,760
really really interesting and very very

00:27:44,240 --> 00:27:47,679
exciting and

00:27:45,760 --> 00:27:49,679
we only have the sky is really our limit

00:27:47,679 --> 00:27:52,600
i guess it's the limits we have

00:27:49,679 --> 00:27:55,600
so yeah thank you everybody bye and stay

00:27:52,600 --> 00:27:55,600

YouTube URL: https://www.youtube.com/watch?v=a2zjmMU1nz8


