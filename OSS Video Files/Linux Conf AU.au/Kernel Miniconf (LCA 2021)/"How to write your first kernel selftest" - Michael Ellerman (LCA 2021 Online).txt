Title: "How to write your first kernel selftest" - Michael Ellerman (LCA 2021 Online)
Publication date: 2021-02-18
Playlist: Kernel Miniconf (LCA 2021)
Description: 
	Michael Ellerman

https://lca2021.linux.org.au/schedule/presentation/101/

This will be a short introduction to the Linux kernel selftests, what they are, why they are and where they are.

Then we will cover the mechanics of writing a selftest, and why it's not that hard, even if you have no kernel development experience.

By the end of the talk hopefully the viewer will feel capable of writing a simple kernel selftest. I will also offer to assist anyone who wants to try and submit a selftest upstream.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sat Jan 23 16:40:00 2021 at Tux Theatre
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,120 --> 00:00:19,119
final talk of the

00:00:16,400 --> 00:00:19,680
2021 colonel miniconf uh we have michael

00:00:19,119 --> 00:00:22,000
elleman

00:00:19,680 --> 00:00:23,199
who is a linux kernel developer working

00:00:22,000 --> 00:00:24,640
at ibm

00:00:23,199 --> 00:00:27,439
in the greatest city in the world

00:00:24,640 --> 00:00:29,439
canberra um where he is the maintainer

00:00:27,439 --> 00:00:32,079
of the powerpc subsystem

00:00:29,439 --> 00:00:33,360
used by ibm power servers among other

00:00:32,079 --> 00:00:35,280
things

00:00:33,360 --> 00:00:38,480
and he is here today to talk about

00:00:35,280 --> 00:00:41,440
writing kernel self-tests

00:00:38,480 --> 00:00:41,440
please welcome michael

00:00:41,680 --> 00:00:48,000
howdy yeah so i'm michael ellerman

00:00:45,680 --> 00:00:51,199
and i'm going to talk about how to write

00:00:48,000 --> 00:00:52,960
your first kernel self-test

00:00:51,199 --> 00:00:54,719
i'm going to try and give you a brief

00:00:52,960 --> 00:00:56,239
overview of what the kernel self-tests

00:00:54,719 --> 00:00:59,359
are

00:00:56,239 --> 00:01:00,800
and hopefully i can convince some of you

00:00:59,359 --> 00:01:04,239
or one of you

00:01:00,800 --> 00:01:07,360
that you could write a kernel self-test

00:01:04,239 --> 00:01:08,960
uh and i'm also happy if anyone wants to

00:01:07,360 --> 00:01:10,479
write a kernel surf test i'm happy to

00:01:08,960 --> 00:01:13,680
try and help

00:01:10,479 --> 00:01:16,880
after the talk

00:01:13,680 --> 00:01:17,920
so what are they um the kernel self

00:01:16,880 --> 00:01:20,320
tests

00:01:17,920 --> 00:01:21,680
are mostly just small user space

00:01:20,320 --> 00:01:24,560
programs

00:01:21,680 --> 00:01:26,560
that test part of the kernel they're

00:01:24,560 --> 00:01:30,240
mostly written in c

00:01:26,560 --> 00:01:32,720
but some are actually just shell scripts

00:01:30,240 --> 00:01:34,479
some are a combination of a c program

00:01:32,720 --> 00:01:36,560
and a shell script

00:01:34,479 --> 00:01:39,520
and some use a kernel module but those

00:01:36,560 --> 00:01:42,479
are a little more complicated

00:01:39,520 --> 00:01:43,119
they test the currently running kernel

00:01:42,479 --> 00:01:44,320
so

00:01:43,119 --> 00:01:46,399
if you make a change to the kernel

00:01:44,320 --> 00:01:48,640
source you need to build

00:01:46,399 --> 00:01:50,560
and boot that kernel before you can test

00:01:48,640 --> 00:01:52,399
it with a self-test

00:01:50,560 --> 00:01:55,200
which is a little different to how you

00:01:52,399 --> 00:01:57,119
test most software

00:01:55,200 --> 00:01:59,439
but that's because the kernel is a bit

00:01:57,119 --> 00:02:02,799
of a special case

00:01:59,439 --> 00:02:05,600
um k unit is an attempt to create a more

00:02:02,799 --> 00:02:05,600
you know normal

00:02:05,840 --> 00:02:09,520
unit test style workflow for the kernel

00:02:08,800 --> 00:02:11,760
and that was

00:02:09,520 --> 00:02:13,040
talked about earlier today but the

00:02:11,760 --> 00:02:14,560
kernel self-tests

00:02:13,040 --> 00:02:17,920
don't work that way they're they're just

00:02:14,560 --> 00:02:19,920
programs that you run on the kernel

00:02:17,920 --> 00:02:20,959
um that does mean you need to be able to

00:02:19,920 --> 00:02:22,800
boot

00:02:20,959 --> 00:02:26,000
before you can run the kernel self-tests

00:02:22,800 --> 00:02:27,920
which sometimes is a problem

00:02:26,000 --> 00:02:30,640
but you can always just boot with in an

00:02:27,920 --> 00:02:33,040
equals bin binshell

00:02:30,640 --> 00:02:34,840
which reduces the amount of code that

00:02:33,040 --> 00:02:37,599
needs to work before you can run the

00:02:34,840 --> 00:02:41,440
self-tests

00:02:37,599 --> 00:02:43,760
um some of the kernels self-test

00:02:41,440 --> 00:02:46,080
are quite small and you might think of

00:02:43,760 --> 00:02:49,200
them as unit tests

00:02:46,080 --> 00:02:52,080
they all obviously are full programs

00:02:49,200 --> 00:02:54,000
that you need quite a large part of the

00:02:52,080 --> 00:02:56,560
kernel to work

00:02:54,000 --> 00:02:59,760
to run them at all so they're sort of

00:02:56,560 --> 00:03:02,840
not classic unit tests but

00:02:59,760 --> 00:03:04,159
some of them could be thought of as unit

00:03:02,840 --> 00:03:05,519
tests

00:03:04,159 --> 00:03:07,200
and i guess i should say some of them

00:03:05,519 --> 00:03:10,720
are not unit tests they're

00:03:07,200 --> 00:03:11,599
really big and complicated uh so where

00:03:10,720 --> 00:03:15,360
are they

00:03:11,599 --> 00:03:17,680
they're kept in the kernel tree which is

00:03:15,360 --> 00:03:20,800
a simple place to put them they're not

00:03:17,680 --> 00:03:20,800
in an external project

00:03:21,040 --> 00:03:26,400
uh and that's that makes it easy for

00:03:23,040 --> 00:03:28,400
kernel developers to add tests

00:03:26,400 --> 00:03:30,959
so they're in this tools testing

00:03:28,400 --> 00:03:33,519
self-test directory

00:03:30,959 --> 00:03:34,640
and there's many subdirectories below

00:03:33,519 --> 00:03:37,760
there

00:03:34,640 --> 00:03:40,080
for various subsystems so there's

00:03:37,760 --> 00:03:41,519
a lot of net networking tests which are

00:03:40,080 --> 00:03:44,560
in the net directory

00:03:41,519 --> 00:03:47,760
there's architecture specific tests uh

00:03:44,560 --> 00:03:50,640
and you know f trace and rcu

00:03:47,760 --> 00:03:52,239
there's a whole bunch of different

00:03:50,640 --> 00:03:56,319
subsystems

00:03:52,239 --> 00:03:59,840
of tests uh and those are mostly managed

00:03:56,319 --> 00:04:02,400
by the relevant subsystem and then

00:03:59,840 --> 00:04:04,480
there's a little bit of shared logic to

00:04:02,400 --> 00:04:08,319
do the make files and

00:04:04,480 --> 00:04:08,319
the harness scripts and so on

00:04:10,159 --> 00:04:16,320
why do we have kernel self tests

00:04:13,599 --> 00:04:17,280
so this is the commit that created the

00:04:16,320 --> 00:04:21,199
self-tests

00:04:17,280 --> 00:04:21,919
back in 2012 and i think it nicely sums

00:04:21,199 --> 00:04:23,759
up

00:04:21,919 --> 00:04:25,520
what i think the kernel self-test should

00:04:23,759 --> 00:04:27,919
be which is

00:04:25,520 --> 00:04:29,840
a place to collect tests that would be

00:04:27,919 --> 00:04:33,520
lost otherwise

00:04:29,840 --> 00:04:36,080
uh or as frederick put it

00:04:33,520 --> 00:04:37,440
that would otherwise be left to rust in

00:04:36,080 --> 00:04:40,320
peace

00:04:37,440 --> 00:04:41,919
which is very poetic but you know all

00:04:40,320 --> 00:04:43,120
kernel developers write tests all the

00:04:41,919 --> 00:04:46,560
time

00:04:43,120 --> 00:04:49,280
but sometimes they're a little bit hacky

00:04:46,560 --> 00:04:50,000
and they would end up getting lost they

00:04:49,280 --> 00:04:52,320
wouldn't get

00:04:50,000 --> 00:04:53,199
upstreamed anywhere and so the kernel

00:04:52,320 --> 00:04:54,960
self tests

00:04:53,199 --> 00:04:58,320
well one of the goals is to just have a

00:04:54,960 --> 00:04:58,320
place to put those kind of tests

00:04:58,720 --> 00:05:02,080
so like i said it's easy for kernel

00:05:00,800 --> 00:05:04,880
developers

00:05:02,080 --> 00:05:05,280
to add tests but it should be easy and

00:05:04,880 --> 00:05:06,639
that's

00:05:05,280 --> 00:05:08,800
you know gives kernel developers one

00:05:06,639 --> 00:05:11,840
less excuse

00:05:08,800 --> 00:05:11,840
for writing a test

00:05:13,039 --> 00:05:17,520
uh the the tests having them in the

00:05:15,680 --> 00:05:20,000
kernel tree allows the tests to be

00:05:17,520 --> 00:05:23,199
merged simultaneously with the fixes

00:05:20,000 --> 00:05:25,919
or with with kernel fixes um

00:05:23,199 --> 00:05:26,880
and that's that's really helpful for

00:05:25,919 --> 00:05:30,080
back porting

00:05:26,880 --> 00:05:32,960
you can backboard the fix and the test

00:05:30,080 --> 00:05:33,680
you know one commit after the other uh

00:05:32,960 --> 00:05:35,280
rather than

00:05:33,680 --> 00:05:37,120
if if the tests are in an external

00:05:35,280 --> 00:05:40,000
repository you then

00:05:37,120 --> 00:05:41,199
have problems where you have to sync up

00:05:40,000 --> 00:05:43,440
the back ported

00:05:41,199 --> 00:05:44,800
kernel with the back port of the test

00:05:43,440 --> 00:05:48,479
and so on

00:05:44,800 --> 00:05:52,080
so that's a big advantage i think

00:05:48,479 --> 00:05:55,120
um and yeah i think

00:05:52,080 --> 00:05:56,880
we want to have a low barrier to entry

00:05:55,120 --> 00:05:58,880
so that the kernel self test can be

00:05:56,880 --> 00:06:03,919
somewhere that collects

00:05:58,880 --> 00:06:06,800
collects tests that don't fit elsewhere

00:06:03,919 --> 00:06:08,800
and that's sort of a double edged sword

00:06:06,800 --> 00:06:10,639
some of the tests are not as polished as

00:06:08,800 --> 00:06:13,919
you would like them to be

00:06:10,639 --> 00:06:16,160
uh you know they don't necessarily run

00:06:13,919 --> 00:06:17,360
properly if certain config options are

00:06:16,160 --> 00:06:20,240
missing

00:06:17,360 --> 00:06:21,680
or they require special setup or

00:06:20,240 --> 00:06:24,319
whatever

00:06:21,680 --> 00:06:25,919
but it's still better to have the test

00:06:24,319 --> 00:06:27,360
somewhere

00:06:25,919 --> 00:06:29,600
and i think there's maybe an opportunity

00:06:27,360 --> 00:06:31,199
there to

00:06:29,600 --> 00:06:33,440
for someone to curate the test a little

00:06:31,199 --> 00:06:37,520
bit more and try and

00:06:33,440 --> 00:06:40,400
you know tidy up the long tail of

00:06:37,520 --> 00:06:40,400
messier tests

00:06:41,440 --> 00:06:46,080
so how do you build them

00:06:44,479 --> 00:06:47,759
like i said they're in the kernel tree

00:06:46,080 --> 00:06:50,479
so you just clone

00:06:47,759 --> 00:06:52,319
linus's tree or or whichever tree you

00:06:50,479 --> 00:06:53,599
have

00:06:52,319 --> 00:06:56,000
and then they're in the tools testing

00:06:53,599 --> 00:06:59,120
self-test directory

00:06:56,000 --> 00:07:01,199
and i think the most polished way to

00:06:59,120 --> 00:07:02,960
build them is to use the make install

00:07:01,199 --> 00:07:04,639
target

00:07:02,960 --> 00:07:06,080
and that just installs them in the

00:07:04,639 --> 00:07:10,080
current directory it doesn't

00:07:06,080 --> 00:07:13,280
put them in user or anywhere in this

00:07:10,080 --> 00:07:15,280
case self-test install directory you can

00:07:13,280 --> 00:07:18,800
also build the tests

00:07:15,280 --> 00:07:19,840
in place or out of tree and a lot of the

00:07:18,800 --> 00:07:23,520
tests can be built

00:07:19,840 --> 00:07:24,960
individually and so on but those cases

00:07:23,520 --> 00:07:25,680
are all a little more complicated so i

00:07:24,960 --> 00:07:26,960
think this is

00:07:25,680 --> 00:07:31,120
if you're starting out this is the way

00:07:26,960 --> 00:07:33,199
to go you just type make install

00:07:31,120 --> 00:07:35,120
um like i said before there's a wide

00:07:33,199 --> 00:07:37,919
variety of tests so

00:07:35,120 --> 00:07:39,360
some of them require libraries you know

00:07:37,919 --> 00:07:41,599
specific libraries

00:07:39,360 --> 00:07:45,120
and if you don't have those installed

00:07:41,599 --> 00:07:47,840
then those tests just will fail to build

00:07:45,120 --> 00:07:49,759
and that's that's deliberate because we

00:07:47,840 --> 00:07:51,120
don't want

00:07:49,759 --> 00:07:52,879
we don't want everyone to have to

00:07:51,120 --> 00:07:53,840
install all the dependencies for all the

00:07:52,879 --> 00:07:57,840
tests

00:07:53,840 --> 00:07:59,360
in order to build any tests

00:07:57,840 --> 00:08:01,680
the build will just continue even if

00:07:59,360 --> 00:08:03,759
you're missing some libraries

00:08:01,680 --> 00:08:05,360
and yeah that's on purpose if you want

00:08:03,759 --> 00:08:07,280
to build every test

00:08:05,360 --> 00:08:12,319
you need to kind of go back and check

00:08:07,280 --> 00:08:16,319
you have all the prerequisites

00:08:12,319 --> 00:08:19,440
the nicest nicest way to run a test

00:08:16,319 --> 00:08:20,800
is with the run k self-test script which

00:08:19,440 --> 00:08:23,440
is

00:08:20,800 --> 00:08:25,199
generated into the k-self test install

00:08:23,440 --> 00:08:28,400
directory

00:08:25,199 --> 00:08:29,759
and as of recent kernels this has some

00:08:28,400 --> 00:08:32,880
nice

00:08:29,759 --> 00:08:35,519
filtering and output options

00:08:32,880 --> 00:08:36,479
uh so like here we're using the dash t

00:08:35,519 --> 00:08:39,839
which says

00:08:36,479 --> 00:08:40,560
to run one specific test in this case

00:08:39,839 --> 00:08:45,519
it's the proc

00:08:40,560 --> 00:08:49,360
self test and you can see this generates

00:08:45,519 --> 00:08:52,480
uh tap output which is a

00:08:49,360 --> 00:08:52,959
defined format for for test output that

00:08:52,480 --> 00:08:56,000
can be

00:08:52,959 --> 00:08:58,399
parsed by various tools and

00:08:56,000 --> 00:08:59,120
you know jenkins and so on can display

00:08:58,399 --> 00:09:03,040
it

00:08:59,120 --> 00:09:04,959
display the result of that for you

00:09:03,040 --> 00:09:06,480
you can also run a lot of the tests

00:09:04,959 --> 00:09:09,680
manually because they're just

00:09:06,480 --> 00:09:11,839
small programs so in this case

00:09:09,680 --> 00:09:15,200
you could just cd into proc and run the

00:09:11,839 --> 00:09:15,200
self binary directly

00:09:16,000 --> 00:09:19,760
not all of the tests can be run that way

00:09:18,480 --> 00:09:23,519
some of them require more

00:09:19,760 --> 00:09:25,200
elaborate setup which is handled by

00:09:23,519 --> 00:09:27,519
running them through the run k self-test

00:09:25,200 --> 00:09:29,120
script but if you're writing a simple

00:09:27,519 --> 00:09:31,600
test yourself you can always just run it

00:09:29,120 --> 00:09:31,600
manually

00:09:33,040 --> 00:09:38,080
and how to run all of the tests so you

00:09:35,920 --> 00:09:42,320
can use

00:09:38,080 --> 00:09:42,320
the run case off test script again

00:09:43,519 --> 00:09:49,920
s just says to summarize the output

00:09:47,680 --> 00:09:51,360
basically it you know gives you a

00:09:49,920 --> 00:09:53,600
summary rather than all the output of

00:09:51,360 --> 00:09:55,920
every test

00:09:53,600 --> 00:09:58,080
uh i would probably advise against not

00:09:55,920 --> 00:10:00,080
doing this on your laptop

00:09:58,080 --> 00:10:01,440
some of the tests could potentially

00:10:00,080 --> 00:10:04,000
crash your machine

00:10:01,440 --> 00:10:05,920
that's pretty rare i can't actually

00:10:04,000 --> 00:10:08,560
remember the last time a self-test

00:10:05,920 --> 00:10:09,680
crashed a machine for me but you never

00:10:08,560 --> 00:10:11,279
know

00:10:09,680 --> 00:10:13,760
so if you want to run all the tests i

00:10:11,279 --> 00:10:15,360
would suggest you do it in a vm

00:10:13,760 --> 00:10:17,040
some of the tests won't run unless

00:10:15,360 --> 00:10:18,720
you're root

00:10:17,040 --> 00:10:20,160
and that's that's a red flag i would

00:10:18,720 --> 00:10:21,839
definitely not run those tests on my

00:10:20,160 --> 00:10:24,640
laptop

00:10:21,839 --> 00:10:25,920
and some require certain config options

00:10:24,640 --> 00:10:30,959
or hardware

00:10:25,920 --> 00:10:32,880
or setup etc so some of them will fail

00:10:30,959 --> 00:10:35,760
unless you have that all in place and

00:10:32,880 --> 00:10:37,519
some can take quite a while

00:10:35,760 --> 00:10:39,680
so to begin with i definitely recommend

00:10:37,519 --> 00:10:43,120
just running one or two tests

00:10:39,680 --> 00:10:43,120
to to get a feel for things

00:10:45,040 --> 00:10:48,399
so this is an example of a simple

00:10:46,560 --> 00:10:51,680
self-test this is

00:10:48,399 --> 00:10:53,040
a real self-test and my point here is

00:10:51,680 --> 00:10:54,800
that

00:10:53,040 --> 00:10:56,560
it sounds scary that you're writing a

00:10:54,800 --> 00:10:58,640
self-test for the kernel but

00:10:56,560 --> 00:11:00,560
it doesn't have to be they can be really

00:10:58,640 --> 00:11:04,160
quite simple

00:11:00,560 --> 00:11:07,519
this really only has two syscalls that

00:11:04,160 --> 00:11:13,040
are you know part of the test itself

00:11:07,519 --> 00:11:13,040
that's this get pid and read link

00:11:13,360 --> 00:11:16,880
and so what this test does is it gets

00:11:15,839 --> 00:11:20,240
the pid

00:11:16,880 --> 00:11:22,880
of the current process the process id

00:11:20,240 --> 00:11:24,320
it prints that into a buffer and then it

00:11:22,880 --> 00:11:27,360
does read link on proc

00:11:24,320 --> 00:11:29,279
self so proc self is a sim link

00:11:27,360 --> 00:11:31,279
and read link gives you the content of

00:11:29,279 --> 00:11:34,240
the sim link which tells you

00:11:31,279 --> 00:11:35,680
where it would link to and for proc self

00:11:34,240 --> 00:11:38,320
it's the pit

00:11:35,680 --> 00:11:39,040
of the process and then we down the

00:11:38,320 --> 00:11:42,800
bottom here

00:11:39,040 --> 00:11:45,120
it asserts that the

00:11:42,800 --> 00:11:46,399
value of the read link you know the pid

00:11:45,120 --> 00:11:50,240
we got from here

00:11:46,399 --> 00:11:52,800
matches the pid we got from get pid

00:11:50,240 --> 00:11:54,240
and that perhaps seems like a trivial

00:11:52,800 --> 00:11:56,240
test

00:11:54,240 --> 00:11:57,839
you might think surely user space

00:11:56,240 --> 00:12:01,040
wouldn't even boot

00:11:57,839 --> 00:12:05,440
if that was broken and

00:12:01,040 --> 00:12:08,480
that's true for a fully blown user space

00:12:05,440 --> 00:12:11,120
i tried it but if you're using

00:12:08,480 --> 00:12:12,639
for example busybox in it you can have a

00:12:11,120 --> 00:12:15,839
completely broken proc self

00:12:12,639 --> 00:12:16,399
and it will boot just fine so this is

00:12:15,839 --> 00:12:19,519
still

00:12:16,399 --> 00:12:22,000
i think a nice little test

00:12:19,519 --> 00:12:23,200
the other thing this the other thing

00:12:22,000 --> 00:12:24,079
that would be interesting to add to this

00:12:23,200 --> 00:12:27,120
test is some

00:12:24,079 --> 00:12:28,560
namespace uh you know some tests under

00:12:27,120 --> 00:12:29,440
different namespace conditions pid

00:12:28,560 --> 00:12:32,800
namespace

00:12:29,440 --> 00:12:34,320
proc mount etc

00:12:32,800 --> 00:12:38,160
but really my point here is just that a

00:12:34,320 --> 00:12:40,320
small test can be meaningful

00:12:38,160 --> 00:12:42,399
and this is another small test it's a

00:12:40,320 --> 00:12:45,839
little bit bigger i didn't quite

00:12:42,399 --> 00:12:48,560
fit it on the slide um i had

00:12:45,839 --> 00:12:50,240
i only dropped two lines and where the

00:12:48,560 --> 00:12:53,120
ellipsis is

00:12:50,240 --> 00:12:55,200
but this is actually this tests like

00:12:53,120 --> 00:12:57,839
quite a major change

00:12:55,200 --> 00:12:59,360
to the way the kernel works uh that's

00:12:57,839 --> 00:13:00,480
i've got the shar up here if you want to

00:12:59,360 --> 00:13:03,600
have a look

00:13:00,480 --> 00:13:07,120
um so prior to five eight

00:13:03,600 --> 00:13:08,000
you couldn't mount multiple instances of

00:13:07,120 --> 00:13:11,200
proc

00:13:08,000 --> 00:13:13,920
in the same pit name space

00:13:11,200 --> 00:13:14,320
which i didn't realize actually but and

00:13:13,920 --> 00:13:16,079
in 5

00:13:14,320 --> 00:13:17,519
8 they changed that so you can now mount

00:13:16,079 --> 00:13:21,600
multiple instances and this

00:13:17,519 --> 00:13:23,279
is the test of that um

00:13:21,600 --> 00:13:25,040
and if you're not really sure what that

00:13:23,279 --> 00:13:26,480
means that's that's okay my point is

00:13:25,040 --> 00:13:28,480
really just that

00:13:26,480 --> 00:13:31,040
you know this is 20 lines of code and it

00:13:28,480 --> 00:13:33,519
tests quite a major feature

00:13:31,040 --> 00:13:34,959
or you know quite a major change in a

00:13:33,519 --> 00:13:37,279
feature

00:13:34,959 --> 00:13:38,639
so tests don't have to be big they don't

00:13:37,279 --> 00:13:40,959
have to involve

00:13:38,639 --> 00:13:41,839
multiple threads and so on and so forth

00:13:40,959 --> 00:13:46,720
they can be

00:13:41,839 --> 00:13:46,720
fairly small and still test something

00:13:46,839 --> 00:13:50,800
meaningful

00:13:48,320 --> 00:13:53,360
so if you want to add a simple self-test

00:13:50,800 --> 00:13:58,079
it's pretty straightforward

00:13:53,360 --> 00:14:01,279
you create a directory

00:13:58,079 --> 00:14:03,839
under self-tests

00:14:01,279 --> 00:14:05,920
you then create this little make file

00:14:03,839 --> 00:14:07,920
which

00:14:05,920 --> 00:14:09,920
if you've written make files before you

00:14:07,920 --> 00:14:12,560
know this is just a little part

00:14:09,920 --> 00:14:14,839
a stub of a make file and all the gory

00:14:12,560 --> 00:14:17,279
logic is in this

00:14:14,839 --> 00:14:18,240
lib.mk but basically you just tell it

00:14:17,279 --> 00:14:21,600
the name of

00:14:18,240 --> 00:14:23,440
your program the c flags you want

00:14:21,600 --> 00:14:26,079
and then you include the the helper

00:14:23,440 --> 00:14:29,199
makefile functions

00:14:26,079 --> 00:14:31,680
and then you create your c file with

00:14:29,199 --> 00:14:35,199
your test in it

00:14:31,680 --> 00:14:38,399
and you type make and that's it

00:14:35,199 --> 00:14:41,440
you've written a self-test now

00:14:38,399 --> 00:14:44,480
it's true this is not a very good test

00:14:41,440 --> 00:14:46,320
but like i showed on the previous slides

00:14:44,480 --> 00:14:49,600
you could write a meaningful test in

00:14:46,320 --> 00:14:49,600
only a few tens of lines

00:14:52,800 --> 00:14:56,240
to actually integrate yourself test into

00:14:55,839 --> 00:14:59,680
the

00:14:56,240 --> 00:15:02,079
the self-test framework

00:14:59,680 --> 00:15:04,880
there's one more step which is to add

00:15:02,079 --> 00:15:09,199
your newly created directory

00:15:04,880 --> 00:15:09,199
to the top level self-test make file

00:15:10,240 --> 00:15:14,560
and once you've done that you can then

00:15:12,959 --> 00:15:17,839
do make install

00:15:14,560 --> 00:15:20,720
and so on like i showed before and

00:15:17,839 --> 00:15:22,399
your test will be built and installed

00:15:20,720 --> 00:15:24,560
and you can run it

00:15:22,399 --> 00:15:26,639
with the harness script like all the

00:15:24,560 --> 00:15:27,519
other tests and at that point it's

00:15:26,639 --> 00:15:30,320
basically

00:15:27,519 --> 00:15:32,160
a fully blown self-test and if you

00:15:30,320 --> 00:15:36,320
submit that upstream it will be run

00:15:32,160 --> 00:15:36,320
through all the various ci's and so on

00:15:39,519 --> 00:15:47,519
so that's how you do a test but

00:15:44,079 --> 00:15:48,800
what needs testing um

00:15:47,519 --> 00:15:51,199
and i was hoping to come up with some

00:15:48,800 --> 00:15:53,040
really you know

00:15:51,199 --> 00:15:54,959
good examples on here and i'm i'm not

00:15:53,040 --> 00:15:58,560
entirely happy with them but

00:15:54,959 --> 00:16:00,079
here's some ideas anyway um i'll try not

00:15:58,560 --> 00:16:01,759
to read the whole slide but

00:16:00,079 --> 00:16:04,160
basically there's lots of things that

00:16:01,759 --> 00:16:07,519
could use a self-test

00:16:04,160 --> 00:16:09,440
so the kernel has 300 something syscalls

00:16:07,519 --> 00:16:10,959
and there's definitely not a self-test

00:16:09,440 --> 00:16:13,199
for each one

00:16:10,959 --> 00:16:15,519
and obviously each syscall could

00:16:13,199 --> 00:16:17,920
potentially have hundreds of tests

00:16:15,519 --> 00:16:19,600
at least for some syscalls so there's

00:16:17,920 --> 00:16:22,800
definitely some

00:16:19,600 --> 00:16:24,480
potential there and then things in cis

00:16:22,800 --> 00:16:26,160
and proc

00:16:24,480 --> 00:16:28,079
could be tested more i think there's

00:16:26,160 --> 00:16:32,160
there's a few for proc

00:16:28,079 --> 00:16:33,519
um like maybe 10 or 20 but

00:16:32,160 --> 00:16:35,759
you know there's a lot of stuff in proc

00:16:33,519 --> 00:16:37,759
and a lot of stuff insists

00:16:35,759 --> 00:16:39,120
and this commit i mentioned here this

00:16:37,759 --> 00:16:42,079
was a

00:16:39,120 --> 00:16:44,639
reasonably bad security issue that could

00:16:42,079 --> 00:16:46,959
possibly have been caught by a test

00:16:44,639 --> 00:16:49,600
looking at a profile it was it was just

00:16:46,959 --> 00:16:52,959
a profile that had some junk in it

00:16:49,600 --> 00:16:55,680
and then older features newer features

00:16:52,959 --> 00:16:56,399
you know some have tests some don't and

00:16:55,680 --> 00:16:58,240
then

00:16:56,399 --> 00:16:59,519
there's still quite a few new syscalls

00:16:58,240 --> 00:17:02,639
that don't have a an

00:16:59,519 --> 00:17:03,199
entry test so i'm not saying there's no

00:17:02,639 --> 00:17:05,600
tests

00:17:03,199 --> 00:17:06,559
anywhere for these things but as far as

00:17:05,600 --> 00:17:10,000
i can tell there's

00:17:06,559 --> 00:17:13,280
there's none in the self-tests in the

00:17:10,000 --> 00:17:15,360
in the tree and

00:17:13,280 --> 00:17:17,199
some of these might be easier or harder

00:17:15,360 --> 00:17:20,240
to test

00:17:17,199 --> 00:17:22,160
um so yeah

00:17:20,240 --> 00:17:23,919
you know don't dive in and just write a

00:17:22,160 --> 00:17:26,959
test for one necessarily but

00:17:23,919 --> 00:17:28,799
that's some ideas and then of course you

00:17:26,959 --> 00:17:32,799
know corner cases and stress tests are

00:17:28,799 --> 00:17:36,880
a great fertile ground for writing tests

00:17:32,799 --> 00:17:36,880
but they are often harder to test

00:17:39,200 --> 00:17:44,559
so summing up so hopefully

00:17:42,480 --> 00:17:47,840
i've convinced you that kernel self

00:17:44,559 --> 00:17:51,520
tests are not scary

00:17:47,840 --> 00:17:54,640
if you can write c or shell

00:17:51,520 --> 00:17:57,039
or some combination of the two or awk

00:17:54,640 --> 00:17:59,360
um you can probably write a kernel

00:17:57,039 --> 00:18:01,840
self-test

00:17:59,360 --> 00:18:03,679
and integrating a test is is simple it

00:18:01,840 --> 00:18:05,039
should be simple

00:18:03,679 --> 00:18:06,799
it may be a little harder than my

00:18:05,039 --> 00:18:08,720
example if you write a test

00:18:06,799 --> 00:18:10,160
it might belong in an existing directory

00:18:08,720 --> 00:18:11,520
and so you'd need to coordinate with

00:18:10,160 --> 00:18:14,559
those people but

00:18:11,520 --> 00:18:17,679
that's not hard

00:18:14,559 --> 00:18:21,120
what is hard possibly is

00:18:17,679 --> 00:18:23,679
submitting a test upstream so

00:18:21,120 --> 00:18:25,679
as is usual with linux it's a bit

00:18:23,679 --> 00:18:28,160
complicated

00:18:25,679 --> 00:18:29,679
depending on what test you write it

00:18:28,160 --> 00:18:31,919
might end up in a different part of the

00:18:29,679 --> 00:18:35,039
self-test directory and that would

00:18:31,919 --> 00:18:38,880
influence who you should send it to so

00:18:35,039 --> 00:18:38,880
you would use get maintainer.pl

00:18:39,120 --> 00:18:45,360
as you do with all other kernel code

00:18:42,799 --> 00:18:46,880
um but if you're not sure where it

00:18:45,360 --> 00:18:49,679
should go

00:18:46,880 --> 00:18:50,400
or you're just not sure in general you

00:18:49,679 --> 00:18:54,720
can

00:18:50,400 --> 00:18:57,840
send it to the linux k self test list

00:18:54,720 --> 00:18:59,120
which is this address here uh and

00:18:57,840 --> 00:19:00,080
hopefully someone there would be able to

00:18:59,120 --> 00:19:03,520
help you

00:19:00,080 --> 00:19:06,160
work out where it should go

00:19:03,520 --> 00:19:07,840
and also if anyone wants to write a test

00:19:06,160 --> 00:19:10,640
i am happy to help

00:19:07,840 --> 00:19:11,760
uh i really think it's a good way to get

00:19:10,640 --> 00:19:13,200
into the kernel

00:19:11,760 --> 00:19:16,640
you can learn the kernel development

00:19:13,200 --> 00:19:20,160
flow it's it's fairly low key

00:19:16,640 --> 00:19:22,480
so if you send email to this address

00:19:20,160 --> 00:19:24,880
uh it will go to my inbox please don't

00:19:22,480 --> 00:19:28,320
abuse that people

00:19:24,880 --> 00:19:28,320
and yeah i'm happy to help

00:19:34,880 --> 00:19:39,840
okay thank you very much michael

00:19:40,360 --> 00:19:43,360

YouTube URL: https://www.youtube.com/watch?v=LQUGxewY1GI


