Title: "futex2: An update" - AndrÃ© Almeida (LCA 2021 Online)
Publication date: 2021-02-18
Playlist: Kernel Miniconf (LCA 2021)
Description: 
	AndrÃ© Almeida

https://lca2021.linux.org.au/schedule/presentation/99/

futex2 is a work in progress system call to replace the current futex implementation. This new interface will have features to allow better resources utilization from the system, like NUMA-awareness, and different futexes' sizes. This talk will provide an overview of the interface, along with the current state of the development and some initial results that we got by modifying Proton/Wine to use it.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sat Jan 23 10:45:00 2021 at Tux Theatre
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,280 --> 00:00:18,160
okay uh

00:00:16,080 --> 00:00:19,920
good morning everyone um or good

00:00:18,160 --> 00:00:21,520
afternoon or evening uh depending on

00:00:19,920 --> 00:00:24,240
wherever you may happen to be uh

00:00:21,520 --> 00:00:25,599
watching this um around the world uh my

00:00:24,240 --> 00:00:28,640
name's andrew i'm the

00:00:25,599 --> 00:00:30,640
colonel miniconf convener um

00:00:28,640 --> 00:00:32,559
coming to you live from the city where

00:00:30,640 --> 00:00:33,520
you should have been uh canberra here in

00:00:32,559 --> 00:00:36,239
uh nanawal and

00:00:33,520 --> 00:00:38,000
nanbury country um in the australian

00:00:36,239 --> 00:00:41,040
capital territory

00:00:38,000 --> 00:00:44,160
um and yes thank you for turning up

00:00:41,040 --> 00:00:46,480
uh to lca online

00:00:44,160 --> 00:00:48,800
and thank you for coming to the colonel

00:00:46,480 --> 00:00:50,079
miniconf

00:00:48,800 --> 00:00:51,760
this is normally where i'd show you a

00:00:50,079 --> 00:00:52,480
schedule but you've all got a browser

00:00:51,760 --> 00:00:54,879
open

00:00:52,480 --> 00:00:55,960
so if you want to see the schedule just

00:00:54,879 --> 00:00:58,399
head to the

00:00:55,960 --> 00:01:00,960
linux.comu website and check out the

00:00:58,399 --> 00:01:00,960
schedule there

00:01:01,520 --> 00:01:06,799
and yes we'll um with regards to

00:01:04,879 --> 00:01:08,560
questions and answers um we're going to

00:01:06,799 --> 00:01:11,360
have uh just depending

00:01:08,560 --> 00:01:12,400
throughout the day depending on the

00:01:11,360 --> 00:01:14,240
speaker

00:01:12,400 --> 00:01:15,759
we're going to have some different

00:01:14,240 --> 00:01:18,960
approaches to how we take

00:01:15,759 --> 00:01:22,159
questions and answers um

00:01:18,960 --> 00:01:24,479
so for the first talk

00:01:22,159 --> 00:01:25,439
we're going to be taking q a we're going

00:01:24,479 --> 00:01:28,880
to have a

00:01:25,439 --> 00:01:31,119
live q a session uh after the talk um

00:01:28,880 --> 00:01:32,320
so the best way to ask your questions is

00:01:31,119 --> 00:01:36,240
to join the chat

00:01:32,320 --> 00:01:38,000
in um in uh venulis

00:01:36,240 --> 00:01:40,400
uh which you should be able to see just

00:01:38,000 --> 00:01:43,360
on the side of the

00:01:40,400 --> 00:01:44,960
of the video stream uh if you join the

00:01:43,360 --> 00:01:46,159
chat and when you've got a question to

00:01:44,960 --> 00:01:48,159
ask

00:01:46,159 --> 00:01:49,680
at the end please keep your questions to

00:01:48,159 --> 00:01:52,240
the end of the q a

00:01:49,680 --> 00:01:53,119
section and just prefix your questions

00:01:52,240 --> 00:01:56,240
with a big

00:01:53,119 --> 00:01:58,159
all caps question so that we

00:01:56,240 --> 00:02:01,520
can see it and that we're able to pass

00:01:58,159 --> 00:02:03,119
it on to the speaker

00:02:01,520 --> 00:02:04,799
just the other thing to note you'll also

00:02:03,119 --> 00:02:07,600
see in venulis

00:02:04,799 --> 00:02:08,479
in the if you look at the browseal

00:02:07,600 --> 00:02:10,879
channels list

00:02:08,479 --> 00:02:11,920
um on the left hand side you'll be able

00:02:10,879 --> 00:02:14,800
to join

00:02:11,920 --> 00:02:15,440
uh the colonel miniconf boss channel um

00:02:14,800 --> 00:02:16,400
that's where

00:02:15,440 --> 00:02:18,640
we're gonna be able to keep the

00:02:16,400 --> 00:02:19,920
discussion going in text form um just

00:02:18,640 --> 00:02:23,520
during break times

00:02:19,920 --> 00:02:24,879
or uh after the talks are over and also

00:02:23,520 --> 00:02:26,720
if you want to keep talking with the

00:02:24,879 --> 00:02:27,840
speaker after the talk is over just head

00:02:26,720 --> 00:02:31,200
on over there um

00:02:27,840 --> 00:02:31,920
and we'll be able to keep the discussion

00:02:31,200 --> 00:02:34,959
going

00:02:31,920 --> 00:02:37,360
without distracting the next talk

00:02:34,959 --> 00:02:38,720
so please try and keep your chat in the

00:02:37,360 --> 00:02:40,480
tux theater chat

00:02:38,720 --> 00:02:42,319
uh relevant to the um talk that's

00:02:40,480 --> 00:02:44,080
currently going and use the colonel

00:02:42,319 --> 00:02:46,080
miniconf boss channel

00:02:44,080 --> 00:02:47,360
um for any discussion happening after

00:02:46,080 --> 00:02:50,160
that

00:02:47,360 --> 00:02:50,160
um so

00:02:50,400 --> 00:02:57,120
we've got our first talk coming up uh

00:02:53,680 --> 00:02:58,720
andre almeida is a kernel developer and

00:02:57,120 --> 00:02:59,680
associate software engineer at open

00:02:58,720 --> 00:03:01,760
source consultancy

00:02:59,680 --> 00:03:03,920
collabora where he's currently hacking

00:03:01,760 --> 00:03:05,519
on core kernel subsystems like futex and

00:03:03,920 --> 00:03:08,159
storage

00:03:05,519 --> 00:03:09,040
and he's uh going to be presenting to us

00:03:08,159 --> 00:03:12,959
today from

00:03:09,040 --> 00:03:19,840
sao paulo in brazil on futex 2

00:03:12,959 --> 00:03:19,840
an update please welcome andre

00:03:26,960 --> 00:03:31,519
[Music]

00:03:28,959 --> 00:03:32,879
hello there my name is andrea mead and i

00:03:31,519 --> 00:03:35,440
am a kernel developer

00:03:32,879 --> 00:03:37,280
at the open source consultants column

00:03:35,440 --> 00:03:40,159
i'm here today to talk about

00:03:37,280 --> 00:03:40,720
the new full text q and give some news

00:03:40,159 --> 00:03:43,360
so

00:03:40,720 --> 00:03:44,080
before i go on i will give a brief

00:03:43,360 --> 00:03:47,200
overview

00:03:44,080 --> 00:03:49,760
of what is full text and why we are

00:03:47,200 --> 00:03:53,439
creating a new interface for it

00:03:49,760 --> 00:03:56,480
so full text is for fast user mood text

00:03:53,439 --> 00:03:59,840
is a system call that we provide

00:03:56,480 --> 00:04:02,640
for the user space to create fast user

00:03:59,840 --> 00:04:03,920
sync mechanisms so for instance this is

00:04:02,640 --> 00:04:07,680
what bitrat

00:04:03,920 --> 00:04:11,439
uses for implementing the mutex

00:04:07,680 --> 00:04:14,799
and the kernel provides a very basic set

00:04:11,439 --> 00:04:16,959
of semantics so it just provides a ways

00:04:14,799 --> 00:04:20,239
to sleep and wake threads

00:04:16,959 --> 00:04:21,600
and all the logic if you are large

00:04:20,239 --> 00:04:23,440
for instance if you're going to be a

00:04:21,600 --> 00:04:24,080
semaphore it should be a conditional

00:04:23,440 --> 00:04:27,680
variable

00:04:24,080 --> 00:04:30,560
need to be implemented on the user side

00:04:27,680 --> 00:04:31,199
it was created uh almost 20 years ago

00:04:30,560 --> 00:04:34,240
and for

00:04:31,199 --> 00:04:35,120
almost 10 years we didn't get any new

00:04:34,240 --> 00:04:38,479
feature

00:04:35,120 --> 00:04:39,520
and as you can imagine um a lot of a lot

00:04:38,479 --> 00:04:42,080
of things changing and

00:04:39,520 --> 00:04:43,520
modern workloads requires new

00:04:42,080 --> 00:04:46,160
functionalities

00:04:43,520 --> 00:04:47,280
and but we got a lot of attempted

00:04:46,160 --> 00:04:50,560
features

00:04:47,280 --> 00:04:52,400
that wasn't uh were not merged and

00:04:50,560 --> 00:04:53,600
they were not measured because the code

00:04:52,400 --> 00:04:56,880
the current code

00:04:53,600 --> 00:04:57,919
is on maintains mode so that means that

00:04:56,880 --> 00:05:02,240
no new features

00:04:57,919 --> 00:05:05,280
or any read design will happen

00:05:02,240 --> 00:05:08,800
the code only gets fixes and

00:05:05,280 --> 00:05:10,639
we are on this mode because the code has

00:05:08,800 --> 00:05:13,280
a lot of legacy features

00:05:10,639 --> 00:05:16,240
the code is fragile it's hard to test

00:05:13,280 --> 00:05:19,840
and it's hard to track for regressions

00:05:16,240 --> 00:05:22,080
so um and

00:05:19,840 --> 00:05:22,880
this is a very key component of the

00:05:22,080 --> 00:05:25,919
system

00:05:22,880 --> 00:05:28,400
is what guarantees that a lot of

00:05:25,919 --> 00:05:29,840
new taxes are doing what they are

00:05:28,400 --> 00:05:32,320
supposed to do

00:05:29,840 --> 00:05:34,000
and if we break the current full text a

00:05:32,320 --> 00:05:35,919
lot of things will break

00:05:34,000 --> 00:05:37,520
and some of the limitations is that

00:05:35,919 --> 00:05:39,520
there is no no awareness

00:05:37,520 --> 00:05:41,840
so that means that the kernel side

00:05:39,520 --> 00:05:44,960
information about the full text

00:05:41,840 --> 00:05:45,919
of the hash table is stored on the

00:05:44,960 --> 00:05:49,919
single

00:05:45,919 --> 00:05:52,639
uh node also

00:05:49,919 --> 00:05:53,120
um we can there is the hard requirement

00:05:52,639 --> 00:05:56,960
that

00:05:53,120 --> 00:05:59,759
the user space full text um

00:05:56,960 --> 00:06:01,919
the the var the integer variable needs

00:05:59,759 --> 00:06:04,160
to be third should be sized

00:06:01,919 --> 00:06:06,000
so but for implement for instance for

00:06:04,160 --> 00:06:08,639
implementation you can

00:06:06,000 --> 00:06:10,639
only you only need three different

00:06:08,639 --> 00:06:12,319
values so it could be eight bits

00:06:10,639 --> 00:06:13,919
and being eight bits will probably

00:06:12,319 --> 00:06:17,680
benefit some

00:06:13,919 --> 00:06:19,680
embedded systems and also we can

00:06:17,680 --> 00:06:22,160
you can only wait on a single foot

00:06:19,680 --> 00:06:25,199
expert time i will get on more details

00:06:22,160 --> 00:06:28,720
about this limitation in some minutes

00:06:25,199 --> 00:06:29,840
so um and why do we need fruit texture

00:06:28,720 --> 00:06:32,880
and so that's why

00:06:29,840 --> 00:06:35,440
we we have all those limitations we have

00:06:32,880 --> 00:06:35,919
features that we want to implement and

00:06:35,440 --> 00:06:38,639
and to

00:06:35,919 --> 00:06:39,360
solve that we're going to start from

00:06:38,639 --> 00:06:41,440
start new

00:06:39,360 --> 00:06:43,520
start a new interface with all these

00:06:41,440 --> 00:06:45,440
things create the bytes line since the

00:06:43,520 --> 00:06:47,199
beginning

00:06:45,440 --> 00:06:48,880
so we are here trying to fix those

00:06:47,199 --> 00:06:51,440
limitations and adding

00:06:48,880 --> 00:06:52,639
these new functionalities and also the

00:06:51,440 --> 00:06:55,520
current implementation

00:06:52,639 --> 00:06:57,440
is doing by a single syscall so all the

00:06:55,520 --> 00:06:58,639
operations go the same system you need

00:06:57,440 --> 00:07:02,319
to change the

00:06:58,639 --> 00:07:04,720
op flag to say what you want to do

00:07:02,319 --> 00:07:06,160
and on the new interface there will be

00:07:04,720 --> 00:07:09,759
no more reflection

00:07:06,160 --> 00:07:12,479
we have uh one syscall per operation

00:07:09,759 --> 00:07:13,440
and also the code is mostly written from

00:07:12,479 --> 00:07:16,960
scratch

00:07:13,440 --> 00:07:17,919
but of course based on a lot of designs

00:07:16,960 --> 00:07:21,599
from the original

00:07:17,919 --> 00:07:23,840
text so

00:07:21,599 --> 00:07:26,160
the current status is that we have the

00:07:23,840 --> 00:07:30,720
basic weight and weak semantics

00:07:26,160 --> 00:07:33,520
completed and also the factorized weight

00:07:30,720 --> 00:07:34,080
that is the the behavior to weight on

00:07:33,520 --> 00:07:37,199
multiple

00:07:34,080 --> 00:07:38,720
taxes we have the timeout and we have

00:07:37,199 --> 00:07:42,720
shared food taxes

00:07:38,720 --> 00:07:46,879
that are um used um when you have a

00:07:42,720 --> 00:07:50,479
shared memory between process

00:07:46,879 --> 00:07:53,919
also we all supported the self-tests

00:07:50,479 --> 00:07:56,240
and proof tests so we can start building

00:07:53,919 --> 00:07:58,560
a basic ci about food texture and

00:07:56,240 --> 00:08:01,680
compare the performance between the

00:07:58,560 --> 00:08:05,039
the both implementations um

00:08:01,680 --> 00:08:08,639
i also um reported the proton version

00:08:05,039 --> 00:08:11,759
of wine choose full texture

00:08:08,639 --> 00:08:13,280
and so this is important because for the

00:08:11,759 --> 00:08:17,120
full text way to push pull

00:08:13,280 --> 00:08:18,960
so um this behavior of the single waiter

00:08:17,120 --> 00:08:20,879
can wait on multiple full taxes

00:08:18,960 --> 00:08:22,639
and it was first developed for the

00:08:20,879 --> 00:08:25,199
current futex implementation

00:08:22,639 --> 00:08:26,879
and when i was trying to merge it the

00:08:25,199 --> 00:08:29,360
maintainers explained that

00:08:26,879 --> 00:08:29,919
we could not merge that we should go for

00:08:29,360 --> 00:08:34,560
a new

00:08:29,919 --> 00:08:36,640
interface so here we are so

00:08:34,560 --> 00:08:39,039
and why this is important for proton

00:08:36,640 --> 00:08:41,279
because on windows there is

00:08:39,039 --> 00:08:42,159
this function on the windows api called

00:08:41,279 --> 00:08:46,000
wait for much

00:08:42,159 --> 00:08:48,000
objects and this function is used a lot

00:08:46,000 --> 00:08:51,360
for

00:08:48,000 --> 00:08:54,320
game engines and since proton

00:08:51,360 --> 00:08:57,279
is a compatibility layer to allow

00:08:54,320 --> 00:08:59,600
windows games to run on linux

00:08:57,279 --> 00:09:02,080
we need to map those functions and the

00:08:59,600 --> 00:09:04,320
best way we found to map this behavior

00:09:02,080 --> 00:09:05,760
is by adding is on the full text

00:09:04,320 --> 00:09:08,240
implementation

00:09:05,760 --> 00:09:08,800
so we try on the footage the current

00:09:08,240 --> 00:09:12,480
footage

00:09:08,800 --> 00:09:16,000
we didn't manage to do it so we are

00:09:12,480 --> 00:09:18,000
developing it on the futex tube and so

00:09:16,000 --> 00:09:18,720
this work of foot excuse sponsored by

00:09:18,000 --> 00:09:21,279
valve

00:09:18,720 --> 00:09:21,760
should get windows games running faster

00:09:21,279 --> 00:09:24,959
as fast

00:09:21,760 --> 00:09:24,959
as possible on linux

00:09:25,600 --> 00:09:30,240
and here we have the results the current

00:09:28,080 --> 00:09:33,440
results that we have

00:09:30,240 --> 00:09:35,440
of our interface of course

00:09:33,440 --> 00:09:37,120
since the design can change those

00:09:35,440 --> 00:09:39,040
numbers can change as well

00:09:37,120 --> 00:09:40,800
so using the same pair of tasks for full

00:09:39,040 --> 00:09:43,360
text one for text two

00:09:40,800 --> 00:09:44,000
and i was able to to get those numbers

00:09:43,360 --> 00:09:45,600
and

00:09:44,000 --> 00:09:47,839
for the first test is the hash

00:09:45,600 --> 00:09:50,160
operations so here we are trying to

00:09:47,839 --> 00:09:51,600
see how many hash operations you can we

00:09:50,160 --> 00:09:54,560
can do per second

00:09:51,600 --> 00:09:55,120
on the full text and we can on the full

00:09:54,560 --> 00:09:58,720
texture

00:09:55,120 --> 00:10:00,320
side we got um almost three percent more

00:09:58,720 --> 00:10:02,399
operations per second

00:10:00,320 --> 00:10:03,519
the wake call test uh is basically a

00:10:02,399 --> 00:10:05,920
test where

00:10:03,519 --> 00:10:07,279
we put a lot of drugs to sleep and we

00:10:05,920 --> 00:10:09,680
start waking them

00:10:07,279 --> 00:10:10,640
and so we measure the time to wake of

00:10:09,680 --> 00:10:12,800
them

00:10:10,640 --> 00:10:13,760
and so the sooner the test completes the

00:10:12,800 --> 00:10:17,279
better

00:10:13,760 --> 00:10:19,839
and we got an average of less

00:10:17,279 --> 00:10:21,279
five percent times complete on comparing

00:10:19,839 --> 00:10:24,560
full texture with full text

00:10:21,279 --> 00:10:26,320
one the current footprints the weak

00:10:24,560 --> 00:10:29,600
parallel is very similar

00:10:26,320 --> 00:10:30,720
but here uh we issue a lot of parallel

00:10:29,600 --> 00:10:34,720
weak calls

00:10:30,720 --> 00:10:38,079
and here the futex shoe took

00:10:34,720 --> 00:10:41,920
almost third uh 13 percent less time

00:10:38,079 --> 00:10:44,160
to 13 percent less time to complete

00:10:41,920 --> 00:10:47,519
compared to the current full text

00:10:44,160 --> 00:10:48,640
and also and using the our modified

00:10:47,519 --> 00:10:51,440
proton

00:10:48,640 --> 00:10:52,480
we could see and run in the same game

00:10:51,440 --> 00:10:56,240
benchmark

00:10:52,480 --> 00:10:58,640
and then using record to capture the

00:10:56,240 --> 00:11:00,160
kernel events with the kernel cycles and

00:10:58,640 --> 00:11:03,680
i i was able to measure

00:11:00,160 --> 00:11:06,320
to measure that the kernel was spent in

00:11:03,680 --> 00:11:08,240
three percent less time on full text

00:11:06,320 --> 00:11:09,519
when you compare the full textual with

00:11:08,240 --> 00:11:13,519
the full text

00:11:09,519 --> 00:11:16,000
one and this didn't

00:11:13,519 --> 00:11:17,839
translate it on three percent more

00:11:16,000 --> 00:11:19,920
frames per second

00:11:17,839 --> 00:11:21,040
uh but your problem helped the gaming

00:11:19,920 --> 00:11:23,279
stability somehow

00:11:21,040 --> 00:11:25,440
more research is needed on that on how

00:11:23,279 --> 00:11:28,959
this impact the game

00:11:25,440 --> 00:11:30,399
and also uh porting the the proton was

00:11:28,959 --> 00:11:32,959
very good for

00:11:30,399 --> 00:11:33,440
test the stability of our interface

00:11:32,959 --> 00:11:37,360
since

00:11:33,440 --> 00:11:40,399
uh those modern aaa games they really

00:11:37,360 --> 00:11:41,519
stress um your operational operation

00:11:40,399 --> 00:11:43,920
system

00:11:41,519 --> 00:11:46,079
and for instance tomb raider you can

00:11:43,920 --> 00:11:48,959
call something like 42k

00:11:46,079 --> 00:11:50,880
full textual 16 calls per second and

00:11:48,959 --> 00:11:52,560
since the game did not crash the kernel

00:11:50,880 --> 00:11:55,360
did not crash

00:11:52,560 --> 00:11:56,480
we can see that the infrastructure is

00:11:55,360 --> 00:12:01,519
reliable

00:11:56,480 --> 00:12:04,959
and it can can accept a lot of stress

00:12:01,519 --> 00:12:07,920
so and for the next steps we are going

00:12:04,959 --> 00:12:10,160
to implement the remaining features

00:12:07,920 --> 00:12:11,760
so um we need to implement the new

00:12:10,160 --> 00:12:15,440
awareness we need to

00:12:11,760 --> 00:12:18,480
alternate the variable size feature

00:12:15,440 --> 00:12:21,040
and also the req operation

00:12:18,480 --> 00:12:23,519
we also want to implement more testing

00:12:21,040 --> 00:12:26,160
and about the upstream the streaming of

00:12:23,519 --> 00:12:27,760
these interface will happen on the real

00:12:26,160 --> 00:12:30,959
time linux stream

00:12:27,760 --> 00:12:34,240
so if you want to be updated

00:12:30,959 --> 00:12:35,920
about the submission make sure to

00:12:34,240 --> 00:12:39,040
subscribe to it

00:12:35,920 --> 00:12:41,760
so that's it for the futex shoe

00:12:39,040 --> 00:12:42,560
i'm glad to be here and if you have any

00:12:41,760 --> 00:12:53,839
questions

00:12:42,560 --> 00:12:53,839
just pick me thank you very much bye

00:12:57,839 --> 00:13:01,920
so we've got time for one question um

00:13:00,320 --> 00:13:02,880
live so if you've got a question please

00:13:01,920 --> 00:13:06,720
post it

00:13:02,880 --> 00:13:09,120
in the chat um

00:13:06,720 --> 00:13:11,360
and uh otherwise go to the kernel mini

00:13:09,120 --> 00:13:14,959
conf

00:13:11,360 --> 00:13:17,519
um heinek um asked

00:13:14,959 --> 00:13:18,240
what games i use it for my testing i try

00:13:17,519 --> 00:13:21,200
to use

00:13:18,240 --> 00:13:23,440
heavily triple a games like tomb raider

00:13:21,200 --> 00:13:27,839
as since grid

00:13:23,440 --> 00:13:27,839
and i believe metro as well

00:13:29,120 --> 00:13:36,959
so i try to get those really heavy

00:13:33,279 --> 00:13:39,199
games um for rt

00:13:36,959 --> 00:13:40,000
because on the plumbers conference

00:13:39,199 --> 00:13:42,240
everyone

00:13:40,000 --> 00:13:43,040
agreed that it would be a better place

00:13:42,240 --> 00:13:45,360
for

00:13:43,040 --> 00:13:47,040
this kind of experimental feature that

00:13:45,360 --> 00:13:49,839
we are going on

00:13:47,040 --> 00:13:51,839
since it can take a little bit of time

00:13:49,839 --> 00:13:55,040
to stabilize and we want to

00:13:51,839 --> 00:13:55,040
have a lot of testing

00:13:57,600 --> 00:14:02,000
um there is no futex tube streaming on

00:13:59,839 --> 00:14:05,040
the kernel right now just the current

00:14:02,000 --> 00:14:05,040
futex implementation

00:14:15,600 --> 00:14:18,880
okay we're going to have to uh leave it

00:14:17,120 --> 00:14:20,639
there um thank you

00:14:18,880 --> 00:14:22,480
andre for your talk and please stick

00:14:20,639 --> 00:14:24,160
around in the um colonel miniconf

00:14:22,480 --> 00:14:26,320
channel if you've got further questions

00:14:24,160 --> 00:14:31,360
i want to talk whether

00:14:26,320 --> 00:14:33,440
thank you everyone bye-bye

00:14:31,360 --> 00:14:33,440

YouTube URL: https://www.youtube.com/watch?v=eK8lBmtX8Bg


