Title: So you're a Linux kernel developer? Name all subsystems.
Publication date: 2021-02-18
Playlist: Kernel Miniconf (LCA 2021)
Description: 
	Pia Eichinger, Ralf Ramsauer, Stefanie Scherzinger, Wolfgang Mauerer

https://lca2021.linux.org.au/schedule/presentation/100/

It's needless to mention that the kernel is obviously split into several subsystems. But what defines a subsystem? An entry in MAINTAINERS? Then there would be more than 2000 of them, which is clearly not the case.

As there is no official definition of ›subsystems‹, we want to identify them: We are interested of what subsystems the kernel actually consists of and how they are related to each other. This is helpful for newcomers, to get a better insight in the kernel, but also for industrial vendors performing development process analysis.

This promises benefits for developers and the community. But beyond this, a precise documentation and definition of subsystems is also necessary for upcoming challenges like certifications in safety critical environments (for instance, as aspired by the Linux Foundation's ELISA project). Proper documentation also eases general quality ensurance, provides help for longterm maintenance, and lowers the initial learning curve for newcomers. Therefore, we decided to take a look at the bigger picture. Quite literally, actually.

Our talk discusses methods to visualise the entire repository subsystem topology using graphs based on data mining in the kernel. It measures intersections of responsibility for MAINTAINERS entries, and clusters them based on overlap intensity, effectively detecting de-facto subsystems. It reveals sensible, though sometimes surprising, structures, compares the differences between de-facto and documented subsystems, and shows numerous possibilities for using the data, ranging from improvements to the development process to formal safety-critical certification efforts.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sat Jan 23 11:40:00 2021 at Tux Theatre
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,599 --> 00:00:20,000
um our next talk is from pia ikinger

00:00:18,480 --> 00:00:22,080
who is a master student at the

00:00:20,000 --> 00:00:24,240
university

00:00:22,080 --> 00:00:26,160
burg with a research interest in using

00:00:24,240 --> 00:00:28,960
quant quantitative software engineering

00:00:26,160 --> 00:00:31,039
methodology on the linux kernel

00:00:28,960 --> 00:00:32,800
she will be presenting on so you're a

00:00:31,039 --> 00:00:36,399
linux kernel developer name all the

00:00:32,800 --> 00:00:36,399
subsystems please welcome pierre

00:00:36,480 --> 00:00:39,760
yes thank you so much for the

00:00:38,079 --> 00:00:40,399
introduction so again my name is pia

00:00:39,760 --> 00:00:42,079
eichner

00:00:40,399 --> 00:00:44,640
i am a student at the university of

00:00:42,079 --> 00:00:46,559
applied sciences in ringsbook in germany

00:00:44,640 --> 00:00:48,239
and there really isn't that much to say

00:00:46,559 --> 00:00:49,120
about me yet since i'm really still a

00:00:48,239 --> 00:00:50,879
student and i'm

00:00:49,120 --> 00:00:52,160
still at the very start of my career but

00:00:50,879 --> 00:00:54,559
my research interests

00:00:52,160 --> 00:00:56,559
include the organizational and

00:00:54,559 --> 00:00:57,360
maintenance structure of the linux

00:00:56,559 --> 00:01:00,160
kernel which is

00:00:57,360 --> 00:01:02,239
ultimately the topic of this talk so

00:01:00,160 --> 00:01:03,440
just a quick introduction to the people

00:01:02,239 --> 00:01:06,479
who made this all possible

00:01:03,440 --> 00:01:08,000
um our collaborators so we have ramsar

00:01:06,479 --> 00:01:09,280
stephanie scherzinger and wolfgang

00:01:08,000 --> 00:01:11,360
maurer

00:01:09,280 --> 00:01:13,520
ralph ramsar the phd student he

00:01:11,360 --> 00:01:14,479
developed and maintains most of the

00:01:13,520 --> 00:01:17,200
tools that

00:01:14,479 --> 00:01:18,159
provide the very foundation of all these

00:01:17,200 --> 00:01:21,759
findings that i

00:01:18,159 --> 00:01:24,000
will now present and just

00:01:21,759 --> 00:01:26,720
a quick introduction to what really

00:01:24,000 --> 00:01:29,439
drives us to our motivation and goals

00:01:26,720 --> 00:01:31,520
so what we want to do is to formalize

00:01:29,439 --> 00:01:32,240
and assess the linux kernel development

00:01:31,520 --> 00:01:34,479
process

00:01:32,240 --> 00:01:36,479
and by doing that we sort of hope to

00:01:34,479 --> 00:01:38,240
gain some sort of deeper understanding

00:01:36,479 --> 00:01:40,079
about how it all works

00:01:38,240 --> 00:01:41,680
and at the end of the day if we have

00:01:40,079 --> 00:01:43,360
that understanding we want to sort of

00:01:41,680 --> 00:01:45,520
support and enhance it

00:01:43,360 --> 00:01:47,759
and we're providing and developing tools

00:01:45,520 --> 00:01:50,560
to support the open source community

00:01:47,759 --> 00:01:52,159
like we're using linux the linux kernel

00:01:50,560 --> 00:01:54,240
is a prime example for that

00:01:52,159 --> 00:01:56,159
but anybody who uses a open source

00:01:54,240 --> 00:01:58,960
development process or just

00:01:56,159 --> 00:01:59,759
git for that matter could use our tools

00:01:58,960 --> 00:02:01,439
and

00:01:59,759 --> 00:02:03,439
the things that we develop are

00:02:01,439 --> 00:02:05,680
especially interesting to assist and

00:02:03,439 --> 00:02:07,600
support safety critical developments

00:02:05,680 --> 00:02:09,920
so i'll get to that later our

00:02:07,600 --> 00:02:13,360
collaboration partners include eliza

00:02:09,920 --> 00:02:14,959
from the linux foundation you

00:02:13,360 --> 00:02:16,800
may or may not have heard that name

00:02:14,959 --> 00:02:18,720
before this is a project

00:02:16,800 --> 00:02:20,319
to enable linux in safety critical

00:02:18,720 --> 00:02:23,360
environments and

00:02:20,319 --> 00:02:24,480
the university of paso and i am going to

00:02:23,360 --> 00:02:26,640
be talking a lot

00:02:24,480 --> 00:02:28,560
about safety critical environments and

00:02:26,640 --> 00:02:31,680
safety critical certification

00:02:28,560 --> 00:02:32,319
so just a quick introduction to what the

00:02:31,680 --> 00:02:35,200
entire

00:02:32,319 --> 00:02:35,599
idea is behind that so it's needless to

00:02:35,200 --> 00:02:37,920
say

00:02:35,599 --> 00:02:38,720
that safety critical environments are

00:02:37,920 --> 00:02:41,840
highly

00:02:38,720 --> 00:02:43,920
sensitive environments and in very very

00:02:41,840 --> 00:02:46,959
extreme case scenarios

00:02:43,920 --> 00:02:48,480
you like having software

00:02:46,959 --> 00:02:50,000
that works and having software that

00:02:48,480 --> 00:02:52,000
works the way it's intended to work

00:02:50,000 --> 00:02:53,519
could ensure the difference between

00:02:52,000 --> 00:02:55,680
survival and death

00:02:53,519 --> 00:02:57,120
and what safety critical certification

00:02:55,680 --> 00:02:59,840
aims to achieve is to

00:02:57,120 --> 00:03:00,319
try to ensure software quality by all

00:02:59,840 --> 00:03:03,519
means

00:03:00,319 --> 00:03:04,000
necessary and one idea to sort of

00:03:03,519 --> 00:03:05,360
achieve

00:03:04,000 --> 00:03:08,000
that is to look at the development

00:03:05,360 --> 00:03:09,360
process and correlate that to the

00:03:08,000 --> 00:03:11,360
quality of the software

00:03:09,360 --> 00:03:12,879
so the underlying assumption here is

00:03:11,360 --> 00:03:15,040
that the development process

00:03:12,879 --> 00:03:15,920
can impact the quality of the software

00:03:15,040 --> 00:03:18,400
if you have

00:03:15,920 --> 00:03:19,360
a really really good development process

00:03:18,400 --> 00:03:21,519
well-defined

00:03:19,360 --> 00:03:22,720
and everything and like every single

00:03:21,519 --> 00:03:24,799
patch needs to be

00:03:22,720 --> 00:03:25,840
discussed every single feature reviewed

00:03:24,799 --> 00:03:28,799
stuff like that

00:03:25,840 --> 00:03:30,640
and the developers strictly comply by

00:03:28,799 --> 00:03:33,680
this process

00:03:30,640 --> 00:03:35,040
the idea is how bad can the end product

00:03:33,680 --> 00:03:35,680
be at the end of the day so that's

00:03:35,040 --> 00:03:39,360
obviously

00:03:35,680 --> 00:03:41,200
uh subject to to discussion but still

00:03:39,360 --> 00:03:42,720
um this is the assumption that the

00:03:41,200 --> 00:03:44,480
certification is based upon

00:03:42,720 --> 00:03:46,480
and if you can prove that your

00:03:44,480 --> 00:03:48,799
developers strictly comply

00:03:46,480 --> 00:03:50,480
by this process and if you can prove to

00:03:48,799 --> 00:03:52,319
what degree because there will always be

00:03:50,480 --> 00:03:56,000
irregularities right

00:03:52,319 --> 00:03:57,599
you achieve a you can you can get a

00:03:56,000 --> 00:04:00,239
certification for safety critical

00:03:57,599 --> 00:04:03,680
environments and you're one step further

00:04:00,239 --> 00:04:06,560
to enabling your software there and now

00:04:03,680 --> 00:04:07,760
if we try to introduce linux to safety

00:04:06,560 --> 00:04:10,319
critical environments

00:04:07,760 --> 00:04:11,120
we run into some major certification

00:04:10,319 --> 00:04:13,680
challenges

00:04:11,120 --> 00:04:14,959
because of its open development process

00:04:13,680 --> 00:04:17,680
so

00:04:14,959 --> 00:04:18,880
the thing about linux open source

00:04:17,680 --> 00:04:21,120
development process

00:04:18,880 --> 00:04:22,639
is that the broad opinion is that it's

00:04:21,120 --> 00:04:25,120
very well defined and it's

00:04:22,639 --> 00:04:26,479
really good and it produces some really

00:04:25,120 --> 00:04:28,720
good and quality code

00:04:26,479 --> 00:04:29,600
but nobody really cares to properly

00:04:28,720 --> 00:04:31,440
document

00:04:29,600 --> 00:04:32,880
perfectly everything that's happened and

00:04:31,440 --> 00:04:33,759
everything and how it was reviewed and

00:04:32,880 --> 00:04:36,639
stuff like that

00:04:33,759 --> 00:04:38,560
with the goal in mind to then later use

00:04:36,639 --> 00:04:39,040
that to prove that certain criteria for

00:04:38,560 --> 00:04:42,400
this

00:04:39,040 --> 00:04:45,120
certification were actually met so

00:04:42,400 --> 00:04:45,680
the idea behind that is all this data is

00:04:45,120 --> 00:04:47,680
public

00:04:45,680 --> 00:04:49,680
and with a little bit of data mining we

00:04:47,680 --> 00:04:51,680
could have an exposed fact analysis

00:04:49,680 --> 00:04:52,800
after it already happened and

00:04:51,680 --> 00:04:55,759
characterize

00:04:52,800 --> 00:04:56,880
the entire process um with with

00:04:55,759 --> 00:05:00,560
hindsight

00:04:56,880 --> 00:05:02,639
and just a second um characterize the

00:05:00,560 --> 00:05:04,800
entire process with hindsight

00:05:02,639 --> 00:05:07,199
and use statistical methods to research

00:05:04,800 --> 00:05:10,080
and understand the development process

00:05:07,199 --> 00:05:10,960
and the thing that we are really

00:05:10,080 --> 00:05:13,919
interested in

00:05:10,960 --> 00:05:14,560
is is patch integration specifically so

00:05:13,919 --> 00:05:16,800
um

00:05:14,560 --> 00:05:18,400
the things that i'm asking myself is who

00:05:16,800 --> 00:05:21,120
integrates a patch

00:05:18,400 --> 00:05:22,080
and and how exactly does a patch end up

00:05:21,120 --> 00:05:23,360
in mainline

00:05:22,080 --> 00:05:25,600
like this is the sort of stuff that

00:05:23,360 --> 00:05:27,680
we're discussing and

00:05:25,600 --> 00:05:28,880
i am sure that you're probably very

00:05:27,680 --> 00:05:30,240
familiar with the concept of the

00:05:28,880 --> 00:05:32,160
maintainers hierarchy right

00:05:30,240 --> 00:05:34,160
so there are developers who develop

00:05:32,160 --> 00:05:35,440
patches and they send them to file

00:05:34,160 --> 00:05:37,120
maintainers and then

00:05:35,440 --> 00:05:38,639
to subsystem maintainers like pull

00:05:37,120 --> 00:05:39,280
requests and at the end of the day it

00:05:38,639 --> 00:05:42,240
somehow

00:05:39,280 --> 00:05:43,360
ends up in mainline all the way up there

00:05:42,240 --> 00:05:47,120
so this is like

00:05:43,360 --> 00:05:49,600
a common concept um that's that people

00:05:47,120 --> 00:05:50,960
refer to and stuff like that and we

00:05:49,600 --> 00:05:54,080
really wanted to

00:05:50,960 --> 00:05:57,280
get to know this thing so

00:05:54,080 --> 00:05:59,280
originally we wanted to know about

00:05:57,280 --> 00:06:02,639
two things in particular so first of all

00:05:59,280 --> 00:06:04,960
the conforming integration of patches

00:06:02,639 --> 00:06:06,000
this will not be the topic of this talk

00:06:04,960 --> 00:06:09,120
this is something

00:06:06,000 --> 00:06:11,600
we we worked on but it will not be

00:06:09,120 --> 00:06:12,880
the prime topic of this talk but do keep

00:06:11,600 --> 00:06:13,680
it in mind for later because i'll get

00:06:12,880 --> 00:06:15,759
back to that

00:06:13,680 --> 00:06:17,120
so conforming integration of patches

00:06:15,759 --> 00:06:19,520
just basically means

00:06:17,120 --> 00:06:20,800
if you have a patch just look at the

00:06:19,520 --> 00:06:24,160
affected files

00:06:20,800 --> 00:06:26,319
and um look at get maintenance.pl or

00:06:24,160 --> 00:06:27,840
the maintainers file just who is the

00:06:26,319 --> 00:06:29,360
relevant maintainer for this

00:06:27,840 --> 00:06:31,440
particular patch who are the relevant

00:06:29,360 --> 00:06:33,360
maintainers and if one of these

00:06:31,440 --> 00:06:35,600
maintainers integrates that patch

00:06:33,360 --> 00:06:38,080
like a relevant maintainer we will call

00:06:35,600 --> 00:06:41,199
that patch conformingly integrated

00:06:38,080 --> 00:06:42,880
so that's just one classification and we

00:06:41,199 --> 00:06:46,240
wanted to sort of analyze that

00:06:42,880 --> 00:06:47,840
and also we wanted to analyze the patch

00:06:46,240 --> 00:06:48,639
traversal through the maintenance

00:06:47,840 --> 00:06:50,639
hierarchy

00:06:48,639 --> 00:06:51,919
so there's this thing called the

00:06:50,639 --> 00:06:53,919
maintenance hierarchy and it's

00:06:51,919 --> 00:06:55,840
supposedly well defined and we have a

00:06:53,919 --> 00:06:56,479
patch that goes all the way up here and

00:06:55,840 --> 00:06:59,919
we

00:06:56,479 --> 00:07:03,039
really wanted to know how it ends up

00:06:59,919 --> 00:07:04,639
in in mainline at the end of the day so

00:07:03,039 --> 00:07:06,319
uh what we wanted to know is the like

00:07:04,639 --> 00:07:08,800
any any cross-cutting

00:07:06,319 --> 00:07:10,800
patches and and pull requests going on

00:07:08,800 --> 00:07:12,560
like for example this patch uh

00:07:10,800 --> 00:07:14,000
going straight up here and then maybe

00:07:12,560 --> 00:07:15,599
down to the file maintainer down there

00:07:14,000 --> 00:07:18,560
and then straight into main line

00:07:15,599 --> 00:07:20,319
or is it all like compliant with the

00:07:18,560 --> 00:07:23,840
defined maintenance hierarchy

00:07:20,319 --> 00:07:26,240
and we were all good to go

00:07:23,840 --> 00:07:28,000
and this these were the projects that we

00:07:26,240 --> 00:07:30,880
defined really wanted to work on and

00:07:28,000 --> 00:07:33,039
i remember it so well i walked up to my

00:07:30,880 --> 00:07:34,960
supervisor and i asked them okay i'm

00:07:33,039 --> 00:07:36,319
so ready to start this i'm so

00:07:34,960 --> 00:07:37,919
enthusiastic

00:07:36,319 --> 00:07:39,919
where can i find this maintenance

00:07:37,919 --> 00:07:41,199
hierarchy and and where can i start

00:07:39,919 --> 00:07:44,479
analyzing it and

00:07:41,199 --> 00:07:46,000
comparing um the the patch data to the

00:07:44,479 --> 00:07:48,960
actual maintenance hierarchy

00:07:46,000 --> 00:07:50,879
and that's where it all begins so the

00:07:48,960 --> 00:07:53,360
problem is

00:07:50,879 --> 00:07:54,720
there is no clear-cut definition of the

00:07:53,360 --> 00:07:58,160
maintenance hierarchy

00:07:54,720 --> 00:07:58,479
and this is where all these questions

00:07:58,160 --> 00:08:00,479
and

00:07:58,479 --> 00:08:01,520
and stuff started so we did a little bit

00:08:00,479 --> 00:08:03,440
brainstorming

00:08:01,520 --> 00:08:05,199
and we thought okay so there's

00:08:03,440 --> 00:08:07,039
supposedly this thing like subsystem

00:08:05,199 --> 00:08:10,000
maintainers but actually

00:08:07,039 --> 00:08:10,960
where can i find a documentation on all

00:08:10,000 --> 00:08:13,360
subsystems

00:08:10,960 --> 00:08:14,560
and one question led to another and you

00:08:13,360 --> 00:08:17,599
find yourself thinking

00:08:14,560 --> 00:08:20,319
what exactly is a subsystem even

00:08:17,599 --> 00:08:21,280
and that's the name of this talk this

00:08:20,319 --> 00:08:24,160
may seem

00:08:21,280 --> 00:08:24,879
like a really really trivial question

00:08:24,160 --> 00:08:27,520
but

00:08:24,879 --> 00:08:28,800
i do invite you to pause and ponder for

00:08:27,520 --> 00:08:32,240
a second on this because

00:08:28,800 --> 00:08:35,200
um if i were to ask you right now

00:08:32,240 --> 00:08:37,200
what exactly is a subsystem what would

00:08:35,200 --> 00:08:40,000
you tell me

00:08:37,200 --> 00:08:42,000
and i am just making assumptions here

00:08:40,000 --> 00:08:43,279
but i'm probably thinking you'd say

00:08:42,000 --> 00:08:46,160
something like well

00:08:43,279 --> 00:08:47,600
that's easy so there's the thing called

00:08:46,160 --> 00:08:49,760
the maintainer's value i

00:08:47,600 --> 00:08:51,360
just look it up there and you would not

00:08:49,760 --> 00:08:54,160
be the only one with that opinion

00:08:51,360 --> 00:08:56,080
so in documentation for early stage

00:08:54,160 --> 00:08:57,680
planning it stated that again

00:08:56,080 --> 00:08:59,279
the maintainers file is the place to

00:08:57,680 --> 00:09:01,839
start but

00:08:59,279 --> 00:09:04,240
not all subsystems are represented there

00:09:01,839 --> 00:09:07,680
so it's not directly stated

00:09:04,240 --> 00:09:09,440
but it's mentioned as if like

00:09:07,680 --> 00:09:11,120
the singular entries and maintainers are

00:09:09,440 --> 00:09:14,720
standalone subsystems

00:09:11,120 --> 00:09:16,480
like all of these entries are

00:09:14,720 --> 00:09:18,080
real standalone subsystems which in

00:09:16,480 --> 00:09:19,519
again means that there are over 2

00:09:18,080 --> 00:09:22,720
thousands of them

00:09:19,519 --> 00:09:24,800
but right who am i to judge problem

00:09:22,720 --> 00:09:27,440
solved we know what subsystems are

00:09:24,800 --> 00:09:29,680
well only thing is if you look a little

00:09:27,440 --> 00:09:32,160
bit deeper and search for the term

00:09:29,680 --> 00:09:33,920
um subsystem and official documentation

00:09:32,160 --> 00:09:34,880
you may stumble across something like

00:09:33,920 --> 00:09:37,600
this

00:09:34,880 --> 00:09:39,680
so basically contains you should usage

00:09:37,600 --> 00:09:42,240
information about media subsystem

00:09:39,680 --> 00:09:43,680
and stuff about media subsystem so

00:09:42,240 --> 00:09:44,959
obviously there's this thing called the

00:09:43,680 --> 00:09:47,519
media subsystem

00:09:44,959 --> 00:09:48,800
and apparently maintainers is the place

00:09:47,519 --> 00:09:50,240
to start so

00:09:48,800 --> 00:09:51,920
if you go up to maintainers and look it

00:09:50,240 --> 00:09:54,399
up you will not

00:09:51,920 --> 00:09:55,600
find a signal media or media subsystem

00:09:54,399 --> 00:09:58,160
entry in maintainers

00:09:55,600 --> 00:09:59,040
rather there are over 100 subsystems

00:09:58,160 --> 00:10:01,120
subsystems

00:09:59,040 --> 00:10:03,440
containing the word media which then

00:10:01,120 --> 00:10:06,560
raises the question which one is it

00:10:03,440 --> 00:10:08,800
and if i were to ask you

00:10:06,560 --> 00:10:11,120
which one of these standalone subsystems

00:10:08,800 --> 00:10:11,760
is the media subsystem that is mentioned

00:10:11,120 --> 00:10:13,360
here

00:10:11,760 --> 00:10:14,800
pick any one of them and tell me which

00:10:13,360 --> 00:10:17,680
one is the one that's

00:10:14,800 --> 00:10:18,480
like like is that is being talked about

00:10:17,680 --> 00:10:22,320
sorry

00:10:18,480 --> 00:10:24,800
um and i'm again just making assumptions

00:10:22,320 --> 00:10:25,760
but i think you tell me something like

00:10:24,800 --> 00:10:28,320
no it's not

00:10:25,760 --> 00:10:30,839
any singular one of them it's like

00:10:28,320 --> 00:10:34,000
probably the summary of them

00:10:30,839 --> 00:10:35,920
and i might be nitpicky here but

00:10:34,000 --> 00:10:37,680
these are sort of contradicting usages

00:10:35,920 --> 00:10:39,279
of the term subsystem and there is no

00:10:37,680 --> 00:10:40,880
clear-cut definition like is it in

00:10:39,279 --> 00:10:44,240
maintainers it's not in maintainers

00:10:40,880 --> 00:10:46,640
what exactly is it and

00:10:44,240 --> 00:10:47,519
we can't really work with that we need a

00:10:46,640 --> 00:10:50,800
clear and

00:10:47,519 --> 00:10:54,079
well defined definition of um

00:10:50,800 --> 00:10:55,440
of term subsystem so we just went ahead

00:10:54,079 --> 00:10:57,279
and did that for ourselves

00:10:55,440 --> 00:10:58,839
and just thought about what would be the

00:10:57,279 --> 00:11:01,600
most intuitive way to think about

00:10:58,839 --> 00:11:03,360
subsystem and we defined the term

00:11:01,600 --> 00:11:05,279
so spoiler alert the entries and

00:11:03,360 --> 00:11:07,440
maintainers are not subsystems

00:11:05,279 --> 00:11:09,760
we will call them sections from now on

00:11:07,440 --> 00:11:11,760
and sections can intersect

00:11:09,760 --> 00:11:12,880
so there can be files that belong in two

00:11:11,760 --> 00:11:14,959
sections at once

00:11:12,880 --> 00:11:16,000
which we will measure in lines of code

00:11:14,959 --> 00:11:18,480
and if they do

00:11:16,000 --> 00:11:20,079
we will call them thematically related

00:11:18,480 --> 00:11:22,000
and their grouping or theoretically

00:11:20,079 --> 00:11:23,360
strong related sections will be then

00:11:22,000 --> 00:11:26,720
called a subsystem

00:11:23,360 --> 00:11:28,240
so like the grouping of magically strong

00:11:26,720 --> 00:11:30,720
related media

00:11:28,240 --> 00:11:31,360
sections will be the media subsystem and

00:11:30,720 --> 00:11:33,839
i hope

00:11:31,360 --> 00:11:35,040
you do agree with us on that like this

00:11:33,839 --> 00:11:36,880
is probably a very

00:11:35,040 --> 00:11:39,040
intuitive way to think about the term

00:11:36,880 --> 00:11:42,000
subsystem like it has something to do

00:11:39,040 --> 00:11:43,279
with maintainers but still it's more

00:11:42,000 --> 00:11:46,640
like a grouping

00:11:43,279 --> 00:11:49,760
based on thematic relations so

00:11:46,640 --> 00:11:52,079
this sort of work can be

00:11:49,760 --> 00:11:52,800
so exciting but so unpredictable at the

00:11:52,079 --> 00:11:55,519
same time

00:11:52,800 --> 00:11:56,000
so we stumbled into a problem that we

00:11:55,519 --> 00:11:57,600
just did

00:11:56,000 --> 00:11:59,680
not think would be a problem prior to

00:11:57,600 --> 00:12:00,639
starting there is no clear listing of

00:11:59,680 --> 00:12:03,040
subsystems

00:12:00,639 --> 00:12:04,320
but why not find out ourselves we have

00:12:03,040 --> 00:12:06,480
our definition now

00:12:04,320 --> 00:12:08,480
and we still wanted to look at

00:12:06,480 --> 00:12:10,079
conforming integration of patches so do

00:12:08,480 --> 00:12:11,440
keep that in mind

00:12:10,079 --> 00:12:12,959
like was a patch integrated by a

00:12:11,440 --> 00:12:14,480
relevant maintainer yes and no

00:12:12,959 --> 00:12:17,680
conforming yes or no

00:12:14,480 --> 00:12:19,680
and now let's just apply our term for

00:12:17,680 --> 00:12:21,200
subsystem detection and really see what

00:12:19,680 --> 00:12:24,480
we can find and really

00:12:21,200 --> 00:12:27,760
try to apply that and just a

00:12:24,480 --> 00:12:30,959
very very quick notch to

00:12:27,760 --> 00:12:32,240
just very quick interjection to a a very

00:12:30,959 --> 00:12:34,320
recent article

00:12:32,240 --> 00:12:35,600
so there's very very recently there's

00:12:34,320 --> 00:12:37,920
been this article by

00:12:35,600 --> 00:12:39,839
jonathan corvette freaking section it's

00:12:37,920 --> 00:12:42,399
called maintenance truth and fiction

00:12:39,839 --> 00:12:44,160
and it's like analyzing the maintainers

00:12:42,399 --> 00:12:46,079
file and the basic gist of it

00:12:44,160 --> 00:12:48,120
is to analyze the maintenance file and

00:12:46,079 --> 00:12:50,480
look for any sort of

00:12:48,120 --> 00:12:52,000
inconsistencies and and stuff like that

00:12:50,480 --> 00:12:55,760
so the maintenance file is still

00:12:52,000 --> 00:12:59,279
a file that um needs to be maintained

00:12:55,760 --> 00:13:00,320
but there are still like weird stuff in

00:12:59,279 --> 00:13:03,120
there like

00:13:00,320 --> 00:13:05,200
um maintainers no like sections that

00:13:03,120 --> 00:13:07,200
don't have any maintainers and stuff

00:13:05,200 --> 00:13:08,160
like that and that was just a basic gist

00:13:07,200 --> 00:13:10,240
of

00:13:08,160 --> 00:13:12,079
this article like analyzing maintainers

00:13:10,240 --> 00:13:15,200
and looking for inconsistencies

00:13:12,079 --> 00:13:16,800
and what we are doing exactly is also

00:13:15,200 --> 00:13:18,959
analyzing maintainers but

00:13:16,800 --> 00:13:20,480
like looking at a completely different

00:13:18,959 --> 00:13:21,839
topic we're analyzing maintainers and

00:13:20,480 --> 00:13:24,959
trying to sort of

00:13:21,839 --> 00:13:25,839
um compare it to reality like how

00:13:24,959 --> 00:13:28,160
exactly are

00:13:25,839 --> 00:13:28,880
patches integrated when looking at

00:13:28,160 --> 00:13:30,160
maintainers and

00:13:28,880 --> 00:13:32,800
when comparing it to relevant

00:13:30,160 --> 00:13:34,000
maintenance and if you analyze it and

00:13:32,800 --> 00:13:37,120
compare it to the linux kernel

00:13:34,000 --> 00:13:38,399
repository and base it on on like shared

00:13:37,120 --> 00:13:40,959
files and stuff like that

00:13:38,399 --> 00:13:42,560
what sort of structure could you find

00:13:40,959 --> 00:13:42,959
like what sort of subsystems could you

00:13:42,560 --> 00:13:44,399
find

00:13:42,959 --> 00:13:46,480
so we're both sort of analyzing

00:13:44,399 --> 00:13:46,800
maintainers but two different aspects of

00:13:46,480 --> 00:13:49,440
it

00:13:46,800 --> 00:13:50,880
i'm just if you've read it or not it's a

00:13:49,440 --> 00:13:52,720
really good read so maybe

00:13:50,880 --> 00:13:54,480
do go back after this talk and read it

00:13:52,720 --> 00:13:56,639
but i just wanted to

00:13:54,480 --> 00:13:58,079
um quickly not show that article because

00:13:56,639 --> 00:14:01,120
it was just so recent

00:13:58,079 --> 00:14:02,079
and so unexpected that this this project

00:14:01,120 --> 00:14:05,519
was also going on

00:14:02,079 --> 00:14:05,920
but not to get off track here our goal

00:14:05,519 --> 00:14:08,639
is

00:14:05,920 --> 00:14:10,000
still to like find and analyze

00:14:08,639 --> 00:14:13,279
subsystems

00:14:10,000 --> 00:14:14,079
and what how we wanted to achieve that

00:14:13,279 --> 00:14:16,720
was to like

00:14:14,079 --> 00:14:18,959
try to visualize the maintainer sections

00:14:16,720 --> 00:14:21,279
based on thematical relations

00:14:18,959 --> 00:14:22,639
and sort of see what we can find there

00:14:21,279 --> 00:14:25,120
and the thing about

00:14:22,639 --> 00:14:26,720
visualizing stuff and visualizing

00:14:25,120 --> 00:14:29,120
relations between

00:14:26,720 --> 00:14:30,959
things is that it's probably a good idea

00:14:29,120 --> 00:14:32,160
to start with graphs and disorder

00:14:30,959 --> 00:14:35,199
because graphs are like

00:14:32,160 --> 00:14:35,839
a good way to visualize that sort of

00:14:35,199 --> 00:14:38,880
stuff

00:14:35,839 --> 00:14:40,959
so let's define the section graph the

00:14:38,880 --> 00:14:43,279
section graph is an undirected graph

00:14:40,959 --> 00:14:45,440
and the idea is to have the sections of

00:14:43,279 --> 00:14:47,839
maintainers become the vertices

00:14:45,440 --> 00:14:49,440
and they can share edges if they share

00:14:47,839 --> 00:14:51,279
any lines of code

00:14:49,440 --> 00:14:52,480
so if there are any files that belong in

00:14:51,279 --> 00:14:54,959
two sections at once

00:14:52,480 --> 00:14:56,079
these two sections will share an edge in

00:14:54,959 --> 00:14:58,720
the section graph

00:14:56,079 --> 00:15:00,480
and then we can just apply common

00:14:58,720 --> 00:15:01,279
clustering detection algorithms such as

00:15:00,480 --> 00:15:04,240
walktrap

00:15:01,279 --> 00:15:07,040
to detect any clusters or communities um

00:15:04,240 --> 00:15:09,600
which we will then define as subsystems

00:15:07,040 --> 00:15:10,079
and that's just the underlying idea and

00:15:09,600 --> 00:15:13,440
just

00:15:10,079 --> 00:15:15,920
to get a quick idea for that

00:15:13,440 --> 00:15:16,720
imagine you have like three sections a b

00:15:15,920 --> 00:15:18,800
and c

00:15:16,720 --> 00:15:21,199
and they intersect in some way so a b

00:15:18,800 --> 00:15:23,600
and c affect files in some way

00:15:21,199 --> 00:15:25,199
and a is very large and it strongly

00:15:23,600 --> 00:15:27,920
intersects with b and c

00:15:25,199 --> 00:15:29,519
and p and c are disjoint you'd have a

00:15:27,920 --> 00:15:32,560
section graph like this

00:15:29,519 --> 00:15:35,600
okay so a shares edges with c and b

00:15:32,560 --> 00:15:37,680
a very very simple idea of

00:15:35,600 --> 00:15:38,800
like trying to visualize sections and

00:15:37,680 --> 00:15:41,920
maintainers

00:15:38,800 --> 00:15:45,360
so that's the section graph and

00:15:41,920 --> 00:15:48,480
this is it this is the top

00:15:45,360 --> 00:15:50,959
20 section graph so it turns out that

00:15:48,480 --> 00:15:52,959
after all maybe visualizing over 2

00:15:50,959 --> 00:15:54,800
000 sections in maintenance was a bit

00:15:52,959 --> 00:15:57,199
ambitious and out of scope

00:15:54,800 --> 00:15:58,320
for the project that i did so we had to

00:15:57,199 --> 00:16:01,839
like cut it down

00:15:58,320 --> 00:16:03,759
on the largest 20 on the 20

00:16:01,839 --> 00:16:05,279
largest sections within the maintainers

00:16:03,759 --> 00:16:07,279
file and just

00:16:05,279 --> 00:16:09,120
see what we could find there and that's

00:16:07,279 --> 00:16:11,680
the result so just

00:16:09,120 --> 00:16:12,240
let that sink in for a moment this is a

00:16:11,680 --> 00:16:14,800
visual

00:16:12,240 --> 00:16:15,600
representation of the maintenance file

00:16:14,800 --> 00:16:19,279
and its

00:16:15,600 --> 00:16:21,839
thematic relations based on on

00:16:19,279 --> 00:16:22,959
the subsystem definition that we

00:16:21,839 --> 00:16:26,639
provided

00:16:22,959 --> 00:16:29,279
so this is what it looks like and

00:16:26,639 --> 00:16:30,720
this is all very pretty and nice to look

00:16:29,279 --> 00:16:33,519
at but what we really wanted to do was

00:16:30,720 --> 00:16:35,600
actually detect sub-systems and

00:16:33,519 --> 00:16:37,519
this is not really of any use if we

00:16:35,600 --> 00:16:38,480
don't actually know what's inside of

00:16:37,519 --> 00:16:41,680
these clusters

00:16:38,480 --> 00:16:42,959
that we defined as subsystems so

00:16:41,680 --> 00:16:44,720
what we're going to do now is have a

00:16:42,959 --> 00:16:47,680
little cluster discussion

00:16:44,720 --> 00:16:49,120
and the basic idea is to just take some

00:16:47,680 --> 00:16:51,279
of the major clusters

00:16:49,120 --> 00:16:52,800
and isolate them as an own graph and

00:16:51,279 --> 00:16:54,399
then re-cluster them again

00:16:52,800 --> 00:16:55,920
from within to detect any sort of

00:16:54,399 --> 00:16:57,600
substructures within

00:16:55,920 --> 00:16:58,959
subsystems and we will later see why

00:16:57,600 --> 00:17:01,839
that's a good idea

00:16:58,959 --> 00:17:03,360
sometimes a good idea so just imagine

00:17:01,839 --> 00:17:04,240
you're taking any one of these major

00:17:03,360 --> 00:17:06,480
clusters

00:17:04,240 --> 00:17:07,360
we're gonna take the one down here first

00:17:06,480 --> 00:17:09,679
and just

00:17:07,360 --> 00:17:11,919
cut off all the edges to the outside

00:17:09,679 --> 00:17:14,160
delete all the other vertices

00:17:11,919 --> 00:17:15,520
and then just look at it as a complete

00:17:14,160 --> 00:17:17,520
isolated graph

00:17:15,520 --> 00:17:19,919
not only do that but also re-cluster it

00:17:17,520 --> 00:17:22,480
again from within to see what sort of

00:17:19,919 --> 00:17:23,520
like structure you could find from

00:17:22,480 --> 00:17:25,760
within

00:17:23,520 --> 00:17:27,120
so that's what we're gonna do now and

00:17:25,760 --> 00:17:28,319
that's what you're gonna see here in a

00:17:27,120 --> 00:17:32,720
second so i

00:17:28,319 --> 00:17:36,160
am just opening a pdf file here

00:17:32,720 --> 00:17:37,679
and this is it just

00:17:36,160 --> 00:17:39,520
gonna zoom out for a second to get a

00:17:37,679 --> 00:17:42,240
basic idea of it so

00:17:39,520 --> 00:17:42,880
this is the cluster that i just showed

00:17:42,240 --> 00:17:45,039
you

00:17:42,880 --> 00:17:47,120
isolated as an own graph and clustered

00:17:45,039 --> 00:17:49,440
from like again from within

00:17:47,120 --> 00:17:51,120
and just to get a little look at um the

00:17:49,440 --> 00:17:54,559
stuff that's going on here

00:17:51,120 --> 00:17:57,280
so i hope you can read it

00:17:54,559 --> 00:17:58,640
um there's this very backbone like

00:17:57,280 --> 00:18:00,240
section going on here that's called

00:17:58,640 --> 00:18:01,840
networking general and if you look at

00:18:00,240 --> 00:18:03,360
some of these names in here i'm just

00:18:01,840 --> 00:18:04,960
going to zoom out a little bit

00:18:03,360 --> 00:18:06,480
you're going to see a lot of networking

00:18:04,960 --> 00:18:07,840
stuff going on here so it's networking

00:18:06,480 --> 00:18:11,440
ip security

00:18:07,840 --> 00:18:14,240
networking tcp um lots of networking

00:18:11,440 --> 00:18:17,200
stuff going on here and i'm just

00:18:14,240 --> 00:18:18,160
i'm just saying this is a clear ongoing

00:18:17,200 --> 00:18:21,200
theme in here

00:18:18,160 --> 00:18:24,160
of like networking related sections

00:18:21,200 --> 00:18:24,559
so um it's not that far-fetched to say

00:18:24,160 --> 00:18:28,000
this

00:18:24,559 --> 00:18:29,760
is the networking cluster and

00:18:28,000 --> 00:18:31,360
uh it spans up this like it has this

00:18:29,760 --> 00:18:32,960
backbone section it spans up this big

00:18:31,360 --> 00:18:35,760
subcluster of networking stuff

00:18:32,960 --> 00:18:37,440
but also you have another subcluster all

00:18:35,760 --> 00:18:38,160
the way up to the right there and i'm

00:18:37,440 --> 00:18:39,840
just gonna

00:18:38,160 --> 00:18:41,520
go over there and just zoom in a little

00:18:39,840 --> 00:18:44,720
so you can read it

00:18:41,520 --> 00:18:47,600
so you have kernel nfsd's on our pc

00:18:44,720 --> 00:18:48,480
locked server down here and send our pc

00:18:47,600 --> 00:18:51,360
locked clients

00:18:48,480 --> 00:18:53,600
nfs up here so these are very very

00:18:51,360 --> 00:18:54,400
similar keywords so it does make sense

00:18:53,600 --> 00:18:56,880
that they're put

00:18:54,400 --> 00:18:58,559
in the same subcluster up there and you

00:18:56,880 --> 00:18:58,960
will just have to believe me when i tell

00:18:58,559 --> 00:19:00,960
you that

00:18:58,960 --> 00:19:02,559
these are the only two sections within

00:19:00,960 --> 00:19:05,360
the entire section graph that

00:19:02,559 --> 00:19:07,039
have any of these keywords so not only

00:19:05,360 --> 00:19:09,039
are they put into the same subsystem but

00:19:07,039 --> 00:19:12,559
in the same sub cluster too so

00:19:09,039 --> 00:19:16,000
this sort of makes sense i guess so

00:19:12,559 --> 00:19:17,760
this is the networking cluster and i

00:19:16,000 --> 00:19:19,520
might be just showing you some

00:19:17,760 --> 00:19:20,799
perfect examples here where our

00:19:19,520 --> 00:19:23,600
clustering algorithm

00:19:20,799 --> 00:19:25,280
wields really sensible results but let's

00:19:23,600 --> 00:19:27,520
take a look at some other clusters

00:19:25,280 --> 00:19:29,520
um remember when i bothered you so much

00:19:27,520 --> 00:19:31,840
about the media subsystem earlier like

00:19:29,520 --> 00:19:34,799
what's the media subsystem show it to me

00:19:31,840 --> 00:19:36,720
uh that's your answer this is it this is

00:19:34,799 --> 00:19:38,160
to be precise this is the media and

00:19:36,720 --> 00:19:39,679
staging subsystem

00:19:38,160 --> 00:19:42,640
because sub clustering shows that

00:19:39,679 --> 00:19:44,960
there's a clear media subcluster on here

00:19:42,640 --> 00:19:46,080
and a staging subcluster up there and a

00:19:44,960 --> 00:19:47,600
third

00:19:46,080 --> 00:19:49,840
sub cluster down here just android

00:19:47,600 --> 00:19:52,720
drivers we'll get to that in a second

00:19:49,840 --> 00:19:54,480
and i wanted to know so much about the

00:19:52,720 --> 00:19:56,880
media subsystem and there it is

00:19:54,480 --> 00:19:57,760
this is our media subsystem so again we

00:19:56,880 --> 00:20:00,799
have a very

00:19:57,760 --> 00:20:02,640
clear backbone section right here media

00:20:00,799 --> 00:20:03,840
input infrastructure which like spans up

00:20:02,640 --> 00:20:06,480
the entire

00:20:03,840 --> 00:20:07,600
um subcluster and there's so much

00:20:06,480 --> 00:20:10,720
imagery name

00:20:07,600 --> 00:20:12,480
like going on webcam video

00:20:10,720 --> 00:20:14,080
virtual video driver stuff like that so

00:20:12,480 --> 00:20:17,679
this is very clearly

00:20:14,080 --> 00:20:20,240
the media subsystem

00:20:17,679 --> 00:20:21,600
which contains a lot of media sections

00:20:20,240 --> 00:20:24,000
and up here

00:20:21,600 --> 00:20:24,799
we have apparently within the same

00:20:24,000 --> 00:20:27,280
subsystem

00:20:24,799 --> 00:20:28,159
another subcluster that is entirely for

00:20:27,280 --> 00:20:30,320
staging

00:20:28,159 --> 00:20:31,760
so there's this staging subsystem as the

00:20:30,320 --> 00:20:35,280
backbone and there's so much

00:20:31,760 --> 00:20:38,400
staging going on here and down here

00:20:35,280 --> 00:20:41,840
we also have annual drivers

00:20:38,400 --> 00:20:43,600
as an own sub-cluster so it apparently

00:20:41,840 --> 00:20:45,200
has something to do with staging with

00:20:43,600 --> 00:20:48,240
the staging subsystem

00:20:45,200 --> 00:20:50,720
enough to be put into the same subsystem

00:20:48,240 --> 00:20:52,720
but not in the same sub-cluster like it

00:20:50,720 --> 00:20:56,159
has something to do with staging but

00:20:52,720 --> 00:20:58,960
not enough so it is down here

00:20:56,159 --> 00:20:59,440
and that's the media subsystem for now

00:20:58,960 --> 00:21:01,280
and

00:20:59,440 --> 00:21:03,120
you will just have to believe me when i

00:21:01,280 --> 00:21:05,919
say we could spend hours

00:21:03,120 --> 00:21:07,039
hours discussing these uh these sections

00:21:05,919 --> 00:21:09,520
in this graph

00:21:07,039 --> 00:21:10,559
but you will have to believe me when i

00:21:09,520 --> 00:21:12,799
say that most

00:21:10,559 --> 00:21:13,840
of these major clusters and the minor

00:21:12,799 --> 00:21:17,039
clusters too

00:21:13,840 --> 00:21:18,799
have very very clear themes going on

00:21:17,039 --> 00:21:20,400
so i just assigned labels this is the

00:21:18,799 --> 00:21:22,400
same section graph from before

00:21:20,400 --> 00:21:23,840
but i just assigned labels to the

00:21:22,400 --> 00:21:26,559
clusters and

00:21:23,840 --> 00:21:27,120
of like which their ongoing themes

00:21:26,559 --> 00:21:29,520
within

00:21:27,120 --> 00:21:30,640
the subsystems are so we had a look at

00:21:29,520 --> 00:21:32,960
networking

00:21:30,640 --> 00:21:35,280
and the media and staging subsystem down

00:21:32,960 --> 00:21:39,039
here and we have so much more we have

00:21:35,280 --> 00:21:41,760
scsi arm infiniband usb

00:21:39,039 --> 00:21:43,679
networking drivers which please note

00:21:41,760 --> 00:21:45,440
networking drivers is an own cluster and

00:21:43,679 --> 00:21:46,559
shares a lot of edges with networking

00:21:45,440 --> 00:21:48,159
down here so

00:21:46,559 --> 00:21:49,679
this does make sense if you think about

00:21:48,159 --> 00:21:52,960
it and up here we have

00:21:49,679 --> 00:21:53,600
drm drivers and sound and usb and stuff

00:21:52,960 --> 00:21:56,000
like that

00:21:53,600 --> 00:21:57,360
we don't really have time to discuss all

00:21:56,000 --> 00:21:59,280
of them in details because we could

00:21:57,360 --> 00:22:02,240
spend hours discussing them

00:21:59,280 --> 00:22:03,039
we already have by the way but like not

00:22:02,240 --> 00:22:06,960
here but

00:22:03,039 --> 00:22:10,080
um in our work in our project but

00:22:06,960 --> 00:22:11,919
um sub clustering is not always a good

00:22:10,080 --> 00:22:13,600
idea like i shout two very clear

00:22:11,919 --> 00:22:15,039
examples where sub clustering is a good

00:22:13,600 --> 00:22:16,559
idea some of these are already

00:22:15,039 --> 00:22:19,280
standalone subsystems

00:22:16,559 --> 00:22:21,520
one example would be the drm drivers

00:22:19,280 --> 00:22:22,799
cluster the drm driver subsystem that we

00:22:21,520 --> 00:22:24,400
can see here

00:22:22,799 --> 00:22:25,840
and again we have a clear backbone

00:22:24,400 --> 00:22:28,720
section drm drivers and

00:22:25,840 --> 00:22:30,240
lots of lots of drm drivers section here

00:22:28,720 --> 00:22:31,360
so again we have a very very clear

00:22:30,240 --> 00:22:33,280
ongoing theme

00:22:31,360 --> 00:22:34,720
and actually i'm showing you this for a

00:22:33,280 --> 00:22:36,880
reason because

00:22:34,720 --> 00:22:38,000
i want to talk about this cluster a

00:22:36,880 --> 00:22:41,679
little bit more

00:22:38,000 --> 00:22:42,159
just a quick review of what we saw just

00:22:41,679 --> 00:22:45,440
now

00:22:42,159 --> 00:22:47,760
media subsystem and drm drivers and

00:22:45,440 --> 00:22:49,679
do remember when i told you to keep in

00:22:47,760 --> 00:22:52,159
mind that i was

00:22:49,679 --> 00:22:53,520
analyzing and and working on confirming

00:22:52,159 --> 00:22:56,159
patch integrations

00:22:53,520 --> 00:22:57,919
so just a quick reminder was a patch

00:22:56,159 --> 00:22:59,440
integrated by a relevant maintainer

00:22:57,919 --> 00:23:02,799
according to maintainers or

00:22:59,440 --> 00:23:05,120
the getmancontainer.pl script if yes

00:23:02,799 --> 00:23:06,559
this is a conforming integration and i'm

00:23:05,120 --> 00:23:07,679
not going to go into much detail here

00:23:06,559 --> 00:23:08,159
because that's not the topic of this

00:23:07,679 --> 00:23:10,880
talk

00:23:08,159 --> 00:23:12,080
but the basic idea is to analyze recent

00:23:10,880 --> 00:23:13,360
patch integrations

00:23:12,080 --> 00:23:15,760
and determine if they were done

00:23:13,360 --> 00:23:18,159
conformingly or not and also

00:23:15,760 --> 00:23:18,880
not just that but we want to really have

00:23:18,159 --> 00:23:21,360
like

00:23:18,880 --> 00:23:22,000
have a look at any reasons for why

00:23:21,360 --> 00:23:25,840
patches might

00:23:22,000 --> 00:23:29,520
have been integrated unconformingly and

00:23:25,840 --> 00:23:31,120
very very very important disclaimer at

00:23:29,520 --> 00:23:34,880
this point in time

00:23:31,120 --> 00:23:36,320
so what we really want to do is to

00:23:34,880 --> 00:23:38,559
characterize and improve

00:23:36,320 --> 00:23:40,240
the development process and and

00:23:38,559 --> 00:23:42,559
characterize patch integration

00:23:40,240 --> 00:23:44,080
and to achieve that we have to extract

00:23:42,559 --> 00:23:46,880
the current status

00:23:44,080 --> 00:23:47,200
analyze it discuss it characterize it

00:23:46,880 --> 00:23:49,039
and

00:23:47,200 --> 00:23:51,200
if we as soon as we really understand

00:23:49,039 --> 00:23:51,840
this we can try to support and enhance

00:23:51,200 --> 00:23:54,799
it

00:23:51,840 --> 00:23:56,559
but the first step is to still extract

00:23:54,799 --> 00:23:59,200
the current status and analyze it

00:23:56,559 --> 00:24:00,320
what we do not mean to do under any

00:23:59,200 --> 00:24:02,640
circumstances

00:24:00,320 --> 00:24:04,000
is we do not mean to point fingers we

00:24:02,640 --> 00:24:05,840
are not trying to call out any

00:24:04,000 --> 00:24:08,080
maintainers saying they did a bad job of

00:24:05,840 --> 00:24:10,559
unconfirming patch integrations

00:24:08,080 --> 00:24:11,200
trying to tell them how to do that job

00:24:10,559 --> 00:24:13,200
like

00:24:11,200 --> 00:24:15,279
blaming them or anything like that this

00:24:13,200 --> 00:24:17,760
is not at all what we want to do

00:24:15,279 --> 00:24:19,440
we just need to classify these patches

00:24:17,760 --> 00:24:22,640
in order to

00:24:19,440 --> 00:24:25,279
to to prove like prove the criteria and

00:24:22,640 --> 00:24:26,400
just get a basic idea of what's going on

00:24:25,279 --> 00:24:28,240
and

00:24:26,400 --> 00:24:29,840
classification like this in conforming

00:24:28,240 --> 00:24:31,600
non-conforming is necessary

00:24:29,840 --> 00:24:33,039
but we're not trying to offend anyone

00:24:31,600 --> 00:24:36,159
here this is not

00:24:33,039 --> 00:24:38,480
our goal so with that in mind

00:24:36,159 --> 00:24:40,159
we found something very interesting

00:24:38,480 --> 00:24:42,880
about this cluster

00:24:40,159 --> 00:24:44,880
so um there were some examples of

00:24:42,880 --> 00:24:47,360
unconforming patch integrations

00:24:44,880 --> 00:24:48,320
and two of which were for sections

00:24:47,360 --> 00:24:51,039
within this

00:24:48,320 --> 00:24:51,360
subsystem so we found one conforming

00:24:51,039 --> 00:24:53,760
into

00:24:51,360 --> 00:24:55,520
unconforming integration for intel drm

00:24:53,760 --> 00:24:58,240
drivers up here

00:24:55,520 --> 00:24:59,039
and the other one for intel gbt minus g

00:24:58,240 --> 00:25:02,640
drivers

00:24:59,039 --> 00:25:04,799
all the way up down there

00:25:02,640 --> 00:25:06,559
so we have some unconfirming patch

00:25:04,799 --> 00:25:08,320
integrations but we really want to know

00:25:06,559 --> 00:25:10,320
who actually are these maintainers

00:25:08,320 --> 00:25:11,520
that's unconformingly integrated for

00:25:10,320 --> 00:25:13,840
these sections

00:25:11,520 --> 00:25:15,520
so the maintainer who integrated for

00:25:13,840 --> 00:25:17,840
this section right here

00:25:15,520 --> 00:25:19,039
is a maintainer for this section right

00:25:17,840 --> 00:25:21,919
here drm

00:25:19,039 --> 00:25:24,159
drivers and missed gpu patches and the

00:25:21,919 --> 00:25:25,520
maintainer who integrated unconformingly

00:25:24,159 --> 00:25:28,640
for this section

00:25:25,520 --> 00:25:29,679
is a maintainer for this section drm

00:25:28,640 --> 00:25:32,880
drivers

00:25:29,679 --> 00:25:35,200
so note that not only do these sections

00:25:32,880 --> 00:25:36,320
share edges so they are clearly

00:25:35,200 --> 00:25:39,600
thematically related

00:25:36,320 --> 00:25:42,640
they are in the same subsystem and

00:25:39,600 --> 00:25:45,360
the question now is is it okay

00:25:42,640 --> 00:25:46,320
for a um dear for drm drivers

00:25:45,360 --> 00:25:49,279
maintainers

00:25:46,320 --> 00:25:51,279
to integrate within the drm driver

00:25:49,279 --> 00:25:52,480
subsystem if we define that as a dm

00:25:51,279 --> 00:25:54,720
driver subsystem

00:25:52,480 --> 00:25:56,080
and at least for me the obvious answer

00:25:54,720 --> 00:25:58,880
to that is yes of course

00:25:56,080 --> 00:25:59,760
obviously like those are drm drivers and

00:25:58,880 --> 00:26:02,960
moreover

00:25:59,760 --> 00:26:06,000
these are backbone backbone sections

00:26:02,960 --> 00:26:06,720
um dram drivers maintainers so this is

00:26:06,000 --> 00:26:08,799
like

00:26:06,720 --> 00:26:11,039
a very clear backbone section of the

00:26:08,799 --> 00:26:12,720
entire drm glyce cluster and this is as

00:26:11,039 --> 00:26:14,960
close as we currently get

00:26:12,720 --> 00:26:16,000
at least in our work to like really

00:26:14,960 --> 00:26:18,559
defining

00:26:16,000 --> 00:26:19,679
um a clear-cut defining the maintenance

00:26:18,559 --> 00:26:22,559
hierarchy so you could

00:26:19,679 --> 00:26:24,000
argue that this is higher up in the

00:26:22,559 --> 00:26:27,039
maintenance hierarchy than this because

00:26:24,000 --> 00:26:29,279
this is a backbone section but

00:26:27,039 --> 00:26:30,080
i'm just saying these are drm driver

00:26:29,279 --> 00:26:32,320
subsystems

00:26:30,080 --> 00:26:33,760
and drm drivers maintain us integrating

00:26:32,320 --> 00:26:35,919
for the um drivers maintainers

00:26:33,760 --> 00:26:38,240
and that's probably okay which provides

00:26:35,919 --> 00:26:40,799
a very strong augmentation basis

00:26:38,240 --> 00:26:41,760
for safety critical certification

00:26:40,799 --> 00:26:44,720
criteria

00:26:41,760 --> 00:26:45,120
so this is where it all goes full circle

00:26:44,720 --> 00:26:48,480
and

00:26:45,120 --> 00:26:52,000
this is just so cool to notice and

00:26:48,480 --> 00:26:55,039
moving on let's just take

00:26:52,000 --> 00:26:55,760
a step back and and just take a look at

00:26:55,039 --> 00:26:58,799
what we

00:26:55,760 --> 00:26:59,600
what we achieved so far so we have this

00:26:58,799 --> 00:27:02,000
definition

00:26:59,600 --> 00:27:03,840
for subsystems that we now applied and

00:27:02,000 --> 00:27:04,880
we have a visual representation of

00:27:03,840 --> 00:27:07,440
maintainers

00:27:04,880 --> 00:27:09,840
and we achieved a fully automated and

00:27:07,440 --> 00:27:11,960
mostly very sensible subsystem detection

00:27:09,840 --> 00:27:13,360
so obviously there are

00:27:11,960 --> 00:27:15,200
misclassifications

00:27:13,360 --> 00:27:16,720
such as the nature of clustering

00:27:15,200 --> 00:27:18,640
algorithms and i can show you some of

00:27:16,720 --> 00:27:20,559
them too like i didn't just

00:27:18,640 --> 00:27:22,080
pull out perfect examples i can show

00:27:20,559 --> 00:27:23,120
some of them too there will be time for

00:27:22,080 --> 00:27:24,559
questions later

00:27:23,120 --> 00:27:26,480
and i can still show you some sub

00:27:24,559 --> 00:27:29,520
clusters subsystems

00:27:26,480 --> 00:27:33,039
and stuff like that and we also found a

00:27:29,520 --> 00:27:35,760
very very strong argumentation basis

00:27:33,039 --> 00:27:36,799
for safety critical certifications so

00:27:35,760 --> 00:27:40,159
that's

00:27:36,799 --> 00:27:42,799
really really cool um but

00:27:40,159 --> 00:27:44,159
believe me when i say we are barely

00:27:42,799 --> 00:27:45,360
scratching the surface here because

00:27:44,159 --> 00:27:48,720
there is so much

00:27:45,360 --> 00:27:49,679
more cool work to be done with this sort

00:27:48,720 --> 00:27:51,760
of project

00:27:49,679 --> 00:27:53,679
so the obvious one that i just discussed

00:27:51,760 --> 00:27:56,000
now is further combinations

00:27:53,679 --> 00:27:57,200
of subsystems and conforming patch

00:27:56,000 --> 00:28:00,559
integration

00:27:57,200 --> 00:28:04,320
that's just what i just showed but also

00:28:00,559 --> 00:28:06,240
why cuts down the um the cluster graph

00:28:04,320 --> 00:28:08,480
edit of the section graph at all

00:28:06,240 --> 00:28:10,399
so why have why not have cluster

00:28:08,480 --> 00:28:12,559
discussion on the full section graph so

00:28:10,399 --> 00:28:13,840
why focus on the most influential ones

00:28:12,559 --> 00:28:14,880
when you could have the full section

00:28:13,840 --> 00:28:18,159
graph and see

00:28:14,880 --> 00:28:19,919
the full um like subsystems and stuff

00:28:18,159 --> 00:28:22,399
like that and wouldn't that be so cool

00:28:19,919 --> 00:28:24,159
but also why visualize the newest

00:28:22,399 --> 00:28:25,919
versions of the linux kernel

00:28:24,159 --> 00:28:27,679
like why not visualize earlier versions

00:28:25,919 --> 00:28:29,600
and have a sort of history of

00:28:27,679 --> 00:28:30,880
how subsystems develop and stuff like

00:28:29,600 --> 00:28:34,480
that and

00:28:30,880 --> 00:28:37,039
furthermore we had some first um like

00:28:34,480 --> 00:28:38,880
uh attempts of having an interactive

00:28:37,039 --> 00:28:40,799
graph so the pdf files that i showed

00:28:38,880 --> 00:28:41,360
they are very very static and stuff like

00:28:40,799 --> 00:28:43,520
that

00:28:41,360 --> 00:28:45,120
but if you can have a really integrate

00:28:43,520 --> 00:28:47,760
like interactive graph

00:28:45,120 --> 00:28:48,880
that also if you put in some more work

00:28:47,760 --> 00:28:50,480
and some more explanations

00:28:48,880 --> 00:28:51,919
and some more documentation and stuff

00:28:50,480 --> 00:28:54,960
like that you could have

00:28:51,919 --> 00:28:56,559
a um interactive graph that like

00:28:54,960 --> 00:28:58,000
links to the actual linux kind of

00:28:56,559 --> 00:28:59,520
repository and

00:28:58,000 --> 00:29:01,360
again if you put in some more work you

00:28:59,520 --> 00:29:03,120
could have some have an easier overview

00:29:01,360 --> 00:29:05,440
especially for newcomers who are trying

00:29:03,120 --> 00:29:08,240
to get familiar with the

00:29:05,440 --> 00:29:09,760
linux kernel repository and also the

00:29:08,240 --> 00:29:11,840
work that we do is not

00:29:09,760 --> 00:29:14,000
exclusive to the linux kernel there are

00:29:11,840 --> 00:29:14,720
other open source projects that use a

00:29:14,000 --> 00:29:17,600
sort of like

00:29:14,720 --> 00:29:19,360
maintainer's file like approach to their

00:29:17,600 --> 00:29:20,000
development process i'm just naming

00:29:19,360 --> 00:29:22,480
three here

00:29:20,000 --> 00:29:23,360
and we already have the logic why not

00:29:22,480 --> 00:29:26,880
just try

00:29:23,360 --> 00:29:29,440
to apply it to them and by far

00:29:26,880 --> 00:29:30,080
the idea that i am most hyped about is

00:29:29,440 --> 00:29:32,640
why

00:29:30,080 --> 00:29:33,120
visualize sections wouldn't it be so

00:29:32,640 --> 00:29:35,279
cool

00:29:33,120 --> 00:29:36,640
so cool to have a maintainer's graph

00:29:35,279 --> 00:29:39,279
where you could like

00:29:36,640 --> 00:29:40,240
um still analyze the maintainers file

00:29:39,279 --> 00:29:42,559
but instead of

00:29:40,240 --> 00:29:44,000
analyzing and visualizing sections you

00:29:42,559 --> 00:29:45,520
could visualize maintainers

00:29:44,000 --> 00:29:47,919
and thematic relations between

00:29:45,520 --> 00:29:50,000
maintainers and have sort of

00:29:47,919 --> 00:29:51,440
a detection for subsystems of

00:29:50,000 --> 00:29:52,720
maintainers or communities of

00:29:51,440 --> 00:29:54,080
maintainers and it's going to be a

00:29:52,720 --> 00:29:55,840
completely different graph it's going to

00:29:54,080 --> 00:29:58,880
like correlate maybe a little to it

00:29:55,840 --> 00:29:59,520
but that would be so cool and if you're

00:29:58,880 --> 00:30:01,360
interested

00:29:59,520 --> 00:30:02,559
at all in the work that we do with how

00:30:01,360 --> 00:30:05,919
we did it um

00:30:02,559 --> 00:30:06,880
all work is integrated at github.com lfd

00:30:05,919 --> 00:30:08,799
which stands for

00:30:06,880 --> 00:30:10,960
laboratory for digitalization slash

00:30:08,799 --> 00:30:11,360
pasta which is the patch deck analysis

00:30:10,960 --> 00:30:14,960
tool

00:30:11,360 --> 00:30:17,360
um developed by hal from zawa and just

00:30:14,960 --> 00:30:19,360
basically this is it if you have any

00:30:17,360 --> 00:30:22,240
questions there is a 30 seconds delay so

00:30:19,360 --> 00:30:23,520
maybe start typing them now

00:30:22,240 --> 00:30:25,440
so much for listening and being

00:30:23,520 --> 00:30:28,240
interested in the work that we do

00:30:25,440 --> 00:30:29,760
i am ready for anything that we would

00:30:28,240 --> 00:30:33,120
like to discuss now

00:30:29,760 --> 00:30:33,120
so yes that's it

00:30:33,760 --> 00:30:38,240
thank you very much pierre um yes we

00:30:36,480 --> 00:30:39,679
will be taking questions uh just by the

00:30:38,240 --> 00:30:40,880
text chat so if you could prefix your

00:30:39,679 --> 00:30:45,840
questions with

00:30:40,880 --> 00:30:45,840
question and we'll ask them as we see

00:30:48,840 --> 00:30:51,840
them

00:30:55,520 --> 00:31:00,799
so i can maybe say something

00:30:58,640 --> 00:31:02,399
in the meantime if you want to look at

00:31:00,799 --> 00:31:03,279
any of these clusters that i showed in

00:31:02,399 --> 00:31:04,559
the section graph

00:31:03,279 --> 00:31:06,720
we could still have any cluster

00:31:04,559 --> 00:31:08,720
discussion or

00:31:06,720 --> 00:31:10,559
if you maybe later have any any sort of

00:31:08,720 --> 00:31:14,480
questions you could still contact

00:31:10,559 --> 00:31:16,240
me or any of my collaborators

00:31:14,480 --> 00:31:18,640
two of which are present today who could

00:31:16,240 --> 00:31:20,559
also write in chat and

00:31:18,640 --> 00:31:22,320
we could still have cluster discussion

00:31:20,559 --> 00:31:24,399
after this talk or even like

00:31:22,320 --> 00:31:25,679
show you how to replicate all this data

00:31:24,399 --> 00:31:26,559
and all these graphs that i showed you

00:31:25,679 --> 00:31:30,840
today yourself

00:31:26,559 --> 00:31:33,279
it's not that hard and yeah

00:31:30,840 --> 00:31:36,399
just

00:31:33,279 --> 00:31:36,399
just for your information

00:31:41,840 --> 00:31:47,279
um we have a question uh from nick

00:31:44,880 --> 00:31:48,240
it looks like arm was the note with the

00:31:47,279 --> 00:31:52,720
most edges

00:31:48,240 --> 00:31:55,919
any insights there yes so okay

00:31:52,720 --> 00:31:58,080
uh arm is by far the note with the most

00:31:55,919 --> 00:32:00,640
edges that is indeed correct

00:31:58,080 --> 00:32:02,320
and it's a very very very highly

00:32:00,640 --> 00:32:05,600
interconnected cluster

00:32:02,320 --> 00:32:07,279
as it is inside it's also outside and

00:32:05,600 --> 00:32:09,360
the reason behind that is i hope you can

00:32:07,279 --> 00:32:10,720
read that i did my best of having labels

00:32:09,360 --> 00:32:13,840
that do not intersect but these

00:32:10,720 --> 00:32:15,279
these are like very very long labels so

00:32:13,840 --> 00:32:18,640
the reason behind that is

00:32:15,279 --> 00:32:19,840
this cluster contains so many vertices

00:32:18,640 --> 00:32:22,559
so many sections

00:32:19,840 --> 00:32:23,840
that share so like within the entire

00:32:22,559 --> 00:32:26,000
section graph they have

00:32:23,840 --> 00:32:28,480
very very high degrees and by far the

00:32:26,000 --> 00:32:29,840
one with the most degrees is open

00:32:28,480 --> 00:32:30,880
firmware and flattened device tree

00:32:29,840 --> 00:32:33,679
bindings

00:32:30,880 --> 00:32:35,679
um this is in here and there is so much

00:32:33,679 --> 00:32:37,440
arm stuff going in here within this this

00:32:35,679 --> 00:32:39,919
very very big subcluster

00:32:37,440 --> 00:32:42,080
which has like i don't know it just has

00:32:39,919 --> 00:32:45,440
a very very high overall degree

00:32:42,080 --> 00:32:48,480
in the um the section graph

00:32:45,440 --> 00:32:49,600
um that's all i can say that i did not

00:32:48,480 --> 00:32:51,120
show i

00:32:49,600 --> 00:32:52,720
i am well aware that this is a very

00:32:51,120 --> 00:32:53,120
interesting cluster but i did not show

00:32:52,720 --> 00:32:55,600
it

00:32:53,120 --> 00:32:57,039
because it's it's very hard to read and

00:32:55,600 --> 00:32:59,360
it's very hard to look at

00:32:57,039 --> 00:33:00,480
but i'm very glad that you're interested

00:32:59,360 --> 00:33:04,000
in it so

00:33:00,480 --> 00:33:06,240
just this is a sub-cluster down here

00:33:04,000 --> 00:33:07,200
um with a lot of arm stuff going on

00:33:06,240 --> 00:33:08,240
which is apparently highly

00:33:07,200 --> 00:33:11,039
interconnected

00:33:08,240 --> 00:33:13,200
and you also have one subclass up here

00:33:11,039 --> 00:33:14,559
which has a lot of pin control stuff

00:33:13,200 --> 00:33:18,480
going on

00:33:14,559 --> 00:33:19,760
and um another cluster down here i can

00:33:18,480 --> 00:33:21,360
show them again in a second

00:33:19,760 --> 00:33:22,880
that has like some sort of an accident

00:33:21,360 --> 00:33:26,320
stuff going on and when i

00:33:22,880 --> 00:33:28,159
researched the degrees of the the

00:33:26,320 --> 00:33:29,760
vertices inside of these clusters i

00:33:28,159 --> 00:33:33,919
noticed that within

00:33:29,760 --> 00:33:36,399
this very very big subcluster up here

00:33:33,919 --> 00:33:37,279
there are a lot of arm sections which

00:33:36,399 --> 00:33:40,960
just have

00:33:37,279 --> 00:33:42,240
a very very high degree i

00:33:40,960 --> 00:33:43,679
don't know these sections i haven't

00:33:42,240 --> 00:33:44,880
worked with any of them professionally

00:33:43,679 --> 00:33:47,279
but

00:33:44,880 --> 00:33:48,480
that's just the nature of this very

00:33:47,279 --> 00:33:52,799
subsystem right here

00:33:48,480 --> 00:33:56,080
so if that answers your question um

00:33:52,799 --> 00:33:57,679
yes it's it's just very highly connected

00:33:56,080 --> 00:33:59,279
and it contains the

00:33:57,679 --> 00:34:00,559
highest degree vertex within the entire

00:33:59,279 --> 00:34:02,640
section graph open firmware and

00:34:00,559 --> 00:34:05,760
flattened device stream binding so just

00:34:02,640 --> 00:34:07,600
on a quick side note and why i

00:34:05,760 --> 00:34:09,440
didn't really show this one specifically

00:34:07,600 --> 00:34:12,240
but there is still this

00:34:09,440 --> 00:34:13,040
very very clear theme going on in here

00:34:12,240 --> 00:34:16,079
um of

00:34:13,040 --> 00:34:17,919
arm pin controller and samsung exynos so

00:34:16,079 --> 00:34:20,320
just a bit a little bit of information

00:34:17,919 --> 00:34:24,639
on this subsystem and these clusters

00:34:20,320 --> 00:34:24,639
if that answers your question is it okay

00:34:25,520 --> 00:34:31,919
um we've got another question from uber

00:34:29,599 --> 00:34:32,879
who is asking have you considered

00:34:31,919 --> 00:34:34,960
pruning some

00:34:32,879 --> 00:34:36,240
sections or clusters from your analysis

00:34:34,960 --> 00:34:38,079
in many kernels you don't configure a

00:34:36,240 --> 00:34:39,679
lot of the code

00:34:38,079 --> 00:34:42,960
so for security critical stuff it might

00:34:39,679 --> 00:34:46,960
be useful to exclude staging for example

00:34:42,960 --> 00:34:48,079
not yet we did not have any sorts of

00:34:46,960 --> 00:34:49,919
cutting down other

00:34:48,079 --> 00:34:51,760
than the cutting down on the most

00:34:49,919 --> 00:34:52,240
influential sections so we did not pick

00:34:51,760 --> 00:34:55,440
any

00:34:52,240 --> 00:34:57,359
specific sections and just um

00:34:55,440 --> 00:34:59,440
manually remove them other than the rest

00:34:57,359 --> 00:35:00,640
okay the rest is the most trivial and

00:34:59,440 --> 00:35:02,320
boring section because it's

00:35:00,640 --> 00:35:03,760
shares every single file with every

00:35:02,320 --> 00:35:05,119
single section so

00:35:03,760 --> 00:35:07,920
this was the only one that was

00:35:05,119 --> 00:35:11,280
specifically removed but other than that

00:35:07,920 --> 00:35:12,320
we did not and we don't necessarily plan

00:35:11,280 --> 00:35:15,920
on doing that

00:35:12,320 --> 00:35:16,640
yet either so if we push this work

00:35:15,920 --> 00:35:20,240
further

00:35:16,640 --> 00:35:21,920
to really verify like certain criteria

00:35:20,240 --> 00:35:24,880
for the certifications

00:35:21,920 --> 00:35:26,560
this might be the case because we are

00:35:24,880 --> 00:35:27,599
aware that not all subsystems are

00:35:26,560 --> 00:35:30,560
necessarily

00:35:27,599 --> 00:35:31,920
really really interesting for safety

00:35:30,560 --> 00:35:33,280
critical environments but

00:35:31,920 --> 00:35:35,839
we're not doing that yet so this is

00:35:33,280 --> 00:35:37,359
still just very very very surface of the

00:35:35,839 --> 00:35:40,240
work that we're doing here

00:35:37,359 --> 00:35:42,400
there's so much more to to be gained or

00:35:40,240 --> 00:35:44,240
so much potential more

00:35:42,400 --> 00:35:45,680
i don't know it's just the very start of

00:35:44,240 --> 00:35:48,960
it all so

00:35:45,680 --> 00:35:50,320
um yeah we we are thinking about it

00:35:48,960 --> 00:35:53,359
though

00:35:50,320 --> 00:35:55,040
that answers the question yeah uh

00:35:53,359 --> 00:35:56,640
question it seems like one of the

00:35:55,040 --> 00:35:58,320
easiest things to do

00:35:56,640 --> 00:36:00,160
useful with the data would be to look

00:35:58,320 --> 00:36:01,440
for likely out of date information in

00:36:00,160 --> 00:36:03,920
maintainers is that something you've

00:36:01,440 --> 00:36:03,920
considered

00:36:04,560 --> 00:36:08,640
um slightly out of date

00:36:08,880 --> 00:36:15,440
so what you're saying is out of date um

00:36:12,960 --> 00:36:16,400
sections and like misclassification and

00:36:15,440 --> 00:36:18,320
stuff like

00:36:16,400 --> 00:36:19,920
okay this should not belong in this

00:36:18,320 --> 00:36:24,400
subsystem something like that

00:36:19,920 --> 00:36:26,640
did i understand that question correctly

00:36:24,400 --> 00:36:28,079
uh yes looking looking for likely

00:36:26,640 --> 00:36:30,880
out-of-date information

00:36:28,079 --> 00:36:33,920
in maintainers information that might

00:36:30,880 --> 00:36:33,920
need updating in the list

00:36:34,560 --> 00:36:41,280
no okay so this sort of work

00:36:38,240 --> 00:36:44,480
really thrives from discussing it with

00:36:41,280 --> 00:36:47,200
um with the community so

00:36:44,480 --> 00:36:49,359
okay quick disclaimer at this point i

00:36:47,200 --> 00:36:50,079
know my section graph right i know my

00:36:49,359 --> 00:36:51,839
vertices

00:36:50,079 --> 00:36:53,599
i know this thing like the back of my

00:36:51,839 --> 00:36:54,160
hand i've had my sheer fear of working

00:36:53,599 --> 00:36:56,480
with this

00:36:54,160 --> 00:36:57,760
but what i do not know are the singular

00:36:56,480 --> 00:37:00,720
sections the singular

00:36:57,760 --> 00:37:03,119
vertex is vertices because i haven't

00:37:00,720 --> 00:37:06,079
worked with any of these sections before

00:37:03,119 --> 00:37:07,920
so what i really can't do at this

00:37:06,079 --> 00:37:08,560
specific point in time is really look at

00:37:07,920 --> 00:37:10,800
sections

00:37:08,560 --> 00:37:12,320
and already know them and know that this

00:37:10,800 --> 00:37:14,079
should not be long in there or this is

00:37:12,320 --> 00:37:15,040
outdated and this must be updated and

00:37:14,079 --> 00:37:18,400
stuff like that

00:37:15,040 --> 00:37:21,119
that's not what we're currently doing

00:37:18,400 --> 00:37:21,680
but what we do want to do is show this

00:37:21,119 --> 00:37:23,599
data

00:37:21,680 --> 00:37:25,280
to the relevant maintainers and

00:37:23,599 --> 00:37:26,640
developers who actually work with these

00:37:25,280 --> 00:37:29,200
sections

00:37:26,640 --> 00:37:30,880
every day and um this sort of work

00:37:29,200 --> 00:37:31,520
really fries from that because if you do

00:37:30,880 --> 00:37:33,200
that

00:37:31,520 --> 00:37:34,800
then you always have an up-to-date

00:37:33,200 --> 00:37:36,400
overview of how these

00:37:34,800 --> 00:37:37,839
subsystems actually looked like that's

00:37:36,400 --> 00:37:39,040
still something we want to do so have

00:37:37,839 --> 00:37:40,880
like cluster discussion

00:37:39,040 --> 00:37:42,079
with the actual maintainers and the

00:37:40,880 --> 00:37:44,079
actual developers

00:37:42,079 --> 00:37:45,680
to sort of get this so this is still

00:37:44,079 --> 00:37:47,520
something we want to do because like i

00:37:45,680 --> 00:37:49,359
said this sort of work really thrives

00:37:47,520 --> 00:37:51,839
from showing it to the people that work

00:37:49,359 --> 00:37:54,880
with these sections every single day

00:37:51,839 --> 00:37:58,240
and yes that will be

00:37:54,880 --> 00:38:00,160
a consequence of of doing that after all

00:37:58,240 --> 00:38:01,839
so we do want to show that to them

00:38:00,160 --> 00:38:03,680
and there will be some surprising

00:38:01,839 --> 00:38:05,599
structures of people thinking like okay

00:38:03,680 --> 00:38:07,520
this should not be long in there or this

00:38:05,599 --> 00:38:09,920
does actually surprise me that

00:38:07,520 --> 00:38:11,760
these things have medical relations so

00:38:09,920 --> 00:38:14,560
that's probably something to come

00:38:11,760 --> 00:38:14,880
but we don't have anything yet in mind

00:38:14,560 --> 00:38:16,839
to

00:38:14,880 --> 00:38:19,040
automate that just having these

00:38:16,839 --> 00:38:20,720
subsystems and showing it to the

00:38:19,040 --> 00:38:21,920
developers and maintainers so that's

00:38:20,720 --> 00:38:25,599
something to come

00:38:21,920 --> 00:38:28,480
and yeah so

00:38:25,599 --> 00:38:28,480
we'll probably have that

00:38:28,800 --> 00:38:32,240
if i want to build a safety critical

00:38:30,320 --> 00:38:36,000
system could i use your work to identify

00:38:32,240 --> 00:38:36,000
sections i could consider excluding

00:38:37,280 --> 00:38:47,520
okay let me realize that if i

00:38:40,320 --> 00:38:50,160
to consider sections to exclude

00:38:47,520 --> 00:38:51,359
do we have anything from um wolfgang

00:38:50,160 --> 00:38:55,200
maher and

00:38:51,359 --> 00:38:58,320
chet um because

00:38:55,200 --> 00:39:00,560
i i believe that

00:38:58,320 --> 00:39:02,560
yes like if you look at the data and how

00:39:00,560 --> 00:39:05,119
these regular relations

00:39:02,560 --> 00:39:07,040
are connected but i have to admit i'm

00:39:05,119 --> 00:39:08,960
not entirely sure

00:39:07,040 --> 00:39:12,240
so you want to exclude sections for

00:39:08,960 --> 00:39:12,240
certain surgical inclusion

00:39:12,320 --> 00:39:16,640
well what you really could find is okay

00:39:14,640 --> 00:39:18,240
i have these sections that are really

00:39:16,640 --> 00:39:19,839
important to me and you could find

00:39:18,240 --> 00:39:21,839
they automatically related to other

00:39:19,839 --> 00:39:22,960
sections so that's something you could

00:39:21,839 --> 00:39:25,200
notify

00:39:22,960 --> 00:39:27,200
and are like find out that they do not

00:39:25,200 --> 00:39:28,320
share any medical relations with certain

00:39:27,200 --> 00:39:31,040
sections so

00:39:28,320 --> 00:39:32,320
these could be like immediately excluded

00:39:31,040 --> 00:39:34,880
or you could find

00:39:32,320 --> 00:39:36,400
surprising medical relations for other

00:39:34,880 --> 00:39:37,760
sections that you do then have to

00:39:36,400 --> 00:39:38,720
consider so that's something you could

00:39:37,760 --> 00:39:40,079
use it for

00:39:38,720 --> 00:39:42,000
sorry i had to think about that for a

00:39:40,079 --> 00:39:44,240
second but yes i do believe

00:39:42,000 --> 00:39:46,079
that this sort of work could be

00:39:44,240 --> 00:39:47,920
beneficial for that

00:39:46,079 --> 00:39:50,400
because like you could just see okay no

00:39:47,920 --> 00:39:52,400
edge is shared this is just

00:39:50,400 --> 00:39:53,520
you can just disregard all of these

00:39:52,400 --> 00:39:57,839
sections so

00:39:53,520 --> 00:39:57,839
i i think yes i think

00:40:05,680 --> 00:40:11,839
any more questions

00:40:58,640 --> 00:41:02,800
okay it looks like we've uh um finished

00:41:01,520 --> 00:41:05,839
with the questions

00:41:02,800 --> 00:41:07,839
so thank you very much pia and if you've

00:41:05,839 --> 00:41:10,160
got any further questions

00:41:07,839 --> 00:41:12,480
ask them in the boss channel or send

00:41:10,160 --> 00:41:16,079
them by email to peer

00:41:12,480 --> 00:41:20,400
yes please do

00:41:16,079 --> 00:41:20,400

YouTube URL: https://www.youtube.com/watch?v=YDNzKGTl_PY


