Title: "The privacy aspect of TPM attestation" - Imran Desai, Peter Huewe (LCA 2021 Online)
Publication date: 2021-01-31
Playlist: linux.conf.au 2021
Description: 
	Imran Desai, Peter Huewe

https://lca2021.linux.org.au/schedule/presentation/75/

As digital computing continues to become ubiquitous, it has become indispensable
to accurately measure the trust in the systems we interact with, especially
remotely. With the advent of IoT, platform security, and privacy design goals
and solutions continue to be increasingly variegated. One of the reliable and
standard choices to accurately assess trust in a system is to use trusted platform
modules (TPM) to cryptographically prove the system-software-state through a
process called attestation.

After a brief introduction to remote attestation, this talk will elicit
the privacy aspects of remote attestation within the TPM2.0 specification.
We will explore how specific TPM2 commands work in the context of the
remote attestation use case, highlight which data and information is exchanged
during the process and point out some features that augment the security and
privacy of the end-user.

This enables system designers to compare and or customize the existing
attestation frameworks to achieve their specific security and privacy goals and
evaluate them for their real-world use cases.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Mon Jan 25 14:25:00 2021 at Pia Andrews Conservatory
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,759 --> 00:00:19,279
hey

00:00:16,480 --> 00:00:21,199
i'm so glad you could join us again

00:00:19,279 --> 00:00:22,160
joining me on our virtual stage are

00:00:21,199 --> 00:00:24,480
imran desai

00:00:22,160 --> 00:00:26,240
and peter hulvey they've been working as

00:00:24,480 --> 00:00:28,400
software engineers and developers in

00:00:26,240 --> 00:00:30,960
companies developing around tpms

00:00:28,400 --> 00:00:32,880
trusted platform modules here they're

00:00:30,960 --> 00:00:33,840
going to briefly tell us about remote

00:00:32,880 --> 00:00:35,280
attestation

00:00:33,840 --> 00:00:37,840
the privacy aspects of remote

00:00:35,280 --> 00:00:39,920
attestation within tpm 2.0

00:00:37,840 --> 00:00:41,200
and how you can customize existing

00:00:39,920 --> 00:00:43,360
adaptation frameworks

00:00:41,200 --> 00:00:44,320
for your security and privacy use

00:00:43,360 --> 00:00:47,360
questions

00:00:44,320 --> 00:00:48,719
use cases questions are welcome

00:00:47,360 --> 00:00:50,719
but they're not going to happen on the

00:00:48,719 --> 00:00:53,120
stream they're going to happen in our

00:00:50,719 --> 00:00:53,920
post talk qa chat channel and both of

00:00:53,120 --> 00:00:58,559
them will be there

00:00:53,920 --> 00:01:00,640
after the talk take it away

00:00:58,559 --> 00:01:02,239
hello everyone um thanks for attending

00:01:00,640 --> 00:01:02,960
our talk sorry that we run a little bit

00:01:02,239 --> 00:01:05,119
late but

00:01:02,960 --> 00:01:06,080
that's how it is with live conferences

00:01:05,119 --> 00:01:08,320
um as

00:01:06,080 --> 00:01:10,640
said today we will talk you to the

00:01:08,320 --> 00:01:12,479
basics of attestation and then explain

00:01:10,640 --> 00:01:14,640
you the details of the privacy aspects

00:01:12,479 --> 00:01:16,159
of it my name is peter huvey

00:01:14,640 --> 00:01:17,920
i'm presenting from augsburg germany

00:01:16,159 --> 00:01:22,240
it's early in the morning for you

00:01:17,920 --> 00:01:25,040
for me and i work as a embedded software

00:01:22,240 --> 00:01:26,640
software security developer at infineon

00:01:25,040 --> 00:01:29,280
and together with me is today

00:01:26,640 --> 00:01:31,280
um imran hello and welcome to this

00:01:29,280 --> 00:01:32,799
presentation my name is imran desai i'm

00:01:31,280 --> 00:01:34,400
a security software engineer at intel

00:01:32,799 --> 00:01:35,439
corporation system software engineering

00:01:34,400 --> 00:01:37,200
division

00:01:35,439 --> 00:01:39,920
and i'm a developer and maintainer of

00:01:37,200 --> 00:01:41,040
the tpm2 tools project under the tpm to

00:01:39,920 --> 00:01:42,720
software organization

00:01:41,040 --> 00:01:44,000
today i will be building upon the

00:01:42,720 --> 00:01:46,000
foundational topics of device

00:01:44,000 --> 00:01:48,240
attestation that peter is going to cover

00:01:46,000 --> 00:01:49,840
and delve into the details of the

00:01:48,240 --> 00:01:51,680
security and privacy aspects

00:01:49,840 --> 00:01:53,600
that render a tpm based attestation

00:01:51,680 --> 00:01:55,680
trustworthy

00:01:53,600 --> 00:01:56,880
yeah in case you're wondering why are

00:01:55,680 --> 00:01:58,799
two people present

00:01:56,880 --> 00:02:01,280
from different companies presenting one

00:01:58,799 --> 00:02:03,600
joint topic this exactly because um

00:02:01,280 --> 00:02:05,920
iman and myself and a lot of more people

00:02:03,600 --> 00:02:09,599
are working together on our little nice

00:02:05,920 --> 00:02:11,680
community effort driven a project called

00:02:09,599 --> 00:02:14,520
tpm2 software.gita

00:02:11,680 --> 00:02:17,680
github.io it's a community-backed

00:02:14,520 --> 00:02:20,080
community-backed effort

00:02:17,680 --> 00:02:21,599
that is also supported by infineon intel

00:02:20,080 --> 00:02:24,160
fraunhofer red hat and

00:02:21,599 --> 00:02:26,400
we have a lot of hobbyists as well and

00:02:24,160 --> 00:02:28,319
our aim in our project is to make your

00:02:26,400 --> 00:02:30,959
life with the tpm 2.0

00:02:28,319 --> 00:02:34,160
under linux easier for this we we

00:02:30,959 --> 00:02:37,760
provide a tcg compliant

00:02:34,160 --> 00:02:40,959
tpm2 software stack um we also

00:02:37,760 --> 00:02:43,280
ship ship a lot of different tools and

00:02:40,959 --> 00:02:45,599
uh also provide an integration into

00:02:43,280 --> 00:02:49,360
openssl and pkc11

00:02:45,599 --> 00:02:52,239
so and recently also there was some

00:02:49,360 --> 00:02:53,200
integration into system decrypt setup so

00:02:52,239 --> 00:02:55,760
if you want to do

00:02:53,200 --> 00:02:56,720
some bit locker-like full disk

00:02:55,760 --> 00:02:59,760
encryption

00:02:56,720 --> 00:03:03,440
um yeah we got you covered

00:02:59,760 --> 00:03:04,239
our project um has this really nice

00:03:03,440 --> 00:03:06,080
community

00:03:04,239 --> 00:03:07,840
if you want to have more details go

00:03:06,080 --> 00:03:10,959
ahead over to tpm

00:03:07,840 --> 00:03:12,720
to software.github io and if you want to

00:03:10,959 --> 00:03:15,200
have more details about the whole

00:03:12,720 --> 00:03:18,560
software stack how we can use that or

00:03:15,200 --> 00:03:20,879
how we can use all that stuff just

00:03:18,560 --> 00:03:21,599
hit up your search and hit up the search

00:03:20,879 --> 00:03:24,480
engine

00:03:21,599 --> 00:03:25,040
of your choice and search for my talk

00:03:24,480 --> 00:03:26,879
about

00:03:25,040 --> 00:03:29,280
using the tpm it's not rocket science

00:03:26,879 --> 00:03:32,640
anymore

00:03:29,280 --> 00:03:33,840
yeah so remote attestation what is

00:03:32,640 --> 00:03:36,400
remote attestation

00:03:33,840 --> 00:03:37,920
what is attestation at all brief

00:03:36,400 --> 00:03:39,760
disclaimer or short disclaimer

00:03:37,920 --> 00:03:41,200
this will be a really really quick and

00:03:39,760 --> 00:03:43,840
simplified

00:03:41,200 --> 00:03:44,799
introduction by me because there are two

00:03:43,840 --> 00:03:47,280
reasons for this

00:03:44,799 --> 00:03:49,519
on the one hand side imran will guide

00:03:47,280 --> 00:03:52,000
you through the details later on

00:03:49,519 --> 00:03:52,959
and we just want to give you a

00:03:52,000 --> 00:03:54,879
groundwork or

00:03:52,959 --> 00:03:56,400
the framework for this beforehand and on

00:03:54,879 --> 00:03:58,080
the other hand side

00:03:56,400 --> 00:03:59,680
most of you probably attended last

00:03:58,080 --> 00:04:01,519
year's lca

00:03:59,680 --> 00:04:03,840
and there matthew garrett gave a really

00:04:01,519 --> 00:04:05,280
nice talk about tpm based attestation

00:04:03,840 --> 00:04:07,120
and of course we don't want to repeat

00:04:05,280 --> 00:04:08,239
information that already already has

00:04:07,120 --> 00:04:12,840
been presented

00:04:08,239 --> 00:04:16,480
so we will just give you a quick

00:04:12,840 --> 00:04:16,480
overview so

00:04:16,799 --> 00:04:20,720
uh so what is at the station let's start

00:04:19,840 --> 00:04:23,919
with the

00:04:20,720 --> 00:04:25,680
with the beginning to a test it means to

00:04:23,919 --> 00:04:29,199
affirm something to be correct

00:04:25,680 --> 00:04:31,040
true or genuine or to witness something

00:04:29,199 --> 00:04:33,120
so it's let's start with these two

00:04:31,040 --> 00:04:36,160
persons um we have robin

00:04:33,120 --> 00:04:36,880
and she meets alex and wants to trust

00:04:36,160 --> 00:04:38,720
him or

00:04:36,880 --> 00:04:40,960
doesn't know whether she can trust him

00:04:38,720 --> 00:04:43,040
and she asks alex can i trust you

00:04:40,960 --> 00:04:44,000
and of course alex says of course you

00:04:43,040 --> 00:04:46,080
can trust me

00:04:44,000 --> 00:04:47,120
i'm a random stranger of the internet

00:04:46,080 --> 00:04:49,919
you can trust me

00:04:47,120 --> 00:04:51,520
um yeah as with all random strangers of

00:04:49,919 --> 00:04:54,479
the internet

00:04:51,520 --> 00:04:55,600
they can lie but of course alex is

00:04:54,479 --> 00:04:58,880
prepared for that

00:04:55,600 --> 00:05:02,000
he has some kind of evidence that shows

00:04:58,880 --> 00:05:02,800
that he is a trustworthy person he wants

00:05:02,000 --> 00:05:05,919
to show his

00:05:02,800 --> 00:05:07,919
police record as evidence but

00:05:05,919 --> 00:05:10,560
unfortunately that police record is

00:05:07,919 --> 00:05:12,320
signed but in a different language so

00:05:10,560 --> 00:05:14,880
robin cannot really

00:05:12,320 --> 00:05:16,639
read that language that evidence is not

00:05:14,880 --> 00:05:18,400
too much of work for her

00:05:16,639 --> 00:05:20,960
but she has a friend who speaks that

00:05:18,400 --> 00:05:24,400
language and also happens to know

00:05:20,960 --> 00:05:26,479
alex in person and she asked veronica

00:05:24,400 --> 00:05:27,919
can you please verify this random

00:05:26,479 --> 00:05:30,400
stranger of the internet

00:05:27,919 --> 00:05:32,240
and veronica looks at his police record

00:05:30,400 --> 00:05:35,120
also knows him personally and then

00:05:32,240 --> 00:05:35,680
she can vouch for his identity and say

00:05:35,120 --> 00:05:38,800
yes

00:05:35,680 --> 00:05:40,880
alex is trustworthy

00:05:38,800 --> 00:05:42,720
of course these names or the the names

00:05:40,880 --> 00:05:44,960
that we were just using

00:05:42,720 --> 00:05:46,320
were not randomly made up there the

00:05:44,960 --> 00:05:49,600
initials of these names

00:05:46,320 --> 00:05:51,039
actually correspond to the roles of the

00:05:49,600 --> 00:05:54,160
itf

00:05:51,039 --> 00:05:56,240
rats standard the red standard

00:05:54,160 --> 00:05:58,000
explains remote as the attestation

00:05:56,240 --> 00:06:01,280
systems

00:05:58,000 --> 00:06:04,160
so robin becomes the relying party

00:06:01,280 --> 00:06:05,280
alex becomes the tester veronica the

00:06:04,160 --> 00:06:08,639
rarifier

00:06:05,280 --> 00:06:11,360
and the evidence stays the same

00:06:08,639 --> 00:06:12,960
so if we go to devices um the statement

00:06:11,360 --> 00:06:16,160
about trustworthiness always

00:06:12,960 --> 00:06:18,000
or often corresponds to whether uh about

00:06:16,160 --> 00:06:19,280
to us to a statement whether the

00:06:18,000 --> 00:06:21,680
platform is in a good

00:06:19,280 --> 00:06:22,800
state and of course there's the dilemma

00:06:21,680 --> 00:06:25,520
if i ask the plus

00:06:22,800 --> 00:06:27,440
platform are you a good device the

00:06:25,520 --> 00:06:29,440
platform will always respond

00:06:27,440 --> 00:06:30,960
yes i'm a good of device of course you

00:06:29,440 --> 00:06:34,080
can trust me because

00:06:30,960 --> 00:06:34,880
because if it's good then it will claim

00:06:34,080 --> 00:06:37,680
that it's

00:06:34,880 --> 00:06:39,440
that that it is in a good state however

00:06:37,680 --> 00:06:40,880
if it has been compromised it will

00:06:39,440 --> 00:06:43,919
simply lie to you

00:06:40,880 --> 00:06:45,360
and also say it's in a good state and to

00:06:43,919 --> 00:06:47,360
tell the difference is really really

00:06:45,360 --> 00:06:49,840
hard

00:06:47,360 --> 00:06:50,800
and for this we need some help to tell

00:06:49,840 --> 00:06:52,800
the difference

00:06:50,800 --> 00:06:54,560
and we have this little nice

00:06:52,800 --> 00:06:57,120
cryptocontroller uh

00:06:54,560 --> 00:06:58,479
security controller called tpm trusted

00:06:57,120 --> 00:07:00,960
platform module

00:06:58,479 --> 00:07:01,759
um it's basically in every device or in

00:07:00,960 --> 00:07:04,400
every modern

00:07:01,759 --> 00:07:05,520
pc there are also heads for raspberries

00:07:04,400 --> 00:07:07,919
and all this stuff so

00:07:05,520 --> 00:07:08,880
it's easy to have that in all commodity

00:07:07,919 --> 00:07:11,360
platforms

00:07:08,880 --> 00:07:12,800
it's an open standard defined by the tcg

00:07:11,360 --> 00:07:14,880
and it supports a

00:07:12,800 --> 00:07:16,880
powerful authorization module it has

00:07:14,880 --> 00:07:19,199
this platform configuration registers

00:07:16,880 --> 00:07:21,120
please keep them in mind a secure key

00:07:19,199 --> 00:07:24,720
storage and true number

00:07:21,120 --> 00:07:24,720
true random number generators

00:07:24,880 --> 00:07:28,720
so what about these pcrs why are these

00:07:27,680 --> 00:07:32,080
so important

00:07:28,720 --> 00:07:34,960
or rather how can we measure that our

00:07:32,080 --> 00:07:36,560
or how can we record that our platform

00:07:34,960 --> 00:07:39,520
is in a good state

00:07:36,560 --> 00:07:40,319
you can take measurements from your

00:07:39,520 --> 00:07:43,280
platform

00:07:40,319 --> 00:07:45,599
and store them within the tpm and this

00:07:43,280 --> 00:07:47,360
specific location where you started

00:07:45,599 --> 00:07:48,879
measurements in are the platform

00:07:47,360 --> 00:07:52,319
configuration registers

00:07:48,879 --> 00:07:52,879
called pcrs the unique thing about pcrs

00:07:52,319 --> 00:07:55,440
is that you

00:07:52,879 --> 00:07:56,800
s not simply uh that you cannot simply

00:07:55,440 --> 00:08:00,400
write to them

00:07:56,800 --> 00:08:04,879
but the only way you can update them

00:08:00,400 --> 00:08:07,599
is doing the so-called extend operation

00:08:04,879 --> 00:08:08,639
the extent operation takes the previous

00:08:07,599 --> 00:08:10,960
value

00:08:08,639 --> 00:08:13,360
together with a digest combines them

00:08:10,960 --> 00:08:14,720
makes a hash and stores that

00:08:13,360 --> 00:08:16,960
this diet just is actually the

00:08:14,720 --> 00:08:17,919
measurement which is usually computed by

00:08:16,960 --> 00:08:20,560
the host machine

00:08:17,919 --> 00:08:22,240
for example the boot loader so the heavy

00:08:20,560 --> 00:08:24,639
lifting is done by the cpu

00:08:22,240 --> 00:08:26,240
and then the hash is given to the tpm

00:08:24,639 --> 00:08:29,360
which updates it

00:08:26,240 --> 00:08:32,640
using the pci extend mechanism

00:08:29,360 --> 00:08:35,279
these pcrs are usually only reset at

00:08:32,640 --> 00:08:35,680
system reset so you cannot simply reset

00:08:35,279 --> 00:08:38,800
them

00:08:35,680 --> 00:08:39,360
via software it's also important to know

00:08:38,800 --> 00:08:41,919
that

00:08:39,360 --> 00:08:43,120
the tpm can bind secrets and policies to

00:08:41,919 --> 00:08:44,880
the value of a pcr

00:08:43,120 --> 00:08:46,320
so you can do a lot of fancy things with

00:08:44,880 --> 00:08:54,080
that

00:08:46,320 --> 00:08:57,680
so next slide

00:08:54,080 --> 00:08:59,680
yeah so now we want to measure

00:08:57,680 --> 00:09:00,880
our system boot so we have this

00:08:59,680 --> 00:09:02,640
immutable boot room

00:09:00,880 --> 00:09:04,560
something we cannot change or doesn't

00:09:02,640 --> 00:09:05,600
change also called the root of trust for

00:09:04,560 --> 00:09:08,880
measurement

00:09:05,600 --> 00:09:11,279
it computes the digest of the next stage

00:09:08,880 --> 00:09:12,640
which is the bootloader records the hash

00:09:11,279 --> 00:09:14,880
into the tpm

00:09:12,640 --> 00:09:16,480
then gives control to the bootloader

00:09:14,880 --> 00:09:18,480
this one also takes

00:09:16,480 --> 00:09:19,760
measurement of the operating system

00:09:18,480 --> 00:09:22,080
sends it to the tpm

00:09:19,760 --> 00:09:22,880
extends all that then the operating

00:09:22,080 --> 00:09:25,120
system comes

00:09:22,880 --> 00:09:27,760
measures an application also extends

00:09:25,120 --> 00:09:30,880
that value into the pcr

00:09:27,760 --> 00:09:33,920
so eventually we have that log

00:09:30,880 --> 00:09:37,200
of different pcr values

00:09:33,920 --> 00:09:39,200
and the final pcr values all these

00:09:37,200 --> 00:09:40,800
entries are also stored and maintained

00:09:39,200 --> 00:09:43,839
by the operating system

00:09:40,800 --> 00:09:44,800
in a so-called event log which contains

00:09:43,839 --> 00:09:48,080
every entry

00:09:44,800 --> 00:09:48,959
of what has been measured so a verifier

00:09:48,080 --> 00:09:51,760
can actually

00:09:48,959 --> 00:09:52,160
replay this event lock and come to the

00:09:51,760 --> 00:09:55,040
same

00:09:52,160 --> 00:09:56,320
final pcr value because the way how

00:09:55,040 --> 00:10:00,240
these pcr values

00:09:56,320 --> 00:10:00,240
are computed is actually known

00:10:00,640 --> 00:10:04,800
but of course if the operating system

00:10:02,640 --> 00:10:07,920
just reads out

00:10:04,800 --> 00:10:10,320
the the pcr values

00:10:07,920 --> 00:10:12,079
it could again lie about the pcr values

00:10:10,320 --> 00:10:13,200
how can we make sure that it's coming

00:10:12,079 --> 00:10:16,320
from a tpm

00:10:13,200 --> 00:10:18,640
there you use the tpm2 quote

00:10:16,320 --> 00:10:20,160
command which generates a signature over

00:10:18,640 --> 00:10:22,320
the selected pcrs

00:10:20,160 --> 00:10:23,279
announce that that it has been supplied

00:10:22,320 --> 00:10:25,680
to

00:10:23,279 --> 00:10:27,040
and then we have that signed blob about

00:10:25,680 --> 00:10:30,240
pcr values

00:10:27,040 --> 00:10:31,519
this signed blob can then be used for

00:10:30,240 --> 00:10:36,480
for verification

00:10:31,519 --> 00:10:38,240
together with the event log next slide

00:10:36,480 --> 00:10:40,240
and now we come to the device at the

00:10:38,240 --> 00:10:42,079
station the tester sends

00:10:40,240 --> 00:10:43,760
the quote and the event log to the

00:10:42,079 --> 00:10:46,480
verifier they verify it

00:10:43,760 --> 00:10:47,920
and say to the relying party yes they

00:10:46,480 --> 00:10:51,680
are trustworthy

00:10:47,920 --> 00:10:54,720
but if you have listened

00:10:51,680 --> 00:10:55,920
carefully we're running into a privacy

00:10:54,720 --> 00:10:57,920
problem here because

00:10:55,920 --> 00:10:59,519
the verifier now knows who i am the

00:10:57,920 --> 00:11:01,440
relying party knows who i am

00:10:59,519 --> 00:11:03,200
and i'm completely giving up my privacy

00:11:01,440 --> 00:11:05,760
how can we resolve this

00:11:03,200 --> 00:11:08,320
and this is what imran will going to

00:11:05,760 --> 00:11:08,320
explain to you

00:11:09,839 --> 00:11:13,519
uh thank you peter thank you for setting

00:11:11,760 --> 00:11:16,640
up that

00:11:13,519 --> 00:11:19,839
foundational uh topic um the fundamental

00:11:16,640 --> 00:11:22,560
essence of a trusted attestation is that

00:11:19,839 --> 00:11:24,399
a trustworthy someone while just that a

00:11:22,560 --> 00:11:26,640
useful something is true

00:11:24,399 --> 00:11:27,440
and by doing that you are inherently

00:11:26,640 --> 00:11:30,240
trusting the

00:11:27,440 --> 00:11:31,680
security and privacy mechanisms built

00:11:30,240 --> 00:11:35,600
into it

00:11:31,680 --> 00:11:39,040
to basically guarantee that

00:11:35,600 --> 00:11:40,640
information handling at every stage

00:11:39,040 --> 00:11:42,160
so there are various stages of

00:11:40,640 --> 00:11:43,680
information handling starting with the

00:11:42,160 --> 00:11:47,440
information generation

00:11:43,680 --> 00:11:48,959
storage reporting and then processing

00:11:47,440 --> 00:11:51,920
together this is called as the

00:11:48,959 --> 00:11:53,360
information life cycle

00:11:51,920 --> 00:11:55,600
so in that order we're going to take a

00:11:53,360 --> 00:11:56,959
look at some of the tcg terminologies

00:11:55,600 --> 00:11:58,639
starting with the root of trust for

00:11:56,959 --> 00:12:02,160
measurement this

00:11:58,639 --> 00:12:04,000
is required as a collection of processes

00:12:02,160 --> 00:12:06,639
and mechanism that guarantee

00:12:04,000 --> 00:12:08,160
the the trustworthiness of the

00:12:06,639 --> 00:12:10,399
information generation process

00:12:08,160 --> 00:12:12,160
it is expected that it is able to detect

00:12:10,399 --> 00:12:15,360
and mitigate attacks

00:12:12,160 --> 00:12:17,120
uh on the system uh and or specifically

00:12:15,360 --> 00:12:18,639
on the information generation process

00:12:17,120 --> 00:12:20,160
it is also expected that the root of

00:12:18,639 --> 00:12:20,880
cross of measurement is functionally

00:12:20,160 --> 00:12:24,160
seen

00:12:20,880 --> 00:12:24,720
uh as an example um a developer wanting

00:12:24,160 --> 00:12:27,200
to shave

00:12:24,720 --> 00:12:27,760
a few milliseconds from the boot time uh

00:12:27,200 --> 00:12:30,480
shouldn't

00:12:27,760 --> 00:12:32,160
take uh the decision to simply extend

00:12:30,480 --> 00:12:34,240
fixed set of pcr values

00:12:32,160 --> 00:12:35,760
because he already verified the initial

00:12:34,240 --> 00:12:37,920
boot block

00:12:35,760 --> 00:12:39,360
and verified its integrity it would

00:12:37,920 --> 00:12:40,399
completely defeat the purpose of the

00:12:39,360 --> 00:12:42,000
measured boot

00:12:40,399 --> 00:12:43,440
um so we expect it to be functionally

00:12:42,000 --> 00:12:45,279
seen and not do that

00:12:43,440 --> 00:12:46,720
um and it's also expected that the root

00:12:45,279 --> 00:12:48,959
of trust measurement is

00:12:46,720 --> 00:12:51,920
immutable which means that it behaves

00:12:48,959 --> 00:12:55,440
exactly the same from reset to run time

00:12:51,920 --> 00:12:57,279
every single time and that it is from a

00:12:55,440 --> 00:13:00,399
privacy perspective it is able to

00:12:57,279 --> 00:13:02,399
inhibit um platform unique measurements

00:13:00,399 --> 00:13:05,200
going into the pcrs

00:13:02,399 --> 00:13:07,360
because if that happens you can tell

00:13:05,200 --> 00:13:11,120
from an attestation code that a specific

00:13:07,360 --> 00:13:13,839
set of pcrs belong to a specific um

00:13:11,120 --> 00:13:14,880
tpm and that gives out the atmosphere

00:13:13,839 --> 00:13:16,480
identity

00:13:14,880 --> 00:13:18,639
the next route of trust is the root of

00:13:16,480 --> 00:13:21,519
just for storage

00:13:18,639 --> 00:13:23,120
this uh is basically providing all the

00:13:21,519 --> 00:13:26,000
mechanisms required to

00:13:23,120 --> 00:13:26,480
keep the data protected tamper proof uh

00:13:26,000 --> 00:13:28,800
at

00:13:26,480 --> 00:13:30,880
rest when it is transmitted over from

00:13:28,800 --> 00:13:34,399
the root transform measurement

00:13:30,880 --> 00:13:35,680
uh we expect that it not only prevents

00:13:34,399 --> 00:13:38,079
data losses

00:13:35,680 --> 00:13:39,920
but it is also able to flag unreliable

00:13:38,079 --> 00:13:41,600
data and what that means is

00:13:39,920 --> 00:13:43,920
if you are going through an intended or

00:13:41,600 --> 00:13:45,760
an unintended intended power cycle

00:13:43,920 --> 00:13:47,360
and you're moving data say from a

00:13:45,760 --> 00:13:48,639
volatile storage to a non-volatile

00:13:47,360 --> 00:13:50,399
storage

00:13:48,639 --> 00:13:52,240
some of that data might be corrupted so

00:13:50,399 --> 00:13:54,079
the root of trust for storage should be

00:13:52,240 --> 00:13:55,920
able to flag such data

00:13:54,079 --> 00:13:57,279
because critical pieces of information

00:13:55,920 --> 00:14:00,320
are used in making

00:13:57,279 --> 00:14:01,839
trust or safety decisions um it's also

00:14:00,320 --> 00:14:03,440
expected that uh

00:14:01,839 --> 00:14:05,519
from a root of trust of storage

00:14:03,440 --> 00:14:08,240
perspective that there are some kind of

00:14:05,519 --> 00:14:09,199
access restrictions to who can access

00:14:08,240 --> 00:14:11,839
the data

00:14:09,199 --> 00:14:12,560
and uh what methods are going to be used

00:14:11,839 --> 00:14:15,120
to access

00:14:12,560 --> 00:14:16,560
that data and from a privacy standpoint

00:14:15,120 --> 00:14:17,519
the root of trust for storage also

00:14:16,560 --> 00:14:20,079
guarantees that

00:14:17,519 --> 00:14:22,720
there is some kind of a partitioning of

00:14:20,079 --> 00:14:24,639
personally identifiable information

00:14:22,720 --> 00:14:26,560
and then there are some additional

00:14:24,639 --> 00:14:30,399
access restrictions to

00:14:26,560 --> 00:14:32,160
get access to those set of data the next

00:14:30,399 --> 00:14:33,920
is the root of trust for reporting and

00:14:32,160 --> 00:14:35,680
this is a collection again

00:14:33,920 --> 00:14:37,279
of processes and mechanism that

00:14:35,680 --> 00:14:40,000
guarantee your vouch

00:14:37,279 --> 00:14:41,279
for a uh for the identity of a specific

00:14:40,000 --> 00:14:44,480
platform

00:14:41,279 --> 00:14:46,720
not only that we require a unique

00:14:44,480 --> 00:14:48,720
identity for the platform

00:14:46,720 --> 00:14:51,040
we also need it to be certified by

00:14:48,720 --> 00:14:53,279
someone inherently trusted

00:14:51,040 --> 00:14:54,320
so we prevent a self-signed certificate

00:14:53,279 --> 00:14:55,680
kind of scenario

00:14:54,320 --> 00:14:57,760
and instead we have a device

00:14:55,680 --> 00:14:59,360
manufacturer certificate watching that

00:14:57,760 --> 00:15:00,959
the unique identity belongs to a

00:14:59,360 --> 00:15:04,720
specific tpm

00:15:00,959 --> 00:15:06,800
um it's also expected that

00:15:04,720 --> 00:15:07,920
it enforces some kind of access

00:15:06,800 --> 00:15:10,000
restriction to

00:15:07,920 --> 00:15:10,959
sensitive operations with respect to

00:15:10,000 --> 00:15:12,800
attestation

00:15:10,959 --> 00:15:14,560
like signing attestation quotes and

00:15:12,800 --> 00:15:16,079
giving out audit digests

00:15:14,560 --> 00:15:17,760
these are sensitive operations that need

00:15:16,079 --> 00:15:19,920
to be guarded with

00:15:17,760 --> 00:15:22,079
some kind of an authorization and then

00:15:19,920 --> 00:15:24,320
from a privacy standpoint we

00:15:22,079 --> 00:15:26,399
have to make sure that we don't actually

00:15:24,320 --> 00:15:27,600
use the unique identity directly into

00:15:26,399 --> 00:15:30,480
the signing operations

00:15:27,600 --> 00:15:31,360
because unique keys create unique

00:15:30,480 --> 00:15:33,440
signatures

00:15:31,360 --> 00:15:34,959
and they can all be traced back to a

00:15:33,440 --> 00:15:36,560
specific catastrophe platform

00:15:34,959 --> 00:15:39,600
and thus that will compromise the

00:15:36,560 --> 00:15:42,720
tapestry privacy

00:15:39,600 --> 00:15:44,880
there is um also some level of

00:15:42,720 --> 00:15:46,720
trust that has to go into the

00:15:44,880 --> 00:15:48,079
attestation system software

00:15:46,720 --> 00:15:49,920
this is the system software that is

00:15:48,079 --> 00:15:53,519
actually running on the

00:15:49,920 --> 00:15:57,120
uh not only just on the uh

00:15:53,519 --> 00:16:00,320
platform with the tpm but also on the um

00:15:57,120 --> 00:16:02,560
verifier or the relying party systems

00:16:00,320 --> 00:16:03,440
um at the minimum we expect that there

00:16:02,560 --> 00:16:07,440
is a

00:16:03,440 --> 00:16:10,399
role-based access separation for

00:16:07,440 --> 00:16:12,079
data and uh processes of the artist to

00:16:10,399 --> 00:16:14,639
verify and relying party

00:16:12,079 --> 00:16:15,360
and like peter said it has to protect

00:16:14,639 --> 00:16:17,120
against

00:16:15,360 --> 00:16:19,600
the replay attacks which means that you

00:16:17,120 --> 00:16:22,800
don't use older attestation codes

00:16:19,600 --> 00:16:24,800
in fresh trust decisions and then

00:16:22,800 --> 00:16:26,240
the ad station system software that is

00:16:24,800 --> 00:16:27,040
running at the very fire and the relying

00:16:26,240 --> 00:16:30,399
party end

00:16:27,040 --> 00:16:32,720
is able to enforce some kind of policies

00:16:30,399 --> 00:16:34,480
once it discovers that uh the platform

00:16:32,720 --> 00:16:36,240
is in a vulnerable state

00:16:34,480 --> 00:16:38,079
based on the attestation codes and

00:16:36,240 --> 00:16:40,800
finally from a

00:16:38,079 --> 00:16:42,560
privacy perspective uh the attestation

00:16:40,800 --> 00:16:44,160
system software is expected to apply the

00:16:42,560 --> 00:16:47,680
principle of least privilege

00:16:44,160 --> 00:16:50,959
and prevent data leaks

00:16:47,680 --> 00:16:52,160
um so this uh forms the information life

00:16:50,959 --> 00:16:54,720
cycle and

00:16:52,160 --> 00:16:55,920
uh where does the tpm come into this

00:16:54,720 --> 00:16:58,160
picture

00:16:55,920 --> 00:17:00,160
uh the trusted platform module actually

00:16:58,160 --> 00:17:00,800
directly provides the root of trust for

00:17:00,160 --> 00:17:03,839
storage

00:17:00,800 --> 00:17:06,319
and reporting in a tpm

00:17:03,839 --> 00:17:07,199
and it additionally provides certain

00:17:06,319 --> 00:17:08,720
features

00:17:07,199 --> 00:17:10,480
that assess the root of transform

00:17:08,720 --> 00:17:12,559
measurement and attestation system

00:17:10,480 --> 00:17:14,319
software in the information generation

00:17:12,559 --> 00:17:17,600
and processing phases

00:17:14,319 --> 00:17:20,160
so let's dive into uh some of the

00:17:17,600 --> 00:17:21,120
internals of the tpm and see how these

00:17:20,160 --> 00:17:24,799
are

00:17:21,120 --> 00:17:25,600
guaranteed by the tpu so the inside of a

00:17:24,799 --> 00:17:28,240
tpm

00:17:25,600 --> 00:17:29,600
uh are very much like a hardware

00:17:28,240 --> 00:17:32,240
security module

00:17:29,600 --> 00:17:32,640
at the heart of it is a cpu or a place

00:17:32,240 --> 00:17:34,160
where

00:17:32,640 --> 00:17:36,240
it executes instructions that are

00:17:34,160 --> 00:17:37,039
fetched from the rom and assisted by the

00:17:36,240 --> 00:17:40,320
ram

00:17:37,039 --> 00:17:42,880
and it has a clocking and reset unit

00:17:40,320 --> 00:17:44,799
and additionally it has very importantly

00:17:42,880 --> 00:17:47,919
a hardware crypto engine

00:17:44,799 --> 00:17:50,559
and then some mitigations against uh

00:17:47,919 --> 00:17:52,400
brute forcing authorization so it has a

00:17:50,559 --> 00:17:54,880
dictionary lockout protection

00:17:52,400 --> 00:17:56,960
and then a persistent storage where data

00:17:54,880 --> 00:18:01,200
is um

00:17:56,960 --> 00:18:04,880
trusted to be saved timber proof

00:18:01,200 --> 00:18:08,080
and um we need uh all of this

00:18:04,880 --> 00:18:10,000
is exercised through commands that uh

00:18:08,080 --> 00:18:11,280
funnel into the tpm through the command

00:18:10,000 --> 00:18:13,360
response buffer

00:18:11,280 --> 00:18:14,799
and uh that is those instructions are

00:18:13,360 --> 00:18:17,200
coming from the attester

00:18:14,799 --> 00:18:18,320
platform um sometimes that is the

00:18:17,200 --> 00:18:20,480
platform

00:18:18,320 --> 00:18:22,400
executes instructions on behalf of the

00:18:20,480 --> 00:18:24,640
verifier and the relying party

00:18:22,400 --> 00:18:26,799
and at those instances it's simply

00:18:24,640 --> 00:18:30,320
acting as an agent

00:18:26,799 --> 00:18:32,000
um so we we concluded that the tpm is

00:18:30,320 --> 00:18:34,400
the root of trust for

00:18:32,000 --> 00:18:35,760
uh reporting and storage and what that

00:18:34,400 --> 00:18:39,039
means on this

00:18:35,760 --> 00:18:43,120
picture is trusted keys within the tpm

00:18:39,039 --> 00:18:46,799
are signing protected data

00:18:43,120 --> 00:18:48,240
um so let's take a look at some of the

00:18:46,799 --> 00:18:49,760
requirements of the root of trust for

00:18:48,240 --> 00:18:50,960
reporting and match them here on this

00:18:49,760 --> 00:18:52,320
line

00:18:50,960 --> 00:18:54,160
we said that the root of trust for

00:18:52,320 --> 00:18:54,480
reporting should be able to provide a

00:18:54,160 --> 00:18:57,760
per

00:18:54,480 --> 00:19:01,039
part unique identity and

00:18:57,760 --> 00:19:01,840
to do that all tpm objects actually

00:19:01,039 --> 00:19:04,640
start from

00:19:01,840 --> 00:19:05,919
a logical structure called as hierarchy

00:19:04,640 --> 00:19:08,400
at the heart of which is

00:19:05,919 --> 00:19:09,440
a primary seed that stays persistent on

00:19:08,400 --> 00:19:12,640
the

00:19:09,440 --> 00:19:13,840
non-volatile persistent storage and

00:19:12,640 --> 00:19:17,679
there are

00:19:13,840 --> 00:19:20,240
four such primary seats and to access

00:19:17,679 --> 00:19:22,400
the objects under these primary seats

00:19:20,240 --> 00:19:25,280
there are separate authorizations

00:19:22,400 --> 00:19:27,600
so there is a separate administrator for

00:19:25,280 --> 00:19:30,240
each of these logical hierarchies

00:19:27,600 --> 00:19:30,799
um there is also a null primary seed

00:19:30,240 --> 00:19:33,520
which is

00:19:30,799 --> 00:19:34,799
which lives and dies in the ram so tpm

00:19:33,520 --> 00:19:37,039
resets will

00:19:34,799 --> 00:19:38,400
actually change this primary seed and it

00:19:37,039 --> 00:19:39,919
is ephemeral in nature

00:19:38,400 --> 00:19:41,440
so all the objects that are created

00:19:39,919 --> 00:19:43,679
under the null primary seed

00:19:41,440 --> 00:19:46,960
are lost on the reset and we'll see why

00:19:43,679 --> 00:19:46,960
that is important and useful

00:19:48,240 --> 00:19:52,400
so the first object that you create

00:19:50,240 --> 00:19:55,440
under a primary seed is a primary key

00:19:52,400 --> 00:19:57,039
using a kdf operation that combines the

00:19:55,440 --> 00:19:58,880
sensitive information from the primary

00:19:57,039 --> 00:20:02,320
seed and a

00:19:58,880 --> 00:20:05,840
tester specified key template

00:20:02,320 --> 00:20:07,600
so basically the key template is

00:20:05,840 --> 00:20:09,440
having some attributes and authorization

00:20:07,600 --> 00:20:12,400
policies that dictate

00:20:09,440 --> 00:20:13,280
how a key can be used and authorized so

00:20:12,400 --> 00:20:15,280
by combining

00:20:13,280 --> 00:20:17,760
the primary seed and the non-sensitive

00:20:15,280 --> 00:20:19,520
key portion from the arister

00:20:17,760 --> 00:20:23,200
system software we are basically going

00:20:19,520 --> 00:20:25,440
to get a primary key

00:20:23,200 --> 00:20:27,280
as long as the primary seed and the key

00:20:25,440 --> 00:20:29,039
template remains the same

00:20:27,280 --> 00:20:30,400
the primary key is fixed and this

00:20:29,039 --> 00:20:33,840
actually helps us to

00:20:30,400 --> 00:20:35,520
provide the unique identity every time

00:20:33,840 --> 00:20:37,039
regardless of the tpm going through

00:20:35,520 --> 00:20:39,840
resets

00:20:37,039 --> 00:20:40,400
uh next the next object that is created

00:20:39,840 --> 00:20:43,440
in line

00:20:40,400 --> 00:20:46,880
is the child object and it is

00:20:43,440 --> 00:20:50,559
a bit different from the primary key it

00:20:46,880 --> 00:20:52,480
it additionally combines a pseudo random

00:20:50,559 --> 00:20:56,240
value from the random number generator

00:20:52,480 --> 00:20:59,440
this makes these keys uh ephemeral

00:20:56,240 --> 00:21:02,080
which means that uh you could

00:20:59,440 --> 00:21:04,159
you could create this key but you cannot

00:21:02,080 --> 00:21:05,520
you cannot recreate these keys because

00:21:04,159 --> 00:21:07,280
of the pseudo random element

00:21:05,520 --> 00:21:09,600
but you can always reload these keys on

00:21:07,280 --> 00:21:12,880
the tpm and this ephemeral nature of

00:21:09,600 --> 00:21:15,679
keys is important for the anonymity

00:21:12,880 --> 00:21:17,280
and we'll see that shortly the next

00:21:15,679 --> 00:21:19,200
requirement from the root of trust for

00:21:17,280 --> 00:21:21,679
reporting perspective is that

00:21:19,200 --> 00:21:23,600
the unique key is additionally certified

00:21:21,679 --> 00:21:27,360
by the manufacturer

00:21:23,600 --> 00:21:28,159
um and for the manufacturer to be able

00:21:27,360 --> 00:21:31,520
to vouch

00:21:28,159 --> 00:21:33,120
that a unique key on a remote tpm

00:21:31,520 --> 00:21:34,960
belongs to a tpm that he actually

00:21:33,120 --> 00:21:36,480
manufactured he needs to trust two

00:21:34,960 --> 00:21:39,600
pieces of information

00:21:36,480 --> 00:21:43,600
uh one the key template uh

00:21:39,600 --> 00:21:45,520
that is going into the kdf operation and

00:21:43,600 --> 00:21:47,120
he has a reason to trust that because

00:21:45,520 --> 00:21:49,360
the trusted computing group

00:21:47,120 --> 00:21:50,960
consortium defines it in the tpm

00:21:49,360 --> 00:21:52,960
standards as to what these

00:21:50,960 --> 00:21:55,039
attributes and what this key should look

00:21:52,960 --> 00:21:56,640
like so it's a trusted piece

00:21:55,039 --> 00:21:58,640
or trusted source of information to

00:21:56,640 --> 00:22:01,120
define a unique key

00:21:58,640 --> 00:22:02,480
and the other thing that the

00:22:01,120 --> 00:22:03,600
manufacturer needs to trust is the

00:22:02,480 --> 00:22:05,280
primary seed

00:22:03,600 --> 00:22:08,000
for this the manufacturer directly

00:22:05,280 --> 00:22:11,120
programs the primary seed into the tpm

00:22:08,000 --> 00:22:12,799
through the trusted factory processes by

00:22:11,120 --> 00:22:15,120
combining these two

00:22:12,799 --> 00:22:16,559
uh the template and the primary seed and

00:22:15,120 --> 00:22:17,679
running it through the primary kdf

00:22:16,559 --> 00:22:19,600
operation

00:22:17,679 --> 00:22:21,120
you get an endorsement primary key which

00:22:19,600 --> 00:22:24,400
is fixed in nature

00:22:21,120 --> 00:22:26,080
and the the basic ingredients for it

00:22:24,400 --> 00:22:28,000
this primary seed and the attributes

00:22:26,080 --> 00:22:29,520
are coming from trusted sources so the

00:22:28,000 --> 00:22:32,960
manufacturer is in a position

00:22:29,520 --> 00:22:33,679
to vouch for the um the authenticity of

00:22:32,960 --> 00:22:36,880
this key

00:22:33,679 --> 00:22:39,440
and so he does that by assigning a

00:22:36,880 --> 00:22:40,240
endorsement key certificate and

00:22:39,440 --> 00:22:43,679
generally this

00:22:40,240 --> 00:22:45,440
key certificate is embedded on the

00:22:43,679 --> 00:22:48,000
non-volatile storage in general purpose

00:22:45,440 --> 00:22:48,000
mba area

00:22:48,080 --> 00:22:51,600
one thing to note is that the tcg

00:22:50,159 --> 00:22:54,320
specified attributes

00:22:51,600 --> 00:22:56,640
prevent this key to be a signing key

00:22:54,320 --> 00:22:59,919
instead it is only a decrypt key

00:22:56,640 --> 00:23:01,919
and it is done for the reason that it

00:22:59,919 --> 00:23:03,679
the the unique key should shouldn't be

00:23:01,919 --> 00:23:07,120
in a position to sign

00:23:03,679 --> 00:23:08,640
ad station codes because it would create

00:23:07,120 --> 00:23:10,400
unique signatures that can all be

00:23:08,640 --> 00:23:13,919
tracked back again to the

00:23:10,400 --> 00:23:14,480
uh at a platform and uh this satisfies

00:23:13,919 --> 00:23:16,080
another

00:23:14,480 --> 00:23:18,000
requirement of root of trust for

00:23:16,080 --> 00:23:18,799
reporting that the unique is cannot

00:23:18,000 --> 00:23:21,600
actually

00:23:18,799 --> 00:23:22,559
sign the attestation codes directly and

00:23:21,600 --> 00:23:26,400
so

00:23:22,559 --> 00:23:27,679
um we need to provide some kind of an

00:23:26,400 --> 00:23:30,720
anonymous key

00:23:27,679 --> 00:23:31,919
uh to sign these attestation codes but

00:23:30,720 --> 00:23:34,880
the requirement is that

00:23:31,919 --> 00:23:36,080
this anonymous key needs to be on the

00:23:34,880 --> 00:23:37,760
same tpm

00:23:36,080 --> 00:23:39,919
as the unique key and it should be

00:23:37,760 --> 00:23:43,120
somehow cryptographically related

00:23:39,919 --> 00:23:45,360
uh to the to the unique key

00:23:43,120 --> 00:23:45,360
um

00:23:47,600 --> 00:23:50,880
and of course this key has an additional

00:23:49,919 --> 00:23:52,799
attribute which

00:23:50,880 --> 00:23:54,880
means that this key is able to sign and

00:23:52,799 --> 00:23:56,960
encrypt data station goods

00:23:54,880 --> 00:23:58,320
um so the the root of trust of

00:23:56,960 --> 00:24:00,640
requirement for

00:23:58,320 --> 00:24:02,080
having a anonymous key that is related

00:24:00,640 --> 00:24:06,480
to the unique key

00:24:02,080 --> 00:24:09,200
um is um is satisfied on the tpm

00:24:06,480 --> 00:24:11,520
and we'll see how it does that so let's

00:24:09,200 --> 00:24:16,080
first take an inventory of all the

00:24:11,520 --> 00:24:19,120
um mr tpm first it has a unique identity

00:24:16,080 --> 00:24:19,600
that is um that is vouched and for by

00:24:19,120 --> 00:24:21,120
the

00:24:19,600 --> 00:24:22,720
tpm manufacturer by issuing the

00:24:21,120 --> 00:24:25,520
endorsement certificate

00:24:22,720 --> 00:24:28,400
um together it is uh providing the

00:24:25,520 --> 00:24:30,480
certified unique identity for the tpm

00:24:28,400 --> 00:24:31,679
and then the tpm creates an anonymous

00:24:30,480 --> 00:24:34,480
identity because

00:24:31,679 --> 00:24:36,080
the unique identity is not capable of

00:24:34,480 --> 00:24:39,600
signing other station codes

00:24:36,080 --> 00:24:41,520
and so the anonymous identity key is

00:24:39,600 --> 00:24:44,559
having the sign attribute set and

00:24:41,520 --> 00:24:46,480
capable of signing data station codes

00:24:44,559 --> 00:24:48,080
and then we have the attestation code

00:24:46,480 --> 00:24:49,200
itself which is basically a collection

00:24:48,080 --> 00:24:52,000
of data that

00:24:49,200 --> 00:24:52,799
uh describes the system software state

00:24:52,000 --> 00:24:56,159
and

00:24:52,799 --> 00:24:59,440
um with all of this information

00:24:56,159 --> 00:25:02,799
the tpm is able to generate and

00:24:59,440 --> 00:25:03,760
sign attestation codes but what it

00:25:02,799 --> 00:25:06,320
cannot do

00:25:03,760 --> 00:25:07,679
is confirm a healthy system software

00:25:06,320 --> 00:25:10,720
state

00:25:07,679 --> 00:25:13,440
and and that's where the relying party

00:25:10,720 --> 00:25:14,960
or service provider steps in um the

00:25:13,440 --> 00:25:16,960
service provider is then

00:25:14,960 --> 00:25:18,960
handed the attestation code and the

00:25:16,960 --> 00:25:21,279
anonymous identity key

00:25:18,960 --> 00:25:22,640
public portion so that he's able to kind

00:25:21,279 --> 00:25:25,760
of verify

00:25:22,640 --> 00:25:26,320
the uh attestation code using the public

00:25:25,760 --> 00:25:29,760
key

00:25:26,320 --> 00:25:32,480
of of the anonymous identity

00:25:29,760 --> 00:25:33,120
uh what the relying party is not given

00:25:32,480 --> 00:25:36,159
is the

00:25:33,120 --> 00:25:39,200
unique key which is the certified unique

00:25:36,159 --> 00:25:42,320
now the reliant party can uh

00:25:39,200 --> 00:25:45,440
why is that so this is where

00:25:42,320 --> 00:25:46,000
the basic privacy problems comes in and

00:25:45,440 --> 00:25:48,159
the

00:25:46,000 --> 00:25:49,679
fundamental premise of that privacy

00:25:48,159 --> 00:25:53,039
problem is this

00:25:49,679 --> 00:25:54,960
uh you cannot uh the tpm attester

00:25:53,039 --> 00:25:57,440
or the address to tpm cannot actually

00:25:54,960 --> 00:25:58,640
give out the anonymous identity and

00:25:57,440 --> 00:26:00,559
unique identity

00:25:58,640 --> 00:26:02,880
to any entity other than that this

00:26:00,559 --> 00:26:04,799
tester system software

00:26:02,880 --> 00:26:06,640
because combining these two will

00:26:04,799 --> 00:26:10,240
compromise the

00:26:06,640 --> 00:26:12,559
attesters attesters of identity

00:26:10,240 --> 00:26:13,840
think of this like an opening of a very

00:26:12,559 --> 00:26:16,400
bad suspense movie

00:26:13,840 --> 00:26:18,960
where you have the character that is

00:26:16,400 --> 00:26:22,320
supposed to be shrouded till the

00:26:18,960 --> 00:26:25,520
end uh shows up on the opening scene

00:26:22,320 --> 00:26:28,960
and reveals the mast and unmasked

00:26:25,520 --> 00:26:31,200
identity so

00:26:28,960 --> 00:26:32,960
with this setup the relying party is

00:26:31,200 --> 00:26:36,080
able to confirm that

00:26:32,960 --> 00:26:37,039
the court is uh describing a healthy

00:26:36,080 --> 00:26:39,760
software state

00:26:37,039 --> 00:26:40,960
but the relying party cannot tell that

00:26:39,760 --> 00:26:44,080
it is coming from a

00:26:40,960 --> 00:26:46,159
trusted tpm and for this uh

00:26:44,080 --> 00:26:47,360
there is another entity called a

00:26:46,159 --> 00:26:50,000
verifier

00:26:47,360 --> 00:26:51,840
the verifier is interested with a

00:26:50,000 --> 00:26:56,080
interesting job uh

00:26:51,840 --> 00:26:58,559
he is supposed to tell that the

00:26:56,080 --> 00:26:59,679
court is actually signed by a trusted

00:26:58,559 --> 00:27:03,919
tpm

00:26:59,679 --> 00:27:06,000
but the verifier cannot know the

00:27:03,919 --> 00:27:07,039
anonymous identity why because the

00:27:06,000 --> 00:27:10,400
verifier will have

00:27:07,039 --> 00:27:12,960
access to the unique identity and so it

00:27:10,400 --> 00:27:15,600
cannot additionally also have access

00:27:12,960 --> 00:27:17,360
to the anonymous identity because then

00:27:15,600 --> 00:27:17,919
the verify will be able to combine those

00:27:17,360 --> 00:27:19,919
two

00:27:17,919 --> 00:27:21,200
and then compromise the attested tpm's

00:27:19,919 --> 00:27:24,880
privacy

00:27:21,200 --> 00:27:25,760
um so the verifier in many ways is in a

00:27:24,880 --> 00:27:28,240
situation

00:27:25,760 --> 00:27:30,000
like a privacy cca but unlike a

00:27:28,240 --> 00:27:31,679
traditional privacy cca the verifier

00:27:30,000 --> 00:27:32,960
does not have access to the public key

00:27:31,679 --> 00:27:35,279
portion

00:27:32,960 --> 00:27:37,200
that he's trying to certify so instead

00:27:35,279 --> 00:27:39,200
the verifier takes advantage of

00:27:37,200 --> 00:27:40,320
a process called as credential

00:27:39,200 --> 00:27:43,760
activation

00:27:40,320 --> 00:27:45,840
on the tpm um it works on the

00:27:43,760 --> 00:27:48,080
uh it occurs between the verifier and

00:27:45,840 --> 00:27:50,799
the attacher tpm

00:27:48,080 --> 00:27:51,760
and instead of handing the anonymous

00:27:50,799 --> 00:27:56,320
identity public

00:27:51,760 --> 00:27:58,399
portion the attester tpm instead

00:27:56,320 --> 00:28:01,120
runs the anonymous identity public

00:27:58,399 --> 00:28:04,159
portion to a one-way function a hash

00:28:01,120 --> 00:28:05,120
and creates a anonymous key name and

00:28:04,159 --> 00:28:06,399
then

00:28:05,120 --> 00:28:08,559
because it's a one way function

00:28:06,399 --> 00:28:10,559
anonymous key names cannot be

00:28:08,559 --> 00:28:12,000
uh used to reconstruct the anonymous

00:28:10,559 --> 00:28:16,159
identity public portion so

00:28:12,000 --> 00:28:18,320
adjuster tpm is able to then um uh

00:28:16,159 --> 00:28:19,679
propagate this to both the verifier and

00:28:18,320 --> 00:28:23,039
the relying part

00:28:19,679 --> 00:28:26,559
and now the verifier uses this name uh

00:28:23,039 --> 00:28:28,399
anonymous name uh to run a process

00:28:26,559 --> 00:28:30,640
called as credential activation

00:28:28,399 --> 00:28:31,600
the credential activation process is a

00:28:30,640 --> 00:28:34,080
success

00:28:31,600 --> 00:28:34,880
if the verifier is able to prove that

00:28:34,080 --> 00:28:38,320
the

00:28:34,880 --> 00:28:41,360
named object is on the same tpm

00:28:38,320 --> 00:28:42,640
as the unique key

00:28:41,360 --> 00:28:44,559
so there are two stages of the

00:28:42,640 --> 00:28:47,919
credential activation

00:28:44,559 --> 00:28:48,799
on the first stage it occurs between the

00:28:47,919 --> 00:28:51,919
verifier and that is

00:28:48,799 --> 00:28:54,159
platform wherein the adjuster

00:28:51,919 --> 00:28:55,600
system software generates the anonymous

00:28:54,159 --> 00:28:58,720
and the

00:28:55,600 --> 00:28:59,919
unique keys and then data supply form

00:28:58,720 --> 00:29:01,840
hands the

00:28:59,919 --> 00:29:04,000
name of the anonymous key not the public

00:29:01,840 --> 00:29:06,480
portion just the name of the

00:29:04,000 --> 00:29:08,000
anonymous key and the public portion of

00:29:06,480 --> 00:29:11,039
the unique key

00:29:08,000 --> 00:29:13,200
and the verifier chooses to

00:29:11,039 --> 00:29:15,200
do a credential challenge wherein a

00:29:13,200 --> 00:29:17,440
chooses a plain text secret

00:29:15,200 --> 00:29:18,880
and then combines the name and the

00:29:17,440 --> 00:29:21,840
public portion that was

00:29:18,880 --> 00:29:23,279
sent by that tester and runs it through

00:29:21,840 --> 00:29:25,600
a cryptographic process

00:29:23,279 --> 00:29:27,919
to wrap and encrypt the plain text

00:29:25,600 --> 00:29:30,559
secret and create a credential block

00:29:27,919 --> 00:29:31,919
and then hands it over to the attacher

00:29:30,559 --> 00:29:34,320
platform

00:29:31,919 --> 00:29:35,919
in the second stage the artistic

00:29:34,320 --> 00:29:39,679
platform loads

00:29:35,919 --> 00:29:42,159
the sensitive portions of the

00:29:39,679 --> 00:29:43,039
unique and the anonymous keys and then

00:29:42,159 --> 00:29:44,880
loads the

00:29:43,039 --> 00:29:46,240
uh and satisfies the police

00:29:44,880 --> 00:29:47,360
authorization of the endorsement

00:29:46,240 --> 00:29:49,279
hierarchy

00:29:47,360 --> 00:29:50,640
and then performs something called as

00:29:49,279 --> 00:29:53,200
credential activation where

00:29:50,640 --> 00:29:55,360
he unwraps and decrypts the credential

00:29:53,200 --> 00:29:58,080
block now this he is able to do

00:29:55,360 --> 00:29:59,919
only if the anonymous key and the

00:29:58,080 --> 00:30:03,039
trusted key sensitive portions

00:29:59,919 --> 00:30:05,440
are on that specific tpm

00:30:03,039 --> 00:30:07,120
and then he is able to decrypt that

00:30:05,440 --> 00:30:08,080
credential challenge and report it back

00:30:07,120 --> 00:30:09,919
to the verifier

00:30:08,080 --> 00:30:11,200
and the verifier then compares these two

00:30:09,919 --> 00:30:13,200
pieces of information

00:30:11,200 --> 00:30:14,320
and makes the determination that it is

00:30:13,200 --> 00:30:17,039
in fact

00:30:14,320 --> 00:30:17,760
existing on the same tpm so he is able

00:30:17,039 --> 00:30:21,200
to

00:30:17,760 --> 00:30:22,000
certify that the key the named object is

00:30:21,200 --> 00:30:25,200
on the same tpm

00:30:22,000 --> 00:30:25,200
as the endorsement key

00:30:25,840 --> 00:30:29,039
there it is a myth that credential

00:30:27,520 --> 00:30:31,039
activation only works

00:30:29,039 --> 00:30:32,799
on the endorsement hierarchy the truth

00:30:31,039 --> 00:30:36,240
is it can work with

00:30:32,799 --> 00:30:38,240
any storage hierarchy and

00:30:36,240 --> 00:30:39,760
as long as you can provide the

00:30:38,240 --> 00:30:42,640
authorizations for the

00:30:39,760 --> 00:30:43,279
primary cs and create and the primary

00:30:42,640 --> 00:30:45,440
key

00:30:43,279 --> 00:30:46,559
you can technically use any other

00:30:45,440 --> 00:30:50,880
hierarchy

00:30:46,559 --> 00:30:51,600
um so why choose endorsement primary key

00:30:50,880 --> 00:30:55,279
then

00:30:51,600 --> 00:30:56,880
um because it is a key that has been

00:30:55,279 --> 00:31:00,000
certified by the manufacturer

00:30:56,880 --> 00:31:02,559
it provides a trust anchor on this tpm

00:31:00,000 --> 00:31:04,080
so using this trusted key or trusted

00:31:02,559 --> 00:31:07,200
anchor

00:31:04,080 --> 00:31:08,559
to trust another key that is not being

00:31:07,200 --> 00:31:12,480
certified

00:31:08,559 --> 00:31:15,200
and that signing key can come from

00:31:12,480 --> 00:31:16,399
any other hierarchy as well and it does

00:31:15,200 --> 00:31:17,120
not have to come from the endorsement

00:31:16,399 --> 00:31:19,519
hierarchy

00:31:17,120 --> 00:31:20,399
it can also come from a ephemeral

00:31:19,519 --> 00:31:23,279
hierarchy

00:31:20,399 --> 00:31:24,960
starting from the null primary seed and

00:31:23,279 --> 00:31:28,640
you can use this as well

00:31:24,960 --> 00:31:30,320
so why do we why can we

00:31:28,640 --> 00:31:32,799
why do we use the endorsement hierarchy

00:31:30,320 --> 00:31:36,960
keys both the primary and the secondary

00:31:32,799 --> 00:31:39,200
um it's it's uh

00:31:36,960 --> 00:31:40,399
the primary is the primary key is

00:31:39,200 --> 00:31:42,559
straightforward because

00:31:40,399 --> 00:31:43,519
we have a certified key from the

00:31:42,559 --> 00:31:45,440
manufacturer and we

00:31:43,519 --> 00:31:47,519
that's why we use the endorsement

00:31:45,440 --> 00:31:49,360
primary key what about the

00:31:47,519 --> 00:31:50,720
endorsement hierarchy secondary keys or

00:31:49,360 --> 00:31:53,760
the anonymous keys

00:31:50,720 --> 00:31:54,240
to um to tell them apart let's take a

00:31:53,760 --> 00:31:56,799
look at

00:31:54,240 --> 00:31:59,279
a deeper look at the attestation code so

00:31:56,799 --> 00:32:01,519
inside the association code

00:31:59,279 --> 00:32:02,320
we have from a root of trust of storage

00:32:01,519 --> 00:32:05,120
perspective

00:32:02,320 --> 00:32:07,440
a partitioning of data that is uh going

00:32:05,120 --> 00:32:09,760
to identify the specific tpm

00:32:07,440 --> 00:32:12,240
and also there is data that is more

00:32:09,760 --> 00:32:14,240
generic and cannot identify specific tpm

00:32:12,240 --> 00:32:16,640
so inside the code that there is data

00:32:14,240 --> 00:32:19,679
that cannot identify a specific tpm

00:32:16,640 --> 00:32:20,960
and that is the pcr itself the type of

00:32:19,679 --> 00:32:22,240
attestation because there are other type

00:32:20,960 --> 00:32:23,039
of address stations so here we are

00:32:22,240 --> 00:32:25,200
dealing with the

00:32:23,039 --> 00:32:26,880
code type of attestation and then we

00:32:25,200 --> 00:32:29,039
have a non-study uh

00:32:26,880 --> 00:32:30,880
that is sent by the relying party to

00:32:29,039 --> 00:32:32,159
make sure that we are sending fresh

00:32:30,880 --> 00:32:33,919
station codes

00:32:32,159 --> 00:32:35,919
and then we have some magic data which

00:32:33,919 --> 00:32:39,279
is essentially a tpm generated

00:32:35,919 --> 00:32:41,120
um fixed value that is

00:32:39,279 --> 00:32:42,320
going to vouch that all the information

00:32:41,120 --> 00:32:43,760
that is going to be signed

00:32:42,320 --> 00:32:46,159
is within the trusted boundary of the

00:32:43,760 --> 00:32:48,159
tpm and then some signer information

00:32:46,159 --> 00:32:50,799
about the key

00:32:48,159 --> 00:32:52,320
uh some non i mean personally

00:32:50,799 --> 00:32:53,360
identifiable information includes the

00:32:52,320 --> 00:32:56,399
firmware version

00:32:53,360 --> 00:32:58,720
the restart count the reset count and

00:32:56,399 --> 00:33:00,240
some clock save data that might be very

00:32:58,720 --> 00:33:03,120
specific to a specific

00:33:00,240 --> 00:33:04,080
tpm or that has gone through reset and

00:33:03,120 --> 00:33:06,159
restart cycles

00:33:04,080 --> 00:33:07,919
and that can give away the identity of

00:33:06,159 --> 00:33:10,559
the tpm

00:33:07,919 --> 00:33:12,320
um so if you use an endorsement child

00:33:10,559 --> 00:33:13,679
key from an endorsement hierarchy

00:33:12,320 --> 00:33:15,679
or signing key from an endorsement

00:33:13,679 --> 00:33:17,360
hierarchy you get access to all of this

00:33:15,679 --> 00:33:19,519
which is including the identifiable and

00:33:17,360 --> 00:33:21,200
non-identifiable information

00:33:19,519 --> 00:33:23,360
and you can basically sign the code

00:33:21,200 --> 00:33:24,720
using this key but if you're using any

00:33:23,360 --> 00:33:26,960
other key your

00:33:24,720 --> 00:33:28,240
uh the tpm is going to perform something

00:33:26,960 --> 00:33:30,640
called as obfuscation

00:33:28,240 --> 00:33:32,399
which is basically randomizing all the

00:33:30,640 --> 00:33:35,600
personally identifiable information

00:33:32,399 --> 00:33:37,600
and block that information um there are

00:33:35,600 --> 00:33:40,320
a couple other type of attestations like

00:33:37,600 --> 00:33:40,960
audit digest and session or digest um

00:33:40,320 --> 00:33:42,640
that

00:33:40,960 --> 00:33:45,440
are completely blocked and not

00:33:42,640 --> 00:33:48,080
randomized and that's just a side note

00:33:45,440 --> 00:33:49,200
um so it's an additional piece of

00:33:48,080 --> 00:33:51,440
information called as nv

00:33:49,200 --> 00:33:53,519
clock that tcg classifies as

00:33:51,440 --> 00:33:56,080
non-personally identifiable information

00:33:53,519 --> 00:33:57,919
but for the paranoid uh envy clock

00:33:56,080 --> 00:33:58,960
though it is not fixed in value it moves

00:33:57,919 --> 00:34:01,360
at a fixed rate

00:33:58,960 --> 00:34:03,039
so you could make predictable uh

00:34:01,360 --> 00:34:04,799
predictions about the future anonymous

00:34:03,039 --> 00:34:07,120
key based on this information

00:34:04,799 --> 00:34:08,159
um and i mean the only way to get around

00:34:07,120 --> 00:34:09,599
that is you could

00:34:08,159 --> 00:34:11,679
reboot the platform every time you are

00:34:09,599 --> 00:34:13,040
test and that's again just for the

00:34:11,679 --> 00:34:16,399
paranoid

00:34:13,040 --> 00:34:19,280
um peter went over this uh

00:34:16,399 --> 00:34:20,960
about the pc pcr being reflective of the

00:34:19,280 --> 00:34:24,079
software state of the system

00:34:20,960 --> 00:34:25,599
but quickly this uh the system actually

00:34:24,079 --> 00:34:26,720
enables the root of transfer measurement

00:34:25,599 --> 00:34:29,599
to

00:34:26,720 --> 00:34:30,879
ensure that the pcrs are allocated under

00:34:29,599 --> 00:34:33,040
the rtm control

00:34:30,879 --> 00:34:34,159
and there you can set up the

00:34:33,040 --> 00:34:37,520
authorization policy

00:34:34,159 --> 00:34:39,359
and value and then uh

00:34:37,520 --> 00:34:41,760
you can also actually have

00:34:39,359 --> 00:34:45,359
authorizations for the extend and reset

00:34:41,760 --> 00:34:45,359
operations for the pcrs

00:34:45,440 --> 00:34:50,000
and then by trust the keys

00:34:48,480 --> 00:34:51,919
where the keys are stored so this is

00:34:50,000 --> 00:34:54,000
basically talking about

00:34:51,919 --> 00:34:55,520
where the keys are protected on the tpm

00:34:54,000 --> 00:34:56,879
the sensitive portion of the key that is

00:34:55,520 --> 00:34:59,839
generated on the tpm

00:34:56,879 --> 00:35:00,320
never actually leaves the tpm um and it

00:34:59,839 --> 00:35:02,800
lives

00:35:00,320 --> 00:35:04,720
in one of three locations within the ram

00:35:02,800 --> 00:35:06,320
as transient objects or it is moved to

00:35:04,720 --> 00:35:09,680
the persistent storage

00:35:06,320 --> 00:35:12,400
as a persistent key and then uh

00:35:09,680 --> 00:35:13,200
if since tpm is a low resid low memory

00:35:12,400 --> 00:35:14,720
uh device

00:35:13,200 --> 00:35:16,480
you can offload it to that system

00:35:14,720 --> 00:35:19,520
software and that is wrapped and

00:35:16,480 --> 00:35:20,720
encrypted using a tpm root key

00:35:19,520 --> 00:35:22,800
there are some dictionary lockout

00:35:20,720 --> 00:35:25,920
mitigations which basically

00:35:22,800 --> 00:35:28,160
tells you or blocks the brute force

00:35:25,920 --> 00:35:30,560
attacks on authorizations essentially to

00:35:28,160 --> 00:35:32,560
say if you tried 10 authorizations

00:35:30,560 --> 00:35:35,359
you are and say that you are basically

00:35:32,560 --> 00:35:38,400
locked for like an hour

00:35:35,359 --> 00:35:41,359
so we want to now draw some summary uh

00:35:38,400 --> 00:35:43,119
from our talk and uh we'll talk about

00:35:41,359 --> 00:35:44,560
the privacy responsibilities of all the

00:35:43,119 --> 00:35:47,599
rules

00:35:44,560 --> 00:35:48,800
in general logging is a problem and goes

00:35:47,599 --> 00:35:51,520
against the privacy

00:35:48,800 --> 00:35:53,440
goals we should avoid any direct paths

00:35:51,520 --> 00:35:55,359
between the verifier and relying party

00:35:53,440 --> 00:35:56,560
regarding specific credential

00:35:55,359 --> 00:35:58,800
activations

00:35:56,560 --> 00:36:00,480
so as an example if you have a verified

00:35:58,800 --> 00:36:02,320
log and a reliant party log

00:36:00,480 --> 00:36:04,079
let's see the information that they have

00:36:02,320 --> 00:36:05,920
the verify log has the information about

00:36:04,079 --> 00:36:06,800
the anonymous key names and the unique

00:36:05,920 --> 00:36:10,079
keys

00:36:06,800 --> 00:36:12,800
and if he logs the time at uh

00:36:10,079 --> 00:36:13,760
time at which these were activated and

00:36:12,800 --> 00:36:15,839
then the

00:36:13,760 --> 00:36:17,680
combined this with the relying party

00:36:15,839 --> 00:36:18,560
which also has access to the anonymous

00:36:17,680 --> 00:36:21,760
key names

00:36:18,560 --> 00:36:25,040
and the time log and in addition it also

00:36:21,760 --> 00:36:27,040
has access to the anonymous key public

00:36:25,040 --> 00:36:28,800
and if you remember like if you combine

00:36:27,040 --> 00:36:30,560
the unique keys and the anonymous key

00:36:28,800 --> 00:36:31,839
you are basically compromising the

00:36:30,560 --> 00:36:33,520
attacker identity

00:36:31,839 --> 00:36:35,040
so despite the fact that the artist

00:36:33,520 --> 00:36:38,240
didn't give out

00:36:35,040 --> 00:36:39,040
the privacy uh the privacy sensitive

00:36:38,240 --> 00:36:40,720
information

00:36:39,040 --> 00:36:42,240
you could actually combine logs from a

00:36:40,720 --> 00:36:44,320
verifier and align party

00:36:42,240 --> 00:36:46,960
and compromise that at a stride entity

00:36:44,320 --> 00:36:49,760
so prevent a direct path between them

00:36:46,960 --> 00:36:50,880
um and then additionally once you

00:36:49,760 --> 00:36:53,119
compromise that

00:36:50,880 --> 00:36:55,680
you tag the time and the anonymous key

00:36:53,119 --> 00:36:57,920
names and you can track what specific

00:36:55,680 --> 00:36:59,280
uh activities that tester platform was

00:36:57,920 --> 00:37:02,320
up to

00:36:59,280 --> 00:37:06,800
so the message is clear do not log

00:37:02,320 --> 00:37:06,800
just like all the vpns do not log

00:37:06,839 --> 00:37:10,720
um so

00:37:08,880 --> 00:37:12,000
these are all the atmosphere platform

00:37:10,720 --> 00:37:14,800
responsibilities

00:37:12,000 --> 00:37:16,079
and um uh we just want to highlight a

00:37:14,800 --> 00:37:19,599
couple of them here

00:37:16,079 --> 00:37:20,160
uh basically this is a misconception

00:37:19,599 --> 00:37:22,320
that

00:37:20,160 --> 00:37:24,640
the same entity that does credential

00:37:22,320 --> 00:37:25,920
activation is also going to verify your

00:37:24,640 --> 00:37:27,520
attestation codes

00:37:25,920 --> 00:37:29,359
but remember like if you do this you're

00:37:27,520 --> 00:37:31,280
going to basically give

00:37:29,359 --> 00:37:33,839
the unique and anonymous identity to the

00:37:31,280 --> 00:37:35,440
same entity other than that tester tpm

00:37:33,839 --> 00:37:37,599
and that entity can potentially

00:37:35,440 --> 00:37:40,320
compromise your privacy

00:37:37,599 --> 00:37:41,839
so avoid giving the attestation codes to

00:37:40,320 --> 00:37:44,400
the verifier and give it only to the

00:37:41,839 --> 00:37:48,880
relying party

00:37:44,400 --> 00:37:52,160
another thing that is important is

00:37:48,880 --> 00:37:55,040
all attestation frameworks today um as

00:37:52,160 --> 00:37:56,880
as far as uh i can tell is they go for

00:37:55,040 --> 00:37:59,839
the endorsement hierarchy keys

00:37:56,880 --> 00:38:01,680
for attestation codes um so if your

00:37:59,839 --> 00:38:02,079
attribution framework is designed around

00:38:01,680 --> 00:38:05,359
just

00:38:02,079 --> 00:38:07,760
relying on pcr values you should

00:38:05,359 --> 00:38:08,960
avoid using signing keys from the

00:38:07,760 --> 00:38:12,079
endorsement hierarchy

00:38:08,960 --> 00:38:13,359
and instead use the um attribution

00:38:12,079 --> 00:38:15,760
signing keys from

00:38:13,359 --> 00:38:16,400
any other hierarchy and we saw that

00:38:15,760 --> 00:38:18,160
credential

00:38:16,400 --> 00:38:19,680
activation works likewise and you can

00:38:18,160 --> 00:38:21,680
create trust anchors between

00:38:19,680 --> 00:38:22,800
any other hierarchy anonymous keys and

00:38:21,680 --> 00:38:25,599
the trusted anchor

00:38:22,800 --> 00:38:26,320
endorsement key these are some

00:38:25,599 --> 00:38:28,880
additional

00:38:26,320 --> 00:38:30,320
system responsibilities for the root of

00:38:28,880 --> 00:38:32,400
trust for measurement

00:38:30,320 --> 00:38:33,839
but the most important one here is that

00:38:32,400 --> 00:38:34,880
you don't extend platform unique

00:38:33,839 --> 00:38:36,800
measurements

00:38:34,880 --> 00:38:38,560
so that your attestation codes look

00:38:36,800 --> 00:38:42,000
unique to a specific platform that

00:38:38,560 --> 00:38:42,640
also gives away the privacy uh these are

00:38:42,000 --> 00:38:44,800
a couple of

00:38:42,640 --> 00:38:46,079
demonstration slides where we are

00:38:44,800 --> 00:38:48,240
talking about credential

00:38:46,079 --> 00:38:50,640
activation of non-endorsement hierarchy

00:38:48,240 --> 00:38:52,880
keys you can see that

00:38:50,640 --> 00:38:55,280
you create a trust anchor with a

00:38:52,880 --> 00:39:00,000
endorsement hierarchy

00:38:55,280 --> 00:39:03,040
excuse me

00:39:00,000 --> 00:39:06,160
and then um you have

00:39:03,040 --> 00:39:08,079
um a

00:39:06,160 --> 00:39:09,920
attestation signing key coming from a

00:39:08,079 --> 00:39:11,760
non-endorsement hierarchy

00:39:09,920 --> 00:39:13,440
and uh you basically run into the

00:39:11,760 --> 00:39:16,320
credential activation process

00:39:13,440 --> 00:39:18,320
and it is able to succeed in that

00:39:16,320 --> 00:39:19,680
credential activation process

00:39:18,320 --> 00:39:22,720
and you can see that the comparative

00:39:19,680 --> 00:39:24,640
data here is equivalent

00:39:22,720 --> 00:39:25,760
um and here we are basically

00:39:24,640 --> 00:39:29,040
demonstrating

00:39:25,760 --> 00:39:30,320
the codes that are signed with keys from

00:39:29,040 --> 00:39:31,839
the endorsement hierarchy

00:39:30,320 --> 00:39:33,839
you can see that the personally

00:39:31,839 --> 00:39:35,040
identifiable information reset count

00:39:33,839 --> 00:39:36,800
restart count

00:39:35,040 --> 00:39:39,440
and firmware version and save flags

00:39:36,800 --> 00:39:42,079
these are all in clear

00:39:39,440 --> 00:39:42,640
and they are not obfuscated additionally

00:39:42,079 --> 00:39:44,480
the

00:39:42,640 --> 00:39:45,920
non-personally identifiable information

00:39:44,480 --> 00:39:50,400
the pcr digest

00:39:45,920 --> 00:39:53,119
it's also non-obfuscated

00:39:50,400 --> 00:39:54,640
and flip that around and use a

00:39:53,119 --> 00:39:56,000
attestation signing key from a

00:39:54,640 --> 00:39:58,400
non-endorsement hierarchy

00:39:56,000 --> 00:40:00,240
and you can see that that value which is

00:39:58,400 --> 00:40:03,359
personally identifiable information

00:40:00,240 --> 00:40:06,800
is completely obfuscated or randomized

00:40:03,359 --> 00:40:07,599
and then the non-personally identifiable

00:40:06,800 --> 00:40:11,520
information or

00:40:07,599 --> 00:40:14,160
the pcr digest is not obfuscated

00:40:11,520 --> 00:40:15,280
um that is all we had in this

00:40:14,160 --> 00:40:17,440
presentation

00:40:15,280 --> 00:40:18,480
and we will hang around for your

00:40:17,440 --> 00:40:22,960
questions

00:40:18,480 --> 00:40:26,000
and uh peter yeah thank you um

00:40:22,960 --> 00:40:27,760
there should be the summary slide um

00:40:26,000 --> 00:40:30,000
yeah thanks for your attention i hope

00:40:27,760 --> 00:40:34,000
you liked it uh especially imran's

00:40:30,000 --> 00:40:35,280
explanations about how to um

00:40:34,000 --> 00:40:37,599
preserve your privacy using the

00:40:35,280 --> 00:40:38,079
tbm-based attestation if you have any

00:40:37,599 --> 00:40:41,440
questions

00:40:38,079 --> 00:40:44,319
we are still in the venueless system

00:40:41,440 --> 00:40:46,880
talk to us chat to us um also head to

00:40:44,319 --> 00:40:48,480
the tpm2 software guitar by o page

00:40:46,880 --> 00:40:50,640
um we have a guitar we have a slack we

00:40:48,480 --> 00:40:53,119
have an irc mailing list whatever

00:40:50,640 --> 00:40:54,560
uh really approachable community so if

00:40:53,119 --> 00:40:56,800
if you have any questions

00:40:54,560 --> 00:40:58,800
um there's also all the tutorials um

00:40:56,800 --> 00:40:59,680
imran showed to you as an interactive

00:40:58,800 --> 00:41:01,920
tutorial

00:40:59,680 --> 00:41:03,040
on the webpage so if anything was too

00:41:01,920 --> 00:41:04,880
fast just

00:41:03,040 --> 00:41:06,480
you can just read it up there again oh i

00:41:04,880 --> 00:41:08,160
don't think that was too fast

00:41:06,480 --> 00:41:09,920
thank you very much for your talk you've

00:41:08,160 --> 00:41:12,240
um you've landed

00:41:09,920 --> 00:41:13,200
right on the on the mark there that was

00:41:12,240 --> 00:41:18,960
a great talk

00:41:13,200 --> 00:41:18,960

YouTube URL: https://www.youtube.com/watch?v=1fLQPMHvNIw


