Title: "Building my own border router + a wireguard love story" - Arjen Lentz (LCA 2021 Online)
Publication date: 2021-01-30
Playlist: linux.conf.au 2021
Description: 
	Arjen Lentz

https://lca2021.linux.org.au/schedule/presentation/84/

I'm not a sysadmin, but sometimes I have to do stuff - and I have to do security, for a living but also to keep the home network safe and performant.
Consumer routers suck: in performance, connection reliability, security, and ability to have a sane configuration.
OpenWRT and DD-WRT are nice, but sometimes one has this weird urge to just do it again, from scratch and using open bits whereever possible.
Maybe just because.

Anyway, I decided to order two PC Engines APU 4d4 boards from the awesome Pascal in Switzerland. These are cheap-ish little fan-less single board computers with a 1 GHz AMD GX-412TC 4 core CPU (64-bit, of course), 4GB RAM, 4x Gbit Ethernet ports, and plenty of other connectors and options. I put in a PCIe SSD card.
I first talked to the board's BIOS via a serial cable (was already up-to-date, good), and installed Debian 10 on it (with some minor hackery) from a USB stick.

And behold, my NBN HFC connection is now stable, and faster.

Maybe you would like to do something similar, or maybe you just want to pick up a few of the things that I've done - you can do any of this with a regular Linux box as well:
 - A few of the ports are configured as a switch, using bridged network interfaces.
 - One port talks to the NBN HFC modem with PPPoE connection and a VLAN, insisting it's actually the original ISP-provided device.
 - IPv4/IPv6 native dual stack, each with subnets (I just have those, from when I ran a company from home)
 - Outbound rate-limiting on the HFC connection to keep the stupid NBN happy.
 - Appropriate kernel tuning via sysctl - seemingly quite necessary for dealing with funny traffic!
 - A hand-crafted effective firewall, providing safety but also (when desired) insights in what fun tries to scan and gain access, how and from where.
 - Configuring Unbound DNS to get rid of most ads on the LAN.
 - Surviving a reasonably-sized DDoS or other attack without flinching too much.
 - Using dynamic geo-blocking, again with options to gain insight.
 - WireGuard VPN end-point, both for my own devices and for geo-tunneling (using policy routing) (* see below for a WireGuard love story)
 - Optional Suricata intrusion detection/prevention.
 - Being invisible for scans, if so desired.
Extra options are adding mobile data backup with an on-board SIM card (may do), and wifi (might do using my 2nd board).

In this talk I will show what it all looks like on the outside and inside, and go over the configuration - understandable for small league nerds.
So you can do this yourself, or just learn more about how the various bits work.
(Some entertaining stuff-ups and anecdotes are also included.)

* A WireGuard love story

What if there was a VPN that only requires a few thousand lines of code, and lives inside the kernel?
Horays! Thanks to Jason Donenfeld, WireGuard is now available in recent Linux kernels, and otherwise easy to add.
But how to set it all up? The documentation is kinda all there, but mostly if you already know your stuff.
Tutorials abound, but some things have changed since. Aargh.

So now that the dust has settled, let's look at this from the non-whizz perspective.
How to peer, or set up a server with clients, or a network tunnel with policy routing.
I'm not the expert, but I've made it work and I can explain what I did.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sat Jan 23 14:25:00 2021 at Blemings Labs
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,360 --> 00:00:18,560
welcome back to the system

00:00:16,400 --> 00:00:21,680
administration mini conf

00:00:18,560 --> 00:00:25,519
for your entertainment

00:00:21,680 --> 00:00:27,760
and education we have a double feature

00:00:25,519 --> 00:00:29,439
um two talks from arjun were both

00:00:27,760 --> 00:00:30,000
excellent and so we accepted both of

00:00:29,439 --> 00:00:32,719
them and gave

00:00:30,000 --> 00:00:34,399
him half the time for each one and we

00:00:32,719 --> 00:00:35,920
have arjun talking about building his

00:00:34,399 --> 00:00:38,960
own border router

00:00:35,920 --> 00:00:42,559
and also a love story for wireguard

00:00:38,960 --> 00:00:44,239
over to you arjun thank you ewan

00:00:42,559 --> 00:00:46,079
and yeah i've been asked to do the

00:00:44,239 --> 00:00:48,480
impossible i'm going to try

00:00:46,079 --> 00:00:49,840
and do this um there's not enough time

00:00:48,480 --> 00:00:51,199
for so much content

00:00:49,840 --> 00:00:54,079
there's going to be lots of text on the

00:00:51,199 --> 00:00:57,120
screens and you're not going to be

00:00:54,079 --> 00:00:59,440
able to take it all in however the idea

00:00:57,120 --> 00:01:00,640
is that you'll be able to you know get

00:00:59,440 --> 00:01:04,879
the gist of it

00:01:00,640 --> 00:01:07,439
and i will be posting um the details on

00:01:04,879 --> 00:01:08,080
a github repo that i haven't yet been

00:01:07,439 --> 00:01:09,920
able to

00:01:08,080 --> 00:01:11,920
fully sort out the repo exists but it's

00:01:09,920 --> 00:01:12,640
empty right now so i promise it'll be

00:01:11,920 --> 00:01:15,280
there

00:01:12,640 --> 00:01:16,799
so first of all background um you may

00:01:15,280 --> 00:01:18,240
know me i've got a bit of a database

00:01:16,799 --> 00:01:18,960
background i'm no longer doing that at

00:01:18,240 --> 00:01:21,119
the moment

00:01:18,960 --> 00:01:23,119
i'm actually chief security at catalyst

00:01:21,119 --> 00:01:23,840
study australia so i spent a lot of time

00:01:23,119 --> 00:01:26,479
in that realm

00:01:23,840 --> 00:01:27,200
i'm also not a cicipine i won't pretend

00:01:26,479 --> 00:01:30,400
to be

00:01:27,200 --> 00:01:32,320
so some of this is hobbying you may well

00:01:30,400 --> 00:01:35,280
know things that i don't know that's

00:01:32,320 --> 00:01:37,280
entirely likely

00:01:35,280 --> 00:01:39,040
and there may well be better ways of

00:01:37,280 --> 00:01:41,920
doing something but there are

00:01:39,040 --> 00:01:42,799
often multiple ways so i'll i'll

00:01:41,920 --> 00:01:45,759
describe what

00:01:42,799 --> 00:01:47,360
what i'm doing and why so what are we

00:01:45,759 --> 00:01:52,560
trying to achieve

00:01:47,360 --> 00:01:54,240
um a learning experience for me

00:01:52,560 --> 00:01:56,399
sometimes doing something yourself is

00:01:54,240 --> 00:01:58,880
actually you know really useful to

00:01:56,399 --> 00:01:59,520
to dig into things and and get better

00:01:58,880 --> 00:02:03,040
grips

00:01:59,520 --> 00:02:04,640
um a few tricks together

00:02:03,040 --> 00:02:07,040
sometimes cover an awful lot of

00:02:04,640 --> 00:02:09,119
scenarios um

00:02:07,040 --> 00:02:10,479
looking about which bits work in

00:02:09,119 --> 00:02:11,920
practice for us

00:02:10,479 --> 00:02:14,319
that doesn't mean that it works for

00:02:11,920 --> 00:02:16,080
other people um but also

00:02:14,319 --> 00:02:17,840
some things that other people say online

00:02:16,080 --> 00:02:20,800
don't necessarily work for us so

00:02:17,840 --> 00:02:23,280
this is what works for me and in part

00:02:20,800 --> 00:02:25,040
it's also deployed at catalyst

00:02:23,280 --> 00:02:26,720
so there's no single this is right and

00:02:25,040 --> 00:02:28,000
something else is wrong these are just a

00:02:26,720 --> 00:02:30,560
couple of ideas and i'm

00:02:28,000 --> 00:02:32,720
very very happy to to take pull requests

00:02:30,560 --> 00:02:34,400
and and other comments and questions

00:02:32,720 --> 00:02:36,400
um and some things i don't understand

00:02:34,400 --> 00:02:38,000
myself i just know they work so

00:02:36,400 --> 00:02:39,920
you know if someone is able to provide

00:02:38,000 --> 00:02:43,280
the explanation that would be great

00:02:39,920 --> 00:02:46,319
so here we go that is the inside of my

00:02:43,280 --> 00:02:48,560
of my router um i actually have two

00:02:46,319 --> 00:02:49,599
and i'll i'll prove the point its

00:02:48,560 --> 00:02:53,040
sibling is

00:02:49,599 --> 00:02:56,319
right here it's a tiny little box

00:02:53,040 --> 00:02:58,720
and the for the nerds here

00:02:56,319 --> 00:03:00,480
the specs are right there so it's a tiny

00:02:58,720 --> 00:03:03,200
little single board computer

00:03:00,480 --> 00:03:04,560
designed by pascal dornier in in

00:03:03,200 --> 00:03:07,680
switzerland

00:03:04,560 --> 00:03:10,319
it's a four core amd which is

00:03:07,680 --> 00:03:12,239
lovely it has passive conductive cooling

00:03:10,319 --> 00:03:14,800
it doesn't make any noise at all

00:03:12,239 --> 00:03:16,560
um i have now added wi-fi to it since a

00:03:14,800 --> 00:03:17,040
couple of weeks ago so you see that that

00:03:16,560 --> 00:03:19,200
board

00:03:17,040 --> 00:03:20,560
so the photo you see is my actual board

00:03:19,200 --> 00:03:23,599
that is currently running

00:03:20,560 --> 00:03:28,879
uh what i showed you was it's its twin

00:03:23,599 --> 00:03:31,440
so um and i also have a 120 gig

00:03:28,879 --> 00:03:32,000
mini pci express sata in there that is

00:03:31,440 --> 00:03:33,760
the

00:03:32,000 --> 00:03:36,640
and let's see i can actually go that

00:03:33,760 --> 00:03:38,000
that is there on the screen

00:03:36,640 --> 00:03:39,760
so you can see that and there's an awful

00:03:38,000 --> 00:03:41,440
lot of other ports that i just don't use

00:03:39,760 --> 00:03:42,239
at the moment it's a very very simple

00:03:41,440 --> 00:03:45,599
setup

00:03:42,239 --> 00:03:46,159
okay but it does an awful lot oh by the

00:03:45,599 --> 00:03:48,080
way it's

00:03:46,159 --> 00:03:49,200
really really cheap it's kind of open

00:03:48,080 --> 00:03:51,120
hardware

00:03:49,200 --> 00:03:53,040
open source software in the bios it's

00:03:51,120 --> 00:03:56,720
pretty done slick

00:03:53,040 --> 00:03:59,519
and it just works okay what have i done

00:03:56,720 --> 00:04:00,000
with the software um by the way the

00:03:59,519 --> 00:04:02,080
hardware

00:04:00,000 --> 00:04:03,680
you can look all that up on the pc

00:04:02,080 --> 00:04:05,280
engine site so it's no use for me

00:04:03,680 --> 00:04:07,519
actually spending more time on that the

00:04:05,280 --> 00:04:09,120
case is also to be quiet there

00:04:07,519 --> 00:04:10,959
you can you can build your own case you

00:04:09,120 --> 00:04:14,640
can do whatever you like

00:04:10,959 --> 00:04:18,720
um okay i'm running debian 10 on it

00:04:14,640 --> 00:04:21,199
um you could use ubuntu but ubuntu

00:04:18,720 --> 00:04:23,360
doesn't by default i think like itself

00:04:21,199 --> 00:04:24,639
to be installed via serial console where

00:04:23,360 --> 00:04:26,479
debian 10 does

00:04:24,639 --> 00:04:28,240
it doesn't require any hacker you can

00:04:26,479 --> 00:04:30,560
just start with the plain usb stick

00:04:28,240 --> 00:04:31,759
so that's pretty good you could use lux

00:04:30,560 --> 00:04:36,479
if you wanted to

00:04:31,759 --> 00:04:38,000
and i used lvm with ext4

00:04:36,479 --> 00:04:39,360
i've now learned and i'll mention that a

00:04:38,000 --> 00:04:41,280
bit later that butterflies might have

00:04:39,360 --> 00:04:42,320
been the better choice for some reasons

00:04:41,280 --> 00:04:45,600
i'll mention

00:04:42,320 --> 00:04:46,960
then i've used usb guard i basically

00:04:45,600 --> 00:04:49,199
just installed it which means

00:04:46,960 --> 00:04:50,400
and and set it to enforcing that means

00:04:49,199 --> 00:04:52,880
that if anybody

00:04:50,400 --> 00:04:53,840
sticks in a usb keyboard or something

00:04:52,880 --> 00:04:55,280
else they can't do

00:04:53,840 --> 00:04:56,880
anything because it won't actually get

00:04:55,280 --> 00:04:59,600
recognized by

00:04:56,880 --> 00:05:01,440
the kernel it doesn't care anymore i

00:04:59,600 --> 00:05:03,120
will not be covering rk hunter and

00:05:01,440 --> 00:05:04,080
shurikatta today because there just

00:05:03,120 --> 00:05:07,120
wasn't time

00:05:04,080 --> 00:05:09,520
i will be put putting it into the the

00:05:07,120 --> 00:05:12,160
github repository because i do have some

00:05:09,520 --> 00:05:13,840
some config there there are a number of

00:05:12,160 --> 00:05:14,720
tools and packages you need to install

00:05:13,840 --> 00:05:16,240
bridges

00:05:14,720 --> 00:05:18,639
bridget tools you will need otherwise

00:05:16,240 --> 00:05:20,240
you will find that for odd reasons

00:05:18,639 --> 00:05:21,840
in your interfaces file when you add a

00:05:20,240 --> 00:05:25,520
bridge it doesn't actually work

00:05:21,840 --> 00:05:25,840
similar with vlan ppd is required if you

00:05:25,520 --> 00:05:29,199
have

00:05:25,840 --> 00:05:32,560
an adsl or most nbn connections

00:05:29,199 --> 00:05:33,520
and host apd is required if you want to

00:05:32,560 --> 00:05:35,600
set a

00:05:33,520 --> 00:05:38,160
wireless base station i'm also not going

00:05:35,600 --> 00:05:41,919
into the wi-fi base station

00:05:38,160 --> 00:05:43,840
um i don't yet have it working um

00:05:41,919 --> 00:05:46,000
i appear to be somewhat incompetent with

00:05:43,840 --> 00:05:47,440
host apd if someone is able to help me

00:05:46,000 --> 00:05:48,800
that would be wonderful

00:05:47,440 --> 00:05:50,160
um see there's a trade for the

00:05:48,800 --> 00:05:51,199
information i'm giving you today that

00:05:50,160 --> 00:05:54,479
would be great

00:05:51,199 --> 00:05:56,240
um iptables ipset that

00:05:54,479 --> 00:05:57,600
will be where we spend a lot of our time

00:05:56,240 --> 00:06:00,080
today

00:05:57,600 --> 00:06:01,440
iptables persistent i'll be talking a

00:06:00,080 --> 00:06:02,639
bit about that because we don't need a

00:06:01,440 --> 00:06:05,759
bit of tweakage

00:06:02,639 --> 00:06:08,800
and i admit i moved from unbound to

00:06:05,759 --> 00:06:10,240
the nest mask i advertised unbound and

00:06:08,800 --> 00:06:11,680
it turns out that dns mask does

00:06:10,240 --> 00:06:14,800
something really cool

00:06:11,680 --> 00:06:15,199
um that unbound doesn't yet so i'll i'll

00:06:14,800 --> 00:06:17,919
be

00:06:15,199 --> 00:06:19,440
covering that and of course openssh mosh

00:06:17,919 --> 00:06:22,160
the

00:06:19,440 --> 00:06:23,840
the um the easier equivalent of that

00:06:22,160 --> 00:06:25,360
that actually survives

00:06:23,840 --> 00:06:27,440
suspending your laptop and coming back

00:06:25,360 --> 00:06:30,240
from a different location screen of him

00:06:27,440 --> 00:06:31,520
are my friends and i will be covering

00:06:30,240 --> 00:06:34,800
wire guard along the way

00:06:31,520 --> 00:06:38,400
it will need a repo in debian 10 to um

00:06:34,800 --> 00:06:39,759
to deal with but in ubuntu you you

00:06:38,400 --> 00:06:40,960
should actually have it included in

00:06:39,759 --> 00:06:42,560
2004.

00:06:40,960 --> 00:06:44,080
it's it's fairly straightforward so it

00:06:42,560 --> 00:06:44,479
doesn't doesn't really matter that it's

00:06:44,080 --> 00:06:47,680
not

00:06:44,479 --> 00:06:48,479
default okay now first of all my disk

00:06:47,680 --> 00:06:51,599
layout and

00:06:48,479 --> 00:06:55,599
so most of this is about security

00:06:51,599 --> 00:06:57,440
and you know trying to reduce the

00:06:55,599 --> 00:06:58,639
well people call it the attack surface

00:06:57,440 --> 00:07:00,880
trying to what i

00:06:58,639 --> 00:07:03,039
call it usually is reducing the noise

00:07:00,880 --> 00:07:03,919
the amount of stuff that could happen

00:07:03,039 --> 00:07:07,039
that i need to keep an

00:07:03,919 --> 00:07:09,039
eye on the less noise i have

00:07:07,039 --> 00:07:10,080
the better anything funny will stick out

00:07:09,039 --> 00:07:12,560
okay

00:07:10,080 --> 00:07:13,199
so i used lvm with multiple partitions

00:07:12,560 --> 00:07:15,199
as i said

00:07:13,199 --> 00:07:16,319
but i have since found out and i'm using

00:07:15,199 --> 00:07:18,639
it elsewhere

00:07:16,319 --> 00:07:20,560
that if you do butter fs you can

00:07:18,639 --> 00:07:21,919
actually use sub volumes and that is

00:07:20,560 --> 00:07:23,520
absolutely awesome

00:07:21,919 --> 00:07:25,520
so you could do this in a single

00:07:23,520 --> 00:07:26,639
butterfish volume

00:07:25,520 --> 00:07:28,160
which means you don't have to muck

00:07:26,639 --> 00:07:29,199
around with multiple partitions and

00:07:28,160 --> 00:07:30,880
decide

00:07:29,199 --> 00:07:32,800
which partition is going to get how many

00:07:30,880 --> 00:07:34,880
gigabytes it doesn't matter

00:07:32,800 --> 00:07:36,240
in butterfest it can all be a single

00:07:34,880 --> 00:07:38,240
thing and then

00:07:36,240 --> 00:07:40,479
the root as well as all the other mounts

00:07:38,240 --> 00:07:42,639
are separate sub volumes

00:07:40,479 --> 00:07:45,199
and then pairs up volume you can

00:07:42,639 --> 00:07:48,800
actually change the mounting options

00:07:45,199 --> 00:07:50,720
you can't change all the options um

00:07:48,800 --> 00:07:53,039
that you can put in fstab but anything

00:07:50,720 --> 00:07:56,240
that is not a butter fs

00:07:53,039 --> 00:07:59,680
option you can set so dev no dev

00:07:56,240 --> 00:08:01,599
um no suite no exec those things and

00:07:59,680 --> 00:08:04,639
read only you can actually sit

00:08:01,599 --> 00:08:06,639
okay so all the

00:08:04,639 --> 00:08:07,840
partitions that don't need all the mount

00:08:06,639 --> 00:08:09,919
points that don't need

00:08:07,840 --> 00:08:10,879
devices we've said no div anything that

00:08:09,919 --> 00:08:13,039
doesn't need to it

00:08:10,879 --> 00:08:15,039
we turned it off and things that don't

00:08:13,039 --> 00:08:15,680
need to be executable we turned it off

00:08:15,039 --> 00:08:17,840
as well

00:08:15,680 --> 00:08:19,759
on a router the home directories really

00:08:17,840 --> 00:08:21,360
don't need to be executable

00:08:19,759 --> 00:08:23,599
the slash temp definitely doesn't need

00:08:21,360 --> 00:08:28,000
to be executable now

00:08:23,599 --> 00:08:30,080
slash temp requires a tweak in apt

00:08:28,000 --> 00:08:32,399
because by default apt will actually go

00:08:30,080 --> 00:08:35,200
to temp4 its packet installs

00:08:32,399 --> 00:08:35,680
however you can tell it to use var slash

00:08:35,200 --> 00:08:37,599
temp

00:08:35,680 --> 00:08:39,279
and then all is well again okay so you

00:08:37,599 --> 00:08:42,560
need to make slight tweaks

00:08:39,279 --> 00:08:45,600
there slash user could be read only

00:08:42,560 --> 00:08:46,959
and then what happens with apt apt-get

00:08:45,600 --> 00:08:50,000
when it installs things

00:08:46,959 --> 00:08:51,519
it temporarily remounts it as read write

00:08:50,000 --> 00:08:53,120
and then mounts it back

00:08:51,519 --> 00:08:55,040
as it turns out that doesn't actually

00:08:53,120 --> 00:08:57,360
work in practice because

00:08:55,040 --> 00:08:59,360
i think because various demons have

00:08:57,360 --> 00:09:02,160
things open there

00:08:59,360 --> 00:09:02,880
and it's not clean so it can't be

00:09:02,160 --> 00:09:05,680
unmounted

00:09:02,880 --> 00:09:07,519
and therefore it never gets remounted it

00:09:05,680 --> 00:09:09,120
will make it rewrite but it'll never get

00:09:07,519 --> 00:09:11,680
it back to read only again so

00:09:09,120 --> 00:09:12,720
it just doesn't matter i think it's it's

00:09:11,680 --> 00:09:15,200
good enough

00:09:12,720 --> 00:09:16,399
okay and then have a swap file or

00:09:15,200 --> 00:09:20,839
partition

00:09:16,399 --> 00:09:23,519
whichever you want okay onto

00:09:20,839 --> 00:09:26,000
interfaces this

00:09:23,519 --> 00:09:26,560
little router has four i'll actually

00:09:26,000 --> 00:09:30,480
show it

00:09:26,560 --> 00:09:31,600
again here on the tiny screen you will

00:09:30,480 --> 00:09:34,480
see from me

00:09:31,600 --> 00:09:34,959
it has four ethernet gigabit ethernet

00:09:34,480 --> 00:09:36,560
ports

00:09:34,959 --> 00:09:39,519
okay so those are the ones we're playing

00:09:36,560 --> 00:09:42,880
with and that's aside from the wi-fi

00:09:39,519 --> 00:09:45,920
i will set up one of these ports to be

00:09:42,880 --> 00:09:49,200
my internal network so my lan

00:09:45,920 --> 00:09:52,480
and that is that is in

00:09:49,200 --> 00:09:54,399
is zero okay we're setting the mtu to

00:09:52,480 --> 00:09:56,800
9000 jumbo frames are fine

00:09:54,399 --> 00:09:58,480
that works perfectly okay then the basic

00:09:56,800 --> 00:10:02,000
setup for the wireless

00:09:58,480 --> 00:10:04,000
is wp 5x0 okay

00:10:02,000 --> 00:10:06,959
we'll not cover that beyond that as i

00:10:04,000 --> 00:10:09,519
explained okay then the bridging port

00:10:06,959 --> 00:10:11,200
what i'm going to do is use two ports in

00:10:09,519 --> 00:10:12,399
my particular scenario you can set it up

00:10:11,200 --> 00:10:13,760
differently we're building a little

00:10:12,399 --> 00:10:16,399
switch

00:10:13,760 --> 00:10:18,079
so first it turns out that if you try to

00:10:16,399 --> 00:10:21,760
set the mtu on the bridge port

00:10:18,079 --> 00:10:23,680
it will make up the up fail if i fail

00:10:21,760 --> 00:10:25,279
if someone knows where to put it so that

00:10:23,680 --> 00:10:26,800
jumper frames might work

00:10:25,279 --> 00:10:28,959
please let me know i haven't been able

00:10:26,800 --> 00:10:30,320
to find it yet then a number of settings

00:10:28,959 --> 00:10:30,640
those commas aren't actually there i

00:10:30,320 --> 00:10:33,360
just

00:10:30,640 --> 00:10:34,000
needed to fit it on the screen but what

00:10:33,360 --> 00:10:37,680
i'm doing

00:10:34,000 --> 00:10:41,040
is port two and three

00:10:37,680 --> 00:10:41,600
are bridged okay and then i bring them

00:10:41,040 --> 00:10:44,959
both

00:10:41,600 --> 00:10:48,079
up so then i've got two ports that

00:10:44,959 --> 00:10:50,240
act as a as a little switch

00:10:48,079 --> 00:10:53,040
for me together with the uh together

00:10:50,240 --> 00:10:54,800
with the the router with this firewall

00:10:53,040 --> 00:10:56,560
okay so i still have full control over

00:10:54,800 --> 00:10:57,360
how that all communicates with each

00:10:56,560 --> 00:11:00,880
other

00:10:57,360 --> 00:11:04,320
then i have internode nbn via

00:11:00,880 --> 00:11:06,320
hfc cable a joy it is um

00:11:04,320 --> 00:11:07,680
i have to say it works much better since

00:11:06,320 --> 00:11:10,800
i actually use this router

00:11:07,680 --> 00:11:14,399
rather than either my older debian box

00:11:10,800 --> 00:11:17,120
or the tp-link from internet

00:11:14,399 --> 00:11:19,279
and i'll have more to say about that so

00:11:17,120 --> 00:11:22,320
i need a vlan

00:11:19,279 --> 00:11:24,480
the vlan 2 is required because internet

00:11:22,320 --> 00:11:27,120
internet requires that and for some odd

00:11:24,480 --> 00:11:28,160
reason i also need a ppp connection hpp

00:11:27,120 --> 00:11:30,880
over e

00:11:28,160 --> 00:11:32,000
using vlan 2 and that is it's actually

00:11:30,880 --> 00:11:34,000
all authenticated

00:11:32,000 --> 00:11:35,440
and that is how that works so this just

00:11:34,000 --> 00:11:37,839
works specifically for

00:11:35,440 --> 00:11:39,839
my home setup and we're talking through

00:11:37,839 --> 00:11:40,839
it right now this is what i'm talking

00:11:39,839 --> 00:11:43,519
sir

00:11:40,839 --> 00:11:46,880
um i said

00:11:43,519 --> 00:11:49,360
i might talk about in my talk

00:11:46,880 --> 00:11:51,279
proposal about rate limiting as it turns

00:11:49,360 --> 00:11:53,440
out with this router i don't need to

00:11:51,279 --> 00:11:55,360
my nbn doesn't fall over anymore when i

00:11:53,440 --> 00:11:58,720
stuff a lot of data through it

00:11:55,360 --> 00:12:01,120
that was a problem with the tp-link

00:11:58,720 --> 00:12:01,920
if i stuffed a lot of data through it

00:12:01,120 --> 00:12:04,160
outbound

00:12:01,920 --> 00:12:05,680
it would actually drop the connection

00:12:04,160 --> 00:12:07,200
and internet told me that it was

00:12:05,680 --> 00:12:09,920
something on the nbn end

00:12:07,200 --> 00:12:10,800
as it turns out it might not be i

00:12:09,920 --> 00:12:12,959
actually now

00:12:10,800 --> 00:12:14,639
have a hundred and eight megabit

00:12:12,959 --> 00:12:16,079
downstream rather than a hundred

00:12:14,639 --> 00:12:18,480
i'm quite pleased with that don't tell

00:12:16,079 --> 00:12:21,519
anyone and i've got

00:12:18,480 --> 00:12:23,519
you know almost 40 megabit up um

00:12:21,519 --> 00:12:25,040
and that works perfectly fine i haven't

00:12:23,519 --> 00:12:27,120
been able to make it fall over

00:12:25,040 --> 00:12:29,440
so running a good router apparently does

00:12:27,120 --> 00:12:31,200
a good job forget tp-link because that's

00:12:29,440 --> 00:12:33,440
not a good router

00:12:31,200 --> 00:12:34,560
what i did need to do is and i'll show

00:12:33,440 --> 00:12:37,519
you here

00:12:34,560 --> 00:12:38,000
the hardware address the hardware

00:12:37,519 --> 00:12:41,120
address

00:12:38,000 --> 00:12:42,959
of my router on the outside towards nbn

00:12:41,120 --> 00:12:44,639
does report itself to be the tp-link

00:12:42,959 --> 00:12:45,760
router because you know that keeps

00:12:44,639 --> 00:12:49,839
people more happy with

00:12:45,760 --> 00:12:53,120
tech support you know what i mean okay

00:12:49,839 --> 00:12:54,000
now this file we're delving into the

00:12:53,120 --> 00:12:55,680
kernel a bit

00:12:54,000 --> 00:12:57,440
i won't cover this in detail but there's

00:12:55,680 --> 00:13:00,480
a couple of things there

00:12:57,440 --> 00:13:03,200
as it turns out by default the

00:13:00,480 --> 00:13:05,200
linux kernel is not actually that well

00:13:03,200 --> 00:13:06,800
tuned as far as networking is concerned

00:13:05,200 --> 00:13:08,399
there's some number of things that are

00:13:06,800 --> 00:13:11,279
extremely slack

00:13:08,399 --> 00:13:13,200
and awkward and they will not be able to

00:13:11,279 --> 00:13:14,399
deal necessarily with high traffic in an

00:13:13,200 --> 00:13:16,240
efficient way

00:13:14,399 --> 00:13:17,600
if there's any kind of flood on your

00:13:16,240 --> 00:13:18,079
environment you're going to be in

00:13:17,600 --> 00:13:21,120
trouble

00:13:18,079 --> 00:13:23,040
so the first thing we need to do is give

00:13:21,120 --> 00:13:25,440
the kernel a bit of memory to play with

00:13:23,040 --> 00:13:26,399
but also reduce a number of timers and

00:13:25,440 --> 00:13:30,160
counters

00:13:26,399 --> 00:13:32,880
so that they don't do nasty things

00:13:30,160 --> 00:13:34,560
so in net filter there's you know if

00:13:32,880 --> 00:13:37,839
there's an established connection

00:13:34,560 --> 00:13:41,360
before it gets you know taken out

00:13:37,839 --> 00:13:43,279
it's for sleeping half an hour you might

00:13:41,360 --> 00:13:45,760
even may want to make that longer

00:13:43,279 --> 00:13:47,279
all these though we set into 10 or 20

00:13:45,760 --> 00:13:48,399
seconds so that means at the end of a

00:13:47,279 --> 00:13:48,959
connection when the connection gets

00:13:48,399 --> 00:13:50,880
closed

00:13:48,959 --> 00:13:52,639
it'll just wait 10 or 20 seconds before

00:13:50,880 --> 00:13:54,639
making it really really disappear

00:13:52,639 --> 00:13:55,839
and that makes things much nicer that

00:13:54,639 --> 00:13:57,600
means there's fewer

00:13:55,839 --> 00:13:59,120
lingering connections in your netstat

00:13:57,600 --> 00:14:01,839
okay

00:13:59,120 --> 00:14:03,600
this one is what i regard as a doozy i

00:14:01,839 --> 00:14:05,760
haven't fully figured out what it does

00:14:03,600 --> 00:14:06,959
but what it appears to do by default

00:14:05,760 --> 00:14:09,839
it's set to on

00:14:06,959 --> 00:14:11,279
it's weird you know how at the start of

00:14:09,839 --> 00:14:13,839
a tcp connection

00:14:11,279 --> 00:14:14,959
you have to send a sin that can't

00:14:13,839 --> 00:14:18,000
acknowledge it's in

00:14:14,959 --> 00:14:19,760
act and then another act gets sent and

00:14:18,000 --> 00:14:23,120
then an act gets

00:14:19,760 --> 00:14:24,480
returned and as it turns out the colonel

00:14:23,120 --> 00:14:26,079
doesn't actually care for any of that

00:14:24,480 --> 00:14:27,199
it's quite happy for you to just be

00:14:26,079 --> 00:14:30,720
talking

00:14:27,199 --> 00:14:33,760
or start talking skipping all those bits

00:14:30,720 --> 00:14:34,399
and net filter will just a contract will

00:14:33,760 --> 00:14:36,399
just pick

00:14:34,399 --> 00:14:38,079
up the connection as if it just

00:14:36,399 --> 00:14:40,560
magically was established

00:14:38,079 --> 00:14:42,000
of course this is a hideously bad idea

00:14:40,560 --> 00:14:42,959
when you're trying to run a router that

00:14:42,000 --> 00:14:45,360
gets rid of crap

00:14:42,959 --> 00:14:47,600
because this particularly will get

00:14:45,360 --> 00:14:51,040
abused by people producing crap

00:14:47,600 --> 00:14:52,240
so set it to zero we actually want a sin

00:14:51,040 --> 00:14:53,920
egg handshake

00:14:52,240 --> 00:14:55,680
and you know it might take a couple of

00:14:53,920 --> 00:14:58,560
microseconds but who cares

00:14:55,680 --> 00:15:01,040
it's really not a problem all right keep

00:14:58,560 --> 00:15:01,040
them going

00:15:01,760 --> 00:15:05,199
number of other timers and intervals and

00:15:04,000 --> 00:15:08,079
thresholds

00:15:05,199 --> 00:15:09,519
the rp filter equals two i've required

00:15:08,079 --> 00:15:12,800
in some cases

00:15:09,519 --> 00:15:14,560
for vpns because

00:15:12,800 --> 00:15:16,480
packets that for a particular network go

00:15:14,560 --> 00:15:18,399
outbound via a particular port

00:15:16,480 --> 00:15:20,320
may not actually come back via the same

00:15:18,399 --> 00:15:22,240
port this can happen if you run

00:15:20,320 --> 00:15:24,240
a vpn over your external port and things

00:15:22,240 --> 00:15:26,320
come back outside of the vpn

00:15:24,240 --> 00:15:28,240
it could happen if you don't have that

00:15:26,320 --> 00:15:29,600
problem just set these settings to one

00:15:28,240 --> 00:15:31,680
but if you find that you're not actually

00:15:29,600 --> 00:15:33,680
seeing your own data pack set it to two

00:15:31,680 --> 00:15:36,800
or make sure your vpn actually behaves

00:15:33,680 --> 00:15:39,680
okay and secure redirects

00:15:36,800 --> 00:15:40,880
just means that rcmp redirect will work

00:15:39,680 --> 00:15:42,880
on your internal network

00:15:40,880 --> 00:15:44,000
but only for published gateways within

00:15:42,880 --> 00:15:46,000
your network

00:15:44,000 --> 00:15:48,000
and local martians i love martians i

00:15:46,000 --> 00:15:51,199
just don't want to see them

00:15:48,000 --> 00:15:53,440
martians are packets that come

00:15:51,199 --> 00:15:54,480
in on the wrong interface so it's an

00:15:53,440 --> 00:15:57,839
address

00:15:54,480 --> 00:15:59,600
that you that is known to your router

00:15:57,839 --> 00:16:01,519
but it actually comes in on the wrong

00:15:59,600 --> 00:16:02,880
interface you want to know about those

00:16:01,519 --> 00:16:04,079
because sometimes it can indicate a

00:16:02,880 --> 00:16:06,720
misconfiguration

00:16:04,079 --> 00:16:07,680
on your system um and when they're

00:16:06,720 --> 00:16:10,079
logged they ended up

00:16:07,680 --> 00:16:11,600
end up in syslog as a martian and that

00:16:10,079 --> 00:16:13,600
is actually very useful

00:16:11,600 --> 00:16:15,519
i actually spotted some last week and

00:16:13,600 --> 00:16:18,320
that was very helpful for me to

00:16:15,519 --> 00:16:18,639
solve an issue i p forward make sure

00:16:18,320 --> 00:16:20,160
that

00:16:18,639 --> 00:16:22,240
the system knows where router that's

00:16:20,160 --> 00:16:24,320
quite important what i haven't mentioned

00:16:22,240 --> 00:16:25,360
yet i'm not talking about ipv6 because

00:16:24,320 --> 00:16:28,639
lack of time

00:16:25,360 --> 00:16:31,120
some of it isn't set up yet on my end

00:16:28,639 --> 00:16:34,720
but the basics are actually identical

00:16:31,120 --> 00:16:37,440
many of these things just get copied

00:16:34,720 --> 00:16:38,480
so what i'm now going to do is discuss

00:16:37,440 --> 00:16:42,480
some more settings

00:16:38,480 --> 00:16:43,839
again this is the base um

00:16:42,480 --> 00:16:45,680
you know the variable name the

00:16:43,839 --> 00:16:48,639
configuration name inside

00:16:45,680 --> 00:16:48,959
the cctl and then after that will be the

00:16:48,639 --> 00:16:50,079
dot

00:16:48,959 --> 00:16:51,519
and so on with the rest of the

00:16:50,079 --> 00:16:52,240
parameters so all of these parameters

00:16:51,519 --> 00:16:55,440
have the same

00:16:52,240 --> 00:16:55,440
baseline there

00:16:56,959 --> 00:17:00,480
so all of those things are there so this

00:16:59,920 --> 00:17:02,320
is the

00:17:00,480 --> 00:17:05,120
idea what we're trying to tune it a bit

00:17:02,320 --> 00:17:05,439
better now as i mentioned some of these

00:17:05,120 --> 00:17:07,919
i

00:17:05,439 --> 00:17:09,600
don't actually know in detail what they

00:17:07,919 --> 00:17:12,640
do smart people than i

00:17:09,600 --> 00:17:14,400
have put these together in the

00:17:12,640 --> 00:17:16,160
information that i put on github i'll

00:17:14,400 --> 00:17:19,120
put full credits it just i didn't want

00:17:16,160 --> 00:17:20,640
to clutter the slides anymore

00:17:19,120 --> 00:17:22,319
if you have more information about any

00:17:20,640 --> 00:17:23,600
of these things that would be awesome if

00:17:22,319 --> 00:17:27,360
there's anything i can toss

00:17:23,600 --> 00:17:30,880
out that would be fabulous too okay

00:17:27,360 --> 00:17:33,440
more stuff and i'll mention a couple of

00:17:30,880 --> 00:17:36,799
things along the way

00:17:33,440 --> 00:17:38,400
there's information here how many times

00:17:36,799 --> 00:17:41,600
you know when you receive a sin

00:17:38,400 --> 00:17:42,880
from another server trying to open a tcp

00:17:41,600 --> 00:17:46,559
connection

00:17:42,880 --> 00:17:48,880
we will send the synag back once

00:17:46,559 --> 00:17:50,559
that's fine by default it will try to

00:17:48,880 --> 00:17:52,080
send it back a number of times because

00:17:50,559 --> 00:17:53,760
it's set to two or three by default or

00:17:52,080 --> 00:17:57,200
even five i forget

00:17:53,760 --> 00:17:58,000
the problem is that these things are

00:17:57,200 --> 00:18:00,559
spoofed

00:17:58,000 --> 00:18:01,600
ip spoofing is used so the sim that you

00:18:00,559 --> 00:18:05,039
receive

00:18:01,600 --> 00:18:05,919
is often not actually sent by the ip

00:18:05,039 --> 00:18:07,280
address

00:18:05,919 --> 00:18:09,520
that it says it comes from so you

00:18:07,280 --> 00:18:11,520
continuing to reply to it

00:18:09,520 --> 00:18:13,120
asking it to continue and please set up

00:18:11,520 --> 00:18:16,960
the connection is useless

00:18:13,120 --> 00:18:19,200
okay so we just set it to retry once

00:18:16,960 --> 00:18:20,320
if it doesn't if you know if it doesn't

00:18:19,200 --> 00:18:21,760
work tough luck

00:18:20,320 --> 00:18:23,440
usually our connections are good enough

00:18:21,760 --> 00:18:24,640
that it works the first time all the

00:18:23,440 --> 00:18:26,720
spoofed ones will

00:18:24,640 --> 00:18:28,320
cost us less time same with stingray

00:18:26,720 --> 00:18:30,799
twice we only tried to send

00:18:28,320 --> 00:18:32,160
twice outbound and and just reduce the

00:18:30,799 --> 00:18:34,640
missed day and otherwise we know there's

00:18:32,160 --> 00:18:37,679
a bad connection we'd like to hear back

00:18:34,640 --> 00:18:40,559
timestamp equals zero gets rid of

00:18:37,679 --> 00:18:41,440
timestamp exposure on your external

00:18:40,559 --> 00:18:44,559
connections

00:18:41,440 --> 00:18:45,679
um if you want to set it for one you

00:18:44,559 --> 00:18:47,600
might need that would

00:18:45,679 --> 00:18:49,280
for um for sin proxy and some other

00:18:47,600 --> 00:18:51,600
things i'll mention

00:18:49,280 --> 00:18:52,640
i have it at zero usually just to to

00:18:51,600 --> 00:18:56,160
keep my logs again

00:18:52,640 --> 00:18:57,200
clear in import scans and again a couple

00:18:56,160 --> 00:19:00,480
of timeouts

00:18:57,200 --> 00:19:02,720
reducing the miss okay

00:19:00,480 --> 00:19:03,840
now this slide you don't have to take in

00:19:02,720 --> 00:19:07,280
i don't either

00:19:03,840 --> 00:19:08,080
however the main point is ip tables and

00:19:07,280 --> 00:19:10,720
net filter

00:19:08,080 --> 00:19:12,240
are very you could say complex they're

00:19:10,720 --> 00:19:14,320
extensive

00:19:12,240 --> 00:19:15,840
it does a lot and there's a lot of

00:19:14,320 --> 00:19:17,840
things happening in different places i

00:19:15,840 --> 00:19:19,360
do love this diagram because it enables

00:19:17,840 --> 00:19:21,840
me to actually see

00:19:19,360 --> 00:19:23,120
visually and i'm a visual person see

00:19:21,840 --> 00:19:24,960
where things are happening

00:19:23,120 --> 00:19:27,120
why do i need to put things in a certain

00:19:24,960 --> 00:19:29,840
spot to make it work properly

00:19:27,120 --> 00:19:31,200
and you know keep it in the right place

00:19:29,840 --> 00:19:34,080
and make sure it actually does the right

00:19:31,200 --> 00:19:36,000
thing in all the right context

00:19:34,080 --> 00:19:37,679
and you can use this as a reference

00:19:36,000 --> 00:19:39,919
point when looking later at some of the

00:19:37,679 --> 00:19:42,640
bits i say i need to do it here

00:19:39,919 --> 00:19:46,240
this is the reason why okay some things

00:19:42,640 --> 00:19:49,760
are not possible in all locations

00:19:46,240 --> 00:19:52,799
so yes it's extensive

00:19:49,760 --> 00:19:54,320
so cloud fire has good very good advice

00:19:52,799 --> 00:19:55,039
you know how to drop a million packets a

00:19:54,320 --> 00:19:57,120
second they

00:19:55,039 --> 00:19:58,080
do that stuff they do that stuff all the

00:19:57,120 --> 00:20:00,000
time

00:19:58,080 --> 00:20:01,679
the tables that i'm going to be dealing

00:20:00,000 --> 00:20:04,640
with is the raw

00:20:01,679 --> 00:20:05,520
table mangle table filter table and the

00:20:04,640 --> 00:20:08,400
net table

00:20:05,520 --> 00:20:09,280
okay now my rule is the less noise i let

00:20:08,400 --> 00:20:11,600
in the less

00:20:09,280 --> 00:20:13,280
let in the less noise i have to monitor

00:20:11,600 --> 00:20:17,440
i want to be logging

00:20:13,280 --> 00:20:20,320
at first what i will be dropping so

00:20:17,440 --> 00:20:21,440
i can look at it for a while even if i'm

00:20:20,320 --> 00:20:23,120
dropping it

00:20:21,440 --> 00:20:24,559
and then i know it's actually doing the

00:20:23,120 --> 00:20:26,720
right thing and i can take corrective

00:20:24,559 --> 00:20:29,120
action

00:20:26,720 --> 00:20:30,799
then after a while i actually might stop

00:20:29,120 --> 00:20:32,880
logging certain things

00:20:30,799 --> 00:20:34,400
again to reduce the noise in my logs and

00:20:32,880 --> 00:20:34,640
make sure that the things that do show

00:20:34,400 --> 00:20:37,440
up

00:20:34,640 --> 00:20:39,520
are of interest to me i regularly grip

00:20:37,440 --> 00:20:41,520
around in my syslog or elsewhere to

00:20:39,520 --> 00:20:43,360
to see what i'm doing there's a

00:20:41,520 --> 00:20:45,520
wonderful tool that cloudfarersgang

00:20:43,360 --> 00:20:46,799
created called mm watch you're probably

00:20:45,520 --> 00:20:49,679
familiar with watch

00:20:46,799 --> 00:20:50,960
already you know it's it runs a command

00:20:49,679 --> 00:20:52,640
every so many seconds

00:20:50,960 --> 00:20:54,640
and you can run it through a pipe and

00:20:52,640 --> 00:20:57,600
and grip around it in it and so on

00:20:54,640 --> 00:20:59,760
so um it actually gives you a nice you

00:20:57,600 --> 00:21:03,120
know status screen essentially

00:20:59,760 --> 00:21:05,679
the mm watch does the same thing

00:21:03,120 --> 00:21:07,760
but specifically it knows what the

00:21:05,679 --> 00:21:11,600
output of ip tables looks like

00:21:07,760 --> 00:21:14,640
and it can actually display the counters

00:21:11,600 --> 00:21:16,240
it can overlay the counters with a

00:21:14,640 --> 00:21:18,000
so many package per second or so many

00:21:16,240 --> 00:21:20,080
bytes per second so you can actually mo

00:21:18,000 --> 00:21:21,919
in more detail see what's going on it's

00:21:20,080 --> 00:21:22,960
very slick and i i like it i don't have

00:21:21,919 --> 00:21:24,799
a screenshot of it

00:21:22,960 --> 00:21:26,640
right now if you have time spare i can

00:21:24,799 --> 00:21:29,919
show you live but

00:21:26,640 --> 00:21:32,400
chances are slim okay syn proxy or not

00:21:29,919 --> 00:21:35,440
i'm not using it at the moment what it

00:21:32,400 --> 00:21:38,640
does is actually

00:21:35,440 --> 00:21:40,240
when you run a tcp connection the router

00:21:38,640 --> 00:21:43,280
would actually proxy it

00:21:40,240 --> 00:21:44,559
towards any things on the well let's say

00:21:43,280 --> 00:21:46,240
on the local switch

00:21:44,559 --> 00:21:48,240
so your router is actually sitting in

00:21:46,240 --> 00:21:51,280
between and then it creates a separate

00:21:48,240 --> 00:21:52,000
tcp connection internally effectively so

00:21:51,280 --> 00:21:54,320
that can

00:21:52,000 --> 00:21:56,400
reduce possible risk for your internal

00:21:54,320 --> 00:21:58,240
systems by the router sitting in between

00:21:56,400 --> 00:22:00,159
because it is slightly more control than

00:21:58,240 --> 00:22:02,240
your other systems possibly

00:22:00,159 --> 00:22:03,919
um i didn't get very far with that it

00:22:02,240 --> 00:22:06,559
didn't seem to be doing much for me

00:22:03,919 --> 00:22:08,159
um you know mileage may vary for you

00:22:06,559 --> 00:22:09,360
maybe you have more information about it

00:22:08,159 --> 00:22:11,280
we can

00:22:09,360 --> 00:22:12,720
we can add more information to the to

00:22:11,280 --> 00:22:15,840
the github repo there so

00:22:12,720 --> 00:22:17,200
i won't go further into that okay what

00:22:15,840 --> 00:22:20,320
do i do to do the logging

00:22:17,200 --> 00:22:22,880
i have a couple of this set up

00:22:20,320 --> 00:22:24,320
in my ip tables it's like this they're

00:22:22,880 --> 00:22:26,240
not all like this they're named

00:22:24,320 --> 00:22:28,559
differently

00:22:26,240 --> 00:22:29,280
m is for the mangle table i have

00:22:28,559 --> 00:22:31,760
different

00:22:29,280 --> 00:22:33,280
naming for the different tables pre for

00:22:31,760 --> 00:22:35,840
pre-routing post-proposed routing

00:22:33,280 --> 00:22:37,360
forward for forward and so on

00:22:35,840 --> 00:22:39,440
so when you see them later i won't

00:22:37,360 --> 00:22:40,000
mention again that they're actually

00:22:39,440 --> 00:22:41,840
going to be

00:22:40,000 --> 00:22:43,200
logging and then dropping when it says

00:22:41,840 --> 00:22:45,760
log drop i mean

00:22:43,200 --> 00:22:46,640
this particular construct and it will

00:22:45,760 --> 00:22:48,240
log

00:22:46,640 --> 00:22:50,320
well into this logo wherever you want to

00:22:48,240 --> 00:22:52,480
be logging them you can redirect that

00:22:50,320 --> 00:22:54,000
to other places because it comes from

00:22:52,480 --> 00:22:55,600
the kernel from iptables you can

00:22:54,000 --> 00:22:56,400
actually set it on up to its own log if

00:22:55,600 --> 00:22:59,280
you want

00:22:56,400 --> 00:23:00,080
it says to for me i do have it in just

00:22:59,280 --> 00:23:03,280
straight syslog

00:23:00,080 --> 00:23:05,520
iptables and then that command

00:23:03,280 --> 00:23:06,320
that prefix just like it has here so i

00:23:05,520 --> 00:23:09,440
can tell

00:23:06,320 --> 00:23:10,480
where a particular drop packet was when

00:23:09,440 --> 00:23:12,720
it was dropped

00:23:10,480 --> 00:23:13,919
where in ip tables that happen and if

00:23:12,720 --> 00:23:17,360
you want to limit

00:23:13,919 --> 00:23:18,720
things which i usually do i limit it to

00:23:17,360 --> 00:23:20,000
for instance three per minute with a

00:23:18,720 --> 00:23:22,880
little bit of burst extra

00:23:20,000 --> 00:23:23,360
okay all righty so the first thing we're

00:23:22,880 --> 00:23:26,559
doing

00:23:23,360 --> 00:23:28,159
is pre-routing in the mangle table

00:23:26,559 --> 00:23:29,440
the mangle table is one of the first

00:23:28,159 --> 00:23:31,039
things that gets looked at and

00:23:29,440 --> 00:23:32,400
pre-routing again is one of the first

00:23:31,039 --> 00:23:35,360
things that got looked at

00:23:32,400 --> 00:23:37,280
and that means that it follows that rule

00:23:35,360 --> 00:23:38,080
of cloudfare where dropping things

00:23:37,280 --> 00:23:40,880
earlier

00:23:38,080 --> 00:23:42,080
is better because iptables can do very

00:23:40,880 --> 00:23:43,600
very complex things

00:23:42,080 --> 00:23:46,559
particularly when you get into contract

00:23:43,600 --> 00:23:49,039
it starts choosing cpu power

00:23:46,559 --> 00:23:50,559
so the earlier you drop things that you

00:23:49,039 --> 00:23:51,679
don't have to worry about it and that's

00:23:50,559 --> 00:23:54,159
why we're trying to keep

00:23:51,679 --> 00:23:55,520
the fewest possible connections things

00:23:54,159 --> 00:23:58,240
needing to be tracked

00:23:55,520 --> 00:23:59,360
and so on so we don't need to deal with

00:23:58,240 --> 00:24:01,120
it like that

00:23:59,360 --> 00:24:02,480
and here are a couple of my counters and

00:24:01,120 --> 00:24:04,240
that shows you

00:24:02,480 --> 00:24:05,600
is that particular setting actually

00:24:04,240 --> 00:24:07,840
having effect

00:24:05,600 --> 00:24:09,919
so rather than doing a whole complicated

00:24:07,840 --> 00:24:13,200
thing which you often see on you know

00:24:09,919 --> 00:24:16,000
stack overflow and other places about um

00:24:13,200 --> 00:24:16,720
which flags i've set in my tcp packet

00:24:16,000 --> 00:24:18,720
i've dropped

00:24:16,720 --> 00:24:20,080
all of that and i only check for state

00:24:18,720 --> 00:24:22,240
invalid

00:24:20,080 --> 00:24:24,400
state invalid works fine and see how

00:24:22,240 --> 00:24:25,840
many packets it actually drops

00:24:24,400 --> 00:24:27,919
so the first item is packet drop the

00:24:25,840 --> 00:24:30,640
second item is bytes dropped

00:24:27,919 --> 00:24:32,720
so you know 25 megs of data have just

00:24:30,640 --> 00:24:36,720
been dropped and it's gone

00:24:32,720 --> 00:24:39,440
okay then if it's a new connection

00:24:36,720 --> 00:24:40,320
i want only the syn flag to be set

00:24:39,440 --> 00:24:42,480
otherwise

00:24:40,320 --> 00:24:44,080
again i don't want to be talking to you

00:24:42,480 --> 00:24:45,600
because it's going to be something wacky

00:24:44,080 --> 00:24:47,600
that you shouldn't be doing

00:24:45,600 --> 00:24:50,080
that ideas weirdly sized packets that

00:24:47,600 --> 00:24:51,039
are much smaller or much larger than

00:24:50,080 --> 00:24:53,840
they need to be

00:24:51,039 --> 00:24:55,440
i drop them related i don't use it

00:24:53,840 --> 00:24:58,640
anymore because we don't have

00:24:55,440 --> 00:24:59,600
ftp and i have separate firewall rules

00:24:58,640 --> 00:25:04,240
for my sip

00:24:59,600 --> 00:25:06,880
phone okay related is a dangerous thing

00:25:04,240 --> 00:25:09,440
contract has all kind of wacky things

00:25:06,880 --> 00:25:10,799
and you get things like net slip

00:25:09,440 --> 00:25:13,520
streaming

00:25:10,799 --> 00:25:14,559
effects because the colonel tries to

00:25:13,520 --> 00:25:16,240
figure out

00:25:14,559 --> 00:25:18,559
what connections might be related to

00:25:16,240 --> 00:25:21,679
others and the answer from my end is

00:25:18,559 --> 00:25:24,159
none okay so we just ditched that so

00:25:21,679 --> 00:25:25,600
the one that i don't actually see but

00:25:24,159 --> 00:25:27,840
i've just left it because it seems to be

00:25:25,600 --> 00:25:29,200
harmless is dropping anything fragmented

00:25:27,840 --> 00:25:31,360
there shouldn't be anything fragmented

00:25:29,200 --> 00:25:33,520
on my external

00:25:31,360 --> 00:25:35,039
interface so i can just drop it without

00:25:33,520 --> 00:25:38,240
further looking at it

00:25:35,039 --> 00:25:39,600
i'll talk more about the m-block bit and

00:25:38,240 --> 00:25:41,360
outbound sanity

00:25:39,600 --> 00:25:42,640
is handled by that particular line it

00:25:41,360 --> 00:25:44,720
just makes sure

00:25:42,640 --> 00:25:46,080
that when i send things back over my

00:25:44,720 --> 00:25:48,720
internet connection

00:25:46,080 --> 00:25:50,159
it's actually clamped within the proper

00:25:48,720 --> 00:25:52,400
the proper frame length

00:25:50,159 --> 00:25:54,720
so to not cause any trouble and it does

00:25:52,400 --> 00:25:57,360
that when it opens a tcp

00:25:54,720 --> 00:25:57,760
connection you know at the same state

00:25:57,360 --> 00:26:01,120
there

00:25:57,760 --> 00:26:02,400
at the same stage sorry okay so this is

00:26:01,120 --> 00:26:04,320
m block

00:26:02,400 --> 00:26:06,000
and that's where it's things as far as

00:26:04,320 --> 00:26:08,720
i'm concerned start getting interesting

00:26:06,000 --> 00:26:09,440
so what i want to allow is for instance

00:26:08,720 --> 00:26:13,039
everything

00:26:09,440 --> 00:26:14,159
from kingdom because i do use pingdom

00:26:13,039 --> 00:26:17,600
for some other

00:26:14,159 --> 00:26:19,279
historical reasons and they provide a

00:26:17,600 --> 00:26:20,960
list of ip addresses that they will come

00:26:19,279 --> 00:26:22,320
from it's not networks it's actually a

00:26:20,960 --> 00:26:25,520
list of addresses

00:26:22,320 --> 00:26:27,919
and that works perfectly fine so if this

00:26:25,520 --> 00:26:28,640
if this block if this target actually

00:26:27,919 --> 00:26:31,200
returns

00:26:28,640 --> 00:26:32,640
it allows something through and at the

00:26:31,200 --> 00:26:35,679
end you will see that everything else

00:26:32,640 --> 00:26:37,760
drops you can allow

00:26:35,679 --> 00:26:38,720
particular friendly ip addresses in your

00:26:37,760 --> 00:26:42,400
environment

00:26:38,720 --> 00:26:43,279
here i would be saying be more selective

00:26:42,400 --> 00:26:46,480
than that

00:26:43,279 --> 00:26:48,720
but you know this is a rough idea to

00:26:46,480 --> 00:26:50,240
to tell you where where you can be

00:26:48,720 --> 00:26:52,240
heading with your

00:26:50,240 --> 00:26:53,440
with this kind of setup and then i do

00:26:52,240 --> 00:26:56,400
some geo blocking

00:26:53,440 --> 00:26:57,120
so as it turns out many networks many

00:26:56,400 --> 00:26:59,600
countries

00:26:57,120 --> 00:27:00,480
produce a lot of noise and this is my

00:26:59,600 --> 00:27:03,440
home router

00:27:00,480 --> 00:27:04,080
i don't need to get inbound connections

00:27:03,440 --> 00:27:05,840
from

00:27:04,080 --> 00:27:07,200
country x it doesn't matter which one it

00:27:05,840 --> 00:27:09,440
is so

00:27:07,200 --> 00:27:11,440
um and that includes for instance the us

00:27:09,440 --> 00:27:12,799
the us is a very noisy country the

00:27:11,440 --> 00:27:16,640
number of

00:27:12,799 --> 00:27:19,600
things that have outbound connections to

00:27:16,640 --> 00:27:21,120
to wherever it can be trying things on

00:27:19,600 --> 00:27:22,559
is just ridiculous and then of course

00:27:21,120 --> 00:27:23,520
there's the russians the chinese and

00:27:22,559 --> 00:27:26,559
everyone else

00:27:23,520 --> 00:27:28,240
but the basic fact is block them all and

00:27:26,559 --> 00:27:29,679
only allow the bits that you

00:27:28,240 --> 00:27:32,640
have in i actually have a couple more

00:27:29,679 --> 00:27:35,279
countries set up historically

00:27:32,640 --> 00:27:36,000
to see what kind of traffic they produce

00:27:35,279 --> 00:27:37,919
and then uh

00:27:36,000 --> 00:27:39,679
and i dropped them but then it creates

00:27:37,919 --> 00:27:42,000
these counters so

00:27:39,679 --> 00:27:43,679
um in my earlier setup i had the us and

00:27:42,000 --> 00:27:44,880
china and russia and you can just keep a

00:27:43,679 --> 00:27:48,559
nice eye on it

00:27:44,880 --> 00:27:51,440
um where i get these block lists i'll

00:27:48,559 --> 00:27:52,399
show you in a bit let's encrypt is a bit

00:27:51,440 --> 00:27:54,000
of an issue

00:27:52,399 --> 00:27:55,840
let's encrypt doesn't want to give a

00:27:54,000 --> 00:27:58,320
list of ip addresses

00:27:55,840 --> 00:27:59,840
um but i think what we should be able to

00:27:58,320 --> 00:28:00,640
do particularly if we can work together

00:27:59,840 --> 00:28:03,679
on this

00:28:00,640 --> 00:28:07,200
is a couple of autonomous networks

00:28:03,679 --> 00:28:08,720
um that where these people come from

00:28:07,200 --> 00:28:10,480
because inevitably they're gonna come

00:28:08,720 --> 00:28:11,760
from a couple of different data centers

00:28:10,480 --> 00:28:14,960
and a couple of different providers

00:28:11,760 --> 00:28:17,360
which means that they will have that

00:28:14,960 --> 00:28:18,960
that facility um you know that they

00:28:17,360 --> 00:28:20,399
won't be in that many different ip

00:28:18,960 --> 00:28:20,720
networks we should be able to figure it

00:28:20,399 --> 00:28:22,640
out

00:28:20,720 --> 00:28:23,919
a bit rougher than i'd like but it will

00:28:22,640 --> 00:28:27,200
do um

00:28:23,919 --> 00:28:29,600
full bogons um bogons

00:28:27,200 --> 00:28:30,880
are invalid network ranges some network

00:28:29,600 --> 00:28:33,600
ranges that are not actually

00:28:30,880 --> 00:28:35,039
allocated on the internet therefore now

00:28:33,600 --> 00:28:35,919
traffic can come from them might as well

00:28:35,039 --> 00:28:38,399
drop it

00:28:35,919 --> 00:28:39,200
that's not going to do anything good

00:28:38,399 --> 00:28:40,640
also

00:28:39,200 --> 00:28:42,960
when you're seeing an external

00:28:40,640 --> 00:28:44,240
connection 192.168

00:28:42,960 --> 00:28:46,480
shouldn't actually appear on your

00:28:44,240 --> 00:28:47,279
external network okay so you can drop

00:28:46,480 --> 00:28:49,600
that as well

00:28:47,279 --> 00:28:51,679
and everything else by buying you see

00:28:49,600 --> 00:28:52,559
plenty bye bye so this is all those

00:28:51,679 --> 00:28:54,399
other countries

00:28:52,559 --> 00:28:56,880
that are trying to send me stuff and

00:28:54,399 --> 00:29:00,559
this is 216 megabytes

00:28:56,880 --> 00:29:02,559
just garbage okay so

00:29:00,559 --> 00:29:05,760
you may have noticed ipset is our friend

00:29:02,559 --> 00:29:08,399
these are the things i use to get my

00:29:05,760 --> 00:29:10,240
my filter feeds some of those are lists

00:29:08,399 --> 00:29:13,120
of ip addresses some of those are lists

00:29:10,240 --> 00:29:16,000
of networks okay with subnets

00:29:13,120 --> 00:29:17,039
so you either need to do hash ip or hash

00:29:16,000 --> 00:29:20,960
net

00:29:17,039 --> 00:29:24,240
you create an ip set for that particular

00:29:20,960 --> 00:29:28,559
zone or country and set that up there

00:29:24,240 --> 00:29:32,159
the family's or or in inat six of course

00:29:28,559 --> 00:29:35,600
um this time out is 30 days

00:29:32,159 --> 00:29:37,200
and um we'd like counters and with

00:29:35,600 --> 00:29:39,279
counters you don't have to do either of

00:29:37,200 --> 00:29:40,320
these if you don't have that timeout

00:29:39,279 --> 00:29:42,640
they'll stay forever

00:29:40,320 --> 00:29:44,240
but i let them time out and then every

00:29:42,640 --> 00:29:47,039
week

00:29:44,240 --> 00:29:48,000
so the country is 30 days but every week

00:29:47,039 --> 00:29:50,720
i

00:29:48,000 --> 00:29:51,919
reload them so the ones when an ip

00:29:50,720 --> 00:29:55,279
address drops out

00:29:51,919 --> 00:29:56,960
of a list it vanishes within 30 days by

00:29:55,279 --> 00:29:58,399
itself i don't have to do

00:29:56,960 --> 00:30:00,159
particular cleanup that's just to make

00:29:58,399 --> 00:30:02,960
it life easier for me

00:30:00,159 --> 00:30:04,080
the counters mean that the entries are

00:30:02,960 --> 00:30:05,840
individually counted

00:30:04,080 --> 00:30:07,600
either on ip address or subnet and that

00:30:05,840 --> 00:30:09,679
means you can have a look at your ip set

00:30:07,600 --> 00:30:11,279
and see which ones actually get hit if

00:30:09,679 --> 00:30:12,880
you want to track things specifically if

00:30:11,279 --> 00:30:15,919
you want to map it on a

00:30:12,880 --> 00:30:16,960
on some um yeah actually map it visually

00:30:15,919 --> 00:30:19,120
that is all doable

00:30:16,960 --> 00:30:21,120
so you can just read those into ipsec

00:30:19,120 --> 00:30:22,559
that is a bloody slow process we can

00:30:21,120 --> 00:30:23,840
probably optimize that by writing a

00:30:22,559 --> 00:30:25,760
little script for it

00:30:23,840 --> 00:30:28,399
that that does a kernel call rather than

00:30:25,760 --> 00:30:30,240
a rather than ib set on the command line

00:30:28,399 --> 00:30:32,240
this is not efficient this takes

00:30:30,240 --> 00:30:35,840
you know 10 15 minutes for a couple of

00:30:32,240 --> 00:30:39,679
lists but it does work

00:30:35,840 --> 00:30:42,960
righty this is my input table

00:30:39,679 --> 00:30:44,240
um the default first of all is drop

00:30:42,960 --> 00:30:47,279
and then there's a couple of things i

00:30:44,240 --> 00:30:49,360
accept things on the local on my local

00:30:47,279 --> 00:30:52,159
interface i accept because some things

00:30:49,360 --> 00:30:54,159
happen there things on my local

00:30:52,159 --> 00:30:55,840
lan interface i accept at the moment

00:30:54,159 --> 00:30:57,200
maybe i want to be a bit more careful

00:30:55,840 --> 00:30:58,720
with that because

00:30:57,200 --> 00:31:00,240
you know my kids have a couple of window

00:30:58,720 --> 00:31:01,919
machines on that network i do have them

00:31:00,240 --> 00:31:03,279
segregated but maybe i want to be a bit

00:31:01,919 --> 00:31:06,000
more careful there that they can't just

00:31:03,279 --> 00:31:07,679
connect to everything else

00:31:06,000 --> 00:31:10,720
and they shouldn't be able to connect

00:31:07,679 --> 00:31:12,480
between them as well i would think

00:31:10,720 --> 00:31:13,840
so you know further restrictions are

00:31:12,480 --> 00:31:15,679
possible i could

00:31:13,840 --> 00:31:17,039
i've got a fairly smart switch i could

00:31:15,679 --> 00:31:18,000
make sure that that switch doesn't

00:31:17,039 --> 00:31:20,080
actually allow

00:31:18,000 --> 00:31:21,760
communication between the systems they

00:31:20,080 --> 00:31:22,799
only allow that fire the router is

00:31:21,760 --> 00:31:25,039
possible

00:31:22,799 --> 00:31:26,080
then i accept anything that's already

00:31:25,039 --> 00:31:28,960
established again

00:31:26,080 --> 00:31:30,880
i'm not allowing here i'm not allowing

00:31:28,960 --> 00:31:32,799
related connections i'm only allowing

00:31:30,880 --> 00:31:35,919
established connections

00:31:32,799 --> 00:31:38,720
i'm allowing ssh and mosh

00:31:35,919 --> 00:31:39,760
this is these the mosh ports from the

00:31:38,720 --> 00:31:42,799
local network

00:31:39,760 --> 00:31:45,120
but they're also allowed from the vpn

00:31:42,799 --> 00:31:46,480
connections so what i've done is i've

00:31:45,120 --> 00:31:48,480
changed the interfacing

00:31:46,480 --> 00:31:50,799
to basically say anything that is not

00:31:48,480 --> 00:31:52,399
from the public internet i'm allowing

00:31:50,799 --> 00:31:55,120
perhaps not as restrictive as it should

00:31:52,399 --> 00:31:57,120
be but you get the idea

00:31:55,120 --> 00:31:58,559
so what can we do with pings well pings

00:31:57,120 --> 00:32:00,480
can actually cause a lot of blood to

00:31:58,559 --> 00:32:02,880
create a lot of noise these

00:32:00,480 --> 00:32:05,120
i understand and actual pink packets

00:32:02,880 --> 00:32:07,440
they're pinging and ping responses

00:32:05,120 --> 00:32:09,120
and a couple of notifications those are

00:32:07,440 --> 00:32:10,799
the ones you actually should be letting

00:32:09,120 --> 00:32:12,559
through

00:32:10,799 --> 00:32:14,000
they're useful there's nothing wrong

00:32:12,559 --> 00:32:15,519
with ping in that sense

00:32:14,000 --> 00:32:17,279
but you shouldn't be letting through

00:32:15,519 --> 00:32:19,200
other stuff you can just drop it there

00:32:17,279 --> 00:32:22,640
you can stop stuff an awful lot of junk

00:32:19,200 --> 00:32:26,000
in there potentially people can actually

00:32:22,640 --> 00:32:27,840
exfiltrate data through ping um by just

00:32:26,000 --> 00:32:29,039
stuffing stuff in those package so you

00:32:27,840 --> 00:32:32,399
know inbound

00:32:29,039 --> 00:32:34,640
why not just drop those things then

00:32:32,399 --> 00:32:36,240
general rule set that i would use for

00:32:34,640 --> 00:32:37,120
host but on this system of course it

00:32:36,240 --> 00:32:39,120
doesn't

00:32:37,120 --> 00:32:40,240
could potentially run some services as

00:32:39,120 --> 00:32:43,120
well it doesn't

00:32:40,240 --> 00:32:44,799
for external purposes so on the host

00:32:43,120 --> 00:32:47,760
internal on that switch

00:32:44,799 --> 00:32:48,159
that i run they use these rules they

00:32:47,760 --> 00:32:52,559
have

00:32:48,159 --> 00:32:54,880
a um essentially a rate limiting trick

00:32:52,559 --> 00:32:56,720
um they reduce the number of inbound

00:32:54,880 --> 00:32:58,480
connections and they they don't need to

00:32:56,720 --> 00:33:00,960
connect that many things but i don't

00:32:58,480 --> 00:33:02,559
have easy servers on that thing

00:33:00,960 --> 00:33:04,960
if you do you might need to set these to

00:33:02,559 --> 00:33:06,720
be different obviously

00:33:04,960 --> 00:33:08,640
so there's some forward rules also in

00:33:06,720 --> 00:33:09,120
the filter table and again my default is

00:33:08,640 --> 00:33:10,799
drop

00:33:09,120 --> 00:33:12,399
so anything that is not mentioned here

00:33:10,799 --> 00:33:15,919
will get dropped on the floor

00:33:12,399 --> 00:33:17,120
the local lan is accepted provided the

00:33:15,919 --> 00:33:20,799
originating address

00:33:17,120 --> 00:33:23,600
is as i wanted to be other friendly ips

00:33:20,799 --> 00:33:25,360
i will definitely forward for you

00:33:23,600 --> 00:33:26,159
anything established i will forward

00:33:25,360 --> 00:33:29,919
already

00:33:26,159 --> 00:33:31,919
and i will forward pings as well so

00:33:29,919 --> 00:33:33,679
things from our internal network going

00:33:31,919 --> 00:33:34,000
out or from the outgoing network going

00:33:33,679 --> 00:33:35,840
in

00:33:34,000 --> 00:33:38,080
i will let through if they're of the

00:33:35,840 --> 00:33:41,440
right variety so similar to before

00:33:38,080 --> 00:33:44,640
that was local this is for forwarding

00:33:41,440 --> 00:33:47,200
then more restrictive towards my

00:33:44,640 --> 00:33:49,120
switch and the internal network but you

00:33:47,200 --> 00:33:52,159
know mainly the switch

00:33:49,120 --> 00:33:53,360
if something comes from the external

00:33:52,159 --> 00:33:57,200
interface

00:33:53,360 --> 00:34:00,320
and is a new connection

00:33:57,200 --> 00:34:02,080
and it's for one of these ports

00:34:00,320 --> 00:34:03,519
you will see this is mail server in this

00:34:02,080 --> 00:34:06,399
case then

00:34:03,519 --> 00:34:07,679
i will do some connection limiting and

00:34:06,399 --> 00:34:10,960
what it does here

00:34:07,679 --> 00:34:13,440
it masks it with 24 bits that means i

00:34:10,960 --> 00:34:15,359
have a maximum of 20 or 16 million

00:34:13,440 --> 00:34:18,000
entries we can easily handle that

00:34:15,359 --> 00:34:19,440
should people from different uh lots of

00:34:18,000 --> 00:34:20,720
different ip addresses within the same

00:34:19,440 --> 00:34:22,320
network trying to connect to my mail

00:34:20,720 --> 00:34:24,720
server at some point

00:34:22,320 --> 00:34:26,079
they will get limited well tough luck i

00:34:24,720 --> 00:34:28,639
don't receive that many

00:34:26,079 --> 00:34:30,720
that much mail there um you know this is

00:34:28,639 --> 00:34:34,399
a regular web server and again this is

00:34:30,720 --> 00:34:35,040
the further example of the of the mail

00:34:34,399 --> 00:34:37,359
server

00:34:35,040 --> 00:34:38,800
okay so this one is specifically drop if

00:34:37,359 --> 00:34:41,440
it if it's above that limit

00:34:38,800 --> 00:34:42,960
and this one accepts but only if it's to

00:34:41,440 --> 00:34:46,079
that port so those two steps

00:34:42,960 --> 00:34:46,079
are from my mail server

00:34:46,560 --> 00:34:54,560
next dns mask as i mentioned instead of

00:34:50,720 --> 00:34:57,119
using um what is it unbound i love

00:34:54,560 --> 00:34:58,160
unbound it's awesome so much nicer than

00:34:57,119 --> 00:35:01,119
bind

00:34:58,160 --> 00:35:01,520
um nicer to set up nicer to configure so

00:35:01,119 --> 00:35:05,040
many

00:35:01,520 --> 00:35:06,400
fewer security issues it makes me much

00:35:05,040 --> 00:35:07,119
happier i've used it for a number of

00:35:06,400 --> 00:35:09,839
years now

00:35:07,119 --> 00:35:10,720
however this particular router uses dns

00:35:09,839 --> 00:35:14,640
mask and i'll

00:35:10,720 --> 00:35:16,560
show you why but most of these things

00:35:14,640 --> 00:35:18,640
you can also do with unbound

00:35:16,560 --> 00:35:20,640
so in the case of the nest mask i don't

00:35:18,640 --> 00:35:21,520
use it as a full recursive resolver it

00:35:20,640 --> 00:35:24,000
doesn't do that

00:35:21,520 --> 00:35:25,760
unbound does that what i do at the

00:35:24,000 --> 00:35:26,400
moment is i pointed that cloudflare's

00:35:25,760 --> 00:35:29,440
dns

00:35:26,400 --> 00:35:32,480
you could use 1 1 1 1 or 1 1 2

00:35:29,440 --> 00:35:32,800
for the extra extra malware filtering uh

00:35:32,480 --> 00:35:34,720
one

00:35:32,800 --> 00:35:36,720
one three you can actually make things

00:35:34,720 --> 00:35:40,240
um safer for

00:35:36,720 --> 00:35:45,280
um for

00:35:40,240 --> 00:35:47,200
um for families okay then i have

00:35:45,280 --> 00:35:48,560
ad servers and bad servers that i'm

00:35:47,200 --> 00:35:51,680
filtering that i

00:35:48,560 --> 00:35:53,599
feed off these feeds

00:35:51,680 --> 00:35:55,359
okay i see i need to speed up a bit

00:35:53,599 --> 00:35:57,119
because i'm running out of time as

00:35:55,359 --> 00:36:00,400
expected

00:35:57,119 --> 00:36:03,760
i'm letting through some information for

00:36:00,400 --> 00:36:05,520
from the law um so that the dns mask can

00:36:03,760 --> 00:36:08,079
actually work

00:36:05,520 --> 00:36:09,440
yeah um again i'm trying to be really

00:36:08,079 --> 00:36:13,200
really restrictive there

00:36:09,440 --> 00:36:15,440
now this is one you might like

00:36:13,200 --> 00:36:16,240
i can actually create an ip set in dns

00:36:15,440 --> 00:36:20,320
mask and

00:36:16,240 --> 00:36:22,640
only allow things through in my firewall

00:36:20,320 --> 00:36:23,680
if that ip address has previously been

00:36:22,640 --> 00:36:27,680
looked up

00:36:23,680 --> 00:36:30,079
by dns which means that outbound

00:36:27,680 --> 00:36:31,359
nothing will get through unless it's

00:36:30,079 --> 00:36:34,560
been looked up

00:36:31,359 --> 00:36:35,359
in dns this may seem really weird but it

00:36:34,560 --> 00:36:37,200
works

00:36:35,359 --> 00:36:39,760
it is so much better than for instance

00:36:37,200 --> 00:36:41,839
tls inspection or whatever in my opinion

00:36:39,760 --> 00:36:42,800
because i don't have to worry about

00:36:41,839 --> 00:36:44,240
weird people

00:36:42,800 --> 00:36:46,720
you know people doing weird things like

00:36:44,240 --> 00:36:49,440
tunneling through

00:36:46,720 --> 00:36:51,200
dns over https i don't care if you're

00:36:49,440 --> 00:36:54,880
trying to get out of my

00:36:51,200 --> 00:36:57,440
realm without looking at dns first

00:36:54,880 --> 00:36:59,040
it will not work it's as simple as that

00:36:57,440 --> 00:37:00,160
if you're a gamer you may need to set up

00:36:59,040 --> 00:37:02,000
some things extra

00:37:00,160 --> 00:37:03,760
so this is a really cool one and it

00:37:02,000 --> 00:37:07,119
seems to actually get rid of a lot

00:37:03,760 --> 00:37:08,720
of malware people doing weird things

00:37:07,119 --> 00:37:10,320
apple devices seem to do a lot of weird

00:37:08,720 --> 00:37:11,680
things directly to ip addresses but

00:37:10,320 --> 00:37:12,240
blocking it doesn't seem to hinder my

00:37:11,680 --> 00:37:14,880
kids

00:37:12,240 --> 00:37:15,680
so i've just dropped it okay now wire

00:37:14,880 --> 00:37:19,119
guard

00:37:15,680 --> 00:37:21,040
and this needs a bit of time obviously

00:37:19,119 --> 00:37:23,839
got eight minutes left should be alright

00:37:21,040 --> 00:37:24,880
okay it's tiny it's a few thousand lines

00:37:23,839 --> 00:37:27,440
of code

00:37:24,880 --> 00:37:28,640
it's secure so far at least and it's

00:37:27,440 --> 00:37:30,640
been looked at

00:37:28,640 --> 00:37:32,400
you know substantially over the last

00:37:30,640 --> 00:37:34,800
couple of years it's pretty fast

00:37:32,400 --> 00:37:36,640
some people say it's faster than

00:37:34,800 --> 00:37:37,680
something else but that depends on how

00:37:36,640 --> 00:37:40,240
you use it and what

00:37:37,680 --> 00:37:41,920
platform so i won't say it's faster than

00:37:40,240 --> 00:37:42,880
anything else but it's fast enough and

00:37:41,920 --> 00:37:45,119
it works fine

00:37:42,880 --> 00:37:46,320
it's udp-based and it can encapsulate

00:37:45,119 --> 00:37:49,040
anything in there

00:37:46,320 --> 00:37:51,040
it's easy to set up as well as very very

00:37:49,040 --> 00:37:51,680
powerful i love it which is why i called

00:37:51,040 --> 00:37:55,520
it wirecard

00:37:51,680 --> 00:37:59,920
love story i'm i have used and still use

00:37:55,520 --> 00:38:01,200
openvpn we also use corporately openvpn

00:37:59,920 --> 00:38:03,440
as well as ipsec

00:38:01,200 --> 00:38:04,960
i really really like wireguard it's so

00:38:03,440 --> 00:38:06,640
much easier to manage

00:38:04,960 --> 00:38:08,240
and when something is easy to manage

00:38:06,640 --> 00:38:10,000
there's less chance of making mistakes

00:38:08,240 --> 00:38:12,560
and that's a really really good thing

00:38:10,000 --> 00:38:14,960
it's in the latest kernel 5.6 kernel in

00:38:12,560 --> 00:38:16,320
ubuntu it's been backported to 5.4

00:38:14,960 --> 00:38:18,079
these are the kernel modules that you

00:38:16,320 --> 00:38:20,000
end up with when you load it or at least

00:38:18,079 --> 00:38:22,480
on my system i just did that

00:38:20,000 --> 00:38:24,000
yesterday to give you a bit of an idea

00:38:22,480 --> 00:38:27,280
so those are the protocols that

00:38:24,000 --> 00:38:30,480
are used it uses curve25519 and so on

00:38:27,280 --> 00:38:32,160
okay so it uses you know the latest in

00:38:30,480 --> 00:38:34,800
what we regard as decent decent

00:38:32,160 --> 00:38:35,440
crypto and related stuff this is the

00:38:34,800 --> 00:38:37,200
config

00:38:35,440 --> 00:38:38,800
and every time i should put completed

00:38:37,200 --> 00:38:41,119
top of the line of the

00:38:38,800 --> 00:38:42,480
page this is my complete config i didn't

00:38:41,119 --> 00:38:45,599
strip it

00:38:42,480 --> 00:38:48,320
this is the entire config for my um for

00:38:45,599 --> 00:38:50,320
my vpn stuff so this is the vpn server

00:38:48,320 --> 00:38:52,720
i set some stuff which you see on the

00:38:50,320 --> 00:38:54,480
left-hand side for the server

00:38:52,720 --> 00:38:56,079
including its private key which sadly

00:38:54,480 --> 00:38:58,240
wrapped i'll fix that later

00:38:56,079 --> 00:39:00,079
and then for my roaming laptop i need to

00:38:58,240 --> 00:39:02,240
tell

00:39:00,079 --> 00:39:03,280
my server what the peer public key

00:39:02,240 --> 00:39:06,720
address is

00:39:03,280 --> 00:39:10,000
and what the um

00:39:06,720 --> 00:39:13,040
what its public uh what its private

00:39:10,000 --> 00:39:14,079
network address is within my um within

00:39:13,040 --> 00:39:16,720
my

00:39:14,079 --> 00:39:18,160
address range that i use i can also run

00:39:16,720 --> 00:39:19,760
a vpn host

00:39:18,160 --> 00:39:21,359
with another country and i'll use that

00:39:19,760 --> 00:39:23,760
for geo routing

00:39:21,359 --> 00:39:25,359
in a bit and i'll show you that as well

00:39:23,760 --> 00:39:27,359
because i've got both of those working

00:39:25,359 --> 00:39:28,560
so this is my roaming laptop you saw how

00:39:27,359 --> 00:39:31,280
easy the server was

00:39:28,560 --> 00:39:33,040
this is how my laptop now operates my my

00:39:31,280 --> 00:39:34,640
laptop is now always on my guide it

00:39:33,040 --> 00:39:37,520
doesn't matter whether it's on the lan

00:39:34,640 --> 00:39:38,720
on wi-fi a wired connection or whether i

00:39:37,520 --> 00:39:41,119
walk out and go

00:39:38,720 --> 00:39:42,480
on someone else's wi-fi or my mobile

00:39:41,119 --> 00:39:45,280
phone uh

00:39:42,480 --> 00:39:47,520
you know mobile roaming um it will

00:39:45,280 --> 00:39:49,280
always be on wireguard and that means

00:39:47,520 --> 00:39:51,200
that you're no longer

00:39:49,280 --> 00:39:52,800
for some traffic running on your local

00:39:51,200 --> 00:39:54,640
network and that can make things

00:39:52,800 --> 00:39:56,160
quite a bit safer so if you set up your

00:39:54,640 --> 00:39:57,760
wire

00:39:56,160 --> 00:39:59,760
the ip tables on your laptop

00:39:57,760 --> 00:40:01,200
appropriately you can actually make sure

00:39:59,760 --> 00:40:03,440
that that laptop is fairly well

00:40:01,200 --> 00:40:06,000
insulated from whatever network it's on

00:40:03,440 --> 00:40:07,040
as well as just only talking via your

00:40:06,000 --> 00:40:08,480
wire guard

00:40:07,040 --> 00:40:10,160
and then all your traffic is neatly

00:40:08,480 --> 00:40:12,560
encrypted and it

00:40:10,160 --> 00:40:14,480
it won't leak elsewhere there's no split

00:40:12,560 --> 00:40:15,280
tunneling involved there so i quite like

00:40:14,480 --> 00:40:17,200
that idea

00:40:15,280 --> 00:40:18,560
we're looking at doing this corporately

00:40:17,200 --> 00:40:20,319
we haven't set it up yet

00:40:18,560 --> 00:40:21,760
we'll be doing some experiments fairly

00:40:20,319 --> 00:40:24,000
shortly

00:40:21,760 --> 00:40:24,880
and yeah obviously you can also set your

00:40:24,000 --> 00:40:27,359
your resolver

00:40:24,880 --> 00:40:28,880
your dns resolver to run across the vpn

00:40:27,359 --> 00:40:29,680
server rather than doing that locally

00:40:28,880 --> 00:40:32,800
again

00:40:29,680 --> 00:40:34,880
you know it can reduce possible problems

00:40:32,800 --> 00:40:37,200
people interfering with your dns

00:40:34,880 --> 00:40:38,560
or or looking at it they have no

00:40:37,200 --> 00:40:41,359
business looking at it so

00:40:38,560 --> 00:40:42,960
you can you can hide that away you just

00:40:41,359 --> 00:40:43,920
need to make sure it stays on but it

00:40:42,960 --> 00:40:46,640
seems to be

00:40:43,920 --> 00:40:47,760
working fairly well with me so far i i

00:40:46,640 --> 00:40:50,400
haven't had trouble

00:40:47,760 --> 00:40:51,440
leaving it rather than scripting around

00:40:50,400 --> 00:40:54,480
it

00:40:51,440 --> 00:40:56,480
so vpn host in another country so in my

00:40:54,480 --> 00:40:58,480
case i do this to the netherlands but

00:40:56,480 --> 00:41:01,680
you know you can do it anywhere you like

00:40:58,480 --> 00:41:04,400
this again is the entire setup and

00:41:01,680 --> 00:41:06,000
you can see that wireguard can have when

00:41:04,400 --> 00:41:07,680
you bring the interface up it can do

00:41:06,000 --> 00:41:09,040
something particularly to set up the

00:41:07,680 --> 00:41:11,359
routing for you

00:41:09,040 --> 00:41:13,200
and the other way around so that's all

00:41:11,359 --> 00:41:16,560
you need there

00:41:13,200 --> 00:41:19,920
what i didn't need to do in my

00:41:16,560 --> 00:41:21,920
main server is a bit more finicky and

00:41:19,920 --> 00:41:24,960
mileage here varies

00:41:21,920 --> 00:41:27,280
this tends to work most of the time

00:41:24,960 --> 00:41:28,720
i found that going through some services

00:41:27,280 --> 00:41:32,000
some of the servers are not

00:41:28,720 --> 00:41:34,480
actually technically in that country

00:41:32,000 --> 00:41:35,839
so you might need to add some extra ip

00:41:34,480 --> 00:41:37,680
addresses rather than just the ip

00:41:35,839 --> 00:41:40,079
addresses that belong with that country

00:41:37,680 --> 00:41:40,960
again well maybe we can share some some

00:41:40,079 --> 00:41:44,720
insights there

00:41:40,960 --> 00:41:44,720
in the in the github repo

00:41:44,800 --> 00:41:48,800
so we're doing policy based routing so

00:41:47,200 --> 00:41:51,359
based on

00:41:48,800 --> 00:41:52,400
matching my country list which again is

00:41:51,359 --> 00:41:54,480
one of those

00:41:52,400 --> 00:41:56,240
those ip lists that i've picked up i

00:41:54,480 --> 00:41:59,440
actually set a marker

00:41:56,240 --> 00:41:59,760
in on the packet and that allows me to

00:41:59,440 --> 00:42:01,839
do

00:41:59,760 --> 00:42:04,480
policy based routing it allows me to do

00:42:01,839 --> 00:42:06,480
routing based on a flag being set

00:42:04,480 --> 00:42:08,720
i first have to exclude the public

00:42:06,480 --> 00:42:09,359
address of my own server in the

00:42:08,720 --> 00:42:11,599
netherlands

00:42:09,359 --> 00:42:14,400
because otherwise it would start doing

00:42:11,599 --> 00:42:16,000
funny things and not actually work

00:42:14,400 --> 00:42:17,599
and obviously i have to let wire guard

00:42:16,000 --> 00:42:19,119
ports through this is the stupid way you

00:42:17,599 --> 00:42:20,720
can make it better of course but

00:42:19,119 --> 00:42:22,800
you get the idea you have to allow some

00:42:20,720 --> 00:42:25,680
things this

00:42:22,800 --> 00:42:26,720
is roughly what you need to do and in

00:42:25,680 --> 00:42:28,839
some cases this is

00:42:26,720 --> 00:42:30,319
already what y-guy does for you

00:42:28,839 --> 00:42:31,680
automatically

00:42:30,319 --> 00:42:33,760
because it's getting rather smart about

00:42:31,680 --> 00:42:37,119
these things if

00:42:33,760 --> 00:42:39,040
um so you're adding that

00:42:37,119 --> 00:42:42,240
that address to the wireguard interface

00:42:39,040 --> 00:42:45,599
if you haven't already it should be

00:42:42,240 --> 00:42:46,400
and then this priority rounding first of

00:42:45,599 --> 00:42:49,040
all

00:42:46,400 --> 00:42:50,800
we're adding a table that has a name and

00:42:49,040 --> 00:42:52,079
that is a routing table with a name

00:42:50,800 --> 00:42:54,720
which has its own default

00:42:52,079 --> 00:42:56,400
address so that's the the private

00:42:54,720 --> 00:42:57,359
address that i'm using on the wireguard

00:42:56,400 --> 00:43:01,359
interface

00:42:57,359 --> 00:43:02,880
um and then i'm

00:43:01,359 --> 00:43:05,520
saying that anything that has this

00:43:02,880 --> 00:43:06,560
marking needs to go to that particular

00:43:05,520 --> 00:43:08,240
table

00:43:06,560 --> 00:43:09,920
so that's how i'm doing policy based

00:43:08,240 --> 00:43:12,560
routing again it's a really quick

00:43:09,920 --> 00:43:14,319
explanation maybe i'm being a bit not

00:43:12,560 --> 00:43:16,079
optimal in my explanation but that gives

00:43:14,319 --> 00:43:18,560
you a basic idea of how that

00:43:16,079 --> 00:43:19,680
works and it seems to do the job i can

00:43:18,560 --> 00:43:21,599
actually

00:43:19,680 --> 00:43:23,280
you know just switch it on and it will

00:43:21,599 --> 00:43:24,640
automatically anything that needs to go

00:43:23,280 --> 00:43:27,040
in my case to the netherlands

00:43:24,640 --> 00:43:28,800
will go via that and nothing else so

00:43:27,040 --> 00:43:30,720
that that does the job

00:43:28,800 --> 00:43:32,400
all right i think i made it with two

00:43:30,720 --> 00:43:35,280
minutes pair would you believe

00:43:32,400 --> 00:43:35,680
i'm happy to take some questions but you

00:43:35,280 --> 00:43:38,400
have

00:43:35,680 --> 00:43:40,000
30 seconds delay on me so i'm just it

00:43:38,400 --> 00:43:43,200
might just be better to have

00:43:40,000 --> 00:43:45,359
the uh the questions in in chat and via

00:43:43,200 --> 00:43:47,200
email and in the github repository

00:43:45,359 --> 00:43:49,520
and i promise i will post everything

00:43:47,200 --> 00:43:51,200
there thank you very much

00:43:49,520 --> 00:43:53,760
thank you very much for that talk argent

00:43:51,200 --> 00:43:56,720
i am really impressed to fit it all in

00:43:53,760 --> 00:43:57,520
and came in under time um i do think

00:43:56,720 --> 00:43:58,720
given that we're

00:43:57,520 --> 00:44:01,119
about to go into a break it would be

00:43:58,720 --> 00:44:01,920
best to do questions in the venulis text

00:44:01,119 --> 00:44:03,760
chat

00:44:01,920 --> 00:44:05,359
um so if you're happy to pop over there

00:44:03,760 --> 00:44:07,520
um there's definitely been

00:44:05,359 --> 00:44:09,520
some good discussion going on and some

00:44:07,520 --> 00:44:11,440
questions posted there for you

00:44:09,520 --> 00:44:12,560
okay awesome people slides we'll put

00:44:11,440 --> 00:44:13,359
them up on the website and that will

00:44:12,560 --> 00:44:16,720
give people

00:44:13,359 --> 00:44:19,359
details that they can refer to as well

00:44:16,720 --> 00:44:22,400
thank you thank you for your talk um we

00:44:19,359 --> 00:44:24,560
have a 25-minute meal break now

00:44:22,400 --> 00:44:26,319
pick the meal that it is based on your

00:44:24,560 --> 00:44:27,200
time zone and we will see you in 25

00:44:26,319 --> 00:44:32,880
minutes for

00:44:27,200 --> 00:44:32,880

YouTube URL: https://www.youtube.com/watch?v=w_KKy9Y0iEI


