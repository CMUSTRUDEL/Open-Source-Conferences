Title: "GKernelCI v.2 new features and KernelCI compatibility" - Alice Ferrazzi (LCA 2021 Online)
Publication date: 2021-01-31
Playlist: linux.conf.au 2021
Description: 
	Alice Ferrazzi

https://lca2021.linux.org.au/schedule/presentation/97/

Iâ€™m the main maintainer and creator of GKernelCI. 
GKernelCI was born 4 years ago with the necessity to have a standardized and automatic way of testing Gentoo Kernel sources.
Test results of Gentoo Kernel sources are used by the Gentoo Kernel team to double-check each Gentoo Kernel source's release. 
GKernelCI is becoming a fundamental step of Gentoo sources release. 
With GKernelCI v.2[4] we are not only introducing new features but also compatibility with KernelCI using Kcidb (kernelci.org common database tools). 
KernelCI is the Linux Foundation project currently used for testing the Linux Kernel and sending upstream feedback. 
GKernelCI v.2 will join efforts with Kcidb tool to send feedback from Gentoo kernel sources. 
Other features that will be implemented with GKernelCI v.2 are:
-the usage of docker for better, faster, more-repeatable environments
-the usage of lava for a more standardized testing and simplify testing on embedded systems
GKernelCI v.2 is also trying to be more important during not only the release of the Gentoo kernel sources but also with the stabilization of them Gentoo kernel related packages.
GKernelCI v.1 is currently hosted courtesy of mjeveritt[2] at [3]
The GKernelCI is an open source project. 
The GkernelCI code can be found here[1]

1)https://github.com/GKernelCI
2)https://github.com/mjeveritt/Gentoo_kernelCI
3)https://kernel-ci.emjay-embedded.co.uk/
4)https://github.com/GKernelCI/Gdocker/issues/6

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sat Jan 23 16:10:00 2021 at Tux Theatre
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,360 --> 00:00:19,760
we have alice ferrari who

00:00:17,199 --> 00:00:21,600
is a gentoo linux developer and the

00:00:19,760 --> 00:00:23,519
leader of the gentoo kernel project and

00:00:21,600 --> 00:00:26,560
a member of the gentoo foundation

00:00:23,519 --> 00:00:28,480
board and is working at

00:00:26,560 --> 00:00:29,760
cybertrust japan as an embedded software

00:00:28,480 --> 00:00:33,360
engineer

00:00:29,760 --> 00:00:35,680
she'll be presenting on g-kernel ci

00:00:33,360 --> 00:00:37,440
version 2 it's new features and kernel

00:00:35,680 --> 00:00:41,680
ci compatibility

00:00:37,440 --> 00:00:43,760
please welcome alice thank you

00:00:41,680 --> 00:00:45,600
in this presentation i will talk about

00:00:43,760 --> 00:00:47,920
current ci about new feature and

00:00:45,600 --> 00:00:50,800
currency compatibility

00:00:47,920 --> 00:00:51,840
as already being presented i will skip

00:00:50,800 --> 00:00:54,320
my presentation

00:00:51,840 --> 00:00:55,680
i'm part of gen 2 and part of sabotage

00:00:54,320 --> 00:00:58,320
japan as

00:00:55,680 --> 00:01:00,879
i said before and this presentation i

00:00:58,320 --> 00:01:03,199
will talk about

00:01:00,879 --> 00:01:03,920
advanced genocida project i will talk a

00:01:03,199 --> 00:01:07,760
bit about

00:01:03,920 --> 00:01:08,320
agenda confi and in the end i will talk

00:01:07,760 --> 00:01:10,840
about

00:01:08,320 --> 00:01:12,080
the collaboration what we are doing with

00:01:10,840 --> 00:01:16,720
currency

00:01:12,080 --> 00:01:19,680
cidb and at the end i will talk about

00:01:16,720 --> 00:01:19,680
what we want to do

00:01:20,960 --> 00:01:25,840
what we want to do next and the

00:01:23,200 --> 00:01:25,840
conclusion

00:01:26,560 --> 00:01:32,400
so uh i will talking really short about

00:01:30,880 --> 00:01:34,079
uh what within two grand project is

00:01:32,400 --> 00:01:37,680
doing and only the part that is

00:01:34,079 --> 00:01:40,880
interesting to agenda currency

00:01:37,680 --> 00:01:44,880
and so we are practically doing an

00:01:40,880 --> 00:01:44,880
angel source that is uh

00:01:46,000 --> 00:01:50,799
practically a linux kernel with some

00:01:48,880 --> 00:01:53,439
magento specific patch

00:01:50,799 --> 00:01:55,360
but there are really few parts either

00:01:53,439 --> 00:01:57,119
but some distribution is using like more

00:01:55,360 --> 00:02:00,240
than 400 patch we are

00:01:57,119 --> 00:02:04,960
less than 10 patch uh engine to source

00:02:00,240 --> 00:02:08,560
and that are specific to zim2

00:02:04,960 --> 00:02:11,840
and we also have other uh gen gentle

00:02:08,560 --> 00:02:11,840
kernel source flavor

00:02:12,640 --> 00:02:18,959
and we are

00:02:15,760 --> 00:02:20,000
compiling and putting such a gentle

00:02:18,959 --> 00:02:24,879
sauce

00:02:20,000 --> 00:02:27,200
and if everything is working we are

00:02:24,879 --> 00:02:28,160
stabilizing uh the agent two source

00:02:27,200 --> 00:02:31,280
package

00:02:28,160 --> 00:02:31,280
uh engine two

00:02:32,080 --> 00:02:39,200
so in 2006 uh end of 2006

00:02:36,720 --> 00:02:41,519
we see that we was doing some part that

00:02:39,200 --> 00:02:44,080
was always same and

00:02:41,519 --> 00:02:45,120
we thought we couldn't make a more

00:02:44,080 --> 00:02:47,519
efficient

00:02:45,120 --> 00:02:48,959
process and automate some part of what

00:02:47,519 --> 00:02:51,519
we was doing

00:02:48,959 --> 00:02:54,000
and that is how argento can see i

00:02:51,519 --> 00:02:54,000
started

00:02:54,480 --> 00:02:59,840
so this is gentoo canasia and is the new

00:02:58,080 --> 00:03:04,959
version because the old version i

00:02:59,840 --> 00:03:10,319
don't don't have screenshot anymore

00:03:04,959 --> 00:03:13,519
in in 2008

00:03:10,319 --> 00:03:16,480
there was the spectre

00:03:13,519 --> 00:03:18,800
melted down problem and upstream asked

00:03:16,480 --> 00:03:21,519
to double check

00:03:18,800 --> 00:03:21,519
some of the

00:03:23,519 --> 00:03:30,480
some of very least so

00:03:26,879 --> 00:03:30,959
we was one of i think one of the first

00:03:30,480 --> 00:03:34,080
to

00:03:30,959 --> 00:03:37,120
start to automate send email

00:03:34,080 --> 00:03:40,000
to upstream about

00:03:37,120 --> 00:03:40,000
success of

00:03:40,640 --> 00:03:47,519
upstream and double checking that

00:03:43,680 --> 00:03:50,080
upstream was

00:03:47,519 --> 00:03:52,080
booting correctly or and doing some

00:03:50,080 --> 00:03:55,200
tests

00:03:52,080 --> 00:03:55,680
so what is changing from uh gentle canon

00:03:55,200 --> 00:03:57,680
sci

00:03:55,680 --> 00:04:01,760
version one to join to currency version

00:03:57,680 --> 00:04:05,040
two we have

00:04:01,760 --> 00:04:08,720
at first we started to do mostly

00:04:05,040 --> 00:04:12,480
from scratch and we made live script for

00:04:08,720 --> 00:04:12,799
booting um and many dependent script for

00:04:12,480 --> 00:04:16,239
the

00:04:12,799 --> 00:04:18,000
enviro for the machine and

00:04:16,239 --> 00:04:19,359
recently we decided to move everything

00:04:18,000 --> 00:04:22,720
to docker and

00:04:19,359 --> 00:04:24,880
make it more simple and also more simple

00:04:22,720 --> 00:04:28,479
to add more tests so we use

00:04:24,880 --> 00:04:30,000
currently lava and what is happening

00:04:28,479 --> 00:04:31,759
recently is a currency

00:04:30,000 --> 00:04:35,120
that is recently became part of venus

00:04:31,759 --> 00:04:38,800
foundation is uh

00:04:35,120 --> 00:04:42,160
he made our tool called kcidb

00:04:38,800 --> 00:04:45,600
and we start to integrate such tool with

00:04:42,160 --> 00:04:45,600
the agent can sei process

00:04:45,759 --> 00:04:51,440
so a current agent can see

00:04:49,280 --> 00:04:53,199
infrastructure is we have a server for

00:04:51,440 --> 00:04:55,120
lava and the server for practically the

00:04:53,199 --> 00:04:58,880
billboard part and some

00:04:55,120 --> 00:05:01,360
script we are

00:04:58,880 --> 00:05:03,039
checking the gen2source repository if

00:05:01,360 --> 00:05:06,800
there is any new patch

00:05:03,039 --> 00:05:08,800
we will get the root fs from uh

00:05:06,800 --> 00:05:10,080
we would like to build actually rooted

00:05:08,800 --> 00:05:12,320
fast in our infrastructure

00:05:10,080 --> 00:05:14,160
but currently we don't have resources so

00:05:12,320 --> 00:05:16,320
we are getting root fs from

00:05:14,160 --> 00:05:17,440
some magento mirror and then we are

00:05:16,320 --> 00:05:19,039
building the kernel

00:05:17,440 --> 00:05:21,039
we will put everything into a file

00:05:19,039 --> 00:05:22,800
server and

00:05:21,039 --> 00:05:24,160
we will send everything to lava but we

00:05:22,800 --> 00:05:27,600
will check we will

00:05:24,160 --> 00:05:29,360
do queen testing and if

00:05:27,600 --> 00:05:31,280
everything all goes well we will have a

00:05:29,360 --> 00:05:38,000
notification to kernel ci

00:05:31,280 --> 00:05:40,240
and to agenda canon ci

00:05:38,000 --> 00:05:40,240
so

00:05:44,639 --> 00:05:48,880
the feature about the agenda panacea is

00:05:46,639 --> 00:05:51,840
that mainly is uh

00:05:48,880 --> 00:05:53,680
title red for what we are doing uh

00:05:51,840 --> 00:05:56,720
virgin to current project so

00:05:53,680 --> 00:05:57,039
he is a terrorist for a vision to kernel

00:05:56,720 --> 00:05:59,280
uh

00:05:57,039 --> 00:06:00,319
process that we are using for releasing

00:05:59,280 --> 00:06:05,919
uh

00:06:00,319 --> 00:06:08,639
the linux kernel with patch from gen2 to

00:06:05,919 --> 00:06:11,680
reduce in such package

00:06:08,639 --> 00:06:13,440
but we would like but

00:06:11,680 --> 00:06:15,440
can be used also for testing other

00:06:13,440 --> 00:06:20,240
flavor or other

00:06:15,440 --> 00:06:24,160
kernel because it is

00:06:20,240 --> 00:06:27,840
mainly just based on billboard

00:06:24,160 --> 00:06:28,319
and we try to make it really simple to

00:06:27,840 --> 00:06:30,639
use

00:06:28,319 --> 00:06:31,520
so we are keeping everything darker and

00:06:30,639 --> 00:06:33,680
these

00:06:31,520 --> 00:06:35,520
can be started in one line actually

00:06:33,680 --> 00:06:37,360
someone say that also gen 2 can be

00:06:35,520 --> 00:06:41,039
installed in one line but

00:06:37,360 --> 00:06:42,800
i think it's more simple than that and

00:06:41,039 --> 00:06:45,840
we have a few languages which we mainly

00:06:42,800 --> 00:06:49,280
use just python and bash

00:06:45,840 --> 00:06:50,160
is highly customizable customizable

00:06:49,280 --> 00:06:53,759
because it's based

00:06:50,160 --> 00:06:56,880
on buildbot and lava and recently um

00:06:53,759 --> 00:06:59,520
using kcidb for pushing the result

00:06:56,880 --> 00:06:59,520
to currency

00:07:01,360 --> 00:07:08,000
so case idb is a

00:07:04,800 --> 00:07:08,000
kernel ci project

00:07:08,960 --> 00:07:17,280
is a try to unify a different ci system

00:07:14,479 --> 00:07:18,240
in the currency because currently we

00:07:17,280 --> 00:07:20,960
have

00:07:18,240 --> 00:07:22,400
many different currency i and each one

00:07:20,960 --> 00:07:25,440
is sending it's all not

00:07:22,400 --> 00:07:28,319
his own result upstream is also a

00:07:25,440 --> 00:07:28,319
different way of

00:07:29,520 --> 00:07:33,599
making such a report and sei is trying

00:07:32,720 --> 00:07:37,280
to make a

00:07:33,599 --> 00:07:41,120
same way for each ci

00:07:37,280 --> 00:07:41,120
to have the same

00:07:41,520 --> 00:07:44,720
structure of the report that we're

00:07:43,759 --> 00:07:46,639
sending

00:07:44,720 --> 00:07:49,120
and then sending the notification to

00:07:46,639 --> 00:07:49,120
upstream

00:07:49,599 --> 00:07:55,759
so but for uh

00:07:53,680 --> 00:07:56,720
sending the notification to cancer we

00:07:55,759 --> 00:07:58,479
need them

00:07:56,720 --> 00:08:00,000
like we need the currency i access

00:07:58,479 --> 00:08:03,199
credential

00:08:00,000 --> 00:08:04,319
we at first get the testing credential

00:08:03,199 --> 00:08:07,759
of

00:08:04,319 --> 00:08:08,960
cash adb but it was uploaded to a test

00:08:07,759 --> 00:08:11,440
environment

00:08:08,960 --> 00:08:12,400
and actually yesterday we got the

00:08:11,440 --> 00:08:15,520
production

00:08:12,400 --> 00:08:19,360
and so we can actually start to send

00:08:15,520 --> 00:08:23,199
our result to upstream kernel ci

00:08:19,360 --> 00:08:26,479
but we still didn't try

00:08:23,199 --> 00:08:30,240
it will be in the next day it will be a

00:08:26,479 --> 00:08:32,719
next thing that we will do and the

00:08:30,240 --> 00:08:34,880
report that is using kernel ci for

00:08:32,719 --> 00:08:38,560
sending everything upstream is using

00:08:34,880 --> 00:08:41,200
json so

00:08:38,560 --> 00:08:42,320
practically very this is one of the

00:08:41,200 --> 00:08:45,680
report that

00:08:42,320 --> 00:08:47,519
agenda can rci is using for uh sending

00:08:45,680 --> 00:08:50,640
to case idb that case adb

00:08:47,519 --> 00:08:54,880
it will send to canasia

00:08:50,640 --> 00:08:57,680
and we have

00:08:54,880 --> 00:09:00,080
a version that is i think is the json

00:08:57,680 --> 00:09:03,200
version we have a revision build

00:09:00,080 --> 00:09:05,680
and some test results we here i'm also

00:09:03,200 --> 00:09:08,959
showing you the revision and the build

00:09:05,680 --> 00:09:13,040
we have a validation type for

00:09:08,959 --> 00:09:14,880
saying if the invervision is saying

00:09:13,040 --> 00:09:16,080
practically if the patch are actually

00:09:14,880 --> 00:09:19,040
merged correctly

00:09:16,080 --> 00:09:20,000
i am skipping many parts from not so

00:09:19,040 --> 00:09:22,320
many but

00:09:20,000 --> 00:09:24,160
some patch i'm skipping and this

00:09:22,320 --> 00:09:25,120
distribution to click on face one of the

00:09:24,160 --> 00:09:28,959
few parts water

00:09:25,120 --> 00:09:32,080
is out the engine two for into the

00:09:28,959 --> 00:09:35,279
kernel that is using

00:09:32,080 --> 00:09:38,720
and we have our id

00:09:35,279 --> 00:09:39,680
origin the discovery time for checking

00:09:38,720 --> 00:09:43,440
when it was

00:09:39,680 --> 00:09:43,440
built and they

00:09:44,800 --> 00:09:52,320
now one of the things that it was

00:09:48,800 --> 00:09:54,399
a bit different from what we was doing

00:09:52,320 --> 00:09:56,480
actually gentle kinesio is producing

00:09:54,399 --> 00:09:59,680
some output so we have to change such

00:09:56,480 --> 00:10:03,519
output for uh upstream kernel

00:09:59,680 --> 00:10:05,120
for using kcidb and one of it is was

00:10:03,519 --> 00:10:08,880
asking is the revision id

00:10:05,120 --> 00:10:11,040
that is actually uh the

00:10:08,880 --> 00:10:13,519
neos kernel base that we are using the

00:10:11,040 --> 00:10:16,800
commit ash of wetlands base

00:10:13,519 --> 00:10:19,120
uh with some gen two patch oh

00:10:16,800 --> 00:10:20,959
and some other agent resource that is

00:10:19,120 --> 00:10:23,279
using a spatula such

00:10:20,959 --> 00:10:25,279
as a convenient combining such two

00:10:23,279 --> 00:10:28,160
information for getting the

00:10:25,279 --> 00:10:29,839
revision id that we are sending to by

00:10:28,160 --> 00:10:31,920
kcidb

00:10:29,839 --> 00:10:33,680
so for sending this data we are using

00:10:31,920 --> 00:10:37,120
kcidb submit

00:10:33,680 --> 00:10:40,720
and we are sending in the

00:10:37,120 --> 00:10:43,839
kcidb production version of the cldb

00:10:40,720 --> 00:10:47,839
with some data file that is zinto can

00:10:43,839 --> 00:10:47,839
see is production about where is good

00:10:48,160 --> 00:10:56,880
and this one is the kcidb front-end

00:10:53,440 --> 00:10:56,880
where casadb is

00:10:57,279 --> 00:11:02,720
containing is particularly

00:11:00,560 --> 00:11:05,920
is using grafana for showing the data

00:11:02,720 --> 00:11:08,000
where to type in the database

00:11:05,920 --> 00:11:09,839
and this is they are the recent bill

00:11:08,000 --> 00:11:15,839
that general currency is starting to

00:11:09,839 --> 00:11:15,839
send to the testing system of qcid

00:11:18,959 --> 00:11:28,320
so uh what agenda currency what to do

00:11:23,040 --> 00:11:31,760
next currently we are practically just

00:11:28,320 --> 00:11:36,240
doing the some canal test

00:11:31,760 --> 00:11:42,160
but and this is helping a bit on the

00:11:36,240 --> 00:11:47,360
gen two kernel process but

00:11:42,160 --> 00:11:47,360
we want to go bit more fast about

00:11:53,040 --> 00:11:58,959
and we want to implement more tests and

00:11:57,200 --> 00:12:01,839
by these improvements into kernel

00:11:58,959 --> 00:12:07,839
testing and process

00:12:01,839 --> 00:12:07,839
and also adding more customization so

00:12:08,000 --> 00:12:13,360
also uh trying to don't

00:12:11,040 --> 00:12:15,519
build on legion to source but also some

00:12:13,360 --> 00:12:17,519
other flavor that we have engine too we

00:12:15,519 --> 00:12:19,279
have like also vanilla sauce that is

00:12:17,519 --> 00:12:22,839
practically just

00:12:19,279 --> 00:12:25,760
linux kernel and that was one of the

00:12:22,839 --> 00:12:28,800
uh reason that

00:12:25,760 --> 00:12:32,160
upstream they want

00:12:28,800 --> 00:12:34,000
some of our build is because our

00:12:32,160 --> 00:12:35,200
uh the package that we are releasing is

00:12:34,000 --> 00:12:39,839
practically almost

00:12:35,200 --> 00:12:39,839
same as upstream

00:12:44,079 --> 00:12:48,560
and here we can see the um

00:12:48,639 --> 00:12:55,760
this the architecture but

00:12:52,000 --> 00:12:59,000
gen 2 is supporting and what

00:12:55,760 --> 00:13:02,160
currently we are just stabilizing for x

00:12:59,000 --> 00:13:04,240
8664 but we

00:13:02,160 --> 00:13:05,680
we want also to try to stabilize

00:13:04,240 --> 00:13:10,320
automatically at least

00:13:05,680 --> 00:13:10,320
arm and some other architecture

00:13:18,839 --> 00:13:22,959
so

00:13:20,399 --> 00:13:24,240
in conclusion a genocide project is

00:13:22,959 --> 00:13:27,760
trying to

00:13:24,240 --> 00:13:31,680
uh my helping kernel upstream by

00:13:27,760 --> 00:13:35,360
collaborating with currency using kcidb

00:13:31,680 --> 00:13:39,199
we try to improve the

00:13:35,360 --> 00:13:42,480
engine to current source process

00:13:39,199 --> 00:13:44,560
in by automatizing automatizing some

00:13:42,480 --> 00:13:47,360
part of the gen2 process

00:13:44,560 --> 00:13:48,079
and we try to improve oxygen to kind of

00:13:47,360 --> 00:13:52,000
testing by

00:13:48,079 --> 00:13:53,680
try to well also by sending everything

00:13:52,000 --> 00:13:55,519
to currency i but also by

00:13:53,680 --> 00:13:58,480
trying to build also different flavor

00:13:55,519 --> 00:14:00,160
from gentle source and also

00:13:58,480 --> 00:14:02,399
in the future we will also like to give

00:14:00,160 --> 00:14:04,240
a possibility to the

00:14:02,399 --> 00:14:07,600
user to use the interconnect ci for

00:14:04,240 --> 00:14:07,600
sending patch or such things

00:14:08,320 --> 00:14:14,560
and i think

00:14:11,519 --> 00:14:18,079
that i went a bit more fast when

00:14:14,560 --> 00:14:21,680
i thought so we probably have some time

00:14:18,079 --> 00:14:21,680
for a question if there is

00:14:22,639 --> 00:14:27,760
any question and

00:14:25,839 --> 00:14:30,560
if you have interested about uh gender

00:14:27,760 --> 00:14:32,480
currency ie we have uh you can see

00:14:30,560 --> 00:14:34,320
gender conunciation in action

00:14:32,480 --> 00:14:36,880
is different from the one that we're

00:14:34,320 --> 00:14:36,880
using the

00:14:37,680 --> 00:14:41,839
in the abstract about uh genderqueer nci

00:14:40,720 --> 00:14:44,399
because the one that was

00:14:41,839 --> 00:14:45,279
in the abstract is supported by a user

00:14:44,399 --> 00:14:48,079
gender user

00:14:45,279 --> 00:14:51,519
and but recently we got resource from

00:14:48,079 --> 00:14:55,120
gen2 infrastructure to have our built-in

00:14:51,519 --> 00:14:58,399
environment for currency

00:14:55,120 --> 00:15:02,320
and i leave a project repository and

00:14:58,399 --> 00:15:05,360
the support channel on freenode

00:15:02,320 --> 00:15:05,360
that's all for me

00:15:05,519 --> 00:15:08,160
if it is

00:15:09,519 --> 00:15:13,760
okay so we do have a few minutes for

00:15:12,079 --> 00:15:15,519
questions

00:15:13,760 --> 00:15:19,279
if you wish to post a question just post

00:15:15,519 --> 00:15:22,079
it in the tux theatre stream chat

00:15:19,279 --> 00:15:23,760
and i've also copied in there the urls

00:15:22,079 --> 00:15:27,360
that are on this slide

00:15:23,760 --> 00:15:41,839
so if you want to go take a look

00:15:27,360 --> 00:15:41,839
go click on both

00:16:10,480 --> 00:16:14,079
so if there is no question now the point

00:16:12,800 --> 00:16:16,639
is

00:16:14,079 --> 00:16:18,880
what i'm i'm saying in the presentation

00:16:16,639 --> 00:16:22,320
it's particular that

00:16:18,880 --> 00:16:22,959
we are recently collaborating with and

00:16:22,320 --> 00:16:26,240
so

00:16:22,959 --> 00:16:29,440
every result is sended to

00:16:26,240 --> 00:16:31,120
currency also some other

00:16:29,440 --> 00:16:32,880
continuous integration systems that are

00:16:31,120 --> 00:16:35,920
doing some tests on

00:16:32,880 --> 00:16:39,519
kernel are recently starting to

00:16:35,920 --> 00:16:40,800
use uh kcrdp and collaborating with

00:16:39,519 --> 00:16:44,480
current spi

00:16:40,800 --> 00:16:44,480
so current ci is currently

00:16:45,839 --> 00:16:52,399
in this yeah system um so we've got uh

00:16:50,320 --> 00:16:53,600
some questions uh so firstly are you

00:16:52,399 --> 00:16:55,839
looking to check against specific

00:16:53,600 --> 00:17:00,560
hardware in this ci system

00:16:55,839 --> 00:17:02,880
okay uh um

00:17:00,560 --> 00:17:04,079
at first we are thinking to use that to

00:17:02,880 --> 00:17:07,520
mainly visualize

00:17:04,079 --> 00:17:09,439
everything but someone talked about us

00:17:07,520 --> 00:17:13,280
about using some real artwork

00:17:09,439 --> 00:17:16,720
in the future and we are checking

00:17:13,280 --> 00:17:19,919
specific hardware that is

00:17:16,720 --> 00:17:20,880
interesting to gen 2 so what agent we

00:17:19,919 --> 00:17:25,039
started to

00:17:20,880 --> 00:17:27,760
stabilize is what i showed in the

00:17:25,039 --> 00:17:29,919
here so these are the architecture

00:17:27,760 --> 00:17:32,000
vertigen 2 is trying to stabilize

00:17:29,919 --> 00:17:34,080
i don't think if we can stabilize

00:17:32,000 --> 00:17:35,200
everything but we will try to stabilize

00:17:34,080 --> 00:17:38,320
at least

00:17:35,200 --> 00:17:43,919
most of what

00:17:38,320 --> 00:17:43,919
gen 2 is declaring a stable architecture

00:17:44,000 --> 00:17:52,080
and the benefit of using lava for qmobot

00:17:49,760 --> 00:17:52,960
actually uh yes at first we started to

00:17:52,080 --> 00:17:55,760
do

00:17:52,960 --> 00:17:57,600
to use qmo everything by scratch we had

00:17:55,760 --> 00:18:01,440
some script for doing

00:17:57,600 --> 00:18:04,240
all such tests but

00:18:01,440 --> 00:18:04,240
the problem is

00:18:06,320 --> 00:18:10,559
it became like when we have to catch

00:18:09,039 --> 00:18:14,799
some

00:18:10,559 --> 00:18:16,880
problem or we have to script also

00:18:14,799 --> 00:18:18,000
like when you do some tests you have to

00:18:16,880 --> 00:18:21,360
catch

00:18:18,000 --> 00:18:24,320
a result of the test and lava

00:18:21,360 --> 00:18:24,320
is a bit more

00:18:25,520 --> 00:18:28,880
some kind of standardize it if i can use

00:18:28,080 --> 00:18:30,460
such words

00:18:28,880 --> 00:18:33,200
it have some

00:18:30,460 --> 00:18:36,880
[Music]

00:18:33,200 --> 00:18:39,039
is more reliable than

00:18:36,880 --> 00:18:41,120
trying to do everything by hand from

00:18:39,039 --> 00:18:43,840
from from what

00:18:41,120 --> 00:18:43,840
i could see

00:18:46,080 --> 00:18:52,480
so in our case using lava could

00:18:49,440 --> 00:18:52,480
help us doing

00:18:54,880 --> 00:18:58,320
doing better testing for virgin to

00:18:57,120 --> 00:19:00,240
source not only

00:18:58,320 --> 00:19:02,640
just good tests but also in the future

00:19:00,240 --> 00:19:11,840
like using cassette tests or

00:19:02,640 --> 00:19:11,840
some other kernel related tests

00:19:13,200 --> 00:19:16,960
okay that looks to be all the questions

00:19:14,799 --> 00:19:18,320
that we have um if you think of any more

00:19:16,960 --> 00:19:21,200
questions head on over to the colonel

00:19:18,320 --> 00:19:24,080
miniconf boss channel in venulis and uh

00:19:21,200 --> 00:19:26,400
keep the discussion going over there

00:19:24,080 --> 00:19:28,799
thank you very much alice

00:19:26,400 --> 00:19:29,440
thank you and i hope that everyone

00:19:28,799 --> 00:19:32,880
enjoys

00:19:29,440 --> 00:19:32,880
the rest of the conference

00:19:33,200 --> 00:19:37,919

YouTube URL: https://www.youtube.com/watch?v=LVZu9K6RWII


