Title: "Keynote: Cognitive Apprenticeship - Experience in Open Source" - Omoju Miller (LCA 2021 Online)
Publication date: 2021-01-30
Playlist: linux.conf.au 2021
Description: 
	Omoju Miller

https://lca2021.linux.org.au/schedule/presentation/123/

Keynote by Omoju Miller

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Mon Jan 25 09:10:00 2021 at Tux Theatre
Captions: 
	00:00:00,000 --> 00:00:06,416
(WIND BLOWING) (BABY PENGUINS CHIRPING)

00:00:06,416 --> 00:00:08,840
(LOUD THUD) (MUSICAL DRONE) (METALLIC "BLINK" SOUND EFFECT)

00:00:08,840 --> 00:00:11,951
(WHOOSH) (SHORT UPTEMPO MELODY)

00:00:15,840 --> 00:00:21,661
HOST: It now gives me great pleasure to introduce our  keynote for this morning, Omoju Miller

00:00:21,661 --> 00:00:29,457
Omoju is technical advisor to the CEO at GitHub. Her expertise is in the area of machine learning and computational intelligence. 

00:00:29,457 --> 00:00:35,629
previously Omoju co-led Google's non-profit investment  in computer scientific education 

00:00:35,629 --> 00:00:41,576
and served as a volunteer advisor to the Obama administration's  white house presidential innovation fellows. 

00:00:41,576 --> 00:00:49,529
Omoju joined github in 2017 to help build recommendation engines for the popular open source software development platform.

00:00:49,529 --> 00:00:53,817
She took on the role of technical advisor to the CEO in January 2020.

00:00:53,817 --> 00:01:00,912
Originally from Lagos, Nigeria, Omoju holds a doctoral degree in computer science education from UC Berkeley.

00:01:00,912 --> 00:01:03,040
Please join me in welcoming Omoju

00:01:09,280 --> 00:01:16,747
OMOJU: I am ready for my slides. Hello everyone, hello everyone. Thank you for inviting me here today. 

00:01:18,240 --> 00:01:27,098
Today I want to talk to you about cognitive apprenticeship in the context of open source communities of practice.

00:01:27,098 --> 00:01:34,124
My name is Omoju Miller. I am the technical advisor to the ceo at GitHub, the home of open source.

00:01:34,124 --> 00:01:42,296
I am very happy to be able to join with you all today and present at the Australian Linux Conference.

00:01:42,296 --> 00:01:48,189
I'm sure many of you know what GitHub is but just in case there are people watching who are not familiar with GitHub,  

00:01:48,720 --> 00:01:53,840
we are a collaborative work platform whose  killer app is the building of software.

00:01:56,160 --> 00:02:03,600
What you are looking at is where the world builds software. This is GitHub's home page  

00:02:03,600 --> 00:02:09,960
where we animate the globe to show a few  features of folks building software around the world.

00:02:09,960 --> 00:02:13,753
Each of the arcs you see on the globe is a pull request that has been merged.

00:02:14,560 --> 00:02:18,393
You can see people collaborating  with each other around the world. 

00:02:18,880 --> 00:02:26,587
You literally see the subsets of those people  whose goal it is to accelerate human progress.  

00:02:27,200 --> 00:02:30,349
That's our goal at GitHub. Our goal is to accelerate community progress

00:02:30,349 --> 00:02:38,720
and on the globe those arcs are a physical manifestation  of people doing that across geographical borders,  

00:02:38,720 --> 00:02:41,611
across national borders.

00:02:41,611 --> 00:02:49,057
From Croatia to Australia and so forth, I urge you all to just go to the GitHub homepage and click on the few of those links

00:02:49,057 --> 00:02:51,273
and see what people are building right now.

00:02:53,440 --> 00:02:56,893
I'm sure you've all seen this by now.

00:02:56,893 --> 00:03:05,438
It's the picture seen around the world - came out, I think it was 2019 - the first ever picture of a black hole.

00:03:05,438 --> 00:03:10,357
There is no telescope powerful enough to capture this image on its own

00:03:10,357 --> 00:03:17,840
so the scientists who created this image used a network of telescopes all over the planet, to collect a huge amount of the data. 

00:03:18,880 --> 00:03:23,943
They then spent years processing that data to produce this image.

00:03:23,943 --> 00:03:29,658
The Event Horizon Telescope project had hundreds of people on the core team

00:03:29,658 --> 00:03:38,522
but we at GitHub wanted to know how many other people contributed to all of the open source on which it was built, and the answer is incredible.

00:03:39,760 --> 00:03:43,197
Over 21,000.

00:03:43,197 --> 00:03:50,243
This image that needed a planet size telescope also needed a truly planet-sized team.

00:03:50,243 --> 00:03:53,734
That is the magic of open source.

00:03:54,480 --> 00:04:00,541
This isn't just the story of one project,  this is the story of almost every project.

00:04:01,280 --> 00:04:09,736
As Dr. Bowman who lead the team put it, "The developers who are committing to your repo are just the tip of the iceberg.

00:04:09,736 --> 00:04:16,036
We call this your direct contributors. When we go below the water line,

00:04:16,036 --> 00:04:20,560
below the water line are all the people who contribute to your dependencies."

00:04:22,800 --> 00:04:28,471
Now you might be thinking that the Event Horizon Telescope team is an outlier,

00:04:28,960 --> 00:04:33,680
that they wrote their code in python, that they had to use lots of high-level libraries. 

00:04:34,640 --> 00:04:39,546
That 21,000 number must be atypically high.

00:04:39,546 --> 00:04:46,421
We were curious too so we sampled a thousand of the most popular reports on GitHub around the query

00:04:46,421 --> 00:04:58,468
and we discovered that on average these projects had more than 74,403 community contributors.

00:04:58,468 --> 00:05:05,280
It is truly remarkable to consider how far we have come  in the last 20 years in open source.

00:05:07,840 --> 00:05:13,120
20 years ago almost all companies  would not use open source software  

00:05:13,120 --> 00:05:15,802
and this was for very very valid reasons.

00:05:18,240 --> 00:05:25,275
This quote by Tim O'Reilly in 1998 sums up how many companies felt about open source software. 

00:05:26,240 --> 00:05:30,480
The quote goes, "A year ago if you  had asked the is manager at a large  

00:05:30,480 --> 00:05:32,490
company about free software..."

00:05:32,490 --> 00:05:34,160
That's what they used to call open source back then

00:05:35,120 --> 00:05:39,497
"...he would have told you that he  didn't use it, that it was unsupported.  

00:05:39,497 --> 00:05:44,187
He might say that it wasn't even robust enough and certainly not commercial quality"

00:05:46,800 --> 00:05:57,356
Interestingly, today approximately 90% of all code in enterprise software comes from open source.

00:05:57,356 --> 00:06:02,000
In 22 years, open source software has gone from a fringe hobby

00:06:02,000 --> 00:06:06,507
to how fortune 500 corporations build software.

00:06:08,880 --> 00:06:15,086
Over time, open source won but the criticisms levied against it were valid. 

00:06:16,480 --> 00:06:23,041
when it comes to building robustness, we've come to learn that the small pieces loosely joined together

00:06:23,041 --> 00:06:26,303
has proven to be a winning approach.

00:06:26,303 --> 00:06:32,069
For example, core internet infrastructure is designed in this  fashion

00:06:32,069 --> 00:06:34,692
and relies on open source software.

00:06:35,520 --> 00:06:40,873
The redundancies we built into the  system are what have allowed us to scale.

00:06:42,720 --> 00:06:52,128
That final concern of Tim's manager from 1998,  that open source projects are not supported, is very valid.

00:06:52,128 --> 00:06:57,680
For example, back then if a graduate student created an open source package

00:06:58,800 --> 00:07:02,240
chances are they may not continue  to maintain it once they graduated  

00:07:03,600 --> 00:07:08,475
but now there are noble ways to  compensate open source maintainers.  

00:07:09,440 --> 00:07:12,828
Last year at GitHub, we launched GitHub Sponsors program

00:07:12,828 --> 00:07:17,192
as a way for developers who have been working freely for all of us

00:07:17,192 --> 00:07:21,520
to get compensated for the work that they do by all of us.

00:07:24,560 --> 00:07:33,695
But what makes open source communities interesting isn't just the fact of the code is free

00:07:33,695 --> 00:07:39,787
but more importantly it is their architecture of participation,

00:07:40,720 --> 00:07:46,284
specifically the process of bringing  newcomers into the community.

00:07:50,400 --> 00:07:57,680
Another way of understanding open source  is through the lens of situated learning  

00:07:57,680 --> 00:08:02,393
all as a form of cognitive apprenticeship.

00:08:05,680 --> 00:08:12,002
In this talk, I want to focus specifically on  the newbie learners

00:08:12,002 --> 00:08:15,821
who are new to both open source as well as software development.

00:08:17,200 --> 00:08:23,164
What I want to do is map out the journey  of such a person. Let's call them Ashoka.

00:08:24,960 --> 00:08:30,320
Ashoka is learning to code and  she's doing so by learning python  

00:08:30,320 --> 00:08:33,052
Her goal is to one day become a software developer.

00:08:35,120 --> 00:08:38,790
Why is any of this is even important?

00:08:38,790 --> 00:08:43,680
It is important because open source is permissionless

00:08:43,680 --> 00:08:47,649
and there are really no limits to what you can  learn

00:08:47,649 --> 00:08:55,585
and unlike other communities of practice, almost all work that is done in open source is done in the open.

00:08:55,585 --> 00:09:02,454
Further, open source is a key factor in accelerating human progress,

00:09:02,454 --> 00:09:05,385
as we have seen in the black hole image.

00:09:06,320 --> 00:09:10,473
With that, the question before us now is

00:09:10,473 --> 00:09:17,975
What does the journey from being a newbie dev to perhaps eventually becoming a maintainer

00:09:17,975 --> 00:09:21,840
or a lead contributor to a project look like?

00:09:24,960 --> 00:09:27,120
But before I delve into that,

00:09:28,720 --> 00:09:34,539
let's take a step back and understand what learning is.

00:09:34,539 --> 00:09:41,169
From theories of situated learning, we are told that it is the process of becoming

00:09:41,169 --> 00:09:50,164
a full practitioner in a community of practice and that involves two kinds of production.

00:09:50,164 --> 00:09:55,290
The first, the production of continuity with the practice itself

00:09:55,290 --> 00:10:01,418
and the second, the displacement  of the practice of the old-timers.

00:10:01,418 --> 00:10:10,299
For example, it is our newbie learner being able to fully say  that they are now a member of the python community,

00:10:10,960 --> 00:10:18,184
that they understand the norms, that they use the language and generally know where to find other pythonistas.

00:10:19,383 --> 00:10:25,200
The old-timers are the core developers  and maintainers of the different python packages  

00:10:25,200 --> 00:10:27,300
and the programming language itself.

00:10:28,120 --> 00:10:31,427
These are all the people who make up the community.

00:10:31,427 --> 00:10:34,839
These are the folks that have created the norms of work.

00:10:34,839 --> 00:10:37,040
They are the ones that have commit access to the repos,

00:10:38,189 --> 00:10:42,429
they are the ones that decide they are  deprecating a version of the language and so forth.  

00:10:43,200 --> 00:10:50,203
Together, with the other contributors in the community, they produce the continuity of the practice.

00:10:50,203 --> 00:10:55,035
They are actually the ones doing the work to make this community of practice going.

00:10:56,000 --> 00:11:03,760
But eventually the core folks will get replaced as new people come into the community  

00:11:04,400 --> 00:11:08,684
and take that journey from newbie to old timer.

00:11:12,400 --> 00:11:20,446
In this context, the process of learning is the journey from 'project newbie' to 'project maintainer'.

00:11:22,240 --> 00:11:30,000
It is the journey of being a casual  contributor: that is fixing a bug here or there, 

00:11:30,880 --> 00:11:35,600
then becoming a contributor that contributes frequently to the project, 

00:11:35,600 --> 00:11:39,290
who coordinates the activity with  other contributors and so forth  

00:11:40,080 --> 00:11:45,360
and then it is eventually spending more and  more time on the project to the point that  

00:11:45,360 --> 00:11:50,000
they may become a core contributor and might even earn some income in that role.

00:11:51,040 --> 00:11:56,524
For some folks, they go beyond that and eventually  become one of the maintainers of the project.

00:11:57,600 --> 00:12:09,130
The process of going from the casual contributor to the maintainer, can be a process of learning through cognitive apprenticeship.

00:12:09,130 --> 00:12:16,400
The important thing to note here, is that it is learning in practice.

00:12:20,720 --> 00:12:32,669
From the paper 'Situating learning in communities of practice' Jean Lave quotes one of her colleagues, Becker

00:12:32,669 --> 00:12:40,509
who observes that apprentice learners   are surrounded by the characteristic activities of their trade.

00:12:40,509 --> 00:12:48,050
apprentices have the opportunity to see community practice in its complexity early on

00:12:48,050 --> 00:12:55,554
and have a broader idea of what it is about than just the particular task in which they're engaged

00:12:55,554 --> 00:12:58,575
or that they are most easily observable.

00:13:00,080 --> 00:13:04,061
This appears to be central to  processes of learning in apprenticeship.

00:13:04,800 --> 00:13:11,840
He goes on to suggest that as a consequence of  the accessibility of the full round of activities  

00:13:11,840 --> 00:13:15,772
the apprentice makes his/her own curriculum.

00:13:15,772 --> 00:13:24,209
Apprenticeship thus provide an individualized and a realistic learning setting.

00:13:24,209 --> 00:13:29,542
Many of these claims are true of open source communities.

00:13:29,542 --> 00:13:36,186
Anyone who is new to open source is able to see all  the work done because it is done in the open.

00:13:37,920 --> 00:13:46,471
You can read all the issues, participate in the debates, read software that others have written,  

00:13:47,600 --> 00:13:53,040
attend events, make your own suggestions and so forth  

00:13:53,040 --> 00:14:00,880
and just as Lave noted, the apprentice  has to make their own curriculum.  

00:14:00,880 --> 00:14:10,485
There is no formal school curriculum that teaches you how to become a full participant in open source 

00:14:10,485 --> 00:14:17,354
and that's actually the beauty of it. It is all done in the process of the doing.

00:14:18,160 --> 00:14:27,440
You jump in and figure things out by stumbling first and then eventually you find your feet  

00:14:27,440 --> 00:14:29,840
but there are few things that can help. 

00:14:31,520 --> 00:14:35,661
There are a few things that we can do to make it easier for newcomers.

00:14:37,760 --> 00:14:44,480
One of the things we can do to make it easier for newcomers is to model our open source communities  

00:14:44,480 --> 00:14:51,080
after those that have successfully reproduced themselves.

00:14:51,080 --> 00:14:57,840
From cognitive apprenticeship we'll learn that there are three  characteristics that make this possible  

00:14:59,360 --> 00:15:05,440
The first, the community needs to furnish  newcomers with comprehensive goals,

00:15:05,440 --> 00:15:11,408
then the newcomers have to have an initial view  of the whole project

00:15:11,408 --> 00:15:20,432
and lastly they provide newcomers with near peers and exemplars of mature  practice.

00:15:20,432 --> 00:15:27,673
I will go further and add, when possible the community should pair newcomers with near peers

00:15:27,673 --> 00:15:30,906
on small sprints to get them going.

00:15:32,000 --> 00:15:38,386
These are the characteristics of communities of practice that reproduce themselves successfully.  

00:15:40,400 --> 00:15:47,120
Let's take the first characteristic and actualize  it in the context of open source.

00:15:47,120 --> 00:15:55,548
Some communities already do this by assigning 'good first issue' labels to their issues.  

00:15:56,960 --> 00:16:03,746
While this is great, and it's a start in the right direction, it isn't enough

00:16:03,746 --> 00:16:14,709
because it doesn't tell you the level of skill needed to actually complete and close an issue.

00:16:14,709 --> 00:16:25,280
In my mind, while giving that comprehensive goal, I think an improvement on using labels like the 'good first issues' 

00:16:25,280 --> 00:16:33,830
will be to create new labels that correspond to some software that correspond kind of to software engineering ladder

00:16:33,830 --> 00:16:40,000
For example, there could be an issue with the label of 'associate engineer' tag.

00:16:40,000 --> 00:16:45,875
So, you have like something like an 'associate engineer' as a label, 'software engineer 1' as a level,

00:16:45,875 --> 00:16:50,000
'software engineer 2', all the way to principal and something like that.

00:16:51,360 --> 00:16:59,095
This is one idea that people may play with to see if it helps solve the contributor-to-issue matching problem.

00:16:59,095 --> 00:17:03,360
The reason why this one is very important, is there are many people

00:17:03,360 --> 00:17:06,720
who are excited and want to  participate in open source  

00:17:07,680 --> 00:17:13,797
but they don't know if they have the skill set necessary to close the ticket that they've picked.

00:17:14,320 --> 00:17:20,906
We can help them do that by adding some  experiential label to each of the issues.

00:17:23,392 --> 00:17:29,274
Two, the second characteristics of  healthy open source communities.

00:17:29,274 --> 00:17:33,540
The newcomers have to have an initial view of the whole project.

00:17:33,540 --> 00:17:39,021
I see the cryptocurrency community do this one exceptionally well.

00:17:39,021 --> 00:17:43,142
Most of the open source projects have white papers attached

00:17:43,142 --> 00:17:46,942
where they tell you where they are ultimately going.

00:17:46,942 --> 00:17:52,796
They also have a lot of progress reports through podcasts, videos and so forth

00:17:52,796 --> 00:17:57,157
that lets anyone know where they are in the life cycle of the project.

00:17:58,320 --> 00:18:04,720
It will be really wonderful if other communities of practice adopted this from people in crypto. 

00:18:05,760 --> 00:18:12,240
And three, good healthy communities  that successfully reproduce themselves  

00:18:12,240 --> 00:18:18,693
provide newcomers with near peers and exemplars of mature practice.

00:18:18,693 --> 00:18:24,349
I think this one is by far the hardest habit to tackle

00:18:24,349 --> 00:18:28,567
because of the decentralized nature of open source communities.

00:18:29,520 --> 00:18:36,215
I think we at GitHub perhaps may have a role to play here with this matching problem

00:18:36,215 --> 00:18:41,840
with regards to near pairs but I will say that the emphasis is on MAY.

00:18:43,440 --> 00:18:49,253
With respect to matching newcomers with exemplars of mature practice,

00:18:49,253 --> 00:18:54,425
there are many ways that we've done this successfully as open source communities.

00:18:54,425 --> 00:18:58,493
One that comes to mind is Google's 'Summer of Code' project.

00:18:58,493 --> 00:19:02,434
It naturally creates an environment where someone can see

00:19:02,434 --> 00:19:07,901
what the mature practice of being a software engineer  in a large project that is open source looks like.

00:19:08,880 --> 00:19:11,823
Further, there are many communities that share their process of work.

00:19:11,823 --> 00:19:17,449
There are many people on Twitch who stream themselves writing code.

00:19:17,449 --> 00:19:21,718
There are many people also streaming themselves writing code on YouTube.

00:19:21,718 --> 00:19:26,640
These are all valid ways for a newcomer to see exemplars of mutual practice.

00:19:28,640 --> 00:19:35,520
We are so fortunate to be living in this era,  where the organizing unit is the online community.

00:19:36,720 --> 00:19:41,207
20 years ago or perhaps 30 years ago

00:19:41,207 --> 00:19:46,640
it would have been impossible to see exemplars of mature practice in software development

00:19:46,640 --> 00:19:51,360
if you were not related to the software developer yourself

00:19:51,360 --> 00:19:56,906
but the world that we've created  today allows us to do that beautifully.

00:20:00,320 --> 00:20:10,160
One of the greatest things about open source is that you don't have to be a software developer  

00:20:10,160 --> 00:20:13,431
to participate in an open source community.

00:20:16,102 --> 00:20:23,522
Many people start their journey in open source by organizing meetups, attending meetups,

00:20:23,522 --> 00:20:30,147
I'm sure today there are some people who are with us in this conference who are just starting their journey

00:20:30,147 --> 00:20:33,840
and the start of their journey is this conference.

00:20:34,400 --> 00:20:41,974
If there is an open source project you're excited about,  you can organize events for it

00:20:41,974 --> 00:20:47,997
I see this happen all the time where those who are most passionate about the project,

00:20:47,997 --> 00:20:55,329
who might initially be on the periphery but have a yearning to deepen their engagement with the project,

00:20:55,329 --> 00:21:03,153
start by organizing learning clubs or meetups designed specifically to create learning ports

00:21:03,153 --> 00:21:05,600
where newbies support eachother on their journey.

00:21:06,800 --> 00:21:13,739
A great example of this is the freeCodeCamp community.

00:21:13,739 --> 00:21:20,623
The interesting thing about this community, is it has over 4,000 contributors

00:21:20,623 --> 00:21:23,840
and it is a community designed specifically

00:21:23,840 --> 00:21:28,218
to onboard people into the professional  work of software development

00:21:28,218 --> 00:21:32,432
and they've done so successfully and it's all open source.

00:21:32,432 --> 00:21:33,680
All the work is done in the open.

00:21:36,560 --> 00:21:43,790
Another way that a newbie journeys to become a master

00:21:43,790 --> 00:21:50,724
is to start a small engagement with the project by sponsoring the project.

00:21:50,724 --> 00:21:56,560
This allows you to continue to pay attention to the project

00:21:56,560 --> 00:22:01,525
and more importantly it allows you a  means of being generative to the community.  

00:22:02,080 --> 00:22:06,560
So, maybe you don't quite have a good  grasp on the programming language  

00:22:07,200 --> 00:22:12,031
that the project is written in but you care about the project,

00:22:12,031 --> 00:22:17,040
you want to be generative to the project. You should consider sponsoring the project.

00:22:20,400 --> 00:22:26,313
Another role that folks play in open source is triaging issues in the project.

00:22:26,313 --> 00:22:32,471
This is a very simple thing to do but can be very very time consuming.

00:22:33,280 --> 00:22:41,949
Some of us, um... some of my colleagues have actually written machine learning apps, GitHub apps, 

00:22:41,949 --> 00:22:49,399
that help to automatically predict what label an issue should have, so you can do like auto triaging for them.

00:22:49,399 --> 00:22:53,995
There are many maintainers who spend the significant amount of their time

00:22:53,995 --> 00:22:58,080
just going through issues and figuring out who and where the issue should go to

00:22:58,720 --> 00:23:05,948
so this is a very important role as one becomes a deeper contributor to a project.

00:23:07,840 --> 00:23:12,240
Another role that people play  as they make this progress  

00:23:12,240 --> 00:23:15,920
into a community is responding to mailing list questions.

00:23:17,440 --> 00:23:24,800
One of the key indicators of health for a project  is how long it takes to turn around open tasks  

00:23:24,800 --> 00:23:32,000
that require action like answering questions,  code review and merging pull requests.

00:23:34,400 --> 00:23:43,052
As a person goes from the periphery of the project like the casual contributor or someone who only sponsors the project

00:23:43,052 --> 00:23:47,435
to someone who has a deeper engagement with the project,

00:23:47,435 --> 00:23:53,594
one way to deepen your engagement without necessarily writing code

00:23:53,594 --> 00:24:04,149
is to help manage the mailing list and the online communities around the project.

00:24:04,149 --> 00:24:11,066
As our newbie Ashoka is gaining their  wings we see them make this progress

00:24:11,066 --> 00:24:20,320
from a monthly engaged non-coding contributor to perhaps be weekly engaged,

00:24:20,320 --> 00:24:25,404
every week they're engaging with the project in a non-coding capacity,

00:24:25,404 --> 00:24:33,215
to eventually engaging with the project in a coding capacity by answering questions.

00:24:33,215 --> 00:24:41,738
Even without having commit access to the code base, one can contribute technical knowledge back to the community

00:24:41,738 --> 00:24:46,426
by answering questions on platforms like Stack Overflow.

00:24:46,426 --> 00:24:55,535
This is something that a lot of people find daunting, not because they do not know the answers to the question,

00:24:55,535 --> 00:24:58,080
but since it's open source, all our work is in the open

00:24:58,720 --> 00:25:04,547
there might be negative feedback and people might be unkind.

00:25:04,547 --> 00:25:10,123
Just let's all take a moment, that it takes a lot of bravery and courage to share your knowledge in public

00:25:10,123 --> 00:25:13,822
and so let's practice a bit of kindness.

00:25:13,822 --> 00:25:21,410
In learning theory, this process of question/answer, of teaching, reciprocal teaching

00:25:21,680 --> 00:25:28,705
is actually one of the key indicators  of transfer that is expertise.

00:25:29,840 --> 00:25:35,285
It is the attainment of knowledge to an extent  that you can teach it back to someone else. 

00:25:35,920 --> 00:25:42,880
As you explain a solution to somebody else,  it helps you, the learner, grow in competency  

00:25:42,880 --> 00:25:49,258
and gives you external credibility to the rest of the community

00:25:49,258 --> 00:25:55,275
and as with all things in open source this is also permissionless.

00:25:55,275 --> 00:25:58,000
No one can stop anyone from answering questions.

00:25:58,800 --> 00:26:03,054
When a person is ready, they can start sharing their knowledge with the community

00:26:03,054 --> 00:26:09,528
by actually helping others on-board into the community and giving clarity.

00:26:10,289 --> 00:26:17,123
As the journey continues our newbie will now no longer be a newbie.

00:26:17,123 --> 00:26:22,236
At this point, if you're answering questions, you're engaging with the mailing list

00:26:22,236 --> 00:26:27,120
you are a solid journey-person in that community of practice.

00:26:29,200 --> 00:26:36,454
they then start contributing code based activities to the project

00:26:36,454 --> 00:26:44,596
by making code commits, opening pull requests and perhaps submitting pull  request reviews.

00:26:44,942 --> 00:26:48,880
Many people stop at this stage

00:26:48,880 --> 00:26:56,240
but some others want an even deeper engagement  so they become maintainers of the project.

00:26:57,280 --> 00:27:01,925
This is where the newcomers come in and displace the old-timers.  

00:27:02,240 --> 00:27:06,290
Some go further and this becomes the only thing that they do professionally.

00:27:07,600 --> 00:27:14,880
All the steps that I have outlined don't have  to happen in the sequence that I outlined them  

00:27:14,880 --> 00:27:22,220
but this is one of the ways that a novice can go from being an outsider to an old-timer

00:27:22,220 --> 00:27:30,000
and this is the process of cognitive apprenticeship within the context of open source

00:27:30,000 --> 00:27:36,320
but more importantly, why is this even important?

00:27:38,400 --> 00:27:44,061
the most important part of what I've outlined is that for the most part,

00:27:44,061 --> 00:27:49,459
becoming a weekly, engaged coding contributor to an open source project

00:27:49,459 --> 00:27:54,015
is a permissionless way of becoming a software engineer.

00:27:55,200 --> 00:28:00,400
This path puts you in a place where you practice situated learning,

00:28:00,400 --> 00:28:05,514
where you can learn on the job with very little negative consequence.  

00:28:06,720 --> 00:28:11,821
It also allows you to seize your power  and do your bit to create the future. 

00:28:12,960 --> 00:28:19,240
Conventional education is being disrupted and future developers don't necessarily

00:28:19,240 --> 00:28:25,535
have to go to a four-year learning institution in order to start adding technical value to society.

00:28:26,800 --> 00:28:34,160
And for those in school, open source creates a path where they don't have to wait

00:28:34,160 --> 00:28:39,841
till they have their accreditation before they start adding value.

00:28:39,841 --> 00:28:48,225
So, the question I'm going to leave all of us with is, if you are part of an open source community

00:28:48,225 --> 00:28:53,389
could you practice the three characteristics to make your community successful?

00:28:53,389 --> 00:29:01,946
And figure out a clearer, tighter way to onboard newcomers and hopefully share that process with other communities

00:29:01,946 --> 00:29:08,728
so we can get the work of accelerating human progress going even faster.

00:29:08,728 --> 00:29:13,254
Thank-you. That brings me to the end of my talk

00:29:15,680 --> 00:29:22,320
HOST: Thank you, Omoju uh that was fantastic and I've  been watching the the chat and seeing everyone  

00:29:22,320 --> 00:29:29,520
having their "It me!" kind of moments   about coming into LCA years ago and  

00:29:29,520 --> 00:29:35,280
not knowing anything and just the community  sort of getting around those people and them  

00:29:35,280 --> 00:29:40,320
being exposed to it and learning  and coming on that journey themselves

00:29:40,320 --> 00:29:45,427
has just been really fantastic to see. There was a couple of questions,

00:29:45,427 --> 00:29:48,274
Sorry I'm just getting them. They're sending them through to me at the moment

00:29:48,274 --> 00:29:53,470
OMOJU: That's fine. HOST: Okay, so the first one we've got here is

00:29:53,470 --> 00:29:59,961
"How do we better support contributors at the  higher end of the ladder to take on leadership roles?"

00:29:59,961 --> 00:30:09,097
OMOJU: I think a lot of automation is going to be necessary here because many people,

00:30:09,097 --> 00:30:14,240
I've heard this from so many contributors at the higher end of the ladder,

00:30:14,240 --> 00:30:18,160
a lot of people are opening  pull requests on their projects  

00:30:18,160 --> 00:30:21,481
and they're finding that the pull requests that  have been opened,

00:30:21,481 --> 00:30:25,963
the quality of the PRs are not quite up to the quality of what they're looking for

00:30:25,963 --> 00:30:31,016
so they can't merge them back into main and they don't have enough time to actually

00:30:31,016 --> 00:30:34,311
give the necessary feedback of why this is not good enough.

00:30:34,800 --> 00:30:42,000
One of the things open source maintainers and  open leveling up contributors at the higher end  

00:30:42,000 --> 00:30:49,633
should completely embrace is DevOps, having CI built into your repo.

00:30:49,633 --> 00:30:54,317
Things that you can automate and can give feedback so that when somebody opens a pull request,

00:30:54,317 --> 00:30:58,187
it has to go through all the different checks, everything has to turn green

00:30:58,187 --> 00:31:02,656
so that when it's green then you know it has met all the criteria you've set up

00:31:02,656 --> 00:31:08,695
and then you can then spend time doing the pull request review and then giving feedback.

00:31:08,695 --> 00:31:09,900
HOST: Yep. OMOJU: Just DevOps.

00:31:09,900 --> 00:31:13,585
Just do as much automation as you can in your build process.

00:31:13,585 --> 00:31:18,007
HOST: (LAUGHING) Yes, I love it. Speaking my language.

00:31:18,007 --> 00:31:19,772
Okay, we've got another one...

00:31:19,772 --> 00:31:25,920
"How do we bridge the gap between being a maintainer and being a mentor that can train and grow new contributors?"

00:31:28,080 --> 00:31:33,605
OMOJU: I think it's actually very challenging to  do both and do both well

00:31:33,605 --> 00:31:37,123
so if I was the maintainer and I was the sole maintainer of the project

00:31:37,123 --> 00:31:43,098
you can't actually be the mentor. What you can do in mentorship is...

00:31:43,098 --> 00:31:48,971
actually the most effective mentors are the near peers of the person you're mentoring

00:31:48,971 --> 00:31:55,865
so if you're a maintainer and you want to mentor someone the only person that is actually giving you the bang for the buck

00:31:55,865 --> 00:32:02,160
is for you to mentor the maintain commit access contributors,  people who are actually doing the most work  

00:32:02,880 --> 00:32:08,956
ever the best way to mentor is get the near mentors together and this is where the matching problem is difficult

00:32:08,956 --> 00:32:15,111
because you need to figure out. Someone that is slightly ahead of you is the best kind of mentor for you

00:32:15,111 --> 00:32:22,971
but most of us don't know that so we think, if I want to work on Linux, Linus Torvalds is the best mentor.

00:32:22,971 --> 00:32:26,720
Sorry, my camera just went out, it'll be right back.

00:32:26,720 --> 00:32:33,555
Linus is not the best mentor because he's an expert and it's so far removed from the challenges of a newbie.

00:32:33,555 --> 00:32:37,628
Your best mentor is someone that is six months ahead of you.

00:32:39,280 --> 00:32:45,508
HOST: Right. Yeah, cool. Alright, another question we've got from the audience,

00:32:45,508 --> 00:32:52,480
With the changes this past year due to the pandemic, do you see overlap in steps to facilitate people joining  

00:32:52,480 --> 00:32:56,259
and people moving to more online work?"

00:32:56,259 --> 00:33:04,555
OMOJU: Yeah, absolutely. Most of the work that a lot of us are doing who have not done work in open source before,

00:33:04,555 --> 00:33:11,655
a lot of people are picking up the practices of doing work in the open.

00:33:11,655 --> 00:33:18,852
Open source has always been remote-friendly, it had to be, that's the whole point of the thing

00:33:18,852 --> 00:33:22,720
and everybody now is learning how to do remote work

00:33:22,720 --> 00:33:28,426
As they become masters at remote work, it is a lot easier to onboard in open source

00:33:28,426 --> 00:33:34,640
because the practices and habits are not novel they're just, what you just do at work or you do at school,  

00:33:34,640 --> 00:33:39,678
now you're just applying it to a different set of communities.

00:33:39,678 --> 00:33:42,160
HOST: Yep, yep. 

00:33:43,040 --> 00:33:48,325
"Is there a write-up of this thesis somewhere that we can refer to when bringing this to our projects?"

00:33:49,219 --> 00:33:59,440
OMOJU: Ooh lah lah, uh... I'm sure there is, but I don't know. I just put this together. I got very excited about this  

00:34:00,320 --> 00:34:07,760
because I did work in learning theory,  I also do work in machine learning  

00:34:07,760 --> 00:34:14,586
and a lot of the steps are the same thing whether it's an algorithm doing it or a human doing it.

00:34:15,120 --> 00:34:21,536
So, I brought this together but I am certain I am not the first person to think of this,

00:34:21,536 --> 00:34:27,649
so a few useful Google searches and I'm sure we can find a thesis.

00:34:27,649 --> 00:34:33,438
HOST: Okay. Yeah, fantastic. I did see a couple of resources, books and websites and things like that in the chat as well

00:34:33,438 --> 00:34:38,520
so I think people are sort of, sharing that information as well, which is fantastic to see.

00:34:38,520 --> 00:34:42,211
Another question we have is... "How do you balance time taken

00:34:42,211 --> 00:34:45,891
in encouraging newcomers with time takenreviewing and developing?

00:34:45,891 --> 00:34:52,930
Just monitoring mailing lists and IRC channels  can take up 100% of my time if I let it.

00:34:54,480 --> 00:35:00,186
OMOJU: It WILL take 100% of your time so you have to schedule focus time

00:35:01,040 --> 00:35:07,819
and you have to be very intentional about how much time you're spending in open source.

00:35:07,819 --> 00:35:11,605
Let's say, for example, you choose to spend 15 hours a week.

00:35:13,040 --> 00:35:22,201
Before your week starts, allot time for yourself. Of this 15 hours, five hours is going to be focused work.

00:35:22,201 --> 00:35:25,979
That means I'm writing code, I'm reviewing pull requests.

00:35:25,979 --> 00:35:36,160
The other 10 hours is going to be doing IRC channels and you have to be very very disciplined to log off  

00:35:37,280 --> 00:35:41,718
and disengage from the work because if you don't do that you will burn out

00:35:41,718 --> 00:35:46,217
and that's one of the things that happens a lot in open source  where people are just burnt out

00:35:46,217 --> 00:35:50,438
and they're just waiting to hand over and the quality of the  work is not the best,

00:35:50,438 --> 00:35:54,859
they just don't want to do it anymore. We don't want you to get so burnt out.

00:35:54,859 --> 00:36:01,948
we want you to still feel fresh and invigorated so you must really really be aggressively stingy with your time

00:36:01,948 --> 00:36:07,006
and make sure that you spend time doing that which you cared the most about.

00:36:07,006 --> 00:36:10,828
For many people who come into open source who are software developers

00:36:10,828 --> 00:36:14,506
you became a software developer because you wanted to write code.

00:36:14,506 --> 00:36:16,776
You don't want to be a manager, talking to people all the time,

00:36:16,776 --> 00:36:20,269
so make sure you put some time together to actually write that code

00:36:20,269 --> 00:36:24,303
so you replenish that part of you that is most passionate about the work.

00:36:25,120 --> 00:36:27,783
HOST: Yep Okay OMOJU: It sounds selfish but you have to do it

00:36:27,783 --> 00:36:32,212
otherwise you'll burn out. HOST: Yeah, absolutely. Learning to say no, right?

00:36:32,212 --> 00:36:36,323
Yeah, I think this is our last question so we'll call it after this one.

00:36:36,323 --> 00:36:40,642
"Contributors are often technical but don't  have experience in management.

00:36:40,642 --> 00:36:46,122
Any tips for helping a project to scale so it's better able to help out newcomers?"

00:36:46,122 --> 00:36:53,219
OMOJU: Contributors who are not managers should go and buy books and learn how to manage.

00:36:53,219 --> 00:36:59,986
It's very very important. It is just another skill you have to learn to master

00:36:59,986 --> 00:37:08,701
and in the meanwhile, practice kindness. Be bold enough to say I don't know

00:37:08,701 --> 00:37:15,531
and bring people into the community who may actually not be technical but are fantastic managers.

00:37:15,531 --> 00:37:20,255
Hopefully you pair together and you learn  how to manage and they learn how to write code.

00:37:21,600 --> 00:37:26,242
HOST: I think that's a really fantastic answer, and a really terrific point to end on.

00:37:26,242 --> 00:37:32,080
Thank you so much for your time this morning, this afternoon. It's been terrific to hear from you.

00:37:33,040 --> 00:37:40,880

YouTube URL: https://www.youtube.com/watch?v=JShvXcL66NQ


