Title: "Getting started with Docker and Swarm" - Matthew Cengia (LCA 2021 Online)
Publication date: 2021-01-31
Playlist: linux.conf.au 2021
Description: 
	Matthew Cengia

https://lca2021.linux.org.au/schedule/presentation/82/

Docker has been around for almost 8 years now, but I get the impression that a lot of systems administrators and software developers may only have a basic understanding of its operation, and how its functionality can be leveraged to make software easy to develop, test, and deploy. This talk aims to give an overview of what Docker can be used for, and some concrete examples on how to use Docker and Swarm to package up and deploy apps. We'll cover Dockerfiles, docker-compose.yml files and how they fit together, and, time permitting, how to use Docker BuildX and Docker App to build multi-platform container images, and package collections of containerised services for easy deployment and versioning. Slowly converting apps to work with Docker is a great way to make them automatically more scalable, consistent, and portable. Participants will be able to work with Docker on their local machines, or use Play With Docker via their web browser to follow along.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sat Jan 23 16:40:00 2021 at Blemings Labs
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,120 --> 00:00:20,000
the system administration mini conf

00:00:17,279 --> 00:00:21,600
we have two more talks for you today

00:00:20,000 --> 00:00:23,359
first up we have matthew

00:00:21,600 --> 00:00:24,720
telling us about getting started with

00:00:23,359 --> 00:00:28,080
docker and swarm

00:00:24,720 --> 00:00:30,160
over to you matthew thanks erin

00:00:28,080 --> 00:00:32,079
hi my name is matt uh my pronouns are he

00:00:30,160 --> 00:00:34,160
him and his and as you and said i'm

00:00:32,079 --> 00:00:34,800
going to be talking about uh docker and

00:00:34,160 --> 00:00:37,840
swarm

00:00:34,800 --> 00:00:39,360
now um if you if any of you saw steve

00:00:37,840 --> 00:00:41,520
ellis talk earlier

00:00:39,360 --> 00:00:43,440
um this talk is not for you this is very

00:00:41,520 --> 00:00:45,120
much an introduction

00:00:43,440 --> 00:00:46,960
um which i have condensed down from

00:00:45,120 --> 00:00:48,160
about about 45 minutes hopefully to

00:00:46,960 --> 00:00:50,399
about 15.

00:00:48,160 --> 00:00:51,680
um and it's a real a real basic

00:00:50,399 --> 00:00:52,239
introduction of like why you might want

00:00:51,680 --> 00:00:54,879
to use

00:00:52,239 --> 00:00:56,480
docker uh so in the spirit of

00:00:54,879 --> 00:00:57,920
reconciliation i'd like to acknowledge

00:00:56,480 --> 00:00:59,440
the traditional custodians in the

00:00:57,920 --> 00:01:00,719
country throughout australia and

00:00:59,440 --> 00:01:02,640
their connections to the land seeing

00:01:00,719 --> 00:01:04,159
community i pay my respects to their

00:01:02,640 --> 00:01:05,600
elders past and present

00:01:04,159 --> 00:01:07,119
and extend that respect to all

00:01:05,600 --> 00:01:09,600
aboriginal and torres strait islander

00:01:07,119 --> 00:01:11,920
peoples today

00:01:09,600 --> 00:01:14,080
so i only recently discovered docker um

00:01:11,920 --> 00:01:15,439
about six to eight months ago uh during

00:01:14,080 --> 00:01:16,960
lockdown

00:01:15,439 --> 00:01:18,640
and it has completely changed how i

00:01:16,960 --> 00:01:20,320
think about deploying software so

00:01:18,640 --> 00:01:22,080
i figured maybe other people haven't

00:01:20,320 --> 00:01:23,360
discovered it yet and this might be

00:01:22,080 --> 00:01:25,840
useful to them

00:01:23,360 --> 00:01:27,920
um so docker is what is known as a

00:01:25,840 --> 00:01:31,360
container runtime which enables you to

00:01:27,920 --> 00:01:33,759
build deploy and manage containers

00:01:31,360 --> 00:01:35,439
containers are kind of like virtual

00:01:33,759 --> 00:01:38,960
machines

00:01:35,439 --> 00:01:40,880
except really not quite um

00:01:38,960 --> 00:01:42,479
they are a combination of a disk image

00:01:40,880 --> 00:01:45,520
or file system into which

00:01:42,479 --> 00:01:47,920
uh you get rooted

00:01:45,520 --> 00:01:48,960
um and they consist of a bunch of name

00:01:47,920 --> 00:01:51,360
spaces and c

00:01:48,960 --> 00:01:53,200
groups which limit what a container can

00:01:51,360 --> 00:01:54,799
see and what it can do

00:01:53,200 --> 00:01:57,040
a container can actually be created with

00:01:54,799 --> 00:01:59,200
a handful of standard linux commands

00:01:57,040 --> 00:02:00,479
um without actually needing docker but

00:01:59,200 --> 00:02:01,360
docker makes a whole bunch of things

00:02:00,479 --> 00:02:03,040
easier

00:02:01,360 --> 00:02:04,719
um if you're interested in getting into

00:02:03,040 --> 00:02:06,719
the detail of how containers

00:02:04,719 --> 00:02:08,239
are created there's this great talk by

00:02:06,719 --> 00:02:10,319
liz rice which i have linked

00:02:08,239 --> 00:02:11,520
incidentally the github link at the top

00:02:10,319 --> 00:02:13,200
of my slides

00:02:11,520 --> 00:02:16,640
link to the examples that i'm using

00:02:13,200 --> 00:02:18,959
today as well as the slide deck

00:02:16,640 --> 00:02:20,080
so containers can help you by creating a

00:02:18,959 --> 00:02:23,760
consistent environment

00:02:20,080 --> 00:02:25,280
for um for all of your applications

00:02:23,760 --> 00:02:27,680
uh that environment could be the same

00:02:25,280 --> 00:02:29,920
between development production testing

00:02:27,680 --> 00:02:31,360
um because you're you're controlling the

00:02:29,920 --> 00:02:33,040
file system you have

00:02:31,360 --> 00:02:34,959
full access to like making sure that

00:02:33,040 --> 00:02:36,160
everything is pretty much the same as it

00:02:34,959 --> 00:02:38,319
would be in production

00:02:36,160 --> 00:02:41,040
it allows you to segregate between apps

00:02:38,319 --> 00:02:43,680
um sandbox and limit their privileges

00:02:41,040 --> 00:02:45,280
isolate their code from their data

00:02:43,680 --> 00:02:48,000
simplify their deployment

00:02:45,280 --> 00:02:49,680
um and it's worth noting that converting

00:02:48,000 --> 00:02:51,519
an app to run within a container doesn't

00:02:49,680 --> 00:02:52,959
have to be a big unmanageable project

00:02:51,519 --> 00:02:54,480
i'll go into a little bit more detail

00:02:52,959 --> 00:02:56,080
about that later on

00:02:54,480 --> 00:02:57,680
um so the first thing you want to do is

00:02:56,080 --> 00:02:58,879
you want to install docker

00:02:57,680 --> 00:03:00,319
i haven't got time to go into the

00:02:58,879 --> 00:03:01,519
details of that and it's really well

00:03:00,319 --> 00:03:03,680
documented on their website

00:03:01,519 --> 00:03:05,120
they do have like a curl pipe bash thing

00:03:03,680 --> 00:03:07,440
if you really want to use that

00:03:05,120 --> 00:03:08,400
um but basically on a debian system for

00:03:07,440 --> 00:03:10,319
example that will just

00:03:08,400 --> 00:03:11,680
set up some repos and install you know

00:03:10,319 --> 00:03:12,560
the packages from the official docker

00:03:11,680 --> 00:03:14,560
repo

00:03:12,560 --> 00:03:16,000
or you can pull it from your favorite

00:03:14,560 --> 00:03:17,760
distribution if you'd like to use that

00:03:16,000 --> 00:03:19,360
version

00:03:17,760 --> 00:03:21,680
if you'd like to play along there are

00:03:19,360 --> 00:03:23,280
instructions in the github repo at the

00:03:21,680 --> 00:03:26,400
top of this page

00:03:23,280 --> 00:03:26,400
and that's them there as well

00:03:26,480 --> 00:03:30,480
so if you want to run a docker container

00:03:29,280 --> 00:03:31,920
i was going to go through these as

00:03:30,480 --> 00:03:32,879
examples but i don't think i'll have the

00:03:31,920 --> 00:03:34,319
time so i'm just going to go with the

00:03:32,879 --> 00:03:36,480
screenshots for the moment

00:03:34,319 --> 00:03:38,319
um you could run a command like docker

00:03:36,480 --> 00:03:41,680
run minus minus rm

00:03:38,319 --> 00:03:44,959
minus it space ubuntu spacebash

00:03:41,680 --> 00:03:46,959
so that will uh that tells docker

00:03:44,959 --> 00:03:49,440
go and pull the ubuntu container from

00:03:46,959 --> 00:03:52,239
the official docker repository or the

00:03:49,440 --> 00:03:53,519
official docker registry minus minus rm

00:03:52,239 --> 00:03:54,000
says delete the container when i'm done

00:03:53,519 --> 00:03:56,799
with it

00:03:54,000 --> 00:03:57,680
and minus i and minus t say make this

00:03:56,799 --> 00:03:59,920
interactive

00:03:57,680 --> 00:04:01,680
and give me a terminal and batch says

00:03:59,920 --> 00:04:03,920
what command you want it to run

00:04:01,680 --> 00:04:05,519
when it runs so once you run that it

00:04:03,920 --> 00:04:07,280
says oh look i couldn't find

00:04:05,519 --> 00:04:08,879
ubuntu on my machine so i'm going to

00:04:07,280 --> 00:04:11,439
pull all of the components

00:04:08,879 --> 00:04:12,080
of that container off the internet um

00:04:11,439 --> 00:04:13,840
and then

00:04:12,080 --> 00:04:15,519
i'm going to run it and it puts you in a

00:04:13,840 --> 00:04:17,199
shell because you asked it for bash

00:04:15,519 --> 00:04:18,880
and you can see if i run a ps within

00:04:17,199 --> 00:04:21,199
that shell that

00:04:18,880 --> 00:04:22,160
um the bash that i'm running is actually

00:04:21,199 --> 00:04:23,600
p1

00:04:22,160 --> 00:04:25,360
according to the container so you can

00:04:23,600 --> 00:04:27,199
see that it's isolated from

00:04:25,360 --> 00:04:28,960
my the rest of my operating system and

00:04:27,199 --> 00:04:32,479
then when i exit the container because i

00:04:28,960 --> 00:04:35,120
pass minus minus rm it's going to

00:04:32,479 --> 00:04:36,639
close the container off so i mean that's

00:04:35,120 --> 00:04:39,759
a pretty basic example

00:04:36,639 --> 00:04:41,120
not super useful but bear with me um

00:04:39,759 --> 00:04:43,440
let's talk a little bit about how

00:04:41,120 --> 00:04:46,479
container images are created first

00:04:43,440 --> 00:04:48,320
um they're file systems that are usually

00:04:46,479 --> 00:04:52,080
built using a docker file

00:04:48,320 --> 00:04:53,759
um they can be based off other images

00:04:52,080 --> 00:04:54,080
which creates a set of layers so i could

00:04:53,759 --> 00:04:55,680
say

00:04:54,080 --> 00:04:57,440
i want to base this image off the ubuntu

00:04:55,680 --> 00:04:58,639
image or i want to base it off this

00:04:57,440 --> 00:05:02,160
other image which is based off

00:04:58,639 --> 00:05:02,720
a different image um docker files are

00:05:02,160 --> 00:05:05,600
just a

00:05:02,720 --> 00:05:07,680
configuration language that allow you to

00:05:05,600 --> 00:05:08,880
specify how these layers get built so

00:05:07,680 --> 00:05:10,800
let's have a look at a really basic

00:05:08,880 --> 00:05:14,080
example

00:05:10,800 --> 00:05:14,479
this is a docker file that just says

00:05:14,080 --> 00:05:17,600
take

00:05:14,479 --> 00:05:20,800
the ubuntu 2004

00:05:17,600 --> 00:05:22,880
container image off docker hub and we're

00:05:20,800 --> 00:05:25,199
going to change the default command

00:05:22,880 --> 00:05:26,320
that it uses now by default the ubuntu

00:05:25,199 --> 00:05:27,840
image um

00:05:26,320 --> 00:05:30,080
starts bash so we didn't actually need

00:05:27,840 --> 00:05:34,080
to explicitly start bash in our previous

00:05:30,080 --> 00:05:36,560
set of slides um but i have changed that

00:05:34,080 --> 00:05:38,639
so that it is instead echoing hello

00:05:36,560 --> 00:05:41,440
world and you can see

00:05:38,639 --> 00:05:43,520
that i've got it in a folder here so if

00:05:41,440 --> 00:05:44,320
i were to run docker build which builds

00:05:43,520 --> 00:05:46,080
that image

00:05:44,320 --> 00:05:48,479
i specify the current directory using

00:05:46,080 --> 00:05:50,639
dot i use minus t

00:05:48,479 --> 00:05:51,759
to tag the image with the label hello

00:05:50,639 --> 00:05:52,880
world um

00:05:51,759 --> 00:05:54,320
and you can see that it goes and builds

00:05:52,880 --> 00:05:55,759
the image and then when i run it in the

00:05:54,320 --> 00:05:58,720
same way that we ran the image before

00:05:55,759 --> 00:06:00,479
it says hello world and then it exits um

00:05:58,720 --> 00:06:02,080
so basically docker allows you to run

00:06:00,479 --> 00:06:03,600
applications in an environment with a

00:06:02,080 --> 00:06:05,440
known image

00:06:03,600 --> 00:06:06,479
a consistent it's consistent between

00:06:05,440 --> 00:06:07,199
development testing production

00:06:06,479 --> 00:06:08,479
environments

00:06:07,199 --> 00:06:10,479
and it keeps apps separated and

00:06:08,479 --> 00:06:11,919
contained so they don't affect the host

00:06:10,479 --> 00:06:14,240
os

00:06:11,919 --> 00:06:16,080
um it makes management managing and

00:06:14,240 --> 00:06:17,600
upgrading and removing quite trivial

00:06:16,080 --> 00:06:19,199
because you can basically pull you know

00:06:17,600 --> 00:06:20,560
set up a new container pull it down and

00:06:19,199 --> 00:06:21,280
then say all right close this one and

00:06:20,560 --> 00:06:24,479
start up the next

00:06:21,280 --> 00:06:26,160
start up the new version um

00:06:24,479 --> 00:06:28,000
so that's great if you've got a single a

00:06:26,160 --> 00:06:30,720
single container what if you've got

00:06:28,000 --> 00:06:32,080
images an app that uses multiple

00:06:30,720 --> 00:06:34,319
containers like for example

00:06:32,080 --> 00:06:36,160
a web server that uses a database so we

00:06:34,319 --> 00:06:39,360
can group these together

00:06:36,160 --> 00:06:42,000
um these are colloquially known as pods

00:06:39,360 --> 00:06:43,840
um this can be done manually docker with

00:06:42,000 --> 00:06:45,600
a handful of commands but using a tool

00:06:43,840 --> 00:06:46,880
like docker compose on your desktop is a

00:06:45,600 --> 00:06:49,520
little bit more elegant

00:06:46,880 --> 00:06:51,840
again docker compose is easy to install

00:06:49,520 --> 00:06:54,080
it's a single binary application

00:06:51,840 --> 00:06:55,599
um and there are clear instructions on

00:06:54,080 --> 00:06:57,440
the dock website about that

00:06:55,599 --> 00:07:00,160
so to use docker compose you can create

00:06:57,440 --> 00:07:00,960
a file called docker dash compose.yml

00:07:00,160 --> 00:07:04,400
which is

00:07:00,960 --> 00:07:05,919
a yaml format file um it contains

00:07:04,400 --> 00:07:07,199
configurations for grouping related

00:07:05,919 --> 00:07:09,120
containers so we're going to make a

00:07:07,199 --> 00:07:10,800
really simple web app that stores data

00:07:09,120 --> 00:07:12,720
within readers

00:07:10,800 --> 00:07:13,840
so this is the these are the files that

00:07:12,720 --> 00:07:15,680
i'm playing with here so we've got a

00:07:13,840 --> 00:07:16,479
docker file we've got my docker compose

00:07:15,680 --> 00:07:18,319
file

00:07:16,479 --> 00:07:19,520
we've got a requirements.txt and we've

00:07:18,319 --> 00:07:23,039
got a webapp.py

00:07:19,520 --> 00:07:26,720
so the last two first basically this is

00:07:23,039 --> 00:07:28,160
a web app that does nothing more than

00:07:26,720 --> 00:07:30,479
connects to a redis database on a

00:07:28,160 --> 00:07:33,759
separate host called redis over here

00:07:30,479 --> 00:07:36,160
um and then it says hello

00:07:33,759 --> 00:07:38,000
you know my refresh account is whatever

00:07:36,160 --> 00:07:39,199
and it pulls that data out of redis

00:07:38,000 --> 00:07:40,720
so this is just to demonstrate that

00:07:39,199 --> 00:07:42,400
these two containers are not talking to

00:07:40,720 --> 00:07:44,160
each other and the requirements.txt is

00:07:42,400 --> 00:07:45,520
just the um the python requirements for

00:07:44,160 --> 00:07:48,000
the app

00:07:45,520 --> 00:07:49,680
uh the dockerfile is a little complex

00:07:48,000 --> 00:07:52,000
it's saying that we're going to pull

00:07:49,680 --> 00:07:53,919
the python alpine image alpine is a tiny

00:07:52,000 --> 00:07:56,160
linux distro that's optimized for

00:07:53,919 --> 00:07:57,520
doc for docker containers um we're going

00:07:56,160 --> 00:07:58,319
to set our working directory to slash

00:07:57,520 --> 00:07:59,360
app

00:07:58,319 --> 00:08:01,360
we're going to set some environment

00:07:59,360 --> 00:08:02,479
variables we're going to use the alpine

00:08:01,360 --> 00:08:04,840
package manager

00:08:02,479 --> 00:08:06,960
to pull in some dependencies copy in the

00:08:04,840 --> 00:08:08,319
requirements.txt

00:08:06,960 --> 00:08:10,400
we're going to use pip to install our

00:08:08,319 --> 00:08:12,319
requirements we're going to tell docker

00:08:10,400 --> 00:08:14,080
to expose port 5000

00:08:12,319 --> 00:08:15,520
so that we can access that from our host

00:08:14,080 --> 00:08:17,199
machine if we need to we're going to

00:08:15,520 --> 00:08:18,400
copy the current directory that the

00:08:17,199 --> 00:08:21,199
docker file is in

00:08:18,400 --> 00:08:22,400
into slash app in our container and then

00:08:21,199 --> 00:08:25,520
the command we're going to run

00:08:22,400 --> 00:08:27,759
is flask run and then the

00:08:25,520 --> 00:08:30,000
compose file has a bunch of version

00:08:27,759 --> 00:08:31,680
information and it's got two services

00:08:30,000 --> 00:08:33,360
it's got a web service and a reader

00:08:31,680 --> 00:08:33,839
service the redis service is just

00:08:33,360 --> 00:08:36,880
pulling

00:08:33,839 --> 00:08:39,279
the stock redis image from docker hub

00:08:36,880 --> 00:08:40,320
um and the web service is going to build

00:08:39,279 --> 00:08:41,360
the image

00:08:40,320 --> 00:08:43,839
that is specified in the current

00:08:41,360 --> 00:08:46,160
directory it's going to target as matsan

00:08:43,839 --> 00:08:50,000
slash simple web app and it's going to

00:08:46,160 --> 00:08:50,000
expose port 5000 explicitly

00:08:50,160 --> 00:08:54,959
so let's run that so we use the docker

00:08:53,040 --> 00:08:57,279
dash compose command

00:08:54,959 --> 00:08:58,080
which um is what manages all the docker

00:08:57,279 --> 00:09:00,160
compose stuff

00:08:58,080 --> 00:09:01,519
so we run docker compose up and we're

00:09:00,160 --> 00:09:04,720
going to specify minus d

00:09:01,519 --> 00:09:06,320
which backgrounds um the the container

00:09:04,720 --> 00:09:08,000
setup so that we can get our shell back

00:09:06,320 --> 00:09:10,240
and do interesting things so

00:09:08,000 --> 00:09:11,760
it's going to create a network for the

00:09:10,240 --> 00:09:14,320
for our containers it's going to

00:09:11,760 --> 00:09:15,279
pull down the python image and build all

00:09:14,320 --> 00:09:18,399
of the

00:09:15,279 --> 00:09:19,760
instructions that i gave it and then

00:09:18,399 --> 00:09:22,000
it's going to remove any intermediate

00:09:19,760 --> 00:09:23,920
containers that created in the process

00:09:22,000 --> 00:09:25,120
um it tags that with matte send slash

00:09:23,920 --> 00:09:27,600
simple web app

00:09:25,120 --> 00:09:29,519
and then it creates our two containers

00:09:27,600 --> 00:09:31,600
um web and redis

00:09:29,519 --> 00:09:33,440
and then we're done then it's then it's

00:09:31,600 --> 00:09:36,560
running so to test that it's running

00:09:33,440 --> 00:09:38,800
i've just written a really basic

00:09:36,560 --> 00:09:40,720
shell script which will run curl on

00:09:38,800 --> 00:09:43,440
local host column 5000

00:09:40,720 --> 00:09:44,880
and you can see here that it is

00:09:43,440 --> 00:09:47,600
incrementing this value

00:09:44,880 --> 00:09:48,080
and i've also used docker compose exec

00:09:47,600 --> 00:09:49,920
which

00:09:48,080 --> 00:09:51,839
lets me get into the reddish container

00:09:49,920 --> 00:09:53,360
and run the red cli command

00:09:51,839 --> 00:09:54,800
to get the refresh count from redis and

00:09:53,360 --> 00:09:56,399
you can see that it has incremented up

00:09:54,800 --> 00:09:58,080
to three so these containers are talking

00:09:56,399 --> 00:10:01,600
to each other and they're all contained

00:09:58,080 --> 00:10:02,320
in the same um in the one docker compose

00:10:01,600 --> 00:10:04,560
file and

00:10:02,320 --> 00:10:05,600
you know configured fairly clearly so

00:10:04,560 --> 00:10:07,120
finally we're going to clean that up

00:10:05,600 --> 00:10:09,279
we're going to run docker compose down

00:10:07,120 --> 00:10:12,320
which will delete all of our containers

00:10:09,279 --> 00:10:15,600
and our networking and then we're done

00:10:12,320 --> 00:10:17,519
so um docker allows you

00:10:15,600 --> 00:10:19,200
to obstruct sorry docker compose allows

00:10:17,519 --> 00:10:21,440
you to obstruct away

00:10:19,200 --> 00:10:23,360
docker's functionality and it automates

00:10:21,440 --> 00:10:25,519
the creation config and management of

00:10:23,360 --> 00:10:28,720
groups of containers

00:10:25,519 --> 00:10:31,200
now docker compose is great on a desktop

00:10:28,720 --> 00:10:32,560
if you're doing development stuff and

00:10:31,200 --> 00:10:34,000
it's really really useful if you've got

00:10:32,560 --> 00:10:35,519
an app that you store on github and you

00:10:34,000 --> 00:10:36,959
want people to be easily able to get up

00:10:35,519 --> 00:10:39,440
and running with it

00:10:36,959 --> 00:10:41,360
um so that you know they don't have to

00:10:39,440 --> 00:10:42,959
go and install python or

00:10:41,360 --> 00:10:45,120
ruby or whatever they can just have

00:10:42,959 --> 00:10:46,800
docker installed and it installs all of

00:10:45,120 --> 00:10:48,640
the rest for them

00:10:46,800 --> 00:10:50,800
um if you're going to do stuff in

00:10:48,640 --> 00:10:51,680
production um you might want something

00:10:50,800 --> 00:10:54,320
that is kind of

00:10:51,680 --> 00:10:55,920
more you know geared towards that

00:10:54,320 --> 00:10:59,040
environment so docker swarm

00:10:55,920 --> 00:11:01,600
is really good for this um docker

00:10:59,040 --> 00:11:04,079
docker swarm is a container orchestrator

00:11:01,600 --> 00:11:05,920
um anybody who is aware of kubernetes

00:11:04,079 --> 00:11:07,200
um or has heard the name kubernetes is

00:11:05,920 --> 00:11:08,399
another container orchestrator but it's

00:11:07,200 --> 00:11:10,079
a lot more complicated

00:11:08,399 --> 00:11:11,680
docker is fair docker swarm is fairly

00:11:10,079 --> 00:11:12,880
simple and it's prescriptive so it's a

00:11:11,680 --> 00:11:15,120
little bit more ideal for smaller

00:11:12,880 --> 00:11:18,640
workloads and environments

00:11:15,120 --> 00:11:21,440
docker swarm has the concept of stacks

00:11:18,640 --> 00:11:24,399
um which is what would be defined in

00:11:21,440 --> 00:11:26,720
something like a docker compose file

00:11:24,399 --> 00:11:27,440
and as it turns out docker compose

00:11:26,720 --> 00:11:30,000
docker swarm

00:11:27,440 --> 00:11:31,519
stack files are exactly the same format

00:11:30,000 --> 00:11:33,040
as a docker compose file so you can

00:11:31,519 --> 00:11:36,160
reuse that

00:11:33,040 --> 00:11:37,920
so i could have taken exactly the um

00:11:36,160 --> 00:11:39,680
the file that i had before and i could

00:11:37,920 --> 00:11:41,760
have deployed that into production

00:11:39,680 --> 00:11:43,040
using docker swarm with a bunch of

00:11:41,760 --> 00:11:44,160
monitoring and various stuff the

00:11:43,040 --> 00:11:45,839
dockerform gives you

00:11:44,160 --> 00:11:47,760
running across multiple physical hosts

00:11:45,839 --> 00:11:49,040
if i wanted to um i was going to

00:11:47,760 --> 00:11:50,079
demonstrate that but i ran out of time

00:11:49,040 --> 00:11:53,200
there are some demos

00:11:50,079 --> 00:11:54,880
in the repo above if you'd like to check

00:11:53,200 --> 00:11:58,240
that out

00:11:54,880 --> 00:11:59,680
um when it comes to migrating to

00:11:58,240 --> 00:12:02,800
containers

00:11:59,680 --> 00:12:04,160
um it's fairly straightforward to be

00:12:02,800 --> 00:12:06,720
able to

00:12:04,160 --> 00:12:07,920
like you don't have to like go all in on

00:12:06,720 --> 00:12:09,279
on docker to say

00:12:07,920 --> 00:12:11,279
you know we want to switch over to it

00:12:09,279 --> 00:12:12,320
you could run docker on some of your

00:12:11,279 --> 00:12:15,600
production hardware

00:12:12,320 --> 00:12:17,600
and run containers uh run apps in

00:12:15,600 --> 00:12:19,360
containers in a very similar way to how

00:12:17,600 --> 00:12:22,480
you're already running them

00:12:19,360 --> 00:12:22,720
um without necessarily having to you

00:12:22,480 --> 00:12:24,160
know

00:12:22,720 --> 00:12:26,160
abstract away all of the detail you

00:12:24,160 --> 00:12:27,839
could run you know a fairly heavyweight

00:12:26,160 --> 00:12:29,519
ubuntu image for example

00:12:27,839 --> 00:12:31,200
with all the stuff in your container and

00:12:29,519 --> 00:12:33,279
then you know over time

00:12:31,200 --> 00:12:34,560
pull those little bits out into separate

00:12:33,279 --> 00:12:35,680
containers so that they're a little bit

00:12:34,560 --> 00:12:37,360
more isolated

00:12:35,680 --> 00:12:39,680
um just to make the whole workload a

00:12:37,360 --> 00:12:43,440
little bit um less daunting

00:12:39,680 --> 00:12:43,760
um so yeah i think that that's about all

00:12:43,440 --> 00:12:45,200
i've

00:12:43,760 --> 00:12:47,040
got and i've got a little bit of time

00:12:45,200 --> 00:12:48,800
left um so basically

00:12:47,040 --> 00:12:50,720
all i wanted to say was give docker a

00:12:48,800 --> 00:12:53,839
shot if you haven't already

00:12:50,720 --> 00:12:54,560
um because i think that it really helps

00:12:53,839 --> 00:12:57,040
to

00:12:54,560 --> 00:12:58,639
um make deployment really easy

00:12:57,040 --> 00:13:00,079
particularly for

00:12:58,639 --> 00:13:01,839
if you've got an open source project

00:13:00,079 --> 00:13:04,160
that you want other people to be able to

00:13:01,839 --> 00:13:05,040
contribute to one of the projects that i

00:13:04,160 --> 00:13:07,760
was working with

00:13:05,040 --> 00:13:08,560
um we had fairly new developers who

00:13:07,760 --> 00:13:10,000
didn't really

00:13:08,560 --> 00:13:11,600
have a full understanding of how to

00:13:10,000 --> 00:13:14,000
install like a ruby development

00:13:11,600 --> 00:13:15,920
environment and so we just said to them

00:13:14,000 --> 00:13:17,040
here install docker the instructions for

00:13:15,920 --> 00:13:19,680
that are really clear

00:13:17,040 --> 00:13:21,519
and then run you know docker compose up

00:13:19,680 --> 00:13:22,480
on this file and it will sort it all out

00:13:21,519 --> 00:13:24,639
for you

00:13:22,480 --> 00:13:26,480
um and that helped us a lot on and it

00:13:24,639 --> 00:13:29,279
worked on both windows and linux

00:13:26,480 --> 00:13:30,880
um so that's all that i've got for you

00:13:29,279 --> 00:13:32,959
if you've got any questions for me

00:13:30,880 --> 00:13:34,160
um feel free to shoot me a message in

00:13:32,959 --> 00:13:37,440
venulis

00:13:34,160 --> 00:13:40,480
or contact me on any of these

00:13:37,440 --> 00:13:43,279
um any of these details and um

00:13:40,480 --> 00:13:45,040
that's all i've got thank you thank you

00:13:43,279 --> 00:13:46,480
very much matt that was great

00:13:45,040 --> 00:13:49,279
and it's been some good discussion in

00:13:46,480 --> 00:13:50,880
venulis for me it helps connect all of

00:13:49,279 --> 00:13:51,600
the pieces together and where docker

00:13:50,880 --> 00:13:54,240
swarm

00:13:51,600 --> 00:13:56,240
fits into the puzzle as well and i've

00:13:54,240 --> 00:13:58,480
echo what you said about

00:13:56,240 --> 00:14:00,240
docker as a solution particularly for

00:13:58,480 --> 00:14:02,240
test environments for instance

00:14:00,240 --> 00:14:03,920
it's really useful if you need to test

00:14:02,240 --> 00:14:05,360
postgres database or something like that

00:14:03,920 --> 00:14:06,959
just to docker install it rather than

00:14:05,360 --> 00:14:09,680
going through the whole

00:14:06,959 --> 00:14:11,199
server orchestration type stuff so thank

00:14:09,680 --> 00:14:13,920
you very much total summary

00:14:11,199 --> 00:14:15,120
great talk thank you and we will be back

00:14:13,920 --> 00:14:18,160
in about 10 minutes

00:14:15,120 --> 00:14:26,880
with the last of our talks for the day

00:14:18,160 --> 00:14:26,880

YouTube URL: https://www.youtube.com/watch?v=X0aarx6LLzI


