Title: Containers are hideously undebuggable black boxes and we never should have invented them
Publication date: 2021-01-31
Playlist: linux.conf.au 2021
Description: 
	Tim Serong

https://lca2021.linux.org.au/schedule/presentation/71/

The Ceph project switched from installing regular software packages, to deployment as application containers (Podman/Docker/Kubernetes) in the most recent release.  Suddenly, we have storage clusters where the admin isn't dealing with a bunch of normal daemons anymore; instead there's a whole lot of containers running, and if you're used to the old way of doing things, the container mode can be inscrutable, and difficult to debug when things go wrong.

This isn't just a story for Ceph people - this is a story of unexpected failures, of learning where to look when things break, of trying to fix those broken things, and then discovering someone's hidden half your trusty old tools, and the other half don't work properly anymore.

Ceph users will come away from this talk with a good understanding of how everything is deployed now, and why.  Beyond that though, I hope to ensure that anyone who's gone from dealing with packaged software to the container world never finds themselves like I did, late one night, staring at a terminal into which they've just typed the words "containers are hideously undebuggable black boxes and we never should have invented them".

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Mon Jan 25 16:40:00 2021 at Rusty R. Hall
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,200 --> 00:00:18,560
we are at the final

00:00:16,560 --> 00:00:20,800
presentation for the conference and i'm

00:00:18,560 --> 00:00:23,199
excited to have tim sarong here

00:00:20,800 --> 00:00:24,160
uh presenting containers our hideously

00:00:23,199 --> 00:00:26,480
undebuggable

00:00:24,160 --> 00:00:28,400
black boxes and we never should have

00:00:26,480 --> 00:00:29,279
invented them so that's an intriguing

00:00:28,400 --> 00:00:31,359
title

00:00:29,279 --> 00:00:33,600
so someone i'm sure you're all familiar

00:00:31,359 --> 00:00:35,520
with having presented at previous lcas

00:00:33,600 --> 00:00:36,079
about high availability and distributed

00:00:35,520 --> 00:00:38,320
storage

00:00:36,079 --> 00:00:40,000
currently works at souza and today we'll

00:00:38,320 --> 00:00:41,600
be talking about the ceph project

00:00:40,000 --> 00:00:43,680
and it switched from installing regular

00:00:41,600 --> 00:00:45,360
software packages to deployment as

00:00:43,680 --> 00:00:47,039
application containers and the

00:00:45,360 --> 00:00:49,360
challenges um

00:00:47,039 --> 00:00:51,360
face debugging when things go wrong he

00:00:49,360 --> 00:00:52,079
assures us that today's talk isn't just

00:00:51,360 --> 00:00:54,480
for

00:00:52,079 --> 00:00:56,160
people but about unexpected failures of

00:00:54,480 --> 00:00:58,640
learning where to look when things break

00:00:56,160 --> 00:01:00,000
and trying to fix them tim will be happy

00:00:58,640 --> 00:01:01,840
to take questions at the end of the

00:01:00,000 --> 00:01:02,399
presentation if we have time so stick

00:01:01,840 --> 00:01:04,479
around

00:01:02,399 --> 00:01:05,920
a reminder to post questions in benue's

00:01:04,479 --> 00:01:09,360
chat with the question

00:01:05,920 --> 00:01:11,360
um tab which is next to the the chat tab

00:01:09,360 --> 00:01:14,080
so we look forward to this i'm looking

00:01:11,360 --> 00:01:16,960
forward to it over to you tim

00:01:14,080 --> 00:01:17,920
thank you very much uh it's a pleasure

00:01:16,960 --> 00:01:19,920
to be here again

00:01:17,920 --> 00:01:21,520
uh or for the first time remotely but

00:01:19,920 --> 00:01:24,640
here we go

00:01:21,520 --> 00:01:27,840
so working at souza on

00:01:24,640 --> 00:01:28,880
uh i've actually spent about the last 15

00:01:27,840 --> 00:01:31,439
years

00:01:28,880 --> 00:01:34,159
i think now variously working on high

00:01:31,439 --> 00:01:37,280
availability and distributed storage

00:01:34,159 --> 00:01:40,400
and the last six of that has been in on

00:01:37,280 --> 00:01:41,040
or around the cef project distributed

00:01:40,400 --> 00:01:44,479
storage

00:01:41,040 --> 00:01:46,880
systems are complicated

00:01:44,479 --> 00:01:49,040
it's important that they're reliable and

00:01:46,880 --> 00:01:51,119
if something does happen to break

00:01:49,040 --> 00:01:55,040
it's it's extremely important that

00:01:51,119 --> 00:01:56,960
you're able to troubleshoot them

00:01:55,040 --> 00:01:58,320
i'm i'm going to say at the outset that

00:01:56,960 --> 00:01:59,840
i don't actually

00:01:58,320 --> 00:02:02,960
think we never should have invented

00:01:59,840 --> 00:02:05,600
containers but i did have this moment

00:02:02,960 --> 00:02:06,719
several months ago late one night while

00:02:05,600 --> 00:02:08,399
working on ceph

00:02:06,719 --> 00:02:10,800
when i really wished we weren't using

00:02:08,399 --> 00:02:12,000
them and that's because i was coming to

00:02:10,800 --> 00:02:14,640
terms the hard way

00:02:12,000 --> 00:02:15,760
with switching from package software to

00:02:14,640 --> 00:02:18,000
containers

00:02:15,760 --> 00:02:19,840
everything had changed my system was

00:02:18,000 --> 00:02:21,360
broken and i didn't know how to figure

00:02:19,840 --> 00:02:23,360
out what was wrong

00:02:21,360 --> 00:02:25,040
and that that late night moment of deep

00:02:23,360 --> 00:02:27,280
frustration is why i'm giving this talk

00:02:25,040 --> 00:02:27,280
now

00:02:28,000 --> 00:02:34,080
a little bit of background i'm

00:02:31,840 --> 00:02:35,920
talking here about application

00:02:34,080 --> 00:02:37,440
containers as opposed to the system

00:02:35,920 --> 00:02:40,160
containers

00:02:37,440 --> 00:02:40,560
a system container i know how to deal

00:02:40,160 --> 00:02:42,720
with

00:02:40,560 --> 00:02:43,920
reasonably easily because it's

00:02:42,720 --> 00:02:45,840
essentially

00:02:43,920 --> 00:02:47,360
a really lightweight virtual machine or

00:02:45,840 --> 00:02:49,680
you can treat it this one

00:02:47,360 --> 00:02:51,760
with most of an operating system inside

00:02:49,680 --> 00:02:54,640
and you can more or less treat it like

00:02:51,760 --> 00:02:54,640
you would any other machine

00:02:55,440 --> 00:02:58,959
an application container is a bit

00:02:57,760 --> 00:03:02,080
different

00:02:58,959 --> 00:03:04,239
it's a specific application or daemon in

00:03:02,080 --> 00:03:05,599
container form rather than delivered as

00:03:04,239 --> 00:03:08,640
a software package

00:03:05,599 --> 00:03:10,319
and this is extremely useful because

00:03:08,640 --> 00:03:12,080
it's a way of making sure that your

00:03:10,319 --> 00:03:14,159
application or daemon is run in a

00:03:12,080 --> 00:03:16,879
tightly controlled environment

00:03:14,159 --> 00:03:18,800
with known dependencies and or nothing

00:03:16,879 --> 00:03:21,040
weird in there and there's no other

00:03:18,800 --> 00:03:24,720
weird stuff going on

00:03:21,040 --> 00:03:27,200
unfortunately i had previously had

00:03:24,720 --> 00:03:29,840
relatively little experience with

00:03:27,200 --> 00:03:33,680
actually using these things when i found

00:03:29,840 --> 00:03:37,440
myself thrown in the deep end

00:03:33,680 --> 00:03:40,080
my my experience here

00:03:37,440 --> 00:03:41,760
as i mentioned earlier and also in the

00:03:40,080 --> 00:03:44,879
intro is with sef

00:03:41,760 --> 00:03:47,760
i'm not i'm going to try not to talk

00:03:44,879 --> 00:03:48,239
too much about what seth actually is and

00:03:47,760 --> 00:03:49,760
does

00:03:48,239 --> 00:03:50,959
because what it is and does isn't

00:03:49,760 --> 00:03:52,879
terribly interesting from the

00:03:50,959 --> 00:03:55,120
perspective of this talk

00:03:52,879 --> 00:03:58,480
but what is interesting and what i am

00:03:55,120 --> 00:04:01,439
talking about is how it's deployed

00:03:58,480 --> 00:04:02,959
but in order for what i'm going to talk

00:04:01,439 --> 00:04:04,879
about to make sense i do actually have

00:04:02,959 --> 00:04:07,840
to say something about what ceph is

00:04:04,879 --> 00:04:08,879
um and how it hangs together uh so that

00:04:07,840 --> 00:04:10,080
people not familiar with it will have

00:04:08,879 --> 00:04:13,599
some context for

00:04:10,080 --> 00:04:16,000
for the rest of the talk so

00:04:13,599 --> 00:04:17,359
ceph is a free and open source scale out

00:04:16,000 --> 00:04:19,359
distributed storage

00:04:17,359 --> 00:04:22,000
system which you run on a cluster of

00:04:19,359 --> 00:04:24,479
many nodes arguably the more the better

00:04:22,000 --> 00:04:25,759
so think you've got a bunch of racks

00:04:24,479 --> 00:04:28,240
with a bunch of servers

00:04:25,759 --> 00:04:28,800
in them and they're all full of disks

00:04:28,240 --> 00:04:30,639
and

00:04:28,800 --> 00:04:32,320
on each one of those servers or nodes

00:04:30,639 --> 00:04:34,639
you've got a whole bunch of seph daemons

00:04:32,320 --> 00:04:37,759
running

00:04:34,639 --> 00:04:40,479
there's one object storage daemon or osd

00:04:37,759 --> 00:04:43,280
for each disk so there's lots of them

00:04:40,479 --> 00:04:44,960
there's a few other daemons at least

00:04:43,280 --> 00:04:46,320
you've got some mons

00:04:44,960 --> 00:04:49,680
which keep track of the state of the

00:04:46,320 --> 00:04:51,520
cluster and manager daemons which help

00:04:49,680 --> 00:04:53,520
with cluster administration maintenance

00:04:51,520 --> 00:04:56,160
and other bits and pieces

00:04:53,520 --> 00:04:57,360
you might also have metadata servers

00:04:56,160 --> 00:04:59,199
rados gateways

00:04:57,360 --> 00:05:00,479
and some other bits and pieces depending

00:04:59,199 --> 00:05:01,520
on what you're doing

00:05:00,479 --> 00:05:03,840
and what services you're trying to

00:05:01,520 --> 00:05:03,840
provide

00:05:04,080 --> 00:05:09,120
now these daemons all talk to each other

00:05:07,199 --> 00:05:10,880
to keep the cluster running

00:05:09,120 --> 00:05:12,160
they write log messages or they used to

00:05:10,880 --> 00:05:15,039
write log messages

00:05:12,160 --> 00:05:16,639
to var log ceph whatever the demon name

00:05:15,039 --> 00:05:19,919
is

00:05:16,639 --> 00:05:22,160
they keep some state under var lib ceph

00:05:19,919 --> 00:05:23,440
conf configuration files live in

00:05:22,160 --> 00:05:25,039
etcetera

00:05:23,440 --> 00:05:27,280
and this is sort of all approximately

00:05:25,039 --> 00:05:30,720
what you would expect from a daemon on a

00:05:27,280 --> 00:05:30,720
linux or a unix-like system

00:05:30,880 --> 00:05:34,880
there's a bunch of command line tools

00:05:33,120 --> 00:05:35,520
for querying cluster status and making

00:05:34,880 --> 00:05:37,280
changes

00:05:35,520 --> 00:05:40,400
a few of the common ones are listed here

00:05:37,280 --> 00:05:40,400
there's some other ones too

00:05:40,960 --> 00:05:44,880
and all of these bits and pieces have

00:05:43,600 --> 00:05:47,039
always been

00:05:44,880 --> 00:05:48,720
historically been made available as

00:05:47,039 --> 00:05:51,280
regular packages and actually they still

00:05:48,720 --> 00:05:54,800
are now but

00:05:51,280 --> 00:05:56,080
so rpms or debs are installed on your

00:05:54,800 --> 00:05:59,199
system

00:05:56,080 --> 00:06:01,199
a configuration file is created the

00:05:59,199 --> 00:06:03,039
relevant systemd service

00:06:01,199 --> 00:06:05,280
services are enabled and started for

00:06:03,039 --> 00:06:08,800
each daemon on each host

00:06:05,280 --> 00:06:10,160
and away you go actually deploying a

00:06:08,800 --> 00:06:12,160
working ceph cluster

00:06:10,160 --> 00:06:13,360
is somewhat more involved than that

00:06:12,160 --> 00:06:15,120
because

00:06:13,360 --> 00:06:16,960
certain daemons have to be deployed in a

00:06:15,120 --> 00:06:19,360
particular order you have to do the mons

00:06:16,960 --> 00:06:21,199
then the managers and the osds

00:06:19,360 --> 00:06:23,600
and you have to configure your disks and

00:06:21,199 --> 00:06:25,360
whatnot but that's the essential idea of

00:06:23,600 --> 00:06:26,720
what you end up with

00:06:25,360 --> 00:06:30,000
a bunch of package software a bunch of

00:06:26,720 --> 00:06:30,000
demons bunch of services running

00:06:30,240 --> 00:06:34,319
one of the consequences of having a

00:06:32,240 --> 00:06:36,880
complicated system like this

00:06:34,319 --> 00:06:38,720
is that it's difficult to deploy and

00:06:36,880 --> 00:06:40,720
over the years a number of ways to

00:06:38,720 --> 00:06:43,280
deploy ceph evolved

00:06:40,720 --> 00:06:44,800
there was self-deploy which is now

00:06:43,280 --> 00:06:48,080
unmaintained

00:06:44,800 --> 00:06:50,319
which was always only really a toy and

00:06:48,080 --> 00:06:52,800
became cumbersome at scale

00:06:50,319 --> 00:06:54,960
but at least it didn't require anything

00:06:52,800 --> 00:06:56,080
other than ssh access to the systems

00:06:54,960 --> 00:06:58,720
that you were deploying

00:06:56,080 --> 00:07:01,440
and it was reasonably easy to understand

00:06:58,720 --> 00:07:04,560
at least if you knew surf

00:07:01,440 --> 00:07:07,280
there were also ansible chef

00:07:04,560 --> 00:07:08,800
puppet salt-based ways of doing

00:07:07,280 --> 00:07:10,639
self-deployment and probably others that

00:07:08,800 --> 00:07:12,880
i have forgotten about

00:07:10,639 --> 00:07:13,919
and all of these things more or less

00:07:12,880 --> 00:07:16,000
work across

00:07:13,919 --> 00:07:17,680
multiple linux distros and somehow have

00:07:16,000 --> 00:07:19,759
had to deal with

00:07:17,680 --> 00:07:20,960
variances in packaging from one distro

00:07:19,759 --> 00:07:22,960
to another

00:07:20,960 --> 00:07:24,960
so a certain amount of deployment

00:07:22,960 --> 00:07:28,240
complexity was either pushed

00:07:24,960 --> 00:07:30,720
out onto the administrator user

00:07:28,240 --> 00:07:32,639
or was at least embedded variously in

00:07:30,720 --> 00:07:35,199
those deployment frameworks so inside

00:07:32,639 --> 00:07:37,680
your salt states or ansible playbooks or

00:07:35,199 --> 00:07:37,680
what have you

00:07:39,199 --> 00:07:43,840
still once you had a cluster up and

00:07:41,680 --> 00:07:45,840
running if something went wrong

00:07:43,840 --> 00:07:48,160
there were what i would consider some

00:07:45,840 --> 00:07:51,199
obvious places to look

00:07:48,160 --> 00:07:53,840
the cef command line tools for example

00:07:51,199 --> 00:07:55,840
ceph status to check the cluster status

00:07:53,840 --> 00:07:57,919
and then if you had a misbehaving demon

00:07:55,840 --> 00:07:59,360
on some machine you'd go an ssh into

00:07:57,919 --> 00:08:01,199
that node and you'd look at the log

00:07:59,360 --> 00:08:02,800
files in var log ceph for that

00:08:01,199 --> 00:08:04,400
particular daemon

00:08:02,800 --> 00:08:06,000
maybe you would interrogate the demons

00:08:04,400 --> 00:08:08,080
directly there's commands that you can

00:08:06,000 --> 00:08:09,520
run to ask them for their state or what

00:08:08,080 --> 00:08:10,639
operations are in flight and that sort

00:08:09,520 --> 00:08:12,720
of thing

00:08:10,639 --> 00:08:14,560
you can also inject changes you can tell

00:08:12,720 --> 00:08:16,000
a demon please start spitting out more

00:08:14,560 --> 00:08:19,039
debug information now

00:08:16,000 --> 00:08:20,639
thank you um again using the ceph

00:08:19,039 --> 00:08:21,759
command line tools

00:08:20,639 --> 00:08:24,720
maybe you want to tweak some

00:08:21,759 --> 00:08:27,599
configuration in your etc ceph.com for

00:08:24,720 --> 00:08:30,400
restart a daemon whatever

00:08:27,599 --> 00:08:32,159
and for some bits of ceph for example

00:08:30,400 --> 00:08:33,919
any of the python modules that run

00:08:32,159 --> 00:08:36,560
inside the cef manager daemon there's a

00:08:33,919 --> 00:08:39,599
whole other story there but

00:08:36,560 --> 00:08:42,000
you could even actually go and tweak

00:08:39,599 --> 00:08:43,039
that python code on a live cluster by

00:08:42,000 --> 00:08:45,360
editing the code

00:08:43,039 --> 00:08:47,279
under user share cert manager and

00:08:45,360 --> 00:08:50,160
restarting the relevant daemon

00:08:47,279 --> 00:08:51,760
now if this were if i could actually see

00:08:50,160 --> 00:08:52,560
the audience i'm expecting head shaking

00:08:51,760 --> 00:08:54,080
at this point

00:08:52,560 --> 00:08:55,279
and i want to make it clear that i don't

00:08:54,080 --> 00:08:57,040
actually recommend doing that in

00:08:55,279 --> 00:08:59,040
production because

00:08:57,040 --> 00:09:00,640
ad hoc changes to random systems are a

00:08:59,040 --> 00:09:02,800
terrible idea

00:09:00,640 --> 00:09:05,279
but as a contributor to the ceph project

00:09:02,800 --> 00:09:06,640
myself it was convenient for me to be

00:09:05,279 --> 00:09:09,040
able to

00:09:06,640 --> 00:09:10,720
like live hack that code to test certain

00:09:09,040 --> 00:09:12,080
like really small changes

00:09:10,720 --> 00:09:14,480
against something resembling a real

00:09:12,080 --> 00:09:14,480
cluster

00:09:16,959 --> 00:09:24,160
so to sort of

00:09:21,120 --> 00:09:25,600
summarize all of that ceph

00:09:24,160 --> 00:09:27,920
has traditionally been difficult to

00:09:25,600 --> 00:09:30,240
deploy for new users and potentially

00:09:27,920 --> 00:09:32,560
irritating to maintain over time

00:09:30,240 --> 00:09:34,839
when you want to deploy new nodes or

00:09:32,560 --> 00:09:36,160
disks or services or upgrade to a new

00:09:34,839 --> 00:09:38,480
version

00:09:36,160 --> 00:09:40,320
as with deployment upgrading the various

00:09:38,480 --> 00:09:41,680
daemons has to happen in a certain order

00:09:40,320 --> 00:09:45,360
you need to do the mons then the

00:09:41,680 --> 00:09:48,080
managers and the osds and the gateways

00:09:45,360 --> 00:09:50,080
and ideally that's done with some sort

00:09:48,080 --> 00:09:52,080
of orchestration

00:09:50,080 --> 00:09:53,440
and if you're using us if you're running

00:09:52,080 --> 00:09:55,200
a smaller cluster

00:09:53,440 --> 00:09:58,240
where you've got some of these services

00:09:55,200 --> 00:10:00,560
co-located on on the same nodes

00:09:58,240 --> 00:10:02,320
you can get into some difficulties when

00:10:00,560 --> 00:10:04,240
upgrading because if you

00:10:02,320 --> 00:10:05,920
if you're running mods and osds on the

00:10:04,240 --> 00:10:07,279
same node and you upgrade all the

00:10:05,920 --> 00:10:08,959
packages

00:10:07,279 --> 00:10:10,480
everything's upgraded at the same time

00:10:08,959 --> 00:10:11,200
you don't have that ability to do the

00:10:10,480 --> 00:10:14,079
staged

00:10:11,200 --> 00:10:15,760
mons then osd's and potentially your

00:10:14,079 --> 00:10:19,839
cluster or at least part of it doesn't

00:10:15,760 --> 00:10:19,839
work for the duration of the upgrade

00:10:21,760 --> 00:10:25,200
it turns out that containerizing all of

00:10:23,600 --> 00:10:26,880
the sef daemon solves a lot of these

00:10:25,200 --> 00:10:29,200
usability problems

00:10:26,880 --> 00:10:31,040
which to cut a long story short is what

00:10:29,200 --> 00:10:32,640
we did with the seth octopus release in

00:10:31,040 --> 00:10:36,079
00:10:32,640 --> 00:10:38,480
so now instead of using

00:10:36,079 --> 00:10:40,000
um one of about half a dozen different

00:10:38,480 --> 00:10:41,680
deployment frameworks for package

00:10:40,000 --> 00:10:44,000
software

00:10:41,680 --> 00:10:45,760
you instead either deploy ceph with

00:10:44,000 --> 00:10:47,600
kubernetes

00:10:45,760 --> 00:10:50,320
ceph on kubernetes with the rook

00:10:47,600 --> 00:10:52,160
operator or you deploy it using a tool

00:10:50,320 --> 00:10:55,120
called cephadm which is part of

00:10:52,160 --> 00:10:57,120
the ceph project itself now which will

00:10:55,120 --> 00:10:58,880
bootstrap a one node cluster

00:10:57,120 --> 00:11:00,800
and then you can use the other cef

00:10:58,880 --> 00:11:03,279
command line tools to deploy additional

00:11:00,800 --> 00:11:06,320
daemons and nodes

00:11:03,279 --> 00:11:09,279
the cephem mode is

00:11:06,320 --> 00:11:10,880
kind of neat because it relies on it was

00:11:09,279 --> 00:11:12,640
meant to be an easy way in for people

00:11:10,880 --> 00:11:13,120
who who still wanted to use self-deploy

00:11:12,640 --> 00:11:16,800
right

00:11:13,120 --> 00:11:18,800
as one thing um

00:11:16,800 --> 00:11:19,920
you don't need anything other than ssh

00:11:18,800 --> 00:11:21,920
python 3

00:11:19,920 --> 00:11:23,760
lvm and either the podman or docker

00:11:21,920 --> 00:11:26,399
container runtimes

00:11:23,760 --> 00:11:28,480
and in either one of those modes whether

00:11:26,399 --> 00:11:31,760
you're using kubernetes or self-adm

00:11:28,480 --> 00:11:34,959
we're using the same container images uh

00:11:31,760 --> 00:11:37,279
for all of the self-demons um

00:11:34,959 --> 00:11:38,480
and so that helps us in what we ship and

00:11:37,279 --> 00:11:41,360
everything

00:11:38,480 --> 00:11:43,120
um and behind the scenes in ceph there's

00:11:41,360 --> 00:11:45,120
an orchestrator api

00:11:43,120 --> 00:11:46,160
so that each of these two deployment

00:11:45,120 --> 00:11:48,399
modes

00:11:46,160 --> 00:11:49,360
can interact with ceph itself to get

00:11:48,399 --> 00:11:51,040
stuff done

00:11:49,360 --> 00:11:53,360
and so that for example the ceph

00:11:51,040 --> 00:11:54,959
dashboard can provide information about

00:11:53,360 --> 00:11:57,839
running hosts and services and that sort

00:11:54,959 --> 00:11:57,839
of thing

00:11:58,160 --> 00:12:02,959
so far so good ceph is now a lot easier

00:12:01,279 --> 00:12:04,639
to deploy than it was in the past

00:12:02,959 --> 00:12:06,480
um particularly for new users and

00:12:04,639 --> 00:12:08,639
there's there's more information about

00:12:06,480 --> 00:12:10,800
that online the blog post i have linked

00:12:08,639 --> 00:12:13,600
here

00:12:10,800 --> 00:12:14,320
i think sage wrote that after we'd

00:12:13,600 --> 00:12:16,880
initially

00:12:14,320 --> 00:12:18,240
had done the first release of this and

00:12:16,880 --> 00:12:19,920
if you

00:12:18,240 --> 00:12:21,440
uh you should also check out michael

00:12:19,920 --> 00:12:24,800
hackett's talk from the

00:12:21,440 --> 00:12:26,800
lca 2021 sysadmin mini conf once the

00:12:24,800 --> 00:12:28,079
recording is available because

00:12:26,800 --> 00:12:29,760
that that was also an excellent

00:12:28,079 --> 00:12:30,800
introduction to surf adm if you actually

00:12:29,760 --> 00:12:32,720
you know want to go and do this stuff

00:12:30,800 --> 00:12:36,560
yourself

00:12:32,720 --> 00:12:38,399
that said in the process of making ceph

00:12:36,560 --> 00:12:40,079
easier to deploy by containerizing

00:12:38,399 --> 00:12:42,240
everything what we've

00:12:40,079 --> 00:12:43,360
what we've done is we've added an extra

00:12:42,240 --> 00:12:45,680
layer or two of

00:12:43,360 --> 00:12:46,480
indirection between the admin or user

00:12:45,680 --> 00:12:48,880
and the ceph

00:12:46,480 --> 00:12:50,079
the actual demons that are running and

00:12:48,880 --> 00:12:51,920
that makes various

00:12:50,079 --> 00:12:53,440
aspects of troubleshooting when things

00:12:51,920 --> 00:12:54,959
fail

00:12:53,440 --> 00:12:57,360
suddenly more tricky or at least it did

00:12:54,959 --> 00:12:57,360
for me

00:12:58,079 --> 00:13:03,600
i'm mostly going to talk about the

00:13:01,360 --> 00:13:05,040
the cephadm podman docker case for the

00:13:03,600 --> 00:13:06,000
rest of this talk because that's where

00:13:05,040 --> 00:13:07,519
most of my experience

00:13:06,000 --> 00:13:09,040
is i haven't done a lot with rook yet

00:13:07,519 --> 00:13:10,800
but

00:13:09,040 --> 00:13:12,560
but the difficulties that i experience

00:13:10,800 --> 00:13:13,839
coming to terms with these extra layers

00:13:12,560 --> 00:13:18,160
i think apply

00:13:13,839 --> 00:13:18,160
equally to that space as well

00:13:18,880 --> 00:13:22,639
the first fun thing is that as uh

00:13:22,079 --> 00:13:25,040
there's no

00:13:22,639 --> 00:13:26,320
ceph packages installed by default and

00:13:25,040 --> 00:13:28,320
everything is in containers

00:13:26,320 --> 00:13:30,480
you don't actually have the ciph command

00:13:28,320 --> 00:13:32,560
line tools by default anymore

00:13:30,480 --> 00:13:34,000
in the cefadm case all you've got is a

00:13:32,560 --> 00:13:36,240
sephadm script

00:13:34,000 --> 00:13:37,760
and in the rook kubernetes case you

00:13:36,240 --> 00:13:40,720
don't even have that

00:13:37,760 --> 00:13:43,040
but all is not lost because all of those

00:13:40,720 --> 00:13:45,440
tools can also be run containerized

00:13:43,040 --> 00:13:46,720
because they all exist inside the same

00:13:45,440 --> 00:13:47,760
container image that we're using for the

00:13:46,720 --> 00:13:49,199
demons

00:13:47,760 --> 00:13:50,880
there's just an extra command that you

00:13:49,199 --> 00:13:52,240
need to run to do that

00:13:50,880 --> 00:13:54,880
to start up and enter a toolbox

00:13:52,240 --> 00:13:58,079
container it's so easy

00:13:54,880 --> 00:14:00,000
in the cefadm case you just type cephadm

00:13:58,079 --> 00:14:01,040
shell and then you're in there it pulls

00:14:00,000 --> 00:14:03,680
a container image you're in the

00:14:01,040 --> 00:14:06,480
container you can run ceph status

00:14:03,680 --> 00:14:07,199
in the um kubernetes or rook case you

00:14:06,480 --> 00:14:09,040
just run

00:14:07,199 --> 00:14:10,800
kube control dash and rook sep that's

00:14:09,040 --> 00:14:12,880
exec it could control dash and rook safe

00:14:10,800 --> 00:14:15,279
get pod dash lamp equals rook chef tools

00:14:12,880 --> 00:14:16,000
dasho jason pathetic items zero metadata

00:14:15,279 --> 00:14:20,480
name bash

00:14:16,000 --> 00:14:20,480
and then you can run ceph status awesome

00:14:21,680 --> 00:14:26,880
that works fine for simple status

00:14:25,199 --> 00:14:28,639
commands

00:14:26,880 --> 00:14:31,360
once you get into command line tools

00:14:28,639 --> 00:14:33,920
that take files as input or output

00:14:31,360 --> 00:14:36,320
though spinning up the toolbox container

00:14:33,920 --> 00:14:38,000
can become problematic because

00:14:36,320 --> 00:14:40,079
you have to pass the files in and out

00:14:38,000 --> 00:14:42,399
somehow and honestly in my opinion it's

00:14:40,079 --> 00:14:44,880
just not worth the trouble

00:14:42,399 --> 00:14:45,839
thankfully the ceph common package is

00:14:44,880 --> 00:14:47,680
still available

00:14:45,839 --> 00:14:51,360
so you can just install that and you can

00:14:47,680 --> 00:14:51,360
keep using the online tools directly

00:14:55,360 --> 00:14:58,880
so when i done that and i went and

00:14:57,680 --> 00:15:02,079
checked the status of my

00:14:58,880 --> 00:15:02,079
my cluster that i was working on

00:15:02,399 --> 00:15:07,199
my it was in health worn state and two

00:15:05,199 --> 00:15:09,600
of my osd's were down

00:15:07,199 --> 00:15:11,199
and this is this is one of the exciting

00:15:09,600 --> 00:15:12,000
moments that i had last year which

00:15:11,199 --> 00:15:15,440
prompted me to write

00:15:12,000 --> 00:15:16,480
this talk and this happened while i was

00:15:15,440 --> 00:15:18,560
working on

00:15:16,480 --> 00:15:19,680
upgrades from ceph nautilus to surf

00:15:18,560 --> 00:15:21,920
octopus

00:15:19,680 --> 00:15:24,240
which meant taking an existing cluster

00:15:21,920 --> 00:15:26,000
where everything was deployed old style

00:15:24,240 --> 00:15:28,000
as regular packages

00:15:26,000 --> 00:15:29,199
and switching to running everything in

00:15:28,000 --> 00:15:32,639
containers

00:15:29,199 --> 00:15:35,360
now the ceph adm tool has

00:15:32,639 --> 00:15:37,519
this adopt function which lets you

00:15:35,360 --> 00:15:38,639
migrate from package mode to container

00:15:37,519 --> 00:15:40,959
mode

00:15:38,639 --> 00:15:43,120
in a rolling fashion so that your whole

00:15:40,959 --> 00:15:45,120
storage cluster never goes down

00:15:43,120 --> 00:15:46,880
uh during the process this is really

00:15:45,120 --> 00:15:48,959
neat

00:15:46,880 --> 00:15:51,040
the problem that i was having is that

00:15:48,959 --> 00:15:52,320
some of my osds which are the daemons

00:15:51,040 --> 00:15:54,959
that are actually responsible for

00:15:52,320 --> 00:15:57,440
actually storing your data on the disks

00:15:54,959 --> 00:16:00,560
wouldn't start again after a reboot and

00:15:57,440 --> 00:16:00,560
i had no idea why

00:16:03,199 --> 00:16:07,360
i knew enough to ask the ceph

00:16:05,279 --> 00:16:10,880
orchestrator what was going on

00:16:07,360 --> 00:16:12,639
this command cephorch ls will give you a

00:16:10,880 --> 00:16:14,800
list of what services are running

00:16:12,639 --> 00:16:16,320
um across the cluster or are configured

00:16:14,800 --> 00:16:17,759
to run across the cluster

00:16:16,320 --> 00:16:19,839
and there's some there's similar

00:16:17,759 --> 00:16:22,000
commands for the with similar output if

00:16:19,839 --> 00:16:26,160
you're doing the kubernetes thing

00:16:22,000 --> 00:16:26,800
now in this case this is just my tiny

00:16:26,160 --> 00:16:28,160
toy

00:16:26,800 --> 00:16:29,920
test cluster that i was running on

00:16:28,160 --> 00:16:32,240
virtual machines

00:16:29,920 --> 00:16:34,320
with just a single manager a few mods

00:16:32,240 --> 00:16:36,959
and half a dozen osds

00:16:34,320 --> 00:16:38,399
the thing i want to highlight here is

00:16:36,959 --> 00:16:42,079
that the um

00:16:38,399 --> 00:16:43,040
those that osd all available devices

00:16:42,079 --> 00:16:44,959
line

00:16:43,040 --> 00:16:46,079
um two out of six and the one below with

00:16:44,959 --> 00:16:51,040
two out of four

00:16:46,079 --> 00:16:53,279
um and and image name is mix um

00:16:51,040 --> 00:16:54,560
that that that sort of looks all a bit

00:16:53,279 --> 00:16:57,440
weird to me

00:16:54,560 --> 00:16:57,440
um so

00:16:58,320 --> 00:17:01,680
so um i have to dig down a little bit

00:17:00,959 --> 00:17:03,920
further

00:17:01,680 --> 00:17:04,880
and the ceph orchestrator has a cef

00:17:03,920 --> 00:17:07,919
watch

00:17:04,880 --> 00:17:09,760
ps command for getting a list of all of

00:17:07,919 --> 00:17:11,520
the individual

00:17:09,760 --> 00:17:13,839
containers that are running across the

00:17:11,520 --> 00:17:17,919
cluster in this state it's

00:17:13,839 --> 00:17:19,360
effectively a cluster-wide podman ps if

00:17:17,919 --> 00:17:23,039
you like

00:17:19,360 --> 00:17:26,480
so if we if we go through this my my

00:17:23,039 --> 00:17:28,640
manager is on node node one my mods are

00:17:26,480 --> 00:17:32,160
on node one two and three

00:17:28,640 --> 00:17:34,799
and osd is three and five which are

00:17:32,160 --> 00:17:38,799
meant to be running on node three

00:17:34,799 --> 00:17:38,799
they seem to be in error state

00:17:41,039 --> 00:17:45,840
so let's go and have a look at node

00:17:43,679 --> 00:17:47,120
three

00:17:45,840 --> 00:17:50,320
there's another command we can use ceph

00:17:47,120 --> 00:17:53,039
adm ls gives us a list of all of the

00:17:50,320 --> 00:17:55,679
containers on that node and tells us a

00:17:53,039 --> 00:17:58,160
bit about them even if they're broken

00:17:55,679 --> 00:17:59,520
so you know the mons here it's enabled

00:17:58,160 --> 00:18:04,320
it's it's running

00:17:59,520 --> 00:18:07,280
if i go down to um osd five

00:18:04,320 --> 00:18:08,799
um sure it's enabled but it's in error

00:18:07,280 --> 00:18:10,960
state

00:18:08,799 --> 00:18:11,840
and there's one helpful thing that i've

00:18:10,960 --> 00:18:15,520
found here

00:18:11,840 --> 00:18:17,360
which is the systemd unit parameter

00:18:15,520 --> 00:18:21,200
and that tells us what systemd service

00:18:17,360 --> 00:18:21,200
to to query to get some more status

00:18:25,919 --> 00:18:29,840
so i went and did that system assisting

00:18:28,640 --> 00:18:32,960
control status

00:18:29,840 --> 00:18:36,080
thing um and okay fine it's

00:18:32,960 --> 00:18:38,320
it's failed and um

00:18:36,080 --> 00:18:40,000
well this is this is helpful it failed

00:18:38,320 --> 00:18:44,480
it tried to restart it

00:18:40,000 --> 00:18:48,400
um and it failed and it's yep okay cool

00:18:44,480 --> 00:18:50,400
um so i happen to know that um

00:18:48,400 --> 00:18:51,919
the sef demons by default aren't logging

00:18:50,400 --> 00:18:53,840
to var log ceph

00:18:51,919 --> 00:18:55,600
anymore um you can turn that back on but

00:18:53,840 --> 00:19:00,320
that's not the default anymore

00:18:55,600 --> 00:19:00,320
they're logging to the journal so

00:19:01,360 --> 00:19:05,440
journal control dash u for that unit

00:19:04,400 --> 00:19:08,080
file

00:19:05,440 --> 00:19:08,640
i should point out for people using ceph

00:19:08,080 --> 00:19:11,039
there is

00:19:08,640 --> 00:19:12,640
a sephadian logs command which which

00:19:11,039 --> 00:19:13,600
sort of tries to wrap some of this stuff

00:19:12,640 --> 00:19:15,760
up but

00:19:13,600 --> 00:19:17,360
the i'm really trying to convey the

00:19:15,760 --> 00:19:18,799
flavor of the experience that i went

00:19:17,360 --> 00:19:19,120
through here and also to demonstrate

00:19:18,799 --> 00:19:21,200
that

00:19:19,120 --> 00:19:22,840
sort of the levels that we've got in

00:19:21,200 --> 00:19:25,440
this thing

00:19:22,840 --> 00:19:28,880
um so

00:19:25,440 --> 00:19:32,400
it's started the osd and um

00:19:28,880 --> 00:19:35,440
it's gone error checking path var run

00:19:32,400 --> 00:19:38,799
ceph fsid uh

00:19:35,440 --> 00:19:42,320
no such file or directory

00:19:38,799 --> 00:19:44,720
and at this point i was all

00:19:42,320 --> 00:19:46,080
wait like what um why doesn't the var

00:19:44,720 --> 00:19:49,280
run directory exist

00:19:46,080 --> 00:19:52,000
that used to happen automatically when

00:19:49,280 --> 00:19:53,440
we were doing when you install surface

00:19:52,000 --> 00:19:56,640
packages there's a

00:19:53,440 --> 00:19:58,400
uh whatever is temp files

00:19:56,640 --> 00:19:59,919
file which which makes sure that var run

00:19:58,400 --> 00:20:02,080
ceph exists and everything and so i was

00:19:59,919 --> 00:20:04,400
surprised that this wasn't there

00:20:02,080 --> 00:20:06,240
and i was also equally surprised that

00:20:04,400 --> 00:20:09,440
this problem wasn't affecting

00:20:06,240 --> 00:20:11,679
the other demons on the other hosts

00:20:09,440 --> 00:20:14,480
so the key thing to understand here is

00:20:11,679 --> 00:20:16,559
that the individual demons themselves

00:20:14,480 --> 00:20:18,480
even though they've been containerized

00:20:16,559 --> 00:20:20,720
they're still doing their thing

00:20:18,480 --> 00:20:22,400
in the same way that they always used to

00:20:20,720 --> 00:20:22,799
as far as they're concerned they still

00:20:22,400 --> 00:20:26,320
see

00:20:22,799 --> 00:20:27,120
a a va run safe and avar lib ceph and

00:20:26,320 --> 00:20:28,640
everything

00:20:27,120 --> 00:20:30,320
and they don't know that they're running

00:20:28,640 --> 00:20:33,200
inside containers

00:20:30,320 --> 00:20:33,600
but from our perspective outside they're

00:20:33,200 --> 00:20:35,120
all

00:20:33,600 --> 00:20:37,120
started a bit differently than they used

00:20:35,120 --> 00:20:38,640
to be they log a bit differently

00:20:37,120 --> 00:20:41,679
and their state and config is in

00:20:38,640 --> 00:20:41,679
slightly different places

00:20:41,760 --> 00:20:46,480
with the packaged version of ceph we had

00:20:44,240 --> 00:20:48,320
a bunch of systemd unit files which were

00:20:46,480 --> 00:20:50,159
installed in the normal place under user

00:20:48,320 --> 00:20:53,200
lube systemd system

00:20:50,159 --> 00:20:53,840
um i've hit this one is for the mon

00:20:53,200 --> 00:20:56,640
service

00:20:53,840 --> 00:20:57,679
um i've abbreviated this a fair bit for

00:20:56,640 --> 00:20:58,960
this slide

00:20:57,679 --> 00:21:00,400
but the point is that there's one of

00:20:58,960 --> 00:21:02,080
these for each type of daemon they're

00:21:00,400 --> 00:21:05,760
parameterized on the

00:21:02,080 --> 00:21:08,240
whatever comes after the outside and

00:21:05,760 --> 00:21:10,000
each one of them has an exact start line

00:21:08,240 --> 00:21:13,600
that invokes that particular binary

00:21:10,000 --> 00:21:16,320
cephmon sephosd whatever

00:21:13,600 --> 00:21:18,080
the id of the service so the mon host

00:21:16,320 --> 00:21:20,799
name or the osd id

00:21:18,080 --> 00:21:21,600
and then you go and look invalux if

00:21:20,799 --> 00:21:25,039
we're uh you know

00:21:21,600 --> 00:21:27,039
cephmon for the log files and um

00:21:25,039 --> 00:21:29,360
if you want to start and stop services

00:21:27,039 --> 00:21:33,360
system control start stop status

00:21:29,360 --> 00:21:33,360
um yeah as as you would expect

00:21:33,600 --> 00:21:36,720
in the cefadm world with podman or

00:21:35,840 --> 00:21:38,960
docker

00:21:36,720 --> 00:21:41,120
there's no shipped system to unit files

00:21:38,960 --> 00:21:43,280
instead they're generated automatically

00:21:41,120 --> 00:21:46,720
when new demons are deployed

00:21:43,280 --> 00:21:48,640
so they land in etcetera systemd system

00:21:46,720 --> 00:21:49,679
um and they're named a bit differently

00:21:48,640 --> 00:21:50,880
there's sort of one for the whole

00:21:49,679 --> 00:21:53,760
cluster when the

00:21:50,880 --> 00:21:56,559
the daemon type and id is the parameter

00:21:53,760 --> 00:21:59,120
that comes at the end

00:21:56,559 --> 00:22:01,039
and rather than because they're sort of

00:21:59,120 --> 00:22:04,720
one for all demons rather than

00:22:01,039 --> 00:22:07,440
directly uh starting a daemon

00:22:04,720 --> 00:22:08,559
the exact start line here actually calls

00:22:07,440 --> 00:22:12,559
a bash script

00:22:08,559 --> 00:22:14,799
which is one level deeper which in turn

00:22:12,559 --> 00:22:17,039
is responsible for invoking the specific

00:22:14,799 --> 00:22:19,919
podmin or docker commands necessary to

00:22:17,039 --> 00:22:21,679
start an individual daemon

00:22:19,919 --> 00:22:23,440
and then so your system control commands

00:22:21,679 --> 00:22:23,760
are slightly different because it's fsid

00:22:23,440 --> 00:22:28,960
at

00:22:23,760 --> 00:22:28,960
mon.id or do so

00:22:29,120 --> 00:22:34,400
let's go and look at one of those

00:22:31,280 --> 00:22:34,400
unit.run scripts

00:22:34,640 --> 00:22:38,840
there's an awful lot going on in this

00:22:37,120 --> 00:22:41,840
wall of text

00:22:38,840 --> 00:22:41,840
um

00:22:42,480 --> 00:22:45,679
the first few lines do a bit of setup to

00:22:44,480 --> 00:22:47,280
make sure that uh

00:22:45,679 --> 00:22:49,760
we make sure that there's a via runcef

00:22:47,280 --> 00:22:53,200
directory on the host for us to use

00:22:49,760 --> 00:22:55,440
and also that um there's a couple of pod

00:22:53,200 --> 00:22:57,840
man commands to make sure that this

00:22:55,440 --> 00:23:00,240
container isn't already running um or

00:22:57,840 --> 00:23:03,520
somehow present so we have a clean start

00:23:00,240 --> 00:23:05,200
and then the podman run line actually um

00:23:03,520 --> 00:23:07,039
starts the container demon and there's a

00:23:05,200 --> 00:23:09,679
whole bunch of stuff going on here too

00:23:07,039 --> 00:23:11,039
the entry point gets overridden by for

00:23:09,679 --> 00:23:12,880
per the demon type so this will be

00:23:11,039 --> 00:23:16,000
either cephmon or sephoster yourself

00:23:12,880 --> 00:23:16,000
manager or whatever

00:23:16,240 --> 00:23:21,120
there's a bunch of flags for podman

00:23:19,200 --> 00:23:23,280
there's some environment variables that

00:23:21,120 --> 00:23:24,320
get passed into the container when it's

00:23:23,280 --> 00:23:27,120
running

00:23:24,320 --> 00:23:28,080
it sets up a bunch of bind mounts so var

00:23:27,120 --> 00:23:31,360
runcef

00:23:28,080 --> 00:23:32,960
fsid on the host which is that directory

00:23:31,360 --> 00:23:34,799
that was created up at the top

00:23:32,960 --> 00:23:36,320
is mapped internally to var run ceph

00:23:34,799 --> 00:23:36,960
inside the container and the same with

00:23:36,320 --> 00:23:40,640
some

00:23:36,960 --> 00:23:42,880
log and etc and all those things um

00:23:40,640 --> 00:23:44,799
and then eventually at the end we're

00:23:42,880 --> 00:23:46,480
specifying the image to use which in my

00:23:44,799 --> 00:23:48,320
case happens to be on my local registry

00:23:46,480 --> 00:23:50,159
it's not an upstream image

00:23:48,320 --> 00:23:51,840
and then there's a bunch more parameters

00:23:50,159 --> 00:23:54,240
which are actually passed into cephmin

00:23:51,840 --> 00:23:54,240
itself

00:23:57,120 --> 00:24:02,559
the problem i had earlier with the osds

00:24:00,000 --> 00:24:05,919
not starting was because of a bug in

00:24:02,559 --> 00:24:08,960
the generated osd's unit run script

00:24:05,919 --> 00:24:12,080
where it first invokes podman run with

00:24:08,960 --> 00:24:13,120
and tries to to bind mount this um the

00:24:12,080 --> 00:24:16,000
var run ceph

00:24:13,120 --> 00:24:17,039
directory inside so it can run some disk

00:24:16,000 --> 00:24:20,080
activation

00:24:17,039 --> 00:24:23,279
but it was doing that before

00:24:20,080 --> 00:24:23,279
actually creating that directory

00:24:23,919 --> 00:24:28,799
which is never going to work this

00:24:26,480 --> 00:24:30,799
particular issue only turned up

00:24:28,799 --> 00:24:32,960
though when doing upgrade testing it

00:24:30,799 --> 00:24:35,120
hadn't showed up anywhere else

00:24:32,960 --> 00:24:37,360
because by happy miracle in every other

00:24:35,120 --> 00:24:38,960
case some other sef demon had already

00:24:37,360 --> 00:24:40,799
created that var run directory before

00:24:38,960 --> 00:24:44,400
the osd started

00:24:40,799 --> 00:24:46,400
anyway i fixed that particular bug back

00:24:44,400 --> 00:24:49,440
in september

00:24:46,400 --> 00:24:50,480
but the point is like i said earlier

00:24:49,440 --> 00:24:52,240
there's

00:24:50,480 --> 00:24:54,240
there's an extra couple of layers of

00:24:52,240 --> 00:24:56,080
indirection between the user or admin

00:24:54,240 --> 00:25:00,080
and the demons that are running

00:24:56,080 --> 00:25:01,760
and now this this isn't an issue that

00:25:00,080 --> 00:25:02,960
that i hope anybody actually hit in

00:25:01,760 --> 00:25:04,159
production because we found it in

00:25:02,960 --> 00:25:05,279
development and testing and everything

00:25:04,159 --> 00:25:07,840
but

00:25:05,279 --> 00:25:09,760
um when things break in particularly

00:25:07,840 --> 00:25:10,880
weird ways like this and something will

00:25:09,760 --> 00:25:12,840
always inevitably

00:25:10,880 --> 00:25:14,000
break eventually in a particularly weird

00:25:12,840 --> 00:25:15,440
way

00:25:14,000 --> 00:25:17,600
you have to know what all of those

00:25:15,440 --> 00:25:20,159
layers are and potentially strip them

00:25:17,600 --> 00:25:21,520
all away to find out what's going on

00:25:20,159 --> 00:25:23,440
even to the point of running those

00:25:21,520 --> 00:25:24,880
individual podman commands from that run

00:25:23,440 --> 00:25:26,640
script

00:25:24,880 --> 00:25:29,840
from a shell to see how they behave and

00:25:26,640 --> 00:25:29,840
what they expect

00:25:31,760 --> 00:25:35,200
then there's the fun you can have with

00:25:33,200 --> 00:25:38,799
containers when they're running

00:25:35,200 --> 00:25:40,799
the the sephadm tool has a handy way

00:25:38,799 --> 00:25:41,919
to let you get a shell inside a running

00:25:40,799 --> 00:25:43,360
container this is different than

00:25:41,919 --> 00:25:44,720
sephodium shell which spins up a new

00:25:43,360 --> 00:25:47,520
container this is

00:25:44,720 --> 00:25:49,360
cephadium enter actually drops you

00:25:47,520 --> 00:25:52,320
inside a running container

00:25:49,360 --> 00:25:53,760
um this is of course just a convenience

00:25:52,320 --> 00:25:57,120
wrapper around

00:25:53,760 --> 00:25:59,679
podman exec it container sh

00:25:57,120 --> 00:26:01,039
but this is there so that you can

00:25:59,679 --> 00:26:02,159
interact directly with running

00:26:01,039 --> 00:26:03,520
self-demons

00:26:02,159 --> 00:26:05,200
using tools that are present in the

00:26:03,520 --> 00:26:06,240
container but probably aren't present on

00:26:05,200 --> 00:26:08,240
the host

00:26:06,240 --> 00:26:10,240
and this is helpful because you can ask

00:26:08,240 --> 00:26:13,039
individual demons what they're doing

00:26:10,240 --> 00:26:15,039
um as i i mentioned earlier you can tell

00:26:13,039 --> 00:26:16,240
a demon to jack up its debug levels if

00:26:15,039 --> 00:26:16,720
you want to get more information out of

00:26:16,240 --> 00:26:18,400
it

00:26:16,720 --> 00:26:20,240
and being able to do that from inside

00:26:18,400 --> 00:26:21,600
the running container um to talk to the

00:26:20,240 --> 00:26:22,880
demon's admin socket you have

00:26:21,600 --> 00:26:24,960
that's sort of where you have to do it

00:26:22,880 --> 00:26:28,320
from effectively there's

00:26:24,960 --> 00:26:28,320
yeah um

00:26:28,559 --> 00:26:31,679
i i mentioned earlier that i sometimes

00:26:31,039 --> 00:26:33,440
in the

00:26:31,679 --> 00:26:35,760
pre-container world found it useful to

00:26:33,440 --> 00:26:37,919
go and edit python code in

00:26:35,760 --> 00:26:39,760
user share surf manager on a running

00:26:37,919 --> 00:26:42,159
cluster when i wanted to test little

00:26:39,760 --> 00:26:43,760
minor fixes for certain issues and

00:26:42,159 --> 00:26:46,400
suddenly i couldn't do that anymore

00:26:43,760 --> 00:26:47,520
with containerized services but wait

00:26:46,400 --> 00:26:50,960
what if i use

00:26:47,520 --> 00:26:52,320
podman exec it bash to get a shell

00:26:50,960 --> 00:26:54,559
inside the container then i can go and

00:26:52,320 --> 00:26:57,120
edit files to my heart's content

00:26:54,559 --> 00:26:59,440
except there's no editor in there which

00:26:57,120 --> 00:27:02,000
is probably for the best

00:26:59,440 --> 00:27:04,159
as luck would have it however the souza

00:27:02,000 --> 00:27:05,840
based container image i was using

00:27:04,159 --> 00:27:08,720
did have the zipper package manager

00:27:05,840 --> 00:27:11,600
installed so i was able to go and add a

00:27:08,720 --> 00:27:12,559
add a software repository and install vm

00:27:11,600 --> 00:27:15,679
and then start

00:27:12,559 --> 00:27:15,679
you know messing around

00:27:17,760 --> 00:27:21,440
i want to make it very clear that nobody

00:27:19,600 --> 00:27:23,520
should ever actually do this

00:27:21,440 --> 00:27:25,200
it's an extremely bad idea your changes

00:27:23,520 --> 00:27:26,880
won't persist

00:27:25,200 --> 00:27:29,039
and it violates one of the key reasons

00:27:26,880 --> 00:27:30,399
for using containers in the first place

00:27:29,039 --> 00:27:32,320
which is you've got all of these neat

00:27:30,399 --> 00:27:34,240
little containers running which you can

00:27:32,320 --> 00:27:36,080
create and destroy at will

00:27:34,240 --> 00:27:37,760
but which you otherwise don't mess with

00:27:36,080 --> 00:27:39,039
i'm sure somebody will do this out in

00:27:37,760 --> 00:27:41,039
the wild because you

00:27:39,039 --> 00:27:42,559
you can and and they'll get confused but

00:27:41,039 --> 00:27:46,559
this is why i'm saying don't do it

00:27:42,559 --> 00:27:47,279
um but i was i was irritated personally

00:27:46,559 --> 00:27:49,039
because

00:27:47,279 --> 00:27:50,720
i wanted to test this little two-line

00:27:49,039 --> 00:27:52,240
change to some python code and

00:27:50,720 --> 00:27:54,000
the right way to do that against an

00:27:52,240 --> 00:27:55,760
actual running cluster

00:27:54,000 --> 00:27:57,600
would be for me to build a new ceph

00:27:55,760 --> 00:27:59,440
package with the changes applied

00:27:57,600 --> 00:28:01,039
which takes like an hour and then build

00:27:59,440 --> 00:28:02,559
a new container image which included

00:28:01,039 --> 00:28:05,440
that cef package and then deploy that

00:28:02,559 --> 00:28:07,520
container image on my running cluster

00:28:05,440 --> 00:28:09,200
the the right way would have taken me a

00:28:07,520 --> 00:28:12,640
couple of hours

00:28:09,200 --> 00:28:12,640
the wrong way took me five minutes

00:28:13,039 --> 00:28:17,840
if your side note

00:28:16,399 --> 00:28:19,520
if you're working out of a cef source

00:28:17,840 --> 00:28:20,880
tree there is a c patch tool which will

00:28:19,520 --> 00:28:21,840
go and actually try to patch containers

00:28:20,880 --> 00:28:24,399
with changes from your

00:28:21,840 --> 00:28:25,679
um uh uh source tree but so that's

00:28:24,399 --> 00:28:26,159
that's another bright way of doing it

00:28:25,679 --> 00:28:28,720
but

00:28:26,159 --> 00:28:31,840
anyway i just wanted to make this little

00:28:28,720 --> 00:28:31,840
change and test it

00:28:33,440 --> 00:28:38,559
the the last thing that i want to talk

00:28:37,520 --> 00:28:41,039
about

00:28:38,559 --> 00:28:42,480
um perhaps slightly more briefly but

00:28:41,039 --> 00:28:45,760
we'll see how we go

00:28:42,480 --> 00:28:48,320
is container orchestration

00:28:45,760 --> 00:28:50,880
so you've got uh you've got a whole

00:28:48,320 --> 00:28:52,399
bunch of containerized services

00:28:50,880 --> 00:28:54,480
running and they all need to talk to

00:28:52,399 --> 00:28:56,159
each other to do something useful

00:28:54,480 --> 00:28:58,000
and you might want to spin up a new

00:28:56,159 --> 00:29:00,799
service or add new nodes

00:28:58,000 --> 00:29:01,840
or scale things somehow and and being

00:29:00,799 --> 00:29:03,120
able to orchestrate

00:29:01,840 --> 00:29:05,279
all of this means that you don't have to

00:29:03,120 --> 00:29:05,600
think about it and that's really really

00:29:05,279 --> 00:29:08,559
good

00:29:05,600 --> 00:29:09,600
it's awesome i can just say to either

00:29:08,559 --> 00:29:12,000
kubernetes

00:29:09,600 --> 00:29:14,159
rook or ceph adm i want three mon

00:29:12,000 --> 00:29:15,840
daemons three managers i want the osds

00:29:14,159 --> 00:29:17,760
to eat all the disks

00:29:15,840 --> 00:29:19,200
and later maybe i want to say oh hey

00:29:17,760 --> 00:29:21,679
it'd be really neat if you could spin up

00:29:19,200 --> 00:29:24,480
a few rados gateways go for it

00:29:21,679 --> 00:29:27,840
and that's fine that's fine as long as

00:29:24,480 --> 00:29:27,840
everything works

00:29:31,600 --> 00:29:36,559
when it doesn't work you're left digging

00:29:34,320 --> 00:29:38,559
through the logs of the orchestrator

00:29:36,559 --> 00:29:40,799
or trying to cajole it into deploying

00:29:38,559 --> 00:29:42,320
what you want

00:29:40,799 --> 00:29:45,520
and it's totally possible to do this

00:29:42,320 --> 00:29:48,720
don't get me wrong but

00:29:45,520 --> 00:29:51,200
you can end up in strange states and

00:29:48,720 --> 00:29:53,200
have difficulty figuring out why it's

00:29:51,200 --> 00:29:54,320
it's entirely possible to end up in a

00:29:53,200 --> 00:29:56,080
situation where

00:29:54,320 --> 00:29:58,240
the orchestration framework will keep

00:29:56,080 --> 00:29:59,840
attempting to deploy something which

00:29:58,240 --> 00:30:01,360
for whatever reason keeps failing to

00:29:59,840 --> 00:30:02,559
start

00:30:01,360 --> 00:30:04,399
maybe that's due to incorrect

00:30:02,559 --> 00:30:06,880
configuration or to some fundamental

00:30:04,399 --> 00:30:08,799
underlying bug or worse both

00:30:06,880 --> 00:30:10,000
but the point is you want this thing to

00:30:08,799 --> 00:30:12,559
go it's not working

00:30:10,000 --> 00:30:13,840
and you're left trying to figure out why

00:30:12,559 --> 00:30:17,440
you can figure it out

00:30:13,840 --> 00:30:18,399
um there's uh uh there's tools for

00:30:17,440 --> 00:30:22,559
getting logs out there's

00:30:18,399 --> 00:30:23,520
the the sef orch ls that i mentioned

00:30:22,559 --> 00:30:26,880
earlier if you

00:30:23,520 --> 00:30:27,919
give it the right flag to make it spit

00:30:26,880 --> 00:30:29,520
out some yaml

00:30:27,919 --> 00:30:30,799
it will give you a nice dump of all of

00:30:29,520 --> 00:30:32,399
the configuration that the orchestrator

00:30:30,799 --> 00:30:34,320
is actually trying to apply so you can

00:30:32,399 --> 00:30:38,080
you can see what it's trying to do

00:30:34,320 --> 00:30:39,600
and there's um uh uh seth logs last

00:30:38,080 --> 00:30:41,120
cephadiam whatever the command is just

00:30:39,600 --> 00:30:42,320
to see the last set of logs that have

00:30:41,120 --> 00:30:46,000
come out of certain places so

00:30:42,320 --> 00:30:47,360
you can discover it but um you can also

00:30:46,000 --> 00:30:49,039
end up in a position where you're having

00:30:47,360 --> 00:30:50,159
to sort of track things through layer by

00:30:49,039 --> 00:30:52,320
layer and it i

00:30:50,159 --> 00:30:53,919
it can still be a pain especially if you

00:30:52,320 --> 00:30:56,960
you know if you're new to it

00:30:53,919 --> 00:30:58,640
right one

00:30:56,960 --> 00:31:01,120
extremely trivial example of this

00:30:58,640 --> 00:31:02,880
problem is that it's possible to end up

00:31:01,120 --> 00:31:04,720
running mixed versions of container

00:31:02,880 --> 00:31:06,240
images within a cluster

00:31:04,720 --> 00:31:07,840
there was an edge case that i came

00:31:06,240 --> 00:31:11,360
across at one point

00:31:07,840 --> 00:31:14,720
where i was using a um

00:31:11,360 --> 00:31:15,440
i was using a local mirror of a local

00:31:14,720 --> 00:31:17,919
registry

00:31:15,440 --> 00:31:18,640
for container images because i was

00:31:17,919 --> 00:31:21,919
spinning up

00:31:18,640 --> 00:31:23,200
i was deploying and destroying

00:31:21,919 --> 00:31:25,279
services a lot and i didn't want to have

00:31:23,200 --> 00:31:26,399
to pull these images from the other side

00:31:25,279 --> 00:31:28,640
of the world

00:31:26,399 --> 00:31:30,240
every time i did that so i'm running my

00:31:28,640 --> 00:31:32,720
own local registry

00:31:30,240 --> 00:31:33,600
and there was a configuration option

00:31:32,720 --> 00:31:36,159
that

00:31:33,600 --> 00:31:37,679
um wasn't set correctly and i ended up

00:31:36,159 --> 00:31:39,450
actually having deployed

00:31:37,679 --> 00:31:41,120
um uh

00:31:39,450 --> 00:31:43,600
[Music]

00:31:41,120 --> 00:31:45,039
half-ish my the demons running on my

00:31:43,600 --> 00:31:46,880
cluster with the images that i expected

00:31:45,039 --> 00:31:48,399
to be using and the other half got

00:31:46,880 --> 00:31:52,240
pulled down from

00:31:48,399 --> 00:31:55,279
upstream well i wasn't looking um

00:31:52,240 --> 00:31:57,120
similar and that my fault um

00:31:55,279 --> 00:31:58,880
you know missing configuration option

00:31:57,120 --> 00:32:02,240
but

00:31:58,880 --> 00:32:04,240
still similarly if you deploy

00:32:02,240 --> 00:32:05,279
using the container image that's tagged

00:32:04,240 --> 00:32:08,000
latest

00:32:05,279 --> 00:32:09,200
um when you initially deploy your your

00:32:08,000 --> 00:32:11,840
cluster you'll be using

00:32:09,200 --> 00:32:14,559
whatever version latest was at that time

00:32:11,840 --> 00:32:18,159
and if you expand your cluster later

00:32:14,559 --> 00:32:20,640
later latest jesus um and that image

00:32:18,159 --> 00:32:22,559
has had a version bump in the meantime

00:32:20,640 --> 00:32:25,039
you'll end up deploying new services

00:32:22,559 --> 00:32:26,880
with a version that's newer than the

00:32:25,039 --> 00:32:28,159
existing services running in your

00:32:26,880 --> 00:32:31,279
cluster and that is

00:32:28,159 --> 00:32:31,279
unlikely to end well

00:32:34,880 --> 00:32:40,720
i came across a timely tweet while i was

00:32:39,279 --> 00:32:43,200
working through this talk again at the

00:32:40,720 --> 00:32:46,559
last minute where

00:32:43,200 --> 00:32:48,399
darren shepherd says kubernetes

00:32:46,559 --> 00:32:49,919
orchestration has been compared to jazz

00:32:48,399 --> 00:32:51,760
improv

00:32:49,919 --> 00:32:53,360
in practice it's much more like a 7th

00:32:51,760 --> 00:32:54,720
grade band concert where you're happy in

00:32:53,360 --> 00:32:57,360
the end because your kid didn't drop

00:32:54,720 --> 00:32:58,799
their instrument

00:32:57,360 --> 00:33:02,080
i'm not going to pretend to speak for

00:32:58,799 --> 00:33:03,840
darren here we do share an employer now

00:33:02,080 --> 00:33:05,440
but we haven't actually met or discussed

00:33:03,840 --> 00:33:07,440
this stuff that

00:33:05,440 --> 00:33:08,960
that tweet really resonated with me

00:33:07,440 --> 00:33:10,799
though because

00:33:08,960 --> 00:33:12,320
i read it as someone wanting a thing to

00:33:10,799 --> 00:33:14,640
work really well that should work really

00:33:12,320 --> 00:33:16,159
well and having it not quite go so well

00:33:14,640 --> 00:33:17,760
but sort of still being happy we're

00:33:16,159 --> 00:33:20,720
getting somewhere but

00:33:17,760 --> 00:33:22,799
um and and expressing that with a you

00:33:20,720 --> 00:33:24,640
know a little bit of humor or

00:33:22,799 --> 00:33:26,000
and i think taking the piss out of

00:33:24,640 --> 00:33:30,799
systems like this

00:33:26,000 --> 00:33:32,720
um a little bit is you know it can be um

00:33:30,799 --> 00:33:33,919
it's it's helpful it's it's bad if you

00:33:32,720 --> 00:33:35,600
take it too far

00:33:33,919 --> 00:33:37,200
because you never want to end up in a in

00:33:35,600 --> 00:33:38,640
a situation where you're kicking

00:33:37,200 --> 00:33:40,320
somebody's puppy

00:33:38,640 --> 00:33:42,000
and that's that's not helpful and i

00:33:40,320 --> 00:33:43,519
really hope i haven't done that with how

00:33:42,000 --> 00:33:45,039
i named this talk because

00:33:43,519 --> 00:33:46,880
my talk title is possibly a little bit

00:33:45,039 --> 00:33:49,600
harsher than darren's tweet but

00:33:46,880 --> 00:33:51,440
um i think it's important to recognize

00:33:49,600 --> 00:33:53,760
those times where people have these

00:33:51,440 --> 00:33:57,200
moments of frustration with technology

00:33:53,760 --> 00:33:58,799
because those cries of pain can help us

00:33:57,200 --> 00:34:01,120
they can help to tell us what we need to

00:33:58,799 --> 00:34:01,120
fix

00:34:03,440 --> 00:34:07,760
i i wrote this talk because the things

00:34:07,039 --> 00:34:10,320
that i

00:34:07,760 --> 00:34:12,079
personally actually needed to do uh

00:34:10,320 --> 00:34:14,079
troubleshooting weird failures

00:34:12,079 --> 00:34:16,159
variously hacking on or testing bits of

00:34:14,079 --> 00:34:17,839
code in strange environments

00:34:16,159 --> 00:34:20,480
and and understanding what the

00:34:17,839 --> 00:34:22,240
orchestrator was doing had suddenly

00:34:20,480 --> 00:34:23,040
become way more complicated than they

00:34:22,240 --> 00:34:24,800
used to be

00:34:23,040 --> 00:34:27,200
at least from my perspective and i got

00:34:24,800 --> 00:34:27,200
cranky

00:34:27,760 --> 00:34:32,720
i think in some respects if i had no

00:34:30,960 --> 00:34:35,760
prior experience deploying

00:34:32,720 --> 00:34:37,119
ceph the old way as package software

00:34:35,760 --> 00:34:39,119
i may have dealt better with the

00:34:37,119 --> 00:34:40,560
containerized forms because i wouldn't

00:34:39,119 --> 00:34:42,639
have had any preconceptions

00:34:40,560 --> 00:34:44,639
about where things should have been or

00:34:42,639 --> 00:34:47,280
how they should have worked

00:34:44,639 --> 00:34:48,960
on the other hand i also wouldn't have

00:34:47,280 --> 00:34:49,679
known as much about the internals of

00:34:48,960 --> 00:34:52,960
ceph

00:34:49,679 --> 00:34:54,480
um so i may not have had as good

00:34:52,960 --> 00:34:56,720
an idea where to look when certain

00:34:54,480 --> 00:34:58,720
things failed it's difficult for me to

00:34:56,720 --> 00:35:01,440
be objective about this because i'm i'm

00:34:58,720 --> 00:35:03,920
too close to the whole thing

00:35:01,440 --> 00:35:04,640
the most useful takeaway here in my

00:35:03,920 --> 00:35:06,880
opinion

00:35:04,640 --> 00:35:08,160
is that this experience demonstrates

00:35:06,880 --> 00:35:10,560
that there's a certain

00:35:08,160 --> 00:35:11,440
there's a a tension between usability

00:35:10,560 --> 00:35:13,920
and complexity

00:35:11,440 --> 00:35:15,680
in different areas of software and for

00:35:13,920 --> 00:35:17,599
different use cases

00:35:15,680 --> 00:35:18,960
containerizing ceph made it easier to

00:35:17,599 --> 00:35:22,079
deploy for new users

00:35:18,960 --> 00:35:23,760
and easier to manage and maintain at the

00:35:22,079 --> 00:35:25,680
same time though it resulted in

00:35:23,760 --> 00:35:27,280
additional implementation complexity

00:35:25,680 --> 00:35:28,960
which makes troubleshooting certain

00:35:27,280 --> 00:35:30,079
types of failure more cumbersome than it

00:35:28,960 --> 00:35:31,680
used to be

00:35:30,079 --> 00:35:35,200
i don't think you can ever get away from

00:35:31,680 --> 00:35:37,440
making trade-offs of that nature though

00:35:35,200 --> 00:35:38,880
everything we do with software in my

00:35:37,440 --> 00:35:41,760
opinion is or should be

00:35:38,880 --> 00:35:42,240
to somehow make life better for someone

00:35:41,760 --> 00:35:44,240
the

00:35:42,240 --> 00:35:46,640
the general question there is whose life

00:35:44,240 --> 00:35:48,880
are we making better how and why

00:35:46,640 --> 00:35:50,160
that's stated like that that's an

00:35:48,880 --> 00:35:53,359
incredibly broad question

00:35:50,160 --> 00:35:55,440
uh broad question and it's um

00:35:53,359 --> 00:35:57,280
far bigger than this talk um and it's

00:35:55,440 --> 00:35:58,560
one i'm not actually qualified to answer

00:35:57,280 --> 00:35:59,280
because that would require input from

00:35:58,560 --> 00:36:00,240
somebody with

00:35:59,280 --> 00:36:02,640
some sort of background in the

00:36:00,240 --> 00:36:06,160
humanities so

00:36:02,640 --> 00:36:07,760
i'm going to make a smaller statement

00:36:06,160 --> 00:36:09,359
which i am more or less qualified to

00:36:07,760 --> 00:36:12,400
make and that is

00:36:09,359 --> 00:36:14,480
that you can't fundamentally you can't

00:36:12,400 --> 00:36:16,400
make fundamentally complicated systems

00:36:14,480 --> 00:36:17,760
any less complicated by containerizing

00:36:16,400 --> 00:36:19,119
everything

00:36:17,760 --> 00:36:21,599
the best you can do is move the

00:36:19,119 --> 00:36:24,000
complexity from one place to another

00:36:21,599 --> 00:36:26,160
and hope and hopefully you will

00:36:24,000 --> 00:36:28,160
eventually end up in a position where

00:36:26,160 --> 00:36:28,880
the complexity has been moved away from

00:36:28,160 --> 00:36:30,960
the users

00:36:28,880 --> 00:36:32,400
away from the troubleshooters and onto

00:36:30,960 --> 00:36:34,240
the creators of the systems

00:36:32,400 --> 00:36:36,320
and into knowledge embedded in the tools

00:36:34,240 --> 00:36:37,839
themselves and into better documentation

00:36:36,320 --> 00:36:40,400
user experience

00:36:37,839 --> 00:36:44,000
so that nobody else ever has that moment

00:36:40,400 --> 00:36:44,000
i had that caused me to write this talk

00:36:44,800 --> 00:36:48,640
i think we still have some work to do on

00:36:47,200 --> 00:36:54,079
this front

00:36:48,640 --> 00:36:57,040
but i also think we can do it

00:36:54,079 --> 00:36:58,320
thank you very much i hope you've uh

00:36:57,040 --> 00:37:03,680
enjoyed that little rant

00:36:58,320 --> 00:37:03,680
right right rant that was great

00:37:04,079 --> 00:37:10,079
it's the end of the day thanks very much

00:37:07,359 --> 00:37:10,960
um at some point you talked about the

00:37:10,079 --> 00:37:12,960
the flavor

00:37:10,960 --> 00:37:14,000
of your presentation and i think that

00:37:12,960 --> 00:37:15,440
really shone through

00:37:14,000 --> 00:37:17,680
i could really feel sort of the

00:37:15,440 --> 00:37:18,960
frustration and the passion that you

00:37:17,680 --> 00:37:21,520
have for your work through this

00:37:18,960 --> 00:37:23,520
presentation which is great to see

00:37:21,520 --> 00:37:24,880
we do have some questions coming through

00:37:23,520 --> 00:37:27,680
um this one's from

00:37:24,880 --> 00:37:28,320
a little bit earlier in the talk um

00:37:27,680 --> 00:37:30,320
shouldn't

00:37:28,320 --> 00:37:34,240
kubernetes have replaced the failed

00:37:30,320 --> 00:37:34,240
nodes or not possible with seth

00:37:34,839 --> 00:37:40,480
um it depends

00:37:37,839 --> 00:37:41,599
um classic classic distributed storage

00:37:40,480 --> 00:37:44,480
answer

00:37:41,599 --> 00:37:44,480
um so

00:37:44,880 --> 00:37:48,720
in a cef cluster some things are

00:37:46,560 --> 00:37:50,960
stateful and some are stateless

00:37:48,720 --> 00:37:52,560
if you have uh the mons and the managers

00:37:50,960 --> 00:37:55,280
the metadata servers

00:37:52,560 --> 00:37:56,560
um if one of them dies you can spin up

00:37:55,280 --> 00:37:57,839
another one somewhere else and it all

00:37:56,560 --> 00:37:59,839
just sort of works because it doesn't

00:37:57,839 --> 00:38:03,440
really matter where they're running

00:37:59,839 --> 00:38:05,200
um for osds they um

00:38:03,440 --> 00:38:06,480
which are actually backed by a physical

00:38:05,200 --> 00:38:09,119
disk

00:38:06,480 --> 00:38:10,240
um you you can't sort of magically make

00:38:09,119 --> 00:38:11,520
another one of them come up somewhere

00:38:10,240 --> 00:38:14,320
else without somebody running out and

00:38:11,520 --> 00:38:14,320
moving a disk around

00:38:15,280 --> 00:38:21,440
okay okay so up next

00:38:18,640 --> 00:38:22,079
we have a question if thing if things

00:38:21,440 --> 00:38:23,920
need to run

00:38:22,079 --> 00:38:25,680
in a particular order depend or

00:38:23,920 --> 00:38:28,720
dependencies should that be

00:38:25,680 --> 00:38:31,920
kubernetes orchestration dash helm not

00:38:28,720 --> 00:38:35,520
scripts that run in that container

00:38:31,920 --> 00:38:39,119
yes if you're doing it with

00:38:35,520 --> 00:38:43,280
kubernetes and helm you yes and

00:38:39,119 --> 00:38:45,040
even in the knot possibly i

00:38:43,280 --> 00:38:47,440
didn't cover it clearly enough even in

00:38:45,040 --> 00:38:51,839
the non-kubernetes

00:38:47,440 --> 00:38:53,839
case um in the the sef adm case when

00:38:51,839 --> 00:38:56,240
you're doing upgrades we actually

00:38:53,839 --> 00:38:57,119
there is some knowledge about that

00:38:56,240 --> 00:38:58,880
inside

00:38:57,119 --> 00:39:01,839
um ceph itself about what order to do

00:38:58,880 --> 00:39:01,839
things in

00:39:03,040 --> 00:39:05,359
okay

00:39:06,400 --> 00:39:13,119
okay next up is a zipper necessary

00:39:09,520 --> 00:39:15,520
in the container at all i

00:39:13,119 --> 00:39:17,520
sincerely doubt it i i suspect actually

00:39:15,520 --> 00:39:20,079
in that case that this um

00:39:17,520 --> 00:39:21,680
this container was built on top of a i'd

00:39:20,079 --> 00:39:22,720
have to check but um this was built on

00:39:21,680 --> 00:39:26,800
top of a default

00:39:22,720 --> 00:39:28,079
minimal um uh a slurs template based

00:39:26,800 --> 00:39:28,640
thing which actually had that in there

00:39:28,079 --> 00:39:31,760
so it

00:39:28,640 --> 00:39:34,960
ideally it um you don't want people

00:39:31,760 --> 00:39:34,960
doing crazy things like i do

00:39:35,520 --> 00:39:42,880
that yes do not attempt this

00:39:39,920 --> 00:39:46,000
you'll just get into trouble yeah it's

00:39:42,880 --> 00:39:48,480
good to know that going into it though

00:39:46,000 --> 00:39:50,560
okay next question are there plans for a

00:39:48,480 --> 00:39:53,200
test suite ci pipeline

00:39:50,560 --> 00:39:54,880
um for surf edm that would potentially

00:39:53,200 --> 00:39:59,119
catch this issue

00:39:54,880 --> 00:40:01,280
this is um oh anything um

00:39:59,119 --> 00:40:01,280
so

00:40:02,320 --> 00:40:05,359
i should be able to answer that and i

00:40:03,680 --> 00:40:09,599
can't um

00:40:05,359 --> 00:40:11,520
there's um

00:40:09,599 --> 00:40:13,440
there's i'm i'm not sure how complete

00:40:11,520 --> 00:40:14,560
that is at the moment um i know that

00:40:13,440 --> 00:40:17,839
earlier on in the

00:40:14,560 --> 00:40:20,400
the adm development there had been

00:40:17,839 --> 00:40:21,760
areas that were particularly patchy um

00:40:20,400 --> 00:40:25,520
with regards

00:40:21,760 --> 00:40:28,319
uh testing and um

00:40:25,520 --> 00:40:29,520
we've uh you know everybody wants to

00:40:28,319 --> 00:40:30,720
improve that i just can't say off the

00:40:29,520 --> 00:40:33,200
top of my head exactly what state it's

00:40:30,720 --> 00:40:33,200
in right now

00:40:34,000 --> 00:40:38,000
is that something that comes up a bit uh

00:40:36,960 --> 00:40:40,000
yeah we i i

00:40:38,000 --> 00:40:41,119
was um chatting about it with a couple

00:40:40,000 --> 00:40:42,160
of colleagues a couple of weeks ago

00:40:41,119 --> 00:40:45,920
actually it's just

00:40:42,160 --> 00:40:47,440
i actually haven't looked at at

00:40:45,920 --> 00:40:49,119
what's what's being run automatically

00:40:47,440 --> 00:40:53,599
myself in the in the last

00:40:49,119 --> 00:40:55,760
you know little while so

00:40:53,599 --> 00:40:57,040
okay so we do want to make sure that

00:40:55,760 --> 00:40:58,000
we're actually doing automated testing

00:40:57,040 --> 00:40:59,040
of everything because that would have

00:40:58,000 --> 00:41:03,520
caught some of these things

00:40:59,040 --> 00:41:03,520
and um you know yeah

00:41:03,760 --> 00:41:09,760
in a perfect world huh yep

00:41:07,359 --> 00:41:11,040
okay next question what's your take on

00:41:09,760 --> 00:41:14,160
putting all this stuff

00:41:11,040 --> 00:41:17,520
into an operator like an ocs

00:41:14,160 --> 00:41:19,599
in other words more turtles um

00:41:17,520 --> 00:41:21,599
i don't know how to answer that question

00:41:19,599 --> 00:41:23,760
maybe grab me later on the chat

00:41:21,599 --> 00:41:24,880
and we can go into more detail that

00:41:23,760 --> 00:41:29,119
sounds good

00:41:24,880 --> 00:41:33,280
okay what have we got up next

00:41:29,119 --> 00:41:35,200
okay here we go uh would more faster

00:41:33,280 --> 00:41:37,200
would more or faster storage hardware

00:41:35,200 --> 00:41:39,280
for testing and build clusters be an

00:41:37,200 --> 00:41:40,240
option to shorten the system level build

00:41:39,280 --> 00:41:43,359
pipeline

00:41:40,240 --> 00:41:43,359
elapsed time

00:41:43,680 --> 00:41:50,240
um maybe

00:41:46,960 --> 00:41:52,000
um um if you're talking about actually

00:41:50,240 --> 00:41:54,240
compiling cerf itself that

00:41:52,000 --> 00:41:55,680
that just takes ages because it's you

00:41:54,240 --> 00:41:59,599
know

00:41:55,680 --> 00:41:59,599
large um

00:42:00,640 --> 00:42:03,920
so i'm gonna say yeah sure um you know

00:42:02,640 --> 00:42:04,800
you can always add more hardware to make

00:42:03,920 --> 00:42:08,880
things

00:42:04,800 --> 00:42:08,880
things um faster

00:42:14,000 --> 00:42:19,839
and can you see any sort of big changes

00:42:16,560 --> 00:42:23,920
in this area coming up or

00:42:19,839 --> 00:42:27,760
where do you see any any great changes

00:42:23,920 --> 00:42:30,160
well i think overall um

00:42:27,760 --> 00:42:31,680
this doing this whole container thing

00:42:30,160 --> 00:42:34,400
either kubernetes or um

00:42:31,680 --> 00:42:35,760
or cephadm has is actually is good for

00:42:34,400 --> 00:42:36,720
for sep so it's sort of it's a step in

00:42:35,760 --> 00:42:38,240
the right direction in terms of

00:42:36,720 --> 00:42:41,280
usability and everything

00:42:38,240 --> 00:42:46,720
um there's um

00:42:41,280 --> 00:42:46,720
there's there's work going on to make

00:42:46,960 --> 00:42:51,040
the things that i've complained about

00:42:48,319 --> 00:42:52,800
easier to deal with um to improve

00:42:51,040 --> 00:42:54,640
um the tooling so that you can get more

00:42:52,800 --> 00:42:58,720
status out of out of what the

00:42:54,640 --> 00:43:02,160
the orchestrator is doing and um and

00:42:58,720 --> 00:43:04,960
um there's other without going into

00:43:02,160 --> 00:43:06,560
huge amounts of detail about the bits

00:43:04,960 --> 00:43:09,839
inside seph itself there's other

00:43:06,560 --> 00:43:11,680
work going on too for example they said

00:43:09,839 --> 00:43:13,119
there's a seph dashboard gui which

00:43:11,680 --> 00:43:14,720
knows how to do some things but doesn't

00:43:13,119 --> 00:43:16,240
know how to do everything yet so there's

00:43:14,720 --> 00:43:17,359
some work going on to improve that and

00:43:16,240 --> 00:43:19,680
hook things together and make things

00:43:17,359 --> 00:43:19,680
easier

00:43:20,640 --> 00:43:24,400
do you have any advice for people who

00:43:22,400 --> 00:43:26,000
want to sort of explore this further

00:43:24,400 --> 00:43:28,240
perhaps you know increase their skill

00:43:26,000 --> 00:43:30,140
and knowledge level in this area

00:43:28,240 --> 00:43:31,359
um about do you mean

00:43:30,140 --> 00:43:33,440
[Music]

00:43:31,359 --> 00:43:34,400
uh ceph specifically or containers in

00:43:33,440 --> 00:43:38,640
general

00:43:34,400 --> 00:43:42,720
yeah all of the above all of the above

00:43:38,640 --> 00:43:44,240
um so um ceph specifically self.io the

00:43:42,720 --> 00:43:48,079
the blog there has um

00:43:44,240 --> 00:43:49,920
you know up-to-date stuff about um what

00:43:48,079 --> 00:43:51,760
uh what interesting things are happening

00:43:49,920 --> 00:43:53,040
there's irc channels and mailing lists

00:43:51,760 --> 00:43:56,560
for those

00:43:53,040 --> 00:43:59,599
um the um

00:43:56,560 --> 00:44:02,319
the uh uh likewise for

00:43:59,599 --> 00:44:04,160
for rook there's the um github projects

00:44:02,319 --> 00:44:06,240
there and and the relevant mailing lists

00:44:04,160 --> 00:44:08,640
and things there as well

00:44:06,240 --> 00:44:10,560
um would be a good place to to look for

00:44:08,640 --> 00:44:12,560
those things in general

00:44:10,560 --> 00:44:13,680
yeah that's great that's great advice

00:44:12,560 --> 00:44:16,319
thank you

00:44:13,680 --> 00:44:16,880
okay so i think we'll probably leave it

00:44:16,319 --> 00:44:19,920
there

00:44:16,880 --> 00:44:20,240
thank you so much for ending the day for

00:44:19,920 --> 00:44:23,440
us

00:44:20,240 --> 00:44:25,520
it was a really great presentation um

00:44:23,440 --> 00:44:26,560
lots to take away from that i think for

00:44:25,520 --> 00:44:28,079
everybody will

00:44:26,560 --> 00:44:30,400
probably be quite a lot of discussion

00:44:28,079 --> 00:44:31,520
afterwards as people unpack all of that

00:44:30,400 --> 00:44:34,480
information

00:44:31,520 --> 00:44:35,440
so just a reminder to everybody that tim

00:44:34,480 --> 00:44:38,240
will be available

00:44:35,440 --> 00:44:39,440
on the post q a channel um to keep the

00:44:38,240 --> 00:44:41,359
discussion going

00:44:39,440 --> 00:44:43,599
so feel free to ask questions or delve a

00:44:41,359 --> 00:44:46,319
little bit deeper in that space

00:44:43,599 --> 00:44:49,440
um so that's a wrap uh thank you

00:44:46,319 --> 00:44:51,440
everyone for taking part in lca 2021

00:44:49,440 --> 00:44:52,800
uh i'd like to thank you all for being

00:44:51,440 --> 00:44:55,440
in rusty owl hall

00:44:52,800 --> 00:44:56,319
today and we would love to hear lovely

00:44:55,440 --> 00:44:58,720
head over

00:44:56,319 --> 00:44:59,920
to the main stage at tux theatre for the

00:44:58,720 --> 00:45:03,280
conference closing

00:44:59,920 --> 00:45:04,000
so that's in about 15 minutes at 5 40.

00:45:03,280 --> 00:45:05,920
so it'd be great

00:45:04,000 --> 00:45:07,119
to see everybody there for closing of

00:45:05,920 --> 00:45:10,079
this of the conference

00:45:07,119 --> 00:45:12,800
and thanks again tim for being with us

00:45:10,079 --> 00:45:12,800
thank you for having me

00:45:14,920 --> 00:45:17,920

YouTube URL: https://www.youtube.com/watch?v=pPZsN_urpqw


