Title: "Teaching an old Bovine Gnu Tricks: What's next for Emacs?" - Jeffrey Walsh (LCA 2021 Online)
Publication date: 2021-01-31
Playlist: linux.conf.au 2021
Description: 
	Jeffrey Walsh

https://lca2021.linux.org.au/schedule/presentation/48/

In a rare positive of 2020, GNU/Emacs 27.1 was released with a heap of new features, bugfixes and performance improvements.
This was almost immediately followed by the usual Navel-Gazing and bike-shedding discussion that gets emacs-devel in the news.

Buried under the suggestions of new key-bindings, better user on-boarding and new languages that should replace lisp this time were discussions for features desperately needed to drag Emacs forward.

One such feature is the porting of Emacs to the Wayland display Protocol using GTK3. While seemingly simple at first glance, the history of the Emacs display engine would prove to make this a much more difficult task.  

In this talk I will cover the motivations and significant challenges of porting Emacs to use wayland, shed some skeletons from the code base, show the current state of the system before considering, what should be next for an editor that keeps on going.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by Next Day Video Australia: https://nextdayvideo.com.au

#linux.conf.au #linux #foss #opensource

Sun Jan 24 10:45:00 2021 at Tux Theatre
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,759 --> 00:00:20,880
my name's betsy and i will

00:00:17,840 --> 00:00:24,080
be your mc here in tux today um

00:00:20,880 --> 00:00:25,840
this is ash in case she joins at any

00:00:24,080 --> 00:00:29,039
point you know who that is

00:00:25,840 --> 00:00:30,880
um and i am joining you today from the

00:00:29,039 --> 00:00:32,880
lands of the yagara people

00:00:30,880 --> 00:00:34,399
um the traditional owners of the land on

00:00:32,880 --> 00:00:37,840
which i'm speaking

00:00:34,399 --> 00:00:40,399
uh so we're all here we all enjoyed the

00:00:37,840 --> 00:00:43,760
keynote we've all got our coffee

00:00:40,399 --> 00:00:47,039
and our first speaker today

00:00:43,760 --> 00:00:50,320
is jeff so um

00:00:47,039 --> 00:00:50,879
jeff walsh is here with us jeff is a

00:00:50,320 --> 00:00:53,120
system

00:00:50,879 --> 00:00:55,039
software engineer generally found elbow

00:00:53,120 --> 00:00:56,239
deep in the crusty part of the code base

00:00:55,039 --> 00:00:58,719
that needs work

00:00:56,239 --> 00:01:00,160
when not screaming why i commit logs he

00:00:58,719 --> 00:01:03,120
is often seen around

00:01:00,160 --> 00:01:05,199
working with or talking about bikes so

00:01:03,120 --> 00:01:06,880
uh jeff might have some time to answer

00:01:05,199 --> 00:01:09,760
questions live at the end of

00:01:06,880 --> 00:01:10,400
talk uh if you would like to ask a

00:01:09,760 --> 00:01:12,720
question

00:01:10,400 --> 00:01:14,479
uh please type it into the chat

00:01:12,720 --> 00:01:16,240
invenuless there and proceed it with the

00:01:14,479 --> 00:01:19,200
word question in all caps

00:01:16,240 --> 00:01:21,520
so that our lovely chat monitors can

00:01:19,200 --> 00:01:23,200
find it sorry i'm just shaking cat fur

00:01:21,520 --> 00:01:24,159
off of everything right now that's what

00:01:23,200 --> 00:01:27,680
that is

00:01:24,159 --> 00:01:29,520
um and if if there's time at the end i

00:01:27,680 --> 00:01:30,640
will relay those questions to jeff and

00:01:29,520 --> 00:01:33,840
i'll answer them

00:01:30,640 --> 00:01:35,520
all right over to you jeff thank you

00:01:33,840 --> 00:01:39,439
betsy

00:01:35,520 --> 00:01:42,320
so teaching an old bovine new tricks

00:01:39,439 --> 00:01:44,320
i gotta say 2020 wasn't all that bad we

00:01:42,320 --> 00:01:45,600
got a new release of emacs um

00:01:44,320 --> 00:01:47,439
you know there's some history where

00:01:45,600 --> 00:01:50,479
sometimes a major release will take

00:01:47,439 --> 00:01:53,520
10 years but this year not so much

00:01:50,479 --> 00:01:55,040
um there was a huge jump in 27.1 for

00:01:53,520 --> 00:01:56,320
some reason it just felt like we just

00:01:55,040 --> 00:01:59,600
took a huge leap

00:01:56,320 --> 00:02:00,960
um half buzz support so good font

00:01:59,600 --> 00:02:02,000
renderings which gives us ligatures it

00:02:00,960 --> 00:02:03,520
gives you the whole with other stuff

00:02:02,000 --> 00:02:06,320
color emojis

00:02:03,520 --> 00:02:07,920
uh native json support in c so much much

00:02:06,320 --> 00:02:09,200
quicker than the lib add the list

00:02:07,920 --> 00:02:10,800
version of it

00:02:09,200 --> 00:02:12,560
portable dumping which sort of allows a

00:02:10,800 --> 00:02:14,080
bit of a speed up for startup and and

00:02:12,560 --> 00:02:15,760
shutdown and stuff like that

00:02:14,080 --> 00:02:17,920
and more importantly tabs so this is a

00:02:15,760 --> 00:02:19,440
feature that had been asked

00:02:17,920 --> 00:02:21,200
for since the dawn of time basically

00:02:19,440 --> 00:02:22,879
since you sort of your old

00:02:21,200 --> 00:02:24,239
firefox four days when it introduced

00:02:22,879 --> 00:02:25,680
tabs

00:02:24,239 --> 00:02:27,280
and it seemed like a lot of things were

00:02:25,680 --> 00:02:30,879
getting sorted

00:02:27,280 --> 00:02:32,560
unfortunately naval gazing set in

00:02:30,879 --> 00:02:34,239
i mean you had tabs what else did you

00:02:32,560 --> 00:02:36,959
want but

00:02:34,239 --> 00:02:37,440
it kind of descended into a bit of a hey

00:02:36,959 --> 00:02:39,680
you know

00:02:37,440 --> 00:02:41,599
how can we make imax more popular how

00:02:39,680 --> 00:02:43,680
can we how can we improve and get new

00:02:41,599 --> 00:02:44,879
users with lagging behind bim and this

00:02:43,680 --> 00:02:46,959
this is built over into

00:02:44,879 --> 00:02:48,800
lwn at least once went over to hacker

00:02:46,959 --> 00:02:50,400
news and a heap of others

00:02:48,800 --> 00:02:51,920
and i mean there was still remnants of

00:02:50,400 --> 00:02:54,480
this discussion going on as late as

00:02:51,920 --> 00:02:54,480
december

00:02:54,560 --> 00:02:58,959
truth is this just happens every single

00:02:56,319 --> 00:03:01,519
year this is a thing of bmx devil

00:02:58,959 --> 00:03:02,800
um 2020 was only kind of unusual on that

00:03:01,519 --> 00:03:04,080
it was a release year

00:03:02,800 --> 00:03:06,159
there were two of them and more people

00:03:04,080 --> 00:03:08,080
were home to sitting working from home

00:03:06,159 --> 00:03:09,440
and doing stuff from home to actually

00:03:08,080 --> 00:03:11,360
pile in on the discussion so more

00:03:09,440 --> 00:03:12,640
opinions being thrown about

00:03:11,360 --> 00:03:15,760
some of the some of the features were

00:03:12,640 --> 00:03:18,159
getting discussed um

00:03:15,760 --> 00:03:18,879
it's it's mostly because i actually

00:03:18,159 --> 00:03:20,239
could take a lot

00:03:18,879 --> 00:03:21,440
a lot of time for it because you know

00:03:20,239 --> 00:03:22,239
there's always this initial resistance

00:03:21,440 --> 00:03:23,920
from the old hands

00:03:22,239 --> 00:03:26,159
and i'm probably getting towards that

00:03:23,920 --> 00:03:28,080
stage now but you know if someone is

00:03:26,159 --> 00:03:29,680
able to present code in front of

00:03:28,080 --> 00:03:34,319
developers and maintainers it's

00:03:29,680 --> 00:03:34,319
usually we'll see welcome reviews

00:03:34,560 --> 00:03:38,319
i mean you can just about play with this

00:03:36,560 --> 00:03:39,920
uh bingo on these

00:03:38,319 --> 00:03:41,599
this discussion list because every gear

00:03:39,920 --> 00:03:44,480
there's we should change emacs list to

00:03:41,599 --> 00:03:46,560
javascript typescript tcl whatever

00:03:44,480 --> 00:03:47,840
we should replace the c mode with rust

00:03:46,560 --> 00:03:50,400
or whatever other language

00:03:47,840 --> 00:03:52,000
is supposedly safer and we should

00:03:50,400 --> 00:03:54,480
probably go and use the cqa

00:03:52,000 --> 00:03:55,760
the the common user access key bindings

00:03:54,480 --> 00:03:57,200
that are found in every single other

00:03:55,760 --> 00:04:00,080
editor

00:03:57,200 --> 00:04:01,280
i mean that has been done but they want

00:04:00,080 --> 00:04:02,959
to do it by default now

00:04:01,280 --> 00:04:05,040
um and i think that would sort of lose

00:04:02,959 --> 00:04:07,120
some of the essence

00:04:05,040 --> 00:04:08,480
i mean changing that emacs list with c

00:04:07,120 --> 00:04:10,640
or that emacs list

00:04:08,480 --> 00:04:11,599
to to a javascript or even the c parts

00:04:10,640 --> 00:04:13,760
with the javascript

00:04:11,599 --> 00:04:16,079
um basically just makes an emax a

00:04:13,760 --> 00:04:18,560
version of emacs code vs code

00:04:16,079 --> 00:04:19,120
um so we're kind of then getting to a

00:04:18,560 --> 00:04:22,720
point with

00:04:19,120 --> 00:04:24,479
what is emacs there are some other

00:04:22,720 --> 00:04:26,880
things we always see there's like a

00:04:24,479 --> 00:04:28,160
this idea of things that are very

00:04:26,880 --> 00:04:30,080
technically hard that will involve

00:04:28,160 --> 00:04:31,360
tons of work but would be welcomed by

00:04:30,080 --> 00:04:32,560
the list and that is

00:04:31,360 --> 00:04:34,960
let's make the list bit a little bit

00:04:32,560 --> 00:04:38,080
faster try and write less c

00:04:34,960 --> 00:04:39,840
write more lisp um try to

00:04:38,080 --> 00:04:42,639
like that's the key takeaway from the

00:04:39,840 --> 00:04:44,080
from emacs is that it is a lisp editor

00:04:42,639 --> 00:04:45,919
and then try and make the stuff that we

00:04:44,080 --> 00:04:48,080
already have in list a bit faster a bit

00:04:45,919 --> 00:04:50,320
more interactive a bit more live

00:04:48,080 --> 00:04:52,080
secondary we desperately needed to

00:04:50,320 --> 00:04:55,199
rewrite that next part of the

00:04:52,080 --> 00:04:57,360
like the gui um it's currently fragile

00:04:55,199 --> 00:04:59,680
small changes can have knock-on effects

00:04:57,360 --> 00:05:02,000
on tons of platforms

00:04:59,680 --> 00:05:02,800
um and x is kind of changing underneath

00:05:02,000 --> 00:05:05,360
us as well it's

00:05:02,800 --> 00:05:08,160
it's a long-needed thing but it's going

00:05:05,360 --> 00:05:08,160
to be very hard

00:05:09,039 --> 00:05:12,639
so i guess a lot of people started in

00:05:11,600 --> 00:05:15,199
that naval gaze and going

00:05:12,639 --> 00:05:16,400
why am i using emacs and in my case it's

00:05:15,199 --> 00:05:18,800
just too damn late

00:05:16,400 --> 00:05:19,600
um i've tried changing a couple of times

00:05:18,800 --> 00:05:21,919
it's

00:05:19,600 --> 00:05:23,360
it's it's clunky now for me to change

00:05:21,919 --> 00:05:24,720
because i'm so used to it i go on type

00:05:23,360 --> 00:05:26,000
stuff on a web browser and then i'll end

00:05:24,720 --> 00:05:28,800
up quitting it at least twice because

00:05:26,000 --> 00:05:30,880
i'm used to my workflow

00:05:28,800 --> 00:05:32,479
i mean it's been built up over a number

00:05:30,880 --> 00:05:33,600
of years as i said 10 years it's been

00:05:32,479 --> 00:05:36,000
paying the bills

00:05:33,600 --> 00:05:37,360
um you might say a mechanic has their

00:05:36,000 --> 00:05:39,520
toolbox and that is

00:05:37,360 --> 00:05:41,039
my toolbox for when i'm writing code

00:05:39,520 --> 00:05:43,680
it's my familiar environment

00:05:41,039 --> 00:05:44,800
it's home for me any new features that

00:05:43,680 --> 00:05:46,400
look interesting

00:05:44,800 --> 00:05:48,160
that come up in you in other editors

00:05:46,400 --> 00:05:49,600
that your sidebars your

00:05:48,160 --> 00:05:51,280
your tab complete like some of your

00:05:49,600 --> 00:05:52,000
completions snippets all that sort of

00:05:51,280 --> 00:05:53,919
stuff

00:05:52,000 --> 00:05:55,120
if it's worthy it gets ported really

00:05:53,919 --> 00:05:57,039
really quickly

00:05:55,120 --> 00:05:58,720
and i guess the main key thing is that

00:05:57,039 --> 00:05:59,680
when emac's paying the bills for me it's

00:05:58,720 --> 00:06:02,000
because i'm writing c

00:05:59,680 --> 00:06:03,520
and e max actually treats c as c and not

00:06:02,000 --> 00:06:07,360
a poor man c plus plus

00:06:03,520 --> 00:06:10,240
as was the case many years ago

00:06:07,360 --> 00:06:11,600
and i've kind of alluded to in the title

00:06:10,240 --> 00:06:13,759
why why do would you want

00:06:11,600 --> 00:06:15,280
waylon i know it's contentious and i've

00:06:13,759 --> 00:06:16,240
got a chance of derailing talk really

00:06:15,280 --> 00:06:17,840
really quickly

00:06:16,240 --> 00:06:19,440
but it kind of works on my box and i'm

00:06:17,840 --> 00:06:20,720
happy it kind of feels like it's

00:06:19,440 --> 00:06:22,639
dragging

00:06:20,720 --> 00:06:23,840
linux desktop environments into the

00:06:22,639 --> 00:06:25,280
modern age like

00:06:23,840 --> 00:06:27,199
compatible like comparable to your

00:06:25,280 --> 00:06:28,560
windows and your macs um

00:06:27,199 --> 00:06:30,240
it just feels a bit more complete i

00:06:28,560 --> 00:06:31,840
understand it it's a change in

00:06:30,240 --> 00:06:33,360
environment a change in feel for a lot

00:06:31,840 --> 00:06:35,039
of people but

00:06:33,360 --> 00:06:36,720
my knees are kind of simple and it kind

00:06:35,039 --> 00:06:38,639
of feels like

00:06:36,720 --> 00:06:40,319
emacs was the thought the sort of thumb

00:06:38,639 --> 00:06:43,120
sticking out that wasn't emac

00:06:40,319 --> 00:06:44,240
that wasn't on waylon um it was that

00:06:43,120 --> 00:06:45,759
little bit clunky

00:06:44,240 --> 00:06:47,600
running the old trick the old joke from

00:06:45,759 --> 00:06:51,039
xkcd of mx butterfly

00:06:47,600 --> 00:06:52,639
um would noticeably lag um

00:06:51,039 --> 00:06:54,400
it's gotten better xylene's got a lot

00:06:52,639 --> 00:06:55,919
better but it's still i'd like to get to

00:06:54,400 --> 00:06:58,800
a box where i don't have to compile the

00:06:55,919 --> 00:06:58,800
x libraries if i can

00:07:00,080 --> 00:07:04,319
all that considered it's worth looking

00:07:01,759 --> 00:07:05,680
at what is emacs as a thing

00:07:04,319 --> 00:07:07,199
and there's the ideal joke that we've

00:07:05,680 --> 00:07:08,479
all seen and it's posted in at least

00:07:07,199 --> 00:07:10,479
every single lwn

00:07:08,479 --> 00:07:11,599
uh comment board and hacker news at

00:07:10,479 --> 00:07:14,000
least three times

00:07:11,599 --> 00:07:15,840
it just needs a great editor right the

00:07:14,000 --> 00:07:17,360
truth is it's not really an editor it's

00:07:15,840 --> 00:07:18,080
a lisp environment that's been ported to

00:07:17,360 --> 00:07:20,560
unix

00:07:18,080 --> 00:07:22,160
just happens to have an editor i like

00:07:20,560 --> 00:07:24,560
built into it

00:07:22,160 --> 00:07:25,199
and yes we support at least four or five

00:07:24,560 --> 00:07:27,280
different bim

00:07:25,199 --> 00:07:30,000
bindings um there's new ones out all the

00:07:27,280 --> 00:07:32,479
time because we're pretty accommodating

00:07:30,000 --> 00:07:36,160
but the key thing is that it is lifts

00:07:32,479 --> 00:07:36,160
and it has some flow and effects there

00:07:36,880 --> 00:07:42,479
no lisp there's no emacs you know this

00:07:40,160 --> 00:07:43,919
is not about taking a problem and then

00:07:42,479 --> 00:07:44,800
trying to define it in constructs of the

00:07:43,919 --> 00:07:46,000
language

00:07:44,800 --> 00:07:48,080
it's about building a new language

00:07:46,000 --> 00:07:50,319
around the problem itself

00:07:48,080 --> 00:07:51,680
um you create things that you create

00:07:50,319 --> 00:07:52,319
data structure to create functions and

00:07:51,680 --> 00:07:53,840
it's all feel

00:07:52,319 --> 00:07:55,599
it feels like it's naturally part of the

00:07:53,840 --> 00:07:56,960
language rather than an attack on like

00:07:55,599 --> 00:07:58,639
some of the more procedural languages or

00:07:56,960 --> 00:08:00,879
class languages

00:07:58,639 --> 00:08:02,160
it creates a different expectation of

00:08:00,879 --> 00:08:06,080
development um

00:08:02,160 --> 00:08:08,000
you're expected at this point to go and

00:08:06,080 --> 00:08:10,240
be able to bend things and modify things

00:08:08,000 --> 00:08:11,520
and manipulate things as required

00:08:10,240 --> 00:08:13,120
which isn't always the case ends up

00:08:11,520 --> 00:08:16,240
creating some um some massive

00:08:13,120 --> 00:08:16,240
workarounds in other languages

00:08:17,120 --> 00:08:21,039
and so as i've said it okay this is sort

00:08:19,599 --> 00:08:22,319
of this environment where you know we're

00:08:21,039 --> 00:08:23,199
expected to be able to modify everything

00:08:22,319 --> 00:08:25,039
so pressing j

00:08:23,199 --> 00:08:26,960
on a keyboard literally calls a list

00:08:25,039 --> 00:08:28,080
function to insert j in the buffer on

00:08:26,960 --> 00:08:29,759
the screen

00:08:28,080 --> 00:08:31,360
and this allows a lot of those sort of

00:08:29,759 --> 00:08:33,039
modifications as key binding changes to

00:08:31,360 --> 00:08:34,640
come into form

00:08:33,039 --> 00:08:36,080
you know arrow up presses previous line

00:08:34,640 --> 00:08:37,279
all these things can be modified so

00:08:36,080 --> 00:08:38,560
you know if you really need to if you've

00:08:37,279 --> 00:08:40,000
broken a key on your keyboard and you

00:08:38,560 --> 00:08:41,599
have waiting on an order come through

00:08:40,000 --> 00:08:44,159
you could probably emulate it by hitting

00:08:41,599 --> 00:08:44,159
another key

00:08:44,640 --> 00:08:48,640
and i guess a few people looking to

00:08:46,959 --> 00:08:49,519
start with ems go oh what plugins do i

00:08:48,640 --> 00:08:51,279
need what plugins

00:08:49,519 --> 00:08:52,720
should i use for for this language or

00:08:51,279 --> 00:08:54,080
that much how to get it set up

00:08:52,720 --> 00:08:56,320
and that's the thing it's not really

00:08:54,080 --> 00:08:57,680
plugins you're genuinely creating

00:08:56,320 --> 00:09:00,560
an extension to the lisp environment

00:08:57,680 --> 00:09:03,600
you're actually running um

00:09:00,560 --> 00:09:05,760
you're running code that is sort of

00:09:03,600 --> 00:09:08,720
equivalent to the rest of the core and

00:09:05,760 --> 00:09:10,000
so this kind of fits through of you know

00:09:08,720 --> 00:09:11,200
you've got to build your remax

00:09:10,000 --> 00:09:13,440
environment to get your emacs

00:09:11,200 --> 00:09:15,760
environment

00:09:13,440 --> 00:09:17,120
so when i talk about that sort of that

00:09:15,760 --> 00:09:17,920
conflict language or extension language

00:09:17,120 --> 00:09:21,200
if you think about

00:09:17,920 --> 00:09:22,880
you know your api is in say

00:09:21,200 --> 00:09:24,399
your eclipses and that sort of thing

00:09:22,880 --> 00:09:24,720
there is a defined boundary there's sort

00:09:24,399 --> 00:09:27,839
of

00:09:24,720 --> 00:09:30,880
the editor and the config

00:09:27,839 --> 00:09:33,920
it's not the case in emacs so 60 is

00:09:30,880 --> 00:09:37,120
60 of the 3.2 million lines of code

00:09:33,920 --> 00:09:39,279
is lisp so that puts it at 1.8 1.6

00:09:37,120 --> 00:09:43,279
million quick math

00:09:39,279 --> 00:09:45,120
um and you know that second line of 16

00:09:43,279 --> 00:09:46,560
is just the change log so it maintains a

00:09:45,120 --> 00:09:47,519
text change log for every major feature

00:09:46,560 --> 00:09:49,040
that goes in

00:09:47,519 --> 00:09:50,880
and so that's every file change and

00:09:49,040 --> 00:09:53,920
that's that's 20 30

00:09:50,880 --> 00:09:55,680
35 years of history now you know the

00:09:53,920 --> 00:09:57,040
rest of it that 15 down the bottom

00:09:55,680 --> 00:09:58,480
that's porting to every other language

00:09:57,040 --> 00:10:01,680
that includes x tool kits

00:09:58,480 --> 00:10:03,680
um the old athena x toolkit it includes

00:10:01,680 --> 00:10:05,519
any sort of list special form so

00:10:03,680 --> 00:10:07,760
your base core features of the language

00:10:05,519 --> 00:10:13,120
sort of equivalent to ellipses

00:10:07,760 --> 00:10:13,120
and redisplay which that's the fun part

00:10:13,279 --> 00:10:16,800
redisplay code was c written by whispers

00:10:15,839 --> 00:10:18,880
for whispers

00:10:16,800 --> 00:10:20,480
with some compilers that predates a lot

00:10:18,880 --> 00:10:22,279
of the standards so

00:10:20,480 --> 00:10:23,519
i mean i've written a lot of c code in

00:10:22,279 --> 00:10:26,079
nzc89

00:10:23,519 --> 00:10:26,880
um maybe with a couple of 99 extensions

00:10:26,079 --> 00:10:29,279
emacs

00:10:26,880 --> 00:10:31,040
has sort of history that dates from the

00:10:29,279 --> 00:10:34,320
earlier parts of the 82c

00:10:31,040 --> 00:10:36,720
standards just weren't yet established

00:10:34,320 --> 00:10:37,760
um on top of that there's tons of macros

00:10:36,720 --> 00:10:39,920
just about every

00:10:37,760 --> 00:10:41,440
every call you need to make will involve

00:10:39,920 --> 00:10:43,040
writing two or three macro or

00:10:41,440 --> 00:10:45,680
using two or three macros to obstruct

00:10:43,040 --> 00:10:48,480
away 40 years of history

00:10:45,680 --> 00:10:50,160
um there are tons of just small changes

00:10:48,480 --> 00:10:51,200
that are just simply there to actually

00:10:50,160 --> 00:10:52,560
overcome

00:10:51,200 --> 00:10:54,480
embargo or incompatibility on one

00:10:52,560 --> 00:10:56,560
particular platform and so tracing

00:10:54,480 --> 00:10:58,320
execution of redisplay is notoriously

00:10:56,560 --> 00:10:59,120
difficult it's one of the most difficult

00:10:58,320 --> 00:11:02,800
parts of

00:10:59,120 --> 00:11:04,720
of the code base um you know originally

00:11:02,800 --> 00:11:07,680
it was written to minimize lag on

00:11:04,720 --> 00:11:08,880
networks in mit from you know the early

00:11:07,680 --> 00:11:11,200
age before ethernet

00:11:08,880 --> 00:11:15,040
started becoming usable and to this day

00:11:11,200 --> 00:11:17,360
it still has some of that code

00:11:15,040 --> 00:11:18,399
so the next section i'm basically just

00:11:17,360 --> 00:11:20,079
pilfering everything from

00:11:18,399 --> 00:11:21,519
from daniel here and he i would

00:11:20,079 --> 00:11:23,440
recommend going and checking out buttery

00:11:21,519 --> 00:11:26,399
smooth emacs it is a facebook

00:11:23,440 --> 00:11:27,920
page he's written up but it goes through

00:11:26,399 --> 00:11:28,720
far more detail and far more interesting

00:11:27,920 --> 00:11:31,200
points but

00:11:28,720 --> 00:11:32,399
the key thing is uh the next bit's gonna

00:11:31,200 --> 00:11:35,760
be a bit crazy

00:11:32,399 --> 00:11:37,360
so emacs was never really a graphical

00:11:35,760 --> 00:11:39,200
user interface it was always written as

00:11:37,360 --> 00:11:42,000
a terminal thing and there was this

00:11:39,200 --> 00:11:43,200
x project going on another part of mit

00:11:42,000 --> 00:11:45,680
early days

00:11:43,200 --> 00:11:47,519
and so i could say that emacs was an

00:11:45,680 --> 00:11:49,920
early adopter of x but i really mean x

00:11:47,519 --> 00:11:52,399
was kind of ported to emacs

00:11:49,920 --> 00:11:54,000
um it wants to own every part of its

00:11:52,399 --> 00:11:55,680
loop so it has its own event loop to be

00:11:54,000 --> 00:11:58,320
able to redisplay

00:11:55,680 --> 00:12:00,079
if the redisplay system gets asked to go

00:11:58,320 --> 00:12:00,800
and draw on the screen by x which is an

00:12:00,079 --> 00:12:04,079
exposed

00:12:00,800 --> 00:12:05,360
call and redisplay is not finished ems

00:12:04,079 --> 00:12:07,120
will tell the bugger off

00:12:05,360 --> 00:12:10,880
here's a great rectangle i'll fill it in

00:12:07,120 --> 00:12:12,480
when i'm damn good ready

00:12:10,880 --> 00:12:14,480
to this day emacs wants to be the master

00:12:12,480 --> 00:12:16,000
of its own domain like the modern xcode

00:12:14,480 --> 00:12:17,839
still has little features about

00:12:16,000 --> 00:12:20,000
or every little detail that's in there

00:12:17,839 --> 00:12:21,360
um tries to track everything

00:12:20,000 --> 00:12:24,000
and part of that redisplay interrupt

00:12:21,360 --> 00:12:26,000
where it just draws that gray rectangle

00:12:24,000 --> 00:12:27,680
um creates this flickering mess that

00:12:26,000 --> 00:12:28,320
sort of got solved about five ten years

00:12:27,680 --> 00:12:29,920
ago in

00:12:28,320 --> 00:12:32,880
at least five ten years ago on every

00:12:29,920 --> 00:12:32,880
other major toolkit

00:12:33,600 --> 00:12:38,480
at some point we decided to product jdk

00:12:36,320 --> 00:12:41,120
in hopes of improving things um

00:12:38,480 --> 00:12:42,800
the truth is we didn't really put to gtk

00:12:41,120 --> 00:12:43,279
we basically just took acts and just

00:12:42,800 --> 00:12:46,560
said

00:12:43,279 --> 00:12:48,079
near enough so effectively we create a

00:12:46,560 --> 00:12:51,200
gdk window and then we shut

00:12:48,079 --> 00:12:52,800
x calls entire in inside that window

00:12:51,200 --> 00:12:54,480
and then any event that comes in is an x

00:12:52,800 --> 00:12:58,399
event that gets forwarded off to

00:12:54,480 --> 00:13:01,680
the lisp engine and you know near enough

00:12:58,399 --> 00:13:02,959
we basically type cast away any any gcc

00:13:01,680 --> 00:13:06,079
warnings and then just call it and

00:13:02,959 --> 00:13:08,240
effectively ignore all of gtk

00:13:06,079 --> 00:13:10,000
at some point gtk 3 was released and we

00:13:08,240 --> 00:13:12,079
thought probably should port to that

00:13:10,000 --> 00:13:14,079
just if that fit out still using the

00:13:12,079 --> 00:13:17,440
same calls still using the same

00:13:14,079 --> 00:13:21,040
back ends still ignoring gtk and

00:13:17,440 --> 00:13:22,959
i mean i know gtk3 has more major inputs

00:13:21,040 --> 00:13:25,120
more major changes over time but

00:13:22,959 --> 00:13:26,480
realistically that's all emacs has done

00:13:25,120 --> 00:13:28,880
a couple of things to change names and

00:13:26,480 --> 00:13:28,880
that's it

00:13:30,000 --> 00:13:33,760
at some point someone wanted to print

00:13:31,519 --> 00:13:35,120
for emacs because printers

00:13:33,760 --> 00:13:37,440
were a bit more commonplace in

00:13:35,120 --> 00:13:38,320
households and so they wrote a cairo

00:13:37,440 --> 00:13:40,720
background um

00:13:38,320 --> 00:13:41,920
if anyone's used the mac yeah matsumoto

00:13:40,720 --> 00:13:44,079
emacs mac port

00:13:41,920 --> 00:13:45,040
um with batteries like scrolling all

00:13:44,079 --> 00:13:46,480
that sort of stuff so he actually did

00:13:45,040 --> 00:13:49,760
all the work for cairo

00:13:46,480 --> 00:13:51,600
um back in 2008 and it was periodically

00:13:49,760 --> 00:13:54,399
maintained by other other people um

00:13:51,600 --> 00:13:56,079
and it was kept alive for a number of

00:13:54,399 --> 00:13:58,320
years

00:13:56,079 --> 00:13:59,600
at some point another another person

00:13:58,320 --> 00:14:03,120
came out and

00:13:59,600 --> 00:14:06,160
decided well gdk supports weyland

00:14:03,120 --> 00:14:07,920
and we've got cairo sort of cairo is

00:14:06,160 --> 00:14:10,880
used for weightlifting could we not just

00:14:07,920 --> 00:14:13,279
use emacs on wayland not quite because

00:14:10,880 --> 00:14:15,199
it needs a bit more setup but

00:14:13,279 --> 00:14:17,360
eventually someone to come out and show

00:14:15,199 --> 00:14:18,160
hey i'm using these right this cairo

00:14:17,360 --> 00:14:20,560
patch shirt i've

00:14:18,160 --> 00:14:23,279
set up the back end um i've got a

00:14:20,560 --> 00:14:25,120
rudimentary version of emacs on waylon

00:14:23,279 --> 00:14:26,480
but it was just for a learning exercise

00:14:25,120 --> 00:14:27,760
to uh

00:14:26,480 --> 00:14:30,160
to sort of understand how redisplay

00:14:27,760 --> 00:14:33,680
worked and it was kind of short-lived

00:14:30,160 --> 00:14:36,000
um this is back in 2014 um the code just

00:14:33,680 --> 00:14:38,639
marched on

00:14:36,000 --> 00:14:39,680
eventually in 2015 as a result of that

00:14:38,639 --> 00:14:41,279
that sort of

00:14:39,680 --> 00:14:44,320
proof of concept that cairo could be

00:14:41,279 --> 00:14:46,480
used as a display redisplay engine

00:14:44,320 --> 00:14:49,680
the patch kit was either patches merged

00:14:46,480 --> 00:14:53,519
in 2015 february 2015.

00:14:49,680 --> 00:14:56,399
um this was only removed from expert

00:14:53,519 --> 00:14:59,920
like from experimental status for 27.1

00:14:56,399 --> 00:15:01,760
back in 2019 and in 28.1 it'll

00:14:59,920 --> 00:15:05,279
eventually become stable

00:15:01,760 --> 00:15:08,959
um so from 2008 to

00:15:05,279 --> 00:15:13,199
2020 12 years um to get

00:15:08,959 --> 00:15:15,360
a major feature of that so this is where

00:15:13,199 --> 00:15:17,360
lca so this is where you sort of came to

00:15:15,360 --> 00:15:18,800
it at lca 2019 and i tried picking up

00:15:17,360 --> 00:15:22,000
that 2014

00:15:18,800 --> 00:15:23,760
karo e max port um it had just

00:15:22,000 --> 00:15:25,040
it just deteriorated too much too many

00:15:23,760 --> 00:15:26,000
things have changed too many names have

00:15:25,040 --> 00:15:28,079
changed

00:15:26,000 --> 00:15:29,920
files have just disappeared there was no

00:15:28,079 --> 00:15:32,720
equivalence anymore so

00:15:29,920 --> 00:15:35,120
um it's still quiet kind of wasn't ready

00:15:32,720 --> 00:15:35,120
to go

00:15:35,680 --> 00:15:38,959
um and i guess the other thing to look

00:15:37,839 --> 00:15:41,279
at is that you know

00:15:38,959 --> 00:15:43,040
that x terminal code trying to even just

00:15:41,279 --> 00:15:43,680
pull stuff out of that that's at 20 000

00:15:43,040 --> 00:15:47,600
lions

00:15:43,680 --> 00:15:47,600
um it's huge

00:15:48,639 --> 00:15:52,240
sometimes soon after lco so this is

00:15:50,639 --> 00:15:55,279
about april about two months later

00:15:52,240 --> 00:15:56,720
um one of the previous emacs maintainers

00:15:55,279 --> 00:15:58,480
had pointed out in a long discussion

00:15:56,720 --> 00:16:01,199
about how we can move cairo to use

00:15:58,480 --> 00:16:02,480
ligatures and um and emojis and all

00:16:01,199 --> 00:16:04,320
those sort of great features that most

00:16:02,480 --> 00:16:07,440
modern editors are now adopting

00:16:04,320 --> 00:16:10,240
um i said hey there's this

00:16:07,440 --> 00:16:11,680
3 pure gtk3 port maybe maybe it'll work

00:16:10,240 --> 00:16:14,160
let's let's see what happens does anyone

00:16:11,680 --> 00:16:14,160
know about it

00:16:14,480 --> 00:16:19,120
and the key point of the the gtk port

00:16:17,120 --> 00:16:22,240
was that

00:16:19,120 --> 00:16:24,639
we could migrate all of the x focus code

00:16:22,240 --> 00:16:26,079
across the gtk equivalents we could cut

00:16:24,639 --> 00:16:27,920
out what doesn't make sense

00:16:26,079 --> 00:16:29,759
we could leverage that gyro port that

00:16:27,920 --> 00:16:32,720
was now quickly becoming

00:16:29,759 --> 00:16:34,639
less experimental and then any of the

00:16:32,720 --> 00:16:35,120
drawing changes any major maintenance

00:16:34,639 --> 00:16:37,040
burden

00:16:35,120 --> 00:16:39,600
would stay upstream even as we maintain

00:16:37,040 --> 00:16:42,800
as a port set and ideally we'll try and

00:16:39,600 --> 00:16:45,920
treat gtk as gtk and not just

00:16:42,800 --> 00:16:45,920
bastardize it with x

00:16:46,480 --> 00:16:50,320
so first off create a new terminal

00:16:49,279 --> 00:16:53,440
option

00:16:50,320 --> 00:16:55,839
add like set up the initialize

00:16:53,440 --> 00:16:56,880
register all these list functions and

00:16:55,839 --> 00:16:59,360
we're trying

00:16:56,880 --> 00:17:01,360
if def and type pun out common code so

00:16:59,360 --> 00:17:02,160
there are cases in the gtk common code

00:17:01,360 --> 00:17:03,600
that sort of go

00:17:02,160 --> 00:17:06,000
we're expecting an next display and

00:17:03,600 --> 00:17:08,079
we're going to go well no it's a gdk

00:17:06,000 --> 00:17:10,959
display and we can figure out what the

00:17:08,079 --> 00:17:10,959
differences are later

00:17:13,839 --> 00:17:18,799
um a bit of a bit of a tour through some

00:17:17,520 --> 00:17:22,000
of the files so

00:17:18,799 --> 00:17:22,720
the the gdk term um header and source

00:17:22,000 --> 00:17:24,720
file

00:17:22,720 --> 00:17:26,799
effectively are the quality call toolkit

00:17:24,720 --> 00:17:30,240
code they basically are the layer

00:17:26,799 --> 00:17:32,160
across the gtk um it handles getting

00:17:30,240 --> 00:17:33,840
like the initialization code it gets a

00:17:32,160 --> 00:17:36,320
window up on the screen

00:17:33,840 --> 00:17:37,200
um it actually handles gck events for a

00:17:36,320 --> 00:17:39,919
change um

00:17:37,200 --> 00:17:40,799
and then dispatches them as required and

00:17:39,919 --> 00:17:42,480
helps without the

00:17:40,799 --> 00:17:44,720
extraction macros this is common across

00:17:42,480 --> 00:17:48,000
all of the terminal headers

00:17:44,720 --> 00:17:50,240
and then keeps a massive state structure

00:17:48,000 --> 00:17:53,120
um which again is common across all

00:17:50,240 --> 00:17:53,120
versions of emacs

00:17:54,480 --> 00:17:58,240
pgk functions uh and also the wind so

00:17:57,600 --> 00:18:01,760
this is your

00:17:58,240 --> 00:18:04,799
bright um your bridge across to the lisp

00:18:01,760 --> 00:18:06,240
um defines everything it handles

00:18:04,799 --> 00:18:08,080
interactions so basically this is full

00:18:06,240 --> 00:18:09,840
of macros um

00:18:08,080 --> 00:18:12,720
there's a lot of lisp looking headers

00:18:09,840 --> 00:18:15,440
for function it declares a

00:18:12,720 --> 00:18:17,280
c function to call it defines a list

00:18:15,440 --> 00:18:18,559
function to call and interacts and

00:18:17,280 --> 00:18:20,960
it just collects it all up the bottom

00:18:18,559 --> 00:18:20,960
somewhere

00:18:21,360 --> 00:18:24,880
and i guess this is this is the key

00:18:23,039 --> 00:18:27,760
point this is emacs

00:18:24,880 --> 00:18:29,120
widget um the the illustrious history of

00:18:27,760 --> 00:18:30,559
an emacs editor is now

00:18:29,120 --> 00:18:32,320
kind of compressed down to a small

00:18:30,559 --> 00:18:34,640
widget um that

00:18:32,320 --> 00:18:35,520
effectively could be used in any gtk 3

00:18:34,640 --> 00:18:38,720
program

00:18:35,520 --> 00:18:41,280
um mostly it's used as an end point

00:18:38,720 --> 00:18:43,200
for events so events will be fired at a

00:18:41,280 --> 00:18:45,360
particular widget in gdk3

00:18:43,200 --> 00:18:46,799
and so this is our way to pull them out

00:18:45,360 --> 00:18:48,160
and act on them

00:18:46,799 --> 00:18:49,919
and it allows us to actually contain

00:18:48,160 --> 00:18:51,840
other gtk widgets so

00:18:49,919 --> 00:18:53,360
a couple of surprising things is that

00:18:51,840 --> 00:18:54,240
porting across some of the scroll bars

00:18:53,360 --> 00:18:58,880
or even the

00:18:54,240 --> 00:19:01,919
the web gt the webkit uh jdk

00:18:58,880 --> 00:19:04,240
widget just sort of got absorbed into

00:19:01,919 --> 00:19:06,799
the the uh the fixed widget and it

00:19:04,240 --> 00:19:06,799
seemed to work

00:19:09,120 --> 00:19:13,280
gtk util is where all the most the

00:19:11,200 --> 00:19:16,400
drawing happens um

00:19:13,280 --> 00:19:19,120
it is shared across pure and

00:19:16,400 --> 00:19:20,480
impure gtk emacs so that's it's kind of

00:19:19,120 --> 00:19:22,480
useful because then that that's the key

00:19:20,480 --> 00:19:22,880
part that um we are able to just pilfer

00:19:22,480 --> 00:19:24,960
and

00:19:22,880 --> 00:19:27,039
steal and use um without too much

00:19:24,960 --> 00:19:28,640
trouble um it handles a lot of scroll

00:19:27,039 --> 00:19:29,679
bars that handles a lot of like the gtk

00:19:28,640 --> 00:19:31,840
specific stuff so

00:19:29,679 --> 00:19:32,880
hey i want i want menu bars in my window

00:19:31,840 --> 00:19:34,880
i want this

00:19:32,880 --> 00:19:36,080
toolbar i want the widget and i want all

00:19:34,880 --> 00:19:39,440
this other stuff included

00:19:36,080 --> 00:19:40,480
and that's all handled in this file

00:19:39,440 --> 00:19:41,919
and we've got a couple other things so

00:19:40,480 --> 00:19:43,440
this is basically just handling

00:19:41,919 --> 00:19:45,039
rectangles um

00:19:43,440 --> 00:19:47,039
probably the smallest file and all that

00:19:45,039 --> 00:19:48,400
um effectively there's a couple little

00:19:47,039 --> 00:19:49,520
things in there just the fake values

00:19:48,400 --> 00:19:52,720
that are expected by

00:19:49,520 --> 00:19:54,880
core parts of ebax um it wants to be

00:19:52,720 --> 00:19:56,400
able to set gravity on on windows where

00:19:54,880 --> 00:19:58,000
it appears on the screen top right top

00:19:56,400 --> 00:19:59,919
left center or anything like that

00:19:58,000 --> 00:20:01,679
um we've kind of just got to fill in the

00:19:59,919 --> 00:20:04,000
blanks and make it work and adapt them

00:20:01,679 --> 00:20:05,919
to the the gtk expected values but

00:20:04,000 --> 00:20:08,720
without sort of like basically by

00:20:05,919 --> 00:20:08,720
adapting the names

00:20:09,520 --> 00:20:14,400
and and there's a couple other smaller

00:20:11,120 --> 00:20:17,200
files so um

00:20:14,400 --> 00:20:18,159
gtk input management method so like any

00:20:17,200 --> 00:20:19,600
effectively key

00:20:18,159 --> 00:20:22,000
key developer on this was uh was

00:20:19,600 --> 00:20:23,440
japanese so getting um

00:20:22,000 --> 00:20:25,440
japanese characters on screen was very

00:20:23,440 --> 00:20:26,720
very important um to fit in with the

00:20:25,440 --> 00:20:28,640
rest of the workflow so we start to

00:20:26,720 --> 00:20:29,360
behave a bit more like a gtk app rather

00:20:28,640 --> 00:20:30,640
than just

00:20:29,360 --> 00:20:34,640
an app that does what it wants when it

00:20:30,640 --> 00:20:38,080
wants um

00:20:34,640 --> 00:20:40,080
select um that's that's drag and drop so

00:20:38,080 --> 00:20:42,400
in previous iterations select would be

00:20:40,080 --> 00:20:46,000
used for hooking into

00:20:42,400 --> 00:20:49,120
a a call a system call or a

00:20:46,000 --> 00:20:50,480
an event interrupt um to actually

00:20:49,120 --> 00:20:53,200
redisplay

00:20:50,480 --> 00:20:53,760
like what text needs to be on the screen

00:20:53,200 --> 00:20:56,080
so

00:20:53,760 --> 00:20:57,280
um that's that's kind of why i've pulled

00:20:56,080 --> 00:20:59,120
that one out a little bit

00:20:57,280 --> 00:21:00,880
um and then yeah menus for menu bars

00:20:59,120 --> 00:21:02,159
because again it's separate we're not

00:21:00,880 --> 00:21:04,720
just sort of drawing this manually with

00:21:02,159 --> 00:21:04,720
x widgets

00:21:05,440 --> 00:21:12,400
so a few core challenges on emacs

00:21:09,120 --> 00:21:13,840
it's it's huge um

00:21:12,400 --> 00:21:16,159
there's sort of competing priorities

00:21:13,840 --> 00:21:17,679
here x emacs

00:21:16,159 --> 00:21:19,679
wants to know everything it had to know

00:21:17,679 --> 00:21:22,400
everything back in the day it predates

00:21:19,679 --> 00:21:23,039
basically all your major toolkits um

00:21:22,400 --> 00:21:24,880
it's had to

00:21:23,039 --> 00:21:26,400
carry its own toolkit along just to

00:21:24,880 --> 00:21:29,440
avoid a few bugs

00:21:26,400 --> 00:21:30,559
it sort of as i said it it's 20 000

00:21:29,440 --> 00:21:33,280
lines of code

00:21:30,559 --> 00:21:33,679
with tons of vfdf with with you know

00:21:33,280 --> 00:21:36,480
just

00:21:33,679 --> 00:21:37,840
parse and and and treat like uh all

00:21:36,480 --> 00:21:40,960
versions all sort of uh

00:21:37,840 --> 00:21:42,880
like if def's uh if else this whatever

00:21:40,960 --> 00:21:44,000
there's so many branches in there it's

00:21:42,880 --> 00:21:46,720
just very very hard

00:21:44,000 --> 00:21:47,840
to work with jdk and more specifically

00:21:46,720 --> 00:21:49,600
gdk

00:21:47,840 --> 00:21:51,200
um try to extract that they just want

00:21:49,600 --> 00:21:51,919
you to be able to go i want a widget put

00:21:51,200 --> 00:21:53,520
on a screen

00:21:51,919 --> 00:21:55,280
put what you want in there off we go

00:21:53,520 --> 00:21:56,480
i'll handle the events we'll just pass

00:21:55,280 --> 00:21:57,679
them through to where you need to go

00:21:56,480 --> 00:21:59,200
and i'll translate them and filter them

00:21:57,679 --> 00:22:00,799
as we need to and make them a bit more

00:21:59,200 --> 00:22:04,000
specific

00:22:00,799 --> 00:22:06,640
um it's the the

00:22:04,000 --> 00:22:07,360
the x code has evolved over time to a

00:22:06,640 --> 00:22:09,039
point where

00:22:07,360 --> 00:22:10,720
there's little little inserts here and

00:22:09,039 --> 00:22:11,520
there some of those if-thefts that were

00:22:10,720 --> 00:22:13,360
just a simple

00:22:11,520 --> 00:22:15,120
hey if we're running on gtk call this

00:22:13,360 --> 00:22:15,520
one function and if we're running on our

00:22:15,120 --> 00:22:18,320
own

00:22:15,520 --> 00:22:19,679
athena widget um here's a small line of

00:22:18,320 --> 00:22:20,960
code that we need to do

00:22:19,679 --> 00:22:22,799
some of those have grown out to be well

00:22:20,960 --> 00:22:23,440
over a thousand lines each so even just

00:22:22,799 --> 00:22:25,600
copying

00:22:23,440 --> 00:22:28,400
pasting and pulling those out just don't

00:22:25,600 --> 00:22:30,960
necessarily make sense anymore

00:22:28,400 --> 00:22:32,559
um you know a lot of the old sort of

00:22:30,960 --> 00:22:34,000
we're going to reset this here like have

00:22:32,559 --> 00:22:34,559
a quick comment of like oh bug x

00:22:34,000 --> 00:22:36,320
whatever

00:22:34,559 --> 00:22:37,520
uh let's we're going to reset the screen

00:22:36,320 --> 00:22:38,080
because it causes an issue on someone's

00:22:37,520 --> 00:22:39,760
box

00:22:38,080 --> 00:22:41,440
just don't seem to make sense anymore or

00:22:39,760 --> 00:22:44,799
just have had context

00:22:41,440 --> 00:22:46,640
lost over time um and so

00:22:44,799 --> 00:22:48,000
trying to follow why a change was made

00:22:46,640 --> 00:22:48,559
and if we need to keep it anymore

00:22:48,000 --> 00:22:51,440
because

00:22:48,559 --> 00:22:52,559
potentially compatibility has got better

00:22:51,440 --> 00:22:56,480
over time

00:22:52,559 --> 00:22:58,320
um it's just very hard to follow um

00:22:56,480 --> 00:22:59,679
and then the big thing is you're going

00:22:58,320 --> 00:23:01,760
to try and filter out

00:22:59,679 --> 00:23:03,760
what fixes what's important and what you

00:23:01,760 --> 00:23:04,559
know and keep sort of the intentional

00:23:03,760 --> 00:23:07,600
code that's meant to be

00:23:04,559 --> 00:23:09,679
the core bits that need to run

00:23:07,600 --> 00:23:12,799
so i think i've alluded to this a little

00:23:09,679 --> 00:23:15,120
bit gtk events are not x events

00:23:12,799 --> 00:23:16,400
ems expects raw x events to the point

00:23:15,120 --> 00:23:18,480
where it just goes

00:23:16,400 --> 00:23:20,080
oh yeah typecast is through an emax

00:23:18,480 --> 00:23:21,840
structure that's internal

00:23:20,080 --> 00:23:23,520
and this has been adapted on the mac

00:23:21,840 --> 00:23:24,400
port has been adapted on the the windows

00:23:23,520 --> 00:23:27,520
port

00:23:24,400 --> 00:23:29,200
and it mostly mostly works um but then

00:23:27,520 --> 00:23:32,000
we get to a point where

00:23:29,200 --> 00:23:32,720
parts of gtk need the raw event that it

00:23:32,000 --> 00:23:34,400
was given

00:23:32,720 --> 00:23:35,679
to operate on quickly so we can filter

00:23:34,400 --> 00:23:37,760
out more information than what it's

00:23:35,679 --> 00:23:40,000
going to provide in an interface

00:23:37,760 --> 00:23:41,520
and emacs doesn't like that it wants

00:23:40,000 --> 00:23:43,520
everything to go through the list like

00:23:41,520 --> 00:23:46,880
it wants you to be able to

00:23:43,520 --> 00:23:49,200
take that event hook in on at the list

00:23:46,880 --> 00:23:50,799
layer and act on that event yourself

00:23:49,200 --> 00:23:52,000
maybe you don't want that going through

00:23:50,799 --> 00:23:53,440
to the rest of the terminal maybe you

00:23:52,000 --> 00:23:55,279
want to do something else with it

00:23:53,440 --> 00:23:56,960
maybe you want to say okay cool when we

00:23:55,279 --> 00:23:58,240
resize the window i want it to flash

00:23:56,960 --> 00:23:59,840
bright purple

00:23:58,240 --> 00:24:01,919
it's something that you know you could

00:23:59,840 --> 00:24:04,000
do in this and we're kind of kind of

00:24:01,919 --> 00:24:06,480
into a point where

00:24:04,000 --> 00:24:07,279
it may not be something we can support

00:24:06,480 --> 00:24:10,559
anymore

00:24:07,279 --> 00:24:11,679
um generally to keep both sides happy

00:24:10,559 --> 00:24:13,039
we've just lied

00:24:11,679 --> 00:24:14,960
or you know we've picked up a couple of

00:24:13,039 --> 00:24:17,039
deprecated sort of functions that we'll

00:24:14,960 --> 00:24:18,559
eventually have to work around but

00:24:17,039 --> 00:24:20,320
lying to keep both sides happy has just

00:24:18,559 --> 00:24:22,559
been the easier way of proceeding at the

00:24:20,320 --> 00:24:22,559
moment

00:24:23,840 --> 00:24:29,600
in a gtk only world

00:24:26,880 --> 00:24:30,960
um there's still a few discrepancies so

00:24:29,600 --> 00:24:32,320
x versus weyland

00:24:30,960 --> 00:24:34,000
one of the key features of wheyland is

00:24:32,320 --> 00:24:34,400
that windows are independent they can't

00:24:34,000 --> 00:24:35,679
see

00:24:34,400 --> 00:24:37,679
anything around it they don't know the

00:24:35,679 --> 00:24:40,320
rest of the context

00:24:37,679 --> 00:24:41,600
and the coordinates start from zero x

00:24:40,320 --> 00:24:44,640
supports global coordinates

00:24:41,600 --> 00:24:46,240
uh so that causes a few issues where uh

00:24:44,640 --> 00:24:47,440
if we're trying to calculate hey i want

00:24:46,240 --> 00:24:48,240
to put the pop-up on the screen which is

00:24:47,440 --> 00:24:51,520
a feature

00:24:48,240 --> 00:24:52,960
in 26. um in x

00:24:51,520 --> 00:24:54,559
it needs to calculate the original x it

00:24:52,960 --> 00:24:56,000
needs to calculate okay imax is in this

00:24:54,559 --> 00:24:57,279
location on the screen the corner of the

00:24:56,000 --> 00:24:59,039
window is here and then we can offset

00:24:57,279 --> 00:25:02,640
down to this point

00:24:59,039 --> 00:25:04,080
in pg pure gtk we sort of go okay

00:25:02,640 --> 00:25:04,799
where's the corner of the window we need

00:25:04,080 --> 00:25:07,520
to offset

00:25:04,799 --> 00:25:08,400
this far inside the window and we get

00:25:07,520 --> 00:25:11,760
different values

00:25:08,400 --> 00:25:14,880
on wayland that'll take from the top

00:25:11,760 --> 00:25:17,760
corner of the um of the drawn

00:25:14,880 --> 00:25:19,200
window and then on x it'll take the

00:25:17,760 --> 00:25:22,320
entire decorated window

00:25:19,200 --> 00:25:25,760
and so swapping between the two we get

00:25:22,320 --> 00:25:27,679
a variation where x will be off by 25

00:25:25,760 --> 00:25:29,840
pixels and then whalen will be sitting

00:25:27,679 --> 00:25:31,360
lower and then at some point

00:25:29,840 --> 00:25:32,559
window sizes will change and it'll

00:25:31,360 --> 00:25:34,159
expect things to be a bit different and

00:25:32,559 --> 00:25:34,880
so your pop-ups end up just bouncing all

00:25:34,159 --> 00:25:36,720
over the place

00:25:34,880 --> 00:25:38,559
and this had not been about three weeks

00:25:36,720 --> 00:25:40,240
of my life at one point just any spare

00:25:38,559 --> 00:25:43,039
minute ahead of code was just trying to

00:25:40,240 --> 00:25:46,000
figure out how to how to actually um get

00:25:43,039 --> 00:25:47,919
that position calculation right

00:25:46,000 --> 00:25:50,080
eventually we just lied to emacs again

00:25:47,919 --> 00:25:52,000
and just said this is a window

00:25:50,080 --> 00:25:53,919
but realistically it's just a widget so

00:25:52,000 --> 00:25:55,360
the widget stays within its bounds it

00:25:53,919 --> 00:25:58,799
stays on the max window

00:25:55,360 --> 00:26:01,679
it's relevant to the parent window

00:25:58,799 --> 00:26:02,960
um the top corner of the drawn text

00:26:01,679 --> 00:26:05,279
editor area

00:26:02,960 --> 00:26:06,320
and it stays still it doesn't move it

00:26:05,279 --> 00:26:07,440
doesn't bounce around

00:26:06,320 --> 00:26:09,679
it's the right size it's the right

00:26:07,440 --> 00:26:12,559
position on all platforms now so that's

00:26:09,679 --> 00:26:12,559
finally been solved

00:26:13,200 --> 00:26:17,600
and then integration i mean we already

00:26:16,400 --> 00:26:19,760
talked about x being

00:26:17,600 --> 00:26:20,799
huge on its own this change set was

00:26:19,760 --> 00:26:24,000
equally big

00:26:20,799 --> 00:26:26,640
um the original commits to hey

00:26:24,000 --> 00:26:27,679
i want to start a p that pure gtk 3 port

00:26:26,640 --> 00:26:31,360
was

00:26:27,679 --> 00:26:34,720
late 2017 early 2018 i think i jumped on

00:26:31,360 --> 00:26:37,039
about a year later in 2019 um

00:26:34,720 --> 00:26:38,000
and then eventually i decided to thought

00:26:37,039 --> 00:26:40,480
we should probably rebase

00:26:38,000 --> 00:26:41,440
clean up fix up the commit formats to

00:26:40,480 --> 00:26:44,400
meet expected

00:26:41,440 --> 00:26:45,360
um expected norms of the imax repository

00:26:44,400 --> 00:26:48,240
and

00:26:45,360 --> 00:26:49,520
that took a number of passes a lot of

00:26:48,240 --> 00:26:52,400
git rebase history

00:26:49,520 --> 00:26:53,120
a lot of manipulation um that was

00:26:52,400 --> 00:26:56,000
another month

00:26:53,120 --> 00:26:58,320
uh so in the end i got well over 300

00:26:56,000 --> 00:27:01,120
commits down to about a hundred

00:26:58,320 --> 00:27:02,559
ended up being about 58 58 change files

00:27:01,120 --> 00:27:04,960
in total so a lot of the other

00:27:02,559 --> 00:27:06,559
a lot of the other files were like okay

00:27:04,960 --> 00:27:09,840
we've got a fourth option now

00:27:06,559 --> 00:27:13,120
of a graphical terminal it's not just x

00:27:09,840 --> 00:27:14,960
macos win32 and now we've got

00:27:13,120 --> 00:27:16,559
pg decay a couple of things we've got to

00:27:14,960 --> 00:27:17,600
call extra symbols a couple extra things

00:27:16,559 --> 00:27:20,720
like that but

00:27:17,600 --> 00:27:24,080
yeah there was 16 000 lines changed and

00:27:20,720 --> 00:27:25,120
um yeah quite quite a huge quite a huge

00:27:24,080 --> 00:27:29,120
effort

00:27:25,120 --> 00:27:32,480
um so it doesn't just work

00:27:29,120 --> 00:27:34,159
um yes

00:27:32,480 --> 00:27:36,080
uh it's been developed on two different

00:27:34,159 --> 00:27:37,919
platforms so i've generally favored

00:27:36,080 --> 00:27:39,679
using fedora at home just because i

00:27:37,919 --> 00:27:42,080
i can't be asked setting up stuff

00:27:39,679 --> 00:27:44,000
anymore um

00:27:42,080 --> 00:27:45,120
yuki harani who i had worked with he was

00:27:44,000 --> 00:27:46,960
on w

00:27:45,120 --> 00:27:48,880
roots he's been using uh wayfire which

00:27:46,960 --> 00:27:51,039
is a compiz version of

00:27:48,880 --> 00:27:53,279
on weyland now um i've played around

00:27:51,039 --> 00:27:57,120
with it on freebsd on weyland um

00:27:53,279 --> 00:27:59,679
seems to work it's been my daily driver

00:27:57,120 --> 00:28:01,039
for close to 12 months um there's been a

00:27:59,679 --> 00:28:02,240
couple of annoyances most of them have

00:28:01,039 --> 00:28:05,840
now been fixed

00:28:02,240 --> 00:28:08,080
um so like in general i just i don't

00:28:05,840 --> 00:28:09,600
notice much of a difference um if i'm

00:28:08,080 --> 00:28:11,919
jumping between the two but i do

00:28:09,600 --> 00:28:13,600
tend to prefer the the weyland version

00:28:11,919 --> 00:28:16,640
just again it's a little bit smoother

00:28:13,600 --> 00:28:18,960
it's a little bit clearer um

00:28:16,640 --> 00:28:20,159
it should also work on x versions and

00:28:18,960 --> 00:28:21,520
that's where some of the bugs have come

00:28:20,159 --> 00:28:23,520
from because we've generally built

00:28:21,520 --> 00:28:23,840
tested and run on weyland only systems

00:28:23,520 --> 00:28:25,200
that

00:28:23,840 --> 00:28:27,520
people have gone i want to run this on

00:28:25,200 --> 00:28:29,440
the next system now um

00:28:27,520 --> 00:28:30,960
i wanted to test it on dragonfly bsd

00:28:29,440 --> 00:28:32,720
just kind of wanting to play with it at

00:28:30,960 --> 00:28:33,760
the moment and for those who have known

00:28:32,720 --> 00:28:34,880
me for a number of years i've really

00:28:33,760 --> 00:28:37,840
wanted to test it on

00:28:34,880 --> 00:28:39,039
uh open indiana uh the open solara

00:28:37,840 --> 00:28:41,679
successor but i just

00:28:39,039 --> 00:28:43,440
just ran out of time um again there's no

00:28:41,679 --> 00:28:45,919
reason why this shouldn't work

00:28:43,440 --> 00:28:47,520
having a thoroughly modern e-max on on a

00:28:45,919 --> 00:28:50,799
thoroughly old-school

00:28:47,520 --> 00:28:50,799
unix could be quite interesting

00:28:51,120 --> 00:28:55,039
um and i guess at this point now we're

00:28:53,919 --> 00:28:57,919
expecting to be

00:28:55,039 --> 00:28:59,679
almost bug compatible with x max apart

00:28:57,919 --> 00:29:01,039
from a couple of things

00:28:59,679 --> 00:29:02,399
there have been a few things where i

00:29:01,039 --> 00:29:03,360
think we're rendering fonts slightly

00:29:02,399 --> 00:29:05,520
differently

00:29:03,360 --> 00:29:06,640
which is kind of interesting because we

00:29:05,520 --> 00:29:08,240
should be identical we're using the

00:29:06,640 --> 00:29:10,799
exact same font code just in two

00:29:08,240 --> 00:29:12,240
different contexts

00:29:10,799 --> 00:29:13,440
i have not verified this and i haven't

00:29:12,240 --> 00:29:14,240
actually measured it but a few people

00:29:13,440 --> 00:29:15,760
have claimed

00:29:14,240 --> 00:29:17,360
that it seems to render faster it seems

00:29:15,760 --> 00:29:19,520
to scroll faster

00:29:17,360 --> 00:29:21,039
but on the consequence we do use a

00:29:19,520 --> 00:29:22,000
little bit more ram compared to a base

00:29:21,039 --> 00:29:24,000
emacs install

00:29:22,000 --> 00:29:27,840
um this might be tied to the fact that

00:29:24,000 --> 00:29:27,840
we're now including all of gtk

00:29:31,520 --> 00:29:34,960
there are some things i'm just not going

00:29:32,960 --> 00:29:36,720
to support um

00:29:34,960 --> 00:29:38,159
this sort of level i had to pull in you

00:29:36,720 --> 00:29:40,720
know an xkcd but

00:29:38,159 --> 00:29:42,000
this is just going to be something i'm

00:29:40,720 --> 00:29:45,760
just not going to be able to fix

00:29:42,000 --> 00:29:47,279
um there are no x settings on weyland so

00:29:45,760 --> 00:29:48,880
we've we've jumped across using g

00:29:47,279 --> 00:29:50,240
settings instead we've got a schema uh

00:29:48,880 --> 00:29:52,880
it's in the repo you can have a look

00:29:50,240 --> 00:29:53,760
so some things you can modify from a doc

00:29:52,880 --> 00:29:56,960
file

00:29:53,760 --> 00:29:57,520
outside of that and the other major

00:29:56,960 --> 00:29:59,520
pointer

00:29:57,520 --> 00:30:01,200
is going to be that wayland doesn't

00:29:59,520 --> 00:30:03,279
support global positioning

00:30:01,200 --> 00:30:05,039
it leaves positioning of windows up to

00:30:03,279 --> 00:30:05,919
the display manager that it's used the

00:30:05,039 --> 00:30:07,600
compositor

00:30:05,919 --> 00:30:09,120
so you can't just go every time i start

00:30:07,600 --> 00:30:10,080
emacs i want it to be in the bottom

00:30:09,120 --> 00:30:11,919
right hand corner

00:30:10,080 --> 00:30:14,159
it's just something we can't do gdk

00:30:11,919 --> 00:30:16,159
doesn't provide it um

00:30:14,159 --> 00:30:17,440
it's just not gonna happen unfortunately

00:30:16,159 --> 00:30:18,720
um there are a few other little bits

00:30:17,440 --> 00:30:21,600
some of it just doesn't make sense

00:30:18,720 --> 00:30:22,240
um the way we used to hook into x to get

00:30:21,600 --> 00:30:24,799
events

00:30:22,240 --> 00:30:26,080
um again there's there were a few list

00:30:24,799 --> 00:30:26,880
functions around that i'm just not going

00:30:26,080 --> 00:30:29,840
to support it

00:30:26,880 --> 00:30:29,840
there's just no point

00:30:30,159 --> 00:30:36,159
where does udk emax go next

00:30:34,000 --> 00:30:37,600
we try and match onto master uh well i

00:30:36,159 --> 00:30:38,960
think it got renamed to main in the last

00:30:37,600 --> 00:30:40,720
couple of weeks actually so

00:30:38,960 --> 00:30:42,000
if that's um if you're looking for it

00:30:40,720 --> 00:30:43,760
that it might have changed

00:30:42,000 --> 00:30:45,600
um we're currently a feature brand so if

00:30:43,760 --> 00:30:50,159
you look for a feature slash pgdk

00:30:45,600 --> 00:30:52,159
we're on savannah the gnu savannah um so

00:30:50,159 --> 00:30:53,600
we've sort of been nominally accepted by

00:30:52,159 --> 00:30:55,360
upstream there's a little bit more

00:30:53,600 --> 00:30:57,120
to go there's a lot more testing that

00:30:55,360 --> 00:30:58,880
needs to happen that needs to be

00:30:57,120 --> 00:31:02,240
verified on a lot more boxes

00:30:58,880 --> 00:31:04,320
um if someone is better at gtk than i am

00:31:02,240 --> 00:31:05,679
and maybe even i can't really talk for

00:31:04,320 --> 00:31:07,039
him um

00:31:05,679 --> 00:31:08,080
definitely going to be appreciated i

00:31:07,039 --> 00:31:09,519
it's probably the first time i've

00:31:08,080 --> 00:31:10,720
actually worked with gtk in my life and

00:31:09,519 --> 00:31:12,080
it was

00:31:10,720 --> 00:31:14,080
there are a few times where the doco

00:31:12,080 --> 00:31:16,640
just didn't necessarily sit well

00:31:14,080 --> 00:31:18,159
um it didn't seem to make sense or it

00:31:16,640 --> 00:31:20,240
didn't actually do what it said and it

00:31:18,159 --> 00:31:22,720
may have been may have been a fact that

00:31:20,240 --> 00:31:24,480
in gtk3 it was designed for x initially

00:31:22,720 --> 00:31:27,679
and so this is supported on x but it

00:31:24,480 --> 00:31:27,679
just doesn't make sense anywhere else

00:31:29,360 --> 00:31:32,880
i mean we could look at gdk4 as a next

00:31:31,760 --> 00:31:34,559
option again that's sort of

00:31:32,880 --> 00:31:36,799
a massive reset it's a bigger change

00:31:34,559 --> 00:31:38,320
from two to three um

00:31:36,799 --> 00:31:39,919
it was finally released in december i

00:31:38,320 --> 00:31:42,159
had actually played with porting it

00:31:39,919 --> 00:31:43,600
further so instead of being two options

00:31:42,159 --> 00:31:46,720
instead of having two options for

00:31:43,600 --> 00:31:48,399
a gtk 3 display renderer we could

00:31:46,720 --> 00:31:50,080
potentially just jump over and just go

00:31:48,399 --> 00:31:51,919
from gtk4 we're not going to swap x

00:31:50,080 --> 00:31:52,960
anymore explicitly support x we're just

00:31:51,919 --> 00:31:56,480
going to jump straight to

00:31:52,960 --> 00:31:57,679
four and it'll be all in four um

00:31:56,480 --> 00:31:59,039
the more i look at it like i mean when i

00:31:57,679 --> 00:32:00,799
was playing with it a lot of stuff

00:31:59,039 --> 00:32:01,360
wasn't settled drag and drop was not

00:32:00,799 --> 00:32:02,720
even

00:32:01,360 --> 00:32:05,279
written just yet it was still being

00:32:02,720 --> 00:32:08,080
reviewed um

00:32:05,279 --> 00:32:09,200
and it could create a lot it could

00:32:08,080 --> 00:32:10,640
create a bit more drama there's a lot

00:32:09,200 --> 00:32:12,960
more changes there

00:32:10,640 --> 00:32:14,880
uh from three to four that would

00:32:12,960 --> 00:32:17,679
actually um

00:32:14,880 --> 00:32:18,799
it would actually make a lot harder so

00:32:17,679 --> 00:32:20,159
some of the changes there is we're

00:32:18,799 --> 00:32:20,960
splitting up the drawing into smaller

00:32:20,159 --> 00:32:22,640
sections and i

00:32:20,960 --> 00:32:24,159
just don't think it would make sense for

00:32:22,640 --> 00:32:25,679
for emacs because

00:32:24,159 --> 00:32:26,960
it wants to render the whole screen at

00:32:25,679 --> 00:32:28,240
once we could potentially start

00:32:26,960 --> 00:32:30,159
splitting out based on

00:32:28,240 --> 00:32:32,320
each buffer each window um but that

00:32:30,159 --> 00:32:33,519
again may not make sense

00:32:32,320 --> 00:32:36,000
i know someone has played with it he

00:32:33,519 --> 00:32:37,919
seems to claim that has got pure gdk

00:32:36,000 --> 00:32:39,840
support on two three and four um

00:32:37,919 --> 00:32:41,519
i've had a look at it some of the code

00:32:39,840 --> 00:32:44,640
probably won't make it upstream

00:32:41,519 --> 00:32:45,440
but it if it seems to have some good

00:32:44,640 --> 00:32:49,279
luck with it so

00:32:45,440 --> 00:32:49,279
i mean sounds good

00:32:49,440 --> 00:32:52,960
i know there's a trend recently to port

00:32:51,360 --> 00:32:55,600
there's been a few terminals with

00:32:52,960 --> 00:32:56,480
opengl vulcan directx stuff i guess our

00:32:55,600 --> 00:32:59,600
in

00:32:56,480 --> 00:33:00,000
um for the text rendering and one thing

00:32:59,600 --> 00:33:01,519
to know

00:33:00,000 --> 00:33:03,679
is that cairo took 12 years to get

00:33:01,519 --> 00:33:06,240
upstream so

00:33:03,679 --> 00:33:06,720
i mean i'm looking forward to like emacs

00:33:06,240 --> 00:33:09,039
version

00:33:06,720 --> 00:33:11,360
37 or something when it might come out

00:33:09,039 --> 00:33:13,120
um

00:33:11,360 --> 00:33:15,120
rendering text rendering on a gpu

00:33:13,120 --> 00:33:17,039
involves a lot more work it involves a

00:33:15,120 --> 00:33:19,600
considerable amount more

00:33:17,039 --> 00:33:21,120
prep for each glyph um we could just

00:33:19,600 --> 00:33:22,320
sort of take a known size and just

00:33:21,120 --> 00:33:23,840
bladder onto the screen but everything

00:33:22,320 --> 00:33:25,120
we do at the moment is in svg so we can

00:33:23,840 --> 00:33:27,679
resize it quickly and easily

00:33:25,120 --> 00:33:28,960
and it allows us to have varied size

00:33:27,679 --> 00:33:31,039
variable sized

00:33:28,960 --> 00:33:32,320
and very proportioned fonts on the

00:33:31,039 --> 00:33:34,880
screen

00:33:32,320 --> 00:33:35,919
it it may not buy as much yet i know

00:33:34,880 --> 00:33:37,600
there's some work on

00:33:35,919 --> 00:33:38,960
like in half bars and a few others to

00:33:37,600 --> 00:33:42,640
actually improve rendering

00:33:38,960 --> 00:33:44,159
to an open gl or vulcan context um

00:33:42,640 --> 00:33:46,799
i'd be for it but i just i don't have

00:33:44,159 --> 00:33:46,799
that background

00:33:47,760 --> 00:33:51,120
but i guess what about the wide remax

00:33:49,840 --> 00:33:54,159
what's next for that

00:33:51,120 --> 00:33:57,360
um genuinely i don't see

00:33:54,159 --> 00:33:59,919
emacs breaking away from its like

00:33:57,360 --> 00:34:00,880
it's potentially ugly view it's ugly

00:33:59,919 --> 00:34:02,559
looks

00:34:00,880 --> 00:34:04,320
um the key bindings are gonna stay

00:34:02,559 --> 00:34:05,760
there's too many old hands and

00:34:04,320 --> 00:34:07,440
unfortunately now one of them that are

00:34:05,760 --> 00:34:08,639
just too used to those key bindings that

00:34:07,440 --> 00:34:10,560
they won't change

00:34:08,639 --> 00:34:12,159
and the unfortunate thing is that on ems

00:34:10,560 --> 00:34:14,399
level

00:34:12,159 --> 00:34:16,240
you as soon as you nominate something

00:34:14,399 --> 00:34:18,320
that would be a major change and like

00:34:16,240 --> 00:34:20,320
hey why don't we change this by default

00:34:18,320 --> 00:34:22,480
um old hands could have been this one

00:34:20,320 --> 00:34:23,760
line of code to turn it back off

00:34:22,480 --> 00:34:25,599
outcome all these people who you've

00:34:23,760 --> 00:34:26,800
never seen in your life just going

00:34:25,599 --> 00:34:29,760
up this would be a disaster we're not

00:34:26,800 --> 00:34:31,520
doing it um look

00:34:29,760 --> 00:34:32,960
i i wouldn't be opposed to changing to

00:34:31,520 --> 00:34:35,040
the other keybindings by default if i

00:34:32,960 --> 00:34:36,960
can get back to them quickly and easily

00:34:35,040 --> 00:34:38,399
but there's been a strong adherence to

00:34:36,960 --> 00:34:39,280
let's not upset our old users that's our

00:34:38,399 --> 00:34:41,280
core base

00:34:39,280 --> 00:34:42,399
um it's it's gonna it's gonna stay with

00:34:41,280 --> 00:34:44,720
that for a while

00:34:42,399 --> 00:34:46,480
and as far as the ugliness like gtk is

00:34:44,720 --> 00:34:49,040
not gonna fix that it's still

00:34:46,480 --> 00:34:50,079
a white sort of white on gray sort of

00:34:49,040 --> 00:34:52,639
appearance at the moment

00:34:50,079 --> 00:34:53,520
i mean you can make it look better but

00:34:52,639 --> 00:34:54,800
it's

00:34:53,520 --> 00:34:56,320
it's a customization thing we're

00:34:54,800 --> 00:34:57,680
providing the environment more so than

00:34:56,320 --> 00:35:00,640
actually providing

00:34:57,680 --> 00:35:00,640
a complete editor

00:35:00,720 --> 00:35:04,079
and i don't think lisp is going to be

00:35:01,920 --> 00:35:05,520
replaced i mean there was talk of

00:35:04,079 --> 00:35:08,000
replacing with another lisp

00:35:05,520 --> 00:35:09,440
um and then we end up in a massive sort

00:35:08,000 --> 00:35:11,680
of if you thought the

00:35:09,440 --> 00:35:12,960
how do we make mx more popular one's a

00:35:11,680 --> 00:35:15,359
sort of a big

00:35:12,960 --> 00:35:16,000
bite shitty type discussion try reading

00:35:15,359 --> 00:35:18,000
one of these

00:35:16,000 --> 00:35:19,280
uh half the camp wants scheme half the

00:35:18,000 --> 00:35:20,720
camp wants

00:35:19,280 --> 00:35:24,400
uh common lists because both are

00:35:20,720 --> 00:35:26,000
supported one's faster one's this

00:35:24,400 --> 00:35:27,920
and then you get the others going what

00:35:26,000 --> 00:35:29,839
about supporting emacs list

00:35:27,920 --> 00:35:31,119
in scheme or in this one and then it

00:35:29,839 --> 00:35:32,160
just it goes on for months and months

00:35:31,119 --> 00:35:34,000
and months

00:35:32,160 --> 00:35:35,440
i i still don't think that'll happen i

00:35:34,000 --> 00:35:37,280
think emacs list has too many core

00:35:35,440 --> 00:35:39,839
things that are built into it now

00:35:37,280 --> 00:35:40,640
to rent to modify text to modify whole

00:35:39,839 --> 00:35:45,839
buffers

00:35:40,640 --> 00:35:45,839
as a at a time i can't see it changing

00:35:46,000 --> 00:35:49,680
but i think an interesting point that's

00:35:48,400 --> 00:35:50,960
been made in the last couple of things a

00:35:49,680 --> 00:35:51,680
couple of years is that we're moving

00:35:50,960 --> 00:35:53,760
towards

00:35:51,680 --> 00:35:55,119
libraries rather than do it yourself or

00:35:53,760 --> 00:35:56,800
not invented here i guess

00:35:55,119 --> 00:35:59,440
there's this move to cairo and half bars

00:35:56,800 --> 00:36:01,280
and out that the json library

00:35:59,440 --> 00:36:02,880
i can see that trend continuing i can

00:36:01,280 --> 00:36:05,040
see it's pushing more stuff back out so

00:36:02,880 --> 00:36:06,640
just by moving stuff across to

00:36:05,040 --> 00:36:08,640
half bars we've got ligatures for free

00:36:06,640 --> 00:36:09,280
we got uh we've got smileys and stuff

00:36:08,640 --> 00:36:11,280
like that

00:36:09,280 --> 00:36:12,240
included for free and there's a few

00:36:11,280 --> 00:36:14,240
other libraries there's always been this

00:36:12,240 --> 00:36:16,400
hesitation just because

00:36:14,240 --> 00:36:17,599
uh what if that that library is not

00:36:16,400 --> 00:36:19,839
supported on this old

00:36:17,599 --> 00:36:20,640
old unix system that everyone used to

00:36:19,839 --> 00:36:22,240
use and

00:36:20,640 --> 00:36:23,839
we've kindly gotten to a point that in

00:36:22,240 --> 00:36:25,440
the last couple of years

00:36:23,839 --> 00:36:27,200
we've just got to start dropping them no

00:36:25,440 --> 00:36:29,760
one uses eric's anymore

00:36:27,200 --> 00:36:31,280
sgi hasn't supported eric's for close to

00:36:29,760 --> 00:36:32,560
10 15 years now

00:36:31,280 --> 00:36:34,480
and it's the same with some of the other

00:36:32,560 --> 00:36:37,280
ones we might just have to go

00:36:34,480 --> 00:36:39,359
if we can't comp if we can't port that

00:36:37,280 --> 00:36:41,280
library to the new system

00:36:39,359 --> 00:36:42,320
maybe we've just got to drop it and

00:36:41,280 --> 00:36:44,079
there's still going to be a perfectly

00:36:42,320 --> 00:36:45,359
functioning emax from a number of years

00:36:44,079 --> 00:36:47,280
ago that is still going to work

00:36:45,359 --> 00:36:48,560
again i'm not a maintainer it's not my

00:36:47,280 --> 00:36:49,839
choice but

00:36:48,560 --> 00:36:50,960
for you know the people making a

00:36:49,839 --> 00:36:53,280
decision are kind of a bit more

00:36:50,960 --> 00:36:54,560
receptive to that as an option

00:36:53,280 --> 00:36:56,240
i mean there's still a couple of things

00:36:54,560 --> 00:36:57,200
that we aren't going to do we're going

00:36:56,240 --> 00:36:59,040
to keep in house like

00:36:57,200 --> 00:37:01,040
the font rendering isn't handled by the

00:36:59,040 --> 00:37:02,320
pango library like half of gdk

00:37:01,040 --> 00:37:04,160
and i mean it would make things a lot

00:37:02,320 --> 00:37:06,320
quicker a lot smoother but

00:37:04,160 --> 00:37:08,400
internally there's still a few rough

00:37:06,320 --> 00:37:10,079
edges with the pango library

00:37:08,400 --> 00:37:12,320
um it doesn't handle bi-directional

00:37:10,079 --> 00:37:14,560
support quite as well as e-max does

00:37:12,320 --> 00:37:16,160
i know the bi-directional project for

00:37:14,560 --> 00:37:18,400
e-max took five or ten years and it was

00:37:16,160 --> 00:37:20,880
written well before pango was sort of

00:37:18,400 --> 00:37:21,599
getting to be a usable state so i think

00:37:20,880 --> 00:37:23,040
there's still going to be a couple

00:37:21,599 --> 00:37:25,599
things we're going to keep internal but

00:37:23,040 --> 00:37:28,000
the push to go to new stuff is sort of

00:37:25,599 --> 00:37:28,000
is good

00:37:28,480 --> 00:37:31,920
and it'd be it would be a miss for me

00:37:30,160 --> 00:37:32,880
not to mention this native compilation

00:37:31,920 --> 00:37:34,720
has sort of

00:37:32,880 --> 00:37:36,880
had a huge ripple effect throughout the

00:37:34,720 --> 00:37:38,480
community um i'd say more than

00:37:36,880 --> 00:37:40,800
pure gdk but i just i don't have the

00:37:38,480 --> 00:37:45,119
headspace to even help out on that

00:37:40,800 --> 00:37:47,119
so andrea carello asked in late 2009 hey

00:37:45,119 --> 00:37:50,079
would anyone be receptive to using

00:37:47,119 --> 00:37:51,520
libgccit as a back end compiler for

00:37:50,079 --> 00:37:52,240
emacs and everyone's like yeah sounds

00:37:51,520 --> 00:37:55,599
great

00:37:52,240 --> 00:37:56,720
didn't expect it to actually deliver um

00:37:55,599 --> 00:37:57,839
a month later you had a working

00:37:56,720 --> 00:37:59,119
prototype and it's like yeah it's kind

00:37:57,839 --> 00:38:00,880
of rough crashes all the time but you

00:37:59,119 --> 00:38:02,480
know it compiles it loads it does a few

00:38:00,880 --> 00:38:04,240
things and dies

00:38:02,480 --> 00:38:06,640
the stabilization since then has been

00:38:04,240 --> 00:38:08,000
incredible um again this has now become

00:38:06,640 --> 00:38:10,960
part of my daily driver

00:38:08,000 --> 00:38:12,000
um i sort of run a merged branch between

00:38:10,960 --> 00:38:14,720
pgdk and

00:38:12,000 --> 00:38:16,160
and the native compilation branch and i

00:38:14,720 --> 00:38:17,440
guess the big thing there is

00:38:16,160 --> 00:38:19,280
it supports all the platforms that we

00:38:17,440 --> 00:38:21,200
expect it to and

00:38:19,280 --> 00:38:23,280
it meets the political requirements of

00:38:21,200 --> 00:38:24,640
gnu like we're not relying on libraries

00:38:23,280 --> 00:38:26,400
there's always a talk of like oh can we

00:38:24,640 --> 00:38:28,400
use our vm but

00:38:26,400 --> 00:38:30,400
it's outside the guru project i mean yes

00:38:28,400 --> 00:38:31,599
it's bsd-ish license but

00:38:30,400 --> 00:38:33,440
it's still not going to fit the same

00:38:31,599 --> 00:38:34,880
goals and this is a political

00:38:33,440 --> 00:38:37,359
a political project we've sort of got to

00:38:34,880 --> 00:38:39,839
go with it

00:38:37,359 --> 00:38:41,839
and i think it does provide a few things

00:38:39,839 --> 00:38:43,359
and it gets that back to that point of

00:38:41,839 --> 00:38:47,119
it's going to allow us to write more

00:38:43,359 --> 00:38:48,480
lisp in lists more emacs in less

00:38:47,119 --> 00:38:50,400
we're going to migrate code back to list

00:38:48,480 --> 00:38:53,520
musting a little bit now um

00:38:50,400 --> 00:38:55,760
again huge huge mailing list warning

00:38:53,520 --> 00:38:57,359
but it's going to allow i think even

00:38:55,760 --> 00:38:58,800
more customization

00:38:57,359 --> 00:39:01,040
i think the distributions that we're

00:38:58,800 --> 00:39:03,040
starting to see do me max space max

00:39:01,040 --> 00:39:05,839
uh prelude all these sort of things

00:39:03,040 --> 00:39:09,280
might take on a larger role we might see

00:39:05,839 --> 00:39:11,359
these distributions become i guess

00:39:09,280 --> 00:39:13,040
your vs code to your atom you're it like

00:39:11,359 --> 00:39:14,000
they're going to become a more complete

00:39:13,040 --> 00:39:17,599
offering

00:39:14,000 --> 00:39:18,720
instead but it kind of doesn't matter

00:39:17,599 --> 00:39:21,440
anyway because

00:39:18,720 --> 00:39:22,320
everything's going on this

00:39:21,440 --> 00:39:24,400
presentation's

00:39:22,320 --> 00:39:25,599
in a web browser um no one's really

00:39:24,400 --> 00:39:27,200
using a computer anymore everyone's on

00:39:25,599 --> 00:39:29,200
phones and tablets and stuff so

00:39:27,200 --> 00:39:31,119
i guess emacs is just going to go down

00:39:29,200 --> 00:39:34,560
in an ancient era of computing that

00:39:31,119 --> 00:39:37,359
kind of doesn't make sense anymore so

00:39:34,560 --> 00:39:38,000
should we be thinking about another port

00:39:37,359 --> 00:39:40,720
should that

00:39:38,000 --> 00:39:41,200
rewrite of c just be javascript maybe

00:39:40,720 --> 00:39:42,560
then

00:39:41,200 --> 00:39:44,880
an extension library could just be

00:39:42,560 --> 00:39:47,680
javascript

00:39:44,880 --> 00:39:47,680
i'm not so sure

00:39:49,680 --> 00:39:52,720
because we could just run emacs in a

00:39:51,119 --> 00:39:53,839
browser anyway and we're finally taking

00:39:52,720 --> 00:39:55,200
advantage of

00:39:53,839 --> 00:39:57,920
using libraries that we've already

00:39:55,200 --> 00:39:58,720
pulled out this is emacs running on gtk

00:39:57,920 --> 00:40:02,800
broadway

00:39:58,720 --> 00:40:03,280
in my browser it's not going to show now

00:40:02,800 --> 00:40:05,200
but

00:40:03,280 --> 00:40:07,200
there we go we're just in just in google

00:40:05,200 --> 00:40:09,280
there so

00:40:07,200 --> 00:40:10,319
we can now do it we could run this up in

00:40:09,280 --> 00:40:13,520
a

00:40:10,319 --> 00:40:14,800
an aws drop or aws cloud or droplet

00:40:13,520 --> 00:40:16,000
whatever it doesn't matter

00:40:14,800 --> 00:40:25,839
and then just access it and edit our

00:40:16,000 --> 00:40:25,839
files that way

00:40:32,160 --> 00:40:34,880
just lost the mic

00:40:37,359 --> 00:40:40,800
with that i'd like to acknowledge a

00:40:39,440 --> 00:40:42,240
couple of people

00:40:40,800 --> 00:40:44,400
yuki hirano who has been the main

00:40:42,240 --> 00:40:47,200
developer he wrote

00:40:44,400 --> 00:40:47,839
most of those 16 000 lines of code um

00:40:47,200 --> 00:40:51,040
possibly

00:40:47,839 --> 00:40:52,880
possibly much much more um

00:40:51,040 --> 00:40:54,160
i think i squashed a lot of the rewrites

00:40:52,880 --> 00:40:55,760
so some of it was missing

00:40:54,160 --> 00:40:57,680
buttery smoothie max if you want to get

00:40:55,760 --> 00:40:59,200
a hilarious take on the state of

00:40:57,680 --> 00:41:00,960
redisplay in 2016

00:40:59,200 --> 00:41:02,319
when he tried to port double buffering

00:41:00,960 --> 00:41:04,160
to it um

00:41:02,319 --> 00:41:05,040
again something that was always there if

00:41:04,160 --> 00:41:06,800
you want to look at some of the other

00:41:05,040 --> 00:41:09,040
features in in uh

00:41:06,800 --> 00:41:09,920
ems 27.1 check out mastering emacs and

00:41:09,040 --> 00:41:12,319
of course i want to say

00:41:09,920 --> 00:41:13,760
thank the developers maintainers and the

00:41:12,319 --> 00:41:20,240
rest of the mx community so thank you

00:41:13,760 --> 00:41:22,480
very much

00:41:20,240 --> 00:41:23,440
thank you jeff that was a super

00:41:22,480 --> 00:41:25,359
interesting talk

00:41:23,440 --> 00:41:27,040
i checked i know you couldn't see but i

00:41:25,359 --> 00:41:27,520
checked in on the chat a couple times

00:41:27,040 --> 00:41:29,920
and

00:41:27,520 --> 00:41:31,119
the audience was pretty enthusiastic

00:41:29,920 --> 00:41:34,560
there so

00:41:31,119 --> 00:41:36,000
thank you very much um if you have any

00:41:34,560 --> 00:41:39,040
questions we have

00:41:36,000 --> 00:41:42,000
four minutes so please type them

00:41:39,040 --> 00:41:44,720
into the chat and prefix by question in

00:41:42,000 --> 00:41:49,119
all caps um and we can see if

00:41:44,720 --> 00:41:52,160
we can fit some in um i

00:41:49,119 --> 00:41:52,720
have a bit of a question prepared in

00:41:52,160 --> 00:41:57,040
advance

00:41:52,720 --> 00:42:00,160
that um to fill in some time

00:41:57,040 --> 00:42:02,560
um so jeff i think he said back at the

00:42:00,160 --> 00:42:04,560
beginning that like uh

00:42:02,560 --> 00:42:07,040
you've been using emacs a long time so

00:42:04,560 --> 00:42:08,480
it's kind of just part of your

00:42:07,040 --> 00:42:10,960
tooling and your system and it's just

00:42:08,480 --> 00:42:11,920
how you work right what would you say to

00:42:10,960 --> 00:42:15,599
somebody

00:42:11,920 --> 00:42:20,160
who learned to code using like

00:42:15,599 --> 00:42:22,560
ids and has always coded in ids but is

00:42:20,160 --> 00:42:24,960
interested in the idea of switching to

00:42:22,560 --> 00:42:28,240
something a bit more

00:42:24,960 --> 00:42:31,119
simpler and is intrigued by emacs but

00:42:28,240 --> 00:42:32,480
intimidated by the lengthy history and

00:42:31,119 --> 00:42:33,280
age of your max what would you say to

00:42:32,480 --> 00:42:36,240
them

00:42:33,280 --> 00:42:37,839
jump on one of the the pre-built toolkit

00:42:36,240 --> 00:42:38,319
toolkits there's no shame in using them

00:42:37,839 --> 00:42:40,800
um

00:42:38,319 --> 00:42:41,680
again i've pilfered code out of a lot of

00:42:40,800 --> 00:42:44,319
that stuff

00:42:41,680 --> 00:42:45,680
um so i've got some stuff how to do me

00:42:44,319 --> 00:42:49,599
max it just makes sense for my

00:42:45,680 --> 00:42:51,760
for my internet um for my startup so

00:42:49,599 --> 00:42:53,200
i would probably recommend doing me max

00:42:51,760 --> 00:42:54,720
especially if you i mean for most people

00:42:53,200 --> 00:42:56,240
who come from vm keybindings it has them

00:42:54,720 --> 00:42:58,000
by default but it should be easy enough

00:42:56,240 --> 00:43:00,720
to swap that out

00:42:58,000 --> 00:43:02,319
back to um back to like either more

00:43:00,720 --> 00:43:04,240
common sort of windows

00:43:02,319 --> 00:43:06,560
sort of key bindings or back to the uh

00:43:04,240 --> 00:43:09,359
the um the original e-max ones

00:43:06,560 --> 00:43:10,400
or just i mean i my repo is up there

00:43:09,359 --> 00:43:11,520
depending on what you need as i said

00:43:10,400 --> 00:43:14,000
it's very tailored to c

00:43:11,520 --> 00:43:15,040
and a couple other things but generally

00:43:14,000 --> 00:43:17,359
trying to engage on

00:43:15,040 --> 00:43:18,319
even reddit in the emacs subreddit has a

00:43:17,359 --> 00:43:21,280
lot of features

00:43:18,319 --> 00:43:22,480
um the history probably shouldn't matter

00:43:21,280 --> 00:43:23,599
as much as it does it only really

00:43:22,480 --> 00:43:26,640
matters when you come to

00:43:23,599 --> 00:43:28,720
actually modifying the code base um

00:43:26,640 --> 00:43:30,480
it's always i think a lot of people go

00:43:28,720 --> 00:43:31,839
use finn because it's always there

00:43:30,480 --> 00:43:33,839
use vim because that's what you're told

00:43:31,839 --> 00:43:35,280
to use in uni i tried

00:43:33,839 --> 00:43:37,760
hated it i can't get used to the modal

00:43:35,280 --> 00:43:40,960
settings again it's too late for me

00:43:37,760 --> 00:43:42,800
um i think i failed uh that many red hat

00:43:40,960 --> 00:43:45,760
courses because i expected to use vm

00:43:42,800 --> 00:43:47,280
but i just i'm so used to it now um it

00:43:45,760 --> 00:43:48,079
does take a long time i can't remember

00:43:47,280 --> 00:43:49,920
thinking in like

00:43:48,079 --> 00:43:51,200
back in 10 15 years ago like how am i

00:43:49,920 --> 00:43:52,240
gonna get used to this like this these

00:43:51,200 --> 00:43:53,599
guys have just done it for 10 years

00:43:52,240 --> 00:43:54,720
they're so used to it and eventually it

00:43:53,599 --> 00:43:56,960
just happens

00:43:54,720 --> 00:43:58,079
um if you do want to have a look at if

00:43:56,960 --> 00:43:59,920
you want to read a book to sort of get

00:43:58,079 --> 00:44:01,760
used to some of the thought behind it

00:43:59,920 --> 00:44:02,800
mastering emacs is actually like it's a

00:44:01,760 --> 00:44:04,720
website but also there's a book

00:44:02,800 --> 00:44:06,560
available an ebook available on there

00:44:04,720 --> 00:44:08,240
and every time i've read it twice and

00:44:06,560 --> 00:44:10,240
i've picked up new things each time

00:44:08,240 --> 00:44:11,839
it sort of goes into the the theory of

00:44:10,240 --> 00:44:15,280
why the keyboard

00:44:11,839 --> 00:44:15,280
bindings are in such a way they are

00:44:15,440 --> 00:44:20,400
great thank you um and we've also got a

00:44:18,800 --> 00:44:22,880
question from the audience

00:44:20,400 --> 00:44:25,440
uh the question is if we want to try out

00:44:22,880 --> 00:44:28,319
the wayland version what do we do

00:44:25,440 --> 00:44:29,839
okay so there are a couple if you're

00:44:28,319 --> 00:44:30,240
using icelandics that's already in there

00:44:29,839 --> 00:44:33,200
because

00:44:30,240 --> 00:44:36,000
it's arch there are fedora repo there

00:44:33,200 --> 00:44:38,400
are a number of repos that will have a

00:44:36,000 --> 00:44:39,200
pgdk emac so if you search in some of

00:44:38,400 --> 00:44:40,960
your like

00:44:39,200 --> 00:44:42,800
user uploaded ones they should be there

00:44:40,960 --> 00:44:45,920
if you want to build it locally

00:44:42,800 --> 00:44:47,599
um it's a git check out go to

00:44:45,920 --> 00:44:50,400
savannah.org i think it is or just

00:44:47,599 --> 00:44:51,920
search for gnusava savannah and then on

00:44:50,400 --> 00:44:54,160
the emacs part it'd be one of the

00:44:51,920 --> 00:44:56,000
feature branches

00:44:54,160 --> 00:44:57,839
there's also an emacs mirror on github

00:44:56,000 --> 00:44:59,359
if you prefer so you can check out emacs

00:44:57,839 --> 00:45:00,640
mirror

00:44:59,359 --> 00:45:03,520
emacs and it'll be one of the feature

00:45:00,640 --> 00:45:05,200
branches my version of pgdk on my

00:45:03,520 --> 00:45:06,640
current emacs branch is out of date

00:45:05,200 --> 00:45:08,000
because that was what was submitted

00:45:06,640 --> 00:45:09,680
about two three months ago

00:45:08,000 --> 00:45:11,040
um so it has been sitting there idle

00:45:09,680 --> 00:45:12,079
cause i've just jumped onto the mainline

00:45:11,040 --> 00:45:14,160
branch

00:45:12,079 --> 00:45:15,359
um but that'd be my recommendation so i

00:45:14,160 --> 00:45:16,720
know there was i think someone in

00:45:15,359 --> 00:45:19,839
brisbane who did the fedora one

00:45:16,720 --> 00:45:21,839
um and he's got a he's got pdgk emacs

00:45:19,839 --> 00:45:24,079
somewhere in copper

00:45:21,839 --> 00:45:25,359
um yeah so there are some ports around

00:45:24,079 --> 00:45:26,079
check if you don't want to build first

00:45:25,359 --> 00:45:30,000
check

00:45:26,079 --> 00:45:30,000
your user uploaded repos first

00:45:30,079 --> 00:45:33,839
okay thank you jeff we are out of time

00:45:32,640 --> 00:45:36,079
um

00:45:33,839 --> 00:45:37,599
if anybody has any further questions

00:45:36,079 --> 00:45:39,599
there for jeff there are

00:45:37,599 --> 00:45:40,960
there is a channel in venulis if you

00:45:39,599 --> 00:45:42,640
might have to go to the browse all

00:45:40,960 --> 00:45:44,079
channels if you haven't opened it before

00:45:42,640 --> 00:45:47,200
on the left hand side

00:45:44,079 --> 00:45:49,440
for um tux theater post talk q a

00:45:47,200 --> 00:45:51,280
um and if you give jeff a minute to get

00:45:49,440 --> 00:45:53,680
himself back into venulis

00:45:51,280 --> 00:45:54,480
he might be able to join you there thank

00:45:53,680 --> 00:46:00,880
you

00:45:54,480 --> 00:46:00,880

YouTube URL: https://www.youtube.com/watch?v=LPwr8WeE8jU


