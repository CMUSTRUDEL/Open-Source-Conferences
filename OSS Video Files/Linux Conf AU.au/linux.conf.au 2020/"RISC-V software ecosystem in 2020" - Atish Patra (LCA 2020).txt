Title: "RISC-V software ecosystem in 2020" - Atish Patra (LCA 2020)
Publication date: 2020-01-14
Playlist: linux.conf.au 2020
Description: 
	Atish Patra

https://lca2020.linux.org.au/schedule/presentation/207/

The momentum behind the RISC-V ecosystem is commendable and its open nature has an important role in its growth. An unprecedented number of hardware designs were proposed by both academic researchers and industry professionals in a very short period that has taken the world by storm. However, the RISC-V software ecosystem also needs to grow even at a faster rate if RISC-V can be a truly competitive alternative to mainstream ISAs. The open source software ecosystem in RISC-V will eventually determine the success of the RISC-V platform. This talk will give an insight into the RISC-V software ecosystem evolution over the last few years and the current status of major software projects. It will also include future goals and some of the software projects that require more love from the community. We hope this talk will serve as a good starting guide for new/existing developers to start contributing to the RISC-V software ecosystem. A bigger developer community will facilitate RISC-V ecosystem growth even more and drive the ultimate success of the RISC-V revolution.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Mon Jan 13 11:05:00 2020 at Room 7
Captions: 
	00:00:00,060 --> 00:00:06,270
good hi I'm a tease as the t-shirt says

00:00:04,500 --> 00:00:09,150
I work for Western Digital system

00:00:06,270 --> 00:00:14,030
software research I'm here to talk about

00:00:09,150 --> 00:00:19,470
the risk five software ecosystem in 2020

00:00:14,030 --> 00:00:20,910
so this is a brief overview of different

00:00:19,470 --> 00:00:24,840
components that a software ecosystem

00:00:20,910 --> 00:00:28,680
would rely on so the first component

00:00:24,840 --> 00:00:30,869
that we need first thing when open I say

00:00:28,680 --> 00:00:32,340
any I say or anything that's new is the

00:00:30,869 --> 00:00:34,260
tools and supports so that's kind of

00:00:32,340 --> 00:00:38,309
vertically integrated across the stack

00:00:34,260 --> 00:00:40,559
and then obviously we need our hardware

00:00:38,309 --> 00:00:43,800
which is your described core boards and

00:00:40,559 --> 00:00:46,829
since we have a lacking of those

00:00:43,800 --> 00:00:49,289
hardware we need qumu support which is

00:00:46,829 --> 00:00:52,260
the as Alistair said the greatest and

00:00:49,289 --> 00:00:54,270
the best platform to do your software

00:00:52,260 --> 00:00:56,280
development so it's freely available go

00:00:54,270 --> 00:00:59,129
and develop whatever you want to do on

00:00:56,280 --> 00:01:01,559
kaymu so depending on whether you have

00:00:59,129 --> 00:01:05,309
hardware and or you do not have hardware

00:01:01,559 --> 00:01:07,409
you scream you but then once that's the

00:01:05,309 --> 00:01:10,229
hardware or hardware emulation on top of

00:01:07,409 --> 00:01:11,760
that you have put flow which decides how

00:01:10,229 --> 00:01:13,650
do you boot the system may it be your

00:01:11,760 --> 00:01:15,990
real-time operating systems like

00:01:13,650 --> 00:01:18,420
embedded operating systems or your Linux

00:01:15,990 --> 00:01:20,130
and Linux distro so that decides how do

00:01:18,420 --> 00:01:22,950
you boot for our toes it doesn't

00:01:20,130 --> 00:01:24,930
necessarily has to like it defined boot

00:01:22,950 --> 00:01:27,540
or it can directly run on the bare metal

00:01:24,930 --> 00:01:30,299
but for Linux for various reasons we

00:01:27,540 --> 00:01:33,180
tend to follow a specific multistage

00:01:30,299 --> 00:01:35,610
boot flow that I will cover in the

00:01:33,180 --> 00:01:38,130
following slides and on top of that we

00:01:35,610 --> 00:01:40,770
have distros we have support something

00:01:38,130 --> 00:01:44,549
like you must have been using on a daily

00:01:40,770 --> 00:01:47,210
basis as Fedora openSUSE Debian any of

00:01:44,549 --> 00:01:50,759
the distro so this basically covers

00:01:47,210 --> 00:01:54,630
where all software components lie and in

00:01:50,759 --> 00:01:56,130
this throughout this talk I am basically

00:01:54,630 --> 00:01:59,430
will go through different components

00:01:56,130 --> 00:02:02,490
where what status of it forests 5 where

00:01:59,430 --> 00:02:04,439
it's heading and what's missing where

00:02:02,490 --> 00:02:07,380
you can help us to improve grow the

00:02:04,439 --> 00:02:10,349
ecosystem that was the objective but I

00:02:07,380 --> 00:02:12,600
realized everything just works you just

00:02:10,349 --> 00:02:16,140
go ahead and do it

00:02:12,600 --> 00:02:19,620
and that I'm done this is all the talk I

00:02:16,140 --> 00:02:22,590
have unfortunately I wish I could have

00:02:19,620 --> 00:02:25,170
said this in 2020 instead I have to show

00:02:22,590 --> 00:02:29,790
you this hopefully when we are back in

00:02:25,170 --> 00:02:32,490
2021 I will be done with that slide so

00:02:29,790 --> 00:02:35,070
same slide but now I will just briefly

00:02:32,490 --> 00:02:38,040
point out the different components

00:02:35,070 --> 00:02:39,660
that's missing in those different

00:02:38,040 --> 00:02:43,470
components missing in those particular

00:02:39,660 --> 00:02:47,730
stacks so for example in the tool chain

00:02:43,470 --> 00:02:49,530
we have a stable GCC and LLVM but 32-bit

00:02:47,730 --> 00:02:52,460
gilepsy is still being worked on

00:02:49,530 --> 00:02:57,330
cumin has been solid from t dot o the

00:02:52,460 --> 00:03:00,060
Linux kernel 4.19 onwards you can

00:02:57,330 --> 00:03:02,520
directly use mainstream mainline Linux

00:03:00,060 --> 00:03:04,710
kernel to boot kmu we have a bunch of

00:03:02,520 --> 00:03:06,270
distros that's already support risk 5

00:03:04,710 --> 00:03:09,510
there's a bunch of our toes that's

00:03:06,270 --> 00:03:12,360
already support ascribe I'll just just

00:03:09,510 --> 00:03:15,870
high-five Unleashed and which is a $1000

00:03:12,360 --> 00:03:17,520
board and this is $6.00 board that'll

00:03:15,870 --> 00:03:19,380
also boot Linux so you can play around

00:03:17,520 --> 00:03:23,190
with this board and then bunch of APCs

00:03:19,380 --> 00:03:26,340
for artists you have much more many more

00:03:23,190 --> 00:03:28,200
boats available because it's a lot many

00:03:26,340 --> 00:03:31,260
microcontrollers are available than

00:03:28,200 --> 00:03:33,090
boards that actually boot Linux the key

00:03:31,260 --> 00:03:35,130
features that actually most missing in

00:03:33,090 --> 00:03:38,580
the boot flow is currently there is no

00:03:35,130 --> 00:03:41,310
secure booting ufa is still being worked

00:03:38,580 --> 00:03:44,310
on destroys we have good support with

00:03:41,310 --> 00:03:46,920
like close to 90% packages are being

00:03:44,310 --> 00:03:51,270
fall for the distro so which is pretty

00:03:46,920 --> 00:03:53,850
good to say next let's go deep dive into

00:03:51,270 --> 00:03:56,520
toolchain when I say deep dive it's not

00:03:53,850 --> 00:03:58,110
relative time I'm just giving you just

00:03:56,520 --> 00:03:59,790
touching up on all the points if you

00:03:58,110 --> 00:04:02,220
need deep dive I'll point out different

00:03:59,790 --> 00:04:03,750
talks that will happen during this

00:04:02,220 --> 00:04:07,230
session which will actually go into the

00:04:03,750 --> 00:04:10,710
teeth type so as I said GCC a little

00:04:07,230 --> 00:04:15,150
game is good LLVM 9 has upstream support

00:04:10,710 --> 00:04:17,670
for this 5 GCC support been there for

00:04:15,150 --> 00:04:21,750
like like long like 2 years or something

00:04:17,670 --> 00:04:23,760
and then 32 there are some quakes that

00:04:21,750 --> 00:04:26,550
need to be worked out for 32-bit G lifts

00:04:23,760 --> 00:04:29,069
C so that need to

00:04:26,550 --> 00:04:32,039
that Alistair is being Alistair is

00:04:29,069 --> 00:04:33,539
working on and the details will be he

00:04:32,039 --> 00:04:37,289
will be discussing the detail during his

00:04:33,539 --> 00:04:41,160
talk of 32bj lip support once you have

00:04:37,289 --> 00:04:44,280
all the tool chain that's for the

00:04:41,160 --> 00:04:46,169
developers all like the code tool gen

00:04:44,280 --> 00:04:47,819
developer su kernel developers but we

00:04:46,169 --> 00:04:50,009
also need to empower the application

00:04:47,819 --> 00:04:51,990
developers we need more specific

00:04:50,009 --> 00:04:54,539
applications that can be recompiled for

00:04:51,990 --> 00:04:56,880
escribe so we need to have a easy way to

00:04:54,539 --> 00:04:59,789
provide the cross compilers so then you

00:04:56,880 --> 00:05:01,500
can take your machine Mac or in x86 box

00:04:59,789 --> 00:05:04,080
and then you should be cross compile

00:05:01,500 --> 00:05:06,389
prescribe programs on it so that's why

00:05:04,080 --> 00:05:08,970
all the distros also now started

00:05:06,389 --> 00:05:10,680
supporting the cross compilers I think

00:05:08,970 --> 00:05:12,960
multi lipids of multi lip support is

00:05:10,680 --> 00:05:16,409
also available which lets you just build

00:05:12,960 --> 00:05:19,500
one tool chain which you can use for

00:05:16,409 --> 00:05:21,389
both 32 and 64-bit pre-compile if you do

00:05:19,500 --> 00:05:23,039
not want the tool chain from the destroy

00:05:21,389 --> 00:05:25,380
pre-compile tool chains are also

00:05:23,039 --> 00:05:28,220
available from boot lane there is rust

00:05:25,380 --> 00:05:32,310
support which is as perilous tour is the

00:05:28,220 --> 00:05:35,909
greatest language that comment like of

00:05:32,310 --> 00:05:38,070
the last decay and then there is you

00:05:35,909 --> 00:05:41,340
want docker container that's also there

00:05:38,070 --> 00:05:44,550
its upstream heavily depends on golang

00:05:41,340 --> 00:05:46,710
so the go lang is progress is pretty

00:05:44,550 --> 00:05:49,530
good it was supposed to be upstream in

00:05:46,710 --> 00:05:51,659
1.14 which was released like in January

00:05:49,530 --> 00:05:54,120
or December they missed it by like

00:05:51,659 --> 00:05:57,870
couple of patches so 1.15 will have all

00:05:54,120 --> 00:05:59,400
go long upstream muscle port 64 bit has

00:05:57,870 --> 00:06:02,400
been upstream from

00:05:59,400 --> 00:06:06,000
1.1 13 which was in guess November

00:06:02,400 --> 00:06:09,870
sometime around that and but the biggest

00:06:06,000 --> 00:06:12,300
part that is not there is Java I know

00:06:09,870 --> 00:06:14,729
some guys do not like Java that much but

00:06:12,300 --> 00:06:16,860
we still need Java we still need

00:06:14,729 --> 00:06:19,259
JavaScript so open Jai there was there

00:06:16,860 --> 00:06:22,650
is a open j9 port but there is nothing

00:06:19,259 --> 00:06:25,099
like open JDK or JavaScript engines we

00:06:22,650 --> 00:06:28,620
need JavaScript engine to have proper

00:06:25,099 --> 00:06:31,050
real browsers on the describe systems so

00:06:28,620 --> 00:06:33,090
anybody any Java JavaScript developers

00:06:31,050 --> 00:06:37,710
volunteers raise your hand go and do it

00:06:33,090 --> 00:06:40,349
we'd really need it next Kim you

00:06:37,710 --> 00:06:40,860
I don't think after the pitch Alistar

00:06:40,349 --> 00:06:43,880
gave

00:06:40,860 --> 00:06:46,170
I need to go through the details I just

00:06:43,880 --> 00:06:50,580
this is some of the details

00:06:46,170 --> 00:06:52,260
so apart from emu with the stable EMU

00:06:50,580 --> 00:06:54,900
stable branch and the main line has like

00:06:52,260 --> 00:06:57,240
lot of features there are also a lot of

00:06:54,900 --> 00:06:59,430
graphic graphic tents on something like

00:06:57,240 --> 00:07:00,900
hypervisor vector extensions that's

00:06:59,430 --> 00:07:02,730
already in the mailing list so if you

00:07:00,900 --> 00:07:04,260
want to play around with them you can

00:07:02,730 --> 00:07:06,540
always download those from the mailing

00:07:04,260 --> 00:07:09,150
list and or try them the latest gaming

00:07:06,540 --> 00:07:11,700
also brings new features such as if you

00:07:09,150 --> 00:07:14,520
are using sci-fi view machine you can

00:07:11,700 --> 00:07:16,140
directly recompile it for that same

00:07:14,520 --> 00:07:18,810
banner you can use it for hi-5 Unleashed

00:07:16,140 --> 00:07:21,330
board they stifle our support now which

00:07:18,810 --> 00:07:23,610
lets you experiment with the or board

00:07:21,330 --> 00:07:25,830
core board any bootloader that basically

00:07:23,610 --> 00:07:27,740
runs from the flash so earlier that was

00:07:25,830 --> 00:07:30,660
not possible

00:07:27,740 --> 00:07:34,650
next we'll just briefly discuss about

00:07:30,660 --> 00:07:36,630
the boot flow so in the boot flow area

00:07:34,650 --> 00:07:38,850
we wanted to be as boring as possible

00:07:36,630 --> 00:07:40,890
there is should not be too much

00:07:38,850 --> 00:07:43,500
innovation here because if you want if

00:07:40,890 --> 00:07:45,720
you know how to boot your x86 box if you

00:07:43,500 --> 00:07:47,910
know how to your boot your m64 board you

00:07:45,720 --> 00:07:50,460
should be able to boot a risk 5 without

00:07:47,910 --> 00:07:52,290
a lot of additional knowledge that's why

00:07:50,460 --> 00:07:54,750
we wanted to follow the common most

00:07:52,290 --> 00:07:56,550
commonly used multi stage boot flow

00:07:54,750 --> 00:07:58,530
where your first stage would be a

00:07:56,550 --> 00:08:00,510
jealous be like zero stage bootloader

00:07:58,530 --> 00:08:02,310
which would boot from wrong the next

00:08:00,510 --> 00:08:06,270
stage would be first stage bootloader

00:08:02,310 --> 00:08:08,400
which would be in your DDR does your DDR

00:08:06,270 --> 00:08:10,740
initialization sorry clocking in its

00:08:08,400 --> 00:08:13,560
place and all those stuff and then it

00:08:10,740 --> 00:08:15,360
can may have the capability to load all

00:08:13,560 --> 00:08:18,180
the future stages so that all the

00:08:15,360 --> 00:08:22,080
features it is stages just jump to the

00:08:18,180 --> 00:08:24,780
next one and it also need runtime

00:08:22,080 --> 00:08:26,670
services on the boot slope for the

00:08:24,780 --> 00:08:28,050
describe which we'll cover in the next

00:08:26,670 --> 00:08:32,729
slide so for the runtime services

00:08:28,050 --> 00:08:35,580
currently we're using open spi and a few

00:08:32,729 --> 00:08:37,140
other examples of the those taxes like

00:08:35,580 --> 00:08:39,180
you boot SPL is the first aged

00:08:37,140 --> 00:08:42,120
bootloader then there is the last days

00:08:39,180 --> 00:08:44,250
or the proper boot rotor is the new boot

00:08:42,120 --> 00:08:46,620
which you actually see when you boot a

00:08:44,250 --> 00:08:49,560
embedded device or let's say grub when

00:08:46,620 --> 00:08:52,080
you use your x86 boss that's where the S

00:08:49,560 --> 00:08:54,340
mode last days bootloader comes and then

00:08:52,080 --> 00:08:59,500
that basically jumps to Linux

00:08:54,340 --> 00:09:00,430
boot Linux now what exactly open SBI so

00:08:59,500 --> 00:09:03,490
basically it's an open-source

00:09:00,430 --> 00:09:05,200
implementation of SBI specification so

00:09:03,490 --> 00:09:08,950
Essbase specification is an interface

00:09:05,200 --> 00:09:11,230
between your different modes so how many

00:09:08,950 --> 00:09:13,690
few already aware of little bit of

00:09:11,230 --> 00:09:17,710
knowledge of prescribe spec like what is

00:09:13,690 --> 00:09:21,790
s mode what is M mode okay so I'll just

00:09:17,710 --> 00:09:23,320
briefly overview like it's like M what

00:09:21,790 --> 00:09:24,730
is the most secure mode which has the

00:09:23,320 --> 00:09:27,100
highest privileges highest will be less

00:09:24,730 --> 00:09:28,900
mode then there is s mode where you're

00:09:27,100 --> 00:09:31,240
actually operating systems or supervisor

00:09:28,900 --> 00:09:32,830
mode run you can have embedded operating

00:09:31,240 --> 00:09:34,510
systems artists that can run in the

00:09:32,830 --> 00:09:37,450
higher place mode to give you all the

00:09:34,510 --> 00:09:39,490
privileges but it's easier it's much

00:09:37,450 --> 00:09:41,680
more secure and your virtual memories on

00:09:39,490 --> 00:09:44,520
the S mode so that's where you basically

00:09:41,680 --> 00:09:47,320
run Linux and then there is user mode

00:09:44,520 --> 00:09:50,350
where you run user space apps so that's

00:09:47,320 --> 00:09:53,920
a brief overview and that's where the

00:09:50,350 --> 00:09:57,160
SBI specific encompass defines what

00:09:53,920 --> 00:09:59,890
calls the user space the supervisor mode

00:09:57,160 --> 00:10:01,240
or Linux can make when I say Linux

00:09:59,890 --> 00:10:02,650
it doesn't mean has to be lineThe like

00:10:01,240 --> 00:10:03,700
any other digital is also like

00:10:02,650 --> 00:10:07,300
non-linearity tribution

00:10:03,700 --> 00:10:09,370
FreeBSD NetBSD of any supervisor mode of

00:10:07,300 --> 00:10:12,700
reach operating system need to make a

00:10:09,370 --> 00:10:14,650
call so all those are defined in SBI

00:10:12,700 --> 00:10:17,440
that's I will the spec is publicly

00:10:14,650 --> 00:10:20,770
available in this that github link and

00:10:17,440 --> 00:10:22,950
openness way project make sure that it

00:10:20,770 --> 00:10:26,230
follows the spec and implements or

00:10:22,950 --> 00:10:29,650
whatever the gets added into the spec

00:10:26,230 --> 00:10:31,690
and that also makes sure that we do not

00:10:29,650 --> 00:10:35,140
have a some kind of fragmentation in

00:10:31,690 --> 00:10:36,970
implementing this one because that's one

00:10:35,140 --> 00:10:39,700
of the key component in describe because

00:10:36,970 --> 00:10:42,060
all of the supervisor operating system

00:10:39,700 --> 00:10:46,090
doesn't have can be abstracted from this

00:10:42,060 --> 00:10:49,090
specification now with open spi it's a

00:10:46,090 --> 00:10:50,350
bsd to clause license under the bsd -

00:10:49,090 --> 00:10:53,410
it's actively maintained and developed

00:10:50,350 --> 00:10:56,890
we are currently working on adding much

00:10:53,410 --> 00:10:59,710
many more features new extensions and if

00:10:56,890 --> 00:11:02,860
these are the platforms that it supports

00:10:59,710 --> 00:11:04,180
and I'm proud can say that these are the

00:11:02,860 --> 00:11:07,030
only platform these are the platforms

00:11:04,180 --> 00:11:08,110
only platforms available in describe

00:11:07,030 --> 00:11:10,240
that can boot Linux so

00:11:08,110 --> 00:11:12,550
basically openness Bey can support at

00:11:10,240 --> 00:11:14,560
least now it supports all the platform

00:11:12,550 --> 00:11:16,899
that can boot Linux so if you want to

00:11:14,560 --> 00:11:19,209
play around with Linux you probably come

00:11:16,899 --> 00:11:21,700
across we'll we'll come across with this

00:11:19,209 --> 00:11:23,860
one at some point of time and then it

00:11:21,700 --> 00:11:26,440
also gives you speaking of the platform

00:11:23,860 --> 00:11:28,839
it also gives you the different formats

00:11:26,440 --> 00:11:30,430
that you can directly use it or as a

00:11:28,839 --> 00:11:33,010
vendor you can write your own firmware

00:11:30,430 --> 00:11:36,310
use the platform specific common codes

00:11:33,010 --> 00:11:39,850
in open spi and that will that's

00:11:36,310 --> 00:11:43,630
basically design to fast in your bring

00:11:39,850 --> 00:11:47,470
up on your board or any other board now

00:11:43,630 --> 00:11:49,800
coming to boot loaders as I said you

00:11:47,470 --> 00:11:51,670
boot risk why you boot is the primary

00:11:49,800 --> 00:11:54,339
lastest bootloader that we have been

00:11:51,670 --> 00:11:56,470
using there is coreboot there is a rust

00:11:54,339 --> 00:12:00,029
base or boot that also has describe

00:11:56,470 --> 00:12:02,920
support all those platforms internally

00:12:00,029 --> 00:12:04,839
uses in the in that boot flow there uses

00:12:02,920 --> 00:12:07,600
open SVA dynamic firmware for the

00:12:04,839 --> 00:12:10,560
runtime services you boot SPL support

00:12:07,600 --> 00:12:14,620
was recently added for Q mu and

00:12:10,560 --> 00:12:16,329
antistick processor but five honest

00:12:14,620 --> 00:12:19,089
patches are still in the mailing list

00:12:16,329 --> 00:12:22,300
you need graph it's supported grub

00:12:19,089 --> 00:12:24,250
support is there for almost a year the

00:12:22,300 --> 00:12:26,890
FI support in you boot is also there for

00:12:24,250 --> 00:12:29,829
almost a year what we are missing is if

00:12:26,890 --> 00:12:32,529
I stop in Linux kernel I've got it

00:12:29,829 --> 00:12:35,230
working like around the Christmas around

00:12:32,529 --> 00:12:37,390
near but the patches are I'm yet to post

00:12:35,230 --> 00:12:39,790
so probably after the conference is over

00:12:37,390 --> 00:12:41,140
I'll post the patches and there is if

00:12:39,790 --> 00:12:43,300
you are a fan of Android there is

00:12:41,140 --> 00:12:46,420
Android bootloader which is known as

00:12:43,300 --> 00:12:47,800
little kernel mostly Qualcomm Associates

00:12:46,420 --> 00:12:50,019
comes with the little kernel that also

00:12:47,800 --> 00:12:52,570
now have support for is five and hi-5

00:12:50,019 --> 00:12:55,540
Unleashed but the missing piece here is

00:12:52,570 --> 00:12:59,019
as well it's a secure boot so it is not

00:12:55,540 --> 00:13:01,149
much progress has been done in the Cure

00:12:59,019 --> 00:13:05,850
boot so if you are an export of secure

00:13:01,149 --> 00:13:08,880
boot please contribute next Linux kernel

00:13:05,850 --> 00:13:12,250
the support added support got added in

00:13:08,880 --> 00:13:15,370
4.15 the stable tree boots from the q me

00:13:12,250 --> 00:13:18,970
or 4.19 this can drive support

00:13:15,370 --> 00:13:20,800
development and the latest kernel

00:13:18,970 --> 00:13:22,070
basically boots on the hi-5 unleased

00:13:20,800 --> 00:13:24,380
without any so-so

00:13:22,070 --> 00:13:26,120
if there is an issues there is there is

00:13:24,380 --> 00:13:28,430
an issue send an email to the mailing

00:13:26,120 --> 00:13:31,130
lists or send email to any of us it

00:13:28,430 --> 00:13:33,170
shouldn't be an issue and there is also

00:13:31,130 --> 00:13:36,110
vector extension patches that's there in

00:13:33,170 --> 00:13:38,360
the mailing list there are you can play

00:13:36,110 --> 00:13:41,210
with the qumu patches that's for the

00:13:38,360 --> 00:13:43,280
vector extensions then there are lot of

00:13:41,210 --> 00:13:45,800
key features that got most recently -

00:13:43,280 --> 00:13:48,050
just to name few not going to read out

00:13:45,800 --> 00:13:51,170
all of them just to name a few no me me

00:13:48,050 --> 00:13:53,360
on a mode support which helps the can

00:13:51,170 --> 00:13:55,790
write board and also there is Numa

00:13:53,360 --> 00:13:59,650
support k exec and cousin patches are

00:13:55,790 --> 00:14:03,890
also in the mailing list now hypervisors

00:13:59,650 --> 00:14:06,410
this we have now type 1 and both type 2

00:14:03,890 --> 00:14:08,570
hypervisors available in risk 5 there is

00:14:06,410 --> 00:14:11,420
microkernel hypervisor ACL for also

00:14:08,570 --> 00:14:13,730
support is available I am NOT going into

00:14:11,420 --> 00:14:15,020
the details because I know during his

00:14:13,730 --> 00:14:17,030
talk we'll go into the details

00:14:15,020 --> 00:14:18,890
what's the status and all just for the

00:14:17,030 --> 00:14:21,350
completeness these are the links you can

00:14:18,890 --> 00:14:25,280
follow later to know where exactly and

00:14:21,350 --> 00:14:25,700
how to run hypervisor now no memory

00:14:25,280 --> 00:14:28,730
support

00:14:25,700 --> 00:14:30,890
that's the there will be a cool demo at

00:14:28,730 --> 00:14:33,950
the end of the talk which actually boots

00:14:30,890 --> 00:14:36,620
Linux of this board and why do we need

00:14:33,950 --> 00:14:39,380
though I'm a male it's a risk 5 so there

00:14:36,620 --> 00:14:41,420
will be and for the fact it's already

00:14:39,380 --> 00:14:43,430
there so can write board so there will

00:14:41,420 --> 00:14:46,370
be like it's easier to I guess it's

00:14:43,430 --> 00:14:48,140
cheaper to build with the no virtual

00:14:46,370 --> 00:14:50,510
memory and some CPUs with no virtual

00:14:48,140 --> 00:14:52,850
memory support so that's why it's not

00:14:50,510 --> 00:14:55,160
because we can because we require it to

00:14:52,850 --> 00:14:57,290
do it so that's why I know memory

00:14:55,160 --> 00:15:01,400
support got added recently in the Linux

00:14:57,290 --> 00:15:03,620
kernel and that lets you boot Linux

00:15:01,400 --> 00:15:05,660
directly in M mode you just need to

00:15:03,620 --> 00:15:09,020
disable config mmm in Linux kernel

00:15:05,660 --> 00:15:11,300
config and but the user space for the

00:15:09,020 --> 00:15:14,570
user space programs and all you need a

00:15:11,300 --> 00:15:18,260
couple of patches and it also uses

00:15:14,570 --> 00:15:20,750
currently the flat pin format the FT

00:15:18,260 --> 00:15:23,690
pick support is being worked on again

00:15:20,750 --> 00:15:26,660
the details will be available in later

00:15:23,690 --> 00:15:29,560
today by message talked of F Deepika and

00:15:26,660 --> 00:15:31,880
no meme you support more work needed for

00:15:29,560 --> 00:15:34,070
kernel there is a couple of kernel

00:15:31,880 --> 00:15:35,960
patches also Damon did the most of the

00:15:34,070 --> 00:15:38,150
work and Kristoff so

00:15:35,960 --> 00:15:41,030
he'll be able to tell what exactly

00:15:38,150 --> 00:15:44,810
detail needed but since there is a demo

00:15:41,030 --> 00:15:47,330
he'll come to the demo again so you so

00:15:44,810 --> 00:15:48,860
that's all the all the different

00:15:47,330 --> 00:15:52,070
components now coming back to the

00:15:48,860 --> 00:15:55,550
distros we have different distros Fedora

00:15:52,070 --> 00:15:58,400
has like way good support it builds lot

00:15:55,550 --> 00:16:03,650
of packages like almost 90% Debian is at

00:15:58,400 --> 00:16:05,600
92% you can see it's built more packages

00:16:03,650 --> 00:16:08,120
than lot many other architectures and

00:16:05,600 --> 00:16:08,660
this graph was like latest from the last

00:16:08,120 --> 00:16:10,130
week

00:16:08,660 --> 00:16:13,730
there's openSUSE and openembedded

00:16:10,130 --> 00:16:17,270
support which is in pretty good shape

00:16:13,730 --> 00:16:20,090
and mostly you can just download

00:16:17,270 --> 00:16:22,400
openembedded and use it to build your

00:16:20,090 --> 00:16:26,540
ascribe development environment his

00:16:22,400 --> 00:16:30,200
artists just free a toss defer SL for

00:16:26,540 --> 00:16:32,330
and then open WT is in progress you can

00:16:30,200 --> 00:16:34,760
go to that link that basically lists out

00:16:32,330 --> 00:16:36,680
all the software status like lot of

00:16:34,760 --> 00:16:39,710
software I talked about that has all the

00:16:36,680 --> 00:16:41,600
links as well as for the Atos so that

00:16:39,710 --> 00:16:44,030
will give you a brief overview where all

00:16:41,600 --> 00:16:48,050
components lie and what's the current

00:16:44,030 --> 00:16:50,900
status lastly non linux distributions

00:16:48,050 --> 00:16:53,810
the plug progress in that domain is bit

00:16:50,900 --> 00:16:55,310
slow but it's still there freebsd it

00:16:53,810 --> 00:16:58,910
boots a single core with high fivin

00:16:55,310 --> 00:17:02,840
least it boots SMP on k mu net BST port

00:16:58,910 --> 00:17:06,050
is still in progress with that I can say

00:17:02,840 --> 00:17:10,040
I can I can conclude the slides for this

00:17:06,050 --> 00:17:11,540
year next year it'll be one slide to so

00:17:10,040 --> 00:17:15,430
there will be now Damon will show you

00:17:11,540 --> 00:17:15,430
the demo for norm mu

00:17:23,100 --> 00:17:43,860
yes this this window fibro fibro no yeah

00:17:41,130 --> 00:17:48,120
so the no MMU patches for the kernel

00:17:43,860 --> 00:17:51,720
were merged so in 5.5 so we're at our c6

00:17:48,120 --> 00:17:54,990
today so they're not yet in stable they

00:17:51,720 --> 00:17:59,640
won't come I mean stable but we started

00:17:54,990 --> 00:18:01,590
this work beginning of February last

00:17:59,640 --> 00:18:06,450
year so here this demo is actually

00:18:01,590 --> 00:18:08,640
running kernel 5.1 um I haven't changed

00:18:06,450 --> 00:18:10,650
anything I'm afraid of touching this

00:18:08,640 --> 00:18:14,310
thing because otherwise it doesn't boot

00:18:10,650 --> 00:18:16,290
anymore and I get no memory error so

00:18:14,310 --> 00:18:20,490
this is a five dollar board it only has

00:18:16,290 --> 00:18:22,680
six plus two megabyte of SRAM and I say

00:18:20,490 --> 00:18:24,540
six plus two because the six first six

00:18:22,680 --> 00:18:27,510
megabytes are enabled by default when

00:18:24,540 --> 00:18:30,060
you power on the additional 2 megabyte

00:18:27,510 --> 00:18:32,030
has to be enabled by software which is a

00:18:30,060 --> 00:18:36,180
tricky part to get everything running

00:18:32,030 --> 00:18:39,300
because if you try to boot the kernel

00:18:36,180 --> 00:18:42,660
with an INT ram FS on 6 megabytes you

00:18:39,300 --> 00:18:44,580
get a low memory error no matter how

00:18:42,660 --> 00:18:48,300
much stuff you disable in the kernel is

00:18:44,580 --> 00:18:50,160
too big it's not enough so with 8

00:18:48,300 --> 00:18:51,090
megabyte you can actually boot into

00:18:50,160 --> 00:18:54,390
busybox

00:18:51,090 --> 00:18:59,520
and that's the boot here that's as fast

00:18:54,390 --> 00:19:05,610
as that and ok can't show you or is it

00:18:59,520 --> 00:19:11,960
the message about the memory somewhere

00:19:05,610 --> 00:19:11,960
in here yeah

00:19:13,880 --> 00:19:23,480
oh yeah that one so it does says six

00:19:21,200 --> 00:19:27,260
mega by the vailable but kernel code

00:19:23,480 --> 00:19:31,010
it's only less than megabyte but

00:19:27,260 --> 00:19:34,610
actually when you reach the shell you

00:19:31,010 --> 00:19:38,500
don't have six megabytes so you have so

00:19:34,610 --> 00:19:41,090
this is I should call hash busybox shall

00:19:38,500 --> 00:19:45,440
that I use directly as a unique process

00:19:41,090 --> 00:19:49,429
because if I use a shell to initialize

00:19:45,440 --> 00:19:55,309
the thing shell shell your out

00:19:49,429 --> 00:19:59,559
of memory there's still work to be done

00:19:55,309 --> 00:20:02,900
here and but it is running so the

00:19:59,559 --> 00:20:05,179
interesting thing with this in itself is

00:20:02,900 --> 00:20:10,159
not super interesting because of the

00:20:05,179 --> 00:20:13,460
really limited memory but it's a great

00:20:10,159 --> 00:20:15,230
platform for working on things like for

00:20:13,460 --> 00:20:18,440
example your tool chain and code size

00:20:15,230 --> 00:20:21,350
and getting the missing parts like the

00:20:18,440 --> 00:20:25,809
FD peak support unit all chained up and

00:20:21,350 --> 00:20:27,890
ready busybox can be optimized for this

00:20:25,809 --> 00:20:29,900
muscle

00:20:27,890 --> 00:20:31,940
you see leap see all those libraries you

00:20:29,900 --> 00:20:35,049
can you can work with those two to get

00:20:31,940 --> 00:20:39,890
everything running in here again yet

00:20:35,049 --> 00:20:43,309
kernel boots not much you can do because

00:20:39,890 --> 00:20:45,650
of the memory but if we start being

00:20:43,309 --> 00:20:47,750
smart about the kernel structure we

00:20:45,650 --> 00:20:50,870
could probably save a little bit more

00:20:47,750 --> 00:20:54,080
and actually start running things in

00:20:50,870 --> 00:20:55,940
there so this thing again it's there's a

00:20:54,080 --> 00:21:00,740
range of prices with basically it's five

00:20:55,940 --> 00:21:02,299
to forty bucks to buy this which is a

00:21:00,740 --> 00:21:05,470
lot cheaper than a thousand dollar

00:21:02,299 --> 00:21:08,720
sigh five Unleashed and easy it okay

00:21:05,470 --> 00:21:10,700
easy to carry yeah so I actually got

00:21:08,720 --> 00:21:14,300
that bullying in the plane

00:21:10,700 --> 00:21:19,490
and before conference so just working on

00:21:14,300 --> 00:21:23,630
it yeah it's a great thing to use to

00:21:19,490 --> 00:21:25,070
start running with five and Linux so

00:21:23,630 --> 00:21:28,010
that's it

00:21:25,070 --> 00:21:31,550
nothing upstream yet this is in total

00:21:28,010 --> 00:21:36,520
hack state there's license problems

00:21:31,550 --> 00:21:39,620
because I copied I copied code from the

00:21:36,520 --> 00:21:43,070
SDK from the vendor of that thing which

00:21:39,620 --> 00:21:44,150
is BSD code pasted that in to GPL kernel

00:21:43,070 --> 00:21:47,720
of course that's a no-go

00:21:44,150 --> 00:21:50,930
I cannot send that upstream as is but

00:21:47,720 --> 00:21:52,940
hopefully coming soon probably five or

00:21:50,930 --> 00:21:57,160
six five or seven I'll try to make

00:21:52,940 --> 00:21:57,160
something and send everything upstream

00:22:03,550 --> 00:22:11,230
do have time for questions

00:22:05,980 --> 00:22:11,230
one minute yeah

00:22:17,100 --> 00:22:26,360
so as far as software ecosystem goes how

00:22:21,299 --> 00:22:30,440
is risk 5 approaching different projects

00:22:26,360 --> 00:22:37,919
to enable better support so things like

00:22:30,440 --> 00:22:39,779
said lib luge it over it's up to you

00:22:37,919 --> 00:22:43,320
it's up to everybody it's a community

00:22:39,779 --> 00:22:46,710
development yeah so which depending on

00:22:43,320 --> 00:22:48,649
which specific library do you want maybe

00:22:46,710 --> 00:22:51,690
somebody's already working on if not

00:22:48,649 --> 00:22:54,179
somebody can work on like glue is it I

00:22:51,690 --> 00:22:56,309
know the guy was working on yes he's

00:22:54,179 --> 00:23:00,299
worked for Leonardo so his bandwidth for

00:22:56,309 --> 00:23:02,250
this five is bit controversial so think

00:23:00,299 --> 00:23:04,470
like that so depending on if you want

00:23:02,250 --> 00:23:06,389
some library to just check on that

00:23:04,470 --> 00:23:08,850
software status space if it is not there

00:23:06,389 --> 00:23:10,679
check for if somebody's working on so

00:23:08,850 --> 00:23:13,320
there's a lot of people already working

00:23:10,679 --> 00:23:15,120
on and like on the background when they

00:23:13,320 --> 00:23:17,039
actually get it working this and the

00:23:15,120 --> 00:23:23,009
patches so depending on that you add

00:23:17,039 --> 00:23:26,779
something yeah depending on what

00:23:23,009 --> 00:23:26,779

YouTube URL: https://www.youtube.com/watch?v=qwkab2Z44pk


