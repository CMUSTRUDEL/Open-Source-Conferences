Title: "Easy Geo-Redundancy with MARS" - Thomas Schoebel-Theuer (LCA 2020)
Publication date: 2020-01-15
Playlist: linux.conf.au 2020
Description: 
	Thomas Schoebel-Theuer

https://lca2020.linux.org.au/schedule/presentation/185/

MARS is an external kernel module, forming the backbone of 1&1 Ionos geo-redundancy over long distances, and is in production for years on thousands of servers for millions of hosting customers and petabytes of data. It is also in production for background migration of mass data (hardware liefecycle and load balancing). This talk explains its fundamental working principles, and differences to DRBD. MARS wants to go kernel upstream in the next few years. There will be much room for Q&A.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Tue Jan 14 15:45:00 2020 at Arena
Captions: 
	00:00:00,000 --> 00:00:05,420
sessions of the colonel mini-cons up

00:00:03,240 --> 00:00:08,309
next we have Thomas Chabot Toya

00:00:05,420 --> 00:00:13,500
presenting on a VGA redundancy with Mars

00:00:08,309 --> 00:00:15,809
please welcome Thomas thank you

00:00:13,500 --> 00:00:18,180
I'm from London 1 which is a European

00:00:15,809 --> 00:00:21,410
web hosting company and I'm the only

00:00:18,180 --> 00:00:24,449
code developers there I have a backup

00:00:21,410 --> 00:00:28,710
which is a union is a union from the

00:00:24,449 --> 00:00:30,720
University and a few times a year I can

00:00:28,710 --> 00:00:32,960
talk with them about security problems

00:00:30,720 --> 00:00:36,200
but he's doing user space work actually

00:00:32,960 --> 00:00:40,379
so all you I will present you with

00:00:36,200 --> 00:00:42,480
practically from myself and well I have

00:00:40,379 --> 00:00:44,129
been working up streams more than 20

00:00:42,480 --> 00:00:46,610
years ago the D entry cache in the

00:00:44,129 --> 00:00:49,170
cordless for me but I have not worked

00:00:46,610 --> 00:00:52,350
only a few months in the coral and then

00:00:49,170 --> 00:00:55,440
I had I was working a different story

00:00:52,350 --> 00:01:00,210
here what I will talk about is first

00:00:55,440 --> 00:01:03,750
some background how Mars has evolved and

00:01:00,210 --> 00:01:06,000
the reasons why its existing and then of

00:01:03,750 --> 00:01:07,740
course what for kernel hacker audience

00:01:06,000 --> 00:01:10,380
it's important to know the differences

00:01:07,740 --> 00:01:12,780
to what's already in the kernel what's

00:01:10,380 --> 00:01:15,960
the architectural differences respect to

00:01:12,780 --> 00:01:17,340
the RVD and in particular with respect

00:01:15,960 --> 00:01:21,990
to the device mapper there are some

00:01:17,340 --> 00:01:23,939
differences and of course current status

00:01:21,990 --> 00:01:26,250
future plans and I think the main point

00:01:23,939 --> 00:01:28,140
for me is to get some feedback from

00:01:26,250 --> 00:01:30,240
doing this in the discussion what should

00:01:28,140 --> 00:01:32,670
I do to bring it up strange Oh otherwise

00:01:30,240 --> 00:01:35,369
what do I need from you in order to

00:01:32,670 --> 00:01:39,299
bring it upstream so it's a problem to

00:01:35,369 --> 00:01:40,829
be resolved first I will explain for

00:01:39,299 --> 00:01:43,049
upstream hackers what downstream is

00:01:40,829 --> 00:01:45,619
actually meaning I will try to explain

00:01:43,049 --> 00:01:50,640
it so if you are responsible

00:01:45,619 --> 00:01:53,700
I'm personally responsible for a system

00:01:50,640 --> 00:01:55,979
which is for Cohen for downstream carbon

00:01:53,700 --> 00:01:57,780
which is deployed to northern 10000 I

00:01:55,979 --> 00:01:59,670
think in the moment it's about 15,000

00:01:57,780 --> 00:02:01,460
servers in total we have the shared

00:01:59,670 --> 00:02:04,250
hosting if nine millions of customers

00:02:01,460 --> 00:02:07,340
explain it on the next slide

00:02:04,250 --> 00:02:09,259
and plus minus root services a total of

00:02:07,340 --> 00:02:11,930
around this number of machines

00:02:09,259 --> 00:02:14,210
what I'm doing is rather similar to when

00:02:11,930 --> 00:02:17,150
you know the Debian development model is

00:02:14,210 --> 00:02:19,760
like quilt or pet stack on top of an

00:02:17,150 --> 00:02:24,470
upstream kernel so my most frequent

00:02:19,760 --> 00:02:26,390
operation is git rebase of course what

00:02:24,470 --> 00:02:30,500
I'm doing at the moment I have around

00:02:26,390 --> 00:02:31,450
360 patches excluding Mouse masses on

00:02:30,500 --> 00:02:35,270
top of all of it

00:02:31,450 --> 00:02:37,850
then several problems to be solved in

00:02:35,270 --> 00:02:41,450
downstream priority number one is

00:02:37,850 --> 00:02:44,060
maintaining the SLA it's 99.9 eight

00:02:41,450 --> 00:02:47,180
almost four nines percent end-to-end I

00:02:44,060 --> 00:02:49,040
will explain it on the next slide then a

00:02:47,180 --> 00:02:51,200
few parts are from gr security because

00:02:49,040 --> 00:02:53,420
one and one has used to our security

00:02:51,200 --> 00:02:55,250
even before I entered the company and

00:02:53,420 --> 00:02:58,760
you all know what happened to Java

00:02:55,250 --> 00:03:02,690
security in spring of 2017 you know it

00:02:58,760 --> 00:03:05,390
and this hall also impacted my

00:03:02,690 --> 00:03:08,709
downstream work because I had to port I

00:03:05,390 --> 00:03:13,010
had to split the jumbo perch into some

00:03:08,709 --> 00:03:16,340
parts for my internal work we had used

00:03:13,010 --> 00:03:18,890
only 29 features from the many hundred

00:03:16,340 --> 00:03:21,739
features called config options of gr

00:03:18,890 --> 00:03:24,260
security and at the moment I've stuck

00:03:21,739 --> 00:03:26,720
I'm stuck at having ported nine of them

00:03:24,260 --> 00:03:28,780
and the rest twenty are yet missing and

00:03:26,720 --> 00:03:30,980
I have no time and moment I had no time

00:03:28,780 --> 00:03:34,250
including Mars and other things for

00:03:30,980 --> 00:03:36,440
doing that then a lot of security

00:03:34,250 --> 00:03:40,430
features one highlight is the persistent

00:03:36,440 --> 00:03:43,670
5 monitor tool if you operate a system

00:03:40,430 --> 00:03:46,760
with billions of eyelids and you want a

00:03:43,670 --> 00:03:49,310
user space demon with FS notified then

00:03:46,760 --> 00:03:52,010
you always have a consistency problem if

00:03:49,310 --> 00:03:55,910
something is going wrong here so you

00:03:52,010 --> 00:03:59,180
have unnoticed loss of of information if

00:03:55,910 --> 00:04:01,190
the demon doesn't exactly start when it

00:03:59,180 --> 00:04:03,080
should start and exactly shut down in

00:04:01,190 --> 00:04:06,470
the right moment so I have a special

00:04:03,080 --> 00:04:09,110
culprit which directly persists the file

00:04:06,470 --> 00:04:11,630
system events for for incremental backup

00:04:09,110 --> 00:04:12,700
in the file system and special directory

00:04:11,630 --> 00:04:15,280
and

00:04:12,700 --> 00:04:17,260
it's race free because the you mount and

00:04:15,280 --> 00:04:19,209
the mount system cars are activating or

00:04:17,260 --> 00:04:23,320
deactivating that so similar to the

00:04:19,209 --> 00:04:25,389
quota system by concept and if you press

00:04:23,320 --> 00:04:27,580
the power button and lose some data you

00:04:25,389 --> 00:04:29,410
have a super block information and now

00:04:27,580 --> 00:04:32,680
you had a data loss and then of course

00:04:29,410 --> 00:04:36,460
you need a full full scan of the fire

00:04:32,680 --> 00:04:39,070
system again ok so this is what I'm

00:04:36,460 --> 00:04:41,440
working on and it's more than 100

00:04:39,070 --> 00:04:43,150
percent of my capacity and this is to be

00:04:41,440 --> 00:04:44,260
discussed later what this means for

00:04:43,150 --> 00:04:47,440
upstream board

00:04:44,260 --> 00:04:49,810
so our SLA is mentioned is almost four

00:04:47,440 --> 00:04:53,520
nines and to end measured from an

00:04:49,810 --> 00:04:58,270
external data center which means even

00:04:53,520 --> 00:05:01,120
not only network outages or simple PHP

00:04:58,270 --> 00:05:04,540
problems but also any admin errors

00:05:01,120 --> 00:05:07,090
whatever is already there in and we

00:05:04,540 --> 00:05:09,130
typically meet this I think in the last

00:05:07,090 --> 00:05:11,830
year so you have only missed it one or

00:05:09,130 --> 00:05:15,130
two times and it was almost always due

00:05:11,830 --> 00:05:17,410
to networking problems and this means

00:05:15,130 --> 00:05:20,620
that the actual state of mouse is super

00:05:17,410 --> 00:05:22,919
stable so it's priority number one is

00:05:20,620 --> 00:05:26,020
not only my downstream kernel

00:05:22,919 --> 00:05:28,060
specialized things and finding and

00:05:26,020 --> 00:05:30,930
fixing bugs but also with respect to

00:05:28,060 --> 00:05:33,880
Mars right I don't know the real

00:05:30,930 --> 00:05:35,830
reliability of Mouse itself but it must

00:05:33,880 --> 00:05:38,740
be much much much better as far as I

00:05:35,830 --> 00:05:42,160
know so the working environment where we

00:05:38,740 --> 00:05:45,039
have we have around 5 petabytes in the

00:05:42,160 --> 00:05:47,380
mean time before data centers and we

00:05:45,039 --> 00:05:49,240
each continent we are running two data

00:05:47,380 --> 00:05:54,190
centers with a distance of about 50

00:05:49,240 --> 00:05:56,080
kilometers this T redundancy and some

00:05:54,190 --> 00:05:58,210
millions of customer home directory some

00:05:56,080 --> 00:06:00,460
billions of inodes and mentioned the

00:05:58,210 --> 00:06:03,700
fragment or true patch I have developed

00:06:00,460 --> 00:06:07,570
this for ensuring that incremental daily

00:06:03,700 --> 00:06:10,000
backup box without for five operations

00:06:07,570 --> 00:06:15,580
in the file system because if you try to

00:06:10,000 --> 00:06:17,460
do that it's it's a place okay and what

00:06:15,580 --> 00:06:20,590
you would like

00:06:17,460 --> 00:06:23,770
is what's quite unusual we'll use local

00:06:20,590 --> 00:06:27,520
storage because it's better you don't

00:06:23,770 --> 00:06:29,260
believe it's all guys in the storage

00:06:27,520 --> 00:06:32,530
area house thinking that network storage

00:06:29,260 --> 00:06:34,210
is a must but local storage first it's

00:06:32,530 --> 00:06:39,060
faster and it's even the same

00:06:34,210 --> 00:06:42,450
flexibility thanks to some solution I've

00:06:39,060 --> 00:06:45,220
developed on top of Mars you can migrate

00:06:42,450 --> 00:06:47,440
containers in the background logical

00:06:45,220 --> 00:06:49,960
volumes in sake see containers on top of

00:06:47,440 --> 00:06:53,350
them in background why the data is being

00:06:49,960 --> 00:06:55,690
modified and this migration can be used

00:06:53,350 --> 00:06:57,520
for example to migrate a container if

00:06:55,690 --> 00:06:59,620
you have 10 containers on a box and it

00:06:57,520 --> 00:07:02,860
goes to peak then you migrate away one

00:06:59,620 --> 00:07:06,910
to another empty box well enough space

00:07:02,860 --> 00:07:10,420
and then you can expand first the

00:07:06,910 --> 00:07:13,300
logical volume then Mars RDM resize and

00:07:10,420 --> 00:07:15,250
then access underscore FS for examples

00:07:13,300 --> 00:07:17,680
and you have more space just as an

00:07:15,250 --> 00:07:20,350
example how to manage that it's it's no

00:07:17,680 --> 00:07:24,520
problem is solved here the so-called

00:07:20,350 --> 00:07:26,770
football project well then what is

00:07:24,520 --> 00:07:31,330
probably interesting wise Mouse existing

00:07:26,770 --> 00:07:33,820
it's interesting history one one starlet

00:07:31,330 --> 00:07:35,710
and about the project so even before I

00:07:33,820 --> 00:07:39,460
entered the company but when I entered

00:07:35,710 --> 00:07:43,120
it in 2008 the project finished in 2009

00:07:39,460 --> 00:07:44,860
dr BD was used was the first attempt for

00:07:43,120 --> 00:07:47,350
solving the g redundancy over 50

00:07:44,860 --> 00:07:50,080
kilometres and the reason why I've

00:07:47,350 --> 00:07:52,840
developed Mars is original lab testing

00:07:50,080 --> 00:07:56,440
which has not been done by me in was a

00:07:52,840 --> 00:07:58,360
northerner recent rate it is well we at

00:07:56,440 --> 00:08:01,050
that time one gigabit uplinks whereas

00:07:58,360 --> 00:08:03,790
the ordinary standard technology and

00:08:01,050 --> 00:08:06,040
more than half of this speed was a

00:08:03,790 --> 00:08:09,160
triple and so there was no problem the

00:08:06,040 --> 00:08:12,910
old system architects were thinking but

00:08:09,160 --> 00:08:15,190
a few years later the same great if you

00:08:12,910 --> 00:08:17,170
need a full swing for some reason like

00:08:15,190 --> 00:08:19,920
split play and a split brain but you

00:08:17,170 --> 00:08:22,720
have a loss of a machine or whatever

00:08:19,920 --> 00:08:25,450
then it dropped down to about five

00:08:22,720 --> 00:08:28,750
megabytes per seconds we had

00:08:25,450 --> 00:08:32,140
to throttle it down why what do you

00:08:28,750 --> 00:08:35,110
think what could is a reason the problem

00:08:32,140 --> 00:08:39,730
is the drbg has one TCP connection per

00:08:35,110 --> 00:08:42,520
resource so all of this TCP connection

00:08:39,730 --> 00:08:44,560
you have three types of traffic mouse

00:08:42,520 --> 00:08:46,150
has a solution for it it has separate

00:08:44,560 --> 00:08:48,430
ports and separate connection for each

00:08:46,150 --> 00:08:50,920
of these traffic types here below the

00:08:48,430 --> 00:08:53,410
meta data traffic involves its sibling

00:08:50,920 --> 00:08:56,380
tree in the RVD you need some state

00:08:53,410 --> 00:08:58,720
exchange about finite automaton state of

00:08:56,380 --> 00:09:01,030
the RBD then you have the ordinary

00:08:58,720 --> 00:09:02,680
replication traffic also in the RVD and

00:09:01,030 --> 00:09:05,920
of course you have to sing traffic if

00:09:02,680 --> 00:09:08,290
you want to my to migrate the data and

00:09:05,920 --> 00:09:10,690
so on and all of this is going over one

00:09:08,290 --> 00:09:13,360
single TCP connection so it's like a

00:09:10,690 --> 00:09:16,720
highway which has only one track in one

00:09:13,360 --> 00:09:19,840
direction ordinarily you are driving a

00:09:16,720 --> 00:09:21,730
BMW or Porsche or Ferrari or something

00:09:19,840 --> 00:09:24,840
and you know in Germany there's no speed

00:09:21,730 --> 00:09:29,860
limit so you can drive 200 no problem

00:09:24,840 --> 00:09:31,390
but when suddenly the highway is changed

00:09:29,860 --> 00:09:33,520
you have a traffic chain by trucks

00:09:31,390 --> 00:09:37,270
because you are starting the sync

00:09:33,520 --> 00:09:40,120
operation it's a huge bull data to be

00:09:37,270 --> 00:09:41,710
transferred now and nothing you are

00:09:40,120 --> 00:09:45,310
stuck in the traffic jam that's the

00:09:41,710 --> 00:09:47,200
problem simply explained so this was the

00:09:45,310 --> 00:09:49,720
reason why I started Mouse first in my

00:09:47,200 --> 00:09:52,330
spare time upon my personal initiative

00:09:49,720 --> 00:09:54,460
there was no originally no one at one

00:09:52,330 --> 00:09:57,780
project for it and after I have shown it

00:09:54,460 --> 00:10:01,000
to some people higher in the hierarchy

00:09:57,780 --> 00:10:06,100
then suddenly got a project and some

00:10:01,000 --> 00:10:08,890
support for it and yes and this is the

00:10:06,100 --> 00:10:10,900
reason why Mouse existed there was an

00:10:08,890 --> 00:10:13,240
interesting thing before I really

00:10:10,900 --> 00:10:16,420
started it we asked limited for a fix

00:10:13,240 --> 00:10:19,060
for this so we asked them we would pay

00:10:16,420 --> 00:10:19,570
it please an new feature request we pay

00:10:19,060 --> 00:10:21,880
you for

00:10:19,570 --> 00:10:24,490
a new feature please provide a second

00:10:21,880 --> 00:10:27,340
TCP connection for the same traffic so

00:10:24,490 --> 00:10:30,610
you have two lines and the tracks have a

00:10:27,340 --> 00:10:31,970
separate lines from your BMW or whatever

00:10:30,610 --> 00:10:34,579
wants to try first

00:10:31,970 --> 00:10:36,649
and after a while we got the answer no

00:10:34,579 --> 00:10:39,139
they won't do it and that's the this was

00:10:36,649 --> 00:10:43,099
the real reason why I then was clear aft

00:10:39,139 --> 00:10:45,679
to do it in a different way okay then

00:10:43,099 --> 00:10:47,359
one explanation for the DI body problems

00:10:45,679 --> 00:10:50,479
we accounted this is a lab testing

00:10:47,359 --> 00:10:52,549
scenario here in this scenario we are

00:10:50,479 --> 00:10:55,489
assuming it's an inlet testing that the

00:10:52,549 --> 00:10:59,479
DRB dee-lightful hood is constant here

00:10:55,489 --> 00:11:01,489
and that the network has a limit which

00:10:59,479 --> 00:11:04,149
is decreasing linearly in this example

00:11:01,489 --> 00:11:08,509
just for lab testing and if you do this

00:11:04,149 --> 00:11:10,489
it's an interesting behavior once the

00:11:08,509 --> 00:11:13,429
request of throughput cannot be

00:11:10,489 --> 00:11:16,009
satisfied it starts rambling a little

00:11:13,429 --> 00:11:18,109
bit after why does it doesn't automatic

00:11:16,009 --> 00:11:20,119
disconnect depending on configuration

00:11:18,109 --> 00:11:23,059
you can try a reconnect or two it

00:11:20,119 --> 00:11:24,159
automatically so it cannot can never

00:11:23,059 --> 00:11:26,659
succeed it's clear because

00:11:24,159 --> 00:11:29,929
information-theoretic limits does not

00:11:26,659 --> 00:11:32,899
work and of course after the pass you

00:11:29,929 --> 00:11:34,789
have an additional traffic additional

00:11:32,899 --> 00:11:36,439
throughput for resync because in the

00:11:34,789 --> 00:11:39,589
meantime the bitmap has recorded some

00:11:36,439 --> 00:11:41,389
more changes and this additional load

00:11:39,589 --> 00:11:46,009
which also has to be transferred and it

00:11:41,389 --> 00:11:47,839
can never run this way and the point is

00:11:46,009 --> 00:11:49,639
the everybody has a bitmap which does

00:11:47,839 --> 00:11:52,039
not record the order of the right right

00:11:49,639 --> 00:11:56,059
request and if you interrupt it you

00:11:52,039 --> 00:11:57,769
again during this rethink then your

00:11:56,059 --> 00:12:00,979
mirror is inconsistent because the

00:11:57,769 --> 00:12:04,519
original right or is violated it's clear

00:12:00,979 --> 00:12:06,559
to you as though you have no record of

00:12:04,519 --> 00:12:08,359
the original order of the writes so some

00:12:06,559 --> 00:12:12,019
parts of the newer versions and parts of

00:12:08,359 --> 00:12:13,729
the other one and in some incidents in

00:12:12,019 --> 00:12:15,499
ours it can happen that your mirror is

00:12:13,729 --> 00:12:18,319
permanently inconsistent so it fails

00:12:15,499 --> 00:12:21,079
exactly in the moment when you once when

00:12:18,319 --> 00:12:23,599
you desperately need your replica at the

00:12:21,079 --> 00:12:26,389
other side and this is the problem to be

00:12:23,599 --> 00:12:28,369
solved by Mars in the next slide if you

00:12:26,389 --> 00:12:30,470
have the same scenario constant

00:12:28,369 --> 00:12:33,319
application throughput and you have this

00:12:30,470 --> 00:12:36,109
network throughput of course the green

00:12:33,319 --> 00:12:38,650
line the actual replication traffic by

00:12:36,109 --> 00:12:42,460
Mars is parallel in parallel

00:12:38,650 --> 00:12:44,080
slightly below of course this line and

00:12:42,460 --> 00:12:45,970
it's buffered in the persistent

00:12:44,080 --> 00:12:48,040
transaction lock so-called transaction

00:12:45,970 --> 00:12:52,150
log of Mars so this is the information

00:12:48,040 --> 00:12:54,790
theoretic best possible behavior here's

00:12:52,150 --> 00:12:56,770
a practical example example you have

00:12:54,790 --> 00:12:59,770
here TCP said buffer this is much

00:12:56,770 --> 00:13:01,620
smaller by factors by by orders of

00:12:59,770 --> 00:13:04,540
magnitude than the transaction log and

00:13:01,620 --> 00:13:08,590
in case of a networking problem even an

00:13:04,540 --> 00:13:09,940
outlet or whatever is buffering as much

00:13:08,590 --> 00:13:12,010
as you want and it's catching up

00:13:09,940 --> 00:13:14,620
afterwards if you have enough transport

00:13:12,010 --> 00:13:17,200
capacity I've checked the cross data

00:13:14,620 --> 00:13:19,450
center links on our company and the

00:13:17,200 --> 00:13:23,980
congestion is an interesting problem the

00:13:19,450 --> 00:13:26,080
throughput is sometimes declining by a

00:13:23,980 --> 00:13:27,910
factor more than by two orders of

00:13:26,080 --> 00:13:30,340
magnitude for a very short time and then

00:13:27,910 --> 00:13:32,350
it's up again and so on so it's a

00:13:30,340 --> 00:13:35,590
runtime behavior with some type of like

00:13:32,350 --> 00:13:37,270
packet storms and similar and this is

00:13:35,590 --> 00:13:40,120
the reason why the RPG did not work the

00:13:37,270 --> 00:13:42,100
a body works very well and excellent if

00:13:40,120 --> 00:13:43,840
you have a crossover cable back to rack

00:13:42,100 --> 00:13:46,270
replication this is the use case where

00:13:43,840 --> 00:13:48,550
it has been constructed for so the our

00:13:46,270 --> 00:13:51,130
body isn't obsolete by Mars obviously

00:13:48,550 --> 00:13:53,160
but Mouse is just covering a different

00:13:51,130 --> 00:13:56,770
use case here

00:13:53,160 --> 00:13:59,620
okay now internals some internals of

00:13:56,770 --> 00:14:02,620
Mars for for Colonel hackers here's

00:13:59,620 --> 00:14:05,080
Justin highlight let's explain it

00:14:02,620 --> 00:14:08,470
systematically ok so we have a virtual

00:14:05,080 --> 00:14:10,630
device deaf Mouse my data and the backup

00:14:08,470 --> 00:14:13,710
device or the backing device is deaf

00:14:10,630 --> 00:14:16,840
logical volume volume hood my data and

00:14:13,710 --> 00:14:19,600
the content is the same this is the

00:14:16,840 --> 00:14:22,330
device a physical device or a logical

00:14:19,600 --> 00:14:24,070
volume to be replicated then you have a

00:14:22,330 --> 00:14:26,650
kernel module with the temporary core

00:14:24,070 --> 00:14:29,590
memory buffer it starts with size 0 and

00:14:26,650 --> 00:14:31,690
can grow up to a limit configurable

00:14:29,590 --> 00:14:34,450
limit and if you have no traffic anymore

00:14:31,690 --> 00:14:37,900
then it will shrink down to size 0 again

00:14:34,450 --> 00:14:40,420
so it's a dynamic powerful so if you're

00:14:37,900 --> 00:14:42,070
right request is coming down from here

00:14:40,420 --> 00:14:45,250
it's appended to the transaction log

00:14:42,070 --> 00:14:48,620
file and once it's completed so we get

00:14:45,250 --> 00:14:52,280
the completion to callback

00:14:48,620 --> 00:14:54,350
it's been no call back to their

00:14:52,280 --> 00:14:56,330
application it's written because now if

00:14:54,350 --> 00:14:58,760
the power fails all the data is present

00:14:56,330 --> 00:15:00,710
in the transaction log file and if you

00:14:58,760 --> 00:15:02,720
know my sequel or other databases they

00:15:00,710 --> 00:15:05,480
have a recovery phase after power fail

00:15:02,720 --> 00:15:09,290
Mouse is working the same way you have a

00:15:05,480 --> 00:15:13,520
recovery phase after after startup of

00:15:09,290 --> 00:15:13,940
course so this is no problem to be

00:15:13,520 --> 00:15:17,930
healed

00:15:13,940 --> 00:15:20,290
now the point is this temporary memory

00:15:17,930 --> 00:15:23,300
buffer cannot grow indefinitely

00:15:20,290 --> 00:15:25,970
impossible so you need to write the data

00:15:23,300 --> 00:15:29,360
into the block device but it need not be

00:15:25,970 --> 00:15:32,990
written in the original order because

00:15:29,360 --> 00:15:36,110
the transaction look already requires

00:15:32,990 --> 00:15:37,940
the original order so and I'm using this

00:15:36,110 --> 00:15:39,830
I'm reordering according to sector

00:15:37,940 --> 00:15:43,040
numbers of scanning sector numbers and

00:15:39,830 --> 00:15:46,010
this is a performance performance boost

00:15:43,040 --> 00:15:49,040
or if you have raid 6 where the rights

00:15:46,010 --> 00:15:51,170
are very expensive then ordering

00:15:49,040 --> 00:15:53,840
according to sect a scanning sector

00:15:51,170 --> 00:15:56,090
number is actually meaning that the seek

00:15:53,840 --> 00:15:58,550
distance are minimized and that you can

00:15:56,090 --> 00:16:01,490
merge some adjacent blocks in some cases

00:15:58,550 --> 00:16:03,560
and that the r86 i've version of course

00:16:01,490 --> 00:16:06,110
will work better when it has a lattice

00:16:03,560 --> 00:16:08,210
driving and I have some measurements you

00:16:06,110 --> 00:16:10,610
can see it in the mouse user manual for

00:16:08,210 --> 00:16:11,150
scissored means I will show you the link

00:16:10,610 --> 00:16:14,210
later

00:16:11,150 --> 00:16:16,820
I have scenarios our workload measured

00:16:14,210 --> 00:16:18,860
this book this book trace and replayed

00:16:16,820 --> 00:16:21,470
with doctor replay and I see I see a

00:16:18,860 --> 00:16:23,900
speed up of more than a factor of 2 this

00:16:21,470 --> 00:16:25,790
our hardware we currently have so this

00:16:23,900 --> 00:16:27,890
is and I know of people who are using

00:16:25,790 --> 00:16:30,260
Mars not for replication but just for

00:16:27,890 --> 00:16:32,060
boosting the speed here because they are

00:16:30,260 --> 00:16:35,480
used cases where our Mars

00:16:32,060 --> 00:16:37,640
delivers the new similar perform not

00:16:35,480 --> 00:16:39,290
well it's not near as a Steve's but you

00:16:37,640 --> 00:16:42,830
don't need as a space as as these

00:16:39,290 --> 00:16:44,630
anymore for a certain use case there our

00:16:42,830 --> 00:16:46,310
story is simple if you know my secret of

00:16:44,630 --> 00:16:47,590
replication it's clear what's happening

00:16:46,310 --> 00:16:50,960
with the log file it's

00:16:47,590 --> 00:16:53,870
verbatim copied but by a replicator

00:16:50,960 --> 00:16:55,790
thread to the secondary citing kind of

00:16:53,870 --> 00:16:58,060
multiple secondaries in parallel of

00:16:55,790 --> 00:16:58,060
course

00:16:58,280 --> 00:17:03,770
so the files are identical in case your

00:17:01,040 --> 00:17:05,990
network is down you can copy it to a new

00:17:03,770 --> 00:17:07,699
speed stick and manually transfer it to

00:17:05,990 --> 00:17:10,160
the other side potentially possible so

00:17:07,699 --> 00:17:12,440
it's exactly the same data you can md5

00:17:10,160 --> 00:17:15,860
checksum it in case you are mistrusting

00:17:12,440 --> 00:17:17,720
it and so on and the last sorry

00:17:15,860 --> 00:17:21,560
the last thing pushed to their own

00:17:17,720 --> 00:17:23,470
bottom it's an applicator which is

00:17:21,560 --> 00:17:27,620
applying it to the secondary mirror

00:17:23,470 --> 00:17:29,720
exactly in the original Ora so this is

00:17:27,620 --> 00:17:33,320
very similar to my second replication

00:17:29,720 --> 00:17:37,370
any questions for this hopefully it's

00:17:33,320 --> 00:17:39,920
clear so current status of Mars it's on

00:17:37,370 --> 00:17:42,470
github it's on GPL obviously because

00:17:39,920 --> 00:17:45,140
it's chronal module and I have very

00:17:42,470 --> 00:17:48,310
thorough documentation for it there are

00:17:45,140 --> 00:17:51,230
two important manuals the first one is

00:17:48,310 --> 00:17:53,420
Mouse architectural guide which is an

00:17:51,230 --> 00:17:55,910
intro for also for manager internet from

00:17:53,420 --> 00:17:58,790
angel my boss has tweaked me

00:17:55,910 --> 00:18:01,420
and has coached me with many many to

00:17:58,790 --> 00:18:04,100
speak and I've tried to address also

00:18:01,420 --> 00:18:06,500
managers in this guide but other system

00:18:04,100 --> 00:18:09,170
architects and for he was a chordal

00:18:06,500 --> 00:18:14,830
hacker as carol heckles it's hopefully

00:18:09,170 --> 00:18:18,530
also an exciting reading it has I think

00:18:14,830 --> 00:18:22,850
130 pages it's almost like a PhD thesis

00:18:18,530 --> 00:18:25,190
no not yet but in a similar way and it

00:18:22,850 --> 00:18:28,070
play explains a lot of things around

00:18:25,190 --> 00:18:30,530
storage in general and about

00:18:28,070 --> 00:18:32,900
architectures for example I have a

00:18:30,530 --> 00:18:35,330
mathematical proof that big cluster

00:18:32,900 --> 00:18:39,320
architectures are worse than this Mouse

00:18:35,330 --> 00:18:43,220
shrouding architectures in general so

00:18:39,320 --> 00:18:45,860
the mouse and drbg sharing model used at

00:18:43,220 --> 00:18:47,170
one and one is probably the most

00:18:45,860 --> 00:18:49,100
reliable

00:18:47,170 --> 00:18:51,970
architecture architectural level

00:18:49,100 --> 00:18:53,900
architectural reliably not not

00:18:51,970 --> 00:18:57,950
implementation of course converse on it

00:18:53,900 --> 00:18:59,960
but the model as such well and for

00:18:57,950 --> 00:19:01,730
admins there's a user manual with

00:18:59,960 --> 00:19:04,250
step-by-step instructions you can also

00:19:01,730 --> 00:19:06,470
check it if you like and there's the

00:19:04,250 --> 00:19:08,780
performance thing I mentioned it's

00:19:06,470 --> 00:19:10,960
productive since a few years it's the

00:19:08,780 --> 00:19:13,720
backbone of our geo redundancy

00:19:10,960 --> 00:19:17,890
Petrus has been publicly advertised for

00:19:13,720 --> 00:19:20,620
years now and now to the corner part at

00:19:17,890 --> 00:19:23,169
the moment due to my downstream work

00:19:20,620 --> 00:19:25,720
situation I'm only supporting LTS

00:19:23,169 --> 00:19:28,779
Crohn's at the moment because that's one

00:19:25,720 --> 00:19:31,120
of the problems I have because I have no

00:19:28,779 --> 00:19:33,669
time for getting to the latest

00:19:31,120 --> 00:19:35,950
development corner at the moment so

00:19:33,669 --> 00:19:38,770
these are LTS curtains friedo 2 is our

00:19:35,950 --> 00:19:42,130
end-of-life now but just managed last

00:19:38,770 --> 00:19:44,230
month to get it to 4.14 and of course

00:19:42,130 --> 00:19:46,330
more work is needed because I have to

00:19:44,230 --> 00:19:48,279
maintain the Cartesian product of most

00:19:46,330 --> 00:19:51,059
versions and kernel versions in some

00:19:48,279 --> 00:19:55,299
sense and this requires a lot of testing

00:19:51,059 --> 00:19:57,549
I have tried to be as less intrusive to

00:19:55,299 --> 00:19:59,890
the coral as possible there's one Pripet

00:19:57,549 --> 00:20:01,779
which changes the corner slightly it's

00:19:59,890 --> 00:20:03,490
only a few export simple statements

00:20:01,779 --> 00:20:05,919
because I'm using some interfaces which

00:20:03,490 --> 00:20:07,630
are not yet exported that's all which is

00:20:05,919 --> 00:20:09,399
intrusive into the curl the rest is

00:20:07,630 --> 00:20:12,490
completely independent from the kernel

00:20:09,399 --> 00:20:15,130
so when I will go upstream hopefully

00:20:12,490 --> 00:20:16,990
there is no impact or almost practically

00:20:15,130 --> 00:20:19,779
no impact on to the rest of the color

00:20:16,990 --> 00:20:21,880
exactly not exactly several but almost

00:20:19,779 --> 00:20:25,450
always it's only pure export surplus and

00:20:21,880 --> 00:20:26,860
that's all so this is a strategy for me

00:20:25,450 --> 00:20:30,630
but otherwise I couldn't survive this

00:20:26,860 --> 00:20:33,549
and it would be unmaintainable of course

00:20:30,630 --> 00:20:36,429
well and inside of norsu will explain

00:20:33,549 --> 00:20:38,500
you some some highlights how I do the

00:20:36,429 --> 00:20:42,850
backward compatibility our seedlings are

00:20:38,500 --> 00:20:45,190
used to upgrade procedure as follows you

00:20:42,850 --> 00:20:47,110
have two primary data center where you

00:20:45,190 --> 00:20:49,510
typically are running the services and

00:20:47,110 --> 00:20:51,429
at the secondary data center side you

00:20:49,510 --> 00:20:52,240
are deploying a new Mouse portion or a

00:20:51,429 --> 00:20:55,600
new coral

00:20:52,240 --> 00:20:58,000
including Mouse portion so and for some

00:20:55,600 --> 00:21:00,669
days or even for our vehicle longer both

00:20:58,000 --> 00:21:02,409
Martians mouth persons must be able to

00:21:00,669 --> 00:21:05,500
communicate even the even if there's a

00:21:02,409 --> 00:21:08,200
new feature in the new version ok and

00:21:05,500 --> 00:21:11,529
then after a while is hand over to the

00:21:08,200 --> 00:21:13,570
other side and even days or weeks later

00:21:11,529 --> 00:21:16,960
and I will update the old tech old

00:21:13,570 --> 00:21:18,929
primary side also and this is the

00:21:16,960 --> 00:21:23,490
procedure they are used to for years and

00:21:18,929 --> 00:21:25,860
I know of no break of any non-breaking

00:21:23,490 --> 00:21:30,090
change there was no break in the

00:21:25,860 --> 00:21:33,059
meantime current density we have around

00:21:30,090 --> 00:21:36,500
seven to ten logical volumes and one

00:21:33,059 --> 00:21:41,399
logical volumes is one Aleksey container

00:21:36,500 --> 00:21:43,529
and interestingly the football project

00:21:41,399 --> 00:21:48,179
which has increased that density has

00:21:43,529 --> 00:21:51,059
leads to half of TCO so I think with

00:21:48,179 --> 00:21:52,890
respect to TCO is unbeatable so I know

00:21:51,059 --> 00:21:56,159
of no other storage system it because

00:21:52,890 --> 00:21:56,789
our machines are pizza boxes with local

00:21:56,159 --> 00:21:58,980
storage

00:21:56,789 --> 00:22:00,600
there's no cheaper way we have no

00:21:58,980 --> 00:22:03,600
storage network at all but only

00:22:00,600 --> 00:22:06,029
replication networks which need not be

00:22:03,600 --> 00:22:06,510
dimension for real-time IO that's the

00:22:06,029 --> 00:22:08,309
point

00:22:06,510 --> 00:22:10,940
so it's much cheaper than anything else

00:22:08,309 --> 00:22:12,090
on the market self built storage

00:22:10,940 --> 00:22:14,760
Southfield

00:22:12,090 --> 00:22:18,029
state software stack and standard

00:22:14,760 --> 00:22:18,779
hardware in this case Dell servers as

00:22:18,029 --> 00:22:21,600
you can

00:22:18,779 --> 00:22:25,169
standard server and that's it with some

00:22:21,600 --> 00:22:28,020
local hardware based rages okay if BBO

00:22:25,169 --> 00:22:29,970
BBO is important for performance now

00:22:28,020 --> 00:22:31,649
your circle hackers are probably

00:22:29,970 --> 00:22:33,720
interested in the differences

00:22:31,649 --> 00:22:36,480
architectural differences near body is

00:22:33,720 --> 00:22:38,610
probably known to you it's structured

00:22:36,480 --> 00:22:41,070
like a classical device driver you know

00:22:38,610 --> 00:22:43,409
the activity look at it map data and

00:22:41,070 --> 00:22:45,210
metadata is sent on all the same TCP

00:22:43,409 --> 00:22:49,200
connection and the model is a strict

00:22:45,210 --> 00:22:52,380
consistency model for crossover cables

00:22:49,200 --> 00:22:53,970
Mars is very different it's instance

00:22:52,380 --> 00:22:56,190
oriented brick architecture I will

00:22:53,970 --> 00:22:59,250
explain it in the next slides what it

00:22:56,190 --> 00:23:02,100
means then the data structures are not a

00:22:59,250 --> 00:23:04,169
global ones by concept but each is

00:23:02,100 --> 00:23:09,649
inside of quick search in a black box

00:23:04,169 --> 00:23:09,649
and the wiring between the bricks is

00:23:10,100 --> 00:23:14,340
irreplaceable with clients Arabic so you

00:23:12,750 --> 00:23:16,279
can make a distributed system also

00:23:14,340 --> 00:23:20,970
fitted any potentially at any place

00:23:16,279 --> 00:23:24,059
wherever you want to have to distribute

00:23:20,970 --> 00:23:26,299
it it's a strict separation by concept

00:23:24,059 --> 00:23:28,260
of data versus metadata and dearth

00:23:26,299 --> 00:23:30,230
networking model it's not strictly

00:23:28,260 --> 00:23:32,850
consistent but eventually consistent

00:23:30,230 --> 00:23:34,590
this is never necessary for

00:23:32,850 --> 00:23:37,330
long-distance replication

00:23:34,590 --> 00:23:40,420
so then the next question could arise

00:23:37,330 --> 00:23:43,450
why did I use the device member well

00:23:40,420 --> 00:23:45,490
there's an explanation here device

00:23:43,450 --> 00:23:48,370
mapper is firmly bound to struct biome

00:23:45,490 --> 00:23:51,580
and here in the next slide you will see

00:23:48,370 --> 00:23:54,390
that the transaction look needs odd

00:23:51,580 --> 00:23:56,920
addresses on the device on the file

00:23:54,390 --> 00:24:00,130
because otherwise check something and

00:23:56,920 --> 00:24:03,400
compression and other features would be

00:24:00,130 --> 00:24:07,210
a little bit complicated so the struct

00:24:03,400 --> 00:24:09,370
MOF object I'm using in Mouse it's a

00:24:07,210 --> 00:24:11,350
little bit similar to struck bio but

00:24:09,370 --> 00:24:13,420
it's for both block and filer or it's

00:24:11,350 --> 00:24:16,990
just not the restrictions of sector

00:24:13,420 --> 00:24:18,790
alignment by o-ring is different here we

00:24:16,990 --> 00:24:21,520
have a tree structure and mouse we have

00:24:18,790 --> 00:24:25,360
an almost arbitrary graph structure it

00:24:21,520 --> 00:24:27,310
kind of but no cycles of course but so

00:24:25,360 --> 00:24:28,990
it's more general in this respect and an

00:24:27,310 --> 00:24:32,020
important feature is the dynamic

00:24:28,990 --> 00:24:33,580
rewiring during the runtime wider IO is

00:24:32,020 --> 00:24:37,720
flying and this is needed for

00:24:33,580 --> 00:24:40,060
transaction lock rotate operation

00:24:37,720 --> 00:24:42,700
because for a very short time the old

00:24:40,060 --> 00:24:45,580
transaction log is not yet fully written

00:24:42,700 --> 00:24:48,040
the new one is already started so flying

00:24:45,580 --> 00:24:50,800
i/o requests in parallel to two files at

00:24:48,040 --> 00:24:53,230
the same time and this is a must feature

00:24:50,800 --> 00:24:54,910
otherwise it won't work and as far as I

00:24:53,230 --> 00:24:57,610
know the device mapper wouldn't support

00:24:54,910 --> 00:25:00,390
let's at least not easily the next

00:24:57,610 --> 00:25:02,890
architectural differences the interfaces

00:25:00,390 --> 00:25:04,960
here in this generic brick

00:25:02,890 --> 00:25:07,180
infrastructure you could use it for

00:25:04,960 --> 00:25:08,710
future personalities for different

00:25:07,180 --> 00:25:10,510
things not only block layer for example

00:25:08,710 --> 00:25:12,580
you could use it also the file system

00:25:10,510 --> 00:25:14,800
there so if it goes kernel upstream you

00:25:12,580 --> 00:25:18,190
can use it for different types of

00:25:14,800 --> 00:25:20,760
interfaces and these interface types are

00:25:18,190 --> 00:25:23,620
potentially object object oriented so

00:25:20,760 --> 00:25:25,390
inheritance and the bricks themselves

00:25:23,620 --> 00:25:29,320
has an aspect oriented designer will

00:25:25,390 --> 00:25:33,190
explain in the next slide so this is the

00:25:29,320 --> 00:25:35,380
heart of my presentation what's about

00:25:33,190 --> 00:25:38,500
bricks objects and apps expects this is

00:25:35,380 --> 00:25:40,270
an example we start at the top here Deaf

00:25:38,500 --> 00:25:44,050
Mouse my data is this virtual block

00:25:40,270 --> 00:25:45,960
device and of course it's struck by aura

00:25:44,050 --> 00:25:49,110
as always in the coronal

00:25:45,960 --> 00:25:51,629
and it's now this mouse interface brick

00:25:49,110 --> 00:25:53,970
is translating to between the external

00:25:51,629 --> 00:25:56,789
struck bio which is arriving here and

00:25:53,970 --> 00:26:00,480
makes an emirate object out of it or

00:25:56,789 --> 00:26:02,940
several ones depending on well you have

00:26:00,480 --> 00:26:04,860
the biomech substructure and for each

00:26:02,940 --> 00:26:06,659
biomech or whatever it's mulching

00:26:04,860 --> 00:26:09,149
something but it's not a one-to-one

00:26:06,659 --> 00:26:13,139
relationship between bio and the MRF

00:26:09,149 --> 00:26:15,600
object then automatically if aspect is

00:26:13,139 --> 00:26:18,419
attached to it which carries some data

00:26:15,600 --> 00:26:22,649
which is specific to this prick instance

00:26:18,419 --> 00:26:25,350
here mass if okay interface and if it's

00:26:22,649 --> 00:26:27,570
passes down the spiraling this is an

00:26:25,350 --> 00:26:30,210
input this is an output of the next

00:26:27,570 --> 00:26:32,279
break its vilde then it goes to the

00:26:30,210 --> 00:26:34,710
transaction logon and automatically it

00:26:32,279 --> 00:26:36,809
runs actually longer aspectus attach

00:26:34,710 --> 00:26:41,100
where some state information can be kept

00:26:36,809 --> 00:26:42,929
and this attachment is dynamic depending

00:26:41,100 --> 00:26:45,690
on which brick you are actually entering

00:26:42,929 --> 00:26:47,730
so the transaction logger might forward

00:26:45,690 --> 00:26:49,830
it to this input or to the other input

00:26:47,730 --> 00:26:52,429
depending on what's going on and read

00:26:49,830 --> 00:26:55,950
request is typically forwarded directly

00:26:52,429 --> 00:26:57,419
to to the block device even though

00:26:55,950 --> 00:27:00,210
there's no configuration conflicting

00:26:57,419 --> 00:27:02,450
right in the memory buffer well if it's

00:27:00,210 --> 00:27:05,369
written to the transaction log you have

00:27:02,450 --> 00:27:07,230
to copy the data and to checksum it and

00:27:05,369 --> 00:27:08,999
several our operations into the

00:27:07,230 --> 00:27:12,299
transaction lock and then you have a

00:27:08,999 --> 00:27:14,249
transaction lock request potentially the

00:27:12,299 --> 00:27:16,830
same MRF could be reused but in this

00:27:14,249 --> 00:27:19,830
case of course I'm I'm using um rafts

00:27:16,830 --> 00:27:22,769
for the transaction log and upon the

00:27:19,830 --> 00:27:25,679
completion path then it's signaled here

00:27:22,769 --> 00:27:28,440
and then you have the right back which

00:27:25,679 --> 00:27:31,470
can even be done with the original MRF

00:27:28,440 --> 00:27:33,600
so the DIA location is not at the same

00:27:31,470 --> 00:27:35,480
time not need not need not be at the

00:27:33,600 --> 00:27:38,279
same time when the completion can occur

00:27:35,480 --> 00:27:40,350
so this is the basic idea these are also

00:27:38,279 --> 00:27:42,269
adapters this adapts obviously to the

00:27:40,350 --> 00:27:46,850
bio struct of the underlying block

00:27:42,269 --> 00:27:50,009
device and here it's I'm using the a i/o

00:27:46,850 --> 00:27:52,169
it's a user space concept in it has some

00:27:50,009 --> 00:27:53,970
drawback because it's table based and

00:27:52,169 --> 00:27:56,580
this is not no good idea for Codel but

00:27:53,970 --> 00:27:58,440
it's a downstream developer I don't want

00:27:56,580 --> 00:27:59,910
to directly access the page cache which

00:27:58,440 --> 00:28:02,790
would be possible if I would

00:27:59,910 --> 00:28:05,550
be upstream of course it would be much

00:28:02,790 --> 00:28:08,130
better using the die way direct IO

00:28:05,550 --> 00:28:10,440
infrastructure even even poorly even

00:28:08,130 --> 00:28:12,900
better but there are no export symbols

00:28:10,440 --> 00:28:15,900
at the moment and this was my method of

00:28:12,900 --> 00:28:18,060
abstraction this of course not not the

00:28:15,900 --> 00:28:20,250
best one but current current status in

00:28:18,060 --> 00:28:21,720
order to be to not intrusive to the

00:28:20,250 --> 00:28:24,360
kernel that's the idea here

00:28:21,720 --> 00:28:29,940
now the next highlight client-server

00:28:24,360 --> 00:28:32,850
place so there's an here the data is

00:28:29,940 --> 00:28:34,650
arriving you have a client and now the

00:28:32,850 --> 00:28:36,630
data is converted to network trans

00:28:34,650 --> 00:28:38,400
participe socket and the so called

00:28:36,630 --> 00:28:40,230
socket bundling features mean there can

00:28:38,400 --> 00:28:42,990
be several in parallel this load

00:28:40,230 --> 00:28:45,570
balancing between them like a nice cozy

00:28:42,990 --> 00:28:48,300
or similar the default core default is

00:28:45,570 --> 00:28:51,360
to parallel TCP connections the lessons

00:28:48,300 --> 00:28:53,310
learned from the DRD problems and of

00:28:51,360 --> 00:28:55,350
course you can scale it up current

00:28:53,310 --> 00:28:58,350
maximum is 8 but compile-time constant

00:28:55,350 --> 00:29:01,860
or if you have a very slow Network you

00:28:58,350 --> 00:29:03,680
can of course use only TCP connection of

00:29:01,860 --> 00:29:06,570
course then the performance will suffer

00:29:03,680 --> 00:29:08,040
so in future of course you can implement

00:29:06,570 --> 00:29:09,900
for other transport because it's

00:29:08,040 --> 00:29:11,070
obstructed away the transport doesn't

00:29:09,900 --> 00:29:13,470
matter here

00:29:11,070 --> 00:29:16,470
it's a low-level thing and what's

00:29:13,470 --> 00:29:19,020
important in contrast to dr BD you don't

00:29:16,470 --> 00:29:20,730
have a separate reconnect operation so

00:29:19,020 --> 00:29:24,120
if the network is breaking down of

00:29:20,730 --> 00:29:25,620
course the TCP connections will stop

00:29:24,120 --> 00:29:28,170
working somewhere and of course when

00:29:25,620 --> 00:29:30,750
order even automatically I use some

00:29:28,170 --> 00:29:33,090
socket options in order to keep a live

00:29:30,750 --> 00:29:36,030
options in order to automatically manage

00:29:33,090 --> 00:29:37,710
that problem and in case the network is

00:29:36,030 --> 00:29:40,110
coming up again it will automatically

00:29:37,710 --> 00:29:42,990
reconnect transparently so the

00:29:40,110 --> 00:29:46,650
networking distributed memory model is

00:29:42,990 --> 00:29:48,150
the distributed model is a message may

00:29:46,650 --> 00:29:51,690
take an arbitrary time it may be very

00:29:48,150 --> 00:29:55,140
fast may take 5 minutes or whatever so

00:29:51,690 --> 00:29:58,770
this is transparent here any questions

00:29:55,140 --> 00:30:01,110
for this well then the next interesting

00:29:58,770 --> 00:30:05,130
thing was unusual is the so-called

00:30:01,110 --> 00:30:07,800
sibling dream in Mars metadata means for

00:30:05,130 --> 00:30:11,760
example the configuration data and other

00:30:07,800 --> 00:30:12,490
things and in 2010 when I implemented it

00:30:11,760 --> 00:30:16,780
I was low

00:30:12,490 --> 00:30:18,970
for a persistent key-value store and the

00:30:16,780 --> 00:30:21,910
problem was I could implement it myself

00:30:18,970 --> 00:30:23,710
in the crawl space or not I could also

00:30:21,910 --> 00:30:25,270
have implemented in userspace but

00:30:23,710 --> 00:30:27,370
implementing in userspace would have

00:30:25,270 --> 00:30:29,590
been a political issue in one and one

00:30:27,370 --> 00:30:31,870
because then the strategy of the company

00:30:29,590 --> 00:30:35,650
was it has to be implemented in Java

00:30:31,870 --> 00:30:37,240
. because this was the company's

00:30:35,650 --> 00:30:40,180
strategy at that time unfortunately I

00:30:37,240 --> 00:30:43,510
resisted to that because the team in the

00:30:40,180 --> 00:30:46,030
Java teams and no longer existent today

00:30:43,510 --> 00:30:48,940
at all this team doesn't exist anymore

00:30:46,030 --> 00:30:51,120
even the euro space tool Mouse REM would

00:30:48,940 --> 00:30:56,680
have been written in Java then and

00:30:51,120 --> 00:30:58,720
instead it's a Perl script so well I got

00:30:56,680 --> 00:31:00,580
an exception of course kernel-space but

00:30:58,720 --> 00:31:02,920
at that time it was politically

00:31:00,580 --> 00:31:04,870
impossible to do it in a different way

00:31:02,920 --> 00:31:08,380
that's the reason by several things on

00:31:04,870 --> 00:31:10,660
kernel space and not in user space also

00:31:08,380 --> 00:31:13,900
question could arise but well it's

00:31:10,660 --> 00:31:17,310
history simply I simply didn't get the

00:31:13,900 --> 00:31:19,750
time to implement a known kernel space

00:31:17,310 --> 00:31:22,960
process memory and that's the reason why

00:31:19,750 --> 00:31:25,750
sibling 3 is a misuse of siblings for

00:31:22,960 --> 00:31:26,770
key value store it's an example in the

00:31:25,750 --> 00:31:29,710
last two lines

00:31:26,770 --> 00:31:31,630
the idea is replicated hole 3 throughout

00:31:29,710 --> 00:31:34,150
the cluster soils potential it is

00:31:31,630 --> 00:31:37,360
identical on each host on each custom

00:31:34,150 --> 00:31:39,880
member the same tree you could even

00:31:37,360 --> 00:31:41,640
transport it by arousing if necessary at

00:31:39,880 --> 00:31:44,850
least in theory

00:31:41,640 --> 00:31:47,860
and the idea of name closures can be

00:31:44,850 --> 00:31:49,240
avoided by the origin host name who has

00:31:47,860 --> 00:31:51,040
created the sibling or who is

00:31:49,240 --> 00:31:53,350
responsible for this evening who is

00:31:51,040 --> 00:31:55,930
updating this sibling is encoded in the

00:31:53,350 --> 00:31:58,360
path and here we have two examples the

00:31:55,930 --> 00:32:00,880
first is an unfair sibling

00:31:58,360 --> 00:32:02,940
this is the designated primary host it

00:32:00,880 --> 00:32:06,250
points says host are should be primarily

00:32:02,940 --> 00:32:09,520
hosts a should be primary and this

00:32:06,250 --> 00:32:11,950
sibling is not per host specific because

00:32:09,520 --> 00:32:15,130
it's a global as pepper sauce global

00:32:11,950 --> 00:32:15,990
variable it means host a should be the

00:32:15,130 --> 00:32:18,330
primary

00:32:15,990 --> 00:32:20,520
and the actual primary or the actual

00:32:18,330 --> 00:32:22,860
primaries there may be several primaries

00:32:20,520 --> 00:32:24,720
in the split-brain situation so several

00:32:22,860 --> 00:32:27,480
problems may be actually didn't know

00:32:24,720 --> 00:32:29,429
each other network outage and it can

00:32:27,480 --> 00:32:33,150
happen that several ones actually

00:32:29,429 --> 00:32:35,910
primary and the distinction is by the

00:32:33,150 --> 00:32:37,530
host name in this case it's even in the

00:32:35,910 --> 00:32:39,570
directory name so I have a directory

00:32:37,530 --> 00:32:45,090
which is per host and then has several

00:32:39,570 --> 00:32:48,000
sub siblings in that for scalability ok

00:32:45,090 --> 00:32:49,980
and the aim time is corresponding to the

00:32:48,000 --> 00:32:51,750
temporal timestamp and then for protocol

00:32:49,980 --> 00:32:54,090
ampere clock means that the last time

00:32:51,750 --> 00:32:55,380
step will always win so it's the

00:32:54,090 --> 00:32:57,840
consistency model is eventually

00:32:55,380 --> 00:33:00,300
consistent and the lambreaux time tells

00:32:57,840 --> 00:33:02,610
you who is the winner of the race

00:33:00,300 --> 00:33:05,400
conditions which naturally occur in any

00:33:02,610 --> 00:33:07,679
this long-distance distributed system so

00:33:05,400 --> 00:33:09,540
it's raised compensation via Lambert

00:33:07,679 --> 00:33:15,510
clock that's the basic idea

00:33:09,540 --> 00:33:17,670
any questions folders ok then mass

00:33:15,510 --> 00:33:19,320
future plans we can shorten this if you

00:33:17,670 --> 00:33:21,630
like if you have questions you can ask

00:33:19,320 --> 00:33:23,820
this is what I'm currently working about

00:33:21,630 --> 00:33:26,880
so I have new checksumming Agri movement

00:33:23,820 --> 00:33:32,340
the md5 is very slow the traditional one

00:33:26,880 --> 00:33:34,620
used in Mars at the crc32 sea is much

00:33:32,340 --> 00:33:36,270
faster by a factor of 10 it's already in

00:33:34,620 --> 00:33:40,460
the Corolla 2 to networking of course

00:33:36,270 --> 00:33:42,500
and look for compression and

00:33:40,460 --> 00:33:46,460
independently from the transport

00:33:42,500 --> 00:33:49,860
compression can help for some use cases

00:33:46,460 --> 00:33:51,870
and in order to implement all of this to

00:33:49,860 --> 00:33:56,160
the actual log file format is extended

00:33:51,870 --> 00:33:59,790
and I have a special data structure it

00:33:56,160 --> 00:34:02,429
is called struck meter it's describing

00:33:59,790 --> 00:34:04,710
an arbitrary C structure in the coral

00:34:02,429 --> 00:34:07,500
and it's used for marshaling and de

00:34:04,710 --> 00:34:09,770
marshaling over the network so if I add

00:34:07,500 --> 00:34:12,810
a new field to array a to to a struct

00:34:09,770 --> 00:34:14,460
then it's by default if it's not present

00:34:12,810 --> 00:34:16,109
in the old version so can have

00:34:14,460 --> 00:34:18,389
intermixed operation of all the new

00:34:16,109 --> 00:34:20,520
persons all the client versions nuke a

00:34:18,389 --> 00:34:23,159
server version or vice versa

00:34:20,520 --> 00:34:26,490
it's automatically detected that there's

00:34:23,159 --> 00:34:28,800
a new field and it's left empty if the

00:34:26,490 --> 00:34:29,550
other side doesn't have it and otherwise

00:34:28,800 --> 00:34:31,500
of course it's

00:34:29,550 --> 00:34:33,870
hope it over so it's ensuring

00:34:31,500 --> 00:34:35,880
compatibility even if the data structure

00:34:33,870 --> 00:34:39,260
and the offsets in the record have

00:34:35,880 --> 00:34:43,290
changed and the structures have changed

00:34:39,260 --> 00:34:45,270
okay and of course the next slide or the

00:34:43,290 --> 00:34:48,929
last slide of my talk is about

00:34:45,270 --> 00:34:51,060
cuddle-up streaming so how to get it

00:34:48,929 --> 00:34:53,100
upstream here I see some problems

00:34:51,060 --> 00:34:55,470
because I'm overloaded with more than

00:34:53,100 --> 00:34:58,560
one percent I'm the only one developer

00:34:55,470 --> 00:35:00,870
for downstream and I'm already filled up

00:34:58,560 --> 00:35:04,050
to more than 100% in my ordinary work

00:35:00,870 --> 00:35:05,880
you and some of Mars development or much

00:35:04,050 --> 00:35:08,850
of it is even in my spare time already

00:35:05,880 --> 00:35:12,930
so spare time is not the solution to

00:35:08,850 --> 00:35:16,230
upstream internal up streaming and have

00:35:12,930 --> 00:35:18,660
some suggestions here but probably

00:35:16,230 --> 00:35:21,030
there's some more and if I could get

00:35:18,660 --> 00:35:25,710
some feedback from you some help would

00:35:21,030 --> 00:35:28,020
HIGHLY appreciate it the first idea is

00:35:25,710 --> 00:35:29,940
before going upstream the out of three

00:35:28,020 --> 00:35:32,520
version could be supported by some

00:35:29,940 --> 00:35:34,830
upstream Hagar's best this is señor and

00:35:32,520 --> 00:35:37,110
also for coaching me because my

00:35:34,830 --> 00:35:39,300
experience with upstream is 20 years old

00:35:37,110 --> 00:35:42,720
and much has changed it's not only kids

00:35:39,300 --> 00:35:44,880
but the procedures the habits and many

00:35:42,720 --> 00:35:49,740
things are different now from the old

00:35:44,880 --> 00:35:51,990
good ol times so this is probably the

00:35:49,740 --> 00:35:54,540
solutions are non-exclusive here so this

00:35:51,990 --> 00:35:56,870
would be I think at least very helpful

00:35:54,540 --> 00:36:01,080
for me get some help from the community

00:35:56,870 --> 00:36:03,120
and of course I got some first response

00:36:01,080 --> 00:36:05,010
on years ago when I tried first

00:36:03,120 --> 00:36:07,260
I should replace the sibling first by

00:36:05,010 --> 00:36:09,180
some pedal data structure of course it's

00:36:07,260 --> 00:36:12,870
a good idea because scalability will be

00:36:09,180 --> 00:36:15,900
improved but it cost some time and I

00:36:12,870 --> 00:36:18,930
have to check the user base the orzo

00:36:15,900 --> 00:36:20,880
space basis expecting and it's backwards

00:36:18,930 --> 00:36:24,000
compatible so I need at least a my

00:36:20,880 --> 00:36:26,730
creation script from the old data format

00:36:24,000 --> 00:36:28,920
to the new one best would be even if I

00:36:26,730 --> 00:36:31,740
had the old version 2 versus running in

00:36:28,920 --> 00:36:33,840
parallel and checking which guide or

00:36:31,740 --> 00:36:36,090
server side has which version and using

00:36:33,840 --> 00:36:38,160
the old data format in parallel to the

00:36:36,090 --> 00:36:40,560
new one for some intermediate time which

00:36:38,160 --> 00:36:41,150
is of course much more organ needs some

00:36:40,560 --> 00:36:44,810
third

00:36:41,150 --> 00:36:46,580
and so on some solution is needed here I

00:36:44,810 --> 00:36:48,050
cannot ignore the he was on base the

00:36:46,580 --> 00:36:50,210
petabytes of data and I know that it's

00:36:48,050 --> 00:36:52,670
not only used in Germany it's also used

00:36:50,210 --> 00:36:54,290
in Australia here and have some feedback

00:36:52,670 --> 00:36:57,140
from some people for ended for

00:36:54,290 --> 00:37:00,860
enterprise critical workloads so I can I

00:36:57,140 --> 00:37:01,610
have to this news or base cannot be left

00:37:00,860 --> 00:37:05,960
in the rain

00:37:01,610 --> 00:37:07,910
I can only analyse them okay then our

00:37:05,960 --> 00:37:09,740
solution would be a Schrute gather fruit

00:37:07,910 --> 00:37:12,170
of downstream work that means I should

00:37:09,740 --> 00:37:14,060
change my employer or somewhere I have

00:37:12,170 --> 00:37:16,850
tried in one in one rather it's possible

00:37:14,060 --> 00:37:19,610
but there's no interested I've asked my

00:37:16,850 --> 00:37:23,240
boss and it's not his personal opinion I

00:37:19,610 --> 00:37:24,860
know from him but there's no priority

00:37:23,240 --> 00:37:27,440
for it I came to wait but there's no

00:37:24,860 --> 00:37:29,000
priority and this translates to I have

00:37:27,440 --> 00:37:31,520
to do it in my spare time and this is

00:37:29,000 --> 00:37:34,930
just not the way to go alone reading the

00:37:31,520 --> 00:37:38,570
elk he made mailings and filtering all

00:37:34,930 --> 00:37:41,630
the postings is almost a full-time job

00:37:38,570 --> 00:37:43,910
so I came to both upstream and

00:37:41,630 --> 00:37:46,760
downstream at the same time so hopefully

00:37:43,910 --> 00:37:51,700
there's some sponsor who is willing to

00:37:46,760 --> 00:37:56,140
use Mars or other distro of course for

00:37:51,700 --> 00:37:59,750
in the core business so this would be a

00:37:56,140 --> 00:38:02,120
possible solution and I think Mars is

00:37:59,750 --> 00:38:04,700
already proved to be ready for

00:38:02,120 --> 00:38:06,560
enterprise critical workloads and it

00:38:04,700 --> 00:38:08,800
also will be the case when it's upstream

00:38:06,560 --> 00:38:13,130
of course so this would be the goal

00:38:08,800 --> 00:38:14,900
keeping this SLA this reliability and of

00:38:13,130 --> 00:38:17,090
course improving things and of course

00:38:14,900 --> 00:38:18,920
bringing some things upstream but

00:38:17,090 --> 00:38:21,470
hopefully it's also of interest for

00:38:18,920 --> 00:38:23,030
other kernel hackers like the instance

00:38:21,470 --> 00:38:25,940
oriented brick infrastructure their

00:38:23,030 --> 00:38:28,670
objects aspects and so on and struck

00:38:25,940 --> 00:38:30,830
metaphor marshalling the marshalling all

00:38:28,670 --> 00:38:33,890
is hopefully usable in other parts of

00:38:30,830 --> 00:38:37,370
the kernel it because it's generic so

00:38:33,890 --> 00:38:39,920
this is I think what I can offer to the

00:38:37,370 --> 00:38:43,700
community of course the community should

00:38:39,920 --> 00:38:46,310
also someone have some decision whether

00:38:43,700 --> 00:38:48,920
to accept or not but it was willing to

00:38:46,310 --> 00:38:49,700
accept it and they need some work I am

00:38:48,920 --> 00:38:52,520
willing to do

00:38:49,700 --> 00:38:54,650
this and we need to find a setup for

00:38:52,520 --> 00:38:56,530
this so we have a few minutes left for

00:38:54,650 --> 00:39:00,950
discussion is it true

00:38:56,530 --> 00:39:04,090
Andrew yes you will moderate it please

00:39:00,950 --> 00:39:04,090
[Applause]

00:39:10,250 --> 00:39:13,420
what question here

00:39:19,690 --> 00:39:27,880
thank you for the talk I have a question

00:39:23,580 --> 00:39:31,710
what happens with mass if slave is much

00:39:27,880 --> 00:39:34,420
slower than master so the safe lock

00:39:31,710 --> 00:39:39,040
increases in size and at the point when

00:39:34,420 --> 00:39:43,450
we have to migrate for master to safe we

00:39:39,040 --> 00:39:46,540
this wave was out of date so in I mean

00:39:43,450 --> 00:39:50,050
in my screen what we have a special

00:39:46,540 --> 00:39:55,050
solution for those waves like a sea

00:39:50,050 --> 00:39:59,170
mechanical applications when so slaves

00:39:55,050 --> 00:40:02,110
sends to the master how fights for from

00:39:59,170 --> 00:40:04,870
the current point I don't understand oh

00:40:02,110 --> 00:40:07,450
oh I don't understand your question

00:40:04,870 --> 00:40:09,130
fully but Mouse is very different in

00:40:07,450 --> 00:40:10,570
architecture in the our body in the our

00:40:09,130 --> 00:40:13,150
video after the push principle the

00:40:10,570 --> 00:40:15,850
primary is responsible for the state of

00:40:13,150 --> 00:40:18,640
secondary mouse is different the primary

00:40:15,850 --> 00:40:20,500
is only responsible for itself and that

00:40:18,640 --> 00:40:23,200
is the secondary is responsible for

00:40:20,500 --> 00:40:26,260
fetching the data and that means you

00:40:23,200 --> 00:40:27,940
have decoupled the responsibility of

00:40:26,260 --> 00:40:30,060
primary versus secondary

00:40:27,940 --> 00:40:34,270
does it answer your question or not

00:40:30,060 --> 00:40:39,280
Lobos we the master is much faster than

00:40:34,270 --> 00:40:41,920
slave a lot of data and self ok ok so

00:40:39,280 --> 00:40:44,080
you are talking about the data rate the

00:40:41,920 --> 00:40:46,810
the right rate is much higher than the

00:40:44,080 --> 00:40:49,930
network transpose of course it average

00:40:46,810 --> 00:40:52,390
network network transports must be good

00:40:49,930 --> 00:40:54,040
enough otherwise it will run full and

00:40:52,390 --> 00:40:56,680
then the so called emergency mode will

00:40:54,040 --> 00:40:59,380
cure so it means transaction logging

00:40:56,680 --> 00:41:03,520
stopped and it directly I can go back to

00:40:59,380 --> 00:41:05,760
slide explaining it no this is the wrong

00:41:03,520 --> 00:41:10,510
sorry that was the wrong button

00:41:05,760 --> 00:41:14,110
go back go to the functional to today's

00:41:10,510 --> 00:41:16,660
slide ok so it stops transaction logging

00:41:14,110 --> 00:41:20,440
here no reason anymore directly writing

00:41:16,660 --> 00:41:22,210
foo but the secondary is left in a

00:41:20,440 --> 00:41:25,270
consistent state but outdated

00:41:22,210 --> 00:41:27,090
of course and then after this has been

00:41:25,270 --> 00:41:29,320
resolved the network is working again

00:41:27,090 --> 00:41:30,940
first of all you can resize the

00:41:29,320 --> 00:41:32,220
filesystem here if you have enough disk

00:41:30,940 --> 00:41:36,809
space plus

00:41:32,220 --> 00:41:41,010
X few X 4 X 10 2 X 4 or whatever file

00:41:36,809 --> 00:41:45,000
system here and then you can survive

00:41:41,010 --> 00:41:49,349
this way you can transpose the data by

00:41:45,000 --> 00:41:52,619
hand if it's typical dimensioning in 1 +

00:41:49,349 --> 00:41:54,569
1 is around half a terabyte for slash

00:41:52,619 --> 00:41:57,510
Mars and typically this lasts for

00:41:54,569 --> 00:42:00,030
several days only a few machines are

00:41:57,510 --> 00:42:04,260
higher load machines and then it lasts

00:42:00,030 --> 00:42:07,559
only a few hours that of course so in

00:42:04,260 --> 00:42:09,750
the emergency mode occurs the mirror is

00:42:07,559 --> 00:42:11,970
consistent but outdated and then

00:42:09,750 --> 00:42:15,660
afterwards you can do a fast full thing

00:42:11,970 --> 00:42:19,859
that fast closing means similar to our

00:42:15,660 --> 00:42:22,170
sync each block is read in both devices

00:42:19,859 --> 00:42:24,030
and then an md5 checksum or the new

00:42:22,170 --> 00:42:27,119
checksumming method is computed and

00:42:24,030 --> 00:42:28,950
compare block by block so you have the

00:42:27,119 --> 00:42:31,890
same network traffic or similar network

00:42:28,950 --> 00:42:33,630
traffic 10s dr BD and it's bitmaps but

00:42:31,890 --> 00:42:35,670
Mars at the moment doesn't use bitmaps

00:42:33,630 --> 00:42:37,529
of course if it's upstream you can add

00:42:35,670 --> 00:42:40,380
some bitmaps to it and you have almost

00:42:37,529 --> 00:42:42,000
the same IO performance so it computes

00:42:40,380 --> 00:42:44,130
the md5 checksums which is more

00:42:42,000 --> 00:42:47,099
expensive yes of course but the problem

00:42:44,130 --> 00:42:50,250
is solved and this fast texturing method

00:42:47,099 --> 00:42:52,289
is extremely important for this

00:42:50,250 --> 00:42:56,010
migration in the football project so you

00:42:52,289 --> 00:42:57,960
can create another replica the swing is

00:42:56,010 --> 00:43:01,890
running in parallel over different port

00:42:57,960 --> 00:43:05,160
number and this leads to not typically

00:43:01,890 --> 00:43:08,460
the thing is not hindering anyway the

00:43:05,160 --> 00:43:11,010
performance because rate controllers

00:43:08,460 --> 00:43:13,700
typically have no parallelism of about

00:43:11,010 --> 00:43:14,990
1,000 requests parallel you have to tune

00:43:13,700 --> 00:43:17,940
[Music]

00:43:14,990 --> 00:43:20,970
the request numbers and block layer

00:43:17,940 --> 00:43:22,980
number of requests and then you have

00:43:20,970 --> 00:43:25,770
really high i/o parallelism on this

00:43:22,980 --> 00:43:27,359
machine and I'm exploiting this in the

00:43:25,770 --> 00:43:28,460
current math portion of course

00:43:27,359 --> 00:43:31,680
everything is doable

00:43:28,460 --> 00:43:32,640
does it answer your question yes ok no

00:43:31,680 --> 00:43:34,789
no it's clear

00:43:32,640 --> 00:43:39,690
well it's described in the user manual

00:43:34,789 --> 00:43:43,099
not in this architecture manual you

00:43:39,690 --> 00:43:43,099
might have to bring questions to a close

00:43:49,490 --> 00:43:54,290
thank you very much Thomas for your talk

00:43:52,060 --> 00:43:55,730
and if you've got any further questions

00:43:54,290 --> 00:43:57,410
I'm sure you'll be able to find him

00:43:55,730 --> 00:44:02,750
around the place yes you can of course

00:43:57,410 --> 00:44:04,880
you can ask me and I will be and Adam at

00:44:02,750 --> 00:44:07,310
the dinner tomorrow and so on just just

00:44:04,880 --> 00:44:11,680
look at my badge and we'll find me again

00:44:07,310 --> 00:44:11,680

YouTube URL: https://www.youtube.com/watch?v=yLyEv5KQPco


