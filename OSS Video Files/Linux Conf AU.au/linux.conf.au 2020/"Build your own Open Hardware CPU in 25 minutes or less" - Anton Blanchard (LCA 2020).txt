Title: "Build your own Open Hardware CPU in 25 minutes or less" - Anton Blanchard (LCA 2020)
Publication date: 2020-01-14
Playlist: linux.conf.au 2020
Description: 
	Anton Blanchard

https://lca2020.linux.org.au/schedule/presentation/152/

Open hardware architectures and cheap FPGAs have allowed software people (like myself) to get involved in hacking CPUs. This talk will take you through the steps of downloading, simulating and synthesising Microwatt, an OpenPOWER core onto an FPGA. It will show just how easy it is to get both Micropython and Zephyr running, and how easy it is to make modifications to the core, such as adding new instructions.

During the breaks we will be happy to help anyone get up and running, so if you have a Xilinx Artix 7 or Lattice ECP5 based board, bring it along!

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Mon Jan 13 13:50:00 2020 at Room 7
Captions: 
	00:00:00,829 --> 00:00:06,180
so the next talk I'm going to give is

00:00:03,770 --> 00:00:07,919
and and it's pretty vicious and I guess

00:00:06,180 --> 00:00:09,210
no one's work with vendor tools but if

00:00:07,919 --> 00:00:10,500
we work with vendor tools you'd say

00:00:09,210 --> 00:00:11,910
building anything in twenty five minutes

00:00:10,500 --> 00:00:13,710
is pretty ambitious but we'll give it a

00:00:11,910 --> 00:00:15,780
go we'll see how we go

00:00:13,710 --> 00:00:18,750
firstly a little bit of FPGA what I want

00:00:15,780 --> 00:00:20,760
and people always ask me how fast is

00:00:18,750 --> 00:00:24,359
microwatt it's about 300 kilometers an

00:00:20,760 --> 00:00:26,340
hour that's the that's the that's in

00:00:24,359 --> 00:00:29,279
France we were on the TGV and I was

00:00:26,340 --> 00:00:30,660
hacking on it so I won't go into detail

00:00:29,279 --> 00:00:32,070
but maybe just give you a bit of a broad

00:00:30,660 --> 00:00:35,579
overview so you can get a bit of a feel

00:00:32,070 --> 00:00:37,050
for what and if PJ is first thing I do

00:00:35,579 --> 00:00:39,660
go straight to Wikipedia so Wikipedia

00:00:37,050 --> 00:00:41,100
says it's an IC designed to be

00:00:39,660 --> 00:00:43,680
configured by a customer so it's

00:00:41,100 --> 00:00:46,079
configurable hardware it's a sieve stuff

00:00:43,680 --> 00:00:48,780
there's a bunch of logic blocks there's

00:00:46,079 --> 00:00:50,129
external iOS there's routing wire so you

00:00:48,780 --> 00:00:52,640
can connect these logic blocks together

00:00:50,129 --> 00:00:55,199
and then there's some specialized macros

00:00:52,640 --> 00:00:58,859
and if you look here again fantastic

00:00:55,199 --> 00:01:01,379
ossifer Wikipedia we have a logic block

00:00:58,859 --> 00:01:03,570
so what's a logic block well it contains

00:01:01,379 --> 00:01:05,760
look-up tables well what's a lookup

00:01:03,570 --> 00:01:07,350
table a lookup table is basically a set

00:01:05,760 --> 00:01:09,470
of inputs and a set of outputs it's a

00:01:07,350 --> 00:01:12,600
like in the software water lookup table

00:01:09,470 --> 00:01:14,670
so if you look here we have a couple of

00:01:12,600 --> 00:01:15,960
lots at the front we have an adder in

00:01:14,670 --> 00:01:18,630
the middle and we have some state

00:01:15,960 --> 00:01:20,270
because if you don't have state you you

00:01:18,630 --> 00:01:22,680
need state to do anything interesting so

00:01:20,270 --> 00:01:24,540
the basic building block looks like that

00:01:22,680 --> 00:01:26,280
and what you have is the set of tools

00:01:24,540 --> 00:01:31,799
around it so you can build hardware

00:01:26,280 --> 00:01:34,500
based on based on this pretty simple now

00:01:31,799 --> 00:01:35,400
one thing that you need to think about

00:01:34,500 --> 00:01:36,720
it again we won't go into too much

00:01:35,400 --> 00:01:38,369
detail but there's the idea of

00:01:36,720 --> 00:01:41,189
combination combinatorial and sequential

00:01:38,369 --> 00:01:44,159
logic again combinatorial logic is the

00:01:41,189 --> 00:01:45,810
latter idea an A or B a and B all that

00:01:44,159 --> 00:01:47,460
kind of stuff and you state your

00:01:45,810 --> 00:01:50,159
sequential logic is the flip-flop

00:01:47,460 --> 00:01:52,860
flip-flop is the idea that every time

00:01:50,159 --> 00:01:54,810
the clock goes it saves the state so you

00:01:52,860 --> 00:01:57,390
have the way way to have state stateful

00:01:54,810 --> 00:01:59,310
elements to other things are interesting

00:01:57,390 --> 00:02:01,799
people always talk about simulation and

00:01:59,310 --> 00:02:03,390
synthesis so simulation is like a

00:02:01,799 --> 00:02:05,070
software simulation that could be a

00:02:03,390 --> 00:02:07,079
hardware accelerated simulator whatever

00:02:05,070 --> 00:02:09,090
but it's basically simulating a project

00:02:07,079 --> 00:02:11,490
synthesis is all the other Gorp to get

00:02:09,090 --> 00:02:12,750
it on there so it's things like

00:02:11,490 --> 00:02:14,070
nice and round and always kind of stuff

00:02:12,750 --> 00:02:17,130
compiling and analyzing around

00:02:14,070 --> 00:02:19,830
everything some of the key tools at

00:02:17,130 --> 00:02:21,210
least in the open hardware world ghdo

00:02:19,830 --> 00:02:24,570
I've talked about that before that is

00:02:21,210 --> 00:02:27,870
the gold standard for open source or

00:02:24,570 --> 00:02:29,340
open hardware VHDL simulation Verrill

00:02:27,870 --> 00:02:30,630
aid is the equivalent on the vera log

00:02:29,340 --> 00:02:33,090
side they're slightly different in the

00:02:30,630 --> 00:02:35,940
way they approach things and and but

00:02:33,090 --> 00:02:40,200
from the purposes of what to use there

00:02:35,940 --> 00:02:44,430
for to the to synthesis and place and

00:02:40,200 --> 00:02:47,070
route tools that are big and really

00:02:44,430 --> 00:02:48,480
moving along accord Yosef and next PN

00:02:47,070 --> 00:02:52,530
are are they're both pretty fantastic

00:02:48,480 --> 00:02:55,740
and they are wet what say for example G

00:02:52,530 --> 00:02:57,150
HDL would feed into if you want to know

00:02:55,740 --> 00:02:59,790
what's going on you have what they call

00:02:57,150 --> 00:03:01,170
a waveform viewer g TK wave is pretty

00:02:59,790 --> 00:03:02,430
good for that having said that i'm a

00:03:01,170 --> 00:03:02,940
software guy so a lot of time I use

00:03:02,430 --> 00:03:04,610
printf

00:03:02,940 --> 00:03:08,010
so you can still do things like printf

00:03:04,610 --> 00:03:09,810
and it's it's slightly different in each

00:03:08,010 --> 00:03:12,000
language but hell you can still do it

00:03:09,810 --> 00:03:14,880
you know what's going on print this out

00:03:12,000 --> 00:03:16,760
and every vendor has their own tools so

00:03:14,880 --> 00:03:19,020
they're all different they're all

00:03:16,760 --> 00:03:20,310
different in the features they support

00:03:19,020 --> 00:03:22,200
they're different in the bugs they

00:03:20,310 --> 00:03:23,910
create all that kind of stuff so that

00:03:22,200 --> 00:03:27,510
world is you know a bit of a minefield

00:03:23,910 --> 00:03:29,100
sometimes someone asks me you know how

00:03:27,510 --> 00:03:31,200
many FPGA is do I have and I and I

00:03:29,100 --> 00:03:33,630
thought about it and I started with one

00:03:31,200 --> 00:03:37,770
and and that's just an RTI sever that's

00:03:33,630 --> 00:03:40,700
fantastic and and that came from Tim

00:03:37,770 --> 00:03:45,570
that's a nice okay great that's two and

00:03:40,700 --> 00:03:48,330
then there's a tiny FPGA px that's three

00:03:45,570 --> 00:03:51,770
then there's the foam ooze that's four

00:03:48,330 --> 00:03:54,990
and five then there was a C mod a seven

00:03:51,770 --> 00:03:58,350
I'm losing count then there's also a

00:03:54,990 --> 00:03:59,610
digital n't orders well and and then

00:03:58,350 --> 00:04:01,560
there was there's a little matron

00:03:59,610 --> 00:04:04,560
Adelaide that builds this nice little EC

00:04:01,560 --> 00:04:09,810
p5 great Deville builds a little thing

00:04:04,560 --> 00:04:10,620
he calls the orange crab yes well good

00:04:09,810 --> 00:04:14,790
question

00:04:10,620 --> 00:04:16,260
don't tell my wife it's that or if it

00:04:14,790 --> 00:04:18,090
starts at the low end and you look at

00:04:16,260 --> 00:04:19,950
say the C mod which is this little stick

00:04:18,090 --> 00:04:22,380
one that's just over a hundred dollars

00:04:19,950 --> 00:04:23,580
Australian I think the artis what are

00:04:22,380 --> 00:04:25,340
they a hundred and something for the

00:04:23,580 --> 00:04:27,390
small

00:04:25,340 --> 00:04:29,850
hundred fifty yellows for the small

00:04:27,390 --> 00:04:33,210
audio this one's quite big but it has a

00:04:29,850 --> 00:04:41,160
bunch of gunk so they're in that prana

00:04:33,210 --> 00:04:43,230
price range yeah I mean the main the

00:04:41,160 --> 00:04:46,050
main thing is with it we fit easily into

00:04:43,230 --> 00:04:48,600
well not not these ice forties but any

00:04:46,050 --> 00:04:51,300
of the said Xilinx part so that's stick

00:04:48,600 --> 00:04:53,760
that Arctic's 35 T we fit comfortably

00:04:51,300 --> 00:04:55,560
inside it the the big advantage with

00:04:53,760 --> 00:04:57,750
some of the bigger ones is is there's

00:04:55,560 --> 00:05:01,140
more block ram and that means there's

00:04:57,750 --> 00:05:02,700
more stuff you can do without having to

00:05:01,140 --> 00:05:06,180
resort to things like DRAM and stuff

00:05:02,700 --> 00:05:07,440
sodium's kind of complicated and you

00:05:06,180 --> 00:05:08,610
know if you're just debugging something

00:05:07,440 --> 00:05:11,610
you don't necessarily want to bring up a

00:05:08,610 --> 00:05:13,740
whole sock with DRM so the block Ram

00:05:11,610 --> 00:05:15,750
provides basically around so we a lot of

00:05:13,740 --> 00:05:18,230
the time I'll run just completely inside

00:05:15,750 --> 00:05:20,700
that that 35 T without actually having

00:05:18,230 --> 00:05:22,890
using any of the SRAM on that one

00:05:20,700 --> 00:05:25,740
particularly so so from our perspective

00:05:22,890 --> 00:05:28,730
we fit in all of them comfortably enough

00:05:25,740 --> 00:05:28,730
that we're you know we're okay

00:05:30,020 --> 00:05:34,230
we might not yeah we're still growing

00:05:32,250 --> 00:05:36,420
things are getting bigger and things are

00:05:34,230 --> 00:05:38,490
growing and so you know I you come to

00:05:36,420 --> 00:05:41,850
the conclusion of of asking the question

00:05:38,490 --> 00:05:44,430
of how many FPGAs is enough and I think

00:05:41,850 --> 00:05:46,980
the answer from people in the black

00:05:44,430 --> 00:05:50,490
world will know this one in plus one I

00:05:46,980 --> 00:05:53,940
think I keep amassing them and so we'll

00:05:50,490 --> 00:05:55,380
quickly try for a demo and we'll see how

00:05:53,940 --> 00:06:02,040
we go we'll see the demo gods are

00:05:55,380 --> 00:06:02,910
looking fondly on us today and so what

00:06:02,040 --> 00:06:04,170
are we going to start with we're going

00:06:02,910 --> 00:06:06,090
to start with simulation so I've got a

00:06:04,170 --> 00:06:08,690
couple projects here already downloaded

00:06:06,090 --> 00:06:14,250
I've got micro Python so let's go in and

00:06:08,690 --> 00:06:16,860
let's go in and see so just type make so

00:06:14,250 --> 00:06:18,900
again I'm just using the Fedora cross

00:06:16,860 --> 00:06:19,290
compiler that I DNF installed and where

00:06:18,900 --> 00:06:22,710
we go

00:06:19,290 --> 00:06:26,990
so that's building our micro Python

00:06:22,710 --> 00:06:33,810
binary there we go done so now let's go

00:06:26,990 --> 00:06:35,880
into so now we've got a binary to run

00:06:33,810 --> 00:06:38,420
that's going to microwatt which is the

00:06:35,880 --> 00:06:40,100
project again we type make

00:06:38,420 --> 00:06:41,680
so that's using GH dill so that's

00:06:40,100 --> 00:06:45,130
building the simulation environment and

00:06:41,680 --> 00:06:48,710
so what we have now is we have a

00:06:45,130 --> 00:06:50,570
basically an executable and we have the

00:06:48,710 --> 00:06:53,030
micro Python binary so what we need to

00:06:50,570 --> 00:06:55,310
do is we need to grab the micro pass in

00:06:53,030 --> 00:07:01,490
binary oops

00:06:55,310 --> 00:07:07,880
what was it ports C build oops little

00:07:01,490 --> 00:07:10,130
bin and we'll put it what's it called

00:07:07,880 --> 00:07:15,350
now let's call main Ram put that and

00:07:10,130 --> 00:07:17,180
then we'll just execute the file and

00:07:15,350 --> 00:07:20,120
we've just got some debug output so we

00:07:17,180 --> 00:07:22,220
hide that away and hopefully mm-hmm

00:07:20,120 --> 00:07:23,300
fingers crossed there we go so

00:07:22,220 --> 00:07:25,670
microphones running so we're basically

00:07:23,300 --> 00:07:28,160
simulating the CPU that's basically

00:07:25,670 --> 00:07:31,670
simulating the VHDL running that micro

00:07:28,160 --> 00:07:32,810
Python and hopefully it you know it's

00:07:31,670 --> 00:07:36,080
how to print and obviously it's a bit

00:07:32,810 --> 00:07:37,280
slow but if we we do that it will go

00:07:36,080 --> 00:07:38,840
away and probably take too long for us

00:07:37,280 --> 00:07:41,840
to go but it is basically chunking

00:07:38,840 --> 00:07:46,040
through the the VHDL and running micro

00:07:41,840 --> 00:07:47,930
Python it directly so great okay let's

00:07:46,040 --> 00:07:51,740
let's move on to the next step

00:07:47,930 --> 00:07:54,680
so let's try let's try synthesis

00:07:51,740 --> 00:07:57,290
synthesis now and see how we go so I

00:07:54,680 --> 00:07:59,240
just killed that so the next step is we

00:07:57,290 --> 00:08:02,150
talked a little bit about a few sock so

00:07:59,240 --> 00:08:10,520
let's let's run it so we go add a few

00:08:02,150 --> 00:08:11,990
sock and it's a bit of a command-line

00:08:10,520 --> 00:08:14,630
but basically we're telling it what our

00:08:11,990 --> 00:08:16,070
target is it's a nexus board what our

00:08:14,630 --> 00:08:17,360
memory is and again we're using block

00:08:16,070 --> 00:08:19,580
Ram here so there's a lot of block ram

00:08:17,360 --> 00:08:22,370
on this FPGA here we actually have about

00:08:19,580 --> 00:08:24,200
a megabyte of block ram on it we use

00:08:22,370 --> 00:08:26,690
half of it and then we've pointed out

00:08:24,200 --> 00:08:30,560
the the firmware file which is basically

00:08:26,690 --> 00:08:31,580
the the micro pius an image and we send

00:08:30,560 --> 00:08:35,330
it off and that's going to take a while

00:08:31,580 --> 00:08:38,180
so we'll go back to our presentation how

00:08:35,330 --> 00:08:40,010
much time we have a few commits let's

00:08:38,180 --> 00:08:42,920
see there we go that may not be done by

00:08:40,010 --> 00:08:47,060
ten minutes that's the the state of the

00:08:42,920 --> 00:08:49,970
tools so we've done that so what do we

00:08:47,060 --> 00:08:50,890
want to do next let's add an instruction

00:08:49,970 --> 00:08:54,050
so that sounds like fun

00:08:50,890 --> 00:08:57,920
what do we need we need an RNG microwatt

00:08:54,050 --> 00:09:00,050
doesn't have an rng so it sounds like a

00:08:57,920 --> 00:09:02,240
great thing to add the problem is is

00:09:00,050 --> 00:09:04,720
random number generators are extremely

00:09:02,240 --> 00:09:09,380
hard to get right there's issues around

00:09:04,720 --> 00:09:12,410
whitening and bias and entropy it's very

00:09:09,380 --> 00:09:13,040
difficult to to to prove that you're

00:09:12,410 --> 00:09:18,860
correct

00:09:13,040 --> 00:09:21,230
so technology's specific exactly exactly

00:09:18,860 --> 00:09:23,090
so they're extremely difficult and so

00:09:21,230 --> 00:09:25,220
what the best thing to do is probably to

00:09:23,090 --> 00:09:29,990
copy the best in the industry I would

00:09:25,220 --> 00:09:33,290
say so let's look at how other vendors

00:09:29,990 --> 00:09:35,600
have built there are energies we're

00:09:33,290 --> 00:09:37,250
going to add it as a constant so we're

00:09:35,600 --> 00:09:40,670
gonna return the same value every time

00:09:37,250 --> 00:09:43,670
yeah you won't you let you laugh but

00:09:40,670 --> 00:09:46,400
surely no one in industry would do that

00:09:43,670 --> 00:09:48,500
would they well maybe maybe maybe once

00:09:46,400 --> 00:09:50,620
but that would never happen again would

00:09:48,500 --> 00:09:50,620
it

00:09:51,580 --> 00:09:57,040
okay but then surely we'd never do that

00:09:57,310 --> 00:10:04,850
okay well moving along what do we need

00:10:00,620 --> 00:10:06,770
to do so we need an opcode what's an

00:10:04,850 --> 00:10:08,150
opcode an opcode is just a set of

00:10:06,770 --> 00:10:10,790
encodings that tell us what the

00:10:08,150 --> 00:10:13,520
instruction is on power we have 32-bit

00:10:10,790 --> 00:10:15,680
instructions so it's a it's a it's an

00:10:13,520 --> 00:10:17,540
opcode it's a set of numbers that sit

00:10:15,680 --> 00:10:20,660
within that space within that 32-bit

00:10:17,540 --> 00:10:22,730
space we in microwatt all we need to do

00:10:20,660 --> 00:10:24,020
is we'll add a constant for it will add

00:10:22,730 --> 00:10:26,030
the opcode to our decoder

00:10:24,020 --> 00:10:29,230
and we'll add what we want to do in the

00:10:26,030 --> 00:10:33,620
execution unit so let's go do that now

00:10:29,230 --> 00:10:37,970
so we've got probably at five minutes

00:10:33,620 --> 00:10:40,670
let's okay so that's still chunking away

00:10:37,970 --> 00:10:45,980
so we'll let synthesis go so let's just

00:10:40,670 --> 00:10:48,560
jump back into our microwatt and i've

00:10:45,980 --> 00:10:49,940
cheated a bit so i have actually made

00:10:48,560 --> 00:10:53,630
the changes but we can look at them here

00:10:49,940 --> 00:10:56,150
so all I had to do was add something

00:10:53,630 --> 00:10:58,339
here in a decoder so this is just a

00:10:56,150 --> 00:11:00,290
lookup table basically of what our

00:10:58,339 --> 00:11:02,570
opcode is and we have this concept of

00:11:00,290 --> 00:11:04,640
major op codes so I found a major op

00:11:02,570 --> 00:11:06,220
code that was free one and

00:11:04,640 --> 00:11:09,050
there's a set of things that it does and

00:11:06,220 --> 00:11:11,000
you know I'm gonna use the ALU unit and

00:11:09,050 --> 00:11:13,880
I'm creating a new instruction called op

00:11:11,000 --> 00:11:17,650
RNG so that's about it so that's step

00:11:13,880 --> 00:11:20,900
one step two is I need that rng rng

00:11:17,650 --> 00:11:23,060
constant defined there it is and the

00:11:20,900 --> 00:11:24,380
third thing I need to do is what's my

00:11:23,060 --> 00:11:26,630
RNG doing well it's returning my

00:11:24,380 --> 00:11:30,680
constant that's it so that's all I need

00:11:26,630 --> 00:11:35,390
to do and we type make sale we now and

00:11:30,680 --> 00:11:38,570
we now have an RNG fantastic RNG so now

00:11:35,390 --> 00:11:41,090
we need to use it so we need to write a

00:11:38,570 --> 00:11:42,410
bit of software so let's go away and

00:11:41,090 --> 00:11:46,220
play hear it again I've cheated a bit

00:11:42,410 --> 00:11:48,920
and I've created it and so in PowerPC

00:11:46,220 --> 00:11:51,050
speak we want to do an inline assembly

00:11:48,920 --> 00:11:53,810
to run it and here we're just basically

00:11:51,050 --> 00:11:55,970
saying a major opcode which was one it's

00:11:53,810 --> 00:11:58,310
in the top bits so we've shifted that 26

00:11:55,970 --> 00:12:01,310
the top six bits of the opcode and we're

00:11:58,310 --> 00:12:03,740
returning it in our zero just because it

00:12:01,310 --> 00:12:06,080
makes it easier for us to kind of write

00:12:03,740 --> 00:12:08,810
it here that's it so that's our software

00:12:06,080 --> 00:12:10,340
and what are we doing we printf my RNG

00:12:08,810 --> 00:12:14,990
so we've done the software we've done

00:12:10,340 --> 00:12:19,070
the hardware type make done now we go

00:12:14,990 --> 00:12:24,110
back to microwatt micro what if I can

00:12:19,070 --> 00:12:30,880
type so we copy in that image from hello

00:12:24,110 --> 00:12:36,770
world up in copy it to main Ram and we

00:12:30,880 --> 00:12:38,930
execute hopefully hello world and hey

00:12:36,770 --> 00:12:40,220
there we go so it we've added in an

00:12:38,930 --> 00:12:41,690
instruction both in the harbour and the

00:12:40,220 --> 00:12:44,440
software side so it really is that easy

00:12:41,690 --> 00:12:46,550
to start playing there's not a lot to it

00:12:44,440 --> 00:12:50,570
working in the hardware world isn't too

00:12:46,550 --> 00:12:54,080
difficult and and it's a lot of fun so

00:12:50,570 --> 00:12:57,650
we'll quickly go back and see it's still

00:12:54,080 --> 00:12:59,600
going maybe we'll talk take some

00:12:57,650 --> 00:13:03,430
questions and see if this synthesis

00:12:59,600 --> 00:13:03,430
finishes in time any questions

00:13:06,920 --> 00:13:21,830
hmm okay

00:13:12,300 --> 00:13:21,830
it does look like it's finished yes

00:13:27,860 --> 00:13:32,910
we're so so what tends to happen in in

00:13:31,380 --> 00:13:34,830
the FPGA world is you build something

00:13:32,910 --> 00:13:36,360
and then you work out whether it makes

00:13:34,830 --> 00:13:38,460
they call it make time and whether it

00:13:36,360 --> 00:13:41,730
makes timing so how fast does it go yeah

00:13:38,460 --> 00:13:43,680
and we we started off running these

00:13:41,730 --> 00:13:45,390
fairly slow so everything we did at 50

00:13:43,680 --> 00:13:47,370
megahertz because you do so much in 50

00:13:45,390 --> 00:13:49,110
megahertz and then we've bumped out

00:13:47,370 --> 00:13:51,300
stuff to being at a hundred megahertz

00:13:49,110 --> 00:13:53,790
for a lot of things and and you go you

00:13:51,300 --> 00:13:55,620
at some point you get closer then to to

00:13:53,790 --> 00:13:57,750
the limits and then if you don't make

00:13:55,620 --> 00:14:01,070
timing you got to go back and work out

00:13:57,750 --> 00:14:01,070
why and all that kind of stuff

00:14:02,570 --> 00:14:07,080
well the question the question was sorry

00:14:04,830 --> 00:14:08,370
was around what would have meant to to

00:14:07,080 --> 00:14:11,030
be concerned about frequency in a white

00:14:08,370 --> 00:14:11,030
kind of stuff Thanks

00:14:15,160 --> 00:14:20,320
nothing else I think let's get a take a

00:14:17,740 --> 00:14:24,250
while so it when it synthesizes it will

00:14:20,320 --> 00:14:26,980
run and and the good thing is is once we

00:14:24,250 --> 00:14:29,470
get yo Sasan EXPN are going the

00:14:26,980 --> 00:14:34,420
synthesis and place and route should be

00:14:29,470 --> 00:14:55,990
quicker I am yes I need a faster laptop

00:14:34,420 --> 00:14:58,960
bigger laptop yep yes so the question

00:14:55,990 --> 00:15:00,190
was around the open source synthesis -

00:14:58,960 --> 00:15:03,250
and place and route tools and whether

00:15:00,190 --> 00:15:05,890
they were focused on more than just the

00:15:03,250 --> 00:15:08,380
ice forties lot lot been going on so the

00:15:05,890 --> 00:15:10,510
easy the latter CCCP five parts that

00:15:08,380 --> 00:15:12,490
target is pretty good i don't fit teams

00:15:10,510 --> 00:15:14,740
here he'll be talking later on i assume

00:15:12,490 --> 00:15:16,750
about some of this stuff there's a lot

00:15:14,740 --> 00:15:18,220
of work around getting this series seven

00:15:16,750 --> 00:15:19,840
zhiling stuff going so we're kind of

00:15:18,220 --> 00:15:21,970
interested there so yeah that whole

00:15:19,840 --> 00:15:23,320
space is moving pretty quickly so at the

00:15:21,970 --> 00:15:25,300
moment yeah i mean there are a lot of

00:15:23,320 --> 00:15:27,580
platforms FPGA platforms that aren't

00:15:25,300 --> 00:15:35,470
supported but you know things are coming

00:15:27,580 --> 00:15:38,620
and that's good yeah well i think will

00:15:35,470 --> 00:15:40,190
abandon this and consider it that cool

00:15:38,620 --> 00:15:43,629
thank you

00:15:40,190 --> 00:15:43,629

YouTube URL: https://www.youtube.com/watch?v=g3slH03MCmo


