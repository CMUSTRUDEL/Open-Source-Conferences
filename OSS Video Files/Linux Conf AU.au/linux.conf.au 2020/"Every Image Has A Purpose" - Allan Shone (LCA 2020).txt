Title: "Every Image Has A Purpose" - Allan Shone (LCA 2020)
Publication date: 2020-01-15
Playlist: linux.conf.au 2020
Description: 
	Allan Shone

https://lca2020.linux.org.au/schedule/presentation/129/

Container images come in all shapes and sizes, with some being more useful then others. It's easy to have a one-size-fits-all approach to building images, but there are benefits to tailor making them for each appropriate situation. Images being deployed probably shouldn't be massive, nor should they include development tools, and it's probably unnecessary to run deployed integrations in a development environment. One approach for specifying images is to ask a few questions, naming appropriately along the way.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Tue Jan 14 16:55:00 2020 at Room 7
Captions: 
	00:00:00,949 --> 00:00:06,600
all right and right for our last talk

00:00:03,480 --> 00:00:08,460
for today I'll great collection so Alan

00:00:06,600 --> 00:00:10,590
Allen's giving us talk about arm images

00:00:08,460 --> 00:00:11,969
which of course is obviously what a

00:00:10,590 --> 00:00:16,770
whole lot of the rest is built on so

00:00:11,969 --> 00:00:21,660
it's good to thank you

00:00:16,770 --> 00:00:24,960
a good afternoon so yes images for

00:00:21,660 --> 00:00:26,189
containers docker whichever one I don't

00:00:24,960 --> 00:00:28,710
care about your runtime or anything like

00:00:26,189 --> 00:00:31,920
that but I've got some examples and I'm

00:00:28,710 --> 00:00:34,320
using docker as the language as a part

00:00:31,920 --> 00:00:35,450
of that just because it's what I'm most

00:00:34,320 --> 00:00:38,820
familiar with

00:00:35,450 --> 00:00:41,190
so dr. images what are they anyway

00:00:38,820 --> 00:00:43,789
they're they're just a like a baseline

00:00:41,190 --> 00:00:45,809
definition there's something that's

00:00:43,789 --> 00:00:49,020
reproducible or something you can reason

00:00:45,809 --> 00:00:52,230
about really just a set of instructions

00:00:49,020 --> 00:00:55,949
to prepare some sort of execution

00:00:52,230 --> 00:00:59,520
runtime there they're a great way to

00:00:55,949 --> 00:01:02,670
also reason about certain conditions

00:00:59,520 --> 00:01:05,280
under which applications and whatever

00:01:02,670 --> 00:01:08,970
sorts of services binary executables

00:01:05,280 --> 00:01:11,640
will run they're also really handy aware

00:01:08,970 --> 00:01:14,040
to be used as a caching mechanism of

00:01:11,640 --> 00:01:17,280
sorts so you might have some long

00:01:14,040 --> 00:01:19,979
computation that needs to happen ready

00:01:17,280 --> 00:01:22,590
for an application to be executable and

00:01:19,979 --> 00:01:25,799
if you do that ahead of time if you can

00:01:22,590 --> 00:01:28,890
do that ahead of time then you might

00:01:25,799 --> 00:01:33,509
save a lot of time later on this is also

00:01:28,890 --> 00:01:36,780
the case for dependencies so if you have

00:01:33,509 --> 00:01:38,549
a lot of compilation maybe there's a lot

00:01:36,780 --> 00:01:41,700
of C libraries you need you need to

00:01:38,549 --> 00:01:43,799
compile those then as you're debugging

00:01:41,700 --> 00:01:46,740
your software you don't want to

00:01:43,799 --> 00:01:49,290
recompile all of those depths every

00:01:46,740 --> 00:01:51,930
single time you make a change so you can

00:01:49,290 --> 00:01:55,049
use images as a way to have those

00:01:51,930 --> 00:01:59,130
precompilation steps already done and

00:01:55,049 --> 00:02:01,380
just reuse them over and over again one

00:01:59,130 --> 00:02:05,700
of the great things about images is they

00:02:01,380 --> 00:02:08,879
give reproducible ecosystems once

00:02:05,700 --> 00:02:10,890
something's sorted out that's ready to

00:02:08,879 --> 00:02:12,390
go you can reuse it over and over again

00:02:10,890 --> 00:02:16,130
and it will

00:02:12,390 --> 00:02:20,730
exact same way so that way we have this

00:02:16,130 --> 00:02:24,480
fantastic expected environment that is

00:02:20,730 --> 00:02:28,470
ready to go for everyone inside each

00:02:24,480 --> 00:02:32,220
image there's a series of layers when

00:02:28,470 --> 00:02:35,490
you add commands whether that's a show

00:02:32,220 --> 00:02:37,680
command or a copy command or something

00:02:35,490 --> 00:02:42,080
else a comment which one a layer is

00:02:37,680 --> 00:02:45,350
created and a layer is kind of kind of a

00:02:42,080 --> 00:02:48,959
snapshot of the dip of the file system

00:02:45,350 --> 00:02:52,620
from within like a temporary container

00:02:48,959 --> 00:02:55,530
and that's used to make up that layer

00:02:52,620 --> 00:02:57,450
and so layers on top of layers so that

00:02:55,530 --> 00:02:59,519
way when you run a container from an

00:02:57,450 --> 00:03:04,200
image you get all of those layers

00:02:59,519 --> 00:03:09,150
flattened down to one file system to

00:03:04,200 --> 00:03:12,680
make things nice at runtime well ready

00:03:09,150 --> 00:03:16,769
for runtime not necessarily at runtime

00:03:12,680 --> 00:03:19,920
minimizing these layers can save a lot

00:03:16,769 --> 00:03:24,600
of things like bandwidth or storage

00:03:19,920 --> 00:03:26,730
costs or just make it a bit easier to to

00:03:24,600 --> 00:03:29,790
back-trace things over time now if

00:03:26,730 --> 00:03:33,329
you've got a lot of layers and some sort

00:03:29,790 --> 00:03:35,880
of weird changes a part of your final

00:03:33,329 --> 00:03:38,400
image if there's lots and lots of layers

00:03:35,880 --> 00:03:41,579
it's really hard to pinpoint where that

00:03:38,400 --> 00:03:43,110
change was introduced and as I mentioned

00:03:41,579 --> 00:03:46,620
earlier the layers are therefore

00:03:43,110 --> 00:03:48,959
therefore the casing mechanisms so with

00:03:46,620 --> 00:03:51,299
the with the precompilation of

00:03:48,959 --> 00:03:55,500
dependencies you might add just a

00:03:51,299 --> 00:03:58,019
particular section to cache those in

00:03:55,500 --> 00:04:00,209
particular and then when you rebuild the

00:03:58,019 --> 00:04:05,430
image case you'll get picked up straight

00:04:00,209 --> 00:04:06,840
away and saved a lot of time so really

00:04:05,430 --> 00:04:09,209
when you're thinking about building

00:04:06,840 --> 00:04:12,989
images you want to try and structure

00:04:09,209 --> 00:04:15,630
your image definition to make use of the

00:04:12,989 --> 00:04:17,519
layers and get his most bang for your

00:04:15,630 --> 00:04:22,830
buck depending on whatever your needs

00:04:17,519 --> 00:04:24,570
are every container uses one of these

00:04:22,830 --> 00:04:25,860
images whether or not you build the

00:04:24,570 --> 00:04:27,800
image yourself

00:04:25,860 --> 00:04:30,680
there's there's some sort of definition

00:04:27,800 --> 00:04:33,050
there are heaps that are available

00:04:30,680 --> 00:04:35,939
doesn't really matter languages

00:04:33,050 --> 00:04:39,270
applications there's a lot already out

00:04:35,939 --> 00:04:40,860
there so it's entirely possible you may

00:04:39,270 --> 00:04:42,960
not even build your own images anyway

00:04:40,860 --> 00:04:44,610
you'll just use them you'll bring in

00:04:42,960 --> 00:04:46,469
some other like you'll mount a file

00:04:44,610 --> 00:04:54,210
system which will just have your

00:04:46,469 --> 00:04:57,599
application code and then run so if you

00:04:54,210 --> 00:04:59,550
can you might want to build your own

00:04:57,599 --> 00:05:00,030
image just to speed things up a little

00:04:59,550 --> 00:05:03,750
bit

00:05:00,030 --> 00:05:05,520
mounting file systems volumes it can get

00:05:03,750 --> 00:05:07,259
a little bit tricky especially if you're

00:05:05,520 --> 00:05:10,199
doing many many things across many

00:05:07,259 --> 00:05:12,719
servers or whatever your infrastructure

00:05:10,199 --> 00:05:15,030
looks like it every every additional

00:05:12,719 --> 00:05:18,150
step takes time so if you can get your

00:05:15,030 --> 00:05:20,099
image spot-on then running it many times

00:05:18,150 --> 00:05:26,189
might save a lot of time even though

00:05:20,099 --> 00:05:29,009
each one is only just a fraction so in

00:05:26,189 --> 00:05:33,449
terms of our execution environments I've

00:05:29,009 --> 00:05:36,090
I've split up a bunch of scenarios under

00:05:33,449 --> 00:05:39,270
which images would be different to

00:05:36,090 --> 00:05:41,520
reason about and this is more of you

00:05:39,270 --> 00:05:43,379
have one application but you have many

00:05:41,520 --> 00:05:46,139
different ways that you interact with it

00:05:43,379 --> 00:05:48,569
you might deploy it you might develop on

00:05:46,139 --> 00:05:52,680
it you might run it locally somewhere

00:05:48,569 --> 00:05:56,550
that's not like production but you might

00:05:52,680 --> 00:05:58,680
think about it as sort of production so

00:05:56,550 --> 00:06:00,629
when you want to deploy a container

00:05:58,680 --> 00:06:03,750
somewhere you want to have an image

00:06:00,629 --> 00:06:07,349
that's ready to go as he is you give it

00:06:03,750 --> 00:06:08,580
a command and it does its thing no

00:06:07,349 --> 00:06:11,819
worries you don't have to think about it

00:06:08,580 --> 00:06:13,919
anymore you want to make sure that

00:06:11,819 --> 00:06:16,229
you've got all of the necessary tools

00:06:13,919 --> 00:06:18,449
available to have your application

00:06:16,229 --> 00:06:21,750
running exactly as you need it to run

00:06:18,449 --> 00:06:24,389
and it also depends on where you're

00:06:21,750 --> 00:06:26,449
running it so within Cuba Nettie's for

00:06:24,389 --> 00:06:30,199
instance you might have different

00:06:26,449 --> 00:06:33,419
monitoring capabilities you might have a

00:06:30,199 --> 00:06:36,180
diamond for some sort of Prometheus or

00:06:33,419 --> 00:06:38,550
data Explorer or something like that to

00:06:36,180 --> 00:06:43,020
push metrics back out

00:06:38,550 --> 00:06:46,590
to your Cuban Ali's demons maybe you

00:06:43,020 --> 00:06:48,750
have external exporters or that will

00:06:46,590 --> 00:06:53,419
pull data from your your your

00:06:48,750 --> 00:06:56,000
application as same with the logs so you

00:06:53,419 --> 00:06:58,560
can either pre install these things or

00:06:56,000 --> 00:07:02,690
you know your environment might already

00:06:58,560 --> 00:07:06,090
do it for you so a very simple example

00:07:02,690 --> 00:07:13,310
we want to keep it as small as possible

00:07:06,090 --> 00:07:13,310
so we would go ahead and have a compile

00:07:13,400 --> 00:07:20,430
stage we copy across our code and then

00:07:18,150 --> 00:07:22,949
we compile it I'm using going this case

00:07:20,430 --> 00:07:25,889
primarily because that's what I normally

00:07:22,949 --> 00:07:29,090
develop him and it lends itself well to

00:07:25,889 --> 00:07:34,039
very simple examples in this case so

00:07:29,090 --> 00:07:36,990
apologies for those who just let go and

00:07:34,039 --> 00:07:41,030
ready for deployment we would take a

00:07:36,990 --> 00:07:44,250
second step we go from scratch which is

00:07:41,030 --> 00:07:47,190
roughly an empty file system and we just

00:07:44,250 --> 00:07:49,259
copy that binary out and so we end up

00:07:47,190 --> 00:07:51,719
with an image at the end that only has

00:07:49,259 --> 00:07:56,250
one layer and that one layer consists of

00:07:51,719 --> 00:08:00,469
just the binary so it's probably what

00:07:56,250 --> 00:08:03,900
six Meg and that's it there's no shell

00:08:00,469 --> 00:08:05,699
there's no other executables if

00:08:03,900 --> 00:08:07,650
something goes wrong and you leave it

00:08:05,699 --> 00:08:10,319
back to all there's nowhere for an

00:08:07,650 --> 00:08:13,550
attacker to get access to unless you

00:08:10,319 --> 00:08:13,550
build that into your binary having

00:08:14,330 --> 00:08:21,900
another another scenario easy in CIN

00:08:17,610 --> 00:08:25,409
testing CIA testing there's additional

00:08:21,900 --> 00:08:29,330
tools that are usually like you want to

00:08:25,409 --> 00:08:33,209
make use of you wouldn't want to deploy

00:08:29,330 --> 00:08:34,800
debuggers or other code coverage test

00:08:33,209 --> 00:08:36,829
frameworks you wouldn't want them

00:08:34,800 --> 00:08:39,779
running inside of a deployed container

00:08:36,829 --> 00:08:42,180
but you would want them available during

00:08:39,779 --> 00:08:44,670
testing so that way you don't have to go

00:08:42,180 --> 00:08:47,910
and install all of these during your

00:08:44,670 --> 00:08:49,829
pipeline really when you won't want to

00:08:47,910 --> 00:08:50,600
run your tests you should just be able

00:08:49,829 --> 00:08:52,730
to run them

00:08:50,600 --> 00:08:55,490
so all of those dependencies should be

00:08:52,730 --> 00:08:58,970
ready to go the good thing about this

00:08:55,490 --> 00:09:01,070
you've got two images now but they

00:08:58,970 --> 00:09:03,440
they're quite different and they're

00:09:01,070 --> 00:09:06,680
meant for very different purposes but

00:09:03,440 --> 00:09:10,780
having them ready to go up ahead of time

00:09:06,680 --> 00:09:16,040
will save a lot of time in the long run

00:09:10,780 --> 00:09:18,170
for for this instance we we have a lot

00:09:16,040 --> 00:09:21,350
more that we want to do and because it

00:09:18,170 --> 00:09:24,710
runs during CI the layers don't

00:09:21,350 --> 00:09:27,530
necessarily matter as much in this case

00:09:24,710 --> 00:09:31,190
I've kept everything inside of this one

00:09:27,530 --> 00:09:32,840
run command which would get a little bit

00:09:31,190 --> 00:09:36,050
tricky to debug if you have any problems

00:09:32,840 --> 00:09:38,840
with it but you don't tend to rebuild it

00:09:36,050 --> 00:09:43,190
very often and when it gets run during

00:09:38,840 --> 00:09:45,830
CI or testing your executors such as

00:09:43,190 --> 00:09:47,630
Jenkins or something else is probably

00:09:45,830 --> 00:09:51,580
going to cache the image locally anyway

00:09:47,630 --> 00:09:51,580
so it won't just keep the unload again

00:09:52,180 --> 00:10:01,250
so again we start off just with an image

00:09:56,120 --> 00:10:03,110
we copy say Prometheus prom tool if we

00:10:01,250 --> 00:10:05,510
have some sort of Prometheus that we

00:10:03,110 --> 00:10:09,470
want to debug and then when you bring in

00:10:05,510 --> 00:10:12,350
a bunch of dependencies just from the

00:10:09,470 --> 00:10:16,030
command line tools and then we set up

00:10:12,350 --> 00:10:18,860
say our linty aisle coverage generator

00:10:16,030 --> 00:10:21,920
AWS CLI or whatever else it is that we

00:10:18,860 --> 00:10:25,100
need once we build the image we push it

00:10:21,920 --> 00:10:27,050
to our registry and then our CI tool can

00:10:25,100 --> 00:10:29,480
make use of it whenever it needs to use

00:10:27,050 --> 00:10:31,370
it worst comes to worse we can always

00:10:29,480 --> 00:10:32,660
pull this locally as well and that way

00:10:31,370 --> 00:10:35,830
we don't have to install any of these

00:10:32,660 --> 00:10:35,830
tools in our local machines

00:10:36,160 --> 00:10:45,800
speaking of local we have a lot one

00:10:41,540 --> 00:10:48,890
other idea I was thinking about so not

00:10:45,800 --> 00:10:53,120
just for development sake but let's say

00:10:48,890 --> 00:10:55,240
I have my own server at home I've got my

00:10:53,120 --> 00:10:58,990
own ass I've got a bunch of storage

00:10:55,240 --> 00:11:02,090
maybe I want to run a home media set up

00:10:58,990 --> 00:11:03,640
maybe I'll use kubernetes

00:11:02,090 --> 00:11:06,150
just for this

00:11:03,640 --> 00:11:10,270
being able to run a bunch of containers

00:11:06,150 --> 00:11:12,670
so I might want to deploy a service or

00:11:10,270 --> 00:11:17,830
an application of mine into that cluster

00:11:12,670 --> 00:11:19,330
I could use my production image because

00:11:17,830 --> 00:11:21,700
that's what it's there for

00:11:19,330 --> 00:11:25,350
it's there to be deployed it runs that's

00:11:21,700 --> 00:11:28,090
it only difference is that in my own

00:11:25,350 --> 00:11:30,490
cluster I'm probably not going to be

00:11:28,090 --> 00:11:33,490
running the same tools as a proper

00:11:30,490 --> 00:11:36,250
production environment in production I

00:11:33,490 --> 00:11:38,440
might be running some crazy Prometheus

00:11:36,250 --> 00:11:40,210
cluster that gets a whole heap of

00:11:38,440 --> 00:11:42,100
metrics pushed to it and there's

00:11:40,210 --> 00:11:45,340
probably an elf cluster somewhere with

00:11:42,100 --> 00:11:49,330
petabytes of storage ready to be filled

00:11:45,340 --> 00:11:51,700
up with very useful logs but locally

00:11:49,330 --> 00:11:53,350
that might not be the case so I might

00:11:51,700 --> 00:11:59,500
want to run things slightly differently

00:11:53,350 --> 00:12:02,080
but also might just want to do the same

00:11:59,500 --> 00:12:06,720
thing the big difference here with

00:12:02,080 --> 00:12:08,770
production is the addition of curl

00:12:06,720 --> 00:12:12,250
because it's good for debugging

00:12:08,770 --> 00:12:13,810
sometimes and bash but it's sticking

00:12:12,250 --> 00:12:17,260
with Alpine so it's still relatively

00:12:13,810 --> 00:12:21,010
small and we don't pull from scratch and

00:12:17,260 --> 00:12:24,090
that way we've got roughly busybox but

00:12:21,010 --> 00:12:26,680
alpine available so locally we can still

00:12:24,090 --> 00:12:28,660
SSH in we can get a bit of visibility we

00:12:26,680 --> 00:12:31,510
can poke around we can make sure it's

00:12:28,660 --> 00:12:35,350
all good but slightly different in

00:12:31,510 --> 00:12:42,340
production the development on the other

00:12:35,350 --> 00:12:45,790
hand is a bit more tricky we could be

00:12:42,340 --> 00:12:47,590
tempted to just bring everything in use

00:12:45,790 --> 00:12:50,680
the same sort of setup as what we did

00:12:47,590 --> 00:12:55,560
with CIN testing and just be done with

00:12:50,680 --> 00:12:58,330
it but do we really want to do that it's

00:12:55,560 --> 00:13:00,010
it's not quite the same there's this

00:12:58,330 --> 00:13:02,500
slightly different tools maybe we want

00:13:00,010 --> 00:13:04,540
to have a debugger locally but we

00:13:02,500 --> 00:13:07,510
wouldn't necessarily want that in

00:13:04,540 --> 00:13:10,810
testing or maybe we would have different

00:13:07,510 --> 00:13:15,190
images that we would use say for the AWS

00:13:10,810 --> 00:13:19,430
CLI so we can do it differently

00:13:15,190 --> 00:13:25,579
in this case maybe we actually want to

00:13:19,430 --> 00:13:28,130
have a full application that we build a

00:13:25,579 --> 00:13:30,860
front-end as well but we don't want to

00:13:28,130 --> 00:13:33,980
separate our front end and our back end

00:13:30,860 --> 00:13:36,950
too much so we we might bring in node

00:13:33,980 --> 00:13:38,680
and yarn and that way we can compile and

00:13:36,950 --> 00:13:41,180
generate our front end assets and

00:13:38,680 --> 00:13:43,730
because maybe we want to you know pull

00:13:41,180 --> 00:13:45,769
them into the the gobo Henry so when we

00:13:43,730 --> 00:13:48,740
have finished building our application

00:13:45,769 --> 00:13:51,140
we just have one binary there's no js'

00:13:48,740 --> 00:13:53,480
or CSS that we we need to include from

00:13:51,140 --> 00:13:56,750
somewhere else so we can do that here

00:13:53,480 --> 00:13:58,940
and then for our development we've got

00:13:56,750 --> 00:14:04,269
all those tools ready to go in that one

00:13:58,940 --> 00:14:07,279
container or one image one of the really

00:14:04,269 --> 00:14:11,380
useful things about images and building

00:14:07,279 --> 00:14:14,390
them is the concept of multistage bills

00:14:11,380 --> 00:14:18,500
this was back what was used in the

00:14:14,390 --> 00:14:20,990
production image where we have multiple

00:14:18,500 --> 00:14:22,430
from statements and we can pick and

00:14:20,990 --> 00:14:26,089
choose what happens in different

00:14:22,430 --> 00:14:30,320
sections and and then it's only the the

00:14:26,089 --> 00:14:34,480
targeted from section that the layers

00:14:30,320 --> 00:14:37,490
get kept as a part of that image itself

00:14:34,480 --> 00:14:39,350
so it means that we can catch bunches of

00:14:37,490 --> 00:14:42,490
steps we can pull from different base

00:14:39,350 --> 00:14:45,800
images we can have completely different

00:14:42,490 --> 00:14:48,079
environment commands run to pre generate

00:14:45,800 --> 00:14:51,790
a whole bunch of stuff but what we end

00:14:48,079 --> 00:14:59,510
up with at the end is just a very simple

00:14:51,790 --> 00:15:03,860
basic setup so in this case taking that

00:14:59,510 --> 00:15:07,990
a front-end for full application we

00:15:03,860 --> 00:15:11,300
could start off with say using the node

00:15:07,990 --> 00:15:12,649
image we can give it an alias just to

00:15:11,300 --> 00:15:15,709
make it a bit nicer to reason about

00:15:12,649 --> 00:15:18,940
we'll call it Fe we copy across our

00:15:15,709 --> 00:15:20,390
application code and then we yarn build

00:15:18,940 --> 00:15:22,630
it'll do its thing

00:15:20,390 --> 00:15:25,040
you know there's a whole heap of

00:15:22,630 --> 00:15:26,730
dependencies it'll pull down on whatever

00:15:25,040 --> 00:15:30,329
other processing

00:15:26,730 --> 00:15:32,910
we'll end up with some compliant assets

00:15:30,329 --> 00:15:36,300
at the end and then we start our next

00:15:32,910 --> 00:15:39,810
stage and from this stage we would start

00:15:36,300 --> 00:15:41,880
with go and then again we we copy across

00:15:39,810 --> 00:15:44,070
our local file system but then we can

00:15:41,880 --> 00:15:48,110
also copy across those compliant assets

00:15:44,070 --> 00:15:51,269
from the front end built so there's no

00:15:48,110 --> 00:15:54,120
node there's no yarn there's no front

00:15:51,269 --> 00:15:56,699
end component as a part of this second

00:15:54,120 --> 00:15:59,250
stage we just pull whatever was already

00:15:56,699 --> 00:16:03,209
compiled because we can take that from

00:15:59,250 --> 00:16:07,649
this first stage we can then go ahead

00:16:03,209 --> 00:16:11,420
and compile our final binary which we'll

00:16:07,649 --> 00:16:14,660
pull in those assets as been data and

00:16:11,420 --> 00:16:20,100
it's ready to go

00:16:14,660 --> 00:16:21,750
so considerations there's a few to think

00:16:20,100 --> 00:16:25,019
about when it comes to the deployed

00:16:21,750 --> 00:16:28,440
image this is the one that I have the

00:16:25,019 --> 00:16:31,350
most the most discussions about with

00:16:28,440 --> 00:16:33,360
people talking about images because

00:16:31,350 --> 00:16:36,089
oftentimes people just end up with a

00:16:33,360 --> 00:16:38,579
kitchen sink approach they install

00:16:36,089 --> 00:16:41,490
everything they have PHP running they

00:16:38,579 --> 00:16:44,459
have Ruby in there they've got node and

00:16:41,490 --> 00:16:47,490
whatever else but really they're just

00:16:44,459 --> 00:16:49,019
running a go binary so it's why why do

00:16:47,490 --> 00:16:50,940
they have all over all of these things

00:16:49,019 --> 00:16:53,130
installed not only does it use bandwidth

00:16:50,940 --> 00:16:58,440
it also opens up a lot of security holes

00:16:53,130 --> 00:17:00,060
and it's just hard to work with so one

00:16:58,440 --> 00:17:02,660
of the biggest things is to think about

00:17:00,060 --> 00:17:05,429
the environment that a container you

00:17:02,660 --> 00:17:08,429
running from an image is going to be

00:17:05,429 --> 00:17:10,110
running in if you're running in a

00:17:08,429 --> 00:17:12,240
kubernetes cluster there's a very good

00:17:10,110 --> 00:17:16,020
chance that you've already got some

00:17:12,240 --> 00:17:17,970
monitoring and log capturing tooling so

00:17:16,020 --> 00:17:22,760
you probably don't need to have any of

00:17:17,970 --> 00:17:22,760
those tools pre-built into your image

00:17:23,150 --> 00:17:30,240
you also can get a bit tricky with the

00:17:26,730 --> 00:17:32,429
way that you you actually run things one

00:17:30,240 --> 00:17:37,070
of my favorite examples is what I've

00:17:32,429 --> 00:17:39,960
mentioned here with PHP fpm I've seen

00:17:37,070 --> 00:17:42,150
some setups where too

00:17:39,960 --> 00:17:44,370
images are being built for a single pod

00:17:42,150 --> 00:17:47,490
to run two separate containers one for

00:17:44,370 --> 00:17:49,770
nginx and one for PHP fpm but they're

00:17:47,490 --> 00:17:51,630
being built as separate images so

00:17:49,770 --> 00:17:53,670
instead of just having nginx running on

00:17:51,630 --> 00:17:59,330
proxying to the other container they

00:17:53,670 --> 00:18:01,920
have built a second image and the the

00:17:59,330 --> 00:18:04,470
most common excuse I was given was that

00:18:01,920 --> 00:18:05,400
or nginx needs to serve static assets so

00:18:04,470 --> 00:18:08,790
it needs the filesystem

00:18:05,400 --> 00:18:10,640
and I'd say well that's great why don't

00:18:08,790 --> 00:18:13,440
you just create a shared volume and

00:18:10,640 --> 00:18:17,550
mount it into both and then put the

00:18:13,440 --> 00:18:19,970
files into that volume and they just

00:18:17,550 --> 00:18:23,270
stared blankly at me for five minutes

00:18:19,970 --> 00:18:25,650
but it's it's easy enough to do in

00:18:23,270 --> 00:18:28,110
setups such as Cuban eighties that have

00:18:25,650 --> 00:18:30,180
a very comprehensive definition that

00:18:28,110 --> 00:18:36,830
allows you to to set up that type of

00:18:30,180 --> 00:18:40,350
execution another another big concept is

00:18:36,830 --> 00:18:42,660
making sure that you can inject the

00:18:40,350 --> 00:18:45,480
right configuration so an image

00:18:42,660 --> 00:18:48,570
shouldn't have information about the

00:18:45,480 --> 00:18:52,260
environment that it's running as so a

00:18:48,570 --> 00:18:55,110
container that is an execution of an

00:18:52,260 --> 00:18:57,240
image wouldn't know that it's running in

00:18:55,110 --> 00:19:00,390
production or staging or local

00:18:57,240 --> 00:19:02,280
development but the image itself has no

00:19:00,390 --> 00:19:06,240
concept exists it might have an

00:19:02,280 --> 00:19:09,540
environment variable environment which

00:19:06,240 --> 00:19:12,660
would then use in place of knowing about

00:19:09,540 --> 00:19:14,580
any of those individuals but that should

00:19:12,660 --> 00:19:16,650
really be it all the images should be

00:19:14,580 --> 00:19:18,810
agnostic and that way they cannot be

00:19:16,650 --> 00:19:23,430
applied without having to be rebuilt

00:19:18,810 --> 00:19:26,700
over and over again there's there's a

00:19:23,430 --> 00:19:30,480
few little bits here extra I'm a big fan

00:19:26,700 --> 00:19:33,030
of using docker ignore this way you can

00:19:30,480 --> 00:19:35,220
use copy dot rather than having copy

00:19:33,030 --> 00:19:37,080
individual file copy individual file

00:19:35,220 --> 00:19:41,580
because each copy will add a separate

00:19:37,080 --> 00:19:41,940
layer which becomes bad or can become

00:19:41,580 --> 00:19:44,760
bad

00:19:41,940 --> 00:19:50,790
so someone why docker ignore files have

00:19:44,760 --> 00:19:52,920
50 lines just to get rid of parts but

00:19:50,790 --> 00:19:55,860
really my big point with a lot

00:19:52,920 --> 00:19:59,370
this is just to prepare a bit ahead of

00:19:55,860 --> 00:20:01,560
time 15 20 minutes now just a reason

00:19:59,370 --> 00:20:05,040
about how things will run can

00:20:01,560 --> 00:20:09,210
potentially save a lot of time a lot of

00:20:05,040 --> 00:20:12,900
bandwidth and a lot of cost later use

00:20:09,210 --> 00:20:15,450
use scanning tools just to check for

00:20:12,900 --> 00:20:18,180
various defects vulnerabilities whatever

00:20:15,450 --> 00:20:20,490
might be a couple I've played with

00:20:18,180 --> 00:20:22,490
before a dive and Claire and I've added

00:20:20,490 --> 00:20:27,690
the links down the bottom here for those

00:20:22,490 --> 00:20:29,820
and yet caching is one of the the

00:20:27,690 --> 00:20:32,190
biggest benefits in general here

00:20:29,820 --> 00:20:38,160
especially just with the images and

00:20:32,190 --> 00:20:53,790
having them ready to go thank you very

00:20:38,160 --> 00:20:55,440
much yeah any questions so I think if I

00:20:53,790 --> 00:20:57,390
tried this my Deb's would freak out and

00:20:55,440 --> 00:20:59,760
say we're deploying different things to

00:20:57,390 --> 00:21:06,290
give them what we're going for in

00:20:59,760 --> 00:21:08,850
production therefore interesting yep so

00:21:06,290 --> 00:21:12,170
the way that I've tackled this in the

00:21:08,850 --> 00:21:15,770
past is to build say a deployed image

00:21:12,170 --> 00:21:20,130
during the CI process and then run that

00:21:15,770 --> 00:21:23,400
in the CI process and I guess simulate

00:21:20,130 --> 00:21:25,770
traffic so that way you're still

00:21:23,400 --> 00:21:28,410
deploying the same image to your

00:21:25,770 --> 00:21:31,560
production infrastructure but in dev

00:21:28,410 --> 00:21:35,670
like you might still piggyback from the

00:21:31,560 --> 00:21:38,280
same OS so your dev environment would

00:21:35,670 --> 00:21:40,890
have like a fool Ubuntu setup but your

00:21:38,280 --> 00:21:43,800
prod you built from a bun to but

00:21:40,890 --> 00:21:47,550
depending on your language it might not

00:21:43,800 --> 00:21:50,550
run inside of a bun to go is the example

00:21:47,550 --> 00:21:53,730
because it doesn't need a full OS but

00:21:50,550 --> 00:21:56,100
Ruby or PHP or a whole bunch of others

00:21:53,730 --> 00:21:58,500
you still need you need all the

00:21:56,100 --> 00:22:03,000
accompanying environments that are now

00:21:58,500 --> 00:22:05,360
available those sorts of things are very

00:22:03,000 --> 00:22:07,489
good to to consider and

00:22:05,360 --> 00:22:10,210
you might not end up going down a very

00:22:07,489 --> 00:22:12,710
hard line approach as what I've

00:22:10,210 --> 00:22:15,409
discussed but there's still a lot of

00:22:12,710 --> 00:22:27,540
things that you could take away to save

00:22:15,409 --> 00:22:33,340
time or effort thank you

00:22:27,540 --> 00:22:33,340

YouTube URL: https://www.youtube.com/watch?v=TJWA4dqvxqs


