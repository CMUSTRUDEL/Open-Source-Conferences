Title: "You Shall Not Pass" - Peter Burnett (LCA 2020)
Publication date: 2020-01-15
Playlist: linux.conf.au 2020
Description: 
	Peter Burnett

https://lca2020.linux.org.au/schedule/presentation/121/

Moodle is an open source learning management system, popular with universities. As Moodle has aged, some aspects of its security have fallen well behind industry standards for security. This talk will discuss the measures that have been taken to bring it up to scratch, and the ways that this can be applied to any application. The first priority in improving the security of the platform was targeting its password policy, which suffers from the older model of 'You must have atleast 2 uppercase characters'. To address this, a new plugin was developed for the platform, which acts much more in line with current NIST guidelines, including checks for compromised passwords using the HaveIBeenPwned API, and a user's personal information. This talk will show the guidelines we worked against, and how it can be applied to any applications password flow.

The next challenge to tackle was the lack of ways to augment an authentication flow. There are a huge amount of ways to authenticate to a Moodle, with support for all major SSO services, however, no potential to augment this process with additional tools such as MFA. To this end, work was done with Moodle HQ to implement a platform for this functionality on all pages that require higher security, such as changing and resetting a user's password. This talk will discuss what we learned along the way, and how to avoid common problems when implementing an MFA system such as security questions.

Finally, this talk will discuss the work that we are doing to implement MFA in a way that works alongside other authentication methods, such as SSO, with discussion on alternative factors, such as trusted IP networks.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Tue Jan 14 14:40:00 2020 at Room 6
Captions: 
	00:00:00,000 --> 00:00:04,110
next we have Peter Peters a PHP

00:00:02,340 --> 00:00:06,210
developer who's gonna be talking to us

00:00:04,110 --> 00:00:08,670
about Moodle so he's gonna be talking

00:00:06,210 --> 00:00:09,900
about some of the ways that we can fix

00:00:08,670 --> 00:00:11,580
some of the issues that we've been

00:00:09,900 --> 00:00:13,170
talking about today so hopefully this

00:00:11,580 --> 00:00:23,970
would be a little bit more update than

00:00:13,170 --> 00:00:24,570
some of their previous talks today hi

00:00:23,970 --> 00:00:27,330
sir

00:00:24,570 --> 00:00:29,880
yeah I'm Peter I'm a PHP dev and for the

00:00:27,330 --> 00:00:31,650
past six months or so I have been

00:00:29,880 --> 00:00:33,809
working on Moodle which is an open

00:00:31,650 --> 00:00:36,420
source learning management system so

00:00:33,809 --> 00:00:37,860
this talk is generally aimed at people

00:00:36,420 --> 00:00:40,170
that aren't necessarily security

00:00:37,860 --> 00:00:42,270
aficionados but more maybe general devs

00:00:40,170 --> 00:00:44,820
even end-users who want to jump into

00:00:42,270 --> 00:00:46,469
programming stuff maybe looking at the

00:00:44,820 --> 00:00:50,460
security of the applications you use is

00:00:46,469 --> 00:00:53,280
a good place to start so just a little

00:00:50,460 --> 00:00:55,440
bit about me I'm mostly back-end I don't

00:00:53,280 --> 00:00:57,809
really do much front-end stuff I work

00:00:55,440 --> 00:01:00,120
for catalyst IT Australia were actually

00:00:57,809 --> 00:01:02,010
a sponsor of this conference and we

00:01:00,120 --> 00:01:02,940
mostly do open source e stuff so it's

00:01:02,010 --> 00:01:06,510
really quite relevant

00:01:02,940 --> 00:01:08,580
I graduated from QUT s on Brisbane base

00:01:06,510 --> 00:01:13,770
that's where I'm from and I included my

00:01:08,580 --> 00:01:15,330
cat he's very cute sir just some context

00:01:13,770 --> 00:01:19,409
for this discussion it's mostly going to

00:01:15,330 --> 00:01:21,659
be kind of tangential to Moodle it can

00:01:19,409 --> 00:01:23,400
be very generalized the advice but

00:01:21,659 --> 00:01:25,020
Moodle it's an open source learning

00:01:23,400 --> 00:01:26,520
management system maybe some of you have

00:01:25,020 --> 00:01:28,680
heard of it it is kind of a niche

00:01:26,520 --> 00:01:32,850
product but it's a big open source

00:01:28,680 --> 00:01:35,880
application so it's free it's open

00:01:32,850 --> 00:01:37,710
source its primary use is in the higher

00:01:35,880 --> 00:01:40,159
education and training space you know

00:01:37,710 --> 00:01:42,540
universities training colleges safes

00:01:40,159 --> 00:01:45,119
some governments like to use it for

00:01:42,540 --> 00:01:48,049
competency and compliance tracking that

00:01:45,119 --> 00:01:51,360
kind of thing it's all written in PHP

00:01:48,049 --> 00:01:53,100
it's on seven so that's that's good and

00:01:51,360 --> 00:01:54,810
its headquarters is actually in Perth

00:01:53,100 --> 00:01:57,390
Australia so it's it's an Australian

00:01:54,810 --> 00:01:58,619
product but there are some satellite

00:01:57,390 --> 00:02:04,619
offices I think there's one in Barcelona

00:01:58,619 --> 00:02:08,160
as well sir Moodle is a legacy system

00:02:04,619 --> 00:02:12,569
for us developed in 1997 it went open in

00:02:08,160 --> 00:02:13,650
2001 it's 20 years old it's generally

00:02:12,569 --> 00:02:16,019
aged pretty well

00:02:13,650 --> 00:02:19,709
but it does have an interesting mix of

00:02:16,019 --> 00:02:21,540
legacy code and new code all new stuff

00:02:19,709 --> 00:02:23,790
kind of has very high standards there's

00:02:21,540 --> 00:02:27,180
automated code checking style checking

00:02:23,790 --> 00:02:28,620
unit tests reviews from peers reviews

00:02:27,180 --> 00:02:30,209
from headquarters which I'll touch on a

00:02:28,620 --> 00:02:32,849
little bit later on but it's quite

00:02:30,209 --> 00:02:34,260
stringent to get new code in there but

00:02:32,849 --> 00:02:35,939
the older stuff can be a little hit or

00:02:34,260 --> 00:02:37,560
miss and sometimes they're sandwiched

00:02:35,939 --> 00:02:39,450
right together in the same class which

00:02:37,560 --> 00:02:44,549
is an interesting interesting mix of

00:02:39,450 --> 00:02:48,450
code to work on sir as it's aged

00:02:44,549 --> 00:02:51,209
security ages as well and it varies a

00:02:48,450 --> 00:02:52,859
little bit in strength and sanity some

00:02:51,209 --> 00:02:55,680
really good things that it does you know

00:02:52,859 --> 00:02:58,470
well - - standard password hash storage

00:02:55,680 --> 00:03:00,659
is is done through PHP which has a sane

00:02:58,470 --> 00:03:03,420
algorithm behind it that is is strong

00:03:00,659 --> 00:03:05,670
and secure and it's access controls are

00:03:03,420 --> 00:03:08,519
really quite powerful checked everywhere

00:03:05,670 --> 00:03:11,879
and and quite granular so that stuff's

00:03:08,519 --> 00:03:15,150
done really well but some things not so

00:03:11,879 --> 00:03:16,680
much so the password policy yeah it's

00:03:15,150 --> 00:03:18,410
not great has a lot of anti patterns

00:03:16,680 --> 00:03:21,180
that we'll discuss in just a second and

00:03:18,410 --> 00:03:22,980
the authentication flow author also

00:03:21,180 --> 00:03:24,720
suffers from a bit of a lack of

00:03:22,980 --> 00:03:29,970
customized ability and layering which

00:03:24,720 --> 00:03:31,290
I'll explain in a little bit so the

00:03:29,970 --> 00:03:33,239
first thing we did look at when we

00:03:31,290 --> 00:03:34,859
needed to actually increase the security

00:03:33,239 --> 00:03:36,060
of this product as a vendor we need to

00:03:34,859 --> 00:03:39,150
make sure what we're what we're giving

00:03:36,060 --> 00:03:40,829
people is secure and the password policy

00:03:39,150 --> 00:03:42,840
wasn't fantastic you can see here this

00:03:40,829 --> 00:03:45,199
is a screenshot that I took from the

00:03:42,840 --> 00:03:48,090
master code this morning

00:03:45,199 --> 00:03:49,709
it's very antiquated the old you must

00:03:48,090 --> 00:03:51,989
have at least one lower case upper case

00:03:49,709 --> 00:03:56,040
and a special character it's really not

00:03:51,989 --> 00:03:58,019
what you aim for so we had to think if

00:03:56,040 --> 00:04:01,859
we're gonna fix this what standards

00:03:58,019 --> 00:04:04,079
should we actually aim for now this is

00:04:01,859 --> 00:04:06,000
really applicable to to anything if it's

00:04:04,079 --> 00:04:08,099
not at this level and it's an open

00:04:06,000 --> 00:04:09,840
source application you guys can fix it

00:04:08,099 --> 00:04:12,299
and that's kind of what this talk is

00:04:09,840 --> 00:04:14,459
about while it's centered around Moodle

00:04:12,299 --> 00:04:16,320
it's applicable anywhere if you've got

00:04:14,459 --> 00:04:19,109
an app or a service that that you like

00:04:16,320 --> 00:04:20,250
to use and you're not security aware but

00:04:19,109 --> 00:04:23,520
you know that these things aren't being

00:04:20,250 --> 00:04:26,010
done well you could fix them but some

00:04:23,520 --> 00:04:27,550
standards to aim for the most sane

00:04:26,010 --> 00:04:29,740
password standards generally come

00:04:27,550 --> 00:04:31,449
nist which is the National Institute of

00:04:29,740 --> 00:04:35,470
Standards and technology's I believe in

00:04:31,449 --> 00:04:36,879
the u.s. in 2018 they released a pretty

00:04:35,470 --> 00:04:39,520
comprehensive guide on a bunch of

00:04:36,879 --> 00:04:42,240
security things but one of them that

00:04:39,520 --> 00:04:44,919
they really targeted was passwords and

00:04:42,240 --> 00:04:48,370
they really aim to make passwords more

00:04:44,919 --> 00:04:50,050
accessible for your average user instead

00:04:48,370 --> 00:04:51,729
of being hard to remember complicated

00:04:50,050 --> 00:04:53,379
with character substitutions they focus

00:04:51,729 --> 00:04:55,900
on changing the paradigm so that it's

00:04:53,379 --> 00:04:59,710
instead more centered around things that

00:04:55,900 --> 00:05:03,729
are rememberable this is a great example

00:04:59,710 --> 00:05:06,190
of a terrible password most of you are

00:05:03,729 --> 00:05:10,389
probably familiar with the xkcd correct

00:05:06,190 --> 00:05:11,650
horse battery staple which is kind of

00:05:10,389 --> 00:05:13,840
what you want to aim for in a password

00:05:11,650 --> 00:05:15,400
but this is an example of what not to

00:05:13,840 --> 00:05:18,159
aim for you can see here there's

00:05:15,400 --> 00:05:21,030
character substitution is prone to

00:05:18,159 --> 00:05:24,969
sequencing and it's prone to repetition

00:05:21,030 --> 00:05:26,469
so sequencing is when you know a user

00:05:24,969 --> 00:05:28,030
might be forced to change their password

00:05:26,469 --> 00:05:30,400
and they change it from flower one two

00:05:28,030 --> 00:05:31,960
three to flower two three four you want

00:05:30,400 --> 00:05:34,330
to avoid that behavior and avoid

00:05:31,960 --> 00:05:36,130
enabling that behavior because it means

00:05:34,330 --> 00:05:37,389
like people will do it if they don't

00:05:36,130 --> 00:05:38,620
have to remember a new thing when they

00:05:37,389 --> 00:05:39,819
are forced to change their password

00:05:38,620 --> 00:05:41,889
they'll they'll do the least amount

00:05:39,819 --> 00:05:43,690
impossible when changing it to keep it

00:05:41,889 --> 00:05:46,960
in their heads so you want to move away

00:05:43,690 --> 00:05:49,900
from that so the most important things

00:05:46,960 --> 00:05:51,490
NIST generally recommends are as I

00:05:49,900 --> 00:05:54,490
mentioned don't force a pattern don't

00:05:51,490 --> 00:05:56,379
allow things like sequencing generally

00:05:54,490 --> 00:05:59,889
don't allow things like number sequences

00:05:56,379 --> 00:06:01,569
or anything like that as well and you

00:05:59,889 --> 00:06:04,479
want to check for things like dictionary

00:06:01,569 --> 00:06:06,960
based passwords and identifying

00:06:04,479 --> 00:06:08,979
passwords so the dictionary based one is

00:06:06,960 --> 00:06:11,469
relatively important because a lot of

00:06:08,979 --> 00:06:13,629
people will base that they'll make their

00:06:11,469 --> 00:06:15,190
password flower 1-2-3 and if they've got

00:06:13,629 --> 00:06:16,900
a compromised password somewhere else

00:06:15,190 --> 00:06:18,250
that's flower an attacker now has a

00:06:16,900 --> 00:06:20,680
really good place to start

00:06:18,250 --> 00:06:22,629
a dictionary attack so you really want

00:06:20,680 --> 00:06:23,770
to kind of as much as you can stop

00:06:22,629 --> 00:06:26,110
people from using a single dictionary

00:06:23,770 --> 00:06:29,319
word because just having two words even

00:06:26,110 --> 00:06:31,770
really ramps up the complexity and makes

00:06:29,319 --> 00:06:33,909
a dictionary attack a lot less effective

00:06:31,770 --> 00:06:37,029
another thing to check for is

00:06:33,909 --> 00:06:38,199
identifying passwords you really don't

00:06:37,029 --> 00:06:40,330
want someone to have their information

00:06:38,199 --> 00:06:42,610
inside their password

00:06:40,330 --> 00:06:45,669
you know people generally will tend to

00:06:42,610 --> 00:06:48,970
have your kids birthdays their own

00:06:45,669 --> 00:06:51,039
birthdays their own name city you know

00:06:48,970 --> 00:06:53,050
there's a lot of compromise stuff I went

00:06:51,039 --> 00:06:57,460
on a binge of seeing what I could find

00:06:53,050 --> 00:06:59,830
inside the have I been passed what pwned

00:06:57,460 --> 00:07:01,360
password API with my own details and

00:06:59,830 --> 00:07:02,770
there was a ton of compromised passwords

00:07:01,360 --> 00:07:06,099
based on that kind of stuff like my name

00:07:02,770 --> 00:07:07,509
so people are doing this so you really

00:07:06,099 --> 00:07:09,190
don't want to allow that that kind of

00:07:07,509 --> 00:07:11,800
leads into the third and most important

00:07:09,190 --> 00:07:15,729
point you need to check for compromised

00:07:11,800 --> 00:07:17,530
passwords like every service should

00:07:15,729 --> 00:07:20,530
realistically be doing this that takes a

00:07:17,530 --> 00:07:23,050
password all it takes is one data dump

00:07:20,530 --> 00:07:26,110
an email and a password and now your

00:07:23,050 --> 00:07:30,880
service is vulnerable to it no malicious

00:07:26,110 --> 00:07:33,430
user so talking about the have I been

00:07:30,880 --> 00:07:39,060
pwned API if you're not familiar with it

00:07:33,430 --> 00:07:41,199
it is fantastic it's free it's easy and

00:07:39,060 --> 00:07:42,759
really going back to this can be applied

00:07:41,199 --> 00:07:46,060
to anything if you've got an app or a

00:07:42,759 --> 00:07:47,440
service that you use you maintain you

00:07:46,060 --> 00:07:50,169
know you've developed maybe you're not

00:07:47,440 --> 00:07:52,810
the security aficionado as I said but

00:07:50,169 --> 00:07:54,550
you are a developer you can put this in

00:07:52,810 --> 00:07:57,099
you can check for compromised passwords

00:07:54,550 --> 00:07:59,830
and you absolutely should it's really

00:07:57,099 --> 00:08:01,419
really easy like you've got their

00:07:59,830 --> 00:08:04,389
password you're deciding whether to

00:08:01,419 --> 00:08:07,030
allow it sha-1 hash you send the first

00:08:04,389 --> 00:08:08,530
five characters to the API you get the

00:08:07,030 --> 00:08:10,750
hashes back and you just check for a

00:08:08,530 --> 00:08:12,909
match it's it's that easy you don't have

00:08:10,750 --> 00:08:15,699
to transmit any actual identifying data

00:08:12,909 --> 00:08:19,150
you know partial hashes is nothing it's

00:08:15,699 --> 00:08:21,789
garbage so it's very very secure it's

00:08:19,150 --> 00:08:23,409
very safe and it's that easy this is an

00:08:21,789 --> 00:08:25,030
implementation I wrote yesterday in

00:08:23,409 --> 00:08:27,069
Python it might be terrible i don't

00:08:25,030 --> 00:08:30,849
write python that much but it's ten

00:08:27,069 --> 00:08:33,610
lines like it really is that easy to

00:08:30,849 --> 00:08:34,899
actually just check whether a password

00:08:33,610 --> 00:08:36,640
is compromised and that really is the

00:08:34,899 --> 00:08:41,740
biggest security flaw in many cases

00:08:36,640 --> 00:08:43,149
because people do reuse passwords so

00:08:41,740 --> 00:08:45,610
just to talk a little more about the

00:08:43,149 --> 00:08:47,230
dictionary checks as well passwords

00:08:45,610 --> 00:08:49,209
based on a single dictionary word are

00:08:47,230 --> 00:08:51,339
weak stringing them together makes them

00:08:49,209 --> 00:08:53,380
much more secure by leaps and bounds

00:08:51,339 --> 00:08:54,310
just due to dictionary attacks but you

00:08:53,380 --> 00:08:56,500
don't have to

00:08:54,310 --> 00:08:59,110
a huge dictionary for what you're

00:08:56,500 --> 00:09:00,910
actually checking against it doesn't

00:08:59,110 --> 00:09:03,250
have to be an exhaustive list the top

00:09:00,910 --> 00:09:06,610
10,000 English words by frequency they

00:09:03,250 --> 00:09:07,960
cover 97% of used words and in general

00:09:06,610 --> 00:09:09,070
that's probably what people are thinking

00:09:07,960 --> 00:09:11,260
about when they're creating a password

00:09:09,070 --> 00:09:12,940
they're not thinking of the most

00:09:11,260 --> 00:09:14,140
esoteric word they can come up with you

00:09:12,940 --> 00:09:15,940
know maybe it's based off something they

00:09:14,140 --> 00:09:19,330
see or know or are listening to on the

00:09:15,940 --> 00:09:21,100
radio so it doesn't have to be an

00:09:19,330 --> 00:09:24,040
exhaustive list and it's really easy to

00:09:21,100 --> 00:09:25,630
find big dictionaries online there's

00:09:24,040 --> 00:09:28,930
plenty on github a lot of them are based

00:09:25,630 --> 00:09:29,950
off the Google trillion word project

00:09:28,930 --> 00:09:32,410
that they did a while back and they

00:09:29,950 --> 00:09:33,850
released the data for that some people

00:09:32,410 --> 00:09:35,830
have curated that removed swear words

00:09:33,850 --> 00:09:38,740
and stuff like that so it's easy to find

00:09:35,830 --> 00:09:42,310
a list to check against and it's an easy

00:09:38,740 --> 00:09:43,990
way to actually make sure that

00:09:42,310 --> 00:09:48,100
dictionary attacks you're not some a

00:09:43,990 --> 00:09:50,320
platform that that's vulnerable to it so

00:09:48,100 --> 00:09:52,510
identifying information as well just to

00:09:50,320 --> 00:09:55,060
touch a little more on it things like

00:09:52,510 --> 00:09:57,250
birthdays names cities are all things to

00:09:55,060 --> 00:09:59,680
look out for now you might not have a

00:09:57,250 --> 00:10:01,030
whole lot of user data you might have

00:09:59,680 --> 00:10:02,490
you know very little it might be an

00:10:01,030 --> 00:10:04,750
anonymous service even in which case

00:10:02,490 --> 00:10:06,880
don't have to care but if you do store

00:10:04,750 --> 00:10:10,210
anything you should check for what you

00:10:06,880 --> 00:10:12,339
have because people do use that I've

00:10:10,210 --> 00:10:14,320
seen people use the service name as the

00:10:12,339 --> 00:10:17,050
basis of the password there's people who

00:10:14,320 --> 00:10:18,490
use their own name people who use their

00:10:17,050 --> 00:10:20,290
kids names and stuff like that so you

00:10:18,490 --> 00:10:21,250
really just check what you have because

00:10:20,290 --> 00:10:23,589
you're not going to have all the

00:10:21,250 --> 00:10:25,270
information and if it's the kid's name

00:10:23,589 --> 00:10:27,970
kid's birthday you're probably not gonna

00:10:25,270 --> 00:10:30,310
have that but if you do just check for

00:10:27,970 --> 00:10:35,740
it it's again very easy to just string

00:10:30,310 --> 00:10:38,980
match it so you can apply this anywhere

00:10:35,740 --> 00:10:42,610
it really is that simple and as I said

00:10:38,980 --> 00:10:44,560
if you've got an app that you use you

00:10:42,610 --> 00:10:46,839
can do this in many cases it's as easy

00:10:44,560 --> 00:10:50,260
as just opening a pull request on github

00:10:46,839 --> 00:10:51,790
it might go through it might not but

00:10:50,260 --> 00:10:52,270
this can be applied to larger services

00:10:51,790 --> 00:10:56,230
as well

00:10:52,270 --> 00:10:58,959
now Moodle big has a HQ enterprise level

00:10:56,230 --> 00:11:00,400
kind of stuff we work on that and we

00:10:58,959 --> 00:11:02,170
work with Moodle HQ but I'll run you

00:11:00,400 --> 00:11:04,930
through the process of how it actually

00:11:02,170 --> 00:11:07,089
happens so you can still submit patches

00:11:04,930 --> 00:11:07,950
yourself to these bigger applications if

00:11:07,089 --> 00:11:15,450
they're not doing it

00:11:07,950 --> 00:11:16,709
there's plenty out there sir going back

00:11:15,450 --> 00:11:19,110
to the passwords for a second

00:11:16,709 --> 00:11:21,329
essentially with all those checks we

00:11:19,110 --> 00:11:23,040
built something that does all this it's

00:11:21,329 --> 00:11:24,930
an open source plugin for Moodle and

00:11:23,040 --> 00:11:26,930
just released it for free on our github

00:11:24,930 --> 00:11:30,480
as we do with pretty much all of our

00:11:26,930 --> 00:11:32,310
Moodle extensions and that had a lot of

00:11:30,480 --> 00:11:34,290
additional functionality that I didn't

00:11:32,310 --> 00:11:35,790
really discuss in this little section on

00:11:34,290 --> 00:11:37,829
it I wanted to focus on the most

00:11:35,790 --> 00:11:39,779
important bits but things like you know

00:11:37,829 --> 00:11:41,790
number sequence avoiding don't allow one

00:11:39,779 --> 00:11:43,620
two three four in your password you know

00:11:41,790 --> 00:11:46,019
check for sequential digits iterating

00:11:43,620 --> 00:11:47,010
things repeated characters you can have

00:11:46,019 --> 00:11:49,260
a look at the code if you want to see

00:11:47,010 --> 00:11:51,000
all of the checks we actually did there

00:11:49,260 --> 00:11:53,660
are some stuff based off australian

00:11:51,000 --> 00:11:56,639
cyber center for cybersecurity

00:11:53,660 --> 00:12:00,320
recommendations as well that are a

00:11:56,639 --> 00:12:00,320
little stronger in in a couple of areas

00:12:00,589 --> 00:12:04,199
but now looking at authentication flow

00:12:03,089 --> 00:12:06,860
and this will tie back to how you can

00:12:04,199 --> 00:12:10,620
actually you know submit code against

00:12:06,860 --> 00:12:12,390
larger enterprise level applications the

00:12:10,620 --> 00:12:16,470
authentication flow from moodle after we

00:12:12,390 --> 00:12:18,959
had fixed the passwords had a core issue

00:12:16,470 --> 00:12:20,850
in that we couldn't really get the

00:12:18,959 --> 00:12:22,740
security model that we wanted with what

00:12:20,850 --> 00:12:24,300
was available inside of Moodle we

00:12:22,740 --> 00:12:26,070
couldn't stack things together or

00:12:24,300 --> 00:12:28,290
overlay functionality on an existing

00:12:26,070 --> 00:12:33,000
authentication flow the primary aim of

00:12:28,290 --> 00:12:35,730
this was multi-factor authentication so

00:12:33,000 --> 00:12:37,170
Moodle as a platform already has a huge

00:12:35,730 --> 00:12:40,290
range of authentication methods that it

00:12:37,170 --> 00:12:42,810
does support there was a lot of support

00:12:40,290 --> 00:12:46,709
in core for many common SSO s like LDAP

00:12:42,810 --> 00:12:48,390
went just natively supported and there's

00:12:46,709 --> 00:12:50,329
a huge third-party ecosystem that adds

00:12:48,390 --> 00:12:54,470
support for you know a bunch of other

00:12:50,329 --> 00:12:57,750
providers like like sam'l but the

00:12:54,470 --> 00:13:01,860
problem was in the case of something

00:12:57,750 --> 00:13:04,440
like a compromised password we didn't

00:13:01,860 --> 00:13:06,630
really have a defense mechanism against

00:13:04,440 --> 00:13:08,250
that we needed another layer of

00:13:06,630 --> 00:13:10,709
protection in place because if we've got

00:13:08,250 --> 00:13:12,360
a compromised password compromised user

00:13:10,709 --> 00:13:15,990
who knows what kind of nasty behavior

00:13:12,360 --> 00:13:17,370
they can get up to and all of this is

00:13:15,990 --> 00:13:18,720
still prone to compromised passwords

00:13:17,370 --> 00:13:20,600
that can still you know go to their LDAP

00:13:18,720 --> 00:13:23,149
server sign in and if there

00:13:20,600 --> 00:13:27,500
not protection in place there then then

00:13:23,149 --> 00:13:30,410
there in so the existing solutions had

00:13:27,500 --> 00:13:33,620
already were around there was things

00:13:30,410 --> 00:13:35,839
like you know MFA 2fa available but the

00:13:33,620 --> 00:13:39,259
problem is all of these things rely on a

00:13:35,839 --> 00:13:41,029
single authentication flow it sat on top

00:13:39,259 --> 00:13:44,240
of a regular password-protected account

00:13:41,029 --> 00:13:46,100
and so if you needed things like you

00:13:44,240 --> 00:13:47,899
know an SSO provider that's the only way

00:13:46,100 --> 00:13:49,850
you want people to be able to access

00:13:47,899 --> 00:13:53,360
your system then these things just

00:13:49,850 --> 00:13:55,339
weren't usable and so we had to have a

00:13:53,360 --> 00:13:57,949
think and decide whether we wanted to

00:13:55,339 --> 00:14:00,380
target specifically adding this

00:13:57,949 --> 00:14:02,329
functionality to the flows that we

00:14:00,380 --> 00:14:03,889
already supported you know sam'l is a

00:14:02,329 --> 00:14:06,769
big one for us whether we wanted to

00:14:03,889 --> 00:14:08,660
address sam'l in particular or take a

00:14:06,769 --> 00:14:11,810
higher-level approach on how we wanted

00:14:08,660 --> 00:14:14,930
to tackle this problem and so we looked

00:14:11,810 --> 00:14:17,180
at putting MFA on top of everything else

00:14:14,930 --> 00:14:19,279
that already exists you know augmenting

00:14:17,180 --> 00:14:20,959
the authentication flow and allowing

00:14:19,279 --> 00:14:23,329
stacking of different things on top of

00:14:20,959 --> 00:14:28,279
it rather than modifying just a single

00:14:23,329 --> 00:14:30,800
flow itself so a little bit of technical

00:14:28,279 --> 00:14:33,589
details on how we achieved that we built

00:14:30,800 --> 00:14:36,829
an interface layer in between users

00:14:33,589 --> 00:14:38,060
attempting to do any account actions so

00:14:36,829 --> 00:14:39,470
that will stop things like you know

00:14:38,060 --> 00:14:42,500
password resets and that kind of thing

00:14:39,470 --> 00:14:43,970
you can have MFA there you can not have

00:14:42,500 --> 00:14:45,889
it if you'd like but any place where a

00:14:43,970 --> 00:14:48,380
user was able to perform an account

00:14:45,889 --> 00:14:49,910
action we added hooks where you can just

00:14:48,380 --> 00:14:53,689
inject your own elements and they must

00:14:49,910 --> 00:14:55,730
pass for the entire page to to pass we

00:14:53,689 --> 00:14:58,490
also added some hooks at the start and

00:14:55,730 --> 00:15:00,319
end of the entire authentication flow so

00:14:58,490 --> 00:15:01,880
that users will be caught at essentially

00:15:00,319 --> 00:15:03,620
a hard breakpoint and not able to

00:15:01,880 --> 00:15:06,560
progress until they've you know

00:15:03,620 --> 00:15:07,699
authenticated with with MFA or whatever

00:15:06,560 --> 00:15:09,410
you wanted to have there but we added

00:15:07,699 --> 00:15:12,529
some hard break points in that flow

00:15:09,410 --> 00:15:14,779
where you can inject any functionality

00:15:12,529 --> 00:15:17,649
you need and so that allowed us to get a

00:15:14,779 --> 00:15:20,389
proper MFA solution off of the ground

00:15:17,649 --> 00:15:22,579
rather than having you know checks

00:15:20,389 --> 00:15:25,579
afterwards beforehand that might already

00:15:22,579 --> 00:15:27,740
allow a user access to the system we

00:15:25,579 --> 00:15:31,899
could instead focus on we've got a clean

00:15:27,740 --> 00:15:31,899
place to to control them

00:15:31,900 --> 00:15:38,020
so that patch changing all of that was

00:15:35,650 --> 00:15:42,070
was a big change and moving it into

00:15:38,020 --> 00:15:44,350
Moodle core is relatively slow because

00:15:42,070 --> 00:15:46,660
once you've logged a JIRA ticket for

00:15:44,350 --> 00:15:48,880
this you do the actual code patch you

00:15:46,660 --> 00:15:50,350
create your pull request and then

00:15:48,880 --> 00:15:52,240
there's automated code checks to match

00:15:50,350 --> 00:15:54,460
the code standards then there's a peer

00:15:52,240 --> 00:15:55,660
review and then an integration review

00:15:54,460 --> 00:15:56,890
where someone from Moodle HQ actually

00:15:55,660 --> 00:15:58,720
you know goes through and has a look and

00:15:56,890 --> 00:16:01,000
says yeah this actually is pretty good

00:15:58,720 --> 00:16:05,650
and then they test it and then it's in

00:16:01,000 --> 00:16:07,720
master it can take months but you can

00:16:05,650 --> 00:16:09,490
still do it it's it's absolutely doable

00:16:07,720 --> 00:16:11,590
because the actual effort most people

00:16:09,490 --> 00:16:13,420
have to go to is very little it's still

00:16:11,590 --> 00:16:15,010
just a pull request at heart there's

00:16:13,420 --> 00:16:17,830
more checks on top of that a little bit

00:16:15,010 --> 00:16:20,740
more red tape but if you've got a large

00:16:17,830 --> 00:16:23,320
application that doesn't do this it

00:16:20,740 --> 00:16:27,700
doesn't take that much to fix it from

00:16:23,320 --> 00:16:30,040
your end a lot of the time so that's

00:16:27,700 --> 00:16:32,290
what we did we worked with Moodle HQ and

00:16:30,040 --> 00:16:33,790
we decided on an implementation that

00:16:32,290 --> 00:16:36,220
everyone could support and get behind

00:16:33,790 --> 00:16:39,040
that didn't break any already existing

00:16:36,220 --> 00:16:40,900
authentication flows and we got it out

00:16:39,040 --> 00:16:43,320
so after a few months of discussion and

00:16:40,900 --> 00:16:47,410
review the code changes went to master

00:16:43,320 --> 00:16:48,550
yay so now I had to actually look at MFA

00:16:47,410 --> 00:16:51,130
and I just wanted to talk a little bit

00:16:48,550 --> 00:16:53,170
about the approach we took and some

00:16:51,130 --> 00:16:55,030
design considerations that are more

00:16:53,170 --> 00:16:57,190
widely applicable if you need to do this

00:16:55,030 --> 00:17:02,290
to your solution your service or your

00:16:57,190 --> 00:17:06,160
app so MFA itself is a superset of the

00:17:02,290 --> 00:17:10,030
more common to FA so to FA is you know

00:17:06,160 --> 00:17:11,740
your standard password plus maybe a TOTP

00:17:10,030 --> 00:17:13,630
you know a temporary one-time password

00:17:11,740 --> 00:17:16,420
or it might be an e-mail verification

00:17:13,630 --> 00:17:19,300
code or something like that the M is for

00:17:16,420 --> 00:17:21,220
multi the idea is you can have more of

00:17:19,300 --> 00:17:23,050
these things depending on how secure you

00:17:21,220 --> 00:17:23,560
need your system to be so you can have

00:17:23,050 --> 00:17:26,440
you know

00:17:23,560 --> 00:17:28,209
totp email you could have the password

00:17:26,440 --> 00:17:29,860
as well as is it sunny outside you can

00:17:28,209 --> 00:17:31,240
really stack it all together as much as

00:17:29,860 --> 00:17:36,070
you need to to match the security of the

00:17:31,240 --> 00:17:39,940
rest of your system so we had to think

00:17:36,070 --> 00:17:42,100
about an extensible platform for MFA so

00:17:39,940 --> 00:17:43,420
we decided on a mix of traditional

00:17:42,100 --> 00:17:45,150
factors and also some non-traditional

00:17:43,420 --> 00:17:47,400
that really had some some better

00:17:45,150 --> 00:17:49,710
and that might be more widely applicable

00:17:47,400 --> 00:17:52,290
so your traditional stuff is like you

00:17:49,710 --> 00:17:53,880
know TOTP there's email verification

00:17:52,290 --> 00:17:56,910
that kind of stuff is that stuff you'd

00:17:53,880 --> 00:17:58,470
be used to but more interestingly you

00:17:56,910 --> 00:18:00,390
can also think of other things as

00:17:58,470 --> 00:18:03,230
factors that a user might not even have

00:18:00,390 --> 00:18:05,700
to interact with so things like IP

00:18:03,230 --> 00:18:07,470
verification if someone is on a secure

00:18:05,700 --> 00:18:09,390
network that that's known good you can

00:18:07,470 --> 00:18:10,860
assume they might be VPN din or they

00:18:09,390 --> 00:18:13,080
might be at the office and if you've got

00:18:10,860 --> 00:18:14,490
security steps on both of those it might

00:18:13,080 --> 00:18:16,500
be reasonable to assume you know that

00:18:14,490 --> 00:18:18,530
one of your admins is is in a safe

00:18:16,500 --> 00:18:20,730
secure environment and that it's then

00:18:18,530 --> 00:18:23,070
authentication type is is another one to

00:18:20,730 --> 00:18:25,050
think about if someone is SS owing into

00:18:23,070 --> 00:18:26,610
your service and you know that on the

00:18:25,050 --> 00:18:28,940
other side of your LDAP login there's

00:18:26,610 --> 00:18:32,130
already 2fa you probably don't need it

00:18:28,940 --> 00:18:34,250
so it's interesting to think of cases

00:18:32,130 --> 00:18:37,590
where those will count as factors and

00:18:34,250 --> 00:18:39,150
the end user has an invisible experience

00:18:37,590 --> 00:18:40,350
essentially but anyone outside of that

00:18:39,150 --> 00:18:45,750
is still forced back to more traditional

00:18:40,350 --> 00:18:47,670
routes so when we designed this we had a

00:18:45,750 --> 00:18:50,160
couple of clear design goals in mind

00:18:47,670 --> 00:18:52,290
there the pretty standard ones you don't

00:18:50,160 --> 00:18:54,450
really want to impact your users you

00:18:52,290 --> 00:18:56,040
want to keep it to it to a minimum while

00:18:54,450 --> 00:18:57,900
still keeping the system secure that's a

00:18:56,040 --> 00:19:00,630
very delicate balance to walk but users

00:18:57,900 --> 00:19:02,190
will avoid as much security as they can

00:19:00,630 --> 00:19:07,500
they'll dismiss whatever they can find

00:19:02,190 --> 00:19:08,850
and get rid of anything so we had to

00:19:07,500 --> 00:19:10,620
think about you know the different use

00:19:08,850 --> 00:19:12,270
cases as well there and this is again

00:19:10,620 --> 00:19:13,830
more widely applicable if you need to do

00:19:12,270 --> 00:19:16,679
this to your service or app or are just

00:19:13,830 --> 00:19:18,720
interested you've got users who you know

00:19:16,679 --> 00:19:20,220
might not be required if your if your

00:19:18,720 --> 00:19:21,900
system is not that secure it doesn't

00:19:20,220 --> 00:19:23,460
deal with secure data it might not be

00:19:21,900 --> 00:19:26,190
required but you might still want your

00:19:23,460 --> 00:19:27,840
administrators say to have to MFA in in

00:19:26,190 --> 00:19:30,390
which case you know you might want an

00:19:27,840 --> 00:19:32,520
optional set up where a user can you

00:19:30,390 --> 00:19:33,900
know go activate totp if they care about

00:19:32,520 --> 00:19:36,570
their account security and really need

00:19:33,900 --> 00:19:39,330
it to be secure but anyone else who

00:19:36,570 --> 00:19:41,429
doesn't really it's invisible or maybe

00:19:39,330 --> 00:19:43,500
it's forced on and everyone you know is

00:19:41,429 --> 00:19:45,059
forced to it after accessing for a week

00:19:43,500 --> 00:19:47,490
of grace mode or whatever you want to

00:19:45,059 --> 00:19:49,830
have so there's different use cases

00:19:47,490 --> 00:19:51,570
there on top of the different factors to

00:19:49,830 --> 00:19:52,860
use some people need to interact with it

00:19:51,570 --> 00:19:54,750
some people might not so you have to

00:19:52,860 --> 00:19:57,090
kind of think of the way that it's all

00:19:54,750 --> 00:19:58,470
built in the context of how the rest of

00:19:57,090 --> 00:19:58,800
your application security is put

00:19:58,470 --> 00:20:00,540
together

00:19:58,800 --> 00:20:04,980
and how much or how little you want to

00:20:00,540 --> 00:20:07,410
annoy your users so the things we learnt

00:20:04,980 --> 00:20:09,030
at the core are almost anything can be

00:20:07,410 --> 00:20:12,060
used as a factor and if you've got

00:20:09,030 --> 00:20:13,920
things that you know are secure that

00:20:12,060 --> 00:20:15,420
interact with the system you can

00:20:13,920 --> 00:20:17,310
probably say yeah okay that might

00:20:15,420 --> 00:20:19,050
actually count as some weight it might

00:20:17,310 --> 00:20:20,880
not have to be the only thing but it

00:20:19,050 --> 00:20:22,290
might be something or another check that

00:20:20,880 --> 00:20:26,010
you want someone to meet before they can

00:20:22,290 --> 00:20:27,990
get into your system there is a very

00:20:26,010 --> 00:20:31,400
delicate balance between secure and

00:20:27,990 --> 00:20:33,810
usable and this does again depend on

00:20:31,400 --> 00:20:35,880
kind of the rest of the the system and

00:20:33,810 --> 00:20:37,680
what your other security systems are

00:20:35,880 --> 00:20:38,550
like how you want users to interact with

00:20:37,680 --> 00:20:39,900
it whether you want it to be a

00:20:38,550 --> 00:20:42,990
streamlined seamless out you know

00:20:39,900 --> 00:20:44,370
someone's mobile app is not going to be

00:20:42,990 --> 00:20:46,530
as involved generally as someone's

00:20:44,370 --> 00:20:47,970
desktop experience in the way they

00:20:46,530 --> 00:20:49,680
interact with it you want your mobile to

00:20:47,970 --> 00:20:50,820
be smooth and streamlined whereas your

00:20:49,680 --> 00:20:54,360
desktop might need to be a little more

00:20:50,820 --> 00:20:56,070
secure so when designing being paranoid

00:20:54,360 --> 00:20:59,040
is probably the right mindset to have

00:20:56,070 --> 00:21:00,660
you know if you've got an input you want

00:20:59,040 --> 00:21:01,800
to watch for brute force especially for

00:21:00,660 --> 00:21:04,260
things like TOTP and e-mail verification

00:21:01,800 --> 00:21:06,360
codes it might be a couple hundred

00:21:04,260 --> 00:21:08,550
thousand attempts but it might still be

00:21:06,360 --> 00:21:10,470
doable so you might want to look you

00:21:08,550 --> 00:21:13,290
know at time delays lockouts that kind

00:21:10,470 --> 00:21:15,320
of thing for that you want to give the

00:21:13,290 --> 00:21:17,850
least information possible to allow a

00:21:15,320 --> 00:21:19,470
legitimate user to authenticate that's

00:21:17,850 --> 00:21:22,020
actually really important if an attacker

00:21:19,470 --> 00:21:23,790
is coming in they know maybe an email

00:21:22,020 --> 00:21:25,830
address you don't want to leak any more

00:21:23,790 --> 00:21:27,360
information in their attempted login

00:21:25,830 --> 00:21:29,250
than they had before because that's

00:21:27,360 --> 00:21:31,440
still a win on the attackers attackers

00:21:29,250 --> 00:21:33,570
side so you need to think about what a

00:21:31,440 --> 00:21:35,160
legitimate user needs to know versus

00:21:33,570 --> 00:21:36,540
what an attacker might actually gain

00:21:35,160 --> 00:21:38,430
from the information you're giving them

00:21:36,540 --> 00:21:40,500
and you've got to think as well about

00:21:38,430 --> 00:21:44,610
what can an attacker do if this factor

00:21:40,500 --> 00:21:47,520
is compromised email is the big one

00:21:44,610 --> 00:21:49,470
there if email was your only fact if

00:21:47,520 --> 00:21:51,690
text message was your only factor you've

00:21:49,470 --> 00:21:53,910
got to think about okay does that allow

00:21:51,690 --> 00:21:56,760
an attacker to get into the system know

00:21:53,910 --> 00:21:57,990
if they've got a password yes maybe

00:21:56,760 --> 00:22:00,060
that's not what you want because they

00:21:57,990 --> 00:22:02,280
are things that happen all the time and

00:22:00,060 --> 00:22:03,810
again it depends on the security of your

00:22:02,280 --> 00:22:08,090
system but think about the ramifications

00:22:03,810 --> 00:22:08,090
if these things are compromised

00:22:08,400 --> 00:22:13,650
so some final thoughts about this

00:22:10,470 --> 00:22:15,150
there's still a long way to go there is

00:22:13,650 --> 00:22:17,730
in the security of any application

00:22:15,150 --> 00:22:19,320
really you've got to keep vigilant

00:22:17,730 --> 00:22:21,059
security has constantly shifting goal

00:22:19,320 --> 00:22:22,860
posts you need to keep on top of new

00:22:21,059 --> 00:22:24,780
developments new attacks new

00:22:22,860 --> 00:22:26,400
vulnerabilities while keeping an eye on

00:22:24,780 --> 00:22:29,220
things that have historically been a

00:22:26,400 --> 00:22:32,250
pain point and keep it all moving

00:22:29,220 --> 00:22:34,140
forwards as a kind of whole security

00:22:32,250 --> 00:22:36,570
model so don't neglect I guess either

00:22:34,140 --> 00:22:40,590
side of what's traditionally thought of

00:22:36,570 --> 00:22:42,179
in security so I just want to say thanks

00:22:40,590 --> 00:22:44,010
to the security mini-com for having me

00:22:42,179 --> 00:22:45,840
thanks to LCA for hosting the great

00:22:44,010 --> 00:22:47,970
event thanks to catalyst for actually

00:22:45,840 --> 00:22:49,950
sending me here taking a week off it's

00:22:47,970 --> 00:23:03,059
great and thanks to everyone for

00:22:49,950 --> 00:23:05,450
listening any questions anyone have

00:23:03,059 --> 00:23:05,450
questions

00:23:07,550 --> 00:23:11,550
so he said towards the end there you

00:23:09,780 --> 00:23:13,050
want to try not to give away information

00:23:11,550 --> 00:23:17,010
when somebody's doing a brute-force

00:23:13,050 --> 00:23:19,500
attack yeah if I put my pass I put the

00:23:17,010 --> 00:23:21,960
wrong password in and the system says no

00:23:19,500 --> 00:23:23,100
you can't that's wrong then I've given

00:23:21,960 --> 00:23:23,640
away the information that the password

00:23:23,100 --> 00:23:27,059
was wrong

00:23:23,640 --> 00:23:29,820
is there any way around that I mean you

00:23:27,059 --> 00:23:31,679
could just have a blank page 30 second

00:23:29,820 --> 00:23:41,070
time out maybe it's terrible UX you

00:23:31,679 --> 00:23:44,160
shouldn't do that no well that's a more

00:23:41,070 --> 00:23:45,630
traditional way to do it but it depends

00:23:44,160 --> 00:23:47,160
on you know whether you've got an email

00:23:45,630 --> 00:23:48,600
address already it depends on what the

00:23:47,160 --> 00:23:49,980
attacker has but yeah saying something

00:23:48,600 --> 00:23:51,000
like that is exactly the kind of thing

00:23:49,980 --> 00:23:52,740
I'm talking about minimizing the

00:23:51,000 --> 00:23:54,420
information you give away not saying the

00:23:52,740 --> 00:23:56,630
password is wrong it's some of your

00:23:54,420 --> 00:23:59,130
details are wrong yeah

00:23:56,630 --> 00:24:01,170
one interesting approach to that that

00:23:59,130 --> 00:24:03,540
I've seen is that if you have an account

00:24:01,170 --> 00:24:05,700
that has two-factor authentication it

00:24:03,540 --> 00:24:07,800
will regardless of whether the password

00:24:05,700 --> 00:24:11,640
is correct allow you to enter two-factor

00:24:07,800 --> 00:24:13,890
authentication code so obviously that'll

00:24:11,640 --> 00:24:15,420
only work if the password and the code

00:24:13,890 --> 00:24:16,830
are correct but by doing that you avoid

00:24:15,420 --> 00:24:19,530
leaking whether the password is correct

00:24:16,830 --> 00:24:21,630
or incorrect yeah that's actually a

00:24:19,530 --> 00:24:23,910
pretty decent approach but at some point

00:24:21,630 --> 00:24:27,720
they're still gonna realize that you

00:24:23,910 --> 00:24:30,060
know I'm not fully in the account think

00:24:27,720 --> 00:24:31,230
about your flow because it really

00:24:30,060 --> 00:24:32,820
depends on where users are coming from

00:24:31,230 --> 00:24:36,210
if they're coming in from an SSO system

00:24:32,820 --> 00:24:37,440
or something like that it's not as

00:24:36,210 --> 00:24:42,720
important but that is an interesting

00:24:37,440 --> 00:24:45,200
approach to it anything else any more

00:24:42,720 --> 00:24:45,200
questions

00:24:49,120 --> 00:24:54,860
you mentioned earlier that being able to

00:24:51,530 --> 00:24:56,540
put MFA on top of SSO services like

00:24:54,860 --> 00:24:57,890
sam'l in particular was something you

00:24:56,540 --> 00:24:59,570
were trying to solve yes

00:24:57,890 --> 00:25:01,180
I'll just worry if you could elaborate

00:24:59,570 --> 00:25:04,750
on that are you seeing

00:25:01,180 --> 00:25:08,090
sam'l providers just not offering MFA or

00:25:04,750 --> 00:25:10,880
that's an issue more on the the side of

00:25:08,090 --> 00:25:13,640
the product we were working on so many

00:25:10,880 --> 00:25:15,590
of our clients that kind of thing

00:25:13,640 --> 00:25:18,410
use identity providers sam'l is a big

00:25:15,590 --> 00:25:20,450
one and they may or may not have MFA on

00:25:18,410 --> 00:25:22,910
their side that's really up to them but

00:25:20,450 --> 00:25:25,430
for some design goals we really needed

00:25:22,910 --> 00:25:28,100
it on on the side of we don't trust the

00:25:25,430 --> 00:25:29,210
person coming in from the IDP so the

00:25:28,100 --> 00:25:32,090
problem was we didn't have the ability

00:25:29,210 --> 00:25:34,010
to to model to monitor who's coming in

00:25:32,090 --> 00:25:36,350
from the IDP and whether that's actually

00:25:34,010 --> 00:25:38,530
you know a valid login or not or whether

00:25:36,350 --> 00:25:40,700
it's an attack of that kind of thing so

00:25:38,530 --> 00:25:42,380
we needed to have it on both ends

00:25:40,700 --> 00:25:44,930
regardless of whether it existed on the

00:25:42,380 --> 00:25:49,310
other end okay there's interesting

00:25:44,930 --> 00:25:53,900
things one more question

00:25:49,310 --> 00:25:56,350
yep okay okay thank you Peter

00:25:53,900 --> 00:25:56,350
one more

00:26:00,050 --> 00:26:05,300
so with your new password requirements

00:26:02,680 --> 00:26:07,040
how do you communicate that to users

00:26:05,300 --> 00:26:10,190
like what's gonna be an allowed password

00:26:07,040 --> 00:26:14,270
a pretty hefty this is our requirements

00:26:10,190 --> 00:26:17,360
text again it's hard to balance the UX

00:26:14,270 --> 00:26:18,620
and the cleanliness of your application

00:26:17,360 --> 00:26:22,700
versus the requirements you actually

00:26:18,620 --> 00:26:24,320
have to have originally we didn't

00:26:22,700 --> 00:26:25,610
actually have it quite as verbose but

00:26:24,320 --> 00:26:29,030
people were getting tripped up on it so

00:26:25,610 --> 00:26:30,950
we really had to make it quite beefy if

00:26:29,030 --> 00:26:32,840
you don't have quite as stringent

00:26:30,950 --> 00:26:34,700
requirements and it's more just your

00:26:32,840 --> 00:26:36,560
password can't be compromised and maybe

00:26:34,700 --> 00:26:37,640
don't use your information it's a little

00:26:36,560 --> 00:26:38,930
easier but if you've got really

00:26:37,640 --> 00:26:41,420
stringent requirements I think the best

00:26:38,930 --> 00:26:42,950
thing is just to put an upfront we

00:26:41,420 --> 00:26:44,120
require this for your password because

00:26:42,950 --> 00:26:49,460
then people aren't gonna get tripped up

00:26:44,120 --> 00:26:52,730
or not nor what they're doing wrong cool

00:26:49,460 --> 00:26:56,180
thanks again Peter that was great talk

00:26:52,730 --> 00:26:58,430
and next we have some afternoon tea it's

00:26:56,180 --> 00:27:02,010
ten past three and we'll be back here at

00:26:58,430 --> 00:27:05,900
quarter to 4:00

00:27:02,010 --> 00:27:05,900

YouTube URL: https://www.youtube.com/watch?v=cPoxNkJ9g3E


