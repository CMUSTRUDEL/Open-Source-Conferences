Title: "Easy Geo-Redundant Handover + Failover with MARS + systemd" - Thomas Schoebel-Theuer (LCA 2020)
Publication date: 2020-01-14
Playlist: linux.conf.au 2020
Description: 
	Thomas Schoebel-Theuer

https://lca2020.linux.org.au/schedule/presentation/114/

The talk describes a simple setup of long-distance replication with minimum effort. The new systemd interface of MARS will drastically reduce your effort to make your existing complex solution geo-redundant.

Geo-redundancy / mass data replication over long distances is now much easier to manage for sysadmins. Although systemd has some shortcomings and earns some criticism, it can ease your automation of handover / failover when combined with the new unit-file template generator from the long-distance data replication component MARS. It is very flexible, supporting arbitrary application stacks, e.g. virtual machines, containers, and much more.
MARS is used by 1&1 IONOS for geo-redundancy of thousands of LXC containers, and on several petabytes of data, with very low cost.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Mon Jan 13 14:00:00 2020 at Arena
Captions: 
	00:00:01,070 --> 00:00:06,839
so I'm old-school kernel hacker working

00:00:04,230 --> 00:00:09,480
at 1:1 Internet it's a web hosting

00:00:06,839 --> 00:00:11,340
company and I'm working at operations

00:00:09,480 --> 00:00:14,340
near decisiveness that's the reason why

00:00:11,340 --> 00:00:16,650
I'm here and I want to talk about geo

00:00:14,340 --> 00:00:24,840
redundancy that's replication over long

00:00:16,650 --> 00:00:28,650
distances small agenda we have an SLA of

00:00:24,840 --> 00:00:31,500
99.9 I ate almost four nines

00:00:28,650 --> 00:00:33,390
its measured end-to-end I will explain

00:00:31,500 --> 00:00:37,610
some details about the environment where

00:00:33,390 --> 00:00:41,520
it's working have developed mouse and

00:00:37,610 --> 00:00:43,590
then I should focus in this talk just

00:00:41,520 --> 00:00:46,680
about the system the interface which is

00:00:43,590 --> 00:00:50,280
a new feature now Simon that you will

00:00:46,680 --> 00:00:53,670
have told me that I should assume that

00:00:50,280 --> 00:00:55,710
you already know how Mars ok if you have

00:00:53,670 --> 00:00:58,859
questions about this ask afterwards or I

00:00:55,710 --> 00:01:01,500
should give him a small short intro if

00:00:58,859 --> 00:01:04,530
you know DRB team then you know Mars is

00:01:01,500 --> 00:01:06,330
very simple a very similar in the

00:01:04,530 --> 00:01:07,350
interface but the internal engine is

00:01:06,330 --> 00:01:10,460
completely different

00:01:07,350 --> 00:01:12,930
it works via transaction logging and

00:01:10,460 --> 00:01:15,240
it's more similar to my sequel

00:01:12,930 --> 00:01:19,710
replication a synchronous application of

00:01:15,240 --> 00:01:22,530
my Sigma than to the our video ok let's

00:01:19,710 --> 00:01:24,600
start we have an SLA aim which is

00:01:22,530 --> 00:01:28,470
end-to-end that means include everything

00:01:24,600 --> 00:01:30,770
including human error or long distance

00:01:28,470 --> 00:01:34,130
outer edges of the network and whatever

00:01:30,770 --> 00:01:36,689
this means that the existing Mars

00:01:34,130 --> 00:01:39,270
installation there must be much better

00:01:36,689 --> 00:01:40,829
I don't know it exactly because any

00:01:39,270 --> 00:01:43,619
outages of cells

00:01:40,829 --> 00:01:47,280
I noticed in most cases its Hardware

00:01:43,619 --> 00:01:50,210
defective for anymore whatever so it's

00:01:47,280 --> 00:01:55,320
it's for me it's clear lines it's

00:01:50,210 --> 00:01:59,610
extremely reliable so just a little bit

00:01:55,320 --> 00:02:02,549
about the background while we are modest

00:01:59,610 --> 00:02:04,770
because Google is but we have a few data

00:02:02,549 --> 00:02:08,610
centers and two continents and pair

00:02:04,770 --> 00:02:09,959
distances more than 50 kilometres and a

00:02:08,610 --> 00:02:12,030
few millions of customer home

00:02:09,959 --> 00:02:14,640
directories and shared hosting here

00:02:12,030 --> 00:02:17,520
few billions of inodes in total to be

00:02:14,640 --> 00:02:20,790
backed up and so on a few petabytes of

00:02:17,520 --> 00:02:23,640
data and instances and we have a data

00:02:20,790 --> 00:02:27,270
growth of about 20 percent per year and

00:02:23,640 --> 00:02:29,100
this means it's a challenge for local

00:02:27,270 --> 00:02:33,959
storage because we don't have network

00:02:29,100 --> 00:02:35,910
storage for good reason but dealing with

00:02:33,959 --> 00:02:38,010
local storage is possible things to Mars

00:02:35,910 --> 00:02:41,160
because Mars can also migrate data

00:02:38,010 --> 00:02:43,590
during run time via this being changed

00:02:41,160 --> 00:02:46,350
by your application you can migrate it

00:02:43,590 --> 00:02:50,550
into a different host and we have used

00:02:46,350 --> 00:02:55,230
it for example for for a live site if a

00:02:50,550 --> 00:02:57,570
hardware lifecycle and there's a open

00:02:55,230 --> 00:03:00,660
source project for dealing with this

00:02:57,570 --> 00:03:07,320
called container football it's also heat

00:03:00,660 --> 00:03:10,110
up like Mars so now the main point of

00:03:07,320 --> 00:03:13,980
this talk here what's about the Astro

00:03:10,110 --> 00:03:16,230
management for long distances long

00:03:13,980 --> 00:03:18,630
distance are completely different from

00:03:16,230 --> 00:03:21,209
crossover cable in the same row in the

00:03:18,630 --> 00:03:23,010
same room of the data center all short

00:03:21,209 --> 00:03:26,100
distances between on the same campus

00:03:23,010 --> 00:03:29,820
long distances are different model in

00:03:26,100 --> 00:03:31,380
distributed systems and well the first

00:03:29,820 --> 00:03:34,980
attempt would be theoretically

00:03:31,380 --> 00:03:38,970
potentially use your own proprietary

00:03:34,980 --> 00:03:42,630
cluster manager like here could use the

00:03:38,970 --> 00:03:46,049
mouse yes here this one our own one is

00:03:42,630 --> 00:03:49,320
not for not public not usable for you of

00:03:46,049 --> 00:03:52,049
course typically admin would first try

00:03:49,320 --> 00:03:54,630
the existing cluster managers so of

00:03:52,049 --> 00:03:56,220
course with their work several teams in

00:03:54,630 --> 00:03:58,560
our company have tried and they have

00:03:56,220 --> 00:04:01,620
failed doesn't work as expected because

00:03:58,560 --> 00:04:04,170
of split brain I think the reason is

00:04:01,620 --> 00:04:06,690
probably that the original model as it

00:04:04,170 --> 00:04:09,060
has been before it has been called

00:04:06,690 --> 00:04:11,220
pacemaker the origin are happy it is a

00:04:09,060 --> 00:04:14,250
distributed shared memory model this

00:04:11,220 --> 00:04:17,019
straight consistency originally and it

00:04:14,250 --> 00:04:21,350
looks like that this could be the reason

00:04:17,019 --> 00:04:23,210
just my guess okay theoretical

00:04:21,350 --> 00:04:24,830
explanation is the cap theorem not for

00:04:23,210 --> 00:04:27,050
this talk here but if you want to

00:04:24,830 --> 00:04:30,410
discuss of course we can do I have slide

00:04:27,050 --> 00:04:32,270
and appendix there and what's this talk

00:04:30,410 --> 00:04:34,430
about is using system D is a cluster

00:04:32,270 --> 00:04:36,620
manager well there's a reason for using

00:04:34,430 --> 00:04:39,340
system D because it's already in use

00:04:36,620 --> 00:04:42,350
everywhere for start off VMs or whatever

00:04:39,340 --> 00:04:45,620
it's clear it's a standard tool now and

00:04:42,350 --> 00:04:47,630
in terms of speed number one so even if

00:04:45,620 --> 00:04:51,620
you are aren't aware of it you probably

00:04:47,630 --> 00:04:53,540
have it in almost any Linux distro so it

00:04:51,620 --> 00:04:55,670
has been some critics that it's

00:04:53,540 --> 00:04:57,830
monolithic best the code I have looked

00:04:55,670 --> 00:05:00,680
into it but in reality it's very

00:04:57,830 --> 00:05:04,100
flexible and extensible by a unit files

00:05:00,680 --> 00:05:06,680
you can write yourself as an admin so

00:05:04,100 --> 00:05:08,960
when there's an hour 22 tells path so

00:05:06,680 --> 00:05:11,270
called path what resort can monitor any

00:05:08,960 --> 00:05:13,100
changes in the file system and trigger

00:05:11,270 --> 00:05:14,230
actions depending on that and this is

00:05:13,100 --> 00:05:17,240
used here

00:05:14,230 --> 00:05:20,120
Mars has already a communication the

00:05:17,240 --> 00:05:21,560
so-called sibling tree is distributed

00:05:20,120 --> 00:05:23,600
throughout the whole cluster if you

00:05:21,560 --> 00:05:27,530
change something and one node the other

00:05:23,600 --> 00:05:30,470
nodes can notice it this publication of

00:05:27,530 --> 00:05:32,720
the whole tree for of the cluster this

00:05:30,470 --> 00:05:33,110
means you can misuse this feature of

00:05:32,720 --> 00:05:36,260
Mars

00:05:33,110 --> 00:05:39,560
this internal feature as a generic

00:05:36,260 --> 00:05:41,570
remote control so this is used here at

00:05:39,560 --> 00:05:44,060
the primary site you say just switch

00:05:41,570 --> 00:05:47,090
this at the former secondary site

00:05:44,060 --> 00:05:49,160
related to primary and the old primary

00:05:47,090 --> 00:05:51,650
is automatically notice no you should

00:05:49,160 --> 00:05:55,480
not be primary anymore you should go to

00:05:51,650 --> 00:05:59,480
secondary mode and this is used here

00:05:55,480 --> 00:06:03,620
Mars has already an internal macro

00:05:59,480 --> 00:06:06,710
processor which is reused here and for

00:06:03,620 --> 00:06:09,260
creating units sister D units on the fly

00:06:06,710 --> 00:06:12,290
out of templates and you will see it in

00:06:09,260 --> 00:06:14,510
the next slide here this is an example

00:06:12,290 --> 00:06:16,790
it looks a little bit strange but it's

00:06:14,510 --> 00:06:20,510
an ordinary system D template you

00:06:16,790 --> 00:06:22,520
probably know already so the file name

00:06:20,510 --> 00:06:24,479
here in the first line where C the best

00:06:22,520 --> 00:06:27,150
is

00:06:24,479 --> 00:06:29,309
has two things the one is the @ symbol

00:06:27,150 --> 00:06:32,189
at with the resource name is a

00:06:29,309 --> 00:06:35,699
substitution operator dollar symbol in

00:06:32,189 --> 00:06:37,710
most other macro languages and the caret

00:06:35,699 --> 00:06:40,710
symbol and the first the M and T name

00:06:37,710 --> 00:06:43,979
this is a match operator this matches

00:06:40,710 --> 00:06:46,740
against a real template name which is

00:06:43,979 --> 00:06:49,499
provided later so this variable is

00:06:46,740 --> 00:06:51,870
filled by the actual name and can be

00:06:49,499 --> 00:06:55,800
used inside of the template like any

00:06:51,870 --> 00:06:58,229
other macro name and the first time line

00:06:55,800 --> 00:07:00,089
you have the even statement and this is

00:06:58,229 --> 00:07:05,039
a call of the internal mouse macro

00:07:00,089 --> 00:07:08,460
processor it just converts from the

00:07:05,039 --> 00:07:10,979
given M and T name which is convention

00:07:08,460 --> 00:07:15,589
of system D it doesn't contain slashes

00:07:10,979 --> 00:07:18,029
but dashes the dashes for instead of

00:07:15,589 --> 00:07:21,689
slashes and this is just converted back

00:07:18,029 --> 00:07:25,620
to a mount path to a path name just as

00:07:21,689 --> 00:07:29,159
part of my own point if you look my

00:07:25,620 --> 00:07:31,499
pointers doesn't seem it works here here

00:07:29,159 --> 00:07:34,649
in this mount is just what you typically

00:07:31,499 --> 00:07:36,719
use for a mount the Deaf Mouse resource

00:07:34,649 --> 00:07:39,089
name is mounted into the mountain path

00:07:36,719 --> 00:07:40,589
and the resource name this is the

00:07:39,089 --> 00:07:47,209
convention here always used the same

00:07:40,589 --> 00:07:52,949
name and in order to use to trigger this

00:07:47,209 --> 00:07:56,430
here is an example of such a path which

00:07:52,949 --> 00:07:58,379
is monitored so if he in the slash mouse

00:07:56,430 --> 00:08:01,889
system tree you have the resource name

00:07:58,379 --> 00:08:04,830
here and the sim link which says which

00:08:01,889 --> 00:08:07,199
node should be the primary now it should

00:08:04,830 --> 00:08:11,099
go primary and if it's not the old

00:08:07,199 --> 00:08:13,560
machine in the system D at the form of

00:08:11,099 --> 00:08:16,169
primary knows that it should go to

00:08:13,560 --> 00:08:17,699
secondary mode that's the idea because

00:08:16,169 --> 00:08:19,379
these siblings are propagated

00:08:17,699 --> 00:08:22,620
automatically in background throughout

00:08:19,379 --> 00:08:26,189
the whole classroom you can have a fully

00:08:22,620 --> 00:08:30,500
automated handle over here ok any

00:08:26,189 --> 00:08:34,010
questions for this is clear hopefully

00:08:30,500 --> 00:08:36,880
the current state is I have not yet in

00:08:34,010 --> 00:08:40,790
production and it has is it's in better

00:08:36,880 --> 00:08:43,730
version because after releasing it I

00:08:40,790 --> 00:08:46,130
have detected that system control is not

00:08:43,730 --> 00:08:48,500
reentrant if you call system control

00:08:46,130 --> 00:08:50,840
from this in such a template for example

00:08:48,500 --> 00:08:55,220
you get a deadlock potentially and it's

00:08:50,840 --> 00:08:57,650
only you look and you need some stress

00:08:55,220 --> 00:09:02,210
test in order to take this most cases 99

00:08:57,650 --> 00:09:04,430
dot whatever percent it's okay but in

00:09:02,210 --> 00:09:06,740
some cases it can deadlock and therefore

00:09:04,430 --> 00:09:09,860
at the moment I use breakable locks for

00:09:06,740 --> 00:09:11,900
protection but this is hopefully changed

00:09:09,860 --> 00:09:15,770
in future so at least the parallelism

00:09:11,900 --> 00:09:22,270
between several resources is necessary

00:09:15,770 --> 00:09:22,270
and I will do this in the next time okay

00:09:23,650 --> 00:09:30,770
to use it is very easy and simple this

00:09:26,510 --> 00:09:34,460
is why I call it easy you write a

00:09:30,770 --> 00:09:36,800
template once and you install it and if

00:09:34,460 --> 00:09:41,090
you create a resource dynamically during

00:09:36,800 --> 00:09:45,230
runtime typically MOUs are then create

00:09:41,090 --> 00:09:47,720
resource here the source name and what's

00:09:45,230 --> 00:09:49,790
the underlying disk to be used for

00:09:47,720 --> 00:09:51,860
replication and you create for example

00:09:49,790 --> 00:09:53,570
of file system or you can flip this both

00:09:51,860 --> 00:09:55,310
you can first create a file system and

00:09:53,570 --> 00:09:57,800
then create the mouse resource because

00:09:55,310 --> 00:10:01,580
the content is exactly the same just

00:09:57,800 --> 00:10:05,360
replicated and the only new command you

00:10:01,580 --> 00:10:07,610
need to know here is a new Mouse RDM set

00:10:05,360 --> 00:10:10,340
system the unit for the resource name

00:10:07,610 --> 00:10:13,040
and now you provide two units the

00:10:10,340 --> 00:10:15,560
struggle to stop unit they should be

00:10:13,040 --> 00:10:18,320
different and ordinary because the start

00:10:15,560 --> 00:10:20,840
units typically is the top of the whole

00:10:18,320 --> 00:10:27,230
stack and the stop unit is the bottom of

00:10:20,840 --> 00:10:32,780
it just the unit using the DEF Mars okay

00:10:27,230 --> 00:10:34,580
so the idea is you give those two units

00:10:32,780 --> 00:10:37,730
and the rest is done by the dependencies

00:10:34,580 --> 00:10:40,769
of system D system D will automatically

00:10:37,730 --> 00:10:43,559
check of the dependencies noticed inside

00:10:40,769 --> 00:10:46,860
and to some parallel work of course if

00:10:43,559 --> 00:10:49,410
it's possible by the dependencies or

00:10:46,860 --> 00:10:51,869
sequentially depending on what type of

00:10:49,410 --> 00:10:53,939
dependencies or you have specified so if

00:10:51,869 --> 00:10:57,420
you are already a user assistant it's

00:10:53,939 --> 00:11:00,569
not you for you so now what's happening

00:10:57,420 --> 00:11:03,720
at runtime if you switch the primary you

00:11:00,569 --> 00:11:06,660
say on some secondary host you say

00:11:03,720 --> 00:11:10,319
please become primary resource name and

00:11:06,660 --> 00:11:14,339
that's all the rest is now handled

00:11:10,319 --> 00:11:16,379
automatically they're all primary that's

00:11:14,339 --> 00:11:18,119
the equivalent of system controls top of

00:11:16,379 --> 00:11:23,279
the stop unit name you have provided

00:11:18,119 --> 00:11:26,189
once it's set up here and this step is

00:11:23,279 --> 00:11:28,259
new the old primary goes to secondary

00:11:26,189 --> 00:11:31,920
mode this is already in Mars for years

00:11:28,259 --> 00:11:35,429
now new primary becomes primary also in

00:11:31,920 --> 00:11:38,459
Mars for years and the last is that the

00:11:35,429 --> 00:11:41,069
system control the same unit is started

00:11:38,459 --> 00:11:43,230
on the same but on a different host so

00:11:41,069 --> 00:11:44,970
we have full hand over of all your

00:11:43,230 --> 00:11:49,709
status of all your state of all your

00:11:44,970 --> 00:11:52,319
data to different machine in ideal case

00:11:49,709 --> 00:11:54,420
you should have some BGP or whatever in

00:11:52,319 --> 00:11:56,970
the network so that your new route side

00:11:54,420 --> 00:11:59,249
is recognized under the same IPS before

00:11:56,970 --> 00:12:02,369
that's a typical setup for this use case

00:11:59,249 --> 00:12:05,519
here so you have location transparency

00:12:02,369 --> 00:12:07,470
with respect to to your resources or

00:12:05,519 --> 00:12:10,079
respect to applications running inside

00:12:07,470 --> 00:12:12,209
of your machines and this is the plant

00:12:10,079 --> 00:12:13,679
hand over the unplanned over it's a

00:12:12,209 --> 00:12:16,259
little bit shorter you have to use

00:12:13,679 --> 00:12:18,929
similar to drbg or disconnecting first

00:12:16,259 --> 00:12:26,269
and then you say primarily - - force

00:12:18,929 --> 00:12:31,919
that's all that's the main difference so

00:12:26,269 --> 00:12:33,899
mass current status if you already use

00:12:31,919 --> 00:12:36,480
mouse you know the github repo where it

00:12:33,899 --> 00:12:39,689
is in the meantime I have split the

00:12:36,480 --> 00:12:44,850
documentation to two parts the one is

00:12:39,689 --> 00:12:46,889
process admins so sorry it was wrong the

00:12:44,850 --> 00:12:49,949
user manual process it means for people

00:12:46,889 --> 00:12:51,899
who already want to use mouse it has

00:12:49,949 --> 00:12:53,090
step by step instructions if you are new

00:12:51,899 --> 00:12:55,100
to mouse and

00:12:53,090 --> 00:13:00,160
how to compile the kernel module

00:12:55,100 --> 00:13:03,440
yourself and so on and what's more

00:13:00,160 --> 00:13:05,660
tailored for if you want to know well

00:13:03,440 --> 00:13:10,360
Mouse's for you check the architectural

00:13:05,660 --> 00:13:14,150
guide if my boss has told me I should

00:13:10,360 --> 00:13:16,130
address managers need also so I have

00:13:14,150 --> 00:13:18,260
several colored boxes now in the new

00:13:16,130 --> 00:13:20,120
version of this guide addressing the

00:13:18,260 --> 00:13:21,950
needs of manager about cost and several

00:13:20,120 --> 00:13:25,010
other things about reliability I have a

00:13:21,950 --> 00:13:27,140
mathematical proof for example that the

00:13:25,010 --> 00:13:30,110
shrouding architecture used at one on

00:13:27,140 --> 00:13:32,270
one is the most reliable architecture at

00:13:30,110 --> 00:13:33,590
architectural level and it's much better

00:13:32,270 --> 00:13:35,390
than any big cluster and this

00:13:33,590 --> 00:13:37,520
mathematical proof while this is the

00:13:35,390 --> 00:13:41,810
case please check it if you are

00:13:37,520 --> 00:13:43,760
interested in this ok then the other if

00:13:41,810 --> 00:13:45,620
you already use marks you know it's

00:13:43,760 --> 00:13:48,140
productive since 2014

00:13:45,620 --> 00:13:51,650
it's the backbone of our company

00:13:48,140 --> 00:13:54,460
generator Nancy feature at the moment it

00:13:51,650 --> 00:13:58,370
doesn't scale very well in the number of

00:13:54,460 --> 00:14:00,530
resources the maximum in production is

00:13:58,370 --> 00:14:02,990
14 at the moment because we have fat

00:14:00,530 --> 00:14:06,710
Alexei containers not micro containers

00:14:02,990 --> 00:14:09,790
so the old hardware IBM blades have been

00:14:06,710 --> 00:14:13,190
moved into one Alex II container each

00:14:09,790 --> 00:14:16,940
but typical density is now about seven

00:14:13,190 --> 00:14:22,880
to ten containers per per harbor and one

00:14:16,940 --> 00:14:26,570
pizza box we have around these ten

00:14:22,880 --> 00:14:30,050
containers and thanks to this density is

00:14:26,570 --> 00:14:33,320
the TCO has half I cannot tell you the

00:14:30,050 --> 00:14:35,930
exact numbers but for if you are manager

00:14:33,320 --> 00:14:40,750
and read this you should be you should

00:14:35,930 --> 00:14:40,750
check this ok

00:14:42,640 --> 00:14:48,970
the last very last slide is this one

00:14:45,010 --> 00:14:52,330
what I'm currently working on first

00:14:48,970 --> 00:14:54,790
thing is what's it means already using

00:14:52,330 --> 00:14:58,990
Mars will hopefully like its new checks

00:14:54,790 --> 00:15:01,000
earning I did some the traditional Mouse

00:14:58,990 --> 00:15:04,029
is using md5 checksums in the

00:15:01,000 --> 00:15:06,910
transaction log file and it has rescued

00:15:04,029 --> 00:15:09,970
our life several times for example if

00:15:06,910 --> 00:15:15,300
your BB you cash is damaged in your

00:15:09,970 --> 00:15:17,470
hardware RAID controller you get

00:15:15,300 --> 00:15:19,750
disastrous you cannot imagine

00:15:17,470 --> 00:15:21,930
and typically the secondary site won't

00:15:19,750 --> 00:15:24,339
replicate this because of this Jackson's

00:15:21,930 --> 00:15:27,790
so it can save your life having this

00:15:24,339 --> 00:15:29,950
checksums and recently I checked the

00:15:27,790 --> 00:15:32,019
reservoir several other of checksumming

00:15:29,950 --> 00:15:35,890
operations in the Colonel Jackson

00:15:32,019 --> 00:15:37,570
function at crc32 C is already used in

00:15:35,890 --> 00:15:39,430
the network stick and it's faster by

00:15:37,570 --> 00:15:44,680
about a factor of 10 or even more than

00:15:39,430 --> 00:15:47,529
10 so I think this should be good for

00:15:44,680 --> 00:15:50,230
CPU consumption and it's calling in the

00:15:47,529 --> 00:15:55,510
callback path other Linux drivers are

00:15:50,230 --> 00:15:58,480
using interrupt context here and in the

00:15:55,510 --> 00:16:01,329
callback path doing some md5 checksums

00:15:58,480 --> 00:16:03,790
is a very expensive operation so log

00:16:01,329 --> 00:16:07,690
file compression is also implemented in

00:16:03,790 --> 00:16:09,490
this new version which is almost ready

00:16:07,690 --> 00:16:13,240
for release but not released at the

00:16:09,490 --> 00:16:15,940
moment and I have checked that sadly

00:16:13,240 --> 00:16:18,790
this is unfortunately very expensive

00:16:15,940 --> 00:16:22,230
while as it always obviously if you know

00:16:18,790 --> 00:16:25,870
it is very light consumes not much CPU

00:16:22,230 --> 00:16:28,750
and independently from log file content

00:16:25,870 --> 00:16:30,730
compression you can contrast the network

00:16:28,750 --> 00:16:34,089
transport now isn't it the next blue

00:16:30,730 --> 00:16:37,959
feature so then what's to be done in

00:16:34,089 --> 00:16:41,709
future metadata scalability here the

00:16:37,959 --> 00:16:43,570
number of resources would be pinned the

00:16:41,709 --> 00:16:47,170
iope data paths are already

00:16:43,570 --> 00:16:49,959
scaling very well and one of the next

00:16:47,170 --> 00:16:52,510
task is more host spoke last row and

00:16:49,959 --> 00:16:54,220
Linux kernel upstream something I will

00:16:52,510 --> 00:16:58,090
talk about tomorrow tomorrow

00:16:54,220 --> 00:16:59,830
talk at the chrono Minicon by Mia but

00:16:58,090 --> 00:17:02,890
from a different perspective for coddled

00:16:59,830 --> 00:17:05,860
hackers so that's its I think I'm in

00:17:02,890 --> 00:17:08,850
time is it correct five minutes left yes

00:17:05,860 --> 00:17:10,900
that was intended because I want to have

00:17:08,850 --> 00:17:13,240
immediate discussion now if it's

00:17:10,900 --> 00:17:17,370
possible so if you have a question its

00:17:13,240 --> 00:17:17,370
moderated by Simon yes

00:17:24,029 --> 00:17:31,210
Allu hi my name is Alex just a good

00:17:28,209 --> 00:17:33,370
question how do you implement fencing if

00:17:31,210 --> 00:17:40,299
you only have two fencing data centers

00:17:33,370 --> 00:17:42,549
per region or how do you prevent speed

00:17:40,299 --> 00:17:47,230
brain how to prevent split brain is the

00:17:42,549 --> 00:17:50,320
question yes ordinarily you have in hand

00:17:47,230 --> 00:17:52,330
over and they hand over ensures that you

00:17:50,320 --> 00:17:54,519
have strict consistency inside of each

00:17:52,330 --> 00:17:57,549
portion of course because this is the

00:17:54,519 --> 00:18:01,570
semantics of a local block device and by

00:17:57,549 --> 00:18:03,760
hand over it's also strict consistency

00:18:01,570 --> 00:18:05,980
over the network it takes a few seconds

00:18:03,760 --> 00:18:08,139
until all the data has been transferred

00:18:05,980 --> 00:18:11,289
to this checked by checksums

00:18:08,139 --> 00:18:13,539
all also meta data checksum to the so

00:18:11,289 --> 00:18:15,610
called version links in the swing tree

00:18:13,539 --> 00:18:17,710
and they ensure that I know whether

00:18:15,610 --> 00:18:22,149
split brain has secured or not its

00:18:17,710 --> 00:18:25,269
passive detector and the switch over the

00:18:22,149 --> 00:18:26,980
handover logic is checking this so in

00:18:25,269 --> 00:18:28,750
certain cases when the network is very

00:18:26,980 --> 00:18:30,600
congested all you have two other

00:18:28,750 --> 00:18:33,250
problems it may happen that during

00:18:30,600 --> 00:18:36,429
handover attempt you get an accidental

00:18:33,250 --> 00:18:40,809
split brain that can happen but you will

00:18:36,429 --> 00:18:43,809
see it at least at at the new primary

00:18:40,809 --> 00:18:47,350
side okay this is the answer to the

00:18:43,809 --> 00:18:50,470
question already yeah we can talk later

00:18:47,350 --> 00:18:53,019
just just off with me so you are right

00:18:50,470 --> 00:18:55,029
this is the consistency model you have

00:18:53,019 --> 00:18:57,039
two different consistency models at the

00:18:55,029 --> 00:18:58,779
same time at a local node

00:18:57,039 --> 00:19:00,100
you always have strict consistency in

00:18:58,779 --> 00:19:02,620
the distributed system you have

00:19:00,100 --> 00:19:06,130
eventually consistent but in case of

00:19:02,620 --> 00:19:07,570
plant hand over its waited until the

00:19:06,130 --> 00:19:11,769
eventually consistent is really

00:19:07,570 --> 00:19:14,620
consistent strike them okay so this is

00:19:11,769 --> 00:19:17,169
not a problem it just may take a longer

00:19:14,620 --> 00:19:19,570
time in case the network has a problem

00:19:17,169 --> 00:19:22,690
of course and the model is completely

00:19:19,570 --> 00:19:24,789
asynchronous in Mouse communication

00:19:22,690 --> 00:19:27,399
model is any message can take an

00:19:24,789 --> 00:19:31,360
arbitrary time so in theory you could

00:19:27,399 --> 00:19:33,670
replicate to planet Mars in theory yes

00:19:31,360 --> 00:19:37,780
people the TCP protocol water

00:19:33,670 --> 00:19:44,130
in practice but the model employed as is

00:19:37,780 --> 00:19:44,130
in this direction so okay any questions

00:19:47,390 --> 00:19:55,640
and there's some old presentations from

00:19:49,970 --> 00:20:03,650
you about this just check it out oh one

00:19:55,640 --> 00:20:06,110
one one last question okay so how long

00:20:03,650 --> 00:20:09,170
can the connection be down for and it's

00:20:06,110 --> 00:20:11,300
still retained consistency so if if the

00:20:09,170 --> 00:20:14,300
connection between the two data centers

00:20:11,300 --> 00:20:16,370
is down wouldn't be because it's

00:20:14,300 --> 00:20:19,760
asynchronous wouldn't you end up tossing

00:20:16,370 --> 00:20:22,490
yourself trying to create the

00:20:19,760 --> 00:20:24,320
consistency I'm not sure if I understand

00:20:22,490 --> 00:20:27,890
your question right but the model of

00:20:24,320 --> 00:20:30,560
Mars is connections are transparent so

00:20:27,890 --> 00:20:33,550
if you have a certain set up it always

00:20:30,560 --> 00:20:35,720
tries to reconnect in background and

00:20:33,550 --> 00:20:37,510
connections can even be in parallel the

00:20:35,720 --> 00:20:41,120
so called socket socket panting feature

00:20:37,510 --> 00:20:43,460
if you have a transfer from primary to

00:20:41,120 --> 00:20:45,590
secondary they are typically configured

00:20:43,460 --> 00:20:47,900
by default two connections in parallel

00:20:45,590 --> 00:20:50,780
in order to overcome network bottlenecks

00:20:47,900 --> 00:20:52,880
like packet loss and so on and this

00:20:50,780 --> 00:20:55,070
means if you lose connection you have a

00:20:52,880 --> 00:20:57,740
network out it's like cap theorem says

00:20:55,070 --> 00:20:59,540
you have a separate network outage of

00:20:57,740 --> 00:21:02,660
course no data can be transferred

00:20:59,540 --> 00:21:05,660
anymore but the network is recovering us

00:21:02,660 --> 00:21:07,520
has been has recovered it automatically

00:21:05,660 --> 00:21:09,830
recognized and this is difference to the

00:21:07,520 --> 00:21:12,710
RBD if you are coming from drbg you have

00:21:09,830 --> 00:21:15,170
to issue command the are body connect

00:21:12,710 --> 00:21:18,320
this is not necessarily of Mars it's

00:21:15,170 --> 00:21:20,450
connecting automatically okay say you

00:21:18,320 --> 00:21:24,830
had a whole heap of data that needed to

00:21:20,450 --> 00:21:27,200
be moved back over is there a maximum

00:21:24,830 --> 00:21:31,400
amount of data that can be that needs to

00:21:27,200 --> 00:21:32,930
be moved over to the secondary yes of

00:21:31,400 --> 00:21:34,970
course you can in case of a network

00:21:32,930 --> 00:21:39,410
outage you have two options in general

00:21:34,970 --> 00:21:41,930
you can just wait until it's gone

00:21:39,410 --> 00:21:43,520
probably the most important option for

00:21:41,930 --> 00:21:45,350
in practice if you have two network

00:21:43,520 --> 00:21:47,390
outage rather primary switch River for

00:21:45,350 --> 00:21:49,760
you customer traffic then you shouldn't

00:21:47,390 --> 00:21:51,860
switch over hand over our eyes you can

00:21:49,760 --> 00:21:54,860
fail over and of course then you gotta

00:21:51,860 --> 00:21:57,890
split brain it just detected this means

00:21:54,860 --> 00:21:59,140
you need fast forcing the first full

00:21:57,890 --> 00:22:01,060
swing is a little bit different

00:21:59,140 --> 00:22:03,280
from the RVD in PR video you have the

00:22:01,060 --> 00:22:05,290
speed maps which are recording the

00:22:03,280 --> 00:22:07,210
deltas the changes in the block device

00:22:05,290 --> 00:22:09,700
masters a fast full swing which is

00:22:07,210 --> 00:22:12,610
similar to md5 checksum input to our

00:22:09,700 --> 00:22:15,250
think both sides you it's also transfers

00:22:12,610 --> 00:22:18,610
only the changes but on the disk all

00:22:15,250 --> 00:22:21,310
data is read again ok this is the main

00:22:18,610 --> 00:22:23,470
difference to the RBD it's a little bit

00:22:21,310 --> 00:22:27,480
more expensive with respect to disc IO

00:22:23,470 --> 00:22:31,290
but on the network similar things happen

00:22:27,480 --> 00:22:35,380
so it answered your question thank you

00:22:31,290 --> 00:22:38,550
so I think time is over or not ok it's

00:22:35,380 --> 00:22:38,550

YouTube URL: https://www.youtube.com/watch?v=RpczdjpDsZE


