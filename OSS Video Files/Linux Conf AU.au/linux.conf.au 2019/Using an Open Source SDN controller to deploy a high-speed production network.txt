Title: Using an Open Source SDN controller to deploy a high-speed production network
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Brad Cowie

https://2019.linux.conf.au/schedule/presentation/111/

Faucet is a compact open source OpenFlow controller, which enables network operators to run their networks the same way they do server clusters. Faucet moves network control functions (like routing protocols, neighbor discovery, and switching algorithms) to vendor independent server-based software, versus traditional router or switch embedded firmware, where those functions are easy to manage, test, and extend with modern systems management best practices and tools. Faucet controls OpenFlow 1.3 hardware which delivers high forwarding performance.

This talk will demonstrate how we recently used faucet to deploy a large 100G network for an HPC conference. We will present how faucet works, our network design and an evaluation of the benefits of our approach. For this deployment we were able to greatly simplify the network and replaced many thousands of lines of vendor-specific configuration with a single easy to understand YAML configuration file. Faucet allows users to avoid vendor lock-in in a unique way by implementing the network as specified by the faucet configuration in hardware using the OpenFlow protocol. In this case we demonstrate the control of devices from three different vendors.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,030 --> 00:00:05,220
thank you.run yeah my name is Brad and I

00:00:02,639 --> 00:00:07,740
work for the University of Waikato which

00:00:05,220 --> 00:00:10,759
is a medium-sized university here in New

00:00:07,740 --> 00:00:13,620
Zealand and today's talks gonna be about

00:00:10,759 --> 00:00:18,480
a big project I did last year which is

00:00:13,620 --> 00:00:21,510
doing multi-turret basick and esteem and

00:00:18,480 --> 00:00:22,710
it works so let's get started so I

00:00:21,510 --> 00:00:24,779
didn't want to assume too much knowledge

00:00:22,710 --> 00:00:27,150
so I'm gonna start here with a very

00:00:24,779 --> 00:00:29,310
simple slide over you know what a

00:00:27,150 --> 00:00:31,439
network is what the internet is so the

00:00:29,310 --> 00:00:33,420
point of a network is to get your hosts

00:00:31,439 --> 00:00:35,610
talking to each other using some kind of

00:00:33,420 --> 00:00:37,440
application so that you can transmit

00:00:35,610 --> 00:00:38,040
information now a lot of people will

00:00:37,440 --> 00:00:40,800
tell you

00:00:38,040 --> 00:00:42,000
maybe networking is a game of Pokemon

00:00:40,800 --> 00:00:44,520
where you got to click as many different

00:00:42,000 --> 00:00:48,690
routing protocols or that kind of thing

00:00:44,520 --> 00:00:50,039
but that this isn't true and so the way

00:00:48,690 --> 00:00:51,360
this if the equipment live we usually

00:00:50,039 --> 00:00:53,610
works is we have a bunch of routers

00:00:51,360 --> 00:00:56,239
which handle IP addresses and switches

00:00:53,610 --> 00:01:00,210
which hire and know about MAC addresses

00:00:56,239 --> 00:01:01,199
so this is in the OSI model you know

00:01:00,210 --> 00:01:03,960
layer 2 and layer 3

00:01:01,199 --> 00:01:06,000
so between our routers we need to

00:01:03,960 --> 00:01:08,340
exchange routes so they need to know how

00:01:06,000 --> 00:01:10,110
to find other parts of the network and

00:01:08,340 --> 00:01:12,000
in our switches they need to know about

00:01:10,110 --> 00:01:13,500
MAC addresses so that they don't just be

00:01:12,000 --> 00:01:16,549
a hub and send all traffic to all

00:01:13,500 --> 00:01:19,710
interfaces so in a traditional world

00:01:16,549 --> 00:01:23,790
these distributed protocols for this so

00:01:19,710 --> 00:01:26,790
each device sort of build its own view

00:01:23,790 --> 00:01:28,320
of the world and does this by forming

00:01:26,790 --> 00:01:30,990
adjacencies with other devices it knows

00:01:28,320 --> 00:01:34,890
about and exchanging information so

00:01:30,990 --> 00:01:37,409
common routing protocols a OSPF is is

00:01:34,890 --> 00:01:39,659
for your interior for inside your

00:01:37,409 --> 00:01:43,439
network if you speak your internet using

00:01:39,659 --> 00:01:46,470
a thing called BGP and then forwarding

00:01:43,439 --> 00:01:50,549
for l2 there's some first Mac learning

00:01:46,470 --> 00:01:53,040
stuff that you got to do now in an SDN

00:01:50,549 --> 00:01:56,040
world what we do is we add in a

00:01:53,040 --> 00:01:57,930
controller that has sort of a Oracle

00:01:56,040 --> 00:02:00,360
view of the network it sits above

00:01:57,930 --> 00:02:02,729
everything and it can instead of just

00:02:00,360 --> 00:02:05,070
making a decision per device we can now

00:02:02,729 --> 00:02:06,960
make decisions between groups advices

00:02:05,070 --> 00:02:09,239
and so to make this work we're going to

00:02:06,960 --> 00:02:12,870
have now an API that lets our

00:02:09,239 --> 00:02:15,510
controllers talk to our devices so

00:02:12,870 --> 00:02:17,970
yeah what kind of API do we use for this

00:02:15,510 --> 00:02:19,230
so we need something that's an open

00:02:17,970 --> 00:02:21,239
standard that anyone can read and

00:02:19,230 --> 00:02:23,010
implement we need more than one vendor

00:02:21,239 --> 00:02:24,900
to support it so that we can do this

00:02:23,010 --> 00:02:28,110
with more than one piece of vendor gear

00:02:24,900 --> 00:02:29,489
and another key thing is we need to be

00:02:28,110 --> 00:02:32,970
able to modify the behavior of the

00:02:29,489 --> 00:02:34,829
device and we want to do that because we

00:02:32,970 --> 00:02:38,159
want some little consistency and we'll

00:02:34,829 --> 00:02:40,140
get into that but later so the options

00:02:38,159 --> 00:02:41,519
at the moment are kind of open flow mp4

00:02:40,140 --> 00:02:44,310
runtime which you may have heard of

00:02:41,519 --> 00:02:46,440
before runtime is quite new and only

00:02:44,310 --> 00:02:49,680
just sort of becoming a standard now so

00:02:46,440 --> 00:02:52,079
it doesn't have great support you but

00:02:49,680 --> 00:02:53,549
open flow has been around forever so

00:02:52,079 --> 00:02:55,590
many different vendor devices support

00:02:53,549 --> 00:02:57,750
this now and that's what I'm gonna focus

00:02:55,590 --> 00:02:59,519
the rest of the talk on and will mention

00:02:57,750 --> 00:03:02,430
and come back to peer for a little bit

00:02:59,519 --> 00:03:04,470
later on so some may say at this point

00:03:02,430 --> 00:03:06,690
I've heard of this net can't yang thing

00:03:04,470 --> 00:03:09,269
that I can use well this isn't quite a

00:03:06,690 --> 00:03:12,780
Stian this is more of like software

00:03:09,269 --> 00:03:15,629
configure networking so an it conf model

00:03:12,780 --> 00:03:17,250
lets us push down and change the

00:03:15,629 --> 00:03:20,190
configuration of devices in the vendor

00:03:17,250 --> 00:03:21,989
configuration language and this is just

00:03:20,190 --> 00:03:24,209
kind of like a programming interface to

00:03:21,989 --> 00:03:26,040
the CLI it's it's not multi vendor

00:03:24,209 --> 00:03:27,750
different vendors have different ways of

00:03:26,040 --> 00:03:29,790
using it and they all have different

00:03:27,750 --> 00:03:31,139
features and we can't actually change

00:03:29,790 --> 00:03:33,000
how the device works we just have to

00:03:31,139 --> 00:03:35,910
rely on the code from the vendor to make

00:03:33,000 --> 00:03:38,310
it work so here's a traditional switch

00:03:35,910 --> 00:03:40,109
it's pretty simple so it has a control

00:03:38,310 --> 00:03:42,120
plane which is the brains of the thing

00:03:40,109 --> 00:03:44,639
it's a usually a small embedded CPU

00:03:42,120 --> 00:03:46,109
running I mean these days Linux is

00:03:44,639 --> 00:03:49,769
pretty much what's always going to be on

00:03:46,109 --> 00:03:51,919
there all your protocols run as little C

00:03:49,769 --> 00:03:55,109
applications usually running as root and

00:03:51,919 --> 00:03:57,449
they know how to talk down to the 14

00:03:55,109 --> 00:04:00,989
plan so the 14 plane is normally some

00:03:57,449 --> 00:04:03,810
kind of ASIC or location see if BGA's or

00:04:00,989 --> 00:04:07,290
network processing units but it's some

00:04:03,810 --> 00:04:10,470
kind of faster silicon that can do

00:04:07,290 --> 00:04:12,150
things with this jitter than a CPU can

00:04:10,470 --> 00:04:14,010
do which is what we want when we're

00:04:12,150 --> 00:04:16,049
dealing with network packets so the

00:04:14,010 --> 00:04:17,310
control plane makes some decision based

00:04:16,049 --> 00:04:20,039
on some kind of protocol and it pushes

00:04:17,310 --> 00:04:22,620
it down to the ASIC so that I can make

00:04:20,039 --> 00:04:24,300
the packets go in the right place so in

00:04:22,620 --> 00:04:27,450
SDA in twitch and that this is the open

00:04:24,300 --> 00:04:28,800
flow view of the world we replaced that

00:04:27,450 --> 00:04:30,930
plane on the switch was a thing called

00:04:28,800 --> 00:04:35,070
an open flow agent and then that speaks

00:04:30,930 --> 00:04:36,450
open flow API over TCP to your control

00:04:35,070 --> 00:04:38,640
plane which now all runs on a set of

00:04:36,450 --> 00:04:40,590
servers and we have a bit more power

00:04:38,640 --> 00:04:41,550
there and we have a larger view of the

00:04:40,590 --> 00:04:42,590
network so we can make some other

00:04:41,550 --> 00:04:47,700
decisions

00:04:42,590 --> 00:04:51,690
so how open flow works I mean you can

00:04:47,700 --> 00:04:54,120
simply boil it down mostly to you get

00:04:51,690 --> 00:04:55,770
rules you make a roll you push it onto

00:04:54,120 --> 00:04:57,930
the switch and the switch carries out

00:04:55,770 --> 00:05:01,260
that rule so a roll has two parts a

00:04:57,930 --> 00:05:02,970
match and in action the match is on some

00:05:01,260 --> 00:05:05,820
kind of hitter inside of the packet so

00:05:02,970 --> 00:05:07,140
you might match on say an IP address if

00:05:05,820 --> 00:05:09,030
you want to do routing you might match

00:05:07,140 --> 00:05:11,850
on a MAC address um you want to do

00:05:09,030 --> 00:05:13,140
switching you can match on TCP ports UDP

00:05:11,850 --> 00:05:15,180
ports if you want to start doing like

00:05:13,140 --> 00:05:17,190
firewalling type things load balancer or

00:05:15,180 --> 00:05:20,460
something and then you have an action

00:05:17,190 --> 00:05:22,710
associated with that match and an action

00:05:20,460 --> 00:05:26,880
could be like drop the packet it could

00:05:22,710 --> 00:05:29,730
be output to a port or we can use these

00:05:26,880 --> 00:05:32,100
things called tables to string lots of

00:05:29,730 --> 00:05:33,900
rules together and compose them into

00:05:32,100 --> 00:05:35,940
some simple logic some if-then-else

00:05:33,900 --> 00:05:39,140
logic this is the diagram from the

00:05:35,940 --> 00:05:41,490
OpenFlow spec on how this kind of works

00:05:39,140 --> 00:05:44,120
so you get a packet and you start in

00:05:41,490 --> 00:05:47,880
table 0 always which has a set of rules

00:05:44,120 --> 00:05:49,140
at priority order and then you sort of

00:05:47,880 --> 00:05:51,440
move through these tables until you

00:05:49,140 --> 00:05:55,530
decide what you want to do to the packet

00:05:51,440 --> 00:05:56,850
so what controller can we use so the

00:05:55,530 --> 00:05:58,470
reason we need a controller is when you

00:05:56,850 --> 00:06:00,270
get misty and switch other box it does

00:05:58,470 --> 00:06:02,600
nothing drops all your packets this

00:06:00,270 --> 00:06:04,770
isn't ideal unless you're a very

00:06:02,600 --> 00:06:06,090
security-conscious person because that's

00:06:04,770 --> 00:06:08,490
a pretty good secure system if you don't

00:06:06,090 --> 00:06:10,770
forward any packets so what we need is a

00:06:08,490 --> 00:06:13,110
controller that is able to re-implement

00:06:10,770 --> 00:06:15,210
and the features were already had so

00:06:13,110 --> 00:06:16,770
we've just lost you know 20 years worth

00:06:15,210 --> 00:06:18,180
of progress and networking we've gone to

00:06:16,770 --> 00:06:19,740
nothing and then we need to start

00:06:18,180 --> 00:06:21,720
building this up one by one again and

00:06:19,740 --> 00:06:22,860
today the clue was in the bowl of the

00:06:21,720 --> 00:06:24,500
slide we're going to talk about faucet

00:06:22,860 --> 00:06:27,270
controller which is something I work on

00:06:24,500 --> 00:06:29,790
so what is faucet so we call it a

00:06:27,270 --> 00:06:31,680
lightweight esteem controller so it's

00:06:29,790 --> 00:06:34,500
not some big clustered thing that you've

00:06:31,680 --> 00:06:36,210
got to run 30 machines on to get it

00:06:34,500 --> 00:06:39,180
running it'll run on anything from a

00:06:36,210 --> 00:06:40,139
Raspberry Pi up to some big server if

00:06:39,180 --> 00:06:44,400
you want to

00:06:40,139 --> 00:06:46,439
lots of hosts it's using upper flow 1.3

00:06:44,400 --> 00:06:48,449
so that's just a version of the up and

00:06:46,439 --> 00:06:50,370
flow standard that's quite well used by

00:06:48,449 --> 00:06:52,050
by production switches and it gives you

00:06:50,370 --> 00:06:54,360
quite a bit of flexibility which is nice

00:06:52,050 --> 00:06:55,800
we call it production quality because

00:06:54,360 --> 00:06:56,939
we've used in production a bunch and

00:06:55,800 --> 00:07:01,289
that's what the second half of this talk

00:06:56,939 --> 00:07:04,949
will be about we're very very careful to

00:07:01,289 --> 00:07:07,639
test everything we can so we have over

00:07:04,949 --> 00:07:09,930
90 percent unit test coverage we have

00:07:07,639 --> 00:07:11,400
integration tests that test about 200

00:07:09,930 --> 00:07:15,240
different Network scenarios and

00:07:11,400 --> 00:07:17,969
virtualized and also on vendor hardware

00:07:15,240 --> 00:07:19,949
so a number of vendors that work with us

00:07:17,969 --> 00:07:21,930
actually run faucet the integration

00:07:19,949 --> 00:07:23,789
tests as part of their QA release for

00:07:21,930 --> 00:07:26,250
their firmware so this is how we know

00:07:23,789 --> 00:07:29,039
that when you go and buy a device that

00:07:26,250 --> 00:07:31,529
is faucet branded also compatible or

00:07:29,039 --> 00:07:33,960
whatever you know it works with latest

00:07:31,529 --> 00:07:35,580
version because that firmware you're

00:07:33,960 --> 00:07:38,159
running on it has run against our test

00:07:35,580 --> 00:07:39,629
suite and told the vendor you know what

00:07:38,159 --> 00:07:43,889
features work and what features don't

00:07:39,629 --> 00:07:46,229
this also means that sort of faucet you

00:07:43,889 --> 00:07:48,419
you you configure what you want and then

00:07:46,229 --> 00:07:50,580
it can program that the same way on

00:07:48,419 --> 00:07:53,189
every single device that you buy no

00:07:50,580 --> 00:07:55,259
matter what vendor it is and this is

00:07:53,189 --> 00:07:59,069
quite a powerful thing when you've got

00:07:55,259 --> 00:08:02,430
it so and we do all this why not using

00:07:59,069 --> 00:08:04,289
any driver code so a lot of other

00:08:02,430 --> 00:08:06,360
controllers they would they would have a

00:08:04,289 --> 00:08:08,129
driver shim layer that changes how the

00:08:06,360 --> 00:08:09,389
open flow comes out depending on which

00:08:08,129 --> 00:08:11,639
Hardware you've got to match the

00:08:09,389 --> 00:08:13,020
compatibilities and we don't do that we

00:08:11,639 --> 00:08:14,129
went to the alternative approach of

00:08:13,020 --> 00:08:16,289
working directly with hardware

00:08:14,129 --> 00:08:19,050
manufacturers to make sure they support

00:08:16,289 --> 00:08:21,389
open flow the core standard and we don't

00:08:19,050 --> 00:08:22,560
use any vendor extensions at all so we

00:08:21,389 --> 00:08:26,849
do all the normal layer 2 and layer 3

00:08:22,560 --> 00:08:29,460
things and we're only 10,000 lines of

00:08:26,849 --> 00:08:30,960
Python at the moment but so you can

00:08:29,460 --> 00:08:32,579
either modify that to add new features

00:08:30,960 --> 00:08:34,469
or we also have a policy driven approach

00:08:32,579 --> 00:08:37,289
to changing the behavior for sit if you

00:08:34,469 --> 00:08:40,620
don't want to write code so here's kind

00:08:37,289 --> 00:08:42,719
of how it works so makes you have two

00:08:40,620 --> 00:08:45,720
controllers and force it so force engage

00:08:42,719 --> 00:08:47,399
fourth it's our readwrite controller it

00:08:45,720 --> 00:08:50,519
ingests a config file and yeah more

00:08:47,399 --> 00:08:51,569
format and it composes some open flow

00:08:50,519 --> 00:08:54,450
rules and pushes them down to your

00:08:51,569 --> 00:08:57,660
switch and engages our read-only control

00:08:54,450 --> 00:09:01,110
it communicates with loo switches on you

00:08:57,660 --> 00:09:03,480
network and polls periodically for the

00:09:01,110 --> 00:09:05,310
statistics and the reason why we want

00:09:03,480 --> 00:09:07,320
that to be read-only controller is if

00:09:05,310 --> 00:09:09,210
you have some kind of mistake or bug in

00:09:07,320 --> 00:09:12,480
your monitoring code you don't want this

00:09:09,210 --> 00:09:15,089
to break the internet or the network so

00:09:12,480 --> 00:09:18,029
gage can go away disappear it can break

00:09:15,089 --> 00:09:20,400
and nothing will be impacted on the

00:09:18,029 --> 00:09:22,380
network so gage also takes a config file

00:09:20,400 --> 00:09:24,330
and it can spit out to a number of

00:09:22,380 --> 00:09:26,190
different database Bekins so at the

00:09:24,330 --> 00:09:28,800
moment we're quite liking Prometheus but

00:09:26,190 --> 00:09:30,960
you can also use in Flex DB and flat

00:09:28,800 --> 00:09:32,610
files and then once you've got an influx

00:09:30,960 --> 00:09:35,570
or Prometheus you can use a graph owner

00:09:32,610 --> 00:09:38,820
or something to make real-time graphs

00:09:35,570 --> 00:09:40,920
faucet itself is quite neat it also

00:09:38,820 --> 00:09:43,620
pushes instrumentation of itself to

00:09:40,920 --> 00:09:44,910
Prometheus so you can so we use this a

00:09:43,620 --> 00:09:46,080
lot in development but you can use it

00:09:44,910 --> 00:09:48,990
when you're running your network as well

00:09:46,080 --> 00:09:50,850
just to see where all the CPU cycles and

00:09:48,990 --> 00:09:52,320
Forsett are going that's how we work out

00:09:50,850 --> 00:09:55,110
if we need to make some of our loops

00:09:52,320 --> 00:09:57,420
faster or do some lists he'll be

00:09:55,110 --> 00:09:59,970
processing on types of packets so that's

00:09:57,420 --> 00:10:02,640
quite cool there's also an event system

00:09:59,970 --> 00:10:05,190
so faucet can push into you've got some

00:10:02,640 --> 00:10:08,370
kind of security thing every host at

00:10:05,190 --> 00:10:09,990
learns if we host a ton learns new mac

00:10:08,370 --> 00:10:11,540
addresses that kind of thing and we can

00:10:09,990 --> 00:10:15,600
push to something that can then

00:10:11,540 --> 00:10:18,390
implement some of your own behavior for

00:10:15,600 --> 00:10:20,250
getting routes into it we use BGP it's

00:10:18,390 --> 00:10:21,150
pretty well standardized and you can do

00:10:20,250 --> 00:10:23,430
a lot of things with it

00:10:21,150 --> 00:10:26,880
so that's how you can come connect force

00:10:23,430 --> 00:10:28,560
it into a regular sort of l3 network so

00:10:26,880 --> 00:10:31,080
how do you configure faucet yeah it's

00:10:28,560 --> 00:10:34,320
yellow the yellow represents your

00:10:31,080 --> 00:10:35,700
topology and features IP addresses that

00:10:34,320 --> 00:10:38,160
kind of thing so here's an example

00:10:35,700 --> 00:10:40,529
config a pretty simple one so we have

00:10:38,160 --> 00:10:43,290
one VLAN we give a VLAN ID of a hundred

00:10:40,529 --> 00:10:45,000
and we can add some sub descriptions so

00:10:43,290 --> 00:10:47,010
it appears later in Prometheus you can

00:10:45,000 --> 00:10:48,959
you can find it it keeps it labeled for

00:10:47,010 --> 00:10:51,089
you foster can have a number of virtual

00:10:48,959 --> 00:10:53,160
IPS on your network and this is useful

00:10:51,089 --> 00:10:55,709
so that you can use faucet as your next

00:10:53,160 --> 00:10:57,990
top it'll participate in the network and

00:10:55,709 --> 00:11:00,540
it can be before v6 whatever you want

00:10:57,990 --> 00:11:02,520
and then we have a list of DPS or data

00:11:00,540 --> 00:11:05,250
paths and these your switches so in this

00:11:02,520 --> 00:11:07,590
example we've got switch one it's a open

00:11:05,250 --> 00:11:09,900
V switch a software switch is

00:11:07,590 --> 00:11:12,120
path identifier one has two ports and

00:11:09,900 --> 00:11:13,890
you put them on those feelings now the

00:11:12,120 --> 00:11:15,870
key thing to note about Forsett is

00:11:13,890 --> 00:11:18,330
everything is idempotent so as long as

00:11:15,870 --> 00:11:19,890
you give you know every controller and

00:11:18,330 --> 00:11:21,870
you network that config you can

00:11:19,890 --> 00:11:23,580
configure them on your switches so you

00:11:21,870 --> 00:11:25,650
could have you know three controllers

00:11:23,580 --> 00:11:26,850
all of the same config file and you

00:11:25,650 --> 00:11:30,540
point all your switches to those three

00:11:26,850 --> 00:11:32,670
controllers and whenever they get a

00:11:30,540 --> 00:11:33,900
packet to deal with they're all going to

00:11:32,670 --> 00:11:35,670
do the same thing because over the same

00:11:33,900 --> 00:11:37,200
config so this is how you do a che

00:11:35,670 --> 00:11:39,200
without having to do state sharing

00:11:37,200 --> 00:11:43,410
between all your controllers which is a

00:11:39,200 --> 00:11:47,550
disastrous approach that disastrous konk

00:11:43,410 --> 00:11:50,340
consequences all right so now that's the

00:11:47,550 --> 00:11:52,380
sort of intro and background now let's

00:11:50,340 --> 00:11:54,120
apply this to a real life because I

00:11:52,380 --> 00:11:55,890
think that's why it runs here so every

00:11:54,120 --> 00:11:57,540
year there's this super computer

00:11:55,890 --> 00:12:00,390
conference in the US it's quite large

00:11:57,540 --> 00:12:02,400
last year was the 30th anniversary it's

00:12:00,390 --> 00:12:04,860
sort of like a 14,000 seat conference

00:12:02,400 --> 00:12:07,890
and every year they do this crazy thing

00:12:04,860 --> 00:12:10,080
where they build the world's one of the

00:12:07,890 --> 00:12:14,340
world's largest temporary networks so it

00:12:10,080 --> 00:12:16,230
exists for about of week and for that

00:12:14,340 --> 00:12:17,340
conference at the end of last year we

00:12:16,230 --> 00:12:22,950
actually deployed for suit on this

00:12:17,340 --> 00:12:25,890
network and yeah so what is sign it so

00:12:22,950 --> 00:12:29,040
sign it's the name of the network that's

00:12:25,890 --> 00:12:31,710
a photo of my colleague Lance who was

00:12:29,040 --> 00:12:33,420
our chief diagram officer so he was in

00:12:31,710 --> 00:12:36,960
charge of making this diagram behind him

00:12:33,420 --> 00:12:39,810
all by hand so every line on that

00:12:36,960 --> 00:12:42,630
diagram is either at ng hundred G of 400

00:12:39,810 --> 00:12:44,430
G link each box is a piece of equipment

00:12:42,630 --> 00:12:46,080
that someone had to look after and all

00:12:44,430 --> 00:12:48,180
those red lines along the top are our

00:12:46,080 --> 00:12:50,100
internet connections and this year we

00:12:48,180 --> 00:12:51,920
had 4.0 two terabytes per second of

00:12:50,100 --> 00:12:53,970
internet the capacity of the network

00:12:51,920 --> 00:12:55,770
internally was a lot larger than that

00:12:53,970 --> 00:12:57,480
but that was how much internet we had

00:12:55,770 --> 00:12:58,830
that we had to deliver to sort of all

00:12:57,480 --> 00:13:01,170
the booths on the show floor of the

00:12:58,830 --> 00:13:03,960
conference so this thing was 52 million

00:13:01,170 --> 00:13:07,680
dollars of hardware for tons of

00:13:03,960 --> 00:13:10,440
equipment 225 people to manage this

00:13:07,680 --> 00:13:12,900
whole thing it's big is the one thing to

00:13:10,440 --> 00:13:14,670
take away from that so let's take a

00:13:12,900 --> 00:13:17,490
little step back so how did we kind of

00:13:14,670 --> 00:13:20,220
get involved this a small STM controller

00:13:17,490 --> 00:13:21,540
team in New Zealand large US conference

00:13:20,220 --> 00:13:23,240
well we kind of a

00:13:21,540 --> 00:13:26,480
approach their conference committee

00:13:23,240 --> 00:13:28,410
early last year and we kind of said hey

00:13:26,480 --> 00:13:31,110
can we help you out with some of your

00:13:28,410 --> 00:13:33,060
problems and can you help us by

00:13:31,110 --> 00:13:35,699
deploying our project and showing it

00:13:33,060 --> 00:13:38,250
works and they pretty quickly accepted

00:13:35,699 --> 00:13:41,670
our proposal and then sort of began work

00:13:38,250 --> 00:13:43,199
so what is this involved how do you

00:13:41,670 --> 00:13:45,660
manage a thing like this

00:13:43,199 --> 00:13:48,720
well lots and lots of video conferences

00:13:45,660 --> 00:13:51,149
and to lots of far away time zones so a

00:13:48,720 --> 00:13:53,699
lot of late nights and early mornings in

00:13:51,149 --> 00:13:55,500
particular our team for doing our part

00:13:53,699 --> 00:13:58,380
of the deployment and we were split

00:13:55,500 --> 00:14:01,050
between Hamilton Wellington Berkeley

00:13:58,380 --> 00:14:02,970
Champaign and Dallas so it was it was a

00:14:01,050 --> 00:14:04,860
lot to manage but luckily we had a

00:14:02,970 --> 00:14:08,040
really good project management team who

00:14:04,860 --> 00:14:09,389
helped us out there and so you know when

00:14:08,040 --> 00:14:10,800
you're doing a project the first thing

00:14:09,389 --> 00:14:14,040
you do is come up with some scope and

00:14:10,800 --> 00:14:17,880
some requirements so they were pretty

00:14:14,040 --> 00:14:19,199
keen for us to do a parallel with their

00:14:17,880 --> 00:14:22,019
regular network so that they wouldn't

00:14:19,199 --> 00:14:23,459
have to have the hassle of learning

00:14:22,019 --> 00:14:24,839
everything and we wouldn't have to have

00:14:23,459 --> 00:14:26,910
the hassle of learning everything they

00:14:24,839 --> 00:14:28,680
did so we kind of ran them side by side

00:14:26,910 --> 00:14:30,000
and then booths would either be on the

00:14:28,680 --> 00:14:31,940
regular sign it or their be on the

00:14:30,000 --> 00:14:36,149
faucet sign it we managed to get about

00:14:31,940 --> 00:14:38,100
25% of the network connected to us so we

00:14:36,149 --> 00:14:43,220
would appear with their core routers and

00:14:38,100 --> 00:14:45,690
advertise and receive routes of BGP and

00:14:43,220 --> 00:14:48,389
each booth would be a separate VLAN and

00:14:45,690 --> 00:14:51,079
subnet so separate l2 domain which is

00:14:48,389 --> 00:14:54,329
quite nice limits your arrow your

00:14:51,079 --> 00:14:56,399
problem domain so we had to support

00:14:54,329 --> 00:14:58,319
booths and they could buy one gig

00:14:56,399 --> 00:15:00,149
internet connections 10 gig connections

00:14:58,319 --> 00:15:01,769
or hundred gig connections yes that's

00:15:00,149 --> 00:15:05,010
right for this conference in the middle

00:15:01,769 --> 00:15:07,949
of Dallas to your little square both you

00:15:05,010 --> 00:15:10,500
could get 100 gigabit of Internet for a

00:15:07,949 --> 00:15:11,850
reasonable price it was quite nice and

00:15:10,500 --> 00:15:13,709
then they have this kind of customer

00:15:11,850 --> 00:15:16,079
information database built in Django

00:15:13,709 --> 00:15:17,639
which tracks every order or the

00:15:16,079 --> 00:15:19,500
connection information and we just need

00:15:17,639 --> 00:15:23,069
to integrate with that to learn

00:15:19,500 --> 00:15:25,110
everything so we kind of started by

00:15:23,069 --> 00:15:28,350
sketching this rough diagram it took us

00:15:25,110 --> 00:15:29,970
about a month to get to this point this

00:15:28,350 --> 00:15:33,360
is very quickly drawn and I don't even

00:15:29,970 --> 00:15:35,220
know what it's drawn in but so we see at

00:15:33,360 --> 00:15:38,879
the top these two core routers

00:15:35,220 --> 00:15:41,040
and they wanted us to connect at 200 G

00:15:38,879 --> 00:15:44,279
to each core outer that was just so that

00:15:41,040 --> 00:15:46,259
one of the fiber peers failed we'd swap

00:15:44,279 --> 00:15:48,899
over to the using the other one so we

00:15:46,259 --> 00:15:53,670
had to use LACP link aggregate control

00:15:48,899 --> 00:15:56,310
protocol to to manage that and then the

00:15:53,670 --> 00:15:59,100
middle would have some kind of router so

00:15:56,310 --> 00:16:01,589
I guess I need to introduce some

00:15:59,100 --> 00:16:05,370
terminology so they used the terms knock

00:16:01,589 --> 00:16:06,600
and D knock so a knock is you know

00:16:05,370 --> 00:16:06,959
normally it's a network operations

00:16:06,600 --> 00:16:08,790
center

00:16:06,959 --> 00:16:11,250
well they tie that into the core of the

00:16:08,790 --> 00:16:14,759
network so wherever you see knock just

00:16:11,250 --> 00:16:18,329
read core and then D knock stands for

00:16:14,759 --> 00:16:20,490
distributed knock and those are the sort

00:16:18,329 --> 00:16:23,490
of excess bits of the network and they

00:16:20,490 --> 00:16:27,509
are all across the show floor so you've

00:16:23,490 --> 00:16:29,399
got to so you've got to physically be in

00:16:27,509 --> 00:16:31,769
lots of different places so force it

00:16:29,399 --> 00:16:34,589
would be an HD knock so five of them and

00:16:31,769 --> 00:16:36,899
booths go into a D knock and then the D

00:16:34,589 --> 00:16:38,250
knock would carry up to the knocker hour

00:16:36,899 --> 00:16:41,189
and then that would go off to the

00:16:38,250 --> 00:16:44,490
Internet so we kind of did things

00:16:41,189 --> 00:16:47,100
backwards I guess we have a design but

00:16:44,490 --> 00:16:49,559
no equipment to put on the network so

00:16:47,100 --> 00:16:51,449
what you do at this stage is you call

00:16:49,559 --> 00:16:55,829
some people and you ask for some favors

00:16:51,449 --> 00:16:58,680
very nicely and brilliant thank you to

00:16:55,829 --> 00:17:00,899
la télé Cisco and Navi Flo who all

00:16:58,680 --> 00:17:02,639
donated us will loaned us for the

00:17:00,899 --> 00:17:09,409
project duration which is about eight

00:17:02,639 --> 00:17:12,150
months two devices of hundred G and once

00:17:09,409 --> 00:17:14,010
you know they serve taught us what they

00:17:12,150 --> 00:17:16,049
were going to give us and we sort of

00:17:14,010 --> 00:17:18,419
organize shipping to get to a test lab

00:17:16,049 --> 00:17:20,370
in Berkeley because we kind of wanted to

00:17:18,419 --> 00:17:21,569
assemble the network before we took it

00:17:20,370 --> 00:17:24,780
to the show just to make sure everything

00:17:21,569 --> 00:17:28,049
worked so that's what we did and this

00:17:24,780 --> 00:17:29,390
involves a lot of waiting getting so we

00:17:28,049 --> 00:17:33,059
we had equipment come from Canada

00:17:29,390 --> 00:17:35,870
various states in the US and you got to

00:17:33,059 --> 00:17:39,299
kind of wait a little while for this to

00:17:35,870 --> 00:17:40,860
appear physically where we wanted it so

00:17:39,299 --> 00:17:42,480
why we did that we did a bit of design

00:17:40,860 --> 00:17:45,270
now that we actually know what equipment

00:17:42,480 --> 00:17:46,950
were in again it gonna get so this is

00:17:45,270 --> 00:17:49,049
kind of what we ended up with in the end

00:17:46,950 --> 00:17:53,249
so a network had 75

00:17:49,049 --> 00:17:55,019
tgd ports 146 10g ports and 48 1g ports

00:17:53,249 --> 00:17:57,119
I would love to have used them all but

00:17:55,019 --> 00:17:59,639
they simply weren't enough people and

00:17:57,119 --> 00:18:02,279
booths to actually use that much but

00:17:59,639 --> 00:18:05,700
yeah if this thing was fully configured

00:18:02,279 --> 00:18:07,739
benign terabytes per second which i

00:18:05,700 --> 00:18:10,379
think is one of the larger open flow

00:18:07,739 --> 00:18:13,499
deployments out there I'd love to be

00:18:10,379 --> 00:18:15,480
proven wrong though so then it works

00:18:13,499 --> 00:18:18,769
pretty simple so in the middle we had a

00:18:15,480 --> 00:18:21,899
barefoot Tofino ASIC running inside a

00:18:18,769 --> 00:18:24,359
switch provided by no B flow and thus

00:18:21,899 --> 00:18:26,429
did 32 ports of 100g and it's a p4

00:18:24,359 --> 00:18:29,129
capable ASIC which we'll talk about soon

00:18:26,429 --> 00:18:31,289
and then off to the side here we have

00:18:29,129 --> 00:18:33,419
our controller and then we have this 10g

00:18:31,289 --> 00:18:34,830
what we call an inner feeling it's an if

00:18:33,419 --> 00:18:37,379
these network function virtualization

00:18:34,830 --> 00:18:38,909
and all that means is instead of a

00:18:37,379 --> 00:18:41,489
network function living on a switch or a

00:18:38,909 --> 00:18:43,169
router like DHCP BGP that kind of thing

00:18:41,489 --> 00:18:47,299
you pull it off run it on a Linux box

00:18:43,169 --> 00:18:51,899
use ICD DHCP server or bird or something

00:18:47,299 --> 00:18:54,450
and yeah all that means and then we go

00:18:51,899 --> 00:18:56,549
through this like blue DCI layer or all

00:18:54,450 --> 00:18:59,279
that means is data center interconnect

00:18:56,549 --> 00:19:02,070
it's an optical transport network so

00:18:59,279 --> 00:19:03,899
when you've got these sort of D Knox and

00:19:02,070 --> 00:19:06,570
Knox or they've got one knock and then

00:19:03,899 --> 00:19:07,950
all these d knocks all over the show you

00:19:06,570 --> 00:19:11,279
don't really want to run hundreds of

00:19:07,950 --> 00:19:12,779
peers of fibre to all these places so

00:19:11,279 --> 00:19:14,970
they brought in a bunch of optical gear

00:19:12,779 --> 00:19:17,330
so that it maxes actually different

00:19:14,970 --> 00:19:19,679
colors of light onto one pair of fiber

00:19:17,330 --> 00:19:21,269
which can then be broken out which makes

00:19:19,679 --> 00:19:23,940
things a lot easier and then these are

00:19:21,269 --> 00:19:27,509
the models we used in HD NOC and they

00:19:23,940 --> 00:19:32,159
all had varying numbers of 10 G's 1 GS

00:19:27,509 --> 00:19:35,700
and 25 G's 40 G's and hundred G's it's a

00:19:32,159 --> 00:19:39,629
lot of different force and so yeah force

00:19:35,700 --> 00:19:41,460
it and it would handle the VLANs it did

00:19:39,629 --> 00:19:44,999
v6 router of business to give out IP

00:19:41,460 --> 00:19:47,429
addresses it did inter VLAN routing so a

00:19:44,999 --> 00:19:50,190
lot of the booths wanted to do

00:19:47,429 --> 00:19:51,509
demonstrations where they did large file

00:19:50,190 --> 00:19:53,580
transfers at high speed between

00:19:51,509 --> 00:19:54,989
different people in the show floor so

00:19:53,580 --> 00:19:57,419
you have to make sure that you can route

00:19:54,989 --> 00:19:58,470
between the ACE between the booths so

00:19:57,419 --> 00:20:00,059
that's what the inter VLAN routing

00:19:58,470 --> 00:20:01,440
future leader stood and then we

00:20:00,059 --> 00:20:02,050
implemented a bunch of network support

00:20:01,440 --> 00:20:04,210
and

00:20:02,050 --> 00:20:06,250
policy at the bottom of the network on

00:20:04,210 --> 00:20:09,640
the excess ports that's for dropping

00:20:06,250 --> 00:20:12,640
things like Road v6 Ras rogue DHCP

00:20:09,640 --> 00:20:14,050
servers and that kind of thing and force

00:20:12,640 --> 00:20:17,500
it lets you easily do that kind of stuff

00:20:14,050 --> 00:20:21,250
then for any fee we did DHCP and BGP on

00:20:17,500 --> 00:20:24,040
the Linux box so yeah let's let's talk

00:20:21,250 --> 00:20:26,290
about this p4 thing so the way p4 works

00:20:24,040 --> 00:20:31,060
is a bit different token flow so we end

00:20:26,290 --> 00:20:33,730
up with a p4 program and that's user

00:20:31,060 --> 00:20:35,650
supply it and that defines so you kind

00:20:33,730 --> 00:20:37,450
of get this micro C language and you

00:20:35,650 --> 00:20:38,620
define what your packets look like and

00:20:37,450 --> 00:20:41,970
then how you want to interact with your

00:20:38,620 --> 00:20:45,010
packets and they have a match action

00:20:41,970 --> 00:20:46,840
table sort of system somewhat open flow

00:20:45,010 --> 00:20:49,390
and then your vendor gives you a p4

00:20:46,840 --> 00:20:51,070
architecture model you manage these

00:20:49,390 --> 00:20:53,680
together put them into a p4 compiler

00:20:51,070 --> 00:20:55,900
that your vendor supplies you and that

00:20:53,680 --> 00:20:57,790
spits out a runtime api at the top which

00:20:55,900 --> 00:21:00,370
is a control plane and it spits out a

00:20:57,790 --> 00:21:03,190
firmware for your arm for your switch so

00:21:00,370 --> 00:21:05,140
this is how their p4 barefoot switch

00:21:03,190 --> 00:21:07,740
works and then on your switch you end up

00:21:05,140 --> 00:21:11,020
with some tables and some memories now

00:21:07,740 --> 00:21:14,320
faucet doesn't support open flow but it

00:21:11,020 --> 00:21:16,660
can talk to this p4 to Fino box so how

00:21:14,320 --> 00:21:18,580
did that work what you can kind of do is

00:21:16,660 --> 00:21:20,560
you can write open flow that the

00:21:18,580 --> 00:21:23,350
application and the specification as a

00:21:20,560 --> 00:21:26,050
p4 application and then you can compile

00:21:23,350 --> 00:21:28,270
it with Barefoot's p4 compiler load that

00:21:26,050 --> 00:21:30,040
on there ASIC and now force it can

00:21:28,270 --> 00:21:33,340
suddenly talk to this box it can talk to

00:21:30,040 --> 00:21:36,130
before and a big thank you to never flow

00:21:33,340 --> 00:21:37,540
for writing that for us and making that

00:21:36,130 --> 00:21:42,400
available so that people can purchase

00:21:37,540 --> 00:21:43,930
today so sort of while we're still

00:21:42,400 --> 00:21:45,850
waiting for our equipment to actually

00:21:43,930 --> 00:21:47,350
physically turned up we decided to do a

00:21:45,850 --> 00:21:51,130
little bit of development back here in

00:21:47,350 --> 00:21:52,570
New Zealand so what we did is we daddy

00:21:51,130 --> 00:21:54,370
provide all the features we need to work

00:21:52,570 --> 00:21:56,050
all the functionality and we added

00:21:54,370 --> 00:21:58,270
integration tests to our integration

00:21:56,050 --> 00:22:00,220
test suite to verify that all these

00:21:58,270 --> 00:22:02,440
features worked how we thought they

00:22:00,220 --> 00:22:06,130
worked and we set that into the

00:22:02,440 --> 00:22:07,660
integration test system and that runs on

00:22:06,130 --> 00:22:10,450
every single commit that comes into our

00:22:07,660 --> 00:22:12,360
github so that was our sort of way of

00:22:10,450 --> 00:22:15,250
making sure that's never broke because

00:22:12,360 --> 00:22:16,090
we tend to change code quite frequently

00:22:15,250 --> 00:22:18,279
and refactor all

00:22:16,090 --> 00:22:19,749
so it's nice to know that those

00:22:18,279 --> 00:22:21,639
integration tests of the Eric constantly

00:22:19,749 --> 00:22:23,710
running so that when we can't break

00:22:21,639 --> 00:22:26,109
things that were already working we also

00:22:23,710 --> 00:22:29,169
built a scale model at my workplace wand

00:22:26,109 --> 00:22:31,539
at University of Waikato so the nice

00:22:29,169 --> 00:22:33,219
thing about open flow and faucet is I

00:22:31,539 --> 00:22:34,509
grabbed a whole bunch of random devices

00:22:33,219 --> 00:22:36,909
from different vendors than we were

00:22:34,509 --> 00:22:38,799
using on the show floor different models

00:22:36,909 --> 00:22:41,109
different port counts but you can build

00:22:38,799 --> 00:22:42,849
the same topology you can boot it up use

00:22:41,109 --> 00:22:45,190
the same configs they'll work exactly

00:22:42,849 --> 00:22:47,259
the same as it did to the big one so

00:22:45,190 --> 00:22:49,059
that was quite useful so that we could

00:22:47,259 --> 00:22:51,070
sort of see things working before we

00:22:49,059 --> 00:22:53,019
actually built our test lab on the real

00:22:51,070 --> 00:22:55,960
equipment and then we started to work on

00:22:53,019 --> 00:22:58,359
the automation so automation is really

00:22:55,960 --> 00:23:01,029
great for networking so automation lets

00:22:58,359 --> 00:23:02,559
you define a set of tasks once and you

00:23:01,029 --> 00:23:04,359
can infinitely carry that out for no

00:23:02,559 --> 00:23:06,429
cost which is absolutely brilliant

00:23:04,359 --> 00:23:08,619
applies perfectly to network service

00:23:06,429 --> 00:23:10,929
definitions so if you've got a bunch of

00:23:08,619 --> 00:23:13,570
ways of handling customers you throw

00:23:10,929 --> 00:23:15,190
this into automation and you know you

00:23:13,570 --> 00:23:18,009
can just spit this out every time when

00:23:15,190 --> 00:23:19,659
your customer comes so we used an

00:23:18,009 --> 00:23:21,519
tubulin particular heavily for our

00:23:19,659 --> 00:23:26,679
deployment to make our lives a lot

00:23:21,519 --> 00:23:30,969
easier and the way this worked is so we

00:23:26,679 --> 00:23:32,529
ended up with so we got the customer

00:23:30,969 --> 00:23:34,059
database and which was the source of

00:23:32,529 --> 00:23:36,219
truth for the network so it knew

00:23:34,059 --> 00:23:39,969
everything and then I wrote a little

00:23:36,219 --> 00:23:42,219
python script which used the Django

00:23:39,969 --> 00:23:44,469
models of the customer database to just

00:23:42,219 --> 00:23:48,369
it just blindly dumped everything from

00:23:44,469 --> 00:23:50,859
Django into into a yeah Mel config file

00:23:48,369 --> 00:23:52,869
data structure thing so you end up after

00:23:50,859 --> 00:23:56,139
this with about 300 lines of em all then

00:23:52,869 --> 00:23:59,649
I use that as a input variable input and

00:23:56,139 --> 00:24:01,450
to enter ansible to sort of I could then

00:23:59,649 --> 00:24:04,539
look that up when I built my templates

00:24:01,450 --> 00:24:06,369
so in ansible you kind of get like

00:24:04,539 --> 00:24:08,469
ginger templates which you use a bunch

00:24:06,369 --> 00:24:11,589
of variables and you can do substitution

00:24:08,469 --> 00:24:15,639
of for loops to output a sort of final

00:24:11,589 --> 00:24:19,169
version and so I wrote in the end about

00:24:15,639 --> 00:24:21,849
180 lines of ansible 260 lines of ginger

00:24:19,169 --> 00:24:24,039
templating and you sort of combine these

00:24:21,849 --> 00:24:26,229
together and now at the end pops all

00:24:24,039 --> 00:24:28,210
your compelled or your conflicts so over

00:24:26,229 --> 00:24:29,260
1200 lines and so you can sort of see

00:24:28,210 --> 00:24:31,720
the ramp up here you

00:24:29,260 --> 00:24:34,170
a little bit of work but at the end your

00:24:31,720 --> 00:24:38,020
automation does everything for you and

00:24:34,170 --> 00:24:39,430
this is kind of all available online I

00:24:38,020 --> 00:24:41,160
don't know how useful it is but it's

00:24:39,430 --> 00:24:44,860
zero if you want to have a look at

00:24:41,160 --> 00:24:47,080
writing ansible for networking and I

00:24:44,860 --> 00:24:47,590
also put up all the generated Forsett

00:24:47,080 --> 00:24:51,040
configs

00:24:47,590 --> 00:24:54,610
if people want a example of how you run

00:24:51,040 --> 00:25:00,250
a huge faucet network but hey things

00:24:54,610 --> 00:25:03,100
arrive that's exciting so when when all

00:25:00,250 --> 00:25:05,530
these sort of boxes turned up we had to

00:25:03,100 --> 00:25:07,300
kind of like build the lab and in

00:25:05,530 --> 00:25:12,820
particularly I'd like to give a shout

00:25:07,300 --> 00:25:15,160
out to Allied Telesis here who they went

00:25:12,820 --> 00:25:17,950
into their lab in San Jose they grabbed

00:25:15,160 --> 00:25:20,140
a bunch of switches out of the lab they

00:25:17,950 --> 00:25:22,240
put them in a car they drove drove that

00:25:20,140 --> 00:25:24,700
car across the Bay Area to Berkeley they

00:25:22,240 --> 00:25:26,920
hand installed all of our devices for us

00:25:24,700 --> 00:25:29,650
and then asked hey what else can we do I

00:25:26,920 --> 00:25:31,810
see they're also a sponsor of this

00:25:29,650 --> 00:25:37,240
conference and I just like to shout out

00:25:31,810 --> 00:25:39,310
Allied Telesis in particular so so when

00:25:37,240 --> 00:25:43,870
we had everything sort of lab DUP and

00:25:39,310 --> 00:25:45,070
plugged in and fibers everywhere so we'd

00:25:43,870 --> 00:25:46,510
already cut it got the answer ball so

00:25:45,070 --> 00:25:48,490
you just hit go on the interval it

00:25:46,510 --> 00:25:50,080
deploys the network and then the trick

00:25:48,490 --> 00:25:52,480
is to throw a lot of traffic at it and

00:25:50,080 --> 00:25:54,610
what I found is network namespaces are

00:25:52,480 --> 00:25:56,800
fantastic for this extremely lightweight

00:25:54,610 --> 00:25:59,050
and Linux and easy to spin up thousands

00:25:56,800 --> 00:26:01,660
on a single box so I had a bunch of

00:25:59,050 --> 00:26:05,560
Tingy hope test hosts and on each I

00:26:01,660 --> 00:26:07,360
spoke up about 1,500 test hose network

00:26:05,560 --> 00:26:09,670
name spaces into a network namespace

00:26:07,360 --> 00:26:11,380
effectively represented like a boost at

00:26:09,670 --> 00:26:13,120
the conference so the conference only

00:26:11,380 --> 00:26:17,140
had you know in the hundreds of booths

00:26:13,120 --> 00:26:19,750
but we like to be a bit play player on

00:26:17,140 --> 00:26:22,300
the safer side so we spun up effective

00:26:19,750 --> 00:26:23,860
maybe ten over what we needed and then I

00:26:22,300 --> 00:26:25,810
wrote a couple of random bash scripts to

00:26:23,860 --> 00:26:29,520
manage all my network namespaces because

00:26:25,810 --> 00:26:32,290
they were hard to manage by by by hand

00:26:29,520 --> 00:26:33,490
so had this on old script and it just

00:26:32,290 --> 00:26:35,320
knew how to log into every network

00:26:33,490 --> 00:26:36,820
namespace and run a command and you can

00:26:35,320 --> 00:26:39,100
have like a penguin script then you had

00:26:36,820 --> 00:26:40,840
a ping every new namespace and so you

00:26:39,100 --> 00:26:42,490
just run that in the background to make

00:26:40,840 --> 00:26:44,320
sure you've got good kicked it

00:26:42,490 --> 00:26:46,390
because that they would report when they

00:26:44,320 --> 00:26:48,550
had a connection failure and then I had

00:26:46,390 --> 00:26:50,800
this random iperf test that you ran it

00:26:48,550 --> 00:26:52,180
found a random pair of hosts on the

00:26:50,800 --> 00:26:53,680
network and did an eye perf and made

00:26:52,180 --> 00:26:55,150
sure it was Tingy

00:26:53,680 --> 00:26:56,890
now fortunate didn't have any hundred G

00:26:55,150 --> 00:26:58,960
test equipment so I couldn't actually

00:26:56,890 --> 00:27:01,060
test at full speed but you kind of just

00:26:58,960 --> 00:27:04,300
assumed that benders know how to make

00:27:01,060 --> 00:27:06,280
fast Network hardware and so after a

00:27:04,300 --> 00:27:08,290
couple of weeks of testing making sure

00:27:06,280 --> 00:27:11,070
everything was happy we shipped it off

00:27:08,290 --> 00:27:14,050
to Dallas for the conference proper and

00:27:11,070 --> 00:27:18,310
how this kind of starts is it starts

00:27:14,050 --> 00:27:20,470
with staging so this network is made by

00:27:18,310 --> 00:27:22,810
225 people all working on different

00:27:20,470 --> 00:27:24,520
teams and different projects and staging

00:27:22,810 --> 00:27:25,960
is the first time where these all come

00:27:24,520 --> 00:27:27,160
together and when we see if what

00:27:25,960 --> 00:27:29,590
everyone's built over the year has

00:27:27,160 --> 00:27:33,070
worked so it's quite a tense sort of

00:27:29,590 --> 00:27:34,570
time when things don't work and the

00:27:33,070 --> 00:27:37,360
other interesting thing is the whole

00:27:34,570 --> 00:27:39,010
networks built off-site not really

00:27:37,360 --> 00:27:42,130
off-site but in a different place to the

00:27:39,010 --> 00:27:43,780
show floor so yeah this is when a lot of

00:27:42,130 --> 00:27:45,940
sort of interrupt testing and diagnosing

00:27:43,780 --> 00:27:49,960
appro problems happened and this is a

00:27:45,940 --> 00:27:51,940
photo of a portion of our team after we

00:27:49,960 --> 00:27:53,830
booted up our thing for the first time

00:27:51,940 --> 00:27:55,510
and had no issues and you'll see in the

00:27:53,830 --> 00:27:59,350
background here this is the the network

00:27:55,510 --> 00:28:00,370
and all of the different cabinets so

00:27:59,350 --> 00:28:02,410
we're pretty excited about that

00:28:00,370 --> 00:28:03,850
and then this is kind of the show floor

00:28:02,410 --> 00:28:08,830
this is well this is half of the show

00:28:03,850 --> 00:28:10,960
floor and so that staging network is

00:28:08,830 --> 00:28:13,240
sort of out in a different part of the

00:28:10,960 --> 00:28:15,970
building and then all the carpet layers

00:28:13,240 --> 00:28:18,250
and start doing their thing start to

00:28:15,970 --> 00:28:20,400
build the conference you'll see I'm I'll

00:28:18,250 --> 00:28:22,510
markers and the roof there and it's to

00:28:20,400 --> 00:28:24,700
designate a sort of walking aisle

00:28:22,510 --> 00:28:26,260
between everywhere and you'll see some

00:28:24,700 --> 00:28:28,780
yellow taped things to the floor

00:28:26,260 --> 00:28:30,670
those are fibers and powers so as

00:28:28,780 --> 00:28:32,260
they're building the show floor they're

00:28:30,670 --> 00:28:34,630
actually doing a lot of underfloor

00:28:32,260 --> 00:28:37,300
fibers to which books and which turns

00:28:34,630 --> 00:28:39,480
out to be annoying when someone's sort

00:28:37,300 --> 00:28:41,440
of runs a tractor over it and breaks it

00:28:39,480 --> 00:28:44,110
but that's all right there was a whole

00:28:41,440 --> 00:28:47,640
team of maybe 25 or people who just went

00:28:44,110 --> 00:28:50,260
around briefs pricing and testing fibers

00:28:47,640 --> 00:28:54,790
did not envy their job I have to say and

00:28:50,260 --> 00:28:56,920
then you know 40 you know 50 million

00:28:54,790 --> 00:28:59,270
dollars with equipment the

00:28:56,920 --> 00:29:01,190
last thing you kind of want to see it is

00:28:59,270 --> 00:29:02,990
fall off a forklift but there is the

00:29:01,190 --> 00:29:05,690
option of that happening but luckily our

00:29:02,990 --> 00:29:08,990
forklift operators were very very smart

00:29:05,690 --> 00:29:11,990
and safe and we safely got the network

00:29:08,990 --> 00:29:13,400
sort of lifted in and now I can say

00:29:11,990 --> 00:29:19,550
that you know I've done a knit workload

00:29:13,400 --> 00:29:21,170
by my forklift before and then once it's

00:29:19,550 --> 00:29:24,470
gone from the staging area to the show

00:29:21,170 --> 00:29:26,210
floor we can now fill in all the

00:29:24,470 --> 00:29:27,800
production information so connections

00:29:26,210 --> 00:29:29,240
are still coming in right up until the

00:29:27,800 --> 00:29:31,130
last sort of week before the conference

00:29:29,240 --> 00:29:32,780
and there's kind of a point where they

00:29:31,130 --> 00:29:33,890
say no more you cannot buy anymore

00:29:32,780 --> 00:29:36,200
connections you should have done that

00:29:33,890 --> 00:29:37,370
ages ago and then that's when they sort

00:29:36,200 --> 00:29:39,110
of tapped us on the shoulder and said

00:29:37,370 --> 00:29:40,640
hey you can pull from our database now

00:29:39,110 --> 00:29:44,120
all your connection informations there

00:29:40,640 --> 00:29:45,200
and so there's my colleague Josh hooding

00:29:44,120 --> 00:29:47,030
go on ansible

00:29:45,200 --> 00:29:48,950
and then they're automatically spun up

00:29:47,030 --> 00:29:50,720
the whole network for us so I went from

00:29:48,950 --> 00:29:52,730
its testing config to the real config

00:29:50,720 --> 00:29:54,320
and then after you do this you kind of

00:29:52,730 --> 00:29:57,440
have to just work with booths

00:29:54,320 --> 00:29:59,360
as they get built to ensure that they're

00:29:57,440 --> 00:30:04,160
each connection sort of comes up and

00:29:59,360 --> 00:30:08,180
works so this is what a de NOC looks

00:30:04,160 --> 00:30:13,640
like so it's like a little mini booths

00:30:08,180 --> 00:30:15,800
all behind predictive wall and then

00:30:13,640 --> 00:30:17,450
that's the rack that's inside of it so

00:30:15,800 --> 00:30:19,430
at the top is the regular sign it's

00:30:17,450 --> 00:30:22,010
which then we'd have a faucet switch in

00:30:19,430 --> 00:30:24,560
HD NOC and then and there's the optical

00:30:22,010 --> 00:30:27,290
transport layer at the bottom which is a

00:30:24,560 --> 00:30:29,600
pretty serious gear and then there'll be

00:30:27,290 --> 00:30:33,140
aerial fibers in from the NOC and then

00:30:29,600 --> 00:30:36,590
ground fibers to each books and so in

00:30:33,140 --> 00:30:38,270
here is a huge patch panel where you

00:30:36,590 --> 00:30:39,980
kind of patch each cable and there's a

00:30:38,270 --> 00:30:43,640
team of people that do all the patching

00:30:39,980 --> 00:30:46,460
for you and this is what they're not

00:30:43,640 --> 00:30:48,320
looks like so behind here is where all

00:30:46,460 --> 00:30:50,990
the operators sit for the duration of

00:30:48,320 --> 00:30:52,690
the conference to monitor and check for

00:30:50,990 --> 00:30:54,860
problems and then they kind of put this

00:30:52,690 --> 00:30:56,810
perspex wall one it's if people come and

00:30:54,860 --> 00:30:57,890
look at all the blinky lights because

00:30:56,810 --> 00:30:59,840
that's how you know and it works working

00:30:57,890 --> 00:31:04,340
if the lights are blinking the right

00:30:59,840 --> 00:31:06,590
amount now because we hadn't seen a

00:31:04,340 --> 00:31:08,260
hundred G work before and some of the

00:31:06,590 --> 00:31:09,620
booths took a little while to get built

00:31:08,260 --> 00:31:12,590
you know

00:31:09,620 --> 00:31:15,020
to do when you got 225 of the brightest

00:31:12,590 --> 00:31:16,130
networking people and the country you go

00:31:15,020 --> 00:31:18,140
around and tap people and shoulders and

00:31:16,130 --> 00:31:20,180
ask who's got 100g and their laptop

00:31:18,140 --> 00:31:21,860
turns out no one had it in the laptop

00:31:20,180 --> 00:31:23,750
but someone had it in a form factor like

00:31:21,860 --> 00:31:26,000
this with a handle on top and so we just

00:31:23,750 --> 00:31:29,000
put these in different D knocks and then

00:31:26,000 --> 00:31:31,820
ran I poof to test they've worked you'll

00:31:29,000 --> 00:31:34,760
see that our spikes go nicely up 200 G

00:31:31,820 --> 00:31:36,710
but so we were pretty stoked by that now

00:31:34,760 --> 00:31:39,160
this was meant to be a continuous iperf

00:31:36,710 --> 00:31:42,290
but you might notice there's some gaps

00:31:39,160 --> 00:31:43,970
we found a lot of flaws in their config

00:31:42,290 --> 00:31:46,850
on their Linux boxes that mean hyper

00:31:43,970 --> 00:31:49,580
food crash every few minutes so a

00:31:46,850 --> 00:31:52,540
network broke their stuff so we were

00:31:49,580 --> 00:31:55,640
happy out we weren't the ones breaking

00:31:52,540 --> 00:31:57,890
and so then you come to Showtime and

00:31:55,640 --> 00:31:59,960
Showtime is the least stressful part of

00:31:57,890 --> 00:32:03,559
the whole thing because you've done all

00:31:59,960 --> 00:32:05,870
your testing everything's working so all

00:32:03,559 --> 00:32:07,670
you pretty much do is watch for tickets

00:32:05,870 --> 00:32:09,770
coming in you do a lot of walking around

00:32:07,670 --> 00:32:12,470
talking to people trying to give as much

00:32:09,770 --> 00:32:15,230
swag as you can we did a lot of

00:32:12,470 --> 00:32:16,850
monitoring for this network so for so it

00:32:15,230 --> 00:32:18,950
gives you good visibility of the network

00:32:16,850 --> 00:32:21,350
so we had a Prometheus running with a

00:32:18,950 --> 00:32:23,330
lip manager and we defined about 10

00:32:21,350 --> 00:32:25,970
different alerts that would tell us if

00:32:23,330 --> 00:32:27,050
something serious happened I'm happy to

00:32:25,970 --> 00:32:29,960
report we didn't get a single page

00:32:27,050 --> 00:32:31,520
throughout the whole thing and then so

00:32:29,960 --> 00:32:34,400
the tickets are usually pretty simple

00:32:31,520 --> 00:32:36,470
things like a lot of fibers to fibers

00:32:34,400 --> 00:32:38,030
are appear at X and Erik's

00:32:36,470 --> 00:32:40,580
transmit/receive a lot of times these

00:32:38,030 --> 00:32:41,990
get flipped around and you've got to TX

00:32:40,580 --> 00:32:43,400
is going into each other and to Erik's

00:32:41,990 --> 00:32:44,780
is going into each other you're just

00:32:43,400 --> 00:32:47,120
going to roll the fiber so the link

00:32:44,780 --> 00:32:48,890
comes up everything on the network was

00:32:47,120 --> 00:32:51,200
meant to be single mode optics a lot of

00:32:48,890 --> 00:32:52,220
booths bought multimode optics and that

00:32:51,200 --> 00:32:54,170
doesn't really work when they're at

00:32:52,220 --> 00:32:55,880
different frequencies so you'd go and

00:32:54,170 --> 00:32:59,720
put a fiber optic in and they'll be

00:32:55,880 --> 00:33:01,670
happy a lot of light meters and oft DRS

00:32:59,720 --> 00:33:05,090
to check where fiber breaks where

00:33:01,670 --> 00:33:08,360
unfortunately we had quite a few booths

00:33:05,090 --> 00:33:11,690
that did have those kind of problems and

00:33:08,360 --> 00:33:13,940
then everything's done yeah clean up so

00:33:11,690 --> 00:33:16,910
we spent yeah several months planning

00:33:13,940 --> 00:33:19,100
this thing three weeks testing it three

00:33:16,910 --> 00:33:21,470
weeks setting it up and it all goes away

00:33:19,100 --> 00:33:24,369
in one day and that is a very chaotic

00:33:21,470 --> 00:33:27,379
day I will tell you

00:33:24,369 --> 00:33:30,049
so what have we learned from all this so

00:33:27,379 --> 00:33:31,969
it's always nice to reflect on what

00:33:30,049 --> 00:33:34,549
worked well and what didn't work well so

00:33:31,969 --> 00:33:36,829
the feedback we've got from the people

00:33:34,549 --> 00:33:40,999
that do this every year is they like

00:33:36,829 --> 00:33:44,989
that we could automate sort of the the

00:33:40,999 --> 00:33:47,959
common use cases so so they they have

00:33:44,989 --> 00:33:49,940
some amount of automation and it kind of

00:33:47,959 --> 00:33:53,959
works but sometimes there's a little bit

00:33:49,940 --> 00:33:55,609
of problems with it and you know ninety

00:33:53,959 --> 00:33:58,339
percent of customers are pretty boring

00:33:55,609 --> 00:34:00,049
they just want Internet but there is the

00:33:58,339 --> 00:34:04,369
last ten percent that do want something

00:34:00,049 --> 00:34:06,559
special so a lot of them bring in you

00:34:04,369 --> 00:34:08,599
know when links from other continents

00:34:06,559 --> 00:34:10,490
other parts of the country at very high

00:34:08,599 --> 00:34:11,750
speeds and they wanted to show off demos

00:34:10,490 --> 00:34:13,039
and that kind of thing there's a

00:34:11,750 --> 00:34:14,690
supercomputer conference after all

00:34:13,039 --> 00:34:19,700
people are trying to sell high-speed

00:34:14,690 --> 00:34:20,960
storage and clusters so they want to

00:34:19,700 --> 00:34:24,309
kind of prove that this kind of works

00:34:20,960 --> 00:34:26,599
and so by automating that that easy 90%

00:34:24,309 --> 00:34:27,679
the operations team could then spend

00:34:26,599 --> 00:34:29,869
their time actually on these more

00:34:27,679 --> 00:34:32,659
interesting things which given a bit

00:34:29,869 --> 00:34:34,460
more satisfaction also it also allowed

00:34:32,659 --> 00:34:36,559
us to effectively ignore the underlying

00:34:34,460 --> 00:34:38,990
network equipment you could have on that

00:34:36,559 --> 00:34:40,549
last day before the conference to really

00:34:38,990 --> 00:34:42,559
go you could have given us another box

00:34:40,549 --> 00:34:43,429
from another vendor and swap them out it

00:34:42,559 --> 00:34:45,409
all would have worked pretty much

00:34:43,429 --> 00:34:48,740
exactly the same and in fact we kind of

00:34:45,409 --> 00:34:52,279
had this so leased out the network with

00:34:48,740 --> 00:34:54,169
five devices when we needed six and one

00:34:52,279 --> 00:34:55,970
of the vendors pointed up and supplied

00:34:54,169 --> 00:34:58,339
it that last switch like a week before

00:34:55,970 --> 00:35:00,230
the conference you just slide it in the

00:34:58,339 --> 00:35:01,700
automation gets told about it and it

00:35:00,230 --> 00:35:05,150
starts building circuits onto it which

00:35:01,700 --> 00:35:06,829
is quite nice and yeah ultimately the

00:35:05,150 --> 00:35:08,420
last thing to take away from this is we

00:35:06,829 --> 00:35:11,059
proved that you know 10,000 lines of

00:35:08,420 --> 00:35:14,470
Python renew zealand can easily handle

00:35:11,059 --> 00:35:18,289
nine Turbots per second so there's a

00:35:14,470 --> 00:35:19,640
photo of most of the team and that did

00:35:18,289 --> 00:35:22,279
the force of deployment and I'd like to

00:35:19,640 --> 00:35:24,140
thank them so much because it was a real

00:35:22,279 --> 00:35:27,799
joy to work with them and we did a lot

00:35:24,140 --> 00:35:29,390
of cool things I think if you are

00:35:27,799 --> 00:35:31,190
interested in Forrester you think it

00:35:29,390 --> 00:35:33,619
might be able to help you our website

00:35:31,190 --> 00:35:36,640
has mailing lists github documentation

00:35:33,619 --> 00:35:39,010
x' tomorrow in fact i make sure

00:35:36,640 --> 00:35:41,710
running a tutorial where we start with a

00:35:39,010 --> 00:35:43,630
blank up unto box and we go all the way

00:35:41,710 --> 00:35:46,990
through to implementing a somewhat

00:35:43,630 --> 00:35:49,059
complicated faucet Network virtually on

00:35:46,990 --> 00:35:52,119
your machine so that's going to be an a3

00:35:49,059 --> 00:35:53,740
tomorrow afternoon if you want to hear

00:35:52,119 --> 00:35:55,539
about our crazy deployments I'm sure

00:35:53,740 --> 00:35:59,589
there'd be more I usually fish them all

00:35:55,539 --> 00:36:01,720
to our Twitter and then finally I think

00:35:59,589 --> 00:36:04,750
I've read sometimes Christians that's a

00:36:01,720 --> 00:36:07,109
course every network operator for the

00:36:04,750 --> 00:36:10,750
conference take a photo in front of the

00:36:07,109 --> 00:36:14,349
NOC and you'll see behind that's kind of

00:36:10,750 --> 00:36:16,269
the area where we all working from so

00:36:14,349 --> 00:36:19,210
can I take any questions I'll put the

00:36:16,269 --> 00:36:21,390
slides up on my Twitter as well at the

00:36:19,210 --> 00:36:25,650
back I think we've got a microphone I

00:36:21,390 --> 00:36:25,650
can repeat what you want to do

00:36:36,859 --> 00:36:45,079
I going back to the photos that you had

00:36:42,259 --> 00:36:46,130
you had a picture of the wreck with the

00:36:45,079 --> 00:36:47,690
hardware in it

00:36:46,130 --> 00:36:49,549
there's the details of what hardware

00:36:47,690 --> 00:36:51,319
that year that photo there the details

00:36:49,549 --> 00:37:03,019
of what Hardware the forceps forceps

00:36:51,319 --> 00:37:05,059
which is anywhere and if you go to the

00:37:03,019 --> 00:37:07,369
faucet documentation page there's a

00:37:05,059 --> 00:37:11,960
vendor section where I've been does

00:37:07,369 --> 00:37:15,410
publish which devices you can you can

00:37:11,960 --> 00:37:21,499
buy with support but generally so 80

00:37:15,410 --> 00:37:25,999
pretty much all of their sort of X 930 X

00:37:21,499 --> 00:37:27,529
950 X 5 10 and actually a lot of the

00:37:25,999 --> 00:37:29,749
x-series support it

00:37:27,529 --> 00:37:32,779
Cisco supports it on every Kilis 9k

00:37:29,749 --> 00:37:37,190
device HP supports it on all their Aruba

00:37:32,779 --> 00:37:38,989
switches Nova flow supports it on every

00:37:37,190 --> 00:37:40,339
switch and then there's another couple

00:37:38,989 --> 00:37:43,880
of vendors which run it on board at the

00:37:40,339 --> 00:37:45,319
moment so there's about four or six

00:37:43,880 --> 00:37:47,119
vendors you can use at the moment but

00:37:45,319 --> 00:37:48,619
come and see me if you want more details

00:37:47,119 --> 00:37:53,989
and I can get you in touch with you know

00:37:48,619 --> 00:37:55,789
well partner so you mentioned at the

00:37:53,989 --> 00:37:58,640
beginning that the Sdn controller can

00:37:55,789 --> 00:38:00,519
participate in the network itself when

00:37:58,640 --> 00:38:04,160
would you do that why would you do that

00:38:00,519 --> 00:38:05,930
so and you want to use it as your router

00:38:04,160 --> 00:38:11,599
and the reason why you want to do that

00:38:05,930 --> 00:38:15,259
is because writing is good but no so so

00:38:11,599 --> 00:38:18,230
how the routing of course it works is so

00:38:15,259 --> 00:38:21,200
you can use DHCP or ipv6 router

00:38:18,230 --> 00:38:24,289
basements to tell client devices that

00:38:21,200 --> 00:38:26,269
you are a Nick stop and then they need

00:38:24,289 --> 00:38:28,549
to be able to resolve your MAC address

00:38:26,269 --> 00:38:30,319
so you need to do are and ipv6

00:38:28,549 --> 00:38:34,249
neighborhood discovery to better respond

00:38:30,319 --> 00:38:36,470
to them and then fourth it has a routing

00:38:34,249 --> 00:38:38,749
table that builds a fib it puts that on

00:38:36,470 --> 00:38:40,970
the switch and then as packets come

00:38:38,749 --> 00:38:43,339
through with the Fossett IP and Fossett

00:38:40,970 --> 00:38:46,069
Mac on them and we do all the routing in

00:38:43,339 --> 00:38:49,430
Hardware on the on the on the device so

00:38:46,069 --> 00:38:50,640
you get line rate and it's basically

00:38:49,430 --> 00:38:52,440
just

00:38:50,640 --> 00:38:55,440
you can think of as an any fee so

00:38:52,440 --> 00:38:58,020
instead of the switch or router itself

00:38:55,440 --> 00:38:59,580
responding to to neighborhood discovery

00:38:58,020 --> 00:39:05,370
and having IP address on it we have it

00:38:59,580 --> 00:39:08,460
in our control plane and our control the

00:39:05,370 --> 00:39:09,900
machine and and it sort of puts enough

00:39:08,460 --> 00:39:12,360
conflict down with open flow so that

00:39:09,900 --> 00:39:17,820
actually still all the routing happens

00:39:12,360 --> 00:39:32,400
on on the switch so make sense any more

00:39:17,820 --> 00:39:35,580
questions okay most of this which is

00:39:32,400 --> 00:39:38,700
that faucet is sort of configuring and

00:39:35,580 --> 00:39:42,390
then managing operating in a hybrid

00:39:38,700 --> 00:39:44,070
style mode for learning like remote max

00:39:42,390 --> 00:39:46,170
and stuff like that or do they basically

00:39:44,070 --> 00:39:50,400
ping the first thing in every flow up to

00:39:46,170 --> 00:39:52,530
the controller to figure out yeah so how

00:39:50,400 --> 00:39:54,120
force it works is we want you to put

00:39:52,530 --> 00:39:55,590
every device in pure open flow mode

00:39:54,120 --> 00:39:57,000
where it does absolutely nothing there

00:39:55,590 --> 00:39:59,310
are a lot of different hybrid solutions

00:39:57,000 --> 00:40:01,410
we get some parts happen on the switch

00:39:59,310 --> 00:40:02,220
some parts happen the controller we

00:40:01,410 --> 00:40:04,230
prefer to do everything in the

00:40:02,220 --> 00:40:07,290
controller because it gives us more well

00:40:04,230 --> 00:40:09,720
control and how does the switching work

00:40:07,290 --> 00:40:12,360
so well how does I guess everything work

00:40:09,720 --> 00:40:14,970
so we do a mixture of proactive and

00:40:12,360 --> 00:40:17,220
reactive so we put down as many flows as

00:40:14,970 --> 00:40:19,470
we can when we start up so that pretty

00:40:17,220 --> 00:40:22,770
much not much goes to controller so we

00:40:19,470 --> 00:40:24,690
very heavily severely limit what goes to

00:40:22,770 --> 00:40:26,070
the control plan we don't have to we

00:40:24,690 --> 00:40:27,750
won't send it

00:40:26,070 --> 00:40:29,580
we also truncate every packet that goes

00:40:27,750 --> 00:40:31,890
to control plan to not overload it and

00:40:29,580 --> 00:40:33,150
then when we do finally have a picker

00:40:31,890 --> 00:40:34,920
that has to go to the control plane

00:40:33,150 --> 00:40:36,360
maybe it's because it needs to do

00:40:34,920 --> 00:40:38,520
enabled a discovery maybe it's because

00:40:36,360 --> 00:40:42,330
it's a protocol offload that faucet

00:40:38,520 --> 00:40:44,220
needs to receive we will learn as much

00:40:42,330 --> 00:40:47,010
as we can from every packet that gets

00:40:44,220 --> 00:40:48,210
sent to us so we'll we'll you know take

00:40:47,010 --> 00:40:49,680
the small number of bytes that we've

00:40:48,210 --> 00:40:52,350
copied up to the control plane and we'll

00:40:49,680 --> 00:40:55,010
get every ring out every little piece of

00:40:52,350 --> 00:40:58,200
information we can and store that so

00:40:55,010 --> 00:41:00,360
this is how our mac learning works as

00:40:58,200 --> 00:41:01,770
well so by default and you can change

00:41:00,360 --> 00:41:04,080
this we have a lot of different flooding

00:41:01,770 --> 00:41:04,500
modes but I thought faucet will put

00:41:04,080 --> 00:41:08,670
rules down

00:41:04,500 --> 00:41:11,040
that make a VLAN flood group and the

00:41:08,670 --> 00:41:13,350
packet when it first receives it sends

00:41:11,040 --> 00:41:15,420
it to that VLAN flood group so everyone

00:41:13,350 --> 00:41:17,520
gets the packet and then we copy one

00:41:15,420 --> 00:41:19,620
copy up to the control play we learn it

00:41:17,520 --> 00:41:21,060
we push down the learn rule so for such

00:41:19,620 --> 00:41:25,470
eyes to be very smart about how it

00:41:21,060 --> 00:41:28,190
handles the control plane any more

00:41:25,470 --> 00:41:28,190
questions

00:41:40,920 --> 00:41:44,590
yeah people keep telling we should

00:41:42,940 --> 00:41:46,260
switch to write a paper but we haven't

00:41:44,590 --> 00:41:49,570
quite got around to it yet

00:41:46,260 --> 00:41:51,610
mmm so the question for people who

00:41:49,570 --> 00:41:54,970
didn't hear is it documented our

00:41:51,610 --> 00:42:00,580
learning optimizations so we've spent

00:41:54,970 --> 00:42:02,530
probably two years so we spent like

00:42:00,580 --> 00:42:04,060
three years building faucet and then we

00:42:02,530 --> 00:42:06,010
spent the last two years optimizing it

00:42:04,060 --> 00:42:07,720
and adding features and at this point

00:42:06,010 --> 00:42:10,930
we've probably put about two months into

00:42:07,720 --> 00:42:12,790
l2 and l3 optimizations and this is how

00:42:10,930 --> 00:42:14,650
we can get away with using Python to run

00:42:12,790 --> 00:42:17,020
a huge network you'd never think it

00:42:14,650 --> 00:42:18,940
would be possible with the global

00:42:17,020 --> 00:42:20,590
interpreter lock but it turns out if you

00:42:18,940 --> 00:42:24,910
do think smart in Python there's a lot

00:42:20,590 --> 00:42:26,680
you can do and yeah mostly it's just

00:42:24,910 --> 00:42:28,510
documented in our code unfortunately we

00:42:26,680 --> 00:42:30,700
have a little bit and pieces in our

00:42:28,510 --> 00:42:33,340
documentation but yeah we really should

00:42:30,700 --> 00:42:34,570
write a paper on benchmarking for suit

00:42:33,340 --> 00:42:36,600
because there's a lot of cool stuff we

00:42:34,570 --> 00:42:41,490
do I could do another whole talk on that

00:42:36,600 --> 00:42:43,600
yes I was just wondering about how the

00:42:41,490 --> 00:42:45,430
network switches themselves at

00:42:43,600 --> 00:42:47,560
bootstraps to talk back to the

00:42:45,430 --> 00:42:48,670
controller in the first place okay so

00:42:47,560 --> 00:42:52,090
you'll see there's a control play

00:42:48,670 --> 00:42:54,910
network it's all out-of-band so they

00:42:52,090 --> 00:42:57,460
like do they assigned addresses on that

00:42:54,910 --> 00:42:59,200
control play network themselves so just

00:42:57,460 --> 00:43:00,690
do actually pee or something yeah most

00:42:59,200 --> 00:43:03,430
of the places we're using faucet you

00:43:00,690 --> 00:43:05,440
kind of want the out of Bend network

00:43:03,430 --> 00:43:07,330
management things so you can SSH to them

00:43:05,440 --> 00:43:09,760
you can pull configs off them whatever

00:43:07,330 --> 00:43:12,700
and it just happens you can run open

00:43:09,760 --> 00:43:13,960
flow over this as well there's some

00:43:12,700 --> 00:43:16,870
tricks you can do an open flow within

00:43:13,960 --> 00:43:17,470
plain control it's a little trickier

00:43:16,870 --> 00:43:19,240
though because you have the

00:43:17,470 --> 00:43:21,370
bootstrapping problem but there's some

00:43:19,240 --> 00:43:31,630
approaches you can use to make that less

00:43:21,370 --> 00:43:34,420
problematic okay then we'll but to allow

00:43:31,630 --> 00:43:37,800
time for people to move let's show our

00:43:34,420 --> 00:43:37,800
appreciation to break

00:43:39,079 --> 00:43:41,140

YouTube URL: https://www.youtube.com/watch?v=DirEC3FnDyc


