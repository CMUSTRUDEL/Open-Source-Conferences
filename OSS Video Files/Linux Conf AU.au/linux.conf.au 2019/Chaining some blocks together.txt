Title: Chaining some blocks together
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Josh Deprez

https://2019.linux.conf.au/schedule/presentation/259/

I'm a developer who likes writing programs using text (e.g. Python, Go, InterCAL). But I also like to draw diagrams. Let's combine the two approaches with a development environment I've been working on in my spare time for the last couple of years. 

Connect up some blocks, write a bit of code, huzzah! A program!

Note: This talk will have nothing whatsoever to do with blockchain technology.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,110 --> 00:00:04,110
interrupting his scheduled naptime

00:00:02,159 --> 00:00:05,940
please welcome Josh Despres who's going

00:00:04,110 --> 00:00:13,380
to talk to us about chaining some blocks

00:00:05,940 --> 00:00:18,240
together please make him welcome good

00:00:13,380 --> 00:00:21,449
morning freedom lovers so as Chris

00:00:18,240 --> 00:00:26,820
mentioned I'm Josh and about my journey

00:00:21,449 --> 00:00:29,970
here just to summarize it I left Sydney

00:00:26,820 --> 00:00:32,099
on Saturday afternoon due to a

00:00:29,970 --> 00:00:35,760
combination of delays slow security

00:00:32,099 --> 00:00:37,260
passport control and then last night's

00:00:35,760 --> 00:00:42,210
flight being delayed I got here at about

00:00:37,260 --> 00:00:44,760
half past four in the morning okay I

00:00:42,210 --> 00:00:46,350
wasn't the only one benno and a few

00:00:44,760 --> 00:00:47,850
others were on the same flight so if you

00:00:46,350 --> 00:00:51,510
see a few of us around like looking like

00:00:47,850 --> 00:00:55,230
zombies this might be why thankfully we

00:00:51,510 --> 00:00:58,469
were led into bishop julius hall and we

00:00:55,230 --> 00:01:01,710
actually got our sleep but yeah so what

00:00:58,469 --> 00:01:03,660
am i I'm here to talk to you and this is

00:01:01,710 --> 00:01:05,369
gonna be it's gonna be great like

00:01:03,660 --> 00:01:07,020
hopefully my my sleep deprivation is not

00:01:05,369 --> 00:01:09,600
gonna kick in too much and this won't go

00:01:07,020 --> 00:01:12,750
too far off the rails but if it does you

00:01:09,600 --> 00:01:15,479
know why other things that I need to

00:01:12,750 --> 00:01:17,070
preface this talk I'm not my I'm

00:01:15,479 --> 00:01:20,299
employed by Google I'm not actually

00:01:17,070 --> 00:01:22,950
talking on behalf of Google in any way

00:01:20,299 --> 00:01:24,689
this this project that I'm going to be

00:01:22,950 --> 00:01:27,780
talking about is a spare time project of

00:01:24,689 --> 00:01:30,150
mine it's open-source you can go to

00:01:27,780 --> 00:01:33,299
github.com slash Google sessions and go

00:01:30,150 --> 00:01:35,100
and see read all about it

00:01:33,299 --> 00:01:38,009
and there was something else I was going

00:01:35,100 --> 00:01:40,320
to mention on this slide but we'll get

00:01:38,009 --> 00:01:43,470
to I'll figure that out once we once we

00:01:40,320 --> 00:01:46,860
get into it okay so so what is this

00:01:43,470 --> 00:01:49,409
project I had a couple of things that I

00:01:46,860 --> 00:01:51,630
wanted to accomplish a couple of years

00:01:49,409 --> 00:01:54,600
ago I said I'd give a talk at the games

00:01:51,630 --> 00:01:56,570
in Faust Minicon so I thought I'd better

00:01:54,600 --> 00:01:59,549
have something to talked about then and

00:01:56,570 --> 00:02:00,780
then you know once I've made something I

00:01:59,549 --> 00:02:03,960
should like build it into something

00:02:00,780 --> 00:02:06,540
bigger later on so there's that's more

00:02:03,960 --> 00:02:11,459
or less what I set out to accomplish and

00:02:06,540 --> 00:02:15,440
I did I figured that the easiest and

00:02:11,459 --> 00:02:15,440
simplest thing would be programming

00:02:15,610 --> 00:02:22,520
with its own IDE and let's let's make

00:02:19,849 --> 00:02:24,349
the let's not make a native ad IDE let's

00:02:22,520 --> 00:02:26,660
make it it would like HTML with

00:02:24,349 --> 00:02:28,099
JavaScript and so on but we're not

00:02:26,660 --> 00:02:30,160
actually write JavaScript I'm going to

00:02:28,099 --> 00:02:32,780
write and go because I'm big on go

00:02:30,160 --> 00:02:35,980
really big on going on big on go for

00:02:32,780 --> 00:02:35,980
last three or four years now

00:02:36,040 --> 00:02:41,420
hey I have a favorite I'm not I'm not

00:02:38,420 --> 00:02:43,840
afraid to play my favorite and not only

00:02:41,420 --> 00:02:47,260
is my programming language going to be

00:02:43,840 --> 00:02:50,180
written in go it's going to be

00:02:47,260 --> 00:02:52,370
essentially based on go so it's gonna be

00:02:50,180 --> 00:02:56,540
very go like it's gonna integrate with

00:02:52,370 --> 00:02:59,569
go just go everywhere and it's called

00:02:56,540 --> 00:03:02,299
Chen Zhen go because it was inspired by

00:02:59,569 --> 00:03:04,730
a game called Chen Zhen IO and so I

00:03:02,299 --> 00:03:06,140
thought I know I'll take basic basic

00:03:04,730 --> 00:03:07,310
concepts from the game and the go

00:03:06,140 --> 00:03:11,330
language and I'll switch them together

00:03:07,310 --> 00:03:12,890
and this this is simple writes how hard

00:03:11,330 --> 00:03:18,859
could this project possibly be to

00:03:12,890 --> 00:03:22,549
implement the the key concepts that I

00:03:18,859 --> 00:03:24,890
actually wanted to implement where the

00:03:22,549 --> 00:03:27,859
first concept was you want to draw some

00:03:24,890 --> 00:03:30,920
diagrams but also write some code so on

00:03:27,859 --> 00:03:32,600
the diagram sides you take some blocks

00:03:30,920 --> 00:03:36,170
and you chain them together with some

00:03:32,600 --> 00:03:40,010
channels and azar that's your program

00:03:36,170 --> 00:03:42,049
the top the top one executes it sends

00:03:40,010 --> 00:03:46,850
messages down down to the second one and

00:03:42,049 --> 00:03:49,010
that that executes and you can compose

00:03:46,850 --> 00:03:51,739
these things to make fairly complicated

00:03:49,010 --> 00:03:53,269
stuff so here's the more complicated

00:03:51,739 --> 00:03:58,700
example programs that i ended up

00:03:53,269 --> 00:04:02,590
finishing it's a HTTP server that serves

00:03:58,700 --> 00:04:05,269
Mandelbrot fractals Katia's them

00:04:02,590 --> 00:04:09,049
produces metrics that you can scrape

00:04:05,269 --> 00:04:14,090
with Prometheus logs errors all sorts of

00:04:09,049 --> 00:04:16,729
things and on the on this slide I will

00:04:14,090 --> 00:04:18,680
also point out that so on the left side

00:04:16,729 --> 00:04:21,700
we have the diagram type view of the

00:04:18,680 --> 00:04:26,090
world on the right side we have code or

00:04:21,700 --> 00:04:27,620
configuration of nodes and so this sort

00:04:26,090 --> 00:04:31,310
of dual world is very

00:04:27,620 --> 00:04:33,050
prominent it's its first class the

00:04:31,310 --> 00:04:35,900
second concept I wondered was to

00:04:33,050 --> 00:04:38,979
generate go codes so Chen Zhen Co

00:04:35,900 --> 00:04:42,800
programs in go programs out again

00:04:38,979 --> 00:04:46,940
playing favorites entirely I also wanted

00:04:42,800 --> 00:04:48,500
to produce readable go and and code that

00:04:46,940 --> 00:04:51,320
could be consumed by regular go so you

00:04:48,500 --> 00:04:54,889
could call functions and vice versa so

00:04:51,320 --> 00:04:57,500
how far oh yeah and everything is go

00:04:54,889 --> 00:05:00,590
concept this is handy for trying to

00:04:57,500 --> 00:05:02,389
explain what's going on because if

00:05:00,590 --> 00:05:03,830
anyone knows go they can just go oh yeah

00:05:02,389 --> 00:05:04,910
here's a bunch of go routines and

00:05:03,830 --> 00:05:06,800
they're connected together with channels

00:05:04,910 --> 00:05:12,039
or if you don't know go you could think

00:05:06,800 --> 00:05:15,530
of them as just processes in the

00:05:12,039 --> 00:05:18,680
operating system sense I guess and pipes

00:05:15,530 --> 00:05:21,260
but I sort of just text or whatever you

00:05:18,680 --> 00:05:27,080
can use type types from the go type

00:05:21,260 --> 00:05:29,720
system okay and another inspiration for

00:05:27,080 --> 00:05:32,840
where this came from was watching Rob

00:05:29,720 --> 00:05:36,620
Pike stalk has pictures of Gophers that

00:05:32,840 --> 00:05:38,900
were drawn on his slides and so one of

00:05:36,620 --> 00:05:41,750
the advantages of this view of the world

00:05:38,900 --> 00:05:44,180
is you can essentially replace the

00:05:41,750 --> 00:05:45,470
Gophers by rectangles and their

00:05:44,180 --> 00:05:47,570
relationships to one another with arrows

00:05:45,470 --> 00:05:48,169
and you've basically got a very

00:05:47,570 --> 00:05:52,010
similar-looking

00:05:48,169 --> 00:05:57,139
program other things that you can do in

00:05:52,010 --> 00:05:59,240
this go generated world things like you

00:05:57,139 --> 00:06:03,560
can just turn a knob and get n copies of

00:05:59,240 --> 00:06:04,910
something running concurrently simply by

00:06:03,560 --> 00:06:07,990
training multiple things together you

00:06:04,910 --> 00:06:10,729
get a factory line optimization where

00:06:07,990 --> 00:06:12,320
the first process finishes processing a

00:06:10,729 --> 00:06:13,789
piece of data it passes on to the second

00:06:12,320 --> 00:06:14,900
one and the second one doesn't have to

00:06:13,789 --> 00:06:16,340
wait until all the dollars been

00:06:14,900 --> 00:06:21,910
processed by the first one it can start

00:06:16,340 --> 00:06:27,800
working on the one that that just got I

00:06:21,910 --> 00:06:33,830
will demo but I did want to keep plowing

00:06:27,800 --> 00:06:36,130
on so will probably come back to this so

00:06:33,830 --> 00:06:41,870
why did I actually do all this project

00:06:36,130 --> 00:06:44,060
it seems like a lot of work and it was

00:06:41,870 --> 00:06:48,220
I've been working on this in my spare

00:06:44,060 --> 00:06:48,220
time since the very end of 2016

00:06:49,360 --> 00:06:58,939
reason number one workaholism this is

00:06:57,199 --> 00:07:02,479
this is probably not a very healthy

00:06:58,939 --> 00:07:03,860
github contribution chart you'll notice

00:07:02,479 --> 00:07:07,360
there's a lot of duck a few quite a few

00:07:03,860 --> 00:07:11,080
dark squares on Saturday and Sunday

00:07:07,360 --> 00:07:14,840
there's also a sort of a crescendo up to

00:07:11,080 --> 00:07:18,110
June July where there's a huge number of

00:07:14,840 --> 00:07:23,030
commits that I made and then I will go

00:07:18,110 --> 00:07:26,919
silent for last six months for those of

00:07:23,030 --> 00:07:28,310
you who know who follow the open-source

00:07:26,919 --> 00:07:32,889
conference circuit

00:07:28,310 --> 00:07:35,330
you may recognize July as being odds con

00:07:32,889 --> 00:07:40,939
where I gave my last talk about this

00:07:35,330 --> 00:07:44,479
project so yes I was I was frantically

00:07:40,939 --> 00:07:46,370
implementing probably 60% of the

00:07:44,479 --> 00:07:52,430
features that are present in the project

00:07:46,370 --> 00:07:54,289
today in the two weeks before also in in

00:07:52,430 --> 00:07:58,490
the lead-up to the golang seed meetup

00:07:54,289 --> 00:07:59,810
which was the month before conference

00:07:58,490 --> 00:08:00,110
driven development has a lot to answer

00:07:59,810 --> 00:08:07,669
for

00:08:00,110 --> 00:08:09,560
I think and workaholism fueled by a

00:08:07,669 --> 00:08:10,849
couple of things other than conference

00:08:09,560 --> 00:08:12,620
different driven development I mean

00:08:10,849 --> 00:08:15,560
giving a conference presentation is

00:08:12,620 --> 00:08:19,190
hittin itself but there's also other

00:08:15,560 --> 00:08:23,479
sources of dopamine hits when it comes

00:08:19,190 --> 00:08:25,279
to doing open source programming

00:08:23,479 --> 00:08:27,889
how many people have start the project

00:08:25,279 --> 00:08:32,510
and how many people are forking it

00:08:27,889 --> 00:08:35,449
discussing it watching it how many lines

00:08:32,510 --> 00:08:36,769
of code have I written well ignoring

00:08:35,449 --> 00:08:39,560
JavaScript because that's generated

00:08:36,769 --> 00:08:44,269
that's twelve and a half thousand lines

00:08:39,560 --> 00:08:46,730
of go that seems like a lot oh okay

00:08:44,269 --> 00:08:50,290
maybe we like subtract 50% of that is

00:08:46,730 --> 00:08:50,290
that if aeronaut equals nil tax

00:08:51,180 --> 00:08:56,770
so that's still six and a half thousand

00:08:53,770 --> 00:09:01,090
lines ago it's not a trivial amount of

00:08:56,770 --> 00:09:02,980
code another thing that happened was I

00:09:01,090 --> 00:09:05,650
hit roadblocks in the project of work

00:09:02,980 --> 00:09:10,380
and so I wasn't getting as much code

00:09:05,650 --> 00:09:15,400
done I wanted to continue doing code

00:09:10,380 --> 00:09:18,490
very much I love coding but when when a

00:09:15,400 --> 00:09:22,360
project sort of runs into a sort of

00:09:18,490 --> 00:09:23,650
standstill and you know lots of people

00:09:22,360 --> 00:09:25,240
are discussing the reasons for why a

00:09:23,650 --> 00:09:27,910
project should be running on arts and

00:09:25,240 --> 00:09:30,670
that kind of thing you don't get a lot

00:09:27,910 --> 00:09:33,160
of work done so my it's just code is not

00:09:30,670 --> 00:09:34,770
being scratch to work I'm sure as hell

00:09:33,160 --> 00:09:39,970
doing it at home

00:09:34,770 --> 00:09:44,080
and finally stubbornly pursuing

00:09:39,970 --> 00:09:48,550
challenging ideas I definitely did this

00:09:44,080 --> 00:09:51,520
project the hard way running running a

00:09:48,550 --> 00:09:56,650
user interface in go for Jace's it's

00:09:51,520 --> 00:10:01,300
fine but it does it does it's not the

00:09:56,650 --> 00:10:03,220
same first-class abusive the document

00:10:01,300 --> 00:10:06,180
object model in HTML as as you would

00:10:03,220 --> 00:10:09,640
have if I had started in something like

00:10:06,180 --> 00:10:13,540
react or some other JavaScript framework

00:10:09,640 --> 00:10:15,040
I wanted to try and use G RPC to talk

00:10:13,540 --> 00:10:17,650
between the components of the project

00:10:15,040 --> 00:10:20,400
and this introduced some interesting

00:10:17,650 --> 00:10:22,810
things like relying on little-known

00:10:20,400 --> 00:10:27,070
packages for generating the stub codes

00:10:22,810 --> 00:10:30,940
that would work in this particular frame

00:10:27,070 --> 00:10:32,770
of the world of having a gopher Jes

00:10:30,940 --> 00:10:35,470
projects talking to a regular go project

00:10:32,770 --> 00:10:36,600
and then there was the other stubborn

00:10:35,470 --> 00:10:41,790
idea I had

00:10:36,600 --> 00:10:44,170
who month and a half before oz con so

00:10:41,790 --> 00:10:48,880
coming back to this sort of diagram

00:10:44,170 --> 00:10:50,650
approach if the rectangles are go

00:10:48,880 --> 00:10:53,290
routines and the errors of channels and

00:10:50,650 --> 00:10:56,110
go the channels have to have a type

00:10:53,290 --> 00:10:58,030
right and they're not covariant in any

00:10:56,110 --> 00:11:00,460
way they're not generic in any way so if

00:10:58,030 --> 00:11:03,070
I have something that produces say int

00:11:00,460 --> 00:11:03,730
and I want it to send the ins to

00:11:03,070 --> 00:11:07,509
something that's

00:11:03,730 --> 00:11:09,009
it's accepts anything that's fine if

00:11:07,509 --> 00:11:12,129
they're just regular function arguments

00:11:09,009 --> 00:11:16,209
but because these are channels the the

00:11:12,129 --> 00:11:17,980
two channel types don't agree to get

00:11:16,209 --> 00:11:21,009
around this I implemented a form of

00:11:17,980 --> 00:11:25,389
generics where you could say okay

00:11:21,009 --> 00:11:26,919
just accept any type not like empty

00:11:25,389 --> 00:11:33,519
interface or anything but something

00:11:26,919 --> 00:11:35,350
that'll fill in later on and doing this

00:11:33,519 --> 00:11:40,559
led me to write a thousand alliance of

00:11:35,350 --> 00:11:45,910
NGO that basically hijacked the NGO

00:11:40,559 --> 00:11:48,699
syntax parser and it would mangle some

00:11:45,910 --> 00:11:51,279
some NGO that it generates faded into

00:11:48,699 --> 00:11:58,029
this parser do some generic work and

00:11:51,279 --> 00:12:03,249
mangle it and then produce the output so

00:11:58,029 --> 00:12:06,609
anyway I came a long way with this

00:12:03,249 --> 00:12:10,119
project and everywhere I I sort of go

00:12:06,609 --> 00:12:11,859
for instance the the go Sid meetup I run

00:12:10,119 --> 00:12:13,959
into a few people who are interested and

00:12:11,859 --> 00:12:18,220
always keen to see how this thing's

00:12:13,959 --> 00:12:21,129
going on but I I have not yet managed to

00:12:18,220 --> 00:12:25,660
crack getting other people contributing

00:12:21,129 --> 00:12:28,239
to it and maybe I have a few theories

00:12:25,660 --> 00:12:30,160
about this one theory is that maybe

00:12:28,239 --> 00:12:32,410
people recognize this is my spare time

00:12:30,160 --> 00:12:34,119
project that I get my type of medians

00:12:32,410 --> 00:12:35,649
from and if they start contributing to

00:12:34,119 --> 00:12:39,309
it they'll be subtracting those hits

00:12:35,649 --> 00:12:40,959
away from me another angle I think is

00:12:39,309 --> 00:12:43,779
that I'm just not a very good community

00:12:40,959 --> 00:12:46,029
manager right I pointed people at slack

00:12:43,779 --> 00:12:48,579
and I have not looked at slack I hate

00:12:46,029 --> 00:12:53,019
slack it's like it's a fine tool I'm

00:12:48,579 --> 00:12:55,749
sure but I just don't look at it a third

00:12:53,019 --> 00:12:58,350
thing is maybe maybe the project needs a

00:12:55,749 --> 00:13:01,509
different angle like maybe people are

00:12:58,350 --> 00:13:05,129
still interested in their tech solely

00:13:01,509 --> 00:13:07,959
text-based programming environment and

00:13:05,129 --> 00:13:09,639
they don't see the value in like well

00:13:07,959 --> 00:13:11,679
maybe they're thinking of some some

00:13:09,639 --> 00:13:13,389
other visual programming environments

00:13:11,679 --> 00:13:16,659
when they see this and go oh that's nice

00:13:13,389 --> 00:13:17,170
but it's not really for me that's that's

00:13:16,659 --> 00:13:19,540
fair

00:13:17,170 --> 00:13:21,579
but maybe it needs something completely

00:13:19,540 --> 00:13:25,470
different like machine learning I think

00:13:21,579 --> 00:13:25,470
that could be interesting to integrate

00:13:25,799 --> 00:13:31,959
yeah and so before I get back to say

00:13:29,109 --> 00:13:34,689
demo demonstrating what I've done I have

00:13:31,959 --> 00:13:44,549
a list of future work and again some of

00:13:34,689 --> 00:13:44,549
these are easier than others so if I

00:14:03,630 --> 00:14:08,360
bad because that's not the directory

00:14:05,579 --> 00:14:08,360
with the examples

00:14:16,809 --> 00:14:21,230
one of the disadvantages of being

00:14:19,220 --> 00:14:23,809
sleep-deprived is that even though I've

00:14:21,230 --> 00:14:38,740
done this a million times before I still

00:14:23,809 --> 00:14:41,019
choke at the terminal cool all right so

00:14:38,740 --> 00:14:44,509
[Music]

00:14:41,019 --> 00:14:46,730
here's my HTTP server example again the

00:14:44,509 --> 00:14:50,600
the engine of this is the Mandelbrot

00:14:46,730 --> 00:14:54,079
generator right and that's not it it's

00:14:50,600 --> 00:14:56,569
down here so one thing that I could

00:14:54,079 --> 00:15:00,199
easily do is to like make parts of this

00:14:56,569 --> 00:15:01,610
collapsible but future work and the key

00:15:00,199 --> 00:15:05,839
point I wanted to drive home is that on

00:15:01,610 --> 00:15:08,149
the right we have plain old go mostly

00:15:05,839 --> 00:15:10,160
it's not some of the surrounding parts

00:15:08,149 --> 00:15:13,459
of missing they're like the function

00:15:10,160 --> 00:15:15,619
that it's inside but for something like

00:15:13,459 --> 00:15:18,499
generating a Mandelbrot or doing some

00:15:15,619 --> 00:15:20,240
tricky piece of you know manipulation

00:15:18,499 --> 00:15:20,990
with variables or some data structures

00:15:20,240 --> 00:15:24,769
or what-have-you

00:15:20,990 --> 00:15:26,509
sometimes the most reasonable way of

00:15:24,769 --> 00:15:29,269
interacting with the computer at that

00:15:26,509 --> 00:15:31,490
point is to write some codes so in this

00:15:29,269 --> 00:15:33,379
case I don't I don't want to like drop

00:15:31,490 --> 00:15:35,420
in a loop component and then put another

00:15:33,379 --> 00:15:36,949
loop component inside it and try and

00:15:35,420 --> 00:15:40,899
figure out how they all relate to one

00:15:36,949 --> 00:15:40,899
another I just want to write a for loop

00:15:41,259 --> 00:15:47,660
but surrounding this generate Mandelbrot

00:15:44,660 --> 00:15:50,420
is it's connected to this cache and

00:15:47,660 --> 00:15:53,420
that's just a premade thing that I made

00:15:50,420 --> 00:15:58,459
it has a few basic parameters like how

00:15:53,420 --> 00:16:01,939
much memory you want to use no that's

00:15:58,459 --> 00:16:03,649
that's a lot hey you want to exit a

00:16:01,939 --> 00:16:06,499
picked stuff from the cache that kind of

00:16:03,649 --> 00:16:09,589
thing and the other thing is that I

00:16:06,499 --> 00:16:12,019
don't just have like one copy of the

00:16:09,589 --> 00:16:15,740
case running I have well it's it's one

00:16:12,019 --> 00:16:18,139
copy of the data storage but there's n

00:16:15,740 --> 00:16:21,559
copies of the goroutine that manages

00:16:18,139 --> 00:16:24,110
that cache running simultaneously and to

00:16:21,559 --> 00:16:25,699
see what that looks like we can have a

00:16:24,110 --> 00:16:27,329
look at the go that it generates and

00:16:25,699 --> 00:16:36,449
there's a lot happening

00:16:27,329 --> 00:16:41,730
yeah but this this cash is this function

00:16:36,449 --> 00:16:44,119
here with this now this this is

00:16:41,730 --> 00:16:47,569
unreadable I need to tell you that up

00:16:44,119 --> 00:16:50,160
but it generates this instance of a case

00:16:47,569 --> 00:16:52,470
specialized to the type of data that is

00:16:50,160 --> 00:16:55,939
getting so it has to embed all the codes

00:16:52,470 --> 00:17:01,439
currently and this is it's fine

00:16:55,939 --> 00:17:03,480
but it again yeah complicated

00:17:01,439 --> 00:17:05,639
so having having all that wrapped up in

00:17:03,480 --> 00:17:13,199
a component that you can just drag on is

00:17:05,639 --> 00:17:19,079
worthwhile and this should work

00:17:13,199 --> 00:17:22,740
although I am loathe to try it just

00:17:19,079 --> 00:17:24,089
because it's been a while since I was

00:17:22,740 --> 00:17:25,350
stumbling at the command-line I have no

00:17:24,089 --> 00:17:31,260
idea what's going to happen if I try and

00:17:25,350 --> 00:17:35,429
run this now ok so anyway back to the

00:17:31,260 --> 00:17:41,279
presentation that's it in terms of

00:17:35,429 --> 00:17:42,720
slides and demo content any questions if

00:17:41,279 --> 00:17:44,760
you do have questions for Josh you can

00:17:42,720 --> 00:17:47,190
find him after the talk probably just

00:17:44,760 --> 00:17:51,059
outside where he will probably probably

00:17:47,190 --> 00:17:52,350
be asleep but if you can wake him up he

00:17:51,059 --> 00:17:53,970
will probably answer your questions

00:17:52,350 --> 00:17:54,190
everybody please thank Josh to pray once

00:17:53,970 --> 00:18:00,459
more

00:17:54,190 --> 00:18:00,459

YouTube URL: https://www.youtube.com/watch?v=PaagP2F3qYQ


