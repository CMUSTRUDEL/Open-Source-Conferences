Title: How Much Do You Trust That Package? Understanding The Software Supply Chain
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Benno Rice

https://2019.linux.conf.au/schedule/presentation/237/

Did you hear the one where someone gave the maintainership of an npm module to some rando who stuck a cryptocurrency miner in it? Hilarious, right! Well did you also hear the one where someone uploaded malicious packages to PyPI with similar names to popular packages?

Supply chain security is a huge issue in modern software development, and not just for node.js developers. The prevalence of third-party modules, the lack of maintainer time and compensation, and the speed at which we try to develop means that there are many ways that the software supply chain can cause you headaches.

This talk will discuss the history of the software supply chain, the issues that have cropped up in it and why, and discuss some ways to deal with the risks these create.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,030 --> 00:00:04,500
it was really bad isn't it yeah everyone

00:00:02,100 --> 00:00:08,970
knows that NPM is bad because yeah but

00:00:04,500 --> 00:00:10,469
why is NPM bad you know NPM is bad for a

00:00:08,970 --> 00:00:13,049
whole bunch of reasons yeah it installs

00:00:10,469 --> 00:00:14,639
tons and tons of fiddly little packages

00:00:13,049 --> 00:00:16,260
you know just all of them there's that

00:00:14,639 --> 00:00:18,380
gif of all the little things running out

00:00:16,260 --> 00:00:20,939
of the shed when you install NPM stuff

00:00:18,380 --> 00:00:22,710
sometimes those packages just disappear

00:00:20,939 --> 00:00:24,210
I mean who could forget left pad and

00:00:22,710 --> 00:00:26,970
left pads a ridiculous module to begin

00:00:24,210 --> 00:00:28,410
with isn't it and you know sometimes

00:00:26,970 --> 00:00:30,210
those packages end up with malware in

00:00:28,410 --> 00:00:31,830
them you know who can forget event

00:00:30,210 --> 00:00:34,590
stream that was recent and that was that

00:00:31,830 --> 00:00:36,630
was NPM and that was JavaScript and NPM

00:00:34,590 --> 00:00:38,370
is a central point of failure to you

00:00:36,630 --> 00:00:40,170
know when it goes over suddenly half the

00:00:38,370 --> 00:00:43,200
internet stops working a bit like github

00:00:40,170 --> 00:00:47,190
no way because because all of these

00:00:43,200 --> 00:00:49,680
things only ever happen to NPM right you

00:00:47,190 --> 00:00:51,210
say so what we're really talking about

00:00:49,680 --> 00:00:53,250
when we're talking about things like NPM

00:00:51,210 --> 00:00:56,910
and packages of that ilk

00:00:53,250 --> 00:00:58,920
is the supply chain and supply chains

00:00:56,910 --> 00:01:01,140
are a concept that comes from the more

00:00:58,920 --> 00:01:02,670
physical world where you have a factory

00:01:01,140 --> 00:01:05,189
that's making things but it needs things

00:01:02,670 --> 00:01:06,330
in order to make those things or a shop

00:01:05,189 --> 00:01:07,799
that's selling things and those things

00:01:06,330 --> 00:01:09,330
have to get in there and so it's all the

00:01:07,799 --> 00:01:10,710
sort of provider relationships and

00:01:09,330 --> 00:01:13,200
logistics that go into building

00:01:10,710 --> 00:01:15,689
something and supply chain has taken on

00:01:13,200 --> 00:01:18,720
a lot more of a higher profile of late

00:01:15,689 --> 00:01:20,400
because of things like Bloomberg telling

00:01:18,720 --> 00:01:23,070
the entire world that they reckon that

00:01:20,400 --> 00:01:24,750
Supermicro has had people inside their

00:01:23,070 --> 00:01:26,040
factory Supermicro makes motherboards

00:01:24,750 --> 00:01:29,460
for computers if you haven't heard of

00:01:26,040 --> 00:01:32,640
them and Bloomberg reckoned that people

00:01:29,460 --> 00:01:34,500
had gotten into the factory and we're

00:01:32,640 --> 00:01:37,409
installing tiny little chips no bigger

00:01:34,500 --> 00:01:38,280
than a grain of rice onto the onto the

00:01:37,409 --> 00:01:40,290
motherboards it were then getting

00:01:38,280 --> 00:01:42,659
shipped to companies like Apple and

00:01:40,290 --> 00:01:45,299
Amazon and thus being able to be back

00:01:42,659 --> 00:01:47,009
doored and everything was terrible the

00:01:45,299 --> 00:01:48,960
most fascinating piece of the story is

00:01:47,009 --> 00:01:53,130
that almost everybody involved except

00:01:48,960 --> 00:01:55,079
for Bloomberg Records it's all

00:01:53,130 --> 00:01:56,490
of the customers in question denied it

00:01:55,079 --> 00:01:58,590
strenuously including Apple and Amazon

00:01:56,490 --> 00:02:00,479
who denied it in the way that would

00:01:58,590 --> 00:02:02,369
cause them significant legal problems if

00:02:00,479 --> 00:02:04,799
it actually turned into turned out to be

00:02:02,369 --> 00:02:06,240
true and so you can be fairly sure that

00:02:04,799 --> 00:02:09,420
they're confident that it wasn't

00:02:06,240 --> 00:02:11,700
happening and also just the process by

00:02:09,420 --> 00:02:13,440
which this was done is kind of the way

00:02:11,700 --> 00:02:15,960
that they described it as being

00:02:13,440 --> 00:02:17,700
done is kind of sketchy generally this

00:02:15,960 --> 00:02:19,710
kind of nastiness is done by other means

00:02:17,700 --> 00:02:22,170
generally by intercepting something

00:02:19,710 --> 00:02:24,450
enroute doing something to it and then

00:02:22,170 --> 00:02:28,560
shipping it on but this is not the only

00:02:24,450 --> 00:02:31,020
kind of risk in a supply chain the other

00:02:28,560 --> 00:02:32,850
obvious one is unavailability your

00:02:31,020 --> 00:02:35,220
supplier could run out of stuff or they

00:02:32,850 --> 00:02:36,840
could go out of business or there could

00:02:35,220 --> 00:02:39,690
be a flood in Thailand and suddenly

00:02:36,840 --> 00:02:42,180
there are no hard drives all of these

00:02:39,690 --> 00:02:43,920
things happen another thing that happens

00:02:42,180 --> 00:02:46,860
often in supply chains is things have

00:02:43,920 --> 00:02:48,330
defects you buy a thing and it doesn't

00:02:46,860 --> 00:02:50,310
work and then you have to send it back

00:02:48,330 --> 00:02:51,540
if you replicate this out to a huge

00:02:50,310 --> 00:02:53,460
extent you can end up with some

00:02:51,540 --> 00:02:55,890
hilarious problems I remember one story

00:02:53,460 --> 00:02:57,840
of a supercomputer being installed which

00:02:55,890 --> 00:02:59,640
consisted of like thousands of nodes and

00:02:57,840 --> 00:03:01,140
the thing is once you've got thousands

00:02:59,640 --> 00:03:02,520
of nodes the probability that at least

00:03:01,140 --> 00:03:03,990
some of the bits that you're using to

00:03:02,520 --> 00:03:06,510
build those nodes because they had to

00:03:03,990 --> 00:03:08,670
build them all out of pieces we're going

00:03:06,510 --> 00:03:10,440
to break and so there was this you know

00:03:08,670 --> 00:03:12,900
assembly line of people plugging things

00:03:10,440 --> 00:03:15,450
in does it work no oh crap put it over

00:03:12,900 --> 00:03:17,310
there get another one so on so forth but

00:03:15,450 --> 00:03:21,060
we're not talking about Hardware here

00:03:17,310 --> 00:03:23,040
we're talking about software and you can

00:03:21,060 --> 00:03:25,440
map a whole bunch of these concepts onto

00:03:23,040 --> 00:03:27,300
software as well software has a supply

00:03:25,440 --> 00:03:29,989
chain but in this case the supply chain

00:03:27,300 --> 00:03:32,190
is all of the code that you depend on

00:03:29,989 --> 00:03:34,020
that's coming from someone other than

00:03:32,190 --> 00:03:38,520
you or possibly just other departments

00:03:34,020 --> 00:03:40,709
in your organization and those can not

00:03:38,520 --> 00:03:42,180
those those can be more or less obvious

00:03:40,709 --> 00:03:43,470
I mean when you've got package

00:03:42,180 --> 00:03:45,030
dependencies in your language they can

00:03:43,470 --> 00:03:46,019
be fairly obvious but have you ever

00:03:45,030 --> 00:03:47,370
stopped to think about the fact that

00:03:46,019 --> 00:03:52,019
your compiler is a third party

00:03:47,370 --> 00:03:53,850
dependency so on so forth and so as in

00:03:52,019 --> 00:03:56,370
the physical supply chain the software

00:03:53,850 --> 00:04:00,209
supply chain has risks in a too obvious

00:03:56,370 --> 00:04:02,550
one bugs if your third party code has a

00:04:00,209 --> 00:04:04,110
bug in it and it impacts you that can

00:04:02,550 --> 00:04:06,570
impact your availability that can impact

00:04:04,110 --> 00:04:12,390
your delivery it can impact a whole

00:04:06,570 --> 00:04:15,900
bunch of things you can have bugs you

00:04:12,390 --> 00:04:17,459
can have bugs in code so you know

00:04:15,900 --> 00:04:19,049
obviously you have a bug in the code

00:04:17,459 --> 00:04:20,280
certain things stop working I'm just

00:04:19,049 --> 00:04:24,960
gonna hold it here because I'm worried

00:04:20,280 --> 00:04:28,050
it's gonna pop up again because I just

00:04:24,960 --> 00:04:31,169
stick you late wildly you see and so

00:04:28,050 --> 00:04:32,340
and so you know you've got the bugs in

00:04:31,169 --> 00:04:35,760
the code but you can also have bugs and

00:04:32,340 --> 00:04:39,900
delivery mechanisms npm can go down pipe

00:04:35,760 --> 00:04:43,350
I can go down gems can go down and so on

00:04:39,900 --> 00:04:45,060
and so forth and so that results in the

00:04:43,350 --> 00:04:47,010
unavailability of packages and that can

00:04:45,060 --> 00:04:48,720
have a bunch of impact to your

00:04:47,010 --> 00:04:50,790
development workflow and suddenly you

00:04:48,720 --> 00:04:53,190
can't install a package anymore but if

00:04:50,790 --> 00:04:56,580
you're in if your deployment process

00:04:53,190 --> 00:05:01,830
involves downloading packages from that

00:04:56,580 --> 00:05:03,990
repository when you deploy then another

00:05:01,830 --> 00:05:05,850
thing that can happen is similar to

00:05:03,990 --> 00:05:08,250
companies going out of business or

00:05:05,850 --> 00:05:11,760
deciding to focus on other products you

00:05:08,250 --> 00:05:13,410
can have a lack of maintenance the one

00:05:11,760 --> 00:05:14,490
of the biggest problems facing open

00:05:13,410 --> 00:05:16,889
source software these days is

00:05:14,490 --> 00:05:21,750
maintenance and the fact that a lot of

00:05:16,889 --> 00:05:23,580
maintainer czar unsupported both when I

00:05:21,750 --> 00:05:25,680
referenced the left pad and event stream

00:05:23,580 --> 00:05:27,720
issues earlier both of those were

00:05:25,680 --> 00:05:30,210
directly attributable to some aspect of

00:05:27,720 --> 00:05:31,620
the main maintainer not wanting to

00:05:30,210 --> 00:05:34,500
maintain that package anymore in the

00:05:31,620 --> 00:05:35,669
case of left pad the person had a bit of

00:05:34,500 --> 00:05:37,470
a falling out with the people running

00:05:35,669 --> 00:05:39,240
NPM over a naming issue and then just

00:05:37,470 --> 00:05:40,470
pulled everything in the case of event

00:05:39,240 --> 00:05:43,440
stream the maintain is doesn't

00:05:40,470 --> 00:05:46,970
interested anymore and handed it off of

00:05:43,440 --> 00:05:49,320
course these things only happen to NPM

00:05:46,970 --> 00:05:51,389
this is a message from Andrew Godwin

00:05:49,320 --> 00:05:53,760
basically pointing out that he does not

00:05:51,389 --> 00:05:55,680
have the the time and energy and brain

00:05:53,760 --> 00:05:58,169
space to handle maintaining a package

00:05:55,680 --> 00:06:01,050
called channels for Jango channels ads

00:05:58,169 --> 00:06:02,400
WebSocket and things like that to Jango

00:06:01,050 --> 00:06:05,760
and allows you to use those within that

00:06:02,400 --> 00:06:06,780
within the Django framework and he

00:06:05,760 --> 00:06:08,070
basically doesn't have the time to

00:06:06,780 --> 00:06:09,900
maintainer anymore so if you want

00:06:08,070 --> 00:06:13,430
WebSocket in Django then you've got a

00:06:09,900 --> 00:06:16,380
bit of an existential problem here and

00:06:13,430 --> 00:06:17,700
all of this so that you've got the lack

00:06:16,380 --> 00:06:19,410
of maintenance maintenance you've got

00:06:17,700 --> 00:06:22,979
bugs and that's before you even get to

00:06:19,410 --> 00:06:24,419
the malicious stuff breaking into your

00:06:22,979 --> 00:06:27,000
code is something that bad people would

00:06:24,419 --> 00:06:28,200
like to do they may not want to break

00:06:27,000 --> 00:06:29,940
into your code as much as somebody

00:06:28,200 --> 00:06:32,430
else's but at some point they might

00:06:29,940 --> 00:06:33,780
decide they want to do that they can try

00:06:32,430 --> 00:06:35,729
and come in the front door they can try

00:06:33,780 --> 00:06:38,010
and break into the API or the login box

00:06:35,729 --> 00:06:39,630
or whatever to try and get in to get

00:06:38,010 --> 00:06:40,590
into your code that way well they can

00:06:39,630 --> 00:06:42,090
try and look for

00:06:40,590 --> 00:06:44,220
you're back in administrative interfaces

00:06:42,090 --> 00:06:46,860
get in that way or they could come in

00:06:44,220 --> 00:06:49,020
via your supply chain they could try and

00:06:46,860 --> 00:06:50,400
break into your package host they could

00:06:49,020 --> 00:06:51,990
try and break into the code that's in

00:06:50,400 --> 00:06:54,419
your package host and so on and so forth

00:06:51,990 --> 00:06:57,240
and this is in some extent exactly what

00:06:54,419 --> 00:06:59,220
happened with event stream with event

00:06:57,240 --> 00:07:02,160
stream the maintainer of the package had

00:06:59,220 --> 00:07:03,630
decided that it was a package that

00:07:02,160 --> 00:07:05,160
they'd written to have some fun with a

00:07:03,630 --> 00:07:06,210
while back but then people started

00:07:05,160 --> 00:07:07,590
appending on it but they weren't

00:07:06,210 --> 00:07:09,419
interested in maintaining it anymore

00:07:07,590 --> 00:07:10,950
someone comes along and says hi I'd like

00:07:09,419 --> 00:07:13,139
to maintain your package now and they go

00:07:10,950 --> 00:07:17,630
sure and that person promptly adds a

00:07:13,139 --> 00:07:20,250
Bitcoin miner this is what happens when

00:07:17,630 --> 00:07:21,840
when maintainer x' decide that they

00:07:20,250 --> 00:07:23,940
can't maintain something anymore and of

00:07:21,840 --> 00:07:28,979
course this kind of malicious activity

00:07:23,940 --> 00:07:31,530
only happens to NPM Python nation was

00:07:28,979 --> 00:07:33,960
more of a thought experiment or a sort

00:07:31,530 --> 00:07:36,060
of live social experiment than an actual

00:07:33,960 --> 00:07:37,800
piece of malicious code but what it did

00:07:36,060 --> 00:07:39,389
was when you ran people install Python

00:07:37,800 --> 00:07:45,030
Nation it uploaded your etc password

00:07:39,389 --> 00:07:46,710
file to a Heroku app but what this

00:07:45,030 --> 00:07:48,630
illustrates is another vector for this

00:07:46,710 --> 00:07:49,979
kind of monkeying around in that it

00:07:48,630 --> 00:07:52,380
doesn't have to be the code within the

00:07:49,979 --> 00:07:53,970
package that is attacking you it can be

00:07:52,380 --> 00:07:57,840
the installation mechanics that are

00:07:53,970 --> 00:07:59,010
attacking you another one similar to

00:07:57,840 --> 00:08:00,870
that also in the Python space was

00:07:59,010 --> 00:08:02,700
Colorama you'll notice that this is

00:08:00,870 --> 00:08:04,770
spelt the way that we in Australia and

00:08:02,700 --> 00:08:06,860
New Zealand would spell it that's not

00:08:04,770 --> 00:08:10,169
the way the package name is spelled

00:08:06,860 --> 00:08:12,060
Colorama spelt without a U is a package

00:08:10,169 --> 00:08:14,729
for Python that does colored text for

00:08:12,060 --> 00:08:16,110
terminals Colorama whether you was a

00:08:14,729 --> 00:08:21,870
package of the exactly the same thing

00:08:16,110 --> 00:08:23,520
and stole all your bitcoins and just

00:08:21,870 --> 00:08:25,350
before we move on I would like to just

00:08:23,520 --> 00:08:28,530
have a bit of a chat about this running

00:08:25,350 --> 00:08:32,580
gag of NPM why do people tend to attack

00:08:28,530 --> 00:08:36,900
NPM and I have a couple of theories the

00:08:32,580 --> 00:08:38,789
first one is sort of a an ecosystem

00:08:36,900 --> 00:08:41,640
thing in JavaScript a lot of JavaScript

00:08:38,789 --> 00:08:44,730
code relies heavily on composition of

00:08:41,640 --> 00:08:47,220
small bits of code and when you're doing

00:08:44,730 --> 00:08:49,110
that kind of composition they also tend

00:08:47,220 --> 00:08:50,820
to wrap those up into libraries and

00:08:49,110 --> 00:08:52,260
those libraries end up so you end up

00:08:50,820 --> 00:08:53,820
with lots and little bits of small small

00:08:52,260 --> 00:08:54,480
code like left pad because somebody

00:08:53,820 --> 00:08:58,050
already wrote

00:08:54,480 --> 00:09:02,160
so why bother writing your own which

00:08:58,050 --> 00:09:03,930
leads to a larger dependency tree which

00:09:02,160 --> 00:09:06,330
leads to a larger supply chain you've

00:09:03,930 --> 00:09:09,600
got more points at which your code could

00:09:06,330 --> 00:09:12,890
be attacked by this vector another

00:09:09,600 --> 00:09:16,470
another theory that I have is that

00:09:12,890 --> 00:09:18,210
electron is a really big thing it's a

00:09:16,470 --> 00:09:21,300
really fun easy way for companies to

00:09:18,210 --> 00:09:24,900
make their desktop apps and you know if

00:09:21,300 --> 00:09:25,830
you're a happy new cryptocurrency thing

00:09:24,900 --> 00:09:27,480
on the thing and you want to make a

00:09:25,830 --> 00:09:28,950
cryptocurrency wallet then electrons a

00:09:27,480 --> 00:09:30,150
good choice but then someone gets into

00:09:28,950 --> 00:09:34,980
your NPM code and steals all your

00:09:30,150 --> 00:09:37,050
bitcoins but my other theory as to why

00:09:34,980 --> 00:09:40,190
you see a lot of ragging on NPM and this

00:09:37,050 --> 00:09:40,190
one is just straight-up contempt

00:09:40,820 --> 00:09:45,990
JavaScript is or at least has been

00:09:43,920 --> 00:09:49,560
widely considered not one of the cool

00:09:45,990 --> 00:09:51,570
languages and so that tends to lead to

00:09:49,560 --> 00:09:55,470
people just you know writing stuff like

00:09:51,570 --> 00:09:56,940
this off the problem with that is as I

00:09:55,470 --> 00:09:58,140
said in my first theory I think the

00:09:56,940 --> 00:10:00,570
reason why you see a lot of this stuff

00:09:58,140 --> 00:10:02,520
in NPM is because it's structured in a

00:10:00,570 --> 00:10:06,060
way that makes it easy to attack in this

00:10:02,520 --> 00:10:07,560
way and so really instead of people who

00:10:06,060 --> 00:10:10,260
don't write JavaScript a lot going on

00:10:07,560 --> 00:10:12,600
Vlade NPM you should be looking at

00:10:10,260 --> 00:10:15,080
what's happening to NPM and going how

00:10:12,600 --> 00:10:17,550
could this happen to my infrastructure

00:10:15,080 --> 00:10:19,080
because the same kind of attacks that

00:10:17,550 --> 00:10:21,300
people use on NPM the same ways that

00:10:19,080 --> 00:10:23,130
these things show up are exactly the

00:10:21,300 --> 00:10:25,380
ways that people could attack your code

00:10:23,130 --> 00:10:26,700
in your supply chain and so you really

00:10:25,380 --> 00:10:28,530
need to think about that and start

00:10:26,700 --> 00:10:33,120
working out how you're going to mitigate

00:10:28,530 --> 00:10:34,920
it so the important thing with risks

00:10:33,120 --> 00:10:38,850
apart from identifying them is

00:10:34,920 --> 00:10:40,080
mitigating them so what have your option

00:10:38,850 --> 00:10:42,570
what options have you got for mitigating

00:10:40,080 --> 00:10:46,110
software supply chain risks well I have

00:10:42,570 --> 00:10:49,560
a really big theory support the dam

00:10:46,110 --> 00:10:50,820
maintainer 'he's one of the as I said

00:10:49,560 --> 00:10:52,830
earlier one of the biggest problems that

00:10:50,820 --> 00:10:54,540
you have in open source software is that

00:10:52,830 --> 00:10:55,620
the maintainer czar doing this often for

00:10:54,540 --> 00:10:57,900
no money

00:10:55,620 --> 00:11:00,000
they might get a lot of recognition out

00:10:57,900 --> 00:11:02,310
of it but recognition doesn't pay the

00:11:00,000 --> 00:11:03,750
bills it's somewhat like exposure in

00:11:02,310 --> 00:11:07,590
that regard

00:11:03,750 --> 00:11:08,750
and so if you are in a profit-making

00:11:07,590 --> 00:11:11,790
enterprise

00:11:08,750 --> 00:11:14,760
that is existentially dependent on a

00:11:11,790 --> 00:11:16,650
piece of open-source software I believe

00:11:14,760 --> 00:11:18,180
that it behooves you to go and make sure

00:11:16,650 --> 00:11:20,700
that the people maintaining that

00:11:18,180 --> 00:11:22,770
software are being looked after

00:11:20,700 --> 00:11:26,910
preferably financially but if there's

00:11:22,770 --> 00:11:28,980
some other way that you could you can

00:11:26,910 --> 00:11:32,460
make their lives better or or you know

00:11:28,980 --> 00:11:34,950
hire them buy them something that they

00:11:32,460 --> 00:11:36,270
need anything like that make sure that

00:11:34,950 --> 00:11:37,830
you're doing that at least make sure

00:11:36,270 --> 00:11:40,200
that you know who they are

00:11:37,830 --> 00:11:41,640
because that kind of support means

00:11:40,200 --> 00:11:43,020
you're gonna get a better turnaround on

00:11:41,640 --> 00:11:46,830
looking after your bugs and things like

00:11:43,020 --> 00:11:50,250
that if you find them apart from that or

00:11:46,830 --> 00:11:52,140
is preferably as well as that you really

00:11:50,250 --> 00:11:53,670
need to think about the processes that

00:11:52,140 --> 00:11:55,550
you're using when it comes to adopting

00:11:53,670 --> 00:11:58,980
third-party code

00:11:55,550 --> 00:12:02,250
some people bracket nerds bracket really

00:11:58,980 --> 00:12:04,080
dislike the word process especially in a

00:12:02,250 --> 00:12:06,240
corporate setting idea because you know

00:12:04,080 --> 00:12:08,550
process is a tool and tools can be used

00:12:06,240 --> 00:12:10,530
for both good and ill but process done

00:12:08,550 --> 00:12:13,560
well is an excellent excellent thing

00:12:10,530 --> 00:12:16,500
because it gives you the structure in

00:12:13,560 --> 00:12:19,470
which to think about something having a

00:12:16,500 --> 00:12:22,170
process for how third-party dependencies

00:12:19,470 --> 00:12:23,910
into your codebase means that you can

00:12:22,170 --> 00:12:26,100
think about okay so we're gonna take a

00:12:23,910 --> 00:12:28,470
dependency on this what does this do to

00:12:26,100 --> 00:12:31,230
us does this impact any of our security

00:12:28,470 --> 00:12:33,600
critical pathways does this open us up

00:12:31,230 --> 00:12:35,520
to anything else what happens if this if

00:12:33,600 --> 00:12:36,720
we find bugs in this you don't have to

00:12:35,520 --> 00:12:38,900
do a whole lot of work on it but just

00:12:36,720 --> 00:12:41,580
thinking about it is a good idea and

00:12:38,900 --> 00:12:43,320
going along with that having a process

00:12:41,580 --> 00:12:45,600
for handling upgrades and updates in

00:12:43,320 --> 00:12:47,520
that code is really important too and

00:12:45,600 --> 00:12:49,560
not just for supply chain risk

00:12:47,520 --> 00:12:52,170
mitigation I've worked in organizations

00:12:49,560 --> 00:12:54,930
before where we've been based heavily on

00:12:52,170 --> 00:12:57,540
code that was sort of five to seven

00:12:54,930 --> 00:12:59,340
years out of date and it took us a whole

00:12:57,540 --> 00:13:01,830
lot of work to get out from under that

00:12:59,340 --> 00:13:04,170
and if you've got a process for how you

00:13:01,830 --> 00:13:06,090
handle those things then you can kind of

00:13:04,170 --> 00:13:08,100
say okay we're at the point now we need

00:13:06,090 --> 00:13:10,020
to kick off an update cycle and we need

00:13:08,100 --> 00:13:11,970
to look into that and then the other

00:13:10,020 --> 00:13:14,880
part of it is reviewing and auditing

00:13:11,970 --> 00:13:16,200
third-party code when you bring in a new

00:13:14,880 --> 00:13:18,390
version of a package you're bringing in

00:13:16,200 --> 00:13:21,300
new code you should know what that code

00:13:18,390 --> 00:13:22,410
is if you're in a security critical

00:13:21,300 --> 00:13:23,819
thing if you're handling cred

00:13:22,410 --> 00:13:25,110
card data if you're handing personally

00:13:23,819 --> 00:13:27,180
if you're handling personally

00:13:25,110 --> 00:13:28,440
identifying information all that kind of

00:13:27,180 --> 00:13:30,569
stuff you should really know what's

00:13:28,440 --> 00:13:33,600
going on in that and not just blindly

00:13:30,569 --> 00:13:35,639
rely on it and auditing your codebase

00:13:33,600 --> 00:13:36,360
for third-party dependencies is also

00:13:35,639 --> 00:13:38,250
something you should do on a regular

00:13:36,360 --> 00:13:39,569
basis because you might go oh hang on

00:13:38,250 --> 00:13:44,040
we're not using that anymore why the

00:13:39,569 --> 00:13:48,300
hell are we even bringing that in to

00:13:44,040 --> 00:13:51,000
give you an example I work at yubico we

00:13:48,300 --> 00:13:52,170
handle we do hardware security tokens

00:13:51,000 --> 00:13:54,480
and authentication and stuff like that

00:13:52,170 --> 00:13:56,160
we're looking at retooling some of our

00:13:54,480 --> 00:13:58,709
services and some other things and we're

00:13:56,160 --> 00:14:00,029
looking at a process by which you do a

00:13:58,709 --> 00:14:02,670
development build which can pull in

00:14:00,029 --> 00:14:05,189
packages from anywhere but where the

00:14:02,670 --> 00:14:08,490
resulting artifact is marked as none

00:14:05,189 --> 00:14:10,379
shippable and then having an actual

00:14:08,490 --> 00:14:12,870
production deployment you can only pull

00:14:10,379 --> 00:14:16,829
greenlit packages out of a out of a

00:14:12,870 --> 00:14:19,560
proxy cache but that that artifact is

00:14:16,829 --> 00:14:21,449
marked as shippable because that lets us

00:14:19,560 --> 00:14:22,529
say okay that our security team can look

00:14:21,449 --> 00:14:23,910
at the packages of coming and saying

00:14:22,529 --> 00:14:25,800
that this development builder we want to

00:14:23,910 --> 00:14:27,269
promote has all of these things all of

00:14:25,800 --> 00:14:28,980
those were seen before they're all fine

00:14:27,269 --> 00:14:30,569
this one's new we should take a look at

00:14:28,980 --> 00:14:32,220
that this one's an upgrade we should

00:14:30,569 --> 00:14:33,959
take a look at that and so it gives us

00:14:32,220 --> 00:14:35,610
touch points to look at those things and

00:14:33,959 --> 00:14:38,160
make a decision as to how much when you

00:14:35,610 --> 00:14:42,240
pay attention to this and what the risks

00:14:38,160 --> 00:14:45,500
are so summing up relying on third-party

00:14:42,240 --> 00:14:48,029
code introduces risk into your project

00:14:45,500 --> 00:14:49,529
this isn't meant to scare you it's just

00:14:48,029 --> 00:14:52,050
meant to make you think about what those

00:14:49,529 --> 00:14:54,959
risks are because these risks can be

00:14:52,050 --> 00:14:56,069
mitigated you just need to have a think

00:14:54,959 --> 00:14:57,660
about it and work out what your

00:14:56,069 --> 00:15:01,819
processes are for dealing with it and

00:14:57,660 --> 00:15:04,350
lastly it's not just NPM it's everything

00:15:01,819 --> 00:15:06,089
NPM is not the only thing that suffers

00:15:04,350 --> 00:15:07,980
security issues every single package

00:15:06,089 --> 00:15:10,949
system out there has had issues all the

00:15:07,980 --> 00:15:13,350
way down to Debian mucking up open SSL

00:15:10,949 --> 00:15:16,980
and breaking randomness that then ended

00:15:13,350 --> 00:15:19,500
up making bad SSH keys everyone has it

00:15:16,980 --> 00:15:22,139
and the most important thing I believe

00:15:19,500 --> 00:15:26,540
out of this whole presentation support

00:15:22,139 --> 00:15:33,209
the maintainer --zz thank you very much

00:15:26,540 --> 00:15:36,869
thank you thank you better if you have

00:15:33,209 --> 00:15:38,309
questions for Benner if you want to tell

00:15:36,869 --> 00:15:40,859
him he's wrong if you want to tell him

00:15:38,309 --> 00:15:45,660
that NPN really is the problem he'll be

00:15:40,859 --> 00:15:47,790
outside after this talk yes yes I'll be

00:15:45,660 --> 00:15:49,230
trying to stay awake my plane broke last

00:15:47,790 --> 00:15:51,380
night and so I came in very late

00:15:49,230 --> 00:15:56,029
hey please thank Ben our ice

00:15:51,380 --> 00:15:56,029

YouTube URL: https://www.youtube.com/watch?v=fnELtqE6mMM


