Title: Bugs in your server
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Joel Stanley

https://2019.linux.conf.au/schedule/presentation/265/

ï¿¼Service processor privilege isolation and getting caught with your pants down

Modern servers contain a service processor - a Baseboard Management Controller (BMC) System On a Chip running a software stack that enables out-of-band monitoring and management of the server. Management and monitoring are necessary in cloud and dedicated server environments where machines are leased out, and a fundamental property of such a system is the separation of the management and workload security domains.

BMC hardware designs and firmware have traditionally been hiding in the shadows, though recent research has begun to shine a light into the ecosystem. The bulk of the research has relied on exploiting software flaws in existing BMC firmware implementations. By contrast, this talk will demonstrate methods of gaining complete persistent control of the BMC using a variety of useful hardware features.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:03,860 --> 00:00:07,960
[Applause]

00:00:11,770 --> 00:00:18,510
[Applause]

00:00:15,740 --> 00:00:20,609
thanks everyone for coming out so we're

00:00:18,510 --> 00:00:23,519
gonna talk about PMC's today who knows

00:00:20,609 --> 00:00:25,019
what a BMC is everyone cool so this

00:00:23,519 --> 00:00:27,090
would be a bit of revision that's fine

00:00:25,019 --> 00:00:28,619
if you don't let a BMC don't worry is

00:00:27,090 --> 00:00:32,550
that if you don't know to be MCS don't

00:00:28,619 --> 00:00:34,590
worry so I'm the MCS I computers need

00:00:32,550 --> 00:00:37,230
computers to look after them is the

00:00:34,590 --> 00:00:38,460
summary computers that know how to look

00:00:37,230 --> 00:00:40,110
after themselves then how to secure

00:00:38,460 --> 00:00:43,320
themselves cool how to turn themselves

00:00:40,110 --> 00:00:45,120
on and and in general the kinds of

00:00:43,320 --> 00:00:46,980
computers we're talking about don't

00:00:45,120 --> 00:00:48,120
don't have ways to interact with them so

00:00:46,980 --> 00:00:49,829
that they might not have a monitor

00:00:48,120 --> 00:00:52,079
plugged in they won't have a keyboard

00:00:49,829 --> 00:00:54,690
and so you need some way to interact

00:00:52,079 --> 00:00:56,670
with them over the network that will be

00:00:54,690 --> 00:00:57,719
installing your operating system figure

00:00:56,670 --> 00:00:59,820
out what's gone wrong with something

00:00:57,719 --> 00:01:02,160
goes wrong you know if you go and type

00:00:59,820 --> 00:01:03,899
that Network reconfigure configuration

00:01:02,160 --> 00:01:05,729
commands and all of a sudden drops off

00:01:03,899 --> 00:01:07,369
the network you can jump on your BMC and

00:01:05,729 --> 00:01:09,450
get a serial console things like this

00:01:07,369 --> 00:01:11,220
the things about these these little

00:01:09,450 --> 00:01:12,720
computers is they're generally always on

00:01:11,220 --> 00:01:15,540
as long as you have power applied to

00:01:12,720 --> 00:01:19,409
system the BMC is going to be active

00:01:15,540 --> 00:01:20,759
it's gonna be booted and for a little

00:01:19,409 --> 00:01:23,400
while probably about the last ten years

00:01:20,759 --> 00:01:26,610
at least VMC's have been little embedded

00:01:23,400 --> 00:01:28,740
Linux machines so that they've got the

00:01:26,610 --> 00:01:31,259
same software stack that's running on on

00:01:28,740 --> 00:01:33,060
any kind of Linux computer but that

00:01:31,259 --> 00:01:35,430
being the Linux kernel and some user

00:01:33,060 --> 00:01:37,799
space that configures the system talk to

00:01:35,430 --> 00:01:39,150
the network provide services for it for

00:01:37,799 --> 00:01:42,390
you to do the things that it's mentioned

00:01:39,150 --> 00:01:45,060
and some of those things are fan control

00:01:42,390 --> 00:01:46,799
and power control remote monitoring the

00:01:45,060 --> 00:01:49,170
virtual keyboard mouse display storage

00:01:46,799 --> 00:01:51,090
combo you know back in the day this was

00:01:49,170 --> 00:01:52,710
a Java applet that you'd load into you

00:01:51,090 --> 00:01:56,189
your browser and you click through those

00:01:52,710 --> 00:01:58,560
security warnings and let your arm let

00:01:56,189 --> 00:02:02,689
you interact with the Machine remotely

00:01:58,560 --> 00:02:04,680
we've moved along a long way since then

00:02:02,689 --> 00:02:06,689
you don't need to install that Java

00:02:04,680 --> 00:02:08,670
plug-in anymore so these are the kind of

00:02:06,689 --> 00:02:10,950
features we have on a BMC that's kind of

00:02:08,670 --> 00:02:12,629
the job that has and and just to remind

00:02:10,950 --> 00:02:13,740
us that you know it is just an arm just

00:02:12,629 --> 00:02:15,930
in one chip there's a snip

00:02:13,740 --> 00:02:18,690
of the device tree for a real life BMC

00:02:15,930 --> 00:02:20,310
machine so it's describing the flash and

00:02:18,690 --> 00:02:24,900
the interrupt controller and given that

00:02:20,310 --> 00:02:26,970
device and whatnot USB and and so you

00:02:24,900 --> 00:02:29,820
know it's that there's nothing all that

00:02:26,970 --> 00:02:31,170
exciting about a BMC except for the fact

00:02:29,820 --> 00:02:35,040
that we don't really know that they're

00:02:31,170 --> 00:02:37,800
there until recently at least just a

00:02:35,040 --> 00:02:39,330
quick aside I've been working for the

00:02:37,800 --> 00:02:43,080
last three or four years on a project

00:02:39,330 --> 00:02:45,360
called open BMC this is a history effort

00:02:43,080 --> 00:02:48,900
to create an open-source version of this

00:02:45,360 --> 00:02:50,580
what was proprietary firmware so on your

00:02:48,900 --> 00:02:53,460
older systems and actually many of our

00:02:50,580 --> 00:02:55,500
current ones it's it's a BIOS vendor

00:02:53,460 --> 00:02:57,150
writes the little embedded Linux system

00:02:55,500 --> 00:02:59,910
they provide early user space software

00:02:57,150 --> 00:03:02,370
they developed the kernel and and they

00:02:59,910 --> 00:03:04,950
ship it as a firmware blob to your to

00:03:02,370 --> 00:03:08,040
your server system and then your server

00:03:04,950 --> 00:03:10,290
manufacturer will integrate that get it

00:03:08,040 --> 00:03:13,290
talking to the host firmware and ship it

00:03:10,290 --> 00:03:14,790
to you as a working system but we

00:03:13,290 --> 00:03:16,740
realized a little while back that we

00:03:14,790 --> 00:03:18,330
were linux engineers we knew how to make

00:03:16,740 --> 00:03:20,700
kernels run alarm systems when you had a

00:03:18,330 --> 00:03:23,610
right user space code so we could do our

00:03:20,700 --> 00:03:25,200
own BMC implementation and it turns out

00:03:23,610 --> 00:03:27,390
that when I say we that was some of my

00:03:25,200 --> 00:03:29,040
colleagues at IBM turns out people at

00:03:27,390 --> 00:03:31,950
other companies had the same idea so

00:03:29,040 --> 00:03:34,410
Facebook started about the same time we

00:03:31,950 --> 00:03:35,760
did we did at IBM and and many other

00:03:34,410 --> 00:03:38,130
companies have joined in the party since

00:03:35,760 --> 00:03:39,900
then it was 12 months ago that I was in

00:03:38,130 --> 00:03:41,730
California and we incorporate on the

00:03:39,900 --> 00:03:44,130
Linux Foundation so we're a big growing

00:03:41,730 --> 00:03:46,050
up project with a legal status and all

00:03:44,130 --> 00:03:47,520
this kind of gear someone's own the

00:03:46,050 --> 00:03:49,050
trademark really is the only change that

00:03:47,520 --> 00:03:52,860
happened when we became in a corporative

00:03:49,050 --> 00:03:56,880
project and so now we've got Microsoft

00:03:52,860 --> 00:03:58,080
Intel Dell Facebook IBM a big long

00:03:56,880 --> 00:04:01,230
laundry list of companies that have

00:03:58,080 --> 00:04:03,810
jumped on board and a contributing to

00:04:01,230 --> 00:04:05,460
the project in certain ways one of the

00:04:03,810 --> 00:04:06,570
things about these this big long list of

00:04:05,460 --> 00:04:09,300
companies is they have kind of different

00:04:06,570 --> 00:04:11,910
requirements if you're a Facebook or a

00:04:09,300 --> 00:04:14,280
Google you're gonna be building machines

00:04:11,910 --> 00:04:16,230
for your own data center so you don't

00:04:14,280 --> 00:04:17,700
really care about customers per se or

00:04:16,230 --> 00:04:19,859
your customers or internal customers

00:04:17,700 --> 00:04:22,020
whereas other other manufacturers of

00:04:19,859 --> 00:04:24,139
building systems that are designed to be

00:04:22,020 --> 00:04:26,330
sold to consumers so just

00:04:24,139 --> 00:04:28,310
unlike like us in the crowd you know we

00:04:26,330 --> 00:04:29,990
need to buy a server to run our web

00:04:28,310 --> 00:04:31,939
server or whatever application we have

00:04:29,990 --> 00:04:34,129
we go on by one and and that will have

00:04:31,939 --> 00:04:35,479
some kind of BMC software so even though

00:04:34,129 --> 00:04:38,090
they've got kind of these two very

00:04:35,479 --> 00:04:39,919
separate different kinds of you know use

00:04:38,090 --> 00:04:41,779
cases there's a common stack in the

00:04:39,919 --> 00:04:44,270
middle and that's what open BMC is about

00:04:41,779 --> 00:04:45,620
working together so we've been um

00:04:44,270 --> 00:04:49,939
replacing some of the core technologies

00:04:45,620 --> 00:04:51,680
so ipmi is kind of synonymous with BMC

00:04:49,939 --> 00:04:53,749
there's this protocol for interacting

00:04:51,680 --> 00:04:56,960
with the BMC both over the network and

00:04:53,749 --> 00:04:58,699
also between the host and the BMC we've

00:04:56,960 --> 00:05:01,250
replaced some of that with with a REST

00:04:58,699 --> 00:05:04,069
API so with a HDTV based API so instead

00:05:01,250 --> 00:05:07,699
of scripting ipmi tool you can use your

00:05:04,069 --> 00:05:09,770
favorite requests in Python or use Cole

00:05:07,699 --> 00:05:11,870
commands or whatever to try to the BMC

00:05:09,770 --> 00:05:14,659
we've created a really nice-looking web

00:05:11,870 --> 00:05:16,400
UI I might be a little bit biased but if

00:05:14,659 --> 00:05:18,080
you've seen what the existing BMC web

00:05:16,400 --> 00:05:21,169
you guys I look like and it compared to

00:05:18,080 --> 00:05:22,909
this one it looks released to me and one

00:05:21,169 --> 00:05:23,990
of the big selling points you know it's

00:05:22,909 --> 00:05:25,819
obvious to all of us and open-source

00:05:23,990 --> 00:05:27,469
conference is the fact that open BMC is

00:05:25,819 --> 00:05:29,870
open source so jump on github you can

00:05:27,469 --> 00:05:31,189
conceal the source there and still the

00:05:29,870 --> 00:05:32,990
different machines that are supported

00:05:31,189 --> 00:05:34,339
and work in progress no different bits

00:05:32,990 --> 00:05:36,889
of functionality the different vendors

00:05:34,339 --> 00:05:38,900
are contributing one of the things that

00:05:36,889 --> 00:05:40,729
we're doing is we're dragging the the

00:05:38,900 --> 00:05:42,710
the bmc's into the present so where

00:05:40,729 --> 00:05:44,990
you're at the older BMC might be just

00:05:42,710 --> 00:05:46,310
one demon a big chunk of C code that

00:05:44,990 --> 00:05:48,500
sits there and tries to everything at

00:05:46,310 --> 00:05:50,270
once we've got a bit of privilege

00:05:48,500 --> 00:05:52,699
isolation there's a bunch of tools that

00:05:50,270 --> 00:05:55,399
talk over d-bus to each other and it has

00:05:52,699 --> 00:05:56,569
a separate task to perform on the BMC so

00:05:55,399 --> 00:05:59,569
in theory you can swap out different

00:05:56,569 --> 00:06:00,949
components of the BMC and and maybe it

00:05:59,569 --> 00:06:02,719
has some of the security properties that

00:06:00,949 --> 00:06:04,729
you have but isolating different tasks

00:06:02,719 --> 00:06:07,099
into into different processes on the

00:06:04,729 --> 00:06:08,899
system the thing that I care the most

00:06:07,099 --> 00:06:12,460
about is that we upstream the kernel so

00:06:08,899 --> 00:06:15,259
I work on the kernel with my day job

00:06:12,460 --> 00:06:16,879
when you when you buy an arm system on

00:06:15,259 --> 00:06:17,330
ship it'll come with it's probably a

00:06:16,879 --> 00:06:19,009
tarball

00:06:17,330 --> 00:06:21,349
and it'll be a kernel from about five

00:06:19,009 --> 00:06:22,909
years ago and it won't have any security

00:06:21,349 --> 00:06:25,399
patch and security updates stable

00:06:22,909 --> 00:06:27,319
updates applied to it it will probably

00:06:25,399 --> 00:06:29,419
have an interesting coding style it

00:06:27,319 --> 00:06:32,449
might not use the normal kernel a fee is

00:06:29,419 --> 00:06:33,680
it probably won't actually and any

00:06:32,449 --> 00:06:36,169
setting yourself up for a world of pain

00:06:33,680 --> 00:06:37,849
really using this stuff something that

00:06:36,169 --> 00:06:39,889
we've been lucky enough to do is to do

00:06:37,849 --> 00:06:41,119
best the effort into upstreaming the

00:06:39,889 --> 00:06:43,279
kind of war so using all this data

00:06:41,119 --> 00:06:46,969
Colonel API is so then you can write

00:06:43,279 --> 00:06:48,469
normal use a space code that talks to HW

00:06:46,969 --> 00:06:50,869
month subsystem for instance for fans

00:06:48,469 --> 00:06:54,050
instead of crafting your own octal base

00:06:50,869 --> 00:06:56,419
mess the MC so so that's going quite

00:06:54,050 --> 00:06:58,339
well it's going so well but when we've

00:06:56,419 --> 00:06:59,869
had other so like BMC silicon vendors

00:06:58,339 --> 00:07:01,729
jump on board and say hey we didn't do

00:06:59,869 --> 00:07:03,740
it from BMC our customers demand it how

00:07:01,729 --> 00:07:06,110
do we do it I get to tell them up stream

00:07:03,740 --> 00:07:08,599
your code and they say yes sir and going

00:07:06,110 --> 00:07:10,129
upstream that code so that that's a huge

00:07:08,599 --> 00:07:11,479
win you know setting those norms and you

00:07:10,129 --> 00:07:14,179
start a project and something we hear

00:07:11,479 --> 00:07:18,169
all the time but it does work so that

00:07:14,179 --> 00:07:19,699
that's that's bmc's as Matthew said

00:07:18,169 --> 00:07:21,019
earlier on today firmware is responsible

00:07:19,699 --> 00:07:22,550
for getting two computer into a state

00:07:21,019 --> 00:07:24,800
that allows us to recognize it as a

00:07:22,550 --> 00:07:26,599
working computer so what do you need to

00:07:24,800 --> 00:07:28,969
do to get a computer going you want to

00:07:26,599 --> 00:07:31,249
turn on the power that's the first step

00:07:28,969 --> 00:07:33,469
fly some fly some electrons to the serve

00:07:31,249 --> 00:07:34,819
to the host processor once the host

00:07:33,469 --> 00:07:36,679
processors go electrons running through

00:07:34,819 --> 00:07:38,089
it locks are owning it's going to ask

00:07:36,679 --> 00:07:41,059
for some kind of firmware and needs some

00:07:38,089 --> 00:07:43,159
firmware to get itself going so we might

00:07:41,059 --> 00:07:44,509
call up the BIOS or the FBI or other

00:07:43,159 --> 00:07:46,039
platforms call it something else

00:07:44,509 --> 00:07:48,949
you know from power land we call this

00:07:46,039 --> 00:07:50,089
the P naught so it provides the host

00:07:48,949 --> 00:07:52,309
with that firmware it needs to have some

00:07:50,089 --> 00:07:54,769
mechanism of loading that insert into

00:07:52,309 --> 00:07:56,269
the host processor the other thing the

00:07:54,769 --> 00:07:59,839
BMC does once it's up and running is

00:07:56,269 --> 00:08:01,610
some kind of firmware updates so when

00:07:59,839 --> 00:08:02,809
there's bugs when there's new hardware

00:08:01,610 --> 00:08:06,169
to support you want to be to update the

00:08:02,809 --> 00:08:07,839
firmware and as its booting so now the

00:08:06,169 --> 00:08:10,490
system is up and running it's updated

00:08:07,839 --> 00:08:12,199
how do you know what it's up to in a

00:08:10,490 --> 00:08:14,659
very early stage you might not even have

00:08:12,199 --> 00:08:17,029
a console driver loaded so you'll do

00:08:14,659 --> 00:08:18,229
sensor updates this is an IBM I concept

00:08:17,029 --> 00:08:20,419
where you sit there and say the firmware

00:08:18,229 --> 00:08:22,249
progress sensor is this and now are up

00:08:20,419 --> 00:08:23,389
to initializing PCI and now we're

00:08:22,249 --> 00:08:26,240
initializing this and they're

00:08:23,389 --> 00:08:28,219
initializing that and up and up until

00:08:26,240 --> 00:08:29,449
once you get to a certain point your

00:08:28,219 --> 00:08:31,159
firmware might get to talk to a serial

00:08:29,449 --> 00:08:32,930
port and so the other thing the BMC does

00:08:31,159 --> 00:08:35,569
is provide a serial console so you can

00:08:32,930 --> 00:08:36,919
see all the messages coming by once your

00:08:35,569 --> 00:08:38,930
operating system wants the Linux kernels

00:08:36,919 --> 00:08:42,229
running you can see the output of the

00:08:38,930 --> 00:08:43,880
kernel log fly by as the BMC kind of

00:08:42,229 --> 00:08:46,189
provides all these functions you can see

00:08:43,880 --> 00:08:48,610
on the slide there that's the screenshot

00:08:46,189 --> 00:08:53,200
of the BMC web UI

00:08:48,610 --> 00:08:54,820
that looks pretty good so what kind of

00:08:53,200 --> 00:08:56,860
interfaces do we head for the BMC how do

00:08:54,820 --> 00:08:58,060
we talk to it there's all kinds of

00:08:56,860 --> 00:09:00,910
interface it's not quite as bad as

00:08:58,060 --> 00:09:03,279
that's that a cable mess there but we

00:09:00,910 --> 00:09:04,779
have got a Farrell collection and we

00:09:03,279 --> 00:09:07,660
kind of classify them into two big

00:09:04,779 --> 00:09:09,940
categories as the inbound interfaces in

00:09:07,660 --> 00:09:12,670
band refers to talking between the BMC

00:09:09,940 --> 00:09:14,110
and the host processor and the other set

00:09:12,670 --> 00:09:15,970
of interfaces are out-of-band so that's

00:09:14,110 --> 00:09:17,589
where you're talking to the BMC over the

00:09:15,970 --> 00:09:19,149
network or over some something that's

00:09:17,589 --> 00:09:21,040
generally external to the chassis that

00:09:19,149 --> 00:09:22,990
the computers in so the inbound

00:09:21,040 --> 00:09:26,050
interfaces that the host firmware and

00:09:22,990 --> 00:09:28,209
the BMC used to talk is IP MIB T stands

00:09:26,050 --> 00:09:31,899
for black transfer it's a simple FIFO

00:09:28,209 --> 00:09:34,779
for talking back and forth we also have

00:09:31,899 --> 00:09:37,510
PCIe so often a B and C will expose the

00:09:34,779 --> 00:09:39,610
graphics device and so the BMC

00:09:37,510 --> 00:09:42,839
enumerates as a graphics device and the

00:09:39,610 --> 00:09:47,019
PCIe bus and data can be transferred

00:09:42,839 --> 00:09:48,100
across that not just for graphics we can

00:09:47,019 --> 00:09:50,490
also use that for doing things like

00:09:48,100 --> 00:09:53,380
firmware updates so it's bi-directional

00:09:50,490 --> 00:09:55,149
we also have that you arts so these are

00:09:53,380 --> 00:09:56,860
generally not physical pins on the host

00:09:55,149 --> 00:09:59,350
processor a UART is another word for a

00:09:56,860 --> 00:10:01,269
serial port so dinner and got pins that

00:09:59,350 --> 00:10:03,430
TX and rx but it'll be some kind of

00:10:01,269 --> 00:10:05,589
virtual eyes you are sitting on a memory

00:10:03,430 --> 00:10:06,970
mat bus but for the software running on

00:10:05,589 --> 00:10:09,790
either side it looks the same as it did

00:10:06,970 --> 00:10:10,870
you are where you can send characters up

00:10:09,790 --> 00:10:13,510
and down you go

00:10:10,870 --> 00:10:15,310
and the other big interface between them

00:10:13,510 --> 00:10:16,779
is is the LPC interface if your

00:10:15,310 --> 00:10:20,140
Institute's talk this morning Stewart

00:10:16,779 --> 00:10:22,180
spoke about LPC briefly sense a low ping

00:10:20,140 --> 00:10:23,829
count it's just memory map bus that sits

00:10:22,180 --> 00:10:26,949
between the host processor and the BMC

00:10:23,829 --> 00:10:29,050
and lots of these devices are just

00:10:26,949 --> 00:10:31,510
spoken about the I think my BAE the you

00:10:29,050 --> 00:10:34,750
are are actually virtual devices on the

00:10:31,510 --> 00:10:36,100
LPC bus we also use the LPC bus for

00:10:34,750 --> 00:10:40,060
loading the firmware generally so the

00:10:36,100 --> 00:10:41,290
BMC presents the the firmware in part of

00:10:40,060 --> 00:10:43,870
that obviously address space and the

00:10:41,290 --> 00:10:46,209
host can read it off the outer band

00:10:43,870 --> 00:10:48,880
interfaces that we have Ethernet is the

00:10:46,209 --> 00:10:50,380
obvious one BMC's to Ethernet in a in a

00:10:48,880 --> 00:10:51,970
bit of an interesting way could you've

00:10:50,380 --> 00:10:54,160
never seen a BMC before you might come

00:10:51,970 --> 00:10:57,190
across this that this this protocol got

00:10:54,160 --> 00:10:58,569
NCSI and it's a sideband interface that

00:10:57,190 --> 00:11:01,889
lets you use the same Ethernet devices

00:10:58,569 --> 00:11:03,929
the hosts with only the one cable

00:11:01,889 --> 00:11:06,540
to the side so kind of freaky you plug

00:11:03,929 --> 00:11:10,410
one cable in you see two devices on your

00:11:06,540 --> 00:11:11,790
network ones the BMC once the hosts the

00:11:10,410 --> 00:11:13,470
upside is you need one cable the

00:11:11,790 --> 00:11:14,819
downside is you got this kind of scary

00:11:13,470 --> 00:11:17,220
behavior of what's this other device

00:11:14,819 --> 00:11:19,259
here and what's it doing what's off a

00:11:17,220 --> 00:11:21,869
little bit about best practices for that

00:11:19,259 --> 00:11:23,459
in a little bit and then the other out

00:11:21,869 --> 00:11:25,559
abandoned faces the you are so often the

00:11:23,459 --> 00:11:27,389
machine will will break up the BMC you

00:11:25,559 --> 00:11:30,419
are to the back of the chassis so you

00:11:27,389 --> 00:11:32,850
can plug in your db9 cable and the

00:11:30,419 --> 00:11:35,869
rs-232 adapter and see the the console

00:11:32,850 --> 00:11:35,869
coming out the back of the machine

00:11:36,889 --> 00:11:41,339
it's kind of interesting internally how

00:11:39,239 --> 00:11:43,319
those characters end up coming out be

00:11:41,339 --> 00:11:45,269
MCS have like an internal MUX that lets

00:11:43,319 --> 00:11:47,339
you route all kinds of you arts to all

00:11:45,269 --> 00:11:49,859
kinds of other you arts and and that's

00:11:47,339 --> 00:11:51,449
how you end up having the hosts to your

00:11:49,859 --> 00:11:54,809
console appear at the back of the BMC

00:11:51,449 --> 00:11:57,540
and things like this so we've gone over

00:11:54,809 --> 00:12:00,119
the interface is a little bit I've got

00:11:57,540 --> 00:12:01,709
lots of communication going on how does

00:12:00,119 --> 00:12:03,689
it all work how does it fit together so

00:12:01,709 --> 00:12:06,660
how do we use all this gear to boot the

00:12:03,689 --> 00:12:09,329
BMC well the BMC applies to power you

00:12:06,660 --> 00:12:10,799
might look at GPIO on just a pin it

00:12:09,329 --> 00:12:13,559
might send some I squared C commands

00:12:10,799 --> 00:12:15,779
down to a power supply and ask it to

00:12:13,559 --> 00:12:18,299
turn on at a certain voltage some kind

00:12:15,779 --> 00:12:20,369
of power application happens from there

00:12:18,299 --> 00:12:23,399
the hosts alright give me my firmware

00:12:20,369 --> 00:12:25,199
and it'll load all over this LPC bus

00:12:23,399 --> 00:12:28,139
this memory mapped interface that's the

00:12:25,199 --> 00:12:29,459
blue arrow there as it's going it's

00:12:28,139 --> 00:12:31,829
going to send this progress messages

00:12:29,459 --> 00:12:33,239
over the BT interface how's it going

00:12:31,829 --> 00:12:35,309
where's it up to what's it doing it's

00:12:33,239 --> 00:12:37,679
doing now and once it gets to a certain

00:12:35,309 --> 00:12:40,350
point us in the console messages so

00:12:37,679 --> 00:12:41,759
that's the simple overview of the

00:12:40,350 --> 00:12:44,369
functions of the BMC needs to provide

00:12:41,759 --> 00:12:45,720
and why it exists do we have any

00:12:44,369 --> 00:12:51,389
questions at this point do you think

00:12:45,720 --> 00:12:53,430
you're like me to clarify alright we'll

00:12:51,389 --> 00:12:57,600
press on

00:12:53,430 --> 00:13:00,420
so BMC is vulnerable they don't have a

00:12:57,600 --> 00:13:03,090
great Hasrat a great track record that

00:13:00,420 --> 00:13:05,100
one of the first big BMC bugs that we

00:13:03,090 --> 00:13:06,890
learn about was it was actually baked

00:13:05,100 --> 00:13:09,570
into the standard for authentication

00:13:06,890 --> 00:13:11,580
when when you want to log into a BMC you

00:13:09,570 --> 00:13:13,080
are you provide the username and it

00:13:11,580 --> 00:13:16,770
sends you back a hash of the password

00:13:13,080 --> 00:13:19,080
and if you've heard the password

00:13:16,770 --> 00:13:21,420
you can send it the BMC inventor gets

00:13:19,080 --> 00:13:22,770
you but um the hash algorithm was was

00:13:21,420 --> 00:13:24,960
invented in the same era that the

00:13:22,770 --> 00:13:29,370
protocol was and it was quite easy to

00:13:24,960 --> 00:13:31,920
reverse so whoops not much you could do

00:13:29,370 --> 00:13:33,870
about this a standards-compliant BMC had

00:13:31,920 --> 00:13:37,080
to implement this this feature feature

00:13:33,870 --> 00:13:38,730
and and so really the only mitigation we

00:13:37,080 --> 00:13:41,820
had there was to take your PMC's off the

00:13:38,730 --> 00:13:43,470
internet and the the recommendation was

00:13:41,820 --> 00:13:45,990
put your BMC on a separate management

00:13:43,470 --> 00:13:48,150
network so that it's not exposed the

00:13:45,990 --> 00:13:50,190
rest of the nasties that might be

00:13:48,150 --> 00:13:53,580
happening on your internal data center

00:13:50,190 --> 00:13:56,550
network or a local area network that was

00:13:53,580 --> 00:13:58,980
the first big one we've had hope of

00:13:56,550 --> 00:14:01,290
somewhat amusing ones over the years one

00:13:58,980 --> 00:14:03,090
that I picked out from lush of CVS from

00:14:01,290 --> 00:14:04,830
two years ago but from last year was he

00:14:03,090 --> 00:14:07,250
sent lots of bees to your BMC and it

00:14:04,830 --> 00:14:07,250
looks you in

00:14:07,610 --> 00:14:13,009
whoops a bit of a bit of buffer over

00:14:09,769 --> 00:14:15,380
selection happening there I was trying

00:14:13,009 --> 00:14:17,509
to look up that specific one and and I

00:14:15,380 --> 00:14:19,490
plugged in the name of the vendor and

00:14:17,509 --> 00:14:21,649
the name that they use for therefore

00:14:19,490 --> 00:14:24,139
prior to BMC and there's actually about

00:14:21,649 --> 00:14:27,440
40 CVS have been open in the last 24

00:14:24,139 --> 00:14:28,610
months so lots of bugs are going on some

00:14:27,440 --> 00:14:29,990
make the headlines because they're a bit

00:14:28,610 --> 00:14:31,670
amusing but but there's lots of

00:14:29,990 --> 00:14:34,940
vulnerabilities flying around the DMC

00:14:31,670 --> 00:14:36,949
space one of them that made news towards

00:14:34,940 --> 00:14:38,870
the end of last year was a talk named

00:14:36,949 --> 00:14:42,380
The Unbearable Lightness of bmc's at

00:14:38,870 --> 00:14:44,990
blackhat and people made some some

00:14:42,380 --> 00:14:48,500
commentary on just how the state of the

00:14:44,990 --> 00:14:49,970
art and BMC's was was not that great the

00:14:48,500 --> 00:14:51,889
quote was added banned power management

00:14:49,970 --> 00:14:53,089
devices the MCS introduced

00:14:51,889 --> 00:14:55,459
vulnerabilities that bring back memories

00:14:53,089 --> 00:14:59,089
from the 1990s and enable remote code

00:14:55,459 --> 00:15:00,440
execution that's 100% reliable it's not

00:14:59,089 --> 00:15:04,370
really what you want to have said about

00:15:00,440 --> 00:15:05,329
your product or your firmware so so that

00:15:04,370 --> 00:15:06,769
that's you know some of the

00:15:05,329 --> 00:15:09,199
vulnerabilities there's also been some

00:15:06,769 --> 00:15:10,850
other BMC news in the past 12 months so

00:15:09,199 --> 00:15:14,120
there was this Bloomberg article where

00:15:10,850 --> 00:15:15,829
they they mentioned that that they had

00:15:14,120 --> 00:15:17,420
they they wrote an article saying that

00:15:15,829 --> 00:15:19,930
they knew about an implant that it

00:15:17,420 --> 00:15:22,010
happens that would take over your BMC's

00:15:19,930 --> 00:15:24,470
that was a bit of an interesting article

00:15:22,010 --> 00:15:26,079
it got refuted come talk to me about

00:15:24,470 --> 00:15:29,149
that if you want my opinion on that one

00:15:26,079 --> 00:15:31,190
and then in addition to all these kind

00:15:29,149 --> 00:15:33,319
of headline issues it's another embedded

00:15:31,190 --> 00:15:35,240
embedded software device and like I

00:15:33,319 --> 00:15:36,709
learn better software devices it follows

00:15:35,240 --> 00:15:38,240
horrible security practices as

00:15:36,709 --> 00:15:40,970
hard-coded passwords and never get

00:15:38,240 --> 00:15:43,519
changed outdated libraries a lack of

00:15:40,970 --> 00:15:45,529
real hardening focus unlike say our

00:15:43,519 --> 00:15:46,790
smartphones where where are the

00:15:45,529 --> 00:15:48,620
technology companies that produce them

00:15:46,790 --> 00:15:51,290
have spent a lot of time on Linux kernel

00:15:48,620 --> 00:15:53,420
security and user space security VMC's

00:15:51,290 --> 00:15:58,639
and and other embedded software devices

00:15:53,420 --> 00:15:59,720
haven't had that same focus so so that's

00:15:58,639 --> 00:16:04,430
kind of the lay of the land in

00:15:59,720 --> 00:16:06,740
vulnerabilities for the MCS so getting a

00:16:04,430 --> 00:16:08,509
bit closer to the point what's that

00:16:06,740 --> 00:16:10,100
threat model for B and C what are we

00:16:08,509 --> 00:16:13,579
what are we worried about when we've got

00:16:10,100 --> 00:16:15,439
a B and C here so a BMC should be

00:16:13,579 --> 00:16:18,620
secured against unauthorized access from

00:16:15,439 --> 00:16:20,130
the host you may debate this you may say

00:16:18,620 --> 00:16:22,260
well I have root on my house

00:16:20,130 --> 00:16:25,020
update the firmware on the BMC but there

00:16:22,260 --> 00:16:26,400
are some circumstances where you want to

00:16:25,020 --> 00:16:28,590
you know it's put these in separate

00:16:26,400 --> 00:16:30,300
fluish domains yes I'm giving you access

00:16:28,590 --> 00:16:32,190
to my host but I'm not giving you access

00:16:30,300 --> 00:16:34,970
to the BMC the BMC is on the management

00:16:32,190 --> 00:16:37,470
network it's what I use to verify that

00:16:34,970 --> 00:16:39,750
the firmware is all ok so I don't want

00:16:37,470 --> 00:16:41,040
to be playing with the BMC an example of

00:16:39,750 --> 00:16:42,720
that might be a bare-metal hosting

00:16:41,040 --> 00:16:45,510
providers someone that gives you access

00:16:42,720 --> 00:16:47,670
to root on the machine but isn't giving

00:16:45,510 --> 00:16:51,690
you access to their entire data center

00:16:47,670 --> 00:16:53,520
theory and so it's like I said VMC's has

00:16:51,690 --> 00:16:55,260
secured a hard disk you on the network

00:16:53,520 --> 00:16:56,700
so generally we're placing on some kind

00:16:55,260 --> 00:16:58,380
of segment management network you know

00:16:56,700 --> 00:17:02,010
we've kind of given up that battle it's

00:16:58,380 --> 00:17:04,230
just some extent and so because of this

00:17:02,010 --> 00:17:06,089
a reinstall of the hosts should clean

00:17:04,230 --> 00:17:08,400
the machine that that's that's at the

00:17:06,089 --> 00:17:09,870
premise of of kind of a BMC security and

00:17:08,400 --> 00:17:13,410
if we're not in that place that's on

00:17:09,870 --> 00:17:16,199
this so now that we've kind of

00:17:13,410 --> 00:17:18,150
established what a BMC is and what

00:17:16,199 --> 00:17:19,890
functions which provide and what can we

00:17:18,150 --> 00:17:21,240
expect from them securely let's delve a

00:17:19,890 --> 00:17:23,370
little bit more into if you're a

00:17:21,240 --> 00:17:25,079
firmware engineer designing a system

00:17:23,370 --> 00:17:27,360
what it would look like what parts the

00:17:25,079 --> 00:17:30,030
BMC are going to be using and how they

00:17:27,360 --> 00:17:31,800
all connect together this might get a

00:17:30,030 --> 00:17:32,940
bit involved feel free to call that

00:17:31,800 --> 00:17:37,290
questions if there's something you like

00:17:32,940 --> 00:17:38,730
me to clarify as we go as I said before

00:17:37,290 --> 00:17:41,370
we've got these two main connections

00:17:38,730 --> 00:17:43,290
between the host and the BMC is the PCI

00:17:41,370 --> 00:17:45,990
interface and the LPC we're gonna focus

00:17:43,290 --> 00:17:47,820
on LPC today I'm going to blow a slide

00:17:45,990 --> 00:17:49,590
about PCI that we can talk about if we

00:17:47,820 --> 00:17:53,430
get to it but let's focus on help you

00:17:49,590 --> 00:17:54,840
see for now so as the the system

00:17:53,430 --> 00:17:56,340
integrator we've decided to use that

00:17:54,840 --> 00:17:59,040
interface to communicate between the BMC

00:17:56,340 --> 00:18:01,530
in the host so we're sending out IPMI

00:17:59,040 --> 00:18:03,660
messages over bt between the ufi

00:18:01,530 --> 00:18:07,760
firmware and the BMC where we're loading

00:18:03,660 --> 00:18:07,760
that firmware and we're using the UART

00:18:07,820 --> 00:18:14,730
so the LPC interface itself is kind of

00:18:11,940 --> 00:18:17,010
to to address spaces to collections of

00:18:14,730 --> 00:18:18,600
devices one is the i/o address space so

00:18:17,010 --> 00:18:21,750
this is where our virtual eyes you are

00:18:18,600 --> 00:18:23,430
at bt device they often have some kind

00:18:21,750 --> 00:18:28,320
of mailbox interface for for

00:18:23,430 --> 00:18:30,300
communicating backwards and forth and in

00:18:28,320 --> 00:18:33,300
addition we have this distinct or the

00:18:30,300 --> 00:18:34,170
super i/o device which is a bit of a bit

00:18:33,300 --> 00:18:35,280
legacy ish

00:18:34,170 --> 00:18:37,890
I was talking a little bit more about

00:18:35,280 --> 00:18:39,990
that at the moment that's the LPC

00:18:37,890 --> 00:18:42,060
interface the other interface is the

00:18:39,990 --> 00:18:44,310
firmware mapping so this lets us map

00:18:42,060 --> 00:18:45,990
some of the BMC's address space into the

00:18:44,310 --> 00:18:47,850
hosts address space via the OPC

00:18:45,990 --> 00:18:48,930
interface probably pretty important that

00:18:47,850 --> 00:18:50,730
you're pointing at the right thing on

00:18:48,930 --> 00:18:52,560
the BMC if you happen to point at kernel

00:18:50,730 --> 00:18:54,450
memory you've got read/write access to

00:18:52,560 --> 00:18:55,920
the BMC's kernel memory she accidentally

00:18:54,450 --> 00:18:57,690
pointed to the register space you can

00:18:55,920 --> 00:18:59,910
reconfigure your BMC and do nasty things

00:18:57,690 --> 00:19:03,360
to it so it's important you pointed that

00:18:59,910 --> 00:19:05,430
phoneless mapping at the location say in

00:19:03,360 --> 00:19:07,320
RAM or at the flash controller whether

00:19:05,430 --> 00:19:08,790
the BMC or birth sorry with a host

00:19:07,320 --> 00:19:11,010
firmware is living so when the host

00:19:08,790 --> 00:19:12,870
access is over the LPC bus into the

00:19:11,010 --> 00:19:16,380
bmc's address space it's talking the

00:19:12,870 --> 00:19:18,570
right thing so that's how the host reads

00:19:16,380 --> 00:19:19,890
the bios it sits there and does LPC

00:19:18,570 --> 00:19:22,730
firmware cycles over this Elpis

00:19:19,890 --> 00:19:24,900
interface and reads data out of the BMC

00:19:22,730 --> 00:19:27,240
depending on on the way we've integrated

00:19:24,900 --> 00:19:29,550
the system you might map the entire

00:19:27,240 --> 00:19:31,860
firmware into that address space or you

00:19:29,550 --> 00:19:33,330
might map just chunks at a time if

00:19:31,860 --> 00:19:34,950
you've only making mapping chunks at a

00:19:33,330 --> 00:19:36,600
time one of the important details there

00:19:34,950 --> 00:19:39,360
is the host can't control where this

00:19:36,600 --> 00:19:40,590
window is the BMC and controls so you

00:19:39,360 --> 00:19:42,930
have to have some kind of sideband

00:19:40,590 --> 00:19:45,870
interface to read and steer this mapping

00:19:42,930 --> 00:19:47,010
you might use IPMI or the mailbox or

00:19:45,870 --> 00:19:49,950
something like this to steer that

00:19:47,010 --> 00:19:52,680
mapping this this mapping is read/write

00:19:49,950 --> 00:19:54,660
so we can use it to update the BIOS we

00:19:52,680 --> 00:19:56,640
can also use it for some kind of NVRAM

00:19:54,660 --> 00:19:58,500
or kind of see more settings so when you

00:19:56,640 --> 00:20:00,330
change settings in your BIOS or any

00:19:58,500 --> 00:20:03,570
other low-level settings you can write

00:20:00,330 --> 00:20:06,240
the data into the BMC and so that's

00:20:03,570 --> 00:20:07,890
that's the the firmware mapping it's the

00:20:06,240 --> 00:20:09,750
second of the two address spaces we

00:20:07,890 --> 00:20:12,960
haven't me obviously was going a little

00:20:09,750 --> 00:20:15,860
bit more into that super i/o device the

00:20:12,960 --> 00:20:18,030
the picture here is from Intel's LPC

00:20:15,860 --> 00:20:21,420
specification that this Juke was talking

00:20:18,030 --> 00:20:25,500
about this morning as he was saying that

00:20:21,420 --> 00:20:28,320
it's kind of a nice of us packaged into

00:20:25,500 --> 00:20:32,160
it this kind of more modern slow way LPC

00:20:28,320 --> 00:20:34,290
interface and back in the day we've done

00:20:32,160 --> 00:20:36,360
an x86 system you might have the flash

00:20:34,290 --> 00:20:39,510
sitting on the OPC bus super o device

00:20:36,360 --> 00:20:41,310
some kind of microcontroller that's all

00:20:39,510 --> 00:20:43,440
packaged up into the BMC these days so

00:20:41,310 --> 00:20:45,960
we've got the one chip that contains all

00:20:43,440 --> 00:20:49,380
that functionality on the LPC bus in 1b

00:20:45,960 --> 00:20:51,360
Sealand the interesting thing about

00:20:49,380 --> 00:20:53,220
super i/o device is it's commonly used

00:20:51,360 --> 00:20:55,799
to configure all those other virtual

00:20:53,220 --> 00:20:58,140
peripherals that live on the BMC's also

00:20:55,799 --> 00:21:00,870
on the LPC address space so where you

00:20:58,140 --> 00:21:03,240
are appears any other settings that you

00:21:00,870 --> 00:21:05,700
are has like the IQ number let's get pro

00:21:03,240 --> 00:21:10,289
that gets programmed by this super arrow

00:21:05,700 --> 00:21:14,399
device interestingly it also has this

00:21:10,289 --> 00:21:16,140
this bridge for kinda bug purposes where

00:21:14,399 --> 00:21:18,090
it can read right into the bmc's address

00:21:16,140 --> 00:21:24,929
space over the super arrow device it's

00:21:18,090 --> 00:21:29,370
not gonna be about that and sec so just

00:21:24,929 --> 00:21:31,710
as a quick refresher I've got this LPC

00:21:29,370 --> 00:21:34,770
interface we need to have a bunch of

00:21:31,710 --> 00:21:36,390
devices enabled on it otherwise we can't

00:21:34,770 --> 00:21:42,750
talk the BMC to ask it to load our

00:21:36,390 --> 00:21:44,010
firmware and yeah so that's where we're

00:21:42,750 --> 00:21:46,470
at with with booting over the obviously

00:21:44,010 --> 00:21:48,020
interface so what could possibly go

00:21:46,470 --> 00:21:50,730
wrong

00:21:48,020 --> 00:21:52,740
so so the configuration of all these

00:21:50,730 --> 00:21:54,690
devices gets a bit hairy we've got lots

00:21:52,740 --> 00:21:59,220
of different devices packaged up into

00:21:54,690 --> 00:22:00,179
the this address space it takes careful

00:21:59,220 --> 00:22:02,190
reading the data sheet to make sure

00:22:00,179 --> 00:22:04,890
you've considered all of them and and

00:22:02,190 --> 00:22:07,350
have covered all of them but this slide

00:22:04,890 --> 00:22:09,270
kind of describes we've got the BMC own

00:22:07,350 --> 00:22:11,490
configuration so the BMC owns where that

00:22:09,270 --> 00:22:13,230
firmware mapping is it has the read

00:22:11,490 --> 00:22:15,000
controls those registers that say the

00:22:13,230 --> 00:22:16,169
firmware mappings pointing here has a

00:22:15,000 --> 00:22:21,270
nice little chunk of RAM where I've

00:22:16,169 --> 00:22:24,960
loaded my Wi-Fi UFO binary payload so

00:22:21,270 --> 00:22:28,049
that's all good the other devices are

00:22:24,960 --> 00:22:30,270
programmed from the host so where the

00:22:28,049 --> 00:22:32,610
UART lives where the BT device lives the

00:22:30,270 --> 00:22:35,010
the host firmware gets to decide where

00:22:32,610 --> 00:22:39,659
it's going to put those so the BMC

00:22:35,010 --> 00:22:41,279
controls access to BMC resources and the

00:22:39,659 --> 00:22:44,580
host controls access to the host

00:22:41,279 --> 00:22:46,649
resources which would be all fine but if

00:22:44,580 --> 00:22:48,149
we don't trust the host sorry

00:22:46,649 --> 00:22:50,010
that would be all fine if we didn't have

00:22:48,149 --> 00:22:52,230
this back door into the BMC's address

00:22:50,010 --> 00:22:55,770
space this super o bridge let's the hook

00:22:52,230 --> 00:22:57,289
let's the host read and write any part

00:22:55,770 --> 00:22:59,370
of the bmc's address space and

00:22:57,289 --> 00:22:59,789
unfortunately the host controls to

00:22:59,370 --> 00:23:02,100
configure

00:22:59,789 --> 00:23:04,470
of that device so if you've accidentally

00:23:02,100 --> 00:23:07,289
left on as the firmware programmer if

00:23:04,470 --> 00:23:08,669
we've left on this super arrow device we

00:23:07,289 --> 00:23:13,499
can read right to arbitrary beams at

00:23:08,669 --> 00:23:14,309
address space and that's not ideal do

00:23:13,499 --> 00:23:21,499
you have any questions at this point

00:23:14,309 --> 00:23:24,710
very real quick demo no sorry

00:23:21,499 --> 00:23:27,929
why yeah why is it so complex

00:23:24,710 --> 00:23:29,899
lots of legacy is is the best answer

00:23:27,929 --> 00:23:32,279
I've managed to come up with it's um

00:23:29,899 --> 00:23:34,379
there there's a lot going on it's very

00:23:32,279 --> 00:23:36,359
flexible that they they don't take any

00:23:34,379 --> 00:23:39,269
hardware out of a BMC from what I can

00:23:36,359 --> 00:23:40,769
understand this add new bits in so as a

00:23:39,269 --> 00:23:42,479
system integrator if you really want

00:23:40,769 --> 00:23:43,919
this new feature in the new BMC you say

00:23:42,479 --> 00:23:46,609
please sir can I have this bit of

00:23:43,919 --> 00:23:49,259
silicon in my new tube and then ours and

00:23:46,609 --> 00:23:53,159
and so you end up with all this stuff

00:23:49,259 --> 00:23:54,809
going on I imagine what the the silicon

00:23:53,159 --> 00:23:56,249
design of the BMC is intend is that you

00:23:54,809 --> 00:24:04,919
go and turn off all those old bits that

00:23:56,249 --> 00:24:07,159
you don't want maybe so yeah let's let's

00:24:04,919 --> 00:24:07,159
do it again

00:24:08,330 --> 00:24:14,450
so this isn't a live demo but uh I'm

00:24:12,350 --> 00:24:15,650
just gonna pause this video at certain

00:24:14,450 --> 00:24:20,320
points to kind of explain what's going

00:24:15,650 --> 00:24:22,790
on so we're now on the host machine and

00:24:20,320 --> 00:24:25,880
the host has a BMC attached to it

00:24:22,790 --> 00:24:27,830
we have RIT on the host machine so we

00:24:25,880 --> 00:24:32,000
can read right to - anywhere on the LBC

00:24:27,830 --> 00:24:34,370
address space and the BMC itself has all

00:24:32,000 --> 00:24:37,070
these you arts one of those you arts is

00:24:34,370 --> 00:24:40,370
is the thing that lets the developer the

00:24:37,070 --> 00:24:41,600
BMC do their development so it's got to

00:24:40,370 --> 00:24:43,340
get e running on it something you can

00:24:41,600 --> 00:24:45,140
type a password log into it the other

00:24:43,340 --> 00:24:46,580
you art is the one that the kernel

00:24:45,140 --> 00:24:49,880
messages come down over the OPC

00:24:46,580 --> 00:24:51,320
interface and so the host has access to

00:24:49,880 --> 00:24:54,200
that it can give them write characters

00:24:51,320 --> 00:24:55,580
to that and there's that MUX inside the

00:24:54,200 --> 00:24:57,710
BMC that lets you kind of play around

00:24:55,580 --> 00:24:59,870
with their where they all are and and on

00:24:57,710 --> 00:25:02,150
this system the port firmware developers

00:24:59,870 --> 00:25:05,660
forgotten to close that super bridge off

00:25:02,150 --> 00:25:07,460
so from the host we can reprogram the

00:25:05,660 --> 00:25:12,890
devices inside the BMC and see what

00:25:07,460 --> 00:25:14,870
happens so we run sudo so this programs

00:25:12,890 --> 00:25:18,170
now zoom there and going oh look we've

00:25:14,870 --> 00:25:20,060
got a super o device that's cool we can

00:25:18,170 --> 00:25:22,490
use that to poke around inside the BMC

00:25:20,060 --> 00:25:24,440
and change the configuration of the UART

00:25:22,490 --> 00:25:26,180
bridge so now the yacht bridge that has

00:25:24,440 --> 00:25:28,580
the Getty running on it is connected to

00:25:26,180 --> 00:25:31,790
the virtual you are the hostess and the

00:25:28,580 --> 00:25:33,260
host can type login into that and if it

00:25:31,790 --> 00:25:39,730
knows the password it now has the BMC

00:25:33,260 --> 00:25:39,730
console and subtypes in the password

00:25:42,110 --> 00:25:44,980
thinking

00:25:46,250 --> 00:25:49,150
thinking

00:25:49,200 --> 00:25:53,010
all right it's logged into the BMC now

00:25:51,990 --> 00:25:54,720
it's launching and getting on a

00:25:53,010 --> 00:25:57,720
different UART and remapping the you

00:25:54,720 --> 00:26:02,519
arts again so now we've left the old BMC

00:25:57,720 --> 00:26:03,779
developers you are alone and remaps the

00:26:02,519 --> 00:26:07,500
what this would be the host console you

00:26:03,779 --> 00:26:11,010
are into the host for the new getty so

00:26:07,500 --> 00:26:14,220
oops that last little bit you saw there

00:26:11,010 --> 00:26:16,649
was reading at the kernel version of the

00:26:14,220 --> 00:26:19,409
BMC sorry I can't realize it wouldn't

00:26:16,649 --> 00:26:21,179
let it play so that this is this is one

00:26:19,409 --> 00:26:23,309
of the things you could do remember

00:26:21,179 --> 00:26:25,049
we've got arbitrary readwrite access to

00:26:23,309 --> 00:26:26,070
the entire BMC's address space and what

00:26:25,049 --> 00:26:32,399
happens if we don't know what the

00:26:26,070 --> 00:26:34,559
password is whoops that's not a video so

00:26:32,399 --> 00:26:36,029
like I said we can read the entire bmc's

00:26:34,559 --> 00:26:39,090
address space so we can look through and

00:26:36,029 --> 00:26:41,250
find where the UTC shadow entries for

00:26:39,090 --> 00:26:44,610
the VMC's root password and replace it

00:26:41,250 --> 00:26:48,960
with a password we know do you know that

00:26:44,610 --> 00:26:50,970
the password of owned like pwn 3d the

00:26:48,960 --> 00:26:55,889
hash ends in fuzz which I found quite

00:26:50,970 --> 00:26:57,419
amusing suddenly have to admit here is I

00:26:55,889 --> 00:26:59,610
didn't develop this software so lots of

00:26:57,419 --> 00:27:02,399
this hard work the discovery of the

00:26:59,610 --> 00:27:04,260
vulnerability and lots of the hard work

00:27:02,399 --> 00:27:08,070
in reacting for ER connecting our

00:27:04,260 --> 00:27:09,720
firmware to to not be vulnerable and and

00:27:08,070 --> 00:27:11,970
then coordinating with with other people

00:27:09,720 --> 00:27:14,399
to disclose the vulnerability it's being

00:27:11,970 --> 00:27:15,779
done my colleague Andrew Jeffery it

00:27:14,399 --> 00:27:16,679
couldn't be here because here is the

00:27:15,779 --> 00:27:23,220
second child yesterday

00:27:16,679 --> 00:27:24,720
so Andrew sorry to steal his thunder I'm

00:27:23,220 --> 00:27:27,510
sure he'll get plenty of credit in the

00:27:24,720 --> 00:27:30,090
in due course so so that's been my

00:27:27,510 --> 00:27:31,950
little overview of of kind of how the

00:27:30,090 --> 00:27:35,130
BMC works and what goes on inside of it

00:27:31,950 --> 00:27:38,309
to make this go away you need to turn

00:27:35,130 --> 00:27:40,169
off the super arrow device where this

00:27:38,309 --> 00:27:42,000
gets complicated is that if you turn off

00:27:40,169 --> 00:27:43,799
the super o device you no longer are

00:27:42,000 --> 00:27:45,690
able to enable some of these peripherals

00:27:43,799 --> 00:27:47,010
that live on the LPC bus so if your

00:27:45,690 --> 00:27:48,269
firmware depends on those Maori

00:27:47,010 --> 00:27:50,730
architecting the way your firmware

00:27:48,269 --> 00:27:53,370
communicate communicate to the BMC to do

00:27:50,730 --> 00:27:54,960
its thing and so depending on on how

00:27:53,370 --> 00:27:56,549
your firm has been architected both from

00:27:54,960 --> 00:27:57,690
the BMC and the host side this could

00:27:56,549 --> 00:27:59,330
mean a lot of work it could mean a small

00:27:57,690 --> 00:28:00,920
amount of work

00:27:59,330 --> 00:28:03,690
[Music]

00:28:00,920 --> 00:28:06,420
yeah so so the kind of the take home

00:28:03,690 --> 00:28:08,100
here is is read that data sheet and and

00:28:06,420 --> 00:28:11,610
understand all the hardware inside your

00:28:08,100 --> 00:28:14,400
system as Matthew said firmware is kind

00:28:11,610 --> 00:28:16,860
of this this thing that we don't have

00:28:14,400 --> 00:28:18,960
much insight into but as as more of it

00:28:16,860 --> 00:28:20,850
becomes open-source we learn more about

00:28:18,960 --> 00:28:22,880
what's inside our computers and it kind

00:28:20,850 --> 00:28:25,110
of can gain some control again and and

00:28:22,880 --> 00:28:27,720
see what exactly is going on inside of

00:28:25,110 --> 00:28:29,460
it as you might have noticed this talk

00:28:27,720 --> 00:28:32,580
might have been a little bit glossing

00:28:29,460 --> 00:28:34,650
over the details we're we're still

00:28:32,580 --> 00:28:36,120
working on the whole disclosure process

00:28:34,650 --> 00:28:37,710
and everything is happening there's been

00:28:36,120 --> 00:28:39,120
a bit of action on the Internet today if

00:28:37,710 --> 00:28:41,130
you do some googling you might find some

00:28:39,120 --> 00:28:44,580
more details and I'm happy to talk about

00:28:41,130 --> 00:28:47,610
that dress the conference but just not

00:28:44,580 --> 00:28:55,080
during my talk here today so thanks for

00:28:47,610 --> 00:29:00,570
listening everyone we've certainly got

00:28:55,080 --> 00:29:02,810
some time for questions does I'll repeat

00:29:00,570 --> 00:29:02,810
it yeah

00:29:08,549 --> 00:29:13,369
search since then we could

00:29:22,409 --> 00:29:26,520
so someone's just described that to take

00:29:24,809 --> 00:29:28,340
the BMC off of his local area network

00:29:26,520 --> 00:29:31,080
he's put it behind raspberry-pi

00:29:28,340 --> 00:29:32,549
your BMC is still this computer that's

00:29:31,080 --> 00:29:34,380
it's highly interconnected with the host

00:29:32,549 --> 00:29:35,429
computer so I guess it depends what

00:29:34,380 --> 00:29:37,799
you're worrying about if you're worried

00:29:35,429 --> 00:29:39,659
that someone has root on if someone has

00:29:37,799 --> 00:29:42,480
root on your host machine they can

00:29:39,659 --> 00:29:44,190
manipulate the BMC depending on what's

00:29:42,480 --> 00:29:46,289
going on maybe that's the norm you know

00:29:44,190 --> 00:29:47,880
generally we have written our machines

00:29:46,289 --> 00:29:50,730
and we can update the firmware so maybe

00:29:47,880 --> 00:29:52,049
this isn't a big issue but if you have

00:29:50,730 --> 00:29:54,000
configured that if you expect the

00:29:52,049 --> 00:29:56,700
machine to not be updatable by the

00:29:54,000 --> 00:29:58,890
person that has written on the host then

00:29:56,700 --> 00:30:05,240
then you need to look into what's going

00:29:58,890 --> 00:30:13,610
on any other questions

00:30:05,240 --> 00:30:18,260
rusty if someone gets ruined your

00:30:13,610 --> 00:30:19,970
machine how screw to you oh I guess no

00:30:18,260 --> 00:30:21,110
it's not just a BMC issue if they have

00:30:19,970 --> 00:30:23,090
written machine they're probably gonna

00:30:21,110 --> 00:30:24,350
be update all kinds of firmware anything

00:30:23,090 --> 00:30:27,289
that's writable that's attached to your

00:30:24,350 --> 00:30:29,390
computer they can they can change what

00:30:27,289 --> 00:30:31,370
we lack in that current systems is a way

00:30:29,390 --> 00:30:32,990
to verify what the firmware is that's

00:30:31,370 --> 00:30:35,090
running on all these different parts so

00:30:32,990 --> 00:30:36,409
we have our BMC's our computers also

00:30:35,090 --> 00:30:37,970
have lots of little eeproms laying

00:30:36,409 --> 00:30:41,419
around that describe the hardware it's

00:30:37,970 --> 00:30:43,610
in our computers we don't have a good

00:30:41,419 --> 00:30:46,220
story on how to how to authenticate that

00:30:43,610 --> 00:30:48,140
these are running what we expect and and

00:30:46,220 --> 00:30:49,640
even if we we don't trust what's

00:30:48,140 --> 00:30:52,370
learning and their how to even replace

00:30:49,640 --> 00:30:53,779
them can be hard in some cases so yeah

00:30:52,370 --> 00:30:57,760
that's that's a work in progress

00:30:53,779 --> 00:30:57,760
definitely David

00:31:11,160 --> 00:31:16,450
yes to David asked the BMC's on some

00:31:14,830 --> 00:31:17,620
kind of management network what else is

00:31:16,450 --> 00:31:20,380
on that network and I guess it's really

00:31:17,620 --> 00:31:22,600
gonna depend on the deployment what I

00:31:20,380 --> 00:31:24,580
worry is that the advice was put your

00:31:22,600 --> 00:31:26,530
BMC's on a management network maybe

00:31:24,580 --> 00:31:28,570
that's your internal data center LAN and

00:31:26,530 --> 00:31:31,230
in which case being on that network is

00:31:28,570 --> 00:31:33,580
not good

00:31:31,230 --> 00:31:36,220
maybe you've deployed it such that your

00:31:33,580 --> 00:31:38,500
BMC's are on their own isolated network

00:31:36,220 --> 00:31:41,010
and so you can only give it to other

00:31:38,500 --> 00:31:44,530
BMC's that's not great either though I

00:31:41,010 --> 00:31:46,570
know that that some deployments of DMC's

00:31:44,530 --> 00:31:49,030
don't enable any networking on the BMC

00:31:46,570 --> 00:31:50,440
itself they treat it as a dumb

00:31:49,030 --> 00:31:51,730
microcontroller it's quite an

00:31:50,440 --> 00:31:53,620
intelligent microcontroller that they

00:31:51,730 --> 00:31:55,480
create is a dumb machine that it can't

00:31:53,620 --> 00:31:57,880
be accessed any other way than in band

00:31:55,480 --> 00:32:01,170
through the host and maybe that's a

00:31:57,880 --> 00:32:01,170
model that other people will move to

00:32:08,770 --> 00:32:14,950
yes so it's one of the challenges as if

00:32:11,110 --> 00:32:17,260
using NCSI is there's only one cable to

00:32:14,950 --> 00:32:19,570
plug in and so you can you can VLAN it

00:32:17,260 --> 00:32:21,309
you can logically separate it across but

00:32:19,570 --> 00:32:22,960
you're relying on the network card

00:32:21,309 --> 00:32:24,400
firmware to do the right thing and my

00:32:22,960 --> 00:32:27,809
advice is don't rely on network on

00:32:24,400 --> 00:32:27,809
firmware I Sam

00:32:27,970 --> 00:32:33,309
yeah network cards have lots of firmware

00:32:30,550 --> 00:32:38,700
in them and I imagine the story is not

00:32:33,309 --> 00:32:38,700
great there Adam

00:32:50,360 --> 00:33:00,960
Adam asked how how widespread is this

00:32:53,880 --> 00:33:04,950
it only affects some systems I direct

00:33:00,960 --> 00:33:10,650
you to your vendor yeah I'm not gonna

00:33:04,950 --> 00:33:12,030
talk about that right now sorry it in a

00:33:10,650 --> 00:33:14,370
general sense it depends on how your

00:33:12,030 --> 00:33:15,840
system set up is one of the things about

00:33:14,370 --> 00:33:18,480
this and there's someone else's question

00:33:15,840 --> 00:33:19,980
in Matthew's talk is if I'm running my

00:33:18,480 --> 00:33:21,960
if I'm giving access to someone to my

00:33:19,980 --> 00:33:24,270
machine through a KPM hosted suite

00:33:21,960 --> 00:33:27,180
virtualization am i projected announces

00:33:24,270 --> 00:33:30,420
yes so this LPC interface is not

00:33:27,180 --> 00:33:33,000
accessible or generally exposed via KVM

00:33:30,420 --> 00:33:35,610
Avaya by kumys so you're kind of you're

00:33:33,000 --> 00:33:36,930
safe in that respect and I imagine most

00:33:35,610 --> 00:33:38,610
of the cases we are giving someone else

00:33:36,930 --> 00:33:40,320
access to your computer that you don't

00:33:38,610 --> 00:33:43,980
trust it's through some kind of

00:33:40,320 --> 00:33:45,630
virtualization so so it my hunch is that

00:33:43,980 --> 00:33:48,810
it's not as bad as it could be but I am

00:33:45,630 --> 00:33:50,220
ready to be very wrong someone has a

00:33:48,810 --> 00:33:53,010
quote from me about half an hour ago

00:33:50,220 --> 00:33:54,480
saying I don't think this is will be as

00:33:53,010 --> 00:33:59,220
bad as people are saying it is and

00:33:54,480 --> 00:34:02,330
they're like sorry that's another

00:33:59,220 --> 00:34:02,330
question something Georgie

00:34:17,200 --> 00:34:20,470
it's a great question so join us it

00:34:19,299 --> 00:34:22,359
sounds like discovery has come about

00:34:20,470 --> 00:34:23,349
because of the open BMC project and you

00:34:22,359 --> 00:34:25,750
think people have been looking at

00:34:23,349 --> 00:34:27,549
otherwise I don't think it would have

00:34:25,750 --> 00:34:30,369
seen as much light as it has without the

00:34:27,549 --> 00:34:32,289
open source project because it was an

00:34:30,369 --> 00:34:34,569
open source project we've had a bit of a

00:34:32,289 --> 00:34:37,419
duty of care to everyone else using the

00:34:34,569 --> 00:34:40,059
BMC s to know about this whereas if I

00:34:37,419 --> 00:34:42,279
was working at a BIOS vendor and I

00:34:40,059 --> 00:34:44,200
discovered this we'd obviously patch all

00:34:42,279 --> 00:34:46,029
of our systems and maybe there'd be some

00:34:44,200 --> 00:34:48,250
kind of CDE saying update your machines

00:34:46,029 --> 00:34:50,109
but it wouldn't be a if you're running

00:34:48,250 --> 00:34:53,619
this hardware check your phone within

00:34:50,109 --> 00:34:55,450
the kind of level of panic so yeah I

00:34:53,619 --> 00:34:58,480
think that open-source kind of project

00:34:55,450 --> 00:35:00,549
has shown a lot of light on it I

00:34:58,480 --> 00:35:01,869
wouldn't be surprised if someone's got a

00:35:00,549 --> 00:35:04,809
really good talk to give next year about

00:35:01,869 --> 00:35:07,480
the next thing we find as well you know

00:35:04,809 --> 00:35:08,859
that the open BMC project is still still

00:35:07,480 --> 00:35:10,029
ramping up you know we've got most of

00:35:08,859 --> 00:35:12,369
the kernel code upstream but not all of

00:35:10,029 --> 00:35:14,799
it there's parts of the system on chip

00:35:12,369 --> 00:35:16,420
that we're still writing drivers for

00:35:14,799 --> 00:35:18,400
that people haven't built computers with

00:35:16,420 --> 00:35:19,539
yet and at some point they might and in

00:35:18,400 --> 00:35:22,119
which case work oh look here's another

00:35:19,539 --> 00:35:23,259
interesting thing speaking about

00:35:22,119 --> 00:35:25,839
interesting things I just quickly with

00:35:23,259 --> 00:35:28,859
this slide for another time so there's

00:35:25,839 --> 00:35:28,859
there's two interfaces

00:35:29,270 --> 00:35:33,530
the other ones the PCI interface and

00:35:31,100 --> 00:35:35,540
it's it's just as interesting as the OPC

00:35:33,530 --> 00:35:37,670
interface so you've got a bunch of kind

00:35:35,540 --> 00:35:41,090
of wasteful access to BMC there's this

00:35:37,670 --> 00:35:42,980
VGA buffer that's constrained to a small

00:35:41,090 --> 00:35:44,600
chunk of the BMC and that's where the

00:35:42,980 --> 00:35:47,570
graphics device writes its frame buffer

00:35:44,600 --> 00:35:49,040
to you've also got this other steerable

00:35:47,570 --> 00:35:53,690
window that can point sit anywhere in

00:35:49,040 --> 00:35:55,220
the BMC and game over again I won't go

00:35:53,690 --> 00:35:58,010
into that one too much detail either but

00:35:55,220 --> 00:35:59,840
that the BMC can configure very coarse

00:35:58,010 --> 00:36:01,880
windows to protect chunks of address

00:35:59,840 --> 00:36:03,500
space but it it can't protect all of it

00:36:01,880 --> 00:36:07,550
so if this has been left enabled on your

00:36:03,500 --> 00:36:10,850
BMC then just like the LPC back debug

00:36:07,550 --> 00:36:12,250
interface it can be used to take over

00:36:10,850 --> 00:36:18,470
the BMC as well

00:36:12,250 --> 00:36:23,030
Oliver you can reprogram it but I from

00:36:18,470 --> 00:36:24,800
BMC on it know Oliver asked once I

00:36:23,030 --> 00:36:26,930
compromise the DMC but to do that that's

00:36:24,800 --> 00:36:30,200
not my domain you can do anything you

00:36:26,930 --> 00:36:32,240
like I guess I guess maybe maybe one if

00:36:30,200 --> 00:36:34,220
you're a bad guy jumping to someone

00:36:32,240 --> 00:36:35,570
else's data center you could sit on

00:36:34,220 --> 00:36:40,540
there and wait till someone else rinse

00:36:35,570 --> 00:36:40,540
the computer read and write their memory

00:36:44,270 --> 00:36:51,619
you're that PCI guy do you want to tell

00:36:46,220 --> 00:36:52,910
me how it works hmm watch this place I'm

00:36:51,619 --> 00:36:56,710
sure some people have some more details

00:36:52,910 --> 00:36:56,710
on this one garage Stewart's blog

00:36:58,730 --> 00:37:01,880
[Music]

00:37:02,260 --> 00:37:08,930
let the smoke out yeah sorry to repeat

00:37:07,369 --> 00:37:10,490
the question that was out this control

00:37:08,930 --> 00:37:12,589
stem or could this be used to do

00:37:10,490 --> 00:37:14,480
something else and I imagine it could

00:37:12,589 --> 00:37:16,280
you could tell the fans to stop spinning

00:37:14,480 --> 00:37:19,510
and tell lots of current to go over

00:37:16,280 --> 00:37:19,510
there and the smoke will come round

00:37:31,170 --> 00:37:35,590
so that I think the question was could

00:37:33,940 --> 00:37:37,780
we see a situation where beams open the

00:37:35,590 --> 00:37:40,210
MC could be used on any old mining on

00:37:37,780 --> 00:37:41,680
Hardware we've got laying around that

00:37:40,210 --> 00:37:44,740
the challenge is is porting it to new

00:37:41,680 --> 00:37:46,570
system and depending on how the the

00:37:44,740 --> 00:37:47,920
system in the integrators have decided

00:37:46,570 --> 00:37:49,660
to put the system together that could be

00:37:47,920 --> 00:37:52,270
a quite easy port there might be a GPO

00:37:49,660 --> 00:37:55,890
to turn on and and your system starts

00:37:52,270 --> 00:37:58,000
booting it might be much more involved

00:37:55,890 --> 00:38:00,580
so it's a hard question to answer there

00:37:58,000 --> 00:38:02,740
I guess it's one way to qualify this is

00:38:00,580 --> 00:38:04,120
there was in the early days we only had

00:38:02,740 --> 00:38:07,450
a couple of machines implemented and

00:38:04,120 --> 00:38:08,920
there was an engineer at Google that was

00:38:07,450 --> 00:38:11,230
challenged by his boss to get a machine

00:38:08,920 --> 00:38:14,290
up and running in a week or something

00:38:11,230 --> 00:38:16,090
and 48 hours he had it booting and that

00:38:14,290 --> 00:38:18,550
was without the schematic so he was kind

00:38:16,090 --> 00:38:20,080
of guessing about how it works one of

00:38:18,550 --> 00:38:22,120
the the fun things that we've done in

00:38:20,080 --> 00:38:24,370
developing open DMC's we've quoted quite

00:38:22,120 --> 00:38:26,740
a good query model of the the BMC

00:38:24,370 --> 00:38:28,810
Hardware mostly for firmware development

00:38:26,740 --> 00:38:31,060
and kernel development but if you happen

00:38:28,810 --> 00:38:32,710
to get a copy of a BMC image of a

00:38:31,060 --> 00:38:34,810
working system you can load that up in

00:38:32,710 --> 00:38:36,520
this emulated environment and and see

00:38:34,810 --> 00:38:38,320
what it's doing see which GPO is that's

00:38:36,520 --> 00:38:40,120
toggling and see if that would work on

00:38:38,320 --> 00:38:41,740
your machine what will be great in the

00:38:40,120 --> 00:38:43,330
future is that we've got all these

00:38:41,740 --> 00:38:46,720
cutting things like Intel building their

00:38:43,330 --> 00:38:48,640
reference platforms out of open BMC and

00:38:46,720 --> 00:38:50,230
so at some point I imagine you'll be

00:38:48,640 --> 00:38:54,250
able to buy a machine that has opened

00:38:50,230 --> 00:39:01,920
BMC as its base and and the code will

00:38:54,250 --> 00:39:01,920
fly or they're rusty

00:39:07,780 --> 00:39:11,890
Rusty's question was do you think that

00:39:09,910 --> 00:39:14,200
this kind of stuff would drive more

00:39:11,890 --> 00:39:15,490
momentum behind open BMC certainly I

00:39:14,200 --> 00:39:18,280
mean it's definitely going to make it

00:39:15,490 --> 00:39:22,390
more visible when the the articles came

00:39:18,280 --> 00:39:25,510
out late last year it it shone more

00:39:22,390 --> 00:39:28,750
light on VMC's in general and there was

00:39:25,510 --> 00:39:30,640
I saw talk on Twitter about open BMC so

00:39:28,750 --> 00:39:37,120
yeah I hope that people will become more

00:39:30,640 --> 00:39:40,630
aware of it and use it how we got for

00:39:37,120 --> 00:39:42,490
time five minutes oh I hate the time I

00:39:40,630 --> 00:39:44,710
didn't have to rush you my bonus slide I

00:39:42,490 --> 00:39:49,690
just say another question somewhere

00:39:44,710 --> 00:40:01,230
someone else' know well we could leave

00:39:49,690 --> 00:40:01,230

YouTube URL: https://www.youtube.com/watch?v=QCVjzcKq5Pw


