Title: Clockwork: Programming with rules
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Mike O'Connor

https://2019.linux.conf.au/schedule/presentation/258/

Clockwork is a language to describe how machines should behave. It was developed specifically to reduce the risk and cost of custom programming of short-run machines without loss of flexibility. Over several decades we have built custom machines and have built control systems using a variety of technologies, including: Z80 controller boards, C++ control software under Linux and a variety of PLC's. These technologies have had their strengths and weaknesses but overall we have found that Clockwork and its associated tools has far greater re-usability and lower per-machine development overhead than anything else we have tried. The language itself is not like other programming languages and this talk is about how we program in Clockwork.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,000 --> 00:00:14,580
programming with rules okay

00:00:08,220 --> 00:00:17,850
so a number of years ago 2012 we started

00:00:14,580 --> 00:00:21,029
a project to implement a control

00:00:17,850 --> 00:00:31,560
language for the purposes of controlling

00:00:21,029 --> 00:00:34,860
machinery and we find that the

00:00:31,560 --> 00:00:38,930
complications of doing that in

00:00:34,860 --> 00:00:41,309
traditional equipment is very hard so

00:00:38,930 --> 00:00:43,410
what we had to have was the ability to

00:00:41,309 --> 00:00:46,350
talk to real Hardware mostly at

00:00:43,410 --> 00:00:50,579
industrial voltage of 24 volt a bit of

00:00:46,350 --> 00:00:52,649
4:15 three-phase that kind of thing we

00:00:50,579 --> 00:00:55,980
had to have a way of giving the humans

00:00:52,649 --> 00:00:57,780
the ability to see what was going on and

00:00:55,980 --> 00:01:00,570
we needed to be able to talk to some

00:00:57,780 --> 00:01:02,579
legacy industrial protocols like Modbus

00:01:00,570 --> 00:01:05,640
but of course we also wanted to be able

00:01:02,579 --> 00:01:07,470
to talk to things like scales and that

00:01:05,640 --> 00:01:11,670
might be rs-232 which is of course a

00:01:07,470 --> 00:01:13,680
very old protocol or just raw TCP ports

00:01:11,670 --> 00:01:17,009
for the purposes gathering scanner the

00:01:13,680 --> 00:01:19,259
way tell of scales or in our case we

00:01:17,009 --> 00:01:21,000
wanted to be able to capture images off

00:01:19,259 --> 00:01:25,740
of a camera stills and that kind of

00:01:21,000 --> 00:01:27,960
thing so um that's the beginnings of a

00:01:25,740 --> 00:01:29,780
one of our machinery that's for the

00:01:27,960 --> 00:01:32,189
purposes of sampling bales of wool

00:01:29,780 --> 00:01:36,180
you're talking about a hundred and 80

00:01:32,189 --> 00:01:40,740
kilo Bale aprox it well ranging 120 to

00:01:36,180 --> 00:01:44,310
204 kilos so you're not doing that by

00:01:40,740 --> 00:01:47,340
hand although they used to when I was a

00:01:44,310 --> 00:01:50,250
kid I actually saw that so I'm going

00:01:47,340 --> 00:01:52,320
backwards for the reason of explaining

00:01:50,250 --> 00:01:54,509
why we did this

00:01:52,320 --> 00:01:56,490
our company manufactured has been

00:01:54,509 --> 00:02:01,770
affected these machines for something 40

00:01:56,490 --> 00:02:03,180
something years you have to in the

00:02:01,770 --> 00:02:07,049
earliest machines it was electrical

00:02:03,180 --> 00:02:10,760
timers and so physical relays and very

00:02:07,049 --> 00:02:12,930
simple automation doing that then I

00:02:10,760 --> 00:02:14,150
don't remember a lot of this I was quite

00:02:12,930 --> 00:02:16,340
young but I believe

00:02:14,150 --> 00:02:18,500
was a zero ad board was called a

00:02:16,340 --> 00:02:19,760
scorpion board originally designed to

00:02:18,500 --> 00:02:22,120
believe by a gentleman called John

00:02:19,760 --> 00:02:24,260
Lankford and a lot of extra boards I

00:02:22,120 --> 00:02:27,220
don't have a photo of that of course

00:02:24,260 --> 00:02:30,709
that would have been back on analog film

00:02:27,220 --> 00:02:32,120
we designed further later on as I log 0

00:02:30,709 --> 00:02:33,230
ad board that had relays everything on

00:02:32,120 --> 00:02:35,750
I've got a picture of that and the feel

00:02:33,230 --> 00:02:40,790
a little bit into the future here and we

00:02:35,750 --> 00:02:43,180
also used early PLC's and then late 90s

00:02:40,790 --> 00:02:45,260
we did a custom based Linux solution

00:02:43,180 --> 00:02:48,680
seven-year-long meet along sorting

00:02:45,260 --> 00:02:51,139
machines of sorting valves of all that

00:02:48,680 --> 00:02:52,940
was all very hard so that's that's the

00:02:51,139 --> 00:03:02,329
board that were used for about 20 years

00:02:52,940 --> 00:03:04,340
or so so yeah so long term issues hard

00:03:02,329 --> 00:03:06,500
at hardware is hard to support over the

00:03:04,340 --> 00:03:08,060
very long time frame and if it let you

00:03:06,500 --> 00:03:12,230
if I'm not a big company that's even

00:03:08,060 --> 00:03:14,359
harder again so you then go back to the

00:03:12,230 --> 00:03:17,269
commercial and the commercial people

00:03:14,359 --> 00:03:18,470
make that hard because they want to

00:03:17,269 --> 00:03:20,510
upgrade things they want to change

00:03:18,470 --> 00:03:22,069
things their products are only forward

00:03:20,510 --> 00:03:26,180
compatible not backward compatible

00:03:22,069 --> 00:03:29,500
meaning that if I have this screen here

00:03:26,180 --> 00:03:31,940
running version one of their system and

00:03:29,500 --> 00:03:34,430
four years later they release a new one

00:03:31,940 --> 00:03:35,900
that's running version two the binary

00:03:34,430 --> 00:03:38,530
file that allowed me to create the

00:03:35,900 --> 00:03:41,930
screens for this is compatible forwards

00:03:38,530 --> 00:03:43,519
not backwards meaning that once I've

00:03:41,930 --> 00:03:45,409
upgraded I can't use it on the version

00:03:43,519 --> 00:03:47,269
one but I've got 20 machines out here

00:03:45,409 --> 00:03:49,849
they're using version one how do I keep

00:03:47,269 --> 00:03:53,239
the two things in sync I have to program

00:03:49,849 --> 00:03:55,579
in version one and expand then upgrade

00:03:53,239 --> 00:04:00,680
to version two for one machine and it

00:03:55,579 --> 00:04:01,849
becomes a total not only and a lot of

00:04:00,680 --> 00:04:04,909
the time you have to use external

00:04:01,849 --> 00:04:06,560
expertise and they don't understand what

00:04:04,909 --> 00:04:09,319
you're trying to do they're not expert

00:04:06,560 --> 00:04:14,569
in what you're trying to do and that's a

00:04:09,319 --> 00:04:17,090
big difficulty so what we did the first

00:04:14,569 --> 00:04:19,849
temple I mentioned it about the project

00:04:17,090 --> 00:04:21,889
back in the 2000s we build a solution

00:04:19,849 --> 00:04:25,370
based on Linux we brought in external

00:04:21,889 --> 00:04:27,590
programmers the end result was a

00:04:25,370 --> 00:04:29,810
solution that worked but had

00:04:27,590 --> 00:04:32,330
no future other than that project you

00:04:29,810 --> 00:04:35,330
had to write it in C++ it was

00:04:32,330 --> 00:04:39,080
complicated so we went back to PLC's

00:04:35,330 --> 00:04:42,710
again so what are our chromates we must

00:04:39,080 --> 00:04:45,139
retain control we must somehow reduce

00:04:42,710 --> 00:04:48,620
the risks to us in the purposes of

00:04:45,139 --> 00:04:51,080
developing that software the traditional

00:04:48,620 --> 00:04:52,910
method of PLC's if you're going to go

00:04:51,080 --> 00:04:55,310
for complex programs you can spend

00:04:52,910 --> 00:04:57,290
months and months and months writing it

00:04:55,310 --> 00:04:59,479
and then months and months debugging it

00:04:57,290 --> 00:05:00,740
and you can't do that if you go and then

00:04:59,479 --> 00:05:03,350
say okay I want to build a new machine

00:05:00,740 --> 00:05:05,750
but it's got 5% difference you'll spend

00:05:03,350 --> 00:05:09,139
another D month changing that program to

00:05:05,750 --> 00:05:12,290
make it work for that new machine and of

00:05:09,139 --> 00:05:16,780
course we want to reuse our code and we

00:05:12,290 --> 00:05:22,100
want version proper version control so

00:05:16,780 --> 00:05:23,570
five years ago 2012 we decided that we

00:05:22,100 --> 00:05:24,919
had to come up with a way of fixing the

00:05:23,570 --> 00:05:26,210
solution or where we're going we were

00:05:24,919 --> 00:05:27,410
not were going to go out of business we

00:05:26,210 --> 00:05:33,970
couldn't continue to do what we were

00:05:27,410 --> 00:05:38,990
doing so we needed a simple language it

00:05:33,970 --> 00:05:42,260
needed to be easy to read easy to debug

00:05:38,990 --> 00:05:44,240
easy to write so what you see in the

00:05:42,260 --> 00:05:47,510
front just here it's a very simple

00:05:44,240 --> 00:05:50,349
machine that remember it resembles the

00:05:47,510 --> 00:05:55,510
physical world so this is a light switch

00:05:50,349 --> 00:05:55,510
its states are either on or off and

00:05:56,770 --> 00:06:04,880
that's all it is so if you want other

00:06:02,750 --> 00:06:11,150
things you think about what makes

00:06:04,880 --> 00:06:11,810
something and you do that by programming

00:06:11,150 --> 00:06:14,300
out ourselves

00:06:11,810 --> 00:06:16,849
we reduce the risk we also allow for

00:06:14,300 --> 00:06:20,060
simulation this language allows us to

00:06:16,849 --> 00:06:21,919
have a file that has the configuration

00:06:20,060 --> 00:06:24,169
and a whole of other files for the code

00:06:21,919 --> 00:06:25,940
and another file for a simulation and

00:06:24,169 --> 00:06:27,440
all of the things so we can literally

00:06:25,940 --> 00:06:28,580
say here's an input here as an output

00:06:27,440 --> 00:06:30,260
here's a motor here's a hydraulic

00:06:28,580 --> 00:06:31,520
cylinder all these sorts of things we

00:06:30,260 --> 00:06:33,729
can put timers and everything on those

00:06:31,520 --> 00:06:35,539
and when we say turn on cylinder

00:06:33,729 --> 00:06:38,120
virtually the similar to starts

00:06:35,539 --> 00:06:40,159
extending and we can say after X period

00:06:38,120 --> 00:06:41,360
of time that input comes on because the

00:06:40,159 --> 00:06:43,039
cylinder extended you

00:06:41,360 --> 00:06:44,419
and then fail state stuff and all that

00:06:43,039 --> 00:06:47,300
kind of thing within that coating and so

00:06:44,419 --> 00:06:49,819
the first program that I wrote had all

00:06:47,300 --> 00:06:51,800
of that and we put it on the machine

00:06:49,819 --> 00:06:53,750
short didn't work first pop that every

00:06:51,800 --> 00:06:55,789
single manual action I could extend the

00:06:53,750 --> 00:06:57,590
similar I could retracted all that kind

00:06:55,789 --> 00:06:59,419
of thing which I couldn't have done in

00:06:57,590 --> 00:07:03,919
PLC land I would have always had some

00:06:59,419 --> 00:07:05,900
sort of problem in that area and of

00:07:03,919 --> 00:07:10,280
course how do you future proof these

00:07:05,900 --> 00:07:12,169
solutions while you use Linux and you

00:07:10,280 --> 00:07:16,159
use open source software so our software

00:07:12,169 --> 00:07:20,900
it's BSD or GPL open and of course

00:07:16,159 --> 00:07:22,159
version control everything which was the

00:07:20,900 --> 00:07:23,990
biggest problem we had with all the

00:07:22,159 --> 00:07:25,520
commercial solutions it was very hard to

00:07:23,990 --> 00:07:27,860
version control everything was

00:07:25,520 --> 00:07:33,979
proprietary everything was locked down

00:07:27,860 --> 00:07:37,479
so debugging is actually one of the

00:07:33,979 --> 00:07:37,479
biggest problems in the industrial world

00:07:37,900 --> 00:07:42,919
the way they do their debugging is a

00:07:40,939 --> 00:07:44,840
polling based solution and they only

00:07:42,919 --> 00:07:46,669
show you the i/o that will fit on your

00:07:44,840 --> 00:07:49,039
little screen or that you've turned on

00:07:46,669 --> 00:07:50,960
in the debugger so if the problem you're

00:07:49,039 --> 00:07:53,089
having isn't in the area you're looking

00:07:50,960 --> 00:07:56,659
or in the area that you've got a debug

00:07:53,089 --> 00:07:58,430
that the list of i/o turned on for you

00:07:56,659 --> 00:08:00,110
won't see it and all than that you may

00:07:58,430 --> 00:08:02,180
only get if you're local a thousand

00:08:00,110 --> 00:08:07,430
updates a second one update to a

00:08:02,180 --> 00:08:13,960
millisecond so that was a significant

00:08:07,430 --> 00:08:16,219
problem to me so we had to have a way of

00:08:13,960 --> 00:08:17,870
handling that problem and what we

00:08:16,219 --> 00:08:23,029
decided that we had to be able to

00:08:17,870 --> 00:08:26,150
describe the state as it is right now we

00:08:23,029 --> 00:08:30,229
also had to be able to understand why he

00:08:26,150 --> 00:08:32,089
was in this state right now and we had

00:08:30,229 --> 00:08:34,940
to have a way of seeing the history of

00:08:32,089 --> 00:08:43,779
what it was so that's the state changes

00:08:34,940 --> 00:08:43,779
and the property changes so we

00:08:44,360 --> 00:08:55,610
created this language each machine is a

00:08:51,080 --> 00:08:57,990
copy of a template it's described --all

00:08:55,610 --> 00:09:01,950
describable describable

00:08:57,990 --> 00:09:07,200
with its states all machines run

00:09:01,950 --> 00:09:08,880
continuously in parallel and machines

00:09:07,200 --> 00:09:12,420
can monitor each other depending on how

00:09:08,880 --> 00:09:16,890
you code them the tools we developed

00:09:12,420 --> 00:09:18,330
were one we wrote a version of their

00:09:16,890 --> 00:09:21,240
language that would actually talk to a

00:09:18,330 --> 00:09:24,529
an industrial control platform called

00:09:21,240 --> 00:09:28,830
EtherCAT if the cat's a very interesting

00:09:24,529 --> 00:09:30,810
commercial product which is open in a

00:09:28,830 --> 00:09:31,890
sense that you can join the association

00:09:30,810 --> 00:09:34,380
for nothing and get all the

00:09:31,890 --> 00:09:37,040
documentation and buy the FPGA chips and

00:09:34,380 --> 00:09:39,240
all the sorts of things you need to do a

00:09:37,040 --> 00:09:43,650
couple of my copyrights but I mean

00:09:39,240 --> 00:09:45,750
nothing's perfect and with that

00:09:43,650 --> 00:09:49,710
technology you can get a thousand

00:09:45,750 --> 00:09:52,650
digital i/o points updated in ten

00:09:49,710 --> 00:09:55,770
microseconds with a distributed clock of

00:09:52,650 --> 00:10:00,000
accuracy of better than one microsecond

00:09:55,770 --> 00:10:02,550
or you could control a hundred axes of

00:10:00,000 --> 00:10:04,980
robotics control so servos that kind of

00:10:02,550 --> 00:10:09,240
thing with a hundred microsecond update

00:10:04,980 --> 00:10:14,250
rate so extremely fast and predictable

00:10:09,240 --> 00:10:16,320
so that was a solution for us and not

00:10:14,250 --> 00:10:18,570
hugely expensive and open-source tools

00:10:16,320 --> 00:10:21,810
actually two different platforms have

00:10:18,570 --> 00:10:23,220
been written for it so we had protection

00:10:21,810 --> 00:10:24,870
in the sense that if one of them stopped

00:10:23,220 --> 00:10:29,220
being developed the other one would be

00:10:24,870 --> 00:10:31,800
available to us with some work The CW

00:10:29,220 --> 00:10:33,630
there which is the actual language that

00:10:31,800 --> 00:10:36,150
was designed to be independent of any

00:10:33,630 --> 00:10:38,370
i/o and so you can then connect to it

00:10:36,150 --> 00:10:40,230
with other things to inject the

00:10:38,370 --> 00:10:44,430
information into it instead of directly

00:10:40,230 --> 00:10:47,279
driving say the cat the O h io shell is

00:10:44,430 --> 00:10:52,560
our command line tool allows us to list

00:10:47,279 --> 00:10:54,540
find describe turn on tracing debugging

00:10:52,560 --> 00:10:56,760
if we want to go really into the the

00:10:54,540 --> 00:11:00,000
guts of things that kind of thing

00:10:56,760 --> 00:11:01,830
sampler is our monitoring tool it's this

00:11:00,000 --> 00:11:04,200
streaming tool that distraint gets a

00:11:01,830 --> 00:11:05,850
whole stream of data you can instructor

00:11:04,200 --> 00:11:08,130
the command line to reduce the data and

00:11:05,850 --> 00:11:12,960
everything but I find sample everything

00:11:08,130 --> 00:11:16,860
grip it down and then persistence daemon

00:11:12,960 --> 00:11:18,840
is our system that stores things that

00:11:16,860 --> 00:11:21,840
need to be persistent about a machine

00:11:18,840 --> 00:11:24,090
after a restart yeah lots of things you

00:11:21,840 --> 00:11:25,620
know how much timers how long things who

00:11:24,090 --> 00:11:29,690
run where things should stop all that

00:11:25,620 --> 00:11:33,300
kind of stuff Modbus D was a Modbus

00:11:29,690 --> 00:11:36,570
client at the time we didn't have our

00:11:33,300 --> 00:11:38,880
own private HMI platform so we had to be

00:11:36,570 --> 00:11:42,180
able to speak to a commercial SCADA

00:11:38,880 --> 00:11:45,330
panel and so we were able to restrict

00:11:42,180 --> 00:11:47,160
what things actually got exported out to

00:11:45,330 --> 00:11:49,620
Modbus that's the biggest problem with

00:11:47,160 --> 00:11:51,990
my bust you literally have if the thing

00:11:49,620 --> 00:11:53,310
has 8k of RAM that 8k of RAM has made

00:11:51,990 --> 00:11:55,320
available to the panel there's no

00:11:53,310 --> 00:12:00,450
control over it no security no snow

00:11:55,320 --> 00:12:01,890
passwords no groups no nothing and then

00:12:00,450 --> 00:12:03,630
this device connector which is what I

00:12:01,890 --> 00:12:06,060
mentioned earlier on about how to get to

00:12:03,630 --> 00:12:08,670
information it's able to make and

00:12:06,060 --> 00:12:11,060
receive TCP connections and open serial

00:12:08,670 --> 00:12:13,590
connections with a regex on it for

00:12:11,060 --> 00:12:15,830
getting the data into a format that's

00:12:13,590 --> 00:12:15,830
useful

00:12:15,840 --> 00:12:21,990
there's i/o shop

00:12:17,520 --> 00:12:24,870
that's a describe of a a an output that

00:12:21,990 --> 00:12:27,090
was turning on a fan inside the control

00:12:24,870 --> 00:12:30,000
cabinet for the purposes of cooling the

00:12:27,090 --> 00:12:32,940
control cabinet down and you can see in

00:12:30,000 --> 00:12:34,980
there that because it's directly

00:12:32,940 --> 00:12:39,470
connected to an i/o its parameters are

00:12:34,980 --> 00:12:44,850
that it talks to a something rather l

00:12:39,470 --> 00:12:46,980
28:28 and it's connected to IO pin 1 of

00:12:44,850 --> 00:12:50,760
that device so I think that device has

00:12:46,980 --> 00:12:54,980
eight outputs at two amps for output and

00:12:50,760 --> 00:12:59,130
then further down you can see the iOS

00:12:54,980 --> 00:13:01,920
read times and its dependencies so this

00:12:59,130 --> 00:13:04,610
is useful the purposes of knowing who is

00:13:01,920 --> 00:13:04,610
looking at it

00:13:06,820 --> 00:13:11,480
sampler that's actually a sample

00:13:09,950 --> 00:13:15,950
directly out of this little thing down

00:13:11,480 --> 00:13:19,400
here which is a ESP 32 looking at a co2

00:13:15,950 --> 00:13:20,690
sensor so that's something that we've

00:13:19,400 --> 00:13:22,160
done is we've been able to take this

00:13:20,690 --> 00:13:26,260
language and actually compile it down

00:13:22,160 --> 00:13:31,010
into an arm micro so that's rather cool

00:13:26,260 --> 00:13:34,750
we also have where basic web interface

00:13:31,010 --> 00:13:38,210
needs a lot of work I'm not a HTML guy

00:13:34,750 --> 00:13:42,470
and then we have what we call humid

00:13:38,210 --> 00:13:46,360
which is our open GL based GUI that's

00:13:42,470 --> 00:13:49,760
configurable from config files buttons

00:13:46,360 --> 00:13:51,410
text and data entry page switching you

00:13:49,760 --> 00:13:53,630
know you can write a page and have 20 or

00:13:51,410 --> 00:13:56,270
30 pages and the clockwork will actually

00:13:53,630 --> 00:13:58,910
move the system from page to page based

00:13:56,270 --> 00:14:01,100
on its state as opponents of these

00:13:58,910 --> 00:14:03,650
presses the e-stop machine will go to

00:14:01,100 --> 00:14:05,360
the first initial page saying hey Yuri

00:14:03,650 --> 00:14:06,890
stop pressed and the doors open on the

00:14:05,360 --> 00:14:08,180
safety gate and the level of our and you

00:14:06,890 --> 00:14:12,580
haven't got any air pressure and all

00:14:08,180 --> 00:14:15,260
that kind of stuff and you can do

00:14:12,580 --> 00:14:16,540
element visibility so that means that if

00:14:15,260 --> 00:14:19,760
you've got a whole lot of warnings

00:14:16,540 --> 00:14:21,950
instead of custom writing those warnings

00:14:19,760 --> 00:14:23,390
that that like displaying them the text

00:14:21,950 --> 00:14:26,360
you can just turn all them off and

00:14:23,390 --> 00:14:27,950
onliest way the one you want to see and

00:14:26,360 --> 00:14:30,560
then the last one that I mentioned there

00:14:27,950 --> 00:14:36,920
is the time series graphing that proved

00:14:30,560 --> 00:14:39,440
to be a godsend for my development of a

00:14:36,920 --> 00:14:45,250
system that was indexing a 400 kilo

00:14:39,440 --> 00:14:47,210
carriage 900 mil in just over one second

00:14:45,250 --> 00:14:49,370
without it I wouldn't be able to do it

00:14:47,210 --> 00:14:52,520
it was impossible because I just

00:14:49,370 --> 00:14:55,450
couldn't see what I was doing wrong we

00:14:52,520 --> 00:14:59,660
have also done a 3d visualizations using

00:14:55,450 --> 00:15:00,940
the simulation and the code and we

00:14:59,660 --> 00:15:03,590
actually make it so that the simulation

00:15:00,940 --> 00:15:05,600
represents the bales moving through the

00:15:03,590 --> 00:15:09,140
machine and all that kind of thing

00:15:05,600 --> 00:15:13,850
based on open source lots of open source

00:15:09,140 --> 00:15:17,220
components you know and as I say the

00:15:13,850 --> 00:15:20,490
codes BST or GPL as the requirements are

00:15:17,220 --> 00:15:26,279
and that's about it

00:15:20,490 --> 00:15:28,139
I could show you this here if I okay Roy

00:15:26,279 --> 00:15:29,699
yeah so let's see if we can get this

00:15:28,139 --> 00:15:36,870
working I did get it working in the

00:15:29,699 --> 00:15:41,389
speaker's theater now as that switched

00:15:36,870 --> 00:15:41,389
no it's not turned on for some reason Oh

00:15:47,629 --> 00:15:51,149
unfortunately it looks like that

00:15:49,709 --> 00:15:58,290
particular device is not actually

00:15:51,149 --> 00:15:59,129
powered up that's the power button but

00:15:58,290 --> 00:16:03,000
it's not responding

00:15:59,129 --> 00:16:04,680
that's unfortunate I'll place it so we

00:16:03,000 --> 00:16:08,689
can see it just here hopefully people

00:16:04,680 --> 00:16:17,000
there to see that so let's go back to

00:16:08,689 --> 00:16:23,540
the laptop and I want to see this here

00:16:17,000 --> 00:16:23,540
there now I don't know how visible right

00:16:30,420 --> 00:16:41,550
right did that only take that one window

00:16:34,320 --> 00:16:54,329
did it yeah I know that's what happened

00:16:41,550 --> 00:16:57,449
okay right right so I've got a MQTT

00:16:54,329 --> 00:17:03,060
server running on my laptop which I've

00:16:57,449 --> 00:17:06,929
told this ESB 32 about and I can

00:17:03,060 --> 00:17:13,260
construct that remotely to turn a green

00:17:06,929 --> 00:17:15,449
light on or a the red one and that's

00:17:13,260 --> 00:17:18,559
simple you know nothing fancy about that

00:17:15,449 --> 00:17:21,150
but the point is that it's possible and

00:17:18,559 --> 00:17:23,250
so you can exactly the example would

00:17:21,150 --> 00:17:25,740
that be you might have put that behind

00:17:23,250 --> 00:17:27,630
the door switch with some lights on it

00:17:25,740 --> 00:17:30,419
and some buttons on it and it could

00:17:27,630 --> 00:17:33,120
report that information to your

00:17:30,419 --> 00:17:36,900
household basically now the thing is

00:17:33,120 --> 00:17:42,210
okay that there is the continual

00:17:36,900 --> 00:17:44,820
monitoring of the co2 monitor with a 100

00:17:42,210 --> 00:17:48,090
millisecond update rate no filtering or

00:17:44,820 --> 00:17:50,010
anything like that at all possible you

00:17:48,090 --> 00:17:52,290
can see also there the transitions of

00:17:50,010 --> 00:17:54,270
states and the property value updates so

00:17:52,290 --> 00:17:56,400
you can imagine if that was a whole lot

00:17:54,270 --> 00:17:59,160
more complex you would be able to grip

00:17:56,400 --> 00:18:01,280
out say the beginning statement so the

00:17:59,160 --> 00:18:04,049
main machine and see that it's going

00:18:01,280 --> 00:18:06,720
idle update but then not going back to

00:18:04,049 --> 00:18:08,400
idle oh that's interesting I need to

00:18:06,720 --> 00:18:15,350
describe that and find out why it's

00:18:08,400 --> 00:18:17,669
doing that wrong the code for that is

00:18:15,350 --> 00:18:20,000
now I gotta type things and people are

00:18:17,669 --> 00:18:20,000
watching

00:18:37,520 --> 00:18:40,850
this is hard

00:18:50,419 --> 00:19:00,200
that's the configuration that makes that

00:18:52,999 --> 00:19:03,499
possible not much not much at all

00:19:00,200 --> 00:19:05,749
and I have we've published a set of

00:19:03,499 --> 00:19:07,940
fairly generic tool libraries that all

00:19:05,749 --> 00:19:12,739
saw clockwork code that makes this all

00:19:07,940 --> 00:19:19,480
possible so if I see that's in a

00:19:12,739 --> 00:19:19,480
different place so say here we are

00:19:32,900 --> 00:19:40,970
so these using my parlance generic

00:19:36,110 --> 00:19:46,490
libraries so there mqt stuff that you

00:19:40,970 --> 00:19:50,630
were looking at that's the code that

00:19:46,490 --> 00:19:52,400
makes this work so the very top one is

00:19:50,630 --> 00:19:54,380
the piece of code that takes that

00:19:52,400 --> 00:19:57,680
message though I sent as a number one to

00:19:54,380 --> 00:20:01,750
turn that light on right we're done are

00:19:57,680 --> 00:20:01,750

YouTube URL: https://www.youtube.com/watch?v=iTN4CWyl7ws


