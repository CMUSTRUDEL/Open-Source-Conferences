Title: Automated firewall testing
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Kristof Provost

https://2019.linux.conf.au/schedule/presentation/257/

We're all convinced that automated tests are a good idea. For some applications (e.g. grep, awk, cc, ...) this is very straightforward. Others are a lot harder to test, for example firewalls. 
Typically testing firewalls takes two to three hosts. One to send traffic, the firewall test host and one to receive traffic. This makes automated test orchestration complex and brittle. This in turn means that tests either don't get written, are difficult to write and/or suffer random failures unrelated to issues in the firewall itself. Virtualisation has made this all somewhat easier, but it's still fiddly and difficult to make robust. It's also slow.

The new FreeBSD network stack virtualisation lets us build on the existing jails system to build test setups, execute tests and clean up in mere seconds, without any requirement for additional hardware, or even hardware virtualisation support.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:05,180 --> 00:00:10,290
thank you so the reason I bring a

00:00:08,040 --> 00:00:12,660
FreeBSD talk to a Linux conference is

00:00:10,290 --> 00:00:14,309
not that I think that FreeBSD is much

00:00:12,660 --> 00:00:18,090
nicer and you should all be using three

00:00:14,309 --> 00:00:19,890
BSD I mean obviously I think this but

00:00:18,090 --> 00:00:21,449
that's not the only reason I think there

00:00:19,890 --> 00:00:24,539
are lessons to be learned from this I

00:00:21,449 --> 00:00:25,140
think a lot of what i've done with PF in

00:00:24,539 --> 00:00:27,289
freebsd

00:00:25,140 --> 00:00:29,730
is something that could actually be done

00:00:27,289 --> 00:00:31,920
relatively easily in linux as well and

00:00:29,730 --> 00:00:34,110
the central thesis of the talk I'll give

00:00:31,920 --> 00:00:37,620
away the ending right now is testing is

00:00:34,110 --> 00:00:39,090
good you should do more testing right

00:00:37,620 --> 00:00:43,800
now that that's done we can all go get a

00:00:39,090 --> 00:00:46,829
beer right anyway the obligatory blatant

00:00:43,800 --> 00:00:49,110
self-promotion you've already heard my

00:00:46,829 --> 00:00:53,610
name you've got an email address I work

00:00:49,110 --> 00:00:55,680
on PF in FreeBSD in FreeBSD we'll get

00:00:53,610 --> 00:00:58,949
into that later professionally I do

00:00:55,680 --> 00:01:01,500
embedded Linux projects as well as three

00:00:58,949 --> 00:01:04,229
BSD things I want to make it very clear

00:01:01,500 --> 00:01:09,119
that I'm not for sale but I am for rent

00:01:04,229 --> 00:01:12,600
talk to me about rights talking about PF

00:01:09,119 --> 00:01:14,820
because perhaps you find people don't

00:01:12,600 --> 00:01:17,700
know P fpf is a packet filter it's a

00:01:14,820 --> 00:01:19,920
firewall it's it's I think it's quite a

00:01:17,700 --> 00:01:21,810
nice firewall we've got some more in

00:01:19,920 --> 00:01:25,140
FreeBSD so you're spoiled for choice

00:01:21,810 --> 00:01:28,740
this particular one we took from open

00:01:25,140 --> 00:01:31,229
BSD they've only got the one and we

00:01:28,740 --> 00:01:34,259
stole it from them well you know they

00:01:31,229 --> 00:01:36,030
can still use it but we've got it too we

00:01:34,259 --> 00:01:38,310
stole it a while ago so what we've got

00:01:36,030 --> 00:01:39,869
is an older version there are some sort

00:01:38,310 --> 00:01:41,939
well subtle and not so subtle

00:01:39,869 --> 00:01:45,270
differences between them but trust me

00:01:41,939 --> 00:01:47,009
ours is pretty nice too we've got one or

00:01:45,270 --> 00:01:48,600
two things that they don't have one of

00:01:47,009 --> 00:01:51,000
which is veena which we'll go into later

00:01:48,600 --> 00:01:54,000
another one is that it's multi-core

00:01:51,000 --> 00:01:57,240
capable and a good bit faster than the

00:01:54,000 --> 00:01:58,799
open B as the version they've got newer

00:01:57,240 --> 00:02:00,899
syntax they've got a bunch of features

00:01:58,799 --> 00:02:02,670
we don't have so I don't want to say

00:02:00,899 --> 00:02:04,380
that you know there's something wrong

00:02:02,670 --> 00:02:08,060
with open BSD but you should still be

00:02:04,380 --> 00:02:10,690
using three be a Z rather than open BSD

00:02:08,060 --> 00:02:16,600
sorry

00:02:10,690 --> 00:02:19,150
that measly is very nice as well so you

00:02:16,600 --> 00:02:24,670
know come to the BSD community we've got

00:02:19,150 --> 00:02:27,310
religious wars as well so automated

00:02:24,670 --> 00:02:30,360
testing why automated testing well it

00:02:27,310 --> 00:02:34,500
turns out that when you've got users and

00:02:30,360 --> 00:02:38,830
they like it when things actually work

00:02:34,500 --> 00:02:40,420
yeah I know it surprised me too on top

00:02:38,830 --> 00:02:42,820
of that it's also really nice to have

00:02:40,420 --> 00:02:45,820
you know test cases when you want to try

00:02:42,820 --> 00:02:48,970
something out it also means that when

00:02:45,820 --> 00:02:52,720
something works today it's not suddenly

00:02:48,970 --> 00:02:55,450
going to stop working tomorrow which is

00:02:52,720 --> 00:02:56,890
another nice thing to have it's also

00:02:55,450 --> 00:02:58,900
nice that when you're doing development

00:02:56,890 --> 00:03:00,670
on things I've recently done some

00:02:58,900 --> 00:03:02,380
performance work on something and when

00:03:00,670 --> 00:03:04,930
you make you know a large change for

00:03:02,380 --> 00:03:07,510
performance changes it's nice that you

00:03:04,930 --> 00:03:13,630
can figure out does this actually still

00:03:07,510 --> 00:03:15,760
work talking about regressions I've got

00:03:13,630 --> 00:03:17,890
two examples and there really are two

00:03:15,760 --> 00:03:20,440
different examples despite both of them

00:03:17,890 --> 00:03:24,430
being about ipv6 fragment handling and

00:03:20,440 --> 00:03:26,410
if you want me I'm not going to go into

00:03:24,430 --> 00:03:29,230
too much detail about what the bugs were

00:03:26,410 --> 00:03:31,900
but I have several excellent rants about

00:03:29,230 --> 00:03:34,510
ipv6 and fragments so buy me beer and

00:03:31,900 --> 00:03:36,280
I'll tell you but these are good

00:03:34,510 --> 00:03:38,590
examples because the first one happens

00:03:36,280 --> 00:03:42,400
back in December of 2016

00:03:38,590 --> 00:03:44,290
somebody introduced a ipv6 fast path for

00:03:42,400 --> 00:03:47,340
forwarding in FreeBSD and you know

00:03:44,290 --> 00:03:51,040
faster forwarding is excellent but they

00:03:47,340 --> 00:03:55,269
accidentally broke PF ability to handle

00:03:51,040 --> 00:03:59,500
v6 fragments and then nobody noticed for

00:03:55,269 --> 00:04:02,610
nine months slightly embarrassing you

00:03:59,500 --> 00:04:05,200
know we noticed it got fixed that's fine

00:04:02,610 --> 00:04:09,519
but nine months is a really long time

00:04:05,200 --> 00:04:12,519
for something to be broken it's only

00:04:09,519 --> 00:04:16,150
ipv6 fragments but it's still quite nice

00:04:12,519 --> 00:04:18,150
if that actually works somewhat more

00:04:16,150 --> 00:04:22,120
recently in fact in August of last year

00:04:18,150 --> 00:04:23,020
somebody else broke it again this

00:04:22,120 --> 00:04:24,940
actually happens

00:04:23,020 --> 00:04:28,510
fixing a security

00:04:24,940 --> 00:04:30,250
some of you may remember the fragment

00:04:28,510 --> 00:04:33,400
handling issue where you could exhaust

00:04:30,250 --> 00:04:35,380
resources consume a lot of CPU time by

00:04:33,400 --> 00:04:37,740
crafting specific chains of fragments

00:04:35,380 --> 00:04:41,229
quite an amusing bug in that it affected

00:04:37,740 --> 00:04:43,090
everyone there were fixes in the links

00:04:41,229 --> 00:04:44,860
that were fixes in 3b as either-or fixes

00:04:43,090 --> 00:04:48,460
in other BS DS

00:04:44,860 --> 00:04:50,320
I'm not sure if if OS X and Windows were

00:04:48,460 --> 00:04:55,960
affected but a lot of people were

00:04:50,320 --> 00:04:59,229
affected by by that issue and somebody

00:04:55,960 --> 00:05:02,500
very kindly fixed that in the IP stack

00:04:59,229 --> 00:05:07,180
and accidently broke the reassembly code

00:05:02,500 --> 00:05:10,660
and didn't notice fortunately by this

00:05:07,180 --> 00:05:13,210
point we've had tests for PF which

00:05:10,660 --> 00:05:16,660
started failing and then obviously

00:05:13,210 --> 00:05:20,229
everyone blamed me because it's PF it's

00:05:16,660 --> 00:05:22,900
my fault so when I started investigating

00:05:20,229 --> 00:05:25,479
I discovered that well actually PF is

00:05:22,900 --> 00:05:29,139
not broken it's the rest of the IP stack

00:05:25,479 --> 00:05:32,590
that's broken the difference here being

00:05:29,139 --> 00:05:36,130
is that it was broken on August 14th and

00:05:32,590 --> 00:05:37,990
got fixed on August 31st which is broken

00:05:36,130 --> 00:05:39,490
for two weeks which is still longer than

00:05:37,990 --> 00:05:43,270
you want things to be broken but it's a

00:05:39,490 --> 00:05:46,900
lot better than my months also very

00:05:43,270 --> 00:05:52,990
amusing bug this one when you start

00:05:46,900 --> 00:05:54,820
tracing it it went away no really buy me

00:05:52,990 --> 00:05:57,120
a beverage of your choice and I will

00:05:54,820 --> 00:06:00,729
tell you all about it

00:05:57,120 --> 00:06:03,070
so tests what do we want from tests well

00:06:00,729 --> 00:06:05,680
we want them to be easy to run easy to

00:06:03,070 --> 00:06:08,650
write because up to this point I've been

00:06:05,680 --> 00:06:12,370
writing them and this is a theme we'll

00:06:08,650 --> 00:06:13,870
touch on quite often I'm really lazy so

00:06:12,370 --> 00:06:18,190
I want other people to do the work for

00:06:13,870 --> 00:06:20,050
me so that's why we want them to be easy

00:06:18,190 --> 00:06:22,660
to write because I understand that I'm

00:06:20,050 --> 00:06:25,090
not perhaps the only lazy person in the

00:06:22,660 --> 00:06:27,729
universe so other people want things to

00:06:25,090 --> 00:06:29,889
be easy as well we also want them to be

00:06:27,729 --> 00:06:31,389
fast to run so that whenever you make a

00:06:29,889 --> 00:06:33,159
small change you'll just go oh well

00:06:31,389 --> 00:06:36,070
let's just run these tests and make sure

00:06:33,159 --> 00:06:38,139
it hasn't broken we'd also like them to

00:06:36,070 --> 00:06:41,530
integrate with the existing test

00:06:38,139 --> 00:06:44,560
work that we've got we've got C Idol

00:06:41,530 --> 00:06:46,090
three bs Deedle org which is our Jenkins

00:06:44,560 --> 00:06:49,270
instance and one of the things it does

00:06:46,090 --> 00:06:50,740
is it runs our tests and we've got tests

00:06:49,270 --> 00:06:52,689
for well you can see for all sorts of

00:06:50,740 --> 00:06:57,870
things bin cats just in case somebody

00:06:52,689 --> 00:07:01,419
would break count well you know

00:06:57,870 --> 00:07:03,969
important lesson in testing is that even

00:07:01,419 --> 00:07:06,930
a very simple test will occasionally

00:07:03,969 --> 00:07:10,060
catch bugs so right the simple test

00:07:06,930 --> 00:07:11,710
it'll cover something won't be a lot of

00:07:10,060 --> 00:07:14,139
work but it'll cover something and it

00:07:11,710 --> 00:07:18,250
will catch some bugs and your life will

00:07:14,139 --> 00:07:19,870
be slightly better in this well back

00:07:18,250 --> 00:07:22,449
when I took this screen shot we have

00:07:19,870 --> 00:07:25,930
seven thousand three hundred tests and

00:07:22,449 --> 00:07:28,240
most of them passed it's a a different

00:07:25,930 --> 00:07:29,710
discussion but it's when you've got

00:07:28,240 --> 00:07:30,909
tests it's important to run them and

00:07:29,710 --> 00:07:32,710
it's important to make sure that they

00:07:30,909 --> 00:07:34,449
keep passing because if you have a pile

00:07:32,710 --> 00:07:36,129
of failing tests people are not going to

00:07:34,449 --> 00:07:38,560
notice that hey there's one more that

00:07:36,129 --> 00:07:42,339
fails and one more and it sort of

00:07:38,560 --> 00:07:44,500
becomes pointless moving slightly closer

00:07:42,339 --> 00:07:46,900
to you know how do we test this firewall

00:07:44,500 --> 00:07:48,550
thing because you know how would you

00:07:46,900 --> 00:07:50,949
usually test a firewall do you take a

00:07:48,550 --> 00:07:52,779
bunch of hardware you take a machine to

00:07:50,949 --> 00:07:54,819
send packets a machine to be the

00:07:52,779 --> 00:07:57,490
firewall a machine to receive packets

00:07:54,819 --> 00:07:59,729
and coordinating multiple machines and

00:07:57,490 --> 00:08:05,589
running the latest software on it is a

00:07:59,729 --> 00:08:08,289
huge pain and everything intervene at

00:08:05,589 --> 00:08:12,250
vina it's a pretty shiny new feature in

00:08:08,289 --> 00:08:14,259
FreeBSD 12 which extends our existing

00:08:12,250 --> 00:08:16,029
jail system so think of jails as

00:08:14,259 --> 00:08:20,169
containers except we got there before

00:08:16,029 --> 00:08:22,060
the cool kids got there which means that

00:08:20,169 --> 00:08:23,889
you can have an IP sock associated with

00:08:22,060 --> 00:08:26,110
your jail you can put network interfaces

00:08:23,889 --> 00:08:27,580
in your jail and that jail owns the

00:08:26,110 --> 00:08:29,620
network interface it can set IP

00:08:27,580 --> 00:08:34,899
addresses it can send packets it can

00:08:29,620 --> 00:08:37,329
even run a firewall from 3bz 12.0 that's

00:08:34,899 --> 00:08:39,640
supported with PF and by supported I

00:08:37,329 --> 00:08:43,440
mean as far as I know it works and if it

00:08:39,640 --> 00:08:43,440
breaks I will actually try to help you

00:08:44,640 --> 00:08:49,660
so we can create a jail and we can give

00:08:47,319 --> 00:08:51,800
it its own IP sock and we can run a

00:08:49,660 --> 00:08:54,610
firewall in it and create

00:08:51,800 --> 00:08:56,630
jails is really fast and really easy

00:08:54,610 --> 00:08:58,580
trust me on this it's really easy

00:08:56,630 --> 00:09:04,070
because that's how you start to jail

00:08:58,580 --> 00:09:06,279
with its own IP stack I'm you know I'm

00:09:04,070 --> 00:09:09,019
sure you can figure out what that does

00:09:06,279 --> 00:09:15,050
we start to jail we name in Alcatraz

00:09:09,019 --> 00:09:16,820
because I think that's funny we say that

00:09:15,050 --> 00:09:19,880
we wanted to be a v-net as opposed to

00:09:16,820 --> 00:09:21,950
our other style of jails and we wanted

00:09:19,880 --> 00:09:24,560
to persist we wanted to keep living even

00:09:21,950 --> 00:09:26,420
when there are no processes in it of

00:09:24,560 --> 00:09:28,670
course I've cheated slightly in that

00:09:26,420 --> 00:09:30,860
this jail has its own IP stack and when

00:09:28,670 --> 00:09:33,860
you would log into that jail you would

00:09:30,860 --> 00:09:36,200
see that it has dev l o0 the loopback

00:09:33,860 --> 00:09:39,769
device but it doesn't have any network

00:09:36,200 --> 00:09:41,329
interfaces so obviously you know adding

00:09:39,769 --> 00:09:44,540
network interface is going to be really

00:09:41,329 --> 00:09:47,950
hard right well know that hard to be

00:09:44,540 --> 00:09:50,930
almost we can create an au pair au pairs

00:09:47,950 --> 00:09:52,700
think of them as two network cards with

00:09:50,930 --> 00:09:54,769
a wire but in between them

00:09:52,700 --> 00:09:57,560
they're virtual networking devices

00:09:54,769 --> 00:09:59,000
they're virtual Ethernet cards and when

00:09:57,560 --> 00:10:00,740
you create when you say you know I

00:09:59,000 --> 00:10:02,630
create an e pair you will get two of

00:10:00,740 --> 00:10:04,790
them because the two of them are

00:10:02,630 --> 00:10:07,670
connected together you'll get a pair 0 a

00:10:04,790 --> 00:10:11,089
and B or e pair 1 a and B depending on

00:10:07,670 --> 00:10:13,790
how many you create so for example we'll

00:10:11,089 --> 00:10:18,260
assign an IP address to the first end of

00:10:13,790 --> 00:10:20,390
it to a pair 0 a will create a jail so

00:10:18,260 --> 00:10:22,250
again create a jail alcatraz vina

00:10:20,390 --> 00:10:25,459
persist and we'll tell it hey vena

00:10:22,250 --> 00:10:28,970
interface a pair 0 B and now my jail has

00:10:25,459 --> 00:10:30,620
a network interface what is also really

00:10:28,970 --> 00:10:32,810
nice about jails is and it's really

00:10:30,620 --> 00:10:36,320
really easy to reach into them and do

00:10:32,810 --> 00:10:38,540
things so you know execute in jail

00:10:36,320 --> 00:10:41,570
Alcatraz des commands ifconfig a pair

00:10:38,540 --> 00:10:44,240
zero be certain IP address set it up and

00:10:41,570 --> 00:10:46,970
now I can ping the jail all done I have

00:10:44,240 --> 00:10:50,690
a virtual functionally I have a virtual

00:10:46,970 --> 00:10:54,110
machine with an IP stack what I could do

00:10:50,690 --> 00:10:58,699
now and we'll go into an example soon is

00:10:54,110 --> 00:11:02,089
I can set another set up a firewall I

00:10:58,699 --> 00:11:05,910
can set rules and I can see what happens

00:11:02,089 --> 00:11:09,180
when I do this so going through

00:11:05,910 --> 00:11:12,180
a slightly detailed test this is a very

00:11:09,180 --> 00:11:15,270
basic parse block test for v4 packets as

00:11:12,180 --> 00:11:17,850
it says in the description so what this

00:11:15,270 --> 00:11:19,770
does this is it this is the start of a

00:11:17,850 --> 00:11:21,690
test script there's more there's more

00:11:19,770 --> 00:11:25,140
interesting things but basically you

00:11:21,690 --> 00:11:28,620
know we includes a utilities function or

00:11:25,140 --> 00:11:31,320
a utilities file a file with a bunch of

00:11:28,620 --> 00:11:33,540
utility functions rather we declare a

00:11:31,320 --> 00:11:35,460
test case we say that it's got a clean

00:11:33,540 --> 00:11:39,540
up function which we'll get to in a few

00:11:35,460 --> 00:11:41,880
slides in heads we describe the test so

00:11:39,540 --> 00:11:44,820
description basic Mouse block test and

00:11:41,880 --> 00:11:47,160
this test requires that we run this is

00:11:44,820 --> 00:11:49,140
route because I don't think it surprises

00:11:47,160 --> 00:11:51,930
anyone that we require you to be route

00:11:49,140 --> 00:11:56,940
to create new network interfaces or

00:11:51,930 --> 00:11:59,280
create new jails and then we can run the

00:11:56,940 --> 00:12:01,050
test and this is a well it's a

00:11:59,280 --> 00:12:04,710
simplified version but this is a useful

00:12:01,050 --> 00:12:06,300
test we initialize basically what the

00:12:04,710 --> 00:12:08,310
initialization code does is make sure

00:12:06,300 --> 00:12:10,860
that you know we're going to test PF so

00:12:08,310 --> 00:12:14,430
let's make sure that we've remembered to

00:12:10,860 --> 00:12:16,470
load the PF kernel module let's also

00:12:14,430 --> 00:12:18,960
check that we support vena because while

00:12:16,470 --> 00:12:22,470
it is on by default in 12 it didn't used

00:12:18,960 --> 00:12:26,310
to be so let's check for that we create

00:12:22,470 --> 00:12:28,020
an e pair if the MKE pair we assign an

00:12:26,310 --> 00:12:28,680
IP address to the e pair we've seen this

00:12:28,020 --> 00:12:30,750
before right

00:12:28,680 --> 00:12:32,010
there's a utility function to create

00:12:30,750 --> 00:12:34,260
jail

00:12:32,010 --> 00:12:35,910
basically all that does is remember that

00:12:34,260 --> 00:12:37,620
hey you've created this jail so that

00:12:35,910 --> 00:12:41,520
when we do the cleanup it will just

00:12:37,620 --> 00:12:44,700
automatically remove this jail we assign

00:12:41,520 --> 00:12:48,120
the BND's of that interface to the jail

00:12:44,700 --> 00:12:51,660
we give it an IP address and now we can

00:12:48,120 --> 00:12:53,820
ping that jail so we'll tell it that hey

00:12:51,660 --> 00:12:56,100
our first test is a very basic sanity

00:12:53,820 --> 00:12:57,810
test we've more activated the firewall

00:12:56,100 --> 00:13:02,520
but let's make sure that we can ping

00:12:57,810 --> 00:13:03,630
that that jail so check that the exit

00:13:02,520 --> 00:13:06,140
status will be zero

00:13:03,630 --> 00:13:10,050
ignore the output and then run a ping

00:13:06,140 --> 00:13:11,790
one ping only with timeout of one

00:13:10,050 --> 00:13:14,340
seconds because we don't want to wait

00:13:11,790 --> 00:13:17,340
forever for tests to fail and we send it

00:13:14,340 --> 00:13:19,440
to the IP address of our jail I think we

00:13:17,340 --> 00:13:21,060
can assume that will succeed but

00:13:19,440 --> 00:13:22,680
well it should succeed if it doesn't

00:13:21,060 --> 00:13:26,880
we've got a problem and we can start

00:13:22,680 --> 00:13:30,080
debugging things next up let's activate

00:13:26,880 --> 00:13:33,330
a firewall so PF control - efore enable

00:13:30,080 --> 00:13:36,510
by default PF will let any old packet

00:13:33,330 --> 00:13:38,490
through if there are no rules anything

00:13:36,510 --> 00:13:41,640
will go through so we test that we can

00:13:38,490 --> 00:13:44,970
still send the ping message that will

00:13:41,640 --> 00:13:49,050
presumably work next test does something

00:13:44,970 --> 00:13:51,480
functional set rules in the jail block

00:13:49,050 --> 00:13:54,270
input what happens when we send the ping

00:13:51,480 --> 00:13:56,700
to a host that will just drop all

00:13:54,270 --> 00:13:59,970
incoming packets well hopefully it will

00:13:56,700 --> 00:14:01,830
reply if it does it might be a psychic

00:13:59,970 --> 00:14:04,650
host but that would be that would

00:14:01,830 --> 00:14:06,810
indicate a problem so in this case we

00:14:04,650 --> 00:14:10,560
check that the exit status will be 2 and

00:14:06,810 --> 00:14:12,510
this is actually the slowest part of

00:14:10,560 --> 00:14:14,880
this test because we sit around waiting

00:14:12,510 --> 00:14:19,470
for a second for the the ping request a

00:14:14,880 --> 00:14:22,830
timeout cleanup is really easy just call

00:14:19,470 --> 00:14:24,570
clean up the code has remembered what

00:14:22,830 --> 00:14:26,280
interfaces we've created what jails

00:14:24,570 --> 00:14:30,000
we've created and it will just throw

00:14:26,280 --> 00:14:32,700
them away which means that after you

00:14:30,000 --> 00:14:34,830
you're done with this you can create new

00:14:32,700 --> 00:14:39,060
interfaces there there should not be a

00:14:34,830 --> 00:14:40,830
trace left of that jail and then some

00:14:39,060 --> 00:14:45,120
more boilerplate where we just tell it

00:14:40,830 --> 00:14:48,870
that hey the test case is is the v4 test

00:14:45,120 --> 00:14:50,670
case this is a simplified version of a

00:14:48,870 --> 00:14:52,920
slightly more extensive test it does a

00:14:50,670 --> 00:14:55,220
couple of other things you know they're

00:14:52,920 --> 00:14:59,370
really really really basic things like

00:14:55,220 --> 00:15:01,650
when I send can I filter packets based

00:14:59,370 --> 00:15:03,660
on port number for instance so we set up

00:15:01,650 --> 00:15:05,310
a rule to drop packets to a certain port

00:15:03,660 --> 00:15:08,730
but not to another port and then we try

00:15:05,310 --> 00:15:12,810
to connect on both of those ports only

00:15:08,730 --> 00:15:14,880
so much room on slides so we can run

00:15:12,810 --> 00:15:19,980
this test and this is an example test

00:15:14,880 --> 00:15:22,290
run it in this case we actively say you

00:15:19,980 --> 00:15:24,390
know we only want to run the pass block

00:15:22,290 --> 00:15:26,630
group of tests and in that group of

00:15:24,390 --> 00:15:30,000
tests we only want to run the v4 test

00:15:26,630 --> 00:15:33,330
and it will run this test pass block v4

00:15:30,000 --> 00:15:37,080
and it will pass hopefully

00:15:33,330 --> 00:15:40,920
and it took 1.2 seconds remember one

00:15:37,080 --> 00:15:44,910
second of this is waiting for an echo

00:15:40,920 --> 00:15:47,940
reply that will never turn up so 0.2

00:15:44,910 --> 00:15:49,920
seconds to create avert something that's

00:15:47,940 --> 00:15:52,230
really close to a virtual machine a

00:15:49,920 --> 00:15:55,980
network interface set network

00:15:52,230 --> 00:16:00,300
configuration test things and return so

00:15:55,980 --> 00:16:02,100
I think we've hit the fast I think you

00:16:00,300 --> 00:16:04,230
can also agree that having seen the test

00:16:02,100 --> 00:16:06,750
this is not terribly difficult to write

00:16:04,230 --> 00:16:08,730
this is a really easy example there are

00:16:06,750 --> 00:16:10,890
a couple more complicated scenarios that

00:16:08,730 --> 00:16:14,070
we test but still reasonably

00:16:10,890 --> 00:16:15,960
straightforward to write the test 2 will

00:16:14,070 --> 00:16:18,060
also keep track of results so if

00:16:15,960 --> 00:16:21,710
something fails you can go back and look

00:16:18,060 --> 00:16:26,310
at what output did it generate of course

00:16:21,710 --> 00:16:28,290
this having happened we've got a test

00:16:26,310 --> 00:16:30,630
case so even if it failed and we don't

00:16:28,290 --> 00:16:32,730
have the output we can trivially run

00:16:30,630 --> 00:16:34,800
this again and we know exactly what it

00:16:32,730 --> 00:16:37,050
did we know what we're expecting we know

00:16:34,800 --> 00:16:39,920
what did or did we can reproduce what

00:16:37,050 --> 00:16:39,920
did or did not happen

00:16:41,150 --> 00:16:46,350
you can find these tests in the freebsd

00:16:44,880 --> 00:16:48,270
source 3 you've all got the freebie as

00:16:46,350 --> 00:16:49,890
the installation somewhere I'm sure so

00:16:48,270 --> 00:16:51,240
you can find the source code for the

00:16:49,890 --> 00:16:55,170
tests you can find where they're

00:16:51,240 --> 00:16:57,600
installed so run them you want to

00:16:55,170 --> 00:17:00,600
install a couple of packages you know

00:16:57,600 --> 00:17:02,910
three B's these got its PKG package

00:17:00,600 --> 00:17:05,940
manager so as soon as you train your

00:17:02,910 --> 00:17:11,130
fingers to type PKG instead of apps

00:17:05,940 --> 00:17:14,160
you're ready to run freebsd you want to

00:17:11,130 --> 00:17:16,500
load the kernel module a PF sync

00:17:14,160 --> 00:17:19,110
depends on PF so it will implicitly load

00:17:16,500 --> 00:17:21,390
PF there are some PF sync tests in the

00:17:19,110 --> 00:17:27,350
test setup as well go to the directory

00:17:21,390 --> 00:17:31,110
and go test run so i think at this point

00:17:27,350 --> 00:17:33,240
to reinforce my point i want to give you

00:17:31,110 --> 00:17:36,570
a profound quote by someone famous i

00:17:33,240 --> 00:17:40,500
couldn't find anyone famous so there we

00:17:36,570 --> 00:17:44,460
go it's just me why should you write

00:17:40,500 --> 00:17:46,660
tests you can prototype setups you can

00:17:44,460 --> 00:17:48,850
write a test to make sure that

00:17:46,660 --> 00:17:51,640
the feature that you depend on will just

00:17:48,850 --> 00:17:53,740
break I think another really excellent

00:17:51,640 --> 00:17:58,210
argument for writing tests is that you

00:17:53,740 --> 00:18:02,050
make it easy for me to say I hope I've

00:17:58,210 --> 00:18:05,260
convinced you if there are any questions

00:18:02,050 --> 00:18:08,770
I think now's the time and if not you

00:18:05,260 --> 00:18:12,090
can find me outside does anyone have any

00:18:08,770 --> 00:18:12,090
questions I think we've got time for one

00:18:12,930 --> 00:18:24,329
No everyone please thank Kristoff

00:18:16,070 --> 00:18:24,329

YouTube URL: https://www.youtube.com/watch?v=2neDPNIcrBk


