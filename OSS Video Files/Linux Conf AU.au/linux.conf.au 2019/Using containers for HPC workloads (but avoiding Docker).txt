Title: Using containers for HPC workloads (but avoiding Docker)
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Eric BurgueÃ±o

https://2019.linux.conf.au/schedule/presentation/217/

Containers are the old hot thing. But their adoption in all realms of IT is far from widespread. Most containers we see in the wild today are created to host daemon-type processes and scale them massively, but traditional HPC workloads are different and so HPC shops continue to have some aversion to them.

In this short talk I will discuss some of the challenges that Docker introduces when it comes to using containers in a multi-tenant HPC cluster, and what are some of the possible solutions. We will also explore the relationship between containers and reproducibility in Computational Science.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,030 --> 00:00:04,440
now we have Eric talking to us about

00:00:02,820 --> 00:00:08,519
using containers for high performance

00:00:04,440 --> 00:00:10,380
computing thank you

00:00:08,519 --> 00:00:12,389
typically for any presentation I will

00:00:10,380 --> 00:00:13,650
first introduce myself but I only get 10

00:00:12,389 --> 00:00:16,109
minutes so I'm going to skip all of that

00:00:13,650 --> 00:00:18,600
and jump straight to it

00:00:16,109 --> 00:00:21,330
I also for this talk I want all of you

00:00:18,600 --> 00:00:23,039
to forget the USS salmon or operations

00:00:21,330 --> 00:00:24,689
or whatever you call yourself today it

00:00:23,039 --> 00:00:25,890
doesn't really matter I'm going to try

00:00:24,689 --> 00:00:27,420
and put you in the shoes of a

00:00:25,890 --> 00:00:29,340
computational scientist or a data

00:00:27,420 --> 00:00:32,099
scientist for a moment and try and see

00:00:29,340 --> 00:00:34,290
things from the perspective so imagine

00:00:32,099 --> 00:00:35,880
that you have a tool that you're testing

00:00:34,290 --> 00:00:38,610
out this is from your local desktop

00:00:35,880 --> 00:00:40,920
you're trying a new thing and this will

00:00:38,610 --> 00:00:42,270
has a really simple syntax you run it

00:00:40,920 --> 00:00:44,129
you give it a funding that you want it

00:00:42,270 --> 00:00:46,800
to process and it generates an output on

00:00:44,129 --> 00:00:50,579
the same directory with statistics about

00:00:46,800 --> 00:00:51,570
the fowl or whatever and the problem

00:00:50,579 --> 00:00:54,360
that you have is that you want to run

00:00:51,570 --> 00:00:56,820
this with several several million files

00:00:54,360 --> 00:00:58,260
so obviously your local laptop is

00:00:56,820 --> 00:01:00,510
probably not the best choice and you

00:00:58,260 --> 00:01:02,010
want to run this in a classroom you're

00:01:00,510 --> 00:01:03,629
prototyping on your desktop obviously

00:01:02,010 --> 00:01:05,460
because you want to make sure that it

00:01:03,629 --> 00:01:07,799
will actually does what its promising to

00:01:05,460 --> 00:01:12,420
do before you actually launch it a scale

00:01:07,799 --> 00:01:14,760
so to try it out and sort of have a

00:01:12,420 --> 00:01:16,790
draft script that you're going to use

00:01:14,760 --> 00:01:19,200
once you have this in the cluster you

00:01:16,790 --> 00:01:21,240
decide that a for loop is probably the

00:01:19,200 --> 00:01:23,159
most efficient way to go about it so you

00:01:21,240 --> 00:01:24,659
go to where you have a sample or a

00:01:23,159 --> 00:01:27,270
subset of the files that you want to

00:01:24,659 --> 00:01:28,740
process and you don't have a job

00:01:27,270 --> 00:01:30,600
scheduler on your local laptop so you

00:01:28,740 --> 00:01:32,579
just leave that blank but you just do a

00:01:30,600 --> 00:01:35,060
for loop and then you process all of the

00:01:32,579 --> 00:01:37,590
files sequentially one after another and

00:01:35,060 --> 00:01:40,560
after a few minutes where you just went

00:01:37,590 --> 00:01:42,840
for coffee or lunch you come back and

00:01:40,560 --> 00:01:44,610
you see and you have results so okay

00:01:42,840 --> 00:01:47,100
great the tool actually works that's

00:01:44,610 --> 00:01:48,659
what it promised so you go to the system

00:01:47,100 --> 00:01:50,130
in and you bug him and you say can you

00:01:48,659 --> 00:01:52,350
please get this going in the class or an

00:01:50,130 --> 00:01:54,229
ad for a project and this is I mean

00:01:52,350 --> 00:01:56,369
looks at a tool and says well actually

00:01:54,229 --> 00:01:57,810
it's real easy for you to get it

00:01:56,369 --> 00:01:59,930
installed in your desktop because you're

00:01:57,810 --> 00:02:02,250
running and we're going to cost me

00:01:59,930 --> 00:02:04,680
whatever and that's in the ripples but

00:02:02,250 --> 00:02:06,299
our class who uses CentOS 7 and the

00:02:04,680 --> 00:02:08,700
libraries of this tool depends on are

00:02:06,299 --> 00:02:10,920
also system libraries but the versions

00:02:08,700 --> 00:02:12,629
conflict and to compile the whole thing

00:02:10,920 --> 00:02:13,680
manual is just a hassle son I'm gonna

00:02:12,629 --> 00:02:16,680
give you a container for

00:02:13,680 --> 00:02:18,329
and you think okay containers for that

00:02:16,680 --> 00:02:20,370
assigns I heard of that before but I

00:02:18,329 --> 00:02:22,980
haven't had a chance to practice that so

00:02:20,370 --> 00:02:26,400
I will be a good experience to actually

00:02:22,980 --> 00:02:28,650
try on and use it and the system gives

00:02:26,400 --> 00:02:30,629
you the URL to the company's private

00:02:28,650 --> 00:02:33,209
registry where you can get the container

00:02:30,629 --> 00:02:34,920
from and because you need to docker and

00:02:33,209 --> 00:02:37,310
containers you decided that you're gonna

00:02:34,920 --> 00:02:40,409
try it on just one file just to see if

00:02:37,310 --> 00:02:42,359
everything works as expected so you go

00:02:40,409 --> 00:02:44,129
in and you try your first okay run you

00:02:42,359 --> 00:02:46,349
tell it to process just the first file

00:02:44,129 --> 00:02:48,329
and you get this long hash as an output

00:02:46,349 --> 00:02:50,579
which you remember from the getting

00:02:48,329 --> 00:02:52,680
started tutorials then you look at the

00:02:50,579 --> 00:02:55,040
output to see if there are any and just

00:02:52,680 --> 00:02:59,340
none what happened

00:02:55,040 --> 00:03:01,200
we forgot to mount the files so you add

00:02:59,340 --> 00:03:04,049
the minus B flag to your daughter run

00:03:01,200 --> 00:03:06,510
you say just mount this directory inside

00:03:04,049 --> 00:03:08,879
a container and I'm gonna tell the tool

00:03:06,510 --> 00:03:11,959
to process the file in this new location

00:03:08,879 --> 00:03:15,000
that exists only in the container and

00:03:11,959 --> 00:03:16,709
you run it and you check the results

00:03:15,000 --> 00:03:18,299
there's none and worse than that you

00:03:16,709 --> 00:03:19,669
check the logs for the container and you

00:03:18,299 --> 00:03:22,349
get this permission then either

00:03:19,669 --> 00:03:23,970
now why will that be the tool actually

00:03:22,349 --> 00:03:26,340
worked in our desktop why wouldn't that

00:03:23,970 --> 00:03:28,230
be the case in the server so you go to

00:03:26,340 --> 00:03:30,720
the system and obviously and you say hey

00:03:28,230 --> 00:03:32,940
this doesn't work please fix it and this

00:03:30,720 --> 00:03:35,549
is I mean says well remember we're

00:03:32,940 --> 00:03:37,769
running CentOS 7 so we have a Celina

00:03:35,549 --> 00:03:40,109
blocking the containerized process

00:03:37,769 --> 00:03:42,720
accessing your files so you need to tell

00:03:40,109 --> 00:03:44,879
docker to tell us in Linux to behave and

00:03:42,720 --> 00:03:46,979
you do that by adding this columns add

00:03:44,879 --> 00:03:48,659
flag and you have no idea what they say

00:03:46,979 --> 00:03:49,139
Linux is or what it does but you do as

00:03:48,659 --> 00:03:51,540
you're told

00:03:49,139 --> 00:03:53,760
and you run it you check the output you

00:03:51,540 --> 00:03:55,769
still get nothing and you still get the

00:03:53,760 --> 00:03:57,120
permission denied error in the logs so

00:03:55,769 --> 00:03:58,739
you go back to the system I mean and say

00:03:57,120 --> 00:04:01,109
just get on with it and install it

00:03:58,739 --> 00:04:03,180
manually compile it if you have to

00:04:01,109 --> 00:04:05,970
docker is clearly not working here and

00:04:03,180 --> 00:04:08,400
this is I mean says actually I got no

00:04:05,970 --> 00:04:10,049
more denials in the log file so that

00:04:08,400 --> 00:04:12,299
actually did the trick they probably

00:04:10,049 --> 00:04:14,849
have is that these files are owned and

00:04:12,299 --> 00:04:16,289
readable only by yourself they don't

00:04:14,849 --> 00:04:18,780
have the Reaper missions for everyone

00:04:16,289 --> 00:04:20,310
and this container was created using a

00:04:18,780 --> 00:04:23,099
non privilege user because I don't want

00:04:20,310 --> 00:04:24,750
the tool to run as root but values or

00:04:23,099 --> 00:04:27,470
identity is different from the one that

00:04:24,750 --> 00:04:28,880
you have so you need to make sure that

00:04:27,470 --> 00:04:30,890
you know the permissions are sorted out

00:04:28,880 --> 00:04:32,540
and you have no idea what any of this

00:04:30,890 --> 00:04:33,890
means by you her permissions your data

00:04:32,540 --> 00:04:39,530
scientists so you know how to fix this

00:04:33,890 --> 00:04:42,110
and you go and see it and because your

00:04:39,530 --> 00:04:43,730
tire of copying and pasting hashes all

00:04:42,110 --> 00:04:45,910
over the place you decide to give your

00:04:43,730 --> 00:04:48,650
lovely container a name little baby and

00:04:45,910 --> 00:04:50,150
you run it you check the outputs you

00:04:48,650 --> 00:04:52,280
still get a permission in an error and

00:04:50,150 --> 00:04:54,140
by this point you're fed up you go back

00:04:52,280 --> 00:04:56,360
to the system and almost angry now and

00:04:54,140 --> 00:04:58,400
you say look this is clearly not working

00:04:56,360 --> 00:05:00,140
and the guy says actually if you pay

00:04:58,400 --> 00:05:01,910
attention that permission denied error

00:05:00,140 --> 00:05:03,650
is different from the one that you were

00:05:01,910 --> 00:05:05,960
having before now the areas that you

00:05:03,650 --> 00:05:07,850
cannot write the output note that you

00:05:05,960 --> 00:05:11,450
cannot read the input so we're making

00:05:07,850 --> 00:05:13,430
progress the guy looks at your docker

00:05:11,450 --> 00:05:15,140
run syntax and says the problem you're

00:05:13,430 --> 00:05:17,090
happy and you really shouldn't have done

00:05:15,140 --> 00:05:18,560
the chmod right there the problem you

00:05:17,090 --> 00:05:20,960
have is the directory where the files

00:05:18,560 --> 00:05:23,120
are it's only writable by yourself as

00:05:20,960 --> 00:05:26,000
well now before you go away and you do

00:05:23,120 --> 00:05:27,980
another chmod and run grant everyone

00:05:26,000 --> 00:05:29,120
write access to their it might be a

00:05:27,980 --> 00:05:31,580
better idea if you just run the

00:05:29,120 --> 00:05:34,790
container as yourself so you just add

00:05:31,580 --> 00:05:39,800
this - you flag in there and you type in

00:05:34,790 --> 00:05:41,780
the U the UID and GID that the you you

00:05:39,800 --> 00:05:44,450
yourself have instead of using the one

00:05:41,780 --> 00:05:45,860
hard-coded in the container and again

00:05:44,450 --> 00:05:48,050
you have no idea what any of this means

00:05:45,860 --> 00:05:51,470
but you just was you tol copy and paste

00:05:48,050 --> 00:05:54,590
that into your command line and of

00:05:51,470 --> 00:05:56,600
course sorry turns out that we had to

00:05:54,590 --> 00:05:59,000
remove the test containing we did before

00:05:56,600 --> 00:06:02,300
so we'd run that again and finally we

00:05:59,000 --> 00:06:04,190
get an output making progress and the

00:06:02,300 --> 00:06:06,140
problem here is that this is quite

00:06:04,190 --> 00:06:09,080
clunky if you're a data scientist all

00:06:06,140 --> 00:06:11,060
you care about are the tool the version

00:06:09,080 --> 00:06:13,340
that you're running the input and the

00:06:11,060 --> 00:06:15,110
output everything else is just fluff

00:06:13,340 --> 00:06:17,600
that you shouldn't even have to think

00:06:15,110 --> 00:06:19,550
about and not only that remember that

00:06:17,600 --> 00:06:21,440
we're processing millions of us not just

00:06:19,550 --> 00:06:23,150
the one so if you want to do this for a

00:06:21,440 --> 00:06:25,310
really really large scale you end up

00:06:23,150 --> 00:06:27,320
with a for loop that looks a little bit

00:06:25,310 --> 00:06:28,760
like that and if you cannot read or

00:06:27,320 --> 00:06:30,680
interpret in here that's fine that the

00:06:28,760 --> 00:06:32,330
point is actually almost unreadable to

00:06:30,680 --> 00:06:34,940
figure out what's going on here

00:06:32,330 --> 00:06:36,740
so in our cluster we started looking for

00:06:34,940 --> 00:06:38,300
alternatives to docker and we came

00:06:36,740 --> 00:06:41,330
across this tool that was released in

00:06:38,300 --> 00:06:42,860
2016 by sign labs called singularity

00:06:41,330 --> 00:06:45,050
which is a different container engine

00:06:42,860 --> 00:06:46,729
and let's look at how singularity

00:06:45,050 --> 00:06:50,659
actually makes this process so much

00:06:46,729 --> 00:06:52,789
simpler here you can see that the first

00:06:50,659 --> 00:06:54,979
command is actually pulling a docker

00:06:52,789 --> 00:06:57,169
image from a docker registry and storing

00:06:54,979 --> 00:06:59,120
that into a flat file it's actually

00:06:57,169 --> 00:07:01,639
flattening all of the layers in the

00:06:59,120 --> 00:07:04,280
container image and you can then run

00:07:01,639 --> 00:07:05,960
that image file directly you don't even

00:07:04,280 --> 00:07:08,419
need to do singular really run although

00:07:05,960 --> 00:07:10,520
that's also a possibility and by running

00:07:08,419 --> 00:07:13,610
it directly you can also just pass it

00:07:10,520 --> 00:07:15,940
any arguments to the image directly

00:07:13,610 --> 00:07:19,009
without having to even think about it so

00:07:15,940 --> 00:07:21,139
that for loop that we saw before changes

00:07:19,009 --> 00:07:23,389
to something like this I notice also

00:07:21,139 --> 00:07:24,620
that I'm not even having to say which

00:07:23,389 --> 00:07:26,539
user do you want to impersonate

00:07:24,620 --> 00:07:29,300
singularity doesn't allow you to do that

00:07:26,539 --> 00:07:31,879
you can run containers just as yourself

00:07:29,300 --> 00:07:34,250
and also you don't even need to worry

00:07:31,879 --> 00:07:36,259
about by mounting volumes to the

00:07:34,250 --> 00:07:38,389
container because singularity takes care

00:07:36,259 --> 00:07:41,270
of that takes care of that for you as

00:07:38,389 --> 00:07:43,580
well it would automatically map home TMP

00:07:41,270 --> 00:07:46,190
slash dev slash broke and a few other

00:07:43,580 --> 00:07:47,659
ones and the system can configure global

00:07:46,190 --> 00:07:49,190
mount points that should be present on

00:07:47,659 --> 00:07:50,870
all of the containers that are run on

00:07:49,190 --> 00:07:53,060
the host as well so you don't even need

00:07:50,870 --> 00:07:55,909
to worry about by mounting file systems

00:07:53,060 --> 00:07:57,979
as well so if you have a similar use

00:07:55,909 --> 00:07:59,659
case to this and you want your users to

00:07:57,979 --> 00:08:00,949
be able to run containers and not get

00:07:59,659 --> 00:08:02,990
root access which is obviously a

00:08:00,949 --> 00:08:05,659
terrible idea in a shared environment

00:08:02,990 --> 00:08:07,849
like an HPC cluster don't use docker

00:08:05,659 --> 00:08:10,250
have a look at similarity this is the

00:08:07,849 --> 00:08:11,750
URL if you work for these guys come and

00:08:10,250 --> 00:08:14,020
see me after break we can talk about my

00:08:11,750 --> 00:08:14,020
commission

00:08:15,530 --> 00:08:23,620
[Applause]

00:08:26,160 --> 00:08:32,250
we have time for maybe a couple of

00:08:28,690 --> 00:08:32,250
questions just before the next talk

00:08:38,039 --> 00:08:45,310
because this is a tool for

00:08:41,880 --> 00:08:47,050
high-performance computing I was kind of

00:08:45,310 --> 00:08:50,650
assuming it has options for job

00:08:47,050 --> 00:08:53,230
distribution and multiple containers

00:08:50,650 --> 00:08:56,050
across different CPUs in the machine and

00:08:53,230 --> 00:08:59,100
different machines in a cluster how easy

00:08:56,050 --> 00:09:01,930
is that today it doesn't actually

00:08:59,100 --> 00:09:04,450
singularity is to just create and run

00:09:01,930 --> 00:09:07,810
containers distributing jobs across a

00:09:04,450 --> 00:09:09,640
cluster is not the container engines job

00:09:07,810 --> 00:09:12,700
is actually the job scheduler that you

00:09:09,640 --> 00:09:14,980
use for your HPC obviously you have to

00:09:12,700 --> 00:09:16,720
install singularity in maybe every know

00:09:14,980 --> 00:09:18,850
that you have in the in the cluster they

00:09:16,720 --> 00:09:21,250
manage but there are no demons is just

00:09:18,850 --> 00:09:22,540
an ACOD binary that you can just run so

00:09:21,250 --> 00:09:24,279
you could possibly install it in the

00:09:22,540 --> 00:09:26,290
share volume or the shared storage that

00:09:24,279 --> 00:09:27,670
all of the nodes have access to just

00:09:26,290 --> 00:09:32,010
like you would do any other tool that

00:09:27,670 --> 00:09:32,010
you install for Sheridan

00:09:34,680 --> 00:09:37,519
anyone else

00:09:49,760 --> 00:09:57,079
hey Eric I think we met before in a CIA

00:09:52,670 --> 00:10:00,380
conference briefly I believe you we are

00:09:57,079 --> 00:10:01,850
probably using the same HPC so I just

00:10:00,380 --> 00:10:04,160
wanted to see if you have a production

00:10:01,850 --> 00:10:07,220
case that I can use in my company to

00:10:04,160 --> 00:10:08,870
also is it NASA's will computer data

00:10:07,220 --> 00:10:13,519
accessing and running single rich

00:10:08,870 --> 00:10:15,170
containers are using these containers on

00:10:13,519 --> 00:10:17,089
the NASA supercomputer here in New

00:10:15,170 --> 00:10:19,820
Zealand all right now we're using this

00:10:17,089 --> 00:10:21,500
in our in-house cluster actually I do

00:10:19,820 --> 00:10:25,250
have another talk on the first day that

00:10:21,500 --> 00:10:30,199
shows this using this for a big project

00:10:25,250 --> 00:10:31,639
that we plug if you want to see this in

00:10:30,199 --> 00:10:34,070
action did you get this - a

00:10:31,639 --> 00:10:38,000
supercomputer here yet just in a cluster

00:10:34,070 --> 00:10:39,560
you know a company so basically if you

00:10:38,000 --> 00:10:42,949
want to run this container images you

00:10:39,560 --> 00:10:45,170
need to have singularity installed but

00:10:42,949 --> 00:10:48,100
so long as you have that in anywhere you

00:10:45,170 --> 00:10:48,100
can just run the images

00:10:51,519 --> 00:10:57,339
I guess just a follow-on question so

00:10:53,769 --> 00:11:01,720
does anyone know if Niecy allows docker

00:10:57,339 --> 00:11:04,360
or singularity to run on these systems I

00:11:01,720 --> 00:11:07,869
believe the answer is no but don't quote

00:11:04,360 --> 00:11:10,679
me on it probably still in chats with

00:11:07,869 --> 00:11:10,679

YouTube URL: https://www.youtube.com/watch?v=TG_Phv4ppF0


