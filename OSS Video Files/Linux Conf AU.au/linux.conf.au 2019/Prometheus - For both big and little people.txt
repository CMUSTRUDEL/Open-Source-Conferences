Title: Prometheus - For both big and little people
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Simon Lyall

https://2019.linux.conf.au/schedule/presentation/214/

Prometheus is a monitoring and alerting system that has gained wide popularity in the last few years. It is especially popular on cloud and kubernetes clusters.

This talk will running the software in both small (a few machines) and larger sites covering both similarities and differences between them.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,079 --> 00:00:05,940
that first is someone you might

00:00:02,939 --> 00:00:07,340
recognize from many previous system

00:00:05,940 --> 00:00:09,960
administration mini-cons

00:00:07,340 --> 00:00:19,350
Simon Lyle is going to talk to us about

00:00:09,960 --> 00:00:21,689
Prometheus so I'm just talking about

00:00:19,350 --> 00:00:24,480
scaling Prometheus up and down this is

00:00:21,689 --> 00:00:27,119
for big projects and little projects so

00:00:24,480 --> 00:00:29,130
basically what I'm saying is that for me

00:00:27,119 --> 00:00:31,289
I think Prometheus is good for your

00:00:29,130 --> 00:00:33,149
little projects for your small companies

00:00:31,289 --> 00:00:36,059
and for your giant not quite Google

00:00:33,149 --> 00:00:38,610
companies your definition of small

00:00:36,059 --> 00:00:41,700
medium and big may vary from me from me

00:00:38,610 --> 00:00:44,190
as you can see on my resume I had some

00:00:41,700 --> 00:00:46,309
biases I play with kubernetes in ec2

00:00:44,190 --> 00:00:52,309
this will link into some of my talks and

00:00:46,309 --> 00:00:52,309
I can confirm that DevOps is a job title

00:00:53,059 --> 00:00:57,719
so I'm going to go very fast for any

00:00:56,219 --> 00:00:59,219
introductions from Rufus and then I'm

00:00:57,719 --> 00:01:00,930
going to go through two components and

00:00:59,219 --> 00:01:04,619
scaling up and down the different

00:01:00,930 --> 00:01:06,960
components okay so this is just a quick

00:01:04,619 --> 00:01:10,080
introduction of previous so it's about

00:01:06,960 --> 00:01:12,710
them so Prometheus is about metrics so a

00:01:10,080 --> 00:01:15,630
metric is a name with optional labels

00:01:12,710 --> 00:01:17,909
timestamp when you got it and a value

00:01:15,630 --> 00:01:20,159
which is a number if it's not a number

00:01:17,909 --> 00:01:23,119
if it's a big string it's a lot we don't

00:01:20,159 --> 00:01:25,799
care that's first someone else's talk

00:01:23,119 --> 00:01:29,369
Prometheus in its simplest case is a

00:01:25,799 --> 00:01:32,220
single diamond it connects to exporters

00:01:29,369 --> 00:01:34,320
with an HTTP GET it gets the lines and

00:01:32,220 --> 00:01:36,750
mines of values and it does this every

00:01:34,320 --> 00:01:37,710
10 to 15 seconds you can do it a lot you

00:01:36,750 --> 00:01:38,939
can do it more often

00:01:37,710 --> 00:01:41,790
I've heard of people doing it every

00:01:38,939 --> 00:01:44,369
second and they usually break people

00:01:41,790 --> 00:01:46,439
doing it once a minute is a little on

00:01:44,369 --> 00:01:49,770
the slow side people checking your

00:01:46,439 --> 00:01:53,399
metrics every five minutes just wasting

00:01:49,770 --> 00:01:56,130
their time you store it via a local disk

00:01:53,399 --> 00:01:59,579
and it exports an API and does other

00:01:56,130 --> 00:02:02,670
things this is what a label looks like

00:01:59,579 --> 00:02:04,439
it's got a name it's got a bunch of oh

00:02:02,670 --> 00:02:06,149
sorry this is what a metric looks like

00:02:04,439 --> 00:02:08,489
it's got a name it's got a bunch of

00:02:06,149 --> 00:02:11,879
labels and it's got a V so all very

00:02:08,489 --> 00:02:13,860
simple that's just the CPU its head

00:02:11,879 --> 00:02:18,120
three and a half million seconds of idle

00:02:13,860 --> 00:02:19,920
since I booted this machine up you can

00:02:18,120 --> 00:02:23,580
do some funny things with labels this is

00:02:19,920 --> 00:02:26,400
a not a real metric label this is how

00:02:23,580 --> 00:02:28,410
you find out the what your CPU version

00:02:26,400 --> 00:02:30,660
is and silly things like that on a

00:02:28,410 --> 00:02:34,890
machine by hiding them and inside the

00:02:30,660 --> 00:02:37,230
rest of it you can do that it's normally

00:02:34,890 --> 00:02:41,250
just special cases like this don't go

00:02:37,230 --> 00:02:43,500
nuts and this is a query so just some

00:02:41,250 --> 00:02:46,140
simple ones the first one just returns

00:02:43,500 --> 00:02:47,730
some states the second one will tell you

00:02:46,140 --> 00:02:50,430
the number of web servers you have up

00:02:47,730 --> 00:02:53,670
and running you hope and the third one

00:02:50,430 --> 00:02:56,430
just tells you the number of kubernetes

00:02:53,670 --> 00:02:59,700
nodes you have in each AWS availability

00:02:56,430 --> 00:03:01,230
zone the third one is relatively on the

00:02:59,700 --> 00:03:04,650
simple scale

00:03:01,230 --> 00:03:06,390
I have personally at work we use funds

00:03:04,650 --> 00:03:08,310
about three times that long and I've

00:03:06,390 --> 00:03:10,220
seen people with longer ones but the

00:03:08,310 --> 00:03:13,470
longer they get the worse they file

00:03:10,220 --> 00:03:15,720
these things will return either a single

00:03:13,470 --> 00:03:18,630
metric if you just ask for the last one

00:03:15,720 --> 00:03:20,190
or they'll return a whole string if you

00:03:18,630 --> 00:03:22,830
go for the single you're looking at like

00:03:20,190 --> 00:03:25,350
hey is it up or down if you're looking

00:03:22,830 --> 00:03:28,380
for a whole series of them then you may

00:03:25,350 --> 00:03:37,290
graph it or you may get a sum of a

00:03:28,380 --> 00:03:38,790
trending thing towards that okay so the

00:03:37,290 --> 00:03:40,980
bit I'm gonna look at now is getting

00:03:38,790 --> 00:03:43,410
data into previous there's three main

00:03:40,980 --> 00:03:46,560
ways you have exporters so an exporter

00:03:43,410 --> 00:03:48,930
talks to something else a simple case

00:03:46,560 --> 00:03:51,450
might be a database so it talks SQL it

00:03:48,930 --> 00:03:53,250
talks whatever language your database

00:03:51,450 --> 00:03:55,650
exports to give it the metrics number of

00:03:53,250 --> 00:03:57,690
connections or sort of and then on the

00:03:55,650 --> 00:04:00,420
other side as exposes at an HTTP

00:03:57,690 --> 00:04:02,100
endpoint the HTTP endpoint is what

00:04:00,420 --> 00:04:03,540
Prometheus talks to so it's just a bit

00:04:02,100 --> 00:04:06,180
of middleware that squashes in there

00:04:03,540 --> 00:04:09,450
converts a few things there's about a

00:04:06,180 --> 00:04:11,280
hundred out there if you go to the

00:04:09,450 --> 00:04:12,630
previous page and then if you search

00:04:11,280 --> 00:04:15,299
around you'll find there's unofficial

00:04:12,630 --> 00:04:19,950
ones all over the question the next one

00:04:15,299 --> 00:04:21,989
is delete directly metric EPS this is

00:04:19,950 --> 00:04:24,419
where the software itself exposes a port

00:04:21,989 --> 00:04:27,320
you can connect to it and you can get

00:04:24,419 --> 00:04:27,320
some Prometheus data

00:04:27,360 --> 00:04:31,560
that common it's very common in a Cuban

00:04:29,849 --> 00:04:34,409
a nice namespace most of the community

00:04:31,560 --> 00:04:38,129
strings have them there's not much else

00:04:34,409 --> 00:04:41,669
there's traffic which is a load balancer

00:04:38,129 --> 00:04:43,620
does it grow fauna itself so if you talk

00:04:41,669 --> 00:04:44,819
to graphing on a random port it'll tell

00:04:43,620 --> 00:04:48,000
you the number of connections that are

00:04:44,819 --> 00:04:50,039
happening right now and if you are a

00:04:48,000 --> 00:04:52,740
software shopper or web shop or whatever

00:04:50,039 --> 00:04:55,849
you're writing you should that you want

00:04:52,740 --> 00:04:58,590
to monitor you should perhaps put

00:04:55,849 --> 00:05:00,810
metrics in your own app as long as well

00:04:58,590 --> 00:05:03,389
as logs so you know if you're running

00:05:00,810 --> 00:05:08,490
our big a little website like I am at

00:05:03,389 --> 00:05:10,379
work we have Micro Services and a large

00:05:08,490 --> 00:05:14,520
number of micro services not all them

00:05:10,379 --> 00:05:16,800
have libraries and these just expose

00:05:14,520 --> 00:05:20,669
metrics by default and so we can

00:05:16,800 --> 00:05:23,460
actually talk to them at that level so

00:05:20,669 --> 00:05:25,110
what you end up with is lots of layers

00:05:23,460 --> 00:05:29,099
and metrics so this is an example this

00:05:25,110 --> 00:05:32,819
is close to what I have at work other

00:05:29,099 --> 00:05:36,090
people may have more or less so and we

00:05:32,819 --> 00:05:37,949
yeah so we get the same stats we get

00:05:36,090 --> 00:05:39,690
metrics on many layers of the stack so

00:05:37,949 --> 00:05:41,900
at the bottom you have cloud lock so we

00:05:39,690 --> 00:05:45,389
running ec2 we talk to ec2 and we say uh

00:05:41,900 --> 00:05:47,460
how many nodes are up and all this sort

00:05:45,389 --> 00:05:49,379
of crap and where are they and what are

00:05:47,460 --> 00:05:52,349
they doing and what state are they and

00:05:49,379 --> 00:05:54,210
and then we go and we talk to node

00:05:52,349 --> 00:05:56,310
exporter which is just a thing that runs

00:05:54,210 --> 00:05:58,319
it on every machine it tells you the CPU

00:05:56,310 --> 00:06:00,690
it tells you to Ram it tells your disk

00:05:58,319 --> 00:06:03,080
it tells you every network interface how

00:06:00,690 --> 00:06:06,569
many ipv6 packets are dropped last week

00:06:03,080 --> 00:06:10,110
correct like that couplet is part of

00:06:06,569 --> 00:06:13,020
kubernetes it does native stats CA

00:06:10,110 --> 00:06:15,150
Advisor does container stats keep state

00:06:13,020 --> 00:06:17,039
metrics is what kubernetes thinks

00:06:15,150 --> 00:06:19,949
everything's running out citric Citra

00:06:17,039 --> 00:06:24,240
and then there's another page and the X

00:06:19,949 --> 00:06:26,339
page is JMX which is an interface to JVM

00:06:24,240 --> 00:06:28,319
so that returns stats on the JVM

00:06:26,339 --> 00:06:30,779
every turn stats on the application

00:06:28,319 --> 00:06:33,389
within the JVM depends how you configure

00:06:30,779 --> 00:06:36,659
it the applications like I said us of

00:06:33,389 --> 00:06:38,159
our own directly exposed then you have

00:06:36,659 --> 00:06:40,259
even more because you have a service

00:06:38,159 --> 00:06:40,800
mesh between so your network stack

00:06:40,259 --> 00:06:43,110
between

00:06:40,800 --> 00:06:45,509
new things be grabbing numbers off them

00:06:43,110 --> 00:06:46,979
and then you've got load balancers your

00:06:45,509 --> 00:06:48,750
every numbers off them you're talking

00:06:46,979 --> 00:06:50,849
then you have black box so you connect

00:06:48,750 --> 00:06:53,370
to the port on something so you connect

00:06:50,849 --> 00:06:56,099
to port 80 and it takes you two hundred

00:06:53,370 --> 00:06:57,780
milliseconds that's another step then

00:06:56,099 --> 00:07:00,060
you have in our case you have micro

00:06:57,780 --> 00:07:01,740
services and we have this micro service

00:07:00,060 --> 00:07:03,900
here and here connecting to these ones

00:07:01,740 --> 00:07:07,289
here and this one says it takes you know

00:07:03,900 --> 00:07:09,629
two seconds so that's a step that two

00:07:07,289 --> 00:07:11,250
second step that this guy said should be

00:07:09,629 --> 00:07:12,930
attached to this one say this one's guys

00:07:11,250 --> 00:07:14,520
taking two seconds to process those

00:07:12,930 --> 00:07:17,960
requests so you've got to correlate them

00:07:14,520 --> 00:07:20,610
all together and you end up with a Miss

00:07:17,960 --> 00:07:23,969
so you end up with thousands of metrics

00:07:20,610 --> 00:07:26,310
per server at the minimun if you just

00:07:23,969 --> 00:07:28,650
install node exporter which is just a

00:07:26,310 --> 00:07:31,440
CPU disk and except you're on a thing

00:07:28,650 --> 00:07:34,590
you get about six to eight hundred off a

00:07:31,440 --> 00:07:36,419
boring simple VM and you were pulling

00:07:34,590 --> 00:07:39,449
down all those every 15 seconds so you

00:07:36,419 --> 00:07:42,240
get a ton of metrics if you you know you

00:07:39,449 --> 00:07:45,659
have a little web farm you know 50

00:07:42,240 --> 00:07:47,969
servers and nothing else you could be

00:07:45,659 --> 00:07:50,789
doing hundred thousand metrics just like

00:07:47,969 --> 00:07:53,490
that very quickly every 15 seconds grows

00:07:50,789 --> 00:07:55,620
very fast if you have over left metrics

00:07:53,490 --> 00:07:58,440
like I did before they're hard to

00:07:55,620 --> 00:08:00,990
correlate with each other everything has

00:07:58,440 --> 00:08:03,599
a different view slightly different view

00:08:00,990 --> 00:08:06,120
of what memory is and how much memory

00:08:03,599 --> 00:08:07,949
something uses because they're measuring

00:08:06,120 --> 00:08:10,979
at a different layer in the stack they

00:08:07,949 --> 00:08:13,590
also call things differently so some

00:08:10,979 --> 00:08:15,930
things will call VM an instant some will

00:08:13,590 --> 00:08:17,879
call it a node you have pods versus

00:08:15,930 --> 00:08:22,550
containers all sorts of layers it's

00:08:17,879 --> 00:08:26,009
quite hard to correlate it's hard work

00:08:22,550 --> 00:08:30,740
some some sources are costly to talk to

00:08:26,009 --> 00:08:34,370
so you have cloud watch charges you

00:08:30,740 --> 00:08:38,099
0.001 stats per step to grab

00:08:34,370 --> 00:08:41,070
unfortunately if you grab a few hundred

00:08:38,099 --> 00:08:43,709
every 15 seconds for a few months if for

00:08:41,070 --> 00:08:45,390
a month that's serious money hundreds of

00:08:43,709 --> 00:08:47,040
dollars quite you can get hundred-dollar

00:08:45,390 --> 00:08:49,440
cloud watch bills without even trying

00:08:47,040 --> 00:08:54,329
you can get $10,000 cloud watch bills

00:08:49,440 --> 00:08:56,910
with very simply

00:08:54,329 --> 00:08:59,220
another problem is you have code and

00:08:56,910 --> 00:09:01,529
accidents instrumented and you can't

00:08:59,220 --> 00:09:03,839
instrument because hey we didn't write

00:09:01,529 --> 00:09:05,339
it with instrumentation and if you go to

00:09:03,839 --> 00:09:06,869
the code group and ask them they say

00:09:05,339 --> 00:09:11,420
well you know put it on their backlog

00:09:06,869 --> 00:09:11,420
and maybe next year or the year after

00:09:11,790 --> 00:09:18,559
so this is what I recommend less if

00:09:13,949 --> 00:09:22,049
you're a small like so small home

00:09:18,559 --> 00:09:24,600
slightly bigger than home or you know my

00:09:22,049 --> 00:09:26,339
minimal minimal Viable Product just use

00:09:24,600 --> 00:09:29,100
the standard exporters use the node

00:09:26,339 --> 00:09:32,610
exporter your deep one for your DB black

00:09:29,100 --> 00:09:34,019
box approach Pro pH there's a part of

00:09:32,610 --> 00:09:37,470
the node exporter as a text files

00:09:34,019 --> 00:09:39,589
exporter you just have a directory you

00:09:37,470 --> 00:09:42,389
dump a file in there that's got

00:09:39,589 --> 00:09:44,790
basically in kubernetes format it's just

00:09:42,389 --> 00:09:46,379
got metric and a number and it'll just

00:09:44,790 --> 00:09:48,569
say I look at it and I'll just export

00:09:46,379 --> 00:09:50,910
that as well so I do that I use it for

00:09:48,569 --> 00:09:52,410
dumb things in my home set up I have the

00:09:50,910 --> 00:09:55,019
thing that keeps the count of how many

00:09:52,410 --> 00:09:56,610
browser tabs I have open and how many

00:09:55,019 --> 00:09:59,459
windows I have open and how many emails

00:09:56,610 --> 00:10:00,929
I have and crap like that you just write

00:09:59,459 --> 00:10:02,309
a little shell script or a little

00:10:00,929 --> 00:10:04,379
whatever script it just grabs these

00:10:02,309 --> 00:10:07,829
numbers and just outputs it it's very

00:10:04,379 --> 00:10:10,559
simple do it every few minutes if you're

00:10:07,829 --> 00:10:12,749
a bigger you'll be using standard

00:10:10,559 --> 00:10:14,999
exporters but you'll be having lots of

00:10:12,749 --> 00:10:17,309
them so you've been running you know

00:10:14,999 --> 00:10:20,279
that group of servers that group of

00:10:17,309 --> 00:10:22,709
servers decorative servers and so each

00:10:20,279 --> 00:10:24,569
of them will have many exporters on its

00:10:22,709 --> 00:10:26,759
a lot to keep track of use of text file

00:10:24,569 --> 00:10:28,169
if you have another monitoring system

00:10:26,759 --> 00:10:30,299
there's gateways between it you can

00:10:28,169 --> 00:10:35,040
query click T pull numbers out things

00:10:30,299 --> 00:10:37,169
like that if you're large you should be

00:10:35,040 --> 00:10:39,179
instrument in your code because you

00:10:37,169 --> 00:10:40,739
don't really care about the low-level

00:10:39,179 --> 00:10:45,239
stuff you care about what your codes

00:10:40,739 --> 00:10:47,910
doing what your service is doing you

00:10:45,239 --> 00:10:50,939
yeah the infrastructure should be taking

00:10:47,910 --> 00:10:55,439
care of itself largely there's a thing

00:10:50,939 --> 00:10:57,600
called Federation to basically you have

00:10:55,439 --> 00:10:59,489
one Prometheus over here pulls a ton of

00:10:57,600 --> 00:11:01,499
data from your data one the starter

00:10:59,489 --> 00:11:03,389
center and this one over here and the

00:11:01,499 --> 00:11:05,669
central one just pulls a sample of that

00:11:03,389 --> 00:11:07,499
or a portion of that that's if you've

00:11:05,669 --> 00:11:08,100
got a huge amount of data and you just

00:11:07,499 --> 00:11:10,380
don't

00:11:08,100 --> 00:11:12,480
want to be querying query and cost you

00:11:10,380 --> 00:11:14,850
know keen fails and service just to find

00:11:12,480 --> 00:11:18,800
a load or something when just a sample

00:11:14,850 --> 00:11:22,139
out of it of work what do we got next

00:11:18,800 --> 00:11:23,819
next one up service discovery so this is

00:11:22,139 --> 00:11:25,589
just to basically find a bunch of

00:11:23,819 --> 00:11:27,209
servers so the three standard methods

00:11:25,589 --> 00:11:29,490
you can just show if you're a

00:11:27,209 --> 00:11:30,959
traditional place and your servers never

00:11:29,490 --> 00:11:32,810
change just put them in the config don't

00:11:30,959 --> 00:11:35,190
worry about it

00:11:32,810 --> 00:11:37,259
next one is there's a bunch of standard

00:11:35,190 --> 00:11:39,360
discovery things so there's ec2 goes off

00:11:37,259 --> 00:11:42,540
Dec to sees what instances are running

00:11:39,360 --> 00:11:45,269
filters those and then says okay there's

00:11:42,540 --> 00:11:47,040
an instance there alright I'll connect

00:11:45,269 --> 00:11:48,360
to it and see if the node export has

00:11:47,040 --> 00:11:50,940
given me stats and all this sort of

00:11:48,360 --> 00:11:53,699
thing just automatic works off-the-shelf

00:11:50,940 --> 00:11:55,680
there's much config what this much

00:11:53,699 --> 00:11:58,380
boilerplate with config that you copy

00:11:55,680 --> 00:12:00,959
over and over and over of you somewhere

00:11:58,380 --> 00:12:02,579
OpenStack kubernetes whatever if you

00:12:00,959 --> 00:12:05,100
don't have an order discovery that's

00:12:02,579 --> 00:12:07,139
built into Prometheus there's a file

00:12:05,100 --> 00:12:08,910
based one it just goes off samples the

00:12:07,139 --> 00:12:11,610
file says give me a list of servers and

00:12:08,910 --> 00:12:13,620
you have some other third-party process

00:12:11,610 --> 00:12:18,000
out there right so that keeps things up

00:12:13,620 --> 00:12:20,819
to date so if you're a small site you

00:12:18,000 --> 00:12:23,009
static config simple auto discovery you

00:12:20,819 --> 00:12:24,500
probably you know you're on ec2 you're

00:12:23,009 --> 00:12:27,680
running a bunch of servers use those

00:12:24,500 --> 00:12:30,180
just evany see if you're medium

00:12:27,680 --> 00:12:32,310
basically the more complicated the

00:12:30,180 --> 00:12:35,310
larger you get the more varied sort of

00:12:32,310 --> 00:12:36,569
things you are the more spread out

00:12:35,310 --> 00:12:38,639
you're gonna have to template your

00:12:36,569 --> 00:12:40,680
auto-discovery you're gonna have to have

00:12:38,639 --> 00:12:43,470
groups you can have to have complicated

00:12:40,680 --> 00:12:46,139
things and you shouldn't be sterilizing

00:12:43,470 --> 00:12:48,569
everything you'll have ones where you

00:12:46,139 --> 00:12:49,980
have to create a template service

00:12:48,569 --> 00:12:51,600
discovery for this machine

00:12:49,980 --> 00:12:53,220
Prometheus instance over here and that

00:12:51,600 --> 00:12:55,800
it just gets more and more complicated

00:12:53,220 --> 00:12:57,779
as you go and you want to automate it

00:12:55,800 --> 00:13:00,689
and template and codify it as soon as

00:12:57,779 --> 00:13:04,319
possible well as soon as soon as it

00:13:00,689 --> 00:13:05,970
saves enough this is alluding I'm not

00:13:04,319 --> 00:13:10,079
going to go into details on a literal

00:13:05,970 --> 00:13:13,319
alluding rules are complicated they're

00:13:10,079 --> 00:13:15,060
also really hard to find good ones you

00:13:13,319 --> 00:13:17,040
go out there and you say Oh show me a

00:13:15,060 --> 00:13:17,550
bunch of eluding rules and they're in

00:13:17,040 --> 00:13:19,740
someone's

00:13:17,550 --> 00:13:21,540
github and you gopher and you go oh

00:13:19,740 --> 00:13:25,080
there's 50 living rules they

00:13:21,540 --> 00:13:27,000
look okay and you grab it and hopefully

00:13:25,080 --> 00:13:30,480
it'll tell you when you just grunt out

00:13:27,000 --> 00:13:32,160
or your some your cluster falls over or

00:13:30,480 --> 00:13:33,960
something and maybe they'll work and

00:13:32,160 --> 00:13:37,170
maybe they won't there's a ton of

00:13:33,960 --> 00:13:39,240
gotchas so I'm not actually going to go

00:13:37,170 --> 00:13:40,620
on the looting rules itself someone

00:13:39,240 --> 00:13:45,050
wants to do a talk next year about them

00:13:40,620 --> 00:13:47,820
maybe they could not me

00:13:45,050 --> 00:13:49,980
so this is some just some general about

00:13:47,820 --> 00:13:52,080
alerting in that so you end up with

00:13:49,980 --> 00:13:53,790
Prometheus you got some of the looting

00:13:52,080 --> 00:13:55,890
rules and then you have an alert manager

00:13:53,790 --> 00:13:57,630
you seen the data too

00:13:55,890 --> 00:14:01,230
you can have multiple loop managers for

00:13:57,630 --> 00:14:04,740
redundancy I guess you should as you get

00:14:01,230 --> 00:14:07,050
bigger just in case there's a thing

00:14:04,740 --> 00:14:09,480
called a am tool for a loop manager tool

00:14:07,050 --> 00:14:11,160
that's a nice way of talking to it you

00:14:09,480 --> 00:14:13,620
can pull out a list of current alerts

00:14:11,160 --> 00:14:15,420
you can say ignore this alert you can

00:14:13,620 --> 00:14:16,920
like play around if you can't figure out

00:14:15,420 --> 00:14:18,990
at a time there's lots of good little

00:14:16,920 --> 00:14:20,280
tricks that's slowly improving that with

00:14:18,990 --> 00:14:23,070
every release so try and get an

00:14:20,280 --> 00:14:24,690
up-to-date one previous releases are

00:14:23,070 --> 00:14:26,810
fairly common

00:14:24,690 --> 00:14:29,520
there's a thing called silences

00:14:26,810 --> 00:14:32,670
therefore basically in maintenance

00:14:29,520 --> 00:14:36,090
it says ignore this alert or something

00:14:32,670 --> 00:14:39,240
like that they get more and more useful

00:14:36,090 --> 00:14:43,110
as the bigger you get also the same with

00:14:39,240 --> 00:14:45,180
labels so if you're little you don't

00:14:43,110 --> 00:14:47,070
care you just alerts they just go to you

00:14:45,180 --> 00:14:50,790
if you're bigger you're gonna have a web

00:14:47,070 --> 00:14:52,410
team a dev team a couple of operations

00:14:50,790 --> 00:14:54,300
teams you want to make sure the right

00:14:52,410 --> 00:14:57,890
team's alerted and you want to make sure

00:14:54,300 --> 00:15:00,360
the importance of labels is on alerts so

00:14:57,890 --> 00:15:05,130
you have to start doing that you have to

00:15:00,360 --> 00:15:10,520
create rules etc etc stuff coming out if

00:15:05,130 --> 00:15:12,900
you're small slack email I guess

00:15:10,520 --> 00:15:15,960
trouble of those is if you miss it

00:15:12,900 --> 00:15:17,190
they'd like your web servers over and

00:15:15,960 --> 00:15:21,000
you you know you weren't looking at

00:15:17,190 --> 00:15:22,560
slack at that time the next ones up the

00:15:21,000 --> 00:15:25,380
incident management vendors sort of page

00:15:22,560 --> 00:15:28,860
of duty type of people at the bottom end

00:15:25,380 --> 00:15:31,050
some give out free accounts page a tree

00:15:28,860 --> 00:15:32,280
and ops junior I believe have free

00:15:31,050 --> 00:15:34,520
accounts with less than a couple of

00:15:32,280 --> 00:15:34,520
users

00:15:35,310 --> 00:15:43,170
at the top end you paying $50 per month

00:15:38,550 --> 00:15:46,320
per user us so their enterprise level

00:15:43,170 --> 00:15:51,230
sort of things if you need to features

00:15:46,320 --> 00:15:53,190
need to reporting features you'll know

00:15:51,230 --> 00:15:54,570
okay

00:15:53,190 --> 00:15:56,460
another thing to worry about is low

00:15:54,570 --> 00:15:58,470
priority alert so to wake me up in the

00:15:56,460 --> 00:16:00,930
middle of night lurtz they're easy

00:15:58,470 --> 00:16:04,260
because all they have to do is get to

00:16:00,930 --> 00:16:06,330
you somehow and wake you up something

00:16:04,260 --> 00:16:09,120
that's hey this machine's going to run

00:16:06,330 --> 00:16:11,730
out of disk space in a week or the suits

00:16:09,120 --> 00:16:14,040
going to expire into my and three weeks

00:16:11,730 --> 00:16:16,950
time what do you do it first you don't

00:16:14,040 --> 00:16:18,480
want those waking you up at 2:00 a.m. so

00:16:16,950 --> 00:16:21,779
you can schedule alerts for office hours

00:16:18,480 --> 00:16:24,089
if you shove them into page duty by

00:16:21,779 --> 00:16:27,779
default I'll just say page duty as a

00:16:24,089 --> 00:16:29,910
default bender they they can do off-peak

00:16:27,779 --> 00:16:33,360
scheduling on peak scheduling things

00:16:29,910 --> 00:16:36,210
like that everyone I've seen said avoid

00:16:33,360 --> 00:16:39,029
email people just if u stream hundreds

00:16:36,210 --> 00:16:42,810
of loops a day people put in a put in a

00:16:39,029 --> 00:16:44,310
folder and never see it yeah this isn't

00:16:42,810 --> 00:16:46,200
a solved problem you could create

00:16:44,310 --> 00:16:48,510
tickets you could send it to a slacker

00:16:46,200 --> 00:16:52,380
you could have it to a dashboard those

00:16:48,510 --> 00:16:55,080
things will scale to 20 a day above that

00:16:52,380 --> 00:16:59,700
I don't know there's isn't a salt

00:16:55,080 --> 00:17:02,370
problem so bit of a summary so if you're

00:16:59,700 --> 00:17:04,800
small just seens you send you're on call

00:17:02,370 --> 00:17:06,929
yourself everything you medium start

00:17:04,800 --> 00:17:10,560
prioritizing high priority low priority

00:17:06,929 --> 00:17:11,850
if you're a big guy you have multiple

00:17:10,560 --> 00:17:16,410
groups multiple levels you've got a

00:17:11,850 --> 00:17:20,189
prioritizing automating fixes so yeah

00:17:16,410 --> 00:17:24,449
you shouldn't you have to put in serious

00:17:20,189 --> 00:17:25,920
solutions at the top storage so the

00:17:24,449 --> 00:17:28,790
problem of this is like I said you're

00:17:25,920 --> 00:17:33,630
generating thousands of metrics a minute

00:17:28,790 --> 00:17:39,240
thousands of seconds it's it's trivially

00:17:33,630 --> 00:17:42,150
trivial very easy easy sorry so you have

00:17:39,240 --> 00:17:43,740
10,000 metrics a second and you can't

00:17:42,150 --> 00:17:49,519
just shut that in my school my scale

00:17:43,740 --> 00:17:52,950
falls over and dies so the defaults

00:17:49,519 --> 00:17:54,509
default TS DB that comes from prometheus

00:17:52,950 --> 00:17:56,490
is great that can handle lots of rights

00:17:54,509 --> 00:17:58,830
it can handle lots of reads the only

00:17:56,490 --> 00:18:02,190
trouble is it's a discs and a directory

00:17:58,830 --> 00:18:05,759
and isn't redundant and if it gets

00:18:02,190 --> 00:18:07,440
corrupt you're out of luck and it's you

00:18:05,759 --> 00:18:10,049
can back it up but that's about all

00:18:07,440 --> 00:18:12,090
and once you run out of your district

00:18:10,049 --> 00:18:14,789
runs out of speed you read Allah or

00:18:12,090 --> 00:18:17,250
things get too big you read a lot

00:18:14,789 --> 00:18:21,600
there are some replacements they are

00:18:17,250 --> 00:18:23,759
complicated clustered databases and they

00:18:21,600 --> 00:18:30,419
are all fairly new in the last year and

00:18:23,759 --> 00:18:33,000
hard to run so for a small site just use

00:18:30,419 --> 00:18:35,549
the local thing back it up roll back in

00:18:33,000 --> 00:18:37,710
the event of an outage and hey if you

00:18:35,549 --> 00:18:38,700
lose a few hours of graphs you should be

00:18:37,710 --> 00:18:40,769
ok

00:18:38,700 --> 00:18:43,169
medium sites they actually advise

00:18:40,769 --> 00:18:45,539
running to instances they're grabbing

00:18:43,169 --> 00:18:48,480
the same data because it doesn't matter

00:18:45,539 --> 00:18:51,210
it's all pull and if this guy dies we'll

00:18:48,480 --> 00:18:53,549
just pull off here and reef backfill

00:18:51,210 --> 00:18:55,889
this and if we keep two weeks of data we

00:18:53,549 --> 00:18:58,470
hope those guys this guy stays up two

00:18:55,889 --> 00:19:02,039
weeks before two weeks so this guy can

00:18:58,470 --> 00:19:06,929
completely fill up and time I didn't

00:19:02,039 --> 00:19:10,110
break that if you're a large site look

00:19:06,929 --> 00:19:12,750
at the external clustered stuff the ones

00:19:10,110 --> 00:19:16,049
there are fan offs in free and flex DB

00:19:12,750 --> 00:19:17,850
Thanos has got announced about six

00:19:16,049 --> 00:19:20,970
months ago and everyone went cool this

00:19:17,850 --> 00:19:22,500
looks cool and yeah well you know if

00:19:20,970 --> 00:19:26,970
you've got time try at multiple nodes

00:19:22,500 --> 00:19:29,399
clustered file systems and use

00:19:26,970 --> 00:19:32,429
Federation to reduce the amount of stuff

00:19:29,399 --> 00:19:38,429
you have to keep so once again not a

00:19:32,429 --> 00:19:41,340
fully solved solution here so display of

00:19:38,429 --> 00:19:44,700
your stuff so it is built in dashboard

00:19:41,340 --> 00:19:47,879
with programs of Prometheus it's good

00:19:44,700 --> 00:19:51,600
enough to play around there's an API

00:19:47,879 --> 00:19:52,980
which everything else talks to so as far

00:19:51,600 --> 00:19:55,950
as I can tell the only thing that

00:19:52,980 --> 00:19:57,869
actually talks to it is graph on there

00:19:55,950 --> 00:20:00,360
may be a bunch of other tools that pull

00:19:57,869 --> 00:20:01,850
data out of it but I haven't run into

00:20:00,360 --> 00:20:04,940
them and I googled

00:20:01,850 --> 00:20:07,429
for this talk and couldn't find much and

00:20:04,940 --> 00:20:09,620
so it means if co-founder doesn't do it

00:20:07,429 --> 00:20:12,230
you're out of luck so like I said if

00:20:09,620 --> 00:20:14,570
your server exports a string of things

00:20:12,230 --> 00:20:17,000
you want to find the cool stuff I don't

00:20:14,570 --> 00:20:18,140
know what to do you might be out of luck

00:20:17,000 --> 00:20:21,020
there

00:20:18,140 --> 00:20:24,020
so co-founder isn't best option it's

00:20:21,020 --> 00:20:26,539
pretty good it's got a promotion source

00:20:24,020 --> 00:20:29,270
it's all pretty good well tested smart

00:20:26,539 --> 00:20:33,140
things and it also even talks to a loop

00:20:29,270 --> 00:20:36,380
manager to graph your alerts and put

00:20:33,140 --> 00:20:41,510
them in a hash things like that the bad

00:20:36,380 --> 00:20:43,100
things back refiner is there are 800

00:20:41,510 --> 00:20:49,340
publicly shared dashboards that use

00:20:43,100 --> 00:20:51,640
Prometheus and most crap people just

00:20:49,340 --> 00:20:54,470
shove them out they download another one

00:20:51,640 --> 00:20:57,350
re-upload it again with a new name it's

00:20:54,470 --> 00:21:01,190
some of them are awful someone a buggy a

00:20:57,350 --> 00:21:03,950
lot of my broken when things changed the

00:21:01,190 --> 00:21:05,570
scary ones as I download and pointed at

00:21:03,950 --> 00:21:07,820
my cluster it's going hey don't cross

00:21:05,570 --> 00:21:09,740
the states reload cluster stairs against

00:21:07,820 --> 00:21:11,960
a giant cluster a big cluster of

00:21:09,740 --> 00:21:14,390
machines and my browser falls over and

00:21:11,960 --> 00:21:18,890
in my previous almost falls over trying

00:21:14,390 --> 00:21:20,510
to get all these queries and yes it's

00:21:18,890 --> 00:21:21,830
pretty obvious you just pick the ones

00:21:20,510 --> 00:21:24,530
with lots of downloads but they're not

00:21:21,830 --> 00:21:27,049
great so this is what they look like the

00:21:24,530 --> 00:21:31,070
bad ones most of the time I get it says

00:21:27,049 --> 00:21:34,700
free I'm using 300% CPU so but that's

00:21:31,070 --> 00:21:37,760
quite common when you try one out the

00:21:34,700 --> 00:21:40,549
fix seems to be just download and try

00:21:37,760 --> 00:21:41,990
them i download it about 54 kubernetes

00:21:40,549 --> 00:21:46,159
and prometheus trying to find the good

00:21:41,990 --> 00:21:50,390
ones and yeah just download them look

00:21:46,159 --> 00:21:52,460
through them yeah but you find the good

00:21:50,390 --> 00:21:54,260
metrics so this is a sample one I

00:21:52,460 --> 00:21:56,840
download it hey these guys look good

00:21:54,260 --> 00:21:58,789
it's got some zeros so this is just a

00:21:56,840 --> 00:22:01,039
kubernetes api so I got this played

00:21:58,789 --> 00:22:03,559
around of it and I got that and that's

00:22:01,039 --> 00:22:05,570
my current one at work you see this is a

00:22:03,559 --> 00:22:06,890
nice little pot so everything's a nice

00:22:05,570 --> 00:22:11,720
little cluster so everything's up and

00:22:06,890 --> 00:22:14,299
running we just have that one so I've

00:22:11,720 --> 00:22:15,590
got a few minutes so another thing is

00:22:14,299 --> 00:22:18,320
arranging dashboard

00:22:15,590 --> 00:22:21,380
so got overview dashboards good show

00:22:18,320 --> 00:22:23,600
summaries drill down dashboards and it's

00:22:21,380 --> 00:22:27,799
just for going over data trying to find

00:22:23,600 --> 00:22:29,390
a thing pointing at one little thing and

00:22:27,799 --> 00:22:32,270
trying to find a problem so here's a

00:22:29,390 --> 00:22:34,789
sample drill down dashboard this is just

00:22:32,270 --> 00:22:37,549
going it's one micro-service got load

00:22:34,789 --> 00:22:42,140
connections memory pods and another one

00:22:37,549 --> 00:22:45,350
point in one database unsolved in this

00:22:42,140 --> 00:22:48,309
area like I said you're giving hundreds

00:22:45,350 --> 00:22:50,870
of metrics you can't display them all

00:22:48,309 --> 00:22:52,580
anywhere you don't even know what

00:22:50,870 --> 00:22:54,980
metrics you're looking for there's lots

00:22:52,580 --> 00:22:57,500
of stuff you will get a bunch of SAS

00:22:54,980 --> 00:22:59,270
vendors saying hey look we have AI and

00:22:57,500 --> 00:23:02,990
we can find the important stuff and all

00:22:59,270 --> 00:23:05,480
that and some of them are better some of

00:23:02,990 --> 00:23:09,620
them sort of do that maybe we need s in

00:23:05,480 --> 00:23:12,620
the open source space overall so for

00:23:09,620 --> 00:23:15,100
display just use the pre-built s-- if

00:23:12,620 --> 00:23:17,570
you're a little guy and graph on a

00:23:15,100 --> 00:23:19,100
medium you'll do the pre veldt's big

00:23:17,570 --> 00:23:20,990
you'll just have to roll your own and

00:23:19,100 --> 00:23:23,450
play around and get things to work and

00:23:20,990 --> 00:23:26,330
automatically create dashboards to do

00:23:23,450 --> 00:23:30,830
one for each year or 50 clusters which

00:23:26,330 --> 00:23:33,740
you will need to do an extra I don't

00:23:30,830 --> 00:23:36,350
have time to talk to this Google DS read

00:23:33,740 --> 00:23:38,539
metrics use metrics this is a way of

00:23:36,350 --> 00:23:41,169
looking at metrics and things finding

00:23:38,539 --> 00:23:44,240
the important stuff not worrying about

00:23:41,169 --> 00:23:47,149
random d up the other 600 metrics that

00:23:44,240 --> 00:23:49,010
you service is doing and this is self

00:23:47,149 --> 00:23:50,899
monitoring so this is a few communities

00:23:49,010 --> 00:23:53,299
falls over something's connecting it to

00:23:50,899 --> 00:23:55,190
it from the outside and will tell you in

00:23:53,299 --> 00:23:57,950
the middle of night you could assert

00:23:55,190 --> 00:24:00,500
your Prometheus has fallen over I flip

00:23:57,950 --> 00:24:05,149
the words sometimes all right overall

00:24:00,500 --> 00:24:07,659
summary yeah overall summary if you're a

00:24:05,149 --> 00:24:11,510
small site just ran a single instance

00:24:07,659 --> 00:24:16,250
configuring to get back it up fellow

00:24:11,510 --> 00:24:18,610
failover use the cheap stuff minimal

00:24:16,250 --> 00:24:21,260
exporters try and keep it really simple

00:24:18,610 --> 00:24:22,250
you know it shouldn't be a full-time job

00:24:21,260 --> 00:24:24,830
or anything like that

00:24:22,250 --> 00:24:28,700
medium site SATs and duplication

00:24:24,830 --> 00:24:29,400
redundancy build stuff automatically try

00:24:28,700 --> 00:24:33,300
the backing

00:24:29,400 --> 00:24:36,809
we data see if you get lucky use pager

00:24:33,300 --> 00:24:38,910
duty or whatever start instrumenting

00:24:36,809 --> 00:24:41,550
more and more stuff all the way for you

00:24:38,910 --> 00:24:43,470
stack another another 100,000 metrics

00:24:41,550 --> 00:24:44,640
never heard anybody and so one day

00:24:43,470 --> 00:24:46,830
someone will come along and they'll want

00:24:44,640 --> 00:24:48,720
them something will break in the middle

00:24:46,830 --> 00:24:52,080
of the night and you'll find that that

00:24:48,720 --> 00:24:57,030
metric told you what it was and lads

00:24:52,080 --> 00:24:58,440
site you've got you're gonna have to

00:24:57,030 --> 00:25:01,230
score you're gonna have to have multiple

00:24:58,440 --> 00:25:03,570
previous instances just pointing it

00:25:01,230 --> 00:25:07,140
little bits your thing redundant or ever

00:25:03,570 --> 00:25:08,910
it's going to be complicated but you're

00:25:07,140 --> 00:25:11,720
a big site you can handle it you can

00:25:08,910 --> 00:25:14,670
have a lot of templating auto-discovery

00:25:11,720 --> 00:25:17,670
look at the clustered storage ideas see

00:25:14,670 --> 00:25:20,360
if you can get them to work you'll have

00:25:17,670 --> 00:25:23,640
to be using pages you datura things and

00:25:20,360 --> 00:25:26,460
start chopping start actually keeping

00:25:23,640 --> 00:25:28,290
less because yeah if you're that big you

00:25:26,460 --> 00:25:45,450
don't really care about stacks on every

00:25:28,290 --> 00:25:47,370
little virtual interface we can take a

00:25:45,450 --> 00:25:52,920
couple of questions while Hamish is

00:25:47,370 --> 00:26:06,420
sitting up for the final talk right at

00:25:52,920 --> 00:26:09,900
the bag question yeah do you think

00:26:06,420 --> 00:26:13,410
instead of a cluster of servers this

00:26:09,900 --> 00:26:16,559
could be used to monitor IOT and devices

00:26:13,410 --> 00:26:18,870
spread around the world it's a little

00:26:16,559 --> 00:26:21,870
hard on IOT because it goes out and

00:26:18,870 --> 00:26:24,720
connects to the in device so you if

00:26:21,870 --> 00:26:25,590
you've got yeah it doesn't work as well

00:26:24,720 --> 00:26:27,960
you need

00:26:25,590 --> 00:26:31,950
I owe tu normally IOT will be pushing

00:26:27,960 --> 00:26:33,510
from each device into somewhere so your

00:26:31,950 --> 00:26:35,910
are gateways that will handle that but

00:26:33,510 --> 00:26:38,760
it's not it's not the model that's

00:26:35,910 --> 00:26:40,830
really designed yeah so this is

00:26:38,760 --> 00:26:42,800
basically pulling architecture pulling

00:26:40,830 --> 00:26:45,110
all the

00:26:42,800 --> 00:26:47,900
the device and pulls it down okay thank

00:26:45,110 --> 00:26:51,140
you yes you use a push gateway or things

00:26:47,900 --> 00:26:53,990
to flip around but it's not native yep

00:26:51,140 --> 00:27:00,260
any other question I've got a quick

00:26:53,990 --> 00:27:01,640
question over here yeah I at work we use

00:27:00,260 --> 00:27:03,170
the pretty much the previous version of

00:27:01,640 --> 00:27:05,870
this meaning and meaning it's got this

00:27:03,170 --> 00:27:07,970
really weird feature where basically it

00:27:05,870 --> 00:27:09,830
takes like a fixed set of samples and

00:27:07,970 --> 00:27:11,990
then takes lower resolution copies of

00:27:09,830 --> 00:27:14,240
that so you you you can get sort of a

00:27:11,990 --> 00:27:16,760
lower resolution look back at a much

00:27:14,240 --> 00:27:18,320
longer time and time this is like cuts

00:27:16,760 --> 00:27:20,780
off after two weeks do you have

00:27:18,320 --> 00:27:23,330
something for like long-range trends so

00:27:20,780 --> 00:27:26,330
fan offs so what you can do is with the

00:27:23,330 --> 00:27:28,850
Federation you can pull off lower older

00:27:26,330 --> 00:27:31,970
samples in there it is only about one

00:27:28,850 --> 00:27:33,440
byte per sample so it's not that hard to

00:27:31,970 --> 00:27:36,830
keep months and months and months of

00:27:33,440 --> 00:27:38,920
that and things like then also also down

00:27:36,830 --> 00:27:42,140
down sample as well

00:27:38,920 --> 00:27:47,440
but yeah there's a lot of work to get to

00:27:42,140 --> 00:27:47,440

YouTube URL: https://www.youtube.com/watch?v=xecazKV3bhU


