Title: What the dep is going on with Go dependency management?
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Adam Harvey

https://2019.linux.conf.au/schedule/presentation/260/

Robust dependency management in Go has been a long time coming. The zeroth generation were third party tools like Glide and Godep that attempted to provide some level of order to your $GOPATH, but had no inclination towards being standard tools. These were then followed by dep, which aimed to be a standard tool in the same way that NPM is/was the standard for JavaScript, Composer is for PHP, and Gem is for Ruby.

In 2019, though, there's a new kid in town, and it's now integrated into the standard toolchain: go mod, formerly known as vgo. In this talk I'll introduce go mod using examples of how it can be used with both greenfield projects and old projects that used those earlier tools, both in terms of projects that are simple downstream users of third party modules and those that are intended to be used by others.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,000 --> 00:00:08,610
welcome thank you

00:00:07,020 --> 00:00:10,440
yeah the risk of repeating the intro

00:00:08,610 --> 00:00:12,809
slightly I'm Adam I work for New Relic

00:00:10,440 --> 00:00:15,000
one of the languages I work on support

00:00:12,809 --> 00:00:16,830
for at New Relic is in fact go which

00:00:15,000 --> 00:00:18,750
means that I still don't really know

00:00:16,830 --> 00:00:22,380
what I'm talking about but my job title

00:00:18,750 --> 00:00:25,550
says theoretically I do so what is going

00:00:22,380 --> 00:00:27,930
on with NGO dependency management well

00:00:25,550 --> 00:00:30,000
before I can actually like just show you

00:00:27,930 --> 00:00:31,679
how awesome it is now or at least you

00:00:30,000 --> 00:00:35,280
know functional it is now which is a

00:00:31,679 --> 00:00:37,469
vast improvement on a year ago I have to

00:00:35,280 --> 00:00:40,770
go through some history five years from

00:00:37,469 --> 00:00:43,590
now when new Gophers are picking up the

00:00:40,770 --> 00:00:47,270
language you won't really need to know

00:00:43,590 --> 00:00:49,590
as much of this but understanding how

00:00:47,270 --> 00:00:51,570
goes package management works today

00:00:49,590 --> 00:00:53,010
really requires understanding how we got

00:00:51,570 --> 00:00:55,100
to the point where goes package

00:00:53,010 --> 00:01:00,120
management works the way it does today

00:00:55,100 --> 00:01:02,340
so when go was first shipped package

00:01:00,120 --> 00:01:04,080
dependency management Ingo was basically

00:01:02,340 --> 00:01:07,229
this tool called go get which is still

00:01:04,080 --> 00:01:09,030
in the the standard go tool and its

00:01:07,229 --> 00:01:11,670
dependency management by not having

00:01:09,030 --> 00:01:14,280
dependency management basically what it

00:01:11,670 --> 00:01:16,740
does is if you run it it goes out to

00:01:14,280 --> 00:01:18,810
github and it downloads the current

00:01:16,740 --> 00:01:22,049
clones the current master of whatever

00:01:18,810 --> 00:01:24,210
package you told it to go clone there is

00:01:22,049 --> 00:01:26,729
interestingly no concept of versioning

00:01:24,210 --> 00:01:30,750
in this or dependencies or really

00:01:26,729 --> 00:01:32,549
anything so basically you go get it it

00:01:30,750 --> 00:01:34,170
would go into your go path and for those

00:01:32,549 --> 00:01:36,540
of you who are not as familiar with go

00:01:34,170 --> 00:01:38,159
go who kind of has this concept of a go

00:01:36,540 --> 00:01:41,009
path and the idea is that you have one

00:01:38,159 --> 00:01:43,290
workspace for all of your projects some

00:01:41,009 --> 00:01:46,590
people really love this it personally

00:01:43,290 --> 00:01:48,540
makes my eye twitch really badly but you

00:01:46,590 --> 00:01:52,470
know it different strikes different

00:01:48,540 --> 00:01:54,149
folks now there were some hacks as this

00:01:52,470 --> 00:01:56,670
thing called go package dot in which

00:01:54,149 --> 00:01:58,200
basically did like URL fronting so you

00:01:56,670 --> 00:02:00,869
could say hey give me this specific

00:01:58,200 --> 00:02:02,280
version of something but these weren't

00:02:00,869 --> 00:02:03,930
generally terribly useful because

00:02:02,280 --> 00:02:07,619
libraries had to set up their import

00:02:03,930 --> 00:02:08,849
paths internally to use the same URL so

00:02:07,619 --> 00:02:10,440
it'd have to be go package studying

00:02:08,849 --> 00:02:11,039
something something something version

00:02:10,440 --> 00:02:14,129
number

00:02:11,039 --> 00:02:15,420
so it was kind of like an interesting

00:02:14,129 --> 00:02:16,739
attempt to work around the problem but

00:02:15,420 --> 00:02:18,329
it just didn't really work in practice

00:02:16,739 --> 00:02:20,010
and unfortunately know this because we

00:02:18,329 --> 00:02:21,569
tried to use a new relic and Mike before

00:02:20,010 --> 00:02:23,790
we even ship the go agent we were just

00:02:21,569 --> 00:02:26,269
like no like there were so many problems

00:02:23,790 --> 00:02:29,760
with that but it was a nice idea

00:02:26,269 --> 00:02:31,610
so the situation in that zeroeth

00:02:29,760 --> 00:02:33,870
generation wasn't really tenable so

00:02:31,610 --> 00:02:36,989
fairly obviously this was about I don't

00:02:33,870 --> 00:02:38,609
know 2013 2014 what about the language

00:02:36,989 --> 00:02:41,159
has already had package managers at that

00:02:38,609 --> 00:02:43,319
point or dependency managers so a whole

00:02:41,159 --> 00:02:45,150
bunch of tools sprung up like weeds to

00:02:43,319 --> 00:02:48,690
implement package and vendor management

00:02:45,150 --> 00:02:50,099
to certain degrees some of them had

00:02:48,690 --> 00:02:52,440
ambitions of becoming the standard

00:02:50,099 --> 00:02:54,359
package manager for example this is from

00:02:52,440 --> 00:02:56,609
a tool called Glide

00:02:54,359 --> 00:02:59,190
and basically glide explicitly called

00:02:56,609 --> 00:03:02,280
out like it was trying to clone cargo

00:02:59,190 --> 00:03:04,859
and p.m. Composer you know basically Jam

00:03:02,280 --> 00:03:06,239
you know whatever package map dependency

00:03:04,859 --> 00:03:09,299
manager you want to think of for

00:03:06,239 --> 00:03:11,040
whatever language you like as direct

00:03:09,299 --> 00:03:13,019
inspiration so kind of had like that

00:03:11,040 --> 00:03:14,670
two-step like you set up your

00:03:13,019 --> 00:03:18,840
dependencies and then you install them

00:03:14,670 --> 00:03:21,840
and then you build kind of set up the go

00:03:18,840 --> 00:03:23,400
team did take some note of this go 1.5

00:03:21,840 --> 00:03:26,099
shipped with what they called the vendor

00:03:23,400 --> 00:03:27,510
experiment which in 2015 which then

00:03:26,099 --> 00:03:29,459
became official about six months later

00:03:27,510 --> 00:03:31,590
and the following release and that

00:03:29,459 --> 00:03:33,419
allowed you or you know your tool like

00:03:31,590 --> 00:03:34,889
glide set up directories that were

00:03:33,419 --> 00:03:37,049
called vendor within your source

00:03:34,889 --> 00:03:38,699
directories and they had special import

00:03:37,049 --> 00:03:40,319
resolution rules and that made things a

00:03:38,699 --> 00:03:41,819
little bit better you know kind of open

00:03:40,319 --> 00:03:43,109
the door that theoretically tooling

00:03:41,819 --> 00:03:47,489
could actually put stuff in the right

00:03:43,109 --> 00:03:50,459
places and manage it for you but there

00:03:47,489 --> 00:03:52,919
were a couple of issues one was go past

00:03:50,459 --> 00:03:55,169
itself the name resolution rules had to

00:03:52,919 --> 00:03:57,480
be fairly complicated because vendor or

00:03:55,169 --> 00:03:59,489
directories have to bind very closely to

00:03:57,480 --> 00:04:01,139
the packages that are in which meant

00:03:59,489 --> 00:04:03,379
that you've got some occasionally really

00:04:01,139 --> 00:04:05,669
entertainingly difficult to debug

00:04:03,379 --> 00:04:06,959
resolution issues where you would think

00:04:05,669 --> 00:04:11,010
you were pulling in one version of

00:04:06,959 --> 00:04:12,239
something or one one clone of something

00:04:11,010 --> 00:04:13,500
and be pulling in a different one

00:04:12,239 --> 00:04:15,510
because it would have jumped somewhere

00:04:13,500 --> 00:04:18,630
or it wasn't binding as tightly as it

00:04:15,510 --> 00:04:19,979
should have the other problem was there

00:04:18,630 --> 00:04:22,049
were just too many alternatives it was

00:04:19,979 --> 00:04:24,010
kind of like I don't know how many

00:04:22,049 --> 00:04:25,990
people were writing Python ten years ago

00:04:24,010 --> 00:04:27,280
but it was kind of like when pot before

00:04:25,990 --> 00:04:29,290
peeps sort of became the standard

00:04:27,280 --> 00:04:31,510
package manager' where you had like easy

00:04:29,290 --> 00:04:32,770
install you had pip you had a whole

00:04:31,510 --> 00:04:36,370
bunch of other stuff I've long since

00:04:32,770 --> 00:04:38,290
repressed through alcohol and they all

00:04:36,370 --> 00:04:40,210
had their own metadata formats they all

00:04:38,290 --> 00:04:42,010
had their own tagging expectations they

00:04:40,210 --> 00:04:44,710
all had their own source code layout

00:04:42,010 --> 00:04:47,500
expectations so if you're using say

00:04:44,710 --> 00:04:49,660
Glide but the person you want to put in

00:04:47,500 --> 00:04:52,180
a package and the person only had sago

00:04:49,660 --> 00:04:53,740
dip which was another tool or Govind or

00:04:52,180 --> 00:04:56,560
as the thing they were using to manage

00:04:53,740 --> 00:04:58,240
their dependencies was you're kind of

00:04:56,560 --> 00:05:03,310
getting into really tricky Interop

00:04:58,240 --> 00:05:05,320
things now while this was going on every

00:05:03,310 --> 00:05:07,420
year go like a lot of newer languages

00:05:05,320 --> 00:05:09,910
does a developer survey

00:05:07,420 --> 00:05:11,440
and one of the questions is what is the

00:05:09,910 --> 00:05:13,810
biggest challenge you personally face

00:05:11,440 --> 00:05:16,210
using go today and it's a freeform text

00:05:13,810 --> 00:05:17,140
field they do no grouping it is actually

00:05:16,210 --> 00:05:20,620
fairly useless

00:05:17,140 --> 00:05:22,930
but the the thing that was always really

00:05:20,620 --> 00:05:26,740
telling in this was from 2016 is that

00:05:22,930 --> 00:05:28,570
like if you read those like almost all

00:05:26,740 --> 00:05:29,980
of those involved could probably involve

00:05:28,570 --> 00:05:31,090
dependency management or package

00:05:29,980 --> 00:05:33,970
management the only one that really

00:05:31,090 --> 00:05:36,700
obviously isn't is generics and IDE and

00:05:33,970 --> 00:05:38,430
even IDE depending on what I do using

00:05:36,700 --> 00:05:40,810
could theoretically still touch on that

00:05:38,430 --> 00:05:42,490
so the groupings kind of pour like the

00:05:40,810 --> 00:05:44,170
highest percentage of 6.9% but if you

00:05:42,490 --> 00:05:45,520
actually go through and like add up all

00:05:44,170 --> 00:05:46,840
of the percentages for anything that

00:05:45,520 --> 00:05:48,370
looks like package management or

00:05:46,840 --> 00:05:50,950
dependency management it was like half

00:05:48,370 --> 00:05:54,970
of the responses so you get the general

00:05:50,950 --> 00:05:56,920
idea so a guy called Sam Boyer went off

00:05:54,970 --> 00:05:58,750
and did a whole bunch of research and

00:05:56,920 --> 00:06:00,880
came up with a design for a tool that he

00:05:58,750 --> 00:06:02,440
called DEP and it was developed with the

00:06:00,880 --> 00:06:04,210
explicit intention of being the official

00:06:02,440 --> 00:06:06,910
dependency management tool for go

00:06:04,210 --> 00:06:08,650
shipped with the standard tooling it

00:06:06,910 --> 00:06:11,260
also has what I would consider to be one

00:06:08,650 --> 00:06:11,980
of the cutest logos I think I've seen in

00:06:11,260 --> 00:06:15,220
quite a while

00:06:11,980 --> 00:06:16,540
I really like that one so in integrator

00:06:15,220 --> 00:06:18,130
with the existing features because it

00:06:16,540 --> 00:06:19,990
was trying to be an official track thing

00:06:18,130 --> 00:06:23,410
and Sam it engaged with the core team

00:06:19,990 --> 00:06:24,850
very early on it relied on gopath so it

00:06:23,410 --> 00:06:26,380
still had that like single workspace

00:06:24,850 --> 00:06:29,920
idea so it didn't disrupt people's

00:06:26,380 --> 00:06:31,720
workflows but it kind of look if you are

00:06:29,920 --> 00:06:33,160
coming from a different language like

00:06:31,720 --> 00:06:35,710
it's too had that separate install and

00:06:33,160 --> 00:06:38,040
update step it dependency resolution and

00:06:35,710 --> 00:06:39,630
use the same you know Sat solver

00:06:38,040 --> 00:06:42,450
approach that everybody else basically

00:06:39,630 --> 00:06:45,450
uses and it was more or less

00:06:42,450 --> 00:06:47,880
recognizable you'll note that I've just

00:06:45,450 --> 00:06:49,320
used the past-tense quite carefully in

00:06:47,880 --> 00:06:51,780
that entire section because that all

00:06:49,320 --> 00:06:54,440
sounds great but before debt became the

00:06:51,780 --> 00:06:57,060
standard tool something else happened

00:06:54,440 --> 00:06:58,320
okay so now we're in 2018 which is

00:06:57,060 --> 00:07:00,900
apparently now the dim distant past

00:06:58,320 --> 00:07:03,060
because it's you know a year ago the

00:07:00,900 --> 00:07:05,310
2017 developer survey was run at the end

00:07:03,060 --> 00:07:08,490
of 2017 and for the first time because

00:07:05,310 --> 00:07:10,500
DEP existed the biggest actual word that

00:07:08,490 --> 00:07:12,450
meant anything was generics instead of

00:07:10,500 --> 00:07:13,770
package management good for generics

00:07:12,450 --> 00:07:15,510
generics have been coming second for a

00:07:13,770 --> 00:07:18,060
long time I think it was time for

00:07:15,510 --> 00:07:19,560
generics get its day in the Sun so

00:07:18,060 --> 00:07:25,530
dependency management wasn't the top

00:07:19,560 --> 00:07:28,350
pain point all of a sudden then Russ Cox

00:07:25,530 --> 00:07:29,670
who was also on the go core team had

00:07:28,350 --> 00:07:31,320
been increasingly and vocally

00:07:29,670 --> 00:07:33,030
dissatisfied with the direction of DEP

00:07:31,320 --> 00:07:36,180
and instead proposed a tool he was

00:07:33,030 --> 00:07:39,150
calling Vigo for version going in a

00:07:36,180 --> 00:07:41,270
series of really academic essays that I

00:07:39,150 --> 00:07:43,460
once tried to read and fell asleep

00:07:41,270 --> 00:07:47,240
there's some good stuff in there

00:07:43,460 --> 00:07:50,820
basically his idea was much more radical

00:07:47,240 --> 00:07:54,240
firstly it got rid of so DEP like a lot

00:07:50,820 --> 00:07:56,310
of package managers it's really slow

00:07:54,240 --> 00:07:59,460
figuring out dependencies because it

00:07:56,310 --> 00:08:00,870
turns out the doing dependency

00:07:59,460 --> 00:08:04,290
management the traditional way is an

00:08:00,870 --> 00:08:06,360
np-complete problem for those of you

00:08:04,290 --> 00:08:07,710
like myself who have an extremely

00:08:06,360 --> 00:08:10,430
mediocre computer science background

00:08:07,710 --> 00:08:14,640
that just means it's really slow

00:08:10,430 --> 00:08:17,280
mathematically really slow so you'll

00:08:14,640 --> 00:08:18,780
notice this in practice if you I guess

00:08:17,280 --> 00:08:19,970
if you think about like how long it

00:08:18,780 --> 00:08:23,850
takes

00:08:19,970 --> 00:08:25,950
NPM to run NPM install when you are

00:08:23,850 --> 00:08:28,080
first setting up a new package and it

00:08:25,950 --> 00:08:31,290
doesn't have a lock file it's pretty

00:08:28,080 --> 00:08:34,979
slow composer in the PHP world used to

00:08:31,290 --> 00:08:38,070
take minutes for complicated dependency

00:08:34,979 --> 00:08:40,530
resolution so Vigo who tried to sidestep

00:08:38,070 --> 00:08:42,390
tries to sidestep that idea by not even

00:08:40,530 --> 00:08:43,890
bothering try and solve the graphs but

00:08:42,390 --> 00:08:45,720
it implements a different algorithm that

00:08:43,890 --> 00:08:47,760
Russ called minimal version selection

00:08:45,720 --> 00:08:49,260
and this is one of the like ten diagrams

00:08:47,760 --> 00:08:50,490
and one of the PDS I'm not going to try

00:08:49,260 --> 00:08:51,480
and explain it because I don't actually

00:08:50,490 --> 00:08:55,260
understand it

00:08:51,480 --> 00:08:57,570
but the basic point is that you get a

00:08:55,260 --> 00:09:01,110
stamp you get the same set of versions

00:08:57,570 --> 00:09:03,720
deterministically out of the the module

00:09:01,110 --> 00:09:04,980
file out of the dependencies regardless

00:09:03,720 --> 00:09:06,000
of if there are newer versions of the

00:09:04,980 --> 00:09:08,130
bane release that would still be

00:09:06,000 --> 00:09:09,780
compatible and he called it minimal

00:09:08,130 --> 00:09:11,550
version selection because it was like a

00:09:09,780 --> 00:09:13,080
minimal algorithm but it also has

00:09:11,550 --> 00:09:15,360
minimal and sense that usually picks the

00:09:13,080 --> 00:09:17,190
minimal version the oldest version if

00:09:15,360 --> 00:09:20,430
possible in your requirements instead of

00:09:17,190 --> 00:09:21,750
the newest this has pros and cons the

00:09:20,430 --> 00:09:23,460
other thing about Vigo which was

00:09:21,750 --> 00:09:26,520
interesting was it got rid of the idea

00:09:23,460 --> 00:09:28,830
of go path for almost everyone so it

00:09:26,520 --> 00:09:31,770
still exists but basically if you have a

00:09:28,830 --> 00:09:33,150
go dot mod file in your file system that

00:09:31,770 --> 00:09:34,950
is considered to be the root of the go

00:09:33,150 --> 00:09:36,960
path no matter what you actually set the

00:09:34,950 --> 00:09:39,510
go path to so you can now have one

00:09:36,960 --> 00:09:40,890
workspace per project this alone

00:09:39,510 --> 00:09:41,870
actually made me think this is a good

00:09:40,890 --> 00:09:46,020
idea

00:09:41,870 --> 00:09:48,330
so with some refinement Vigo was quickly

00:09:46,020 --> 00:09:49,920
and controversially and involved a whole

00:09:48,330 --> 00:09:52,350
bunch of drama I'm not even touching on

00:09:49,920 --> 00:09:54,420
adopted by the ego team and it shipped

00:09:52,350 --> 00:09:55,950
us a nominally experimental feature in

00:09:54,420 --> 00:10:00,480
go 111 which is the current stable

00:09:55,950 --> 00:10:02,850
version back in August it got renamed to

00:10:00,480 --> 00:10:04,200
go mod and instead of Vigo which is

00:10:02,850 --> 00:10:07,380
probably good it fits in more the

00:10:04,200 --> 00:10:09,360
command syntax and then go 1.12 which i

00:10:07,380 --> 00:10:11,820
think is coming out next month or maybe

00:10:09,360 --> 00:10:13,500
in March it will become the officially

00:10:11,820 --> 00:10:17,370
blessed solution so it's a good time to

00:10:13,500 --> 00:10:19,770
get on board so I'm gonna talk about the

00:10:17,370 --> 00:10:22,590
practicalities of using go mod and then

00:10:19,770 --> 00:10:27,120
I'm going to tempt the live demo gods by

00:10:22,590 --> 00:10:29,250
actually trying to use it so as I said

00:10:27,120 --> 00:10:31,530
the key basically is you have the single

00:10:29,250 --> 00:10:33,630
go mod file at the root of your project

00:10:31,530 --> 00:10:36,870
this is basically equivalent to a

00:10:33,630 --> 00:10:38,370
package.json if you know NPM or a gem

00:10:36,870 --> 00:10:40,800
file or something like that

00:10:38,370 --> 00:10:42,780
it contains the canonical import path

00:10:40,800 --> 00:10:44,790
for your project so what other people

00:10:42,780 --> 00:10:48,030
would use like say github comm slash

00:10:44,790 --> 00:10:51,090
something slash project name and it

00:10:48,030 --> 00:10:52,530
includes its dependencies so generally

00:10:51,090 --> 00:10:54,000
speaking at your career generally

00:10:52,530 --> 00:10:55,470
speaking you create it using a tool hook

00:10:54,000 --> 00:10:56,870
go mod in it which I'll show you in a

00:10:55,470 --> 00:10:59,400
minute

00:10:56,870 --> 00:11:01,290
it's just a text format it's human

00:10:59,400 --> 00:11:03,120
readable and writeable it uses its own

00:11:01,290 --> 00:11:05,220
special syntax because of course it does

00:11:03,120 --> 00:11:06,720
but it's not terribly

00:11:05,220 --> 00:11:08,850
hard to understand it kind of looks like

00:11:06,720 --> 00:11:12,930
a go import block if you turn your head

00:11:08,850 --> 00:11:14,610
and squint a bunch another way in which

00:11:12,930 --> 00:11:16,889
going mod differs is it doesn't have a

00:11:14,610 --> 00:11:18,389
lock file so as I said and minimal

00:11:16,889 --> 00:11:21,540
version selection basically says that

00:11:18,389 --> 00:11:23,610
unless developers do shenanigans like

00:11:21,540 --> 00:11:25,230
say re tagging a release that you depend

00:11:23,610 --> 00:11:28,230
on you should get the exact same code

00:11:25,230 --> 00:11:29,910
every time to ensure that it has this

00:11:28,230 --> 00:11:32,069
thing called go dot some and it's just

00:11:29,910 --> 00:11:33,600
cryptographic check sums for the code

00:11:32,069 --> 00:11:35,279
that you've pulled in so it's not a lock

00:11:33,600 --> 00:11:36,600
file and since it describes what comes

00:11:35,279 --> 00:11:38,490
in but used to want to check it in a

00:11:36,600 --> 00:11:42,360
long side because it basically prevents

00:11:38,490 --> 00:11:44,100
tampering down the track the final thing

00:11:42,360 --> 00:11:45,660
that you need to know is that if you're

00:11:44,100 --> 00:11:47,329
going to use go mod and I strongly

00:11:45,660 --> 00:11:50,339
recommend it

00:11:47,329 --> 00:11:53,009
you are absolutely opting into semantic

00:11:50,339 --> 00:11:55,740
versioning go mod makes a whole bunch of

00:11:53,009 --> 00:11:57,300
assumptions that everything is going to

00:11:55,740 --> 00:11:58,560
be semantically version so if you make a

00:11:57,300 --> 00:12:00,180
breaking change you've got to go from

00:11:58,560 --> 00:12:03,990
version one to version two to version

00:12:00,180 --> 00:12:05,220
three but in the go ecosystem that's not

00:12:03,990 --> 00:12:07,050
a huge problem it's a new enough

00:12:05,220 --> 00:12:08,850
ecosystem that kind of already thought

00:12:07,050 --> 00:12:11,069
semver was a good idea by the time go

00:12:08,850 --> 00:12:12,269
came out but you know it's something to

00:12:11,069 --> 00:12:15,629
be aware of particularly if you're

00:12:12,269 --> 00:12:18,480
writing a library all right so let's

00:12:15,629 --> 00:12:20,759
look at a few examples of it in use now

00:12:18,480 --> 00:12:22,589
I can only sort of half see my screen

00:12:20,759 --> 00:12:27,300
here so we're just gonna see what

00:12:22,589 --> 00:12:31,139
happens okay so firstly let's just look

00:12:27,300 --> 00:12:34,860
at a brand-new project so I just have

00:12:31,139 --> 00:12:36,360
nothing in here right now this it's an

00:12:34,860 --> 00:12:38,069
empty project I'm gonna write some go

00:12:36,360 --> 00:12:40,559
files but I just want to set up my god

00:12:38,069 --> 00:12:44,279
my going mod so I have a go path so I

00:12:40,559 --> 00:12:48,180
can just run go mod in it cannot deter

00:12:44,279 --> 00:12:53,009
module path because I don't have one no

00:12:48,180 --> 00:12:55,290
import comments huh this worked but you

00:12:53,009 --> 00:13:00,899
can also just tell it that you want a

00:12:55,290 --> 00:13:03,990
particular path so and there you go and

00:13:00,899 --> 00:13:05,790
that creates a go mod which you can see

00:13:03,990 --> 00:13:07,110
there and it's just a single module line

00:13:05,790 --> 00:13:09,990
that just says hey this is how people

00:13:07,110 --> 00:13:11,879
would import it okay that wasn't very

00:13:09,990 --> 00:13:15,000
interesting let's say you have an

00:13:11,879 --> 00:13:16,949
existing project now this is actually a

00:13:15,000 --> 00:13:19,050
project a real project that I have from

00:13:16,949 --> 00:13:21,000
a side project I was working on a couple

00:13:19,050 --> 00:13:22,709
years ago and you can see that's got

00:13:21,000 --> 00:13:24,390
kind of glide metadata in this I was

00:13:22,709 --> 00:13:25,950
using gliders the dependency manager

00:13:24,390 --> 00:13:27,930
until I realized Glide was hopelessly

00:13:25,950 --> 00:13:30,630
broken and then I actually rewrote this

00:13:27,930 --> 00:13:33,870
in Python but it's still a good example

00:13:30,630 --> 00:13:35,850
I can run going mod in it and going on

00:13:33,870 --> 00:13:37,709
in it can parse about ten different

00:13:35,850 --> 00:13:39,329
types of metadata so can it parses DEP

00:13:37,709 --> 00:13:41,610
it parses glide it passes a whole bunch

00:13:39,329 --> 00:13:44,940
of things when it works it's kind of

00:13:41,610 --> 00:13:47,820
magic let's see if it works okay so it's

00:13:44,940 --> 00:13:49,440
creating a new go mod it picked up the

00:13:47,820 --> 00:13:51,209
module name it's copying the

00:13:49,440 --> 00:13:54,560
requirements from the glide lock which

00:13:51,209 --> 00:13:59,550
was the lock file that Glide created and

00:13:54,560 --> 00:14:01,560
theoretically and I do so you can see

00:13:59,550 --> 00:14:03,360
here that this project this is a GPS

00:14:01,560 --> 00:14:05,730
receiver project uh pulls in this

00:14:03,360 --> 00:14:07,470
library to do like data pausing and

00:14:05,730 --> 00:14:09,450
pulls in this internal library for staff

00:14:07,470 --> 00:14:11,370
it pulls in protobuf because stuff goes

00:14:09,450 --> 00:14:13,529
down a proto Bertha pulls in the serial

00:14:11,370 --> 00:14:16,200
library and it pulls in Redis we were

00:14:13,529 --> 00:14:19,649
talking to read us so basically it was

00:14:16,200 --> 00:14:21,779
able to go in it go mod in it was able

00:14:19,649 --> 00:14:22,740
to parse the Glide dot lock file I had

00:14:21,779 --> 00:14:25,339
and basically pull out those

00:14:22,740 --> 00:14:27,209
dependencies and set up a thing and

00:14:25,339 --> 00:14:33,329
theoretically now I could just go ahead

00:14:27,209 --> 00:14:35,370
and build this so you can see there

00:14:33,329 --> 00:14:37,500
because those packages didn't already

00:14:35,370 --> 00:14:40,440
exist it goes out it finds them it

00:14:37,500 --> 00:14:41,790
clones them it downloads them you did a

00:14:40,440 --> 00:14:45,980
build the source was just using standard

00:14:41,790 --> 00:14:45,980
go to go bill no special command there

00:14:49,820 --> 00:14:54,510
so basically like in two commands going

00:14:52,589 --> 00:14:56,820
mod in it and go build I went from

00:14:54,510 --> 00:14:59,250
something I wrote and about the go 1.6

00:14:56,820 --> 00:15:02,480
days using glide to something that now

00:14:59,250 --> 00:15:05,100
works where's the current version of go

00:15:02,480 --> 00:15:07,020
ok if you have a new bill if you have a

00:15:05,100 --> 00:15:08,399
new clone if it's got the go mod and go

00:15:07,020 --> 00:15:10,470
some files in there then it's the same

00:15:08,399 --> 00:15:14,699
thing you literally just run go build

00:15:10,470 --> 00:15:16,740
and it builds ok and the final one is

00:15:14,699 --> 00:15:18,360
what happens if I want to upgrade a

00:15:16,740 --> 00:15:20,490
dependency and I'm gonna cheat a little

00:15:18,360 --> 00:15:22,079
bit on this one just because I the

00:15:20,490 --> 00:15:26,820
syntax is just long enough that I will

00:15:22,079 --> 00:15:29,399
forget the exact URL so in the go mod

00:15:26,820 --> 00:15:32,670
file that was created this is the same

00:15:29,399 --> 00:15:35,220
one you can see here that we depend on

00:15:32,670 --> 00:15:37,560
version 4 2/3 of the rent us librarians

00:15:35,220 --> 00:15:39,930
then there's like version 5 and version

00:15:37,560 --> 00:15:41,400
6 but I don't want to you know rewrite

00:15:39,930 --> 00:15:43,230
my code there is actually a newer

00:15:41,400 --> 00:15:46,760
version for version as well there's a 4

00:15:43,230 --> 00:15:48,990
to 4 so let's say they want to grab that

00:15:46,760 --> 00:15:51,860
so here's a shell script I wrote earlier

00:15:48,990 --> 00:15:55,410
to cheat and basically here's the syntax

00:15:51,860 --> 00:15:56,790
so basically you studios go get so

00:15:55,410 --> 00:15:58,800
there's no special go mod command it's

00:15:56,790 --> 00:16:00,570
two users go get - you means update

00:15:58,800 --> 00:16:02,030
which has been the case for every

00:16:00,570 --> 00:16:04,680
version of goes since the beginning

00:16:02,030 --> 00:16:07,110
there's the same URL so it's on go

00:16:04,680 --> 00:16:08,490
package dot e in Redis v4 but then you

00:16:07,110 --> 00:16:09,930
can put an out in and then you put in

00:16:08,490 --> 00:16:16,380
the exact version number that you want

00:16:09,930 --> 00:16:21,620
and if I run that it goes and finds it

00:16:16,380 --> 00:16:25,860
it grabs it it should have updated the

00:16:21,620 --> 00:16:27,780
Godot mod file for us it did excellent

00:16:25,860 --> 00:16:34,670
and I should now be able to build it

00:16:27,780 --> 00:16:39,600
with Redis 4 - 4 does that work so

00:16:34,670 --> 00:16:41,460
basically that is in a nutshell go mod

00:16:39,600 --> 00:16:43,110
so the interesting part is kind of the

00:16:41,460 --> 00:16:45,950
integration you don't if you're used to

00:16:43,110 --> 00:16:48,480
using go get and go build and go install

00:16:45,950 --> 00:16:50,310
it basically works the exact same way

00:16:48,480 --> 00:16:51,810
there's just a little bit of magic if

00:16:50,310 --> 00:16:53,760
you have the Godot mod file where it

00:16:51,810 --> 00:16:55,860
does all the resolution for year and it

00:16:53,760 --> 00:16:57,420
just figures and basically that is now

00:16:55,860 --> 00:16:59,310
the root of your go path and you can

00:16:57,420 --> 00:17:01,110
treat it like a normal language project

00:16:59,310 --> 00:17:02,760
in most other languages instead of

00:17:01,110 --> 00:17:05,250
having this whole go path workspace

00:17:02,760 --> 00:17:06,870
concept if you really like the go path

00:17:05,250 --> 00:17:08,790
workspace concept there is a way to

00:17:06,870 --> 00:17:10,290
still use it that way I just don't

00:17:08,790 --> 00:17:11,699
remember off the top of my head what the

00:17:10,290 --> 00:17:13,709
environment variable is to switch that

00:17:11,699 --> 00:17:15,209
back on I would recommend switching to

00:17:13,709 --> 00:17:16,709
this because you know there's a reason

00:17:15,209 --> 00:17:18,930
why almost every other language has

00:17:16,709 --> 00:17:24,270
multiple workspaces per project it's

00:17:18,930 --> 00:17:26,640
just easier to reason about so with that

00:17:24,270 --> 00:17:28,260
I thank you very much for coming and I

00:17:26,640 --> 00:17:30,420
think I have like two minutes if anyone

00:17:28,260 --> 00:17:31,050
has any questions does anyone have any

00:17:30,420 --> 00:17:35,010
questions

00:17:31,050 --> 00:17:36,720
ok get some exercise excellent my Chris

00:17:35,010 --> 00:17:42,840
work I somebody on that side should ask

00:17:36,720 --> 00:17:45,060
next so in a version update slide you

00:17:42,840 --> 00:17:46,490
demonstrated how to update version or

00:17:45,060 --> 00:17:49,400
when use go opposite

00:17:46,490 --> 00:17:52,610
wickedly in which actually supports URL

00:17:49,400 --> 00:17:55,460
right update how do can you do it how do

00:17:52,610 --> 00:17:57,650
you do it if version is a tag in a get

00:17:55,460 --> 00:17:59,600
whatever it's the exact same syntax I

00:17:57,650 --> 00:18:01,700
don't I this was a poor example cuz I

00:17:59,600 --> 00:18:02,990
don't have a github dependency in there

00:18:01,700 --> 00:18:05,420
that would show it boasts the exact same

00:18:02,990 --> 00:18:08,179
syntax OB github calm slash thing slash

00:18:05,420 --> 00:18:10,490
thing at version whatever the tag is and

00:18:08,179 --> 00:18:12,140
underneath what that looks at is it will

00:18:10,490 --> 00:18:14,450
look for a tag with that exact version

00:18:12,140 --> 00:18:15,679
number if it can't find a tag there's

00:18:14,450 --> 00:18:17,600
also syntax to get the latest

00:18:15,679 --> 00:18:19,820
development head of a branch or to get

00:18:17,600 --> 00:18:22,340
master and these are all documented in

00:18:19,820 --> 00:18:23,600
the go documentation so rather than

00:18:22,340 --> 00:18:24,860
trying to iterate through the various

00:18:23,600 --> 00:18:27,500
possibilities I would just recommend

00:18:24,860 --> 00:18:28,970
that that you go have a quick look at

00:18:27,500 --> 00:18:32,300
the going mod documentation and it's all

00:18:28,970 --> 00:18:38,470
pretty pretty simply laid out any more

00:18:32,300 --> 00:18:38,470

YouTube URL: https://www.youtube.com/watch?v=1CYqo_NdfLo


