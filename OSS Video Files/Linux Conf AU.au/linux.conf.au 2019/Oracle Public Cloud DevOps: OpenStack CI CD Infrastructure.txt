Title: Oracle Public Cloud DevOps: OpenStack CI CD Infrastructure
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Dong Ma

https://2019.linux.conf.au/schedule/presentation/202/

Oracle Public Cloud DevOps development uses a Continuous 
Integration/Continuous Deployment (CI/CD) workflow for OpenStack 
development.  This talk will provide an overview of the Oracle Public 
Cloud CI/CD workflow and tools used in our DevOps practice, and our 
experiences with these tools.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,030 --> 00:00:04,650
all right our next talk is Tom Marr who

00:00:02,669 --> 00:00:15,260
is going to talk to us about Oracle's

00:00:04,650 --> 00:00:19,260
public cloud divorce practice how do I

00:00:15,260 --> 00:00:22,289
thank you Joe in my session today I will

00:00:19,260 --> 00:00:26,670
talk about how to leverage the OpenStack

00:00:22,289 --> 00:00:30,840
CI CD instructor into our Oracle public

00:00:26,670 --> 00:00:35,100
cloud DevOps development in this session

00:00:30,840 --> 00:00:40,320
I will introduce OpenStack the ICD

00:00:35,100 --> 00:00:44,340
workflow and tours and what problems

00:00:40,320 --> 00:00:46,260
they faced in our alcohol crowd public

00:00:44,340 --> 00:00:49,500
cloud candidates in her DevOps

00:00:46,260 --> 00:00:54,170
development and how to leverage the

00:00:49,500 --> 00:00:54,170
OpenStack say ICD into our operations

00:00:56,690 --> 00:01:04,290
okay first to introduce myself my name

00:01:00,449 --> 00:01:08,610
is dama currently I lived in Beijing

00:01:04,290 --> 00:01:11,280
China this is my first time come to New

00:01:08,610 --> 00:01:16,950
Zealand it's a very beautiful country

00:01:11,280 --> 00:01:22,500
and this nice with better it's more than

00:01:16,950 --> 00:01:26,549
Beijing and currently I work for Oracle

00:01:22,500 --> 00:01:29,600
as IT principal consultant at cloud

00:01:26,549 --> 00:01:32,430
operations China many focus on the

00:01:29,600 --> 00:01:37,020
Republic of China decent her DevOps

00:01:32,430 --> 00:01:41,340
development before the Oracle I worked

00:01:37,020 --> 00:01:46,560
for the whole Packard Enterprise as open

00:01:41,340 --> 00:01:50,009
stacks of engineer focus on Jenkins and

00:01:46,560 --> 00:01:53,820
OpenStack CI upstream contribution I

00:01:50,009 --> 00:01:59,520
also I'm also a called contribute around

00:01:53,820 --> 00:02:03,229
for solo project which is open source

00:01:59,520 --> 00:02:03,229
and the lessons analysis course

00:02:07,570 --> 00:02:14,380
we'll review what I want to talk today I

00:02:10,450 --> 00:02:19,780
will first introduce openstax the sed

00:02:14,380 --> 00:02:23,490
workflow and tools and how OpenStack in

00:02:19,780 --> 00:02:26,560
structure looks like with this workflow

00:02:23,490 --> 00:02:31,590
and then I will talk about the problems

00:02:26,560 --> 00:02:35,230
they are facing in our China data center

00:02:31,590 --> 00:02:39,410
operations and how to leverage the CSTO

00:02:35,230 --> 00:02:42,539
flow and host in our descent her

00:02:39,410 --> 00:02:42,539
[Music]

00:02:50,840 --> 00:03:04,070
this diagram it shows the basic workflow

00:02:56,070 --> 00:03:07,440
of OpenStack CI and the OpenStack CI is

00:03:04,070 --> 00:03:13,320
very different bits others they I work

00:03:07,440 --> 00:03:19,400
flow it introduced a new color scope

00:03:13,320 --> 00:03:21,930
code review system instead of directory

00:03:19,400 --> 00:03:27,830
submitted coding into the version

00:03:21,930 --> 00:03:30,480
control system the developer first

00:03:27,830 --> 00:03:34,100
submit a patch into the code review

00:03:30,480 --> 00:03:38,700
system and then it will trigger the

00:03:34,100 --> 00:03:42,990
check test apply the check test will run

00:03:38,700 --> 00:03:47,420
a bunch of jackasses it'll be okay

00:03:42,990 --> 00:03:52,530
score after finish it if that has passed

00:03:47,420 --> 00:03:54,690
it will give a plus one school and if it

00:03:52,530 --> 00:03:59,250
field if it'll be okay

00:03:54,690 --> 00:04:03,600
miners one school also if it failed it

00:03:59,250 --> 00:04:07,080
will give some like job locks back to

00:04:03,600 --> 00:04:10,080
the developer they can check what's what

00:04:07,080 --> 00:04:12,620
what's the problem and try to fix it as

00:04:10,080 --> 00:04:17,850
soon as possible

00:04:12,620 --> 00:04:22,950
in this workflow it also need develop

00:04:17,850 --> 00:04:27,150
her to review the review and score the

00:04:22,950 --> 00:04:34,530
patch the core developer need to check

00:04:27,150 --> 00:04:37,800
the patch if they can if if we look if

00:04:34,530 --> 00:04:41,430
result the patch is good enough it will

00:04:37,800 --> 00:04:45,270
cause of hatch base class two and if the

00:04:41,430 --> 00:04:48,450
result says patch is not good and needs

00:04:45,270 --> 00:04:52,710
some work to do it key it'll be okay

00:04:48,450 --> 00:04:57,900
miners one school and it will also as

00:04:52,710 --> 00:05:03,190
the comments to the patch and the

00:04:57,900 --> 00:05:08,980
developer can communicate with comments

00:05:03,190 --> 00:05:12,040
call reviewer and how it affects only if

00:05:08,980 --> 00:05:16,800
the checked has two plus y and gas to

00:05:12,040 --> 00:05:22,330
more co reviewer to press to score the

00:05:16,800 --> 00:05:25,960
price to this patch can be approved by

00:05:22,330 --> 00:05:31,150
the caller viewer and then interval

00:05:25,960 --> 00:05:34,720
trigger test cause a key test the key

00:05:31,150 --> 00:05:40,120
test is refers to the process of running

00:05:34,720 --> 00:05:44,290
regression test before Stan made patch

00:05:40,120 --> 00:05:48,840
against the source code repository to

00:05:44,290 --> 00:05:55,920
provide it will not introduce new bugs

00:05:48,840 --> 00:06:01,150
also the gate test is to make sure that

00:05:55,920 --> 00:06:04,360
the duration of the check test between

00:06:01,150 --> 00:06:06,760
between the check test and the code

00:06:04,360 --> 00:06:09,550
merge to the code review system sorry

00:06:06,760 --> 00:06:13,180
before more to the version control

00:06:09,550 --> 00:06:19,210
system during this period there is some

00:06:13,180 --> 00:06:25,570
new boxing introduced also there are

00:06:19,210 --> 00:06:32,230
some other job queue added to the kill

00:06:25,570 --> 00:06:36,640
test based on some projects after it has

00:06:32,230 --> 00:06:43,919
finished it also will cater score if get

00:06:36,640 --> 00:06:50,040
past the code will murder the master

00:06:43,919 --> 00:06:50,040
trunk of the version control system I

00:06:50,430 --> 00:06:58,990
didn't mention histogram is there also

00:06:54,900 --> 00:07:03,660
another post few jobs in this workflow

00:06:58,990 --> 00:07:06,660
like to generated some documentation

00:07:03,660 --> 00:07:06,660
automatically

00:07:10,680 --> 00:07:17,069
to implement this workflow the OpenStack

00:07:13,620 --> 00:07:22,169
instructor consider phases this book

00:07:17,069 --> 00:07:26,430
flow you will submit the local changes

00:07:22,169 --> 00:07:30,569
where the kid kid - review command line

00:07:26,430 --> 00:07:36,000
and the code will go to the carrot code

00:07:30,569 --> 00:07:39,569
review systems and the it will trigger

00:07:36,000 --> 00:07:43,220
the integration pipeline management by

00:07:39,569 --> 00:07:46,800
the to tour and to communicate with

00:07:43,220 --> 00:07:50,909
Jenkins master through the gear my

00:07:46,800 --> 00:07:56,880
server and and the drinking's master ran

00:07:50,909 --> 00:08:00,750
the jobs through their slave nodes also

00:07:56,880 --> 00:08:06,710
the slave node a magnet bike - how the

00:08:00,750 --> 00:08:10,530
North Pole the North Pole is like

00:08:06,710 --> 00:08:14,370
surveys used by the OpenStack instructor

00:08:10,530 --> 00:08:16,740
to manage many devstack images on the

00:08:14,370 --> 00:08:26,190
cloud server for use for the OpenStack

00:08:16,740 --> 00:08:29,750
project testing yeah currently there is

00:08:26,190 --> 00:08:37,469
some changes during the true history

00:08:29,750 --> 00:08:41,300
released it comes out a new way used to

00:08:37,469 --> 00:08:46,160
v3 - instead of the Jenkins master slave

00:08:41,300 --> 00:08:50,250
say a sister the two V's recant directly

00:08:46,160 --> 00:08:55,279
communicated to the to the node through

00:08:50,250 --> 00:08:55,279
the ASBO playbook

00:08:59,480 --> 00:09:07,640
okay so what problem they have facing

00:09:04,760 --> 00:09:11,420
our our republic of china' decent her

00:09:07,640 --> 00:09:15,280
DevOps actually we have faced many

00:09:11,420 --> 00:09:19,790
problem earlier first it's hard to

00:09:15,280 --> 00:09:23,360
manage the DevOps development code we

00:09:19,790 --> 00:09:28,840
have developed a lot of script to run

00:09:23,360 --> 00:09:34,100
our daily jobs but with the code base

00:09:28,840 --> 00:09:39,410
increased it's hard to manage and it's

00:09:34,100 --> 00:09:44,680
hard to treat the packs so it needs a

00:09:39,410 --> 00:09:50,120
tool to manage our scripts also our team

00:09:44,680 --> 00:09:53,750
we didn't have a standard workflow for

00:09:50,120 --> 00:10:01,030
the DevOps development currently our

00:09:53,750 --> 00:10:05,500
team it just just manage the script

00:10:01,030 --> 00:10:12,500
under another server and we want to

00:10:05,500 --> 00:10:16,760
leverage some open source B to implement

00:10:12,500 --> 00:10:18,730
some what would flow OpenStack is wild

00:10:16,760 --> 00:10:21,890
practice we try to do it

00:10:18,730 --> 00:10:26,090
another problems is rapid changes of

00:10:21,890 --> 00:10:28,220
Oracle public cloud components in our

00:10:26,090 --> 00:10:32,240
cloud environment we have many

00:10:28,220 --> 00:10:36,370
components and our operation but we also

00:10:32,240 --> 00:10:43,370
need to add more components in the later

00:10:36,370 --> 00:10:49,820
so we need to get a solid efficiency

00:10:43,370 --> 00:10:52,690
would flow to give us more strong

00:10:49,820 --> 00:10:52,690
automation works

00:10:55,240 --> 00:11:01,679
yeah how to leverage the OpenStack Bay

00:11:01,860 --> 00:11:12,160
first the open stack up flow and close

00:11:08,050 --> 00:11:17,019
our opens also it's free available to

00:11:12,160 --> 00:11:21,220
use it we try to get some trolls into

00:11:17,019 --> 00:11:25,139
our environment this Tyrel this diagram

00:11:21,220 --> 00:11:32,980
showed like the flow views in our

00:11:25,139 --> 00:11:35,610
genetics in her first we used use one

00:11:32,980 --> 00:11:41,949
internal key deposit rate many

00:11:35,610 --> 00:11:45,369
management our operation script and we

00:11:41,949 --> 00:11:50,790
involved code review system carried for

00:11:45,369 --> 00:11:54,999
the code review and use integration

00:11:50,790 --> 00:12:04,149
management tool tool to schedule and the

00:11:54,999 --> 00:12:10,170
report the test pipeline also we used

00:12:04,149 --> 00:12:12,999
the Jenkins to manage the jobs we also

00:12:10,170 --> 00:12:18,100
include one was called Jenkins drop

00:12:12,999 --> 00:12:22,119
builder we try to automate our operation

00:12:18,100 --> 00:12:33,720
jobs with the Yama file so it will be

00:12:22,119 --> 00:12:38,529
easy to run by the Jenkins as a back-end

00:12:33,720 --> 00:12:41,319
you can see there is a red red part we

00:12:38,529 --> 00:12:44,649
have put it together in our management

00:12:41,319 --> 00:12:48,999
host at the back end we have suite half

00:12:44,649 --> 00:12:55,679
of cost to rent jobs one is how is the

00:12:48,999 --> 00:13:01,660
test host it is it is test system to our

00:12:55,679 --> 00:13:03,929
tasks result I mean how to say without

00:13:01,660 --> 00:13:03,929
any

00:13:05,720 --> 00:13:14,000
errors so the errors they are not

00:13:09,889 --> 00:13:17,990
influenced our production system before

00:13:14,000 --> 00:13:21,050
we run jobs or our production systems we

00:13:17,990 --> 00:13:24,290
also have a state host it's called a pre

00:13:21,050 --> 00:13:25,009
production system is we are running a

00:13:24,290 --> 00:13:32,629
kind

00:13:25,009 --> 00:13:42,199
jobs for the four people to run it on

00:13:32,629 --> 00:13:46,790
the production host currently we have

00:13:42,199 --> 00:13:51,139
levied following open circuit roles we

00:13:46,790 --> 00:13:54,019
have used gate for the version control

00:13:51,139 --> 00:13:57,310
system and you use carrot as a code

00:13:54,019 --> 00:14:01,220
review system we will do for the

00:13:57,310 --> 00:14:05,449
integration pipeline amendment and you

00:14:01,220 --> 00:14:11,870
drinking for the CI tools and use Jing

00:14:05,449 --> 00:14:15,800
contributor to automation our jobs in

00:14:11,870 --> 00:14:20,259
the liter as the Jew is rereleased we

00:14:15,800 --> 00:14:26,980
have some plan to implement some part

00:14:20,259 --> 00:14:29,689
use ansible and to v3 to replace Jenkins

00:14:26,980 --> 00:14:30,500
to Android's configuration method for

00:14:29,689 --> 00:14:39,170
different jobs

00:14:30,500 --> 00:14:46,009
our main host directly we also involve

00:14:39,170 --> 00:14:53,500
another tool called helpful as internal

00:14:46,009 --> 00:14:57,559
alcohol they have some Jose Herman in t

00:14:53,500 --> 00:15:01,160
Herman team try to build and change the

00:14:57,559 --> 00:15:04,610
instructor use a telephone so we want to

00:15:01,160 --> 00:15:09,649
alive is a whole although in structure

00:15:04,610 --> 00:15:17,149
so we can integrate our service into the

00:15:09,649 --> 00:15:19,160
terraform part so for OpenStack part as

00:15:17,149 --> 00:15:24,170
it are open cells so

00:15:19,160 --> 00:15:28,940
you can get all the tools free available

00:15:24,170 --> 00:15:31,930
also under opens OpenStack projects that

00:15:28,940 --> 00:15:37,790
is another project called OpenStack CI

00:15:31,930 --> 00:15:42,500
the project is created to help serve

00:15:37,790 --> 00:15:47,240
hard project to leverage the OpenStack

00:15:42,500 --> 00:15:49,780
CI CD will flow across and to use it in

00:15:47,240 --> 00:15:52,780
their own system or in their own

00:15:49,780 --> 00:15:52,780
projects

00:15:59,450 --> 00:16:09,710
okay I think that that's all my talks

00:16:05,270 --> 00:16:14,080
talked about if you have any questions

00:16:09,710 --> 00:16:14,080
as a I have four minutes

00:16:25,230 --> 00:16:28,950
I noticed before you had Garrett and

00:16:27,540 --> 00:16:30,839
Jenkins as part of your infrastructure

00:16:28,950 --> 00:16:33,089
up there do you do you have any

00:16:30,839 --> 00:16:37,399
resiliency in those services or are they

00:16:33,089 --> 00:16:43,500
merely individual virtual machines named

00:16:37,399 --> 00:16:49,019
currently our test the test knows is a

00:16:43,500 --> 00:16:51,899
virtual machine and accurate protection

00:16:49,019 --> 00:16:54,750
and a pre-production host is our real

00:16:51,899 --> 00:16:57,389
machine so we didn't you'll continue

00:16:54,750 --> 00:16:58,860
currently yeah so I couldn't hear that

00:16:57,389 --> 00:17:03,170
last bit you're saying you didn't use

00:16:58,860 --> 00:17:03,170
continuous integration container sorry

00:17:11,089 --> 00:17:14,350
any other questions

00:17:15,340 --> 00:17:21,820
this is my contact if you have and

00:17:18,250 --> 00:17:23,020
cousin you carefree coming thank you

00:17:21,820 --> 00:17:26,900
okay thank you

00:17:23,020 --> 00:17:26,900

YouTube URL: https://www.youtube.com/watch?v=WRxez7Eh8KY


