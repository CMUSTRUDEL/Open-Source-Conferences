Title: Creating Ubuntu and Debian container base images, the old and  simple way
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Hamish Coleman

https://2019.linux.conf.au/schedule/presentation/243/

Containers are everywhere, but do you know how to create the root filesystems that they use? There are simple tools available to create your own custom Ubuntu or Debian root filesystem. By using these tools to build environments matching your needs, you will end up with a better understanding of how containers are built - and how to debug them - as well as gain access to more options that can speed up your own builds and testing.

In this presentation, I will show the debootstrap and multistrap tools and provide worked examples on how to avoid their gotchas and end up with a bootable root filesystem.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,890 --> 00:00:07,560
okay we have one more talk for you

00:00:05,359 --> 00:00:09,719
Hamish is going to talk to us about

00:00:07,560 --> 00:00:22,109
creating to ban Debian and Ubuntu

00:00:09,719 --> 00:00:25,920
container base images so I wanted to

00:00:22,109 --> 00:00:29,880
talk to you about how I think it's

00:00:25,920 --> 00:00:31,920
simpler to create base images and well I

00:00:29,880 --> 00:00:34,649
thought I've been say well what is the

00:00:31,920 --> 00:00:37,399
base image a lot of people are using

00:00:34,649 --> 00:00:39,719
containerized systems these days and

00:00:37,399 --> 00:00:41,460
underneath that there's still going to

00:00:39,719 --> 00:00:43,469
be a root filesystem that the system

00:00:41,460 --> 00:00:44,969
uses it's the one place you can expect

00:00:43,469 --> 00:00:46,829
to be there when their system boots up

00:00:44,969 --> 00:00:49,020
it's going to be there on every computer

00:00:46,829 --> 00:00:51,030
that it has more than just a single

00:00:49,020 --> 00:00:52,879
binary image I'm not going to talk about

00:00:51,030 --> 00:00:57,570
them that's not what I'm here for

00:00:52,879 --> 00:01:01,739
but you might ask where do your base

00:00:57,570 --> 00:01:03,180
images come from if you don't know where

00:01:01,739 --> 00:01:06,330
your base images come from can you trust

00:01:03,180 --> 00:01:08,130
them are they provided by somebody you

00:01:06,330 --> 00:01:09,900
know are they provided by something you

00:01:08,130 --> 00:01:11,340
know will not change I they've just

00:01:09,900 --> 00:01:15,720
provided by some guy at the back of the

00:01:11,340 --> 00:01:17,310
pub so why not build your own or at

00:01:15,720 --> 00:01:19,350
least understand how to build them

00:01:17,310 --> 00:01:21,630
because once you know how to build the

00:01:19,350 --> 00:01:23,630
images you have the ability to actually

00:01:21,630 --> 00:01:25,950
keep track of what works what doesn't

00:01:23,630 --> 00:01:27,119
know that if something does change in

00:01:25,950 --> 00:01:29,340
the outsource the infrastructure that

00:01:27,119 --> 00:01:31,020
you're relying on that you can cope with

00:01:29,340 --> 00:01:33,090
that change and replace it with

00:01:31,020 --> 00:01:34,320
something else you've built or by

00:01:33,090 --> 00:01:36,600
building it yourself and you might they

00:01:34,320 --> 00:01:39,270
actually be able to cope with building a

00:01:36,600 --> 00:01:41,040
better CI infrastructure or having the

00:01:39,270 --> 00:01:42,659
ability to provide to people internally

00:01:41,040 --> 00:01:45,450
some test systems without having to use

00:01:42,659 --> 00:01:47,729
your cloud infrastructure or more

00:01:45,450 --> 00:01:49,470
importantly for some people if you don't

00:01:47,729 --> 00:01:53,399
actually have the hardware that you're

00:01:49,470 --> 00:01:55,619
running your base image for then you

00:01:53,399 --> 00:01:57,299
can't use an existing base image you

00:01:55,619 --> 00:01:58,950
have to build it from scratch to support

00:01:57,299 --> 00:02:00,180
your new hardware so there's lots of

00:01:58,950 --> 00:02:02,670
reasons why you might want to actually

00:02:00,180 --> 00:02:03,840
be able to do this and there are a whole

00:02:02,670 --> 00:02:07,860
lot of products out there that do this

00:02:03,840 --> 00:02:09,239
but I think a lot of them are a little

00:02:07,860 --> 00:02:12,599
bit more complicated than they need to

00:02:09,239 --> 00:02:14,060
be there are existing tools that do this

00:02:12,599 --> 00:02:16,530
the old and simple way

00:02:14,060 --> 00:02:18,810
they've been around for ages there's a

00:02:16,530 --> 00:02:21,570
whole lot of these tools that are used

00:02:18,810 --> 00:02:25,230
to actually build systems that people

00:02:21,570 --> 00:02:27,060
use to throw their installer the old the

00:02:25,230 --> 00:02:28,440
the ones that I've got here are just a

00:02:27,060 --> 00:02:30,000
selection there are a whole lot more

00:02:28,440 --> 00:02:32,160
than a package for there being a Bunty

00:02:30,000 --> 00:02:33,150
and even more if you go and look and

00:02:32,160 --> 00:02:35,490
Google for people's own personal

00:02:33,150 --> 00:02:37,890
projects but the ones that I'm gonna

00:02:35,490 --> 00:02:40,140
look at addy bootstrap because it's

00:02:37,890 --> 00:02:41,880
basically the one that's used for the

00:02:40,140 --> 00:02:44,150
Debian installer and under the hood for

00:02:41,880 --> 00:02:47,430
the Ubuntu installer as well and

00:02:44,150 --> 00:02:49,260
multi-strap which is a different way of

00:02:47,430 --> 00:02:50,160
doing it and implement it a different

00:02:49,260 --> 00:02:51,840
way and they're the two that I use

00:02:50,160 --> 00:02:53,340
personally and I think that they're both

00:02:51,840 --> 00:02:55,770
relatively simple to use and there's a

00:02:53,340 --> 00:02:58,590
small amount of gotchas in them but not

00:02:55,770 --> 00:03:03,510
a huge number and that knowing how that

00:02:58,590 --> 00:03:06,120
works is going to be handy for people so

00:03:03,510 --> 00:03:07,980
I'll start with a dear bootstrap it's

00:03:06,120 --> 00:03:11,150
pretty straightforward you can actually

00:03:07,980 --> 00:03:16,380
run it on a command line if you do this

00:03:11,150 --> 00:03:20,310
what you'll get is a whole installation

00:03:16,380 --> 00:03:23,400
of your selected distribution in the

00:03:20,310 --> 00:03:24,330
output directory it'll go through and

00:03:23,400 --> 00:03:25,830
I'll actually download the right

00:03:24,330 --> 00:03:30,450
packages and install them in the right

00:03:25,830 --> 00:03:33,030
way for instance we can install Debian

00:03:30,450 --> 00:03:35,340
stretch and it's that simple

00:03:33,030 --> 00:03:38,220
after doing that I will have there been

00:03:35,340 --> 00:03:39,930
stretching my output directory it's not

00:03:38,220 --> 00:03:42,480
perfect which I'll go and show in a

00:03:39,930 --> 00:03:45,530
minute if I contrast' that to

00:03:42,480 --> 00:03:50,959
multi-strap multi-strap requires a

00:03:45,530 --> 00:03:54,239
config file it does however support a

00:03:50,959 --> 00:03:56,580
bunch of other features for using

00:03:54,239 --> 00:03:58,739
multiple repositories so the config file

00:03:56,580 --> 00:04:01,440
can define multiple locations where your

00:03:58,739 --> 00:04:04,350
packages can be installed which means

00:04:01,440 --> 00:04:06,750
you can have your own internal tools or

00:04:04,350 --> 00:04:08,970
you can have your own third-party set of

00:04:06,750 --> 00:04:10,799
tools that you install into your base

00:04:08,970 --> 00:04:12,120
image which might be one of the reasons

00:04:10,799 --> 00:04:13,890
why you actually want to build your own

00:04:12,120 --> 00:04:16,229
base image if you wanted to accelerate

00:04:13,890 --> 00:04:18,570
the instantiation of your new container

00:04:16,229 --> 00:04:20,100
you might want to have a base image that

00:04:18,570 --> 00:04:20,370
has already got these tools installed in

00:04:20,100 --> 00:04:23,789
it

00:04:20,370 --> 00:04:25,979
so having multi-strap allows you to have

00:04:23,789 --> 00:04:27,420
multiple repositories included in your

00:04:25,979 --> 00:04:32,100
original

00:04:27,420 --> 00:04:34,980
building but it it does have a little

00:04:32,100 --> 00:04:36,260
bit more complexity because of that the

00:04:34,980 --> 00:04:39,870
contouring feels not that complicated

00:04:36,260 --> 00:04:42,960
it's pretty straightforward but it does

00:04:39,870 --> 00:04:45,150
require generally a multi-stage approach

00:04:42,960 --> 00:04:46,700
do you bootstrap need this as well but

00:04:45,150 --> 00:04:51,000
it hides it more often

00:04:46,700 --> 00:04:53,930
so multi-strap has a number of cases

00:04:51,000 --> 00:04:57,810
where it needs to have its

00:04:53,930 --> 00:05:00,260
optional second stage to be run but it

00:04:57,810 --> 00:05:04,470
doesn't hurt to just run it normally and

00:05:00,260 --> 00:05:05,580
again this is a little bit more

00:05:04,470 --> 00:05:12,140
complicated but it gives you more

00:05:05,580 --> 00:05:12,140
flexibility sorry yes

00:05:20,400 --> 00:05:30,060
so I have here a cut-down example config

00:05:25,380 --> 00:05:34,320
file and it has a list of packages in

00:05:30,060 --> 00:05:38,280
here and those packages are explained

00:05:34,320 --> 00:05:40,380
why they are in the linked example some

00:05:38,280 --> 00:05:42,810
of these packages are required to make a

00:05:40,380 --> 00:05:45,600
modern system actually boot and they're

00:05:42,810 --> 00:05:47,220
not automatically included so yes

00:05:45,600 --> 00:05:49,229
sometimes you will need all these

00:05:47,220 --> 00:05:50,729
packages which I hope answers your

00:05:49,229 --> 00:05:52,320
question not all of them are always

00:05:50,729 --> 00:05:54,270
required like you don't need to have apt

00:05:52,320 --> 00:05:55,650
in this list but you don't really have a

00:05:54,270 --> 00:05:58,410
debian or a tab under system if you

00:05:55,650 --> 00:06:00,090
don't have a pin store so some of them

00:05:58,410 --> 00:06:02,250
are kind of optional but you probably

00:06:00,090 --> 00:06:04,500
want them if you're building the most

00:06:02,250 --> 00:06:06,210
minimal system you can then obviously

00:06:04,500 --> 00:06:13,889
this is where having these things

00:06:06,210 --> 00:06:15,750
optional is useful but but yeah so yes

00:06:13,889 --> 00:06:17,460
as I alluded to there are links in this

00:06:15,750 --> 00:06:19,410
I'll publish the slides after this talk

00:06:17,460 --> 00:06:25,639
there are slightly more comments in the

00:06:19,410 --> 00:06:30,720
in the linked config files and examples

00:06:25,639 --> 00:06:32,580
so if I compare these two tools there

00:06:30,720 --> 00:06:35,580
are both pros and cons for each one

00:06:32,580 --> 00:06:37,139
there's no one right one of these tools

00:06:35,580 --> 00:06:39,479
and the other ones I've looked at as

00:06:37,139 --> 00:06:43,169
well have the same there's no one right

00:06:39,479 --> 00:06:44,729
one so I've limited by how much time I

00:06:43,169 --> 00:06:45,870
want to spend looking at each different

00:06:44,729 --> 00:06:47,729
tool and I've just picked these two

00:06:45,870 --> 00:06:49,349
tools because they seem to cover most of

00:06:47,729 --> 00:06:53,070
the use cases I can come up with and

00:06:49,349 --> 00:06:54,900
also most important I think is if you're

00:06:53,070 --> 00:06:56,789
starting simple you can start with Dee

00:06:54,900 --> 00:06:58,020
bootstrap and know there's a huge user

00:06:56,789 --> 00:07:00,030
community out there they might or

00:06:58,020 --> 00:07:02,789
realize there is a community but if

00:07:00,030 --> 00:07:04,199
somebody's installer breaks then the

00:07:02,789 --> 00:07:05,789
people maintaining that installer will

00:07:04,199 --> 00:07:08,180
fix it and that's their book strap so

00:07:05,789 --> 00:07:12,479
it'll work for most users in most cases

00:07:08,180 --> 00:07:14,220
and the other thing that I the bootstrap

00:07:12,479 --> 00:07:16,710
can do is it can actually run without

00:07:14,220 --> 00:07:20,370
Debian itself can run without a bun - it

00:07:16,710 --> 00:07:23,370
is a shell script everything in the

00:07:20,370 --> 00:07:25,860
bootstrap works without requiring and

00:07:23,370 --> 00:07:28,950
the whole Debian install so you can use

00:07:25,860 --> 00:07:30,479
that as a bootstrapping it is one of the

00:07:28,950 --> 00:07:32,669
big advantages that you can tart with a

00:07:30,479 --> 00:07:34,350
very minimal rescue system that you've

00:07:32,669 --> 00:07:36,690
built from some other way

00:07:34,350 --> 00:07:38,370
and then bootstrap yourself into a real

00:07:36,690 --> 00:07:41,610
Debian system by installing it from

00:07:38,370 --> 00:07:43,530
scratch now the output of these two

00:07:41,610 --> 00:07:46,650
tools is actually immediately useful I

00:07:43,530 --> 00:07:49,500
can trigger it into one of these and run

00:07:46,650 --> 00:07:52,680
commands inside them straight away which

00:07:49,500 --> 00:07:54,990
is means you can use them for building

00:07:52,680 --> 00:07:56,910
stuff in a knowing clean environment you

00:07:54,990 --> 00:07:59,250
can start off with installing a compiler

00:07:56,910 --> 00:08:00,690
and know that you can actually compile

00:07:59,250 --> 00:08:02,130
things the same way every time because

00:08:00,690 --> 00:08:05,510
you've built it all and you've build it

00:08:02,130 --> 00:08:09,780
with a clean instance but it's not

00:08:05,510 --> 00:08:14,130
perfectly example perfectly working

00:08:09,780 --> 00:08:17,550
because some things that you'd expect to

00:08:14,130 --> 00:08:18,930
probably work quite well give you weird

00:08:17,550 --> 00:08:21,540
error messages because they're not

00:08:18,930 --> 00:08:24,750
actually configured properly so these

00:08:21,540 --> 00:08:29,010
things are not without a little bit of

00:08:24,750 --> 00:08:30,870
complication or config files that were

00:08:29,010 --> 00:08:32,430
copied into the environment to be

00:08:30,870 --> 00:08:34,740
helpful to you by the automated

00:08:32,430 --> 00:08:36,960
installer process that are no longer

00:08:34,740 --> 00:08:39,090
valid because your name resolution

00:08:36,960 --> 00:08:40,380
inside the container doesn't match the

00:08:39,090 --> 00:08:42,750
name resolution in the environment you

00:08:40,380 --> 00:08:45,210
build it from so there's there's little

00:08:42,750 --> 00:08:47,460
hiccups in there which you can improve

00:08:45,210 --> 00:08:50,400
by going through and saying let's just

00:08:47,460 --> 00:08:52,140
fix these things one by one I tend to

00:08:50,400 --> 00:08:56,460
categorize my things into four different

00:08:52,140 --> 00:08:58,220
areas so firstly I have the things that

00:08:56,460 --> 00:09:01,650
I want to do to make it actually boot

00:08:58,220 --> 00:09:05,100
the fix ups that make it in fact

00:09:01,650 --> 00:09:07,260
reliable in the first place the most

00:09:05,100 --> 00:09:09,600
important fix ups for me and making sure

00:09:07,260 --> 00:09:11,490
the image itself is neutral and has no

00:09:09,600 --> 00:09:14,160
identifying marks in it which is why

00:09:11,490 --> 00:09:16,530
I've got things like machine ID the host

00:09:14,160 --> 00:09:19,320
name and the and the SSH keys in there

00:09:16,530 --> 00:09:21,150
and then because this container is

00:09:19,320 --> 00:09:23,640
pretty much usable by itself without any

00:09:21,150 --> 00:09:25,590
further configuration except for that

00:09:23,640 --> 00:09:27,660
one thing that the resolver didn't work

00:09:25,590 --> 00:09:29,190
then I can fix the resolvers or putting

00:09:27,660 --> 00:09:31,250
a default in there that's more useful

00:09:29,190 --> 00:09:35,190
than the one that comes out of the box

00:09:31,250 --> 00:09:37,440
and then I customize it by adding the

00:09:35,190 --> 00:09:40,260
environment that I want the environment

00:09:37,440 --> 00:09:42,120
that helps me use it in my area to give

00:09:40,260 --> 00:09:44,880
it the settings so I might want from my

00:09:42,120 --> 00:09:47,950
network the ones that I might have for

00:09:44,880 --> 00:09:50,320
my my name server are different

00:09:47,950 --> 00:09:51,880
and if I was in an alive environment I

00:09:50,320 --> 00:09:54,490
probably have some kind of list of

00:09:51,880 --> 00:09:56,590
management users that I would create and

00:09:54,490 --> 00:09:58,240
give them pseudo access so that the

00:09:56,590 --> 00:10:01,450
configuration tools could log in later

00:09:58,240 --> 00:10:02,560
and configure it properly or you know if

00:10:01,450 --> 00:10:05,980
you're just testing it give it a quick

00:10:02,560 --> 00:10:10,240
password and the final thing that I do

00:10:05,980 --> 00:10:11,680
to build a template is to minimize it

00:10:10,240 --> 00:10:12,880
because if it's a template you

00:10:11,680 --> 00:10:15,670
theoretically going to be using it

00:10:12,880 --> 00:10:18,400
everywhere which means you probably want

00:10:15,670 --> 00:10:21,160
to make it small and this is the three

00:10:18,400 --> 00:10:24,810
largest things inside the image this

00:10:21,160 --> 00:10:27,340
will bat have the size of in space

00:10:24,810 --> 00:10:28,960
install basis Thor by just removing the

00:10:27,340 --> 00:10:30,400
documentation you're not going to read

00:10:28,960 --> 00:10:31,480
because you're spending up hundreds of

00:10:30,400 --> 00:10:34,480
these you're not going to log into any

00:10:31,480 --> 00:10:37,030
one of them and read the documents so

00:10:34,480 --> 00:10:38,470
you don't need it I've got a big long

00:10:37,030 --> 00:10:43,090
list of the things that I delete from my

00:10:38,470 --> 00:10:45,100
own making things as small as I can but

00:10:43,090 --> 00:10:47,320
really when I went back and looked at

00:10:45,100 --> 00:10:49,990
them to write this talk I went ah okay

00:10:47,320 --> 00:10:54,400
most of what I gained is in these three

00:10:49,990 --> 00:10:57,970
lines and then when I go to actually

00:10:54,400 --> 00:11:02,050
take a container and build it out to be

00:10:57,970 --> 00:11:02,890
bigger and to be a machine there's a

00:11:02,050 --> 00:11:05,590
couple of things you want to actually

00:11:02,890 --> 00:11:08,080
put into it if using a containerization

00:11:05,590 --> 00:11:11,830
infrastructure it will probably do that

00:11:08,080 --> 00:11:13,390
for you it will add in these things to

00:11:11,830 --> 00:11:15,340
assist you so you don't have to worry

00:11:13,390 --> 00:11:17,400
about it yourself but if you're doing

00:11:15,340 --> 00:11:19,960
this so you'll learn how to do things

00:11:17,400 --> 00:11:21,820
there are obviously a couple of things

00:11:19,960 --> 00:11:23,500
that are useful to do like for instance

00:11:21,820 --> 00:11:28,570
putting back the SSH keys that we

00:11:23,500 --> 00:11:33,370
carefully removed earlier which allows

00:11:28,570 --> 00:11:35,620
us to do then a simple boot now the

00:11:33,370 --> 00:11:37,840
simplest way I found on a modern system

00:11:35,620 --> 00:11:40,690
to boot up a containerized instance just

00:11:37,840 --> 00:11:43,570
to test it is to use the system DNS

00:11:40,690 --> 00:11:45,370
boring thing which is not going to be an

00:11:43,570 --> 00:11:47,140
argument of that system they please it's

00:11:45,370 --> 00:11:49,090
just going to be this is the simplest

00:11:47,140 --> 00:11:50,830
way I could find it's one command if

00:11:49,090 --> 00:11:52,390
you've got it installed it works it

00:11:50,830 --> 00:11:56,230
fires it up it fires it up in a fairly

00:11:52,390 --> 00:11:58,420
isolated way it doesn't do all the

00:11:56,230 --> 00:12:01,750
security steps this is just a let's test

00:11:58,420 --> 00:12:04,420
this out let's get this in and just

00:12:01,750 --> 00:12:05,830
the N spawn has got huge number of

00:12:04,420 --> 00:12:08,350
options for how you configure things

00:12:05,830 --> 00:12:11,260
like the networking this example command

00:12:08,350 --> 00:12:14,170
line doesn't configure the networking so

00:12:11,260 --> 00:12:16,450
the environment you boot up just has the

00:12:14,170 --> 00:12:19,750
inherited networking from the base from

00:12:16,450 --> 00:12:20,830
the host system which means that you

00:12:19,750 --> 00:12:22,540
don't have to configure anything you've

00:12:20,830 --> 00:12:25,450
got a working environment there you can

00:12:22,540 --> 00:12:26,950
start and use it straight away it gives

00:12:25,450 --> 00:12:28,680
you a login prompt in the same screen

00:12:26,950 --> 00:12:30,550
that you're actually running this from

00:12:28,680 --> 00:12:33,900
so if you've already set your root

00:12:30,550 --> 00:12:33,900
password you can log in at this point

00:12:36,150 --> 00:12:43,230
it's also useful that it's automated a

00:12:39,730 --> 00:12:45,490
couple of things about the containerized

00:12:43,230 --> 00:12:49,270
instantiation it will give it a host

00:12:45,490 --> 00:12:50,890
name it will allow you to automatically

00:12:49,270 --> 00:12:53,980
destroy it using some of this ephemeral

00:12:50,890 --> 00:12:56,560
command-line option so that you can try

00:12:53,980 --> 00:12:58,570
out things destroy the image and it all

00:12:56,560 --> 00:13:01,720
goes away again that's relatively quick

00:12:58,570 --> 00:13:06,850
to just set up and do if I wanted to do

00:13:01,720 --> 00:13:08,320
it in a more larger environment if I

00:13:06,850 --> 00:13:11,320
wanted to build machines to give to

00:13:08,320 --> 00:13:12,640
other people then something with a user

00:13:11,320 --> 00:13:14,110
interface that they might actually be

00:13:12,640 --> 00:13:15,730
able to use to see their console or

00:13:14,110 --> 00:13:19,210
manually set up and start down their

00:13:15,730 --> 00:13:21,070
machines themselves I could import this

00:13:19,210 --> 00:13:24,310
same container the same base image into

00:13:21,070 --> 00:13:26,170
libvirt the liver

00:13:24,310 --> 00:13:28,089
systems will support running our XE

00:13:26,170 --> 00:13:30,310
container so I get the user interface of

00:13:28,089 --> 00:13:32,020
libvirt and I get the old LXE

00:13:30,310 --> 00:13:35,589
containerization system and I join them

00:13:32,020 --> 00:13:37,180
together and I've got a breviary version

00:13:35,589 --> 00:13:39,670
of the XML file there because it's too

00:13:37,180 --> 00:13:41,440
big to feed on things slide but this is

00:13:39,670 --> 00:13:46,270
straightforward again to import in and

00:13:41,440 --> 00:13:51,280
then start it up and from this you can

00:13:46,270 --> 00:13:54,970
do other things you can say that I

00:13:51,280 --> 00:13:57,760
wanted to take the container and build

00:13:54,970 --> 00:14:00,550
it into a disk image which I'm not

00:13:57,760 --> 00:14:03,730
actually going to talk about today in

00:14:00,550 --> 00:14:05,530
any detail it's more that the same

00:14:03,730 --> 00:14:07,030
trilled process can build yourself a

00:14:05,530 --> 00:14:09,550
container which is just the group of

00:14:07,030 --> 00:14:11,709
files on the disk and then pack up that

00:14:09,550 --> 00:14:13,570
container into a disk image using some

00:14:11,709 --> 00:14:15,759
of our guest fish guest fish is a

00:14:13,570 --> 00:14:18,699
library that allows you to script

00:14:15,759 --> 00:14:20,290
the creation of disk images virtual disk

00:14:18,699 --> 00:14:23,619
images with partitioning and various

00:14:20,290 --> 00:14:25,509
boot managers and adding the files that

00:14:23,619 --> 00:14:28,329
we've created from the the undie boot

00:14:25,509 --> 00:14:31,059
Scott and then you can do things like

00:14:28,329 --> 00:14:33,249
very simply adding a UEFI boot manager

00:14:31,059 --> 00:14:35,319
and have a fully working virtual machine

00:14:33,249 --> 00:14:37,869
image then you could boot up either in a

00:14:35,319 --> 00:14:41,529
virtual machine or in a actual physical

00:14:37,869 --> 00:14:43,179
bit of hardware and have that one

00:14:41,529 --> 00:14:48,459
process the you know you're running the

00:14:43,179 --> 00:14:51,009
same same base image on all of them and

00:14:48,459 --> 00:14:54,369
then curiam you can load that base image

00:14:51,009 --> 00:14:56,859
with a direct kernel load or by booting

00:14:54,369 --> 00:15:01,149
off a file system is booting off a boot

00:14:56,859 --> 00:15:03,429
loader as well which is an entire

00:15:01,149 --> 00:15:05,589
another topic of how to build disk

00:15:03,429 --> 00:15:07,239
images so I'm not going into that now I

00:15:05,589 --> 00:15:12,299
think I've actually gone relatively

00:15:07,239 --> 00:15:12,299

YouTube URL: https://www.youtube.com/watch?v=OLFH4Ov6bJQ


