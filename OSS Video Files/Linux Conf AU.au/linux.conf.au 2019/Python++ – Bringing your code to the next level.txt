Title: Python++ – Bringing your code to the next level
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Jan Groth

https://2019.linux.conf.au/schedule/presentation/203/

Python is a great language for DevOps tasks. It’s easy to use for automation and offers an end-to-end range of tooling for managing infrastructure on-premise and in the cloud. Scripts are quickly implemented and new features easily rolled out. But what if complexity grows and all of the sudden you find yourself in a complete mess? How do you add a new feature or fix a bug in a script that you struggle to understand because it was written months ago? And do you sometimes see someone else’s code that you like but can't always put your finger on the magic ingredient? This talk is aimed at you if you are reasonably confident reading Python code and want to discover and improve beyond the basics. I'll provide you with ideas and suggestions that will help you stay on top of your coding and will bring it to the next level: Clean code which is easier to understand, more functional, testable and beautiful.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,620 --> 00:00:06,120
our second speaker following on from

00:00:03,899 --> 00:00:08,790
Julian warming up to the idea of making

00:00:06,120 --> 00:00:14,820
tools its yarn who's going to talk about

00:00:08,790 --> 00:00:17,130
to you about improving your Python thank

00:00:14,820 --> 00:00:20,760
you and thanks everyone for coming

00:00:17,130 --> 00:00:23,340
yeah why not writing tools in Python a

00:00:20,760 --> 00:00:25,619
little bit about me I work as a DevOps

00:00:23,340 --> 00:00:28,349
engineer for a company called percent in

00:00:25,619 --> 00:00:30,689
Sydney we are a cloud consultancy and we

00:00:28,349 --> 00:00:32,850
specialize on AWS exclusively I

00:00:30,689 --> 00:00:34,980
typically work on clients projects

00:00:32,850 --> 00:00:37,739
that's infrastructure provisioning with

00:00:34,980 --> 00:00:41,790
ansible and cloud formation or a lot of

00:00:37,739 --> 00:00:44,280
CI CD Jenkins bamboo core pipeline I

00:00:41,790 --> 00:00:47,640
moved into DevOps about five years ago

00:00:44,280 --> 00:00:49,260
and Python greatly gradually became my

00:00:47,640 --> 00:00:51,899
go-to language for all sorts of

00:00:49,260 --> 00:00:54,989
scripting tooling as well as for writing

00:00:51,899 --> 00:00:57,600
lamb nurse mmm before moving into dev

00:00:54,989 --> 00:00:59,579
ops I used to be developer I guess this

00:00:57,600 --> 00:01:02,039
means two things first of all I'm really

00:00:59,579 --> 00:01:04,290
really bad at anything low level sis ops

00:01:02,039 --> 00:01:06,659
like I have no idea what a BGP route is

00:01:04,290 --> 00:01:08,780
and the other thing is I love writing

00:01:06,659 --> 00:01:12,810
code which is what this talk is about oh

00:01:08,780 --> 00:01:14,250
yes and we are hiring mostly in Sydney

00:01:12,810 --> 00:01:18,840
Melbourne come and see me for a chat if

00:01:14,250 --> 00:01:21,780
you wanna hear more so about this talk

00:01:18,840 --> 00:01:23,549
here's how it works I dumped a list of

00:01:21,780 --> 00:01:28,680
Python features on you and you just have

00:01:23,549 --> 00:01:30,570
to start using them well not quite

00:01:28,680 --> 00:01:32,250
I will talk about language features but

00:01:30,570 --> 00:01:35,880
I mostly want to talk about what I think

00:01:32,250 --> 00:01:37,380
makes Python code better code so I'm

00:01:35,880 --> 00:01:41,100
talking about things that I find helpful

00:01:37,380 --> 00:01:43,380
if I write code and also I put this talk

00:01:41,100 --> 00:01:45,390
on line and there's a linked list with a

00:01:43,380 --> 00:01:47,720
lot of further reading and references so

00:01:45,390 --> 00:01:51,060
no need to take notes or so

00:01:47,720 --> 00:01:53,369
alright let's kick things off with a

00:01:51,060 --> 00:01:54,899
quiz looking for a year I have a couple

00:01:53,369 --> 00:01:56,700
of hints if you know the answer just

00:01:54,899 --> 00:01:59,070
shout it out

00:01:56,700 --> 00:02:01,649
Dark Knight move the year Lehman

00:01:59,070 --> 00:02:02,759
Brothers went bankrupt Spotify launched

00:02:01,649 --> 00:02:04,290
and Lady gaga

00:02:02,759 --> 00:02:08,970
if you enter this head to number one

00:02:04,290 --> 00:02:09,539
hits any ideas a year 2008 that's

00:02:08,970 --> 00:02:12,170
correct

00:02:09,539 --> 00:02:14,770
2008 that is correct um

00:02:12,170 --> 00:02:24,170
something else happened in 2008 that is

00:02:14,770 --> 00:02:26,660
Python 3 Python 3 was launched and it

00:02:24,170 --> 00:02:30,140
was launched as a partial redesign of

00:02:26,660 --> 00:02:32,120
api's so it mitigated API flaws and it

00:02:30,140 --> 00:02:35,270
was decided to launch it as a non

00:02:32,120 --> 00:02:39,050
backwards compatible version yeah

00:02:35,270 --> 00:02:41,090
2008 there is 11 years ago think about

00:02:39,050 --> 00:02:43,130
how long this is in terms of computer

00:02:41,090 --> 00:02:45,200
speak like I didn't really look this up

00:02:43,130 --> 00:02:47,780
but did we use containers 11 years ago

00:02:45,200 --> 00:02:51,110
or deploying to the cloud and I pretty

00:02:47,780 --> 00:02:53,060
sure I didn't even use get in 2008 so

00:02:51,110 --> 00:02:58,300
there's one thing I don't quite

00:02:53,060 --> 00:02:58,300
understand why is Python 2 stood around

00:02:58,690 --> 00:03:03,230
there's a previous version of this talk

00:03:01,100 --> 00:03:05,090
that I gave and I would have a few

00:03:03,230 --> 00:03:06,890
slides where I'm trying to convince

00:03:05,090 --> 00:03:09,470
people that Python 3 is the better

00:03:06,890 --> 00:03:13,640
language to use today I'm coming with a

00:03:09,470 --> 00:03:16,840
single slide only it's that one Python 2

00:03:13,640 --> 00:03:20,630
will reach oops sorry

00:03:16,840 --> 00:03:21,590
so person too will reach end of life by

00:03:20,630 --> 00:03:25,549
the end of this year

00:03:21,590 --> 00:03:27,970
there's 344 days from now after that no

00:03:25,549 --> 00:03:30,829
more bug fixes no more security updates

00:03:27,970 --> 00:03:33,110
so if you're still in the space where

00:03:30,829 --> 00:03:36,530
Python 2 is a thing have this in mind

00:03:33,110 --> 00:03:40,730
and maybe this is a good time to move on

00:03:36,530 --> 00:03:43,670
to Python 3 talk a little bit about

00:03:40,730 --> 00:03:45,470
Python version in my experience that so

00:03:43,670 --> 00:03:48,110
that's usually cried a version

00:03:45,470 --> 00:03:50,900
discussion associated with Python in my

00:03:48,110 --> 00:03:53,000
experience on it's mostly about Python 2

00:03:50,900 --> 00:03:56,900
versus Python 3 and we already covered

00:03:53,000 --> 00:03:59,660
that I find it in this space where I

00:03:56,900 --> 00:04:00,890
write scripts and tools usually our code

00:03:59,660 --> 00:04:02,600
is not that complicated

00:04:00,890 --> 00:04:05,989
we are not data scientists we're not

00:04:02,600 --> 00:04:08,299
implementing applications so I rarely

00:04:05,989 --> 00:04:10,519
come across code that requires a

00:04:08,299 --> 00:04:12,470
specific Python version and it's

00:04:10,519 --> 00:04:14,359
actually quite similar for dependencies

00:04:12,470 --> 00:04:16,850
as well it's usually like one two or

00:04:14,359 --> 00:04:18,829
three libraries that I import but it's

00:04:16,850 --> 00:04:22,310
not massive amount of things we have to

00:04:18,829 --> 00:04:24,830
manage however I strongly recommend to

00:04:22,310 --> 00:04:25,940
use a separate Python environment for

00:04:24,830 --> 00:04:27,410
every project you

00:04:25,940 --> 00:04:29,630
working on to work completely in

00:04:27,410 --> 00:04:31,700
isolation so that you have your Python

00:04:29,630 --> 00:04:34,370
version fixed and your dependencies as

00:04:31,700 --> 00:04:36,380
well for that project and don't repeat

00:04:34,370 --> 00:04:38,150
my mistake from five years ago and try

00:04:36,380 --> 00:04:42,200
to pimp your system environment when it

00:04:38,150 --> 00:04:45,590
wasn't ready for Python 3 so my first

00:04:42,200 --> 00:04:48,080
tip would be absolutely use Python 3 and

00:04:45,590 --> 00:04:50,690
also work in isolation for environments

00:04:48,080 --> 00:04:53,600
use a tool for that I think most people

00:04:50,690 --> 00:04:55,280
are using virtual environments vn and I

00:04:53,600 --> 00:04:57,290
recently started to look into something

00:04:55,280 --> 00:04:59,480
called pip M which is a bit of syntactic

00:04:57,290 --> 00:05:01,820
sugar allowed to virtual on top of

00:04:59,480 --> 00:05:06,320
virtual environments just make sure you

00:05:01,820 --> 00:05:09,440
use a tool for that okay moving on to

00:05:06,320 --> 00:05:11,960
actually looking at code I want to talk

00:05:09,440 --> 00:05:14,840
about readability first a few examples

00:05:11,960 --> 00:05:17,240
of how I think readability can be

00:05:14,840 --> 00:05:21,800
improved I try to group them kind of

00:05:17,240 --> 00:05:23,210
from obvious to not so obvious so let's

00:05:21,800 --> 00:05:26,270
get the super obvious out of the way

00:05:23,210 --> 00:05:28,070
first I think every language has coding

00:05:26,270 --> 00:05:30,230
conventions and naming conventions so

00:05:28,070 --> 00:05:32,510
does Python and it makes a lot of sense

00:05:30,230 --> 00:05:34,460
to use them it makes it it makes your

00:05:32,510 --> 00:05:36,830
code easier to read for others and it

00:05:34,460 --> 00:05:39,830
also makes it easier for you to read

00:05:36,830 --> 00:05:41,150
code that others have written I compared

00:05:39,830 --> 00:05:43,340
coding conventions a little bit with

00:05:41,150 --> 00:05:46,370
touch typing like it takes some effort

00:05:43,340 --> 00:05:47,810
to to learn it initially but once you

00:05:46,370 --> 00:05:49,640
acquire it you don't really think about

00:05:47,810 --> 00:05:51,860
it that much anymore and just freeze

00:05:49,640 --> 00:05:57,740
your brain for other things so coding

00:05:51,860 --> 00:05:59,570
conventions higher names I think there's

00:05:57,740 --> 00:06:01,460
situations in life where you want to

00:05:59,570 --> 00:06:04,070
make sure that you are not spoiling

00:06:01,460 --> 00:06:07,160
something for others picking a file name

00:06:04,070 --> 00:06:09,230
is not one of those so make sure if you

00:06:07,160 --> 00:06:11,570
choose a file name for something you're

00:06:09,230 --> 00:06:14,570
writing then it's as descriptive as

00:06:11,570 --> 00:06:17,000
possible I I find there's nothing more

00:06:14,570 --> 00:06:18,680
annoying then say deploy a laminar from

00:06:17,000 --> 00:06:22,150
an s3 bucket where everything is just

00:06:18,680 --> 00:06:27,440
named lambda 1 to 15 and let's go test

00:06:22,150 --> 00:06:29,450
so I'm choosing a file name and this one

00:06:27,440 --> 00:06:34,880
might be a little less obvious I want to

00:06:29,450 --> 00:06:38,900
talk about complex code I see two issues

00:06:34,880 --> 00:06:43,460
with the above code or is it

00:06:38,900 --> 00:06:47,360
we do anything about it yeah I'm happy

00:06:43,460 --> 00:06:55,160
to speak in the dark oh that's really

00:06:47,360 --> 00:07:03,350
hard to read yeah can we just turn the

00:06:55,160 --> 00:07:04,520
lights off maybe all right it's that I'm

00:07:03,350 --> 00:07:08,660
sorry about that

00:07:04,520 --> 00:07:11,360
so this there's a comment saying scale

00:07:08,660 --> 00:07:13,699
out if less than three instances so I

00:07:11,360 --> 00:07:15,800
have two issues with this code um first

00:07:13,699 --> 00:07:17,990
of all that's a bit of a problem the

00:07:15,800 --> 00:07:20,210
code only works if you have a comment

00:07:17,990 --> 00:07:21,949
like if the comet wasn't there you would

00:07:20,210 --> 00:07:24,740
not know that this is about scaling

00:07:21,949 --> 00:07:26,720
which is not a good thing because from

00:07:24,740 --> 00:07:28,520
my experience comments aren't really

00:07:26,720 --> 00:07:30,830
coupled to a code so there's a high

00:07:28,520 --> 00:07:32,240
chance that comments outdate and that

00:07:30,830 --> 00:07:35,150
they don't fully reflect the truth

00:07:32,240 --> 00:07:37,099
anymore and there's no way to tell the

00:07:35,150 --> 00:07:39,680
other thing is that it's a good practice

00:07:37,099 --> 00:07:41,900
to isolate responsibilities and

00:07:39,680 --> 00:07:43,610
something like scaling out it's probably

00:07:41,900 --> 00:07:45,289
something that you want to deal deal

00:07:43,610 --> 00:07:48,320
with elsewhere so that you can maintain

00:07:45,289 --> 00:07:53,960
it in isolation and test it so in this

00:07:48,320 --> 00:07:56,330
example I extracted a method from it

00:07:53,960 --> 00:07:58,729
which I think solves both issues quite

00:07:56,330 --> 00:08:00,500
nicely so it's super readable it does

00:07:58,729 --> 00:08:03,020
not require a comment it cannot out date

00:08:00,500 --> 00:08:04,820
and the whole scaling logic lives

00:08:03,020 --> 00:08:07,070
elsewhere and can be maintained there it

00:08:04,820 --> 00:08:11,659
can also get more complex over there but

00:08:07,070 --> 00:08:14,300
elsewhere so tip number 2 naming

00:08:11,659 --> 00:08:17,780
conventions of course good names is like

00:08:14,300 --> 00:08:19,639
invariable and introducing met methods

00:08:17,780 --> 00:08:25,760
or extracting methods can increase

00:08:19,639 --> 00:08:30,349
readability big time ok from readable

00:08:25,760 --> 00:08:32,390
code on to beautiful code beauty lies in

00:08:30,349 --> 00:08:36,050
the eye of the beholder but it also lies

00:08:32,390 --> 00:08:39,110
in simplicity a little bit so I hope

00:08:36,050 --> 00:08:41,360
this is readable these are two loops

00:08:39,110 --> 00:08:43,669
that are doing the exact same thing

00:08:41,360 --> 00:08:47,570
they're both counting from 0 to 4 and

00:08:43,669 --> 00:08:49,550
they're printing the index only that the

00:08:47,570 --> 00:08:51,050
loop on the left-hand side uses twice as

00:08:49,550 --> 00:08:52,069
many lines as the loop on the right-hand

00:08:51,050 --> 00:08:55,249
side

00:08:52,069 --> 00:08:57,170
I find this is quite a common situation

00:08:55,249 --> 00:08:58,730
if we're implementing code that there's

00:08:57,170 --> 00:09:01,369
usually more than one option to

00:08:58,730 --> 00:09:04,249
implement what we want to do and it's

00:09:01,369 --> 00:09:06,350
usually good to reflect on whether we're

00:09:04,249 --> 00:09:07,970
using the right construct and it's

00:09:06,350 --> 00:09:10,249
usually the better construct if it's

00:09:07,970 --> 00:09:12,379
more concise and if it's piggybacking on

00:09:10,249 --> 00:09:15,980
something that the SDK already provides

00:09:12,379 --> 00:09:18,170
for us like the range function quite

00:09:15,980 --> 00:09:21,170
often there's also a pythonic way of

00:09:18,170 --> 00:09:24,529
doing things I want to bring up list

00:09:21,170 --> 00:09:27,350
comprehension as an example so the code

00:09:24,529 --> 00:09:31,339
on the top we have a list of County

00:09:27,350 --> 00:09:33,170
symbols and we create a new list of I

00:09:31,339 --> 00:09:37,459
believe s key codes of these symbols

00:09:33,170 --> 00:09:39,589
from it with a for loop the color of the

00:09:37,459 --> 00:09:42,199
bottom is doing the exact same thing

00:09:39,589 --> 00:09:44,899
only that it uses the Python idiom of

00:09:42,199 --> 00:09:47,029
list comprehension that makes it far

00:09:44,899 --> 00:09:50,959
more concise and also once you're used

00:09:47,029 --> 00:09:53,869
to it a lot more readable also this

00:09:50,959 --> 00:09:55,429
comprehension is it's the way that

00:09:53,869 --> 00:09:59,569
experienced Python developers would

00:09:55,429 --> 00:10:02,629
create a list now that another advantage

00:09:59,569 --> 00:10:04,730
of that is that the first example using

00:10:02,629 --> 00:10:06,559
a for loop that's not wrong but if you

00:10:04,730 --> 00:10:08,720
look at a for loop there are many many

00:10:06,559 --> 00:10:10,910
things you can do with a for loop if you

00:10:08,720 --> 00:10:12,499
use list comprehension it becomes super

00:10:10,910 --> 00:10:14,240
obvious that you are creating a list

00:10:12,499 --> 00:10:19,550
which makes it easier to read which is

00:10:14,240 --> 00:10:22,309
good all right commenting every single

00:10:19,550 --> 00:10:26,569
line of code is essential if you're

00:10:22,309 --> 00:10:28,249
writing in assembler if you look at this

00:10:26,569 --> 00:10:29,629
code yeah I think that like three

00:10:28,249 --> 00:10:35,149
comments missing and I already don't

00:10:29,629 --> 00:10:39,559
understand it so I think in Python it's

00:10:35,149 --> 00:10:40,759
not so important I found this example

00:10:39,559 --> 00:10:43,309
where someone made the effort to

00:10:40,759 --> 00:10:46,309
actually comment every single line of

00:10:43,309 --> 00:10:49,369
code that he found on the server that

00:10:46,309 --> 00:10:51,439
that he was writing and I think this is

00:10:49,369 --> 00:10:56,600
like going way over the top it's clearly

00:10:51,439 --> 00:10:58,939
good intention however most of these

00:10:56,600 --> 00:11:01,220
comments I think can safely be left out

00:10:58,939 --> 00:11:04,309
as a rule of thumb if you write comments

00:11:01,220 --> 00:11:05,360
don't comment what you're doing comment

00:11:04,309 --> 00:11:07,040
the why

00:11:05,360 --> 00:11:09,019
why is this important and in this case

00:11:07,040 --> 00:11:14,209
it's important because of something I

00:11:09,019 --> 00:11:16,220
left out tip 3 less is more functional

00:11:14,209 --> 00:11:18,829
and simple simple code is always better

00:11:16,220 --> 00:11:21,500
and Python idioms are good and common

00:11:18,829 --> 00:11:24,320
only what you cannot say in code all

00:11:21,500 --> 00:11:26,180
right name topic I want to talk about

00:11:24,320 --> 00:11:29,140
classes I know this is something that

00:11:26,180 --> 00:11:32,390
people don't tend to use very often I

00:11:29,140 --> 00:11:34,220
want to start with an example that might

00:11:32,390 --> 00:11:38,120
be a little contrived please bear with

00:11:34,220 --> 00:11:41,360
me let's say we are implementing a

00:11:38,120 --> 00:11:43,820
calculator a calculator that performs

00:11:41,360 --> 00:11:46,850
calculations on top of a number like a

00:11:43,820 --> 00:11:48,980
base number so in this case base 10 and

00:11:46,850 --> 00:11:50,300
we can multiply it which is cool it's a

00:11:48,980 --> 00:11:52,070
good feature so this goes on the

00:11:50,300 --> 00:11:54,470
production we're happy we're making

00:11:52,070 --> 00:11:57,709
heaps of money with it and new

00:11:54,470 --> 00:11:59,810
requirements are coming in we are now

00:11:57,709 --> 00:12:01,700
also performing calculations on top of

00:11:59,810 --> 00:12:04,370
the second number so we already do base

00:12:01,700 --> 00:12:06,610
10 but we now ask to also perform

00:12:04,370 --> 00:12:09,290
calculations say on a different number

00:12:06,610 --> 00:12:12,019
here's how you could possibly implement

00:12:09,290 --> 00:12:15,199
it and here's also the problem what this

00:12:12,019 --> 00:12:17,810
code does is it's separating state the

00:12:15,199 --> 00:12:22,040
base from the behavior the methods we're

00:12:17,810 --> 00:12:23,720
working with and this is like asking for

00:12:22,040 --> 00:12:25,820
trouble because these two nights are

00:12:23,720 --> 00:12:27,170
identical but you can't really tell what

00:12:25,820 --> 00:12:29,269
they are doing unless you exactly

00:12:27,170 --> 00:12:31,519
understand the state obviously this

00:12:29,269 --> 00:12:33,890
example is like ten lines of code on one

00:12:31,519 --> 00:12:36,050
screen but imagine this in a bigger

00:12:33,890 --> 00:12:39,829
script it's a lot easier to a lot harder

00:12:36,050 --> 00:12:45,920
to find these kind of issues so I want

00:12:39,829 --> 00:12:48,829
to redesign this by using classes let's

00:12:45,920 --> 00:12:50,750
start with an API design so I'm sorry I

00:12:48,829 --> 00:12:53,029
forgot to mention I'm classes and if you

00:12:50,750 --> 00:12:55,699
have not use classes before we use class

00:12:53,029 --> 00:12:58,010
as a blueprint to create object and an

00:12:55,699 --> 00:13:02,089
object and capsule its state as well as

00:12:58,010 --> 00:13:03,980
behavior data and methods so let's

00:13:02,089 --> 00:13:06,140
design it we say we create an object

00:13:03,980 --> 00:13:08,720
from your calculator class by providing

00:13:06,140 --> 00:13:11,199
a base once we've done that we can call

00:13:08,720 --> 00:13:11,199
methods on it

00:13:12,410 --> 00:13:17,270
here's how I would implemented we used

00:13:14,660 --> 00:13:19,040
the class keyword every class has a

00:13:17,270 --> 00:13:21,320
constructor it is something that's

00:13:19,040 --> 00:13:24,080
called internally and we use it to

00:13:21,320 --> 00:13:26,960
provide it with a base and we then then

00:13:24,080 --> 00:13:29,180
use the self keyword keyword to store

00:13:26,960 --> 00:13:32,420
the base within the object of the

00:13:29,180 --> 00:13:34,640
calculator calculates so that now if we

00:13:32,420 --> 00:13:37,760
do our operations we can actually

00:13:34,640 --> 00:13:41,870
perform then on top of on top of the

00:13:37,760 --> 00:13:43,460
base that we start this works quite

00:13:41,870 --> 00:13:46,850
nicely with the example I gave earlier

00:13:43,460 --> 00:13:49,640
we now knew up to objects of their class

00:13:46,850 --> 00:13:52,490
we just provided with different bases so

00:13:49,640 --> 00:13:53,930
it's like kind of foolproof to see what

00:13:52,490 --> 00:13:59,780
operation you're performing or what

00:13:53,930 --> 00:14:02,450
object I have a real world example for

00:13:59,780 --> 00:14:04,370
that as well we recently wrote code that

00:14:02,450 --> 00:14:07,850
would synchronize between a SFTP server

00:14:04,370 --> 00:14:09,200
and an s3 server and an s3 bucket so the

00:14:07,850 --> 00:14:11,120
way it worked was we needed the

00:14:09,200 --> 00:14:12,560
connection and after that we start

00:14:11,120 --> 00:14:15,350
syncing certain files

00:14:12,560 --> 00:14:17,930
here's possible implementation similar

00:14:15,350 --> 00:14:20,270
to the calculator new up an object and

00:14:17,930 --> 00:14:22,610
provided with the SFTP server and bucket

00:14:20,270 --> 00:14:25,310
name credentials or packet names and

00:14:22,610 --> 00:14:26,300
then later on once that's established on

00:14:25,310 --> 00:14:29,650
that object

00:14:26,300 --> 00:14:32,780
soon the files you want some

00:14:29,650 --> 00:14:34,910
implementation is fairly similar again

00:14:32,780 --> 00:14:36,560
we use a constructor this time we

00:14:34,910 --> 00:14:39,050
provide it with the server name at the

00:14:36,560 --> 00:14:41,960
bucket name and we already in the

00:14:39,050 --> 00:14:44,240
constructor create the connection to the

00:14:41,960 --> 00:14:46,550
SFTP server and store the bucket

00:14:44,240 --> 00:14:48,410
connection and then later on once we're

00:14:46,550 --> 00:14:50,660
ready to sink we can actually call that

00:14:48,410 --> 00:14:52,730
synchronization method and it can

00:14:50,660 --> 00:14:55,910
benefit from the fact that we already

00:14:52,730 --> 00:14:58,330
authenticated against SFTP also here's

00:14:55,910 --> 00:15:01,220
another small convention if a method is

00:14:58,330 --> 00:15:03,560
meant to be called internally we prefix

00:15:01,220 --> 00:15:06,410
it with one underscore as opposed to

00:15:03,560 --> 00:15:08,360
methods that are two underscores will be

00:15:06,410 --> 00:15:09,800
the constructor and no underscores are

00:15:08,360 --> 00:15:13,220
methods that are meant to be called from

00:15:09,800 --> 00:15:14,570
the outside world all right this is just

00:15:13,220 --> 00:15:16,550
a sneak peek into classes and it was

00:15:14,570 --> 00:15:19,070
fairly quick what you can do with

00:15:16,550 --> 00:15:21,260
classes you can reuse code that is in

00:15:19,070 --> 00:15:23,480
particular and you use it elsewhere you

00:15:21,260 --> 00:15:25,010
can use inheritance and you can subclass

00:15:23,480 --> 00:15:25,760
Python things having your own

00:15:25,010 --> 00:15:29,329
collections

00:15:25,760 --> 00:15:31,279
and you can write unit tests this is

00:15:29,329 --> 00:15:33,829
really really powerful you write code

00:15:31,279 --> 00:15:38,870
and your unit tests in an isolation very

00:15:33,829 --> 00:15:41,000
strong tip for encapsulate behaviors

00:15:38,870 --> 00:15:43,240
real estate don't leave them separate

00:15:41,000 --> 00:15:45,560
this is like asking for trouble kind of

00:15:43,240 --> 00:15:47,300
youth classes because they if you

00:15:45,560 --> 00:15:51,709
understand them and if you integrate

00:15:47,300 --> 00:15:53,540
them into how you daily write code they

00:15:51,709 --> 00:15:56,290
allow you to understand a lot more

00:15:53,540 --> 00:15:59,510
advanced features and to use them

00:15:56,290 --> 00:16:03,139
alright last section the right tool for

00:15:59,510 --> 00:16:04,839
the job I was wondering if anyone knew

00:16:03,139 --> 00:16:08,000
what this code would print

00:16:04,839 --> 00:16:16,250
it's a faculty code and I call it for

00:16:08,000 --> 00:16:18,110
faculty 3 any guesses all right you

00:16:16,250 --> 00:16:20,420
probably guessed there was catch so if

00:16:18,110 --> 00:16:23,000
you print it it doesn't do much I

00:16:20,420 --> 00:16:24,529
thought the same code in my IDE and it

00:16:23,000 --> 00:16:26,720
says there's a missing closing

00:16:24,529 --> 00:16:30,980
parentheses and I want to make a point

00:16:26,720 --> 00:16:32,329
that using an IDE helps a lot dealing

00:16:30,980 --> 00:16:35,389
with complex code in a high-level

00:16:32,329 --> 00:16:37,790
programming language so can you do this

00:16:35,389 --> 00:16:43,029
with your editor I'm kind of sensing the

00:16:37,790 --> 00:16:45,170
question removing unused imports

00:16:43,029 --> 00:16:47,600
reformatting code automatically

00:16:45,170 --> 00:16:49,699
according to partha standards that's a

00:16:47,600 --> 00:16:52,279
good one create a breakpoint

00:16:49,699 --> 00:16:55,160
inspect variables at runtime and change

00:16:52,279 --> 00:16:56,990
the value or just like rename a method

00:16:55,160 --> 00:16:59,779
across the whole project you can do all

00:16:56,990 --> 00:17:01,970
that with an IDE and I strongly

00:16:59,779 --> 00:17:04,970
recommend for Python code look into an

00:17:01,970 --> 00:17:08,360
IDE and see if we can make use from it

00:17:04,970 --> 00:17:14,230
just because you can and this is

00:17:08,360 --> 00:17:14,230
actually all ahead thank you very much I

00:17:18,309 --> 00:17:26,299
have two more slides I hope you find it

00:17:23,510 --> 00:17:28,189
useful otherwise I found this quote from

00:17:26,299 --> 00:17:29,630
one of the Python car developers if

00:17:28,189 --> 00:17:32,260
someone uses features you don't know

00:17:29,630 --> 00:17:32,260
just shoot

00:17:33,290 --> 00:17:39,330
and very very last slide the talks

00:17:36,840 --> 00:17:41,580
online that's the above link and further

00:17:39,330 --> 00:17:42,930
reading links on the github project in

00:17:41,580 --> 00:17:46,490
the middle ring and if you want to reach

00:17:42,930 --> 00:17:46,490
me here's my email thank you very much

00:17:49,130 --> 00:17:54,120
so we have sometimes questions if anyone

00:17:51,930 --> 00:17:55,560
has questions and if you don't want to

00:17:54,120 --> 00:17:59,250
type that Lincoln it's also linked from

00:17:55,560 --> 00:18:00,840
the sysadmin mini Kampf program I just

00:17:59,250 --> 00:18:14,120
tweeted it and it was an IRC a little

00:18:00,840 --> 00:18:17,940
while ago so any questions Stan silence

00:18:14,120 --> 00:18:21,120
okay we have about ten minutes there's a

00:18:17,940 --> 00:18:23,460
room change break until the next speaker

00:18:21,120 --> 00:18:24,990
so you have a little bit of a breather

00:18:23,460 --> 00:18:28,490
you can have a flick through it slides

00:18:24,990 --> 00:18:28,490

YouTube URL: https://www.youtube.com/watch?v=aAUYTcy6eGU


