Title: Zen and the Art of Learning Assembler in the 21st Century
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Tom Cully

https://2019.linux.conf.au/schedule/presentation/256/

A presentation on the benefits of learning (and starting students at) Assembler from experience with the BlackRaven Dojo - i.e. once you have coded in assembly, 'There's No Magic'. In today's world of 'learn to code in 6 weeks' courses and programmes that teach high-level languages in the first month, we are in danger of the widening gap between an abstract and fundamental understanding of machines. I put forward the case that we should start training young engineers at the lowest possible level (assembly language) - not because it is necessarily useful of itself, but because of the deep understanding and efficiency learned from such a low level approach. There is a saying in Wing Tsun Kung Fu - 'If you can't do it slow, you can't do it fast.' - I propose that something similar is true in software; if one does not develop a deep understanding of the fundamentals of machine architecture and programming at the chip level, one is less likely to be able to meet the challenges of the modern age; that learning the lowest level possible teaches lessons that are relevant even when the target architecture has multiple cores, GHz of performance, and Gbs of memory. With our recent focus on IoT, an 'old-skool' approach is especially relevant given IoT and embedded devices, which possess very limited capabilities by comparison.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,030 --> 00:00:10,019
so it's time I switched on my controller

00:00:05,339 --> 00:00:11,700
it's 2019 and there's been kind of a

00:00:10,019 --> 00:00:13,559
theme in the past past couple of years

00:00:11,700 --> 00:00:15,120
which has been quite interesting kind of

00:00:13,559 --> 00:00:19,350
globally I don't know if you've you've

00:00:15,120 --> 00:00:24,930
noticed but not that theme is liars and

00:00:19,350 --> 00:00:27,810
lies yeah there was no way I couldn't

00:00:24,930 --> 00:00:30,390
put this up so it seems that kind of

00:00:27,810 --> 00:00:31,529
everyone's everyone's other politicians

00:00:30,390 --> 00:00:34,680
lie all the time well that's nothing new

00:00:31,529 --> 00:00:36,840
but the amounts in the frequency of

00:00:34,680 --> 00:00:38,579
these these lies has seemed to got an

00:00:36,840 --> 00:00:41,070
awful lot worse and it seems to have

00:00:38,579 --> 00:00:43,110
kind of spread everywhere and it's kind

00:00:41,070 --> 00:00:45,750
of got to the point as well were people

00:00:43,110 --> 00:00:47,340
are so used to lies that it's kind of

00:00:45,750 --> 00:00:48,719
just become the new normal it's actually

00:00:47,340 --> 00:00:51,090
kind of kind of quite difficult to tell

00:00:48,719 --> 00:00:52,590
what's true you know not because we

00:00:51,090 --> 00:00:54,690
don't do a research just because there's

00:00:52,590 --> 00:00:56,309
just so many lies and it's difficult to

00:00:54,690 --> 00:00:57,840
kind of trust different things and this

00:00:56,309 --> 00:01:03,390
is kind of a global problem and that's

00:00:57,840 --> 00:01:05,820
everywhere except us right yeah we're

00:01:03,390 --> 00:01:09,750
we're engineers we're we're scientists

00:01:05,820 --> 00:01:13,229
we're we're programmers and we we don't

00:01:09,750 --> 00:01:16,110
lie we are our stocking traders as truth

00:01:13,229 --> 00:01:17,939
that's what we do you can't make two

00:01:16,110 --> 00:01:20,850
plus two equal to five if unless you're

00:01:17,939 --> 00:01:22,200
very very careful with advanced

00:01:20,850 --> 00:01:25,830
mathematics and generally speaking you

00:01:22,200 --> 00:01:27,990
can't at all and programming you can't

00:01:25,830 --> 00:01:30,360
kind of you know convince a machine to

00:01:27,990 --> 00:01:33,570
do something which it isn't designed to

00:01:30,360 --> 00:01:36,560
do at a kind of a fundamental level you

00:01:33,570 --> 00:01:39,240
can make up whatever lies you want about

00:01:36,560 --> 00:01:40,829
theory and you can tell them to people

00:01:39,240 --> 00:01:44,909
but it doesn't actually mean it's true

00:01:40,829 --> 00:01:46,020
or demonstratable yeah well I mean we we

00:01:44,909 --> 00:01:49,350
always tell the truth because that's

00:01:46,020 --> 00:01:51,479
kind of what we're all about the thing

00:01:49,350 --> 00:01:55,979
is that we actually do like quite quite

00:01:51,479 --> 00:01:59,460
frequently to to ourselves and that's

00:01:55,979 --> 00:02:00,990
something which is kind of in the way of

00:01:59,460 --> 00:02:04,649
a few things and this is going to come

00:02:00,990 --> 00:02:07,560
back to the previous talk um we we tell

00:02:04,649 --> 00:02:09,599
ourselves lots of interesting lies we

00:02:07,560 --> 00:02:12,030
tell ourselves that we have in say for

00:02:09,599 --> 00:02:13,920
instance infinite memory I was the last

00:02:12,030 --> 00:02:15,960
time you you thought about

00:02:13,920 --> 00:02:17,400
allocating memory if you're writing

00:02:15,960 --> 00:02:19,350
applications I mean if you're not you're

00:02:17,400 --> 00:02:21,270
a kernel engineer than fair enough you

00:02:19,350 --> 00:02:23,490
know but we've got things like automatic

00:02:21,270 --> 00:02:25,080
allocation de-allocation we've got

00:02:23,490 --> 00:02:26,670
memory paging I've had done for a very

00:02:25,080 --> 00:02:27,960
long time we've got garbage collection

00:02:26,670 --> 00:02:30,720
which means we don't have to worry about

00:02:27,960 --> 00:02:32,250
sort of you know freeing up memory and

00:02:30,720 --> 00:02:34,200
that sort of thing and the overall lie

00:02:32,250 --> 00:02:36,870
is that we don't need to worry about

00:02:34,200 --> 00:02:38,840
memory anymore at all it's just kind of

00:02:36,870 --> 00:02:43,280
there and it works and it does its thing

00:02:38,840 --> 00:02:46,890
um another's reliable infinite storage

00:02:43,280 --> 00:02:49,650
we have terabytes of disk space night

00:02:46,890 --> 00:02:53,000
it's even really fast cuz it's SSD and

00:02:49,650 --> 00:02:55,800
we've got exabytes of cloud disk storage

00:02:53,000 --> 00:02:57,120
we have so much storage out there as

00:02:55,800 --> 00:02:58,740
long as we're connected that

00:02:57,120 --> 00:03:02,190
realistically speaking we will never be

00:02:58,740 --> 00:03:03,959
able to fill it it's infinite we don't

00:03:02,190 --> 00:03:05,580
think about it when was the last time

00:03:03,959 --> 00:03:08,459
you kind of like route something to

00:03:05,580 --> 00:03:10,680
cloud storage and seriously expected the

00:03:08,459 --> 00:03:12,030
error callback to actually hit it's

00:03:10,680 --> 00:03:15,420
probably not going to happen

00:03:12,030 --> 00:03:19,260
um this goes on there's there's infinite

00:03:15,420 --> 00:03:22,110
performance we have multi-core threading

00:03:19,260 --> 00:03:23,790
we have gigahertz and very short to be

00:03:22,110 --> 00:03:25,590
terahertz in terms of like actual clock

00:03:23,790 --> 00:03:28,019
cycles we have more and more and more

00:03:25,590 --> 00:03:29,610
efficient chips we have many of them we

00:03:28,019 --> 00:03:32,640
have many more chips in single machines

00:03:29,610 --> 00:03:34,830
many cores a concurrency and several is

00:03:32,640 --> 00:03:36,900
computing the idea again of Claude

00:03:34,830 --> 00:03:39,630
engineering were you take something like

00:03:36,900 --> 00:03:41,550
I don't know AWS and you pretty much

00:03:39,630 --> 00:03:43,410
just threw 10 up the problem until your

00:03:41,550 --> 00:03:45,750
performance issues go away and it's so

00:03:43,410 --> 00:03:48,810
cheap that you can actually just do that

00:03:45,750 --> 00:03:51,180
you you don't really need to worry about

00:03:48,810 --> 00:03:52,470
that so there's no reason to kind of

00:03:51,180 --> 00:03:53,580
think about this in the first place you

00:03:52,470 --> 00:03:55,980
can assume that you have infinite

00:03:53,580 --> 00:03:57,930
performance because the resources

00:03:55,980 --> 00:04:01,200
required to give you that are so

00:03:57,930 --> 00:04:03,540
knowledgeable we pretend that we have

00:04:01,200 --> 00:04:06,680
infinite bandwidths we have gigabit

00:04:03,540 --> 00:04:10,380
fiber connections to give you an example

00:04:06,680 --> 00:04:12,120
my recent company passed fear we just

00:04:10,380 --> 00:04:15,480
got our first office in Wellington which

00:04:12,120 --> 00:04:17,220
is awesome and fiber course being who

00:04:15,480 --> 00:04:18,660
they are that haven't actually managed

00:04:17,220 --> 00:04:22,460
to get the fiber connection yet so they

00:04:18,660 --> 00:04:24,750
lent us a 4G modem

00:04:22,460 --> 00:04:26,460
Wi-Fi and that's what we're using and

00:04:24,750 --> 00:04:27,270
it's perfectly adequate for our needs

00:04:26,460 --> 00:04:30,090
now fair enough we don't

00:04:27,270 --> 00:04:32,490
use a lot of dollar but it's absolutely

00:04:30,090 --> 00:04:34,319
fine and I can certain you know like put

00:04:32,490 --> 00:04:35,699
my site R and so on and YouTube and kind

00:04:34,319 --> 00:04:36,659
of get about my day and it's all great

00:04:35,699 --> 00:04:39,960
no problem at all

00:04:36,659 --> 00:04:42,599
um 5g and Beyond will give us even more

00:04:39,960 --> 00:04:43,949
bandwidth the thing is that we realistic

00:04:42,599 --> 00:04:46,050
speaking we really don't think these

00:04:43,949 --> 00:04:47,750
days about actually that sort of

00:04:46,050 --> 00:04:50,550
transfer because most stuff especially

00:04:47,750 --> 00:04:52,889
API up sort of stuff the amount of data

00:04:50,550 --> 00:04:54,930
is so small compared to the bandwidth

00:04:52,889 --> 00:04:58,889
that we just don't care we don't think

00:04:54,930 --> 00:05:01,199
about it all of these are lies and their

00:04:58,889 --> 00:05:04,259
lies that we we tell ourselves no you're

00:05:01,199 --> 00:05:05,699
probably thinking what the you know

00:05:04,259 --> 00:05:08,759
because they're not really nice these

00:05:05,699 --> 00:05:11,490
are more like abstracts or things which

00:05:08,759 --> 00:05:13,860
are negligible you know things which

00:05:11,490 --> 00:05:18,139
aren't really we just don't have to

00:05:13,860 --> 00:05:18,139
think about they're not lies right I

00:05:18,259 --> 00:05:25,860
disagree let's go back to a much simpler

00:05:22,919 --> 00:05:27,300
time and this is kind of like a personal

00:05:25,860 --> 00:05:31,349
story if I did this sort of stuff it's

00:05:27,300 --> 00:05:32,419
1986 I am younger than I am known that's

00:05:31,349 --> 00:05:35,759
just leave it at that

00:05:32,419 --> 00:05:37,740
this is a synchro spectrum plus two

00:05:35,759 --> 00:05:41,400
my parents had bought me one of these

00:05:37,740 --> 00:05:43,620
things let's just take a tangent for a

00:05:41,400 --> 00:05:45,060
second and work through its specs right

00:05:43,620 --> 00:05:47,159
no this is just compared to sort of

00:05:45,060 --> 00:05:49,250
modern machines this thing runs at 3.5

00:05:47,159 --> 00:05:52,169
megahertz and there's energy processor

00:05:49,250 --> 00:05:55,050
most of those instructions are multi

00:05:52,169 --> 00:05:57,599
clock cycle you have 128 kilobytes of

00:05:55,050 --> 00:05:59,669
ROM if you put up the right mode you

00:05:57,599 --> 00:06:01,650
have 48 kilobytes of tip tip storage

00:05:59,669 --> 00:06:03,330
which takes 20 minutes to load from an

00:06:01,650 --> 00:06:06,479
actual audio cassette and may or may not

00:06:03,330 --> 00:06:08,610
work which is really irritating you've

00:06:06,479 --> 00:06:12,090
got these you know absolutely awesome

00:06:08,610 --> 00:06:13,800
graphics which are fantastic like here's

00:06:12,090 --> 00:06:15,509
the thing I didn't know what I didn't

00:06:13,800 --> 00:06:17,310
know was that my parents were actually

00:06:15,509 --> 00:06:18,779
kind of barely getting by they were

00:06:17,310 --> 00:06:20,699
really good at hiding all that stuff and

00:06:18,779 --> 00:06:22,139
myself and my brother and they kind of

00:06:20,699 --> 00:06:26,940
scrimped on see have to buy this this

00:06:22,139 --> 00:06:28,529
this computer for us we that was grid

00:06:26,940 --> 00:06:31,650
but we they couldn't really afford to

00:06:28,529 --> 00:06:33,449
buy games so there's really only so many

00:06:31,650 --> 00:06:35,069
times you can actually get through manic

00:06:33,449 --> 00:06:36,949
miner and Paddington's Garden game

00:06:35,069 --> 00:06:40,020
before things start to get a little dull

00:06:36,949 --> 00:06:40,719
because I was an extremely antisocial

00:06:40,020 --> 00:06:45,429
child

00:06:40,719 --> 00:06:47,049
overall I decided to kind of take a look

00:06:45,429 --> 00:06:49,449
to see if it could do more and of course

00:06:47,049 --> 00:06:51,939
in the spectrum you have this concept of

00:06:49,449 --> 00:06:53,949
basic my basic was awesome from my point

00:06:51,939 --> 00:06:56,559
of view because you could type things in

00:06:53,949 --> 00:06:57,699
and make it do stuff I mean it didn't

00:06:56,559 --> 00:06:59,289
look a lot like gamers but you were

00:06:57,699 --> 00:07:02,019
causing the machine to actually do

00:06:59,289 --> 00:07:03,429
something that was fascinating no I was

00:07:02,019 --> 00:07:04,929
like well I mean surely people must do

00:07:03,429 --> 00:07:07,479
kind of like more of this and I was

00:07:04,929 --> 00:07:08,799
right um all the magazines like yer

00:07:07,479 --> 00:07:10,389
Sinclair that sort of thing and this was

00:07:08,799 --> 00:07:13,179
a time whenever they didn't just review

00:07:10,389 --> 00:07:15,789
games they heard you know fools so like

00:07:13,179 --> 00:07:18,129
three and four page sections of stuff to

00:07:15,789 --> 00:07:20,169
type in these huge lists of instructions

00:07:18,129 --> 00:07:24,159
you could type in and basic to mix to

00:07:20,169 --> 00:07:26,379
happen and like I said because I was you

00:07:24,159 --> 00:07:27,879
know really very / in the social skills

00:07:26,379 --> 00:07:29,589
I spent a lot of time of the stuff

00:07:27,879 --> 00:07:35,050
typing everything in and it was just it

00:07:29,589 --> 00:07:36,249
was awesome father was grid they even

00:07:35,050 --> 00:07:38,499
got to the point where I started to kind

00:07:36,249 --> 00:07:40,089
of modify these things you have to type

00:07:38,499 --> 00:07:41,139
in yourself I can't started thinking

00:07:40,089 --> 00:07:43,360
about it was work right well their

00:07:41,139 --> 00:07:44,379
structure in here that must make sense

00:07:43,360 --> 00:07:45,969
and some of the magazines were really

00:07:44,379 --> 00:07:47,529
good for them Cyril this bit does this

00:07:45,969 --> 00:07:49,389
and this bit thinks about this this is a

00:07:47,529 --> 00:07:52,360
thing called a variable you know I mean

00:07:49,389 --> 00:07:54,699
this is an operation you've got bits of

00:07:52,360 --> 00:07:56,079
code I learned it was called which don't

00:07:54,699 --> 00:07:58,569
happen unless you're doing certain

00:07:56,079 --> 00:07:59,979
things at certain times that's that's

00:07:58,569 --> 00:08:02,110
absolutely fascinating then this went on

00:07:59,979 --> 00:08:04,689
to the point where I was actually able

00:08:02,110 --> 00:08:07,419
to write very basic games kind of on my

00:08:04,689 --> 00:08:08,739
own which incidentally didn't make me

00:08:07,419 --> 00:08:09,939
any more popular than I had been before

00:08:08,739 --> 00:08:15,519
but that's not the point

00:08:09,939 --> 00:08:17,409
so fast-forward to 1992 and this is

00:08:15,519 --> 00:08:18,939
where it happened

00:08:17,409 --> 00:08:20,439
my parents had come into a bit of money

00:08:18,939 --> 00:08:23,139
so they think they give me an OP grid

00:08:20,439 --> 00:08:25,029
they bought me an Amiga and this thing

00:08:23,139 --> 00:08:26,619
was amusing I mean when you come after

00:08:25,029 --> 00:08:28,059
the sort of graphics which we'd seen on

00:08:26,619 --> 00:08:29,919
the spectrum not source stuff but just

00:08:28,059 --> 00:08:32,139
as a time that's just again take a look

00:08:29,919 --> 00:08:33,430
at the sort of specs of this machine

00:08:32,139 --> 00:08:35,500
compared to modern machines

00:08:33,430 --> 00:08:38,829
you got a seven point one four megahertz

00:08:35,500 --> 00:08:41,409
MC 68k processor you've got 512

00:08:38,829 --> 00:08:44,019
kilobytes of RAM I mean that's four

00:08:41,409 --> 00:08:45,699
times more than the spectrum and for 400

00:08:44,019 --> 00:08:47,410
UK points you could buy a little

00:08:45,699 --> 00:08:49,899
extension that ones in the bottom that

00:08:47,410 --> 00:08:51,130
gives you another 512 kilobytes and what

00:08:49,899 --> 00:08:53,470
you all have to a megabyte it was

00:08:51,130 --> 00:08:54,530
amazing we've got these 3.5 inch floppy

00:08:53,470 --> 00:08:55,820
disks

00:08:54,530 --> 00:08:57,110
which are dark shape because you can buy

00:08:55,820 --> 00:08:58,250
them HD and buy them in bulk and

00:08:57,110 --> 00:08:59,720
everything else and there isn't nearly

00:08:58,250 --> 00:09:04,100
kilobytes they don't even take that long

00:08:59,720 --> 00:09:05,870
to loom so the Amiga was I mean I'm not

00:09:04,100 --> 00:09:08,210
going to go on about it i I don't suffer

00:09:05,870 --> 00:09:10,130
from a negative persecution complex and

00:09:08,210 --> 00:09:10,880
anymore I go to meetings it's fine it's

00:09:10,130 --> 00:09:13,820
good

00:09:10,880 --> 00:09:15,410
so the Amiga I do I will rant about it

00:09:13,820 --> 00:09:17,060
for a second because it did have some

00:09:15,410 --> 00:09:20,120
amazing things like the custom graphics

00:09:17,060 --> 00:09:22,580
and sound chipset you know compared to

00:09:20,120 --> 00:09:26,240
the spectrum this was just incredible

00:09:22,580 --> 00:09:28,070
this was amusing and the nice thing of

00:09:26,240 --> 00:09:29,900
course was that there were still these

00:09:28,070 --> 00:09:31,250
magazines with cover discs and stuff

00:09:29,900 --> 00:09:33,410
like that and you know I could actually

00:09:31,250 --> 00:09:36,710
buy a few games now which was nice

00:09:33,410 --> 00:09:38,570
and they really got into us more kind of

00:09:36,710 --> 00:09:39,590
as a gamer as just like my kid playing

00:09:38,570 --> 00:09:42,590
games and everything else but the

00:09:39,590 --> 00:09:44,750
problem is that the bug had Bethan and I

00:09:42,590 --> 00:09:49,960
missed being able to get the machine to

00:09:44,750 --> 00:09:52,550
do things which I wanted it to do um

00:09:49,960 --> 00:09:54,170
fearfully I've no idea exactly what it

00:09:52,550 --> 00:09:55,340
was but there was a particular cover

00:09:54,170 --> 00:09:59,510
disc I think it might have been a mega

00:09:55,340 --> 00:10:01,460
user which had a basic copy of a most

00:09:59,510 --> 00:10:04,700
fierce economist so I started playing

00:10:01,460 --> 00:10:06,500
about with this and it was kind of like

00:10:04,700 --> 00:10:07,880
the spectrum except with better graphics

00:10:06,500 --> 00:10:09,710
and you could actually make things move

00:10:07,880 --> 00:10:11,960
and you weren't limited to two colors

00:10:09,710 --> 00:10:13,600
per it by a pixel and it didn't take

00:10:11,960 --> 00:10:17,120
twenty minutes to load or tip I'm

00:10:13,600 --> 00:10:18,530
playing about with this in most basic

00:10:17,120 --> 00:10:20,000
now of course I've no manual for this

00:10:18,530 --> 00:10:23,300
thing so I had to figure it out broadly

00:10:20,000 --> 00:10:24,860
myself I remember spending what seems

00:10:23,300 --> 00:10:26,540
like months but must have been days or

00:10:24,860 --> 00:10:29,060
weeks figuring out how to do something

00:10:26,540 --> 00:10:31,040
that the air moss kind of a long way and

00:10:29,060 --> 00:10:32,690
then someone would say to me oh yeah but

00:10:31,040 --> 00:10:34,339
you just do this and I saw one liner and

00:10:32,690 --> 00:10:36,830
I'm like alright and this was my first

00:10:34,339 --> 00:10:39,860
exposure to programmer stress which was

00:10:36,830 --> 00:10:42,020
awesome and of course the Amiga had much

00:10:39,860 --> 00:10:43,280
better better graphics of a bit of a

00:10:42,020 --> 00:10:44,570
sort of an artistic bent although I

00:10:43,280 --> 00:10:45,920
don't like telling too many people about

00:10:44,570 --> 00:10:48,110
it in case they actually asked me to

00:10:45,920 --> 00:10:49,850
design something to embarrass myself but

00:10:48,110 --> 00:10:51,350
on another cover disc we had stuff like

00:10:49,850 --> 00:10:54,980
deluxe peon so I was actually able to

00:10:51,350 --> 00:10:56,420
bring in you know some graphics actually

00:10:54,980 --> 00:10:59,150
able to write stuff in and everything

00:10:56,420 --> 00:11:01,100
else and that was that was fantastic and

00:10:59,150 --> 00:11:02,480
again I got to the point through typing

00:11:01,100 --> 00:11:03,890
and stuff and through just actually

00:11:02,480 --> 00:11:05,150
creating my own and sort of thinking

00:11:03,890 --> 00:11:07,339
about it these little games and they

00:11:05,150 --> 00:11:08,150
gave them to my friends and this still

00:11:07,339 --> 00:11:10,370
didn't make me any

00:11:08,150 --> 00:11:12,650
so I'm not willing here but anyway we're

00:11:10,370 --> 00:11:15,140
going with it um okay

00:11:12,650 --> 00:11:18,800
the thing is the games as well because

00:11:15,140 --> 00:11:19,970
we could actually buy them like all kids

00:11:18,800 --> 00:11:21,290
I mean you kind of want to cheat a

00:11:19,970 --> 00:11:22,700
little bit of your games or do better

00:11:21,290 --> 00:11:26,600
than other people and that sort of stuff

00:11:22,700 --> 00:11:29,120
and we got one of these the action

00:11:26,600 --> 00:11:32,330
replay mark 3 to tell and this thing

00:11:29,120 --> 00:11:34,070
plugs in the side of the Omega that

00:11:32,330 --> 00:11:35,840
freeze button you can get that and it

00:11:34,070 --> 00:11:39,710
kind of freezes the whole machine and

00:11:35,840 --> 00:11:42,890
takes you into this this sort of editor

00:11:39,710 --> 00:11:44,810
this sort of like UI sort of thing and

00:11:42,890 --> 00:11:46,520
then you could type in like cheat codes

00:11:44,810 --> 00:11:48,470
and that sort of stuff from magazines or

00:11:46,520 --> 00:11:50,450
whatever else and the thing is this this

00:11:48,470 --> 00:11:52,280
was it had a couple of different modes

00:11:50,450 --> 00:11:53,600
it's a really basic sort of moods just

00:11:52,280 --> 00:11:55,730
you know you type in literally this

00:11:53,600 --> 00:11:57,740
digit code that you got in the magazine

00:11:55,730 --> 00:12:00,050
and you've got lives but for the more

00:11:57,740 --> 00:12:02,240
advanced users it it actually told you

00:12:00,050 --> 00:12:05,420
right well if you go and modify these

00:12:02,240 --> 00:12:06,380
bytes here these instructions here then

00:12:05,420 --> 00:12:10,220
you can do some really interesting

00:12:06,380 --> 00:12:11,780
things with these games the action for

00:12:10,220 --> 00:12:15,350
mark three had a built in assembler

00:12:11,780 --> 00:12:16,040
disassembler and that opened the world

00:12:15,350 --> 00:12:19,160
for me

00:12:16,040 --> 00:12:21,710
suddenly I was like alright okay see

00:12:19,160 --> 00:12:24,350
this looks a bit like in Los it's even

00:12:21,710 --> 00:12:26,600
it's even the same color of screen I I

00:12:24,350 --> 00:12:27,860
was wrong obviously but you know people

00:12:26,600 --> 00:12:30,200
if only we wrote everything in the air

00:12:27,860 --> 00:12:32,810
most but suddenly it occurred to me that

00:12:30,200 --> 00:12:35,030
there must be this was a language but it

00:12:32,810 --> 00:12:36,410
must be something in here which which

00:12:35,030 --> 00:12:38,630
makes sense this is how you actually

00:12:36,410 --> 00:12:41,690
drive the machine to do things overall

00:12:38,630 --> 00:12:44,720
and that's when everything started to

00:12:41,690 --> 00:12:47,480
open up properly I started to learn a

00:12:44,720 --> 00:12:49,220
bit more about what was going on and

00:12:47,480 --> 00:12:50,710
suddenly the instruction started to sort

00:12:49,220 --> 00:12:52,910
of make sense the thing is that I

00:12:50,710 --> 00:12:55,250
discovered in here's an awful lot more

00:12:52,910 --> 00:12:58,160
than just what these are all acronyms

00:12:55,250 --> 00:13:00,370
not I discovered that I needed to know

00:12:58,160 --> 00:13:04,100
about how the electronics of the machine

00:13:00,370 --> 00:13:06,470
worked because what's this thing called

00:13:04,100 --> 00:13:07,640
memory you know what is a register

00:13:06,470 --> 00:13:09,320
anyway I mean how does that work

00:13:07,640 --> 00:13:12,800
what's the possibility stack sucky I

00:13:09,320 --> 00:13:16,730
keep kind of hearing advice um why can't

00:13:12,800 --> 00:13:18,320
I branch you know over four kilobytes of

00:13:16,730 --> 00:13:19,880
memory I knew to use a jump instead that

00:13:18,320 --> 00:13:21,110
doesn't make any sense it's it's weird

00:13:19,880 --> 00:13:23,720
and so surely issued just one

00:13:21,110 --> 00:13:24,860
destruction so no there's I don't think

00:13:23,720 --> 00:13:26,209
there's really anybody here who's not

00:13:24,860 --> 00:13:27,680
gonna get this the next slice really

00:13:26,209 --> 00:13:29,269
won't make a lot of sounds I expected to

00:13:27,680 --> 00:13:31,279
have to do a bit of actual education as

00:13:29,269 --> 00:13:34,850
part of the educational money Kampf okay

00:13:31,279 --> 00:13:36,350
this is a library now a library was a

00:13:34,850 --> 00:13:38,480
place where you could go out in you

00:13:36,350 --> 00:13:39,860
could borrow books no books are a little

00:13:38,480 --> 00:13:41,029
bit like prints out you know if you

00:13:39,860 --> 00:13:42,260
print out loads of stuff and stick the

00:13:41,029 --> 00:13:43,700
edge together you got this thing you can

00:13:42,260 --> 00:13:45,980
carry around and you can read them off

00:13:43,700 --> 00:13:47,390
the books and everything else I think we

00:13:45,980 --> 00:13:49,279
all were all kind of old enough to get

00:13:47,390 --> 00:13:51,440
that which is maybe both a compliment

00:13:49,279 --> 00:13:52,310
under than sold but anyway previously

00:13:51,440 --> 00:13:53,839
internet these were of course

00:13:52,310 --> 00:13:56,180
occasionally useful this is my local

00:13:53,839 --> 00:13:57,260
library in my home time and I was able

00:13:56,180 --> 00:13:59,390
to go there if it'll always been a

00:13:57,260 --> 00:14:00,829
little bit into electronics and almost

00:13:59,390 --> 00:14:04,060
like kind of wired up with motors and

00:14:00,829 --> 00:14:06,110
switches and stuff like that and learn

00:14:04,060 --> 00:14:07,279
of course the first thing out to do was

00:14:06,110 --> 00:14:09,050
actually understand Belize little

00:14:07,279 --> 00:14:11,810
acronyms man that I saw coming out of

00:14:09,050 --> 00:14:14,149
the action replay and what about to pick

00:14:11,810 --> 00:14:17,600
up was the Amiga Hardware reference

00:14:14,149 --> 00:14:20,269
manual which was tons of what I later

00:14:17,600 --> 00:14:21,200
learned or see examples but by then I

00:14:20,269 --> 00:14:22,790
could already see that there was

00:14:21,200 --> 00:14:25,130
structure in the code I was looking at

00:14:22,790 --> 00:14:27,320
and I could see kind of how even though

00:14:25,130 --> 00:14:28,730
the language in there wasn't what I was

00:14:27,320 --> 00:14:31,820
used to seeing it kind of made sense

00:14:28,730 --> 00:14:33,110
that I saw the patterns between them and

00:14:31,820 --> 00:14:35,360
that started to make sense as well none

00:14:33,110 --> 00:14:37,399
of course not actually this book I

00:14:35,360 --> 00:14:38,570
didn't get but the 68k kind of reference

00:14:37,399 --> 00:14:41,570
overall to take a look at what the

00:14:38,570 --> 00:14:43,130
actual chip was doing um that of course

00:14:41,570 --> 00:14:46,250
wasn't enough I had to learn as well

00:14:43,130 --> 00:14:48,290
about how the electronics of the system

00:14:46,250 --> 00:14:52,519
work what what an address bus is what a

00:14:48,290 --> 00:14:54,709
data bus is what clock signals are how

00:14:52,519 --> 00:14:56,240
these all things come together how you

00:14:54,709 --> 00:14:59,690
get memory addressing which of course

00:14:56,240 --> 00:15:01,070
that into 74 serious logic and all of

00:14:59,690 --> 00:15:02,510
this sort of stuff news it's ancient

00:15:01,070 --> 00:15:04,279
stuff no but it was absolutely

00:15:02,510 --> 00:15:08,480
fascinating to me because I kind of

00:15:04,279 --> 00:15:10,100
learned you know sort of it's a bit of a

00:15:08,480 --> 00:15:13,060
books but from first principles how the

00:15:10,100 --> 00:15:15,490
machine works from the ground up and

00:15:13,060 --> 00:15:17,959
that got absolutely fascinating because

00:15:15,490 --> 00:15:20,990
for some reason it just made sense to me

00:15:17,959 --> 00:15:23,180
and I ended up doing some really amazing

00:15:20,990 --> 00:15:25,670
things with with the Amiga first with

00:15:23,180 --> 00:15:29,270
the most basic and then with actually

00:15:25,670 --> 00:15:31,579
writing directly in assembler literally

00:15:29,270 --> 00:15:33,529
just using the action replay and then

00:15:31,579 --> 00:15:34,880
moving on to there was a C compiler on

00:15:33,529 --> 00:15:36,500
another cover disc it's really all about

00:15:34,880 --> 00:15:38,990
covered us this is drew it or turbo

00:15:36,500 --> 00:15:40,280
Pascal or something no yeah I wrote some

00:15:38,990 --> 00:15:42,230
really amazing things none of which you

00:15:40,280 --> 00:15:44,390
can see because I'm not a famous Omega

00:15:42,230 --> 00:15:45,130
programmer at all and that's just kind

00:15:44,390 --> 00:15:48,080
of it

00:15:45,130 --> 00:15:51,260
overall this entire thing what does that

00:15:48,080 --> 00:15:53,150
what does this got to do with lies this

00:15:51,260 --> 00:15:54,380
is kind of my story as an engineer it's

00:15:53,150 --> 00:15:57,080
it's where I kind of started the whole

00:15:54,380 --> 00:16:01,250
thing so why did I just say that we're

00:15:57,080 --> 00:16:04,880
all were all Liars maybe it's a better

00:16:01,250 --> 00:16:06,230
way to put it as a metaphor terry

00:16:04,880 --> 00:16:08,420
pratchett and Wonder Smith said that a

00:16:06,230 --> 00:16:10,220
what a metaphor is that kind of lie to

00:16:08,420 --> 00:16:12,020
help people understand what's true and

00:16:10,220 --> 00:16:13,970
maybe the lies something talking about

00:16:12,020 --> 00:16:15,350
like infinite memory and I'm from their

00:16:13,970 --> 00:16:16,880
performance sinfulness storage sniffing

00:16:15,350 --> 00:16:21,650
a bandwidth are kind of more like

00:16:16,880 --> 00:16:22,580
abstracts and metaphors around away from

00:16:21,650 --> 00:16:24,230
the truth but they help people

00:16:22,580 --> 00:16:26,660
understand what it is that we have and

00:16:24,230 --> 00:16:29,440
what it is that we have our advanced

00:16:26,660 --> 00:16:31,430
programming concepts what we have are

00:16:29,440 --> 00:16:34,100
languages and language features and

00:16:31,430 --> 00:16:35,960
systems and frameworks that allow us to

00:16:34,100 --> 00:16:40,130
pretend for ourselves that these lies

00:16:35,960 --> 00:16:46,660
are true and that sounds an awful lot

00:16:40,130 --> 00:16:49,040
like magic modern languages are magical

00:16:46,660 --> 00:16:50,210
okay some languages some other languages

00:16:49,040 --> 00:16:53,150
are slightly less magical than others

00:16:50,210 --> 00:16:55,910
but that's our point it's they are

00:16:53,150 --> 00:16:57,800
magical right they do things which

00:16:55,910 --> 00:17:01,730
unless you have a very deep

00:16:57,800 --> 00:17:03,290
understanding look like magic we have we

00:17:01,730 --> 00:17:04,910
have this whole concept of like language

00:17:03,290 --> 00:17:07,610
generations and I'm gonna take them kind

00:17:04,910 --> 00:17:10,220
of from the most magical to the least

00:17:07,610 --> 00:17:12,140
magical let's go for language

00:17:10,220 --> 00:17:15,699
generations we've got the fictional five

00:17:12,140 --> 00:17:18,079
GL write a fictional five GL Jade one

00:17:15,699 --> 00:17:21,829
you may have heard of this it stands for

00:17:18,079 --> 00:17:23,150
just do what I mean every j2m program

00:17:21,829 --> 00:17:25,310
has one source file with one instruction

00:17:23,150 --> 00:17:27,500
that says just do what I mean sometimes

00:17:25,310 --> 00:17:29,600
it's shorter you know because that's

00:17:27,500 --> 00:17:30,830
better for bytes and what that means is

00:17:29,600 --> 00:17:33,260
you're instructing the computer to just

00:17:30,830 --> 00:17:34,340
do what you mean it's you're not you're

00:17:33,260 --> 00:17:38,000
not even telling the computer what it is

00:17:34,340 --> 00:17:39,380
that you want to do you're saying I want

00:17:38,000 --> 00:17:41,180
to do a thing and it's your job to

00:17:39,380 --> 00:17:43,100
figure out what that thing is and how to

00:17:41,180 --> 00:17:44,690
do it and present the results to me or

00:17:43,100 --> 00:17:47,990
do what I mean so just do what I mean

00:17:44,690 --> 00:17:50,360
that is most magic

00:17:47,990 --> 00:17:52,730
that is that is Battle of Hogwarts level

00:17:50,360 --> 00:17:54,590
of magic that is huge amounts of magic

00:17:52,730 --> 00:17:56,110
and that sounds ridiculous and until

00:17:54,590 --> 00:17:59,000
recently judge one was kind of a joke

00:17:56,110 --> 00:18:00,380
but the truth is within a world of

00:17:59,000 --> 00:18:01,909
advanced heuristics we're taking a look

00:18:00,380 --> 00:18:03,440
at you know machine learning we're

00:18:01,909 --> 00:18:04,460
taking a look at this say I think which

00:18:03,440 --> 00:18:05,299
people keep misquoting in

00:18:04,460 --> 00:18:08,510
misunderstanding

00:18:05,299 --> 00:18:10,700
and we're actually not that far off

00:18:08,510 --> 00:18:13,460
we've got facial recognition software

00:18:10,700 --> 00:18:16,669
know which can read emotional intent

00:18:13,460 --> 00:18:18,679
we've got you know semantic analysis and

00:18:16,669 --> 00:18:21,740
that's the analysis on text which can

00:18:18,679 --> 00:18:24,140
kind of maybe not figure out but

00:18:21,740 --> 00:18:25,760
quantify you know emotional response and

00:18:24,140 --> 00:18:27,350
sentiment response from things so we can

00:18:25,760 --> 00:18:29,720
even bring this sort of stuff in we can

00:18:27,350 --> 00:18:33,529
we can use this sort of thing we may be

00:18:29,720 --> 00:18:35,990
approaching a time whenever five GL's

00:18:33,529 --> 00:18:37,640
are actually possible but we've been

00:18:35,990 --> 00:18:40,309
saying that for 40 years so anyway let's

00:18:37,640 --> 00:18:43,789
move on um that represents most magic

00:18:40,309 --> 00:18:45,289
you have four GL's right sequel really

00:18:43,789 --> 00:18:46,909
is the common one I bring Python and

00:18:45,289 --> 00:18:49,220
Ruby in there because the kind of

00:18:46,909 --> 00:18:52,130
definition of a 4gl is where you teach

00:18:49,220 --> 00:18:55,130
you say that you say the Machine I want

00:18:52,130 --> 00:18:58,460
to do a certain thing but you don't tell

00:18:55,130 --> 00:19:02,419
it how it's up to it to figure out how

00:18:58,460 --> 00:19:04,760
how that works you give it a instruction

00:19:02,419 --> 00:19:06,830
usually in something like a real a real

00:19:04,760 --> 00:19:08,240
human language and you say I want this

00:19:06,830 --> 00:19:10,669
to happen and it goes alright and it

00:19:08,240 --> 00:19:12,440
gets it done and you don't nor care how

00:19:10,669 --> 00:19:17,450
that happens and that's still pretty

00:19:12,440 --> 00:19:19,490
magical we move on then to three GL's

00:19:17,450 --> 00:19:22,250
and this is where most people kind of

00:19:19,490 --> 00:19:24,230
like you know stop or start depending on

00:19:22,250 --> 00:19:28,610
which way you want to see it

00:19:24,230 --> 00:19:30,380
um java basic Pascal C sharp C and C++

00:19:28,610 --> 00:19:32,630
now I'll get to those in a second

00:19:30,380 --> 00:19:34,789
because there is a definition of

00:19:32,630 --> 00:19:37,460
abstract here the thing about these

00:19:34,789 --> 00:19:39,200
three GL's is that you're using still

00:19:37,460 --> 00:19:41,210
you're still talking an abstract you may

00:19:39,200 --> 00:19:43,360
be telling the machine not only what you

00:19:41,210 --> 00:19:45,500
want to happen and also how to do it

00:19:43,360 --> 00:19:48,169
which is the difference between that and

00:19:45,500 --> 00:19:49,820
4gl but you're you're still talking in

00:19:48,169 --> 00:19:51,169
abstract your so saying right well you

00:19:49,820 --> 00:19:52,730
know I've got this thing which is object

00:19:51,169 --> 00:19:54,710
orientation and I want to see everything

00:19:52,730 --> 00:19:57,049
in terms of classes you know or I want

00:19:54,710 --> 00:20:00,260
to use prototypical inheritance or I

00:19:57,049 --> 00:20:01,190
want to be able to use Mexican functions

00:20:00,260 --> 00:20:03,200
in Ruby or

00:20:01,190 --> 00:20:04,279
although sort of that sort of thing

00:20:03,200 --> 00:20:08,749
that's where all that sort of stuff

00:20:04,279 --> 00:20:11,239
comes from a 3gl is the level of magic

00:20:08,749 --> 00:20:13,039
most people kind of learn at university

00:20:11,239 --> 00:20:14,570
unless they go any further it's

00:20:13,039 --> 00:20:16,099
definitely the sort of level of magic

00:20:14,570 --> 00:20:18,649
where people start from if they don't

00:20:16,099 --> 00:20:21,019
come from shall we say a traditional

00:20:18,649 --> 00:20:23,389
background in terms of how to code you

00:20:21,019 --> 00:20:24,919
go to the 26-week course on how to do

00:20:23,389 --> 00:20:26,239
something because you'd been a web

00:20:24,919 --> 00:20:27,859
developer and you actually want to learn

00:20:26,239 --> 00:20:29,720
how to cook properly generally speaking

00:20:27,859 --> 00:20:32,570
they're gonna drop you in a 3gl you're

00:20:29,720 --> 00:20:34,639
not going to see anything below that for

00:20:32,570 --> 00:20:36,289
reference of course to GL's second

00:20:34,639 --> 00:20:39,019
generation languages are pretty much

00:20:36,289 --> 00:20:40,909
just representation forms of the actual

00:20:39,019 --> 00:20:43,039
bytes that the chips are actually

00:20:40,909 --> 00:20:44,479
running and one GL's first generation

00:20:43,039 --> 00:20:46,759
languages are the actual bytes you're

00:20:44,479 --> 00:20:48,559
running on the actual memory which the

00:20:46,759 --> 00:20:51,799
machines are processing so that's kind

00:20:48,559 --> 00:20:53,539
of where we're at my points here is that

00:20:51,799 --> 00:20:54,919
there are a whole swathe and programmers

00:20:53,539 --> 00:20:58,609
out there an engineer's out there who

00:20:54,919 --> 00:21:01,700
still don't understand that 3G ELLs are

00:20:58,609 --> 00:21:03,609
still pretty magical and they're

00:21:01,700 --> 00:21:07,549
especially magical if you haven't done

00:21:03,609 --> 00:21:10,249
anything below them and it leads to of

00:21:07,549 --> 00:21:12,679
course what we kind of knew as cargo

00:21:10,249 --> 00:21:14,239
cult programming no I I've almost been

00:21:12,679 --> 00:21:15,830
slightly confused by the term cargo

00:21:14,239 --> 00:21:17,330
called programming I mean it it

00:21:15,830 --> 00:21:18,409
obviously comes to the carbon Holtz in

00:21:17,330 --> 00:21:20,809
the Pacific after the second world war

00:21:18,409 --> 00:21:22,429
but it seems to me that you know they

00:21:20,809 --> 00:21:24,049
built all of this stuff out of bamboo

00:21:22,429 --> 00:21:27,529
and then but the plans never actually

00:21:24,049 --> 00:21:29,659
came back they put an awful lot of time

00:21:27,529 --> 00:21:31,700
and effort into something built this

00:21:29,659 --> 00:21:33,259
whole thing based upon pure faith and

00:21:31,700 --> 00:21:35,359
because of their because their abstract

00:21:33,259 --> 00:21:37,249
because their model wasn't accurate

00:21:35,359 --> 00:21:38,299
these things never happened now I'm not

00:21:37,249 --> 00:21:40,399
going to talk about large government

00:21:38,299 --> 00:21:42,409
projects which we've all been on but

00:21:40,399 --> 00:21:46,129
this the term doesn't really make sense

00:21:42,409 --> 00:21:48,710
to me I I prefer a different term which

00:21:46,129 --> 00:21:51,859
I call randoms programming no reenters

00:21:48,710 --> 00:21:53,929
programming works like this you learn to

00:21:51,859 --> 00:21:56,720
do area dot and it reads and that's

00:21:53,929 --> 00:21:58,489
great and you learn degree nuns really

00:21:56,720 --> 00:22:00,710
well so you know it almost ruins when

00:21:58,489 --> 00:22:02,210
you do it and it's fine and then

00:22:00,710 --> 00:22:03,169
eventually you even start modifying bits

00:22:02,210 --> 00:22:04,759
that are in doubt so you get different

00:22:03,169 --> 00:22:06,529
types of rear and ask anyone from

00:22:04,759 --> 00:22:07,909
Seattle that's how it works and that's

00:22:06,529 --> 00:22:09,830
fantastic because you do these real

00:22:07,909 --> 00:22:14,769
answers and almost Rian's until one day

00:22:09,830 --> 00:22:17,299
it doesn't and you have no idea why

00:22:14,769 --> 00:22:18,799
because you learnt to do a Rendon she'd

00:22:17,299 --> 00:22:22,789
new fundamental understanding of what

00:22:18,799 --> 00:22:25,690
you were doing and as such someday

00:22:22,789 --> 00:22:28,940
something beyond your control went wrong

00:22:25,690 --> 00:22:30,549
you got it up in a different way of

00:22:28,940 --> 00:22:37,700
seeing the world different abstract

00:22:30,549 --> 00:22:40,240
maybe something under you fell apart and

00:22:37,700 --> 00:22:43,159
it didn't work

00:22:40,240 --> 00:22:45,259
this reminds me of a a story from the

00:22:43,159 --> 00:22:47,210
jargon file way back whoever knows the

00:22:45,259 --> 00:22:50,960
jargon file but it's tom night in the

00:22:47,210 --> 00:22:52,639
list machine and this the story goes

00:22:50,960 --> 00:22:54,110
that a novice was trying to fix a

00:22:52,639 --> 00:22:56,029
brokenness machine by turning the power

00:22:54,110 --> 00:22:57,500
on and off by cycling the power night

00:22:56,029 --> 00:22:59,509
seeing what the student was doing spoke

00:22:57,500 --> 00:23:00,889
sternly you cannot fix a machine by just

00:22:59,509 --> 00:23:03,350
power cycling it with no understand of

00:23:00,889 --> 00:23:05,210
what is going wrong the story of course

00:23:03,350 --> 00:23:07,149
then goes that night turned the Machine

00:23:05,210 --> 00:23:10,129
off not enough and the machine worked

00:23:07,149 --> 00:23:14,419
and that was because he knew what he was

00:23:10,129 --> 00:23:15,860
doing this that this is what I'm asking

00:23:14,419 --> 00:23:17,690
people to really do here which is kind

00:23:15,860 --> 00:23:21,919
of look beyond look beyond your

00:23:17,690 --> 00:23:24,529
abstracts you know we've learned when we

00:23:21,919 --> 00:23:31,460
largely teach these things artists at a

00:23:24,529 --> 00:23:33,080
certain level and their magical we you

00:23:31,460 --> 00:23:34,549
can you can do a lot you can do a lot

00:23:33,080 --> 00:23:35,750
better than just like you know assembler

00:23:34,549 --> 00:23:38,179
for this sort of stuff but to be almost

00:23:35,750 --> 00:23:39,740
68k assembler if I just have to pick one

00:23:38,179 --> 00:23:42,470
out of the air it's actually pretty good

00:23:39,740 --> 00:23:43,759
for this sort of stuff you have because

00:23:42,470 --> 00:23:45,379
you have some things which are kind of

00:23:43,759 --> 00:23:48,110
like really obvious even if you've like

00:23:45,379 --> 00:23:50,690
you know done a lot of you know standard

00:23:48,110 --> 00:23:52,940
programming as it were but it is very

00:23:50,690 --> 00:23:54,110
constrained as well so you've got it

00:23:52,940 --> 00:23:55,700
general-purpose thirty that are

00:23:54,110 --> 00:23:57,470
registers address registers on the Amiga

00:23:55,700 --> 00:24:00,110
your 24 bits of continuous non page

00:23:57,470 --> 00:24:02,809
address space so that's about 16 mags

00:24:00,110 --> 00:24:04,039
worth you know you've got arithmetic but

00:24:02,809 --> 00:24:05,659
logic functions but you've got no

00:24:04,039 --> 00:24:07,480
floating-point you're using libraries

00:24:05,659 --> 00:24:09,950
for all that sort of thing

00:24:07,480 --> 00:24:12,649
you've got conditional branch addressing

00:24:09,950 --> 00:24:14,659
and jump addressing but with tests but

00:24:12,649 --> 00:24:17,090
you don't actually have anything that

00:24:14,659 --> 00:24:18,889
resembles a control structure um

00:24:17,090 --> 00:24:21,590
via since the assembly itself and all

00:24:18,889 --> 00:24:22,970
some forms of assembly do but this is

00:24:21,590 --> 00:24:24,620
all enough to not have that sort of

00:24:22,970 --> 00:24:26,210
stuff you want to do things like wild

00:24:24,620 --> 00:24:28,000
lips for lips uh sort of stuff you kind

00:24:26,210 --> 00:24:29,710
of gotta build them yourself

00:24:28,000 --> 00:24:32,260
but you do have some things which are a

00:24:29,710 --> 00:24:34,390
little bit magical like pre and post and

00:24:32,260 --> 00:24:35,350
document in registers you can kind of

00:24:34,390 --> 00:24:38,140
stream the results of the calculation

00:24:35,350 --> 00:24:39,520
out to memory using the stock or you've

00:24:38,140 --> 00:24:41,860
got proper stocks and you've got this

00:24:39,520 --> 00:24:44,110
beautiful magical instruction it's only

00:24:41,860 --> 00:24:46,630
six bytes long which allows you to save

00:24:44,110 --> 00:24:49,750
most of most or all of your entire

00:24:46,630 --> 00:24:51,190
register stock to memory and then bring

00:24:49,750 --> 00:24:54,070
it back again which is really good for

00:24:51,190 --> 00:24:55,240
writing kind of you know routines which

00:24:54,070 --> 00:24:56,740
you don't want to influence the rest of

00:24:55,240 --> 00:24:58,240
the machine stay at four so you've got a

00:24:56,740 --> 00:24:59,740
little bit of magic in now and you can

00:24:58,240 --> 00:25:01,780
kind of see it in sort of a structured

00:24:59,740 --> 00:25:03,720
way but generally speaking I'm

00:25:01,780 --> 00:25:07,590
suggesting we should actually start

00:25:03,720 --> 00:25:09,820
teaching this sort of stuff because I

00:25:07,590 --> 00:25:11,800
think we live in the world with too much

00:25:09,820 --> 00:25:14,680
magic in that sort of way and that's one

00:25:11,800 --> 00:25:17,440
of the reasons I believe why modern

00:25:14,680 --> 00:25:21,370
software can be problematic why it can

00:25:17,440 --> 00:25:24,670
be slow while it can be inaccurate well

00:25:21,370 --> 00:25:26,590
it can be faulty I want to live in a

00:25:24,670 --> 00:25:28,870
world kind of with with no magic you

00:25:26,590 --> 00:25:30,610
know or at least magic which we actually

00:25:28,870 --> 00:25:32,140
understand no don't worry I'm not

00:25:30,610 --> 00:25:35,260
actually saying that we should actually

00:25:32,140 --> 00:25:36,900
get people to code an assembler to

00:25:35,260 --> 00:25:39,400
actually build things in the semble

00:25:36,900 --> 00:25:41,350
because that would be like trying to dig

00:25:39,400 --> 00:25:42,850
a road tunnel with a teaspoon it's just

00:25:41,350 --> 00:25:44,680
it's not a good idea it's gonna take

00:25:42,850 --> 00:25:47,350
forever and it's too complex we need a

00:25:44,680 --> 00:25:49,840
bit of magic from point to point but I

00:25:47,350 --> 00:25:51,670
do suggest that we do need to teach this

00:25:49,840 --> 00:25:54,210
and learn it as an exercise because

00:25:51,670 --> 00:25:58,690
learning assembler changes how you think

00:25:54,210 --> 00:26:01,330
and just to step out of it Allu I really

00:25:58,690 --> 00:26:03,880
want to kind of go with this as a as an

00:26:01,330 --> 00:26:06,070
exercise some mile three devices are

00:26:03,880 --> 00:26:07,210
actually still this basic you got under

00:26:06,070 --> 00:26:09,430
the microcontroller sort of level you

00:26:07,210 --> 00:26:10,930
may actually have to think about this

00:26:09,430 --> 00:26:13,090
sort of stuff you may have to think

00:26:10,930 --> 00:26:14,650
about the constraints of the memory the

00:26:13,090 --> 00:26:16,300
constraints of the power of the device

00:26:14,650 --> 00:26:17,680
but literally power of the device not

00:26:16,300 --> 00:26:19,060
just in terms of performance but also in

00:26:17,680 --> 00:26:22,420
terms of the actual extra steam moving

00:26:19,060 --> 00:26:23,770
through it you know Jim this changes how

00:26:22,420 --> 00:26:25,990
you think if you're able to do this sort

00:26:23,770 --> 00:26:28,480
of stuff because constraints are good if

00:26:25,990 --> 00:26:28,960
you are able to code at this sort of

00:26:28,480 --> 00:26:31,240
level

00:26:28,960 --> 00:26:32,590
you're not thinking magically you're not

00:26:31,240 --> 00:26:35,380
just doing a rain dance you are building

00:26:32,590 --> 00:26:37,480
up fundamentals over all you need to go

00:26:35,380 --> 00:26:39,190
and study extra things here and there

00:26:37,480 --> 00:26:40,780
you need to get out of your comfort zone

00:26:39,190 --> 00:26:41,049
you need to go and understand the min

00:26:40,780 --> 00:26:42,909
while

00:26:41,049 --> 00:26:44,679
or even its maybe go and complete that

00:26:42,909 --> 00:26:46,659
miles paper which you know you field in

00:26:44,679 --> 00:26:47,739
uni because you need to understand what

00:26:46,659 --> 00:26:49,840
is going on and build it from scratch

00:26:47,739 --> 00:26:52,840
yourself even if there are libraries to

00:26:49,840 --> 00:26:54,190
do it there in assembler will change

00:26:52,840 --> 00:26:55,809
your thinking so that even if you're

00:26:54,190 --> 00:26:57,460
able to use something else someone has

00:26:55,809 --> 00:26:58,600
done I mean do not repeat yourself if

00:26:57,460 --> 00:27:00,580
there's great libraries at the gym and

00:26:58,600 --> 00:27:03,999
do not write your own crypto just by the

00:27:00,580 --> 00:27:05,289
way we all know that but there's nothing

00:27:03,999 --> 00:27:07,330
wrong with implement in your own crypto

00:27:05,289 --> 00:27:09,549
which you never ever use so you

00:27:07,330 --> 00:27:12,659
understand how it works you know

00:27:09,549 --> 00:27:16,090
constraints like this are good also

00:27:12,659 --> 00:27:18,970
minimalism is good if you're used to

00:27:16,090 --> 00:27:20,769
working on machines which are running

00:27:18,970 --> 00:27:22,570
single core at seven megahertz and

00:27:20,769 --> 00:27:24,789
they've got half a mega RAM a nuts or

00:27:22,570 --> 00:27:27,369
stuff you're thinking small everything

00:27:24,789 --> 00:27:29,139
small everything's efficient not because

00:27:27,369 --> 00:27:31,869
it's a good idea but because you have no

00:27:29,139 --> 00:27:34,119
bloody choice if you don't make it that

00:27:31,869 --> 00:27:36,009
small and not that effective it will not

00:27:34,119 --> 00:27:38,799
work or it will not work in a performant

00:27:36,009 --> 00:27:40,239
way also you're going to have to

00:27:38,799 --> 00:27:41,409
structure stuff an awful lot better

00:27:40,239 --> 00:27:43,330
you're going to have to think about the

00:27:41,409 --> 00:27:44,440
real structures of what is going on when

00:27:43,330 --> 00:27:45,820
you're calling from scratch where you're

00:27:44,440 --> 00:27:46,869
gonna have to understand the structures

00:27:45,820 --> 00:27:49,509
well when you're actually looking at

00:27:46,869 --> 00:27:51,489
other people and that means less code

00:27:49,509 --> 00:27:53,470
unless code very simply it means less

00:27:51,489 --> 00:27:55,509
bugs there is a direct correlation if

00:27:53,470 --> 00:27:58,059
you add the last code you have the less

00:27:55,509 --> 00:27:59,320
there is to go wrong if you've really

00:27:58,059 --> 00:28:01,210
thought about it if you really deep you

00:27:59,320 --> 00:28:02,350
under standard then there's going to be

00:28:01,210 --> 00:28:04,149
less wrong with it in the first place

00:28:02,350 --> 00:28:05,320
but even just on the metrics there's

00:28:04,149 --> 00:28:07,989
coolest I suppose I mean we all know

00:28:05,320 --> 00:28:10,509
this simplicity is also maintainability

00:28:07,989 --> 00:28:13,269
I don't know whether you've seen real

00:28:10,509 --> 00:28:16,320
assembler any kernel engineers knew and

00:28:13,269 --> 00:28:18,909
probably done something like that but

00:28:16,320 --> 00:28:20,109
assembly real production assembly is

00:28:18,909 --> 00:28:21,549
filled full of comments there's a

00:28:20,109 --> 00:28:23,440
comment on nearly every lied you

00:28:21,549 --> 00:28:25,690
describe every single thing you're doing

00:28:23,440 --> 00:28:28,090
I'm not suggesting we do that for

00:28:25,690 --> 00:28:29,409
higher-level languages but you know the

00:28:28,090 --> 00:28:30,669
truth is putting comments and telling

00:28:29,409 --> 00:28:32,529
people what you're doing or telling

00:28:30,669 --> 00:28:34,690
yourself what you're doing six months in

00:28:32,529 --> 00:28:38,679
the future is a good idea how many times

00:28:34,690 --> 00:28:40,629
have you done a get bloom and thought oh

00:28:38,679 --> 00:28:42,460
yeah well I mean some some bloody age it

00:28:40,629 --> 00:28:43,629
has completely masked us up this is a

00:28:42,460 --> 00:28:44,980
mess so there's I mean who would have

00:28:43,629 --> 00:28:47,049
done something like this and you do it

00:28:44,980 --> 00:28:48,309
get paid when you find always me right

00:28:47,049 --> 00:28:50,559
okay I'm not something else only six

00:28:48,309 --> 00:28:52,240
months on described your code simplicity

00:28:50,559 --> 00:28:53,680
is also maintainability it's

00:28:52,240 --> 00:28:57,010
proportional maintainability

00:28:53,680 --> 00:28:58,870
and that simplicity overall is described

00:28:57,010 --> 00:29:02,290
if you keep it simple you don't have to

00:28:58,870 --> 00:29:04,180
describe it so much then the final point

00:29:02,290 --> 00:29:05,620
and in many ways the most important one

00:29:04,180 --> 00:29:07,240
especially in the world where you can

00:29:05,620 --> 00:29:10,030
just throw it in a problem until it goes

00:29:07,240 --> 00:29:13,420
away performance is a function of deep

00:29:10,030 --> 00:29:16,780
understanding I argue that is true

00:29:13,420 --> 00:29:19,300
regardless there are very few systems if

00:29:16,780 --> 00:29:21,700
any out there I think I believe tell me

00:29:19,300 --> 00:29:23,230
I'm wrong were which are performance

00:29:21,700 --> 00:29:25,150
which do not come from a deep

00:29:23,230 --> 00:29:26,230
understanding of what it is that you're

00:29:25,150 --> 00:29:29,830
actually doing what it is that you're

00:29:26,230 --> 00:29:31,060
trying to do if you get that right a lot

00:29:29,830 --> 00:29:33,010
of those performance just kind of falls

00:29:31,060 --> 00:29:34,390
out of the bag and I think we should

00:29:33,010 --> 00:29:36,760
teach this from scratch and I think we

00:29:34,390 --> 00:29:38,500
should do it with assembly not by simply

00:29:36,760 --> 00:29:40,690
saying oh yeah and say for instance

00:29:38,500 --> 00:29:42,340
JavaScript we could have a large number

00:29:40,690 --> 00:29:43,810
of elements here we've put them in an

00:29:42,340 --> 00:29:45,700
array or we put them on a map they do

00:29:43,810 --> 00:29:47,320
have a unique ID so I don't put them up

00:29:45,700 --> 00:29:49,540
because that's more performant to use

00:29:47,320 --> 00:29:51,340
that's theoretical if you've had to

00:29:49,540 --> 00:29:53,950
write to his control structures there

00:29:51,340 --> 00:29:56,140
was ADT's yourself in assembler you're

00:29:53,950 --> 00:29:58,630
gonna have a strong appreciation of why

00:29:56,140 --> 00:30:02,800
it is and why it does that that's kind

00:29:58,630 --> 00:30:06,010
of a thing overall I'm saying that these

00:30:02,800 --> 00:30:08,410
are a bit like katas these are a bit

00:30:06,010 --> 00:30:10,450
like forms in a martial art these are

00:30:08,410 --> 00:30:12,220
things which we can do which are not

00:30:10,450 --> 00:30:14,860
necessarily useful in and of themselves

00:30:12,220 --> 00:30:17,200
but they kind of change your thinking

00:30:14,860 --> 00:30:19,900
they develop a certain sort of to use a

00:30:17,200 --> 00:30:21,910
metaphor isn't our alive for you muscle

00:30:19,900 --> 00:30:23,290
memory you know a kind of a way of

00:30:21,910 --> 00:30:24,310
thinking about the world and a way of

00:30:23,290 --> 00:30:27,250
thinking about the systems you're

00:30:24,310 --> 00:30:29,470
writing which are fundamentally better

00:30:27,250 --> 00:30:30,820
and you don't think about that's the

00:30:29,470 --> 00:30:33,610
point you do it a certain way because

00:30:30,820 --> 00:30:35,770
it's kind of obvious there's a saying in

00:30:33,610 --> 00:30:40,120
Wing Chun Hong foo if you can't do it

00:30:35,770 --> 00:30:42,970
slow you can't do it fast I suggest that

00:30:40,120 --> 00:30:44,500
we say to our students to our mentees so

00:30:42,970 --> 00:30:45,640
the people who were trying to teach to

00:30:44,500 --> 00:30:48,070
do this sort of stuff and occasionally

00:30:45,640 --> 00:30:49,390
to ourselves that we should slow down

00:30:48,070 --> 00:30:51,820
and we should actually do it from

00:30:49,390 --> 00:30:54,820
fundamentals in something like assembly

00:30:51,820 --> 00:30:56,220
or something up at the level thank you

00:30:54,820 --> 00:31:03,810
very much for listening

00:30:56,220 --> 00:31:10,620
[Applause]

00:31:03,810 --> 00:31:10,620
yeah we do please

00:31:17,070 --> 00:31:21,730
absolutely absolutely construction is

00:31:19,720 --> 00:31:24,580
kind of what this the concept this was

00:31:21,730 --> 00:31:25,870
it was a bite if we if we think too much

00:31:24,580 --> 00:31:27,880
in terms of our strikes we lose the

00:31:25,870 --> 00:31:29,530
fundamental understandings abstracts are

00:31:27,880 --> 00:31:30,640
great because they allow us to make

00:31:29,530 --> 00:31:32,410
ourselves more efficient and do what we

00:31:30,640 --> 00:31:34,600
want definitely build things faster

00:31:32,410 --> 00:31:38,260
there's only one I mean NPM downloads

00:31:34,600 --> 00:31:39,970
internet for you you know but if we rely

00:31:38,260 --> 00:31:42,250
on them if we start to believe that the

00:31:39,970 --> 00:31:45,580
map is the territory then we end up in a

00:31:42,250 --> 00:31:47,140
situation very rapidly where you get

00:31:45,580 --> 00:31:48,490
confused by your own abstract and you

00:31:47,140 --> 00:31:49,600
lose the performance and games of that

00:31:48,490 --> 00:31:52,410
and everything else and the whole thing

00:31:49,600 --> 00:31:52,410
becomes kind of pointless

00:31:56,950 --> 00:32:01,129
yeah I was just curious that the title

00:31:59,749 --> 00:32:03,350
of the talk wasn't any really we are

00:32:01,129 --> 00:32:05,869
related to both martin of the edge old

00:32:03,350 --> 00:32:07,519
manifesto and clean code the red miracle

00:32:05,869 --> 00:32:10,820
while great cool make the magic go away

00:32:07,519 --> 00:32:12,289
yes that's that's kind of it's not when

00:32:10,820 --> 00:32:14,330
i read before before i kind of planned

00:32:12,289 --> 00:32:15,860
this but it's just it as opposed it's

00:32:14,330 --> 00:32:17,929
there's a difference in a sort of a

00:32:15,860 --> 00:32:20,149
culture in my own black ribbon dojo i

00:32:17,929 --> 00:32:21,889
tried to teach the culture and the

00:32:20,149 --> 00:32:24,320
history of programming and engineering

00:32:21,889 --> 00:32:29,059
as much as I teach actually how to do it

00:32:24,320 --> 00:32:30,769
and in in many ways this is kind of the

00:32:29,059 --> 00:32:32,509
issue like I said sort of during the

00:32:30,769 --> 00:32:33,529
presentation the the problem is that we

00:32:32,509 --> 00:32:34,610
kind of teach it in the middle out

00:32:33,529 --> 00:32:37,279
whereas I think that we should teach

00:32:34,610 --> 00:32:38,840
from the ground up and there's nothing

00:32:37,279 --> 00:32:40,580
wrong with magic I'm not saying magic is

00:32:38,840 --> 00:32:41,779
a bad thing I'm saying that if you're

00:32:40,580 --> 00:32:44,320
going to use it you should understand

00:32:41,779 --> 00:32:44,320
how it works

00:32:49,350 --> 00:32:53,470
absolutely absolutely I think it's one

00:32:51,700 --> 00:32:54,640
of the most apart in the fact that let's

00:32:53,470 --> 00:32:55,750
face it we're all kind of you know role

00:32:54,640 --> 00:32:58,000
geeks and nerds and that sort of stuff

00:32:55,750 --> 00:32:59,020
is fun for us I would argue if it's not

00:32:58,000 --> 00:33:01,270
fun of here maybe we're in the wrong

00:32:59,020 --> 00:33:03,910
career but that's a different thing

00:33:01,270 --> 00:33:05,140
you know it is take you know an hour of

00:33:03,910 --> 00:33:07,210
the you know whatever else and just kind

00:33:05,140 --> 00:33:08,440
of work away tick tick a weekend or

00:33:07,210 --> 00:33:10,960
something I'm going to learn a new

00:33:08,440 --> 00:33:12,550
language just for the hell of it to find

00:33:10,960 --> 00:33:14,620
out her work so I did that with rust and

00:33:12,550 --> 00:33:16,300
thoroughly scared myself in terms of how

00:33:14,620 --> 00:33:19,480
rusty I've got that's not actually

00:33:16,300 --> 00:33:20,890
supposed to be a joke but yeah the thing

00:33:19,480 --> 00:33:22,120
is that learn every language you learn

00:33:20,890 --> 00:33:23,590
will actually make you a better

00:33:22,120 --> 00:33:25,570
programmer and every other language you

00:33:23,590 --> 00:33:26,860
know because it changes the abstract

00:33:25,570 --> 00:33:29,680
over that's not something I want them to

00:33:26,860 --> 00:33:32,230
hear but it's the same as people

00:33:29,680 --> 00:33:34,270
learning human languages kids who grew

00:33:32,230 --> 00:33:35,950
up bilingual are better learning new

00:33:34,270 --> 00:33:38,230
languages then kids who grew up

00:33:35,950 --> 00:33:40,330
monolingual and the reason for that I'm

00:33:38,230 --> 00:33:41,770
told I'm not a psychologist so again

00:33:40,330 --> 00:33:45,910
correct me if I'm wrong is that

00:33:41,770 --> 00:33:47,500
bilingual kids abstract concepts into

00:33:45,910 --> 00:33:49,600
something which does not have a sound in

00:33:47,500 --> 00:33:51,160
their head they have to because there is

00:33:49,600 --> 00:33:53,770
more than one sound associated with a

00:33:51,160 --> 00:33:55,570
particular concept and that means it's

00:33:53,770 --> 00:33:57,280
quite easy for them to toggle on another

00:33:55,570 --> 00:33:58,810
set of sounds to the same concepts

00:33:57,280 --> 00:34:01,390
because they're already abstracted

00:33:58,810 --> 00:34:04,090
whereas monolingual kids grew up with a

00:34:01,390 --> 00:34:05,290
hard link between the abstract the

00:34:04,090 --> 00:34:07,480
instructions they have the concepts they

00:34:05,290 --> 00:34:10,060
have in the songs those concepts are

00:34:07,480 --> 00:34:12,340
expressed in I argue it's the same in

00:34:10,060 --> 00:34:14,080
software engineering because it is we

00:34:12,340 --> 00:34:17,260
are literally talking about languages

00:34:14,080 --> 00:34:19,390
every language you learn corrects your

00:34:17,260 --> 00:34:22,120
abstract spot it moves your concepts

00:34:19,390 --> 00:34:23,770
away from specific implementation some

00:34:22,120 --> 00:34:25,060
specific implementation patterns it

00:34:23,770 --> 00:34:26,860
allows you to think about things in

00:34:25,060 --> 00:34:28,720
different ways especially when you've

00:34:26,860 --> 00:34:30,190
really kind of object orientation when

00:34:28,720 --> 00:34:33,159
you take a look at something else

00:34:30,190 --> 00:34:35,649
completely when you learn Lisp because

00:34:33,159 --> 00:34:38,710
you hit yourself and that's not huh

00:34:35,649 --> 00:34:39,880
Skylab um this was great every wrong you

00:34:38,710 --> 00:34:40,840
know but that sort of thing

00:34:39,880 --> 00:34:42,550
linked that learning to do things

00:34:40,840 --> 00:34:44,919
especially when you look at it and you

00:34:42,550 --> 00:34:46,360
go oh who would do it like that that's

00:34:44,919 --> 00:34:48,550
the trigger point that's when you that's

00:34:46,360 --> 00:34:49,960
when you should learn it because that's

00:34:48,550 --> 00:34:51,730
something which you find challenging

00:34:49,960 --> 00:34:54,250
that's something which is changing your

00:34:51,730 --> 00:34:55,570
abstracts changing how you think um I

00:34:54,250 --> 00:34:58,570
think for a lot of modern engineers

00:34:55,570 --> 00:35:01,120
taking a look at assembly in that sort

00:34:58,570 --> 00:35:03,240
of way would be helpful one more

00:35:01,120 --> 00:35:03,240
question

00:35:04,230 --> 00:35:10,870
hi it's be deal really appreciate the

00:35:08,260 --> 00:35:13,390
talk I have argued this general concept

00:35:10,870 --> 00:35:15,610
a number of times I would quibble with

00:35:13,390 --> 00:35:17,410
one little detail though and that is in

00:35:15,610 --> 00:35:19,210
your layering structure I personally

00:35:17,410 --> 00:35:20,920
think there's very little distinction

00:35:19,210 --> 00:35:22,870
between machine language and assembler

00:35:20,920 --> 00:35:25,210
it is interesting that my own history I

00:35:22,870 --> 00:35:26,830
learned the hex op codes for the 1802

00:35:25,210 --> 00:35:29,350
and it was years before I understood

00:35:26,830 --> 00:35:31,030
that that wasn't assembly language

00:35:29,350 --> 00:35:32,350
it wasn't until somebody showed me an

00:35:31,030 --> 00:35:34,060
assembler and I was like oh this is

00:35:32,350 --> 00:35:36,820
interesting it automatically manages

00:35:34,060 --> 00:35:38,680
branch address distances I think the

00:35:36,820 --> 00:35:40,870
distinction between those is is really

00:35:38,680 --> 00:35:42,550
insignificant though compared with for

00:35:40,870 --> 00:35:44,890
example the distinction between C and

00:35:42,550 --> 00:35:47,920
C++ or anything else that was in your

00:35:44,890 --> 00:35:49,870
third-generation line and I I've

00:35:47,920 --> 00:35:53,680
actually personally discovered that

00:35:49,870 --> 00:35:56,670
using sort of K in our style c is almost

00:35:53,680 --> 00:36:00,010
as good for getting the sort of

00:35:56,670 --> 00:36:02,050
attention on the level of detail that is

00:36:00,010 --> 00:36:04,390
actually useful for driving performance

00:36:02,050 --> 00:36:07,120
and sort of underlying systems

00:36:04,390 --> 00:36:09,070
understanding as trying to push people

00:36:07,120 --> 00:36:10,990
all the way to assembly language I'm

00:36:09,070 --> 00:36:14,200
actually a huge fan of assembly language

00:36:10,990 --> 00:36:15,640
you know perlis once said that any new

00:36:14,200 --> 00:36:17,470
programming language that didn't change

00:36:15,640 --> 00:36:19,870
the way you thought about the problem

00:36:17,470 --> 00:36:21,760
wasn't worth learning that led me to

00:36:19,870 --> 00:36:23,110
assert later that you know if it

00:36:21,760 --> 00:36:25,630
couldn't be written and fourth or scheme

00:36:23,110 --> 00:36:28,000
it wasn't worth writing or didn't need

00:36:25,630 --> 00:36:29,170
to be written but in my own experience

00:36:28,000 --> 00:36:31,780
dealing with kids it's been really

00:36:29,170 --> 00:36:34,510
interesting that thinking of C is

00:36:31,780 --> 00:36:36,370
portable assembler in thinking of it

00:36:34,510 --> 00:36:37,780
less as a high-level language is an

00:36:36,370 --> 00:36:39,190
interesting thing to do it's of course

00:36:37,780 --> 00:36:40,540
true that when you start dealing with

00:36:39,190 --> 00:36:42,340
lists and all sorts of things you can

00:36:40,540 --> 00:36:45,070
sort of add more layers of abstraction

00:36:42,340 --> 00:36:46,510
and but when I sort of unwrapped what

00:36:45,070 --> 00:36:48,010
you're talking about to me it's a lot

00:36:46,510 --> 00:36:49,720
about how do you break through the

00:36:48,010 --> 00:36:51,430
layers of abstraction and get back to

00:36:49,720 --> 00:36:57,190
what the machine is actually doing and

00:36:51,430 --> 00:36:58,600
how resources are agree with you C to be

00:36:57,190 --> 00:37:00,760
honest is probably a better a better

00:36:58,600 --> 00:37:03,400
idea if we teach like real fundamental C

00:37:00,760 --> 00:37:05,110
in that sort of way then that kind of it

00:37:03,400 --> 00:37:07,960
breaks the the point where I mean we

00:37:05,110 --> 00:37:10,330
recording on amd64 recording on erm all

00:37:07,960 --> 00:37:13,150
that sort of stuff yeah I'm also of

00:37:10,330 --> 00:37:15,820
event a jalloo not professionally were

00:37:13,150 --> 00:37:16,750
quite literally I mean before I the back

00:37:15,820 --> 00:37:18,790
the nurse died because it would have

00:37:16,750 --> 00:37:20,500
been super boring is just before I

00:37:18,790 --> 00:37:22,680
discovered what an assembler was I was

00:37:20,500 --> 00:37:25,660
actually looking up the bike goes from

00:37:22,680 --> 00:37:27,670
468 K instructions and literally poking

00:37:25,660 --> 00:37:31,180
them into memory and rolling them yeah

00:37:27,670 --> 00:37:32,920
that lasted about three hours so you

00:37:31,180 --> 00:37:34,120
know being able to do that that's the

00:37:32,920 --> 00:37:35,980
difference between kind of you know

00:37:34,120 --> 00:37:37,960
machine an assembler and to be honest I

00:37:35,980 --> 00:37:39,220
mean I I didn't come up with a

00:37:37,960 --> 00:37:41,320
generation system and I've always

00:37:39,220 --> 00:37:44,380
wondered why because 1 & 2 really seemed

00:37:41,320 --> 00:37:45,550
very it's driven by audiology I think

00:37:44,380 --> 00:37:47,140
the difference between the two you have

00:37:45,550 --> 00:37:49,270
you have the difference between any

00:37:47,140 --> 00:37:50,770
translation to the machine I mean you

00:37:49,270 --> 00:37:52,090
know if you're typing in on hack she max

00:37:50,770 --> 00:37:54,340
what's happening in the binary it's just

00:37:52,090 --> 00:37:56,410
gonna take less time I would argue then

00:37:54,340 --> 00:37:58,720
that assembler is just a semantic

00:37:56,410 --> 00:38:00,160
representation of those bytes and maybe

00:37:58,720 --> 00:38:02,680
that's the reason for the theoretical

00:38:00,160 --> 00:38:04,810
difference but definitely in something

00:38:02,680 --> 00:38:06,220
like low-level C that's the sort of

00:38:04,810 --> 00:38:07,630
stuff which maybe we can take them all

00:38:06,220 --> 00:38:09,760
the way down to and kind of expose them

00:38:07,630 --> 00:38:11,950
to assembler us by the way this is what

00:38:09,760 --> 00:38:14,230
it turns into and it does it differently

00:38:11,950 --> 00:38:15,550
on different platforms and that's good

00:38:14,230 --> 00:38:17,320
as well because I'm a bringing the idea

00:38:15,550 --> 00:38:21,870
of abstraction across multiple different

00:38:17,320 --> 00:38:21,870

YouTube URL: https://www.youtube.com/watch?v=zWGn3kMz3rU


