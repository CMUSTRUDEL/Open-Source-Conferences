Title: Reliable Linux Kernel Crash Dump with Micro-Controller Assistance
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Vasant Hegde

https://2019.linux.conf.au/schedule/presentation/235/

Kdump is the standard mechanism to generate Linux kernel crash dumps. Reliability of kdump has always been a concern as it suffers from many possible failure modes -- rogue DMA, bad device state at the time of crash, dump capture kernel corruption, etc. Kdump, therefore, works on a best effort basis.

The IBM POWER9 processor has a number of satellite processors called PowerPC Processing Elements (PPEs) -- micro-controllers based on a scaled down version of embedded PowerPC processor. PPEs perform various boot and run-time activities for the normal working of the system. One of these PPEs is the Self-Boot Engine (SBE) which plays a significant part in the early boot of the Power processor.

In this presentation, we detail the concept, design, implementation and learning, from a framework that allows for guaranteed capture of the memory state of both the crashed Linux kernel and the OPAL firmware it runs on. On receipt of an indication that the OS/Firmware has crashed, the SBE triggers a memory preserving boot. It then passes control to the early boot firmware which then captures both the OPAL firmware and Linux kernel crash dumps. OPAL firmware then works in conjunction with Linux to extract this dump. Linux then formats the dumps appropriately so that existing analysis tools (crash/gdb) can be used on them. All the components involved to produce the dumps are Open Source. 

We present various scenarios of software failure and how this framework is designed to work in all such cases, making this solution more robust than the standard kdump.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:01,310 --> 00:00:07,290
yeah finally thank you so sorry about

00:00:06,480 --> 00:00:09,679
that

00:00:07,290 --> 00:00:12,750
my name is wasanta I work at IBM

00:00:09,679 --> 00:00:15,360
Bangalore up I'm primarily focused on

00:00:12,750 --> 00:00:17,369
the open format development are

00:00:15,360 --> 00:00:20,160
primarily on the serviceability

00:00:17,369 --> 00:00:22,859
reliability of the system saw so today's

00:00:20,160 --> 00:00:26,250
talk it's reliable kernel dumped with

00:00:22,859 --> 00:00:28,170
the microcontroller assistance here is

00:00:26,250 --> 00:00:29,880
the quick outline I'll be talking a

00:00:28,170 --> 00:00:31,380
little bit about the background of what

00:00:29,880 --> 00:00:33,239
is the dump and you know what is the

00:00:31,380 --> 00:00:35,730
existing mechanism like a the kernel

00:00:33,239 --> 00:00:37,860
dump and down what are the the problem

00:00:35,730 --> 00:00:39,000
with the existing one then the quick

00:00:37,860 --> 00:00:41,309
introduction of the what is the

00:00:39,000 --> 00:00:44,190
microcontroller we have in the our new

00:00:41,309 --> 00:00:46,050
powerline systems and I will take you

00:00:44,190 --> 00:00:48,390
through the how we achieve the reliable

00:00:46,050 --> 00:00:51,090
kernel dump as well as the the firmware

00:00:48,390 --> 00:00:54,690
dump with the microcontroller assistance

00:00:51,090 --> 00:00:57,570
and I will have the quick demo going on

00:00:54,690 --> 00:01:00,420
quickly yeah so what is dump this is the

00:00:57,570 --> 00:01:04,140
snapshot of the memory and the CPU

00:01:00,420 --> 00:01:05,309
registers at the time of the dump why do

00:01:04,140 --> 00:01:07,380
you need a dump um

00:01:05,309 --> 00:01:10,619
now it helps in debugging you don't need

00:01:07,380 --> 00:01:13,409
to recreate the issues with the help of

00:01:10,619 --> 00:01:16,460
the dumps and the existing tools like we

00:01:13,409 --> 00:01:21,330
have the the cache tools to debug the

00:01:16,460 --> 00:01:26,939
the kernel dumps and the user space gdb

00:01:21,330 --> 00:01:29,790
to debug be no user space some issues so

00:01:26,939 --> 00:01:33,180
it's helpful so what we have in the

00:01:29,790 --> 00:01:35,729
today write down if you are not in the

00:01:33,180 --> 00:01:38,790
current so we have the kernel dump

00:01:35,729 --> 00:01:41,820
called Kadem for this standard mechanism

00:01:38,790 --> 00:01:45,180
to get the kernel dumps the way it works

00:01:41,820 --> 00:01:47,189
is use on the production kernel and you

00:01:45,180 --> 00:01:51,479
set as the you know a small portion of

00:01:47,189 --> 00:01:53,549
the memory for loading be the correct

00:01:51,479 --> 00:01:56,310
Kadem kernel which is also called as a

00:01:53,549 --> 00:01:59,100
standby kernel was you know production

00:01:56,310 --> 00:02:00,149
kernel you know crashes it it kinds of

00:01:59,100 --> 00:02:03,710
from

00:02:00,149 --> 00:02:06,570
the hands or the control to the cached

00:02:03,710 --> 00:02:09,539
Kadem kernel which is the standby kernel

00:02:06,570 --> 00:02:12,120
the standby kernel helps to capture the

00:02:09,539 --> 00:02:13,690
Condor dump along with the user space

00:02:12,120 --> 00:02:17,810
saw service called killed

00:02:13,690 --> 00:02:22,760
it's good it works across the x86 power

00:02:17,810 --> 00:02:26,270
and the other systems the infrastructure

00:02:22,760 --> 00:02:29,840
itself is very stable but we do hit a

00:02:26,270 --> 00:02:33,200
number of the issues because of the way

00:02:29,840 --> 00:02:35,540
it's been done right so it has number of

00:02:33,200 --> 00:02:38,090
issues like you know the buggy device

00:02:35,540 --> 00:02:40,610
drivers or the some of the DMA issues

00:02:38,090 --> 00:02:42,740
happening at the time of the crashes or

00:02:40,610 --> 00:02:45,230
if the you know somebody overage the

00:02:42,740 --> 00:02:47,270
reserved memory things like that and if

00:02:45,230 --> 00:02:49,610
you are like you know the oddly system

00:02:47,270 --> 00:02:51,680
bring up guys like us then we will have

00:02:49,610 --> 00:02:53,660
more funds with the you know having

00:02:51,680 --> 00:02:59,840
buggy firmware or maybe now sometime you

00:02:53,660 --> 00:03:02,030
know buggy chips as well right so we

00:02:59,840 --> 00:03:04,490
have an alternative solution for the

00:03:02,030 --> 00:03:08,180
selected IBM power systems called down

00:03:04,490 --> 00:03:12,080
from where assisted dump in this case

00:03:08,180 --> 00:03:14,360
the it was only on the the power power

00:03:12,080 --> 00:03:17,660
VM which is IBM proprietary hypervisor

00:03:14,360 --> 00:03:21,320
and in this case of hypervisor that

00:03:17,660 --> 00:03:23,750
helps us to get the the dump but it

00:03:21,320 --> 00:03:26,240
doesn't work on the the bare metal Linux

00:03:23,750 --> 00:03:27,980
systems so with that little bit

00:03:26,240 --> 00:03:31,430
background so I will now introduce the

00:03:27,980 --> 00:03:34,400
our power line processor along with the

00:03:31,430 --> 00:03:39,020
dub the new micro controller which helps

00:03:34,400 --> 00:03:41,390
us to get the dumps so this is the the

00:03:39,020 --> 00:03:44,060
power 9 shaped it has course and other

00:03:41,390 --> 00:03:47,080
units but for the purpose of this talk I

00:03:44,060 --> 00:03:50,450
want to focus on the the middle column

00:03:47,080 --> 00:03:52,520
that's the top one is dub this the self

00:03:50,450 --> 00:03:54,530
put engine which is a small

00:03:52,520 --> 00:03:57,440
microcontroller what we call in IBM is

00:03:54,530 --> 00:04:01,100
the EPI engine power processor engine

00:03:57,440 --> 00:04:04,520
out which helps us to boot the power

00:04:01,100 --> 00:04:07,490
system also provides the various

00:04:04,520 --> 00:04:09,950
services during run times one of that

00:04:07,490 --> 00:04:17,959
services of the it is going to help us

00:04:09,950 --> 00:04:20,690
in capturing the dumps so going on this

00:04:17,959 --> 00:04:23,090
is a the very very high-level view of

00:04:20,690 --> 00:04:26,300
the how the the open power system looks

00:04:23,090 --> 00:04:27,350
like and the the the boot process on the

00:04:26,300 --> 00:04:29,120
left hand side we have the

00:04:27,350 --> 00:04:31,670
service processor which helps us to

00:04:29,120 --> 00:04:34,550
manage the systems like power on power

00:04:31,670 --> 00:04:38,390
of Gabbi of the console of the system's

00:04:34,550 --> 00:04:41,330
going from bottom to top we have the the

00:04:38,390 --> 00:04:44,090
power nine hardware once you power on

00:04:41,330 --> 00:04:46,610
the systems the control comes to the the

00:04:44,090 --> 00:04:50,360
cell potential which does this small

00:04:46,610 --> 00:04:53,420
micro code and loads the part of the

00:04:50,360 --> 00:04:56,030
host boot format to the cache of the one

00:04:53,420 --> 00:04:59,570
of the core and gives the control to the

00:04:56,030 --> 00:05:02,210
the host would form bar then host would

00:04:59,570 --> 00:05:05,230
format does various initializations

00:05:02,210 --> 00:05:07,220
like initializing rest of the course and

00:05:05,230 --> 00:05:09,860
initializing memory running various

00:05:07,220 --> 00:05:13,430
diagnostic some the collecting various

00:05:09,860 --> 00:05:17,300
vpat things like that and it is just

00:05:13,430 --> 00:05:19,930
Adar the the boot firmware and it gets

00:05:17,300 --> 00:05:22,520
vanishes the afterward

00:05:19,930 --> 00:05:24,710
of course there is a small entity of the

00:05:22,520 --> 00:05:27,140
host boot continues to run in the system

00:05:24,710 --> 00:05:30,260
but for the purpose of this talk let's

00:05:27,140 --> 00:05:32,750
not get into those details up once the

00:05:30,260 --> 00:05:35,660
host put from where loads it gives the

00:05:32,750 --> 00:05:38,360
control to the the Oh pal format what is

00:05:35,660 --> 00:05:41,060
known as a open power abstraction layer

00:05:38,360 --> 00:05:45,320
this is a tiny firmware where you know I

00:05:41,060 --> 00:05:48,050
spent most of my time this kind of

00:05:45,320 --> 00:05:51,230
builds the device tree for the the host

00:05:48,050 --> 00:05:53,090
Linux along with the initializing

00:05:51,230 --> 00:05:56,000
various other things like interacting to

00:05:53,090 --> 00:05:58,100
the service processor and up it during

00:05:56,000 --> 00:06:03,470
runtime it interacts with the service

00:05:58,100 --> 00:06:07,010
the SBE of the chip then it gives the

00:06:03,470 --> 00:06:09,800
control to the hospital nuts and on top

00:06:07,010 --> 00:06:11,300
of that you can run the the the VMS or

00:06:09,800 --> 00:06:13,790
the guest which is pretty much similar

00:06:11,300 --> 00:06:19,550
to what top the way we run in the x86

00:06:13,790 --> 00:06:22,130
word as well so I'm going on to next

00:06:19,550 --> 00:06:24,800
slide up with that you know background

00:06:22,130 --> 00:06:27,110
of the the chips and systems now I will

00:06:24,800 --> 00:06:30,380
introduce like you know how we achieve

00:06:27,110 --> 00:06:32,930
the reliable dump with the RDS vs

00:06:30,380 --> 00:06:35,419
assistance of I have like you know three

00:06:32,930 --> 00:06:37,340
stages on the first stage it is okay how

00:06:35,419 --> 00:06:39,710
do we get the reliability it is just

00:06:37,340 --> 00:06:41,540
like rebooting this system but

00:06:39,710 --> 00:06:44,330
preserving the memory

00:06:41,540 --> 00:06:46,820
content as well as the CPU registers

00:06:44,330 --> 00:06:49,520
state so that in the next boot or the

00:06:46,820 --> 00:06:51,350
firmware will help us to move the

00:06:49,520 --> 00:06:55,490
content to the deserved memories so that

00:06:51,350 --> 00:06:56,270
we can capture the dumps moon on the

00:06:55,490 --> 00:06:59,420
floors you know

00:06:56,270 --> 00:07:02,780
once the the open and the the host Linux

00:06:59,420 --> 00:07:06,410
kernel boots we set aside the the memory

00:07:02,780 --> 00:07:10,300
required to preserve the the format dump

00:07:06,410 --> 00:07:13,580
as well as the kernel dump on stage to

00:07:10,300 --> 00:07:17,360
kernel registers for there at the SB

00:07:13,580 --> 00:07:19,430
assisted dump on stage T once Linux

00:07:17,360 --> 00:07:21,320
kernel crashes are being or the format

00:07:19,430 --> 00:07:23,290
crashes are of course you can trigger

00:07:21,320 --> 00:07:25,850
manually as well for the testing purpose

00:07:23,290 --> 00:07:28,910
we trigger the dumper which goes through

00:07:25,850 --> 00:07:31,190
Cardinal to Oh Paul and open to arm open

00:07:28,910 --> 00:07:33,050
interrupts the SBA saying that the cam

00:07:31,190 --> 00:07:37,550
crashed you know go and start capturing

00:07:33,050 --> 00:07:40,490
the dumps that's what you know the the

00:07:37,550 --> 00:07:43,040
slide also the the butcher also talks

00:07:40,490 --> 00:07:44,840
about the the read the boxes are the the

00:07:43,040 --> 00:07:47,660
reserved memories to capture the dump

00:07:44,840 --> 00:07:50,110
there are various ways to all calculate

00:07:47,660 --> 00:07:56,030
how much memory required to capture the

00:07:50,110 --> 00:07:58,250
dumps among to there stage to at this

00:07:56,030 --> 00:08:01,250
stage once the crash has happened the

00:07:58,250 --> 00:08:03,830
control came to the the cell put engine

00:08:01,250 --> 00:08:06,470
at this stage self pretension goes and

00:08:03,830 --> 00:08:09,560
preserves with vices all the cores and

00:08:06,470 --> 00:08:12,640
threads and it starts collecting all the

00:08:09,560 --> 00:08:16,460
registers data required for the dumps

00:08:12,640 --> 00:08:20,060
then next step the it again loads then

00:08:16,460 --> 00:08:22,130
the new host put up to the the cache and

00:08:20,060 --> 00:08:25,640
gives the control horse would

00:08:22,130 --> 00:08:28,000
understands that if this is the the the

00:08:25,640 --> 00:08:30,860
dumb flow and it has to go and you know

00:08:28,000 --> 00:08:34,370
Moody memory contents to the reserve

00:08:30,860 --> 00:08:40,250
memory once it's done with that up will

00:08:34,370 --> 00:08:42,919
more to stage three at this stage it

00:08:40,250 --> 00:08:44,530
loads the Apollo part kind of expert is

00:08:42,919 --> 00:08:47,510
a form where it just exports the

00:08:44,530 --> 00:08:49,640
preserved memory details and the

00:08:47,510 --> 00:08:53,990
register data to the Linux kernel and

00:08:49,640 --> 00:08:54,930
the stage - there's kernel along with

00:08:53,990 --> 00:08:59,520
the kid

00:08:54,930 --> 00:09:02,040
services captures the VM core and the

00:08:59,520 --> 00:09:04,290
opal core and stores it in the disks or

00:09:02,040 --> 00:09:06,990
if you can't figure it out it can

00:09:04,290 --> 00:09:11,220
offload the dumps to the or network to

00:09:06,990 --> 00:09:13,709
the as well then you can use the this

00:09:11,220 --> 00:09:16,410
has been implemented on top of the the

00:09:13,709 --> 00:09:18,000
existing tools so that you know we don't

00:09:16,410 --> 00:09:22,680
need to write up fresh toast things like

00:09:18,000 --> 00:09:24,870
that so we can use this the crisis

00:09:22,680 --> 00:09:27,450
standard up there tool to analyze the

00:09:24,870 --> 00:09:30,149
kernel dumps and this standard across

00:09:27,450 --> 00:09:33,740
all the architectures so we can use the

00:09:30,149 --> 00:09:36,720
crash tools to analyze the VM core and

00:09:33,740 --> 00:09:38,940
for debugging the open forum of course

00:09:36,720 --> 00:09:41,430
it has been generated in the yellow

00:09:38,940 --> 00:09:45,240
format so that you know we can just use

00:09:41,430 --> 00:09:46,920
the GDP for debugging the former issues

00:09:45,240 --> 00:09:51,570
instead of you know writing our own

00:09:46,920 --> 00:09:57,750
tools and you know maintaining that so

00:09:51,570 --> 00:09:59,790
that's a flow with that I will I will

00:09:57,750 --> 00:10:02,970
take you to the demo of form you know

00:09:59,790 --> 00:10:05,930
how are things works you know rather

00:10:02,970 --> 00:10:09,930
than having you know many slides this

00:10:05,930 --> 00:10:13,410
demo is taken on the IBM open for system

00:10:09,930 --> 00:10:14,880
AC 9 to 2 as you can see this is the

00:10:13,410 --> 00:10:17,730
power and be nothing but the power

00:10:14,880 --> 00:10:20,130
non-virtualized are the bare metal Linux

00:10:17,730 --> 00:10:21,810
systems as bit as you know comparable

00:10:20,130 --> 00:10:24,420
with in on Linux running on your laptops

00:10:21,810 --> 00:10:26,430
right it kind of shows that it's a

00:10:24,420 --> 00:10:27,779
little endian one and these are so many

00:10:26,430 --> 00:10:36,480
course things like that these are

00:10:27,779 --> 00:10:38,700
powerline systems now one important

00:10:36,480 --> 00:10:42,720
thing is you know the bit of the kernel

00:10:38,700 --> 00:10:45,750
you know the the the config options you

00:10:42,720 --> 00:10:50,640
have to enable the fa temp is equal to

00:10:45,750 --> 00:10:53,610
an option and you have to configure the

00:10:50,640 --> 00:10:56,160
cache kernel with you know the memory

00:10:53,610 --> 00:10:59,279
required of it at this stage you know

00:10:56,160 --> 00:11:01,500
it's registered for the the former

00:10:59,279 --> 00:11:03,480
assisted dump note that you know for the

00:11:01,500 --> 00:11:04,600
purposes of the demo where I am doing it

00:11:03,480 --> 00:11:08,140
manually by

00:11:04,600 --> 00:11:09,610
if you can't figure it know properly it

00:11:08,140 --> 00:11:12,339
just works you don't need to do any of

00:11:09,610 --> 00:11:14,860
this manual think some this is on the

00:11:12,339 --> 00:11:17,649
console so it's kind of mixed the both

00:11:14,860 --> 00:11:23,680
the the opal generate the format

00:11:17,649 --> 00:11:35,260
generated looks as well as Deena the the

00:11:23,680 --> 00:11:36,850
dump blocks so this is kind of you know

00:11:35,260 --> 00:11:39,010
if you have a silikal so this kind of

00:11:36,850 --> 00:11:41,080
shows you know the ER registered and

00:11:39,010 --> 00:11:45,600
what's a memory ranges you know where it

00:11:41,080 --> 00:11:45,600
is going to preserve the memory details

00:11:50,820 --> 00:11:57,790
so yeah this is the we export the the

00:11:55,240 --> 00:11:59,410
the format logs to this resurface so in

00:11:57,790 --> 00:12:04,600
this kind of confirms that you know blah

00:11:59,410 --> 00:12:06,640
we have registered for the the dump at

00:12:04,600 --> 00:12:10,690
this is the manual way of triggering the

00:12:06,640 --> 00:12:13,779
damper and note that there is a two back

00:12:10,690 --> 00:12:15,339
traces of one coming from the first one

00:12:13,779 --> 00:12:18,070
is coming from the Linux kernel and

00:12:15,339 --> 00:12:20,649
second one is coming from the the opal

00:12:18,070 --> 00:12:23,649
firmware and I will show you now once

00:12:20,649 --> 00:12:25,899
the dumps system boots back through gdb

00:12:23,649 --> 00:12:27,850
are shown on both one at this stage you

00:12:25,899 --> 00:12:30,760
know we started rebooting the system so

00:12:27,850 --> 00:12:33,160
it connected all the register states and

00:12:30,760 --> 00:12:35,890
these are the some of the all the early

00:12:33,160 --> 00:12:37,360
locks from the forum web host performer

00:12:35,890 --> 00:12:40,750
and it's at this stage is now it's

00:12:37,360 --> 00:12:43,360
staying - it kind of moved all the you

00:12:40,750 --> 00:12:45,579
know data and this is the fatigue boot

00:12:43,360 --> 00:12:52,180
prompt which is in a comparability know

00:12:45,579 --> 00:12:54,459
they grab from what we have note that

00:12:52,180 --> 00:12:56,140
you know one important thing is this is

00:12:54,459 --> 00:12:58,300
the fresh wood unlike the k-dubb grab

00:12:56,140 --> 00:12:59,950
you know control goes to the the the

00:12:58,300 --> 00:13:05,560
standby Colonel this is the fresh boot

00:12:59,950 --> 00:13:07,480
of the colonel so you know we don't see

00:13:05,560 --> 00:13:10,560
any of the issues that we saw in the

00:13:07,480 --> 00:13:10,560
Kadam case

00:13:13,530 --> 00:13:24,120
yeah if this stage is booted fine again

00:13:22,470 --> 00:13:26,190
for the purpose of the demo you know I

00:13:24,120 --> 00:13:27,900
have disabled the freedom services so

00:13:26,190 --> 00:13:30,600
that you know I can manually show thee

00:13:27,900 --> 00:13:38,010
how to annoy the offload the dumps and a

00:13:30,600 --> 00:13:40,410
copy the the the open dumps the proc BM

00:13:38,010 --> 00:13:42,870
core is worthy and the VM core the Linux

00:13:40,410 --> 00:13:46,580
kernel code gets generated then we'll a

00:13:42,870 --> 00:13:46,580
decayed of services to offload them

00:14:04,620 --> 00:14:09,380
now I will show you know how to use the

00:14:06,480 --> 00:14:09,380
crash

00:14:20,210 --> 00:14:25,010
the open Corsican needs a VLF format you

00:14:23,240 --> 00:14:26,870
can just copy it or the you know kind of

00:14:25,010 --> 00:14:29,870
service will you not take care of not

00:14:26,870 --> 00:14:32,660
downloading that to these discs this is

00:14:29,870 --> 00:14:35,570
a standard you know same the the crash

00:14:32,660 --> 00:14:37,220
tool once you have the the VM core file

00:14:35,570 --> 00:14:41,110
with the VM Linux you can just you know

00:14:37,220 --> 00:14:41,110
do the all the traces

00:14:48,820 --> 00:14:55,390
yeah so this is the the the baptists of

00:14:52,900 --> 00:14:56,470
the colonel what we saw in our before

00:14:55,390 --> 00:14:58,360
crashing yeah

00:14:56,470 --> 00:15:00,130
and in the interest of time and now I'm

00:14:58,360 --> 00:15:03,430
just keeping rest of they come and said

00:15:00,130 --> 00:15:05,700
you know I am just going to the the open

00:15:03,430 --> 00:15:09,400
dumped parts

00:15:05,700 --> 00:15:11,200
so we've copied the open core this is

00:15:09,400 --> 00:15:14,550
just you know you just done the gdb on

00:15:11,200 --> 00:15:17,470
the or with up the the the opals

00:15:14,550 --> 00:15:23,710
firmware e.l.f file and the the dumb

00:15:17,470 --> 00:15:26,800
file then you just do you know execute

00:15:23,710 --> 00:15:29,230
the regular gdb command so you can see

00:15:26,800 --> 00:15:34,540
there's no back traces of the the opal

00:15:29,230 --> 00:15:37,600
cor okay back and some of the advantages

00:15:34,540 --> 00:15:39,130
of this method is here now this is first

00:15:37,600 --> 00:15:40,780
of kind you know where we can get the

00:15:39,130 --> 00:15:42,900
both the kernel and dump as well as the

00:15:40,780 --> 00:15:45,610
format dump in the first instance and

00:15:42,900 --> 00:15:48,220
because we use the format resistance and

00:15:45,610 --> 00:15:50,590
the the next kernel is booted freshly we

00:15:48,220 --> 00:15:54,070
don't see the the the issues we hit in

00:15:50,590 --> 00:15:55,660
the decade of cases and it's been we

00:15:54,070 --> 00:15:59,050
have been worked on top of the existing

00:15:55,660 --> 00:16:02,050
these tools like crash and GDP so that

00:15:59,050 --> 00:16:05,460
you know we don't need to risk kill the

00:16:02,050 --> 00:16:07,630
service engineers also know lower I know

00:16:05,460 --> 00:16:10,660
we don't have the you know maintenance

00:16:07,630 --> 00:16:12,340
overhead this is the current state most

00:16:10,660 --> 00:16:14,800
of the patches are out in the mailing

00:16:12,340 --> 00:16:19,510
list we are hoping to get it India of

00:16:14,800 --> 00:16:22,030
streamium a month or so this is the

00:16:19,510 --> 00:16:28,900
bunch of people who worked on the this

00:16:22,030 --> 00:16:31,830
project along with me um yes I don't

00:16:28,900 --> 00:16:31,830
think questions

00:16:31,880 --> 00:16:42,620
[Applause]

00:16:40,029 --> 00:16:44,690
that's a question it's like thank you

00:16:42,620 --> 00:16:47,680
for son I'm vote a just because we're

00:16:44,690 --> 00:16:47,680

YouTube URL: https://www.youtube.com/watch?v=ibXHUC5JmK0


