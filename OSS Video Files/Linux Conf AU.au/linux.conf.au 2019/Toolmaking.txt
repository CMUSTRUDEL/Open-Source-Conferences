Title: Toolmaking
Publication date: 2020-01-09
Playlist: linux.conf.au 2019
Description: 
	Julien Goodwin

https://2019.linux.conf.au/schedule/presentation/201/

From simple shell pipelines through more advanced query & workflow systems basic toolmaking is one of the most valuable ways to increase the efficiency of operations work.

In this presentation we look at toolmaking in other fields, and how to best scale toolmaking work to keep the efficiency wins going.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:02,640 --> 00:00:09,320
[Applause]

00:00:09,800 --> 00:00:18,359
good morning such as morning sir so this

00:00:16,619 --> 00:00:20,130
is one of those talks I tend to give

00:00:18,359 --> 00:00:22,050
every year or two where I'm talking

00:00:20,130 --> 00:00:24,660
about a topic that I know for a lot of

00:00:22,050 --> 00:00:26,400
you this is daily bread and butter but

00:00:24,660 --> 00:00:29,970
some of you really are in environments

00:00:26,400 --> 00:00:34,770
where this is new if only for silly

00:00:29,970 --> 00:00:39,629
reasons not for sensible ones so we are

00:00:34,770 --> 00:00:42,239
humans we are toolmakers since many many

00:00:39,629 --> 00:00:46,020
thousands of years ago or more depending

00:00:42,239 --> 00:00:49,500
on your belief of time this is how we

00:00:46,020 --> 00:00:50,700
get our advantage in the world now I'm

00:00:49,500 --> 00:00:55,410
not talking about the sort of

00:00:50,700 --> 00:00:57,360
tool-making that is done by a lot of

00:00:55,410 --> 00:01:00,149
crafts people would work as metal

00:00:57,360 --> 00:01:03,600
workers tend to do this a lot if you go

00:01:00,149 --> 00:01:06,060
on YouTube and look at tool making and

00:01:03,600 --> 00:01:09,000
are making video you'll see often that

00:01:06,060 --> 00:01:10,650
in 10 hours of video developing a

00:01:09,000 --> 00:01:13,020
project they will have eight hours of

00:01:10,650 --> 00:01:15,270
building the tooling or at least they

00:01:13,020 --> 00:01:17,340
will have cut out 80% that is building

00:01:15,270 --> 00:01:19,200
the tooling so that the project is

00:01:17,340 --> 00:01:25,130
really easy simple and hard for them to

00:01:19,200 --> 00:01:28,500
screw up and this is the sort of stuff

00:01:25,130 --> 00:01:30,840
really that I'm talking about the I just

00:01:28,500 --> 00:01:33,060
need to do a clean cut with a router

00:01:30,840 --> 00:01:34,979
I'll just Chuck a bit of wood on the

00:01:33,060 --> 00:01:36,720
side of it and it will do a clean cut I

00:01:34,979 --> 00:01:40,590
don't have to handhold it none Maps less

00:01:36,720 --> 00:01:44,759
error-prone and of course in the

00:01:40,590 --> 00:01:46,340
computer world early on we had people

00:01:44,759 --> 00:01:49,280
doing open frying machines and just

00:01:46,340 --> 00:01:52,470
extending it was a classic part of work

00:01:49,280 --> 00:01:54,060
not so much anymore but now we have our

00:01:52,470 --> 00:02:01,350
scripting language as we work in a

00:01:54,060 --> 00:02:03,630
software world so we do tool making for

00:02:01,350 --> 00:02:05,939
many reasons third I think the most key

00:02:03,630 --> 00:02:08,340
for me has always been the ability to

00:02:05,939 --> 00:02:10,080
answer ad hoc questions the hey the

00:02:08,340 --> 00:02:13,220
vendors just said this run of power

00:02:10,080 --> 00:02:15,200
supplies is liable to explode

00:02:13,220 --> 00:02:16,730
do we have any of those because we don't

00:02:15,200 --> 00:02:19,070
store the power supply serial number in

00:02:16,730 --> 00:02:20,420
inventory but it is in the log of this

00:02:19,070 --> 00:02:22,970
other thing so if we can just grep

00:02:20,420 --> 00:02:25,610
through that log we can find them and we

00:02:22,970 --> 00:02:28,070
can use regex and at least go we've got

00:02:25,610 --> 00:02:30,610
these we've also got these nearby serial

00:02:28,070 --> 00:02:35,030
numbers that we should ask them about

00:02:30,610 --> 00:02:37,430
which it's helpful what does this BGP

00:02:35,030 --> 00:02:39,230
route look like on Corrado's morali

00:02:37,430 --> 00:02:41,150
who's speaking later and I many years

00:02:39,230 --> 00:02:45,440
ago were troubleshooting an issue with

00:02:41,150 --> 00:02:47,330
load balancing where we were trying to

00:02:45,440 --> 00:02:51,050
figure out why this route wasn't load

00:02:47,330 --> 00:02:52,610
balancing and that's the sort of thing

00:02:51,050 --> 00:02:53,900
we're logging into 20 different routers

00:02:52,610 --> 00:02:57,170
and getting their exact view of the

00:02:53,900 --> 00:02:59,150
world and just running DF it's really

00:02:57,170 --> 00:03:00,950
helpful because often you can go oh of

00:02:59,150 --> 00:03:03,010
course the difference is here so I need

00:03:00,950 --> 00:03:07,490
to look exactly here and it'll be that

00:03:03,010 --> 00:03:10,850
and with a lot of these rough quick

00:03:07,490 --> 00:03:13,220
answers can be incredibly valuable being

00:03:10,850 --> 00:03:15,050
able to know in five minutes that we've

00:03:13,220 --> 00:03:18,470
got a hundred power supplies that add

00:03:15,050 --> 00:03:21,380
about 10,000 deployed machines that

00:03:18,470 --> 00:03:23,300
might be in this thing look it's a

00:03:21,380 --> 00:03:27,470
hundred stuff and I can just hand verify

00:03:23,300 --> 00:03:29,120
that list but going we may have a

00:03:27,470 --> 00:03:31,700
potentially need a shipping crate of

00:03:29,120 --> 00:03:33,200
replacement hardware but we don't know

00:03:31,700 --> 00:03:37,400
someone will get back to you next week

00:03:33,200 --> 00:03:40,010
not as helpful and of course deployment

00:03:37,400 --> 00:03:42,769
tests rather more well known these days

00:03:40,010 --> 00:03:45,350
with a lot of development engineering

00:03:42,769 --> 00:03:47,660
work integrated tests continuous

00:03:45,350 --> 00:03:51,260
integration all that becoming fairly

00:03:47,660 --> 00:03:54,470
standard and those do apply for

00:03:51,260 --> 00:03:57,170
operations if even as someone in the

00:03:54,470 --> 00:03:58,340
networking space historically a huge

00:03:57,170 --> 00:04:01,610
amount of my time was spent writing

00:03:58,340 --> 00:04:05,450
tests for our configuration making sure

00:04:01,610 --> 00:04:09,080
that I couldn't come keypresses away

00:04:05,450 --> 00:04:10,700
from breaking our network and any time I

00:04:09,080 --> 00:04:12,290
discovered I had come keypresses away

00:04:10,700 --> 00:04:15,860
from breaking our network then spent the

00:04:12,290 --> 00:04:18,859
next couple months fixing that so

00:04:15,860 --> 00:04:21,019
they're also really really helpful as an

00:04:18,859 --> 00:04:23,840
example for future work we had this

00:04:21,019 --> 00:04:26,960
network inventory system that had an

00:04:23,840 --> 00:04:28,910
incredibly obtuse API so every

00:04:26,960 --> 00:04:30,680
I did something with it I usually wrote

00:04:28,910 --> 00:04:33,259
a little tiny experiment that I checked

00:04:30,680 --> 00:04:35,930
in this Python file and then when I was

00:04:33,259 --> 00:04:38,509
writing real code later on go back to

00:04:35,930 --> 00:04:42,830
experiment copy those 20 lines modify

00:04:38,509 --> 00:04:46,340
the three things I need and I know I can

00:04:42,830 --> 00:04:48,259
use it it works and it also builds a

00:04:46,340 --> 00:04:50,960
toolkit that little thing of examples

00:04:48,259 --> 00:04:55,460
was a valid script and when I was having

00:04:50,960 --> 00:04:59,240
trouble with our answered seeming to

00:04:55,460 --> 00:05:01,009
delivered delayed well actually a

00:04:59,240 --> 00:05:02,960
different system that fed off all

00:05:01,009 --> 00:05:05,289
horrible integrations delivering delayed

00:05:02,960 --> 00:05:07,310
results I was able to use this

00:05:05,289 --> 00:05:09,380
collection of things of the inventory

00:05:07,310 --> 00:05:10,610
system and just went also print me this

00:05:09,380 --> 00:05:15,440
field of the data proto

00:05:10,610 --> 00:05:18,080
and I was able to very quickly build up

00:05:15,440 --> 00:05:20,960
plumb together some things to go hey

00:05:18,080 --> 00:05:23,419
this team you have a problem your

00:05:20,960 --> 00:05:25,940
frontline human data saying that's

00:05:23,419 --> 00:05:26,479
current your machine data is saying it's

00:05:25,940 --> 00:05:32,780
not

00:05:26,479 --> 00:05:34,520
I think the Machine dates correct and we

00:05:32,780 --> 00:05:37,009
wrote this in anything we write this in

00:05:34,520 --> 00:05:40,669
shell we write it in pipelines and

00:05:37,009 --> 00:05:45,349
script editor macros if you've never

00:05:40,669 --> 00:05:46,849
seen someone like rusty or true jazz a

00:05:45,349 --> 00:05:48,380
couple of others that regularly attend

00:05:46,849 --> 00:05:51,020
the conference that are just Emacs

00:05:48,380 --> 00:05:52,969
Wizards and you will watch them in ten

00:05:51,020 --> 00:05:56,389
seconds do some incredible amount of

00:05:52,969 --> 00:06:01,070
magic with their editor that can be

00:05:56,389 --> 00:06:04,070
really valuable of course maybe you can

00:06:01,070 --> 00:06:06,500
program it just not need to um Perl

00:06:04,070 --> 00:06:09,710
Python Ruby PowerShell there's an

00:06:06,500 --> 00:06:13,789
infinite number of languages choose one

00:06:09,710 --> 00:06:14,770
as a primary if you can realistically if

00:06:13,789 --> 00:06:16,460
you're using Windows you're probably

00:06:14,770 --> 00:06:19,820
PowerShell should probably be one of

00:06:16,460 --> 00:06:22,460
them but maybe multiple for bigger stuff

00:06:19,820 --> 00:06:24,979
C++ Java go rust if you are a

00:06:22,460 --> 00:06:27,020
development shop then copying whatever

00:06:24,979 --> 00:06:29,659
language your developers uses primary in

00:06:27,020 --> 00:06:33,500
that space is sensible Matt will be

00:06:29,659 --> 00:06:35,960
optimal but it also means hey developers

00:06:33,500 --> 00:06:38,199
this is a bit too complex for me can you

00:06:35,960 --> 00:06:40,370
give me a head is more likely to work

00:06:38,199 --> 00:06:43,160
although of course

00:06:40,370 --> 00:06:44,360
we using standard languages standard

00:06:43,160 --> 00:06:46,970
libraries is more sensible if you're

00:06:44,360 --> 00:06:48,710
using I have been told these letter

00:06:46,970 --> 00:06:51,470
outdated examples but if you're using

00:06:48,710 --> 00:06:53,950
puppet doing stuff in Ruby is probably

00:06:51,470 --> 00:06:56,960
more sensible than doing stuff in

00:06:53,950 --> 00:07:03,710
JavaScript and running it through exact

00:06:56,960 --> 00:07:05,510
lines complexity is one of the key

00:07:03,710 --> 00:07:07,550
messes here and we'll get into some of

00:07:05,510 --> 00:07:10,520
the worst stuff later

00:07:07,550 --> 00:07:14,060
keep your shell pipelines pretty simple

00:07:10,520 --> 00:07:15,680
I have written on a fairly wide probably

00:07:14,060 --> 00:07:18,169
200 character wide terminal four line

00:07:15,680 --> 00:07:20,390
shell pipelines they tend to sort of

00:07:18,169 --> 00:07:22,820
evolve and as long as they want off

00:07:20,390 --> 00:07:24,290
answering a question that's fine if if I

00:07:22,820 --> 00:07:28,010
want to keep it it should probably be

00:07:24,290 --> 00:07:30,940
turned into a script you can write giant

00:07:28,010 --> 00:07:33,500
shell scripts one we used to use was

00:07:30,940 --> 00:07:39,760
with tests and it actually did have

00:07:33,500 --> 00:07:42,610
tests about 3,000 lines that was silly

00:07:39,760 --> 00:07:45,830
you can do them

00:07:42,610 --> 00:07:50,419
darn it shell very quickly gets

00:07:45,830 --> 00:07:52,040
impractical and for editor macros you

00:07:50,419 --> 00:07:57,919
sort of want a few lines and then just

00:07:52,040 --> 00:07:59,479
jump out into something else but for

00:07:57,919 --> 00:08:03,110
other languages there really isn't

00:07:59,479 --> 00:08:06,680
inherent limit do some sensible

00:08:03,110 --> 00:08:08,390
modularity actually write tests if

00:08:06,680 --> 00:08:10,310
you're in an environment that doesn't do

00:08:08,390 --> 00:08:12,860
this to start with or can't have you

00:08:10,310 --> 00:08:15,200
work on an existing toolkit that is

00:08:12,860 --> 00:08:16,390
actually got tests this is one of those

00:08:15,200 --> 00:08:19,220
things that can be a bit hard to learn

00:08:16,390 --> 00:08:22,340
once you get used to writing code that

00:08:19,220 --> 00:08:25,910
is testable by structure or at least

00:08:22,340 --> 00:08:27,950
more easily testable by structure but

00:08:25,910 --> 00:08:32,990
most of your testing becomes a lot

00:08:27,950 --> 00:08:34,909
easier and it doesn't fix every bug or

00:08:32,990 --> 00:08:37,909
prevent every bug it it prevents a

00:08:34,909 --> 00:08:39,500
decent chunk of them there are people

00:08:37,909 --> 00:08:41,589
that will say all above a hundred lines

00:08:39,500 --> 00:08:46,760
you really should write it in C++ or

00:08:41,589 --> 00:08:48,560
whatever no if if it's above a single

00:08:46,760 --> 00:08:49,940
corner of a machine in it's a permanent

00:08:48,560 --> 00:08:53,480
job or you've got to run it for a while

00:08:49,940 --> 00:08:53,990
maybe Python isn't the best choice but

00:08:53,480 --> 00:08:55,730
it turns out

00:08:53,990 --> 00:08:58,399
for a lot of what we do that's pretty

00:08:55,730 --> 00:09:00,970
rare often if that's true there's one or

00:08:58,399 --> 00:09:03,560
two silly algorithmic things or even

00:09:00,970 --> 00:09:07,279
language idioms that perhaps you should

00:09:03,560 --> 00:09:11,709
change but otherwise most of what we

00:09:07,279 --> 00:09:15,890
tend to do even a pretty decent scale

00:09:11,709 --> 00:09:18,680
the I think the worst code I run is this

00:09:15,890 --> 00:09:20,959
customized version of grant that takes

00:09:18,680 --> 00:09:24,470
about a minute to execute using every

00:09:20,959 --> 00:09:27,440
single core of my workstation and I nice

00:09:24,470 --> 00:09:34,520
grunt easy on machine other than that

00:09:27,440 --> 00:09:37,420
nothing I use needs CPU really so

00:09:34,520 --> 00:09:39,529
testing is hard especially if you've got

00:09:37,420 --> 00:09:40,940
interactions if you're doing a develop a

00:09:39,529 --> 00:09:44,990
deployment system that's going to

00:09:40,940 --> 00:09:46,250
reinstall a machine it's hard you can

00:09:44,990 --> 00:09:49,010
split them and sound if you test the

00:09:46,250 --> 00:09:50,420
core you at least have elements that you

00:09:49,010 --> 00:09:52,190
can trust and maybe you don't write

00:09:50,420 --> 00:09:55,070
tests for the full-on deployment of a

00:09:52,190 --> 00:09:56,959
new thing maybe you don't do it because

00:09:55,070 --> 00:09:58,610
it is hard maybe you just don't do it

00:09:56,959 --> 00:10:00,890
because you're only deploy once a year

00:09:58,610 --> 00:10:03,560
you only deploy a full rebuild once a

00:10:00,890 --> 00:10:04,850
year and you know what something's gonna

00:10:03,560 --> 00:10:06,079
have changed in the process so it's

00:10:04,850 --> 00:10:11,089
gonna break the first couple of times

00:10:06,079 --> 00:10:13,700
anyway and that's reasonable one thing

00:10:11,089 --> 00:10:15,820
that is really really handy as well as

00:10:13,700 --> 00:10:19,760
just splitting your modules if you have

00:10:15,820 --> 00:10:22,459
standard constant values that every now

00:10:19,760 --> 00:10:24,410
and again they change in the network

00:10:22,459 --> 00:10:28,910
space for me this was like a s number

00:10:24,410 --> 00:10:32,540
standard prefix limits standard TCP keys

00:10:28,910 --> 00:10:36,230
a couple of the non-security related

00:10:32,540 --> 00:10:39,260
keys sorry for security keys there are

00:10:36,230 --> 00:10:40,940
much better options having a shared

00:10:39,260 --> 00:10:43,310
library for this that's available in all

00:10:40,940 --> 00:10:45,310
the major languages you use means you go

00:10:43,310 --> 00:10:48,380
update that and ask people to rebuild

00:10:45,310 --> 00:10:50,209
instead of trying to grep your entire

00:10:48,380 --> 00:10:51,649
source space figure out which ones are

00:10:50,209 --> 00:10:54,470
the constants you actually need to

00:10:51,649 --> 00:11:01,220
update and which ones are not and so on

00:10:54,470 --> 00:11:04,279
and so forth this is one of the great

00:11:01,220 --> 00:11:07,130
fails of our tools we often write them

00:11:04,279 --> 00:11:07,459
for ourselves we often we know that the

00:11:07,130 --> 00:11:09,230
third

00:11:07,459 --> 00:11:11,769
argument is the magic thing that doesn't

00:11:09,230 --> 00:11:16,670
destroy the world if we provide false

00:11:11,769 --> 00:11:20,600
I don't after lunch I forgot that I did

00:11:16,670 --> 00:11:24,170
that writing some trivial documentation

00:11:20,600 --> 00:11:25,879
bullet points is more than fine what

00:11:24,170 --> 00:11:27,829
something doesn't do is often just as

00:11:25,879 --> 00:11:29,689
valuable as what it does do if you know

00:11:27,829 --> 00:11:37,339
that tools going to be out of date by

00:11:29,689 --> 00:11:39,019
date or by project write it down it's

00:11:37,339 --> 00:11:40,429
also that's helpful not the verrat the

00:11:39,019 --> 00:11:42,529
very least for the people working on the

00:11:40,429 --> 00:11:47,660
new project to know that they are not

00:11:42,529 --> 00:11:51,800
expected to update it and sometimes to

00:11:47,660 --> 00:11:53,509
give them just oh we're expected to

00:11:51,800 --> 00:11:55,939
we're actually expected to implement

00:11:53,509 --> 00:11:57,709
this automation we promised they're

00:11:55,939 --> 00:11:59,269
relying on it they've stopped

00:11:57,709 --> 00:12:05,689
development on this other system because

00:11:59,269 --> 00:12:09,379
we had promised to replace it and for

00:12:05,689 --> 00:12:10,999
input validation do some you don't need

00:12:09,379 --> 00:12:13,459
to make it perfect if you have a nice

00:12:10,999 --> 00:12:15,110
easy library that lets you go oh that is

00:12:13,459 --> 00:12:16,759
a real valid customer number that's

00:12:15,110 --> 00:12:19,879
actually an existing customer and hasn't

00:12:16,759 --> 00:12:22,220
been deleted already sure use it this is

00:12:19,879 --> 00:12:26,269
why your libraries are great if you

00:12:22,220 --> 00:12:28,189
don't maybe you just go regex says

00:12:26,269 --> 00:12:31,899
that's a valid number cast it to an

00:12:28,189 --> 00:12:33,980
integer it's within pausable range fine

00:12:31,899 --> 00:12:35,360
what you don't want to do is

00:12:33,980 --> 00:12:36,649
accidentally paste your password to have

00:12:35,360 --> 00:12:41,869
that interpreters customer number and

00:12:36,649 --> 00:12:44,449
destroy your major customer and you

00:12:41,869 --> 00:12:46,129
you're not building tools for at least

00:12:44,449 --> 00:12:48,470
often you're not building them for

00:12:46,129 --> 00:12:49,879
complete randoms on the internet you're

00:12:48,470 --> 00:12:53,540
building them for people with a decent

00:12:49,879 --> 00:12:55,910
amount of context so actually just going

00:12:53,540 --> 00:12:59,329
failed input validation bail with usage

00:12:55,910 --> 00:13:01,189
era completely reasonable as you

00:12:59,329 --> 00:13:02,779
maintain these over time you'll end up

00:13:01,189 --> 00:13:04,459
making this better and it will bear with

00:13:02,779 --> 00:13:08,660
the usage era going or customer numbers

00:13:04,459 --> 00:13:10,490
wrong but if it's the sort of stuff

00:13:08,660 --> 00:13:13,939
you're building for your own team worst

00:13:10,490 --> 00:13:18,549
case I can dig into the source and maybe

00:13:13,939 --> 00:13:18,549
we've added customer dot sub project

00:13:21,930 --> 00:13:27,830
distribution of tools this is one that I

00:13:24,660 --> 00:13:32,880
can't even give a generic answer for

00:13:27,830 --> 00:13:34,770
some teams don't some sites don't do run

00:13:32,880 --> 00:13:35,910
things on your workstation some people

00:13:34,770 --> 00:13:38,910
have bounce house for everything some

00:13:35,910 --> 00:13:40,770
people have work hosts in deployments

00:13:38,910 --> 00:13:42,120
some people have through them through

00:13:40,770 --> 00:13:45,960
web apps for everything

00:13:42,120 --> 00:13:47,970
some people have desktops depending on

00:13:45,960 --> 00:13:50,580
how you are what you do depends on how

00:13:47,970 --> 00:13:52,470
you deploy one of the key things is try

00:13:50,580 --> 00:13:55,770
to avoid people writing personal tools

00:13:52,470 --> 00:13:57,450
for team problems because that also

00:13:55,770 --> 00:13:59,550
means they're doing it differently than

00:13:57,450 --> 00:14:01,440
everyone else if you have to change a

00:13:59,550 --> 00:14:06,750
process they won't because they won't

00:14:01,440 --> 00:14:08,100
remember to so have a way to distribute

00:14:06,750 --> 00:14:10,050
so all the team all the appropriate

00:14:08,100 --> 00:14:12,930
people can run it and the appropriate

00:14:10,050 --> 00:14:14,310
people can update it if only one person

00:14:12,930 --> 00:14:16,560
can update and they back it off on

00:14:14,310 --> 00:14:25,920
vacation for a couple months very

00:14:16,560 --> 00:14:28,200
helpful so scaling this this is

00:14:25,920 --> 00:14:34,080
something that turns into a job for a

00:14:28,200 --> 00:14:39,000
team and then we've hit the point where

00:14:34,080 --> 00:14:41,100
the battery style so I have worked and

00:14:39,000 --> 00:14:43,140
in fact I currently work at a company

00:14:41,100 --> 00:14:46,110
where when I joined the group I joined

00:14:43,140 --> 00:14:48,000
was not allowed to write software we

00:14:46,110 --> 00:14:50,510
solved this by ignoring the rule and

00:14:48,000 --> 00:14:50,510
writing software

00:14:51,170 --> 00:14:55,830
the most common exception I've heard

00:14:54,300 --> 00:14:57,990
about this is all we allow our

00:14:55,830 --> 00:15:03,350
operations people to write little little

00:14:57,990 --> 00:15:06,600
scripts but not software the other one

00:15:03,350 --> 00:15:08,160
I've gone through was a read-only rule

00:15:06,600 --> 00:15:10,710
where we could write software that read

00:15:08,160 --> 00:15:14,130
it that read production data but never

00:15:10,710 --> 00:15:16,290
never reconfigured things and that was a

00:15:14,130 --> 00:15:17,790
great way to demo that we could and it

00:15:16,290 --> 00:15:19,650
also pretty quickly demoed that the bits

00:15:17,790 --> 00:15:20,850
that went wrong wasn't the software it

00:15:19,650 --> 00:15:22,590
was the humans that were then copying

00:15:20,850 --> 00:15:23,760
the stuff the software did pasted it

00:15:22,590 --> 00:15:26,660
into the wrong window and properly

00:15:23,760 --> 00:15:26,660
destroyed the wrong city

00:15:30,480 --> 00:15:39,490
and if you can get management cover it's

00:15:35,350 --> 00:15:45,059
helpful if you can maybe just don't tell

00:15:39,490 --> 00:15:48,339
them that works in some places but

00:15:45,059 --> 00:15:51,089
ultimately some companies want nice

00:15:48,339 --> 00:15:54,399
efficient operations that's reliable

00:15:51,089 --> 00:16:00,279
sadly some places are entire builds it

00:15:54,399 --> 00:16:02,949
depends if you're a small medium ish ops

00:16:00,279 --> 00:16:07,569
team sort of maybe sub 20 actually

00:16:02,949 --> 00:16:11,709
having one maybe two dedicated primarily

00:16:07,569 --> 00:16:13,929
tool-making engineers is incredibly

00:16:11,709 --> 00:16:16,809
valuable they can do a huge amount they

00:16:13,929 --> 00:16:20,709
still probably need to be on call or do

00:16:16,809 --> 00:16:24,550
your standard equivalent of two so that

00:16:20,709 --> 00:16:26,910
they are solving their own problems it

00:16:24,550 --> 00:16:30,579
just means that their projects outside

00:16:26,910 --> 00:16:37,149
basic on-call duties are building for

00:16:30,579 --> 00:16:38,649
the rest of the team but you probably

00:16:37,149 --> 00:16:41,199
don't want to turn this into a large

00:16:38,649 --> 00:16:42,490
team of its own if it gets to the point

00:16:41,199 --> 00:16:44,740
where you really do need that many

00:16:42,490 --> 00:16:46,920
people what you probably wants is a team

00:16:44,740 --> 00:16:48,610
building supporting infrastructure and

00:16:46,920 --> 00:16:51,009
actually doing the more software

00:16:48,610 --> 00:16:55,300
engineering your design that you then

00:16:51,009 --> 00:16:56,589
integrate or have them work on the

00:16:55,300 --> 00:16:58,689
upstream projects that you're busy

00:16:56,589 --> 00:16:59,759
writing 10,000 line scripts taught about

00:16:58,689 --> 00:17:02,559
deployment off because they're so

00:16:59,759 --> 00:17:10,689
painful to integrate maybe we can fix it

00:17:02,559 --> 00:17:12,010
upstream but if you build tool makers if

00:17:10,689 --> 00:17:13,809
you would separate teams for tool makers

00:17:12,010 --> 00:17:15,250
you end up with the people that designed

00:17:13,809 --> 00:17:18,159
it and not the people that use it and

00:17:15,250 --> 00:17:20,799
you see this those of you that use

00:17:18,159 --> 00:17:23,380
development tools you can sometimes tell

00:17:20,799 --> 00:17:25,679
when they were done by teams actually

00:17:23,380 --> 00:17:27,610
using their own tools when they work

00:17:25,679 --> 00:17:31,149
anyone who's ever done electronics

00:17:27,610 --> 00:17:33,520
engineering work you can tell the tools

00:17:31,149 --> 00:17:36,299
that have actually had PCB designers

00:17:33,520 --> 00:17:36,299
ever give feedback

00:17:41,660 --> 00:17:49,700
and that was it and I think we've got a

00:17:45,480 --> 00:17:52,920
couple minutes questions and yeah if you

00:17:49,700 --> 00:17:54,060
do de que te you're BGP person please

00:17:52,920 --> 00:17:58,400
come talk to me at some point

00:17:54,060 --> 00:17:58,400
I have questions are things

00:18:06,760 --> 00:18:12,520
just a small issue of disagreement if

00:18:10,120 --> 00:18:16,360
you structure your code correctly and

00:18:12,520 --> 00:18:19,660
well you can easily extend Emacs list to

00:18:16,360 --> 00:18:21,520
huge programs my entire male clients in

00:18:19,660 --> 00:18:32,679
it you know you can do whatever you want

00:18:21,520 --> 00:18:35,110
I mean a bunch of the we have at work we

00:18:32,679 --> 00:18:36,460
have a bunch of standard vim macros that

00:18:35,110 --> 00:18:38,500
we deploy and that's probably couple

00:18:36,460 --> 00:18:42,460
thousand lines there is a standard Emacs

00:18:38,500 --> 00:18:46,000
package but I I unfortunately have to

00:18:42,460 --> 00:18:48,940
use devices that come ship with VY and I

00:18:46,000 --> 00:18:55,059
mean by and that's it and I'm lucky that

00:18:48,940 --> 00:18:57,520
they have like they have I I I work at a

00:18:55,059 --> 00:18:59,950
team where we have a lot of repetitive

00:18:57,520 --> 00:19:01,299
processes and it seems like everyone has

00:18:59,950 --> 00:19:04,000
their own different ways to solve this

00:19:01,299 --> 00:19:05,620
problem and so tooling just proliferate

00:19:04,000 --> 00:19:06,160
and diversify and there's probably not a

00:19:05,620 --> 00:19:07,630
good thing

00:19:06,160 --> 00:19:10,600
do you have any suggestions for that

00:19:07,630 --> 00:19:14,620
yeah that's we're building those

00:19:10,600 --> 00:19:17,020
libraries so there's just a standard way

00:19:14,620 --> 00:19:20,950
that solves this area really nicely

00:19:17,020 --> 00:19:23,320
easily and is better enough that if I

00:19:20,950 --> 00:19:24,700
have a half-assed version when it breaks

00:19:23,320 --> 00:19:26,559
due to an infrastructure change

00:19:24,700 --> 00:19:30,100
somewhere I might just use the shared

00:19:26,559 --> 00:19:31,330
one and it is if you've got that

00:19:30,100 --> 00:19:34,570
environment where everyone has their own

00:19:31,330 --> 00:19:37,179
ruling from the start it takes time and

00:19:34,570 --> 00:19:38,559
pain and you really just have to accept

00:19:37,179 --> 00:19:42,250
that it's gonna take a couple of years

00:19:38,559 --> 00:19:46,360
or human rotations out of team to fix

00:19:42,250 --> 00:19:48,570
things up go research and find the place

00:19:46,360 --> 00:19:50,679
where you've got for example as we did a

00:19:48,570 --> 00:19:53,440
documented you should use this SSH

00:19:50,679 --> 00:19:56,230
config it says to use the the crypto

00:19:53,440 --> 00:19:58,990
algorithm to fish doesn't work so well

00:19:56,230 --> 00:20:01,210
when SSH removes to fish is obsolete and

00:19:58,990 --> 00:20:02,530
you break the entire team that you've

00:20:01,210 --> 00:20:06,790
now got to explain yeah that was that

00:20:02,530 --> 00:20:08,590
was wrong four years ago and you still

00:20:06,790 --> 00:20:10,120
find people month later cuz it turns out

00:20:08,590 --> 00:20:12,210
that some of your people don't log it to

00:20:10,120 --> 00:20:15,669
route us every day

00:20:12,210 --> 00:20:18,090
sadly build good libraries it still

00:20:15,669 --> 00:20:18,090
takes time

00:20:23,550 --> 00:20:29,740
working in operations a lot of the

00:20:27,480 --> 00:20:33,280
automation and tooling that we implement

00:20:29,740 --> 00:20:35,890
is against very vendor-specific api's

00:20:33,280 --> 00:20:37,059
with very vendor specific responses do

00:20:35,890 --> 00:20:39,580
you have any suggestions for getting

00:20:37,059 --> 00:20:43,809
started on implementing good tests to

00:20:39,580 --> 00:20:45,910
emulate that so the standard way we tend

00:20:43,809 --> 00:20:48,309
to do that is just suck it up and write

00:20:45,910 --> 00:20:51,940
really dumb fake implementations that

00:20:48,309 --> 00:20:53,380
that take that ideally do some input

00:20:51,940 --> 00:20:55,360
validation and go yeah here's the can

00:20:53,380 --> 00:20:59,140
respond see roughly expect one thing I

00:20:55,360 --> 00:21:01,240
will say probably don't try to do is

00:20:59,140 --> 00:21:02,860
there is some level of converting vendor

00:21:01,240 --> 00:21:07,000
specific intervention intro that works

00:21:02,860 --> 00:21:08,380
and you can go way too far and try to be

00:21:07,000 --> 00:21:11,710
more generic and what you're actually

00:21:08,380 --> 00:21:14,250
doing is still encoding one vendors view

00:21:11,710 --> 00:21:16,240
of the world that will break terribly

00:21:14,250 --> 00:21:19,000
one of the classic ones mean the

00:21:16,240 --> 00:21:24,820
networking space was VLANs access

00:21:19,000 --> 00:21:29,080
security and such the per vendor way of

00:21:24,820 --> 00:21:30,910
doing it is terrible in general but it's

00:21:29,080 --> 00:21:35,500
differently terrible in such a way that

00:21:30,910 --> 00:21:37,540
you can't realistically predict so

00:21:35,500 --> 00:21:39,640
trying to make a complete vendor neutral

00:21:37,540 --> 00:21:41,020
one doesn't really work if you know that

00:21:39,640 --> 00:21:42,490
what you're using the VLANs for is

00:21:41,020 --> 00:21:45,429
something you can structure the way you

00:21:42,490 --> 00:21:50,920
use it not completely generic network

00:21:45,429 --> 00:21:52,510
and that works all right okay maybe one

00:21:50,920 --> 00:21:58,500
quick question before while the next

00:21:52,510 --> 00:21:58,500
speaker sits up no

00:21:59,950 --> 00:22:06,609

YouTube URL: https://www.youtube.com/watch?v=Gs9PD4oX2rI


