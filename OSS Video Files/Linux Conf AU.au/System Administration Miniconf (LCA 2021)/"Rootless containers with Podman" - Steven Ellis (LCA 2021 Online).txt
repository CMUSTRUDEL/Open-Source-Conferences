Title: "Rootless containers with Podman" - Steven Ellis (LCA 2021 Online)
Publication date: 2021-02-18
Playlist: System Administration Miniconf (LCA 2021)
Description: 
	Steven Ellis

https://lca2021.linux.org.au/schedule/presentation/80/

As more services are becoming containerised the security risks continue to increase. By adopting rootless containers we immediately remove a huge attack surface, in addition to providing the capability for any user to run containers on a host system without requiring admin rights.

This talk will outline the core concepts and benefits of rootless containers, and how Podman provides a simple to use framework that integrates nicely with Systemd. Along the way we'll also touch on some of the other security and performance management capabilities that  SELinux and CGroups bring to containerised deployments.

To outline the benefits, and some of the bumpy bits along the way, Steve will use his initial deployments of Home Assistant and Mosquitto as containerised services for home automation, alongside workloads currently unsuitable for rootless containers.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Sat Jan 23 13:30:00 2021 at Blemings Labs
Captions: 
	00:00:00,001 --> 00:00:06,434
(WIND BLOWING) (BABY PENGUINS CHIRPING)

00:00:06,434 --> 00:00:08,634
(LOUD THUD) (MUSICAL DRONE) (METALLIC "BLINK" SOUND EFFECT)

00:00:08,634 --> 00:00:11,200
(WHOOSH) (SHORT UPTEMPO MELODY)

00:00:15,120 --> 00:00:25,789
EWAN: The System Administration Miniconf! We have three talks in this afternoon slot if you're in a time zone near the conference.

00:00:25,789 --> 00:00:32,189
First up we have Steven Ellis talking about Rootless Containers With Podman. Over to you Steven.

00:00:32,189 --> 00:00:40,382
STEVEN: Hey thanks Ewan and it's a pleasure to be here. I'm so pleased to see the Sys Admin miniconf was part of the program yet again.

00:00:40,382 --> 00:00:47,760
So I'm going to cover off some aspects of rootless containers and how you can use them using Podman. 

00:00:48,400 --> 00:00:54,653
A number of you've seen me present at linuxconf before. I'm going to keep this fairly tight because of the time frame 

00:00:54,653 --> 00:01:00,315
but one of my roles at Red Hat is to talk to customers about certain 

00:01:00,315 --> 00:01:04,080
emerging technology trends and talk to them about containerisation and  

00:01:04,640 --> 00:01:08,767
something that keeps coming up are some of the  security concerns about dealing with containers.

00:01:09,600 --> 00:01:15,653
So I thought, well, I'll dig into this a bit further and actually get my hands dirty with the technology because I like to do that.

00:01:15,653 --> 00:01:21,798
Please note that there's some technical content here particularly at the back of the deck I'm going to provide for later reference

00:01:22,080 --> 00:01:25,905
and most of the code I've given you is kind  of copy pasteable.

00:01:25,905 --> 00:01:31,040
So what i'm going to do is give you a bit of an overview of containers  and how that relates to the Podman tools.

00:01:31,920 --> 00:01:37,043
I'm going to assume that you know what containers are and that you've got a little bit of background in this area

00:01:37,043 --> 00:01:40,800
and then a little bit about why we're going to talk about rootless containers.  

00:01:40,800 --> 00:01:45,280
Well, at the end we're going to round it up with  a bit of an example of how to use this in action  

00:01:46,240 --> 00:01:52,672
and I'm going to actually use a home assistant  Mosquitto MQTT as part of that example.

00:01:52,672 --> 00:01:58,999
Now one thing in the container ecosystem is the shift away  from Docker everything to container standards

00:01:58,999 --> 00:02:03,726
so one thing here's occurred, the open container  initiative has defined a thing called Cri-o  

00:02:03,840 --> 00:02:09,230
as a standard interface for starting/stopping a container image

00:02:09,230 --> 00:02:15,440
and Cri-o is quite critical because it means that behind the scenes you can have any container runtime as long as it's Cri-o compatible.

00:02:15,440 --> 00:02:19,169
Cri-o's main focus is around Kubernetes

00:02:19,169 --> 00:02:22,610
because at the end of the day Kubernetes simply needs to be able to start and stop containers.

00:02:22,610 --> 00:02:24,560
It doesn't need all the other things Docker can give you

00:02:25,280 --> 00:02:30,391
and therefore Cri-o helps create a smaller attack surface because docker does lots of things.

00:02:30,391 --> 00:02:35,949
In fact, when we look at some of the alternative tooling that we're developing with the open source community

00:02:36,000 --> 00:02:43,568
Podman's focus is being able to run a container, Skopeo's ability to introspect manage containers

00:02:43,568 --> 00:02:46,587
and then Buildah as a tool to build a container

00:02:46,587 --> 00:02:52,203
whereas Docker is a container standard, container runtime, the tools to build and run and manage

00:02:52,203 --> 00:02:57,756
and it presents a very very broad attack surface. So we're just kind of narrowing things down

00:02:57,756 --> 00:03:01,352
which I think is really good from a security perspective.

00:03:01,352 --> 00:03:04,886
So Podman provides a very familiar interface.

00:03:04,886 --> 00:03:10,741
For anyone who uses the Docker CLI, you can pretty much alias Docker to Podman and use it as you would do naturally.

00:03:10,741 --> 00:03:18,957
In fact, with some of the new releases of Podman, we're going to be able to support some of these socket-centric features

00:03:18,957 --> 00:03:29,327
that Docker has today where it's really nicely integrated with systemd and it has great support for running containers as non-route.

00:03:30,320 --> 00:03:37,412
for those of you on a non-red hat flavored  distribution there's a wide range of distros supported

00:03:37,412 --> 00:03:43,571
and huge support out of the Debian and Ubuntu community amongst others.

00:03:43,571 --> 00:03:48,000
So there's a broad range of platforms  from which you can go and play with Podman today.

00:03:49,840 --> 00:03:54,588
So now we'll dig into why you shouldn't get rooted. We don't want to get rooted.

00:03:54,588 --> 00:04:00,000
Anyone who's ever had a box rooted knows the pain associated with that

00:04:00,000 --> 00:04:06,486
and so why would we talk about rootless containers? Because containers present an encapsulated way to run a service  

00:04:07,360 --> 00:04:12,640
and we've got a nice security model, we've got  Sc Linux, we've got cgroups, we've got setcomp,

00:04:12,640 --> 00:04:16,021
we've got all these things wrapped around surely our container is secure

00:04:16,021 --> 00:04:23,014
but the fact is that's not necessarily true. In the traditional Linux ecosystem would mostly solve this

00:04:23,014 --> 00:04:30,663
through shims that would start a process and connect to a secure  port and then allows it to run as a non-root user.

00:04:31,920 --> 00:04:35,990
Most things on your system run under service UIDs.

00:04:36,587 --> 00:04:43,149
Gone are the days where a vendor's application install instructions said you must install this as root.

00:04:43,149 --> 00:04:49,215
In fact, I remember many years ago a rather large database vendor presented  me with the installation guide that said

00:04:49,215 --> 00:04:54,960
'run your server with X11 logged in as root and then run the following commands and leave the console active  

00:04:54,960 --> 00:05:02,047
under the X11 environment with the screen  saver turned off' - which was just plain scary!  

00:05:02,880 --> 00:05:10,829
The fact was, if you use their particular flavor of Linux, you could actually do a install of their product 

00:05:10,829 --> 00:05:17,211
with all the dependencies resolved but they wouldn't make that available for other Linux distributions. 

00:05:17,211 --> 00:05:22,261
It was quite a bizarre situation but I've seen this with things like WebSphere, WebLogic 

00:05:22,261 --> 00:05:26,282
where they'd suggest you install it as  root so it could connect to port 80.

00:05:26,282 --> 00:05:29,794
who the hell wants to run a Java application server on port 80.

00:05:29,794 --> 00:05:35,626
So we've got past this now in traditional sys administration

00:05:35,626 --> 00:05:38,560
but there's still an expectation that your darker images run as root.

00:05:39,200 --> 00:05:44,079
and if you want to build a new container image usually you've got to run Docker as root to do that  

00:05:44,480 --> 00:05:50,727
whereas rootless containers can be created,  run and managed by users without admin rights.

00:05:50,727 --> 00:05:55,924
That means on a box you can have multiple unprivileged  users running the same containers on the same machine

00:05:55,924 --> 00:06:02,204
and now we're transitioning to tools and ISV provided applications and services appearing as containers, 

00:06:02,204 --> 00:06:06,480
that's critically important. Everyone needs to be able to run containers.

00:06:06,480 --> 00:06:13,682
People need to be able to run the same container  at the same time, so if we can do this under a user's identity,

00:06:13,682 --> 00:06:16,633
then we've simplified things. And should you really care?

00:06:16,633 --> 00:06:22,080
I mean, you could say "Well, I don't care because I build all my containers from scratch so therefore I know they're secure."

00:06:22,080 --> 00:06:27,871
Really? Every single one? Do you even build your  base operating system to use inside the container?  

00:06:28,240 --> 00:06:33,120
Or perhaps you just use Go so you don't actually  have a base operating system inside the container.  

00:06:33,120 --> 00:06:40,442
No user space. You're not running any community containers? It's amazing the number of deployment definitions,

00:06:40,442 --> 00:06:47,534
whether they're helm charts or Docker compose or using Kubernetes and operators,

00:06:47,534 --> 00:06:53,878
where they actually pull a community container alongside their commercial containers. 

00:06:54,400 --> 00:06:57,684
in order to provide some services.

00:06:57,684 --> 00:07:03,522
So you don't want any community containers? No third party commercial containers? No isv provided containers?

00:07:03,522 --> 00:07:10,090
You know your environment's really good and your container platform, that's perfectly secure. Excellent!

00:07:10,090 --> 00:07:15,040
But in the end of the day most of us would consume some kind of base OS for building our container images.

00:07:15,040 --> 00:07:20,409
How far do you trust it, whether it's Alpine, Ubuntu or the UBI image.

00:07:20,409 --> 00:07:29,309
UBI 8 is a freely redistributable relate container image from Red Hat that a number of commercial vendors we're seeing are starting to use

00:07:29,309 --> 00:07:34,532
so things like Microsoft SQL Server is  available based off the RHEL UBI 8 image.

00:07:34,532 --> 00:07:39,919
So if you're consuming commercial containers, how far do you trust them? How recently were they patched?

00:07:41,680 --> 00:07:44,997
How are you going to avoid a potential security risk in your environment?

00:07:44,997 --> 00:07:52,706
So, I care. I want to make sure that my customers' environments and my home environments are safe and secure.

00:07:52,706 --> 00:07:57,520
And there's lots of compromises. I'll share these slides, look at the links but  

00:07:57,520 --> 00:08:04,107
the StackRox analysis that happens regularly is always quite enlightening.

00:08:04,107 --> 00:08:09,436
There's always new reports on the number of containers in Docker Hub with vulnerabilities

00:08:09,436 --> 00:08:13,230
and in fact there was a new Kubernetes vulnerability reported in the last week.

00:08:13,230 --> 00:08:19,122
So no matter what you're doing, there's always a risk and an issue. Everything we can do to mitigate that is useful.

00:08:19,123 --> 00:08:26,175
So let's do that. Let's go rootless. How can we run our containers without root?

00:08:26,175 --> 00:08:32,719
So, when I approach these things I kind of want to put myself  in the mindset of the customer or the end user.

00:08:33,040 --> 00:08:35,950
I want to also validate the technology in a way that excites me.

00:08:35,950 --> 00:08:40,473
This is really important, otherwise I get bored and I go off and do something else or get distracted

00:08:40,473 --> 00:08:44,727
and i want to do something that's going to be interesting and important to me.

00:08:44,727 --> 00:08:46,295
I want to try and avoid cutting corners.

00:08:46,295 --> 00:08:54,560
So I always run a proper secure lockdown environment and try and look at how it's relevant to a customer or an end user.

00:08:55,680 --> 00:09:04,432
But then I try to look at 'what do I need that could or should be in a container?' - using a third-party container.

00:09:04,432 --> 00:09:07,493
And many of these things I could build/rebuild the container image myself

00:09:07,493 --> 00:09:18,581
but at the end of the day sometimes you just want to use a community build of a tool or a technology.

00:09:18,581 --> 00:09:22,143
So I looked at what I'm running around home.

00:09:22,143 --> 00:09:27,006
Existing websites, I've got a Trac server with SVN and Git,

00:09:27,006 --> 00:09:31,144
I've been running MythTV forever but that's really kind of got to be on - that's more of an appliance,

00:09:31,144 --> 00:09:33,617
My firewall is effectively a DD-WRT appliance.

00:09:33,617 --> 00:09:40,696
I've got a few other things that I could try and re-platform but they're not that exciting

00:09:40,696 --> 00:09:44,692
So let's talk about the the shiny - and the shiny for me was home automation.

00:09:44,692 --> 00:09:51,569
I had some Xiaomi temperature sensors, I had a few smart plugs that I'd hacked 

00:09:51,569 --> 00:09:56,041
I wanted to be able to integrate these so I was looking at home automation

00:09:56,041 --> 00:09:59,679
and there's lots of people trying to run things like home assistant in a container.

00:10:00,880 --> 00:10:04,927
Now, stepping back and taking  a look at things like Podman,  

00:10:05,280 --> 00:10:09,680
well there's two ways of running a  container rootless you can either run it -

00:10:10,960 --> 00:10:18,240
a container - as a user, where inside the  container the process is still running as root  

00:10:18,240 --> 00:10:26,985
or we can run a container as a user and inside the container the service is also running as a specified user.

00:10:26,985 --> 00:10:34,149
So I'm just going to switch to a terminal here because I've got um... this is a... let me go...

00:10:34,149 --> 00:10:38,399
Here I'm actually running the home assistant container which I've already pulled.

00:10:38,880 --> 00:10:44,564
i'm going to run it as the user thread, so I've logged in as the user thread on this environment.

00:10:44,564 --> 00:10:50,075
If I have a look now inside the container my ID is root

00:10:50,075 --> 00:10:57,200
and if i look at... there you can see the user ids are available  and this guest and nobody available.

00:10:57,200 --> 00:11:02,895
Oh, okay. So let's kill that container  and now let's actually run it as guest.

00:11:05,280 --> 00:11:12,080
Now I'm actually inside the container as the user guest but the container - if i do a ps outside of it -

00:11:12,080 --> 00:11:15,521
will actually be running as the user thread on the local system.

00:11:15,521 --> 00:11:19,612
So there's different ways of layering this from a security perspective.

00:11:19,612 --> 00:11:24,897
What's happened is the container ecosystem almost got lazy and most of the time containers internally are running as root

00:11:24,897 --> 00:11:26,455
or the services are running as root.

00:11:27,440 --> 00:11:31,200
I think that's a problem and it's something  we're going to have to resolve in the long term  

00:11:31,200 --> 00:11:36,234
but that's the nature of the ecosystem today. So what do you need to run rootless?

00:11:36,234 --> 00:11:42,160
Well, first you need Podman. There's ways of doing it with straight docker and other runtimes  

00:11:42,160 --> 00:11:44,888
podman makes it very simple and easy.

00:11:45,677 --> 00:11:53,298
1.6.4 is kind of the minimum where things really started working. Ideally you want to run a podman 2.x release.

00:11:53,298 --> 00:12:00,719
Then you need the slirp4netns package that kind of helps handle  some of the network namespace support.

00:12:01,600 --> 00:12:05,120
You need to increase the number of  username spaces so that we can actually  

00:12:06,880 --> 00:12:13,671
create the user IDs that we need and the ecosystem  we need to run these user space containers.

00:12:16,320 --> 00:12:24,485
So again, every time I go to do one of these, try something out recently, I do a search online to see who's already had a go

00:12:24,485 --> 00:12:29,287
and my friend Chris Smart, turns out has already had to go with Fedora

00:12:29,287 --> 00:12:33,151
which was awesome! So that's pretty close to what i'm doing. I'm going to do it with RHEL.

00:12:33,151 --> 00:12:39,124
So, I picked up his guide and I went and had a play  because he's been through a lot of the the pain points,

00:12:39,124 --> 00:12:48,257
so I created my user environment - the user has for home assistant, I created the new user IDs and group IDs I needed

00:12:48,257 --> 00:12:54,918
- sub UIDs and group IDs I needed - but it turns out on most modern distros you don't need to do it anymore.

00:12:54,918 --> 00:12:58,831
The moment you create the user those additional IDs are created anyway.

00:12:59,920 --> 00:13:04,400
I then make sure I've got the correct Sc Linux permissions on the things I'm going to map  

00:13:04,400 --> 00:13:09,914
into the container image and expose the service.

00:13:09,914 --> 00:13:15,387
Relatively painless. Took a few minutes. I've actually been through these steps several times

00:13:15,387 --> 00:13:22,326
and then we do some initial testing. So I'll just run the container, map in those local directories

00:13:22,326 --> 00:13:27,374
map in a local time as a read-only environment 

00:13:27,374 --> 00:13:31,759
and then bring the image online and  then do Podman ps - a

00:13:31,759 --> 00:13:35,563
and yay! I've got the processes running. It's all good.

00:13:35,563 --> 00:13:42,351
except it wasn't, because there were some issues. We're trying to do this on RHEL 8.1 - which I'll talk to later -

00:13:42,351 --> 00:13:47,519
but eventually we've got that resolved, everything came up and then I can actually look at the logs inside that process,

00:13:47,519 --> 00:13:54,240
do Podman logs and the container name. So everything looks really good, everything was behaving nicely,

00:13:55,040 --> 00:14:02,394
What I wanted to do then was make it work as a system service and there's an example of a service definition.

00:14:02,394 --> 00:14:12,899
So then the container starts, is able to start, stop restart cleanly via systemd. Perfect.

00:14:12,899 --> 00:14:18,160
What I also needed because of the way some of my devices are configured was an MQTT server.

00:14:18,160 --> 00:14:24,402
Well, it turns out mosquito MQTT is perfect fit. It's actually got a very very simple startup.

00:14:24,402 --> 00:14:28,111
In case of my environment, I'm running it completely stateless

00:14:28,111 --> 00:14:34,048
so every time I start and stop, it never has any persistent configuration.

00:14:34,048 --> 00:14:43,680
Now I could, in theory from a security perspective, modify this so that I'm actually using passwords or keys for my devices and so forth

00:14:43,680 --> 00:14:49,220
but the way i've got it present is all of my IoT devices are on a specific dedicated network

00:14:49,220 --> 00:14:53,200
so things are kind of locked down at the network level rather than the MQTT level.

00:14:54,160 --> 00:15:00,664
Again, here's a systemd example for bringing  that up online.

00:15:00,664 --> 00:15:10,149
So now I've got a working home assistant environment with MQTT integrated and all my devices come online

00:15:10,149 --> 00:15:14,508
and I'm able to do some home automation. Awesome.

00:15:14,508 --> 00:15:17,610
So, what's good? What's bad? What's frustrating?

00:15:17,610 --> 00:15:23,398
Well, what was frustrating at first was rootless support in RHEL 8.1 Podman wasn't fully functional.

00:15:23,398 --> 00:15:29,870
There were some weird memory issues and a couple of other side issues with rootless support.

00:15:29,870 --> 00:15:34,140
Luckily I could raise a few support cases and work with this with the team

00:15:34,140 --> 00:15:41,699
so we actually managed to get early engineering builds of the next release of Podman

00:15:41,699 --> 00:15:45,918
and so by the time we actually GAed RHEL 8.2 everything was working nicely.

00:15:45,918 --> 00:15:49,640
What was also frustrating is it would have been painless if I had just done it on Fedora

00:15:49,640 --> 00:15:53,550
but coming back to my earlier statement, I want to run it on an environment the customers would run it on

00:15:53,550 --> 00:16:01,353
so I had to try it out on RHEL. it all works nicely now and as of RHEL 8.2 it's all sweet.

00:16:01,353 --> 00:16:06,017
Not all containers are ready to be rootless and it's not easy to identify that

00:16:06,017 --> 00:16:08,743
so you may need to try things out

00:16:09,600 --> 00:16:13,407
and most of them still need you to  run as root inside the container.

00:16:13,760 --> 00:16:16,959
I had some crash consistency issues at first.

00:16:16,959 --> 00:16:24,409
I lost power to the machine hosting the virtual machine that runs the containers

00:16:24,409 --> 00:16:29,703
so sometimes I've had to do a few Podman commands to kind of clean up dead pods.

00:16:29,703 --> 00:16:34,088
That seems to have gotten a lot better with more recent Podman builds.

00:16:34,088 --> 00:16:38,083
It's very easy to update the service.  That's awesome.

00:16:38,083 --> 00:16:43,726
I can literally pull the container in advance tell it to restart and it will come back up the latest container

00:16:43,726 --> 00:16:49,440
I really shouldn't be doing run latest. I wouldn't be doing that if this was like a customer production environment.  

00:16:49,440 --> 00:16:55,422
As I said earlier, there's the what you do at home and the way a customer will really use it  

00:16:55,680 --> 00:17:02,136
but that suits me because I'm managing when I actually do a refresh and pull the latest

00:17:02,136 --> 00:17:09,268
and the upgrades are just really really nice and painless

00:17:09,268 --> 00:17:16,000
and it is possible for me to roll it back just by tweaking the version of the container I want to run.

00:17:16,880 --> 00:17:24,072
Overall it feels safer. The risk of anyone trying to break out the container is low.

00:17:24,072 --> 00:17:28,587
If I'm using third-party automation integrations that i don't necessarily trust,

00:17:28,587 --> 00:17:35,383
at least I know that they're not being run as a root user on a system within my network.

00:17:35,383 --> 00:17:37,751
So overall things come together quite well.

00:17:37,751 --> 00:17:44,789
I've got a bunch of useful references here. Some of these are have follow-up links to other guides.

00:17:44,789 --> 00:17:49,039
There's some really good video series' on using rootless containers with Podman.

00:17:49,920 --> 00:17:54,000
There's a lot of experimenting going on  ahead of the Podman version 3 release

00:17:54,480 --> 00:18:01,280
so please go and have a play, try it out and  reach out if you've got any questions or queries.  

00:18:01,280 --> 00:18:04,880
And as I mentioned earlier, at the end of the deck I've got a little bit more information about Cri-o.

00:18:05,680 --> 00:18:10,880
If you're wondering what it entails and what its value is  

00:18:10,880 --> 00:18:16,560
and in addition i've just linked to Buildah because Podman is about running a container, 

00:18:16,560 --> 00:18:27,088
Buildah means any user can build a container and it builds standard OCI compatible container images as a non-root user.

00:18:27,088 --> 00:18:32,061
So that means if you're on your local workstation or somewhere where you've just got a non-root shell,

00:18:32,061 --> 00:18:37,065
want to build and play with containers, you can build them with Buildah and run them with Podman

00:18:37,065 --> 00:18:39,920
and you don't have to worry about getting any special access.

00:18:39,920 --> 00:18:46,022
So, thank you for your time. Thank you for joining us and enjoy the rest of the conference.

00:18:48,560 --> 00:18:51,698
EWAN: Thank you very much Steven. That was a great talk.

00:18:51,698 --> 00:18:57,760
Steven has said he is going to send the slides through so we'll put those up on the sysadmin.miniconf.org site  

00:18:57,760 --> 00:19:02,160
as soon as we get them and you can refer  to all the links that are in there.

00:19:02,160 --> 00:19:07,332
If you have any questions, then please ask them in the chat alongside the video in Venules

00:19:07,332 --> 00:19:12,905
and Steven will be with you shortly to answer the questions. Thank you again Steven.

00:19:12,905 --> 00:19:18,880

YouTube URL: https://www.youtube.com/watch?v=Emt4rpjHdz0


