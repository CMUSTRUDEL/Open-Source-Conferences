Title: "Building Raspberry PI Supercomputers" - Federico Lucifredi (LCA 2021 Online)
Publication date: 2021-02-18
Playlist: System Administration Miniconf (LCA 2021)
Description: 
	Federico Lucifredi

https://lca2021.linux.org.au/schedule/presentation/87/

Federico discusses what is required to integrate clusters of ARM SBCs, with a focus on Raspberry PI units due to their popularity, the software integration necessary to make them practical, what plumbing is necessary to easily configure nodes, and how to issue commands for cluster management. From the initial spotlight on cluster operations we transition to practical use, and briefly look at how parallel computing is utilized to solve numerical problems and how to code and run numerical workloads using the MPI interface. 

This is a live tutorial with a running cluster (or two!), and is meant to be an introduction for those new to Linux clustering.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

#linux.conf.au #linux #foss #opensource

Sat Jan 23 11:40:00 2021 at Blemings Labs
Captions: 
	00:00:10,820 --> 00:00:14,060
[Music]

00:00:15,440 --> 00:00:19,439
administration mini conf

00:00:16,960 --> 00:00:21,039
for our third presentation of this

00:00:19,439 --> 00:00:22,480
morning or evening or afternoon

00:00:21,039 --> 00:00:25,599
depending on where you are

00:00:22,480 --> 00:00:28,160
um we have federoca federico

00:00:25,599 --> 00:00:29,279
from the usa talking to us about

00:00:28,160 --> 00:00:33,360
building raspberry pi

00:00:29,279 --> 00:00:37,360
supercomputers over to you federico

00:00:33,360 --> 00:00:38,879
thanks even so uh we're going to try to

00:00:37,360 --> 00:00:42,000
make this as quick as possible

00:00:38,879 --> 00:00:44,559
this is um usually a two-part talk

00:00:42,000 --> 00:00:45,600
covering how to build computers with

00:00:44,559 --> 00:00:48,879
raspberry pi's

00:00:45,600 --> 00:00:51,120
and then also um

00:00:48,879 --> 00:00:52,239
how to manage them this time and this

00:00:51,120 --> 00:00:53,760
day we're going to

00:00:52,239 --> 00:00:55,440
focus on the managing more than the

00:00:53,760 --> 00:00:58,079
building um

00:00:55,440 --> 00:00:59,920
and then you can find other versions

00:00:58,079 --> 00:01:00,399
online with the with the super computer

00:00:59,920 --> 00:01:03,359
part

00:01:00,399 --> 00:01:05,439
in terms of the coding so the talk is

00:01:03,359 --> 00:01:07,280
designed for an hour we have 20 minutes

00:01:05,439 --> 00:01:10,960
we're going to excise

00:01:07,280 --> 00:01:13,040
a few things here let's get going so

00:01:10,960 --> 00:01:14,960
super brief introduction i had the

00:01:13,040 --> 00:01:15,360
privilege of spending my entire career

00:01:14,960 --> 00:01:18,159
in

00:01:15,360 --> 00:01:20,159
free and open source software i'm the

00:01:18,159 --> 00:01:24,960
product management director for seth

00:01:20,159 --> 00:01:28,320
at red hat um whoops what happened

00:01:24,960 --> 00:01:28,320
are you still seeing my screens

00:01:30,400 --> 00:01:34,400
something happened with this to the

00:01:32,000 --> 00:01:37,840
slides interesting

00:01:34,400 --> 00:01:40,960
you should see them again now uh

00:01:37,840 --> 00:01:42,640
in product management at red hat

00:01:40,960 --> 00:01:45,280
previously i was the ubuntu product

00:01:42,640 --> 00:01:46,640
manager at canonical ubuntu server

00:01:45,280 --> 00:01:49,200
product manager canonical

00:01:46,640 --> 00:01:52,560
and if you go back to decade i was the

00:01:49,200 --> 00:01:55,360
dried systems management tsar at sousa

00:01:52,560 --> 00:01:57,360
and shameless plug i have a book on aws

00:01:55,360 --> 00:02:00,000
system administration

00:01:57,360 --> 00:02:01,520
uh by o'reilly uh which is why you see

00:02:00,000 --> 00:02:05,920
the funny picture

00:02:01,520 --> 00:02:08,479
uh the julian cash made of me at austin

00:02:05,920 --> 00:02:09,920
um we're not to go over the products but

00:02:08,479 --> 00:02:11,599
you get an idea of the stuff that i

00:02:09,920 --> 00:02:14,560
worked on

00:02:11,599 --> 00:02:15,680
so um usually we play a lot with

00:02:14,560 --> 00:02:17,280
hardware

00:02:15,680 --> 00:02:18,959
there's no liability if you follow our

00:02:17,280 --> 00:02:20,800
instructions and stop your tour bring

00:02:18,959 --> 00:02:22,879
about the end of the world

00:02:20,800 --> 00:02:24,959
or break your device which is the much

00:02:22,879 --> 00:02:27,440
more likely outcome

00:02:24,959 --> 00:02:29,120
uh this year mischief is a lot less like

00:02:27,440 --> 00:02:31,680
than usual

00:02:29,120 --> 00:02:33,680
but some smart alec will double click

00:02:31,680 --> 00:02:36,000
succeed in destroying something

00:02:33,680 --> 00:02:36,720
i know i have i have already smoked the

00:02:36,000 --> 00:02:39,760
pi 4

00:02:36,720 --> 00:02:43,200
hdmi port working on the stock

00:02:39,760 --> 00:02:46,480
uh when moose

00:02:43,200 --> 00:02:51,840
cable touched the bare power supply

00:02:46,480 --> 00:02:51,840
so um let's look for a second at what

00:02:52,160 --> 00:03:00,560
at what these computers look like

00:02:55,680 --> 00:03:00,560
i have to break out here

00:03:02,840 --> 00:03:05,840
uh

00:03:16,840 --> 00:03:22,159
oh

00:03:18,319 --> 00:03:22,159
never mind there is a problem here

00:03:22,720 --> 00:03:26,080
we're just going to go straight into the

00:03:24,239 --> 00:03:27,360
system administration where we don't

00:03:26,080 --> 00:03:29,599
have the ability to

00:03:27,360 --> 00:03:31,599
go into the hardware the way i planned

00:03:29,599 --> 00:03:34,879
sorry about that

00:03:31,599 --> 00:03:37,680
um so these clusters

00:03:34,879 --> 00:03:40,319
usually like and look like this we have

00:03:37,680 --> 00:03:43,920
a number of raspberry pi's

00:03:40,319 --> 00:03:45,519
uh stacked in a custom case i tend to

00:03:43,920 --> 00:03:48,080
use the

00:03:45,519 --> 00:03:49,599
the pico cluster arrangement because i

00:03:48,080 --> 00:03:52,080
find it convenient

00:03:49,599 --> 00:03:52,879
and it's a company here in utah that

00:03:52,080 --> 00:03:55,680
that makes them

00:03:52,879 --> 00:03:57,200
it's relatively accessible to me and

00:03:55,680 --> 00:03:58,959
they're relatively friendly there are a

00:03:57,200 --> 00:04:01,599
lot of kits to build

00:03:58,959 --> 00:04:04,400
uh raspberry pi computers uh

00:04:01,599 --> 00:04:08,080
supercomputers or clusters with

00:04:04,400 --> 00:04:08,799
um with pie boards some of the vendors

00:04:08,080 --> 00:04:11,519
actually make

00:04:08,799 --> 00:04:12,000
other types of boards available but

00:04:11,519 --> 00:04:15,280
almost

00:04:12,000 --> 00:04:18,000
all of them have pie boards for this

00:04:15,280 --> 00:04:18,000
kind of use

00:04:18,160 --> 00:04:22,400
in the case of the pico cluster

00:04:20,560 --> 00:04:26,639
specifically

00:04:22,400 --> 00:04:29,840
we have effectively a power board

00:04:26,639 --> 00:04:31,680
that distributes uh power through the

00:04:29,840 --> 00:04:32,720
cluster so that you have a simple source

00:04:31,680 --> 00:04:36,880
of

00:04:32,720 --> 00:04:40,320
of um of storage i'm sorry of uh

00:04:36,880 --> 00:04:40,720
voltage and an easy way to turn uh on or

00:04:40,320 --> 00:04:43,759
off

00:04:40,720 --> 00:04:47,280
the entire thing the thing and the part

00:04:43,759 --> 00:04:49,440
that um i want to focus on is that

00:04:47,280 --> 00:04:50,400
there are additional things that you can

00:04:49,440 --> 00:04:53,440
do with the hardware

00:04:50,400 --> 00:04:54,720
um i haven't pulled up the pictures here

00:04:53,440 --> 00:04:55,600
because we don't have the time to go

00:04:54,720 --> 00:04:59,040
into the

00:04:55,600 --> 00:05:00,639
into the other set but um besides the

00:04:59,040 --> 00:05:02,080
the boards there are additional things

00:05:00,639 --> 00:05:05,680
that you can have

00:05:02,080 --> 00:05:08,000
um uh there is a pymoroni

00:05:05,680 --> 00:05:09,759
blinked array of leds that you can use

00:05:08,000 --> 00:05:11,600
for example to signal the status of the

00:05:09,759 --> 00:05:13,520
board with leds

00:05:11,600 --> 00:05:15,680
and a few other things of that kind that

00:05:13,520 --> 00:05:17,199
you can use to accessorize your cluster

00:05:15,680 --> 00:05:19,360
i'm not going to spend too much time on

00:05:17,199 --> 00:05:21,039
that but these options do exist

00:05:19,360 --> 00:05:22,639
the part that's common to the clusters

00:05:21,039 --> 00:05:24,880
however is this

00:05:22,639 --> 00:05:26,560
attempt to have centralized power

00:05:24,880 --> 00:05:29,600
management either because

00:05:26,560 --> 00:05:33,520
you can manage to shut things up or down

00:05:29,600 --> 00:05:36,720
or um or so that you can control

00:05:33,520 --> 00:05:38,000
uh clean shutdowns remotely now there's

00:05:36,720 --> 00:05:40,000
a little bit of variability there

00:05:38,000 --> 00:05:41,360
but that's a commonality across all

00:05:40,000 --> 00:05:43,440
clusters

00:05:41,360 --> 00:05:45,440
let's uh jump into the software which is

00:05:43,440 --> 00:05:49,280
what we're focusing on tonight

00:05:45,440 --> 00:05:52,560
or today for you so um

00:05:49,280 --> 00:05:53,199
we want to have um user setup that is

00:05:52,560 --> 00:05:55,840
consistent

00:05:53,199 --> 00:05:56,479
across all nodes of the cluster so that

00:05:55,840 --> 00:05:59,360
your

00:05:56,479 --> 00:06:00,319
process can run across all nodes

00:05:59,360 --> 00:06:03,440
transparently

00:06:00,319 --> 00:06:05,520
so typically

00:06:03,440 --> 00:06:06,340
i start with the images of the pico

00:06:05,520 --> 00:06:07,520
cluster

00:06:06,340 --> 00:06:09,440
[Music]

00:06:07,520 --> 00:06:12,400
setup which are basically modified

00:06:09,440 --> 00:06:12,400
raspbian images

00:06:12,960 --> 00:06:20,000
other users use ubuntu images

00:06:17,759 --> 00:06:21,120
to use a 64-bit code depending on

00:06:20,000 --> 00:06:24,880
whether you have

00:06:21,120 --> 00:06:28,160
pi 3 as the board

00:06:24,880 --> 00:06:32,240
i would recommend raspbian for those

00:06:28,160 --> 00:06:34,319
until a raspbian 64-bits become stable

00:06:32,240 --> 00:06:35,600
i would recommend using uh ubuntu or

00:06:34,319 --> 00:06:39,680
fedora images

00:06:35,600 --> 00:06:41,280
for um for uh pi4 boards

00:06:39,680 --> 00:06:44,240
so this is pretty standard

00:06:41,280 --> 00:06:46,240
run-of-the-mill stuff um

00:06:44,240 --> 00:06:48,800
usually i set up things so that you have

00:06:46,240 --> 00:06:51,599
one user with your privileges

00:06:48,800 --> 00:06:53,919
with your standard privileges and a root

00:06:51,599 --> 00:06:56,319
user mostly a backup because this

00:06:53,919 --> 00:06:58,240
this standard user that you have is

00:06:56,319 --> 00:07:01,680
transparent sudo so that

00:06:58,240 --> 00:07:05,440
they can escalate the compute um

00:07:01,680 --> 00:07:07,120
processes transparently because on these

00:07:05,440 --> 00:07:08,960
on these images you have to rename an

00:07:07,120 --> 00:07:10,400
existing user that's part of the

00:07:08,960 --> 00:07:13,360
instructions here to

00:07:10,400 --> 00:07:13,919
kill exhaust and the exhaust file so

00:07:13,360 --> 00:07:17,759
that

00:07:13,919 --> 00:07:21,360
things update transparently

00:07:17,759 --> 00:07:23,599
um nothing too strange here

00:07:21,360 --> 00:07:26,000
um because of the simple structure of

00:07:23,599 --> 00:07:27,599
the cluster there is no nis ldap or

00:07:26,000 --> 00:07:31,199
anything of that kind nfs

00:07:27,599 --> 00:07:33,199
access is very straightforward

00:07:31,199 --> 00:07:36,240
i like to create users with consistent

00:07:33,199 --> 00:07:39,280
ui numbers across all nodes

00:07:36,240 --> 00:07:41,360
so that you have multiple

00:07:39,280 --> 00:07:43,120
if you have multiple users logging into

00:07:41,360 --> 00:07:44,720
the same cluster you are sure that there

00:07:43,120 --> 00:07:48,400
is consistency

00:07:44,720 --> 00:07:50,639
and maybe a good bit of insurance for

00:07:48,400 --> 00:07:51,440
when you grow up to better use of the

00:07:50,639 --> 00:07:53,280
cluster

00:07:51,440 --> 00:07:54,960
and for single use it may not be

00:07:53,280 --> 00:07:56,800
necessary but you're creating these

00:07:54,960 --> 00:07:58,960
users anyway next just

00:07:56,800 --> 00:08:01,440
be clean and make so that they all have

00:07:58,960 --> 00:08:04,080
the same use uid

00:08:01,440 --> 00:08:04,720
on clusters i use i add a second

00:08:04,080 --> 00:08:07,759
privileged

00:08:04,720 --> 00:08:09,360
user pi or ops to separate operations in

00:08:07,759 --> 00:08:11,039
production

00:08:09,360 --> 00:08:14,800
but not on this one and this one is

00:08:11,039 --> 00:08:16,639
simple um simple and straightforward

00:08:14,800 --> 00:08:18,400
the next thing that we want to clean up

00:08:16,639 --> 00:08:21,759
while building uh one of these

00:08:18,400 --> 00:08:25,280
small desktop super computers

00:08:21,759 --> 00:08:26,400
is the run levels it makes sense to

00:08:25,280 --> 00:08:28,400
disable x

00:08:26,400 --> 00:08:29,919
on cluster nodes other than the first

00:08:28,400 --> 00:08:32,800
one um

00:08:29,919 --> 00:08:33,440
the first one typically owns the hdmi

00:08:32,800 --> 00:08:36,000
interface

00:08:33,440 --> 00:08:37,279
so if you're going to use video it makes

00:08:36,000 --> 00:08:40,159
sense to leave it

00:08:37,279 --> 00:08:41,839
running x but for the other nodes it

00:08:40,159 --> 00:08:44,000
makes absolutely no sense to

00:08:41,839 --> 00:08:44,880
leave x running and consuming resources

00:08:44,000 --> 00:08:47,279
so

00:08:44,880 --> 00:08:48,080
um you run the appropriate incantation

00:08:47,279 --> 00:08:50,800
in system d

00:08:48,080 --> 00:08:53,279
to switch to what we would have called

00:08:50,800 --> 00:08:56,160
on level three in the past

00:08:53,279 --> 00:08:57,680
um you can also set up x forwarding if

00:08:56,160 --> 00:09:01,040
you have

00:08:57,680 --> 00:09:02,959
applications that have um that render a

00:09:01,040 --> 00:09:06,080
graphical result

00:09:02,959 --> 00:09:07,200
maybe things like mathematica or things

00:09:06,080 --> 00:09:09,120
like that but

00:09:07,200 --> 00:09:10,399
mathematica can also be used as a

00:09:09,120 --> 00:09:12,480
computing cluster so

00:09:10,399 --> 00:09:14,399
it has its own ways to to deal with such

00:09:12,480 --> 00:09:16,160
things

00:09:14,399 --> 00:09:18,880
in this case for the sake of simplicity

00:09:16,160 --> 00:09:21,680
we're not going to set up x forwarding

00:09:18,880 --> 00:09:22,880
um most of the expectation here is that

00:09:21,680 --> 00:09:25,279
you're running npi

00:09:22,880 --> 00:09:27,200
code across the nodes and we're trying

00:09:25,279 --> 00:09:31,920
to create a good environment

00:09:27,200 --> 00:09:35,040
for hosting this this mpi code

00:09:31,920 --> 00:09:37,120
as quickly as possible

00:09:35,040 --> 00:09:38,160
with the pike class with the pico

00:09:37,120 --> 00:09:40,880
cluster uh

00:09:38,160 --> 00:09:41,600
this is particularly cool um uh

00:09:40,880 --> 00:09:44,160
raspberry pi

00:09:41,600 --> 00:09:45,680
three or four boards have two interfaces

00:09:44,160 --> 00:09:47,040
right there there is the wireless

00:09:45,680 --> 00:09:48,480
interface and there is the wired

00:09:47,040 --> 00:09:52,800
interface

00:09:48,480 --> 00:09:55,600
on fico cluster the images come with um

00:09:52,800 --> 00:09:56,640
with uh the wireless disabled if i

00:09:55,600 --> 00:09:58,320
remember correctly

00:09:56,640 --> 00:10:00,080
and because they expect that the local

00:09:58,320 --> 00:10:03,200
wiring is the entire source of

00:10:00,080 --> 00:10:06,399
communication for the cluster

00:10:03,200 --> 00:10:10,160
uh i like to use both and so

00:10:06,399 --> 00:10:13,360
um the default ip numbering

00:10:10,160 --> 00:10:14,880
for uh the wired interfaces we leave

00:10:13,360 --> 00:10:17,600
exactly as it is

00:10:14,880 --> 00:10:19,200
and it gives us consistent numbering and

00:10:17,600 --> 00:10:21,040
doesn't matter where your cluster is

00:10:19,200 --> 00:10:23,600
running it can be in your office it can

00:10:21,040 --> 00:10:25,920
be traveling with you

00:10:23,600 --> 00:10:26,720
those interfaces stay with the same name

00:10:25,920 --> 00:10:29,120
so

00:10:26,720 --> 00:10:30,640
they remain operational no matter what

00:10:29,120 --> 00:10:32,079
network you're on

00:10:30,640 --> 00:10:34,720
which is usually not the case for

00:10:32,079 --> 00:10:37,279
clusters that is really nice

00:10:34,720 --> 00:10:38,959
on the other hand we set up the wi-fi

00:10:37,279 --> 00:10:42,480
interface to pick up a local

00:10:38,959 --> 00:10:44,480
um wi-fi and give us connectivity to

00:10:42,480 --> 00:10:46,560
download packages or

00:10:44,480 --> 00:10:47,680
ping the resources on the internet like

00:10:46,560 --> 00:10:51,680
updating times

00:10:47,680 --> 00:10:54,300
like that um this is very easily done

00:10:51,680 --> 00:10:55,440
by activating the

00:10:54,300 --> 00:10:59,040
[Music]

00:10:55,440 --> 00:11:00,000
wi-fi interface first so that the proper

00:10:59,040 --> 00:11:02,800
default routing

00:11:00,000 --> 00:11:04,240
is put in place by linux and that you

00:11:02,800 --> 00:11:05,839
don't have to manually configure the

00:11:04,240 --> 00:11:08,079
routing tables

00:11:05,839 --> 00:11:09,839
and you don't have to uh put those rules

00:11:08,079 --> 00:11:11,760
in place it just happens

00:11:09,839 --> 00:11:13,120
and then you add a second network

00:11:11,760 --> 00:11:15,279
physical one

00:11:13,120 --> 00:11:17,440
afterwards and pick up only the routing

00:11:15,279 --> 00:11:19,040
that you need for those specific ips

00:11:17,440 --> 00:11:20,800
if you do it in the opposite order

00:11:19,040 --> 00:11:22,640
things will not work out well

00:11:20,800 --> 00:11:25,680
if you do it in this order you get

00:11:22,640 --> 00:11:25,680
exactly what you want

00:11:26,160 --> 00:11:29,600
the other bit that you want to pursue is

00:11:28,560 --> 00:11:32,959
uh setting up

00:11:29,600 --> 00:11:35,519
uh the wi-fi here you are

00:11:32,959 --> 00:11:36,560
ready to visit us at red hat um if you

00:11:35,519 --> 00:11:39,600
want

00:11:36,560 --> 00:11:41,600
or actually not this is our old guest

00:11:39,600 --> 00:11:44,000
wifi password so you need to get the new

00:11:41,600 --> 00:11:47,200
one if you come to visit us

00:11:44,000 --> 00:11:48,959
um pretty straightforward and it's all

00:11:47,200 --> 00:11:51,920
on the cli you just need to know

00:11:48,959 --> 00:11:51,920
where you're poking

00:11:53,360 --> 00:11:57,279
then we need to generate keys and

00:11:56,240 --> 00:11:59,360
install the um

00:11:57,279 --> 00:12:01,519
on all nodes so that we have transparent

00:11:59,360 --> 00:12:04,800
ssh access

00:12:01,519 --> 00:12:06,320
we have um the same users we have the

00:12:04,800 --> 00:12:08,560
same new ids

00:12:06,320 --> 00:12:10,959
the same passwords and ssh key

00:12:08,560 --> 00:12:12,880
authentication throughout

00:12:10,959 --> 00:12:16,240
keys are in place from node 0 to all

00:12:12,880 --> 00:12:19,279
others with password fallback

00:12:16,240 --> 00:12:21,920
and by the way a little tip you see um

00:12:19,279 --> 00:12:22,720
the ssh import id command mentioned at

00:12:21,920 --> 00:12:26,160
the bottom

00:12:22,720 --> 00:12:28,560
lets you give access to github and

00:12:26,160 --> 00:12:31,040
launchpad users by name

00:12:28,560 --> 00:12:32,160
you simply pass the github username and

00:12:31,040 --> 00:12:34,959
it sets up

00:12:32,160 --> 00:12:36,560
their key for remote access so it gives

00:12:34,959 --> 00:12:39,200
you a very quick way to

00:12:36,560 --> 00:12:40,800
to import uh people that without having

00:12:39,200 --> 00:12:45,519
multiple email exchanges

00:12:40,800 --> 00:12:45,519
asking them for keys and stuff like that

00:12:45,600 --> 00:12:49,600
gen keys is the one the way you can

00:12:47,440 --> 00:12:52,079
generate the keys across the cluster

00:12:49,600 --> 00:12:54,639
uh out of the the standard fico cluster

00:12:52,079 --> 00:12:57,200
image these are a pretty standard

00:12:54,639 --> 00:12:58,399
scripts and that the picocluster crew

00:12:57,200 --> 00:13:00,240
has put in

00:12:58,399 --> 00:13:01,519
and they've made available on their

00:13:00,240 --> 00:13:03,760
github so

00:13:01,519 --> 00:13:04,560
i modified them slightly for my cluster

00:13:03,760 --> 00:13:06,560
and

00:13:04,560 --> 00:13:08,399
you can do the same for yours whether

00:13:06,560 --> 00:13:10,959
you're using uh

00:13:08,399 --> 00:13:11,519
their hardware or in their system images

00:13:10,959 --> 00:13:15,760
or not

00:13:11,519 --> 00:13:18,480
it's um it's a nice starting point

00:13:15,760 --> 00:13:20,480
uh one thing that i like to do is um to

00:13:18,480 --> 00:13:22,560
move all of these support scripts into a

00:13:20,480 --> 00:13:25,040
bin directory

00:13:22,560 --> 00:13:26,639
um this is raspbian based in the case

00:13:25,040 --> 00:13:29,440
that i'm using right now so on

00:13:26,639 --> 00:13:31,680
on any wn derivative if you create a bin

00:13:29,440 --> 00:13:33,680
directory in the home

00:13:31,680 --> 00:13:35,920
uh in your home directory it's already

00:13:33,680 --> 00:13:37,839
in the past it's already checked in

00:13:35,920 --> 00:13:39,600
it checked for automatically so you just

00:13:37,839 --> 00:13:42,399
create a directory you don't need to

00:13:39,600 --> 00:13:42,399
do anything else

00:13:43,440 --> 00:13:47,199
okay obviously ansible would also be a

00:13:46,320 --> 00:13:50,240
good way to

00:13:47,199 --> 00:13:51,760
uh to carry the automation across and

00:13:50,240 --> 00:13:53,199
we're going to go into that in one

00:13:51,760 --> 00:13:55,440
second

00:13:53,199 --> 00:13:56,880
so sometimes you just want to carry out

00:13:55,440 --> 00:14:00,079
um

00:13:56,880 --> 00:14:02,720
one-time tasks on all nodes and here is

00:14:00,079 --> 00:14:05,360
where parallel ssh comes in

00:14:02,720 --> 00:14:06,800
and here is next showing with a little

00:14:05,360 --> 00:14:10,399
bit of example

00:14:06,800 --> 00:14:12,560
in the first example the current user is

00:14:10,399 --> 00:14:15,199
going to all servers specified in the

00:14:12,560 --> 00:14:17,040
nodes file

00:14:15,199 --> 00:14:20,240
and checking the list of host names

00:14:17,040 --> 00:14:24,720
configured statically

00:14:20,240 --> 00:14:28,720
um the third example

00:14:24,720 --> 00:14:30,800
checks connectivity by running ping

00:14:28,720 --> 00:14:32,399
on those nodes difference between the

00:14:30,800 --> 00:14:33,680
first and the second is that inline

00:14:32,399 --> 00:14:36,160
option

00:14:33,680 --> 00:14:38,079
without the inline the parallel ssh

00:14:36,160 --> 00:14:40,959
command by default shows you only

00:14:38,079 --> 00:14:41,839
output uh result code so it's a

00:14:40,959 --> 00:14:44,560
successor

00:14:41,839 --> 00:14:47,199
or fail for every node if you specify

00:14:44,560 --> 00:14:49,120
inline it actually gives you the output

00:14:47,199 --> 00:14:51,199
so in the second option we're actually

00:14:49,120 --> 00:14:54,000
going to see what is in these

00:14:51,199 --> 00:14:55,839
edc hosts files when the first one will

00:14:54,000 --> 00:14:58,639
just see success success meaning that

00:14:55,839 --> 00:15:00,880
the files exist

00:14:58,639 --> 00:15:02,639
the third one is a connectivity test it

00:15:00,880 --> 00:15:05,920
checks

00:15:02,639 --> 00:15:10,160
if the nodes can contact

00:15:05,920 --> 00:15:13,279
the node 0 the primary

00:15:10,160 --> 00:15:15,440
the fourth test is a dns check

00:15:13,279 --> 00:15:17,279
because when you have network you don't

00:15:15,440 --> 00:15:22,079
necessarily have aim resolution

00:15:17,279 --> 00:15:25,199
so that will try to ping once um

00:15:22,079 --> 00:15:28,000
mit uh mt is a web server

00:15:25,199 --> 00:15:28,560
and um and we'll see if it succeeds or

00:15:28,000 --> 00:15:32,079
not

00:15:28,560 --> 00:15:33,279
in resolving the name the last one is

00:15:32,079 --> 00:15:37,199
kind of a cute example

00:15:33,279 --> 00:15:39,120
and there is there is a way to uh get

00:15:37,199 --> 00:15:40,480
temperature readings out of the pie

00:15:39,120 --> 00:15:42,480
board um

00:15:40,480 --> 00:15:44,240
so that you can check if the cluster is

00:15:42,480 --> 00:15:46,639
overheating or not if uh

00:15:44,240 --> 00:15:47,839
if we had gone into the hardware part of

00:15:46,639 --> 00:15:49,279
this discussion

00:15:47,839 --> 00:15:51,279
you would have seen that there are some

00:15:49,279 --> 00:15:53,519
things that we can do like replacing

00:15:51,279 --> 00:15:55,199
the fans so that the cluster is a little

00:15:53,519 --> 00:15:58,240
bit um

00:15:55,199 --> 00:15:59,600
less noisy uh when it sits on your desk

00:15:58,240 --> 00:16:01,680
and so when you're doing that you also

00:15:59,600 --> 00:16:03,120
want to make sure that the replacement

00:16:01,680 --> 00:16:06,079
fan is active enough and

00:16:03,120 --> 00:16:06,800
temperature is not shooting up outside

00:16:06,079 --> 00:16:10,959
out of

00:16:06,800 --> 00:16:15,440
what you want as your your range

00:16:10,959 --> 00:16:15,440
then uh we're getting pretty um

00:16:15,680 --> 00:16:20,720
pretty reasonable environment but there

00:16:18,000 --> 00:16:23,680
are a few things that you want still

00:16:20,720 --> 00:16:24,399
for ssl and uh generally secure

00:16:23,680 --> 00:16:28,480
connection

00:16:24,399 --> 00:16:30,800
time needs to be correct otherwise um

00:16:28,480 --> 00:16:33,199
you get a pretty interesting error when

00:16:30,800 --> 00:16:36,800
ssl connections fail because time

00:16:33,199 --> 00:16:39,279
is off in kubernetes it used to hang

00:16:36,800 --> 00:16:39,839
silently and not tell you anything i

00:16:39,279 --> 00:16:41,360
hope that

00:16:39,839 --> 00:16:42,880
has changed since the last time i did

00:16:41,360 --> 00:16:44,560
this but in general

00:16:42,880 --> 00:16:46,240
uh not having a good time source

00:16:44,560 --> 00:16:47,759
produces errors that are

00:16:46,240 --> 00:16:51,040
hard to debug because the other messages

00:16:47,759 --> 00:16:53,360
don't give you anything useful um

00:16:51,040 --> 00:16:54,399
so don't go there just to set it up to

00:16:53,360 --> 00:16:56,880
begin with

00:16:54,399 --> 00:16:58,240
it's pretty simple and here are the two

00:16:56,880 --> 00:17:00,880
things that you need to do to

00:16:58,240 --> 00:17:02,720
to get a time source in place uh under

00:17:00,880 --> 00:17:04,559
systemd

00:17:02,720 --> 00:17:07,199
the other thing that you need to do is

00:17:04,559 --> 00:17:10,559
having a shared nfs folder

00:17:07,199 --> 00:17:13,120
or in some way shared folder

00:17:10,559 --> 00:17:14,959
across uh the nodes so that the code

00:17:13,120 --> 00:17:15,520
that you compiled or that you uploaded

00:17:14,959 --> 00:17:19,120
to the first

00:17:15,520 --> 00:17:22,480
node is visible to all nodes

00:17:19,120 --> 00:17:22,959
so here we create a folder in the first

00:17:22,480 --> 00:17:26,079
node

00:17:22,959 --> 00:17:27,360
we will then have it mounted by all

00:17:26,079 --> 00:17:29,760
nodes

00:17:27,360 --> 00:17:32,080
uh so that when we launch the parallel

00:17:29,760 --> 00:17:34,000
mpi code

00:17:32,080 --> 00:17:36,400
with the command execution on the first

00:17:34,000 --> 00:17:37,810
node it can also go to all other nodes

00:17:36,400 --> 00:17:40,480
and find the binary there

00:17:37,810 --> 00:17:43,520
[Music]

00:17:40,480 --> 00:17:45,679
this is pretty straightforward

00:17:43,520 --> 00:17:47,360
change of the exports file nothing too

00:17:45,679 --> 00:17:49,120
surprising there

00:17:47,360 --> 00:17:51,039
the mounts file is more interesting

00:17:49,120 --> 00:17:54,320
because um

00:17:51,039 --> 00:17:58,240
if you um

00:17:54,320 --> 00:18:01,360
if you mess up the etc fs app

00:17:58,240 --> 00:18:04,720
like the old unix grey beards will know

00:18:01,360 --> 00:18:05,200
your system will not boot so you want to

00:18:04,720 --> 00:18:08,480
get

00:18:05,200 --> 00:18:11,520
uh the right spacing between those um

00:18:08,480 --> 00:18:15,039
between those uh parameters

00:18:11,520 --> 00:18:18,320
so forget the tab then

00:18:15,039 --> 00:18:19,200
you'll discover how to how to repair a

00:18:18,320 --> 00:18:22,160
system with a bad

00:18:19,200 --> 00:18:23,600
fs tab it's not too bad but it will take

00:18:22,160 --> 00:18:26,480
you 20 minutes to do it after

00:18:23,600 --> 00:18:28,160
a little bit of googling and the fact

00:18:26,480 --> 00:18:30,799
that you're doing it on an sd card makes

00:18:28,160 --> 00:18:32,400
it all the more fun

00:18:30,799 --> 00:18:34,400
once you have that you pretty much have

00:18:32,400 --> 00:18:36,640
your your super computer ready

00:18:34,400 --> 00:18:37,760
um i was mentioning the fact that uh

00:18:36,640 --> 00:18:38,960
what's the point of having a super

00:18:37,760 --> 00:18:41,679
computer if you don't have

00:18:38,960 --> 00:18:44,080
lights to blink so if you have the

00:18:41,679 --> 00:18:45,200
pymoroni blinked add on boards which are

00:18:44,080 --> 00:18:48,559
basically

00:18:45,200 --> 00:18:51,600
additional uh arrays of leds that stick

00:18:48,559 --> 00:18:55,840
to the to the pi

00:18:51,600 --> 00:18:58,640
um i forget what the option connector of

00:18:55,840 --> 00:19:01,120
the pi is officially called

00:18:58,640 --> 00:19:02,240
um well you know what i'm talking about

00:19:01,120 --> 00:19:05,200
the um

00:19:02,240 --> 00:19:05,919
the out um and that uh that gives you

00:19:05,200 --> 00:19:10,559
access to

00:19:05,919 --> 00:19:13,760
um to uh um i o on the pi

00:19:10,559 --> 00:19:17,760
that is used to drive these leds and uh

00:19:13,760 --> 00:19:21,280
on the software side there is a python

00:19:17,760 --> 00:19:24,400
uh set of scripts that you can use to

00:19:21,280 --> 00:19:25,840
light up these leds and these are rgb

00:19:24,400 --> 00:19:28,480
leds so you can

00:19:25,840 --> 00:19:30,720
set them from uh green to red and uh

00:19:28,480 --> 00:19:33,120
that's ideal for status so

00:19:30,720 --> 00:19:34,160
you can pipe the output of top there and

00:19:33,120 --> 00:19:37,520
basically see

00:19:34,160 --> 00:19:40,880
how loaded the cpu is you can get

00:19:37,520 --> 00:19:41,919
uh you can get cute an asylum or a

00:19:40,880 --> 00:19:45,039
larsen scanner

00:19:41,919 --> 00:19:48,080
as it's properly called so you can see a

00:19:45,039 --> 00:19:51,280
red led light going left or right

00:19:48,080 --> 00:19:55,440
and um sometimes these things get

00:19:51,280 --> 00:19:58,640
timed so i wrote a little script to

00:19:55,440 --> 00:20:00,960
save you from seizure if if those

00:19:58,640 --> 00:20:02,159
things just don't stop blinking when you

00:20:00,960 --> 00:20:05,440
call them through the

00:20:02,159 --> 00:20:08,159
through the parallel ssh command

00:20:05,440 --> 00:20:09,039
um and yeah the there is a good example

00:20:08,159 --> 00:20:11,360
there the cpu

00:20:09,039 --> 00:20:13,360
load will will show the output of top

00:20:11,360 --> 00:20:16,559
and you can run stress to

00:20:13,360 --> 00:20:19,679
generate load and see the red bar

00:20:16,559 --> 00:20:21,280
rise as the system gets busier

00:20:19,679 --> 00:20:23,200
now that's the first part the second

00:20:21,280 --> 00:20:26,320
part we're not gonna do like i said

00:20:23,200 --> 00:20:29,440
um that is um uh

00:20:26,320 --> 00:20:32,480
there should be a recording on youtube

00:20:29,440 --> 00:20:36,640
of uh me presenting that um

00:20:32,480 --> 00:20:39,360
a couple of times last summer so um

00:20:36,640 --> 00:20:40,320
if you're interested in the mpi tutorial

00:20:39,360 --> 00:20:43,360
we're going to

00:20:40,320 --> 00:20:47,760
uh i'm going to refer you to that

00:20:43,360 --> 00:20:50,000
and um i'm just going to go to the end

00:20:47,760 --> 00:20:53,840
slide here

00:20:50,000 --> 00:20:56,880
which is the various links

00:20:53,840 --> 00:20:59,200
for the the resources that i have used

00:20:56,880 --> 00:21:01,679
are there on the left the picocluster

00:20:59,200 --> 00:21:03,440
various scripts and the additional tools

00:21:01,679 --> 00:21:05,200
one thing that i use heavily in the

00:21:03,440 --> 00:21:07,440
second part is mathematica

00:21:05,200 --> 00:21:10,880
not because of the parallel part but

00:21:07,440 --> 00:21:13,919
because it's very easy to analyze

00:21:10,880 --> 00:21:16,799
performance data based on that

00:21:13,919 --> 00:21:17,679
and mathematica is free for raspberry pi

00:21:16,799 --> 00:21:21,360
so

00:21:17,679 --> 00:21:25,039
that's a very nice gift of wall from to

00:21:21,360 --> 00:21:31,039
students and i think we're

00:21:25,039 --> 00:21:34,159
one minute past mark and we're done

00:21:31,039 --> 00:21:35,039
thank you very much um that was a very

00:21:34,159 --> 00:21:37,760
interesting talk

00:21:35,039 --> 00:21:39,400
um if you send us the slide file we'll

00:21:37,760 --> 00:21:42,080
put it up on the

00:21:39,400 --> 00:21:43,280
submit.miniconf.org site people will be

00:21:42,080 --> 00:21:44,320
able to

00:21:43,280 --> 00:21:46,720
have a look through the rest of the

00:21:44,320 --> 00:21:48,640
slides that we didn't have time for now

00:21:46,720 --> 00:21:51,360
thank you for your presentation um it

00:21:48,640 --> 00:21:54,320
was great that you were able to give it

00:21:51,360 --> 00:21:55,600
we now have a 10-minute break before the

00:21:54,320 --> 00:21:58,080
next speaker

00:21:55,600 --> 00:22:06,880
der hans is going to speak to us so see

00:21:58,080 --> 00:22:06,880

YouTube URL: https://www.youtube.com/watch?v=3qhcDppGCZU


