Title: Sam Richard - Magic tricks with Houdini
Publication date: 2018-04-10
Playlist: CSSConf AU 2018
Description: 
	This talk will focus on the working being done by the CSS Houdini Task Force to provide us with the ability to extend the browser’s render engines with JavaScript, above and beyond simply running JS on the main thread or a web worker. The power we've gotten to control the cache with Service Workers? That's but the first step of what Houdini will offer for render engines. This talk will focus on the following:

What is the Houdini Task Force?
What types of things can we expect to see coming from them?
What’s available today and where, what’s going to be available in the future
Practical examples, with code, that can be played with today
As what is available is currently being worked on, this talk with be as up-to-date of an overview of what’s available and coming in the future as can be provided. This stuff is definitely in the future type stuff, but learning about it now will prepare attendees for what they can expect browsers to be capable of doing in the upcoming years.
Captions: 
	00:00:09,970 --> 00:00:14,570
so before I get started

00:00:12,470 --> 00:00:17,660
fun note that song is called hocus-pocus

00:00:14,570 --> 00:00:19,550
and it's by a band named focus and I

00:00:17,660 --> 00:00:21,230
didn't realize that was a really amazing

00:00:19,550 --> 00:00:24,740
pun for my talk until my girlfriend

00:00:21,230 --> 00:00:26,180
asked if I did it on purpose so anyway

00:00:24,740 --> 00:00:28,160
we're here to talk about Houdini

00:00:26,180 --> 00:00:32,949
and obviously the first question with

00:00:28,160 --> 00:00:35,809
Houdini is well what is Houdini

00:00:32,949 --> 00:00:39,050
according to their wiki the objective of

00:00:35,809 --> 00:00:41,629
the CSS tag Houdini task force aka CSS

00:00:39,050 --> 00:00:44,809
Houdini is to jointly develop features

00:00:41,629 --> 00:00:48,800
that explain the magic of styling and

00:00:44,809 --> 00:00:51,620
layout on the web practically though

00:00:48,800 --> 00:00:55,699
what does that mean well it means being

00:00:51,620 --> 00:00:58,250
able to extend CSS via JavaScript so

00:00:55,699 --> 00:01:01,040
that authors us no longer have to wait

00:00:58,250 --> 00:01:02,420
decades for standards bodies and

00:01:01,040 --> 00:01:06,890
browsers to bring new stuff into

00:01:02,420 --> 00:01:07,850
fruition now you might say wait Sam can

00:01:06,890 --> 00:01:09,619
we do this already

00:01:07,850 --> 00:01:10,909
we've got CSS necks you've got post CSS

00:01:09,619 --> 00:01:13,990
we've got CSS and JavaScript all this

00:01:10,909 --> 00:01:16,550
stuff the answer is no not really

00:01:13,990 --> 00:01:20,000
it's currently not possible to actually

00:01:16,550 --> 00:01:21,770
extend CSS via JavaScript it's only

00:01:20,000 --> 00:01:23,270
possible to write JavaScript that kind

00:01:21,770 --> 00:01:27,260
of mimics yes as with what we've got

00:01:23,270 --> 00:01:29,480
today actually poly filling CSS or

00:01:27,260 --> 00:01:30,950
introducing new features like CSS grid

00:01:29,480 --> 00:01:33,350
to a browser that doesn't have it is

00:01:30,950 --> 00:01:35,960
hard to do if not impossible

00:01:33,350 --> 00:01:38,050
without really affecting your users

00:01:35,960 --> 00:01:40,490
performance in a negative way

00:01:38,050 --> 00:01:43,880
what Houdini is going to let us do is

00:01:40,490 --> 00:01:47,090
actually tap in to the CSS render engine

00:01:43,880 --> 00:01:50,800
and allowing us to extend CSS and do so

00:01:47,090 --> 00:01:53,300
at the speeds of the CSS render engine

00:01:50,800 --> 00:01:55,730
the way I like to think about it is much

00:01:53,300 --> 00:01:58,010
like how service workers are a low-level

00:01:55,730 --> 00:02:00,920
JavaScript API for the browser's cache

00:01:58,010 --> 00:02:02,990
Houdini is introducing low-level

00:02:00,920 --> 00:02:08,320
javascript api x' for the browser's

00:02:02,990 --> 00:02:08,320
render engines and that's pretty cool

00:02:08,709 --> 00:02:14,000
so the first question I get when we do

00:02:12,739 --> 00:02:17,870
this is can we use Houdini

00:02:14,000 --> 00:02:21,109
and the answer unequivocally is no you

00:02:17,870 --> 00:02:23,180
cannot use your Dini this is not

00:02:21,109 --> 00:02:25,849
available today in browsers

00:02:23,180 --> 00:02:27,200
chromed airships kind of sort of paint

00:02:25,849 --> 00:02:30,470
but it's not going to be able to do

00:02:27,200 --> 00:02:32,569
everything I'm showing you today but

00:02:30,470 --> 00:02:34,670
that's okay this is think about this as

00:02:32,569 --> 00:02:37,910
like learning about CSS grid or

00:02:34,670 --> 00:02:39,620
serviceworkers five years ago and you'll

00:02:37,910 --> 00:02:41,080
be on top of the ball when this actually

00:02:39,620 --> 00:02:44,510
starts to roll it to browsers and

00:02:41,080 --> 00:02:49,310
because you can't use it today I have a

00:02:44,510 --> 00:02:52,010
warning this talk is all about stuff

00:02:49,310 --> 00:02:55,130
that's in progress there are no real

00:02:52,010 --> 00:02:57,380
compatible implementations one of my

00:02:55,130 --> 00:02:58,760
demos literally broke this morning

00:02:57,380 --> 00:03:00,830
because I made the mistake of updating

00:02:58,760 --> 00:03:02,840
Chrome Canary in fact all these things

00:03:00,830 --> 00:03:05,090
really only work in Chrome Canary I've

00:03:02,840 --> 00:03:07,400
been talking about this for about a year

00:03:05,090 --> 00:03:09,680
and I've had four or five incompatible

00:03:07,400 --> 00:03:12,560
API braking changes in that amount of

00:03:09,680 --> 00:03:14,780
time so this may not reflect the final

00:03:12,560 --> 00:03:16,430
syntax terms and conditions imply not

00:03:14,780 --> 00:03:22,000
redeemable for cash your mileage may

00:03:16,430 --> 00:03:24,080
vary that being said let's talk about it

00:03:22,000 --> 00:03:27,049
so the first part and the part that

00:03:24,080 --> 00:03:29,750
really is the underlying thing of

00:03:27,049 --> 00:03:34,609
Houdini are worklets worklets are like

00:03:29,750 --> 00:03:36,920
itty bitty web ish workers worklets are

00:03:34,609 --> 00:03:39,200
extension points for render engines

00:03:36,920 --> 00:03:41,329
they're like web workers if you're

00:03:39,200 --> 00:03:44,329
familiar with them but they work on a

00:03:41,329 --> 00:03:46,579
much smaller scope importantly they can

00:03:44,329 --> 00:03:50,570
be parallelized they live on multiple

00:03:46,579 --> 00:03:51,980
threads and they can get called by the

00:03:50,570 --> 00:03:54,079
render engine themself they're not

00:03:51,980 --> 00:03:55,940
something that we call we're basically

00:03:54,079 --> 00:03:59,959
writing instructions for the render

00:03:55,940 --> 00:04:01,730
engine to use when they need it web

00:03:59,959 --> 00:04:03,200
workers are sorry work let's look a

00:04:01,730 --> 00:04:05,660
little bit something like this we have

00:04:03,200 --> 00:04:07,670
our window object and we have a worklet

00:04:05,660 --> 00:04:10,489
name so demo worklet and then we add a

00:04:07,670 --> 00:04:12,049
module with a path to our worklet this

00:04:10,489 --> 00:04:15,940
will load our workload in and get it

00:04:12,049 --> 00:04:18,769
ready for our render engine to use add

00:04:15,940 --> 00:04:20,090
module is a promise so we can run them

00:04:18,769 --> 00:04:22,039
all through something like promise all

00:04:20,090 --> 00:04:24,139
and we can then off of it so once

00:04:22,039 --> 00:04:25,580
they're loaded we can use it and then we

00:04:24,139 --> 00:04:27,440
can do work once our worklets are

00:04:25,580 --> 00:04:30,039
available this is important for some

00:04:27,440 --> 00:04:33,530
work'll it's not so important for others

00:04:30,039 --> 00:04:35,520
an actual worklet is a JavaScript file

00:04:33,530 --> 00:04:37,530
like a function that has

00:04:35,520 --> 00:04:39,599
a worklet name so register work with

00:04:37,530 --> 00:04:43,470
demo worklet is an example of a work

00:04:39,599 --> 00:04:45,479
that name we provide the name of what we

00:04:43,470 --> 00:04:46,979
want to call the thing we're working on

00:04:45,479 --> 00:04:48,419
this will make a little bit more sense

00:04:46,979 --> 00:04:50,879
when you start to see real examples and

00:04:48,419 --> 00:04:52,770
then there's a class inside the class

00:04:50,879 --> 00:04:54,629
all work let's have a process function

00:04:52,770 --> 00:04:56,430
it's not necessarily called process

00:04:54,629 --> 00:04:58,409
might be called something else but the

00:04:56,430 --> 00:05:01,169
process functions the important bit it's

00:04:58,409 --> 00:05:03,000
a specially named property on this class

00:05:01,169 --> 00:05:05,669
that is the thing the render engine is

00:05:03,000 --> 00:05:07,590
going to call it might take arguments it

00:05:05,669 --> 00:05:09,030
might not take arguments might return

00:05:07,590 --> 00:05:10,710
something might work directly on

00:05:09,030 --> 00:05:14,190
something else kind of depends on what

00:05:10,710 --> 00:05:15,389
the work with is let's take a look at

00:05:14,190 --> 00:05:16,590
the life cycle because this life cycle

00:05:15,389 --> 00:05:19,590
is a little bit different and this is

00:05:16,590 --> 00:05:21,330
what really makes worklets really

00:05:19,590 --> 00:05:24,210
powerful so we have our render engine

00:05:21,330 --> 00:05:25,830
our browser it's gonna spin up a main

00:05:24,210 --> 00:05:27,539
thread this is the thing that JavaScript

00:05:25,830 --> 00:05:30,030
gets run on and paint gets run on all

00:05:27,539 --> 00:05:32,069
that sort of stuff but in parallel to

00:05:30,030 --> 00:05:34,800
the main thread our browser will spin up

00:05:32,069 --> 00:05:36,030
lots of worklet threads these are a

00:05:34,800 --> 00:05:38,129
couple different it might not

00:05:36,030 --> 00:05:40,009
necessarily be four but it'll spin up a

00:05:38,129 --> 00:05:42,419
couple different work with processes

00:05:40,009 --> 00:05:44,460
from our main thread we can have our

00:05:42,419 --> 00:05:46,199
browser JavaScript and our browser

00:05:44,460 --> 00:05:48,930
JavaScript might call something like

00:05:46,199 --> 00:05:53,699
window dot add module which will add our

00:05:48,930 --> 00:05:56,580
worklet that worklet then we'll get spun

00:05:53,699 --> 00:05:59,880
up into two or more worklet processes

00:05:56,580 --> 00:06:02,370
it's done so that we can ensure that our

00:05:59,880 --> 00:06:03,840
worklet isn't working off of some state

00:06:02,370 --> 00:06:05,639
that it doesn't or shouldn't have

00:06:03,840 --> 00:06:09,750
worklets are meant to be worked on in

00:06:05,639 --> 00:06:11,219
isolation and in parallel then when the

00:06:09,750 --> 00:06:13,349
render engine needs something that's run

00:06:11,219 --> 00:06:15,419
by worklet the render engine will call

00:06:13,349 --> 00:06:18,529
whatever that process function is and it

00:06:15,419 --> 00:06:21,150
will execute that work but for us

00:06:18,529 --> 00:06:22,800
worklets like i said are the underlying

00:06:21,150 --> 00:06:25,020
foundation for which all of Houdini is

00:06:22,800 --> 00:06:26,969
based there the magic that makes it

00:06:25,020 --> 00:06:31,469
happen it's really the secret sauce of

00:06:26,969 --> 00:06:34,099
Houdini the next big thing that who

00:06:31,469 --> 00:06:37,680
Nina's going to bring us is a typed om

00:06:34,099 --> 00:06:39,919
so the typed om exposes a new data

00:06:37,680 --> 00:06:43,259
structure called the CSS style value

00:06:39,919 --> 00:06:46,169
designed to performant lis manipulate

00:06:43,259 --> 00:06:48,690
our CSS values beyond just simple

00:06:46,169 --> 00:06:49,230
strings like we have now it has a bunch

00:06:48,690 --> 00:06:52,110
of sub Val

00:06:49,230 --> 00:06:56,070
subclasses CSS keyword values which are

00:06:52,110 --> 00:06:58,680
idents things like grid or block or flex

00:06:56,070 --> 00:07:01,230
for the display property their position

00:06:58,680 --> 00:07:02,760
values and they have x and y's their

00:07:01,230 --> 00:07:05,630
transform values and all the transform

00:07:02,760 --> 00:07:08,730
subclasses like rotations scale etc

00:07:05,630 --> 00:07:11,730
their unit values which are either bear

00:07:08,730 --> 00:07:14,100
numbers or numbers with units and then

00:07:11,730 --> 00:07:17,550
their math values which are complex

00:07:14,100 --> 00:07:22,080
numbers like calc values and mins and

00:07:17,550 --> 00:07:23,460
maxes let's take a look at an example of

00:07:22,080 --> 00:07:24,900
what this looks like so we have an

00:07:23,460 --> 00:07:27,380
example class it's got a background

00:07:24,900 --> 00:07:29,430
position of center bottom 10 pixels

00:07:27,380 --> 00:07:30,810
hopefully that we can all kind of

00:07:29,430 --> 00:07:33,780
visualize how that background position

00:07:30,810 --> 00:07:36,480
is going to be placed and then in

00:07:33,780 --> 00:07:39,920
JavaScript we can grab our element and

00:07:36,480 --> 00:07:43,140
run this new function computed style map

00:07:39,920 --> 00:07:46,170
computed style map brings back the typed

00:07:43,140 --> 00:07:49,620
OM representation of the styles for this

00:07:46,170 --> 00:07:51,900
element so if we get the X part of the

00:07:49,620 --> 00:07:56,040
background position we'll get a CSS unit

00:07:51,900 --> 00:08:00,180
value of 50 and a unit of percentage cuz

00:07:56,040 --> 00:08:03,660
center centers at 50% forget the Y value

00:08:00,180 --> 00:08:05,760
we'll get up math some it'll have an

00:08:03,660 --> 00:08:08,040
operator of some and it'll have an array

00:08:05,760 --> 00:08:09,810
of values that are being summed the

00:08:08,040 --> 00:08:11,310
first one is negative 10 and unit is

00:08:09,810 --> 00:08:13,410
pixels because we're moving up from the

00:08:11,310 --> 00:08:15,780
bottom and then the second one is a

00:08:13,410 --> 00:08:20,040
hundred percent because we're going all

00:08:15,780 --> 00:08:22,080
the way down to the bottom typed om I

00:08:20,040 --> 00:08:25,170
really like to think of it as the glue

00:08:22,080 --> 00:08:30,650
that will meaningly meaningfully bring

00:08:25,170 --> 00:08:30,650
together our CSS and our worklets

00:08:30,980 --> 00:08:37,349
yeah cool but what can we do with this

00:08:34,260 --> 00:08:38,790
stuff and the answer is once we have

00:08:37,349 --> 00:08:40,890
worklets and once we have the type gum

00:08:38,790 --> 00:08:47,660
in place we can do some pretty rad

00:08:40,890 --> 00:08:51,330
things part three the cool custom stuff

00:08:47,660 --> 00:08:55,050
please let me introduce you to window

00:08:51,330 --> 00:08:57,540
dot CSS the first thing that we get with

00:08:55,050 --> 00:08:59,520
when your dot CSS are custom variables

00:08:57,540 --> 00:09:02,550
or as we really need to start thinking

00:08:59,520 --> 00:09:04,860
about them custom properties

00:09:02,550 --> 00:09:07,740
and with the custom properties in value

00:09:04,860 --> 00:09:11,940
spec we can actually make snozzberries

00:09:07,740 --> 00:09:14,340
taste like snozzberries here's our

00:09:11,940 --> 00:09:16,590
current situation today I've got a

00:09:14,340 --> 00:09:19,740
custom property it's called my color and

00:09:16,590 --> 00:09:24,330
I set it to green then I said it again

00:09:19,740 --> 00:09:26,760
to URL not a color and URL isn't a color

00:09:24,330 --> 00:09:29,060
so that's silly and sad and it's not

00:09:26,760 --> 00:09:31,830
what we want so when we go to use that

00:09:29,060 --> 00:09:33,210
for our color everything will be sad and

00:09:31,830 --> 00:09:38,100
it won't know and it'll be bad and just

00:09:33,210 --> 00:09:40,740
terrible things happen but then window

00:09:38,100 --> 00:09:42,090
dot CSS not register property we're

00:09:40,740 --> 00:09:43,950
gonna say we're gonna register the my

00:09:42,090 --> 00:09:46,590
color property and we're gonna call it a

00:09:43,950 --> 00:09:48,630
color now it's definitely a color the

00:09:46,590 --> 00:09:51,390
browser knows the type of this property

00:09:48,630 --> 00:09:53,010
is color and we get all of the things we

00:09:51,390 --> 00:09:56,690
expect to be able to get with colors

00:09:53,010 --> 00:09:58,320
including saying that URL isn't valid

00:09:56,690 --> 00:09:59,820
there are a couple of different things

00:09:58,320 --> 00:10:03,180
we can do with register property of

00:09:59,820 --> 00:10:04,530
billiot besides name and syntax we can

00:10:03,180 --> 00:10:06,840
decide whether and out our custom

00:10:04,530 --> 00:10:09,540
property inherit up inherits up the dama

00:10:06,840 --> 00:10:12,780
tree and we can give it an initial value

00:10:09,540 --> 00:10:15,510
if we like syntax will default to

00:10:12,780 --> 00:10:18,120
letting everything in but we have lots

00:10:15,510 --> 00:10:20,580
of different options for a syntax so we

00:10:18,120 --> 00:10:22,200
have lengths and numbers and percentages

00:10:20,580 --> 00:10:25,170
we've got lengths percentages which are

00:10:22,200 --> 00:10:28,070
things like calc colors images URLs

00:10:25,170 --> 00:10:31,020
integers angles time resolution

00:10:28,070 --> 00:10:33,210
transform lists and custom idents all

00:10:31,020 --> 00:10:35,310
the different building blocks we need to

00:10:33,210 --> 00:10:37,800
truly create custom properties are

00:10:35,310 --> 00:10:41,040
available built on top of this type yo

00:10:37,800 --> 00:10:43,110
and we can also have different

00:10:41,040 --> 00:10:46,590
combinations of things so we can either

00:10:43,110 --> 00:10:49,500
have a single type we can have multiple

00:10:46,590 --> 00:10:51,930
types like an image or a URL by typing

00:10:49,500 --> 00:10:53,790
them together we can have lots of

00:10:51,930 --> 00:10:56,700
different idents that we accept like big

00:10:53,790 --> 00:10:58,410
bigger all caps bigger and we can have

00:10:56,700 --> 00:11:03,720
lists of things by adding a plus to the

00:10:58,410 --> 00:11:06,560
end live demos they're fun hopefully

00:11:03,720 --> 00:11:08,610
this will work so here's an example of

00:11:06,560 --> 00:11:11,430
something that you might see today I've

00:11:08,610 --> 00:11:13,740
got a custom property unregistered color

00:11:11,430 --> 00:11:14,980
set it to coffee I've got a linear

00:11:13,740 --> 00:11:18,010
gradient here

00:11:14,980 --> 00:11:19,389
I'm using my custom property and on

00:11:18,010 --> 00:11:21,730
hover I want to change for this other

00:11:19,389 --> 00:11:23,019
custom property or this other value and

00:11:21,730 --> 00:11:25,420
when I do that

00:11:23,019 --> 00:11:28,300
that's sad that doesn't work you can't

00:11:25,420 --> 00:11:32,829
trans you can't transition colors

00:11:28,300 --> 00:11:35,980
ingredients but if we move from our

00:11:32,829 --> 00:11:44,170
unregistered property to our registered

00:11:35,980 --> 00:11:45,940
property all of a sudden it works we've

00:11:44,170 --> 00:11:48,070
been able we can use registered

00:11:45,940 --> 00:11:50,380
properties to actually transition things

00:11:48,070 --> 00:11:52,420
like color because we've told the

00:11:50,380 --> 00:11:54,339
browser that this is a color and

00:11:52,420 --> 00:11:56,680
browsers know how to transform colors

00:11:54,339 --> 00:12:02,310
and transition colors if we put

00:11:56,680 --> 00:12:05,980
something invalid into this like URL foo

00:12:02,310 --> 00:12:08,019
it defaults to our default color cuz

00:12:05,980 --> 00:12:11,290
registered property or sorry registered

00:12:08,019 --> 00:12:15,040
color is a color and URL isn't a color

00:12:11,290 --> 00:12:17,470
it's a URL in fact if we go so far as to

00:12:15,040 --> 00:12:19,630
remove this entirely it'll still work

00:12:17,470 --> 00:12:21,970
because we've registered this property

00:12:19,630 --> 00:12:24,069
with a default so if it doesn't find it

00:12:21,970 --> 00:12:32,290
it'll use whatever the default value is

00:12:24,069 --> 00:12:34,480
and of course it'll still transition the

00:12:32,290 --> 00:12:37,180
second thing that Houdini implants and

00:12:34,480 --> 00:12:38,589
we kind of can start using today if you

00:12:37,180 --> 00:12:39,940
only care about chrome and don't care

00:12:38,589 --> 00:12:43,269
about some of the other advantages of

00:12:39,940 --> 00:12:45,550
Houdini is CSS paint CSS paint is cool

00:12:43,269 --> 00:12:47,699
because Bob Ross is cool and everyone

00:12:45,550 --> 00:12:52,420
likes to paint with Bob Ross

00:12:47,699 --> 00:12:55,300
but seriously paint answers the question

00:12:52,420 --> 00:12:57,610
have you ever wanted to use canvas as a

00:12:55,300 --> 00:13:00,519
background as a mask or as a border in

00:12:57,610 --> 00:13:03,100
CSS with the styling and flexibility of

00:13:00,519 --> 00:13:05,050
an element and the scalability of an SVG

00:13:03,100 --> 00:13:07,449
and your immediate answer to that

00:13:05,050 --> 00:13:10,779
question is probably no Sam I've never

00:13:07,449 --> 00:13:12,279
wanted to do that but it's really cool

00:13:10,779 --> 00:13:15,810
and I'm going to show you some uses for

00:13:12,279 --> 00:13:18,699
it this is what the paint API gives us

00:13:15,810 --> 00:13:21,610
so it's like at the paint api's worklet

00:13:18,699 --> 00:13:23,620
we have a class of my paint we have

00:13:21,610 --> 00:13:26,290
input properties these input properties

00:13:23,620 --> 00:13:28,080
are the properties we want to get off of

00:13:26,290 --> 00:13:31,230
an element to use

00:13:28,080 --> 00:13:32,790
our paint worklet we can also pass in

00:13:31,230 --> 00:13:34,860
arguments with the same syntax that we

00:13:32,790 --> 00:13:37,080
use for custom properties we can decide

00:13:34,860 --> 00:13:39,090
if we want to allow alpha and then the

00:13:37,080 --> 00:13:41,970
process function for the paint worklet

00:13:39,090 --> 00:13:44,190
is called paint we have a drawn context

00:13:41,970 --> 00:13:46,860
which is almost identical if you ever

00:13:44,190 --> 00:13:49,740
use canvas drawing we've got the size of

00:13:46,860 --> 00:13:51,360
the box being painted we have the

00:13:49,740 --> 00:13:55,020
properties that are passed in and we

00:13:51,360 --> 00:13:57,060
have the arguments that are passed in so

00:13:55,020 --> 00:13:58,680
let's actually write one here is a

00:13:57,060 --> 00:14:01,020
simple paint worklet we're going to

00:13:58,680 --> 00:14:03,630
register a paint called circle and we're

00:14:01,020 --> 00:14:07,350
going to bring in the circle color

00:14:03,630 --> 00:14:10,860
custom property we're going to get that

00:14:07,350 --> 00:14:13,050
set the circle color custom property as

00:14:10,860 --> 00:14:14,730
the color we want to fill with do a

00:14:13,050 --> 00:14:16,260
little bit of math to draw a circle in

00:14:14,730 --> 00:14:19,980
the center and then actually draw it

00:14:16,260 --> 00:14:23,190
with our context then window dot CSS

00:14:19,980 --> 00:14:24,450
duck pate worklet dot add module I know

00:14:23,190 --> 00:14:25,860
it's a bit of a mouthful but it's pretty

00:14:24,450 --> 00:14:31,200
easy to write once you get a hang of it

00:14:25,860 --> 00:14:33,120
J s / Circle J yes and what we get is we

00:14:31,200 --> 00:14:36,810
get a circle painted in the center of

00:14:33,120 --> 00:14:39,240
our box we can make it larger we can

00:14:36,810 --> 00:14:42,360
make it smaller it grows it shrinks as

00:14:39,240 --> 00:14:44,100
we work because we're using custom

00:14:42,360 --> 00:14:48,900
properties here I can change the color

00:14:44,100 --> 00:14:51,840
of that circle by changing that custom

00:14:48,900 --> 00:14:54,390
property we can do other neat things

00:14:51,840 --> 00:14:59,190
with this as well we don't have to send

00:14:54,390 --> 00:15:01,440
the stick to simple geometry we can draw

00:14:59,190 --> 00:15:04,170
things like faces and because I'm

00:15:01,440 --> 00:15:06,630
fabulous at art you'll see that it grows

00:15:04,170 --> 00:15:13,230
and shrinks and we can have fun goofy

00:15:06,630 --> 00:15:16,020
faces and because like I said you can't

00:15:13,230 --> 00:15:18,420
really use this stuff yet we can go so

00:15:16,020 --> 00:15:23,180
far as to draw warning signs in our

00:15:18,420 --> 00:15:25,380
elements to say hey hold on now

00:15:23,180 --> 00:15:27,420
this is all fun this is funky this

00:15:25,380 --> 00:15:29,070
probably doesn't impress you much but

00:15:27,420 --> 00:15:32,700
what really is cool about paint is we

00:15:29,070 --> 00:15:35,160
can start to use paint to polyfill some

00:15:32,700 --> 00:15:37,980
upcoming CSS specs through the CSS spec

00:15:35,160 --> 00:15:39,710
for choosing how we want our corners to

00:15:37,980 --> 00:15:41,900
be shaped so they're not just squares

00:15:39,710 --> 00:15:51,490
what we can do is we can do

00:15:41,900 --> 00:15:51,490
something like WebKit mask image paint

00:15:52,780 --> 00:16:00,470
corner shape and we can mask this image

00:15:58,370 --> 00:16:02,630
with a drawing that we can control

00:16:00,470 --> 00:16:04,430
through CSS so we don't have to create

00:16:02,630 --> 00:16:06,770
custom masks for each one of our boxes

00:16:04,430 --> 00:16:13,640
we can use the paint API to do that for

00:16:06,770 --> 00:16:16,400
us and we can corner radius style at all

00:16:13,640 --> 00:16:19,730
with CSS so we can have one paint

00:16:16,400 --> 00:16:26,420
worklet working to polyfill almost that

00:16:19,730 --> 00:16:29,810
whole spec down to shape different

00:16:26,420 --> 00:16:32,780
shapes for the actual border radius or

00:16:29,810 --> 00:16:34,280
the actual corner shapes and that gets a

00:16:32,780 --> 00:16:37,030
little bit cooler than just drawing

00:16:34,280 --> 00:16:43,700
warning signs in the background

00:16:37,030 --> 00:16:45,860
okay so worklets typed om paint api and

00:16:43,700 --> 00:16:48,950
custom properties and values those are

00:16:45,860 --> 00:16:52,010
all fairly straightforward in Houdini's

00:16:48,950 --> 00:16:53,780
world anyway the next two things they

00:16:52,010 --> 00:16:57,680
get a little bit fuzzy so you're gonna

00:16:53,780 --> 00:16:59,660
have to bear with me a little bit first

00:16:57,680 --> 00:17:02,750
thing we're going to talk about R is the

00:16:59,660 --> 00:17:07,930
CSS animation API for Houdini because yo

00:17:02,750 --> 00:17:10,370
I heard you really like parallax right

00:17:07,930 --> 00:17:12,830
so what the CSS animation API with

00:17:10,370 --> 00:17:16,310
Houdini does is it lets us listen for

00:17:12,830 --> 00:17:19,750
user input like scroll events and then

00:17:16,310 --> 00:17:22,459
style elements based on that user input

00:17:19,750 --> 00:17:25,430
and we do it all off the main thread cuz

00:17:22,459 --> 00:17:26,810
it works in a worker this API will

00:17:25,430 --> 00:17:28,700
actually let us make things like

00:17:26,810 --> 00:17:32,900
parallax perform well and not just be

00:17:28,700 --> 00:17:34,190
terrible for our user experience so

00:17:32,900 --> 00:17:37,130
let's take a look at the animator work

00:17:34,190 --> 00:17:39,380
or the animation worklet we have a

00:17:37,130 --> 00:17:41,210
constructor this is going to be called

00:17:39,380 --> 00:17:44,360
every time we create a new instance of

00:17:41,210 --> 00:17:46,580
our animation and we have animate which

00:17:44,360 --> 00:17:48,950
has current time and affects what we're

00:17:46,580 --> 00:17:51,530
doing in the animation worklet is we're

00:17:48,950 --> 00:17:54,200
manipulating the timeline of an

00:17:51,530 --> 00:17:55,170
animation effect so the current timeline

00:17:54,200 --> 00:17:57,780
is the time

00:17:55,170 --> 00:18:03,000
timeline and the effect is an array of

00:17:57,780 --> 00:18:04,110
different things we're working with so

00:18:03,000 --> 00:18:05,850
what we're gonna do with this is we're

00:18:04,110 --> 00:18:08,520
gonna build Twitter's little header

00:18:05,850 --> 00:18:10,590
animation where we have a big scrolling

00:18:08,520 --> 00:18:12,870
area and an invisible header and an

00:18:10,590 --> 00:18:15,450
avatar and some other stuff and as we

00:18:12,870 --> 00:18:21,300
scroll our headers going to fade in and

00:18:15,450 --> 00:18:23,340
our avatar is going to shrink down we're

00:18:21,300 --> 00:18:25,710
gonna start by registering our animator

00:18:23,340 --> 00:18:28,380
Twitter header we're gonna have our

00:18:25,710 --> 00:18:30,870
constructor create a cubic Bezier timing

00:18:28,380 --> 00:18:32,160
function for us to use this clamp

00:18:30,870 --> 00:18:34,020
function is just a little min max

00:18:32,160 --> 00:18:36,990
clamping function that's used internally

00:18:34,020 --> 00:18:38,610
and then our animate is the process

00:18:36,990 --> 00:18:40,770
we're gonna call with current time and

00:18:38,610 --> 00:18:42,480
effects we're gonna set scroll to the

00:18:40,770 --> 00:18:44,160
current time this is between zero and

00:18:42,480 --> 00:18:46,920
one this is the timeline we're working

00:18:44,160 --> 00:18:48,720
on for the animation and then our first

00:18:46,920 --> 00:18:51,240
effect we're gonna set its local time

00:18:48,720 --> 00:18:54,060
which is where along its transition path

00:18:51,240 --> 00:18:55,820
or its animation path we are to just

00:18:54,060 --> 00:18:58,290
whatever the timeline is for our scroll

00:18:55,820 --> 00:18:59,610
the second one we're going to make it a

00:18:58,290 --> 00:19:04,050
little bit more interesting and use that

00:18:59,610 --> 00:19:05,400
timing function now animation works a

00:19:04,050 --> 00:19:07,320
little bit differently we want to be

00:19:05,400 --> 00:19:09,270
able to reuse the same animation with

00:19:07,320 --> 00:19:10,830
multiple different elements so instead

00:19:09,270 --> 00:19:13,440
of hard-coding them into the animation

00:19:10,830 --> 00:19:16,530
worklet we create this generic animation

00:19:13,440 --> 00:19:19,500
worklet and then off of it's loading to

00:19:16,530 --> 00:19:21,210
create a new worklet animation and this

00:19:19,500 --> 00:19:23,040
new worklet animation is the thing

00:19:21,210 --> 00:19:26,670
that's actually going to control how

00:19:23,040 --> 00:19:29,040
things move around so the first argument

00:19:26,670 --> 00:19:32,910
is an array of effects that we want

00:19:29,040 --> 00:19:35,220
these come from the animation API that's

00:19:32,910 --> 00:19:37,470
previously been defined so a keyframe

00:19:35,220 --> 00:19:38,970
effect the first item is what we're

00:19:37,470 --> 00:19:41,160
actually going to do so our avatar is

00:19:38,970 --> 00:19:44,010
our first keyframe effect we want it to

00:19:41,160 --> 00:19:46,110
scale from 1 to 0.5 and we want

00:19:44,010 --> 00:19:47,760
basically each duration to be a single

00:19:46,110 --> 00:19:50,220
frame because we're attaching the

00:19:47,760 --> 00:19:52,020
duration to our scroll the second one is

00:19:50,220 --> 00:19:55,020
going to be our header opacity is 0 to

00:19:52,020 --> 00:19:56,910
0.8 and we want that same duration now

00:19:55,020 --> 00:19:58,650
the next part it's the cool part it's

00:19:56,910 --> 00:20:00,060
the scroll timeline this is what we're

00:19:58,650 --> 00:20:02,490
actually listening to to control the

00:20:00,060 --> 00:20:05,400
timeline we want to listen on the

00:20:02,490 --> 00:20:08,210
scrolling container we want the time

00:20:05,400 --> 00:20:09,770
range to go from 1 have no offset

00:20:08,210 --> 00:20:10,850
we want to go until we've reached the

00:20:09,770 --> 00:20:13,640
full height of the header that's

00:20:10,850 --> 00:20:17,060
basically the duration of this animation

00:20:13,640 --> 00:20:19,840
that we want so it'll look something

00:20:17,060 --> 00:20:23,180
like this going back to our previous

00:20:19,840 --> 00:20:25,460
diagram the header is our keyframe

00:20:23,180 --> 00:20:27,590
effect that starts at zero our avatars

00:20:25,460 --> 00:20:30,410
our second keyframe effect and the

00:20:27,590 --> 00:20:32,060
scroll bar is our current time and as

00:20:30,410 --> 00:20:35,180
the scroll bar goes down current time

00:20:32,060 --> 00:20:40,010
increases the header fades in and the

00:20:35,180 --> 00:20:42,620
Avatar shrinks now this demo worked

00:20:40,010 --> 00:20:45,800
until this morning when I updated canary

00:20:42,620 --> 00:20:47,870
and then it broke so y'all are gonna get

00:20:45,800 --> 00:20:49,220
a low res video that I pulled off the

00:20:47,870 --> 00:20:51,740
internet if the last time I gave this

00:20:49,220 --> 00:20:56,230
talk to explain and show you how this

00:20:51,740 --> 00:20:58,880
works because like I said warning so

00:20:56,230 --> 00:21:01,160
here we have scrolling you can see the

00:20:58,880 --> 00:21:03,560
header start to fade in and the avatar

00:21:01,160 --> 00:21:05,000
start to get small as we scroll as we

00:21:03,560 --> 00:21:07,940
continue to scroll it eventually locks

00:21:05,000 --> 00:21:09,650
in place as we keep scrolling and we can

00:21:07,940 --> 00:21:11,660
do it in Reverse and as we do it in

00:21:09,650 --> 00:21:15,020
Reverse it'll undo based on the scroll

00:21:11,660 --> 00:21:17,900
position in that scrolling container so

00:21:15,020 --> 00:21:24,530
really tying complex animations to

00:21:17,900 --> 00:21:26,650
scroll position cool the last one the

00:21:24,530 --> 00:21:29,810
big one the layout API

00:21:26,650 --> 00:21:33,170
this one's really complex and I'm sorry

00:21:29,810 --> 00:21:35,180
but the advantage of me explaining this

00:21:33,170 --> 00:21:38,000
whole thing is you will understand how

00:21:35,180 --> 00:21:40,010
CSS grid works at the end which is

00:21:38,000 --> 00:21:42,320
awesome because it was a big revelation

00:21:40,010 --> 00:21:44,750
for me so what is the CSS layout API

00:21:42,320 --> 00:21:47,510
well it's gonna let us make our own

00:21:44,750 --> 00:21:51,560
Tetris effectively it lets us create our

00:21:47,510 --> 00:21:52,970
own display properties it'll let us do

00:21:51,560 --> 00:21:56,180
things like polyfill that new awesome

00:21:52,970 --> 00:21:58,670
layout spec that we all love or because

00:21:56,180 --> 00:22:00,500
I know you like a masonry layout we can

00:21:58,670 --> 00:22:05,060
make a masonry layout without the

00:22:00,500 --> 00:22:06,800
performance hit of doing so so there's a

00:22:05,060 --> 00:22:09,140
lot of terminology in this and

00:22:06,800 --> 00:22:11,990
unfortunately it's not so easy to boil

00:22:09,140 --> 00:22:13,010
down to make it super duper easy so I'm

00:22:11,990 --> 00:22:15,290
gonna do my best

00:22:13,010 --> 00:22:18,140
the first part that we have at the top

00:22:15,290 --> 00:22:19,760
is our parent layout this is the thing

00:22:18,140 --> 00:22:21,889
that actually gets the display property

00:22:19,760 --> 00:22:24,259
so display grid display FET flex

00:22:21,889 --> 00:22:27,710
those are that is the element that has

00:22:24,259 --> 00:22:29,570
that property inside that property we

00:22:27,710 --> 00:22:31,759
have constraint space the constraint

00:22:29,570 --> 00:22:34,730
space is the space available to actually

00:22:31,759 --> 00:22:38,989
put elements so it's effectively the

00:22:34,730 --> 00:22:41,029
space the width of that element minus

00:22:38,989 --> 00:22:43,489
the padding the border and the

00:22:41,029 --> 00:22:46,610
scrollbars padding border scroll bars

00:22:43,489 --> 00:22:48,470
those are our layout edges so we have

00:22:46,610 --> 00:22:51,139
our parent layout our constraint space

00:22:48,470 --> 00:22:52,489
in our layout edges the current layout

00:22:51,139 --> 00:22:54,889
is the thing we're actually currently

00:22:52,489 --> 00:22:57,440
laying out and then this part gets a

00:22:54,889 --> 00:22:58,700
little bit funky because specs are specs

00:22:57,440 --> 00:23:01,639
and specs are a little bit ugly

00:22:58,700 --> 00:23:03,679
sometimes the child layout is the layout

00:23:01,639 --> 00:23:05,989
algorithm for the layout child of the

00:23:03,679 --> 00:23:08,090
current spec or the current layout I'll

00:23:05,989 --> 00:23:10,399
say that again the child layout is the

00:23:08,090 --> 00:23:13,909
layout algorithm for the layout child of

00:23:10,399 --> 00:23:17,629
the current layout it's annoying I'm

00:23:13,909 --> 00:23:20,299
sorry layout child consists of style and

00:23:17,629 --> 00:23:22,070
information and we can from there

00:23:20,299 --> 00:23:25,549
generate fragments to actually position

00:23:22,070 --> 00:23:28,489
things around our layout try like I said

00:23:25,549 --> 00:23:32,330
has a style map which is all of the

00:23:28,489 --> 00:23:34,789
typed om styles for this current layout

00:23:32,330 --> 00:23:36,409
and the layout next fragment function

00:23:34,789 --> 00:23:39,230
which will actually generate a fragment

00:23:36,409 --> 00:23:40,580
our fragment being the thing we can

00:23:39,230 --> 00:23:42,830
actually get position and size

00:23:40,580 --> 00:23:46,039
information from so we have in line size

00:23:42,830 --> 00:23:48,769
and block size in line size is the size

00:23:46,039 --> 00:23:51,590
in parallel to the writing direction

00:23:48,769 --> 00:23:54,049
block size is the size perpendicular to

00:23:51,590 --> 00:23:55,309
power our writing direction we can't

00:23:54,049 --> 00:23:58,580
change those those are set by the

00:23:55,309 --> 00:24:00,889
browser but what we can do is we've got

00:23:58,580 --> 00:24:03,019
that block offset and that inline offset

00:24:00,889 --> 00:24:06,980
that we can actually change to move this

00:24:03,019 --> 00:24:09,350
fragment around we also have layout

00:24:06,980 --> 00:24:12,889
edges we've got inline and block edges

00:24:09,350 --> 00:24:16,489
we've got start and padding scrollbar

00:24:12,889 --> 00:24:19,570
borders okay the diagrams are out of the

00:24:16,489 --> 00:24:24,019
way let's actually see this in action

00:24:19,570 --> 00:24:27,139
the class for a layout worklet has input

00:24:24,019 --> 00:24:31,190
properties that come from the parent

00:24:27,139 --> 00:24:33,900
layout so display grid and things like

00:24:31,190 --> 00:24:35,370
the grid template columns though

00:24:33,900 --> 00:24:36,960
properties that we want to get from that

00:24:35,370 --> 00:24:40,350
parent these are all our input

00:24:36,960 --> 00:24:41,520
properties child or children input

00:24:40,350 --> 00:24:44,040
properties are things we want to get

00:24:41,520 --> 00:24:45,810
from the children so like grid columns

00:24:44,040 --> 00:24:48,090
and grid rows from children inside

00:24:45,810 --> 00:24:50,300
display grid those are our input child

00:24:48,090 --> 00:24:53,970
properties or a child input properties

00:24:50,300 --> 00:24:55,890
the child display static well let us

00:24:53,970 --> 00:24:57,630
decide whether I want to block off il

00:24:55,890 --> 00:24:59,820
immense or not it's a little bit weird

00:24:57,630 --> 00:25:02,610
it's not really well explained so we'll

00:24:59,820 --> 00:25:03,930
just skip it but the next two things are

00:25:02,610 --> 00:25:05,670
important the next two things are

00:25:03,930 --> 00:25:07,860
effectively the process functions for

00:25:05,670 --> 00:25:11,220
our layout the first one is intrinsic

00:25:07,860 --> 00:25:12,900
size of intrinsic sizes it's a generator

00:25:11,220 --> 00:25:15,300
which means that it's designed to be

00:25:12,900 --> 00:25:18,510
used asynchronously and running parallel

00:25:15,300 --> 00:25:20,340
and this takes children and a style map

00:25:18,510 --> 00:25:24,920
and this will allow us to determine the

00:25:20,340 --> 00:25:26,910
size of a block that we're lighting out

00:25:24,920 --> 00:25:29,370
and then there's the actual layout

00:25:26,910 --> 00:25:32,160
function which takes the constraint

00:25:29,370 --> 00:25:35,970
space that the parent layout is sitting

00:25:32,160 --> 00:25:39,060
in the children of the parent layout the

00:25:35,970 --> 00:25:41,730
style map of the parent layout the edges

00:25:39,060 --> 00:25:46,740
of the parent layout and a break token

00:25:41,730 --> 00:25:49,260
which is good for pagination so let's

00:25:46,740 --> 00:25:51,300
create a brand new layout let's create a

00:25:49,260 --> 00:25:53,250
layout called centered stacked and what

00:25:51,300 --> 00:25:55,320
this is going to do is each child of

00:25:53,250 --> 00:25:57,480
this layout is going to be centered

00:25:55,320 --> 00:26:00,210
inline so centered horizontally and

00:25:57,480 --> 00:26:02,480
stacked one on top of another something

00:26:00,210 --> 00:26:04,500
that's pretty easy to visualize for us

00:26:02,480 --> 00:26:06,420
the first thing we'll do is we'll do

00:26:04,500 --> 00:26:09,000
intrinsic sizing now the intrinsic and

00:26:06,420 --> 00:26:11,520
extrinsic sizing spec is like SuperDuper

00:26:09,000 --> 00:26:13,470
heavy math but it basically can be

00:26:11,520 --> 00:26:16,860
boiled down to this we want to

00:26:13,470 --> 00:26:20,180
understand what the max content size is

00:26:16,860 --> 00:26:24,210
which is the largest a block can be

00:26:20,180 --> 00:26:25,830
without any unused space so how large it

00:26:24,210 --> 00:26:28,520
can be with all of its content filling

00:26:25,830 --> 00:26:31,410
as much all of its space effectively and

00:26:28,520 --> 00:26:33,870
the min content size or just how small

00:26:31,410 --> 00:26:37,110
we can make something before content

00:26:33,870 --> 00:26:39,690
starts to overflow so the intrinsic size

00:26:37,110 --> 00:26:42,540
function here calculates that for us and

00:26:39,690 --> 00:26:44,700
then returns the max content size and

00:26:42,540 --> 00:26:45,639
the main content size and we can then

00:26:44,700 --> 00:26:50,139
use that to position

00:26:45,639 --> 00:26:51,519
and sighs our item then our layout

00:26:50,139 --> 00:26:53,529
function the first thing we want to do

00:26:51,519 --> 00:26:57,879
is we want to figure out the in-line

00:26:53,529 --> 00:26:59,919
size of our parent layout which is our

00:26:57,879 --> 00:27:03,249
constraint space that were in plus its

00:26:59,919 --> 00:27:06,399
style map and then the available inline

00:27:03,249 --> 00:27:08,019
size is that - all of the inline edges

00:27:06,399 --> 00:27:10,239
so what we're doing here is we're

00:27:08,019 --> 00:27:13,089
basically constructing what the

00:27:10,239 --> 00:27:15,249
children's constraint space is from how

00:27:13,089 --> 00:27:17,950
big the parent is this like I said this

00:27:15,249 --> 00:27:20,619
is a very low level API we're gonna do

00:27:17,950 --> 00:27:21,999
the same for block and then we have the

00:27:20,619 --> 00:27:24,789
constraint space we can put our children

00:27:21,999 --> 00:27:27,159
in so where we can actually lay out our

00:27:24,789 --> 00:27:29,469
individual blocks in like CSS grid for

00:27:27,159 --> 00:27:31,570
instance then what we're going to do is

00:27:29,469 --> 00:27:34,059
we're gonna loop over each one of the

00:27:31,570 --> 00:27:38,619
children and create its fragments using

00:27:34,059 --> 00:27:40,629
that new constraint space then we can

00:27:38,619 --> 00:27:43,359
start actually positioning stuff we

00:27:40,629 --> 00:27:47,619
start at wherever the the edges start

00:27:43,359 --> 00:27:50,049
and then we loop over our fragments put

00:27:47,619 --> 00:27:51,519
it one below the next and Center it in

00:27:50,049 --> 00:27:54,039
line and then add it to whatever our

00:27:51,519 --> 00:27:59,440
counter is just blue blue blue let's go

00:27:54,039 --> 00:28:02,289
down the line from there we have our

00:27:59,440 --> 00:28:03,999
auto block size which is the full offset

00:28:02,289 --> 00:28:05,469
of all of our stuff plus whatever the

00:28:03,999 --> 00:28:07,509
block end is so that we can make sure we

00:28:05,469 --> 00:28:08,950
stick our padding and border and edges

00:28:07,509 --> 00:28:12,129
back onto the bottom of our parent

00:28:08,950 --> 00:28:14,259
layout and then we resolve block size

00:28:12,129 --> 00:28:18,190
which is a built-in function that lets

00:28:14,259 --> 00:28:19,959
us actually calculate this all and we

00:28:18,190 --> 00:28:22,959
return our inline size for our parent

00:28:19,959 --> 00:28:25,539
our block size for a parent and all of

00:28:22,959 --> 00:28:28,539
our children and this actually is the

00:28:25,539 --> 00:28:32,169
thing that does pinked and layout or

00:28:28,539 --> 00:28:34,089
layout I should say for our custom

00:28:32,169 --> 00:28:37,299
layout this is the thing that sizes

00:28:34,089 --> 00:28:39,729
everything what we get is we get

00:28:37,299 --> 00:28:43,749
something like this so we have our

00:28:39,729 --> 00:28:46,809
parent layout which has display layout

00:28:43,749 --> 00:28:48,700
Center stacked on it inside we have

00:28:46,809 --> 00:28:52,659
constrained spaces - the edges and then

00:28:48,700 --> 00:28:55,479
each fragment we align centered and one

00:28:52,659 --> 00:28:57,910
on top of another and if this worked if

00:28:55,479 --> 00:29:00,250
this was a live speck

00:28:57,910 --> 00:29:03,790
it would look something like this this

00:29:00,250 --> 00:29:06,010
is effectively just stacking stuff with

00:29:03,790 --> 00:29:09,310
centering but this is what this layout

00:29:06,010 --> 00:29:13,720
would look like if layout API was live

00:29:09,310 --> 00:29:16,650
right now speaking of if layout API was

00:29:13,720 --> 00:29:18,970
live it kind of is

00:29:16,650 --> 00:29:25,960
are you ready for some cool fire wiki

00:29:18,970 --> 00:29:27,640
stuff well in Hill Patrick who is a

00:29:25,960 --> 00:29:33,450
software engineer on blink

00:29:27,640 --> 00:29:35,830
working on Houdini literally last week

00:29:33,450 --> 00:29:40,810
got the first implementation of layout

00:29:35,830 --> 00:29:46,260
API working and he built a masonry

00:29:40,810 --> 00:29:49,690
layout using layout API so here we have

00:29:46,260 --> 00:29:51,640
May or late masonry layout eye masonry

00:29:49,690 --> 00:29:55,870
layout he's just adjusting the width as

00:29:51,640 --> 00:29:56,980
normal but what you can do now is he's

00:29:55,870 --> 00:29:58,690
going to add padding in this whole

00:29:56,980 --> 00:30:02,580
control spacing in between each one of

00:29:58,690 --> 00:30:04,870
those elements in that masonry layout

00:30:02,580 --> 00:30:06,670
he's then going to add another property

00:30:04,870 --> 00:30:08,380
called columns which you can control how

00:30:06,670 --> 00:30:10,450
many columns you want in this masonry

00:30:08,380 --> 00:30:13,540
layout and he's just kind of messing

00:30:10,450 --> 00:30:16,840
around here but all of this is done at

00:30:13,540 --> 00:30:19,450
render engine speed through CSS so we

00:30:16,840 --> 00:30:22,000
don't need to have two megabytes of

00:30:19,450 --> 00:30:25,570
jQuery on our page to do masonry anymore

00:30:22,000 --> 00:30:28,330
it's just kind of a CSS layout that we

00:30:25,570 --> 00:30:33,610
can then again control with CSS and I

00:30:28,330 --> 00:30:35,260
think that's really cool so can't use it

00:30:33,610 --> 00:30:37,330
today but the future for Houdini is

00:30:35,260 --> 00:30:40,560
really bright and you should be excited

00:30:37,330 --> 00:30:42,610
about it because once it starts to land

00:30:40,560 --> 00:30:46,360
you're gonna be able to do your own

00:30:42,610 --> 00:30:48,520
magic tricks as well as long as you

00:30:46,360 --> 00:30:51,190
don't reveal any of your secrets and get

00:30:48,520 --> 00:30:52,420
thrown out of I forget my arrested of

00:30:51,190 --> 00:30:56,210
element joke just fell flat because I

00:30:52,420 --> 00:30:56,890
forgot it was it's fine thank you

00:30:56,210 --> 00:31:02,359
you

00:30:56,890 --> 00:31:02,359
[Applause]

00:31:07,490 --> 00:31:09,550

YouTube URL: https://www.youtube.com/watch?v=FYWZrLpN5Po


