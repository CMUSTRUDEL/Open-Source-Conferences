Title: Gilmore Davidson: Gradient Circus
Publication date: 2017-05-19
Playlist: Decompress AU 2016
Description: 
	Thank you to Mozilla for making video recording possible.
Captions: 
	00:00:05,960 --> 00:00:13,980
ok so I'm Gilmore I write on Twitter I

00:00:11,850 --> 00:00:15,809
am NOT a broom and occasionally on a

00:00:13,980 --> 00:00:19,650
website of shoehorn with teeth calm and

00:00:15,809 --> 00:00:22,529
by perfect coincidence i have a dr zeus

00:00:19,650 --> 00:00:25,110
reference my favorite book went over kid

00:00:22,529 --> 00:00:26,880
was if i ran the circus why dr. suits

00:00:25,110 --> 00:00:28,860
and when i was looking for a thing for

00:00:26,880 --> 00:00:30,480
this presentation this is the first

00:00:28,860 --> 00:00:34,710
thing that actually came to mind so i

00:00:30,480 --> 00:00:36,690
present the gradient circus circus this

00:00:34,710 --> 00:00:40,320
is not actually a an overview of the

00:00:36,690 --> 00:00:41,760
syntax of CSS gradients because there

00:00:40,320 --> 00:00:44,610
are plenty of examples of these online

00:00:41,760 --> 00:00:47,010
this is actually more about the index

00:00:44,610 --> 00:00:49,560
concepts of how they work but just

00:00:47,010 --> 00:00:51,690
briefly there are two different types of

00:00:49,560 --> 00:00:53,880
gradients you can use linear and radial

00:00:51,690 --> 00:00:58,290
and each of those has a single and a

00:00:53,880 --> 00:01:01,079
repeating version many of us might have

00:00:58,290 --> 00:01:02,489
used gradient generators online which

00:01:01,079 --> 00:01:05,640
produce a whole bunch of different

00:01:02,489 --> 00:01:08,970
vendor prefix in taxes and you have to

00:01:05,640 --> 00:01:09,870
blotting this huge blob of code but you

00:01:08,970 --> 00:01:11,340
don't actually need to do that anymore

00:01:09,870 --> 00:01:13,170
because every browser that supports

00:01:11,340 --> 00:01:18,000
gradients today supports them without

00:01:13,170 --> 00:01:21,030
prefixes any surface is divided into

00:01:18,000 --> 00:01:22,380
various acts and this is no different so

00:01:21,030 --> 00:01:24,330
I'll quickly right through some of the

00:01:22,380 --> 00:01:27,000
tips and tricks that you can use

00:01:24,330 --> 00:01:29,190
gradients for now you can use them for

00:01:27,000 --> 00:01:31,830
incredible repeating patterns for the

00:01:29,190 --> 00:01:34,729
community collaborated site you can

00:01:31,830 --> 00:01:38,490
combine them with CSS blend modes and

00:01:34,729 --> 00:01:41,430
producing more interesting patterns you

00:01:38,490 --> 00:01:44,040
can use them for art projects each one

00:01:41,430 --> 00:01:46,619
of these pictures is generated with just

00:01:44,040 --> 00:01:51,979
a single div element and gradients unbox

00:01:46,619 --> 00:01:55,680
shadows taking inspiration from that I

00:01:51,979 --> 00:02:00,630
revamped my open source site and every

00:01:55,680 --> 00:02:02,610
one of these pictures use a gradient if

00:02:00,630 --> 00:02:03,920
you are going to be doing a lot of work

00:02:02,610 --> 00:02:07,020
with this you might want to debug them

00:02:03,920 --> 00:02:09,539
there is a fantastic chrome extension

00:02:07,020 --> 00:02:11,549
called gradient inspector which breaks

00:02:09,539 --> 00:02:13,690
down the individual gradients that go

00:02:11,549 --> 00:02:16,400
into an element

00:02:13,690 --> 00:02:19,610
gradients can also be used for slightly

00:02:16,400 --> 00:02:23,090
more practical concerns of placeholder

00:02:19,610 --> 00:02:25,130
images as images are loading greater pi

00:02:23,090 --> 00:02:27,950
is a tool that generates background

00:02:25,130 --> 00:02:29,360
gradients server side so that there's a

00:02:27,950 --> 00:02:32,480
smoother transition where the images

00:02:29,360 --> 00:02:36,800
finally load and if you want to animate

00:02:32,480 --> 00:02:38,080
them it's not quite so great the image

00:02:36,800 --> 00:02:40,460
and specification actually says that

00:02:38,080 --> 00:02:43,280
background images can't be animated at

00:02:40,460 --> 00:02:46,190
all the future specs that say they sort

00:02:43,280 --> 00:02:48,770
of kin and the browsers completely

00:02:46,190 --> 00:02:51,950
disagree on how to do it chrome and

00:02:48,770 --> 00:02:55,250
safari allow you to crossfade two images

00:02:51,950 --> 00:02:56,920
or de spades one into the other IE and

00:02:55,250 --> 00:03:00,140
edge don't do that at all but they do

00:02:56,920 --> 00:03:02,750
handily have the ability to transition

00:03:00,140 --> 00:03:04,790
individual gradient color stops into

00:03:02,750 --> 00:03:08,660
each other smooth color animations and

00:03:04,790 --> 00:03:10,550
Firefox doesn't do anything at all and

00:03:08,660 --> 00:03:12,830
one of the future specs also defines a

00:03:10,550 --> 00:03:15,560
new type of gradient which is conic

00:03:12,830 --> 00:03:17,270
gradient iconic gradients are not about

00:03:15,560 --> 00:03:19,760
since singer-songwriters from the 90s

00:03:17,270 --> 00:03:21,860
but they are in fact a gradient that

00:03:19,760 --> 00:03:24,650
actually goes around a point rather than

00:03:21,860 --> 00:03:27,680
being in a straight line so first

00:03:24,650 --> 00:03:32,090
proposed by levar o at CSS conquered us

00:03:27,680 --> 00:03:34,160
last year she worked with the spec

00:03:32,090 --> 00:03:38,420
waters of the w3c to get this into the

00:03:34,160 --> 00:03:40,750
next level of image specs and has also

00:03:38,420 --> 00:03:44,900
produced a polyfill for us to use and

00:03:40,750 --> 00:03:46,820
experiment with today now if we want to

00:03:44,900 --> 00:03:49,160
get this in browsers properly the best

00:03:46,820 --> 00:03:51,110
ways to actually use the polyfill use it

00:03:49,160 --> 00:03:53,840
in projects show the browser vendors

00:03:51,110 --> 00:03:55,220
that is useful and drum up demand so for

00:03:53,840 --> 00:03:57,770
example you could actually use it for

00:03:55,220 --> 00:04:00,620
the middle image which is like a color

00:03:57,770 --> 00:04:03,260
pick up or you can use a pie chart which

00:04:00,620 --> 00:04:04,310
willie as original use case or in fact

00:04:03,260 --> 00:04:08,110
you could use it for the background of

00:04:04,310 --> 00:04:12,230
this slide which brings us into Axew

00:04:08,110 --> 00:04:14,750
background image layering now multiple

00:04:12,230 --> 00:04:16,489
background images can be combined on

00:04:14,750 --> 00:04:20,870
element this how all of these gradient

00:04:16,489 --> 00:04:23,390
tricks work but it's probably good to go

00:04:20,870 --> 00:04:24,950
into the just the tricks of how the

00:04:23,390 --> 00:04:27,020
browsers use it

00:04:24,950 --> 00:04:29,200
so you can only ever have one background

00:04:27,020 --> 00:04:31,310
color per element but you can have a

00:04:29,200 --> 00:04:34,400
practically infinite number of images

00:04:31,310 --> 00:04:35,720
and if you think about a real painter

00:04:34,400 --> 00:04:37,340
with a canvas they will paint the

00:04:35,720 --> 00:04:39,230
background color first and then they'll

00:04:37,340 --> 00:04:41,540
progressively draw more and more images

00:04:39,230 --> 00:04:44,720
on top and this is how browsers render

00:04:41,540 --> 00:04:47,270
multiple images but in CSS you actually

00:04:44,720 --> 00:04:49,280
define the images from the top first so

00:04:47,270 --> 00:04:51,890
if we split this one out we have my

00:04:49,280 --> 00:04:55,010
wonderfully hand-drawn image here which

00:04:51,890 --> 00:04:56,780
is the PNG then a linear gradient a

00:04:55,010 --> 00:05:00,110
radial gradient and finally the

00:04:56,780 --> 00:05:02,500
background color the browser then

00:05:00,110 --> 00:05:07,370
actually just squishes them together and

00:05:02,500 --> 00:05:10,400
combine them all into one picture a lot

00:05:07,370 --> 00:05:13,220
of those gradient gallery tricks also

00:05:10,400 --> 00:05:15,530
use different positions and sizes on the

00:05:13,220 --> 00:05:17,270
images so for example here we actually

00:05:15,530 --> 00:05:19,370
have to not just taken out of the

00:05:17,270 --> 00:05:22,220
corners you can't do that with just one

00:05:19,370 --> 00:05:24,530
gradient alone and you can't just layer

00:05:22,220 --> 00:05:26,960
2 full-size gradients because so kind of

00:05:24,530 --> 00:05:29,150
cancel each other out so the way to do

00:05:26,960 --> 00:05:32,420
that is to actually have two differently

00:05:29,150 --> 00:05:35,690
sized images 60-percent widths here and

00:05:32,420 --> 00:05:37,460
just position in different places so the

00:05:35,690 --> 00:05:43,640
browser then combines them all together

00:05:37,460 --> 00:05:47,000
and produces a smooth image now we start

00:05:43,640 --> 00:05:50,600
to get into a bit more of the technical

00:05:47,000 --> 00:05:52,670
and mathematical code linear gradient

00:05:50,600 --> 00:05:56,270
angles are ones that have caught people

00:05:52,670 --> 00:05:59,690
out before about exactly where the

00:05:56,270 --> 00:06:02,840
gradient color stops are defined and I

00:05:59,690 --> 00:06:05,180
would go into this except one this is a

00:06:02,840 --> 00:06:07,660
short talk and two I can't possibly do a

00:06:05,180 --> 00:06:10,490
better job than Patrick Brazeau did

00:06:07,660 --> 00:06:12,680
Patrick is a developer on the Firefox

00:06:10,490 --> 00:06:14,240
dev tools team and he has written the

00:06:12,680 --> 00:06:18,850
most comprehensive article I've ever

00:06:14,240 --> 00:06:21,080
seen about how linear gradients work i

00:06:18,850 --> 00:06:24,080
will send around links to this as well

00:06:21,080 --> 00:06:27,020
after the talk because i can't do better

00:06:24,080 --> 00:06:30,530
than this but what he also put out was a

00:06:27,020 --> 00:06:34,100
little tool that allows you to test out

00:06:30,530 --> 00:06:36,020
gradients and see the internal

00:06:34,100 --> 00:06:39,520
calculations of how a browser would

00:06:36,020 --> 00:06:39,520
actually work out how to render it

00:06:40,810 --> 00:06:47,600
okay so color calculations this is

00:06:45,670 --> 00:06:49,940
actually what spurred me to write the

00:06:47,600 --> 00:06:54,200
talk was trying to work out how browsers

00:06:49,940 --> 00:06:56,270
rendell the colors to the screen if we

00:06:54,200 --> 00:06:58,550
start with a basic example we've got a

00:06:56,270 --> 00:07:01,700
gradient from a bluish to a reddish

00:06:58,550 --> 00:07:05,450
color and these are just two color stops

00:07:01,700 --> 00:07:08,480
defined in hsl syntax and they're pretty

00:07:05,450 --> 00:07:10,460
similar sin taxes and a lot of people

00:07:08,480 --> 00:07:13,640
have expected browser to then to say

00:07:10,460 --> 00:07:15,590
alright well I'll take the 220 and take

00:07:13,640 --> 00:07:17,510
it down to zero and I'll take the fifty

00:07:15,590 --> 00:07:20,180
percent lightness and take it to sixty

00:07:17,510 --> 00:07:21,710
percent but the specification actually

00:07:20,180 --> 00:07:24,340
says the very first thing that should do

00:07:21,710 --> 00:07:28,850
is convert everything to rgba and then

00:07:24,340 --> 00:07:30,740
interpolate those numbers and the reason

00:07:28,850 --> 00:07:32,930
is because colors can be defined in any

00:07:30,740 --> 00:07:34,580
number of different in taxes and so

00:07:32,930 --> 00:07:37,490
converting them all the RGBA gives

00:07:34,580 --> 00:07:40,340
consistency for everything so for

00:07:37,490 --> 00:07:42,740
example here fifty percent the red green

00:07:40,340 --> 00:07:47,260
blue and alpha channels are all exactly

00:07:42,740 --> 00:07:47,260
halfway between the start and end values

00:07:51,340 --> 00:08:01,520
this is this is all well and good until

00:07:56,680 --> 00:08:02,810
transparency gets involved a lot of

00:08:01,520 --> 00:08:05,450
developers in the early days of

00:08:02,810 --> 00:08:07,910
gradients would transition to

00:08:05,450 --> 00:08:11,660
transparent and have this nice smooth

00:08:07,910 --> 00:08:12,800
fade out except that it actually kind of

00:08:11,660 --> 00:08:14,060
comes across on the screen there but the

00:08:12,800 --> 00:08:17,120
one on the left is a little bit darker

00:08:14,060 --> 00:08:19,460
than one on the right and the reason is

00:08:17,120 --> 00:08:22,210
that transparent is a keyword for

00:08:19,460 --> 00:08:26,900
specifically fully transparent black

00:08:22,210 --> 00:08:28,670
rgba 0000 and as you're fading out the

00:08:26,900 --> 00:08:32,750
gradient you're also transitioning all

00:08:28,670 --> 00:08:34,790
the colors to black the spec then said

00:08:32,750 --> 00:08:37,130
this isn't quite what people actually

00:08:34,790 --> 00:08:39,650
wanted so we'll use a trick called

00:08:37,130 --> 00:08:43,520
premultiplied alpha to breeze it a

00:08:39,650 --> 00:08:46,400
slightly better result most of the

00:08:43,520 --> 00:08:48,010
browsers today use this Safari is the

00:08:46,400 --> 00:08:51,130
notable exception

00:08:48,010 --> 00:08:53,800
canvas and SVG also still use the old

00:08:51,130 --> 00:08:57,340
method but they have much lower level

00:08:53,800 --> 00:08:59,140
April api's for manipulating color the

00:08:57,340 --> 00:09:01,270
best way to work around this is to

00:08:59,140 --> 00:09:04,360
actually define two different color

00:09:01,270 --> 00:09:07,270
stops at exactly at the same point one

00:09:04,360 --> 00:09:09,730
of which is so for example here from red

00:09:07,270 --> 00:09:11,290
to a fully transparent red then

00:09:09,730 --> 00:09:15,880
instantly switch to a fully transparent

00:09:11,290 --> 00:09:17,290
blue and then go to normal blue so what

00:09:15,880 --> 00:09:19,720
the hell is pre multiplied out for

00:09:17,290 --> 00:09:22,270
anyway well after a bit of digging

00:09:19,720 --> 00:09:24,010
around you finally find the CSS

00:09:22,270 --> 00:09:25,650
compositing and blending level one spec

00:09:24,010 --> 00:09:27,790
which gives you this very simple

00:09:25,650 --> 00:09:33,520
easy-to-understand formula and now

00:09:27,790 --> 00:09:35,530
everyone knows what it is okay so we'll

00:09:33,520 --> 00:09:36,880
take a diversion into how color blending

00:09:35,530 --> 00:09:39,370
actually works to try and understand

00:09:36,880 --> 00:09:42,910
what they're talking about so up here

00:09:39,370 --> 00:09:46,690
I've defined a partially transparent red

00:09:42,910 --> 00:09:49,000
square on a white square but if I take a

00:09:46,690 --> 00:09:50,920
color picker and I select that square

00:09:49,000 --> 00:09:52,510
it's not going to tell me that it's a

00:09:50,920 --> 00:09:55,390
partially transparent red it's going to

00:09:52,510 --> 00:09:58,960
give me some other value and to work out

00:09:55,390 --> 00:10:00,280
what that value is we take the original

00:09:58,960 --> 00:10:02,650
color the source color that we're trying

00:10:00,280 --> 00:10:03,880
to draw and we take the destination

00:10:02,650 --> 00:10:06,820
which is the background you're drawing

00:10:03,880 --> 00:10:08,710
it onto the first thing we do is we

00:10:06,820 --> 00:10:10,990
multiply every color channel in the

00:10:08,710 --> 00:10:13,750
source by its alpha so in this case we

00:10:10,990 --> 00:10:16,780
take sixty percent of the red then we

00:10:13,750 --> 00:10:19,150
take the inverse of the alpha so forty

00:10:16,780 --> 00:10:21,610
percent because 101 and sixty is 40 and

00:10:19,150 --> 00:10:23,410
we apply that to the destination so we

00:10:21,610 --> 00:10:25,510
take forty percent of every channel of

00:10:23,410 --> 00:10:27,580
the destination only to add them

00:10:25,510 --> 00:10:29,530
together and the final value that a

00:10:27,580 --> 00:10:34,770
color picker will tell you is this is

00:10:29,530 --> 00:10:37,600
RGB 255 102 102 this is the basis of

00:10:34,770 --> 00:10:42,070
every single bit of color that you see

00:10:37,600 --> 00:10:45,640
drawn to a screen in a browser so back

00:10:42,070 --> 00:10:48,070
to gradients we have two gradients here

00:10:45,640 --> 00:10:51,820
they are both defined exactly the same

00:10:48,070 --> 00:10:54,040
way the top one is the old style that

00:10:51,820 --> 00:10:57,550
Safari will feel render and the bottom

00:10:54,040 --> 00:11:00,160
one is with premultiplied alpha the

00:10:57,550 --> 00:11:01,600
reason the top one happens is that if we

00:11:00,160 --> 00:11:05,709
graph out

00:11:01,600 --> 00:11:08,350
use of red and alpha all the way along

00:11:05,709 --> 00:11:11,800
this gradient they're both going from

00:11:08,350 --> 00:11:15,730
full to none but at every point along

00:11:11,800 --> 00:11:19,600
this gradient the browser is also trying

00:11:15,730 --> 00:11:22,420
to multiply the red by the Alpha and so

00:11:19,600 --> 00:11:25,029
it's the reddit thing reduced once along

00:11:22,420 --> 00:11:26,889
the gradient and then reduced again when

00:11:25,029 --> 00:11:28,630
it's multiplied if you have the two of

00:11:26,889 --> 00:11:31,360
them together you actually get this kind

00:11:28,630 --> 00:11:33,850
of curve in the color values it's no

00:11:31,360 --> 00:11:36,690
longer actually a linear gradient we

00:11:33,850 --> 00:11:39,310
then add in the amount of background red

00:11:36,690 --> 00:11:41,019
again you get a kind of depth and this

00:11:39,310 --> 00:11:44,380
is actually what produces the darkness

00:11:41,019 --> 00:11:46,750
in the middle of the gradient layer so

00:11:44,380 --> 00:11:51,670
premultiplied alpha is the answer but

00:11:46,750 --> 00:11:52,540
what is it it's fat not that that still

00:11:51,670 --> 00:11:54,190
might actually particularly

00:11:52,540 --> 00:11:55,540
understandable the best way I've found

00:11:54,190 --> 00:11:57,339
to understand it was actually to just

00:11:55,540 --> 00:11:59,470
imagine a conversation between the

00:11:57,339 --> 00:12:02,709
browser and the graphics processing unit

00:11:59,470 --> 00:12:04,959
when the browser says ok i'm going to

00:12:02,709 --> 00:12:07,360
multiply each of color channels by the

00:12:04,959 --> 00:12:12,819
Alpha first for every one of these color

00:12:07,360 --> 00:12:15,160
stops now GPU I want you to draw me the

00:12:12,819 --> 00:12:18,370
color of this particular point save

00:12:15,160 --> 00:12:20,709
forty percent here I'm idibia GP users

00:12:18,370 --> 00:12:22,720
ok so what's the value of the red here

00:12:20,709 --> 00:12:24,220
look is just shorthand for linear

00:12:22,720 --> 00:12:27,430
interpolations because no one likes

00:12:24,220 --> 00:12:28,990
reading or writing that and the browser

00:12:27,430 --> 00:12:30,699
says alright well this is the value but

00:12:28,990 --> 00:12:34,689
don't touch it don't multiply it by the

00:12:30,699 --> 00:12:37,120
Alpha at all please TPU goes alright

00:12:34,689 --> 00:12:39,490
alright but I still need the outside to

00:12:37,120 --> 00:12:42,370
calculate the background color other

00:12:39,490 --> 00:12:43,899
browser gives it and the GPS is alright

00:12:42,370 --> 00:12:46,899
so I'll just take your original

00:12:43,899 --> 00:12:48,579
calculated value and the value of the

00:12:46,899 --> 00:12:51,639
background that I've worked out and then

00:12:48,579 --> 00:12:53,949
give you the nice value here which is

00:12:51,639 --> 00:12:56,500
what you actually want if we look back

00:12:53,949 --> 00:12:59,319
at the graph you apply premultiplied

00:12:56,500 --> 00:13:02,939
alpha to the color channels and you get

00:12:59,319 --> 00:13:06,310
the exact same linear slope of value

00:13:02,939 --> 00:13:08,290
which is effectively when you add in the

00:13:06,310 --> 00:13:09,610
red of the background you got it filled

00:13:08,290 --> 00:13:12,670
the entire way and when you think about

00:13:09,610 --> 00:13:13,450
this is red too transparent on a white

00:13:12,670 --> 00:13:15,490
background

00:13:13,450 --> 00:13:18,310
you're actually does making a gradient

00:13:15,490 --> 00:13:21,220
from red to white and this is what

00:13:18,310 --> 00:13:22,420
premultiplied alpha gives us the really

00:13:21,220 --> 00:13:24,430
important thing that took me a while to

00:13:22,420 --> 00:13:26,500
understand was if the value of the

00:13:24,430 --> 00:13:31,120
background you're drawing it on that

00:13:26,500 --> 00:13:32,800
makes all the difference if you don't

00:13:31,120 --> 00:13:36,790
actually want to try and calculate this

00:13:32,800 --> 00:13:39,700
yourself because it's horrible I have

00:13:36,790 --> 00:13:42,580
written a plug-in for post CSS which

00:13:39,700 --> 00:13:44,020
will handle all of this for you it will

00:13:42,580 --> 00:13:46,650
take any of your gradients that you've

00:13:44,020 --> 00:13:49,330
defined with the transparent keyword and

00:13:46,650 --> 00:13:51,250
will rewrite the color stops and add in

00:13:49,330 --> 00:13:54,280
extra color stops in order to always

00:13:51,250 --> 00:13:57,370
have that smooth transition if you've

00:13:54,280 --> 00:14:00,400
got values that have an alpha somewhere

00:13:57,370 --> 00:14:03,580
between zero and one can't really help

00:14:00,400 --> 00:14:08,650
because fari will just screw those up

00:14:03,580 --> 00:14:10,710
completely okay that's that's a fair

00:14:08,650 --> 00:14:15,250
amount of maps and it's let me afternoon

00:14:10,710 --> 00:14:17,590
any big circus has the final act the

00:14:15,250 --> 00:14:19,600
grand finale the one that really shows

00:14:17,590 --> 00:14:23,530
off and is not actually particularly

00:14:19,600 --> 00:14:25,900
practical so keeping in mind that this

00:14:23,530 --> 00:14:27,460
is a perfect use case for SVG and it's a

00:14:25,900 --> 00:14:30,010
horrible abuse of gradients and you

00:14:27,460 --> 00:14:33,310
should never do this in production if

00:14:30,010 --> 00:14:35,560
you perhaps wrote some sort of generator

00:14:33,310 --> 00:14:38,170
that took an image and broke it down

00:14:35,560 --> 00:14:40,450
into a whole bunch of different linear

00:14:38,170 --> 00:14:44,530
gradients different sizes and colors and

00:14:40,450 --> 00:14:47,380
positions when you ask the browser to

00:14:44,530 --> 00:14:50,080
carefully stack them together and bring

00:14:47,380 --> 00:14:54,720
them up you can produce some very

00:14:50,080 --> 00:14:54,720

YouTube URL: https://www.youtube.com/watch?v=a8WfE6WDrto


