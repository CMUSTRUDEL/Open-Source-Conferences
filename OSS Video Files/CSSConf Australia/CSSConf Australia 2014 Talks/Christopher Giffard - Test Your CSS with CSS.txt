Title: Christopher Giffard - Test Your CSS with CSS
Publication date: 2014-04-29
Playlist: CSSConf Australia 2014 Talks
Description: 
	Christopher Giffard's CSSConf Australia 2014 presentation Test Your CSS with CSS.

http://2014.cssconf.com.au/
http://twitter.com/cgiffard
http://www.cgiffard.com/
Captions: 
	00:00:00,469 --> 00:00:06,990
so I don't know how I'm going to follow

00:00:02,429 --> 00:00:16,460
that that was intense I'm gonna be

00:00:06,990 --> 00:00:20,100
telling a story about a crisis averted

00:00:16,460 --> 00:00:23,310
I'll talk about how CSS helped my

00:00:20,100 --> 00:00:25,140
previous employer avert that crisis and

00:00:23,310 --> 00:00:27,060
I'm going to tell you why you should

00:00:25,140 --> 00:00:30,990
keep an open mind about your tools in

00:00:27,060 --> 00:00:34,670
your tool set so cast your mind back to

00:00:30,990 --> 00:00:36,540
the dim dusky days of mid-2012 I

00:00:34,670 --> 00:00:38,940
remember that everyone was getting

00:00:36,540 --> 00:00:41,879
really excited about CSS shaders at that

00:00:38,940 --> 00:00:43,110
time unfortunately that doesn't seem to

00:00:41,879 --> 00:00:46,230
be such a big thing on the agenda

00:00:43,110 --> 00:00:50,070
anymore WebGL and especially web RTC was

00:00:46,230 --> 00:00:51,300
really big who's the exciting year I was

00:00:50,070 --> 00:00:53,969
working for a large government

00:00:51,300 --> 00:00:55,559
department really big australian federal

00:00:53,969 --> 00:00:57,719
government department and we were just

00:00:55,559 --> 00:01:02,370
putting the finishing touches on a brand

00:00:57,719 --> 00:01:05,610
new website we had a this is knit that

00:01:02,370 --> 00:01:09,409
identity has been protected too as I

00:01:05,610 --> 00:01:12,299
changed to protect the innocent here as

00:01:09,409 --> 00:01:14,010
government we really need to meet

00:01:12,299 --> 00:01:15,150
accessibility talk so we're very excited

00:01:14,010 --> 00:01:17,939
because we were going to be one of the

00:01:15,150 --> 00:01:19,170
first responsive websites we were

00:01:17,939 --> 00:01:21,750
actually going to hit a lot of the

00:01:19,170 --> 00:01:23,729
accessibility Tigers were mandated and

00:01:21,750 --> 00:01:26,640
we're losing completely open source

00:01:23,729 --> 00:01:28,740
stack it was a lot of really big changes

00:01:26,640 --> 00:01:32,400
from this monolithic kind of Microsoft

00:01:28,740 --> 00:01:36,030
found enterprise to this really small

00:01:32,400 --> 00:01:40,829
team working with this new technology

00:01:36,030 --> 00:01:42,990
and and it was a very very big deal the

00:01:40,829 --> 00:01:44,640
most important thing is to take out of

00:01:42,990 --> 00:01:46,979
that government mandates accessibility

00:01:44,640 --> 00:01:48,960
we had a legislated obligation to make

00:01:46,979 --> 00:01:51,030
sure that we met whole variety of

00:01:48,960 --> 00:01:53,189
different technical and bureaucratic

00:01:51,030 --> 00:01:57,689
requirements we had to do a huge amount

00:01:53,189 --> 00:01:59,899
of work to meet that obligation so back

00:01:57,689 --> 00:02:03,299
then I was working up with video and

00:01:59,899 --> 00:02:05,340
most people put a video up on on their

00:02:03,299 --> 00:02:07,680
page or in better a thing of YouTube or

00:02:05,340 --> 00:02:10,319
whatever we can't do that we had to

00:02:07,680 --> 00:02:11,940
actually there were at the time there

00:02:10,319 --> 00:02:13,860
was no standard around it so I had to

00:02:11,940 --> 00:02:18,060
implement the latent web

00:02:13,860 --> 00:02:22,950
vtt standard implement the first time

00:02:18,060 --> 00:02:25,470
text tracks its specification keep that

00:02:22,950 --> 00:02:27,360
going work with the w3 to actually get

00:02:25,470 --> 00:02:28,830
that there that's how serious the

00:02:27,360 --> 00:02:30,570
accessibility requirement was that's

00:02:28,830 --> 00:02:33,740
what we needed to get video on our

00:02:30,570 --> 00:02:36,740
website that's how far we had to take it

00:02:33,740 --> 00:02:40,110
so we went over this website with a

00:02:36,740 --> 00:02:41,760
really fine toothcomb measuring

00:02:40,110 --> 00:02:46,320
everything looking at everything from

00:02:41,760 --> 00:02:48,560
the typography in the design the marker

00:02:46,320 --> 00:02:50,940
the quality of what was I output

00:02:48,560 --> 00:02:53,670
everything had to be perfect to ensure

00:02:50,940 --> 00:02:57,709
that we met those targets and at least

00:02:53,670 --> 00:03:00,630
as far as we measured we could say with

00:02:57,709 --> 00:03:03,630
quite definite certainty that the

00:03:00,630 --> 00:03:04,709
website hit Rick egg to double-a which

00:03:03,630 --> 00:03:08,940
is the web content accessibility

00:03:04,709 --> 00:03:12,630
guidelines basically a collection of

00:03:08,940 --> 00:03:15,630
targets that you can demonstrate a

00:03:12,630 --> 00:03:20,000
certain level of compliance against and

00:03:15,630 --> 00:03:24,209
we most likely very greatly exceeded it

00:03:20,000 --> 00:03:27,390
problem was the old website didn't look

00:03:24,209 --> 00:03:29,959
quite as bad but a front end marker had

00:03:27,390 --> 00:03:31,980
years and years of legacy it had been

00:03:29,959 --> 00:03:34,140
imported through a whole variety of

00:03:31,980 --> 00:03:37,560
different CMS systems it had been left

00:03:34,140 --> 00:03:39,330
to ossify everyone was editing it there

00:03:37,560 --> 00:03:42,299
was no consistent standard about how

00:03:39,330 --> 00:03:43,590
that worked the thing is we needed all

00:03:42,299 --> 00:03:46,380
of that content that was information

00:03:43,590 --> 00:03:48,480
that people actually had to access and

00:03:46,380 --> 00:03:50,040
as a government department we need to

00:03:48,480 --> 00:03:52,380
provide that to people that's another

00:03:50,040 --> 00:03:57,720
one of our legislative obligations to be

00:03:52,380 --> 00:04:00,260
communicating this material so the

00:03:57,720 --> 00:04:02,820
actual process wasn't that hard I

00:04:00,260 --> 00:04:06,959
scripted a little crawler to move all of

00:04:02,820 --> 00:04:08,970
material out and most of the process was

00:04:06,959 --> 00:04:10,709
flying along without a hitch I'd like a

00:04:08,970 --> 00:04:12,810
little bayesian classifier to work out

00:04:10,709 --> 00:04:14,280
which Dom node contained the content and

00:04:12,810 --> 00:04:15,900
looked at the links and the structure

00:04:14,280 --> 00:04:19,019
and everything and that seemed to be

00:04:15,900 --> 00:04:21,780
working but sure enough there was bad

00:04:19,019 --> 00:04:23,789
markup and busted pages and completely

00:04:21,780 --> 00:04:26,600
inaccessible code that was steadily

00:04:23,789 --> 00:04:28,550
making its way into the web website

00:04:26,600 --> 00:04:30,440
erupting everything that we'd worked so

00:04:28,550 --> 00:04:34,100
hard to make sure was really pure and

00:04:30,440 --> 00:04:36,140
and standards compliant and there was

00:04:34,100 --> 00:04:37,580
such a volume of it that really felt

00:04:36,140 --> 00:04:39,050
like everything was stacking up against

00:04:37,580 --> 00:04:40,850
this and you know we just couldn't

00:04:39,050 --> 00:04:44,710
manage all the stuff that was coming in

00:04:40,850 --> 00:04:47,570
or a small team and this was a huge

00:04:44,710 --> 00:04:49,520
editorial workload that we had I mean it

00:04:47,570 --> 00:04:52,690
wasn't really a technical problem so

00:04:49,520 --> 00:04:57,530
much as it was a organizational issue

00:04:52,690 --> 00:05:01,160
that's how big it had become we just had

00:04:57,530 --> 00:05:04,640
no spare hands to actually work on this

00:05:01,160 --> 00:05:08,150
problem so management was freaking out

00:05:04,640 --> 00:05:11,600
about it we had no visibility over what

00:05:08,150 --> 00:05:13,370
how big the problem actually was they

00:05:11,600 --> 00:05:14,900
were talking about potentially delaying

00:05:13,370 --> 00:05:17,690
the entire launch of this new website

00:05:14,900 --> 00:05:19,430
that we had to launch any way to meet

00:05:17,690 --> 00:05:22,250
the excessively do crime because we just

00:05:19,430 --> 00:05:26,260
couldn't know the scale of the problem

00:05:22,250 --> 00:05:33,110
and we really didn't want to delay the

00:05:26,260 --> 00:05:35,270
launch of this thing so what about

00:05:33,110 --> 00:05:38,330
better tools there's got to be something

00:05:35,270 --> 00:05:39,950
out there that can solve this problem we

00:05:38,330 --> 00:05:41,810
started investigating and doing a lot of

00:05:39,950 --> 00:05:44,810
research into what the best solution

00:05:41,810 --> 00:05:47,330
might be for that kind of thing there's

00:05:44,810 --> 00:05:50,810
a whole suite of different accessibility

00:05:47,330 --> 00:05:52,640
testing tools out there unfortunately

00:05:50,810 --> 00:05:54,560
there are some issues with these so they

00:05:52,640 --> 00:05:57,260
don't really crawl that easily we had

00:05:54,560 --> 00:06:01,130
thousands and thousands of documents and

00:05:57,260 --> 00:06:03,170
pages and resources of different types

00:06:01,130 --> 00:06:05,480
and formats that we needed to be able to

00:06:03,170 --> 00:06:07,220
quickly verify so the accessibility

00:06:05,480 --> 00:06:08,930
testing tools would often sit there and

00:06:07,220 --> 00:06:12,260
you know we use them to actually verify

00:06:08,930 --> 00:06:13,940
the individual pages but when you're

00:06:12,260 --> 00:06:15,800
dealing with such a massive scope of

00:06:13,940 --> 00:06:17,780
content they weren't practical in that

00:06:15,800 --> 00:06:20,330
regard and the other thing is we had a

00:06:17,780 --> 00:06:22,010
whole variety of custom rules we created

00:06:20,330 --> 00:06:25,010
different constructs and things that we

00:06:22,010 --> 00:06:26,930
needed to verify we're still with the

00:06:25,010 --> 00:06:30,020
old content working appropriately and

00:06:26,930 --> 00:06:32,090
accessibility testing tools can't manage

00:06:30,020 --> 00:06:34,729
things usually can't manage the things

00:06:32,090 --> 00:06:36,620
that you do yourself so we needed to

00:06:34,729 --> 00:06:38,990
have a whole bunch of our own stuff in

00:06:36,620 --> 00:06:41,530
there and so

00:06:38,990 --> 00:06:45,170
at least we could hit the mark up right

00:06:41,530 --> 00:06:49,160
well unfortunately because we were using

00:06:45,170 --> 00:06:54,680
Drupal and that's a story for another

00:06:49,160 --> 00:06:57,530
day the Drupal filters were cleaning up

00:06:54,680 --> 00:06:59,480
the mark-up that sounds great at first

00:06:57,530 --> 00:07:01,160
but when you realize what it's actually

00:06:59,480 --> 00:07:03,770
doing when it's cleaning the mark-up is

00:07:01,160 --> 00:07:07,760
removing the problematic attributes yep

00:07:03,770 --> 00:07:11,210
cool and it's auto balancing so if i had

00:07:07,760 --> 00:07:13,520
say a list that had not closed the list

00:07:11,210 --> 00:07:15,670
items in that list and they were

00:07:13,520 --> 00:07:18,740
considered nested within one another

00:07:15,670 --> 00:07:20,420
drupal would just go and add clothes LOL

00:07:18,740 --> 00:07:21,980
a closer like close i'll lay at the

00:07:20,420 --> 00:07:23,930
bottom in order to balance the markup

00:07:21,980 --> 00:07:24,550
but it wouldn't actually fix the problem

00:07:23,930 --> 00:07:26,540
which is that they're all

00:07:24,550 --> 00:07:29,780
inappropriately nested inside each other

00:07:26,540 --> 00:07:31,040
and then the mark-up validated wouldn't

00:07:29,780 --> 00:07:33,200
be able to see the problem because it's

00:07:31,040 --> 00:07:34,930
like well this is valid markup it's all

00:07:33,200 --> 00:07:38,750
balanced appropriately it's well-formed

00:07:34,930 --> 00:07:41,920
so the problem was actually disguised by

00:07:38,750 --> 00:07:46,550
our stack which was a really difficult

00:07:41,920 --> 00:07:48,200
situation to be in so at the time I was

00:07:46,550 --> 00:07:50,360
really thinking about CSS we had to

00:07:48,200 --> 00:07:52,010
check the validity of the CSS as well we

00:07:50,360 --> 00:07:54,680
needed to test it and we needed to make

00:07:52,010 --> 00:07:56,690
sure that wasn't causing you know color

00:07:54,680 --> 00:07:58,940
contrast issues or whatever and I was

00:07:56,690 --> 00:08:00,320
writing a lot of CSS as well because you

00:07:58,940 --> 00:08:01,430
know I'm a web developer and I was

00:08:00,320 --> 00:08:04,270
working on the front end of this website

00:08:01,430 --> 00:08:06,350
so CSS at the time was really on my mind

00:08:04,270 --> 00:08:10,640
and I must be looking at something like

00:08:06,350 --> 00:08:12,470
this when it hit me really simple

00:08:10,640 --> 00:08:17,540
selector this is very elementary stuff

00:08:12,470 --> 00:08:23,840
everyone knows what this is doing but in

00:08:17,540 --> 00:08:27,530
this is a kind of it's almost a perfect

00:08:23,840 --> 00:08:29,990
example of the flexibility of CSS

00:08:27,530 --> 00:08:32,540
because we understand this from the

00:08:29,990 --> 00:08:35,720
context of the browser we know that this

00:08:32,540 --> 00:08:40,070
is setting intro h1 the color of that to

00:08:35,720 --> 00:08:42,880
read but if you flip it around what this

00:08:40,070 --> 00:08:46,970
actually can be is an assertion I'm

00:08:42,880 --> 00:08:49,490
selecting intro h1 and I expect that the

00:08:46,970 --> 00:08:50,450
color is red and when that violated or

00:08:49,490 --> 00:08:52,670
when it doesn't meet with our

00:08:50,450 --> 00:08:54,350
expectations

00:08:52,670 --> 00:08:57,260
then we can throw an error we know

00:08:54,350 --> 00:08:59,960
something's wrong the beautiful thing

00:08:57,260 --> 00:09:02,390
about it is there's no code difference

00:08:59,960 --> 00:09:07,070
between the two of them it's exactly the

00:09:02,390 --> 00:09:09,410
same code so that was pretty much all i

00:09:07,070 --> 00:09:12,740
needed to go ok well let's write a

00:09:09,410 --> 00:09:15,470
custom test framework around CSS as a

00:09:12,740 --> 00:09:18,440
language and the result of that was what

00:09:15,470 --> 00:09:20,390
I call behavior assertion sheets lest

00:09:18,440 --> 00:09:22,910
anyone accused me of abandoning the

00:09:20,390 --> 00:09:25,850
front end stuff for this crazy tool set

00:09:22,910 --> 00:09:27,500
work that's a CSS only speaker if you go

00:09:25,850 --> 00:09:31,010
to the website you can check out how I

00:09:27,500 --> 00:09:33,350
did that this is what it looks like so

00:09:31,010 --> 00:09:35,090
this is the only wall of text you'll see

00:09:33,350 --> 00:09:38,390
in the presentation so you don't freak

00:09:35,090 --> 00:09:42,110
out too much but it's a pure superset of

00:09:38,390 --> 00:09:44,480
CSS it adds some extra syntax and some

00:09:42,110 --> 00:09:46,160
different abstractions on top some of

00:09:44,480 --> 00:09:48,920
the declarations are slightly different

00:09:46,160 --> 00:09:53,120
but it's pure superserver CSS it even

00:09:48,920 --> 00:09:54,980
uses a CSS parser to work at the core of

00:09:53,120 --> 00:09:57,050
the language there are these things

00:09:54,980 --> 00:09:58,550
called assertions and if anyone's

00:09:57,050 --> 00:10:00,230
familiar with testing that's the

00:09:58,550 --> 00:10:04,270
fundamental component of testing is

00:10:00,230 --> 00:10:08,600
assertions in behavior assertion sheets

00:10:04,270 --> 00:10:10,160
an assertion has a subject which is what

00:10:08,600 --> 00:10:12,530
we're looking at here we're looking at

00:10:10,160 --> 00:10:14,510
the stays code and then we have an

00:10:12,530 --> 00:10:16,580
expectation what we want that to be in

00:10:14,510 --> 00:10:21,470
this case we want the status code to be

00:10:16,580 --> 00:10:23,420
200 subject is a property accessor

00:10:21,470 --> 00:10:24,860
instead of an assignment so we're

00:10:23,420 --> 00:10:26,840
getting something out instead of putting

00:10:24,860 --> 00:10:29,990
something in and the expectation is a

00:10:26,840 --> 00:10:32,530
really simple comparison so the

00:10:29,990 --> 00:10:35,120
expectation could be these things that

00:10:32,530 --> 00:10:36,710
you know act a little bit like functions

00:10:35,120 --> 00:10:40,310
if you you know we're looking at

00:10:36,710 --> 00:10:42,820
transform before we want the text to be

00:10:40,310 --> 00:10:45,560
shorter than 10 letters and we wanted to

00:10:42,820 --> 00:10:47,920
not match this regular expression and

00:10:45,560 --> 00:10:51,920
you can put as many of those in a single

00:10:47,920 --> 00:10:54,410
declaration as you like then of course

00:10:51,920 --> 00:10:56,000
you can't have something based on CSS

00:10:54,410 --> 00:10:59,780
without the most fundamental part of CSS

00:10:56,000 --> 00:11:01,400
which is selectors they specify the

00:10:59,780 --> 00:11:03,410
resource that's tested they work exactly

00:11:01,400 --> 00:11:04,850
the same way there's no change in the

00:11:03,410 --> 00:11:06,380
selector language at all you can use it

00:11:04,850 --> 00:11:08,680
all of the css3 so

00:11:06,380 --> 00:11:10,700
left is that you regularly used to

00:11:08,680 --> 00:11:14,150
there's lots of power exposed with

00:11:10,700 --> 00:11:20,510
nesting so a lot of pre processes they

00:11:14,150 --> 00:11:22,490
use nesting to avoid repetition the

00:11:20,510 --> 00:11:26,660
semantic meaning of this is a little bit

00:11:22,490 --> 00:11:29,090
different this execute conditionally the

00:11:26,660 --> 00:11:32,240
tests against the h2 document descriptor

00:11:29,090 --> 00:11:35,960
if there's one or more h1 document

00:11:32,240 --> 00:11:38,600
titles in the document so that gives you

00:11:35,960 --> 00:11:41,240
a lot of flexibility to do conditional

00:11:38,600 --> 00:11:42,860
testing and things like that and then

00:11:41,240 --> 00:11:45,080
wrapping all of that up are these things

00:11:42,860 --> 00:11:47,540
called at rules now these are similar to

00:11:45,080 --> 00:11:50,420
media crews the cool thing is and I

00:11:47,540 --> 00:11:53,090
think its CSS while it's a level 4

00:11:50,420 --> 00:11:55,550
module this is actually coming into CSS

00:11:53,090 --> 00:11:57,410
I did not wasn't involved with that at

00:11:55,550 --> 00:12:00,670
all someone else just thought the same

00:11:57,410 --> 00:12:03,650
thing as me you there's a document

00:12:00,670 --> 00:12:07,100
declaration that lets you say okay what

00:12:03,650 --> 00:12:08,930
when do I want to apply these rules do I

00:12:07,100 --> 00:12:11,720
want to apply these rules in this case

00:12:08,930 --> 00:12:13,460
on a page where the status code is 200

00:12:11,720 --> 00:12:14,720
so I want to test successful pages that

00:12:13,460 --> 00:12:17,480
could easily be four or four if you

00:12:14,720 --> 00:12:19,700
wanted to make sure that your 404 page

00:12:17,480 --> 00:12:22,820
is working properly you could check like

00:12:19,700 --> 00:12:24,530
the title of the page or the URL all of

00:12:22,820 --> 00:12:28,550
that information / is available to you

00:12:24,530 --> 00:12:30,170
this is a node module so if you have no

00:12:28,550 --> 00:12:33,380
it already it's as simple as going NPM

00:12:30,170 --> 00:12:35,030
install bus and we'll put in path and

00:12:33,380 --> 00:12:37,580
then you can use it anywhere if you

00:12:35,030 --> 00:12:40,100
don't have knowed i'm working on a

00:12:37,580 --> 00:12:41,120
Chrome extension and a firefox extension

00:12:40,100 --> 00:12:43,460
so that you can do all of this

00:12:41,120 --> 00:12:44,720
graphically and that's going to help a

00:12:43,460 --> 00:12:49,040
lot of people i think because i don't

00:12:44,720 --> 00:12:50,600
really want to use node at all but nodes

00:12:49,040 --> 00:12:52,730
cool to learn anyway so i recommend that

00:12:50,600 --> 00:12:55,400
you check that up the invocation is as

00:12:52,730 --> 00:12:56,900
simple as this give it a social sheet

00:12:55,400 --> 00:12:59,570
that you've already written and give it

00:12:56,900 --> 00:13:02,120
a URL list of URLs in this case we're

00:12:59,570 --> 00:13:05,000
crawling example calm and we're looking

00:13:02,120 --> 00:13:09,800
at the output of that against this sheet

00:13:05,000 --> 00:13:12,500
that we have there so this is what the

00:13:09,800 --> 00:13:14,090
output format looks like if you've used

00:13:12,500 --> 00:13:16,250
any kind of test framework especially

00:13:14,090 --> 00:13:19,290
like mocker for instance this is going

00:13:16,250 --> 00:13:21,149
to be quite similar I live video of

00:13:19,290 --> 00:13:25,790
rolling a website here and if it's

00:13:21,149 --> 00:13:25,790
playing nothing is playing oops

00:13:48,850 --> 00:13:54,100
so you can see it scanning the surface

00:13:51,950 --> 00:13:56,720
of the website finding resources

00:13:54,100 --> 00:14:00,230
checking each resource against those

00:13:56,720 --> 00:14:01,520
specific tests that were built this is

00:14:00,230 --> 00:14:03,589
really powerful I'm sure you can imagine

00:14:01,520 --> 00:14:06,790
for checking a huge amount of content

00:14:03,589 --> 00:14:12,140
against business specific requirements

00:14:06,790 --> 00:14:14,600
so that basically that was a goal and I

00:14:12,140 --> 00:14:16,520
think we achieved that and then when

00:14:14,600 --> 00:14:19,520
this finishes I think I'm requesting

00:14:16,520 --> 00:14:22,190
about 100 resources here you get an

00:14:19,520 --> 00:14:24,170
output of all of the information that it

00:14:22,190 --> 00:14:26,450
found in the test you can export that to

00:14:24,170 --> 00:14:28,460
a variety of different formats and the

00:14:26,450 --> 00:14:30,200
cool thing is you get a CSS selector

00:14:28,460 --> 00:14:32,210
that it generates to find the thing that

00:14:30,200 --> 00:14:33,560
had the violation so you can dive in

00:14:32,210 --> 00:14:35,690
there and open that in the web inspector

00:14:33,560 --> 00:14:38,270
and go okay there it is exactly right

00:14:35,690 --> 00:14:40,250
there and you can annotate each of these

00:14:38,270 --> 00:14:42,950
so that you can know from a human

00:14:40,250 --> 00:14:46,460
perspective where the problem is nifty

00:14:42,950 --> 00:14:49,130
thing is anybody who knows CSS can start

00:14:46,460 --> 00:14:52,130
writing these tests this is a very light

00:14:49,130 --> 00:14:54,770
abstraction on top of CSS there's maybe

00:14:52,130 --> 00:14:57,020
10 or 15 minutes worth of additional

00:14:54,770 --> 00:15:00,620
things that you need to learn in order

00:14:57,020 --> 00:15:03,310
to actually start working this way the

00:15:00,620 --> 00:15:06,350
CSS can be easily refracted into bass

00:15:03,310 --> 00:15:09,250
because if you've been writing styles

00:15:06,350 --> 00:15:11,600
that are decoupled from your HTML

00:15:09,250 --> 00:15:15,589
everything's relatively general and

00:15:11,600 --> 00:15:17,570
neatly refactor able then your assertion

00:15:15,589 --> 00:15:19,459
sheets will also benefit from that if

00:15:17,570 --> 00:15:21,680
you've got markup that can be easily

00:15:19,459 --> 00:15:26,150
targeted then you can easily target that

00:15:21,680 --> 00:15:28,760
with tests so writing a good web

00:15:26,150 --> 00:15:31,910
front-end makes makes a testable by

00:15:28,760 --> 00:15:34,130
definition because you've written that

00:15:31,910 --> 00:15:36,640
good web front end everything's general

00:15:34,130 --> 00:15:40,130
so your behavior assertion sheets tested

00:15:36,640 --> 00:15:41,750
general and reusable as well you can

00:15:40,130 --> 00:15:44,810
take something that's designed to target

00:15:41,750 --> 00:15:46,610
one module change it slightly and apply

00:15:44,810 --> 00:15:48,200
it somewhere else and if you're smart

00:15:46,610 --> 00:15:50,540
about how you write them you can really

00:15:48,200 --> 00:15:53,150
really reduce the actual surface area

00:15:50,540 --> 00:15:56,480
that you or the complexity of the code

00:15:53,150 --> 00:15:58,399
that you're that you're writing

00:15:56,480 --> 00:16:00,320
and so you can get more than just list

00:15:58,399 --> 00:16:02,029
of failures you can generate really high

00:16:00,320 --> 00:16:03,470
level statistics about this but you

00:16:02,029 --> 00:16:05,600
don't necessarily have to write

00:16:03,470 --> 00:16:08,180
assertions about things that are wrong

00:16:05,600 --> 00:16:09,860
errors you can say well I want general

00:16:08,180 --> 00:16:12,800
information about the reading level of

00:16:09,860 --> 00:16:14,360
this material answer my website I want I

00:16:12,800 --> 00:16:16,279
want to know what the position

00:16:14,360 --> 00:16:18,380
information of all of the H ones are

00:16:16,279 --> 00:16:19,970
half are down the page there that's

00:16:18,380 --> 00:16:22,550
information that you can extract with

00:16:19,970 --> 00:16:25,100
this because you can just write a simple

00:16:22,550 --> 00:16:26,870
test that will pull letter so the most

00:16:25,100 --> 00:16:29,990
fundamental part and the part that

00:16:26,870 --> 00:16:32,779
benefited us the most is we knew where

00:16:29,990 --> 00:16:34,730
we stood the long and short of it is we

00:16:32,779 --> 00:16:37,250
didn't have the resources to fix a lot

00:16:34,730 --> 00:16:39,139
of these problems anyway but we knew

00:16:37,250 --> 00:16:42,589
where they were we could devise a

00:16:39,139 --> 00:16:45,589
strategy around solving them and we

00:16:42,589 --> 00:16:47,269
could educate management and the people

00:16:45,589 --> 00:16:49,279
the stakeholders involved in the project

00:16:47,269 --> 00:16:50,839
we didn't have to delay the project

00:16:49,279 --> 00:16:53,149
which you know for us in government

00:16:50,839 --> 00:16:54,680
would be not just like I two or three

00:16:53,149 --> 00:16:56,870
weeks it'd be like six months a year

00:16:54,680 --> 00:16:58,730
before we could consolidate enough

00:16:56,870 --> 00:17:00,170
people to go on a working group to get

00:16:58,730 --> 00:17:01,959
the steering committee to get the

00:17:00,170 --> 00:17:04,280
working group to organize the

00:17:01,959 --> 00:17:05,990
stakeholder engagement program to know

00:17:04,280 --> 00:17:07,640
that we need to do this and then we go

00:17:05,990 --> 00:17:11,209
back to the working group and get the

00:17:07,640 --> 00:17:14,030
go-ahead etc etc it goes by the line so

00:17:11,209 --> 00:17:16,910
that was really important that saved

00:17:14,030 --> 00:17:20,750
just a lot of time so basically it

00:17:16,910 --> 00:17:23,390
worked we had that visibility I keep

00:17:20,750 --> 00:17:25,699
finding new applications for it recently

00:17:23,390 --> 00:17:28,669
I was involved in my current employer

00:17:25,699 --> 00:17:30,620
refactoring a large application that was

00:17:28,669 --> 00:17:33,620
going to be sitting behind what I think

00:17:30,620 --> 00:17:36,980
it is Australia's most highly trafficked

00:17:33,620 --> 00:17:39,890
website and one of the most highly

00:17:36,980 --> 00:17:43,250
traffic websites in the world we didn't

00:17:39,890 --> 00:17:45,820
want this thing to break we were going

00:17:43,250 --> 00:17:48,380
to be deploying it into production and

00:17:45,820 --> 00:17:51,320
absolutely all of the output markup had

00:17:48,380 --> 00:17:54,110
to be the same so we wrote tests against

00:17:51,320 --> 00:17:55,610
the current application found a few bugs

00:17:54,110 --> 00:17:58,429
in the current application interestingly

00:17:55,610 --> 00:18:00,650
enough and then apply those same tests

00:17:58,429 --> 00:18:02,540
to the refactored application we knew

00:18:00,650 --> 00:18:04,760
and we can certify that the output

00:18:02,540 --> 00:18:06,470
formats were the same before pushing it

00:18:04,760 --> 00:18:08,720
live of course we have you know other

00:18:06,470 --> 00:18:10,020
testing frameworks and things operating

00:18:08,720 --> 00:18:12,290
in parallel to this but they

00:18:10,020 --> 00:18:14,910
gives us that that kind of client facing

00:18:12,290 --> 00:18:18,030
overview that we needed to be absolutely

00:18:14,910 --> 00:18:21,150
sure so what are the applications of

00:18:18,030 --> 00:18:23,550
this integration testing verifying the

00:18:21,150 --> 00:18:26,070
output from integration tests you can

00:18:23,550 --> 00:18:27,510
plug base into your CI system so you

00:18:26,070 --> 00:18:29,940
know when you've introduced a bug or

00:18:27,510 --> 00:18:33,000
broken the output somehow availability

00:18:29,940 --> 00:18:35,790
monitoring you can move behind beyond

00:18:33,000 --> 00:18:37,800
things like you know if it's a 503 send

00:18:35,790 --> 00:18:39,540
me an email blah blah blah there are

00:18:37,800 --> 00:18:41,010
things that would affect the

00:18:39,540 --> 00:18:45,270
availability of an application or

00:18:41,010 --> 00:18:49,020
website beyond just our is it accessible

00:18:45,270 --> 00:18:50,880
via HTTP or not maybe the signup form is

00:18:49,020 --> 00:18:53,190
broken or something it's someone's

00:18:50,880 --> 00:18:55,710
deface the website still returning a 200

00:18:53,190 --> 00:18:57,870
still returning content but it's

00:18:55,710 --> 00:19:00,690
completely inaccessible to users in that

00:18:57,870 --> 00:19:02,460
situation a more sophisticated tests

00:19:00,690 --> 00:19:06,660
that can actually introspect a website

00:19:02,460 --> 00:19:09,810
is useful accessibility compliance is a

00:19:06,660 --> 00:19:12,810
big one you can find all of the common

00:19:09,810 --> 00:19:15,750
pitfalls a poor code or stuff that's

00:19:12,810 --> 00:19:17,640
really really nested or problematic you

00:19:15,750 --> 00:19:20,580
can write your own specific requirements

00:19:17,640 --> 00:19:22,110
which is really fundamental to our you

00:19:20,580 --> 00:19:24,810
know specific issues but that's I think

00:19:22,110 --> 00:19:27,900
going to be matters for a lot of people

00:19:24,810 --> 00:19:33,060
as well and the other thing is you can

00:19:27,900 --> 00:19:35,490
evaluate the accessibility status of

00:19:33,060 --> 00:19:37,530
your entire application or website you

00:19:35,490 --> 00:19:39,060
don't have to just look at one page and

00:19:37,530 --> 00:19:42,350
think I'll well this is a representative

00:19:39,060 --> 00:19:44,430
sample and then reporting all of that

00:19:42,350 --> 00:19:46,970
you can aggregate all of that

00:19:44,430 --> 00:19:50,640
information digest it down into

00:19:46,970 --> 00:19:53,190
something is useful and something can be

00:19:50,640 --> 00:19:55,200
presented in a way that's not like pages

00:19:53,190 --> 00:19:57,570
and pages pages text you can give people

00:19:55,200 --> 00:20:01,020
a high-level overview of okay well we

00:19:57,570 --> 00:20:02,550
have you know 700 pages where images

00:20:01,020 --> 00:20:04,470
with our alt tags were present or

00:20:02,550 --> 00:20:05,850
something like that or the reading level

00:20:04,470 --> 00:20:08,760
of those all tags are too high or they

00:20:05,850 --> 00:20:11,190
were just useless information so you

00:20:08,760 --> 00:20:13,290
can't provide a useful tool if it isn't

00:20:11,190 --> 00:20:15,660
open source and this is a all open

00:20:13,290 --> 00:20:17,040
source you can get it on github and

00:20:15,660 --> 00:20:18,840
there's very comprehensive reference

00:20:17,040 --> 00:20:20,970
guide to the language it drills down

00:20:18,840 --> 00:20:23,240
into every construct and every bit of

00:20:20,970 --> 00:20:26,450
information and it

00:20:23,240 --> 00:20:27,830
as comes with a whole example file full

00:20:26,450 --> 00:20:29,840
of all of the accessibility and

00:20:27,830 --> 00:20:31,130
conformance checks that we were using so

00:20:29,840 --> 00:20:34,250
you can go and have a look at how that

00:20:31,130 --> 00:20:36,440
actually works and tell me if you like

00:20:34,250 --> 00:20:38,179
this or if you really hate it and you

00:20:36,440 --> 00:20:39,500
think this is stupid idea and actually

00:20:38,179 --> 00:20:42,440
get off the stage because I am

00:20:39,500 --> 00:20:45,490
interested to know what the alternative

00:20:42,440 --> 00:20:48,230
ways of thinking about this are so

00:20:45,490 --> 00:20:51,650
that'll be really boring if that were

00:20:48,230 --> 00:20:54,530
all my presentation is about my goal is

00:20:51,650 --> 00:20:58,400
not to get everybody using this although

00:20:54,530 --> 00:21:01,070
that would be cool the message I want to

00:20:58,400 --> 00:21:03,200
leave people with is to think about

00:21:01,070 --> 00:21:06,770
possibilities of the tools that you

00:21:03,200 --> 00:21:10,809
using what can you repurpose what might

00:21:06,770 --> 00:21:10,809
be better applied in a different way

00:21:10,840 --> 00:21:15,650
this ties into pre processes there are

00:21:13,880 --> 00:21:17,510
so many great pre processes available

00:21:15,650 --> 00:21:21,350
now we're kind of experiencing a

00:21:17,510 --> 00:21:24,500
preprocessor Renaissance there's new

00:21:21,350 --> 00:21:26,929
technology and new build tools and all

00:21:24,500 --> 00:21:28,790
this stuff coming out constantly every I

00:21:26,929 --> 00:21:30,710
can't turn on Twitter without saying

00:21:28,790 --> 00:21:33,800
something like that in my timeline every

00:21:30,710 --> 00:21:39,040
day has never been a better time to hack

00:21:33,800 --> 00:21:39,040
CSS to do the things that you want to do

00:21:39,760 --> 00:21:46,309
this is awesome if you haven't heard of

00:21:43,460 --> 00:21:49,070
rework it's an amazing node based

00:21:46,309 --> 00:21:51,610
framework for creating custom pre

00:21:49,070 --> 00:21:53,750
processes and forms a wonderful platform

00:21:51,610 --> 00:21:57,140
writing any kind of software that sits

00:21:53,750 --> 00:21:59,270
on top of CSS I didn't use it for best

00:21:57,140 --> 00:22:01,040
but if it had been around when I was

00:21:59,270 --> 00:22:03,800
writing best I would have used it in a

00:22:01,040 --> 00:22:05,990
heartbeat has a CSS parser it has no

00:22:03,800 --> 00:22:07,670
traversal it has everything that you'd

00:22:05,990 --> 00:22:09,410
need in order to write something on top

00:22:07,670 --> 00:22:11,390
of CSS and you don't have to go in

00:22:09,410 --> 00:22:13,010
really really deep into the you know

00:22:11,390 --> 00:22:17,360
computer science stuff to make it work

00:22:13,010 --> 00:22:19,190
it's quite simple to use so I guess in

00:22:17,360 --> 00:22:21,230
the interest of exploring what's

00:22:19,190 --> 00:22:24,050
possible with CSS I want to give

00:22:21,230 --> 00:22:26,630
everyone a challenge and that is to make

00:22:24,050 --> 00:22:28,640
a new tool or processor or something

00:22:26,630 --> 00:22:31,010
else with CSS that might not just be

00:22:28,640 --> 00:22:32,380
about styling maybe it is about styling

00:22:31,010 --> 00:22:35,130
at the end

00:22:32,380 --> 00:22:38,560
the end result is about sewing but the

00:22:35,130 --> 00:22:42,460
way that it works isn't necessarily just

00:22:38,560 --> 00:22:46,810
in the browser making declarations about

00:22:42,460 --> 00:22:49,150
elements so I've got kind of two ideas

00:22:46,810 --> 00:22:51,460
maybe they're stupid maybe you really

00:22:49,150 --> 00:22:53,140
really hate them that's okay but these

00:22:51,460 --> 00:22:55,510
are just kind of like story starters if

00:22:53,140 --> 00:22:57,070
you will that you can scoff at or you

00:22:55,510 --> 00:22:58,480
can ponder you might think that silly

00:22:57,070 --> 00:23:00,070
you might think they're wonderful that's

00:22:58,480 --> 00:23:02,680
okay i just have just going to throw

00:23:00,070 --> 00:23:04,690
them out there and give people a kind of

00:23:02,680 --> 00:23:06,460
really broad overview about the kind of

00:23:04,690 --> 00:23:10,900
things i'm thinking about that might be

00:23:06,460 --> 00:23:14,980
possible so a one of the most annoying

00:23:10,900 --> 00:23:16,690
things / contentious things about

00:23:14,980 --> 00:23:18,730
writing web application at the moment

00:23:16,690 --> 00:23:20,530
and there's a whole bunch of people with

00:23:18,730 --> 00:23:22,900
really strong opinions on the best way

00:23:20,530 --> 00:23:27,070
to do this is binding data in your

00:23:22,900 --> 00:23:29,820
document to sorry binding data from your

00:23:27,070 --> 00:23:33,400
javascript a side of your application to

00:23:29,820 --> 00:23:34,750
nodes in your document and there's lots

00:23:33,400 --> 00:23:38,110
of different frameworks to do that like

00:23:34,750 --> 00:23:40,140
backbone knockout and angular and now

00:23:38,110 --> 00:23:43,720
polymer everyone's got their own opinion

00:23:40,140 --> 00:23:45,810
but you could actually specify a lot of

00:23:43,720 --> 00:23:50,020
those relationships with a kind of

00:23:45,810 --> 00:23:52,990
mangled CSS syntax it's perfect for

00:23:50,020 --> 00:23:56,260
those level of declarations the way that

00:23:52,990 --> 00:23:58,570
it works targeting a node specifically

00:23:56,260 --> 00:24:02,350
with selector which can be general or it

00:23:58,570 --> 00:24:05,920
can be specific enables you to really

00:24:02,350 --> 00:24:07,540
accurately put information apply

00:24:05,920 --> 00:24:13,000
information may be from a JavaScript

00:24:07,540 --> 00:24:15,190
object into a tie it to dom node so it

00:24:13,000 --> 00:24:16,660
might be that your javascript is still

00:24:15,190 --> 00:24:19,080
handling all of the information but this

00:24:16,660 --> 00:24:23,460
is like a translation between that and

00:24:19,080 --> 00:24:25,690
the dom level of the application itself

00:24:23,460 --> 00:24:28,060
soulard pre-established conventions for

00:24:25,690 --> 00:24:29,200
talking to JavaScript to with CSS so you

00:24:28,060 --> 00:24:31,030
know how the things are going to be

00:24:29,200 --> 00:24:34,930
called in one versus the other which is

00:24:31,030 --> 00:24:40,510
nice or completely left field we've got

00:24:34,930 --> 00:24:46,940
JSON how about CSS o n CSUN

00:24:40,510 --> 00:24:48,860
so JSON has a few flaws like for

00:24:46,940 --> 00:24:51,110
instance here if I wanted to describe

00:24:48,860 --> 00:24:54,230
the keys John and Jane and they were

00:24:51,110 --> 00:24:58,730
both exactly the same I have to specify

00:24:54,230 --> 00:25:01,280
those things twice but with a comma 1

00:24:58,730 --> 00:25:04,990
comma in CSS and specifying another key

00:25:01,280 --> 00:25:08,570
name I can make those two in the one go

00:25:04,990 --> 00:25:11,150
there's an implicit kind of semantic

00:25:08,570 --> 00:25:13,750
method for including external

00:25:11,150 --> 00:25:17,510
information for having multiple values

00:25:13,750 --> 00:25:21,520
different data types for the bottom one

00:25:17,510 --> 00:25:25,250
you could potentially create like a a

00:25:21,520 --> 00:25:28,460
wild-card attribute that enables you to

00:25:25,250 --> 00:25:31,310
go well my object uses dot anything

00:25:28,460 --> 00:25:32,750
invalid will always return this

00:25:31,310 --> 00:25:35,060
information or has that information

00:25:32,750 --> 00:25:38,480
associated with it so there's a lot more

00:25:35,060 --> 00:25:41,960
power that is derived from CSS that

00:25:38,480 --> 00:25:45,440
could be available to you here the

00:25:41,960 --> 00:25:47,840
lesson is CSS is beautiful it has this

00:25:45,440 --> 00:25:49,700
amazing declarative syntax which can be

00:25:47,840 --> 00:25:51,950
just mutated in all these wonderful

00:25:49,700 --> 00:25:54,380
different ways maybe he'll hate that but

00:25:51,950 --> 00:25:57,520
I think this is I opening the number of

00:25:54,380 --> 00:26:00,230
potential potential uses that it has i

00:25:57,520 --> 00:26:01,700
simplify it has really simple passing it

00:26:00,230 --> 00:26:04,760
and that enables all kind of

00:26:01,700 --> 00:26:06,470
introspection and processing and there's

00:26:04,760 --> 00:26:08,510
yeah I'm always thinking of new things

00:26:06,470 --> 00:26:11,300
that you could actually do with this the

00:26:08,510 --> 00:26:14,090
fundamental lesson is re-evaluate and

00:26:11,300 --> 00:26:16,970
explore the toolset that you're already

00:26:14,090 --> 00:26:18,710
using maybe you go off and you'll make

00:26:16,970 --> 00:26:20,810
something that it won't be based on CSS

00:26:18,710 --> 00:26:23,540
that's okay if it's a reimagining of I

00:26:20,810 --> 00:26:25,820
don't know HTML or something else maybe

00:26:23,540 --> 00:26:28,160
it's a new build chain or maybe it's a

00:26:25,820 --> 00:26:33,740
new way of specifying modules on the

00:26:28,160 --> 00:26:36,260
client side all you need to be doing for

00:26:33,740 --> 00:26:38,660
my talk to have succeeded is to thinking

00:26:36,260 --> 00:26:42,010
think about new ways that you can

00:26:38,660 --> 00:26:44,960
explore what you're already using now I

00:26:42,010 --> 00:26:47,680
don't pretend to be an expert at this in

00:26:44,960 --> 00:26:51,650
fact you know I'm just starting out but

00:26:47,680 --> 00:26:53,299
building my own tools help me learn most

00:26:51,650 --> 00:26:56,179
of what I know about web devel

00:26:53,299 --> 00:26:58,730
today I think that's the most important

00:26:56,179 --> 00:27:03,730
thing that I can impress upon people it

00:26:58,730 --> 00:27:06,830
was a hugely useful learning experience

00:27:03,730 --> 00:27:09,110
again you can find behavior assertion

00:27:06,830 --> 00:27:10,730
sheets at best at sea github com let me

00:27:09,110 --> 00:27:17,200
know if you love or hate it whether he

00:27:10,730 --> 00:27:17,200

YouTube URL: https://www.youtube.com/watch?v=G4UJnHM8NNs


