Title: Jason O'Neil - 50,000 lines of spaghetti code and how to unravel it
Publication date: 2018-04-11
Playlist: Decompress AU 2018
Description: 
	To our wonderful users the web-app looked fine. It had a nice UI, a tonne of useful features, and mostly seemed to work. But our team of two engineers knew the truth - the app was a mess. Bug fixes that should be simple eluded us. Features that should have taken 2 weeks took 2 months. And users started telling us the app was crashing their browser (it turns out we were leaking memory and the tab was using over 2GB!). This talk shares the story of how I joined a start-up that in its 3 short years had already accumulated a tonne of technical debt - and how my fellow engineer and I took a 50,000 line code base of unstructured jQuery, untyped Angular, and a bunch of scary Grunt tasks, and turned it into a well structured React App, using Webpack to handle our assets and split our bundle, MobX to simplify our page interactions, Flow to add type safety to our code piece by piece, and Jest to test it all. And also how we dealt with those nasty memory leaks using Chrome dev tools so the app stopped crashing. Just as importantly - I’ll share the secrets of how we convinced the non-technical management team that this massive investment was worth it, and had them excited about paying down technical debt. If you have a codebase you’re ashamed to let other engineers look at, if you’re looking at a code-cleanup that feels like it’ll be an insurmountable task, if you are sick of dealing with code that has names like “AbstractModuleDataStrategy” that don’t mean anything, and maybe don’t even do anything, and you’re not even sure anymore, then this is the talk for you. We will map a path out of the spaghetti. Or if you have it all together and always write beautiful, maintainable, well structured code and would like to come and laugh at me and my horror stories, this may also be the talk for you.
Captions: 
	00:00:09,610 --> 00:00:14,730
[Applause]

00:00:12,389 --> 00:00:17,340
Hey

00:00:14,730 --> 00:00:21,060
so I do feel really lucky to be here and

00:00:17,340 --> 00:00:22,770
sharing I'm from Perth and so getting to

00:00:21,060 --> 00:00:24,060
fly over and be back in Melbourne it's

00:00:22,770 --> 00:00:28,020
good

00:00:24,060 --> 00:00:30,119
I'm as as was just said I work at Cole

00:00:28,020 --> 00:00:31,950
 but this story isn't about culture

00:00:30,119 --> 00:00:36,270
and this is the story about the last job

00:00:31,950 --> 00:00:39,059
I had which I left in September and it's

00:00:36,270 --> 00:00:41,070
about the story of things that are a

00:00:39,059 --> 00:00:42,960
little bit harder than you realized when

00:00:41,070 --> 00:00:45,059
you first jumped in have you ever seen

00:00:42,960 --> 00:00:47,490
an opportunity that looked like it would

00:00:45,059 --> 00:00:50,430
be a really great opportunity only to

00:00:47,490 --> 00:00:54,110
discover that the reality didn't quite

00:00:50,430 --> 00:00:57,030
match it happens in all areas of life

00:00:54,110 --> 00:01:01,020
sometimes things just don't live up to

00:00:57,030 --> 00:01:04,619
how good they look on the outside this

00:01:01,020 --> 00:01:06,240
was the case in 2016 where I've just had

00:01:04,619 --> 00:01:08,070
a startup that had kind of fallen over

00:01:06,240 --> 00:01:09,930
and I needed a job and I wanted to work

00:01:08,070 --> 00:01:12,060
in the EdTech industry so I was looking

00:01:09,930 --> 00:01:13,710
for places that work with schools and so

00:01:12,060 --> 00:01:16,259
I started meeting with this startup it

00:01:13,710 --> 00:01:18,149
was only five people but they had a

00:01:16,259 --> 00:01:20,340
really innovative product some great

00:01:18,149 --> 00:01:22,619
design I was really impressed by what

00:01:20,340 --> 00:01:26,310
they were trying to do and so I wanted

00:01:22,619 --> 00:01:29,280
to join they interviewed me really quick

00:01:26,310 --> 00:01:31,439
they made an offer they moved fast and I

00:01:29,280 --> 00:01:34,200
was impressed and I thought I was

00:01:31,439 --> 00:01:35,850
joining their front-end team but it

00:01:34,200 --> 00:01:38,399
wasn't until after I joined I found out

00:01:35,850 --> 00:01:38,999
that the one front-end developer had

00:01:38,399 --> 00:01:40,499
just left

00:01:38,999 --> 00:01:44,069
I wasn't joining the front-end team I

00:01:40,499 --> 00:01:47,069
was the front-end team someone had just

00:01:44,069 --> 00:01:50,850
left and left behind 50,000 lines of

00:01:47,069 --> 00:01:53,670
spaghetti code I'm sure some of you can

00:01:50,850 --> 00:01:55,799
relate so I went through this stage

00:01:53,670 --> 00:01:58,259
where I'd started with like oh my gosh

00:01:55,799 --> 00:02:00,299
this product is amazing and then I went

00:01:58,259 --> 00:02:03,079
through the stages of tech debt denial

00:02:00,299 --> 00:02:06,420
so it starts with Big Love hard eyes

00:02:03,079 --> 00:02:08,340
this product is fantastic and then you

00:02:06,420 --> 00:02:10,370
start to explore the codebase you open

00:02:08,340 --> 00:02:12,780
it in your editor and you know I are I

00:02:10,370 --> 00:02:14,700
there's more files here than I realized

00:02:12,780 --> 00:02:17,490
it just keeps on going and then you

00:02:14,700 --> 00:02:20,130
start to try and fix a bug but you're

00:02:17,490 --> 00:02:22,549
not really sure where the code comes

00:02:20,130 --> 00:02:25,379
from or why it's even being called and

00:02:22,549 --> 00:02:27,550
after a while you're pretty sure you fix

00:02:25,379 --> 00:02:30,310
the bug but you ship it and you

00:02:27,550 --> 00:02:32,350
other things and you begin to get

00:02:30,310 --> 00:02:33,880
worried and you know you like I've seen

00:02:32,350 --> 00:02:38,440
this before this is called technical

00:02:33,880 --> 00:02:41,320
debt I'm gonna refactor it but there's

00:02:38,440 --> 00:02:44,680
no test and I try to change just the

00:02:41,320 --> 00:02:45,340
button style but oh my gosh it's it's

00:02:44,680 --> 00:02:47,740
bad

00:02:45,340 --> 00:02:50,310
there's no tests no type checking no

00:02:47,740 --> 00:02:56,410
linting and then the final stage

00:02:50,310 --> 00:02:58,450
acceptance not really we didn't accept

00:02:56,410 --> 00:02:59,830
it me and my fellow developers Stephen

00:02:58,450 --> 00:03:02,470
will determine to turn this ship around

00:02:59,830 --> 00:03:04,000
and so this is a short talk I can't

00:03:02,470 --> 00:03:05,740
cover everything we did but I'm going to

00:03:04,000 --> 00:03:07,420
just try and give some examples of the

00:03:05,740 --> 00:03:08,950
sort of things that you come across in a

00:03:07,420 --> 00:03:11,740
spaghetti code base and how you can

00:03:08,950 --> 00:03:14,500
begin to untangle them and the first one

00:03:11,740 --> 00:03:17,560
is bad names I'm not talking about names

00:03:14,500 --> 00:03:19,450
like John Smith or North West I'm

00:03:17,560 --> 00:03:22,060
talking about naming variables and

00:03:19,450 --> 00:03:24,250
naming classes and functions they say

00:03:22,060 --> 00:03:27,760
programming it's one of the hard things

00:03:24,250 --> 00:03:30,520
is how to name things so we're a product

00:03:27,760 --> 00:03:32,170
for schools and so our data our domain

00:03:30,520 --> 00:03:34,120
model we had schools and in schools

00:03:32,170 --> 00:03:35,950
you've got a bunch of classes and in

00:03:34,120 --> 00:03:38,560
classes you've got a bunch of students

00:03:35,950 --> 00:03:40,660
and each student would have different

00:03:38,560 --> 00:03:42,100
lessons and so the thing about our

00:03:40,660 --> 00:03:43,300
product was different students had

00:03:42,100 --> 00:03:45,190
different lessons which was

00:03:43,300 --> 00:03:47,770
differentiated and really cool that's

00:03:45,190 --> 00:03:50,820
what I loved but how do you think we

00:03:47,770 --> 00:03:52,900
named these things in our code base

00:03:50,820 --> 00:03:54,850
first of all we didn't just have

00:03:52,900 --> 00:03:56,470
students we also had teachers and maybe

00:03:54,850 --> 00:03:59,970
one day we'd have parents so we call

00:03:56,470 --> 00:04:03,670
them users I guess that makes sense then

00:03:59,970 --> 00:04:05,620
we weren't we we can't call stuff a

00:04:03,670 --> 00:04:07,150
class because our back-end was in PHP

00:04:05,620 --> 00:04:08,980
and our front-end was in JavaScript and

00:04:07,150 --> 00:04:11,650
the word class is reserved in both of

00:04:08,980 --> 00:04:14,110
those so what do you call it well I

00:04:11,650 --> 00:04:17,320
guess it's a group it's a group of

00:04:14,110 --> 00:04:18,880
students and then lessons well some

00:04:17,320 --> 00:04:20,830
teachers they might be creating

00:04:18,880 --> 00:04:22,210
assessments as well as lessons and

00:04:20,830 --> 00:04:24,310
there's formation and there's education

00:04:22,210 --> 00:04:25,480
and they're different and let's just go

00:04:24,310 --> 00:04:28,300
something generic we'll call them

00:04:25,480 --> 00:04:29,530
modules and then schools we were mostly

00:04:28,300 --> 00:04:31,750
schools but we had some like

00:04:29,530 --> 00:04:34,810
professional training organizations and

00:04:31,750 --> 00:04:37,360
let's just call it tenets except I don't

00:04:34,810 --> 00:04:38,260
know how to spell tenants so we'll spell

00:04:37,360 --> 00:04:43,300
it wrong

00:04:38,260 --> 00:04:45,760
I kid you not that was the name of it in

00:04:43,300 --> 00:04:48,400
our database table and that led to

00:04:45,760 --> 00:04:50,800
errors like this where you say undefined

00:04:48,400 --> 00:04:55,210
variable tenant because it was expecting

00:04:50,800 --> 00:04:57,280
the double n so all that happens and

00:04:55,210 --> 00:04:59,080
then the question is you go to build a

00:04:57,280 --> 00:05:00,640
new feature like a feature where you

00:04:59,080 --> 00:05:03,640
could split the students in your class

00:05:00,640 --> 00:05:07,900
into groups what do you call a group of

00:05:03,640 --> 00:05:10,240
students when the word group is taken we

00:05:07,900 --> 00:05:13,270
came up with the word division it was

00:05:10,240 --> 00:05:15,850
pretty awful you can see how the names

00:05:13,270 --> 00:05:17,530
that people who use the product we're

00:05:15,850 --> 00:05:19,390
using we're not the names we were using

00:05:17,530 --> 00:05:21,100
and so when you get a bug report come in

00:05:19,390 --> 00:05:22,930
or when you're trying to think about the

00:05:21,100 --> 00:05:24,640
code it just gets confusing you're

00:05:22,930 --> 00:05:26,050
always doing this mental translation in

00:05:24,640 --> 00:05:28,180
your head and it's a sign of spaghetti

00:05:26,050 --> 00:05:30,190
code like if you had a function like

00:05:28,180 --> 00:05:31,840
that group to add student and you're

00:05:30,190 --> 00:05:33,550
adding a student to the group is they're

00:05:31,840 --> 00:05:35,620
adding it to the group within the class

00:05:33,550 --> 00:05:37,630
or to the class I'd have no idea without

00:05:35,620 --> 00:05:39,340
knowing what that variable was and

00:05:37,630 --> 00:05:40,300
without type checking you just don't

00:05:39,340 --> 00:05:42,100
know

00:05:40,300 --> 00:05:44,530
and then to make it worse we also had

00:05:42,100 --> 00:05:50,080
good old object-oriented thinking where

00:05:44,530 --> 00:05:51,790
you just add jargon I guess I don't know

00:05:50,080 --> 00:05:53,110
if any of you have seen this comic my

00:05:51,790 --> 00:05:54,580
friend Steven that I was working with

00:05:53,110 --> 00:05:56,380
sent it to me one day and was like let's

00:05:54,580 --> 00:05:58,540
rename things you know it's not a

00:05:56,380 --> 00:06:01,450
picture it's a living space separation

00:05:58,540 --> 00:06:05,440
decoration it's not a couch it's a multi

00:06:01,450 --> 00:06:08,230
but separator so how do you untangle

00:06:05,440 --> 00:06:10,780
this just avoid jargon in your names use

00:06:08,230 --> 00:06:12,280
the same names same language in your

00:06:10,780 --> 00:06:14,650
code as you would in your product it

00:06:12,280 --> 00:06:16,240
makes communication much easier and if

00:06:14,650 --> 00:06:17,680
you worry about renaming things and

00:06:16,240 --> 00:06:20,190
breaking things use something like

00:06:17,680 --> 00:06:24,010
typescript or flow to give you warnings

00:06:20,190 --> 00:06:27,100
so that's that's one thing the next part

00:06:24,010 --> 00:06:29,230
with scope soup is anyone where here

00:06:27,100 --> 00:06:31,780
being an angular developer you might

00:06:29,230 --> 00:06:33,070
have heard this term scope soup is one

00:06:31,780 --> 00:06:33,610
of the things that made angular really

00:06:33,070 --> 00:06:35,680
hard

00:06:33,610 --> 00:06:37,510
you'd have code like this so if that's a

00:06:35,680 --> 00:06:40,990
bit small to be able to see it's just

00:06:37,510 --> 00:06:43,450
some HTML that takes a user object and a

00:06:40,990 --> 00:06:46,000
company object but the problem was in

00:06:43,450 --> 00:06:47,620
angular you didn't know where the user

00:06:46,000 --> 00:06:48,610
object and company object were coming

00:06:47,620 --> 00:06:50,980
from they might have been passed

00:06:48,610 --> 00:06:52,030
directly into this component or they

00:06:50,980 --> 00:06:53,740
might have come from

00:06:52,030 --> 00:06:55,240
the component above it the one above

00:06:53,740 --> 00:06:56,710
that or from the very top of the page

00:06:55,240 --> 00:06:58,840
they could have come from anywhere and

00:06:56,710 --> 00:07:00,130
so you're like this user object has a

00:06:58,840 --> 00:07:04,060
problem in it where did it come from

00:07:00,130 --> 00:07:05,950
I've got no idea and you go look at the

00:07:04,060 --> 00:07:08,680
code that's there and there's there's no

00:07:05,950 --> 00:07:10,840
hints and so the fix there in angular

00:07:08,680 --> 00:07:12,130
world is to actually isolate your scopes

00:07:10,840 --> 00:07:14,680
and say you're not allowed to touch

00:07:12,130 --> 00:07:16,390
anything that's global instead you can

00:07:14,680 --> 00:07:18,760
only touch stuff that is explicitly

00:07:16,390 --> 00:07:25,480
passed in called company or called user

00:07:18,760 --> 00:07:28,060
that makes it much easier then so you do

00:07:25,480 --> 00:07:29,740
that the if you're using react this is

00:07:28,060 --> 00:07:31,180
just kind of built into the prop types

00:07:29,740 --> 00:07:33,790
or if you're using something like flow

00:07:31,180 --> 00:07:35,260
or typescript you'll be used to this but

00:07:33,790 --> 00:07:37,120
avoiding global scope is really

00:07:35,260 --> 00:07:40,120
important one of the things you might

00:07:37,120 --> 00:07:43,060
notice is this also happens with CSS up

00:07:40,120 --> 00:07:46,660
here we've got user - card and user -

00:07:43,060 --> 00:07:48,280
name as CSS classes we might be using

00:07:46,660 --> 00:07:49,690
those classes in a star shape for this

00:07:48,280 --> 00:07:52,330
section of the code base but there might

00:07:49,690 --> 00:07:53,850
be a user - name class somewhere else in

00:07:52,330 --> 00:07:58,390
the code base and it gets really messy

00:07:53,850 --> 00:08:01,720
so how do you untangle scope scope soup

00:07:58,390 --> 00:08:03,340
use explicit imports and modules and I

00:08:01,720 --> 00:08:05,260
guess I should say prop types there as

00:08:03,340 --> 00:08:07,990
well make it really clear that this

00:08:05,260 --> 00:08:10,030
component expects these things and it

00:08:07,990 --> 00:08:11,860
can't touch anything outside of that and

00:08:10,030 --> 00:08:14,050
so you can just look at your file and

00:08:11,860 --> 00:08:17,260
know exactly where each variable is

00:08:14,050 --> 00:08:19,810
coming from if you're using CSS I really

00:08:17,260 --> 00:08:22,690
encourage you to either use jsn CSS or

00:08:19,810 --> 00:08:24,490
CSS modules where you get proper

00:08:22,690 --> 00:08:25,960
isolation and where you're not leaking

00:08:24,490 --> 00:08:28,210
stuff everywhere but if not that a

00:08:25,960 --> 00:08:30,850
naming convention like BEM is good and

00:08:28,210 --> 00:08:32,650
finally angular one was notorious for

00:08:30,850 --> 00:08:35,620
scope suit if you're still using it

00:08:32,650 --> 00:08:37,659
you've got to start replacing it you do

00:08:35,620 --> 00:08:39,669
it one box at a time you don't just rip

00:08:37,659 --> 00:08:40,990
it all out and replace it at all at once

00:08:39,669 --> 00:08:42,760
whether you're migrating to newer

00:08:40,990 --> 00:08:45,310
versions of angular or to react or to

00:08:42,760 --> 00:08:46,630
view or whatever just replace one square

00:08:45,310 --> 00:08:50,610
at a time and move on

00:08:46,630 --> 00:08:53,710
so the next thing we had was abstract

00:08:50,610 --> 00:08:56,980
abstractions I'm sure some of you would

00:08:53,710 --> 00:08:59,020
have seen stuff like this model is what

00:08:56,980 --> 00:09:00,970
holds it's like the state of your

00:08:59,020 --> 00:09:04,750
application view is what the user sees

00:09:00,970 --> 00:09:07,060
and a controller yeah you have a

00:09:04,750 --> 00:09:09,589
controller

00:09:07,060 --> 00:09:11,089
then other people argue that that's no

00:09:09,589 --> 00:09:14,420
good what you really want is a model

00:09:11,089 --> 00:09:16,130
view viewmodel controller and so we

00:09:14,420 --> 00:09:19,220
started getting files called you know

00:09:16,130 --> 00:09:21,320
use our view model is and that's one

00:09:19,220 --> 00:09:23,600
thing if you used to angular you might

00:09:21,320 --> 00:09:25,130
have seen some of this stuff directives

00:09:23,600 --> 00:09:27,470
and then they were like now directives

00:09:25,130 --> 00:09:29,149
are no good go for components and then

00:09:27,470 --> 00:09:30,950
they've got templates and providers and

00:09:29,149 --> 00:09:32,690
the dependency injection and all this

00:09:30,950 --> 00:09:34,670
kind of stuff if you've come from Java

00:09:32,690 --> 00:09:37,760
world maybe you've accidentally created

00:09:34,670 --> 00:09:40,100
a factory factory controller and then

00:09:37,760 --> 00:09:41,990
you were kind of embarrassed to commit

00:09:40,100 --> 00:09:44,750
that to code so you just renamed it to a

00:09:41,990 --> 00:09:46,310
provider factory controller we hope no

00:09:44,750 --> 00:09:48,589
one notices we didn't actually have that

00:09:46,310 --> 00:09:50,209
in our code base but when we did have

00:09:48,589 --> 00:09:52,910
that I didn't understand was data

00:09:50,209 --> 00:09:56,209
strategies I still have no idea what

00:09:52,910 --> 00:09:59,089
they were here's some code from

00:09:56,209 --> 00:10:01,520
something that was a data strategy and

00:09:59,089 --> 00:10:03,529
as you can see it pulls in our social

00:10:01,520 --> 00:10:06,680
service and then the get activity

00:10:03,529 --> 00:10:08,630
discussion comments calls the social

00:10:06,680 --> 00:10:11,390
service to do exactly that

00:10:08,630 --> 00:10:13,550
save activity discussion comment calls

00:10:11,390 --> 00:10:16,700
the social service to do exactly that

00:10:13,550 --> 00:10:19,880
and update activity discussion comment

00:10:16,700 --> 00:10:23,510
calls the social service to do exactly

00:10:19,880 --> 00:10:25,910
that this abstraction wasn't actually

00:10:23,510 --> 00:10:27,620
helping anyone it was just a layer of

00:10:25,910 --> 00:10:29,089
indirection and you'd go I need to

00:10:27,620 --> 00:10:30,829
follow up the chain I'm trying to figure

00:10:29,089 --> 00:10:32,329
out what's happening and you'd have this

00:10:30,829 --> 00:10:35,450
file sitting in the middle of your stack

00:10:32,329 --> 00:10:36,740
trace being absolutely useless and so we

00:10:35,450 --> 00:10:38,450
just worked and chipped away at

00:10:36,740 --> 00:10:39,890
refactoring these one piece at a time

00:10:38,450 --> 00:10:41,570
and the commit message where we finally

00:10:39,890 --> 00:10:46,540
got rid of them looked something like

00:10:41,570 --> 00:10:48,440
that so boom we were happy to see it go

00:10:46,540 --> 00:10:50,390
if you're wondering what kind of

00:10:48,440 --> 00:10:52,820
architecture is good I really encourage

00:10:50,390 --> 00:10:54,890
you Kevin and Sebastian have been

00:10:52,820 --> 00:10:57,800
running the elm workshop out there the

00:10:54,890 --> 00:10:59,630
Elm architecture is in my mind the one

00:10:57,800 --> 00:11:01,220
architecture you need for writing front

00:10:59,630 --> 00:11:04,160
ends whether you're writing it in react

00:11:01,220 --> 00:11:06,380
redux use is the same thing at this

00:11:04,160 --> 00:11:08,329
company we switch to mob x which and we

00:11:06,380 --> 00:11:10,670
did it in the same way but you have a

00:11:08,329 --> 00:11:12,920
model which is the state of your page so

00:11:10,670 --> 00:11:14,900
for us that might have been the name of

00:11:12,920 --> 00:11:17,630
the class the list of the students and

00:11:14,900 --> 00:11:19,269
all of the like assessments and lessons

00:11:17,630 --> 00:11:23,029
that the students had lined

00:11:19,269 --> 00:11:25,010
then you had an update function or a way

00:11:23,029 --> 00:11:27,889
to trigger an action that would update

00:11:25,010 --> 00:11:30,380
the state of the page and then you have

00:11:27,889 --> 00:11:33,199
your view which renders your state into

00:11:30,380 --> 00:11:35,600
HTML this is the way reactors designed

00:11:33,199 --> 00:11:37,940
to work this is the way Elm works this

00:11:35,600 --> 00:11:39,620
is the way that makes the most sense in

00:11:37,940 --> 00:11:41,839
my mind if you're making a single page

00:11:39,620 --> 00:11:44,240
Waggett Weber and if you follow that

00:11:41,839 --> 00:11:47,240
that a-star to untangle thinking in

00:11:44,240 --> 00:11:49,399
terms of states actions and rendering if

00:11:47,240 --> 00:11:50,720
you want to try a new thing if you've

00:11:49,399 --> 00:11:53,000
heard about a new way to structure your

00:11:50,720 --> 00:11:55,100
code a good idea is to start it in a

00:11:53,000 --> 00:11:57,019
like little experimental project or a

00:11:55,100 --> 00:11:58,430
side thing or an internal tool don't do

00:11:57,019 --> 00:11:59,899
it in your main code base where people

00:11:58,430 --> 00:12:02,570
are going to have to get used to these

00:11:59,899 --> 00:12:04,610
things that you're introducing and

00:12:02,570 --> 00:12:06,500
finally if there's abstractions that

00:12:04,610 --> 00:12:10,630
just add indirection get rid of them

00:12:06,500 --> 00:12:14,300
that's not helpful to anyone finally

00:12:10,630 --> 00:12:16,730
this one was more interesting we knew

00:12:14,300 --> 00:12:18,920
that our application had memory problems

00:12:16,730 --> 00:12:21,220
angularjs isn't known for being memory

00:12:18,920 --> 00:12:24,649
efficient but Al's was like really bad

00:12:21,220 --> 00:12:28,430
it wasn't uncommon to see a tab using

00:12:24,649 --> 00:12:30,889
almost 400 mega vram and we started

00:12:28,430 --> 00:12:33,829
getting reports of iPads crashing and

00:12:30,889 --> 00:12:35,540
kids being sad in class and we just felt

00:12:33,829 --> 00:12:37,100
bad so we're like okay we've got to do

00:12:35,540 --> 00:12:38,990
something but how do you find a memory

00:12:37,100 --> 00:12:41,080
link you start searching Stack Overflow

00:12:38,990 --> 00:12:44,200
and you're like

00:12:41,080 --> 00:12:45,670
I don't know like they have generic tips

00:12:44,200 --> 00:12:47,020
but you've got fifty thousand lines of

00:12:45,670 --> 00:12:48,940
code where are you going to find it

00:12:47,020 --> 00:12:51,670
you're like I heard event listeners

00:12:48,940 --> 00:12:53,380
sometimes cause them you can't just go

00:12:51,670 --> 00:12:54,850
through an audit fifty thousand lines of

00:12:53,380 --> 00:12:58,120
event listeners like that's not going to

00:12:54,850 --> 00:13:04,980
happen so to show you this I'm going to

00:12:58,120 --> 00:13:08,050
show you a quick code pen just a moment

00:13:04,980 --> 00:13:13,200
who would like to guess how much this

00:13:08,050 --> 00:13:16,570
code pen is using ram wise at the moment

00:13:13,200 --> 00:13:22,870
any guesses one hundred megabytes two

00:13:16,570 --> 00:13:25,150
hundred I am I'm struggling to get my

00:13:22,870 --> 00:13:31,150
mouse onto this screen why is it to the

00:13:25,150 --> 00:13:34,240
left oh yeah there we go I should have

00:13:31,150 --> 00:13:38,560
married after all more tools in here we

00:13:34,240 --> 00:13:40,900
go to our task manager it's opened on my

00:13:38,560 --> 00:13:45,760
other screen that is currently using a

00:13:40,900 --> 00:13:49,720
gigabyte of ram so I built this today

00:13:45,760 --> 00:13:51,910
just to demonstrate the way you measure

00:13:49,720 --> 00:13:53,950
this is you actually have to learn your

00:13:51,910 --> 00:13:55,960
tools you can't find where the memory

00:13:53,950 --> 00:13:57,880
leak is in a big app just by guessing at

00:13:55,960 --> 00:14:01,120
all that pattern sometimes causes a leak

00:13:57,880 --> 00:14:03,820
and so you come to the Chrome's memory

00:14:01,120 --> 00:14:05,890
tab I'm a dedicated Firefox user but

00:14:03,820 --> 00:14:08,500
Chrome's really got the best the best

00:14:05,890 --> 00:14:10,780
tooling for this and we go record

00:14:08,500 --> 00:14:13,810
allocation timeline and as we click

00:14:10,780 --> 00:14:15,730
start it will start recording all the

00:14:13,810 --> 00:14:17,980
memory that's being allocated and so as

00:14:15,730 --> 00:14:20,830
I click there you might see that those

00:14:17,980 --> 00:14:22,060
blue lines are the memory that or the

00:14:20,830 --> 00:14:23,950
lines that come up is the memory that's

00:14:22,060 --> 00:14:26,230
been allocated and the bits that go gray

00:14:23,950 --> 00:14:29,530
are the amount that got freed after we

00:14:26,230 --> 00:14:31,570
changed our link and so if there is an

00:14:29,530 --> 00:14:33,760
amount what you would expect is as you

00:14:31,570 --> 00:14:35,350
change between pages it should all go

00:14:33,760 --> 00:14:38,650
gray and you shouldn't be having any

00:14:35,350 --> 00:14:42,460
blue bits left in the previous bits so

00:14:38,650 --> 00:14:49,030
I'll pause that now it will start

00:14:42,460 --> 00:14:50,500
figuring out our snapshot data so what I

00:14:49,030 --> 00:14:53,140
was trying to get out here is that

00:14:50,500 --> 00:14:54,940
sometimes when you do this stuff it's

00:14:53,140 --> 00:14:56,650
not enough to just know

00:14:54,940 --> 00:14:58,870
what's a good idea you actually need to

00:14:56,650 --> 00:15:00,850
learn your tools and learn to deep dive

00:14:58,870 --> 00:15:02,530
into something and I felt like it really

00:15:00,850 --> 00:15:04,210
helped me be a better developer to be

00:15:02,530 --> 00:15:06,070
able to come in and go show me all the

00:15:04,210 --> 00:15:12,880
memory that was allocated in those two

00:15:06,070 --> 00:15:16,720
clicks and it goes there is an array

00:15:12,880 --> 00:15:19,030
that is taking up 5% of the total memory

00:15:16,720 --> 00:15:21,520
on the page and so then I click in and

00:15:19,030 --> 00:15:24,190
it comes down and it goes ah it's being

00:15:21,520 --> 00:15:26,290
held by the page history object which is

00:15:24,190 --> 00:15:28,000
collecting all of our stuff so the page

00:15:26,290 --> 00:15:29,770
history object has been filling up for

00:15:28,000 --> 00:15:33,130
hours on end and now it's using a

00:15:29,770 --> 00:15:36,670
gigabyte of RAM so using your tools is

00:15:33,130 --> 00:15:41,730
how you get past that so learning

00:15:36,670 --> 00:15:44,740
learning to use your tools back into it

00:15:41,730 --> 00:15:46,660
some bugs are legitimately hard so don't

00:15:44,740 --> 00:15:49,780
just stab in the dark learn to do stuff

00:15:46,660 --> 00:15:51,760
so in conclusion how I learned to stop

00:15:49,780 --> 00:15:55,380
worrying and love the spaghetti just

00:15:51,760 --> 00:15:57,790
like this little child you can actually

00:15:55,380 --> 00:15:59,230
enjoy working through code base loads

00:15:57,790 --> 00:16:00,520
like this there's a kind of joy that

00:15:59,230 --> 00:16:02,230
comes through taking something and

00:16:00,520 --> 00:16:04,060
trying to make it cleaner we switched

00:16:02,230 --> 00:16:06,130
from angular to react to replacing one

00:16:04,060 --> 00:16:07,960
square at a time we switched from conch

00:16:06,130 --> 00:16:09,580
adding all of our JavaScript files to

00:16:07,960 --> 00:16:11,500
using a proper module system like web

00:16:09,580 --> 00:16:12,010
packed we introduced flow for type

00:16:11,500 --> 00:16:14,530
checking

00:16:12,010 --> 00:16:16,570
we added unit tests and end-to-end tests

00:16:14,530 --> 00:16:18,160
and we started getting there and started

00:16:16,570 --> 00:16:21,100
being more proud of what was in our code

00:16:18,160 --> 00:16:22,960
base and most importantly we got buy-in

00:16:21,100 --> 00:16:24,550
from the non-technical founders the

00:16:22,960 --> 00:16:26,860
business people in our company we

00:16:24,550 --> 00:16:28,540
created a bug score based on the

00:16:26,860 --> 00:16:30,520
severity of our github issues and made

00:16:28,540 --> 00:16:33,150
it our kind of key metrics that we tried

00:16:30,520 --> 00:16:35,920
to optimize and slowly we started to win

00:16:33,150 --> 00:16:37,740
spaghetti code it can make you feel dumb

00:16:35,920 --> 00:16:40,120
when you're sitting there trying to

00:16:37,740 --> 00:16:42,220
build a simple feature and it just gets

00:16:40,120 --> 00:16:44,080
harder and harder but it's actually a

00:16:42,220 --> 00:16:46,089
sign that you're getting smarter not

00:16:44,080 --> 00:16:47,890
dumb either when you can recognize the

00:16:46,089 --> 00:16:50,080
mess in the code it's a sign that you're

00:16:47,890 --> 00:16:52,089
maturing as a developer and that you can

00:16:50,080 --> 00:16:53,530
recognize mistakes that it might have

00:16:52,089 --> 00:16:55,930
been a mistake you made it might have

00:16:53,530 --> 00:16:57,460
been a mistake you inherited but it's a

00:16:55,930 --> 00:16:59,589
sign that you're beginning to see that

00:16:57,460 --> 00:17:01,480
there's a better way to do things and

00:16:59,589 --> 00:17:03,460
when you see it and start to improve it

00:17:01,480 --> 00:17:06,520
it means you're growing which I think is

00:17:03,460 --> 00:17:08,269
the most important thing so I no longer

00:17:06,520 --> 00:17:10,009
work at that company

00:17:08,269 --> 00:17:11,329
in fact neither does my friend Steven

00:17:10,009 --> 00:17:15,829
the one other developer that was there

00:17:11,329 --> 00:17:18,139
we both work at Culture app now and you

00:17:15,829 --> 00:17:19,549
know I am allowed to say this I hope I

00:17:18,139 --> 00:17:21,529
hope my boss doesn't get angry he's

00:17:19,549 --> 00:17:23,600
sitting over there but we have technical

00:17:21,529 --> 00:17:26,619
debt do not every part of our code base

00:17:23,600 --> 00:17:29,450
is easy to follow and beautifully clean

00:17:26,619 --> 00:17:31,399
but as a company and as a group of

00:17:29,450 --> 00:17:33,619
developers we take pride in our code we

00:17:31,399 --> 00:17:36,230
focus on writing tests and having type

00:17:33,619 --> 00:17:38,539
checking we use things like elm to try

00:17:36,230 --> 00:17:40,340
and force us to do things the right way

00:17:38,539 --> 00:17:42,619
and we help each other write better code

00:17:40,340 --> 00:17:44,419
so that the people who come after us and

00:17:42,619 --> 00:17:47,539
join the team in future have a better

00:17:44,419 --> 00:17:50,269
experience than I did so I'm pretty

00:17:47,539 --> 00:17:51,440
happy with that and I'm glad to have

00:17:50,269 --> 00:17:53,809
gone through the experience

00:17:51,440 --> 00:17:55,999
I don't regret having worked there and I

00:17:53,809 --> 00:17:57,619
feel like the experience of getting in

00:17:55,999 --> 00:18:00,259
the spaghetti and trying to pull it

00:17:57,619 --> 00:18:01,300
apart made me a bit of a developer so

00:18:00,259 --> 00:18:05,040
thank you

00:18:01,300 --> 00:18:05,040
[Applause]

00:18:10,210 --> 00:18:12,270

YouTube URL: https://www.youtube.com/watch?v=83qcg2eD6Xo


