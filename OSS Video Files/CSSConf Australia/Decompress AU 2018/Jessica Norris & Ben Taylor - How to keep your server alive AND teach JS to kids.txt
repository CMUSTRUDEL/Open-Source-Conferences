Title: Jessica Norris & Ben Taylor - How to keep your server alive AND teach JS to kids
Publication date: 2018-04-11
Playlist: Decompress AU 2018
Description: 
	We’re all buzzing about Headless Chrome and how we can automate our testing, but what if we go one step further and try automated marking of… untrusted student code? 

Imagine the sort of code you first wrote — full of syntax errors and infinite loops — now load that code on to a server and click ‘Test’. What happens? Did you crash the page? Did it do anything? 

At Grok Learning we are allowing kids as young as twelve (think ‘Stranger Things’!) to do exactly that. Come discover the challenges we had putting together a JavaScript course with a smart automatic marker that defends our system against whatever crazy code they come up with. 

We’ll get technical and talk about how we’re using Headless Chrome and Puppeteer inside our server-side marker. We’ll dip into what makes it ‘smart’ — good feedback and hints to help students understand why their code doesn’t work the way they expected. And we’ll chat about how to make a good learning experience for JavaScript. 

Let’s ditch to-do list tutorials and make something better!
Captions: 
	00:00:10,120 --> 00:00:17,689
Hey hi everyone so we're gonna talk

00:00:14,690 --> 00:00:21,099
about teaching JavaScript to students

00:00:17,689 --> 00:00:31,759
and how we kept us over life doing that

00:00:21,099 --> 00:00:33,260
so click over there Hey okay so why

00:00:31,759 --> 00:00:36,230
would we want to teach JavaScript to

00:00:33,260 --> 00:00:38,600
kids so a new project called the

00:00:36,230 --> 00:00:40,370
national curriculum just rolled out in

00:00:38,600 --> 00:00:42,379
every state in Australia except for the

00:00:40,370 --> 00:00:44,149
New South Wales and it includes the

00:00:42,379 --> 00:00:45,980
digital technologies curriculum that

00:00:44,149 --> 00:00:49,010
curriculum has students learning the

00:00:45,980 --> 00:00:50,750
code from grade 3 through to grade 8 and

00:00:49,010 --> 00:00:52,280
in years seven and eight they should be

00:00:50,750 --> 00:00:54,500
using a general-purpose programming

00:00:52,280 --> 00:00:56,690
language to create interactive user

00:00:54,500 --> 00:00:59,329
interfaces does that sound familiar as

00:00:56,690 --> 00:01:01,460
JavaScript so we decided to teach

00:00:59,329 --> 00:01:03,859
JavaScript to kids and to do that we

00:01:01,460 --> 00:01:05,810
wanted to create our relevant projects

00:01:03,859 --> 00:01:08,390
that would motivate the students so

00:01:05,810 --> 00:01:10,310
there should be things that make sense

00:01:08,390 --> 00:01:13,130
to someone in year 7 and then it's

00:01:10,310 --> 00:01:15,860
exciting for someone in year 7 um we

00:01:13,130 --> 00:01:18,230
also wanted to introduce small bits at a

00:01:15,860 --> 00:01:19,910
time and and this is a bit tough a lot

00:01:18,230 --> 00:01:21,920
of projects on the internet that try and

00:01:19,910 --> 00:01:23,930
teach JavaScript they have big chunks of

00:01:21,920 --> 00:01:25,460
code and we really want to do just a

00:01:23,930 --> 00:01:28,550
little bit but it still needs to be

00:01:25,460 --> 00:01:30,410
relevant and we also wanted to give

00:01:28,550 --> 00:01:31,910
really good feedback so one of the most

00:01:30,410 --> 00:01:33,620
important parts of learning is getting

00:01:31,910 --> 00:01:35,750
feedback on your learning and if that

00:01:33,620 --> 00:01:37,940
feedback loop is really tight then

00:01:35,750 --> 00:01:39,590
you'll learn really effectively if that

00:01:37,940 --> 00:01:41,930
feedback loop is loose if you get your

00:01:39,590 --> 00:01:46,790
marks back for your essay a month later

00:01:41,930 --> 00:01:48,050
you don't learn anything so jess is

00:01:46,790 --> 00:01:50,720
going to talk about how we mark our

00:01:48,050 --> 00:01:53,840
JavaScript okay so normally with our

00:01:50,720 --> 00:01:57,620
system we marked a student code in a

00:01:53,840 --> 00:01:59,930
linear fashion we want it to be just

00:01:57,620 --> 00:02:01,520
like a unit test so we're testing the

00:01:59,930 --> 00:02:03,980
results inside the students program

00:02:01,520 --> 00:02:05,810
rather than looking at how they arrived

00:02:03,980 --> 00:02:07,700
at those results so for example if they

00:02:05,810 --> 00:02:09,800
have a loop that they're required to

00:02:07,700 --> 00:02:11,720
write we don't necessarily make them do

00:02:09,800 --> 00:02:13,310
a while loop but they could use a for

00:02:11,720 --> 00:02:15,319
loop we're actually checking to see that

00:02:13,310 --> 00:02:17,420
they've got the outcome that we wanted

00:02:15,319 --> 00:02:19,460
so in order to do that we have to

00:02:17,420 --> 00:02:21,290
actually run their code we do this

00:02:19,460 --> 00:02:22,200
inside a sandbox for a bunch of reasons

00:02:21,290 --> 00:02:24,330
it gives us

00:02:22,200 --> 00:02:26,730
a lot of control but one of the things

00:02:24,330 --> 00:02:29,030
we have to watch out for is keeping an

00:02:26,730 --> 00:02:31,650
eye on the resources inside the marker

00:02:29,030 --> 00:02:34,050
if the student and let's face it they do

00:02:31,650 --> 00:02:36,840
often write really bad inefficient code

00:02:34,050 --> 00:02:38,819
if they have an infinite loop or they're

00:02:36,840 --> 00:02:40,440
going to make the CPU go mad we want to

00:02:38,819 --> 00:02:44,550
make sure that they have those resources

00:02:40,440 --> 00:02:47,400
limited we also make sure that they have

00:02:44,550 --> 00:02:49,080
isolated data and but they can't access

00:02:47,400 --> 00:02:51,060
things on the on the network that

00:02:49,080 --> 00:02:52,890
they're not supposed to get into this

00:02:51,060 --> 00:02:54,569
means that we can make sure that their

00:02:52,890 --> 00:02:56,459
submissions aren't peeking into other

00:02:54,569 --> 00:02:59,580
students submissions that are running at

00:02:56,459 --> 00:03:01,170
the same time but perhaps the best

00:02:59,580 --> 00:03:03,060
benefit that we have for doing this

00:03:01,170 --> 00:03:05,819
approach is that it makes our page

00:03:03,060 --> 00:03:07,829
behavior really predictable the student

00:03:05,819 --> 00:03:10,230
doesn't have to have a specific browser

00:03:07,829 --> 00:03:12,569
in order to use the platform and mark

00:03:10,230 --> 00:03:14,730
their code we can control the features

00:03:12,569 --> 00:03:15,959
from JavaScript that we want to teach so

00:03:14,730 --> 00:03:18,480
that they arouser doesn't have to

00:03:15,959 --> 00:03:19,890
support those same features and we can

00:03:18,480 --> 00:03:21,540
predict what it will look like when

00:03:19,890 --> 00:03:23,700
they're actually marking so if we take a

00:03:21,540 --> 00:03:26,010
screenshot of their page it'll be the

00:03:23,700 --> 00:03:27,450
same every time that they run the code

00:03:26,010 --> 00:03:33,290
and across all of the different

00:03:27,450 --> 00:03:35,790
platforms that they're using okay

00:03:33,290 --> 00:03:38,549
all right so inside the sandbox we have

00:03:35,790 --> 00:03:40,470
a bunch of pieces fitting together we

00:03:38,549 --> 00:03:42,329
have the heavy lifter in the situation

00:03:40,470 --> 00:03:44,970
is chromium who we're running this in

00:03:42,329 --> 00:03:48,540
headless mode and accessing it via the

00:03:44,970 --> 00:03:50,940
dev tools this enables us to to set the

00:03:48,540 --> 00:03:54,329
page up and then peek inside the page

00:03:50,940 --> 00:03:56,970
inside the page context this is done

00:03:54,329 --> 00:04:00,620
using a nice high level API called

00:03:56,970 --> 00:04:02,819
puppeteer it's and bundles together

00:04:00,620 --> 00:04:04,350
actions that we want to perform inside

00:04:02,819 --> 00:04:06,569
the page so for example if we want to

00:04:04,350 --> 00:04:08,609
click on an element inside the page we

00:04:06,569 --> 00:04:10,440
don't have to mess about by finding

00:04:08,609 --> 00:04:12,299
where on the page it is moving the mouse

00:04:10,440 --> 00:04:14,069
across clicking down and clicking up and

00:04:12,299 --> 00:04:17,310
so on its ass bundled into one nice

00:04:14,069 --> 00:04:19,500
easy-to-use click action and it also

00:04:17,310 --> 00:04:21,479
makes it really easy to communicate over

00:04:19,500 --> 00:04:25,050
the top of the dev tools protocol which

00:04:21,479 --> 00:04:28,650
is very complicated but powerful

00:04:25,050 --> 00:04:30,960
protocol the next thing we have inside

00:04:28,650 --> 00:04:33,180
there is a proxy server that basically

00:04:30,960 --> 00:04:35,520
handles our whitelisting so that inside

00:04:33,180 --> 00:04:38,610
the student page if they request out for

00:04:35,520 --> 00:04:41,069
external resource like YouTube then they

00:04:38,610 --> 00:04:43,379
get cut off so no chance streaming

00:04:41,069 --> 00:04:48,030
YouTube inside our market kids also know

00:04:43,379 --> 00:04:50,159
mining Bitcoin we have a web server that

00:04:48,030 --> 00:04:52,949
serves to Submission up this basically

00:04:50,159 --> 00:04:55,020
makes the students workspace available

00:04:52,949 --> 00:04:57,090
inside the web server in the local

00:04:55,020 --> 00:04:59,960
namespace so they can access their HTML

00:04:57,090 --> 00:05:02,460
files their JavaScript files and any

00:04:59,960 --> 00:05:05,159
resources like images that we feel are

00:05:02,460 --> 00:05:08,039
important to the problem and which they

00:05:05,159 --> 00:05:10,169
can access locally without large URLs

00:05:08,039 --> 00:05:12,180
which are very complicated for you know

00:05:10,169 --> 00:05:15,990
what kid that's age 12 to get a handle

00:05:12,180 --> 00:05:18,000
on and then finally we have the ps2

00:05:15,990 --> 00:05:21,509
resistance which is our marker which is

00:05:18,000 --> 00:05:24,150
a smart level above the API that we're

00:05:21,509 --> 00:05:26,729
using with puppeteer this is designed

00:05:24,150 --> 00:05:29,880
for our problem authors so that they can

00:05:26,729 --> 00:05:31,830
write really good problems and Mark the

00:05:29,880 --> 00:05:33,990
the students solution and give really

00:05:31,830 --> 00:05:34,919
good feedback at a higher level over the

00:05:33,990 --> 00:05:37,319
API there

00:05:34,919 --> 00:05:40,490
okay so Ben's going to talk to you about

00:05:37,319 --> 00:05:43,169
the problem office perspective so a

00:05:40,490 --> 00:05:45,509
common problem that we serve up within

00:05:43,169 --> 00:05:47,310
about an hour of the first time

00:05:45,509 --> 00:05:49,620
programming is a problem called hallow

00:05:47,310 --> 00:05:51,810
name and and in this problem you should

00:05:49,620 --> 00:05:55,050
take some input like a name and then say

00:05:51,810 --> 00:05:57,180
hello to that person so if I said Ben

00:05:55,050 --> 00:06:00,690
then the program says hello Ben

00:05:57,180 --> 00:06:05,159
so how do we do that in JavaScript and

00:06:00,690 --> 00:06:07,560
HTML so we've taken an approach that is

00:06:05,159 --> 00:06:10,289
maybe not as common as some other

00:06:07,560 --> 00:06:12,210
programs do or some other projects do we

00:06:10,289 --> 00:06:15,449
wanted to keep it kind of honest and

00:06:12,210 --> 00:06:15,840
focus on doing HTML but we have a

00:06:15,449 --> 00:06:18,930
problem

00:06:15,840 --> 00:06:21,690
which is how do you get input without an

00:06:18,930 --> 00:06:24,509
event so without having to declare a

00:06:21,690 --> 00:06:27,330
function and so we decided to use prompt

00:06:24,509 --> 00:06:29,310
which not a lot of people may have seen

00:06:27,330 --> 00:06:31,169
but it's kind of old-school and it

00:06:29,310 --> 00:06:33,620
prompts up a dialog box and you can

00:06:31,169 --> 00:06:36,150
enter some text and it's not great but

00:06:33,620 --> 00:06:38,310
it's really neat for students who are

00:06:36,150 --> 00:06:40,770
just beginning because it's blocking so

00:06:38,310 --> 00:06:44,159
we don't have to do any events and then

00:06:40,770 --> 00:06:47,490
the other thing we do is it's a really

00:06:44,159 --> 00:06:49,139
old spec but the ID of every object on

00:06:47,490 --> 00:06:51,659
your page is available on the

00:06:49,139 --> 00:06:55,379
window objects and so we can directly

00:06:51,659 --> 00:06:57,389
access the Dom elements like person just

00:06:55,379 --> 00:06:59,879
by writing person and and this allows us

00:06:57,389 --> 00:07:01,770
to write a really simple line of code it

00:06:59,879 --> 00:07:03,300
actually does a lot of a lot of

00:07:01,770 --> 00:07:06,870
different things without teaching a lot

00:07:03,300 --> 00:07:08,189
of concepts which is important so there

00:07:06,870 --> 00:07:10,199
are a few different things that you

00:07:08,189 --> 00:07:13,169
could do when you're writing a solution

00:07:10,199 --> 00:07:14,999
to this a student could use variables

00:07:13,169 --> 00:07:18,300
but then they want to alert their

00:07:14,999 --> 00:07:21,120
variable name and then they set the text

00:07:18,300 --> 00:07:22,710
content so this would hopefully fail so

00:07:21,120 --> 00:07:24,870
we would want to say oh you weren't

00:07:22,710 --> 00:07:27,000
meant to alert that name even though you

00:07:24,870 --> 00:07:29,669
have for debugging and another solution

00:07:27,000 --> 00:07:30,990
might be they have used best practices

00:07:29,669 --> 00:07:33,740
and they've gotten the element by ID

00:07:30,990 --> 00:07:36,870
rather than using our window hack and

00:07:33,740 --> 00:07:38,789
they've used variables and we want this

00:07:36,870 --> 00:07:40,229
case to also pass so we shouldn't be

00:07:38,789 --> 00:07:42,300
checking that they've done things the

00:07:40,229 --> 00:07:44,550
way we wanted them to do they just have

00:07:42,300 --> 00:07:47,639
to get it correct so how would we go

00:07:44,550 --> 00:07:49,110
about doing that okay so with marking

00:07:47,639 --> 00:07:51,810
modal's they're a little different to

00:07:49,110 --> 00:07:54,330
like a linear unit test because when the

00:07:51,810 --> 00:07:56,610
modal happens it's going to to interrupt

00:07:54,330 --> 00:07:59,009
so normally we would take an action like

00:07:56,610 --> 00:07:59,939
say click on a on a button and then

00:07:59,009 --> 00:08:01,849
expect the result

00:07:59,939 --> 00:08:05,699
maybe the button changes color to red

00:08:01,849 --> 00:08:07,860
but when our callback is involved the

00:08:05,699 --> 00:08:10,560
modal happens inside a different context

00:08:07,860 --> 00:08:13,830
to the area that we're trying to test so

00:08:10,560 --> 00:08:16,139
we lose control of the page handles in

00:08:13,830 --> 00:08:19,289
the page at that point we need to expect

00:08:16,139 --> 00:08:22,259
the mobile modal will pop up before it

00:08:19,289 --> 00:08:23,729
actually happens so puppeteer actually

00:08:22,259 --> 00:08:26,009
makes it pretty easy to handle modal's

00:08:23,729 --> 00:08:27,960
it's got a nice leap I around this but

00:08:26,009 --> 00:08:31,050
our marker API takes it a bit further

00:08:27,960 --> 00:08:32,490
and allows the problem author to expect

00:08:31,050 --> 00:08:35,579
that the next thing that's going to

00:08:32,490 --> 00:08:37,320
happen in terms of a modal is that it's

00:08:35,579 --> 00:08:39,810
going to be say a prompt and it's going

00:08:37,320 --> 00:08:41,849
to have a certain prompt text and it can

00:08:39,810 --> 00:08:44,310
be responded to in a certain way so that

00:08:41,849 --> 00:08:49,529
the the students code can then take that

00:08:44,310 --> 00:08:53,010
and move on with their solution the

00:08:49,529 --> 00:08:55,769
other thing that oh yes right the this

00:08:53,010 --> 00:08:57,600
is an example from our marker that is

00:08:55,769 --> 00:08:59,399
showing the student that they have

00:08:57,600 --> 00:09:00,690
accidentally popped up an alert dialog

00:08:59,399 --> 00:09:02,819
instead of

00:09:00,690 --> 00:09:04,949
popping up a prompt dialogue this

00:09:02,819 --> 00:09:06,480
feedback is helpful because we're

00:09:04,949 --> 00:09:08,759
actually giving them some context about

00:09:06,480 --> 00:09:11,459
what happened when the error occurred if

00:09:08,759 --> 00:09:14,100
we didn't have this hint about we click

00:09:11,459 --> 00:09:15,569
the button element first then they it's

00:09:14,100 --> 00:09:18,420
hard to keep track for the student of

00:09:15,569 --> 00:09:20,310
which part of the code the error is

00:09:18,420 --> 00:09:21,750
occurring in the web technologies have

00:09:20,310 --> 00:09:23,790
got lots of different pieces fitting

00:09:21,750 --> 00:09:25,829
together and that's a lot for the

00:09:23,790 --> 00:09:30,089
student to handle at once so this helps

00:09:25,829 --> 00:09:32,550
give them some context the other thing

00:09:30,089 --> 00:09:34,740
that we have going on with with modal's

00:09:32,550 --> 00:09:37,160
is that students use modal's to debug

00:09:34,740 --> 00:09:39,870
their code as been show before if you

00:09:37,160 --> 00:09:41,759
need to know what's inside your variable

00:09:39,870 --> 00:09:43,560
at any point in time you're probably

00:09:41,759 --> 00:09:45,480
going to pop up an alert or a prompt

00:09:43,560 --> 00:09:47,129
because it's it's difficult for the

00:09:45,480 --> 00:09:49,319
student to work out how to get to the

00:09:47,129 --> 00:09:51,930
console and all of that sort of stuff a

00:09:49,319 --> 00:09:54,360
prompt or an alert makes it obvious and

00:09:51,930 --> 00:09:56,579
apparent what's going on they also will

00:09:54,360 --> 00:09:58,860
use it to to find out whether they've

00:09:56,579 --> 00:10:00,930
got an event handler actually firing so

00:09:58,860 --> 00:10:02,850
here's an example they've left an alert

00:10:00,930 --> 00:10:03,420
in there saying I'm inside this event

00:10:02,850 --> 00:10:06,560
hooray

00:10:03,420 --> 00:10:09,449
but what happens if they mark this code

00:10:06,560 --> 00:10:11,790
we're not expecting in the test for an

00:10:09,449 --> 00:10:14,100
alert to happen at this point but we

00:10:11,790 --> 00:10:16,500
need to recover otherwise our tests will

00:10:14,100 --> 00:10:18,720
block forever trying to respond to this

00:10:16,500 --> 00:10:21,089
modal that has has taken over the

00:10:18,720 --> 00:10:23,459
execution so we give them again some

00:10:21,089 --> 00:10:27,509
feedback in order to allow them to

00:10:23,459 --> 00:10:30,480
proceed so this is another problem which

00:10:27,509 --> 00:10:32,850
I really like which is a meme maker so

00:10:30,480 --> 00:10:34,860
we want to have this is where students

00:10:32,850 --> 00:10:36,689
are a bit further through and they are

00:10:34,860 --> 00:10:38,790
learning about events and we want them

00:10:36,689 --> 00:10:42,389
to put text into an input field and then

00:10:38,790 --> 00:10:48,059
update the caption of a meme so we have

00:10:42,389 --> 00:10:50,610
a input field and that's the text that

00:10:48,059 --> 00:10:52,889
they've typed in and a caption on an

00:10:50,610 --> 00:10:55,949
image and when they type into the input

00:10:52,889 --> 00:10:59,309
field it should automatically update the

00:10:55,949 --> 00:11:01,439
caption so to do this I've got this

00:10:59,309 --> 00:11:03,779
sample solution which is how we would

00:11:01,439 --> 00:11:07,559
teach it not necessarily exactly like

00:11:03,779 --> 00:11:10,110
this but similar and some of the things

00:11:07,559 --> 00:11:13,170
we've done here again we're using that

00:11:10,110 --> 00:11:14,399
same window ID trick and the other thing

00:11:13,170 --> 00:11:17,189
is we're using the old

00:11:14,399 --> 00:11:19,259
style event handling just setting the

00:11:17,189 --> 00:11:22,319
function on to the on input and that's

00:11:19,259 --> 00:11:24,019
just because it's a lot harder to write

00:11:22,319 --> 00:11:27,660
add eventlistener

00:11:24,019 --> 00:11:29,610
on an element than it is to set on input

00:11:27,660 --> 00:11:31,680
and it makes it's a little more

00:11:29,610 --> 00:11:33,809
confusing as well because on input is

00:11:31,680 --> 00:11:35,579
just one thing out of n plus no could be

00:11:33,809 --> 00:11:37,079
lots of things and we really want to

00:11:35,579 --> 00:11:40,730
keep these things as simple as possible

00:11:37,079 --> 00:11:47,279
and stick to these kind of easier done

00:11:40,730 --> 00:11:48,779
understand concepts so okay so this one

00:11:47,279 --> 00:11:50,819
is a bit more traditional we're taking

00:11:48,779 --> 00:11:53,069
an action and expecting a result but

00:11:50,819 --> 00:11:54,899
what if they for example forget to hook

00:11:53,069 --> 00:11:56,430
up their event handler this is the sort

00:11:54,899 --> 00:11:59,069
of thing that would be really easy for a

00:11:56,430 --> 00:12:00,569
young student to do they they implement

00:11:59,069 --> 00:12:03,540
their function but when they click the

00:12:00,569 --> 00:12:05,879
button nothing seems to happen so we try

00:12:03,540 --> 00:12:07,439
and give them a bit more feedback in

00:12:05,879 --> 00:12:09,930
this situation so there's a bunch of

00:12:07,439 --> 00:12:12,689
things going on here first of all we

00:12:09,930 --> 00:12:14,819
tell them what the error is and in here

00:12:12,689 --> 00:12:16,199
we're expecting a certain caption and

00:12:14,819 --> 00:12:18,959
then we tell them what it was meant to

00:12:16,199 --> 00:12:21,389
be and we also give them the same

00:12:18,959 --> 00:12:24,509
context as before the fact that we

00:12:21,389 --> 00:12:26,429
perform this action and we they can

00:12:24,509 --> 00:12:28,679
match up the thoughtful Dino here with

00:12:26,429 --> 00:12:32,279
the action that we actually took and

00:12:28,679 --> 00:12:35,490
then we give them a clue did you hook up

00:12:32,279 --> 00:12:37,410
your event listener this feature is

00:12:35,490 --> 00:12:40,350
really useful for our problem authors to

00:12:37,410 --> 00:12:42,809
set a specific hint with a particular

00:12:40,350 --> 00:12:45,809
test so that they can give the student

00:12:42,809 --> 00:12:48,600
context specific clues as to what's

00:12:45,809 --> 00:12:50,519
going on so if they forget to if the

00:12:48,600 --> 00:12:52,139
result is not what we expect it could be

00:12:50,519 --> 00:12:53,999
for a bunch of different reasons but the

00:12:52,139 --> 00:12:56,009
test author has a fair idea of what they

00:12:53,999 --> 00:12:59,399
might have done wrong fact that is what

00:12:56,009 --> 00:13:00,689
they can use that for the other thing

00:12:59,399 --> 00:13:01,980
that's going on what happens if their

00:13:00,689 --> 00:13:04,259
event handle I never terminates

00:13:01,980 --> 00:13:05,490
obviously if they've got an event if

00:13:04,259 --> 00:13:07,199
they've got an infinite loop inside

00:13:05,490 --> 00:13:09,389
their code it's just going to lock up

00:13:07,199 --> 00:13:13,589
our marker if we're not careful so we

00:13:09,389 --> 00:13:15,509
don't want to hang that and this

00:13:13,589 --> 00:13:18,660
feedback gives an example we basically

00:13:15,509 --> 00:13:20,129
timeout and then give them a hint that's

00:13:18,660 --> 00:13:24,329
tailored to the fact that their code

00:13:20,129 --> 00:13:26,240
timed out finally just want to say what

00:13:24,329 --> 00:13:28,970
happens if they're getting sneaky and

00:13:26,240 --> 00:13:31,880
to do funky things with HTML injection

00:13:28,970 --> 00:13:34,399
attacks it's just a note that because

00:13:31,880 --> 00:13:36,560
we're we're marking web technologies and

00:13:34,399 --> 00:13:38,600
then giving the feedback with those same

00:13:36,560 --> 00:13:41,930
technologies it's really extremely easy

00:13:38,600 --> 00:13:43,970
to accidentally inject HTML into your

00:13:41,930 --> 00:13:46,430
own feedback messages and so we've got a

00:13:43,970 --> 00:13:48,980
whole framework there that that protects

00:13:46,430 --> 00:13:50,930
that so the student can't you know pop

00:13:48,980 --> 00:13:52,580
up an alert on their own window and

00:13:50,930 --> 00:13:54,470
think that they've hacked our system or

00:13:52,580 --> 00:13:56,930
something like that

00:13:54,470 --> 00:13:58,279
so the final project they do is a bit of

00:13:56,930 --> 00:13:59,839
a quiz and we're just going to rush

00:13:58,279 --> 00:14:01,700
through this bit and this is like a

00:13:59,839 --> 00:14:03,230
BuzzFeed star quiz and one of the big

00:14:01,700 --> 00:14:05,060
problems with this is that it's a forum

00:14:03,230 --> 00:14:07,490
and so they need to handle the event on

00:14:05,060 --> 00:14:08,959
the forum and of course if you don't

00:14:07,490 --> 00:14:14,180
handle the event and prevent the default

00:14:08,959 --> 00:14:15,589
then the page will navigate so they're

00:14:14,180 --> 00:14:17,120
going to need on submit they're going to

00:14:15,589 --> 00:14:18,260
need prevent default they are going to

00:14:17,120 --> 00:14:19,580
have that branching and looping and all

00:14:18,260 --> 00:14:23,029
of that stuff and a lot more hidden

00:14:19,580 --> 00:14:25,390
details of concepts that they will have

00:14:23,029 --> 00:14:28,520
learned over the course of the project

00:14:25,390 --> 00:14:30,620
yeah so I so for marking the final

00:14:28,520 --> 00:14:33,230
project the main thing that was a real

00:14:30,620 --> 00:14:35,930
issue here was that page navigation is a

00:14:33,230 --> 00:14:38,270
factor if they do it correctly then

00:14:35,930 --> 00:14:39,709
there will be no page navigation but if

00:14:38,270 --> 00:14:41,360
they don't do it correctly and let's

00:14:39,709 --> 00:14:42,529
face it almost all the time the first

00:14:41,360 --> 00:14:44,510
thing they didn't going to do is hit

00:14:42,529 --> 00:14:46,490
mark before they've set up their event

00:14:44,510 --> 00:14:48,770
handlers or anything it's going to cause

00:14:46,490 --> 00:14:50,779
a page navigation so I could talk for

00:14:48,770 --> 00:14:53,839
ages on this one aspect it was

00:14:50,779 --> 00:14:56,300
surprisingly tricky given the way that

00:14:53,839 --> 00:14:58,970
the the handles are set up inside the

00:14:56,300 --> 00:15:00,110
chromium dev tools so come and ask me

00:14:58,970 --> 00:15:01,279
about it if you're interested in that

00:15:00,110 --> 00:15:05,450
because I think we're a little bit short

00:15:01,279 --> 00:15:07,940
of time here so there's lots of things

00:15:05,450 --> 00:15:08,510
we didn't have time to cover some we've

00:15:07,940 --> 00:15:10,640
done some stuff with

00:15:08,510 --> 00:15:13,520
requestanimationframe some other event

00:15:10,640 --> 00:15:16,670
handlers it's so much JavaScript that

00:15:13,520 --> 00:15:19,040
you can teach and that exists especially

00:15:16,670 --> 00:15:20,959
with the Dom API as the course that

00:15:19,040 --> 00:15:22,190
we're developing is still we're still

00:15:20,959 --> 00:15:24,589
working on it and it should be coming

00:15:22,190 --> 00:15:26,450
out soon if you have any questions about

00:15:24,589 --> 00:15:29,990
teaching JavaScript about puppeteer

00:15:26,450 --> 00:15:33,980
please come talk to us that's us

00:15:29,990 --> 00:15:34,790
also the last bit thank you

00:15:33,980 --> 00:15:38,970
cool

00:15:34,790 --> 00:15:38,970
[Applause]

00:15:43,290 --> 00:15:45,350

YouTube URL: https://www.youtube.com/watch?v=j5UNHl9QwBY


