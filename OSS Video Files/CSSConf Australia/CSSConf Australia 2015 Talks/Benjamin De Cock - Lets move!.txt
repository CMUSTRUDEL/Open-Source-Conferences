Title: Benjamin De Cock - Lets move!
Publication date: 2015-06-14
Playlist: CSSConf Australia 2015 Talks
Description: 
	Thanks our friends at SitePoint, Benjamin De Cock's CSSConf Australia 2015 presentation 'Lets move!'.

http://2015.cssconf.com.au/
https://twitter.com/bdc
http://deaxon.com
Captions: 
	00:00:00,030 --> 00:00:06,960
so hi everyone my name is Ben and today

00:00:03,840 --> 00:00:10,490
I'd like to talk about animations as you

00:00:06,960 --> 00:00:13,230
can tell from this extremely funny slide

00:00:10,490 --> 00:00:16,199
so we'll see a few examples of how

00:00:13,230 --> 00:00:17,730
animations can improve the user

00:00:16,199 --> 00:00:20,279
experience and then we'll talk a little

00:00:17,730 --> 00:00:25,920
bit about the code behind some of these

00:00:20,279 --> 00:00:27,869
animations so very briefly I'm a user

00:00:25,920 --> 00:00:30,779
interface designer and front-end

00:00:27,869 --> 00:00:33,120
developer at stripe you might have seen

00:00:30,779 --> 00:00:36,870
that animations usually play a pretty

00:00:33,120 --> 00:00:38,790
big role in our products and well that's

00:00:36,870 --> 00:00:44,520
something I really like to be involved

00:00:38,790 --> 00:00:46,739
in I've been fascinated with animations

00:00:44,520 --> 00:00:48,930
for quite a while now and if my memory

00:00:46,739 --> 00:00:52,590
serves it all started with the portfolio

00:00:48,930 --> 00:00:55,829
of my friend Tim it was like six years

00:00:52,590 --> 00:00:58,440
ago and WebKit was just starting to

00:00:55,829 --> 00:01:00,989
support ceases transitions and Tim made

00:00:58,440 --> 00:01:03,539
this little recap website where he used

00:01:00,989 --> 00:01:05,430
their assistive transition to produce

00:01:03,539 --> 00:01:08,670
that little hover effect

00:01:05,430 --> 00:01:11,670
I remember being blown away by this

00:01:08,670 --> 00:01:14,939
magical new transition property not only

00:01:11,670 --> 00:01:16,500
because it was so easy to use but also

00:01:14,939 --> 00:01:18,000
because it was performing a transition

00:01:16,500 --> 00:01:20,009
to the new specific value and then

00:01:18,000 --> 00:01:24,210
automatically another one to come back

00:01:20,009 --> 00:01:27,900
to the initial state I was extremely

00:01:24,210 --> 00:01:30,240
excited to say the least now in

00:01:27,900 --> 00:01:32,520
hindsight visualizing a simplified

00:01:30,240 --> 00:01:34,170
example of this animation makes you

00:01:32,520 --> 00:01:36,930
realize it wasn't exactly the most

00:01:34,170 --> 00:01:39,479
mind-blowing stuff ever right but at

00:01:36,930 --> 00:01:42,600
that time it really felt revolutionary

00:01:39,479 --> 00:01:45,600
to me and I literally started to animate

00:01:42,600 --> 00:01:48,420
everything I could find it was my

00:01:45,600 --> 00:01:51,390
obscure flash like period where I wasn't

00:01:48,420 --> 00:01:52,680
even thinking if animating all the

00:01:51,390 --> 00:01:55,590
things was actually a good idea

00:01:52,680 --> 00:01:58,200
I was just way too excited for not doing

00:01:55,590 --> 00:02:00,119
it so yeah

00:01:58,200 --> 00:02:03,270
six years ago I also made some kind of

00:02:00,119 --> 00:02:05,369
VCAT website no don't even ask me what

00:02:03,270 --> 00:02:06,119
this kind of box actually is I've no

00:02:05,369 --> 00:02:09,060
idea

00:02:06,119 --> 00:02:12,270
don't ask me why producers like smoking

00:02:09,060 --> 00:02:15,030
stuff I just don't know I was way too

00:02:12,270 --> 00:02:20,160
excited to just you know play with

00:02:15,030 --> 00:02:22,290
animations to even think about that now

00:02:20,160 --> 00:02:24,330
imagine how I felt when the guy who got

00:02:22,290 --> 00:02:30,000
me excited about animations in the first

00:02:24,330 --> 00:02:33,500
place made this treat so I got even more

00:02:30,000 --> 00:02:36,420
excited about animations and so I

00:02:33,500 --> 00:02:39,569
continued animating all the things but I

00:02:36,420 --> 00:02:41,430
try to be a bit more subtle so this one

00:02:39,569 --> 00:02:43,769
was for a small teaser page for a

00:02:41,430 --> 00:02:48,300
product that I have been working on

00:02:43,769 --> 00:02:50,400
called a key cough and this one was

00:02:48,300 --> 00:02:53,760
already a bit better because it was fast

00:02:50,400 --> 00:02:55,260
and so it wasn't delaying the access to

00:02:53,760 --> 00:02:59,159
the content it was just bringing some

00:02:55,260 --> 00:03:03,510
motion to a static visual and so I

00:02:59,159 --> 00:03:05,730
continued with the same idea of making

00:03:03,510 --> 00:03:09,120
my visuals a little bit richer by

00:03:05,730 --> 00:03:12,629
bringing some some motion into the whole

00:03:09,120 --> 00:03:14,069
thing so I redesigned my portfolio and

00:03:12,629 --> 00:03:15,959
instead of just showing static

00:03:14,069 --> 00:03:18,510
screenshots of all my icons and user

00:03:15,959 --> 00:03:19,590
interfaces I chose to animate all of

00:03:18,510 --> 00:03:25,230
them in order to make the whole

00:03:19,590 --> 00:03:28,140
experience a bit more interesting so I

00:03:25,230 --> 00:03:31,170
actually learned a lot from during this

00:03:28,140 --> 00:03:32,819
redesign a few years ago and pretty much

00:03:31,170 --> 00:03:35,760
all the best practices that I'm using

00:03:32,819 --> 00:03:40,140
today to create good animations come

00:03:35,760 --> 00:03:44,310
from that experience so very briefly

00:03:40,140 --> 00:03:47,159
what are these best practices so the

00:03:44,310 --> 00:03:48,930
first row is the most important one and

00:03:47,159 --> 00:03:52,170
yet unfortunately the most complicated

00:03:48,930 --> 00:03:54,150
one to follow but a fact that is hard

00:03:52,170 --> 00:03:56,909
shouldn't make you feel it's fine to

00:03:54,150 --> 00:03:59,459
make some exceptions having just one

00:03:56,909 --> 00:04:02,370
part of your animation that doesn't run

00:03:59,459 --> 00:04:04,500
at 60fps is basically going to kill the

00:04:02,370 --> 00:04:09,659
entire smoothness of the animation not

00:04:04,500 --> 00:04:11,610
just for that specific part the human

00:04:09,659 --> 00:04:13,379
area is unfortunately extremely

00:04:11,610 --> 00:04:16,380
sensitive at that and so if you can't

00:04:13,379 --> 00:04:18,540
code the idea that you had in mind just

00:04:16,380 --> 00:04:20,639
by using a passage in transform it's

00:04:18,540 --> 00:04:22,830
better to try to find another idea than

00:04:20,639 --> 00:04:25,940
using expensive properties like let's

00:04:22,830 --> 00:04:25,940
say with an height for example

00:04:26,580 --> 00:04:32,849
yoga rules are fairly straight forward

00:04:29,840 --> 00:04:35,099
keep your animations fast and image

00:04:32,849 --> 00:04:37,590
things independently so instead of like

00:04:35,099 --> 00:04:41,759
moving one big block it's better to move

00:04:37,590 --> 00:04:44,969
all its children separately and last but

00:04:41,759 --> 00:04:47,550
not least always use custom easing so

00:04:44,969 --> 00:04:54,060
please know standard CSS keywords such

00:04:47,550 --> 00:04:57,120
as easy in his out etc so knowing the

00:04:54,060 --> 00:04:59,729
techniques to create nice animations is

00:04:57,120 --> 00:05:02,580
just as important as knowing why and

00:04:59,729 --> 00:05:04,889
when to use animations and of course

00:05:02,580 --> 00:05:07,050
bringing bringing some fun to your

00:05:04,889 --> 00:05:10,289
application is a good argument per se we

00:05:07,050 --> 00:05:12,389
should not over analyze it but still the

00:05:10,289 --> 00:05:15,330
too many reasons for me for animating

00:05:12,389 --> 00:05:16,949
things is one animation help

00:05:15,330 --> 00:05:19,740
understanding the flow between two

00:05:16,949 --> 00:05:22,740
states and two animations can actually

00:05:19,740 --> 00:05:24,330
make your app feel faster alright so

00:05:22,740 --> 00:05:29,069
let's just start by illustrating the

00:05:24,330 --> 00:05:31,680
first point very quickly so this is a

00:05:29,069 --> 00:05:35,039
mobile version of checkout which is

00:05:31,680 --> 00:05:36,659
stripes embeddable payment form so check

00:05:35,039 --> 00:05:38,940
out how this option that lets you use

00:05:36,659 --> 00:05:41,039
remember like a civic reading card info

00:05:38,940 --> 00:05:41,750
so you don't have to re-enter them over

00:05:41,039 --> 00:05:45,599
and over again

00:05:41,750 --> 00:05:47,819
now enabling remember me actually brings

00:05:45,599 --> 00:05:51,569
you to a completely new view and you

00:05:47,819 --> 00:05:55,169
sort of lose the context so by it and

00:05:51,569 --> 00:05:57,180
making each part individually the flow

00:05:55,169 --> 00:05:58,770
becomes much more obvious and you get a

00:05:57,180 --> 00:06:00,750
better sense of the structure of the

00:05:58,770 --> 00:06:03,409
page and about the elements composing

00:06:00,750 --> 00:06:03,409
the interface

00:06:04,490 --> 00:06:09,629
there's no illustrative second point

00:06:06,750 --> 00:06:11,370
which mass might be less obvious as an

00:06:09,629 --> 00:06:17,219
act animation can actually make your app

00:06:11,370 --> 00:06:19,830
feel slower when using a wrong way so

00:06:17,219 --> 00:06:21,960
three bucks is a small side product I

00:06:19,830 --> 00:06:24,900
may like a year ago so that lets

00:06:21,960 --> 00:06:29,729
designers create their portfolio easily

00:06:24,900 --> 00:06:32,219
based on their Tribble profile so the

00:06:29,729 --> 00:06:34,199
background image here is actually using

00:06:32,219 --> 00:06:37,020
dribbles API so what it does is that it

00:06:34,199 --> 00:06:37,810
calls the API then it fetches the

00:06:37,020 --> 00:06:40,180
current

00:06:37,810 --> 00:06:42,250
popular shots it rose all of them in

00:06:40,180 --> 00:06:44,920
canvas and then it applies a gradient

00:06:42,250 --> 00:06:46,660
with a blending mode above everything so

00:06:44,920 --> 00:06:49,540
the whole thing there takes a little bit

00:06:46,660 --> 00:06:51,910
of time especially obviously loading all

00:06:49,540 --> 00:06:54,280
the shots but I didn't want to have some

00:06:51,910 --> 00:06:56,560
sort of a loader there right it's it's

00:06:54,280 --> 00:06:59,800
super gross to delay the access to the

00:06:56,560 --> 00:07:02,710
content for a background image basically

00:06:59,800 --> 00:07:05,610
so what I did instead was to create this

00:07:02,710 --> 00:07:08,380
tiny animation where the letters are

00:07:05,610 --> 00:07:11,470
sort of bounce you know because it's

00:07:08,380 --> 00:07:13,900
Ribble and by the time the animation

00:07:11,470 --> 00:07:16,300
finishes the header will usually be

00:07:13,900 --> 00:07:17,530
fully or at least mostly loaded the

00:07:16,300 --> 00:07:20,530
trick is that you don't feel like you've

00:07:17,530 --> 00:07:24,900
been waiting at all even though the the

00:07:20,530 --> 00:07:24,900
actual loading time is exactly the same

00:07:25,470 --> 00:07:30,100
another example we check out that has

00:07:28,690 --> 00:07:33,280
this option that I mentioned earlier

00:07:30,100 --> 00:07:37,360
that lets you save your payment info so

00:07:33,280 --> 00:07:39,730
you just mention your phone number you

00:07:37,360 --> 00:07:43,360
hit pay and basically that's all this no

00:07:39,730 --> 00:07:44,920
there's no password or whatever now the

00:07:43,360 --> 00:07:46,930
interesting part is when you actually

00:07:44,920 --> 00:07:50,320
reach when you actually use another

00:07:46,930 --> 00:07:53,290
device such as in this case my mobile

00:07:50,320 --> 00:07:56,500
phone so I just start by typing my email

00:07:53,290 --> 00:07:58,540
address and then stripe recognize it as

00:07:56,500 --> 00:08:01,240
a stripe account so it sends me

00:07:58,540 --> 00:08:05,410
automatically a verification code with a

00:08:01,240 --> 00:08:08,169
text message so I just enter the four

00:08:05,410 --> 00:08:10,270
digits and I find my payment form

00:08:08,169 --> 00:08:13,450
prefilled with my credit card info

00:08:10,270 --> 00:08:15,040
without any kind of password etc so

00:08:13,450 --> 00:08:17,440
that's a pretty nifty process if you ask

00:08:15,040 --> 00:08:21,730
me but I'm just showing you this flow in

00:08:17,440 --> 00:08:23,110
order to focus on one specific part of

00:08:21,730 --> 00:08:25,840
the entire thing

00:08:23,110 --> 00:08:28,810
so I look at the bottom of the screen

00:08:25,840 --> 00:08:32,200
there where it's a sending code so you

00:08:28,810 --> 00:08:36,280
have the spinner and then sent and then

00:08:32,200 --> 00:08:38,770
a confirmation message so this whole

00:08:36,280 --> 00:08:41,289
animation there is actually actually a

00:08:38,770 --> 00:08:44,440
lie we have no idea when the message has

00:08:41,289 --> 00:08:48,160
been sent so why do we do that like wait

00:08:44,440 --> 00:08:49,810
why do we lie to our customers well it's

00:08:48,160 --> 00:08:50,940
exactly the same principle as weaved

00:08:49,810 --> 00:08:52,860
Reeboks there's

00:08:50,940 --> 00:08:54,870
always a small delay back before the

00:08:52,860 --> 00:08:57,030
tech message actually gets delivered and

00:08:54,870 --> 00:08:59,310
so by the time the animation finishes

00:08:57,030 --> 00:09:00,990
the probability that the message

00:08:59,310 --> 00:09:03,300
actually gets delivered is way higher

00:09:00,990 --> 00:09:05,340
and even in the case where the message

00:09:03,300 --> 00:09:08,040
comes before the end of the animation

00:09:05,340 --> 00:09:12,780
the reaction is often oh my god he went

00:09:08,040 --> 00:09:16,830
actually faster than they expected so

00:09:12,780 --> 00:09:18,630
the point of all of this is that the

00:09:16,830 --> 00:09:20,820
actual performance of your application

00:09:18,630 --> 00:09:22,860
and the perception of your users are two

00:09:20,820 --> 00:09:24,840
completely separate things and of course

00:09:22,860 --> 00:09:27,660
the only thing that truly matters is a

00:09:24,840 --> 00:09:32,010
perception and that's exactly why where

00:09:27,660 --> 00:09:33,690
you should put your efforts on so to

00:09:32,010 --> 00:09:35,700
continue a little bit uncheck out a big

00:09:33,690 --> 00:09:38,670
part of the reason why we chose to go

00:09:35,700 --> 00:09:41,340
for a CSS animation here instead of

00:09:38,670 --> 00:09:44,430
using a real video was again the speed

00:09:41,340 --> 00:09:46,950
loading all the assets for the entire

00:09:44,430 --> 00:09:49,020
animation is extremely fast while having

00:09:46,950 --> 00:09:51,420
the same thing as a real video which

00:09:49,020 --> 00:09:53,910
would be retina friendly etc would be

00:09:51,420 --> 00:09:56,100
extremely heavy and slow to load and of

00:09:53,910 --> 00:09:57,990
course using a CSS animation also comes

00:09:56,100 --> 00:10:02,310
with a lot of other benefits such as

00:09:57,990 --> 00:10:04,110
being super easy to edit you can be like

00:10:02,310 --> 00:10:06,990
SEO friendly you can make some part of

00:10:04,110 --> 00:10:08,400
the animations responsive if you want so

00:10:06,990 --> 00:10:16,050
yeah there's a lot of benefits of using

00:10:08,400 --> 00:10:18,390
a CSS animation so I'd like to focus

00:10:16,050 --> 00:10:21,450
again on the Chinese part of this page

00:10:18,390 --> 00:10:24,570
and explain how these small bouncing

00:10:21,450 --> 00:10:26,760
arrow works I know it looks trivial but

00:10:24,570 --> 00:10:28,650
most of the time this these animations

00:10:26,760 --> 00:10:32,130
look completely off because the wrong

00:10:28,650 --> 00:10:34,820
approach is used so let me just simplify

00:10:32,130 --> 00:10:38,670
this example in order to focus on the

00:10:34,820 --> 00:10:40,110
actual animation and not the visuals so

00:10:38,670 --> 00:10:44,100
most of the time what people try to do

00:10:40,110 --> 00:10:46,140
is to apply a custom cubic Bezier curve

00:10:44,100 --> 00:10:48,089
on the entire animation declaration and

00:10:46,140 --> 00:10:50,040
then they try to treat the values inside

00:10:48,089 --> 00:10:52,290
the keyframes in order to reach natural

00:10:50,040 --> 00:10:53,760
bounds well turns out is pretty much

00:10:52,290 --> 00:10:56,339
impossible to reach some field that

00:10:53,760 --> 00:11:00,510
feels just right this way so what you

00:10:56,339 --> 00:11:02,280
want to do instead is to use two

00:11:00,510 --> 00:11:03,870
completely different and opposite

00:11:02,280 --> 00:11:04,710
eating's inside the animation so you

00:11:03,870 --> 00:11:06,900
want the

00:11:04,710 --> 00:11:08,820
Square to accelerate as it goes to the

00:11:06,900 --> 00:11:12,360
left and decelerate decelerate as it

00:11:08,820 --> 00:11:14,280
goes to the right so instead of applying

00:11:12,360 --> 00:11:16,350
a custom cubic Bezier curve on the

00:11:14,280 --> 00:11:18,360
animation declaration we're just going

00:11:16,350 --> 00:11:19,830
to keep it linear what what's

00:11:18,360 --> 00:11:22,830
interesting here is that we can actually

00:11:19,830 --> 00:11:27,120
change and switch the timing functions

00:11:22,830 --> 00:11:30,510
inside the keyframes so from zero to 50%

00:11:27,120 --> 00:11:33,290
of the animation we are going to use an

00:11:30,510 --> 00:11:36,180
easel timing function so the square

00:11:33,290 --> 00:11:38,040
decelerates and then from the middle of

00:11:36,180 --> 00:11:40,440
that the animation to the end of the

00:11:38,040 --> 00:11:42,330
animation so for the square to come back

00:11:40,440 --> 00:11:45,360
to its initial stage we're going to

00:11:42,330 --> 00:11:48,600
switch and use an easing timing function

00:11:45,360 --> 00:11:50,850
so the square accelerates that way we're

00:11:48,600 --> 00:11:55,950
not trying to fake the correct Easons

00:11:50,850 --> 00:11:58,020
they are actually accurate now this kind

00:11:55,950 --> 00:12:00,120
of bouncy animation is pretty popular

00:11:58,020 --> 00:12:04,170
these days and write it so it often

00:12:00,120 --> 00:12:06,630
makes your your animations look a bit

00:12:04,170 --> 00:12:09,360
more natural so quick example here with

00:12:06,630 --> 00:12:11,970
this white box that sort of bounces a

00:12:09,360 --> 00:12:13,470
little bit before it disappears and then

00:12:11,970 --> 00:12:15,660
there's another bone bounce which is

00:12:13,470 --> 00:12:21,180
slightly less visible here on the yellow

00:12:15,660 --> 00:12:24,810
selection so yeah and another example

00:12:21,180 --> 00:12:29,340
with this bouncy animation as you hover

00:12:24,810 --> 00:12:31,290
the channels now writing keyframes every

00:12:29,340 --> 00:12:33,120
time you want to produce a tiny bounce

00:12:31,290 --> 00:12:35,820
effect it's super annoying right you

00:12:33,120 --> 00:12:37,440
have to first name your keyframes which

00:12:35,820 --> 00:12:42,510
is as we all know the most complicated

00:12:37,440 --> 00:12:44,400
issue in computer science you have to

00:12:42,510 --> 00:12:46,980
write the actual keyframes and then use

00:12:44,400 --> 00:12:48,510
them as an animation which makes the

00:12:46,980 --> 00:12:50,520
whole syntax not super friendly

00:12:48,510 --> 00:12:53,460
especially since most browsers still

00:12:50,520 --> 00:12:55,320
require vendor prefixes etc so when you

00:12:53,460 --> 00:12:58,650
can you really want to use transitions

00:12:55,320 --> 00:13:00,720
instead of animations terms of

00:12:58,650 --> 00:13:02,820
Evangelina explained this whole topic

00:13:00,720 --> 00:13:05,400
earlier better than could ever do so

00:13:02,820 --> 00:13:07,710
I'll be quick but cubic Bezier curve

00:13:05,400 --> 00:13:10,770
allow us to just do that by specific

00:13:07,710 --> 00:13:12,780
specifying values above 1 so in this

00:13:10,770 --> 00:13:14,550
case the last value is 1.2 which is

00:13:12,780 --> 00:13:16,680
represented on the graph by this curve

00:13:14,550 --> 00:13:18,439
that goes above the top limit and that

00:13:16,680 --> 00:13:22,649
creates that kind of bonds of

00:13:18,439 --> 00:13:24,480
now keep in mind that this is sort of a

00:13:22,649 --> 00:13:26,879
hack as you're not creating something

00:13:24,480 --> 00:13:29,670
perfectly accurate but for simple

00:13:26,879 --> 00:13:33,329
animations it's an actually acceptable

00:13:29,670 --> 00:13:35,149
trade-off all right so let's move on to

00:13:33,329 --> 00:13:37,589
the next example

00:13:35,149 --> 00:13:40,259
so this is the landing page we used to

00:13:37,589 --> 00:13:42,360
announce our VidCon support so this

00:13:40,259 --> 00:13:44,850
animation shows the purchasing

00:13:42,360 --> 00:13:47,480
experience and the way you integrated in

00:13:44,850 --> 00:13:54,870
your products which is basically just a

00:13:47,480 --> 00:14:02,309
data attribute so yeah I had a lot of

00:13:54,870 --> 00:14:05,279
fun recreating them there so I'd like to

00:14:02,309 --> 00:14:07,439
focus again on just one specific part of

00:14:05,279 --> 00:14:11,670
this animation in order to cover a few

00:14:07,439 --> 00:14:14,129
general techniques and principles so

00:14:11,670 --> 00:14:16,259
first of all and sorry about that I know

00:14:14,129 --> 00:14:18,569
this has conf but I like to highlight

00:14:16,259 --> 00:14:22,519
the fact that in most cases CSS won't be

00:14:18,569 --> 00:14:22,519
enough you'll actually need JavaScript

00:14:22,910 --> 00:14:29,069
CSS is the best rendering engine for

00:14:26,240 --> 00:14:31,800
animations and you should rely on CSS as

00:14:29,069 --> 00:14:35,009
much as possible now don't get me wrong

00:14:31,800 --> 00:14:37,829
it's possible to create perfectly smooth

00:14:35,009 --> 00:14:40,079
animations in JavaScript in most cases

00:14:37,829 --> 00:14:42,689
using request animation frame but in

00:14:40,079 --> 00:14:44,639
some cases like having multiple HTTP

00:14:42,689 --> 00:14:46,170
requests during your animation while

00:14:44,639 --> 00:14:48,779
Javas people won't be able to give you

00:14:46,170 --> 00:14:51,929
60 FPS all the time and that's exactly

00:14:48,779 --> 00:14:54,019
where I where CSS finds by running all

00:14:51,929 --> 00:14:57,179
your animations on a separate thread

00:14:54,019 --> 00:14:59,579
you're pretty sure to get 60fps all the

00:14:57,179 --> 00:15:01,649
time even if you have multiple network

00:14:59,579 --> 00:15:06,769
access if you even if you have heavy Dom

00:15:01,649 --> 00:15:09,209
manipulation during your animations now

00:15:06,769 --> 00:15:12,389
JavaScript will actually be very useful

00:15:09,209 --> 00:15:15,689
for creating and running these CSS

00:15:12,389 --> 00:15:18,379
animations so why is that well first you

00:15:15,689 --> 00:15:21,029
have access to events so by using

00:15:18,379 --> 00:15:23,670
transition end and the animation end

00:15:21,029 --> 00:15:26,100
events you are actually creating real

00:15:23,670 --> 00:15:28,529
sequence of animations otherwise you

00:15:26,100 --> 00:15:30,329
would have to fake the sequence by using

00:15:28,529 --> 00:15:31,730
manual delays everywhere which is not

00:15:30,329 --> 00:15:33,620
maintainable especially

00:15:31,730 --> 00:15:38,200
in a pretty big animation such as the

00:15:33,620 --> 00:15:40,940
the beacon 1 another important point

00:15:38,200 --> 00:15:44,510
it's very easy in JavaScript of course

00:15:40,940 --> 00:15:45,890
to define random delays random random

00:15:44,510 --> 00:15:47,840
values basically that you can use

00:15:45,890 --> 00:15:50,090
everywhere which leads me to the church

00:15:47,840 --> 00:15:53,720
at the third and most important point is

00:15:50,090 --> 00:15:56,890
that by using javascript you're actually

00:15:53,720 --> 00:16:00,070
sort of forced to create better results

00:15:56,890 --> 00:16:02,600
all right so let's take a small example

00:16:00,070 --> 00:16:06,220
from the beaker and I animation I showed

00:16:02,600 --> 00:16:06,220
you earlier to illustrate these points

00:16:06,250 --> 00:16:11,060
so the small example I'd like to cover

00:16:08,600 --> 00:16:12,710
this animation on the text that explain

00:16:11,060 --> 00:16:15,110
what's going on on the right so it uses

00:16:12,710 --> 00:16:18,920
the same animation first to appear on

00:16:15,110 --> 00:16:23,240
the screen and then to switch to the

00:16:18,920 --> 00:16:26,540
next slide so the principle is pretty

00:16:23,240 --> 00:16:28,610
straightforward you you want to wrap

00:16:26,540 --> 00:16:30,500
each letter of the text in a separate

00:16:28,610 --> 00:16:32,900
element and then you want to apply the

00:16:30,500 --> 00:16:35,030
same transition from opacity zero to one

00:16:32,900 --> 00:16:38,540
with a slightly different delay for each

00:16:35,030 --> 00:16:40,460
element of course doing that by hand

00:16:38,540 --> 00:16:41,870
would be pretty much impossible as and

00:16:40,460 --> 00:16:44,960
that's exactly why you want to use

00:16:41,870 --> 00:16:46,330
something like JavaScript so let's see

00:16:44,960 --> 00:16:49,730
how it works under the hood

00:16:46,330 --> 00:16:52,130
so first I'm defining a function called

00:16:49,730 --> 00:16:54,500
R wrap letters so in case you are not

00:16:52,130 --> 00:16:56,600
familiar with the syntax I'm using the

00:16:54,500 --> 00:16:58,760
new version of ACMA script here I

00:16:56,600 --> 00:17:01,580
strongly encourage you to take the

00:16:58,760 --> 00:17:03,920
plunge and to embrace it today not only

00:17:01,580 --> 00:17:07,360
because it's more powerful but because

00:17:03,920 --> 00:17:09,980
it can make your code much cleaner it's

00:17:07,360 --> 00:17:11,930
very easy to use you can use transpilers

00:17:09,980 --> 00:17:14,180
like Babel to support other browser etc

00:17:11,930 --> 00:17:17,360
so there's literally no no valid reason

00:17:14,180 --> 00:17:20,450
for avoiding it today anyway so this

00:17:17,360 --> 00:17:23,930
function takes a Dom element and it

00:17:20,450 --> 00:17:27,140
retrieves its text content then it

00:17:23,930 --> 00:17:30,590
splits the entire sentence into an array

00:17:27,140 --> 00:17:32,900
of words and for each words found in

00:17:30,590 --> 00:17:36,230
this array is going to create a span

00:17:32,900 --> 00:17:38,480
element with a letter plus then it just

00:17:36,230 --> 00:17:41,180
has to concatenate all the elements in

00:17:38,480 --> 00:17:44,660
the array into a big string and finally

00:17:41,180 --> 00:17:45,570
it just has to replace the content of

00:17:44,660 --> 00:17:50,279
the original

00:17:45,570 --> 00:17:53,070
by this big string of span elements so

00:17:50,279 --> 00:17:54,989
initially the HTML source code for this

00:17:53,070 --> 00:17:58,139
text was looking like this super simple

00:17:54,989 --> 00:18:00,570
just to title and paragraph now did

00:17:58,139 --> 00:18:01,830
final generated um resulting from the

00:18:00,570 --> 00:18:03,179
script we've just explained look like

00:18:01,830 --> 00:18:06,119
this and you can see that all the

00:18:03,179 --> 00:18:10,039
letters from Ajax takes blah blah are

00:18:06,119 --> 00:18:10,039
now wrapped in two separate elements

00:18:10,759 --> 00:18:17,999
also know that we have each letter rat

00:18:14,840 --> 00:18:20,220
in span we just want to apply the same

00:18:17,999 --> 00:18:21,989
transition on all the element all these

00:18:20,220 --> 00:18:24,989
elements so we just start by selecting

00:18:21,989 --> 00:18:27,239
these elements and then we create a loop

00:18:24,989 --> 00:18:30,299
and inside the loop we are just going to

00:18:27,239 --> 00:18:32,970
multiply the index inside the loop by a

00:18:30,299 --> 00:18:35,129
specified delay which is ten millisecond

00:18:32,970 --> 00:18:37,229
in this case so the first element won't

00:18:35,129 --> 00:18:38,940
have any delay at all and then is going

00:18:37,229 --> 00:18:40,830
to be ten milliseconds and then 20 and

00:18:38,940 --> 00:18:42,359
then 30 etc and that's basically all

00:18:40,830 --> 00:18:44,749
it's it's pretty it's pretty

00:18:42,359 --> 00:18:44,749
straightforward

00:18:45,200 --> 00:18:51,479
now writing a lot of kaleidos is pretty

00:18:48,720 --> 00:18:54,509
annoying and honestly I've seen myself

00:18:51,479 --> 00:18:56,820
many times trying to convince myself

00:18:54,509 --> 00:18:58,950
that an animation idea that I had in

00:18:56,820 --> 00:19:01,200
mind was actually terrible baba just

00:18:58,950 --> 00:19:04,799
because I was way too lazy to write the

00:19:01,200 --> 00:19:07,739
actual code for trying this animation so

00:19:04,799 --> 00:19:10,590
in order to fight my natural laziness I

00:19:07,739 --> 00:19:12,649
wrote this tiny helper that does a bunch

00:19:10,590 --> 00:19:15,629
of things like you don't have to select

00:19:12,649 --> 00:19:18,090
elements and that loop over them etc you

00:19:15,629 --> 00:19:20,609
can just pass in a CSS selector it

00:19:18,090 --> 00:19:23,220
accepts unitless values it automatically

00:19:20,609 --> 00:19:25,409
listens for transition and events and it

00:19:23,220 --> 00:19:27,659
also sort of promotes best practices by

00:19:25,409 --> 00:19:31,559
allowing you to only animate opacity and

00:19:27,659 --> 00:19:33,239
transform related functions so I

00:19:31,559 --> 00:19:36,960
strongly encourage you to use a library

00:19:33,239 --> 00:19:39,149
like my animate helper here or basically

00:19:36,960 --> 00:19:41,489
anything that won't prevent you from

00:19:39,149 --> 00:19:43,609
exploring new ideas just because the

00:19:41,489 --> 00:19:46,499
code you would have to write is painful

00:19:43,609 --> 00:19:48,629
use tools make your life easier the web

00:19:46,499 --> 00:19:50,580
is is hard enough and if it's hard for

00:19:48,629 --> 00:19:50,970
you to produce the ID that you had in

00:19:50,580 --> 00:19:52,979
mind

00:19:50,970 --> 00:19:55,789
that's bad code the code should never

00:19:52,979 --> 00:19:59,989
hurt your creativity it should give like

00:19:55,789 --> 00:19:59,989
superpowers to your creativity instead

00:20:02,130 --> 00:20:10,570
okay so the last thing I want to briefly

00:20:06,789 --> 00:20:14,770
talk about is how to bring a little bit

00:20:10,570 --> 00:20:17,260
of death into your animations so in the

00:20:14,770 --> 00:20:19,780
real wall nothing is flat obviously and

00:20:17,260 --> 00:20:22,990
I think that losing in the losing that

00:20:19,780 --> 00:20:25,990
that component in software design is an

00:20:22,990 --> 00:20:27,220
unfortunate oversimplification truly

00:20:25,990 --> 00:20:29,740
actually helps a lot

00:20:27,220 --> 00:20:31,210
understanding how objects behave and how

00:20:29,740 --> 00:20:34,240
they relate to each other

00:20:31,210 --> 00:20:37,390
so it seems to be like a good idea to

00:20:34,240 --> 00:20:42,789
get inspired by the real wall to build

00:20:37,390 --> 00:20:45,789
our apps now we try that before right

00:20:42,789 --> 00:20:47,919
remember that horrible trench where we

00:20:45,789 --> 00:20:50,289
were trying to imitate real-life objects

00:20:47,919 --> 00:20:51,730
into our apps that's kind of the same

00:20:50,289 --> 00:20:55,929
thing as I just suggested for a

00:20:51,730 --> 00:20:58,840
animation right well no it's not copying

00:20:55,929 --> 00:21:01,419
a real-life object and a specific visual

00:20:58,840 --> 00:21:03,730
style is fundamentally wrong as our

00:21:01,419 --> 00:21:05,980
tools constantly evolve most of the

00:21:03,730 --> 00:21:08,110
things that we are using today you don't

00:21:05,980 --> 00:21:11,650
exist a hundred years ago and will

00:21:08,110 --> 00:21:14,020
eventually disappear but physics that's

00:21:11,650 --> 00:21:16,030
not going to change right it's not a

00:21:14,020 --> 00:21:19,030
trend it's not something related to a

00:21:16,030 --> 00:21:21,070
specific period of your life and I think

00:21:19,030 --> 00:21:22,900
it's safe to assume that that to assume

00:21:21,070 --> 00:21:27,090
that physics are not too radically

00:21:22,900 --> 00:21:27,090
changed in the foreseeable future so

00:21:28,830 --> 00:21:36,520
let's just see two quick examples of how

00:21:32,890 --> 00:21:40,870
a subtle 3d effect can improve a little

00:21:36,520 --> 00:21:44,260
bit your interface so the first one is

00:21:40,870 --> 00:21:47,110
this shaking window so this this kind of

00:21:44,260 --> 00:21:50,380
shaking animation is not right is it not

00:21:47,110 --> 00:21:52,330
in the new right but the what I like

00:21:50,380 --> 00:21:55,630
about this one is that it also has this

00:21:52,330 --> 00:21:59,740
subtle 3d rotation so when we use this

00:21:55,630 --> 00:22:01,659
kind of like shaking animation it sort

00:21:59,740 --> 00:22:04,690
of imitates the movement that we do with

00:22:01,659 --> 00:22:06,490
our head when we say no right and so I

00:22:04,690 --> 00:22:08,799
think it's interesting here to go the

00:22:06,490 --> 00:22:12,090
extra mile and also imitate the actual

00:22:08,799 --> 00:22:16,560
rotation that we do with our head

00:22:12,090 --> 00:22:19,770
so another example with this animation

00:22:16,560 --> 00:22:21,840
as you enable remember me so the block

00:22:19,770 --> 00:22:24,090
that appears and disappears when you

00:22:21,840 --> 00:22:26,940
toggle the checkbox it's kind of

00:22:24,090 --> 00:22:29,130
unfolding from this section and the 3d

00:22:26,940 --> 00:22:31,080
effect here really amplifies that

00:22:29,130 --> 00:22:35,280
behavior and consolidates the

00:22:31,080 --> 00:22:37,320
relationship between these elements so

00:22:35,280 --> 00:22:40,440
let me simplify again this animation in

00:22:37,320 --> 00:22:44,850
order to focus on the interesting part

00:22:40,440 --> 00:22:48,600
which is the tree transform well the

00:22:44,850 --> 00:22:51,360
gray looks like white here whatever so

00:22:48,600 --> 00:22:54,300
by default what we want to do is to

00:22:51,360 --> 00:22:56,280
rotate the bottom part in 3d and then

00:22:54,300 --> 00:23:01,980
can sell the transform when the check

00:22:56,280 --> 00:23:04,470
box is selected so let's start with the

00:23:01,980 --> 00:23:07,740
HTML which is super basic we're just

00:23:04,470 --> 00:23:10,380
using two labels one for the remember me

00:23:07,740 --> 00:23:14,940
checkbox and then another one for the

00:23:10,380 --> 00:23:17,400
phone number the JavaScript part is also

00:23:14,940 --> 00:23:20,430
super simple we just attach likely given

00:23:17,400 --> 00:23:22,260
to the check box and the toggle inactive

00:23:20,430 --> 00:23:26,780
clasp to the bottom part when the check

00:23:22,260 --> 00:23:30,930
box is selected super straightforward

00:23:26,780 --> 00:23:33,920
now the interesting part is the CSS

00:23:30,930 --> 00:23:38,280
obviously so by default the whole block

00:23:33,920 --> 00:23:44,460
gets rotated by minus the quarter of a

00:23:38,280 --> 00:23:47,010
turn which is minus 90 degrees so if you

00:23:44,460 --> 00:23:51,270
visualize it in 3d is now perfectly flat

00:23:47,010 --> 00:23:54,990
so you basically you don't see it so we

00:23:51,270 --> 00:23:58,680
also apply transition and then we cancel

00:23:54,990 --> 00:24:04,740
the transform when the active plus gets

00:23:58,680 --> 00:24:09,030
applied to the phone idea so let's see

00:24:04,740 --> 00:24:10,350
how it looks it's sort of works but the

00:24:09,030 --> 00:24:11,970
transformation is applied from the

00:24:10,350 --> 00:24:14,160
center of the element which is a good

00:24:11,970 --> 00:24:17,280
default in most cases but in this

00:24:14,160 --> 00:24:19,510
specific case that's not what we want so

00:24:17,280 --> 00:24:22,330
we just have to change the transform

00:24:19,510 --> 00:24:24,550
origin so we force the rotation to start

00:24:22,330 --> 00:24:29,080
at the very top of the element instead

00:24:24,550 --> 00:24:35,290
and that's all we have our nifty treaty

00:24:29,080 --> 00:24:39,820
and folding animation so the last advice

00:24:35,290 --> 00:24:42,040
I want to share with you it's the most

00:24:39,820 --> 00:24:43,930
important one in my opinion don't forget

00:24:42,040 --> 00:24:46,480
that having fun at what you do is the

00:24:43,930 --> 00:24:49,390
best way to produce great results go the

00:24:46,480 --> 00:24:52,740
extra mile play experiment and be happy

00:24:49,390 --> 00:24:52,740

YouTube URL: https://www.youtube.com/watch?v=J6wUmQDQBkw


