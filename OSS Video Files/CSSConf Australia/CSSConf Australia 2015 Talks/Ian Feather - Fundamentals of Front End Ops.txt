Title: Ian Feather - Fundamentals of Front End Ops
Publication date: 2015-07-01
Playlist: CSSConf Australia 2015 Talks
Description: 
	Thanks to our friends at SitePoint, Ian Feather's CSSConf Australia 2015 presentation: Fundamentals of Front End Ops

http://2015.cssconf.com.au/
https://twitter.com/ianfeather
http://ianfeather.co.uk
Captions: 
	00:00:00,000 --> 00:00:03,689
my name is Ian thank you for having me

00:00:01,530 --> 00:00:06,240
and I'm really really excited to be here

00:00:03,689 --> 00:00:08,099
and talk to you about the fundamentals

00:00:06,240 --> 00:00:11,820
of front-end ops then you get rid of

00:00:08,099 --> 00:00:12,750
that cursor so it isn't annoying and so

00:00:11,820 --> 00:00:15,410
this is gonna be kind of a high-level

00:00:12,750 --> 00:00:17,520
talk covering quite a lot of the

00:00:15,410 --> 00:00:19,970
different parts that we talk about which

00:00:17,520 --> 00:00:22,080
we start to relate to with front-end ops

00:00:19,970 --> 00:00:24,300
because it's going to be so high level

00:00:22,080 --> 00:00:26,310
and kind of packed quite a lot of

00:00:24,300 --> 00:00:29,789
content in and this is also available on

00:00:26,310 --> 00:00:33,210
my site and and you can interrupt that

00:00:29,789 --> 00:00:38,940
and get more detailed by hitting I any

00:00:33,210 --> 00:00:41,969
point okay so Alex Sexton wrote an

00:00:38,940 --> 00:00:45,480
article in 2013 on smashing magazine and

00:00:41,969 --> 00:00:47,879
where he hypothesized on this role of a

00:00:45,480 --> 00:00:50,010
front-end operations engineer and a role

00:00:47,879 --> 00:00:53,340
which didn't exist then and which some

00:00:50,010 --> 00:00:55,289
extent still doesn't exist now and in it

00:00:53,340 --> 00:00:56,730
he said that the metric by which

00:00:55,289 --> 00:01:00,059
printing operation engineer will be

00:00:56,730 --> 00:01:03,149
judged is speed and he talked about

00:01:00,059 --> 00:01:05,189
speed in three different ways so what we

00:01:03,149 --> 00:01:07,290
talked about is the speed at which we

00:01:05,189 --> 00:01:10,890
can get code that were working on day to

00:01:07,290 --> 00:01:13,260
day our features up to the server then

00:01:10,890 --> 00:01:15,900
we have the speed that we can get that

00:01:13,260 --> 00:01:18,590
code that experience to start happening

00:01:15,900 --> 00:01:22,830
on the user's browser and finally

00:01:18,590 --> 00:01:24,960
getting metrics and data back from the

00:01:22,830 --> 00:01:27,479
user back the developer and completing

00:01:24,960 --> 00:01:30,540
the loop and allowing us to make better

00:01:27,479 --> 00:01:35,610
products there's another part of the

00:01:30,540 --> 00:01:39,090
talk that I want to to make and that's

00:01:35,610 --> 00:01:40,350
that and the culture of DevOps which has

00:01:39,090 --> 00:01:42,930
sort of been established and is

00:01:40,350 --> 00:01:44,490
establishing over the past few years is

00:01:42,930 --> 00:01:47,570
really about stopping throwing code over

00:01:44,490 --> 00:01:50,040
the world and blurring the lines between

00:01:47,570 --> 00:01:53,880
developers and operations and allowing

00:01:50,040 --> 00:01:55,200
developers to really sort of take

00:01:53,880 --> 00:01:59,189
responsibility for the code that they're

00:01:55,200 --> 00:02:01,469
running on the service and this has

00:01:59,189 --> 00:02:04,649
definitely worked to some extent and the

00:02:01,469 --> 00:02:06,049
lines have been blurred and the results

00:02:04,649 --> 00:02:09,780
of those process have been really good

00:02:06,049 --> 00:02:11,240
but I still feel as if front end is the

00:02:09,780 --> 00:02:13,880
is the last

00:02:11,240 --> 00:02:17,540
the last winter fall and there is still

00:02:13,880 --> 00:02:19,280
as war between front end and between the

00:02:17,540 --> 00:02:22,040
DevOps environment I think it's time

00:02:19,280 --> 00:02:23,600
that we we knock down that wall and took

00:02:22,040 --> 00:02:25,160
more responsibility and got involved

00:02:23,600 --> 00:02:28,460
with things they're outside of our

00:02:25,160 --> 00:02:31,430
editors so I'm not going to be talking

00:02:28,460 --> 00:02:33,320
about our editor I'm not going to be

00:02:31,430 --> 00:02:36,020
talking about CSS controversially but

00:02:33,320 --> 00:02:37,910
I'm sure they'll be plenty of that today

00:02:36,020 --> 00:02:40,010
and tomorrow I what I want to talk about

00:02:37,910 --> 00:02:43,010
is everything outside of the editor and

00:02:40,010 --> 00:02:45,040
I wouldn't talk about speed and safety

00:02:43,010 --> 00:02:47,780
of pushing code up to the server and

00:02:45,040 --> 00:02:50,240
getting that user experience to the user

00:02:47,780 --> 00:02:51,800
as quickly as possible and then Phil

00:02:50,240 --> 00:02:53,720
finally you know completing that

00:02:51,800 --> 00:03:05,600
feedback loop and getting it back to as

00:02:53,720 --> 00:03:08,510
developers ok so the fastest way for us

00:03:05,600 --> 00:03:11,240
to deliver code directly to the server

00:03:08,510 --> 00:03:13,970
is to change the code they're actually

00:03:11,240 --> 00:03:15,050
on the server and I'm sure you've all

00:03:13,970 --> 00:03:17,810
been in situations where this has

00:03:15,050 --> 00:03:20,570
happened before ideally this no longer

00:03:17,810 --> 00:03:23,150
happens that whilst it is the fastest

00:03:20,570 --> 00:03:25,220
way to to change code directly on the

00:03:23,150 --> 00:03:27,620
server it's of course not safe it's

00:03:25,220 --> 00:03:29,960
incredibly risky thing to do and what we

00:03:27,620 --> 00:03:32,000
want to do to protect production and

00:03:29,960 --> 00:03:34,190
environment is to create a certain

00:03:32,000 --> 00:03:36,470
amount of gates that code has to pass

00:03:34,190 --> 00:03:38,690
through a certain amount of tests so

00:03:36,470 --> 00:03:40,460
that we can ensure that when it gets the

00:03:38,690 --> 00:03:43,130
server it's in the best possible shape

00:03:40,460 --> 00:03:46,520
and we also need to de-risk development

00:03:43,130 --> 00:03:49,610
and what I mean by that is that if a bug

00:03:46,520 --> 00:03:52,640
occurs on the live site or if the site

00:03:49,610 --> 00:03:55,070
goes down or anything like that that is

00:03:52,640 --> 00:03:57,350
not the fault of a developer it's the

00:03:55,070 --> 00:04:00,140
fault of the system that we created to

00:03:57,350 --> 00:04:01,820
get that code up to the server so no

00:04:00,140 --> 00:04:08,180
point should there be any blame pointing

00:04:01,820 --> 00:04:12,379
up a particular person our first stop

00:04:08,180 --> 00:04:16,220
see to create a gate to look after our

00:04:12,379 --> 00:04:17,720
code is directly as the users writing it

00:04:16,220 --> 00:04:22,759
and I say the user in this case is the

00:04:17,720 --> 00:04:25,729
developer and as we save as we're

00:04:22,759 --> 00:04:28,310
actually typing and writing code we can

00:04:25,729 --> 00:04:32,410
be using editor plugins to Lin taco to

00:04:28,310 --> 00:04:35,240
use CSS lint or JS hints or es lint and

00:04:32,410 --> 00:04:37,280
using tools like editor config to make

00:04:35,240 --> 00:04:40,610
sure that we all have the same kind of

00:04:37,280 --> 00:04:43,699
set up in our editors with style guide

00:04:40,610 --> 00:04:46,220
compliance I personally don't believe it

00:04:43,699 --> 00:04:48,110
matters what particular style we write

00:04:46,220 --> 00:04:50,560
our coding as long as we all buy into

00:04:48,110 --> 00:04:52,849
the same philosophy and the same code

00:04:50,560 --> 00:04:56,330
what we don't what we want to avoid is

00:04:52,849 --> 00:04:58,220
arguments about semicolons and you know

00:04:56,330 --> 00:05:02,000
brackets these are things which should

00:04:58,220 --> 00:05:05,240
be just handled up front and we can use

00:05:02,000 --> 00:05:06,740
pre-commit hooks and gets and other

00:05:05,240 --> 00:05:09,259
version control systems allow you to use

00:05:06,740 --> 00:05:12,740
hooks and pre-commit post commit pre

00:05:09,259 --> 00:05:14,479
push post push and we can use pre

00:05:12,740 --> 00:05:16,940
convert hooks to remove any accidental

00:05:14,479 --> 00:05:19,070
code code that we know for sure isn't

00:05:16,940 --> 00:05:20,900
going to be needed in a production

00:05:19,070 --> 00:05:24,889
environment things like consult our logs

00:05:20,900 --> 00:05:28,190
debuggers merge conflicts we need to

00:05:24,889 --> 00:05:30,919
remove these and this this stage this

00:05:28,190 --> 00:05:34,190
first gate has to be fast because this

00:05:30,919 --> 00:05:37,880
is a synchronous part of our development

00:05:34,190 --> 00:05:39,740
pipeline developers are like inherently

00:05:37,880 --> 00:05:42,680
lazy and this is something that we

00:05:39,740 --> 00:05:44,150
should encourage and be proud of we want

00:05:42,680 --> 00:05:46,720
to ship code we want to do as fast as we

00:05:44,150 --> 00:05:48,880
can and anything you put the blocks

00:05:46,720 --> 00:05:52,580
developer in this particular situation

00:05:48,880 --> 00:05:55,759
they'll find a way around and then yeah

00:05:52,580 --> 00:06:01,660
it will just be pointless so keep it

00:05:55,759 --> 00:06:05,820
quick after we've pushed

00:06:01,660 --> 00:06:08,530
after we feel like our feature is ready

00:06:05,820 --> 00:06:10,210
we we can run some more tests and this

00:06:08,530 --> 00:06:13,420
is our first asynchronous part of the

00:06:10,210 --> 00:06:16,150
development pipeline this gives us an

00:06:13,420 --> 00:06:18,520
opportunity to run longer tests to maybe

00:06:16,150 --> 00:06:23,200
run the entire suite this could be done

00:06:18,520 --> 00:06:30,010
on brunch build and on github or locally

00:06:23,200 --> 00:06:32,680
in some other system okay it's an

00:06:30,010 --> 00:06:36,250
opportunity for us to join the full test

00:06:32,680 --> 00:06:40,780
to run some code size analysis and

00:06:36,250 --> 00:06:42,820
quality complexity analysis and because

00:06:40,780 --> 00:06:45,700
the user which is developer isn't having

00:06:42,820 --> 00:06:49,990
to interrupt the code at this point we

00:06:45,700 --> 00:06:52,330
can take more time over the third and

00:06:49,990 --> 00:06:56,950
very important part of the pipeline is

00:06:52,330 --> 00:06:59,740
code review this is a huge topic and

00:06:56,950 --> 00:07:01,900
probably could be a talk in itself but i

00:06:59,740 --> 00:07:04,870
think it's an incredibly important part

00:07:01,900 --> 00:07:06,550
of the pipeline code reviewer and in my

00:07:04,870 --> 00:07:09,220
opinion should start before any code is

00:07:06,550 --> 00:07:11,290
written whatsoever so if you're

00:07:09,220 --> 00:07:13,180
attacking a feature you're coming up

00:07:11,290 --> 00:07:14,860
with a solution you should be picking

00:07:13,180 --> 00:07:16,960
the person who's going to finally reveal

00:07:14,860 --> 00:07:18,700
your code and discussing the solution

00:07:16,960 --> 00:07:20,880
with it there's no point you spending

00:07:18,700 --> 00:07:23,169
two days working on a particular problem

00:07:20,880 --> 00:07:24,790
only for him to have known a better way

00:07:23,169 --> 00:07:27,460
or heard to no no no better way in the

00:07:24,790 --> 00:07:29,680
first place and then figured to be a

00:07:27,460 --> 00:07:33,010
massive surprise I code review should

00:07:29,680 --> 00:07:36,430
really be a once-over of the code and a

00:07:33,010 --> 00:07:39,160
nap +1 or perhaps two suggestions about

00:07:36,430 --> 00:07:41,260
different parts of it and ultimately

00:07:39,160 --> 00:07:42,910
it's an opportunity to show knowledge

00:07:41,260 --> 00:07:44,410
and something that should be really

00:07:42,910 --> 00:07:48,160
really encouraged and never be a

00:07:44,410 --> 00:07:50,320
personal critique I mean github issues

00:07:48,160 --> 00:07:52,960
are littered with attacks on people's

00:07:50,320 --> 00:07:54,430
code styles and that doesn't foster a

00:07:52,960 --> 00:07:56,110
culture that we want to be a part of

00:07:54,430 --> 00:07:58,810
that brought their will provide us with

00:07:56,110 --> 00:08:01,270
the best products we can make code

00:07:58,810 --> 00:08:02,440
review should be a safety blanket and an

00:08:01,270 --> 00:08:09,520
opportunity for us to learn from each

00:08:02,440 --> 00:08:12,640
other hopefully most of you are familiar

00:08:09,520 --> 00:08:13,889
with continuous integration but for

00:08:12,640 --> 00:08:16,590
those who aren't

00:08:13,889 --> 00:08:18,840
it's very very simple it's simply a

00:08:16,590 --> 00:08:23,360
centralized near production environment

00:08:18,840 --> 00:08:27,389
where we can run a suite of tests and at

00:08:23,360 --> 00:08:31,229
based on a hook of some sort or a pool

00:08:27,389 --> 00:08:33,990
so as soon as the developer has given a

00:08:31,229 --> 00:08:38,329
palatable unmerge this pull request into

00:08:33,990 --> 00:08:41,630
master we can kick off a build in CI

00:08:38,329 --> 00:08:44,370
this can be a real bottleneck in

00:08:41,630 --> 00:08:45,930
organizations this is something that has

00:08:44,370 --> 00:08:48,089
caused it causes many problems as a

00:08:45,930 --> 00:08:49,440
lonely planet because we're committing

00:08:48,089 --> 00:08:51,500
so many times day and you have so many

00:08:49,440 --> 00:08:53,970
different developers pushing code into

00:08:51,500 --> 00:08:56,839
repositories that CI continually builds

00:08:53,970 --> 00:08:59,190
up so it takes a huge amount of

00:08:56,839 --> 00:09:02,690
diligence and work to make sure this

00:08:59,190 --> 00:09:05,070
part stays really clean and really quick

00:09:02,690 --> 00:09:10,890
but it's a super important part of the

00:09:05,070 --> 00:09:14,010
pipeline and finally once you've passed

00:09:10,890 --> 00:09:16,560
that gate that final gate of CI we think

00:09:14,010 --> 00:09:18,720
of our deployment so at this point we're

00:09:16,560 --> 00:09:20,880
pretty happy if we've got a good a good

00:09:18,720 --> 00:09:23,360
feature that we think is is ready for

00:09:20,880 --> 00:09:25,140
production so we need to deploy it and

00:09:23,360 --> 00:09:27,510
deployment can be as simple or as

00:09:25,140 --> 00:09:29,790
complicated as you need to be but

00:09:27,510 --> 00:09:33,390
ultimately it has to be predictable

00:09:29,790 --> 00:09:36,480
consistent and automated ftp can be a

00:09:33,390 --> 00:09:37,980
deployment strategy as long as it in no

00:09:36,480 --> 00:09:39,899
way requires a human to move it from one

00:09:37,980 --> 00:09:42,750
part to the other or to hit and drag

00:09:39,899 --> 00:09:44,160
files you might also need to do some

00:09:42,750 --> 00:09:47,519
things like preparing acids for

00:09:44,160 --> 00:09:51,149
production things like Okla flying and

00:09:47,519 --> 00:09:52,769
cats mating files adding cash busting

00:09:51,149 --> 00:09:54,990
showers to the end of files to ensure

00:09:52,769 --> 00:09:57,209
that we can quickly move forward if we

00:09:54,990 --> 00:10:02,399
indeed do remove push something that's

00:09:57,209 --> 00:10:05,070
broken and and it's worth mentioning the

00:10:02,399 --> 00:10:06,899
different types of different

00:10:05,070 --> 00:10:09,750
methodologies that are continuous

00:10:06,899 --> 00:10:13,769
deployment and continuous delivery so

00:10:09,750 --> 00:10:15,930
continuous and deployment means that

00:10:13,769 --> 00:10:17,490
after CI passes we're taking this

00:10:15,930 --> 00:10:18,779
artifacts of code and we're deploying it

00:10:17,490 --> 00:10:20,820
somewhere but it doesn't have to be

00:10:18,779 --> 00:10:22,110
production it could be tests or it could

00:10:20,820 --> 00:10:24,779
be a staging environment where he runs

00:10:22,110 --> 00:10:26,699
from QA continuous delivery is where

00:10:24,779 --> 00:10:27,329
we're pushing code directly into the

00:10:26,699 --> 00:10:31,559
production of our

00:10:27,329 --> 00:10:33,629
and so there are lots of arguments

00:10:31,559 --> 00:10:35,009
against and for continuous delivery but

00:10:33,629 --> 00:10:38,009
it's something that we've seen great

00:10:35,009 --> 00:10:41,549
success with some of the benefits being

00:10:38,009 --> 00:10:43,739
that we we push out very small

00:10:41,549 --> 00:10:45,809
incremental changes like which could be

00:10:43,739 --> 00:10:47,429
just a couple of commits so that if we

00:10:45,809 --> 00:10:49,199
have problems in that code we

00:10:47,429 --> 00:10:52,559
immediately know which parts that are

00:10:49,199 --> 00:10:54,269
broken with continuous deployment where

00:10:52,559 --> 00:10:56,879
perhaps you run QA for two weeks then

00:10:54,269 --> 00:10:58,170
you release a package there's going to

00:10:56,879 --> 00:10:59,610
be a lot of commits and we're not really

00:10:58,170 --> 00:11:02,670
sure which things are going to break in

00:10:59,610 --> 00:11:08,179
that part so there's also an argument

00:11:02,670 --> 00:11:10,649
that's not having that QA scenario and

00:11:08,179 --> 00:11:12,239
using your real users to test things for

00:11:10,649 --> 00:11:17,369
you can provide you much better feedback

00:11:12,239 --> 00:11:20,100
than a test a tester but if you've done

00:11:17,369 --> 00:11:22,860
all these things finally you'll

00:11:20,100 --> 00:11:24,989
hopefully have got some really good code

00:11:22,860 --> 00:11:29,519
up to the server and it should be safe

00:11:24,989 --> 00:11:31,470
and secure and yeah not going to break

00:11:29,519 --> 00:11:34,679
you the next thing we need to think

00:11:31,470 --> 00:11:36,899
about is how to get that code to the

00:11:34,679 --> 00:11:38,639
user as fast as possible these are

00:11:36,899 --> 00:11:41,459
things that front and operations

00:11:38,639 --> 00:11:42,569
engineers need to be on top of but which

00:11:41,459 --> 00:11:46,019
all of us should be thinking about the

00:11:42,569 --> 00:11:57,329
same time so we need to enable a fast

00:11:46,019 --> 00:11:58,769
user experience the most important part

00:11:57,329 --> 00:12:01,019
of this fast user experience is

00:11:58,769 --> 00:12:03,629
protecting the application the slowest

00:12:01,019 --> 00:12:05,699
experience is a broken experience if the

00:12:03,629 --> 00:12:07,439
site's down there's no way we can have a

00:12:05,699 --> 00:12:11,790
good the critical path doesn't matter if

00:12:07,439 --> 00:12:13,319
we don't have a site so we need to

00:12:11,790 --> 00:12:16,889
upload as much possible and protect the

00:12:13,319 --> 00:12:20,879
application we also need to know what's

00:12:16,889 --> 00:12:23,489
prioritized and kind of understands an

00:12:20,879 --> 00:12:25,499
overview of the entire stack of the code

00:12:23,489 --> 00:12:27,509
get into the users so we can work out

00:12:25,499 --> 00:12:30,470
where it's worthwhile putting our time

00:12:27,509 --> 00:12:33,899
investing our time for example and

00:12:30,470 --> 00:12:36,749
optimizing a not very hot function isn't

00:12:33,899 --> 00:12:38,339
really going to give you as much benefit

00:12:36,749 --> 00:12:40,740
as perhaps looking at different caching

00:12:38,339 --> 00:12:41,220
strategies and you need to understand

00:12:40,740 --> 00:12:43,500
the critical

00:12:41,220 --> 00:12:45,420
path which you all do and they're

00:12:43,500 --> 00:12:52,079
experts because you just saw a talk by

00:12:45,420 --> 00:12:55,829
Scott so at the application level and

00:12:52,079 --> 00:12:57,509
this is kind of the domain which you I

00:12:55,829 --> 00:12:59,879
guess people be mostly unfamiliar with

00:12:57,509 --> 00:13:01,910
because this is kind of more typically a

00:12:59,879 --> 00:13:04,589
back end job to work on the application

00:13:01,910 --> 00:13:06,720
but it's still very relevant for you as

00:13:04,589 --> 00:13:08,279
foreign tenders to be able to inform and

00:13:06,720 --> 00:13:10,170
help back and developers to work out

00:13:08,279 --> 00:13:12,240
which the most important parts of the

00:13:10,170 --> 00:13:14,160
application and we talk about something

00:13:12,240 --> 00:13:18,660
called protection by a prioritization

00:13:14,160 --> 00:13:20,339
and what we mean by this is that when we

00:13:18,660 --> 00:13:22,829
request something from the server let's

00:13:20,339 --> 00:13:25,019
say it's an article and we need to

00:13:22,829 --> 00:13:27,509
ensure that the most important content

00:13:25,019 --> 00:13:30,569
is can't be broken by something

00:13:27,509 --> 00:13:32,360
insignificant or complementary so if

00:13:30,569 --> 00:13:35,129
it's an article we want to ensure that

00:13:32,360 --> 00:13:39,029
something that breaks in the comments

00:13:35,129 --> 00:13:40,709
service or the photo service can't break

00:13:39,029 --> 00:13:44,040
the actual content of the article which

00:13:40,709 --> 00:13:45,720
is the most inform the user this is

00:13:44,040 --> 00:13:47,730
something the which the Guardian have

00:13:45,720 --> 00:13:49,370
called swim blaming and which they use

00:13:47,730 --> 00:13:52,350
like a really great effect on their site

00:13:49,370 --> 00:13:56,100
and another thing to think about is

00:13:52,350 --> 00:13:58,529
where's your origin server as we know

00:13:56,100 --> 00:14:00,439
latency is a huge killer and something

00:13:58,529 --> 00:14:03,120
which we can't do anything about and

00:14:00,439 --> 00:14:06,209
lonely planet operated their origin out

00:14:03,120 --> 00:14:08,519
of Melbourne for many years and but a

00:14:06,209 --> 00:14:10,500
lot of our users were in the US and

00:14:08,519 --> 00:14:13,680
Europe so it's something to just think

00:14:10,500 --> 00:14:15,540
about rather than just automatically

00:14:13,680 --> 00:14:22,920
putting your server and US East as lots

00:14:15,540 --> 00:14:27,120
of people do go where your users up okay

00:14:22,920 --> 00:14:28,800
the network we need to understand it we

00:14:27,120 --> 00:14:30,629
need to understand the protocols this is

00:14:28,800 --> 00:14:31,709
again they're talking itself and

00:14:30,629 --> 00:14:36,480
something that Scott covered really

00:14:31,709 --> 00:14:37,889
really well as an operations engineer a

00:14:36,480 --> 00:14:40,230
front and a person that you need to kind

00:14:37,889 --> 00:14:42,899
of understand the full gamut of the

00:14:40,230 --> 00:14:46,439
other network but not necessarily have

00:14:42,899 --> 00:14:48,180
to go too deep on each part of it I find

00:14:46,439 --> 00:14:50,810
that it's very hard to keep up with all

00:14:48,180 --> 00:14:53,480
the latest and greatest

00:14:50,810 --> 00:14:55,580
performance hacks and techniques that we

00:14:53,480 --> 00:14:57,140
come up with I mean there are books

00:14:55,580 --> 00:14:59,360
about it constantly there's there's a

00:14:57,140 --> 00:15:01,160
conference about it and it's really

00:14:59,360 --> 00:15:02,870
difficult but if you understand the

00:15:01,160 --> 00:15:05,660
protocols and you in the Sun why and

00:15:02,870 --> 00:15:08,270
these hacks come about it makes things a

00:15:05,660 --> 00:15:10,400
little bit simpler so for example if you

00:15:08,270 --> 00:15:12,650
know why it's expensive to open up a new

00:15:10,400 --> 00:15:14,150
TCP connection then it makes sense where

00:15:12,650 --> 00:15:16,790
you want to concatenate files and Khepri

00:15:14,150 --> 00:15:19,580
using those connections but ultimately

00:15:16,790 --> 00:15:22,550
plan for failure the network is going to

00:15:19,580 --> 00:15:24,080
fail you at times without a doubt and if

00:15:22,550 --> 00:15:25,820
you have a site that can be resilient to

00:15:24,080 --> 00:15:29,380
that then you're in a much better

00:15:25,820 --> 00:15:34,040
position than lots of other companies

00:15:29,380 --> 00:15:35,779
finally get secure there's been for a

00:15:34,040 --> 00:15:37,610
while I mean as a site called is TLS

00:15:35,779 --> 00:15:40,720
fast yet there's been lots of debate

00:15:37,610 --> 00:15:44,240
about whether TLS is something that is

00:15:40,720 --> 00:15:46,610
quick it's not as quick as running a

00:15:44,240 --> 00:15:48,950
non-secure site but it can be tuned to

00:15:46,610 --> 00:15:54,680
be as quick or very close to be as quick

00:15:48,950 --> 00:15:57,140
and ultimately as we saw in the last

00:15:54,680 --> 00:15:59,450
talk HTTP two is coming out and right

00:15:57,140 --> 00:16:03,560
now the main browsers are only going to

00:15:59,450 --> 00:16:06,920
support it over hey over TLS so in that

00:16:03,560 --> 00:16:08,270
case security is by far faster than an

00:16:06,920 --> 00:16:17,120
insecure content because you're suddenly

00:16:08,270 --> 00:16:21,440
allowed to use these new features ok so

00:16:17,120 --> 00:16:23,600
the CDN again I assume most of you know

00:16:21,440 --> 00:16:25,760
what a CDN is but for those who don't a

00:16:23,600 --> 00:16:28,010
content distribution network essentially

00:16:25,760 --> 00:16:29,660
is is someone else's hardware scattered

00:16:28,010 --> 00:16:32,330
around the world which can store your

00:16:29,660 --> 00:16:35,690
static files we allows you to cut

00:16:32,330 --> 00:16:36,950
latency by quite quite a bit and put

00:16:35,690 --> 00:16:40,040
your content as close to them as

00:16:36,950 --> 00:16:41,209
possible so you want to be cashing as

00:16:40,040 --> 00:16:42,709
much as you can you want to be

00:16:41,209 --> 00:16:44,420
offloading everything from your server

00:16:42,709 --> 00:16:47,230
and putting it as close to them as you

00:16:44,420 --> 00:16:53,450
can do this might include static files

00:16:47,230 --> 00:16:54,800
language files dns lookups well anything

00:16:53,450 --> 00:16:57,620
you can think of it could be the entire

00:16:54,800 --> 00:16:59,750
page if you're serving HTML which is

00:16:57,620 --> 00:17:02,270
static which is enjoyment which doesn't

00:16:59,750 --> 00:17:04,010
change you can cash that entirety right

00:17:02,270 --> 00:17:06,220
to the edge and puts you in a great

00:17:04,010 --> 00:17:06,220
position

00:17:06,730 --> 00:17:10,880
unfortunately that can also bring its

00:17:08,510 --> 00:17:13,430
own problems and I'm sure we've all been

00:17:10,880 --> 00:17:15,140
in a situation where you've made a

00:17:13,430 --> 00:17:16,640
change and refreshing the page and

00:17:15,140 --> 00:17:18,310
nothing's changing nothing's of dating

00:17:16,640 --> 00:17:20,990
because there's some cash in some place

00:17:18,310 --> 00:17:22,700
which hasn't been exposed so once you

00:17:20,990 --> 00:17:24,530
start cashing things expose that to the

00:17:22,700 --> 00:17:26,000
team make sure everyone knows the

00:17:24,530 --> 00:17:28,850
different layers of cashing that you

00:17:26,000 --> 00:17:31,960
have and how we can post each part of

00:17:28,850 --> 00:17:35,900
them to ensure that we can keep working

00:17:31,960 --> 00:17:39,020
also understand that as soon as you do

00:17:35,900 --> 00:17:40,310
catch the full page on the edge you

00:17:39,020 --> 00:17:42,230
suddenly can't take advantage of things

00:17:40,310 --> 00:17:46,040
like cookies and headers on the server

00:17:42,230 --> 00:17:47,380
so you need to have robust solutions for

00:17:46,040 --> 00:17:50,030
handling things like personalization

00:17:47,380 --> 00:17:51,560
localization make sure that isn't

00:17:50,030 --> 00:17:54,410
getting in the way of development and

00:17:51,560 --> 00:17:59,930
make it a volatile or but still use

00:17:54,410 --> 00:18:01,400
these part that use these tools finally

00:17:59,930 --> 00:18:04,210
when you've gone all the way along there

00:18:01,400 --> 00:18:08,300
you finally get your work to the browser

00:18:04,210 --> 00:18:10,520
and we can sigh excusing it there's a

00:18:08,300 --> 00:18:14,300
whole host of optimizations we can make

00:18:10,520 --> 00:18:18,410
at this stage the critical path as we

00:18:14,300 --> 00:18:20,770
just saw is can be hugely beneficial by

00:18:18,410 --> 00:18:24,410
tweaking that and pushing as much stuff

00:18:20,770 --> 00:18:26,900
into the head but we can also do things

00:18:24,410 --> 00:18:31,190
like tuning our cache hit rate what I

00:18:26,900 --> 00:18:32,990
mean by this is if users are hitting the

00:18:31,190 --> 00:18:35,360
home page and often going to page be in

00:18:32,990 --> 00:18:36,800
page see then we should be sharing the

00:18:35,360 --> 00:18:40,460
cache across those three files outs

00:18:36,800 --> 00:18:42,380
amazing them in that way if users go to

00:18:40,460 --> 00:18:44,630
those four pages but don't often go to

00:18:42,380 --> 00:18:47,330
page d and d HD happens to have a very

00:18:44,630 --> 00:18:49,040
heavy and weight on it make sure these

00:18:47,330 --> 00:18:51,910
things are separate concerns and we

00:18:49,040 --> 00:18:56,570
don't have any overlap between them

00:18:51,910 --> 00:18:59,480
leverage new file formats waft to over

00:18:56,570 --> 00:19:01,400
what and ultimately offers very similar

00:18:59,480 --> 00:19:06,480
if not the same experience at a lower

00:19:01,400 --> 00:19:10,980
cost web p and jpeg XR

00:19:06,480 --> 00:19:12,630
new formats for images which can offer

00:19:10,980 --> 00:19:14,730
like really big benefits particularly

00:19:12,630 --> 00:19:18,390
for big landscape images where you can

00:19:14,730 --> 00:19:21,690
have huge savings and favor things like

00:19:18,390 --> 00:19:24,840
SVG when you can because they have great

00:19:21,690 --> 00:19:28,049
compression and keep an eye on your

00:19:24,840 --> 00:19:30,630
frame rate this again are talking itself

00:19:28,049 --> 00:19:33,299
and but there are things we can

00:19:30,630 --> 00:19:36,110
evangelize and work on to help and to

00:19:33,299 --> 00:19:38,760
help with keeping things silky smooth

00:19:36,110 --> 00:19:40,559
things like turning off hover effects as

00:19:38,760 --> 00:19:43,140
we scroll which can be done site wide

00:19:40,559 --> 00:19:44,400
and just allows the developers to not

00:19:43,140 --> 00:19:50,490
have to focus particularly on those

00:19:44,400 --> 00:19:53,580
single solutions anytime all right if

00:19:50,490 --> 00:19:56,850
you've done all that we should hopefully

00:19:53,580 --> 00:20:01,110
and have a really great product at this

00:19:56,850 --> 00:20:02,910
stage but hopefully is not going to be

00:20:01,110 --> 00:20:05,220
good enough we need to know for sure

00:20:02,910 --> 00:20:07,350
that what we've we think is happening on

00:20:05,220 --> 00:20:09,360
the on the user is actually happening

00:20:07,350 --> 00:20:11,240
and we need to make sure we get this

00:20:09,360 --> 00:20:15,770
feedback loop cream back so that we can

00:20:11,240 --> 00:20:15,770
make better decisions on what we develop

00:20:24,440 --> 00:20:30,980
so when instead of monitoring there's a

00:20:29,280 --> 00:20:33,330
lot of things we can be monitoring

00:20:30,980 --> 00:20:35,010
javascript errors are a huge thing if

00:20:33,330 --> 00:20:38,610
you're not monitoring javascript errors

00:20:35,010 --> 00:20:40,740
you could be missing some huge problems

00:20:38,610 --> 00:20:43,650
on your side it's not hard to do there

00:20:40,740 --> 00:20:46,020
are services like tractor is and gets

00:20:43,650 --> 00:20:49,679
entry which can do this for you which we

00:20:46,020 --> 00:20:52,620
can help you and and particularly in the

00:20:49,679 --> 00:20:55,650
evolving role of client-side

00:20:52,620 --> 00:20:57,270
applications now we should be treating

00:20:55,650 --> 00:20:59,130
these errors as importantly as if we

00:20:57,270 --> 00:21:01,230
were treating a 500 on the server with

00:20:59,130 --> 00:21:04,020
Pingdom alerting us like this is the

00:21:01,230 --> 00:21:05,880
same thing now and if we're not on top

00:21:04,020 --> 00:21:09,660
of that then we could be missing some

00:21:05,880 --> 00:21:11,700
huge huge problems start monitoring real

00:21:09,660 --> 00:21:14,220
user performance and the performance

00:21:11,700 --> 00:21:17,890
metrics are available in almost all

00:21:14,220 --> 00:21:19,660
modern browsers and we have

00:21:17,890 --> 00:21:22,720
ability to do custom time metrics as

00:21:19,660 --> 00:21:24,370
well so measure what's happening on page

00:21:22,720 --> 00:21:27,010
load but also measure when the user is

00:21:24,370 --> 00:21:28,330
getting your actual content look at

00:21:27,010 --> 00:21:30,850
things like time to first piece of

00:21:28,330 --> 00:21:32,110
content and then trend that over time so

00:21:30,850 --> 00:21:34,960
that you know that if you release

00:21:32,110 --> 00:21:37,300
something that causes out to flag up

00:21:34,960 --> 00:21:40,660
high you can roll back or make

00:21:37,300 --> 00:21:44,680
adjustments and monitor your asset sizes

00:21:40,660 --> 00:21:46,780
and this is something I guess related to

00:21:44,680 --> 00:21:49,150
performance budget but it's something

00:21:46,780 --> 00:21:51,060
that I think should be done in a

00:21:49,150 --> 00:21:53,700
production environment rather than

00:21:51,060 --> 00:21:57,820
locally or in a sort of CI environment

00:21:53,700 --> 00:22:01,690
the reason being that we at one point a

00:21:57,820 --> 00:22:08,230
lonely planet we broke gzip by releasing

00:22:01,690 --> 00:22:09,850
some vcl 212 varnish config and asset

00:22:08,230 --> 00:22:12,430
sizes of course shot up massively

00:22:09,850 --> 00:22:14,200
particularly as we were using gzip as a

00:22:12,430 --> 00:22:17,440
performance hack really for some of our

00:22:14,200 --> 00:22:21,280
things using SVG and without a doubt

00:22:17,440 --> 00:22:23,230
this would have caused the pages to be

00:22:21,280 --> 00:22:26,290
completely unresponsive for some users /

00:22:23,230 --> 00:22:28,510
very poor connections so again this this

00:22:26,290 --> 00:22:29,950
is a 500 this is the site being down and

00:22:28,510 --> 00:22:31,330
if we're not monitoring this kind of

00:22:29,950 --> 00:22:37,180
thing we might be missing out on these

00:22:31,330 --> 00:22:40,270
things we should be thinking about how

00:22:37,180 --> 00:22:43,030
we can able a be testing this doesn't

00:22:40,270 --> 00:22:45,100
have to mean testing a blue button vs

00:22:43,030 --> 00:22:47,560
red button this can mean testing a

00:22:45,100 --> 00:22:49,630
performance implementation versus a

00:22:47,560 --> 00:22:51,160
different one it can be anything and but

00:22:49,630 --> 00:22:53,140
we need to make sure it's simple to spin

00:22:51,160 --> 00:22:55,540
up a new test simple to get the

00:22:53,140 --> 00:22:57,130
reporting back and ultimately this will

00:22:55,540 --> 00:22:59,280
empower developers to actually run these

00:22:57,130 --> 00:23:02,350
tests to experiment on themselves and

00:22:59,280 --> 00:23:04,990
having that kind tight feedback loop can

00:23:02,350 --> 00:23:07,720
really solve empower developers to you

00:23:04,990 --> 00:23:12,360
know push forward end and work on the

00:23:07,720 --> 00:23:16,180
product to make it as best it come if

00:23:12,360 --> 00:23:17,770
you get in this feedback expose it make

00:23:16,180 --> 00:23:19,510
it really really accessible get

00:23:17,770 --> 00:23:22,900
dashboards and screens around your

00:23:19,510 --> 00:23:25,300
office evangelizer if as we said you

00:23:22,900 --> 00:23:27,970
know developers will always find the

00:23:25,300 --> 00:23:29,290
fastest path if we don't save you know

00:23:27,970 --> 00:23:31,180
they've got project managers showing

00:23:29,290 --> 00:23:31,750
them to get things done if we don't make

00:23:31,180 --> 00:23:35,320
this really

00:23:31,750 --> 00:23:36,910
accessible it won't get used so even if

00:23:35,320 --> 00:23:38,290
they have to log into something just

00:23:36,910 --> 00:23:40,240
make sure they don't make sure it's all

00:23:38,290 --> 00:23:45,070
there and reduce the signal-to-noise

00:23:40,240 --> 00:23:46,510
ratio if you have 500 graphs that this

00:23:45,070 --> 00:23:48,940
is obviously something that can't be and

00:23:46,510 --> 00:23:50,350
kept on top of work out which of the

00:23:48,940 --> 00:23:53,110
most important graphs and get those in

00:23:50,350 --> 00:23:55,210
front of developers and use smoothing

00:23:53,110 --> 00:23:57,400
algorithms to get rid of variance in

00:23:55,210 --> 00:23:59,950
graphs and just to show which parts are

00:23:57,400 --> 00:24:01,510
actually spiking up and down and set up

00:23:59,950 --> 00:24:03,910
alerting so that when we do have these

00:24:01,510 --> 00:24:06,880
things we can other users and developers

00:24:03,910 --> 00:24:09,250
straight away and refine and evolve this

00:24:06,880 --> 00:24:11,080
process because what might be the best

00:24:09,250 --> 00:24:12,820
graph today which measures the part of

00:24:11,080 --> 00:24:16,870
your application might not be tomorrow

00:24:12,820 --> 00:24:23,440
so we need to consistently be checking

00:24:16,870 --> 00:24:27,070
and changing this process and use the

00:24:23,440 --> 00:24:28,870
feedback so the expose it but use it

00:24:27,070 --> 00:24:30,250
decide what's the best feature to be

00:24:28,870 --> 00:24:32,620
working on next based on the feedback

00:24:30,250 --> 00:24:33,880
decide which bugs are the most important

00:24:32,620 --> 00:24:36,840
ones that you need to fix immediately

00:24:33,880 --> 00:24:39,640
and remove hippos from the equation

00:24:36,840 --> 00:24:42,820
hippos stands for highest-paid person's

00:24:39,640 --> 00:24:44,920
opinion and they have no no business

00:24:42,820 --> 00:24:49,330
whatsoever being anywhere near our

00:24:44,920 --> 00:24:50,800
budget are we work on it doesn't matter

00:24:49,330 --> 00:24:51,970
what they think it might as well I users

00:24:50,800 --> 00:24:53,950
think doesn't matter where they want it

00:24:51,970 --> 00:24:54,970
matters why I use this one and that's

00:24:53,950 --> 00:25:03,760
awesome they're going to help us make

00:24:54,970 --> 00:25:06,790
better products so it's all about speed

00:25:03,760 --> 00:25:08,530
in these different parts but it's also

00:25:06,790 --> 00:25:10,900
about just looking after this whole

00:25:08,530 --> 00:25:12,190
process and the front end ops engineer

00:25:10,900 --> 00:25:14,710
really has to be on top of these

00:25:12,190 --> 00:25:16,810
different parts and be working them and

00:25:14,710 --> 00:25:19,510
these three parts all have to be in sync

00:25:16,810 --> 00:25:21,490
for us to make great products and we can

00:25:19,510 --> 00:25:24,310
we can't create a fast user experience

00:25:21,490 --> 00:25:26,950
without the fast feedback back and we

00:25:24,310 --> 00:25:28,390
need to have safe delivery or the site

00:25:26,950 --> 00:25:35,190
can go down and then we have no user

00:25:28,390 --> 00:25:37,510
experience so that's the full cycle I

00:25:35,190 --> 00:25:42,100
guess the question really is this should

00:25:37,510 --> 00:25:44,080
print ups be a role there's enough work

00:25:42,100 --> 00:25:45,250
working all this stuff for 10 people on

00:25:44,080 --> 00:25:48,430
any project without

00:25:45,250 --> 00:25:50,620
and so if you can afford it I think from

00:25:48,430 --> 00:25:53,110
the duck should be at all I think you do

00:25:50,620 --> 00:25:55,390
need somebody or some a team working on

00:25:53,110 --> 00:25:57,160
these different parts and tuning them

00:25:55,390 --> 00:25:59,830
and making them as quick and as fast as

00:25:57,160 --> 00:26:01,720
possible working on the features outside

00:25:59,830 --> 00:26:04,590
of features so that the developers can

00:26:01,720 --> 00:26:09,370
work directly on what's most important

00:26:04,590 --> 00:26:10,870
but at the same time a one person or two

00:26:09,370 --> 00:26:14,260
people working the front end ops

00:26:10,870 --> 00:26:18,250
engineers can't change a culture and we

00:26:14,260 --> 00:26:19,870
need to be collectively a leveling up

00:26:18,250 --> 00:26:22,900
about working on these types of things

00:26:19,870 --> 00:26:26,380
and understanding that our you know our

00:26:22,900 --> 00:26:28,780
websites aren't and executing in our

00:26:26,380 --> 00:26:29,800
editors and they are executing far away

00:26:28,780 --> 00:26:31,270
from those in many many different

00:26:29,800 --> 00:26:35,620
environments and we need to be on top of

00:26:31,270 --> 00:26:37,900
that and it's it's good to work on the

00:26:35,620 --> 00:26:40,120
stuff it's fun to step out of the CSS

00:26:37,900 --> 00:26:42,040
JavaScript world and think about how we

00:26:40,120 --> 00:26:45,850
can work on these things and make them

00:26:42,040 --> 00:26:49,030
faster so with that I will say thank you

00:26:45,850 --> 00:26:52,300
and employee to take away some of this

00:26:49,030 --> 00:26:54,190
if you can think about how you can fit

00:26:52,300 --> 00:26:55,690
it into your cycle and how you can make

00:26:54,190 --> 00:26:57,670
better products which your users are

00:26:55,690 --> 00:27:00,060
actually one thing so thank you very

00:26:57,670 --> 00:27:00,060

YouTube URL: https://www.youtube.com/watch?v=9BE_u7ZHIpE


