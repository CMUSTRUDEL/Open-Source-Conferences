Title: Kenneth Ormandy - Efficient Web Type, c. 1556
Publication date: 2015-05-10
Playlist: CSSConf Australia 2015 Talks
Description: 
	Thanks to our friends at SitePoint, Kenneth Ormandy's CSSConf Australia 2015 presentation Efficient Web Type, c. 1556.

http://2015.cssconf.com.au/
https://twitter.com/kennethormandy
http://kennethormandy.com
Captions: 
	00:00:00,000 --> 00:00:05,759
if a developer I was working with asked

00:00:02,340 --> 00:00:07,259
why did you select that font it's pretty

00:00:05,759 --> 00:00:11,820
unlikely they'd accept self-preservation

00:00:07,259 --> 00:00:13,349
is my answer type designer Pierre haul

00:00:11,820 --> 00:00:15,719
team may have actually been able to get

00:00:13,349 --> 00:00:17,880
away with this claim he lives and works

00:00:15,719 --> 00:00:20,039
in Paris during the mid 16th century and

00:00:17,880 --> 00:00:22,199
how the type II designs performs how

00:00:20,039 --> 00:00:24,390
efficient it is spatially on the page is

00:00:22,199 --> 00:00:26,510
actually much more relevant personal

00:00:24,390 --> 00:00:29,429
safety than it is for his contemporaries

00:00:26,510 --> 00:00:31,470
the work of type designers today people

00:00:29,429 --> 00:00:33,180
who design fonts professionally is still

00:00:31,470 --> 00:00:35,460
historically linked to the 16th century

00:00:33,180 --> 00:00:38,430
craftspeople called punch cutters like

00:00:35,460 --> 00:00:40,710
haul team while typefaces designed or

00:00:38,430 --> 00:00:42,540
revived more recently ones that you may

00:00:40,710 --> 00:00:43,829
be using on screens probably started

00:00:42,540 --> 00:00:45,600
their life as a sketch and then were

00:00:43,829 --> 00:00:48,030
worked on digitally quite quickly a

00:00:45,600 --> 00:00:50,100
typeface designed for books in the

00:00:48,030 --> 00:00:53,670
mid-1500s would have started its life in

00:00:50,100 --> 00:00:55,530
steel having the ability to print

00:00:53,670 --> 00:00:57,480
publish and design type in this matter

00:00:55,530 --> 00:00:58,949
affords halting a more active role in

00:00:57,480 --> 00:01:01,199
what we might now call the design

00:00:58,949 --> 00:01:03,480
process and his skills enable him to

00:01:01,199 --> 00:01:06,110
explore issues of typographic efficiency

00:01:03,480 --> 00:01:08,430
through the design of type itself

00:01:06,110 --> 00:01:10,290
centuries on it's no longer just the

00:01:08,430 --> 00:01:12,150
punch cutters or the type designers or

00:01:10,290 --> 00:01:14,340
the printers who were responsible for

00:01:12,150 --> 00:01:16,799
the performance of type that group has

00:01:14,340 --> 00:01:19,080
expanded to include typographers working

00:01:16,799 --> 00:01:20,790
on the web and whether you see yourself

00:01:19,080 --> 00:01:23,759
this way or not you probably are a

00:01:20,790 --> 00:01:25,710
typographer while type designer is the

00:01:23,759 --> 00:01:28,229
name given to the designers of typefaces

00:01:25,710 --> 00:01:29,840
themselves this is mrs. Yves designed by

00:01:28,229 --> 00:01:32,130
zuzanna let's go for example

00:01:29,840 --> 00:01:34,350
typographers are the people who use them

00:01:32,130 --> 00:01:36,210
this means that today designers

00:01:34,350 --> 00:01:38,130
developers and anyone using a word

00:01:36,210 --> 00:01:39,990
processor are setting type in ways that

00:01:38,130 --> 00:01:41,659
couldn't have been anticipated back when

00:01:39,990 --> 00:01:44,189
it was being cut out of metal and

00:01:41,659 --> 00:01:46,110
whether you take on the title graphic

00:01:44,189 --> 00:01:48,869
designer front-end developer software

00:01:46,110 --> 00:01:50,340
engineer or something else entirely we

00:01:48,869 --> 00:01:52,950
still have a similar question to the

00:01:50,340 --> 00:01:54,509
16th century punch cutters how many

00:01:52,950 --> 00:01:58,290
texts be received and read more

00:01:54,509 --> 00:02:00,180
efficiently we can continue to suggest

00:01:58,290 --> 00:02:01,380
answers to this on the web today by

00:02:00,180 --> 00:02:03,719
making the most of the existing

00:02:01,380 --> 00:02:05,909
practices we have taking advantage of

00:02:03,719 --> 00:02:07,680
upcoming technologies and viewing the

00:02:05,909 --> 00:02:09,360
punch cutters process as a precedence

00:02:07,680 --> 00:02:10,470
for designers having a major role to

00:02:09,360 --> 00:02:15,360
play in the / for

00:02:10,470 --> 00:02:17,130
ensive type depending on how long you've

00:02:15,360 --> 00:02:19,140
been working with fonts on the web these

00:02:17,130 --> 00:02:20,820
might not exactly sound like recent

00:02:19,140 --> 00:02:22,500
challenges but I can assure you the ones

00:02:20,820 --> 00:02:25,430
that halting we're working on were even

00:02:22,500 --> 00:02:27,420
older he's working on the Bible

00:02:25,430 --> 00:02:29,280
historically religion has driven

00:02:27,420 --> 00:02:31,710
lettering type design and a great deal

00:02:29,280 --> 00:02:33,630
of communication in general the first

00:02:31,710 --> 00:02:35,730
mechanical movable type printing press

00:02:33,630 --> 00:02:37,350
was invented by Johannes Gutenberg a

00:02:35,730 --> 00:02:39,600
hundred years before Hall teens working

00:02:37,350 --> 00:02:41,790
and as he prints the iconic 42 line

00:02:39,600 --> 00:02:44,550
Bible it becomes the fastest book ever

00:02:41,790 --> 00:02:46,709
produced so what could possibly make

00:02:44,550 --> 00:02:48,600
printing a Bible a worthy challenge for

00:02:46,709 --> 00:02:51,120
someone as skilled as halting an entire

00:02:48,600 --> 00:02:52,980
century later certainly he knows how to

00:02:51,120 --> 00:02:55,410
create effective work and this is not

00:02:52,980 --> 00:02:57,810
where his problem lays his ability to

00:02:55,410 --> 00:02:59,760
print publish and design type means he's

00:02:57,810 --> 00:03:03,240
more than capable of producing a version

00:02:59,760 --> 00:03:04,920
of the Bible no Hall teens requirements

00:03:03,240 --> 00:03:07,170
come from a secret that he's keeping in

00:03:04,920 --> 00:03:09,209
addition to being a printer a publisher

00:03:07,170 --> 00:03:12,360
and a proficient punch cutter he's also

00:03:09,209 --> 00:03:13,590
a Protestant Protestantism is

00:03:12,360 --> 00:03:15,750
essentially a forbidden branch of

00:03:13,590 --> 00:03:17,280
christianity in mid 16th century Paris

00:03:15,750 --> 00:03:19,140
and its members are known as huge a

00:03:17,280 --> 00:03:20,910
knots though halting is managed to keep

00:03:19,140 --> 00:03:23,700
his own beliefs a secret up until this

00:03:20,910 --> 00:03:25,500
point largely for his own safety through

00:03:23,700 --> 00:03:27,150
improvements in printing technology and

00:03:25,500 --> 00:03:28,920
secret promotional efforts of people

00:03:27,150 --> 00:03:30,720
including halting Catholics are

00:03:28,920 --> 00:03:32,280
increasingly converting to Protestantism

00:03:30,720 --> 00:03:34,100
and this does not sit well with the most

00:03:32,280 --> 00:03:36,450
powerful Catholics in the country

00:03:34,100 --> 00:03:38,400
they're unimpressed and impose a

00:03:36,450 --> 00:03:40,200
religious repression on Paris one that

00:03:38,400 --> 00:03:42,959
steadily worsens under the newly crowned

00:03:40,200 --> 00:03:44,549
King Henry the second now this is a

00:03:42,959 --> 00:03:46,530
religious disagreement and one that I'm

00:03:44,549 --> 00:03:48,030
not an expert in and I'm sure any number

00:03:46,530 --> 00:03:49,860
of people could be blamed and when we

00:03:48,030 --> 00:03:52,290
look back at halton he's hardly a

00:03:49,860 --> 00:03:54,780
guiltless figure either but it's still

00:03:52,290 --> 00:03:57,959
hard not to see the King as the person

00:03:54,780 --> 00:03:59,250
in power as the villain here he gets a

00:03:57,959 --> 00:04:00,330
lance through the face in about three

00:03:59,250 --> 00:04:02,970
years from now if that makes you feel

00:04:00,330 --> 00:04:04,459
any better but in the meantime yep yep

00:04:02,970 --> 00:04:07,350
ciao sting tournaments you know it is

00:04:04,459 --> 00:04:09,570
but in the meantime this is the position

00:04:07,350 --> 00:04:11,519
that halt he finds himself in with a

00:04:09,570 --> 00:04:14,489
desire to practice his faith but he's

00:04:11,519 --> 00:04:16,739
facing death in doing so like many

00:04:14,489 --> 00:04:18,510
designers and developers today halting

00:04:16,739 --> 00:04:21,419
builds his own tools to solve his own

00:04:18,510 --> 00:04:23,350
problems and as his concerns with the

00:04:21,419 --> 00:04:25,840
religious climate in Paris grow

00:04:23,350 --> 00:04:29,680
worse so do his concerns with the design

00:04:25,840 --> 00:04:31,540
of the Bible itself I became interested

00:04:29,680 --> 00:04:32,710
in halting story through the books the

00:04:31,540 --> 00:04:34,360
Paleo tog raphy of the French

00:04:32,710 --> 00:04:36,940
Renaissance by HDL ver Vliet and

00:04:34,360 --> 00:04:38,680
counterpunch by fred meyers in the

00:04:36,940 --> 00:04:40,030
latter smyer speculates what's going

00:04:38,680 --> 00:04:42,010
through Hall teens mind of this trying

00:04:40,030 --> 00:04:45,100
point in his life but I prefer to think

00:04:42,010 --> 00:04:46,690
he would have asked more directly why do

00:04:45,100 --> 00:04:49,810
people keep making these large and heavy

00:04:46,690 --> 00:04:50,980
Bibles he probably prayed I need to be

00:04:49,810 --> 00:04:52,900
able to pick up my things and move

00:04:50,980 --> 00:04:54,970
quickly I don't want to be discovered

00:04:52,900 --> 00:04:58,870
practicing my faith but how might I make

00:04:54,970 --> 00:05:00,970
these books smaller in essence this

00:04:58,870 --> 00:05:03,670
leads halting to help design what's the

00:05:00,970 --> 00:05:05,500
first french language pocket Bible he's

00:05:03,670 --> 00:05:07,510
constrained by how small the type can be

00:05:05,500 --> 00:05:09,490
while still remaining easy and desirable

00:05:07,510 --> 00:05:11,560
to read its spatial efficiency on the

00:05:09,490 --> 00:05:14,290
page determines how physically small

00:05:11,560 --> 00:05:16,000
this Bible can be a typeface that reads

00:05:14,290 --> 00:05:17,230
well at extremely small sizes means less

00:05:16,000 --> 00:05:19,810
pages to print in a more reasonable

00:05:17,230 --> 00:05:21,430
number of characters per line and haul

00:05:19,810 --> 00:05:23,350
team approaches this by experimenting

00:05:21,430 --> 00:05:25,090
with the extreme ends of the parameters

00:05:23,350 --> 00:05:26,670
he wants to design within something

00:05:25,090 --> 00:05:29,410
that's still common in type design today

00:05:26,670 --> 00:05:30,850
this is a fairly low quality example

00:05:29,410 --> 00:05:32,860
compared to the caliber of work that

00:05:30,850 --> 00:05:34,450
haul team is doing but it illustrates

00:05:32,860 --> 00:05:36,250
how this is still happening with type

00:05:34,450 --> 00:05:37,900
designers today by designing an

00:05:36,250 --> 00:05:40,090
extremely heavy weight and an extremely

00:05:37,900 --> 00:05:41,740
lightweight you can generate instances

00:05:40,090 --> 00:05:44,730
in between to try and figure out where

00:05:41,740 --> 00:05:46,570
the parameters you're looking for exist

00:05:44,730 --> 00:05:48,970
halton however is looking for

00:05:46,570 --> 00:05:50,950
adjustments that apply to size specific

00:05:48,970 --> 00:05:53,680
type a type that's working at a very

00:05:50,950 --> 00:05:55,870
small size and will improve its spatial

00:05:53,680 --> 00:05:57,670
efficiency and remember at this point in

00:05:55,870 --> 00:05:59,890
time he's physically cutting the type

00:05:57,670 --> 00:06:01,450
out of metal this is an actual object

00:05:59,890 --> 00:06:04,270
and he has to work at it at scale

00:06:01,450 --> 00:06:05,860
there's no vector tools to to zoom in

00:06:04,270 --> 00:06:08,230
and there's no drop down for him to

00:06:05,860 --> 00:06:10,750
change from 10.2 12-point or vice versa

00:06:08,230 --> 00:06:13,180
he's he actually has to design the

00:06:10,750 --> 00:06:15,250
typeface at that size but he's actually

00:06:13,180 --> 00:06:17,380
technically skilled enough to overshoot

00:06:15,250 --> 00:06:19,990
his goal and make something that works

00:06:17,380 --> 00:06:22,750
but he realized this is too small he can

00:06:19,990 --> 00:06:24,640
do this on along the way by taking that

00:06:22,750 --> 00:06:26,680
metal type holding it over an open flame

00:06:24,640 --> 00:06:28,600
covering it in soot and pressing it into

00:06:26,680 --> 00:06:31,150
parchment and that gives him feedback

00:06:28,600 --> 00:06:33,130
about his design decisions he eventually

00:06:31,150 --> 00:06:34,540
finds the spatial sweet spot for his

00:06:33,130 --> 00:06:37,980
book typeface and now can print a

00:06:34,540 --> 00:06:40,330
gorgeously inconspicuous Bible

00:06:37,980 --> 00:06:42,250
all teams performance issues in type

00:06:40,330 --> 00:06:44,680
design mirrors our performance issues on

00:06:42,250 --> 00:06:46,900
the web how many texts be received and

00:06:44,680 --> 00:06:48,340
read more efficiently he suggests

00:06:46,900 --> 00:06:50,050
answers to this through the design of

00:06:48,340 --> 00:06:51,460
the type but based on our challenges

00:06:50,050 --> 00:06:55,300
today that's not the only place this

00:06:51,460 --> 00:06:57,400
needs an answer however you may be

00:06:55,300 --> 00:06:58,720
referencing fonts on the web manually

00:06:57,400 --> 00:07:00,940
hosting them and writing your own font

00:06:58,720 --> 00:07:02,890
face declarations in CSS or using a

00:07:00,940 --> 00:07:05,770
service like tebow tech Typekit fonts

00:07:02,890 --> 00:07:08,620
com or google fonts it's clear you are

00:07:05,770 --> 00:07:10,510
referencing more fonts the adoption of

00:07:08,620 --> 00:07:13,060
font face and waft the web open font

00:07:10,510 --> 00:07:14,650
format has been rapid and these services

00:07:13,060 --> 00:07:16,120
actually mean it's even less likely that

00:07:14,650 --> 00:07:18,160
you're writing these font face

00:07:16,120 --> 00:07:19,960
declarations manually but when you drop

00:07:18,160 --> 00:07:22,030
in a CSS file or a JavaScript snippet

00:07:19,960 --> 00:07:23,470
from one of these services this is what

00:07:22,030 --> 00:07:25,120
you're still getting back so let's just

00:07:23,470 --> 00:07:27,580
review font face quickly and how it

00:07:25,120 --> 00:07:29,170
works together with woth you can specify

00:07:27,580 --> 00:07:31,630
the font family name that you want to

00:07:29,170 --> 00:07:33,550
use elsewhere in your CSS the font style

00:07:31,630 --> 00:07:35,590
in this case it's normal as opposed to

00:07:33,550 --> 00:07:37,930
italic the font weight which in this

00:07:35,590 --> 00:07:39,850
case is 300 because that corresponds to

00:07:37,930 --> 00:07:41,320
the light waste of the light weight of

00:07:39,850 --> 00:07:45,250
the tape typeface which is what we're

00:07:41,320 --> 00:07:47,650
loading in in 2009 the biggest challenge

00:07:45,250 --> 00:07:49,990
with woth was adoption its goal is to

00:07:47,650 --> 00:07:51,730
firmly establish a way to use true fonts

00:07:49,990 --> 00:07:53,470
on the web and thanks to the hard work

00:07:51,730 --> 00:07:54,940
of the web fonts working group and many

00:07:53,470 --> 00:07:58,000
other people it's safe to say that this

00:07:54,940 --> 00:08:00,010
happened based on data from the HTTP

00:07:58,000 --> 00:08:02,860
archive we can see an increase from one

00:08:00,010 --> 00:08:04,840
percent of fonts in two sites using real

00:08:02,860 --> 00:08:07,450
web fonts in 2010 to actually this

00:08:04,840 --> 00:08:08,980
doesn't seem sufficient ok they're two

00:08:07,450 --> 00:08:11,380
fifty percent at the beginning of this

00:08:08,980 --> 00:08:13,360
year that's a massive increase and to

00:08:11,380 --> 00:08:15,610
look at one typeface specifically open

00:08:13,360 --> 00:08:18,730
sans which was only it was released as

00:08:15,610 --> 00:08:21,160
recently as 2011 it's now more commonly

00:08:18,730 --> 00:08:24,040
used then lucida grande a commonly

00:08:21,160 --> 00:08:26,470
sanctioned wefts web safe font here are

00:08:24,040 --> 00:08:28,090
some things that happen less often per

00:08:26,470 --> 00:08:31,780
day than the number of times open sans

00:08:28,090 --> 00:08:35,440
is served youtube streams of the top

00:08:31,780 --> 00:08:37,180
video of the day that's less we see 350

00:08:35,440 --> 00:08:40,870
million Facebook photos uploads in a day

00:08:37,180 --> 00:08:43,390
we can see 500 million tweets in a day

00:08:40,870 --> 00:08:45,850
but that doesn't come close to the 2.4

00:08:43,390 --> 00:08:47,410
five daily open sans font views

00:08:45,850 --> 00:08:49,540
according to google fonts and this

00:08:47,410 --> 00:08:50,380
doesn't even factor in other flavors of

00:08:49,540 --> 00:08:52,870
open sans

00:08:50,380 --> 00:08:55,420
like condensed or open sans Hebrew or

00:08:52,870 --> 00:08:57,160
other places it's being served from now

00:08:55,420 --> 00:08:59,170
keep in mind I'm about as much of a

00:08:57,160 --> 00:09:01,780
statistician as I am a French religious

00:08:59,170 --> 00:09:03,250
historian which is to say that I'm only

00:09:01,780 --> 00:09:05,500
interested in it when it relates to

00:09:03,250 --> 00:09:07,150
typography but I guess the point I'm

00:09:05,500 --> 00:09:14,470
really trying to make is like chill out

00:09:07,150 --> 00:09:16,690
with the open sans and also this in

00:09:14,470 --> 00:09:18,760
adopting real web fonts bees also

00:09:16,690 --> 00:09:20,440
adopted some performance problems we're

00:09:18,760 --> 00:09:21,910
building sites that request more fonts

00:09:20,440 --> 00:09:24,550
and they're bigger too we've gone from

00:09:21,910 --> 00:09:27,370
an eight kilobyte average 259 kilobyte

00:09:24,550 --> 00:09:30,670
average in two years from 2012 to 2014

00:09:27,370 --> 00:09:32,520
and to mitigate this most font-face

00:09:30,670 --> 00:09:34,900
generators and web font services are

00:09:32,520 --> 00:09:36,340
subsetting fonts by default removing

00:09:34,900 --> 00:09:38,140
characters that are deemed to be

00:09:36,340 --> 00:09:40,510
unnecessary regardless of what the type

00:09:38,140 --> 00:09:42,310
designer originally intended while

00:09:40,510 --> 00:09:44,230
subsetting is often worthwhile it also

00:09:42,310 --> 00:09:45,670
imposes many limitations that aren't

00:09:44,230 --> 00:09:47,470
immediately obvious and this is

00:09:45,670 --> 00:09:49,780
something I discovered while maintaining

00:09:47,470 --> 00:09:52,780
normalized opentype CSS stylesheet that

00:09:49,780 --> 00:09:55,360
like its namesake normalized CSS aims to

00:09:52,780 --> 00:09:57,130
provide sound CSS default across

00:09:55,360 --> 00:09:59,410
browsers but specifically for these

00:09:57,130 --> 00:10:02,140
advanced typographic features with

00:09:59,410 --> 00:10:03,880
normalized opentype CSS we see ligatures

00:10:02,140 --> 00:10:06,010
turned on by default as they're supposed

00:10:03,880 --> 00:10:09,640
to be discretionary ligatures are used

00:10:06,010 --> 00:10:11,860
in headlines small caps can replace all

00:10:09,640 --> 00:10:13,510
caps settings in text settings which are

00:10:11,860 --> 00:10:15,010
less distracting when you're trying to

00:10:13,510 --> 00:10:17,950
create something good for long-form

00:10:15,010 --> 00:10:19,660
reading and we can use old-style

00:10:17,950 --> 00:10:21,430
numerals instead of lining numerals

00:10:19,660 --> 00:10:23,200
which are also less distracting and text

00:10:21,430 --> 00:10:24,910
settings if you're using script

00:10:23,200 --> 00:10:26,410
typefaces you can turn on alternate

00:10:24,910 --> 00:10:28,660
glyph settings which make them much more

00:10:26,410 --> 00:10:30,370
versatile and for some languages there

00:10:28,660 --> 00:10:33,520
are actually open type features that are

00:10:30,370 --> 00:10:35,530
necessary to use that language properly

00:10:33,520 --> 00:10:38,260
or use those fonts properly for certain

00:10:35,530 --> 00:10:40,270
languages but in practice browser

00:10:38,260 --> 00:10:43,300
inconsistencies on by setting these

00:10:40,270 --> 00:10:44,860
features on by default are actually less

00:10:43,300 --> 00:10:46,540
of a problem than those ligatures

00:10:44,860 --> 00:10:48,220
alternate glyphs and other design

00:10:46,540 --> 00:10:52,210
considerations being sub set out by

00:10:48,220 --> 00:10:54,370
default simultaneously we're expecting

00:10:52,210 --> 00:10:56,260
more and more type of type on the web

00:10:54,370 --> 00:10:58,420
yet aggressive subsetting means cutting

00:10:56,260 --> 00:11:00,670
down a typeface to only support certain

00:10:58,420 --> 00:11:02,140
features by default and sometimes other

00:11:00,670 --> 00:11:03,820
languages are supported through other

00:11:02,140 --> 00:11:04,310
fonts entirely but the issue still

00:11:03,820 --> 00:11:06,529
stands

00:11:04,310 --> 00:11:07,990
need to pay attention to it more and

00:11:06,529 --> 00:11:10,279
more readers are coming online and

00:11:07,990 --> 00:11:11,930
expect to be able to read in their own

00:11:10,279 --> 00:11:14,510
language in an appropriate type of

00:11:11,930 --> 00:11:16,160
graphic voice when writing and speaking

00:11:14,510 --> 00:11:18,350
about some of these performance problems

00:11:16,160 --> 00:11:19,730
in relation to type it sometimes common

00:11:18,350 --> 00:11:21,740
to only place them in their immediate

00:11:19,730 --> 00:11:23,270
context but the reality is a lot of

00:11:21,740 --> 00:11:24,620
people have been working on challenges

00:11:23,270 --> 00:11:26,630
like this for a long time in other

00:11:24,620 --> 00:11:30,320
formats and many of those people were

00:11:26,630 --> 00:11:32,390
actually designers we saw how in the mid

00:11:30,320 --> 00:11:33,980
16th century halting approached in

00:11:32,390 --> 00:11:35,990
efficiency through a space-saving metal

00:11:33,980 --> 00:11:37,760
typefaces themselves but our current

00:11:35,990 --> 00:11:40,220
technology renders the same point of

00:11:37,760 --> 00:11:42,200
intervention less impactful this

00:11:40,220 --> 00:11:44,240
discovery was shared by Matthew Carter a

00:11:42,200 --> 00:11:45,830
highly respected type designer well

00:11:44,240 --> 00:11:47,570
known for making both Georgia and

00:11:45,830 --> 00:11:50,089
Verdana so you've definitely used his

00:11:47,570 --> 00:11:51,740
work when he spoke in Vancouver he

00:11:50,089 --> 00:11:54,200
mentioned the need for efficient type in

00:11:51,740 --> 00:11:56,000
the mid-1980s how might we use serif

00:11:54,200 --> 00:11:57,860
fonts which required significantly more

00:11:56,000 --> 00:12:00,260
storage space at the time on a machine

00:11:57,860 --> 00:12:02,810
where space was extremely limited at

00:12:00,260 --> 00:12:04,610
that time with the size of the fonts the

00:12:02,810 --> 00:12:08,810
amount of data that was required to

00:12:04,610 --> 00:12:11,630
define and store a font in computer

00:12:08,810 --> 00:12:12,950
memory it limited the number of fonts

00:12:11,630 --> 00:12:17,240
you could get on your typesetting system

00:12:12,950 --> 00:12:20,270
at any one time I did an analysis of the

00:12:17,240 --> 00:12:23,030
data and found that a typical cereth

00:12:20,270 --> 00:12:25,820
face you see on the Left needed nearly

00:12:23,030 --> 00:12:28,010
twice as much data as a sans serif in

00:12:25,820 --> 00:12:30,640
the middle because of all the points

00:12:28,010 --> 00:12:34,430
required to define the elegantly curved

00:12:30,640 --> 00:12:36,650
serif brackets the numbers at the bottom

00:12:34,430 --> 00:12:39,020
of the slide by the way are the they

00:12:36,650 --> 00:12:42,350
represent the amount of data needed to

00:12:39,020 --> 00:12:44,420
store each each of the fonts so the

00:12:42,350 --> 00:12:47,300
sans-serif in the middle sands the

00:12:44,420 --> 00:12:51,560
seraphs was much more economical 81 to

00:12:47,300 --> 00:12:54,890
151 aha I sought the engineers have a

00:12:51,560 --> 00:12:56,330
problem designer to the rescue I made a

00:12:54,890 --> 00:12:59,000
serif type you can sit on the right

00:12:56,330 --> 00:13:00,740
without curved seraphs I made them

00:12:59,000 --> 00:13:03,140
polygonal at a straight line segments

00:13:00,740 --> 00:13:05,870
chamfered brackets and look as

00:13:03,140 --> 00:13:08,410
economical in data as a sans serif

00:13:05,870 --> 00:13:10,570
that's we call it charter on the right

00:13:08,410 --> 00:13:13,070
so I went to the head of engineering

00:13:10,570 --> 00:13:16,930
with my numbers and I said proudly I

00:13:13,070 --> 00:13:20,180
have solved your problem oh he said

00:13:16,930 --> 00:13:22,009
what problem and I said well you know

00:13:20,180 --> 00:13:25,639
the problem of the huge data you require

00:13:22,009 --> 00:13:27,589
for serif fonts and so on oh he said we

00:13:25,639 --> 00:13:29,690
solved that problem last week we wrote a

00:13:27,589 --> 00:13:31,250
compaction routine that reduces the size

00:13:29,690 --> 00:13:33,290
of all fonts by an order of magnitude

00:13:31,250 --> 00:13:35,959
you can have as many fonts on your

00:13:33,290 --> 00:13:38,690
system as you like well thank you for

00:13:35,959 --> 00:13:40,730
letting me know i said filed again the

00:13:38,690 --> 00:13:44,089
engineers managed to compress every font

00:13:40,730 --> 00:13:45,680
on the system oh well constraints can

00:13:44,089 --> 00:13:47,540
lead to amazing results as they do in

00:13:45,680 --> 00:13:49,339
this case and Matthew Carter still goes

00:13:47,540 --> 00:13:51,829
on to design that amazing typeface

00:13:49,339 --> 00:13:54,319
charter by imposing those limitations

00:13:51,829 --> 00:13:56,269
upon himself but as he notes this

00:13:54,319 --> 00:13:59,060
doesn't end up being the most impactful

00:13:56,269 --> 00:14:00,829
way to approach the problem we're now in

00:13:59,060 --> 00:14:02,329
a similar position on the web the

00:14:00,829 --> 00:14:05,000
designer has a role in web performance

00:14:02,329 --> 00:14:07,130
of type but solving our problems within

00:14:05,000 --> 00:14:08,569
a single typeface itself as Paul teen

00:14:07,130 --> 00:14:10,790
did as Matthew Carter ended up pursuing

00:14:08,569 --> 00:14:12,889
for other ends no longer has the same

00:14:10,790 --> 00:14:14,240
impact the intervention must come at the

00:14:12,889 --> 00:14:16,509
level of the system not within the

00:14:14,240 --> 00:14:18,649
implementation of an individual font

00:14:16,509 --> 00:14:21,019
thankfully the web fonts working group

00:14:18,649 --> 00:14:22,490
new just this and with the adoption of

00:14:21,019 --> 00:14:24,230
walk they were able to turn their

00:14:22,490 --> 00:14:26,269
attention to refining that existing

00:14:24,230 --> 00:14:29,810
implementation and the result of their

00:14:26,269 --> 00:14:31,730
work is aptly named waft too from a

00:14:29,810 --> 00:14:33,860
technical perspective woof to sounds a

00:14:31,730 --> 00:14:35,149
little bit too good to be true what if

00:14:33,860 --> 00:14:36,769
you could continue to use the same

00:14:35,149 --> 00:14:38,779
interface for fonts you're already

00:14:36,769 --> 00:14:40,519
familiar with font face or a font

00:14:38,779 --> 00:14:41,750
service but soon you could expect the

00:14:40,519 --> 00:14:44,480
fonts requested to be significantly

00:14:41,750 --> 00:14:46,430
smaller and file size well this is

00:14:44,480 --> 00:14:48,529
possible largely because of the broadly

00:14:46,430 --> 00:14:51,170
compression algorithm applied to walk to

00:14:48,529 --> 00:14:52,910
files broadly is a generic purpose

00:14:51,170 --> 00:14:54,620
lossless compression algorithm that uses

00:14:52,910 --> 00:14:56,500
a bunch of compression techniques I will

00:14:54,620 --> 00:14:59,029
probably never understand in my lifetime

00:14:56,500 --> 00:15:00,160
it provides a denser compression than

00:14:59,029 --> 00:15:02,509
waffle I'll maintaining a good

00:15:00,160 --> 00:15:04,610
decompression rate on mobile devices so

00:15:02,509 --> 00:15:08,269
it's still very successful at that and

00:15:04,610 --> 00:15:09,860
when the when various type foundry and

00:15:08,269 --> 00:15:11,180
web font service catalogs were run

00:15:09,860 --> 00:15:12,860
through this broadly compression

00:15:11,180 --> 00:15:15,889
algorithm by the web fonts working group

00:15:12,860 --> 00:15:17,870
we see some massive improvement there is

00:15:15,889 --> 00:15:19,970
a fourteen percent improvement on type

00:15:17,870 --> 00:15:23,089
kits truetype catalog and a twenty-seven

00:15:19,970 --> 00:15:24,410
percent improvement along the rest of

00:15:23,089 --> 00:15:26,779
their catalog and this is mirrored in

00:15:24,410 --> 00:15:28,579
the monotype fonts com catalog which

00:15:26,779 --> 00:15:30,010
sees a 25-percent compression

00:15:28,579 --> 00:15:32,590
improvement over waffle

00:15:30,010 --> 00:15:34,840
us the best observed compression rate

00:15:32,590 --> 00:15:36,490
for a non Latin typeface was sixty

00:15:34,840 --> 00:15:39,250
percent which has some pretty amazing

00:15:36,490 --> 00:15:42,430
implications for using real web fonts in

00:15:39,250 --> 00:15:44,140
other languages successfully and one of

00:15:42,430 --> 00:15:45,550
the best things about waft two is really

00:15:44,140 --> 00:15:47,710
one of the best things about font face

00:15:45,550 --> 00:15:49,360
the font face specification cleverly

00:15:47,710 --> 00:15:51,700
anticipated the need to support multiple

00:15:49,360 --> 00:15:53,470
formats simultaneously so even though

00:15:51,700 --> 00:15:56,200
woth two is new there are no changes to

00:15:53,470 --> 00:15:57,640
the CSS syntax itself to continue with

00:15:56,200 --> 00:15:59,740
this example before you might have

00:15:57,640 --> 00:16:01,660
loaded in a locked file but also wanted

00:15:59,740 --> 00:16:03,460
to support older devices and ignoring

00:16:01,660 --> 00:16:05,320
some internet explorer inconsistencies

00:16:03,460 --> 00:16:07,720
we can see how we can load in an

00:16:05,320 --> 00:16:10,090
embedded open type file to support older

00:16:07,720 --> 00:16:12,700
Internet Explorer versions and in the

00:16:10,090 --> 00:16:14,740
same way we can also fall back to a true

00:16:12,700 --> 00:16:16,660
type font file if Wafaa isn't supported

00:16:14,740 --> 00:16:18,880
either well I wouldn't recommend doing

00:16:16,660 --> 00:16:20,350
this anymore now since woof is so well

00:16:18,880 --> 00:16:22,210
supported but it serves to illustrate

00:16:20,350 --> 00:16:24,730
how we can do the same thing with woth

00:16:22,210 --> 00:16:27,070
too we can optimistically support this

00:16:24,730 --> 00:16:28,360
new format by placing it above our waft

00:16:27,070 --> 00:16:30,880
Eckler Asians and if the browser

00:16:28,360 --> 00:16:32,560
supports woof to that will be loaded and

00:16:30,880 --> 00:16:36,700
if not it will fall back to the original

00:16:32,560 --> 00:16:38,650
flavor of woth now if you're using a web

00:16:36,700 --> 00:16:40,300
font service to provide your fonts this

00:16:38,650 --> 00:16:42,340
is the kind of CSS file you're getting

00:16:40,300 --> 00:16:43,720
back and it also means when you're

00:16:42,340 --> 00:16:46,000
requesting that you might actually

00:16:43,720 --> 00:16:49,300
already be using woth too and not even

00:16:46,000 --> 00:16:51,880
realize it a few months back open sans

00:16:49,300 --> 00:16:53,950
Hebrew and some other google fonts early

00:16:51,880 --> 00:16:56,230
access typefaces were switched over to

00:16:53,950 --> 00:16:58,600
waft too so when you requested them you

00:16:56,230 --> 00:17:00,910
would get a CSS file back and if you

00:16:58,600 --> 00:17:02,350
actually went and investigated it you

00:17:00,910 --> 00:17:04,150
would see would be getting off to files

00:17:02,350 --> 00:17:05,829
and browsers that supported it and since

00:17:04,150 --> 00:17:08,170
then Google Fonts has gone on to add

00:17:05,829 --> 00:17:09,490
this for everything in their catalog so

00:17:08,170 --> 00:17:11,740
if you're using google fonts you're

00:17:09,490 --> 00:17:13,620
already using oauth2 sadly this isn't

00:17:11,740 --> 00:17:16,030
the case from pretty much every other

00:17:13,620 --> 00:17:17,949
web font service but you still have the

00:17:16,030 --> 00:17:21,220
opportunity to generate waft two files

00:17:17,949 --> 00:17:23,350
yourself if your self hosting one way to

00:17:21,220 --> 00:17:25,360
do this is by cloning Google's

00:17:23,350 --> 00:17:28,270
implementation of waft to and running it

00:17:25,360 --> 00:17:29,620
locally on the command line if and so

00:17:28,270 --> 00:17:31,750
you give it a true type font and you'll

00:17:29,620 --> 00:17:33,250
get a waft to file back and if that's

00:17:31,750 --> 00:17:35,350
that's less appealing to you you can

00:17:33,250 --> 00:17:37,120
also use font squirrel and as long as

00:17:35,350 --> 00:17:38,800
you make sure to use the expert settings

00:17:37,120 --> 00:17:40,810
and sort of uncheck the other things

00:17:38,800 --> 00:17:43,330
that mess with your font you can convert

00:17:40,810 --> 00:17:45,730
to and from waft to fairly easily

00:17:43,330 --> 00:17:47,049
now it's important when you're

00:17:45,730 --> 00:17:48,909
self-hosting fonts to check your

00:17:47,049 --> 00:17:51,549
licenses and make sure you know what

00:17:48,909 --> 00:17:53,230
you're allowed to do most foundries and

00:17:51,549 --> 00:17:55,120
distributors are usually run by small

00:17:53,230 --> 00:17:56,679
personable teams and it's a good excuse

00:17:55,120 --> 00:17:58,690
to say hello to them and say that you

00:17:56,679 --> 00:18:00,370
like their typefaces and also ask them

00:17:58,690 --> 00:18:02,559
to generate the woof two files for you

00:18:00,370 --> 00:18:03,970
it'll be much more success a lot of them

00:18:02,559 --> 00:18:05,950
were actually totally happy to do this

00:18:03,970 --> 00:18:08,080
and they're just a little bit behind on

00:18:05,950 --> 00:18:09,700
doing this and hopefully by asking for

00:18:08,080 --> 00:18:11,590
them we can encourage performance

00:18:09,700 --> 00:18:13,570
improvements at the level they should be

00:18:11,590 --> 00:18:14,890
at so everyone can get waft to files

00:18:13,570 --> 00:18:17,500
rather than just generating them

00:18:14,890 --> 00:18:19,299
ourselves really one of the only

00:18:17,500 --> 00:18:21,549
downsides about woth 2 is the browser

00:18:19,299 --> 00:18:23,950
support which is actually still not too

00:18:21,549 --> 00:18:27,159
bad it's been supported in chrome since

00:18:23,950 --> 00:18:28,630
36 and opera since 23 and it's now in

00:18:27,159 --> 00:18:31,960
the latest version of the Android

00:18:28,630 --> 00:18:33,880
Browser it's in Firefox Devon nightly

00:18:31,960 --> 00:18:36,340
editions by default and it's but it's

00:18:33,880 --> 00:18:37,960
turned off on a under a flag in the main

00:18:36,340 --> 00:18:40,029
version of Firefox but hopefully that

00:18:37,960 --> 00:18:42,519
means it's getting added soon and it's

00:18:40,029 --> 00:18:44,710
under consideration for IE but since

00:18:42,519 --> 00:18:46,450
fall backs are already built into the

00:18:44,710 --> 00:18:49,559
way we're using it there's no really no

00:18:46,450 --> 00:18:51,639
excuse just to avoid using it now and

00:18:49,559 --> 00:18:53,590
this might make it seem like the

00:18:51,639 --> 00:18:55,269
performance of web fonts is purely an

00:18:53,590 --> 00:18:57,700
engineering challenge that's been solved

00:18:55,269 --> 00:18:59,320
as matthew carter discovered software

00:18:57,700 --> 00:19:01,149
engineers are capable of creating these

00:18:59,320 --> 00:19:02,980
massive performance improvements as this

00:19:01,149 --> 00:19:04,990
is at the level of the system making our

00:19:02,980 --> 00:19:07,750
one-off improvement sometimes seem

00:19:04,990 --> 00:19:09,730
ineffective or small but I see waft to

00:19:07,750 --> 00:19:11,320
is an opportunity to reconsider what's

00:19:09,730 --> 00:19:13,269
really important in the performance of

00:19:11,320 --> 00:19:14,500
type with woof to files being

00:19:13,269 --> 00:19:16,299
dramatically smaller there's an

00:19:14,500 --> 00:19:18,309
opportunity for designers and front-end

00:19:16,299 --> 00:19:19,929
developers to turn their focus instead

00:19:18,309 --> 00:19:23,620
to perceive performance and other

00:19:19,929 --> 00:19:25,539
client-side optimizations instead so

00:19:23,620 --> 00:19:29,529
some recommendations I have for this are

00:19:25,539 --> 00:19:32,529
to skip Bay 64 encoding fonts into your

00:19:29,529 --> 00:19:33,639
CSS files in practice there they're

00:19:32,529 --> 00:19:36,010
harder to maintain and they don't

00:19:33,639 --> 00:19:37,720
actually give you any benefits really so

00:19:36,010 --> 00:19:40,149
if we have a file like this we have the

00:19:37,720 --> 00:19:42,159
option of base64 encoding all the fonts

00:19:40,149 --> 00:19:44,470
it to the single CSS file but in

00:19:42,159 --> 00:19:45,789
practice this means if we're supporting

00:19:44,470 --> 00:19:47,649
a lot of formats we're actually

00:19:45,789 --> 00:19:51,610
dramatically increasing the size of our

00:19:47,649 --> 00:19:54,760
CSS file rather than just asking for the

00:19:51,610 --> 00:19:56,139
specific font file that we need and the

00:19:54,760 --> 00:19:57,159
performance improvement we see from

00:19:56,139 --> 00:19:59,440
doing that from reducing the

00:19:57,159 --> 00:20:02,739
HTTP requests you rarely turn out to be

00:19:59,440 --> 00:20:04,599
as good good enough to balance the

00:20:02,739 --> 00:20:06,970
trade-off of having the much bigger CSS

00:20:04,599 --> 00:20:09,009
file so just stick with the original

00:20:06,970 --> 00:20:11,470
format it's easier to maintain as well

00:20:09,009 --> 00:20:14,259
and also if you're using a web font

00:20:11,470 --> 00:20:15,489
service looker stop using the CSS only

00:20:14,259 --> 00:20:16,899
approach a lot of them will say you

00:20:15,489 --> 00:20:19,149
don't have to use JavaScript you can

00:20:16,899 --> 00:20:21,399
just take a link tag or an import

00:20:19,149 --> 00:20:22,629
statement and drop it in but in practice

00:20:21,399 --> 00:20:24,700
this doesn't give you the level of

00:20:22,629 --> 00:20:26,950
control you need when loading in fonts

00:20:24,700 --> 00:20:28,659
if you look around there's probably an

00:20:26,950 --> 00:20:30,340
advanced option or a javascript option

00:20:28,659 --> 00:20:32,619
and they'll give you a snippet to paste

00:20:30,340 --> 00:20:34,179
in instead which is probably using the

00:20:32,619 --> 00:20:37,119
web font loader under the hood which is

00:20:34,179 --> 00:20:39,220
maintained by rammstein and just to show

00:20:37,119 --> 00:20:41,950
you some of the power that the web font

00:20:39,220 --> 00:20:44,080
loader has I want to see how many

00:20:41,950 --> 00:20:45,820
different web font services I could load

00:20:44,080 --> 00:20:47,139
in fonts from at once in practice you

00:20:45,820 --> 00:20:50,080
wouldn't want to do this it's too many

00:20:47,139 --> 00:20:52,659
but we can see how configurable this

00:20:50,080 --> 00:20:55,080
tool is so I'm going to load in Charlie

00:20:52,659 --> 00:20:57,820
and echo by Ross Malone from tipo tech

00:20:55,080 --> 00:21:00,820
Nadine shaheen's fruiterer arabic from

00:20:57,820 --> 00:21:03,609
monotype elisa no max escapade from type

00:21:00,820 --> 00:21:06,129
together via Typekit james t Edmonton's

00:21:03,609 --> 00:21:08,379
lavanderia from lost type and janna

00:21:06,129 --> 00:21:11,320
concepts open sans hebrew from google

00:21:08,379 --> 00:21:13,539
fonts so we can do this all in one

00:21:11,320 --> 00:21:15,460
configuration object with the web font

00:21:13,539 --> 00:21:17,229
loader rather than copy and pasting

00:21:15,460 --> 00:21:19,389
snippets from each one of those services

00:21:17,229 --> 00:21:22,690
which are probably all using this exact

00:21:19,389 --> 00:21:24,580
same open source project anyways so we

00:21:22,690 --> 00:21:26,919
can ask google for open sans hebrew

00:21:24,580 --> 00:21:30,009
Typekit give them our kit ID for

00:21:26,919 --> 00:21:32,049
escapade monotype again give them our ID

00:21:30,009 --> 00:21:35,320
which we've configured on their website

00:21:32,049 --> 00:21:36,789
and then lavanderia is self hosted and

00:21:35,320 --> 00:21:38,889
you can specify different weights and

00:21:36,789 --> 00:21:43,059
tebow tech we get this configuration

00:21:38,889 --> 00:21:44,470
object and now in practice again you

00:21:43,059 --> 00:21:46,179
wouldn't want to load this many fonts at

00:21:44,470 --> 00:21:48,369
once but now that you have the web font

00:21:46,179 --> 00:21:50,590
loader project in your page you can also

00:21:48,369 --> 00:21:52,210
decide to load some fonts earlier in

00:21:50,590 --> 00:21:53,710
some fonts later so you can say these

00:21:52,210 --> 00:21:55,960
are the most critical ones I need to get

00:21:53,710 --> 00:21:59,289
on my my page and I can defer some of

00:21:55,960 --> 00:22:01,059
these until after the initial load the

00:21:59,289 --> 00:22:03,399
web font loader also allows us to lotus

00:22:01,059 --> 00:22:05,289
thing load our fonts in asynchronously

00:22:03,399 --> 00:22:07,839
and this is really important because as

00:22:05,289 --> 00:22:09,519
Tim Brown Typekit points out our view of

00:22:07,839 --> 00:22:10,960
typography on the web should be centered

00:22:09,519 --> 00:22:13,059
on the principle of

00:22:10,960 --> 00:22:15,039
gressive enhancement that a text itself

00:22:13,059 --> 00:22:16,960
is fundamentally more important than our

00:22:15,039 --> 00:22:19,980
ideas about how it should be typeset and

00:22:16,960 --> 00:22:22,750
this is hard for typographers to say but

00:22:19,980 --> 00:22:24,970
it hurts a little bit but it's true

00:22:22,750 --> 00:22:26,679
because the tech the type is there in

00:22:24,970 --> 00:22:30,399
service to what we're trying to read and

00:22:26,679 --> 00:22:32,980
we need to prioritize that so by loading

00:22:30,399 --> 00:22:35,020
things in asynchronously either using

00:22:32,980 --> 00:22:36,940
script injection which is described in

00:22:35,020 --> 00:22:39,039
the web font loader read me it's usually

00:22:36,940 --> 00:22:41,340
just a matter of copy and pasting or by

00:22:39,039 --> 00:22:44,230
experimenting with the async attribute

00:22:41,340 --> 00:22:46,149
we can have our fonts Loney and

00:22:44,230 --> 00:22:48,279
asynchronously and improve the

00:22:46,149 --> 00:22:50,049
experience there and scott gel who were

00:22:48,279 --> 00:22:52,360
lucky enough to have here with us has

00:22:50,049 --> 00:22:54,250
also written a fantastic article about

00:22:52,360 --> 00:22:55,960
font events and Bram Stein's newer

00:22:54,250 --> 00:22:57,880
version of the web font loader which is

00:22:55,960 --> 00:22:59,220
called font face observer so if you want

00:22:57,880 --> 00:23:02,559
to use something more bleeding edge i

00:22:59,220 --> 00:23:04,270
highly recommend this article but in

00:23:02,559 --> 00:23:06,429
each case what we've done is created an

00:23:04,270 --> 00:23:09,100
opportunity for a flash of unstyled text

00:23:06,429 --> 00:23:11,350
and yes this is an opportunity as Bram

00:23:09,100 --> 00:23:12,820
Stein is said fout is a feature and a

00:23:11,350 --> 00:23:15,279
condition and everyone should anticipate

00:23:12,820 --> 00:23:17,289
in design for it with the web font

00:23:15,279 --> 00:23:18,940
loader we get to specify a time out how

00:23:17,289 --> 00:23:20,890
much how long do we want to wait before

00:23:18,940 --> 00:23:23,440
we give up on the fonts or before we

00:23:20,890 --> 00:23:25,330
show that fall back text and this is an

00:23:23,440 --> 00:23:27,190
opportunity to make that number much

00:23:25,330 --> 00:23:29,080
lower we don't want to make people wait

00:23:27,190 --> 00:23:30,940
for what they have to read especially if

00:23:29,080 --> 00:23:34,270
their connection is poor so we can lower

00:23:30,940 --> 00:23:36,279
that to two milliseconds to 1.5 it's

00:23:34,270 --> 00:23:38,159
worth playing with that number but in

00:23:36,279 --> 00:23:41,770
any of those cases it really means that

00:23:38,159 --> 00:23:44,049
font stacks still matter this is

00:23:41,770 --> 00:23:46,480
something that I see really often in web

00:23:44,049 --> 00:23:47,470
font services they'll say here's the

00:23:46,480 --> 00:23:49,620
font that you're going to use and you

00:23:47,470 --> 00:23:52,090
can just paste in this little bit of CSS

00:23:49,620 --> 00:23:54,940
Soleil is the typeface and sans-serif

00:23:52,090 --> 00:23:56,409
and that's your entire font stack and I

00:23:54,940 --> 00:23:58,750
don't know but and I don't know if two

00:23:56,409 --> 00:24:01,690
things counts as a stack I'm not really

00:23:58,750 --> 00:24:03,370
sure about that when I see it references

00:24:01,690 --> 00:24:05,140
like that it kind of makes me feel like

00:24:03,370 --> 00:24:07,240
I got a lance through the face I don't

00:24:05,140 --> 00:24:09,309
know it's really upsetting to me because

00:24:07,240 --> 00:24:11,169
phone stacks are still really important

00:24:09,309 --> 00:24:12,520
font family is this amazing property

00:24:11,169 --> 00:24:15,100
where we have progressive enhancement

00:24:12,520 --> 00:24:17,409
built in we can specify all the fall

00:24:15,100 --> 00:24:18,700
backs and regardless of the devices and

00:24:17,409 --> 00:24:20,230
the fonts they have installed we get to

00:24:18,700 --> 00:24:22,690
specify what's optimal in each of those

00:24:20,230 --> 00:24:24,340
cases so for my slides this would be the

00:24:22,690 --> 00:24:27,700
font stack i'm using we can you

00:24:24,340 --> 00:24:29,650
avenir next on more recent OS 10 and iOS

00:24:27,700 --> 00:24:32,740
devices because we have it available but

00:24:29,650 --> 00:24:34,299
we can fall back to future on devices

00:24:32,740 --> 00:24:37,270
that have it and droid sans' where

00:24:34,299 --> 00:24:38,650
that's the only option and it's

00:24:37,270 --> 00:24:40,179
important to think about the order of

00:24:38,650 --> 00:24:41,500
these two because that does matter so

00:24:40,179 --> 00:24:44,980
you will always want to put helvetica

00:24:41,500 --> 00:24:47,890
neue before aerial for example but this

00:24:44,980 --> 00:24:50,110
this allows us to just think through the

00:24:47,890 --> 00:24:52,210
the fall backs we want to provide and

00:24:50,110 --> 00:24:53,980
this might seem like a lot of work and

00:24:52,210 --> 00:24:55,270
something that's kind of old school but

00:24:53,980 --> 00:24:57,399
I think it's actually still really

00:24:55,270 --> 00:24:58,659
relevant because if you're if you're

00:24:57,399 --> 00:25:00,610
doing something with a visual identity

00:24:58,659 --> 00:25:02,740
where type is very important which is

00:25:00,610 --> 00:25:05,440
pretty much every visual identity you're

00:25:02,740 --> 00:25:08,289
probably also sending email news letters

00:25:05,440 --> 00:25:10,419
or emails somewhere in in that system

00:25:08,289 --> 00:25:12,730
and you can save all of this to a

00:25:10,419 --> 00:25:15,039
variable in your preprocessor and reuse

00:25:12,730 --> 00:25:17,049
those for email templates emails only

00:25:15,039 --> 00:25:19,600
about twenty-five percent of clients at

00:25:17,049 --> 00:25:21,850
best support web fonts so this actually

00:25:19,600 --> 00:25:25,809
becomes pretty reusable in some of your

00:25:21,850 --> 00:25:27,580
other projects pierre hall teens

00:25:25,809 --> 00:25:30,039
endeavoured to improve spatial

00:25:27,580 --> 00:25:31,720
efficiency and enable more textually in

00:25:30,039 --> 00:25:33,250
propria communication in his day and

00:25:31,720 --> 00:25:35,140
though the issues driving our

00:25:33,250 --> 00:25:37,289
optimizations are not really as a dire

00:25:35,140 --> 00:25:39,460
there perhaps more relevant than ever

00:25:37,289 --> 00:25:40,929
it's clear there's a need and a

00:25:39,460 --> 00:25:43,299
precedence for designers improving

00:25:40,929 --> 00:25:45,429
typographic performance problems and by

00:25:43,299 --> 00:25:47,830
looking ahead to new technologies woth

00:25:45,429 --> 00:25:49,419
to when the inherit performance problems

00:25:47,830 --> 00:25:51,309
that it brings and taking the

00:25:49,419 --> 00:25:53,260
opportunity to employ other established

00:25:51,309 --> 00:25:54,970
practices in the meantime we can make

00:25:53,260 --> 00:25:56,529
our own suggestions about how a text

00:25:54,970 --> 00:25:59,020
might be received and read more

00:25:56,529 --> 00:26:00,549
efficiently there's precedents for

00:25:59,020 --> 00:26:03,820
designers role in the performance of

00:26:00,549 --> 00:26:05,740
type on the web and too often the way we

00:26:03,820 --> 00:26:07,809
view and present our work it can be easy

00:26:05,740 --> 00:26:10,059
to get caught up that what we're doing

00:26:07,809 --> 00:26:13,330
designing and developing is entirely new

00:26:10,059 --> 00:26:15,549
and I'm as guilty of that as anyone but

00:26:13,330 --> 00:26:17,440
to me there's something more wonderful

00:26:15,549 --> 00:26:18,760
about being reminded we're far from the

00:26:17,440 --> 00:26:20,320
first to try and improve the

00:26:18,760 --> 00:26:22,539
effectiveness and efficiency of our

00:26:20,320 --> 00:26:24,730
communication whether you're cutting the

00:26:22,539 --> 00:26:25,809
smallest readable metal type or just

00:26:24,730 --> 00:26:30,059
trying to make your fonts feel like

00:26:25,809 --> 00:26:30,059
they've loaded a bit faster thanks

00:26:30,550 --> 00:26:32,610

YouTube URL: https://www.youtube.com/watch?v=jOfg92nRR3Y


