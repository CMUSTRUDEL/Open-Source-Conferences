Title: Netdev 0x13 - Tutorial, De-mystifying the Networking Relationship with Kubernetes
Publication date: 2019-05-03
Playlist: Netdev 0x13 - Day 1 - Track 2 - Mar 20 2019
Description: 
	Mike Cambria gave a tutorial at netdev 0x13 on networking Linux
Containers using the Container Network Interface (CNI)
and Kubernetes (k8s). The tutorial went from basics
distinguishing the model of VM vs container networking
to providing an overview of k8s and CNI; along the
way Mike brought up  challenges vis-a-vis Linux kernel
and the effect some of the design decisions made by k8s
along with some of the solutions being proposed to address
some of these challenges.

More info:
https://netdevconf.org/0x13/session.html?tutorial-kubernetes
Captions: 
	00:00:00,000 --> 00:00:06,359
I guess it's time to get started my name

00:00:04,350 --> 00:00:09,410
is Mike Cambria I currently work for Red

00:00:06,359 --> 00:00:12,740
Hat been there about six eight months

00:00:09,410 --> 00:00:15,470
formerly from some of the usual suspects

00:00:12,740 --> 00:00:19,050
switching vendors in the Boston area

00:00:15,470 --> 00:00:21,029
today we're gonna talk about essentially

00:00:19,050 --> 00:00:23,939
container networking and we're going to

00:00:21,029 --> 00:00:25,590
dabble into little kubernetes it's just

00:00:23,939 --> 00:00:29,490
to tie it all together with one of the

00:00:25,590 --> 00:00:33,230
more prevalent container one times this

00:00:29,490 --> 00:00:36,210
is a tutorial it's gonna essentially

00:00:33,230 --> 00:00:37,649
teach you not networking if you're in

00:00:36,210 --> 00:00:39,840
this room you pull you know everything

00:00:37,649 --> 00:00:42,660
about to talk about but the goal is to

00:00:39,840 --> 00:00:45,120
try to tie a lot of things together that

00:00:42,660 --> 00:00:47,489
you already know you might not have

00:00:45,120 --> 00:00:50,160
known you know there's nothing special

00:00:47,489 --> 00:00:52,920
about networking when it containers are

00:00:50,160 --> 00:00:55,500
involved and I guess we can just dive

00:00:52,920 --> 00:00:57,390
into it my so my co-workers who are not

00:00:55,500 --> 00:01:01,079
here Doug Smith and Dan Williams also

00:00:57,390 --> 00:01:03,469
contributed to this presentation next

00:01:01,079 --> 00:01:03,469
slide please

00:01:03,799 --> 00:01:10,170
I'm assuming everyone can hear me

00:01:06,180 --> 00:01:14,369
I can certainly okay

00:01:10,170 --> 00:01:16,470
so some ground rules I'm assuming you

00:01:14,369 --> 00:01:18,090
know what a container is just at least

00:01:16,470 --> 00:01:20,909
in the basic level you've heard about

00:01:18,090 --> 00:01:26,909
things like kubernetes darker part man

00:01:20,909 --> 00:01:32,970
or just net thank you or even just using

00:01:26,909 --> 00:01:36,420
LXE and linux or IP IP route to commands

00:01:32,970 --> 00:01:39,990
for net name space ad exec etc there's

00:01:36,420 --> 00:01:42,000
nothing special there this is not a

00:01:39,990 --> 00:01:43,799
kubernetes talk we're just gonna talk

00:01:42,000 --> 00:01:46,560
about how kubernetes does tie into

00:01:43,799 --> 00:01:49,049
networking and then maybe a little pros

00:01:46,560 --> 00:01:51,570
and cons about what they do it's also

00:01:49,049 --> 00:01:54,049
not a jakka talk talk it does not use

00:01:51,570 --> 00:01:57,149
CNI but contain a networking interface

00:01:54,049 --> 00:01:58,770
so we will talk a little bit about it

00:01:57,149 --> 00:02:00,210
I'll use it for some context in case

00:01:58,770 --> 00:02:05,939
people are familiar how many people know

00:02:00,210 --> 00:02:08,539
what Drucker is okay LXE an IP router

00:02:05,939 --> 00:02:11,819
I'm assuming is a given okay

00:02:08,539 --> 00:02:13,020
again the focus here is on Linux

00:02:11,819 --> 00:02:15,600
container networking

00:02:13,020 --> 00:02:18,420
you see and I interface and how the

00:02:15,600 --> 00:02:21,170
runtimes use and the it what it doesn't

00:02:18,420 --> 00:02:23,400
doesn't do regarding the Linux stack is

00:02:21,170 --> 00:02:26,010
sort of like the pot that's gonna

00:02:23,400 --> 00:02:31,350
connect what you already know to this

00:02:26,010 --> 00:02:33,690
mysterious container networking and one

00:02:31,350 --> 00:02:36,770
other thing is see and I can be used by

00:02:33,690 --> 00:02:39,450
a lot of things not just kubernetes

00:02:36,770 --> 00:02:41,190
jocket doesn't use it but pretty much

00:02:39,450 --> 00:02:47,340
all the other one times four containers

00:02:41,190 --> 00:02:49,260
do so what we will talk about is I'm

00:02:47,340 --> 00:02:52,440
gonna spend a lot of time on what CNI is

00:02:49,260 --> 00:02:53,910
it's the glue that holds all this

00:02:52,440 --> 00:02:56,190
container networking together at least

00:02:53,910 --> 00:02:59,670
within this scope I'm gonna talk about

00:02:56,190 --> 00:03:01,710
how the runtimes use it I'm gonna give

00:02:59,670 --> 00:03:03,750
you some basic use of CNI to give you

00:03:01,710 --> 00:03:07,410
some ground will groundwork on how it's

00:03:03,750 --> 00:03:08,850
actually being used by runtimes and then

00:03:07,410 --> 00:03:11,300
we're gonna get into what kubernetes

00:03:08,850 --> 00:03:14,760
does and doesn't do regarding

00:03:11,300 --> 00:03:18,480
namespaces and we're gonna then talk

00:03:14,760 --> 00:03:20,670
about a specific plug-in multi my Intel

00:03:18,480 --> 00:03:23,760
originally that will solve some of the

00:03:20,670 --> 00:03:25,590
problems or problems quote-unquote

00:03:23,760 --> 00:03:28,320
depending on your point of view of what

00:03:25,590 --> 00:03:33,750
kubernetes doesn't bring to the table

00:03:28,320 --> 00:03:37,350
any questions interrupts have enabled so

00:03:33,750 --> 00:03:41,250
please just raise your hands shout let

00:03:37,350 --> 00:03:43,290
me know so anyway this is a brief

00:03:41,250 --> 00:03:45,360
history you can read it yourself what

00:03:43,290 --> 00:03:47,700
CNI is essentially it's not talking

00:03:45,360 --> 00:03:50,640
networking when jakka hit the scene a

00:03:47,700 --> 00:03:52,320
lot of people were using it and the

00:03:50,640 --> 00:03:54,230
networking was somewhat limited you

00:03:52,320 --> 00:03:57,150
needed to get things pushed into their

00:03:54,230 --> 00:04:00,300
repository in order to add something

00:03:57,150 --> 00:04:02,880
like mac VLAN or anything else that you

00:04:00,300 --> 00:04:04,800
might have already had with Linux so a

00:04:02,880 --> 00:04:09,240
whole bunch of people got involved to

00:04:04,800 --> 00:04:12,270
create C and I to let you do in a more

00:04:09,240 --> 00:04:13,980
open fashion you have more access to

00:04:12,270 --> 00:04:15,780
what Linux already did at the end of the

00:04:13,980 --> 00:04:17,670
day as you'll see throughout the talk

00:04:15,780 --> 00:04:20,670
Linux is doing all the heavy lifting

00:04:17,670 --> 00:04:23,530
there's nothing special here we're just

00:04:20,670 --> 00:04:25,990
telling you how you can get a container

00:04:23,530 --> 00:04:31,210
you actually get a net device in Linux

00:04:25,990 --> 00:04:34,150
and set out the parameters etc and this

00:04:31,210 --> 00:04:38,950
is literally from the github repo for

00:04:34,150 --> 00:04:42,730
CNI and it's that's the formal mission

00:04:38,950 --> 00:04:44,889
statement if you will anyone can

00:04:42,730 --> 00:04:48,070
contribute pull requests always welcome

00:04:44,889 --> 00:04:51,400
and again so this is what the CNI

00:04:48,070 --> 00:04:53,590
plugins formerly it's a it's responsible

00:04:51,400 --> 00:04:57,850
for adding network interfaces into a

00:04:53,590 --> 00:05:02,200
container that's the TLDR is the link

00:04:57,850 --> 00:05:05,620
for the repo and so now there are

00:05:02,200 --> 00:05:07,090
several basic types of plugins the ones

00:05:05,620 --> 00:05:08,500
you're gonna care about mostly you're

00:05:07,090 --> 00:05:10,930
almost always going to have a main

00:05:08,500 --> 00:05:13,900
interface is what's gonna create either

00:05:10,930 --> 00:05:16,120
of a Linux bridge a port on a Linux

00:05:13,900 --> 00:05:17,410
bridge Mac VLAN IP VLAN we're gonna

00:05:16,120 --> 00:05:21,100
cover all of these in a minute

00:05:17,410 --> 00:05:23,620
the other major type is IPM for the most

00:05:21,100 --> 00:05:26,290
part you always need an IPM unless you

00:05:23,620 --> 00:05:28,510
bundle something like a DHCP client in

00:05:26,290 --> 00:05:30,220
your container the problem with that of

00:05:28,510 --> 00:05:32,080
course is the container model for those

00:05:30,220 --> 00:05:35,740
who aren't familiar is you're supposed

00:05:32,080 --> 00:05:38,200
to have one thing running with PID one

00:05:35,740 --> 00:05:39,190
something like Apache nginx issue

00:05:38,200 --> 00:05:41,410
doesn't make a difference but you

00:05:39,190 --> 00:05:45,820
supposed to have one process if you do a

00:05:41,410 --> 00:05:48,430
PS on PS ax etc on inside a container

00:05:45,820 --> 00:05:49,030
you're supposed to see very very few

00:05:48,430 --> 00:05:51,550
things

00:05:49,030 --> 00:05:53,890
ideally one and that's the executable

00:05:51,550 --> 00:05:57,070
you're actually running people

00:05:53,890 --> 00:06:01,479
understand that so if you were to go off

00:05:57,070 --> 00:06:02,620
in bundle like ISC DHCP client into your

00:06:01,479 --> 00:06:04,479
container you're already starting to

00:06:02,620 --> 00:06:06,789
break that model but if you did

00:06:04,479 --> 00:06:11,410
something like that then you wouldn't

00:06:06,789 --> 00:06:14,650
need an IP m at all otherwise the CNI

00:06:11,410 --> 00:06:16,900
needs to bring IP m to you and I'll talk

00:06:14,650 --> 00:06:20,050
about the types we have and then there's

00:06:16,900 --> 00:06:21,610
another type of plug-in called meta that

00:06:20,050 --> 00:06:23,500
I'm gonna put it's pretty easier wait

00:06:21,610 --> 00:06:26,620
until we get there but it lets you do

00:06:23,500 --> 00:06:31,270
various things like tomb parameters IP

00:06:26,620 --> 00:06:34,120
tables rules etc one disclaimer C&I

00:06:31,270 --> 00:06:35,439
plugins also talk about things like they

00:06:34,120 --> 00:06:37,479
contain a Windows

00:06:35,439 --> 00:06:38,800
I don't know what that is I've never

00:06:37,479 --> 00:06:40,509
touched it I just know that there's

00:06:38,800 --> 00:06:42,489
something in there relating to Windows

00:06:40,509 --> 00:06:45,849
and that's all I'm gonna say about it

00:06:42,489 --> 00:06:47,439
today but there's also one other plugin

00:06:45,849 --> 00:06:49,689
which is called the sample which kind of

00:06:47,439 --> 00:06:51,879
like the template if you will for you to

00:06:49,689 --> 00:06:57,309
build your own plugins of any type main

00:06:51,879 --> 00:06:59,499
IPM or meta okay so the main itself

00:06:57,309 --> 00:07:02,439
these should look familiar to anyone

00:06:59,499 --> 00:07:05,679
familiar with IP route to bridge linux

00:07:02,439 --> 00:07:07,089
bridge it's typical Jaco zero if you've

00:07:05,679 --> 00:07:08,079
played with dhaka this is the kind of

00:07:07,089 --> 00:07:12,429
thing that's created

00:07:08,079 --> 00:07:13,839
there's also IP VLAN loopback Mac VLAN

00:07:12,429 --> 00:07:16,599
point-to-point

00:07:13,839 --> 00:07:18,189
a VLAN and host device which is actually

00:07:16,599 --> 00:07:20,439
you can literally put like a real NIC

00:07:18,189 --> 00:07:22,959
inside your container with that plugin

00:07:20,439 --> 00:07:24,269
again nothing special all they're gonna

00:07:22,959 --> 00:07:26,949
do is you're gonna have a container

00:07:24,269 --> 00:07:33,399
getting a net dev device that you're

00:07:26,949 --> 00:07:36,459
already well familiar with questions so

00:07:33,399 --> 00:07:38,679
now to the interesting I Pam because

00:07:36,459 --> 00:07:40,389
like you said before you're going to

00:07:38,679 --> 00:07:43,449
need to somehow get an address and you

00:07:40,389 --> 00:07:46,749
can either have a static one you can use

00:07:43,449 --> 00:07:48,069
DHCP that's built into the container but

00:07:46,749 --> 00:07:50,019
like I said you know if you grab a

00:07:48,069 --> 00:07:52,719
container on Draca hub or something else

00:07:50,019 --> 00:07:55,360
you're probably not gonna have a DHCP

00:07:52,719 --> 00:07:59,529
client built into the image so what you

00:07:55,360 --> 00:08:02,349
can do there is the cni DHCP IPM plug-in

00:07:59,529 --> 00:08:06,009
will talk to a DHCP server on your

00:08:02,349 --> 00:08:07,569
behalf in deal what the addresses DHCP

00:08:06,009 --> 00:08:10,300
anything else that comes from a real

00:08:07,569 --> 00:08:12,399
DHCP server that you've enterprise may

00:08:10,300 --> 00:08:15,129
already run and it will make sure that

00:08:12,399 --> 00:08:17,349
that information gets on your eat 0 or

00:08:15,129 --> 00:08:19,689
whatever net the net dev device that you

00:08:17,349 --> 00:08:22,689
have and host local is another way of

00:08:19,689 --> 00:08:25,479
just doing static where every node where

00:08:22,689 --> 00:08:28,749
CNI runs and containers will run will

00:08:25,479 --> 00:08:30,519
get an address based out of the city of

00:08:28,749 --> 00:08:32,740
address and whatever else is configured

00:08:30,519 --> 00:08:36,209
for that host local plugin out the we

00:08:32,740 --> 00:08:36,209
examples in a minute go ahead

00:08:47,730 --> 00:08:53,410
the container model is it the goal is

00:08:52,030 --> 00:08:56,140
what containers you supposed to be very

00:08:53,410 --> 00:08:58,270
very very lightweight and you don't want

00:08:56,140 --> 00:09:01,480
to do anything in your container image

00:08:58,270 --> 00:09:04,420
other than like Apache you could if you

00:09:01,480 --> 00:09:07,930
wanted to bundle and a DHCP client

00:09:04,420 --> 00:09:09,670
inside your container image but most

00:09:07,930 --> 00:09:11,580
people don't do that the goal is to be

00:09:09,670 --> 00:09:15,370
very very lightweight

00:09:11,580 --> 00:09:17,830
now not everybody obeys that rule

00:09:15,370 --> 00:09:20,110
I've seen some containers that have they

00:09:17,830 --> 00:09:24,060
think the VMS but again that's up to

00:09:20,110 --> 00:09:24,060
what you want to do in your container

00:09:27,660 --> 00:09:33,010
yeah you pretty much wanted one and I

00:09:30,550 --> 00:09:35,290
might have examples on this in a minute

00:09:33,010 --> 00:09:37,870
Apache and that's all it's gonna do PID

00:09:35,290 --> 00:09:39,850
one is Apache and it will be just

00:09:37,870 --> 00:09:41,770
running one not a series of them because

00:09:39,850 --> 00:09:45,910
in the container world if you wanted

00:09:41,770 --> 00:09:48,490
multiple processes listening to incoming

00:09:45,910 --> 00:09:50,050
connections you'd spin up multiple

00:09:48,490 --> 00:09:51,490
containers and then you let the

00:09:50,050 --> 00:09:54,010
container infrastructure deal with load

00:09:51,490 --> 00:09:55,990
balancing and all that stuff so it's

00:09:54,010 --> 00:09:57,550
it's a different world but what I'm

00:09:55,990 --> 00:09:59,410
hoping to get through today is to

00:09:57,550 --> 00:10:00,730
explain that you're gonna find that you

00:09:59,410 --> 00:10:02,800
already know all this stuff you just

00:10:00,730 --> 00:10:04,750
have to see how they're packaging it

00:10:02,800 --> 00:10:07,060
when I kept looking at it initially

00:10:04,750 --> 00:10:09,190
about three or four years ago it's not I

00:10:07,060 --> 00:10:10,900
would drop it like most people and just

00:10:09,190 --> 00:10:13,600
kept trying what am I missing what am i

00:10:10,900 --> 00:10:14,980
and you find out a lot of times that I'm

00:10:13,600 --> 00:10:17,350
getting ahead of myself in a bit but

00:10:14,980 --> 00:10:18,670
since we have context a lot of times

00:10:17,350 --> 00:10:19,690
you're looking for stuff that isn't they

00:10:18,670 --> 00:10:21,160
because they haven't done it yet and

00:10:19,690 --> 00:10:23,020
they're gonna find out the hard way that

00:10:21,160 --> 00:10:25,420
this is what you know there's we've got

00:10:23,020 --> 00:10:26,140
been you doing Unix for what 30 40 years

00:10:25,420 --> 00:10:29,080
something like that

00:10:26,140 --> 00:10:31,240
so there's a lot of experience that

00:10:29,080 --> 00:10:33,610
people in this room already have that

00:10:31,240 --> 00:10:36,520
some of this you know contain this is

00:10:33,610 --> 00:10:38,260
kind of new and they're learning as they

00:10:36,520 --> 00:10:39,490
go if you will I'll do you not learning

00:10:38,260 --> 00:10:42,460
but you can only get so many diff

00:10:39,490 --> 00:10:44,590
committed you could you know this work

00:10:42,460 --> 00:10:47,080
that has to be done and usually people

00:10:44,590 --> 00:10:49,710
solved one problem and then you move on

00:10:47,080 --> 00:10:49,710
to the next one

00:10:51,279 --> 00:10:58,010
the men are plugins so these are things

00:10:55,639 --> 00:11:00,529
that don't fit into getting an interface

00:10:58,010 --> 00:11:04,430
into your container but kind of useful

00:11:00,529 --> 00:11:06,380
for actually doing real work one of them

00:11:04,430 --> 00:11:09,740
the plugins that come with the cni

00:11:06,380 --> 00:11:13,790
repository flannel which is a little

00:11:09,740 --> 00:11:16,970
simplistic if you will VX line' plug-in

00:11:13,790 --> 00:11:18,380
it'll stop putting setting up tunnels

00:11:16,970 --> 00:11:20,060
between all the containers so they can

00:11:18,380 --> 00:11:23,029
talk to each other on the same broadcast

00:11:20,060 --> 00:11:24,410
domain tuning is starting to get into

00:11:23,029 --> 00:11:27,260
some of the interesting stuff where you

00:11:24,410 --> 00:11:29,510
can start setting sis cuddle values when

00:11:27,260 --> 00:11:31,730
sis cuddles are not global to the Linux

00:11:29,510 --> 00:11:33,949
node and they vive sis cuddles per

00:11:31,730 --> 00:11:35,779
namespace this is how you can start

00:11:33,949 --> 00:11:38,449
tuning them so that when you start you

00:11:35,779 --> 00:11:40,610
may only want to support I don't know

00:11:38,449 --> 00:11:42,709
the MTU size can change the Ethernet

00:11:40,610 --> 00:11:45,740
address can change you might want to set

00:11:42,709 --> 00:11:48,139
a limit on socket connections and what

00:11:45,740 --> 00:11:50,630
you can and can't do is not limited by

00:11:48,139 --> 00:11:52,910
CNI it's limited to what namespace

00:11:50,630 --> 00:11:58,490
support has for things like sis cuddle

00:11:52,910 --> 00:11:59,899
in the kernel port map is an important

00:11:58,490 --> 00:12:02,449
one because unfortunately the world

00:11:59,899 --> 00:12:06,019
wants the net and this is the way that

00:12:02,449 --> 00:12:10,069
you can get when a device is added to a

00:12:06,019 --> 00:12:12,949
container the host can get to it via

00:12:10,069 --> 00:12:16,880
port mapping and you don't know what the

00:12:12,949 --> 00:12:18,829
address is yet once it's assigned the

00:12:16,880 --> 00:12:21,110
host will know the C&I will know when it

00:12:18,829 --> 00:12:23,630
will start adding rules to IP tables so

00:12:21,110 --> 00:12:26,120
that you can start hitting port 8080 on

00:12:23,630 --> 00:12:28,250
the host will put will get added into

00:12:26,120 --> 00:12:30,170
port forwarded into the container on

00:12:28,250 --> 00:12:31,610
whatever port that you want you know

00:12:30,170 --> 00:12:34,699
what things you would have done with IP

00:12:31,610 --> 00:12:36,680
tables and masquerading anyway but this

00:12:34,699 --> 00:12:38,149
is all going to be automated and one of

00:12:36,680 --> 00:12:41,569
the reasons for a lot of this stuff is

00:12:38,149 --> 00:12:43,490
the arguments to these plugins tend to

00:12:41,569 --> 00:12:45,500
be wild cat not wild cat variables

00:12:43,490 --> 00:12:48,410
because they about tools whether it's

00:12:45,500 --> 00:12:50,060
ansible of equivalent or kubernetes may

00:12:48,410 --> 00:12:53,690
they all be passing environment

00:12:50,060 --> 00:12:55,819
variables and other things that so that

00:12:53,690 --> 00:13:00,740
you can just do come up with a template

00:12:55,819 --> 00:13:02,810
and the at one time when the create when

00:13:00,740 --> 00:13:03,590
the container is created it will start

00:13:02,810 --> 00:13:05,630
filling in the blame

00:13:03,590 --> 00:13:07,490
and you can just do things once and then

00:13:05,630 --> 00:13:10,820
just start supplying arguments when the

00:13:07,490 --> 00:13:13,460
containers are created being with

00:13:10,820 --> 00:13:15,590
plugins allows you to use TC rules to

00:13:13,460 --> 00:13:17,660
start limit limiting what can and go in

00:13:15,590 --> 00:13:19,850
and out of a container if you so choose

00:13:17,660 --> 00:13:21,080
all these are optional and there's

00:13:19,850 --> 00:13:22,910
another one that I've only started

00:13:21,080 --> 00:13:24,200
looking at source based routing that I

00:13:22,910 --> 00:13:26,390
don't even know where to does yet I

00:13:24,200 --> 00:13:29,080
listed there for completeness I just

00:13:26,390 --> 00:13:31,550
have had a chance it's fairly new to the

00:13:29,080 --> 00:13:34,510
master repository I don't think any

00:13:31,550 --> 00:13:39,290
other release C&I releases have it yet

00:13:34,510 --> 00:13:43,850
questions am I going too fast can you

00:13:39,290 --> 00:13:47,060
understand the Boston accent that's the

00:13:43,850 --> 00:13:48,140
problem if you can't okay so these are

00:13:47,060 --> 00:13:50,060
just some of the players who are

00:13:48,140 --> 00:13:53,030
actually using it and again this is all

00:13:50,060 --> 00:13:56,240
coming from the the CN eyes github page

00:13:53,030 --> 00:13:58,640
and I'm sure there's dozens more that

00:13:56,240 --> 00:14:00,070
aren't there yet not listed but just to

00:13:58,640 --> 00:14:03,470
give you an idea of some of the players

00:14:00,070 --> 00:14:06,170
rocket came with clo'es when that start

00:14:03,470 --> 00:14:08,420
up now owned by Red Hat they still use a

00:14:06,170 --> 00:14:10,940
kubernetes uses it openshift Cloud

00:14:08,420 --> 00:14:13,850
Foundry May so's I spent a lot of time

00:14:10,940 --> 00:14:14,990
with pardon me ins another one that I've

00:14:13,850 --> 00:14:16,340
been spending a lot of time with

00:14:14,990 --> 00:14:19,550
recently I'm going to give you some

00:14:16,340 --> 00:14:23,780
examples of that because it really it

00:14:19,550 --> 00:14:26,630
really exercises C&I well if the full

00:14:23,780 --> 00:14:28,600
feature set of CNI fairly simple within

00:14:26,630 --> 00:14:30,860
a simple way

00:14:28,600 --> 00:14:32,420
okay here's some more people and this is

00:14:30,860 --> 00:14:36,530
no these are third parties that are not

00:14:32,420 --> 00:14:38,600
part of the the the C&I github repo but

00:14:36,530 --> 00:14:40,490
you have to go to the sites to do it and

00:14:38,600 --> 00:14:41,780
this is just literally scratching the

00:14:40,490 --> 00:14:44,480
surface of people who have done it

00:14:41,780 --> 00:14:46,100
places that I've been in the past do

00:14:44,480 --> 00:14:49,490
have their own plugins that aren't even

00:14:46,100 --> 00:14:52,040
public and you know then others have

00:14:49,490 --> 00:14:54,560
just been able to take the speck take

00:14:52,040 --> 00:15:01,910
the samples and customize them to what

00:14:54,560 --> 00:15:04,760
their business need was okay so quick

00:15:01,910 --> 00:15:06,980
level set on what is going on what

00:15:04,760 --> 00:15:09,980
containers versus VMs we touched on it a

00:15:06,980 --> 00:15:12,020
little bit earlier one of the things

00:15:09,980 --> 00:15:13,460
like I keep stressing and I will

00:15:12,020 --> 00:15:17,330
continue to stress in this pitch is

00:15:13,460 --> 00:15:19,880
there's nothing new here the same RFC's

00:15:17,330 --> 00:15:21,800
the same specs the same Linux tis it's

00:15:19,880 --> 00:15:25,340
what you do would contain the networking

00:15:21,800 --> 00:15:27,350
regardless of a/c and I an art or CNI is

00:15:25,340 --> 00:15:29,420
is the same stuff they already familiar

00:15:27,350 --> 00:15:31,760
with the goal of this tutorial is to

00:15:29,420 --> 00:15:33,590
simply tie some things together and

00:15:31,760 --> 00:15:36,050
point out that you already know this you

00:15:33,590 --> 00:15:38,060
just might not know you know it and

00:15:36,050 --> 00:15:40,700
exposed to you for the first time and

00:15:38,060 --> 00:15:43,010
that's usually what it will take there

00:15:40,700 --> 00:15:45,040
are some differences though in how the

00:15:43,010 --> 00:15:48,560
containers are used versus the VM

00:15:45,040 --> 00:15:49,880
containers are meant to be real well you

00:15:48,560 --> 00:15:52,370
can let them live for as long as you

00:15:49,880 --> 00:15:56,240
want but they tend to come and go fairly

00:15:52,370 --> 00:15:59,810
quickly the analogy is with Linux looks

00:15:56,240 --> 00:16:01,130
if you do you follow the UNIX model

00:15:59,810 --> 00:16:05,930
where you do one thing you do one thing

00:16:01,130 --> 00:16:08,990
well like you do LS pipe it to grep pipe

00:16:05,930 --> 00:16:11,090
that to something else every one of

00:16:08,990 --> 00:16:13,010
those bash commands that you're piping

00:16:11,090 --> 00:16:16,160
from one to another think of as a

00:16:13,010 --> 00:16:17,960
container and think of the network as

00:16:16,160 --> 00:16:19,820
the pipe that gets from one container to

00:16:17,960 --> 00:16:23,180
another so the goal is the packet comes

00:16:19,820 --> 00:16:24,560
in you hit nginx it figures out where it

00:16:23,180 --> 00:16:27,290
goes next it sends it to another

00:16:24,560 --> 00:16:28,910
container and then eventually it might

00:16:27,290 --> 00:16:32,240
do something else like hit a database

00:16:28,910 --> 00:16:34,220
and as needed outside the scope of this

00:16:32,240 --> 00:16:36,410
talk but it's important so why people

00:16:34,220 --> 00:16:38,750
are using this the network what contain

00:16:36,410 --> 00:16:41,120
is is there are tools that'll turn

00:16:38,750 --> 00:16:43,940
around and say okay I I'm starting to

00:16:41,120 --> 00:16:45,920
hit capacity which I've whipped my web

00:16:43,940 --> 00:16:48,140
server so let me go off and start up a

00:16:45,920 --> 00:16:50,630
few more containers over the kubernetes

00:16:48,140 --> 00:16:52,280
will too because called pods and then

00:16:50,630 --> 00:16:54,230
it'll start handling the load and things

00:16:52,280 --> 00:16:55,940
that's supposed to automatically start

00:16:54,230 --> 00:16:58,100
telling the load balancers about these

00:16:55,940 --> 00:17:00,370
new plate these new containers and the

00:16:58,100 --> 00:17:03,650
network's supposed to just find them and

00:17:00,370 --> 00:17:07,820
some of the things that C&I does aids in

00:17:03,650 --> 00:17:10,010
that effort that makes sense so whereas

00:17:07,820 --> 00:17:13,280
we were talking before a VM is a

00:17:10,010 --> 00:17:15,320
complete host and does everything that a

00:17:13,280 --> 00:17:17,900
PC or server would have normally done

00:17:15,320 --> 00:17:20,089
whether it's DHCP had a static address

00:17:17,900 --> 00:17:23,300
these things tend to be very very small

00:17:20,089 --> 00:17:24,890
lightweight processes literally if you

00:17:23,300 --> 00:17:28,370
follow container model it's supposed to

00:17:24,890 --> 00:17:30,890
be one process if you to be a pure

00:17:28,370 --> 00:17:31,190
container and I don't know what they

00:17:30,890 --> 00:17:33,200
might

00:17:31,190 --> 00:17:35,030
terminology forward I just I just ten to

00:17:33,200 --> 00:17:37,640
one one you want whatever you would

00:17:35,030 --> 00:17:39,560
normally one of the commands usually in

00:17:37,640 --> 00:17:41,660
the old days you would run demons and

00:17:39,560 --> 00:17:43,250
you would demonize and you'd be taking

00:17:41,660 --> 00:17:45,140
input from things like standard in

00:17:43,250 --> 00:17:47,600
standard out what where to container you

00:17:45,140 --> 00:17:49,670
won't won anything demonized you run it

00:17:47,600 --> 00:17:51,830
from quote-unquote the command line or

00:17:49,670 --> 00:17:54,200
with an exec it and everything would

00:17:51,830 --> 00:17:56,030
come in from the usual whether its

00:17:54,200 --> 00:17:58,340
network or standard incident at our debt

00:17:56,030 --> 00:18:27,380
cetera that makes sense

00:17:58,340 --> 00:18:29,900
good like that's exactly what CNI does

00:18:27,380 --> 00:18:32,480
in the flows so if you go to the VM

00:18:29,900 --> 00:18:34,400
example you can you can provide a NIC to

00:18:32,480 --> 00:18:36,590
a VM in three different ways emulation

00:18:34,400 --> 00:18:38,570
powerful shallow sr io v and then you

00:18:36,590 --> 00:18:40,010
have the provisioning of the virtual

00:18:38,570 --> 00:18:44,030
switch on the hypervisor which features

00:18:40,010 --> 00:18:46,190
of these methods so what is the

00:18:44,030 --> 00:18:48,830
equivalent in provisioning networking

00:18:46,190 --> 00:18:50,600
for containers that's the subject of

00:18:48,830 --> 00:18:52,250
this talk see and I will do that

00:18:50,600 --> 00:18:53,750
networking path which is not inside the

00:18:52,250 --> 00:18:57,760
container the networking part in the

00:18:53,750 --> 00:19:02,230
hypervisor there is no hot water you

00:18:57,760 --> 00:19:05,120
well or there could be bare metal but

00:19:02,230 --> 00:19:07,430
what happens is the C&I the software

00:19:05,120 --> 00:19:12,230
that's involved to make this happen

00:19:07,430 --> 00:19:14,230
has a it runs on the host and it knows

00:19:12,230 --> 00:19:19,490
how to get into the net name space of

00:19:14,230 --> 00:19:26,360
the container and it will put a ve one

00:19:19,490 --> 00:19:28,010
end of the to use a bridge outside so

00:19:26,360 --> 00:19:30,680
maybe they are part of a tenant it has

00:19:28,010 --> 00:19:33,350
to go through solution but it has to go

00:19:30,680 --> 00:19:35,090
through some right then that I describe

00:19:33,350 --> 00:19:38,570
what port MAP and I think I cover it

00:19:35,090 --> 00:19:41,840
again later but how you quote-unquote

00:19:38,570 --> 00:19:43,340
orchestrate all this is outside it won't

00:19:41,840 --> 00:19:44,130
say it's outside the scope of this but

00:19:43,340 --> 00:19:46,380
it's up

00:19:44,130 --> 00:19:49,260
- what your business need is like if you

00:19:46,380 --> 00:19:51,360
run these containers on one of the major

00:19:49,260 --> 00:19:53,880
cloud providers they take care of

00:19:51,360 --> 00:19:56,580
getting you in and out of that cloud for

00:19:53,880 --> 00:19:59,040
you if you want on being metal then you

00:19:56,580 --> 00:20:01,950
need to do something like add a second

00:19:59,040 --> 00:20:11,730
neck to your container to deal with not

00:20:01,950 --> 00:20:14,430
cell traffic for example kubernetes is

00:20:11,730 --> 00:20:16,620
one that will do it to see depends on

00:20:14,430 --> 00:20:19,290
where you are coming from kubernetes

00:20:16,620 --> 00:20:20,640
tries to do all that for you and then

00:20:19,290 --> 00:20:22,830
there's another school of thought like

00:20:20,640 --> 00:20:24,540
network geeks like me I want to use my

00:20:22,830 --> 00:20:27,420
existing tools that ansible

00:20:24,540 --> 00:20:29,910
or whatever chef puppet or homegrown and

00:20:27,420 --> 00:20:31,530
I want all the network provision using

00:20:29,910 --> 00:20:33,630
those tools because I've got networking

00:20:31,530 --> 00:20:35,430
staff that will be already know how to

00:20:33,630 --> 00:20:38,850
do this and the difference between a

00:20:35,430 --> 00:20:40,980
host running via VMs are containers to

00:20:38,850 --> 00:20:42,600
them they don't care go back to what I

00:20:40,980 --> 00:20:47,300
said originally there's nothing new here

00:20:42,600 --> 00:20:47,300
they don't know the container or not and

00:20:51,500 --> 00:20:55,800
no you don't have to hear either you can

00:20:54,090 --> 00:20:58,770
because that was the model that was

00:20:55,800 --> 00:20:59,840
started early on with docker or we're

00:20:58,770 --> 00:21:02,280
even

00:20:59,840 --> 00:21:03,990
yeah Jacques play the best example

00:21:02,280 --> 00:21:06,210
because that most people understand it

00:21:03,990 --> 00:21:09,660
everything went dark I used localhost

00:21:06,210 --> 00:21:11,880
and they would net port forward in even

00:21:09,660 --> 00:21:13,920
though the namespace had the capability

00:21:11,880 --> 00:21:16,650
of having its own IP address then the

00:21:13,920 --> 00:21:19,020
next iteration is they realized oh I can

00:21:16,650 --> 00:21:19,800
give it an IP address using tools like

00:21:19,020 --> 00:21:22,020
this

00:21:19,800 --> 00:21:24,390
and now the containers can talk to and

00:21:22,020 --> 00:21:27,180
from the bridge or to it getting ahead

00:21:24,390 --> 00:21:28,470
of myself and Silv plug in Mac Vela and

00:21:27,180 --> 00:21:39,990
all these will go right to the tapas

00:21:28,470 --> 00:21:41,910
drop a rack switch actually it's it's

00:21:39,990 --> 00:21:44,550
the the containers all can talk to each

00:21:41,910 --> 00:21:46,170
other that's sort of like I guess I

00:21:44,550 --> 00:21:48,930
should have made wasn't making that

00:21:46,170 --> 00:21:50,340
perfectly clear the networks useless all

00:21:48,930 --> 00:21:53,130
these containers are useless they don't

00:21:50,340 --> 00:21:55,230
talk to each other and CNI is that glue

00:21:53,130 --> 00:21:57,290
and when I mentioned the pipe example

00:21:55,230 --> 00:21:58,760
and I did say that the network is

00:21:57,290 --> 00:22:00,770
what makes them talk to each other and

00:21:58,760 --> 00:22:02,480
you have to make sure they can they got

00:22:00,770 --> 00:22:04,970
to be on the same layer too or loaded

00:22:02,480 --> 00:22:06,230
network and if they're multi-tenant you

00:22:04,970 --> 00:22:09,980
don't want them talking to each other

00:22:06,230 --> 00:22:11,750
that's how you use the tool as opposed

00:22:09,980 --> 00:22:14,390
to the tool let you do anything you want

00:22:11,750 --> 00:22:16,160
you can become very insecure or you can

00:22:14,390 --> 00:22:18,440
be as secure as you want everything can

00:22:16,160 --> 00:22:20,690
be encrypted SSL doesn't make a

00:22:18,440 --> 00:22:23,600
difference so I say SSL that's TLS one

00:22:20,690 --> 00:22:27,560
two or better and or not that's up to

00:22:23,600 --> 00:22:37,330
how you want to use the tool anywhere

00:22:27,560 --> 00:22:37,330
else I'm I do all the time okay so ah

00:22:37,960 --> 00:22:43,510
let's see all right so some of the one

00:22:41,270 --> 00:22:46,070
of the things I want to mention again is

00:22:43,510 --> 00:22:47,780
with the containers versus the VM

00:22:46,070 --> 00:22:49,370
containers tend to be short-lived and

00:22:47,780 --> 00:22:51,650
then we're starting to see some things

00:22:49,370 --> 00:22:54,500
that we kind of want networking to

00:22:51,650 --> 00:22:57,800
address in a better way and for example

00:22:54,500 --> 00:23:00,470
IPS of these containers do come and go

00:22:57,800 --> 00:23:03,500
real fast and when the first things that

00:23:00,470 --> 00:23:05,270
we realized with a slash 24 on a local

00:23:03,500 --> 00:23:09,830
machine is we were wrapping these

00:23:05,270 --> 00:23:11,810
addresses fairly quickly and up doesn't

00:23:09,830 --> 00:23:13,370
wrap as quickly so there were some

00:23:11,810 --> 00:23:15,440
issues that we had to deal with so you

00:23:13,370 --> 00:23:17,840
need to be aware of these things when

00:23:15,440 --> 00:23:20,540
you're starting to deploy and the same

00:23:17,840 --> 00:23:22,010
with when I'm gonna talk a little bit

00:23:20,540 --> 00:23:24,620
more about this but just since I have

00:23:22,010 --> 00:23:26,450
context that is a problem where you

00:23:24,620 --> 00:23:28,880
might put forward into your container

00:23:26,450 --> 00:23:30,620
value the local host and then the

00:23:28,880 --> 00:23:32,960
reverse traffic will be asymmetric

00:23:30,620 --> 00:23:35,030
because it has source IP address and it

00:23:32,960 --> 00:23:37,550
will send it right through the switch to

00:23:35,030 --> 00:23:39,350
the remote end and some people don't

00:23:37,550 --> 00:23:41,390
like that or they may have some tools

00:23:39,350 --> 00:23:44,030
that they didn't expect the traffic to

00:23:41,390 --> 00:23:46,100
go in different directions and it or you

00:23:44,030 --> 00:23:48,770
start adding multiple container network

00:23:46,100 --> 00:23:53,140
interfaces to the container they may go

00:23:48,770 --> 00:23:53,140
a different address out a different port

00:23:54,010 --> 00:23:58,130
okay

00:23:55,130 --> 00:24:00,260
and there's some other stuff containers

00:23:58,130 --> 00:24:03,620
tend to run on VMs these things are not

00:24:00,260 --> 00:24:05,630
mutually exclusive you go to a cloud

00:24:03,620 --> 00:24:08,840
provider you are getting a VM for the

00:24:05,630 --> 00:24:10,800
most part and they'll run any of these

00:24:08,840 --> 00:24:12,809
containers in the networking

00:24:10,800 --> 00:24:17,160
infrastructure will need to be able to

00:24:12,809 --> 00:24:22,140
cooperate ah let's see

00:24:17,160 --> 00:24:25,380
yep oh one other thing that I was I only

00:24:22,140 --> 00:24:27,720
figured out myself recently as you can

00:24:25,380 --> 00:24:28,350
actually run depending on the tools you

00:24:27,720 --> 00:24:31,470
use

00:24:28,350 --> 00:24:34,170
you can run containers in VMs as part of

00:24:31,470 --> 00:24:36,210
the same orchestration suite so that if

00:24:34,170 --> 00:24:38,820
you if what makes more sense for you as

00:24:36,210 --> 00:24:40,980
a VM or you don't want to turn around

00:24:38,820 --> 00:24:42,720
forklift it and try and make it into a

00:24:40,980 --> 00:24:45,929
container and everything runs in with

00:24:42,720 --> 00:24:48,030
you know one I PID one you wrapped us

00:24:45,929 --> 00:24:51,300
and fit that model we want you can run

00:24:48,030 --> 00:24:53,220
it as a VM and still run it the rest or

00:24:51,300 --> 00:24:54,120
whatever you evolve to containers if

00:24:53,220 --> 00:24:56,250
that's what you want to go when I say

00:24:54,120 --> 00:24:58,890
containers you might also have heard of

00:24:56,250 --> 00:25:00,480
micro services architecture as far as

00:24:58,890 --> 00:25:02,070
I'm concerned it's the same thing there

00:25:00,480 --> 00:25:03,840
could be pure myself there that can

00:25:02,070 --> 00:25:08,820
quibble with it but for the sake of this

00:25:03,840 --> 00:25:10,350
talk they're interchangeable okay so now

00:25:08,820 --> 00:25:12,360
we're gonna get into a little bit of how

00:25:10,350 --> 00:25:17,490
CNI works and you're gonna it's really

00:25:12,360 --> 00:25:23,070
really simple this is what you need to

00:25:17,490 --> 00:25:27,210
do to actually have your host get an IP

00:25:23,070 --> 00:25:31,140
address inside a container these

00:25:27,210 --> 00:25:35,100
environment variables get set you need

00:25:31,140 --> 00:25:37,800
to tell C and I we can get to the

00:25:35,100 --> 00:25:41,370
configuration what the command is add

00:25:37,800 --> 00:25:44,100
delete the pet to the actual binaries

00:25:41,370 --> 00:25:45,870
and then the namespace of the container

00:25:44,100 --> 00:25:48,390
the canid contain of ID and the

00:25:45,870 --> 00:25:57,680
interface name if you want each zero is

00:25:48,390 --> 00:26:00,860
the default so a question oh say nothing

00:25:57,680 --> 00:26:04,460
it's orthogonal it's so it's orthogonal

00:26:00,860 --> 00:26:07,400
of DP if I know it it's a word that's

00:26:04,460 --> 00:26:08,870
not a lot to say here but they are a

00:26:07,400 --> 00:26:15,710
customer that's running inside

00:26:08,870 --> 00:26:18,980
containers inside the container and the

00:26:15,710 --> 00:26:21,200
CNI is kind trying to deal with it but

00:26:18,980 --> 00:26:23,930
there is no security no nothing because

00:26:21,200 --> 00:26:31,250
there is no network namespace for DP

00:26:23,930 --> 00:26:34,640
decade by default we accept patches so

00:26:31,250 --> 00:26:36,980
so when if you have a business need know

00:26:34,640 --> 00:26:39,170
so in Mellanox cases we do have because

00:26:36,980 --> 00:26:42,350
our deputy case based on our NIC

00:26:39,170 --> 00:26:45,440
so if you attach you give their

00:26:42,350 --> 00:26:47,870
namespace a native of the for example a

00:26:45,440 --> 00:26:49,490
virtual function to a negative then we

00:26:47,870 --> 00:26:51,740
enforce that's all the traffic that is

00:26:49,490 --> 00:26:54,470
on this DP DK that's using this virtual

00:26:51,740 --> 00:26:57,110
function is very enforcing all the

00:26:54,470 --> 00:26:59,050
traffic so we are kind of doing some

00:26:57,110 --> 00:27:02,840
kind of things but we didn't see any

00:26:59,050 --> 00:27:07,550
movement in the community that's open

00:27:02,840 --> 00:27:09,970
area DK that's trying you know to force

00:27:07,550 --> 00:27:12,710
this model no we're not forcing anything

00:27:09,970 --> 00:27:15,560
with the interface lets you do whatever

00:27:12,710 --> 00:27:17,630
you need to do and if people if I don't

00:27:15,560 --> 00:27:19,400
know who governs and I mean we've got

00:27:17,630 --> 00:27:21,680
maintain as and stuff it and what

00:27:19,400 --> 00:27:23,330
becomes part of the official repo or not

00:27:21,680 --> 00:27:24,110
I'm still trying to figure out it

00:27:23,330 --> 00:27:26,180
doesn't matter to me

00:27:24,110 --> 00:27:28,640
I just want to make sure all the basic

00:27:26,180 --> 00:27:38,030
plumbing what C&I works and what you do

00:27:28,640 --> 00:27:43,430
or don't do is up to you doing nothing

00:27:38,030 --> 00:27:46,250
at all okay so essentially this is the

00:27:43,430 --> 00:27:48,200
API if you will you set those a variable

00:27:46,250 --> 00:27:52,870
you know those are variables and then

00:27:48,200 --> 00:27:58,730
you need a plug-in and executable that

00:27:52,870 --> 00:28:03,290
implements the spec and you simply pass

00:27:58,730 --> 00:28:06,860
them in so you exact the C&I by nemi you

00:28:03,290 --> 00:28:09,080
pass in jason via standard in and you

00:28:06,860 --> 00:28:11,190
will get your results via standard out

00:28:09,080 --> 00:28:13,830
and the errors will come on

00:28:11,190 --> 00:28:15,480
real real simple this is it's it's it's

00:28:13,830 --> 00:28:19,710
very it's meant to be simple and

00:28:15,480 --> 00:28:21,990
lightweight and essentially this is an

00:28:19,710 --> 00:28:23,610
example of a bash script that I have

00:28:21,990 --> 00:28:25,500
that sets all this up usually I

00:28:23,610 --> 00:28:27,240
parameterize it but I wanted to make

00:28:25,500 --> 00:28:30,630
sure that you can see a working example

00:28:27,240 --> 00:28:35,550
and you literally past the ridge binary

00:28:30,630 --> 00:28:37,380
the config via standard in and the

00:28:35,550 --> 00:28:39,780
results are gonna come back as Jason on

00:28:37,380 --> 00:28:43,710
standard out these container world seems

00:28:39,780 --> 00:28:45,630
to love text and Jason as someone that's

00:28:43,710 --> 00:28:49,530
been doing embedded networking for my

00:28:45,630 --> 00:28:51,930
life you would never use text for any of

00:28:49,530 --> 00:28:53,880
this stuff but it does make it

00:28:51,930 --> 00:28:55,950
scriptable and that's the big win and

00:28:53,880 --> 00:28:58,170
that's one of the reasons why people are

00:28:55,950 --> 00:29:00,810
using it I'm sure there's a billion

00:28:58,170 --> 00:29:04,230
others so now this is an example of the

00:29:00,810 --> 00:29:07,020
config that was piped in before you need

00:29:04,230 --> 00:29:09,360
again very verbose is Jason you give it

00:29:07,020 --> 00:29:11,760
the version and that will be checked to

00:29:09,360 --> 00:29:14,280
just for sanity by the plug-in there's a

00:29:11,760 --> 00:29:16,650
name of this config file not to be

00:29:14,280 --> 00:29:17,850
confused with the file name some and

00:29:16,650 --> 00:29:21,420
this is something that can trip you up

00:29:17,850 --> 00:29:23,940
in the real world the name that you use

00:29:21,420 --> 00:29:26,790
would be this name an example test

00:29:23,940 --> 00:29:29,850
beyond zero the type is important that

00:29:26,790 --> 00:29:32,670
bridge is literally the name of the

00:29:29,850 --> 00:29:37,140
plug-in you were going to run bridge Mac

00:29:32,670 --> 00:29:38,880
VLAN IP VLAN etc and then this this

00:29:37,140 --> 00:29:40,980
bridge here because of stuff type bridge

00:29:38,880 --> 00:29:43,050
the parameters a dependent on what the

00:29:40,980 --> 00:29:44,970
plug-in is and in this example the

00:29:43,050 --> 00:29:47,160
bridge is in the Linux bridge and the

00:29:44,970 --> 00:29:50,610
name is test beyond zero and that will

00:29:47,160 --> 00:29:54,210
be the exact name of the device on the

00:29:50,610 --> 00:29:57,900
host so if you do an IP IP address show

00:29:54,210 --> 00:29:59,430
you'll see test beyond zero and if

00:29:57,900 --> 00:30:00,630
things Mac VLAN there's similar

00:29:59,430 --> 00:30:03,060
programming I'm not gonna bore you with

00:30:00,630 --> 00:30:08,420
all of them live up live on the on the

00:30:03,060 --> 00:30:11,490
github repo but is gateway is telling

00:30:08,420 --> 00:30:13,290
this config is gonna go off and say okay

00:30:11,490 --> 00:30:16,590
everyone that you create every contain

00:30:13,290 --> 00:30:18,690
is gonna use this guy as a gateway an IP

00:30:16,590 --> 00:30:20,610
mask will be true so that it's also

00:30:18,690 --> 00:30:23,700
going to go off and start letting you

00:30:20,610 --> 00:30:25,059
net into it I'm sorry it'll let you net

00:30:23,700 --> 00:30:29,080
out so if you want to get to the

00:30:25,059 --> 00:30:31,210
Internet I need coffee and then a few

00:30:29,080 --> 00:30:33,999
other things is the IPM in this case its

00:30:31,210 --> 00:30:36,789
host local and it typically be a

00:30:33,999 --> 00:30:38,470
different config parameterize usually

00:30:36,789 --> 00:30:41,230
something like ansible can roll these

00:30:38,470 --> 00:30:44,499
out and every node would get its own

00:30:41,230 --> 00:30:46,809
sitter so that as you have more and more

00:30:44,499 --> 00:30:49,539
contain more nodes running these

00:30:46,809 --> 00:30:51,610
containers you won't get address

00:30:49,539 --> 00:30:53,769
collisions and if you have more than one

00:30:51,610 --> 00:30:56,620
node and they want to talk to each other

00:30:53,769 --> 00:30:58,119
that's outside of C&I you have to make

00:30:56,620 --> 00:31:00,039
sure these two bridges can talk to each

00:30:58,119 --> 00:31:04,210
other way you know usually they a proper

00:31:00,039 --> 00:31:05,889
back switch or if it's running on one of

00:31:04,210 --> 00:31:07,480
the cloud providers then we'll all be

00:31:05,889 --> 00:31:09,039
provided for you they'll make sure that

00:31:07,480 --> 00:31:12,820
all your nodes can talk to each other

00:31:09,039 --> 00:31:14,320
over VPC or some equivalent and other

00:31:12,820 --> 00:31:17,080
thing you wrote there's the default

00:31:14,320 --> 00:31:19,659
route all these containers using this

00:31:17,080 --> 00:31:23,730
config will get a default route to go

00:31:19,659 --> 00:31:26,320
through this guy through this host and

00:31:23,730 --> 00:31:29,200
DNS server can be supplied or not it's

00:31:26,320 --> 00:31:30,820
up to you that's just a bit very basic

00:31:29,200 --> 00:31:33,190
in this year this is very similar if not

00:31:30,820 --> 00:31:35,950
identical to what's in the github repo

00:31:33,190 --> 00:31:41,740
for the bridge plug-in but we wanted to

00:31:35,950 --> 00:31:48,009
just tie some stuff together so hand so

00:31:41,740 --> 00:31:50,679
now this is a more advanced config what

00:31:48,009 --> 00:31:53,590
I've done with the previous example is

00:31:50,679 --> 00:31:55,869
just using bash and you know piping

00:31:53,590 --> 00:31:57,940
things in and out and you can do a lot

00:31:55,869 --> 00:31:59,559
with CNI especially debugging and

00:31:57,940 --> 00:32:01,869
getting your things configured properly

00:31:59,559 --> 00:32:03,669
but now when you start going to some of

00:32:01,869 --> 00:32:06,429
the advanced configurations and again

00:32:03,669 --> 00:32:08,559
this is very simple CNI is not

00:32:06,429 --> 00:32:10,809
complicated but it's advanced for CNI

00:32:08,559 --> 00:32:13,509
and that's you can start what they call

00:32:10,809 --> 00:32:16,720
chaining plugins and that's where

00:32:13,509 --> 00:32:20,200
there's an implicit chain between the

00:32:16,720 --> 00:32:22,149
bridge plug-in and ipam because you

00:32:20,200 --> 00:32:24,100
usually have to have an address in the

00:32:22,149 --> 00:32:26,049
container but now you can start doing

00:32:24,100 --> 00:32:28,360
things like okay I want to stop port

00:32:26,049 --> 00:32:30,789
mapping so there's a plug-in for that

00:32:28,360 --> 00:32:33,519
that simply says yes I want to enable

00:32:30,789 --> 00:32:34,779
port mapping and then the meta plugins

00:32:33,519 --> 00:32:36,129
and these that you could have many of

00:32:34,779 --> 00:32:38,770
these you don't have to just have these

00:32:36,129 --> 00:32:40,480
three you can have a tune

00:32:38,770 --> 00:32:42,910
plugin that starts playing with the

00:32:40,480 --> 00:32:45,760
sysctl values that linda live in the

00:32:42,910 --> 00:32:47,020
container itself and if you want a

00:32:45,760 --> 00:32:49,120
different containers have different

00:32:47,020 --> 00:32:50,980
values it's up to your orchestration

00:32:49,120 --> 00:32:53,140
tool or your own tooling that will start

00:32:50,980 --> 00:32:56,740
making these values different per node

00:32:53,140 --> 00:32:58,270
or invocation you could change the

00:32:56,740 --> 00:33:01,150
configure in the fly if you need it to

00:32:58,270 --> 00:33:03,550
so that makes sense because some of the

00:33:01,150 --> 00:33:07,000
power of the CNI isn't letting you have

00:33:03,550 --> 00:33:09,820
your own plugins to do just what you

00:33:07,000 --> 00:33:11,860
need to do with as you don't want to

00:33:09,820 --> 00:33:13,630
write your own bridge plug-in you can

00:33:11,860 --> 00:33:15,870
just use it but you might want to start

00:33:13,630 --> 00:33:17,920
doing some stuff like I was playing with

00:33:15,870 --> 00:33:20,440
plugin that would actually have the

00:33:17,920 --> 00:33:22,600
address that was finally given talk to

00:33:20,440 --> 00:33:25,270
can't say quagga many more free range

00:33:22,600 --> 00:33:27,760
routing and have it advertised the route

00:33:25,270 --> 00:33:30,580
so into the network so that people can

00:33:27,760 --> 00:33:33,160
start getting to this we want to ecmp

00:33:30,580 --> 00:33:35,680
into the node or all nodes in the

00:33:33,160 --> 00:33:36,970
cluster and instead of load balancing

00:33:35,680 --> 00:33:39,280
with something that lay a seven on

00:33:36,970 --> 00:33:41,740
adding every damn packet we just started

00:33:39,280 --> 00:33:43,900
advertising this containers anycast

00:33:41,740 --> 00:33:46,570
address as it came and when the

00:33:43,900 --> 00:33:48,430
container goes away it'll go it'll get

00:33:46,570 --> 00:33:51,250
withdrawn from the network all because

00:33:48,430 --> 00:33:54,700
we didn't care for his mac VLAN bridge

00:33:51,250 --> 00:33:56,710
etc we just did the one little pot that

00:33:54,700 --> 00:33:59,590
we cared about that was unique to that

00:33:56,710 --> 00:34:02,650
cluster everything else usually standard

00:33:59,590 --> 00:34:03,700
off-the-shelf tools that come with C&I

00:34:02,650 --> 00:34:09,220
or the orchestration

00:34:03,700 --> 00:34:11,380
software makes sense clevis mud okay so

00:34:09,220 --> 00:34:14,890
now we're gonna talk a little bit about

00:34:11,380 --> 00:34:16,990
the runtimes and one comes with C and I

00:34:14,890 --> 00:34:19,419
called C and I tool and the reason I

00:34:16,990 --> 00:34:21,490
bring it up now is when you start using

00:34:19,419 --> 00:34:24,640
some of these advanced configurations

00:34:21,490 --> 00:34:26,649
you can't just pipe standard to

00:34:24,640 --> 00:34:29,080
configure to stand it in and get the

00:34:26,649 --> 00:34:31,300
results back because the way the plugins

00:34:29,080 --> 00:34:35,770
work is the results of the first plugin

00:34:31,300 --> 00:34:39,940
like the bridge will return to the next

00:34:35,770 --> 00:34:42,909
plug-in like tuning or port mapping and

00:34:39,940 --> 00:34:46,240
so you need to be able to start taking

00:34:42,909 --> 00:34:47,500
the results of the first the the results

00:34:46,240 --> 00:34:50,710
what's returned from the first plug-in

00:34:47,500 --> 00:34:53,290
gets sent into the next plug-in and

00:34:50,710 --> 00:34:56,409
things all have to line up all the way

00:34:53,290 --> 00:34:59,110
so doing that with the initial example I

00:34:56,409 --> 00:35:02,440
used won't work anymore so something

00:34:59,110 --> 00:35:04,360
called CNI tool was used to do all this

00:35:02,440 --> 00:35:06,970
for you and it will take the results of

00:35:04,360 --> 00:35:09,760
the first chain plug-in and feed them to

00:35:06,970 --> 00:35:11,320
the second etc etc until it was done and

00:35:09,760 --> 00:35:14,020
then it will eventually return the

00:35:11,320 --> 00:35:16,540
results to standard output and he Evers

00:35:14,020 --> 00:35:18,280
make it the standard ever and there's

00:35:16,540 --> 00:35:22,090
just an example of using it and that was

00:35:18,280 --> 00:35:26,140
the this port map mcc that was the

00:35:22,090 --> 00:35:28,120
config I showed you previously just to

00:35:26,140 --> 00:35:31,000
tie it together in case you want to look

00:35:28,120 --> 00:35:35,200
at this back home okay so the next one

00:35:31,000 --> 00:35:37,450
time this is kind of pardon me and red

00:35:35,200 --> 00:35:39,280
hats pushing it it's compatible with

00:35:37,450 --> 00:35:42,610
docker is essentially I sim League

00:35:39,280 --> 00:35:44,890
sibling Dhaka - pod man and I don't know

00:35:42,610 --> 00:35:46,390
the difference the difference that's

00:35:44,890 --> 00:35:49,240
that's helpful for me and one of the

00:35:46,390 --> 00:35:52,000
reasons I use it is it knows about CNI

00:35:49,240 --> 00:35:54,730
and it has the ability to fully utilize

00:35:52,000 --> 00:35:58,300
all what everything that CNI brings to

00:35:54,730 --> 00:36:01,120
the table and here's just an example if

00:35:58,300 --> 00:36:03,640
you were to swap pardon me in with jakka

00:36:01,120 --> 00:36:05,290
that communal look the same up to app

00:36:03,640 --> 00:36:06,790
and would talk and networking that you

00:36:05,290 --> 00:36:08,590
might have different parameters and

00:36:06,790 --> 00:36:10,660
stuff but one of the things that pardon

00:36:08,590 --> 00:36:13,540
me and does that makes it more useful

00:36:10,660 --> 00:36:15,130
than CNI tool is you're actually

00:36:13,540 --> 00:36:17,200
starting to deal what we all contain is

00:36:15,130 --> 00:36:20,140
not just playing around and debugging

00:36:17,200 --> 00:36:21,880
and it'll go off and you can start

00:36:20,140 --> 00:36:23,590
listening all the networks you want each

00:36:21,880 --> 00:36:27,550
one of those would be the name of the

00:36:23,590 --> 00:36:29,080
network in the of you're gonna see an AI

00:36:27,550 --> 00:36:31,420
config directory we can have many

00:36:29,080 --> 00:36:34,870
networks defined and this is how you can

00:36:31,420 --> 00:36:38,110
start using them all so this will go off

00:36:34,870 --> 00:36:41,950
and start a apache demon

00:36:38,110 --> 00:36:45,570
so I force a habit Apache container PID

00:36:41,950 --> 00:36:49,030
will be one in its own network namespace

00:36:45,570 --> 00:36:52,630
it'll be its own C group typical

00:36:49,030 --> 00:36:54,400
container in its own by mount so that

00:36:52,630 --> 00:36:57,190
each one of those containers will be on

00:36:54,400 --> 00:36:58,690
these networks they won't be able to 100

00:36:57,190 --> 00:37:00,670
but each other but they can't talk to

00:36:58,690 --> 00:37:03,690
each other they in that work how they

00:37:00,670 --> 00:37:06,340
talk to them is up to how you make the

00:37:03,690 --> 00:37:06,619
bridge of mac VLAN or whatever you want

00:37:06,340 --> 00:37:13,970
you have

00:37:06,619 --> 00:37:16,480
why them up of course okay so it is just

00:37:13,970 --> 00:37:16,480
an example

00:37:19,059 --> 00:37:24,769
you specify multiple networks so its

00:37:21,920 --> 00:37:26,869
stead of using let's plug in multiple CN

00:37:24,769 --> 00:37:28,849
I correct you in one of those could have

00:37:26,869 --> 00:37:30,920
been Malta s-- but you know you don't

00:37:28,849 --> 00:37:32,509
want to get any you know you don't need

00:37:30,920 --> 00:37:34,549
Malthus what you're using something like

00:37:32,509 --> 00:37:38,029
this for example I'm gonna talk about

00:37:34,549 --> 00:37:41,980
mullah ventually and one of the reasons

00:37:38,029 --> 00:37:44,329
we need it so here's an example of

00:37:41,980 --> 00:37:47,539
running the commands and this is

00:37:44,329 --> 00:37:49,670
essentially I went in and well there's

00:37:47,539 --> 00:37:51,680
the community again and then you look at

00:37:49,670 --> 00:37:53,660
we're bet you go into the container web

00:37:51,680 --> 00:37:55,730
bash and you can see that multiple

00:37:53,660 --> 00:37:56,869
networks are created and each one has

00:37:55,730 --> 00:38:00,650
its own sitter

00:37:56,869 --> 00:38:13,279
and so you've got a passion what would

00:38:00,650 --> 00:38:15,739
have been a dual home toast yes I use

00:38:13,279 --> 00:38:18,799
this command is something that you would

00:38:15,739 --> 00:38:21,140
have seen in taco if you Google right so

00:38:18,799 --> 00:38:26,119
if we would have provide this container

00:38:21,140 --> 00:38:28,220
and nothing like this but how do you

00:38:26,119 --> 00:38:31,789
function virtual function whatever would

00:38:28,220 --> 00:38:34,849
we still want mapping to be how this bot

00:38:31,789 --> 00:38:36,950
mapping implemented in the kernel yes so

00:38:34,849 --> 00:38:37,640
if we would have provided them how to

00:38:36,950 --> 00:38:43,400
function

00:38:37,640 --> 00:38:45,170
we still what command who uses up to you

00:38:43,400 --> 00:38:47,359
from your experience people would still

00:38:45,170 --> 00:38:48,349
want this container to use port mapping

00:38:47,359 --> 00:38:50,779
sure right

00:38:48,349 --> 00:38:52,940
even if yes because yeah a lot of people

00:38:50,779 --> 00:38:54,950
are now so now we have to offload this

00:38:52,940 --> 00:38:58,430
port mapping to the hardware right yeah

00:38:54,950 --> 00:39:00,380
I wouldn't do it if I could we have to

00:38:58,430 --> 00:39:02,690
integrate so for instance today

00:39:00,380 --> 00:39:04,640
we have today we have a TC workshop and

00:39:02,690 --> 00:39:07,150
we have some control pain in Linux based

00:39:04,640 --> 00:39:09,440
on TC flower to upload sort of

00:39:07,150 --> 00:39:12,499
classifier action stuff to the to

00:39:09,440 --> 00:39:14,809
Hodder's and this doesn't exist for IP

00:39:12,499 --> 00:39:16,819
tables so I wonder how this use case

00:39:14,809 --> 00:39:18,980
would have worked this is just a very

00:39:16,819 --> 00:39:21,519
simple example of how to use I'm just

00:39:18,980 --> 00:39:23,630
trying to take it out loud

00:39:21,519 --> 00:39:25,609
because your question one of the things

00:39:23,630 --> 00:39:27,589
I did and how I got exposed to all this

00:39:25,609 --> 00:39:30,680
CNI in the first place was I wrote

00:39:27,589 --> 00:39:33,619
custom plugins for my site that would

00:39:30,680 --> 00:39:35,930
use Hardware offload of various types

00:39:33,619 --> 00:39:38,029
that I'm not allowed to talk about but

00:39:35,930 --> 00:39:40,460
it would that the beauty is like unlike

00:39:38,029 --> 00:39:42,769
talk aware jockey you have to fit into

00:39:40,460 --> 00:39:43,970
the ecosystem Mike I can't do it justice

00:39:42,769 --> 00:39:46,099
a lot the docker guys speak for

00:39:43,970 --> 00:39:48,200
themselves but one of the we initially

00:39:46,099 --> 00:39:51,019
started with darker cuz most of the one

00:39:48,200 --> 00:39:53,710
times used it but when I wanted to go

00:39:51,019 --> 00:39:55,999
into the container and do extra stuff I

00:39:53,710 --> 00:39:58,339
couldn't and that's how I eventually

00:39:55,999 --> 00:40:00,710
found out about sea and I and these

00:39:58,339 --> 00:40:03,440
chain plugins let me go into the

00:40:00,710 --> 00:40:05,809
container as all the stuffs being

00:40:03,440 --> 00:40:07,819
plumbed together and then do whatever I

00:40:05,809 --> 00:40:10,400
wanted to do and one of the things I

00:40:07,819 --> 00:40:12,529
could have done is eat tool to wit Mac

00:40:10,400 --> 00:40:14,359
VLAN on the right neck from the right

00:40:12,529 --> 00:40:16,940
vendor and it would offload a whole

00:40:14,359 --> 00:40:19,849
bunch of stuff into hardware that was

00:40:16,940 --> 00:40:22,640
just one example then that's very good

00:40:19,849 --> 00:40:24,049
because it's broken but I from V

00:40:22,640 --> 00:40:26,029
switching but I'm not gonna go into that

00:40:24,049 --> 00:40:36,769
but we will get an older yeah we're

00:40:26,029 --> 00:40:39,079
using Mac VLAN so again this is just an

00:40:36,769 --> 00:40:42,019
example of how you can get c c and i to

00:40:39,079 --> 00:40:44,210
be used and clumb multiple networks you

00:40:42,019 --> 00:40:46,519
can just keep adding those so here's a

00:40:44,210 --> 00:40:47,210
case where Apaches running on two

00:40:46,519 --> 00:40:50,119
different NICs

00:40:47,210 --> 00:40:52,220
and you know if apache is supposed to be

00:40:50,119 --> 00:40:54,739
only tied to those Nick's then Utes up

00:40:52,220 --> 00:40:56,920
to you to make sure your binds to just

00:40:54,739 --> 00:40:59,420
those are not wild card for example

00:40:56,920 --> 00:41:01,940
again that's up to your container I just

00:40:59,420 --> 00:41:04,190
want to explain the networking so you

00:41:01,940 --> 00:41:07,789
can see the tunics let's see okay so now

00:41:04,190 --> 00:41:10,759
kubernetes kubernetes will use c and i

00:41:07,789 --> 00:41:13,519
thankfully and in fact kubernetes will

00:41:10,759 --> 00:41:15,619
what jakka will use c and i we have

00:41:13,519 --> 00:41:20,809
asked talk of itself dozen so kubernetes

00:41:15,619 --> 00:41:24,019
will go off and uh creation that the

00:41:20,809 --> 00:41:25,579
container wit net equals none and before

00:41:24,019 --> 00:41:27,619
it lists the container do anything else

00:41:25,579 --> 00:41:29,779
it goes into the namespace cuz it has

00:41:27,619 --> 00:41:31,700
everything it needs to and it will start

00:41:29,779 --> 00:41:33,190
invoking the cni plugins that i've

00:41:31,700 --> 00:41:36,160
already bored you with earlier

00:41:33,190 --> 00:41:39,480
and that's how it's able to get siena

00:41:36,160 --> 00:41:42,069
you see and I with docker containers

00:41:39,480 --> 00:41:43,630
similarly you know and pardon me in that

00:41:42,069 --> 00:41:45,490
I showed you a minute ago does the exact

00:41:43,630 --> 00:41:48,210
same thing at the end of the day you're

00:41:45,490 --> 00:41:51,549
wanting an executable you're piping in

00:41:48,210 --> 00:41:53,140
Jason config on stand it in and you're

00:41:51,549 --> 00:41:54,940
gonna get your results and stand it out

00:41:53,140 --> 00:41:58,510
anything that does that is a quote

00:41:54,940 --> 00:42:02,319
unquote contain a runtime from the cni

00:41:58,510 --> 00:42:05,470
point of view okay so but kubernetes

00:42:02,319 --> 00:42:12,339
does just enough to get one neck in a

00:42:05,470 --> 00:42:14,500
pod everyone know what a part is let's

00:42:12,339 --> 00:42:18,730
see so what happens is kubernetes tends

00:42:14,500 --> 00:42:21,220
to only have one Nick one can see and I

00:42:18,730 --> 00:42:22,809
config defined simply because it's only

00:42:21,220 --> 00:42:24,670
gonna ever give you one neck you don't

00:42:22,809 --> 00:42:28,420
have the flexibility specifying a bunch

00:42:24,670 --> 00:42:30,430
of networks and if if you have more than

00:42:28,420 --> 00:42:32,710
one and that's CC and I net D or

00:42:30,430 --> 00:42:35,650
whatever you specify the config files to

00:42:32,710 --> 00:42:39,130
be it will just find the first one

00:42:35,650 --> 00:42:41,619
alphabetically and that will be what you

00:42:39,130 --> 00:42:44,260
get for your eat 0 inside your pod

00:42:41,619 --> 00:42:47,890
that's it okay

00:42:44,260 --> 00:42:49,029
and so I again see and I will do the add

00:42:47,890 --> 00:42:52,390
as the way I've already mentioned

00:42:49,029 --> 00:42:56,980
there's nothing special about it so and

00:42:52,390 --> 00:42:59,799
this brings us to Malta's this is ver

00:42:56,980 --> 00:43:03,160
Bodom from this Malta's website and one

00:42:59,799 --> 00:43:05,170
of the things it exists for is in part

00:43:03,160 --> 00:43:08,890
when I showed you the apartment example

00:43:05,170 --> 00:43:10,660
we can specify multiple networks see and

00:43:08,890 --> 00:43:12,700
I won't let you do that it wants eat

00:43:10,660 --> 00:43:15,579
zero and that's all it knows about but a

00:43:12,700 --> 00:43:17,410
more advanced applications want for

00:43:15,579 --> 00:43:20,339
whatever reason the unique to that

00:43:17,410 --> 00:43:24,609
application it wants more than one Nick

00:43:20,339 --> 00:43:26,770
say streaming or just multi tête

00:43:24,609 --> 00:43:28,839
whatever they happen to whatever the

00:43:26,770 --> 00:43:32,950
business need is they want the ability

00:43:28,839 --> 00:43:36,039
have eat 0 eat 1 etc and multiple ow

00:43:32,950 --> 00:43:38,529
that and this is just illustration of

00:43:36,039 --> 00:43:41,440
what the problem is kubernetes will

00:43:38,529 --> 00:43:44,079
simply punch create it you get eat 0 and

00:43:41,440 --> 00:43:46,029
that is it the ezo might be on flannel

00:43:44,079 --> 00:43:47,050
it could be anything else to talk to

00:43:46,029 --> 00:43:49,450
other pods

00:43:47,050 --> 00:43:51,730
in the cluster but it doesn't know about

00:43:49,450 --> 00:43:57,430
anything else except how to get to those

00:43:51,730 --> 00:44:02,080
pods overeat zero so Moulton comes

00:43:57,430 --> 00:44:04,360
around and you can use party notation to

00:44:02,080 --> 00:44:07,540
start it till you're gonna always get

00:44:04,360 --> 00:44:11,170
eat zero from the classic kubernetes way

00:44:07,540 --> 00:44:13,180
and if you wanted another device you get

00:44:11,170 --> 00:44:15,400
net zero you can have more than one of

00:44:13,180 --> 00:44:18,930
these if you want and what Malta's does

00:44:15,400 --> 00:44:22,810
is Malta's will look to kubernetes as

00:44:18,930 --> 00:44:26,170
the C&I plug in and then Moulton and

00:44:22,810 --> 00:44:29,290
acts like the example I used before pod

00:44:26,170 --> 00:44:32,590
man oh and it'll call CNI multiple times

00:44:29,290 --> 00:44:34,530
to give you net one nets ale in that one

00:44:32,590 --> 00:44:37,180
whatever you happen to define to Malthus

00:44:34,530 --> 00:44:40,270
makes sense so it's a kubernetes it

00:44:37,180 --> 00:44:42,670
looks like v1c and i plug in and to see

00:44:40,270 --> 00:44:44,770
and i it'll call the plugins multiple

00:44:42,670 --> 00:44:47,200
times and the plugin config is gonna

00:44:44,770 --> 00:44:49,480
look at a lot like what i already

00:44:47,200 --> 00:44:51,520
described earlier you can have chain

00:44:49,480 --> 00:44:53,830
plugins you can have um I believe you

00:44:51,520 --> 00:44:58,090
still can you you can have more than one

00:44:53,830 --> 00:45:01,000
interface you can do IP tables at least

00:44:58,090 --> 00:45:04,150
you I know would pardon me in and I see

00:45:01,000 --> 00:45:07,000
a nitro you can Moulton sorry kubernetes

00:45:04,150 --> 00:45:13,920
may need imitations to support some of

00:45:07,000 --> 00:45:13,920
what's already in CNI okay makes sense

00:45:14,730 --> 00:45:19,750
and this is just illustrating what I

00:45:17,380 --> 00:45:23,380
mentioned before so where before you

00:45:19,750 --> 00:45:25,870
would just get eat zero and flannel will

00:45:23,380 --> 00:45:28,690
be the example of the sea and I main

00:45:25,870 --> 00:45:30,100
plug-in you now have Mac VLAN in this

00:45:28,690 --> 00:45:33,490
example what creates the net zero

00:45:30,100 --> 00:45:35,680
interface inside the same pod the I Pam

00:45:33,490 --> 00:45:37,990
for Mac VLAN is completely different

00:45:35,680 --> 00:45:39,490
from the one for flannel and those two

00:45:37,990 --> 00:45:41,380
networks know nothing about each other

00:45:39,490 --> 00:45:42,580
unless somebody you know creates a

00:45:41,380 --> 00:45:50,370
routing loop or something like that

00:45:42,580 --> 00:45:50,370
inside the topology go

00:45:51,369 --> 00:45:56,450
regarding maltose oh but if I remember

00:45:54,020 --> 00:46:00,109
correctly only the first interface is

00:45:56,450 --> 00:46:02,150
the one that's kubernetes kubernetes

00:46:00,109 --> 00:46:04,970
won't doesn't it's a power sucking alien

00:46:02,150 --> 00:46:06,650
it there's nothing else the kubernetes

00:46:04,970 --> 00:46:08,630
knows nothing else and there it does

00:46:06,650 --> 00:46:11,270
cause some problems or at least has the

00:46:08,630 --> 00:46:12,319
potential to life like somebody trunks

00:46:11,270 --> 00:46:14,539
those if there were two different

00:46:12,319 --> 00:46:15,980
bridges and someone shrunk them they're

00:46:14,539 --> 00:46:18,589
gonna start seeing each other's traffic

00:46:15,980 --> 00:46:20,510
but that's not unique to containers it's

00:46:18,589 --> 00:46:23,030
just a classic cross I'm talking about

00:46:20,510 --> 00:46:26,180
the services so if you enable services

00:46:23,030 --> 00:46:29,660
it's done I think only only oh yes I

00:46:26,180 --> 00:46:32,299
think what's know I'm not a big fan of

00:46:29,660 --> 00:46:36,109
what they're we wouldn't need Malta's if

00:46:32,299 --> 00:46:38,240
kubernetes supported all of the C&I and

00:46:36,109 --> 00:46:40,819
we wouldn't need NAT and port forwarding

00:46:38,240 --> 00:46:44,089
if everyone would just use the you know

00:46:40,819 --> 00:46:47,599
one container per net when I be per

00:46:44,089 --> 00:46:52,490
network so the solution dimension will

00:46:47,599 --> 00:46:55,730
be to use the pod yep well that's not a

00:46:52,490 --> 00:46:57,230
solution yet it's a it's not V its it

00:46:55,730 --> 00:46:59,960
depends on what you're doing and there's

00:46:57,230 --> 00:47:02,539
no snow saying that humanity's can't use

00:46:59,960 --> 00:47:04,849
port man they used the same cryos the

00:47:02,539 --> 00:47:06,980
one time they use and it does the exact

00:47:04,849 --> 00:47:10,279
same thing but kubernetes will never

00:47:06,980 --> 00:47:11,500
until they get around to calling CNI

00:47:10,279 --> 00:47:14,119
more than once

00:47:11,500 --> 00:47:15,380
one could would network or however they

00:47:14,119 --> 00:47:21,049
want to configure it you're only gonna

00:47:15,380 --> 00:47:23,720
get eight zero in a given pod so other

00:47:21,049 --> 00:47:25,369
things have to come up to let you do and

00:47:23,720 --> 00:47:26,299
that's why you need services and there's

00:47:25,369 --> 00:47:28,369
a whole bunch of other stuff too

00:47:26,299 --> 00:47:30,260
kubernetes keeps adding in and they've

00:47:28,369 --> 00:47:32,150
got their ways to get not cell traffic

00:47:30,260 --> 00:47:34,700
and whereas when I've used other

00:47:32,150 --> 00:47:37,430
runtimes that supported C&I I just

00:47:34,700 --> 00:47:39,529
simply had one network for not cell

00:47:37,430 --> 00:47:42,470
traffic and another one for east-west

00:47:39,529 --> 00:47:44,000
done and if I wanted a DMZ there was

00:47:42,470 --> 00:47:45,799
another one and it was I owed my

00:47:44,000 --> 00:47:48,170
networking staff knew how to deal with

00:47:45,799 --> 00:47:49,250
all that there was no magic that nothing

00:47:48,170 --> 00:47:51,410
was hidden from them

00:47:49,250 --> 00:47:54,020
ian's we could take full advantage of

00:47:51,410 --> 00:47:56,480
everything Linux has to offer as opposed

00:47:54,020 --> 00:47:58,190
to waiting for the one time to catch up

00:47:56,480 --> 00:47:59,960
and give us some of the stuff that we

00:47:58,190 --> 00:48:03,789
know we needed because we already were

00:47:59,960 --> 00:48:03,789
running things before containers

00:48:06,900 --> 00:48:16,150
okay so let's just get through the some

00:48:13,329 --> 00:48:19,630
more kubernetes and respect see and I

00:48:16,150 --> 00:48:22,960
and then networking so I kind of alluded

00:48:19,630 --> 00:48:24,420
to this already Epona have eat zero it's

00:48:22,960 --> 00:48:27,700
gonna be able to talk to another pod

00:48:24,420 --> 00:48:30,369
typical kubernetes networking that part

00:48:27,700 --> 00:48:33,999
however has its own psychic containers

00:48:30,369 --> 00:48:36,400
that will implement net10 net1 etc and

00:48:33,999 --> 00:48:39,910
how you make use of this if you even

00:48:36,400 --> 00:48:41,859
need to is up to your application i've

00:48:39,910 --> 00:48:44,619
seen streaming i've seen some people

00:48:41,859 --> 00:48:47,049
wanted security that those could be

00:48:44,619 --> 00:48:49,509
IPSec well however you whatever you need

00:48:47,049 --> 00:48:53,829
to do that drives you to have more than

00:48:49,509 --> 00:48:55,930
one network in a good pod my classic

00:48:53,829 --> 00:48:57,789
example being a networking guy i want no

00:48:55,930 --> 00:49:01,269
it's not cell traffic coming in natively

00:48:57,789 --> 00:49:03,999
i don't need any extra applications that

00:49:01,269 --> 00:49:06,339
i have to define and don't have full

00:49:03,999 --> 00:49:08,859
control over because I've got external

00:49:06,339 --> 00:49:10,359
dependencies to get traffic in now if

00:49:08,859 --> 00:49:12,220
you're on a cloud a lot of those given

00:49:10,359 --> 00:49:13,749
to you if you aren't being metal you've

00:49:12,220 --> 00:49:15,609
got to solve a lot of problems that the

00:49:13,749 --> 00:49:17,859
cloud would give you and that's where

00:49:15,609 --> 00:49:20,890
having multiple interfaces which see and

00:49:17,859 --> 00:49:22,779
I can simplify your life and you can

00:49:20,890 --> 00:49:24,309
standardize on your existing security

00:49:22,779 --> 00:49:27,609
practices that you would have normally

00:49:24,309 --> 00:49:30,239
done for VMs or whatever else whereas

00:49:27,609 --> 00:49:38,049
you have to shoehorn them in on the side

00:49:30,239 --> 00:49:41,140
this way okay and this is just some of

00:49:38,049 --> 00:49:42,190
the ways the describing some of what you

00:49:41,140 --> 00:49:46,239
can do in the pod

00:49:42,190 --> 00:49:48,819
annotation to actually get Moulton Stan

00:49:46,239 --> 00:49:51,759
she aided the app talks to Cuban Eddie's

00:49:48,819 --> 00:49:54,160
API there's a resource definition for

00:49:51,759 --> 00:49:58,420
the pod and it's gonna go off and say I

00:49:54,160 --> 00:50:00,190
want Network yellow red green and you're

00:49:58,420 --> 00:50:02,499
gonna end up getting them and this is

00:50:00,190 --> 00:50:07,480
what some of the Jason looks like the ml

00:50:02,499 --> 00:50:12,220
sorry so you tell kubernetes I want

00:50:07,480 --> 00:50:15,749
control data and the arguments eat 0

00:50:12,220 --> 00:50:15,749
mode Ridge etc

00:50:17,880 --> 00:50:23,560
so this is describes the meditative

00:50:20,710 --> 00:50:25,480
involved to actually use the exact VLAN

00:50:23,560 --> 00:50:28,270
interface and you you're gonna start

00:50:25,480 --> 00:50:30,790
noticing that this looks a lot like what

00:50:28,270 --> 00:50:33,370
you've already seen from the prior prior

00:50:30,790 --> 00:50:36,040
bridge config that for just C and I cuz

00:50:33,370 --> 00:50:38,230
that's all it is C and I it's gonna be

00:50:36,040 --> 00:50:41,740
packed and Jason inside the network

00:50:38,230 --> 00:50:43,840
attack attachment definition this is

00:50:41,740 --> 00:50:48,610
just tying together what kubernetes does

00:50:43,840 --> 00:50:51,820
with what I was just mentioning okay and

00:50:48,610 --> 00:50:53,890
again you stock there's the first the

00:50:51,820 --> 00:50:56,500
annotation so that Y network its Mac V

00:50:53,890 --> 00:51:00,070
link off and kubernetes will go off and

00:50:56,500 --> 00:51:06,670
make this stuff happen syntax is pretty

00:51:00,070 --> 00:51:09,550
straightforward and as expected a

00:51:06,670 --> 00:51:11,170
containers a container and you're going

00:51:09,550 --> 00:51:13,210
to be able to get your interface

00:51:11,170 --> 00:51:15,400
configured the first ones what you would

00:51:13,210 --> 00:51:18,250
have got with kubernetes without

00:51:15,400 --> 00:51:21,490
anything special and then they multi

00:51:18,250 --> 00:51:23,020
uses net X net zero net one etc for the

00:51:21,490 --> 00:51:27,270
interfaces that configures you don't

00:51:23,020 --> 00:51:32,200
seem to get a way of specifying your own

00:51:27,270 --> 00:51:34,810
so I want to finish up with some of the

00:51:32,200 --> 00:51:36,970
problems we've seen with C and I read

00:51:34,810 --> 00:51:39,100
this is regardless of what's using it

00:51:36,970 --> 00:51:41,830
kubernetes Malta's I'm sorry kubernetes

00:51:39,100 --> 00:51:45,850
pardon me and may sews any of the other

00:51:41,830 --> 00:51:48,130
one x and one of the problems we hit

00:51:45,850 --> 00:51:50,680
which coming from the network

00:51:48,130 --> 00:51:53,200
infrastructure towards the server was

00:51:50,680 --> 00:51:55,090
the networking guys new networking and

00:51:53,200 --> 00:51:59,020
one of the first things that we found

00:51:55,090 --> 00:52:03,400
was the network namespaces in Linux

00:51:59,020 --> 00:52:05,560
not live for it but namespaces they the

00:52:03,400 --> 00:52:07,120
Linux bridge has a way for all the

00:52:05,560 --> 00:52:11,440
containers to connect to the bridge

00:52:07,120 --> 00:52:15,700
ve accept the hosts does not use this it

00:52:11,440 --> 00:52:18,520
just sits on top of like CBR 0 bi 0

00:52:15,700 --> 00:52:20,920
whatever you want talkers arrow and so

00:52:18,520 --> 00:52:22,750
it was people were looking when come

00:52:20,920 --> 00:52:24,580
debugging they were trying to find out

00:52:22,750 --> 00:52:26,140
well where's the port if you look at it

00:52:24,580 --> 00:52:27,570
alive it in the VM world they actually

00:52:26,140 --> 00:52:29,070
have a Vita

00:52:27,570 --> 00:52:32,160
that will go from the host into the

00:52:29,070 --> 00:52:34,950
bridge where it wasn't done this way for

00:52:32,160 --> 00:52:36,660
whatever reason predates me and it's

00:52:34,950 --> 00:52:40,320
stuff like this though does cause

00:52:36,660 --> 00:52:42,720
problems for example the MAC address of

00:52:40,320 --> 00:52:45,480
the host would end up being the lowest

00:52:42,720 --> 00:52:47,970
MAC address of all the containers in the

00:52:45,480 --> 00:52:50,730
bridge remember before how I mentioned

00:52:47,970 --> 00:52:53,400
containers can come and go what happens

00:52:50,730 --> 00:52:56,340
the MAC address of the host starts

00:52:53,400 --> 00:52:59,160
changing that's always fun on a Friday

00:52:56,340 --> 00:53:00,780
afternoon and what happens you stop

00:52:59,160 --> 00:53:03,720
anything that connects to the host which

00:53:00,780 --> 00:53:05,580
can be things like storage or any of the

00:53:03,720 --> 00:53:08,280
existing applications that haven't moved

00:53:05,580 --> 00:53:10,370
over to micro services all of a sudden

00:53:08,280 --> 00:53:12,600
TCP timeouts would would occur because

00:53:10,370 --> 00:53:14,400
you can't reach it anymore the MAC

00:53:12,600 --> 00:53:16,620
address changed because one containers

00:53:14,400 --> 00:53:19,250
started not even went away just started

00:53:16,620 --> 00:53:22,230
and then it with a lower MAC address so

00:53:19,250 --> 00:53:24,060
the when you start doing a lot of this

00:53:22,230 --> 00:53:26,880
it ties back to some of the differences

00:53:24,060 --> 00:53:29,520
between VMs and containers you have to

00:53:26,880 --> 00:53:31,110
understand what's going on with micro

00:53:29,520 --> 00:53:33,060
services to make sure that you're

00:53:31,110 --> 00:53:38,340
addressing everything especially when it

00:53:33,060 --> 00:53:41,220
comes to debugging and let's see nat of

00:53:38,340 --> 00:53:43,050
course is a problem i think or touched

00:53:41,220 --> 00:53:45,420
on it earlier you don't if you can help

00:53:43,050 --> 00:53:48,210
it don't use net you don't have a choice

00:53:45,420 --> 00:53:49,650
with certain runtimes most people want

00:53:48,210 --> 00:53:52,590
to or they don't know that they don't

00:53:49,650 --> 00:53:54,630
need that double negative in the in the

00:53:52,590 --> 00:53:56,280
early days which you go to a cloud

00:53:54,630 --> 00:53:58,340
provider what containers and you'd run

00:53:56,280 --> 00:54:01,290
everything on localhost you'd port MAP

00:53:58,340 --> 00:54:03,300
port you know 8080 would go to port 80

00:54:01,290 --> 00:54:05,070
on one container 8080 one goes to one

00:54:03,300 --> 00:54:06,570
other and that was the only way to do it

00:54:05,070 --> 00:54:08,280
and you get your lamp stack up pretty

00:54:06,570 --> 00:54:09,960
quickly you would have them all

00:54:08,280 --> 00:54:12,150
contained all the different aspects of

00:54:09,960 --> 00:54:15,150
that lamp stack would be containerized

00:54:12,150 --> 00:54:17,100
and it was great and your application so

00:54:15,150 --> 00:54:19,470
successful you need is another VM or

00:54:17,100 --> 00:54:21,810
bare metal node you did the same thing

00:54:19,470 --> 00:54:24,690
again but they don't talk to each other

00:54:21,810 --> 00:54:26,190
so then over the container will starts

00:54:24,690 --> 00:54:27,690
figuring out how to make these things

00:54:26,190 --> 00:54:31,170
talk to each other with something like

00:54:27,690 --> 00:54:33,150
flannel of VX land and no one ever went

00:54:31,170 --> 00:54:37,290
back and changed the application to not

00:54:33,150 --> 00:54:38,850
use port forwarding when you can simply

00:54:37,290 --> 00:54:41,120
have every container talk to each other

00:54:38,850 --> 00:54:43,820
via the interface

00:54:41,120 --> 00:54:48,560
and a lot of these tools today still do

00:54:43,820 --> 00:54:51,290
not support ipv6 at all well and the

00:54:48,560 --> 00:54:52,880
problem with that is well if you

00:54:51,290 --> 00:54:54,620
continue I don't know what's going to

00:54:52,880 --> 00:54:57,170
happen in the future will the v6

00:54:54,620 --> 00:55:00,350
implementation of say kubernetes will

00:54:57,170 --> 00:55:04,130
they continue to net every packet for to

00:55:00,350 --> 00:55:06,140
support services don't know but if

00:55:04,130 --> 00:55:08,480
people in this room don't start helping

00:55:06,140 --> 00:55:10,880
oh and driving the networking for what's

00:55:08,480 --> 00:55:17,300
going on with containers we may have it

00:55:10,880 --> 00:55:19,760
given to us for example let's see you

00:55:17,300 --> 00:55:22,550
mention here not as a not inside the

00:55:19,760 --> 00:55:23,090
container from the host to get in the

00:55:22,550 --> 00:55:27,620
container

00:55:23,090 --> 00:55:30,590
nobody was sick for for example using

00:55:27,620 --> 00:55:31,940
not also to do the services for if you

00:55:30,590 --> 00:55:34,970
want to do the load balancing for

00:55:31,940 --> 00:55:36,530
example between the pods right yes talk

00:55:34,970 --> 00:55:38,930
about these not are you talking about

00:55:36,530 --> 00:55:42,620
and not that is specifically for this

00:55:38,930 --> 00:55:45,530
container it for both it depends like if

00:55:42,620 --> 00:55:48,920
you go to one if you want to get in to

00:55:45,530 --> 00:55:50,870
your container from another container

00:55:48,920 --> 00:55:53,150
one of the ways to do it would be one

00:55:50,870 --> 00:55:54,860
you wonder the response to H a proxy and

00:55:53,150 --> 00:55:58,310
it's listening to all these ports on

00:55:54,860 --> 00:56:01,190
your localhost and it will NAT into port

00:55:58,310 --> 00:56:03,320
forward into the actual container that's

00:56:01,190 --> 00:56:05,630
running whereas that container already

00:56:03,320 --> 00:56:07,940
has an IP address you could have used it

00:56:05,630 --> 00:56:10,820
but a lot of times it's not being done

00:56:07,940 --> 00:56:12,500
because that was there first okay so you

00:56:10,820 --> 00:56:15,530
you're talking about they're not that is

00:56:12,500 --> 00:56:17,510
done as part of the services between for

00:56:15,530 --> 00:56:19,670
example that's you have two pods on

00:56:17,510 --> 00:56:22,220
different let's one two talking from a

00:56:19,670 --> 00:56:23,690
different services right yep all of it

00:56:22,220 --> 00:56:27,110
yeah so it's not something that is run

00:56:23,690 --> 00:56:29,480
inside the container back and you could

00:56:27,110 --> 00:56:31,250
if you wanted to I don't suggest it you

00:56:29,480 --> 00:56:32,750
could one once you have your own

00:56:31,250 --> 00:56:34,640
namespace you can do whatever you want

00:56:32,750 --> 00:56:37,100
you just still mine IP tables there you

00:56:34,640 --> 00:56:39,680
can run all the usual I don't I've never

00:56:37,100 --> 00:56:41,000
seen it but it's you can do a lot of

00:56:39,680 --> 00:56:44,060
things that you might probably don't

00:56:41,000 --> 00:56:48,340
want to I shouldn't but this is all on

00:56:44,060 --> 00:56:50,480
the host to get into the container

00:56:48,340 --> 00:56:53,839
anyone else I don't want to keep

00:56:50,480 --> 00:56:56,420
everyone from lunch okay so the

00:56:53,839 --> 00:57:01,609
one of the things that the containers in

00:56:56,420 --> 00:57:03,469
this networking do besides net is you

00:57:01,609 --> 00:57:05,989
have debugging this is not me there's no

00:57:03,469 --> 00:57:08,449
tools it's still early in a lot of ways

00:57:05,989 --> 00:57:09,709
and you know people know how to debug

00:57:08,449 --> 00:57:13,009
vm's

00:57:09,709 --> 00:57:18,859
bi-metal but what containers there's a

00:57:13,009 --> 00:57:23,509
lot of debugging is not as advanced make

00:57:18,859 --> 00:57:25,369
sense there's a this stuff that's also

00:57:23,509 --> 00:57:27,109
lacking we the runtimes have to do

00:57:25,369 --> 00:57:28,369
things so what might work one runtime

00:57:27,109 --> 00:57:31,249
won't work one another

00:57:28,369 --> 00:57:34,130
a lot of them aren't really doing as far

00:57:31,249 --> 00:57:36,019
as I can tell standard ever tends to get

00:57:34,130 --> 00:57:39,289
lost when there are problems

00:57:36,019 --> 00:57:41,900
there's no way to foresee and I anyway

00:57:39,289 --> 00:57:43,880
with our plugins to be able to go off

00:57:41,900 --> 00:57:46,160
and start turning on debug levels just

00:57:43,880 --> 00:57:49,759
so that you can go from info debug

00:57:46,160 --> 00:57:53,049
whatever to help debug errors I've at

00:57:49,759 --> 00:57:58,549
least know that things are going wrong

00:57:53,049 --> 00:58:01,150
and with that it's lunch time any

00:57:58,549 --> 00:58:01,150
questions

00:58:02,769 --> 00:58:10,579
Mike and I'm around all pretty much

00:58:07,519 --> 00:58:13,099
through the weekend so you mentioned

00:58:10,579 --> 00:58:15,589
problems with ipv6 what about non IP

00:58:13,099 --> 00:58:17,390
based interfaces is that handled by

00:58:15,589 --> 00:58:20,059
Malta's at all or does that requires in

00:58:17,390 --> 00:58:24,309
the Civic scene I plugins you can create

00:58:20,059 --> 00:58:26,539
a C&I plugin that will not do anything

00:58:24,309 --> 00:58:28,549
there's none that I know but it'll give

00:58:26,539 --> 00:58:30,859
you a net dev device you don't have an

00:58:28,549 --> 00:58:33,229
eye Pam so you will not get an address

00:58:30,859 --> 00:58:36,640
and now you've got to lay a - device

00:58:33,229 --> 00:58:36,640
that you can want anything you want on

00:58:38,349 --> 00:58:43,459
for example if you have like an 802 15 4

00:58:41,420 --> 00:58:46,089
device or something like that you could

00:58:43,459 --> 00:58:49,339
want to make available to one container

00:58:46,089 --> 00:58:51,079
yep you can any device it was one of the

00:58:49,339 --> 00:58:54,170
plugins you have is you can stick a real

00:58:51,079 --> 00:58:56,119
device you can take one of the main

00:58:54,170 --> 00:58:59,749
plugins is you can take a real device

00:58:56,119 --> 00:59:01,910
you buy a NIC any type of device if it

00:58:59,749 --> 00:59:03,439
shows up in net dev you can move it

00:59:01,910 --> 00:59:04,880
right into the container so it doesn't

00:59:03,439 --> 00:59:07,430
have to be eaten a it could be IOT

00:59:04,880 --> 00:59:10,309
related or whatever you want

00:59:07,430 --> 00:59:11,930
so is that handled by by maltose today

00:59:10,309 --> 00:59:14,180
or does that pick Malta's writing a

00:59:11,930 --> 00:59:19,970
specific plugin today you need a plug-in

00:59:14,180 --> 00:59:21,650
for your device but let's see if it's if

00:59:19,970 --> 00:59:23,770
it's already seen by net dev you might

00:59:21,650 --> 00:59:25,549
be able to use the host device plugin

00:59:23,770 --> 00:59:28,700
I'd have to try it

00:59:25,549 --> 00:59:33,079
Malta's is orthogonal because if it's in

00:59:28,700 --> 00:59:35,690
net dev Baltus knows how to call CNI you

00:59:33,079 --> 00:59:38,569
just configure Malta's to use that scene

00:59:35,690 --> 00:59:41,089
and I plug-in part of the goal of these

00:59:38,569 --> 00:59:43,670
plugins and especially the chain plugins

00:59:41,089 --> 00:59:45,920
the meta ones you don't want it reinvent

00:59:43,670 --> 00:59:47,480
something that's already there when I

00:59:45,920 --> 00:59:49,220
was first working with this chain

00:59:47,480 --> 00:59:50,480
plugins didn't exist yet and I didn't

00:59:49,220 --> 00:59:54,170
wanted to start doing some things with

00:59:50,480 --> 00:59:56,599
bgp gns I had a cut and paste the bridge

00:59:54,170 --> 00:59:59,390
plug-in on the Mac VLAN plugin and then

00:59:56,599 --> 01:00:02,510
just add things to it whereas now with

00:59:59,390 --> 01:00:03,980
CNI version 3 plus they support chaining

01:00:02,510 --> 01:00:06,230
you just add the one little piece that

01:00:03,980 --> 01:00:07,910
you want so you'll get invoked after

01:00:06,230 --> 01:00:10,099
everything's already set up properly

01:00:07,910 --> 01:00:12,410
instead of returning back to the caller

01:00:10,099 --> 01:00:14,390
they'll call you and it gives you a

01:00:12,410 --> 01:00:17,539
chance to do something whatever that

01:00:14,390 --> 01:00:18,890
happens to be and then you're done so

01:00:17,539 --> 01:00:20,390
you can write a real small amount of

01:00:18,890 --> 01:00:23,890
code to do whatever you need for your

01:00:20,390 --> 01:00:26,839
business for your application and just

01:00:23,890 --> 01:00:28,700
return the C&I and it's all plugged for

01:00:26,839 --> 01:00:31,520
you because it will call you inside the

01:00:28,700 --> 01:00:33,319
network namespace and let you do any

01:00:31,520 --> 01:00:35,869
tuning anything else you want might want

01:00:33,319 --> 01:00:38,750
to do that isn't available with existing

01:00:35,869 --> 01:00:40,849
plugins and are you aware of any

01:00:38,750 --> 01:00:42,829
specific requirements that we need to

01:00:40,849 --> 01:00:45,529
fulfill on the kernel side for new

01:00:42,829 --> 01:00:46,250
subsistence to make that work not that I

01:00:45,529 --> 01:00:48,559
know of

01:00:46,250 --> 01:00:51,799
I mean unique if you if you would run

01:00:48,559 --> 01:00:54,619
outside of containers if it already

01:00:51,799 --> 01:00:56,150
works it should be in you should just

01:00:54,619 --> 01:00:59,200
you you should just be able to call it

01:00:56,150 --> 01:00:59,200
invoke it

01:01:02,930 --> 01:01:09,760
okay well thanks enjoy

01:01:06,070 --> 01:01:09,760

YouTube URL: https://www.youtube.com/watch?v=QGOk6k84xTU


