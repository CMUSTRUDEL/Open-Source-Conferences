Title: Netdev 0x13 -  XDP offload with virtio net
Publication date: 2019-05-25
Playlist: Netdev 0x13 - Day 2
Description: 
	Jason Wang is on a mission to bring VM networking performance to be at par with the host.
In this talk he describes the design, implementation and challenges in adding XDP support to virtio-net. Jason also discusses observed performance numbers, security implications
and future work.

More info:
https://www.netdevconf.org/0x13/session.html?xdp-offload-with-virtio-net
Captions: 
	00:00:00,000 --> 00:00:07,020
today I will give a talk about how to

00:00:01,589 --> 00:00:09,840
offload xep es or what a net so here's

00:00:07,020 --> 00:00:13,320
the outline and let's first take a look

00:00:09,840 --> 00:00:16,379
at how how a typical network setup for a

00:00:13,320 --> 00:00:19,529
key member gets so what L is really used

00:00:16,379 --> 00:00:22,289
for accounts of APC mechanisms for

00:00:19,529 --> 00:00:23,850
transferring packet between host and

00:00:22,289 --> 00:00:26,849
guest and you early there will be a

00:00:23,850 --> 00:00:29,310
front-end travel inside guest and there

00:00:26,849 --> 00:00:32,640
will be a back hand tremor implementing

00:00:29,310 --> 00:00:34,860
the host so it's ready to be host and we

00:00:32,640 --> 00:00:37,710
host can talk to several different kinds

00:00:34,860 --> 00:00:40,350
of back-end so for example if you want

00:00:37,710 --> 00:00:42,660
to do some complex the traffic

00:00:40,350 --> 00:00:46,020
forwarding you can use tableau ESO

00:00:42,660 --> 00:00:48,780
bridge and then tab will be serves as a

00:00:46,020 --> 00:00:51,000
poor and we are so bridge kind for

00:00:48,780 --> 00:00:53,550
techies between trade or physical need

00:00:51,000 --> 00:00:56,250
or you can choose to use map it happen

00:00:53,550 --> 00:00:58,800
which is really tightly coupled with the

00:00:56,250 --> 00:01:02,039
lower device and magnatum can trust you

00:00:58,800 --> 00:01:06,380
use the lower device send and receive do

00:01:02,039 --> 00:01:09,510
things for transmit or receive packets

00:01:06,380 --> 00:01:11,909
so how does xeb can have in this case so

00:01:09,510 --> 00:01:14,100
first it's not hard to see to imagine

00:01:11,909 --> 00:01:16,860
that we can install XP programs inside

00:01:14,100 --> 00:01:20,130
casts through the water network and all

00:01:16,860 --> 00:01:24,900
the guest packet processing accelerated

00:01:20,130 --> 00:01:27,450
and secondly is we can also attach

00:01:24,900 --> 00:01:30,630
actually programs in that half which

00:01:27,450 --> 00:01:33,060
means this experience could be used for

00:01:30,630 --> 00:01:35,729
some early packet processing from guest

00:01:33,060 --> 00:01:38,820
and the last and probably most important

00:01:35,729 --> 00:01:41,610
things is if I set up another ax B

00:01:38,820 --> 00:01:45,360
programs on the lope and physical Nick

00:01:41,610 --> 00:01:48,210
and I do activity back then like we can

00:01:45,360 --> 00:01:51,880
see that the whole host data path could

00:01:48,210 --> 00:01:54,549
be can also accelerate in this case

00:01:51,880 --> 00:01:58,220
so let's have a look at the performance

00:01:54,549 --> 00:02:00,580
so I just do some simple test one is the

00:01:58,220 --> 00:02:03,830
arcs job and another is math we swap

00:02:00,580 --> 00:02:05,840
analyzed was done by two has real

00:02:03,830 --> 00:02:08,690
machines connect back to back with I for

00:02:05,840 --> 00:02:10,459
TE and I also task as TC pass as a

00:02:08,690 --> 00:02:12,550
reference so you can see the blue bar

00:02:10,459 --> 00:02:16,489
gasps kisi pass which has the lowest

00:02:12,550 --> 00:02:19,180
performance and after I replace the gas

00:02:16,489 --> 00:02:21,850
TC mr. casse xdp I can get some

00:02:19,180 --> 00:02:24,560
improvement but not variable use and

00:02:21,850 --> 00:02:26,840
then I can replace the hosted pass with

00:02:24,560 --> 00:02:30,290
purely done by the activity direct I can

00:02:26,840 --> 00:02:32,989
get the performance doubled but compared

00:02:30,290 --> 00:02:34,760
to the yellow bar which is which which

00:02:32,989 --> 00:02:37,130
could be done by the house we can still

00:02:34,760 --> 00:02:42,160
see a very huge gap we can only get

00:02:37,130 --> 00:02:44,900
about 20% of the PPS that house Candide

00:02:42,160 --> 00:02:47,630
so we are the bottlenecks the first is

00:02:44,900 --> 00:02:49,880
the virtualization so the overhead of

00:02:47,630 --> 00:02:51,500
virtualization is do you notice Poe even

00:02:49,880 --> 00:02:54,739
for the modern CPUs for the best cases

00:02:51,500 --> 00:02:56,840
and then you are using the

00:02:54,739 --> 00:03:00,230
virtualizations it always means that too

00:02:56,840 --> 00:03:02,329
much too much layers and very long data

00:03:00,230 --> 00:03:04,790
path for example the bank me goes

00:03:02,329 --> 00:03:07,239
through two drivers or through

00:03:04,790 --> 00:03:10,579
networking sex or postholes and gas

00:03:07,239 --> 00:03:13,190
ananda pata Negra is the border itself

00:03:10,579 --> 00:03:16,459
so the word hello is designed for work

00:03:13,190 --> 00:03:18,320
but when you are transfer a small packet

00:03:16,459 --> 00:03:21,320
it's overhand it's too obvious for

00:03:18,320 --> 00:03:23,750
example you need to populating what you

00:03:21,320 --> 00:03:27,769
made a date and you need to do some

00:03:23,750 --> 00:03:30,079
context switching and certain content is

00:03:27,769 --> 00:03:33,350
the host itself so it was not as

00:03:30,079 --> 00:03:35,269
optimized as what he did and the last is

00:03:33,350 --> 00:03:38,630
did copy which means that which you need

00:03:35,269 --> 00:03:42,220
to copy between the host buffers and gas

00:03:38,630 --> 00:03:46,549
buffers we try to do packet transfer

00:03:42,220 --> 00:03:49,190
so this calls for a requirement of how

00:03:46,549 --> 00:03:52,310
can we offload the Exedy to host or how

00:03:49,190 --> 00:03:56,420
about we do this so if we can find a map

00:03:52,310 --> 00:03:58,600
master that to run activity programs

00:03:56,420 --> 00:04:01,360
from gas to host

00:03:58,600 --> 00:04:04,240
and if the package could be doest EBP

00:04:01,360 --> 00:04:06,760
our program is completely this means the

00:04:04,240 --> 00:04:09,090
packet won't go inside gas at all

00:04:06,760 --> 00:04:11,080
there will be no overhead of both

00:04:09,090 --> 00:04:14,170
virtualizations what else and something

00:04:11,080 --> 00:04:15,700
like this and it also means that there

00:04:14,170 --> 00:04:20,310
will be no data copy because the date

00:04:15,700 --> 00:04:23,560
was the always host and weekends

00:04:20,310 --> 00:04:25,660
and we can use X to be passed as a quiz

00:04:23,560 --> 00:04:31,300
for for for back for the packet that

00:04:25,660 --> 00:04:33,940
cannot be deal with their programs so in

00:04:31,300 --> 00:04:36,430
this protocol so we know that metonym

00:04:33,940 --> 00:04:38,650
has demonstrated the first activity

00:04:36,430 --> 00:04:41,590
upload implementations this is because

00:04:38,650 --> 00:04:43,930
the EPF is almost self-contained so for

00:04:41,590 --> 00:04:46,390
example is instruction set architecture

00:04:43,930 --> 00:04:49,360
is self-contained and part of the

00:04:46,390 --> 00:04:51,070
helpers maps and behave commands it's

00:04:49,360 --> 00:04:54,880
also self-contained but there are also

00:04:51,070 --> 00:04:57,760
some exceptions for example the heifers

00:04:54,880 --> 00:05:00,040
that generates the perf events which

00:04:57,760 --> 00:05:02,350
requires knowledge beyond the deeply

00:05:00,040 --> 00:05:04,060
about your machine abstractions and the

00:05:02,350 --> 00:05:06,400
procedural maps which requires the

00:05:04,060 --> 00:05:11,080
knowledge of the number of CPUs which is

00:05:06,400 --> 00:05:12,910
also need some tricks and optic pinging

00:05:11,080 --> 00:05:16,870
which requires knowledge of the Seas

00:05:12,910 --> 00:05:20,260
file system pass so all these exceptions

00:05:16,870 --> 00:05:25,240
may require some tricks to make it work

00:05:20,260 --> 00:05:27,280
and for natural FP another interesting

00:05:25,240 --> 00:05:29,440
part is that there's a architectural

00:05:27,280 --> 00:05:31,750
difference between this Monique and CPU

00:05:29,440 --> 00:05:36,160
which means it needs to use a dedicated

00:05:31,750 --> 00:05:39,610
cheat to generate native instructions

00:05:36,160 --> 00:05:44,150
Fulton NIC and it also used a verifier

00:05:39,610 --> 00:05:48,900
to eject the and supported features

00:05:44,150 --> 00:05:51,360
so how about martinet so what's easy is

00:05:48,900 --> 00:05:55,230
that there will be no architecture

00:05:51,360 --> 00:05:58,980
difference and what's also good is that

00:05:55,230 --> 00:06:01,620
they can depends on hosts EBP of support

00:05:58,980 --> 00:06:04,800
so assuming that it ho says the first

00:06:01,620 --> 00:06:07,110
part we can easily implement offload

00:06:04,800 --> 00:06:10,710
through use word hello as a transport

00:06:07,110 --> 00:06:12,810
for the EPF commands so that's good but

00:06:10,710 --> 00:06:14,250
what's hard is that we need to find a

00:06:12,810 --> 00:06:18,450
way into dealing with the compatibility

00:06:14,250 --> 00:06:21,390
issues which means it should make sure

00:06:18,450 --> 00:06:23,850
that there will be no user noticeable

00:06:21,390 --> 00:06:28,230
behavior changes after we upload the

00:06:23,850 --> 00:06:30,120
xdb programs to host so in order to

00:06:28,230 --> 00:06:31,800
achieve the XP offloading we need to do

00:06:30,120 --> 00:06:34,740
the following things the first is the

00:06:31,800 --> 00:06:36,750
EPF program of loading which means that

00:06:34,740 --> 00:06:38,700
we should find a way to run guys by

00:06:36,750 --> 00:06:41,130
scores on host directly and we should

00:06:38,700 --> 00:06:43,080
keep the interactions with the Cassie

00:06:41,130 --> 00:06:47,310
user space control programs through maps

00:06:43,080 --> 00:06:50,280
reworks and the next things is to upload

00:06:47,310 --> 00:06:52,320
the XP contacts which means this would

00:06:50,280 --> 00:06:54,780
make the offloaded xep program to be

00:06:52,320 --> 00:06:56,940
triggered for the packets test testing

00:06:54,780 --> 00:06:58,980
to the guests and we should keep the

00:06:56,940 --> 00:07:01,200
internal helpers that modify the packets

00:06:58,980 --> 00:07:04,050
for example should still works in this

00:07:01,200 --> 00:07:06,750
case and last things is the ax ax t

00:07:04,050 --> 00:07:09,510
actions of loading which means it's free

00:07:06,750 --> 00:07:12,000
D Street for for the for the XP past

00:07:09,510 --> 00:07:14,340
packet it will be sent to guest and for

00:07:12,000 --> 00:07:17,040
the package this XP drop you should be

00:07:14,340 --> 00:07:19,740
to abound the host directory question

00:07:17,040 --> 00:07:21,360
yes what's your security model like one

00:07:19,740 --> 00:07:27,630
VM can start dropping packets of the

00:07:21,360 --> 00:07:29,550
Iridium the only triggered the xeb

00:07:27,630 --> 00:07:33,090
programs if we found that a packet of

00:07:29,550 --> 00:07:36,720
you go through this via so there will be

00:07:33,090 --> 00:07:38,610
no such issues you say one offloaded to

00:07:36,720 --> 00:07:41,670
hardware so how do you teach the

00:07:38,610 --> 00:07:45,600
hardware to like the harder would

00:07:41,670 --> 00:07:47,879
receive on the same Nick you package for

00:07:45,600 --> 00:07:50,069
various guest so how do you

00:07:47,879 --> 00:07:51,990
if a guest puts put some puts a

00:07:50,069 --> 00:07:58,259
directive to throw to throw the other

00:07:51,990 --> 00:07:59,909
guests back it so so so I can show you

00:07:58,259 --> 00:08:01,649
that he'll implementations in the

00:07:59,909 --> 00:08:05,490
restless and if you still have questions

00:08:01,649 --> 00:08:07,679
we can discuss yeah so all this so the

00:08:05,490 --> 00:08:11,279
package basic CBT acts will be forwarded

00:08:07,679 --> 00:08:12,899
as if they were sent from guests so what

00:08:11,279 --> 00:08:15,089
we want to achieve is the functional

00:08:12,899 --> 00:08:19,229
equivalence this taxable programs

00:08:15,089 --> 00:08:21,479
running sir guests so for the APPL part

00:08:19,229 --> 00:08:25,080
assuming that house has will be peer

00:08:21,479 --> 00:08:27,029
support we can trust we used typically

00:08:25,080 --> 00:08:30,599
overloading infrastructures provided by

00:08:27,029 --> 00:08:32,159
the kernel and we can use those ops for

00:08:30,599 --> 00:08:35,279
hook the people commands to the water

00:08:32,159 --> 00:08:37,019
network and use for tonight to transfer

00:08:35,279 --> 00:08:39,149
those command to the house and you

00:08:37,019 --> 00:08:42,180
really will be a cooperative process on

00:08:39,149 --> 00:08:43,979
the host which we would translate the

00:08:42,180 --> 00:08:46,980
word documents back to the ETL comments

00:08:43,979 --> 00:08:51,630
and to create for example if you have

00:08:46,980 --> 00:08:55,110
chrome and create maps on the host and

00:08:51,630 --> 00:08:58,470
then we can treat it as a proxy of the

00:08:55,110 --> 00:09:00,839
Casa DBPR programs and for the XV

00:08:58,470 --> 00:09:03,959
contacts this means that we should only

00:09:00,839 --> 00:09:04,529
run XV programs on host networking

00:09:03,959 --> 00:09:08,430
backends

00:09:04,529 --> 00:09:11,279
so for example it was triggered uploaded

00:09:08,430 --> 00:09:13,410
XP programs on her home at MIT had and

00:09:11,279 --> 00:09:15,660
we can trust you use the host internal

00:09:13,410 --> 00:09:19,170
helpers in this case and for the XP

00:09:15,660 --> 00:09:23,130
actions we can trust emulate it on the

00:09:19,170 --> 00:09:26,130
host networking backends so here's

00:09:23,130 --> 00:09:29,069
example how could we upload XP programs

00:09:26,130 --> 00:09:31,589
to host so assume that you want to

00:09:29,069 --> 00:09:34,740
create uploaded activity programs inside

00:09:31,589 --> 00:09:37,709
cast you should use the PDF system

00:09:34,740 --> 00:09:40,110
causing gas while specifying if index

00:09:37,709 --> 00:09:42,089
and after the gas colonel received this

00:09:40,110 --> 00:09:44,519
request it will first look at whether or

00:09:42,089 --> 00:09:47,819
not there will be some hooks for this

00:09:44,519 --> 00:09:50,209
uploading offload request and it phone

00:09:47,819 --> 00:09:53,730
add water net has registered

00:09:50,209 --> 00:09:55,529
stops and it will send those requests to

00:09:53,730 --> 00:09:58,139
the driver and the driver will translate

00:09:55,529 --> 00:09:59,520
the BPF commands to the water night

00:09:58,139 --> 00:10:02,430
commands through and pass

00:09:59,520 --> 00:10:04,530
them to the camel through the piano

00:10:02,430 --> 00:10:06,860
through the war tonight country what cue

00:10:04,530 --> 00:10:09,660
and there will be a detailed proxy

00:10:06,860 --> 00:10:12,330
implemented in camel and translated

00:10:09,660 --> 00:10:14,670
those command factory BtoB BPF command

00:10:12,330 --> 00:10:17,610
and issue the PPF system calls on the

00:10:14,670 --> 00:10:20,250
house directory this means that we

00:10:17,610 --> 00:10:21,240
bypassed very ferrous and didn't get in

00:10:20,250 --> 00:10:23,850
gasps completely

00:10:21,240 --> 00:10:28,110
instead we depends on the verifiers and

00:10:23,850 --> 00:10:32,760
GD host to do verifications or

00:10:28,110 --> 00:10:34,500
generating the native instructions so

00:10:32,760 --> 00:10:36,510
for the map of loading is something

00:10:34,500 --> 00:10:38,420
similar so when the user space want to

00:10:36,510 --> 00:10:42,810
create a map and followed it to the

00:10:38,420 --> 00:10:45,330
device it will issue the PPF system

00:10:42,810 --> 00:10:48,060
Corvis I've indexed with Y and were

00:10:45,330 --> 00:10:51,210
tonight we'll translate and forward them

00:10:48,060 --> 00:10:53,010
to the crema proxy and the people proxy

00:10:51,210 --> 00:10:56,760
implementations on human we used to be

00:10:53,010 --> 00:10:58,950
able to some co-host so so pay attention

00:10:56,760 --> 00:11:02,220
that since the gaseous of space program

00:10:58,950 --> 00:11:04,770
could only see the fell disorders of

00:11:02,220 --> 00:11:07,050
guests so we should build a map between

00:11:04,770 --> 00:11:10,280
the guys fell distributors and hosts how

00:11:07,050 --> 00:11:14,250
descriptors this will be done after the

00:11:10,280 --> 00:11:17,700
math has been created by camel and for

00:11:14,250 --> 00:11:20,970
the rest commands such as the map create

00:11:17,700 --> 00:11:22,860
delete look up the proxy programming

00:11:20,970 --> 00:11:25,700
which was replace the gas about this

00:11:22,860 --> 00:11:25,700
world is host mass

00:11:26,780 --> 00:11:33,380
okay so we can see that how let's take a

00:11:30,650 --> 00:11:35,920
look at how the activity contracts of

00:11:33,380 --> 00:11:40,730
looting was implemented so this is a

00:11:35,920 --> 00:11:43,820
simple case the math attire person so in

00:11:40,730 --> 00:11:47,200
this case a single map we'd have virtual

00:11:43,820 --> 00:11:50,210
device will multiply lower physical Nick

00:11:47,200 --> 00:11:53,000
so what we did is to amend octo so

00:11:50,210 --> 00:11:56,150
attaching offloaded XV programs from

00:11:53,000 --> 00:11:58,880
guest and this XV programs need to be

00:11:56,150 --> 00:12:01,400
triggered on Hauser expose and what's

00:11:58,880 --> 00:12:03,800
interesting is that since device is

00:12:01,400 --> 00:12:06,590
multiple eyes by the math you type if

00:12:03,800 --> 00:12:08,840
the device has native exited support we

00:12:06,590 --> 00:12:11,510
can further upload it to the lower dress

00:12:08,840 --> 00:12:15,110
and we can achieve then the host native

00:12:11,510 --> 00:12:17,540
exhibit performance in this case and if

00:12:15,110 --> 00:12:20,720
the lower device does not have native

00:12:17,540 --> 00:12:23,900
active support we can do to exit e on

00:12:20,720 --> 00:12:30,140
top of the sk b so that means we should

00:12:23,900 --> 00:12:34,100
use the slow exhibition eric pass okay

00:12:30,140 --> 00:12:37,400
so a more complex use case so let's

00:12:34,100 --> 00:12:39,589
consider how it can be for the math we

00:12:37,400 --> 00:12:41,180
type original so in this in this mode in

00:12:39,589 --> 00:12:43,190
this world several math we'd have what

00:12:41,180 --> 00:12:45,890
to device will share a single physical

00:12:43,190 --> 00:12:48,470
device and the static escapee was

00:12:45,890 --> 00:12:52,010
maintained for choosing the destinations

00:12:48,470 --> 00:12:54,820
of an escapee so we still use a gross

00:12:52,010 --> 00:12:58,370
for touching the offloaded activity but

00:12:54,820 --> 00:13:00,980
what complex that since the market had

00:12:58,370 --> 00:13:02,990
since since the lower device was shared

00:13:00,980 --> 00:13:07,630
by multiple market have device it not

00:13:02,990 --> 00:13:10,180
simply offloaded to the lord ways so

00:13:07,630 --> 00:13:13,390
this means that

00:13:10,180 --> 00:13:18,340
for the bridge mode because you only

00:13:13,390 --> 00:13:22,000
depends on skb pass for this case this

00:13:18,340 --> 00:13:25,600
will cries this request mechanisms in

00:13:22,000 --> 00:13:27,340
the kernel which could extend the law XD

00:13:25,600 --> 00:13:29,830
keyframes to the magnet help directly

00:13:27,340 --> 00:13:31,900
but unfortunately there's no such

00:13:29,830 --> 00:13:36,850
mechanisms so which may require small

00:13:31,900 --> 00:13:38,500
salt okay so let's see how the uploaded

00:13:36,850 --> 00:13:42,250
activity programs was implemented for

00:13:38,500 --> 00:13:44,740
time so similarly I out toast was

00:13:42,250 --> 00:13:46,690
invented for attaching the offloaded

00:13:44,740 --> 00:13:49,420
activity programs but what's interesting

00:13:46,690 --> 00:13:52,270
is that in this case for tab we trigger

00:13:49,420 --> 00:13:54,460
it on a host TX pass this is because

00:13:52,270 --> 00:13:56,670
from the hosts point of view the gas

00:13:54,460 --> 00:14:00,280
receiving is the host transmission and

00:13:56,670 --> 00:14:03,780
what's more interesting is that when the

00:14:00,280 --> 00:14:06,790
of loaded IV programs return x eb TX

00:14:03,780 --> 00:14:09,580
this means we should forward packet I

00:14:06,790 --> 00:14:11,740
see if it was sent from the gas so in

00:14:09,580 --> 00:14:13,720
this case if an 85 CB programs was

00:14:11,740 --> 00:14:15,940
attached to the tab device which would

00:14:13,720 --> 00:14:18,880
also trigger this program and if this an

00:14:15,940 --> 00:14:21,280
85 CB programs returned xB redirect we

00:14:18,880 --> 00:14:24,010
should also keep the award so you can

00:14:21,280 --> 00:14:26,800
see if we set up oxy programs inside the

00:14:24,010 --> 00:14:30,550
lower device formally to zero and we

00:14:26,800 --> 00:14:32,770
develop packet to the tab and we upload

00:14:30,550 --> 00:14:34,750
the exit program from gas and there's

00:14:32,770 --> 00:14:37,540
also a native activity programs to be

00:14:34,750 --> 00:14:41,350
attached all the Fast Pass could be done

00:14:37,540 --> 00:14:42,970
by purely through executed class and for

00:14:41,350 --> 00:14:45,010
the ordinary as we pass we should also

00:14:42,970 --> 00:14:47,050
keep the work this which means if for

00:14:45,010 --> 00:14:48,970
example Israel each each one want to

00:14:47,050 --> 00:14:50,650
transmit an escapee to tab which will

00:14:48,970 --> 00:14:53,860
make it off loaded actually programs

00:14:50,650 --> 00:14:57,250
works on top of the Esk literately so

00:14:53,860 --> 00:15:01,310
it's slow but if you work

00:14:57,250 --> 00:15:03,500
so for tab another interesting issue to

00:15:01,310 --> 00:15:05,870
choose a suitable execution context so

00:15:03,500 --> 00:15:08,540
there are two choices the first is to

00:15:05,870 --> 00:15:10,730
trigger off loaded as TV programs in the

00:15:08,540 --> 00:15:12,529
bottom hub context which means we should

00:15:10,730 --> 00:15:15,470
do it on the tab transmission routine

00:15:12,529 --> 00:15:17,110
what's good is that is cool for simple

00:15:15,470 --> 00:15:19,880
users use kisses like Jody

00:15:17,110 --> 00:15:22,490
but what's badly is for the complex task

00:15:19,880 --> 00:15:23,750
which requires sometimes it may slow

00:15:22,490 --> 00:15:27,709
down the whole nappy-poo

00:15:23,750 --> 00:15:29,449
loop so another choices is to trigger

00:15:27,709 --> 00:15:33,260
off loaded active programs on the

00:15:29,449 --> 00:15:35,389
process contact which means for example

00:15:33,260 --> 00:15:38,570
we could trigger it on the sake receive

00:15:35,389 --> 00:15:41,480
routine so what's what's not very good

00:15:38,570 --> 00:15:44,180
is that in this case it should get some

00:15:41,480 --> 00:15:46,519
overhead since the axial frames need to

00:15:44,180 --> 00:15:48,949
be hannover through the pond hurry but

00:15:46,519 --> 00:15:52,070
what's good is that we could have a full

00:15:48,949 --> 00:15:56,540
dedicated process for example we host to

00:15:52,070 --> 00:15:58,820
run offloaded xep workload and it also

00:15:56,540 --> 00:16:01,839
allows us to build some kinds of service

00:15:58,820 --> 00:16:05,180
chaining let demonstrated in this figure

00:16:01,839 --> 00:16:07,399
so in this case we can see that through

00:16:05,180 --> 00:16:08,959
the operations between the overloaded

00:16:07,399 --> 00:16:11,360
activity programs and native exit

00:16:08,959 --> 00:16:13,790
programs they could build a service

00:16:11,360 --> 00:16:17,180
train easily so in this case of allotted

00:16:13,790 --> 00:16:19,670
xeb programs was in charge fold running

00:16:17,180 --> 00:16:22,820
the guest packet processing logic and

00:16:19,670 --> 00:16:25,449
the native XP programs is used to

00:16:22,820 --> 00:16:29,990
determine the destinations of the next

00:16:25,449 --> 00:16:32,180
yeah so we can see for the first pass we

00:16:29,990 --> 00:16:35,750
can use exit e to redirect packet from

00:16:32,180 --> 00:16:38,420
little 0 to BM 0 and into M 2 to M 3 and

00:16:35,750 --> 00:16:40,940
portunity one so there will be no need

00:16:38,420 --> 00:16:43,959
for the packet to coincide and EVMS

00:16:40,940 --> 00:16:46,970
and for the case that not be do with

00:16:43,959 --> 00:16:48,829
their programs the native actively

00:16:46,970 --> 00:16:50,390
programs may choose to follow them how

00:16:48,829 --> 00:16:52,699
to read about the packets through way M

00:16:50,390 --> 00:16:54,199
1 and in this case the offload it has to

00:16:52,699 --> 00:16:56,329
be programs could return exceeded pass

00:16:54,199 --> 00:17:00,730
the packet will be sent back to to be M

00:16:56,329 --> 00:17:04,309
1 and deal with ordinary M networking

00:17:00,730 --> 00:17:06,770
stack and after it has been done the way

00:17:04,309 --> 00:17:08,720
M 1 is transmitted back back and the

00:17:06,770 --> 00:17:09,510
native actively programs view pretty

00:17:08,720 --> 00:17:14,339
well

00:17:09,510 --> 00:17:20,220
get back to the service training okay so

00:17:14,339 --> 00:17:22,320
let's see how migration works so it's

00:17:20,220 --> 00:17:25,170
pretty seen it's pretty sweet for so

00:17:22,320 --> 00:17:27,600
it's work size for for example for the

00:17:25,170 --> 00:17:30,060
first step which would try to iterate

00:17:27,600 --> 00:17:32,250
all the key value pairs from the source

00:17:30,060 --> 00:17:36,360
and try to migrate them to the desk and

00:17:32,250 --> 00:17:38,910
in this proxy we were trying to create a

00:17:36,360 --> 00:17:42,210
Maps and update the key value pairs and

00:17:38,910 --> 00:17:44,400
this is instead for it sorry and step

00:17:42,210 --> 00:17:46,200
three is to build a new value square

00:17:44,400 --> 00:17:50,070
matings between gas valve distributors

00:17:46,200 --> 00:17:52,320
and host and step four is to migrate the

00:17:50,070 --> 00:17:55,920
EBT iPad code and a step file is to

00:17:52,320 --> 00:17:58,710
replace the fell distributors and next

00:17:55,920 --> 00:18:00,900
step we can issue the PPF system call to

00:17:58,710 --> 00:18:03,120
load the programs on the destinations

00:18:00,900 --> 00:18:05,880
and the last step is to attach attach

00:18:03,120 --> 00:18:10,170
the programs to tab program host through

00:18:05,880 --> 00:18:11,970
doctors so it it looks pretty simple but

00:18:10,170 --> 00:18:13,620
what challenging is that we should do

00:18:11,970 --> 00:18:16,560
with the cam ability users in this case

00:18:13,620 --> 00:18:18,270
so which means that the EBP our support

00:18:16,560 --> 00:18:21,060
on the destinations should be compatible

00:18:18,270 --> 00:18:24,930
with source so this really requires some

00:18:21,060 --> 00:18:28,830
kinds of feature flags or versions of

00:18:24,930 --> 00:18:31,460
EBP F and it also requires a stable ABI

00:18:28,830 --> 00:18:33,720
for example this instruction set

00:18:31,460 --> 00:18:36,120
architectures Maps and no helpers should

00:18:33,720 --> 00:18:38,220
have stability right otherwise the users

00:18:36,120 --> 00:18:40,920
based programs or the kernel networking

00:18:38,220 --> 00:18:43,770
specs may notice some changes in the

00:18:40,920 --> 00:18:46,010
behaviors so all of this calls for an

00:18:43,770 --> 00:18:49,320
a/b pair specifically somewhere

00:18:46,010 --> 00:18:51,930
unfortunately we don't have such one so

00:18:49,320 --> 00:18:55,110
it may complex our tasks because we

00:18:51,930 --> 00:18:58,050
don't want to duplicate and EBP have

00:18:55,110 --> 00:18:59,910
specific agents in the world I'll so

00:18:58,050 --> 00:19:02,430
assuming that we can have some specific

00:18:59,910 --> 00:19:05,100
agents we can trust map some EPF

00:19:02,430 --> 00:19:06,950
versions in one of the word hello

00:19:05,100 --> 00:19:10,430
features

00:19:06,950 --> 00:19:13,330
and it will also help not only for the

00:19:10,430 --> 00:19:16,870
migration but also false offloading or

00:19:13,330 --> 00:19:21,110
ETF implementations are the internal

00:19:16,870 --> 00:19:23,870
okay so let's see the performance so you

00:19:21,110 --> 00:19:26,840
can see the blue bar is the offloaded

00:19:23,870 --> 00:19:29,750
ICP programs run for tab so you can see

00:19:26,840 --> 00:19:32,990
compared to the host activity direct

00:19:29,750 --> 00:19:35,210
pass we can get a huge improvement so on

00:19:32,990 --> 00:19:38,060
the arcs drop I can get about 11 million

00:19:35,210 --> 00:19:43,810
PPS and for the mattress web I can get

00:19:38,060 --> 00:19:49,850
about 5.5 million PPS which is somehow

00:19:43,810 --> 00:19:53,870
good yeah and after I use Mac be tab and

00:19:49,850 --> 00:19:56,180
uploaded to the pass-through mode so we

00:19:53,870 --> 00:19:58,160
can get the same performance

00:19:56,180 --> 00:20:02,300
I suppose host candy so this really

00:19:58,160 --> 00:20:06,230
quick but regarding the drop if you do

00:20:02,300 --> 00:20:09,440
it on the on the VF driver on the horse

00:20:06,230 --> 00:20:11,180
they do it before they build skb and if

00:20:09,440 --> 00:20:12,590
you do it on a Mac V tap it you already

00:20:11,180 --> 00:20:14,990
have an escapee and that's the whole

00:20:12,590 --> 00:20:20,960
essence of XDP so how can it be the same

00:20:14,990 --> 00:20:22,490
performance actually we uploaded the XV

00:20:20,960 --> 00:20:25,640
programs in the case of the magnet tab

00:20:22,490 --> 00:20:27,080
to the lower device difference between

00:20:25,640 --> 00:20:29,090
the yellow and the brown I don't get it

00:20:27,080 --> 00:20:31,460
sorry what's the difference between the

00:20:29,090 --> 00:20:36,050
yellow and the brown it's if you did oh

00:20:31,460 --> 00:20:37,910
yes and so the yellow is the you can you

00:20:36,050 --> 00:20:40,190
can see this is somehow the same but the

00:20:37,910 --> 00:20:44,020
difference is that the brown is the exit

00:20:40,190 --> 00:20:50,660
II programs offloaded from the guest oh

00:20:44,020 --> 00:20:52,600
yes yes so you your yellow is the yellow

00:20:50,660 --> 00:20:58,480
is your where you want to go

00:20:52,600 --> 00:21:00,910
cool so what's the reasons that caused

00:20:58,480 --> 00:21:05,170
the slow down on the tab so perfect give

00:21:00,910 --> 00:21:07,240
me some hints so after so after sampling

00:21:05,170 --> 00:21:10,750
the case of ever QD I can see that some

00:21:07,240 --> 00:21:12,400
CPU cycles would spend on from them the

00:21:10,750 --> 00:21:15,130
roasting lock this is probably because

00:21:12,400 --> 00:21:19,300
that there's no per CPU Q's what happen

00:21:15,130 --> 00:21:21,700
so it is you nice spin locks up before

00:21:19,300 --> 00:21:24,700
including the XV frames to the pottery

00:21:21,700 --> 00:21:27,100
and I can also see some packet dropping

00:21:24,700 --> 00:21:29,470
it's probably because that there's

00:21:27,100 --> 00:21:32,380
there's a me speed mismatch between the

00:21:29,470 --> 00:21:35,770
producer and consumer and after sampling

00:21:32,380 --> 00:21:38,020
the V hostnet process it gives more

00:21:35,770 --> 00:21:41,080
hints so you can see that there are some

00:21:38,020 --> 00:21:44,560
exhibitors page for X with 3 so this

00:21:41,080 --> 00:21:48,100
just because there's no mechanisms for

00:21:44,560 --> 00:21:52,120
the high for te to reset code pages from

00:21:48,100 --> 00:21:55,300
the tab so we give too much stress on

00:21:52,120 --> 00:21:57,370
the page educator and you can do see

00:21:55,300 --> 00:21:59,580
some busy pulling routines was called

00:21:57,370 --> 00:22:03,640
for the net this probably cause that

00:21:59,580 --> 00:22:08,770
there are some kinds of mismatch which

00:22:03,640 --> 00:22:10,930
stops the V hostnet itself okay so the

00:22:08,770 --> 00:22:11,470
list is first if this turns out to be

00:22:10,930 --> 00:22:13,390
interesting

00:22:11,470 --> 00:22:16,180
I will send after this one's for

00:22:13,390 --> 00:22:18,760
comments and I will try to support more

00:22:16,180 --> 00:22:20,980
EBP effects V features such as to

00:22:18,760 --> 00:22:23,530
examine PDF pinning or something like

00:22:20,980 --> 00:22:27,820
this and probably some other kinds of

00:22:23,530 --> 00:22:33,340
the DVR program such as LS p PF and do

00:22:27,820 --> 00:22:35,170
some performance optimizations so here's

00:22:33,340 --> 00:22:36,940
a acknowledgement so I would first

00:22:35,170 --> 00:22:40,060
thanks Michael a skinful contributed

00:22:36,940 --> 00:22:42,760
this idea and for the national for the

00:22:40,060 --> 00:22:45,850
lots of paneer works on a DPF of loading

00:22:42,760 --> 00:22:49,150
which simplifies lots of works and every

00:22:45,850 --> 00:22:50,690
one integer beautiful exit okay so in

00:22:49,150 --> 00:22:52,460
question so

00:22:50,690 --> 00:22:56,300
a high-level question so it sounds like

00:22:52,460 --> 00:23:00,560
I mean from the use case that is clear

00:22:56,300 --> 00:23:02,060
is drawn no question about it but if you

00:23:00,560 --> 00:23:04,160
try to do anything I mean if you are

00:23:02,060 --> 00:23:06,860
saying I'm really going to offload EVP

00:23:04,160 --> 00:23:08,210
of an X DP if you're doing more

00:23:06,860 --> 00:23:10,130
sophisticated things that you're gonna

00:23:08,210 --> 00:23:11,930
run into ours question all over again

00:23:10,130 --> 00:23:14,290
right I mean how are you going to give

00:23:11,930 --> 00:23:16,340
isolation to one particular VMs

00:23:14,290 --> 00:23:17,930
off-loaded program somebody's going to

00:23:16,340 --> 00:23:20,290
explain that it's Mac Vita pass-through

00:23:17,930 --> 00:23:20,290
madhyama

00:23:21,130 --> 00:23:32,810
always mean so basically this use case

00:23:28,430 --> 00:23:35,960
is pretty the same as why they give you

00:23:32,810 --> 00:23:39,560
to exit the offload to the hardware so

00:23:35,960 --> 00:23:43,100
it depends on how much features liquid

00:23:39,560 --> 00:23:44,690
support in in the case of for tonight so

00:23:43,100 --> 00:23:47,360
if we can support all the features so

00:23:44,690 --> 00:23:49,430
you can offload all right my question

00:23:47,360 --> 00:23:50,900
was like you already have this qme

00:23:49,430 --> 00:23:53,540
module in there right I mean you might

00:23:50,900 --> 00:23:55,430
as well just say provide all the VP of

00:23:53,540 --> 00:23:57,320
programs from all the VM so that qme

00:23:55,430 --> 00:23:59,480
module and you do some combination and

00:23:57,320 --> 00:24:01,490
it simplifies your life I mean the comp

00:23:59,480 --> 00:24:03,590
the amount of complication you're doing

00:24:01,490 --> 00:24:05,150
to be able to say it's Mac V type

00:24:03,590 --> 00:24:07,220
isolation and you can only do things

00:24:05,150 --> 00:24:09,140
that are now isolated to effectively a

00:24:07,220 --> 00:24:11,450
bridge port if I'm going to do something

00:24:09,140 --> 00:24:13,490
that's global I cannot because I have

00:24:11,450 --> 00:24:14,420
been already isolated to a portion of

00:24:13,490 --> 00:24:17,240
the NIC mm-hm

00:24:14,420 --> 00:24:19,850
you could just say instead let every VM

00:24:17,240 --> 00:24:21,920
explain to qmu exactly what BPF program

00:24:19,850 --> 00:24:23,660
it wants to run and it figures out

00:24:21,920 --> 00:24:25,730
whether it's going to do it an EVP FX DP

00:24:23,660 --> 00:24:27,380
wherever the hell it wants to run but it

00:24:25,730 --> 00:24:30,620
would be a much simpler solution won't

00:24:27,380 --> 00:24:34,270
it and your migration case also gets a

00:24:30,620 --> 00:24:37,240
lot less complicated yes

00:24:34,270 --> 00:24:40,750
mmm-hmm hey Jason

00:24:37,240 --> 00:24:45,270
so as the BPF program put onto the Mac

00:24:40,750 --> 00:24:47,950
beat app or onto the bottom host Nick

00:24:45,270 --> 00:24:49,990
three where's the BPF program installed

00:24:47,950 --> 00:24:52,290
in the host is it on the Mac beat app or

00:24:49,990 --> 00:24:54,970
is it on the bottom device lower device

00:24:52,290 --> 00:24:56,530
for pass-through mode only for other

00:24:54,970 --> 00:24:58,780
mode which is at one point you had a

00:24:56,530 --> 00:25:02,140
patch to iteratively walk up or devices

00:24:58,780 --> 00:25:02,550
looking for vpf programs yes that's

00:25:02,140 --> 00:25:17,950
possible

00:25:02,550 --> 00:25:25,179
okay so for example fote

00:25:17,950 --> 00:25:29,080
or the hope for yes if the VF driver

00:25:25,179 --> 00:25:32,410
support xep for example a QB you can try

00:25:29,080 --> 00:25:34,840
actually be a BF in this case and you

00:25:32,410 --> 00:25:39,190
can go get offloaded XV programs run on

00:25:34,840 --> 00:25:43,450
the lower class so my understanding is

00:25:39,190 --> 00:25:45,940
that the so in case you have several BPF

00:25:43,450 --> 00:25:48,700
programs that accessing the same map in

00:25:45,940 --> 00:25:52,809
the guests and the XDP program is

00:25:48,700 --> 00:25:56,920
offloaded then you have actually shared

00:25:52,809 --> 00:26:00,580
resource that is floated to the host yes

00:25:56,920 --> 00:26:02,170
yes so every excess from the BPF program

00:26:00,580 --> 00:26:06,309
for example Cecropia program whatever

00:26:02,170 --> 00:26:08,620
needs to go through over tile to to the

00:26:06,309 --> 00:26:12,130
host right so let's have benchmarks for

00:26:08,620 --> 00:26:15,010
that I actually I talked to the secret I

00:26:12,130 --> 00:26:18,250
trust do the xdp and in the case of xep

00:26:15,010 --> 00:26:22,690
early such request is not very frequent

00:26:18,250 --> 00:26:24,790
to example for the case I use is the

00:26:22,690 --> 00:26:27,130
some poxy programs which is trust doing

00:26:24,790 --> 00:26:31,890
some kinds of the counters look up and

00:26:27,130 --> 00:26:34,809
it was interesting I work once every

00:26:31,890 --> 00:26:37,750
several seconds so it's not very

00:26:34,809 --> 00:26:40,330
frequent so it's performance

00:26:37,750 --> 00:26:44,290
we don't care much about the province in

00:26:40,330 --> 00:26:44,860
this case but if you do very frequent my

00:26:44,290 --> 00:26:47,800
lookups

00:26:44,860 --> 00:26:50,140
it will for sure take repeat some some

00:26:47,800 --> 00:26:52,570
performance in such case it might be

00:26:50,140 --> 00:26:56,350
actually faster not to overload the FDP

00:26:52,570 --> 00:26:57,850
to to the yes maybe yeah okay so and

00:26:56,350 --> 00:26:59,950
this is actually something you can

00:26:57,850 --> 00:27:03,640
choose when like writing the ocean

00:26:59,950 --> 00:27:06,520
uploading okay okay so no imitation

00:27:03,640 --> 00:27:08,440
there no like I mean it might be

00:27:06,520 --> 00:27:10,180
interested to do that automatically to

00:27:08,440 --> 00:27:12,550
somehow detect that you are like going

00:27:10,180 --> 00:27:14,860
to frequently to the host and just not

00:27:12,550 --> 00:27:17,860
offload or something yes we can invent

00:27:14,860 --> 00:27:22,090
some fast mechanisms for example use

00:27:17,860 --> 00:27:30,760
portal and to accelerate this yeah it

00:27:22,090 --> 00:27:33,040
was to try probably one more okay I'll

00:27:30,760 --> 00:27:38,110
ask and that's just somebody else I

00:27:33,040 --> 00:27:39,460
always have questions okay fine so how

00:27:38,110 --> 00:27:43,720
many changes you have to make um you

00:27:39,460 --> 00:27:47,050
colonel not not no no not a lot okay so

00:27:43,720 --> 00:27:49,450
you need a new Colonel you I guess I

00:27:47,050 --> 00:27:50,630
knew what i oh yeah new new host new

00:27:49,450 --> 00:27:54,059
guest new camo

00:27:50,630 --> 00:28:04,120
[Laughter]

00:27:54,059 --> 00:28:06,909
all right so one more question so do you

00:28:04,120 --> 00:28:13,269
have any plans to use the FX DP to

00:28:06,909 --> 00:28:15,700
accelerate the Mac beta pass through yes

00:28:13,269 --> 00:28:19,059
in fact I think there are some

00:28:15,700 --> 00:28:20,950
functional duplicators between FX DP and

00:28:19,059 --> 00:28:24,549
the math we'd have so if we can find a

00:28:20,950 --> 00:28:26,440
way to deliver relax EB Springs directly

00:28:24,549 --> 00:28:30,279
to Matt we'd have so there would be no

00:28:26,440 --> 00:28:32,679
functional difference except a FTP can

00:28:30,279 --> 00:28:37,419
put zero copy but Mac would happen to it

00:28:32,679 --> 00:28:40,380
as well so it's functional equivalent at

00:28:37,419 --> 00:28:40,380
least from my point of view

00:28:51,779 --> 00:28:59,580
so I think one of the great thing of

00:28:54,789 --> 00:29:02,440
vireo is a migration via migration so

00:28:59,580 --> 00:29:06,549
how do you handle in the migration in

00:29:02,440 --> 00:29:09,640
case of know you need also to copy all

00:29:06,549 --> 00:29:11,980
the maps and everything right and who is

00:29:09,640 --> 00:29:14,140
doing that who is responsible camo camo

00:29:11,980 --> 00:29:17,159
we will try to do this ok so you need

00:29:14,140 --> 00:29:17,159
also to update their queue

00:29:20,100 --> 00:29:28,090
yes ok if there's no more questions or

00:29:26,049 --> 00:29:31,310
we can go and get the coffee before the

00:29:28,090 --> 00:29:34,619
other room let's give it up for Jason

00:29:31,310 --> 00:29:34,619

YouTube URL: https://www.youtube.com/watch?v=OwdU7OeO9b0


