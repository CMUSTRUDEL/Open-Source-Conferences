Title: Netdev 0x13 - Veth XDP: XDP for containers
Publication date: 2019-05-25
Playlist: Netdev 0x13 - Day 2
Description: 
	Toshiaki Makita describe the effort (with his co-author William Tu) on improving container
network acceleration. The talk goes into details of both veth XDP as
well as AF_XDP.

More info:
https://www.netdevconf.org/0x13/session.html?talk-veth-xdp
Captions: 
	00:00:00,030 --> 00:00:07,319
today I'm talking about ECX JP and I

00:00:04,650 --> 00:00:12,590
toshiaki matched up from entity of

00:00:07,319 --> 00:00:21,180
Software Center the co-author is William

00:00:12,590 --> 00:00:26,600
2:23 he is not here so there are two

00:00:21,180 --> 00:00:26,600
parts one is X data support for bees

00:00:26,850 --> 00:00:33,150
which is my work and the other is a

00:00:30,869 --> 00:00:43,040
effective support for this which is

00:00:33,150 --> 00:00:49,110
Williams work so let let me start with

00:00:43,040 --> 00:00:53,309
some basics on history of xjp so extra

00:00:49,110 --> 00:00:59,570
piece in canon fast or Express data path

00:00:53,309 --> 00:01:06,690
and you can install your bf problem at

00:00:59,570 --> 00:01:10,020
Nick driver and then the driver runs vpf

00:01:06,690 --> 00:01:14,940
program immediately after it receives

00:01:10,020 --> 00:01:19,410
packets and it and the program can

00:01:14,940 --> 00:01:23,780
modify the packet or determine how to

00:01:19,410 --> 00:01:29,610
handle the packet like drop pass to a

00:01:23,780 --> 00:01:35,750
Pollyanna talk stock or sent back by TX

00:01:29,610 --> 00:01:35,750
or redirect to another driver

00:01:40,350 --> 00:01:51,360
and let me reduce generics TP as well so

00:01:45,290 --> 00:01:55,820
as I explained XTP is implemented in

00:01:51,360 --> 00:02:01,289
drivers so it requires drivers

00:01:55,820 --> 00:02:05,420
implementation so you need to choose xjp

00:02:01,289 --> 00:02:08,850
support each driver this is not so handy

00:02:05,420 --> 00:02:13,290
so generic step is created to allow you

00:02:08,850 --> 00:02:16,910
to use xjp on any driver it is

00:02:13,290 --> 00:02:21,590
introduced in color 4.12

00:02:16,910 --> 00:02:25,610
so this is necessary except

00:02:21,590 --> 00:02:25,610
implementation in network stack

00:02:28,640 --> 00:02:35,740
who

00:02:30,250 --> 00:02:38,340
sorry I I forgot to explain why xcp is

00:02:35,740 --> 00:02:44,400
faster sorry

00:02:38,340 --> 00:02:47,050
so xvp is fast because 8080 to be asked

00:02:44,400 --> 00:02:51,130
immediately hand pockets after ITC's

00:02:47,050 --> 00:02:55,030
packets so it has low overhead for

00:02:51,130 --> 00:02:59,140
example it can skip metadata skb

00:02:55,030 --> 00:03:04,600
allocation okay so get back to the

00:02:59,140 --> 00:03:08,980
generic and so generic is implemented in

00:03:04,600 --> 00:03:13,330
network stacks so it means it requires

00:03:08,980 --> 00:03:20,350
skb to allocated to be allocated so this

00:03:13,330 --> 00:03:23,530
is not as fast as native xtp and in some

00:03:20,350 --> 00:03:28,460
cases it requires packet buffer copy to

00:03:23,530 --> 00:03:32,550
meet xcp requirements basically

00:03:28,460 --> 00:03:36,780
Hitomi comet xep requires some amount of

00:03:32,550 --> 00:03:42,660
hatred but skb in many cases does not

00:03:36,780 --> 00:03:46,590
beat that so so it's not for performance

00:03:42,660 --> 00:03:50,420
but good for functional testing or trial

00:03:46,590 --> 00:03:50,420
uses for peers

00:03:53,890 --> 00:04:02,380
and Jenny xjp is was extended to use on

00:03:58,540 --> 00:04:07,030
virtual devices in Canada for two that

00:04:02,380 --> 00:04:10,540
includes beasts so we've got extra

00:04:07,030 --> 00:04:16,720
support at that point although it was

00:04:10,540 --> 00:04:20,650
generic and I added native xdp support

00:04:16,720 --> 00:04:24,510
in California 19 this is dr 11

00:04:20,650 --> 00:04:24,510
implementation for xtp for peace

00:04:29,480 --> 00:04:43,830
so let's compare genic and Nativity XTP

00:04:35,790 --> 00:04:49,860
for this so this is common use case for

00:04:43,830 --> 00:04:56,070
these devices Network stack network

00:04:49,860 --> 00:04:59,580
stack passes escapees to this device and

00:04:56,070 --> 00:05:05,400
this device forward the scabies to its

00:04:59,580 --> 00:05:08,520
peer this device and in general case

00:05:05,400 --> 00:05:11,340
which device passes the skillet to the

00:05:08,520 --> 00:05:21,240
upper layer network stack and the next

00:05:11,340 --> 00:05:25,710
AP hit there in native in each case the

00:05:21,240 --> 00:05:29,280
point the XTP is executed is in the vist

00:05:25,710 --> 00:05:32,790
device itself so that's the difference

00:05:29,280 --> 00:05:35,590
but performance wise this is the

00:05:32,790 --> 00:05:39,190
difference

00:05:35,590 --> 00:05:42,600
so so what the point of implementing

00:05:39,190 --> 00:05:42,600
native excipient peace

00:05:42,750 --> 00:05:55,540
so the point is xjp direct so as I

00:05:48,940 --> 00:05:58,650
explained the physical NIC driver can

00:05:55,540 --> 00:06:04,389
redirect packets to another interface by

00:05:58,650 --> 00:06:07,870
xcp direct action and this can be done

00:06:04,389 --> 00:06:15,060
without allocating escape of using xep

00:06:07,870 --> 00:06:22,510
frame so

00:06:15,060 --> 00:06:26,920
xdp frame is for mobile packet which is

00:06:22,510 --> 00:06:29,410
if change in performance turn SKF so

00:06:26,920 --> 00:06:36,730
escape of requires separate metadata

00:06:29,410 --> 00:06:40,780
object so it has some overhead allocated

00:06:36,730 --> 00:06:44,140
fluid escape of metadata right sv x TP

00:06:40,780 --> 00:06:48,340
flame has the metadata aligned in the

00:06:44,140 --> 00:06:52,060
packet buffer so it requires it doesn't

00:06:48,340 --> 00:06:59,500
require the additional allocation of

00:06:52,060 --> 00:07:04,330
metadata object so again this is Visnic

00:06:59,500 --> 00:07:10,510
Tyvek cv and redirect case and from

00:07:04,330 --> 00:07:16,510
stack case so the top side figure uses

00:07:10,510 --> 00:07:20,830
xcp direct from each driver and the

00:07:16,510 --> 00:07:25,090
packet will be forwarded in the form of

00:07:20,830 --> 00:07:31,750
X form of x JP frame in the vision what

00:07:25,090 --> 00:07:35,759
the exact frame to its vSphere and the

00:07:31,750 --> 00:07:42,399
period of device runs xcp program

00:07:35,759 --> 00:07:45,249
so in this case we we don't need any

00:07:42,399 --> 00:07:51,770
escape of allocation or pocket copy so

00:07:45,249 --> 00:07:53,099
it should be fast the bottom side figure

00:07:51,770 --> 00:07:56,009
[Music]

00:07:53,099 --> 00:08:03,479
shows the traditional uses of each

00:07:56,009 --> 00:08:08,069
devices and this requires STV so what I

00:08:03,479 --> 00:08:12,069
want to say is that the bottom side

00:08:08,069 --> 00:08:18,119
configuration does work but it's not

00:08:12,069 --> 00:08:18,119
fast so use cases

00:08:18,940 --> 00:08:27,630
as you can easily imagine this is for

00:08:22,630 --> 00:08:31,840
you this can be used for containers so

00:08:27,630 --> 00:08:36,690
container can install on the installed

00:08:31,840 --> 00:08:39,870
it's only xcp program in the B's device

00:08:36,690 --> 00:08:39,870
like this

00:08:41,600 --> 00:08:49,880
and this can be used for subs function

00:08:44,990 --> 00:08:55,160
chaining by using activity X on the XA p

00:08:49,880 --> 00:08:59,510
direct so in this case the first

00:08:55,160 --> 00:09:04,460
container does something in the x TP and

00:08:59,510 --> 00:09:08,270
returns activity x and its peer forward

00:09:04,460 --> 00:09:12,010
the packet by x TP direct to another

00:09:08,270 --> 00:09:20,420
container and in the other container

00:09:12,010 --> 00:09:25,370
do another things so this is this can be

00:09:20,420 --> 00:09:28,720
realized without containers by using XE

00:09:25,370 --> 00:09:28,720
p direct directory

00:09:33,800 --> 00:09:39,740
next I'll explain about design so

00:09:37,640 --> 00:09:41,840
original beast code use general software

00:09:39,740 --> 00:09:46,640
cubic doctoring qrx

00:09:41,840 --> 00:09:50,470
package from its beer so so this is

00:09:46,640 --> 00:09:55,700
common routing for non Appiah gonna be

00:09:50,470 --> 00:10:00,760
devices and hundreds only Escobar so

00:09:55,700 --> 00:10:00,760
there are no point to call xep programs

00:10:01,750 --> 00:10:17,410
so I I added this dedicated are excused

00:10:11,120 --> 00:10:17,410
and nap handler and

00:10:19,630 --> 00:10:22,620
so

00:10:24,710 --> 00:10:31,910
this topic Andhra is only neighborhood

00:10:27,230 --> 00:10:34,580
when HDPE is installed in this case the

00:10:31,910 --> 00:10:37,130
exile includes the pockets into PR

00:10:34,580 --> 00:10:40,370
excuse and the knife handle alone peer

00:10:37,130 --> 00:10:49,640
drains are experts in radix the people

00:10:40,370 --> 00:10:54,730
wrong so actually this model enables xtv

00:10:49,640 --> 00:10:54,730
redirect chain I explained a while ago

00:10:54,760 --> 00:11:03,440
avoiding the feet loop and stack

00:10:57,260 --> 00:11:12,130
overflow when xcp direct is miss come

00:11:03,440 --> 00:11:18,300
here and forms even group even that case

00:11:12,130 --> 00:11:18,300
this can this design channel overflowed

00:11:21,250 --> 00:11:30,879
so this is usage unfortunately there are

00:11:27,279 --> 00:11:36,790
several prerequisites to be done before

00:11:30,879 --> 00:11:40,629
using PC xcp the first you need to read

00:11:36,790 --> 00:11:44,790
user so you need to use previous

00:11:40,629 --> 00:11:48,720
containers and for the best performance

00:11:44,790 --> 00:11:53,319
allocate the same number of Q's as CPUs

00:11:48,720 --> 00:11:57,129
in ton of feeding and TX check some

00:11:53,319 --> 00:12:01,120
floating features physical devices and

00:11:57,129 --> 00:12:05,319
VC vices because of loaded freedom

00:12:01,120 --> 00:12:08,350
checksum is not peaceful from XTP and

00:12:05,319 --> 00:12:10,720
country this does not automatically take

00:12:08,350 --> 00:12:15,009
care of them so you need to manually

00:12:10,720 --> 00:12:19,930
disable them and don't forget to add you

00:12:15,009 --> 00:12:22,350
just filter for these are exciting for

00:12:19,930 --> 00:12:22,350
interface

00:12:25,520 --> 00:12:31,310
then no except is Eric's case you need

00:12:29,660 --> 00:12:36,950
you just need to install

00:12:31,310 --> 00:12:43,070
xtp program on beast and in xcp direct

00:12:36,950 --> 00:12:45,370
case note that you need to install xcp

00:12:43,070 --> 00:12:50,680
on the pier of

00:12:45,370 --> 00:12:53,620
XTP direct target fees device otherwise

00:12:50,680 --> 00:12:57,370
the redirect packets will be dropped

00:12:53,620 --> 00:13:01,600
because the NAP Chandra is not ready

00:12:57,370 --> 00:13:01,600
when XDP is not installed

00:13:04,090 --> 00:13:11,140
so performance numbers

00:13:07,660 --> 00:13:18,190
I used two machines which has 20 course

00:13:11,140 --> 00:13:24,640
and 25 year bit Ethernet NIC XS p71 and

00:13:18,190 --> 00:13:28,240
kind of about 20 point 13 there are

00:13:24,640 --> 00:13:32,140
three test patterns in all tests I use

00:13:28,240 --> 00:13:35,320
packaging to generate traffic and the

00:13:32,140 --> 00:13:40,450
receiver side the fine ik redirects

00:13:35,320 --> 00:13:45,220
packets to this by xep direct and in

00:13:40,450 --> 00:13:50,310
drop test the PDF this device just drops

00:13:45,220 --> 00:13:55,000
the pockets in TX test that this device

00:13:50,310 --> 00:14:00,610
returns xt p TX and it the peel drops

00:13:55,000 --> 00:14:03,550
the packet and in the direct case the p

00:14:00,610 --> 00:14:08,020
device resulted packets to another pair

00:14:03,550 --> 00:14:10,960
of these devices and the point will be

00:14:08,020 --> 00:14:13,290
dropped at the destination of each

00:14:10,960 --> 00:14:13,290
device

00:14:14,000 --> 00:14:23,649
so the results is like this so

00:14:25,000 --> 00:14:36,910
the one float test shows that native xjp

00:14:31,900 --> 00:14:43,600
drop test achieves 10 mega PPS with one

00:14:36,910 --> 00:14:47,800
goal and 7 mega PPS in XTP TX on the

00:14:43,600 --> 00:14:53,550
dark test while generic xdp achieves

00:14:47,800 --> 00:14:59,520
only two mega PPS in each test and in

00:14:53,550 --> 00:14:59,520
100 flow test which is a 20 course

00:14:59,700 --> 00:15:11,430
native xjp

00:15:02,220 --> 00:15:11,430
achieves almost 2500 speed challenges

00:15:11,470 --> 00:15:19,690
the first one is improving XD BTX

00:15:14,590 --> 00:15:22,720
performers actually except etx in

00:15:19,690 --> 00:15:26,410
vizelex but processing so currently

00:15:22,720 --> 00:15:28,840
acquiring Q log pas pocket so this is

00:15:26,410 --> 00:15:30,790
not efficient and my private

00:15:28,840 --> 00:15:32,110
experimental path shows team passing

00:15:30,790 --> 00:15:38,350
booze - it's bad

00:15:32,110 --> 00:15:41,580
so our upstream a traitor and the second

00:15:38,350 --> 00:15:47,740
one is more intuitive way to enable xep

00:15:41,580 --> 00:15:50,170
DIRECTV's so as I explained you need to

00:15:47,740 --> 00:15:53,290
install XD p on the peer device

00:15:50,170 --> 00:16:00,100
otherwise packets will be dropped this

00:15:53,290 --> 00:16:05,460
is not intuitive so I think more into -

00:16:00,100 --> 00:16:05,460
where is sorry in some way

00:16:05,860 --> 00:16:16,870
and the last fights xvp vital switch for

00:16:11,530 --> 00:16:21,460
containers so we need xep direct between

00:16:16,870 --> 00:16:25,300
Fi and these devices so some kind of

00:16:21,460 --> 00:16:33,820
control plane is necessary like obvious

00:16:25,300 --> 00:16:37,840
or p4 c XE b okay so the next topic is

00:16:33,820 --> 00:16:44,580
FX DP support for this this is Williams

00:16:37,840 --> 00:16:49,900
walk this is mainly for alpha which

00:16:44,580 --> 00:16:52,990
extra P date path so FX DP is a

00:16:49,900 --> 00:16:57,850
mechanism that allowed redirecting role

00:16:52,990 --> 00:17:02,140
x TP friends into user space and it had

00:16:57,850 --> 00:17:05,860
zero copy mode which can directly demon

00:17:02,140 --> 00:17:11,070
to use as powerful which is currently

00:17:05,860 --> 00:17:11,070
supported by I for TN x DV

00:17:11,430 --> 00:17:20,870
so this can be used for of increase each

00:17:17,600 --> 00:17:20,870
data path

00:17:23,419 --> 00:17:32,190
always use a space has existing user

00:17:28,049 --> 00:17:39,780
space to the past so we can reuse it by

00:17:32,190 --> 00:17:42,900
using a FX EP so with the FX DP package

00:17:39,780 --> 00:17:46,409
can be forwarded from drivers to use a

00:17:42,900 --> 00:17:50,159
space and use a space careful at the

00:17:46,409 --> 00:17:53,429
pocket to another device the problem is

00:17:50,159 --> 00:17:58,640
no water puts up with the FX d p0 comfy

00:17:53,429 --> 00:18:02,070
mode so this is more detailed

00:17:58,640 --> 00:18:03,780
explanation so obvious receive packets

00:18:02,070 --> 00:18:06,960
from if it's called physical device

00:18:03,780 --> 00:18:09,950
using FX EP and flow entry decides to

00:18:06,960 --> 00:18:12,870
work to a but repose for example a

00:18:09,950 --> 00:18:16,530
vsport connected to another container or

00:18:12,870 --> 00:18:21,320
a top or top we host port connecting to

00:18:16,530 --> 00:18:25,110
other VM but without effective support

00:18:21,320 --> 00:18:26,460
packet have to be copied and you reject

00:18:25,110 --> 00:18:29,640
to the Connie

00:18:26,460 --> 00:18:34,039
so this drops performance English

00:18:29,640 --> 00:18:34,039
country so

00:18:34,320 --> 00:18:45,289
William proposed RFC's for VCF XDP and

00:18:39,090 --> 00:18:46,979
always f xt p th path respectively so

00:18:45,289 --> 00:18:51,610
check them later

00:18:46,979 --> 00:19:00,510
please okay

00:18:51,610 --> 00:19:00,510
so this is not about FX TP but OVS xdp

00:19:01,080 --> 00:19:15,220
so FX CP database is proposed because x

00:19:11,290 --> 00:19:21,820
DP implementation of obviously the path

00:19:15,220 --> 00:19:25,990
is full implementation is pain so we use

00:19:21,820 --> 00:19:28,710
the user space data path to get the full

00:19:25,990 --> 00:19:28,710
flexibility

00:19:29,930 --> 00:19:40,460
it's good but it has some downside that

00:19:36,320 --> 00:19:44,690
it needs packet copy in userspace really

00:19:40,460 --> 00:19:50,960
directing even with 0qp mode so because

00:19:44,690 --> 00:19:58,220
the recovery mode can avoid copying in

00:19:50,960 --> 00:20:06,230
kind but not in user space so I'm

00:19:58,220 --> 00:20:09,770
thinking there could be another idea to

00:20:06,230 --> 00:20:13,850
achieve high speed xjp obvious

00:20:09,770 --> 00:20:17,330
implementation by partially of flawed

00:20:13,850 --> 00:20:20,809
obviously xjp so this doesn't achieve

00:20:17,330 --> 00:20:27,070
full flexibility but just speed up the

00:20:20,809 --> 00:20:33,020
obvious so one array it's reduced a TCO

00:20:27,070 --> 00:20:40,429
offload mechanism to overall obvious to

00:20:33,020 --> 00:20:42,050
xjp in this case the implementation will

00:20:40,429 --> 00:20:46,640
be similar to

00:20:42,050 --> 00:20:51,170
VP filter so using you may umh to insult

00:20:46,640 --> 00:20:54,290
xcp program and this requires a minimal

00:20:51,170 --> 00:20:56,870
set of actions supported and unsupported

00:20:54,290 --> 00:21:02,270
flows will be passed to a poly upon

00:20:56,870 --> 00:21:09,080
visits module well we can implement this

00:21:02,270 --> 00:21:12,140
in all ways user space PhD I'm not

00:21:09,080 --> 00:21:20,540
checking the feasibility of these

00:21:12,140 --> 00:21:24,200
approaches so summary this native XTP

00:21:20,540 --> 00:21:25,400
support is available since kind of 4.19

00:21:24,200 --> 00:21:29,240
which improves

00:21:25,400 --> 00:21:33,980
xep performance in containers achieves

00:21:29,240 --> 00:21:37,700
TMI PPS with one core it can be used for

00:21:33,980 --> 00:21:41,090
substructure chain and a FX DP is

00:21:37,700 --> 00:21:46,570
working progress this can be used for

00:21:41,090 --> 00:21:46,570
obvious in question

00:21:50,460 --> 00:21:54,679
yeah you did okay yeah

00:21:57,220 --> 00:22:01,830
so could you go back to slide 21

00:22:02,990 --> 00:22:06,880
Pizza I'm 21

00:22:08,110 --> 00:22:14,900
perfect okay so I just had a quick

00:22:10,520 --> 00:22:18,050
question on the you probably didn't need

00:22:14,900 --> 00:22:20,690
20 cores to achieve the saturation that

00:22:18,050 --> 00:22:21,790
the transmitter was sending right like

00:22:20,690 --> 00:22:24,530
you probably could have done it with

00:22:21,790 --> 00:22:28,580
four or five maybe is that right

00:22:24,530 --> 00:22:31,030
or did you need 20 cores so in the

00:22:28,580 --> 00:22:34,730
second graph you have the used 20 course

00:22:31,030 --> 00:22:37,190
to achieve the the line rate you

00:22:34,730 --> 00:22:41,030
probably did you did you only need maybe

00:22:37,190 --> 00:22:44,390
four or five to get okay that that gets

00:22:41,030 --> 00:22:46,370
native or that gets generic up higher 20

00:22:44,390 --> 00:22:48,830
gives you generic close to the top right

00:22:46,370 --> 00:22:52,550
but with Native you need just maybe five

00:22:48,830 --> 00:22:55,940
yeah okay actually had another question

00:22:52,550 --> 00:23:00,220
to on hopefully I get my quota of two on

00:22:55,940 --> 00:23:03,230
the next slide on 22 you mentioned that

00:23:00,220 --> 00:23:05,720
I've seen this same issue or seen

00:23:03,230 --> 00:23:09,070
similar issues with the kernel path and

00:23:05,720 --> 00:23:12,590
the Q locking causing causing problems

00:23:09,070 --> 00:23:14,240
does that driver not allocate a second

00:23:12,590 --> 00:23:19,910
set of transmit queues so you can do

00:23:14,240 --> 00:23:24,490
lock lists transmit which so which lock

00:23:19,910 --> 00:23:27,490
the queue lock per packet yes

00:23:24,490 --> 00:23:27,490
so

00:23:31,460 --> 00:23:40,870
so I added our excuse for this and it

00:23:36,770 --> 00:23:46,210
has looks so out on the received a body

00:23:40,870 --> 00:23:46,210
okay okay all right no more questions

00:23:47,500 --> 00:23:52,880
somebody super next but but he cannot

00:23:50,540 --> 00:23:55,550
guarantee there's a CPU there's no

00:23:52,880 --> 00:23:57,590
binding for food you have to have the

00:23:55,550 --> 00:24:00,020
same amount of receive cues as CPUs

00:23:57,590 --> 00:24:03,530
before you can do it but I implement it

00:24:00,020 --> 00:24:06,380
so we do parking of 16 packets right now

00:24:03,530 --> 00:24:10,820
we can increase that if you like that's

00:24:06,380 --> 00:24:13,610
were xtv direct yes but that'd take

00:24:10,820 --> 00:24:15,560
you're not getting that patching but for

00:24:13,610 --> 00:24:19,610
the HTTP redirect I've implemented so

00:24:15,560 --> 00:24:25,610
it's doing 16 parking so the problem is

00:24:19,610 --> 00:24:28,760
the xev TX TX giant chunk used yeah but

00:24:25,610 --> 00:24:32,440
yeah but it's implementation detail we

00:24:28,760 --> 00:24:32,440
can begin to patching by another droid

00:24:33,950 --> 00:24:40,790
I can ask a question so go back to the

00:24:38,630 --> 00:24:43,100
diagram where we have time so about 4

00:24:40,790 --> 00:24:45,380
minutes way of showing the experiments

00:24:43,100 --> 00:24:47,180
the different experiments I just want to

00:24:45,380 --> 00:24:50,900
say thank you for implemented for for

00:24:47,180 --> 00:24:52,430
vhh I used it in my in my workshop it

00:24:50,900 --> 00:24:54,680
was really really great that you can

00:24:52,430 --> 00:24:57,020
agree you can actually just spawn up the

00:24:54,680 --> 00:24:58,880
BJ's devices and play with x2p without

00:24:57,020 --> 00:25:02,390
having access to the physical hardware

00:24:58,880 --> 00:25:04,460
and still play with native x2p which is

00:25:02,390 --> 00:25:07,130
really pretty nice to get a development

00:25:04,460 --> 00:25:09,710
environment running on your your laptop

00:25:07,130 --> 00:25:14,030
yes thank you for doing that

00:25:09,710 --> 00:25:20,120
yeah so just show the diagram showing

00:25:14,030 --> 00:25:22,030
the different pitch day we keep going

00:25:20,120 --> 00:25:26,140
next

00:25:22,030 --> 00:25:32,300
yeah so this use case the experiments

00:25:26,140 --> 00:25:33,590
this okay so this one is I was just

00:25:32,300 --> 00:25:36,230
wondering I know this is a talk what we

00:25:33,590 --> 00:25:38,510
eat but I was just wondering if you

00:25:36,230 --> 00:25:41,450
it's about Vieth and containers I guess

00:25:38,510 --> 00:25:44,900
yes but if you had to say done Mac

00:25:41,450 --> 00:25:48,820
villain or the new proposal from or and

00:25:44,900 --> 00:25:51,860
the Mellanox guys I assigned a cue pair

00:25:48,820 --> 00:25:52,610
for the container and moved it into the

00:25:51,860 --> 00:25:54,350
container and then put

00:25:52,610 --> 00:25:56,600
xdp there what kind of performance do

00:25:54,350 --> 00:26:00,860
you have you tried any mat feel and for

00:25:56,600 --> 00:26:03,760
example you mentioned xqe yeah and then

00:26:00,860 --> 00:26:06,680
you put xtp on mac finland i I didn't

00:26:03,760 --> 00:26:08,570
yeah I'm curious when you when you get a

00:26:06,680 --> 00:26:09,800
chance if you can test that but he's

00:26:08,570 --> 00:26:13,130
talking about it said you're talking

00:26:09,800 --> 00:26:14,620
about VMs now no no Mac villain for

00:26:13,130 --> 00:26:21,880
containers okay

00:26:14,620 --> 00:26:23,380
yeah yep so basically if I understand

00:26:21,880 --> 00:26:25,120
you're talking about running XTP in the

00:26:23,380 --> 00:26:26,040
container but sitting on top of some

00:26:25,120 --> 00:26:29,170
hardware queues

00:26:26,040 --> 00:26:31,150
okay so that might be nice but in the

00:26:29,170 --> 00:26:34,210
service chaining case the problem you

00:26:31,150 --> 00:26:36,730
run into is then to go to the second

00:26:34,210 --> 00:26:38,440
container you'll have to bounce it to

00:26:36,730 --> 00:26:40,050
the cues from back end and this is not

00:26:38,440 --> 00:26:42,309
going to be good

00:26:40,050 --> 00:26:45,180
well the PTR is going to be slower than

00:26:42,309 --> 00:26:45,180
your memory bandwidth

00:26:50,850 --> 00:26:55,429
I'm just saying that this would be an

00:26:52,980 --> 00:26:57,469
issue that will come up

00:26:55,429 --> 00:27:01,479
so the shared bus is going to be a

00:26:57,469 --> 00:27:04,940
problem but I'll be curious still

00:27:01,479 --> 00:27:07,969
already your your system can support I

00:27:04,940 --> 00:27:09,529
said you said infinite queues okay but

00:27:07,969 --> 00:27:12,619
what about if if we were to bounce

00:27:09,529 --> 00:27:15,619
between containers on the bus that that

00:27:12,619 --> 00:27:17,479
is still shared you won't be able to as

00:27:15,619 --> 00:27:21,289
the number of containers grows you

00:27:17,479 --> 00:27:27,190
you're not gonna scale yes he has to

00:27:21,289 --> 00:27:27,190
think about it no

00:27:28,390 --> 00:27:35,040
so yes it's supporting and you can

00:27:31,510 --> 00:27:37,660
support a 100 Gig this is not a problem

00:27:35,040 --> 00:27:40,330
we even you know get some customer

00:27:37,660 --> 00:27:44,950
that's asked for ask instead of using

00:27:40,330 --> 00:27:47,650
the video to use Lobeck on the PCI for

00:27:44,950 --> 00:27:50,640
pockets between VMs because it's even

00:27:47,650 --> 00:27:50,640
more efficient sometime

00:27:51,020 --> 00:27:55,430
points I'm windows making is it's you're

00:27:53,690 --> 00:27:56,900
gonna hit the highway bottleneck the

00:27:55,430 --> 00:27:58,700
hard was gonna become a bottleneck at

00:27:56,900 --> 00:28:00,680
some point or as if you're just copping

00:27:58,700 --> 00:28:02,650
like this you're using memory bandwidth

00:28:00,680 --> 00:28:05,090
on this on the host so it's cheaper

00:28:02,650 --> 00:28:07,150
that's the argument here right so maybe

00:28:05,090 --> 00:28:13,010
next Nate Dave someone can write a paper

00:28:07,150 --> 00:28:17,120
any other you show example of using

00:28:13,010 --> 00:28:21,740
obvious with xdp and instead of using a

00:28:17,120 --> 00:28:24,230
TC flower and do you believe what is

00:28:21,740 --> 00:28:27,820
they did you then test to see their

00:28:24,230 --> 00:28:32,060
difference between the performance sorry

00:28:27,820 --> 00:28:35,960
the question of yes offload with TC

00:28:32,060 --> 00:28:39,490
flower instead of a BPF instead of

00:28:35,960 --> 00:28:39,490
comparing two x to be

00:28:42,680 --> 00:28:45,670
af xev

00:28:51,970 --> 00:28:56,040
this one yes yes think that's

00:28:56,090 --> 00:29:03,030
did you do any pinch marks on on number

00:28:58,530 --> 00:29:04,950
two I know how no III really I prefer to

00:29:03,030 --> 00:29:06,930
a diversion to like instead of

00:29:04,950 --> 00:29:10,230
reemployment or instead of doing the AF

00:29:06,930 --> 00:29:13,050
xep stuff I actually prefer like during

00:29:10,230 --> 00:29:15,960
the other one the what you call the

00:29:13,050 --> 00:29:19,440
other like to talk to do a partial

00:29:15,960 --> 00:29:21,450
offload of obvious to to http because it

00:29:19,440 --> 00:29:24,330
fits the obvious model that you can have

00:29:21,450 --> 00:29:27,510
offloading in several layers and if if

00:29:24,330 --> 00:29:31,860
it HTP doesn't cannot find it it it will

00:29:27,510 --> 00:29:33,660
pass it on to the to the next layer so I

00:29:31,860 --> 00:29:35,490
think that's a better more clean

00:29:33,660 --> 00:29:38,040
approach I but I also like to see the

00:29:35,490 --> 00:29:41,220
benchmarks of it of those and if you

00:29:38,040 --> 00:29:45,110
have TC flower that's ever hard ROFL and

00:29:41,220 --> 00:29:45,110
you can get it very fast

00:29:45,370 --> 00:29:53,019
so this is just an idea so I I haven't

00:29:49,960 --> 00:29:55,870
to test it implements so you have three

00:29:53,019 --> 00:30:01,870
mm I think you have several benchmarks

00:29:55,870 --> 00:30:07,510
to test well any more questions or we

00:30:01,870 --> 00:30:09,190
can let the hockey off the hook okay

00:30:07,510 --> 00:30:13,109
all right thank you everybody

00:30:09,190 --> 00:30:13,109

YouTube URL: https://www.youtube.com/watch?v=q3gjNe6LKDI


