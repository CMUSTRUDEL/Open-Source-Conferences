Title: Netdev 0x12 - Introduction to FRRouting - Tutorial
Publication date: 2018-07-31
Playlist: Netdev 0x12
Description: 
	In this 1.5 hour instructor-led tutorial, Donald Sharp (FRRouting maintainer) started by introducing the FRRouting Suite to the uninitiated. He then guided us into a basic network configuration.

In the second half of the tutorial, Donald delved deeper into more advanced features on how FRR fits into the classic Data Centre architecture.

This tutorial was given on July 11th, 2018 at Netdev 0x12 in Montreal.

More info:
https://www.netdevconf.org/0x12/session.html?introduction-to-frrouting
Captions: 
	00:00:11,350 --> 00:00:19,670
guess are we ready to go yeah that's

00:00:19,189 --> 00:00:24,200
fine

00:00:19,670 --> 00:00:27,470
welcome everyone i'm donald sharp work

00:00:24,200 --> 00:00:31,520
for chemos networks and i'm gonna talk

00:00:27,470 --> 00:00:33,020
to you today about FR Rowden i can make

00:00:31,520 --> 00:00:35,950
go to the next slide there we go

00:00:33,020 --> 00:00:39,079
so we're gonna cover we're gonna cover

00:00:35,950 --> 00:00:42,410
how far out and came to be and then some

00:00:39,079 --> 00:00:44,179
basic routing and then advanced data

00:00:42,410 --> 00:00:46,160
center out and and finally we're going

00:00:44,179 --> 00:00:53,600
to talk a little bit about where i hope

00:00:46,160 --> 00:00:54,579
to take FR out and in the future so what

00:00:53,600 --> 00:00:57,890
is it

00:00:54,579 --> 00:00:59,570
it's just another routing stack it's the

00:00:57,890 --> 00:01:03,949
same thing that you can get from all the

00:00:59,570 --> 00:01:07,390
other major vendors today development is

00:01:03,949 --> 00:01:07,390
supported by a large number of companies

00:01:08,470 --> 00:01:14,300
configuration is actually really similar

00:01:11,420 --> 00:01:15,500
to other vendors there's two different

00:01:14,300 --> 00:01:17,149
ways you can configure it you can

00:01:15,500 --> 00:01:21,259
actually configure from both a file and

00:01:17,149 --> 00:01:25,909
interactive CLI FRR runs natively on

00:01:21,259 --> 00:01:27,380
linux and many other platforms the the

00:01:25,909 --> 00:01:29,630
one caveat there is that all features

00:01:27,380 --> 00:01:33,409
actually only work on Linux um that's

00:01:29,630 --> 00:01:36,049
not true for all other UNIX is BSD and

00:01:33,409 --> 00:01:38,270
the BSD variants don't have all the

00:01:36,049 --> 00:01:40,579
features and and their networking stack

00:01:38,270 --> 00:01:46,250
is not newer as advanced as what Linux

00:01:40,579 --> 00:01:48,320
is fr Allen actually uses the kernel the

00:01:46,250 --> 00:01:50,750
kernels route and stack for packet

00:01:48,320 --> 00:01:54,140
forwarding where control plane we don't

00:01:50,750 --> 00:01:58,340
doing that um and finally we're gplv2

00:01:54,140 --> 00:01:59,539
plus that's effectively means that we

00:01:58,340 --> 00:02:03,049
have a couple other license that are

00:01:59,539 --> 00:02:07,609
compatible with Fri me with GPL that are

00:02:03,049 --> 00:02:10,280
being used as well so so weird

00:02:07,609 --> 00:02:14,270
FR out and come from it all started

00:02:10,280 --> 00:02:20,870
around in 1996 with with a route and

00:02:14,270 --> 00:02:22,430
suite called zebra and in 2002 FR allen

00:02:20,870 --> 00:02:23,460
was I'm sorry quagga was forked from

00:02:22,430 --> 00:02:25,560
zebra

00:02:23,460 --> 00:02:29,340
and that continued on until 2016 where

00:02:25,560 --> 00:02:31,680
we forked from quagga and our first

00:02:29,340 --> 00:02:34,770
release was actually in January of 2017

00:02:31,680 --> 00:02:38,850
with version 2 oh and now we're up to

00:02:34,770 --> 00:02:43,410
version 5 basically a year and a half

00:02:38,850 --> 00:02:44,580
later later so why do we do it we

00:02:43,410 --> 00:02:47,490
actually wanted a faster paced

00:02:44,580 --> 00:02:51,800
development we wanted the ability to to

00:02:47,490 --> 00:02:54,210
work with people in the co-operative way

00:02:51,800 --> 00:02:56,100
we needed a CI system that wasn't

00:02:54,210 --> 00:02:59,370
available and we also wanted the ability

00:02:56,100 --> 00:03:02,010
for people to work fast and make

00:02:59,370 --> 00:03:03,860
mistakes and correct them in a timely

00:03:02,010 --> 00:03:06,060
manner

00:03:03,860 --> 00:03:08,490
we also really want to community

00:03:06,060 --> 00:03:12,960
consensus on the the features and and

00:03:08,490 --> 00:03:14,550
how we did the work together and this is

00:03:12,960 --> 00:03:18,990
all under the auspices of the Linux

00:03:14,550 --> 00:03:22,290
Foundation all right so this is the

00:03:18,990 --> 00:03:26,250
basic new work that we've done the first

00:03:22,290 --> 00:03:29,040
five items babel yard your P n HR PD PBR

00:03:26,250 --> 00:03:31,410
and LD PD our new demons since we forked

00:03:29,040 --> 00:03:35,310
I'll get into those a little later what

00:03:31,410 --> 00:03:38,490
they are how they work home we've added

00:03:35,310 --> 00:03:42,840
large communities a bunch of upnc VPN

00:03:38,490 --> 00:03:44,880
support rpki which is a public key

00:03:42,840 --> 00:03:48,750
infrastructure for route Veritate

00:03:44,880 --> 00:03:54,030
validation in bgp you can do MPLS based

00:03:48,750 --> 00:04:02,850
VPNs VPN ver for out leaking we've

00:03:54,030 --> 00:04:05,010
implemented 5549 RFC 5545 so that's

00:04:02,850 --> 00:04:08,520
actually most of our work is actually in

00:04:05,010 --> 00:04:09,870
BGP and that's that is the focus of what

00:04:08,520 --> 00:04:15,420
most people are interested in actually

00:04:09,870 --> 00:04:19,859
currently it is is we've added a multi

00:04:15,420 --> 00:04:21,540
topology support and SPF back-off OSPF

00:04:19,859 --> 00:04:26,130
we've got experimental segments routing

00:04:21,540 --> 00:04:28,050
and also it also supports 55:49 we've

00:04:26,130 --> 00:04:31,650
got its sparse mode to PIM and we also

00:04:28,050 --> 00:04:35,980
added the ability to do verse both use

00:04:31,650 --> 00:04:38,590
in the device and namespaces

00:04:35,980 --> 00:04:40,600
the one caveat there is uh not all not

00:04:38,590 --> 00:04:42,700
all demons actually support Murph yet

00:04:40,600 --> 00:04:46,120
it's you can really use verse with BGP

00:04:42,700 --> 00:04:47,650
zebra PIM and OSPF currently and I don't

00:04:46,120 --> 00:04:49,570
actually have all the the new route and

00:04:47,650 --> 00:04:51,850
features listed you can go to the

00:04:49,570 --> 00:04:56,830
website at the bottom and see what we've

00:04:51,850 --> 00:04:58,870
added as well if you're interested so so

00:04:56,830 --> 00:05:01,600
where do you get fr out and we actually

00:04:58,870 --> 00:05:04,590
do most of work on github so you can go

00:05:01,600 --> 00:05:09,610
to a github Kham Kham i Ferelden FR are

00:05:04,590 --> 00:05:12,760
down on the source um we have a full we

00:05:09,610 --> 00:05:15,580
spend a lot of time recently working on

00:05:12,760 --> 00:05:17,590
our documentation so we've got a pretty

00:05:15,580 --> 00:05:19,840
good dev guide on how to build and and

00:05:17,590 --> 00:05:23,830
set up FR out and if you want to build

00:05:19,840 --> 00:05:27,580
from source we also have the ability for

00:05:23,830 --> 00:05:30,070
you to download RPM and deb deb RPM

00:05:27,580 --> 00:05:34,360
based in debian based packages for a

00:05:30,070 --> 00:05:36,610
wide variety of platforms these are the

00:05:34,360 --> 00:05:39,280
the packages that we actually provides

00:05:36,610 --> 00:05:44,550
you can download right now and the

00:05:39,280 --> 00:05:47,320
packages and i'm sorry distributions and

00:05:44,550 --> 00:05:53,200
versions that you can download the

00:05:47,320 --> 00:05:56,620
package in for right now so i list

00:05:53,200 --> 00:05:59,080
caveats for both bsd and solaris based

00:05:56,620 --> 00:06:00,810
systems kind of covered already but a

00:05:59,080 --> 00:06:04,780
lot of the new features that we've added

00:06:00,810 --> 00:06:07,980
do not work on those on the network

00:06:04,780 --> 00:06:07,980
stacks available on those platforms

00:06:10,930 --> 00:06:16,930
so with new features comes new

00:06:14,479 --> 00:06:19,610
dependencies on kernel feature versions

00:06:16,930 --> 00:06:22,729
so I just wanted to call out some of the

00:06:19,610 --> 00:06:24,650
the major dependencies that we've

00:06:22,729 --> 00:06:28,969
introduced in the last year or so year

00:06:24,650 --> 00:06:31,520
and a half if you're using verse and

00:06:28,969 --> 00:06:34,309
that depends on the l3m dev device which

00:06:31,520 --> 00:06:36,050
is for for the for for kernel for

00:06:34,309 --> 00:06:38,029
limited in for eight for full

00:06:36,050 --> 00:06:41,509
functionality I miss anything there

00:06:38,029 --> 00:06:42,279
David is that right yeah it's good

00:06:41,509 --> 00:06:46,399
enough

00:06:42,279 --> 00:06:48,740
so the okay that's fair territory

00:06:46,399 --> 00:06:52,479
David's right if 410 are higher for all

00:06:48,740 --> 00:06:52,479
bug fixes that were aware of currently

00:06:53,710 --> 00:07:02,169
BG bgp evpn support depends on the new

00:06:58,520 --> 00:07:04,309
NT f EXT learned net link message and

00:07:02,169 --> 00:07:07,729
also the ARP suppression feature

00:07:04,309 --> 00:07:12,219
available in 417 for the NT f EXT

00:07:07,729 --> 00:07:15,349
learned and 414 for our suppression

00:07:12,219 --> 00:07:19,449
tickets pim sm going we needed to

00:07:15,349 --> 00:07:22,580
actually add some RT and multicast

00:07:19,449 --> 00:07:24,349
excuse me RT and multicast net link

00:07:22,580 --> 00:07:26,209
messages upgrades so we can get a bit

00:07:24,349 --> 00:07:28,699
more data from the kernel and also we

00:07:26,209 --> 00:07:32,689
also needed to add a new call back via

00:07:28,699 --> 00:07:35,959
the pin socket which is IP m IP m GP

00:07:32,689 --> 00:07:41,180
message wrong verb hole to allow for l

00:07:35,959 --> 00:07:44,180
register packets to work all right so so

00:07:41,180 --> 00:07:46,550
once you've gotten FR out and compiled

00:07:44,180 --> 00:07:50,629
and ready to go well how do you how do

00:07:46,550 --> 00:07:52,759
you start it um it's it's pretty simple

00:07:50,629 --> 00:07:54,379
we've integrated with system control now

00:07:52,759 --> 00:07:58,189
you can just do the normal system

00:07:54,379 --> 00:08:00,080
control start/stop reload so I missed

00:07:58,189 --> 00:08:02,509
anything start/stop yep restarting

00:08:00,080 --> 00:08:04,580
reload it does what you actually think

00:08:02,509 --> 00:08:05,659
it should do the the one thing that's

00:08:04,580 --> 00:08:07,639
actually interesting that we've

00:08:05,659 --> 00:08:11,649
implemented is the reload feature if you

00:08:07,639 --> 00:08:15,199
modify the FR comp file which is the the

00:08:11,649 --> 00:08:17,509
configuration file for FR and then issue

00:08:15,199 --> 00:08:20,329
a system control reload it will take the

00:08:17,509 --> 00:08:22,550
the configuration file compare it to

00:08:20,329 --> 00:08:24,320
what you actually have runnin versus

00:08:22,550 --> 00:08:30,140
that file and apply the diff so you

00:08:24,320 --> 00:08:31,730
get consistent and here is the an

00:08:30,140 --> 00:08:34,970
example on the side here the system

00:08:31,730 --> 00:08:36,740
control start fr and and the vty shell

00:08:34,970 --> 00:08:44,570
is the interactive shell that people can

00:08:36,740 --> 00:08:47,390
use typically one of the first things

00:08:44,570 --> 00:08:50,090
that people ask me after they've got it

00:08:47,390 --> 00:08:50,660
up and running is what the heck's going

00:08:50,090 --> 00:08:55,850
on

00:08:50,660 --> 00:08:58,340
where did my login go that's been one of

00:08:55,850 --> 00:08:59,870
the harder points to get across if

00:08:58,340 --> 00:09:02,510
you're not sure where your login is

00:08:59,870 --> 00:09:05,870
going type show login inside a VTR shell

00:09:02,510 --> 00:09:08,900
and it will tell you where each demon

00:09:05,870 --> 00:09:10,010
thinks it's sending its output to it's

00:09:08,900 --> 00:09:12,950
actually kind of important because

00:09:10,010 --> 00:09:14,180
people can't find it sometimes then we

00:09:12,950 --> 00:09:18,380
actually support three different types

00:09:14,180 --> 00:09:20,330
of destinations you can send the output

00:09:18,380 --> 00:09:22,340
straight to syslog you can log it to a

00:09:20,330 --> 00:09:24,230
file or you can log it to standard out

00:09:22,340 --> 00:09:25,370
standard out really is only useful for a

00:09:24,230 --> 00:09:29,110
developer and you're doing some

00:09:25,370 --> 00:09:31,430
debugging it's not for production usage

00:09:29,110 --> 00:09:34,400
the other common question that people

00:09:31,430 --> 00:09:37,880
ask is why does my log file have no

00:09:34,400 --> 00:09:41,060
output we've actually designed FR out

00:09:37,880 --> 00:09:43,760
and to not be chatty unless the bugs

00:09:41,060 --> 00:09:46,670
have turned on this is mainly because

00:09:43,760 --> 00:09:48,860
there are a lot of platforms that f

00:09:46,670 --> 00:09:53,120
around is run on they don't have good

00:09:48,860 --> 00:09:56,900
hard drives or SSDs disk or whatever

00:09:53,120 --> 00:10:00,080
they are SD yeah sorry

00:09:56,900 --> 00:10:03,170
and if you're not sure what to figure

00:10:00,080 --> 00:10:05,510
out what's going wrong under v2i shell

00:10:03,170 --> 00:10:06,860
type debug protocol name and question

00:10:05,510 --> 00:10:09,290
mark and they'll tell you the different

00:10:06,860 --> 00:10:10,820
types of debug and you can turn on which

00:10:09,290 --> 00:10:14,840
will go to your lot where you set your

00:10:10,820 --> 00:10:16,250
log fault your login to go to that's one

00:10:14,840 --> 00:10:17,330
of the first things that I do I don't

00:10:16,250 --> 00:10:19,130
always remember all the debugging

00:10:17,330 --> 00:10:20,540
commands I just know that I can hit

00:10:19,130 --> 00:10:23,540
question mark will get which will give

00:10:20,540 --> 00:10:26,840
me help and that's actually true as an

00:10:23,540 --> 00:10:31,150
aside if you want help on any command

00:10:26,840 --> 00:10:31,150
question mark and tab are your friends

00:10:32,380 --> 00:10:42,400
so so how does that for our work we have

00:10:37,690 --> 00:10:46,960
a demon called zebra which provides the

00:10:42,400 --> 00:10:49,860
rib functionality and control of of what

00:10:46,960 --> 00:10:52,780
gets inserted into the kernel so so a

00:10:49,860 --> 00:10:56,530
routing protocol like BGP are SPF they

00:10:52,780 --> 00:10:58,210
all connect to zebra and they do things

00:10:56,530 --> 00:11:02,050
like install tell zebra to install

00:10:58,210 --> 00:11:05,740
routes and zebra takes that and talks to

00:11:02,050 --> 00:11:07,750
the Linux kernel via the net link bus to

00:11:05,740 --> 00:11:08,920
install those routes the one interesting

00:11:07,750 --> 00:11:12,220
thing about zebra is that we actually

00:11:08,920 --> 00:11:14,290
have two net link sockets once for just

00:11:12,220 --> 00:11:16,540
listening for new net link data from the

00:11:14,290 --> 00:11:23,560
kernel and once we're actually sending

00:11:16,540 --> 00:11:27,120
commands down alright so in the previous

00:11:23,560 --> 00:11:27,120
how did the backwards

00:11:29,880 --> 00:11:35,569
sorry

00:11:32,339 --> 00:11:35,569
let me go back slide

00:11:38,750 --> 00:11:43,250
my my presentation fee was not great so

00:11:41,750 --> 00:11:44,660
in the previous slide actually if you if

00:11:43,250 --> 00:11:45,819
we go if we looked at it real quick

00:11:44,660 --> 00:11:48,949
there was a

00:11:45,819 --> 00:11:51,139
zappy protocol referenced that's the

00:11:48,949 --> 00:11:54,370
protocol that zebra and that all the

00:11:51,139 --> 00:11:57,550
rotten demons used to talk to each other

00:11:54,370 --> 00:11:59,660
so so why didn't we just use a net link

00:11:57,550 --> 00:12:00,850
that's a question that I get sometimes

00:11:59,660 --> 00:12:03,350
too as well

00:12:00,850 --> 00:12:05,149
when zappy was actually first written we

00:12:03,350 --> 00:12:09,009
didn't have the net link protocol in the

00:12:05,149 --> 00:12:11,149
Linux kernel so we had to have something

00:12:09,009 --> 00:12:14,230
additionally net link doesn't provide

00:12:11,149 --> 00:12:16,790
the same data communication needs that a

00:12:14,230 --> 00:12:19,569
routing daemon needs things like

00:12:16,790 --> 00:12:25,759
redistribution passing around router IDs

00:12:19,569 --> 00:12:28,939
turning off BFD next hops and passing

00:12:25,759 --> 00:12:30,259
around capabilities if you're interested

00:12:28,939 --> 00:12:33,740
in figuring out looking at more you can

00:12:30,259 --> 00:12:35,600
go into libs you client dot CH that's

00:12:33,740 --> 00:12:39,319
where we've defined the the zappy

00:12:35,600 --> 00:12:43,459
protocol and and how it works it's

00:12:39,319 --> 00:12:45,139
essentially just a stream of data being

00:12:43,459 --> 00:12:46,420
sent from the route and demons to each

00:12:45,139 --> 00:12:49,990
other

00:12:46,420 --> 00:12:53,600
and it uses named named sockets and

00:12:49,990 --> 00:12:56,779
right now it's only it's only really

00:12:53,600 --> 00:12:58,879
used to talk from FR demon to offer our

00:12:56,779 --> 00:13:01,610
demon and we actually do change the

00:12:58,879 --> 00:13:04,389
format quite often so so and it's just

00:13:01,610 --> 00:13:08,480
something to be aware of

00:13:04,389 --> 00:13:10,339
alright here's just a quick slide to

00:13:08,480 --> 00:13:15,620
give you places that you can learn more

00:13:10,339 --> 00:13:19,420
about a ferrata alright so I'm going to

00:13:15,620 --> 00:13:19,420
talk about basic router next

00:13:21,180 --> 00:13:30,570
why actually I'm just gonna skip this

00:13:23,580 --> 00:13:34,250
line so so why why Robin networks today

00:13:30,570 --> 00:13:37,050
are becoming increasingly complex and

00:13:34,250 --> 00:13:40,140
just adding a static route isn't going

00:13:37,050 --> 00:13:44,570
to cut it for doing for connecting

00:13:40,140 --> 00:13:47,760
computers together and additionally

00:13:44,570 --> 00:13:50,550
networks are not getting simpler with

00:13:47,760 --> 00:13:52,380
things like vm's and containers you're

00:13:50,550 --> 00:13:54,450
actually not starting to need to have

00:13:52,380 --> 00:13:58,290
the ability to route between VMs on the

00:13:54,450 --> 00:13:59,150
same host fr route and who allows you to

00:13:58,290 --> 00:14:01,770
do that

00:13:59,150 --> 00:14:03,360
so surround allows us to control all

00:14:01,770 --> 00:14:06,450
this chaos that can happen in network

00:14:03,360 --> 00:14:09,420
and and so one of the really great

00:14:06,450 --> 00:14:11,820
things about this is that Linux now has

00:14:09,420 --> 00:14:13,560
the ability to interact with the

00:14:11,820 --> 00:14:14,580
entirety of the network via

00:14:13,560 --> 00:14:18,150
standards-based approach

00:14:14,580 --> 00:14:22,200
so if you are using a Cisco or a huawei

00:14:18,150 --> 00:14:24,660
or a wrist for route and you can put fr

00:14:22,200 --> 00:14:28,130
route and on your post or on your server

00:14:24,660 --> 00:14:35,130
and and connect to those machines and

00:14:28,130 --> 00:14:39,120
get routing from them one of the other

00:14:35,130 --> 00:14:42,960
subtle differences between the Linux

00:14:39,120 --> 00:14:48,720
kernel and zebra is this idea of a RHIB

00:14:42,960 --> 00:14:51,570
versus fib so a rib is a rather than

00:14:48,720 --> 00:14:53,970
from a base it's commonly commonly

00:14:51,570 --> 00:14:56,520
called a control plane this is what fr

00:14:53,970 --> 00:14:58,440
Alden does that's when and what zebra

00:14:56,520 --> 00:15:00,510
actually does zebra is in charge of the

00:14:58,440 --> 00:15:03,240
RHIB it makes decisions about what gets

00:15:00,510 --> 00:15:05,100
installed and how its installed and the

00:15:03,240 --> 00:15:07,590
FIB or the foreign information base is

00:15:05,100 --> 00:15:10,410
the data plane this is the Linux kernel

00:15:07,590 --> 00:15:12,180
and in general when you talk about

00:15:10,410 --> 00:15:15,900
Rawdon there's this clear line between

00:15:12,180 --> 00:15:20,670
the rib and fib and who owns what at the

00:15:15,900 --> 00:15:23,340
bottom here is just a simple look at how

00:15:20,670 --> 00:15:25,730
the kernel and FRR both show the same

00:15:23,340 --> 00:15:25,730
information

00:15:30,889 --> 00:15:36,149
so so I I'm sure you're all familiar

00:15:33,629 --> 00:15:38,669
with when you do a IP route show on the

00:15:36,149 --> 00:15:41,549
Linux kernel one of the items that gives

00:15:38,669 --> 00:15:46,919
you as a metric in the Linux kernel uses

00:15:41,549 --> 00:15:50,939
that metric to decide which route to

00:15:46,919 --> 00:15:53,579
Ford you decide to what how to brow

00:15:50,939 --> 00:15:56,279
packets based upon the metric of the

00:15:53,579 --> 00:16:00,239
best metric well the problem with metric

00:15:56,279 --> 00:16:03,289
is that every single route in protocol

00:16:00,239 --> 00:16:06,149
has a different idea of what a metric is

00:16:03,289 --> 00:16:08,219
so like for instance rip here uses hop

00:16:06,149 --> 00:16:11,909
counts and is only allowed values

00:16:08,219 --> 00:16:16,829
between 1 and 16 ERP uses a composite

00:16:11,909 --> 00:16:19,109
metric which is a u nth 32t and OSPF is

00:16:16,829 --> 00:16:22,469
a link state distance which has a range

00:16:19,109 --> 00:16:26,099
of starting at 100 going up so so how

00:16:22,469 --> 00:16:31,949
does zebra decide what's the best metric

00:16:26,099 --> 00:16:33,199
to use so so routing protocols or route

00:16:31,949 --> 00:16:36,899
and suites have this idea of this

00:16:33,199 --> 00:16:39,239
administrative distance we've decided a

00:16:36,899 --> 00:16:43,589
per re that each route and protocol has

00:16:39,239 --> 00:16:45,329
a different distance so if rip and BGP

00:16:43,589 --> 00:16:49,859
both install the same route into the

00:16:45,329 --> 00:16:52,589
into zebra zebra is gonna look at those

00:16:49,859 --> 00:16:57,299
routes and decide that the BGP route is

00:16:52,589 --> 00:17:00,319
better based on its this administrative

00:16:57,299 --> 00:17:05,759
distance value we've assigned to it

00:17:00,319 --> 00:17:08,189
lowers winds and it's and it's a valid

00:17:05,759 --> 00:17:12,839
number between 0 & 2 & 55 I on the right

00:17:08,189 --> 00:17:14,459
hand side is the basic values that F our

00:17:12,839 --> 00:17:16,470
route and uses for administrative

00:17:14,459 --> 00:17:18,600
distance this is actually also

00:17:16,470 --> 00:17:21,659
consistent with pretty much every other

00:17:18,600 --> 00:17:23,399
vendor out there it's there is no

00:17:21,659 --> 00:17:28,189
standard here is just everyone's kind of

00:17:23,399 --> 00:17:28,189
agreed this is what it to use

00:17:30,760 --> 00:17:36,700
all right so so how do I determine what

00:17:33,799 --> 00:17:42,529
to install this is just an example slide

00:17:36,700 --> 00:17:45,919
I wanted to show a kernel route the K

00:17:42,529 --> 00:17:48,940
there on the left hand side the 4 3 2 1

00:17:45,919 --> 00:17:52,250
/ 3 - route is a Colonel Rall and the

00:17:48,940 --> 00:17:56,980
parentheses 255 8000 hundred ninety-two

00:17:52,250 --> 00:18:02,110
is the admin distance and metric and

00:17:56,980 --> 00:18:07,130
zebra if I enter a IP route 4 3 2 1 3 2

00:18:02,110 --> 00:18:11,120
I'll go on out interface E&P 0 s 10 that

00:18:07,130 --> 00:18:12,919
creates a static route in zebra so the

00:18:11,120 --> 00:18:15,590
decision zebra at that point time makes

00:18:12,919 --> 00:18:17,750
a decision that the static route has a

00:18:15,590 --> 00:18:20,029
better Advent distance and it selects it

00:18:17,750 --> 00:18:23,090
and you can tell that by the the greater

00:18:20,029 --> 00:18:25,070
than symbol that says a zebras decided

00:18:23,090 --> 00:18:27,429
that that's the one we want to use and

00:18:25,070 --> 00:18:29,899
on the right hand side is the colonel

00:18:27,429 --> 00:18:39,590
showing what the output of IP route show

00:18:29,899 --> 00:18:45,049
is all right so so with the Linux kernel

00:18:39,590 --> 00:18:49,970
anyone can put routes into the kernel

00:18:45,049 --> 00:18:53,210
and as a robin suite we have to be able

00:18:49,970 --> 00:18:55,639
to interpret those routes and figure out

00:18:53,210 --> 00:18:59,179
what Adam in distance they have so that

00:18:55,639 --> 00:19:01,730
if a routing protocol like BGP or OSPF

00:18:59,179 --> 00:19:06,200
or rip install the same route we have to

00:19:01,730 --> 00:19:08,630
know who wins so what we've done is that

00:19:06,200 --> 00:19:13,370
the kernel metric for routes that are

00:19:08,630 --> 00:19:16,159
not generated by fre Robin we interpret

00:19:13,370 --> 00:19:17,690
the kernel metric as a two pieces of

00:19:16,159 --> 00:19:20,120
information the high order byte becomes

00:19:17,690 --> 00:19:23,690
the admin distance and the low order

00:19:20,120 --> 00:19:25,789
byte becomes the metric and so so if you

00:19:23,690 --> 00:19:28,700
look at the exam peers we do an IPL to

00:19:25,789 --> 00:19:32,059
add four three two one three two dev en

00:19:28,700 --> 00:19:35,450
p0s nine metric four billion something

00:19:32,059 --> 00:19:38,210
and further right we have the the hex

00:19:35,450 --> 00:19:43,640
number that that translates to which is

00:19:38,210 --> 00:19:48,740
0 x FF 0 0 to 2000 so FF becomes 250

00:19:43,640 --> 00:19:53,930
and the metric of becomes 2,000 or 8,192

00:19:48,740 --> 00:19:55,880
decimal so so why is this important

00:19:53,930 --> 00:20:00,500
so if you're actually going to be using

00:19:55,880 --> 00:20:03,950
verse inside of Fr out and you need the

00:20:00,500 --> 00:20:08,150
ability to terminate I should actually

00:20:03,950 --> 00:20:13,310
take a step back so so of the Linux

00:20:08,150 --> 00:20:17,300
kernel has this concept of table lookup

00:20:13,310 --> 00:20:20,990
and rule lookup so when you tell the

00:20:17,300 --> 00:20:23,810
Linux kernel to do a lookup I'm sorry

00:20:20,990 --> 00:20:24,890
when a packet comes in and it has to do

00:20:23,810 --> 00:20:29,620
a lookup and it goes

00:20:24,890 --> 00:20:32,150
ah I need to look up in table 1,000 and

00:20:29,620 --> 00:20:36,740
from the IP will show we know what table

00:20:32,150 --> 00:20:41,840
to go to look at and if I'm using verse

00:20:36,740 --> 00:20:43,760
I do not I was i if I'm using burst I do

00:20:41,840 --> 00:20:47,180
not want that route search to leave that

00:20:43,760 --> 00:20:49,160
table because the Linux kernel will if

00:20:47,180 --> 00:20:52,400
you don't have a default unreachable

00:20:49,160 --> 00:20:55,280
route will go to the next table in this

00:20:52,400 --> 00:20:59,480
case so it would go to three 2007 or 65

00:20:55,280 --> 00:21:02,570
and then use rule 3 2006 to live then

00:20:59,480 --> 00:21:06,290
rule 3 3 2007 or 66 if it doesn't find a

00:21:02,570 --> 00:21:15,320
match and finally we're looking 3767 so

00:21:06,290 --> 00:21:18,560
what we've done is that we we've entered

00:21:15,320 --> 00:21:22,400
with the metric that we've installed the

00:21:18,560 --> 00:21:25,790
default unreachable route in in the

00:21:22,400 --> 00:21:32,270
kernel can be interpreted as a high end

00:21:25,790 --> 00:21:34,520
min distance and and because of that we

00:21:32,270 --> 00:21:37,520
also want the ability for FRL and to

00:21:34,520 --> 00:21:38,720
override that default route if some

00:21:37,520 --> 00:21:41,140
other router protocol wanted to put

00:21:38,720 --> 00:21:41,140
something in

00:21:43,630 --> 00:21:49,929
all right so I just kind of talked about

00:21:45,700 --> 00:21:52,860
verse and ephah Robin supports two

00:21:49,929 --> 00:21:52,860
different types of verbs

00:21:53,580 --> 00:22:00,160
there's the MuRF device

00:21:56,620 --> 00:22:02,350
okay I'm using I'm sorry I've skipped a

00:22:00,160 --> 00:22:03,700
slide here so there's a verse are

00:22:02,350 --> 00:22:06,370
separate tables for collection of

00:22:03,700 --> 00:22:10,630
different interfaces it provides layer

00:22:06,370 --> 00:22:13,690
three segmentation and and it also

00:22:10,630 --> 00:22:16,570
provides the ability for routing

00:22:13,690 --> 00:22:21,010
protocols to to install the same routes

00:22:16,570 --> 00:22:23,470
into different tables now why would you

00:22:21,010 --> 00:22:24,520
want to do this there's a whole bunch of

00:22:23,470 --> 00:22:26,289
different reasons but the main reason

00:22:24,520 --> 00:22:29,020
the main reasons that you you want to

00:22:26,289 --> 00:22:31,120
have the separation for some reason

00:22:29,020 --> 00:22:32,890
other say you have a telephone network

00:22:31,120 --> 00:22:36,130
and you have a data network you want

00:22:32,890 --> 00:22:39,159
them to use different routing tables I'm

00:22:36,130 --> 00:22:41,740
a provider and I have a whole bunch of

00:22:39,159 --> 00:22:43,570
customers that are connected to me and I

00:22:41,740 --> 00:22:44,799
don't want their route and those

00:22:43,570 --> 00:22:46,539
customers don't want their routing

00:22:44,799 --> 00:22:47,799
tables to be mixed and they don't want

00:22:46,539 --> 00:22:49,690
any of their packets to end up in the

00:22:47,799 --> 00:22:52,720
wrong place so that's what a verb

00:22:49,690 --> 00:22:56,289
provides you security segmentation I

00:22:52,720 --> 00:22:59,890
have a requirement from some security

00:22:56,289 --> 00:23:02,980
organization saying that these packets

00:22:59,890 --> 00:23:06,490
must stay on this network they cannot go

00:23:02,980 --> 00:23:09,190
anywhere else and the other reason for

00:23:06,490 --> 00:23:13,020
verse is I have an overlapping IP range

00:23:09,190 --> 00:23:13,020
from when two companies start to merge

00:23:13,590 --> 00:23:18,909
and it down at the bottom I have a link

00:23:16,240 --> 00:23:20,260
to two David a Hearns goofed Murph

00:23:18,909 --> 00:23:26,890
tutorial for how it's actually

00:23:20,260 --> 00:23:30,059
implemented in the Linux kernel so fr

00:23:26,890 --> 00:23:30,059
Allen actually has yes sorry

00:23:35,950 --> 00:23:40,490
just a question what said the difference

00:23:38,419 --> 00:23:52,330
between like practical difference

00:23:40,490 --> 00:23:55,159
between vrf and network namespaces so so

00:23:52,330 --> 00:23:58,159
the the practical difference is that a

00:23:55,159 --> 00:24:00,919
ver device creates a master device that

00:23:58,159 --> 00:24:06,019
you attach all the interfaces that you

00:24:00,919 --> 00:24:08,629
want to be in that verb to route lookup

00:24:06,019 --> 00:24:13,120
is done by the new rule insert into the

00:24:08,629 --> 00:24:18,110
kernel and allows and that causes the

00:24:13,120 --> 00:24:22,250
the murph device to cause the the FIB

00:24:18,110 --> 00:24:24,470
lookup to go to the correct table this

00:24:22,250 --> 00:24:26,210
also allows route leakin via just

00:24:24,470 --> 00:24:28,580
installing a route with appropriate

00:24:26,210 --> 00:24:30,889
outgoing next stop so lookups are

00:24:28,580 --> 00:24:32,960
extremely easy from a RHIB perspective

00:24:30,889 --> 00:24:35,889
and the other great so so the Linux

00:24:32,960 --> 00:24:42,200
kernel you specify next hops by a

00:24:35,889 --> 00:24:44,269
gateway and device tuple right and that

00:24:42,200 --> 00:24:49,789
can also you can also do just gateway by

00:24:44,269 --> 00:24:51,789
itself and a or device by itself but if

00:24:49,789 --> 00:24:55,100
I want to do route leakin across verse

00:24:51,789 --> 00:24:57,679
with the verve device I have to specify

00:24:55,100 --> 00:25:00,169
I have to specify an outgoing interface

00:24:57,679 --> 00:25:03,110
otherwise it will not work right all

00:25:00,169 --> 00:25:05,120
right so what is the namespace bye-bye

00:25:03,110 --> 00:25:07,519
you so the way namespaces work is that

00:25:05,120 --> 00:25:09,470
they you create the namespace and then

00:25:07,519 --> 00:25:13,399
you move your interfaces into that

00:25:09,470 --> 00:25:16,100
namespace route lookup is fairly similar

00:25:13,399 --> 00:25:20,419
it's the you look up in the default

00:25:16,100 --> 00:25:23,360
table for each namespace the real big

00:25:20,419 --> 00:25:26,870
caveat here is that route leakin can

00:25:23,360 --> 00:25:30,259
only be done by creating a bridge

00:25:26,870 --> 00:25:35,059
outside the namespace and installing

00:25:30,259 --> 00:25:38,210
taps into the different namespaces or I

00:25:35,059 --> 00:25:40,070
need to go to the front panel and where

00:25:38,210 --> 00:25:42,139
I've put those interfaces than different

00:25:40,070 --> 00:25:44,059
ones and plug the cable in between the

00:25:42,139 --> 00:25:46,370
two of them so that's how I can do leak

00:25:44,059 --> 00:25:48,919
in between verse and a namespace base

00:25:46,370 --> 00:25:51,020
that is totally heavyweight if I want to

00:25:48,919 --> 00:25:54,049
do more than a couple namespace more

00:25:51,020 --> 00:25:55,909
than a couple verse I all of a sudden

00:25:54,049 --> 00:25:59,210
have to manage a large number of bridges

00:25:55,909 --> 00:26:02,600
a large number of interfaces and I don't

00:25:59,210 --> 00:26:04,789
get easy route leaking by a simple route

00:26:02,600 --> 00:26:08,419
table lookup that the verb device

00:26:04,789 --> 00:26:12,500
provides you um so so again namespaces

00:26:08,419 --> 00:26:14,000
are like of Earth but not there are

00:26:12,500 --> 00:26:19,399
really heavy weight and I wouldn't

00:26:14,000 --> 00:26:21,580
recommend using them anything else yes

00:26:19,399 --> 00:26:21,580
sir

00:26:29,090 --> 00:26:34,610
hi as it possible to create the vrf

00:26:32,450 --> 00:26:36,710
interface directly from the FRR because

00:26:34,610 --> 00:26:39,260
i'm playing with it and i need to do it

00:26:36,710 --> 00:26:41,450
on system MD and then start there and

00:26:39,260 --> 00:26:45,620
then so that fat bill is not there right

00:26:41,450 --> 00:26:48,650
now and when we implemented the verve

00:26:45,620 --> 00:26:50,960
device the the verb in the verb

00:26:48,650 --> 00:26:53,330
functionality in FRL and we were under a

00:26:50,960 --> 00:26:57,200
heavy time pressure so it just wasn't

00:26:53,330 --> 00:27:01,370
done the cumulus where I work

00:26:57,200 --> 00:27:03,350
also has this idea that um you kind of

00:27:01,370 --> 00:27:06,350
render unto Caesar what what that

00:27:03,350 --> 00:27:09,380
belongs to Caesar and Murph's are an

00:27:06,350 --> 00:27:11,920
interface and interface control and

00:27:09,380 --> 00:27:13,760
creation is controlled by a peer out to

00:27:11,920 --> 00:27:16,990
that's kind of the decision we made

00:27:13,760 --> 00:27:19,820
David you know I do that on purpose

00:27:16,990 --> 00:27:24,050
other question is nuts related to the RF

00:27:19,820 --> 00:27:26,270
but featured demands for be FD is there

00:27:24,050 --> 00:27:27,770
a future for there's a pull request for

00:27:26,270 --> 00:27:33,200
it right now there's actually two

00:27:27,770 --> 00:27:35,420
different ways so currently you can get

00:27:33,200 --> 00:27:39,430
BFD integration if you go to the cumulus

00:27:35,420 --> 00:27:42,710
github page and download the PTM package

00:27:39,430 --> 00:27:45,760
and you know that kind of sucks for a

00:27:42,710 --> 00:27:48,910
lot of reasons right so yeah it sucks

00:27:45,760 --> 00:27:51,620
it's that the integrations harder

00:27:48,910 --> 00:27:56,480
there's a the gentleman named Raphael

00:27:51,620 --> 00:27:59,510
Zulema who's taken that PTM code PTM BFD

00:27:56,480 --> 00:28:02,000
code and has started integrated into a

00:27:59,510 --> 00:28:03,800
Ferrara and there's a pull request right

00:28:02,000 --> 00:28:06,650
now that were working on trying to get

00:28:03,800 --> 00:28:09,590
in so hopefully the next month or so

00:28:06,650 --> 00:28:12,610
we'll have BFD support directly inside

00:28:09,590 --> 00:28:12,610
of if i route it

00:28:14,490 --> 00:28:21,880
just to add some additional words so the

00:28:18,250 --> 00:28:25,540
request to add the ability for vo FRR to

00:28:21,880 --> 00:28:29,500
create VRS the decision at the time as I

00:28:25,540 --> 00:28:31,360
recall was you don't use FR r to creat

00:28:29,500 --> 00:28:34,240
things like bridges which are connecting

00:28:31,360 --> 00:28:35,350
lis devices for layer 2 so the decision

00:28:34,240 --> 00:28:37,960
was like well let's not do the same

00:28:35,350 --> 00:28:40,870
thing for VR F so that way you have an

00:28:37,960 --> 00:28:42,520
interface manager whose job is to create

00:28:40,870 --> 00:28:46,270
the different networking features like

00:28:42,520 --> 00:28:48,520
bonds Mac VLANs bridges burps and its

00:28:46,270 --> 00:28:51,580
job is to connect them all together so

00:28:48,520 --> 00:28:53,890
it's it is something that could be done

00:28:51,580 --> 00:28:55,360
because it's a routing concept but at

00:28:53,890 --> 00:28:56,980
the same time and see how the argument

00:28:55,360 --> 00:28:59,080
is that it's you're connecting a series

00:28:56,980 --> 00:29:01,810
of devices together which becomes more

00:28:59,080 --> 00:29:03,670
of an interface manager domain so that's

00:29:01,810 --> 00:29:06,520
that was part of the argument as well

00:29:03,670 --> 00:29:07,660
exactly render unto Caesar yeah at which

00:29:06,520 --> 00:29:09,550
point and then about the network

00:29:07,660 --> 00:29:11,500
namespaces when you look at what a

00:29:09,550 --> 00:29:14,440
network namespace is it's not just

00:29:11,500 --> 00:29:15,850
routing tables so the idea of ER F is

00:29:14,440 --> 00:29:17,470
just to have multiple routing tables

00:29:15,850 --> 00:29:19,540
which is essentially a policy based

00:29:17,470 --> 00:29:21,180
routing to say these lookups go to this

00:29:19,540 --> 00:29:23,620
table these like let's go to that table

00:29:21,180 --> 00:29:25,630
namespaces are a complete network stack

00:29:23,620 --> 00:29:27,370
separation fro so everything from your

00:29:25,630 --> 00:29:30,580
devices all the way up to your sockets

00:29:27,370 --> 00:29:32,680
and so that's why because it is separate

00:29:30,580 --> 00:29:35,170
tables you can use it for verbs and

00:29:32,680 --> 00:29:36,670
certainly many companies do but every

00:29:35,170 --> 00:29:38,320
single company that's done it has

00:29:36,670 --> 00:29:40,930
learned that it's an extremely heavy

00:29:38,320 --> 00:29:42,910
weight extremely painful solution for

00:29:40,930 --> 00:29:46,740
what you need for layer 3 which was the

00:29:42,910 --> 00:29:49,900
motivation for doing the vrf device yeah

00:29:46,740 --> 00:29:51,580
managing a bridge interface for every

00:29:49,900 --> 00:29:54,160
single time you go to a route leak is a

00:29:51,580 --> 00:29:56,700
huge task and keeping that right um so

00:29:54,160 --> 00:29:59,590
so the one thing I like to go back to

00:29:56,700 --> 00:30:02,260
can we create verbs inside of fr route

00:29:59,590 --> 00:30:05,200
and we just need someone to program it

00:30:02,260 --> 00:30:07,870
up so someone just needs to take the

00:30:05,200 --> 00:30:11,020
time and do it and and then we'd take it

00:30:07,870 --> 00:30:14,010
so so if anyone wants to do it feel free

00:30:11,020 --> 00:30:14,010
from my perspective

00:30:27,560 --> 00:30:34,430
sure that would work you're right all

00:30:32,870 --> 00:30:36,440
right so I'm gonna in this next section

00:30:34,430 --> 00:30:39,560
I'm going to cover basic topology and

00:30:36,440 --> 00:30:45,430
some basic configuration of some rotten

00:30:39,560 --> 00:30:47,570
demons I'm gonna use this topology for

00:30:45,430 --> 00:30:51,500
what I'm talking about for the next

00:30:47,570 --> 00:30:56,030
little bit there's five routers all

00:30:51,500 --> 00:30:59,390
connected um you can see the the the IP

00:30:56,030 --> 00:31:01,280
addresses for everything if you see see

00:30:59,390 --> 00:31:04,430
an IP address that ends in dot one that

00:31:01,280 --> 00:31:07,190
comes from our 1.2 comes from our 2.3

00:31:04,430 --> 00:31:10,700
comes from our from our three con and so

00:31:07,190 --> 00:31:17,450
on and loopback interfaces are in the

00:31:10,700 --> 00:31:20,780
192 168 240 range and here's the

00:31:17,450 --> 00:31:26,990
configuration file files I'm using for

00:31:20,780 --> 00:31:33,530
for everything all right so so what does

00:31:26,990 --> 00:31:34,910
bgp BGP is what is used to make routing

00:31:33,530 --> 00:31:36,470
decisions on the Internet if I'm

00:31:34,910 --> 00:31:40,250
connecting the company to another

00:31:36,470 --> 00:31:43,880
company or I'm connecting to a service

00:31:40,250 --> 00:31:47,570
provider you're gonna use BGP it

00:31:43,880 --> 00:31:50,870
connects autonomous systems together it

00:31:47,570 --> 00:31:54,140
has a policy language that is both rich

00:31:50,870 --> 00:31:58,700
and feature full to allow operators of

00:31:54,140 --> 00:32:01,070
very fine level control in general

00:31:58,700 --> 00:32:03,830
there's two levels of modes of operation

00:32:01,070 --> 00:32:08,480
for BGP I BGP and ebgp

00:32:03,830 --> 00:32:11,360
eyes internal e's external if you're

00:32:08,480 --> 00:32:13,130
doing internal BGP it's usually one of

00:32:11,360 --> 00:32:14,930
two things it's route reflectors or full

00:32:13,130 --> 00:32:16,610
mesh I'm not going to spend a lot of

00:32:14,930 --> 00:32:20,720
time talking about ibgp I'm gonna really

00:32:16,610 --> 00:32:24,710
spend more time talking about ebgp bgp

00:32:20,720 --> 00:32:27,590
is considered a path vector protocol it

00:32:24,710 --> 00:32:30,320
uses an AS path to determine routes what

00:32:27,590 --> 00:32:34,100
routes to install and we use the AAS

00:32:30,320 --> 00:32:37,340
path also for loop avoidance so if I get

00:32:34,100 --> 00:32:40,680
back an es path route i'll route with an

00:32:37,340 --> 00:32:42,990
es path that has my own AAS number in it

00:32:40,680 --> 00:32:47,340
I know it's a loop and I can't I know

00:32:42,990 --> 00:32:52,220
not to install it I'm also going to

00:32:47,340 --> 00:32:54,570
greatly simplify BGP route selection

00:32:52,220 --> 00:32:57,690
it's a complicated process there's a

00:32:54,570 --> 00:33:02,190
whole bar FC for it but the basic idea

00:32:57,690 --> 00:33:05,160
is what I'm gonna cover BGP is layer

00:33:02,190 --> 00:33:09,390
three only it uses tcp/ip for

00:33:05,160 --> 00:33:11,550
connections and the bottom two bullet

00:33:09,390 --> 00:33:13,890
points are the first one is a book by

00:33:11,550 --> 00:33:16,410
Dinesh dot which is BGP in the data

00:33:13,890 --> 00:33:18,270
center but it's a really good book that

00:33:16,410 --> 00:33:20,790
if you want to learn about BGP it's a

00:33:18,270 --> 00:33:22,950
great thing to read and if you really

00:33:20,790 --> 00:33:27,650
want to be kind of masochistic you can

00:33:22,950 --> 00:33:27,650
read the RFC but who wants to do that

00:33:27,890 --> 00:33:34,500
alright so how does a BGP determine a

00:33:31,880 --> 00:33:39,030
routing path so and this is a slide I

00:33:34,500 --> 00:33:42,840
want to show how our one would decide to

00:33:39,030 --> 00:33:47,790
reach our two from a BGP perspective so

00:33:42,840 --> 00:33:51,600
a side note here s5 is the autonomous

00:33:47,790 --> 00:33:55,980
system for r1 r2 is a is 10 R 3 is 15

00:33:51,600 --> 00:33:57,900
and so on and you build the path using

00:33:55,980 --> 00:34:01,590
the autonomous system so if I'm on r1

00:33:57,900 --> 00:34:03,030
and I want to know my route to r2 I need

00:34:01,590 --> 00:34:06,560
to compare all the different paths I

00:34:03,030 --> 00:34:09,300
have in the network so the first one is

00:34:06,560 --> 00:34:12,810
directly from r1 to r2 and and that's

00:34:09,300 --> 00:34:19,050
the a/s path of 10 and the second one is

00:34:12,810 --> 00:34:22,620
the the middle which is from a is 20 to

00:34:19,050 --> 00:34:26,429
15 to 10 and that's the length of 3 and

00:34:22,620 --> 00:34:31,350
the last one is on the bottom is 25 20

00:34:26,429 --> 00:34:33,450
15 10 so as I mentioned earlier the a s

00:34:31,350 --> 00:34:35,669
path chosen is the shortest one and in

00:34:33,450 --> 00:34:37,320
this case the shortest one is direct the

00:34:35,669 --> 00:34:39,179
direct connection between r1 and r2 and

00:34:37,320 --> 00:34:42,300
that's the route it would choose to get

00:34:39,179 --> 00:34:47,040
to r2 router would choose to install the

00:34:42,300 --> 00:34:52,590
guitar 2 so this next slide I wanted to

00:34:47,040 --> 00:34:54,570
show an example of ecmp so if I wanted

00:34:52,590 --> 00:34:57,730
to get to r3 from r1

00:34:54,570 --> 00:35:01,030
there's two paths that would actually

00:34:57,730 --> 00:35:05,620
equal so the the top path which is 10 to

00:35:01,030 --> 00:35:07,270
15 and the middle path 20 to 15 and that

00:35:05,620 --> 00:35:09,400
would be considered ecmp and we would

00:35:07,270 --> 00:35:13,360
install both next stops going from r2

00:35:09,400 --> 00:35:15,880
and r4 to from BBB gp's perspective and

00:35:13,360 --> 00:35:20,980
the finally the third one is the 25 20

00:35:15,880 --> 00:35:23,110
15 I'm gonna skip this slide this is the

00:35:20,980 --> 00:35:25,450
same thing showing how it works for r4

00:35:23,110 --> 00:35:27,550
and the same thing for r5 is I think

00:35:25,450 --> 00:35:30,330
it's kind of self-evident you can come

00:35:27,550 --> 00:35:30,330
back and look at it later

00:35:31,050 --> 00:35:38,230
so bgp to set up you need to know two

00:35:34,870 --> 00:35:40,780
basic things who am i peering with and

00:35:38,230 --> 00:35:44,020
how how what how am i decide on what

00:35:40,780 --> 00:35:45,640
routes to include so that's a in a

00:35:44,020 --> 00:35:48,370
nutshell that's how you configure bgp

00:35:45,640 --> 00:35:49,870
you specify your neighbor so in this

00:35:48,370 --> 00:35:52,150
case we have neighbor statements

00:35:49,870 --> 00:35:55,030
neighbor one i to one sixty eight to ten

00:35:52,150 --> 00:36:01,900
dot two four and five and i have to

00:35:55,030 --> 00:36:05,230
specify my remote a s number as well BG

00:36:01,900 --> 00:36:09,490
by bgp by default if I set up neighbor

00:36:05,230 --> 00:36:11,890
relationships will not move routes

00:36:09,490 --> 00:36:14,020
around or pass them from neighbor to

00:36:11,890 --> 00:36:16,750
neighbor you have to tell BGP what

00:36:14,020 --> 00:36:20,760
routes to include a common way to do

00:36:16,750 --> 00:36:20,760
this is you say redistribute connected

00:36:22,710 --> 00:36:29,170
yeah and the network say yeah so you in

00:36:27,130 --> 00:36:30,550
BGP you either must use redistribute a

00:36:29,170 --> 00:36:33,330
redistribute statement or a network

00:36:30,550 --> 00:36:36,220
statement network saying it's only

00:36:33,330 --> 00:36:38,650
import exist in prefixes that are in the

00:36:36,220 --> 00:36:40,810
rib and if you want to turn that off you

00:36:38,650 --> 00:36:42,190
can just do no bgp network import check

00:36:40,810 --> 00:36:45,340
in any network you've entered will

00:36:42,190 --> 00:36:49,600
automatically be include it again I'm

00:36:45,340 --> 00:36:53,080
not covering policy its policy is

00:36:49,600 --> 00:36:54,520
covered by route maps and a s list and a

00:36:53,080 --> 00:36:55,960
whole bunch of other stuff but it's too

00:36:54,520 --> 00:36:59,230
complicated to really get into in a

00:36:55,960 --> 00:37:04,030
reasonable amount of time I want to call

00:36:59,230 --> 00:37:05,260
out the multipath relax that allows BGP

00:37:04,030 --> 00:37:09,310
to to

00:37:05,260 --> 00:37:14,320
use different AAS paths but the same

00:37:09,310 --> 00:37:18,390
length as ecmp and finally each router

00:37:14,320 --> 00:37:18,390
needs to have sorry

00:37:29,460 --> 00:37:32,910
and each router needs to have the

00:37:31,140 --> 00:37:39,270
neighbor IP address set for it to work

00:37:32,910 --> 00:37:41,550
properly so I kind of didn't show all

00:37:39,270 --> 00:37:44,670
the different setups for r1 to r2 at r3

00:37:41,550 --> 00:37:45,869
at our forward r5 but it's basically

00:37:44,670 --> 00:37:47,520
effectively the same you have to create

00:37:45,869 --> 00:37:51,720
a neighbor statement and you have to

00:37:47,520 --> 00:37:54,570
specify the ASP if it's the the

00:37:51,720 --> 00:37:56,400
autonomous system of the neighbor so

00:37:54,570 --> 00:37:57,690
after you've done that you do a show IP

00:37:56,400 --> 00:38:03,800
route and you can see that we have a

00:37:57,690 --> 00:38:07,040
whole bunch of BGP routes all right so

00:38:03,800 --> 00:38:13,950
I've set up BGP and it's gone to hell

00:38:07,040 --> 00:38:17,070
how do I fix it I use most often show

00:38:13,950 --> 00:38:20,790
bgp IP for unicast summary and show bgp

00:38:17,070 --> 00:38:24,930
ipv4 unicast the first one shows me the

00:38:20,790 --> 00:38:26,790
neighbors that I have configured and the

00:38:24,930 --> 00:38:29,040
number of prefixes I have received from

00:38:26,790 --> 00:38:33,210
that peer and the second one shows me

00:38:29,040 --> 00:38:35,460
all the different paths and my the two

00:38:33,210 --> 00:38:39,839
most common debugs I used as debug bgp

00:38:35,460 --> 00:38:41,430
neighbor events and debug bgp updates my

00:38:39,839 --> 00:38:45,150
most common mistake that I make when I

00:38:41,430 --> 00:38:47,130
set up a BGP peer in relationship is i

00:38:45,150 --> 00:38:49,830
when i set up BGP is I forget to set the

00:38:47,130 --> 00:38:51,150
the neighbor address correctly I messed

00:38:49,830 --> 00:38:59,670
that up all the time it's really easy to

00:38:51,150 --> 00:39:05,160
mess up you know this is just some quick

00:38:59,670 --> 00:39:09,599
debugging examples and what the tables

00:39:05,160 --> 00:39:11,849
what the output actually looks like all

00:39:09,599 --> 00:39:15,119
right so so I'm going to talk about OSPF

00:39:11,849 --> 00:39:18,869
next OSPF is considered an interior

00:39:15,119 --> 00:39:21,089
gateway protocol it uses link state

00:39:18,869 --> 00:39:24,800
routing and what that basically means is

00:39:21,089 --> 00:39:27,690
that each router floods information

00:39:24,800 --> 00:39:28,980
information about itself and every

00:39:27,690 --> 00:39:31,410
single bit of information is received

00:39:28,980 --> 00:39:35,250
from every single other router to

00:39:31,410 --> 00:39:37,560
everyone else so so it is pretty

00:39:35,250 --> 00:39:39,480
heavyweight and the fact that there's a

00:39:37,560 --> 00:39:40,800
lot of data being sent if you just have

00:39:39,480 --> 00:39:42,580
a couple neighbors it's not that big of

00:39:40,800 --> 00:39:45,580
a deal but if you have a lot you start

00:39:42,580 --> 00:39:48,240
to send a lot of data around it uses I

00:39:45,580 --> 00:39:51,280
always miss this name Dijkstra

00:39:48,240 --> 00:39:57,070
Dijkstra's algorithm to figure out what

00:39:51,280 --> 00:39:58,720
to install into the rib it also uses IP

00:39:57,070 --> 00:40:01,390
or layer 3 to advertise router

00:39:58,720 --> 00:40:03,820
information from OSPF router to OSPF

00:40:01,390 --> 00:40:09,070
router there's two different OS PFS

00:40:03,820 --> 00:40:12,870
there's OSPF v2 and OSPF v3 I don't know

00:40:09,070 --> 00:40:18,520
why they did it this way but v2 is IP v4

00:40:12,870 --> 00:40:21,580
v3 is ipv6 and I v3 also provides the

00:40:18,520 --> 00:40:26,980
ability to I do ipv4 and ipv6 but no one

00:40:21,580 --> 00:40:32,170
does that I don't know why for Policy

00:40:26,980 --> 00:40:33,820
control OSPF uses areas and I'll get

00:40:32,170 --> 00:40:35,860
into that a second but areas allow

00:40:33,820 --> 00:40:37,990
policy that's kind of beyond the scope

00:40:35,860 --> 00:40:39,730
of this talk and if you do have more

00:40:37,990 --> 00:40:47,220
than one area you must also have an area

00:40:39,730 --> 00:40:51,840
0 I want to talk about how Dijkstra

00:40:47,220 --> 00:40:51,840
determines the best route to use

00:40:52,650 --> 00:40:57,640
Dijkstra actually has some optimizations

00:40:55,660 --> 00:41:01,090
for that are great for computers to make

00:40:57,640 --> 00:41:02,440
the UM to make it faster to determine

00:41:01,090 --> 00:41:05,830
I'm going to kind of skip over that a

00:41:02,440 --> 00:41:08,500
little bit because it's it ends to be

00:41:05,830 --> 00:41:10,480
the same so so the numbers between like

00:41:08,500 --> 00:41:12,130
so between r1 and r2 there's a number 60

00:41:10,480 --> 00:41:14,890
that's the weight of the interface that

00:41:12,130 --> 00:41:19,000
we're gonna be using for Dijkstra and so

00:41:14,890 --> 00:41:21,120
R 2 R 3 is 60 and so on so from our ones

00:41:19,000 --> 00:41:24,490
perspective if I want to get to our to

00:41:21,120 --> 00:41:27,070
the best weight of all the three

00:41:24,490 --> 00:41:28,990
different paths is 60 so that's what's

00:41:27,070 --> 00:41:32,650
gonna choose so the second path is 100 +

00:41:28,990 --> 00:41:34,960
5 + 60 that's 165 and the third path of

00:41:32,650 --> 00:41:41,860
the poem bottom is 60 plus 60 plus 5

00:41:34,960 --> 00:41:46,360
plus 60 so the next thing I wanted to

00:41:41,860 --> 00:41:52,000
call out so so from R 1 to R 3 if you

00:41:46,360 --> 00:41:54,850
recall for BGP we bgp had a nice EMP

00:41:52,000 --> 00:41:55,990
path between r1 and r3 that's not true

00:41:54,850 --> 00:41:59,080
with OSPF with the

00:41:55,990 --> 00:42:01,930
examples here so our one along the top

00:41:59,080 --> 00:42:06,220
the weights are 60 plus 60 and that's

00:42:01,930 --> 00:42:08,320
120 but all in the middle 100 plus 5 to

00:42:06,220 --> 00:42:09,850
get to our 3 is 105 so that's a better

00:42:08,320 --> 00:42:13,180
weight and that's what the route that

00:42:09,850 --> 00:42:16,510
will be used for most vs perspective so

00:42:13,180 --> 00:42:19,900
so so I'm just trying to call here a key

00:42:16,510 --> 00:42:25,180
difference between BGP and OSPF and how

00:42:19,900 --> 00:42:26,920
they determine routes this is just

00:42:25,180 --> 00:42:31,600
further examples of the same thing I'm

00:42:26,920 --> 00:42:34,690
going to skip it in interest of time all

00:42:31,600 --> 00:42:37,750
right so on the left here is all you

00:42:34,690 --> 00:42:40,660
need to do to configure OSPF router OSPF

00:42:37,750 --> 00:42:42,850
network 0 0 0 area 0 0 0 you put that on

00:42:40,660 --> 00:42:46,770
every router and you will have a work

00:42:42,850 --> 00:42:50,500
into OSPF network it's not great for

00:42:46,770 --> 00:42:52,150
more than a handful of routers but if

00:42:50,500 --> 00:42:58,210
you're doing something simple that's

00:42:52,150 --> 00:43:00,750
what you would use all right so I've

00:42:58,210 --> 00:43:04,350
configured OSPF and how do i D bug it

00:43:00,750 --> 00:43:06,940
I'll use show up the OSPF interface

00:43:04,350 --> 00:43:09,460
neighbor and database and route database

00:43:06,940 --> 00:43:12,730
router as commands to figure out what's

00:43:09,460 --> 00:43:14,560
going wrong and my two most common debug

00:43:12,730 --> 00:43:19,570
statements or debug OSPF packet and

00:43:14,560 --> 00:43:22,890
debug SPF NSM i mean it's just a quick

00:43:19,570 --> 00:43:22,890
again examples

00:43:28,580 --> 00:43:35,010
all right um next round in protocol and

00:43:31,710 --> 00:43:38,730
talk about is is is it's also considered

00:43:35,010 --> 00:43:42,420
an interior gateway protocol like OSPF

00:43:38,730 --> 00:43:45,450
it uses a link state and it floods all

00:43:42,420 --> 00:43:49,080
router information about every router it

00:43:45,450 --> 00:43:51,510
knows to every other router also uses

00:43:49,080 --> 00:43:55,050
Dijkstra one of the main differences

00:43:51,510 --> 00:43:59,220
between is is and OSPF is it uses layer

00:43:55,050 --> 00:44:02,310
2 for connection between two routers and

00:43:59,220 --> 00:44:04,350
the product the protocol it uses a CL NP

00:44:02,310 --> 00:44:08,070
I don't know a whole lot about it but um

00:44:04,350 --> 00:44:10,950
its layer 2 it is is it's considered

00:44:08,070 --> 00:44:13,170
really easy to extend due to its TLV

00:44:10,950 --> 00:44:16,950
support in its packets you can basically

00:44:13,170 --> 00:44:19,830
carry an arbitrary payloads for Policy

00:44:16,950 --> 00:44:23,220
you can have three different areas level

00:44:19,830 --> 00:44:24,750
one two and one two one is just an

00:44:23,220 --> 00:44:27,780
individual area of a bunch of routers

00:44:24,750 --> 00:44:30,090
working together I use two to connect

00:44:27,780 --> 00:44:32,760
areas together and level one to let one

00:44:30,090 --> 00:44:35,210
to is for connecting multiple areas

00:44:32,760 --> 00:44:35,210
together

00:44:37,770 --> 00:44:45,840
so this is a basic example of is--is

00:44:41,840 --> 00:44:47,369
setup if you'll notice that and under

00:44:45,840 --> 00:44:50,100
OSPF you just have to have a network

00:44:47,369 --> 00:44:51,630
statement you can't do that news's you

00:44:50,100 --> 00:44:56,190
have to go to every single interface you

00:44:51,630 --> 00:45:01,080
want to be included in his and say use

00:44:56,190 --> 00:45:04,619
is is and finally you need to configure

00:45:01,080 --> 00:45:06,510
a router is his statement with a word

00:45:04,619 --> 00:45:12,150
and an arbitrary word like I used toes

00:45:06,510 --> 00:45:17,820
IVA here and that net 47 0 and whatever

00:45:12,150 --> 00:45:21,630
is a holdover from early is is where

00:45:17,820 --> 00:45:24,390
each and it it's a holdover and it

00:45:21,630 --> 00:45:26,700
originally you could use it to send

00:45:24,390 --> 00:45:28,020
information about how the the that

00:45:26,700 --> 00:45:29,760
particular router was being using the

00:45:28,020 --> 00:45:31,830
network and I think people kind of found

00:45:29,760 --> 00:45:33,990
it didn't really work too well but you

00:45:31,830 --> 00:45:40,220
still need to have a net statement and

00:45:33,990 --> 00:45:43,830
it's got to be a 220 tuple of data and

00:45:40,220 --> 00:45:47,760
and they have to be unique I don't know

00:45:43,830 --> 00:45:51,810
why and you basically need more config

00:45:47,760 --> 00:45:58,950
than OSPF because is as does both v4 and

00:45:51,810 --> 00:46:03,359
v6 here's an example of the is this

00:45:58,950 --> 00:46:06,810
configured and working and here's how

00:46:03,359 --> 00:46:08,520
I've debugged is this in the past show

00:46:06,810 --> 00:46:16,350
commands some basic show commands and

00:46:08,520 --> 00:46:19,070
the basic debug commands here's some

00:46:16,350 --> 00:46:19,070
sample output

00:46:21,359 --> 00:46:29,279
all right so so I've gone over bgp OSPF

00:46:25,529 --> 00:46:33,089
and it is which one should you use the

00:46:29,279 --> 00:46:35,819
reality is is that you use what's best

00:46:33,089 --> 00:46:36,959
or what you know best they're all

00:46:35,819 --> 00:46:38,819
complicated they all have their own

00:46:36,959 --> 00:46:41,219
pluses and minuses and if you're just

00:46:38,819 --> 00:46:43,469
setting something up for for yourself or

00:46:41,219 --> 00:46:47,369
for a small network use what you know

00:46:43,469 --> 00:46:50,430
best bgp scales better than either OSPF

00:46:47,369 --> 00:46:53,640
arises mainly due to the lack of link

00:46:50,430 --> 00:46:55,880
state flooding and finally BGP can also

00:46:53,640 --> 00:46:58,170
handle many a fee Safi combinations that

00:46:55,880 --> 00:47:00,690
are missing another routing protocols

00:46:58,170 --> 00:47:04,589
and it's very commonly used for both on

00:47:00,690 --> 00:47:10,559
overlay and underlay networks or VPN

00:47:04,589 --> 00:47:12,029
networks all right so so I haven't

00:47:10,559 --> 00:47:13,890
talked about a whole bunch of different

00:47:12,029 --> 00:47:16,349
protocols and that's want to mention

00:47:13,890 --> 00:47:19,739
them at least real quick so if you want

00:47:16,349 --> 00:47:23,660
to do non link-local multicast route and

00:47:19,739 --> 00:47:27,749
you're gonna use PEM if you're gonna do

00:47:23,660 --> 00:47:29,309
and I've lumped rip and EIGRP together

00:47:27,749 --> 00:47:34,109
because they're both distance-vector

00:47:29,309 --> 00:47:35,160
routing protocols most people don't use

00:47:34,109 --> 00:47:40,229
rip it's ancient

00:47:35,160 --> 00:47:42,449
not really great and the EIGRP and fr

00:47:40,229 --> 00:47:44,699
Allen is not ready for production use

00:47:42,449 --> 00:47:50,579
right now it works but you can easily

00:47:44,699 --> 00:47:53,039
make it fall over NH RP is really really

00:47:50,579 --> 00:47:55,049
complicated and it just has a special

00:47:53,039 --> 00:47:58,069
you case that's not really that common

00:47:55,049 --> 00:48:01,349
basically I want to have a one-to-many

00:47:58,069 --> 00:48:05,819
connection that's what NH RP is used for

00:48:01,349 --> 00:48:10,890
it's the dmvpn solution PBRs

00:48:05,819 --> 00:48:12,329
policy-based routing again it's limited

00:48:10,890 --> 00:48:15,119
use cases it's static routing with a

00:48:12,329 --> 00:48:19,140
twist you can do things like match on

00:48:15,119 --> 00:48:25,979
source and deaths and ports to figure

00:48:19,140 --> 00:48:28,709
out what how to route the packet fr

00:48:25,979 --> 00:48:31,170
Allen has Babel which is a wireless mesh

00:48:28,709 --> 00:48:35,719
in home routing and finally we have also

00:48:31,170 --> 00:48:35,719
LD P which is labeled distribution for M

00:48:41,630 --> 00:48:54,450
so so what does a fr Rodham provide it

00:48:48,390 --> 00:48:56,160
provides you the ability to run route an

00:48:54,450 --> 00:48:59,580
anywhere in your network so

00:48:56,160 --> 00:49:01,860
traditionally you go to your network

00:48:59,580 --> 00:49:03,390
vendor and they sell you a box that you

00:49:01,860 --> 00:49:05,430
go take to your network and you put it

00:49:03,390 --> 00:49:08,280
down and you plug your cables into it

00:49:05,430 --> 00:49:12,000
and you plug your hosts into it and the

00:49:08,280 --> 00:49:15,150
two don't mix and and I think we're

00:49:12,000 --> 00:49:17,550
discovering today with with the

00:49:15,150 --> 00:49:20,460
proliferation of host and VMs on host

00:49:17,550 --> 00:49:25,620
and containers and advanced route on use

00:49:20,460 --> 00:49:28,680
of cases it allows you to run your

00:49:25,620 --> 00:49:31,290
network and stack directly on your Linux

00:49:28,680 --> 00:49:32,760
box wherever you want and to provide the

00:49:31,290 --> 00:49:35,730
networking that you need wherever you

00:49:32,760 --> 00:49:39,510
want one of the problems that networking

00:49:35,730 --> 00:49:41,840
vendors have is that they only have

00:49:39,510 --> 00:49:44,190
control of the box that they sell you

00:49:41,840 --> 00:49:49,200
that far out unless you have control of

00:49:44,190 --> 00:49:50,700
your network everywhere

00:49:49,200 --> 00:49:52,230
the other great thing that it provides

00:49:50,700 --> 00:49:54,540
is it allows you to connect to those

00:49:52,230 --> 00:49:55,920
close source vendors just using the

00:49:54,540 --> 00:50:00,270
standard routing protocols that they are

00:49:55,920 --> 00:50:01,590
using as well alright so the next

00:50:00,270 --> 00:50:03,830
section is advanced data sent around

00:50:01,590 --> 00:50:03,830
them

00:50:09,730 --> 00:50:14,770
I'm gonna cover modern date and center

00:50:12,400 --> 00:50:17,920
architecture what it looks like RFC

00:50:14,770 --> 00:50:23,859
55:49 and a very quick overview of bgp

00:50:17,920 --> 00:50:25,869
evpn so the modern data center is a

00:50:23,859 --> 00:50:28,930
cloths network it's named after Charles

00:50:25,869 --> 00:50:31,119
cloths some guy I think he worked at

00:50:28,930 --> 00:50:33,460
Bell Labs invented this back in the 50s

00:50:31,119 --> 00:50:38,320
or 60s so it's been around for a long

00:50:33,460 --> 00:50:41,800
time so so a class is typically a layer

00:50:38,320 --> 00:50:44,080
of routers or switches on the top called

00:50:41,800 --> 00:50:46,720
the spine with Leafs or tours underneath

00:50:44,080 --> 00:50:50,500
it that are connected and you can see

00:50:46,720 --> 00:50:51,940
each leaf is connected to each spine so

00:50:50,500 --> 00:50:56,820
what does that provide it provides known

00:50:51,940 --> 00:50:59,740
latency between each host and the in the

00:50:56,820 --> 00:51:02,800
data center it provides guaranteed

00:50:59,740 --> 00:51:05,080
bandwidth for your applications it's

00:51:02,800 --> 00:51:07,090
really easy to build because they were

00:51:05,080 --> 00:51:10,240
just plugging in and in doing the same

00:51:07,090 --> 00:51:12,640
thing for every single leaf tour and

00:51:10,240 --> 00:51:13,930
everything goes fine and when something

00:51:12,640 --> 00:51:18,640
does go wrong you've limited your

00:51:13,930 --> 00:51:20,680
failure scope so so typically what we

00:51:18,640 --> 00:51:23,530
have on the left is called a pod and

00:51:20,680 --> 00:51:26,230
that's a data in a data center that's

00:51:23,530 --> 00:51:28,780
basically just a unit of work or control

00:51:26,230 --> 00:51:30,850
and if I want to have more pods I just

00:51:28,780 --> 00:51:32,590
add another layer and call it a this

00:51:30,850 --> 00:51:35,980
call add another layer it add more

00:51:32,590 --> 00:51:39,010
spines and and call the middle layer

00:51:35,980 --> 00:51:41,800
leaves so what is the other thing that

00:51:39,010 --> 00:51:43,840
the data center modern data architecture

00:51:41,800 --> 00:51:47,859
gives you is ecmp

00:51:43,840 --> 00:51:52,600
I can do multi paths between all my

00:51:47,859 --> 00:51:55,450
different hosts and without using any

00:51:52,600 --> 00:51:59,500
layer 2 and that's gets rid of SDP which

00:51:55,450 --> 00:52:02,590
is extremely extremely um I'm sorry SDP

00:51:59,500 --> 00:52:05,859
we will shut down links between

00:52:02,590 --> 00:52:09,780
different redundant links and without

00:52:05,859 --> 00:52:13,840
limits your bandwidth and finally um a

00:52:09,780 --> 00:52:17,100
mag that is used in the data center is

00:52:13,840 --> 00:52:17,100
extremely hard to get right

00:52:18,359 --> 00:52:29,890
so what is RFC 5549 it's the ability to

00:52:25,119 --> 00:52:34,809
have v4 routes with v6 next hops so

00:52:29,890 --> 00:52:37,630
think about it from a I have a v4 pod

00:52:34,809 --> 00:52:39,219
and I want to get somewhere else and I

00:52:37,630 --> 00:52:41,559
can specify how to get there with v6

00:52:39,219 --> 00:52:42,849
next hops so why would I want to do that

00:52:41,559 --> 00:52:45,609
well I don't have a lot maybe I'm

00:52:42,849 --> 00:52:47,739
running out of v4 address space and I'll

00:52:45,609 --> 00:52:50,249
have a very limited

00:52:47,739 --> 00:52:53,229
well this allows you to get around that

00:52:50,249 --> 00:52:58,299
it's really ideal for data center

00:52:53,229 --> 00:53:00,430
point-to-point links this allows you not

00:52:58,299 --> 00:53:03,940
to have to put a v4 address on every

00:53:00,430 --> 00:53:05,229
single interface in your data center and

00:53:03,940 --> 00:53:08,170
it's also commonly referred to as

00:53:05,229 --> 00:53:11,229
unnumbered so in the in this example

00:53:08,170 --> 00:53:13,150
here if I put an ipv4 address on every

00:53:11,229 --> 00:53:16,420
single interface on between the spine

00:53:13,150 --> 00:53:20,799
and the tours I need to have 45 ipv4

00:53:16,420 --> 00:53:24,910
addresses and if I convert down if I

00:53:20,799 --> 00:53:28,449
convert to using 55:49 I can reduce the

00:53:24,910 --> 00:53:29,890
outer space to 9 IP addresses in this

00:53:28,449 --> 00:53:31,479
particular example I just need one IP

00:53:29,890 --> 00:53:33,789
address for the loopback on each of the

00:53:31,479 --> 00:53:36,609
spines and one in one for each of the

00:53:33,789 --> 00:53:39,880
tours now obviously if you have a bigger

00:53:36,609 --> 00:53:45,190
data center the ratios changed based on

00:53:39,880 --> 00:53:48,880
how you fill out your cloths all right

00:53:45,190 --> 00:53:52,269
so so the unfortunately the Linux kernel

00:53:48,880 --> 00:53:54,819
does not I'll really allow you to do v6

00:53:52,269 --> 00:53:59,559
next stops currently it's something

00:53:54,819 --> 00:54:01,059
that's coming right roopa soon so so how

00:53:59,559 --> 00:54:05,079
does how does it work we have to

00:54:01,059 --> 00:54:10,529
actually keep we have to derive the MAC

00:54:05,079 --> 00:54:14,829
address of the peer via v6 router

00:54:10,529 --> 00:54:18,180
advertisements and so what we do is we

00:54:14,829 --> 00:54:20,650
get we create router advertisements and

00:54:18,180 --> 00:54:22,809
from the peer it will give us its link

00:54:20,650 --> 00:54:25,059
local address and from that we can

00:54:22,809 --> 00:54:30,880
derive the MAC address and using that we

00:54:25,059 --> 00:54:31,690
can insert into the neighbor table a IP

00:54:30,880 --> 00:54:34,990
address of one

00:54:31,690 --> 00:54:37,500
6:9 254 0 1 the interface and the MAC

00:54:34,990 --> 00:54:41,140
address and I can use that as a next op

00:54:37,500 --> 00:54:42,520
and at the bottom of the slot here I

00:54:41,140 --> 00:54:45,030
wanted to talk a little bit about how

00:54:42,520 --> 00:54:49,210
this actually works from FRS perspective

00:54:45,030 --> 00:54:51,790
so I have two BGP I have to tell it to

00:54:49,210 --> 00:54:54,220
use on number and what that causes bgp

00:54:51,790 --> 00:54:55,810
do is send a message to zebra saying hey

00:54:54,220 --> 00:54:59,560
could you turn on router advertisement

00:54:55,810 --> 00:55:01,119
for that interface zebra says sure i can

00:54:59,560 --> 00:55:03,160
do that and it sends a router

00:55:01,119 --> 00:55:05,440
advertisement so i kind of have the

00:55:03,160 --> 00:55:07,839
arrows going to the right from zebra to

00:55:05,440 --> 00:55:10,119
the colonel I kind of really mean zebra

00:55:07,839 --> 00:55:12,339
to the network but from zebras or fr

00:55:10,119 --> 00:55:13,930
Rawlins perspective it's sent out of

00:55:12,339 --> 00:55:14,470
socket and it's taken care of by the

00:55:13,930 --> 00:55:16,119
colonel

00:55:14,470 --> 00:55:17,170
that's why I've kind of left it there I

00:55:16,119 --> 00:55:19,000
don't want to give the impression that

00:55:17,170 --> 00:55:22,060
it's actually really talking to the

00:55:19,000 --> 00:55:23,500
colonel so I I sent out a router

00:55:22,060 --> 00:55:26,890
advertisement eventually I'm gonna get a

00:55:23,500 --> 00:55:30,160
router advertisement back from a

00:55:26,890 --> 00:55:32,740
neighbor out that interface and at that

00:55:30,160 --> 00:55:34,569
time zebra does two things it installs

00:55:32,740 --> 00:55:38,770
that neighbor entry that we just talked

00:55:34,569 --> 00:55:43,300
about the 169 254 0 1 and the MAC

00:55:38,770 --> 00:55:46,990
address and it also tells bgp the link

00:55:43,300 --> 00:55:50,410
local address for that interface b gb

00:55:46,990 --> 00:55:53,530
takes that data and forms a TCP

00:55:50,410 --> 00:55:57,040
connection you use the link local link

00:55:53,530 --> 00:55:59,050
local address of the peer and at that

00:55:57,040 --> 00:56:03,250
point in time it does to the normal BGP

00:55:59,050 --> 00:56:04,900
mechanism of gathering ringing the

00:56:03,250 --> 00:56:06,849
neighbor up and then gathering routes

00:56:04,900 --> 00:56:11,560
from it and then installs the route and

00:56:06,849 --> 00:56:14,770
zebra will see the v6 next top that BGP

00:56:11,560 --> 00:56:18,490
installs and go oh that's a I should use

00:56:14,770 --> 00:56:24,430
the 169 254 0 1 next top instead so

00:56:18,490 --> 00:56:26,920
you're looking at me funny ok alright so

00:56:24,430 --> 00:56:29,200
so how do I set that up in BGP it's

00:56:26,920 --> 00:56:32,109
actually pretty easy at the top I have

00:56:29,200 --> 00:56:34,300
the interfaces and if you note they

00:56:32,109 --> 00:56:37,690
don't have IP addresses so we removed

00:56:34,300 --> 00:56:39,670
those and the second thing is the

00:56:37,690 --> 00:56:43,390
neighbor statements have changed subtly

00:56:39,670 --> 00:56:45,200
and I have neighbor interface the

00:56:43,390 --> 00:56:47,750
interface actual interface name

00:56:45,200 --> 00:56:50,240
in the keyword interface and then the

00:56:47,750 --> 00:56:51,800
remote is external that's I wanted to

00:56:50,240 --> 00:56:55,550
I'll talk I'll come back to the external

00:56:51,800 --> 00:56:57,859
in a second here but the neighbor

00:56:55,550 --> 00:57:05,300
statement becomes the interface you want

00:56:57,859 --> 00:57:07,599
to use the remote we've added a feature

00:57:05,300 --> 00:57:09,530
to Fr Island called remote is

00:57:07,599 --> 00:57:13,040
internal/external and what that

00:57:09,530 --> 00:57:16,940
basically means is that if I if I write

00:57:13,040 --> 00:57:18,530
internal I expect the autonomous system

00:57:16,940 --> 00:57:21,140
from my neighbor to be the same as

00:57:18,530 --> 00:57:25,430
myself and if it's not I'll reject it

00:57:21,140 --> 00:57:29,180
and the second one is external if I

00:57:25,430 --> 00:57:33,619
receive a different s than mine I will

00:57:29,180 --> 00:57:35,290
accept it and reject the same so so why

00:57:33,619 --> 00:57:38,599
do why is this good well from a

00:57:35,290 --> 00:57:41,119
configuration perspective and a data

00:57:38,599 --> 00:57:43,609
center it reduces my config to something

00:57:41,119 --> 00:57:46,760
I cut and paste I can take that config

00:57:43,609 --> 00:57:50,990
and put it on every single router in my

00:57:46,760 --> 00:57:53,780
network fixing the router bgp correct a

00:57:50,990 --> 00:57:55,790
s number if i've changed it but it

00:57:53,780 --> 00:57:57,530
becomes incredibly simple it's simple

00:57:55,790 --> 00:58:01,040
since it simplifies my network I've

00:57:57,530 --> 00:58:02,960
reduced my errors and I've got this cut

00:58:01,040 --> 00:58:09,170
and paste configuration across a large

00:58:02,960 --> 00:58:13,369
section of my datacenter so I wanted to

00:58:09,170 --> 00:58:15,920
call out the subtle difference from over

00:58:13,369 --> 00:58:17,780
here on the left the the fr Island

00:58:15,920 --> 00:58:20,030
perspective of the route and the kernel

00:58:17,780 --> 00:58:23,300
perspective of the route so we have the

00:58:20,030 --> 00:58:28,900
BGP route 4 to 42 and you can see it's

00:58:23,300 --> 00:58:31,520
got a via a v6 address and on the right

00:58:28,900 --> 00:58:37,160
we've installed it different with the

00:58:31,520 --> 00:58:38,780
169 254 0 1 and the Deb SMA p1 and if

00:58:37,160 --> 00:58:41,089
you look at the bottom here we have the

00:58:38,780 --> 00:58:42,619
neighbor table entry for each of the

00:58:41,089 --> 00:58:45,890
different neighbors I've specified and

00:58:42,619 --> 00:58:48,069
the red one is where is the the SW p1

00:58:45,890 --> 00:58:48,069
one

00:58:49,830 --> 00:58:55,020
all right so we also have the bill to do

00:58:52,230 --> 00:58:57,690
OSPF unnumbered I actually kind of hate

00:58:55,020 --> 00:58:59,430
the name it's it's awful it's not

00:58:57,690 --> 00:59:03,180
unnumbered it's the same ip address

00:58:59,430 --> 00:59:05,580
everywhere so so BGP I didn't have to

00:59:03,180 --> 00:59:07,350
put an IP address on the interface OSPF

00:59:05,580 --> 00:59:09,690
unnumbered i have to put a slash through

00:59:07,350 --> 00:59:11,580
to on an interface I can put whatever

00:59:09,690 --> 00:59:16,040
slash through to a number I want to put

00:59:11,580 --> 00:59:20,220
on just as long as it's the same one on

00:59:16,040 --> 00:59:23,450
the left is the configuration so so if

00:59:20,220 --> 00:59:25,230
you recall earlier it was router OSPF

00:59:23,450 --> 00:59:27,540
network 0 0 0

00:59:25,230 --> 00:59:32,010
err is 0 and that was it well to do

00:59:27,540 --> 00:59:35,400
unnumbered OSPF I have to change to

00:59:32,010 --> 00:59:37,620
configure each interface as a point to

00:59:35,400 --> 00:59:40,950
point and specify if it's in what area

00:59:37,620 --> 00:59:43,170
is in and over here in the middle here

00:59:40,950 --> 00:59:48,150
we can see that each interface has the

00:59:43,170 --> 00:59:50,760
same IP address and the bottom is a

00:59:48,150 --> 00:59:52,200
quick documentation on how to use it if

00:59:50,760 --> 00:59:57,540
you want to if you interested for

00:59:52,200 --> 01:00:04,500
yourself for further and this is just

00:59:57,540 --> 01:00:06,710
the results of unnumbered alright so why

01:00:04,500 --> 01:00:09,330
do I actually need l2 on a data center

01:00:06,710 --> 01:00:11,130
there's still a lot of legacy apps out

01:00:09,330 --> 01:00:11,790
there that still need layer 2

01:00:11,130 --> 01:00:15,210
connectivity

01:00:11,790 --> 01:00:18,990
I'm doing link-local multicast typically

01:00:15,210 --> 01:00:20,430
for service discovery maybe I only have

01:00:18,990 --> 01:00:28,920
the MAC address of whom I need to talk

01:00:20,430 --> 01:00:33,510
to or they're not using tcp/ip in a data

01:00:28,920 --> 01:00:35,730
center typically hosts under a tor are

01:00:33,510 --> 01:00:37,650
can only talk to each other but maybe I

01:00:35,730 --> 01:00:40,650
want to have hosts under a particular

01:00:37,650 --> 01:00:42,780
tor talk to another set of hosts under a

01:00:40,650 --> 01:00:48,030
different tor so that's why I need the

01:00:42,780 --> 01:00:50,250
ability to pass layer 2 across those and

01:00:48,030 --> 01:00:53,490
finally there's an assumption that IP

01:00:50,250 --> 01:00:55,380
addresses stay the same even when a host

01:00:53,490 --> 01:00:56,700
or an endpoint is destroyed and

01:00:55,380 --> 01:01:01,100
recreated elsewhere in the network this

01:00:56,700 --> 01:01:01,100
is especially true for VMs or containers

01:01:01,550 --> 01:01:07,470
so how do we solve that we typically

01:01:05,460 --> 01:01:09,960
solve that with VX land encapsulation it

01:01:07,470 --> 01:01:15,270
provides layer 2 segmentation over layer

01:01:09,960 --> 01:01:17,849
3 network the l2 over l3 network allows

01:01:15,270 --> 01:01:22,400
you to leverage all the data center

01:01:17,849 --> 01:01:27,960
links and you have ecmp paths to get to

01:01:22,400 --> 01:01:29,579
to the host you're interested in it VX

01:01:27,960 --> 01:01:35,040
LAN encapsulation is just a bunch of

01:01:29,579 --> 01:01:37,890
tunnels that effectively write Rupa it's

01:01:35,040 --> 01:01:39,359
it's a lot more complex control plane

01:01:37,890 --> 01:01:43,349
but allows a lot better higher

01:01:39,359 --> 01:01:47,369
availability all right so in this

01:01:43,349 --> 01:01:51,450
example I'm gonna rework the topology a

01:01:47,369 --> 01:01:54,900
little bit but the thing I want to call

01:01:51,450 --> 01:01:56,010
out here is that r1 and r3 become the

01:01:54,900 --> 01:01:57,450
Leafs or tors

01:01:56,010 --> 01:02:01,380
then a vehicle in this vehicle and

01:01:57,450 --> 01:02:03,900
network r2 becomes the spine and r4 and

01:02:01,380 --> 01:02:12,540
r5 are going to be configured with the

01:02:03,900 --> 01:02:17,700
same slash 24 network here's my

01:02:12,540 --> 01:02:25,380
interface configuration our 4c has 192

01:02:17,700 --> 01:02:26,550
168 244 and r5 has the I'm sorry but 214

01:02:25,380 --> 01:02:31,339
is what I'm really interested in here

01:02:26,550 --> 01:02:36,000
192 168 to 14.4 and the 192 168 to 14.5

01:02:31,339 --> 01:02:39,990
so how do I create it you create a VX

01:02:36,000 --> 01:02:44,329
LAN interface and you create a bridge

01:02:39,990 --> 01:02:44,329
that connects the VX LAN on r1 and r3

01:02:46,609 --> 01:02:54,270
all right so what is bgp evpn it takes

01:02:50,069 --> 01:03:00,750
VX lan networks and extends the control

01:02:54,270 --> 01:03:04,290
plane across the the the data center so

01:03:00,750 --> 01:03:07,440
it's layer 2 networks across layer 3

01:03:04,290 --> 01:03:10,890
underlay networks it's a unified control

01:03:07,440 --> 01:03:13,700
plane and so the way it really works is

01:03:10,890 --> 01:03:18,470
is it distributes the mac

01:03:13,700 --> 01:03:21,530
addresses around the data center so in

01:03:18,470 --> 01:03:26,390
the picture here the MAC addresses for a

01:03:21,530 --> 01:03:31,070
b c d e and f would be distributed to

01:03:26,390 --> 01:03:35,060
all the leafs here and if for instance a

01:03:31,070 --> 01:03:37,970
wanted to get to I'm sorry if II wanted

01:03:35,060 --> 01:03:41,120
to get it to a all I would have to do is

01:03:37,970 --> 01:03:47,090
just send a packet and the MAC address

01:03:41,120 --> 01:03:49,100
would allow you to get there there's a

01:03:47,090 --> 01:03:52,130
evpn in the data center book that you

01:03:49,100 --> 01:03:53,990
can get for free if you go to the key

01:03:52,130 --> 01:03:56,000
most networks that you can sign up for

01:03:53,990 --> 01:03:57,920
it and it says you know you give your

01:03:56,000 --> 01:04:00,560
email and they'll give you a book for

01:03:57,920 --> 01:04:03,350
free but it's it's a really good book

01:04:00,560 --> 01:04:08,180
and then really explains how a VPN works

01:04:03,350 --> 01:04:11,450
in the data center roopa also has a from

01:04:08,180 --> 01:04:14,180
a previous net Deaf conference her evpn

01:04:11,450 --> 01:04:17,020
or Linux bridge tutorial that I've

01:04:14,180 --> 01:04:17,020
linked here as well

01:04:20,210 --> 01:04:28,640
so so evpn setup is actually pretty

01:04:24,140 --> 01:04:30,079
simple for a basic use case the only

01:04:28,640 --> 01:04:31,730
thing you really need to do is add and

01:04:30,079 --> 01:04:35,630
add this new idea of an address family

01:04:31,730 --> 01:04:42,859
and it's the address family l2 VPN with

01:04:35,630 --> 01:04:44,839
the EVP and Safie on r1 and r3 all you

01:04:42,859 --> 01:04:48,200
really need to do to get it to work is

01:04:44,839 --> 01:04:53,300
specified advertise all vni so you

01:04:48,200 --> 01:04:57,700
notice r1 r3 habit and r2 just has the

01:04:53,300 --> 01:04:57,700
is a spine and doesn't need to have that

01:04:59,260 --> 01:05:05,300
BGP also has this concept of not using

01:05:03,050 --> 01:05:08,089
an address family unless you tell it so

01:05:05,300 --> 01:05:10,520
you do need to specify that you want to

01:05:08,089 --> 01:05:12,380
use a particular neighbor in a

01:05:10,520 --> 01:05:22,339
particular address family or that will

01:05:12,380 --> 01:05:25,849
not work so this is a the I've

01:05:22,339 --> 01:05:31,220
configured BGP and just some show

01:05:25,849 --> 01:05:35,839
commands and the the big one here is the

01:05:31,220 --> 01:05:39,079
show BGP L to VPN evpn there evpn has

01:05:35,839 --> 01:05:40,940
five different basic route types in this

01:05:39,079 --> 01:05:43,790
example we're only using route types two

01:05:40,940 --> 01:05:47,270
and three route type two is the MAC

01:05:43,790 --> 01:05:49,760
distribution between via VX LAN across

01:05:47,270 --> 01:05:52,450
the network and type three specifies how

01:05:49,760 --> 01:05:54,829
to handle the broadcast

01:05:52,450 --> 01:06:02,240
unidentified in multicast traffic across

01:05:54,829 --> 01:06:06,319
that network alright so where are we

01:06:02,240 --> 01:06:08,240
going with Fr on currently the main big

01:06:06,319 --> 01:06:11,299
thing we're working on is a zebra

01:06:08,240 --> 01:06:13,160
rewrite I think it was mentioned in an

01:06:11,299 --> 01:06:15,079
earlier talk today that David a Hearns

01:06:13,160 --> 01:06:17,359
working on rewrite in next hop groups

01:06:15,079 --> 01:06:19,430
may have specif breaking out routes and

01:06:17,359 --> 01:06:22,220
next hop groups in the most kernel well

01:06:19,430 --> 01:06:25,339
that it's going to bring a new net link

01:06:22,220 --> 01:06:27,290
protocol messages that we need to to

01:06:25,339 --> 01:06:30,140
actually use so that's something we're

01:06:27,290 --> 01:06:32,810
working on we're actually doing another

01:06:30,140 --> 01:06:34,750
CLI CLI rewrite again

01:06:32,810 --> 01:06:39,620
to take advantage of net coughing

01:06:34,750 --> 01:06:41,300
there's a a pull request semi-active

01:06:39,620 --> 01:06:43,010
pull requests that started that will

01:06:41,300 --> 01:06:44,000
start that conversion that's going to be

01:06:43,010 --> 01:06:46,580
happen in the next couple of weeks

01:06:44,000 --> 01:06:48,830
hopefully and the other thing we're

01:06:46,580 --> 01:06:50,090
actually thinking about doing and some

01:06:48,830 --> 01:06:51,920
people have actually started doing is

01:06:50,090 --> 01:06:54,710
full remote data planes and what I

01:06:51,920 --> 01:06:56,660
basically mean by that is that the Linux

01:06:54,710 --> 01:07:00,620
kernel would no longer be the FIB it

01:06:56,660 --> 01:07:04,900
would be a entirely different something

01:07:00,620 --> 01:07:08,980
else so you can basically allow you to

01:07:04,900 --> 01:07:11,510
install routes on to another device

01:07:08,980 --> 01:07:12,980
anywhere as long as you set up the

01:07:11,510 --> 01:07:17,630
appropriate communication methods

01:07:12,980 --> 01:07:21,230
between the different devices and people

01:07:17,630 --> 01:07:23,330
are come in with people are asking for a

01:07:21,230 --> 01:07:25,400
whole bunch of features and we kind of

01:07:23,330 --> 01:07:26,840
need people to work on them so if you're

01:07:25,400 --> 01:07:29,030
interested we have a whole bunch of

01:07:26,840 --> 01:07:30,230
feature requests and finally the the

01:07:29,030 --> 01:07:36,260
last thing or is we're going to have

01:07:30,230 --> 01:07:50,230
type 4 evpn which is multihoming alright

01:07:36,260 --> 01:07:50,230
that's it thanks yes sorry questions

01:07:50,979 --> 01:07:56,559
what do you want me to go oh sure

01:08:05,690 --> 01:08:08,690
yep

01:08:13,350 --> 01:08:17,580
it's gonna be built each each so

01:08:15,480 --> 01:08:19,440
effectively now when we did the Sealy

01:08:17,580 --> 01:08:21,450
rewrite year-and-a-half ago or two years

01:08:19,440 --> 01:08:23,549
ago now we had to go through and touch

01:08:21,450 --> 01:08:24,420
every single freaking demon and rewrite

01:08:23,549 --> 01:08:26,130
anything that's gonna be the same thing

01:08:24,420 --> 01:08:28,470
its products that more invasive and

01:08:26,130 --> 01:08:33,440
intrusive so we're so the goal from my

01:08:28,470 --> 01:08:33,440
perspective is to provide a middle API

01:08:35,750 --> 01:08:43,680
well you do because because we want to

01:08:38,880 --> 01:08:50,900
take the CLI and pull it out and use

01:08:43,680 --> 01:08:57,330
that middle API I don't believe that one

01:08:50,900 --> 01:09:00,420
the goal is to provide a seal an API for

01:08:57,330 --> 01:09:03,960
configuration between each demon and and

01:09:00,420 --> 01:09:07,109
and so so FRR is written with a very

01:09:03,960 --> 01:09:08,609
tight coupling between CLI and and

01:09:07,109 --> 01:09:11,040
implement it and we have to rip that

01:09:08,609 --> 01:09:12,569
apart put that metal layer in and then

01:09:11,040 --> 01:09:15,690
once we've done that you can have the

01:09:12,569 --> 01:09:18,180
net coffin yang talking through and then

01:09:15,690 --> 01:09:22,200
or in the reality is anyone who wants to

01:09:18,180 --> 01:09:24,420
write their configuration du jour they

01:09:22,200 --> 01:09:27,359
can just write to that API and things

01:09:24,420 --> 01:09:30,020
will just work you said you had two more

01:09:27,359 --> 01:09:30,020
questions did you

01:09:38,260 --> 01:09:43,580
so so it's the fpm Fordham playing

01:09:41,480 --> 01:09:47,690
manager that's its well so it's gonna

01:09:43,580 --> 01:09:50,390
change and I think we discussed this as

01:09:47,690 --> 01:09:54,710
well but to give everyone context I want

01:09:50,390 --> 01:09:57,950
to have we're gonna rip out so currently

01:09:54,710 --> 01:10:00,830
zebra talks to the Linux kernel via

01:09:57,950 --> 01:10:02,300
synchronous methodology and it so

01:10:00,830 --> 01:10:04,670
basically what that basically means is

01:10:02,300 --> 01:10:06,980
that we install route and then we wait

01:10:04,670 --> 01:10:10,190
for an answer so we need to rip that out

01:10:06,980 --> 01:10:11,900
and make it so that you say install this

01:10:10,190 --> 01:10:13,310
route and at some point in time in the

01:10:11,900 --> 01:10:16,430
future we get the notification back

01:10:13,310 --> 01:10:21,440
saying it was successful or not and and

01:10:16,430 --> 01:10:23,540
so so for every single type of thing you

01:10:21,440 --> 01:10:25,610
want to do to the kernel we have to do

01:10:23,540 --> 01:10:29,980
that change it from synchronous to

01:10:25,610 --> 01:10:33,890
asynchronous clearly define that API and

01:10:29,980 --> 01:10:35,810
and then program everything to it so so

01:10:33,890 --> 01:10:39,320
one of the real problems we have is that

01:10:35,810 --> 01:10:42,590
the different kernel interfaces are

01:10:39,320 --> 01:10:45,110
tightly coupled with zebra so it's just

01:10:42,590 --> 01:10:49,240
again ripping things apart putting the

01:10:45,110 --> 01:10:49,240
middle layer in and then program into it

01:10:50,140 --> 01:10:53,590
does that answer your question

01:10:55,810 --> 01:11:05,720
and so okay I'm sorry so to to to

01:10:58,370 --> 01:11:08,120
further extender but you know that so so

01:11:05,720 --> 01:11:10,970
so so we rip it apart put that metal air

01:11:08,120 --> 01:11:13,280
in and I want to be able to write a

01:11:10,970 --> 01:11:14,810
whole bunch of modules that I can pick

01:11:13,280 --> 01:11:17,390
and choose odd that I want to use the

01:11:14,810 --> 01:11:18,950
Linux kernel module clip I want to use

01:11:17,390 --> 01:11:20,180
afford and play manager that someone

01:11:18,950 --> 01:11:22,430
wrote bloop and they just have to write

01:11:20,180 --> 01:11:39,730
to that API and respond to it and pass

01:11:22,430 --> 01:11:43,010
up it worked or not there's so so

01:11:39,730 --> 01:11:44,330
there's there's ongoing talks about how

01:11:43,010 --> 01:11:50,060
that is properly done right now and

01:11:44,330 --> 01:11:52,990
there's some contention so you know fpm

01:11:50,060 --> 01:11:55,880
users don't like right did you know that

01:11:52,990 --> 01:11:57,590
it does there's two different ways you

01:11:55,880 --> 01:11:59,480
can use the fpm there's the net link and

01:11:57,590 --> 01:12:03,040
there's these other protobuf

01:11:59,480 --> 01:12:03,040
whoops sorry that

01:12:37,199 --> 01:12:43,840
I'm sorry but can you you speak so soft

01:12:40,689 --> 01:12:49,749
I have mine I'm going deaf did you could

01:12:43,840 --> 01:12:52,150
you come up and usually so Volta today

01:12:49,749 --> 01:12:54,369
so there's a guy from Volta networks

01:12:52,150 --> 01:12:56,650
who's working on and he submitted a pull

01:12:54,369 --> 01:12:58,539
request a couple days ago to start this

01:12:56,650 --> 01:12:59,559
ripping apart I've actually started

01:12:58,539 --> 01:13:03,579
working on it myself

01:12:59,559 --> 01:13:05,739
and over the last six months or so I

01:13:03,579 --> 01:13:07,360
started that work the synchronous

01:13:05,739 --> 01:13:14,050
asynchronous there's just a lot of work

01:13:07,360 --> 01:13:16,059
there it's there I'm not aware everyone

01:13:14,050 --> 01:13:17,679
using it there's a lot of you know it's

01:13:16,059 --> 01:13:19,090
with is with most things there's a

01:13:17,679 --> 01:13:21,760
million little features of someone's

01:13:19,090 --> 01:13:23,320
throne attic yeah it's it's probably

01:13:21,760 --> 01:13:25,590
been two years three years since it was

01:13:23,320 --> 01:13:25,590
put in

01:13:31,280 --> 01:13:40,400
all of them there's a lot I mean we have

01:13:35,809 --> 01:13:42,409
probably close to 30 feature requests

01:13:40,400 --> 01:13:46,989
that people have asked for I'm not I

01:13:42,409 --> 01:13:50,239
basically tell people sounds awesome

01:13:46,989 --> 01:13:52,309
bring me code yeah you can't write so

01:13:50,239 --> 01:13:55,849
and and you know I work for cumulus and

01:13:52,309 --> 01:13:58,309
I do what is best for cumulus and so on

01:13:55,849 --> 01:13:59,900
with an RFC that matters for a non

01:13:58,309 --> 01:14:06,940
datacenter usage I'm not gonna spend a

01:13:59,900 --> 01:14:06,940
lot of time on any other questions

01:14:09,780 --> 01:14:13,229

YouTube URL: https://www.youtube.com/watch?v=NxP9lBvoawE


