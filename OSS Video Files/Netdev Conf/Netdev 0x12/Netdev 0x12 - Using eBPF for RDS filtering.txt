Title: Netdev 0x12 - Using eBPF for RDS filtering
Publication date: 2018-08-01
Playlist: Netdev 0x12
Description: 
	On July 13th, 2018, Tushar Dave shared his experiences at Netdev 0x12 in Montreal, in implementing Reliable Datagram Socket (RDS) filtering and firewalling. RDS sits on top of both TCP and IB, which presents a challenge:
while TCP deals with skbs, IB/RDMA deals with scatterlists. Traditional firewalling with netfilter deals only with skbs. Tushar was looking for a
unified solution for both TCP and IB.
To this end he was adding/extending eBPF helpers to process messages that
are in the form of struct scatterlist.

More info:
https://www.netdevconf.org/0x12/session.html?using-ebpf-for-rds-filtering
Captions: 
	00:00:00,829 --> 00:00:15,030
- sure it's 100 over T - sure can you

00:00:08,160 --> 00:00:23,130
hear me yeah yeah and it gets here me

00:00:15,030 --> 00:00:24,900
yeah yes we can all right I I have to I

00:00:23,130 --> 00:00:27,000
have to ask somebody at there so that

00:00:24,900 --> 00:00:28,740
they can you know go to the next slides

00:00:27,000 --> 00:00:30,779
depending on you know how long I take on

00:00:28,740 --> 00:00:41,420
the sides because I cannot control sites

00:00:30,779 --> 00:00:41,420
from here he can't control the slides so

00:00:41,989 --> 00:00:53,520
you know once I finish up my slides I'm

00:00:44,700 --> 00:00:56,309
going to say okay next slide okay all

00:00:53,520 --> 00:00:57,780
right my my name is tisha day I work for

00:00:56,309 --> 00:01:01,530
Oracle and what I'm going to talk about

00:00:57,780 --> 00:01:02,699
using EBP f-for RDS filtering the agenda

00:01:01,530 --> 00:01:04,769
looks like you know I'm going to be a

00:01:02,699 --> 00:01:07,110
little bit brief about what is RDS I

00:01:04,769 --> 00:01:08,520
know that you know some of me probably

00:01:07,110 --> 00:01:10,110
know more about Hardy as some of

00:01:08,520 --> 00:01:11,580
probably don't have any idea about RDS

00:01:10,110 --> 00:01:13,439
I'm going to go a little bit brief so

00:01:11,580 --> 00:01:14,760
that you know it set the tone so that I

00:01:13,439 --> 00:01:16,920
can talk about the problem that we are

00:01:14,760 --> 00:01:18,390
trying to solve I'll talk about the

00:01:16,920 --> 00:01:19,650
solution that we considered and the

00:01:18,390 --> 00:01:22,860
solution that we actually you know took

00:01:19,650 --> 00:01:24,600
has a POC and implemented some of the of

00:01:22,860 --> 00:01:27,390
the code as an RFC sent into the native

00:01:24,600 --> 00:01:28,860
and then I definitely leave couple of

00:01:27,390 --> 00:01:39,090
room you know corroborates of room for

00:01:28,860 --> 00:01:42,150
qln exercise please okay so our D S

00:01:39,090 --> 00:01:43,710
stands for reliable Datagram socket from

00:01:42,150 --> 00:01:46,110
the layman's term think about this as a

00:01:43,710 --> 00:01:48,479
reliable UDP however you know this

00:01:46,110 --> 00:01:50,100
basically provides a RDS is being used

00:01:48,479 --> 00:01:52,560
highly in Oracle rapid application

00:01:50,100 --> 00:01:54,329
clusters where each node in the cluster

00:01:52,560 --> 00:01:57,090
basically runs are you know different a

00:01:54,329 --> 00:01:59,399
DBMS are diverse applications this is a

00:01:57,090 --> 00:02:00,990
high performance you know reliable

00:01:59,399 --> 00:02:04,049
connectionless protocol which basically

00:02:00,990 --> 00:02:07,700
provides in delivery datagrams think of

00:02:04,049 --> 00:02:10,470
ideas as it's a transport layer protocol

00:02:07,700 --> 00:02:13,290
but it basically sits on top of PCP and

00:02:10,470 --> 00:02:13,770
ID so you know it can work with with the

00:02:13,290 --> 00:02:15,840
ether

00:02:13,770 --> 00:02:17,190
channel which basically is the packet

00:02:15,840 --> 00:02:19,560
arrives in and goes through the

00:02:17,190 --> 00:02:21,360
regularly Thunder stack tcp/ip stack or

00:02:19,560 --> 00:02:23,460
it can work with the InfiniBand channel

00:02:21,360 --> 00:02:26,220
as well where the packet is basically

00:02:23,460 --> 00:02:29,820
you know use go through our DMA or IB

00:02:26,220 --> 00:02:34,110
stack from the from the user space

00:02:29,820 --> 00:02:36,600
perspective you know powder so this is a

00:02:34,110 --> 00:02:37,860
typical kind server model you know you

00:02:36,600 --> 00:02:41,400
know client basically open up a socket

00:02:37,860 --> 00:02:43,500
which is of domain PF RDS but client

00:02:41,400 --> 00:02:45,900
also has to set the transport because we

00:02:43,500 --> 00:02:47,610
deal with to kind of transport and you

00:02:45,900 --> 00:02:49,770
know just bind the local address and use

00:02:47,610 --> 00:02:51,210
the local you know just a regular send

00:02:49,770 --> 00:02:55,410
message and the same message system call

00:02:51,210 --> 00:02:57,740
to communicate with the server next

00:02:55,410 --> 00:02:57,740
slide please

00:02:57,770 --> 00:03:03,360
all right so how does it look like look

00:03:01,320 --> 00:03:05,040
like from the architecture overview you

00:03:03,360 --> 00:03:07,230
know so you can see that on the left

00:03:05,040 --> 00:03:09,630
side as I don't like you know you have

00:03:07,230 --> 00:03:12,360
to kind of transport one is Ethernet so

00:03:09,630 --> 00:03:15,000
we we basically off of the TCP we have a

00:03:12,360 --> 00:03:16,800
module call RDS RDS TCP that deals with

00:03:15,000 --> 00:03:20,730
anything that comes from the pc k is

00:03:16,800 --> 00:03:23,550
there and eventually once the packet is

00:03:20,730 --> 00:03:25,290
arrived at the RDS DCP the we have a

00:03:23,550 --> 00:03:26,730
transport independent layer model called

00:03:25,290 --> 00:03:28,140
RDS code which basically you know

00:03:26,730 --> 00:03:29,430
eventually take the packet and does all

00:03:28,140 --> 00:03:31,470
the communication with the user space

00:03:29,430 --> 00:03:35,040
same happily with when we have

00:03:31,470 --> 00:03:36,930
InfiniBand as a like you know IV as as a

00:03:35,040 --> 00:03:38,880
channel however the packet goes through

00:03:36,930 --> 00:03:40,320
IBRD a mistake you know we have RDS

00:03:38,880 --> 00:03:42,209
already every model so we have two

00:03:40,320 --> 00:03:44,430
different transfer models right on top

00:03:42,209 --> 00:03:46,890
of the transport we have RDS TCP we have

00:03:44,430 --> 00:03:49,050
RDS our DNA eventually they both talk to

00:03:46,890 --> 00:03:50,790
the transport independent like you know

00:03:49,050 --> 00:03:52,410
transport in depend independently a

00:03:50,790 --> 00:03:53,970
module call RDS code which basically

00:03:52,410 --> 00:03:55,800
does all the talk and the transfer

00:03:53,970 --> 00:03:57,870
between the obvious application which

00:03:55,800 --> 00:04:00,209
runs into the user space the point that

00:03:57,870 --> 00:04:02,520
I want to make here is on the left when

00:04:00,209 --> 00:04:04,680
we have Ethernet an tcp/ip stack we have

00:04:02,520 --> 00:04:07,020
packet which is containing skb which is

00:04:04,680 --> 00:04:08,730
our regular Escobar however on the when

00:04:07,020 --> 00:04:13,140
we deal with the InfiniBand Channel and

00:04:08,730 --> 00:04:14,220
you know I was saying how is this

00:04:13,140 --> 00:04:15,630
catalyst we don't have any any other

00:04:14,220 --> 00:04:17,850
form but you know just a regular general

00:04:15,630 --> 00:04:19,470
steadily structure so you know we have

00:04:17,850 --> 00:04:21,000
to deal with both kind of things you

00:04:19,470 --> 00:04:22,830
know and and I will talk about more that

00:04:21,000 --> 00:04:25,470
okay this this whole talk is based on

00:04:22,830 --> 00:04:26,240
this dip to different kind of meth form

00:04:25,470 --> 00:04:27,680
of

00:04:26,240 --> 00:04:28,819
form of structures that we have to deal

00:04:27,680 --> 00:04:30,319
with when we have to deal with the

00:04:28,819 --> 00:04:32,750
packet filtering or any kind of like in

00:04:30,319 --> 00:04:38,900
a deep packet inspection next please

00:04:32,750 --> 00:04:42,410
thank you all right so you know what

00:04:38,900 --> 00:04:44,720
problem you're trying to solve now we

00:04:42,410 --> 00:04:47,240
are trying to implement you know a

00:04:44,720 --> 00:04:49,099
filtering kind of solution for RDS at

00:04:47,240 --> 00:04:51,080
the RDS core layer right which is

00:04:49,099 --> 00:04:53,000
independent of the transform where we

00:04:51,080 --> 00:04:55,910
have to kind of you know structure to

00:04:53,000 --> 00:04:58,240
deal with what we want to do is is for

00:04:55,910 --> 00:05:01,910
the for further rehabilitation cluster

00:04:58,240 --> 00:05:03,500
force is um we want to look and identify

00:05:01,910 --> 00:05:05,780
even on we want to do deep packet

00:05:03,500 --> 00:05:08,630
inspection for every adieus message that

00:05:05,780 --> 00:05:10,550
we receive at the RDS code and if the

00:05:08,630 --> 00:05:11,930
message is being identified as okay it

00:05:10,550 --> 00:05:14,150
belongs to a certain date of this

00:05:11,930 --> 00:05:15,889
service we want to we want to basically

00:05:14,150 --> 00:05:19,009
found that message directly to that

00:05:15,889 --> 00:05:20,990
database service if the message is not

00:05:19,009 --> 00:05:22,940
identified as one of the you know

00:05:20,990 --> 00:05:25,190
candidate for the database service which

00:05:22,940 --> 00:05:28,330
is running on the loan we might probably

00:05:25,190 --> 00:05:30,979
need to you know change the RDS header

00:05:28,330 --> 00:05:32,659
and and probably forward that packet to

00:05:30,979 --> 00:05:36,020
the another node which runs the database

00:05:32,659 --> 00:05:37,729
intake of a service or we might just

00:05:36,020 --> 00:05:39,169
need to just you know drop the packet

00:05:37,729 --> 00:05:43,039
because that that packet you know it's

00:05:39,169 --> 00:05:45,320
not important at all so you know just a

00:05:43,039 --> 00:05:46,880
regular kind of you know actions that we

00:05:45,320 --> 00:05:49,310
have to cook the point is we have to

00:05:46,880 --> 00:05:51,289
look at the RDS header as well as RDS

00:05:49,310 --> 00:05:53,000
payload because our DSP load it

00:05:51,289 --> 00:05:54,710
basically gives us the idea if it

00:05:53,000 --> 00:05:59,330
belongs to a certain kind of service or

00:05:54,710 --> 00:06:01,759
not so looking at this do we have any

00:05:59,330 --> 00:06:05,840
unified filtering solution that that

00:06:01,759 --> 00:06:09,110
that we can use today further so are

00:06:05,840 --> 00:06:12,099
these tcp or even again you know we look

00:06:09,110 --> 00:06:15,889
around and what we figured is next slide

00:06:12,099 --> 00:06:17,509
what we figured is there is something

00:06:15,889 --> 00:06:19,479
net filter I mean you know that comes to

00:06:17,509 --> 00:06:22,430
cost or mine we looked at over it and

00:06:19,479 --> 00:06:24,380
you know we can use it today for RDS TCP

00:06:22,430 --> 00:06:25,699
however in our experiment it looks like

00:06:24,380 --> 00:06:28,190
you know we cannot use it for RDS

00:06:25,699 --> 00:06:30,590
infinity because we are the major

00:06:28,190 --> 00:06:33,080
disadvantage for ornette filter is it

00:06:30,590 --> 00:06:34,940
only deals with Escobar and we don't

00:06:33,080 --> 00:06:37,070
have esta buff and we have you know

00:06:34,940 --> 00:06:40,040
everything that comes or IB or you know

00:06:37,070 --> 00:06:41,630
Instagram so we love

00:06:40,040 --> 00:06:43,340
you look around and we look Frank you

00:06:41,630 --> 00:06:47,900
know another alternatives and the second

00:06:43,340 --> 00:06:50,990
alternative is next like this so

00:06:47,900 --> 00:06:54,200
alternative that we find is EVF now you

00:06:50,990 --> 00:06:55,730
know EBP F is is being adopted growing

00:06:54,200 --> 00:06:57,260
rapidly you know a lot of things have

00:06:55,730 --> 00:07:00,320
been implemented being used for you know

00:06:57,260 --> 00:07:03,680
socket filtering PC you know we have

00:07:00,320 --> 00:07:05,300
solution for X DP and whatnot so when I

00:07:03,680 --> 00:07:08,150
look around personally and I look for

00:07:05,300 --> 00:07:10,010
okay what if EVP F can be a fit for RDS

00:07:08,150 --> 00:07:12,440
two things that come to my mind and that

00:07:10,010 --> 00:07:15,760
that that I want to point out here is we

00:07:12,440 --> 00:07:18,380
have a very strong you know

00:07:15,760 --> 00:07:20,390
infrastructure for EVF right now in

00:07:18,380 --> 00:07:22,400
netcode filter dorsey very easy to

00:07:20,390 --> 00:07:23,630
understand as far as you know new BSD

00:07:22,400 --> 00:07:26,570
BPF when I went in like you know a few

00:07:23,630 --> 00:07:28,880
months back and the best part is sample

00:07:26,570 --> 00:07:31,100
vpf we have a sample vpf enter tons of

00:07:28,880 --> 00:07:32,840
example there so you know trying to

00:07:31,100 --> 00:07:35,570
implement something as a POC to see that

00:07:32,840 --> 00:07:37,310
if that fits our need or not that EBP F

00:07:35,570 --> 00:07:39,710
solution what we have in the kernel

00:07:37,310 --> 00:07:41,810
existed it feels more feasible that okay

00:07:39,710 --> 00:07:43,850
we should be we should try this with

00:07:41,810 --> 00:07:45,950
with what we are trying to solve the

00:07:43,850 --> 00:07:47,150
other I mean you know justjust just

00:07:45,950 --> 00:07:48,980
looking over and you know jotting down

00:07:47,150 --> 00:07:51,500
the notes and bullet items we also find

00:07:48,980 --> 00:07:54,290
that the side advantage if we choose vpf

00:07:51,500 --> 00:07:55,760
for the filtering we can use it for RDS

00:07:54,290 --> 00:07:57,980
observability or or I would say

00:07:55,760 --> 00:07:59,420
debugging and and just to point out as

00:07:57,980 --> 00:08:01,700
an example there are more multiple

00:07:59,420 --> 00:08:03,530
things we can do as a deeper game but

00:08:01,700 --> 00:08:05,750
you know today we don't have anything

00:08:03,530 --> 00:08:07,940
like you know for for tcp/ip when we

00:08:05,750 --> 00:08:10,220
receive traffic over Ethernet channel if

00:08:07,940 --> 00:08:12,110
we run TCP dump on RDS packet which is

00:08:10,220 --> 00:08:14,900
which is for your internet for RDS TCP

00:08:12,110 --> 00:08:16,640
module you don't it's hard to parse the

00:08:14,900 --> 00:08:18,620
message because you know RDS message

00:08:16,640 --> 00:08:21,080
does not because of the stream TCP

00:08:18,620 --> 00:08:23,810
stream nature it does not piss out the

00:08:21,080 --> 00:08:26,270
message boundaries so you know I mean

00:08:23,810 --> 00:08:27,950
just just just write simple POC we could

00:08:26,270 --> 00:08:29,240
dump the RDS yeah are the s packet

00:08:27,950 --> 00:08:32,060
completely with the with the with with

00:08:29,240 --> 00:08:35,030
with the header and the payload so all

00:08:32,060 --> 00:08:36,950
in all EVPs seems like a win and I

00:08:35,030 --> 00:08:42,260
pursue with that and then what I have

00:08:36,950 --> 00:08:44,740
done next time okay so what I've done

00:08:42,260 --> 00:08:48,860
how does how does this go into feet much

00:08:44,740 --> 00:08:51,680
because RDS is a type of sorted and you

00:08:48,860 --> 00:08:53,090
know that so before I go into that EBP F

00:08:51,680 --> 00:08:53,600
has a lot of different kind of

00:08:53,090 --> 00:08:56,089
programmer

00:08:53,600 --> 00:08:57,709
right now if you if you if you if you

00:08:56,089 --> 00:08:59,810
look at just a you know netfilter Dorsey

00:08:57,709 --> 00:09:02,120
file or even the sample vpf you know

00:08:59,810 --> 00:09:03,860
the-the-the BPF libraries that we have

00:09:02,120 --> 00:09:06,829
you can see that we have we have we have

00:09:03,860 --> 00:09:08,959
programs type for caca filter we have

00:09:06,829 --> 00:09:11,360
program types for TC we have for you

00:09:08,959 --> 00:09:15,009
know stock map we have cgroups and all

00:09:11,360 --> 00:09:18,620
that because RDS is a type of socket I

00:09:15,009 --> 00:09:20,509
think it closely dissemble to what I try

00:09:18,620 --> 00:09:22,009
to do with RDS you know with the socket

00:09:20,509 --> 00:09:23,810
filtering we already have sorted

00:09:22,009 --> 00:09:26,509
filtering which we we have

00:09:23,810 --> 00:09:28,910
infrastructure in in there and and but

00:09:26,509 --> 00:09:35,959
the the problem is it only deals with SK

00:09:28,910 --> 00:09:37,069
B so you know for me I try to fit my

00:09:35,959 --> 00:09:38,720
link so that you know I can deal with

00:09:37,069 --> 00:09:41,060
the scatter list and somehow you know

00:09:38,720 --> 00:09:42,529
make this available for RDS however you

00:09:41,060 --> 00:09:44,149
know the existing socket filter or

00:09:42,529 --> 00:09:45,860
traditional socket filter that we have I

00:09:44,149 --> 00:09:48,970
could use the infrastructure but I could

00:09:45,860 --> 00:09:52,459
not use it like as it is so that means

00:09:48,970 --> 00:09:53,839
you know you know basically III get to

00:09:52,459 --> 00:09:55,550
the point where I have to I think of

00:09:53,839 --> 00:09:57,740
like you know okay the socket filtering

00:09:55,550 --> 00:09:59,480
if the artist is a socket but I need to

00:09:57,740 --> 00:10:02,089
implement something which heals with

00:09:59,480 --> 00:10:04,519
catalyst so I added a new v PF program

00:10:02,089 --> 00:10:05,990
type call be here profile socket SD

00:10:04,519 --> 00:10:08,959
filter which is similar to traditional

00:10:05,990 --> 00:10:10,250
socket filter X from that instead of SK

00:10:08,959 --> 00:10:11,959
buff it's going to deal with it's going

00:10:10,250 --> 00:10:13,250
to get it v PF scatter list or like you

00:10:11,959 --> 00:10:17,139
know I would say scatter list as a

00:10:13,250 --> 00:10:19,519
beating up our context I can use the the

00:10:17,139 --> 00:10:22,759
same load and attach kind of you know

00:10:19,519 --> 00:10:23,990
method for BP f SD filter as well which

00:10:22,759 --> 00:10:26,480
is like you know using a set socket

00:10:23,990 --> 00:10:29,360
option and the only thing that I need to

00:10:26,480 --> 00:10:32,389
adjust it here is you know sample PDF

00:10:29,360 --> 00:10:34,220
because I intend to use the sample v PF

00:10:32,389 --> 00:10:36,889
s as BPF lighter it is infrastructure

00:10:34,220 --> 00:10:39,380
and all that so all I did was I added a

00:10:36,889 --> 00:10:41,660
new program type so that my library can

00:10:39,380 --> 00:10:43,069
you know recognize my program like like

00:10:41,660 --> 00:10:45,529
you know fit additional socket filter

00:10:43,069 --> 00:10:48,470
you basically provide stack sorted in

00:10:45,529 --> 00:10:53,500
here I added new new type or new naming

00:10:48,470 --> 00:10:53,500
convention is called sock SG next

00:10:56,529 --> 00:11:03,459
okay so operating infrastructure you

00:11:01,300 --> 00:11:05,319
know if there's large there already I

00:11:03,459 --> 00:11:07,480
need to adjust it my new program type

00:11:05,319 --> 00:11:09,009
and and and you know so that it can

00:11:07,480 --> 00:11:13,569
receive the scatter list as a as a

00:11:09,009 --> 00:11:15,519
context now you know looking at why did

00:11:13,569 --> 00:11:18,639
I choose catalyst so I'm looking at SKB

00:11:15,519 --> 00:11:20,439
and schedule is closely it feels like to

00:11:18,639 --> 00:11:21,910
fit our needs catalyst is the common

00:11:20,439 --> 00:11:23,410
denominator between materials because

00:11:21,910 --> 00:11:25,360
skb itself has you know scattered it's

00:11:23,410 --> 00:11:28,600
inside you know the escape flag and all

00:11:25,360 --> 00:11:30,850
that so both of structure we feel like

00:11:28,600 --> 00:11:32,800
okay if we if we if we define a solution

00:11:30,850 --> 00:11:35,620
for that deals with scatter list we can

00:11:32,800 --> 00:11:37,930
we can we can use it for art yes after

00:11:35,620 --> 00:11:39,970
infrastructure what else is remaining so

00:11:37,930 --> 00:11:41,860
you know today if you have traditional

00:11:39,970 --> 00:11:43,269
socket filter we have we have function

00:11:41,860 --> 00:11:46,089
calls you know if you look at the filter

00:11:43,269 --> 00:11:47,319
dorsey file we have sk between function

00:11:46,089 --> 00:11:49,749
call which basically you know take the

00:11:47,319 --> 00:11:51,699
sk b does whatever it is you know take

00:11:49,749 --> 00:11:53,350
the RC you eventually find that okay do

00:11:51,699 --> 00:11:54,550
we have a socket filter program attached

00:11:53,350 --> 00:11:57,279
or not and eventually it called the

00:11:54,550 --> 00:11:59,319
affair program what form I need what I

00:11:57,279 --> 00:12:01,449
need is any kernel entity that want to

00:11:59,319 --> 00:12:03,819
deal with scatter list and for example V

00:12:01,449 --> 00:12:05,490
we have to build with RDS I needed a new

00:12:03,819 --> 00:12:07,990
function for let's G filter done and

00:12:05,490 --> 00:12:09,579
what this function does is basically you

00:12:07,990 --> 00:12:11,829
know similar to traditional socket

00:12:09,579 --> 00:12:14,589
filter this basically causes the scatter

00:12:11,829 --> 00:12:17,379
get the list and you know the point that

00:12:14,589 --> 00:12:18,670
I want to make is I did a new VP kernel

00:12:17,379 --> 00:12:20,649
level structure is called the ETF's

00:12:18,670 --> 00:12:22,689
catalyst and that that that structure

00:12:20,649 --> 00:12:24,970
basically has a scatter list that we

00:12:22,689 --> 00:12:26,980
want to deal with it basically deals

00:12:24,970 --> 00:12:28,480
with each element of this catalyst so I

00:12:26,980 --> 00:12:30,279
have to make sure that at which element

00:12:28,480 --> 00:12:32,199
I am because the first time I call that

00:12:30,279 --> 00:12:34,660
structure it basically passed the

00:12:32,199 --> 00:12:36,879
pointer to the first SG element to the

00:12:34,660 --> 00:12:38,589
BPF program so that's the reason I have

00:12:36,879 --> 00:12:40,809
current SG which points to the current

00:12:38,589 --> 00:12:43,509
index into the SG list I have number of

00:12:40,809 --> 00:12:46,120
SG element inside and the start and end

00:12:43,509 --> 00:12:48,189
is basically you know point like points

00:12:46,120 --> 00:12:48,699
to my beginning of the packet in my

00:12:48,189 --> 00:12:50,050
first

00:12:48,699 --> 00:12:52,240
I mean fragment of the packet in the

00:12:50,050 --> 00:12:54,999
first entry of the scatter gather list

00:12:52,240 --> 00:12:57,069
so when this function is being invoked

00:12:54,999 --> 00:12:59,410
it basically checks if the any BPA

00:12:57,069 --> 00:13:01,149
program is attached or not that's of the

00:12:59,410 --> 00:13:03,370
initial data structure which is internal

00:13:01,149 --> 00:13:04,990
data structure used only by the BP F

00:13:03,370 --> 00:13:07,480
which deals with the scatter list which

00:13:04,990 --> 00:13:09,279
is vpf scatter list and at the end it

00:13:07,480 --> 00:13:10,330
basically calls you know the regular BPA

00:13:09,279 --> 00:13:12,430
program gar

00:13:10,330 --> 00:13:14,800
which eventually you know if the program

00:13:12,430 --> 00:13:16,300
is attached then then the Columbia

00:13:14,800 --> 00:13:17,800
program is going to can work and then

00:13:16,300 --> 00:13:25,450
you know we basically passed the scatter

00:13:17,800 --> 00:13:27,760
list right here the next okay Tom not

00:13:25,450 --> 00:13:30,820
else I do any so we have infrastructure

00:13:27,760 --> 00:13:32,740
edit I added the infrastructure you know

00:13:30,820 --> 00:13:34,360
that basically deals with that I added

00:13:32,740 --> 00:13:36,790
the function call that the kernel module

00:13:34,360 --> 00:13:38,110
has to invoke to actually run the run

00:13:36,790 --> 00:13:38,800
the BPA program that deal with this

00:13:38,110 --> 00:13:40,930
catalyst

00:13:38,800 --> 00:13:42,760
I need something which is similar to

00:13:40,930 --> 00:13:44,950
what we have today we have for for SK

00:13:42,760 --> 00:13:47,440
but we have underscore SK before I would

00:13:44,950 --> 00:13:49,000
say you know the user visible but sure

00:13:47,440 --> 00:13:51,040
that that that basically you know BPA

00:13:49,000 --> 00:13:53,680
program can access I am in a similar

00:13:51,040 --> 00:13:56,050
structure for SD filter AMD and all that

00:13:53,680 --> 00:13:58,390
I need is data and data end so for

00:13:56,050 --> 00:14:00,310
whatever SG element I am in it will

00:13:58,390 --> 00:14:02,590
basically just point me so the start and

00:14:00,310 --> 00:14:04,600
end point that eventually get exposed to

00:14:02,590 --> 00:14:08,500
the user space through data and data and

00:14:04,600 --> 00:14:09,910
from the VP EPS catalyst structure there

00:14:08,500 --> 00:14:11,800
is something extra that I need and as

00:14:09,910 --> 00:14:13,150
the POC I'll talk about this later but

00:14:11,800 --> 00:14:17,020
as a proof of concept what I have done

00:14:13,150 --> 00:14:18,100
is um as I told you you know when when

00:14:17,020 --> 00:14:20,140
the first time the program is being

00:14:18,100 --> 00:14:22,540
invoked it only gives you the first

00:14:20,140 --> 00:14:25,360
catalyst entry somehow I need a

00:14:22,540 --> 00:14:27,040
mechanism so that I can retrieve or walk

00:14:25,360 --> 00:14:29,290
through the SG list you know are the

00:14:27,040 --> 00:14:32,140
scatter list elements so for that as a

00:14:29,290 --> 00:14:34,030
proof of concept I added something all

00:14:32,140 --> 00:14:36,010
you know BP FSG next which is a vpf

00:14:34,030 --> 00:14:38,950
helper and all that does if you look at

00:14:36,010 --> 00:14:41,110
look at here is when this function is

00:14:38,950 --> 00:14:43,420
being called from the BPF context for

00:14:41,110 --> 00:14:45,160
BPF program it will implement the

00:14:43,420 --> 00:14:46,030
current SG which basically allows me to

00:14:45,160 --> 00:14:48,940
point to the next

00:14:46,030 --> 00:14:51,370
SG index or SG element into SG list and

00:14:48,940 --> 00:14:53,440
then it will fit in all the start and

00:14:51,370 --> 00:14:56,590
end point ER and eventually return and

00:14:53,440 --> 00:14:57,910
then my BPA program now can access you

00:14:56,590 --> 00:14:59,830
know remaining element or the next

00:14:57,910 --> 00:15:03,030
element that is G list so with these

00:14:59,830 --> 00:15:05,470
three pieces all together to fit in I

00:15:03,030 --> 00:15:08,850
try to implement something in the sample

00:15:05,470 --> 00:15:08,850
vpf and next slide

00:15:12,930 --> 00:15:21,569
okay so you can see that you know this

00:15:16,860 --> 00:15:22,889
is simple simple user program and like a

00:15:21,569 --> 00:15:24,629
traditional socket filter what it does

00:15:22,889 --> 00:15:27,360
it basically open up a socket and you

00:15:24,629 --> 00:15:30,300
can see that it's on the very top it

00:15:27,360 --> 00:15:31,920
opens up EF RDS domain it checks it

00:15:30,300 --> 00:15:33,179
basically set the transport because we

00:15:31,920 --> 00:15:35,069
have to kind of transport so it's at

00:15:33,179 --> 00:15:37,290
either TCP or InfiniBand as a transport

00:15:35,069 --> 00:15:40,529
that some the socket address structure

00:15:37,290 --> 00:15:42,389
find the socket and eventually the last

00:15:40,529 --> 00:15:44,730
thing is it called set socket option so

00:15:42,389 --> 00:15:45,929
the attachment point of view and setting

00:15:44,730 --> 00:15:47,309
up things it's like similar

00:15:45,929 --> 00:15:49,379
client-server model I'm not doing

00:15:47,309 --> 00:15:51,600
anything extra here anything I'm doing

00:15:49,379 --> 00:15:54,959
it okay if it basically uses the same

00:15:51,600 --> 00:15:56,579
soh option you know as Soh BPF which

00:15:54,959 --> 00:15:58,709
basically allows me to connect you know

00:15:56,579 --> 00:16:01,529
attach my using the using existing

00:15:58,709 --> 00:16:03,899
existing socket filter infrastructure it

00:16:01,529 --> 00:16:09,480
allows me to connect my BPA program so

00:16:03,899 --> 00:16:11,189
next slide so so with that I my user

00:16:09,480 --> 00:16:14,459
program is done all all that I need is

00:16:11,189 --> 00:16:16,019
what all I needed was just make the side

00:16:14,459 --> 00:16:18,120
socket option there's no chain needed

00:16:16,019 --> 00:16:20,819
the chain that I need in the sample BPA

00:16:18,120 --> 00:16:22,980
program is you can see that on the top

00:16:20,819 --> 00:16:26,220
on the on the on the right bottom column

00:16:22,980 --> 00:16:29,309
I identified the program as the SEC

00:16:26,220 --> 00:16:30,990
talked SG which basically as I told you

00:16:29,309 --> 00:16:32,639
in the three flight bag that when I

00:16:30,990 --> 00:16:35,279
added the infrastructure and massage a

00:16:32,639 --> 00:16:37,620
little bit the sample DTF I edit sought

00:16:35,279 --> 00:16:39,689
SGS who identified as the program that

00:16:37,620 --> 00:16:43,769
deals that that going to they're going

00:16:39,689 --> 00:16:46,079
to receive scare together as a BPF vpf

00:16:43,769 --> 00:16:47,579
context that that context that

00:16:46,079 --> 00:16:49,110
eventually the further the structure is

00:16:47,579 --> 00:16:52,259
st peter md which basically have data

00:16:49,110 --> 00:16:54,300
and data encounter like you know Escobar

00:16:52,259 --> 00:16:58,499
has you know beginning is data and data

00:16:54,300 --> 00:17:00,449
n all all that I have is you know in

00:16:58,499 --> 00:17:01,949
this POC is it basically dump you bite

00:17:00,449 --> 00:17:03,749
from the from the from the scatter list

00:17:01,949 --> 00:17:06,120
which I rented is pointing I need to

00:17:03,749 --> 00:17:08,309
walk through and I cannot use loop so

00:17:06,120 --> 00:17:10,860
what I have done is I basically have BEF

00:17:08,309 --> 00:17:12,029
tail call here which I know that it has

00:17:10,860 --> 00:17:13,890
a limit of like you know thirty two

00:17:12,029 --> 00:17:17,220
nested call but for what I'm trying to

00:17:13,890 --> 00:17:18,870
show as a as a POC or you know that do

00:17:17,220 --> 00:17:22,500
is a PSI is a proof of concept I think

00:17:18,870 --> 00:17:24,480
that should be enough top this vpf next

00:17:22,500 --> 00:17:26,380
be a field call is being is being added

00:17:24,480 --> 00:17:28,810
and you can see that what SG is fair

00:17:26,380 --> 00:17:31,510
he's been calling it basically calls the

00:17:28,810 --> 00:17:34,870
vp f SG next which basically gives me

00:17:31,510 --> 00:17:37,360
then the increment the SG list index to

00:17:34,870 --> 00:17:39,790
the next SG element and then I call BP f

00:17:37,360 --> 00:17:42,750
KN call which eventually calls the the

00:17:39,790 --> 00:17:46,030
probe sg-1 and I can dump my packet so

00:17:42,750 --> 00:17:48,520
this is a very very very basic proof of

00:17:46,030 --> 00:17:49,930
concept you know going in the future of

00:17:48,520 --> 00:17:52,990
course I don't want to walk through the

00:17:49,930 --> 00:17:54,280
SG list I end today for for even skv we

00:17:52,990 --> 00:17:55,840
don't walk through the you know if

00:17:54,280 --> 00:17:57,970
you're multiple fragmented skb we don't

00:17:55,840 --> 00:18:00,580
walk through that I want something like

00:17:57,970 --> 00:18:03,460
okay it is my scatter list and here's my

00:18:00,580 --> 00:18:04,750
offset go figure it out and I want to do

00:18:03,460 --> 00:18:06,280
similar things for those catalysts so

00:18:04,750 --> 00:18:08,140
that you know we can all guinea to this

00:18:06,280 --> 00:18:10,450
way we need to pull pull certain whites

00:18:08,140 --> 00:18:12,610
we need to look at the packet and then

00:18:10,450 --> 00:18:14,890
we need to take certain action so but as

00:18:12,610 --> 00:18:23,350
a POC the infrastructure work and the

00:18:14,890 --> 00:18:25,870
basic stuff is done next all right so

00:18:23,350 --> 00:18:29,110
having EBP F infrastructure temple BPA

00:18:25,870 --> 00:18:30,820
program and POC done of course I need to

00:18:29,110 --> 00:18:33,310
make certain I just went into RDS as

00:18:30,820 --> 00:18:35,050
well however in my experience we have to

00:18:33,310 --> 00:18:37,990
do very little less modification into

00:18:35,050 --> 00:18:40,480
RDS the the point that I wanna make is

00:18:37,990 --> 00:18:43,600
because of the to transport and we have

00:18:40,480 --> 00:18:47,260
RDS TCP and RDS you know our DMS a

00:18:43,600 --> 00:18:48,910
module pontius tcp of course we need to

00:18:47,260 --> 00:18:51,070
convert sk b before we give it to the

00:18:48,910 --> 00:18:52,690
scatter list so we use existing kernel

00:18:51,070 --> 00:18:55,840
function has kb - STV which basically

00:18:52,690 --> 00:18:58,090
you know does the job and we give us us

00:18:55,840 --> 00:19:00,250
catalyst and we basically give it to

00:18:58,090 --> 00:19:02,200
feed it to the kernel program besides

00:19:00,250 --> 00:19:04,060
that you can see that you know there is

00:19:02,200 --> 00:19:06,610
only like you know a couple of lineup

00:19:04,060 --> 00:19:10,020
changes and the and and as you can see

00:19:06,610 --> 00:19:12,520
that any kernel entity that wants to

00:19:10,020 --> 00:19:14,410
filter out program based off scatter get

00:19:12,520 --> 00:19:16,630
the list they have to run a sequel to

00:19:14,410 --> 00:19:17,890
run and and and that function is I

00:19:16,630 --> 00:19:20,230
showed in the previous slide it

00:19:17,890 --> 00:19:23,140
basically does the job sets of the const

00:19:20,230 --> 00:19:25,120
context-- call the function call the vpf

00:19:23,140 --> 00:19:26,650
program and through BPA program you can

00:19:25,120 --> 00:19:29,820
handle and you can look into the packet

00:19:26,650 --> 00:19:29,820
like what we do with as data

00:19:33,630 --> 00:19:38,970
so with that what are the next steps I

00:19:36,780 --> 00:19:40,680
want to I want to first thank John

00:19:38,970 --> 00:19:42,900
festive in and then Avoca men for

00:19:40,680 --> 00:19:44,430
looking at my RFC and giving me valuable

00:19:42,900 --> 00:19:46,680
feedback this RFC's is being sent

00:19:44,430 --> 00:19:49,500
probably about two weeks two weeks back

00:19:46,680 --> 00:19:52,620
or couple of days back the suggestion

00:19:49,500 --> 00:19:55,110
that came from Daniel is you that I'm

00:19:52,620 --> 00:19:58,200
using set socket option as wattage BPF

00:19:55,110 --> 00:20:01,170
for RDS today however if you look

00:19:58,200 --> 00:20:03,630
closely with the design that I have or

00:20:01,170 --> 00:20:05,820
the infrastructure that I try to use as

00:20:03,630 --> 00:20:08,670
a traditional socket filter somebody can

00:20:05,820 --> 00:20:10,950
attach you know non RDS socket which is

00:20:08,670 --> 00:20:13,350
a regular TCP or UDP socket and they

00:20:10,950 --> 00:20:15,620
they can and they can get the you know

00:20:13,350 --> 00:20:18,330
with s they can always get you know

00:20:15,620 --> 00:20:20,760
Escobar as a context while they can get

00:20:18,330 --> 00:20:23,370
the addition the program is expecting

00:20:20,760 --> 00:20:25,080
catalyst so there is a potential chance

00:20:23,370 --> 00:20:28,050
here that you know this can harm the

00:20:25,080 --> 00:20:30,690
kernel so the device that I got is um I

00:20:28,050 --> 00:20:32,880
should make this more kind of like RDS

00:20:30,690 --> 00:20:35,640
specific to begin with and then look for

00:20:32,880 --> 00:20:39,540
the more detail option so I'm working on

00:20:35,640 --> 00:20:42,090
that the second thing was there is

00:20:39,540 --> 00:20:44,550
something other than you know stock SG

00:20:42,090 --> 00:20:46,410
that today deals with scatter list and

00:20:44,550 --> 00:20:49,320
which is there in the BPF and that is

00:20:46,410 --> 00:20:51,210
soft map park map actually also deals

00:20:49,320 --> 00:20:53,430
with scatter list because it basically

00:20:51,210 --> 00:20:55,680
deals with you know TNS transform your

00:20:53,430 --> 00:20:57,780
security protocols and when the context

00:20:55,680 --> 00:20:59,790
is scatter list so we have some core we

00:20:57,780 --> 00:21:02,430
have some filters sorry we have some VP

00:20:59,790 --> 00:21:03,720
of helpers as well so I've been I've

00:21:02,430 --> 00:21:06,120
been told that okay you know if I could

00:21:03,720 --> 00:21:07,830
just try to reuse the code as much as

00:21:06,120 --> 00:21:10,380
possible which is the only thing that I

00:21:07,830 --> 00:21:13,770
have is vpf some structures and and BPF

00:21:10,380 --> 00:21:15,390
helper then that would make it more fit

00:21:13,770 --> 00:21:16,950
into the kernel as well so that we could

00:21:15,390 --> 00:21:18,960
reuse and we could you know share the

00:21:16,950 --> 00:21:21,810
helper as well and of course you know

00:21:18,960 --> 00:21:24,600
because this was POC I didn't send any I

00:21:21,810 --> 00:21:26,130
didn't have any any any action code like

00:21:24,600 --> 00:21:27,600
you know past four or top the packet

00:21:26,130 --> 00:21:30,000
like we have it for XDP or something

00:21:27,600 --> 00:21:32,190
like that so definitely I'm going to add

00:21:30,000 --> 00:21:34,470
those force and you know the intention

00:21:32,190 --> 00:21:36,540
is that function one once your kernel

00:21:34,470 --> 00:21:39,180
program looks into this you know the RDS

00:21:36,540 --> 00:21:41,460
kernel program BPA program looks into

00:21:39,180 --> 00:21:43,980
the scatter list identify the message

00:21:41,460 --> 00:21:45,690
where it belongs probably you know

00:21:43,980 --> 00:21:47,450
mangle with the payload or tangle with

00:21:45,690 --> 00:21:50,389
the RDS headers changes

00:21:47,450 --> 00:21:52,549
get back to the RDS core module then the

00:21:50,389 --> 00:21:53,959
X and code is being passed an RDS core

00:21:52,549 --> 00:21:55,940
module eventually you know either send

00:21:53,959 --> 00:21:58,339
it to up strict send it to you know

00:21:55,940 --> 00:22:01,399
inject reinjected to the user space the

00:21:58,339 --> 00:22:04,239
regular path forward it to another rack

00:22:01,399 --> 00:22:10,940
node or you know just drop the package

00:22:04,239 --> 00:22:16,009
next all right

00:22:10,940 --> 00:22:17,359
so future work you know in the previous

00:22:16,009 --> 00:22:19,219
slide I said that I got an advice that

00:22:17,359 --> 00:22:20,509
you know I should make this more RDS

00:22:19,219 --> 00:22:23,239
specific especially for that hatch

00:22:20,509 --> 00:22:24,859
option I would do that however you know

00:22:23,239 --> 00:22:26,719
I'm still finding alternatives and

00:22:24,859 --> 00:22:28,219
solutions so that you know we could we

00:22:26,719 --> 00:22:29,869
could make this more available like more

00:22:28,219 --> 00:22:32,570
generic for other socket types as well

00:22:29,869 --> 00:22:34,940
you if you know if anybody wants to use

00:22:32,570 --> 00:22:37,909
you know don't have skb and they want to

00:22:34,940 --> 00:22:41,029
use catalysts they can use this so I'm

00:22:37,909 --> 00:22:42,709
working on that the other thing is you

00:22:41,029 --> 00:22:44,570
know eventually I want to use a sample

00:22:42,709 --> 00:22:46,700
VP of similar constructs so that we can

00:22:44,570 --> 00:22:48,889
provide a kind of you know small library

00:22:46,700 --> 00:22:50,539
if sample BPF can work out that would be

00:22:48,889 --> 00:22:53,570
great if it doesn't work out for what

00:22:50,539 --> 00:22:54,950
what what we want for database III and

00:22:53,570 --> 00:22:56,869
this is know for internal but I want to

00:22:54,950 --> 00:22:59,719
build some certain constructs so that

00:22:56,869 --> 00:23:01,759
it's easy it is easy from the user space

00:22:59,719 --> 00:23:04,339
or from administrative perspective so

00:23:01,759 --> 00:23:05,989
that we can write rules or you're some

00:23:04,339 --> 00:23:08,119
kind of slips on the user space where we

00:23:05,989 --> 00:23:09,769
can specify what is our intention what

00:23:08,119 --> 00:23:12,259
we want to figure out you know how we

00:23:09,769 --> 00:23:21,259
want to take certain actions so that's

00:23:12,259 --> 00:23:23,239
format the for the future next file

00:23:21,259 --> 00:23:28,039
basically we'll call of minutes further

00:23:23,239 --> 00:23:30,609
questions thank you any questions any

00:23:28,039 --> 00:23:30,609
questions

00:23:38,830 --> 00:23:42,730
nobody nobody

00:23:47,900 --> 00:23:59,010
so I don't ask a question well yeah the

00:23:55,280 --> 00:24:00,960
so what are you suggesting is so EBP F

00:23:59,010 --> 00:24:03,110
currently is missing scary guys all

00:24:00,960 --> 00:24:06,510
right did I understand that correctly

00:24:03,110 --> 00:24:12,120
yes because it doesn't use a proper skb

00:24:06,510 --> 00:24:15,360
it's its own variant of what an escapee

00:24:12,120 --> 00:24:17,400
is yes any anything that we have is is

00:24:15,360 --> 00:24:19,170
mostly dealing with sk v sk except that

00:24:17,400 --> 00:24:21,030
one point that such a one one other

00:24:19,170 --> 00:24:22,830
example that i say it is sock SG but

00:24:21,030 --> 00:24:25,590
that is completely based of the c groups

00:24:22,830 --> 00:24:28,860
and the the way it fits in and it builds

00:24:25,590 --> 00:24:30,809
with the soft map we don't want and that

00:24:28,860 --> 00:24:32,760
that if i go on that route that makes it

00:24:30,809 --> 00:24:34,980
more complex and it doesn't fit the lead

00:24:32,760 --> 00:24:37,140
that we need for Ras we for RDS we need

00:24:34,980 --> 00:24:38,880
pretty simple thing and being a socket

00:24:37,140 --> 00:24:40,380
we want something like you know I think

00:24:38,880 --> 00:24:42,059
socket filter would completely fit the

00:24:40,380 --> 00:24:44,910
knee and we could do the job without

00:24:42,059 --> 00:24:46,920
adding much much changes because of the

00:24:44,910 --> 00:24:49,170
EVP F we have to add a new program type

00:24:46,920 --> 00:24:51,059
so that it's being identified and other

00:24:49,170 --> 00:24:53,670
than that of course I mean I could use

00:24:51,059 --> 00:24:55,410
to use the you know BPA filters which is

00:24:53,670 --> 00:24:57,390
which which which is there which deals

00:24:55,410 --> 00:25:00,210
with scatter list but the the core

00:24:57,390 --> 00:25:02,880
infrastructure is not there that the BPF

00:25:00,210 --> 00:25:06,480
context evening is being passed as a

00:25:02,880 --> 00:25:10,260
scattered list okay Fulvio any comment

00:25:06,480 --> 00:25:18,420
on that you didn't have to do a scare

00:25:10,260 --> 00:25:20,790
together yeah I guess what's the status

00:25:18,420 --> 00:25:22,860
we you submitted dispatches yes all

00:25:20,790 --> 00:25:24,330
right well you label them as POC you're

00:25:22,860 --> 00:25:28,350
not submitting them or are you planning

00:25:24,330 --> 00:25:29,720
to I mentioned there's other POC when I

00:25:28,350 --> 00:25:33,030
begin the world but when I send my

00:25:29,720 --> 00:25:34,290
Iverson to as an RFC which is out you

00:25:33,030 --> 00:25:35,880
know that being that that is being

00:25:34,290 --> 00:25:37,710
reviewed and my intention is to you know

00:25:35,880 --> 00:25:40,140
I was just waiting for this one so I get

00:25:37,710 --> 00:25:41,550
some feedback and definitely I got some

00:25:40,140 --> 00:25:43,320
feedback from the community by Union as

00:25:41,550 --> 00:25:45,000
well but I want to just deliver my talk

00:25:43,320 --> 00:25:47,640
and then you know from tomorrow I'm

00:25:45,000 --> 00:25:50,070
going to work on making our FCS v3 and

00:25:47,640 --> 00:25:52,640
do the suggest exchanges and you know

00:25:50,070 --> 00:25:54,500
make it into the kernel that's intention

00:25:52,640 --> 00:25:58,870
okay thanks

00:25:54,500 --> 00:26:01,870
nobody else has comments we can let too

00:25:58,870 --> 00:26:11,700
go thanks first remote speaker ever

00:26:01,870 --> 00:26:11,700

YouTube URL: https://www.youtube.com/watch?v=Cv0I_mHsoGA


