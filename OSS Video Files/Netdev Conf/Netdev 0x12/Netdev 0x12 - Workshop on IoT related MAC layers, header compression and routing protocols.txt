Title: Netdev 0x12 - Workshop on IoT related MAC layers, header compression and routing protocols
Publication date: 2018-07-31
Playlist: Netdev 0x12
Description: 
	On July 11th, 2018, Stefan Schmidt chaired in a working session with face to face discussions on IoT related MAC layers, header compression and routing protocols at Netdev 0x12 in Montreal.

In no particular order the agenda roughly covered:
- ieee802154 and 6lowpan subsystem status update for the last kernel releases
- Defined a userspace API to configure 6lowpan header compression options
- Discussed what needed to be done for an ieee802154 hardMAC extension to the stack
- Improved test coverage with hwsim, tdc, scapy & TITAN
- Thoughts on software fallback implementations for ieee802154 CSMA and AACK
- Thoughts on a LoRa subsystem (with SCHC addition to 6lowpan) for Linux 

More info:
https://www.netdevconf.org/0x12/session.html?workshop-on-iot-related-mac-layers-header-compression-and-routing-protocols
Captions: 
	00:00:00,280 --> 00:00:07,810
okay so hello buddy yeah we going to the

00:00:05,140 --> 00:00:10,120
next one a little bit late here but

00:00:07,810 --> 00:00:14,980
sorry for that but we finally got it all

00:00:10,120 --> 00:00:16,779
fixed okay so the three of us the three

00:00:14,980 --> 00:00:19,119
of us we'll talk a little bit of the

00:00:16,779 --> 00:00:21,730
different IT protocols and mecha layouts

00:00:19,119 --> 00:00:23,800
we already have from the kernel and one

00:00:21,730 --> 00:00:26,500
actually that's going to be proposed to

00:00:23,800 --> 00:00:28,720
be up streamed at some point and yeah a

00:00:26,500 --> 00:00:31,029
little bit about the an update on what's

00:00:28,720 --> 00:00:34,090
going on since the last year we talked

00:00:31,029 --> 00:00:35,680
about that so the agenda would be just a

00:00:34,090 --> 00:00:38,410
short introduction what's going on here

00:00:35,680 --> 00:00:41,170
and then eunhaeng we talked about the

00:00:38,410 --> 00:00:43,870
rogue and subsystem he's working on and

00:00:41,170 --> 00:00:45,850
planning to upstream I will give a

00:00:43,870 --> 00:00:48,250
little bit of an overview what has been

00:00:45,850 --> 00:00:51,090
happening in 15.4 and 6lowpan is the

00:00:48,250 --> 00:00:53,710
subsystems I maintain together Alexander

00:00:51,090 --> 00:00:55,390
then Alex will talk about of different

00:00:53,710 --> 00:00:57,629
problems we have this multiple interface

00:00:55,390 --> 00:01:00,940
handling this kind of subsystems and

00:00:57,629 --> 00:01:03,370
exposing smackhead information to IP

00:01:00,940 --> 00:01:05,049
version 6 headers socket layer because

00:01:03,370 --> 00:01:08,260
some of the applications might need

00:01:05,049 --> 00:01:10,900
information coming from there then we

00:01:08,260 --> 00:01:12,720
had a situation where we run into a huge

00:01:10,900 --> 00:01:14,439
regression in the IP version 6

00:01:12,720 --> 00:01:17,140
recommendation handling for our

00:01:14,439 --> 00:01:18,549
subsystem and that really wasn't kind of

00:01:17,140 --> 00:01:20,170
an eye-opener for us if you need more

00:01:18,549 --> 00:01:21,610
testing there so I've been spending a

00:01:20,170 --> 00:01:23,409
little bit of time thinking about it and

00:01:21,610 --> 00:01:25,960
what what can and what we should do

00:01:23,409 --> 00:01:28,240
about that and then we have some topics

00:01:25,960 --> 00:01:30,729
for discussion in the end this whole

00:01:28,240 --> 00:01:32,590
thing should be around 1/2 hour the

00:01:30,729 --> 00:01:35,290
longest item would be the low on

00:01:32,590 --> 00:01:36,850
self-esteem talk from John and the other

00:01:35,290 --> 00:01:39,070
ones are like most like 10 minutes

00:01:36,850 --> 00:01:40,900
things or sir so this should be really

00:01:39,070 --> 00:01:42,880
interactive so if you have questions or

00:01:40,900 --> 00:01:44,710
something just go up talk to us it's not

00:01:42,880 --> 00:01:46,750
like you're standing here presenting and

00:01:44,710 --> 00:01:48,909
you just listen but really just bring it

00:01:46,750 --> 00:01:51,100
up so that the second one we do in this

00:01:48,909 --> 00:01:55,390
kind of workshop the first one was at

00:01:51,100 --> 00:01:58,899
net of 2.1 also in montrÃ©al we sadly had

00:01:55,390 --> 00:02:00,579
to skip to point two it still feels a

00:01:58,899 --> 00:02:02,320
bit strange to have this kind of topic

00:02:00,579 --> 00:02:04,149
here because all the other things in the

00:02:02,320 --> 00:02:07,000
schedules really mostly about high

00:02:04,149 --> 00:02:08,590
performance something like EBP of xtp

00:02:07,000 --> 00:02:10,599
Hardware offloading and stuff like that

00:02:08,590 --> 00:02:11,250
and we are really very different scope

00:02:10,599 --> 00:02:13,980
here

00:02:11,250 --> 00:02:16,080
but anyway because we could got feedback

00:02:13,980 --> 00:02:17,850
from the organizers that this kind of

00:02:16,080 --> 00:02:19,440
topics is interesting for the people

00:02:17,850 --> 00:02:24,960
here so we keep going with that for a

00:02:19,440 --> 00:02:27,000
while yeah just a few words on what this

00:02:24,960 --> 00:02:30,300
girl was here from what we think

00:02:27,000 --> 00:02:33,030
so all this IOT saying is a huge buzz

00:02:30,300 --> 00:02:34,770
word area obviously there's a lot of

00:02:33,030 --> 00:02:36,630
vendor specific solutions and what we

00:02:34,770 --> 00:02:38,400
try here is really to avoid most of

00:02:36,630 --> 00:02:40,620
these things and we just try to stay

00:02:38,400 --> 00:02:42,390
with this public specifications that are

00:02:40,620 --> 00:02:45,510
available that can be used beat I saw

00:02:42,390 --> 00:02:47,220
ITF I Triple E or just some open specs

00:02:45,510 --> 00:02:49,290
that are just available for developers

00:02:47,220 --> 00:02:51,480
and in the end we really tried to

00:02:49,290 --> 00:02:53,250
something like bring up here in six down

00:02:51,480 --> 00:02:56,700
to the cents or whatever everything

00:02:53,250 --> 00:02:58,290
during that way okay so that would be

00:02:56,700 --> 00:03:00,480
just introduction and I will hand over

00:02:58,290 --> 00:03:11,480
to John home to talk about the roarin

00:03:00,480 --> 00:03:15,150
class module okay thanks Pangea home and

00:03:11,480 --> 00:03:17,280
I come from Taiwan and works in the

00:03:15,150 --> 00:03:21,060
decimal panel now and you can find me or

00:03:17,280 --> 00:03:25,620
catalyst like from the stash here maybe

00:03:21,060 --> 00:03:28,100
after and that one crossed many good

00:03:25,620 --> 00:03:31,320
grains vegetables

00:03:28,100 --> 00:03:33,630
something like that a lot of things yeah

00:03:31,320 --> 00:03:38,190
so there are a lot of farmers who want

00:03:33,630 --> 00:03:41,549
to make our fruit food more nature and

00:03:38,190 --> 00:03:44,310
less chemical things one of my friend

00:03:41,549 --> 00:03:46,850
he's a former co simian he's also a

00:03:44,310 --> 00:03:51,750
maker in the forum and he had made a

00:03:46,850 --> 00:03:55,590
sensing system for the atmosphere and

00:03:51,750 --> 00:03:57,390
the water level in the forum another

00:03:55,590 --> 00:04:00,810
example is a location where in the

00:03:57,390 --> 00:04:03,660
sensing system alas most famous

00:04:00,810 --> 00:04:07,260
approaches to the air box which can

00:04:03,660 --> 00:04:11,700
measure air pollution for example pee

00:04:07,260 --> 00:04:16,500
and 2.5 and of loss and device are

00:04:11,700 --> 00:04:20,010
deposited into white and wild area the

00:04:16,500 --> 00:04:22,109
user awareness communication to the

00:04:20,010 --> 00:04:23,560
Gateway and then give a propagator

00:04:22,109 --> 00:04:25,960
attitude in turn

00:04:23,560 --> 00:04:30,610
to the backend server something like

00:04:25,960 --> 00:04:33,580
that so the transmitted Carreras

00:04:30,610 --> 00:04:37,030
communication distance is very important

00:04:33,580 --> 00:04:43,000
for lost kind of devices we can use the

00:04:37,030 --> 00:04:46,180
3G 4G 5g or attribute to 15 for devices

00:04:43,000 --> 00:04:51,669
or we can choose another kind of things

00:04:46,180 --> 00:04:54,520
like drop our where as area network and

00:04:51,669 --> 00:04:55,889
the low rise wonderful lat

00:04:54,520 --> 00:05:01,060
[Applause]

00:04:55,889 --> 00:05:03,970
technology implemented and we always

00:05:01,060 --> 00:05:07,389
want our communication is low power and

00:05:03,970 --> 00:05:10,050
high speed and long range but it's a

00:05:07,389 --> 00:05:12,520
power game there's an overlap area in

00:05:10,050 --> 00:05:15,090
between three of them we can

00:05:12,520 --> 00:05:17,680
Massachusetts of two of them and

00:05:15,090 --> 00:05:23,250
low-power wide area network issues the

00:05:17,680 --> 00:05:26,830
your power and long transmit range

00:05:23,250 --> 00:05:31,450
Laura is the physical layer in the

00:05:26,830 --> 00:05:33,610
internet not the traditional internet he

00:05:31,450 --> 00:05:36,030
uses chocolate spread spectrum radio

00:05:33,610 --> 00:05:41,520
maturation and it has good link budget

00:05:36,030 --> 00:05:43,840
but with low data rate it could also be

00:05:41,520 --> 00:05:48,960
works with quite a lot of hard

00:05:43,840 --> 00:05:52,570
consumption link path treaty is slotted

00:05:48,960 --> 00:05:55,960
difference between the transmission and

00:05:52,570 --> 00:05:58,450
the receiving antenna if if you have a

00:05:55,960 --> 00:06:02,979
bigger link budget then you can trust me

00:05:58,450 --> 00:06:06,550
it using no more distance and here's the

00:06:02,979 --> 00:06:09,360
Laura office called message formats

00:06:06,550 --> 00:06:12,430
he said because it's awareness

00:06:09,360 --> 00:06:16,419
communication so it has to the preamble

00:06:12,430 --> 00:06:20,080
and Phi hater and the church sound for

00:06:16,419 --> 00:06:21,789
the hater physical hater and the Phi

00:06:20,080 --> 00:06:27,100
payload and then checks on four or five

00:06:21,789 --> 00:06:30,850
payload and bacteria actually arrow to

00:06:27,100 --> 00:06:33,070
15 for it has good topologies

00:06:30,850 --> 00:06:34,670
for example star topology peer to peer

00:06:33,070 --> 00:06:37,550
which can form the Rothman

00:06:34,670 --> 00:06:41,030
or combined team of limacon across the

00:06:37,550 --> 00:06:46,610
tree network we can extend the coverage

00:06:41,030 --> 00:06:50,390
by more branches if we can combine two

00:06:46,610 --> 00:06:55,490
advantage of them the clustering network

00:06:50,390 --> 00:06:59,170
of a triple arrow to 15 for and coding

00:06:55,490 --> 00:07:03,050
packages of Aurora together lack of is

00:06:59,170 --> 00:07:09,700
Laura xn I Triple E arrow to 15 for

00:07:03,050 --> 00:07:13,430
physical layer for the 40 communication

00:07:09,700 --> 00:07:17,060
then we can have a peeker coverage area

00:07:13,430 --> 00:07:22,280
but less notes which means we can get

00:07:17,060 --> 00:07:28,570
more coverage but less money for the end

00:07:22,280 --> 00:07:31,490
devices I have done this last year and

00:07:28,570 --> 00:07:34,550
do the experiment I used to receive a

00:07:31,490 --> 00:07:36,980
Raspberry Pi and to transceiver they can

00:07:34,550 --> 00:07:41,810
communicate with each other and I have

00:07:36,980 --> 00:07:44,240
with the code and unlock github the

00:07:41,810 --> 00:07:48,230
Lauren Seaver mantra chooses recent

00:07:44,240 --> 00:07:50,900
attack ships it has the 160 edges appear

00:07:48,230 --> 00:07:54,740
maximal link budget and high sense

00:07:50,900 --> 00:07:57,860
sensitivity which down to a - 148 DBM

00:07:54,740 --> 00:08:02,060
that means you can show me transmit your

00:07:57,860 --> 00:08:05,000
various signals under noise a noise can

00:08:02,060 --> 00:08:09,230
bigger than your signals it's

00:08:05,000 --> 00:08:13,610
interesting and I also listed the it's

00:08:09,230 --> 00:08:16,610
working frequency range this is the

00:08:13,610 --> 00:08:20,420
actual picture attacked before we're not

00:08:16,610 --> 00:08:22,250
doing the experiment if you want more

00:08:20,420 --> 00:08:25,840
detail about that you can go to a

00:08:22,250 --> 00:08:29,270
hyperlink and get more information

00:08:25,840 --> 00:08:30,650
however the actual gyro to 15 for / off

00:08:29,270 --> 00:08:33,920
I cannot communicate with that our

00:08:30,650 --> 00:08:37,310
original article gyro 215 40 buses big

00:08:33,920 --> 00:08:40,250
because they are different fires the

00:08:37,310 --> 00:08:44,509
most important is their works

00:08:40,250 --> 00:08:46,610
in different frequency range sahaba you

00:08:44,509 --> 00:08:51,800
as mature or substituting for Aurora

00:08:46,610 --> 00:08:56,959
devices Laura Wynn is an egg layer over

00:08:51,800 --> 00:09:00,110
the low rap is coal devices it defines

00:08:56,959 --> 00:09:02,930
the star it uses the star topology so it

00:09:00,110 --> 00:09:07,720
has not uplink and downlink messages

00:09:02,930 --> 00:09:12,439
it can works over rora or as FSK mode

00:09:07,720 --> 00:09:15,199
and it also has three classes cast ABC

00:09:12,439 --> 00:09:20,379
like casa de baseline and the it uses

00:09:15,199 --> 00:09:24,649
aloha Porco the most important thing is

00:09:20,379 --> 00:09:28,009
the end device which is Rishi Isla

00:09:24,649 --> 00:09:31,279
transceiver transceiver it only wakes up

00:09:28,009 --> 00:09:35,329
when it transmit transmitting or

00:09:31,279 --> 00:09:37,370
receiving the ARRA time the cast a end

00:09:35,329 --> 00:09:40,490
device should go to sleep or either or

00:09:37,370 --> 00:09:44,629
standby mode which can save a lot of

00:09:40,490 --> 00:09:47,300
energy Caspi used the works in became

00:09:44,629 --> 00:09:49,670
mod and the can see is works in

00:09:47,300 --> 00:09:53,680
continuous mode both caspian sea should

00:09:49,670 --> 00:09:56,600
also implements request a features and

00:09:53,680 --> 00:10:01,339
here here comes more detail about the

00:09:56,600 --> 00:10:05,029
timing slot at first the n device which

00:10:01,339 --> 00:10:08,300
is maybe another one transmitting a

00:10:05,029 --> 00:10:13,370
message to network server via getaway

00:10:08,300 --> 00:10:18,649
Nora Wang gateway and a gateway only do

00:10:13,370 --> 00:10:21,439
one things which is become for order ok

00:10:18,649 --> 00:10:24,769
and the network server could be in the

00:10:21,439 --> 00:10:27,949
cloud or same in the same with the

00:10:24,769 --> 00:10:32,930
gateway in the same box the end advice

00:10:27,949 --> 00:10:36,980
transmit time only air and then a device

00:10:32,930 --> 00:10:39,709
go to sleep or idle or standby or delay

00:10:36,980 --> 00:10:43,370
time and then we call it delay one now

00:10:39,709 --> 00:10:45,410
and then after that the end device open

00:10:43,370 --> 00:10:49,450
and receiving window we call it our x1

00:10:45,410 --> 00:10:52,470
and the newer server can

00:10:49,450 --> 00:10:57,100
and downlink message to the end device

00:10:52,470 --> 00:11:00,550
in the receiving window if network

00:10:57,100 --> 00:11:04,660
device if a network server missed a lot

00:11:00,550 --> 00:11:07,720
time or or and diversity nugget the

00:11:04,660 --> 00:11:10,390
downlink message that's okay because any

00:11:07,720 --> 00:11:13,870
device will delay an hour at a time

00:11:10,390 --> 00:11:16,120
which we call date delay 2 and then

00:11:13,870 --> 00:11:18,040
after today to end device will open

00:11:16,120 --> 00:11:23,200
another receiving winter we call it our

00:11:18,040 --> 00:11:28,330
x2 network server can send a downlink

00:11:23,200 --> 00:11:33,970
message to also in the receiving window

00:11:28,330 --> 00:11:37,540
- if anti-vice get the receive panic

00:11:33,970 --> 00:11:40,600
message in the receiving window 1 then n

00:11:37,540 --> 00:11:47,080
device will not open another receiving

00:11:40,600 --> 00:11:53,590
door to human curiosity about how long

00:11:47,080 --> 00:11:56,440
should a lifetime it should be if the

00:11:53,590 --> 00:11:59,650
end device works in North America then

00:11:56,440 --> 00:12:05,830
it should be in knowledge which you

00:11:59,650 --> 00:12:08,250
naturally megahertz and that the these

00:12:05,830 --> 00:12:11,200
parameters are documented on the

00:12:08,250 --> 00:12:16,690
Lawrence original parameters

00:12:11,200 --> 00:12:18,840
documentation and for this example the

00:12:16,690 --> 00:12:22,060
receive dealer 1 should be 1 second and

00:12:18,840 --> 00:12:25,120
receive delay - should be 2 seconds if

00:12:22,060 --> 00:12:27,220
it is activation procedure then a joint

00:12:25,120 --> 00:12:33,580
a 70 day 1 is 5 seconds and the joining

00:12:27,220 --> 00:12:36,570
a server tier 2 is 6 seconds and you may

00:12:33,580 --> 00:12:41,500
also create across the about 800 and

00:12:36,570 --> 00:12:44,410
this also be documented it on rural and

00:12:41,500 --> 00:12:46,750
regional parameters documentation if you

00:12:44,410 --> 00:12:50,560
choose the data residual then this end

00:12:46,750 --> 00:12:52,660
device really works with lorimar and the

00:12:50,560 --> 00:12:58,300
spreading factor is 10 and the dependi

00:12:52,660 --> 00:13:02,209
with is 125 kilohertz and we can convert

00:12:58,300 --> 00:13:07,790
it this to be right which is

00:13:02,209 --> 00:13:11,220
980 feet per second and here is the

00:13:07,790 --> 00:13:15,720
maqam data message format for uplink and

00:13:11,220 --> 00:13:18,839
downlink the mac message should be

00:13:15,720 --> 00:13:21,560
pressing the pipe a lot and it begins

00:13:18,839 --> 00:13:23,899
with a mech header which is one byte and

00:13:21,560 --> 00:13:30,120
neck Mehrdad

00:13:23,899 --> 00:13:32,850
with em bites and then checksum and Mac

00:13:30,120 --> 00:13:35,910
payload can spread into three fields the

00:13:32,850 --> 00:13:38,519
friend Hager and port field and the

00:13:35,910 --> 00:13:47,010
friend payload the friend payload is low

00:13:38,519 --> 00:13:52,350
real message you want to send and the

00:13:47,010 --> 00:13:55,079
maximal length of for a payload and the

00:13:52,350 --> 00:13:57,769
frame hello which is M and if you choose

00:13:55,079 --> 00:14:02,040
the title read zero then the Maxima

00:13:57,769 --> 00:14:04,649
McClellan's will be 19 bytes and the lab

00:14:02,040 --> 00:14:11,790
frame pedals maximum lines will be 11

00:14:04,649 --> 00:14:17,390
bytes is quite slow and the mech hater

00:14:11,790 --> 00:14:20,820
the first part of Meck Meck message is

00:14:17,390 --> 00:14:23,700
message type it could be during or

00:14:20,820 --> 00:14:26,130
request or accept or unconference a

00:14:23,700 --> 00:14:30,810
table or town confronted up the orton

00:14:26,130 --> 00:14:32,640
account in front and unconfirmed the

00:14:30,810 --> 00:14:36,570
difference between on conference and

00:14:32,640 --> 00:14:41,399
then conference is this meketa message

00:14:36,570 --> 00:14:45,240
should be actor or not here's the friend

00:14:41,399 --> 00:14:47,730
hater of lamech message the first of all

00:14:45,240 --> 00:14:50,820
I see is device address and the one

00:14:47,730 --> 00:14:53,910
point is for a control part and a to

00:14:50,820 --> 00:14:58,110
fight for Frank counter and then a

00:14:53,910 --> 00:15:00,600
friend options for uplink friends

00:14:58,110 --> 00:15:05,510
the first piece rate elevated heart rate

00:15:00,600 --> 00:15:09,870
request bit and then a 6-bit is

00:15:05,510 --> 00:15:12,150
attentive they'd already request and the

00:15:09,870 --> 00:15:15,660
fifth bit is attack bid for

00:15:12,150 --> 00:15:18,900
confront data and then the last four

00:15:15,660 --> 00:15:22,740
bits is for indicates the length of the

00:15:18,900 --> 00:15:25,050
frame options field each end device

00:15:22,740 --> 00:15:28,680
should hold true for encounters which is

00:15:25,050 --> 00:15:32,040
Frank on the up and down for a bringin

00:15:28,680 --> 00:15:38,010
down link and the friend counter is

00:15:32,040 --> 00:15:48,180
incremented only if confirm the data is

00:15:38,010 --> 00:15:52,200
X and the field is used for the flop a

00:15:48,180 --> 00:15:54,900
lot is not empty if the profile 0 then

00:15:52,200 --> 00:15:59,100
it means there's a piggyback back

00:15:54,900 --> 00:16:03,950
comment for the netting clear if the

00:15:59,100 --> 00:16:06,950
value is 1 to 223 is for user

00:16:03,950 --> 00:16:06,950
application-specific

00:16:08,000 --> 00:16:13,830
the Mac comment can be picky packed in

00:16:11,430 --> 00:16:19,459
the free insurance field or send us a

00:16:13,830 --> 00:16:23,700
separate data frame in frame payload

00:16:19,459 --> 00:16:26,700
when it is separate a top friend in a

00:16:23,700 --> 00:16:32,750
frame payload when F problem must be set

00:16:26,700 --> 00:16:35,610
to 0 for the communication between the

00:16:32,750 --> 00:16:40,890
end device and the neighbor server they

00:16:35,610 --> 00:16:44,130
post halt three keys one is the

00:16:40,890 --> 00:16:50,060
application key and never session key

00:16:44,130 --> 00:16:54,930
and the application session key at first

00:16:50,060 --> 00:16:57,450
if the device is not activated and we

00:16:54,930 --> 00:17:00,510
can activate the end device by two ways

00:16:57,450 --> 00:17:02,910
it's one is over the year the other one

00:17:00,510 --> 00:17:06,600
is a personalization if you choose the

00:17:02,910 --> 00:17:10,380
personalization which means end devices

00:17:06,600 --> 00:17:13,319
and the network server already set the

00:17:10,380 --> 00:17:15,630
device device address and name were

00:17:13,319 --> 00:17:18,660
session key and application session key

00:17:15,630 --> 00:17:24,110
if you choose the first one over the

00:17:18,660 --> 00:17:26,540
year then the end device

00:17:24,110 --> 00:17:29,179
sent a joint request a message to

00:17:26,540 --> 00:17:32,570
neighbor a server and the return

00:17:29,179 --> 00:17:36,860
requests a Content application UI e UI

00:17:32,570 --> 00:17:39,140
and the device you I never suffer cattle

00:17:36,860 --> 00:17:42,620
information required and a savage

00:17:39,140 --> 00:17:45,559
request it will sent back to the N

00:17:42,620 --> 00:17:48,500
Tobias with joint a7 message a joint

00:17:45,559 --> 00:17:51,679
accepts the message is encrypted with

00:17:48,500 --> 00:17:53,900
the application key and because n device

00:17:51,679 --> 00:17:58,210
and the network server balls have an

00:17:53,900 --> 00:18:01,669
application key so they can do that

00:17:58,210 --> 00:18:04,910
encryption and decryption and then

00:18:01,669 --> 00:18:06,710
positive then derivative the application

00:18:04,910 --> 00:18:10,630
session key and then worse a certain key

00:18:06,710 --> 00:18:18,970
by themselves with the application key

00:18:10,630 --> 00:18:22,880
and here is the friend Mac format of the

00:18:18,970 --> 00:18:28,130
joiners return request and release a

00:18:22,880 --> 00:18:31,850
scepter message and after that we can

00:18:28,130 --> 00:18:36,440
start to have our Laura and the role in

00:18:31,850 --> 00:18:40,250
subsystem now form idea I want to have a

00:18:36,440 --> 00:18:42,950
role our webcast mature and it provided

00:18:40,250 --> 00:18:47,059
a lot device interfaces for our device

00:18:42,950 --> 00:18:50,200
drivers mmm for example I will talk

00:18:47,059 --> 00:18:55,660
about later the fake Aurora and for

00:18:50,200 --> 00:19:00,530
syntactic like SX one two seven six or

00:18:55,660 --> 00:19:04,340
seven nine eight nine like that and it

00:19:00,530 --> 00:19:08,240
also provides immaculate and devices

00:19:04,340 --> 00:19:12,590
access and and network devices which

00:19:08,240 --> 00:19:16,460
means lower the Laura went as macho

00:19:12,590 --> 00:19:21,220
regular device drivers and network

00:19:16,460 --> 00:19:25,400
devices device driver so user space can

00:19:21,220 --> 00:19:28,630
use the socket API directly and then do

00:19:25,400 --> 00:19:31,630
the communication as the previous

00:19:28,630 --> 00:19:31,630
programs

00:19:32,809 --> 00:19:38,960
and I have put a cast mantra on a github

00:19:35,929 --> 00:19:44,389
but this is temporary URL and will be

00:19:38,960 --> 00:19:47,870
moved in the future and first I focus on

00:19:44,389 --> 00:19:52,940
Laura when version 102 in a class a

00:19:47,870 --> 00:19:59,509
device now because its simplest and more

00:19:52,940 --> 00:20:05,210
features will be added in the future to

00:19:59,509 --> 00:20:09,110
McCullough Laura devices actors and

00:20:05,210 --> 00:20:15,080
network device so I have implemented a

00:20:09,110 --> 00:20:24,350
UTP protocols for the for rawan class

00:20:15,080 --> 00:20:30,980
module and also and also try to do some

00:20:24,350 --> 00:20:36,309
IO control for that and for Laura device

00:20:30,980 --> 00:20:39,499
drivers I also provide the header files

00:20:36,309 --> 00:20:44,899
the structure Laura how we're structure

00:20:39,499 --> 00:20:48,139
and operations for example the start and

00:20:44,899 --> 00:20:51,289
stop operation is just like started

00:20:48,139 --> 00:20:54,399
Laura hardware or stuff Laura hardware

00:20:51,289 --> 00:20:57,740
and trend a synchronous transmit and

00:20:54,399 --> 00:21:00,769
settle transmit power frequency anyways

00:20:57,740 --> 00:21:03,460
and the working mode working mode and

00:21:00,769 --> 00:21:07,070
the spreading factor something that and

00:21:03,460 --> 00:21:09,919
because we have said device should open

00:21:07,070 --> 00:21:11,679
the receiver window then how to read how

00:21:09,919 --> 00:21:15,759
to open the receiver window should be

00:21:11,679 --> 00:21:18,619
implemented in device driver so I also

00:21:15,759 --> 00:21:26,240
provided the operations interface which

00:21:18,619 --> 00:21:28,039
is the starter rx window and allocated

00:21:26,240 --> 00:21:30,590
Laura how we're free

00:21:28,039 --> 00:21:33,769
Laura how we're reduced down which is

00:21:30,590 --> 00:21:37,600
something like that and here's the

00:21:33,769 --> 00:21:41,929
private structures for Laura Wynn and

00:21:37,600 --> 00:21:45,740
basically is for all most configuration

00:21:41,929 --> 00:21:47,539
and the three keys application key in

00:21:45,740 --> 00:21:52,639
our session key application session key

00:21:47,539 --> 00:21:55,700
and I also implemented that the timings

00:21:52,639 --> 00:21:57,830
a lot of transmit and the receiving a to

00:21:55,700 --> 00:22:03,980
receiving window so there's a low

00:21:57,830 --> 00:22:07,159
rotation structure for that I also draw

00:22:03,980 --> 00:22:14,090
this the machine picture at first a lot

00:22:07,159 --> 00:22:16,990
when Laura when session is initiated is

00:22:14,090 --> 00:22:19,730
the image initiated amount and

00:22:16,990 --> 00:22:24,080
transmitted transmitting and then

00:22:19,730 --> 00:22:25,309
transmitted which means advise or the

00:22:24,080 --> 00:22:28,639
transceiver module

00:22:25,309 --> 00:22:32,570
transmitted to the Opera data message

00:22:28,639 --> 00:22:36,740
and then after at the data it opens the

00:22:32,570 --> 00:22:39,639
receiver window 1 & 2 if any device or

00:22:36,740 --> 00:22:44,360
transceiver transceiver gutted a

00:22:39,639 --> 00:22:45,860
downlink message then we will turn this

00:22:44,360 --> 00:22:49,129
Laura station will translate into

00:22:45,860 --> 00:22:52,789
receive state if it is not then it will

00:22:49,129 --> 00:22:59,960
go through a time-out state and it also

00:22:52,789 --> 00:23:04,669
have a mechanism for a retransmit I also

00:22:59,960 --> 00:23:11,169
implemented a crypt whole mojo for

00:23:04,669 --> 00:23:14,240
trance transmission because for general

00:23:11,169 --> 00:23:16,580
transmission the magnetic hash the frame

00:23:14,240 --> 00:23:21,230
payload of love mag message should be

00:23:16,580 --> 00:23:25,129
encrypted with the application session

00:23:21,230 --> 00:23:30,559
key or neighbor session key is Co is

00:23:25,129 --> 00:23:35,119
according to it the dis make message is

00:23:30,559 --> 00:23:40,299
for my command or non Mac comment I mean

00:23:35,119 --> 00:23:44,419
user space is specific so when you use

00:23:40,299 --> 00:23:47,539
if if this Mac Mac message is for Mac

00:23:44,419 --> 00:23:49,789
commander than is then the frame peril

00:23:47,539 --> 00:23:52,789
should be encrypted encrypted with the

00:23:49,789 --> 00:23:54,559
neighbor session key if it is not for a

00:23:52,789 --> 00:23:57,350
mecca my command is

00:23:54,559 --> 00:24:01,730
should be encrypted with the application

00:23:57,350 --> 00:24:04,309
session key and there's a lot of

00:24:01,730 --> 00:24:07,929
something as a lot of things to be done

00:24:04,309 --> 00:24:10,669
for example the activation configuration

00:24:07,929 --> 00:24:14,269
refracture original parameters

00:24:10,669 --> 00:24:17,179
documentation and i/o control and make

00:24:14,269 --> 00:24:19,999
comments already over negative layer and

00:24:17,179 --> 00:24:24,070
documentation and also user space

00:24:19,999 --> 00:24:26,869
utilities like config activation and

00:24:24,070 --> 00:24:34,879
finally connect your network server via

00:24:26,869 --> 00:24:38,350
real gateway and for verify what I have

00:24:34,879 --> 00:24:41,869
done I have dried right

00:24:38,350 --> 00:24:44,720
Figaro raw driver it's a simple terminal

00:24:41,869 --> 00:24:47,269
a device driver for Laura Wynn and I use

00:24:44,720 --> 00:24:51,230
it to verify like Nora link as much

00:24:47,269 --> 00:25:00,320
other high road and it could be the

00:24:51,230 --> 00:25:03,580
template in the future and someone like

00:25:00,320 --> 00:25:08,090
entries also doing something like that

00:25:03,580 --> 00:25:14,269
he has sent his page set which is a

00:25:08,090 --> 00:25:18,200
socket API for aura most of the patches

00:25:14,269 --> 00:25:22,220
is about arathi bus drivers not a Rob

00:25:18,200 --> 00:25:24,639
Roblin so we have discussed on the

00:25:22,220 --> 00:25:28,600
mailing list

00:25:24,639 --> 00:25:31,850
Laura ranked as macho need to become

00:25:28,600 --> 00:25:36,889
compatible Laura went raw rocky bus

00:25:31,850 --> 00:25:43,009
drivers which means it's great to see

00:25:36,889 --> 00:25:47,110
someone has already done the not done it

00:25:43,009 --> 00:25:51,619
doing he's doing rocky bus drivers not

00:25:47,110 --> 00:25:56,269
finished yet but hope I hope there's

00:25:51,619 --> 00:25:59,320
were more will have more Laura device

00:25:56,269 --> 00:25:59,320
drivers in the future

00:26:03,650 --> 00:26:07,160
I just had another mayor with Andreas

00:26:05,840 --> 00:26:09,200
about that so I think one of the

00:26:07,160 --> 00:26:11,680
important things here is that we make

00:26:09,200 --> 00:26:14,390
sure that the separation between the

00:26:11,680 --> 00:26:16,580
suffice stuffy's working on on all the

00:26:14,390 --> 00:26:18,230
different drivers on the file layer it's

00:26:16,580 --> 00:26:20,090
really and that's a good separation

00:26:18,230 --> 00:26:22,490
between that work and the work you're

00:26:20,090 --> 00:26:24,320
doing of the law of M because of the

00:26:22,490 --> 00:26:26,390
facings can be used with different

00:26:24,320 --> 00:26:28,970
McClay as like you did for example it's

00:26:26,390 --> 00:26:31,850
a 50 not for and there's also something

00:26:28,970 --> 00:26:34,760
like radio shuttle and and other players

00:26:31,850 --> 00:26:37,429
Apuleius that are more interested in not

00:26:34,760 --> 00:26:39,260
using the stop topology approach lower

00:26:37,429 --> 00:26:41,420
venice using but something different

00:26:39,260 --> 00:26:43,100
there so we need to keep in mind there

00:26:41,420 --> 00:26:44,990
that we might want to use this file

00:26:43,100 --> 00:26:47,270
layers and drivers and everything this

00:26:44,990 --> 00:26:48,440
different Mak layers on top so that just

00:26:47,270 --> 00:26:51,740
something to keep in mind in the

00:26:48,440 --> 00:26:59,809
discussion you have a sim so yeah yeah

00:26:51,740 --> 00:27:02,420
of course yeah and I all right I have I

00:26:59,809 --> 00:27:08,929
have tested a lock code with the

00:27:02,420 --> 00:27:12,500
Raspberry Pi and and I put to the Laura

00:27:08,929 --> 00:27:15,770
Wynn Cass module on wizard apes' nets

00:27:12,500 --> 00:27:20,800
slash Laura Wynn and Laura occupies

00:27:15,770 --> 00:27:25,760
drivers under drivers Nanta Laura when

00:27:20,800 --> 00:27:29,660
directory and also I also have a reduced

00:27:25,760 --> 00:27:33,020
by myself the PFL Robin and the address

00:27:29,660 --> 00:27:39,650
family Laura when something like that my

00:27:33,020 --> 00:27:45,440
cross and this is the picture I take for

00:27:39,650 --> 00:27:49,580
example I have I registered a Ferro rod

00:27:45,440 --> 00:27:53,600
device driver and it presented a rawa

00:27:49,580 --> 00:27:59,330
zero in network interface and the NT you

00:27:53,600 --> 00:28:02,710
could be set and I also write the same

00:27:59,330 --> 00:28:08,210
program and send a test string and

00:28:02,710 --> 00:28:11,780
custom message under that and here's my

00:28:08,210 --> 00:28:15,050
reference and yeah this is an eye view

00:28:11,780 --> 00:28:16,990
of retiree city I take it from Elephant

00:28:15,050 --> 00:28:20,320
Mountain the tallest building is a

00:28:16,990 --> 00:28:23,110
one it has been a tourist building in

00:28:20,320 --> 00:28:26,020
the world before so if we can put a

00:28:23,110 --> 00:28:29,429
lowering getaway on top of it then we

00:28:26,020 --> 00:28:32,350
can have and we can get a big coverage

00:28:29,429 --> 00:28:33,669
is choking because can they afford for

00:28:32,350 --> 00:28:44,140
and for the rent

00:28:33,669 --> 00:28:46,809
yeah thank you sorry I opened or digging

00:28:44,140 --> 00:28:50,020
taking the questions now all right so I

00:28:46,809 --> 00:28:52,840
don't understand you mentioned at the

00:28:50,020 --> 00:28:54,789
fire you have Laura at the Mac layer you

00:28:52,840 --> 00:28:56,740
are putting it not to 250 not four and

00:28:54,789 --> 00:28:58,270
I'm assuming that the compression that

00:28:56,740 --> 00:29:01,380
you are trying to make use of is 6lowpan

00:28:58,270 --> 00:29:03,520
on top of it but then I

00:29:01,380 --> 00:29:06,789
whatever-whatever expecting to hear from

00:29:03,520 --> 00:29:08,110
the Laura Laura when this thing is to

00:29:06,789 --> 00:29:11,230
make use of shake compression rather

00:29:08,110 --> 00:29:13,179
than 6lowpan compression it's a shake

00:29:11,230 --> 00:29:19,140
the LP one working group is working

00:29:13,179 --> 00:29:21,610
towards it the IT of working group so

00:29:19,140 --> 00:29:23,409
yeah I mean do we depends on what kind

00:29:21,610 --> 00:29:26,049
of makkya least you use on top of

00:29:23,409 --> 00:29:27,880
suffice so if you go ahead and use 50

00:29:26,049 --> 00:29:29,320
not for 6lowpan with all the adaptions

00:29:27,880 --> 00:29:31,240
there might make sense i mean depending

00:29:29,320 --> 00:29:33,100
a bit on z and the address size and so

00:29:31,240 --> 00:29:35,350
on but if you go directly with lower

00:29:33,100 --> 00:29:37,149
them then something like that steady

00:29:35,350 --> 00:29:39,490
contacts had a compression or something

00:29:37,149 --> 00:29:41,669
like that that is worked on on ITF might

00:29:39,490 --> 00:29:44,320
make sense in my slides I will have a

00:29:41,669 --> 00:29:46,659
comment on that as well so that could be

00:29:44,320 --> 00:29:47,890
another module being implemented in the

00:29:46,659 --> 00:29:49,690
framework we have four hurrah

00:29:47,890 --> 00:29:51,159
compressions like six low print there

00:29:49,690 --> 00:29:53,230
could be another module for static

00:29:51,159 --> 00:29:55,120
static context or something there's

00:29:53,230 --> 00:29:56,890
nobody as far as I know working on it

00:29:55,120 --> 00:29:59,169
but that might be something interesting

00:29:56,890 --> 00:30:00,850
there because I mean just you have so

00:29:59,169 --> 00:30:03,429
much context there if you have a star

00:30:00,850 --> 00:30:05,529
topology you can have just a few bytes

00:30:03,429 --> 00:30:07,570
and transmitting all the context there

00:30:05,529 --> 00:30:09,669
but as I said as far far as far as I

00:30:07,570 --> 00:30:11,049
know nobody's working on that yet so I

00:30:09,669 --> 00:30:14,169
think I think there are set of people

00:30:11,049 --> 00:30:16,289
working on that in Akutan you'll see the

00:30:14,169 --> 00:30:18,760
people there working on all the

00:30:16,289 --> 00:30:20,590
implementation on the long side or

00:30:18,760 --> 00:30:24,610
something no it's not the length side

00:30:20,590 --> 00:30:26,260
but it can be yes I mean what I meant

00:30:24,610 --> 00:30:27,880
was more like an implementation of the

00:30:26,260 --> 00:30:28,580
wrong side so obviously there are people

00:30:27,880 --> 00:30:30,110
on ITF

00:30:28,580 --> 00:30:34,279
working on it people working on it on

00:30:30,110 --> 00:30:35,960
indifferent IOT operating systems there

00:30:34,279 --> 00:30:37,640
are more suitable for smaller device and

00:30:35,960 --> 00:30:39,110
stuff like that they have they're doing

00:30:37,640 --> 00:30:41,690
the implementations there but not know

00:30:39,110 --> 00:30:44,269
them it's not again nobodyÃ­s now working

00:30:41,690 --> 00:30:45,890
on the data for my men sorry another

00:30:44,269 --> 00:30:49,760
question in context - like using it not

00:30:45,890 --> 00:30:51,799
about 15.4 mac layer on laura physical

00:30:49,760 --> 00:30:54,919
layer so there are some constraints with

00:30:51,799 --> 00:30:56,779
regards to act timing the the address

00:30:54,919 --> 00:31:01,100
length the extended at address length is

00:30:56,779 --> 00:31:03,110
almost is 8 bytes so 16 bytes MTU at

00:31:01,100 --> 00:31:04,370
least you need to support so I mean

00:31:03,110 --> 00:31:07,639
there are lot of restrictions that come

00:31:04,370 --> 00:31:09,740
when you want to support Mac Mac layer

00:31:07,639 --> 00:31:11,690
of it no 2 - 15.4 and load of and

00:31:09,740 --> 00:31:13,880
physical layer so you know I mean

00:31:11,690 --> 00:31:15,980
frankly speaking what I what I'm trying

00:31:13,880 --> 00:31:17,600
to say is if shake works then

00:31:15,980 --> 00:31:19,220
essentially the is there any reason why

00:31:17,600 --> 00:31:24,830
anyone would want to go with this kind

00:31:19,220 --> 00:31:26,299
of approach in may be done had for my

00:31:24,830 --> 00:31:28,190
dear God's if not for because I never

00:31:26,299 --> 00:31:32,389
use if not for on top of a different

00:31:28,190 --> 00:31:33,830
file layer I just think that for some

00:31:32,389 --> 00:31:35,630
people makes a lot of sense to have a

00:31:33,830 --> 00:31:38,299
star topology especially with something

00:31:35,630 --> 00:31:40,610
like low range long range type of

00:31:38,299 --> 00:31:42,169
protocols not like that but for some not

00:31:40,610 --> 00:31:43,940
I mean there are reasons why something

00:31:42,169 --> 00:31:45,260
like radio shuttle gets developments

00:31:43,940 --> 00:31:46,940
around because I wanted to have

00:31:45,260 --> 00:31:49,490
different peer-to-peer communications

00:31:46,940 --> 00:31:51,320
ideas or like maybe even mesh networking

00:31:49,490 --> 00:31:53,570
I mean that's difficult was a kind of

00:31:51,320 --> 00:31:55,850
MTU size you have here I agree on that

00:31:53,570 --> 00:31:57,080
but I mean some people just want to do

00:31:55,850 --> 00:31:59,029
some research in this area

00:31:57,080 --> 00:32:00,919
but in general going miss Laura ban

00:31:59,029 --> 00:32:02,539
might be the best option for the most

00:32:00,919 --> 00:32:05,389
people here but I mean if you have an

00:32:02,539 --> 00:32:07,940
option on the so you did some research

00:32:05,389 --> 00:32:09,909
on using 15.4 on on the fly so if you

00:32:07,940 --> 00:32:14,899
have something to say about that

00:32:09,909 --> 00:32:18,110
yeah I have done that but for example

00:32:14,899 --> 00:32:22,220
the buffer on the chip is only for

00:32:18,110 --> 00:32:25,250
example the same tack strip is only 256

00:32:22,220 --> 00:32:29,510
bytes on the trip and the transmission

00:32:25,250 --> 00:32:32,210
takes the time because the physical

00:32:29,510 --> 00:32:35,260
problem yeah so but they can

00:32:32,210 --> 00:32:41,480
communication with the send transceiver

00:32:35,260 --> 00:32:48,769
and the tech can distance

00:32:41,480 --> 00:32:51,980
adventures but actually they're there

00:32:48,769 --> 00:32:56,330
there are some companies done the same

00:32:51,980 --> 00:33:02,500
things before but is a proprietary for

00:32:56,330 --> 00:33:04,279
co-drivers so to be in linux kernel then

00:33:02,500 --> 00:33:08,000
this is a problem

00:33:04,279 --> 00:33:11,029
so for kernel it should be a generic

00:33:08,000 --> 00:33:14,889
consideration for that so mmm

00:33:11,029 --> 00:33:20,450
so I start to start your oven again and

00:33:14,889 --> 00:33:23,750
we implement it yeah thank you I mean

00:33:20,450 --> 00:33:25,850
just even for 50 not for transceivers

00:33:23,750 --> 00:33:27,559
it's sometimes hard if they don't have

00:33:25,850 --> 00:33:29,419
like automatic transmission in the

00:33:27,559 --> 00:33:30,980
hardware or something going ahead and

00:33:29,419 --> 00:33:32,200
doing that and software is something I

00:33:30,980 --> 00:33:34,460
will also bring up on the slides later

00:33:32,200 --> 00:33:35,990
but that's something that might be

00:33:34,460 --> 00:33:38,480
difficult for me timing requirements it

00:33:35,990 --> 00:33:40,279
might be possible to do in 95 percent of

00:33:38,480 --> 00:33:41,960
the time but if you kernel has something

00:33:40,279 --> 00:33:43,700
else to do right now it might just not

00:33:41,960 --> 00:33:45,500
be possible to meet the timing

00:33:43,700 --> 00:33:48,590
requirements and that might be even more

00:33:45,500 --> 00:33:50,029
complicated on law but it really depends

00:33:48,590 --> 00:33:51,559
on what kind of needs you have for your

00:33:50,029 --> 00:33:53,659
network I mean as I said most people

00:33:51,559 --> 00:33:56,450
that choose law I would definitely go

00:33:53,659 --> 00:33:57,740
with law of ram and if they won't have

00:33:56,450 --> 00:33:59,269
something else over just want to

00:33:57,740 --> 00:34:00,830
experiment or something we should leave

00:33:59,269 --> 00:34:02,480
the door open that is why I mentioned

00:34:00,830 --> 00:34:04,159
that you should make sure that the file

00:34:02,480 --> 00:34:06,679
layer and Driver implementations we do

00:34:04,159 --> 00:34:08,659
here is in a very abstracted that it's

00:34:06,679 --> 00:34:10,579
not bound completely to lower van but

00:34:08,659 --> 00:34:13,419
can be used for different Macs and other

00:34:10,579 --> 00:34:13,419
things on top of that

00:34:18,330 --> 00:34:22,880
any more questions on the lower side

00:34:20,550 --> 00:34:22,880
here

00:34:27,980 --> 00:34:32,260
okay so if you switch to the next Top

00:34:30,020 --> 00:34:32,260
Gear

00:34:34,139 --> 00:34:37,379
[Applause]

00:34:39,620 --> 00:34:46,990
okay so just a little bit of an update

00:34:43,190 --> 00:34:49,460
on what happened on the 15.4 and 6lowpan

00:34:46,990 --> 00:34:51,680
kernel subsystems over the last year

00:34:49,460 --> 00:34:53,840
basically so I listed it up by by

00:34:51,680 --> 00:34:55,790
Colonel released this year it hasn't

00:34:53,840 --> 00:34:57,770
happened to much I have to say sadly

00:34:55,790 --> 00:35:00,320
because mostly Alexander myself have

00:34:57,770 --> 00:35:01,910
been yeah doing other things having not

00:35:00,320 --> 00:35:03,890
that much spare time to spend on this

00:35:01,910 --> 00:35:06,140
project but we did some at least we kept

00:35:03,890 --> 00:35:07,970
up on what's going on on Petrus get get

00:35:06,140 --> 00:35:09,830
submitted to us be reviewed and get them

00:35:07,970 --> 00:35:12,110
into the kernel and stuff like that but

00:35:09,830 --> 00:35:14,930
not likely did not really have time to

00:35:12,110 --> 00:35:17,240
develop new features as much so we're

00:35:14,930 --> 00:35:21,590
starting this 4.12 we got a new driver

00:35:17,240 --> 00:35:24,170
for the CA 8210 the transceiver which is

00:35:21,590 --> 00:35:25,400
actually a hub make transceiver but

00:35:24,170 --> 00:35:26,780
because you don't really have the

00:35:25,400 --> 00:35:28,910
infrastructure right now and the

00:35:26,780 --> 00:35:30,740
subsystem to run hard make transceivers

00:35:28,910 --> 00:35:34,370
they did an implementation in software

00:35:30,740 --> 00:35:36,170
which has some problems I would say

00:35:34,370 --> 00:35:38,690
depending on the context you have that

00:35:36,170 --> 00:35:40,010
right now it's working fine but really

00:35:38,690 --> 00:35:41,720
depending on the packets are sending out

00:35:40,010 --> 00:35:44,810
there that might get you into trouble so

00:35:41,720 --> 00:35:47,210
we knew we need to think about to

00:35:44,810 --> 00:35:48,800
enhance the subsystem we have there to

00:35:47,210 --> 00:35:50,930
allow them to have a hard my transceiver

00:35:48,800 --> 00:35:54,170
driver but that's something that is

00:35:50,930 --> 00:35:55,910
quite big actually to tackle and yeah we

00:35:54,170 --> 00:35:59,210
need to just have to time for to think

00:35:55,910 --> 00:36:00,980
about how we do that correctly there was

00:35:59,210 --> 00:36:02,840
also a problem with the address length

00:36:00,980 --> 00:36:05,900
handling in the Bluetooth low-energy

00:36:02,840 --> 00:36:08,660
part for 6lowpan that was fixed in that

00:36:05,900 --> 00:36:10,940
release and four points asserting that

00:36:08,660 --> 00:36:12,770
was really nothing much just a few bug

00:36:10,940 --> 00:36:16,790
fixes here and there for the drivers

00:36:12,770 --> 00:36:23,540
mostly again in 4.14 also slow release

00:36:16,790 --> 00:36:25,100
for us in 4.15 we got you change a

00:36:23,540 --> 00:36:26,900
little bit how we worked before because

00:36:25,100 --> 00:36:28,160
normally all the petrous we have been

00:36:26,900 --> 00:36:29,720
submitting there have been games through

00:36:28,160 --> 00:36:32,000
bluetooth next and from there to

00:36:29,720 --> 00:36:34,040
genetics and now we decided that he

00:36:32,000 --> 00:36:36,650
actually picks the 15 or for Petrus

00:36:34,040 --> 00:36:38,870
directly but the shared system 6

00:36:36,650 --> 00:36:40,610
November to share between 15.4 and

00:36:38,870 --> 00:36:41,930
Bluetooth a twister goes to the beta

00:36:40,610 --> 00:36:43,490
stream to make sure that we are

00:36:41,930 --> 00:36:48,450
instincts there and both are keep

00:36:43,490 --> 00:36:50,609
working and we got some fixes for the

00:36:48,450 --> 00:36:52,290
layer encryption was good to see that

00:36:50,609 --> 00:36:54,540
someone is actually using that and in

00:36:52,290 --> 00:36:57,329
finding problems and fixing them

00:36:54,540 --> 00:37:00,180
the usual bug fixes for drivers and we

00:36:57,329 --> 00:37:03,329
also got a support for another USB

00:37:00,180 --> 00:37:05,040
dongle the bus they are Huell later

00:37:03,329 --> 00:37:08,369
certainly you have to say this one is

00:37:05,040 --> 00:37:11,270
not available to sale sale anymore but

00:37:08,369 --> 00:37:14,220
it said because that was one of c1

00:37:11,270 --> 00:37:16,349
easily get a bill up 1 gigahertz

00:37:14,220 --> 00:37:18,420
conceive as you can just use us and use

00:37:16,349 --> 00:37:23,400
B Donald so but you're not able to get

00:37:18,420 --> 00:37:25,680
them anymore certainly and 4.16 got a

00:37:23,400 --> 00:37:28,250
few more enhancements for the analog

00:37:25,680 --> 00:37:31,589
driver and support for new devices

00:37:28,250 --> 00:37:36,230
you've chips actually producing based on

00:37:31,589 --> 00:37:40,109
the old one for design and in 4.6 17 we

00:37:36,230 --> 00:37:42,210
got kind of problem then the narak that

00:37:40,109 --> 00:37:46,800
Siri hash table reward for

00:37:42,210 --> 00:37:48,300
fragmentations and IP version 6 then his

00:37:46,800 --> 00:37:49,859
purchase landed at some point I tried

00:37:48,300 --> 00:37:53,339
and testing it again and it completely

00:37:49,859 --> 00:37:55,500
broke how we did 602 open app tation to

00:37:53,339 --> 00:37:58,800
our subsystem I will come to that later

00:37:55,500 --> 00:38:00,329
and luckily we fixed that in time so

00:37:58,800 --> 00:38:02,490
Alex found a fix out to get that done

00:38:00,329 --> 00:38:04,980
and so it never came out into release or

00:38:02,490 --> 00:38:09,720
something and got another transceiver

00:38:04,980 --> 00:38:12,329
driver for the MTR 28 a transceiver and

00:38:09,720 --> 00:38:16,200
also some security fixes for one of the

00:38:12,329 --> 00:38:20,270
drivers out there on the six open site

00:38:16,200 --> 00:38:23,750
that was even less work going on there

00:38:20,270 --> 00:38:26,849
there are some Petra spending for

00:38:23,750 --> 00:38:29,310
fragmentations problems or forms Excel

00:38:26,849 --> 00:38:32,160
open adaptations on the high load I'm

00:38:29,310 --> 00:38:34,200
still waiting for a new patch set on

00:38:32,160 --> 00:38:36,089
that and I want to test it out if I can

00:38:34,200 --> 00:38:38,670
actually reproduce it before I apply it

00:38:36,089 --> 00:38:40,560
but the petrous have been going to like

00:38:38,670 --> 00:38:42,060
one or two iterations now they look

00:38:40,560 --> 00:38:44,670
better and I think that we can apply

00:38:42,060 --> 00:38:46,349
them apply them soon and one of the big

00:38:44,670 --> 00:38:49,650
things we are still missing there which

00:38:46,349 --> 00:38:51,540
is still not tackled as a user space

00:38:49,650 --> 00:38:53,250
interface to actually configure the

00:38:51,540 --> 00:38:55,680
color compressions right now it's still

00:38:53,250 --> 00:38:57,329
just a set of modules and if they are

00:38:55,680 --> 00:38:57,720
loaded they had a compression enabled

00:38:57,329 --> 00:38:59,310
and

00:38:57,720 --> 00:39:01,290
not loaded it's not so it's really

00:38:59,310 --> 00:39:03,420
really basic it's nothing you can

00:39:01,290 --> 00:39:04,740
configure from an administration point

00:39:03,420 --> 00:39:07,020
of view or anything that's something

00:39:04,740 --> 00:39:09,390
that still need to be done and here as

00:39:07,020 --> 00:39:10,590
you mentioned there is some interest for

00:39:09,390 --> 00:39:12,180
going for different the header

00:39:10,590 --> 00:39:15,330
compression techniques different have a

00:39:12,180 --> 00:39:16,770
schemes there there's generic header

00:39:15,330 --> 00:39:19,470
compression which is also something

00:39:16,770 --> 00:39:22,560
that's interesting for 15.4 if you

00:39:19,470 --> 00:39:25,740
it's basically interesting for Apple

00:39:22,560 --> 00:39:27,990
layer protocols that reuse the IP

00:39:25,740 --> 00:39:32,910
addresses or the other things like

00:39:27,990 --> 00:39:35,010
routing addresses like DTLS had a if you

00:39:32,910 --> 00:39:36,900
start in detail a session you reuse the

00:39:35,010 --> 00:39:38,430
IP address or if you do like ripple

00:39:36,900 --> 00:39:41,880
information or something like then you

00:39:38,430 --> 00:39:44,550
can again we do see and the bytes you

00:39:41,880 --> 00:39:45,750
are sending over because you just reuse

00:39:44,550 --> 00:39:47,250
what we have been done in the lower

00:39:45,750 --> 00:39:48,960
layers before and then you have static

00:39:47,250 --> 00:39:50,730
context had a compression that would be

00:39:48,960 --> 00:39:56,160
interesting for for the long-range

00:39:50,730 --> 00:39:58,470
protocols yeah as in a summary so we had

00:39:56,160 --> 00:40:00,330
a bunch of updates mostly making sure

00:39:58,470 --> 00:40:02,160
that the drivers keep working that all

00:40:00,330 --> 00:40:05,430
the fixes via we are seeing from people

00:40:02,160 --> 00:40:07,109
start using it more and get applied so

00:40:05,430 --> 00:40:10,200
it's mostly maintenance for the last

00:40:07,109 --> 00:40:12,240
year basically um the the regression fix

00:40:10,200 --> 00:40:13,500
was one of the big biggest ones and I'm

00:40:12,240 --> 00:40:17,400
happy that you actually figured that out

00:40:13,500 --> 00:40:19,109
before silicon already went out this big

00:40:17,400 --> 00:40:20,550
changes are stalling right now I mean it

00:40:19,109 --> 00:40:22,410
we have a big list of things you want to

00:40:20,550 --> 00:40:25,320
work on but that really depends on the

00:40:22,410 --> 00:40:26,730
time Alex and myself here for that there

00:40:25,320 --> 00:40:28,440
are two more things that are in progress

00:40:26,730 --> 00:40:30,300
right now ins main just being discussed

00:40:28,440 --> 00:40:33,330
and yeah in the process of getting

00:40:30,300 --> 00:40:35,670
applied their see you a value a socket

00:40:33,330 --> 00:40:37,380
option so you want to get the

00:40:35,670 --> 00:40:38,910
information about the link quality you

00:40:37,380 --> 00:40:40,800
have to the different peers your

00:40:38,910 --> 00:40:41,790
communication yes and and you want to

00:40:40,800 --> 00:40:44,490
get that back to the application

00:40:41,790 --> 00:40:45,780
actually sending the data out and so

00:40:44,490 --> 00:40:47,490
there's one person who actually

00:40:45,780 --> 00:40:48,990
implemented patch to have that as a

00:40:47,490 --> 00:40:51,000
socket option you can enable and then

00:40:48,990 --> 00:40:53,070
and now what what's going on turns and

00:40:51,000 --> 00:40:54,570
in the application you can track the aka

00:40:53,070 --> 00:40:57,089
values for the different PS you're

00:40:54,570 --> 00:40:59,790
communicating with and then there's a

00:40:57,089 --> 00:41:01,859
hardware simulator which is basically an

00:40:59,790 --> 00:41:04,260
updated version of C take a loop egg

00:41:01,859 --> 00:41:08,790
driver we had before and a person was

00:41:04,260 --> 00:41:09,900
really completely modeled after what

00:41:08,790 --> 00:41:12,030
Wireless did

00:41:09,900 --> 00:41:13,650
so it also will have an netting

00:41:12,030 --> 00:41:16,290
interface you can actually dynamically

00:41:13,650 --> 00:41:17,730
change edges that are available and

00:41:16,290 --> 00:41:19,140
stuff like that so that makes it a lot

00:41:17,730 --> 00:41:21,630
more easier for testing and that is

00:41:19,140 --> 00:41:23,960
actually the base for all the testing

00:41:21,630 --> 00:41:26,130
approach we will have a talk later about

00:41:23,960 --> 00:41:28,110
so that is something that's important to

00:41:26,130 --> 00:41:30,090
go in and I think very closely I still

00:41:28,110 --> 00:41:34,080
need to give it another review and then

00:41:30,090 --> 00:41:35,190
we can see so just one bonus slide and

00:41:34,080 --> 00:41:38,610
because that's kind of an interesting

00:41:35,190 --> 00:41:40,710
topic for myself as well so it's more

00:41:38,610 --> 00:41:43,350
for people I'd really wanting to tinker

00:41:40,710 --> 00:41:46,440
around a bit in heck and stuff so the

00:41:43,350 --> 00:41:49,890
IKEA trophy system is actually based on

00:41:46,440 --> 00:41:51,750
15.4 so they have like is easy either

00:41:49,890 --> 00:41:53,400
using the ZigBee light link protocol

00:41:51,750 --> 00:41:55,650
there and they have different light

00:41:53,400 --> 00:41:57,240
bulbs they my buttons remote motion

00:41:55,650 --> 00:41:59,040
sensors all kind of these things and

00:41:57,240 --> 00:42:01,470
really cheap it's it's like here in the

00:41:59,040 --> 00:42:04,020
end so you get like a light pocket for

00:42:01,470 --> 00:42:05,580
like 10 Canadian dollar or so and you

00:42:04,020 --> 00:42:08,010
can actually open it and flash it

00:42:05,580 --> 00:42:09,870
without destroying it so the ship itself

00:42:08,010 --> 00:42:12,240
has no protection or something you can

00:42:09,870 --> 00:42:13,620
really just hook up the jtech interface

00:42:12,240 --> 00:42:15,930
and flash the ship or something like

00:42:13,620 --> 00:42:17,760
rirs has already support for this kind

00:42:15,930 --> 00:42:20,100
of device which means you can have like

00:42:17,760 --> 00:42:22,560
your own software running on the light

00:42:20,100 --> 00:42:24,060
bulb talking 50 not 4 and 6 logo and

00:42:22,560 --> 00:42:26,220
stuff like that and maybe talking to

00:42:24,060 --> 00:42:28,020
other devices so I don't know how much

00:42:26,220 --> 00:42:29,820
interest that is to other people here

00:42:28,020 --> 00:42:31,590
but for me obviously that's quite an

00:42:29,820 --> 00:42:34,440
interesting thing so I need to get that

00:42:31,590 --> 00:42:39,090
set up here the controller used in this

00:42:34,440 --> 00:42:41,280
kind of IKEA devices is in cortex m4 but

00:42:39,090 --> 00:42:43,320
it only has like to own at 56 kilobyte

00:42:41,280 --> 00:42:45,420
of RAM a flash and so they took it a bit

00:42:43,320 --> 00:42:46,950
of RAM so that's really out of scope for

00:42:45,420 --> 00:42:48,480
running the Knox on it so you really

00:42:46,950 --> 00:42:49,890
need a different operating system there

00:42:48,480 --> 00:42:51,750
but there are open source operating

00:42:49,890 --> 00:42:55,530
systems out there that can run on it and

00:42:51,750 --> 00:42:58,880
that's quite interesting ok so I will

00:42:55,530 --> 00:42:58,880
hand over to Alexander

00:43:06,180 --> 00:43:16,960
yeah hi my talk is about multiple

00:43:12,670 --> 00:43:20,020
interface handling on ITV 802 15 for

00:43:16,960 --> 00:43:24,460
five it's similar like but you know

00:43:20,020 --> 00:43:34,270
about Ethernet in make VLAN interface

00:43:24,460 --> 00:43:37,089
and currently but a Phi is 802 15 four

00:43:34,270 --> 00:43:41,530
or five is it's a device class under

00:43:37,089 --> 00:43:46,650
Linux I like in wireless and on top of a

00:43:41,530 --> 00:43:51,150
fire you can create several interfaces

00:43:46,650 --> 00:43:59,260
currently we support only one it depends

00:43:51,150 --> 00:44:04,440
if you want in infamous ghost mount so

00:43:59,260 --> 00:44:04,440
in Vilas this feature has more the

00:44:04,980 --> 00:44:10,599
missing why it's there is that you can

00:44:07,569 --> 00:44:12,390
run multiple access points on one file I

00:44:10,599 --> 00:44:18,779
think this is possible in wireless and

00:44:12,390 --> 00:44:22,680
we we have a similar infrastructure and

00:44:18,779 --> 00:44:26,619
the problem is when you want to one

00:44:22,680 --> 00:44:30,549
multiple interfaces on one file is that

00:44:26,619 --> 00:44:33,069
the Phi has only one address filter on

00:44:30,549 --> 00:44:35,680
the transceiver and you have only one

00:44:33,069 --> 00:44:40,150
register settings to set one address

00:44:35,680 --> 00:44:42,970
which is defined by the extended address

00:44:40,150 --> 00:44:45,069
it's a MAC address then a short address

00:44:42,970 --> 00:44:49,599
that's a second MAC address which you

00:44:45,069 --> 00:44:53,589
can use interleaf you can switch to them

00:44:49,599 --> 00:45:01,390
and a pan ID a pen ID is like in

00:44:53,589 --> 00:45:04,059
Ethernet a VLAN tag so this this thing

00:45:01,390 --> 00:45:07,660
is when you have to address filtering on

00:45:04,059 --> 00:45:12,279
and transceiver we see sir frame and

00:45:07,660 --> 00:45:14,020
it's getting foo-foo the atmosphere then

00:45:12,279 --> 00:45:16,349
the transceiver makes out

00:45:14,020 --> 00:45:20,890
acknowledged Ling handling and

00:45:16,349 --> 00:45:25,119
transmitted ik ik FEM back according to

00:45:20,890 --> 00:45:27,869
the received frame so is this more load

00:45:25,119 --> 00:45:30,580
feature because this was already know

00:45:27,869 --> 00:45:33,130
mentioned that the egg handling is very

00:45:30,580 --> 00:45:39,400
time critical and this is also the

00:45:33,130 --> 00:45:41,380
problem solution to make this is going

00:45:39,400 --> 00:45:44,290
into the Bowman's ghost mode and Puma's

00:45:41,380 --> 00:45:47,830
cosmos means disable their trace

00:45:44,290 --> 00:45:49,990
filtering and then let's doing Linux the

00:45:47,830 --> 00:45:54,010
filtering on the software side but then

00:45:49,990 --> 00:45:57,609
you disable egg egg handling because but

00:45:54,010 --> 00:45:58,330
I told you the transceiver is very

00:45:57,609 --> 00:46:03,070
stupid

00:45:58,330 --> 00:46:08,680
it's they have no more feature that I

00:46:03,070 --> 00:46:13,599
can say for this addresses Center act

00:46:08,680 --> 00:46:15,730
frame out or something the egg handling

00:46:13,599 --> 00:46:17,859
is only offloaded like this when it's

00:46:15,730 --> 00:46:20,710
passed the address filtering then it

00:46:17,859 --> 00:46:22,450
sent a bag for him back but we will be

00:46:20,710 --> 00:46:24,520
going to prove us ghost mode to offer

00:46:22,450 --> 00:46:27,910
that the Linux do the address filtering

00:46:24,520 --> 00:46:30,820
then we can then we need to disobey

00:46:27,910 --> 00:46:33,869
handling otherwise react every frame and

00:46:30,820 --> 00:46:41,619
just will confuse a lot of the network

00:46:33,869 --> 00:46:44,650
so though there exists a feature in our

00:46:41,619 --> 00:46:46,720
transceiver which is the 80-some at

00:46:44,650 --> 00:46:50,530
Metatron feature tong see you have issue

00:46:46,720 --> 00:46:53,500
is support it is known as slopped

00:46:50,530 --> 00:46:56,080
acknowledgement handling there and this

00:46:53,500 --> 00:47:01,599
feature is more that when you receive a

00:46:56,080 --> 00:47:04,630
frame and you want to a kit then you can

00:47:01,599 --> 00:47:07,020
trigger a pin and according the sequence

00:47:04,630 --> 00:47:12,660
number which is inside a frame buffer

00:47:07,020 --> 00:47:17,140
then it x this frame so it's very the

00:47:12,660 --> 00:47:20,940
speed it just it's just triggered a pin

00:47:17,140 --> 00:47:23,690
on where you have the pin setting and

00:47:20,940 --> 00:47:27,319
this

00:47:23,690 --> 00:47:30,230
and there is no need of socket buffer

00:47:27,319 --> 00:47:33,319
allocation because we don't we don't

00:47:30,230 --> 00:47:34,970
need to allocate any buffer we just need

00:47:33,319 --> 00:47:37,190
to trigger the pin and the sequence

00:47:34,970 --> 00:47:40,190
number according this acknowledgement

00:47:37,190 --> 00:47:44,809
frame is according the sequence number

00:47:40,190 --> 00:47:48,950
which is inside the frame buffer so then

00:47:44,809 --> 00:47:51,319
blamed implementation idea is to combine

00:47:48,950 --> 00:47:55,190
this feat to to feature the boom scoffs

00:47:51,319 --> 00:47:58,490
mode and and a lookup table a small

00:47:55,190 --> 00:48:02,210
lookup table on which addresses we want

00:47:58,490 --> 00:48:04,309
to act on the receiving part so if we

00:48:02,210 --> 00:48:10,130
receive a frame we need to weed out the

00:48:04,309 --> 00:48:13,609
frame so far we get the addresses and

00:48:10,130 --> 00:48:16,160
then we have a lookup table on which

00:48:13,609 --> 00:48:18,440
addresses we are all support in our

00:48:16,160 --> 00:48:21,400
linux deck so if you have multiple

00:48:18,440 --> 00:48:26,720
interfaces then D says address

00:48:21,400 --> 00:48:29,210
configuration and and then we want and

00:48:26,720 --> 00:48:31,970
look if you have an interface warning

00:48:29,210 --> 00:48:36,289
which belongs to this address and if

00:48:31,970 --> 00:48:41,990
this is true then B just week at the pin

00:48:36,289 --> 00:48:45,710
and then we sent it we sent a creme

00:48:41,990 --> 00:48:51,650
according to the frame out the C frame

00:48:45,710 --> 00:48:54,589
out so this is this is still a software

00:48:51,650 --> 00:48:58,910
handling but so far I see we can do that

00:48:54,589 --> 00:49:02,359
all in inside a heart I aku where the

00:48:58,910 --> 00:49:04,880
heart I ago I mean is the transceiver

00:49:02,359 --> 00:49:08,270
reports to the Linux kernel a data frame

00:49:04,880 --> 00:49:10,549
and then we just doing this handling and

00:49:08,270 --> 00:49:13,369
this feature is also possible to have

00:49:10,549 --> 00:49:17,089
this lookup table inside your ghz USP

00:49:13,369 --> 00:49:23,510
femur that's the USB dongle which one

00:49:17,089 --> 00:49:27,440
source precious femur on it but it's we

00:49:23,510 --> 00:49:30,829
need to test it if we still can handle

00:49:27,440 --> 00:49:33,339
the egg timings so the actual makes are

00:49:30,829 --> 00:49:38,230
something in I Triple E standard and

00:49:33,339 --> 00:49:38,230
they are also different accounting which

00:49:39,509 --> 00:49:46,779
frequency reuse and yeah this of course

00:49:43,950 --> 00:49:50,349
when we going into the problems of mode

00:49:46,779 --> 00:49:53,739
and doing a trance filtering on the

00:49:50,349 --> 00:49:58,359
Linux side then the Linux side has more

00:49:53,739 --> 00:50:01,660
work to do but we just but this is a

00:49:58,359 --> 00:50:07,150
feature somebody already requested it to

00:50:01,660 --> 00:50:10,049
have different sauce pan IDs and then on

00:50:07,150 --> 00:50:12,729
one file and then you can run on each

00:50:10,049 --> 00:50:15,430
interface a sec slope and interface and

00:50:12,729 --> 00:50:20,710
then you have something like a VLAN

00:50:15,430 --> 00:50:23,170
interface just a common to that

00:50:20,710 --> 00:50:25,150
so that really basically boils down that

00:50:23,170 --> 00:50:27,849
you might need to think about having

00:50:25,150 --> 00:50:31,269
software fallback implementations for

00:50:27,849 --> 00:50:34,329
something like automatic transmission

00:50:31,269 --> 00:50:36,160
and stuff like that that is that is one

00:50:34,329 --> 00:50:40,539
part of it and sometimes the hardware

00:50:36,160 --> 00:50:42,519
can help us set like the 80 transceiver

00:50:40,539 --> 00:50:46,180
we have there but there's also other

00:50:42,519 --> 00:50:48,130
types like CCC 25 20 or something I

00:50:46,180 --> 00:50:50,979
think they're functional Tver you can

00:50:48,130 --> 00:50:53,170
read out the buffer like you can send

00:50:50,979 --> 00:50:55,359
like getting an IQ if you have the

00:50:53,170 --> 00:50:56,859
buffer field for like 5 bytes or

00:50:55,359 --> 00:50:58,569
something then you can read it out while

00:50:56,859 --> 00:51:00,329
it's still receiving and then you can

00:50:58,569 --> 00:51:02,650
read out and think if you want to

00:51:00,329 --> 00:51:04,479
transmit the AK for that one because you

00:51:02,650 --> 00:51:04,960
can look up in the table if that's

00:51:04,479 --> 00:51:07,029
correct

00:51:04,960 --> 00:51:08,650
address there and so different Hardware

00:51:07,029 --> 00:51:10,299
types have different support for that

00:51:08,650 --> 00:51:12,160
but really have to look it for it for

00:51:10,299 --> 00:51:14,469
every type but there's also other things

00:51:12,160 --> 00:51:16,599
that might be problematic if you go for

00:51:14,469 --> 00:51:18,160
example something like beating enabled

00:51:16,599 --> 00:51:20,890
networks I mean we are not really using

00:51:18,160 --> 00:51:22,900
them for 6lowpan but in the specs are

00:51:20,890 --> 00:51:24,430
available that you can have like the

00:51:22,900 --> 00:51:27,369
network standing out beatings and then

00:51:24,430 --> 00:51:28,989
the device can join them you also need

00:51:27,369 --> 00:51:31,719
to take that into account if you're

00:51:28,989 --> 00:51:34,150
running different pants on one file

00:51:31,719 --> 00:51:35,890
layer on one file and then make sure

00:51:34,150 --> 00:51:37,180
that you send out to correct people's

00:51:35,890 --> 00:51:38,799
and everything I don't know the timing

00:51:37,180 --> 00:51:40,509
so that if they are really critical or

00:51:38,799 --> 00:51:44,769
not but it's also something to keep in

00:51:40,509 --> 00:51:47,550
mind there for others

00:51:44,769 --> 00:51:51,030
transceivers

00:51:47,550 --> 00:51:55,940
they don't have this pin I think but

00:51:51,030 --> 00:52:00,270
that we can allocate a small buffer and

00:51:55,940 --> 00:52:01,740
I mean it really depends from the ships

00:52:00,270 --> 00:52:04,710
really have different functionalities

00:52:01,740 --> 00:52:06,900
for example z1 from the sea c1 from TI

00:52:04,710 --> 00:52:09,750
has a functionality that you can say

00:52:06,900 --> 00:52:11,730
okay I want to get this buffer and IQ if

00:52:09,750 --> 00:52:13,440
the buffer has written like 5 bytes or

00:52:11,730 --> 00:52:15,360
something and then you do that then you

00:52:13,440 --> 00:52:18,210
check these a header see if that's the

00:52:15,360 --> 00:52:20,340
correct address then prepare the already

00:52:18,210 --> 00:52:21,480
make sure that completely receives a

00:52:20,340 --> 00:52:21,930
frame and then send also a key

00:52:21,480 --> 00:52:24,180
immediately

00:52:21,930 --> 00:52:26,040
I've seen in paper on that on the

00:52:24,180 --> 00:52:28,260
Kentucky side where they use this kind

00:52:26,040 --> 00:52:31,170
of functionality to piggyback see a key

00:52:28,260 --> 00:52:33,900
a key i values inside the software

00:52:31,170 --> 00:52:35,400
generated egg frame so that is something

00:52:33,900 --> 00:52:36,870
that it is possible I don't know if it's

00:52:35,400 --> 00:52:38,700
possible in Linux we have to see that

00:52:36,870 --> 00:52:44,670
but they are depending on the hardware

00:52:38,700 --> 00:52:48,120
sometimes it works sometimes not hello

00:52:44,670 --> 00:52:49,230
yeah question regarding the so most of

00:52:48,120 --> 00:52:51,270
the complexity that you have mentioned

00:52:49,230 --> 00:52:54,390
with regards to handling that will arise

00:52:51,270 --> 00:52:56,400
only in case if the pan ID used across

00:52:54,390 --> 00:52:58,740
multiple translation see was is same and

00:52:56,400 --> 00:53:01,950
that the channel of those transfers see

00:52:58,740 --> 00:53:03,810
what is also same right yeah if I define

00:53:01,950 --> 00:53:05,520
layer is the same the file layer channel

00:53:03,810 --> 00:53:06,870
is saying yeah and the pan ID is same

00:53:05,520 --> 00:53:12,200
because otherwise the hardware should

00:53:06,870 --> 00:53:15,420
take should ensure that that AK

00:53:12,200 --> 00:53:18,780
transmission happens properly yeah the

00:53:15,420 --> 00:53:22,620
issue is here you have only one address

00:53:18,780 --> 00:53:24,360
filtering on the transceiver the address

00:53:22,620 --> 00:53:27,120
filtering under Tom Seaver and you

00:53:24,360 --> 00:53:28,860
cannot tell the transceiver that you

00:53:27,120 --> 00:53:32,810
wanting to source

00:53:28,860 --> 00:53:36,600
pants and I I try to make that you can

00:53:32,810 --> 00:53:38,700
handle different addresses so much yeah

00:53:36,600 --> 00:53:41,010
so sorry to interrupt you yeah so but

00:53:38,700 --> 00:53:43,140
but but as I understand yeah the ACK

00:53:41,010 --> 00:53:45,990
would be transmitted only if the pan ID

00:53:43,140 --> 00:53:47,310
matches yeah so essentially what I am

00:53:45,990 --> 00:53:48,780
trying to understand the rationale why

00:53:47,310 --> 00:53:51,210
anyone would have multiple trans

00:53:48,780 --> 00:53:54,120
receivers on the same pan ID in the same

00:53:51,210 --> 00:53:55,320
channel I mean that is that is as if

00:53:54,120 --> 00:53:58,950
deaths

00:53:55,320 --> 00:54:02,370
I got this request for this feature from

00:53:58,950 --> 00:54:05,310
some whipple guy my microwave sneeze on

00:54:02,370 --> 00:54:08,700
the meaningless sake and he wanted to

00:54:05,310 --> 00:54:12,210
have she wants to out between two pants

00:54:08,700 --> 00:54:15,480
and they lost the use case for him okay

00:54:12,210 --> 00:54:20,190
and yeah and then you can possible if

00:54:15,480 --> 00:54:22,500
you have to make interfaces on one file

00:54:20,190 --> 00:54:25,290
and then you set up six loop and

00:54:22,500 --> 00:54:30,150
interface on each of them and then you

00:54:25,290 --> 00:54:32,730
can make some weird setups like this one

00:54:30,150 --> 00:54:38,010
you can also use to trump's evinced it's

00:54:32,730 --> 00:54:41,610
also yeah I just just maybe Michael will

00:54:38,010 --> 00:54:43,560
be able to you can you know he's not

00:54:41,610 --> 00:54:46,500
trace not here and he will be there an

00:54:43,560 --> 00:54:48,150
idea of anyways so another question I'm

00:54:46,500 --> 00:54:52,020
not sure if it is in the same context

00:54:48,150 --> 00:54:53,430
but the RDC or the radio duty cycling is

00:54:52,020 --> 00:54:54,960
something that has been missing as part

00:54:53,430 --> 00:54:56,160
of this implementation we are we are

00:54:54,960 --> 00:54:57,810
actively making use of this

00:54:56,160 --> 00:55:00,030
implementation there's several issues

00:54:57,810 --> 00:55:02,430
that we have fixed as of now in this

00:55:00,030 --> 00:55:05,100
implementation one which recently I

00:55:02,430 --> 00:55:07,410
think we have mentioned on the mailing

00:55:05,100 --> 00:55:09,660
list regarding the problem of removing

00:55:07,410 --> 00:55:11,490
the frame check sequence FCS to whites

00:55:09,660 --> 00:55:13,580
frame check sequence I think you are

00:55:11,490 --> 00:55:16,290
replied back one of my team members are

00:55:13,580 --> 00:55:21,000
mailed on the mailing list so what I'm

00:55:16,290 --> 00:55:23,100
trying to say is more more most of the

00:55:21,000 --> 00:55:24,720
implementation is working but one of the

00:55:23,100 --> 00:55:26,790
key part which is the radio data cycling

00:55:24,720 --> 00:55:28,800
is missing and is there any is there any

00:55:26,790 --> 00:55:30,120
scope or is there any plan I I know a

00:55:28,800 --> 00:55:36,090
lot there is lot on the table already

00:55:30,120 --> 00:55:38,430
but is there me for my thought at least

00:55:36,090 --> 00:55:40,980
I have not really thought much about

00:55:38,430 --> 00:55:42,810
ready to do cycling work on that regards

00:55:40,980 --> 00:55:44,370
sir if you have anyone on implementing

00:55:42,810 --> 00:55:46,230
stuff there and have interest in getting

00:55:44,370 --> 00:55:47,970
there didn't I mean they always open to

00:55:46,230 --> 00:55:50,280
get patches there and we're happy to

00:55:47,970 --> 00:55:51,660
review stuff so at least on my side I'm

00:55:50,280 --> 00:55:53,670
not planning on doing implementations

00:55:51,660 --> 00:55:55,230
and I don't know if Alex heard but from

00:55:53,670 --> 00:56:00,090
its look on his face I think he's not

00:55:55,230 --> 00:56:01,920
planning on doing that yeah you have any

00:56:00,090 --> 00:56:04,290
plans to doing radio Duty cycling's

00:56:01,920 --> 00:56:07,080
worker

00:56:04,290 --> 00:56:10,080
and there exists some software very

00:56:07,080 --> 00:56:13,590
dirty cycling fund Kentucky but it is

00:56:10,080 --> 00:56:16,650
also not a ton or 250 for specific so

00:56:13,590 --> 00:56:19,950
people running into issues because this

00:56:16,650 --> 00:56:23,010
is used out-of-the-box and then I say no

00:56:19,950 --> 00:56:25,140
you need to disable that and then yeah

00:56:23,010 --> 00:56:30,360
but they losing then more low-power

00:56:25,140 --> 00:56:34,350
feature and such things but we don't so

00:56:30,360 --> 00:56:36,630
what is right now I we from Kentucky

00:56:34,350 --> 00:56:39,380
side I'm not more involved with the

00:56:36,630 --> 00:56:42,330
Kentucky community but Marvis to iOS and

00:56:39,380 --> 00:56:45,120
driver s people they also don't

00:56:42,330 --> 00:56:49,050
throughput this kentucky well when you

00:56:45,120 --> 00:56:52,350
Dottie Sankar but I can imagine that

00:56:49,050 --> 00:56:54,270
send patches and that's one of the

00:56:52,350 --> 00:56:59,790
problem that you know IDC is not

00:56:54,270 --> 00:57:02,850
standardized not yeah Afghanistan we can

00:56:59,790 --> 00:57:05,280
ten for sure but I don't know if you

00:57:02,850 --> 00:57:07,950
have any policy if you want you have I

00:57:05,280 --> 00:57:09,510
mean it depends on if there's a real

00:57:07,950 --> 00:57:11,130
need for it I mean I'm not really

00:57:09,510 --> 00:57:13,320
blocking things I mean I'm I'm always

00:57:11,130 --> 00:57:15,450
skeptical if there's just one use case

00:57:13,320 --> 00:57:17,460
for a specific thing and I don't really

00:57:15,450 --> 00:57:19,170
want to have all the maintenance of this

00:57:17,460 --> 00:57:21,710
kind of things I don't really have

00:57:19,170 --> 00:57:24,270
interested in or any any use cases for

00:57:21,710 --> 00:57:26,250
but if you bring it up on the list and

00:57:24,270 --> 00:57:28,470
and describe why you're having it and

00:57:26,250 --> 00:57:30,210
what kind of reputation you did and if

00:57:28,470 --> 00:57:32,670
you make an make sure that it's not

00:57:30,210 --> 00:57:34,140
really in the way for others then we can

00:57:32,670 --> 00:57:36,030
see maybe have a way for getting that

00:57:34,140 --> 00:57:37,620
and but I really need to look into into

00:57:36,030 --> 00:57:39,750
what you did there and what is actually

00:57:37,620 --> 00:57:43,170
ZZ downside and what's the advantage

00:57:39,750 --> 00:57:45,150
there but on one other thing you

00:57:43,170 --> 00:57:46,710
mentioned so you said that you found

00:57:45,150 --> 00:57:48,240
different gaps and the implementation

00:57:46,710 --> 00:57:50,130
with just obviously the idea for a lot

00:57:48,240 --> 00:57:51,780
of them I know that but it would be

00:57:50,130 --> 00:57:54,360
really good and interesting for us to

00:57:51,780 --> 00:57:55,920
get feedback input in what kind of use

00:57:54,360 --> 00:57:59,400
case you have for it what you're using

00:57:55,920 --> 00:58:02,250
it for and what is missing because we

00:57:59,400 --> 00:58:04,050
both use it mostly for role just toying

00:58:02,250 --> 00:58:07,590
around with it playing but it's not like

00:58:04,050 --> 00:58:09,420
in real company use case or some

00:58:07,590 --> 00:58:11,910
commercial use case or anything for that

00:58:09,420 --> 00:58:14,520
so obviously we are not having the right

00:58:11,910 --> 00:58:16,770
priorities sometimes so getting input

00:58:14,520 --> 00:58:19,230
from from other people using it might

00:58:16,770 --> 00:58:20,640
actually help us to schedule our sources

00:58:19,230 --> 00:58:22,530
the right way to actually get that race

00:58:20,640 --> 00:58:24,030
so if you have anything like that drop

00:58:22,530 --> 00:58:25,350
less is made on the list or drop it to

00:58:24,030 --> 00:58:28,470
me and Alex or something that would

00:58:25,350 --> 00:58:35,670
really help thank you

00:58:28,470 --> 00:58:38,310
so my next talk it's about some yeah I

00:58:35,670 --> 00:58:43,290
talked a little bit about this already

00:58:38,310 --> 00:58:45,570
last native in mantra so it's about

00:58:43,290 --> 00:58:49,380
getting my header information from ipv6

00:58:45,570 --> 00:58:53,430
socket layer so it sounds weird but they

00:58:49,380 --> 00:58:56,790
exist the ITF makes protocols currently

00:58:53,430 --> 00:58:59,400
for example in 802 15 4 there's mesh

00:58:56,790 --> 00:59:03,980
link establishment protocol which I know

00:58:59,400 --> 00:59:11,210
I'm ever offered it and this protocol

00:59:03,980 --> 00:59:17,130
works on top of UDP layer and then but

00:59:11,210 --> 00:59:19,710
and what this protocol needs is to some

00:59:17,130 --> 00:59:24,480
mech header information in receiving

00:59:19,710 --> 00:59:28,230
part which you cannot get currently from

00:59:24,480 --> 00:59:30,510
for my Linux ipv6 UDP socket and also if

00:59:28,230 --> 00:59:35,130
you want to do something in neighbor

00:59:30,510 --> 00:59:40,470
discovery I think the most stuff is that

00:59:35,130 --> 00:59:43,200
I think there also some features for

00:59:40,470 --> 00:59:47,160
compression and decompression which they

00:59:43,200 --> 00:59:49,320
don't want to send twice and then you

00:59:47,160 --> 00:59:52,740
can we construct such data from the Mac

00:59:49,320 --> 00:59:56,720
header but here are some source about

00:59:52,740 --> 00:59:59,460
what how to take it this issue because

00:59:56,720 --> 01:00:01,680
currently there they are people who

00:59:59,460 --> 01:00:03,630
asking for such feature because they

01:00:01,680 --> 01:00:06,800
wanted to implement something like

01:00:03,630 --> 01:00:12,960
mentioning establishment protocol and

01:00:06,800 --> 01:00:17,390
yeah yeah this is this the question is

01:00:12,960 --> 01:00:20,820
how we to get them pair message this is

01:00:17,390 --> 01:00:24,060
this is a really according per message

01:00:20,820 --> 01:00:28,200
so when you run your system call receive

01:00:24,060 --> 01:00:29,839
message and you want to get some yeah

01:00:28,200 --> 01:00:32,709
how was the make

01:00:29,839 --> 01:00:37,819
look like four specific attributes like

01:00:32,709 --> 01:00:43,789
what was the MAC address which was used

01:00:37,819 --> 01:00:46,249
and also in 802 15 4 we have a flow

01:00:43,789 --> 01:00:49,699
control flea field which indicates if

01:00:46,249 --> 01:00:56,289
securities enabled or not and this is

01:00:49,699 --> 01:00:59,749
also needed in in this on top of this

01:00:56,289 --> 01:01:02,839
layer so people usually working this

01:00:59,749 --> 01:01:05,479
around by if you use stateless auto

01:01:02,839 --> 01:01:09,319
configuration then you can reconstruct

01:01:05,479 --> 01:01:12,799
your link layer address from layer 3 I

01:01:09,319 --> 01:01:15,920
already saw such code but this is not

01:01:12,799 --> 01:01:18,529
vast water AFC it's telling you they are

01:01:15,920 --> 01:01:20,299
see standing you get this method and

01:01:18,529 --> 01:01:25,069
these information from the MEK header

01:01:20,299 --> 01:01:28,069
and yeah I'm worried about that there

01:01:25,069 --> 01:01:30,170
are special cases where it doesn't work

01:01:28,069 --> 01:01:35,299
anymore because the atomists

01:01:30,170 --> 01:01:37,420
which is used is not from it's not it's

01:01:35,299 --> 01:01:40,579
not a stateless auto-configuration

01:01:37,420 --> 01:01:46,999
address for example when they when they

01:01:40,579 --> 01:01:49,689
is based on the MAC address and yeah the

01:01:46,999 --> 01:01:53,179
solution which I already thought about

01:01:49,689 --> 01:01:57,019
and also my convention for my ITF he

01:01:53,179 --> 01:01:59,989
wanted also this feature to put this

01:01:57,019 --> 01:02:02,900
into the control message in information

01:01:59,989 --> 01:02:07,549
so for receive message and sent message

01:02:02,900 --> 01:02:11,359
you have some ancillary data this is for

01:02:07,549 --> 01:02:17,059
some fields like hop limit ipv6 hop

01:02:11,359 --> 01:02:20,179
limit is you can ask us what was the hop

01:02:17,059 --> 01:02:24,619
limit of the ipv6 header when you get a

01:02:20,179 --> 01:02:28,189
message on top of UDP and also these

01:02:24,619 --> 01:02:30,709
attributes they are are actually defined

01:02:28,189 --> 01:02:34,729
by a technical RC I don't know which

01:02:30,709 --> 01:02:39,170
number again but ipv6 hop limit some

01:02:34,729 --> 01:02:42,469
soft stuff is specified by ITF how they

01:02:39,170 --> 01:02:43,460
look at how they look at at a BST socket

01:02:42,469 --> 01:02:48,680
interface

01:02:43,460 --> 01:02:50,470
so if we add on our own stuff then

01:02:48,680 --> 01:02:53,260
everything gets very little specific

01:02:50,470 --> 01:02:56,869
because then you cannot port anymore

01:02:53,260 --> 01:02:58,970
other software or other software to iOS

01:02:56,869 --> 01:03:03,500
or Contiki when they're using the same

01:02:58,970 --> 01:03:05,660
socket layer I already heard implement

01:03:03,500 --> 01:03:12,710
they want to get rid of the BSD so good

01:03:05,660 --> 01:03:15,079
and want to make some own and yeah I

01:03:12,710 --> 01:03:17,720
thought when we implement something like

01:03:15,079 --> 01:03:19,700
that then we can also submit some

01:03:17,720 --> 01:03:22,819
technique and I'll see if somebody I

01:03:19,700 --> 01:03:26,690
never did that but if we want to do that

01:03:22,819 --> 01:03:30,220
maybe we can start some discussion on

01:03:26,690 --> 01:03:33,319
the six low working Manning meaning list

01:03:30,220 --> 01:03:35,809
somebody who brought and there's another

01:03:33,319 --> 01:03:42,109
problem also how to get these

01:03:35,809 --> 01:03:47,150
information from the 6lowpan layer up to

01:03:42,109 --> 01:03:50,270
the UDP socket layer and because you

01:03:47,150 --> 01:03:53,780
know the socket buffer is very strict

01:03:50,270 --> 01:03:55,520
according that it fits into cache line

01:03:53,780 --> 01:03:59,770
and something begin you cannot simply

01:03:55,520 --> 01:04:11,589
add more and more metadata otherwise

01:03:59,770 --> 01:04:11,589
yeah it's it's getting too full and yeah

01:04:11,650 --> 01:04:17,000
other solution because recently there

01:04:14,540 --> 01:04:18,790
was some body on the mailing list and on

01:04:17,000 --> 01:04:21,559
a

01:04:18,790 --> 01:04:24,530
he thought yeah when I go to the pomace

01:04:21,559 --> 01:04:28,460
ghost mode and make it wall socket then

01:04:24,530 --> 01:04:31,190
I get the Domecq header information in

01:04:28,460 --> 01:04:37,460
the payload but this is not true because

01:04:31,190 --> 01:04:40,280
our 6lowpan interface is more war ipv6

01:04:37,460 --> 01:04:45,589
interface after the 6lowpan adaptation

01:04:40,280 --> 01:04:47,720
so we remove completely the the mech

01:04:45,589 --> 01:04:51,470
header information so it looks like on

01:04:47,720 --> 01:04:55,960
the Bluetooth side and on the internal

01:04:51,470 --> 01:04:55,960
215 far side it looks the same and

01:04:57,079 --> 01:05:06,839
this is not how how its works it it was

01:05:01,349 --> 01:05:11,130
a mess like this and also on sent this

01:05:06,839 --> 01:05:13,739
also solved a problem on receive message

01:05:11,130 --> 01:05:17,400
but one what is when sent message when

01:05:13,739 --> 01:05:19,170
you want to say on top of ipv6 UDP

01:05:17,400 --> 01:05:21,449
socket you want to say please use a

01:05:19,170 --> 01:05:26,579
short address instead of extended

01:05:21,449 --> 01:05:29,880
address or NAB if don't enable the

01:05:26,579 --> 01:05:32,239
security field on this specific ipv6

01:05:29,880 --> 01:05:32,239
packet

01:05:32,989 --> 01:05:38,849
you cannot tell this over the solution

01:05:36,390 --> 01:05:42,029
isn't and that's more somebody thought

01:05:38,849 --> 01:05:45,589
it would work like this but sent message

01:05:42,029 --> 01:05:56,400
is you need to have some fields then

01:05:45,589 --> 01:05:59,369
that's what the people want and yeah and

01:05:56,400 --> 01:06:02,759
also on this wake phone message if we

01:05:59,369 --> 01:06:06,239
put I Triple E 800 254 frame and then

01:06:02,759 --> 01:06:10,859
Wow ipv6 frame this is eight are not

01:06:06,239 --> 01:06:15,180
defined at all we can put or ipv6

01:06:10,859 --> 01:06:18,180
dispatch value on a 6lowpan this slope

01:06:15,180 --> 01:06:20,069
and specification they said actually

01:06:18,180 --> 01:06:23,130
dispatch value this is compression

01:06:20,069 --> 01:06:26,099
according some standard but you can also

01:06:23,130 --> 01:06:29,069
say this is our ipv6 packet which is not

01:06:26,099 --> 01:06:32,069
compress this can we can work I want is

01:06:29,069 --> 01:06:33,690
like this but this is also that sounds

01:06:32,069 --> 01:06:37,799
more like a hack and we should not

01:06:33,690 --> 01:06:41,969
change its behavior I think but the user

01:06:37,799 --> 01:06:46,229
really want is on top of UDP and ICP v6

01:06:41,969 --> 01:06:49,680
sockets they want to have this as a

01:06:46,229 --> 01:06:57,839
control message field so they can simply

01:06:49,680 --> 01:07:01,670
say for this ipv6 message piece use this

01:06:57,839 --> 01:07:04,910
dismiss mech header information or

01:07:01,670 --> 01:07:08,269
received is my mech header information

01:07:04,910 --> 01:07:09,930
but there's also a question according

01:07:08,269 --> 01:07:12,420
fragmentation because

01:07:09,930 --> 01:07:14,190
when you realize when you want

01:07:12,420 --> 01:07:19,619
augmentation you have multiple Mac

01:07:14,190 --> 01:07:21,809
information and which then the making

01:07:19,619 --> 01:07:25,410
information also be the same for

01:07:21,809 --> 01:07:29,130
addresses it need to be the same but I

01:07:25,410 --> 01:07:33,510
don't know if when there's a field and

01:07:29,130 --> 01:07:38,010
the fragmentation and when when we

01:07:33,510 --> 01:07:40,859
receive ipv6 header which belongs to

01:07:38,010 --> 01:07:43,410
more fragments which header infamy

01:07:40,859 --> 01:07:46,160
then these mech header information it

01:07:43,410 --> 01:07:51,359
all do be the same on all four ik

01:07:46,160 --> 01:07:55,440
fragments so yeah we need some way to

01:07:51,359 --> 01:07:58,260
offer this oversee message data in our

01:07:55,440 --> 01:08:00,809
upstream acceptable solution so not just

01:07:58,260 --> 01:08:03,569
putting it into the skb buffer and then

01:08:00,809 --> 01:08:09,720
get it from there I think this was my

01:08:03,569 --> 01:08:13,589
heck and in my teases but there exists

01:08:09,720 --> 01:08:16,890
some skp hash metadata in the socket

01:08:13,589 --> 01:08:20,699
buffer and I think we can we can at

01:08:16,890 --> 01:08:26,190
least identify the skp buffer from the

01:08:20,699 --> 01:08:28,620
6lowpan layer again on the UDP socket

01:08:26,190 --> 01:08:32,750
layer for example and according this

01:08:28,620 --> 01:08:38,600
hash value under the sieving side and

01:08:32,750 --> 01:08:44,279
transmit side we can identify them true

01:08:38,600 --> 01:08:47,370
through the layers and you know maybe

01:08:44,279 --> 01:08:50,310
that's the solution and but again this I

01:08:47,370 --> 01:08:55,109
I would like to welcome to have a

01:08:50,310 --> 01:08:59,310
solution that we come close close with

01:08:55,109 --> 01:09:03,299
other operating system together on a

01:08:59,310 --> 01:09:05,429
socket layer so not I know that Kentucky

01:09:03,299 --> 01:09:07,560
and why do s everything is they don't

01:09:05,429 --> 01:09:10,170
have a separation between kernel and

01:09:07,560 --> 01:09:12,810
user space they just get this

01:09:10,170 --> 01:09:16,650
information somehow on some different

01:09:12,810 --> 01:09:19,170
way but we are we we want to have API

01:09:16,650 --> 01:09:23,680
for this in the current socket interface

01:09:19,170 --> 01:09:28,930
API and there are also existing

01:09:23,680 --> 01:09:32,320
very meta data in the skb like Wi-Fi act

01:09:28,930 --> 01:09:35,200
this is for example me this is Wireless

01:09:32,320 --> 01:09:39,790
has a feature for net to check if this

01:09:35,200 --> 01:09:41,380
IP header was act or not and we can

01:09:39,790 --> 01:09:44,050
simply use it because we are not while

01:09:41,380 --> 01:09:46,660
wireless we can simply use the same

01:09:44,050 --> 01:09:48,640
fields but we don't do that right now

01:09:46,660 --> 01:09:51,340
but I think it would be a small page to

01:09:48,640 --> 01:09:53,340
do that and I think you can get this

01:09:51,340 --> 01:09:59,530
information from the socket lrq and

01:09:53,340 --> 01:10:05,320
there's something yeah and this was all

01:09:59,530 --> 01:10:08,910
now I ain't gave any questions on this

01:10:05,320 --> 01:10:08,910
part before we switch to the next one

01:10:12,900 --> 01:10:25,060
okay so we have like 10 minutes left so

01:10:21,340 --> 01:10:26,290
it will speed up a little bit here as I

01:10:25,060 --> 01:10:28,890
mentioned in the beginning of the

01:10:26,290 --> 01:10:32,020
workshop we had the situation where

01:10:28,890 --> 01:10:33,850
there was a rework on the IP version 6

01:10:32,020 --> 01:10:36,220
presentation handling and that really

01:10:33,850 --> 01:10:38,680
hit us hard because we didn't know what

01:10:36,220 --> 01:10:41,380
happens there and by our complete 6lo

01:10:38,680 --> 01:10:43,420
pants off stop working for us

01:10:41,380 --> 01:10:46,240
goodbye site helped us to find it and

01:10:43,420 --> 01:10:48,600
then we finally figured out that it was

01:10:46,240 --> 01:10:52,420
a problem becae error sorry half an hour

01:10:48,600 --> 01:10:54,460
no Mac layer here which is comedy

01:10:52,420 --> 01:10:56,860
different from Ethernet so that means we

01:10:54,460 --> 01:10:59,080
have the problem here that the struct

01:10:56,860 --> 01:11:02,080
did not have see right bytes paradin

01:10:59,080 --> 01:11:04,570
then we had some some random bytes in

01:11:02,080 --> 01:11:06,460
there and that might cause problems in

01:11:04,570 --> 01:11:08,920
some situations some not so Alex found a

01:11:06,460 --> 01:11:10,900
fix for that and we got it applied and

01:11:08,920 --> 01:11:15,850
that good but anyway so that all

01:11:10,900 --> 01:11:18,280
triggered some sort esting and

01:11:15,850 --> 01:11:20,830
especially do testing in a way for

01:11:18,280 --> 01:11:23,200
people that like Eric who do a lot of

01:11:20,830 --> 01:11:25,030
work on the qgp stack but definitely

01:11:23,200 --> 01:11:26,680
have no interest in 50 note 4 and I

01:11:25,030 --> 01:11:28,600
completely understand that and but they

01:11:26,680 --> 01:11:31,060
should have a way to actually easily

01:11:28,600 --> 01:11:32,710
test their rework and without getting

01:11:31,060 --> 01:11:35,610
involved in having hardware and setting

01:11:32,710 --> 01:11:38,890
it up completely like complicated way so

01:11:35,610 --> 01:11:40,960
Alex work on Harper simulator is one

01:11:38,890 --> 01:11:43,660
step in this directions so that we have

01:11:40,960 --> 01:11:45,250
a way to actually emulate the hardware

01:11:43,660 --> 01:11:46,510
so don't people don't have to have it

01:11:45,250 --> 01:11:50,140
and we can do it in a controlled

01:11:46,510 --> 01:11:52,540
environment we can add this kind as many

01:11:50,140 --> 01:11:56,140
devices you won't become as many address

01:11:52,540 --> 01:11:58,060
between the device and so on and if you

01:11:56,140 --> 01:12:00,220
can get started with that then we can go

01:11:58,060 --> 01:12:02,170
ahead and use something like a self-test

01:12:00,220 --> 01:12:07,150
and have our own test feed based on that

01:12:02,170 --> 01:12:09,040
so that will actually help two sides

01:12:07,150 --> 01:12:11,200
here one for example the situation we

01:12:09,040 --> 01:12:12,970
have for people like Eric doin huge

01:12:11,200 --> 01:12:14,560
reworks and the seconds want to check

01:12:12,970 --> 01:12:16,330
that everything works but also for me

01:12:14,560 --> 01:12:17,440
when I am applying purchase or something

01:12:16,330 --> 01:12:19,420
I want to make sure that everything

01:12:17,440 --> 01:12:21,130
works and right now my test setup always

01:12:19,420 --> 01:12:23,080
involves real hardware and stuff like

01:12:21,130 --> 01:12:25,030
that that is also slow and annoying at

01:12:23,080 --> 01:12:25,929
some points for example then like now

01:12:25,030 --> 01:12:27,760
when I'm traveling

01:12:25,929 --> 01:12:29,199
and would I be true actually I mean I'm

01:12:27,760 --> 01:12:30,940
able to review Petrus but I'm not able

01:12:29,199 --> 01:12:33,460
to test them so if I have a way to

01:12:30,940 --> 01:12:35,080
actually really emulate that in just

01:12:33,460 --> 01:12:37,750
software ways that really would help me

01:12:35,080 --> 01:12:41,590
as well so that is the direction you

01:12:37,750 --> 01:12:43,719
want to go in and yeah so the first

01:12:41,590 --> 01:12:45,850
steps are like see how to assimilate a

01:12:43,719 --> 01:12:47,590
driver that is in progress right now

01:12:45,850 --> 01:12:49,780
as I said really similar to the one from

01:12:47,590 --> 01:12:52,270
Wireless all the concepts and ideas and

01:12:49,780 --> 01:12:53,710
even some code is copied from there so

01:12:52,270 --> 01:12:57,429
we can emulate a whole stack running

01:12:53,710 --> 01:13:01,060
15.4 and 6lowpan on that that is working

01:12:57,429 --> 01:13:02,530
quite fun actually and it's easy for

01:13:01,060 --> 01:13:06,280
people without the hardware or even

01:13:02,530 --> 01:13:09,340
interested castle so hoping that all up

01:13:06,280 --> 01:13:11,350
to K self-test gives us a way for easy

01:13:09,340 --> 01:13:15,190
regression testing or even testing for

01:13:11,350 --> 01:13:17,920
new Petrus coming in it's also helpful

01:13:15,190 --> 01:13:21,070
if doing a bigger Network stack rework

01:13:17,920 --> 01:13:23,350
as I said so the basic things I wanted

01:13:21,070 --> 01:13:24,909
to see in there and the things I will be

01:13:23,350 --> 01:13:26,199
working on I mean I can't really give a

01:13:24,909 --> 01:13:29,230
timeframe for that but that's something

01:13:26,199 --> 01:13:31,239
I want to work on definitely it's like

01:13:29,230 --> 01:13:33,760
having different frame sizes having

01:13:31,239 --> 01:13:34,929
different in 15.4 having different frame

01:13:33,760 --> 01:13:36,280
size for 6lowpan

01:13:34,929 --> 01:13:38,620
making sure that different hello

01:13:36,280 --> 01:13:40,120
compressions are enabled all on and off

01:13:38,620 --> 01:13:42,010
and so on the candling and sees that all

01:13:40,120 --> 01:13:43,630
the different permutations of things we

01:13:42,010 --> 01:13:45,880
have right now is working I mean that's

01:13:43,630 --> 01:13:47,500
really only a subset of what is possible

01:13:45,880 --> 01:13:48,790
but that's a subset we have right now

01:13:47,500 --> 01:13:54,460
and we want to make sure that that is

01:13:48,790 --> 01:13:57,480
actually tested from that one later on

01:13:54,460 --> 01:13:59,920
we can go in more advanced testings

01:13:57,480 --> 01:14:01,960
escapee that's a python-based use of

01:13:59,920 --> 01:14:04,870
space networking tool box basically I

01:14:01,960 --> 01:14:07,060
can do a lot of things there and I have

01:14:04,870 --> 01:14:09,250
an implementation for 50 not for for the

01:14:07,060 --> 01:14:11,020
file layer that is actually hooked into

01:14:09,250 --> 01:14:12,760
that and I was able to send our package

01:14:11,020 --> 01:14:15,610
over that you can really like

01:14:12,760 --> 01:14:18,010
programmatically do your own package

01:14:15,610 --> 01:14:20,590
make sure that what kind of friends you

01:14:18,010 --> 01:14:22,480
have for kind of fields of the frames

01:14:20,590 --> 01:14:24,159
actually said for kind of bits I said

01:14:22,480 --> 01:14:25,840
what kind of payload you put in and you

01:14:24,159 --> 01:14:27,610
can do a lot of things like you can do

01:14:25,840 --> 01:14:29,920
security research you can also do just

01:14:27,610 --> 01:14:31,920
pack for network stack testing and stuff

01:14:29,920 --> 01:14:34,449
like that so there's something

01:14:31,920 --> 01:14:36,969
interesting in there if Skype is really

01:14:34,449 --> 01:14:39,300
is a way for us in the end to go I don't

01:14:36,969 --> 01:14:41,340
know yet but it's an interesting product

01:14:39,300 --> 01:14:42,960
never less so I really need to dust up

01:14:41,340 --> 01:14:45,690
all the implementations I have clean it

01:14:42,960 --> 01:14:49,110
up and send it upstream then there's

01:14:45,690 --> 01:14:51,060
also tightened but just like TTC and

01:14:49,110 --> 01:14:53,850
three that's a testing language and

01:14:51,060 --> 01:14:57,600
framework how I'd welter mentioned it or

01:14:53,850 --> 01:14:59,850
talked about at last met F in civil so

01:14:57,600 --> 01:15:02,490
this is really something for a bit more

01:14:59,850 --> 01:15:04,890
for complex for caustic you want to test

01:15:02,490 --> 01:15:07,620
you have different options I mean TTC

01:15:04,890 --> 01:15:09,810
and really a language designed for

01:15:07,620 --> 01:15:11,580
network testing in that case so that

01:15:09,810 --> 01:15:13,860
might be another option for actually for

01:15:11,580 --> 01:15:16,590
us chasing it I had to hope that I

01:15:13,860 --> 01:15:18,690
actually could do some testing this 15.4

01:15:16,590 --> 01:15:20,820
on it but I didn't really matter before

01:15:18,690 --> 01:15:22,950
the conference sorry for that so if you

01:15:20,820 --> 01:15:25,860
hope for imprimatur so details on that

01:15:22,950 --> 01:15:26,250
part I had to say selfie that's not

01:15:25,860 --> 01:15:29,850
possible

01:15:26,250 --> 01:15:31,440
um yeah so if you combine this kind of

01:15:29,850 --> 01:15:33,480
things so the first steps I mentioned is

01:15:31,440 --> 01:15:34,860
K self-test as a first and easy step and

01:15:33,480 --> 01:15:37,320
then the advanced test things that are

01:15:34,860 --> 01:15:40,170
something I see more that something

01:15:37,320 --> 01:15:42,330
myself or Alex will run more like

01:15:40,170 --> 01:15:43,410
regulary or something or other people

01:15:42,330 --> 01:15:46,080
that are interested in that definitely

01:15:43,410 --> 01:15:48,270
can run it as well but that's not at

01:15:46,080 --> 01:15:50,190
least the way I see it that's not part

01:15:48,270 --> 01:15:52,020
of the kernel because it might be to

01:15:50,190 --> 01:15:54,150
complicate in the end I mean I might be

01:15:52,020 --> 01:15:55,410
wrong as IVF Python scripts already but

01:15:54,150 --> 01:15:57,060
I don't know how easy is to get

01:15:55,410 --> 01:15:59,370
something like a dependency on scape II

01:15:57,060 --> 01:16:00,900
or tighten into the kernel for that well

01:15:59,370 --> 01:16:02,760
that's something you have to bring up I

01:16:00,900 --> 01:16:04,380
mean I'm I'm really new to Kay self

01:16:02,760 --> 01:16:05,970
trust myself so I don't know what what

01:16:04,380 --> 01:16:09,090
kind of dependencies they accept and

01:16:05,970 --> 01:16:10,710
whatnot and how we do that but the first

01:16:09,090 --> 01:16:15,450
thing said is something we can we can do

01:16:10,710 --> 01:16:17,400
easily okay so before we go to to the

01:16:15,450 --> 01:16:21,860
rest here any questions on on the

01:16:17,400 --> 01:16:21,860
testing side any suggestions because

01:16:25,500 --> 01:16:34,020
yeah the big advantage in HW simulator

01:16:30,780 --> 01:16:36,270
is that you can get create a multi hop

01:16:34,020 --> 01:16:40,770
network that was not possible before

01:16:36,270 --> 01:16:41,970
this fake lb in this very if you have

01:16:40,770 --> 01:16:46,820
multi hope but also you can enable

01:16:41,970 --> 01:16:46,820
during runtime yeah you can run devices

01:16:47,240 --> 01:16:55,320
delete phi phi connections and add final

01:16:53,160 --> 01:16:58,830
connections you can change topology on

01:16:55,320 --> 01:17:02,190
Phi layer but you want and what else was

01:16:58,830 --> 01:17:04,740
possible also this fake air be is if you

01:17:02,190 --> 01:17:07,290
want a money trying to face you and then

01:17:04,740 --> 01:17:09,690
Wyatt and user space or open certain

01:17:07,290 --> 01:17:12,780
user space and then you have on Linux to

01:17:09,690 --> 01:17:16,080
wired in user space so completely that's

01:17:12,780 --> 01:17:18,870
completely no test against all those

01:17:16,080 --> 01:17:20,700
decks without any hardware yeah I mean

01:17:18,870 --> 01:17:23,610
that is something I didn't bring that up

01:17:20,700 --> 01:17:25,110
here because I didn't see that as part

01:17:23,610 --> 01:17:26,610
of the first steps because I really want

01:17:25,110 --> 01:17:28,020
to keep that simple to make sure that we

01:17:26,610 --> 01:17:29,970
have something inside the kernel we can

01:17:28,020 --> 01:17:31,860
gloss around there with K self test but

01:17:29,970 --> 01:17:33,600
as I say as I said I mean later on for

01:17:31,860 --> 01:17:34,770
the more complex scenarios that might be

01:17:33,600 --> 01:17:36,510
interesting to also have different

01:17:34,770 --> 01:17:37,770
software starts running about but that

01:17:36,510 --> 01:17:40,200
always means that you have a more

01:17:37,770 --> 01:17:42,060
complex setup on your work machine to

01:17:40,200 --> 01:17:44,910
actually get that working and that is

01:17:42,060 --> 01:17:49,080
not really easily duplicated with others

01:17:44,910 --> 01:17:50,430
so okay any more questions or comments

01:17:49,080 --> 01:17:58,200
on the testing part here

01:17:50,430 --> 01:18:01,490
I mean besides do more testing no okay

01:17:58,200 --> 01:18:04,920
okay we come to the last topic here

01:18:01,490 --> 01:18:08,310
things we want to do in the future we

01:18:04,920 --> 01:18:10,160
want to get input in and yeah as I

01:18:08,310 --> 01:18:13,140
mentioned a few times during the saying

01:18:10,160 --> 01:18:15,740
there's a bunch of things you know that

01:18:13,140 --> 01:18:18,300
have gaps that we might need to fill

01:18:15,740 --> 01:18:19,920
that there's work to do that wasn't the

01:18:18,300 --> 01:18:22,320
table but we are just simply not not

01:18:19,920 --> 01:18:24,660
coming to it I mean I just I just got a

01:18:22,320 --> 01:18:26,760
parent a few months ago so that means my

01:18:24,660 --> 01:18:28,470
time is also limited and lakes move

01:18:26,760 --> 01:18:30,210
countries and has a full time job now

01:18:28,470 --> 01:18:32,160
not being a student anymore so that's

01:18:30,210 --> 01:18:33,870
really making problems for all the

01:18:32,160 --> 01:18:36,120
timing here but we are still interested

01:18:33,870 --> 01:18:38,070
we want to keep that forward but yeah

01:18:36,120 --> 01:18:39,179
just to explain it so one of the biggest

01:18:38,070 --> 01:18:41,909
things you have to work on

01:18:39,179 --> 01:18:47,219
hardwick I mentioned that before their

01:18:41,909 --> 01:18:50,039
CCC se 8210 transceivers s also the XP

01:18:47,219 --> 01:18:52,050
transceivers which nowadays could be

01:18:50,039 --> 01:18:54,209
used together with missus a def which

01:18:52,050 --> 01:18:56,099
was much the main line for like a few

01:18:54,209 --> 01:18:57,840
con already suspect or something you can

01:18:56,099 --> 01:19:00,659
bring up a driver for that in a more

01:18:57,840 --> 01:19:02,849
easy fashion because that's using a UART

01:19:00,659 --> 01:19:04,229
protocol and you can bring that in with

01:19:02,849 --> 01:19:06,780
the other so that might be another thing

01:19:04,229 --> 01:19:08,729
that's interesting here and this is to

01:19:06,780 --> 01:19:10,280
drivers you really need to find a way to

01:19:08,729 --> 01:19:12,539
find a good hardware how to make

01:19:10,280 --> 01:19:16,019
extraction then we can pull it into V

01:19:12,539 --> 01:19:18,209
into the file layer for us any

01:19:16,019 --> 01:19:19,739
compressions as I mentioned before in

01:19:18,209 --> 01:19:21,269
generic header compressions and see

01:19:19,739 --> 01:19:23,010
static contacts header compressions are

01:19:21,269 --> 01:19:26,010
the ones that I think are most

01:19:23,010 --> 01:19:28,559
interested interesting to work on I have

01:19:26,010 --> 01:19:31,199
some code sitting in a branch which is

01:19:28,559 --> 01:19:33,179
most likely very outdated for generic

01:19:31,199 --> 01:19:36,539
header compression I think it was only

01:19:33,179 --> 01:19:38,969
for I don't know if it was compression

01:19:36,539 --> 01:19:40,559
or decompression one side I had working

01:19:38,969 --> 01:19:43,530
and not the other one so that something

01:19:40,559 --> 01:19:45,360
also to dust off and work on MSF someone

01:19:43,530 --> 01:19:48,749
working on the study context I'm really

01:19:45,360 --> 01:19:51,630
happy to get any input on that then

01:19:48,749 --> 01:19:53,999
there's the rest we got to having like

01:19:51,630 --> 01:19:55,199
at the transmit power mode setting for

01:19:53,999 --> 01:19:57,869
sent message there's also something

01:19:55,199 --> 01:20:00,479
coming from MCR he wanted to have set to

01:19:57,869 --> 01:20:02,699
probe networks to probe notes her father

01:20:00,479 --> 01:20:04,590
our vape so can he can make routing

01:20:02,699 --> 01:20:08,249
decisions in his ripple implementation

01:20:04,590 --> 01:20:09,989
to actually decide how much of a power

01:20:08,249 --> 01:20:11,849
budget it would burn if he goes through

01:20:09,989 --> 01:20:13,590
this node to the other one so that's

01:20:11,849 --> 01:20:15,150
something interesting for him I don't

01:20:13,590 --> 01:20:16,920
know it's interesting for others but

01:20:15,150 --> 01:20:19,260
that's something we also need to sync

01:20:16,920 --> 01:20:21,150
and talk about and he also mentions a

01:20:19,260 --> 01:20:23,280
few terms by now sits as a software for

01:20:21,150 --> 01:20:25,349
black implementations for egg egg

01:20:23,280 --> 01:20:28,889
handling frame retries and maybe even

01:20:25,349 --> 01:20:30,719
see it CSMA handling but i really have

01:20:28,889 --> 01:20:32,249
to do some math and get the easy timing

01:20:30,719 --> 01:20:34,260
requirements from the specifications and

01:20:32,249 --> 01:20:36,599
figure out if that's possible or not and

01:20:34,260 --> 01:20:38,159
if it's possible how good we can

01:20:36,599 --> 01:20:40,199
actually met these requirements I mean

01:20:38,159 --> 01:20:41,820
it always depends on the of the box

01:20:40,199 --> 01:20:43,739
you're running it if you using something

01:20:41,820 --> 01:20:45,420
like a real time pet cert on top of the

01:20:43,739 --> 01:20:49,679
kernel or not that's a lot of things

01:20:45,420 --> 01:20:52,080
getting them off them and one of the

01:20:49,679 --> 01:20:55,770
things I'm always a bit reluctant

01:20:52,080 --> 01:20:57,930
to work on and making a final decision

01:20:55,770 --> 01:20:59,310
on all the user space interfaces because

01:20:57,930 --> 01:21:02,660
everything else you can easily change

01:20:59,310 --> 01:21:05,370
and change around and and fix light up

01:21:02,660 --> 01:21:07,410
but since we exposed to userspace

01:21:05,370 --> 01:21:08,970
are always the things we are mostly

01:21:07,410 --> 01:21:11,100
setting in stone and I'm not a big fan

01:21:08,970 --> 01:21:12,930
of redoing user space interface after a

01:21:11,100 --> 01:21:14,850
year or something just because we did it

01:21:12,930 --> 01:21:18,180
wrong in the first place

01:21:14,850 --> 01:21:20,370
so there's need for the configuration

01:21:18,180 --> 01:21:22,950
options for the different header

01:21:20,370 --> 01:21:25,140
compression schemes you can to enable

01:21:22,950 --> 01:21:27,060
the module disables and any of them

01:21:25,140 --> 01:21:29,340
making sure that they're running per

01:21:27,060 --> 01:21:32,250
node or in general or something so

01:21:29,340 --> 01:21:34,860
they're different things my first choice

01:21:32,250 --> 01:21:37,230
would be netting in that case as I

01:21:34,860 --> 01:21:39,690
suggested this is but I'm really not a

01:21:37,230 --> 01:21:42,330
big fan of that kind of thing for for

01:21:39,690 --> 01:21:43,800
configuration for this type I mean it's

01:21:42,330 --> 01:21:45,780
not a one-off configuration it's more

01:21:43,800 --> 01:21:47,130
like you really make sure that it is

01:21:45,780 --> 01:21:48,900
always running for this kind of node

01:21:47,130 --> 01:21:50,490
then you're updating and so on so doing

01:21:48,900 --> 01:21:51,990
it on Sisyphus I don't know if that's

01:21:50,490 --> 01:21:54,060
the best choice if there are other

01:21:51,990 --> 01:21:58,950
alternatives I would be happy to hear

01:21:54,060 --> 01:22:01,980
about it so then we have more things to

01:21:58,950 --> 01:22:04,140
be exposed for the overall most unlock

01:22:01,980 --> 01:22:08,760
protocols mostly ripple or other mesh

01:22:04,140 --> 01:22:11,730
implementations the AQI information we

01:22:08,760 --> 01:22:13,860
mentioned before getting them out to sea

01:22:11,730 --> 01:22:16,320
over the socket layer is one of those

01:22:13,860 --> 01:22:17,790
things here and I looked at the Patrick

01:22:16,320 --> 01:22:19,620
end today and I'm quite happy with it

01:22:17,790 --> 01:22:20,970
so that might be something one of the

01:22:19,620 --> 01:22:24,480
first things we do for the us-based

01:22:20,970 --> 01:22:26,760
improvement here also the rx energy

01:22:24,480 --> 01:22:29,640
Smith received metric and the transmit

01:22:26,760 --> 01:22:31,350
power in sent message said something we

01:22:29,640 --> 01:22:34,230
haven't really done code for yet that's

01:22:31,350 --> 01:22:36,150
just a request we got from from MCR and

01:22:34,230 --> 01:22:38,940
sauce routes is something you also

01:22:36,150 --> 01:22:41,340
requested but I think he I talked to him

01:22:38,940 --> 01:22:42,720
when I was trying to figure out if he

01:22:41,340 --> 01:22:46,530
would be able to him for him to come

01:22:42,720 --> 01:22:48,720
here but I think he never tried out the

01:22:46,530 --> 01:22:50,880
sauce route and segment routes and some

01:22:48,720 --> 01:22:53,250
to suggest since he got last year in

01:22:50,880 --> 01:22:55,140
Montreal that would be the first thing

01:22:53,250 --> 01:22:58,980
here actually has to do before we do any

01:22:55,140 --> 01:23:00,570
more implementations on that part so

01:22:58,980 --> 01:23:03,060
that is the user space interface I'm

01:23:00,570 --> 01:23:03,850
aware of that we need to do I'm happy to

01:23:03,060 --> 01:23:05,590
hear

01:23:03,850 --> 01:23:10,000
about more of different use cases you

01:23:05,590 --> 01:23:12,550
have um so gentleman go there's a bonus

01:23:10,000 --> 01:23:15,100
slides and I don't think able to come so

01:23:12,550 --> 01:23:17,170
we have a few minutes over time but I'm

01:23:15,100 --> 01:23:20,380
still be staying if like for two or more

01:23:17,170 --> 01:23:30,160
questions also if you have any go ahead

01:23:20,380 --> 01:23:33,670
I think what's important to do is maybe

01:23:30,160 --> 01:23:37,420
that we can support this stuff but

01:23:33,670 --> 01:23:40,180
outside so that's what the people wants

01:23:37,420 --> 01:23:42,760
when they hear about open sweat then

01:23:40,180 --> 01:23:45,790
they want one open sweat but there there

01:23:42,760 --> 01:23:48,610
are different people who want once you

01:23:45,790 --> 01:23:54,040
know some thought maybe only to one a

01:23:48,610 --> 01:23:56,650
user space stake in open side so the you

01:23:54,040 --> 01:23:58,840
wanna open sweat as a application that's

01:23:56,650 --> 01:24:05,890
sweat a movement limitation which is

01:23:58,840 --> 01:24:07,690
open source and then you can and can one

01:24:05,890 --> 01:24:10,840
is as user specific but this is not a

01:24:07,690 --> 01:24:15,220
goal what we want to do we want to offer

01:24:10,840 --> 01:24:18,340
this as a socket API but I get I have to

01:24:15,220 --> 01:24:21,820
opinion much people yeah this is of

01:24:18,340 --> 01:24:24,820
course nor more work but on the many

01:24:21,820 --> 01:24:29,560
missed I see a lot of people they they

01:24:24,820 --> 01:24:32,080
want I think in terms of 15.4 sweat got

01:24:29,560 --> 01:24:34,270
a lot momentum because I mean they don't

01:24:32,080 --> 01:24:36,130
only have a solution for 15 for for the

01:24:34,270 --> 01:24:38,830
basic building blocks but for a whole

01:24:36,130 --> 01:24:41,320
stack the thing is that for us to

01:24:38,830 --> 01:24:43,330
support it I mean I talked to the Ness

01:24:41,320 --> 01:24:44,980
guys and they have their own vision how

01:24:43,330 --> 01:24:46,750
they want to implement it and that is

01:24:44,980 --> 01:24:49,870
how they're doing it right now and then

01:24:46,750 --> 01:24:52,060
also only the only parts they would be

01:24:49,870 --> 01:24:53,940
interested in from our side would be

01:24:52,060 --> 01:24:55,930
easy drivers and fly layer and

01:24:53,940 --> 01:24:57,640
everything on top of that they want to

01:24:55,930 --> 01:24:59,440
control on their own but just fair I

01:24:57,640 --> 01:25:01,270
mean that their own show us how how they

01:24:59,440 --> 01:25:02,830
want to do that for us is different I

01:25:01,270 --> 01:25:04,870
mean we always wanted to have all the

01:25:02,830 --> 01:25:07,750
building with the parts of the stack and

01:25:04,870 --> 01:25:10,270
hands to actually run something like

01:25:07,750 --> 01:25:12,160
Emily on top on things like that but I

01:25:10,270 --> 01:25:13,720
mean if there's no interested from

01:25:12,160 --> 01:25:15,880
people coming in we really have to

01:25:13,720 --> 01:25:16,789
figure out what kind of resources we put

01:25:15,880 --> 01:25:19,399
somewhere so that

01:25:16,789 --> 01:25:21,019
why I wanted to get input and see what

01:25:19,399 --> 01:25:22,760
kind of people want to have and want to

01:25:21,019 --> 01:25:26,719
use and then we can make priorities

01:25:22,760 --> 01:25:29,389
based on that I mean I still would

01:25:26,719 --> 01:25:33,019
really happily run a run threat on top

01:25:29,389 --> 01:25:35,719
of Austin yeah and I'm fine so far we

01:25:33,019 --> 01:25:40,249
were closest the wired community I think

01:25:35,719 --> 01:25:44,059
and if they'd at least be support that

01:25:40,249 --> 01:25:50,559
that might be they support it yeah a

01:25:44,059 --> 01:25:53,569
good shape but they keep advancing in

01:25:50,559 --> 01:25:55,989
okay so any more questions from the

01:25:53,569 --> 01:25:55,989
audience here

01:25:56,019 --> 01:25:59,809
there you go

01:25:57,439 --> 01:26:02,659
finally any any chance of ripple

01:25:59,809 --> 01:26:04,819
integration a year I mean the workshop

01:26:02,659 --> 01:26:07,309
title was routing protocol as well so I

01:26:04,819 --> 01:26:09,019
was hoping yeah yeah that is that was a

01:26:07,309 --> 01:26:11,539
title from the one from last year so I

01:26:09,019 --> 01:26:14,539
kept it over and a lot I still hoped

01:26:11,539 --> 01:26:16,039
until a few months ago that MCR will be

01:26:14,539 --> 01:26:16,939
here but then he told me that he

01:26:16,039 --> 01:26:19,639
couldn't make it

01:26:16,939 --> 01:26:22,489
so he would be the guy talking about the

01:26:19,639 --> 01:26:24,799
Riverside so I mean from all side we are

01:26:22,489 --> 01:26:27,530
not retouching it we what we do is like

01:26:24,799 --> 01:26:29,479
we want to provide all the

01:26:27,530 --> 01:26:31,579
infrastructure on the stack to do that

01:26:29,479 --> 01:26:34,399
and I still hope we can do the Ripper

01:26:31,579 --> 01:26:38,780
part on the usual space so P dancer

01:26:34,399 --> 01:26:40,669
trying a bit something else but we did

01:26:38,780 --> 01:26:43,459
not doing the work on during the routine

01:26:40,669 --> 01:26:44,899
routing orientation here but all the

01:26:43,459 --> 01:26:47,780
requirements we get for that we try to

01:26:44,899 --> 01:26:49,069
find a way to actually to do that so we

01:26:47,780 --> 01:26:53,659
can get an implementation out of that

01:26:49,069 --> 01:26:56,289
work yeah yes actually the one strong

01:26:53,659 --> 01:27:01,010
thing is more complicated because the

01:26:56,289 --> 01:27:03,949
ipv6 stick it also drops a lot of thing

01:27:01,010 --> 01:27:06,769
out of the box when there's a option

01:27:03,949 --> 01:27:09,889
field in the IP options which they don't

01:27:06,769 --> 01:27:13,760
know yes recently I think Tom Hobart

01:27:09,889 --> 01:27:17,089
edited this FS control field to allow

01:27:13,760 --> 01:27:20,569
some more options field but unstrung

01:27:17,089 --> 01:27:23,839
stuff don't set it the user need to be

01:27:20,569 --> 01:27:27,610
aware of it but they're not lot of

01:27:23,839 --> 01:27:29,620
things that are missing and

01:27:27,610 --> 01:27:31,690
and you need to be more appealing

01:27:29,620 --> 01:27:34,720
experience you get a big warning there

01:27:31,690 --> 01:27:36,910
at the moment but yeah we need to take

01:27:34,720 --> 01:27:39,160
out these issues I mean the thing is

01:27:36,910 --> 01:27:41,110
Michael didn't really have time I saw to

01:27:39,160 --> 01:27:45,370
work on that I mean that is a sad

01:27:41,110 --> 01:27:46,810
reality basically that he knows about a

01:27:45,370 --> 01:27:48,670
few things he wants to implement there

01:27:46,810 --> 01:27:50,560
few of the feedback he got on the last

01:27:48,670 --> 01:27:52,150
time we also have been montrÃ©al some of

01:27:50,560 --> 01:27:54,270
the features he's waiting on us from our

01:27:52,150 --> 01:27:56,740
side yes let me actually implement them

01:27:54,270 --> 01:27:59,110
but also things like Alex mentioned the

01:27:56,740 --> 01:28:01,720
option to actually enable some some

01:27:59,110 --> 01:28:03,490
options for the kernel to make sure that

01:28:01,720 --> 01:28:04,990
they are working correctly because there

01:28:03,490 --> 01:28:07,090
wasn't they have been Petrus for that

01:28:04,990 --> 01:28:09,580
but I think the one applied now from

01:28:07,090 --> 01:28:11,110
from Tom I don't know anyway so there's

01:28:09,580 --> 01:28:13,660
there's an option now to actually decide

01:28:11,110 --> 01:28:16,750
was actually a replica one can run again

01:28:13,660 --> 01:28:18,960
but yeah so I mean there was this one

01:28:16,750 --> 01:28:21,820
color implementations for ripple but

01:28:18,960 --> 01:28:23,680
this person never really came back to me

01:28:21,820 --> 01:28:25,990
and never really want to do any work on

01:28:23,680 --> 01:28:27,370
that anymore so and and I personally

01:28:25,990 --> 01:28:29,980
think that your space would be the

01:28:27,370 --> 01:28:34,210
better place for it so I just think that

01:28:29,980 --> 01:28:36,160
I'm strong is a bit of a I mean Micah

01:28:34,210 --> 01:28:38,140
tries to bring it forward but it's

01:28:36,160 --> 01:28:40,450
really just historic project basically

01:28:38,140 --> 01:28:41,860
as well so so just one come in here so

01:28:40,450 --> 01:28:44,170
it's it's not only about the ripple

01:28:41,860 --> 01:28:46,300
implementation but the the interfaces

01:28:44,170 --> 01:28:47,590
for example in case of ripple there are

01:28:46,300 --> 01:28:49,840
some changes which are required to the

01:28:47,590 --> 01:28:51,760
routing protocol itself for example

01:28:49,840 --> 01:28:54,850
keeping some additional fields so that

01:28:51,760 --> 01:28:58,450
is something I mean it's not only about

01:28:54,850 --> 01:29:02,770
okay so yeah that's something we really

01:28:58,450 --> 01:29:04,990
talked about the case of case basis for

01:29:02,770 --> 01:29:06,880
routing stuff that will be a bit harder

01:29:04,990 --> 01:29:09,250
for Alex and myself to do because we are

01:29:06,880 --> 01:29:11,530
not that much into the complete core of

01:29:09,250 --> 01:29:12,520
the networking stack so but we can bring

01:29:11,530 --> 01:29:14,050
it up a little less we can do

01:29:12,520 --> 01:29:16,660
implementation and stuff like that but

01:29:14,050 --> 01:29:18,040
yeah you need to get information what is

01:29:16,660 --> 01:29:20,020
actually needed for that and there is

01:29:18,040 --> 01:29:22,180
normally what I rely on from my code to

01:29:20,020 --> 01:29:24,640
actually get his input but what he needs

01:29:22,180 --> 01:29:26,440
there for the implementation okay so I

01:29:24,640 --> 01:29:28,660
think we are over time but ten minutes

01:29:26,440 --> 01:29:32,010
now so I shall stop and thank you all

01:29:28,660 --> 01:29:32,010
and have a good day

01:29:32,750 --> 01:29:36,579

YouTube URL: https://www.youtube.com/watch?v=xnhvll2BSHQ


