Title: Netdev 0x12 - IPsec IKE tutorial lab
Publication date: 2018-07-31
Playlist: Netdev 0x12
Description: 
	If you have ever been intimidated by IPsec or always wondered what IPsec is and/or how IPsec datapath works in the kernel or how IPsec control path works in user space, then this tutorial is for you.

Sowmini Varadhan and Paul Wouters guided us through the theory and walked through the steps for setting up IKE/IPsec on VMs on our laptops. A number of other VMs were be made available as targets to connect-to for the different IKE scenarios via Libreswan. These scenarios included some commonly encountered roadblocks that are used to teach IPsec troubleshooting issues.

This tutorial/lab was presented at Netdev 0x12 in Montreal on July 11th, 2018.

More info:
https://www.netdevconf.org/0x12/session.html?ipsecike-tutoriallab
Captions: 
	00:00:01,589 --> 00:00:06,000
so welcome to the Linux IPSec tutorial

00:00:03,720 --> 00:00:07,859
I'm Sal mini from Oracle so in the first

00:00:06,000 --> 00:00:10,500
half of the talk I'll do the walk

00:00:07,859 --> 00:00:13,349
through the Linux kernel data path and

00:00:10,500 --> 00:00:14,670
then in the second half 12 voters will

00:00:13,349 --> 00:00:16,260
do the fun stuff he'll walk us through a

00:00:14,670 --> 00:00:18,660
hands-on lab and tell us about the

00:00:16,260 --> 00:00:22,199
respawn the seed or come alive and you

00:00:18,660 --> 00:00:24,630
know do the real stuff so please agenda

00:00:22,199 --> 00:00:26,939
for the talk I'm gonna start off by very

00:00:24,630 --> 00:00:29,640
quickly going over the IPSec and Ike

00:00:26,939 --> 00:00:31,320
terminology and definitions this is just

00:00:29,640 --> 00:00:32,850
a recap most people may already know

00:00:31,320 --> 00:00:35,520
this stuff but just to make sure we're

00:00:32,850 --> 00:00:37,680
all on the same page and then I walk

00:00:35,520 --> 00:00:40,920
through the kernel data path by taking a

00:00:37,680 --> 00:00:44,070
UDP packet and tracing the TX and rx

00:00:40,920 --> 00:00:45,300
path so basically we'll walk the packet

00:00:44,070 --> 00:00:47,219
all the way through the transmit side

00:00:45,300 --> 00:00:48,420
see the main functions that are involved

00:00:47,219 --> 00:00:50,610
the data structures involved and

00:00:48,420 --> 00:00:52,980
similarly in the receive side so that if

00:00:50,610 --> 00:00:54,690
you ever have to explore this on your

00:00:52,980 --> 00:00:57,449
own you'll kind of know what to look for

00:00:54,690 --> 00:00:59,280
and then in and then I'll hand off to

00:00:57,449 --> 00:01:01,500
Paul who do the control plane Walker

00:00:59,280 --> 00:01:03,989
will tell us about liberal on how to set

00:01:01,500 --> 00:01:08,100
up I what is I all the features in it

00:01:03,989 --> 00:01:09,510
and then we'll have a lab so let's start

00:01:08,100 --> 00:01:11,909
off by looking at the terminology

00:01:09,510 --> 00:01:14,640
definitions first of all what does I be

00:01:11,909 --> 00:01:17,310
set ipsec stands for IP security

00:01:14,640 --> 00:01:19,020
it is a suite of protocols that covers

00:01:17,310 --> 00:01:21,650
encryption through the ESP based

00:01:19,020 --> 00:01:24,570
protocols and authentication through the

00:01:21,650 --> 00:01:26,130
HBase protocols for the purpose of this

00:01:24,570 --> 00:01:27,630
talk I'll just stick with ESP from the

00:01:26,130 --> 00:01:31,770
interest of time the same principles

00:01:27,630 --> 00:01:34,860
apply to aah so IPSec behavior is

00:01:31,770 --> 00:01:36,509
controlled by two key databases in the

00:01:34,860 --> 00:01:39,479
kernel one of these is the security

00:01:36,509 --> 00:01:41,610
policy database the SPD and they say the

00:01:39,479 --> 00:01:45,079
second one is the security Association

00:01:41,610 --> 00:01:48,060
database which the kernel calls Sadd

00:01:45,079 --> 00:01:49,590
right so the SPD tells you what you want

00:01:48,060 --> 00:01:51,420
to done with a package so it tells you

00:01:49,590 --> 00:01:55,170
things like for a fact so it'll have

00:01:51,420 --> 00:01:58,320
policies like for for packets in 13.00

00:01:55,170 --> 00:02:00,719
slash 24 I want you to do IPSec a yes B

00:01:58,320 --> 00:02:02,969
so how you actually do that you have to

00:02:00,719 --> 00:02:04,530
figure out by looking at the sa DB so

00:02:02,969 --> 00:02:07,979
there you have rules which say for

00:02:04,530 --> 00:02:10,649
packets from a 13.1 to 13.2 apply some

00:02:07,979 --> 00:02:12,090
algorithm like AES GCM 256 and then all

00:02:10,649 --> 00:02:12,660
the parameters you need to apply that

00:02:12,090 --> 00:02:16,170
algorithm

00:02:12,660 --> 00:02:18,230
the policy database can have so each

00:02:16,170 --> 00:02:20,400
thing that you're doing like a DSP is a

00:02:18,230 --> 00:02:22,620
operation on the packet transforms the

00:02:20,400 --> 00:02:25,380
packet so the SPD might have multiple

00:02:22,620 --> 00:02:27,870
transforms you may say do ESP and then

00:02:25,380 --> 00:02:29,310
do compression right so it can happen in

00:02:27,870 --> 00:02:31,320
Linux this is called template so you

00:02:29,310 --> 00:02:35,340
might have multiple transforms in the

00:02:31,320 --> 00:02:37,340
SPD and like I said to actually do that

00:02:35,340 --> 00:02:40,980
policy you have to go and find the

00:02:37,340 --> 00:02:42,840
Association in the SA DB and while your

00:02:40,980 --> 00:02:45,810
policy may cover a whole sublet in my

00:02:42,840 --> 00:02:48,270
example it covers all the entire 13/20

00:02:45,810 --> 00:02:52,070
for subnet in the SA DB you need a host

00:02:48,270 --> 00:02:54,240
to host entry like 13.1 to 13.2 the

00:02:52,070 --> 00:02:57,330
prescribed way to create that entry is

00:02:54,240 --> 00:02:59,640
to use a protocol like Ike internet key

00:02:57,330 --> 00:03:02,430
exchange - which actually runs

00:02:59,640 --> 00:03:04,260
negotiates and filters out watch what

00:03:02,430 --> 00:03:06,900
each side supports and compute some

00:03:04,260 --> 00:03:08,160
strong key the other way to do it is to

00:03:06,900 --> 00:03:09,870
have two administrators pick up the

00:03:08,160 --> 00:03:11,640
phone call up each other and say hey

00:03:09,870 --> 00:03:13,860
let's use this key today but obviously

00:03:11,640 --> 00:03:15,660
that's brittle right so Paul will tell

00:03:13,860 --> 00:03:16,460
us about Ike in all of the things it

00:03:15,660 --> 00:03:19,890
does for us

00:03:16,460 --> 00:03:20,700
so for walking through the examples that

00:03:19,890 --> 00:03:24,090
I'll be looking at today

00:03:20,700 --> 00:03:26,520
I had actually set up an SPD and an sa

00:03:24,090 --> 00:03:27,960
DB entry in my test machine and we'll be

00:03:26,520 --> 00:03:30,600
looking at this over and over again

00:03:27,960 --> 00:03:32,940
essentially the policy I set up is to

00:03:30,600 --> 00:03:35,250
say that encrypt all UDP packets to the

00:03:32,940 --> 00:03:37,080
13 subnet using ESP so that's the first

00:03:35,250 --> 00:03:38,760
thing you see in there and I've given

00:03:37,080 --> 00:03:41,430
the short-form version of it which is IP

00:03:38,760 --> 00:03:45,060
XP but the full long version of it is to

00:03:41,430 --> 00:03:47,750
say IP xfr impala see what that will do

00:03:45,060 --> 00:03:50,730
for you is dump the contents of your SPD

00:03:47,750 --> 00:03:52,830
right in my case my host machine had a

00:03:50,730 --> 00:03:56,130
13.8 local address so that's what you

00:03:52,830 --> 00:03:59,820
see as the source and it's saying do ESP

00:03:56,130 --> 00:04:02,070
for all UDP packets to 13/20 for now

00:03:59,820 --> 00:04:04,500
when I actually generated all the data

00:04:02,070 --> 00:04:07,350
for this slide deck I had to send a

00:04:04,500 --> 00:04:09,840
packet from 30.8 to 13.9 and the way I'd

00:04:07,350 --> 00:04:12,090
set it up is the first packet that hits

00:04:09,840 --> 00:04:15,510
that policy and needs an association

00:04:12,090 --> 00:04:17,580
would then trigger Ike it will go to the

00:04:15,510 --> 00:04:19,080
lib response stuff kick off the Ike

00:04:17,580 --> 00:04:21,359
negotiation and get me an actual

00:04:19,080 --> 00:04:23,940
security Association and that's called

00:04:21,359 --> 00:04:25,380
the acquiring of policy right and that's

00:04:23,940 --> 00:04:26,220
how I got that entry which is shown in

00:04:25,380 --> 00:04:29,790
the IP

00:04:26,220 --> 00:04:31,440
as our IPX a farm state right that tells

00:04:29,790 --> 00:04:33,390
you everything about the security

00:04:31,440 --> 00:04:35,430
Association it tells you the source and

00:04:33,390 --> 00:04:36,960
destination and a number of things that

00:04:35,430 --> 00:04:38,700
we'll come back to as we go over the

00:04:36,960 --> 00:04:41,610
rest of the slide deck for example look

00:04:38,700 --> 00:04:43,440
at what is the SBI we will look at the

00:04:41,610 --> 00:04:45,150
line which says the last line which says

00:04:43,440 --> 00:04:48,540
select our source 13.8 we'll see where

00:04:45,150 --> 00:04:50,310
that fits in in the kernel the AAT stuff

00:04:48,540 --> 00:04:51,900
we'll see where that comes back so we'll

00:04:50,310 --> 00:04:54,120
come back to this information over and

00:04:51,900 --> 00:04:55,890
over the one thing I want to note is

00:04:54,120 --> 00:04:58,920
that there's something in red over there

00:04:55,890 --> 00:05:00,330
which is the actual key so this key if

00:04:58,920 --> 00:05:02,520
you have it you can decrypt the entire

00:05:00,330 --> 00:05:04,350
conversation so obviously the output of

00:05:02,520 --> 00:05:06,810
this command only should be available to

00:05:04,350 --> 00:05:08,010
trusted users right for that key you

00:05:06,810 --> 00:05:11,640
basically know everything about the

00:05:08,010 --> 00:05:13,770
connection some more definitions Before

00:05:11,640 --> 00:05:16,050
we jump in into the data path transport

00:05:13,770 --> 00:05:19,200
mode versus tunnel mode so this tells

00:05:16,050 --> 00:05:21,660
you what part of your IP packet you are

00:05:19,200 --> 00:05:24,390
going to encrypt so if you just take a

00:05:21,660 --> 00:05:27,180
simple TCP IP packet that goes over

00:05:24,390 --> 00:05:29,490
Ethernet right if you decide to do ESP

00:05:27,180 --> 00:05:31,919
on everything that that is the TCP

00:05:29,490 --> 00:05:33,810
header and TCP payload then you are on

00:05:31,919 --> 00:05:36,000
transport mode you have not changed the

00:05:33,810 --> 00:05:37,680
IP source and destination you have

00:05:36,000 --> 00:05:39,630
encrypted the TCP header and payload so

00:05:37,680 --> 00:05:42,330
that's protected so your routing

00:05:39,630 --> 00:05:44,370
information is not modified and this is

00:05:42,330 --> 00:05:48,450
typically used for a host to host IPSec

00:05:44,370 --> 00:05:51,360
the IPSec mode that most of us more

00:05:48,450 --> 00:05:54,330
commonly use when we do things like VPNs

00:05:51,360 --> 00:05:56,580
is the tunnel mode essentially what we

00:05:54,330 --> 00:06:00,720
do here is we take everything at the IP

00:05:56,580 --> 00:06:03,600
header and Beyond and we encrypt that

00:06:00,720 --> 00:06:05,729
and put it inside another IP packet the

00:06:03,600 --> 00:06:07,500
outer IP packet has the source and

00:06:05,729 --> 00:06:09,450
destination that our VPN wants us to put

00:06:07,500 --> 00:06:11,370
so it's a VPN source and VPN destination

00:06:09,450 --> 00:06:15,000
so basically we've changed the routing

00:06:11,370 --> 00:06:18,440
information right and this is the IPSec

00:06:15,000 --> 00:06:20,880
anomaly now one thing to note is that

00:06:18,440 --> 00:06:22,800
when Paul and I talked and this is

00:06:20,880 --> 00:06:24,210
terminology we'll have commonly seen in

00:06:22,800 --> 00:06:25,830
all of the Swan code everything is

00:06:24,210 --> 00:06:28,590
called a tunnel even transport mode is

00:06:25,830 --> 00:06:30,510
called a tunnel the tunnel there is

00:06:28,590 --> 00:06:33,240
signifying anything that is a IPSec

00:06:30,510 --> 00:06:34,860
security Association so when you put

00:06:33,240 --> 00:06:37,530
something over ESP for tunneling it or

00:06:34,860 --> 00:06:39,040
ESP so you have to keep the distinction

00:06:37,530 --> 00:06:44,220
clear between transport mode

00:06:39,040 --> 00:06:47,440
and an IPSec tunnel so more definitions

00:06:44,220 --> 00:06:49,540
ESP so this is the in this is the way we

00:06:47,440 --> 00:06:51,550
encrypt packets what we do here is we

00:06:49,540 --> 00:06:54,340
take whatever part of the data we are

00:06:51,550 --> 00:06:57,250
going to encrypt we add an ESP header

00:06:54,340 --> 00:06:59,320
and then an ESP trailer the ESP header

00:06:57,250 --> 00:07:01,900
has this number which is the SPI the

00:06:59,320 --> 00:07:05,170
security parameter index so a couple of

00:07:01,900 --> 00:07:08,290
slides ago we saw an example of the SPI

00:07:05,170 --> 00:07:10,930
right here so you see that 9d e79 2 FC

00:07:08,290 --> 00:07:15,250
that's your SPI and that gets added in

00:07:10,930 --> 00:07:17,560
your ESP header think of it as the port

00:07:15,250 --> 00:07:19,510
numbers in TCP or UDP identifies the

00:07:17,560 --> 00:07:22,240
flow and on the receiver is used to

00:07:19,510 --> 00:07:24,850
quickly pick up pick out the SA right

00:07:22,240 --> 00:07:27,160
the ESP header also has a sequence

00:07:24,850 --> 00:07:29,380
number this is to prevent on again

00:07:27,160 --> 00:07:31,060
protect against replay attacks so a

00:07:29,380 --> 00:07:32,380
man-in-the-middle cannot pick up a

00:07:31,060 --> 00:07:35,710
packet and replayed and attack the

00:07:32,380 --> 00:07:37,420
connection the trailer has a number

00:07:35,710 --> 00:07:39,880
which contains the protocol number of

00:07:37,420 --> 00:07:41,110
the original payload the fault was

00:07:39,880 --> 00:07:42,700
encrypted and this will make more sense

00:07:41,110 --> 00:07:46,510
when you see the pictures in the next

00:07:42,700 --> 00:07:48,850
two slides so let's say we had a simple

00:07:46,510 --> 00:07:50,920
TCP packet going or IP with an Ethernet

00:07:48,850 --> 00:07:53,040
header let's this is this is a most

00:07:50,920 --> 00:07:56,230
basic TCP packet going out on the wire

00:07:53,040 --> 00:07:58,900
if I decide to encrypt everything from

00:07:56,230 --> 00:08:00,940
the TCP header and payload and onwards

00:07:58,900 --> 00:08:03,010
right and I leave the 10.1 and 10.2

00:08:00,940 --> 00:08:05,320
alone I'm in transport mode and that's

00:08:03,010 --> 00:08:07,420
what you see here so your ESP header

00:08:05,320 --> 00:08:09,100
would have the SPI and the trailer would

00:08:07,420 --> 00:08:11,980
say the original packet before it was

00:08:09,100 --> 00:08:14,410
encrypted it was a TCP packet the IP

00:08:11,980 --> 00:08:15,610
header the source and destination have

00:08:14,410 --> 00:08:17,920
not been changed so you've not changed

00:08:15,610 --> 00:08:19,810
the routing whereas if you did tunnel

00:08:17,920 --> 00:08:22,330
mode you would encrypt everything

00:08:19,810 --> 00:08:24,070
starting from the IP header and then

00:08:22,330 --> 00:08:26,200
going forward to the TCP header on TCP

00:08:24,070 --> 00:08:29,110
pillow and that's what you see here so

00:08:26,200 --> 00:08:31,840
the gray stuff is now the IP plus TCP +

00:08:29,110 --> 00:08:33,400
TCP pillow right and the ESP trailer

00:08:31,840 --> 00:08:35,440
says the original packet was an IP

00:08:33,400 --> 00:08:37,780
packet so it's an IP and IP so the

00:08:35,440 --> 00:08:40,960
trailer says the protocol was 4 right

00:08:37,780 --> 00:08:42,910
and your outer IP header now has the VPN

00:08:40,960 --> 00:08:50,400
source and VPN destination not

00:08:42,910 --> 00:08:50,400
necessarily 10.1 and 10.2 so yes

00:08:54,050 --> 00:08:58,639
that's how the packet thing format is

00:08:56,930 --> 00:09:00,350
defined I think the ESP header is just a

00:08:58,639 --> 00:09:02,060
few bytes and the trailer has the thing

00:09:00,350 --> 00:09:09,560
I don't know exactly why it was done

00:09:02,060 --> 00:09:11,240
that way is it you know so remember for

00:09:09,560 --> 00:09:13,579
transport mode you're actually trying to

00:09:11,240 --> 00:09:15,380
change the as little as possible of the

00:09:13,579 --> 00:09:17,300
original header so you only put it

00:09:15,380 --> 00:09:19,279
somewhere else so that the original

00:09:17,300 --> 00:09:22,430
header sort of stays similar to your

00:09:19,279 --> 00:09:24,079
original packet so that I think there

00:09:22,430 --> 00:09:27,139
was the main motivation of putting it in

00:09:24,079 --> 00:09:30,350
the end of to I didn't question do you

00:09:27,139 --> 00:09:32,889
want to put it in the ESP header in or

00:09:30,350 --> 00:09:32,889
the IP header

00:09:47,450 --> 00:09:51,750
so like I said I think they tried to

00:09:49,980 --> 00:09:54,270
keep the Hat the original header as

00:09:51,750 --> 00:09:56,990
original as possible and just add on

00:09:54,270 --> 00:09:59,910
anything new that was needed to the end

00:09:56,990 --> 00:10:01,380
because you don't want to rebuild the

00:09:59,910 --> 00:10:02,730
entire hat all right so now you can just

00:10:01,380 --> 00:10:04,770
change that one entry in your original

00:10:02,730 --> 00:10:06,330
header and you don't have to build a

00:10:04,770 --> 00:10:08,160
whole new header from scratch at all and

00:10:06,330 --> 00:10:09,870
new options in it and then put the

00:10:08,160 --> 00:10:25,650
original payload there so I think it's

00:10:09,870 --> 00:10:29,270
just an optimization sorry yeah that's

00:10:25,650 --> 00:10:29,270
true 2d traders also encrypted

00:10:39,910 --> 00:10:51,200
yes that's a feature not about so you're

00:10:49,130 --> 00:10:52,700
all your ipsec is only as secure as the

00:10:51,200 --> 00:10:54,770
key that you've used and like I said

00:10:52,700 --> 00:10:56,300
before you don't want to have static

00:10:54,770 --> 00:10:58,640
keys you want to have dynamically

00:10:56,300 --> 00:10:59,840
negotiated keys and the recommended way

00:10:58,640 --> 00:11:02,600
to do this is to use

00:10:59,840 --> 00:11:07,160
ikely - which is defined in the IETF RFC

00:11:02,600 --> 00:11:09,470
72 96 and in Linux this is done in a

00:11:07,160 --> 00:11:11,420
small packages in a user space daemon

00:11:09,470 --> 00:11:12,890
that is called Pluto and Paul is gonna

00:11:11,420 --> 00:11:14,300
tell us all about this but we'll just

00:11:12,890 --> 00:11:16,640
keep this as a placeholder to understand

00:11:14,300 --> 00:11:19,310
how this is going to negotiate our keys

00:11:16,640 --> 00:11:22,070
and Miwok are back at me so now let's

00:11:19,310 --> 00:11:25,610
jump in into the actual data path right

00:11:22,070 --> 00:11:27,830
so we I have an SPD that I've set up for

00:11:25,610 --> 00:11:30,470
my machine which has source address 13.8

00:11:27,830 --> 00:11:34,370
and I want to do ESP on UDP packets to

00:11:30,470 --> 00:11:36,290
13/20 for all the code I will describe

00:11:34,370 --> 00:11:37,610
is based on four out sixteen but the

00:11:36,290 --> 00:11:38,870
principles are the same whether you if

00:11:37,610 --> 00:11:42,020
you use some other kernel you should be

00:11:38,870 --> 00:11:43,700
able to find your way based on that the

00:11:42,020 --> 00:11:46,160
example that I will show was set up a

00:11:43,700 --> 00:11:48,560
policy and then we will see an on-demand

00:11:46,160 --> 00:11:50,750
security Association being established I

00:11:48,560 --> 00:11:53,360
don't have time to cover IPSec offload

00:11:50,750 --> 00:11:57,860
so we're going to skip that for today's

00:11:53,360 --> 00:11:59,570
talk so if you're talking about UDP

00:11:57,860 --> 00:12:02,750
right you can have a connected socket or

00:11:59,570 --> 00:12:04,850
a unconnected socket so in the connected

00:12:02,750 --> 00:12:07,250
socket lets you use send instead of send

00:12:04,850 --> 00:12:08,480
to you get back ICMP error so when you

00:12:07,250 --> 00:12:10,580
do a connect you can only send to one

00:12:08,480 --> 00:12:12,050
destination if you have unconnected you

00:12:10,580 --> 00:12:14,720
can use one socket to send to multiple

00:12:12,050 --> 00:12:16,880
destinations in each case what happens

00:12:14,720 --> 00:12:18,050
is when you actually have to send the

00:12:16,880 --> 00:12:19,670
packet you have to figure out what is

00:12:18,050 --> 00:12:22,400
the next hop so you have to look up the

00:12:19,670 --> 00:12:24,740
routing table so in Linux that is done

00:12:22,400 --> 00:12:26,030
in the function IP router output flow

00:12:24,740 --> 00:12:27,320
which looks up the forwarding

00:12:26,030 --> 00:12:29,150
information base which is the feed

00:12:27,320 --> 00:12:31,760
lookup rights over that you figure out

00:12:29,150 --> 00:12:33,950
the next hop as part of doing that it

00:12:31,760 --> 00:12:36,860
also looks up to see if there is a

00:12:33,950 --> 00:12:39,080
security policy which applies that is

00:12:36,860 --> 00:12:41,480
done in the function X frm lookup routes

00:12:39,080 --> 00:12:43,520
so the X frm here stands for a transform

00:12:41,480 --> 00:12:45,860
everywhere in Linux you will see IPSec

00:12:43,520 --> 00:12:46,220
functions being referred to as XF farms

00:12:45,860 --> 00:12:48,080
something

00:12:46,220 --> 00:12:51,140
so you know that then you're an IPSec

00:12:48,080 --> 00:12:53,600
lab so essentially what happens is it

00:12:51,140 --> 00:12:55,790
will look up XFR and world look up route

00:12:53,600 --> 00:12:58,910
and see if there is a policy which

00:12:55,790 --> 00:13:00,440
applies if there is no policy which is

00:12:58,910 --> 00:13:04,340
the common case right which is the clear

00:13:00,440 --> 00:13:05,750
traffic case the routing table lookup is

00:13:04,340 --> 00:13:07,100
come going to come back with a success

00:13:05,750 --> 00:13:09,440
and it's going to come back with a

00:13:07,100 --> 00:13:10,400
destination cash entry which Linux calls

00:13:09,440 --> 00:13:12,830
a destin tree

00:13:10,400 --> 00:13:14,480
this basically tuck is carried with the

00:13:12,830 --> 00:13:16,280
Packer at its metadata on what to do

00:13:14,480 --> 00:13:17,780
with a packet and all through the stack

00:13:16,280 --> 00:13:19,520
you look up the test entry for various

00:13:17,780 --> 00:13:21,440
things like which function to process

00:13:19,520 --> 00:13:23,720
this next and any other information you

00:13:21,440 --> 00:13:25,760
want about the packet so in the left

00:13:23,720 --> 00:13:26,780
side of the picture you see the clear

00:13:25,760 --> 00:13:29,180
traffic keys

00:13:26,780 --> 00:13:32,570
there was no policy in that particular

00:13:29,180 --> 00:13:35,180
example so the dest entry has a pointer

00:13:32,570 --> 00:13:37,430
called xfr which actually points to the

00:13:35,180 --> 00:13:39,290
security Association there was no policy

00:13:37,430 --> 00:13:41,900
which applied so the exit farm is now

00:13:39,290 --> 00:13:44,030
and the death sentry is telling me the

00:13:41,900 --> 00:13:46,070
next function that should handle this is

00:13:44,030 --> 00:13:47,900
IP output so basically this is clear you

00:13:46,070 --> 00:13:50,480
can give it to IP and let it do its

00:13:47,900 --> 00:13:51,980
thing and send this packet out on the

00:13:50,480 --> 00:13:54,170
right you have the example that we are

00:13:51,980 --> 00:13:57,770
interested in which is our UDP packet

00:13:54,170 --> 00:14:00,350
going to 13.9 there was a policy which

00:13:57,770 --> 00:14:02,560
applied so next thing it does is it

00:14:00,350 --> 00:14:04,460
tries to find a security Association

00:14:02,560 --> 00:14:05,900
assume that you had a security

00:14:04,460 --> 00:14:07,370
Association we'll see how that gets

00:14:05,900 --> 00:14:09,710
generated in a bit but let's say we have

00:14:07,370 --> 00:14:12,140
an essay in that case what happens is

00:14:09,710 --> 00:14:14,420
the test entry that is returned will

00:14:12,140 --> 00:14:15,980
have a pointer to that security

00:14:14,420 --> 00:14:18,740
association in the excel farm which is

00:14:15,980 --> 00:14:20,390
the red thing there in Linux the

00:14:18,740 --> 00:14:21,970
security Association is stored in a

00:14:20,390 --> 00:14:24,200
structure called except for our mistake

00:14:21,970 --> 00:14:26,330
right and the DES entry is also telling

00:14:24,200 --> 00:14:28,250
me the next function that should process

00:14:26,330 --> 00:14:29,740
this is X frm for output because you

00:14:28,250 --> 00:14:35,480
need to do I pee sake on this packet

00:14:29,740 --> 00:14:37,580
right so how did that X frm get created

00:14:35,480 --> 00:14:39,230
right we just have a policy we never

00:14:37,580 --> 00:14:43,430
created an association how did that get

00:14:39,230 --> 00:14:46,400
created so that is the on demand essay

00:14:43,430 --> 00:14:50,030
creation stuff so what happens is when

00:14:46,400 --> 00:14:51,830
your packet hits the x frm look up it

00:14:50,030 --> 00:14:53,740
sees a policy it sees there is no essay

00:14:51,830 --> 00:14:56,839
it's going to return e in progress and

00:14:53,740 --> 00:14:58,730
it's going to return for you that error

00:14:56,839 --> 00:15:00,110
is basically going to tell UDP to drop

00:14:58,730 --> 00:15:02,930
the packet if it was TCP

00:15:00,110 --> 00:15:05,990
hang on the packet and at the same time

00:15:02,930 --> 00:15:08,360
it also sends an up call to Pluto to the

00:15:05,990 --> 00:15:10,100
Ike team and in userspace to negotiate

00:15:08,360 --> 00:15:11,209
the essay so the next packet that goes

00:15:10,100 --> 00:15:14,209
through we'll find the essay n

00:15:11,209 --> 00:15:16,940
everything will get encrypted so how

00:15:14,209 --> 00:15:19,670
this actually happens when we do xfr and

00:15:16,940 --> 00:15:21,769
look up route it sees that there is no

00:15:19,670 --> 00:15:24,560
essay and it sends up a net link message

00:15:21,769 --> 00:15:27,620
which is number one thing item in this

00:15:24,560 --> 00:15:30,320
picture so it sends this up call to look

00:15:27,620 --> 00:15:32,029
to Pluto saying negotiate the essay to

00:15:30,320 --> 00:15:33,589
include toward us the EICMA goshi Asian

00:15:32,029 --> 00:15:36,620
which is the not a step two in this

00:15:33,589 --> 00:15:38,060
picture it does this over UDP after the

00:15:36,620 --> 00:15:40,130
essay has been negotiated both sides

00:15:38,060 --> 00:15:43,130
agree on the algorithm the key and all

00:15:40,130 --> 00:15:45,290
the other parameters the essay is added

00:15:43,130 --> 00:15:47,269
in step three with another net link

00:15:45,290 --> 00:15:48,890
message so the next packet that goes

00:15:47,269 --> 00:15:51,709
through will find a hit for the essay

00:15:48,890 --> 00:15:55,160
and it can do the rest of the episode

00:15:51,709 --> 00:15:57,320
processing so when that happens except

00:15:55,160 --> 00:16:00,140
forum lookup route should return success

00:15:57,320 --> 00:16:02,630
it should return the XFR m at this point

00:16:00,140 --> 00:16:04,120
if you had any net filter hooks which

00:16:02,630 --> 00:16:05,990
applied they would get applied here

00:16:04,120 --> 00:16:07,640
we're not going to look at that for a

00:16:05,990 --> 00:16:09,620
simple example we'll just do the basic

00:16:07,640 --> 00:16:12,199
thing of okay next thing to do is IPSec

00:16:09,620 --> 00:16:15,829
so that happens in the function X frm

00:16:12,199 --> 00:16:17,959
for output now to do all of that all all

00:16:15,829 --> 00:16:20,089
the key information for that is stored

00:16:17,959 --> 00:16:22,519
in the SA which is in the XF farm State

00:16:20,089 --> 00:16:23,449
so let's look at what that structure

00:16:22,519 --> 00:16:25,820
looks like

00:16:23,449 --> 00:16:27,709
now XF farm C it has a lot of stuff and

00:16:25,820 --> 00:16:29,570
I've simplified that so it could fit in

00:16:27,709 --> 00:16:31,339
this slide there's much much more than

00:16:29,570 --> 00:16:32,480
this and we can if you're interested in

00:16:31,339 --> 00:16:34,699
the rest of the stuff we can look at it

00:16:32,480 --> 00:16:36,380
and read of the lab but essentially now

00:16:34,699 --> 00:16:38,329
you will be able to map all the things

00:16:36,380 --> 00:16:40,820
in this picture with the output from IP

00:16:38,329 --> 00:16:43,820
XS that you saw in the earlier slide so

00:16:40,820 --> 00:16:45,320
you see the SPI in the ID part you see

00:16:43,820 --> 00:16:48,529
the selector which was the last line and

00:16:45,320 --> 00:16:50,480
IP XS you see that over there you see

00:16:48,529 --> 00:16:51,560
the algorithm you see the key also over

00:16:50,480 --> 00:16:53,480
there and there are additional

00:16:51,560 --> 00:16:55,130
properties bookkeeping stuff that the

00:16:53,480 --> 00:16:57,529
kernel has to track for the algorithm

00:16:55,130 --> 00:16:59,660
and then there are function pointers on

00:16:57,529 --> 00:17:02,300
how to process this next which is the XF

00:16:59,660 --> 00:17:04,160
our mode now one note here is this is a

00:17:02,300 --> 00:17:05,809
highly simplified picture there are

00:17:04,160 --> 00:17:07,250
actually three different XF our modes

00:17:05,809 --> 00:17:09,740
and I will not go to the details of that

00:17:07,250 --> 00:17:11,780
but if you download my slide deck you'll

00:17:09,740 --> 00:17:12,860
find that in the back up slides for now

00:17:11,780 --> 00:17:13,760
we'll just say ok there's an input

00:17:12,860 --> 00:17:17,709
there's an output

00:17:13,760 --> 00:17:19,850
if enforce it this is where I go next so

00:17:17,709 --> 00:17:21,829
logically think okay so the next thing I

00:17:19,850 --> 00:17:23,480
do is the output function X frm for

00:17:21,829 --> 00:17:24,110
transport output but no it's not that

00:17:23,480 --> 00:17:26,720
simple

00:17:24,110 --> 00:17:28,850
so what happens next is you go into AF

00:17:26,720 --> 00:17:31,070
info dot output finish we'll come back

00:17:28,850 --> 00:17:33,140
into what is this X frm for transport

00:17:31,070 --> 00:17:34,700
output in a bit but basically the next

00:17:33,140 --> 00:17:38,360
function that actually does the IPSec

00:17:34,700 --> 00:17:40,250
stuff is XF farm for output finish which

00:17:38,360 --> 00:17:44,300
you get through the AF and photo finish

00:17:40,250 --> 00:17:46,580
and here you check to see if Hardware

00:17:44,300 --> 00:17:48,590
off loads are applicable right so if

00:17:46,580 --> 00:17:50,360
you're going to do the crypto offload

00:17:48,590 --> 00:17:52,460
you might want to put little hints in

00:17:50,360 --> 00:17:54,020
the packet on where to start doing the

00:17:52,460 --> 00:17:55,580
crypto what are the keys to use what is

00:17:54,020 --> 00:17:57,650
the essay to use and so on so you do

00:17:55,580 --> 00:17:59,990
that stuff here there is another

00:17:57,650 --> 00:18:02,660
performance feature in Linux called gso

00:17:59,990 --> 00:18:04,400
generic segmentation offload the idea

00:18:02,660 --> 00:18:06,680
here is that for TCP for example you

00:18:04,400 --> 00:18:08,030
want to send a large packet down as much

00:18:06,680 --> 00:18:10,310
as possible through the stacks so you're

00:18:08,030 --> 00:18:12,560
not so you used to use its like jumbo

00:18:10,310 --> 00:18:13,940
frames so basically for the same CPU

00:18:12,560 --> 00:18:15,800
you're processing a lot of data until it

00:18:13,940 --> 00:18:18,050
actually comes to Hanning becomes time

00:18:15,800 --> 00:18:19,880
to hand this off to the driver at that

00:18:18,050 --> 00:18:22,340
point what you do is you break that into

00:18:19,880 --> 00:18:24,890
empty you size TCP segments I put the

00:18:22,340 --> 00:18:26,660
TCP header apply the IPSec and then send

00:18:24,890 --> 00:18:29,300
it to the driver so that's called GSM

00:18:26,660 --> 00:18:31,250
so if that has been enabled you want to

00:18:29,300 --> 00:18:33,890
put hint in the packet on how to do that

00:18:31,250 --> 00:18:35,090
later on but we have a simple UDP packet

00:18:33,890 --> 00:18:37,130
we're not doing any of these fancy

00:18:35,090 --> 00:18:39,680
performance features so where we will

00:18:37,130 --> 00:18:43,610
end up is in Excel form for output

00:18:39,680 --> 00:18:47,690
resume and this is where we actually do

00:18:43,610 --> 00:18:49,700
all the IPSec stuff so xfr resume will

00:18:47,690 --> 00:18:52,370
call functions that check if there's

00:18:49,700 --> 00:18:53,990
space for the ESP header adds the

00:18:52,370 --> 00:18:56,630
encapsulation header checks for key

00:18:53,990 --> 00:18:59,630
expiration checks for replay protection

00:18:56,630 --> 00:19:01,040
and if everything is fine so far and

00:18:59,630 --> 00:19:04,190
they're not offloading the crypto we

00:19:01,040 --> 00:19:06,470
actually do the ESP output encrypt and

00:19:04,190 --> 00:19:08,030
now we have the encrypted packet so now

00:19:06,470 --> 00:19:11,090
if there were no errors so far we then

00:19:08,030 --> 00:19:13,700
jump off to IP local out so that IP can

00:19:11,090 --> 00:19:15,890
then take our encrypted packet and send

00:19:13,700 --> 00:19:17,740
it out so at this point if fragmentation

00:19:15,890 --> 00:19:21,140
is applicable it will break it down into

00:19:17,740 --> 00:19:23,480
empty you size IP packets each fragment

00:19:21,140 --> 00:19:26,340
will have the IP progress it'll be 50

00:19:23,480 --> 00:19:30,330
and it will go out on the wire

00:19:26,340 --> 00:19:31,740
so that's the TX side so before I go

00:19:30,330 --> 00:19:40,140
after the ark side any questions

00:19:31,740 --> 00:19:41,940
comments okay so then we get into the

00:19:40,140 --> 00:19:44,160
receive side path so the packet has come

00:19:41,940 --> 00:19:46,560
out on the other side and we have to

00:19:44,160 --> 00:19:49,290
send it up the stack right there are two

00:19:46,560 --> 00:19:51,810
cases of how this could be handled and

00:19:49,290 --> 00:19:53,670
they are based on whether or not you

00:19:51,810 --> 00:19:57,510
have this performance feature called gr

00:19:53,670 --> 00:19:59,670
own generic receive offer so gr o is

00:19:57,510 --> 00:20:02,100
like the counterpart of GS so basically

00:19:59,670 --> 00:20:03,600
you want to send up a large packet as

00:20:02,100 --> 00:20:05,400
much as possible through the stack into

00:20:03,600 --> 00:20:07,650
sending a lot of small packets so that

00:20:05,400 --> 00:20:09,360
for the same processing work you're

00:20:07,650 --> 00:20:13,050
processing more data so you get better

00:20:09,360 --> 00:20:16,200
bang for your buck right so the two

00:20:13,050 --> 00:20:18,600
cases for ip6 corona path is better or

00:20:16,200 --> 00:20:20,850
not you have G ro so I will first talk

00:20:18,600 --> 00:20:23,340
about the no G ro part and then I will

00:20:20,850 --> 00:20:25,350
talk about the GRE part now one warning

00:20:23,340 --> 00:20:26,910
is that a lot of this has a lot of

00:20:25,350 --> 00:20:29,340
interfaces with the driver and

00:20:26,910 --> 00:20:31,440
particularly a feature called nappy it's

00:20:29,340 --> 00:20:34,710
nappy stands for new API but it's

00:20:31,440 --> 00:20:36,110
actually pretty old by now and I have a

00:20:34,710 --> 00:20:38,000
hand wave through all of the nappy

00:20:36,110 --> 00:20:40,890
interfaces it's all well documented

00:20:38,000 --> 00:20:42,420
simply from the constraints of time so

00:20:40,890 --> 00:20:43,980
if you have questions about that and you

00:20:42,420 --> 00:20:47,370
want we can talk about it here in the

00:20:43,980 --> 00:20:50,790
lab so essentially most drivers today

00:20:47,370 --> 00:20:52,980
support nappy and nappy allows you to

00:20:50,790 --> 00:20:54,330
efficiently switch between pole mode and

00:20:52,980 --> 00:20:57,450
interrupt mode so that's why it's a

00:20:54,330 --> 00:20:59,850
performance feature and nappy enabled

00:20:57,450 --> 00:21:02,520
drivers will deliver your path packet to

00:20:59,850 --> 00:21:03,810
you through nappy gr or C so what

00:21:02,520 --> 00:21:05,370
happens here is that you look at the

00:21:03,810 --> 00:21:07,230
various headers in your packet right so

00:21:05,370 --> 00:21:09,780
first you look at the ethernet header so

00:21:07,230 --> 00:21:12,540
our packet is an Ethernet it's a basic

00:21:09,780 --> 00:21:15,450
ipv4 over Ethernet so it's type is hex

00:21:12,540 --> 00:21:16,140
800 so what happens is it will jump into

00:21:15,450 --> 00:21:18,330
this function

00:21:16,140 --> 00:21:19,530
Ayana gr or receive what it then looks

00:21:18,330 --> 00:21:22,260
at the next header which is the IP

00:21:19,530 --> 00:21:25,740
header and sees that the protocol is ESP

00:21:22,260 --> 00:21:27,450
which is protocol 50 so now I know GRA

00:21:25,740 --> 00:21:29,550
receive tries to see if there is an

00:21:27,450 --> 00:21:31,590
offload point or there's a function of

00:21:29,550 --> 00:21:33,330
there's an array of interactions right

00:21:31,590 --> 00:21:35,760
so it looks in that table to see if

00:21:33,330 --> 00:21:38,400
there is an offload enabled we have not

00:21:35,760 --> 00:21:39,149
enabled gr so RI net offload for ESP

00:21:38,400 --> 00:21:42,299
will be

00:21:39,149 --> 00:21:44,429
so let me fall back to the slope app so

00:21:42,299 --> 00:21:47,219
that means we go through all the IP

00:21:44,429 --> 00:21:50,309
processing and we end up in IP receive

00:21:47,219 --> 00:21:52,919
finish so again we have the same problem

00:21:50,309 --> 00:21:54,119
to solve as we did on the way out

00:21:52,919 --> 00:21:55,859
we need to figure we need to look up the

00:21:54,119 --> 00:21:57,779
routing table and see if this is a

00:21:55,859 --> 00:22:01,109
packet for us or this is a packet that

00:21:57,779 --> 00:22:03,719
we should forward right in our example

00:22:01,109 --> 00:22:05,609
this is a packet for us so when we go

00:22:03,719 --> 00:22:08,399
and look up the routing table through IP

00:22:05,609 --> 00:22:09,960
route input nor F what will happen is it

00:22:08,399 --> 00:22:12,259
will again come back to us with a

00:22:09,960 --> 00:22:15,389
destination cache entry a test entry

00:22:12,259 --> 00:22:17,519
where the input function pointer is set

00:22:15,389 --> 00:22:19,529
to IP local deliver that means the next

00:22:17,519 --> 00:22:23,519
thing that needs to process this is IP

00:22:19,529 --> 00:22:25,589
local deliver so IP local deliver will

00:22:23,519 --> 00:22:27,599
call this is the slow path remember so

00:22:25,589 --> 00:22:29,519
it's going to look up the function

00:22:27,599 --> 00:22:31,649
pointers the input function pointers in

00:22:29,519 --> 00:22:33,570
eye net proto switch is another array

00:22:31,649 --> 00:22:36,089
which handles a pointer per protocol

00:22:33,570 --> 00:22:38,279
number so it looks it up for ESP and

00:22:36,089 --> 00:22:40,589
then it go takes us into the input

00:22:38,279 --> 00:22:43,739
function handler handler for IPSec which

00:22:40,589 --> 00:22:47,429
is except forum for ESP receive so now

00:22:43,739 --> 00:22:49,679
we are finally in the IPSec code now

00:22:47,429 --> 00:22:51,330
except IPSec itself has a number of

00:22:49,679 --> 00:22:53,999
different features and each feature

00:22:51,330 --> 00:22:55,710
might have its own handler so in my test

00:22:53,999 --> 00:22:57,599
machine I had two of these features one

00:22:55,710 --> 00:23:00,389
was basic IPSec enabled and I also had

00:22:57,599 --> 00:23:03,059
this thing called VT I enabled right so

00:23:00,389 --> 00:23:05,039
I so the IPSec or the exit forum for ESP

00:23:03,059 --> 00:23:07,710
receive goes through all the applicable

00:23:05,039 --> 00:23:09,149
handlers to see which ones should be

00:23:07,710 --> 00:23:11,489
given a copy of the packet

00:23:09,149 --> 00:23:12,960
so first VT I receive gets it it says oh

00:23:11,489 --> 00:23:14,099
this is not for me I don't have anything

00:23:12,960 --> 00:23:17,099
to do with this source and destination

00:23:14,099 --> 00:23:18,809
it returns a in Val so then you go to

00:23:17,099 --> 00:23:20,999
the next handler which is Excel farm for

00:23:18,809 --> 00:23:24,269
s you can receive and here we find our

00:23:20,999 --> 00:23:28,710
SPD and RSA and everything so now we are

00:23:24,269 --> 00:23:30,960
ready to actually eat this packet so

00:23:28,710 --> 00:23:33,899
this is where we actually do all of our

00:23:30,960 --> 00:23:36,479
receive side IPSec so we look in the

00:23:33,899 --> 00:23:38,729
packet we look at the SPI we find the

00:23:36,479 --> 00:23:40,259
security Association look at the

00:23:38,729 --> 00:23:42,210
parameters in the SA we check the

00:23:40,259 --> 00:23:44,849
lifetime we check for replay protection

00:23:42,210 --> 00:23:46,799
if there's no hardware offload support

00:23:44,849 --> 00:23:49,409
we call ESP input at this point and be

00:23:46,799 --> 00:23:51,869
decrypt after we decrypt we have a UDP

00:23:49,409 --> 00:23:52,630
packet so now when we send this package

00:23:51,869 --> 00:23:54,940
back to IP

00:23:52,630 --> 00:23:56,560
local deliver the European put function

00:23:54,940 --> 00:23:58,350
will get called and it will get sent up

00:23:56,560 --> 00:24:01,330
the UDP stack as if it came in the clear

00:23:58,350 --> 00:24:04,380
so this is the spat this is the slope at

00:24:01,330 --> 00:24:06,820
for IPSec this is the case without G ro

00:24:04,380 --> 00:24:08,320
this is actually a sum does a lot some

00:24:06,820 --> 00:24:10,570
details about how this is actually

00:24:08,320 --> 00:24:12,460
injected back I put some notes in there

00:24:10,570 --> 00:24:14,440
if you're curious about it you know you

00:24:12,460 --> 00:24:19,570
can look those functions up in find

00:24:14,440 --> 00:24:21,790
details so this was the no G ro path

00:24:19,570 --> 00:24:24,010
let's look at the case when G ro is

00:24:21,790 --> 00:24:26,920
enabled first of all how do you enable G

00:24:24,010 --> 00:24:29,740
ro you could do this manually by loading

00:24:26,920 --> 00:24:32,560
the kernel module for G ro which is by

00:24:29,740 --> 00:24:35,950
doing modprobe ESP for offload or if you

00:24:32,560 --> 00:24:37,660
have some some of the newer drivers that

00:24:35,950 --> 00:24:39,370
do crypto offload as soon as you enable

00:24:37,660 --> 00:24:41,500
crypto offload it will automatically

00:24:39,370 --> 00:24:42,790
make sure that gr offload is also

00:24:41,500 --> 00:24:45,250
enabled because it's a performance

00:24:42,790 --> 00:24:47,380
feature so the idea behind all of this

00:24:45,250 --> 00:24:49,210
is that you first do the decrypt and

00:24:47,380 --> 00:24:51,430
then send the clear packet back to the G

00:24:49,210 --> 00:24:53,710
ro call back so that it's handled as if

00:24:51,430 --> 00:24:55,540
it was a clear UDP IP packet similar to

00:24:53,710 --> 00:24:57,700
what we did for the slope up when we did

00:24:55,540 --> 00:24:59,920
not have G ro basically they took the

00:24:57,700 --> 00:25:03,430
ESP headache out of the way and then let

00:24:59,920 --> 00:25:06,070
the regular UDP path do its thing right

00:25:03,430 --> 00:25:08,860
so when you load the ESP for offload

00:25:06,070 --> 00:25:10,600
module what it does is remember there

00:25:08,860 --> 00:25:12,730
was a jump table that was looked up when

00:25:10,600 --> 00:25:14,320
we looked at the various headers and we

00:25:12,730 --> 00:25:16,870
said oh there's no offload enable switch

00:25:14,320 --> 00:25:18,340
now we make sure we populate that right

00:25:16,870 --> 00:25:20,800
so this time when the packet comes in

00:25:18,340 --> 00:25:23,170
you would look up the Ethernet type

00:25:20,800 --> 00:25:24,970
which is hex 800 it would go take you to

00:25:23,170 --> 00:25:26,560
I energy ro receive that would look up I

00:25:24,970 --> 00:25:29,350
net offloads and now it's going to find

00:25:26,560 --> 00:25:31,060
yes before gr or receive and say oh this

00:25:29,350 --> 00:25:35,860
is what I need to do for G ro for this

00:25:31,060 --> 00:25:37,810
protocol type which is 50 so what ESP

00:25:35,860 --> 00:25:40,120
for G ro receive does is it costs the

00:25:37,810 --> 00:25:43,300
same function as we did for the non zero

00:25:40,120 --> 00:25:46,750
path it ends up calling X frm input it

00:25:43,300 --> 00:25:48,700
does all of it looks up the SPI finds

00:25:46,750 --> 00:25:51,010
the SA does all the checks decrypts it

00:25:48,700 --> 00:25:54,340
and then feeds it back through nappy

00:25:51,010 --> 00:25:56,770
into G ro seller C and from there we dig

00:25:54,340 --> 00:26:00,610
into the packet and send it up through

00:25:56,770 --> 00:26:03,350
the UDP gr robot so that's how the UDP

00:26:00,610 --> 00:26:05,810
dro path gets handled

00:26:03,350 --> 00:26:07,580
so I kind of raged through all of this

00:26:05,810 --> 00:26:08,720
and if you have any questions one thing

00:26:07,580 --> 00:26:10,610
we can do during the lab is actually

00:26:08,720 --> 00:26:13,610
trace a packet and I can show how you

00:26:10,610 --> 00:26:16,010
can use Perth with your OVA and look at

00:26:13,610 --> 00:26:18,680
all these function stacks later right

00:26:16,010 --> 00:26:20,630
with that I'll hand off to Paul who is

00:26:18,680 --> 00:26:22,810
going to do with the fun interactive

00:26:20,630 --> 00:26:22,810
self

00:26:32,120 --> 00:26:38,000
okay hi I'm Paula artists I work for

00:26:36,020 --> 00:26:41,390
redhead I work on the Leafs on Project

00:26:38,000 --> 00:26:44,210
which is one of the salon project if for

00:26:41,390 --> 00:26:45,679
those curious tears in the in a slide

00:26:44,210 --> 00:26:48,710
deck and the enters the whole appendix

00:26:45,679 --> 00:26:50,029
on the history of the various fonts

00:26:48,710 --> 00:26:51,919
because I'm sure people are confused

00:26:50,029 --> 00:26:52,750
about frieze one leaves one opens one

00:26:51,919 --> 00:26:54,940
strongswan

00:26:52,750 --> 00:26:58,429
so you'll find a bit of history there

00:26:54,940 --> 00:27:05,809
and is this a few more additional slides

00:26:58,429 --> 00:27:08,149
that I won't be going through now so so

00:27:05,809 --> 00:27:10,309
I won't talk about the ipsec part that's

00:27:08,149 --> 00:27:13,039
been talked about although I mentioned

00:27:10,309 --> 00:27:15,020
one thing since of course in home

00:27:13,039 --> 00:27:16,940
networks the only thing that you can

00:27:15,020 --> 00:27:20,029
reliably get out of your network is TCP

00:27:16,940 --> 00:27:21,740
or UDP I'm just a mode called ESP and

00:27:20,029 --> 00:27:24,049
UDP where we basically encapsulate that

00:27:21,740 --> 00:27:25,760
ESP packet into a UDP packet to send it

00:27:24,049 --> 00:27:27,590
out and then there's a there's an

00:27:25,760 --> 00:27:30,610
encapsulation and decapsulation function

00:27:27,590 --> 00:27:34,279
for that and the ITF is currently also

00:27:30,610 --> 00:27:36,350
working on doing this for TCP which of

00:27:34,279 --> 00:27:39,169
course is horrible because you'll end up

00:27:36,350 --> 00:27:40,640
running and cryptid TCP inside TCP and

00:27:39,169 --> 00:27:44,059
you get like retransmission legis

00:27:40,640 --> 00:27:46,010
fighting but a sort of a you know if the

00:27:44,059 --> 00:27:47,510
network is also dropping UDP this is the

00:27:46,010 --> 00:27:49,669
only way to get out of the network so

00:27:47,510 --> 00:27:52,010
there's a there's a specification for

00:27:49,669 --> 00:27:54,049
that basically says like do this as a

00:27:52,010 --> 00:27:56,029
last resort and while you're doing it

00:27:54,049 --> 00:27:59,980
try to go back as soon as possible to

00:27:56,029 --> 00:28:03,649
either plain ESP or you or use being UDP

00:27:59,980 --> 00:28:06,110
so I guess the command channel it does P

00:28:03,649 --> 00:28:08,630
arith indication parameter negotiation a

00:28:06,110 --> 00:28:12,049
generous the secret key so basically the

00:28:08,630 --> 00:28:15,080
two endpoints agree on the same see it

00:28:12,049 --> 00:28:17,750
called SK seat and then they'll use a

00:28:15,080 --> 00:28:20,600
negotiated PRF and n del T they can just

00:28:17,750 --> 00:28:23,270
generate an unlimited key stream of

00:28:20,600 --> 00:28:25,399
pseudo-random numbers that will use as

00:28:23,270 --> 00:28:28,549
actual symmetric keys later on for the

00:28:25,399 --> 00:28:30,649
for the packet encryption the IKE

00:28:28,549 --> 00:28:32,840
protocol itself is also encrypted so

00:28:30,649 --> 00:28:34,700
sometimes that's a little confusing so

00:28:32,840 --> 00:28:36,950
we'll first send up an encrypted I

00:28:34,700 --> 00:28:38,370
accession to then negotiate encryption

00:28:36,950 --> 00:28:40,410
keys and send them

00:28:38,370 --> 00:28:42,390
and gree on them and then we'll actually

00:28:40,410 --> 00:28:48,900
start doing packet encryption which is

00:28:42,390 --> 00:28:52,440
you know just a Colonels job as we said

00:28:48,900 --> 00:28:55,100
there's SPD policies and and security

00:28:52,440 --> 00:28:57,930
Association database at the states so

00:28:55,100 --> 00:29:00,240
the userland mostly handles the policies

00:28:57,930 --> 00:29:02,640
and we just entered the right policies

00:29:00,240 --> 00:29:04,080
into the kernel and either we never have

00:29:02,640 --> 00:29:07,590
to do anything again because it's an

00:29:04,080 --> 00:29:10,530
IPSec tunnel or IPSec connection and and

00:29:07,590 --> 00:29:12,150
or the kernels doing all the work or it

00:29:10,530 --> 00:29:13,860
is just a policy that says hey if you

00:29:12,150 --> 00:29:15,929
ever happen to see a packet for this

00:29:13,860 --> 00:29:18,240
destination then give me a signal and

00:29:15,929 --> 00:29:26,040
through the acquire through the net link

00:29:18,240 --> 00:29:28,860
socket we get at information there's a

00:29:26,040 --> 00:29:31,260
bunch of RFC's just just to note this

00:29:28,860 --> 00:29:36,660
has been around for a long time so I can

00:29:31,260 --> 00:29:38,610
one was from 1998 I wasn't very active

00:29:36,660 --> 00:29:41,010
in the TLS working group so I was really

00:29:38,610 --> 00:29:43,620
surprised when I heard that TLS 1.3 was

00:29:41,010 --> 00:29:45,720
the first to last algorithm first the

00:29:43,620 --> 00:29:48,720
last protocol where we would actually do

00:29:45,720 --> 00:29:51,300
ephemeral key exchanges as mandatory

00:29:48,720 --> 00:29:53,190
this has been mandatory since 1998 in

00:29:51,300 --> 00:29:55,020
Ike there's no other there's no none

00:29:53,190 --> 00:29:57,000
ephemeral way of doing it like we always

00:29:55,020 --> 00:29:58,890
said like you must have perfect forward

00:29:57,000 --> 00:30:01,140
secrecy like we always first do it if he

00:29:58,890 --> 00:30:02,850
Hellman and then do other things like I

00:30:01,140 --> 00:30:04,830
was actually called shark that Intel has

00:30:02,850 --> 00:30:06,990
one or two or like you could still have

00:30:04,830 --> 00:30:08,550
a static key someone can sniffle the

00:30:06,990 --> 00:30:09,809
traffic and ten years down the line when

00:30:08,550 --> 00:30:11,910
they happen to get the private key they

00:30:09,809 --> 00:30:16,950
can decrypt everything that was really

00:30:11,910 --> 00:30:19,290
surprising for me but to be fair the ike

00:30:16,950 --> 00:30:21,570
version one has been has learned a lot

00:30:19,290 --> 00:30:23,730
from the old ssl layers and you know

00:30:21,570 --> 00:30:26,760
when when SSL Juan Pardo came out and I

00:30:23,730 --> 00:30:28,290
came out the T Laz people learned again

00:30:26,760 --> 00:30:30,690
from Ike v1 so they came up with you

00:30:28,290 --> 00:30:32,910
know TLS on Pandora 1.1 and now it's

00:30:30,690 --> 00:30:35,250
going against ot loss 1.3 now has

00:30:32,910 --> 00:30:37,140
learned from Ike v2 so so we're sort of

00:30:35,250 --> 00:30:38,760
in step looking at each other what we're

00:30:37,140 --> 00:30:40,290
doing in is they're you know one makes

00:30:38,760 --> 00:30:42,660
sense for a single net flow the other

00:30:40,290 --> 00:30:48,210
makes sense for you an entire IP range

00:30:42,660 --> 00:30:49,800
or if you've heard I need at any point

00:30:48,210 --> 00:30:51,779
that you know this is highly insecure

00:30:49,800 --> 00:30:53,639
what you've really heard about this

00:30:51,779 --> 00:30:55,229
I agree one aggressive mode and it's not

00:30:53,639 --> 00:30:57,479
that the protocol is insecure the

00:30:55,229 --> 00:30:59,190
protocol is actually not broken it is

00:30:57,479 --> 00:31:01,259
just that people pick really weak

00:30:59,190 --> 00:31:02,969
pre-shared keys and that in combination

00:31:01,259 --> 00:31:05,340
with aggressive mode where you can do

00:31:02,969 --> 00:31:07,889
offline dictionary based attacks it

00:31:05,340 --> 00:31:09,840
becomes a weak point so whatever you

00:31:07,889 --> 00:31:11,580
configure if you still if you're still

00:31:09,840 --> 00:31:13,769
stuck with the old I agree one protocol

00:31:11,580 --> 00:31:17,759
try to stick with main mode do not do

00:31:13,769 --> 00:31:18,960
aggressive mode for I agree to that has

00:31:17,759 --> 00:31:21,419
all been changed so there's only really

00:31:18,960 --> 00:31:27,089
one sort of mode it's called the initial

00:31:21,419 --> 00:31:29,399
exchanges the and the one thing to note

00:31:27,089 --> 00:31:33,539
that in both an active and aggressive

00:31:29,399 --> 00:31:36,719
mode and in v2 to sort of speed up the

00:31:33,539 --> 00:31:39,359
the lookups the identity of the

00:31:36,719 --> 00:31:41,369
responder can be revealed in a message

00:31:39,359 --> 00:31:43,619
so normally that's not a problem because

00:31:41,369 --> 00:31:45,330
like if you are a VPN client that you're

00:31:43,619 --> 00:31:47,489
going to connect your VPN server

00:31:45,330 --> 00:31:49,109
well that VPN server is known anyway to

00:31:47,489 --> 00:31:50,969
be a server it sort of publicly known

00:31:49,109 --> 00:31:52,830
it's available in a DNS it has an IP

00:31:50,969 --> 00:31:54,960
address it's known so people already

00:31:52,830 --> 00:31:57,450
kind of know that that servers out there

00:31:54,960 --> 00:32:01,200
so it's not considered much of a secret

00:31:57,450 --> 00:32:03,389
and by sending that ID it does give you

00:32:01,200 --> 00:32:05,549
more abilities to so the server can can

00:32:03,389 --> 00:32:07,109
assume an identity and they can look up

00:32:05,549 --> 00:32:10,339
different pre-shared keys for different

00:32:07,109 --> 00:32:13,799
connections and so so it was sort of a a

00:32:10,339 --> 00:32:15,149
compromise like I said like all in in a

00:32:13,799 --> 00:32:16,919
passive attack it's almost always

00:32:15,149 --> 00:32:18,359
already known and if someone would do an

00:32:16,919 --> 00:32:20,309
active attacks even if you would first

00:32:18,359 --> 00:32:21,479
do a diffie-hellman and only then you

00:32:20,309 --> 00:32:23,249
sent the ID well

00:32:21,479 --> 00:32:25,109
someone either the client or the serve

00:32:23,249 --> 00:32:26,339
has to start out anyway with revealing

00:32:25,109 --> 00:32:27,749
who they think they're talking to so

00:32:26,339 --> 00:32:31,049
even an active attacker could still

00:32:27,749 --> 00:32:33,059
actually get at ID so so that's why it

00:32:31,049 --> 00:32:36,179
was considered not a big problem to to

00:32:33,059 --> 00:32:37,919
leak on the wire so what's the general

00:32:36,179 --> 00:32:39,779
mechanism we the first two

00:32:37,919 --> 00:32:41,729
diffie-hellman key exchange so we get a

00:32:39,779 --> 00:32:43,769
private channel we we at least know that

00:32:41,729 --> 00:32:45,539
we're talking to one entity not many and

00:32:43,769 --> 00:32:48,479
then of course the next step is to

00:32:45,539 --> 00:32:50,580
authenticate at that entity this can be

00:32:48,479 --> 00:32:52,259
a mutual authentication IP one was

00:32:50,580 --> 00:32:54,479
always a mutual authentication and

00:32:52,259 --> 00:32:56,580
always also symmetrical based on the

00:32:54,479 --> 00:32:58,529
same algorithm so if you did RSA

00:32:56,580 --> 00:32:59,290
authentication one way you did RSA

00:32:58,529 --> 00:33:01,780
authentication

00:32:59,290 --> 00:33:03,400
the other way with Ike v2 you can do

00:33:01,780 --> 00:33:05,350
different methods of one good like one

00:33:03,400 --> 00:33:08,170
client could could use a pre-shared key

00:33:05,350 --> 00:33:09,970
and the server could use a certificate

00:33:08,170 --> 00:33:13,540
you see that a lot these days with the

00:33:09,970 --> 00:33:20,050
EAP because it allows the client not to

00:33:13,540 --> 00:33:22,990
install any certificates themselves then

00:33:20,050 --> 00:33:25,060
we negotiate various things and not

00:33:22,990 --> 00:33:26,320
detection that peer detection session

00:33:25,060 --> 00:33:27,940
resumption is a bunch of sort of

00:33:26,320 --> 00:33:29,410
features that can be enabled depending

00:33:27,940 --> 00:33:31,600
on on the session I won't go into too

00:33:29,410 --> 00:33:33,520
many details there's like about 20

00:33:31,600 --> 00:33:36,670
different RFC's that have different IP

00:33:33,520 --> 00:33:39,580
to features but if you have any interest

00:33:36,670 --> 00:33:42,880
in some specific things and then let me

00:33:39,580 --> 00:33:44,350
know and finally once the the peers have

00:33:42,880 --> 00:33:46,450
authenticated each other they actually

00:33:44,350 --> 00:33:48,010
going to negotiate the IPSec parameters

00:33:46,450 --> 00:33:49,720
and that's like you know what are we

00:33:48,010 --> 00:33:51,160
going to encrypt how we're gonna encrypt

00:33:49,720 --> 00:33:56,310
it and which packets are we going to

00:33:51,160 --> 00:33:56,310
allow what mode we're going to use etc

00:33:56,550 --> 00:34:03,220
so as I said I give one please try to

00:34:00,700 --> 00:34:04,810
avoid it if there's any Android

00:34:03,220 --> 00:34:06,310
developers in the room I always like to

00:34:04,810 --> 00:34:08,919
point them out that they still really

00:34:06,310 --> 00:34:12,720
don't - I agree - please hurry up you're

00:34:08,919 --> 00:34:16,030
the last ones there please do i CLE -

00:34:12,720 --> 00:34:18,040
actually one has a few older algorithms

00:34:16,030 --> 00:34:19,840
so there's still Triple DES around that

00:34:18,040 --> 00:34:21,690
people use you can use Naqvi - but

00:34:19,840 --> 00:34:24,340
obviously people don't do it anymore

00:34:21,690 --> 00:34:27,340
again none of these algorithms really

00:34:24,340 --> 00:34:30,310
have been broken if an H make md5 and 8h

00:34:27,340 --> 00:34:32,560
MEK sha-1 they're not as broken as the

00:34:30,310 --> 00:34:34,300
non hmx version so this so they're still

00:34:32,560 --> 00:34:37,390
actually safe the only thing that has

00:34:34,300 --> 00:34:40,960
been really broken is the defilement

00:34:37,390 --> 00:34:43,270
group 1 which is mod P 768 which was

00:34:40,960 --> 00:34:45,760
actually not implemented by all the

00:34:43,270 --> 00:34:48,700
Swans since 1998 so actually only mode

00:34:45,760 --> 00:34:49,480
that you can have brute force really was

00:34:48,700 --> 00:34:53,530
never implemented

00:34:49,480 --> 00:34:55,390
well 2024 versus group 2 is getting to

00:34:53,530 --> 00:34:57,130
the point where every think you know NSA

00:34:55,390 --> 00:35:02,170
and nation-states can probably decrypt

00:34:57,130 --> 00:35:04,210
it but academia cannot yet do it there's

00:35:02,170 --> 00:35:08,110
again one weird exception of a special

00:35:04,210 --> 00:35:09,980
group that uses a different sub prime

00:35:08,110 --> 00:35:11,960
ordering and that one

00:35:09,980 --> 00:35:14,720
can probably be broken and which is why

00:35:11,960 --> 00:35:17,660
we've explicitly removed it in one of

00:35:14,720 --> 00:35:23,420
the methods RFC eight two to one a

00:35:17,660 --> 00:35:25,010
couple of months ago so I clicked a we

00:35:23,420 --> 00:35:29,180
learned a few things we needed that peer

00:35:25,010 --> 00:35:31,190
detection we need it in the the net

00:35:29,180 --> 00:35:33,890
reversal in IQ one when IP one was was

00:35:31,190 --> 00:35:35,660
designed we were still hopeful that ipv6

00:35:33,890 --> 00:35:37,400
would take over we would never see net

00:35:35,660 --> 00:35:39,290
again in our lifetimes we were all

00:35:37,400 --> 00:35:40,970
really happy optimistic

00:35:39,290 --> 00:35:43,070
we decided now that you know it's it's

00:35:40,970 --> 00:35:46,579
it's never going to go away so so we

00:35:43,070 --> 00:35:48,440
need proper net reversal handling iq2 is

00:35:46,579 --> 00:35:51,020
actually used in many ways under the

00:35:48,440 --> 00:35:54,170
hood it will be used for the new 5g

00:35:51,020 --> 00:35:56,240
standards for everything for is over LTE

00:35:54,170 --> 00:35:57,980
Wi-Fi calling if you have that enabled

00:35:56,240 --> 00:36:00,140
on your phone you're actually doing I

00:35:57,980 --> 00:36:03,260
agree to and IPSec connections to make

00:36:00,140 --> 00:36:08,630
that happen the Xbox one if you're

00:36:03,260 --> 00:36:10,010
gaming also uses IPSec there's a few

00:36:08,630 --> 00:36:12,260
less of round trips and I CLE too so

00:36:10,010 --> 00:36:13,460
it's it's faster to establish if you if

00:36:12,260 --> 00:36:15,290
you use it on a phone you can actually

00:36:13,460 --> 00:36:17,839
tell the difference because it's like

00:36:15,290 --> 00:36:19,970
two round trips less compared to I agree

00:36:17,839 --> 00:36:24,079
one so it's actually nicer

00:36:19,970 --> 00:36:26,810
it defaults to modern crypto Suites GCM

00:36:24,079 --> 00:36:30,170
ChaCha twenty poly curve to four five

00:36:26,810 --> 00:36:33,920
nineteen and a CCM mostly for IOT

00:36:30,170 --> 00:36:35,690
devices they're really on iut I really

00:36:33,920 --> 00:36:37,790
like to prefer to do a little more work

00:36:35,690 --> 00:36:39,829
on the CPU if that saves time sending

00:36:37,790 --> 00:36:42,609
out a byte over the the wireless

00:36:39,829 --> 00:36:44,780
connections so there's a few different

00:36:42,609 --> 00:36:48,349
considerations on which algorithms to

00:36:44,780 --> 00:36:51,140
use there another important thing too

00:36:48,349 --> 00:36:53,569
that was not part of Ike v2 originally

00:36:51,140 --> 00:36:57,349
it was sort of added on in an odd best

00:36:53,569 --> 00:36:59,270
way is fragmentation support because

00:36:57,349 --> 00:37:01,040
you're especially in tunnel mode when

00:36:59,270 --> 00:37:02,569
you're putting a packet inside another

00:37:01,040 --> 00:37:05,930
packet you're going to run into a small

00:37:02,569 --> 00:37:07,790
MTU issue or a large empty issue so if

00:37:05,930 --> 00:37:09,470
you're putting a 15 on it by packet

00:37:07,790 --> 00:37:11,030
inside another packet that pack is going

00:37:09,470 --> 00:37:13,970
to be bigger than 1500 bytes and then

00:37:11,030 --> 00:37:15,829
you have to fragment it so that's one

00:37:13,970 --> 00:37:17,450
thing you need to support and then on

00:37:15,829 --> 00:37:19,670
the other side is the during the ike

00:37:17,450 --> 00:37:20,780
negotiation itself if you're using x.509

00:37:19,670 --> 00:37:22,460
certificates and you're sending

00:37:20,780 --> 00:37:24,980
certificates long

00:37:22,460 --> 00:37:28,369
that also can actually go across the

00:37:24,980 --> 00:37:32,150
1500 MTU issue and then you actually you

00:37:28,369 --> 00:37:34,369
can't negotiate so in the ideal world

00:37:32,150 --> 00:37:35,750
fragments get sent over the network it

00:37:34,369 --> 00:37:37,490
gets reassembled on the other side

00:37:35,750 --> 00:37:38,839
there's no problems but in practice it

00:37:37,490 --> 00:37:41,030
means that fragments get dropped

00:37:38,839 --> 00:37:42,020
especially on LTE networks things don't

00:37:41,030 --> 00:37:44,660
work

00:37:42,020 --> 00:37:46,130
and so in Ike v2 there's and there's a

00:37:44,660 --> 00:37:47,569
fragmentation support and it's a little

00:37:46,130 --> 00:37:47,900
better than a glee one and I agree to

00:37:47,569 --> 00:37:49,790
differ

00:37:47,900 --> 00:37:51,140
each individual fragments get encrypted

00:37:49,790 --> 00:37:53,390
so let's say you're sending five

00:37:51,140 --> 00:37:57,470
fragments if the other side didn't get

00:37:53,390 --> 00:37:58,609
all of them they can ask again but they

00:37:57,470 --> 00:38:00,650
don't need the ones that they already

00:37:58,609 --> 00:38:02,390
have because they are already protected

00:38:00,650 --> 00:38:04,849
by the encryption and the integrity

00:38:02,390 --> 00:38:06,440
check so so it's harder for a DDoS

00:38:04,849 --> 00:38:09,410
attack to happen where they just send

00:38:06,440 --> 00:38:10,430
you know malicious bat fragments and you

00:38:09,410 --> 00:38:12,380
just keep them but you can't

00:38:10,430 --> 00:38:13,910
authenticate them unless you have got

00:38:12,380 --> 00:38:16,730
all of them and so they only needed to

00:38:13,910 --> 00:38:19,099
spoof one of the fragments with Ike v2

00:38:16,730 --> 00:38:20,990
because it's signed per fragment they

00:38:19,099 --> 00:38:22,490
actually have to you know they have to

00:38:20,990 --> 00:38:24,290
block all the fragments from receiving

00:38:22,490 --> 00:38:26,059
you even on retransmits that's a bit

00:38:24,290 --> 00:38:28,430
more secure

00:38:26,059 --> 00:38:30,650
funny enough ikely one was a little more

00:38:28,430 --> 00:38:33,010
secure in with the preciate key mode

00:38:30,650 --> 00:38:34,609
that it gave us a post quantum

00:38:33,010 --> 00:38:36,859
protection

00:38:34,609 --> 00:38:39,890
the disadvantage why it was removed was

00:38:36,859 --> 00:38:41,630
that if you did the I authenticate with

00:38:39,890 --> 00:38:43,670
the pre shared key it depreciate he was

00:38:41,630 --> 00:38:46,040
mixed into the generation of the shared

00:38:43,670 --> 00:38:48,589
secret which meant if he didn't have to

00:38:46,040 --> 00:38:50,900
write pre shared key you would just get

00:38:48,589 --> 00:38:52,400
an unencrypted blob of text and you

00:38:50,900 --> 00:38:54,200
couldn't do anything so you couldn't

00:38:52,400 --> 00:38:56,599
actually know what went wrong you could

00:38:54,200 --> 00:39:00,260
just you know assume that you had to run

00:38:56,599 --> 00:39:02,839
pre shared key with Ike v2 they changed

00:39:00,260 --> 00:39:07,609
it slightly they put the off payload in

00:39:02,839 --> 00:39:09,109
a separate as separate payload so that

00:39:07,609 --> 00:39:10,609
if you got the authentication wrong with

00:39:09,109 --> 00:39:11,990
the wrong pre shared key you would just

00:39:10,609 --> 00:39:13,430
you would still be able to decrypt the

00:39:11,990 --> 00:39:15,290
packet and then read and set

00:39:13,430 --> 00:39:16,670
authentication failed you still might

00:39:15,290 --> 00:39:18,470
not be able to trust it because you

00:39:16,670 --> 00:39:20,030
didn't authenticate but at least you

00:39:18,470 --> 00:39:21,440
know more about what's going on so you

00:39:20,030 --> 00:39:24,440
could do retransmitted so you could

00:39:21,440 --> 00:39:26,150
decide to get a confirmation somehow but

00:39:24,440 --> 00:39:28,250
that because of that we lost the

00:39:26,150 --> 00:39:30,799
protection against the quantum computers

00:39:28,250 --> 00:39:32,510
so we added a new post content

00:39:30,799 --> 00:39:33,260
pre-shared key which is basically sort

00:39:32,510 --> 00:39:35,420
of similar to the

00:39:33,260 --> 00:39:36,500
I appreciate key as an additional thing

00:39:35,420 --> 00:39:38,630
that you can do so you can do

00:39:36,500 --> 00:39:41,390
certificate based authentication and add

00:39:38,630 --> 00:39:44,270
this you know out-of-band shared

00:39:41,390 --> 00:39:47,570
pre-shared key to protect yourself

00:39:44,270 --> 00:39:49,910
against quantum computers and this is

00:39:47,570 --> 00:39:53,210
sort of a stopgap measure until you know

00:39:49,910 --> 00:39:56,410
the cfrt the crypto form research group

00:39:53,210 --> 00:39:58,850
at ITF has come with you know the proper

00:39:56,410 --> 00:40:04,670
post quantum algorithms that we can

00:39:58,850 --> 00:40:07,460
trust more retransmit there's a better

00:40:04,670 --> 00:40:09,320
protection against DDoS attacks the

00:40:07,460 --> 00:40:11,900
retransmissions and iPhones really bad

00:40:09,320 --> 00:40:13,820
like any any any endpoint decided

00:40:11,900 --> 00:40:15,320
independently when to retransmit packets

00:40:13,820 --> 00:40:17,090
or they all would go back and forth and

00:40:15,320 --> 00:40:19,340
would amplify like you could send one

00:40:17,090 --> 00:40:21,290
spoofed packet to an IKE server anywhere

00:40:19,340 --> 00:40:23,510
on the internet and it would like free

00:40:21,290 --> 00:40:27,020
transmit 20 times and so you would get

00:40:23,510 --> 00:40:28,700
this amplification for a DDoS attack so

00:40:27,020 --> 00:40:30,380
now if we - it's been cleaned up a

00:40:28,700 --> 00:40:32,690
little bit so every transmission only

00:40:30,380 --> 00:40:34,730
happens by the initiator so and

00:40:32,690 --> 00:40:38,590
responded you sends a packet it's not a

00:40:34,730 --> 00:40:38,590
response responsibility to retransmit

00:40:39,640 --> 00:40:43,880
okay and so that all sounds really

00:40:42,200 --> 00:40:45,260
complicated and people always think it's

00:40:43,880 --> 00:40:47,000
really complicated to configure so now

00:40:45,260 --> 00:40:50,510
we're going to show you how easy it

00:40:47,000 --> 00:40:53,150
actually is to configure so I need any

00:40:50,510 --> 00:40:55,270
questions so far on the theory because

00:40:53,150 --> 00:40:59,030
this is all the theory we're going to do

00:40:55,270 --> 00:41:01,070
now it's all practice ok good so first a

00:40:59,030 --> 00:41:03,470
typical VPN host-to-host

00:41:01,070 --> 00:41:04,910
no Nats in between we got one a P and a

00:41:03,470 --> 00:41:07,240
left on a P and a ride and we wanted to

00:41:04,910 --> 00:41:10,340
send crypto traffic

00:41:07,240 --> 00:41:12,380
first thing you want to do is you like

00:41:10,340 --> 00:41:14,270
each each host needs an identity this is

00:41:12,380 --> 00:41:16,820
actually one of the hardest parts

00:41:14,270 --> 00:41:18,500
because if you got a cloud with 10,000

00:41:16,820 --> 00:41:19,910
machines how do you give them an

00:41:18,500 --> 00:41:22,070
identity how do you know that's there

00:41:19,910 --> 00:41:24,350
and often we have customers that say

00:41:22,070 --> 00:41:26,720
well I guess that's a real machine

00:41:24,350 --> 00:41:28,880
because someone with the AWS console

00:41:26,720 --> 00:41:30,380
password launched is no so therefore it

00:41:28,880 --> 00:41:32,300
must actually be a real note because I

00:41:30,380 --> 00:41:34,160
attack I couldn't do that but they don't

00:41:32,300 --> 00:41:35,690
have any finer control of how to prove

00:41:34,160 --> 00:41:38,930
that that's not a you know an

00:41:35,690 --> 00:41:41,300
illegitimate node on a network so the

00:41:38,930 --> 00:41:43,070
simplest way for for a host host

00:41:41,300 --> 00:41:45,570
connection where you don't need third

00:41:43,070 --> 00:41:49,770
party student sort of negotiate the

00:41:45,570 --> 00:41:52,320
he is to use Rockies so if you if anyone

00:41:49,770 --> 00:41:54,900
has installed their half a VM and they

00:41:52,320 --> 00:41:57,270
have Libre son on it you can type IPSec

00:41:54,900 --> 00:42:01,140
new host key as route and you'll see it

00:41:57,270 --> 00:42:03,540
generates just Araki we were hoping

00:42:01,140 --> 00:42:05,670
original in the late 90s that we could

00:42:03,540 --> 00:42:06,780
not use certificates in attacks fiverine

00:42:05,670 --> 00:42:08,820
and would also be one of those

00:42:06,780 --> 00:42:11,310
technologies that would be happily die

00:42:08,820 --> 00:42:13,340
and be replaced by something better so

00:42:11,310 --> 00:42:16,230
we were hoping Rockies would be better

00:42:13,340 --> 00:42:20,700
it's not as popular so so Rockies is

00:42:16,230 --> 00:42:23,130
sort of only used in the in the IPSec

00:42:20,700 --> 00:42:24,810
world still everybody else is to switch

00:42:23,130 --> 00:42:27,510
to certificates either self-signed

00:42:24,810 --> 00:42:30,240
certificates or you know as an

00:42:27,510 --> 00:42:32,550
equivalent of a rocky but we can use

00:42:30,240 --> 00:42:33,780
straight rocky so if you use IPSec show

00:42:32,550 --> 00:42:35,700
host key - list

00:42:33,780 --> 00:42:39,210
- - list will show you all the ones you

00:42:35,700 --> 00:42:41,820
have generated and if you want to have

00:42:39,210 --> 00:42:44,880
the public key that you can give to your

00:42:41,820 --> 00:42:47,820
your your other host - to configure you

00:42:44,880 --> 00:42:48,630
can use IPSec show host key - - left or

00:42:47,820 --> 00:42:50,850
- - right

00:42:48,630 --> 00:42:54,720
and then the seeker ID that the list

00:42:50,850 --> 00:42:58,400
command shows you I can actually be if

00:42:54,720 --> 00:42:58,400
you show that I guess I'll just switch

00:43:00,290 --> 00:43:04,550
the font is readable right it's big

00:43:02,460 --> 00:43:04,550
enough

00:43:08,020 --> 00:43:17,520
there we go and I can do a show host key

00:43:13,800 --> 00:43:17,520
- - left

00:43:26,270 --> 00:43:30,020
so that's the public key so this is the

00:43:28,520 --> 00:43:32,119
item that I give to the other

00:43:30,020 --> 00:43:34,100
administrator of the other host and they

00:43:32,119 --> 00:43:35,900
can configure that and they will

00:43:34,100 --> 00:43:37,640
similarly do that on their machine and

00:43:35,900 --> 00:43:40,310
give it to me so now we have overall

00:43:37,640 --> 00:43:43,790
public key if you want to do

00:43:40,310 --> 00:43:46,220
certificates the easiest way to do this

00:43:43,790 --> 00:43:48,500
is to get a pkcs12 certificate which

00:43:46,220 --> 00:43:51,020
means you have a the CA the root CA

00:43:48,500 --> 00:43:53,690
certificate or and and intermediate CA

00:43:51,020 --> 00:43:58,940
certificates plus your an certificate

00:43:53,690 --> 00:44:00,410
plus a private key and I will always

00:43:58,940 --> 00:44:05,150
show it later when we get to the example

00:44:00,410 --> 00:44:07,190
of using the remote access VPN with with

00:44:05,150 --> 00:44:08,600
these certificates you can use the IPSec

00:44:07,190 --> 00:44:10,820
import command which is really a wrapper

00:44:08,600 --> 00:44:13,580
around the the cert util command it

00:44:10,820 --> 00:44:14,990
comes with the NSS library and Lee Busan

00:44:13,580 --> 00:44:16,880
uses the NSS libraries the crypto

00:44:14,990 --> 00:44:18,170
library like you know it's v certified

00:44:16,880 --> 00:44:21,860
has been around for a while the same

00:44:18,170 --> 00:44:24,980
library Firefox uses and that's that's

00:44:21,860 --> 00:44:26,630
our basic crypto so so so in fact it's

00:44:24,980 --> 00:44:29,090
funny that libros fun almost has no

00:44:26,630 --> 00:44:31,250
crypto in itself in its code like

00:44:29,090 --> 00:44:33,500
there's very minimal things it's

00:44:31,250 --> 00:44:34,820
actually only technically speaking for v

00:44:33,500 --> 00:44:36,380
certification the only thing we need to

00:44:34,820 --> 00:44:38,930
certify is the key derivation function

00:44:36,380 --> 00:44:40,040
and it's used in Ike because it's

00:44:38,930 --> 00:44:41,840
slightly different from the standard

00:44:40,040 --> 00:44:44,570
functions everything else is actually

00:44:41,840 --> 00:44:46,220
all subbed out to the NSS library they

00:44:44,570 --> 00:44:48,530
have to do all the v certification for

00:44:46,220 --> 00:44:49,670
us and we're just a happy consumer so

00:44:48,530 --> 00:44:51,950
even though we're considered like a

00:44:49,670 --> 00:44:55,400
cryptographic package we actually hardly

00:44:51,950 --> 00:44:56,930
have any crypto in there the third way

00:44:55,400 --> 00:44:58,580
that it's even though it's the most

00:44:56,930 --> 00:45:00,920
common way of configuring things is to

00:44:58,580 --> 00:45:01,790
pre-shared key this is the only line

00:45:00,920 --> 00:45:04,160
you'll see about it

00:45:01,790 --> 00:45:06,020
don't use pre-shared keys they're not

00:45:04,160 --> 00:45:08,170
very secure you will get your

00:45:06,020 --> 00:45:10,970
administrator with the easy to remember

00:45:08,170 --> 00:45:13,460
pronounced word on the phone it will not

00:45:10,970 --> 00:45:16,430
be secure some of them won't be able to

00:45:13,460 --> 00:45:18,530
input hex characters or so you only get

00:45:16,430 --> 00:45:20,450
a ski so it's actually not even fully

00:45:18,530 --> 00:45:23,390
random it's only a very small subset of

00:45:20,450 --> 00:45:25,220
characters don't use pretty shirt keys

00:45:23,390 --> 00:45:30,470
if you can help it so I will never

00:45:25,220 --> 00:45:31,910
mention them from here on again so both

00:45:30,470 --> 00:45:33,770
sides have generated this public key

00:45:31,910 --> 00:45:35,900
you've exchanged them

00:45:33,770 --> 00:45:39,350
and now you put in what we call a

00:45:35,900 --> 00:45:42,290
connection so to to come back a little

00:45:39,350 --> 00:45:43,640
bit on some minis transport mode versus

00:45:42,290 --> 00:45:45,560
tunnel mode and we call everything a

00:45:43,640 --> 00:45:48,560
tunnel we actually call everything a

00:45:45,560 --> 00:45:52,940
connection and a connection could be a

00:45:48,560 --> 00:45:55,340
tunnel or a transport mode thing so you

00:45:52,940 --> 00:45:58,340
can see that you'll see a lot of left

00:45:55,340 --> 00:45:59,990
and right mansions so we thought again

00:45:58,340 --> 00:46:02,930
back in the 90s that this was a really

00:45:59,990 --> 00:46:05,480
clever idea instead of talking about

00:46:02,930 --> 00:46:06,890
source and destination because IPSec is

00:46:05,480 --> 00:46:08,840
a peer-to-peer protocol you don't really

00:46:06,890 --> 00:46:10,100
have a source and a destination you

00:46:08,840 --> 00:46:13,490
don't really have a client and a server

00:46:10,100 --> 00:46:15,470
they're all equal partners in this so we

00:46:13,490 --> 00:46:17,420
decided to call it left and right so

00:46:15,470 --> 00:46:18,890
what's on the left side of your diagram

00:46:17,420 --> 00:46:20,990
on paper what's on the right side of

00:46:18,890 --> 00:46:22,760
your diagram on paper and of course if

00:46:20,990 --> 00:46:24,380
you turn around the paper it still works

00:46:22,760 --> 00:46:26,210
it's just you know the other side is

00:46:24,380 --> 00:46:30,110
left or right so in fact you can take

00:46:26,210 --> 00:46:31,610
this configuration in general and put it

00:46:30,110 --> 00:46:33,320
on the other machine and it will still

00:46:31,610 --> 00:46:35,090
work because it's the same configuration

00:46:33,320 --> 00:46:37,820
and the the endpoints will figure out

00:46:35,090 --> 00:46:40,100
whether they are left or right so for

00:46:37,820 --> 00:46:44,660
instance in this case you see the right

00:46:40,100 --> 00:46:46,460
is the their IP or hostname so when the

00:46:44,660 --> 00:46:48,260
daemon starts it will look like a Midas

00:46:46,460 --> 00:46:49,850
IP address if I cannot find this IP

00:46:48,260 --> 00:46:52,010
address then I must not be right then I

00:46:49,850 --> 00:46:53,930
must be left so the nice thing is that

00:46:52,010 --> 00:46:54,740
for almost all configurations you can

00:46:53,930 --> 00:46:56,840
actually use the exact same

00:46:54,740 --> 00:46:58,130
configuration on both sides so you don't

00:46:56,840 --> 00:47:01,430
have to write different configurations

00:46:58,130 --> 00:47:03,250
for the different endpoints so what do

00:47:01,430 --> 00:47:06,050
we have like the minimum information

00:47:03,250 --> 00:47:07,340
left Nico's % default route means that

00:47:06,050 --> 00:47:09,260
you don't have to put in your own appear

00:47:07,340 --> 00:47:10,880
as well just pick up the whatever IP res

00:47:09,260 --> 00:47:14,480
links we'll use to send packets over the

00:47:10,880 --> 00:47:15,890
default route left ID you can make up

00:47:14,480 --> 00:47:17,270
whatever you want this is just a host

00:47:15,890 --> 00:47:19,370
host connection you're just using it for

00:47:17,270 --> 00:47:21,730
identification purposes because you're

00:47:19,370 --> 00:47:24,470
actually really using the public key so

00:47:21,730 --> 00:47:26,120
the syntax here is if it starts at an @

00:47:24,470 --> 00:47:28,040
symbol it means it's a string you should

00:47:26,120 --> 00:47:30,380
not resolve so it's just your own custom

00:47:28,040 --> 00:47:32,630
string you can I use my name you can use

00:47:30,380 --> 00:47:34,010
whatever you want there then you paste

00:47:32,630 --> 00:47:37,700
in that line you got for an IPSec

00:47:34,010 --> 00:47:39,440
Newhouse key go and then right you put

00:47:37,700 --> 00:47:40,190
the IP address again you make up the

00:47:39,440 --> 00:47:42,860
idea that you want

00:47:40,190 --> 00:47:44,060
authorize RS ASIC is the default mode I

00:47:42,860 --> 00:47:46,560
didn't put it in you can actually leave

00:47:44,060 --> 00:47:48,240
that line out because it's the default

00:47:46,560 --> 00:47:51,590
but at some point we'll probably soon

00:47:48,240 --> 00:47:55,800
change to like ECDSA as a default there

00:47:51,590 --> 00:47:57,840
and then you've got the other line you

00:47:55,800 --> 00:48:00,450
can do auto vehicles start on demand or

00:47:57,840 --> 00:48:02,670
at start means load the connection and

00:48:00,450 --> 00:48:04,110
bring it up on demand means load the

00:48:02,670 --> 00:48:05,460
connection and whenever there's a packet

00:48:04,110 --> 00:48:08,040
the colonel will tell us and then we'll

00:48:05,460 --> 00:48:09,270
bring it up and add means never bring it

00:48:08,040 --> 00:48:10,020
up this wait for the other end to

00:48:09,270 --> 00:48:14,610
respond to you

00:48:10,020 --> 00:48:18,030
I agree Jews insist it's also it's still

00:48:14,610 --> 00:48:20,190
needed for now by the time we'll hit rl8

00:48:18,030 --> 00:48:21,510
we have changed the default that IP 2

00:48:20,190 --> 00:48:24,330
will be the default and you have to

00:48:21,510 --> 00:48:25,860
actually go through an ailing Ike v1 if

00:48:24,330 --> 00:48:28,020
you want to so for now I do understand

00:48:25,860 --> 00:48:30,840
default because it's been default for so

00:48:28,020 --> 00:48:32,340
long but 4l8 will actually switch it and

00:48:30,840 --> 00:48:35,580
this is it this is the entire

00:48:32,340 --> 00:48:37,560
configuration and like like it doesn't

00:48:35,580 --> 00:48:40,050
matter what VPN protocol you use what

00:48:37,560 --> 00:48:42,360
you need to say which IP you want to

00:48:40,050 --> 00:48:45,810
encrypt to what your what your public

00:48:42,360 --> 00:48:47,550
key is and and and and start it so so

00:48:45,810 --> 00:48:50,520
IPSec is not as hard you've now set up

00:48:47,550 --> 00:48:51,540
an IPSec tunnel this is this is it we

00:48:50,520 --> 00:48:53,610
were hoping to do this between

00:48:51,540 --> 00:48:56,130
neighboring laptops here between

00:48:53,610 --> 00:48:58,800
yourselves but unfortunately the Wi-Fi

00:48:56,130 --> 00:49:01,380
here doesn't allow you to connect and

00:48:58,800 --> 00:49:03,570
send packets to your neighbor we have

00:49:01,380 --> 00:49:05,940
some VMs that that are running in

00:49:03,570 --> 00:49:08,640
Amsterdam that we can use later on if

00:49:05,940 --> 00:49:11,010
people wanna want to play with it we do

00:49:08,640 --> 00:49:12,240
have some idea for tutorial a little bit

00:49:11,010 --> 00:49:13,680
further down in this deck where we

00:49:12,240 --> 00:49:15,570
actually connect to a remote access VPN

00:49:13,680 --> 00:49:17,010
in Amsterdam so that everybody can use

00:49:15,570 --> 00:49:21,710
because for number IFI you can go to the

00:49:17,010 --> 00:49:24,090
outside world so how does it look like

00:49:21,710 --> 00:49:26,180
the service is called IPSec so you

00:49:24,090 --> 00:49:30,180
enable the surface you start the service

00:49:26,180 --> 00:49:32,310
if you haven't added an auto equals line

00:49:30,180 --> 00:49:33,930
and you can or if you just added the

00:49:32,310 --> 00:49:35,340
config file but además already running

00:49:33,930 --> 00:49:37,860
you can manually add to connect my

00:49:35,340 --> 00:49:40,080
sleeping by tapping IPSec Auto - - hat

00:49:37,860 --> 00:49:44,190
the CD Connect is being added and then

00:49:40,080 --> 00:49:45,600
you can do - - up to showed up and I cut

00:49:44,190 --> 00:49:47,130
a little bit of input from the slide if

00:49:45,600 --> 00:49:50,550
you'll do this you see a few more extra

00:49:47,130 --> 00:49:54,990
lines the last line you'll see in this

00:49:50,550 --> 00:49:56,700
case this was none entirely the same as

00:49:54,990 --> 00:49:59,430
the previous slide because she can see

00:49:56,700 --> 00:50:00,420
that says IPSec SAS table established

00:49:59,430 --> 00:50:02,130
tunnel mode is

00:50:00,420 --> 00:50:03,690
/ Nats would actually detected net

00:50:02,130 --> 00:50:06,270
detection because it's actually a

00:50:03,690 --> 00:50:08,610
different example you see the two spine

00:50:06,270 --> 00:50:10,080
numbers so the spine number for the

00:50:08,610 --> 00:50:11,820
lookup that's I mean you talked about

00:50:10,080 --> 00:50:13,860
it's actually per direction so you have

00:50:11,820 --> 00:50:16,500
one spy for the incoming part on one spy

00:50:13,860 --> 00:50:19,200
for the outgoing part so tells you these

00:50:16,500 --> 00:50:22,380
social transfers in this case with a s

00:50:19,200 --> 00:50:25,620
GCM non refers to the integrity

00:50:22,380 --> 00:50:27,570
algorithm so in the older days we had an

00:50:25,620 --> 00:50:31,020
encryption and integrity algorithm so

00:50:27,570 --> 00:50:33,960
you had like Triple DES sha-1 or AES CBC

00:50:31,020 --> 00:50:36,660
shot - but the modern ones we have the a

00:50:33,960 --> 00:50:40,500
a DS the combinatory algorithms that do

00:50:36,660 --> 00:50:43,080
it all at once so TCM ChaCha 20 Pali

00:50:40,500 --> 00:50:45,180
1305 is one pass so you see it as none

00:50:43,080 --> 00:50:48,570
as in there's no separate authentication

00:50:45,180 --> 00:50:51,660
or integrity algorithm and there's some

00:50:48,570 --> 00:50:55,200
net information for net detection and it

00:50:51,660 --> 00:50:58,200
says TPD is active so I'll briefly talk

00:50:55,200 --> 00:51:00,630
about DPD so that peer detection is like

00:50:58,200 --> 00:51:03,480
one of those typical foot bullets like

00:51:00,630 --> 00:51:06,090
when you think it's it's working for you

00:51:03,480 --> 00:51:09,090
it can also work against you so the idea

00:51:06,090 --> 00:51:11,310
is that tunnels can be idle and if

00:51:09,090 --> 00:51:12,630
they're idle that's fine but if you want

00:51:11,310 --> 00:51:14,970
to make sure that the other side is

00:51:12,630 --> 00:51:16,560
still there you can send a DPD packet so

00:51:14,970 --> 00:51:17,820
it's basically a ping over the IKE

00:51:16,560 --> 00:51:21,690
protocol and you get an answer back

00:51:17,820 --> 00:51:23,460
saying you know pong but of course

00:51:21,690 --> 00:51:25,890
people tend to enable this and way to

00:51:23,460 --> 00:51:28,050
two comments so like you dig or like all

00:51:25,890 --> 00:51:29,700
we do financial transactions this tunnel

00:51:28,050 --> 00:51:31,350
could not be done for ten seconds so

00:51:29,700 --> 00:51:33,780
we'll send one of these packets every

00:51:31,350 --> 00:51:35,400
five seconds well the problem is if you

00:51:33,780 --> 00:51:37,920
sent these probes and your tunnel is

00:51:35,400 --> 00:51:39,360
already flaky and by just sending more

00:51:37,920 --> 00:51:40,980
packets you just gonna have more packet

00:51:39,360 --> 00:51:43,470
loss and so your tongs actually going to

00:51:40,980 --> 00:51:45,150
more quickly die because the DPD will

00:51:43,470 --> 00:51:46,680
say well this this endpoint is not here

00:51:45,150 --> 00:51:48,810
because we just lost three packets on

00:51:46,680 --> 00:51:51,120
the three proxies and so that's right

00:51:48,810 --> 00:51:52,650
internally we call these DVDs we accent

00:51:51,120 --> 00:51:54,750
call and make deaths because they often

00:51:52,650 --> 00:51:57,570
they it caused more harm than they do

00:51:54,750 --> 00:52:00,240
good where they are useful is is when

00:51:57,570 --> 00:52:01,860
you have a remote access VPN and so you

00:52:00,240 --> 00:52:03,540
know someone opens their phone and their

00:52:01,860 --> 00:52:05,130
laptop they connect to the VPN and and

00:52:03,540 --> 00:52:07,050
whatever they lose their connectivity

00:52:05,130 --> 00:52:09,570
the laptop closes and they didn't get a

00:52:07,050 --> 00:52:11,490
certain signal and now you're holding on

00:52:09,570 --> 00:52:13,640
to this connection for eight hours or 24

00:52:11,490 --> 00:52:15,680
hours so in that sense

00:52:13,640 --> 00:52:18,440
the server site is useful to you know

00:52:15,680 --> 00:52:20,239
maybe in half an hour maybe an hour say

00:52:18,440 --> 00:52:22,759
it's the other is the other part is

00:52:20,239 --> 00:52:24,730
still there or not but then of course

00:52:22,759 --> 00:52:27,410
it's also additional problems because

00:52:24,730 --> 00:52:29,630
that laptop or phone is likely behind

00:52:27,410 --> 00:52:31,489
net and so if the net mapping is gone

00:52:29,630 --> 00:52:33,499
you actually lose your connection to so

00:52:31,489 --> 00:52:38,059
there's also NAT keepalive so the client

00:52:33,499 --> 00:52:40,730
actually sends for that so so the basics

00:52:38,059 --> 00:52:42,739
are simple but you know when you get

00:52:40,730 --> 00:52:46,309
into real networks and you run into all

00:52:42,739 --> 00:52:47,839
these corner cases and also there's a

00:52:46,309 --> 00:52:50,359
bunch of implementations that did the

00:52:47,839 --> 00:52:52,160
DPD wrong so when you are receiving

00:52:50,359 --> 00:52:54,109
traffic from the other side you're

00:52:52,160 --> 00:52:55,670
supposed to never send a DVD because you

00:52:54,109 --> 00:52:58,130
know that they're there but of course

00:52:55,670 --> 00:52:59,989
that is IPSec traffic that goes into the

00:52:58,130 --> 00:53:02,180
kernel nut and so the user land doesn't

00:52:59,989 --> 00:53:03,680
really know about this and so some

00:53:02,180 --> 00:53:06,140
implementations just sent deputies

00:53:03,680 --> 00:53:07,400
anyway because in well why not we don't

00:53:06,140 --> 00:53:10,160
use the line doesn't know if they're

00:53:07,400 --> 00:53:11,779
there or not so so then so then it

00:53:10,160 --> 00:53:13,279
becomes a really noisy link so even if

00:53:11,779 --> 00:53:14,809
you don't send any traffic use you

00:53:13,279 --> 00:53:19,130
continue to see these deeply packets

00:53:14,809 --> 00:53:21,650
going back and forth so so we always try

00:53:19,130 --> 00:53:23,690
to make the defaults really useful so in

00:53:21,650 --> 00:53:25,609
general don't set any options you you're

00:53:23,690 --> 00:53:26,989
not really familiar with it exactly what

00:53:25,609 --> 00:53:29,170
they do or if you haven't read something

00:53:26,989 --> 00:53:31,279
right you specifically have to enable it

00:53:29,170 --> 00:53:35,029
we really do our best to make the

00:53:31,279 --> 00:53:36,819
default seen for everyone okay so how

00:53:35,029 --> 00:53:40,519
can you see those tunnels actually up

00:53:36,819 --> 00:53:42,079
the easiest way is to use IPSec whack -

00:53:40,519 --> 00:53:43,640
- traffic status so we'll just give you

00:53:42,079 --> 00:53:46,190
a really brief summary saying this is

00:53:43,640 --> 00:53:48,349
your connection type ESP is encrypted

00:53:46,190 --> 00:53:53,239
this is the time it was added to the

00:53:48,349 --> 00:53:55,009
kernel in in epoch and and these are the

00:53:53,239 --> 00:53:57,470
bytes in and out that happened over this

00:53:55,009 --> 00:53:58,730
is a connection and the remote that is

00:53:57,470 --> 00:54:01,910
there and if there's a user password

00:53:58,730 --> 00:54:03,619
authentication in some modes of IQ can

00:54:01,910 --> 00:54:06,829
have that - the username is there as

00:54:03,619 --> 00:54:08,779
well you can of course also look at the

00:54:06,829 --> 00:54:10,489
the criminal state IP XFM state an IP

00:54:08,779 --> 00:54:12,170
access on policy but you'll get a few

00:54:10,489 --> 00:54:13,519
screens of data you'll have to look

00:54:12,170 --> 00:54:16,819
through

00:54:13,519 --> 00:54:19,099
IPSec status it gives you a many screens

00:54:16,819 --> 00:54:21,890
of information it used to be the

00:54:19,099 --> 00:54:23,869
internal developer only status dump of

00:54:21,890 --> 00:54:25,550
the daemon and then people started using

00:54:23,869 --> 00:54:27,500
it and so it slowly turn

00:54:25,550 --> 00:54:31,660
to an API in our sort of committed to it

00:54:27,500 --> 00:54:33,740
I apologize for the for the format

00:54:31,660 --> 00:54:36,500
inconsistencies all over the output

00:54:33,740 --> 00:54:38,270
please don't use it if you cannot if you

00:54:36,500 --> 00:54:41,690
can avoid it we promise you'll make

00:54:38,270 --> 00:54:44,270
something nice d-bus soon I'm you can

00:54:41,690 --> 00:54:46,250
also use TCP dump this is the most

00:54:44,270 --> 00:54:47,960
common line remember that you mostly

00:54:46,250 --> 00:54:49,130
you're looking at the ESP packets but if

00:54:47,960 --> 00:54:53,450
you're also looking at the the IKE

00:54:49,130 --> 00:54:56,120
packets and that's port 540 500 and if

00:54:53,450 --> 00:54:58,640
you're doing ESP and capsulated in UDP

00:54:56,120 --> 00:55:01,760
that also goes over port 4500 UDP so

00:54:58,640 --> 00:55:05,510
this line catches all of that so the IKE

00:55:01,760 --> 00:55:08,300
protocol runs of port 500 so in the

00:55:05,510 --> 00:55:10,210
early 2000s when net were coming around

00:55:08,300 --> 00:55:12,740
and never going away again

00:55:10,210 --> 00:55:15,860
people were trying to be helpful for

00:55:12,740 --> 00:55:18,380
IPSec nodes behind NAT so they did some

00:55:15,860 --> 00:55:20,810
extra manipulation of the of the packet

00:55:18,380 --> 00:55:22,760
it would rewrite IP addresses in the end

00:55:20,810 --> 00:55:26,140
it just screwed things up more than it

00:55:22,760 --> 00:55:28,700
helped so what happens now is that I

00:55:26,140 --> 00:55:30,170
when it detects that there is not

00:55:28,700 --> 00:55:32,410
involved it just moves to a different

00:55:30,170 --> 00:55:34,220
port so that all those all helper

00:55:32,410 --> 00:55:37,880
implementations that are out there do

00:55:34,220 --> 00:55:40,130
not mess with our packets anymore so

00:55:37,880 --> 00:55:43,100
that's why I guess actually on both port

00:55:40,130 --> 00:55:44,660
540 500 you are now a lot since I agree

00:55:43,100 --> 00:55:47,120
to you're allowed to just start on port

00:55:44,660 --> 00:55:52,670
4500 and just forget about 500 it's a

00:55:47,120 --> 00:55:55,630
artifact of the past and so this is how

00:55:52,670 --> 00:55:59,600
it looks like was already shown before

00:55:55,630 --> 00:56:01,160
all this over this so what is a

00:55:59,600 --> 00:56:02,750
site-to-site VPN it's basically two

00:56:01,160 --> 00:56:04,100
gateways and they both have a subnet

00:56:02,750 --> 00:56:07,340
behind it then you want to connect them

00:56:04,100 --> 00:56:09,080
so is that now so much harder no it's

00:56:07,340 --> 00:56:10,880
exactly it's the exact same thing as a

00:56:09,080 --> 00:56:13,070
host host connection except there's two

00:56:10,880 --> 00:56:14,750
new lines here left subnet equals

00:56:13,070 --> 00:56:18,410
whatever and right subnet equals

00:56:14,750 --> 00:56:19,880
whatever and that's it so host the host

00:56:18,410 --> 00:56:23,450
and site-to-site are the exact same

00:56:19,880 --> 00:56:25,130
simple configuration if you want more

00:56:23,450 --> 00:56:27,020
than one subnet you can define them with

00:56:25,130 --> 00:56:30,380
the left subnets and right subnets

00:56:27,020 --> 00:56:32,600
keyword of course for those one it makes

00:56:30,380 --> 00:56:35,480
v4 and v6 yeah you do have to split up

00:56:32,600 --> 00:56:37,490
two connections I'm sorry because these

00:56:35,480 --> 00:56:37,770
are either in v4 or fee six months so

00:56:37,490 --> 00:56:41,640
you have

00:56:37,770 --> 00:56:43,110
to create two connections then and the

00:56:41,640 --> 00:56:46,160
same for if you do four and six or six

00:56:43,110 --> 00:56:49,440
and four you have to separate them out

00:56:46,160 --> 00:56:51,090
so typical remote access network you

00:56:49,440 --> 00:56:52,740
know it's our phone in our laptop we run

00:56:51,090 --> 00:56:54,810
a VPN we don't trust the local Wi-Fi we

00:56:52,740 --> 00:56:56,640
just own a VPN to a trusted place and we

00:56:54,810 --> 00:56:58,830
want to send all the traffic from there

00:56:56,640 --> 00:57:00,810
and the VPN server can either give you a

00:56:58,830 --> 00:57:02,340
private or public IP address if it gives

00:57:00,810 --> 00:57:07,380
you a private one it will nad it and

00:57:02,340 --> 00:57:10,530
send out so we I just had a did a test

00:57:07,380 --> 00:57:14,160
server for this so we can actually use

00:57:10,530 --> 00:57:17,490
that so feel free to go to net deaf

00:57:14,160 --> 00:57:19,110
don't knowit's dot CA you'll see a link

00:57:17,490 --> 00:57:21,950
where it is a bunch of pkcs12

00:57:19,110 --> 00:57:25,590
certificates feel free to download one

00:57:21,950 --> 00:57:27,030
and the password is fubar on it because

00:57:25,590 --> 00:57:30,330
there it has have a password for the

00:57:27,030 --> 00:57:31,770
private key so this is how a connection

00:57:30,330 --> 00:57:34,680
like that would work would would look

00:57:31,770 --> 00:57:36,390
like it's again left this percentage

00:57:34,680 --> 00:57:38,400
default route in this case we don't

00:57:36,390 --> 00:57:40,110
specify or make up our own ID we just

00:57:38,400 --> 00:57:43,470
say take it from the certificate so left

00:57:40,110 --> 00:57:44,910
ID is percentage from cert for the RSA

00:57:43,470 --> 00:57:46,710
key we basically say take it from a

00:57:44,910 --> 00:57:48,180
service Val and it's a default option I

00:57:46,710 --> 00:57:49,680
just put it in here for clarification

00:57:48,180 --> 00:57:53,070
but you normally don't have to specify

00:57:49,680 --> 00:57:54,930
it left mode CFG client is yes is

00:57:53,070 --> 00:57:56,250
basically saying yes I know I'm a client

00:57:54,930 --> 00:57:58,080
and the server can give me some

00:57:56,250 --> 00:58:01,800
configuration information so like that

00:57:58,080 --> 00:58:03,840
domain name DNS login banner that your

00:58:01,800 --> 00:58:07,560
lawyers and sister on the server all

00:58:03,840 --> 00:58:10,620
these things you can configure again for

00:58:07,560 --> 00:58:13,020
right and right ID usually for for

00:58:10,620 --> 00:58:15,600
machines publicly on the internet we

00:58:13,020 --> 00:58:17,610
don't use the certificate CN entry at

00:58:15,600 --> 00:58:18,720
all we just use a subject alt name that

00:58:17,610 --> 00:58:21,450
actually has a fully qualified domain

00:58:18,720 --> 00:58:23,820
name in it so then you tend to specify

00:58:21,450 --> 00:58:25,920
that as well as the right ID that allows

00:58:23,820 --> 00:58:27,240
you by not using also not using IP

00:58:25,920 --> 00:58:29,640
address you can have multiple servers

00:58:27,240 --> 00:58:31,560
with the same identity and clients can

00:58:29,640 --> 00:58:37,290
pick a different server depending on

00:58:31,560 --> 00:58:37,950
their DNS lookups narrowing is yes means

00:58:37,290 --> 00:58:40,020
that

00:58:37,950 --> 00:58:41,940
inves inside feet to what you can

00:58:40,020 --> 00:58:44,220
actually is you can ask for tunnel zero

00:58:41,940 --> 00:58:45,480
zero two zero zero and then the server

00:58:44,220 --> 00:58:47,160
will tell you well I'm not willing to

00:58:45,480 --> 00:58:49,710
give that but I'll give you one two

00:58:47,160 --> 00:58:51,609
three four two zero zero and then that

00:58:49,710 --> 00:58:54,140
becomes your IP address

00:58:51,609 --> 00:58:57,679
so it's it's it's a way of basically

00:58:54,140 --> 00:58:59,419
sending an one or more IP addresses and

00:58:57,679 --> 00:59:00,799
and you can actually do this multiple

00:58:59,419 --> 00:59:03,739
time so if you got multiple site-to-site

00:59:00,799 --> 00:59:05,269
VPN you can also have them narrow down

00:59:03,739 --> 00:59:07,519
so you can you can configure one

00:59:05,269 --> 00:59:09,949
connection that covers your one site

00:59:07,519 --> 00:59:12,259
your one sub-material subnet but then

00:59:09,949 --> 00:59:15,799
you can negotiate separate IPSec tunnels

00:59:12,259 --> 00:59:19,759
for each IP flow if you wanted to using

00:59:15,799 --> 00:59:22,489
narrowing mobile I guess yes that allows

00:59:19,759 --> 00:59:24,499
us to change the the transport point so

00:59:22,489 --> 00:59:26,839
we have the gateways and we've got the

00:59:24,499 --> 00:59:29,599
subnets behind it but sometimes when

00:59:26,839 --> 00:59:32,059
you're on LTE you switch to Wi-Fi or

00:59:29,599 --> 00:59:33,199
vice versa your IP address changes you

00:59:32,059 --> 00:59:34,519
don't want to tear down the tunnels

00:59:33,199 --> 00:59:37,549
start a new one so what you can actually

00:59:34,519 --> 00:59:40,159
tell the other end is hey I'm now

00:59:37,549 --> 00:59:41,989
switched you know so they like when your

00:59:40,159 --> 00:59:43,999
iPhone or your Android phone goes to

00:59:41,989 --> 00:59:47,419
sleep and it wakes up it will send one

00:59:43,999 --> 00:59:49,519
of these probes it says hey I'm here now

00:59:47,419 --> 00:59:51,589
maybe the net mapping has changed maybe

00:59:49,519 --> 00:59:54,650
my IP address has changed but this is my

00:59:51,589 --> 00:59:56,719
new public IP address that you can reach

00:59:54,650 --> 00:59:58,759
me on and then the server will update

00:59:56,719 --> 01:00:01,189
that and so I need any further packets

00:59:58,759 --> 01:00:03,349
over the IPSec tunnel will actually be

01:00:01,189 --> 01:00:05,150
centered at to that new IP address so

01:00:03,349 --> 01:00:09,019
this is sort of you know making roaming

01:00:05,150 --> 01:00:11,150
much more easier so this configuration

01:00:09,019 --> 01:00:13,249
file is also on a test server so you can

01:00:11,150 --> 01:00:15,049
just grab a copy change the left search

01:00:13,249 --> 01:00:19,219
entry to the certificate you grabbed as

01:00:15,049 --> 01:00:20,900
well and then you can try it out if you

01:00:19,219 --> 01:00:22,909
run it I protect our data shop you'll

01:00:20,900 --> 01:00:27,079
see something like this you'll see you

01:00:22,909 --> 01:00:29,630
get a I P address and a range of 164 I

01:00:27,079 --> 01:00:30,919
tend to use that range myself I guess I

01:00:29,630 --> 01:00:32,689
shouldn't have shared that secret

01:00:30,919 --> 01:00:35,419
because now everybody will start using

01:00:32,689 --> 01:00:38,179
this but normally if you if you have

01:00:35,419 --> 01:00:39,919
like 10/8 on your VPN server that you

01:00:38,179 --> 01:00:41,659
hand out addresses from but your local

01:00:39,919 --> 01:00:43,309
Wi-Fi where your client is on it's also

01:00:41,659 --> 01:00:47,539
in 10/8 you get this weird thing like

01:00:43,309 --> 01:00:49,189
are you sure we're you know 10.1.1.1

01:00:47,539 --> 01:00:50,749
lives is it locally at your Wi-Fi or

01:00:49,189 --> 01:00:52,659
does it happen to be the mail server on

01:00:50,749 --> 01:00:56,209
the other side of your VPN tunnel

01:00:52,659 --> 01:00:58,099
if you pick a 164 it's typically used

01:00:56,209 --> 01:01:00,140
it's actually the range for

01:00:58,099 --> 01:01:01,609
carrier-grade NAT which is never ever

01:01:00,140 --> 01:01:02,840
supposed to be visible to use an

01:01:01,609 --> 01:01:04,130
endpoint so

01:01:02,840 --> 01:01:10,880
you're free to use it and it should

01:01:04,130 --> 01:01:13,280
never clash so we can go back to doing

01:01:10,880 --> 01:01:15,080
that just for the curious this is the

01:01:13,280 --> 01:01:19,010
server-side version of that same

01:01:15,080 --> 01:01:21,230
connection you'll see in this case I use

01:01:19,010 --> 01:01:23,870
left for the server side the subnet is

01:01:21,230 --> 01:01:25,760
zero zero the right is an address pool

01:01:23,870 --> 01:01:29,360
so there's an address pool where I where

01:01:25,760 --> 01:01:31,900
we pull up here dresses from and we sent

01:01:29,360 --> 01:01:35,240
to name servers and we send to domains

01:01:31,900 --> 01:01:37,220
and we use mobilgas all you can see that

01:01:35,240 --> 01:01:38,990
it says auto equals @ because we don't

01:01:37,220 --> 01:01:41,090
we cannot initiate right we don't know

01:01:38,990 --> 01:01:42,860
where you're roaming devices are so

01:01:41,090 --> 01:01:45,920
we'll just wait for them to to connect

01:01:42,860 --> 01:01:47,570
to us and rekey is no means also because

01:01:45,920 --> 01:01:50,390
we don't want to initiate to other IP

01:01:47,570 --> 01:01:52,880
addresses where the client might no

01:01:50,390 --> 01:01:54,440
longer be we say we key is no it's up to

01:01:52,880 --> 01:02:01,970
the client to say yeah I'm still here I

01:01:54,440 --> 01:02:04,250
want to renew my tunnel so two people on

01:02:01,970 --> 01:02:06,460
it try this out themselves now or do you

01:02:04,250 --> 01:02:13,090
feel like you still want to listen more

01:02:06,460 --> 01:02:15,170
to other types of configurations okay

01:02:13,090 --> 01:02:20,090
you can do this on the background while

01:02:15,170 --> 01:02:23,030
I talk about other things you want so so

01:02:20,090 --> 01:02:24,560
what we really liked us as the original

01:02:23,030 --> 01:02:26,780
free strong project that's not a libras

01:02:24,560 --> 01:02:28,220
own project is opportunistic IPSec we

01:02:26,780 --> 01:02:30,230
had this goal of encrypting the entire

01:02:28,220 --> 01:02:31,820
internet with IPSec so that you know we

01:02:30,230 --> 01:02:33,980
wouldn't run into all this plain text

01:02:31,820 --> 01:02:36,020
everywhere but of course it's also

01:02:33,980 --> 01:02:37,880
useful useful for the enterprise network

01:02:36,020 --> 01:02:39,790
you want to do a mesh network encryption

01:02:37,880 --> 01:02:43,310
like especially after the whole Snowden

01:02:39,790 --> 01:02:45,080
the backups of where they are stripping

01:02:43,310 --> 01:02:46,850
things out and you know turns out your

01:02:45,080 --> 01:02:48,440
MPLS connections even though they're

01:02:46,850 --> 01:02:50,510
private and should be secure people have

01:02:48,440 --> 01:02:52,760
access to it so you can either build

01:02:50,510 --> 01:02:54,620
these giant IPSec gateways where you

01:02:52,760 --> 01:02:57,080
connect one site to another site and if

01:02:54,620 --> 01:02:58,550
these sites are really big then you have

01:02:57,080 --> 01:03:00,590
to have really really powerful machines

01:02:58,550 --> 01:03:02,420
so a much nicer way of doing this would

01:03:00,590 --> 01:03:04,340
be to just have all your notes to

01:03:02,420 --> 01:03:07,100
encryption to all your other nodes in a

01:03:04,340 --> 01:03:08,630
mesh but of course you don't want if you

01:03:07,100 --> 01:03:10,430
have a thousand nodes you don't want to

01:03:08,630 --> 01:03:12,620
when you add the you know a thousand

01:03:10,430 --> 01:03:14,240
first node you don't want to have to

01:03:12,620 --> 01:03:15,230
change the thousand nodes configuration

01:03:14,240 --> 01:03:17,240
to talk to this thing

01:03:15,230 --> 01:03:19,310
so you want that one configuration that

01:03:17,240 --> 01:03:21,290
works and whenever you add a note you

01:03:19,310 --> 01:03:25,160
know it will automatically work inside

01:03:21,290 --> 01:03:26,960
that inside that machine corruption so

01:03:25,160 --> 01:03:28,190
you can do that based on exorbitant

01:03:26,960 --> 01:03:29,900
certificates you can do it based on

01:03:28,190 --> 01:03:32,930
public keys or all public keys by

01:03:29,900 --> 01:03:35,180
placing them in DNS SEC and they can be

01:03:32,930 --> 01:03:36,920
triggered either by by a packet like we

01:03:35,180 --> 01:03:38,960
talked about before and it can also be

01:03:36,920 --> 01:03:41,869
triggered by DNS lookup we have a neat

01:03:38,960 --> 01:03:43,369
way that I'll talk about in a second

01:03:41,869 --> 01:03:47,140
you can also use less encrypt

01:03:43,369 --> 01:03:49,340
certificate if you want in this case for

01:03:47,140 --> 01:03:50,750
for the enterprise encryption you want

01:03:49,340 --> 01:03:52,340
mutual authentication because you

01:03:50,750 --> 01:03:54,410
actually will only want authenticated

01:03:52,340 --> 01:03:56,660
encryption if you want to do this sort

01:03:54,410 --> 01:03:58,580
of internet white and you know just like

01:03:56,660 --> 01:04:00,050
TLS you the client really doesn't want

01:03:58,580 --> 01:04:03,050
to say who they are they just want to be

01:04:00,050 --> 01:04:07,550
remain anonymous so they can they can do

01:04:03,050 --> 01:04:09,710
an unauthenticated so how does this look

01:04:07,550 --> 01:04:11,660
like if you see if you install the Busan

01:04:09,710 --> 01:04:14,680
you'll see this etc' IPSec go deep

01:04:11,660 --> 01:04:18,050
policies directory and they contain

01:04:14,680 --> 01:04:19,700
Network IP range is insider notation so

01:04:18,050 --> 01:04:21,430
in this case you can say you can see

01:04:19,700 --> 01:04:24,619
that there's a connection called

01:04:21,430 --> 01:04:27,520
this group called private or clear which

01:04:24,619 --> 01:04:31,160
has these two ranges that are that are

01:04:27,520 --> 01:04:33,500
mine in Amsterdam and private or clear

01:04:31,160 --> 01:04:35,119
means you can try and talk I P sector

01:04:33,500 --> 01:04:37,190
them but if for some reason that host

01:04:35,119 --> 01:04:39,680
doesn't know how to do IPSec you can

01:04:37,190 --> 01:04:42,020
just do clear text to them will fall

01:04:39,680 --> 01:04:43,790
back to peer text but you know if you

01:04:42,020 --> 01:04:45,770
want to do this enterprise style you can

01:04:43,790 --> 01:04:47,750
use the the private policy which means

01:04:45,770 --> 01:04:49,880
don't ever fall back to create a query

01:04:47,750 --> 01:04:52,369
demand encryption here if there's no

01:04:49,880 --> 01:04:54,830
encryption we don't want you to send

01:04:52,369 --> 01:04:56,150
clear text traffic so you put all the

01:04:54,830 --> 01:04:57,920
ranges that you want there now you can

01:04:56,150 --> 01:05:02,840
put 0/0 in there too if you're

01:04:57,920 --> 01:05:04,609
adventurous services look like so those

01:05:02,840 --> 01:05:06,700
those those group names private

01:05:04,609 --> 01:05:08,990
privately clear private those are

01:05:06,700 --> 01:05:10,490
actually just connections in our

01:05:08,990 --> 01:05:13,430
configuration file so you see here an

01:05:10,490 --> 01:05:15,619
example here it's using certificate it's

01:05:13,430 --> 01:05:17,510
using again left is default route Kathy

01:05:15,619 --> 01:05:19,609
ID from certificate the only new line

01:05:17,510 --> 01:05:21,740
you see here is that there's a bright

01:05:19,609 --> 01:05:24,050
equals percentage opportunistic group

01:05:21,740 --> 01:05:26,990
which is its way of saying oh I have to

01:05:24,050 --> 01:05:28,380
match the after see if the IP address

01:05:26,990 --> 01:05:33,960
comes from this group and if

01:05:28,380 --> 01:05:36,809
and I'll fill in the appearance here so

01:05:33,960 --> 01:05:38,400
this one is because this one is the

01:05:36,809 --> 01:05:39,900
private group and we don't want to leak

01:05:38,400 --> 01:05:41,430
anything what we say is fill your

01:05:39,900 --> 01:05:43,940
shoulders dropped so if this connection

01:05:41,430 --> 01:05:48,390
fills establish drop all the packets and

01:05:43,940 --> 01:05:50,099
negotiation shunt is holt means that so

01:05:48,390 --> 01:05:51,869
when the colonel receives the first

01:05:50,099 --> 01:05:53,279
packet there might also be more packets

01:05:51,869 --> 01:05:55,499
what do you do with those packets while

01:05:53,279 --> 01:05:57,210
the tunnel is being set up so you can

01:05:55,499 --> 01:05:59,640
choose either let them go out and clear

01:05:57,210 --> 01:06:01,559
or you can decide to hold on to them and

01:05:59,640 --> 01:06:03,569
only when a tunnel is up to sent them

01:06:01,559 --> 01:06:05,640
out and hold on to them is not really

01:06:03,569 --> 01:06:06,839
entirely fair because if it's a UDP

01:06:05,640 --> 01:06:07,950
packet it what this guy's dropped

01:06:06,839 --> 01:06:09,499
because it's assumed that the

01:06:07,950 --> 01:06:11,849
application will do the retransmission

01:06:09,499 --> 01:06:13,319
for TCP since that takes way too long

01:06:11,849 --> 01:06:15,569
the colonel actually does a little extra

01:06:13,319 --> 01:06:18,269
work on and holds on to the TCP packet

01:06:15,569 --> 01:06:20,099
and so once it tunnels up it it gets a

01:06:18,269 --> 01:06:24,779
signal and it sends out that previously

01:06:20,099 --> 01:06:26,640
held TCP packet so just the private

01:06:24,779 --> 01:06:27,930
clear ones are the only differences the

01:06:26,640 --> 01:06:36,450
failures and is passed through a

01:06:27,930 --> 01:06:39,299
negotiation shunt this pass through and

01:06:36,450 --> 01:06:41,160
then this is the this is the version

01:06:39,299 --> 01:06:43,019
where we're putting the keys not in

01:06:41,160 --> 01:06:45,690
certificates but this is the one we can

01:06:43,019 --> 01:06:47,549
do natural grass so this is one on your

01:06:45,690 --> 01:06:50,430
VM you could configure and you could do

01:06:47,549 --> 01:06:52,529
this to two servers that support this so

01:06:50,430 --> 01:06:54,150
oh we don't leave us on Orcas one of

01:06:52,529 --> 01:06:56,130
these servers that has supported this so

01:06:54,150 --> 01:07:02,099
you can grab this configuration file

01:06:56,130 --> 01:07:05,069
install it and if you have unbound it's

01:07:02,099 --> 01:07:08,009
a DNS server that actually has hooks in

01:07:05,069 --> 01:07:10,529
it so it has an IPSec module so so what

01:07:08,009 --> 01:07:13,200
we do is when an application like

01:07:10,529 --> 01:07:16,499
Firefox looks ups a weed of leaves oh no

01:07:13,200 --> 01:07:18,809
dork the unbound DNS server gets two

01:07:16,499 --> 01:07:21,150
requests instead of only asking for the

01:07:18,809 --> 01:07:24,269
a and quad a record it will also ask for

01:07:21,150 --> 01:07:26,579
an IPSec key record it will wait with

01:07:24,269 --> 01:07:28,049
returning the a records to the

01:07:26,579 --> 01:07:30,479
application until it knows what the

01:07:28,049 --> 01:07:32,729
answers to the IPSec key record if it

01:07:30,479 --> 01:07:34,859
found an IPSec key record it will then

01:07:32,729 --> 01:07:37,019
take the name the IP addresses and a

01:07:34,859 --> 01:07:39,329
public key and gives it to the ID demons

01:07:37,019 --> 01:07:41,190
as here set up a tunnel it will set up

01:07:39,329 --> 01:07:43,050
an opportunistic tunnel to

01:07:41,190 --> 01:07:44,369
to the remote endpoint and when it's

01:07:43,050 --> 01:07:46,710
done it will signal that yeah all's

01:07:44,369 --> 01:07:48,750
clear tunnels in place at that point the

01:07:46,710 --> 01:07:50,609
DNS server will return the a record

01:07:48,750 --> 01:07:53,010
sunaquot a record to the application put

01:07:50,609 --> 01:07:54,750
them in a local cache Firefox gets them

01:07:53,010 --> 01:07:59,730
Firefox and a clear tax packet but now

01:07:54,750 --> 01:08:01,410
it's already encrypted by abusing so

01:07:59,730 --> 01:08:04,470
that's also demo server that's available

01:08:01,410 --> 01:08:05,970
for us to try and the the configuration

01:08:04,470 --> 01:08:08,310
files the data also on the net dev

01:08:05,970 --> 01:08:11,790
server there's a little trick here

01:08:08,310 --> 01:08:14,609
because there's not involved and and if

01:08:11,790 --> 01:08:16,410
if since you cannot set up a tunnel to

01:08:14,609 --> 01:08:17,910
anything but your own IP address you've

01:08:16,410 --> 01:08:19,529
got this weird thing where if you're

01:08:17,910 --> 01:08:23,370
behind net you cannot connect to a

01:08:19,529 --> 01:08:25,230
public server and take 10.1.1.1 that you

01:08:23,370 --> 01:08:27,540
happen to be given from the local Wi-Fi

01:08:25,230 --> 01:08:29,029
because somebody else in another side of

01:08:27,540 --> 01:08:32,759
the world can also have that up here as

01:08:29,029 --> 01:08:35,040
so in the case that NAT is detected for

01:08:32,759 --> 01:08:38,390
the opportunistic IPSec case the serf

01:08:35,040 --> 01:08:43,620
actually gives you again an IP address

01:08:38,390 --> 01:08:45,719
in this case you can you can see it's

01:08:43,620 --> 01:08:50,069
the top entry actually they have 100 dot

01:08:45,719 --> 01:08:51,870
64 to 0 to entry it will it will use

01:08:50,069 --> 01:08:54,270
that for the actual IPSec connection but

01:08:51,870 --> 01:08:57,870
then it will use the one from your Wi-Fi

01:08:54,270 --> 01:09:01,080
as an additional policy and it will get

01:08:57,870 --> 01:09:03,239
translated with an IP table rules to

01:09:01,080 --> 01:09:05,160
match so so it's basically what we're

01:09:03,239 --> 01:09:07,890
doing is we're doing that inside the

01:09:05,160 --> 01:09:10,230
IPSec stack just to make sure that you

01:09:07,890 --> 01:09:11,790
know we we don't have this problem where

01:09:10,230 --> 01:09:17,969
you're on a private IP that's use of

01:09:11,790 --> 01:09:22,310
other people and so at that point I say

01:09:17,969 --> 01:09:22,310
we are ready to do tutorial work

01:09:36,560 --> 01:09:44,040
so so I also have for some people

01:09:40,560 --> 01:09:48,599
there's also for surfers called net deaf

01:09:44,040 --> 01:09:51,480
one two three four of knowit's @ca with

01:09:48,599 --> 01:09:53,849
the password net dev 0x 12

01:09:51,480 --> 01:09:55,860
you can log into and play with but

01:09:53,849 --> 01:10:04,349
obviously I don't have a VM device for

01:09:55,860 --> 01:10:05,790
everyone so do people just want to test

01:10:04,349 --> 01:10:21,360
this out themselves do people just want

01:10:05,790 --> 01:10:23,159
to ask questions right so the question

01:10:21,360 --> 01:10:25,920
is how does the ESP traffic go out over

01:10:23,159 --> 01:10:28,079
net so it's encapsulated in a UDP packet

01:10:25,920 --> 01:10:31,260
so it's literally just you take the ESP

01:10:28,079 --> 01:10:33,750
packet put it as payload of a UDP port

01:10:31,260 --> 01:10:34,650
4500 packet and you send it and the

01:10:33,750 --> 01:10:38,219
colonel

01:10:34,650 --> 01:10:40,770
the text is strips out the header then

01:10:38,219 --> 01:10:43,409
realizes it's just an ESP packet and

01:10:40,770 --> 01:10:51,210
decrypts it and sends it on into the

01:10:43,409 --> 01:10:53,610
stack okay well in that case I will I

01:10:51,210 --> 01:11:00,270
guess I will do a little demoing of

01:10:53,610 --> 01:11:04,369
things and you can pick up you can do

01:11:00,270 --> 01:11:04,369
your own server whenever you want so

01:11:04,880 --> 01:11:13,020
this is that congressional shout net F

01:11:07,650 --> 01:11:15,449
dot no SCA so what you can do if you go

01:11:13,020 --> 01:11:18,449
to this server you'll see this app

01:11:15,449 --> 01:11:20,869
pkcs12 directory so if you go there you

01:11:18,449 --> 01:11:25,199
can just grab one of these certificates

01:11:20,869 --> 01:11:27,060
or if you have an Apple device you can

01:11:25,199 --> 01:11:28,380
grab one of these mobile configs

01:11:27,060 --> 01:11:30,119
that is basically everything configured

01:11:28,380 --> 01:11:32,340
for you it comes with a certificate and

01:11:30,119 --> 01:11:37,260
it comes with the configuration embedded

01:11:32,340 --> 01:11:39,179
in it this is an XML file you don't use

01:11:37,260 --> 01:11:42,690
a - and you can grab a copy of the

01:11:39,179 --> 01:11:45,059
client conflict here if you want so I

01:11:42,690 --> 01:11:46,889
already have this so if I do all so

01:11:45,059 --> 01:11:49,610
first let's see what's what my

01:11:46,889 --> 01:11:49,610
appearances

01:11:50,340 --> 01:11:54,880
so if you play a lot with tunnels and

01:11:53,530 --> 01:11:57,519
you want to look at the stability of the

01:11:54,880 --> 01:11:58,989
tunnels one thing that really annoy it

01:11:57,519 --> 01:12:00,820
does is that the way

01:11:58,989 --> 01:12:03,070
so there's many sites that tell you what

01:12:00,820 --> 01:12:06,849
your Epirus is so in this case my pers

01:12:03,070 --> 01:12:08,590
is at 207 96 to 2000 101 but then I

01:12:06,849 --> 01:12:10,479
would be staring at my phone for the

01:12:08,590 --> 01:12:12,909
next hour to see if it failed or not so

01:12:10,479 --> 01:12:14,559
finally I wrote a page that just reloads

01:12:12,909 --> 01:12:16,179
every 10 seconds and if your IP address

01:12:14,559 --> 01:12:17,409
changes it will tell you the times time

01:12:16,179 --> 01:12:18,880
going to change and it will tell you the

01:12:17,409 --> 01:12:20,979
new IP address so you know when a tunnel

01:12:18,880 --> 01:12:22,929
fails so I can just go have a coffee and

01:12:20,979 --> 01:12:29,260
come back an hour late and see that my

01:12:22,929 --> 01:12:33,070
tunnel failed after 15 minutes so if I

01:12:29,260 --> 01:12:34,570
add the connection and bring it up I see

01:12:33,070 --> 01:12:39,909
that this little more debug info here

01:12:34,570 --> 01:12:42,959
but if I now go back to this page then

01:12:39,909 --> 01:12:42,959
within 10 seconds

01:12:49,550 --> 01:12:56,780
hmm it's funny they didn't do it there's

01:12:54,530 --> 01:12:58,610
something wrong with my tunnel because

01:12:56,780 --> 01:13:02,080
it's a demo I just tried this before all

01:12:58,610 --> 01:13:02,080
of you guys people came into the room

01:13:05,200 --> 01:13:14,350
probably just were fined yeah we see

01:13:11,180 --> 01:13:14,350
Packers going through it so

01:13:22,920 --> 01:13:27,810
ah there we go my browser Cassius if I

01:13:25,290 --> 01:13:28,890
did a shift reload and change it now

01:13:27,810 --> 01:13:31,410
that's weird

01:13:28,890 --> 01:13:33,630
so now you see am i Peters actually 193

01:13:31,410 --> 01:13:36,540
1 or 10 1 5 7 or 5 - that's the one I am

01:13:33,630 --> 01:13:38,880
that's the one for my piece from the net

01:13:36,540 --> 01:13:40,320
observer it's the public appearance of

01:13:38,880 --> 01:13:47,910
the net I've surface so even though I

01:13:40,320 --> 01:13:54,210
have I have to at 164 13 - is not it on

01:13:47,910 --> 01:13:57,260
the surface of you look on a surfer

01:13:54,210 --> 01:13:57,260
you'll see we just have some

01:14:08,660 --> 01:14:12,080
it's just a simple nodding rule it says

01:14:10,460 --> 01:14:15,560
everything from the ID from the address

01:14:12,080 --> 01:14:19,700
pool just not to my own my own IP

01:14:15,560 --> 01:14:24,670
address so this is just a remote access

01:14:19,700 --> 01:14:27,500
server if you look at the resource con

01:14:24,670 --> 01:14:32,120
so so in this case I detected I was

01:14:27,500 --> 01:14:33,680
running the unbound name server and so

01:14:32,120 --> 01:14:35,120
it didn't change my visa photo so if

01:14:33,680 --> 01:14:37,400
you're not running your name server it

01:14:35,120 --> 01:14:39,140
will actually change update your result

01:14:37,400 --> 01:14:40,850
count based on the name server that the

01:14:39,140 --> 01:14:43,850
VPN gave you and when you tear down a

01:14:40,850 --> 01:14:46,700
tunnel it will replace the old it series

01:14:43,850 --> 01:14:56,270
of that comes back in this case though

01:14:46,700 --> 01:14:59,780
because it detected unbound it and you

01:14:56,270 --> 01:15:01,940
see here it it gave to forwarder rules

01:14:59,780 --> 01:15:03,500
for my DNS server it said everything for

01:15:01,940 --> 01:15:05,360
no one cell CA you should send to this

01:15:03,500 --> 01:15:06,650
IP address and everything for right comm

01:15:05,360 --> 01:15:08,960
you should sent to those two IP

01:15:06,650 --> 01:15:11,030
addresses I'm going to bring it on down

01:15:08,960 --> 01:15:13,100
those entries will be removed again the

01:15:11,030 --> 01:15:15,380
cache will be flushed so that old old

01:15:13,100 --> 01:15:17,480
entries won't conflict so if you got

01:15:15,380 --> 01:15:19,820
like for instance for Red Hat we have

01:15:17,480 --> 01:15:21,470
Bugzilla treated comm it actually has a

01:15:19,820 --> 01:15:23,390
public appearance and a private IP

01:15:21,470 --> 01:15:25,670
address so once my VPN is up it goes to

01:15:23,390 --> 01:15:27,830
the private IP address once my VPN is

01:15:25,670 --> 01:15:29,900
down because it's as a cache flush the

01:15:27,830 --> 01:15:31,760
private IP address is flushed and so it

01:15:29,900 --> 01:15:33,860
will brief etch the public IP address

01:15:31,760 --> 01:15:35,800
from the public dns server so it will

01:15:33,860 --> 01:15:38,930
still work

01:15:35,800 --> 01:15:40,760
ok so that was one so now let's do the

01:15:38,930 --> 01:15:47,260
other test natsu the opportunistic

01:15:40,760 --> 01:15:47,260
encryption so

01:15:50,260 --> 01:15:55,510
I'll just move this on the side I will

01:15:57,460 --> 01:16:02,000
look this one in place and just to show

01:16:01,730 --> 01:16:03,770
you

01:16:02,000 --> 01:16:13,420
I've got like a private or clear one

01:16:03,770 --> 01:16:13,420
there my route has been cleaned up

01:16:17,409 --> 01:16:22,330
and let me double check that my

01:16:20,050 --> 01:16:23,949
resources confines to my local name

01:16:22,330 --> 01:16:29,710
server so that the trigger will work and

01:16:23,949 --> 01:16:32,320
just to check what I have the private

01:16:29,710 --> 01:16:35,650
one is empty and a private or clear one

01:16:32,320 --> 01:16:39,130
you can see it has I just put this one

01:16:35,650 --> 01:16:43,449
server in there for now and that is the

01:16:39,130 --> 01:16:45,010
the surface so if I go back here oh now

01:16:43,449 --> 01:16:48,690
it actually detected my IP address

01:16:45,010 --> 01:16:48,690
changed because I shut down my tunnel

01:16:49,199 --> 01:16:59,830
but if I now go to oh you don't leave

01:16:56,469 --> 01:17:03,639
it's on don't work he'll tell me because

01:16:59,830 --> 01:17:04,659
we're not connecting via IPSec this is

01:17:03,639 --> 01:17:06,070
also where you can download the

01:17:04,659 --> 01:17:07,330
configuration files that I'm using right

01:17:06,070 --> 01:17:09,100
now so if you want to do this now or

01:17:07,330 --> 01:17:10,750
later at home and you can just grab

01:17:09,100 --> 01:17:14,489
these congregation files here there's

01:17:10,750 --> 01:17:18,520
one for unbound and there's one for the

01:17:14,489 --> 01:17:20,199
Libre song so just to show you what the

01:17:18,520 --> 01:17:23,310
only specific things in the unbound

01:17:20,199 --> 01:17:26,139
configuration that are not default is

01:17:23,310 --> 01:17:30,420
you see the module convict has the IPSec

01:17:26,139 --> 01:17:33,310
module loaded the IPSec mode is enabled

01:17:30,420 --> 01:17:35,050
and then it specifies the hooks and so

01:17:33,310 --> 01:17:39,480
this is the hook that actually

01:17:35,050 --> 01:17:44,889
communicates between unbound and demon

01:17:39,480 --> 01:17:47,800
so we can also show it is currently no

01:17:44,889 --> 01:17:53,610
tunnel up and so now when I do a lookup

01:17:47,800 --> 01:17:57,010
for like oh we don't leave it on a dark

01:17:53,610 --> 01:18:00,389
it that was fast it probably did not do

01:17:57,010 --> 01:18:00,389
what I wanted haha

01:18:05,229 --> 01:18:16,300
I love demos might have it oh look we

01:18:14,769 --> 01:18:20,650
got a shunt route that basically it

01:18:16,300 --> 01:18:22,239
failed so let's do a good cry grab off

01:18:20,650 --> 01:18:29,229
the log so probably happen is it to fail

01:18:22,239 --> 01:18:34,380
to actually do this properly uh I know

01:18:29,229 --> 01:18:34,380
yes so let's

01:18:46,110 --> 01:18:50,910
so normally Pluto doesn't allow anyone

01:18:48,480 --> 01:18:52,680
else to talk to its soccer to send to

01:18:50,910 --> 01:18:54,780
compete configure itself but now the

01:18:52,680 --> 01:18:57,450
unbound demon actually has to configure

01:18:54,780 --> 01:19:00,120
reconfigured so we're working on adding

01:18:57,450 --> 01:19:01,740
a proper group and making this a little

01:19:00,120 --> 01:19:05,190
more transparent so now it just gave it

01:19:01,740 --> 01:19:07,500
access to the to actually bring up the

01:19:05,190 --> 01:19:14,400
connection so now we can try this again

01:19:07,500 --> 01:19:16,230
ah it's taking a little longer now to

01:19:14,400 --> 01:19:23,580
Dena's failed but that might have just

01:19:16,230 --> 01:19:26,510
been because we lost the packet no we

01:19:23,580 --> 01:19:26,510
didn't even try it

01:19:51,070 --> 01:19:55,140
now it came from the cash of course

01:20:09,309 --> 01:20:12,190
maybe it's this time dad because in the

01:20:10,960 --> 01:20:16,050
end of all the records yet so I'm just

01:20:12,190 --> 01:20:16,050
gonna free low to cash a little bit

01:20:40,030 --> 01:20:47,290
that is funny well if if you guys don't

01:20:45,280 --> 01:20:49,090
have work on your remote access VPN and

01:20:47,290 --> 01:20:53,670
I can also just work on this one for a

01:20:49,090 --> 01:20:53,670
bit um does anybody have any questions

01:20:54,180 --> 01:20:59,470
okay well if you if you're playing with

01:20:56,830 --> 01:21:02,730
your VM and if you want to get some help

01:20:59,470 --> 01:21:02,730
you can ask either one of us

01:21:20,860 --> 01:21:24,960
what you do is once again

01:22:11,809 --> 01:22:17,809
I'm just now trying to do it manually

01:22:13,369 --> 01:22:20,589
and sort of bypassing some of it to see

01:22:17,809 --> 01:22:20,589
which problem is

01:22:26,989 --> 01:22:33,230
so it's still not able to find a key for

01:22:29,570 --> 01:22:36,850
some reason so the unburnt server hook

01:22:33,230 --> 01:22:36,850
is not working properly it looks like

01:23:06,309 --> 01:23:09,809
who python era

01:23:22,450 --> 01:23:26,190
oh I think

01:23:29,460 --> 01:23:32,240
okay

01:23:39,600 --> 01:23:43,160
yes Isaac enough

01:24:24,639 --> 01:24:30,750
so it looks like the unban band has some

01:24:28,150 --> 01:24:34,710
additional issues getting data from

01:24:30,750 --> 01:24:34,710
probably from the Wi-Fi here

01:24:51,859 --> 01:24:57,889
so let's see if we get a if they made a

01:24:54,289 --> 01:25:02,050
t-888 little more cleaned and abroad dns

01:24:57,889 --> 01:25:02,050
port 53 AdWords on his Wi-Fi

01:25:09,760 --> 01:25:14,380
there we go okay so so unbond was just

01:25:12,550 --> 01:25:15,610
failing to get the the other records

01:25:14,380 --> 01:25:18,550
before it got to the one that it

01:25:15,610 --> 01:25:23,380
actually the demos about so now you see

01:25:18,550 --> 01:25:31,810
it actually has set up the sofa now look

01:25:23,380 --> 01:25:35,230
at the locks again so it got the cue

01:25:31,810 --> 01:25:36,370
name here and it said oh yes I found a

01:25:35,230 --> 01:25:40,180
piece of key records

01:25:36,370 --> 01:25:43,450
so let's initiate that so then it added

01:25:40,180 --> 01:25:45,040
the public key to leave respond and then

01:25:43,450 --> 01:25:47,950
it said totally person to initiate

01:25:45,040 --> 01:25:49,480
connection and then it connected we've

01:25:47,950 --> 01:25:51,340
got this internal IP address because it

01:25:49,480 --> 01:25:56,080
detected we are behind NAT so it's doing

01:25:51,340 --> 01:26:01,440
this extra layer of netting but now if

01:25:56,080 --> 01:26:01,440
we go back to this page

01:26:20,639 --> 01:26:24,229
there's still something wrong

01:26:29,229 --> 01:26:34,780
so you see here that we we have some odd

01:26:32,739 --> 01:26:36,010
bytes so we're sending traffic but for

01:26:34,780 --> 01:26:40,050
some reason we're not getting an answer

01:26:36,010 --> 01:26:42,489
back because we're getting zero n bytes

01:26:40,050 --> 01:26:44,489
not a good way in a Volvo while we're at

01:26:42,489 --> 01:26:47,459
it

01:26:44,489 --> 01:26:48,909
checking access ramps that actually a

01:26:47,459 --> 01:26:50,469
good way

01:26:48,909 --> 01:26:52,150
so this basically should show you all

01:26:50,469 --> 01:26:53,380
zeros if there's something non zero then

01:26:52,150 --> 01:26:56,679
usually it means you have a problem

01:26:53,380 --> 01:26:59,110
somewhere though some of these problems

01:26:56,679 --> 01:27:00,550
could be ephemeral like you did the

01:26:59,110 --> 01:27:02,380
state just got the lead it or was a

01:27:00,550 --> 01:27:03,999
reheat and it Maps the wrong state but

01:27:02,380 --> 01:27:09,639
so in this case it does show that we

01:27:03,999 --> 01:27:19,300
have some xrm problem so my guess is

01:27:09,639 --> 01:27:21,369
that our there's some I know that rule

01:27:19,300 --> 01:27:23,699
is there so this is the special rule we

01:27:21,369 --> 01:27:23,699
needed

01:27:34,019 --> 01:27:39,739
so maybe something happened to the other

01:27:36,510 --> 01:27:39,739
side let's see

01:27:42,409 --> 01:27:48,280
I can't connect to it now so bounce

01:27:45,380 --> 01:27:48,280
through another machine

01:28:00,749 --> 01:28:08,539
so let's see what it thinks ooh there's

01:28:05,760 --> 01:28:08,539
three of them

01:28:12,249 --> 01:28:14,909
hmm

01:28:16,700 --> 01:28:21,410
yeah so they were my previous attempts

01:28:18,980 --> 01:28:23,840
where I did get her the negotiation set

01:28:21,410 --> 01:28:25,250
up but then I didn't complete on my end

01:28:23,840 --> 01:28:27,230
right because I had a Mis configuration

01:28:25,250 --> 01:28:28,910
of my end with the unbanned server so it

01:28:27,230 --> 01:28:30,800
so what should happen here though and

01:28:28,910 --> 01:28:32,330
which is which didn't happen here is

01:28:30,800 --> 01:28:35,450
that the older tunnels they should have

01:28:32,330 --> 01:28:38,780
been all wait well you know now we're

01:28:35,450 --> 01:28:40,430
anonymous we so it shouldn't it should

01:28:38,780 --> 01:28:42,740
not have given us the same IP address so

01:28:40,430 --> 01:28:44,240
what is done here it's given us the same

01:28:42,740 --> 01:28:46,400
appearance but because we use

01:28:44,240 --> 01:28:47,840
authentication null it should have

01:28:46,400 --> 01:28:50,300
actually given us a new IP address

01:28:47,840 --> 01:28:53,150
because it cannot tell it like normal

01:28:50,300 --> 01:28:54,440
IPSec when you reconnect you really eat

01:28:53,150 --> 01:28:56,120
and then they can give you the same IP

01:28:54,440 --> 01:28:58,070
address all your open connection silver

01:28:56,120 --> 01:28:59,510
but in this case it should have actually

01:28:58,070 --> 01:29:01,460
given a different appearance because I'm

01:28:59,510 --> 01:29:03,740
authentic ating with auth null so I'm

01:29:01,460 --> 01:29:05,780
anonymous so you can't distinguish a

01:29:03,740 --> 01:29:09,050
second client behind the same NAT from

01:29:05,780 --> 01:29:13,960
the same kind reconnecting so I will

01:29:09,050 --> 01:29:13,960
write that down as a bug but

01:29:18,969 --> 01:29:25,980
oops so now we start at the other side

01:29:22,390 --> 01:29:25,980
of all this that should work now

01:29:36,590 --> 01:29:43,990
and just the other line case okay so

01:30:02,269 --> 01:30:06,670
yes now it's working so now it will show

01:30:07,420 --> 01:30:12,280
right so now it's not suing over IPSec

01:30:13,690 --> 01:30:17,690
so so clearly we need to polish this up

01:30:16,159 --> 01:30:19,730
a bit more before everybody enables this

01:30:17,690 --> 01:30:30,590
by default on their laptops but we're

01:30:19,730 --> 01:30:33,369
getting there okay so let's be around

01:30:30,590 --> 01:30:33,369
and for

01:30:39,219 --> 01:30:42,340
or a future if you want to check your

01:30:40,750 --> 01:30:44,500
email go check your email I'll grab a

01:30:42,340 --> 01:30:46,480
coffee feel free to grab me and ask me

01:30:44,500 --> 01:30:48,820
questions specifically on your setup

01:30:46,480 --> 01:30:50,739
around again I will leave this service

01:30:48,820 --> 01:30:52,239
running for also as so the net depth of

01:30:50,739 --> 01:30:53,560
notes at CA server I'll leave it running

01:30:52,239 --> 01:30:56,050
for a couple of weeks so if you want to

01:30:53,560 --> 01:30:57,190
try this later at home feel free to grab

01:30:56,050 --> 01:30:59,230
one of those certificates under

01:30:57,190 --> 01:30:59,590
connection and and see if it works or

01:30:59,230 --> 01:31:01,360
not

01:30:59,590 --> 01:31:05,820
and if you have any problems just send

01:31:01,360 --> 01:31:05,820
me an email okay thanks

01:31:06,760 --> 01:31:10,100
[Applause]

01:31:53,609 --> 01:31:58,479
stay fantasy it's the except for my

01:31:56,739 --> 01:32:00,549
interface code is already merged into

01:31:58,479 --> 01:32:06,159
the next tree and will hopefully go into

01:32:00,549 --> 01:32:09,999
the next upstream version so I'll make

01:32:06,159 --> 01:32:13,139
this another demo to see to see if we

01:32:09,999 --> 01:32:13,139
can F it works

01:32:20,770 --> 01:32:26,100
so I'll have a ping running now so I'll

01:32:23,170 --> 01:32:26,100
do it TCP dump

01:32:39,449 --> 01:32:54,300
and you'll see if I say ICMP or ESP or

01:32:45,920 --> 01:32:58,370
UDP vanna or four to 4,500 you'll see

01:32:54,300 --> 01:32:58,370
that it will it looks a bit weird

01:32:58,489 --> 01:33:08,360
because you see this echo replies going

01:33:02,100 --> 01:33:11,550
in and it appears to be plain text so

01:33:08,360 --> 01:33:14,489
the piece that like the density the echo

01:33:11,550 --> 01:33:16,140
sends are getting encrypted but the lack

01:33:14,489 --> 01:33:17,969
of replies somehow are coming in plain

01:33:16,140 --> 01:33:21,120
text but that's just the weird way of

01:33:17,969 --> 01:33:22,710
how the hooks for TCP dump in the stack

01:33:21,120 --> 01:33:25,050
and the hooks for access Ram sort of

01:33:22,710 --> 01:33:26,610
interact with each other and this

01:33:25,050 --> 01:33:28,890
confused a lot of people this is one of

01:33:26,610 --> 01:33:31,530
the reasons in the old days before there

01:33:28,890 --> 01:33:33,600
was the XFM stack toast eclipsed IPSec

01:33:31,530 --> 01:33:35,969
stack and it had an interface and was

01:33:33,600 --> 01:33:37,830
much nicer you could either sniff the

01:33:35,969 --> 01:33:39,750
physical interface that you would get

01:33:37,830 --> 01:33:41,550
the ESP packet so you would sniff the

01:33:39,750 --> 01:33:43,050
the virtual interface so you would get

01:33:41,550 --> 01:33:45,870
the decrypted packet so it was much

01:33:43,050 --> 01:33:47,850
cleaner and you can actually now already

01:33:45,870 --> 01:33:51,230
almost do that with the vti and will be

01:33:47,850 --> 01:33:51,230
even better with the XS Ram iowans

01:34:01,499 --> 01:34:04,559
so I'll just use the static turneth now

01:34:03,360 --> 01:34:06,690
because I'm not entirely sure if this

01:34:04,559 --> 01:34:10,489
work the VTR works in combination with

01:34:06,690 --> 01:34:10,489
our opportunistic and netting rules

01:34:33,780 --> 01:34:36,890
[Music]

01:34:46,730 --> 01:34:51,590
let's speak at the main page myself

01:34:52,639 --> 01:35:00,719
Peter interphase okay so you can give

01:34:56,790 --> 01:35:03,270
this whatever name you want because the

01:35:00,719 --> 01:35:06,420
vti also allows you to basically build

01:35:03,270 --> 01:35:08,520
an IPSec tunnel from 0 0 to 0 0 and then

01:35:06,420 --> 01:35:10,770
only route that that you want to go

01:35:08,520 --> 01:35:13,860
across that tunnel you have to say

01:35:10,770 --> 01:35:15,780
either vti routing yes or no so I'm for

01:35:13,860 --> 01:35:17,820
the 0 0 to 0 0 you want to say no

01:35:15,780 --> 01:35:19,710
because you have to add two routes

01:35:17,820 --> 01:35:21,420
manually yourself for only those ranges

01:35:19,710 --> 01:35:24,170
you want but in most cases you want to

01:35:21,420 --> 01:35:24,170
say routing is yes

01:35:30,960 --> 01:35:34,770
and we have an option vti shared because

01:35:33,270 --> 01:35:37,410
you can actually have multiple tunnels

01:35:34,770 --> 01:35:39,240
all appear on the same vti device but

01:35:37,410 --> 01:35:41,640
then there is a lot of limitations in E

01:35:39,240 --> 01:35:43,530
and E code so I'm with the excerpt from

01:35:41,640 --> 01:35:45,960
my ones hopefully this will be better

01:35:43,530 --> 01:35:48,600
and I just made me realize that since we

01:35:45,960 --> 01:35:50,880
use VTR in the options name we're going

01:35:48,600 --> 01:35:53,460
to have a lot of confusing people if we

01:35:50,880 --> 01:35:57,600
either not rename them to access for MI

01:35:53,460 --> 01:36:00,390
options or so we'll probably map them to

01:35:57,600 --> 01:36:02,070
the same thing and hopefully because vti

01:36:00,390 --> 01:36:04,530
is a term a sort of known outside the

01:36:02,070 --> 01:36:07,880
linux world as well so maybe we need to

01:36:04,530 --> 01:36:07,880
somehow stick that around to

01:36:18,270 --> 01:36:22,280
I think this might be broken

01:36:24,989 --> 01:36:30,840
so you see that's now there's a deaf I P

01:36:27,239 --> 01:36:33,920
six zero and this is a common trick we

01:36:30,840 --> 01:36:37,650
use in all the VIP second permutations

01:36:33,920 --> 01:36:39,390
if you want to build up a tunnel for all

01:36:37,650 --> 01:36:40,739
the traffic so you get an IP address and

01:36:39,390 --> 01:36:42,540
then you want to send all the traffic

01:36:40,739 --> 01:36:43,980
using that new IP addresses the source

01:36:42,540 --> 01:36:45,900
edition so you want to encrypt all your

01:36:43,980 --> 01:36:47,550
traffic you have to sort of make sure

01:36:45,900 --> 01:36:49,890
that you don't implode your tunnel right

01:36:47,550 --> 01:36:51,090
because if you're sending the encrypted

01:36:49,890 --> 01:36:53,820
packet you don't want it to go through

01:36:51,090 --> 01:36:55,920
the tunnel so you sort of want a route

01:36:53,820 --> 01:36:58,020
set with the proper parameters but you

01:36:55,920 --> 01:36:59,670
want that route to be more important

01:36:58,020 --> 01:37:04,010
than the default route so basically you

01:36:59,670 --> 01:37:08,340
split it into you you pick 0 / 1 and

01:37:04,010 --> 01:37:09,750
here 128 / 1 and you pick your out so

01:37:08,340 --> 01:37:11,580
now you've you basically covered the

01:37:09,750 --> 01:37:13,440
entire default route but in to half

01:37:11,580 --> 01:37:15,570
routes and now it becomes more specific

01:37:13,440 --> 01:37:17,070
so it gets preferred so you don't have

01:37:15,570 --> 01:37:19,770
to like do bigger things like delete

01:37:17,070 --> 01:37:23,520
your default route or something but

01:37:19,770 --> 01:37:24,810
let's see what's going on because this

01:37:23,520 --> 01:37:30,110
should just work so we leave the ping

01:37:24,810 --> 01:37:30,110
running let's see what happens it

01:37:47,910 --> 01:37:54,810
that all seems to be other things so

01:37:50,910 --> 01:37:56,250
what's happening on our device here so

01:37:54,810 --> 01:38:02,280
we see that all this is all the plain

01:37:56,250 --> 01:38:09,810
text traffic going out but we don't see

01:38:02,280 --> 01:38:15,090
anything coming back in that doesn't

01:38:09,810 --> 01:38:17,450
change so nothing happened there did we

01:38:15,090 --> 01:38:23,790
get the happiness got configured did

01:38:17,450 --> 01:38:27,020
let's just do a manual test no that

01:38:23,790 --> 01:38:27,020
should have made a difference but

01:38:38,489 --> 01:38:49,409
almost looks like forwarding isn't

01:38:40,289 --> 01:38:50,760
working or something hmm anyway what I

01:38:49,409 --> 01:38:56,309
mostly wanted to show you is actually

01:38:50,760 --> 01:38:59,369
the the cooperation to do this marking

01:38:56,309 --> 01:39:02,099
and so now you by just changing the

01:38:59,369 --> 01:39:04,800
route you decide which of these two two

01:39:02,099 --> 01:39:06,899
because you can have the same exact same

01:39:04,800 --> 01:39:08,689
tunnel but with a different mark and so

01:39:06,899 --> 01:39:12,149
you can install two of the exact same

01:39:08,689 --> 01:39:13,829
SPD policies into the kernel and based

01:39:12,149 --> 01:39:15,629
on the mark based on the routing you can

01:39:13,829 --> 01:39:18,030
set so as soon as one of these routes

01:39:15,629 --> 01:39:19,919
usually you'll have one that you prefer

01:39:18,030 --> 01:39:21,899
which is your whatever your cheap or

01:39:19,919 --> 01:39:23,789
your faster one and then when that one

01:39:21,899 --> 01:39:25,679
goes down and you can do that with at

01:39:23,789 --> 01:39:27,989
the DPD detection so one that tunnel

01:39:25,679 --> 01:39:29,879
goes down you then take down the route

01:39:27,989 --> 01:39:31,919
automatically and on the route default

01:39:29,879 --> 01:39:34,829
back into the other one and will then

01:39:31,919 --> 01:39:36,090
send packets at that one and then once

01:39:34,829 --> 01:39:38,300
the tunnel comes back in the reverse

01:39:36,090 --> 01:39:38,300
happens

01:39:52,389 --> 01:39:57,540
so sometimes the Packers vanishing is

01:39:55,000 --> 01:40:00,560
it's a little hard to diagnose

01:39:57,540 --> 01:40:00,560
[Music]

01:40:05,480 --> 01:40:10,490
and I'll show you the already

01:40:07,820 --> 01:40:16,190
sledgehammer approach I have in my ccTLD

01:40:10,490 --> 01:40:17,720
conf so I log all the Martian so at

01:40:16,190 --> 01:40:22,300
least I know when when the colonel is

01:40:17,720 --> 01:40:25,400
unhappy enable forwarding for everything

01:40:22,300 --> 01:40:27,470
then I hate RP filter it with a passion

01:40:25,400 --> 01:40:30,080
so I just disable it everywhere and

01:40:27,470 --> 01:40:32,140
depend on people to you know do their

01:40:30,080 --> 01:40:34,910
proper filing themselves

01:40:32,140 --> 01:40:36,800
traditionally so RP filter is basically

01:40:34,910 --> 01:40:39,320
a mechanism that says if I receive a

01:40:36,800 --> 01:40:41,000
packet over one interface and I would

01:40:39,320 --> 01:40:42,350
send it out over the same interface then

01:40:41,000 --> 01:40:43,880
something must be wrong and maybe I

01:40:42,350 --> 01:40:45,800
should send like maybe we should do

01:40:43,880 --> 01:40:48,260
something either drop the packet or send

01:40:45,800 --> 01:40:49,460
a redirect or something and it didn't

01:40:48,260 --> 01:40:51,080
always I'm not sure if it's still the

01:40:49,460 --> 01:40:54,230
case it didn't always take into account

01:40:51,080 --> 01:40:56,390
for instance a if you a common setup was

01:40:54,230 --> 01:40:58,940
where you you are at home you have a DSL

01:40:56,390 --> 01:41:00,710
sir do you sell connection and you have

01:40:58,940 --> 01:41:02,600
a VPN tunnel and then so you receive the

01:41:00,710 --> 01:41:04,430
encrypted packet you decrypt it but

01:41:02,600 --> 01:41:06,740
since you only have one interface the

01:41:04,430 --> 01:41:08,570
only one Ethernet it will send it out

01:41:06,740 --> 01:41:10,190
the same Ethernet and then RP filtered

01:41:08,570 --> 01:41:11,570
Golic audit there must be a better way

01:41:10,190 --> 01:41:12,980
of doing this because the packet comes

01:41:11,570 --> 01:41:14,960
from the same interfaces where it's

01:41:12,980 --> 01:41:17,780
going to so it would send all these like

01:41:14,960 --> 01:41:19,880
free directs or so I always I always

01:41:17,780 --> 01:41:22,760
disable all the redirects and and

01:41:19,880 --> 01:41:25,490
disable RP filter and just so that I am

01:41:22,760 --> 01:41:32,030
in control of exactly when to drop the

01:41:25,490 --> 01:41:36,380
packets or not this is this is just

01:41:32,030 --> 01:41:39,110
unrelated order playing I did definitely

01:41:36,380 --> 01:41:42,050
- do you have any idea what might be

01:41:39,110 --> 01:41:45,080
wrong our it might be that I have a

01:41:42,050 --> 01:41:48,490
funky kernel because I've like done

01:41:45,080 --> 01:41:48,490
weird stained things too but

01:41:56,530 --> 01:42:00,760
yet it seems the the out bite isn't

01:41:59,380 --> 01:42:02,260
going up so it seems that the stack

01:42:00,760 --> 01:42:12,790
isn't actually even receiving them

01:42:02,260 --> 01:42:15,030
anymore I don't know I'll have to look

01:42:12,790 --> 01:42:15,030
into that

01:42:34,389 --> 01:42:37,350
that's right

01:42:37,720 --> 01:42:41,010
you show that stuff

01:42:44,780 --> 01:42:48,100
so what do you want me to do

01:42:58,270 --> 01:43:01,480
- I

01:43:09,370 --> 01:43:12,660
- capital I

01:43:15,000 --> 01:43:18,720
don't want something else

01:43:27,560 --> 01:43:30,890
I guess technically we're not allowed to

01:43:29,390 --> 01:43:31,670
use the nets that come out anymore for

01:43:30,890 --> 01:43:34,779
ten years but

01:43:31,670 --> 01:43:34,779
[Applause]

01:43:42,850 --> 01:43:49,720
you need our realities - I have to free

01:43:45,640 --> 01:43:51,730
command but I like to lay out of it so

01:43:49,720 --> 01:43:53,530
much better we should have an IP command

01:43:51,730 --> 01:43:55,920
wrapper that just lays it out like if

01:43:53,530 --> 01:43:55,920
config

01:44:05,110 --> 01:44:08,110
pray

01:44:09,809 --> 01:44:14,159
the other in

01:44:17,040 --> 01:44:22,050
I'm that we just bleed us out so I peek

01:44:19,810 --> 01:44:22,050
at

01:44:28,790 --> 01:44:36,980
so it's using that that sort that I

01:44:30,710 --> 01:44:40,090
veered as we got from the server the

01:44:36,980 --> 01:44:40,090
only 250 never died before

01:44:47,510 --> 01:44:57,200
yes this is when you file a Bugzilla

01:44:49,190 --> 01:45:02,660
with red head like it might be I think I

01:44:57,200 --> 01:45:05,380
this is a pretty old kernel probably not

01:45:02,660 --> 01:45:05,380
too old accident

01:45:15,830 --> 01:45:24,530
let's see if I can do a slightly

01:45:19,010 --> 01:45:29,270
different demo down so this is how we

01:45:24,530 --> 01:45:32,740
run test cases on Lucas one I'll just

01:45:29,270 --> 01:45:32,740
pick one that has vti

01:45:40,489 --> 01:45:47,059
what does this do basic test case with a

01:45:45,110 --> 01:45:48,889
zero to zero VPN and routing okay so

01:45:47,059 --> 01:45:50,659
let's see if that sort so the way we do

01:45:48,889 --> 01:45:52,670
test casing we actually install KVM

01:45:50,659 --> 01:45:56,869
images so we have em just called east

01:45:52,670 --> 01:45:58,429
west north and south and there's an init

01:45:56,869 --> 01:46:01,849
script for them that sort of sets them

01:45:58,429 --> 01:46:03,650
up so we do some basic things and then

01:46:01,849 --> 01:46:06,139
there's a run script that's run and

01:46:03,650 --> 01:46:07,639
actually run some test that we capture

01:46:06,139 --> 01:46:09,889
the output and then we dip it against a

01:46:07,639 --> 01:46:14,889
known output so I will actually just run

01:46:09,889 --> 01:46:14,889
a test case and see what happens

01:46:26,749 --> 01:46:30,979
this was also the reason you saw like 10

01:46:28,550 --> 01:46:33,320
networks configured on my laptop these

01:46:30,979 --> 01:46:35,030
are actually the the test ranges that we

01:46:33,320 --> 01:46:37,749
use so that I can also SSH into all

01:46:35,030 --> 01:46:37,749
these test machines

01:47:04,370 --> 01:47:10,460
as you can see running KVM test is

01:47:07,400 --> 01:47:12,260
fairly slow it's a little slower than it

01:47:10,460 --> 01:47:15,740
normally is but like a full test run we

01:47:12,260 --> 01:47:19,210
have of about 600 test cases takes about

01:47:15,740 --> 01:47:19,210
8 to 10 hours

01:47:31,310 --> 01:47:35,730
so you see here that we put a five old

01:47:34,200 --> 01:47:37,110
block and place and then do a ping to

01:47:35,730 --> 01:47:38,280
confirm that the network is blocked

01:47:37,110 --> 01:47:39,870
because that's easy she's ready for us

01:47:38,280 --> 01:47:44,000
to confirm later on that the test works

01:47:39,870 --> 01:47:46,710
or not so then it sets up the tunnel

01:47:44,000 --> 01:47:48,090
pings again so it should drop the

01:47:46,710 --> 01:47:55,620
packets here because we didn't add a

01:47:48,090 --> 01:47:58,220
route yet now we add a route and we sent

01:47:55,620 --> 01:47:58,220
another ping

01:48:01,090 --> 01:48:08,350
so now if you look at what happened on

01:48:03,280 --> 01:48:11,500
the console of the machine we see if we

01:48:08,350 --> 01:48:17,710
block tear out the pink packets dropped

01:48:11,500 --> 01:48:18,880
we brought up the connection the Packer

01:48:17,710 --> 01:48:21,670
still got robbed because in and out a

01:48:18,880 --> 01:48:23,710
route then we add it so this is one

01:48:21,670 --> 01:48:25,570
where it's settled to Menard so if you

01:48:23,710 --> 01:48:27,580
have vti riding is no so then it sets up

01:48:25,570 --> 01:48:32,050
the route to the device and then it

01:48:27,580 --> 01:48:33,610
actually works properly here now you can

01:48:32,050 --> 01:48:38,530
see we confirm that there's no errors in

01:48:33,610 --> 01:48:40,920
the excess ramstad and just the

01:48:38,530 --> 01:48:40,920
interface

01:48:49,480 --> 01:48:54,700
so if we that's already shut it out the

01:48:52,990 --> 01:48:57,240
test shots down the interface already so

01:48:54,700 --> 01:48:57,240
I can show you

01:49:12,820 --> 01:49:15,600
I'll try it again

01:49:40,550 --> 01:49:45,440
I don't know things work

01:49:43,070 --> 01:49:49,630
maybe I had I didn't have enough digits

01:49:45,440 --> 01:49:49,630
for the mask in the configuration

01:50:10,069 --> 01:50:14,829
ah dyslexia looks like clear text

01:50:23,480 --> 01:50:29,430
oh this is

01:50:26,830 --> 01:50:29,430
Wow

01:50:46,219 --> 01:50:51,579
I actually don't even see the PTI in

01:50:48,260 --> 01:50:51,579
today's now weird

01:51:16,840 --> 01:51:20,010
oh I see

01:51:22,270 --> 01:51:27,220
odd is something wrong DVT I do ice here

01:51:39,649 --> 01:51:44,919
let's just give it a different name is

01:51:41,269 --> 01:51:44,919
apparently it's not happy with this name

01:52:05,280 --> 01:52:08,760
mmm sorry I think it is something weird

01:52:07,650 --> 01:52:10,500
with you too my colonel or with this

01:52:08,760 --> 01:52:16,440
verse of liras on that I have to defeat

01:52:10,500 --> 01:52:18,080
you I support ok well if anyone has any

01:52:16,440 --> 01:52:26,810
other questions just let me know

01:52:18,080 --> 01:52:26,810
oh I'll show you something better

01:52:34,849 --> 01:52:41,889
just Google for that let me turn off

01:52:39,439 --> 01:52:41,889
some

01:52:53,849 --> 01:52:57,800
my DNS server is also broken

01:53:10,040 --> 01:53:18,680
if you google Philippi on testing you

01:53:11,989 --> 01:53:19,820
will find how to use our test system so

01:53:18,680 --> 01:53:31,190
that gives you a lot of details on how

01:53:19,820 --> 01:53:35,000
to use it but in short if you do make

01:53:31,190 --> 01:53:39,170
KVM help it shows you all the tests all

01:53:35,000 --> 01:53:44,470
the targets we have for testing so

01:53:39,170 --> 01:53:44,470
basically you can do the simple ones are

01:53:49,300 --> 01:53:55,280
make a VM check will basically download

01:53:53,030 --> 01:53:58,690
images create all these VMs and all the

01:53:55,280 --> 01:54:01,190
networking things involved and then run

01:53:58,690 --> 01:54:01,730
and I will start to do all the test

01:54:01,190 --> 01:54:07,670
cases

01:54:01,730 --> 01:54:09,820
I will also produce output similar to

01:54:07,670 --> 01:54:09,820
this

01:54:13,570 --> 01:54:17,890
so this is our run that continuously

01:54:16,090 --> 01:54:21,010
whenever does a new committee will start

01:54:17,890 --> 01:54:24,130
to do a new test run so produces graphs

01:54:21,010 --> 01:54:31,870
you can look at so we'll pick the last

01:54:24,130 --> 01:54:33,040
completed one you can so you can go

01:54:31,870 --> 01:54:35,560
through all the test case to see all

01:54:33,040 --> 01:54:45,520
these test cases are passing I'll pick

01:54:35,560 --> 01:54:50,770
one that's not passing so you can see so

01:54:45,520 --> 01:54:52,270
look at this one so this is where the

01:54:50,770 --> 01:54:55,060
test case still need to be updated this

01:54:52,270 --> 01:54:59,170
output was added to the test so it shows

01:54:55,060 --> 01:55:03,010
up now as a as an error so make check

01:54:59,170 --> 01:55:05,470
will run all the tests there's also so

01:55:03,010 --> 01:55:08,590
the the basic structure is if you go

01:55:05,470 --> 01:55:09,280
into the testing directory so base

01:55:08,590 --> 01:55:10,990
configs

01:55:09,280 --> 01:55:13,170
has all the convicts for all the

01:55:10,990 --> 01:55:17,110
machines so you'll see road northeast

01:55:13,170 --> 01:55:18,580
things that are for whole x.509

01:55:17,110 --> 01:55:20,710
basically has the stuff to generate

01:55:18,580 --> 01:55:25,690
extra v9 certificates that are used in a

01:55:20,710 --> 01:55:29,350
test then utils is the you tools used by

01:55:25,690 --> 01:55:32,610
the test framework so that's running on

01:55:29,350 --> 01:55:35,590
the host and then there is guest bin

01:55:32,610 --> 01:55:38,650
which is the mission commands that are

01:55:35,590 --> 01:55:41,770
run on the guest so the most important

01:55:38,650 --> 01:55:45,310
one you'll see so one is it Swan

01:55:41,770 --> 01:55:46,990
transmogrify configures the network

01:55:45,310 --> 01:55:48,220
specifically for that test machine so

01:55:46,990 --> 01:55:49,990
where it's north or east it will

01:55:48,220 --> 01:55:53,590
configure it based on that identity and

01:55:49,990 --> 01:55:55,510
then Swan prep will pick anything from a

01:55:53,590 --> 01:55:56,470
single test and configure the IPSec and

01:55:55,510 --> 01:55:58,480
everything else that needs to be

01:55:56,470 --> 01:56:05,110
configured so then if you go to Pluto

01:55:58,480 --> 01:56:06,760
and I'll take a basic test case you'll

01:56:05,110 --> 01:56:09,010
see there's a test description there's a

01:56:06,760 --> 01:56:11,650
configuration for East there's a

01:56:09,010 --> 01:56:13,600
configuration for West if there's an

01:56:11,650 --> 01:56:15,670
inner dot SH script for the virtual

01:56:13,600 --> 01:56:17,560
machine and it will boot up that machine

01:56:15,670 --> 01:56:20,470
and run that can run that script on it

01:56:17,560 --> 01:56:22,660
so usually it's like prepare all the

01:56:20,470 --> 01:56:25,270
proper configurations start IPSec wait

01:56:22,660 --> 01:56:26,360
for IPSec to start at the connection

01:56:25,270 --> 01:56:28,340
printer status

01:56:26,360 --> 01:56:29,900
and say you're done and I will do the

01:56:28,340 --> 01:56:32,000
same for the other machine and then

01:56:29,900 --> 01:56:33,949
after the inutes the run script is

01:56:32,000 --> 01:56:37,369
called this case it just brings up the

01:56:33,949 --> 01:56:39,739
tunnel does a ping to confirm does the

01:56:37,369 --> 01:56:42,830
traffic's status just to see the packets

01:56:39,739 --> 01:56:44,869
and then all that output is captured and

01:56:42,830 --> 01:56:47,750
put in the output directory and is then

01:56:44,869 --> 01:56:51,920
dipped against a known output in the in

01:56:47,750 --> 01:56:53,659
the regular directory so so the you see

01:56:51,920 --> 01:56:56,300
here the East console dot txt is

01:56:53,659 --> 01:56:59,900
compared to the output East console OTT

01:56:56,300 --> 01:57:03,969
and rst the DEF you see here so let's

01:56:59,900 --> 01:57:03,969
see if I have a more interesting failure

01:57:09,850 --> 01:57:19,690
this one is unexpected let's see so this

01:57:16,670 --> 01:57:22,100
one it claimed to be an authenticated

01:57:19,690 --> 01:57:25,850
IPSec assay and now it says it's

01:57:22,100 --> 01:57:27,980
anonymous IP secretary and I know that

01:57:25,850 --> 01:57:33,489
we had a miscalculation there so this

01:57:27,980 --> 01:57:38,080
test is probably an anonymous one

01:57:33,489 --> 01:57:38,080
there's no description file which is bad

01:57:42,999 --> 01:57:47,440
I was using this tender so just yeah so

01:57:45,550 --> 01:57:48,999
it's using I can tell here it's using

01:57:47,440 --> 01:57:51,340
this standard include so I know it's an

01:57:48,999 --> 01:57:54,429
anonymous one so actually this is

01:57:51,340 --> 01:57:56,469
correct this is the other you know net

01:57:54,429 --> 01:57:58,210
so the test case didn't actually fail

01:57:56,469 --> 01:57:59,739
was actually the the reference output

01:57:58,210 --> 01:58:05,650
here was actually wrong so it needs

01:57:59,739 --> 01:58:14,469
updating so I can update that oh look

01:58:05,650 --> 01:58:18,699
there's a vti one failing did stay fun

01:58:14,469 --> 01:58:23,260
perhaps renamed a vti interface from IP

01:58:18,699 --> 01:58:25,979
underscore VT i 0 2 VT i 0 in some

01:58:23,260 --> 01:58:25,979
kernel version

01:58:30,360 --> 01:58:35,760
oh sorry sorry

01:58:33,420 --> 01:58:37,140
now I see what happens now um because we

01:58:35,760 --> 01:58:39,750
realized that we couldn't actually

01:58:37,140 --> 01:58:41,280
properly share the device and and delete

01:58:39,750 --> 01:58:43,410
them without doing our own reference

01:58:41,280 --> 01:58:46,200
counting we stop deleting the device and

01:58:43,410 --> 01:58:48,380
so we actually created VT i0 and in a

01:58:46,200 --> 01:58:51,030
reference output we deleted the device

01:58:48,380 --> 01:58:53,100
but in a new code we no longer delete

01:58:51,030 --> 01:58:54,930
the device because we can't ref count

01:58:53,100 --> 01:58:57,390
them so we leave them existing so that's

01:58:54,930 --> 01:58:59,460
why it is a plus line you're right it's

01:58:57,390 --> 01:59:04,500
nothing to do with you it's all our

01:58:59,460 --> 01:59:08,310
fault and you see as well we have a

01:59:04,500 --> 01:59:12,480
bunch of I think about a hundred

01:59:08,310 --> 01:59:14,160
interrupts test cases with strongswan so

01:59:12,480 --> 01:59:17,010
that we make sure that you know any new

01:59:14,160 --> 01:59:19,080
feature so soft

01:59:17,010 --> 01:59:21,470
I've also become I think the the number

01:59:19,080 --> 01:59:23,430
one bug reporter for strongswan as well

01:59:21,470 --> 01:59:24,750
because whenever they change something

01:59:23,430 --> 01:59:26,790
like they change it default to something

01:59:24,750 --> 01:59:28,620
and it breaks us or even if it doesn't

01:59:26,790 --> 01:59:31,110
really break but it changes output and

01:59:28,620 --> 01:59:32,460
that we notice it so at some point

01:59:31,110 --> 01:59:34,740
friends that they started sending

01:59:32,460 --> 01:59:36,270
certificate certificate request even

01:59:34,740 --> 01:59:38,670
when their authentication was pre shared

01:59:36,270 --> 01:59:42,930
key and so we found out okay this is a

01:59:38,670 --> 01:59:46,710
change in output so what's happening but

01:59:42,930 --> 01:59:50,700
we actually on the IPSec workshop we did

01:59:46,710 --> 01:59:51,870
in what was March we met a strong son

01:59:50,700 --> 01:59:54,990
team and it was actually really good to

01:59:51,870 --> 01:59:57,270
talk to them and exchange some some

01:59:54,990 --> 01:59:59,250
horror stories and some some some

01:59:57,270 --> 02:00:01,920
warfare we've done and so it was good it

01:59:59,250 --> 02:00:04,580
was it was great to actually meet them

02:00:01,920 --> 02:00:07,170
and work with them for a couple days and

02:00:04,580 --> 02:00:08,550
and and I think it's good in the

02:00:07,170 --> 02:00:10,530
open-source community to have more than

02:00:08,550 --> 02:00:12,000
one implementation like people can you

02:00:10,530 --> 02:00:13,530
know they can now set up a Libra so on

02:00:12,000 --> 02:00:15,180
and a strong Khan server so if something

02:00:13,530 --> 02:00:17,540
happens to one of them they can go back

02:00:15,180 --> 02:00:17,540
to the other

02:00:23,929 --> 02:00:29,010
okay so yeah so so we'll be around if

02:00:27,239 --> 02:00:42,690
you have any questions related to I cry

02:00:29,010 --> 02:00:47,340
be sick just I catch one of us is anyone

02:00:42,690 --> 02:00:49,800
here going to IDF after this or no sir I

02:00:47,340 --> 02:00:51,449
mean after this conference is the IDF

02:00:49,800 --> 02:00:54,570
conference next week is anyone going

02:00:51,449 --> 02:00:56,660
there here or you all just like Linux

02:00:54,570 --> 02:00:59,739
kernel and then we're out of here

02:00:56,660 --> 02:00:59,739

YouTube URL: https://www.youtube.com/watch?v=7oldcYljp4U


