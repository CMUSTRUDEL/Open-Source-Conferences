Title: The Undiscovered Internet - Tom Herbert
Publication date: 2016-10-07
Playlist: Netdev 1.2 - Day 3 - Friday October 7, 2016
Description: 
	The Undiscovered Internet: The Linux Network Stack, The Internet, Self-driving cars, Virtual Reality, and Pokemon Go - Where is this all going?

http://netdevconf.org/1.2/session.html?tom-herbert-keynote
Captions: 
	00:00:18,220 --> 00:00:26,930
um I got um I got invited to talk about

00:00:23,680 --> 00:00:32,780
Tom that is going to follow up with this

00:00:26,930 --> 00:00:35,270
keynote um so um eine go to tip tell

00:00:32,780 --> 00:00:36,800
much but i just mean tom is a very

00:00:35,270 --> 00:00:38,239
well-respected member of this community

00:00:36,800 --> 00:00:42,050
he's been around for quite a while

00:00:38,239 --> 00:00:44,899
already he's proposing and it has been

00:00:42,050 --> 00:00:49,670
posing quite interesting toughest uh

00:00:44,899 --> 00:00:52,280
quite some time already so um even if we

00:00:49,670 --> 00:00:56,510
cannot agree all the time I mean I

00:00:52,280 --> 00:00:58,129
admire him and I think for the

00:00:56,510 --> 00:01:01,280
challenges that they are going to face

00:00:58,129 --> 00:01:03,530
with HCPs I mean it's quite bleeding

00:01:01,280 --> 00:01:06,550
edge stuff lots of freaks twist on it I

00:01:03,530 --> 00:01:09,620
think is I mean it's a book that

00:01:06,550 --> 00:01:14,869
requires to be quite brave to make it

00:01:09,620 --> 00:01:19,759
and and courageous so well anyway I

00:01:14,869 --> 00:01:21,979
think I think he's doing quick work and

00:01:19,759 --> 00:01:26,390
well he is going to follow up with this

00:01:21,979 --> 00:01:27,979
undiscovery internet keynote and well

00:01:26,390 --> 00:01:29,390
he's going to mix all the stuff but

00:01:27,979 --> 00:01:33,289
we've been talking about in this

00:01:29,390 --> 00:01:35,840
conference and and try to try to put it

00:01:33,289 --> 00:01:38,119
in that way that provoke us how to think

00:01:35,840 --> 00:01:41,079
how things are going to be and at what

00:01:38,119 --> 00:01:49,820
what if you would like so I love you

00:01:41,079 --> 00:01:56,740
okay thank you so I promise not to

00:01:49,820 --> 00:02:00,049
mention x.jpg I think we've we've

00:01:56,740 --> 00:02:03,679
covered that however I don't talk about

00:02:00,049 --> 00:02:05,430
Pokemon go if you remember last summer

00:02:03,679 --> 00:02:07,200
and I know that seems like a long time

00:02:05,430 --> 00:02:10,800
there was this thing called Pokemon go

00:02:07,200 --> 00:02:12,600
and we had people and I guess I started

00:02:10,800 --> 00:02:16,890
walking around with their phones

00:02:12,600 --> 00:02:18,990
tripping over things my my god was

00:02:16,890 --> 00:02:22,459
really into it and they're like got to

00:02:18,990 --> 00:02:24,630
take me downtown and do pokey walk and I

00:02:22,459 --> 00:02:26,280
pogi walk down ceilings really strange

00:02:24,630 --> 00:02:29,280
to me but turns out they go around and

00:02:26,280 --> 00:02:31,950
they they catch these pokÃ©mon's and they

00:02:29,280 --> 00:02:34,110
get points but the interesting thing to

00:02:31,950 --> 00:02:36,180
me from an engineering point of view and

00:02:34,110 --> 00:02:39,810
my daughter's don't care about my point

00:02:36,180 --> 00:02:42,750
of view the interesting thing there's

00:02:39,810 --> 00:02:45,770
two parts to this one is I look at the

00:02:42,750 --> 00:02:49,320
technology behind this and the fact that

00:02:45,770 --> 00:02:51,989
to a large extent it's the efforts of

00:02:49,320 --> 00:02:53,880
people in this room people in and

00:02:51,989 --> 00:02:56,340
development of protocols people in

00:02:53,880 --> 00:02:58,880
operating systems and applications but

00:02:56,340 --> 00:03:02,100
it's really us who made this happen and

00:02:58,880 --> 00:03:04,440
you know just seeing that thick saying

00:03:02,100 --> 00:03:06,150
like like this bugger that book it does

00:03:04,440 --> 00:03:08,070
have this percolating effect that we're

00:03:06,150 --> 00:03:11,610
changing culture which that's the kind

00:03:08,070 --> 00:03:13,320
of cool but the second thing is I look

00:03:11,610 --> 00:03:15,650
at this and I see a glimpse of the

00:03:13,320 --> 00:03:17,910
future this is really a type of

00:03:15,650 --> 00:03:20,850
augmented reality if you think about it

00:03:17,910 --> 00:03:23,549
so that the pokemons are being placed in

00:03:20,850 --> 00:03:24,810
the real world as if they're there you

00:03:23,549 --> 00:03:27,690
see on your phone they're not actually

00:03:24,810 --> 00:03:29,459
though obviously so me this is really

00:03:27,690 --> 00:03:32,790
fascinating because it's the future and

00:03:29,459 --> 00:03:35,519
I don't see much of a gap between people

00:03:32,790 --> 00:03:37,049
catching pokemons on their phone phir SE

00:03:35,519 --> 00:03:40,049
the firefighter entering a building

00:03:37,049 --> 00:03:41,700
wearing a VR device being able to see

00:03:40,049 --> 00:03:43,890
through smoke get the layout of the

00:03:41,700 --> 00:03:46,410
building and basically finding people

00:03:43,890 --> 00:03:49,980
and saving them so this stuff is really

00:03:46,410 --> 00:03:51,840
important in terms of where the future

00:03:49,980 --> 00:03:53,549
is going that's it's not just about

00:03:51,840 --> 00:03:56,459
games I think that's the sad way but

00:03:53,549 --> 00:03:59,459
it's really about building this kind of

00:03:56,459 --> 00:04:01,799
future world so I want to do a thought

00:03:59,459 --> 00:04:05,430
experiment or encouraged to do the

00:04:01,799 --> 00:04:08,670
following thought experiment imagine the

00:04:05,430 --> 00:04:13,260
is 2100 and they're doing the

00:04:08,670 --> 00:04:15,139
retrospective the 21st century so what

00:04:13,260 --> 00:04:19,320
will the great technological

00:04:15,139 --> 00:04:21,660
achievements be of the century so I'm

00:04:19,320 --> 00:04:24,990
assume for a second that will discount

00:04:21,660 --> 00:04:26,850
any medical advances so if there's a

00:04:24,990 --> 00:04:30,180
cure for cancer obviously that that will

00:04:26,850 --> 00:04:31,500
be on top of the list most likely or at

00:04:30,180 --> 00:04:35,610
least hopefully we'll have supersonic

00:04:31,500 --> 00:04:38,880
flight becoming but I think that if you

00:04:35,610 --> 00:04:41,220
look at things that are pertaining to to

00:04:38,880 --> 00:04:42,870
where we're looking at the day there's a

00:04:41,220 --> 00:04:46,490
few things and there's a common theme

00:04:42,870 --> 00:04:49,470
here so robotics and Industry and home

00:04:46,490 --> 00:04:51,870
will become very common the so-called

00:04:49,470 --> 00:04:54,389
smart cities where we have sensors

00:04:51,870 --> 00:04:57,720
everywhere resources for cities are

00:04:54,389 --> 00:05:01,949
being directed in real time remote

00:04:57,720 --> 00:05:03,720
health care of surgery obviously the the

00:05:01,949 --> 00:05:06,000
advantages of your doctor now you have

00:05:03,720 --> 00:05:08,610
to do surgery on you but can do it

00:05:06,000 --> 00:05:13,409
remotely if great and of course

00:05:08,610 --> 00:05:15,570
self-driving cars hasn't seen last seven

00:05:13,409 --> 00:05:18,599
those also the other big news nearly

00:05:15,570 --> 00:05:22,800
every major automobile manufacturer now

00:05:18,599 --> 00:05:24,870
saying self-driving cars by 2020 but in

00:05:22,800 --> 00:05:27,300
the year 2100 well I'm assuming as our

00:05:24,870 --> 00:05:29,130
grandchildren will look back and all of

00:05:27,300 --> 00:05:32,639
this stuff would just be the way it is

00:05:29,130 --> 00:05:35,909
and maybe they'll be like a steering or

00:05:32,639 --> 00:05:39,659
what is that so if you do this all

00:05:35,909 --> 00:05:41,280
experiment we get interesting scenarios

00:05:39,659 --> 00:05:43,080
like this unfortunately this did not

00:05:41,280 --> 00:05:45,979
convert correctly this is supposed to be

00:05:43,080 --> 00:05:47,289
an animation and what would show is

00:05:45,979 --> 00:05:49,360
representation of

00:05:47,289 --> 00:05:51,309
is an intersection kind of flying

00:05:49,360 --> 00:05:53,619
through the intersection not hitting

00:05:51,309 --> 00:05:56,529
each other generally missing each other

00:05:53,619 --> 00:05:58,779
I find this interesting because this is

00:05:56,529 --> 00:06:01,990
actually traffic scheduling real traffic

00:05:58,779 --> 00:06:09,539
scheduling that will come to be so this

00:06:01,990 --> 00:06:12,520
eliminates traffic chance so one of the

00:06:09,539 --> 00:06:15,009
outcomes of this or one of the I guess

00:06:12,520 --> 00:06:17,469
foundations of this future does seem to

00:06:15,009 --> 00:06:20,830
be aight RT and an IOT based internet

00:06:17,469 --> 00:06:24,699
and this is where we really talk about

00:06:20,830 --> 00:06:26,559
finally scaling the internet out so well

00:06:24,699 --> 00:06:28,539
look at it right now in a large extent

00:06:26,559 --> 00:06:31,149
we're really at an infancy and the

00:06:28,539 --> 00:06:33,099
internet and networking if you think

00:06:31,149 --> 00:06:36,580
about the scale we about 6.4 billion

00:06:33,099 --> 00:06:40,169
devices today on the internet 20 billion

00:06:36,580 --> 00:06:42,430
by 2020 and Phi G has some crazy

00:06:40,169 --> 00:06:45,339
expectations just get like five hundred

00:06:42,430 --> 00:06:46,719
billion devices on the internet so at

00:06:45,339 --> 00:06:48,430
some point we're talking about like each

00:06:46,719 --> 00:06:51,610
light bulb be on the internet and things

00:06:48,430 --> 00:06:55,539
like that this is going to generate vast

00:06:51,610 --> 00:06:57,159
amounts of data of presumably most of

00:06:55,539 --> 00:06:59,860
these devices will have cameras they'll

00:06:57,159 --> 00:07:02,620
be generating all the video what have

00:06:59,860 --> 00:07:03,969
you it's also going to become

00:07:02,620 --> 00:07:06,729
predominantly a machine to machine

00:07:03,969 --> 00:07:10,749
internet so device was talking to

00:07:06,729 --> 00:07:12,519
devices as opposed to humans talking to

00:07:10,749 --> 00:07:15,699
to humans or devices I think we're going

00:07:12,519 --> 00:07:19,360
to see a ship there distributed decision

00:07:15,699 --> 00:07:20,469
making so how does data centers are

00:07:19,360 --> 00:07:23,169
great but I think we're going to see

00:07:20,469 --> 00:07:25,689
some pushing out more distribution not

00:07:23,169 --> 00:07:28,119
less geographic locality becomes

00:07:25,689 --> 00:07:31,449
important and I'll get to that and in a

00:07:28,119 --> 00:07:32,919
minute applications are going to require

00:07:31,449 --> 00:07:34,930
low latency and this is going to be very

00:07:32,919 --> 00:07:38,979
different from what we see today in

00:07:34,930 --> 00:07:42,339
terms of latency and Oh give some

00:07:38,979 --> 00:07:45,260
reasons why that is but one of the

00:07:42,339 --> 00:07:47,990
important things is like my fire fire

00:07:45,260 --> 00:07:49,730
firefighter example we're going to be

00:07:47,990 --> 00:07:52,430
supporting life critical applications on

00:07:49,730 --> 00:07:55,700
the internet so things like reliability

00:07:52,430 --> 00:07:58,310
security privacy these will no longer be

00:07:55,700 --> 00:08:03,200
things we need tomorrow without the we

00:07:58,310 --> 00:08:05,330
can't build this sort of Internet so for

00:08:03,200 --> 00:08:06,650
real-time internet you know we always

00:08:05,330 --> 00:08:10,430
walked in here everything's about

00:08:06,650 --> 00:08:13,810
latency this is true but what we really

00:08:10,430 --> 00:08:19,130
mean is it's about latency variability

00:08:13,810 --> 00:08:21,800
security availability again 99

00:08:19,130 --> 00:08:24,380
percentile latency or and I think in the

00:08:21,800 --> 00:08:27,170
case of IOT internet the five nines

00:08:24,380 --> 00:08:28,460
latency 59 veil ability these are going

00:08:27,170 --> 00:08:32,120
to become important and these are going

00:08:28,460 --> 00:08:34,280
to our targets as we build the software

00:08:32,120 --> 00:08:38,479
and the networking out we need to

00:08:34,280 --> 00:08:41,419
achieve these four numbers so I

00:08:38,479 --> 00:08:43,130
mentioned the challenges of latency and

00:08:41,419 --> 00:08:46,520
the way I like to think about it is we

00:08:43,130 --> 00:08:48,410
have a kind of latency continuum and on

00:08:46,520 --> 00:08:51,350
the far right we have basically the

00:08:48,410 --> 00:08:53,440
internet and we've accepted relatively

00:08:51,350 --> 00:08:55,520
large Layton sees on the internet

00:08:53,440 --> 00:08:57,850
typically order hundreds of milliseconds

00:08:55,520 --> 00:09:01,760
maybe more if you go through satellite

00:08:57,850 --> 00:09:04,790
with only two for one is speed of light

00:09:01,760 --> 00:09:07,010
is actually a real hard limit we can't

00:09:04,790 --> 00:09:08,180
go faster than speed of light so by

00:09:07,010 --> 00:09:09,680
definition if you're going to a

00:09:08,180 --> 00:09:12,890
satellite and back to earth it's going

00:09:09,680 --> 00:09:15,140
to be hundreds of milliseconds but the

00:09:12,890 --> 00:09:17,290
other aspect of latency on the internet

00:09:15,140 --> 00:09:20,660
internet really have been

00:09:17,290 --> 00:09:23,120
retransmissions artios things like that

00:09:20,660 --> 00:09:25,400
so how many are gt's does it take to get

00:09:23,120 --> 00:09:27,830
my data if it's one then I'm bounded by

00:09:25,400 --> 00:09:30,680
speed of light if it's too well then I'm

00:09:27,830 --> 00:09:32,150
doing 2x of what I should be so we've

00:09:30,680 --> 00:09:37,070
obviously done a lot of great work on

00:09:32,150 --> 00:09:39,440
this bbr sounds really promising to to

00:09:37,070 --> 00:09:40,180
manage this latency and get it down well

00:09:39,440 --> 00:09:43,570
should be

00:09:40,180 --> 00:09:45,460
as our TTA should be correlated to speed

00:09:43,570 --> 00:09:48,190
of light even on lossless internet as

00:09:45,460 --> 00:09:52,210
bbr guys or lost my internet as of your

00:09:48,190 --> 00:09:54,190
guys ershon's on the left side we have

00:09:52,210 --> 00:09:57,610
kind of latency as we expect in the data

00:09:54,190 --> 00:09:59,589
center and this sort of latency is if

00:09:57,610 --> 00:10:01,630
not so much dominated by speed of light

00:09:59,589 --> 00:10:03,700
we're actually building data centers

00:10:01,630 --> 00:10:07,029
with a lot of locality a rack of

00:10:03,700 --> 00:10:10,000
machines we expect I guess nanosecond

00:10:07,029 --> 00:10:12,160
transmission where the latency comes out

00:10:10,000 --> 00:10:15,399
or the latency problem here is actually

00:10:12,160 --> 00:10:18,370
the implementation so as we've seen a

00:10:15,399 --> 00:10:20,760
lot of discussion in this conference

00:10:18,370 --> 00:10:22,990
about various performance techniques

00:10:20,760 --> 00:10:25,899
these are actually part of the

00:10:22,990 --> 00:10:27,880
implementation make the implementation

00:10:25,899 --> 00:10:31,209
faster so we're going to scheduling or

00:10:27,880 --> 00:10:33,970
how we do queuing how we arrange package

00:10:31,209 --> 00:10:36,730
things like that now in the middle of

00:10:33,970 --> 00:10:41,110
this and I think this is kind of wearing

00:10:36,730 --> 00:10:42,910
it into the next generation or the type

00:10:41,110 --> 00:10:45,370
of Layton sees that that will need I

00:10:42,910 --> 00:10:48,970
think there's a mid-range latency here

00:10:45,370 --> 00:10:51,640
and this is in the order of maybe one

00:10:48,970 --> 00:10:53,980
millisecond to 10 milliseconds and the

00:10:51,640 --> 00:10:56,770
reason we need this particular latency

00:10:53,980 --> 00:10:59,140
is if you think about it especially in

00:10:56,770 --> 00:11:01,000
the self-driving car if two cars are

00:10:59,140 --> 00:11:03,339
coming at each other they're going to

00:11:01,000 --> 00:11:06,820
the exchanging information to avoid a

00:11:03,339 --> 00:11:09,010
collision the response time that we want

00:11:06,820 --> 00:11:12,160
that to be it's about 10 milliseconds or

00:11:09,010 --> 00:11:13,450
less human response time is around 40

00:11:12,160 --> 00:11:16,270
milliseconds so we're really getting

00:11:13,450 --> 00:11:18,610
that down if we did the latency down so

00:11:16,270 --> 00:11:21,580
that devices can communicate safety

00:11:18,610 --> 00:11:23,800
information then obviously then we have

00:11:21,580 --> 00:11:26,320
a safe for safer environment this is a

00:11:23,800 --> 00:11:28,300
key to enabling the self-driving cars is

00:11:26,320 --> 00:11:30,400
how the devices are going to communicate

00:11:28,300 --> 00:11:33,250
amongst themselves to solve a particular

00:11:30,400 --> 00:11:36,130
problem in this case the problem is safe

00:11:33,250 --> 00:11:38,079
driving for everyone so the techniques

00:11:36,130 --> 00:11:40,130
though here are kind of interesting

00:11:38,079 --> 00:11:42,260
because their primary combination of

00:11:40,130 --> 00:11:45,860
both types of techniques clearly on the

00:11:42,260 --> 00:11:48,260
protocol side tcp probably isn't what

00:11:45,860 --> 00:11:50,330
people would use for this one of the

00:11:48,260 --> 00:11:53,060
interesting aspects of a protocol like

00:11:50,330 --> 00:11:55,790
this is the information is very

00:11:53,060 --> 00:11:58,760
time-bound it so if i send information

00:11:55,790 --> 00:12:01,250
for car to stop and it doesn't get that

00:11:58,760 --> 00:12:02,630
and i have to resend that 20

00:12:01,250 --> 00:12:05,960
milliseconds later it's probably too

00:12:02,630 --> 00:12:09,050
late then so retransmissions might turn

00:12:05,960 --> 00:12:12,260
into some like weird error correction on

00:12:09,050 --> 00:12:13,970
the devices we don't need the super

00:12:12,260 --> 00:12:17,600
micro second latency but we certainly

00:12:13,970 --> 00:12:19,010
need like real-time scheduling and

00:12:17,600 --> 00:12:22,180
things like that so I think there is a

00:12:19,010 --> 00:12:23,990
kind of a combination of that so the

00:12:22,180 --> 00:12:26,090
solution here might be a little bit

00:12:23,990 --> 00:12:30,560
different than either of these other

00:12:26,090 --> 00:12:33,770
sides of the continuum so looking a

00:12:30,560 --> 00:12:36,230
little more at the stack this is where I

00:12:33,770 --> 00:12:39,320
guess we come in on how we're going to

00:12:36,230 --> 00:12:42,470
help advance this future so I think

00:12:39,320 --> 00:12:44,990
there's several challenges that were

00:12:42,470 --> 00:12:47,120
starting to look at and we need to

00:12:44,990 --> 00:12:49,640
continue look at and I'm going to a

00:12:47,120 --> 00:12:51,920
little bit in each of these today or in

00:12:49,640 --> 00:12:54,350
a minute of it security protocols

00:12:51,920 --> 00:12:58,340
ification alter the colonel bypass

00:12:54,350 --> 00:13:00,200
definitely a hot issue ipv6 I'm I'm

00:12:58,340 --> 00:13:02,000
inclined to think that's the predominant

00:13:00,200 --> 00:13:04,220
protocol networking protocol in this

00:13:02,000 --> 00:13:05,750
world the actual transport protocols

00:13:04,220 --> 00:13:11,270
need to be addressed mobility and

00:13:05,750 --> 00:13:13,070
latency so in security I think the

00:13:11,270 --> 00:13:17,450
writing is on the wall on this one this

00:13:13,070 --> 00:13:21,370
is no longer a nice to have obviously

00:13:17,450 --> 00:13:23,900
with with Snowden revelations major

00:13:21,370 --> 00:13:26,260
service providers content providers have

00:13:23,900 --> 00:13:28,370
already turned up TLS on the Internet I

00:13:26,260 --> 00:13:29,720
tend to think that that's only the

00:13:28,370 --> 00:13:32,380
beginning I do think we need to get

00:13:29,720 --> 00:13:35,570
security inside the data center

00:13:32,380 --> 00:13:38,180
obviously for IOT devices almost any

00:13:35,570 --> 00:13:40,870
communication needs to be secure we

00:13:38,180 --> 00:13:43,210
can't have devices

00:13:40,870 --> 00:13:46,029
the side of the road imitating cars and

00:13:43,210 --> 00:13:51,330
sending false signals it's a huge issue

00:13:46,029 --> 00:13:53,560
in the IOT world and poornima so is

00:13:51,330 --> 00:13:55,680
historically the cost of crypto has

00:13:53,560 --> 00:13:58,450
prevented us from ubiquitous security

00:13:55,680 --> 00:14:03,310
that I think we just need to drive down

00:13:58,450 --> 00:14:06,760
the efforts around CP o things like k

00:14:03,310 --> 00:14:08,710
TLS is one way to do that the security

00:14:06,760 --> 00:14:11,860
offloads I have a lot of promise new

00:14:08,710 --> 00:14:14,170
instruction sets what have you one thing

00:14:11,860 --> 00:14:16,089
we have to realize about security is the

00:14:14,170 --> 00:14:18,460
thread never goes away it only gets

00:14:16,089 --> 00:14:21,550
worse so every time we come out with a

00:14:18,460 --> 00:14:24,220
security mitigation someone else will

00:14:21,550 --> 00:14:26,710
try to outdo that in this

00:14:24,220 --> 00:14:28,120
hyper-connected world of IRT it's only

00:14:26,710 --> 00:14:30,580
going to get worse in terms of threats

00:14:28,120 --> 00:14:36,550
so our response has to be commensurate

00:14:30,580 --> 00:14:38,200
with that and then one other side effect

00:14:36,550 --> 00:14:41,070
of this is we see a lot of movement

00:14:38,200 --> 00:14:43,810
between user space and colonel

00:14:41,070 --> 00:14:46,300
regardless of where code runs hardware

00:14:43,810 --> 00:14:49,330
software it's going to be a question

00:14:46,300 --> 00:14:52,300
that we're faced with vendors are faced

00:14:49,330 --> 00:14:54,130
with how do you secure this as you know

00:14:52,300 --> 00:14:56,140
the security of the system is usually

00:14:54,130 --> 00:14:58,240
its weakest link so if the colonel

00:14:56,140 --> 00:15:00,040
secure about user space isn't then the

00:14:58,240 --> 00:15:02,050
system isn't secure so we have to

00:15:00,040 --> 00:15:04,450
consider security from a kind of a whole

00:15:02,050 --> 00:15:05,770
point of holistic point of view the

00:15:04,450 --> 00:15:07,360
other thing about security that we have

00:15:05,770 --> 00:15:11,080
to consider in terms of latency is

00:15:07,360 --> 00:15:13,990
security negotiation actually impacts

00:15:11,080 --> 00:15:16,000
latency so we have to consider that in

00:15:13,990 --> 00:15:19,270
the self-driving car case two cars come

00:15:16,000 --> 00:15:21,370
into range with each other and the radio

00:15:19,270 --> 00:15:23,890
signals if they need to spend a lot of

00:15:21,370 --> 00:15:24,190
time to keep negotiating the security so

00:15:23,890 --> 00:15:27,130
they can

00:15:24,190 --> 00:15:28,960
trust each other as they're driving down

00:15:27,130 --> 00:15:29,920
the road that distance it gets short and

00:15:28,960 --> 00:15:32,440
they may not have enough time to

00:15:29,920 --> 00:15:34,360
actually respond when they realize

00:15:32,440 --> 00:15:36,820
they're about to have a crash so sku

00:15:34,360 --> 00:15:41,830
negotiation is absolutely critical in

00:15:36,820 --> 00:15:44,740
this kind of IOT security world so put

00:15:41,830 --> 00:15:48,220
emulsification we actually talked a lot

00:15:44,740 --> 00:15:50,350
about this at last met dev I think Dave

00:15:48,220 --> 00:15:52,870
keynote was mostly about this it is

00:15:50,350 --> 00:15:57,130
still kind of a problem it's not

00:15:52,870 --> 00:15:58,930
specific to really just this room the

00:15:57,130 --> 00:16:02,170
problem extends to how we develop

00:15:58,930 --> 00:16:05,290
Internet protocols how a router vendors

00:16:02,170 --> 00:16:07,780
switch vendors parse things what they're

00:16:05,290 --> 00:16:10,150
looking at whenever someone does

00:16:07,780 --> 00:16:13,030
something that is kind of outside of the

00:16:10,150 --> 00:16:15,970
normal protocol like doing deep packet

00:16:13,030 --> 00:16:18,580
inspection in HTTP HTTP like them

00:16:15,970 --> 00:16:22,390
vendors of in Dillon they're running the

00:16:18,580 --> 00:16:24,070
risk of a proto classification and the

00:16:22,390 --> 00:16:26,170
problem of proto classification is it

00:16:24,070 --> 00:16:27,760
kind of freezes it we can't move the

00:16:26,170 --> 00:16:29,820
internet forward if we can't change

00:16:27,760 --> 00:16:31,960
protocols because it's going to break

00:16:29,820 --> 00:16:34,090
someone who made kind of a bad

00:16:31,960 --> 00:16:36,850
assumption about how the lower layer

00:16:34,090 --> 00:16:42,490
protocols work so it turned out this is

00:16:36,850 --> 00:16:43,930
a well-known problem and last IETF this

00:16:42,490 --> 00:16:45,940
was actually brought up in the open

00:16:43,930 --> 00:16:47,980
primary and one of our calling

00:16:45,940 --> 00:16:50,110
colleagues and I ETF basically said the

00:16:47,980 --> 00:16:53,560
only solution is to encrypt the hell out

00:16:50,110 --> 00:16:55,330
of the packet meaning we have to get to

00:16:53,560 --> 00:16:57,940
the world where even the transport layer

00:16:55,330 --> 00:17:00,940
or the payload everything's encrypted

00:16:57,940 --> 00:17:03,700
the only way only thing devices can see

00:17:00,940 --> 00:17:06,130
are things that are allowed outing the

00:17:03,700 --> 00:17:09,610
packet and decrypting it at the end

00:17:06,130 --> 00:17:10,730
point they will lose a lot and in terms

00:17:09,610 --> 00:17:12,500
of what they see or

00:17:10,730 --> 00:17:14,240
they think they wanted a fire walls for

00:17:12,500 --> 00:17:15,679
instance now we're going to have to deal

00:17:14,240 --> 00:17:21,679
with the fact that they might not see

00:17:15,679 --> 00:17:24,380
TCP headers for this one I think we kind

00:17:21,679 --> 00:17:26,589
of heart on the request that device

00:17:24,380 --> 00:17:29,410
vendors follow the less-is-more model

00:17:26,589 --> 00:17:32,270
particularly with with Hardware offloads

00:17:29,410 --> 00:17:35,419
try to avoid pigeonholing else into

00:17:32,270 --> 00:17:37,520
using a particular thing cancellation

00:17:35,419 --> 00:17:39,860
protocol when we could have implemented

00:17:37,520 --> 00:17:43,809
a generic mechanism that allows us to

00:17:39,860 --> 00:17:43,809
use arbitrary encapsulation protocols

00:17:44,169 --> 00:17:54,679
code bypass is kind of a hot topic right

00:17:49,309 --> 00:17:56,990
now the way I look at it is there's a

00:17:54,679 --> 00:17:59,330
different dimensions of this and the

00:17:56,990 --> 00:18:01,850
most important one might be kind of the

00:17:59,330 --> 00:18:04,070
flavor of it so we we can divide the

00:18:01,850 --> 00:18:07,280
world colonel bypass into complete

00:18:04,070 --> 00:18:08,990
bypass meaning the colonel has no

00:18:07,280 --> 00:18:11,929
interaction with us has to be kind of

00:18:08,990 --> 00:18:14,120
like the DPD k world there's a partial

00:18:11,929 --> 00:18:17,030
bypass which of the colonel may do part

00:18:14,120 --> 00:18:19,309
of the data path and then for instance

00:18:17,030 --> 00:18:20,780
transition it to userspace kind of how

00:18:19,309 --> 00:18:23,270
we do with net some of the net map stuff

00:18:20,780 --> 00:18:25,070
and then the third one is have

00:18:23,270 --> 00:18:28,730
acceleration which is what we think of

00:18:25,070 --> 00:18:31,580
in terms of TSO LRO checksum offload

00:18:28,730 --> 00:18:33,230
where the colonel the code doesn't run

00:18:31,580 --> 00:18:35,780
in the colonel but it's really running

00:18:33,230 --> 00:18:38,570
running on behalf of the colonel under

00:18:35,780 --> 00:18:40,520
control of the colonel there's some

00:18:38,570 --> 00:18:42,950
other dimensions we can think of where

00:18:40,520 --> 00:18:46,910
the implementation is is it in hardware

00:18:42,950 --> 00:18:50,780
software user space the data path API a

00:18:46,910 --> 00:18:52,970
lot of bike bypass like TCP in user

00:18:50,780 --> 00:18:55,010
space really wants to your sockets but

00:18:52,970 --> 00:18:57,640
we have to acknowledge that our DNA is

00:18:55,010 --> 00:19:00,260
verbs MPI some other things like that

00:18:57,640 --> 00:19:02,660
another important aspect is how is this

00:19:00,260 --> 00:19:04,370
stuff controlled so in the kernel for

00:19:02,660 --> 00:19:06,679
instance we like to have control through

00:19:04,370 --> 00:19:10,320
net link that has a huge advantage to

00:19:06,679 --> 00:19:11,970
provide a common tool set if the

00:19:10,320 --> 00:19:13,559
offload requires a completely different

00:19:11,970 --> 00:19:16,529
tool set that's fine but now we have

00:19:13,559 --> 00:19:17,909
kind of this divergence and the

00:19:16,529 --> 00:19:19,950
worst-case scenario is I have two

00:19:17,909 --> 00:19:22,409
parties trying that basically control

00:19:19,950 --> 00:19:24,659
the same device but within completely

00:19:22,409 --> 00:19:25,860
different methods and kind of crossing

00:19:24,659 --> 00:19:29,250
my fingers to hope that they don't

00:19:25,860 --> 00:19:30,630
conflict with one another the scope is

00:19:29,250 --> 00:19:33,210
actually another very important thing

00:19:30,630 --> 00:19:36,690
and I think the world is kind of

00:19:33,210 --> 00:19:39,090
dividing into two to intents of by paths

00:19:36,690 --> 00:19:44,190
so one is the so-called packet

00:19:39,090 --> 00:19:46,169
processing switches filtering firewalls

00:19:44,190 --> 00:19:49,529
things like that but it can be all

00:19:46,169 --> 00:19:51,269
floated into into hardware they can be

00:19:49,529 --> 00:19:55,049
acceleration or complete or partial

00:19:51,269 --> 00:19:56,549
bypass the other one that we have to

00:19:55,049 --> 00:20:00,750
consider is actually protocol

00:19:56,549 --> 00:20:05,669
termination and this is demonstrated in

00:20:00,750 --> 00:20:07,860
tcp / DP DK open on load there is a

00:20:05,669 --> 00:20:11,879
pretty good market or a pretty good

00:20:07,860 --> 00:20:15,090
story about these guys running TCP and

00:20:11,879 --> 00:20:17,220
user space getting great results some of

00:20:15,090 --> 00:20:19,470
that stuff kind of difficult for us I

00:20:17,220 --> 00:20:23,399
think for us the easier one is going to

00:20:19,470 --> 00:20:25,710
be salt packet processing so we can

00:20:23,399 --> 00:20:27,840
think of Colonel bypass in terms of a

00:20:25,710 --> 00:20:29,580
friendliness to the colonel how does it

00:20:27,840 --> 00:20:32,730
how to interact with the colonel how

00:20:29,580 --> 00:20:35,190
does it integrate and doesn't mention

00:20:32,730 --> 00:20:37,759
their three flavors complete bypassed by

00:20:35,190 --> 00:20:40,259
definition it's outside of the colonel

00:20:37,759 --> 00:20:41,909
so the partial bypass of the world

00:20:40,259 --> 00:20:44,159
that's kind of little better at least

00:20:41,909 --> 00:20:45,990
part of its in the kernel and then an

00:20:44,159 --> 00:20:47,730
acceleration this is completely

00:20:45,990 --> 00:20:49,649
integrated with the colonel so i should

00:20:47,730 --> 00:20:53,639
mention the colors are really from the

00:20:49,649 --> 00:20:56,129
colonel perspective in terms of probably

00:20:53,639 --> 00:21:00,600
our point of view as to how well we can

00:20:56,129 --> 00:21:04,110
integrate this stuff so this ordering

00:21:00,600 --> 00:21:07,139
kind of provide or this annotation

00:21:04,110 --> 00:21:09,090
provide the path kind of how we would

00:21:07,139 --> 00:21:10,710
want to view accelerations as they come

00:21:09,090 --> 00:21:13,049
in can we move complete Excel

00:21:10,710 --> 00:21:19,399
in a partial acceleration can be partial

00:21:13,049 --> 00:21:19,399
to partial offload full acceleration

00:21:21,230 --> 00:21:28,860
sign for the other a little slide trying

00:21:25,020 --> 00:21:32,159
to do a kind of survey of the various

00:21:28,860 --> 00:21:34,200
forms of offload very scattered

00:21:32,159 --> 00:21:35,730
information on the intranet actually so

00:21:34,200 --> 00:21:38,549
get marshalling this together was kind

00:21:35,730 --> 00:21:42,289
of an interesting exercise but there are

00:21:38,549 --> 00:21:46,649
a lot of implementations a lot of

00:21:42,289 --> 00:21:49,590
stories about success with this some of

00:21:46,649 --> 00:21:53,179
the interesting statements are often

00:21:49,590 --> 00:21:56,340
along the lines of general Colonel

00:21:53,179 --> 00:22:00,210
operating system is just too slow we

00:21:56,340 --> 00:22:02,100
need to do bypass because we need 20

00:22:00,210 --> 00:22:04,799
million packets per second and the

00:22:02,100 --> 00:22:07,500
colonel only does two million so in fact

00:22:04,799 --> 00:22:09,390
it's really that mentality that that

00:22:07,500 --> 00:22:11,429
created some of the efforts my promise

00:22:09,390 --> 00:22:14,159
not to mention them but creating some of

00:22:11,429 --> 00:22:17,580
the efforts of high performance data

00:22:14,159 --> 00:22:20,460
path so in one sense it can argue that

00:22:17,580 --> 00:22:21,899
that was good input so now we know what

00:22:20,460 --> 00:22:24,630
the targets are and how to be

00:22:21,899 --> 00:22:26,909
competitive with things like DP DK so I

00:22:24,630 --> 00:22:28,980
think that it kind of as a positive but

00:22:26,909 --> 00:22:32,159
we need to respond to this and it is

00:22:28,980 --> 00:22:33,840
important to demonstrate a path to

00:22:32,159 --> 00:22:37,830
getting stuff in the kernel with really

00:22:33,840 --> 00:22:41,010
did performance so there's a few

00:22:37,830 --> 00:22:43,730
questions I think we always want to ask

00:22:41,010 --> 00:22:46,049
about about offloads and Colonel bypass

00:22:43,730 --> 00:22:47,760
first question I would ask anyone who

00:22:46,049 --> 00:22:50,490
says hey this this kernel bypass is

00:22:47,760 --> 00:22:54,049
great is like why do you need it what is

00:22:50,490 --> 00:22:56,010
it really doing for you and one thing I

00:22:54,049 --> 00:22:59,340
would also like to point out is

00:22:56,010 --> 00:23:02,669
historically in the data center with any

00:22:59,340 --> 00:23:07,890
complex hardware offload it really a

00:23:02,669 --> 00:23:09,630
pain to to get it to deployment scaling

00:23:07,890 --> 00:23:12,509
is scaling these sort of things really

00:23:09,630 --> 00:23:15,029
hard so I mentioned the previous

00:23:12,509 --> 00:23:17,579
we have five basic offloads it turns out

00:23:15,029 --> 00:23:20,209
they were really as far as I know the

00:23:17,579 --> 00:23:22,949
only really wide scale widely spread

00:23:20,209 --> 00:23:26,190
deployed offloads that's not the thing

00:23:22,949 --> 00:23:29,070
we don't want other offload solutions I

00:23:26,190 --> 00:23:31,379
think generic BPF offload sounds really

00:23:29,070 --> 00:23:33,659
exciting but bear in mind this stuff is

00:23:31,379 --> 00:23:35,539
really hard to deploy at scale and the

00:23:33,659 --> 00:23:39,539
reason is hard to deploy at scale is

00:23:35,539 --> 00:23:41,879
because we kind of encounter Murphy's

00:23:39,539 --> 00:23:44,789
Law continuously edge conditions will

00:23:41,879 --> 00:23:46,499
pop up a one in a million have been in a

00:23:44,789 --> 00:23:47,789
large-scale data center happens like

00:23:46,499 --> 00:23:50,609
every other minute or something like

00:23:47,789 --> 00:23:52,529
that so that's the issue and that's why

00:23:50,609 --> 00:23:55,709
it's really hard to to get the offload

00:23:52,529 --> 00:23:57,389
into data centers we also have to

00:23:55,709 --> 00:23:59,099
consider how to how to rectify those

00:23:57,389 --> 00:24:02,039
advanced off floods with less is more

00:23:59,099 --> 00:24:03,749
sometimes listening to too kind of both

00:24:02,039 --> 00:24:06,749
sides of this argument seems like they

00:24:03,749 --> 00:24:08,789
can contradict each other for moving

00:24:06,749 --> 00:24:11,329
forward exactly how to lessons more and

00:24:08,789 --> 00:24:16,409
any advanced hardware off words how they

00:24:11,329 --> 00:24:18,539
play together well and then the last

00:24:16,409 --> 00:24:19,859
bullet actually I kind of thought about

00:24:18,539 --> 00:24:26,309
this with some of the people or

00:24:19,859 --> 00:24:28,529
discussion in TC if we also p for you

00:24:26,309 --> 00:24:31,529
than TC but we don't actually have an

00:24:28,529 --> 00:24:33,119
implementation of p4 on the host but

00:24:31,529 --> 00:24:35,459
they're really constitute an offload

00:24:33,119 --> 00:24:38,929
it's kind of a philosophical question I

00:24:35,459 --> 00:24:42,659
think that's more of a kernel bypass and

00:24:38,929 --> 00:24:45,629
the problem there is if we offload

00:24:42,659 --> 00:24:47,729
something from the colonel to a specific

00:24:45,629 --> 00:24:50,459
the specific piece of hardware and we

00:24:47,729 --> 00:24:52,019
don't have a kernel fallback that create

00:24:50,459 --> 00:24:52,900
kind of creates a little bit of a gap

00:24:52,019 --> 00:24:56,320
and a little bit

00:24:52,900 --> 00:24:59,350
of Reliance of the colonel on a specific

00:24:56,320 --> 00:25:01,390
piece of hardware so the news isn't in

00:24:59,350 --> 00:25:05,380
the p4 I think John mentioned that

00:25:01,390 --> 00:25:07,660
there's a p40 BPF compiler so I think by

00:25:05,380 --> 00:25:10,690
that definition we actually do have p4

00:25:07,660 --> 00:25:13,300
in the colonel by virtue of compiling

00:25:10,690 --> 00:25:15,130
into the EPF so good news is we should

00:25:13,300 --> 00:25:17,050
never have to actually implement p4 in

00:25:15,130 --> 00:25:24,540
the kernel I think that would be a not a

00:25:17,050 --> 00:25:27,190
good thing to do so turning the ipv6 I

00:25:24,540 --> 00:25:30,280
mean I don't know what to say ipv6 if

00:25:27,190 --> 00:25:32,850
you look at the statistics if you look

00:25:30,280 --> 00:25:35,530
at the graphs it's an exponential curve

00:25:32,850 --> 00:25:39,400
I know we've been saying for a long time

00:25:35,530 --> 00:25:41,530
it's coming but what about 12% that's up

00:25:39,400 --> 00:25:45,550
us I believe it's like twenty eight

00:25:41,530 --> 00:25:48,280
percent we have instances of large data

00:25:45,550 --> 00:25:51,580
centers running I could just be ipv6

00:25:48,280 --> 00:25:52,840
only obviously Facebook was one of the

00:25:51,580 --> 00:25:54,340
first to do that but I believe other

00:25:52,840 --> 00:25:57,790
data centers are going to quickly follow

00:25:54,340 --> 00:26:02,350
suit there's also been talk even an ietf

00:25:57,790 --> 00:26:04,660
how do we sunset ipv4 so I've been

00:26:02,350 --> 00:26:06,970
working on ipv6 actually from the

00:26:04,660 --> 00:26:08,950
beginning and watching it through the

00:26:06,970 --> 00:26:11,200
years so just the fact that people in

00:26:08,950 --> 00:26:13,570
the standards committee nitey up or even

00:26:11,200 --> 00:26:15,970
suggesting that it's time to to sunset I

00:26:13,570 --> 00:26:19,000
think forth it's amazing amazing

00:26:15,970 --> 00:26:22,630
accomplishment what it means to us

00:26:19,000 --> 00:26:27,310
though is when we get patches when we do

00:26:22,630 --> 00:26:31,060
development please ipv6 is important

00:26:27,310 --> 00:26:34,030
please test ipv6 I would love to see us

00:26:31,060 --> 00:26:36,850
get to the point where patches come into

00:26:34,030 --> 00:26:38,890
the kernel that support ipv6 and the

00:26:36,850 --> 00:26:41,920
statement is we'll get to ipv4 later on

00:26:38,890 --> 00:26:43,410
that would be a huge accomplishment any

00:26:41,920 --> 00:26:45,840
what kind of the other way around so

00:26:43,410 --> 00:26:48,130
bear in mind this is

00:26:45,840 --> 00:26:50,080
we have companies with people who are

00:26:48,130 --> 00:26:52,150
living on this stuff it can't be

00:26:50,080 --> 00:26:55,420
considered a secondary thing at this

00:26:52,150 --> 00:26:58,180
point we saw this unique area with

00:26:55,420 --> 00:27:02,050
respect to performance obviously we've

00:26:58,180 --> 00:27:05,530
done a lot with that but testing them

00:27:02,050 --> 00:27:08,430
with ipv6 and continuing with good

00:27:05,530 --> 00:27:14,140
development should resolve that so

00:27:08,430 --> 00:27:16,360
protocols we're kind of on the rise of

00:27:14,140 --> 00:27:21,460
UDP on the Internet I think that for

00:27:16,360 --> 00:27:25,390
various reasons tcp won't move dwindle

00:27:21,460 --> 00:27:26,740
but a lot of new applications obviously

00:27:25,390 --> 00:27:30,040
we're seeing new transport protocols

00:27:26,740 --> 00:27:33,070
quick as a good example will be UDP base

00:27:30,040 --> 00:27:35,040
so the historical problem with UDP or

00:27:33,070 --> 00:27:37,390
any other protocol and the internet was

00:27:35,040 --> 00:27:40,480
does it get through the internet two

00:27:37,390 --> 00:27:43,500
routers or switches actually routed tcp

00:27:40,480 --> 00:27:47,710
/ IP v4 always has been the safe bet

00:27:43,500 --> 00:27:50,170
ipv6 was kind of the first volley in the

00:27:47,710 --> 00:27:52,060
war of getting the internet to change to

00:27:50,170 --> 00:27:54,840
use a different protocol we saw how that

00:27:52,060 --> 00:27:58,360
goes hopefully the transition the UDP

00:27:54,840 --> 00:28:01,030
won't be nearly as bad but be belief

00:27:58,360 --> 00:28:03,460
about UDP is that it is the protocol

00:28:01,030 --> 00:28:06,670
that's amenable to the internet what you

00:28:03,460 --> 00:28:10,000
don't see for instances sctp or other

00:28:06,670 --> 00:28:11,650
new protocols those seem less likely but

00:28:10,000 --> 00:28:13,420
if he actually has some advantages it's

00:28:11,650 --> 00:28:15,490
a fairly lightweight protocol if we can

00:28:13,420 --> 00:28:17,650
get it through the internet we can use

00:28:15,490 --> 00:28:21,610
things like dtl labs to hide transport

00:28:17,650 --> 00:28:24,520
layers so I think the conclusion from

00:28:21,610 --> 00:28:26,880
this for us is that UDP is as important

00:28:24,520 --> 00:28:30,190
UDP performance is going to be important

00:28:26,880 --> 00:28:34,300
optimizing this I think that there are

00:28:30,190 --> 00:28:37,180
opportunities with BPF to maybe do UDP

00:28:34,300 --> 00:28:40,690
and application layer protocol offloads

00:28:37,180 --> 00:28:41,290
for instance a GRE ruggiero presume UDP

00:28:40,690 --> 00:28:43,990
applica

00:28:41,290 --> 00:28:46,780
pation might come to be I really like

00:28:43,990 --> 00:28:49,450
that model by the way because we don't

00:28:46,780 --> 00:28:51,450
have to put application specific code in

00:28:49,450 --> 00:28:54,190
the kernel with something like BPF

00:28:51,450 --> 00:28:56,530
there's a huge value in that it opens up

00:28:54,190 --> 00:28:59,350
a lot of ability to program the colonel

00:28:56,530 --> 00:29:01,300
without actually programming the colonel

00:28:59,350 --> 00:29:05,910
and writing parental code so it's a

00:29:01,300 --> 00:29:05,910
clear win for BPF in that regard so

00:29:08,040 --> 00:29:16,060
mobility this is this is absolutely

00:29:12,400 --> 00:29:18,850
critical this world of IOT everything

00:29:16,060 --> 00:29:21,370
will be mobile I know at companies like

00:29:18,850 --> 00:29:25,950
Facebook and Google we've been mobile

00:29:21,370 --> 00:29:28,090
first mentality for a few years the

00:29:25,950 --> 00:29:30,460
demographics everything shows it's all

00:29:28,090 --> 00:29:32,860
about mobile at this point so we want

00:29:30,460 --> 00:29:39,840
though is a seamless and transparent

00:29:32,860 --> 00:29:42,310
mobility with low latency now mobility

00:29:39,840 --> 00:29:45,420
we have to think in terms of what are

00:29:42,310 --> 00:29:48,490
the solutions how do we make networking

00:29:45,420 --> 00:29:51,060
TCPA mobile and I think I know they're

00:29:48,490 --> 00:29:53,950
kind of three possible solutions to this

00:29:51,060 --> 00:29:56,320
at the do at the application layer or

00:29:53,950 --> 00:29:59,290
multiple connections somehow do it at a

00:29:56,320 --> 00:30:01,710
network layer or this associated

00:29:59,290 --> 00:30:04,150
location which I'll describe in a minute

00:30:01,710 --> 00:30:06,910
so application layer I think this is the

00:30:04,150 --> 00:30:09,580
most common form of mobility and it can

00:30:06,910 --> 00:30:12,610
be really trivial your smartphone just

00:30:09,580 --> 00:30:15,970
opens up connections to both your Wi-Fi

00:30:12,610 --> 00:30:17,620
and your mobile carrier and as you move

00:30:15,970 --> 00:30:18,820
around it just picks which the

00:30:17,620 --> 00:30:22,500
application actually picks which

00:30:18,820 --> 00:30:26,370
connection to use it's kind of dumb it

00:30:22,500 --> 00:30:28,840
has several cons obviously if we are

00:30:26,370 --> 00:30:30,970
driving around and we have to

00:30:28,840 --> 00:30:33,730
establish tcp connections just because

00:30:30,970 --> 00:30:35,950
we went to a new base station in Mobile

00:30:33,730 --> 00:30:39,880
there's a lot of costs associated with

00:30:35,950 --> 00:30:42,039
that fortunately today it's it's not so

00:30:39,880 --> 00:30:43,929
critical because it's humans using this

00:30:42,039 --> 00:30:47,140
so for instance if you're watching a

00:30:43,929 --> 00:30:50,049
video and we have to switch networks and

00:30:47,140 --> 00:30:52,360
there's a reconnection presumably video

00:30:50,049 --> 00:30:54,250
buffering would make it seamless but in

00:30:52,360 --> 00:30:55,900
the world of machine a machine a

00:30:54,250 --> 00:30:58,210
self-driving cars this is going to be a

00:30:55,900 --> 00:31:00,100
major problem if we have to continuously

00:30:58,210 --> 00:31:04,980
reestablish tcp and take those extra

00:31:00,100 --> 00:31:08,860
round trip times I would mention MP TCP

00:31:04,980 --> 00:31:12,390
has kind of a variant of this this would

00:31:08,860 --> 00:31:15,220
have obviously been around a long time I

00:31:12,390 --> 00:31:17,320
think for for pretty good reason that's

00:31:15,220 --> 00:31:19,750
not yet in Linux maybe someday will be I

00:31:17,320 --> 00:31:22,090
don't think it particularly solves any

00:31:19,750 --> 00:31:24,549
this problem very differently except it

00:31:22,090 --> 00:31:26,140
makes the multi multi connection

00:31:24,549 --> 00:31:30,779
transparent to the application which

00:31:26,140 --> 00:31:33,220
prolly has significant value but the

00:31:30,779 --> 00:31:35,309
network in the network topology the

00:31:33,220 --> 00:31:37,179
multi connections aren't visible to

00:31:35,309 --> 00:31:40,390
transport layer so I think that's still

00:31:37,179 --> 00:31:43,659
kind of a problem network layer mobility

00:31:40,390 --> 00:31:49,120
is another solution I guess this is kind

00:31:43,659 --> 00:31:51,309
of a follow-on on IP mobility we have I

00:31:49,120 --> 00:31:54,309
la that I kind of presented yesterday

00:31:51,309 --> 00:31:57,190
this is one solution the idea of using

00:31:54,309 --> 00:31:58,580
ila or even encapsulation and mobility

00:31:57,190 --> 00:32:01,039
is that as

00:31:58,580 --> 00:32:03,860
move around switch from network to

00:32:01,039 --> 00:32:06,260
network your IP address basically goes

00:32:03,860 --> 00:32:08,779
with you and the network figures out how

00:32:06,260 --> 00:32:10,820
to do the routing to make sure packets

00:32:08,779 --> 00:32:13,190
get to you and informs everyone else

00:32:10,820 --> 00:32:14,059
where you're at so presumably this is

00:32:13,190 --> 00:32:17,590
something that can be implemented

00:32:14,059 --> 00:32:20,659
completely in the network without any

00:32:17,590 --> 00:32:23,000
visibility on on the end of ISO your

00:32:20,659 --> 00:32:24,799
smart phone doesn't need to know what

00:32:23,000 --> 00:32:27,529
it's connected to or even the fact that

00:32:24,799 --> 00:32:31,429
it's it's which networks this can to

00:32:27,529 --> 00:32:34,159
large extent be done in the network the

00:32:31,429 --> 00:32:37,840
pole this is as I mentioned it's

00:32:34,159 --> 00:32:39,950
transparent to the network problem is

00:32:37,840 --> 00:32:42,649
crossing carriers becomes kind of

00:32:39,950 --> 00:32:45,200
difficult so there's a lot of

00:32:42,649 --> 00:32:46,850
information in terms of mapping that

00:32:45,200 --> 00:32:49,130
needs to be exchanged between parties

00:32:46,850 --> 00:32:51,580
who participate in this so while you're

00:32:49,130 --> 00:32:53,450
in one network it's probably pretty easy

00:32:51,580 --> 00:32:56,179
trying to figure out how this would work

00:32:53,450 --> 00:32:58,639
between say verizon and AT&T trying to

00:32:56,179 --> 00:33:00,710
exchange information about mobile

00:32:58,639 --> 00:33:06,130
parties a little bit more challenging so

00:33:00,710 --> 00:33:10,340
that that might make this a little less

00:33:06,130 --> 00:33:12,409
applicable in some use cases so this

00:33:10,340 --> 00:33:15,320
association location is is probably a

00:33:12,409 --> 00:33:19,309
kind of a newer one of these and I think

00:33:15,320 --> 00:33:21,880
this idea is really being inspired by

00:33:19,309 --> 00:33:24,409
quick I'm not sure if they really fully

00:33:21,880 --> 00:33:27,669
fleshed out the ramifications of this

00:33:24,409 --> 00:33:30,889
but the idea is that instead of

00:33:27,669 --> 00:33:34,039
identifying say TCP connection by IP

00:33:30,889 --> 00:33:36,019
addresses and port numbers we identify

00:33:34,039 --> 00:33:39,370
the connection by some sort of

00:33:36,019 --> 00:33:42,260
connection identifier that is within

00:33:39,370 --> 00:33:44,750
within the packet and the connection

00:33:42,260 --> 00:33:47,630
identifier only has meaning to the

00:33:44,750 --> 00:33:49,940
sender and the receiver so as long as I

00:33:47,630 --> 00:33:52,580
have a path from from the sender and

00:33:49,940 --> 00:33:54,919
receiver and I send this packet with a

00:33:52,580 --> 00:33:56,760
connection identifier it's only at the

00:33:54,919 --> 00:33:59,010
receiver there's a look at that can

00:33:56,760 --> 00:34:00,720
action identifier and as long as that's

00:33:59,010 --> 00:34:04,050
unique with all the other connections on

00:34:00,720 --> 00:34:08,159
the host it can identify that as packet

00:34:04,050 --> 00:34:10,230
as being part of the connection so what

00:34:08,159 --> 00:34:13,860
this gives us is we no longer have to

00:34:10,230 --> 00:34:16,470
worry about IP addresses and ports as

00:34:13,860 --> 00:34:19,380
the meaningful into the connection and

00:34:16,470 --> 00:34:22,040
this really becomes evident when you

00:34:19,380 --> 00:34:25,530
consider what happens when an at

00:34:22,040 --> 00:34:28,200
translation times out so if i have a tcp

00:34:25,530 --> 00:34:31,370
connection through an at the nat box

00:34:28,200 --> 00:34:35,130
creates a stateful association between

00:34:31,370 --> 00:34:37,169
the packets that are coming in and the

00:34:35,130 --> 00:34:40,110
translated packets as long as that state

00:34:37,169 --> 00:34:42,780
exists everybody's happy if that state

00:34:40,110 --> 00:34:45,389
goes away and my client sends a new

00:34:42,780 --> 00:34:48,090
packet the nat device won't have a state

00:34:45,389 --> 00:34:51,690
and it has to drop the whole connection

00:34:48,090 --> 00:34:53,970
we cannot recover from that and as a

00:34:51,690 --> 00:34:56,250
result of this we unfortunately ended up

00:34:53,970 --> 00:34:59,760
in this crazy world where we have to

00:34:56,250 --> 00:35:02,730
design applications or tcp to constantly

00:34:59,760 --> 00:35:05,610
send keep lives just to keep potentially

00:35:02,730 --> 00:35:09,270
keep nat state alive regardless if it's

00:35:05,610 --> 00:35:11,400
there or so there's a whole number of

00:35:09,270 --> 00:35:13,800
wasted packets on the internet just from

00:35:11,400 --> 00:35:16,200
people lives disassociate a location

00:35:13,800 --> 00:35:18,570
this problem doesn't exist if the

00:35:16,200 --> 00:35:20,970
translation changes say say I'm using

00:35:18,570 --> 00:35:24,090
UDP with them quick if the translation

00:35:20,970 --> 00:35:25,710
changes that's fine well when the client

00:35:24,090 --> 00:35:28,200
sends a new packet it'll get a new set

00:35:25,710 --> 00:35:30,510
of IP addresses possibly new set of

00:35:28,200 --> 00:35:32,820
ports as long it goes through the same

00:35:30,510 --> 00:35:34,860
destination the receiver doesn't care

00:35:32,820 --> 00:35:36,270
about the port numbers all they care is

00:35:34,860 --> 00:35:40,280
about is what this connection identifier

00:35:36,270 --> 00:35:43,170
is now there is a huge caveat to this

00:35:40,280 --> 00:35:44,850
strong security is required it would be

00:35:43,170 --> 00:35:48,420
far too easy for somebody to hijack

00:35:44,850 --> 00:35:51,030
connections just by guessing connection

00:35:48,420 --> 00:35:52,170
identifiers so is only a strong security

00:35:51,030 --> 00:35:54,690
to validate connection identifier

00:35:52,170 --> 00:35:59,730
there's a lot of promise in this

00:35:54,690 --> 00:36:02,730
approach one convo is that if you do

00:35:59,730 --> 00:36:05,430
move say either an a or your Klein

00:36:02,730 --> 00:36:09,359
moves from network to network the server

00:36:05,430 --> 00:36:10,710
one actually know the new location so so

00:36:09,359 --> 00:36:12,930
the server has to know where to send

00:36:10,710 --> 00:36:14,160
packets so we expect that the client

00:36:12,930 --> 00:36:16,290
would have to actually send the first

00:36:14,160 --> 00:36:21,900
packet after it moves texting at the

00:36:16,290 --> 00:36:26,330
server to be able to send back so last

00:36:21,900 --> 00:36:32,100
but not least on the list is latency so

00:36:26,330 --> 00:36:34,230
not a lot to say were I think we're

00:36:32,100 --> 00:36:38,010
approaching latency and all the right

00:36:34,230 --> 00:36:42,210
aspects the the middle ground latency I

00:36:38,010 --> 00:36:43,890
think is the one area these have except

00:36:42,210 --> 00:36:47,190
mentioned the middle ground protocols

00:36:43,890 --> 00:36:48,359
that the latency sensitive protocols

00:36:47,190 --> 00:36:51,030
that we expect to have about 10

00:36:48,359 --> 00:36:53,340
milliseconds or less we will have to

00:36:51,030 --> 00:36:55,950
kind of consider if there's any

00:36:53,340 --> 00:36:58,350
considerations in the kernel for those

00:36:55,950 --> 00:37:00,510
but other than that I think most of the

00:36:58,350 --> 00:37:04,020
most of the work here is actually pretty

00:37:00,510 --> 00:37:07,280
well promoting the the latency story

00:37:04,020 --> 00:37:07,280
Seneca were doing really well on that

00:37:07,730 --> 00:37:14,730
and so with that I also want to thank

00:37:11,730 --> 00:37:18,030
the organizers of netdev I thought it

00:37:14,730 --> 00:37:22,740
was norms so far fantastic conference a

00:37:18,030 --> 00:37:25,859
lot of good things I think yesterday's

00:37:22,740 --> 00:37:29,810
dinner was great and thank you for

00:37:25,859 --> 00:37:29,810
having me any question

00:37:34,350 --> 00:37:39,450
so Tom you had a slide on IOT security

00:37:37,170 --> 00:37:42,630
and in my opinion you left out the

00:37:39,450 --> 00:37:46,170
elephant in the room even if you had

00:37:42,630 --> 00:37:48,540
everything encrypted and everything else

00:37:46,170 --> 00:37:51,270
on your slide was taken care of what's

00:37:48,540 --> 00:37:54,660
the update model because even if you are

00:37:51,270 --> 00:37:57,590
completely secure if every Phillips

00:37:54,660 --> 00:38:00,270
light bulb in the world has a root whole

00:37:57,590 --> 00:38:01,740
you could shut down the lights in the

00:38:00,270 --> 00:38:04,860
middle of a surgery in a hospital

00:38:01,740 --> 00:38:07,560
somewhere I I meant to put that one on

00:38:04,860 --> 00:38:12,000
the slide that should be that should be

00:38:07,560 --> 00:38:13,410
a story in itself be there to to threats

00:38:12,000 --> 00:38:16,980
too high or tea right now one is this

00:38:13,410 --> 00:38:18,750
basic security one is I or two too many

00:38:16,980 --> 00:38:21,360
home routers for instance right now are

00:38:18,750 --> 00:38:23,190
not updated and that's as that's an

00:38:21,360 --> 00:38:26,040
order of magnitude smaller problem than

00:38:23,190 --> 00:38:28,350
IOT update yeah it's kind of fundamental

00:38:26,040 --> 00:38:30,630
if we don't solve the problem it won't

00:38:28,350 --> 00:38:34,140
happen the internet cannot move forward

00:38:30,630 --> 00:38:37,650
unless we solve the update problem the

00:38:34,140 --> 00:38:41,700
stories so this is thinking about your

00:38:37,650 --> 00:38:44,100
your transfers over UDP yesterday I will

00:38:41,700 --> 00:38:48,000
acknowledge in some extent we're putting

00:38:44,100 --> 00:38:50,850
on the problem in something like that it

00:38:48,000 --> 00:38:52,050
it does not solve the underlying problem

00:38:50,850 --> 00:38:54,990
the underlying problem is actually

00:38:52,050 --> 00:38:59,190
pretty simple we cannot upgrade update

00:38:54,990 --> 00:39:01,260
critical software in the field then a

00:38:59,190 --> 00:39:03,060
dub network like networking doesn't

00:39:01,260 --> 00:39:05,370
matter or your rest of your kernel and

00:39:03,060 --> 00:39:07,580
you're even whatever application is

00:39:05,370 --> 00:39:10,020
critical you can't do that securely

00:39:07,580 --> 00:39:13,320
reliability reliably and quickly and

00:39:10,020 --> 00:39:15,000
efficiently it's not going to happen but

00:39:13,320 --> 00:39:17,970
perhaps further issues that we've

00:39:15,000 --> 00:39:21,180
allowed vendors to all basically agree

00:39:17,970 --> 00:39:23,490
to say there's only a limit to how far

00:39:21,180 --> 00:39:24,900
we have to support our devices in in the

00:39:23,490 --> 00:39:26,610
world today and then once we get past

00:39:24,900 --> 00:39:28,680
this time period we don't have to worry

00:39:26,610 --> 00:39:29,940
about them anymore and I about why we

00:39:28,680 --> 00:39:33,120
have the user experience we have right

00:39:29,940 --> 00:39:34,740
now and then 20 years later it's still

00:39:33,120 --> 00:39:36,780
supporting this legacy stuff and this

00:39:34,740 --> 00:39:38,760
output of ossification happens right if

00:39:36,780 --> 00:39:41,460
we can't change if we can't fix stuff we

00:39:38,760 --> 00:39:44,640
can't change change stuff for the better

00:39:41,460 --> 00:39:45,119
it it's a huge problem I don't know if

00:39:44,640 --> 00:39:48,509
we can do

00:39:45,119 --> 00:39:50,009
in particular it's obviously it's

00:39:48,509 --> 00:39:54,029
obvious to me we're one small part of

00:39:50,009 --> 00:39:56,999
this as I mentioned the transport over

00:39:54,029 --> 00:39:58,650
UDP is just a band-aid yeah we were

00:39:56,999 --> 00:40:00,119
having that combat exact conversation at

00:39:58,650 --> 00:40:02,249
lunch the other day what does it mean if

00:40:00,119 --> 00:40:04,740
if somebody can hack into your light

00:40:02,249 --> 00:40:07,650
bulb because they've been enough update

00:40:04,740 --> 00:40:10,230
the linux on the light bulb i don't know

00:40:07,650 --> 00:40:12,089
i mean you know again i'm hoping in 100

00:40:10,230 --> 00:40:14,039
years or whatever our kids or i guess

00:40:12,089 --> 00:40:15,900
our great-grandkids just look back and

00:40:14,039 --> 00:40:18,779
laugh that this is ever considered

00:40:15,900 --> 00:40:21,180
problem i do believe it will be solved

00:40:18,779 --> 00:40:22,859
but i mean what can i say it's going to

00:40:21,180 --> 00:40:24,480
take a lot of hard work and you know

00:40:22,859 --> 00:40:27,210
this is why we're here yeah i actually

00:40:24,480 --> 00:40:29,160
think it's a political problem you

00:40:27,210 --> 00:40:31,589
actually have to do politics and put in

00:40:29,160 --> 00:40:33,720
like lawyers to say you have to support

00:40:31,589 --> 00:40:35,970
these devices and we'll sue you if you

00:40:33,720 --> 00:40:41,970
don't update them also it's not going to

00:40:35,970 --> 00:40:44,160
happen it comes out of your business

00:40:41,970 --> 00:40:48,299
case decision if it's cheaper to be

00:40:44,160 --> 00:40:50,910
insecure and the cheaper is a political

00:40:48,299 --> 00:40:52,410
legal costs it's absolutely better to be

00:40:50,910 --> 00:40:55,950
insecure if you're trying to get to

00:40:52,410 --> 00:40:58,289
market you an insecure product and you

00:40:55,950 --> 00:41:02,789
ship it otherwise you somebody else

00:40:58,289 --> 00:41:04,650
sells it in front of you it's even worse

00:41:02,789 --> 00:41:06,269
than that though because companies will

00:41:04,650 --> 00:41:07,769
go bankrupt and even if they were

00:41:06,269 --> 00:41:09,930
supporting stuff they will stop

00:41:07,769 --> 00:41:13,859
supporting stuff and you'll have a rule

00:41:09,930 --> 00:41:15,539
it's abandoned perhaps the customer

00:41:13,859 --> 00:41:17,880
needs to agree that the device is only

00:41:15,539 --> 00:41:19,589
rented and they rent it for 20 years or

00:41:17,880 --> 00:41:21,480
whatever and then you know it stops

00:41:19,589 --> 00:41:26,039
working that's the only solution that

00:41:21,480 --> 00:41:28,049
I've heard know it I don't know I mean I

00:41:26,039 --> 00:41:30,900
think it's our problem with fault but um

00:41:28,049 --> 00:41:32,069
yeah it's a huge challenge oh I wouldn't

00:41:30,900 --> 00:41:33,930
say something else first thanks for

00:41:32,069 --> 00:41:38,339
covering this this or the wide swath of

00:41:33,930 --> 00:41:39,780
things um ipv6 is dear to my heart novi

00:41:38,339 --> 00:41:44,490
forum code need to apply to my

00:41:39,780 --> 00:41:45,690
basal get rejected but and I'm you to

00:41:44,490 --> 00:41:47,460
pee and mobility I think we're actually

00:41:45,690 --> 00:41:49,680
starting to get that working with quick

00:41:47,460 --> 00:41:51,510
and connection IDs and multipathing and

00:41:49,680 --> 00:41:54,960
phosphate over so that's that's really

00:41:51,510 --> 00:41:58,740
great yeah one thing I wanted to say

00:41:54,960 --> 00:42:01,140
though that's a bit concerning to me is

00:41:58,740 --> 00:42:05,450
that you said everything needs to be

00:42:01,140 --> 00:42:07,650
secure and encrypted and I agree but

00:42:05,450 --> 00:42:09,570
we're putting an awful lot of eggs in

00:42:07,650 --> 00:42:15,740
one basket if we rely on one layer of

00:42:09,570 --> 00:42:15,740
TLS for everything then we're gonna have

00:42:15,860 --> 00:42:23,430
extremely powerful you know state actors

00:42:21,170 --> 00:42:26,420
trying to subvert that and trying to

00:42:23,430 --> 00:42:29,640
compel people to hand over the keys and

00:42:26,420 --> 00:42:31,500
those actors maybe you know and you're

00:42:29,640 --> 00:42:33,390
seeing this in enterprises today right

00:42:31,500 --> 00:42:35,610
the problem is the TLS is is boolean

00:42:33,390 --> 00:42:37,530
right either you have it and the cert is

00:42:35,610 --> 00:42:39,300
there and it's secure or somebody gets

00:42:37,530 --> 00:42:42,180
your cert and it's totally insecure and

00:42:39,300 --> 00:42:44,130
so if we put too many eggs in this run

00:42:42,180 --> 00:42:46,170
TLS basket we risk that you know some

00:42:44,130 --> 00:42:47,670
corporation that says I own this device

00:42:46,170 --> 00:42:51,420
I need to be able to man in the middle

00:42:47,670 --> 00:42:54,810
everything can can subvert all the

00:42:51,420 --> 00:42:56,100
security or or some government says you

00:42:54,810 --> 00:42:58,800
know I need to be able to man in the

00:42:56,100 --> 00:43:01,260
middle every sir in my country because

00:42:58,800 --> 00:43:02,730
whatever then they subvert all the

00:43:01,260 --> 00:43:05,160
security and I think we need to think

00:43:02,730 --> 00:43:07,830
about this and say okay well we should

00:43:05,160 --> 00:43:10,260
build a layered security model because

00:43:07,830 --> 00:43:12,360
otherwise you know anyone who gets am a

00:43:10,260 --> 00:43:14,430
root cert on a device controls

00:43:12,360 --> 00:43:20,130
everything is it basically infinitely

00:43:14,430 --> 00:43:22,740
powerful the firewall vendors router

00:43:20,130 --> 00:43:25,470
vendors they in some sense they're

00:43:22,740 --> 00:43:28,170
terrified of encryption encrypt

00:43:25,470 --> 00:43:31,770
everything they do want to be part of

00:43:28,170 --> 00:43:34,620
this there are efforts to kind of allow

00:43:31,770 --> 00:43:37,830
a leakage of information so they could

00:43:34,620 --> 00:43:41,750
do they could provide some layers of

00:43:37,830 --> 00:43:44,510
security they think of it more as as

00:43:41,750 --> 00:43:46,710
getting back something that's been lost

00:43:44,510 --> 00:43:48,359
so for instance if you think of a

00:43:46,710 --> 00:43:51,180
firewall you know they do

00:43:48,359 --> 00:43:52,619
provide some okay and provide a lot of

00:43:51,180 --> 00:43:56,309
value i mean i run when a firewall at

00:43:52,619 --> 00:43:58,950
home because we can filter out out bad

00:43:56,309 --> 00:44:00,390
guys attacking but in the encrypted

00:43:58,950 --> 00:44:03,359
world they lose that so they do have

00:44:00,390 --> 00:44:06,119
some concepts of bringing the stuff back

00:44:03,359 --> 00:44:10,220
in the challenge though is where do you

00:44:06,119 --> 00:44:12,390
draw the line what so just by virtue of

00:44:10,220 --> 00:44:14,430
giving more information to the network

00:44:12,390 --> 00:44:16,049
to make it more secure i'm also giving

00:44:14,430 --> 00:44:18,440
more information to the network which

00:44:16,049 --> 00:44:22,380
can be used against me and this is a

00:44:18,440 --> 00:44:24,890
difficult conundrum because the in the

00:44:22,380 --> 00:44:27,779
easiest view of the internet we have

00:44:24,890 --> 00:44:29,339
layer to layer you later for later three

00:44:27,779 --> 00:44:31,799
switches and routers they're only

00:44:29,339 --> 00:44:34,710
supposed to look at IP they would never

00:44:31,799 --> 00:44:38,609
intended to implement security reality

00:44:34,710 --> 00:44:40,349
we kind of got into that situation so I

00:44:38,609 --> 00:44:42,180
I don't mean I I don't know how to

00:44:40,349 --> 00:44:44,160
answer the question and yet yes we have

00:44:42,180 --> 00:44:47,970
layers of security but we do know that

00:44:44,160 --> 00:44:49,589
mmm security is sort of a must if we can

00:44:47,970 --> 00:44:51,359
add to that I think its value but I

00:44:49,589 --> 00:44:54,960
definitely think I'm then secure it is

00:44:51,359 --> 00:44:58,289
going to be the norm to clear agree with

00:44:54,960 --> 00:45:00,660
all that I'm just saying let's be

00:44:58,289 --> 00:45:04,319
careful about how many parties we array

00:45:00,660 --> 00:45:06,239
against one security because we only

00:45:04,319 --> 00:45:11,069
have like you and Simon soon security is

00:45:06,239 --> 00:45:13,259
using TLS it's just 11 security measure

00:45:11,069 --> 00:45:15,239
right a lot of actors would like to

00:45:13,259 --> 00:45:17,279
subvert that security measure now you

00:45:15,239 --> 00:45:18,809
know we've got employers wanting to

00:45:17,279 --> 00:45:22,319
snoop on you we've got you know

00:45:18,809 --> 00:45:25,140
government's wanting to snoop on you you

00:45:22,319 --> 00:45:26,789
know let's maybe let's try and see if we

00:45:25,140 --> 00:45:28,499
can avoid having the root

00:45:26,789 --> 00:45:31,049
in the infrastructure fighters also

00:45:28,499 --> 00:45:32,849
arrayed against you in this in this

00:45:31,049 --> 00:45:35,429
quest for android security i'm wondering

00:45:32,849 --> 00:45:37,499
what we can do there now i'm glad that

00:45:35,429 --> 00:45:39,329
the i'm glad that this bloodbath got

00:45:37,499 --> 00:45:41,999
shot down at the ITF they still get me

00:45:39,329 --> 00:45:45,150
wrong i agree with you but I'm just

00:45:41,999 --> 00:45:46,799
saying if if everybody everybody stands

00:45:45,150 --> 00:45:49,109
to gain by having a man-in-the-middle

00:45:46,799 --> 00:45:51,359
cert on the device then everybody loses

00:45:49,109 --> 00:45:55,019
and let's think about what we can do to

00:45:51,359 --> 00:45:59,069
limit the damage but next time so you

00:45:55,019 --> 00:46:01,049
made a comment about XD p and b PF and

00:45:59,069 --> 00:46:02,669
p4 and that you didn't want to see a

00:46:01,049 --> 00:46:05,939
peaceful implementation in the colonel

00:46:02,669 --> 00:46:09,329
and I think because it's true that you

00:46:05,939 --> 00:46:10,619
can translate p42 bps and load that into

00:46:09,329 --> 00:46:14,489
the kernel but you can't really

00:46:10,619 --> 00:46:16,169
translate BPF back to p4 so I think

00:46:14,489 --> 00:46:18,119
we're going to have to end up with a p4

00:46:16,169 --> 00:46:19,949
implementation in the kernel simply

00:46:18,119 --> 00:46:24,029
because we'll be wanting to be able to

00:46:19,949 --> 00:46:26,099
offload that to the hardware and if you

00:46:24,029 --> 00:46:27,630
translate it in user space and low BPF

00:46:26,099 --> 00:46:31,109
into the kernel you won't be able to

00:46:27,630 --> 00:46:34,369
offload that so like john wants to come

00:46:31,109 --> 00:46:37,829
on that it's sort of an interesting

00:46:34,369 --> 00:46:39,179
question because then you have a kernel

00:46:37,829 --> 00:46:41,099
infrastructure that is only used for

00:46:39,179 --> 00:46:43,709
offloading has no realistic use for

00:46:41,099 --> 00:46:47,219
software right I mean nobody's going to

00:46:43,709 --> 00:46:49,099
actually use it for to run software on

00:46:47,219 --> 00:46:52,650
it's purely there as a hardware

00:46:49,099 --> 00:46:55,369
interface which may be fine i'm just

00:46:52,650 --> 00:46:59,309
saying that that's the implication rate

00:46:55,369 --> 00:47:01,349
it seems very well to have offered

00:46:59,309 --> 00:47:02,999
support for things we can't emulate for

00:47:01,349 --> 00:47:05,880
testing and other situations like that

00:47:02,999 --> 00:47:08,400
so even if the supplement implementation

00:47:05,880 --> 00:47:10,619
is very slow we should probably have it

00:47:08,400 --> 00:47:14,249
just for for testing and compatibility

00:47:10,619 --> 00:47:17,069
all right as long as the white rag work

00:47:14,249 --> 00:47:19,019
but it's not the question is is that all

00:47:17,069 --> 00:47:22,259
flowed at that point or just bypass

00:47:19,019 --> 00:47:23,999
offload implies you had it on the host

00:47:22,259 --> 00:47:26,489
you're getting benefit by putting it

00:47:23,999 --> 00:47:27,689
into the into the device so to me it a

00:47:26,489 --> 00:47:31,469
little bit of a philosophical question

00:47:27,689 --> 00:47:34,060
but why doesn't the people are to BPS

00:47:31,469 --> 00:47:36,520
solve the problem

00:47:34,060 --> 00:47:38,320
because if you load that BPF into the

00:47:36,520 --> 00:47:40,180
device it can into the kernel it can't

00:47:38,320 --> 00:47:42,550
offload it because there is no

00:47:40,180 --> 00:47:44,080
reasonable way to translate back from BP

00:47:42,550 --> 00:47:48,010
f2p well no but if I off like the

00:47:44,080 --> 00:47:50,260
original k4 so they started with the

00:47:48,010 --> 00:47:52,330
original k4 I can get it in and to run

00:47:50,260 --> 00:47:54,180
the chronolock BPF I want to move it to

00:47:52,330 --> 00:47:56,740
the device and I just go back to pay for

00:47:54,180 --> 00:47:59,140
well at this point you're requiring the

00:47:56,740 --> 00:48:00,820
user space tools to be aware of the

00:47:59,140 --> 00:48:03,430
hardware in the system and to basically

00:48:00,820 --> 00:48:05,380
say oh I'm loading a p4 file the system

00:48:03,430 --> 00:48:07,390
doesn't have p4 offload capabilities I

00:48:05,380 --> 00:48:09,820
will translate it to BPF and load it

00:48:07,390 --> 00:48:11,800
that way and that doesn't seem

00:48:09,820 --> 00:48:13,780
conceptually clean but well we already

00:48:11,800 --> 00:48:18,010
have that with before right I mean you

00:48:13,780 --> 00:48:20,910
can't offload a p4 program to something

00:48:18,010 --> 00:48:20,910
that doesn't support before

00:48:26,680 --> 00:48:28,740
you

00:48:32,880 --> 00:48:35,880

YouTube URL: https://www.youtube.com/watch?v=5ZTpQI90Aew


