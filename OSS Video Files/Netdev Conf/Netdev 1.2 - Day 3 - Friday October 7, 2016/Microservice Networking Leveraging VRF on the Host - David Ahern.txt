Title: Microservice Networking Leveraging VRF on the Host - David Ahern
Publication date: 2016-10-07
Playlist: Netdev 1.2 - Day 3 - Friday October 7, 2016
Description: 
	http://netdevconf.org/1.2/session.html?david-ahern
Captions: 
	00:00:10,320 --> 00:00:17,110
okay all right can you hear me all right

00:00:14,700 --> 00:00:18,910
good morning

00:00:17,110 --> 00:00:23,560
you saw my talk yesterday I will try to

00:00:18,910 --> 00:00:25,300
talk a little slower this time so for

00:00:23,560 --> 00:00:26,980
those who don't know I've spent a lot of

00:00:25,300 --> 00:00:29,700
time over the past few years thinking

00:00:26,980 --> 00:00:32,619
about brf virtual routing and forwarding

00:00:29,700 --> 00:00:35,590
specifically for Lennox we weren't an

00:00:32,619 --> 00:00:37,690
implementation that works across Lennox

00:00:35,590 --> 00:00:39,760
all open to all installations of Lennox

00:00:37,690 --> 00:00:42,610
not just switches and routers but

00:00:39,760 --> 00:00:45,340
servers as well as a company committed

00:00:42,610 --> 00:00:48,280
to open networking that's what we said

00:00:45,340 --> 00:00:50,620
about doing some 15 18 months ago was

00:00:48,280 --> 00:00:52,660
working on how to get a proper

00:00:50,620 --> 00:00:55,870
implementation into the Linux networking

00:00:52,660 --> 00:00:58,720
stack so the initial lipman Tate

00:00:55,870 --> 00:01:02,320
implementation was pulled into the 43

00:00:58,720 --> 00:01:05,410
colonel last August and coming around

00:01:02,320 --> 00:01:09,700
nine months later that that version of

00:01:05,410 --> 00:01:12,930
vrf is beginning to show up in a less

00:01:09,700 --> 00:01:17,740
distributions so for example Ubuntu 1604

00:01:12,930 --> 00:01:19,930
has vrf support enabled and the intent

00:01:17,740 --> 00:01:22,900
of this of this tutorial is to get

00:01:19,930 --> 00:01:27,280
people thinking about vrf and how it can

00:01:22,900 --> 00:01:30,340
be used on host servers so you know I'm

00:01:27,280 --> 00:01:33,460
not one to you know really be hyperbolic

00:01:30,340 --> 00:01:36,580
about technologies and and contributions

00:01:33,460 --> 00:01:39,159
and all that kind of stuff but I really

00:01:36,580 --> 00:01:42,010
do think vrf on the host it's going to

00:01:39,159 --> 00:01:48,850
be huge I guarantee it it's gonna be

00:01:42,010 --> 00:01:53,320
huge so the topology in question is a

00:01:48,850 --> 00:01:56,860
typical cost diet across topology where

00:01:53,320 --> 00:01:58,689
you've got two spines for Leafs and some

00:01:56,860 --> 00:02:02,680
number of servers connected to those

00:01:58,689 --> 00:02:05,680
spines and leafs the host servers are

00:02:02,680 --> 00:02:08,830
running stock distributions like a 1604

00:02:05,680 --> 00:02:11,850
evo2 1604 and the intent of those is to

00:02:08,830 --> 00:02:17,829
host containers or virtual machines or

00:02:11,850 --> 00:02:19,870
some kind of micro services so that the

00:02:17,829 --> 00:02:23,350
house are connected to multiple leaps

00:02:19,870 --> 00:02:25,780
giving in ecmp for a default route so

00:02:23,350 --> 00:02:28,050
you can you know better use the the

00:02:25,780 --> 00:02:32,370
bandwidth of the network

00:02:28,050 --> 00:02:33,660
erf because vrf is in lenox proper you

00:02:32,370 --> 00:02:35,160
know it's it exists the same

00:02:33,660 --> 00:02:37,230
implementation exists in the spine

00:02:35,160 --> 00:02:39,540
exists in the leaf exists for the

00:02:37,230 --> 00:02:41,910
servers so the same configuration can be

00:02:39,540 --> 00:02:44,580
used on all of those to set up and

00:02:41,910 --> 00:02:48,780
provide traffic isolation as you want to

00:02:44,580 --> 00:02:50,580
as you want to do for your your setup so

00:02:48,780 --> 00:02:52,440
just make sure all on the same page this

00:02:50,580 --> 00:02:55,860
is what I'm talking about from a typical

00:02:52,440 --> 00:02:57,930
host deployment you've got some number

00:02:55,860 --> 00:02:59,850
of containers those containers going to

00:02:57,930 --> 00:03:02,970
be isolated in this case we're going to

00:02:59,850 --> 00:03:05,400
use vrf as an isolation so we want to

00:03:02,970 --> 00:03:07,260
allow containers within a vrf to be able

00:03:05,400 --> 00:03:08,910
to talk to each other so anything within

00:03:07,260 --> 00:03:11,160
the ver Fred can talk to each other

00:03:08,910 --> 00:03:13,590
anything and vert blue can talk to each

00:03:11,160 --> 00:03:15,930
other but the cross traffic doesn't

00:03:13,590 --> 00:03:19,290
happen right so VR app is that isolation

00:03:15,930 --> 00:03:22,770
mechanism as we extend out to multiple

00:03:19,290 --> 00:03:25,530
hosts same concepts every one of the

00:03:22,770 --> 00:03:28,080
servers the Leafs the spines but all set

00:03:25,530 --> 00:03:31,110
up the same we've got two verbs vrf red

00:03:28,080 --> 00:03:33,750
BRF blue those of UF's provide the

00:03:31,110 --> 00:03:35,910
isolation so that containers running in

00:03:33,750 --> 00:03:38,010
one host inver Fred can talk two

00:03:35,910 --> 00:03:40,980
containers on another host in verse blue

00:03:38,010 --> 00:03:44,250
or invert forehead in the network

00:03:40,980 --> 00:03:46,080
provides the connectivity for it but we

00:03:44,250 --> 00:03:47,850
don't want to allow that cross traffic

00:03:46,080 --> 00:03:52,140
between containers and blue and

00:03:47,850 --> 00:03:53,970
containers and red so the spines and

00:03:52,140 --> 00:03:56,280
Leafs are all running cumulus linux of

00:03:53,970 --> 00:04:00,120
course it's my favorite distribution fee

00:03:56,280 --> 00:04:02,520
unhurt for this demo it's using the

00:04:00,120 --> 00:04:04,590
vagrant box image so that's that's

00:04:02,520 --> 00:04:07,380
available from the listed hachey court

00:04:04,590 --> 00:04:08,910
website I have made no modifications to

00:04:07,380 --> 00:04:11,850
that at all you can download that

00:04:08,910 --> 00:04:13,650
install it and go the spines have no

00:04:11,850 --> 00:04:15,959
routes those are strictly used as

00:04:13,650 --> 00:04:19,049
reflectors for the two pieces of the

00:04:15,959 --> 00:04:20,940
network because of the full

00:04:19,049 --> 00:04:23,760
implementation that we have in cumulus

00:04:20,940 --> 00:04:27,150
linux for vrf the spying leaf config for

00:04:23,760 --> 00:04:29,160
quagga can use bgp unnumbered so the

00:04:27,150 --> 00:04:32,040
quagga config for those two nodes is

00:04:29,160 --> 00:04:33,720
really simple but this is the

00:04:32,040 --> 00:04:34,860
interesting part for this demo this is

00:04:33,720 --> 00:04:37,630
where I want to get people thinking

00:04:34,860 --> 00:04:39,460
about vrf

00:04:37,630 --> 00:04:44,860
and what we can start doing with it on

00:04:39,460 --> 00:04:48,490
on the end nodes so you bunches 1604 is

00:04:44,860 --> 00:04:50,470
running the for that for kernel and for

00:04:48,490 --> 00:04:51,910
the demo that i've got i have made no

00:04:50,470 --> 00:04:54,540
changes to that Colonel I'm strictly

00:04:51,910 --> 00:04:56,950
using what exists in that version of it

00:04:54,540 --> 00:04:58,840
other operating systems coming out with

00:04:56,950 --> 00:05:02,110
birth support include Debian stretch and

00:04:58,840 --> 00:05:07,780
you bunt to 16 10 which I'm hoping will

00:05:02,110 --> 00:05:09,460
migrate over to the 48 colonel in terms

00:05:07,780 --> 00:05:11,410
of changes that I've made to this is

00:05:09,460 --> 00:05:13,240
really not changes to the kernel or

00:05:11,410 --> 00:05:15,340
changes to the yo ass I've added on to

00:05:13,240 --> 00:05:17,830
things 1 i'm downloading the docker

00:05:15,340 --> 00:05:19,630
experimental image and the second thing

00:05:17,830 --> 00:05:22,230
is using the if' up down to interface

00:05:19,630 --> 00:05:25,510
manager roopa gave a taco not yesterday

00:05:22,230 --> 00:05:28,410
when it comes to configuring and setting

00:05:25,510 --> 00:05:30,520
up the RFS it really is the simplest

00:05:28,410 --> 00:05:33,640
interface manager it's got everything

00:05:30,520 --> 00:05:39,040
that needed that's needed to configure

00:05:33,640 --> 00:05:41,710
the host to just work so as I mentioned

00:05:39,040 --> 00:05:45,070
vrf support is is what I'm going after

00:05:41,710 --> 00:05:48,280
and for I up up down to it's as simple

00:05:45,070 --> 00:05:50,920
as the handful of lines in the interface

00:05:48,280 --> 00:05:55,180
config file so for example auto read I

00:05:50,920 --> 00:05:57,310
face red give it a table ID and in this

00:05:55,180 --> 00:06:00,370
case when you do some packaging change

00:05:57,310 --> 00:06:03,520
to get the verb helper into an add-on

00:06:00,370 --> 00:06:05,770
package but I have to manually add my

00:06:03,520 --> 00:06:07,660
static default route because i don't

00:06:05,770 --> 00:06:09,760
want lookups to fall from one table to

00:06:07,660 --> 00:06:12,730
the next I have an unreachable default

00:06:09,760 --> 00:06:15,250
in all my verbs and then to make

00:06:12,730 --> 00:06:18,190
interfaces a part of some birth domain

00:06:15,250 --> 00:06:22,900
we just adverse birth name to that

00:06:18,190 --> 00:06:24,850
interface stanza in terms of the version

00:06:22,900 --> 00:06:28,090
of I f up down to the source code is

00:06:24,850 --> 00:06:30,400
available from github I'm using a lot of

00:06:28,090 --> 00:06:32,980
top of tree features so i downloaded top

00:06:30,400 --> 00:06:35,380
a tree literally from this github tree

00:06:32,980 --> 00:06:39,910
and built a dub package i've added that

00:06:35,380 --> 00:06:42,400
to my ansible set up so that it's

00:06:39,910 --> 00:06:44,500
installing that version by folk down to

00:06:42,400 --> 00:06:47,169
but anyone else can download that that's

00:06:44,500 --> 00:06:49,210
specific version and use it and then I

00:06:47,169 --> 00:06:50,510
up up down to it works with debian and

00:06:49,210 --> 00:06:52,490
ubuntu both

00:06:50,510 --> 00:06:55,100
I've use it on all my notes now I've

00:06:52,490 --> 00:06:58,820
removed I F up down and use I up up down

00:06:55,100 --> 00:07:02,870
to have it use it on fedora and then

00:06:58,820 --> 00:07:07,550
there's that a link for using I up up

00:07:02,870 --> 00:07:10,610
down to on older versions of Ubuntu so

00:07:07,550 --> 00:07:12,920
yesterday Roopa got into some of the

00:07:10,610 --> 00:07:14,990
benefits of I F up down to and why it's

00:07:12,920 --> 00:07:16,850
such an awesome interface manager and I

00:07:14,990 --> 00:07:19,010
wanted to give you an example this is my

00:07:16,850 --> 00:07:21,530
actual configuration for Leafs and it

00:07:19,010 --> 00:07:25,880
really highlights the the power of the

00:07:21,530 --> 00:07:29,060
Mako scripting so well talk about this

00:07:25,880 --> 00:07:31,790
in a minute but the leaf host setup has

00:07:29,060 --> 00:07:35,060
to use / 31 networks to communicate

00:07:31,790 --> 00:07:37,850
since the version 4 at 4 does not have a

00:07:35,060 --> 00:07:40,640
GI does not have ipv6 link local support

00:07:37,850 --> 00:07:43,280
in it yet we can't use bgp a numbered so

00:07:40,640 --> 00:07:45,680
i had to manually put up 31 addresses on

00:07:43,280 --> 00:07:48,650
all the interfaces using this Mako

00:07:45,680 --> 00:07:51,500
script as I had more interfaces add more

00:07:48,650 --> 00:07:53,450
verbs add whatever VLANs just come in

00:07:51,500 --> 00:07:55,490
there make a few changes and all the

00:07:53,450 --> 00:07:57,860
interface config is generated so very

00:07:55,490 --> 00:08:00,290
very powerful tool and then the same

00:07:57,860 --> 00:08:02,780
exact config can be used for every one

00:08:00,290 --> 00:08:05,780
of the Leafs I just changed that one n

00:08:02,780 --> 00:08:08,450
equals number on the left side and that

00:08:05,780 --> 00:08:14,150
same config file will plop on to leap to

00:08:08,450 --> 00:08:17,690
li three leaf or so let's focus on post

00:08:14,150 --> 00:08:19,970
networking the cumulus quagga or i

00:08:17,690 --> 00:08:23,210
should say for the host networking

00:08:19,970 --> 00:08:25,130
configuration i'm using our quagga so

00:08:23,210 --> 00:08:27,770
routing on the host downloading the

00:08:25,130 --> 00:08:30,530
darker version of that because it's just

00:08:27,770 --> 00:08:33,380
the easiest to do the updates and to

00:08:30,530 --> 00:08:35,510
install make sure it works everywhere so

00:08:33,380 --> 00:08:39,310
i'm using that version as opposed to our

00:08:35,510 --> 00:08:42,050
deb packages which are also available as

00:08:39,310 --> 00:08:45,560
i mentioned before have a nice EMP

00:08:42,050 --> 00:08:47,810
default route for each one of my servers

00:08:45,560 --> 00:08:49,880
so there they have multiple routes to

00:08:47,810 --> 00:08:53,600
multiple leafs and that's true for each

00:08:49,880 --> 00:08:55,880
one of the vr eps the the default route

00:08:53,600 --> 00:08:57,920
is learned by quagga so quad is

00:08:55,880 --> 00:08:59,900
configured to listen in bur fred and

00:08:57,920 --> 00:09:01,340
birth blue it talks to the Leafs it

00:08:59,900 --> 00:09:03,170
pulls down that default route and

00:09:01,340 --> 00:09:07,410
installed it in the birth tables

00:09:03,170 --> 00:09:13,380
and then as I create networks containers

00:09:07,410 --> 00:09:15,630
on host quagga on the host surrouding on

00:09:13,380 --> 00:09:17,460
the host again it runs those routes from

00:09:15,630 --> 00:09:19,470
the host table and distributes it to the

00:09:17,460 --> 00:09:21,000
Leafs and the spines so the networking

00:09:19,470 --> 00:09:23,070
fabric it just learns about the

00:09:21,000 --> 00:09:25,920
containers automatically I don't have to

00:09:23,070 --> 00:09:28,710
do anything quadra running everywhere it

00:09:25,920 --> 00:09:30,990
just works and then again of course

00:09:28,710 --> 00:09:36,870
isolation provided by virtual routing

00:09:30,990 --> 00:09:39,420
and forwarding leave house config so vrf

00:09:36,870 --> 00:09:43,140
support and for ty for Colonel does not

00:09:39,420 --> 00:09:46,200
have ipv6 link-local so for this demo I

00:09:43,140 --> 00:09:48,540
had to use like I said / 31 addresses on

00:09:46,200 --> 00:09:51,630
each one of the interfaces between the

00:09:48,540 --> 00:09:54,780
host and the leaf so each VLAN sub

00:09:51,630 --> 00:09:57,930
interface that gets put into a verb has

00:09:54,780 --> 00:10:01,470
a 31 address talking to to its

00:09:57,930 --> 00:10:04,290
neighboring leaf while I use docker in

00:10:01,470 --> 00:10:06,120
this example this tutorial this the

00:10:04,290 --> 00:10:10,130
setup the configuration it really works

00:10:06,120 --> 00:10:12,930
for any any container technology lxiii

00:10:10,130 --> 00:10:15,090
kvm whatever you're using to provide

00:10:12,930 --> 00:10:17,700
even just rate up namespaces whatever

00:10:15,090 --> 00:10:20,430
you're doing on a server you can still

00:10:17,700 --> 00:10:24,480
use brf in your host to provide your

00:10:20,430 --> 00:10:27,330
isolation alright so looking at the

00:10:24,480 --> 00:10:31,260
first set up this is a typical use case

00:10:27,330 --> 00:10:33,420
of dr. using the bridge driver so you

00:10:31,260 --> 00:10:36,270
allocate a bridge with in dr. you give

00:10:33,420 --> 00:10:40,380
it an address subnet and then you start

00:10:36,270 --> 00:10:43,230
spinning up containers on that on that

00:10:40,380 --> 00:10:45,210
bridge so the only thing I've done has

00:10:43,230 --> 00:10:46,980
come in after I've created the docker

00:10:45,210 --> 00:10:49,260
bridge I have a script that comes behind

00:10:46,980 --> 00:10:51,780
it and says oh this bridge goes into

00:10:49,260 --> 00:10:53,910
this BRF so I just set the master on it

00:10:51,780 --> 00:10:58,770
after that after doctor has done its

00:10:53,910 --> 00:11:00,480
initial setup so here's an example of

00:10:58,770 --> 00:11:04,500
what the verse route table looks like on

00:11:00,480 --> 00:11:08,870
a host so at the top we have our ecmp

00:11:04,500 --> 00:11:08,870
default route to both of the the leaps

00:11:09,030 --> 00:11:16,470
these are the / 31 addresses and this is

00:11:11,970 --> 00:11:18,120
again the ver Fred table so you've got a

00:11:16,470 --> 00:11:21,600
connection to leaf 1 and the connection

00:11:18,120 --> 00:11:22,890
to leaf to VLAN 10 is what's of vlans

00:11:21,600 --> 00:11:25,890
providing the trunking over those

00:11:22,890 --> 00:11:30,090
interfaces and VLAN 10 is assigned to

00:11:25,890 --> 00:11:31,710
the red 20 is assigned to the blue so in

00:11:30,090 --> 00:11:33,720
this case I have two bridges I've

00:11:31,710 --> 00:11:38,480
created two networks to dr. networks

00:11:33,720 --> 00:11:41,550
within this host and / 24 hour / 28

00:11:38,480 --> 00:11:44,730
addresses for those bridges and the

00:11:41,550 --> 00:11:48,260
first time I create a container the the

00:11:44,730 --> 00:11:51,180
link-up happens and those routes are

00:11:48,260 --> 00:11:53,130
visible in not only the host but then

00:11:51,180 --> 00:11:58,050
gets distributed out to the leaf and

00:11:53,130 --> 00:12:00,780
spine inside the container they're now

00:11:58,050 --> 00:12:03,060
working fairly fairly simplistic it has

00:12:00,780 --> 00:12:06,180
an address it uses the host as its

00:12:03,060 --> 00:12:10,260
default gateway so not much knowledge is

00:12:06,180 --> 00:12:15,150
inside the container so here's an

00:12:10,260 --> 00:12:17,220
example of the fabric learning one of

00:12:15,150 --> 00:12:20,790
the routes as I start up a container so

00:12:17,220 --> 00:12:24,420
in this case its host 41 I started up a

00:12:20,790 --> 00:12:29,100
container in the first sets on the first

00:12:24,420 --> 00:12:33,270
bridge and it's inverse red because of

00:12:29,100 --> 00:12:35,850
the one and again when I started that

00:12:33,270 --> 00:12:39,210
container on the host the spine learned

00:12:35,850 --> 00:12:40,590
it automatically and I guess you'll

00:12:39,210 --> 00:12:43,200
notice also i have management birth

00:12:40,590 --> 00:12:44,700
running on all the nodes that can't get

00:12:43,200 --> 00:12:47,580
management but running on the server yet

00:12:44,700 --> 00:12:50,970
until we figure out how to do the verb

00:12:47,580 --> 00:12:52,230
helper for setting for context but we'll

00:12:50,970 --> 00:12:56,430
get there we'll management of Earth can

00:12:52,230 --> 00:12:59,700
be running on all the nodes the second

00:12:56,430 --> 00:13:03,480
configuration for the doctor networking

00:12:59,700 --> 00:13:06,990
is using beef pairs and then / 32 routes

00:13:03,480 --> 00:13:09,630
and the host so in this case i'm using

00:13:06,990 --> 00:13:11,880
the doctor driver for none so no

00:13:09,630 --> 00:13:14,100
networking figa set up at all and i

00:13:11,880 --> 00:13:16,740
manually come behind it and creative

00:13:14,100 --> 00:13:19,320
eath pair I drop one end into the doctor

00:13:16,740 --> 00:13:21,329
container put the other end into the

00:13:19,320 --> 00:13:24,480
verse and then man

00:13:21,329 --> 00:13:26,850
assign the / 32 address within the

00:13:24,480 --> 00:13:32,339
container and insert the host route into

00:13:26,850 --> 00:13:36,980
the host table so one limitation I have

00:13:32,339 --> 00:13:36,980
with vrf in the ver for dad for is

00:13:37,009 --> 00:13:43,949
there's no locally originated traffic to

00:13:40,889 --> 00:13:46,769
local addresses so you can't for example

00:13:43,949 --> 00:13:49,889
give it like with the the bridge example

00:13:46,769 --> 00:13:52,379
where it's using the host IP address I

00:13:49,889 --> 00:13:54,749
have to go straight out to the Leafs for

00:13:52,379 --> 00:13:56,610
the default route that is something

00:13:54,749 --> 00:13:58,709
that's gone in for dot eight so that's

00:13:56,610 --> 00:14:00,689
why I'm hoping these OS distributions

00:13:58,709 --> 00:14:04,829
will quickly move to something like a 48

00:14:00,689 --> 00:14:07,379
colonel so in this case my host birth

00:14:04,829 --> 00:14:10,709
table looks like this got again the

00:14:07,379 --> 00:14:13,319
default routes coming from the leaps the

00:14:10,709 --> 00:14:16,049
connections to the Leafs in each in each

00:14:13,319 --> 00:14:18,779
birth and then this is an example of a

00:14:16,049 --> 00:14:21,660
single container post route in the host

00:14:18,779 --> 00:14:23,549
table so I don't have the entire subnet

00:14:21,660 --> 00:14:25,739
I can have a specific hosts specific

00:14:23,549 --> 00:14:28,169
address and so if that container were to

00:14:25,739 --> 00:14:29,699
move to a different host the kept that

00:14:28,169 --> 00:14:33,779
same address the network have learned

00:14:29,699 --> 00:14:38,279
that it moved from post 11 to host 31

00:14:33,779 --> 00:14:40,379
for example this is what the container

00:14:38,279 --> 00:14:42,540
route looks like so again it's

00:14:40,379 --> 00:14:44,819
unfortunate that the limitation in Fort

00:14:42,540 --> 00:14:47,009
I for its that evolution of getting

00:14:44,819 --> 00:14:49,619
implementation to be fully complete I

00:14:47,009 --> 00:14:52,259
have to pass that default route from the

00:14:49,619 --> 00:14:57,600
host into the container but with that

00:14:52,259 --> 00:14:59,459
one worked around it all works so again

00:14:57,600 --> 00:15:01,399
to emphasize what can be done once we

00:14:59,459 --> 00:15:05,759
get to that 48 kernel for the host OS

00:15:01,399 --> 00:15:09,059
this is a different vm running docker

00:15:05,759 --> 00:15:12,179
and it shows that I can use that typical

00:15:09,059 --> 00:15:14,639
flash 32 inside the container it's able

00:15:12,179 --> 00:15:17,699
to use the host gateway address and

00:15:14,639 --> 00:15:21,619
again a very simplistic config for the

00:15:17,699 --> 00:15:21,619
containers and everything just works

00:15:22,430 --> 00:15:27,529
so this this demonstration it uses

00:15:24,980 --> 00:15:30,080
vagrant for container orchestration

00:15:27,529 --> 00:15:33,380
ansible for configuring all of the nodes

00:15:30,080 --> 00:15:36,260
I have put the entire config on my

00:15:33,380 --> 00:15:39,110
github tree not nothing fancy is needed

00:15:36,260 --> 00:15:42,589
everything that's that's being used for

00:15:39,110 --> 00:15:47,630
this you guys have a access to be it our

00:15:42,589 --> 00:15:49,760
cumulus TX image and the Ubuntu 16 1604

00:15:47,630 --> 00:15:52,520
image that's also available throughout

00:15:49,760 --> 00:15:55,310
of of a group box by F up down to code

00:15:52,520 --> 00:15:56,990
is available our quagga is available so

00:15:55,310 --> 00:16:00,290
essentially if you wanted to try out

00:15:56,990 --> 00:16:07,279
this demo clone that site vagrant up off

00:16:00,290 --> 00:16:15,100
you go all right so at this point I can

00:16:07,279 --> 00:16:19,250
switch over to good night all right

00:16:15,100 --> 00:16:22,450
let's see what I can do on making this

00:16:19,250 --> 00:16:22,450
readable but usable

00:16:26,329 --> 00:16:29,170
ok

00:16:42,150 --> 00:16:44,180
Oh

00:16:45,070 --> 00:16:51,670
alright is there anyone in the back and

00:16:46,720 --> 00:16:54,160
they still see that top window okay so

00:16:51,670 --> 00:16:56,920
this is IP monitor running on the spine

00:16:54,160 --> 00:17:02,620
so that's one of those the network nodes

00:16:56,920 --> 00:17:07,390
at the very top I have a shell script

00:17:02,620 --> 00:17:09,310
that I can run from my server so i don't

00:17:07,390 --> 00:17:11,800
have to actually log in and access each

00:17:09,310 --> 00:17:13,690
one of those those hugs because it does

00:17:11,800 --> 00:17:17,380
get a little overwhelming having to deal

00:17:13,690 --> 00:17:21,250
with each one so in this case just to

00:17:17,380 --> 00:17:24,040
show you this is host one and it has

00:17:21,250 --> 00:17:25,449
three containers running so two

00:17:24,040 --> 00:17:28,360
containers running in the two different

00:17:25,449 --> 00:17:32,310
bridges for ver Fred one container in

00:17:28,360 --> 00:17:37,030
verse blue so i could start up another

00:17:32,310 --> 00:17:41,290
container in murf blue on host 11

00:17:37,030 --> 00:17:43,990
container 1 so let's do that and taking

00:17:41,290 --> 00:17:48,400
a look at the the spine in monitoring

00:17:43,990 --> 00:17:51,700
routes so this command is just using

00:17:48,400 --> 00:17:53,470
ansible to log on to host 11 and run the

00:17:51,700 --> 00:17:56,050
doctor command that actually spends up

00:17:53,470 --> 00:17:58,960
and you can see as soon as that

00:17:56,050 --> 00:18:00,760
container came online so this one's

00:17:58,960 --> 00:18:03,730
attached to so I guess it should pack up

00:18:00,760 --> 00:18:06,970
and say I have all the odd number hosts

00:18:03,730 --> 00:18:10,360
using the bridge dr. config and I have

00:18:06,970 --> 00:18:13,960
all the even-numbered host using the V

00:18:10,360 --> 00:18:17,160
pairs and / 32 routing so in this case I

00:18:13,960 --> 00:18:19,450
started up a new container on host 11

00:18:17,160 --> 00:18:23,250
connected to the bridge so that's why it

00:18:19,450 --> 00:18:23,250
has the the / 28

00:18:25,580 --> 00:18:30,940
so if I were to do the same thing on and

00:18:27,860 --> 00:18:37,970
even and I guess I need to figure out

00:18:30,940 --> 00:18:42,970
what host doesn't have one started okay

00:18:37,970 --> 00:18:46,910
so host 12 does not have a container in

00:18:42,970 --> 00:18:51,850
blue in the second set and so again this

00:18:46,910 --> 00:18:51,850
one is going to show up as a / 32 route

00:18:55,360 --> 00:19:00,230
so there you go so the network is

00:18:58,790 --> 00:19:03,560
automatically learning whatever is being

00:19:00,230 --> 00:19:06,380
done on the host because we have quagga

00:19:03,560 --> 00:19:08,660
on the host running and the whole

00:19:06,380 --> 00:19:11,180
networks you know that the quagga is

00:19:08,660 --> 00:19:14,330
distributing those routes so I guess at

00:19:11,180 --> 00:19:16,720
this point there any questions this is

00:19:14,330 --> 00:19:20,380
all just seems straightforward and

00:19:16,720 --> 00:19:20,380
standard networking config

00:19:25,830 --> 00:19:35,110
huge all right well is anybody want to

00:19:33,370 --> 00:19:42,730
see anything in particular like the the

00:19:35,110 --> 00:19:46,389
vrf isolation alright i guess it's so

00:19:42,730 --> 00:19:53,460
obvious that i'm up here explaining

00:19:46,389 --> 00:19:57,159
simple things for everyone to okay yeah

00:19:53,460 --> 00:19:59,019
you also network but you still have the

00:19:57,159 --> 00:20:02,759
ability in the container to access the

00:19:59,019 --> 00:20:05,230
other first if you stand on your head

00:20:02,759 --> 00:20:07,090
they're still visible and everything

00:20:05,230 --> 00:20:10,419
else versus a network name space where

00:20:07,090 --> 00:20:14,259
they're not visible oh they're visible

00:20:10,419 --> 00:20:15,879
if you have access to the host yes just

00:20:14,259 --> 00:20:20,200
like the name spaces would be visible if

00:20:15,879 --> 00:20:25,000
you had access to the host the thing is

00:20:20,200 --> 00:20:28,870
if I run an eye octal to show me the

00:20:25,000 --> 00:20:31,750
interfaces yeah in a container and I'm

00:20:28,870 --> 00:20:34,179
using network name spaces I'll only see

00:20:31,750 --> 00:20:37,240
the intervals to only see the interfaces

00:20:34,179 --> 00:20:39,909
in that namespace if i use verse to do

00:20:37,240 --> 00:20:43,080
it I'll see all the interfaces this I

00:20:39,909 --> 00:20:47,080
mean it's just the difference in

00:20:43,080 --> 00:20:48,940
semantics that may or may not so if

00:20:47,080 --> 00:20:51,659
you're inside the container you can't

00:20:48,940 --> 00:20:54,610
see anything that was the whole point of

00:20:51,659 --> 00:20:56,549
what's that okay yeah so inside the

00:20:54,610 --> 00:20:58,690
container you see a very simplistic

00:20:56,549 --> 00:21:00,669
network config you don't see anything

00:20:58,690 --> 00:21:03,820
about the host you have no idea that

00:21:00,669 --> 00:21:05,620
you're running in 11 versus another all

00:21:03,820 --> 00:21:08,399
of that is inside of the host and inside

00:21:05,620 --> 00:21:08,399
the network fabric

00:21:10,029 --> 00:21:18,700
oh well since you're bored nobody wants

00:21:15,249 --> 00:21:21,609
to ask questions so using ansible as

00:21:18,700 --> 00:21:24,309
your construction system you yes but for

00:21:21,609 --> 00:21:25,659
fun or I'm sorry this is just for fun or

00:21:24,309 --> 00:21:28,210
why are using uncibal for this ah

00:21:25,659 --> 00:21:29,799
because it's awesome it's automation

00:21:28,210 --> 00:21:31,960
capabilities but I did not want to go

00:21:29,799 --> 00:21:34,570
through and configure eight hosts

00:21:31,960 --> 00:21:37,899
remedies for a data center guy using

00:21:34,570 --> 00:21:39,940
uncibal for this I'm sorry in a big data

00:21:37,899 --> 00:21:42,789
center do you see anybody using guns

00:21:39,940 --> 00:21:44,559
able to do this definitely people are

00:21:42,789 --> 00:21:46,179
using automation all the time now isn't

00:21:44,559 --> 00:21:47,679
that I'm building containers all the

00:21:46,179 --> 00:21:49,809
time I'm just gonna sit down type

00:21:47,679 --> 00:21:51,639
uncibal commands I know earlier I was

00:21:49,809 --> 00:21:54,669
going off without registration tools but

00:21:51,639 --> 00:21:56,950
really if I had to go configure 14 hosts

00:21:54,669 --> 00:21:59,139
or 14 network nodes right you know i'm

00:21:56,950 --> 00:22:01,659
going to use something like ansible to

00:21:59,139 --> 00:22:04,179
log into each one of those and do it for

00:22:01,659 --> 00:22:06,849
creating containers by upshur for

00:22:04,179 --> 00:22:09,190
creating the containers or whatever okay

00:22:06,849 --> 00:22:11,499
right in and for me this is just what

00:22:09,190 --> 00:22:14,710
I'm doing from my network setup some ID

00:22:11,499 --> 00:22:18,460
for my demos I can see for the demo yes

00:22:14,710 --> 00:22:22,409
but yeah you know would you see

00:22:18,460 --> 00:22:27,219
something like what's that tweet i think

00:22:22,409 --> 00:22:29,049
missiles sure a different orchestration

00:22:27,219 --> 00:22:32,679
tools right so what I'm really getting

00:22:29,049 --> 00:22:35,739
at here is the host config and because

00:22:32,679 --> 00:22:37,389
you know we're all using Lennox the

00:22:35,739 --> 00:22:40,419
switches are running Linux the host is

00:22:37,389 --> 00:22:43,089
running Linux because we worked with you

00:22:40,419 --> 00:22:45,519
know the community to get networking

00:22:43,089 --> 00:22:47,019
features into the kernel everything can

00:22:45,519 --> 00:22:48,429
be done the same there's no reason to

00:22:47,019 --> 00:22:51,159
treat a server any differently from a

00:22:48,429 --> 00:22:53,409
switch agree and in here you know being

00:22:51,159 --> 00:22:55,029
able to use vagrant or ansible rather to

00:22:53,409 --> 00:22:57,639
log in each one of those nodes and do

00:22:55,029 --> 00:23:01,200
easy config using high F up down to for

00:22:57,639 --> 00:23:03,159
example to generate easy config for the

00:23:01,200 --> 00:23:06,039
interfaces I mean that's that's the

00:23:03,159 --> 00:23:09,149
power of what we're trying to show so I

00:23:06,039 --> 00:23:11,580
think what these really asking so

00:23:09,149 --> 00:23:15,389
the question that is on the table is y

00:23:11,580 --> 00:23:17,820
wud ansible for container orchestration

00:23:15,389 --> 00:23:19,589
and that's not the point here this is

00:23:17,820 --> 00:23:21,809
answerable to the network configuration

00:23:19,589 --> 00:23:23,609
but if it it happens that is using

00:23:21,809 --> 00:23:25,619
ansible to launch the container because

00:23:23,609 --> 00:23:28,649
we already have the inventory and it's

00:23:25,619 --> 00:23:31,379
easy but we are not there is no proposal

00:23:28,649 --> 00:23:33,359
or positions and telling us about these

00:23:31,379 --> 00:23:34,889
ansible to-go container orchestration ya

00:23:33,359 --> 00:23:36,869
know I was not proposing to use ansible

00:23:34,889 --> 00:23:39,809
for the container work I was doing that

00:23:36,869 --> 00:23:41,309
out of before I had screen windows

00:23:39,809 --> 00:23:42,779
logged into all the different nodes and

00:23:41,309 --> 00:23:44,820
manually spending that up and I'm like

00:23:42,779 --> 00:23:51,690
what a pain ansible will log in all

00:23:44,820 --> 00:23:57,779
these hosts for me I was going to ask

00:23:51,690 --> 00:23:59,789
about EVPs here we nasa la TV PF hold on

00:23:57,779 --> 00:24:04,249
let me go add that to an extra slide

00:23:59,789 --> 00:24:04,249
here because it is also gonna be huge

00:24:06,889 --> 00:24:15,239
huge all right any other questions

00:24:12,649 --> 00:24:18,019
awesome i look forward to seeing vrf

00:24:15,239 --> 00:24:18,019

YouTube URL: https://www.youtube.com/watch?v=J8vliS-fZwA


