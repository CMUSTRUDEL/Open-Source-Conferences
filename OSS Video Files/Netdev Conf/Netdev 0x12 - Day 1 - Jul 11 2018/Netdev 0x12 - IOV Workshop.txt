Title: Netdev 0x12 - IOV Workshop
Publication date: 2018-09-02
Playlist: Netdev 0x12 - Day 1 - Jul 11 2018
Description: 
	At Netdev 0x12 in Montreal on July 11th, 2018, Alexander Duyck chaired a workshop with face to face discussions of the several ongoing efforts related to IO Virtualization as it pertains to networking.

More info:
https://www.netdevconf.org/0x12/session.html?iov-workshop
Captions: 
	00:00:00,030 --> 00:00:11,460
all right we'll get started yeah all

00:00:05,370 --> 00:00:15,990
right hi welcome to Montreal I know it's

00:00:11,460 --> 00:00:17,970
not it's nice weather people submitting

00:00:15,990 --> 00:00:18,449
papers and slides please you know who

00:00:17,970 --> 00:00:21,840
you are

00:00:18,449 --> 00:00:25,050
submit Wi-Fi is working well for

00:00:21,840 --> 00:00:29,119
everybody good

00:00:25,050 --> 00:00:29,119
everyone else you know the password

00:00:30,529 --> 00:00:37,739
before we get started we're looking for

00:00:34,380 --> 00:00:39,750
scribes someone who is gonna report the

00:00:37,739 --> 00:00:43,620
sessions they'll be posted on Linux

00:00:39,750 --> 00:00:47,960
weekly news a the contact set send an

00:00:43,620 --> 00:00:47,960
email to info at net Def Con frog

00:00:48,379 --> 00:00:59,070
Thursday night we have what we call bits

00:00:51,840 --> 00:01:01,440
by bits nibbles bytes and words session

00:00:59,070 --> 00:01:03,899
which is going to be outside the

00:01:01,440 --> 00:01:06,810
terrorists here if you have an open

00:01:03,899 --> 00:01:09,689
source project that you want to get a

00:01:06,810 --> 00:01:11,280
table for and demonstrate something talk

00:01:09,689 --> 00:01:14,040
to Christie at the front at the

00:01:11,280 --> 00:01:15,869
registration desk give her your name and

00:01:14,040 --> 00:01:18,840
what the project is it has to be open

00:01:15,869 --> 00:01:20,759
source and marketing is not allowed you

00:01:18,840 --> 00:01:26,130
can't start marketing a product or

00:01:20,759 --> 00:01:27,750
something of that sort last announcement

00:01:26,130 --> 00:01:31,770
we're not going to be serving lunch this

00:01:27,750 --> 00:01:37,290
time but there's plenty of food options

00:01:31,770 --> 00:01:40,850
to flows down there's a big mall food

00:01:37,290 --> 00:01:44,009
court there's a lot of tracks outside

00:01:40,850 --> 00:01:53,250
plenty of coffee though and with that

00:01:44,009 --> 00:01:56,070
I'm going to hand it over to okay yeah

00:01:53,250 --> 00:01:58,500
okay Mike's working so my name is Alex

00:01:56,070 --> 00:02:00,899
Tyco Alexander Dicon mall the mailing

00:01:58,500 --> 00:02:06,030
lists I'm here to present the i/o Viera

00:02:00,899 --> 00:02:08,039
to chair the iÃµve workshop see it's a

00:02:06,030 --> 00:02:10,140
basic idea behind the workshop you know

00:02:08,039 --> 00:02:12,930
it's to be collaborative ideally I want

00:02:10,140 --> 00:02:13,680
to avoid me spending the full hour and a

00:02:12,930 --> 00:02:16,680
half just up here

00:02:13,680 --> 00:02:18,599
presenting ideally I want to keep it to

00:02:16,680 --> 00:02:20,189
10 to 15 minutes of discussion about any

00:02:18,599 --> 00:02:23,879
given topic I have specifically three

00:02:20,189 --> 00:02:25,500
topics today and at that point hopefully

00:02:23,879 --> 00:02:27,810
this becomes much more collaborative we

00:02:25,500 --> 00:02:30,329
start discussing you know either why I

00:02:27,810 --> 00:02:33,209
am wrong for thinking of doing something

00:02:30,329 --> 00:02:34,349
a given way or you know maybe there's

00:02:33,209 --> 00:02:37,139
something I didn't think about that we

00:02:34,349 --> 00:02:38,549
can add on or worst case scenario it's a

00:02:37,139 --> 00:02:40,409
everyone's in agreement knowledge then

00:02:38,549 --> 00:02:42,060
we can just move on to the next topic in

00:02:40,409 --> 00:02:44,579
which case this might end up being a 45

00:02:42,060 --> 00:02:47,040
minute session so hopefully we get some

00:02:44,579 --> 00:02:49,079
discussion going but basically the

00:02:47,040 --> 00:02:50,730
schedule is going to be 10 to 15 minutes

00:02:49,079 --> 00:02:52,889
each topic just to describe the current

00:02:50,730 --> 00:02:55,230
state of affairs 5 to 10 minutes

00:02:52,889 --> 00:02:56,730
discussion proposals and basically I

00:02:55,230 --> 00:02:58,290
want to try to summarize things that we

00:02:56,730 --> 00:03:02,569
have some sort of agreement going

00:02:58,290 --> 00:03:05,790
forward but by the end of each session

00:03:02,569 --> 00:03:07,650
so as far as the areas as in cover we

00:03:05,790 --> 00:03:11,159
got three main areas we're looking at

00:03:07,650 --> 00:03:14,790
Mac VLAN offload specifically here this

00:03:11,159 --> 00:03:17,599
is known as l2 Ford offload right now

00:03:14,790 --> 00:03:20,370
it's only implemented on the intel parts

00:03:17,599 --> 00:03:23,370
hopefully they'll change in the future

00:03:20,370 --> 00:03:26,069
second item is SRO V using pair of

00:03:23,370 --> 00:03:27,930
virtualization in this kin-san cases

00:03:26,069 --> 00:03:31,519
Verdi OBE also and net BSC falls into

00:03:27,930 --> 00:03:34,560
this as well as the standby path and

00:03:31,519 --> 00:03:36,780
last bit is V host data path

00:03:34,560 --> 00:03:40,470
acceleration this is actually an area

00:03:36,780 --> 00:03:42,180
that I'm not necessarily the most

00:03:40,470 --> 00:03:43,530
familiar with hopefully there might be

00:03:42,180 --> 00:03:44,970
some other people in the audience if

00:03:43,530 --> 00:03:48,840
Michaels around he probably has dealt

00:03:44,970 --> 00:03:50,250
with it quite a bit I just want to get

00:03:48,840 --> 00:03:51,509
some discussion going out on it because

00:03:50,250 --> 00:03:54,209
I know it's been going on there's been a

00:03:51,509 --> 00:03:57,959
lot of discussion on other mailing lists

00:03:54,209 --> 00:03:59,669
about it but not necessarily net dev so

00:03:57,959 --> 00:04:01,799
MacNeill an offload as I mentioned

00:03:59,669 --> 00:04:04,079
before it's referred to as l2 forward

00:04:01,799 --> 00:04:06,030
offload which maybe that's you know

00:04:04,079 --> 00:04:07,290
something we can look into making it

00:04:06,030 --> 00:04:09,000
more generic actually applying it

00:04:07,290 --> 00:04:12,000
something other than just mac VLAN

00:04:09,000 --> 00:04:15,150
that's for more the that's discussion

00:04:12,000 --> 00:04:17,639
towards the end but mac VLAN offload

00:04:15,150 --> 00:04:19,169
specifically the l2 forward offload as a

00:04:17,639 --> 00:04:21,919
means of directing traffic from a given

00:04:19,169 --> 00:04:26,219
mac VLAN interface to a specific set of

00:04:21,919 --> 00:04:27,000
T excuse or from a specific set of our

00:04:26,219 --> 00:04:31,110
excuse

00:04:27,000 --> 00:04:33,150
to a specific Mac VLAN device basically

00:04:31,110 --> 00:04:36,450
it's just a means of providing a quick

00:04:33,150 --> 00:04:38,220
bypass for Mac VLAN traffic so I can get

00:04:36,450 --> 00:04:40,230
quickly from the masculine to the lower

00:04:38,220 --> 00:04:44,160
dev or from lower dev directly into the

00:04:40,230 --> 00:04:46,110
Mac VLAN in the case of the intel parts

00:04:44,160 --> 00:04:49,620
we end up using some feature called v

00:04:46,110 --> 00:04:53,010
mdq specifically v md q2 because it uses

00:04:49,620 --> 00:04:54,240
both of the VLAN and the MAC address and

00:04:53,010 --> 00:04:56,340
it's a hardware feature that's available

00:04:54,240 --> 00:04:59,640
and described in our parts and the data

00:04:56,340 --> 00:05:01,380
sheets and what we end up doing as we

00:04:59,640 --> 00:05:03,450
end up using that in order to in the

00:05:01,380 --> 00:05:05,100
case IX GB we end up using that in order

00:05:03,450 --> 00:05:07,860
to be able to allow the traffic to get

00:05:05,100 --> 00:05:10,020
directly from a given set of cues into a

00:05:07,860 --> 00:05:11,940
mac VLAN and from the macula and

00:05:10,020 --> 00:05:14,880
specifically into that set of T excuse

00:05:11,940 --> 00:05:16,830
and then in the case of FM 10k which is

00:05:14,880 --> 00:05:18,090
one of our other parts we end up using

00:05:16,830 --> 00:05:20,940
something that's called a global

00:05:18,090 --> 00:05:22,080
resource tag to directly route the

00:05:20,940 --> 00:05:24,110
receive traffic and we don't actually

00:05:22,080 --> 00:05:28,560
bother with the rx because we don't have

00:05:24,110 --> 00:05:31,530
the TX rate limiting feature enabled an

00:05:28,560 --> 00:05:34,470
FM 10k for that functionality and so we

00:05:31,530 --> 00:05:38,040
don't need to reserve any ste excuse for

00:05:34,470 --> 00:05:39,300
it anyway if you've been following the

00:05:38,040 --> 00:05:42,540
NIT dev mailing list I've been going

00:05:39,300 --> 00:05:44,640
through and doing a bunch of work but

00:05:42,540 --> 00:05:45,540
like is mentioned I should be e FM 10k

00:05:44,640 --> 00:05:49,140
are the two drivers that end up

00:05:45,540 --> 00:05:50,850
supporting Mac VLAN offload what I've

00:05:49,140 --> 00:05:53,640
been doing is going through and fixing

00:05:50,850 --> 00:05:55,800
the bugs when I went and first started

00:05:53,640 --> 00:05:58,140
setting the stuff up my default config

00:05:55,800 --> 00:06:01,470
Mac VLAN offload did not work on either

00:05:58,140 --> 00:06:03,870
of these drivers FM 10k specifically it

00:06:01,470 --> 00:06:05,870
didn't work at all as it turns out we

00:06:03,870 --> 00:06:08,790
had never actually tested that feature

00:06:05,870 --> 00:06:10,860
I'd implemented it and I actually left

00:06:08,790 --> 00:06:12,600
until around that time just after

00:06:10,860 --> 00:06:14,010
implementing it so I never got a chance

00:06:12,600 --> 00:06:16,740
to test it because the silicon was just

00:06:14,010 --> 00:06:18,090
coming out when I left and there were

00:06:16,740 --> 00:06:20,490
some changes related to VLAN

00:06:18,090 --> 00:06:24,570
configuration that didn't get applied to

00:06:20,490 --> 00:06:25,830
the Mac VLAN interface so because FM 10k

00:06:24,570 --> 00:06:27,570
didn't work until we actually set

00:06:25,830 --> 00:06:31,770
configured the proper VLAN for the mac

00:06:27,570 --> 00:06:34,440
address case IX GBE it sort of worked

00:06:31,770 --> 00:06:37,669
but it kind of limped along quite a bit

00:06:34,440 --> 00:06:41,180
there were TX q mapping issues

00:06:37,669 --> 00:06:44,189
coexistence issues with sr Iove

00:06:41,180 --> 00:06:45,509
specifically SRO B&B mdq are actually

00:06:44,189 --> 00:06:47,580
features that kind of compete with each

00:06:45,509 --> 00:06:50,389
other because they both use up cue

00:06:47,580 --> 00:06:53,189
resources and so that became an issue

00:06:50,389 --> 00:06:55,289
and the other issue I ran into is the

00:06:53,189 --> 00:06:57,750
driver just in general took a long time

00:06:55,289 --> 00:07:00,900
to actually get itself configured the

00:06:57,750 --> 00:07:04,289
way the logic was working it was

00:07:00,900 --> 00:07:06,180
resetting the entire port each time you

00:07:04,289 --> 00:07:09,240
would add a new Mac VLAN interface and

00:07:06,180 --> 00:07:11,099
it's a it would had limited itself to 32

00:07:09,240 --> 00:07:12,870
I had done some work to enable 64 in all

00:07:11,099 --> 00:07:14,250
of sounds like why does it take me like

00:07:12,870 --> 00:07:16,259
a minute and a half in order to just

00:07:14,250 --> 00:07:18,599
bring down the interface that's because

00:07:16,259 --> 00:07:20,849
the Mac VLANs each time it was adding or

00:07:18,599 --> 00:07:22,169
removing one was resetting the interface

00:07:20,849 --> 00:07:23,969
and reconfiguring it and bring it back

00:07:22,169 --> 00:07:26,009
up and then Oh remove the next one reset

00:07:23,969 --> 00:07:27,419
the interface bring it back up and so I

00:07:26,009 --> 00:07:28,889
had to rewrite a bunch of that so

00:07:27,419 --> 00:07:30,990
basically created certain thresholds

00:07:28,889 --> 00:07:33,750
whereas like okay pre-allocate acetic

00:07:30,990 --> 00:07:39,689
used for this new mode versus the old

00:07:33,750 --> 00:07:41,610
mode some other specific changes I was

00:07:39,689 --> 00:07:43,560
making these are more latest Mac VLAN

00:07:41,610 --> 00:07:45,060
generally one of the things I was

00:07:43,560 --> 00:07:49,560
finding is with the offload enabled

00:07:45,060 --> 00:07:50,759
various modes didn't work actually one

00:07:49,560 --> 00:07:53,490
thing I didn't call out here one of the

00:07:50,759 --> 00:07:55,889
things I fixed is the assumption for the

00:07:53,490 --> 00:07:57,569
Mac VLAN offload and IX GPE driver and

00:07:55,889 --> 00:08:00,089
actually FM 10k driver originally was it

00:07:57,569 --> 00:08:02,909
it just works right it's just one mode

00:08:00,089 --> 00:08:05,009
that's just better right it's like oh

00:08:02,909 --> 00:08:05,789
wait no it's not really vapor its bridge

00:08:05,009 --> 00:08:08,759
bepa

00:08:05,789 --> 00:08:12,000
source Mac filtering and I think that

00:08:08,759 --> 00:08:13,979
was it private and there's that

00:08:12,000 --> 00:08:15,120
pass-through mode ends up being like six

00:08:13,979 --> 00:08:16,080
or seven different modes the problem is

00:08:15,120 --> 00:08:17,759
when this feature was originally

00:08:16,080 --> 00:08:19,469
implemented I don't think most of those

00:08:17,759 --> 00:08:21,569
existed either that or they were

00:08:19,469 --> 00:08:22,710
overlooked one of the two and so as a

00:08:21,569 --> 00:08:24,330
matter of going through and identifying

00:08:22,710 --> 00:08:27,270
okay what modes are actually off

00:08:24,330 --> 00:08:30,990
loadable and so I basically narrowed the

00:08:27,270 --> 00:08:33,599
list down to bepa and bridge in the case

00:08:30,990 --> 00:08:35,640
of the i-x GBE parts as well as the FM

00:08:33,599 --> 00:08:37,050
10k parts basically because those are

00:08:35,640 --> 00:08:38,880
the two modes that we classically think

00:08:37,050 --> 00:08:41,310
of as being something that would look

00:08:38,880 --> 00:08:43,019
like a VM DQ style offload that the

00:08:41,310 --> 00:08:44,190
hardware can actually handle it's a

00:08:43,019 --> 00:08:48,060
source MAC address we don't have a

00:08:44,190 --> 00:08:49,380
filter for that pass-through doesn't

00:08:48,060 --> 00:08:51,899
really need to be offloaded it's already

00:08:49,380 --> 00:08:52,860
taken over the whole device and so a lot

00:08:51,899 --> 00:08:54,100
of it was just going through and

00:08:52,860 --> 00:08:59,649
eliminating the cruft

00:08:54,100 --> 00:09:03,370
the code and getting that cleaned up so

00:08:59,649 --> 00:09:04,990
what's left to do so if you've been

00:09:03,370 --> 00:09:07,990
following the mailing list I recently

00:09:04,990 --> 00:09:09,790
submitted a set of patches to Jeff Kurr

00:09:07,990 --> 00:09:12,550
sure and they sat for two weeks in

00:09:09,790 --> 00:09:14,560
testing and he asked me to read base

00:09:12,550 --> 00:09:16,750
them and resubmit them because some

00:09:14,560 --> 00:09:20,110
other stuff conflicted but currently

00:09:16,750 --> 00:09:22,810
their pending acceptance by Dave to

00:09:20,110 --> 00:09:25,959
change the TX queuing mechanism for Mac

00:09:22,810 --> 00:09:27,759
VLANs one of the issues we ran into as

00:09:25,959 --> 00:09:30,040
we are that we've been trying to address

00:09:27,759 --> 00:09:33,779
is we wanted to be able to add support

00:09:30,040 --> 00:09:36,550
for Mac VLAN offload to the i-40 driver

00:09:33,779 --> 00:09:39,190
problem is in order to do that we have

00:09:36,550 --> 00:09:41,589
to well the the way the queuing logic

00:09:39,190 --> 00:09:45,959
works in IX GBE for example you have to

00:09:41,589 --> 00:09:47,980
use n vo select queue which is kind of a

00:09:45,959 --> 00:09:49,420
it's MIT really supposed to be

00:09:47,980 --> 00:09:50,470
deprecated you know it's one of those

00:09:49,420 --> 00:09:51,940
things where it's like every time if

00:09:50,470 --> 00:09:53,800
someone implements it it's like no don't

00:09:51,940 --> 00:09:54,880
use that we want that to go away but

00:09:53,800 --> 00:09:56,500
then it's one of the things it doesn't

00:09:54,880 --> 00:09:58,720
go away but at the same time it's like

00:09:56,500 --> 00:10:00,459
okay it's a catch-22 now because I can't

00:09:58,720 --> 00:10:03,310
do Mac VLAN offload unless I implement

00:10:00,459 --> 00:10:05,199
India select you and so in order to try

00:10:03,310 --> 00:10:07,420
to get away from having to do the india

00:10:05,199 --> 00:10:09,850
select q function i'm looking at

00:10:07,420 --> 00:10:12,519
creating what I'm calling the

00:10:09,850 --> 00:10:15,209
subordinate device logic basically it's

00:10:12,519 --> 00:10:17,170
a way of taking a given net dev and

00:10:15,209 --> 00:10:20,380
partitioning it up so that it's split

00:10:17,170 --> 00:10:21,730
between some number of pure software net

00:10:20,380 --> 00:10:25,389
devs in this case it's Mac VLAN

00:10:21,730 --> 00:10:31,269
interfaces and so I end up reusing bits

00:10:25,389 --> 00:10:33,310
of the tc2 Q mappings on those other net

00:10:31,269 --> 00:10:35,709
devs as well as locking them down into

00:10:33,310 --> 00:10:37,389
what I'm calling a channel so basically

00:10:35,709 --> 00:10:40,300
they end up reporting that oh yeah this

00:10:37,389 --> 00:10:42,819
device only supports really one TC and

00:10:40,300 --> 00:10:47,290
it's single Q so it doesn't need to look

00:10:42,819 --> 00:10:49,899
at the DC B code or the or the TC 2 Q

00:10:47,290 --> 00:10:52,569
code but instead we can now go ahead and

00:10:49,899 --> 00:10:54,310
reuse that over here in this other net

00:10:52,569 --> 00:10:56,019
dev and it'll call back up and figure

00:10:54,310 --> 00:10:58,000
this out once it knows it's transmitting

00:10:56,019 --> 00:10:59,259
and so I had to go through and rewrite

00:10:58,000 --> 00:11:01,120
some bits here and there in order to

00:10:59,259 --> 00:11:02,649
make it all work but I got the patches

00:11:01,120 --> 00:11:03,010
currently sitting on the net dev mailing

00:11:02,649 --> 00:11:05,260
list

00:11:03,010 --> 00:11:06,610
like I said waiting acceptance so it's

00:11:05,260 --> 00:11:07,810
like your last chance to get reviewing

00:11:06,610 --> 00:11:09,760
before Dave goes ahead in the

00:11:07,810 --> 00:11:11,590
applies them so they're still on the

00:11:09,760 --> 00:11:12,850
list as of today and they're still in

00:11:11,590 --> 00:11:17,620
patch works if you're wanting to take a

00:11:12,850 --> 00:11:19,360
look and so with that change though that

00:11:17,620 --> 00:11:22,060
enables the bits needed so that I can go

00:11:19,360 --> 00:11:23,950
ahead and then add support for something

00:11:22,060 --> 00:11:26,230
like Mac vielen on the i-40 driver

00:11:23,950 --> 00:11:27,400
without having to implement in do select

00:11:26,230 --> 00:11:31,270
queue which I think would be a sticking

00:11:27,400 --> 00:11:33,460
point on that so with that said that's

00:11:31,270 --> 00:11:35,020
the current state of things so the

00:11:33,460 --> 00:11:37,240
question starts becoming where can we go

00:11:35,020 --> 00:11:38,860
with this this is where I'm opening it

00:11:37,240 --> 00:11:41,350
up to you guys so this is just like some

00:11:38,860 --> 00:11:45,250
random you know musings thoughts it that

00:11:41,350 --> 00:11:46,779
I had so one of the things as looking at

00:11:45,250 --> 00:11:48,460
is we have a few issues here in there

00:11:46,779 --> 00:11:51,279
dealing with VLANs right now when you

00:11:48,460 --> 00:11:54,339
throw Mac VLAN off load into the play we

00:11:51,279 --> 00:11:56,770
could do you know I'm a QB LAN with an

00:11:54,339 --> 00:11:58,570
offloaded VLAN if you wanted to with a

00:11:56,770 --> 00:12:00,820
VM dq2 setup there's nothing to really

00:11:58,570 --> 00:12:03,580
prevent that so in theory we could have

00:12:00,820 --> 00:12:08,080
a Mac VLAN exposed in do ops saying okay

00:12:03,580 --> 00:12:11,050
I'm going to allow al2 ford offloaded

00:12:08,080 --> 00:12:13,600
VLAN on top of my mac VLAN or you could

00:12:11,050 --> 00:12:16,660
do the reverse say the VLAN has it a l2

00:12:13,600 --> 00:12:18,100
forward offloaded Mac appeal and it just

00:12:16,660 --> 00:12:20,380
becomes a matter of defining what ops

00:12:18,100 --> 00:12:25,030
and features are going to be able to be

00:12:20,380 --> 00:12:27,100
expressed between the two the other one

00:12:25,030 --> 00:12:28,720
I was looking at so the question comes

00:12:27,100 --> 00:12:32,080
is there a way to get away with doing a

00:12:28,720 --> 00:12:34,240
source address mode make a source

00:12:32,080 --> 00:12:36,460
address mode based off load so basically

00:12:34,240 --> 00:12:40,930
one of the modes that's available right

00:12:36,460 --> 00:12:43,270
now Mac VLAN is source and so one of

00:12:40,930 --> 00:12:46,360
questions becomes is there any value to

00:12:43,270 --> 00:12:47,710
doing a Mac Beall an l2 port offload for

00:12:46,360 --> 00:12:48,640
source so like one of the things that

00:12:47,710 --> 00:12:51,820
actually comes to mind with something

00:12:48,640 --> 00:12:54,010
like this is switch dev right now we

00:12:51,820 --> 00:12:55,360
have certain parts that do switch to

00:12:54,010 --> 00:12:55,750
have ones that can't but they're still

00:12:55,360 --> 00:13:00,640
doing

00:12:55,750 --> 00:13:02,800
MacNeill air SR Iove in legacy mode what

00:13:00,640 --> 00:13:06,310
if we were to look at creating like this

00:13:02,800 --> 00:13:11,410
special Mac VLAN that supported source

00:13:06,310 --> 00:13:12,700
mac based functionality that says ok at

00:13:11,410 --> 00:13:17,440
least then you can take the source MAC

00:13:12,700 --> 00:13:18,940
address off of that bf and assign it to

00:13:17,440 --> 00:13:21,970
some net Deb's you can figure out ok if

00:13:18,940 --> 00:13:23,740
I see traffic coming on this Mac VLAN

00:13:21,970 --> 00:13:25,689
I'm assuming it came from that VF over

00:13:23,740 --> 00:13:28,300
there unless you have something you know

00:13:25,689 --> 00:13:30,160
coming in from some stray other entity

00:13:28,300 --> 00:13:31,959
on the network but then that implies a

00:13:30,160 --> 00:13:33,610
mix a managed managed and unmanaged

00:13:31,959 --> 00:13:37,000
network without filtering which gets

00:13:33,610 --> 00:13:38,319
kinda messy but you know that's kind of

00:13:37,000 --> 00:13:40,360
thing I'm thinking about so there any

00:13:38,319 --> 00:13:48,569
thoughts on you know any of those first

00:13:40,360 --> 00:13:48,569
two so far yeah

00:13:54,540 --> 00:14:00,000
it turn it on Jamal there we go hats on

00:13:57,270 --> 00:14:02,580
um so maybe I'll ask a question that I'm

00:14:00,000 --> 00:14:07,830
sure a few people have which is what are

00:14:02,580 --> 00:14:09,390
you trying to do here so like maybe in

00:14:07,830 --> 00:14:10,770
the context of Macmillan offload the

00:14:09,390 --> 00:14:13,320
basic use case is very straightforward

00:14:10,770 --> 00:14:16,800
and it's very useful for the container

00:14:13,320 --> 00:14:18,390
case for the VM case right maybe the

00:14:16,800 --> 00:14:20,310
high level question worth asking is is

00:14:18,390 --> 00:14:23,040
there something that's not implemented

00:14:20,310 --> 00:14:25,980
in Macmillan that is that has a real use

00:14:23,040 --> 00:14:27,060
case driving it other than the modes I

00:14:25,980 --> 00:14:29,310
mean of course there's a whole bunch of

00:14:27,060 --> 00:14:31,290
modes we can grab implement but is there

00:14:29,310 --> 00:14:33,320
one is there one that's come up have

00:14:31,290 --> 00:14:35,100
people asked for something that

00:14:33,320 --> 00:14:37,170
specifically could help with

00:14:35,100 --> 00:14:39,480
acceleration or with some kind of

00:14:37,170 --> 00:14:42,180
feature well the thought that comes to

00:14:39,480 --> 00:14:44,430
mind with this is it's basically been a

00:14:42,180 --> 00:14:45,750
lot of the issues around switch dev and

00:14:44,430 --> 00:14:47,250
the fact that okay switch devs the way

00:14:45,750 --> 00:14:49,020
we want to do things going forward and

00:14:47,250 --> 00:14:52,380
it becomes a question of is there a way

00:14:49,020 --> 00:14:54,810
to make us or for us to make legacy SRO

00:14:52,380 --> 00:14:57,750
V look like switch dev without actually

00:14:54,810 --> 00:14:59,460
implementing switch dev and so that's

00:14:57,750 --> 00:15:02,460
where in my mind having some sort of

00:14:59,460 --> 00:15:05,640
source mode or source MAC address based

00:15:02,460 --> 00:15:08,490
Mac VLAN might work because more often

00:15:05,640 --> 00:15:10,200
than not in the case of legacy SRO V we

00:15:08,490 --> 00:15:11,850
still have a statically assigned MAC

00:15:10,200 --> 00:15:15,780
address and there's a feature called

00:15:11,850 --> 00:15:19,200
anti-spoofing which prevents that VF

00:15:15,780 --> 00:15:21,770
from being able to send a packet using

00:15:19,200 --> 00:15:24,600
anything but that source MAC address and

00:15:21,770 --> 00:15:28,740
so in theory you could then create a set

00:15:24,600 --> 00:15:30,390
of Mac VLANs that look like switch dev

00:15:28,740 --> 00:15:34,140
in terms of handling how they handle the

00:15:30,390 --> 00:15:36,030
traffic I understand ok so you're trying

00:15:34,140 --> 00:15:39,240
to make it such that the end user

00:15:36,030 --> 00:15:40,620
experience looks like it's switch right

00:15:39,240 --> 00:15:42,540
and leave with lots of ports but you're

00:15:40,620 --> 00:15:44,430
using Mac VLAN to emulate that behavior

00:15:42,540 --> 00:15:46,470
right ok so it's really more like a

00:15:44,430 --> 00:15:49,400
source protection or a source garden

00:15:46,470 --> 00:15:52,470
rather than Wells forward the source

00:15:49,400 --> 00:15:54,300
source protection is coming from the SRA

00:15:52,470 --> 00:15:56,220
avi there's the anti spoofy Church er

00:15:54,300 --> 00:15:57,630
but then it's the ok if I have traffic

00:15:56,220 --> 00:16:00,180
that comes in from here for broadcast

00:15:57,630 --> 00:16:01,920
like an art packet or something how do i

00:16:00,180 --> 00:16:03,150
distinguish which bf it came from so

00:16:01,920 --> 00:16:04,560
this might be a way to do that right

00:16:03,150 --> 00:16:05,690
right so it's still a filtering function

00:16:04,560 --> 00:16:10,490
right

00:16:05,690 --> 00:16:12,020
filtering engine yes okay and so that's

00:16:10,490 --> 00:16:15,680
just you know a couple of things I was

00:16:12,020 --> 00:16:17,480
thinking and so another thing is that

00:16:15,680 --> 00:16:21,320
we've been debating is whether or not we

00:16:17,480 --> 00:16:23,870
want to do like a new n do ops you know

00:16:21,320 --> 00:16:26,060
like a Mac VLAN ops like pointer

00:16:23,870 --> 00:16:27,530
structure to support some advanced

00:16:26,060 --> 00:16:29,690
offload so like some of the stuff like

00:16:27,530 --> 00:16:31,640
what I'd mentioned we're okay maybe we

00:16:29,690 --> 00:16:34,250
need to add support for adding you know

00:16:31,640 --> 00:16:35,960
a certain level of VLAN filtering from a

00:16:34,250 --> 00:16:41,600
Camille and since I can support both Mac

00:16:35,960 --> 00:16:44,170
and VLAN in the VM DQ to filter it might

00:16:41,600 --> 00:16:47,930
make sense to create a accelerated Mac

00:16:44,170 --> 00:16:49,970
accelerated VLAN that exists above the

00:16:47,930 --> 00:16:51,530
accelerated Mac VLAN theoretically and

00:16:49,970 --> 00:16:54,140
so I could actually do that as a

00:16:51,530 --> 00:16:55,820
combination and so that's another thing

00:16:54,140 --> 00:16:59,930
I might be we might look at doing is

00:16:55,820 --> 00:17:01,550
adding a new structure full of function

00:16:59,930 --> 00:17:02,780
pointers essentially just to support

00:17:01,550 --> 00:17:08,990
something like that so it'd be yet

00:17:02,780 --> 00:17:10,160
another function there let's see oh yeah

00:17:08,990 --> 00:17:12,890
and so yeah I already mentioned the

00:17:10,160 --> 00:17:15,620
source mode base switch to have like

00:17:12,890 --> 00:17:18,709
behavior so another one that came up

00:17:15,620 --> 00:17:21,800
that I actually shot down in internal

00:17:18,709 --> 00:17:26,180
discussions was the idea of creating a

00:17:21,800 --> 00:17:27,980
Mac VLAN as a almost a net dev onto

00:17:26,180 --> 00:17:29,990
itself basically where it would steal

00:17:27,980 --> 00:17:33,110
the are excuse from the lower device and

00:17:29,990 --> 00:17:34,310
then just have its own T excuse the only

00:17:33,110 --> 00:17:37,430
problem is there's certain situations

00:17:34,310 --> 00:17:37,970
where we are at least in the case of IX

00:17:37,430 --> 00:17:41,330
GBE

00:17:37,970 --> 00:17:43,280
where it really restricts what you can

00:17:41,330 --> 00:17:44,420
do because all of a sudden it becomes

00:17:43,280 --> 00:17:46,010
something where we have to somehow have

00:17:44,420 --> 00:17:48,410
a means of either rejecting enabling s

00:17:46,010 --> 00:17:52,190
rlv if it's used up all the vf3 sort or

00:17:48,410 --> 00:17:56,720
all the pull resources and pull

00:17:52,190 --> 00:17:59,480
resources number other things and really

00:17:56,720 --> 00:18:02,780
I wasn't a fan of having a no Q Q did

00:17:59,480 --> 00:18:05,180
well so existing Mac VLAN if I'm not

00:18:02,780 --> 00:18:06,830
mistaken has a no QQ disk which means it

00:18:05,180 --> 00:18:10,310
doesn't actually perform queuing on the

00:18:06,830 --> 00:18:11,660
cutest get self and so normally if you

00:18:10,310 --> 00:18:13,430
take cues from the lower to have and

00:18:11,660 --> 00:18:14,870
just give them straight to the upper dev

00:18:13,430 --> 00:18:16,370
it becomes problematic and right now

00:18:14,870 --> 00:18:17,270
that workaround for that is we end up

00:18:16,370 --> 00:18:19,640
having to go through a two stage

00:18:17,270 --> 00:18:21,590
transmit which implies a little bit

00:18:19,640 --> 00:18:23,720
overhead but at the same time allows for

00:18:21,590 --> 00:18:26,000
things like broadcast replication just

00:18:23,720 --> 00:18:27,110
in software versus hardware so I was one

00:18:26,000 --> 00:18:28,160
of the things I actually wanted to get

00:18:27,110 --> 00:18:30,500
away from is doing any broadcast

00:18:28,160 --> 00:18:32,960
replication in the hardware because I

00:18:30,500 --> 00:18:35,030
can get very expensive very quickly when

00:18:32,960 --> 00:18:36,350
you take something like a you know an

00:18:35,030 --> 00:18:38,960
ARF and all of a sudden you're having to

00:18:36,350 --> 00:18:44,090
replicate at 64 times and send it back

00:18:38,960 --> 00:18:45,230
up the PCIe bus and so I just wanted to

00:18:44,090 --> 00:18:50,660
try to get away from that as much as

00:18:45,230 --> 00:18:53,960
possible and so I don't know any

00:18:50,660 --> 00:18:55,940
thoughts on anything of C oh yeah and

00:18:53,960 --> 00:18:58,880
the last one I'll go ahead and cover

00:18:55,940 --> 00:18:59,840
that real quick is the one of the

00:18:58,880 --> 00:19:01,130
questions that's been coming up so how

00:18:59,840 --> 00:19:03,170
do we go about configuring queues

00:19:01,130 --> 00:19:05,960
interrupts Exedra for these maki VLAN

00:19:03,170 --> 00:19:07,910
interfaces we've got these pool groups

00:19:05,960 --> 00:19:10,100
that are floating around in the hardware

00:19:07,910 --> 00:19:11,240
but we don't have a good way of actually

00:19:10,100 --> 00:19:13,490
configuring them right now

00:19:11,240 --> 00:19:16,000
and so we're wondering if we need to be

00:19:13,490 --> 00:19:18,410
looking at like a dev link interface IP

00:19:16,000 --> 00:19:20,270
you know it becomes a where it should

00:19:18,410 --> 00:19:22,130
all this get defined I can you know one

00:19:20,270 --> 00:19:25,100
of the concerns that we have is you know

00:19:22,130 --> 00:19:26,810
deviling can quickly become a catch-all

00:19:25,100 --> 00:19:28,760
for okay while it doesn't fit any other

00:19:26,810 --> 00:19:30,260
tools let's dump it in there is this

00:19:28,760 --> 00:19:32,150
something we want to look at doing where

00:19:30,260 --> 00:19:34,490
we want to have a standard way for

00:19:32,150 --> 00:19:36,920
defining queues interrupts exedra on

00:19:34,490 --> 00:19:40,850
these interfaces this actually

00:19:36,920 --> 00:19:42,140
sridhar we'll be presenting later some

00:19:40,850 --> 00:19:45,010
of the issues we've run into with this

00:19:42,140 --> 00:19:47,240
in terms of defining where you want to

00:19:45,010 --> 00:19:51,110
or what how you want to have your

00:19:47,240 --> 00:19:52,190
interfaces configured with that I'll go

00:19:51,110 --> 00:19:54,500
ahead and throw it back out any

00:19:52,190 --> 00:19:56,570
questions on any other topics or any of

00:19:54,500 --> 00:19:59,200
the items I've thrown out here or any

00:19:56,570 --> 00:19:59,200
other ideas

00:20:03,760 --> 00:20:14,529
hi Michael second so I've been thinking

00:20:09,549 --> 00:20:18,020
so if you are just like giving a

00:20:14,529 --> 00:20:22,299
mequivalent to a container of am

00:20:18,020 --> 00:20:27,230
directly then it really works well

00:20:22,299 --> 00:20:29,690
so we're starts getting all a bit more

00:20:27,230 --> 00:20:33,350
messy is you if you want to beat more

00:20:29,690 --> 00:20:36,320
flexibility so like you want alright but

00:20:33,350 --> 00:20:41,090
I do want like two of these cards and I

00:20:36,320 --> 00:20:43,880
want maybe four for availability I won't

00:20:41,090 --> 00:20:46,700
like failover between them

00:20:43,880 --> 00:20:53,179
stuff like that then is suddenly you you

00:20:46,700 --> 00:20:55,419
would layer like maybe OBS or some other

00:20:53,179 --> 00:20:58,549
software device on top of McQuillan and

00:20:55,419 --> 00:21:01,190
then were normally for example you would

00:20:58,549 --> 00:21:03,260
put like a single OBS on top of physical

00:21:01,190 --> 00:21:05,210
device and then that has all the logic

00:21:03,260 --> 00:21:10,130
in one place so suddenly we would need

00:21:05,210 --> 00:21:13,370
like a ton of bridges a single one on

00:21:10,130 --> 00:21:15,289
top of every every McQuillan and

00:21:13,370 --> 00:21:18,559
suddenly part of the country ation is

00:21:15,289 --> 00:21:21,590
inoculum part of it is an obvious and it

00:21:18,559 --> 00:21:26,240
it looks at least may see and probably

00:21:21,590 --> 00:21:31,809
limits us in various ways like if we

00:21:26,240 --> 00:21:31,809
could somehow magically you know just

00:21:32,289 --> 00:21:41,360
have ability to for example you know

00:21:35,120 --> 00:21:45,710
connect OBS connect VMS through it and

00:21:41,360 --> 00:21:48,320
have it use vm d qo when it can for

00:21:45,710 --> 00:21:52,460
offloads that would solve some of those

00:21:48,320 --> 00:21:54,230
issues it's probably science fiction but

00:21:52,460 --> 00:21:56,419
i don't have better ideas but the

00:21:54,230 --> 00:21:58,460
problem is they're a deal so actually

00:21:56,419 --> 00:22:00,470
yeah what you're describing actually

00:21:58,460 --> 00:22:01,730
that's so like one of the things I had

00:22:00,470 --> 00:22:03,740
mentioned like extending support to

00:22:01,730 --> 00:22:04,880
regular B lines it sounds like well what

00:22:03,740 --> 00:22:07,549
you're describing sounds more like okay

00:22:04,880 --> 00:22:10,100
we need extend this for OVS basically is

00:22:07,549 --> 00:22:11,840
what comes down to so where OBS could go

00:22:10,100 --> 00:22:13,490
ahead and say this device give me some

00:22:11,840 --> 00:22:14,650
cues and I'm going to put this mac

00:22:13,490 --> 00:22:16,810
filter on it and

00:22:14,650 --> 00:22:18,910
it off and I'll do the you know I don't

00:22:16,810 --> 00:22:20,290
actually need a true net device in that

00:22:18,910 --> 00:22:22,330
case I would just have to have OVS

00:22:20,290 --> 00:22:24,730
reaching down and doing the manipulation

00:22:22,330 --> 00:22:26,860
which I think that should be a

00:22:24,730 --> 00:22:29,290
possibility although off to double check

00:22:26,860 --> 00:22:32,500
that actually changes some of the things

00:22:29,290 --> 00:22:34,800
is then it becomes a instead new and

00:22:32,500 --> 00:22:37,330
seventy ting the N do ops like pointer

00:22:34,800 --> 00:22:39,340
for just Mac V landed we still might

00:22:37,330 --> 00:22:43,030
need to keep like the open closed bits

00:22:39,340 --> 00:22:45,430
that are there for Mac VLAN already or

00:22:43,030 --> 00:22:48,310
in the N do ops in the N do ops just

00:22:45,430 --> 00:22:50,260
keep them generic in that case so

00:22:48,310 --> 00:22:52,180
actually that sounds yeah that'd be an

00:22:50,260 --> 00:22:56,890
interesting idea so I made a note of

00:22:52,180 --> 00:22:59,470
that so yeah that's right oh yeah okay I

00:22:56,890 --> 00:23:02,230
don't even need notes in yeah okay so I

00:22:59,470 --> 00:23:04,060
was kind of confused about the XPS q7 is

00:23:02,230 --> 00:23:07,270
Mac feelin still a single queue or

00:23:04,060 --> 00:23:10,420
multiple queues now Mac VLAN itself the

00:23:07,270 --> 00:23:11,830
actual device is single queue but in the

00:23:10,420 --> 00:23:15,820
lower dev it can be represented by

00:23:11,830 --> 00:23:17,830
multiple queues and that's where the I

00:23:15,820 --> 00:23:20,200
added a bit of trickiness to it and so

00:23:17,830 --> 00:23:22,270
that's the thing is the the MACD line

00:23:20,200 --> 00:23:23,320
itself says as long as it's a single

00:23:22,270 --> 00:23:25,630
queue that you add then it can be

00:23:23,320 --> 00:23:27,070
offloaded and the lower dev says okay I

00:23:25,630 --> 00:23:28,540
might allocate fork used to it and if

00:23:27,070 --> 00:23:29,980
you want you can configure XPS on the

00:23:28,540 --> 00:23:32,560
lower depth for those four queues and

00:23:29,980 --> 00:23:35,200
they're isolated and so what you'll end

00:23:32,560 --> 00:23:36,850
up with is you can see it and that it'll

00:23:35,200 --> 00:23:39,460
report a TC value of like negative

00:23:36,850 --> 00:23:42,040
something which is supposed to indicate

00:23:39,460 --> 00:23:45,280
the pool that it belongs to I know is it

00:23:42,040 --> 00:23:46,420
negative return remember now I coated it

00:23:45,280 --> 00:23:48,010
up three weeks ago and I went on

00:23:46,420 --> 00:23:52,540
vacation so it's like I can't remember

00:23:48,010 --> 00:23:53,800
now the exact details of it but yeah it

00:23:52,540 --> 00:23:56,380
ends up reporting it out and I think

00:23:53,800 --> 00:23:58,780
there's a it does like a pool number -

00:23:56,380 --> 00:24:00,640
or a pole number - something I think

00:23:58,780 --> 00:24:02,140
yeah that's right because I ended up

00:24:00,640 --> 00:24:05,020
just basically cheating and using that

00:24:02,140 --> 00:24:05,770
the HD TV channel specifications what

00:24:05,020 --> 00:24:09,310
popped into my head

00:24:05,770 --> 00:24:12,910
so is like pool number - and then actual

00:24:09,310 --> 00:24:13,930
TC if I remember right or the other way

00:24:12,910 --> 00:24:15,400
around I can't remember the exact

00:24:13,930 --> 00:24:19,570
details of it I have to double check the

00:24:15,400 --> 00:24:21,940
code but yeah ideally what it is is Mak

00:24:19,570 --> 00:24:23,290
VLAN doesn't know it has these hardware

00:24:21,940 --> 00:24:25,240
cues backing it's one of the things I

00:24:23,290 --> 00:24:26,740
wanted to avoid just we have some of the

00:24:25,240 --> 00:24:28,240
abstractions still so if you put

00:24:26,740 --> 00:24:30,670
something Mac VLAN in the content

00:24:28,240 --> 00:24:31,960
it doesn't have direct information about

00:24:30,670 --> 00:24:34,750
the lower device because you want to

00:24:31,960 --> 00:24:35,950
still have that abstraction but yeah I

00:24:34,750 --> 00:24:39,760
think the current code as it stands you

00:24:35,950 --> 00:24:41,350
can do XPS on the cues for the Mac VLAN

00:24:39,760 --> 00:24:44,530
on the lower dev but you can't do it on

00:24:41,350 --> 00:24:50,110
the Mac VLAN itself and it's actually

00:24:44,530 --> 00:24:53,050
storing that in the XPS map for the are

00:24:50,110 --> 00:24:54,730
in the net dev for the Mac VLAN in order

00:24:53,050 --> 00:24:56,710
to get there and it's using the txq

00:24:54,730 --> 00:24:58,780
subordinate device pointer to figure out

00:24:56,710 --> 00:25:00,910
oh okay I'm actually enslaved to that so

00:24:58,780 --> 00:25:03,060
if we have to look up the XPS map I go

00:25:00,910 --> 00:25:05,380
look at that device to get it back out

00:25:03,060 --> 00:25:07,000
that's kind of yeah it ends up being a

00:25:05,380 --> 00:25:10,420
little bit of a roundabout way but it's

00:25:07,000 --> 00:25:12,460
only in the queue configuration that it

00:25:10,420 --> 00:25:14,200
really comes up so I shouldn't have much

00:25:12,460 --> 00:25:16,630
of a penalty in terms of the fast path

00:25:14,200 --> 00:25:18,610
bits then I had to rebase it off of him

00:25:16,630 --> 00:25:20,740
Rita's recent patches and went and added

00:25:18,610 --> 00:25:22,090
the received queue stuff that was the

00:25:20,740 --> 00:25:25,300
one thing that's like oh I got a rebase

00:25:22,090 --> 00:25:25,950
my patches now so that's where we stand

00:25:25,300 --> 00:25:29,020
with that

00:25:25,950 --> 00:25:33,010
yeah there's XPS now and you can

00:25:29,020 --> 00:25:34,330
actually do it was it's the TC the cube

00:25:33,010 --> 00:25:38,740
mapping so technically now it also has

00:25:34,330 --> 00:25:41,050
DCB support ish it ends up defaulting to

00:25:38,740 --> 00:25:47,320
just whatever the queue config is for

00:25:41,050 --> 00:25:51,510
the lower device right now by default so

00:25:47,320 --> 00:25:51,510
any other questions comments

00:25:54,360 --> 00:25:59,440
yeah maybe ripped through that one

00:25:57,310 --> 00:26:00,460
pretty quick it's left to see we might

00:25:59,440 --> 00:26:03,240
end up with about a half hour at the

00:26:00,460 --> 00:26:06,700
current rates okay

00:26:03,240 --> 00:26:09,160
christen again yeah we'll have to see

00:26:06,700 --> 00:26:10,750
this one's been quite a hot topic on the

00:26:09,160 --> 00:26:13,540
mailing list the last few months

00:26:10,750 --> 00:26:17,620
SRA I'll be using paravirtualization as

00:26:13,540 --> 00:26:20,140
a standby path so what was it about I

00:26:17,620 --> 00:26:24,520
think is back around December the first

00:26:20,140 --> 00:26:26,410
time this got put out basic idea here is

00:26:24,520 --> 00:26:27,460
you want to provide a way to have

00:26:26,410 --> 00:26:30,040
vertigo

00:26:27,460 --> 00:26:31,330
or yeah so back in December we submitted

00:26:30,040 --> 00:26:33,900
this basic idea was you want to have a

00:26:31,330 --> 00:26:37,030
generic way for Verdejo to enslave a VF

00:26:33,900 --> 00:26:39,580
the idea being we want to have an easy

00:26:37,030 --> 00:26:42,310
way to put together a VM have it

00:26:39,580 --> 00:26:44,290
accelerated selfie of SRO V when it was

00:26:42,310 --> 00:26:47,410
available and otherwise just let it go

00:26:44,290 --> 00:26:49,630
and so the original design we actually

00:26:47,410 --> 00:26:53,380
had based off of the approach that

00:26:49,630 --> 00:26:56,890
Microsoft is using with net BSC what

00:26:53,380 --> 00:26:59,440
they were doing is their para virtual

00:26:56,890 --> 00:27:01,090
driver would go and check and see if

00:26:59,440 --> 00:27:03,610
there is any interfaces out there with

00:27:01,090 --> 00:27:06,430
the same MAC addresses it's and if there

00:27:03,610 --> 00:27:08,710
were it would go out and say okay you're

00:27:06,430 --> 00:27:10,360
my VF now and I'm going to take an

00:27:08,710 --> 00:27:12,580
ownership of you and I'm going to dump

00:27:10,360 --> 00:27:15,340
traffic down you as long as you're there

00:27:12,580 --> 00:27:16,660
and so what we ended up doing is

00:27:15,340 --> 00:27:18,340
essentially taking a lot of the code

00:27:16,660 --> 00:27:24,210
that was already there and that BSC

00:27:18,340 --> 00:27:27,790
porting it over to Verdi oh and then

00:27:24,210 --> 00:27:29,200
that way we could end up you know with

00:27:27,790 --> 00:27:33,730
the same kind of model similar look and

00:27:29,200 --> 00:27:36,760
feel type thing and then that led to a

00:27:33,730 --> 00:27:38,050
lot of emails basically what a lot of it

00:27:36,760 --> 00:27:39,580
came down to is a lot of people had

00:27:38,050 --> 00:27:43,000
different ideas about how the model

00:27:39,580 --> 00:27:45,400
should look Microsoft's model used what

00:27:43,000 --> 00:27:47,920
we refer to as the two driver to net dev

00:27:45,400 --> 00:27:52,600
model they would have the BF and the net

00:27:47,920 --> 00:27:55,120
BSC and so if you go to transmit it

00:27:52,600 --> 00:28:00,550
would go through and that via CQ disc

00:27:55,120 --> 00:28:02,140
and get into the VF skew disk and out to

00:28:00,550 --> 00:28:03,670
the wire

00:28:02,140 --> 00:28:05,560
we had some internal discussion about I

00:28:03,670 --> 00:28:06,580
wasn't a fan of that but it's what was

00:28:05,560 --> 00:28:10,650
there for net vs

00:28:06,580 --> 00:28:10,650
they wanted to try to go ahead with that

00:28:11,010 --> 00:28:14,350
eventually what we ended up going with

00:28:13,000 --> 00:28:15,880
though and this is actually more the

00:28:14,350 --> 00:28:18,880
model I was a fan of was the three net

00:28:15,880 --> 00:28:23,110
dev model the idea there is you had some

00:28:18,880 --> 00:28:24,670
sort of bonding type interface and

00:28:23,110 --> 00:28:26,800
that's not actually bonding just to be

00:28:24,670 --> 00:28:28,570
clear Jerry's listening somewhere it's

00:28:26,800 --> 00:28:31,360
not bonding I agree it's not bonding

00:28:28,570 --> 00:28:34,950
it's not teaming it's something else

00:28:31,360 --> 00:28:37,000
it looks kind of like active backup but

00:28:34,950 --> 00:28:42,430
that's about as close as it gets to

00:28:37,000 --> 00:28:44,770
bonding let's see so what we ended up

00:28:42,430 --> 00:28:47,350
doing there is we switched from that to

00:28:44,770 --> 00:28:47,980
net dead model to the three net dev and

00:28:47,350 --> 00:28:51,040
there was a bunch of back-and-forth

00:28:47,980 --> 00:28:53,470
about you know naming where the code

00:28:51,040 --> 00:28:54,820
should go we had was it I think by the

00:28:53,470 --> 00:28:58,240
time we were done I think we ended up

00:28:54,820 --> 00:29:04,150
with one shared colonel library type

00:28:58,240 --> 00:29:06,910
file ish new kernel module for the the

00:29:04,150 --> 00:29:10,480
Verdejo driver or not not for the Roger

00:29:06,910 --> 00:29:12,700
for the Bert bonding dry it well not

00:29:10,480 --> 00:29:18,430
Verne bonding that's the wrong name but

00:29:12,700 --> 00:29:20,020
yeah the was the failover driver yes so

00:29:18,430 --> 00:29:21,640
I still want to think of it as bypass I

00:29:20,020 --> 00:29:24,930
always preferred the name bypass instead

00:29:21,640 --> 00:29:27,550
of failover pen yeah the failover driver

00:29:24,930 --> 00:29:30,330
so really what we ended up with is like

00:29:27,550 --> 00:29:33,010
a three and a half driver model and

00:29:30,330 --> 00:29:34,390
three net devs which still there's a lot

00:29:33,010 --> 00:29:36,130
of discussion going on in the list about

00:29:34,390 --> 00:29:37,990
okay how can we hide net devs which

00:29:36,130 --> 00:29:39,070
that's another thing that can really get

00:29:37,990 --> 00:29:39,940
the community going when you start

00:29:39,070 --> 00:29:41,920
saying oh yeah we want to hide stuff

00:29:39,940 --> 00:29:45,720
from the user although Israel it goes

00:29:41,920 --> 00:29:49,030
over real well anyway so that patch sets

00:29:45,720 --> 00:29:50,710
the three and a half net or three and a

00:29:49,030 --> 00:29:53,020
half driver three net dev models what's

00:29:50,710 --> 00:29:55,300
up streaming the kernel now there's

00:29:53,020 --> 00:29:58,120
still work that has to be done though so

00:29:55,300 --> 00:30:00,790
what's left to do on the kernel bits

00:29:58,120 --> 00:30:02,290
like I said are done but the qemu still

00:30:00,790 --> 00:30:05,230
needs to get changed so that it can

00:30:02,290 --> 00:30:06,940
actually advertise support for this and

00:30:05,230 --> 00:30:12,580
last I knew Red Hat's the ones taking

00:30:06,940 --> 00:30:14,680
ownership of that yeah because that's

00:30:12,580 --> 00:30:16,510
the thing is like read our had the like

00:30:14,680 --> 00:30:18,430
one line patch and it sounds like he's

00:30:16,510 --> 00:30:19,660
kind of handed that off to you so I just

00:30:18,430 --> 00:30:21,280
wanted to make sure

00:30:19,660 --> 00:30:23,680
raising public forum this way you know

00:30:21,280 --> 00:30:31,740
it's on video you said redhead sort of

00:30:23,680 --> 00:30:38,280
taking ownership for it so yeah yeah

00:30:31,740 --> 00:30:41,200
yeah yeah I didn't realize but I guess

00:30:38,280 --> 00:30:42,820
okay yeah so that's the thing is yeah

00:30:41,200 --> 00:30:44,140
that's one of the things I wanted to

00:30:42,820 --> 00:30:45,610
make sure I mean so that's why it's like

00:30:44,140 --> 00:30:47,560
it's this is a good forum to take care

00:30:45,610 --> 00:30:50,790
of that it's like okay since otherwise

00:30:47,560 --> 00:30:53,170
Sridhar the person thing next year yeah

00:30:50,790 --> 00:30:53,740
we assumed you are taking care of this

00:30:53,170 --> 00:30:56,290
all right

00:30:53,740 --> 00:30:57,190
yeah that's the thing is yeah he assumed

00:30:56,290 --> 00:30:57,970
you were taking care of man it's like

00:30:57,190 --> 00:30:59,410
are you sure

00:30:57,970 --> 00:31:00,910
so I figured this is a good for me just

00:30:59,410 --> 00:31:02,980
put it out there and say okay if he's

00:31:00,910 --> 00:31:04,920
not we're gonna hear it that's why it's

00:31:02,980 --> 00:31:13,000
not making progress

00:31:04,920 --> 00:31:15,880
well there's discussion about pairing

00:31:13,000 --> 00:31:17,290
but no yeah that's the thing is yeah I

00:31:15,880 --> 00:31:19,150
think it's kind of gotten off into a

00:31:17,290 --> 00:31:20,770
bunch of rat holes it's like get loose

00:31:19,150 --> 00:31:22,780
way always talking about okay hiding

00:31:20,770 --> 00:31:25,680
this or pairing via that and it's like

00:31:22,780 --> 00:31:27,940
okay we need sounds like we do need to

00:31:25,680 --> 00:31:30,510
figure out exactly what the path is

00:31:27,940 --> 00:31:49,210
going forward for that who owns what

00:31:30,510 --> 00:31:55,150
okay just passing my paper yep yeah it's

00:31:49,210 --> 00:31:59,740
on the queue patch in we just with the

00:31:55,150 --> 00:32:03,160
standby bit so that a controller some

00:31:59,740 --> 00:32:06,520
administrator can do the management wire

00:32:03,160 --> 00:32:12,790
some scripting until we get the final

00:32:06,520 --> 00:32:19,060
solution with the changes so if you want

00:32:12,790 --> 00:32:26,040
to control the visibility of this stand

00:32:19,060 --> 00:32:29,020
by one of the primary write externally

00:32:26,040 --> 00:32:30,760
that's possible but then you need to

00:32:29,020 --> 00:32:33,010
expose a bunch of internal

00:32:30,760 --> 00:32:37,510
give me information to that external

00:32:33,010 --> 00:32:40,270
controller I can see it

00:32:37,510 --> 00:32:43,720
this kind of educating applied but it's

00:32:40,270 --> 00:32:45,640
not what has been posted there's right

00:32:43,720 --> 00:32:47,350
now there is not enough information for

00:32:45,640 --> 00:32:54,220
an external controller to do the right

00:32:47,350 --> 00:32:58,000
thing yeah so you're talking about

00:32:54,220 --> 00:33:06,280
external to the guest or from the guest

00:32:58,000 --> 00:33:13,140
side okay yes so from your side I'm from

00:33:06,280 --> 00:33:16,840
Microsoft Bob reason we did actually

00:33:13,140 --> 00:33:21,580
switch between the way I found that

00:33:16,840 --> 00:33:25,450
versus that in case our hyper-v actually

00:33:21,580 --> 00:33:29,790
the Synthetica pass the native si is

00:33:25,450 --> 00:33:33,700
active at all time so it's active

00:33:29,790 --> 00:33:38,530
simultaneously as the wave driver so

00:33:33,700 --> 00:33:42,280
because in our model the broadcast

00:33:38,530 --> 00:33:46,990
multicast and the TCP activates the same

00:33:42,280 --> 00:33:49,900
flag they still go through the database

00:33:46,990 --> 00:33:51,669
thing so they don't go to the PF so

00:33:49,900 --> 00:33:55,419
actually posture all the interfaces

00:33:51,669 --> 00:33:59,140
active so my question is for you is in

00:33:55,419 --> 00:34:03,610
the in case of your what I hope ever so

00:33:59,140 --> 00:34:08,200
when you use the wave does that take all

00:34:03,610 --> 00:34:11,740
the packet so the the TV driver is

00:34:08,200 --> 00:34:16,300
completely idle when you use VF is that

00:34:11,740 --> 00:34:18,100
the case mmm somewhat so that's where

00:34:16,300 --> 00:34:19,119
this gets so I'll go ahead and move on

00:34:18,100 --> 00:34:22,720
to the next Sykes we're kind of getting

00:34:19,119 --> 00:34:24,310
into that so the big issue so we

00:34:22,720 --> 00:34:26,980
basically took care of the guest side of

00:34:24,310 --> 00:34:28,060
all of this with with those patches the

00:34:26,980 --> 00:34:29,379
problem is it didn't take care of

00:34:28,060 --> 00:34:31,450
anything external in this henna what we

00:34:29,379 --> 00:34:33,159
were getting into now is everything

00:34:31,450 --> 00:34:36,159
outside of QEMU it becomes how do you

00:34:33,159 --> 00:34:37,960
configure it in my mind to some extent a

00:34:36,159 --> 00:34:39,550
lot of this could get simplified real

00:34:37,960 --> 00:34:41,560
quick by just setting up a couple things

00:34:39,550 --> 00:34:44,369
to prevent loops from the pair of

00:34:41,560 --> 00:34:44,369
virtual to the

00:34:44,720 --> 00:34:51,649
BF interface but for things like

00:34:49,999 --> 00:34:53,809
broadcast multicast and you end up with

00:34:51,649 --> 00:34:55,970
both receiving the same broadcast it

00:34:53,809 --> 00:34:57,049
comes from an outside source and so

00:34:55,970 --> 00:34:59,329
that's one thing we still have to work

00:34:57,049 --> 00:35:00,829
on with some of this yet I think and so

00:34:59,329 --> 00:35:03,769
like one thing I was actually debating

00:35:00,829 --> 00:35:05,720
is at some point looking at doing and

00:35:03,769 --> 00:35:09,769
this would be is or in the audience

00:35:05,720 --> 00:35:12,529
anywhere okay so I can talk it well he's

00:35:09,769 --> 00:35:15,230
probably watching online so looking at

00:35:12,529 --> 00:35:18,249
maybe extending legacy srl VC if we can

00:35:15,230 --> 00:35:20,779
get away with that to allow support for

00:35:18,249 --> 00:35:23,630
disabling broadcast and multicast on the

00:35:20,779 --> 00:35:24,799
VF cuz then doing something like that we

00:35:23,630 --> 00:35:27,619
could look at a model more like what

00:35:24,799 --> 00:35:28,489
you've described we're in it would it be

00:35:27,619 --> 00:35:30,440
at least the broadcast and multicast

00:35:28,489 --> 00:35:33,079
could go the pair of virtual paths and

00:35:30,440 --> 00:35:35,269
so we could avoid doing the packet

00:35:33,079 --> 00:35:37,849
replication and heating up all the extra

00:35:35,269 --> 00:35:40,339
PCIe bandwidth for sr io v that way and

00:35:37,849 --> 00:35:42,019
then I just end up leaving the unicast

00:35:40,339 --> 00:35:45,380
traffic to just go straight through the

00:35:42,019 --> 00:35:50,480
VF as it is with the existing hardware

00:35:45,380 --> 00:35:51,619
filtering and so that would help to take

00:35:50,480 --> 00:35:53,660
care of something like the east-west

00:35:51,619 --> 00:35:55,249
traffic and all of that the other thing

00:35:53,660 --> 00:35:56,779
we could look at doing like if I'm not

00:35:55,249 --> 00:36:00,680
mistaken the Microsoft approach right

00:35:56,779 --> 00:36:04,759
now ends up sending everything from the

00:36:00,680 --> 00:36:07,369
guest down in down the VF interface if I

00:36:04,759 --> 00:36:08,900
understand it correctly I think from the

00:36:07,369 --> 00:36:10,940
guest everything goes down the VF but

00:36:08,900 --> 00:36:14,059
coming back it takes care of the

00:36:10,940 --> 00:36:17,150
broadcast multicast and you said the TCP

00:36:14,059 --> 00:36:20,079
syn requests all come in on the pair of

00:36:17,150 --> 00:36:23,930
virtual interface right yes correct

00:36:20,079 --> 00:36:25,549
which yeah so I'd probably be looking at

00:36:23,930 --> 00:36:27,619
doing something similar to that the only

00:36:25,549 --> 00:36:29,480
thing I have questions about whether

00:36:27,619 --> 00:36:33,349
there'd be any advantage also looking at

00:36:29,480 --> 00:36:37,099
doing some sort of trick to push all the

00:36:33,349 --> 00:36:39,559
broadcast multicast down the pair of

00:36:37,099 --> 00:36:42,339
virtual interface as well just because

00:36:39,559 --> 00:36:44,509
then if you're doing replication you

00:36:42,339 --> 00:36:46,279
you'd only have to do it in software and

00:36:44,509 --> 00:36:50,059
you just hopefully just be able to send

00:36:46,279 --> 00:36:52,279
out the PF without having to actually do

00:36:50,059 --> 00:36:53,329
any replication in Sault well I guess

00:36:52,279 --> 00:36:56,380
just talking to do the replication is

00:36:53,329 --> 00:36:56,380
just earlier so

00:36:58,390 --> 00:37:05,360
the question is is the replication a

00:37:02,480 --> 00:37:07,820
real concern and one of the issues we

00:37:05,360 --> 00:37:11,150
see with SR Iove as you do broadcast or

00:37:07,820 --> 00:37:14,330
multicast and you have 64 v FM your PCIe

00:37:11,150 --> 00:37:19,220
bandwidth goes but because only for a

00:37:14,330 --> 00:37:20,990
pathological like benchmark is right in

00:37:19,220 --> 00:37:22,580
the real-world application you're going

00:37:20,990 --> 00:37:26,000
to do a harp or something every once in

00:37:22,580 --> 00:37:27,350
a while and well in some cases yes the

00:37:26,000 --> 00:37:29,030
problem is there are specific use cases

00:37:27,350 --> 00:37:32,180
that do things like use multicast

00:37:29,030 --> 00:37:33,920
traffic all over the place and like in

00:37:32,180 --> 00:37:35,330
arc the case of our hardware it's like a

00:37:33,920 --> 00:37:37,670
shared filter table for all the

00:37:35,330 --> 00:37:39,380
multicast so if anybody is listening on

00:37:37,670 --> 00:37:42,200
multicast everyone's listening on

00:37:39,380 --> 00:37:45,980
multicast it's like ix vbe has this

00:37:42,200 --> 00:37:48,110
issue for instance and so I I agree with

00:37:45,980 --> 00:37:49,970
that but to avoid that particular

00:37:48,110 --> 00:37:52,220
problem you're going to create a huge

00:37:49,970 --> 00:37:54,020
complication because you're now going to

00:37:52,220 --> 00:37:55,670
have to examine packets on the TX path

00:37:54,020 --> 00:37:58,550
which you don't want to be able to do it

00:37:55,670 --> 00:38:01,100
like all the simplicity of being TX

00:37:58,550 --> 00:38:02,960
mapped into a like why have a Salafi in

00:38:01,100 --> 00:38:05,480
the first place the whole point is

00:38:02,960 --> 00:38:07,970
you're creating a dedicated queue up to

00:38:05,480 --> 00:38:10,610
the guest let it go out on the receive

00:38:07,970 --> 00:38:12,470
path you have a native hook to be able

00:38:10,610 --> 00:38:14,240
to do the multicast broad current ring

00:38:12,470 --> 00:38:15,730
and and that's what the exposure really

00:38:14,240 --> 00:38:18,260
is right the network can flood you with

00:38:15,730 --> 00:38:19,970
multicast and broadcast which you cannot

00:38:18,260 --> 00:38:22,010
control within your own domain your

00:38:19,970 --> 00:38:24,260
you'll restrict it to your own domain

00:38:22,010 --> 00:38:26,240
you cannot write generate multicast

00:38:24,260 --> 00:38:29,720
broadcast for more than your own own

00:38:26,240 --> 00:38:31,430
peers so yeah it's a lot simpler do not

00:38:29,720 --> 00:38:32,960
try to complicate that year yeah the

00:38:31,430 --> 00:38:37,670
reason is thinking about is we already

00:38:32,960 --> 00:38:40,760
have a in the case of you know the three

00:38:37,670 --> 00:38:42,380
net dead model we end up with the an

00:38:40,760 --> 00:38:43,610
extranet dev in between so it becomes

00:38:42,380 --> 00:38:45,620
okay in the transmitted path in that

00:38:43,610 --> 00:38:48,230
case I have to do like it there's like

00:38:45,620 --> 00:38:49,790
what three four different tests that

00:38:48,230 --> 00:38:50,870
we're doing before it actually sends it

00:38:49,790 --> 00:38:53,690
out the wire just to make sure that the

00:38:50,870 --> 00:38:55,340
PF error though sorry the VF exists and

00:38:53,690 --> 00:38:56,720
all that before I can send out the VF

00:38:55,340 --> 00:38:58,550
I'm just wondering how much it would

00:38:56,720 --> 00:39:00,770
actually cost us to look at one bit in

00:38:58,550 --> 00:39:02,990
the destination MAC address and go okay

00:39:00,770 --> 00:39:04,280
is this a multicast packet yep okay

00:39:02,990 --> 00:39:06,110
don't even bother with that other stuff

00:39:04,280 --> 00:39:06,930
I'm just gonna send it straight down so

00:39:06,110 --> 00:39:08,460
I would

00:39:06,930 --> 00:39:09,960
down the path of removing the tree

00:39:08,460 --> 00:39:11,940
checks that you have right like trying

00:39:09,960 --> 00:39:13,859
to make it so that you go to them like

00:39:11,940 --> 00:39:15,119
move everything to initialization time

00:39:13,859 --> 00:39:16,500
rather than a runtime check

00:39:15,119 --> 00:39:17,579
well some of it you can't be helped

00:39:16,500 --> 00:39:20,210
because you haven't checked whether or

00:39:17,579 --> 00:39:28,079
not the link exists on the lower device

00:39:20,210 --> 00:39:30,960
basically unless you're going to take an

00:39:28,079 --> 00:39:33,319
exception or a null point of check you

00:39:30,960 --> 00:39:35,430
don't have to really put it in the data

00:39:33,319 --> 00:39:38,420
except for customers tend to get really

00:39:35,430 --> 00:39:40,770
upset when they start losing packets so

00:39:38,420 --> 00:39:42,089
yeah you know it's an honest statement

00:39:40,770 --> 00:39:47,280
yeah and that's usually the answer I

00:39:42,089 --> 00:39:50,400
give and it comes back looking for cache

00:39:47,280 --> 00:39:51,720
misses but yeah yeah I mean I would go

00:39:50,400 --> 00:39:54,210
in that direction the whole point of

00:39:51,720 --> 00:39:55,740
doing well yeah it's optimize wherever

00:39:54,210 --> 00:39:58,980
possible but in this case it's one of

00:39:55,740 --> 00:40:00,750
those things where yeah we get the the

00:39:58,980 --> 00:40:02,579
penalty we you pay for dropping packets

00:40:00,750 --> 00:40:04,260
contends get pretty significant so it's

00:40:02,579 --> 00:40:05,880
like okay try to avoid it wherever

00:40:04,260 --> 00:40:08,130
possible so it's like performance but at

00:40:05,880 --> 00:40:11,760
the same time stability is basically the

00:40:08,130 --> 00:40:13,049
trade-off sure but you're handling I

00:40:11,760 --> 00:40:15,750
mean you already have the moxx that's

00:40:13,049 --> 00:40:18,390
going to make the choice yeah but the

00:40:15,750 --> 00:40:20,940
point is don't don't because there's

00:40:18,390 --> 00:40:23,160
already a hook don't make one this is

00:40:20,940 --> 00:40:24,420
just yeah this is transmit side only

00:40:23,160 --> 00:40:28,640
that I'm talking about for these hooks

00:40:24,420 --> 00:40:31,140
so anyway let's see

00:40:28,640 --> 00:40:32,630
and yeah so like like I mentioned before

00:40:31,140 --> 00:40:35,490
so one of the other things that came up

00:40:32,630 --> 00:40:37,079
it's come up multiple times is how can

00:40:35,490 --> 00:40:38,730
we hide these devices you want to make

00:40:37,079 --> 00:40:41,670
it look like one net dev for all of this

00:40:38,730 --> 00:40:45,270
and it's like I don't know this is one

00:40:41,670 --> 00:40:46,920
where I can see it sort of from the

00:40:45,270 --> 00:40:48,510
usability standpoint but the engineering

00:40:46,920 --> 00:40:50,160
me is like no no no no leave all the

00:40:48,510 --> 00:40:51,990
switches and levers there so we can you

00:40:50,160 --> 00:40:53,160
know if this train goes off the track we

00:40:51,990 --> 00:40:54,420
can just put it right back on the track

00:40:53,160 --> 00:41:00,599
without any problems and we can see

00:40:54,420 --> 00:41:03,720
that's gone off the track and so yeah

00:41:00,599 --> 00:41:04,650
there's that that one and yeah like I

00:41:03,720 --> 00:41:07,049
mentioned one of the other things that's

00:41:04,650 --> 00:41:08,880
come up in discussions now is means of

00:41:07,049 --> 00:41:10,799
identifying pair devices other than the

00:41:08,880 --> 00:41:12,119
MAC address we've had a lot of

00:41:10,799 --> 00:41:13,950
discussions about it like one of the

00:41:12,119 --> 00:41:16,260
things we're talking about was exposing

00:41:13,950 --> 00:41:18,660
some sort of PCI bridge like thing

00:41:16,260 --> 00:41:20,460
inside QEMU say okay everything above

00:41:18,660 --> 00:41:24,990
this bridge is going to be paired as one

00:41:20,460 --> 00:41:27,089
logical net device there's like serial

00:41:24,990 --> 00:41:29,250
number type things have been discussed I

00:41:27,089 --> 00:41:31,980
think there's just a lot of different

00:41:29,250 --> 00:41:34,050
ways we can go with all that and so with

00:41:31,980 --> 00:41:37,250
that any thoughts on any other thoughts

00:41:34,050 --> 00:41:37,250
on any of us

00:41:45,839 --> 00:41:51,380
No yeah you guys can you pass the mic

00:41:49,170 --> 00:41:51,380
back

00:41:55,410 --> 00:42:04,200
so I think for Peronists which they're

00:41:59,369 --> 00:42:06,930
things it's more a question of someone

00:42:04,200 --> 00:42:11,640
you know just trying to come up with an

00:42:06,930 --> 00:42:14,609
exhaustive list of things and then kind

00:42:11,640 --> 00:42:17,609
of prototyping and saying all right so

00:42:14,609 --> 00:42:20,160
this works let's try to support this

00:42:17,609 --> 00:42:26,849
this really doesn't give a huge benefit

00:42:20,160 --> 00:42:29,369
so deferred like the the reason we we

00:42:26,849 --> 00:42:34,440
have the what we have is that it's like

00:42:29,369 --> 00:42:41,369
kind of obviously a basic thing that

00:42:34,440 --> 00:42:43,259
obviously helps right but if like if we

00:42:41,369 --> 00:42:48,240
have at least the list of things that do

00:42:43,259 --> 00:42:50,940
help then I don't see I think that just

00:42:48,240 --> 00:42:54,660
no one really buzzard is it's the only

00:42:50,940 --> 00:42:57,710
reason we don't yet have that and for

00:42:54,660 --> 00:43:01,829
hiding I just want them as a maybe

00:42:57,710 --> 00:43:02,640
somehow we should like do something like

00:43:01,829 --> 00:43:05,039
support

00:43:02,640 --> 00:43:07,140
all right this device if you see it

00:43:05,039 --> 00:43:09,960
automatically hide it put it in the

00:43:07,140 --> 00:43:12,539
namespace right

00:43:09,960 --> 00:43:14,430
I love create a new namespace let's see

00:43:12,539 --> 00:43:17,220
okay these are my slaves in my group or

00:43:14,430 --> 00:43:19,880
something like that right and you know

00:43:17,220 --> 00:43:23,099
unix/linux

00:43:19,880 --> 00:43:25,190
that's some sometimes does does know how

00:43:23,099 --> 00:43:30,390
to play with namespaces in the key on o

00:43:25,190 --> 00:43:33,150
most necessarily managed by user space

00:43:30,390 --> 00:43:35,670
but it's not kind of you know out of the

00:43:33,150 --> 00:43:37,259
question right actually yeah that that

00:43:35,670 --> 00:43:38,910
would probably work instead of hiding

00:43:37,259 --> 00:43:41,670
just basically put it in a side

00:43:38,910 --> 00:43:42,750
namespace somewhere okay and it's

00:43:41,670 --> 00:43:44,220
something to think about cuz yeah then

00:43:42,750 --> 00:43:45,869
you end up exposing within the guest

00:43:44,220 --> 00:43:47,609
just the one bond that comes out of that

00:43:45,869 --> 00:43:50,460
namespace create it in that namespace

00:43:47,609 --> 00:43:54,569
and basically expose it by you know

00:43:50,460 --> 00:43:59,670
migration okay yeah and if it's like a

00:43:54,569 --> 00:44:03,920
bridge then maybe you can die they have

00:43:59,670 --> 00:44:03,920
a bridge driver create that namespace

00:44:03,930 --> 00:44:10,570
right I mean right now what we're

00:44:07,840 --> 00:44:13,240
designing is a bridge was a special

00:44:10,570 --> 00:44:17,250
vendor and device ID no it's not a

00:44:13,240 --> 00:44:19,920
question to have a driver uploaded

00:44:17,250 --> 00:44:24,430
besides a regular PCI bridge driver

00:44:19,920 --> 00:44:26,080
right have that do things yeah okay so

00:44:24,430 --> 00:44:29,050
yeah so I gave me something to think

00:44:26,080 --> 00:44:31,960
about because huh and what after the

00:44:29,050 --> 00:44:33,790
tough does leave you some control right

00:44:31,960 --> 00:44:35,050
cuz yeah cuz then it's the interfaces

00:44:33,790 --> 00:44:36,190
are still there they're not actually

00:44:35,050 --> 00:44:40,030
hidden it's just there in a side

00:44:36,190 --> 00:44:41,680
namespace and so essentially yeah so

00:44:40,030 --> 00:44:43,150
we'd have to change the existing patch

00:44:41,680 --> 00:44:45,970
so that would basically create that

00:44:43,150 --> 00:44:47,740
namespace shunt off the Vertigo and the

00:44:45,970 --> 00:44:50,890
VF over to that namespace and then

00:44:47,740 --> 00:44:54,190
exposed the new bonding interface or the

00:44:50,890 --> 00:45:01,030
bond bridge whatever it is in its place

00:44:54,190 --> 00:45:03,130
that might work okay yeah so the

00:45:01,030 --> 00:45:06,060
question is we we would essentially have

00:45:03,130 --> 00:45:07,600
a forwarding namespace that contains the

00:45:06,060 --> 00:45:10,000
interfaces there being logically

00:45:07,600 --> 00:45:11,170
combined to create the new one and yeah

00:45:10,000 --> 00:45:13,990
that's what I think we're talking about

00:45:11,170 --> 00:45:16,660
here is creating a custom namespace that

00:45:13,990 --> 00:45:18,550
those the idea is really the namespace

00:45:16,660 --> 00:45:20,830
becomes a control point that's a minute

00:45:18,550 --> 00:45:22,360
right hopefully doesn't create a you're

00:45:20,830 --> 00:45:24,940
not really looping the packet through

00:45:22,360 --> 00:45:27,730
another namespace handler that would

00:45:24,940 --> 00:45:29,770
know actually so it would actually work

00:45:27,730 --> 00:45:31,600
a lot like Mak VLAN only in this case it

00:45:29,770 --> 00:45:33,700
takes the original interface shunts it

00:45:31,600 --> 00:45:35,110
off to the original interfaces shunts

00:45:33,700 --> 00:45:36,970
them off and says okay here's this mac

00:45:35,110 --> 00:45:38,860
VLAN like thing the grouping control is

00:45:36,970 --> 00:45:42,190
presented to sort of a namespace that's

00:45:38,860 --> 00:45:44,290
right assigning the combination device

00:45:42,190 --> 00:45:48,310
if you write whatever they called it the

00:45:44,290 --> 00:45:52,030
film yeah the the VF and the Verdi a

00:45:48,310 --> 00:45:54,310
would both go into this failover

00:45:52,030 --> 00:45:56,020
namespace and you'd get the failover

00:45:54,310 --> 00:45:57,490
devices which is actually the one that

00:45:56,020 --> 00:46:00,850
picks which one it's actually talking to

00:45:57,490 --> 00:46:06,670
is what would be left behind exposed in

00:46:00,850 --> 00:46:09,670
the original namespace sure I mean it

00:46:06,670 --> 00:46:11,290
the one thing to think about is that'll

00:46:09,670 --> 00:46:13,120
work really well for the Intel type

00:46:11,290 --> 00:46:14,620
devices that you guys are having fried

00:46:13,120 --> 00:46:16,810
people we're going to be able to do some

00:46:14,620 --> 00:46:18,730
of these things for real in hardware

00:46:16,810 --> 00:46:21,400
you want to build in the context of

00:46:18,730 --> 00:46:23,280
switch dev and everything else a thing

00:46:21,400 --> 00:46:25,210
that allows you to not need the software

00:46:23,280 --> 00:46:28,480
layering such that you can actually

00:46:25,210 --> 00:46:29,800
offload all of this if a device could do

00:46:28,480 --> 00:46:31,210
all the things you're talking about you

00:46:29,800 --> 00:46:34,270
want to be able to give that the same

00:46:31,210 --> 00:46:36,730
set of controls so that the end user

00:46:34,270 --> 00:46:37,900
experience remains the same right could

00:46:36,730 --> 00:46:39,670
you could argue that you could do that

00:46:37,900 --> 00:46:40,960
with the namespace design you could say

00:46:39,670 --> 00:46:42,190
well that's the thing is the same extent

00:46:40,960 --> 00:46:43,990
what we're trying to do with this is

00:46:42,190 --> 00:46:45,610
actually keep it looking like Verdejo so

00:46:43,990 --> 00:46:47,530
we're not necessarily exploding via

00:46:45,610 --> 00:46:49,120
features it becomes the okay try to

00:46:47,530 --> 00:46:50,770
expose as many of the Vertigo features

00:46:49,120 --> 00:46:53,380
are basically the intersection thereof

00:46:50,770 --> 00:46:56,380
as possible yeah I like it I get it I

00:46:53,380 --> 00:46:57,970
like it right yeah is that actually that

00:46:56,380 --> 00:46:59,500
the namespace solution solves a lot of

00:46:57,970 --> 00:47:01,180
that because that was my big concern is

00:46:59,500 --> 00:47:03,400
the okay something breaks how do I get

00:47:01,180 --> 00:47:04,810
under the hood now to fix it and if it's

00:47:03,400 --> 00:47:06,910
just in a namespace I can go crawl into

00:47:04,810 --> 00:47:08,470
the namespace and go check those

00:47:06,910 --> 00:47:10,270
interfaces and then take a look at and

00:47:08,470 --> 00:47:18,430
see what's going on and can you pass the

00:47:10,270 --> 00:47:20,590
Michael the microphone back demo so you

00:47:18,430 --> 00:47:24,280
one DS exposed to user space for you

00:47:20,590 --> 00:47:25,810
well ideally the internet dev interfaces

00:47:24,280 --> 00:47:27,160
shouldn't go away just for debugging

00:47:25,810 --> 00:47:29,860
purposes I should have some way to

00:47:27,160 --> 00:47:32,020
access them and so I want to still have

00:47:29,860 --> 00:47:33,850
them there so I can find them somehow I

00:47:32,020 --> 00:47:35,290
just don't need them right there in the

00:47:33,850 --> 00:47:36,370
front I would prefer to have them in the

00:47:35,290 --> 00:47:37,780
back and if we've shunt them into

00:47:36,370 --> 00:47:43,030
another namespace that would work in

00:47:37,780 --> 00:47:45,310
that regard sense just just making sure

00:47:43,030 --> 00:47:50,890
even though I suggested that I didn't

00:47:45,310 --> 00:47:52,600
volunteer to write yeah we can we can

00:47:50,890 --> 00:47:55,960
probably get seeping it was it loose way

00:47:52,600 --> 00:47:58,000
to work on that we might suggest that to

00:47:55,960 --> 00:48:00,670
him if he's watching nothing else we can

00:47:58,000 --> 00:48:02,530
even email him on it on the list so that

00:48:00,670 --> 00:48:03,790
was the thing he was excited about he

00:48:02,530 --> 00:48:17,440
wanted to have a way to actually hide

00:48:03,790 --> 00:48:19,480
the net it would work just like how we

00:48:17,440 --> 00:48:20,710
use Mac VLANs now where we create a Mac

00:48:19,480 --> 00:48:24,460
VLAN and then we move it to another

00:48:20,710 --> 00:48:26,620
namespace only in this case it's the the

00:48:24,460 --> 00:48:28,180
Vertigo creates this new interface and

00:48:26,620 --> 00:48:29,470
it shuts itself off to the other

00:48:28,180 --> 00:48:30,100
namespaces basically what it comes down

00:48:29,470 --> 00:48:33,880
to

00:48:30,100 --> 00:48:35,920
it moves itself and the VF and so it's

00:48:33,880 --> 00:48:37,180
just kind of the backwards logic of what

00:48:35,920 --> 00:48:38,620
we do right now for mac feelings right

00:48:37,180 --> 00:48:40,570
now it's we we create the mac feeling

00:48:38,620 --> 00:48:42,070
and we move it it's now Sena B we create

00:48:40,570 --> 00:48:45,790
the failover and we move the original

00:48:42,070 --> 00:48:47,200
device and so it'll have a pointer to

00:48:45,790 --> 00:48:49,270
the original device so it can just send

00:48:47,200 --> 00:48:50,920
straight across and ignore the name

00:48:49,270 --> 00:48:53,200
space if I'm not mistaken so it knows

00:48:50,920 --> 00:48:55,240
how to get there and it should be able

00:48:53,200 --> 00:49:11,590
to send it across I think have to work

00:48:55,240 --> 00:49:14,050
out the logistics but right how are we

00:49:11,590 --> 00:49:17,620
doing for time okay we're doing good

00:49:14,050 --> 00:49:23,260
yeah not doing going too fast so this

00:49:17,620 --> 00:49:26,380
last one is more of a a topic that's you

00:49:23,260 --> 00:49:28,030
know it's meant to inform some what it's

00:49:26,380 --> 00:49:29,230
even I'm not a hundred percent I think

00:49:28,030 --> 00:49:30,220
Michael might actually know more about

00:49:29,230 --> 00:49:32,380
this than I do

00:49:30,220 --> 00:49:34,150
possibly just because I know you've had

00:49:32,380 --> 00:49:36,160
to review a lot of patches in regards to

00:49:34,150 --> 00:49:37,480
a lot of this stuff you may have heard

00:49:36,160 --> 00:49:39,550
things and you may not know that you

00:49:37,480 --> 00:49:44,050
know as much about it as you might so

00:49:39,550 --> 00:49:47,260
we'll see so vhosts data path

00:49:44,050 --> 00:49:50,350
acceleration what is it it's a method

00:49:47,260 --> 00:49:52,870
for allowing a pair of virtual device to

00:49:50,350 --> 00:49:54,850
Dera well it's not really a true pair of

00:49:52,870 --> 00:49:56,200
virtual device it's a vs that's

00:49:54,850 --> 00:50:00,360
pretending to be a pair of virtual

00:49:56,200 --> 00:50:05,460
device to do direct packet IO

00:50:00,360 --> 00:50:08,500
yeah over physical hardware so basically

00:50:05,460 --> 00:50:12,040
what's doing is is it's a way of direct

00:50:08,500 --> 00:50:16,180
assigning a VF that's emulating bits of

00:50:12,040 --> 00:50:18,880
Verdejo such that the control path can

00:50:16,180 --> 00:50:22,510
remain emulated but the data path is

00:50:18,880 --> 00:50:25,420
completely passed through so essentially

00:50:22,510 --> 00:50:27,700
what it's doing I don't know how many of

00:50:25,420 --> 00:50:32,440
you are familiar with the VF IOM dev

00:50:27,700 --> 00:50:35,470
framework but basically what it does is

00:50:32,440 --> 00:50:37,210
allows you to define a device that's a

00:50:35,470 --> 00:50:40,030
pure software abstraction with bits of

00:50:37,210 --> 00:50:42,700
hardware thrown in just essentially

00:50:40,030 --> 00:50:43,990
speed up certain aspects of it so you

00:50:42,700 --> 00:50:45,790
can define certain pages

00:50:43,990 --> 00:50:47,920
being purely emulated in the device and

00:50:45,790 --> 00:50:51,070
certain pages as being actual direct

00:50:47,920 --> 00:50:52,990
design and so doing that you can get a

00:50:51,070 --> 00:50:54,670
mix of emulation and direct design and

00:50:52,990 --> 00:50:55,900
in theory that allows you to get away

00:50:54,670 --> 00:50:57,670
with a little bit more to where you can

00:50:55,900 --> 00:50:59,200
do things like theoretically live

00:50:57,670 --> 00:51:06,130
migration which is something that's been

00:50:59,200 --> 00:51:08,020
an issue with SRO V for a while so

00:51:06,130 --> 00:51:10,240
what's left to do my understanding is

00:51:08,020 --> 00:51:12,310
there isn't a lot that's actually been

00:51:10,240 --> 00:51:13,630
applied for it at this point there's a

00:51:12,310 --> 00:51:15,190
lot of works like when this actually

00:51:13,630 --> 00:51:17,070
caught this actually caught me a bit by

00:51:15,190 --> 00:51:19,300
surprise

00:51:17,070 --> 00:51:20,470
within until I started getting pulled

00:51:19,300 --> 00:51:23,080
into stuff where to go we need to

00:51:20,470 --> 00:51:26,530
support sr iove on Verdi oh it's like

00:51:23,080 --> 00:51:28,300
what it's a virtual interface it's not

00:51:26,530 --> 00:51:30,610
supposed to support us or Iovine it's

00:51:28,300 --> 00:51:33,250
like well we've got this device it looks

00:51:30,610 --> 00:51:37,900
just like Verdi oh but it does SRO v is

00:51:33,250 --> 00:51:40,090
a PF okay and so you might have seen

00:51:37,900 --> 00:51:44,140
patches for me to actually get that or

00:51:40,090 --> 00:51:46,830
try to enable that and then that got

00:51:44,140 --> 00:51:49,869
handed off to what I'm gonna probably

00:51:46,830 --> 00:51:52,030
mess up the name is like two-way by I

00:51:49,869 --> 00:51:56,230
can't remember the exact pronunciation

00:51:52,030 --> 00:51:57,880
of it but he was working on it and

00:51:56,230 --> 00:52:00,760
basically what we're looking at doing is

00:51:57,880 --> 00:52:04,150
this device ends up essentially exposing

00:52:00,760 --> 00:52:06,369
what looks like a Verdejo interface as

00:52:04,150 --> 00:52:10,660
the PF and then when you turn on SRO V L

00:52:06,369 --> 00:52:14,680
it also exposes the BFS the idea is you

00:52:10,660 --> 00:52:18,400
take one of these BFS you chop it up

00:52:14,680 --> 00:52:20,380
using the M dev framework and you can

00:52:18,400 --> 00:52:26,140
assign the data path directly into the

00:52:20,380 --> 00:52:27,910
guest and still use the emulated bits so

00:52:26,140 --> 00:52:30,040
you can get access back to figure out

00:52:27,910 --> 00:52:32,290
what the current state of the device is

00:52:30,040 --> 00:52:34,450
supposed to be and if you throw in some

00:52:32,290 --> 00:52:37,030
page tracking in the device itself or

00:52:34,450 --> 00:52:39,190
via DP DK this is going to be the dirty

00:52:37,030 --> 00:52:41,830
word and you know DP the original

00:52:39,190 --> 00:52:46,600
implementation for this is for DP DK so

00:52:41,830 --> 00:52:48,850
just be forewarned for that but the idea

00:52:46,600 --> 00:52:50,770
is they were trying to do page tracking

00:52:48,850 --> 00:52:52,240
so then you could migrate and actually

00:52:50,770 --> 00:52:54,369
track the pages that were going to be

00:52:52,240 --> 00:52:58,530
dm8 into and the whole thing could

00:52:54,369 --> 00:52:58,530
actually move over without an issue

00:52:59,290 --> 00:53:04,730
so there's a bunch of work so like your

00:53:01,700 --> 00:53:07,610
initial patches I got for this I

00:53:04,730 --> 00:53:09,230
reviewed them once and had some comments

00:53:07,610 --> 00:53:11,180
like one of the things that kind of

00:53:09,230 --> 00:53:15,170
startled me is like there's comments

00:53:11,180 --> 00:53:16,370
about blacklisting a the Verdi a driver

00:53:15,170 --> 00:53:18,140
in order to make it work and it's like

00:53:16,370 --> 00:53:20,930
on the host and like no no no no no

00:53:18,140 --> 00:53:22,430
we're not black listing any drivers so

00:53:20,930 --> 00:53:23,960
we need to work with the Verdi of the

00:53:22,430 --> 00:53:25,520
drivers to get all of this to work so

00:53:23,960 --> 00:53:27,740
that's where a lot of stuff comes in

00:53:25,520 --> 00:53:30,020
where it's like okay we have to get srl

00:53:27,740 --> 00:53:32,390
be working on Verdi Oh in order to

00:53:30,020 --> 00:53:36,140
actually be able to spawn VF okay step

00:53:32,390 --> 00:53:38,420
one step two okay we spawn these VF s

00:53:36,140 --> 00:53:41,300
we've spawned and you know we provide

00:53:38,420 --> 00:53:43,430
the EM dev capable VF drivers how do you

00:53:41,300 --> 00:53:44,990
get it into the guest well you're going

00:53:43,430 --> 00:53:47,720
to need a B host back-end that knows how

00:53:44,990 --> 00:53:48,920
to support that and so that we know

00:53:47,720 --> 00:53:50,930
there's been a lot of work going on on

00:53:48,920 --> 00:53:52,310
that there's been several patch sets

00:53:50,930 --> 00:53:57,290
submit to the mailing list if I'm not

00:53:52,310 --> 00:53:59,180
mistaken alright basically all so I'll

00:53:57,290 --> 00:54:02,870
stop there real quick and see you know

00:53:59,180 --> 00:54:04,430
questions because this is can be a very

00:54:02,870 --> 00:54:05,960
confusing topic and I'm probably not the

00:54:04,430 --> 00:54:08,200
best at explaining it because even I am

00:54:05,960 --> 00:54:12,280
somewhat confused by it still so

00:54:08,200 --> 00:54:12,280
question comments concerns

00:54:17,990 --> 00:54:25,950
hame is passed between the three so I

00:54:23,820 --> 00:54:27,540
haven't looked at this much but how do

00:54:25,950 --> 00:54:29,100
you handle things like hardware

00:54:27,540 --> 00:54:31,440
descriptor formats and things like this

00:54:29,100 --> 00:54:33,270
in this model or well that's the thing

00:54:31,440 --> 00:54:35,130
is that's the part that's not the

00:54:33,270 --> 00:54:36,330
Harvard descriptor format my

00:54:35,130 --> 00:54:38,430
understanding is it has to match what's

00:54:36,330 --> 00:54:42,090
in Verdi oh so like or Vireo black

00:54:38,430 --> 00:54:44,400
touring some expectations beyond just

00:54:42,090 --> 00:54:45,930
descriptor matching as to how the

00:54:44,400 --> 00:54:48,390
descriptors will work of what kind of

00:54:45,930 --> 00:54:50,370
notifications you'll get and all the

00:54:48,390 --> 00:54:51,990
Vertigo devices so you're saying if

00:54:50,370 --> 00:54:54,030
Hardware matches were tiwa

00:54:51,990 --> 00:54:59,910
specifications then this right then and

00:54:54,030 --> 00:55:06,990
then only right okay see I can't even

00:54:59,910 --> 00:55:09,000
hear you from up here oh yeah the VP a

00:55:06,990 --> 00:55:12,420
that they actually presented it at KVM

00:55:09,000 --> 00:55:14,940
forum last year and there's been several

00:55:12,420 --> 00:55:16,200
patch test sets pushed there's just a

00:55:14,940 --> 00:55:17,370
lot of different patch sets where it's

00:55:16,200 --> 00:55:19,140
again what I'm trying to do is basically

00:55:17,370 --> 00:55:20,580
help people put together that oh hey

00:55:19,140 --> 00:55:22,620
this might be related to this this is

00:55:20,580 --> 00:55:24,240
related to that so like we've gotten

00:55:22,620 --> 00:55:26,640
like there's a Verdejo factoring stuff

00:55:24,240 --> 00:55:28,620
going on which is somewhat related

00:55:26,640 --> 00:55:33,960
there's the SRO of e support for Verdejo

00:55:28,620 --> 00:55:36,060
which is related the VF IOM dev

00:55:33,960 --> 00:55:37,650
framework which is going to end up being

00:55:36,060 --> 00:55:38,850
related Imus actually got some other

00:55:37,650 --> 00:55:40,440
things that's being used for as well

00:55:38,850 --> 00:55:43,440
this is kind of a new use that I wasn't

00:55:40,440 --> 00:55:44,940
aware of this was it Anjali and I

00:55:43,440 --> 00:55:46,620
representing last year up here about you

00:55:44,940 --> 00:55:48,180
know the end of framework and okay you

00:55:46,620 --> 00:55:50,340
can create devices and when I saw this

00:55:48,180 --> 00:55:52,800
it's like okay that was something I

00:55:50,340 --> 00:55:54,270
hadn't thought about because this like

00:55:52,800 --> 00:55:58,650
like I said one of the surprises for me

00:55:54,270 --> 00:56:00,810
is the model here is since it's designed

00:55:58,650 --> 00:56:03,630
to work with an iommu setup that doesn't

00:56:00,810 --> 00:56:05,370
support passage so what they're doing is

00:56:03,630 --> 00:56:09,480
they're actually taking a single VF and

00:56:05,370 --> 00:56:11,070
it spawns a single end dev that's like

00:56:09,480 --> 00:56:12,690
okay well I guess that sort of works

00:56:11,070 --> 00:56:15,180
it's like it's bypassing things that's

00:56:12,690 --> 00:56:17,730
become the VF driver becomes its own VF

00:56:15,180 --> 00:56:19,410
i/o driver essentially so they can go

00:56:17,730 --> 00:56:23,370
ahead and spawn this M dev that can then

00:56:19,410 --> 00:56:24,750
you'll be direct to signed and so that

00:56:23,370 --> 00:56:26,430
makes things you know that much more

00:56:24,750 --> 00:56:27,420
complicated in terms of the setup for it

00:56:26,430 --> 00:56:29,790
because it's all of a sentence now

00:56:27,420 --> 00:56:30,570
essentially combining the v-fib FIO

00:56:29,790 --> 00:56:35,730
driver

00:56:30,570 --> 00:56:37,170
into the VF driver itself and so that's

00:56:35,730 --> 00:56:41,370
another thing with this representing

00:56:37,170 --> 00:56:42,990
itself as a Verdejo device just the VF

00:56:41,370 --> 00:56:44,880
itself is coming up as a Verdejo device

00:56:42,990 --> 00:56:46,860
therefore now Verdejo sorta has to

00:56:44,880 --> 00:56:49,440
support this and so that's the thing is

00:56:46,860 --> 00:56:50,970
it also makes things kind of interesting

00:56:49,440 --> 00:56:54,060
because in theory then if you're doing

00:56:50,970 --> 00:56:55,950
like nested virtualization I guess you

00:56:54,060 --> 00:56:57,450
could in theory make use of this because

00:56:55,950 --> 00:57:00,510
if we're gonna represent the devices of

00:56:57,450 --> 00:57:01,980
Verdejo device and support VDP a than in

00:57:00,510 --> 00:57:04,230
the case of nested virtualization as

00:57:01,980 --> 00:57:06,780
long as i Ã´m use there you should be

00:57:04,230 --> 00:57:11,160
able to do VDP a with a standard pair

00:57:06,780 --> 00:57:12,990
virtual you know it says it's one of

00:57:11,160 --> 00:57:14,100
those things where it's like okay that's

00:57:12,990 --> 00:57:15,360
why I thought this would be a good thing

00:57:14,100 --> 00:57:17,520
to bring to the workshop this is like

00:57:15,360 --> 00:57:19,260
the okay now that you've know I've

00:57:17,520 --> 00:57:20,970
already put you to sleep it's you know

00:57:19,260 --> 00:57:22,680
first thing in the morning it's like now

00:57:20,970 --> 00:57:24,030
I'll give you the brain twisters whereas

00:57:22,680 --> 00:57:27,660
like okay wait how is this supposed to

00:57:24,030 --> 00:57:28,920
work so yeah like there's like I said

00:57:27,660 --> 00:57:30,000
there's a still a lot of it left to do

00:57:28,920 --> 00:57:32,580
there's a lot of patches they're in

00:57:30,000 --> 00:57:38,790
flight all over the place you've got the

00:57:32,580 --> 00:57:41,430
pack turing format sr lv support avi

00:57:38,790 --> 00:57:49,290
host back-end for V DP am dev support

00:57:41,430 --> 00:57:50,820
for Verdi o etc so where could this go

00:57:49,290 --> 00:57:51,990
so that's the thing is this is one of

00:57:50,820 --> 00:57:55,920
those ones where I think okay this is

00:57:51,990 --> 00:57:57,960
kind of a new paradigm kind of

00:57:55,920 --> 00:58:00,030
interesting thought it's like one of the

00:57:57,960 --> 00:58:02,280
things I actually had as a thought was

00:58:00,030 --> 00:58:04,530
what would happen if we took the VF

00:58:02,280 --> 00:58:07,020
drivers there for existing devices like

00:58:04,530 --> 00:58:08,160
IX GBE and we're gonna look at doing

00:58:07,020 --> 00:58:09,120
something like this where it with it

00:58:08,160 --> 00:58:10,320
where it's like okay right now it

00:58:09,120 --> 00:58:12,960
doesn't do switch dev that's a known

00:58:10,320 --> 00:58:16,080
issue what if we created a pair of

00:58:12,960 --> 00:58:19,980
virtual device using the M dev framework

00:58:16,080 --> 00:58:23,970
for ixg BBF that said okay I'm the VF on

00:58:19,980 --> 00:58:26,360
the host I and if I can find my PF then

00:58:23,970 --> 00:58:29,130
maybe I could look at putting together a

00:58:26,360 --> 00:58:32,520
mediated device and make something that

00:58:29,130 --> 00:58:34,080
looks like switch dev and so that's

00:58:32,520 --> 00:58:35,430
another one where it's like okay you

00:58:34,080 --> 00:58:36,990
know still trying to solve the same

00:58:35,430 --> 00:58:39,120
problem we look we don't do switch dev

00:58:36,990 --> 00:58:43,380
on IX GBE how do we get there or get

00:58:39,120 --> 00:58:44,790
something that looks like it and so this

00:58:43,380 --> 00:58:47,390
is the one thing

00:58:44,790 --> 00:58:50,150
I had that came to mind with all of it

00:58:47,390 --> 00:58:54,510
would be to create a mediated device

00:58:50,150 --> 00:58:55,830
mediated via 4i h gb EVF that would

00:58:54,510 --> 00:58:58,230
basically kind of turn the the net

00:58:55,830 --> 00:58:59,850
device inside out so it could you know

00:58:58,230 --> 00:59:01,350
present itself still as a net dev on the

00:58:59,850 --> 00:59:02,820
local host but then that would directly

00:59:01,350 --> 00:59:06,630
talk to the mediated device instead of

00:59:02,820 --> 00:59:10,200
talking to the network yep so how much

00:59:06,630 --> 00:59:11,700
of the how much smarts do the guests

00:59:10,200 --> 00:59:14,400
need for this this is going to be

00:59:11,700 --> 00:59:17,100
invisible we're an older computer should

00:59:14,400 --> 00:59:19,410
be well worst-case scenario is you'd

00:59:17,100 --> 00:59:21,810
have to have a driver in the guests for

00:59:19,410 --> 00:59:23,640
the mediated device is what it comes

00:59:21,810 --> 00:59:25,890
down to is basically the guest has to be

00:59:23,640 --> 00:59:28,230
able to know how to load on this pseudo

00:59:25,890 --> 00:59:29,850
emulated device thing that's there so it

00:59:28,230 --> 00:59:32,220
comes down to so if you did a perfect

00:59:29,850 --> 00:59:34,470
emulation it doesn't need any new smarts

00:59:32,220 --> 00:59:36,240
but if like so in order to support

00:59:34,470 --> 00:59:38,100
something like this for instance I'd

00:59:36,240 --> 00:59:39,630
probably need to add one new cue

00:59:38,100 --> 00:59:43,140
somewhere so I have a way of directly

00:59:39,630 --> 00:59:49,130
sending packets in from this from the

00:59:43,140 --> 00:59:49,130
external net dev into the guest so

00:59:52,170 --> 00:59:58,380
any other questions comments concerns VF

00:59:56,850 --> 01:00:00,240
drivers providing switch to have like

00:59:58,380 --> 01:00:03,300
support are you talking about dead link

01:00:00,240 --> 01:00:06,000
and any other we have travel supporting

01:00:03,300 --> 01:00:13,650
it today if not Intel well right now

01:00:06,000 --> 01:00:15,260
switch dev is APF specific thing and a

01:00:13,650 --> 01:00:17,130
lot of what I was getting at is more the

01:00:15,260 --> 01:00:18,900
traffic management and control

01:00:17,130 --> 01:00:20,640
functionality it's like right now we

01:00:18,900 --> 01:00:22,170
don't have any port representers is one

01:00:20,640 --> 01:00:23,910
of the big issues it's becomes how do

01:00:22,170 --> 01:00:25,500
you deal with configuring things switch

01:00:23,910 --> 01:00:27,750
dev like if you don't have port

01:00:25,500 --> 01:00:28,830
representers and so having this net to

01:00:27,750 --> 01:00:30,180
have here that I could directly put

01:00:28,830 --> 01:00:32,400
packets into and it gets received by the

01:00:30,180 --> 01:00:34,230
VF that would at least be a step in that

01:00:32,400 --> 01:00:36,480
direction then I'd have to add a path to

01:00:34,230 --> 01:00:38,850
get packets out of the PF and back to

01:00:36,480 --> 01:00:41,070
this knit dev get the receive side path

01:00:38,850 --> 01:00:42,750
to be like switch dev then it would just

01:00:41,070 --> 01:00:45,630
be okay I change something on the

01:00:42,750 --> 01:00:47,160
settings here and then the VF would be

01:00:45,630 --> 01:00:50,400
actually acting as an in-between

01:00:47,160 --> 01:00:51,960
essentially between the PF or as an

01:00:50,400 --> 01:00:56,760
abstraction that talks to the PF to

01:00:51,960 --> 01:00:58,440
configure the actual true VF and so yeah

01:00:56,760 --> 01:01:00,630
a lot of this is just you know very pie

01:00:58,440 --> 01:01:03,600
in the sky you know what if scenarios

01:01:00,630 --> 01:01:05,010
moon shot stuff so yeah I started nuts

01:01:03,600 --> 01:01:11,280
and bolts and take it to moon shot by

01:01:05,010 --> 01:01:12,570
the time I'm done so well you gotta

01:01:11,280 --> 01:01:14,550
start at the ground that's like okay

01:01:12,570 --> 01:01:16,050
establish the foundation and then you

01:01:14,550 --> 01:01:18,450
build the rocket you don't just like

01:01:16,050 --> 01:01:19,320
build the rocket and loops built Ananse

01:01:18,450 --> 01:01:29,840
and falls over

01:01:19,320 --> 01:01:36,560
yeah so there's this old idea where you

01:01:29,840 --> 01:01:42,510
partition a device assign pass it to

01:01:36,560 --> 01:01:46,890
each partition and then you can in a

01:01:42,510 --> 01:01:50,040
safe way using immu protections right by

01:01:46,890 --> 01:01:53,100
using the passive you can have users

01:01:50,040 --> 01:01:56,190
many user spaces right drive the same

01:01:53,100 --> 01:02:00,030
device yep and the same applies right

01:01:56,190 --> 01:02:02,760
VMS as for user spaces right and i just

01:02:00,030 --> 01:02:04,200
wondered whether anyone's still looking

01:02:02,760 --> 01:02:05,760
in that that's still being worked on

01:02:04,200 --> 01:02:09,390
this is more the

01:02:05,760 --> 01:02:16,980
existing solution before we get the IOM

01:02:09,390 --> 01:02:17,970
amuse of passage support and so that's

01:02:16,980 --> 01:02:20,340
the thing is that's where this is coming

01:02:17,970 --> 01:02:21,600
coming from it's the okay what can we do

01:02:20,340 --> 01:02:25,440
with the existing stuff that's out there

01:02:21,600 --> 01:02:28,470
now versus the stuff that'll be out in a

01:02:25,440 --> 01:02:29,970
few more years because yeah that's still

01:02:28,470 --> 01:02:31,710
bit all that stuff still being worked on

01:02:29,970 --> 01:02:34,740
and so that's the thing is like when

01:02:31,710 --> 01:02:35,880
this came up it's like the okay it's

01:02:34,740 --> 01:02:38,220
going to confuse people because we've

01:02:35,880 --> 01:02:39,300
got this and this other thing that's

01:02:38,220 --> 01:02:42,000
coming up now and they're gonna look a

01:02:39,300 --> 01:02:43,740
lot alike except for there's these extra

01:02:42,000 --> 01:02:49,260
steps and so it's gonna be a matter of

01:02:43,740 --> 01:02:51,110
distinguishing between that version of

01:02:49,260 --> 01:02:53,160
mediated device support versus this

01:02:51,110 --> 01:02:57,410
another one that's actually kind of come

01:02:53,160 --> 01:03:00,320
up is what's to keep us from doing a

01:02:57,410 --> 01:03:02,130
just pure emulated mediated device

01:03:00,320 --> 01:03:04,620
instead of actually backing with

01:03:02,130 --> 01:03:06,270
hardware what if we just did a pure

01:03:04,620 --> 01:03:10,970
emulated mediated device instead of

01:03:06,270 --> 01:03:15,510
having like a Mac V tap it becomes Mac V

01:03:10,970 --> 01:03:16,650
I don't know Mac VM dev or essentially

01:03:15,510 --> 01:03:18,360
it would you would just be peeing

01:03:16,650 --> 01:03:20,180
packets directly into a mediated device

01:03:18,360 --> 01:03:22,380
instead of a tap back-end that's

01:03:20,180 --> 01:03:25,290
something that we've been discussing as

01:03:22,380 --> 01:03:26,700
well as what that should look like

01:03:25,290 --> 01:03:28,770
because one of the problems there as it

01:03:26,700 --> 01:03:30,180
becomes okay how long before we have a

01:03:28,770 --> 01:03:31,680
slippery slope and everybody's putting

01:03:30,180 --> 01:03:36,980
their own emulation in there so they can

01:03:31,680 --> 01:03:36,980
expose their own vf2 user space you know

01:03:37,580 --> 01:03:42,030
[Music]

01:03:39,830 --> 01:03:43,770
that's another possibilities we could go

01:03:42,030 --> 01:03:48,690
for just a pure emulated device and just

01:03:43,770 --> 01:03:52,530
use that for an EM dev that's you know

01:03:48,690 --> 01:03:55,610
another moonshot type things thoughts

01:03:52,530 --> 01:03:55,610
comments concerns

01:03:57,960 --> 01:04:01,840
well it looks like I probably came up

01:04:00,070 --> 01:04:04,750
half our short went about 20 minutes

01:04:01,840 --> 01:04:07,180
each it looks like oh yeah so I can ask

01:04:04,750 --> 01:04:11,940
tangent questions yep okay now you can

01:04:07,180 --> 01:04:14,070
eat up as much time as you know the is I

01:04:11,940 --> 01:04:17,650
couldn't tell from your mock villain

01:04:14,070 --> 01:04:19,960
slides whether you have there was an

01:04:17,650 --> 01:04:23,740
issue with the Intel drivers I think

01:04:19,960 --> 01:04:25,810
maybe it's just Intel that when you

01:04:23,740 --> 01:04:28,030
added a new mock villain device here - I

01:04:25,810 --> 01:04:30,430
have config bring IP link down the

01:04:28,030 --> 01:04:32,940
device admin down basically is that you

01:04:30,430 --> 01:04:35,470
has a down it or just reset itself I

01:04:32,940 --> 01:04:37,540
think yeah it's that it dropped traffic

01:04:35,470 --> 01:04:39,850
basically yeah that is a hard issue

01:04:37,540 --> 01:04:41,380
right I guess that's not well it's so

01:04:39,850 --> 01:04:42,490
basically what it came down so this is

01:04:41,380 --> 01:04:44,680
actually one of the things I went

01:04:42,490 --> 01:04:47,380
through and was trying to fix instead of

01:04:44,680 --> 01:04:49,270
doing it every time you had a Mac VLAN I

01:04:47,380 --> 01:04:52,990
went and changed it so we have like

01:04:49,270 --> 01:04:54,580
three modes that we go through the

01:04:52,990 --> 01:04:55,480
limitation of the hardware in the case

01:04:54,580 --> 01:04:58,540
of IX GBE

01:04:55,480 --> 01:05:01,120
is that it has to configure the queues

01:04:58,540 --> 01:05:04,120
in to a state of where it can support

01:05:01,120 --> 01:05:05,710
RSS so there's a couple ways to solve it

01:05:04,120 --> 01:05:07,090
one would be to turn on Mac VLAN and

01:05:05,710 --> 01:05:09,670
everything's limited to single queue Mac

01:05:07,090 --> 01:05:11,470
VLAN which the problem is then you don't

01:05:09,670 --> 01:05:13,450
get you know the scalability and

01:05:11,470 --> 01:05:15,310
performance you want so I ended up doing

01:05:13,450 --> 01:05:17,070
is we have three modes that we end up

01:05:15,310 --> 01:05:19,630
supporting right now if I'm not mistaken

01:05:17,070 --> 01:05:23,440
first one is everything up to 15 Mac

01:05:19,630 --> 01:05:27,250
VLANs and it'll do for queues per mac

01:05:23,440 --> 01:05:29,790
VLAN second one is up to 31 Mac VLANs

01:05:27,250 --> 01:05:33,070
and that's two queues per Mac VLAN and

01:05:29,790 --> 01:05:35,860
the last one ends up being 64 r63

01:05:33,070 --> 01:05:37,570
with a queue per mac VLAN the single

01:05:35,860 --> 01:05:39,220
queue and it'll just basically ramp up

01:05:37,570 --> 01:05:41,290
like that now this locks in at that

01:05:39,220 --> 01:05:42,910
point then if you delete Mac VLANs until

01:05:41,290 --> 01:05:44,350
you turn off the Mac Delian off you're

01:05:42,910 --> 01:05:50,020
basically stuck in that single queue for

01:05:44,350 --> 01:05:53,500
a Mac VLAN mode yeah and actually one

01:05:50,020 --> 01:05:54,970
thing I'd change which actually changed

01:05:53,500 --> 01:05:57,580
this I think a release ago or whatever

01:05:54,970 --> 01:05:59,560
there was a bit in the user space that

01:05:57,580 --> 01:06:01,480
confused me and I didn't like where I

01:05:59,560 --> 01:06:02,980
think the original implementation John

01:06:01,480 --> 01:06:05,620
did was using the number queues on the

01:06:02,980 --> 01:06:07,170
Mac VLAN to define the number of queues

01:06:05,620 --> 01:06:10,390
the hardware supposed to try to allocate

01:06:07,170 --> 01:06:10,779
but it was just causing issues like the

01:06:10,390 --> 01:06:13,599
default

01:06:10,779 --> 01:06:14,890
behavior the the.21 Matt the driver

01:06:13,599 --> 01:06:16,179
would take a look and go nope I'm not

01:06:14,890 --> 01:06:17,439
using that I'm recusing just reject it

01:06:16,179 --> 01:06:19,390
and it's like there's no explanation as

01:06:17,439 --> 01:06:20,589
to why and it's like okay in my case

01:06:19,390 --> 01:06:23,169
that got in the way actually having

01:06:20,589 --> 01:06:24,669
multiple cues on the Mac VLAN so I made

01:06:23,169 --> 01:06:27,819
it instead that we only offload on the

01:06:24,669 --> 01:06:30,369
IX GBE if a single queue Mac VLAN is

01:06:27,819 --> 01:06:31,419
requesting the offload because it

01:06:30,369 --> 01:06:32,679
doesn't make much sense to have the

01:06:31,419 --> 01:06:34,479
extra queues on the Mac VLAN interface

01:06:32,679 --> 01:06:36,219
anyway since it's not actually it

01:06:34,479 --> 01:06:38,349
doesn't have queueing disciplines of its

01:06:36,219 --> 01:06:40,269
own it's running in no queue anyway so

01:06:38,349 --> 01:06:41,769
it's like okay tell it it only has a

01:06:40,269 --> 01:06:45,939
single queue I can just pass through

01:06:41,769 --> 01:06:47,169
that real quick and then use the extra

01:06:45,939 --> 01:06:55,479
fields out of the device in order to

01:06:47,169 --> 01:06:57,939
make use of that dispute TC filter

01:06:55,479 --> 01:07:02,650
offload is CC filter off that still

01:06:57,939 --> 01:07:06,089
works okay you 32 right for I actually

01:07:02,650 --> 01:07:06,089
yes I believe it's you 32

01:07:23,099 --> 01:07:28,229
there is one problem it's really only

01:07:25,679 --> 01:07:30,509
loosely related to what you are talking

01:07:28,229 --> 01:07:32,249
about but I've been wondering for some

01:07:30,509 --> 01:07:35,729
time

01:07:32,249 --> 01:07:42,479
if you imagine the interface used by IP

01:07:35,729 --> 01:07:44,489
to query the VF information we are

01:07:42,479 --> 01:07:49,259
running into some kind of problem there

01:07:44,489 --> 01:07:53,969
because given the size of the IFV F in

01:07:49,259 --> 01:07:57,619
for attribute and the number of VF s

01:07:53,969 --> 01:08:02,189
supported paths by some of current cards

01:07:57,619 --> 01:08:06,209
we can soon exceed the 64 kilobyte limit

01:08:02,189 --> 01:08:10,529
for the container attribute I have we

01:08:06,209 --> 01:08:13,529
have in forest or what is the name so is

01:08:10,529 --> 01:08:16,739
this something that we should address or

01:08:13,529 --> 01:08:18,739
we just say okay this is let us say we

01:08:16,739 --> 01:08:21,179
are moving to switch to devil

01:08:18,739 --> 01:08:22,949
well if there's a bug like that way that

01:08:21,179 --> 01:08:25,949
should probably get addressed anything

01:08:22,949 --> 01:08:30,739
no no no it's not a bug the problem is

01:08:25,949 --> 01:08:36,659
that by my calculation given current

01:08:30,739 --> 01:08:40,529
size of the VF info attribute I if a

01:08:36,659 --> 01:08:46,049
network card has something I think 270

01:08:40,529 --> 01:08:48,809
VFS the IFV F in forest size would

01:08:46,049 --> 01:08:52,889
exceed the 64 kilobytes limit which is a

01:08:48,809 --> 01:08:55,500
hard limit for an annoying attribute we

01:08:52,889 --> 01:08:58,319
are not there yet but right if there are

01:08:55,500 --> 01:09:00,900
more VF s or the size of the VF info

01:08:58,319 --> 01:09:05,000
grows further right by adding some

01:09:00,900 --> 01:09:08,339
information we would run into this okay

01:09:05,000 --> 01:09:10,079
so yeah so really in that situation and

01:09:08,339 --> 01:09:15,000
yeah it becomes question of do we want

01:09:10,079 --> 01:09:17,549
to support more than 250 some say 256 us

01:09:15,000 --> 01:09:23,429
keep it a nice 8-bit value do we want to

01:09:17,549 --> 01:09:26,400
support more than 256 VF in a legacy srl

01:09:23,429 --> 01:09:28,980
V mode setup would that be a good way to

01:09:26,400 --> 01:09:32,890
summarize it essentially due to this VF

01:09:28,980 --> 01:09:35,830
info problem or

01:09:32,890 --> 01:09:37,690
if it VF info size grows further by

01:09:35,830 --> 01:09:40,810
adding some more information right okay

01:09:37,690 --> 01:09:43,150
then it could happen with say goofy 40

01:09:40,810 --> 01:09:44,770
or lots of things so hopefully you know

01:09:43,150 --> 01:09:49,120
the legacy is supposed to be locked down

01:09:44,770 --> 01:09:51,940
in theory so we'll see how that goes if

01:09:49,120 --> 01:09:53,680
that's the case it shouldn't grow at the

01:09:51,940 --> 01:09:56,770
same time yeah it becomes the supporting

01:09:53,680 --> 01:09:57,940
legacy with 256 or more VF s-- so that's

01:09:56,770 --> 01:09:59,290
something that we will probably have to

01:09:57,940 --> 01:10:00,670
take up on the mailing list in order to

01:09:59,290 --> 01:10:02,650
really discuss because this problem is I

01:10:00,670 --> 01:10:06,450
don't yeah we don't have or here so and

01:10:02,650 --> 01:10:06,450
he's kind of switch dev side of all this

01:10:07,920 --> 01:10:15,820
so yes but we're it's on video now so

01:10:12,880 --> 01:10:17,350
yeah this is something that we have to

01:10:15,820 --> 01:10:18,910
address we'll have to address it and

01:10:17,350 --> 01:10:21,040
just just make a decision as community

01:10:18,910 --> 01:10:22,810
which way we want to go on that if I

01:10:21,040 --> 01:10:24,340
could easily seeing see the simple

01:10:22,810 --> 01:10:26,050
solution being okay yeah if it's more

01:10:24,340 --> 01:10:28,240
than 256 you have to go with like switch

01:10:26,050 --> 01:10:30,160
dev or whatever so maybe we could do

01:10:28,240 --> 01:10:32,320
some limitation like that maybe not lot

01:10:30,160 --> 01:10:34,720
to see just depends on how the vendors

01:10:32,320 --> 01:10:36,700
want to handle it so I can only speak

01:10:34,720 --> 01:10:40,390
for Intel and it's like okay yeah that

01:10:36,700 --> 01:10:41,970
would have to be fixed but maybe we just

01:10:40,390 --> 01:10:44,260
look at going with switch dev instead

01:10:41,970 --> 01:10:46,150
for something like that then it just

01:10:44,260 --> 01:10:47,710
make a hard limit for legacy up to 56

01:10:46,150 --> 01:10:54,360
but I'll have to decide on the mailing

01:10:47,710 --> 01:10:54,360
list any other questions comments

01:10:57,020 --> 01:11:10,350
okay well let's thank Alex this few

01:11:07,320 --> 01:11:12,719
public announcements let's thank you -

01:11:10,350 --> 01:11:15,540
for we have very limited number of

01:11:12,719 --> 01:11:18,989
remote access where we'll probably see

01:11:15,540 --> 01:11:23,370
participants later on thanks to cumulus

01:11:18,989 --> 01:11:25,640
for sponsoring the video Wireless

01:11:23,370 --> 01:11:28,739
everybody is on wireless and it's good I

01:11:25,640 --> 01:11:30,500
know it's more important than food so no

01:11:28,739 --> 01:11:33,020
complaints right

01:11:30,500 --> 01:11:36,840
IPSec workshop is going to happen at

01:11:33,020 --> 01:11:38,640
10:31 flow down from here is everybody

01:11:36,840 --> 01:11:40,110
on the people at net Def Con mailing

01:11:38,640 --> 01:11:42,630
list because we've been sending

01:11:40,110 --> 01:11:44,850
instructions there so if you're

01:11:42,630 --> 01:11:48,900
attending and you want to participate in

01:11:44,850 --> 01:11:52,080
the tutorial download the image and

01:11:48,900 --> 01:11:57,570
follow the instruction and we all good

01:11:52,080 --> 01:12:02,239
right yeah yes we finished this about an

01:11:57,570 --> 01:12:05,670
hour ten minutes twenty minutes okay

01:12:02,239 --> 01:12:08,900
yeah so you're free till next next

01:12:05,670 --> 01:12:08,900

YouTube URL: https://www.youtube.com/watch?v=mivtCZhjRxY


