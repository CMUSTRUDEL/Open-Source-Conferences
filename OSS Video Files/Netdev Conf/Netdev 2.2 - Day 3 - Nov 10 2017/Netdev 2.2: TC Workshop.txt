Title: Netdev 2.2: TC Workshop
Publication date: 2018-03-15
Playlist: Netdev 2.2 - Day 3 - Nov 10 2017
Description: 
	Chair: Jamal Hadi Salim and many others
Seoul, Korea 
Friday November 10th, 2017
https://www.netdevconf.org/2.2/session.html?salim-tc-workshop
Captions: 
	00:00:01,020 --> 00:00:07,530
so let me tell you something some

00:00:04,690 --> 00:00:10,720
updates from from the last that Def Con

00:00:07,530 --> 00:00:13,810
and also something with which I'm

00:00:10,720 --> 00:00:16,900
working on right now and what is plan

00:00:13,810 --> 00:00:25,269
for the future basically the subject is

00:00:16,900 --> 00:00:27,939
TC classified action subsystem so the

00:00:25,269 --> 00:00:31,989
biggest changes biggest change in this

00:00:27,939 --> 00:00:37,330
subsystem from from last Neda is support

00:00:31,989 --> 00:00:40,660
for multi chains and you can see some

00:00:37,330 --> 00:00:43,840
example of how you can actually do that

00:00:40,660 --> 00:00:47,200
so here in this example I just create

00:00:43,840 --> 00:00:51,610
ingress queue disk and into this queue

00:00:47,200 --> 00:00:54,490
disk I insert one flower filter and the

00:00:51,610 --> 00:00:57,520
action as you can see here is go to

00:00:54,490 --> 00:01:00,940
chain one and that means that whenever

00:00:57,520 --> 00:01:03,820
the filter is hit the action will just

00:01:00,940 --> 00:01:09,250
redirect it to the two t chain one and

00:01:03,820 --> 00:01:11,980
then I can I can insert some rules or

00:01:09,250 --> 00:01:14,409
some filters into chain one so you can

00:01:11,980 --> 00:01:16,510
see everything is the same as in the

00:01:14,409 --> 00:01:20,470
first line the only difference is that I

00:01:16,510 --> 00:01:23,020
specify chain one here and that's it you

00:01:20,470 --> 00:01:25,420
can have like I don't know what's the

00:01:23,020 --> 00:01:29,370
limit this youth you 32 for the chain

00:01:25,420 --> 00:01:32,710
basically so it's basically unlimited so

00:01:29,370 --> 00:01:35,799
here you can see yeah it was I wanted to

00:01:32,710 --> 00:01:37,810
just to show how it works how it worked

00:01:35,799 --> 00:01:39,820
previously and how it works now so how

00:01:37,810 --> 00:01:42,100
it works how it worked previously is you

00:01:39,820 --> 00:01:45,510
have a queue disk then you have a chain

00:01:42,100 --> 00:01:51,220
inside this chain there a couple of TPS

00:01:45,510 --> 00:01:55,150
and every TP has a list of filters which

00:01:51,220 --> 00:01:58,229
are which are processed so now with the

00:01:55,150 --> 00:02:01,330
multi chain you have this basically so

00:01:58,229 --> 00:02:03,220
still you always the the packet

00:02:01,330 --> 00:02:07,240
processing starts from from the first

00:02:03,220 --> 00:02:10,539
from the chain zero always and then if a

00:02:07,240 --> 00:02:13,610
particular filter is hit and as action

00:02:10,539 --> 00:02:19,550
is executed it can jump to

00:02:13,610 --> 00:02:24,620
chains so here's not the jump nice

00:02:19,550 --> 00:02:27,380
picture right okay

00:02:24,620 --> 00:02:32,930
there are couple other changes since

00:02:27,380 --> 00:02:36,610
last night dev we added a couple of

00:02:32,930 --> 00:02:40,910
matches into flour classifier

00:02:36,610 --> 00:02:44,690
particularly mpls met ambulance fields

00:02:40,910 --> 00:02:48,800
matching also tcp flex matching and also

00:02:44,690 --> 00:02:50,510
IP toes and TTL matching like these two

00:02:48,800 --> 00:02:53,870
are very small patches this is a little

00:02:50,510 --> 00:03:00,560
bit bigger but also quite small another

00:02:53,870 --> 00:03:03,950
thing which we added is trap action what

00:03:00,560 --> 00:03:06,680
we use it for is whenever well basically

00:03:03,950 --> 00:03:11,270
this this is useful only for offloading

00:03:06,680 --> 00:03:13,820
because if you have if you have a

00:03:11,270 --> 00:03:16,070
packets flowing through the through the

00:03:13,820 --> 00:03:19,040
hardware and you don't actually see the

00:03:16,070 --> 00:03:21,019
packets on the cpu you might be

00:03:19,040 --> 00:03:24,560
interested in some particular packet so

00:03:21,019 --> 00:03:27,800
you insert rule which will eject the

00:03:24,560 --> 00:03:31,489
packet up to the cpu so it can see it so

00:03:27,800 --> 00:03:33,739
here that's so did you intentionally

00:03:31,489 --> 00:03:41,780
want to say Delta or you want to say add

00:03:33,739 --> 00:03:47,810
oh yeah I want to say AB so yeah okay

00:03:41,780 --> 00:03:51,019
and with this changes which I mentioned

00:03:47,810 --> 00:03:53,120
there are also related changes in ml x

00:03:51,019 --> 00:03:56,959
SW driver which is driver for our

00:03:53,120 --> 00:03:59,800
spectrum switch and basically we that we

00:03:56,959 --> 00:04:04,010
added offloading for most of the

00:03:59,800 --> 00:04:06,769
mentioned things well all of them except

00:04:04,010 --> 00:04:13,910
for the MPLS we don't support that yet

00:04:06,769 --> 00:04:16,040
it's on the plan also we added we added

00:04:13,910 --> 00:04:18,440
on top of the top of the changes we

00:04:16,040 --> 00:04:23,870
added support for okay termination

00:04:18,440 --> 00:04:26,539
action points very trivial okay so what

00:04:23,870 --> 00:04:27,110
I'm working on right now is the shared

00:04:26,539 --> 00:04:32,300
blocks

00:04:27,110 --> 00:04:37,909
and basically the the idea is to allow

00:04:32,300 --> 00:04:39,710
users to define blocks which would be

00:04:37,909 --> 00:04:43,039
shared among the queue disk so basically

00:04:39,710 --> 00:04:44,900
you would have one block which defines a

00:04:43,039 --> 00:04:49,069
lot of filters and chains and whatever

00:04:44,900 --> 00:04:52,009
and then you have like 30 inner devices

00:04:49,069 --> 00:04:57,199
and they will all point to this one

00:04:52,009 --> 00:05:01,340
particular block why of course we want

00:04:57,199 --> 00:05:03,889
to reduce memory footprint it's easier

00:05:01,340 --> 00:05:06,800
for user perhaps not to duplicate the

00:05:03,889 --> 00:05:09,080
work and to fill up all the filters for

00:05:06,800 --> 00:05:10,610
all the net devices you just do it once

00:05:09,080 --> 00:05:15,440
and that's it

00:05:10,610 --> 00:05:19,150
and also our main motivation is to do it

00:05:15,440 --> 00:05:22,669
for offload this case when we need to

00:05:19,150 --> 00:05:27,189
optimize the the utilization of hardware

00:05:22,669 --> 00:05:29,900
resources like Tekin for example this

00:05:27,189 --> 00:05:32,840
took me a lot more than I expected

00:05:29,900 --> 00:05:36,500
originally mainly because of the removal

00:05:32,840 --> 00:05:40,610
of tpq it's very tricky one a lot of

00:05:36,500 --> 00:05:43,940
places where it this is well not not now

00:05:40,610 --> 00:05:49,150
now it's only one place I removed that

00:05:43,940 --> 00:05:51,349
all like the other ones but yeah still

00:05:49,150 --> 00:05:54,110
this is this is weird right

00:05:51,349 --> 00:05:58,659
I removed I did a couple of page sets

00:05:54,110 --> 00:06:00,229
and I removed all the uses of tpq and

00:05:58,659 --> 00:06:03,050
last week

00:06:00,229 --> 00:06:05,060
Jakub inserted a patch which added

00:06:03,050 --> 00:06:06,440
another use of tpq so now I have to

00:06:05,060 --> 00:06:09,139
remove it again and it will be a little

00:06:06,440 --> 00:06:12,169
bit tricker trickier than the the other

00:06:09,139 --> 00:06:15,560
one so yeah it's it's fun hopefully no

00:06:12,169 --> 00:06:20,960
one else will add another typical had to

00:06:15,560 --> 00:06:23,479
be not good for me okay and yeah all the

00:06:20,960 --> 00:06:29,949
preparations are merged currently in

00:06:23,479 --> 00:06:33,379
that next gate and I have in my queue

00:06:29,949 --> 00:06:36,430
prepared a medics SW of loading for for

00:06:33,379 --> 00:06:36,430
this particular feature

00:06:36,770 --> 00:06:41,030
so I just want to illustrate how it

00:06:39,860 --> 00:06:43,490
works

00:06:41,030 --> 00:06:45,110
sharing of the blocks so this is current

00:06:43,490 --> 00:06:47,440
situation when you have three net

00:06:45,110 --> 00:06:51,110
devices each net device as a key disk

00:06:47,440 --> 00:06:55,960
attached and then you have blocked with

00:06:51,110 --> 00:06:59,599
chains filters and actions and voila

00:06:55,960 --> 00:07:05,300
here it points to do it it looks really

00:06:59,599 --> 00:07:08,810
simple right but it's now perhaps four

00:07:05,300 --> 00:07:10,520
or five months since I've started to

00:07:08,810 --> 00:07:23,300
work on that it's not that we will to

00:07:10,520 --> 00:07:27,139
implement actually just in the in this

00:07:23,300 --> 00:07:29,300
case where you say the block it's in

00:07:27,139 --> 00:07:30,889
software but it someone also also in the

00:07:29,300 --> 00:07:33,319
hardware and the T come right yeah it's

00:07:30,889 --> 00:07:37,819
right so so in this case in this case

00:07:33,319 --> 00:07:39,949
the T come ACL does not match on the on

00:07:37,819 --> 00:07:41,419
the ingress spot or you can match if

00:07:39,949 --> 00:07:44,360
it's one two or three but not four or

00:07:41,419 --> 00:07:46,930
five how do you well you can specify the

00:07:44,360 --> 00:07:48,979
match inside the inside the rule itself

00:07:46,930 --> 00:07:51,949
it doesn't necessarily has to be

00:07:48,979 --> 00:07:54,020
specified by attaching it to the CSS as

00:07:51,949 --> 00:07:55,969
I'm just asking in the hardware let's

00:07:54,020 --> 00:07:57,139
say in this case you want it on zero one

00:07:55,969 --> 00:07:59,690
and two but you don't want it it on

00:07:57,139 --> 00:08:02,539
fourth on three and four so in the tecum

00:07:59,690 --> 00:08:05,479
itself you you totally wild-caught the

00:08:02,539 --> 00:08:08,240
port or you it's up to you as a user how

00:08:05,479 --> 00:08:12,169
to how you want to configure it so you

00:08:08,240 --> 00:08:14,120
can avoid the matching on imports no but

00:08:12,169 --> 00:08:23,770
when you offload it it's you have to

00:08:14,120 --> 00:08:23,770
decide a drivers on the user just asking

00:08:29,750 --> 00:08:34,320
so there are a lot of hardware in which

00:08:32,400 --> 00:08:36,210
there are there is a concept of binding

00:08:34,320 --> 00:08:40,470
so this is equivalent to the binding

00:08:36,210 --> 00:08:52,740
concept so it's not yet match itself it

00:08:40,470 --> 00:08:55,260
is metal to the binding okay okay so

00:08:52,740 --> 00:09:00,870
here on this slide you can actually see

00:08:55,260 --> 00:09:03,930
the usage of sharing the block I don't

00:09:00,870 --> 00:09:07,170
want to break anything okay all right

00:09:03,930 --> 00:09:26,520
that's right so here you can see I

00:09:07,170 --> 00:09:31,470
created oh that's not better alright so

00:09:26,520 --> 00:09:36,330
here you can see I add ingress cue disc

00:09:31,470 --> 00:09:40,080
to ETA 0 ETH one ith to the changes that

00:09:36,330 --> 00:09:43,320
I can specify block block 22 which

00:09:40,080 --> 00:09:46,770
identifies the block so I can use any

00:09:43,320 --> 00:09:50,040
number or I can I can actually create

00:09:46,770 --> 00:09:53,760
the first one and then I can just list

00:09:50,040 --> 00:09:56,700
queue disks block ID will be assigned to

00:09:53,760 --> 00:10:00,090
that I can use this the assigned block

00:09:56,700 --> 00:10:03,120
ID basically but it's it's also up to

00:10:00,090 --> 00:10:04,920
use before if you wanted this to be done

00:10:03,120 --> 00:10:08,310
in the script it's it's better to do it

00:10:04,920 --> 00:10:12,000
this way of course here you can see the

00:10:08,310 --> 00:10:18,810
list it's there weed block 22 and then

00:10:12,000 --> 00:10:19,530
if you add a filter to oh here should be

00:10:18,810 --> 00:10:23,850
eth0

00:10:19,530 --> 00:10:28,620
sorry about that I could be pasted it

00:10:23,850 --> 00:10:32,040
and a little bit yep

00:10:28,620 --> 00:10:34,200
so you can you can actually use ETA 0

00:10:32,040 --> 00:10:37,520
ETH 1 ETH - doesn't really matter it

00:10:34,200 --> 00:10:43,010
inserts the filter it

00:10:37,520 --> 00:10:46,690
which is shared so also you can use CLS

00:10:43,010 --> 00:10:49,190
Act if you want ingress and egress and

00:10:46,690 --> 00:10:51,230
just you want you need to specify

00:10:49,190 --> 00:10:53,480
ingress block an English book which

00:10:51,230 --> 00:10:59,600
could be the same could be different

00:10:53,480 --> 00:11:06,529
it's up to you okay and it's my last

00:10:59,600 --> 00:11:07,850
slide this should give us this this

00:11:06,529 --> 00:11:11,270
should be actually something which we

00:11:07,850 --> 00:11:14,200
can discuss a little bit perhaps if you

00:11:11,270 --> 00:11:20,420
have some ideas that would be good

00:11:14,200 --> 00:11:23,470
the the the need is that we need the the

00:11:20,420 --> 00:11:27,680
problem is that we need some hinting for

00:11:23,470 --> 00:11:32,150
offloading and there are two groups of

00:11:27,680 --> 00:11:37,010
hinting we need we need some how to hint

00:11:32,150 --> 00:11:38,360
driver about the match keys so it's it's

00:11:37,010 --> 00:11:42,170
a problem it's a little problematic

00:11:38,360 --> 00:11:44,890
because when we allocate ECAM regions

00:11:42,170 --> 00:11:49,040
inside the hardware we have to define

00:11:44,890 --> 00:11:51,100
the keys which will be used I mean the

00:11:49,040 --> 00:11:57,020
match keys which will be used inside the

00:11:51,100 --> 00:11:59,810
this DCAM region and it's hard to

00:11:57,020 --> 00:12:04,820
predict what the user will insert as a

00:11:59,810 --> 00:12:08,570
rule in future so now we try to be like

00:12:04,820 --> 00:12:09,440
we try to allocate as much match keys as

00:12:08,570 --> 00:12:13,640
possible

00:12:09,440 --> 00:12:16,070
but it's a waste of resources when user

00:12:13,640 --> 00:12:18,220
inserts only some particular match keys

00:12:16,070 --> 00:12:20,810
or rules with some particular match keys

00:12:18,220 --> 00:12:24,140
it's like it's not really needed to

00:12:20,810 --> 00:12:30,230
allocate for all of them and we would

00:12:24,140 --> 00:12:33,850
save a lot of space so user knows

00:12:30,230 --> 00:12:37,970
probably what he is going to insert and

00:12:33,850 --> 00:12:40,310
he may provide us some hints about that

00:12:37,970 --> 00:12:44,420
so we can prepare for it and optimize it

00:12:40,310 --> 00:12:49,400
and something similar with with the

00:12:44,420 --> 00:12:50,550
filter max count we would also be happy

00:12:49,400 --> 00:12:54,779
if user

00:12:50,550 --> 00:12:58,770
we'll say to us hey I want this table to

00:12:54,779 --> 00:13:03,570
be of size 100 entries for example so we

00:12:58,770 --> 00:13:07,170
can prepare for it and and optimize the

00:13:03,570 --> 00:13:10,950
resources realization basically so but I

00:13:07,170 --> 00:13:13,470
really don't know how to manage this

00:13:10,950 --> 00:13:16,410
because for example for magic is hinting

00:13:13,470 --> 00:13:20,730
when you look at the chain when it how

00:13:16,410 --> 00:13:22,920
it is done in TC each chain each each

00:13:20,730 --> 00:13:26,450
member of the chain HTP could be of

00:13:22,920 --> 00:13:31,320
different classifier type so we can have

00:13:26,450 --> 00:13:36,680
mixture of flour Uther to whatever else

00:13:31,320 --> 00:13:41,160
classifier and we need the hint to be

00:13:36,680 --> 00:13:43,740
generic for all the chain so we can

00:13:41,160 --> 00:13:47,670
perhaps somehow share a state between

00:13:43,740 --> 00:13:51,690
these TPS like it is it is done now with

00:13:47,670 --> 00:13:52,860
you 32 it's a it's a ugly hack I don't

00:13:51,690 --> 00:13:57,720
really want to do it for other

00:13:52,860 --> 00:13:58,760
classifiers as well but that's possible

00:13:57,720 --> 00:14:07,110
I guess

00:13:58,760 --> 00:14:10,640
hmm we'll see the very big topic right

00:14:07,110 --> 00:14:14,779
it's the about resource allocation know

00:14:10,640 --> 00:14:14,779
it well about how much space you have

00:14:17,600 --> 00:14:21,630
yeah I just want to emphasize we are

00:14:19,830 --> 00:14:25,080
having the same kind of problems and so

00:14:21,630 --> 00:14:29,190
we definitely we definitely need a

00:14:25,080 --> 00:14:31,530
solution in both cases yeah when are you

00:14:29,190 --> 00:14:35,490
living when are you taking off tomorrow

00:14:31,530 --> 00:14:36,050
you tomorrow can we meet tomorrow in the

00:14:35,490 --> 00:14:38,100
morning

00:14:36,050 --> 00:14:39,690
anybody else interested that's gonna be

00:14:38,100 --> 00:14:41,400
there we don't we don't have time and

00:14:39,690 --> 00:14:44,640
fortune we could go for a whole day yeah

00:14:41,400 --> 00:14:48,060
and I could also go on on the mailing

00:14:44,640 --> 00:14:50,070
list or after the I really I really

00:14:48,060 --> 00:14:52,530
can't give you more time oh I know it's

00:14:50,070 --> 00:14:55,550
an important topic yeah well I got tons

00:14:52,530 --> 00:14:55,550
of people lined up for this

00:15:01,600 --> 00:15:04,260
yeah

00:15:07,050 --> 00:15:12,700
that's right so so other than this do

00:15:10,210 --> 00:15:15,130
you have any questions regarding could I

00:15:12,700 --> 00:15:21,060
just everybody wants to ask a quick

00:15:15,130 --> 00:15:23,290
question can you

00:15:21,060 --> 00:15:28,150
you can quickly explain the last two

00:15:23,290 --> 00:15:31,750
lines in there yes yeah well I either

00:15:28,150 --> 00:15:34,930
can for for classification and actions

00:15:31,750 --> 00:15:38,770
the easiest queue disk which you can use

00:15:34,930 --> 00:15:41,590
is in rescue disk or cos Act which is

00:15:38,770 --> 00:15:44,740
basically in rescue disk but also for

00:15:41,590 --> 00:15:49,000
egress oh it shares this is it's it's

00:15:44,740 --> 00:15:51,010
the same C file basically right so you

00:15:49,000 --> 00:15:53,620
have the same abilities you want to do

00:15:51,010 --> 00:15:56,380
for ingress but only your site as well

00:15:53,620 --> 00:15:58,420
it was cited by Daniel workman something

00:15:56,380 --> 00:15:59,620
you're a year ago something like that

00:15:58,420 --> 00:16:01,750
yeah it's actually pretty interesting I

00:15:59,620 --> 00:16:07,150
use it too yeah sorry I'm gonna put you

00:16:01,750 --> 00:16:09,010
off there alright so my my goal here is

00:16:07,150 --> 00:16:11,580
to give everybody a little background

00:16:09,010 --> 00:16:15,070
about what time sensitive networking is

00:16:11,580 --> 00:16:19,080
and to get some feedback on some

00:16:15,070 --> 00:16:21,910
existing TSN related TC features and

00:16:19,080 --> 00:16:26,380
suggestions on the best approaches for

00:16:21,910 --> 00:16:28,000
further features so there's been some

00:16:26,380 --> 00:16:29,650
discussion on the net dev mailing list

00:16:28,000 --> 00:16:32,350
lately about how to get some of these

00:16:29,650 --> 00:16:34,570
features into the kernel there's a lot

00:16:32,350 --> 00:16:37,330
of sort of out of tree drivers and

00:16:34,570 --> 00:16:39,220
things like that to support some

00:16:37,330 --> 00:16:42,790
time-sensitive networking features in

00:16:39,220 --> 00:16:45,190
different contexts and there's a move to

00:16:42,790 --> 00:16:47,790
get so that's support into the kernel in

00:16:45,190 --> 00:16:52,950
a way that makes it really happy so I

00:16:47,790 --> 00:16:52,950
want to help coordinate that effort and

00:16:53,160 --> 00:16:59,080
part of the the reason is I've one of

00:16:57,130 --> 00:17:01,240
the maintainer of the open Avenue

00:16:59,080 --> 00:17:04,030
repository that's doing the user space

00:17:01,240 --> 00:17:08,500
portion in Linux of time-sensitive

00:17:04,030 --> 00:17:12,610
networking support so it's all open

00:17:08,500 --> 00:17:15,490
source and designed to get everybody

00:17:12,610 --> 00:17:18,070
collaborating and just get all the

00:17:15,490 --> 00:17:18,690
plumbing in one spot so we don't have a

00:17:18,070 --> 00:17:22,470
whole bunch

00:17:18,690 --> 00:17:29,970
disorganized unrelated out of tree

00:17:22,470 --> 00:17:33,210
drivers okay so networking comes from

00:17:29,970 --> 00:17:36,450
the I Triple E a no 2.1 the standards

00:17:33,210 --> 00:17:37,980
Task Group of the same name there's a

00:17:36,450 --> 00:17:41,820
whole bunch of standard something like

00:17:37,980 --> 00:17:43,740
12 or 13 of them now that are all kind

00:17:41,820 --> 00:17:46,920
of geared around the same thing which is

00:17:43,740 --> 00:17:50,250
to provide a bounded worst-case delays

00:17:46,920 --> 00:17:52,800
so you know when you have best-effort

00:17:50,250 --> 00:17:54,750
traffic this is really the best policy

00:17:52,800 --> 00:17:58,290
for most network traffic but there are

00:17:54,750 --> 00:18:03,090
certain use cases where you need bounds

00:17:58,290 --> 00:18:06,420
that you can rely on and with time

00:18:03,090 --> 00:18:08,910
sensitive networking you can have they

00:18:06,420 --> 00:18:11,070
get rid of the long tail of best

00:18:08,910 --> 00:18:14,280
different traffic and have reliable

00:18:11,070 --> 00:18:15,900
bounds and also there's a lot of

00:18:14,280 --> 00:18:18,150
applications that have time

00:18:15,900 --> 00:18:20,970
synchronization requirements where your

00:18:18,150 --> 00:18:23,550
user level protocols need to have things

00:18:20,970 --> 00:18:25,170
happening at specific times that are

00:18:23,550 --> 00:18:28,050
coordinated across devices in the

00:18:25,170 --> 00:18:30,210
network things like audio video

00:18:28,050 --> 00:18:34,530
synchronization things like machine

00:18:30,210 --> 00:18:36,780
control automotive networks where you're

00:18:34,530 --> 00:18:42,230
controlling breaks and cruise control

00:18:36,780 --> 00:18:45,540
and getting a driver assistance feedback

00:18:42,230 --> 00:18:47,490
these are all areas where people are

00:18:45,540 --> 00:18:51,060
trying to converge their networks onto

00:18:47,490 --> 00:18:55,590
Ethernet or similar variants of Ethernet

00:18:51,060 --> 00:18:58,110
and they have a need for bounded latency

00:18:55,590 --> 00:18:59,970
and time sync so the way we do this is

00:18:58,110 --> 00:19:02,970
we provide global time sync

00:18:59,970 --> 00:19:04,590
we provide resource reservation and

00:19:02,970 --> 00:19:06,540
access control because you can't provide

00:19:04,590 --> 00:19:11,610
guarantees without being able to say no

00:19:06,540 --> 00:19:13,830
to traffic that would defeat your

00:19:11,610 --> 00:19:16,620
attempts to provide the guarantees and

00:19:13,830 --> 00:19:19,260
then the final mechanism which is most

00:19:16,620 --> 00:19:23,600
important to the the TC subsystem is

00:19:19,260 --> 00:19:23,600
traffic shaping and scheduling

00:19:24,770 --> 00:19:34,170
so basically we have a protocol called

00:19:27,330 --> 00:19:36,900
GP DP based on I Triple E 1588 PTP it

00:19:34,170 --> 00:19:39,330
ensures that all the link peers can talk

00:19:36,900 --> 00:19:41,130
this time synchronization protocol and

00:19:39,330 --> 00:19:44,970
then we have a string reservation

00:19:41,130 --> 00:19:49,380
protocol that has a specific attribute

00:19:44,970 --> 00:19:53,400
that establishes the ability to reserve

00:19:49,380 --> 00:19:57,030
traffic and once you've established a

00:19:53,400 --> 00:19:58,290
domain talkers and listeners talk to

00:19:57,030 --> 00:20:03,740
each other through the network and

00:19:58,290 --> 00:20:06,060
establish reservations for bandwidth and

00:20:03,740 --> 00:20:10,850
forwarding tables in the bridges along

00:20:06,060 --> 00:20:14,340
the paths are updated to support the

00:20:10,850 --> 00:20:15,630
reserved bandwidth traffic and once

00:20:14,340 --> 00:20:18,990
that's all in place you can start

00:20:15,630 --> 00:20:20,580
actually streaming your traffic the

00:20:18,990 --> 00:20:23,130
talkers transmitted regular intervals

00:20:20,580 --> 00:20:26,550
and they include timing information in

00:20:23,130 --> 00:20:29,280
the in the traffic that they send in

00:20:26,550 --> 00:20:31,800
their streams the the bridges prioritize

00:20:29,280 --> 00:20:36,300
and shape the stream traffic so it all

00:20:31,800 --> 00:20:38,490
gets forwarded through smoothly and the

00:20:36,300 --> 00:20:40,950
listener receives the traffic and can

00:20:38,490 --> 00:20:45,530
recover any timing related information

00:20:40,950 --> 00:20:45,530
that is necessary for what it's doing so

00:20:45,800 --> 00:20:52,470
this is just a little illustration of

00:20:48,180 --> 00:20:56,130
what a networking domain looks like you

00:20:52,470 --> 00:21:00,990
can have wireless links this is a little

00:20:56,130 --> 00:21:04,650
bit weak right now interfacing with the

00:21:00,990 --> 00:21:06,150
Wi-Fi Alliance to get the specified

00:21:04,650 --> 00:21:11,100
protocols actually implemented is

00:21:06,150 --> 00:21:13,290
interesting we have hmm you see there's

00:21:11,100 --> 00:21:16,230
a TSN capable end point here that's not

00:21:13,290 --> 00:21:18,840
in the domain because he's connected

00:21:16,230 --> 00:21:22,530
through a hub which can't support the

00:21:18,840 --> 00:21:23,970
protocols so he's cut out and over here

00:21:22,530 --> 00:21:27,570
there's a switch that doesn't support

00:21:23,970 --> 00:21:32,850
the necessary reservation or time sync

00:21:27,570 --> 00:21:35,730
protocols and he's cut out too so if

00:21:32,850 --> 00:21:37,080
anybody's looked at the 802 dot 1q

00:21:35,730 --> 00:21:40,440
standard for bridge

00:21:37,080 --> 00:21:44,280
this might look familiar the idea is

00:21:40,440 --> 00:21:46,520
this is the model for how queueing and

00:21:44,280 --> 00:21:50,610
forwarding happens in bridges a

00:21:46,520 --> 00:21:54,750
selection algorithm here refers to how

00:21:50,610 --> 00:22:00,350
the how transmit selection here picks

00:21:54,750 --> 00:22:05,190
between multiple queues and these are

00:22:00,350 --> 00:22:08,220
colloquially known as shapers the new

00:22:05,190 --> 00:22:12,830
thing here is additional shapers and

00:22:08,220 --> 00:22:16,560
this gate feature here which provides

00:22:12,830 --> 00:22:19,650
basically a TDM style access to the

00:22:16,560 --> 00:22:23,700
network where different queues have time

00:22:19,650 --> 00:22:27,990
slices during which they can use the

00:22:23,700 --> 00:22:31,380
network this gives you the lowest

00:22:27,990 --> 00:22:33,390
possible latency of traffic through the

00:22:31,380 --> 00:22:35,700
network because when you time it and

00:22:33,390 --> 00:22:38,280
have that time aligned with the windows

00:22:35,700 --> 00:22:40,770
it ensures that there is no interfering

00:22:38,280 --> 00:22:43,410
traffic and your traffic gets a smooth

00:22:40,770 --> 00:22:49,830
path all the way to its destination with

00:22:43,410 --> 00:22:53,960
very little timing jitter so in Linux

00:22:49,830 --> 00:22:57,300
today there is not a lot of support but

00:22:53,960 --> 00:23:00,180
again not a lot is required actually so

00:22:57,300 --> 00:23:02,580
what we have now is mostly supporting

00:23:00,180 --> 00:23:07,530
the the older protocols that were known

00:23:02,580 --> 00:23:09,090
as audio/video bridging or AV B and part

00:23:07,530 --> 00:23:14,610
of that there's a layer 2 transport

00:23:09,090 --> 00:23:20,220
protocol for audio video formats so it

00:23:14,610 --> 00:23:23,790
sends 8,000 for Class A or 2 or 4

00:23:20,220 --> 00:23:26,850
yeah 4,000 for Class B traffic packets

00:23:23,790 --> 00:23:28,470
per second through the network and those

00:23:26,850 --> 00:23:32,580
all have to be spaced evenly

00:23:28,470 --> 00:23:37,200
you can't bunch them because that gets

00:23:32,580 --> 00:23:42,540
rid of the ability to guarantee the the

00:23:37,200 --> 00:23:45,450
bounds under latency so actually

00:23:42,540 --> 00:23:47,700
providing the kernel those packets

00:23:45,450 --> 00:23:49,860
spaced at that interval is very

00:23:47,700 --> 00:23:50,700
difficult especially since a lot of

00:23:49,860 --> 00:23:53,640
these

00:23:50,700 --> 00:23:55,770
devices we're not talking about 50 core

00:23:53,640 --> 00:23:59,010
machines we've got maybe two arm cores

00:23:55,770 --> 00:24:00,150
or something that need to be doing other

00:23:59,010 --> 00:24:03,360
things as well

00:24:00,150 --> 00:24:06,840
like running a user interface for a an

00:24:03,360 --> 00:24:09,540
automotive head unit or something so

00:24:06,840 --> 00:24:11,150
anyway that that's one challenge that we

00:24:09,540 --> 00:24:15,480
have

00:24:11,150 --> 00:24:17,940
but I've experimented using the the HTV

00:24:15,480 --> 00:24:20,580
shaper so that we can queue up a bunch

00:24:17,940 --> 00:24:23,190
of these frames at once and have that

00:24:20,580 --> 00:24:27,140
shaper spread them out and that has

00:24:23,190 --> 00:24:30,720
proved to be pretty effective although

00:24:27,140 --> 00:24:32,820
it's a little bit uneven sometimes when

00:24:30,720 --> 00:24:41,250
you're talking about getting them spaced

00:24:32,820 --> 00:24:43,650
out at the 125 microsecond intervals so

00:24:41,250 --> 00:24:46,470
the way that bridges recognize time

00:24:43,650 --> 00:24:49,650
sensitive networking traffic is that

00:24:46,470 --> 00:24:53,220
it's always VLAN tagged and it always

00:24:49,650 --> 00:24:55,890
has specific priority code point

00:24:53,220 --> 00:25:00,180
assignments for the SR classes as far as

00:24:55,890 --> 00:25:02,280
streaming reservation so you have the

00:25:00,180 --> 00:25:06,060
VLAN tag and then a unique multicast

00:25:02,280 --> 00:25:07,530
destination address first dream there's

00:25:06,060 --> 00:25:11,070
some special configuration you have to

00:25:07,530 --> 00:25:13,590
do you can't have any a half-duplex

00:25:11,070 --> 00:25:17,280
you can't use pause frames and you can't

00:25:13,590 --> 00:25:19,530
have any jumbo frames because you know

00:25:17,280 --> 00:25:21,720
the larger your frames the longer you

00:25:19,530 --> 00:25:24,140
can interfere with the time-sensitive

00:25:21,720 --> 00:25:26,520
traffic and then there's a different

00:25:24,140 --> 00:25:28,440
mapping of priority codes to traffic

00:25:26,520 --> 00:25:32,040
classes which provides a little bit of

00:25:28,440 --> 00:25:36,170
confusion because we're elevating 2 & 3

00:25:32,040 --> 00:25:41,330
to be the highest priority ones and then

00:25:36,170 --> 00:25:44,760
4 5 6 & 7 or the next highest priority

00:25:41,330 --> 00:25:47,550
so it's a little bit out of order but

00:25:44,760 --> 00:25:49,500
those remain you know the the same

00:25:47,550 --> 00:25:54,270
priorities for the strict priority

00:25:49,500 --> 00:25:58,560
queues okay so recently some engineers

00:25:54,270 --> 00:26:01,230
from Intel provided a cutest based

00:25:58,560 --> 00:26:04,770
software shaper and the hardware offload

00:26:01,230 --> 00:26:07,530
for it it implements the

00:26:04,770 --> 00:26:11,910
credit-based shaping algorithm that's in

00:26:07,530 --> 00:26:14,460
the standards currently there's only I

00:26:11,910 --> 00:26:17,429
to ten driver support but there are a

00:26:14,460 --> 00:26:21,750
lot of other Nick's in the kernel tree

00:26:17,429 --> 00:26:24,929
that are capable of this offload yet I'd

00:26:21,750 --> 00:26:28,500
like to provide some patches that enable

00:26:24,929 --> 00:26:32,400
this shaper offload in those other

00:26:28,500 --> 00:26:34,740
Nick's one issue is that the credit way

00:26:32,400 --> 00:26:38,130
shape or algorithm actually requires

00:26:34,740 --> 00:26:40,620
that you shape things also on a per

00:26:38,130 --> 00:26:43,500
stream basis not just on a per clock

00:26:40,620 --> 00:26:47,160
traffic class basis which is what the

00:26:43,500 --> 00:26:51,120
shaper provides I've got an idea later

00:26:47,160 --> 00:26:53,280
for a hierarchical shaper that will take

00:26:51,120 --> 00:26:57,750
advantage of the same Hardware offload

00:26:53,280 --> 00:27:01,350
but also shape the streams so there's

00:26:57,750 --> 00:27:04,230
another feature that was there's a

00:27:01,350 --> 00:27:10,580
recent RFC on the net dev list from

00:27:04,230 --> 00:27:10,580
Richard Cochran who does the the PTP

00:27:11,720 --> 00:27:18,450
subsystem in the kernel he proposed a

00:27:15,660 --> 00:27:20,790
general TX time C message from user

00:27:18,450 --> 00:27:24,300
space that you can put in your send

00:27:20,790 --> 00:27:27,809
message calls to schedule packet launch

00:27:24,300 --> 00:27:31,350
and it would set a timestamp field in

00:27:27,809 --> 00:27:34,440
the SK Poff and there's a number of NICs

00:27:31,350 --> 00:27:38,580
including the I to 10 again that will

00:27:34,440 --> 00:27:41,309
use that scheduled time as and compare

00:27:38,580 --> 00:27:45,270
it to its PTP clock internally and

00:27:41,309 --> 00:27:48,300
launch it precisely at that time this

00:27:45,270 --> 00:27:50,360
enables a lot of the the TSN

00:27:48,300 --> 00:27:53,910
functionality described in the standards

00:27:50,360 --> 00:27:57,929
but there's a lot that is left to do on

00:27:53,910 --> 00:28:00,929
this to get it fully implemented and

00:27:57,929 --> 00:28:02,630
merged we need to know what timescale we

00:28:00,929 --> 00:28:05,429
should associate the timestamps with

00:28:02,630 --> 00:28:11,090
where do we store the timestamp we

00:28:05,429 --> 00:28:11,090
probably don't want a new field in skb

00:28:11,120 --> 00:28:17,400
we need to know how to deal with out of

00:28:14,309 --> 00:28:18,000
order and already past timestamps from

00:28:17,400 --> 00:28:23,070
the kernel

00:28:18,000 --> 00:28:26,820
and a way to integrate with the the tea

00:28:23,070 --> 00:28:38,790
packet what the M map and now the zero

00:28:26,820 --> 00:28:41,430
the zero copy question this is the work

00:28:38,790 --> 00:28:45,090
that Richard posted or it's is it

00:28:41,430 --> 00:28:47,100
related that that was from what would

00:28:45,090 --> 00:28:48,510
Richard post it okay because I was

00:28:47,100 --> 00:28:49,890
talking to some guys from Google and

00:28:48,510 --> 00:28:51,450
they say that Dave didn't accept it

00:28:49,890 --> 00:28:55,590
because there was no software fallback

00:28:51,450 --> 00:28:59,130
pass that that's the reason it wasn't he

00:28:55,590 --> 00:29:00,540
wasn't expecting it it was an RFC yes it

00:28:59,130 --> 00:29:03,710
was rejected excuse me because there was

00:29:00,540 --> 00:29:06,300
no software fallback pass

00:29:03,710 --> 00:29:08,010
he hasn't implemented it yet it was just

00:29:06,300 --> 00:29:11,520
a request for comments on it okay

00:29:08,010 --> 00:29:14,730
so that is what's called the igb is the

00:29:11,520 --> 00:29:17,850
wrong key it's the one gig yes the the I

00:29:14,730 --> 00:29:20,640
210 it's a flavor where I do be anyway

00:29:17,850 --> 00:29:24,480
yes so so in your hard row a Q cannot

00:29:20,640 --> 00:29:27,450
can be non-fifa right because when you

00:29:24,480 --> 00:29:29,310
do time-based I want to send this now in

00:29:27,450 --> 00:29:31,740
one second from down but now I want to

00:29:29,310 --> 00:29:38,100
send something earlier right so the Q is

00:29:31,740 --> 00:29:41,430
not FIFO anymore you support it yeah it

00:29:38,100 --> 00:29:44,190
gets blocked until that time arrives the

00:29:41,430 --> 00:29:47,250
head of Q blocks until it's timestamp

00:29:44,190 --> 00:29:50,760
arrives but it also blocks other queues

00:29:47,250 --> 00:29:58,560
the lower priority queues but sorry we

00:29:50,760 --> 00:30:06,510
just out of time we do have nothing

00:29:58,560 --> 00:30:09,510
basically okay so okay I've got a little

00:30:06,510 --> 00:30:11,160
bit more a some these are the the two

00:30:09,510 --> 00:30:14,970
things I've talked about now are sort of

00:30:11,160 --> 00:30:17,840
in progress and I'd like to talk with

00:30:14,970 --> 00:30:22,140
people afterwards you're interested but

00:30:17,840 --> 00:30:25,560
yeah this is a function required for

00:30:22,140 --> 00:30:29,310
later standards I believe most of it

00:30:25,560 --> 00:30:32,370
could be implemented by existing TC

00:30:29,310 --> 00:30:36,320
features I'm not sure though

00:30:32,370 --> 00:30:39,860
the idea is to allow existing

00:30:36,320 --> 00:30:44,400
applications to use TSN features by

00:30:39,860 --> 00:30:46,320
rewriting their their skb so I'm just

00:30:44,400 --> 00:30:48,360
going to comment that the there's a talk

00:30:46,320 --> 00:30:50,549
going on in part of right now about buff

00:30:48,360 --> 00:30:52,500
of Wi-Fi

00:30:50,549 --> 00:30:54,960
it's the scheduling seems to be very

00:30:52,500 --> 00:30:56,760
similar to this right in others they

00:30:54,960 --> 00:30:59,039
have stations and then their priorities

00:30:56,760 --> 00:31:01,620
it's a hierarchical kind of thing one is

00:30:59,039 --> 00:31:04,409
kind of by priority and then at the

00:31:01,620 --> 00:31:06,630
lower level you have by some sort of

00:31:04,409 --> 00:31:08,700
scheduling algorithm that's specific to

00:31:06,630 --> 00:31:10,710
wireless so from a general point of view

00:31:08,700 --> 00:31:13,620
that may be a fit did you look at the

00:31:10,710 --> 00:31:15,539
Wi-Fi paper or I I haven't seen the

00:31:13,620 --> 00:31:17,159
Wi-Fi paper so givi is going in parallel

00:31:15,539 --> 00:31:18,570
they were going to show up here and talk

00:31:17,159 --> 00:31:21,929
about their staff which they have

00:31:18,570 --> 00:31:23,070
similar challenges mm-hmm right maybe

00:31:21,929 --> 00:31:25,230
it's good to sync up with them as well

00:31:23,070 --> 00:31:27,450
yeah there's there's a number of

00:31:25,230 --> 00:31:31,789
different schedulers that can be plugged

00:31:27,450 --> 00:31:37,169
in to these time-sensitive networking

00:31:31,789 --> 00:31:39,860
protocols I think most of them can be

00:31:37,169 --> 00:31:43,679
implemented through a combination of

00:31:39,860 --> 00:31:46,799
software shapers in the TC framework and

00:31:43,679 --> 00:31:50,669
this launch time functionality that we

00:31:46,799 --> 00:31:54,770
talked about where you can you know what

00:31:50,669 --> 00:32:00,659
the queues go at specific times based on

00:31:54,770 --> 00:32:02,460
assigned timestamps in a queue disk do

00:32:00,659 --> 00:32:05,940
you trust a time stuff in software like

00:32:02,460 --> 00:32:07,890
oh do you I come up with the time stone

00:32:05,940 --> 00:32:09,659
I think I would prefer the kernel to be

00:32:07,890 --> 00:32:13,529
putting the timestamps in but in some

00:32:09,659 --> 00:32:16,620
cases you need to coordinate with

00:32:13,529 --> 00:32:19,350
applications applications say I can

00:32:16,620 --> 00:32:22,649
transmit on this schedule at this offset

00:32:19,350 --> 00:32:24,720
from the the standard cycle and I I

00:32:22,649 --> 00:32:27,330
think a software acutest could take that

00:32:24,720 --> 00:32:30,210
schedule and it could be in charge of

00:32:27,330 --> 00:32:33,500
putting the time stamps into the frames

00:32:30,210 --> 00:32:39,690
as to make them launch on that schedule

00:32:33,500 --> 00:32:42,419
so basically what what I need from TC is

00:32:39,690 --> 00:32:44,549
this notion of a time stamp the notion

00:32:42,419 --> 00:32:45,150
of scheduling when something is going to

00:32:44,549 --> 00:32:47,490
happen

00:32:45,150 --> 00:32:50,040
that's that's what doesn't exist yet and

00:32:47,490 --> 00:32:52,350
I think just that that one notion would

00:32:50,040 --> 00:32:54,900
enable a lot of software cue disks as

00:32:52,350 --> 00:32:56,760
well as offloads if you have a reference

00:32:54,900 --> 00:32:59,220
if you have a reference timestamp you

00:32:56,760 --> 00:33:02,790
can always schedule something to happen

00:32:59,220 --> 00:33:04,800
at X plus diff of time right right

00:33:02,790 --> 00:33:08,880
exactly so and that's how I think a lot

00:33:04,800 --> 00:33:11,220
of this work okay we just need to have a

00:33:08,880 --> 00:33:13,080
way to have that timestamp that's not a

00:33:11,220 --> 00:33:13,710
timestamp that something happened it's a

00:33:13,080 --> 00:33:16,020
timestamp

00:33:13,710 --> 00:33:17,400
that's scheduling something to happen

00:33:16,020 --> 00:33:20,070
yeah I'm sorry though we don't have much

00:33:17,400 --> 00:33:22,260
time but so there's a lot of extra

00:33:20,070 --> 00:33:24,210
information I put in the slides for

00:33:22,260 --> 00:33:26,570
people who are interested in TSN so

00:33:24,210 --> 00:33:30,480
please download the slides afterwards

00:33:26,570 --> 00:33:32,520
take a look if you're interested and my

00:33:30,480 --> 00:33:36,809
contact information is in the earlier

00:33:32,520 --> 00:33:39,960
slides get in touch with me and I will

00:33:36,809 --> 00:33:42,450
be happy to spend time explaining to

00:33:39,960 --> 00:33:44,160
normal questions please but I was I

00:33:42,450 --> 00:33:46,500
thought you said driverless cars is that

00:33:44,160 --> 00:33:48,960
what he said the time this is used in

00:33:46,500 --> 00:33:52,980
some driverless not necessarily

00:33:48,960 --> 00:33:57,300
driverless cars but cameras from cars

00:33:52,980 --> 00:34:01,320
right feeding into machine learning

00:33:57,300 --> 00:34:03,600
things recognizing I see yeah there's

00:34:01,320 --> 00:34:06,929
lots of different places it's being used

00:34:03,600 --> 00:34:08,220
okay okay and some reason when he said

00:34:06,929 --> 00:34:10,440
Harmon and I thought you know you got

00:34:08,220 --> 00:34:13,440
this musicians lip-synching in kpop and

00:34:10,440 --> 00:34:18,570
the timing is important yeah well we

00:34:13,440 --> 00:34:19,740
originally were doing just come over

00:34:18,570 --> 00:34:24,620
worried about you next on the schedule

00:34:19,740 --> 00:34:27,360
which is sort of keep going I just yeah

00:34:24,620 --> 00:34:30,149
Harmons involvement was originally a in

00:34:27,360 --> 00:34:32,810
the pro audio space but it turns out

00:34:30,149 --> 00:34:35,190
that the automotive infotainment is

00:34:32,810 --> 00:34:37,980
actually where a lot of our revenue

00:34:35,190 --> 00:34:39,060
comes from and it's one of the big

00:34:37,980 --> 00:34:43,770
reasons that we were purchased by

00:34:39,060 --> 00:34:47,899
Samsung so that is where the the primary

00:34:43,770 --> 00:34:51,120
action in the TSN space is and

00:34:47,899 --> 00:34:55,820
industrial networking people are also a

00:34:51,120 --> 00:34:55,820
big player now I think slavery

00:34:59,080 --> 00:35:08,869
okay so this is the switch deaf

00:35:03,670 --> 00:35:11,450
infrastructure okay for the srv4 in

00:35:08,869 --> 00:35:14,540
order to to do TC flower upload into the

00:35:11,450 --> 00:35:16,520
internal so this is the Nick here this

00:35:14,540 --> 00:35:22,400
is a two-port Nick right

00:35:16,520 --> 00:35:26,390
so with PF and this VF and other PF and

00:35:22,400 --> 00:35:29,390
and and its associated VF so to port

00:35:26,390 --> 00:35:32,240
device we have internal switch but

00:35:29,390 --> 00:35:34,670
initially in the switch deaf mode

00:35:32,240 --> 00:35:36,460
nothing is offloaded yet but we need the

00:35:34,670 --> 00:35:38,150
plumbing of the switch theft

00:35:36,460 --> 00:35:40,180
infrastructure to tie everything

00:35:38,150 --> 00:35:46,670
together and into the eventual offload

00:35:40,180 --> 00:35:50,869
okay so so initially our packets will go

00:35:46,670 --> 00:35:51,950
through the software switch and it's

00:35:50,869 --> 00:35:56,450
nothing is offloaded

00:35:51,950 --> 00:35:59,630
okay so we have we create one VF

00:35:56,450 --> 00:36:02,000
represented for each VF okay so this is

00:35:59,630 --> 00:36:04,940
a VF represent that represents the VF so

00:36:02,000 --> 00:36:08,540
that we can connect to the to the to the

00:36:04,940 --> 00:36:10,790
switch and we're using the PF to

00:36:08,540 --> 00:36:20,530
represent a port and I understand from

00:36:10,790 --> 00:36:22,670
the last few days that so so in in in

00:36:20,530 --> 00:36:27,170
discussions in the last few days I

00:36:22,670 --> 00:36:29,200
understand that the the the consensus

00:36:27,170 --> 00:36:33,589
seems to be that we need to have

00:36:29,200 --> 00:36:35,660
representations for the port so so

00:36:33,589 --> 00:36:38,359
current so we're looking to that so but

00:36:35,660 --> 00:36:41,480
currently we only have one represented

00:36:38,359 --> 00:36:44,990
for for each VF okay and this represents

00:36:41,480 --> 00:36:47,800
the port so for example if we want

00:36:44,990 --> 00:36:50,720
okay so ultimately we want this flow

00:36:47,800 --> 00:36:53,780
let's say okay ultimately for example

00:36:50,720 --> 00:36:56,020
this one we want this one let's use this

00:36:53,780 --> 00:36:58,310
one the right one okay

00:36:56,020 --> 00:37:01,310
ultimately we want this to go directly

00:36:58,310 --> 00:37:06,380
to port port one okay and and be

00:37:01,310 --> 00:37:09,150
offloaded and be fast and so we would we

00:37:06,380 --> 00:37:12,119
accept TC and do setup

00:37:09,150 --> 00:37:16,170
TC okay we Excel and you sell TC here

00:37:12,119 --> 00:37:20,339
and here and on the PFS okay so that way

00:37:16,170 --> 00:37:23,910
for example here we the user can insert

00:37:20,339 --> 00:37:27,329
a TC filter saying that okay if it

00:37:23,910 --> 00:37:30,779
matches on on this flow maybe an L -

00:37:27,329 --> 00:37:33,660
maybe L 3 and then we will redirect it

00:37:30,779 --> 00:37:35,730
to the to the port right so that way

00:37:33,660 --> 00:37:39,089
after we accept that and we downloaded

00:37:35,730 --> 00:37:41,279
successfully then that TC filter will

00:37:39,089 --> 00:37:43,940
now be the insider switch and it would

00:37:41,279 --> 00:37:43,940
switch it directly

00:38:07,700 --> 00:38:10,420
doesn't

00:38:19,720 --> 00:38:22,470
okay

00:38:35,890 --> 00:38:43,369
okay

00:38:37,960 --> 00:38:46,000
okay so so this is before okay so if we

00:38:43,369 --> 00:38:48,530
insert if we insert all the TC flower

00:38:46,000 --> 00:38:55,490
rules for all these different colored

00:38:48,530 --> 00:38:57,440
paths in the in the proper way then it

00:38:55,490 --> 00:38:59,900
will be like this okay so all the flows

00:38:57,440 --> 00:39:01,940
will now flow directly this is again

00:38:59,900 --> 00:39:04,160
this is inside the neck this internal

00:39:01,940 --> 00:39:06,920
switch inside a neck to point neck then

00:39:04,160 --> 00:39:09,109
then the flows will flow directly okay

00:39:06,920 --> 00:39:14,450
without going going through the software

00:39:09,109 --> 00:39:17,500
switch so this this diagram is it's a

00:39:14,450 --> 00:39:20,750
little bit inaccurate right now because

00:39:17,500 --> 00:39:24,140
this in this diagram we assume that this

00:39:20,750 --> 00:39:28,910
this one switching domain okay we can

00:39:24,140 --> 00:39:31,849
switch flows from any any VF to any VF

00:39:28,910 --> 00:39:37,369
from any VF to any port but actually in

00:39:31,849 --> 00:39:41,480
the current implementation this this

00:39:37,369 --> 00:39:42,920
part okay this PF and this VF and in

00:39:41,480 --> 00:39:47,329
this one they are they're separate they

00:39:42,920 --> 00:39:48,680
have to switch I think is that parent ID

00:39:47,329 --> 00:39:51,200
I think it's called parent ID they're

00:39:48,680 --> 00:39:55,160
different parent ID so we cannot we

00:39:51,200 --> 00:39:57,290
won't accept a flow to go from here to

00:39:55,160 --> 00:39:59,390
here for example the blue line but but

00:39:57,290 --> 00:40:01,849
eventually we will make it so that they

00:39:59,390 --> 00:40:09,079
all will have the same parent ID and we

00:40:01,849 --> 00:40:13,460
can we can do this so so that's just a

00:40:09,079 --> 00:40:20,119
basic infrastructure to accept the TC

00:40:13,460 --> 00:40:21,829
flower flows into the hardware okay so

00:40:20,119 --> 00:40:24,920
all that implementation was done by my

00:40:21,829 --> 00:40:28,579
colleague Satya Corolla okay the code

00:40:24,920 --> 00:40:32,150
went upstream in July 2017 a few months

00:40:28,579 --> 00:40:33,390
ago okay so these are the current of TC

00:40:32,150 --> 00:40:35,819
flower

00:40:33,390 --> 00:40:43,589
classifier that we support and there are

00:40:35,819 --> 00:40:49,859
ingress l2 VLANs ipv4 ipv6 l3 TCP UDP

00:40:43,589 --> 00:40:53,609
icmp VX 9 over ipv4 okay and the the TC

00:40:49,859 --> 00:40:56,460
actions are drop redirect push pop a

00:40:53,609 --> 00:40:59,579
VLAN and in the previous diagram they're

00:40:56,460 --> 00:41:02,970
all redirect for example right so in

00:40:59,579 --> 00:41:09,509
here we're just doing all redirect to

00:41:02,970 --> 00:41:17,640
just get the SRO V switch working okay

00:41:09,509 --> 00:41:20,670
for the Florida v VMs for other BFS okay

00:41:17,640 --> 00:41:22,980
so in in this slide I like to just do a

00:41:20,670 --> 00:41:25,549
quick comparison between a TC flower

00:41:22,980 --> 00:41:27,450
implementation and the n-tuple

00:41:25,549 --> 00:41:29,609
implementation that would that there was

00:41:27,450 --> 00:41:33,569
not much earlier okay so TC flowers is

00:41:29,609 --> 00:41:34,769
brand new and to poll was done about two

00:41:33,569 --> 00:41:38,039
years ago okay

00:41:34,769 --> 00:41:42,359
and surprisingly there are quite a bit

00:41:38,039 --> 00:41:48,140
of similarities between the two so for

00:41:42,359 --> 00:41:51,420
example they both used dissector okay

00:41:48,140 --> 00:41:55,650
for n - PO we actually have to dissect

00:41:51,420 --> 00:41:58,019
the actual rx packet in the in the TC

00:41:55,650 --> 00:42:03,299
flower case the TC sub system already

00:41:58,019 --> 00:42:06,390
has already dissected the Delta flow

00:42:03,299 --> 00:42:10,170
into into a flow key and passed down to

00:42:06,390 --> 00:42:12,749
the to the driver and and I don't I

00:42:10,170 --> 00:42:17,220
understand from from discussion in the

00:42:12,749 --> 00:42:20,279
last few days that people may have some

00:42:17,220 --> 00:42:23,220
regrets in using the the dissector for

00:42:20,279 --> 00:42:26,579
for the TC subsystem because it just

00:42:23,220 --> 00:42:28,140
makes it very difficult to expand

00:42:26,579 --> 00:42:31,529
because now every time you touch the

00:42:28,140 --> 00:42:34,319
teeth the dissector it it touches a lot

00:42:31,529 --> 00:42:37,430
of a lot of code that that's using the

00:42:34,319 --> 00:42:42,140
dissector but anyway the way it is today

00:42:37,430 --> 00:42:42,140
they both use of the dissector

00:42:43,990 --> 00:42:51,369
for the n-tuple case okay it's always an

00:42:46,660 --> 00:43:00,060
exact match okay and for the TC flower

00:42:51,369 --> 00:43:03,670
this is much more flexible we can have

00:43:00,060 --> 00:43:07,810
masks we're kind of the the key the key

00:43:03,670 --> 00:43:09,640
can have masked so we can we can have a

00:43:07,810 --> 00:43:11,260
wild card match it doesn't have to be

00:43:09,640 --> 00:43:13,599
exact match it can be exact match but it

00:43:11,260 --> 00:43:17,470
can also be a wild card match because

00:43:13,599 --> 00:43:19,869
you can specify the damask in the case

00:43:17,470 --> 00:43:22,030
of the end to Poe is all the action is

00:43:19,869 --> 00:43:25,569
always just redirect to a ring okay

00:43:22,030 --> 00:43:28,300
because that's what is designed for the

00:43:25,569 --> 00:43:31,500
number of actions for TC flowers is much

00:43:28,300 --> 00:43:34,810
much richer okay and do drop redirect

00:43:31,500 --> 00:43:35,890
push pop a VLAN tunnel encapsulation

00:43:34,810 --> 00:43:38,380
decapsulation

00:43:35,890 --> 00:43:42,490
and that's that's what we support today

00:43:38,380 --> 00:43:47,619
these are actions we support today and

00:43:42,490 --> 00:43:50,890
every TC flower filter that that that we

00:43:47,619 --> 00:43:54,339
get from the TC sub system we have to

00:43:50,890 --> 00:43:55,930
store it right because you know we we

00:43:54,339 --> 00:43:58,660
may have to delete it later we may have

00:43:55,930 --> 00:44:02,619
to change it later when they have to age

00:43:58,660 --> 00:44:05,650
it later so so we're used I think this

00:44:02,619 --> 00:44:09,250
is the resizable recycle hash table to

00:44:05,650 --> 00:44:12,970
Hashem Hashem multiple ways TC gives us

00:44:09,250 --> 00:44:14,730
a cookie but we have to hash it in

00:44:12,970 --> 00:44:18,099
different ways so that we can search it

00:44:14,730 --> 00:44:21,700
because some some of the some of the

00:44:18,099 --> 00:44:26,619
filter rules they use common handles

00:44:21,700 --> 00:44:31,300
okay so so this is there's a much more

00:44:26,619 --> 00:44:33,220
complicated resizable hash system that

00:44:31,300 --> 00:44:36,210
we use whereas for the end to Poe is

00:44:33,220 --> 00:44:43,859
just a simple hash using the RSS RSS

00:44:36,210 --> 00:44:47,560
hash for for the for the packet okay so

00:44:43,859 --> 00:44:49,839
after we've offloaded a TC flower filter

00:44:47,560 --> 00:44:51,160
okay the the switch doesn't see it

00:44:49,839 --> 00:44:52,320
anymore it doesn't see that packet

00:44:51,160 --> 00:44:55,620
anymore right because in

00:44:52,320 --> 00:44:57,990
is now switched by the hardware so we

00:44:55,620 --> 00:45:03,690
have to maintain statistics okay so that

00:44:57,990 --> 00:45:06,480
so that the upper layers can be I went

00:45:03,690 --> 00:45:08,790
to went Asia flow in the case of n2 PO

00:45:06,480 --> 00:45:10,910
because we're just redirecting to

00:45:08,790 --> 00:45:13,230
arraign software still sees the packet

00:45:10,910 --> 00:45:16,350
we're not we're not keeping any any

00:45:13,230 --> 00:45:17,640
statistics so but but surprisingly

00:45:16,350 --> 00:45:19,860
there's there's quite a bit of

00:45:17,640 --> 00:45:21,120
similarities between it too of course

00:45:19,860 --> 00:45:27,210
easy flower is much much more

00:45:21,120 --> 00:45:28,680
complicated so but but unfortunately

00:45:27,210 --> 00:45:30,530
because it's done by two two different

00:45:28,680 --> 00:45:33,360
people we're not sharing any code but

00:45:30,530 --> 00:45:37,520
but there is some opportunity that we

00:45:33,360 --> 00:45:37,520
can we can share some code here

00:45:39,470 --> 00:45:49,470
okay so future plans as I said okay the

00:45:47,730 --> 00:45:52,350
future plan is to be able to switch

00:45:49,470 --> 00:45:54,300
across the whole a cig this is this is a

00:45:52,350 --> 00:45:57,140
dual port Nick again it's a one a sick

00:45:54,300 --> 00:46:00,780
one chip we want to be able to switch

00:45:57,140 --> 00:46:03,150
from any VM to any VM from any I'm sorry

00:46:00,780 --> 00:46:06,660
from any any of you have to any VF from

00:46:03,150 --> 00:46:09,450
any VF to to any port not just the the

00:46:06,660 --> 00:46:13,740
natural port that it it belongs to so

00:46:09,450 --> 00:46:19,710
currently we we plan to do this for the

00:46:13,740 --> 00:46:24,060
future yeah the uplink representation

00:46:19,710 --> 00:46:26,880
that I talked about earlier we don't

00:46:24,060 --> 00:46:29,520
have we don't have a representative for

00:46:26,880 --> 00:46:31,970
the port okay only represented for the

00:46:29,520 --> 00:46:39,840
VF so we probably will look into that

00:46:31,970 --> 00:46:42,060
assuming that's the consensus the

00:46:39,840 --> 00:46:45,240
actions we will do more actions I think

00:46:42,060 --> 00:46:48,260
P edit is a recently added action that's

00:46:45,240 --> 00:46:52,970
something we plan to add P edit means we

00:46:48,260 --> 00:46:56,250
we rewrite the header okay given a match

00:46:52,970 --> 00:47:02,660
we can we're gonna do certain headed

00:46:56,250 --> 00:47:05,790
rewrites as I said because we need to

00:47:02,660 --> 00:47:08,730
keep statistics what it flows so that

00:47:05,790 --> 00:47:12,110
uh players can can decide how to age the

00:47:08,730 --> 00:47:15,300
flows we we need to improve on the

00:47:12,110 --> 00:47:17,670
statistics gathering right now we just

00:47:15,300 --> 00:47:20,220
have a timer we just go through all the

00:47:17,670 --> 00:47:22,170
flows because it's kept in the firmware

00:47:20,220 --> 00:47:23,580
right the the flow counters are kept in

00:47:22,170 --> 00:47:26,280
the firmware so we have a timer that

00:47:23,580 --> 00:47:28,470
runs once a second and we just go

00:47:26,280 --> 00:47:31,620
through the hash table and then get the

00:47:28,470 --> 00:47:33,840
latest flow counters from from the

00:47:31,620 --> 00:47:39,030
hardware and it's is rather inefficient

00:47:33,840 --> 00:47:42,500
so so that I think we have we can we

00:47:39,030 --> 00:47:45,390
need to improve on that and then the

00:47:42,500 --> 00:47:47,400
flow insertion rate you know that's

00:47:45,390 --> 00:47:50,550
something we haven't measured yet but

00:47:47,400 --> 00:47:57,980
but it's it's important that that we be

00:47:50,550 --> 00:47:57,980
able to offload a flow very quickly ok

00:48:06,680 --> 00:48:12,270
question I can I have you all come up

00:48:09,510 --> 00:48:14,190
because I have to transfer slides but

00:48:12,270 --> 00:48:14,720
your slides are ready so you want to go

00:48:14,190 --> 00:48:18,960
next

00:48:14,720 --> 00:48:22,080
any questions for for Michael okay well

00:48:18,960 --> 00:48:24,720
can i yes please

00:48:22,080 --> 00:48:30,410
how many flow can you support I mean

00:48:24,720 --> 00:48:33,000
it's it depends on the on the classify

00:48:30,410 --> 00:48:34,410
what flow it is okay if it's a simple l2

00:48:33,000 --> 00:48:39,420
we can do more okay

00:48:34,410 --> 00:48:42,030
if it is a l3 or even the excellent then

00:48:39,420 --> 00:48:44,100
then then it takes up it takes out

00:48:42,030 --> 00:48:46,860
internally we use keys okay so there's a

00:48:44,100 --> 00:48:50,040
simple l2 key we can we can support a

00:48:46,860 --> 00:48:54,750
lot more but it's roughly what is in the

00:48:50,040 --> 00:48:58,950
number of thousands thousands okay Oh -

00:48:54,750 --> 00:49:00,450
OH - more than l3 l4 okay and you said

00:48:58,950 --> 00:49:02,490
that you want to support Henry right but

00:49:00,450 --> 00:49:05,640
what about VX lang you said you can

00:49:02,490 --> 00:49:07,920
classify but we think we do we do n cap

00:49:05,640 --> 00:49:14,100
the cap are you doing okay so you didn't

00:49:07,920 --> 00:49:17,310
mention it so you so you do okay that's

00:49:14,100 --> 00:49:18,700
all regarding you you you also had a

00:49:17,310 --> 00:49:21,369
chart where you have multiple

00:49:18,700 --> 00:49:22,599
uplinks so we also that was yesterday we

00:49:21,369 --> 00:49:28,000
discussed many thing but that specific

00:49:22,599 --> 00:49:29,710
so would you have one binding point to

00:49:28,000 --> 00:49:30,760
manage the East which or two binding

00:49:29,710 --> 00:49:33,609
points how would it work

00:49:30,760 --> 00:49:36,040
okay so right now any PF okay are you

00:49:33,609 --> 00:49:39,880
talking about like like like a PDS like

00:49:36,040 --> 00:49:42,099
changing it from switch death mode so

00:49:39,880 --> 00:49:46,060
currently any PF can do that okay right

00:49:42,099 --> 00:49:48,190
and probably it will be better to have

00:49:46,060 --> 00:49:50,589
single entry point okay yeah

00:49:48,190 --> 00:49:52,869
but currently it's because I want PF is

00:49:50,589 --> 00:49:54,820
is is it's like it's his own domain

00:49:52,869 --> 00:49:56,829
right now right and when when your

00:49:54,820 --> 00:49:58,570
driver looks on the firmer the the model

00:49:56,829 --> 00:50:00,760
they present the driver it's that you

00:49:58,570 --> 00:50:02,530
have work one is switch or two is which

00:50:00,760 --> 00:50:04,570
is how it works in your case the

00:50:02,530 --> 00:50:06,820
hardware is one one eise which one is

00:50:04,570 --> 00:50:10,599
which for Cooper yeah yeah but of course

00:50:06,820 --> 00:50:13,930
we software can can take the model right

00:50:10,599 --> 00:50:18,369
now we look at it as okay this part of

00:50:13,930 --> 00:50:20,380
the one side of the chip is one domain

00:50:18,369 --> 00:50:22,329
the other is one domain but internally

00:50:20,380 --> 00:50:26,260
to switch the hardware is one switch

00:50:22,329 --> 00:50:29,250
good good for you we have a problem

00:50:26,260 --> 00:50:29,250
there I'm co2

00:50:32,369 --> 00:50:43,050
thanks Michael hi hi so that's also from

00:50:40,619 --> 00:50:46,250
the box but this is more the activity on

00:50:43,050 --> 00:50:47,480
the we have two groups two houses

00:50:46,250 --> 00:50:49,800
[Music]

00:50:47,480 --> 00:50:52,500
the gentlemen from the switch from the

00:50:49,800 --> 00:51:05,910
ASIC and we're from the make sir that's

00:50:52,500 --> 00:51:11,160
the next side of thing page down okay so

00:51:05,910 --> 00:51:13,140
what just quick stuff we did since last

00:51:11,160 --> 00:51:15,840
native in Montreal which I have neither

00:51:13,140 --> 00:51:19,530
so there was work from Chris formality

00:51:15,840 --> 00:51:23,010
was a coach in thank you Jim for helping

00:51:19,530 --> 00:51:26,310
so Ronnie also it was mentioned just so

00:51:23,010 --> 00:51:30,470
the the the insertion rate there was

00:51:26,310 --> 00:51:33,030
also a session here in native by Ronnie

00:51:30,470 --> 00:51:36,060
work to be continued this is still in

00:51:33,030 --> 00:51:38,130
the design or architecture stuff but the

00:51:36,060 --> 00:51:40,440
initial work to improve the rate was as

00:51:38,130 --> 00:51:45,720
ronnie mentioned is in 414 I think not

00:51:40,440 --> 00:51:47,490
413 so it's in other stuff which was

00:51:45,720 --> 00:51:49,200
more internal to our driver is something

00:51:47,490 --> 00:51:51,750
in 412 I think it was a bit after the

00:51:49,200 --> 00:51:53,339
conference so we completed our vixen

00:51:51,750 --> 00:51:55,560
internal offer to properly deal with

00:51:53,339 --> 00:51:57,359
their neighbor events and when I want to

00:51:55,560 --> 00:52:06,270
talk to you today but it's something we

00:51:57,359 --> 00:52:09,210
call her pin you say you said it's so so

00:52:06,270 --> 00:52:10,980
happen in switches is in classical

00:52:09,210 --> 00:52:13,230
switches her pin is not very common

00:52:10,980 --> 00:52:15,089
happen is when a switch is willing to

00:52:13,230 --> 00:52:17,490
return a packet from the pole to accept

00:52:15,089 --> 00:52:19,050
it which is by nature it doesn't look

00:52:17,490 --> 00:52:21,990
good but in switches sometimes they you

00:52:19,050 --> 00:52:23,820
have to do that also in the early maybe

00:52:21,990 --> 00:52:26,760
10 years ago we were doing with vapor

00:52:23,820 --> 00:52:28,859
all those model for isn't it but in

00:52:26,760 --> 00:52:33,390
Mellanox the harbor we bought this term

00:52:28,859 --> 00:52:35,760
so in our Nick it means that when you

00:52:33,390 --> 00:52:38,040
can you can forward a packet from port

00:52:35,760 --> 00:52:41,520
to port it's not is which not what's

00:52:38,040 --> 00:52:43,830
discussed before it's not a obstruction

00:52:41,520 --> 00:52:46,350
of embedded switch this is a Nick

00:52:43,830 --> 00:52:48,690
like you have you have two ports and you

00:52:46,350 --> 00:52:51,570
have an econ each of them so now you can

00:52:48,690 --> 00:52:53,700
you can you can pass a packet for one

00:52:51,570 --> 00:52:55,530
port to the other pot without going to

00:52:53,700 --> 00:52:59,670
the software so this we call it her pin

00:52:55,530 --> 00:53:02,130
okay so from the sample to the same port

00:52:59,670 --> 00:53:05,520
yes I mentioned that the the more of a

00:53:02,130 --> 00:53:07,950
natural case is from port 1 to 4 - but

00:53:05,520 --> 00:53:10,080
as a private case we can also do it on

00:53:07,950 --> 00:53:11,760
the same port like we can get a packet

00:53:10,080 --> 00:53:14,790
do some processing in hardware and

00:53:11,760 --> 00:53:18,980
return it back ok and the implementation

00:53:14,790 --> 00:53:21,510
and in our hardware is by pairing to you

00:53:18,980 --> 00:53:23,460
and you have a sent you and you've heard

00:53:21,510 --> 00:53:25,620
them and after you do this pairing

00:53:23,460 --> 00:53:29,010
everything that goes into the received

00:53:25,620 --> 00:53:30,990
queue goes immediately from this sent

00:53:29,010 --> 00:53:34,410
you ok so let's see what value it can

00:53:30,990 --> 00:53:37,590
bring so first how do you get to this

00:53:34,410 --> 00:53:39,570
pair its flow based right so like TC

00:53:37,590 --> 00:53:41,580
flower that we're talking after after we

00:53:39,570 --> 00:53:44,340
reduce the matching we can send this

00:53:41,580 --> 00:53:46,050
into this pair ok so you can it's not

00:53:44,340 --> 00:53:47,190
that when you put it into this mode

00:53:46,050 --> 00:53:48,480
everything that goes in the pot

00:53:47,190 --> 00:53:50,160
immediately goes to the other products

00:53:48,480 --> 00:53:52,350
would be pretty stupid and not useful

00:53:50,160 --> 00:53:54,810
so it's flow based so many flows can get

00:53:52,350 --> 00:53:56,790
into a certain there's a many to one

00:53:54,810 --> 00:53:59,010
potentially many to one relations many

00:53:56,790 --> 00:54:00,750
flows can get into this hairpin or you

00:53:59,010 --> 00:54:03,600
can have an her pin to float dependent

00:54:00,750 --> 00:54:06,480
on the use case so how do you use that

00:54:03,600 --> 00:54:09,870
what's the API the API is very simple

00:54:06,480 --> 00:54:15,000
it's just TC flower with a mirror on you

00:54:09,870 --> 00:54:18,870
listen to me so it's a TC flower is me

00:54:15,000 --> 00:54:21,690
redirect okay so you would put you would

00:54:18,870 --> 00:54:23,550
put a TC rule on port number one and you

00:54:21,690 --> 00:54:26,250
say I can do this matching go to port

00:54:23,550 --> 00:54:28,650
number two because these two are Nick's

00:54:26,250 --> 00:54:30,540
our interpretation of that is that what

00:54:28,650 --> 00:54:32,520
the application wants here they want

00:54:30,540 --> 00:54:37,350
hardware forwarding and we implement it

00:54:32,520 --> 00:54:38,790
with with Nick with Nick you can also in

00:54:37,350 --> 00:54:41,040
a typical use case hoping some use cases

00:54:38,790 --> 00:54:45,630
here typical use case just this folding

00:54:41,040 --> 00:54:47,160
for itself is not going to work you you

00:54:45,630 --> 00:54:49,710
must do something on the packet either

00:54:47,160 --> 00:54:51,390
add or drop a villain or do anchor puddy

00:54:49,710 --> 00:54:55,560
Kapoor had a rewrite of some of them

00:54:51,390 --> 00:54:57,660
okay so other actions other actions

00:54:55,560 --> 00:54:59,820
should be applied to the packet

00:54:57,660 --> 00:55:02,430
ever before you put it into this channel

00:54:59,820 --> 00:55:04,170
or after you get out of the channel for

00:55:02,430 --> 00:55:11,880
example had every right that's a simple

00:55:04,170 --> 00:55:14,610
example so what can you do is that so

00:55:11,880 --> 00:55:16,290
far people were using Nick from Melos or

00:55:14,610 --> 00:55:18,060
other vendors let's say you have a load

00:55:16,290 --> 00:55:20,910
balancer and you have something so so

00:55:18,060 --> 00:55:22,950
the knee can do n cup or D cup or can do

00:55:20,910 --> 00:55:25,980
weeks not a villain or can do checksum

00:55:22,950 --> 00:55:30,030
okay do if if the Nick can do a hundred

00:55:25,980 --> 00:55:31,980
percent of your data pass so the only

00:55:30,030 --> 00:55:37,530
missing point to fully do it in hardware

00:55:31,980 --> 00:55:41,370
is this frauding right so so let's say

00:55:37,530 --> 00:55:45,180
you have a DDoS gateway so you have a

00:55:41,370 --> 00:55:47,250
certain rules that say what to drop so

00:55:45,180 --> 00:55:49,980
you drop 25 percent and 5 percent you

00:55:47,250 --> 00:55:52,380
don't drop so those five percent so if I

00:55:49,980 --> 00:55:54,180
went through the CPU now you can say you

00:55:52,380 --> 00:55:56,790
can after the rules all the rules that

00:55:54,180 --> 00:56:00,620
put something to drop you can put a rule

00:55:56,790 --> 00:56:02,850
in in a lower priority that says pass

00:56:00,620 --> 00:56:10,740
this is something missing our driver the

00:56:02,850 --> 00:56:14,700
priority I owe you what yes I I owe you

00:56:10,740 --> 00:56:20,730
sorry it's busy I know I'm going exactly

00:56:14,700 --> 00:56:24,450
so so so again so this is one case the

00:56:20,730 --> 00:56:27,330
DDoS or load balancer that today a lot

00:56:24,450 --> 00:56:29,130
balancer or get the packet they they add

00:56:27,330 --> 00:56:30,710
the villain and they send it or they

00:56:29,130 --> 00:56:33,630
died a villain they do had every right

00:56:30,710 --> 00:56:35,430
and they send it so if we can do we can

00:56:33,630 --> 00:56:36,960
do the the villain in the header rewrite

00:56:35,430 --> 00:56:40,950
in hardware and we have happened we do

00:56:36,960 --> 00:56:43,230
everything however ok CPU stays is

00:56:40,950 --> 00:56:46,020
practically zero usage and you have

00:56:43,230 --> 00:56:48,270
control and you control for monitoring

00:56:46,020 --> 00:56:50,430
or Jermel for billing purposes you can

00:56:48,270 --> 00:56:51,930
you have you know what's this window

00:56:50,430 --> 00:56:55,800
right because you have the flow controls

00:56:51,930 --> 00:56:57,620
ok and I'll pull in for 16 I will have

00:56:55,800 --> 00:57:01,650
it that's it

00:56:57,620 --> 00:57:03,120
questions thanks for keeping up the

00:57:01,650 --> 00:57:07,800
speed can you share the flow counters

00:57:03,120 --> 00:57:10,000
between multiple flows yes yes do you

00:57:07,800 --> 00:57:12,910
have an idea how

00:57:10,000 --> 00:57:19,809
can t see give us a hint you know in TC

00:57:12,910 --> 00:57:21,640
oh then yeah so what's what's if you see

00:57:19,809 --> 00:57:23,950
the action and the action has a counter

00:57:21,640 --> 00:57:27,039
so usually except for example or okay

00:57:23,950 --> 00:57:28,930
you mean the oh you just really actually

00:57:27,039 --> 00:57:32,680
let's see let's look on the MIR redirect

00:57:28,930 --> 00:57:34,690
right so today we open a counter it's

00:57:32,680 --> 00:57:36,490
implicitly like no one tells that we

00:57:34,690 --> 00:57:38,950
just do that yeah it has a counter by

00:57:36,490 --> 00:57:39,400
default then look but you can have two

00:57:38,950 --> 00:57:41,440
rules

00:57:39,400 --> 00:57:46,240
one much sauce IPX they are not much

00:57:41,440 --> 00:57:47,680
shows ipy action okay index three so the

00:57:46,240 --> 00:57:48,789
counter it becomes index three for the

00:57:47,680 --> 00:57:50,170
counter okay

00:57:48,789 --> 00:57:51,940
and we there's all the infrastructure

00:57:50,170 --> 00:57:54,069
for us to offload that exists yeah we

00:57:51,940 --> 00:58:00,970
know that of course it does is it that

00:57:54,069 --> 00:58:03,760
is to us in the driver geeky but yeah so

00:58:00,970 --> 00:58:06,130
yes we should i'll put it on our we our

00:58:03,760 --> 00:58:08,740
our hardware can do that hopefully the

00:58:06,130 --> 00:58:10,089
female support if you have if your

00:58:08,740 --> 00:58:12,910
hardware has a structure where you have

00:58:10,089 --> 00:58:15,700
actually stats as indexed as a table of

00:58:12,910 --> 00:58:16,750
waken yes flow can use the same counter

00:58:15,700 --> 00:58:19,059
yes we should

00:58:16,750 --> 00:58:22,500
we will support that all other vendors

00:58:19,059 --> 00:58:26,710
work like that like is their hardware

00:58:22,500 --> 00:58:28,720
starts something we do but we actually

00:58:26,710 --> 00:58:30,520
right now we're not hooking up to TC

00:58:28,720 --> 00:58:31,210
where you can say index three you know

00:58:30,520 --> 00:58:32,980
this country

00:58:31,210 --> 00:58:35,740
it'll be very easy to hook it up but you

00:58:32,980 --> 00:58:37,029
know yeah that will be very useful for

00:58:35,740 --> 00:58:38,079
billing if you have a group of people

00:58:37,029 --> 00:58:39,430
you want to build and from the same

00:58:38,079 --> 00:58:41,319
thing for example but in the example

00:58:39,430 --> 00:58:43,119
that i gave today only let's say i don't

00:58:41,319 --> 00:58:45,339
do any modification so i have a matching

00:58:43,119 --> 00:58:46,839
it then the me redirect if i want to

00:58:45,339 --> 00:58:48,579
show the counter what do i have to add

00:58:46,839 --> 00:58:50,230
another reaction so maybe for the color

00:58:48,579 --> 00:58:52,690
will give you a counter index which

00:58:50,230 --> 00:58:54,819
basically an action has an index so that

00:58:52,690 --> 00:58:57,460
becomes your counter index okay today we

00:58:54,819 --> 00:58:59,559
sort of you can explicitly say yourself

00:58:57,460 --> 00:59:02,890
i want on the counter number ten indexed

00:58:59,559 --> 00:59:04,059
end and it's okay so we're okay so

00:59:02,890 --> 00:59:05,559
i have a question for you what's the

00:59:04,059 --> 00:59:07,329
difference between this hairpin it is

00:59:05,559 --> 00:59:10,569
where you connect two ports together was

00:59:07,329 --> 00:59:12,609
this redirect that's a mirror right what

00:59:10,569 --> 00:59:14,589
do you mean by connector ports here i

00:59:12,609 --> 00:59:16,420
brought the party slide here where

00:59:14,589 --> 00:59:20,380
you're pairing the queues no no I

00:59:16,420 --> 00:59:21,630
again the you don't connect the yes it's

00:59:20,380 --> 00:59:23,400
confusing

00:59:21,630 --> 00:59:26,309
in helping you have receive on my part

00:59:23,400 --> 00:59:29,369
and then it's transmitted so you don't

00:59:26,309 --> 00:59:32,609
connect the pot okay go through the the

00:59:29,369 --> 00:59:35,039
NIC ASIC right right I can control that

00:59:32,609 --> 00:59:36,599
right from TC or from yes it will happen

00:59:35,039 --> 00:59:38,130
only people that this your role if not

00:59:36,599 --> 00:59:40,859
it's not gonna have what is the T zero

00:59:38,130 --> 00:59:42,869
me right it's an egress rule on port

00:59:40,859 --> 00:59:44,549
number one right that has matching and

00:59:42,869 --> 00:59:48,240
then mid to port number two

00:59:44,549 --> 00:59:49,799
okay smear it is the key okay I think

00:59:48,240 --> 00:59:53,279
what Jamal is saying it's the same only

00:59:49,799 --> 00:59:55,890
thing is earlier you did not support you

00:59:53,279 --> 00:59:58,349
know redirect action from upstream

00:59:55,890 --> 01:00:00,000
uplink port one to uplink for two now

00:59:58,349 --> 01:00:01,890
you will be supporting it yes that's

01:00:00,000 --> 01:00:03,480
never before that we were dealing only

01:00:01,890 --> 01:00:06,359
with a switch this is not for a switch

01:00:03,480 --> 01:00:09,750
this is Nick right it's like we're doing

01:00:06,359 --> 01:00:13,170
in until in you thirty-two over there

01:00:09,750 --> 01:00:15,930
right so I didn't get the part so you

01:00:13,170 --> 01:00:19,079
were are not doing any DMA at all it's

01:00:15,930 --> 01:00:22,319
all in the hardware yes so what do you

01:00:19,079 --> 01:00:24,779
mean by cues then the driver creates the

01:00:22,319 --> 01:00:26,460
cues we pair them and then we let you

01:00:24,779 --> 01:00:29,460
how to manage them we just create them

01:00:26,460 --> 01:00:33,240
and then we forget from them okay okay

01:00:29,460 --> 01:00:36,089
yep and I think what's very nice about

01:00:33,240 --> 01:00:39,930
that you can do it for man nav so if you

01:00:36,089 --> 01:00:42,569
have a like an embedded issue its open V

01:00:39,930 --> 01:00:45,329
switch managed hypervisor you can still

01:00:42,569 --> 01:00:47,940
do those from the virtual function so if

01:00:45,329 --> 01:00:51,630
you NFV that sees running and one two

01:00:47,940 --> 01:00:53,759
for traffic from two ports he can do

01:00:51,630 --> 01:01:00,509
that also from a via filter on a virtual

01:00:53,759 --> 01:01:02,339
function so you can this is done after

01:01:00,509 --> 01:01:04,019
all this auto steering right so

01:01:02,339 --> 01:01:05,579
yesterday we were discussing the so

01:01:04,019 --> 01:01:07,019
typically vendor to their three layers

01:01:05,579 --> 01:01:08,220
of training because vendor has this

01:01:07,019 --> 01:01:09,900
multi horse so initially you have a

01:01:08,220 --> 01:01:12,029
multi hole switch and then embedded

01:01:09,900 --> 01:01:13,859
switch and then the NIC steering so you

01:01:12,029 --> 01:01:16,170
have three levels so this is done after

01:01:13,859 --> 01:01:18,240
all levels so you can do you can do it

01:01:16,170 --> 01:01:22,880
if you have a VM that gets a real job

01:01:18,240 --> 01:01:22,880
function on each port we we allow that

01:01:25,630 --> 01:01:30,220
one more question

01:01:26,860 --> 01:01:34,480
so XTP rhetoric can do similar things

01:01:30,220 --> 01:01:39,640
right so do you see this as high

01:01:34,480 --> 01:01:48,550
performance then it doesn't go into the

01:01:39,640 --> 01:01:51,310
cpu in XDP I see higher than the PCI

01:01:48,550 --> 01:01:54,490
bandwidth because peers you don't do DMA

01:01:51,310 --> 01:01:57,700
yes okay well you're a good marketing

01:01:54,490 --> 01:02:00,310
guy yes what Ronnie said that in a

01:01:57,700 --> 01:02:04,390
certain case because Nick typically has

01:02:00,310 --> 01:02:06,970
a Cassius on the ASIC right so if it

01:02:04,390 --> 01:02:09,640
happens that all those all this stuff is

01:02:06,970 --> 01:02:12,580
cached when packets goes they don't go

01:02:09,640 --> 01:02:14,050
through the PCI but this is this is more

01:02:12,580 --> 01:02:16,270
of a marketing feature because it has to

01:02:14,050 --> 01:02:17,860
be very what I'll have to get all the

01:02:16,270 --> 01:02:21,340
secret sauce from Ronnie well it's not a

01:02:17,860 --> 01:02:21,790
secret it's a it's a I just can't I I

01:02:21,340 --> 01:02:37,650
don't

01:02:21,790 --> 01:02:39,880
ok ok hi my name is Angela singer Jane

01:02:37,650 --> 01:02:42,700
the stuff that I'm presenting right now

01:02:39,880 --> 01:02:45,100
is on behalf of my colleagues it's not

01:02:42,700 --> 01:02:46,810
my work so you know pardon me if I can't

01:02:45,100 --> 01:02:48,640
answer a lot of the questions because I

01:02:46,810 --> 01:02:50,800
don't know the deep dive I'll try my

01:02:48,640 --> 01:02:53,970
best they couldn't make it here and

01:02:50,800 --> 01:02:53,970
that's why I'm presenting it for them

01:03:02,760 --> 01:03:11,710
sure okay so this is the work that has

01:03:08,559 --> 01:03:14,349
already gone into the kernel there were

01:03:11,710 --> 01:03:17,230
some changes that were done you can keep

01:03:14,349 --> 01:03:20,470
our scheduler to get some more hardware

01:03:17,230 --> 01:03:22,750
offload I just want to point out that

01:03:20,470 --> 01:03:24,220
the earlier there was a hardware

01:03:22,750 --> 01:03:27,369
offshore support that was done by John

01:03:24,220 --> 01:03:29,500
for M Capri oh you know for the TC

01:03:27,369 --> 01:03:33,640
offload this is just building a little

01:03:29,500 --> 01:03:35,349
bit more on it so we are offloading you

01:03:33,640 --> 01:03:37,329
know beyond the TC the Q configuration

01:03:35,349 --> 01:03:42,900
and bandwidth rate limits into the

01:03:37,329 --> 01:03:46,359
hardware with this change and the so

01:03:42,900 --> 01:03:51,069
what we did as we added another mode for

01:03:46,359 --> 01:03:54,670
the mq prior QX q disk and we call it

01:03:51,069 --> 01:03:58,150
the channel mode the default mode is d

01:03:54,670 --> 01:04:00,369
CB which was you know done earlier and

01:03:58,150 --> 01:04:06,490
this is what we calling it a channel

01:04:00,369 --> 01:04:09,369
mode we also added a shaper option for Q

01:04:06,490 --> 01:04:12,339
s attributes and what this gives you is

01:04:09,369 --> 01:04:16,089
a configuration from min and Max bath

01:04:12,339 --> 01:04:18,940
bandwidth rate limit per TC right now

01:04:16,089 --> 01:04:22,680
our hardware I mean our driver is just

01:04:18,940 --> 01:04:22,680
exposing the max bandwidth rate limit

01:04:23,910 --> 01:04:30,400
okay so this slight kind of you know

01:04:27,670 --> 01:04:33,579
describes the command-line arguments

01:04:30,400 --> 01:04:37,170
that are new that are added that are

01:04:33,579 --> 01:04:40,380
getting offloaded so there was already

01:04:37,170 --> 01:04:42,789
you know the number of TCS and the

01:04:40,380 --> 01:04:46,480
priority duty see map kind of stuff that

01:04:42,789 --> 01:04:51,609
was present the new stuff that got added

01:04:46,480 --> 01:04:54,730
is with the hardware offload which is on

01:04:51,609 --> 01:04:58,299
here in Hardware off hood being one we

01:04:54,730 --> 01:05:03,039
added a mode channel and then a new

01:04:58,299 --> 01:05:08,650
option for a shaper which right now is

01:05:03,039 --> 01:05:09,980
for bandwidth rate limits and this one

01:05:08,650 --> 01:05:13,460
is

01:05:09,980 --> 01:05:16,460
you know it kind of describes that you

01:05:13,460 --> 01:05:18,230
can have the min and Max rate actually

01:05:16,460 --> 01:05:22,250
it's never a min rate it's the

01:05:18,230 --> 01:05:23,690
guaranteed rate and the max rate and so

01:05:22,250 --> 01:05:25,130
I think we should change that name

01:05:23,690 --> 01:05:30,200
instead of the mean it should be the

01:05:25,130 --> 01:05:33,670
guaranteed and then for now we are

01:05:30,200 --> 01:05:33,670
supporting only the max rate offered

01:05:34,300 --> 01:05:42,970
what else that kind of shows after you

01:05:39,080 --> 01:05:42,970
add that rule you know the output of it

01:05:47,710 --> 01:05:55,340
this was some cleanup that went into

01:05:51,410 --> 01:05:57,590
align I believe the MQ and the MP prio Q

01:05:55,340 --> 01:05:59,930
disk where the interpreter of the class

01:05:57,590 --> 01:06:04,580
ID was or the layout of it was different

01:05:59,930 --> 01:06:08,480
and so with this change you know we are

01:06:04,580 --> 01:06:11,660
reserving FF e 0 to FF EF block for

01:06:08,480 --> 01:06:17,060
class ID for you know the hardware key

01:06:11,660 --> 01:06:20,300
C's for all of the q disk whereas 1 to F

01:06:17,060 --> 01:06:27,200
F DF are for the the physical computers

01:06:20,300 --> 01:06:34,280
that are mapped to txq that's pretty

01:06:27,200 --> 01:06:38,810
much what changing example okay sorry

01:06:34,280 --> 01:06:43,550
yeah and this was we added another

01:06:38,810 --> 01:06:47,180
action on the ingress classifier this is

01:06:43,550 --> 01:06:52,150
basically to forward a flow to a given

01:06:47,180 --> 01:06:55,180
TC rather than to a court or to

01:06:52,150 --> 01:06:57,580
you know which was which is the main

01:06:55,180 --> 01:07:00,280
artery direct action but this is this is

01:06:57,580 --> 01:07:02,340
instead of forwarding it to a interface

01:07:00,280 --> 01:07:06,820
it is actually forwarding it to a

01:07:02,340 --> 01:07:10,060
traffic class in in the hardware this

01:07:06,820 --> 01:07:11,620
but all those confuse me so I I think so

01:07:10,060 --> 01:07:13,960
if you go back to your other slide here

01:07:11,620 --> 01:07:15,340
that's that's like really nasty syntax

01:07:13,960 --> 01:07:19,780
okay I've always complained about this

01:07:15,340 --> 01:07:26,230
but see this thing here like I think

01:07:19,780 --> 01:07:30,520
this works that thing there I mean look

01:07:26,230 --> 01:07:33,670
at that what what is that right so I am

01:07:30,520 --> 01:07:35,140
complaining about it right and so and

01:07:33,670 --> 01:07:36,610
people blame me for a lot of this stuff

01:07:35,140 --> 01:07:45,640
I had nothing to do that I think this is

01:07:36,610 --> 01:07:48,490
Alex Dyck that did this and so now when

01:07:45,640 --> 01:07:49,930
I see this oh this is like eye candy

01:07:48,490 --> 01:07:56,770
right look at that

01:07:49,930 --> 01:08:04,270
it's Hardwick class number one right is

01:07:56,770 --> 01:08:08,830
any hope to fix the other stuff yeah I

01:08:04,270 --> 01:08:11,740
mean if I go back basically the the cue

01:08:08,830 --> 01:08:14,230
stuff over there it's number of cues at

01:08:11,740 --> 01:08:16,180
offset zero so it's four cues at offset

01:08:14,230 --> 01:08:21,910
zero and then another four cues that

01:08:16,180 --> 01:08:22,510
offset you're taking credit for it okay

01:08:21,910 --> 01:08:25,390
yeah

01:08:22,510 --> 01:08:31,230
we can beat up on him he's here so come

01:08:25,390 --> 01:08:35,020
on so what is offset I mean offset from

01:08:31,230 --> 01:08:37,299
so what this is saying is say you have

01:08:35,020 --> 01:08:39,970
eight cues in the hardware Hugh's right

01:08:37,299 --> 01:08:43,480
the first four queue is starting at q0

01:08:39,970 --> 01:08:47,080
to TC 0 okay so and the next fork utah

01:08:43,480 --> 01:08:49,210
starting it at offset for no I admit a

01:08:47,080 --> 01:08:50,920
have used MK price very useful and I

01:08:49,210 --> 01:08:52,150
when I was trying to use it I finally

01:08:50,920 --> 01:08:53,620
figure this out it's just I don't know

01:08:52,150 --> 01:08:55,750
how a human gets to understand this

01:08:53,620 --> 01:08:58,240
stuff but okay but you know most of

01:08:55,750 --> 01:08:59,850
Linux is very hot I sometimes thing is

01:08:58,240 --> 01:09:06,840
what's not bitten by humans

01:08:59,850 --> 01:09:08,490
by going and watching I yeah I had to go

01:09:06,840 --> 01:09:11,310
back and watch Jon's

01:09:08,490 --> 01:09:13,440
yeah presentations on it and read

01:09:11,310 --> 01:09:15,600
through his slides to figure it out he

01:09:13,440 --> 01:09:15,870
has a really well-written man pitch for

01:09:15,600 --> 01:09:18,690
it

01:09:15,870 --> 01:09:25,140
Jamal you should read it the man page

01:09:18,690 --> 01:09:28,140
was okay but we we use MQ prio for the

01:09:25,140 --> 01:09:36,090
the TSN stuff to to direct to traffic

01:09:28,140 --> 01:09:41,790
classes if usually but I mean that thing

01:09:36,090 --> 01:09:43,859
is another piece of okay move forward so

01:09:41,790 --> 01:09:46,859
yeah so this is the addition on the

01:09:43,859 --> 01:09:49,950
ingress classifier which is basically

01:09:46,859 --> 01:09:53,460
you know match on the example here is

01:09:49,950 --> 01:09:56,100
match on destination IP X and UDP port Y

01:09:53,460 --> 01:09:58,260
and skip the software add the rule in

01:09:56,100 --> 01:10:01,650
the hardware and direct it to TC one and

01:09:58,260 --> 01:10:04,320
then when it's in TC one and we kind of

01:10:01,650 --> 01:10:08,370
talked about TC one has four Q's and

01:10:04,320 --> 01:10:19,200
then you know RSS is used to kind of

01:10:08,370 --> 01:10:21,780
pick the right Q so would have been nice

01:10:19,200 --> 01:10:24,240
because most people don't understand

01:10:21,780 --> 01:10:26,340
this when you say HT w TC you think it's

01:10:24,240 --> 01:10:29,700
a Q but actually it's a class of

01:10:26,340 --> 01:10:32,130
classics right yeah yeah so that's a

01:10:29,700 --> 01:10:38,520
good feedback I'll probably add a slide

01:10:32,130 --> 01:10:40,680
and send the updated slice to you okay

01:10:38,520 --> 01:10:44,240
so the next work that I'm talking about

01:10:40,680 --> 01:10:48,690
as future extensions that we want to do

01:10:44,240 --> 01:10:51,150
to TC this work is with my colleague

01:10:48,690 --> 01:10:53,390
Manistee she is actually watching us

01:10:51,150 --> 01:10:53,390
right now

01:10:57,290 --> 01:11:03,090
so what we want to do is we want to be

01:11:01,140 --> 01:11:06,330
able to program the hardware T cam

01:11:03,090 --> 01:11:07,890
using TC the kind of things that the

01:11:06,330 --> 01:11:11,640
hardware T camp can do is your longest

01:11:07,890 --> 01:11:18,710
prefix match and you arrange matches for

01:11:11,640 --> 01:11:21,600
like say ports or whatever so what we

01:11:18,710 --> 01:11:23,670
you know recently and I don't know who

01:11:21,600 --> 01:11:26,700
added it but recently somebody added the

01:11:23,670 --> 01:11:29,370
priority field for that we can use for

01:11:26,700 --> 01:11:31,140
the SLO sort so if you're doing the

01:11:29,370 --> 01:11:33,480
longest prefix prefix match

01:11:31,140 --> 01:11:36,300
you basically have to give a hint to the

01:11:33,480 --> 01:11:38,130
hardware which one is the highest

01:11:36,300 --> 01:11:40,740
priority rule so it puts it in the right

01:11:38,130 --> 01:11:43,800
order in the TK and that priority will

01:11:40,740 --> 01:11:46,770
help us do that so that you put like the

01:11:43,800 --> 01:11:49,170
highest result rule on top and then

01:11:46,770 --> 01:11:52,500
lower resolution rules at the bottom so

01:11:49,170 --> 01:11:53,940
that so so the TC already put supports

01:11:52,500 --> 01:11:55,530
priorities right it's using when you

01:11:53,940 --> 01:11:58,680
said update it means your hardware or

01:11:55,530 --> 01:12:00,780
the infrastructure yes so so now we will

01:11:58,680 --> 01:12:03,930
pass that information down into the

01:12:00,780 --> 01:12:05,640
driver so that we can interpret it and

01:12:03,930 --> 01:12:07,710
apply the rule correctly in the hard way

01:12:05,640 --> 01:12:14,250
okay

01:12:07,710 --> 01:12:17,460
and then we the usage for adding these

01:12:14,250 --> 01:12:19,440
hooks is for firewall offload and for

01:12:17,460 --> 01:12:25,890
via router of course that heavily used

01:12:19,440 --> 01:12:31,020
LPM y'all decrements and stuff like that

01:12:25,890 --> 01:12:33,380
right with P edit maybe sure maybe not

01:12:31,020 --> 01:12:36,330
in maybe not right now anyway

01:12:33,380 --> 01:12:41,670
range matches are what exactly something

01:12:36,330 --> 01:12:44,580
in the middle okay thanks yeah so the

01:12:41,670 --> 01:12:47,460
range matches right so they're two ways

01:12:44,580 --> 01:12:49,830
to look at it I'll go with the lower one

01:12:47,460 --> 01:12:52,590
it's easier to read so the port ranges

01:12:49,830 --> 01:12:55,490
right so you basically want to match you

01:12:52,590 --> 01:12:59,160
you have a single rule which says if

01:12:55,490 --> 01:13:00,810
destination port is in any range 105 to

01:12:59,160 --> 01:13:03,480
800 to any random range

01:13:00,810 --> 01:13:06,300
you basically have some action redirect

01:13:03,480 --> 01:13:08,560
or draw or whatever so that's and I

01:13:06,300 --> 01:13:13,090
think that the syntax is wrong on

01:13:08,560 --> 01:13:16,540
Lauren I haven't fixed it so that's the

01:13:13,090 --> 01:13:17,950
range match that we want to do and so we

01:13:16,540 --> 01:13:19,810
will have to make a little change and I

01:13:17,950 --> 01:13:24,330
think you're okay with that Jamal okay

01:13:19,810 --> 01:13:26,860
and the one that is on top which is four

01:13:24,330 --> 01:13:29,470
which doesn't really require any changes

01:13:26,860 --> 01:13:31,540
other than that when we do the skip

01:13:29,470 --> 01:13:41,830
software we get the priority in in the

01:13:31,540 --> 01:13:42,670
driver what do you think of that what do

01:13:41,830 --> 01:13:45,000
you have some patches

01:13:42,670 --> 01:13:48,820
I would like to definitely see them

01:13:45,000 --> 01:13:50,830
maybe three months or so okay

01:13:48,820 --> 01:13:56,950
I'm just curious have you how you are

01:13:50,830 --> 01:14:02,320
going to do the ranges yeah so let me

01:13:56,950 --> 01:14:03,670
first okay so I think you need to it

01:14:02,320 --> 01:14:06,070
depends if it's a power of two or not

01:14:03,670 --> 01:14:11,920
you may get away with one mask or you

01:14:06,070 --> 01:14:14,140
may need to some control planes just use

01:14:11,920 --> 01:14:16,000
masks they play with bit field so they

01:14:14,140 --> 01:14:19,780
get they managed to avoid ranges and use

01:14:16,000 --> 01:14:22,090
some yes and it's very it would be very

01:14:19,780 --> 01:14:24,850
natural for instance OVS they don't use

01:14:22,090 --> 01:14:27,280
range they would use they would know but

01:14:24,850 --> 01:14:31,330
but like the contrary router doesn't use

01:14:27,280 --> 01:14:37,510
masks they want to use a range yeah yeah

01:14:31,330 --> 01:14:40,300
so so I mean it's definitely a useful

01:14:37,510 --> 01:14:43,570
human interface it makes a lot of sense

01:14:40,300 --> 01:14:45,400
to see that then right you you you

01:14:43,570 --> 01:14:48,310
colored the IP and the mask in the

01:14:45,400 --> 01:14:50,110
higher but the mask exists it just maybe

01:14:48,310 --> 01:14:56,740
doesn't exist in TC tool but the general

01:14:50,110 --> 01:14:57,310
API suppose that red is for what doesn't

01:14:56,740 --> 01:14:59,140
exist

01:14:57,310 --> 01:15:01,300
oh so you know that they must excuse me

01:14:59,140 --> 01:15:04,780
the purple one exists i we're just going

01:15:01,300 --> 01:15:07,240
to use it in a way that you could supply

01:15:04,780 --> 01:15:11,410
an IP address match with different masks

01:15:07,240 --> 01:15:14,200
per rule yes of course you can do that

01:15:11,410 --> 01:15:17,080
today i know that in software you can do

01:15:14,200 --> 01:15:18,520
that in hardware you can't do it so now

01:15:17,080 --> 01:15:20,710
you can offload that in the hardware

01:15:18,520 --> 01:15:21,610
where you can have a different mask can

01:15:20,710 --> 01:15:29,200
you do that on

01:15:21,610 --> 01:15:31,600
with different masks so for any so no no

01:15:29,200 --> 01:15:36,100
no no no al-qaeda arranged right which

01:15:31,600 --> 01:15:41,260
is no no the first one you you need a

01:15:36,100 --> 01:15:42,460
tea camp for that oh okay

01:15:41,260 --> 01:15:44,530
oh they're clever they don't want to

01:15:42,460 --> 01:15:47,260
tell you just keep going keep going

01:15:44,530 --> 01:15:50,650
so you support a mask for a rule even if

01:15:47,260 --> 01:15:52,450
it's the same packet type yes okay yeah

01:15:50,650 --> 01:15:54,810
so no we don't support it we will be

01:15:52,450 --> 01:16:02,380
supporting this you know starting our

01:15:54,810 --> 01:16:12,610
next product so okay so that's pretty

01:16:02,380 --> 01:16:13,150
much what we have thank you okay thank

01:16:12,610 --> 01:16:18,880
you

01:16:13,150 --> 01:16:22,930
Thanks okay so I'm Mari ller

01:16:18,880 --> 01:16:25,090
I work for KVM and I maintain the QED

01:16:22,930 --> 01:16:29,590
QED drivers and also the Phoenix wax

01:16:25,090 --> 01:16:33,360
drivers but this is about qgn QED and we

01:16:29,590 --> 01:16:38,380
recently added Mac villain and TC alpha

01:16:33,360 --> 01:16:39,460
and specifically the the problem

01:16:38,380 --> 01:16:40,720
statement in the use case we were

01:16:39,460 --> 01:16:44,260
working on was in a container

01:16:40,720 --> 01:16:47,470
environment although that's just really

01:16:44,260 --> 01:16:49,780
the motivation so trying to route

01:16:47,470 --> 01:16:55,480
traffic to specific containers based on

01:16:49,780 --> 01:16:59,350
the flow and so we were using our 25 g4

01:16:55,480 --> 01:17:02,230
port device and the requirements that we

01:16:59,350 --> 01:17:05,790
were trying to achieve for that problem

01:17:02,230 --> 01:17:09,010
was 15 million packets per second on

01:17:05,790 --> 01:17:13,230
small packets across all flows so no

01:17:09,010 --> 01:17:17,170
caching and we're looking to get 15k

01:17:13,230 --> 01:17:22,780
flow arrival rate and 16 million flows

01:17:17,170 --> 01:17:26,640
and v-lin pushpop swap other vendors is

01:17:22,780 --> 01:17:26,640
that those numbers

01:17:26,650 --> 01:17:30,969
look at the numbers they do you guys

01:17:28,869 --> 01:17:36,190
think they're within your reasonable

01:17:30,969 --> 01:17:42,760
range 16 million flowers 15 million

01:17:36,190 --> 01:17:45,760
packets per second yeah yeah so probably

01:17:42,760 --> 01:17:48,010
I mean if I'm not mistaken so the the

01:17:45,760 --> 01:17:49,090
PPS is pretty there's no problem for I

01:17:48,010 --> 01:17:52,570
think for most vendors and the

01:17:49,090 --> 01:17:54,670
higher-end mixed flow rifle rate is

01:17:52,570 --> 01:17:58,690
actually so one you had a whole

01:17:54,670 --> 01:18:00,520
presentation of that right so and the

01:17:58,690 --> 01:18:02,230
real problem is the kernel right and the

01:18:00,520 --> 01:18:05,650
it's not the hardware right so hardware

01:18:02,230 --> 01:18:06,880
can can go much faster than that and 16

01:18:05,650 --> 01:18:11,860
million is probably a good number I

01:18:06,880 --> 01:18:16,119
think compared to most vendors okay so

01:18:11,860 --> 01:18:18,580
let's go for it so I guess everybody

01:18:16,119 --> 01:18:21,040
knows this the non awful flow the packet

01:18:18,580 --> 01:18:25,030
we have to traverse a lot of stages

01:18:21,040 --> 01:18:26,920
until it reaches the basically the

01:18:25,030 --> 01:18:28,810
container right so we're going to a Mac

01:18:26,920 --> 01:18:31,619
heel and to represent us into the in the

01:18:28,810 --> 01:18:34,960
container and with non offload so

01:18:31,619 --> 01:18:38,349
numbers were very poor one point six

01:18:34,960 --> 01:18:41,290
mega pack is per second and the flow

01:18:38,349 --> 01:18:45,489
rivalry was 4k per sec this is not

01:18:41,290 --> 01:18:49,030
without any off look right and with

01:18:45,489 --> 01:18:50,980
offload so were able to reach 17.2 mega

01:18:49,030 --> 01:18:52,330
packets per second the floor rifle rate

01:18:50,980 --> 01:18:53,889
was still limited basically by the

01:18:52,330 --> 01:18:57,389
kernel and I think we might have been

01:18:53,889 --> 01:18:59,619
working just prior to the fixes that

01:18:57,389 --> 01:19:01,810
when you was describing in his session

01:18:59,619 --> 01:19:05,260
so we're still being limited by the

01:19:01,810 --> 01:19:06,639
kernel at the 4k when we tried like

01:19:05,260 --> 01:19:08,830
hacking around that and seeing just how

01:19:06,639 --> 01:19:13,239
fast we could go so we could go to like

01:19:08,830 --> 01:19:14,560
half a million per second new which

01:19:13,239 --> 01:19:16,510
flows were gonna do and just did it from

01:19:14,560 --> 01:19:19,659
the hardware and ago that's the speed we

01:19:16,510 --> 01:19:20,980
can reach so we could definitely benefit

01:19:19,659 --> 01:19:22,239
from what you guys did and we're

01:19:20,980 --> 01:19:24,210
actually also looking forward to the

01:19:22,239 --> 01:19:26,739
future work you are describing and

01:19:24,210 --> 01:19:29,610
offloading millions of flows a second

01:19:26,739 --> 01:19:29,610
right that's relevant for us

01:19:32,900 --> 01:19:37,470
right so a little bit in the syntax I

01:19:35,520 --> 01:19:39,000
think we've all seen a lot of syntax

01:19:37,470 --> 01:19:41,160
here and there's no I'm not presenting

01:19:39,000 --> 01:19:44,280
anything new right just what I was using

01:19:41,160 --> 01:19:47,640
so redirecting this case across

01:19:44,280 --> 01:19:50,880
according to a destination IP address to

01:19:47,640 --> 01:19:53,220
reach a specific Mac VLAN offload device

01:19:50,880 --> 01:19:54,450
so maybe I'll save another sentence

01:19:53,220 --> 01:19:57,690
sentence of that just to explain what

01:19:54,450 --> 01:20:00,180
what I'm doing so where we are we

01:19:57,690 --> 01:20:04,820
implemented TCR float and Mac VLAN

01:20:00,180 --> 01:20:08,400
offload so we'll have a target device to

01:20:04,820 --> 01:20:12,030
redirect the traffic to and so how many

01:20:08,400 --> 01:20:14,190
mark VLANs can you offload do you

01:20:12,030 --> 01:20:18,570
remember so the limit there is the

01:20:14,190 --> 01:20:23,760
amount of queues we test I think so far

01:20:18,570 --> 01:20:25,950
we've tested with 128 oh yeah let's

01:20:23,760 --> 01:20:28,190
listen to aerial so because I'm gonna

01:20:25,950 --> 01:20:30,780
ask you the same question alright so

01:20:28,190 --> 01:20:37,650
right see I'm gonna do the same thing to

01:20:30,780 --> 01:20:39,450
you are you listening or ok ok so how

01:20:37,650 --> 01:20:43,020
many are real I'll already transmitted

01:20:39,450 --> 01:20:45,540
right yeah so I was saying that in the

01:20:43,020 --> 01:20:48,300
solution here were creating offloaded

01:20:45,540 --> 01:20:52,140
Mac VLAN devices to be are represented

01:20:48,300 --> 01:21:02,670
to the net devices we are redirecting

01:20:52,140 --> 01:21:04,440
the traffic to it's being done in

01:21:02,670 --> 01:21:07,800
hardware yes but this is this is this

01:21:04,440 --> 01:21:09,840
model does not use switching with switch

01:21:07,800 --> 01:21:13,770
ports there's no switch ports here all

01:21:09,840 --> 01:21:15,870
right ok so Jamal was asking how many we

01:21:13,770 --> 01:21:19,080
could do so I think right now the number

01:21:15,870 --> 01:21:21,570
is 128 150 are you using SRV or

01:21:19,080 --> 01:21:23,400
something for these or why is it 128 I

01:21:21,570 --> 01:21:28,620
also have the same problem with I 40 by

01:21:23,400 --> 01:21:32,220
the way 768 so you just go shopping here

01:21:28,620 --> 01:21:34,680
right no so basically I want to know

01:21:32,220 --> 01:21:36,150
what's going on right so this is

01:21:34,680 --> 01:21:38,010
basically limited to the amount of Q's

01:21:36,150 --> 01:21:39,540
right the amount of Q's you can do and

01:21:38,010 --> 01:21:41,490
right now it's okay 28 and actually I

01:21:39,540 --> 01:21:42,490
think we could probably push that we can

01:21:41,490 --> 01:21:48,590
do more

01:21:42,490 --> 01:21:54,470
okay a bad pocket keep going I'm sorry

01:21:48,590 --> 01:22:02,690
okay pay attention okay right so that's

01:21:54,470 --> 01:22:06,560
the syntax a little bit sorry so first I

01:22:02,690 --> 01:22:10,220
do you see ETH tool and not TC what's a

01:22:06,560 --> 01:22:12,800
question you're using ETH tool those are

01:22:10,220 --> 01:22:16,100
that you can say so but when you're

01:22:12,800 --> 01:22:19,730
using TC when you I don't have to drop

01:22:16,100 --> 01:22:22,790
traffic from specific Mach villain how

01:22:19,730 --> 01:22:24,290
can do that that would be a different

01:22:22,790 --> 01:22:26,480
action right so here what i'm doing here

01:22:24,290 --> 01:22:28,790
is redirecting all the traffic that has

01:22:26,480 --> 01:22:31,550
a very specific destination IP to the

01:22:28,790 --> 01:22:33,230
macula okay and when you want to do the

01:22:31,550 --> 01:22:35,420
opposite so that would be a different

01:22:33,230 --> 01:22:37,490
rule right no but how you can mention

01:22:35,420 --> 01:22:39,890
you will mention from the mock villain

01:22:37,490 --> 01:22:41,360
No so all of the configuration is being

01:22:39,890 --> 01:22:44,510
done in the base device right the Mac

01:22:41,360 --> 01:22:46,040
VLANs are the targets okay so that's

01:22:44,510 --> 01:22:47,330
what actually receive a traffic actually

01:22:46,040 --> 01:22:49,910
that's a very good question because

01:22:47,330 --> 01:22:53,050
typically Mac villains sorry my villains

01:22:49,910 --> 01:22:54,860
you don't it's based on market risk

01:22:53,050 --> 01:22:58,040
first debate is just sitting there

01:22:54,860 --> 01:23:05,980
tweeting or something first event right

01:22:58,040 --> 01:23:08,720
do you need to okay so the question is

01:23:05,980 --> 01:23:11,270
Mac villains have basically spaced on

01:23:08,720 --> 01:23:14,930
the Mac and you can optionally provide a

01:23:11,270 --> 01:23:24,260
villain correct it's not you select just

01:23:14,930 --> 01:23:26,030
certain things so so okay so the the way

01:23:24,260 --> 01:23:30,590
Mac these things work is they have a Mac

01:23:26,030 --> 01:23:32,630
so they are an l2 Mac you can receive

01:23:30,590 --> 01:23:34,430
traffic or transmit traffic and when you

01:23:32,630 --> 01:23:36,410
transmit traffic it should probably have

01:23:34,430 --> 01:23:39,140
the l2 Mac that's assigned to the net

01:23:36,410 --> 01:23:41,780
device but nothing stops the hardware

01:23:39,140 --> 01:23:44,590
from forwarding any traffic at once to

01:23:41,780 --> 01:23:44,590
those net devices

01:23:44,930 --> 01:23:50,820
the uber doesn't care you put a TC flow

01:23:48,660 --> 01:23:52,050
rule use TC and program the hardware use

01:23:50,820 --> 01:23:54,480
flow director and program the hardware

01:23:52,050 --> 01:23:57,690
and it'll put whatever traffic you

01:23:54,480 --> 01:24:01,230
filter own into that Mac as long as your

01:23:57,690 --> 01:24:02,489
system can handle that should work it

01:24:01,230 --> 01:24:04,260
just looks counterintuitive right

01:24:02,489 --> 01:24:06,120
because typically I would create a mock

01:24:04,260 --> 01:24:08,580
VLAN I'll give it an IP address

01:24:06,120 --> 01:24:11,130
perhaps go out magically things just

01:24:08,580 --> 01:24:12,420
show up on that if if I prove move the

01:24:11,130 --> 01:24:17,790
container they might feel into a

01:24:12,420 --> 01:24:23,520
container right that's the same thing or

01:24:17,790 --> 01:24:25,170
or you hear you what's what the mic will

01:24:23,520 --> 01:24:28,350
interface is just a virtual interfaces

01:24:25,170 --> 01:24:30,590
like area for a PS and he's adding a TC

01:24:28,350 --> 01:24:32,940
rule on top of that Manila interface I

01:24:30,590 --> 01:24:34,170
mean it's typically about you create a

01:24:32,940 --> 01:24:36,239
mock villain then you move it to a

01:24:34,170 --> 01:24:38,220
container that's that's the use cases

01:24:36,239 --> 01:24:40,170
normally I you have and then I I'll go

01:24:38,220 --> 01:24:42,180
in the container and attach an IP

01:24:40,170 --> 01:24:47,910
address to the to the what shows up

01:24:42,180 --> 01:24:52,620
there and then I would add rules inside

01:24:47,910 --> 01:24:54,660
the container for specific traffic not

01:24:52,620 --> 01:24:58,010
to redirect your Mac VLAN but maybe I'll

01:24:54,660 --> 01:25:00,570
drop or our account so this looked

01:24:58,010 --> 01:25:02,070
different from what I'm used to

01:25:00,570 --> 01:25:06,239
but you're talking about a Mac VLAN

01:25:02,070 --> 01:25:09,090
awful device yes right so when you when

01:25:06,239 --> 01:25:10,980
you're adding the IP you already get

01:25:09,090 --> 01:25:11,370
redirect automatically that's what

01:25:10,980 --> 01:25:12,870
you're saying

01:25:11,370 --> 01:25:14,670
the traffic just starts up here

01:25:12,870 --> 01:25:20,580
appearing there because herbs will go

01:25:14,670 --> 01:25:23,100
out McCann explicit redirection okay all

01:25:20,580 --> 01:25:31,820
right all right I don't distract this is

01:25:23,100 --> 01:25:33,989
I'm supposed to be the timekeeping on so

01:25:31,820 --> 01:25:36,270
you said that you don't have any

01:25:33,989 --> 01:25:39,720
representers so if you have this Mac

01:25:36,270 --> 01:25:43,170
villain device and the ability to the

01:25:39,720 --> 01:25:45,120
container how can you add this rule so

01:25:43,170 --> 01:25:47,660
this rules configured fire right before

01:25:45,120 --> 01:25:50,010
the that's not good

01:25:47,660 --> 01:25:52,489
so that was the requirement for this

01:25:50,010 --> 01:25:54,800
project right that's what they wanted so

01:25:52,489 --> 01:26:04,249
you configure a rule you use the device

01:25:54,800 --> 01:26:05,780
which after disappears from that's why

01:26:04,249 --> 01:26:08,900
this how I think this is really wrong

01:26:05,780 --> 01:26:10,760
like so this would be good but if you're

01:26:08,900 --> 01:26:11,809
not putting it in the container right if

01:26:10,760 --> 01:26:15,349
you're just creating good making my

01:26:11,809 --> 01:26:17,150
device yes but it still is wrong because

01:26:15,349 --> 01:26:19,550
it doesn't work for all the use cases

01:26:17,150 --> 01:26:21,320
so yeah the transmit side is not working

01:26:19,550 --> 01:26:23,960
because you can't specify this from

01:26:21,320 --> 01:26:26,840
specific one villain you want just to

01:26:23,960 --> 01:26:28,610
allow to drop the specific traffic you

01:26:26,840 --> 01:26:34,249
don't want to allow for mark villain

01:26:28,610 --> 01:26:42,579
five to send HTTP packets so you don't

01:26:34,249 --> 01:26:42,579
have an ability to configure yeah right

01:26:43,389 --> 01:26:48,260
that's that's the reason why we don't

01:26:46,280 --> 01:26:50,480
want to extend it we want to go to

01:26:48,260 --> 01:26:52,010
another model so I could answer every

01:26:50,480 --> 01:26:53,719
model so the plan is to kill mock

01:26:52,010 --> 01:26:59,590
villain is that the consensus no not to

01:26:53,719 --> 01:26:59,590
kill but not to extend I love my villain

01:27:04,119 --> 01:27:08,480
so in that case would you accelerate

01:27:06,650 --> 01:27:11,480
your Veatch pair or you would actually

01:27:08,480 --> 01:27:13,429
accelerate your Mac VLAN this you you

01:27:11,480 --> 01:27:16,010
could have exploded your V's pair right

01:27:13,429 --> 01:27:18,980
then you get a representer so if you had

01:27:16,010 --> 01:27:20,840
a represent so one half of the V's what

01:27:18,980 --> 01:27:22,099
one half of the Vieth is in is basically

01:27:20,840 --> 01:27:27,949
hanging off the hardware and the other

01:27:22,099 --> 01:27:30,050
is gonna be in the container yeah yeah I

01:27:27,949 --> 01:27:32,230
just haven't seen that use case I know

01:27:30,050 --> 01:27:36,489
that is his custom I wanted this but

01:27:32,230 --> 01:27:36,489
yeah okay okay

01:27:38,469 --> 01:27:43,340
it's freeze but don't you agree that

01:27:40,699 --> 01:27:45,260
what Jewish pointed out it's it's if you

01:27:43,340 --> 01:27:48,079
if you set a rule and then the device

01:27:45,260 --> 01:27:50,659
disappears it's it's not good well you

01:27:48,079 --> 01:27:53,809
would get the same thing on a VF if you

01:27:50,659 --> 01:27:55,789
if you configure the rule no there is

01:27:53,809 --> 01:27:57,440
the representor there's no at some point

01:27:55,789 --> 01:27:59,449
interpreted you rule to a VF and maybe

01:27:57,440 --> 01:28:03,909
it gets in but it was a it's wrong the

01:27:59,449 --> 01:28:03,909
Dave didn't knock that no but you could

01:28:08,150 --> 01:28:12,960
but but I'm not sure it's correct to let

01:28:11,040 --> 01:28:15,900
someone upload it in their driver is if

01:28:12,960 --> 01:28:21,150
it's wrong no I'm the timekeeper now

01:28:15,900 --> 01:28:24,180
let's move on so be that as it may a

01:28:21,150 --> 01:28:25,800
little bit of lessons learned from our

01:28:24,180 --> 01:28:27,960
experience in implementing these to our

01:28:25,800 --> 01:28:30,600
thoughts from so for the Mac VLAN

01:28:27,960 --> 01:28:33,710
offload most of what we've done was

01:28:30,600 --> 01:28:36,660
refactor the load and unload flows

01:28:33,710 --> 01:28:38,730
adding some ifs there and whether we are

01:28:36,660 --> 01:28:40,380
now doing so we're using the same load

01:28:38,730 --> 01:28:44,489
flow and we're creating a Mac VLAN

01:28:40,380 --> 01:28:45,810
device but unlimited parts of it

01:28:44,489 --> 01:28:47,850
somewhat similar to what we've already

01:28:45,810 --> 01:28:49,140
have 4vf snps right that it's the same

01:28:47,850 --> 01:28:51,900
load flow doing things a little bit

01:28:49,140 --> 01:28:55,340
different so now one more mode for that

01:28:51,900 --> 01:28:58,830
flow so all in all was a rather easy

01:28:55,340 --> 01:29:01,620
offload to implement a couple of things

01:28:58,830 --> 01:29:04,950
that we noticed and I'd like to supply

01:29:01,620 --> 01:29:08,610
feedback on is one is the rx mode

01:29:04,950 --> 01:29:10,620
classification in deal which basically

01:29:08,610 --> 01:29:12,300
has a generic implementation than the

01:29:10,620 --> 01:29:14,070
Mac VLAN device to call the base device

01:29:12,300 --> 01:29:16,620
right the base device that gets the call

01:29:14,070 --> 01:29:18,180
with the arts classification but there

01:29:16,620 --> 01:29:20,820
is no indication there anymore

01:29:18,180 --> 01:29:22,560
that this has been called on behalf of

01:29:20,820 --> 01:29:24,420
one of a forwarding device right it

01:29:22,560 --> 01:29:27,930
looks and feels the base device just

01:29:24,420 --> 01:29:29,100
like our X mo classification so this

01:29:27,930 --> 01:29:31,680
looks like something that's missing so

01:29:29,100 --> 01:29:33,450
that we'd know that this is an arts one

01:29:31,680 --> 01:29:37,530
specification that's being applied to

01:29:33,450 --> 01:29:40,560
specific Mackay line device and one

01:29:37,530 --> 01:29:41,970
other point is that if you want to get

01:29:40,560 --> 01:29:43,710
your statistics on a Mac you'll an

01:29:41,970 --> 01:29:46,890
offload device you need to sort of

01:29:43,710 --> 01:29:50,090
explicitly call MacNeill and count our X

01:29:46,890 --> 01:29:52,290
on each packet being received and

01:29:50,090 --> 01:29:55,200
basically you're not making any use of

01:29:52,290 --> 01:29:57,120
the hardware statistics right so there

01:29:55,200 --> 01:29:59,850
was a way to do that in the form a keel

01:29:57,120 --> 01:30:02,100
and device to have a call back into the

01:29:59,850 --> 01:30:03,660
driver to supply the statistics instead

01:30:02,100 --> 01:30:07,160
of having to explicitly increment them

01:30:03,660 --> 01:30:10,800
per packet that could probably be good

01:30:07,160 --> 01:30:14,490
and fast paths had like almost zero

01:30:10,800 --> 01:30:16,960
changes only we only had two

01:30:14,490 --> 01:30:20,110
you the only difference is that you no

01:30:16,960 --> 01:30:22,600
longer know which net device are going

01:30:20,110 --> 01:30:24,970
to just out of having the cue you need

01:30:22,600 --> 01:30:26,470
to because the cue is now both might

01:30:24,970 --> 01:30:28,270
belong to different devices right some

01:30:26,470 --> 01:30:30,430
cubes belong to this mech VLAN device

01:30:28,270 --> 01:30:31,750
some cubes to another so need to be

01:30:30,430 --> 01:30:33,520
careful about how you're doing your two

01:30:31,750 --> 01:30:38,400
references they're not to hurt your

01:30:33,520 --> 01:30:41,110
performance so maybe more interesting

01:30:38,400 --> 01:30:45,160
lessons learned and implementing TC

01:30:41,110 --> 01:30:46,810
offload so we had a lot of fear about

01:30:45,160 --> 01:30:47,890
the syntax but actually the dissector

01:30:46,810 --> 01:30:52,900
and the built-ins were very useful

01:30:47,890 --> 01:30:56,170
actually very easy once we had the net

01:30:52,900 --> 01:30:58,480
device were being configuring to for a

01:30:56,170 --> 01:31:00,910
Mac VLAN or a VF absolutely we did that

01:30:58,480 --> 01:31:02,740
as well although maybe that's you know

01:31:00,910 --> 01:31:05,500
this is not represent or based just a VF

01:31:02,740 --> 01:31:08,260
device based so we traveled the

01:31:05,500 --> 01:31:11,670
forwarding device devices that we've

01:31:08,260 --> 01:31:14,950
created and found the the right one

01:31:11,670 --> 01:31:17,200
and we implemented a few actions the

01:31:14,950 --> 01:31:20,800
mirror redirect drop in VLAN pushpots

01:31:17,200 --> 01:31:22,930
walk and they were working well for us a

01:31:20,800 --> 01:31:26,830
little bit about statistics

01:31:22,930 --> 01:31:28,870
so today's hardware has we have per flow

01:31:26,830 --> 01:31:30,430
statistics but only a limited amount a

01:31:28,870 --> 01:31:32,890
few thousand so they can work as buckets

01:31:30,430 --> 01:31:37,150
right I can you were talking about that

01:31:32,890 --> 01:31:39,670
before tomorrow per flow I can decide

01:31:37,150 --> 01:31:41,770
which bucket it goes into but if I want

01:31:39,670 --> 01:31:43,180
a different statistic counter per flow I

01:31:41,770 --> 01:31:46,630
can I only have thousands of such

01:31:43,180 --> 01:31:48,580
buckets right if I get that next flow

01:31:46,630 --> 01:31:51,370
that I don't have a specific counter for

01:31:48,580 --> 01:31:53,950
I can either not count for it or assign

01:31:51,370 --> 01:31:57,730
it to be counted with other flows in

01:31:53,950 --> 01:32:00,240
buckets yeah that's it give one ain't

01:31:57,730 --> 01:32:04,150
most like so there's a little bit more

01:32:00,240 --> 01:32:08,050
just a little bit I do have per action

01:32:04,150 --> 01:32:10,600
counters in the hardware and I was

01:32:08,050 --> 01:32:13,750
wondering a little bit about hardware

01:32:10,600 --> 01:32:16,900
offload sort of assist for statistics

01:32:13,750 --> 01:32:19,960
here because harder can indicate per

01:32:16,900 --> 01:32:23,130
packet which flow it belongs to ok so if

01:32:19,960 --> 01:32:25,600
the TC non offload

01:32:23,130 --> 01:32:27,270
basically I could implement and Driver

01:32:25,600 --> 01:32:30,960
on

01:32:27,270 --> 01:32:36,390
count millions of counters and get a

01:32:30,960 --> 01:32:37,590
hint from the device on which flow was

01:32:36,390 --> 01:32:39,450
it that the counter should be

01:32:37,590 --> 01:32:41,930
incremented for right we could we could

01:32:39,450 --> 01:32:46,200
build that but I was wondering if that

01:32:41,930 --> 01:32:49,530
makes sense and sounds reasonable I'm

01:32:46,200 --> 01:32:53,490
gonna wrap you up here because we may

01:32:49,530 --> 01:32:55,890
you have any more slides on okay so the

01:32:53,490 --> 01:33:00,030
last one okay so what's ahead adding

01:32:55,890 --> 01:33:03,050
some more actions and on our next

01:33:00,030 --> 01:33:06,810
hardware for next year we'll be adding

01:33:03,050 --> 01:33:10,680
wild cards and reclassifications is that

01:33:06,810 --> 01:33:14,960
ties into the multi chain and better

01:33:10,680 --> 01:33:17,330
like full statistics in the hardware

01:33:14,960 --> 01:33:21,990
cake no questions please

01:33:17,330 --> 01:33:25,530
but he I wish we had like a whole day to

01:33:21,990 --> 01:33:27,180
go over this but I think it's you know

01:33:25,530 --> 01:33:29,700
people the whole point is for people to

01:33:27,180 --> 01:33:30,810
sit and talk as well so talk to Arielle

01:33:29,700 --> 01:33:36,300
after that Thanks

01:33:30,810 --> 01:33:38,790
I think there's a need for us to have a

01:33:36,300 --> 01:33:40,620
way of testing the control plane of

01:33:38,790 --> 01:33:44,910
offload without having all the hardware

01:33:40,620 --> 01:33:47,160
and I looked at adding stuff to the

01:33:44,910 --> 01:33:49,080
dummy driver but I don't feel like

01:33:47,160 --> 01:33:50,910
that's the right way to go and I think

01:33:49,080 --> 01:33:54,180
most people agree with me so we'll

01:33:50,910 --> 01:33:55,890
probably invent a new driver or maybe

01:33:54,180 --> 01:33:57,420
someone has another suggestion I was

01:33:55,890 --> 01:33:59,370
thinking about adding it to rocker but

01:33:57,420 --> 01:34:03,750
that doesn't seem like a great fit

01:33:59,370 --> 01:34:06,270
either so the people honest people we've

01:34:03,750 --> 01:34:08,850
talked to but that I got you right it's

01:34:06,270 --> 01:34:10,440
not that you want to test TCN software

01:34:08,850 --> 01:34:12,510
you want to test their they have to do

01:34:10,440 --> 01:34:14,490
how to offload infrastructure right so

01:34:12,510 --> 01:34:16,800
phrases like what this keeps software

01:34:14,490 --> 01:34:19,350
flag what do you want to know like edit

01:34:16,800 --> 01:34:20,910
now the blocks right and then now like

01:34:19,350 --> 01:34:22,320
we don't really know how to use them to

01:34:20,910 --> 01:34:24,810
be cool if there was like a software

01:34:22,320 --> 01:34:26,970
implementation of how it's supposed to

01:34:24,810 --> 01:34:28,800
like via quotes the expected way of

01:34:26,970 --> 01:34:31,410
harvard's making use of it and also

01:34:28,800 --> 01:34:33,180
implement you're kind of like

01:34:31,410 --> 01:34:34,980
your offload model for for all the

01:34:33,180 --> 01:34:36,570
classifiers and then you can run a

01:34:34,980 --> 01:34:42,030
self-test in the kernel what the

01:34:36,570 --> 01:34:43,380
hardware worker is something completely

01:34:42,030 --> 01:34:47,100
different

01:34:43,380 --> 01:34:49,230
driver for existing hardware the

01:34:47,100 --> 01:34:50,910
hardware is in qumu but it doesn't

01:34:49,230 --> 01:34:52,710
really matter what do we really need

01:34:50,910 --> 01:34:53,910
this something like wireless guys they

01:34:52,710 --> 01:34:58,320
have needs

01:34:53,910 --> 01:35:00,840
HW sim did you heard about it it's

01:34:58,320 --> 01:35:03,270
basically it it works like you you can

01:35:00,840 --> 01:35:05,880
configure you can you can see the device

01:35:03,270 --> 01:35:08,820
but there's no real device you can put a

01:35:05,880 --> 01:35:11,790
lot of configuration and everything and

01:35:08,820 --> 01:35:13,800
all right what I think we can do is

01:35:11,790 --> 01:35:16,680
something like that and also you would

01:35:13,800 --> 01:35:18,990
you would see the outputs about what was

01:35:16,680 --> 01:35:20,460
pushed down from the from the kernel

01:35:18,990 --> 01:35:23,880
stack to the driver you could see that

01:35:20,460 --> 01:35:26,220
in the back office or whatever I know

01:35:23,880 --> 01:35:27,750
that rocky with is a certain hardware

01:35:26,220 --> 01:35:30,540
model because because it's virtual you

01:35:27,750 --> 01:35:34,110
can extend it and already it's during

01:35:30,540 --> 01:35:34,950
qmu why not use any other driver that's

01:35:34,110 --> 01:35:37,890
the same thing

01:35:34,950 --> 01:35:39,660
why want to use I'm Alexis x5 for that

01:35:37,890 --> 01:35:43,070
no because rocker can be used by anyone

01:35:39,660 --> 01:35:43,070
and can also can do packet processing

01:35:43,790 --> 01:35:49,430
just want to run itself just like in the

01:35:46,200 --> 01:35:51,870
kernel softest like it's yeah hassle

01:35:49,430 --> 01:35:54,720
also it would be good to have like some

01:35:51,870 --> 01:35:58,890
some test suit which you can run and you

01:35:54,720 --> 01:36:02,630
can see actually that no no inter no no

01:35:58,890 --> 01:36:05,040
no API within the kernel is broken

01:36:02,630 --> 01:36:07,980
something like that yeah it could be

01:36:05,040 --> 01:36:09,570
nice yeah the next question is if we had

01:36:07,980 --> 01:36:10,920
the driver than what the interface to

01:36:09,570 --> 01:36:13,200
configure it and I you suggested

01:36:10,920 --> 01:36:16,740
debugger fs:i that should be a good

01:36:13,200 --> 01:36:19,530
height right I don't know no no to

01:36:16,740 --> 01:36:20,340
configure it but to but to see what's

01:36:19,530 --> 01:36:22,470
going on inside

01:36:20,340 --> 01:36:25,230
right but you also want to like to

01:36:22,470 --> 01:36:26,520
reject something like you know you test

01:36:25,230 --> 01:36:27,990
the reject so you want to say right I

01:36:26,520 --> 01:36:29,940
can now reject every rank and your

01:36:27,990 --> 01:36:33,300
installer yeah and this is a question I

01:36:29,940 --> 01:36:36,240
I'm I think that it's good idea but I

01:36:33,300 --> 01:36:39,630
don't really know how to implement this

01:36:36,240 --> 01:36:42,630
particular API the rest is quite easy

01:36:39,630 --> 01:36:44,349
but this don't know so we did not be

01:36:42,630 --> 01:36:46,810
like vendor-specific

01:36:44,349 --> 01:36:48,880
templates maybe what do you mean well

01:36:46,810 --> 01:36:51,880
NFP for example may not behave the same

01:36:48,880 --> 01:36:53,560
way as ml x5 well but most of the stuff

01:36:51,880 --> 01:36:55,480
is kind of shirt like cardio float

01:36:53,560 --> 01:36:57,099
flower most people haven't liked the

01:36:55,480 --> 01:36:58,420
cookie and then there is a hash table

01:36:57,099 --> 01:37:00,070
and then you insert something in the

01:36:58,420 --> 01:37:02,409
hash table program the hardware and like

01:37:00,070 --> 01:37:04,270
fetch the statistic it's it's mostly

01:37:02,409 --> 01:37:07,030
code like there's a big chunk of it

01:37:04,270 --> 01:37:08,949
that's common to everyone and but not

01:37:07,030 --> 01:37:11,440
everyone make understandings when they

01:37:08,949 --> 01:37:14,079
change TC and then you change TC and the

01:37:11,440 --> 01:37:16,570
hardware offloads kind of great right I

01:37:14,079 --> 01:37:18,790
think that what Jamal justice is like to

01:37:16,570 --> 01:37:21,610
have some some list of capabilities

01:37:18,790 --> 01:37:25,030
which you can set on this simulated

01:37:21,610 --> 01:37:27,760
device so you actually can say hey this

01:37:25,030 --> 01:37:31,300
supports BPI sports flour but it doesn't

01:37:27,760 --> 01:37:32,980
support the u-32 you could say something

01:37:31,300 --> 01:37:35,320
like you know I can only do 8k rules

01:37:32,980 --> 01:37:38,230
yeah yeah so then we have automated

01:37:35,320 --> 01:37:43,690
tests that try to do more than 8k it

01:37:38,230 --> 01:37:46,179
says the limits yeah yeah any other Nick

01:37:43,690 --> 01:37:49,780
vendor area what do you think of this

01:37:46,179 --> 01:37:52,780
idea you like you have no comment

01:37:49,780 --> 01:37:57,090
okay who's it who's another who else is

01:37:52,780 --> 01:37:57,090
an egg vendor around here no - blah blah

01:37:58,530 --> 01:38:10,060
Michael right so basically it's just for

01:38:08,170 --> 01:38:14,829
for testing purposes right right yeah

01:38:10,060 --> 01:38:17,650
only from testing yeah it's so right

01:38:14,829 --> 01:38:19,480
testing and maybe also like like a

01:38:17,650 --> 01:38:20,829
blueprint implementation so you see how

01:38:19,480 --> 01:38:22,540
the API is usually work because like

01:38:20,829 --> 01:38:24,550
most people just look on another driver

01:38:22,540 --> 01:38:26,290
but most of the drivers are not perfect

01:38:24,550 --> 01:38:28,690
right so like it would be a simple way

01:38:26,290 --> 01:38:30,760
of describing what's the like usual way

01:38:28,690 --> 01:38:33,099
of using the API as well so for example

01:38:30,760 --> 01:38:35,170
you would do the VF representers that

01:38:33,099 --> 01:38:39,340
the way that should be done right and

01:38:35,170 --> 01:38:39,969
then switch ID parent ID and all that in

01:38:39,340 --> 01:38:45,190
a standard way

01:38:39,969 --> 01:38:47,139
naming I think there's actually this

01:38:45,190 --> 01:38:49,690
arrivee stuff didn't someone do some

01:38:47,139 --> 01:38:51,429
dummy driver this one is actually dummy

01:38:49,690 --> 01:38:52,989
drive extension to make it try to test

01:38:51,429 --> 01:38:55,870
for s arrivee it's kind of weird thing

01:38:52,989 --> 01:39:02,920
you haven't seen that

01:38:55,870 --> 01:39:05,200
somebody from Red Hat I think did it so

01:39:02,920 --> 01:39:09,670
with the intent also be to maybe make a

01:39:05,200 --> 01:39:17,860
this a unit test framework to this to

01:39:09,670 --> 01:39:22,240
kind of validate okay Tennessee is quite

01:39:17,860 --> 01:39:24,850
limited I wanted to include the test

01:39:22,240 --> 01:39:27,760
assist for the for the chains for the

01:39:24,850 --> 01:39:31,480
multi chains I was not really possible

01:39:27,760 --> 01:39:34,630
to do that you know yeah we are the

01:39:31,480 --> 01:39:36,520
exchange couple of demos right now we

01:39:34,630 --> 01:39:39,310
have some very simple test it'll run

01:39:36,520 --> 01:39:39,850
like TC commands and we expect something

01:39:39,310 --> 01:39:41,530
to come back

01:39:39,850 --> 01:39:44,380
so a mix thing 'king that you know if

01:39:41,530 --> 01:39:45,820
you that's what I think I mean you

01:39:44,380 --> 01:39:48,520
should be able to say just upload this

01:39:45,820 --> 01:39:51,550
to hardware and the dummy drive will say

01:39:48,520 --> 01:39:54,340
will accept or reject right would it

01:39:51,550 --> 01:39:55,570
skip software right yeah also you you

01:39:54,340 --> 01:39:57,760
need to moon it you need to monitor

01:39:55,570 --> 01:40:01,090
what's happening inside like if the if

01:39:57,760 --> 01:40:04,150
the insertion of the filter rule really

01:40:01,090 --> 01:40:07,030
got down to the driver you need to

01:40:04,150 --> 01:40:08,650
monitor it that's but that is a general

01:40:07,030 --> 01:40:10,660
problem right I mean I don't know that

01:40:08,650 --> 01:40:12,130
sure yet keeps complaining that we don't

01:40:10,660 --> 01:40:14,050
do that that's what he was complaining

01:40:12,130 --> 01:40:17,080
on his talk that we add rules to a

01:40:14,050 --> 01:40:19,930
hardware met link messages back to this

01:40:17,080 --> 01:40:21,400
off to the user space but you're not

01:40:19,930 --> 01:40:25,390
quite sure if it was succeeded or not

01:40:21,400 --> 01:40:27,850
that's why we need this yes you think

01:40:25,390 --> 01:40:30,670
this has this is like for testing the

01:40:27,850 --> 01:40:33,070
the kernel internals only know the

01:40:30,670 --> 01:40:35,410
drivers of the vendors themselves right

01:40:33,070 --> 01:40:37,060
that's yeah so to me I mean the value of

01:40:35,410 --> 01:40:38,080
this TDC thing and I'm hoping I think

01:40:37,060 --> 01:40:39,550
probably that's your point

01:40:38,080 --> 01:40:43,360
Yuri broke something you're using

01:40:39,550 --> 01:40:45,130
correct and if this tent if this thing

01:40:43,360 --> 01:40:46,900
existed you would have caught it is that

01:40:45,130 --> 01:40:48,520
am I correct he would have caught it not

01:40:46,900 --> 01:40:52,480
you I break something all the time

01:40:48,520 --> 01:40:54,610
no that's the name of the game and we

01:40:52,480 --> 01:40:56,590
break things all the time so as long as

01:40:54,610 --> 01:40:59,620
we fix them right right that is that

01:40:56,590 --> 01:41:02,230
your main point that that you're

01:40:59,620 --> 01:41:05,250
motivating this yeah that's that's one

01:41:02,230 --> 01:41:07,750
okay that's one of the points

01:41:05,250 --> 01:41:10,450
how to use the API is because we often

01:41:07,750 --> 01:41:12,250
just add api's every vendor Essen like

01:41:10,450 --> 01:41:14,230
an API right Inc jus has the same

01:41:12,250 --> 01:41:15,850
problem widget of right now like we need

01:41:14,230 --> 01:41:16,870
to really describe what the API means

01:41:15,850 --> 01:41:18,760
and so I was supposed to do because

01:41:16,870 --> 01:41:20,860
there by reading the driver code so

01:41:18,760 --> 01:41:24,850
that's another thing what the testing is

01:41:20,860 --> 01:41:26,590
primary okay III what do you said it

01:41:24,850 --> 01:41:28,740
makes a lot of sense I mean if someone

01:41:26,590 --> 01:41:31,240
comes in and once the other ones who

01:41:28,740 --> 01:41:34,500
wants to write the driver and use these

01:41:31,240 --> 01:41:36,820
features he looks at other drivers

01:41:34,500 --> 01:41:39,280
definitely like there's no other way so

01:41:36,820 --> 01:41:45,670
why not to have like some driver which

01:41:39,280 --> 01:41:46,990
is readable right okay I we don't want

01:41:45,670 --> 01:41:49,120
to keep your he has to go upstairs

01:41:46,990 --> 01:41:51,610
actually here's a presentation but is

01:41:49,120 --> 01:41:52,870
that something we can maybe unfortunate

01:41:51,610 --> 01:41:54,580
conferences over but maybe we should

01:41:52,870 --> 01:41:58,240
have had this session yesterday we heard

01:41:54,580 --> 01:42:01,180
up in mailing list discussion private

01:41:58,240 --> 01:42:02,590
right or negative or how do you wanna

01:42:01,180 --> 01:42:06,070
take it next the only decision I think

01:42:02,590 --> 01:42:08,710
we should make what the API is for who's

01:42:06,070 --> 01:42:11,110
going to write it I'm gonna write it for

01:42:08,710 --> 01:42:12,430
X to be my thanks the beer float okay I

01:42:11,110 --> 01:42:15,700
think it's useful for that alright

01:42:12,430 --> 01:42:17,950
but yeah are using demographers for

01:42:15,700 --> 01:42:28,540
setting the bit I'll discuss it on the

01:42:17,950 --> 01:42:30,190
mailing list okay thanks thanks okay so

01:42:28,540 --> 01:42:34,810
what I'm actually going to present here

01:42:30,190 --> 01:42:41,950
was not my work this was done by one of

01:42:34,810 --> 01:42:44,350
my co-workers Brenda who who is very

01:42:41,950 --> 01:42:45,430
very fluent in Python and was able to

01:42:44,350 --> 01:42:49,780
put this together a lot more quickly

01:42:45,430 --> 01:42:52,510
than I ever could have so what she's

01:42:49,780 --> 01:42:55,780
already actually already done the first

01:42:52,510 --> 01:42:56,890
round of patch submissions which she

01:42:55,780 --> 01:43:01,740
withdrew and work are actually going to

01:42:56,890 --> 01:43:03,760
start resending them because

01:43:01,740 --> 01:43:06,670
unfortunately there were a couple of

01:43:03,760 --> 01:43:09,480
changes that Chris introduced as part of

01:43:06,670 --> 01:43:09,480
the

01:43:11,270 --> 01:43:19,970
sorry Chris me yeah oh yeah he

01:43:17,900 --> 01:43:22,130
introduced a feature that's in the

01:43:19,970 --> 01:43:26,780
script that is going to prevent us from

01:43:22,130 --> 01:43:29,180
being able to because we have to support

01:43:26,780 --> 01:43:36,340
what he just added which is the ability

01:43:29,180 --> 01:43:39,560
to skip test cases so in any case what

01:43:36,340 --> 01:43:42,110
what she's added is basically a series

01:43:39,560 --> 01:43:49,700
of hooks that can be run at the various

01:43:42,110 --> 01:43:52,760
phases I just want to close to do people

01:43:49,700 --> 01:43:55,040
familiar with this TDC thing how how it

01:43:52,760 --> 01:43:57,890
works anybody Iria know you are but

01:43:55,040 --> 01:44:01,310
anybody else know I looked at it yeah

01:43:57,890 --> 01:44:05,240
you don't know Alex yeah okay I don't

01:44:01,310 --> 01:44:11,300
know if we have time but maybe okay

01:44:05,240 --> 01:44:13,520
probably not but yes it's a test utility

01:44:11,300 --> 01:44:16,580
it's the testing utility for

01:44:13,520 --> 01:44:19,580
command-line interfaces such as the TC

01:44:16,580 --> 01:44:22,250
executable they could be used for the IP

01:44:19,580 --> 01:44:27,980
command for we're actually using it for

01:44:22,250 --> 01:44:31,520
our own CLI at moach tattoos so and it's

01:44:27,980 --> 01:44:33,500
designed more for things where you craft

01:44:31,520 --> 01:44:36,320
a message send it off across some sort

01:44:33,500 --> 01:44:40,600
of bus receive a response so you're not

01:44:36,320 --> 01:44:46,910
directly connected to the the end piece

01:44:40,600 --> 01:44:49,580
that you're influencing so you you know

01:44:46,910 --> 01:44:51,050
you do a write command basically you

01:44:49,580 --> 01:44:54,950
said something you create something you

01:44:51,050 --> 01:44:57,740
delete then you go back and verify so

01:44:54,950 --> 01:44:59,360
that's the whole principle binds behind

01:44:57,740 --> 01:45:01,760
this here it is

01:44:59,360 --> 01:45:06,980
what the response you get back as well

01:45:01,760 --> 01:45:09,800
as the exit codes yeah yeah so what I

01:45:06,980 --> 01:45:12,620
discovered as well what I submitted

01:45:09,800 --> 01:45:15,820
originally it is it is extremely limited

01:45:12,620 --> 01:45:15,820
I I confess that

01:45:15,880 --> 01:45:23,810
so Brenda added the ability to create

01:45:19,840 --> 01:45:26,290
plugins so what you can do is you can

01:45:23,810 --> 01:45:26,290
actually customize

01:45:27,870 --> 01:45:33,790
customize your running environment so

01:45:31,950 --> 01:45:41,350
probably the best way I can demonstrate

01:45:33,790 --> 01:45:43,840
this is to look at a couple that she

01:45:41,350 --> 01:45:47,880
already wrote that were basically

01:45:43,840 --> 01:45:47,880
original TDC functionality

01:45:54,780 --> 01:46:02,710
all right so one of the original

01:45:58,660 --> 01:46:04,510
features of TDC features was that it

01:46:02,710 --> 01:46:06,400
would do a check to see if you had were

01:46:04,510 --> 01:46:08,020
privileged privileges before attempting

01:46:06,400 --> 01:46:10,710
to run anything because obviously all

01:46:08,020 --> 01:46:16,420
your tests were going to fail otherwise

01:46:10,710 --> 01:46:21,489
so what she did instead was using one of

01:46:16,420 --> 01:46:28,950
the hooks which is before the pre sweet

01:46:21,489 --> 01:46:32,800
or sorry before the test sweet begins oh

01:46:28,950 --> 01:46:40,410
that's oh that's the NS sorry that's the

01:46:32,800 --> 01:46:40,410
NS plugin it

01:46:43,010 --> 01:46:53,060
there we go pretty sweet so literally

01:46:49,820 --> 01:46:55,100
this command right here was in the TDC

01:46:53,060 --> 01:47:00,739
mainline script so what she's doing

01:46:55,100 --> 01:47:02,020
instead now is putting it in the pre

01:47:00,739 --> 01:47:06,370
sweet hook

01:47:02,020 --> 01:47:08,960
so when TDC runs it's going to check

01:47:06,370 --> 01:47:11,060
whatever is linked in along the way and

01:47:08,960 --> 01:47:14,270
then it's going to run that command so

01:47:11,060 --> 01:47:17,030
if you have this particular plug-in

01:47:14,270 --> 01:47:23,840
linked in then it will actually do that

01:47:17,030 --> 01:47:26,150
to check for you before it runs so

01:47:23,840 --> 01:47:27,290
something a little more complicated is

01:47:26,150 --> 01:47:30,110
the one that we were just looking at

01:47:27,290 --> 01:47:31,580
which is the name space plug-in so I had

01:47:30,110 --> 01:47:34,010
everything configured to run inside a

01:47:31,580 --> 01:47:35,420
network namespace so that all of the

01:47:34,010 --> 01:47:37,460
wonderful TC commands that you would run

01:47:35,420 --> 01:47:39,620
would actually not pollute your hosts

01:47:37,460 --> 01:47:45,020
namespace and potentially mess up your

01:47:39,620 --> 01:47:49,190
system along the way so this has been

01:47:45,020 --> 01:47:50,480
stripped out so example here

01:47:49,190 --> 01:47:53,590
pretty sweet we're actually going to

01:47:50,480 --> 01:47:53,590
create the namespace

01:47:55,030 --> 01:48:01,910
sorry that's a function call within the

01:47:57,020 --> 01:48:04,580
file itself we're going to create it

01:48:01,910 --> 01:48:06,800
we're going to create the dummy devices

01:48:04,580 --> 01:48:09,350
or actually the thief that we're using

01:48:06,800 --> 01:48:10,760
to test things against migrate them in

01:48:09,350 --> 01:48:12,500
the container this is basically

01:48:10,760 --> 01:48:19,060
everything that I had in the original

01:48:12,500 --> 01:48:22,730
TDC script same with the destroy okay

01:48:19,060 --> 01:48:28,130
which is called from the post sweet

01:48:22,730 --> 01:48:32,870
phase there we go

01:48:28,130 --> 01:48:34,280
when initially a pre suite plugins that

01:48:32,870 --> 01:48:36,680
will be invoked yeah

01:48:34,280 --> 01:48:40,190
then you run your test yeah then you run

01:48:36,680 --> 01:48:45,320
a post suite plugins yeah depending on

01:48:40,190 --> 01:48:46,610
there are six divine six defined phases

01:48:45,320 --> 01:48:49,630
and then one that can run pretty much

01:48:46,610 --> 01:48:52,760
any point so there's pre and post Suites

01:48:49,630 --> 01:48:55,400
pre and post case and pre post execution

01:48:52,760 --> 01:48:57,740
so if you need to manipulate your

01:48:55,400 --> 01:49:02,630
environment and in any way shape or form

01:48:57,740 --> 01:49:04,070
you just create the code to run inside

01:49:02,630 --> 01:49:07,490
the plug-in at the appropriate phase

01:49:04,070 --> 01:49:10,280
that's su to needs or you think it's

01:49:07,490 --> 01:49:17,480
gonna miss missing something all right

01:49:10,280 --> 01:49:19,190
isn't this is sufficient yeah yeah yeah

01:49:17,480 --> 01:49:21,860
so did she submit these patches already

01:49:19,190 --> 01:49:24,590
or uh no no not yet she could you

01:49:21,860 --> 01:49:26,240
Journal fifteen batch submission now

01:49:24,590 --> 01:49:27,980
yeah it's just maybe maybe what you

01:49:26,240 --> 01:49:31,130
could do is someone like here who's

01:49:27,980 --> 01:49:33,260
interested give him ahead of time you

01:49:31,130 --> 01:49:37,340
could pass them to URI or and then

01:49:33,260 --> 01:49:38,750
slowly submit them you have something

01:49:37,340 --> 01:49:40,730
you can show like annex re I'm just

01:49:38,750 --> 01:49:44,540
trying gonna try you had 15 minutes but

01:49:40,730 --> 01:49:51,290
I don't think it's now three o'clock

01:49:44,540 --> 01:49:53,500
yeah yeah so do is there something

01:49:51,290 --> 01:49:57,710
exciting that you could show like a test

01:49:53,500 --> 01:50:00,280
I don't know if I would call it exciting

01:49:57,710 --> 01:50:02,480
because the the end result of this is

01:50:00,280 --> 01:50:09,670
you know it's going to run exactly the

01:50:02,480 --> 01:50:09,670
same way as it did before maybe

01:50:11,270 --> 01:50:19,980
yeah so is this going to help me to work

01:50:15,690 --> 01:50:25,260
with more than two net devices yes okay

01:50:19,980 --> 01:50:28,020
yes because what you'll be able to do is

01:50:25,260 --> 01:50:30,960
as part of your say pretty sweet setup

01:50:28,020 --> 01:50:35,310
in your plugin you can actually go and

01:50:30,960 --> 01:50:39,930
create or create another virtual device

01:50:35,310 --> 01:50:42,210
or migrate I'm sorry I actually did try

01:50:39,930 --> 01:50:45,210
making Chris's changes into their own

01:50:42,210 --> 01:50:48,480
plugin but it won't be compatible with

01:50:45,210 --> 01:50:49,560
the current state of the script mostly

01:50:48,480 --> 01:50:55,440
because we don't have the ability to

01:50:49,560 --> 01:51:02,850
skip yet actually I can show you a

01:50:55,440 --> 01:51:04,770
little bit of code there in the NS

01:51:02,850 --> 01:51:10,610
plugin you created two parts why is that

01:51:04,770 --> 01:51:12,930
I mean okay V for the beer

01:51:10,610 --> 01:51:16,560
okay had EV one a day - okay so it

01:51:12,930 --> 01:51:21,780
everyone okay go ahead sorry yeah so

01:51:16,560 --> 01:51:25,380
this was my this was my attempt to do a

01:51:21,780 --> 01:51:29,270
what Chris was doing so in this case

01:51:25,380 --> 01:51:34,790
taking an actual physical device and

01:51:29,270 --> 01:51:38,210
migrating it into the container so as

01:51:34,790 --> 01:51:38,210
long as you have

01:51:48,140 --> 01:51:51,900
there we go if you create a symlink

01:51:50,370 --> 01:51:56,220
inside the plugins folder to whatever

01:51:51,900 --> 01:51:57,690
you want then only the ones that are

01:51:56,220 --> 01:52:00,350
linked in will run it at that particular

01:51:57,690 --> 01:52:02,640
time and ideally what you want to do is

01:52:00,350 --> 01:52:08,489
you know number them as well like

01:52:02,640 --> 01:52:09,930
loading order so you'd want to say you

01:52:08,489 --> 01:52:13,860
want to use the existing namespace

01:52:09,930 --> 01:52:15,900
plug-in you would number it save ten and

01:52:13,860 --> 01:52:19,140
then the one that migrates the hardware

01:52:15,900 --> 01:52:20,580
into the container number that 20 so

01:52:19,140 --> 01:52:23,300
they run in the correct order otherwise

01:52:20,580 --> 01:52:23,300
it'll fail it

01:52:30,430 --> 01:52:37,580
okay sorry dude I'm gonna cut you know

01:52:35,270 --> 01:52:39,830
that's fine I've done get I needed to do

01:52:37,580 --> 01:52:42,640
okay so we don't want to use Ellen and

01:52:39,830 --> 01:52:51,050
Steve we want to use a different system

01:52:42,640 --> 01:52:54,800
it's complimentary this is this is

01:52:51,050 --> 01:52:57,230
mainly for like testing on one single

01:52:54,800 --> 01:53:00,590
host right you run the test on one

01:52:57,230 --> 01:53:03,320
single host this yeah right or not we're

01:53:00,590 --> 01:53:06,200
not testing the effects just yet word

01:53:03,320 --> 01:53:07,820
yeah just to confirm we can we do it

01:53:06,200 --> 01:53:12,530
somehow that let's say I have a test for

01:53:07,820 --> 01:53:14,720
TC actions so I have a test for flies

01:53:12,530 --> 01:53:16,610
flower thousand types of matches and

01:53:14,720 --> 01:53:20,060
another thousand types of actions can I

01:53:16,610 --> 01:53:22,060
use the same base stuff in Ellen St and

01:53:20,060 --> 01:53:24,830
then in I can put it in both

01:53:22,060 --> 01:53:27,230
configuration no I mean could it could

01:53:24,830 --> 01:53:29,030
it be made that we have maybe I don't

01:53:27,230 --> 01:53:31,730
know I'm asking you because you can run

01:53:29,030 --> 01:53:32,930
TDC from from within all honesty that's

01:53:31,730 --> 01:53:35,240
not a problem

01:53:32,930 --> 01:53:37,550
that's what we intend to do let's say we

01:53:35,240 --> 01:53:39,770
want to we also talked them on vendor we

01:53:37,550 --> 01:53:41,660
want to have you know start to have

01:53:39,770 --> 01:53:43,460
testing to verification of let's say

01:53:41,660 --> 01:53:45,430
flower with matches in actions and stuff

01:53:43,460 --> 01:53:48,980
like that but we don't want to write

01:53:45,430 --> 01:53:52,910
well this is just to see if the command

01:53:48,980 --> 01:53:56,080
is working that's it yeah so exactly for

01:53:52,910 --> 01:54:01,010
example the two weeks ago Lucas caught

01:53:56,080 --> 01:54:03,620
your cold won't submit to the patch to

01:54:01,010 --> 01:54:05,150
fix yeah it kind of crashed so if he had

01:54:03,620 --> 01:54:06,860
a test he just run it and within one

01:54:05,150 --> 01:54:09,470
hour he was posting team saying

01:54:06,860 --> 01:54:15,140
something crashed and I think I just

01:54:09,470 --> 01:54:18,320
sewing revert the patch right yeah okay

01:54:15,140 --> 01:54:21,410
so alex is adding yet another

01:54:18,320 --> 01:54:24,530
enhancement to TDC or he is this is a

01:54:21,410 --> 01:54:26,510
proposal when you just to see if your

01:54:24,530 --> 01:54:29,900
filters are being hit or not so you just

01:54:26,510 --> 01:54:31,190
inject packets into the icarus or if

01:54:29,900 --> 01:54:34,970
you're using something like tan tap you

01:54:31,190 --> 01:54:36,530
can do it on the ingress and you then

01:54:34,970 --> 01:54:39,920
you list your rules to see yeah it got

01:54:36,530 --> 01:54:41,060
hit right I'm just trying to save time

01:54:39,920 --> 01:54:41,870
so he doesn't spend too much time here

01:54:41,060 --> 01:54:46,940
okay

01:54:41,870 --> 01:54:50,090
yeah hi I didn't include integrate stuff

01:54:46,940 --> 01:54:53,600
right now in TDC but I want to show the

01:54:50,090 --> 01:54:57,170
the basic idea what I want to do for

01:54:53,600 --> 01:55:00,400
example this is I make a bees interface

01:54:57,170 --> 01:55:08,320
on my local machine this appear in

01:55:00,400 --> 01:55:12,580
separate em in a namespace and then

01:55:08,320 --> 01:55:16,460
inside the namespace I set up here the

01:55:12,580 --> 01:55:24,650
the I have action with we classifier

01:55:16,460 --> 01:55:27,730
ifes for example I have Bioshock awning

01:55:24,650 --> 01:55:32,300
here this already ate some captured F II

01:55:27,730 --> 01:55:36,470
is an epic here you have two Ethernet

01:55:32,300 --> 01:55:39,710
and then the type is the force start the

01:55:36,470 --> 01:55:43,270
dead star F II stuff and they have to

01:55:39,710 --> 01:55:47,690
meet a data we have to like the IV

01:55:43,270 --> 01:55:52,010
action can insert or path meter data

01:55:47,690 --> 01:55:55,460
like the s copy mark or Eska be bio key

01:55:52,010 --> 01:56:01,370
C index and when did you write this

01:55:55,460 --> 01:56:06,770
you wrote a washer plug it yeah I did it

01:56:01,370 --> 01:56:11,510
right the conference okay and then this

01:56:06,770 --> 01:56:13,970
is the outer Ethernet header and then

01:56:11,510 --> 01:56:18,770
you have inner Ethernet header and then

01:56:13,970 --> 01:56:21,350
with classifier then it puts the

01:56:18,770 --> 01:56:24,380
ethernet error out and passed in a

01:56:21,350 --> 01:56:28,610
Ethernet header and make the action drop

01:56:24,380 --> 01:56:33,520
it's just an example Vista u-32 and a

01:56:28,610 --> 01:56:42,680
match and IP protocol and on our ICMP

01:56:33,520 --> 01:56:45,200
and yeah I have action does it's a it's

01:56:42,680 --> 01:56:46,910
a to carry metadata on the wire so you

01:56:45,200 --> 01:56:49,010
can actually say skb mark can be carry

01:56:46,910 --> 01:56:52,250
from one machine to another what he's

01:56:49,010 --> 01:56:53,750
trying to do I think is he's gonna he's

01:56:52,250 --> 01:56:54,950
also doing fuzzy testing so it's more

01:56:53,750 --> 01:56:56,690
than what I thought

01:56:54,950 --> 01:56:58,970
he's basically injecting some bad

01:56:56,690 --> 01:57:04,450
packets into the air to the egress

01:56:58,970 --> 01:57:10,780
that's what Skippy is made for to make

01:57:04,450 --> 01:57:17,930
also fancy yeah because what the colonel

01:57:10,780 --> 01:57:21,590
makes is it passed the TLB fields which

01:57:17,930 --> 01:57:23,690
you can see on the on the Wireshark here

01:57:21,590 --> 01:57:29,150
you have to meet a data line which is

01:57:23,690 --> 01:57:33,010
the whole length of the is a Ethernet

01:57:29,150 --> 01:57:37,940
payload in this outer Ethernet frame and

01:57:33,010 --> 01:57:40,850
then you have the tlvs in a list and for

01:57:37,940 --> 01:57:42,800
example but is when the length is

01:57:40,850 --> 01:57:49,190
different than the payload where you

01:57:42,800 --> 01:57:52,690
here and then we can show test this just

01:57:49,190 --> 01:57:57,140
the deposit in the car it works so

01:57:52,690 --> 01:57:59,320
that's this kepi code it looks in the at

01:57:57,140 --> 01:58:07,130
the moment actly and they have some they

01:57:59,320 --> 01:58:09,740
have some special special classes which

01:58:07,130 --> 01:58:13,670
you can in a hit from packet for example

01:58:09,740 --> 01:58:16,460
and then you can specify to field select

01:58:13,670 --> 01:58:20,000
the type type is a short field which is

01:58:16,460 --> 01:58:22,160
only two bytes and so on this is but is

01:58:20,000 --> 01:58:25,310
you don't need to care about it maybe I

01:58:22,160 --> 01:58:28,310
put it upstream too sketchy this is

01:58:25,310 --> 01:58:31,580
still in development and Skippy except

01:58:28,310 --> 01:58:35,210
the poly request on github so we can

01:58:31,580 --> 01:58:38,330
maybe put the whole TC package

01:58:35,210 --> 01:58:42,680
generation also into Skippy for the

01:58:38,330 --> 01:58:47,630
Linux kernel and what we can do is

01:58:42,680 --> 01:58:51,800
easily put some packets that's for

01:58:47,630 --> 01:58:56,390
example the outer Ethernet header and

01:58:51,800 --> 01:58:58,930
then I have data IV data I described

01:58:56,390 --> 01:59:02,690
here because I want to replace it

01:58:58,930 --> 01:59:05,590
several times here I have a Fe Vista

01:59:02,690 --> 01:59:13,090
tlvs analyst skv mark

01:59:05,590 --> 01:59:16,720
17 and Eska be by 10 and then we have to

01:59:13,090 --> 01:59:21,340
in a ethernet header Vista I am IP and

01:59:16,720 --> 01:59:25,510
ICMP which hits the TC action and then I

01:59:21,340 --> 01:59:28,690
I have some scripts here because I'm new

01:59:25,510 --> 01:59:38,110
in this subsystem we can see right now

01:59:28,690 --> 01:59:44,220
that here's the droplet counter of 45

01:59:38,110 --> 01:59:49,120
and when I just sent it without making a

01:59:44,220 --> 01:59:51,340
TC will to build the packet inside the

01:59:49,120 --> 01:59:53,350
user space and then I think in the

01:59:51,340 --> 01:59:56,800
background it makes our package wall

01:59:53,350 --> 02:00:00,820
socket and sent it to the other bees

01:59:56,800 --> 02:00:08,410
interface and then we can see it also on

02:00:00,820 --> 02:00:12,760
the on by a shark and then what we can

02:00:08,410 --> 02:00:15,550
do is in in this case I want to see if

02:00:12,760 --> 02:00:19,930
the drop counter is incremented and then

02:00:15,550 --> 02:00:24,250
the test is pass it when it's

02:00:19,930 --> 02:00:28,090
incremented and hit and but you can also

02:00:24,250 --> 02:00:32,130
do is for example what I described

02:00:28,090 --> 02:00:34,840
before is for example you can make

02:00:32,130 --> 02:00:38,980
lengths over white some default my

02:00:34,840 --> 02:00:48,000
language values so this is very scary

02:00:38,980 --> 02:00:48,000
specific each non default value will be

02:00:52,010 --> 02:01:18,110
you have been when I type for example

02:00:55,290 --> 02:01:27,780
Foss understand each value which is not

02:01:18,110 --> 02:01:34,830
calculated by escapee where we will be

02:01:27,780 --> 02:01:40,140
in some random will be ended some random

02:01:34,830 --> 02:01:49,220
value then we can check again I messed

02:01:40,140 --> 02:01:52,830
it up yeah but this is the idea to I

02:01:49,220 --> 02:02:00,390
think it will also work because the the

02:01:52,830 --> 02:02:05,730
length values and I know my mistake 10

02:02:00,390 --> 02:02:09,030
seconds yeah the length values a

02:02:05,730 --> 02:02:13,290
calculated value that's my possibly not

02:02:09,030 --> 02:02:16,110
work but I will make some test case no

02:02:13,290 --> 02:02:17,700
okay so but I think the general idea I

02:02:16,110 --> 02:02:19,770
think you guys got the general idea one

02:02:17,700 --> 02:02:22,500
is he wants to inject packets so that

02:02:19,770 --> 02:02:23,880
you can test your classifiers you know

02:02:22,500 --> 02:02:25,110
it is there classify going to be hit is

02:02:23,880 --> 02:02:26,730
you're actually going to be hit the

02:02:25,110 --> 02:02:29,130
meaning of the packet is not that

02:02:26,730 --> 02:02:31,590
important but things like IFE which

02:02:29,130 --> 02:02:33,270
construct packets to send out because

02:02:31,590 --> 02:02:36,239
they take they take the metadata and

02:02:33,270 --> 02:02:38,250
they may they put it on the wire

02:02:36,239 --> 02:02:40,530
fuzzy testing is good in case you're not

02:02:38,250 --> 02:02:42,950
checking for boundaries it will crash

02:02:40,530 --> 02:02:42,950
the camera

02:02:43,050 --> 02:02:49,910
most of the probably to crush the can so

02:02:46,920 --> 02:02:49,910
thanks Alex

02:02:53,920 --> 02:03:01,010
okay for those of you don't know me I'm

02:02:57,530 --> 02:03:04,430
prima donna Logan I'm engineer turned

02:03:01,010 --> 02:03:11,690
product manager at different networks

02:03:04,430 --> 02:03:14,300
I think this stock has focused on how we

02:03:11,690 --> 02:03:17,060
could map before programming language to

02:03:14,300 --> 02:03:21,100
TC and then take it to a P for

02:03:17,060 --> 02:03:23,530
programmable switch so all this talk is

02:03:21,100 --> 02:03:26,120
after the packet has left the server

02:03:23,530 --> 02:03:30,740
it's all what's happening in there in

02:03:26,120 --> 02:03:37,820
the cloud over there so just a quick

02:03:30,740 --> 02:03:42,400
overview of v4 water contains so v4

02:03:37,820 --> 02:03:45,080
contains you know these four high level

02:03:42,400 --> 02:03:47,870
components basically so there's the

02:03:45,080 --> 02:03:51,200
language spec which describes what the

02:03:47,870 --> 02:03:54,980
p4 language is and then there's a core

02:03:51,200 --> 02:03:56,720
library which has functions that are

02:03:54,980 --> 02:03:59,690
independent of the language but the

02:03:56,720 --> 02:04:02,810
language can use so this is like the

02:03:59,690 --> 02:04:05,980
standard library in C and then at the

02:04:02,810 --> 02:04:08,210
bottom you see multiple copies of the

02:04:05,980 --> 02:04:10,430
architecture dot B for an architectural

02:04:08,210 --> 02:04:15,280
library dark before these are target's

02:04:10,430 --> 02:04:17,660
specific descriptions so if you have a

02:04:15,280 --> 02:04:19,850
hardware switch that is before

02:04:17,660 --> 02:04:21,890
programmable you can have that harvard

02:04:19,850 --> 02:04:24,050
switch start before describing the

02:04:21,890 --> 02:04:26,360
architecture of that switch and then

02:04:24,050 --> 02:04:29,870
associated library for that particular

02:04:26,360 --> 02:04:33,260
switch I mean all the details are in the

02:04:29,870 --> 02:04:35,450
p4 spec there's links to it at the end

02:04:33,260 --> 02:04:36,970
but this is a high-level description of

02:04:35,450 --> 02:04:42,620
what before is it's a high-level

02:04:36,970 --> 02:04:44,960
domain-specific programming language so

02:04:42,620 --> 02:04:47,390
one of the target architectures is

02:04:44,960 --> 02:04:49,610
called protocol independence which

02:04:47,390 --> 02:04:52,400
architecture kind of looks like this

02:04:49,610 --> 02:04:55,430
there's a programmable parser in the

02:04:52,400 --> 02:04:59,510
front of the pipeline and then a series

02:04:55,430 --> 02:05:01,050
of match action units and then followed

02:04:59,510 --> 02:05:05,460
by a program

02:05:01,050 --> 02:05:08,910
d parser so the parser itself once the

02:05:05,460 --> 02:05:12,870
packet comes into the switch extracts

02:05:08,910 --> 02:05:15,630
all the the header details based on

02:05:12,870 --> 02:05:19,350
which headers you described in your p4

02:05:15,630 --> 02:05:22,050
program and then kind of puts them into

02:05:19,350 --> 02:05:23,820
this metadata bus so for every packet

02:05:22,050 --> 02:05:26,160
all the headers that I extracted put

02:05:23,820 --> 02:05:29,370
into a metadata bus and that metadata

02:05:26,160 --> 02:05:33,060
bus is accessible by the match action

02:05:29,370 --> 02:05:34,410
units so the match action units can you

02:05:33,060 --> 02:05:37,080
know take information from the metadata

02:05:34,410 --> 02:05:39,090
bus lookup tables and do some actions

02:05:37,080 --> 02:05:40,890
and then once you have done all of that

02:05:39,090 --> 02:05:42,870
through your series of matching action

02:05:40,890 --> 02:05:45,360
units at the end the packet has to be

02:05:42,870 --> 02:05:48,240
reconstructed so it'll take the new

02:05:45,360 --> 02:05:50,760
headers from the metadata bus constructs

02:05:48,240 --> 02:05:55,010
the new packet sends it out it's a very

02:05:50,760 --> 02:06:01,500
simple architecture and this is what

02:05:55,010 --> 02:06:05,520
Tofino or chip is based on so now how do

02:06:01,500 --> 02:06:07,680
you map a p4 program to this these

02:06:05,520 --> 02:06:10,410
architecture kind of looks like this

02:06:07,680 --> 02:06:13,170
there's a parser program that kind of

02:06:10,410 --> 02:06:16,650
maps to the parser in the front it's

02:06:13,170 --> 02:06:18,840
essentially a state machine built using

02:06:16,650 --> 02:06:21,390
the headers that you've described so

02:06:18,840 --> 02:06:24,210
after you extract Ethernet header you

02:06:21,390 --> 02:06:26,610
know based on either type you can

02:06:24,210 --> 02:06:29,280
extract you know following protocols and

02:06:26,610 --> 02:06:32,520
so on so that state machine is described

02:06:29,280 --> 02:06:37,230
in the parser and then the match action

02:06:32,520 --> 02:06:40,410
units basically use the header fields

02:06:37,230 --> 02:06:42,840
and then perform the match actions and

02:06:40,410 --> 02:06:44,880
that is kind of described using the

02:06:42,840 --> 02:06:47,400
tables in the control flow so the tables

02:06:44,880 --> 02:06:48,480
in the control flow essentially decide

02:06:47,400 --> 02:06:51,690
which lookups

02:06:48,480 --> 02:06:56,270
happen first and what actions do you

02:06:51,690 --> 02:06:56,270
perform and then out goes the packet

02:06:58,940 --> 02:07:03,710
so in Tofino I'm gonna talk about the

02:07:01,820 --> 02:07:05,780
phenol a little bit later but intervene

02:07:03,710 --> 02:07:12,140
oh we have to instantiation of this

02:07:05,780 --> 02:07:14,090
pipeline logically I should clarify so

02:07:12,140 --> 02:07:16,730
you have the parser match action units

02:07:14,090 --> 02:07:18,650
and the D parser followed by a traffic

02:07:16,730 --> 02:07:22,280
manager which does like queueing

02:07:18,650 --> 02:07:24,440
scheduling you know replication

02:07:22,280 --> 02:07:27,590
multicast and all that stuff and then

02:07:24,440 --> 02:07:30,890
there's a again a parser match action

02:07:27,590 --> 02:07:32,660
units and the D parser so when a packet

02:07:30,890 --> 02:07:34,810
comes in on the ingress it kind of goes

02:07:32,660 --> 02:07:37,520
from there all the way to the end

02:07:34,810 --> 02:07:40,580
depending on the number of actions you

02:07:37,520 --> 02:07:43,760
need to perform a number of lookups you

02:07:40,580 --> 02:07:46,640
need to do you may not use Watson egress

02:07:43,760 --> 02:07:48,560
or you may only use part of ingress but

02:07:46,640 --> 02:07:49,970
you have all the all the stages

02:07:48,560 --> 02:07:53,060
available to you and it's

02:07:49,970 --> 02:07:56,450
programmatically described using P for

02:07:53,060 --> 02:07:59,090
how these match action units perform the

02:07:56,450 --> 02:08:03,680
matches and actions so an interesting

02:07:59,090 --> 02:08:06,710
discussion related to this pipeline

02:08:03,680 --> 02:08:09,890
diagram is like how does this relate to

02:08:06,710 --> 02:08:13,400
the TC pipeline so TC pipeline is much

02:08:09,890 --> 02:08:15,380
richer has more functions in it but

02:08:13,400 --> 02:08:20,570
there are parts of it that can map to

02:08:15,380 --> 02:08:23,090
this PISA pipeline and you can use you

02:08:20,570 --> 02:08:25,910
know you can use offload mechanism to

02:08:23,090 --> 02:08:28,580
offload to this hardware target so that

02:08:25,910 --> 02:08:33,980
is that is the the whole crux of this

02:08:28,580 --> 02:08:36,080
talk and trying to figure out what is

02:08:33,980 --> 02:08:40,760
the what is the the best thing to do

02:08:36,080 --> 02:08:43,640
here so so that's essentially you know

02:08:40,760 --> 02:08:46,760
what what we're looking for how do we

02:08:43,640 --> 02:08:48,230
map the TC pipeline aren't to the stuff

02:08:46,760 --> 02:08:50,930
in a pipeline so you can actually

02:08:48,230 --> 02:08:53,630
offload some of the use cases for TC

02:08:50,930 --> 02:09:00,080
aren't a Tofino or any other switch

02:08:53,630 --> 02:09:03,530
right so this is a very simplistic view

02:09:00,080 --> 02:09:07,760
of how the flow would look but you would

02:09:03,530 --> 02:09:10,530
have a you know a p4 program think of it

02:09:07,760 --> 02:09:13,730
as a p4 program that's describing

02:09:10,530 --> 02:09:16,500
use case that was achieved using TC and

02:09:13,730 --> 02:09:19,739
you compel that be for program and now

02:09:16,500 --> 02:09:22,469
you can generate the TC rules and you

02:09:19,739 --> 02:09:26,849
can use the Skip software flag to push

02:09:22,469 --> 02:09:28,860
those TC rules to the hardware and what

02:09:26,849 --> 02:09:31,500
happens is the same p4 program is

02:09:28,860 --> 02:09:36,179
running in the switch as a binary so now

02:09:31,500 --> 02:09:38,670
you TC has a hardware representation of

02:09:36,179 --> 02:09:41,579
its pipeline in the switch and then you

02:09:38,670 --> 02:09:46,829
can use the you know API is to populate

02:09:41,579 --> 02:09:48,420
those tables and basically you know put

02:09:46,829 --> 02:09:51,570
in all the information that is required

02:09:48,420 --> 02:09:53,579
for packets to be looked up and switched

02:09:51,570 --> 02:09:56,309
when they come into the switch and go

02:09:53,579 --> 02:10:00,329
art so essentially you're doing what TC

02:09:56,309 --> 02:10:05,489
does and software but in hardware and at

02:10:00,329 --> 02:10:06,590
much higher performance any questions so

02:10:05,489 --> 02:10:14,730
far

02:10:06,590 --> 02:10:18,539
yep why you want to skip software said

02:10:14,730 --> 02:10:20,730
that that was the entry in both and

02:10:18,539 --> 02:10:22,980
that's a good that's a good point you

02:10:20,730 --> 02:10:24,389
could be a choice I think yeah it is the

02:10:22,980 --> 02:10:27,360
choice I think what I was highlighting

02:10:24,389 --> 02:10:29,429
here is more of a complete Hardware off

02:10:27,360 --> 02:10:34,889
floor mechanism but that's a good point

02:10:29,429 --> 02:10:38,340
actually you can put it in both yeah so

02:10:34,889 --> 02:10:41,309
in case you are talking about full

02:10:38,340 --> 02:10:44,429
hardware awful I don't understand why

02:10:41,309 --> 02:10:46,590
you might have the other arrow from the

02:10:44,429 --> 02:10:49,219
bottom arrow from the compiler to do oh

02:10:46,590 --> 02:10:57,090
before sweet so confusing to me yeah

02:10:49,219 --> 02:10:59,520
actually send updated slight but

02:10:57,090 --> 02:11:02,219
hopefully you know when the slides get

02:10:59,520 --> 02:11:03,840
posted that will be there so this the

02:11:02,219 --> 02:11:06,270
bottom line that's going to be force

02:11:03,840 --> 02:11:12,210
which is the actual compiled p4 binary

02:11:06,270 --> 02:11:14,909
right so it depending depending on how

02:11:12,210 --> 02:11:16,199
the p4 program is written maybe you

02:11:14,909 --> 02:11:18,050
don't need this bottom line because

02:11:16,199 --> 02:11:22,110
you've already loaded the switch with a

02:11:18,050 --> 02:11:23,280
particular instantiation of p4 and TC is

02:11:22,110 --> 02:11:26,130
just mapping

02:11:23,280 --> 02:11:29,550
but this is assuming that this switch is

02:11:26,130 --> 02:11:31,320
clean like in the case of toffee no it

02:11:29,550 --> 02:11:36,680
doesn't know I mean it doesn't know

02:11:31,320 --> 02:11:40,050
anything until you load a p4 program so

02:11:36,680 --> 02:11:43,590
isn't it similar Giri to what we have

02:11:40,050 --> 02:11:45,390
with BPF with TC vpf the in there that

02:11:43,590 --> 02:11:51,990
also you have you have a TCP program

02:11:45,390 --> 02:11:55,470
that you want to but you push the

02:11:51,990 --> 02:11:58,110
program through the TC and here it's not

02:11:55,470 --> 02:11:59,460
applicable to do something I it doesn't

02:11:58,110 --> 02:12:00,930
look like it why not

02:11:59,460 --> 02:12:04,080
shouldn't we do it in the same way it's

02:12:00,930 --> 02:12:05,880
done with EF it's not the trivial you

02:12:04,080 --> 02:12:07,290
would have you essentially have to yeah

02:12:05,880 --> 02:12:11,960
you would have to essentially have to

02:12:07,290 --> 02:12:26,040
have interpreter of before inside TC

02:12:11,960 --> 02:12:27,630
basically so if you can translate let us

02:12:26,040 --> 02:12:29,730
see whether you can translate the p4

02:12:27,630 --> 02:12:31,710
program into CTC rules right it's all

02:12:29,730 --> 02:12:34,590
about that right so if you have now if

02:12:31,710 --> 02:12:37,350
you can know how to offload TC yeah then

02:12:34,590 --> 02:12:40,490
you don't need anything right that is

02:12:37,350 --> 02:12:44,100
any one truth that is true if the switch

02:12:40,490 --> 02:12:45,510
already knows how do you know right so

02:12:44,100 --> 02:12:46,770
this would be maybe good formula notes

02:12:45,510 --> 02:12:48,690
because we already have let's say yeah

02:12:46,770 --> 02:12:51,810
you translate from p4 to TC and we know

02:12:48,690 --> 02:12:59,970
how we asking the question is what is

02:12:51,810 --> 02:13:02,490
the right way right yeah what what you

02:12:59,970 --> 02:13:04,560
can perhaps do is and I was suggesting

02:13:02,490 --> 02:13:07,560
it already you can have the compiler you

02:13:04,560 --> 02:13:10,140
within the within the driver so it gets

02:13:07,560 --> 02:13:12,510
the rules yes they compiles the actual

02:13:10,140 --> 02:13:14,970
binary for your particular hardware that

02:13:12,510 --> 02:13:17,610
would be awesome yeah I mean if I can

02:13:14,970 --> 02:13:22,090
have it in a favor somehow

02:13:17,610 --> 02:13:23,800
yep I see I see

02:13:22,090 --> 02:13:26,830
so we could use the same mechanism I

02:13:23,800 --> 02:13:28,150
mean the the only thing here is the

02:13:26,830 --> 02:13:30,520
switch doesn't know how to process

02:13:28,150 --> 02:13:32,770
packets until you load the binary so I

02:13:30,520 --> 02:13:33,970
guess I'm not sure I followed what what

02:13:32,770 --> 02:13:35,560
about the control pathway and what

02:13:33,970 --> 02:13:43,030
happens how do you control this thing

02:13:35,560 --> 02:13:45,010
from how do you deploy OVS so then

02:13:43,030 --> 02:13:46,690
dependent on the slow pass so your

02:13:45,010 --> 02:13:48,910
switch cannot support slow pass burner

02:13:46,690 --> 02:13:51,730
there nope if you cannot you cannot

02:13:48,910 --> 02:13:54,340
flash it with default something that we

02:13:51,730 --> 02:13:55,660
can yeah so I mean if the if the packet

02:13:54,340 --> 02:13:57,520
comes in and the switch doesn't know

02:13:55,660 --> 02:14:04,180
what to do we can always point it up to

02:13:57,520 --> 02:14:08,430
Colonel yeah yeah so the updated a

02:14:04,180 --> 02:14:12,310
little bit more clear but this is the so

02:14:08,430 --> 02:14:14,200
so now let's see we we follow this

02:14:12,310 --> 02:14:17,290
suggestion you're making that he's gonna

02:14:14,200 --> 02:14:25,420
generate TC and just do a install the

02:14:17,290 --> 02:14:28,450
binary how does he then control I think

02:14:25,420 --> 02:14:30,010
and how do I do get a dump

02:14:28,450 --> 02:14:33,160
how do I do a dump of something that's

02:14:30,010 --> 02:14:35,320
in the p4 hardware it is in it of you

02:14:33,160 --> 02:14:38,500
know the switch dumb from the from the

02:14:35,320 --> 02:14:40,240
out of the pipeline I will just let's

02:14:38,500 --> 02:14:42,280
say get stats or something like that how

02:14:40,240 --> 02:14:51,610
do I connect this is it is the

02:14:42,280 --> 02:14:53,080
translation in TC or come back okay so

02:14:51,610 --> 02:14:55,450
so to me this looks pretty straight for

02:14:53,080 --> 02:14:57,880
for things like police's or flower

02:14:55,450 --> 02:15:02,680
classify that's what's supported yeah

02:14:57,880 --> 02:15:04,840
right now yeah is that how you see it

02:15:02,680 --> 02:15:12,030
like you know flower be offloaded to

02:15:04,840 --> 02:15:12,030
people okay yeah I mean I think

02:15:13,090 --> 02:15:17,630
as long as I can still use the same API

02:15:15,590 --> 02:15:21,440
tools right now it's not just some

02:15:17,630 --> 02:15:24,639
propriety bribe which bypasses the Linux

02:15:21,440 --> 02:15:28,100
altogether yeah I think this is the idea

02:15:24,639 --> 02:15:31,040
Stacey right this is the ID to use this

02:15:28,100 --> 02:15:33,770
enough to use some blob right right some

02:15:31,040 --> 02:15:35,659
existing but if I understood what your

02:15:33,770 --> 02:15:38,179
is suggesting is saying basically take

02:15:35,659 --> 02:15:40,580
the P for program character binary plug

02:15:38,179 --> 02:15:42,860
for your hardware and put it into your

02:15:40,580 --> 02:15:45,020
hardware so now I think what Joe is

02:15:42,860 --> 02:15:47,540
suggesting is this line yeah

02:15:45,020 --> 02:15:51,469
goes from the compiler to here it goes

02:15:47,540 --> 02:16:00,320
from here to here so sorry Mike Mike

02:15:51,469 --> 02:16:02,719
Mike Mike Mike you stop it's trying to

02:16:00,320 --> 02:16:04,790
avoid getting on the Mike the problem

02:16:02,719 --> 02:16:10,429
with this is p4 is way more flexible

02:16:04,790 --> 02:16:11,480
than TC programming because you're

02:16:10,429 --> 02:16:13,699
programming something completely

02:16:11,480 --> 02:16:17,000
different TC is a programming runtime

02:16:13,699 --> 02:16:19,429
configuration of existing two T cams in

02:16:17,000 --> 02:16:21,679
their offload case here you're like you

02:16:19,429 --> 02:16:24,710
are actually generating the T cams that

02:16:21,679 --> 02:16:27,530
cam the parse table all of these fields

02:16:24,710 --> 02:16:28,639
from the p4 I mean from a model

02:16:27,530 --> 02:16:30,650
perspective I don't know what yeah it

02:16:28,639 --> 02:16:32,059
actually does but from a p4 program you

02:16:30,650 --> 02:16:34,370
might just create some arbitrary parse

02:16:32,059 --> 02:16:36,710
graph some arbitrary table layout yeah

02:16:34,370 --> 02:16:37,939
you might have your own template right

02:16:36,710 --> 02:16:43,370
and you might have multiple pipelines

02:16:37,939 --> 02:16:44,689
correct to add all of this so there's

02:16:43,370 --> 02:16:46,250
two pieces TC is only runtime

02:16:44,689 --> 02:16:48,950
configuration right it's not the actual

02:16:46,250 --> 02:16:50,960
instantiation of the hardware true so

02:16:48,950 --> 02:16:52,790
you I still think you want to have your

02:16:50,960 --> 02:16:54,320
gonna load some firmware blob to do that

02:16:52,790 --> 02:16:57,280
it's unlikely that you're gonna have TC

02:16:54,320 --> 02:17:00,349
come and say crate tkm create T cam

02:16:57,280 --> 02:17:01,880
here's a create parse graph add action

02:17:00,349 --> 02:17:02,990
add action add actions that doesn't make

02:17:01,880 --> 02:17:05,540
a lot of sense entually

02:17:02,990 --> 02:17:08,570
but a lot of the logic here if you do

02:17:05,540 --> 02:17:10,700
that at some point TC is no longer TC

02:17:08,570 --> 02:17:13,099
anymore it's like hardware generation

02:17:10,700 --> 02:17:15,050
engine so that's why I was asking it for

02:17:13,099 --> 02:17:16,969
fixed functions like if I know it's the

02:17:15,050 --> 02:17:18,139
police says I think what you're saying

02:17:16,969 --> 02:17:20,000
makes sense but I think what you're

02:17:18,139 --> 02:17:21,469
saying I mean let me see if this is try

02:17:20,000 --> 02:17:22,849
to repeat this you're saying they should

02:17:21,469 --> 02:17:24,780
generate a P for program that matches

02:17:22,849 --> 02:17:27,390
what TC can do and then there'll be a

02:17:24,780 --> 02:17:30,120
support autozone right so my new episode

02:17:27,390 --> 02:17:31,770
the TC code right well then so then you

02:17:30,120 --> 02:17:33,720
go I wanna have a new TC action I'll go

02:17:31,770 --> 02:17:37,350
right TC code yeah and then I'll rewrite

02:17:33,720 --> 02:17:41,040
my p4 programs so they smother it TC

02:17:37,350 --> 02:17:44,610
code but this is uh this is fine that's

02:17:41,040 --> 02:17:47,250
one model it's quite a bit less flexible

02:17:44,610 --> 02:17:49,110
than the the sort of vision of p4 which

02:17:47,250 --> 02:17:50,640
is that I don't have to recompile my

02:17:49,110 --> 02:17:52,440
kernel I don't have to recompile any of

02:17:50,640 --> 02:17:54,080
my programs I'm gonna auto generate the

02:17:52,440 --> 02:17:55,560
user space and I'm auto generation

02:17:54,080 --> 02:17:57,240
hardware and they're gonna just

02:17:55,560 --> 02:17:58,470
magically talk to each other because

02:17:57,240 --> 02:18:00,900
I've generated if they're everything in

02:17:58,470 --> 02:18:02,400
before and and that's one model but it's

02:18:00,900 --> 02:18:04,410
not the model that seems to fit very

02:18:02,400 --> 02:18:06,570
well into TC so do you see that for

02:18:04,410 --> 02:18:09,180
example I don't know pram one you guys

02:18:06,570 --> 02:18:12,900
have but what if we generated the action

02:18:09,180 --> 02:18:15,750
kernel code he has to be had but then

02:18:12,900 --> 02:18:17,610
this depends on I sure you can generate

02:18:15,750 --> 02:18:19,680
the kernel code yes that's possible but

02:18:17,610 --> 02:18:21,420
now the question is it's not upstream

02:18:19,680 --> 02:18:23,190
right because you're not gonna upstream

02:18:21,420 --> 02:18:24,960
everybody's P individual P for programs

02:18:23,190 --> 02:18:26,540
and load their modules so I mean this is

02:18:24,960 --> 02:18:28,200
part of the problem with one of the I

02:18:26,540 --> 02:18:30,060
shouldn't say problems because it's

02:18:28,200 --> 02:18:33,090
different problem spaces like you're

02:18:30,060 --> 02:18:35,430
solving different spaces but like you

02:18:33,090 --> 02:18:37,860
know flower selves as like how's it

02:18:35,430 --> 02:18:39,240
match fields for a tons of fields right

02:18:37,860 --> 02:18:40,860
and you can add them as you need them

02:18:39,240 --> 02:18:42,570
which works fairly well as long as you

02:18:40,860 --> 02:18:44,250
don't have something like P fall on the

02:18:42,570 --> 02:18:46,320
back side making up arbitrary protocol

02:18:44,250 --> 02:18:48,600
formats right because you don't want to

02:18:46,320 --> 02:18:50,190
go into flower every time some random

02:18:48,600 --> 02:18:51,570
person writes up a protocol that doesn't

02:18:50,190 --> 02:18:54,510
make any sense to anyone but there's a

02:18:51,570 --> 02:18:56,010
very specific use case right mm-hmm so

02:18:54,510 --> 02:18:59,310
you you know you could perhaps do it in

02:18:56,010 --> 02:19:02,430
you 32 just the parser block though

02:18:59,310 --> 02:19:04,290
again right like so I I'm not sure so so

02:19:02,430 --> 02:19:07,320
but basically for fixed functions is

02:19:04,290 --> 02:19:09,600
fine but full power that before has a

02:19:07,320 --> 02:19:11,400
human yeah so like even it like if I in

02:19:09,600 --> 02:19:15,030
p4 I can basically write an action and

02:19:11,400 --> 02:19:17,490
see mmm I claim which right so I might

02:19:15,030 --> 02:19:20,340
decide I want to have an action that you

02:19:17,490 --> 02:19:22,080
know Anne's random bits in the byte

02:19:20,340 --> 02:19:23,760
stream of packets and then mash them off

02:19:22,080 --> 02:19:24,930
base of some field and the header and

02:19:23,760 --> 02:19:26,850
you know like you can do and then

02:19:24,930 --> 02:19:28,560
appends it to the front so may like to

02:19:26,850 --> 02:19:29,910
you though is in regards to this not

02:19:28,560 --> 02:19:32,070
being upstream how is this different

02:19:29,910 --> 02:19:34,530
from EBP F there's a lot of stuff that

02:19:32,070 --> 02:19:36,900
gets injected into so now we have to

02:19:34,530 --> 02:19:38,700
talk about context so like EBP F is is

02:19:36,900 --> 02:19:42,360
his instructions

02:19:38,700 --> 02:19:45,479
like like it's an instruction set mp4 is

02:19:42,360 --> 02:19:47,130
not an instruction set yeah right and so

02:19:45,479 --> 02:19:50,160
when you compile it you you compile it

02:19:47,130 --> 02:19:51,600
into most likely microcode if that micro

02:19:50,160 --> 02:19:54,030
code is not an instruction set that's

02:19:51,600 --> 02:19:56,939
run on an embedded core it's it's I'm

02:19:54,030 --> 02:20:00,479
speculating somehow generating the

02:19:56,939 --> 02:20:01,920
actual like I've seen this one in FPGA

02:20:00,479 --> 02:20:03,780
for example it generates the very log

02:20:01,920 --> 02:20:05,910
and the very log gets loaded right yeah

02:20:03,780 --> 02:20:08,850
in their case it probably configures T

02:20:05,910 --> 02:20:11,270
cams and arranges data pass on the music

02:20:08,850 --> 02:20:13,380
so essentially generate a binary that

02:20:11,270 --> 02:20:15,479
gonna have to stop the switch or

02:20:13,380 --> 02:20:17,670
something and of course I'm sure I doubt

02:20:15,479 --> 02:20:19,979
you can reprogram this life yeah so

02:20:17,670 --> 02:20:22,830
there's there's a little bit of a you

02:20:19,979 --> 02:20:26,189
know blip yeah I mean the other model

02:20:22,830 --> 02:20:27,510
would be like p4 program that I mean it

02:20:26,189 --> 02:20:29,490
would be I think one interesting thing

02:20:27,510 --> 02:20:31,170
that would be to do is if you if you had

02:20:29,490 --> 02:20:33,840
a P for a program that represented Linux

02:20:31,170 --> 02:20:35,550
mm-hmm and it all like that was this

02:20:33,840 --> 02:20:38,130
sort of Linux you could even have it in

02:20:35,550 --> 02:20:39,990
the p4 source in the upstream p4 place

02:20:38,130 --> 02:20:42,330
and say hey if you want to have a switch

02:20:39,990 --> 02:20:44,729
that matches what the Linux capabilities

02:20:42,330 --> 02:20:47,939
are then you run this before program and

02:20:44,729 --> 02:20:49,979
now every possible Linux offload will

02:20:47,939 --> 02:20:54,180
start working for you right and that

02:20:49,979 --> 02:20:55,620
might be a valid model so I'm saying

02:20:54,180 --> 02:20:59,550
that the next talk is more something

02:20:55,620 --> 02:21:02,790
like that like who not coming any all

02:20:59,550 --> 02:21:06,080
new pipeline like expressing the core

02:21:02,790 --> 02:21:09,660
type and maybe extending it a little bit

02:21:06,080 --> 02:21:11,280
okay is this you because you're next and

02:21:09,660 --> 02:21:13,860
I'm trying to be a timekeeper here but

02:21:11,280 --> 02:21:16,650
is this is this still within your theme

02:21:13,860 --> 02:21:18,450
I haven't looked at his slides or your

02:21:16,650 --> 02:21:21,240
slides you also wanted to talk about p4

02:21:18,450 --> 02:21:22,590
as well yeah all right so here he is

02:21:21,240 --> 02:21:31,860
getting greedy ones show another slide

02:21:22,590 --> 02:21:34,260
is that I'm just seeing that we had that

02:21:31,860 --> 02:21:36,030
time allocated for people and year to

02:21:34,260 --> 02:21:38,010
give up his time because he said he

02:21:36,030 --> 02:21:39,540
presented initially to show what it is

02:21:38,010 --> 02:21:48,350
you can already do like in terms of

02:21:39,540 --> 02:21:48,350
blocks and chains okay so yeah

02:21:48,880 --> 02:21:53,720
yeah I've been spending a bit of time

02:21:51,770 --> 02:21:59,779
looking at before I think it would be

02:21:53,720 --> 02:22:14,779
easier to map you to the NS tables okay

02:21:59,779 --> 02:22:17,859
give a slight you want to show well

02:22:14,779 --> 02:22:23,739
we're waiting for that was John he left

02:22:17,859 --> 02:22:28,729
all days yeah in theory if this was to

02:22:23,739 --> 02:22:31,489
if someone was to take his compiler cuz

02:22:28,729 --> 02:22:33,580
generous did data path code in general a

02:22:31,489 --> 02:22:36,080
Linux kernel module which is an action I

02:22:33,580 --> 02:22:38,479
from my perspective of when I look at

02:22:36,080 --> 02:22:39,979
this thing I have not I'm not I haven't

02:22:38,479 --> 02:22:42,470
really looked deeply but it looks like

02:22:39,979 --> 02:22:45,609
the classifier seems to be very simple

02:22:42,470 --> 02:22:47,989
in their case it's just one it parses

02:22:45,609 --> 02:22:50,510
it's not unlike to see what can have

02:22:47,989 --> 02:22:52,250
many types of classifiers right you can

02:22:50,510 --> 02:22:56,600
only have one here which looks at

02:22:52,250 --> 02:23:02,300
headers yeah so the only thing that

02:22:56,600 --> 02:23:06,109
changes is is the actions right the the

02:23:02,300 --> 02:23:07,729
parser is is programmed via a DSL so you

02:23:06,109 --> 02:23:09,140
have a domain-specific language and you

02:23:07,729 --> 02:23:13,370
define the price or the pressure can be

02:23:09,140 --> 02:23:15,260
anything you want but I mean if you're

02:23:13,370 --> 02:23:16,430
just asking is it a parse graph yes

02:23:15,260 --> 02:23:17,930
because that's usually how people do

02:23:16,430 --> 02:23:19,850
part I mean that's what parser but

02:23:17,930 --> 02:23:21,710
actually in the latest before that's not

02:23:19,850 --> 02:23:24,260
even true the parts graph itself can

02:23:21,710 --> 02:23:32,830
have actions Internode's it's quite

02:23:24,260 --> 02:23:36,080
complex I mean they they yeah okay so in

02:23:32,830 --> 02:23:39,770
this slide what I was showing is you

02:23:36,080 --> 02:23:41,660
could potentially have a TC architecture

02:23:39,770 --> 02:23:43,939
dot P for program so that kind of

02:23:41,660 --> 02:23:46,460
describes the TC architecture and then

02:23:43,939 --> 02:23:47,899
you have your mind TC app dark before I

02:23:46,460 --> 02:23:50,149
think that's probably the best I mean

02:23:47,899 --> 02:23:52,279
that's the easiest obvious answer to the

02:23:50,149 --> 02:23:53,239
problem is build a build a on what do

02:23:52,279 --> 02:23:54,770
they called I've already forgotten

02:23:53,239 --> 02:23:57,620
contexture architecture doesn't

02:23:54,770 --> 02:23:58,220
architecture file for the Linux TC right

02:23:57,620 --> 02:24:00,079
and then

02:23:58,220 --> 02:24:01,640
define the pieces that people can

02:24:00,079 --> 02:24:04,579
reprogram which are probably just very

02:24:01,640 --> 02:24:06,859
simple things so you divide this becomes

02:24:04,579 --> 02:24:09,499
the DC architecture and then a certain

02:24:06,859 --> 02:24:11,449
library for TC and then your p4 program

02:24:09,499 --> 02:24:14,329
Maps nicely to it and it's a pretty

02:24:11,449 --> 02:24:17,619
simple single tkm thing with this basic

02:24:14,329 --> 02:24:21,289
parser block in the front yeah right

02:24:17,619 --> 02:24:22,550
yeah it can be multiple how do you just

02:24:21,289 --> 02:24:29,029
flower have support for multiple Zee

02:24:22,550 --> 02:24:29,380
cams now okay yeah yeah yeah that makes

02:24:29,029 --> 02:24:33,140
sense

02:24:29,380 --> 02:24:35,630
turn off the anymore slides now think

02:24:33,140 --> 02:24:39,430
the rest are just okay people can

02:24:35,630 --> 02:24:39,430
download and read that after yeah right

02:24:46,930 --> 02:24:55,970
same topic we started with different

02:24:53,390 --> 02:24:58,310
approach so let's understand first the

02:24:55,970 --> 02:25:00,560
use case why we need what we why we are

02:24:58,310 --> 02:25:02,180
talking about before flow though so well

02:25:00,560 --> 02:25:05,630
while we are talking about programming

02:25:02,180 --> 02:25:10,880
in general so p4 is a language a BF is

02:25:05,630 --> 02:25:14,840
another one so in general what we see we

02:25:10,880 --> 02:25:19,000
see the old word which was around fixed

02:25:14,840 --> 02:25:23,870
pipeline fixed engine ality

02:25:19,000 --> 02:25:26,181
defined by IDF I Triple E then people

02:25:23,870 --> 02:25:30,261
start to talk about what so and it was

02:25:26,181 --> 02:25:32,980
usually fixed software as well you buy a

02:25:30,261 --> 02:25:38,120
software from a box from Cisco at least

02:25:32,980 --> 02:25:43,030
one of those vendors you got fix

02:25:38,120 --> 02:25:45,530
functionality out of that boxes and then

02:25:43,030 --> 02:25:47,061
people start talking about white boxes

02:25:45,530 --> 02:25:49,841
and ability to install your own software

02:25:47,061 --> 02:25:52,700
come up with innovation in the network

02:25:49,841 --> 02:25:55,910
so the second stage after you put some

02:25:52,700 --> 02:25:58,540
your BGP some some customized b2b

02:25:55,910 --> 02:26:00,971
Protocol OSPF or whatever protocol then

02:25:58,540 --> 02:26:02,960
maybe we would like to put some

02:26:00,971 --> 02:26:08,500
flexibility in the pipeline itself in

02:26:02,960 --> 02:26:12,051
the harbor itself so again so there was

02:26:08,500 --> 02:26:13,551
kind of like like what Graham was

02:26:12,051 --> 02:26:15,051
presented you can come up with a

02:26:13,551 --> 02:26:17,811
peaceful program that describe the full

02:26:15,051 --> 02:26:19,370
pipeline reinventing your pipeline but

02:26:17,811 --> 02:26:21,530
what we think is actually this is in

02:26:19,370 --> 02:26:25,341
most cases what we see it is not what

02:26:21,530 --> 02:26:26,900
customer like to do in most cases what

02:26:25,341 --> 02:26:28,431
we see is that customers want to take

02:26:26,900 --> 02:26:31,580
the existing pipeline which has led to

02:26:28,431 --> 02:26:36,381
Lesley BGP and add some flexibility to

02:26:31,580 --> 02:26:37,851
that pipeline so and this is the what we

02:26:36,381 --> 02:26:40,400
call the real world so in the real world

02:26:37,851 --> 02:26:42,801
we have the ITF and the I Triple Aim

02:26:40,400 --> 02:26:48,320
within the switch and you want to add

02:26:42,801 --> 02:26:50,660
some flexibility to that and actually if

02:26:48,320 --> 02:26:53,540
you look at so now let's look at before

02:26:50,660 --> 02:26:56,750
as a language that can help us between

02:26:53,540 --> 02:26:58,790
achieving that goal so actually if we

02:26:56,750 --> 02:27:02,061
look at the migration from and the

02:26:58,790 --> 02:27:06,681
movement with from p4 16 to 14 to 16

02:27:02,061 --> 02:27:10,790
sorry this was exactly this match our

02:27:06,681 --> 02:27:13,431
idea so in people 14 there was a big

02:27:10,790 --> 02:27:14,990
chunk of pipeline with some English pipe

02:27:13,431 --> 02:27:16,580
and Angus pipe which is totally

02:27:14,990 --> 02:27:18,381
different what we have in a linux right

02:27:16,580 --> 02:27:20,120
in new linux you have a discrete model

02:27:18,381 --> 02:27:22,551
of a layer 2 layer 3 and then you may

02:27:20,120 --> 02:27:24,681
have another layer to each each each

02:27:22,551 --> 02:27:26,450
part of this pipeline has english and a

02:27:24,681 --> 02:27:27,681
gas model in the bridge of interest and

02:27:26,450 --> 02:27:30,440
Agra's then in the router you have

02:27:27,681 --> 02:27:31,561
english onigiris and then in this switch

02:27:30,440 --> 02:27:37,351
afterwards you have

02:27:31,561 --> 02:27:39,271
Daenerys so it is not like people 14 but

02:27:37,351 --> 02:27:42,360
people 16 give you the ability to define

02:27:39,271 --> 02:27:44,851
a target and in the target to define the

02:27:42,360 --> 02:27:48,721
pipeline and each one of the pieces in

02:27:44,851 --> 02:27:51,150
the pipeline is program and what you

02:27:48,721 --> 02:27:55,410
would like to do it's come up with the

02:27:51,150 --> 02:27:57,181
target which is the Linux target and the

02:27:55,410 --> 02:27:59,190
motivation actually to come to come up

02:27:57,181 --> 02:28:02,041
with that is that we are trying to solve

02:27:59,190 --> 02:28:03,690
two problem not one one the first is to

02:28:02,041 --> 02:28:07,551
give the user flexibility second is to

02:28:03,690 --> 02:28:10,410
come up with a uniform API meaning that

02:28:07,551 --> 02:28:13,110
when one user wrote an application on

02:28:10,410 --> 02:28:14,551
top of that then the user shouldn't care

02:28:13,110 --> 02:28:17,580
what is the underlying hard or whether

02:28:14,551 --> 02:28:20,091
it is came from Mara Knox or it came

02:28:17,580 --> 02:28:23,011
from barefoot it should behave the same

02:28:20,091 --> 02:28:24,660
so what you want to come up with this is

02:28:23,011 --> 02:28:26,971
the Linux target and this is the NIE

02:28:24,660 --> 02:28:29,910
level in very high level all the nooks

02:28:26,971 --> 02:28:31,830
target look like so in the Linux we have

02:28:29,910 --> 02:28:33,171
ports we have bridges with router we

02:28:31,830 --> 02:28:36,421
have tunnels we have blah blah blah

02:28:33,171 --> 02:28:40,230
existing pipeline existing in the Linux

02:28:36,421 --> 02:28:42,811
and what we would like to do now to

02:28:40,230 --> 02:28:46,021
define the points in that pipe and the

02:28:42,811 --> 02:28:47,610
tip-in we can do flex we can inject a

02:28:46,021 --> 02:28:50,311
peaceful program it can be a single

02:28:47,610 --> 02:28:57,541
table multiple table whatever a full

02:28:50,311 --> 02:29:02,070
pipeline and if you look at it on though

02:28:57,541 --> 02:29:04,620
all of all those flex point it look like

02:29:02,070 --> 02:29:05,910
that's what we actually we have TCO

02:29:04,620 --> 02:29:07,591
non-law smoke

02:29:05,910 --> 02:29:10,051
this injection amount of ports we have

02:29:07,591 --> 02:29:12,181
cue disk in all those points so maybe we

02:29:10,051 --> 02:29:16,650
can use to CTC as the infrastructure as

02:29:12,181 --> 02:29:18,801
the framework in order to configure the

02:29:16,650 --> 02:29:21,181
device and the end the end the kernel

02:29:18,801 --> 02:29:28,771
with what we would like to do it in in

02:29:21,181 --> 02:29:33,721
the p4 powder so in this is the idea so

02:29:28,771 --> 02:29:36,240
the idea is to have a switch or software

02:29:33,721 --> 02:29:39,450
switch whatever it it can be offloaded

02:29:36,240 --> 02:29:42,580
to order or just a Linux on top of it we

02:29:39,450 --> 02:29:44,021
can run a fair or obvious or go

02:29:42,580 --> 02:29:47,590
whatever the the legacy protocol are

02:29:44,021 --> 02:29:50,140
running on the on the on the legacy API

02:29:47,590 --> 02:29:52,690
that's fine it will keep it will stay

02:29:50,140 --> 02:29:55,450
run it will it will run the same then we

02:29:52,690 --> 02:30:00,880
can run a p4 program so people program

02:29:55,450 --> 02:30:02,590
in p4 16 it is same for one single

02:30:00,880 --> 02:30:06,360
flexibility block within the pipeline

02:30:02,590 --> 02:30:09,000
within a target so now you can define

02:30:06,360 --> 02:30:12,660
let's take the telemetry as an example

02:30:09,000 --> 02:30:16,540
you can now implement in situ or a

02:30:12,660 --> 02:30:18,700
version a customized version of invent

02:30:16,540 --> 02:30:23,820
telemetry whatever you would like adding

02:30:18,700 --> 02:30:23,820
some header into the into the packet

02:30:23,940 --> 02:30:31,990
express the team before then compile it

02:30:26,470 --> 02:30:35,860
in to TC so what you will get you will

02:30:31,990 --> 02:30:37,360
get a p4 kind of p4 API we'll talk about

02:30:35,860 --> 02:30:38,980
what should be the API to the

02:30:37,360 --> 02:30:41,260
application you can run now your

02:30:38,980 --> 02:30:43,000
application on top of that API that that

02:30:41,260 --> 02:30:45,521
application will configure those API

02:30:43,000 --> 02:30:48,190
whether those are p4 one time of others

02:30:45,521 --> 02:30:54,220
which will be translated into the into

02:30:48,190 --> 02:30:59,410
the into TC n configured to the kernel

02:30:54,220 --> 02:31:00,610
and then and because we have TC offload

02:30:59,410 --> 02:31:03,550
within the camera then it will be

02:31:00,610 --> 02:31:05,950
offloaded into the device and if the

02:31:03,550 --> 02:31:08,110
device your device supports supports

02:31:05,950 --> 02:31:19,630
that you will have it running in the

02:31:08,110 --> 02:31:21,940
hover so we see school so for example

02:31:19,630 --> 02:31:24,100
editing the parsing graph is open

02:31:21,940 --> 02:31:26,260
question oh I don't know how we can do

02:31:24,100 --> 02:31:28,271
that because it is not related only to

02:31:26,260 --> 02:31:31,300
the match action or to do the what you

02:31:28,271 --> 02:31:33,311
can match and do as a result in TC it

02:31:31,300 --> 02:31:35,650
actually affects the way the packet look

02:31:33,311 --> 02:31:37,090
like so if for example you are putting

02:31:35,650 --> 02:31:39,760
something between layer 2 and layer 3

02:31:37,090 --> 02:31:42,010
now you need to learn to teach you the

02:31:39,760 --> 02:31:44,021
kalman that now the IP should become

02:31:42,010 --> 02:31:46,150
should should be and different place and

02:31:44,021 --> 02:31:48,820
you need to pass that IP form different

02:31:46,150 --> 02:31:50,410
place within the packet I don't know I

02:31:48,820 --> 02:31:52,600
don't have the answer for that it is

02:31:50,410 --> 02:31:54,730
more like a brainstorm this presentation

02:31:52,600 --> 02:31:55,440
local no it is not like we have a

02:31:54,730 --> 02:31:58,110
solution and

02:31:55,440 --> 02:32:00,660
and this is what we'd like to do and the

02:31:58,110 --> 02:32:02,780
same for what should be the API so P for

02:32:00,660 --> 02:32:09,000
one time API may be a good candidate but

02:32:02,780 --> 02:32:11,130
not sure so if you have so actually what

02:32:09,000 --> 02:32:14,101
wasn't clear to me so you have from your

02:32:11,130 --> 02:32:16,561
slides you had egress block and ingress

02:32:14,101 --> 02:32:17,910
correct and it seems like there's some

02:32:16,561 --> 02:32:20,400
scheduling that which would be

02:32:17,910 --> 02:32:21,870
equivalent to Q disks essentially both

02:32:20,400 --> 02:32:25,700
of the increase and the egress and they

02:32:21,870 --> 02:32:25,700
both have Q's am I missing something

02:32:26,360 --> 02:32:30,540
right here you're showing just one this

02:32:28,740 --> 02:32:33,540
could be the ingress or egress no no

02:32:30,540 --> 02:32:34,920
this is this is exactly I'm not talking

02:32:33,540 --> 02:32:37,561
about in unison ago some okay so this

02:32:34,920 --> 02:32:40,920
flexing each one of those block yeah as

02:32:37,561 --> 02:32:42,061
an ingress fingers right but from what

02:32:40,920 --> 02:32:44,940
he was showing I could see that they're

02:32:42,061 --> 02:32:46,950
scheduling both the input there's queues

02:32:44,940 --> 02:32:50,550
unless those queues are something else

02:32:46,950 --> 02:32:52,440
on the egress these queues also so this

02:32:50,550 --> 02:32:54,330
is the funeral detector I'm talking now

02:32:52,440 --> 02:33:01,860
I'm describing it on our Linux

02:32:54,330 --> 02:33:03,750
architecture and I missed the beginning

02:33:01,860 --> 02:33:06,900
but I'm trying to understand so you're

02:33:03,750 --> 02:33:08,730
talking about at runtime changing the

02:33:06,900 --> 02:33:09,870
parser in the hardware through P for

02:33:08,730 --> 02:33:11,730
runtime is that what you're talking

02:33:09,870 --> 02:33:13,880
about and how meaningful is that right

02:33:11,730 --> 02:33:16,710
like if you inject new packet types

02:33:13,880 --> 02:33:17,910
wouldn't that be something that even the

02:33:16,710 --> 02:33:21,030
kernel would have to know about those

02:33:17,910 --> 02:33:23,370
packets of course this is the problem I

02:33:21,030 --> 02:33:27,300
don't I really don't know how to solve

02:33:23,370 --> 02:33:29,190
currently so maybe the best way to go is

02:33:27,300 --> 02:33:32,610
to start without and in the editing the

02:33:29,190 --> 02:33:35,970
parser just ability to create those flex

02:33:32,610 --> 02:33:38,130
points assuming that the parser is the

02:33:35,970 --> 02:33:40,070
Linux parser and later on come up with a

02:33:38,130 --> 02:33:42,811
solution now we can edit the parser

02:33:40,070 --> 02:33:45,750
whether you can get in runtime or not

02:33:42,811 --> 02:33:48,540
it's dependent on the target or your

02:33:45,750 --> 02:33:50,550
support imbalance we can do that in part

02:33:48,540 --> 02:33:52,470
in the runtime you know we can actually

02:33:50,550 --> 02:33:54,120
come up with a new program in the

02:33:52,470 --> 02:33:58,830
runtime and load it into the working

02:33:54,120 --> 02:34:01,540
device but again this is up to the

02:33:58,830 --> 02:34:03,011
target John hat

02:34:01,540 --> 02:34:05,620
earlier as well about changing the

02:34:03,011 --> 02:34:07,811
parser I mean that applies only for

02:34:05,620 --> 02:34:09,461
something like EBP F which can interpret

02:34:07,811 --> 02:34:30,250
a new protocol but doesn't apply to the

02:34:09,461 --> 02:34:35,530
kernel why I mean for the kernel if okay

02:34:30,250 --> 02:34:38,410
why okay so I mean I'll take an example

02:34:35,530 --> 02:34:40,360
right like Eden yeah in the kernel right

02:34:38,410 --> 02:34:41,410
now when you have to add a support for a

02:34:40,360 --> 02:34:44,171
particular protocol

02:34:41,410 --> 02:34:47,320
unless that support is there you don't

02:34:44,171 --> 02:34:49,091
really that's an unknown type of packet

02:34:47,320 --> 02:34:50,051
right and you can't really do anything

02:34:49,091 --> 02:34:52,030
further with it

02:34:50,051 --> 02:34:53,650
yeah I mean so the packet will come in

02:34:52,030 --> 02:34:55,660
it has some header that behind the

02:34:53,650 --> 02:34:57,671
Ethernet that they oh s doesn't know

02:34:55,660 --> 02:34:59,500
about you can run XDP and you can match

02:34:57,671 --> 02:35:02,410
on it or you could run TC and match on

02:34:59,500 --> 02:35:03,971
it the stack will still do it it was

02:35:02,410 --> 02:35:05,830
just not I mean it won't be able to

02:35:03,971 --> 02:35:07,990
let's say run the layer 3 routing on

02:35:05,830 --> 02:35:09,370
some made-up protocol but that also that

02:35:07,990 --> 02:35:12,311
operation also doesn't have an in make

02:35:09,370 --> 02:35:14,021
much sense either right like you this

02:35:12,311 --> 02:35:18,490
stack won't crash if you put headers in

02:35:14,021 --> 02:35:20,921
the middle of the packet right I mean if

02:35:18,490 --> 02:35:22,240
it does it's a bug right because we have

02:35:20,921 --> 02:35:26,940
no control over what people are sending

02:35:22,240 --> 02:35:32,681
us sure it wouldn't crash but it has

02:35:26,940 --> 02:35:37,540
what I'm trying to understand or your TC

02:35:32,681 --> 02:35:40,780
c l a-- you 32 program or your TCC OSPF

02:35:37,540 --> 02:35:47,771
program i guess the challenge here is

02:35:40,780 --> 02:35:51,160
all your VM as well so you can define

02:35:47,771 --> 02:35:53,351
the path of you sure and now we you want

02:35:51,160 --> 02:35:55,330
this block to be functional and nebari

02:35:53,351 --> 02:35:57,221
don't need to replace all the existing

02:35:55,330 --> 02:36:01,330
power pipeline the router now with a new

02:35:57,221 --> 02:36:03,971
one it is an option but is the easy one

02:36:01,330 --> 02:36:06,431
this is the odd one I want to put some

02:36:03,971 --> 02:36:08,261
new parts of it you know what even I

02:36:06,431 --> 02:36:11,021
don't want to do any much new making

02:36:08,261 --> 02:36:13,450
just to define a new processor yeah and

02:36:11,021 --> 02:36:14,280
that's the legacy region router deal

02:36:13,450 --> 02:36:17,581
with it

02:36:14,280 --> 02:36:20,041
that'll that'll work right I mean why

02:36:17,581 --> 02:36:21,900
wouldn't it work so what what is this

02:36:20,041 --> 02:36:23,341
new person you're just parsing headers

02:36:21,900 --> 02:36:25,261
right are you passing things like you

02:36:23,341 --> 02:36:27,211
know you look deep into the package HTTP

02:36:25,261 --> 02:36:29,251
strings or I can define a new packet

02:36:27,211 --> 02:36:31,621
format so between layer 2 and layer 3 I

02:36:29,251 --> 02:36:33,811
put something some blob and actually I

02:36:31,621 --> 02:36:36,961
this blob is well-defined in in I I

02:36:33,811 --> 02:36:39,721
create a new parsing graph so I I put

02:36:36,961 --> 02:36:42,121
some telemetry header right after the

02:36:39,721 --> 02:36:44,070
layer 2 and then after that you have the

02:36:42,121 --> 02:36:46,201
IPL oh that that shouldn't be a problem

02:36:44,070 --> 02:36:48,990
because the processor essentially is not

02:36:46,201 --> 02:36:51,541
in a single place on the very beginning

02:36:48,990 --> 02:36:54,740
of the pipeline it's in the middle like

02:36:51,541 --> 02:37:00,291
oh all of these all of these books have

02:36:54,740 --> 02:37:03,541
parts of themselves in Linux so again

02:37:00,291 --> 02:37:06,331
this is the target so if we really we

02:37:03,541 --> 02:37:08,341
can if we have a solution that we can

02:37:06,331 --> 02:37:10,471
come up with it that's amazing again

02:37:08,341 --> 02:37:14,101
that's that's nice but this is the ID

02:37:10,471 --> 02:37:16,771
this is what what we are trying to do we

02:37:14,101 --> 02:37:20,431
are trying to be able to define the

02:37:16,771 --> 02:37:22,551
parser then make both the a new newly

02:37:20,431 --> 02:37:27,001
created match action or the legacy

02:37:22,551 --> 02:37:30,301
pipeline to work so many quick

02:37:27,001 --> 02:37:34,051
clarifying question so this pipeline

02:37:30,301 --> 02:37:39,801
that you're showing here is how you are

02:37:34,051 --> 02:37:45,030
mapping the Linux pipeline okay or is it

02:37:39,801 --> 02:37:47,280
I want to expose Linux pipeline and then

02:37:45,030 --> 02:37:49,351
open it and then offer okay so you're

02:37:47,280 --> 02:37:56,041
defining the Linux forwarding pipeline

02:37:49,351 --> 02:37:58,351
actually so so in that context so this

02:37:56,041 --> 02:38:00,530
parser and the parser that is something

02:37:58,351 --> 02:38:06,631
that you're just adding on top of

02:38:00,530 --> 02:38:10,501
existing Linux by plane or so the reason

02:38:06,631 --> 02:38:12,990
that I don't know okay cool answer for

02:38:10,501 --> 02:38:14,551
that so I can tell you the initial

02:38:12,990 --> 02:38:18,391
thought was that you you will have a

02:38:14,551 --> 02:38:20,190
ability to to get the the Cohens Linux

02:38:18,391 --> 02:38:23,551
passing off and then you can edit it and

02:38:20,190 --> 02:38:26,551
put some note okay you know it's new so

02:38:23,551 --> 02:38:27,870
on so I had this I think working at one

02:38:26,551 --> 02:38:30,780
point on some hardware

02:38:27,870 --> 02:38:32,970
you can modify the parser and then the

02:38:30,780 --> 02:38:34,470
u-32 classifier where try to offload

02:38:32,970 --> 02:38:36,330
anything you put into you 32 into the

02:38:34,470 --> 02:38:38,940
hardware which we already have the hooks

02:38:36,330 --> 02:38:41,160
for and when you can define whatever you

02:38:38,940 --> 02:38:44,010
like in your 32 and if your firmware can

02:38:41,160 --> 02:38:47,700
then understand what the good 32 code is

02:38:44,010 --> 02:38:50,610
it can match on it and this pretty much

02:38:47,700 --> 02:39:02,130
works the you 32 is sort of complicated

02:38:50,610 --> 02:39:02,760
but not an understatement so moving to

02:39:02,130 --> 02:39:06,240
the next one

02:39:02,760 --> 02:39:07,800
this compiler will look like so there

02:39:06,240 --> 02:39:11,430
will be a front end which is actually

02:39:07,800 --> 02:39:12,870
come from people dot org the font that

02:39:11,430 --> 02:39:16,101
will do the August synthetic and

02:39:12,870 --> 02:39:19,500
semantic check for the peaceful program

02:39:16,101 --> 02:39:22,170
then the we should have some Midland

02:39:19,500 --> 02:39:26,390
which will translate the people into TC

02:39:22,170 --> 02:39:29,280
layer and a bunch of API like so again

02:39:26,390 --> 02:39:32,610
let's let us let's call those IP IDP for

02:39:29,280 --> 02:39:35,430
one time API so and now the backend will

02:39:32,610 --> 02:39:40,200
take the TC and offload it using switch

02:39:35,430 --> 02:39:42,601
dev into the target and and now you have

02:39:40,200 --> 02:39:44,790
a working although that actually also

02:39:42,601 --> 02:40:06,061
load the pipeline you just define before

02:39:44,790 --> 02:40:07,620
M Linux so it is like hybrid I think at

02:40:06,061 --> 02:40:10,561
a high level there's definitely

02:40:07,620 --> 02:40:10,950
agreement right I think details will

02:40:10,561 --> 02:40:14,790
matter

02:40:10,950 --> 02:40:18,360
but the concept concept is is is the

02:40:14,790 --> 02:40:20,460
same I mean you're there's multiple ways

02:40:18,360 --> 02:40:22,620
of looking at it one is like what is the

02:40:20,460 --> 02:40:27,120
Linux pipeline and how do you map it to

02:40:22,620 --> 02:40:28,950
hardware and then the second thing is

02:40:27,120 --> 02:40:30,780
like looking at an existing hardware

02:40:28,950 --> 02:40:34,080
pipeline and say how can I map it to

02:40:30,780 --> 02:40:36,240
Linux pipeline so so there's two

02:40:34,080 --> 02:40:39,671
different views but achieving the same

02:40:36,240 --> 02:40:43,490
goal basically I agree I agree and

02:40:39,671 --> 02:40:45,320
in terms of status and we are so

02:40:43,490 --> 02:40:48,230
currently what we have we have a

02:40:45,320 --> 02:40:52,041
compiler from p4 again P 416 same

02:40:48,230 --> 02:40:54,830
concept multiple F we have the working

02:40:52,041 --> 02:40:56,961
pipeline which look like the Linux then

02:40:54,830 --> 02:41:00,440
we can have insertion point into this

02:40:56,961 --> 02:41:02,870
pipeline and we have a compiler we first

02:41:00,440 --> 02:41:04,971
wrote the compiler to to our provider as

02:41:02,870 --> 02:41:07,881
decay later on we are going to extend it

02:41:04,971 --> 02:41:10,041
to TC and this is it should be an open

02:41:07,881 --> 02:41:11,511
source we should this is something I

02:41:10,041 --> 02:41:13,311
would I will be glad to get a community

02:41:11,511 --> 02:41:15,771
around it and you know if you are

02:41:13,311 --> 02:41:20,511
willing to to be active with us on that

02:41:15,771 --> 02:41:22,041
so - in order to drag this Midland so so

02:41:20,511 --> 02:41:23,601
the general idea is we start with

02:41:22,041 --> 02:41:25,280
something simple like this first before

02:41:23,601 --> 02:41:29,751
because your hard was very flexible I

02:41:25,280 --> 02:41:32,091
think that's so the idea is to start to

02:41:29,751 --> 02:41:33,950
have some baby step and add some

02:41:32,091 --> 02:41:36,830
flexibility and actually we have a real

02:41:33,950 --> 02:41:38,721
use case from customer that this kind of

02:41:36,830 --> 02:41:40,370
flexibility will have them expressing

02:41:38,721 --> 02:41:45,351
the Python what other people think

02:41:40,370 --> 02:41:48,830
Eirik yeah makes a lot of sense to to

02:41:45,351 --> 02:41:51,650
start from from the beginning from the

02:41:48,830 --> 02:41:54,230
baby steps we are missing some things I

02:41:51,650 --> 02:41:57,230
mean as multi describe there has to be

02:41:54,230 --> 02:42:00,171
some some hooks we have actually two

02:41:57,230 --> 02:42:02,931
hooks now that is before the bridge and

02:42:00,171 --> 02:42:05,931
after the bridge we have two perhaps we

02:42:02,931 --> 02:42:11,801
need to add another hooks before the

02:42:05,931 --> 02:42:14,030
bridge and a Rooter and other than that

02:42:11,801 --> 02:42:16,791
yeah we are missing couple of things in

02:42:14,030 --> 02:42:21,370
DC of course like the plug the block

02:42:16,791 --> 02:42:25,370
sharing it will be there it'll be yeah

02:42:21,370 --> 02:42:28,551
in a week so then we are missing the

02:42:25,370 --> 02:42:33,141
hint think I was describing like we need

02:42:28,551 --> 02:42:36,801
to hint the the parser what to parse but

02:42:33,141 --> 02:42:39,761
before before other user adds did the

02:42:36,801 --> 02:42:39,761
filter say so

02:42:50,860 --> 02:42:55,521
okay to be honest with you I was totally

02:42:53,000 --> 02:42:59,090
untight before before but I seems like

02:42:55,521 --> 02:43:04,610
this maybe there's a need right

02:42:59,090 --> 02:43:06,170
so you looks like this a fit yeah right

02:43:04,610 --> 02:43:10,910
so you've beaten me to death I think

02:43:06,170 --> 02:43:12,681
maybe so well yeah just a couple of

02:43:10,910 --> 02:43:15,440
studies that are needed for tc2 to

02:43:12,681 --> 02:43:19,521
support the initial phase of before

02:43:15,440 --> 02:43:21,080
adoption so we can do that and let's see

02:43:19,521 --> 02:43:23,300
what happens after that I guess let's

02:43:21,080 --> 02:43:25,101
start yeah yeah hopefully next net that

02:43:23,300 --> 02:43:26,780
we will have something working and then

02:43:25,101 --> 02:43:29,811
we can come up with some missing stuff

02:43:26,780 --> 02:43:31,360
adding them continue from that okay so

02:43:29,811 --> 02:43:32,800
there is a plan basically you guys agree

02:43:31,360 --> 02:43:41,811
okay

02:43:32,800 --> 02:43:48,110
any objection okay all right thank you

02:43:41,811 --> 02:43:51,561
okay thanks so nothing very concrete

02:43:48,110 --> 02:43:56,630
here but PPR is PBRs policy-based

02:43:51,561 --> 02:43:58,851
routing with me okay policy-based

02:43:56,630 --> 02:44:01,760
routing what it means is on a match you

02:43:58,851 --> 02:44:05,090
can redirect and pack it to an interface

02:44:01,760 --> 02:44:10,300
a next hop and ecmp next hop or a work

02:44:05,090 --> 02:44:13,400
and today you can do it with IP rules

02:44:10,300 --> 02:44:16,070
not all of them are possible but IP

02:44:13,400 --> 02:44:18,650
rules allows you to point to another

02:44:16,070 --> 02:44:21,080
table and you as an indirection and that

02:44:18,650 --> 02:44:23,960
table you could have a rule to do

02:44:21,080 --> 02:44:26,150
whatever you want but there are some

02:44:23,960 --> 02:44:29,300
issues with it which are obviously

02:44:26,150 --> 02:44:32,000
fixable in IP rules you can you today

02:44:29,300 --> 02:44:34,790
you have to burn a table for every such

02:44:32,000 --> 02:44:37,010
policy decision which won't scale and we

02:44:34,790 --> 02:44:41,210
also use tables routing tables for works

02:44:37,010 --> 02:44:44,720
so there is a lot of management and user

02:44:41,210 --> 02:44:46,490
space that you'll have to do for this IP

02:44:44,720 --> 02:44:48,980
rule scale might be a problem but I

02:44:46,490 --> 02:44:51,699
don't I don't have numbers and I have

02:44:48,980 --> 02:44:55,600
nothing to say about that right now but

02:44:51,699 --> 02:44:57,609
it does not have an offload API yet but

02:44:55,600 --> 02:45:02,229
I know Mellanox has some for switched up

02:44:57,609 --> 02:45:07,169
if needed okay why does why am I talking

02:45:02,229 --> 02:45:11,259
about PVR with TC so this came up

02:45:07,169 --> 02:45:15,189
because if you are installing rules via

02:45:11,259 --> 02:45:18,729
TC & PBR is also usually Hardware

02:45:15,189 --> 02:45:20,739
offloaded using a CLS the same thing TC

02:45:18,729 --> 02:45:22,749
rules with a CL & PBR with a CL it will

02:45:20,739 --> 02:45:25,209
be nice to have a single offload API to

02:45:22,749 --> 02:45:26,789
do both of those off loads and that's

02:45:25,209 --> 02:45:29,319
where this thought came into picture

02:45:26,789 --> 02:45:31,270
like I said nothing's concrete it's just

02:45:29,319 --> 02:45:33,659
that we were evaluating all possible

02:45:31,270 --> 02:45:33,659
options

02:45:35,819 --> 02:45:47,229
okay and yesterday I was at a talk by

02:45:41,919 --> 02:45:51,909
Ronnie on contract contract offload or

02:45:47,229 --> 02:45:56,079
contract action via TC and that's this

02:45:51,909 --> 02:45:58,329
the same reasons apply here to net

02:45:56,079 --> 02:46:01,479
filter has all the hooks the right hooks

02:45:58,329 --> 02:46:04,329
for routing TC today has only an each

02:46:01,479 --> 02:46:05,619
ingress and a hook it will be

02:46:04,329 --> 02:46:09,699
nice to have it

02:46:05,619 --> 02:46:12,399
routing hook if needed especially if we

02:46:09,699 --> 02:46:16,689
want to bring in all the other AC else

02:46:12,399 --> 02:46:18,839
in the same in the TC framework so the

02:46:16,689 --> 02:46:21,129
contract a talk was really interesting

02:46:18,839 --> 02:46:23,379
and I think there are other targets

02:46:21,129 --> 02:46:26,199
which to redirect easy tag actions that

02:46:23,379 --> 02:46:30,669
redirect to net filter so the possible

02:46:26,199 --> 02:46:34,390
options here one one suggestion was to

02:46:30,669 --> 02:46:36,489
actually have a TC action to route the

02:46:34,390 --> 02:46:38,229
packet directly that does have an action

02:46:36,489 --> 02:46:41,919
actually do a IP route lookup in the

02:46:38,229 --> 02:46:46,060
particular table and exactly as how you

02:46:41,919 --> 02:46:48,699
do I I P rules would do but then this

02:46:46,060 --> 02:46:50,680
would only work at ingress egress is a

02:46:48,699 --> 02:46:52,899
bit too late you have already resolved

02:46:50,680 --> 02:46:55,779
everything you had to resolve at an

02:46:52,899 --> 02:46:58,029
entry level but in most cases most

02:46:55,779 --> 02:47:01,539
deployment cases ingress that is

02:46:58,029 --> 02:47:03,939
forwarding a policy routing for

02:47:01,539 --> 02:47:05,590
forwarding traffic is good enough so

02:47:03,939 --> 02:47:08,830
this is one

02:47:05,590 --> 02:47:11,109
the second option which I played around

02:47:08,830 --> 02:47:15,640
with a little bit is to have an TC

02:47:11,109 --> 02:47:18,819
action to attach policy route policy to

02:47:15,640 --> 02:47:23,020
the escapee in wire dest metadata which

02:47:18,819 --> 02:47:24,700
we do in several places you have a new

02:47:23,020 --> 02:47:27,220
type of desk metadata to carry the

02:47:24,700 --> 02:47:29,830
routing policy decision which can be

02:47:27,220 --> 02:47:32,560
looked at at the real 3rd lookup point

02:47:29,830 --> 02:47:38,950
where the actual IP rules is applied

02:47:32,560 --> 02:47:40,540
today so I did have some problem I've

02:47:38,950 --> 02:47:43,510
not gone back and looked at it in detail

02:47:40,540 --> 02:47:45,220
but the problem is we evaluate the

02:47:43,510 --> 02:47:47,800
decimator data too early before it

02:47:45,220 --> 02:47:51,069
reached the reaches the Feb lookup or

02:47:47,800 --> 02:47:53,290
Februus point so that could be a problem

02:47:51,069 --> 02:48:00,189
I had not tried to find a solution for

02:47:53,290 --> 02:48:02,649
it the third a new tooth TC hook at the

02:48:00,189 --> 02:48:06,580
routing level I'm not sure if that is

02:48:02,649 --> 02:48:10,960
feasible but something if if another use

02:48:06,580 --> 02:48:13,930
case comes along to do the same might be

02:48:10,960 --> 02:48:16,689
useful or leverage an existing metal to

02:48:13,930 --> 02:48:22,720
hook like you do for contract with

02:48:16,689 --> 02:48:25,660
something so those are the three options

02:48:22,720 --> 02:48:27,609
not played with all of them but yeah if

02:48:25,660 --> 02:48:29,470
anybody has any suggestions that'll be

02:48:27,609 --> 02:48:33,010
useful I'm just taking and using this

02:48:29,470 --> 02:48:36,880
forum to just discuss this for future so

02:48:33,010 --> 02:48:39,149
the other challenges that we have

02:48:36,880 --> 02:48:42,970
brought up on the mailing list a few

02:48:39,149 --> 02:48:46,359
weeks back is global PPR rules are

02:48:42,970 --> 02:48:49,330
usually global rules they are not tied

02:48:46,359 --> 02:48:52,510
to an interface for example an example

02:48:49,330 --> 02:48:56,800
rule would be on any packets packet that

02:48:52,510 --> 02:48:58,180
matched the source IP routed to redirect

02:48:56,800 --> 02:49:01,470
to a particular routing table or

02:48:58,180 --> 02:49:05,319
redirect to a particular wirf and so on

02:49:01,470 --> 02:49:08,819
so we don't even need for per interface

02:49:05,319 --> 02:49:12,910
starts for this net filter does allow

02:49:08,819 --> 02:49:15,520
adding global rules I know we talked

02:49:12,910 --> 02:49:18,640
about shared blocks that GE has on the

02:49:15,520 --> 02:49:21,399
list that could be useful but

02:49:18,640 --> 02:49:26,020
I had a few questions I will look at

02:49:21,399 --> 02:49:28,630
your slides so which shed do we still

02:49:26,020 --> 02:49:30,489
have duels tied to every interface do we

02:49:28,630 --> 02:49:33,970
still have stats for every interface is

02:49:30,489 --> 02:49:36,689
the question know all the shared even

02:49:33,970 --> 02:49:40,649
starts are shared ok that's pretty nice

02:49:36,689 --> 02:49:45,449
so that that will help others in like

02:49:40,649 --> 02:49:45,449
the patches are in not yet

02:49:52,840 --> 02:50:02,189
nice make cycle ok ok that's all I had

02:49:58,180 --> 02:50:04,239
I'll save you some time general yeah

02:50:02,189 --> 02:50:05,409
yeah maybe let's pull it off line and

02:50:04,239 --> 02:50:10,630
see all those guys they're not here for

02:50:05,409 --> 02:50:14,220
us before they let's give them a chance

02:50:10,630 --> 02:50:17,290
maybe to prepare when a break for me I

02:50:14,220 --> 02:50:18,970
have some slice to prepare as well yeah

02:50:17,290 --> 02:50:25,920
so I want to ask you you say are you

02:50:18,970 --> 02:50:29,050
guys thinking about PDR offload yes

02:50:25,920 --> 02:50:36,729
using IP rules or TC have you guys given

02:50:29,050 --> 02:50:38,560
at the top TC so this is fit into your

02:50:36,729 --> 02:50:43,899
other diagram that you showed this the

02:50:38,560 --> 02:50:46,330
Flex in different areas so he you saw

02:50:43,899 --> 02:50:51,189
his presentation yeah just maybe we can

02:50:46,330 --> 02:50:55,270
have it offline yeah ok so thank you

02:50:51,189 --> 02:50:57,040
Roopa so we I only have two are these

02:50:55,270 --> 02:50:58,330
two gifts for us here I only have two

02:50:57,040 --> 02:51:00,310
gifts I don't know there's a lot of

02:50:58,330 --> 02:51:06,520
people spoke who hasn't good one of

02:51:00,310 --> 02:51:10,280
these yet well I really didn't get one

02:51:06,520 --> 02:51:16,130
okay yeah

02:51:10,280 --> 02:51:17,960
I know you got one right I don't resist

02:51:16,130 --> 02:51:20,570
for the next session or for us okay your

02:51:17,960 --> 02:51:28,520
honor you have one Michael where's

02:51:20,570 --> 02:51:31,040
Michael he left he left his phone whose

02:51:28,520 --> 02:51:35,660
phone is this there's a big Samsung

02:51:31,040 --> 02:51:38,630
phone here okay

02:51:35,660 --> 02:51:40,780
it's mine now okay well thank you

02:51:38,630 --> 02:51:40,780

YouTube URL: https://www.youtube.com/watch?v=1ZskZfIjEUs


