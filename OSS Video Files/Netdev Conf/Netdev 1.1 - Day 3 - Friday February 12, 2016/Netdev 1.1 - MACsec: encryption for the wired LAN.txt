Title: Netdev 1.1 - MACsec: encryption for the wired LAN
Publication date: 2016-03-15
Playlist: Netdev 1.1 - Day 3 - Friday February 12, 2016
Description: 
	Sabrina Dubroca
February 2016
Captions: 
	00:00:01,399 --> 00:00:07,170
hello I'm Sabrina I'm going to talk

00:00:04,950 --> 00:00:11,550
about Mexico which is encryption for

00:00:07,170 --> 00:00:15,509
Wired LANs so I will start with an

00:00:11,550 --> 00:00:18,449
introduction to mexic some definition

00:00:15,509 --> 00:00:20,460
architecture why you would want to use

00:00:18,449 --> 00:00:22,500
it then I will talk about the Linux

00:00:20,460 --> 00:00:26,359
kernel implementation and I will then

00:00:22,500 --> 00:00:26,359
describe some future work that's nice

00:00:26,460 --> 00:00:31,320
so first what is mexic oh it's an I

00:00:29,460 --> 00:00:34,290
Triple E standard for encryption over

00:00:31,320 --> 00:00:36,030
Ethernet and you can use it to encrypt

00:00:34,290 --> 00:00:45,469
and authenticate all traffic in a LAN

00:00:36,030 --> 00:00:48,120
using GCM AES 128 bit keys so why well

00:00:45,469 --> 00:00:51,210
security within lands is pretty bad you

00:00:48,120 --> 00:00:54,149
can have rogue DHCP servers Rob gutro

00:00:51,210 --> 00:00:57,050
advertisements and you can some people

00:00:54,149 --> 00:00:59,280
could do often and just spoofing and

00:00:57,050 --> 00:01:02,550
IPSec cannot protect you against that

00:00:59,280 --> 00:01:05,850
because it's only layer 3 so which you

00:01:02,550 --> 00:01:09,060
have interested link you could be

00:01:05,850 --> 00:01:11,850
screwed and additionally or you could

00:01:09,060 --> 00:01:14,040
use Mexico a page slam so there was a

00:01:11,850 --> 00:01:16,439
proposal for encrypted VX LAN

00:01:14,040 --> 00:01:19,140
but the encryption is done on the two

00:01:16,439 --> 00:01:20,490
endpoints not in virtual machines so if

00:01:19,140 --> 00:01:22,979
you're a cloud tenant you don't have

00:01:20,490 --> 00:01:25,080
control over your over the keys that's

00:01:22,979 --> 00:01:27,000
not what you want with Mexico based on

00:01:25,080 --> 00:01:31,619
the encryption is done in the virtual

00:01:27,000 --> 00:01:33,180
machine so you do not you don't need to

00:01:31,619 --> 00:01:36,180
be aware of the underlying network you

00:01:33,180 --> 00:01:38,159
just do your encryption on the ethernet

00:01:36,180 --> 00:01:46,549
packet that you let you transmit and

00:01:38,159 --> 00:01:46,549
that's it so some introduction to mexic

00:01:48,380 --> 00:01:53,549
main concepts in mexico are the secure

00:01:52,259 --> 00:01:56,369
channel which is a unidirectional

00:01:53,549 --> 00:01:57,960
transmit channel from one node to many

00:01:56,369 --> 00:02:00,659
to as many as you want

00:01:57,960 --> 00:02:03,060
and it's covered by us sequence of

00:02:00,659 --> 00:02:05,310
successive overlapping secure

00:02:03,060 --> 00:02:09,899
Association the secure Association

00:02:05,310 --> 00:02:11,870
within the channel is what what is used

00:02:09,899 --> 00:02:15,560
to transmit every Mexican friend

00:02:11,870 --> 00:02:17,720
and the main parameter for the six year

00:02:15,560 --> 00:02:22,400
association are the packet number and

00:02:17,720 --> 00:02:24,410
the key now then the security entity is

00:02:22,400 --> 00:02:27,830
just an instant of the instance of the

00:02:24,410 --> 00:02:29,780
Mexican fermentation and it's linked to

00:02:27,830 --> 00:02:32,030
your transmit secure channel you have

00:02:29,780 --> 00:02:34,640
one security entity for each transmit

00:02:32,030 --> 00:02:38,239
secure channel but you could have many

00:02:34,640 --> 00:02:40,760
receive channels and the uncontrolled

00:02:38,239 --> 00:02:44,000
part is in I Triple E terminology the

00:02:40,760 --> 00:02:45,890
network interface provided providing the

00:02:44,000 --> 00:02:51,200
insecure service and that's what you

00:02:45,890 --> 00:02:56,360
build Messick so you've probably heard

00:02:51,200 --> 00:02:58,519
of 802 that one X you have basically two

00:02:56,360 --> 00:03:01,220
options to configure mexic the first one

00:02:58,519 --> 00:03:03,370
is that you configure your keys and your

00:03:01,220 --> 00:03:06,739
secure channels and everything manually

00:03:03,370 --> 00:03:08,590
and you find a way to do your key

00:03:06,739 --> 00:03:10,910
exchange between your different nodes

00:03:08,590 --> 00:03:14,930
you set up between your different nodes

00:03:10,910 --> 00:03:17,000
the other option is to use HTTP 1x with

00:03:14,930 --> 00:03:19,910
them makes a key agreement protocol

00:03:17,000 --> 00:03:22,220
extension which is defined in the 2010

00:03:19,910 --> 00:03:24,350
revision of the standard and that allows

00:03:22,220 --> 00:03:27,140
you to perform discovery of other mexic

00:03:24,350 --> 00:03:29,450
nodes and all the set up of six your

00:03:27,140 --> 00:03:32,209
channels and secure associations key

00:03:29,450 --> 00:03:35,109
distribution between your nodes and also

00:03:32,209 --> 00:03:41,030
synchronization of packet numbers form

00:03:35,109 --> 00:03:44,769
for replay protection so max Ike has too

00:03:41,030 --> 00:03:46,940
much two main modes you will always have

00:03:44,769 --> 00:03:51,019
integrity and authenticity of your

00:03:46,940 --> 00:03:53,889
traffic and encryption is optional so

00:03:51,019 --> 00:03:57,049
the default crypto suit is GCM AES and

00:03:53,889 --> 00:03:59,750
the entire max a packet starting from

00:03:57,049 --> 00:04:01,579
the Ethernet header the source

00:03:59,750 --> 00:04:04,250
authorized and everything will always be

00:04:01,579 --> 00:04:06,560
authenticated and then the admin can

00:04:04,250 --> 00:04:09,530
decide whether they use encryption or

00:04:06,560 --> 00:04:11,780
not so if you don't use encryption the

00:04:09,530 --> 00:04:13,519
Mac side pocket is just passed as

00:04:11,780 --> 00:04:16,459
additional data to the cyber suit

00:04:13,519 --> 00:04:19,010
otherwise the original bagels starting

00:04:16,459 --> 00:04:23,390
from the original isotype will be

00:04:19,010 --> 00:04:25,630
encrypted on receive you have several

00:04:23,390 --> 00:04:29,930
options for validation

00:04:25,630 --> 00:04:33,230
the first the first option is that you

00:04:29,930 --> 00:04:35,420
just drop all packets that are not valid

00:04:33,230 --> 00:04:37,520
or that you cannot verify because you

00:04:35,420 --> 00:04:39,950
don't know the Chi that's the most

00:04:37,520 --> 00:04:43,970
secure option and the other options are

00:04:39,950 --> 00:04:49,190
to accept invalid traffic but you can't

00:04:43,970 --> 00:04:51,260
count them as invalid in statistics of

00:04:49,190 --> 00:04:52,700
course encrypted traffic encrypted

00:04:51,260 --> 00:04:55,460
frames cannot be accepted if you don't

00:04:52,700 --> 00:05:00,140
have the matching key so you can only

00:04:55,460 --> 00:05:05,050
perform non-strict validation if the

00:05:00,140 --> 00:05:05,050
traffic is not it's not encrypted

00:05:06,140 --> 00:05:11,000
another option of max a keys replay

00:05:08,420 --> 00:05:14,270
protection so each frame is sent with a

00:05:11,000 --> 00:05:17,200
32 bit packet number and on receive you

00:05:14,270 --> 00:05:20,870
may chose to validate the packet number

00:05:17,200 --> 00:05:23,390
with the lowest packet that you expected

00:05:20,870 --> 00:05:26,090
and you have a configurable configurable

00:05:23,390 --> 00:05:29,770
reply windows so some amount of we are

00:05:26,090 --> 00:05:29,770
doing within your LAN is acceptable so

00:05:29,830 --> 00:05:37,490
we look at the packet format from xxxx

00:05:32,450 --> 00:05:39,710
first an unprotected frame and then when

00:05:37,490 --> 00:05:42,740
you want when you pass it through a my

00:05:39,710 --> 00:05:45,740
side device you will at the sec tied

00:05:42,740 --> 00:05:47,360
with the first in my you will change the

00:05:45,740 --> 00:05:49,820
other type to the max second to type at

00:05:47,360 --> 00:05:54,440
a sec tag with a which is the max a

00:05:49,820 --> 00:05:55,820
header and all the original payload

00:05:54,440 --> 00:05:58,310
starting from the youth from the

00:05:55,820 --> 00:06:00,350
previous effort type will be protected

00:05:58,310 --> 00:06:04,940
by my sec and then at the end you add

00:06:00,350 --> 00:06:07,400
the ICV from Krypton if you decide to

00:06:04,940 --> 00:06:09,260
encrypt your traffic everything starting

00:06:07,400 --> 00:06:14,630
from the user at the type is encrypted

00:06:09,260 --> 00:06:16,490
so what's in the sec tag are you have

00:06:14,630 --> 00:06:18,650
the titrant for information which I will

00:06:16,490 --> 00:06:21,140
describe afterwards then you have the

00:06:18,650 --> 00:06:26,320
Association number which is the ID for

00:06:21,140 --> 00:06:30,560
the secure Association you have a length

00:06:26,320 --> 00:06:33,080
if if the packet length was smaller than

00:06:30,560 --> 00:06:36,140
64 bytes then you have your packet

00:06:33,080 --> 00:06:38,739
number which is used as part of the as

00:06:36,140 --> 00:06:41,139
the ID for the cryptographic suit and

00:06:38,739 --> 00:06:43,249
also for replay protection and

00:06:41,139 --> 00:06:49,519
optionally you have the security on that

00:06:43,249 --> 00:06:52,249
identifier for that frame so the

00:06:49,519 --> 00:06:55,159
contents of the TCI are for important

00:06:52,249 --> 00:06:57,469
for the interesting parts the SCB that

00:06:55,159 --> 00:07:00,769
indicates that the optional STI was

00:06:57,469 --> 00:07:03,259
actually present the eb that indicates

00:07:00,769 --> 00:07:06,289
whether or not that frame the payload

00:07:03,259 --> 00:07:08,689
was encrypted and the CB that tells you

00:07:06,289 --> 00:07:11,269
basically whether you can perform

00:07:08,689 --> 00:07:14,179
non-strict validation that i explained a

00:07:11,269 --> 00:07:19,309
bit earlier so because you have some

00:07:14,179 --> 00:07:22,519
optional parameters such as the the ICV

00:07:19,309 --> 00:07:25,219
length for max ike is variable so if you

00:07:22,519 --> 00:07:26,989
don't know the if you don't choose the

00:07:25,219 --> 00:07:29,479
default ICB length you should not

00:07:26,989 --> 00:07:37,939
reforms you cannot accept traffic that

00:07:29,479 --> 00:07:39,589
is not configured one possible

00:07:37,939 --> 00:07:42,589
interaction between max second other

00:07:39,589 --> 00:07:45,559
protocols is with VLANs so if you

00:07:42,589 --> 00:07:47,449
receiver if you have a VLAN frame and

00:07:45,559 --> 00:07:50,029
you want to encrypt it with Mac SEC

00:07:47,449 --> 00:07:54,019
that's possible and the villain had a

00:07:50,029 --> 00:07:57,279
would also be collected by the writer

00:07:54,019 --> 00:08:00,889
site type of course then you could also

00:07:57,279 --> 00:08:03,949
transmit this frame through for another

00:08:00,889 --> 00:08:09,110
villain but that villain header would

00:08:03,949 --> 00:08:11,599
not be protected by max I capture was so

00:08:09,110 --> 00:08:14,419
how is packet handling perform well on

00:08:11,599 --> 00:08:18,889
transmit you will receive this frame

00:08:14,419 --> 00:08:22,069
from the stack what you do is you push a

00:08:18,889 --> 00:08:25,039
sec tag to the beginning so between the

00:08:22,069 --> 00:08:26,300
ethernet header and the data you compute

00:08:25,039 --> 00:08:27,949
and append the ICV

00:08:26,300 --> 00:08:30,469
maybe you encrypt your data your payload

00:08:27,949 --> 00:08:35,120
and then you pass that frame down to the

00:08:30,469 --> 00:08:38,050
underlying device on receive so you get

00:08:35,120 --> 00:08:42,669
this same frame as you just transmitted

00:08:38,050 --> 00:08:45,170
you start by verifying the packet format

00:08:42,669 --> 00:08:48,110
then you check the packet number if you

00:08:45,170 --> 00:08:50,120
have enabled replay protection from a

00:08:48,110 --> 00:08:52,400
security point of view you just drop the

00:08:50,120 --> 00:08:57,260
packet to you're not giving any feedback

00:08:52,400 --> 00:08:59,660
any attacker and this first replay

00:08:57,260 --> 00:09:01,220
protection check helps you to defend

00:08:59,660 --> 00:09:03,440
against those strikes because you're not

00:09:01,220 --> 00:09:05,810
performing the cryptographic computation

00:09:03,440 --> 00:09:11,840
on something that you will just drop

00:09:05,810 --> 00:09:13,880
anyway afterwards then you perform the

00:09:11,840 --> 00:09:17,570
cryptographic gratification and your

00:09:13,880 --> 00:09:19,280
decree the packets then you have a

00:09:17,570 --> 00:09:20,480
second read great protection check

00:09:19,280 --> 00:09:23,570
because the packet might have been

00:09:20,480 --> 00:09:26,150
delayed going through crypto and then

00:09:23,570 --> 00:09:31,850
you remove the ICB the sec tag and you

00:09:26,150 --> 00:09:32,750
pass this frame out this time so now

00:09:31,850 --> 00:09:35,650
we're going to look at the

00:09:32,750 --> 00:09:39,590
implementation in the Linux kernel um

00:09:35,650 --> 00:09:42,740
first the first idea that we had when

00:09:39,590 --> 00:09:45,350
implementing this was to use a kind of

00:09:42,740 --> 00:09:47,240
transparent mode in which we would

00:09:45,350 --> 00:09:50,860
configure Mac's egg directly under real

00:09:47,240 --> 00:09:53,270
net device and so that all packets that

00:09:50,860 --> 00:09:55,130
go through the device are just

00:09:53,270 --> 00:09:57,560
transparently encrypted and decrypted

00:09:55,130 --> 00:10:01,970
and you don't really have to care about

00:09:57,560 --> 00:10:03,710
myself anyway it just happens the

00:10:01,970 --> 00:10:07,160
advantage is that you don't have any

00:10:03,710 --> 00:10:08,930
additional net device and it seemed

00:10:07,160 --> 00:10:11,620
easier from a configuration point of

00:10:08,930 --> 00:10:14,210
view it looks like it would just walk

00:10:11,620 --> 00:10:16,550
another advantage that the two-disc

00:10:14,210 --> 00:10:18,020
layer would see only the original packet

00:10:16,550 --> 00:10:20,320
and not the sector again not the

00:10:18,020 --> 00:10:25,670
encrypted page of the IP header anything

00:10:20,320 --> 00:10:29,450
just see the normal packet but there are

00:10:25,670 --> 00:10:32,450
quite a few problems one serious problem

00:10:29,450 --> 00:10:35,690
would be that you would need Hook's in

00:10:32,450 --> 00:10:38,180
packet processing path so that would

00:10:35,690 --> 00:10:41,960
have been hard to get through to get

00:10:38,180 --> 00:10:44,360
commit into the column it also makes it

00:10:41,960 --> 00:10:45,830
very hard to reject packets and receive

00:10:44,360 --> 00:10:50,570
that we are not encrypted and you would

00:10:45,830 --> 00:10:54,380
need some hacks because you they would

00:10:50,570 --> 00:10:57,800
just go through the stack and not get

00:10:54,380 --> 00:11:00,080
through Mac side processing and so these

00:10:57,800 --> 00:11:03,920
various hearts would have been pretty

00:11:00,080 --> 00:11:05,480
much unacceptable oh you would have to

00:11:03,920 --> 00:11:06,120
let the user at some filtering rules

00:11:05,480 --> 00:11:09,000
manually

00:11:06,120 --> 00:11:15,660
but that's pretty much not transparent

00:11:09,000 --> 00:11:17,070
anymore tcpdump capture CPM captures

00:11:15,660 --> 00:11:18,570
also become quite messy because you

00:11:17,070 --> 00:11:21,740
would see both the encrypted and

00:11:18,570 --> 00:11:24,870
unencrypted traffic's and it's hard to

00:11:21,740 --> 00:11:27,990
handle VLANs and to use multiple

00:11:24,870 --> 00:11:30,990
transmit channels that would also have

00:11:27,990 --> 00:11:32,670
been quite difficult because so you can

00:11:30,990 --> 00:11:35,760
have multiple transmit channels on the

00:11:32,670 --> 00:11:38,040
same network on the same net device but

00:11:35,760 --> 00:11:43,640
to choose which transmit channel you

00:11:38,040 --> 00:11:46,950
would use if you have a single upper

00:11:43,640 --> 00:11:50,550
interface in appearance that's a lot

00:11:46,950 --> 00:11:54,810
more difficult so the solution that we

00:11:50,550 --> 00:11:56,970
ended up implementing was creating a new

00:11:54,810 --> 00:12:01,529
network device for each transmit channel

00:11:56,970 --> 00:12:03,839
on your real interface so it was it's it

00:12:01,529 --> 00:12:06,210
looks very similar to what villains or

00:12:03,839 --> 00:12:10,589
mag villains do you have a parent device

00:12:06,210 --> 00:12:12,480
that sees a road traffic so the

00:12:10,589 --> 00:12:15,990
encrypted of putting on my secretary

00:12:12,480 --> 00:12:21,779
packets and also all your non-protected

00:12:15,990 --> 00:12:24,270
traffic's such as all the 802 20x

00:12:21,779 --> 00:12:26,160
traffic that you would maybe have and if

00:12:24,270 --> 00:12:28,410
you want to have some non protected

00:12:26,160 --> 00:12:32,700
normal land traffic then that will also

00:12:28,410 --> 00:12:34,830
be on the parent device and it also much

00:12:32,700 --> 00:12:36,630
is pretty well controlled and

00:12:34,830 --> 00:12:42,900
uncontrolled port model that is used in

00:12:36,630 --> 00:12:45,570
I Triple E standards and from yeah

00:12:42,900 --> 00:12:49,589
it uses the arocs Handler and and your

00:12:45,570 --> 00:12:51,920
static mates okay functions so pretty

00:12:49,589 --> 00:13:00,450
much pretty standard for that device

00:12:51,920 --> 00:13:03,060
virtual devices on so the trip to use

00:13:00,450 --> 00:13:06,270
the crypto channel's crypto API which

00:13:03,060 --> 00:13:09,420
provides all these nice authenticated

00:13:06,270 --> 00:13:11,580
encryption functions and we can also

00:13:09,420 --> 00:13:15,589
just use hardware acceleration for

00:13:11,580 --> 00:13:15,589
example IES and I if it's available

00:13:17,910 --> 00:13:23,480
what the night SEC implementation looks

00:13:19,860 --> 00:13:26,100
like you know bit more detail

00:13:23,480 --> 00:13:31,860
you've got the struct Mac SEC device

00:13:26,100 --> 00:13:35,699
which is the private data for max X max

00:13:31,860 --> 00:13:37,829
take this from that device the Secoya

00:13:35,699 --> 00:13:42,959
parameters in the max length segue

00:13:37,829 --> 00:13:46,100
structure and then you've got transmit

00:13:42,959 --> 00:13:51,389
channel which is also related to the

00:13:46,100 --> 00:13:53,820
security entity and you can have

00:13:51,389 --> 00:14:00,470
multiple receive secure secure channels

00:13:53,820 --> 00:14:04,230
and all the secure channels can have

00:14:00,470 --> 00:14:10,139
secure associations with the keys and

00:14:04,230 --> 00:14:14,220
packet number so the interaction between

00:14:10,139 --> 00:14:16,680
these data structures in so you have you

00:14:14,220 --> 00:14:22,470
have a linked list of all the receive

00:14:16,680 --> 00:14:26,370
secure channels for the for each

00:14:22,470 --> 00:14:29,370
security entity and for the master on

00:14:26,370 --> 00:14:38,699
the device you have a linked list of all

00:14:29,370 --> 00:14:42,510
the children my state devices the Eric

00:14:38,699 --> 00:14:48,959
sender which is also used by all the yet

00:14:42,510 --> 00:14:51,360
your net devices performs the so I don't

00:14:48,959 --> 00:14:54,569
when it receive when you get a Mexichem

00:14:51,360 --> 00:14:58,440
it will identify the secure channel to

00:14:54,569 --> 00:15:01,139
which this frame balloons

00:14:58,440 --> 00:15:03,630
if the SDI is not present in the sec tag

00:15:01,139 --> 00:15:08,149
it will be computed from the MAC address

00:15:03,630 --> 00:15:08,149
and and using the default port number

00:15:08,510 --> 00:15:13,649
otherwise if it's present you just take

00:15:11,370 --> 00:15:17,730
it from the sector and you find the

00:15:13,649 --> 00:15:20,449
receive secure Channel from them from

00:15:17,730 --> 00:15:20,449
the master device

00:15:22,690 --> 00:15:28,390
then you use the crypto parameters that

00:15:25,480 --> 00:15:30,910
are related to this receive secure

00:15:28,390 --> 00:15:34,779
Channel and you can then send a packet

00:15:30,910 --> 00:15:39,910
of the stack under new under message

00:15:34,779 --> 00:15:43,019
that device so as I said we pray

00:15:39,910 --> 00:15:46,600
protection is performed once before

00:15:43,019 --> 00:15:51,540
before crypto and once after crypto and

00:15:46,600 --> 00:15:51,540
then you can update your receive window

00:15:54,360 --> 00:16:04,300
so on the when you have a packet to

00:15:59,380 --> 00:16:06,459
transmit its it goes through the NGO

00:16:04,300 --> 00:16:11,380
statics made function for the max

00:16:06,459 --> 00:16:13,149
TechNet device and since there's a

00:16:11,380 --> 00:16:15,700
one-to-one relationship between the

00:16:13,149 --> 00:16:19,329
magnet device and transmit secure

00:16:15,700 --> 00:16:22,089
channel you just send the packet using

00:16:19,329 --> 00:16:26,200
the parameters the crypto parameters for

00:16:22,089 --> 00:16:28,480
this net device for the magnet device

00:16:26,200 --> 00:16:36,100
and then you send it through the

00:16:28,480 --> 00:16:39,220
underlying real device so the

00:16:36,100 --> 00:16:43,240
configuration API from Mexico is speed

00:16:39,220 --> 00:16:46,060
between RT net link for creating the the

00:16:43,240 --> 00:16:49,240
Max TechNet device and configuring in

00:16:46,060 --> 00:16:52,720
configuring all the parameters that are

00:16:49,240 --> 00:16:58,060
global to the net device and to security

00:16:52,720 --> 00:17:01,120
entity and G in that link to configure

00:16:58,060 --> 00:17:03,220
all the transmit secure associations and

00:17:01,120 --> 00:17:07,150
receive secure station and receive

00:17:03,220 --> 00:17:09,250
secure channels and I use that because

00:17:07,150 --> 00:17:11,020
it provides a nice de multiplexing

00:17:09,250 --> 00:17:13,510
between all the comments for all these

00:17:11,020 --> 00:17:16,390
these different kinds of objects which

00:17:13,510 --> 00:17:22,809
are seen a link does not provide and

00:17:16,390 --> 00:17:25,079
that allows a nicer API design if I have

00:17:22,809 --> 00:17:25,079
time

00:17:25,689 --> 00:17:33,679
okay so I'm going to show you a few use

00:17:30,620 --> 00:17:39,110
of your example of use cases and how you

00:17:33,679 --> 00:17:41,539
can configure a quiz IP rules first you

00:17:39,110 --> 00:17:44,630
could have basic land set up for might

00:17:41,539 --> 00:17:47,000
say if you have a switch that supports

00:17:44,630 --> 00:17:52,070
mexic then you could configure my site

00:17:47,000 --> 00:17:53,360
to be dominated at the switch otherwise

00:17:52,070 --> 00:17:55,730
if you have a switch that doesn't

00:17:53,360 --> 00:17:59,620
support mexic you could just configure

00:17:55,730 --> 00:18:02,330
mexic between the ask themselves and

00:17:59,620 --> 00:18:04,429
that works with any switch and the

00:18:02,330 --> 00:18:05,750
switch would see only max extra ticket

00:18:04,429 --> 00:18:12,950
traffic so if you don't trust your

00:18:05,750 --> 00:18:15,289
switch that's the way to go so a simple

00:18:12,950 --> 00:18:21,320
configuration for our Mexican between

00:18:15,289 --> 00:18:25,399
host 1 and host 2 would be just IP link

00:18:21,320 --> 00:18:29,539
add so you had a message link on top of

00:18:25,399 --> 00:18:32,659
eth0 and then you create your secure

00:18:29,539 --> 00:18:35,419
Association for transmit using the key

00:18:32,659 --> 00:18:42,320
using a key that you have treated

00:18:35,419 --> 00:18:49,220
yourself so IP Mexican at max X 0 Texas

00:18:42,320 --> 00:18:53,240
I serum on to set it active and then

00:18:49,220 --> 00:18:55,490
your initial packet number then you will

00:18:53,240 --> 00:18:57,200
create the receive secure channel on

00:18:55,490 --> 00:18:59,750
that interface on that Mike psych

00:18:57,200 --> 00:19:02,210
interface and create a secure

00:18:59,750 --> 00:19:05,059
Association on for receiving packets

00:19:02,210 --> 00:19:08,510
coming from pasta to so that the key

00:19:05,059 --> 00:19:12,380
here on transmit would match this key on

00:19:08,510 --> 00:19:19,360
receive for the opposite node and yeah

00:19:12,380 --> 00:19:19,360
that switch between between the two

00:19:22,059 --> 00:19:29,389
when yeah one thing is when you reach

00:19:25,850 --> 00:19:31,159
the end of the 32-bit packet number you

00:19:29,389 --> 00:19:34,669
need to switch to a different sexual

00:19:31,159 --> 00:19:39,619
association when the packet number would

00:19:34,669 --> 00:19:42,019
wrap the sexual association disable its

00:19:39,619 --> 00:19:44,049
disables itself so that you don't reuse

00:19:42,019 --> 00:19:49,279
the same packet number with the same key

00:19:44,049 --> 00:19:51,590
and when you have exhausted your secure

00:19:49,279 --> 00:19:53,119
association you need to set up a new key

00:19:51,590 --> 00:19:56,090
and your secure association with a new

00:19:53,119 --> 00:19:58,700
key and then you can using this command

00:19:56,090 --> 00:20:03,080
you can just switch to the next transmit

00:19:58,700 --> 00:20:06,259
secure association if you want to enable

00:20:03,080 --> 00:20:09,830
encryption on on the links you have

00:20:06,259 --> 00:20:14,539
already created you can just set encrypt

00:20:09,830 --> 00:20:17,389
on and you can do that at any time you

00:20:14,539 --> 00:20:21,169
just sends parently white packet are

00:20:17,389 --> 00:20:23,629
going same with replay protection with

00:20:21,169 --> 00:20:30,049
replay on and the window size that you

00:20:23,629 --> 00:20:32,299
want to use so you could configure

00:20:30,049 --> 00:20:34,850
multiple secure channels then you for

00:20:32,299 --> 00:20:39,499
that you just have to create two

00:20:34,850 --> 00:20:41,570
separate mexic net devices and to

00:20:39,499 --> 00:20:50,419
configure a secure channel on the other

00:20:41,570 --> 00:20:53,450
side of that if you want you could also

00:20:50,419 --> 00:20:57,850
use mexico with bombs with bonding your

00:20:53,450 --> 00:21:00,649
trimming devices then you just have to

00:20:57,850 --> 00:21:03,769
put the mexican ed devices instead of

00:21:00,649 --> 00:21:06,109
the underlined link in inside the bond

00:21:03,769 --> 00:21:08,779
you have your IDs Mike site devices to

00:21:06,109 --> 00:21:13,730
the month and configure my second each

00:21:08,779 --> 00:21:20,389
of the individual links for a base and

00:21:13,730 --> 00:21:24,320
set up you could just so you have set up

00:21:20,389 --> 00:21:28,899
with two different two different cloud

00:21:24,320 --> 00:21:32,740
tunnels hey and a and B and suppose that

00:21:28,899 --> 00:21:34,870
tenants a as a face Center for

00:21:32,740 --> 00:21:37,720
itself going through the underlined

00:21:34,870 --> 00:21:46,330
Network and they could just create a

00:21:37,720 --> 00:21:48,790
mexic channel for themselves so the max

00:21:46,330 --> 00:21:51,250
X I get that's the Clutton and transmits

00:21:48,790 --> 00:21:53,830
will be this and then the cloud provider

00:21:51,250 --> 00:21:56,350
would add the encapsulation at the top

00:21:53,830 --> 00:21:58,420
but they cannot do anything about the

00:21:56,350 --> 00:22:05,290
encryption they cannot see the traffic

00:21:58,420 --> 00:22:09,670
that's that the tenant has sent so in

00:22:05,290 --> 00:22:12,580
conclusion what remains to be done so

00:22:09,670 --> 00:22:15,670
first of all Nextec has not he had been

00:22:12,580 --> 00:22:20,440
committed to the kernel but I'm quite

00:22:15,670 --> 00:22:22,179
optimistic you have some optional

00:22:20,440 --> 00:22:24,760
features of Mexico to confidentiality

00:22:22,179 --> 00:22:28,750
offsets so if you are if you are

00:22:24,760 --> 00:22:30,910
transmitting encrypted traffic you could

00:22:28,750 --> 00:22:33,970
decide that you don't want the first 30

00:22:30,910 --> 00:22:36,300
bytes of your packet to be encrypted you

00:22:33,970 --> 00:22:37,900
could decide that say your IP header is

00:22:36,300 --> 00:22:41,440
transmitted in the clear

00:22:37,900 --> 00:22:42,120
Steve integrity protected but not not

00:22:41,440 --> 00:22:44,890
encrypted

00:22:42,120 --> 00:22:47,679
there's also a second cipher suite that

00:22:44,890 --> 00:22:53,710
has been that has been standardized

00:22:47,679 --> 00:22:57,360
using 256 bit keys so I will work on

00:22:53,710 --> 00:23:03,030
that once the basic Mexico has been

00:22:57,360 --> 00:23:06,690
accepted we've been talking about

00:23:03,030 --> 00:23:09,429
hardware flooding with some vandalism

00:23:06,690 --> 00:23:16,870
that would help a lot with performance

00:23:09,429 --> 00:23:20,110
we could reach 10 gig line right and so

00:23:16,870 --> 00:23:23,679
fun of the performance of them basic max

00:23:20,110 --> 00:23:27,429
implementation is not very good but we

00:23:23,679 --> 00:23:31,330
will work on improving that in the

00:23:27,429 --> 00:23:35,290
future in userspace 100 I have only

00:23:31,330 --> 00:23:37,240
implemented IP would support but we are

00:23:35,290 --> 00:23:42,940
looking forward to add a network manager

00:23:37,240 --> 00:23:45,910
support for configuration and to a WPA

00:23:42,940 --> 00:23:46,340
sip account support so WPA is bring up

00:23:45,910 --> 00:23:49,520
already

00:23:46,340 --> 00:23:51,770
as my sexy agreement protocol support

00:23:49,520 --> 00:23:53,539
but we need to hook it up with the net

00:23:51,770 --> 00:23:58,240
link API so that you can configure the

00:23:53,539 --> 00:23:58,240
channel and create the mic sack devices

00:24:03,730 --> 00:24:08,150
so I have only performed some very basic

00:24:06,679 --> 00:24:12,950
tests between two virtual machines

00:24:08,150 --> 00:24:15,650
running on my laptop and I had something

00:24:12,950 --> 00:24:19,130
like 300 megabits per second between the

00:24:15,650 --> 00:24:48,020
two the ends without doing any

00:24:19,130 --> 00:24:50,120
performance tuning what's soda cheese

00:24:48,020 --> 00:24:53,539
are separate for transmit and receive

00:24:50,120 --> 00:24:58,070
and secure associations are separate

00:24:53,539 --> 00:25:01,159
awesome is the PN used to to encrypt

00:24:58,070 --> 00:25:04,370
every friend yeah it's a part of the

00:25:01,159 --> 00:25:08,450
history the bond the pianos used as

00:25:04,370 --> 00:25:13,029
input to create a string it's used as

00:25:08,450 --> 00:25:18,350
part of the IV for payers

00:25:13,029 --> 00:25:21,140
to use the master editing that you have

00:25:18,350 --> 00:25:23,299
to you know to add a pot you do a link

00:25:21,140 --> 00:25:26,809
and port and didn't change the master

00:25:23,299 --> 00:25:30,350
for the device like you're doing in

00:25:26,809 --> 00:25:41,419
greeting and it's mostly not to reveal

00:25:30,350 --> 00:25:43,130
and then to a bond device yeah you are

00:25:41,419 --> 00:25:45,220
joy POS to the Mexican ice and

00:25:43,130 --> 00:25:45,220
everything

00:25:54,390 --> 00:25:59,520
working and maybe my must be all the

00:25:57,630 --> 00:26:01,140
bipod case we have today all of them are

00:25:59,520 --> 00:26:04,280
transparent there's no net they're

00:26:01,140 --> 00:26:07,890
popping up when you do in crimson and

00:26:04,280 --> 00:26:09,980
real mode I'm definitely must clean or

00:26:07,890 --> 00:26:12,360
if you only have a single let them there

00:26:09,980 --> 00:26:14,490
by their specific reasons rather than

00:26:12,360 --> 00:26:16,380
the how easy skipped off terrain with

00:26:14,490 --> 00:26:27,750
implementation for using the multiple

00:26:16,380 --> 00:26:33,540
met them water it's not because um Wi-Fi

00:26:27,750 --> 00:26:45,240
they the encryption is just default mode

00:26:33,540 --> 00:26:50,430
of functioning it's an encryption of

00:26:45,240 --> 00:26:51,780
h-prime very similar kind of surprised

00:26:50,430 --> 00:26:54,150
to see how many different model for

00:26:51,780 --> 00:26:56,610
Ethernet with max at verses two by five

00:26:54,150 --> 00:26:58,050
with hydroxyl horizon because in both

00:26:56,610 --> 00:26:59,610
cases it's going to be that your

00:26:58,050 --> 00:27:01,230
character in practice once you get to

00:26:59,610 --> 00:27:02,850
real bland right that's going to be

00:27:01,230 --> 00:27:08,000
doing crooks and it's not going to be

00:27:02,850 --> 00:27:08,000
some upload areas of water on the

00:27:15,980 --> 00:27:25,790
occasion you can have multiple channels

00:27:22,380 --> 00:27:27,810
to multiple different destinations yes

00:27:25,790 --> 00:27:29,130
the wouldn't a be--' wants to

00:27:27,810 --> 00:27:31,140
distinguish between which channel you

00:27:29,130 --> 00:27:33,360
want to use so you have encryption to

00:27:31,140 --> 00:27:34,860
what house which users like which makes

00:27:33,360 --> 00:27:36,600
the distinction that I get was never

00:27:34,860 --> 00:27:39,450
working for that to work was the routing

00:27:36,600 --> 00:27:40,710
table you want to connect devices we're

00:27:39,450 --> 00:27:45,600
doing that there's an IP address fair

00:27:40,710 --> 00:27:47,160
outing yeah so for example and can you

00:27:45,600 --> 00:27:50,660
show this fact that you had like the

00:27:47,160 --> 00:27:53,370
switch and the two other one that like

00:27:50,660 --> 00:27:55,380
that's yeah this one exactly so this is

00:27:53,370 --> 00:27:57,600
an area for example you make a routing

00:27:55,380 --> 00:28:00,210
scenario we are HP for example have a

00:27:57,600 --> 00:28:03,450
device food and can can communicate this

00:28:00,210 --> 00:28:05,100
post h2 and h1 but for example h1 and h2

00:28:03,450 --> 00:28:07,289
para talk to each other

00:28:05,100 --> 00:28:10,259
and you want to distinguish those

00:28:07,289 --> 00:28:10,950
scenarios over YouTube but does that

00:28:10,259 --> 00:28:13,529
make sense

00:28:10,950 --> 00:28:16,009
I mean if you're doing but your

00:28:13,529 --> 00:28:21,480
encryption is tied to the MAC address

00:28:16,009 --> 00:28:23,669
what does that work together if you're

00:28:21,480 --> 00:28:26,250
selecting the route based on the end

00:28:23,669 --> 00:28:28,529
putress you already also know the MAC

00:28:26,250 --> 00:28:30,299
address so you might as well select the

00:28:28,529 --> 00:28:31,590
security Association based on the MAC

00:28:30,299 --> 00:28:33,929
address because that's where the

00:28:31,590 --> 00:28:35,669
decryption is going to happen based on

00:28:33,929 --> 00:28:38,429
the MAC address it's not going to be

00:28:35,669 --> 00:28:40,259
based on whether you select your

00:28:38,429 --> 00:28:42,029
security Association betas based on the

00:28:40,259 --> 00:28:43,860
IP address that doesn't make any sense

00:28:42,029 --> 00:28:46,590
to me you'd have to select it based on

00:28:43,860 --> 00:28:48,059
the destination MAC address this in

00:28:46,590 --> 00:29:05,190
movements you can have many layers

00:28:48,059 --> 00:29:06,809
between you and Max is a link layer this

00:29:05,190 --> 00:29:08,940
is nothing to do with IP that's why I'm

00:29:06,809 --> 00:29:10,320
very concrete about IP address actually

00:29:08,940 --> 00:29:15,929
not you'll be used to make address you

00:29:10,320 --> 00:29:18,000
can configure yourself how to which

00:29:15,929 --> 00:29:20,820
crypto instance you dispatch tag and

00:29:18,000 --> 00:29:26,580
packet school yes but the receiver is

00:29:20,820 --> 00:29:29,070
going to have to be a MAC address you

00:29:26,580 --> 00:29:44,610
can have multiple channels on the same

00:29:29,070 --> 00:29:46,649
mattress is based on the g4s can you

00:29:44,610 --> 00:29:48,990
bind multiple there by essentially

00:29:46,649 --> 00:29:52,049
having yeah essentially using multicast

00:29:48,990 --> 00:29:54,690
like in this example if H bar needs to

00:29:52,049 --> 00:29:56,789
send to both h1 h2 yeah you could have a

00:29:54,690 --> 00:30:00,289
channel that's you could have a channel

00:29:56,789 --> 00:30:03,419
from H bar that's shared between H bar

00:30:00,289 --> 00:30:06,019
seen sending for to both

00:30:03,419 --> 00:30:06,019
h1 and h2

00:30:07,529 --> 00:30:13,630
or your sniveling movies multiple

00:30:10,210 --> 00:31:10,919
unicast back that's going out of each

00:30:13,630 --> 00:31:14,380
pole that's no it's there's no it's just

00:31:10,919 --> 00:31:16,870
from for example if you have one channel

00:31:14,380 --> 00:31:21,610
going from age four to both h1 and h2

00:31:16,870 --> 00:31:32,950
you just encrypt with this with one h1

00:31:21,610 --> 00:31:35,769
and h2 yes you can also put all in one

00:31:32,950 --> 00:31:37,450
domain when you're more custom like in

00:31:35,769 --> 00:31:38,889
this site before it's just not

00:31:37,450 --> 00:31:42,220
alternative accommodation which is

00:31:38,889 --> 00:31:44,860
possible to do but we suspect they're

00:31:42,220 --> 00:31:46,899
basically or people will just use we

00:31:44,860 --> 00:31:49,690
have one next SEC equals one podcast

00:31:46,899 --> 00:31:53,590
domain and then you do that multicast

00:31:49,690 --> 00:31:57,070
like it's some before so you would put

00:31:53,590 --> 00:31:59,110
h1 through each one there's Matt's XO

00:31:57,070 --> 00:32:01,240
main yeah and then if you chose to use

00:31:59,110 --> 00:32:03,450
multicast as a subset of that you could

00:32:01,240 --> 00:32:03,450
do that

00:32:06,610 --> 00:32:12,080
no it's you have authenticity that you

00:32:10,490 --> 00:32:15,679
know that the packet was actually sent

00:32:12,080 --> 00:32:19,070
by h4 and then you could have h1 good

00:32:15,679 --> 00:32:30,350
eyes it's it's own transmits channel

00:32:19,070 --> 00:32:32,470
with a song so you did a key exchange

00:32:30,350 --> 00:32:34,460
before so you either have like

00:32:32,470 --> 00:32:39,499
one-to-one relationships with multiple

00:32:34,460 --> 00:32:41,330
trees or n2m the pinky which of course

00:32:39,499 --> 00:32:45,259
that you replicate the key to multiple

00:32:41,330 --> 00:32:48,830
peers into the kiss is share one key but

00:32:45,259 --> 00:32:50,929
if a es GCMs oh geez mm eh it's kind of

00:32:48,830 --> 00:33:13,220
an H mix all these parts of RAM it can

00:32:50,929 --> 00:33:15,820
if it cannot no you cannot if someone is

00:33:13,220 --> 00:33:20,779
trusted in such an exit to me

00:33:15,820 --> 00:33:23,690
okay so I can't identify now you know

00:33:20,779 --> 00:33:25,490
that yeah come on I can identify my I

00:33:23,690 --> 00:33:26,840
can move because I have the key but you

00:33:25,490 --> 00:33:26,990
are inside to make sector there yes it

00:33:26,840 --> 00:33:29,779
is

00:33:26,990 --> 00:33:34,159
okay a person if you are if you

00:33:29,779 --> 00:33:36,110
something whose 802.1 ex you know that

00:33:34,159 --> 00:33:38,269
this person was allowed to access the

00:33:36,110 --> 00:33:40,279
switch right and that you basically

00:33:38,269 --> 00:33:42,080
trusted in some level yes and then you

00:33:40,279 --> 00:33:44,389
have met normally they are to within

00:33:42,080 --> 00:33:46,100
this domain yes it's not like secure

00:33:44,389 --> 00:33:47,960
neighbor discovery center or something

00:33:46,100 --> 00:33:50,269
like that yeah when you have like had to

00:33:47,960 --> 00:33:53,169
em verification of neighbor discovery

00:33:50,269 --> 00:33:53,169
friends normal application

00:33:54,860 --> 00:34:03,070
a few questions the first one this is

00:34:05,530 --> 00:34:10,669
the history what we said also to

00:34:08,149 --> 00:34:12,950
implementations it transparent one and

00:34:10,669 --> 00:34:15,919
they meant device one and the net device

00:34:12,950 --> 00:34:23,840
one didn't go upstream little spirit one

00:34:15,919 --> 00:34:37,010
is upstream very similar also

00:34:23,840 --> 00:34:39,679
conceptually and the are extensively

00:34:37,010 --> 00:34:43,970
used for the innovation there's a plug

00:34:39,679 --> 00:35:07,609
one that could get oversubscribed if you

00:34:43,970 --> 00:35:10,840
have two modules using an yeah yeah that

00:35:07,609 --> 00:35:10,840

YouTube URL: https://www.youtube.com/watch?v=LZTxmOMGpwc


