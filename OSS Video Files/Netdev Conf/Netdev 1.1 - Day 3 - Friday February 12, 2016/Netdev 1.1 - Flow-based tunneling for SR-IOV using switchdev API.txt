Title: Netdev 1.1 - Flow-based tunneling for SR-IOV using switchdev API
Publication date: 2016-03-15
Playlist: Netdev 1.1 - Day 3 - Friday February 12, 2016
Description: 
	Ilya Lesokhin, Haggai Eran, Or Gerlitz
February 2016
Captions: 
	00:00:00,319 --> 00:00:07,490
okay so I married amelia this is

00:00:04,680 --> 00:00:10,260
or hogaya fortunately is not here and

00:00:07,490 --> 00:00:16,640
the title of this talk is flow based on

00:00:10,260 --> 00:00:19,529
link for SLV using switch the vape I so

00:00:16,640 --> 00:00:21,960
virtual is set up today usually look

00:00:19,529 --> 00:00:23,939
like this little clicks poses something

00:00:21,960 --> 00:00:26,880
called the tap device which has a native

00:00:23,939 --> 00:00:29,490
on one end and a fuzzy script on the

00:00:26,880 --> 00:00:33,360
other end qml takes this file descriptor

00:00:29,490 --> 00:00:37,829
and uses it to present a virtually any

00:00:33,360 --> 00:00:40,230
device to the guest so with this setup

00:00:37,829 --> 00:00:43,800
when I guess sends a packet it appears

00:00:40,230 --> 00:00:45,710
in that tab and when the packet is sent

00:00:43,800 --> 00:00:49,260
through the tap it appears in the guests

00:00:45,710 --> 00:00:51,480
now in the hypervisor we take this tab

00:00:49,260 --> 00:00:53,610
and connect it to a virtual bridge which

00:00:51,480 --> 00:00:55,649
can be a linux bridge or an obvious

00:00:53,610 --> 00:00:58,199
bridge and that way we control the

00:00:55,649 --> 00:01:02,579
traffic the bridge can for the traffic

00:00:58,199 --> 00:01:08,430
from the yes to the wire or it can drop

00:01:02,579 --> 00:01:09,990
it or to 42 different guests okay now to

00:01:08,430 --> 00:01:13,260
get better performance we can use

00:01:09,990 --> 00:01:15,450
something called then a virtual function

00:01:13,260 --> 00:01:18,090
where instead of the qm you exposing a

00:01:15,450 --> 00:01:20,549
virtual device the Nick how to expose it

00:01:18,090 --> 00:01:22,409
we assign this virtual function to the

00:01:20,549 --> 00:01:23,759
guest and then the guests can talk

00:01:22,409 --> 00:01:26,430
directly to the hardware insect the

00:01:23,759 --> 00:01:28,409
packets this way the problem is that we

00:01:26,430 --> 00:01:32,060
skip the visual bridge in the hypervisor

00:01:28,409 --> 00:01:34,770
and so there's we can't control the

00:01:32,060 --> 00:01:36,810
traffic through it now of course the

00:01:34,770 --> 00:01:38,460
hypervisor does need to have some

00:01:36,810 --> 00:01:40,460
control over their packet that the gear

00:01:38,460 --> 00:01:43,259
sense so the Nick usually have a

00:01:40,460 --> 00:01:45,299
embedded switch which died by Professor

00:01:43,259 --> 00:01:46,320
can configure but the configuration part

00:01:45,299 --> 00:01:48,960
is not really different you don't

00:01:46,320 --> 00:01:51,000
configure it to that bridge up engine I

00:01:48,960 --> 00:01:54,780
browser you can figure it to the path ok

00:01:51,000 --> 00:01:56,520
so this is very inconvenient so what we

00:01:54,780 --> 00:01:59,219
did is we added something called a buff

00:01:56,520 --> 00:02:02,270
represent oh and configure the issue ish

00:01:59,219 --> 00:02:05,070
in the neck so that packets from the

00:02:02,270 --> 00:02:07,020
sent by the guests will arrive with RAF

00:02:05,070 --> 00:02:09,479
representer and packet central the buff

00:02:07,020 --> 00:02:11,520
represent oh will arrive to the guest ok

00:02:09,479 --> 00:02:13,670
exactly like in the case of the tap

00:02:11,520 --> 00:02:16,170
device

00:02:13,670 --> 00:02:19,349
so this this virtual function represent

00:02:16,170 --> 00:02:21,090
or is a critical concept in that we've

00:02:19,349 --> 00:02:23,580
discussing in conference for two years

00:02:21,090 --> 00:02:25,200
and now another Joan that did it we also

00:02:23,580 --> 00:02:27,000
do that that's a critical part to

00:02:25,200 --> 00:02:28,590
understand the next step so we have a

00:02:27,000 --> 00:02:30,750
represent or something that represent a

00:02:28,590 --> 00:02:32,879
virtual function that can be embedded in

00:02:30,750 --> 00:02:38,730
the the convenient in the regular

00:02:32,879 --> 00:02:40,290
virtual switch and yes it's another it's

00:02:38,730 --> 00:02:42,930
like a device it's a net device that

00:02:40,290 --> 00:02:44,670
represent the virtual function and it's

00:02:42,930 --> 00:02:47,069
sort of slope as if you can submit a

00:02:44,670 --> 00:02:48,780
packet to it it arrives to the vm if the

00:02:47,069 --> 00:02:50,069
vm sends a packet and no policy is

00:02:48,780 --> 00:02:51,660
configured in the imbalance which is

00:02:50,069 --> 00:02:54,420
draft by the virtual function and appear

00:02:51,660 --> 00:02:56,310
in the hypervisor ok so why physically

00:02:54,420 --> 00:02:59,250
it looks like this we can conceptually

00:02:56,310 --> 00:03:01,379
think it about it like that so the Viper

00:02:59,250 --> 00:03:03,390
presenter plays exactly the same roles

00:03:01,379 --> 00:03:06,629
the top in the power virtual case and

00:03:03,390 --> 00:03:09,989
now when I have this set up I have all

00:03:06,629 --> 00:03:16,950
the flexibility of prohibition machine

00:03:09,989 --> 00:03:18,329
we with the SLV so the trouble is this

00:03:16,950 --> 00:03:19,889
causes a bunch of problems to the stack

00:03:18,329 --> 00:03:21,359
because you're going to have dhcp and

00:03:19,889 --> 00:03:23,549
all sorts of things right by that and

00:03:21,359 --> 00:03:29,099
sending strange packets over to your vm

00:03:23,549 --> 00:03:32,790
perhaps it's okay but let's continue

00:03:29,099 --> 00:03:34,950
let's continue okay so now i have a the

00:03:32,790 --> 00:03:36,660
same flexibility as far afield but the

00:03:34,950 --> 00:03:38,190
performance of these are not good every

00:03:36,660 --> 00:03:40,680
packet that the guests sense as to go to

00:03:38,190 --> 00:03:43,500
through pci to the knick then the Nixons

00:03:40,680 --> 00:03:45,209
it back and then i have do all the

00:03:43,500 --> 00:03:47,400
normal software processing and send it

00:03:45,209 --> 00:03:49,290
again to the wire which is slow and in a

00:03:47,400 --> 00:03:51,269
recall this the slope of what i would

00:03:49,290 --> 00:03:53,010
like to point out though that is this is

00:03:51,269 --> 00:03:55,500
a very nice point to start off roading

00:03:53,010 --> 00:03:57,209
okay everything works I now off-road

00:03:55,500 --> 00:03:59,400
more and more traffic to their own

00:03:57,209 --> 00:04:01,560
eventually most or even everything will

00:03:59,400 --> 00:04:04,019
be over to the hour and then I will get

00:04:01,560 --> 00:04:07,530
the flexibility of power of you and the

00:04:04,019 --> 00:04:09,000
performance of Esther iov okay i will

00:04:07,530 --> 00:04:10,889
also like to point out that the fact

00:04:09,000 --> 00:04:13,230
that we have to slow path to fall back

00:04:10,889 --> 00:04:15,120
through is very nice for example let's

00:04:13,230 --> 00:04:16,799
say i sent the outer pocket and the

00:04:15,120 --> 00:04:18,840
bridge tell me you had to send it to the

00:04:16,799 --> 00:04:21,209
wire nine times with nine different in

00:04:18,840 --> 00:04:23,610
constellation so I don't want to do it

00:04:21,209 --> 00:04:24,610
in order I can tell the software stack

00:04:23,610 --> 00:04:26,080
please do this for me

00:04:24,610 --> 00:04:29,139
okay I need a bit of help with this

00:04:26,080 --> 00:04:31,360
packet so it's a combined model we can

00:04:29,139 --> 00:04:34,030
choose what we know to offer today we

00:04:31,360 --> 00:04:35,469
offload what's not if we don't want to

00:04:34,030 --> 00:04:37,449
offer he doesn't worth the effort or

00:04:35,469 --> 00:04:40,479
hard we cannot do it today it's it can

00:04:37,449 --> 00:04:42,550
still go source Lopez okay so of course

00:04:40,479 --> 00:04:46,509
this is a nice but we still have to off

00:04:42,550 --> 00:04:48,939
load up so we start by offloading in the

00:04:46,509 --> 00:04:51,099
case that the switch is obvious so

00:04:48,939 --> 00:04:53,680
obvious does flow based protein which is

00:04:51,099 --> 00:04:56,020
nice for out of off-roading it makes the

00:04:53,680 --> 00:04:58,090
decision in your space and the way it

00:04:56,020 --> 00:05:01,000
does it is that the first packet of new

00:04:58,090 --> 00:05:03,819
flows is directed in a user space demon

00:05:01,000 --> 00:05:07,629
core obvious which with D and it inserts

00:05:03,819 --> 00:05:10,810
a cache an entry to a Carol model the

00:05:07,629 --> 00:05:12,550
cache entry and the following packet in

00:05:10,810 --> 00:05:16,750
the same flow it is cache entry and

00:05:12,550 --> 00:05:19,180
afforded in the carrel okay so what do I

00:05:16,750 --> 00:05:21,520
mean by cash entering so obvious as a

00:05:19,180 --> 00:05:24,550
rather complicated the representation in

00:05:21,520 --> 00:05:26,620
user space with multiple bridges there

00:05:24,550 --> 00:05:30,069
are many rules / bridge work with

00:05:26,620 --> 00:05:32,500
priority and when a body kit arrives I

00:05:30,069 --> 00:05:34,839
do the conflicts with the classification

00:05:32,500 --> 00:05:40,300
in each bridge find the highest priority

00:05:34,839 --> 00:05:42,159
rule and then I insert a simple roll

00:05:40,300 --> 00:05:44,379
into the kernel data path from end to

00:05:42,159 --> 00:05:51,159
end for cell from the RAF representer to

00:05:44,379 --> 00:05:53,199
the wire and without priorities okay so

00:05:51,159 --> 00:05:56,580
we decided to offer the rules in there

00:05:53,199 --> 00:06:03,460
right the simple priority simple rules

00:05:56,580 --> 00:06:05,259
but that's not the only option okay so

00:06:03,460 --> 00:06:07,389
if we go back to the high-level

00:06:05,259 --> 00:06:10,270
representation we have the ovs be

00:06:07,389 --> 00:06:13,810
treated in user space we have the Oviatt

00:06:10,270 --> 00:06:16,360
scale model that accelerates things in a

00:06:13,810 --> 00:06:19,120
colonel and we added the layer below it

00:06:16,360 --> 00:06:21,370
in the hard way swish that accelerates

00:06:19,120 --> 00:06:23,740
it even more so we retain the first

00:06:21,370 --> 00:06:27,039
packet concept where the first packet is

00:06:23,740 --> 00:06:28,810
handled in user space and we then it's

00:06:27,039 --> 00:06:31,029
cash in the colonel in the horror and if

00:06:28,810 --> 00:06:35,440
we can offload it it already do it in

00:06:31,029 --> 00:06:37,490
harder so do you I know one of the

00:06:35,440 --> 00:06:39,650
problems with this is it's not really

00:06:37,490 --> 00:06:42,199
with the real switch we like with the

00:06:39,650 --> 00:06:44,990
switch like a a switch that has wild

00:06:42,199 --> 00:06:47,210
cards because because you're using the

00:06:44,990 --> 00:06:50,810
exact match table it works very well for

00:06:47,210 --> 00:06:52,490
your NIC it's not exact manner it's mega

00:06:50,810 --> 00:06:54,139
flows maybe not mega in the order you

00:06:52,490 --> 00:06:56,240
want it but these are flattened and

00:06:54,139 --> 00:06:58,610
collapsed rules right yes they are not

00:06:56,240 --> 00:07:01,250
exactly very suboptimal for a switch put

00:06:58,610 --> 00:07:03,380
it that way and actual switch will not

00:07:01,250 --> 00:07:05,770
want to do this your nick wants to do

00:07:03,380 --> 00:07:09,610
this because it has a very limiting

00:07:05,770 --> 00:07:12,110
hardware capabilities on this aspect

00:07:09,610 --> 00:07:13,970
yeah don't be so sure that we have so

00:07:12,110 --> 00:07:16,639
limiting how the capabilities because we

00:07:13,970 --> 00:07:18,650
did this this way right you are insane

00:07:16,639 --> 00:07:20,690
if you if you push this solution my

00:07:18,650 --> 00:07:21,979
complaint is it works for your thing but

00:07:20,690 --> 00:07:24,250
you need to make sure that you don't

00:07:21,979 --> 00:07:27,050
just optimize for your specific hardware

00:07:24,250 --> 00:07:29,479
which is why I'm here enough John we're

00:07:27,050 --> 00:07:31,880
presenting something we did it's ok so

00:07:29,479 --> 00:07:33,530
your concept we have a bath after this

00:07:31,880 --> 00:07:35,990
week and debated time so I'll let you

00:07:33,530 --> 00:07:38,270
get to your slides ok so let's do an

00:07:35,990 --> 00:07:41,030
example of a float so the bath driver

00:07:38,270 --> 00:07:43,759
sends a packet there is no configuration

00:07:41,030 --> 00:07:47,330
18 days wish so it gets to the rapper

00:07:43,759 --> 00:07:51,590
presenter and again there is a Miss we

00:07:47,330 --> 00:07:53,479
send it to the user space demon so its

00:07:51,590 --> 00:07:57,080
first the packet to the right output and

00:07:53,479 --> 00:08:02,780
injects a insert the new rule to the

00:07:57,080 --> 00:08:05,659
data data path we added a look in OBS to

00:08:02,780 --> 00:08:08,659
offer this to ask the ingress part of

00:08:05,659 --> 00:08:11,780
the flow to offload this flow in the

00:08:08,659 --> 00:08:13,909
future currently the obvious data path

00:08:11,780 --> 00:08:18,860
mandates a full mesh on the ingress prod

00:08:13,909 --> 00:08:20,479
so this is well defined so fluid of our

00:08:18,860 --> 00:08:23,659
presenter we get to our East which

00:08:20,479 --> 00:08:25,460
driver we verify that the socialization

00:08:23,659 --> 00:08:27,889
have the switch same switch IDs so we

00:08:25,460 --> 00:08:30,199
can offer this flow we verified with

00:08:27,889 --> 00:08:32,270
support the required match in the

00:08:30,199 --> 00:08:35,510
required action and we approve the flow

00:08:32,270 --> 00:08:37,969
and the next packet from the same flow

00:08:35,510 --> 00:08:40,399
goes directly through that from the

00:08:37,969 --> 00:08:43,669
webdriver to the physical part without

00:08:40,399 --> 00:08:44,790
any software involvement so so far it's

00:08:43,669 --> 00:08:46,920
the basics right

00:08:44,790 --> 00:08:49,380
I mean today we're going to go further

00:08:46,920 --> 00:08:51,420
and explain what we do for tunneling so

00:08:49,380 --> 00:08:53,640
so far we show the basic concept concept

00:08:51,420 --> 00:08:55,350
of virtual function represent us and we

00:08:53,640 --> 00:08:58,260
how we do it with obvious and how we

00:08:55,350 --> 00:09:00,630
offload traffic which is not tunneled

00:08:58,260 --> 00:09:03,630
now we go even the even deeper and talk

00:09:00,630 --> 00:09:05,520
about tunneling yeah so the main

00:09:03,630 --> 00:09:07,140
challenges in offloading tunneling is

00:09:05,520 --> 00:09:09,120
the way the tunnels are represented in

00:09:07,140 --> 00:09:11,400
obvious and it's good to contrast it to

00:09:09,120 --> 00:09:14,250
the way a villain push and pop work so

00:09:11,400 --> 00:09:16,500
in villain you do push villain and then

00:09:14,250 --> 00:09:18,480
output Utley the uplink port on the

00:09:16,500 --> 00:09:21,420
other end in tunneling you do set

00:09:18,480 --> 00:09:23,640
attributes if you want to n cup and then

00:09:21,420 --> 00:09:26,310
output to a special vehic stein report

00:09:23,640 --> 00:09:28,500
ok there is no connection between this

00:09:26,310 --> 00:09:31,500
week's lan port to the uplink so it's an

00:09:28,500 --> 00:09:33,210
ip-based tunneling ok so when it does in

00:09:31,500 --> 00:09:35,250
software it's multi-layered and then it

00:09:33,210 --> 00:09:36,840
involve the UDP and IP stack that's the

00:09:35,250 --> 00:09:42,030
main difference from between villain

00:09:36,840 --> 00:09:44,280
based ok so the rule lacks both routing

00:09:42,030 --> 00:09:47,250
information and the layer to information

00:09:44,280 --> 00:09:49,260
so we have to obtain this ourselves but

00:09:47,250 --> 00:09:53,340
it was the net because we have to track

00:09:49,260 --> 00:09:55,970
changes in both things ok this problem

00:09:53,340 --> 00:09:59,220
is especially difficult in the gap

00:09:55,970 --> 00:10:01,230
because there I said earlier that they

00:09:59,220 --> 00:10:04,440
want to egress through there I want to

00:10:01,230 --> 00:10:06,600
offer to the ingress prod but in the

00:10:04,440 --> 00:10:08,250
case of vicks on the English world Kent

00:10:06,600 --> 00:10:11,640
or flows flows it doesn't belong to a

00:10:08,250 --> 00:10:13,620
nice which so what we did first with we

00:10:11,640 --> 00:10:18,180
did a fib look up to get the real

00:10:13,620 --> 00:10:23,190
ingress part of the flow also the driver

00:10:18,180 --> 00:10:27,060
needs to listen to future changes but

00:10:23,190 --> 00:10:28,860
this is also not enough assume the

00:10:27,060 --> 00:10:31,830
packet first arrived through a different

00:10:28,860 --> 00:10:33,900
device so we insert roll to the data

00:10:31,830 --> 00:10:35,640
path but we can't offer only do the

00:10:33,900 --> 00:10:38,700
error because they are from this mess

00:10:35,640 --> 00:10:41,070
which and then due to some configuration

00:10:38,700 --> 00:10:46,310
changes that the user does the packets

00:10:41,070 --> 00:10:49,530
now arrive through the first device ok

00:10:46,310 --> 00:10:51,990
so now the obvious that upper floor

00:10:49,530 --> 00:10:54,120
didn't change so I don't get a new Miss

00:10:51,990 --> 00:10:58,770
and a new opportunity to offer their

00:10:54,120 --> 00:11:01,350
flow and the driver of issue HDFS which

00:10:58,770 --> 00:11:05,400
ID number zero doesn't know about this

00:11:01,350 --> 00:11:08,160
flow and it won't offload it so what we

00:11:05,400 --> 00:11:10,290
currently do is we modify the switch

00:11:08,160 --> 00:11:14,670
stuff to be somewhat stateful we had a

00:11:10,290 --> 00:11:18,120
swish of tunnel flow ad which adds rules

00:11:14,670 --> 00:11:22,860
that come through a vixen device for

00:11:18,120 --> 00:11:24,870
example and then we with so renewal

00:11:22,860 --> 00:11:27,960
first interested we do routing and

00:11:24,870 --> 00:11:29,580
operate the right device and then we

00:11:27,960 --> 00:11:32,010
also added to assert a data structure

00:11:29,580 --> 00:11:34,560
that maps outer desk typing to a flow

00:11:32,010 --> 00:11:39,660
and a off-road device and the current of

00:11:34,560 --> 00:11:42,240
loading device okay and now if I get the

00:11:39,660 --> 00:11:45,270
free website for example the following

00:11:42,240 --> 00:11:48,420
IP ranges added I have to go over all

00:11:45,270 --> 00:11:51,089
the flows in that address range do

00:11:48,420 --> 00:11:52,710
routing for each one of those if there

00:11:51,089 --> 00:11:54,330
is a current off-roading device remove

00:11:52,710 --> 00:11:57,000
it from the previous on floating advice

00:11:54,330 --> 00:12:04,709
and move it to the new off-roading

00:11:57,000 --> 00:12:06,900
device how much time do I have now you

00:12:04,709 --> 00:12:08,430
have you had a time like the lower like

00:12:06,900 --> 00:12:10,170
in the five last minutes we were

00:12:08,430 --> 00:12:12,300
discussing let how would I say that that

00:12:10,170 --> 00:12:14,190
the empty half of the glass but this is

00:12:12,300 --> 00:12:16,950
always a wittle how hopeful it cannot be

00:12:14,190 --> 00:12:18,120
that clean right so what we're

00:12:16,950 --> 00:12:21,060
discussing what happens if a route

00:12:18,120 --> 00:12:22,920
changes and stuff like that questions on

00:12:21,060 --> 00:12:26,750
the basic concept of tunneling someone

00:12:22,920 --> 00:12:26,750
is it clear someone has questions

00:12:33,519 --> 00:12:40,760
yeah so you actually have to have two

00:12:38,230 --> 00:12:44,720
interfaces to the application right one

00:12:40,760 --> 00:12:46,970
down to the software v switch and one to

00:12:44,720 --> 00:12:48,470
the hardware to the hard way as ok as

00:12:46,970 --> 00:12:51,380
the way it was done in this

00:12:48,470 --> 00:12:52,850
proof-of-concept we modified the data

00:12:51,380 --> 00:12:54,800
pass in the kernel to do the offloading

00:12:52,850 --> 00:12:56,660
but yesterday we are discussing other

00:12:54,800 --> 00:12:59,480
stuff it seems that the community more

00:12:56,660 --> 00:13:02,029
goes to a direction where user space

00:12:59,480 --> 00:13:03,769
controller would program both the data

00:13:02,029 --> 00:13:05,630
paths and the hardware offload and that

00:13:03,769 --> 00:13:08,089
a key side let's say boys on a policy or

00:13:05,630 --> 00:13:09,980
whatever so but the main i guess like

00:13:08,089 --> 00:13:13,100
simple question is does the application

00:13:09,980 --> 00:13:15,160
have the poles to interfaces or does it

00:13:13,100 --> 00:13:17,329
just see one and effort in this in this

00:13:15,160 --> 00:13:19,370
suggestion only one interface because

00:13:17,329 --> 00:13:23,899
they would work with OBS and obvious

00:13:19,370 --> 00:13:25,550
internally programs the harder you mean

00:13:23,899 --> 00:13:26,899
application like a controller or your me

00:13:25,550 --> 00:13:30,260
know application in that case is the

00:13:26,899 --> 00:13:32,899
virtual switch no no application is the

00:13:30,260 --> 00:13:35,779
consumer of the packets no the consumer

00:13:32,899 --> 00:13:37,519
is not aware ok the consumer in this

00:13:35,779 --> 00:13:38,959
case is a virtual machine that runs the

00:13:37,519 --> 00:13:40,790
virtual function and then they even

00:13:38,959 --> 00:13:42,640
don't know that there is a virtual

00:13:40,790 --> 00:13:45,949
switch and there is tunneling right

00:13:42,640 --> 00:13:49,910
alright so but the right but you have

00:13:45,949 --> 00:13:51,949
two queues or two we have two channels

00:13:49,910 --> 00:13:54,709
because initially the embedded switch

00:13:51,949 --> 00:13:56,209
it's it's a it's a system based on

00:13:54,709 --> 00:13:58,760
learning so initially the how the data

00:13:56,209 --> 00:14:01,130
passes empty and you get a miss you go

00:13:58,760 --> 00:14:03,440
to the software pass then it goes even

00:14:01,130 --> 00:14:05,060
higher to their user space demon which

00:14:03,440 --> 00:14:07,010
maybe goes to the controller they decide

00:14:05,060 --> 00:14:08,750
to do something they put a rule to the

00:14:07,010 --> 00:14:11,630
colonel and that this rule that goes to

00:14:08,750 --> 00:14:14,050
the hardware all right so does applicate

00:14:11,630 --> 00:14:17,329
does the guests always have to pull at

00:14:14,050 --> 00:14:21,680
the guest OS tap the tap interface and

00:14:17,329 --> 00:14:23,480
an SRO the virtual interface no there's

00:14:21,680 --> 00:14:26,390
no tap interface in this case this is

00:14:23,480 --> 00:14:27,709
the power virtual guests if you want to

00:14:26,390 --> 00:14:29,390
add them so you have two types of guests

00:14:27,709 --> 00:14:31,579
you have power virtual guest we're all

00:14:29,390 --> 00:14:32,959
this stuff is not by the way we're

00:14:31,579 --> 00:14:34,220
looking at that case to it we had a

00:14:32,959 --> 00:14:36,860
session yesterday on virtual switch

00:14:34,220 --> 00:14:38,720
acceleration we're havin we are talking

00:14:36,860 --> 00:14:40,340
now to Intel and we have some ideas how

00:14:38,720 --> 00:14:43,520
to further accelerate that but this is

00:14:40,340 --> 00:14:44,930
nice which case where the case is using

00:14:43,520 --> 00:14:48,410
virtual function all right so what about

00:14:44,930 --> 00:14:50,750
buffer me so you so you saying then it

00:14:48,410 --> 00:14:54,950
could you know in advance what buffer

00:14:50,750 --> 00:14:56,750
pool to dma to yeah we the ma directly

00:14:54,950 --> 00:14:58,730
to the guest it has a buff driver it

00:14:56,750 --> 00:15:01,580
talks directly to the harder and gives

00:14:58,730 --> 00:15:03,890
it a but you see the exception has to go

00:15:01,580 --> 00:15:05,570
back through the V switch if there is

00:15:03,890 --> 00:15:08,060
exceptionally if there is exception in

00:15:05,570 --> 00:15:10,430
the hardware data pass like the buffer

00:15:08,060 --> 00:15:12,980
gets there but there's no policy so the

00:15:10,430 --> 00:15:14,690
default policy there is Miss which means

00:15:12,980 --> 00:15:16,280
send it to the hypervisor and then it

00:15:14,690 --> 00:15:19,520
goes into the virtual switch and then it

00:15:16,280 --> 00:15:22,160
goes to userspace you see it has to mrs.

00:15:19,520 --> 00:15:23,690
one missing hardware another missing the

00:15:22,160 --> 00:15:25,280
data past go to user space then

00:15:23,690 --> 00:15:27,920
userspace configure the data path data

00:15:25,280 --> 00:15:30,140
path configure the router and I still

00:15:27,920 --> 00:15:32,930
don't get it I why I see this as two

00:15:30,140 --> 00:15:43,160
hundred faces to buffer polski physician

00:15:32,930 --> 00:15:44,570
and yeah but the idea is that most

00:15:43,160 --> 00:15:46,340
traffic doesn't go through the buff

00:15:44,570 --> 00:15:48,710
represent or it goes directly from the

00:15:46,340 --> 00:15:51,560
buff driver to the nic only the first

00:15:48,710 --> 00:15:55,180
packet where you have this miss yes all

00:15:51,560 --> 00:15:55,180
right and it's also transparent to them

00:15:56,410 --> 00:16:01,640
so if I understand this right it's 0 and

00:15:59,870 --> 00:16:03,200
your SRV we have have the same mac

00:16:01,640 --> 00:16:07,820
address so there's like one interface

00:16:03,200 --> 00:16:10,970
expose externally and so you're doing

00:16:07,820 --> 00:16:13,100
your data flow you know the flows are

00:16:10,970 --> 00:16:16,010
transferred to your SRV BF only after

00:16:13,100 --> 00:16:17,930
you learn based on the VF representative

00:16:16,010 --> 00:16:19,670
that you created when you mean the

00:16:17,930 --> 00:16:21,830
external mac you mean the external mac

00:16:19,670 --> 00:16:24,320
on the on the overlay packet on the

00:16:21,830 --> 00:16:26,390
under a packet the big slam packet no

00:16:24,320 --> 00:16:28,940
I'm just saying that externally from

00:16:26,390 --> 00:16:31,430
this device you know the link partner

00:16:28,940 --> 00:16:33,620
see is only one mac address if you have

00:16:31,430 --> 00:16:36,920
only one guest then yeah it conceal is

00:16:33,620 --> 00:16:38,840
not depends very looking if you look in

00:16:36,920 --> 00:16:39,980
the tunnel packet right it is funneled

00:16:38,840 --> 00:16:41,810
with the characteristic of the

00:16:39,980 --> 00:16:43,580
hypervisor in the physical function in

00:16:41,810 --> 00:16:44,990
the marking disk in this case if you

00:16:43,580 --> 00:16:46,750
look on the inner packet it's the it's

00:16:44,990 --> 00:16:50,980
the mark of the

00:16:46,750 --> 00:16:53,230
right in the non terminal case you have

00:16:50,980 --> 00:16:55,720
a single mac address and you are saying

00:16:53,230 --> 00:16:57,580
some of the flows you want to pass it to

00:16:55,720 --> 00:16:59,710
the SRV instead of handling it in your

00:16:57,580 --> 00:17:01,270
eat 0 driver no in a non tunnel case if

00:16:59,710 --> 00:17:03,640
a guest uses a virtual function of

00:17:01,270 --> 00:17:05,350
course is externally they see this mac

00:17:03,640 --> 00:17:07,360
of the virtual function so why do you

00:17:05,350 --> 00:17:08,860
need the learning I'm not understanding

00:17:07,360 --> 00:17:11,530
why you need to learn from the vm

00:17:08,860 --> 00:17:14,319
represent ater the learning is because

00:17:11,530 --> 00:17:16,180
we want we want the embedded switch to

00:17:14,319 --> 00:17:19,959
follow on the policy of the controller

00:17:16,180 --> 00:17:22,540
right we bring up so so we start with an

00:17:19,959 --> 00:17:24,610
empty data passing hardware we get them

00:17:22,540 --> 00:17:26,350
is someone program us and it's it's

00:17:24,610 --> 00:17:29,500
unlike you know physical switches that

00:17:26,350 --> 00:17:31,420
they learn let's say even layer to this

00:17:29,500 --> 00:17:33,460
is this is this is system that has to be

00:17:31,420 --> 00:17:38,250
programmed and it's a feature it's not a

00:17:33,460 --> 00:17:38,250
bug we want someone to enforce a policy

00:17:39,750 --> 00:17:45,940
sure you work for us I mean if you want

00:17:44,230 --> 00:17:47,710
to imitate Linux bridge and you want to

00:17:45,940 --> 00:17:52,720
learn we can do that and you I mean

00:17:47,710 --> 00:17:54,040
that's we can do it yes but you can have

00:17:52,720 --> 00:17:55,660
look at Ronnie but you can still have

00:17:54,040 --> 00:17:58,660
look and feel as Linux bridge unlike the

00:17:55,660 --> 00:18:00,520
standard SR videos so so this this

00:17:58,660 --> 00:18:02,620
paradigm can be used both for what

00:18:00,520 --> 00:18:04,420
you're saying now for let's say a linux

00:18:02,620 --> 00:18:07,360
bridge that wouldn't we do let l to

00:18:04,420 --> 00:18:09,190
learning but but it's a subset of this

00:18:07,360 --> 00:18:10,810
idea which means that someone can

00:18:09,190 --> 00:18:13,330
program the switch right i mean this is

00:18:10,810 --> 00:18:16,180
it's pretty interesting it's you know

00:18:13,330 --> 00:18:18,010
slightly different but yeah I get where

00:18:16,180 --> 00:18:19,540
you going yeah with the Linux which we

00:18:18,010 --> 00:18:21,880
can do the learning in software and then

00:18:19,540 --> 00:18:23,560
off road the rules in hardware so we and

00:18:21,880 --> 00:18:25,930
we can also in a way to learning and

00:18:23,560 --> 00:18:29,020
harder if you want to yeah you know

00:18:25,930 --> 00:18:30,880
imitate the regular legacy SRV because

00:18:29,020 --> 00:18:35,680
we know that right we know the guest

00:18:30,880 --> 00:18:39,340
mark so we can configure it yes excuse

00:18:35,680 --> 00:18:42,670
me if you have two virtual machines with

00:18:39,340 --> 00:18:44,770
the same mac address and but they're

00:18:42,670 --> 00:18:46,750
supposed to be two different tenants if

00:18:44,770 --> 00:18:50,290
they're using virtual function it's it's

00:18:46,750 --> 00:18:51,880
you typically would give them either you

00:18:50,290 --> 00:18:53,440
don't give them a mac address and they

00:18:51,880 --> 00:18:54,669
randomized it or you

00:18:53,440 --> 00:18:59,080
vision the mac address and it's

00:18:54,669 --> 00:19:00,610
different ok notice you can have two

00:18:59,080 --> 00:19:02,470
different tenants with the same mac

00:19:00,610 --> 00:19:04,629
address it's obvious problem and obvious

00:19:02,470 --> 00:19:06,129
not knows how to deal with it oh you

00:19:04,629 --> 00:19:08,370
could you could tunnel it with a

00:19:06,129 --> 00:19:14,230
different vni as long as they understood

00:19:08,370 --> 00:19:16,960
Lana is it ok yes we supported the idea

00:19:14,230 --> 00:19:20,470
that we at doing exactly what open with

00:19:16,960 --> 00:19:24,009
which want to do right but so you only

00:19:20,470 --> 00:19:26,320
get to send the packet to the open we

00:19:24,009 --> 00:19:28,659
switch right and that doesn't have an

00:19:26,320 --> 00:19:30,279
information about so again you're

00:19:28,659 --> 00:19:33,190
assuming that the two different virtual

00:19:30,279 --> 00:19:34,960
machines there have I think I got your

00:19:33,190 --> 00:19:36,580
point we're not only sending a packet we

00:19:34,960 --> 00:19:38,350
are we are saying it too obvious through

00:19:36,580 --> 00:19:39,730
this representer port and this

00:19:38,350 --> 00:19:43,179
represented port is provisioned by

00:19:39,730 --> 00:19:45,279
OpenStack they know for them it's the vm

00:19:43,179 --> 00:19:47,590
right that's nothing i think this this

00:19:45,279 --> 00:19:50,769
concept it integrate with the whole

00:19:47,590 --> 00:19:52,509
bunch of existing infrastructure that's

00:19:50,769 --> 00:19:54,669
you typically want to do right you want

00:19:52,509 --> 00:19:56,980
to do evolution not revolution so we

00:19:54,669 --> 00:19:59,259
started in a way we started bottom-up we

00:19:56,980 --> 00:20:01,389
planted something down there that

00:19:59,259 --> 00:20:03,399
everyone above sit it's transparent to

00:20:01,389 --> 00:20:04,809
them ok so you just don't send the

00:20:03,399 --> 00:20:07,210
package you sent the only change we need

00:20:04,809 --> 00:20:09,610
it to do because in OpenStack you have

00:20:07,210 --> 00:20:11,769
two types of node is a powerful OS or

00:20:09,610 --> 00:20:14,769
event this is sort of mixture so we have

00:20:11,769 --> 00:20:17,710
some patches to OpenStack to do to the

00:20:14,769 --> 00:20:19,210
neutron agent to deal with that ok so

00:20:17,710 --> 00:20:21,639
you sensing very very low in the

00:20:19,210 --> 00:20:23,110
OpenStack infrastructure ok and we don't

00:20:21,639 --> 00:20:24,909
only offload the forwarding we also

00:20:23,110 --> 00:20:27,009
offer of the end cup so in your example

00:20:24,909 --> 00:20:29,200
obvious will use different encapsulation

00:20:27,009 --> 00:20:30,820
with different if we and I depending on

00:20:29,200 --> 00:20:32,860
the tenets and we will do exactly the

00:20:30,820 --> 00:20:34,870
same route where we are going to add

00:20:32,860 --> 00:20:37,330
encapsulation energy and I to the packet

00:20:34,870 --> 00:20:39,370
the interface name of the vs representer

00:20:37,330 --> 00:20:40,600
would be different and wow that maybe I

00:20:39,370 --> 00:20:46,570
wasn't pretty but I have a buffer

00:20:40,600 --> 00:20:48,009
presenter for each valve ok sure buffy

00:20:46,570 --> 00:20:49,450
is how we say virtual function in here

00:20:48,009 --> 00:20:52,700
boo excuse us

00:20:49,450 --> 00:20:54,050
we save love and puff but it's physical

00:20:52,700 --> 00:21:03,380
function and virtual function this gives

00:20:54,050 --> 00:21:05,270
us for their Hebrew jalgaon ok so we

00:21:03,380 --> 00:21:07,130
also have an issue with them to you what

00:21:05,270 --> 00:21:11,330
do we do if the encapsulated packet

00:21:07,130 --> 00:21:13,400
might might exceed them to you ok we are

00:21:11,330 --> 00:21:14,810
not exactly sure what open obvious does

00:21:13,400 --> 00:21:18,680
about it we saw that it sometimes

00:21:14,810 --> 00:21:20,420
fragments the packet five minutes ok so

00:21:18,680 --> 00:21:22,070
what we decided to do is we think that

00:21:20,420 --> 00:21:24,110
the VAR a presenter should reflect the

00:21:22,070 --> 00:21:27,320
bathroom to you and we all know offload

00:21:24,110 --> 00:21:28,490
the flows if the MTU of the if they're

00:21:27,320 --> 00:21:30,230
our presenters and pupils in

00:21:28,490 --> 00:21:35,900
encapsulation had the wordings won't

00:21:30,230 --> 00:21:37,430
exceed the portent you ok so we with

00:21:35,900 --> 00:21:41,480
this approach we have flow based off

00:21:37,430 --> 00:21:44,060
load which provides provides a surveyor

00:21:41,480 --> 00:21:48,320
IV performance with power via like Lex

00:21:44,060 --> 00:21:51,470
ability we show the feasibility of this

00:21:48,320 --> 00:21:53,510
approach is open with which we will we

00:21:51,470 --> 00:21:57,320
hope with we can accelerate or linux

00:21:53,510 --> 00:22:01,310
bridge and we hope to offload it to

00:21:57,320 --> 00:22:04,460
upstream this work so a number of open

00:22:01,310 --> 00:22:08,500
issues we have that we would like to as

00:22:04,460 --> 00:22:10,640
to that we would like you to help us so

00:22:08,500 --> 00:22:12,290
there is a question who should ask the

00:22:10,640 --> 00:22:14,720
driver to offload the flows whether it's

00:22:12,290 --> 00:22:19,190
obvious oh is it we switch d so what

00:22:14,720 --> 00:22:20,900
interface this is nothing what do we do

00:22:19,190 --> 00:22:23,180
is the D capsulation problem which we

00:22:20,900 --> 00:22:26,600
showed you earlier can we have the stage

00:22:23,180 --> 00:22:30,230
stateful switch dev or maybe a new

00:22:26,600 --> 00:22:33,230
different management model or every

00:22:30,230 --> 00:22:41,320
driver have to keep keep a list of these

00:22:33,230 --> 00:22:41,320
flows that's it questions

00:22:45,440 --> 00:22:52,860
use OBS to do the offloading like to the

00:22:50,490 --> 00:22:55,350
the uplink driver obvious must have a

00:22:52,860 --> 00:22:57,960
notion of an uplink right I'm not sure

00:22:55,350 --> 00:22:59,910
if it has already yeah it should know

00:22:57,960 --> 00:23:01,650
which bear does the package if you don't

00:22:59,910 --> 00:23:03,450
do it if you don't do tunneling if you

00:23:01,650 --> 00:23:05,030
do darling there is no uplink in obvious

00:23:03,450 --> 00:23:07,740
right because they go to the IP stack

00:23:05,030 --> 00:23:10,110
that is correct but for the offloading

00:23:07,740 --> 00:23:12,570
rule has to come to the uplink driver

00:23:10,110 --> 00:23:15,210
right uplink port so we do right look up

00:23:12,570 --> 00:23:16,950
when we connect between the logical

00:23:15,210 --> 00:23:19,470
interface of the tunneling end point to

00:23:16,950 --> 00:23:22,170
the IP link to the uplink to determine

00:23:19,470 --> 00:23:24,000
that this IP tunnel goes to something

00:23:22,170 --> 00:23:29,520
which is routed to the same embedded

00:23:24,000 --> 00:23:31,830
switch okay you see women in the non

00:23:29,520 --> 00:23:34,830
tunnel case you do have an uplink there

00:23:31,830 --> 00:23:36,420
and it's it's the physical function

00:23:34,830 --> 00:23:38,880
interface can service as an uplink

00:23:36,420 --> 00:23:43,050
representer in that case but if you do

00:23:38,880 --> 00:23:45,210
use tunneling you have a virtual porter

00:23:43,050 --> 00:23:48,120
in obvious let's say weeks none or envy

00:23:45,210 --> 00:23:49,820
GRE or something and what illy explained

00:23:48,120 --> 00:23:52,820
that we do right look up and we link it

00:23:49,820 --> 00:23:52,820
okay

00:24:00,180 --> 00:24:12,070
doesn't it seems like doing the having

00:24:09,220 --> 00:24:13,720
the PF do the uplink and have to do a

00:24:12,070 --> 00:24:16,870
fib look up as a non-starter right

00:24:13,720 --> 00:24:20,260
having the the drivers doing routing

00:24:16,870 --> 00:24:21,610
tasks internally is is really you can do

00:24:20,260 --> 00:24:23,260
it in the switch do you think about it

00:24:21,610 --> 00:24:24,790
is it being done in the switch Devlin's

00:24:23,260 --> 00:24:26,650
that doesn't have to be done in the

00:24:24,790 --> 00:24:27,820
driver still shouldn't even be done in

00:24:26,650 --> 00:24:28,930
the switch step layer it's a bit of a

00:24:27,820 --> 00:24:30,880
weird thing I think we need an

00:24:28,930 --> 00:24:33,250
abstraction there and I'm not sure

00:24:30,880 --> 00:24:34,690
question and some kind of a abstraction

00:24:33,250 --> 00:24:38,440
right we will end up doing that in user

00:24:34,690 --> 00:24:39,760
space so some business logic in user

00:24:38,440 --> 00:24:41,830
space will do this route look up and

00:24:39,760 --> 00:24:43,510
determine right yeah I'm just trying to

00:24:41,830 --> 00:24:47,740
make the point i think the driver has no

00:24:43,510 --> 00:24:49,930
business doing the routing stuff ok so

00:24:47,740 --> 00:24:51,580
yeah we agree it should be in some sense

00:24:49,930 --> 00:24:53,080
it's in the offloading layer and the

00:24:51,580 --> 00:25:02,170
Holding layer is not a driver agree

00:24:53,080 --> 00:25:04,240
differently Judy so do you also do the

00:25:02,170 --> 00:25:05,950
stats on the VF representer then you

00:25:04,240 --> 00:25:07,990
would do you also do the stats on the

00:25:05,950 --> 00:25:11,410
representative that's of evil was

00:25:07,990 --> 00:25:14,170
censored a vm well we like that we'll

00:25:11,410 --> 00:25:15,970
get there now are you going to talk

00:25:14,170 --> 00:25:17,920
about the paravirtualization yeah it's

00:25:15,970 --> 00:25:19,360
it's currently it's very of course today

00:25:17,920 --> 00:25:21,310
and Linux you have an N do by the way

00:25:19,360 --> 00:25:23,920
that was added by mellanox by on Ben

00:25:21,310 --> 00:25:25,960
Alicia and myself that you could read

00:25:23,920 --> 00:25:28,720
the virtue of the statistical of the

00:25:25,960 --> 00:25:30,820
virtual port right so think that we have

00:25:28,720 --> 00:25:34,030
already this data we just have to plug

00:25:30,820 --> 00:25:36,760
it to them so there are two types of

00:25:34,030 --> 00:25:38,710
sites by the way right so there's times

00:25:36,760 --> 00:25:40,660
per port and starts by flow that was

00:25:38,710 --> 00:25:44,440
discussed yesterday so we will plan to

00:25:40,660 --> 00:25:50,550
support both of them because for aging

00:25:44,440 --> 00:25:55,440
purposes you need / flow statistics so

00:25:50,550 --> 00:26:01,030
that's I Jesse so that's a whole another

00:25:55,440 --> 00:26:02,880
party ok so no more questions times over

00:26:01,030 --> 00:26:04,940
ok so thank you

00:26:02,880 --> 00:26:04,940

YouTube URL: https://www.youtube.com/watch?v=RDJJN5wUQUM


