Title: Netdev 1.1 - Using the VRF Implementation in Linux
Publication date: 2016-03-15
Playlist: Netdev 1.1 - Day 3 - Friday February 12, 2016
Description: 
	David Ahern
February 2016
Captions: 
	00:00:00,020 --> 00:00:06,060
all right my name is David Ahern and I

00:00:02,879 --> 00:00:09,080
work for cumulus networks and I wanted

00:00:06,060 --> 00:00:11,099
to walk through how to use the vrf

00:00:09,080 --> 00:00:14,370
implementation that was added to the

00:00:11,099 --> 00:00:16,789
Linux kernel this past summer so how

00:00:14,370 --> 00:00:20,369
many people are familiar with the vrf

00:00:16,789 --> 00:00:24,859
concept or what's going on few people

00:00:20,369 --> 00:00:28,550
yeah okay awesome

00:00:24,859 --> 00:00:31,439
so I'll start with a quick overview of

00:00:28,550 --> 00:00:33,840
what has been implemented kernel

00:00:31,439 --> 00:00:36,360
features and such and then just get into

00:00:33,840 --> 00:00:39,420
use cases and you know I've got some

00:00:36,360 --> 00:00:40,829
simulations running which show you know

00:00:39,420 --> 00:00:43,170
a lot of the concepts and can see the

00:00:40,829 --> 00:00:45,210
commands and stuff so definitely for

00:00:43,170 --> 00:00:46,770
every use case if you have questions you

00:00:45,210 --> 00:00:52,559
know let's stop with run commands let's

00:00:46,770 --> 00:00:54,629
you know show you what's going on so the

00:00:52,559 --> 00:00:55,949
virtual routing and forwarding concept

00:00:54,629 --> 00:00:59,899
is really just about using multiple

00:00:55,949 --> 00:01:02,010
network routing tables and you've got

00:00:59,899 --> 00:01:04,080
interfaces network interfaces like the

00:01:02,010 --> 00:01:06,540
front panel ports on a switch that you

00:01:04,080 --> 00:01:10,229
won't associate route lookups with

00:01:06,540 --> 00:01:15,060
particular tables so an implementation

00:01:10,229 --> 00:01:17,520
using modeling the vrf as a layer 3 net

00:01:15,060 --> 00:01:20,909
device was added to the Linux kernel

00:01:17,520 --> 00:01:23,390
this past summer and similar to a bridge

00:01:20,909 --> 00:01:26,400
you would create a V RF device and

00:01:23,390 --> 00:01:29,460
enslave any of the interfaces to that

00:01:26,400 --> 00:01:31,740
layer 3 master device and then any

00:01:29,460 --> 00:01:34,259
packets going through that route lookups

00:01:31,740 --> 00:01:36,570
for those interfaces are associated with

00:01:34,259 --> 00:01:39,659
a specific table that's that's

00:01:36,570 --> 00:01:41,130
associated with the master device from

00:01:39,659 --> 00:01:43,290
an applications perspective what's

00:01:41,130 --> 00:01:46,860
expected is to use the the soÃ¶ binder

00:01:43,290 --> 00:01:50,100
device paradigm as a way of binding a

00:01:46,860 --> 00:01:52,590
socket to that l3 domain so that packets

00:01:50,100 --> 00:01:55,320
and route lookups are using the proper

00:01:52,590 --> 00:01:58,590
the proper table and an important thing

00:01:55,320 --> 00:02:00,619
here is that what V RF is is an l-3

00:01:58,590 --> 00:02:03,360
concept we're really going after

00:02:00,619 --> 00:02:05,670
manipulating droughts lookups we're not

00:02:03,360 --> 00:02:08,610
looking at you know necessarily a tight

00:02:05,670 --> 00:02:10,349
security model or device separation

00:02:08,610 --> 00:02:13,160
which is more of the namespace type

00:02:10,349 --> 00:02:13,160
implementation

00:02:13,640 --> 00:02:20,430
so features by kernel version the the

00:02:17,549 --> 00:02:23,340
initial ipv4 support was added into the

00:02:20,430 --> 00:02:27,090
Florida for a 4.3 kernel and then the

00:02:23,340 --> 00:02:30,299
next release got ipv6 support and then

00:02:27,090 --> 00:02:33,510
this current version version 4.5 has

00:02:30,299 --> 00:02:34,290
what I call a vrf global socket

00:02:33,510 --> 00:02:37,590
capability

00:02:34,290 --> 00:02:40,290
so essentially you can have one process

00:02:37,590 --> 00:02:42,720
that has a listen socket and it can take

00:02:40,290 --> 00:02:44,970
connections over any of the l3 domains

00:02:42,720 --> 00:02:47,040
and then those child sockets that are

00:02:44,970 --> 00:02:50,450
derived from it are bound to the l3

00:02:47,040 --> 00:02:54,540
domain that the packet originated on and

00:02:50,450 --> 00:02:56,910
one important comment here is that in

00:02:54,540 --> 00:02:59,129
addition to an updated kernel to use the

00:02:56,910 --> 00:03:03,659
features you also need an updated IP rel

00:02:59,129 --> 00:03:07,290
to so what are some of the advantages

00:03:03,659 --> 00:03:09,569
why and net device so really it comes

00:03:07,290 --> 00:03:11,430
back to that the net device is one of

00:03:09,569 --> 00:03:14,609
the key modeling elements networking

00:03:11,430 --> 00:03:18,049
elements for the Linux kernel and it's

00:03:14,609 --> 00:03:21,930
it's a way of providing an anchor for

00:03:18,049 --> 00:03:25,290
addresses for TCP dump or packet capture

00:03:21,930 --> 00:03:28,200
programs it allows you to put net filter

00:03:25,290 --> 00:03:30,450
rules or traffic travel classification

00:03:28,200 --> 00:03:33,900
rules it gives something to anchor those

00:03:30,450 --> 00:03:37,859
those concepts to and another thing is

00:03:33,900 --> 00:03:40,829
that you can layer l3 or V are apps

00:03:37,859 --> 00:03:42,930
within namespaces which are in l1

00:03:40,829 --> 00:03:44,989
separation so namespaces go about

00:03:42,930 --> 00:03:48,150
dividing things at a device layer and up

00:03:44,989 --> 00:03:51,379
the vrf is going at separating things at

00:03:48,150 --> 00:03:51,379
the l3 throughout later

00:03:52,609 --> 00:03:59,190
so the conceptually that the basics are

00:03:55,410 --> 00:04:00,720
just create a device when you create

00:03:59,190 --> 00:04:04,260
that device it gets associated with a

00:04:00,720 --> 00:04:06,870
table you set up your fib rules which as

00:04:04,260 --> 00:04:10,169
it's doing the route lookups say that oh

00:04:06,870 --> 00:04:12,209
this is a master device I need this OIF

00:04:10,169 --> 00:04:16,169
means I need to go to this table ID to

00:04:12,209 --> 00:04:19,320
do my lookup so with that created you

00:04:16,169 --> 00:04:21,510
then enslave a device to it and then

00:04:19,320 --> 00:04:24,870
from that point on the packets that come

00:04:21,510 --> 00:04:26,639
in that enslave device are redirected to

00:04:24,870 --> 00:04:28,860
the vrf device so

00:04:26,639 --> 00:04:32,370
when an application has a socket bound

00:04:28,860 --> 00:04:34,949
to it the packets will flow into it okay

00:04:32,370 --> 00:04:40,319
so that fundamentally is was what's

00:04:34,949 --> 00:04:43,050
taking place so there are quite a few

00:04:40,319 --> 00:04:48,539
steps that's needed to set up and create

00:04:43,050 --> 00:04:51,120
a vrf domain and I do want to simplify

00:04:48,539 --> 00:04:54,180
this looking at maybe having like an IP

00:04:51,120 --> 00:04:56,699
vrf sub command where you can just do a

00:04:54,180 --> 00:04:59,460
vrf ad and it'll do most of the stuff

00:04:56,699 --> 00:05:01,879
behind the scenes but essentially what

00:04:59,460 --> 00:05:06,509
we're doing here is adding the device

00:05:01,879 --> 00:05:10,409
adding an alias to IP route twos common

00:05:06,509 --> 00:05:13,800
to name conversions inserting the rules

00:05:10,409 --> 00:05:17,370
for both ipv4 and ipv6 the fill rules

00:05:13,800 --> 00:05:20,340
which direct the lookups and then IP

00:05:17,370 --> 00:05:22,560
default routes in that table so as you

00:05:20,340 --> 00:05:25,439
create a new BRF device it's really good

00:05:22,560 --> 00:05:27,539
to have a developer route for that table

00:05:25,439 --> 00:05:32,219
otherwise it'll fall through to the next

00:05:27,539 --> 00:05:34,500
table and then set the device up because

00:05:32,219 --> 00:05:36,440
if the device is down packets will not

00:05:34,500 --> 00:05:39,690
flow through the through the entire vrf

00:05:36,440 --> 00:05:42,870
so in later slides when I have the

00:05:39,690 --> 00:05:44,190
shortcut vrf create this is what I mean

00:05:42,870 --> 00:05:48,330
this is the set of commands that's

00:05:44,190 --> 00:05:50,870
getting run when you see that alright so

00:05:48,330 --> 00:05:55,439
let's just dive right into use cases and

00:05:50,870 --> 00:05:58,259
so vrf has very has a few standardized

00:05:55,439 --> 00:06:01,379
deployment implementations and one of

00:05:58,259 --> 00:06:03,539
those this management Bri so what we're

00:06:01,379 --> 00:06:05,310
going after here is this this notion of

00:06:03,539 --> 00:06:07,020
separating your management traffic from

00:06:05,310 --> 00:06:08,789
your data playing traffic you've got

00:06:07,020 --> 00:06:10,620
front panel ports you want those to be

00:06:08,789 --> 00:06:13,889
associated with what the table

00:06:10,620 --> 00:06:15,860
you got management interfaces puppet

00:06:13,889 --> 00:06:17,879
chef SNMP ntpd

00:06:15,860 --> 00:06:21,650
DHCP all these kind of things that you

00:06:17,879 --> 00:06:21,650
want to go out the management interface

00:06:22,310 --> 00:06:27,139
so the first thing to do is create your

00:06:25,159 --> 00:06:31,620
you create your management curve

00:06:27,139 --> 00:06:33,419
associated with an alternative table set

00:06:31,620 --> 00:06:38,159
the management interface which is e0

00:06:33,419 --> 00:06:38,880
into the V RF device and then from that

00:06:38,159 --> 00:06:40,289
point on

00:06:38,880 --> 00:06:42,629
you've got a working

00:06:40,289 --> 00:06:46,949
a working management Verve and so to

00:06:42,629 --> 00:06:50,669
show you that I have a simulation going

00:06:46,949 --> 00:06:52,770
here and with this rather low resolution

00:06:50,669 --> 00:07:01,199
monitor we'll be doing a lot of a lot of

00:06:52,770 --> 00:07:03,360
window flipping back and forth so get to

00:07:01,199 --> 00:07:10,710
the right window here all right so this

00:07:03,360 --> 00:07:13,129
is my my switch and by default or I

00:07:10,710 --> 00:07:15,330
should say not by default yet so this

00:07:13,129 --> 00:07:18,899
this is really a virtual machine with

00:07:15,330 --> 00:07:23,039
eight swp ports so eight front panel

00:07:18,899 --> 00:07:25,039
ports modeled and it has a management

00:07:23,039 --> 00:07:27,659
interface to go with that

00:07:25,039 --> 00:07:32,729
so what's that's eat zero so we've got

00:07:27,659 --> 00:07:35,969
eight zero here and then several in

00:07:32,729 --> 00:07:38,789
front panel ports or to use the

00:07:35,969 --> 00:07:40,770
abbreviated version of the show which is

00:07:38,789 --> 00:07:44,789
still too wide for this low red screen

00:07:40,770 --> 00:07:50,189
but anyway go with the idea here so when

00:07:44,789 --> 00:07:51,930
you look at the main table you see the

00:07:50,189 --> 00:07:53,399
front panel ports are all all the routes

00:07:51,930 --> 00:07:54,959
and affected routes associated with the

00:07:53,399 --> 00:07:57,449
front panel ports are in the main table

00:07:54,959 --> 00:07:59,009
so by default quagga or anything else

00:07:57,449 --> 00:08:02,069
running is gonna be looking at these

00:07:59,009 --> 00:08:04,110
tables but if you wanted to use an

00:08:02,069 --> 00:08:07,919
application going out the management VR

00:08:04,110 --> 00:08:14,519
app you would have to look at the

00:08:07,919 --> 00:08:15,869
management table okay so here you can

00:08:14,519 --> 00:08:18,269
see the default route for the management

00:08:15,869 --> 00:08:21,449
interface the connected routes anything

00:08:18,269 --> 00:08:23,909
else that you will wear you so the next

00:08:21,449 --> 00:08:28,709
problem becomes well how do you run a

00:08:23,909 --> 00:08:32,569
process in that management context so

00:08:28,709 --> 00:08:35,939
you have to either bind to that device

00:08:32,569 --> 00:08:38,279
so for example ping dash capital is

00:08:35,939 --> 00:08:43,610
saying do a socket by a new device to

00:08:38,279 --> 00:08:49,769
vrf management and let's ping the

00:08:43,610 --> 00:08:53,100
management gateway okay so you can see

00:08:49,769 --> 00:08:56,279
the traffic's going out that but

00:08:53,100 --> 00:08:58,560
now clearly I'm on console let me

00:08:56,279 --> 00:09:00,839
restart the virtual machine we'll start

00:08:58,560 --> 00:09:28,170
that over again and I will get a

00:09:00,839 --> 00:09:32,839
different login okay so we're all good

00:09:28,170 --> 00:09:32,839
Namie uh get out of that

00:09:40,639 --> 00:09:50,129
okay now I won't kill anything when I do

00:09:43,979 --> 00:09:52,290
a ctrl C okay so now another another

00:09:50,129 --> 00:09:57,299
thing is coming into the box so if you

00:09:52,290 --> 00:10:02,959
noticed I'm coming in on 422 I didn't

00:09:57,299 --> 00:10:05,369
SSH into the box which my ol alias is

00:10:02,959 --> 00:10:07,109
just using an SSH lab which means I

00:10:05,369 --> 00:10:10,079
don't care about the key and I'm gonna

00:10:07,109 --> 00:10:14,429
run SSH for that IP address so I've used

00:10:10,079 --> 00:10:21,660
SSH to come into the VM and I'm coming

00:10:14,429 --> 00:10:26,189
in through the management interface so

00:10:21,660 --> 00:10:29,039
you can see here that I'm bound to port

00:10:26,189 --> 00:10:32,279
22 and this is an example of using that

00:10:29,039 --> 00:10:35,069
vrf global rather one sshd instance and

00:10:32,279 --> 00:10:37,979
when the connection came through the vrf

00:10:35,069 --> 00:10:41,129
management domain that socket became

00:10:37,979 --> 00:10:42,959
bound to that domain automatically so I

00:10:41,129 --> 00:10:55,439
didn't have to keep spinning off SSH DS

00:10:42,959 --> 00:11:02,339
per domain yes this version yep there

00:10:55,439 --> 00:11:09,589
you go so yeah yeah I didn't realize

00:11:02,339 --> 00:11:14,309
that updated SST RSS in this I'm sorry

00:11:09,589 --> 00:11:17,449
no no so ping has always had the - I for

00:11:14,309 --> 00:11:25,409
ipv4 ping is a binded device ping six

00:11:17,449 --> 00:11:28,189
uses packet info to set yep so that

00:11:25,409 --> 00:11:28,189
would be the other one

00:11:32,720 --> 00:11:37,819
so if I were to do a pinging six on

00:11:42,589 --> 00:11:54,269
that's the address

00:11:44,399 --> 00:11:56,579
yep nope all right I'd have to go back

00:11:54,269 --> 00:11:58,739
and look at what I used had different I

00:11:56,579 --> 00:12:01,889
have different addresses for front panel

00:11:58,739 --> 00:12:04,290
ports versus management interface but

00:12:01,889 --> 00:12:08,629
the ping sex I can show that on it on

00:12:04,290 --> 00:12:08,629
another demo that pink sex works as well

00:12:17,810 --> 00:12:33,860
oh I know I know I didn't do okay

00:12:32,060 --> 00:12:36,920
anyway we'll come back to that one on a

00:12:33,860 --> 00:12:40,269
later demo from a rules perspective I've

00:12:36,920 --> 00:12:40,269
mentioned that there were rules in place

00:12:40,629 --> 00:12:47,629
and I ran a script that didn't need to

00:12:45,589 --> 00:12:51,230
for this one but here is essentially the

00:12:47,629 --> 00:12:52,819
two rules that tell the management that

00:12:51,230 --> 00:12:54,949
the create the management vrf and tell

00:12:52,819 --> 00:13:00,860
those lookups to go to the management

00:12:54,949 --> 00:13:03,529
table coming in through the swp

00:13:00,860 --> 00:13:07,699
interface and the device gets switched

00:13:03,529 --> 00:13:12,230
from swp you are in this case 8:02 vrf

00:13:07,699 --> 00:13:24,589
management device so now the IAF is the

00:13:12,230 --> 00:13:27,009
RF management so you yes right now I'm

00:13:24,589 --> 00:13:27,009
not working

00:13:41,190 --> 00:13:56,060
okay so now if we came back to the host

00:13:44,759 --> 00:13:56,060
of us okay and so if I put that back

00:14:03,649 --> 00:14:09,269
someone started getting fresh

00:14:06,980 --> 00:14:10,800
downloading a repository anyway

00:14:09,269 --> 00:14:13,040
networking will come back in a second

00:14:10,800 --> 00:14:13,040
and

00:14:24,740 --> 00:14:29,230
I can get this thing to come back to me

00:14:29,500 --> 00:14:46,430
yes I'm sorry No yeah so that's why I'm

00:14:42,250 --> 00:14:49,279
you're right thank you so yes networking

00:14:46,430 --> 00:14:53,570
stopped as I said that was a very

00:14:49,279 --> 00:15:03,290
important thing to remind me on so I

00:14:53,570 --> 00:15:04,420
should go to look at that networking is

00:15:03,290 --> 00:15:08,029
back

00:15:04,420 --> 00:15:10,430
so there you go it's so both the ingress

00:15:08,029 --> 00:15:12,980
and the the egress are needed from a

00:15:10,430 --> 00:15:15,230
rules perspective to direct the packets

00:15:12,980 --> 00:15:21,200
to the right management or the right vrf

00:15:15,230 --> 00:15:31,660
table and then similarly there are IP

00:15:21,200 --> 00:15:31,660
six rules these guys so same thing

00:15:32,470 --> 00:15:53,270
alright just to the vrf table so if

00:15:51,560 --> 00:15:54,589
you're looking at the main table you see

00:15:53,270 --> 00:15:58,310
these are there's nothing in here

00:15:54,589 --> 00:16:01,310
related to e zero and if you look at the

00:15:58,310 --> 00:16:09,730
management table you'll see both the

00:16:01,310 --> 00:16:09,730
local routes and thank you

00:16:10,570 --> 00:16:15,560
so you see both the local routes and the

00:16:13,190 --> 00:16:17,660
connected realms so everything

00:16:15,560 --> 00:16:26,560
associated with the vrf is in the vrf

00:16:17,660 --> 00:16:28,550
table and they're looking at local table

00:16:26,560 --> 00:16:30,740
see nothing in there these are all

00:16:28,550 --> 00:16:31,850
associated with the swp ports nothing as

00:16:30,740 --> 00:16:33,980
a and look back nothing is

00:16:31,850 --> 00:16:36,110
associated with each zero so it's a

00:16:33,980 --> 00:16:48,920
complete movement of things to the to

00:16:36,110 --> 00:16:55,460
the RF table so if I were to add an IP

00:16:48,920 --> 00:16:57,740
address to eat zero connected routes it

00:16:55,460 --> 00:17:00,440
knows what to do because because the

00:16:57,740 --> 00:17:02,330
interface is enslaved if you were adding

00:17:00,440 --> 00:17:06,949
additional routes on top of that you

00:17:02,330 --> 00:17:11,650
would have to tell it so I just added

00:17:06,949 --> 00:17:11,650
one one one whoops let's try that again

00:17:17,140 --> 00:17:25,640
so adding that to eat zero and then I do

00:17:21,860 --> 00:17:30,470
a route listing on the management table

00:17:25,640 --> 00:17:34,460
and let me add it again

00:17:30,470 --> 00:17:38,360
maybe I'm not something up there yeah

00:17:34,460 --> 00:17:41,150
see it gets added by default because it

00:17:38,360 --> 00:17:41,720
knows where to go but if you wanted to

00:17:41,150 --> 00:17:48,530
add

00:17:41,720 --> 00:17:53,230
you know IP route ad 2.2 the you gotta

00:17:48,530 --> 00:17:53,230
tell it table vrf management

00:17:56,510 --> 00:18:01,290
so the other thing is now that we've got

00:17:59,220 --> 00:18:02,970
the routes you've got packets that can

00:18:01,290 --> 00:18:06,120
come in and get directed to processes

00:18:02,970 --> 00:18:08,730
but not how do you get out so getting

00:18:06,120 --> 00:18:11,100
out gets a little more complicated with

00:18:08,730 --> 00:18:15,480
what's in there today so you can use

00:18:11,100 --> 00:18:18,900
socket marks you could use pre-loaded

00:18:15,480 --> 00:18:21,690
libraries to set the the sockets buying

00:18:18,900 --> 00:18:24,030
a device for you what I want to what

00:18:21,690 --> 00:18:27,810
I've been pushing from the model is to

00:18:24,030 --> 00:18:30,210
use a C group an l 3m dev c group that

00:18:27,810 --> 00:18:39,450
essentially would allow you to set a

00:18:30,210 --> 00:18:41,610
task into a particular domain and then

00:18:39,450 --> 00:18:43,650
any child process it runs is already

00:18:41,610 --> 00:18:46,290
bound to that domain so for example

00:18:43,650 --> 00:18:50,330
let's take a bash shell into the the

00:18:46,290 --> 00:18:50,330
management domain so now

00:19:08,590 --> 00:19:11,590
okay

00:19:25,060 --> 00:19:46,310
huh so why did my script

00:19:29,780 --> 00:19:48,700
oh I said I didn't I'm using a shell

00:19:46,310 --> 00:19:53,570
script that expects one thing and I

00:19:48,700 --> 00:19:56,690
didn't take that out so anyway no okay

00:19:53,570 --> 00:19:58,820
so now and I have this convenient ps1

00:19:56,690 --> 00:20:02,090
helper that tells me oh now I'm sat into

00:19:58,820 --> 00:20:05,050
the management VR off so when I go to

00:20:02,090 --> 00:20:08,420
use networking anything I do by default

00:20:05,050 --> 00:20:10,520
is going out management interface so I

00:20:08,420 --> 00:20:13,640
don't have to do bind behind the scenes

00:20:10,520 --> 00:20:16,550
the C group is saying oh well this house

00:20:13,640 --> 00:20:18,680
belongs to this l3 domain I'm gonna set

00:20:16,550 --> 00:20:20,360
the socket buying the device for you so

00:20:18,680 --> 00:20:35,080
any eye net or high net six sockets are

00:20:20,360 --> 00:20:39,620
gonna get there by default yes yes yes

00:20:35,080 --> 00:20:41,660
yeah you have to set there's a setting

00:20:39,620 --> 00:20:43,370
you have to pass in that tells it that

00:20:41,660 --> 00:20:45,500
it's associated with the domain but yes

00:20:43,370 --> 00:20:56,270
I've tested IPSec as well

00:20:45,500 --> 00:21:00,580
the kernel I'm sorry no there's a

00:20:56,270 --> 00:21:00,580
selector there's a selector piece so

00:21:02,650 --> 00:21:06,970
do the transform and help the packets on

00:21:04,330 --> 00:21:08,620
the wire you it was only like source and

00:21:06,970 --> 00:21:13,570
destination like the template was the

00:21:08,620 --> 00:21:18,030
only source of destination no no I I

00:21:13,570 --> 00:21:18,030
know this work so let me find the notes

00:21:27,000 --> 00:21:33,910
because what I found was raccoon the

00:21:32,410 --> 00:21:40,510
current code of raccoon doesn't do it so

00:21:33,910 --> 00:21:44,860
I had to go to my own head to do this

00:21:40,510 --> 00:22:17,290
the transforms directly to get to get

00:21:44,860 --> 00:22:19,720
out to work which one there we go so I

00:22:17,290 --> 00:22:21,940
didn't have to make any changes to the

00:22:19,720 --> 00:22:25,990
ipsec code other than have it

00:22:21,940 --> 00:22:28,510
acknowledge that if the O ifs and l3 use

00:22:25,990 --> 00:22:39,910
that OIF in the route lookups you can

00:22:28,510 --> 00:22:41,320
the transform look at what yeah like I

00:22:39,910 --> 00:22:45,220
said from an implementation perspective

00:22:41,320 --> 00:22:50,890
the only thing I had to do to get IPSec

00:22:45,220 --> 00:22:52,870
working was to have have the transform

00:22:50,890 --> 00:22:56,980
lookup code acknowledge I up and pass

00:22:52,870 --> 00:22:59,050
that into the fill tools into the lookup

00:22:56,980 --> 00:23:01,180
okay

00:22:59,050 --> 00:23:04,540
yes if you had the ability to configure

00:23:01,180 --> 00:23:06,670
yes it works so that's where I gave up

00:23:04,540 --> 00:23:08,700
trying to modify IPSec tools because it

00:23:06,670 --> 00:23:16,080
was just a nightmare

00:23:08,700 --> 00:23:17,250
and I think so yeah it's like you have

00:23:16,080 --> 00:23:19,680
to tell it like when you're transforming

00:23:17,250 --> 00:23:20,910
into this like template here's the

00:23:19,680 --> 00:23:22,680
source and destination address you want

00:23:20,910 --> 00:23:24,570
to use it should say at least you know

00:23:22,680 --> 00:23:28,170
here's here's here's the OEF fuels any

00:23:24,570 --> 00:23:34,530
views so I haven't run that simulator

00:23:28,170 --> 00:23:37,500
and since I haven't run that simulator

00:23:34,530 --> 00:23:42,020
since August otherwise I would spin it

00:23:37,500 --> 00:23:42,020
up for you and show you the policies

00:23:46,430 --> 00:23:57,990
alright so now let's move on to another

00:23:50,000 --> 00:24:00,480
use case which is so this is summarizing

00:23:57,990 --> 00:24:04,020
when I was saying by default any kind of

00:24:00,480 --> 00:24:05,520
command you run is going to use the main

00:24:04,020 --> 00:24:07,740
table and so is gonna want to go out the

00:24:05,520 --> 00:24:09,540
front panel ports so if you want to do

00:24:07,740 --> 00:24:12,060
something going out management interface

00:24:09,540 --> 00:24:14,910
you've got a variety of options all of

00:24:12,060 --> 00:24:17,070
which stink at the moment from the

00:24:14,910 --> 00:24:18,480
preload library or having to modify the

00:24:17,070 --> 00:24:20,910
source code to acknowledge mind

00:24:18,480 --> 00:24:23,700
hopefully I can get this C group thing

00:24:20,910 --> 00:24:26,400
resolved soon and we can have a more

00:24:23,700 --> 00:24:28,860
elegant way of saying run this command

00:24:26,400 --> 00:24:42,480
in an l-3 domain and all the magic

00:24:28,860 --> 00:24:45,390
happens from a vrf perspective I'm

00:24:42,480 --> 00:24:57,690
restricting it to a single no nesting of

00:24:45,390 --> 00:25:00,120
vrf domains but we use C groups we're

00:24:57,690 --> 00:25:07,260
scheduling things so if I want to have

00:25:00,120 --> 00:25:09,090
like a per process vrf then it has to be

00:25:07,260 --> 00:25:14,060
that I have for each of the schedule in

00:25:09,090 --> 00:25:14,060
C groups already have I need schedule

00:25:18,880 --> 00:25:26,929
thank you so what I've got here the

00:25:25,460 --> 00:25:37,039
implementation I have here limiting it

00:25:26,929 --> 00:25:40,309
to a single when you drop a particular

00:25:37,039 --> 00:25:42,080
task so in this case it's the shell that

00:25:40,309 --> 00:25:44,570
is in the C group and then anything it

00:25:42,080 --> 00:25:46,039
spends off is also in the C group so

00:25:44,570 --> 00:25:48,529
that's that's the characteristics and

00:25:46,039 --> 00:25:50,029
the properties that are very nice that I

00:25:48,529 --> 00:25:55,130
want to keep with C groups which is why

00:25:50,029 --> 00:25:56,510
I think that model works really well so

00:25:55,130 --> 00:26:01,610
I don't know if that's it sound like you

00:25:56,510 --> 00:26:04,490
were going after something else but so

00:26:01,610 --> 00:26:07,460
another common deployment is using VLANs

00:26:04,490 --> 00:26:09,799
to separate traffic and then as a part

00:26:07,460 --> 00:26:10,880
of the VLAN deployment you get to two

00:26:09,799 --> 00:26:13,370
routers where you want to start

00:26:10,880 --> 00:26:16,909
separating your traffic by brf's so that

00:26:13,370 --> 00:26:18,500
it it can you know move through the

00:26:16,909 --> 00:26:20,690
backbone of the network and you can

00:26:18,500 --> 00:26:26,059
still maintain that separation with the

00:26:20,690 --> 00:26:27,710
deal and stuff so here's an example VLAN

00:26:26,059 --> 00:26:29,750
separation you know say you got a couple

00:26:27,710 --> 00:26:32,149
of racks and there's some hosts on each

00:26:29,750 --> 00:26:34,159
rack that are in one VLAN VLAN 10

00:26:32,149 --> 00:26:36,320
another set of hosts that are in VLAN 20

00:26:34,159 --> 00:26:40,059
and as they're talking through a shared

00:26:36,320 --> 00:26:43,070
network maintain that routing separation

00:26:40,059 --> 00:26:45,649
so I have a simplified version of that

00:26:43,070 --> 00:26:47,870
deployment where I've got two groups of

00:26:45,649 --> 00:26:51,049
hosts so Group one hosts one through

00:26:47,870 --> 00:26:53,510
four or on VLAN 10 group to host one

00:26:51,049 --> 00:26:56,090
through four on VLAN 20 and all the

00:26:53,510 --> 00:26:59,690
traffic gets routed through a common set

00:26:56,090 --> 00:27:01,610
of r1 r2 routers so I will look at you

00:26:59,690 --> 00:27:04,399
know my my gun to the virtual machines

00:27:01,610 --> 00:27:06,649
I'll show you the VR f10 VR f20 setup

00:27:04,399 --> 00:27:09,620
and when the traffic's flowing you can

00:27:06,649 --> 00:27:16,640
see how it flows through the proper the

00:27:09,620 --> 00:27:23,510
proper ports so for this one I do have

00:27:16,640 --> 00:27:25,520
my handy-dandy ASCII diagram so this is

00:27:23,510 --> 00:27:29,830
showing

00:27:25,520 --> 00:27:41,900
and that's the mpls one so let me find

00:27:29,830 --> 00:27:47,110
the VLAN okay so here we've got the host

00:27:41,900 --> 00:27:47,110
at the top all connected into switch 1

00:27:47,140 --> 00:27:55,220
the the bridge for these switches so in

00:27:50,810 --> 00:27:58,190
this case 10 1 1 254 for Group 1 10 to

00:27:55,220 --> 00:28:00,800
150 254 for group 2 those are the

00:27:58,190 --> 00:28:03,680
default gateways for the hosts and they

00:28:00,800 --> 00:28:05,690
both come in to switch 1 it'll use R 1

00:28:03,680 --> 00:28:09,170
and R 2 is that backbone to get over to

00:28:05,690 --> 00:28:11,570
the other rack where s 2 is the top of

00:28:09,170 --> 00:28:17,540
rack switch and it's gonna be talking to

00:28:11,570 --> 00:28:21,890
these hosts so the router pieces R 1 and

00:28:17,540 --> 00:28:24,860
R 2 when the VLAN tens come in to those

00:28:21,890 --> 00:28:26,510
routers there's the the routing lookup

00:28:24,860 --> 00:28:29,450
is done by separating the traffic the

00:28:26,510 --> 00:28:31,400
vrf interfaces into separate I'm sorry

00:28:29,450 --> 00:28:36,680
the VLAN interfaces into separate brf's

00:28:31,400 --> 00:28:38,780
so that the VLAN trunk here when the

00:28:36,680 --> 00:28:41,120
packets pop out one into the other they

00:28:38,780 --> 00:28:43,990
get you know sorted back out into the

00:28:41,120 --> 00:28:43,990
proper channels

00:28:51,550 --> 00:28:58,310
all right so this is Group one host one

00:28:55,280 --> 00:29:01,090
and I'm gonna ping the other end of that

00:28:58,310 --> 00:29:04,190
which is group one host three down here

00:29:01,090 --> 00:29:08,450
so obviously the traffic is going to

00:29:04,190 --> 00:29:32,510
work or demos gonna blow up on me so now

00:29:08,450 --> 00:29:36,160
let's go to say r1 and look at so in

00:29:32,510 --> 00:29:36,160
this case what we've got four interfaces

00:29:36,910 --> 00:29:45,710
so this is looking at that first r1 we

00:29:41,300 --> 00:29:54,490
have three front panel ports two v RF

00:29:45,710 --> 00:29:54,490
groups VLANs VLAN 10 and VLAN 20 on both

00:29:54,610 --> 00:30:00,980
the switch port 1 which is the one

00:29:57,140 --> 00:30:05,390
that's shared between the two routers so

00:30:00,980 --> 00:30:08,540
which port 2 is connected to just coming

00:30:05,390 --> 00:30:10,880
back to this diagram we're on this so

00:30:08,540 --> 00:30:13,820
switch port 1 is the common interface

00:30:10,880 --> 00:30:17,060
and so it's got VLANs both VLANs

00:30:13,820 --> 00:30:20,990
represented switchboard - only connects

00:30:17,060 --> 00:30:29,470
to VLAN 10 switchboard 3 only connects

00:30:20,990 --> 00:30:29,470
to VLAN 20 so from a routing perspective

00:30:46,030 --> 00:31:00,250
so here we've got the two vrf groups and

00:30:49,910 --> 00:31:02,720
if we look at the table for group one

00:31:00,250 --> 00:31:07,040
you can see the two interfaces are in

00:31:02,720 --> 00:31:08,990
there and the table for group two you've

00:31:07,040 --> 00:31:16,180
got the switch port one in the switch

00:31:08,990 --> 00:31:21,710
port three VLAN representations from a

00:31:16,180 --> 00:31:27,160
traffic movement perspective I work to

00:31:21,710 --> 00:31:27,160
connect to let's say switch port 2

00:31:36,980 --> 00:31:45,930
okay now and I'm pinging okay so I only

00:31:42,870 --> 00:31:50,420
see the traffic coming in the interface

00:31:45,930 --> 00:31:54,240
here I don't see anything coming out

00:31:50,420 --> 00:31:58,610
three which is appropriate since I'm

00:31:54,240 --> 00:32:19,710
connecting on VLAN 10 going over to

00:31:58,610 --> 00:32:21,270
router 2 so looking at then this

00:32:19,710 --> 00:32:23,700
interface so the traffic should be

00:32:21,270 --> 00:32:25,740
coming from this host up here on the

00:32:23,700 --> 00:32:29,040
upper left through br1

00:32:25,740 --> 00:32:32,600
switchboard to switch port 1 and r1 and

00:32:29,040 --> 00:32:35,820
then coming down to this guy over here

00:32:32,600 --> 00:32:42,540
so that's how you get that you see that

00:32:35,820 --> 00:32:47,520
separation of yeah so there's the

00:32:42,540 --> 00:32:50,400
traffic and on switchboard 3 I see

00:32:47,520 --> 00:32:52,770
nothing because I'm not doing routing on

00:32:50,400 --> 00:32:59,130
VLAN 20 which it's worth 20 which goes

00:32:52,770 --> 00:33:00,720
in a different direction it's all kind

00:32:59,130 --> 00:33:02,160
of boring considering this is that kind

00:33:00,720 --> 00:33:04,080
of the background infrastructure of

00:33:02,160 --> 00:33:09,630
controlling the connectivity and the

00:33:04,080 --> 00:33:11,850
router lookups and such so any questions

00:33:09,630 --> 00:33:15,090
on this one this is kind of more that

00:33:11,850 --> 00:33:34,500
really behind the scenes deployment set

00:33:15,090 --> 00:33:37,560
up the vrf device and the aggregating

00:33:34,500 --> 00:33:41,880
all of those individual concepts into a

00:33:37,560 --> 00:33:43,680
little more of a useable solution so for

00:33:41,880 --> 00:33:47,220
example the existing infrastructure was

00:33:43,680 --> 00:33:49,310
that was there can't handle duplicate IP

00:33:47,220 --> 00:33:53,210
addresses

00:33:49,310 --> 00:33:55,970
well with vrf devices and using that as

00:33:53,210 --> 00:33:57,380
a construct for properly separating the

00:33:55,970 --> 00:33:59,630
traffic and properly doing the router

00:33:57,380 --> 00:34:02,000
lookups directing the round lookups you

00:33:59,630 --> 00:34:05,330
can have and actually my MPLS demo on

00:34:02,000 --> 00:34:07,310
the next one it purposely has duplicate

00:34:05,330 --> 00:34:08,990
duplicate address information and it

00:34:07,310 --> 00:34:22,909
shows how the two tables exist

00:34:08,990 --> 00:34:25,880
simultaneously yes so in this case so

00:34:22,909 --> 00:34:28,909
net namespaces are separating things at

00:34:25,880 --> 00:34:32,120
a device layer and it is certainly

00:34:28,909 --> 00:34:37,580
possible to do vrf implementation using

00:34:32,120 --> 00:34:40,340
names items sure right but with net

00:34:37,580 --> 00:34:42,679
namespaces when you so let's look at

00:34:40,340 --> 00:34:46,010
lldp there right so a lot of switches

00:34:42,679 --> 00:34:49,490
we're running lldp from a wiring

00:34:46,010 --> 00:34:52,159
perspective okay if you use network

00:34:49,490 --> 00:34:55,130
namespaces to create your vrf switch is

00:34:52,159 --> 00:34:57,530
an l-3 concept your l2 applications are

00:34:55,130 --> 00:34:59,450
impacted your l2 applications no longer

00:34:57,530 --> 00:35:05,540
see those those interfaces so you have

00:34:59,450 --> 00:35:08,180
to replicate sure but you have to get

00:35:05,540 --> 00:35:09,500
that presence in multiple namespaces it

00:35:08,180 --> 00:35:12,680
doesn't happen automatically

00:35:09,500 --> 00:35:14,840
you can't have an lldp that's happily

00:35:12,680 --> 00:35:17,450
looking at all the switch ports and a

00:35:14,840 --> 00:35:19,520
switch you create a separate namespace

00:35:17,450 --> 00:35:23,170
it's gonna lose any devices they get

00:35:19,520 --> 00:35:23,170
moved into that until you do something

00:35:25,540 --> 00:35:31,040
sure sure that's that was the

00:35:28,340 --> 00:35:33,740
long-running debate is how verbs can be

00:35:31,040 --> 00:35:35,420
implemented with network namespaces but

00:35:33,740 --> 00:35:38,540
that is an extremely heavy weight

00:35:35,420 --> 00:35:40,850
solution and you know you guys have gone

00:35:38,540 --> 00:35:41,420
through the pain and suffering of making

00:35:40,850 --> 00:35:44,150
that happen

00:35:41,420 --> 00:35:48,620
so you know the cost in the overhead of

00:35:44,150 --> 00:35:51,410
doing namespaces as a vrf versus other

00:35:48,620 --> 00:35:54,140
implementation methods revere us this

00:35:51,410 --> 00:35:57,170
one has proven to be you know a very

00:35:54,140 --> 00:35:59,090
lightweight solution so the only cost of

00:35:57,170 --> 00:36:00,490
this is this additional net device

00:35:59,090 --> 00:36:05,850
structure that's hanging

00:36:00,490 --> 00:36:08,380
and then we want to come along and later

00:36:05,850 --> 00:36:11,140
virtual switch separations of having a

00:36:08,380 --> 00:36:13,390
lot of front panel ports that we create

00:36:11,140 --> 00:36:16,270
small virtual switches and then still

00:36:13,390 --> 00:36:19,780
maintain that ability to do nested prfs

00:36:16,270 --> 00:36:25,960
inside of VLAN or inside of namespaces

00:36:19,780 --> 00:36:29,560
we can do you know aggregation of these

00:36:25,960 --> 00:36:31,060
different concepts to create options and

00:36:29,560 --> 00:36:34,000
deployment scenarios where you know

00:36:31,060 --> 00:36:38,080
virtual switches VLANs VR apps you know

00:36:34,000 --> 00:36:39,550
different different techniques for I

00:36:38,080 --> 00:36:48,040
guess creating what you want to get to

00:36:39,550 --> 00:36:50,350
right right and cross V ref routing what

00:36:48,040 --> 00:36:53,050
this works just fine but you have to do

00:36:50,350 --> 00:36:55,930
is insert a rule in one table pointing

00:36:53,050 --> 00:37:04,390
to the other V RF device and the route

00:36:55,930 --> 00:37:06,490
lookups cross v RF domains yes so you

00:37:04,390 --> 00:37:10,690
could put IP table rules on the V RF

00:37:06,490 --> 00:37:13,990
device for example right now on the

00:37:10,690 --> 00:37:17,170
ingress you lose visibility to the

00:37:13,990 --> 00:37:19,720
original ingress device we have thoughts

00:37:17,170 --> 00:37:22,660
on how to fix that so that you could put

00:37:19,720 --> 00:37:25,210
IP table rules on ingress devices as

00:37:22,660 --> 00:37:28,050
well as vrf aggregate you know the

00:37:25,210 --> 00:37:28,050
aggregation device

00:37:40,890 --> 00:38:08,260
yes so try to put something like 4,000

00:38:05,799 --> 00:38:11,290
and check the performance difference

00:38:08,260 --> 00:38:21,040
between using your solution with so much

00:38:11,290 --> 00:38:24,490
IP cable so I have not done it from an

00:38:21,040 --> 00:38:26,849
IP tables perspective if you look at the

00:38:24,490 --> 00:38:29,349
overhead of creating 4000 namespaces

00:38:26,849 --> 00:38:32,559
versus creating 4000

00:38:29,349 --> 00:38:35,760
vrf devices its hands down the vrf

00:38:32,559 --> 00:38:38,829
device is lighter by orders of magnitude

00:38:35,760 --> 00:38:41,020
all right so a namespace came in you

00:38:38,829 --> 00:38:42,640
know in the hundreds of K just creating

00:38:41,020 --> 00:38:44,079
the namespace and you haven't even moved

00:38:42,640 --> 00:38:45,609
devices around you haven't set up

00:38:44,079 --> 00:38:46,990
additional processes you have an open

00:38:45,609 --> 00:38:49,480
additional sockets you haven't done all

00:38:46,990 --> 00:38:52,329
the overhead that goes with having an

00:38:49,480 --> 00:38:54,819
extra namespace where for a V RF device

00:38:52,329 --> 00:38:57,880
when you want to create that domain you

00:38:54,819 --> 00:39:00,549
pop up the device your processes for

00:38:57,880 --> 00:39:02,470
example with the v RF global option you

00:39:00,549 --> 00:39:03,579
don't have to replicate anything you

00:39:02,470 --> 00:39:05,140
don't have to create another of quagga

00:39:03,579 --> 00:39:09,299
instance you don't have to do another

00:39:05,140 --> 00:39:09,299
lldp instance it just works

00:39:12,270 --> 00:39:18,960
one hour passed and everything is up

00:39:15,530 --> 00:39:22,200
question is you know the packet

00:39:18,960 --> 00:39:25,170
forwarding rate mystery ingress how is

00:39:22,200 --> 00:39:27,480
it detected with 4000 rules Nightbeat

00:39:25,170 --> 00:39:38,730
able to inspect versus and that makes it

00:39:27,480 --> 00:39:40,830
nice pieces okay okay so yes now we are

00:39:38,730 --> 00:39:43,250
aware of the linear lookups for fib

00:39:40,830 --> 00:39:46,200
rules so yes we do know that that's

00:39:43,250 --> 00:39:51,800
something that needs to be optimized and

00:39:46,200 --> 00:39:55,950
looked at so so far we haven't seen any

00:39:51,800 --> 00:39:58,550
kind of performance degradation with the

00:39:55,950 --> 00:40:01,170
existence of the vrf device and running

00:39:58,550 --> 00:40:03,090
packets through certainly latency

00:40:01,170 --> 00:40:05,070
increased a bit because you're doing

00:40:03,090 --> 00:40:06,960
more processing on a packet as it

00:40:05,070 --> 00:40:09,990
detects that it's on an l-3 master

00:40:06,960 --> 00:40:12,570
device from a throughput perspective no

00:40:09,990 --> 00:40:15,990
impact at all from a CPU no additional

00:40:12,570 --> 00:40:19,620
processing cpu perspective a small bump

00:40:15,990 --> 00:40:21,210
in additional CPU resources used so it's

00:40:19,620 --> 00:40:36,090
doing its comes down to being a

00:40:21,210 --> 00:40:37,950
trade-off yes right and that's an

00:40:36,090 --> 00:40:39,570
important aspect of this you know we're

00:40:37,950 --> 00:40:41,790
coming at this from the hardware offload

00:40:39,570 --> 00:40:43,440
where the only thing that's gonna hit

00:40:41,790 --> 00:40:45,090
those fit rules is things that got

00:40:43,440 --> 00:40:49,200
punted to the CPU to do software

00:40:45,090 --> 00:40:52,820
forwarding and this Maps very well to

00:40:49,200 --> 00:40:52,820
the hardware offload

00:41:03,270 --> 00:41:10,960
that I haven't created the 4000 cgroups

00:41:06,340 --> 00:41:13,180
I should do that the C group controller

00:41:10,960 --> 00:41:16,080
the l3 and dev controller is extremely

00:41:13,180 --> 00:41:20,020
small lightweight I can't imagine that

00:41:16,080 --> 00:41:23,200
specific specific controller consuming a

00:41:20,020 --> 00:41:26,260
lot of memory but yes I do need to go

00:41:23,200 --> 00:41:30,070
through the the process of creating

00:41:26,260 --> 00:41:32,860
4,000 of them just to show today I guess

00:41:30,070 --> 00:41:34,480
to either confirm or you know see what

00:41:32,860 --> 00:41:38,070
the issues are with creating 4,000 of

00:41:34,480 --> 00:41:40,750
them now the fact that you're creating

00:41:38,070 --> 00:41:43,810
4,000 of anything there is gonna be some

00:41:40,750 --> 00:41:47,950
overhead be it namespaces net device via

00:41:43,810 --> 00:41:50,950
C groups you know I we do think that

00:41:47,950 --> 00:41:54,070
this solution that this design of the

00:41:50,950 --> 00:41:57,010
options is an extremely resource

00:41:54,070 --> 00:41:59,350
efficient and you know if we hit

00:41:57,010 --> 00:42:02,650
roadblocks will certainly do what we can

00:41:59,350 --> 00:42:05,350
to to fix those roadblocks but from a

00:42:02,650 --> 00:42:07,830
starting point we're starting off fairly

00:42:05,350 --> 00:42:07,830
efficient

00:42:14,600 --> 00:42:19,890
well so in this case you look at this

00:42:18,120 --> 00:42:22,020
this is this is getting into data plane

00:42:19,890 --> 00:42:25,290
veer offs as opposed to a management

00:42:22,020 --> 00:42:28,640
Bureau and data plane brf's it is common

00:42:25,290 --> 00:42:28,640
to have thousands of

00:43:27,250 --> 00:43:33,380
so it's getting both so if you look here

00:43:31,369 --> 00:43:37,759
I can get both ingress and egress

00:43:33,380 --> 00:43:39,529
packets so yeah so if you look at from a

00:43:37,759 --> 00:43:42,740
packet handling perspective as a part of

00:43:39,529 --> 00:43:44,839
the l2 rx handler the device is switched

00:43:42,740 --> 00:43:46,279
from the original ingress it sees that

00:43:44,839 --> 00:43:49,220
oh this is an enslaved one I'm gonna

00:43:46,279 --> 00:43:51,109
flip it to the V RF device that's before

00:43:49,220 --> 00:43:53,029
it hits packet sockets so that's how

00:43:51,109 --> 00:43:56,000
it's getting done on the ingress and

00:43:53,029 --> 00:43:58,849
then on the egress when the first route

00:43:56,000 --> 00:44:00,319
lookup is done we're returning a DST

00:43:58,849 --> 00:44:03,200
that points into the VF driver

00:44:00,319 --> 00:44:05,210
so the V RF device takes control of that

00:44:03,200 --> 00:44:07,970
packet and so you'll see it hit the

00:44:05,210 --> 00:44:10,339
packet socket lookups once and then it

00:44:07,970 --> 00:44:12,589
switches the device over to the real one

00:44:10,339 --> 00:44:14,630
then it can go out of and we insert sit

00:44:12,589 --> 00:44:16,910
into the stack and then it goes out and

00:44:14,630 --> 00:44:18,529
you'll see it on the eath you know the

00:44:16,910 --> 00:44:22,670
actual front panel court that it's gonna

00:44:18,529 --> 00:44:26,660
go out on so the asymmetry I think is on

00:44:22,670 --> 00:44:28,609
that swp port because you lose it when

00:44:26,660 --> 00:44:31,640
you actually no we still don't know if

00:44:28,609 --> 00:44:33,890
it's it's still there because it hits it

00:44:31,640 --> 00:44:36,230
hits the the swp port on ingressive let

00:44:33,890 --> 00:44:38,180
the swp port before if the RX handler

00:44:36,230 --> 00:44:51,589
and then it gets switched so it's still

00:44:38,180 --> 00:44:53,750
some it's not right there or two right

00:44:51,589 --> 00:44:57,529
and that's what I think shows up and the

00:44:53,750 --> 00:45:00,950
latency aspects when you do like in that

00:44:57,529 --> 00:45:03,619
perf RR it is doing some extra

00:45:00,950 --> 00:45:05,240
processing where for a through plate it

00:45:03,619 --> 00:45:07,579
catches up you know all that minimize

00:45:05,240 --> 00:45:09,349
all that overhead gets amortized over a

00:45:07,579 --> 00:45:12,920
lot of packets and they're getting fed

00:45:09,349 --> 00:45:18,619
through pretty quick with the gyro and

00:45:12,920 --> 00:45:21,259
gso stuff and I guess really quickly

00:45:18,619 --> 00:45:25,730
running out of time here and the last

00:45:21,259 --> 00:45:29,539
one I'd was gonna show was MPLS so we

00:45:25,730 --> 00:45:31,260
also have an MPLS demo set up same kind

00:45:29,539 --> 00:45:33,870
of concept where you have

00:45:31,260 --> 00:45:40,050
hosts I guess I can show this diagram

00:45:33,870 --> 00:45:42,810
better or you've got racks coming into

00:45:40,050 --> 00:45:44,630
some router that have a share provider

00:45:42,810 --> 00:45:46,770
backbone and you want to maintain

00:45:44,630 --> 00:45:52,590
traffic separation as it goes through

00:45:46,770 --> 00:45:56,460
the backbone in this case I wanted to

00:45:52,590 --> 00:45:58,830
show how this vrf implementation getting

00:45:56,460 --> 00:46:01,200
at the what's not capable with what can

00:45:58,830 --> 00:46:04,500
you not do with the existing rules and

00:46:01,200 --> 00:46:06,600
multiple tables so in this case I've got

00:46:04,500 --> 00:46:10,160
duplicate address information coming

00:46:06,600 --> 00:46:18,560
into the provider edge one router and

00:46:10,160 --> 00:46:18,560
when you look at two switch simulators

00:46:36,940 --> 00:46:41,050
so we'll come into PT one

00:46:50,970 --> 00:46:54,520
okay so here you've got the two

00:46:53,380 --> 00:46:56,020
different vr apps for two different

00:46:54,520 --> 00:47:03,220
customers that are going to separate

00:46:56,020 --> 00:47:08,710
that traffic diagram wise swp one is

00:47:03,220 --> 00:47:14,589
customer one swp two as customer - when

00:47:08,710 --> 00:47:17,980
I look at s w p1 it's got the 1 1 to

00:47:14,589 --> 00:47:20,109
address s WP 2 also has the exact same

00:47:17,980 --> 00:47:29,680
address but I'm not gonna have any

00:47:20,109 --> 00:47:31,450
conflicts with that because I've got all

00:47:29,680 --> 00:47:38,170
those routes aren't ability separate

00:47:31,450 --> 00:47:40,359
tables so when I get on this box and I

00:47:38,170 --> 00:47:42,670
tell it to do something a little more

00:47:40,359 --> 00:47:44,740
fancy so that the the hosts have no

00:47:42,670 --> 00:47:54,490
concept of the VR app something else

00:47:44,740 --> 00:48:02,470
so by SSH into this 88 to 1/3 address

00:47:54,490 --> 00:48:06,369
for example so now I just jumped from C

00:48:02,470 --> 00:48:11,859
1 H 1 to C 1 H 3 and I've done that by

00:48:06,369 --> 00:48:14,730
going through the P 1 P P 2 routers so

00:48:11,859 --> 00:48:19,510
if I look at PE oops

00:48:14,730 --> 00:48:23,050
SW P 1 so that's the packets going

00:48:19,510 --> 00:48:28,180
through it and if you were to flip that

00:48:23,050 --> 00:48:30,960
TCP dump over to SW p 3 you'll see it

00:48:28,180 --> 00:48:30,960
got converted into

00:48:33,370 --> 00:48:38,860
wrong command all right well for a brief

00:48:37,060 --> 00:48:40,570
moment we kicked out some packets and

00:48:38,860 --> 00:48:43,150
you can see how it's done

00:48:40,570 --> 00:48:45,580
the MPLS side I will have to so I just

00:48:43,150 --> 00:48:50,050
lost host three they will have to kick

00:48:45,580 --> 00:48:57,580
in too close to four good thing I had

00:48:50,050 --> 00:49:01,240
four of them all right so this is PE one

00:48:57,580 --> 00:49:04,390
and let me hop on to PE two which is

00:49:01,240 --> 00:49:06,460
where so PE one that the packets are all

00:49:04,390 --> 00:49:08,350
getting pushed into this a common trunk

00:49:06,460 --> 00:49:19,690
common backbone and they pop out the

00:49:08,350 --> 00:49:24,010
other side on P two and then I always

00:49:19,690 --> 00:49:34,920
have to keep my handy diagram here so SW

00:49:24,010 --> 00:49:37,120
p2 so SW p3 shows nothing as packets are

00:49:34,920 --> 00:49:40,570
you know the the separation of the

00:49:37,120 --> 00:49:43,150
customers you know I'm honest I'm on

00:49:40,570 --> 00:49:45,340
customer ones host so those packets

00:49:43,150 --> 00:49:49,180
don't make it through the customer to

00:49:45,340 --> 00:49:53,110
side of things but if I go over to s2 v

00:49:49,180 --> 00:49:56,790
p2 I can see the SSH packets having gone

00:49:53,110 --> 00:50:00,250
through it and then switching to that

00:49:56,790 --> 00:50:05,440
ingress side which is front panel port

00:50:00,250 --> 00:50:09,850
one you see the MPLS packets so MPLS

00:50:05,440 --> 00:50:12,580
popped in so MPLS popped in this

00:50:09,850 --> 00:50:14,680
interface and it uses those labels to

00:50:12,580 --> 00:50:17,860
say oh well this label goes over here to

00:50:14,680 --> 00:50:20,770
berth 10 pops that label off drops the

00:50:17,860 --> 00:50:23,880
packet into the vrf 10 route lookup and

00:50:20,770 --> 00:50:27,250
it continues on its way up to see you on

00:50:23,880 --> 00:50:29,910
the other edge router from a route

00:50:27,250 --> 00:50:29,910
perspective

00:50:31,000 --> 00:50:36,400
see one so you can see the normal

00:50:33,940 --> 00:50:38,590
connected routes for that interface and

00:50:36,400 --> 00:50:45,220
then there you've got the the MPLS

00:50:38,590 --> 00:50:47,350
relative as well so again the the the

00:50:45,220 --> 00:50:51,520
theme here from a data plane perspective

00:50:47,350 --> 00:50:54,490
is you've got a shared backbone and the

00:50:51,520 --> 00:50:57,070
VR apps provide that routing separation

00:50:54,490 --> 00:51:11,800
at the ingress and the egress of that

00:50:57,070 --> 00:51:28,390
shared by back you mean like how this is

00:51:11,800 --> 00:51:30,100
configured down here W ps1 and then so

00:51:28,390 --> 00:51:32,740
here's the you have the ingress you know

00:51:30,100 --> 00:51:35,500
it's got the one one two interface so

00:51:32,740 --> 00:51:47,680
this is a 1 1 1 not work so C 1 u 1

00:51:35,500 --> 00:51:50,290
sends the packet up to the PE 1 Oh from

00:51:47,680 --> 00:51:52,180
you mean so like this interface here

00:51:50,290 --> 00:51:57,700
where it's receiving the MPLS packets on

00:51:52,180 --> 00:51:59,590
sp3 and then flips them into sure so

00:51:57,700 --> 00:52:05,610
here is that the route that's gonna

00:51:59,590 --> 00:52:09,670
cause the this direction going ingress

00:52:05,610 --> 00:52:11,170
down here at swp one and you know it

00:52:09,670 --> 00:52:14,410
receives a packet and then it wants to

00:52:11,170 --> 00:52:18,240
say my next my next hop is here this 2

00:52:14,410 --> 00:52:22,530
this 2 2 1 1 2 goes through SW P 3 and

00:52:18,240 --> 00:52:22,530
then if I do the TCP dump

00:52:23,800 --> 00:52:30,830
wp3 we run some packets through it and

00:52:28,070 --> 00:52:34,370
you see the same thing where one label

00:52:30,830 --> 00:52:37,520
comes in it pops it so the one 112 label

00:52:34,370 --> 00:52:45,490
comes in it pops it off and sends the

00:52:37,520 --> 00:52:48,740
packet over to SW p1 at the MPLS layer

00:52:45,490 --> 00:52:54,440
so if I do a route look up a route show

00:52:48,740 --> 00:53:01,000
on the MPLS family you can see where

00:52:54,440 --> 00:53:07,400
it's pushing 1 112 for this interface

00:53:01,000 --> 00:53:08,750
this is this address sorry it gets

00:53:07,400 --> 00:53:34,840
complicated on this little bitty screen

00:53:08,750 --> 00:53:51,170
to show both the config setup and so 111

00:53:34,840 --> 00:53:53,780
111 here via 3 1 1 3 1 1 2 here yes well

00:53:51,170 --> 00:53:56,480
know that I hope so yeah the vrf is swp

00:53:53,780 --> 00:53:59,420
- that's the interface and when it

00:53:56,480 --> 00:54:02,600
receives this it pops it and then sends

00:53:59,420 --> 00:54:04,990
it on to this guy and then the routing

00:54:02,600 --> 00:54:04,990
table

00:54:07,780 --> 00:54:14,620
no it's the label that it's that it's

00:54:10,490 --> 00:54:14,620
responding to to figure out what to do

00:54:19,630 --> 00:54:25,070
yes so that is something we know that

00:54:23,270 --> 00:54:27,500
there can some of the labels can be vrf

00:54:25,070 --> 00:54:29,240
based and we haven't gotten around to

00:54:27,500 --> 00:54:31,550
looking at that but it is on our to-do

00:54:29,240 --> 00:54:33,590
list that the the MPLS label is

00:54:31,550 --> 00:54:35,750
associated with the VRA so yeah that'll

00:54:33,590 --> 00:54:39,260
happen as well whether it works today

00:54:35,750 --> 00:54:46,250
I don't know but is it going to work yes

00:54:39,260 --> 00:54:48,560
we that is what we'll have to do list so

00:54:46,250 --> 00:54:55,160
any other questions on this one I only

00:54:48,560 --> 00:54:57,230
got like a couple minutes left okay so

00:54:55,160 --> 00:55:00,980
let me just dump one more thing in you

00:54:57,230 --> 00:55:03,440
guys so intervene so I mentioned that

00:55:00,980 --> 00:55:05,900
you can do you've get different tables

00:55:03,440 --> 00:55:07,760
for different brf's and there's a lot of

00:55:05,900 --> 00:55:10,130
cases where you need packets to go from

00:55:07,760 --> 00:55:12,500
one vrf to another and there's multiple

00:55:10,130 --> 00:55:15,680
ways to do that like having an explicit

00:55:12,500 --> 00:55:18,590
rule that says go from you know in table

00:55:15,680 --> 00:55:22,340
vrf red I've got this network out Debbie

00:55:18,590 --> 00:55:24,950
- which is in a different vrf or you can

00:55:22,340 --> 00:55:27,980
do the bottom line which basically says

00:55:24,950 --> 00:55:30,710
in verse red this network is reachable

00:55:27,980 --> 00:55:33,320
by Verve green so go go to that table

00:55:30,710 --> 00:55:35,890
and do another look up to see where to

00:55:33,320 --> 00:55:35,890
send the packet

00:55:45,700 --> 00:56:10,700
any questions so 6 when did a lot of

00:56:07,880 --> 00:56:12,560
good changes to the infrastructure of

00:56:10,700 --> 00:56:13,850
Quadra so I personally am NOT a

00:56:12,560 --> 00:56:15,620
cognitive Ella person I personally

00:56:13,850 --> 00:56:18,680
didn't make any changes to it but

00:56:15,620 --> 00:56:20,450
someone in the company this the changes

00:56:18,680 --> 00:56:22,340
that six when put into quagga had done

00:56:20,450 --> 00:56:25,580
some good refactorings to support vr

00:56:22,340 --> 00:56:27,770
apps first via namespaces and one of our

00:56:25,580 --> 00:56:30,410
engineers took that as a start point and

00:56:27,770 --> 00:56:33,440
did some refactoring so that it can be

00:56:30,410 --> 00:56:36,820
namespaces or a viera device model so

00:56:33,440 --> 00:56:36,820
the people of the two to coexist

00:57:01,970 --> 00:57:19,030
I think let's yeah

00:57:19,630 --> 00:57:40,820
all right I think you can't the table

00:57:33,290 --> 00:57:43,330
can only have one default role family

00:57:40,820 --> 00:57:43,330

YouTube URL: https://www.youtube.com/watch?v=zxPFFdRN_x4


