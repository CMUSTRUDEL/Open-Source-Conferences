Title: Netdev 1.1 - Using SR-IOV on OpenStack
Publication date: 2016-03-15
Playlist: Netdev 1.1 - Day 3 - Friday February 12, 2016
Description: 
	Alexander Duyck
February 2016
Captions: 
	00:00:00,319 --> 00:00:07,770
hovering is an introduction to SRB aka

00:00:05,490 --> 00:00:10,320
this I referred to as s re OB 101

00:00:07,770 --> 00:00:13,309
basically it's an explanation of what s

00:00:10,320 --> 00:00:15,570
re OB is the history of it in the kernel

00:00:13,309 --> 00:00:20,340
and some of the limitations that we have

00:00:15,570 --> 00:00:22,920
for s r io v I'll lead into the

00:00:20,340 --> 00:00:24,960
OpenStack demo which involves basically

00:00:22,920 --> 00:00:26,760
set the kernel set up on the SRA OB side

00:00:24,960 --> 00:00:29,310
and then actually how to configure

00:00:26,760 --> 00:00:31,679
devstack for that and finally I'll go

00:00:29,310 --> 00:00:33,710
into some of the topics that are

00:00:31,679 --> 00:00:37,399
currently under a lot of development

00:00:33,710 --> 00:00:39,660
including hot plug live migration and

00:00:37,399 --> 00:00:41,550
when I'm referring to SPF promiscuous

00:00:39,660 --> 00:00:42,719
mode basically there's number of fixes

00:00:41,550 --> 00:00:45,239
I'm having to incorporate into the

00:00:42,719 --> 00:00:47,820
kernel but before I get into all that

00:00:45,239 --> 00:00:50,280
this actually is going to involve a live

00:00:47,820 --> 00:00:54,930
demo here I'm going to skate the razor's

00:00:50,280 --> 00:00:57,000
edge what am I actually do is go ahead

00:00:54,930 --> 00:01:03,719
and start the SRO be set up on this

00:00:57,000 --> 00:01:08,250
system so one of the standard things for

00:01:03,719 --> 00:01:10,979
setting up OpenStack on systems you have

00:01:08,250 --> 00:01:14,040
to create a user for it in this case the

00:01:10,979 --> 00:01:18,450
default user is stack this took me into

00:01:14,040 --> 00:01:24,060
its home directory stack ug ends up

00:01:18,450 --> 00:01:26,460
having to have sudo permissions so a

00:01:24,060 --> 00:01:29,210
first step you gotta turn on the VM or

00:01:26,460 --> 00:01:33,689
turn on SRO V so you got a simple script

00:01:29,210 --> 00:01:40,439
just goes in brings up the two PFS echo

00:01:33,689 --> 00:01:46,140
seven in I got too many devices here and

00:01:40,439 --> 00:01:52,049
get into that more later anyway so I'll

00:01:46,140 --> 00:01:54,960
change the dev stack directory go ahead

00:01:52,049 --> 00:01:57,210
and kick that off I don't know if any of

00:01:54,960 --> 00:01:59,009
you have seen baking shows usually you

00:01:57,210 --> 00:02:00,840
know written an oven for a half-hour and

00:01:59,009 --> 00:02:02,369
like five seconds lawyers are taking out

00:02:00,840 --> 00:02:03,750
of the oven yeah I didn't want have to

00:02:02,369 --> 00:02:04,799
do that so this is actually devstack

00:02:03,750 --> 00:02:07,259
launching so we're going to need about

00:02:04,799 --> 00:02:08,610
20 minutes so I'm gonna leave that

00:02:07,259 --> 00:02:10,050
running wand giving the presentation

00:02:08,610 --> 00:02:12,560
hopefully when I come back he'll say

00:02:10,050 --> 00:02:12,560
it's completed

00:02:13,280 --> 00:02:24,019
so let's go back to present okay so srl

00:02:22,560 --> 00:02:27,150
b101

00:02:24,019 --> 00:02:28,230
i tried to find a good definition this

00:02:27,150 --> 00:02:29,160
is probably the best one I could find

00:02:28,230 --> 00:02:32,580
out on the web

00:02:29,160 --> 00:02:34,580
refers to s re OB as in network

00:02:32,580 --> 00:02:37,379
virtualization a single route

00:02:34,580 --> 00:02:39,420
input/output virtualization or SR Iove

00:02:37,379 --> 00:02:42,480
is a network interface that allows the

00:02:39,420 --> 00:02:44,190
isolation of PCI Express resources for

00:02:42,480 --> 00:02:45,989
manageability and performance reasons

00:02:44,190 --> 00:02:47,700
which actually for Wikipedia I'm

00:02:45,989 --> 00:02:49,709
actually surprised exactly a fairly good

00:02:47,700 --> 00:02:54,000
definition there's only a few little

00:02:49,709 --> 00:02:56,879
problems s RI OB is not a network

00:02:54,000 --> 00:02:59,599
specification if you go search for PCI

00:02:56,879 --> 00:03:02,129
or go search for srl V it's a pci-sig

00:02:59,599 --> 00:03:04,379
specification so in theory if you wanted

00:03:02,129 --> 00:03:06,840
to you take a storage controller and put

00:03:04,379 --> 00:03:09,750
SRO V on it you take a graphics card put

00:03:06,840 --> 00:03:12,629
s RI OB on it nothing in there specifies

00:03:09,750 --> 00:03:15,750
networking at all so one of the side

00:03:12,629 --> 00:03:18,299
effects of this is everybody has their

00:03:15,750 --> 00:03:20,790
own way they think networking should be

00:03:18,299 --> 00:03:22,620
done for an SSRI OB Nick which makes

00:03:20,790 --> 00:03:24,630
things kind of difficult on the higher

00:03:22,620 --> 00:03:25,709
levels of the stack because we're trying

00:03:24,630 --> 00:03:28,019
to figure out how to configure this NIC

00:03:25,709 --> 00:03:29,849
and well this one does it this way this

00:03:28,019 --> 00:03:31,530
one does it that way this one does it

00:03:29,849 --> 00:03:33,720
some other way and these are all drivers

00:03:31,530 --> 00:03:35,430
from the same vendor that have different

00:03:33,720 --> 00:03:39,480
behaviors so it just makes things rather

00:03:35,430 --> 00:03:42,030
confusing the other big thing that I ran

00:03:39,480 --> 00:03:44,280
into is a lot of people seem to think

00:03:42,030 --> 00:03:48,180
SRA OB requires direct assignment

00:03:44,280 --> 00:03:50,910
basically the ability to restrict the

00:03:48,180 --> 00:03:54,090
memory via an iommu and the fact is the

00:03:50,910 --> 00:03:56,880
two are not connected SRA OB is a means

00:03:54,090 --> 00:03:58,829
of partitioning a device an iommu is a

00:03:56,880 --> 00:04:01,470
way of isolating a device to only a

00:03:58,829 --> 00:04:04,380
selected region of memory they can work

00:04:01,470 --> 00:04:06,630
together in many use cases but they

00:04:04,380 --> 00:04:09,810
aren't actually needed you don't need I

00:04:06,630 --> 00:04:12,569
Oh mmm u4 s RI OB or s RI OB to use

00:04:09,810 --> 00:04:15,569
iommu they both are separate features

00:04:12,569 --> 00:04:16,889
that can work together actually ended up

00:04:15,569 --> 00:04:18,000
having an argument with the developer

00:04:16,889 --> 00:04:21,359
once about this because they wanted to

00:04:18,000 --> 00:04:22,360
make s RI will be only enabled if v TD

00:04:21,359 --> 00:04:28,300
was supported

00:04:22,360 --> 00:04:31,509
like no it's not how this works so brief

00:04:28,300 --> 00:04:32,919
history and all this the first patch set

00:04:31,509 --> 00:04:36,340
for this was actually introduced back in

00:04:32,919 --> 00:04:40,090
November of 2008 the author of the patch

00:04:36,340 --> 00:04:42,009
set was used ow there's a number of

00:04:40,090 --> 00:04:43,810
different things that were good about it

00:04:42,009 --> 00:04:45,599
one of the things was we had an assist

00:04:43,810 --> 00:04:49,030
fest file in the original implementation

00:04:45,599 --> 00:04:50,469
for setting the number of BS now you

00:04:49,030 --> 00:04:51,729
might just think if you've had any

00:04:50,469 --> 00:04:53,949
experience with the recent kernel that

00:04:51,729 --> 00:04:55,990
hey that's how it is well that's not how

00:04:53,949 --> 00:05:00,009
it ended up being when SRV was initially

00:04:55,990 --> 00:05:03,669
applied basically by the time things got

00:05:00,009 --> 00:05:05,680
accepted in version 12 the sisyphus file

00:05:03,669 --> 00:05:07,509
was actually dropped for sr Iovine mvs

00:05:05,680 --> 00:05:09,969
because generals consent from the air

00:05:07,509 --> 00:05:11,740
consensus from the community was hey we

00:05:09,969 --> 00:05:13,000
don't want it this way we'll find

00:05:11,740 --> 00:05:15,370
another way to do it people are actually

00:05:13,000 --> 00:05:19,029
talking about netfilter that internet

00:05:15,370 --> 00:05:21,610
filter bad net link but the problem is

00:05:19,029 --> 00:05:23,590
it gets back to the whole thing of srl v

00:05:21,610 --> 00:05:24,849
is a PCI specification why should a

00:05:23,590 --> 00:05:32,370
storage controller have to go through

00:05:24,849 --> 00:05:34,569
net link if it wants to set up the BS so

00:05:32,370 --> 00:05:37,870
so is that portion of things then in

00:05:34,569 --> 00:05:39,819
addition the original patch set when it

00:05:37,870 --> 00:05:42,129
was introduced actually included an out

00:05:39,819 --> 00:05:44,919
of tree driver tar ball with it say

00:05:42,129 --> 00:05:46,270
here's their first bf driver but you can

00:05:44,919 --> 00:05:48,520
imagine that didn't go over very well

00:05:46,270 --> 00:05:52,150
you know suddenly Dave a terrible thing

00:05:48,520 --> 00:05:53,949
there's a driver just take it done so

00:05:52,150 --> 00:05:55,960
that ended up getting stripped in the

00:05:53,949 --> 00:06:00,339
final version 12 of the patch set left

00:05:55,960 --> 00:06:02,860
to be implemented later and then yeah so

00:06:00,339 --> 00:06:06,819
shortly after those got accepted we

00:06:02,860 --> 00:06:09,969
managed to get the patch set for IG bvf

00:06:06,819 --> 00:06:12,370
and the IG B driver changes accepted in

00:06:09,969 --> 00:06:15,159
order to work around the SRO beam um BFS

00:06:12,370 --> 00:06:17,439
issue though since I got stripped we

00:06:15,159 --> 00:06:19,839
ended up introducing max BFS as a module

00:06:17,439 --> 00:06:21,639
parameter which unfortunately we're now

00:06:19,839 --> 00:06:24,219
kind of stuck with to some extent for a

00:06:21,639 --> 00:06:25,930
lot of the drivers it's a legacy feature

00:06:24,219 --> 00:06:27,490
at this point so no new drivers have to

00:06:25,930 --> 00:06:29,650
support it but some of the older drivers

00:06:27,490 --> 00:06:33,159
still carry that around some of the

00:06:29,650 --> 00:06:34,719
ugliness there being it's a global

00:06:33,159 --> 00:06:35,630
parameter so all your ports would enable

00:06:34,719 --> 00:06:38,360
the same number it be

00:06:35,630 --> 00:06:41,120
whether you wanted them to or not and

00:06:38,360 --> 00:06:49,010
just in general it was kind of a pain to

00:06:41,120 --> 00:06:53,810
use so in version 3 point 8 specifically

00:06:49,010 --> 00:06:58,030
after is I think is a Linux con or not

00:06:53,810 --> 00:07:00,050
like to uh kernel summit in San Jose

00:06:58,030 --> 00:07:02,480
there ended up being a lively discussion

00:07:00,050 --> 00:07:04,190
where Lunas more or less told us just do

00:07:02,480 --> 00:07:05,510
the Sisyphus get rid of the module

00:07:04,190 --> 00:07:07,580
parameters the module parameters are

00:07:05,510 --> 00:07:10,820
ugly so that's what we did we went back

00:07:07,580 --> 00:07:13,190
to the Sisyphus value which makes life a

00:07:10,820 --> 00:07:16,940
lot easier cuz now you can control srl

00:07:13,190 --> 00:07:19,550
be on a per port basis and I just did a

00:07:16,940 --> 00:07:21,440
quick scan through the driver are

00:07:19,550 --> 00:07:23,570
through the kernel and at this point

00:07:21,440 --> 00:07:25,130
with the latest for for kernel we have

00:07:23,570 --> 00:07:28,720
at least eighteen drivers that support

00:07:25,130 --> 00:07:31,400
SR Iove from eleven different vendors

00:07:28,720 --> 00:07:33,800
what I can tell we're bordering on

00:07:31,400 --> 00:07:36,230
actually having some non network uses

00:07:33,800 --> 00:07:39,560
although I can't be certain because the

00:07:36,230 --> 00:07:41,870
two users were a crypto engine from

00:07:39,560 --> 00:07:45,830
Intel which I think may include

00:07:41,870 --> 00:07:47,210
networking on it and a storage hva which

00:07:45,830 --> 00:07:49,340
I think may have some networking

00:07:47,210 --> 00:07:50,570
functionality with it as well so we

00:07:49,340 --> 00:07:53,270
still haven't quite and gotten to the

00:07:50,570 --> 00:07:56,120
point where some other group has decided

00:07:53,270 --> 00:07:59,660
SRO be as useful but in theory SRO V is

00:07:56,120 --> 00:08:01,040
not supposed to be just networking so

00:07:59,660 --> 00:08:03,410
one of the reasons one of the

00:08:01,040 --> 00:08:05,150
motivations for this I was the one

00:08:03,410 --> 00:08:07,970
responsible for getting the IG bvf

00:08:05,150 --> 00:08:10,400
driver upstream so in some ways this is

00:08:07,970 --> 00:08:14,480
gonna be a vent at myself for some of

00:08:10,400 --> 00:08:16,280
the stuff I got away with in the IG bvf

00:08:14,480 --> 00:08:23,300
driver some of the things I'm now trying

00:08:16,280 --> 00:08:25,190
to sort out so I thought this comes up a

00:08:23,300 --> 00:08:27,680
time machine goes back slaps himself in

00:08:25,190 --> 00:08:35,030
the face for letting some crappy code

00:08:27,680 --> 00:08:39,140
through some of the limitations of SRA

00:08:35,030 --> 00:08:42,770
OB so of course one of the biggest most

00:08:39,140 --> 00:08:46,520
painful things the VF always has to rely

00:08:42,770 --> 00:08:49,790
on the PS this ends up leading to a lot

00:08:46,520 --> 00:08:53,000
of issues where for example when you

00:08:49,790 --> 00:08:55,880
load the PF driver if you change the MAC

00:08:53,000 --> 00:08:57,920
address on the VF s you'll get a notice

00:08:55,880 --> 00:08:59,720
from a number of different drivers these

00:08:57,920 --> 00:09:01,790
are the ones from Intel where I the

00:08:59,720 --> 00:09:03,620
drivers actually had but Mellanox

00:09:01,790 --> 00:09:05,270
actually does this as well where I'll

00:09:03,620 --> 00:09:06,980
display a message saying hey you just

00:09:05,270 --> 00:09:08,420
changed your MAC address guess what you

00:09:06,980 --> 00:09:10,250
need to reload the VF driver everywhere

00:09:08,420 --> 00:09:12,860
you have it which it kind of makes

00:09:10,250 --> 00:09:13,100
things painful when you launch your VF

00:09:12,860 --> 00:09:15,770
s--

00:09:13,100 --> 00:09:17,690
you dev steps in and loads the VF driver

00:09:15,770 --> 00:09:20,120
for you then you have to set the MAC

00:09:17,690 --> 00:09:23,270
address unload your VF driver and then

00:09:20,120 --> 00:09:25,790
reload it and so depending on your use

00:09:23,270 --> 00:09:27,050
case for the case of direct assignment

00:09:25,790 --> 00:09:29,750
it's not that painful because you have

00:09:27,050 --> 00:09:31,460
launched the VMS after but like in my

00:09:29,750 --> 00:09:33,500
case I tend to use VF s inside of

00:09:31,460 --> 00:09:35,600
containers and so I have to go through

00:09:33,500 --> 00:09:36,710
and rip out the VF driver and reload it

00:09:35,600 --> 00:09:43,190
in order to take care of the MAC address

00:09:36,710 --> 00:09:44,450
problems and then like I mentioned one

00:09:43,190 --> 00:09:46,690
of the other issues we have floating

00:09:44,450 --> 00:09:50,120
around out there's older kernels

00:09:46,690 --> 00:09:52,370
still only have the kernel module

00:09:50,120 --> 00:09:55,460
parameter option so that has the side

00:09:52,370 --> 00:09:57,740
effect of you say max BFS and if you

00:09:55,460 --> 00:09:59,600
have four ports in the system while all

00:09:57,740 --> 00:10:01,310
those four ports will launch the same

00:09:59,600 --> 00:10:02,750
number of BFS so instead of getting

00:10:01,310 --> 00:10:07,339
seven in this scenario where it's like

00:10:02,750 --> 00:10:10,930
igb max v f7 you get 28 VF because a lot

00:10:07,339 --> 00:10:14,210
of the ITV drivers ship with four ports

00:10:10,930 --> 00:10:17,390
another issue with BFS as it's an

00:10:14,210 --> 00:10:19,580
all-or-nothing scenario essentially once

00:10:17,390 --> 00:10:21,320
you specify the number of BS they're all

00:10:19,580 --> 00:10:23,000
there you can't take one in or one out

00:10:21,320 --> 00:10:24,440
if you want to change that number you

00:10:23,000 --> 00:10:27,380
have to throw away the whole set and

00:10:24,440 --> 00:10:30,080
start over again makes things difficult

00:10:27,380 --> 00:10:32,300
is but you know it's kind of the way it

00:10:30,080 --> 00:10:33,650
works and arguably to some extent it's

00:10:32,300 --> 00:10:35,720
kind of to be expected because you are

00:10:33,650 --> 00:10:37,990
having to do a lot of reallocation of

00:10:35,720 --> 00:10:41,900
resources interrupts

00:10:37,990 --> 00:10:42,860
queues seals

00:10:41,900 --> 00:10:44,570
you know those tend to be the main

00:10:42,860 --> 00:10:47,870
resources that get bounced around but

00:10:44,570 --> 00:10:49,280
yeah everything is shifted and SRV spec

00:10:47,870 --> 00:10:50,900
actually makes it even worse because

00:10:49,280 --> 00:10:54,890
technically if you change the number of

00:10:50,900 --> 00:10:57,209
VF s-- the physical or the the offset

00:10:54,890 --> 00:11:00,629
and the stride

00:10:57,209 --> 00:11:03,809
of the allocation order changes so say

00:11:00,629 --> 00:11:05,699
for example you could have say you

00:11:03,809 --> 00:11:07,740
allocate 5ef it might give you a mode

00:11:05,699 --> 00:11:09,119
where it says okay well for five BFS I

00:11:07,740 --> 00:11:11,550
can allocate everything within the first

00:11:09,119 --> 00:11:15,119
seven functions so I'll say offset once

00:11:11,550 --> 00:11:17,490
tried one but you take it up to like

00:11:15,119 --> 00:11:21,679
sixteen and it might suddenly jump

00:11:17,490 --> 00:11:24,360
because you can't use standard

00:11:21,679 --> 00:11:28,920
configuration mechanisms for PCI at that

00:11:24,360 --> 00:11:31,860
point so it might add an extra leave

00:11:28,920 --> 00:11:33,959
it's like 256 basically it'll fake

00:11:31,860 --> 00:11:35,939
itself into the next bus on that slot

00:11:33,959 --> 00:11:38,100
and start doing function numbers there

00:11:35,939 --> 00:11:39,629
because some devices can support a type

00:11:38,100 --> 00:11:41,759
1 configuration which is a special

00:11:39,629 --> 00:11:43,290
mechanism for PCIe you're supposed to

00:11:41,759 --> 00:11:49,999
use the bus level not at the device

00:11:43,290 --> 00:11:52,949
level oh yeah and then the last bit

00:11:49,999 --> 00:11:55,439
which is kind of annoying what we end up

00:11:52,949 --> 00:11:59,160
seeing is many in many cases the BFS you

00:11:55,439 --> 00:12:01,769
can't do anything until a PF is up the

00:11:59,160 --> 00:12:03,869
original implementation on this actually

00:12:01,769 --> 00:12:05,970
what would happen is the VF driver would

00:12:03,869 --> 00:12:08,549
just fail to load until the PPF was up

00:12:05,970 --> 00:12:10,769
which made things really annoying for

00:12:08,549 --> 00:12:13,019
igb if i at least fix that much so we

00:12:10,769 --> 00:12:15,749
could actually fake a MAC address until

00:12:13,019 --> 00:12:17,549
we found one made things a little less

00:12:15,749 --> 00:12:19,439
painful inside the guest especially if

00:12:17,549 --> 00:12:22,379
the guest supported changing the MAC

00:12:19,439 --> 00:12:24,269
address after the fact which I think

00:12:22,379 --> 00:12:29,480
I've got half way implemented on I GB

00:12:24,269 --> 00:12:29,480
and I it's GBE yep

00:12:36,790 --> 00:12:42,160
yeah in the case of so the question was

00:12:39,550 --> 00:12:44,290
how do we notify the via that the PF has

00:12:42,160 --> 00:12:46,660
changed MAC address the PF change

00:12:44,290 --> 00:12:48,460
whatever right in the case of the Intel

00:12:46,660 --> 00:12:50,380
network cards they have a mailbox

00:12:48,460 --> 00:12:52,360
mechanism that goes both ways so

00:12:50,380 --> 00:12:54,790
essentially one of the first messages

00:12:52,360 --> 00:12:57,310
that issues after a reset is what is my

00:12:54,790 --> 00:13:00,400
MAC address so basically the PF just has

00:12:57,310 --> 00:13:02,950
to notify the VF that oh you're down now

00:13:00,400 --> 00:13:04,990
until you're reset and the VF resets and

00:13:02,950 --> 00:13:07,090
it pulls back in its new MAC address of

00:13:04,990 --> 00:13:09,430
course but you said that you're you're

00:13:07,090 --> 00:13:12,610
half way of doing stuff like debuff

00:13:09,430 --> 00:13:14,980
driver will load on the VM and only when

00:13:12,610 --> 00:13:17,260
and they would generate their own Mac or

00:13:14,980 --> 00:13:20,290
something and when or they would not

00:13:17,260 --> 00:13:21,820
raise their link in this case with and

00:13:20,290 --> 00:13:24,180
he said that when eventually the path

00:13:21,820 --> 00:13:28,120
goes up they would send some event and

00:13:24,180 --> 00:13:29,620
yeah so basically the the PF + VF have

00:13:28,120 --> 00:13:31,300
just a mailbox that goes between them so

00:13:29,620 --> 00:13:33,940
it's just a matter of sending mailbox

00:13:31,300 --> 00:13:35,980
messages back and forth to do that the

00:13:33,940 --> 00:13:38,560
only thing is like in the Kate the

00:13:35,980 --> 00:13:41,260
problem is the via or the that mailbox

00:13:38,560 --> 00:13:43,660
requires interrupts so if the PF is down

00:13:41,260 --> 00:13:45,700
it's not going to receive any interrupts

00:13:43,660 --> 00:13:47,290
so therefore the quick and dirty

00:13:45,700 --> 00:13:49,360
approach was to just treat it like it's

00:13:47,290 --> 00:13:51,220
a virtual port and assign a virtual MAC

00:13:49,360 --> 00:13:53,470
address the bit I've kind of realized

00:13:51,220 --> 00:13:54,940
that we're missing is I don't think

00:13:53,470 --> 00:13:57,760
we're saying any notifications up the

00:13:54,940 --> 00:13:59,170
stack that the MAC address changed so

00:13:57,760 --> 00:14:01,440
there's things like VLANs that'll sit

00:13:59,170 --> 00:14:03,280
there with the old stale MAC address

00:14:01,440 --> 00:14:04,390
although actually I guess it kind of

00:14:03,280 --> 00:14:08,260
gets taken care of him that the link

00:14:04,390 --> 00:14:10,330
will bounce so that still causes a link

00:14:08,260 --> 00:14:15,090
change event which will end up causing

00:14:10,330 --> 00:14:15,090
that to ripple up back up the path

00:14:19,550 --> 00:14:25,579
so Alex we took care of the last issue

00:14:22,500 --> 00:14:28,199
and i40 so the PF does have an interrupt

00:14:25,579 --> 00:14:30,509
even when it is down so it can get the

00:14:28,199 --> 00:14:33,990
mailbox messages and MAC address so the

00:14:30,509 --> 00:14:36,779
VF could be up okay yeah cuz I had done

00:14:33,990 --> 00:14:38,939
the same thing for FM 10k so so FM 10k

00:14:36,779 --> 00:14:41,579
and i40 or fixes this I for TE and I GP

00:14:38,939 --> 00:14:44,670
you have to get to yet but yeah like I

00:14:41,579 --> 00:14:48,540
said in many cases not in all cases the

00:14:44,670 --> 00:14:50,959
VF cannot rely or that the VF can't do

00:14:48,540 --> 00:14:55,230
anything until the PF is actually up so

00:14:50,959 --> 00:14:56,459
that becomes a bit of an issue the other

00:14:55,230 --> 00:14:57,029
big one that ends up hurting things

00:14:56,459 --> 00:15:00,089
quite a bit

00:14:57,029 --> 00:15:04,470
a lot of NICs don't support a true l2

00:15:00,089 --> 00:15:05,639
switch and said it's more of a panic

00:15:04,470 --> 00:15:07,769
about subscribe that's essentially just

00:15:05,639 --> 00:15:11,519
an l2 filtering mechanism that gets

00:15:07,769 --> 00:15:12,959
passed over the transmitted path so it

00:15:11,519 --> 00:15:14,639
ends up happening is we either end up

00:15:12,959 --> 00:15:17,279
with promiscuous mode completely

00:15:14,639 --> 00:15:18,629
disabled or the other option is what

00:15:17,279 --> 00:15:21,420
they'll do is just mirror all outgoing

00:15:18,629 --> 00:15:23,040
traffic back to the PF which that

00:15:21,420 --> 00:15:26,670
obviously becomes problematic because

00:15:23,040 --> 00:15:28,649
then that's gonna mean any Thea traffic

00:15:26,670 --> 00:15:30,209
going out to the wire would get mirrored

00:15:28,649 --> 00:15:31,709
back to the PF so the default is usually

00:15:30,209 --> 00:15:36,920
to just not support for miss against

00:15:31,709 --> 00:15:39,839
mode at all see and yeah so instead of

00:15:36,920 --> 00:15:41,209
actually learning MAC addresses we have

00:15:39,839 --> 00:15:43,920
to actually program the filters in

00:15:41,209 --> 00:15:45,930
manually the default mechanism for that

00:15:43,920 --> 00:15:48,689
is to use the bridge FDB add command

00:15:45,930 --> 00:15:50,459
just go ahead and add MAC addresses for

00:15:48,689 --> 00:15:54,269
anything that you want to set up on the

00:15:50,459 --> 00:15:56,730
local port the only problem here is it

00:15:54,269 --> 00:15:59,069
ends up being a resource issue so a

00:15:56,730 --> 00:16:01,050
number of Nick's only support a fixed

00:15:59,069 --> 00:16:02,639
well most there's only so many MAC

00:16:01,050 --> 00:16:05,430
address filters you can have on a device

00:16:02,639 --> 00:16:07,680
in the case of the Intel i3 15 that's

00:16:05,430 --> 00:16:09,149
only about 16 it's a one gigabit port

00:16:07,680 --> 00:16:16,290
though so in theory hopefully you're not

00:16:09,149 --> 00:16:18,750
gonna subscribe to many guest that port

00:16:16,290 --> 00:16:21,509
in the case eight to five nine nine we

00:16:18,750 --> 00:16:25,079
only support 128 the other thing is this

00:16:21,509 --> 00:16:26,610
is a global resource so the PF and all

00:16:25,079 --> 00:16:29,910
bs have to share that number of

00:16:26,610 --> 00:16:30,500
addresses so if you have 63 VFS on a

00:16:29,910 --> 00:16:32,810
system

00:16:30,500 --> 00:16:34,160
it means you would only have 65 MAC

00:16:32,810 --> 00:16:39,620
addresses that you could program on the

00:16:34,160 --> 00:16:41,360
local PF the other issue is VLAN

00:16:39,620 --> 00:16:43,850
filtering on a number of drivers didn't

00:16:41,360 --> 00:16:49,160
really work very well the specific issue

00:16:43,850 --> 00:16:50,690
being OVS and the bridge expect when you

00:16:49,160 --> 00:16:54,080
turn on promiscuous that means you're

00:16:50,690 --> 00:16:56,630
going to do VLAN trunking in the case of

00:16:54,080 --> 00:16:59,180
IG b and IX GBE that wasn't the case

00:16:56,630 --> 00:16:59,720
until Isis had submitted some patches

00:16:59,180 --> 00:17:01,640
for it

00:16:59,720 --> 00:17:04,280
so specifically what's happening now

00:17:01,640 --> 00:17:06,320
with those patches it's properly it's

00:17:04,280 --> 00:17:08,480
just turning on all the VLAN filters for

00:17:06,320 --> 00:17:11,330
the PF so it can receive traffic on any

00:17:08,480 --> 00:17:13,670
given VLAN but prior to that though that

00:17:11,330 --> 00:17:16,400
didn't work that actually is causing

00:17:13,670 --> 00:17:17,840
some issues for us because with an

00:17:16,400 --> 00:17:20,390
openstack there's an effort to actually

00:17:17,840 --> 00:17:24,020
add the support for using the bridge FTB

00:17:20,390 --> 00:17:26,480
add command I believe it's the works

00:17:24,020 --> 00:17:31,370
being done by probably at this name Ron

00:17:26,480 --> 00:17:33,170
mosh Levi at Mellanox him and I actually

00:17:31,370 --> 00:17:35,150
had a discussion via IRC and the problem

00:17:33,170 --> 00:17:36,650
he was running into was only Milla Knox

00:17:35,150 --> 00:17:38,600
was actually supporting the bridge FTB

00:17:36,650 --> 00:17:41,150
add command if he lands were enabled and

00:17:38,600 --> 00:17:42,680
it was due to the fact that VLAN

00:17:41,150 --> 00:17:45,320
trunking wasn't getting turned on on any

00:17:42,680 --> 00:17:46,460
of the IG bri x gb part so I submitted

00:17:45,320 --> 00:17:50,120
patches that and hopefully they'll be

00:17:46,460 --> 00:17:56,930
resolved by the time the thing is done

00:17:50,120 --> 00:17:59,000
before six colonel gets released one

00:17:56,930 --> 00:18:02,060
other limitation for all this is the

00:17:59,000 --> 00:18:04,280
fact that really we should not be

00:18:02,060 --> 00:18:06,170
supporting promiscuous mode on the vs I

00:18:04,280 --> 00:18:08,330
know some people have actually requested

00:18:06,170 --> 00:18:10,100
the ability to support that but the fact

00:18:08,330 --> 00:18:11,180
is there's one simple problem there and

00:18:10,100 --> 00:18:13,040
that's the fact that the replication

00:18:11,180 --> 00:18:15,230
bandwidth could easily exceed the PCIe

00:18:13,040 --> 00:18:16,550
bandwidth you can already see this

00:18:15,230 --> 00:18:20,000
somewhat with multicast and broadcast

00:18:16,550 --> 00:18:22,460
traffic but the problem is if you enable

00:18:20,000 --> 00:18:25,370
Chris promiscuous mode on a Pia on a V F

00:18:22,460 --> 00:18:28,010
it means any traffic not specifically to

00:18:25,370 --> 00:18:30,440
that V F is now doubled on the system

00:18:28,010 --> 00:18:32,480
because as I said before we can't fully

00:18:30,440 --> 00:18:34,250
can't really support true promiscuous

00:18:32,480 --> 00:18:36,830
mode and so you'd end up having to

00:18:34,250 --> 00:18:38,720
mirror all incoming and outgoing traffic

00:18:36,830 --> 00:18:41,950
back to that DF and so it effectively

00:18:38,720 --> 00:18:41,950
doubled the traffic on the wire

00:18:44,860 --> 00:18:48,890
well and see that's the thing is it

00:18:46,970 --> 00:18:52,340
depends on the setup you could go a

00:18:48,890 --> 00:18:54,770
couple different ways basically it's

00:18:52,340 --> 00:18:57,800
well for promiscuous mode it ends up

00:18:54,770 --> 00:19:00,770
being essentially either if you have a

00:18:57,800 --> 00:19:02,480
true switch then you've got that solved

00:19:00,770 --> 00:19:04,130
but if not then it ends up having to be

00:19:02,480 --> 00:19:07,670
something along the lines of mirroring

00:19:04,130 --> 00:19:09,470
the outgoing traffic and then receiving

00:19:07,670 --> 00:19:14,600
anything that's not explicitly filtered

00:19:09,470 --> 00:19:16,310
to any other device so the yeah I have a

00:19:14,600 --> 00:19:19,220
question Jesse and can you talk a little

00:19:16,310 --> 00:19:20,810
bit about the use cases where people are

00:19:19,220 --> 00:19:23,990
doing network function virtualization

00:19:20,810 --> 00:19:25,820
where they want to have a thing in the

00:19:23,990 --> 00:19:27,020
VM that is actually seen all the traffic

00:19:25,820 --> 00:19:31,070
I mean how do you handle that if you

00:19:27,020 --> 00:19:32,690
can't do promiscuous mode the thing is

00:19:31,070 --> 00:19:36,200
that's essentially a limitation of the

00:19:32,690 --> 00:19:37,730
vfe that's gonna be something where the

00:19:36,200 --> 00:19:41,120
only way you could theoretically set

00:19:37,730 --> 00:19:44,300
something like that up would be to not

00:19:41,120 --> 00:19:46,040
support any kind of visibility to any of

00:19:44,300 --> 00:19:48,110
the other vs on the system basically so

00:19:46,040 --> 00:19:50,270
it would come down to you'd have to most

00:19:48,110 --> 00:19:53,990
likely give that up and go for something

00:19:50,270 --> 00:19:55,340
like a betta type configuration and then

00:19:53,990 --> 00:19:56,300
you might be able to partition the

00:19:55,340 --> 00:19:58,310
traffic out but essentially the

00:19:56,300 --> 00:20:00,560
replication bandwidth the replication of

00:19:58,310 --> 00:20:01,970
the incoming packets would become quite

00:20:00,560 --> 00:20:04,300
expensive so you could have afforded

00:20:01,970 --> 00:20:07,790
maybe one device in that configuration

00:20:04,300 --> 00:20:10,130
but any more than that and you start

00:20:07,790 --> 00:20:11,660
taking a hit for performance just

00:20:10,130 --> 00:20:13,550
because you're gonna saturate the PCIe

00:20:11,660 --> 00:20:17,180
bus before you actually saturate the

00:20:13,550 --> 00:20:18,530
before the wire gets saturated yeah we

00:20:17,180 --> 00:20:20,960
have a lot of customers who want to do

00:20:18,530 --> 00:20:22,280
things like run two VMs that are doing

00:20:20,960 --> 00:20:25,370
service chaining right where you're

00:20:22,280 --> 00:20:27,470
right moving traffic from one BF device

00:20:25,370 --> 00:20:28,760
to another great device yep and

00:20:27,470 --> 00:20:31,040
performance wise it ends up being a

00:20:28,760 --> 00:20:32,330
penalty if especially if you want one

00:20:31,040 --> 00:20:34,640
view have to see the other then it just

00:20:32,330 --> 00:20:36,140
becomes really ugly in terms of trying

00:20:34,640 --> 00:20:38,870
to do that just because it's gonna be

00:20:36,140 --> 00:20:40,100
all the replication back and forth and

00:20:38,870 --> 00:20:41,570
everything that gets transmitted it's

00:20:40,100 --> 00:20:43,760
gonna take a hit and everything that's

00:20:41,570 --> 00:20:45,650
recieves gonna take a hit and it just

00:20:43,760 --> 00:20:48,890
becomes a cascading failure essentially

00:20:45,650 --> 00:20:50,270
to the point where yeah

00:20:48,890 --> 00:20:51,380
it becomes orders of magnitude worse

00:20:50,270 --> 00:20:53,330
especially if you're trying to do

00:20:51,380 --> 00:20:55,490
anything that a serious account because

00:20:53,330 --> 00:20:56,540
essentially you reduce it like most 10

00:20:55,490 --> 00:20:58,370
gigabit NICs little

00:20:56,540 --> 00:21:00,440
allocate enough PCIe bandwidth for ten

00:20:58,370 --> 00:21:02,690
gigabits if you put 16 ports and

00:21:00,440 --> 00:21:07,670
promiscuous mode on that suddenly you're

00:21:02,690 --> 00:21:12,080
now at 1/16 of ten gigabits or one over

00:21:07,670 --> 00:21:18,200
1.6 so yeah it's a being just kind of a

00:21:12,080 --> 00:21:20,600
1.8 yeah 800 megabits for connection the

00:21:18,200 --> 00:21:22,790
i-40 Altos which actually provides the

00:21:20,600 --> 00:21:24,430
range of promiscuous behavior it's not

00:21:22,790 --> 00:21:28,940
just true promise kiss you can have

00:21:24,430 --> 00:21:31,790
default mode or limited proboscis so the

00:21:28,940 --> 00:21:34,160
question here I have is you know bf when

00:21:31,790 --> 00:21:35,930
you're doing an NFA device do you want

00:21:34,160 --> 00:21:37,910
to reflect all traffic or is that

00:21:35,930 --> 00:21:39,320
particular vs traffic feel like you want

00:21:37,910 --> 00:21:41,690
to pick and choose and just mirror some

00:21:39,320 --> 00:21:44,270
of the vs traffic yes that would depend

00:21:41,690 --> 00:21:47,420
on the customer set and for the most

00:21:44,270 --> 00:21:51,380
part we haven't actually had anyone

00:21:47,420 --> 00:21:54,140
that's forced us on this yet so and then

00:21:51,380 --> 00:21:55,880
you know that's the other open that mean

00:21:54,140 --> 00:21:57,650
although the switch provides it we don't

00:21:55,880 --> 00:22:00,290
have a way of exposing that mirroring

00:21:57,650 --> 00:22:01,790
feature externally into the kernel so

00:22:00,290 --> 00:22:05,420
that you can pick and choose say I'm

00:22:01,790 --> 00:22:07,970
gonna just this VMs traffic TX or rx you

00:22:05,420 --> 00:22:10,250
know that's the other thing so for now

00:22:07,970 --> 00:22:14,120
we actually when you turn on premise

00:22:10,250 --> 00:22:16,370
kiss on a VF the PF doesn't go into true

00:22:14,120 --> 00:22:18,380
promiscuous it goes into a default port

00:22:16,370 --> 00:22:20,150
mode which is only the traffic that is

00:22:18,380 --> 00:22:22,580
not being accepted by somebody else

00:22:20,150 --> 00:22:23,720
right so that way you can limit say

00:22:22,580 --> 00:22:25,550
button right yeah that and that's

00:22:23,720 --> 00:22:28,400
effectively the behavior after the

00:22:25,550 --> 00:22:32,450
patches that's the behavior for the IG

00:22:28,400 --> 00:22:33,980
b9x gbg as well so basically what I was

00:22:32,450 --> 00:22:35,420
trying to get out with some of this is

00:22:33,980 --> 00:22:36,950
the main things I'm looking for is

00:22:35,420 --> 00:22:39,020
something like that said if you describe

00:22:36,950 --> 00:22:40,520
her it basically any trip you enable the

00:22:39,020 --> 00:22:41,870
port to receive any traffic and then any

00:22:40,520 --> 00:22:44,870
traffic that's not specifically routed

00:22:41,870 --> 00:22:46,880
to a bf is received on the PF and then

00:22:44,870 --> 00:22:48,860
VLAN trunking needs to be supported

00:22:46,880 --> 00:22:50,840
that's kind of the bare minimum I'm

00:22:48,860 --> 00:22:52,700
asking for at this point is that if we

00:22:50,840 --> 00:22:54,890
turn on promiscuous mode and SRO B is

00:22:52,700 --> 00:22:58,220
enabled we enable VLAN trunking on the

00:22:54,890 --> 00:23:00,680
PF and support this bridge FTB add just

00:22:58,220 --> 00:23:02,180
that we have a fairly consistent set up

00:23:00,680 --> 00:23:03,980
so those of us that are trying to

00:23:02,180 --> 00:23:06,710
support this from the user space side

00:23:03,980 --> 00:23:08,360
and have a consistent interface for okay

00:23:06,710 --> 00:23:08,980
we put it in promiscuous and now we'll

00:23:08,360 --> 00:23:11,770
just do F T

00:23:08,980 --> 00:23:20,400
we can run X number of instances on top

00:23:11,770 --> 00:23:20,400
of the given hardware what's that yeah

00:23:20,730 --> 00:23:30,220
so getting back to the demo here so the

00:23:28,270 --> 00:23:34,210
system I'm using it's just a single

00:23:30,220 --> 00:23:38,080
socket core i7 49 30 K I've got support

00:23:34,210 --> 00:23:43,510
it's got an Intel X 540 dual port 10

00:23:38,080 --> 00:23:45,040
gigabit Nick in it ID 8086 1528 the OS

00:23:43,510 --> 00:23:47,530
I'm running is just the latest stock

00:23:45,040 --> 00:23:51,850
sent OS 7 is 72 now if the latest

00:23:47,530 --> 00:23:54,100
updates as far as the system setup

00:23:51,850 --> 00:23:57,610
itself I'm running a system with iommu

00:23:54,100 --> 00:24:00,220
enabled running command D message grep

00:23:57,610 --> 00:24:04,720
iommu grep enabled should give you that

00:24:00,220 --> 00:24:06,370
output until iommu in abled there's

00:24:04,720 --> 00:24:08,320
other i/o mmm use out there if you're

00:24:06,370 --> 00:24:11,830
running AMD I forget what the exact

00:24:08,320 --> 00:24:14,260
command is but there's means of checking

00:24:11,830 --> 00:24:15,610
to make sure you have an iommu that's

00:24:14,260 --> 00:24:17,650
basically the key bit is you want to

00:24:15,610 --> 00:24:19,450
make sure if you're running srl v and

00:24:17,650 --> 00:24:21,460
you plan to do direct assignment then

00:24:19,450 --> 00:24:25,630
you do need an iommu so that's this is

00:24:21,460 --> 00:24:26,920
the command to get to that if your

00:24:25,630 --> 00:24:29,290
kernel doesn't come up with that there's

00:24:26,920 --> 00:24:30,910
a couple possible scenarios one it's not

00:24:29,290 --> 00:24:33,220
enabled in the BIOS you might need to

00:24:30,910 --> 00:24:36,250
check that the other one is it may not

00:24:33,220 --> 00:24:38,710
be enabled by default that's fairly easy

00:24:36,250 --> 00:24:41,980
to modify kernel parameter Intel

00:24:38,710 --> 00:24:44,350
underscore iommu equals on for the intel

00:24:41,980 --> 00:24:45,850
parts once again I don't know what it

00:24:44,350 --> 00:24:48,310
would be for the AMD parts I haven't

00:24:45,850 --> 00:24:51,940
looked at closely um one other important

00:24:48,310 --> 00:24:54,490
thing with all this I strongly suggest

00:24:51,940 --> 00:24:58,390
using the current kernel parameter iommu

00:24:54,490 --> 00:25:01,180
equals passed through or PT the main

00:24:58,390 --> 00:25:03,940
reason being dynamically allocating our

00:25:01,180 --> 00:25:07,480
mapping on devices is really expensive

00:25:03,940 --> 00:25:10,780
so without this iommu equals PT what

00:25:07,480 --> 00:25:13,570
happens is every time a device on the

00:25:10,780 --> 00:25:15,340
system needs to map a DMA region it has

00:25:13,570 --> 00:25:17,410
to go do a lookup through a tree and it

00:25:15,340 --> 00:25:19,120
takes a lock hit and number of other

00:25:17,410 --> 00:25:19,559
things that it has to go through in

00:25:19,120 --> 00:25:21,120
order to

00:25:19,559 --> 00:25:24,120
actually get a DMA mapping in that case

00:25:21,120 --> 00:25:26,929
it gets really expensive so if you don't

00:25:24,120 --> 00:25:29,909
want to bring down the performance on a

00:25:26,929 --> 00:25:32,159
system that has an iommu n8 specifically

00:25:29,909 --> 00:25:35,639
the Intel I own I'm you enabled if I

00:25:32,159 --> 00:25:36,690
want to run with iommu equals PT just

00:25:35,639 --> 00:25:38,720
because what that does is that there's

00:25:36,690 --> 00:25:41,220
an identity mapping on the localhost and

00:25:38,720 --> 00:25:43,470
so it doesn't have to allocate resources

00:25:41,220 --> 00:25:46,499
they're just there and it just gives it

00:25:43,470 --> 00:25:50,100
the DMA address it'll still reset that

00:25:46,499 --> 00:25:53,639
all when you assign it assign the device

00:25:50,100 --> 00:25:54,570
into a KVM guest but yeah that's the one

00:25:53,639 --> 00:25:58,019
big thing here though

00:25:54,570 --> 00:26:03,389
io am mu equals PT and that'll actually

00:25:58,019 --> 00:26:05,940
allow for a lot better performance so

00:26:03,389 --> 00:26:07,919
yeah then the next bit in all this we

00:26:05,940 --> 00:26:10,019
have to go through and make sure the

00:26:07,919 --> 00:26:12,629
resources were allocated this is one

00:26:10,019 --> 00:26:14,340
that this system actually didn't do by

00:26:12,629 --> 00:26:17,159
default because the bias on it didn't

00:26:14,340 --> 00:26:18,809
actually support SR iove so in order to

00:26:17,159 --> 00:26:20,879
work around that what I ended up doing

00:26:18,809 --> 00:26:23,629
is I had to boot with the kernel

00:26:20,879 --> 00:26:25,860
parameter P CI equals realloc

00:26:23,629 --> 00:26:30,929
specifically what you would see here in

00:26:25,860 --> 00:26:33,450
this LSP CI with grep command if it that

00:26:30,929 --> 00:26:35,249
the system doesn't support s RI OB

00:26:33,450 --> 00:26:37,499
resource allocation does these will all

00:26:35,249 --> 00:26:40,919
be 0 and when you travel launch SRB

00:26:37,499 --> 00:26:42,990
it'll just give you an error so juice

00:26:40,919 --> 00:26:44,820
just booting with PCI equals realloc

00:26:42,990 --> 00:26:46,980
allows the kernel to go through an

00:26:44,820 --> 00:26:50,210
attempt to assign resources to the SRO

00:26:46,980 --> 00:26:52,769
be regions if they're not populated

00:26:50,210 --> 00:26:57,389
another piece in all of this that

00:26:52,769 --> 00:27:00,869
becomes useful is a RI or the alternate

00:26:57,389 --> 00:27:03,059
resource identifier I think basically

00:27:00,869 --> 00:27:07,440
what that does is that allows us to you

00:27:03,059 --> 00:27:09,539
use the same or basically allows us to

00:27:07,440 --> 00:27:10,519
use type 1 configuration or type 0

00:27:09,539 --> 00:27:13,700
configuration

00:27:10,519 --> 00:27:17,340
against type 0 configuration for

00:27:13,700 --> 00:27:19,679
addresses beyond or device functions

00:27:17,340 --> 00:27:21,539
beyond 7 so basically combines the

00:27:19,679 --> 00:27:23,999
device and function number into one

00:27:21,539 --> 00:27:28,259
logical function number so you can go

00:27:23,999 --> 00:27:29,610
from 0 to 255 instead of 0 to 7 it

00:27:28,259 --> 00:27:31,019
basically just saves a lot on address

00:27:29,610 --> 00:27:32,250
space just because otherwise we're

00:27:31,019 --> 00:27:35,790
forced to jump into the neck

00:27:32,250 --> 00:27:38,730
bus number and do some workarounds using

00:27:35,790 --> 00:27:41,550
a device that requires support for both

00:27:38,730 --> 00:27:42,750
type-0 type-1 configuration but this we

00:27:41,550 --> 00:27:46,170
only have to support one type of

00:27:42,750 --> 00:27:48,390
configuration and in the last bit in all

00:27:46,170 --> 00:27:49,680
this if air I is not supported like I

00:27:48,390 --> 00:27:52,020
said it has to jump to another bus

00:27:49,680 --> 00:27:55,650
number and in that scenario then we

00:27:52,020 --> 00:27:58,530
would end up needing to use PCIe equals

00:27:55,650 --> 00:28:00,210
assigned buses because if a RI has not

00:27:58,530 --> 00:28:03,060
supported although in my system it was

00:28:00,210 --> 00:28:05,760
you might end up needing to use an

00:28:03,060 --> 00:28:07,500
additional bus number and FS Ryobi is

00:28:05,760 --> 00:28:10,440
not supported by the bias you won't do

00:28:07,500 --> 00:28:12,390
that so we use PCI equals assigned buses

00:28:10,440 --> 00:28:13,620
and it'll just squeeze an extra bus

00:28:12,390 --> 00:28:15,720
number and and shift all the other

00:28:13,620 --> 00:28:21,750
devices up chose different PCI bus

00:28:15,720 --> 00:28:24,900
number links back to the DMA slide so

00:28:21,750 --> 00:28:28,020
you say that when you turn on the iommu

00:28:24,900 --> 00:28:29,760
first Iove so if if drivers call him a

00:28:28,020 --> 00:28:36,420
map or an map on the fast path they're

00:28:29,760 --> 00:28:39,030
gonna it's gonna so typically what

00:28:36,420 --> 00:28:40,650
drivers do they they would do DMA map

00:28:39,030 --> 00:28:43,200
initially and in the data pass you just

00:28:40,650 --> 00:28:45,270
do sink and a sink right that's it and

00:28:43,200 --> 00:28:52,500
that's with natural performance either

00:28:45,270 --> 00:28:53,910
also in try to do that on transmit this

00:28:52,500 --> 00:28:56,280
of course enforcement you cannot do that

00:28:53,910 --> 00:28:59,790
because you get the buffer only right so

00:28:56,280 --> 00:29:02,370
that this means that inherently virtual

00:28:59,790 --> 00:29:03,840
function performance on vs

00:29:02,370 --> 00:29:06,240
that's the thing is it doesn't affect

00:29:03,840 --> 00:29:10,800
the vs because they're abstracted away

00:29:06,240 --> 00:29:13,530
from it by the qemu it's just on the

00:29:10,800 --> 00:29:16,590
local so like the PF when it's running

00:29:13,530 --> 00:29:19,380
in the host it has to do the DMA map and

00:29:16,590 --> 00:29:21,720
nmap talking to the iommu and so that

00:29:19,380 --> 00:29:23,070
becomes more expensive on the PF while

00:29:21,720 --> 00:29:25,560
in do you own the virtual machine it's

00:29:23,070 --> 00:29:28,200
because qemu is stacked about that so

00:29:25,560 --> 00:29:30,390
what happens is the iommu when you tell

00:29:28,200 --> 00:29:32,580
it to map the device into the guest it

00:29:30,390 --> 00:29:34,170
just mats the entire region and so it

00:29:32,580 --> 00:29:36,810
does a one-to-one mapping for the guest

00:29:34,170 --> 00:29:39,630
and that is what gets translated and

00:29:36,810 --> 00:29:40,800
handed to the device and so yeah that

00:29:39,630 --> 00:29:42,510
that's what's going on there that's why

00:29:40,800 --> 00:29:45,450
the VFS run at full line right where the

00:29:42,510 --> 00:29:46,310
PF starts like dragging along and so

00:29:45,450 --> 00:29:49,580
yeah so you combine

00:29:46,310 --> 00:29:51,320
that with the PF promiscuous yeah that's

00:29:49,580 --> 00:29:53,000
why people prefer just to not try to

00:29:51,320 --> 00:29:58,010
enable that at all just because it slows

00:29:53,000 --> 00:30:00,080
things down okay so another bit and all

00:29:58,010 --> 00:30:01,520
this like ice mentioned it's painful to

00:30:00,080 --> 00:30:03,980
have the VF driver load and then you

00:30:01,520 --> 00:30:06,470
have to unload it so some people that

00:30:03,980 --> 00:30:08,840
are doing just the use the VF for direct

00:30:06,470 --> 00:30:11,810
assignment prefer to just blacklist the

00:30:08,840 --> 00:30:16,070
VF driver in this case is just echo

00:30:11,810 --> 00:30:18,760
blacklist ihe BBF into the blacklist

00:30:16,070 --> 00:30:21,740
file for the modprobe

00:30:18,760 --> 00:30:23,270
and the last steps in all this are just

00:30:21,740 --> 00:30:24,890
to load the driver and configure the

00:30:23,270 --> 00:30:28,010
interfaces which is where I started out

00:30:24,890 --> 00:30:29,960
at when I was doing the demo and so

00:30:28,010 --> 00:30:37,580
here's the command just to list the

00:30:29,960 --> 00:30:40,220
interfaces okay so let's see where we

00:30:37,580 --> 00:30:45,760
are oh come on

00:30:40,220 --> 00:30:45,760
I happened here

00:30:48,840 --> 00:30:58,679
now hmm give it one more shot no oh well

00:30:55,620 --> 00:31:02,970
let's take the demo didn't so I get

00:30:58,679 --> 00:31:05,610
burning deaf stack anyway so it's like

00:31:02,970 --> 00:31:12,649
the demo didn't work out I'll go back to

00:31:05,610 --> 00:31:14,429
the slides see so setting up dev stack

00:31:12,649 --> 00:31:17,730
for those that aren't familiar with

00:31:14,429 --> 00:31:19,139
devstack it's the developer it's it's

00:31:17,730 --> 00:31:21,950
the way most developers use for

00:31:19,139 --> 00:31:21,950
installing devstack

00:31:23,149 --> 00:31:30,029
the only issue really is it's

00:31:26,820 --> 00:31:32,309
essentially just a set of SSH scripts

00:31:30,029 --> 00:31:37,019
that pull a number of git repos and

00:31:32,309 --> 00:31:41,730
start calling python scripts within

00:31:37,019 --> 00:31:43,379
those git repos so it makes things kind

00:31:41,730 --> 00:31:45,929
of unstable let's just put it that way

00:31:43,379 --> 00:31:47,220
you end up with things might work and

00:31:45,929 --> 00:31:48,929
then somebody changes something in one

00:31:47,220 --> 00:31:51,080
git repo and things suddenly break and

00:31:48,929 --> 00:31:52,919
don't work anymore

00:31:51,080 --> 00:31:54,360
so off to try to figure out what

00:31:52,919 --> 00:31:59,580
happened actually maybe let's go ahead

00:31:54,360 --> 00:32:00,899
and do that so yeah so the setup for it

00:31:59,580 --> 00:32:06,360
you basically have to pull the git repo

00:32:00,899 --> 00:32:08,549
down I had to actually install an extra

00:32:06,360 --> 00:32:11,039
package because the latest is the latest

00:32:08,549 --> 00:32:12,330
install is having some issues does it

00:32:11,039 --> 00:32:14,700
require a few extra dependencies that

00:32:12,330 --> 00:32:17,549
weren't on sent OS so how to run the

00:32:14,700 --> 00:32:22,470
Python install for easy install requests

00:32:17,549 --> 00:32:26,009
in order to resolve that issue had to go

00:32:22,470 --> 00:32:30,529
through and create a user specifically

00:32:26,009 --> 00:32:33,139
the user stack and we start getting into

00:32:30,529 --> 00:32:37,230
some of the configuration bits here

00:32:33,139 --> 00:32:38,340
so by default and I don't know if that I

00:32:37,230 --> 00:32:42,659
have to double check that's still a case

00:32:38,340 --> 00:32:48,409
by dev stack friends with what's called

00:32:42,659 --> 00:32:53,309
Nova Network Nova is the compute side of

00:32:48,409 --> 00:32:54,899
the open stack and so the way things

00:32:53,309 --> 00:32:56,159
used to be configured is Nova would

00:32:54,899 --> 00:32:58,080
actually set up the networks for you

00:32:56,159 --> 00:33:00,500
last kind of deprecated approach the

00:32:58,080 --> 00:33:02,299
first thing we wanted to do is disable

00:33:00,500 --> 00:33:03,919
Nova networking

00:33:02,299 --> 00:33:06,139
and after that we go through and enable

00:33:03,919 --> 00:33:08,659
the Neutron services we want Jen's up

00:33:06,139 --> 00:33:10,129
being and of course everything starts

00:33:08,659 --> 00:33:14,299
with the Q because this used to be

00:33:10,129 --> 00:33:15,709
quantum so yeah they just stuck with the

00:33:14,299 --> 00:33:18,259
naming scheme even after they started

00:33:15,709 --> 00:33:19,639
adding new new modules and such so we

00:33:18,259 --> 00:33:21,679
end up enabling services specifically

00:33:19,639 --> 00:33:27,379
the last one we need is the Q SRO V

00:33:21,679 --> 00:33:28,969
agent as far as the set up the devices I

00:33:27,379 --> 00:33:32,179
was using don't support anything other

00:33:28,969 --> 00:33:35,149
than VLANs so I decided to use VLAN

00:33:32,179 --> 00:33:39,249
isolation for the provider and tenant

00:33:35,149 --> 00:33:42,320
networks let's see here

00:33:39,249 --> 00:33:45,469
and most that's there yes as the port

00:33:42,320 --> 00:33:47,149
was a NP 3 s 0 F 0 I was just going

00:33:45,469 --> 00:33:53,269
through and setting up the networks on

00:33:47,149 --> 00:33:56,299
there a little bit more stuff it's got

00:33:53,269 --> 00:33:59,239
the l2 plug-in that we needed to set up

00:33:56,299 --> 00:34:01,669
we enable the mechanism drivers for open

00:33:59,239 --> 00:34:04,999
V switch and SRO V next switch which is

00:34:01,669 --> 00:34:06,709
what does the configuration specify the

00:34:04,999 --> 00:34:10,099
type which in our case want VLAN again

00:34:06,709 --> 00:34:11,720
so we set that up there's a bit here

00:34:10,099 --> 00:34:16,220
where I have to add a plug-in for some

00:34:11,720 --> 00:34:20,359
QoS support that was recently added we

00:34:16,220 --> 00:34:21,649
mapped the PF to a network and then list

00:34:20,359 --> 00:34:25,240
the devices that we actually want to

00:34:21,649 --> 00:34:32,899
support so in this case at the IDS for

00:34:25,240 --> 00:34:34,159
the X 540 NIC and the x5 for TBS and the

00:34:32,899 --> 00:34:36,829
last bit is we have to go through and

00:34:34,159 --> 00:34:39,319
specify via whitelist what devices are

00:34:36,829 --> 00:34:40,940
supported and what's not we to find an

00:34:39,319 --> 00:34:44,089
alias if you want to use it in some

00:34:40,940 --> 00:34:45,799
variations later and the whitelist here

00:34:44,089 --> 00:34:47,210
is basically we specify the PF and that

00:34:45,799 --> 00:34:54,579
tells it that we want pull in all of the

00:34:47,210 --> 00:34:56,659
BFS and then after that it's just some

00:34:54,579 --> 00:35:00,079
follow-up stuff this stuff is fairly

00:34:56,659 --> 00:35:02,119
standard with the exception so if you

00:35:00,079 --> 00:35:04,309
follow most dev stack install demos this

00:35:02,119 --> 00:35:08,630
stuff is all fairly standard enable SSH

00:35:04,309 --> 00:35:11,480
into the guests able ping and we have to

00:35:08,630 --> 00:35:13,789
go ahead and create the port and so we

00:35:11,480 --> 00:35:16,050
go through and actually create a the vs1

00:35:13,789 --> 00:35:18,180
port at a time

00:35:16,050 --> 00:35:19,770
one thing we don't have control over is

00:35:18,180 --> 00:35:25,880
we don't actually get to specify right

00:35:19,770 --> 00:35:25,880
now what VF were pulling ins question

00:35:28,760 --> 00:35:34,880
okay so I'll repeat the question

00:35:31,080 --> 00:35:37,950
how do security groups work with SR iov

00:35:34,880 --> 00:35:40,410
they don't really so basically you're

00:35:37,950 --> 00:35:42,720
you're stuck relying on the hardware in

00:35:40,410 --> 00:35:45,510
order to control that it so most

00:35:42,720 --> 00:35:48,440
Hardware when you specify a VLAN or a

00:35:45,510 --> 00:35:50,820
MAC address it's locked in for that VF

00:35:48,440 --> 00:35:52,650
so that's pretty much as much security

00:35:50,820 --> 00:35:55,490
as you get for controlling it is the

00:35:52,650 --> 00:36:00,510
anti-spoofing that's built into the NICS

00:35:55,490 --> 00:36:06,420
so be it yeah yeah ante spoofs basically

00:36:00,510 --> 00:36:08,130
as much as we can do right now right so

00:36:06,420 --> 00:36:10,380
yeah that's the one thing is there's no

00:36:08,130 --> 00:36:12,570
way to really assign security other than

00:36:10,380 --> 00:36:14,250
what the hardware supports obviously

00:36:12,570 --> 00:36:17,100
because we don't have a direct interface

00:36:14,250 --> 00:36:18,480
into or we can't get in between the two

00:36:17,100 --> 00:36:20,370
unless there's a full switch there that

00:36:18,480 --> 00:36:21,870
we could control so we don't have any

00:36:20,370 --> 00:36:24,720
way of enforcing any additional security

00:36:21,870 --> 00:36:30,450
other than the mac VLAN rules that can

00:36:24,720 --> 00:36:34,650
be controlled on the PF so once you have

00:36:30,450 --> 00:36:36,600
the VF created as a neutron port you can

00:36:34,650 --> 00:36:38,640
go out and actually find that Neutron

00:36:36,600 --> 00:36:41,600
port ID and then after that it's a

00:36:38,640 --> 00:36:45,060
matter of just launching a VM with the

00:36:41,600 --> 00:36:48,180
with the port ID listed at that point

00:36:45,060 --> 00:36:50,130
with any luck everything will have

00:36:48,180 --> 00:36:54,060
launched in my case it didn't and you

00:36:50,130 --> 00:36:55,830
would have the Nova come up and if you

00:36:54,060 --> 00:37:00,390
do nova list it be active and could

00:36:55,830 --> 00:37:02,150
actually ssh into it at that point is

00:37:00,390 --> 00:37:06,000
just a matter of logging into the VMS

00:37:02,150 --> 00:37:08,670
the one tricky bit there OpenStack uses

00:37:06,000 --> 00:37:13,650
namespaces to isolate everything so by

00:37:08,670 --> 00:37:15,900
default unless you have some other port

00:37:13,650 --> 00:37:18,540
like you could could actually reuse the

00:37:15,900 --> 00:37:21,000
assignment address the PF and you'd have

00:37:18,540 --> 00:37:22,620
access to the network as long as you set

00:37:21,000 --> 00:37:26,910
up a VLAN not the correct VLAN on it

00:37:22,620 --> 00:37:27,920
otherwise by default you don't have easy

00:37:26,910 --> 00:37:30,440
access to network

00:37:27,920 --> 00:37:32,270
going through a namespace in the case of

00:37:30,440 --> 00:37:35,120
neutron the easiest way to get access to

00:37:32,270 --> 00:37:38,090
it is to use the DHCP namespace that

00:37:35,120 --> 00:37:42,590
gets created so you can dump it and then

00:37:38,090 --> 00:37:46,070
log in using a command here the sudo or

00:37:42,590 --> 00:37:47,480
sudo IP nedda an S exec in this case

00:37:46,070 --> 00:37:50,750
this is the namespace and sir there's

00:37:47,480 --> 00:37:53,390
only the one and then sudo I use tack

00:37:50,750 --> 00:37:55,100
that gives you a bash session that has

00:37:53,390 --> 00:37:56,180
access to that namespace and I actually

00:37:55,100 --> 00:37:58,010
is having to jump through hoops here

00:37:56,180 --> 00:38:00,830
because stack you can't change

00:37:58,010 --> 00:38:02,840
namespaces but root can so i sudo it

00:38:00,830 --> 00:38:05,270
into route to get access to namespace

00:38:02,840 --> 00:38:08,660
then had brute sudo back out into stack

00:38:05,270 --> 00:38:11,690
so that the bash session was running in

00:38:08,660 --> 00:38:13,190
the correct namespace then after that's

00:38:11,690 --> 00:38:15,220
just a matter of being able to log in

00:38:13,190 --> 00:38:18,590
which is fairly straightforward

00:38:15,220 --> 00:38:20,870
this is just SSH here and in my case I

00:38:18,590 --> 00:38:25,280
was using a fedora cloud image so the

00:38:20,870 --> 00:38:27,530
user to login s was fedora so and

00:38:25,280 --> 00:38:29,480
unfortunately I guess I can take one

00:38:27,530 --> 00:38:30,920
quick look here see if I can make heads

00:38:29,480 --> 00:38:38,680
or tails of what happened before I go up

00:38:30,920 --> 00:38:38,680
any further so it was give this one more

00:38:39,040 --> 00:38:45,310
so to undo the mess that I made around

00:38:42,320 --> 00:38:45,310
unstack real quick

00:38:48,730 --> 00:38:52,530
we're not that quick apparently

00:39:03,920 --> 00:39:06,920
yeah

00:39:12,669 --> 00:39:22,489
that run okay so yeah that's what I get

00:39:19,909 --> 00:39:23,719
for trying to use devstack for my as

00:39:22,489 --> 00:39:25,999
I've kind of afraid that might have a

00:39:23,719 --> 00:39:27,289
nature tried it a couple times this week

00:39:25,999 --> 00:39:31,640
and worked fine and of course the one

00:39:27,289 --> 00:39:34,689
day I needed it so the future of

00:39:31,640 --> 00:39:37,269
everything for this so hot plug is

00:39:34,689 --> 00:39:41,209
currently not supported and OpenStack

00:39:37,269 --> 00:39:42,529
the main reason being it's a matter of

00:39:41,209 --> 00:39:45,019
getting two modules to talk together

00:39:42,529 --> 00:39:47,479
specifically Nova's what controls SR IO

00:39:45,019 --> 00:39:50,630
be and neutron is what configures the

00:39:47,479 --> 00:39:51,890
networking and right now Neutron has to

00:39:50,630 --> 00:39:54,919
set up the port but it needs the

00:39:51,890 --> 00:39:57,829
bindings for the device and so there's

00:39:54,919 --> 00:39:59,539
work going on to get that done but in

00:39:57,829 --> 00:40:02,209
the current releases of OpenStack that

00:39:59,539 --> 00:40:04,159
functionality isn't there functionality

00:40:02,209 --> 00:40:06,380
is there in qmu and the Linux kernel to

00:40:04,159 --> 00:40:09,519
support it so it's just an open stack

00:40:06,380 --> 00:40:12,199
issue that has yet to get resolved

00:40:09,519 --> 00:40:13,579
another big one that I actually I've

00:40:12,199 --> 00:40:17,419
been trying in quite a bit on on the

00:40:13,579 --> 00:40:18,939
mailing list is live migration with BS a

00:40:17,419 --> 00:40:21,559
lot of it's still a work in progress

00:40:18,939 --> 00:40:24,559
there are some patches submitted by some

00:40:21,559 --> 00:40:26,029
developers at Intel I had some specific

00:40:24,559 --> 00:40:27,439
feedback because they were implementing

00:40:26,029 --> 00:40:29,899
what ended up being a very drivers

00:40:27,439 --> 00:40:33,169
specific solution I really feel we can

00:40:29,899 --> 00:40:34,999
make this quite a bit more generic if

00:40:33,169 --> 00:40:38,239
right now there is a workaround for it

00:40:34,999 --> 00:40:42,619
essentially the big issue with SRO V and

00:40:38,239 --> 00:40:45,409
live migration is the VF cannot doesn't

00:40:42,619 --> 00:40:48,229
take part in dirty page tracking so the

00:40:45,409 --> 00:40:51,380
device DMA is into a page there's no way

00:40:48,229 --> 00:40:52,999
for the hypervisor to know that hey

00:40:51,380 --> 00:40:55,189
something just happened to that page you

00:40:52,999 --> 00:40:57,019
have to migrate it as well and so we

00:40:55,189 --> 00:41:01,639
need some sort of mechanism mechanism to

00:40:57,019 --> 00:41:03,319
do that so right now the the solution

00:41:01,639 --> 00:41:06,199
essentially is you create a bonded pair

00:41:03,319 --> 00:41:10,489
between a VF and like a Verdejo

00:41:06,199 --> 00:41:13,369
interface and you have to eject the VF

00:41:10,489 --> 00:41:15,199
out of the guest before you even start

00:41:13,369 --> 00:41:18,049
the migrations so that when you're doing

00:41:15,199 --> 00:41:20,239
the dirty page tracking during the warm

00:41:18,049 --> 00:41:22,399
up phase of the migration you don't have

00:41:20,239 --> 00:41:23,719
DNA actually coming in from a device

00:41:22,399 --> 00:41:24,270
it's something that can be controlled in

00:41:23,719 --> 00:41:26,520
all instances

00:41:24,270 --> 00:41:28,860
is an after-the-fact you reinsert and

00:41:26,520 --> 00:41:31,850
after migrations completed you can then

00:41:28,860 --> 00:41:31,850
reinsert the device

00:41:31,880 --> 00:41:36,210
the overall goal I think the general

00:41:34,830 --> 00:41:38,400
consensus between myself and a few

00:41:36,210 --> 00:41:39,870
others is the goal should be instead of

00:41:38,400 --> 00:41:41,250
trying to just completely throw that out

00:41:39,870 --> 00:41:43,110
and come up with a driver specific

00:41:41,250 --> 00:41:45,270
solution that's trying to maintain all

00:41:43,110 --> 00:41:48,870
this extra state we should come up with

00:41:45,270 --> 00:41:51,750
a more Universal approach to it instead

00:41:48,870 --> 00:41:53,580
of just outright jumping straight to

00:41:51,750 --> 00:41:55,950
okay this is our final solution take

00:41:53,580 --> 00:41:57,690
things in stages so one of the first

00:41:55,950 --> 00:41:58,860
things we came up with as an idea is

00:41:57,690 --> 00:42:01,560
basically we need to come up with a

00:41:58,860 --> 00:42:03,930
mechanism it allows for DMA dirty page

00:42:01,560 --> 00:42:13,560
tracking inside the guest set the guest

00:42:03,930 --> 00:42:14,640
can tag pages is dirty let's see so yeah

00:42:13,560 --> 00:42:18,420
so basically what would have to happen

00:42:14,640 --> 00:42:20,010
is if a driver called unmapped page that

00:42:18,420 --> 00:42:23,400
unmapped page call would have to then

00:42:20,010 --> 00:42:24,990
dirty the page on the guest somehow that

00:42:23,400 --> 00:42:26,370
would then allow it to take part in the

00:42:24,990 --> 00:42:31,230
dirty page tracking that's being used

00:42:26,370 --> 00:42:32,790
during the migration warm up phase the

00:42:31,230 --> 00:42:34,530
dirty page tracking has been implemented

00:42:32,790 --> 00:42:36,180
got it a couple of proof of concepts I

00:42:34,530 --> 00:42:40,230
threw a patch out on the mailing list

00:42:36,180 --> 00:42:41,460
for just as a proof of concept that

00:42:40,230 --> 00:42:44,100
since she was just doing dirty page

00:42:41,460 --> 00:42:45,360
tracking always if software i/o TLB was

00:42:44,100 --> 00:42:47,100
enabled because there's an obvious

00:42:45,360 --> 00:42:49,020
overhead that comes in there too so we

00:42:47,100 --> 00:42:50,250
end up needing to look at an approach

00:42:49,020 --> 00:42:51,930
that maybe makes use of something like a

00:42:50,250 --> 00:42:54,240
static key or something like that so

00:42:51,930 --> 00:42:56,240
that we only turn this on when migration

00:42:54,240 --> 00:42:59,400
is actually happening

00:42:56,240 --> 00:43:02,280
the other issue becomes how do we tell

00:42:59,400 --> 00:43:04,230
the device needs to stop doing DMA and

00:43:02,280 --> 00:43:06,990
this is one there are problems we had

00:43:04,230 --> 00:43:08,850
with the Intel patches is they believed

00:43:06,990 --> 00:43:10,380
they didn't need to stop DMA but there

00:43:08,850 --> 00:43:15,210
was like several holes in their argument

00:43:10,380 --> 00:43:17,160
I basically I inserters explained that

00:43:15,210 --> 00:43:18,210
device has to be told to stop because

00:43:17,160 --> 00:43:21,300
otherwise you're going to end up with a

00:43:18,210 --> 00:43:23,460
dirty DMA and memory gang handle data

00:43:21,300 --> 00:43:25,140
order because either it's going to write

00:43:23,460 --> 00:43:26,760
a descriptor or it's going to write data

00:43:25,140 --> 00:43:27,690
and something's gonna change and data is

00:43:26,760 --> 00:43:31,200
going to get lost

00:43:27,690 --> 00:43:32,760
so even if we're trying to do live

00:43:31,200 --> 00:43:36,180
migration we probably will have to cause

00:43:32,760 --> 00:43:37,140
the VF device to stop using some

00:43:36,180 --> 00:43:39,089
mechanism

00:43:37,140 --> 00:43:40,740
I had actually suggested and looking at

00:43:39,089 --> 00:43:42,779
possibly doing something like some sort

00:43:40,740 --> 00:43:44,369
of power management type event basically

00:43:42,779 --> 00:43:46,410
put the device into what would be like a

00:43:44,369 --> 00:43:47,430
low-power or put that yeah just the

00:43:46,410 --> 00:43:50,160
device into what would be like a

00:43:47,430 --> 00:43:52,109
low-power state so it just suspends for

00:43:50,160 --> 00:43:55,200
a moment so hopefully we could get the

00:43:52,109 --> 00:43:56,700
migration time greatly reduced because

00:43:55,200 --> 00:43:58,200
we need to be able to stop the DMA at

00:43:56,700 --> 00:43:59,760
the last moment before we actually start

00:43:58,200 --> 00:44:03,180
doing the migration otherwise we'll have

00:43:59,760 --> 00:44:04,619
DMA occurring even after the warm-up

00:44:03,180 --> 00:44:05,849
phase and you'll still be writing into

00:44:04,619 --> 00:44:09,329
that and we don't want the device

00:44:05,849 --> 00:44:12,599
writing into memory when the whole VM is

00:44:09,329 --> 00:44:14,460
supposed to be frozen and so that was

00:44:12,599 --> 00:44:15,839
the other bit in it so we got two big

00:44:14,460 --> 00:44:18,240
pieces we have to sort out which is the

00:44:15,839 --> 00:44:19,529
dirty page tracking and creating the

00:44:18,240 --> 00:44:23,930
device Alex

00:44:19,529 --> 00:44:26,220
yep so you wrote require significant

00:44:23,930 --> 00:44:29,269
guess so

00:44:26,220 --> 00:44:31,769
the Intel pages that we were discussing

00:44:29,269 --> 00:44:33,420
we also did it Mellow in a some

00:44:31,769 --> 00:44:37,289
hackathon and it ended up to be a very

00:44:33,420 --> 00:44:39,450
small driver patch so like most of the

00:44:37,289 --> 00:44:41,549
patch over in qmu which are common to

00:44:39,450 --> 00:44:43,980
all vendors and and then you're talking

00:44:41,549 --> 00:44:45,960
about this approachment qmu when they

00:44:43,980 --> 00:44:48,690
know that almost done they send this

00:44:45,960 --> 00:44:50,670
interrupts right to the driver the

00:44:48,690 --> 00:44:51,329
driver cleans everything and says hey

00:44:50,670 --> 00:44:52,890
I'm ready

00:44:51,329 --> 00:44:54,599
and then they see that's the thing is

00:44:52,890 --> 00:44:57,059
how how does that interrupt get sent

00:44:54,599 --> 00:45:00,779
because the patch I saw they were adding

00:44:57,059 --> 00:45:03,480
a proprietary per driver configuration

00:45:00,779 --> 00:45:07,710
space piece and so it becomes a problem

00:45:03,480 --> 00:45:10,200
of how do we support that on it wasn't I

00:45:07,710 --> 00:45:12,150
mean ii like eventually the patches went

00:45:10,200 --> 00:45:15,599
to a point where they added another pci

00:45:12,150 --> 00:45:16,950
um I remember but and well from what I

00:45:15,599 --> 00:45:18,660
saw they were adding just a arbitrary

00:45:16,950 --> 00:45:20,220
byte somewhere in the configuration

00:45:18,660 --> 00:45:22,049
space they were trying to pick a hole

00:45:20,220 --> 00:45:23,579
somewhere and it ended up being that

00:45:22,049 --> 00:45:25,829
they couldn't support it on every driver

00:45:23,579 --> 00:45:27,539
because well ends up being a different a

00:45:25,829 --> 00:45:30,990
different spot on every driver was the

00:45:27,539 --> 00:45:33,390
problem it was part of it okay we can

00:45:30,990 --> 00:45:34,859
look at how but it wasn't significant it

00:45:33,390 --> 00:45:37,230
was a very small patch to the driver

00:45:34,859 --> 00:45:38,759
right except for it ends up being the

00:45:37,230 --> 00:45:41,220
bigger complication indeed it's it's

00:45:38,759 --> 00:45:44,039
it's a petrol driver right well but it's

00:45:41,220 --> 00:45:45,420
not a driver per OS and so that's the

00:45:44,039 --> 00:45:47,849
thing is if you want to support

00:45:45,420 --> 00:45:49,349
windows migration on linux then you got

00:45:47,849 --> 00:45:50,790
to modify the windows driver if you want

00:45:49,349 --> 00:45:53,160
to support previous do you have to

00:45:50,790 --> 00:45:54,720
modify and so it just becomes this act

00:45:53,160 --> 00:45:56,790
you know it becomes a matrix problem

00:45:54,720 --> 00:45:59,490
where it ends up being sometimes you

00:45:56,790 --> 00:46:00,960
have to tell by how many OS is yeah I

00:45:59,490 --> 00:46:02,790
got it but sometimes you you have to

00:46:00,960 --> 00:46:06,200
start somewhere to get to start getting

00:46:02,790 --> 00:46:11,780
going right but see at the same time

00:46:06,200 --> 00:46:15,900
yeah anyway we can discuss off offline

00:46:11,780 --> 00:46:20,369
so yeah and yeah there's still the

00:46:15,900 --> 00:46:22,099
problem the PF promiscuous mode so like

00:46:20,369 --> 00:46:27,540
I mentioned basically the big thing here

00:46:22,099 --> 00:46:31,020
all I'm asking for is if we support SRO

00:46:27,540 --> 00:46:33,510
V and we want to allow anything to say

00:46:31,020 --> 00:46:37,349
does promiscuous mode I would ask that

00:46:33,510 --> 00:46:39,990
we at least support VLAN trunking that's

00:46:37,349 --> 00:46:43,740
a minimum and yeah ideally VLAN trunking

00:46:39,990 --> 00:46:45,660
plus any the ability to receive packets

00:46:43,740 --> 00:46:49,079
and route them to the PF if they're not

00:46:45,660 --> 00:46:51,480
already set up on one of the vs that way

00:46:49,079 --> 00:46:55,160
we can get at least that much working it

00:46:51,480 --> 00:47:00,750
with the bridge FD week add command

00:46:55,160 --> 00:47:03,170
that's pretty much it so any other

00:47:00,750 --> 00:47:03,170
questions

00:47:05,359 --> 00:47:11,280
so you said you need VLAN trunking and

00:47:08,760 --> 00:47:12,750
stuff do you see that for obvious or

00:47:11,280 --> 00:47:14,430
only for privilege to be absol

00:47:12,750 --> 00:47:17,579
oh no it's not actually on the BFS

00:47:14,430 --> 00:47:19,859
that's on the PA yeah I mean the people

00:47:17,579 --> 00:47:21,630
support but for obvious or just for

00:47:19,859 --> 00:47:22,980
leaves that are privileged because

00:47:21,630 --> 00:47:25,020
that's the model of your going but not

00:47:22,980 --> 00:47:26,819
for obvious right yeah

00:47:25,020 --> 00:47:28,650
so yeah if you line trunking for the vs

00:47:26,819 --> 00:47:31,200
I wasn't actually addressing on the BS

00:47:28,650 --> 00:47:32,309
but that would be privileged only if

00:47:31,200 --> 00:47:35,819
you're going to try to do VLAN trunking

00:47:32,309 --> 00:47:37,650
right Sam yeah I don't think the hard

00:47:35,819 --> 00:47:42,240
work like I gbri xgb he can't support

00:47:37,650 --> 00:47:45,450
that so no yeah I funny lets you do VLAN

00:47:42,240 --> 00:47:48,559
trunking on the VFS well and the the mac

00:47:45,450 --> 00:47:50,760
wheel and space is much bigger right

00:47:48,559 --> 00:47:52,559
well you guys are much closer to having

00:47:50,760 --> 00:47:55,589
an actual switch than the IG bri xgv

00:47:52,559 --> 00:47:57,590
hardware had so and I didn't have an eye

00:47:55,589 --> 00:48:05,090
for teehee until a couple weeks ago so

00:47:57,590 --> 00:48:07,190
most of my stuff is all on X 540 you see

00:48:05,090 --> 00:48:11,330
any usage to the new and do introduce

00:48:07,190 --> 00:48:14,420
recently for the trusted buff do I see

00:48:11,330 --> 00:48:17,330
any usage case for the trusted bf first

00:48:14,420 --> 00:48:19,460
did we have an do that was introduced

00:48:17,330 --> 00:48:21,410
last year you know it was it was done

00:48:19,460 --> 00:48:23,870
and there's this guy that I think he

00:48:21,410 --> 00:48:26,210
from Intel yeah maybe for two years he

00:48:23,870 --> 00:48:28,430
was trying to solve your research

00:48:26,210 --> 00:48:31,520
problem of 30 multicast address by right

00:48:28,430 --> 00:48:33,950
doing your mathematical sqs whatever so

00:48:31,520 --> 00:48:36,290
we kind of ask is before steam okay do

00:48:33,950 --> 00:48:38,420
this send the oh and yeah do you see

00:48:36,290 --> 00:48:40,010
some usage to that yeah well if I

00:48:38,420 --> 00:48:41,150
remember right the primary use case for

00:48:40,010 --> 00:48:45,680
that wasn't that supposed to be for like

00:48:41,150 --> 00:48:47,210
ipv6 addressing so arguably no that was

00:48:45,680 --> 00:48:48,860
the reason what he was trying to do yeah

00:48:47,210 --> 00:48:51,020
but we ended up with something which is

00:48:48,860 --> 00:48:54,350
more generic like Ukraine from the

00:48:51,020 --> 00:48:55,910
hypervisor you can mark 1vf is currently

00:48:54,350 --> 00:48:57,830
it's right there on trusted I can see

00:48:55,910 --> 00:49:02,510
some use cases for that although

00:48:57,830 --> 00:49:05,270
arguably the the way I kind of feel

00:49:02,510 --> 00:49:07,070
about that is in some ways that extra

00:49:05,270 --> 00:49:09,500
feature is kind of there to work around

00:49:07,070 --> 00:49:11,420
a bug and that was the limitation of the

00:49:09,500 --> 00:49:12,860
multicast addresses and this is

00:49:11,420 --> 00:49:15,310
something I'd actually worked around in

00:49:12,860 --> 00:49:18,350
like the FM 10k driver by actually just

00:49:15,310 --> 00:49:21,500
allowing a message per multicast and

00:49:18,350 --> 00:49:23,030
stuff hard capping it at 30 so I don't

00:49:21,500 --> 00:49:26,390
know you can go a lot of different ways

00:49:23,030 --> 00:49:27,590
on that but yeah I can see there's use

00:49:26,390 --> 00:49:29,930
cases for that because there's going to

00:49:27,590 --> 00:49:32,360
be scenarios where people want to make a

00:49:29,930 --> 00:49:34,850
VF that can do various things that you

00:49:32,360 --> 00:49:36,080
probably wouldn't want to let it the

00:49:34,850 --> 00:49:38,320
only thing is it's gonna be one of those

00:49:36,080 --> 00:49:41,930
things where it's a double-edged sword

00:49:38,320 --> 00:49:43,970
because more often than not that's also

00:49:41,930 --> 00:49:45,380
essentially letting the user shoot

00:49:43,970 --> 00:49:47,690
themselves in the foot because they can

00:49:45,380 --> 00:49:49,640
do things like enable a lot of multicast

00:49:47,690 --> 00:49:52,040
addresses on a lot of interfaces and

00:49:49,640 --> 00:49:54,590
suddenly you're gonna end up with a

00:49:52,040 --> 00:49:56,480
customer issue where my 10 gig NIC will

00:49:54,590 --> 00:49:59,830
only receive at you know like I

00:49:56,480 --> 00:49:59,830
mentioned except 16

00:50:01,700 --> 00:50:06,640
because you're having to replicate the

00:50:03,470 --> 00:50:06,640
traffic so much so

00:50:07,180 --> 00:50:10,779
talking about the trusted wheels and I I

00:50:08,920 --> 00:50:13,450
guess I was ruffling referring to it as

00:50:10,779 --> 00:50:15,789
privileged we have so the promiscuous

00:50:13,450 --> 00:50:17,740
behavior as well as you know adding VLAN

00:50:15,789 --> 00:50:21,309
trunks are adding many multicast

00:50:17,740 --> 00:50:23,980
addresses if the VF any VF could do as

00:50:21,309 --> 00:50:26,079
many resources it's the same it's like a

00:50:23,980 --> 00:50:27,670
security hole there right and that's why

00:50:26,079 --> 00:50:29,230
you want only the trusted we have to be

00:50:27,670 --> 00:50:31,119
able to breath because you can suck up

00:50:29,230 --> 00:50:32,799
bandwidth from other VF s or other PF

00:50:31,119 --> 00:50:35,380
well yeah the best way to describe it is

00:50:32,799 --> 00:50:37,000
basically you know the trusted VF is

00:50:35,380 --> 00:50:40,029
essentially handing the guest a loaded

00:50:37,000 --> 00:50:42,069
gun now if it's the you know route

00:50:40,029 --> 00:50:43,390
administrator person that decides to

00:50:42,069 --> 00:50:44,710
shoot pointed out their foot that's

00:50:43,390 --> 00:50:47,230
their prerogative but you don't want to

00:50:44,710 --> 00:50:50,230
let any other user be able to point that

00:50:47,230 --> 00:50:51,819
at the administrator's foot so that's

00:50:50,230 --> 00:50:52,960
the thing is yet once you get into that

00:50:51,819 --> 00:50:54,759
stuff it becomes real easy to make a

00:50:52,960 --> 00:50:56,319
mess of it and allow the user so it's

00:50:54,759 --> 00:50:59,109
one of those things where it should be a

00:50:56,319 --> 00:51:10,059
sparing use at best or something like

00:50:59,109 --> 00:51:14,079
the trusted n do so crashes before did

00:51:10,059 --> 00:51:20,200
this one run not saying it would be

00:51:14,079 --> 00:51:21,970
tempest wouldn't it oh well yeah so if

00:51:20,200 --> 00:51:24,150
there's no other questions then that's

00:51:21,970 --> 00:51:24,150

YouTube URL: https://www.youtube.com/watch?v=ZEoTlC-gLBE


