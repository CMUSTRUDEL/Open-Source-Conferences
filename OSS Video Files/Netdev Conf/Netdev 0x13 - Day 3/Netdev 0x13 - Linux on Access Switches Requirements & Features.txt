Title: Netdev 0x13 - Linux on Access Switches Requirements & Features
Publication date: 2019-06-03
Playlist: Netdev 0x13 - Day 3
Description: 
	David Lamparter says the data centre is a friendly sane environment and thats why Linux has made inroads in middle boxes in that area. You aint seen nothing yet until youve seen Enterprise and Campus networks. Campus distribution and access switches need to deal with a much more hostile environment.

In this talk, David collates the currently relevant features for deploying campus and access environments. He gives some operational context, and suggest implementation strategies.

https://netdevconf.org/0x13/session.html?talk-linux-switch-req-feat
Captions: 
	00:00:00,480 --> 00:00:10,650
hi everyone I am David in my Hyderabad

00:00:06,799 --> 00:00:12,840
in my normal life I work on a fair

00:00:10,650 --> 00:00:14,759
outing but this talk is very much

00:00:12,840 --> 00:00:16,529
motivated by my experiences running

00:00:14,759 --> 00:00:20,130
conference networks so that's why it

00:00:16,529 --> 00:00:23,970
says Rams networks for hackers here so

00:00:20,130 --> 00:00:26,400
by that I mean conferences like the CCC

00:00:23,970 --> 00:00:29,580
conference with 15,000 attendees who all

00:00:26,400 --> 00:00:32,610
try to break the network so we need

00:00:29,580 --> 00:00:35,100
proper exit switches and when I say

00:00:32,610 --> 00:00:39,510
access switch let's clarify what that

00:00:35,100 --> 00:00:40,680
means essentially what we consider

00:00:39,510 --> 00:00:43,860
access switches when we build those

00:00:40,680 --> 00:00:47,090
networks is anything that is directly

00:00:43,860 --> 00:00:50,730
connected to a user's laptop desktop

00:00:47,090 --> 00:00:54,930
VoIP phone point-of-sale system info

00:00:50,730 --> 00:00:58,559
display access points sometimes it's

00:00:54,930 --> 00:01:00,960
really defined by its function so you

00:00:58,559 --> 00:01:03,600
won't find those at home you won't find

00:01:00,960 --> 00:01:06,380
those in a data center those are

00:01:03,600 --> 00:01:10,200
relatively specific to well let's say

00:01:06,380 --> 00:01:11,760
enterprise campus networks universities

00:01:10,200 --> 00:01:14,369
have them in their network when people

00:01:11,760 --> 00:01:16,320
bring their stuff whether the hosts that

00:01:14,369 --> 00:01:17,490
are attached belong to the same owner or

00:01:16,320 --> 00:01:20,850
a different owner doesn't really matter

00:01:17,490 --> 00:01:22,409
but is that is the general idea so we

00:01:20,850 --> 00:01:25,040
are looking at devices that have

00:01:22,409 --> 00:01:27,869
typically Gigabit Ethernet ports

00:01:25,040 --> 00:01:30,479
nowadays it's n base T for access points

00:01:27,869 --> 00:01:32,880
they do have uplink ports they normally

00:01:30,479 --> 00:01:35,970
have peer support and they are

00:01:32,880 --> 00:01:38,579
reasonably cheap devices 200 euros

00:01:35,970 --> 00:01:40,740
perhaps a bit low but that's that's the

00:01:38,579 --> 00:01:43,380
cheapest you can get devices of this

00:01:40,740 --> 00:01:46,170
class if you try and save every euro so

00:01:43,380 --> 00:01:49,860
to speak it's it's a very different

00:01:46,170 --> 00:01:52,829
situation to two other setups so in in a

00:01:49,860 --> 00:01:55,530
data center you normally have at least

00:01:52,829 --> 00:01:57,560
some level of trust that your VM host is

00:01:55,530 --> 00:02:00,210
not going to try and break your switch

00:01:57,560 --> 00:02:02,460
we have a limited set of tenants

00:02:00,210 --> 00:02:04,110
normally in some cases you completely

00:02:02,460 --> 00:02:06,960
trust the tenant in some cases you don't

00:02:04,110 --> 00:02:09,420
and then you tend to partition them so

00:02:06,960 --> 00:02:12,239
the key difference is also the absence

00:02:09,420 --> 00:02:13,800
of that partitioning so an access which

00:02:12,239 --> 00:02:16,020
will in some

00:02:13,800 --> 00:02:18,330
situations see 10 different devices from

00:02:16,020 --> 00:02:21,240
10 different users and each of those

00:02:18,330 --> 00:02:22,710
users owns their own laptop and that is

00:02:21,240 --> 00:02:24,900
not a situation that you have in a data

00:02:22,710 --> 00:02:27,140
center you would separate them in a in a

00:02:24,900 --> 00:02:31,950
different VLAN or something like that

00:02:27,140 --> 00:02:34,110
it's also a bit of a subset for in

00:02:31,950 --> 00:02:36,530
relation to telecom service provider

00:02:34,110 --> 00:02:38,700
switches so those tend to have way more

00:02:36,530 --> 00:02:41,700
management features in terms of

00:02:38,700 --> 00:02:42,960
connectivity fault management OAM stuff

00:02:41,700 --> 00:02:44,520
like that

00:02:42,960 --> 00:02:47,460
they occasionally need the features

00:02:44,520 --> 00:02:49,350
described in here as well and let's

00:02:47,460 --> 00:02:50,430
start with access switches and maybe at

00:02:49,350 --> 00:02:54,360
some point you can move to service

00:02:50,430 --> 00:02:57,180
provider switches in a way an access

00:02:54,360 --> 00:03:00,000
point is a switch as well so it does

00:02:57,180 --> 00:03:01,920
contain bridging logic so I'm not going

00:03:00,000 --> 00:03:05,670
to focus on that here but some of the

00:03:01,920 --> 00:03:11,730
considerations apply to a Wi-Fi access

00:03:05,670 --> 00:03:14,430
point interface as well and yeah so I've

00:03:11,730 --> 00:03:17,220
kind of ordered this talk in terms of

00:03:14,430 --> 00:03:21,230
ascending complexity of the issues to

00:03:17,220 --> 00:03:24,510
solve I am very much a userland person

00:03:21,230 --> 00:03:26,910
so please don't crucify me if I get

00:03:24,510 --> 00:03:28,860
something wrong about the crawler and a

00:03:26,910 --> 00:03:30,390
lot of the suggestions I'm making are

00:03:28,860 --> 00:03:32,430
really aimed at using land up

00:03:30,390 --> 00:03:35,600
limitations that doesn't mean everything

00:03:32,430 --> 00:03:38,750
should be implemented userland um but

00:03:35,600 --> 00:03:41,340
the the approach and the necessary

00:03:38,750 --> 00:03:45,500
points that we need to attach to are in

00:03:41,340 --> 00:03:52,260
the end the same I'm I'm gonna suggest

00:03:45,500 --> 00:03:54,750
like ways to go about this I've looked

00:03:52,260 --> 00:03:57,530
at some of them I don't have patches out

00:03:54,750 --> 00:04:00,720
for this or anything so I'm trying to

00:03:57,530 --> 00:04:02,970
solicit input and try and find the best

00:04:00,720 --> 00:04:04,040
way to go about some of these things and

00:04:02,970 --> 00:04:07,680
let's get going

00:04:04,040 --> 00:04:09,600
so the the simplest thing that a nexus

00:04:07,680 --> 00:04:14,000
which needs to do in pretty much all

00:04:09,600 --> 00:04:17,580
cases is limit broadcast storms limits

00:04:14,000 --> 00:04:20,640
flooding and that's pretty much the

00:04:17,580 --> 00:04:23,729
simples feature you can ask for on an

00:04:20,640 --> 00:04:25,380
axis which yet we currently as far as I

00:04:23,729 --> 00:04:26,940
know don't have a standard way to

00:04:25,380 --> 00:04:27,389
configure that if we have Linux on a

00:04:26,940 --> 00:04:30,680
Khan

00:04:27,389 --> 00:04:33,689
control plane for some switch fabric so

00:04:30,680 --> 00:04:37,529
what we would need here is just to

00:04:33,689 --> 00:04:41,129
expose some way to to set up the the

00:04:37,529 --> 00:04:44,759
silicones ACL or whatever such that we

00:04:41,129 --> 00:04:46,889
can enforce a limit in on purport

00:04:44,759 --> 00:04:49,529
outbound broadcast traffic multicast

00:04:46,889 --> 00:04:51,419
traffic unknown unicast traffic there is

00:04:49,529 --> 00:04:53,729
a bit of a complication here in that

00:04:51,419 --> 00:04:55,680
none of the TC filters can match on

00:04:53,729 --> 00:04:58,620
unknown unicast traffic as far as I know

00:04:55,680 --> 00:05:01,409
I might be wrong by the way if you want

00:04:58,620 --> 00:05:01,949
to say something just raise the end or

00:05:01,409 --> 00:05:05,779
something

00:05:01,949 --> 00:05:08,460
it dropped me at any time so the

00:05:05,779 --> 00:05:11,810
limiting the unknown unicast is kind of

00:05:08,460 --> 00:05:14,340
what makes it a little bit difficult but

00:05:11,810 --> 00:05:17,759
considering the the simplicity of the

00:05:14,340 --> 00:05:20,509
feature it's probably possible for the

00:05:17,759 --> 00:05:23,129
switches to just expose something

00:05:20,509 --> 00:05:26,219
through either Sisyphus or net link

00:05:23,129 --> 00:05:28,560
where you can specifically configure a

00:05:26,219 --> 00:05:30,689
limit for broadcast multicast a unicast

00:05:28,560 --> 00:05:32,219
so that's why I'm saying custom queue

00:05:30,689 --> 00:05:34,259
disk here which which is probably not

00:05:32,219 --> 00:05:36,750
the best idea but something like that

00:05:34,259 --> 00:05:39,719
that is specific to the driver of the

00:05:36,750 --> 00:05:50,779
switch and that you just set from user

00:05:39,719 --> 00:05:55,710
space right does well I guess the next

00:05:50,779 --> 00:05:57,979
harder feature I guess is just limiting

00:05:55,710 --> 00:06:01,740
the learning that the switch does so

00:05:57,979 --> 00:06:03,930
since we are in a normal world access

00:06:01,740 --> 00:06:07,020
network here we don't have control plane

00:06:03,930 --> 00:06:08,610
propagation of MAC addresses so we very

00:06:07,020 --> 00:06:11,370
much need to do learn from the data

00:06:08,610 --> 00:06:13,860
plane but operators generally don't want

00:06:11,370 --> 00:06:16,620
to have users create an arbitrary number

00:06:13,860 --> 00:06:19,699
of MAC addresses behind the port so I've

00:06:16,620 --> 00:06:22,259
looked around and tried and find the FDB

00:06:19,699 --> 00:06:23,789
settings or something where we can limit

00:06:22,259 --> 00:06:27,180
the the MAC addresses that we learned

00:06:23,789 --> 00:06:29,159
per port I haven't found them does this

00:06:27,180 --> 00:06:34,129
does anyone know of the existence of

00:06:29,159 --> 00:06:34,129
anything like that there there isn't

00:06:37,270 --> 00:06:44,000
no there isn't and I is this something

00:06:40,610 --> 00:06:45,710
port security-related or just something

00:06:44,000 --> 00:06:47,240
port security-related

00:06:45,710 --> 00:06:48,800
I know there is a port security feature

00:06:47,240 --> 00:06:52,600
which is not present in the bridge

00:06:48,800 --> 00:06:55,250
driver today but it limits number of I

00:06:52,600 --> 00:06:57,440
wouldn't put it on the port security

00:06:55,250 --> 00:06:59,330
it's more like network security so it's

00:06:57,440 --> 00:07:00,950
not about authenticating specific

00:06:59,330 --> 00:07:04,730
devices to allow them on the network

00:07:00,950 --> 00:07:08,170
it's just preventing a malicious user or

00:07:04,730 --> 00:07:11,630
even a malfunctioning device from

00:07:08,170 --> 00:07:13,250
flooding on one port a huge number of

00:07:11,630 --> 00:07:15,680
MAC addresses does breaking the entire

00:07:13,250 --> 00:07:17,750
network so it needs to enforce at the

00:07:15,680 --> 00:07:20,060
network edge that for example a

00:07:17,750 --> 00:07:21,920
reasonable port limit would be 16 mega

00:07:20,060 --> 00:07:24,140
tresses per port and you wouldn't

00:07:21,920 --> 00:07:25,490
specify them you still learn and people

00:07:24,140 --> 00:07:27,290
can still plug in other things and

00:07:25,490 --> 00:07:39,440
you're not doing 1 X or anything like

00:07:27,290 --> 00:07:40,910
that for authentication so because you

00:07:39,440 --> 00:07:45,020
still need to learn the MAC addresses of

00:07:40,910 --> 00:07:47,360
the users devices so you can run a VPN

00:07:45,020 --> 00:07:49,070
towards the core of the network but the

00:07:47,360 --> 00:07:50,840
users laptop is not gonna do a BGP

00:07:49,070 --> 00:08:01,370
pairing with you and tell you its MAC

00:07:50,840 --> 00:08:04,700
address right but the user can still

00:08:01,370 --> 00:08:06,350
plug in some device and flood the axis

00:08:04,700 --> 00:08:07,720
which with the thousand MAC addresses

00:08:06,350 --> 00:08:14,000
well I guess what I was saying is add a

00:08:07,720 --> 00:08:15,590
filter on zebra 2 that might protect the

00:08:14,000 --> 00:08:18,160
evpn domain but it doesn't protect the

00:08:15,590 --> 00:08:18,160
switch itself

00:08:25,850 --> 00:08:30,990
so if you're going to do pork limiting

00:08:29,250 --> 00:08:32,700
or Mac limiting you have to be very

00:08:30,990 --> 00:08:34,470
careful right because if if you

00:08:32,700 --> 00:08:36,840
otherwise end up in a situation where

00:08:34,470 --> 00:08:39,690
you are indiscriminate about which one

00:08:36,840 --> 00:08:41,490
you draw you could end up dropping the

00:08:39,690 --> 00:08:44,580
one that needs to be able to login so

00:08:41,490 --> 00:08:47,010
that you can stop the flood so you have

00:08:44,580 --> 00:08:49,020
I think end up a whitelist or something

00:08:47,010 --> 00:08:50,370
and yeah that's what I mean with

00:08:49,020 --> 00:08:55,740
operator policy may have additional

00:08:50,370 --> 00:08:57,900
input on the slide so this is really up

00:08:55,740 --> 00:09:01,530
to configuration and policy of the

00:08:57,900 --> 00:09:03,870
network and if if the network knows its

00:09:01,530 --> 00:09:05,400
devices or classes of devices so if you

00:09:03,870 --> 00:09:07,200
know you have Cisco VoIP phones or

00:09:05,400 --> 00:09:09,090
something like that then the switch

00:09:07,200 --> 00:09:11,310
could be configured to always accept a

00:09:09,090 --> 00:09:13,260
particular block of Cisco MAC addresses

00:09:11,310 --> 00:09:15,120
or something like that but that this is

00:09:13,260 --> 00:09:17,250
highly specific to the particular setup

00:09:15,120 --> 00:09:18,870
that you're running and to get back to a

00:09:17,250 --> 00:09:21,810
conference network in that case we don't

00:09:18,870 --> 00:09:23,550
have any preference in which devices get

00:09:21,810 --> 00:09:26,400
on and which are refused we just want to

00:09:23,550 --> 00:09:29,430
prevent an arbitrary number of MAC

00:09:26,400 --> 00:09:31,530
addresses to flop the network so for

00:09:29,430 --> 00:09:33,990
this specific problem I'm not sure what

00:09:31,530 --> 00:09:36,210
the best way to go about approaching it

00:09:33,990 --> 00:09:41,370
is I guess we need some kind of

00:09:36,210 --> 00:09:42,750
integration with the FDB I suppose I

00:09:41,370 --> 00:09:44,610
would want to implement the policy in

00:09:42,750 --> 00:09:48,090
userspace so the operator can have

00:09:44,610 --> 00:09:50,850
additional knobs on this yeah so you do

00:09:48,090 --> 00:09:53,670
2.1 x that you mentioned previously so

00:09:50,850 --> 00:09:56,220
there is a feature without 802 dot 1x to

00:09:53,670 --> 00:09:58,910
do the exact same thing not limit so

00:09:56,220 --> 00:10:02,430
basically limit the number of Macs and

00:09:58,910 --> 00:10:05,150
some of the developers in host hostapd

00:10:02,430 --> 00:10:09,750
right whose tpb were considering not

00:10:05,150 --> 00:10:14,550
skipping the dot 1x but just snoop

00:10:09,750 --> 00:10:17,339
packets and only add basically stop

00:10:14,550 --> 00:10:22,589
learning on the bridge and snoop from

00:10:17,339 --> 00:10:24,390
user space and add ok so I definitely I

00:10:22,589 --> 00:10:25,860
don't really need to look at that yeah

00:10:24,390 --> 00:10:30,540
it's not implemented though it was just

00:10:25,860 --> 00:10:31,890
discussed recently so ok cool but it's

00:10:30,540 --> 00:10:34,850
nice to hear that there's discussion

00:10:31,890 --> 00:10:40,369
ongoing about the topic so

00:10:34,850 --> 00:10:46,999
so skipping to the next topic

00:10:40,369 --> 00:10:52,819
who here knows what mbrp is one hand to

00:10:46,999 --> 00:10:56,419
end 300 little list of protocols of the

00:10:52,819 --> 00:10:58,309
other head level mbrp is designed to

00:10:56,419 --> 00:11:00,889
propagate VLAN memberships across a

00:10:58,309 --> 00:11:03,049
network so if you have an axis which and

00:11:00,889 --> 00:11:06,049
the axis which is configured by the

00:11:03,049 --> 00:11:09,079
operator to hack to carry we learned 100

00:11:06,049 --> 00:11:11,269
on some port then mbrp can propagate

00:11:09,079 --> 00:11:15,259
that information towards other switches

00:11:11,269 --> 00:11:16,759
and as soon as mbrp establishes that are

00:11:15,259 --> 00:11:18,619
there is more than one device and the

00:11:16,759 --> 00:11:20,600
network that is configured for a VLAN

00:11:18,619 --> 00:11:24,049
you get that wheel and throughout your

00:11:20,600 --> 00:11:25,999
network by itself this is something that

00:11:24,049 --> 00:11:29,419
can easily be done the diamond user

00:11:25,999 --> 00:11:32,419
space however there are a few problems

00:11:29,419 --> 00:11:35,389
in the details which is that I would

00:11:32,419 --> 00:11:37,279
I've looked at implementing this and I

00:11:35,389 --> 00:11:41,019
would really like to get a protocol

00:11:37,279 --> 00:11:43,909
value on the VLAN membership

00:11:41,019 --> 00:11:47,749
subscription on the bridges VLAN

00:11:43,909 --> 00:11:52,339
filtering database so the the idea here

00:11:47,749 --> 00:11:54,679
is that if we have a PRP in operation we

00:11:52,339 --> 00:11:56,569
kind of need to distinguish between we

00:11:54,679 --> 00:12:00,100
lands that were added to the filtering

00:11:56,569 --> 00:12:04,609
database by MV RP on specific ports as

00:12:00,100 --> 00:12:07,039
opposed to user config or even LD P or

00:12:04,609 --> 00:12:09,859
802 what 1x both of which can also add

00:12:07,039 --> 00:12:11,419
VLANs so if you have one X and the

00:12:09,859 --> 00:12:13,129
radius server tells you to put the user

00:12:11,419 --> 00:12:14,929
and a specific allele and and that is

00:12:13,129 --> 00:12:20,509
also something that n PRP needs to pick

00:12:14,929 --> 00:12:27,889
up on so this is a really simple thing I

00:12:20,509 --> 00:12:29,629
guess I hope to add a proto field in the

00:12:27,889 --> 00:12:31,609
FD because reasons like free VPN

00:12:29,629 --> 00:12:35,329
reinstalling FTP interesting yeah this

00:12:31,609 --> 00:12:39,319
is you're asking for VLAN yeah so Purvi

00:12:35,329 --> 00:12:42,619
lan port status so it's not per VLAN on

00:12:39,319 --> 00:12:44,539
the bridge her purport that carries the

00:12:42,619 --> 00:12:45,750
VLAN with the tagged or untagged

00:12:44,539 --> 00:12:50,510
information and

00:12:45,750 --> 00:12:50,510
yeah how's that okay okay

00:12:52,780 --> 00:12:56,620
it's reveal ants because for the same

00:12:54,490 --> 00:13:00,730
reason maybe that serves the same

00:12:56,620 --> 00:13:03,100
purpose trained to recognize well

00:13:00,730 --> 00:13:06,010
because the thing is a VLAN honest on a

00:13:03,100 --> 00:13:09,100
bridge can on one port be configured by

00:13:06,010 --> 00:13:09,730
the user and on another port be added by

00:13:09,100 --> 00:13:12,610
mbrp

00:13:09,730 --> 00:13:15,130
so this is not a property of the VLAN so

00:13:12,610 --> 00:13:23,410
in an alias of the VLAN wouldn't help

00:13:15,130 --> 00:13:24,850
for this case okay okay um right so this

00:13:23,410 --> 00:13:26,860
sounds pretty easy

00:13:24,850 --> 00:13:29,800
someone needs to write a patch maybe

00:13:26,860 --> 00:13:33,280
that's me there's another problem with

00:13:29,800 --> 00:13:34,690
mbrp I hope people are aware are aware

00:13:33,280 --> 00:13:37,750
of the group for what mask that is

00:13:34,690 --> 00:13:40,870
currently there the mbrp address is not

00:13:37,750 --> 00:13:43,180
covered by that neither is the CDP

00:13:40,870 --> 00:13:45,280
address by the way so there's a bit of a

00:13:43,180 --> 00:13:48,570
problem here in that we need to be able

00:13:45,280 --> 00:13:52,270
to pick up a specific traffic and

00:13:48,570 --> 00:13:54,970
prevent it from being bridged the the

00:13:52,270 --> 00:13:57,339
only well the only way to get close to

00:13:54,970 --> 00:14:00,130
that I found it existence is a bit able

00:13:57,339 --> 00:14:02,160
to be your route which I'm not sure is a

00:14:00,130 --> 00:14:05,980
good idea to use for this functionality

00:14:02,160 --> 00:14:08,589
I would hope that we can move in the

00:14:05,980 --> 00:14:10,570
direction of a TC action or something

00:14:08,589 --> 00:14:12,670
that punts down frames and I'm gonna

00:14:10,570 --> 00:14:14,620
talk about this much more later when

00:14:12,670 --> 00:14:16,600
I've gone through the traffic inspection

00:14:14,620 --> 00:14:18,790
features for our pin DHCP and so on

00:14:16,600 --> 00:14:25,839
because it's kind of related on the same

00:14:18,790 --> 00:14:28,960
thing so quick quick point on that so if

00:14:25,839 --> 00:14:31,210
you're using B route or TC it assumes

00:14:28,960 --> 00:14:33,130
that you're it's basically forward

00:14:31,210 --> 00:14:36,100
unless told not to write you're going to

00:14:33,130 --> 00:14:37,480
install a negative filter later but if I

00:14:36,100 --> 00:14:39,220
understood the group forwarding thing it

00:14:37,480 --> 00:14:43,450
was meant to prevent accidentally

00:14:39,220 --> 00:14:46,390
merging VLAN domains isn't it the the

00:14:43,450 --> 00:14:48,610
group forward mask is designed to make

00:14:46,390 --> 00:14:50,589
sure that for example lldp and STP

00:14:48,610 --> 00:14:53,290
frames are not propagated through the

00:14:50,589 --> 00:14:55,210
bridge oh that's okay then remind me of

00:14:53,290 --> 00:14:56,770
a different problem the solution of the

00:14:55,210 --> 00:14:57,960
different problem which is I have a

00:14:56,770 --> 00:15:00,700
user-specified

00:14:57,960 --> 00:15:04,150
VLAN 20 because I just pulled one out of

00:15:00,700 --> 00:15:05,730
thin air but MVR P now put another port

00:15:04,150 --> 00:15:08,279
and in Vila

00:15:05,730 --> 00:15:09,750
20 and I've just merged my broadcast

00:15:08,279 --> 00:15:13,290
domains how do I prevent that from

00:15:09,750 --> 00:15:16,079
happening if you have this situation

00:15:13,290 --> 00:15:18,899
happening with excess witches on a

00:15:16,079 --> 00:15:20,220
network you would either so if you have

00:15:18,899 --> 00:15:25,709
a loop you would rely on the broadcast

00:15:20,220 --> 00:15:28,260
controls or SCP there is no no feature

00:15:25,709 --> 00:15:30,089
that I'm aware of that gives you a

00:15:28,260 --> 00:15:33,149
specific warning or anything like that

00:15:30,089 --> 00:15:36,889
if if you accidentally merge two

00:15:33,149 --> 00:15:36,889
different VLANs or something like that I

00:15:37,310 --> 00:15:42,779
mean it certainly could be done but I

00:15:40,130 --> 00:15:46,760
just don't know of any commercial or

00:15:42,779 --> 00:15:49,620
otherwise vendor that has this feature I

00:15:46,760 --> 00:15:53,820
do but we've already moved into two loop

00:15:49,620 --> 00:15:55,980
detection here so the first thing here

00:15:53,820 --> 00:15:57,300
is just well long-standing shortcoming

00:15:55,980 --> 00:16:01,220
of the bridge code which is that we only

00:15:57,300 --> 00:16:04,709
support one STP state per port and

00:16:01,220 --> 00:16:09,810
that's really not sufficient to

00:16:04,709 --> 00:16:12,660
implement MSTP the MSTP divides the the

00:16:09,810 --> 00:16:15,420
VLANs the bridge carries in to up to 16

00:16:12,660 --> 00:16:20,430
STP instances so that's what the msti is

00:16:15,420 --> 00:16:23,519
that's the I is instance so you kind of

00:16:20,430 --> 00:16:27,449
need that to plane full MSTP support you

00:16:23,519 --> 00:16:30,389
also need it for ITU GAA to 3 to support

00:16:27,449 --> 00:16:34,889
which is ring protection from from the

00:16:30,389 --> 00:16:36,630
ITU so that that that protocol is on the

00:16:34,889 --> 00:16:38,819
boundary between access and service

00:16:36,630 --> 00:16:41,130
provider networks and it has a control V

00:16:38,819 --> 00:16:44,399
land which is separately controlled and

00:16:41,130 --> 00:16:45,779
you could slash should slash may be

00:16:44,399 --> 00:16:52,440
would implement that with the different

00:16:45,779 --> 00:16:54,750
instance we are also short of different

00:16:52,440 --> 00:16:56,720
loop detection protocols that are still

00:16:54,750 --> 00:16:58,800
used which does actually include the the

00:16:56,720 --> 00:17:00,420
diagnostic protocol that was specified

00:16:58,800 --> 00:17:04,740
in the original evidence pacification

00:17:00,420 --> 00:17:07,530
from 1982 so as a note that operators

00:17:04,740 --> 00:17:11,910
generally don't trust STP that much so

00:17:07,530 --> 00:17:14,490
they like to have other options with all

00:17:11,910 --> 00:17:18,089
of this it's a discussion of extending

00:17:14,490 --> 00:17:18,910
MST PD in user space I'm not sure what

00:17:18,089 --> 00:17:21,220
the

00:17:18,910 --> 00:17:23,140
general general belief and agreement on

00:17:21,220 --> 00:17:24,550
the Colonel STP implementation is I

00:17:23,140 --> 00:17:28,030
guess it's deprecated

00:17:24,550 --> 00:17:30,210
I hope it's deprecated it probably can't

00:17:28,030 --> 00:17:33,040
be removed due to compatibility

00:17:30,210 --> 00:17:38,380
considerations yeah I think most people

00:17:33,040 --> 00:17:42,010
use the user mode implementation and

00:17:38,380 --> 00:17:45,700
MSTP implementation yeah so maybe maybe

00:17:42,010 --> 00:17:47,140
it's it's it's late enough in the

00:17:45,700 --> 00:17:48,490
removal or something to make it even

00:17:47,140 --> 00:17:50,800
harder to use the kernel implementation

00:17:48,490 --> 00:17:54,960
or something like that just to deter

00:17:50,800 --> 00:17:58,180
people from using it but that said

00:17:54,960 --> 00:18:01,260
regardless of that having some way of

00:17:58,180 --> 00:18:04,270
mapping VLANs to to MST IDs is really

00:18:01,260 --> 00:18:06,220
useful and unfortunately that brings

00:18:04,270 --> 00:18:07,600
with itself again hardware limitations

00:18:06,220 --> 00:18:09,820
because not all hardware supports

00:18:07,600 --> 00:18:12,010
multiple instances especially on low-end

00:18:09,820 --> 00:18:15,760
devices so we probably need to represent

00:18:12,010 --> 00:18:20,380
that too but um it's it should be a

00:18:15,760 --> 00:18:22,150
solvable problem let's get to the really

00:18:20,380 --> 00:18:26,170
interesting part are you interested in

00:18:22,150 --> 00:18:29,500
working on the user space STP I've

00:18:26,170 --> 00:18:34,180
looked at it I've I started implementing

00:18:29,500 --> 00:18:36,880
mbrp I believe that MST PD already has

00:18:34,180 --> 00:18:39,430
support for the instances but it just

00:18:36,880 --> 00:18:46,060
can't install them in the kernel so yes

00:18:39,430 --> 00:18:48,190
for the VLAN over yeah so this is the

00:18:46,060 --> 00:18:51,340
the most complex and also the last part

00:18:48,190 --> 00:18:53,560
of this presentation so asabi is the ITF

00:18:51,340 --> 00:18:57,280
name for all of the inspection features

00:18:53,560 --> 00:19:00,760
that's access switches do to provide an

00:18:57,280 --> 00:19:04,300
additional layer of security on on their

00:19:00,760 --> 00:19:06,310
end user facing hosts the point of this

00:19:04,300 --> 00:19:08,110
is to make the network work a little bit

00:19:06,310 --> 00:19:11,680
better in the absence of the isolation

00:19:08,110 --> 00:19:13,360
between the end users so this is what it

00:19:11,680 --> 00:19:14,790
looks like on the commercial switch just

00:19:13,360 --> 00:19:18,220
to make things a little bit more

00:19:14,790 --> 00:19:21,040
graspable this is DHCP snooping table on

00:19:18,220 --> 00:19:24,610
my home switch I have two hosts

00:19:21,040 --> 00:19:26,680
connected and the switch just inspected

00:19:24,610 --> 00:19:31,410
at the HTTP packets that flowed through

00:19:26,680 --> 00:19:31,410
it you can see down there that

00:19:33,629 --> 00:19:40,599
there is a configuration to set up which

00:19:37,839 --> 00:19:42,279
ports to trust so on this particular

00:19:40,599 --> 00:19:44,979
switch you configure both the server IP

00:19:42,279 --> 00:19:46,989
for DHCP as well as the port where it's

00:19:44,979 --> 00:19:49,329
allowed to be attached so the switch

00:19:46,989 --> 00:19:52,839
will prevent the HTTP server operation

00:19:49,329 --> 00:19:54,639
form from any other port it will it will

00:19:52,839 --> 00:19:57,009
also check the IP address of the DHCP

00:19:54,639 --> 00:20:01,919
server what all switches do that it's a

00:19:57,009 --> 00:20:04,059
little bit that divergent and it will

00:20:01,919 --> 00:20:07,269
this particular switch will also make

00:20:04,059 --> 00:20:08,950
sure that ARP cannot be used to steal

00:20:07,269 --> 00:20:13,359
addresses from other people if they were

00:20:08,950 --> 00:20:16,359
assigned by DHCP so in general switches

00:20:13,359 --> 00:20:19,559
will have some kind of configuration for

00:20:16,359 --> 00:20:23,079
trusted ports like I just pointed out

00:20:19,559 --> 00:20:24,399
how that looks depends on the setup it

00:20:23,079 --> 00:20:25,589
needs to be configured by the by the

00:20:24,399 --> 00:20:28,629
seller by the operator

00:20:25,589 --> 00:20:33,219
this can also be used to feed into what

00:20:28,629 --> 00:20:35,499
Ridgid brought up about port mech limits

00:20:33,219 --> 00:20:37,539
so if you know that a port has a

00:20:35,499 --> 00:20:40,359
particular MAC address that was assigned

00:20:37,539 --> 00:20:42,639
an address you can prefer that address

00:20:40,359 --> 00:20:44,320
over other addresses when you notice

00:20:42,639 --> 00:20:48,879
that the limit is being reached and you

00:20:44,320 --> 00:20:52,539
need to remove some addresses so this

00:20:48,879 --> 00:20:56,019
doesn't expect any IP or ipv6 data

00:20:52,539 --> 00:21:00,209
packets because as soon as the switch

00:20:56,019 --> 00:21:04,029
has ensured that ARP and icmpv6 cannot

00:21:00,209 --> 00:21:05,679
be disturbed to to disassociate the IP

00:21:04,029 --> 00:21:07,209
address from the MAC address the

00:21:05,679 --> 00:21:10,509
remaining checking can be done on the

00:21:07,209 --> 00:21:12,729
router for the subnet so this is only

00:21:10,509 --> 00:21:15,070
really neighbor management traffic we

00:21:12,729 --> 00:21:18,459
are not talking about inspecting actual

00:21:15,070 --> 00:21:22,119
data traffic on the switch here so for a

00:21:18,459 --> 00:21:24,459
P before this entails checking DHCP it

00:21:22,119 --> 00:21:27,639
also entails modifying the HTTP so

00:21:24,459 --> 00:21:30,729
there's option 82 which is an ITF RFC

00:21:27,639 --> 00:21:33,070
where DHCP requests from clients are

00:21:30,729 --> 00:21:36,009
extended with the number of the port

00:21:33,070 --> 00:21:38,049
that the request came in on so that

00:21:36,009 --> 00:21:41,679
means the switch modifies the packet

00:21:38,049 --> 00:21:45,230
inside of the bridge and it does control

00:21:41,679 --> 00:21:47,540
ARP so it can do that in company

00:21:45,230 --> 00:21:50,480
with the SCP tracking or it can also do

00:21:47,540 --> 00:21:53,690
just first-come first-serve for ipv6

00:21:50,480 --> 00:21:55,340
it's pretty much the same thing exactly

00:21:53,690 --> 00:22:00,100
router advertisements are now being

00:21:55,340 --> 00:22:02,809
controlled in addition to TCP send is a

00:22:00,100 --> 00:22:06,110
nice standard that didn't really go

00:22:02,809 --> 00:22:07,910
anywhere so the idea of send is that you

00:22:06,110 --> 00:22:10,429
have a cryptographic key and you put the

00:22:07,910 --> 00:22:12,049
public key in the ipv6 address and then

00:22:10,429 --> 00:22:14,750
the host can prove that it actually owns

00:22:12,049 --> 00:22:17,030
the address and I don't believe it's

00:22:14,750 --> 00:22:20,570
used anywhere but in theory it would be

00:22:17,030 --> 00:22:22,880
checked by the switch as well and with

00:22:20,570 --> 00:22:24,620
ipv6 there's also sometimes a use case

00:22:22,880 --> 00:22:27,350
in limiting the number of addresses per

00:22:24,620 --> 00:22:29,750
port because otherwise clients can just

00:22:27,350 --> 00:22:32,510
use arbitrarily many ipv6 addresses

00:22:29,750 --> 00:22:38,540
which can also break the network in some

00:22:32,510 --> 00:22:41,570
cases from an implementation point of

00:22:38,540 --> 00:22:44,510
view if we want to do this we need to

00:22:41,570 --> 00:22:48,830
have some way to pick out all of the our

00:22:44,510 --> 00:22:53,540
dhcp as in pv6 traffic and somehow shunt

00:22:48,830 --> 00:22:55,460
it to it savvy implementation for HTTP

00:22:53,540 --> 00:22:59,570
we need to be able to modify the packets

00:22:55,460 --> 00:23:00,500
that is not the case for our pricing pv6

00:22:59,570 --> 00:23:05,059
or anything like that

00:23:00,500 --> 00:23:07,880
and there's need to continue the

00:23:05,059 --> 00:23:13,540
forwarding path somehow which I'm gonna

00:23:07,880 --> 00:23:16,340
come back to later actually here so

00:23:13,540 --> 00:23:18,140
there's two stages of filtering involved

00:23:16,340 --> 00:23:20,870
here we first need to make sure that the

00:23:18,140 --> 00:23:22,460
switch silicon isn't just forwarding to

00:23:20,870 --> 00:23:24,169
traffic most of this traffic is

00:23:22,460 --> 00:23:26,270
broadcast traffic so the silicon would

00:23:24,169 --> 00:23:30,530
just flood it out and it would never

00:23:26,270 --> 00:23:33,169
even go through the Linux kernel in so I

00:23:30,530 --> 00:23:35,660
am assuming that the best way to do this

00:23:33,169 --> 00:23:37,640
would be through the offloading that TC

00:23:35,660 --> 00:23:40,960
can do so we installed an ACL in the

00:23:37,640 --> 00:23:44,990
switch silicon as a result of a TC rule

00:23:40,960 --> 00:23:46,490
then and that is as far as I have looked

00:23:44,990 --> 00:23:49,510
at the code actually the harder part is

00:23:46,490 --> 00:23:52,790
we need to put in the bridge path

00:23:49,510 --> 00:23:57,040
somehow a way for specific bridge

00:23:52,790 --> 00:23:59,420
packets to be intercepted at ingress

00:23:57,040 --> 00:24:00,980
problem maybe what it is you feel

00:23:59,420 --> 00:24:03,740
dragon maybe with the new action or

00:24:00,980 --> 00:24:06,800
something like that and then it's going

00:24:03,740 --> 00:24:09,920
to savvy and the savvy component then

00:24:06,800 --> 00:24:14,510
needs to be able to somehow continue

00:24:09,920 --> 00:24:16,640
delivering the packet the continuing

00:24:14,510 --> 00:24:19,880
delivering the packet is unfortunately

00:24:16,640 --> 00:24:22,010
harder than it seems because in some

00:24:19,880 --> 00:24:23,720
cases even though these are broadcast

00:24:22,010 --> 00:24:26,960
packets we may want to limit

00:24:23,720 --> 00:24:28,970
distribution of them ie if we know that

00:24:26,960 --> 00:24:31,430
a TCP server is connected to a specific

00:24:28,970 --> 00:24:34,280
port we only want to forward requests to

00:24:31,430 --> 00:24:37,400
that specific port and also for a

00:24:34,280 --> 00:24:40,520
violation case of the rule we generally

00:24:37,400 --> 00:24:43,040
if we receive an offer on a user port I

00:24:40,520 --> 00:24:44,810
eat there city to be server there we

00:24:43,040 --> 00:24:46,850
don't want to forward it to other user

00:24:44,810 --> 00:24:48,860
ports but we want to forward it to the

00:24:46,850 --> 00:24:52,940
network core so it can be intercepted by

00:24:48,860 --> 00:24:58,460
monitoring software so it's a bit of a

00:24:52,940 --> 00:25:00,260
complicated problem I came up on I guess

00:24:58,460 --> 00:25:04,970
several different ways this could be

00:25:00,260 --> 00:25:08,540
done there's an F Q which kind of does

00:25:04,970 --> 00:25:10,460
this thing for net filter so you put the

00:25:08,540 --> 00:25:13,310
you hand over the the packet to user

00:25:10,460 --> 00:25:15,800
space you keep a reference on to skb use

00:25:13,310 --> 00:25:19,640
the space can then tell you well drop it

00:25:15,800 --> 00:25:22,940
forward it it can also modify it but

00:25:19,640 --> 00:25:24,320
it's kind of so the advantage as well as

00:25:22,940 --> 00:25:26,330
disadvantage I guess is that you're

00:25:24,320 --> 00:25:28,340
keeping the S key be around with any

00:25:26,330 --> 00:25:30,740
extra data and you just continue the

00:25:28,340 --> 00:25:34,160
kernel path if user space decides to

00:25:30,740 --> 00:25:36,230
continue with the packet we could also

00:25:34,160 --> 00:25:39,320
go for something like the B route

00:25:36,230 --> 00:25:42,550
approach so the TC filter could result

00:25:39,320 --> 00:25:45,800
in a packet that is being matched by it

00:25:42,550 --> 00:25:48,230
to not to simply not be bridged so

00:25:45,800 --> 00:25:51,340
there's the bridge input hook where B

00:25:48,230 --> 00:25:54,050
route is also a cabled in connected in

00:25:51,340 --> 00:25:55,610
so in this case what would happen is

00:25:54,050 --> 00:25:58,580
that the packet just gets delivered on

00:25:55,610 --> 00:26:04,280
the Bridgeport member interface instead

00:25:58,580 --> 00:26:07,520
of being bridged through for we could

00:26:04,280 --> 00:26:09,830
also just emulate the forwarding in user

00:26:07,520 --> 00:26:12,170
space if we for the part where you

00:26:09,830 --> 00:26:13,010
couldn't need to continue with a packet

00:26:12,170 --> 00:26:16,700
and

00:26:13,010 --> 00:26:18,289
restrict is forwarding and probably most

00:26:16,700 --> 00:26:20,090
complicated and least likely solution

00:26:18,289 --> 00:26:21,559
would be to support injecting a packet

00:26:20,090 --> 00:26:26,570
on the bridge ie

00:26:21,559 --> 00:26:29,450
have some way for a packet to be handed

00:26:26,570 --> 00:26:33,799
to the colonel on a bridge port but in

00:26:29,450 --> 00:26:36,559
the ingress direction ie if I have SW p0

00:26:33,799 --> 00:26:39,470
and I just intercepted an ARP packet

00:26:36,559 --> 00:26:43,070
from there I hand it back to the colonel

00:26:39,470 --> 00:26:44,659
as if it arrived on swp zero but it

00:26:43,070 --> 00:26:46,730
needs to continue upwards into the

00:26:44,659 --> 00:26:50,990
bridge after the point where it was

00:26:46,730 --> 00:26:54,399
filtered off the primary reason I'm even

00:26:50,990 --> 00:27:00,289
mentioning this this possibility here is

00:26:54,399 --> 00:27:02,990
that the 802 l1 agcf M machinery kind of

00:27:00,289 --> 00:27:05,029
needs this feature as well because for

00:27:02,990 --> 00:27:07,700
for the connectivity with fault

00:27:05,029 --> 00:27:10,940
management you have a functionality

00:27:07,700 --> 00:27:13,250
where you can try and debug a link by

00:27:10,940 --> 00:27:14,659
pretending to inject a packet from a

00:27:13,250 --> 00:27:18,139
particular bridge support in the

00:27:14,659 --> 00:27:20,419
direction towards the bridge then again

00:27:18,139 --> 00:27:23,799
I'm just this is just trying to

00:27:20,419 --> 00:27:26,899
brainstorm how this could be done

00:27:23,799 --> 00:27:29,090
yeah the the if we do anything

00:27:26,899 --> 00:27:31,240
kernel-based very doing ray inject the

00:27:29,090 --> 00:27:33,559
packet to the bridge as if it were

00:27:31,240 --> 00:27:36,110
received on the particular Bridge port

00:27:33,559 --> 00:27:38,510
I believe it's gonna be pretty hard to

00:27:36,110 --> 00:27:41,690
restrict the forwarding to to some set

00:27:38,510 --> 00:27:46,100
of ports at least I'm not sure how I

00:27:41,690 --> 00:27:48,169
would do that and between this whole

00:27:46,100 --> 00:27:49,760
list of possible approaches I have

00:27:48,169 --> 00:27:53,870
absolutely no idea which which would

00:27:49,760 --> 00:27:57,320
work best I do think that using TC as an

00:27:53,870 --> 00:28:00,889
infrastructure is probably the way to go

00:27:57,320 --> 00:28:03,230
I suppose it needs a new action that

00:28:00,889 --> 00:28:06,320
action could straight up be user space

00:28:03,230 --> 00:28:08,570
interface or it could be a be route

00:28:06,320 --> 00:28:12,710
equivalent so we drop down to the

00:28:08,570 --> 00:28:15,340
Bridgeport member yeah

00:28:12,710 --> 00:28:15,340
complicated

00:28:24,370 --> 00:28:33,080
so I thought about using a PDF no you

00:28:31,460 --> 00:28:35,960
don't have much time left but do you

00:28:33,080 --> 00:28:38,630
still have more slides the remaining

00:28:35,960 --> 00:28:42,980
slides are kind of optional okay I mean

00:28:38,630 --> 00:28:44,570
it sounds like you want to barf our

00:28:42,980 --> 00:28:45,890
packet and make it reject it as it is

00:28:44,570 --> 00:28:49,880
coming back from the same fork

00:28:45,890 --> 00:28:52,100
yeah so this stuff is done wouldn't the

00:28:49,880 --> 00:28:54,020
IFB device for example help you you

00:28:52,100 --> 00:28:57,170
redirect to it you rate your policies

00:28:54,020 --> 00:28:59,360
there and then it gets rejected back on

00:28:57,170 --> 00:29:01,910
the stack you don't want to queue it

00:28:59,360 --> 00:29:03,560
right you just one trigger right give

00:29:01,910 --> 00:29:05,990
you some treatment but it needs to

00:29:03,560 --> 00:29:07,220
arrive from the original port it will

00:29:05,990 --> 00:29:09,590
show up like it came through the

00:29:07,220 --> 00:29:13,450
original poet okay that that might work

00:29:09,590 --> 00:29:16,130
I haven't looked at that option so for

00:29:13,450 --> 00:29:19,400
for picking out the packets I did look

00:29:16,130 --> 00:29:21,260
at BPF the problem is that we need to

00:29:19,400 --> 00:29:23,210
install this in the ACL as well in a

00:29:21,260 --> 00:29:25,280
switch silicon so I think that it's

00:29:23,210 --> 00:29:27,230
probably better to just use flour for

00:29:25,280 --> 00:29:35,210
that so we just pick out all of these

00:29:27,230 --> 00:29:36,470
DHCP packets and yeah I'm good I'm gonna

00:29:35,210 --> 00:29:41,420
do a quick skip through the remaining

00:29:36,470 --> 00:29:43,820
slides so I've had people from ADA 211

00:29:41,420 --> 00:29:45,320
asked about proxy stuff so that is very

00:29:43,820 --> 00:29:49,280
similar can use the same facilities

00:29:45,320 --> 00:29:50,840
probably and the obvious problem with

00:29:49,280 --> 00:29:54,320
the entire talk is we don't have any

00:29:50,840 --> 00:29:56,690
drivers for access switch silicum so

00:29:54,320 --> 00:29:57,550
it's kind of someone needs to start

00:29:56,690 --> 00:30:01,580
somewhere

00:29:57,550 --> 00:30:07,940
um what about the all those guys like

00:30:01,580 --> 00:30:09,230
you know Florian oh there is okay I know

00:30:07,940 --> 00:30:11,660
there's some people who have been yeah

00:30:09,230 --> 00:30:12,950
Marvel or Broadcom even the small

00:30:11,660 --> 00:30:17,960
devices I think these guys have been

00:30:12,950 --> 00:30:20,450
posting patches yeah so I think the best

00:30:17,960 --> 00:30:23,720
target for initially tackling this would

00:30:20,450 --> 00:30:25,730
be the DS a infrastructure it's kind of

00:30:23,720 --> 00:30:28,100
the devices supports are a bit too small

00:30:25,730 --> 00:30:30,440
for access switches but they still

00:30:28,100 --> 00:30:31,520
support the features and for some of the

00:30:30,440 --> 00:30:35,690
tips you can get get

00:30:31,520 --> 00:30:38,750
it's the right device would be from

00:30:35,690 --> 00:30:40,940
Marvel something like 98 DX series which

00:30:38,750 --> 00:30:43,810
doesn't have a kernel switchdriver but

00:30:40,940 --> 00:30:47,210
yeah maybe someone wants to do that and

00:30:43,810 --> 00:30:48,950
that's the end of my slides and by the

00:30:47,210 --> 00:30:52,850
way can we please move item P snooping

00:30:48,950 --> 00:30:55,970
into user space we probably can allow

00:30:52,850 --> 00:31:02,330
only one question who would it be

00:30:55,970 --> 00:31:06,050
let me think do you have a question yeah

00:31:02,330 --> 00:31:07,610
I mean I had a question which is you had

00:31:06,050 --> 00:31:09,500
it in your last slide why is this in the

00:31:07,610 --> 00:31:11,270
kernel in the sense a lot of the

00:31:09,500 --> 00:31:13,520
forwarding decisions for the access

00:31:11,270 --> 00:31:15,710
class device is not really your home

00:31:13,520 --> 00:31:17,630
router right it's really more it's

00:31:15,710 --> 00:31:19,520
almost an enterprise device so you are

00:31:17,630 --> 00:31:22,070
talking about a bad peak bandwidth that

00:31:19,520 --> 00:31:23,480
never should hit the CPU because either

00:31:22,070 --> 00:31:25,310
you'll never be able to make that work

00:31:23,480 --> 00:31:27,440
so so really what we're talking about

00:31:25,310 --> 00:31:29,240
here is control structures in the kernel

00:31:27,440 --> 00:31:31,700
and and data plane offloaded to the

00:31:29,240 --> 00:31:33,350
hardware and I think the way to solve

00:31:31,700 --> 00:31:35,900
this problem will be to identify the

00:31:33,350 --> 00:31:38,090
device and and the cumulus people might

00:31:35,900 --> 00:31:40,430
have some suggestions are simulated and

00:31:38,090 --> 00:31:41,810
we can talk about a device to start from

00:31:40,430 --> 00:31:45,680
because I think a lot of it will get

00:31:41,810 --> 00:31:48,260
formed as a function of that device yeah

00:31:45,680 --> 00:31:50,690
so on this slide the TC offload that

00:31:48,260 --> 00:31:52,520
needs to be some ACL in the silicon that

00:31:50,690 --> 00:31:55,840
picks out the traffic that we need and

00:31:52,520 --> 00:31:58,840
yeah okay yeah thanks thanks for

00:31:55,840 --> 00:31:58,840

YouTube URL: https://www.youtube.com/watch?v=9amIuslQrus


