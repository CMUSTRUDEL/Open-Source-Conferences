Title: Netdev 0x13 - Making the Linux TCP stack more extensible with eBPF
Publication date: 2019-06-03
Playlist: Netdev 0x13 - Day 3
Description: 
	Viet-Hoang Tran describes how Users can attach eBPF code to inject and consume TCP options.

He describes the code architecture (currently on top of Kernel 4.17-rc5), illustrates
use cases and finally provide performance numbers. 

More info:
https://netdevconf.org/0x13/session.html?talk-tcp-ebpf
Captions: 
	00:00:22,230 --> 00:00:27,279
[Music]

00:00:42,040 --> 00:00:45,180
[Music]

00:00:49,070 --> 00:00:52,189
[Music]

00:01:00,690 --> 00:01:07,139
[Music]

00:01:17,830 --> 00:01:20,989
[Music]

00:01:33,460 --> 00:01:42,930
[Music]

00:01:59,100 --> 00:02:02,150
[Music]

00:02:15,770 --> 00:02:18,869
[Music]

00:02:29,020 --> 00:02:38,699
[Music]

00:02:41,610 --> 00:02:46,930
[Music]

00:02:47,890 --> 00:02:57,730
one text link and this is the throughput

00:02:53,690 --> 00:03:03,470
overhead so you can see that the

00:02:57,730 --> 00:03:09,260
overhead of the case that we is option

00:03:03,470 --> 00:03:14,300
is about 0.3 percent so that's exactly

00:03:09,260 --> 00:03:19,910
the amount of TCP Oceanside increase

00:03:14,300 --> 00:03:24,730
compared to the TCP payload and we

00:03:19,910 --> 00:03:31,370
didn't see any increase in Rajab term

00:03:24,730 --> 00:03:34,420
for the step usage if we look at so for

00:03:31,370 --> 00:03:41,000
case here we can see that is the route

00:03:34,420 --> 00:03:44,239
10% on both sender and receiver so let's

00:03:41,000 --> 00:03:48,769
look at different use case the first one

00:03:44,239 --> 00:03:52,459
is dissipate user timeout so with is the

00:03:48,769 --> 00:03:55,910
maximum term that appear waiting for the

00:03:52,459 --> 00:03:58,760
like the flying data before aborting the

00:03:55,910 --> 00:04:01,880
connections please useful when client

00:03:58,760 --> 00:04:03,799
predict about connectivities and want to

00:04:01,880 --> 00:04:05,840
explain the connection lifetime or

00:04:03,799 --> 00:04:10,440
server is busy and want to close it

00:04:05,840 --> 00:04:14,250
quickly so is specified that I see

00:04:10,440 --> 00:04:18,239
but is not implement on Linux yet so we

00:04:14,250 --> 00:04:21,030
implemented by to PDF program one is

00:04:18,239 --> 00:04:25,740
insert you do option and another one is

00:04:21,030 --> 00:04:28,080
pass it I set the value on the pier the

00:04:25,740 --> 00:04:31,590
first one is are the second one is to

00:04:28,080 --> 00:04:35,130
request the connection congestion

00:04:31,590 --> 00:04:38,430
control so for example if the client

00:04:35,130 --> 00:04:40,770
have want to specify the preference for

00:04:38,430 --> 00:04:45,440
low latency or throughput it can specify

00:04:40,770 --> 00:04:45,440
like ppl or take us

00:04:46,610 --> 00:04:52,650
the second maybe the third one maybe

00:04:49,620 --> 00:04:54,690
more interesting that is to try to set

00:04:52,650 --> 00:04:57,720
the initial concussion window for

00:04:54,690 --> 00:05:01,560
example when the receiver like the

00:04:57,720 --> 00:05:05,730
mobile phone one can announced the

00:05:01,560 --> 00:05:07,500
server about the desire initial

00:05:05,730 --> 00:05:10,830
congestion window because these know

00:05:07,500 --> 00:05:14,310
more about the network bottleneck so

00:05:10,830 --> 00:05:17,820
there's one thing here is to about the

00:05:14,310 --> 00:05:20,700
DDoS attack so to avoid that the server

00:05:17,820 --> 00:05:24,890
might check if the IP come from a trust

00:05:20,700 --> 00:05:28,560
list the last one is the delay ACK

00:05:24,890 --> 00:05:31,110
options so the motivation is that too

00:05:28,560 --> 00:05:34,800
many acts or too few acts both are not

00:05:31,110 --> 00:05:37,650
good though there's need to know the

00:05:34,800 --> 00:05:40,890
remote IP lie strategy and request the

00:05:37,650 --> 00:05:43,560
design configurations this option would

00:05:40,890 --> 00:05:47,640
carry two values the delay I'd come out

00:05:43,560 --> 00:05:51,210
not the absolute but the relative value

00:05:47,640 --> 00:05:53,370
as the fraction of a TT and the second

00:05:51,210 --> 00:05:58,590
one is this number of segments count

00:05:53,370 --> 00:06:02,700
that the receiver will wait before

00:05:58,590 --> 00:06:07,380
sending an ACK - what about the meter

00:06:02,700 --> 00:06:13,440
box to avoid any debuffs we induce the

00:06:07,380 --> 00:06:15,690
experiment that is be options and if is

00:06:13,440 --> 00:06:20,970
not support by there was a better we

00:06:15,690 --> 00:06:23,150
should tell them to support at the

00:06:20,970 --> 00:06:28,790
moment of course status

00:06:23,150 --> 00:06:33,680
of alfred work is quite small the kind

00:06:28,790 --> 00:06:36,760
of transistor is around 75 line and for

00:06:33,680 --> 00:06:42,080
each case mine is some kind of chance if

00:06:36,760 --> 00:06:46,850
if the the value need to be applied is

00:06:42,080 --> 00:06:49,520
not supported yet by PBXs apart

00:06:46,850 --> 00:06:54,260
otherwise we only need to write a VPS

00:06:49,520 --> 00:06:57,320
program there are two caveats the first

00:06:54,260 --> 00:06:59,419
one is that the option size is only for

00:06:57,320 --> 00:07:03,710
bias or less because we use the

00:06:59,419 --> 00:07:07,280
equipment of disappear bpa but it's

00:07:03,710 --> 00:07:10,010
expensable to Stichting byte and the

00:07:07,280 --> 00:07:15,199
second is that it coupled to the secret

00:07:10,010 --> 00:07:20,330
b2 we so but i think it can be decoupled

00:07:15,199 --> 00:07:23,660
later so now the second part because

00:07:20,330 --> 00:07:30,260
this my thesis topic that is about MPDC

00:07:23,660 --> 00:07:32,930
P so in MPD speed a major task is to

00:07:30,260 --> 00:07:38,300
manage the part and if a case should be

00:07:32,930 --> 00:07:43,039
controlled by applications or users or

00:07:38,300 --> 00:07:47,360
in fact you know in the MPD SP olive

00:07:43,039 --> 00:07:50,090
tree branch is already support generic

00:07:47,360 --> 00:07:53,449
part manager framework that based on net

00:07:50,090 --> 00:07:56,750
link and it allowed to write part

00:07:53,449 --> 00:08:02,180
manager in userspace it provides a clean

00:07:56,750 --> 00:08:05,479
later but there are several issues the

00:08:02,180 --> 00:08:09,050
net link message might be lost to

00:08:05,479 --> 00:08:11,300
support different facilities we need

00:08:09,050 --> 00:08:14,570
different features we need different

00:08:11,300 --> 00:08:19,490
facilities which might even make

00:08:14,570 --> 00:08:22,280
situation more complicated so what about

00:08:19,490 --> 00:08:25,699
an alternative solution that face on a

00:08:22,280 --> 00:08:27,979
BPF it would provide performance it has

00:08:25,699 --> 00:08:31,099
various support for this aspect ranking

00:08:27,979 --> 00:08:34,459
and it's easy to apply the policy for

00:08:31,099 --> 00:08:37,909
the PO is one to assemble reject sub

00:08:34,459 --> 00:08:42,089
flow request from the P

00:08:37,909 --> 00:08:45,540
but even so limit by the current ebps

00:08:42,089 --> 00:08:51,329
limit maybe less layering separation and

00:08:45,540 --> 00:08:55,920
the low key may be trickier so our

00:08:51,329 --> 00:08:59,790
prototype for this tracking event in

00:08:55,920 --> 00:09:03,240
used new TCP BPF comebacks and to start

00:08:59,790 --> 00:09:06,839
the address sub flow it would used PDF

00:09:03,240 --> 00:09:08,970
maps and to open the flow does the major

00:09:06,839 --> 00:09:14,939
one we need to write a new helper

00:09:08,970 --> 00:09:17,999
function so to insert a new tip it BPF

00:09:14,939 --> 00:09:22,079
compact is straight from blood but it

00:09:17,999 --> 00:09:24,449
only support at most three documents so

00:09:22,079 --> 00:09:29,040
we need some other channels to pass the

00:09:24,449 --> 00:09:34,709
metadata before we extended this VP PF

00:09:29,040 --> 00:09:37,949
context so for any DSP stack the straps

00:09:34,709 --> 00:09:41,549
Arkansas container it is be fused so we

00:09:37,949 --> 00:09:45,809
also mirror these fields into top-ups

00:09:41,549 --> 00:09:51,709
context so to open some flow we create

00:09:45,809 --> 00:09:51,709
new helper functions with the stock of

00:09:52,100 --> 00:10:00,389
context and the photon pose as the

00:09:56,759 --> 00:10:03,179
additional metadata so if a few of at

00:10:00,389 --> 00:10:08,040
Apple is unset we'll use the existing or

00:10:03,179 --> 00:10:09,809
the cannula size IP or pot and we extend

00:10:08,040 --> 00:10:13,410
the metadata another and it is being

00:10:09,809 --> 00:10:16,799
formed from the socket context but

00:10:13,410 --> 00:10:19,230
easily we are in the stock sub IR cube

00:10:16,799 --> 00:10:23,040
contest which means we cannot open some

00:10:19,230 --> 00:10:28,649
flow directly before we creators will

00:10:23,040 --> 00:10:32,670
kill and carry read and the stuff law is

00:10:28,649 --> 00:10:34,860
actually open later at the moment the

00:10:32,670 --> 00:10:38,579
code changes like this and we also

00:10:34,860 --> 00:10:42,029
implement two minimum path Maru as the

00:10:38,579 --> 00:10:45,600
EPA programs so and if port and

00:10:42,029 --> 00:10:50,339
formation is too basic party manager in

00:10:45,600 --> 00:10:53,850
Antibes P so there are current

00:10:50,339 --> 00:10:56,880
many open users but the main one is we

00:10:53,850 --> 00:11:01,680
do not not yet handle the event of local

00:10:56,880 --> 00:11:06,000
arrest James because we need to send the

00:11:01,680 --> 00:11:09,329
event of each PPP same event to each PDF

00:11:06,000 --> 00:11:12,240
program in each secret and this

00:11:09,329 --> 00:11:20,190
information of secret need to pass with

00:11:12,240 --> 00:11:25,230
within the target so maybe we need to

00:11:20,190 --> 00:11:31,769
create multiple dummy socket each for

00:11:25,230 --> 00:11:34,800
secret and story somewhere so far the

00:11:31,769 --> 00:11:37,649
thing it should be more straightforward

00:11:34,800 --> 00:11:41,490
to remove some flow to start a sub flow

00:11:37,649 --> 00:11:45,240
the supported one stack the last thing

00:11:41,490 --> 00:11:49,050
is to support multiple parts manager for

00:11:45,240 --> 00:11:51,930
them to each part measure shoot me the

00:11:49,050 --> 00:11:58,770
pot put a nest near space but I don't

00:11:51,930 --> 00:12:03,810
know how this could code so malicious is

00:11:58,770 --> 00:12:11,310
in our paper and their source code is in

00:12:03,810 --> 00:12:17,579
git repository okay so that's all from

00:12:11,310 --> 00:12:20,520
my part it's amazing

00:12:17,579 --> 00:12:22,910
the most I'm hoping there's a lot of

00:12:20,520 --> 00:12:22,910
questions

00:12:24,950 --> 00:12:32,370
hi this is Eric when you do performance

00:12:29,940 --> 00:12:35,640
test don't use iperf 3 because it's just

00:12:32,370 --> 00:12:38,010
some big TSO packets a 10 gig it's one

00:12:35,640 --> 00:12:40,440
packet every 50 microseconds so you

00:12:38,010 --> 00:12:45,360
can't really see any change in

00:12:40,440 --> 00:12:48,870
performance if you want to like have a

00:12:45,360 --> 00:12:54,600
sense of the performance cost of adding

00:12:48,870 --> 00:12:59,399
a BPI folks in the option parsing or

00:12:54,600 --> 00:13:01,079
setting that's actually three hooks so

00:12:59,399 --> 00:13:02,940
that's three in the direct scores per

00:13:01,079 --> 00:13:06,149
packet if you

00:13:02,940 --> 00:13:09,329
want to have a better sense of that you

00:13:06,149 --> 00:13:11,639
should some very small packets like one

00:13:09,329 --> 00:13:16,769
byte RPC is something like that

00:13:11,639 --> 00:13:21,480
yes just that way I check with the wired

00:13:16,769 --> 00:13:30,740
shut is yeah it just other accumulate to

00:13:21,480 --> 00:13:38,009
my keys but yeah yeah yeah that might be

00:13:30,740 --> 00:13:41,250
yeah I need to check that thank you hi

00:13:38,009 --> 00:13:44,130
home this is our Lawrence rotten yeah so

00:13:41,250 --> 00:13:47,370
I'm excited about this use of TCP BPF

00:13:44,130 --> 00:13:51,630
and you know we'll have to look into the

00:13:47,370 --> 00:13:54,000
overheads but you know send me the

00:13:51,630 --> 00:13:56,370
patches for like internal review so that

00:13:54,000 --> 00:13:58,589
you know hopefully we can once you're

00:13:56,370 --> 00:14:16,050
ready we can push them upstream yeah

00:13:58,589 --> 00:14:18,480
sure okay buddy else you know you

00:14:16,050 --> 00:14:21,029
finished in good time right so yes I

00:14:18,480 --> 00:14:23,939
mean so your goal is two things you're

00:14:21,029 --> 00:14:25,189
trying by introducing these TCP options

00:14:23,939 --> 00:14:28,470
you're not gonna wait for an IETF

00:14:25,189 --> 00:14:29,759
standardization to happen you can just

00:14:28,470 --> 00:14:33,750
introduce them as long as you control

00:14:29,759 --> 00:14:36,750
both end systems yes yes yes yeah use

00:14:33,750 --> 00:14:42,449
the two for experimental TCP option that

00:14:36,750 --> 00:14:46,410
is you can use that and if we want to

00:14:42,449 --> 00:14:50,600
efficiently use that we can but you have

00:14:46,410 --> 00:14:54,720
to use is much easier than to run use a

00:14:50,600 --> 00:14:57,720
specific neither dedicate an option kind

00:14:54,720 --> 00:15:00,180
that's so PBF is opening some new

00:14:57,720 --> 00:15:02,910
frontiers here and no need to upstream

00:15:00,180 --> 00:15:08,459
anything am i correct you can just do

00:15:02,910 --> 00:15:11,550
your own thing yeah I think that depends

00:15:08,459 --> 00:15:15,470
on the for example if some companies

00:15:11,550 --> 00:15:15,470
wanna to make it so

00:15:16,320 --> 00:15:19,380
they need to hurt sometimes a node in

00:15:17,730 --> 00:15:22,259
the kernel so either you know it's

00:15:19,380 --> 00:15:29,339
already existing setec eruptions or you

00:15:22,259 --> 00:15:32,420
need to create them yeah so one back

00:15:29,339 --> 00:15:35,130
Eric again one suggestion would be to

00:15:32,420 --> 00:15:38,970
for you to use a static branch because

00:15:35,130 --> 00:15:42,209
most people won't use experimental TCP

00:15:38,970 --> 00:15:46,500
but just production already TCP so they

00:15:42,209 --> 00:15:48,630
probably don't want to add cost in their

00:15:46,500 --> 00:15:51,290
fast path so just through the static

00:15:48,630 --> 00:15:54,269
branch because if you are not using

00:15:51,290 --> 00:15:56,850
experimental option on your channel that

00:15:54,269 --> 00:15:58,470
that will be just enough so that's very

00:15:56,850 --> 00:16:01,470
very fast

00:15:58,470 --> 00:16:04,470
or it's actually free so I would suggest

00:16:01,470 --> 00:16:08,970
you to use a starting point look at the

00:16:04,470 --> 00:16:10,639
TCP md5 for example which is also using

00:16:08,970 --> 00:16:17,610
a static branch

00:16:10,639 --> 00:16:20,370
okay okay so not Carol options not

00:16:17,610 --> 00:16:24,649
configure options deploy just static you

00:16:20,370 --> 00:16:27,480
want it always to be there okay okay

00:16:24,649 --> 00:16:29,550
nobody else has a question okay I've run

00:16:27,480 --> 00:16:33,170
out of my questions so let's give it up

00:16:29,550 --> 00:16:33,170

YouTube URL: https://www.youtube.com/watch?v=dkUQzVMyXpo


