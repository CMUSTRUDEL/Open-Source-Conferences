Title: Netdev 0x14 - Security and Control of SR-IOV
Publication date: 2020-10-09
Playlist: Netdev 0x14
Description: 
	Speakers: Carolyn Wyborny, Tom Herbert

More info: https://netdevconf.info/0x14/session.html?talk-security-and-control-of-SR-IOV

Date: Friday, August 21, 2020

Network kernel bypass is becoming more common.
Often the given rationale to bypass the kernel
is that it takes too long to develop and enable
the kernel for new features.
With bypass, the assumption that the kernel is
the central system resource manager no longer holds.
Multiple, independent agents try to independently
(and directly) use and manage resources.
The sanity and security of the system can be compromised.

In this talk, Carolyn Wyborny and Tom Herbert will look
at this issue with the perspective of SR-IOVâ€™s Virtual
Functions (VF); they will introduce the problems of control
and security in the context of kernel bypass.
Some potential solutions will be proposed.

Carolyn and Tom hope to initiate a community discussion
on the topic.
Captions: 
	00:00:00,320 --> 00:00:05,040
my name is caroline weiborne i

00:00:03,040 --> 00:00:06,640
am an ethernet device driver developer

00:00:05,040 --> 00:00:09,280
at intel corporation

00:00:06,640 --> 00:00:10,800
i've been doing uh device drivers

00:00:09,280 --> 00:00:14,080
ethernet device drivers

00:00:10,800 --> 00:00:16,160
uh for probably about 15 years or so

00:00:14,080 --> 00:00:17,600
i'm here today to talk about security

00:00:16,160 --> 00:00:19,520
and sriov

00:00:17,600 --> 00:00:21,840
and what is our responsibility in the

00:00:19,520 --> 00:00:21,840
kernel

00:00:22,720 --> 00:00:26,160
uh us device vendor people have been

00:00:25,439 --> 00:00:30,160
working

00:00:26,160 --> 00:00:32,160
down in the sriv space with uh this

00:00:30,160 --> 00:00:34,399
feature for several years

00:00:32,160 --> 00:00:35,440
but i know that everyone isn't familiar

00:00:34,399 --> 00:00:36,880
with this feature

00:00:35,440 --> 00:00:39,040
in a lot of detail so i'm going to spend

00:00:36,880 --> 00:00:42,160
a little bit of time explaining

00:00:39,040 --> 00:00:45,680
explaining it sriov stands for

00:00:42,160 --> 00:00:49,760
single root iov virtualization

00:00:45,680 --> 00:00:51,680
this is a pci sig standard

00:00:49,760 --> 00:00:53,039
and there's a specification for it it

00:00:51,680 --> 00:00:55,280
has been

00:00:53,039 --> 00:00:56,879
in existence probably for about 12 years

00:00:55,280 --> 00:00:58,320
now

00:00:56,879 --> 00:01:00,719
we've had several product lines with

00:00:58,320 --> 00:01:03,120
this feature it was defined

00:01:00,719 --> 00:01:05,760
back in the day the need was to have

00:01:03,120 --> 00:01:08,159
better performance and isolation

00:01:05,760 --> 00:01:11,360
for networking devices in vms

00:01:08,159 --> 00:01:14,320
virtualization was a lot newer back then

00:01:11,360 --> 00:01:15,119
and the idea was to have a way to divide

00:01:14,320 --> 00:01:17,600
up

00:01:15,119 --> 00:01:18,479
the ethernet device so that you could

00:01:17,600 --> 00:01:20,640
have a sub

00:01:18,479 --> 00:01:23,200
function that you could assign to an

00:01:20,640 --> 00:01:25,759
actual virtual machine

00:01:23,200 --> 00:01:27,920
so this is known as a virtual function

00:01:25,759 --> 00:01:28,400
there's actually a pci config space for

00:01:27,920 --> 00:01:29,920
it

00:01:28,400 --> 00:01:32,079
the operating system sees it as a

00:01:29,920 --> 00:01:33,600
hardware device and this can be assigned

00:01:32,079 --> 00:01:35,680
into the vm

00:01:33,600 --> 00:01:37,840
where it gets a virtual uh its own

00:01:35,680 --> 00:01:38,560
driver in the kernel space of the vm

00:01:37,840 --> 00:01:41,840
which is called

00:01:38,560 --> 00:01:44,720
the virtual function driver or vf driver

00:01:41,840 --> 00:01:46,320
this driver then communicates with the

00:01:44,720 --> 00:01:49,520
physical function driver

00:01:46,320 --> 00:01:52,880
which still exists in the in the kernel

00:01:49,520 --> 00:01:55,840
and that's called the pf driver

00:01:52,880 --> 00:01:57,280
this feature initially was designed

00:01:55,840 --> 00:02:00,159
around performance

00:01:57,280 --> 00:02:00,960
it was a way to get traffic from the vm

00:02:00,159 --> 00:02:03,680
out

00:02:00,960 --> 00:02:04,479
out of the system as fast as possible so

00:02:03,680 --> 00:02:06,560
that

00:02:04,479 --> 00:02:08,640
hosted businesses and things wouldn't

00:02:06,560 --> 00:02:09,599
have any uh big slow down in a in a

00:02:08,640 --> 00:02:12,239
virtualized

00:02:09,599 --> 00:02:13,120
environment uh that type of traffic from

00:02:12,239 --> 00:02:15,440
the vm

00:02:13,120 --> 00:02:16,560
uh out to the system is called north

00:02:15,440 --> 00:02:18,640
south traffic

00:02:16,560 --> 00:02:20,640
um and this this feature works very well

00:02:18,640 --> 00:02:22,319
for that um there's been improvements

00:02:20,640 --> 00:02:25,520
over time

00:02:22,319 --> 00:02:27,760
however east-west traffic which would be

00:02:25,520 --> 00:02:29,440
traffic from a vm to another vm on the

00:02:27,760 --> 00:02:32,000
same system

00:02:29,440 --> 00:02:32,879
isn't isn't quite as performant because

00:02:32,000 --> 00:02:35,599
by the nature

00:02:32,879 --> 00:02:36,959
of this feature the traffic has to go

00:02:35,599 --> 00:02:38,959
actually out of the system

00:02:36,959 --> 00:02:40,959
before it comes back into the system to

00:02:38,959 --> 00:02:42,480
the other vm

00:02:40,959 --> 00:02:44,720
there's a lot of work happening still in

00:02:42,480 --> 00:02:46,560
this area but performance is not

00:02:44,720 --> 00:02:48,160
why i'm here today i'm here to talk

00:02:46,560 --> 00:02:51,840
about security

00:02:48,160 --> 00:02:51,840
and port isolation

00:02:53,280 --> 00:02:59,519
sriov also was intended to be

00:02:56,480 --> 00:03:02,159
a secure way to configure

00:02:59,519 --> 00:03:03,840
hardware features and the security was

00:03:02,159 --> 00:03:05,519
added by having the physical function

00:03:03,840 --> 00:03:09,200
driver the pf driver

00:03:05,519 --> 00:03:10,319
in the kernel handle requests for

00:03:09,200 --> 00:03:13,200
actually configuring

00:03:10,319 --> 00:03:14,640
the device the vf actually does have

00:03:13,200 --> 00:03:16,800
direct hardware access

00:03:14,640 --> 00:03:19,680
for a very limited set of resources it

00:03:16,800 --> 00:03:21,760
has some registers and some cues

00:03:19,680 --> 00:03:24,159
and it's allowed to configure those

00:03:21,760 --> 00:03:28,080
anything beyond that typically

00:03:24,159 --> 00:03:31,599
is done by a request to the pf driver

00:03:28,080 --> 00:03:33,920
or to the firmware and firmware

00:03:31,599 --> 00:03:34,879
as you may or may not know is software

00:03:33,920 --> 00:03:37,200
that lives actually

00:03:34,879 --> 00:03:38,080
on the device it's not in the operating

00:03:37,200 --> 00:03:40,159
system

00:03:38,080 --> 00:03:42,000
like the pf driver it's on the actual

00:03:40,159 --> 00:03:44,720
device

00:03:42,000 --> 00:03:45,440
but using sri ov as a way to configure

00:03:44,720 --> 00:03:47,920
vfs

00:03:45,440 --> 00:03:51,280
provides more security than drivers that

00:03:47,920 --> 00:03:51,280
are completely in user space

00:03:55,200 --> 00:04:01,200
the isolation and and security model

00:03:58,400 --> 00:04:03,360
of your traditional e-commerce business

00:04:01,200 --> 00:04:07,120
is probably obvious to most uh

00:04:03,360 --> 00:04:09,439
it is uh complete isolation the

00:04:07,120 --> 00:04:11,439
traffic from one business on one vf

00:04:09,439 --> 00:04:13,360
potentially on the same device

00:04:11,439 --> 00:04:15,360
would not have any access or be able to

00:04:13,360 --> 00:04:16,959
interfere in any way with

00:04:15,360 --> 00:04:19,120
another vf on the same device

00:04:16,959 --> 00:04:22,720
potentially on the same system

00:04:19,120 --> 00:04:24,800
in another business this is a base

00:04:22,720 --> 00:04:26,639
requirement this is not a nice to have

00:04:24,800 --> 00:04:28,720
feature this is what

00:04:26,639 --> 00:04:30,960
our cloud service providers are selling

00:04:28,720 --> 00:04:31,680
to users and this is what we as a device

00:04:30,960 --> 00:04:34,639
vendor

00:04:31,680 --> 00:04:37,120
um are expected to provide in their

00:04:34,639 --> 00:04:37,120
environment

00:04:37,360 --> 00:04:42,400
this was a lot easier to do a few years

00:04:40,479 --> 00:04:44,160
ago where parts were often

00:04:42,400 --> 00:04:45,759
architected by hardware to be completely

00:04:44,160 --> 00:04:46,800
isolated the ports were completely

00:04:45,759 --> 00:04:50,479
isolated in

00:04:46,800 --> 00:04:53,680
silicon as manufacturing costs

00:04:50,479 --> 00:04:55,199
and other pressure size

00:04:53,680 --> 00:04:57,440
all of these things have come to bear

00:04:55,199 --> 00:04:59,360
over the years and

00:04:57,440 --> 00:05:00,560
networking ethernet networking devices

00:04:59,360 --> 00:05:03,199
now often

00:05:00,560 --> 00:05:04,960
have some element of shared resources

00:05:03,199 --> 00:05:07,759
and the management of those

00:05:04,960 --> 00:05:09,280
and the isolation then expected has been

00:05:07,759 --> 00:05:10,000
passed that responsibility has been

00:05:09,280 --> 00:05:12,639
passed

00:05:10,000 --> 00:05:14,240
uh to uh either the firmware um right or

00:05:12,639 --> 00:05:17,440
the or the pf driver

00:05:14,240 --> 00:05:19,520
also uh since uh since the traditional

00:05:17,440 --> 00:05:21,680
e-commerce and virtualization world

00:05:19,520 --> 00:05:23,199
we have had a lot of changes in the

00:05:21,680 --> 00:05:24,479
telecom space

00:05:23,199 --> 00:05:26,320
those of you that may be familiar with

00:05:24,479 --> 00:05:28,240
the telecom world is that

00:05:26,320 --> 00:05:30,320
this used to be large data centers full

00:05:28,240 --> 00:05:32,560
of purpose-built

00:05:30,320 --> 00:05:34,400
platforms purpose-built hardware with

00:05:32,560 --> 00:05:36,720
purpose-built software

00:05:34,400 --> 00:05:38,000
it was all very expensive it was all

00:05:36,720 --> 00:05:41,199
very specialized

00:05:38,000 --> 00:05:42,080
um and those of us in the regular uh pc

00:05:41,199 --> 00:05:45,440
e-commerce

00:05:42,080 --> 00:05:47,759
world weren't exposed to uh to use cases

00:05:45,440 --> 00:05:49,520
from that from that environment uh

00:05:47,759 --> 00:05:52,560
relatively recently

00:05:49,520 --> 00:05:55,039
that industry has converted to pc

00:05:52,560 --> 00:05:57,680
platforms they're still customized quite

00:05:55,039 --> 00:06:00,880
a bit but it's a regular pc platform

00:05:57,680 --> 00:06:01,759
with the operating systems there with

00:06:00,880 --> 00:06:04,000
that

00:06:01,759 --> 00:06:05,360
we have been exposed to the packet

00:06:04,000 --> 00:06:07,840
processing model

00:06:05,360 --> 00:06:10,560
network processing network processors

00:06:07,840 --> 00:06:13,600
was what it was back in the day

00:06:10,560 --> 00:06:14,720
and now that's sort of a different world

00:06:13,600 --> 00:06:16,080
that's not

00:06:14,720 --> 00:06:18,400
that's not a business where you have

00:06:16,080 --> 00:06:19,680
maybe have a data database back end to a

00:06:18,400 --> 00:06:22,560
web server

00:06:19,680 --> 00:06:24,000
what you have here is pure bulk packet

00:06:22,560 --> 00:06:25,759
processing

00:06:24,000 --> 00:06:27,840
there is nothing else happening on these

00:06:25,759 --> 00:06:30,720
systems but packet processing

00:06:27,840 --> 00:06:32,240
so isolation and and security you have

00:06:30,720 --> 00:06:34,319
control of the data center you have

00:06:32,240 --> 00:06:37,199
control of your packet processing

00:06:34,319 --> 00:06:37,680
that model wasn't as important to this

00:06:37,199 --> 00:06:41,280
to this

00:06:37,680 --> 00:06:43,680
kind of user however the data centers

00:06:41,280 --> 00:06:45,440
and virtualization as a feature

00:06:43,680 --> 00:06:47,039
which is basically taking over all of

00:06:45,440 --> 00:06:49,919
the competing world

00:06:47,039 --> 00:06:50,720
has evolved and now there are data

00:06:49,919 --> 00:06:53,840
centers

00:06:50,720 --> 00:06:56,319
that will host multiple telecom tenants

00:06:53,840 --> 00:06:57,599
and so now now we're back to needing to

00:06:56,319 --> 00:07:00,880
isolate again

00:06:57,599 --> 00:07:02,560
somewhat now these differing models

00:07:00,880 --> 00:07:04,880
and differing requirements make it

00:07:02,560 --> 00:07:06,479
difficult for a device vendor

00:07:04,880 --> 00:07:09,280
to provide a generic product that

00:07:06,479 --> 00:07:11,199
supports all those use cases

00:07:09,280 --> 00:07:14,880
and some use cases are diametrically

00:07:11,199 --> 00:07:14,880
opposed to the others

00:07:15,199 --> 00:07:18,639
uh the uh traditional model of the of

00:07:18,000 --> 00:07:21,120
the vf

00:07:18,639 --> 00:07:22,240
is that it's in the the the world out

00:07:21,120 --> 00:07:24,080
there it's in a

00:07:22,240 --> 00:07:26,000
uh it's in a completely untrusted uh

00:07:24,080 --> 00:07:28,400
user space uh anyone

00:07:26,000 --> 00:07:29,599
could potentially get access to it uh

00:07:28,400 --> 00:07:32,400
potentially provide any

00:07:29,599 --> 00:07:34,400
modified driver um do something that

00:07:32,400 --> 00:07:36,319
would be unexpected

00:07:34,400 --> 00:07:37,919
from the device vendor perspective we

00:07:36,319 --> 00:07:40,319
would protect against that

00:07:37,919 --> 00:07:42,319
uh it's done very simply in that not

00:07:40,319 --> 00:07:44,800
letting them do very much

00:07:42,319 --> 00:07:45,360
you would lock down that type of vf so

00:07:44,800 --> 00:07:47,919
that it

00:07:45,360 --> 00:07:50,479
can't cause trouble this is the safest

00:07:47,919 --> 00:07:52,800
model this is the traditional e-commerce

00:07:50,479 --> 00:07:52,800
model

00:07:55,039 --> 00:08:01,919
however often with coms

00:07:58,639 --> 00:08:06,080
use cases we have provided

00:08:01,919 --> 00:08:08,319
as vendors new uh and uh

00:08:06,080 --> 00:08:09,199
fancy hero features maybe we would call

00:08:08,319 --> 00:08:12,639
them

00:08:09,199 --> 00:08:15,360
that we want to sell to users so

00:08:12,639 --> 00:08:17,919
as we define those features and those

00:08:15,360 --> 00:08:20,000
features might have some

00:08:17,919 --> 00:08:21,680
capability that would be sensitive in a

00:08:20,000 --> 00:08:23,280
traditional vf world

00:08:21,680 --> 00:08:24,720
we find that users are asking for

00:08:23,280 --> 00:08:27,199
exactly those features

00:08:24,720 --> 00:08:28,479
in a vf as they continue to virtualize

00:08:27,199 --> 00:08:31,120
their entire

00:08:28,479 --> 00:08:33,039
user space or excuse me their entire

00:08:31,120 --> 00:08:35,279
business

00:08:33,039 --> 00:08:38,080
they would want some of these features

00:08:35,279 --> 00:08:40,240
in in a vf

00:08:38,080 --> 00:08:41,440
the way to do that today in the linux

00:08:40,240 --> 00:08:44,320
kernel is with

00:08:41,440 --> 00:08:45,600
the iprep toolset there is in the ip

00:08:44,320 --> 00:08:48,959
link

00:08:45,600 --> 00:08:51,760
there is set vf trust and that

00:08:48,959 --> 00:08:54,240
that allows an admin uh to say that a vf

00:08:51,760 --> 00:08:56,880
is trusted so that it could do something

00:08:54,240 --> 00:08:59,040
maybe that a regular default vf could

00:08:56,880 --> 00:09:02,240
not

00:08:59,040 --> 00:09:02,959
this is an all or nothing option it is

00:09:02,240 --> 00:09:06,240
one

00:09:02,959 --> 00:09:08,240
one setting and it's up to the vendors

00:09:06,240 --> 00:09:09,360
typically at this point to decide uh

00:09:08,240 --> 00:09:11,440
what might be

00:09:09,360 --> 00:09:13,279
uh something that needs to have this

00:09:11,440 --> 00:09:13,920
setting um to give this privilege i'd

00:09:13,279 --> 00:09:16,000
like to

00:09:13,920 --> 00:09:17,279
to say using the word trust is a bit uh

00:09:16,000 --> 00:09:19,920
of a misnomer here

00:09:17,279 --> 00:09:20,880
uh this doesn't truly make this vf uh

00:09:19,920 --> 00:09:22,720
trustworthy

00:09:20,880 --> 00:09:24,399
uh in the in the traditional security

00:09:22,720 --> 00:09:28,000
sense all that it really does

00:09:24,399 --> 00:09:28,880
is give it targets or or defines a vf as

00:09:28,000 --> 00:09:30,880
getting extra

00:09:28,880 --> 00:09:32,640
privileges it's allowed to configure

00:09:30,880 --> 00:09:35,040
some features um

00:09:32,640 --> 00:09:36,080
that a regular traditional vf might

00:09:35,040 --> 00:09:38,720
might

00:09:36,080 --> 00:09:41,680
not need or might maybe shouldn't have

00:09:38,720 --> 00:09:44,240
depending on the environment

00:09:41,680 --> 00:09:45,040
i believe and we believe that users

00:09:44,240 --> 00:09:47,839
should define

00:09:45,040 --> 00:09:48,160
this policy the policy of what features

00:09:47,839 --> 00:09:50,640
uh

00:09:48,160 --> 00:09:53,680
get added to what vf this shouldn't be

00:09:50,640 --> 00:09:53,680
up to the device vendors

00:09:55,680 --> 00:09:59,279
let's take a look at uh what some of

00:09:57,680 --> 00:10:00,880
these privileges might look like and how

00:09:59,279 --> 00:10:02,480
they might apply

00:10:00,880 --> 00:10:04,079
i've got a couple of different roles

00:10:02,480 --> 00:10:07,040
here that you might

00:10:04,079 --> 00:10:07,920
assign to a vf in your in your data

00:10:07,040 --> 00:10:10,640
center

00:10:07,920 --> 00:10:11,839
i've got some features there are

00:10:10,640 --> 00:10:14,079
different kinds of

00:10:11,839 --> 00:10:15,920
filtering you might have some custom

00:10:14,079 --> 00:10:18,800
protocols you might have some unique

00:10:15,920 --> 00:10:21,200
things that you would want a special

00:10:18,800 --> 00:10:23,279
special access to

00:10:21,200 --> 00:10:24,720
so maybe you would want that particular

00:10:23,279 --> 00:10:27,920
kind of role to have

00:10:24,720 --> 00:10:29,920
that kind of extra privilege promiscuous

00:10:27,920 --> 00:10:32,160
mode is probably where the trust

00:10:29,920 --> 00:10:33,120
idea came from in the first place

00:10:32,160 --> 00:10:34,880
because

00:10:33,120 --> 00:10:36,720
you wouldn't want a regular untrusted vf

00:10:34,880 --> 00:10:38,240
to have access to all of the packet

00:10:36,720 --> 00:10:40,399
traffic on a device

00:10:38,240 --> 00:10:42,560
but if you were going to make a vf as a

00:10:40,399 --> 00:10:47,120
firewall you would want it to have

00:10:42,560 --> 00:10:48,399
access to that traffic to do its job

00:10:47,120 --> 00:10:50,560
you also could have if you're going to

00:10:48,399 --> 00:10:52,320
define an access control or some sort of

00:10:50,560 --> 00:10:55,120
tcam configuration

00:10:52,320 --> 00:10:57,680
that feature might be something that a

00:10:55,120 --> 00:10:59,120
filtering type vf would need access to

00:10:57,680 --> 00:11:01,440
but you may or may not want your

00:10:59,120 --> 00:11:05,279
firewall to have that same

00:11:01,440 --> 00:11:08,240
same privilege this new use case with

00:11:05,279 --> 00:11:09,519
vf's configuring other vf's that that's

00:11:08,240 --> 00:11:10,720
a use case that's come out of the

00:11:09,519 --> 00:11:13,440
telecom world

00:11:10,720 --> 00:11:14,000
where the tenant has just a set of vfs

00:11:13,440 --> 00:11:17,839
they don't have

00:11:14,000 --> 00:11:20,880
access to any device and the

00:11:17,839 --> 00:11:21,920
the tenant the host provider the data

00:11:20,880 --> 00:11:23,600
center is not providing any

00:11:21,920 --> 00:11:25,360
configuration either

00:11:23,600 --> 00:11:27,760
it is up to the tenant to totally

00:11:25,360 --> 00:11:30,399
configure their environment

00:11:27,760 --> 00:11:31,839
so in that case you may want that vf to

00:11:30,399 --> 00:11:35,040
be able to do some things

00:11:31,839 --> 00:11:37,920
on behalf of other vfs but you probably

00:11:35,040 --> 00:11:40,079
still wouldn't want it to be configuring

00:11:37,920 --> 00:11:42,480
promiscuous mode

00:11:40,079 --> 00:11:43,920
the other problem that we have today or

00:11:42,480 --> 00:11:46,160
i would say maybe challenge is a better

00:11:43,920 --> 00:11:47,600
word is that this is potentially handled

00:11:46,160 --> 00:11:50,160
all of these different defining a

00:11:47,600 --> 00:11:51,920
feature is sensitive and and or not

00:11:50,160 --> 00:11:57,360
is handled differently by all uh the

00:11:51,920 --> 00:11:59,760
device vendors today

00:11:57,360 --> 00:12:00,880
we've had additional requests from users

00:11:59,760 --> 00:12:03,440
for other features that

00:12:00,880 --> 00:12:04,240
uh with sriov being in existence for so

00:12:03,440 --> 00:12:06,800
long that

00:12:04,240 --> 00:12:08,560
were never contemplated as features that

00:12:06,800 --> 00:12:10,079
that vf's would want

00:12:08,560 --> 00:12:12,480
but again as virtualization has

00:12:10,079 --> 00:12:14,399
transformed the data center

00:12:12,480 --> 00:12:15,519
we get requests for these kinds of

00:12:14,399 --> 00:12:17,040
things whether

00:12:15,519 --> 00:12:20,720
vf should be able to change their mac

00:12:17,040 --> 00:12:23,360
address or their vlan configuration

00:12:20,720 --> 00:12:25,440
spoof check is a is a security feature

00:12:23,360 --> 00:12:27,839
in a vf

00:12:25,440 --> 00:12:29,839
there have been use cases provided where

00:12:27,839 --> 00:12:31,360
where users want to disable this for

00:12:29,839 --> 00:12:32,480
some reason

00:12:31,360 --> 00:12:34,240
these kinds of things would be

00:12:32,480 --> 00:12:35,680
considered sensitive features in

00:12:34,240 --> 00:12:37,519
addition to the ones that i've already

00:12:35,680 --> 00:12:39,760
presented

00:12:37,519 --> 00:12:41,440
if we had a generic list of defines

00:12:39,760 --> 00:12:44,320
because i believe that this challenge

00:12:41,440 --> 00:12:44,880
is uh is met by all of the device

00:12:44,320 --> 00:12:47,839
vendors

00:12:44,880 --> 00:12:49,040
in very similar ways if we had a generic

00:12:47,839 --> 00:12:51,279
set of defines

00:12:49,040 --> 00:12:52,240
that we could use and that users could

00:12:51,279 --> 00:12:54,800
combine in a way

00:12:52,240 --> 00:12:55,440
would be consistent and flexible for

00:12:54,800 --> 00:12:57,279
users

00:12:55,440 --> 00:13:00,560
if we manage it in the kernel then it's

00:12:57,279 --> 00:13:00,560
more generic for everyone

00:13:03,519 --> 00:13:07,519
so my proposal is that we define a

00:13:05,839 --> 00:13:10,399
feature we define

00:13:07,519 --> 00:13:13,200
the privileges in a more granular manner

00:13:10,399 --> 00:13:17,519
with a set of trust flags

00:13:13,200 --> 00:13:20,560
we can use them as a bit field and

00:13:17,519 --> 00:13:22,639
we would extend the vf devices would

00:13:20,560 --> 00:13:24,160
define tell the kernel communicate with

00:13:22,639 --> 00:13:26,320
the kernel that they can support

00:13:24,160 --> 00:13:27,200
this feature we can extend this

00:13:26,320 --> 00:13:28,560
interface

00:13:27,200 --> 00:13:30,800
there are not user space changes

00:13:28,560 --> 00:13:33,120
required for this

00:13:30,800 --> 00:13:34,079
and you could still retain the original

00:13:33,120 --> 00:13:35,519
all or nothing

00:13:34,079 --> 00:13:37,440
bucket type approach if that's what

00:13:35,519 --> 00:13:40,560
works for your environment

00:13:37,440 --> 00:13:42,880
and maybe it does but it would allow the

00:13:40,560 --> 00:13:48,639
vf trust model to be more flexible

00:13:42,880 --> 00:13:50,800
for users

00:13:48,639 --> 00:13:52,079
here's a list of flags a base set of

00:13:50,800 --> 00:13:55,839
flags uh that

00:13:52,079 --> 00:13:58,320
i came up with i'm sure that this is not

00:13:55,839 --> 00:13:59,760
the final list but what i would like to

00:13:58,320 --> 00:14:00,480
do with this list is to start the

00:13:59,760 --> 00:14:02,560
discussion

00:14:00,480 --> 00:14:05,600
with the other device vendors on what

00:14:02,560 --> 00:14:08,320
sort of base privileges would we need

00:14:05,600 --> 00:14:09,360
let's take a look at what we have so far

00:14:08,320 --> 00:14:12,160
advanced flow

00:14:09,360 --> 00:14:14,000
would be about filtering that is

00:14:12,160 --> 00:14:14,959
expecting traffic or wanting to catch

00:14:14,000 --> 00:14:17,920
traffic that is

00:14:14,959 --> 00:14:19,839
external to the vf is what the vf would

00:14:17,920 --> 00:14:21,519
not normally have access to

00:14:19,839 --> 00:14:24,320
uh mirroring we talked about that

00:14:21,519 --> 00:14:25,760
briefly mirroring is every packet

00:14:24,320 --> 00:14:27,440
you know it's an infrastructure

00:14:25,760 --> 00:14:29,680
monitoring

00:14:27,440 --> 00:14:31,440
capability you wouldn't want just uh

00:14:29,680 --> 00:14:32,880
particularly any old vf

00:14:31,440 --> 00:14:36,000
that's trusted to maybe have this

00:14:32,880 --> 00:14:38,399
feature there we have three modes

00:14:36,000 --> 00:14:39,760
of promiscuous defined um there are

00:14:38,399 --> 00:14:41,760
several layers of it

00:14:39,760 --> 00:14:43,839
um i think between the three or maybe

00:14:41,760 --> 00:14:44,560
some some combination of that we could

00:14:43,839 --> 00:14:46,800
manage

00:14:44,560 --> 00:14:48,480
what what users actually want for being

00:14:46,800 --> 00:14:52,160
able to configure promiscuous

00:14:48,480 --> 00:14:55,279
mode in a vf uh mac address change

00:14:52,160 --> 00:14:58,800
mtu change is a new one um

00:14:55,279 --> 00:15:01,600
but at least new to the sri ov world

00:14:58,800 --> 00:15:03,040
what i don't know that you want vs to

00:15:01,600 --> 00:15:04,240
change mtu

00:15:03,040 --> 00:15:06,480
at least we thought they never would

00:15:04,240 --> 00:15:07,839
want to change mtu that has changed

00:15:06,480 --> 00:15:09,760
again currently

00:15:07,839 --> 00:15:11,680
we do have users asking for the ability

00:15:09,760 --> 00:15:15,360
to make mtu changes

00:15:11,680 --> 00:15:18,480
in a vf the spoof check disable flags

00:15:15,360 --> 00:15:20,720
we have two levels of spoof check

00:15:18,480 --> 00:15:21,839
so but i'm sure that i'm missing

00:15:20,720 --> 00:15:23,519
something what else

00:15:21,839 --> 00:15:24,880
let's start the discussion maybe we need

00:15:23,519 --> 00:15:28,399
rss configuration

00:15:24,880 --> 00:15:28,399
maybe we need some other things in here

00:15:30,320 --> 00:15:34,240
the design of this feature uh just

00:15:32,880 --> 00:15:36,560
generally

00:15:34,240 --> 00:15:37,519
we would be extending the the get vf

00:15:36,560 --> 00:15:40,560
config callback

00:15:37,519 --> 00:15:41,440
in the kernel to allow a trust flag

00:15:40,560 --> 00:15:44,959
configuration

00:15:41,440 --> 00:15:46,399
we would do the define discuss and agree

00:15:44,959 --> 00:15:47,120
on the generic set of defines in the

00:15:46,399 --> 00:15:50,320
kernel

00:15:47,120 --> 00:15:52,720
to have we would also add validation

00:15:50,320 --> 00:15:54,639
of some set of generic flags configured

00:15:52,720 --> 00:15:57,199
in the kernel

00:15:54,639 --> 00:15:59,519
and and we would also change the ip

00:15:57,199 --> 00:16:03,440
route 2 tool set to allow

00:15:59,519 --> 00:16:03,440
this configuration via that tool set

00:16:04,959 --> 00:16:08,000
just to provide a little more detail we

00:16:07,600 --> 00:16:11,279
would be

00:16:08,000 --> 00:16:13,839
adding the ifla trust flags

00:16:11,279 --> 00:16:16,320
struct will be a new struct it looks

00:16:13,839 --> 00:16:20,079
just like ifla trust

00:16:16,320 --> 00:16:21,360
the ifla vf info would also get an

00:16:20,079 --> 00:16:24,639
additional member

00:16:21,360 --> 00:16:26,959
for trust flags capability

00:16:24,639 --> 00:16:28,720
in the drivers minimally all that needs

00:16:26,959 --> 00:16:32,000
to change for compilation and for

00:16:28,720 --> 00:16:33,759
nothing generally to change is to change

00:16:32,000 --> 00:16:36,000
one of the parameters to the callback

00:16:33,759 --> 00:16:38,160
ndo set vf trust

00:16:36,000 --> 00:16:40,320
that would need to be changed to a u32

00:16:38,160 --> 00:16:40,320
it's

00:16:40,399 --> 00:16:46,959
to actually configure the trust flags

00:16:43,680 --> 00:16:50,079
the response to get vf config info is

00:16:46,959 --> 00:16:52,560
the iaf lavf infrastruct and if you

00:16:50,079 --> 00:16:55,600
configure trust flags in your response

00:16:52,560 --> 00:16:56,639
instead at init instead of trusted you

00:16:55,600 --> 00:16:59,759
would then get

00:16:56,639 --> 00:17:02,079
the kernel expecting

00:16:59,759 --> 00:17:03,759
a flag value and zero or one is an

00:17:02,079 --> 00:17:06,559
option there as well which is

00:17:03,759 --> 00:17:07,199
all that we have today if you don't

00:17:06,559 --> 00:17:09,600
change it

00:17:07,199 --> 00:17:10,640
you still would have the original all or

00:17:09,600 --> 00:17:13,360
nothing

00:17:10,640 --> 00:17:14,400
configuration and then in iplink we

00:17:13,360 --> 00:17:16,839
would

00:17:14,400 --> 00:17:19,679
allow change the user interface to allow

00:17:16,839 --> 00:17:20,559
a hex value in addition to the strings

00:17:19,679 --> 00:17:23,760
today

00:17:20,559 --> 00:17:23,760
that we have for on or off

00:17:27,520 --> 00:17:30,960
so for follow up by the time this

00:17:29,280 --> 00:17:32,400
presentation airs the patches will have

00:17:30,960 --> 00:17:34,480
been submitted uh

00:17:32,400 --> 00:17:37,120
to the colonel uh they're submitted rfc

00:17:34,480 --> 00:17:39,039
so that we can discuss the generic flags

00:17:37,120 --> 00:17:40,720
i hope and encourage all of you to to

00:17:39,039 --> 00:17:44,160
participate in the discussion in that so

00:17:40,720 --> 00:17:44,160
that we can get that resolved and

00:17:44,799 --> 00:17:48,160
that's all thank you for listening and

00:17:47,120 --> 00:17:51,360
we'll open it now

00:17:48,160 --> 00:17:51,360
for a q a

00:17:54,000 --> 00:17:58,640
um so okay so there's a couple of

00:17:57,919 --> 00:18:01,600
questions

00:17:58,640 --> 00:18:03,280
but i'll do my overarching question

00:18:01,600 --> 00:18:06,559
first and then we'll get to that

00:18:03,280 --> 00:18:07,360
um so the the high order bit seems to be

00:18:06,559 --> 00:18:10,160
that you're going to do

00:18:07,360 --> 00:18:11,840
trust enablement and then effectively

00:18:10,160 --> 00:18:12,320
create a direct relationship between the

00:18:11,840 --> 00:18:14,799
vm

00:18:12,320 --> 00:18:15,679
and the vf that it is it is trying to

00:18:14,799 --> 00:18:19,120
manage

00:18:15,679 --> 00:18:19,679
i had a very random basic question why

00:18:19,120 --> 00:18:21,919
isn't

00:18:19,679 --> 00:18:23,520
all the configuration state just a page

00:18:21,919 --> 00:18:25,919
that's mapped into the hypervisor

00:18:23,520 --> 00:18:27,280
you try to change configuration take a

00:18:25,919 --> 00:18:28,559
fault into the hypervisor and then the

00:18:27,280 --> 00:18:30,480
hypervisor has

00:18:28,559 --> 00:18:32,640
the ability to sort of resolve whether

00:18:30,480 --> 00:18:34,160
the vm has the access control it needs

00:18:32,640 --> 00:18:35,919
or the vf can

00:18:34,160 --> 00:18:39,200
support it and you can actually do that

00:18:35,919 --> 00:18:43,280
through a pf even right at that point

00:18:39,200 --> 00:18:43,840
um so yeah there is there is higher

00:18:43,280 --> 00:18:46,320
level

00:18:43,840 --> 00:18:47,440
uh security type grouping and and

00:18:46,320 --> 00:18:48,880
privileges but uh

00:18:47,440 --> 00:18:50,720
these things still to get actually

00:18:48,880 --> 00:18:51,280
configured in the device have to go

00:18:50,720 --> 00:18:54,480
through this

00:18:51,280 --> 00:18:56,400
uh uh this interface

00:18:54,480 --> 00:18:57,600
okay so you're you're focusing on the

00:18:56,400 --> 00:19:00,000
very narrow like

00:18:57,600 --> 00:19:00,640
i have to tell the vf vf driver and i

00:19:00,000 --> 00:19:03,200
guess the

00:19:00,640 --> 00:19:05,679
ipc between the driver and the device to

00:19:03,200 --> 00:19:08,400
go enable some things okay

00:19:05,679 --> 00:19:11,840
that answers my question completely uh

00:19:08,400 --> 00:19:11,840
question from

00:19:12,799 --> 00:19:16,880
ah could you clarify what no user space

00:19:14,880 --> 00:19:18,240
changes means it seems like user space

00:19:16,880 --> 00:19:20,880
extension in the host

00:19:18,240 --> 00:19:22,640
is necessary to set the flags yes so

00:19:20,880 --> 00:19:23,919
there's extensions and additions

00:19:22,640 --> 00:19:25,120
um so i shouldn't have said no user

00:19:23,919 --> 00:19:26,960
space changes what i meant is the user

00:19:25,120 --> 00:19:30,480
space abi has not changed

00:19:26,960 --> 00:19:33,520
um and we would convert the the trust

00:19:30,480 --> 00:19:34,640
the trusted setting today uh to be the

00:19:33,520 --> 00:19:36,720
trust flags

00:19:34,640 --> 00:19:38,000
in an all or nothing mode for legacy and

00:19:36,720 --> 00:19:41,840
that needs to be worked out a bit

00:19:38,000 --> 00:19:44,799
on the on the implementation so

00:19:41,840 --> 00:19:46,000
i expect some discussion and and uh and

00:19:44,799 --> 00:19:48,799
interaction on that

00:19:46,000 --> 00:19:50,320
hopefully um and i see your point go

00:19:48,799 --> 00:19:52,080
ahead

00:19:50,320 --> 00:19:53,360
if you want to go through the rest yeah

00:19:52,080 --> 00:19:55,039
yeah make sense uh

00:19:53,360 --> 00:19:56,880
well most of the rest was amazing

00:19:55,039 --> 00:19:59,679
presentation clear presentation

00:19:56,880 --> 00:20:00,640
looks good well articulated none of them

00:19:59,679 --> 00:20:03,919
were questions

00:20:00,640 --> 00:20:06,000
um i had a comment which is uh yeah

00:20:03,919 --> 00:20:08,000
i think rss to the vm is absolutely

00:20:06,000 --> 00:20:10,080
required even rfs and

00:20:08,000 --> 00:20:11,840
things like that so basically anywhere

00:20:10,080 --> 00:20:13,520
where there's an ndo the way i would say

00:20:11,840 --> 00:20:14,799
it is if anywhere where there's a driver

00:20:13,520 --> 00:20:16,640
ndo

00:20:14,799 --> 00:20:20,159
potentially something a vm will want to

00:20:16,640 --> 00:20:21,600
do to the vf itself right because that's

00:20:20,159 --> 00:20:23,200
the kind of thing that

00:20:21,600 --> 00:20:25,679
a particular vm might want and

00:20:23,200 --> 00:20:27,840
specifically things like rss and rfs

00:20:25,679 --> 00:20:30,000
since it spans only the queues that were

00:20:27,840 --> 00:20:33,120
assigned to that vf

00:20:30,000 --> 00:20:35,440
yes they can make sense out right

00:20:33,120 --> 00:20:36,799
we we i started with just a uh internal

00:20:35,440 --> 00:20:37,840
discussion on what are we getting asked

00:20:36,799 --> 00:20:39,760
for what are the things that we get

00:20:37,840 --> 00:20:41,200
asked for and and certainly i i realize

00:20:39,760 --> 00:20:42,559
that it can be extended

00:20:41,200 --> 00:20:44,480
and that's i just started with what we

00:20:42,559 --> 00:20:44,960
had and and absolutely we need to add

00:20:44,480 --> 00:20:46,400
more

00:20:44,960 --> 00:20:48,640
um thank you that's good that's good

00:20:46,400 --> 00:20:50,159
feedback i'll take that

00:20:48,640 --> 00:20:51,760
and then there's one more question i

00:20:50,159 --> 00:20:55,440
think

00:20:51,760 --> 00:20:59,840
um about the existing trust flags uh

00:20:55,440 --> 00:20:59,840
yes um that that that would be the idea

00:21:01,120 --> 00:21:08,080
yep i think that's it any

00:21:04,720 --> 00:21:11,200
any questions any more comments

00:21:08,080 --> 00:21:12,320
i i have a question carolyn so uh in

00:21:11,200 --> 00:21:14,640
regards to

00:21:12,320 --> 00:21:16,000
smartnix right so i i've heard of this

00:21:14,640 --> 00:21:17,760
trend where

00:21:16,000 --> 00:21:19,760
and shannon is saying something there so

00:21:17,760 --> 00:21:21,200
he may be able i was just reading up

00:21:19,760 --> 00:21:22,400
with bensando yesterday for the first

00:21:21,200 --> 00:21:24,480
time

00:21:22,400 --> 00:21:25,679
super sundo apparently or people like

00:21:24,480 --> 00:21:28,159
ben sandor are doing a lot of

00:21:25,679 --> 00:21:28,480
attestation in the smart nick as opposed

00:21:28,159 --> 00:21:30,480
to

00:21:28,480 --> 00:21:31,760
trusting what's going to the host is

00:21:30,480 --> 00:21:34,240
this another way to solve the same

00:21:31,760 --> 00:21:36,080
problem or

00:21:34,240 --> 00:21:37,840
um i'm not sure exactly of how that's

00:21:36,080 --> 00:21:41,520
working with pensando so

00:21:37,840 --> 00:21:44,960
um smart mix in general if you can use

00:21:41,520 --> 00:21:47,840
some of these features by adding the

00:21:44,960 --> 00:21:48,640
trust uh control in the smart mic as

00:21:47,840 --> 00:21:52,720
opposed to

00:21:48,640 --> 00:21:54,480
exposing you know vfs unchanged

00:21:52,720 --> 00:21:56,000
uh yeah possibly i mean i think the

00:21:54,480 --> 00:21:56,640
trust concept itself needs to be

00:21:56,000 --> 00:21:59,600
addressed

00:21:56,640 --> 00:22:00,799
in smartnix in some way um i'm like i

00:21:59,600 --> 00:22:02,000
said i'm not sure of the pensando

00:22:00,799 --> 00:22:05,760
implementation

00:22:02,000 --> 00:22:07,520
exactly um but uh

00:22:05,760 --> 00:22:08,960
yes i mean the answer to the question

00:22:07,520 --> 00:22:10,400
the question is yes this is specifically

00:22:08,960 --> 00:22:12,960
proposed for sriv

00:22:10,400 --> 00:22:14,480
um and i'm not sure how sriov fits

00:22:12,960 --> 00:22:16,320
exactly into smartnix

00:22:14,480 --> 00:22:18,159
um i know s-i-o-v there's other there's

00:22:16,320 --> 00:22:19,760
other technologies coming in the future

00:22:18,159 --> 00:22:20,880
um i think the trust question and the

00:22:19,760 --> 00:22:22,000
privilege question is going to have to

00:22:20,880 --> 00:22:25,440
be answered for any of them

00:22:22,000 --> 00:22:27,200
whether it's specific to sriov or not

00:22:25,440 --> 00:22:28,960
that's right so i think i think jamal

00:22:27,200 --> 00:22:30,720
the answer to your question is that

00:22:28,960 --> 00:22:32,799
sriv is the front end right it doesn't

00:22:30,720 --> 00:22:36,240
matter matter whether it's a smart maker

00:22:32,799 --> 00:22:38,480
slightly smart make or a dominic the the

00:22:36,240 --> 00:22:40,000
point here is that like let's say talk

00:22:38,480 --> 00:22:42,080
about promiscuous mode

00:22:40,000 --> 00:22:43,520
in a smart nick you could say turn it on

00:22:42,080 --> 00:22:45,039
and the smartphone might decide to not

00:22:43,520 --> 00:22:46,720
turn it on for you

00:22:45,039 --> 00:22:48,159
this is the only way you get to find out

00:22:46,720 --> 00:22:51,360
that that's what happened

00:22:48,159 --> 00:22:52,880
right yeah i also think it would be

00:22:51,360 --> 00:22:54,799
worth to

00:22:52,880 --> 00:22:56,320
add those features to the dev link with

00:22:54,799 --> 00:22:59,360
port representers right

00:22:56,320 --> 00:23:00,000
not only the ip yeah that makes sense

00:22:59,360 --> 00:23:03,520
too

00:23:00,000 --> 00:23:06,840
useful for smart thing

00:23:03,520 --> 00:23:08,000
yeah yep and there's another question

00:23:06,840 --> 00:23:11,360
from

00:23:08,000 --> 00:23:11,360
so there are more questions

00:23:12,880 --> 00:23:17,840
so yeah is there a public discussion um

00:23:16,080 --> 00:23:19,600
there can be i submitted patches

00:23:17,840 --> 00:23:23,039
yesterday for rfc

00:23:19,600 --> 00:23:23,760
um and uh i'm guess i'm not sure exactly

00:23:23,039 --> 00:23:25,840
how to uh

00:23:23,760 --> 00:23:26,960
enable a public discussion in another

00:23:25,840 --> 00:23:30,720
way but um

00:23:26,960 --> 00:23:32,400
yes we can do that uh and uh how does a

00:23:30,720 --> 00:23:34,480
shannon has how does a config vf use

00:23:32,400 --> 00:23:35,840
this on other vfs um

00:23:34,480 --> 00:23:38,400
yeah that has to be enabled in the

00:23:35,840 --> 00:23:40,720
device um the idea would be

00:23:38,400 --> 00:23:42,000
that um the special config vf would have

00:23:40,720 --> 00:23:44,960
a privilege just for that and you

00:23:42,000 --> 00:23:47,120
wouldn't have that in other vs

00:23:44,960 --> 00:23:49,360
this is uh there's certain telcos that

00:23:47,120 --> 00:23:50,559
have this uh sort of configuration model

00:23:49,360 --> 00:23:52,640
i think it's supported today and some

00:23:50,559 --> 00:23:56,159
out of tree drivers

00:23:52,640 --> 00:23:58,320
so thanks jake for posting the link to

00:23:56,159 --> 00:24:00,640
the patch

00:23:58,320 --> 00:24:01,360
fetches i just sent a couple it was a

00:24:00,640 --> 00:24:03,200
it's a

00:24:01,360 --> 00:24:04,960
rfc just to discuss the initial defines

00:24:03,200 --> 00:24:06,400
and uh just an example implementation

00:24:04,960 --> 00:24:09,039
there's some a lot of it that's not

00:24:06,400 --> 00:24:09,919
detailed yet um and i of course plan to

00:24:09,039 --> 00:24:13,360
do all that um

00:24:09,919 --> 00:24:16,240
in the full set register space

00:24:13,360 --> 00:24:17,919
there yeah so uh in sriv a limited set

00:24:16,240 --> 00:24:19,679
of register spaces do get replicated for

00:24:17,919 --> 00:24:22,640
a vf

00:24:19,679 --> 00:24:23,440
so uh over yeah an sri vf driver does

00:24:22,640 --> 00:24:25,039
have access

00:24:23,440 --> 00:24:27,840
to some registers the registers that are

00:24:25,039 --> 00:24:27,840
allocated to it

00:24:28,000 --> 00:24:31,919
but that's a design choice doesn't

00:24:30,240 --> 00:24:33,600
actually dictate anything about

00:24:31,919 --> 00:24:34,960
registered replication and that's up to

00:24:33,600 --> 00:24:36,880
your device

00:24:34,960 --> 00:24:38,400
the question yeah and the question about

00:24:36,880 --> 00:24:39,520
rss would be about whether you can

00:24:38,400 --> 00:24:41,840
configure it in your

00:24:39,520 --> 00:24:43,360
uh as a vf or not not whether you have

00:24:41,840 --> 00:24:44,559
it or not you definitely have it

00:24:43,360 --> 00:24:46,720
it's just whether you could change the

00:24:44,559 --> 00:24:49,760
configuration of it yeah

00:24:46,720 --> 00:24:50,799
for example some of our hardware has rss

00:24:49,760 --> 00:24:52,960
that where the

00:24:50,799 --> 00:24:54,799
like the older hardware always had rss

00:24:52,960 --> 00:24:56,480
exposed and newer hardware has it as

00:24:54,799 --> 00:25:01,840
something you have to communicate with

00:24:56,480 --> 00:25:01,840
with the pf to do so that's changed

00:25:06,159 --> 00:25:08,559
okay

00:25:09,600 --> 00:25:13,919

YouTube URL: https://www.youtube.com/watch?v=kMzOSPIQKmE


