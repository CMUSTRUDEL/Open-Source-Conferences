Title: Netdev 1.1 - Challenges in Testing - How OpenSourceRouting tests Quagga
Publication date: 2016-03-10
Playlist: Netdev 1.1 - Day 1 - Wednesday February 10, 2016
Description: 
	Martin Winter
February 2016
Captions: 
	00:00:00,050 --> 00:00:05,160
so I want to talk here a little bit

00:00:03,419 --> 00:00:07,140
about from some of the challenging

00:00:05,160 --> 00:00:09,450
testing it's not a specific about the

00:00:07,140 --> 00:00:12,240
quagga project it's more about testing

00:00:09,450 --> 00:00:14,370
in general as I assume most of you are

00:00:12,240 --> 00:00:16,500
more into coding and sometimes may be

00:00:14,370 --> 00:00:23,010
completely unaware what it takes on the

00:00:16,500 --> 00:00:24,449
testing side just a click into open

00:00:23,010 --> 00:00:26,699
source our thing that's what I work on

00:00:24,449 --> 00:00:29,130
is a project of net death that's net

00:00:26,699 --> 00:00:32,790
that if F not be fair we like this

00:00:29,130 --> 00:00:35,130
convent which is network device vacation

00:00:32,790 --> 00:00:38,550
foundation we are a non-profit in the

00:00:35,130 --> 00:00:40,860
california-based them my name is Martin

00:00:38,550 --> 00:00:44,969
winter I'm one of the cofounders of net

00:00:40,860 --> 00:00:47,010
death I baney focus on testing in quokka

00:00:44,969 --> 00:00:50,070
and I mainly do that because obviously

00:00:47,010 --> 00:00:52,289
nobody else wants new testing I used to

00:00:50,070 --> 00:00:53,850
work for a large is be long time back I

00:00:52,289 --> 00:00:56,129
always complained to the equipment

00:00:53,850 --> 00:00:59,100
vendor how does stuff is broken it never

00:00:56,129 --> 00:01:00,960
worked then the high of me I complained

00:00:59,100 --> 00:01:05,070
there too many times they're nearly died

00:01:00,960 --> 00:01:07,950
of me then I placed in other places but

00:01:05,070 --> 00:01:10,680
the general testing is a horrible job as

00:01:07,950 --> 00:01:13,260
an employee because most people they

00:01:10,680 --> 00:01:15,479
blame you for like holdups and breaking

00:01:13,260 --> 00:01:17,610
things and you never a good person that

00:01:15,479 --> 00:01:20,250
a lot boys always a good person Chandler

00:01:17,610 --> 00:01:22,049
the tester is the bad one it's much

00:01:20,250 --> 00:01:24,119
better on open source I have to say and

00:01:22,049 --> 00:01:25,710
I really appreciate the open source

00:01:24,119 --> 00:01:29,490
community which are normally much more

00:01:25,710 --> 00:01:31,380
open and listening mistakes just a click

00:01:29,490 --> 00:01:33,810
into over the ones who don't know what

00:01:31,380 --> 00:01:37,920
clog is not that relevant because I'm

00:01:33,810 --> 00:01:40,619
just using as an example Parker is a

00:01:37,920 --> 00:01:42,299
routing stack up there that's the

00:01:40,619 --> 00:01:45,299
picture of a Calaca if you have never

00:01:42,299 --> 00:01:48,710
seen it's bourchek named avonex after an

00:01:45,299 --> 00:01:52,350
extinct animal it's a great name scheme

00:01:48,710 --> 00:01:56,219
so it's a routing protocols it Benji

00:01:52,350 --> 00:01:59,100
ospf ASI es bgp pim and stuff there and

00:01:56,219 --> 00:02:01,310
it also runs all multiple platforms it's

00:01:59,100 --> 00:02:04,320
not just a Linux for checked it runs on

00:02:01,310 --> 00:02:07,770
various BS des and even solaris and

00:02:04,320 --> 00:02:10,229
probably a few other things it's used on

00:02:07,770 --> 00:02:12,280
very low end platforms to form like

00:02:10,229 --> 00:02:15,160
which is interesting also a testing and

00:02:12,280 --> 00:02:18,580
optimization with it runs on very low

00:02:15,160 --> 00:02:21,730
and things I've open WT small boxes to

00:02:18,580 --> 00:02:26,110
like high-end sdn cloud boxes virtual

00:02:21,730 --> 00:02:28,450
things and even distributor routers it

00:02:26,110 --> 00:02:30,459
originally came from zebra it was like

00:02:28,450 --> 00:02:33,160
 off when g-power started to be

00:02:30,459 --> 00:02:35,069
closed so austere it was off at

00:02:33,160 --> 00:02:37,780
that time it's on the cheap ple tube

00:02:35,069 --> 00:02:39,489
it's also a true community board checked

00:02:37,780 --> 00:02:42,310
in the sense that there isn't really an

00:02:39,489 --> 00:02:44,980
organization behind who controls or has

00:02:42,310 --> 00:02:48,010
a final say it's basically spread out

00:02:44,980 --> 00:02:52,330
across smooth organization coordinated

00:02:48,010 --> 00:02:54,459
to mailing lists now so just give a

00:02:52,330 --> 00:02:56,680
quick background before I go in because

00:02:54,459 --> 00:02:59,620
you're wondering many times by is it

00:02:56,680 --> 00:03:02,410
done so complicated now obviously a few

00:02:59,620 --> 00:03:05,709
drawbacks when I do the testing which I

00:03:02,410 --> 00:03:07,450
can't really control so that I say it's

00:03:05,709 --> 00:03:08,860
a true community poor check that isn't

00:03:07,450 --> 00:03:11,769
really a clear owner that isn't a

00:03:08,860 --> 00:03:13,870
company uses like we do it this way or

00:03:11,769 --> 00:03:17,049
we change that thing it's all discussed

00:03:13,870 --> 00:03:20,170
go meaningless wave sometimes quite slow

00:03:17,049 --> 00:03:22,320
unlike how to do things there is also

00:03:20,170 --> 00:03:25,570
quite simple gate model there is like

00:03:22,320 --> 00:03:28,450
main sources on the runner which is one

00:03:25,570 --> 00:03:30,970
of the public get hostess there it's

00:03:28,450 --> 00:03:33,489
mostly a single master branch with a few

00:03:30,970 --> 00:03:35,470
branches sometimes now every few months

00:03:33,489 --> 00:03:38,470
with the commits coming in from

00:03:35,470 --> 00:03:41,170
development things and also quite

00:03:38,470 --> 00:03:43,480
essential the submissions are based by

00:03:41,170 --> 00:03:46,150
emails these days they're discussions

00:03:43,480 --> 00:03:48,820
about doing liftgate mergers and other

00:03:46,150 --> 00:03:51,370
things but do they it's mainly people

00:03:48,820 --> 00:03:54,130
fix something they sent that patch of

00:03:51,370 --> 00:03:55,540
the mailing list and the whole code

00:03:54,130 --> 00:03:57,280
review and discussions are on the

00:03:55,540 --> 00:04:00,220
mailing list based on these emails as

00:03:57,280 --> 00:04:02,650
emissions though these are basically the

00:04:00,220 --> 00:04:05,890
things I have to work with to start

00:04:02,650 --> 00:04:07,600
testing now obviously these days

00:04:05,890 --> 00:04:10,450
everyone talks about continuous

00:04:07,600 --> 00:04:13,209
integration and the test bed and all

00:04:10,450 --> 00:04:15,640
these fancy tools and tons more they are

00:04:13,209 --> 00:04:17,530
like Jenkins very famous there are tons

00:04:15,640 --> 00:04:19,900
of other ones hosted and everyone has

00:04:17,530 --> 00:04:22,900
this great tools and we have the perfect

00:04:19,900 --> 00:04:26,090
system I learned one thing very fast

00:04:22,900 --> 00:04:29,510
they all assume your your project is

00:04:26,090 --> 00:04:33,470
linux and you can run a java client on

00:04:29,510 --> 00:04:35,900
all the executor things but purely linux

00:04:33,470 --> 00:04:38,630
and java basically that basic means is

00:04:35,900 --> 00:04:41,419
not very cross platform yes i was

00:04:38,630 --> 00:04:44,419
looking at it jenkins and atlassian

00:04:41,419 --> 00:04:46,870
bamboo attested a lot there the java

00:04:44,419 --> 00:04:50,300
client isn't really that multi platform

00:04:46,870 --> 00:04:54,139
that is basically running it on things

00:04:50,300 --> 00:04:56,150
like a net bsd and other places is

00:04:54,139 --> 00:04:59,350
sometimes not that easy or not possible

00:04:56,150 --> 00:05:02,110
at all stability is another issue

00:04:59,350 --> 00:05:04,729
Jenkins I really like it has really cool

00:05:02,110 --> 00:05:07,040
amazing features way more reach than

00:05:04,729 --> 00:05:08,690
some of the other things except I

00:05:07,040 --> 00:05:11,360
couldn't find the single version which

00:05:08,690 --> 00:05:12,950
actually worked they are really good on

00:05:11,360 --> 00:05:15,710
fixing bugs as well I have to say

00:05:12,950 --> 00:05:17,840
because every bug I found I found the

00:05:15,710 --> 00:05:19,639
next version or the previous versions

00:05:17,840 --> 00:05:23,539
didn't hurt that bug but it had a

00:05:19,639 --> 00:05:25,340
different book so and at that time I was

00:05:23,539 --> 00:05:27,620
wondering like well I probably shouldn't

00:05:25,340 --> 00:05:29,930
spend all my time on Jenkins because

00:05:27,620 --> 00:05:31,729
obviously I have to work do some of the

00:05:29,930 --> 00:05:34,220
real project on it the one I'm testing

00:05:31,729 --> 00:05:36,950
it so I ended up with a blessing bamboo

00:05:34,220 --> 00:05:39,320
which is health closed source I mean

00:05:36,950 --> 00:05:42,979
they do open to us and they're also free

00:05:39,320 --> 00:05:46,639
for nonprofit discussion over schemes

00:05:42,979 --> 00:05:48,440
about hosting things doesn't work that

00:05:46,639 --> 00:05:51,050
easy for me because a lot of things

00:05:48,440 --> 00:05:53,720
which are go later in requires dedicated

00:05:51,050 --> 00:05:55,970
test the hardware so a lot of my testing

00:05:53,720 --> 00:05:58,669
isn't just pure software it takes

00:05:55,970 --> 00:06:01,250
complete topology simulated and bring up

00:05:58,669 --> 00:06:03,530
the beef testing equipment there are

00:06:01,250 --> 00:06:05,660
rich also and also some of them runs a

00:06:03,530 --> 00:06:10,400
long time with some of the host at once

00:06:05,660 --> 00:06:13,610
may not be capable to do so how does my

00:06:10,400 --> 00:06:17,660
see Iran look as a thick overview it's

00:06:13,610 --> 00:06:21,349
very simple there are some people post

00:06:17,660 --> 00:06:23,539
the patch we use a tool patchwork which

00:06:21,349 --> 00:06:26,389
you may or may not be familiar with it

00:06:23,539 --> 00:06:29,479
it's a tool which listens make monitors

00:06:26,389 --> 00:06:32,270
mailing lists it picks up then the

00:06:29,479 --> 00:06:35,810
patches and put in a database it also

00:06:32,270 --> 00:06:37,729
clever enough to notice that if there

00:06:35,810 --> 00:06:38,910
are whole series based on the subject a

00:06:37,729 --> 00:06:41,160
little bit that you

00:06:38,910 --> 00:06:46,110
can I guess on it if not a single pipe

00:06:41,160 --> 00:06:48,330
suit but the series so I go picked it

00:06:46,110 --> 00:06:50,610
out and try to apply just against the

00:06:48,330 --> 00:06:53,580
last master because I'm mating this

00:06:50,610 --> 00:06:55,940
nobody tells me against what the patches

00:06:53,580 --> 00:06:58,620
so I just have to guess unfortunately I

00:06:55,940 --> 00:07:02,220
have to say in about thirty percent of

00:06:58,620 --> 00:07:05,670
the cases that's the wrong gasps and it

00:07:02,220 --> 00:07:07,140
just file available I on the other side

00:07:05,670 --> 00:07:09,000
have to say that's fine by me because

00:07:07,140 --> 00:07:10,920
people will know immediately it's broken

00:07:09,000 --> 00:07:14,640
and they probably submitted again or

00:07:10,920 --> 00:07:17,550
they will mention it then after that

00:07:14,640 --> 00:07:19,020
simple thing rage as a show at the

00:07:17,550 --> 00:07:20,550
bottom a little bit how long it takes

00:07:19,020 --> 00:07:22,680
it's about two minutes on a single

00:07:20,550 --> 00:07:25,170
virtual machine just applying and with

00:07:22,680 --> 00:07:26,850
packaging it then I send it out to all

00:07:25,170 --> 00:07:29,460
the different devices which are more

00:07:26,850 --> 00:07:33,450
running case you know cannot read it i'm

00:07:29,460 --> 00:07:35,960
currently testing it on ubuntu 1204 1404

00:07:33,450 --> 00:07:41,400
center six center seven debian eight

00:07:35,960 --> 00:07:45,090
freebsd 83 bsd 93 bc-10 net PSD six next

00:07:41,400 --> 00:07:48,570
VSD seven openbsd 58 and Abner OS which

00:07:45,090 --> 00:07:50,970
is one of the opensolaris steroids they

00:07:48,570 --> 00:07:53,250
all basically they are combined in

00:07:50,970 --> 00:07:54,900
parallel I try to go to the whole

00:07:53,250 --> 00:07:58,230
compiling see if their own in compiling

00:07:54,900 --> 00:08:00,419
mistakes one thing I learned is most

00:07:58,230 --> 00:08:03,720
people submitting patches they only play

00:08:00,419 --> 00:08:05,520
with linux most likely even only just

00:08:03,720 --> 00:08:08,610
their version of linux and it may not

00:08:05,520 --> 00:08:11,280
even work on different distribution i'm

00:08:08,610 --> 00:08:13,650
also building packages for it trying to

00:08:11,280 --> 00:08:15,750
do it there are more test packages to

00:08:13,650 --> 00:08:17,700
see how their works and like check that

00:08:15,750 --> 00:08:20,370
too and i'm running also the unit tests

00:08:17,700 --> 00:08:24,419
which are some data can you tests for

00:08:20,370 --> 00:08:27,000
like all the on all platforms that takes

00:08:24,419 --> 00:08:29,160
about another 10 minutes runs on twelve

00:08:27,000 --> 00:08:33,150
virtual machines basically one per

00:08:29,160 --> 00:08:35,760
operating system in parallel after that

00:08:33,150 --> 00:08:37,650
I'm going to find out like want to see

00:08:35,760 --> 00:08:39,990
like do the routing protocols work at

00:08:37,650 --> 00:08:42,870
all or something so I don't have the

00:08:39,990 --> 00:08:44,310
much time too much time basically to do

00:08:42,870 --> 00:08:46,590
a full check but I want to do a quick

00:08:44,310 --> 00:08:49,530
check so I'm trying to bring up each

00:08:46,590 --> 00:08:51,690
routing protocol just once see does it

00:08:49,530 --> 00:08:52,590
like work or something which are the

00:08:51,690 --> 00:08:54,990
basic tests

00:08:52,590 --> 00:08:58,770
because a that takes about managua for

00:08:54,990 --> 00:09:00,720
ipv4 or ipv6 going through a few

00:08:58,770 --> 00:09:03,180
different configurations so i configure

00:09:00,720 --> 00:09:10,680
them I on basically three four tests out

00:09:03,180 --> 00:09:12,390
of my compliance test suite I'm getting

00:09:10,680 --> 00:09:15,920
into the details on that one afterwards

00:09:12,390 --> 00:09:18,720
but does it's a good question actually

00:09:15,920 --> 00:09:25,410
but now the short answer is no it should

00:09:18,720 --> 00:09:27,930
not the I'm also running clang clang

00:09:25,410 --> 00:09:30,000
waiting for static analyzer which is a

00:09:27,930 --> 00:09:31,560
very interesting approach amateur or

00:09:30,000 --> 00:09:34,500
anyone else you said an automated

00:09:31,560 --> 00:09:35,790
because running it is simple I haven't

00:09:34,500 --> 00:09:39,570
really figured out what to do with the

00:09:35,790 --> 00:09:42,990
results I'm pushing it out as part of

00:09:39,570 --> 00:09:46,020
all the test results there but trying to

00:09:42,990 --> 00:09:47,730
go back to a classic pass/fail of

00:09:46,020 --> 00:09:52,080
scenario I haven't really figured out

00:09:47,730 --> 00:09:54,840
what to do with it it's also after this

00:09:52,080 --> 00:09:57,690
stage basic which is something about an

00:09:54,840 --> 00:09:59,580
hour 15 minutes I'm basically generating

00:09:57,690 --> 00:10:02,400
email reply back which goes to the list

00:09:59,580 --> 00:10:04,110
to the smita which basic gets back to

00:10:02,400 --> 00:10:06,030
immediately say like pack your stuff

00:10:04,110 --> 00:10:09,570
past it basic compiled and all that

00:10:06,030 --> 00:10:12,120
basic test passed or no it failed and

00:10:09,570 --> 00:10:15,300
with the summaries on it i'll go into

00:10:12,120 --> 00:10:17,010
lita two and then once I have all these

00:10:15,300 --> 00:10:19,560
things then I may go to the full

00:10:17,010 --> 00:10:22,260
compliance test I have a dotted line

00:10:19,560 --> 00:10:24,330
because that's currently manual kick off

00:10:22,260 --> 00:10:26,310
I don't run that automatic everything

00:10:24,330 --> 00:10:30,270
else runs automatic when somebody sends

00:10:26,310 --> 00:10:34,560
any a patch to the mailing list so this

00:10:30,270 --> 00:10:36,480
one takes like two days at and I require

00:10:34,560 --> 00:10:39,020
a total of forty-eight virtual machines

00:10:36,480 --> 00:10:42,650
to learn that things for two days so

00:10:39,020 --> 00:10:45,690
that's about the challenge there with

00:10:42,650 --> 00:10:48,180
now bit more details as i mentioned

00:10:45,690 --> 00:10:51,060
already check out so it's really

00:10:48,180 --> 00:10:52,950
interesting if you are project uses all

00:10:51,060 --> 00:10:54,510
liftgate and virtually quest you

00:10:52,950 --> 00:10:58,130
basically know quite easy where it

00:10:54,510 --> 00:11:01,830
applies to obviously you may still wanna

00:10:58,130 --> 00:11:03,810
push something on there it's applied

00:11:01,830 --> 00:11:05,640
that you don't want people to send

00:11:03,810 --> 00:11:07,290
patches on very old version

00:11:05,640 --> 00:11:08,910
they should it's normally better for the

00:11:07,290 --> 00:11:11,790
urchins Mick thought that he has it

00:11:08,910 --> 00:11:14,130
based on the latest like code their

00:11:11,790 --> 00:11:18,660
latest nightly or whatever this latest

00:11:14,130 --> 00:11:21,090
like master branch essam them in my case

00:11:18,660 --> 00:11:23,340
so I just pulled the latest master I say

00:11:21,090 --> 00:11:25,890
then I apply the patches I try to guess

00:11:23,340 --> 00:11:29,310
if it's a single patch or if he sent out

00:11:25,890 --> 00:11:33,720
three 1020 patches you all depend on

00:11:29,310 --> 00:11:35,340
each other most challenging a little bit

00:11:33,720 --> 00:11:37,770
i notice that most people are good

00:11:35,340 --> 00:11:40,980
enough to use the gate send email

00:11:37,770 --> 00:11:43,740
feature which all give the base say

00:11:40,980 --> 00:11:45,870
message ID and subjects like with the

00:11:43,740 --> 00:11:48,690
numbering up so i can do quite a good

00:11:45,870 --> 00:11:50,700
guess which seems to work in over ninety

00:11:48,690 --> 00:11:52,650
percent of the cases still like actually

00:11:50,700 --> 00:11:57,240
guess the whole series and apply nail

00:11:52,650 --> 00:11:59,430
chord sequence and after the patching

00:11:57,240 --> 00:12:01,560
basic I just packed it up both add some

00:11:59,430 --> 00:12:05,300
extra information on the other if like

00:12:01,560 --> 00:12:09,030
the reference there from the gate thing

00:12:05,300 --> 00:12:10,740
then packaging what I'm doing here

00:12:09,030 --> 00:12:13,080
basically i'm running that all in

00:12:10,740 --> 00:12:16,350
virtual machines which I stop and shut

00:12:13,080 --> 00:12:18,030
down on demand then that gives me the

00:12:16,350 --> 00:12:20,310
nice thing that I can base you have a

00:12:18,030 --> 00:12:22,140
snapshot where I can clean reset it at

00:12:20,310 --> 00:12:24,750
the beginning I don't worry about things

00:12:22,140 --> 00:12:26,640
corrupting or something I just before i

00:12:24,750 --> 00:12:29,010
start up but he said everything do a

00:12:26,640 --> 00:12:32,820
clean snapshot with nothing on it and

00:12:29,010 --> 00:12:34,410
then build it the next big challenge is

00:12:32,820 --> 00:12:36,840
obviously configuring it specially a

00:12:34,410 --> 00:12:40,350
project like parker has a lot of

00:12:36,840 --> 00:12:43,170
configure options I have to make guesses

00:12:40,350 --> 00:12:45,360
I try to make guests which are common

00:12:43,170 --> 00:12:48,660
but most likely maybe not the same as

00:12:45,360 --> 00:12:50,580
everyone else there's at least one

00:12:48,660 --> 00:12:52,320
company of equally to meet things they

00:12:50,580 --> 00:12:54,150
use different configure options and i

00:12:52,320 --> 00:12:59,580
know this is weekly passes in their

00:12:54,150 --> 00:13:02,490
version but it fails in mine I go to the

00:12:59,580 --> 00:13:04,350
make unit tests I have to say

00:13:02,490 --> 00:13:07,650
unfortunately assuming many other

00:13:04,350 --> 00:13:10,170
projects that are quite weak people

00:13:07,650 --> 00:13:11,700
don't seem to like the right test they

00:13:10,170 --> 00:13:14,250
don't write unit tests or anything

00:13:11,700 --> 00:13:17,370
leaders or their arm it's a small set of

00:13:14,250 --> 00:13:17,710
it unfortunately i wish that will get

00:13:17,370 --> 00:13:21,190
with

00:13:17,710 --> 00:13:23,530
mmmm and after I run the unit tests are

00:13:21,190 --> 00:13:29,920
based here on the full package in

00:13:23,530 --> 00:13:32,500
building again particle checks so I'm

00:13:29,920 --> 00:13:34,540
not sure how much of you how many of you

00:13:32,500 --> 00:13:38,500
are interacting particles but they're

00:13:34,540 --> 00:13:40,300
all based on these RFC test checks that

00:13:38,500 --> 00:13:42,550
is also obviously things you have to

00:13:40,300 --> 00:13:45,220
keep in mind rfcs or sometimes not that

00:13:42,550 --> 00:13:47,950
clearly written people disagree on how

00:13:45,220 --> 00:13:50,140
to reach them there are also sometimes

00:13:47,950 --> 00:13:52,030
there are people voting out of C and

00:13:50,140 --> 00:13:53,560
then they figured out maybe that's not

00:13:52,030 --> 00:13:56,320
the right thing is older buying an

00:13:53,560 --> 00:13:58,210
updated version which could be just a

00:13:56,320 --> 00:14:00,640
graph not even a full standard but

00:13:58,210 --> 00:14:03,310
everyone implement it or it could be a

00:14:00,640 --> 00:14:05,140
new standard which disagrees and some

00:14:03,310 --> 00:14:07,510
vehicles reverses things and then

00:14:05,140 --> 00:14:11,380
potentially need a newer version again

00:14:07,510 --> 00:14:13,990
which disagrees again so you never have

00:14:11,380 --> 00:14:16,000
all the things passing you basically do

00:14:13,990 --> 00:14:17,950
a test and you assume that some of them

00:14:16,000 --> 00:14:19,750
pass I'm looking for the history what

00:14:17,950 --> 00:14:23,550
passed and if things changes like

00:14:19,750 --> 00:14:26,080
suddenly fails that's for me a bad thing

00:14:23,550 --> 00:14:29,320
the same thing when I do with just a few

00:14:26,080 --> 00:14:31,150
selected things I just want to hear in

00:14:29,320 --> 00:14:35,230
these basic things make sure the

00:14:31,150 --> 00:14:37,300
particles come up though I'll go into

00:14:35,230 --> 00:14:39,580
detail a bit afterwards they're also the

00:14:37,300 --> 00:14:41,590
static analyzer as i said i have no idea

00:14:39,580 --> 00:14:43,870
what to do with results today if some

00:14:41,590 --> 00:14:45,640
one of you has some chest please

00:14:43,870 --> 00:14:49,060
approach me after what i would love to

00:14:45,640 --> 00:14:52,510
hear because i can run it I have this

00:14:49,060 --> 00:14:54,910
fancy like output there but how to pass

00:14:52,510 --> 00:14:57,910
it how to make that in a pass/fail and

00:14:54,910 --> 00:15:01,860
have a simple email or something back to

00:14:57,910 --> 00:15:05,170
the person who sent it I don't know it I

00:15:01,860 --> 00:15:07,060
say after that I want to send out the

00:15:05,170 --> 00:15:09,640
email click I don't want to wait days

00:15:07,060 --> 00:15:11,590
the idea is really I want if somebody

00:15:09,640 --> 00:15:14,620
sends a patch I want him to give him a

00:15:11,590 --> 00:15:17,290
feedback as fast as possible because if

00:15:14,620 --> 00:15:19,390
a broken it's most likely the best way

00:15:17,290 --> 00:15:22,960
to get fixed if he gets a big back very

00:15:19,390 --> 00:15:26,950
soon and those are obviously in the

00:15:22,960 --> 00:15:29,410
email I can't just give him the cryptic

00:15:26,950 --> 00:15:31,329
output of my test tools I have to make

00:15:29,410 --> 00:15:35,319
it a simple as space and

00:15:31,329 --> 00:15:36,999
easy to understand as possible so I've

00:15:35,319 --> 00:15:39,879
just a few quick I'm not sure you can

00:15:36,999 --> 00:15:41,799
read it about successful tests which

00:15:39,879 --> 00:15:44,319
basically just give him feedback here I

00:15:41,799 --> 00:15:46,329
tested it this is the patch a test that

00:15:44,319 --> 00:15:48,699
where it was like I'm Patrick archived

00:15:46,329 --> 00:15:51,189
at alien value can get the full

00:15:48,699 --> 00:15:53,019
information with all the details from

00:15:51,189 --> 00:15:56,589
the test run there are two until I k

00:15:53,019 --> 00:15:58,660
thank you successful it could be things

00:15:56,589 --> 00:16:01,689
where it's failed compiling i may say

00:15:58,660 --> 00:16:04,119
like hey at the patching worked but then

00:16:01,689 --> 00:16:06,309
when I tried to compile as an example it

00:16:04,119 --> 00:16:09,639
worked and all the different Linux's but

00:16:06,309 --> 00:16:13,089
on VBS d here this case basically it

00:16:09,639 --> 00:16:16,449
failed there's always it turns off if

00:16:13,089 --> 00:16:19,569
thefts they're based on be asleep again

00:16:16,449 --> 00:16:22,660
I try to extract small things make it as

00:16:19,569 --> 00:16:25,089
simple to read as possible it could be

00:16:22,660 --> 00:16:27,189
also things like whether fall bought the

00:16:25,089 --> 00:16:32,049
cost of in the out in public or didn't

00:16:27,189 --> 00:16:34,420
work he have a classic example to the

00:16:32,049 --> 00:16:37,059
average is I go into more details from

00:16:34,420 --> 00:16:39,339
the compliance test beds afterwards but

00:16:37,059 --> 00:16:41,139
I may just get back here here I didn't

00:16:39,339 --> 00:16:44,470
expect some packet so in this case is

00:16:41,139 --> 00:16:46,299
like bgp and update and the packet

00:16:44,470 --> 00:16:49,989
wasn't forwarded as it was supposed to

00:16:46,299 --> 00:16:53,139
do afterwards so if I'd ignore the

00:16:49,989 --> 00:16:57,069
update or some one else or something

00:16:53,139 --> 00:17:00,249
else went wrong so compliance check is

00:16:57,069 --> 00:17:02,619
an interesting thing I'm theory that the

00:17:00,249 --> 00:17:04,299
person who writes the code or in routing

00:17:02,619 --> 00:17:07,059
protocol shouldn't be necessary the

00:17:04,299 --> 00:17:08,980
person who writes the test because

00:17:07,059 --> 00:17:11,919
people may disagree and you want to have

00:17:08,980 --> 00:17:14,500
another opinion I talked to many other

00:17:11,919 --> 00:17:17,019
projects in the routing space and ask

00:17:14,500 --> 00:17:20,889
them what they are using and general

00:17:17,019 --> 00:17:23,289
nothing about beside clogger everyone I

00:17:20,889 --> 00:17:26,049
talked to them a test against the cisco

00:17:23,289 --> 00:17:29,380
and juniper multiple ones and against

00:17:26,049 --> 00:17:31,029
them their own code and see if they can

00:17:29,380 --> 00:17:35,110
bring a few things up and if it works

00:17:31,029 --> 00:17:37,149
that's good enough that obviously is not

00:17:35,110 --> 00:17:39,279
good enough in what I see it because you

00:17:37,149 --> 00:17:42,340
need to figure out bad status to what

00:17:39,279 --> 00:17:43,850
happens if I get bad packaged stuff if

00:17:42,340 --> 00:17:46,539
you're not pre- especially beach

00:17:43,850 --> 00:17:49,340
p HB has these issues that packets

00:17:46,539 --> 00:17:51,770
updates can be sensitive which means

00:17:49,340 --> 00:17:53,120
that even if you don't cannot pass all

00:17:51,770 --> 00:17:54,679
the details or something you are

00:17:53,120 --> 00:17:57,049
supposed to forward it basically the

00:17:54,679 --> 00:17:59,510
same update going on to the next person

00:17:57,049 --> 00:18:03,110
so you are frequently these artists in

00:17:59,510 --> 00:18:05,330
the internet where somebody sends a bad

00:18:03,110 --> 00:18:07,490
update and everyone else ignores it but

00:18:05,330 --> 00:18:10,309
just force it on and then somewhere else

00:18:07,490 --> 00:18:12,140
around the world like other routers from

00:18:10,309 --> 00:18:13,850
one vendor like break because they

00:18:12,140 --> 00:18:15,830
receive all these bad updates and they

00:18:13,850 --> 00:18:19,850
don't know how to deal with it so you

00:18:15,830 --> 00:18:23,299
have to go through the whole thing it's

00:18:19,850 --> 00:18:25,809
also sometimes not at concessions so I

00:18:23,299 --> 00:18:29,960
usually have to run it multiple times

00:18:25,809 --> 00:18:32,990
that's unfortunate there and again I say

00:18:29,960 --> 00:18:35,830
takes between 3 and 30 hours per routing

00:18:32,990 --> 00:18:39,409
protocol for my tests to run currently

00:18:35,830 --> 00:18:43,010
the nice thing on this one is also it's

00:18:39,409 --> 00:18:45,140
not just testing like compliance the

00:18:43,010 --> 00:18:47,870
testbed what I'm using is like it

00:18:45,140 --> 00:18:49,700
basically uses the CLI to configure the

00:18:47,870 --> 00:18:52,370
route of each test basic goes in

00:18:49,700 --> 00:18:54,169
configures it for a specific set up runs

00:18:52,370 --> 00:18:56,840
the test and remove the config and

00:18:54,169 --> 00:18:59,120
changes to a different configuration so

00:18:56,840 --> 00:19:01,100
I noticed that at least half of the

00:18:59,120 --> 00:19:03,020
vedas I find out congregation things

00:19:01,100 --> 00:19:04,760
because those heavy configuration

00:19:03,020 --> 00:19:07,490
changes and like going from one way to

00:19:04,760 --> 00:19:10,100
another one and I'm on purpose not

00:19:07,490 --> 00:19:13,010
restarting the demons between the tests

00:19:10,100 --> 00:19:16,190
people ask me sometimes could I parallel

00:19:13,010 --> 00:19:18,470
run in more parallel I could but I'm

00:19:16,190 --> 00:19:20,570
missing the mistakes where sometimes a

00:19:18,470 --> 00:19:23,809
state gets messed up for mum tests and

00:19:20,570 --> 00:19:27,350
impacts the test later so I decided not

00:19:23,809 --> 00:19:29,000
to do that at this time it's also

00:19:27,350 --> 00:19:32,419
another challenge especially of

00:19:29,000 --> 00:19:34,549
commercial things like how much can you

00:19:32,419 --> 00:19:37,100
share and the channel for compliance

00:19:34,549 --> 00:19:41,720
test the secret what as in claim except

00:19:37,100 --> 00:19:43,850
told me asians really is basically how

00:19:41,720 --> 00:19:46,039
they do the test so the exact protocol

00:19:43,850 --> 00:19:48,679
which for each of the compliance what

00:19:46,039 --> 00:19:51,140
they do exactly in what sequence I'm not

00:19:48,679 --> 00:19:52,820
allowed to share unfortunate big

00:19:51,140 --> 00:19:55,730
disadvantage from running commercial

00:19:52,820 --> 00:19:57,070
test feeds unfortunately there is

00:19:55,730 --> 00:19:58,899
nothing really

00:19:57,070 --> 00:20:01,000
open to us there there is a some

00:19:58,899 --> 00:20:04,750
attempts in BGP there is absolutely

00:20:01,000 --> 00:20:08,860
nothing I know of in is is or ospf for

00:20:04,750 --> 00:20:11,019
any of these other particles but I

00:20:08,860 --> 00:20:13,750
basically create some summary which

00:20:11,019 --> 00:20:16,059
gives some indication I can list which

00:20:13,750 --> 00:20:18,820
RFC book and I can give some details in

00:20:16,059 --> 00:20:21,549
there I'm also creating PDF reports

00:20:18,820 --> 00:20:25,539
which I then go and publish on more or

00:20:21,549 --> 00:20:27,429
less frequent intervals starting the

00:20:25,539 --> 00:20:28,929
essential thing if you're doing

00:20:27,429 --> 00:20:31,149
something like that I strong with your

00:20:28,929 --> 00:20:33,990
chest put all the informations

00:20:31,149 --> 00:20:36,909
everything back into database so I've an

00:20:33,990 --> 00:20:39,309
SQL database if every test runner ever

00:20:36,909 --> 00:20:41,320
run in there from the compliance with

00:20:39,309 --> 00:20:44,799
the full p caps locks and everything

00:20:41,320 --> 00:20:46,720
else there so I can go back I also have

00:20:44,799 --> 00:20:48,700
to say you have to fold information also

00:20:46,720 --> 00:20:51,370
form something classic like a cisco

00:20:48,700 --> 00:20:53,889
because things fail and sometimes you

00:20:51,370 --> 00:20:56,049
wondering what the cisco do and i can

00:20:53,889 --> 00:20:58,809
compare and see like all cisco face the

00:20:56,049 --> 00:21:00,909
same way then maybe that's something

00:20:58,809 --> 00:21:04,389
people disagree on that standard and I

00:21:00,909 --> 00:21:07,389
should not worry about it those are also

00:21:04,389 --> 00:21:10,090
lots of places men obviously other

00:21:07,389 --> 00:21:13,809
companies like Cisco are not running

00:21:10,090 --> 00:21:16,299
that well and I had faith in the

00:21:13,809 --> 00:21:18,549
comments to that people look at wagah

00:21:16,299 --> 00:21:20,710
they see my test reports and is he all

00:21:18,549 --> 00:21:23,799
these failed results and I think it's

00:21:20,710 --> 00:21:26,110
not a good quality and I can only say

00:21:23,799 --> 00:21:28,120
that there if I would publish the cisco

00:21:26,110 --> 00:21:31,600
results you wouldn't think completely

00:21:28,120 --> 00:21:33,370
different but i'm not publishing them

00:21:31,600 --> 00:21:36,159
because they don't pay me and i don't

00:21:33,370 --> 00:21:42,039
want to deal with them talking about all

00:21:36,159 --> 00:21:43,899
the issues i'm actually also from the

00:21:42,039 --> 00:21:45,490
full compliance test I'm running it

00:21:43,899 --> 00:21:47,080
basically this morning in a virtual

00:21:45,490 --> 00:21:52,120
machine i'm only running currently on

00:21:47,080 --> 00:21:54,580
the boon to right now because obviously

00:21:52,120 --> 00:21:57,129
from the amount of the 48 virtual

00:21:54,580 --> 00:22:00,070
machines are flying about 30 hours of

00:21:57,129 --> 00:22:02,529
runtime i'm a bit limited i'm currently

00:22:00,070 --> 00:22:05,230
working on having the same test on the

00:22:02,529 --> 00:22:09,220
freebsd 10 as well just so i have a

00:22:05,230 --> 00:22:10,460
complete different or worse I'm not done

00:22:09,220 --> 00:22:12,890
yet with that among but

00:22:10,460 --> 00:22:17,240
have initially runs yet as they need to

00:22:12,890 --> 00:22:21,320
go to the faders to see what that is I'm

00:22:17,240 --> 00:22:23,840
also do particle fasting which basically

00:22:21,320 --> 00:22:25,820
means this is like I'm using again a

00:22:23,840 --> 00:22:28,280
commercial appliance which knows all the

00:22:25,820 --> 00:22:30,680
particles it goes through all the pot

00:22:28,280 --> 00:22:33,380
the coalfields tries to skip fields

00:22:30,680 --> 00:22:36,290
essential ones it tries to have values

00:22:33,380 --> 00:22:37,910
which are out of range its price do all

00:22:36,290 --> 00:22:41,180
these other things that like trying to

00:22:37,910 --> 00:22:42,800
go there unfortunately run x is going

00:22:41,180 --> 00:22:44,870
into the ridiculous it's one to two

00:22:42,800 --> 00:22:47,480
weeks in case there are no issues found

00:22:44,870 --> 00:22:49,760
I have seen where it took two months of

00:22:47,480 --> 00:22:53,420
run time because it right to narrow down

00:22:49,760 --> 00:22:56,030
on some of the issues so it's a big

00:22:53,420 --> 00:22:57,740
challenge on how do what to do though

00:22:56,030 --> 00:23:01,340
i'm also not publishing the results

00:22:57,740 --> 00:23:03,770
there because i have two issues there

00:23:01,340 --> 00:23:07,130
either with all passes and they just

00:23:03,770 --> 00:23:09,500
boring do they like it all perfect or it

00:23:07,130 --> 00:23:11,600
doesn't pass and then its most like a

00:23:09,500 --> 00:23:13,520
security issue and they may not want to

00:23:11,600 --> 00:23:18,380
publish it until it's fixed and then

00:23:13,520 --> 00:23:20,110
it's born again and then at last i'm

00:23:18,380 --> 00:23:23,300
also doing some scale performance test

00:23:20,110 --> 00:23:27,050
this one I'm ready stalking still do

00:23:23,300 --> 00:23:29,390
having fully automated mainly think

00:23:27,050 --> 00:23:31,100
about that you have physical testing

00:23:29,390 --> 00:23:34,280
harder which I have like exeunt

00:23:31,100 --> 00:23:38,420
Spiritist Center they're equally I have

00:23:34,280 --> 00:23:40,490
to run with tickle and stuff there so I

00:23:38,420 --> 00:23:43,370
have random different scripting language

00:23:40,490 --> 00:23:46,130
is mixing together it takes out a

00:23:43,370 --> 00:23:47,570
mutation I'm not able to run all the

00:23:46,130 --> 00:23:49,790
things at the same time because there's

00:23:47,570 --> 00:23:52,400
so much testing hardware that I just

00:23:49,790 --> 00:23:54,680
can't afford even to run the power so I

00:23:52,400 --> 00:23:57,110
have skipped switch turn things on and

00:23:54,680 --> 00:23:59,650
off the power physical power on demand

00:23:57,110 --> 00:24:02,870
because it's always on physical machines

00:23:59,650 --> 00:24:05,030
I build complete network topologies

00:24:02,870 --> 00:24:08,480
which you can use an open flow switch in

00:24:05,030 --> 00:24:10,250
my case I'm using some cisco switches if

00:24:08,480 --> 00:24:12,740
you want to know details there because

00:24:10,250 --> 00:24:14,270
they're much cheaper I'm using some

00:24:12,740 --> 00:24:16,960
undocumented feature on some cisco

00:24:14,270 --> 00:24:20,120
switches to make them into a patch panel

00:24:16,960 --> 00:24:21,860
but again it goes down into pass/fail

00:24:20,120 --> 00:24:23,660
criteria to which I don't really know

00:24:21,860 --> 00:24:28,130
how to answer that on

00:24:23,660 --> 00:24:31,310
kalyan performance they're happy to talk

00:24:28,130 --> 00:24:33,020
about more in details them and then

00:24:31,310 --> 00:24:35,990
basically that's more or less the end of

00:24:33,020 --> 00:24:38,780
it I should have five minutes left

00:24:35,990 --> 00:24:42,170
because I was five minutes late to start

00:24:38,780 --> 00:24:44,420
so we have time a few questions but I

00:24:42,170 --> 00:24:47,480
mean the key thing is I want to give an

00:24:44,420 --> 00:24:49,190
overview how or what I'm doing it just

00:24:47,480 --> 00:24:52,070
for you to think a little bit I if

00:24:49,190 --> 00:24:55,370
you're into testing two I would love to

00:24:52,070 --> 00:24:58,730
exchange some ideas because most

00:24:55,370 --> 00:25:00,260
companies groups and stuff I approach it

00:24:58,730 --> 00:25:03,830
the answer was always we don't do

00:25:00,260 --> 00:25:06,200
anything and that's not good enough in

00:25:03,830 --> 00:25:09,440
my opinion so i would love to exchange a

00:25:06,200 --> 00:25:12,950
little bit IDs i'm very open there if

00:25:09,440 --> 00:25:14,510
you want to talk about it if discuss why

00:25:12,950 --> 00:25:17,660
i'm doing things and not the other way

00:25:14,510 --> 00:25:20,180
around I can explain that things or

00:25:17,660 --> 00:25:22,250
anything else if you want to help out if

00:25:20,180 --> 00:25:30,040
you interested on clock specifically I'm

00:25:22,250 --> 00:25:30,040
open to it yep yes actually

00:25:32,220 --> 00:25:37,240
normally so that's the two days that's

00:25:34,510 --> 00:25:39,280
the full compliance that's and not I'm

00:25:37,240 --> 00:25:41,890
not doing that all the time but yes I

00:25:39,280 --> 00:25:44,890
normally because the problem is that I

00:25:41,890 --> 00:25:46,660
can't really publish the exact because

00:25:44,890 --> 00:25:48,850
of commercial things that the exact

00:25:46,660 --> 00:25:52,750
details how it is I normally approach

00:25:48,850 --> 00:25:54,280
the person awarded so if I might if I

00:25:52,750 --> 00:25:56,980
know which committed was then it's quite

00:25:54,280 --> 00:25:59,320
easy I can poach that person if not I've

00:25:56,980 --> 00:26:02,110
worked with a few people trying to nail

00:25:59,320 --> 00:26:04,000
down I may come back and I will have my

00:26:02,110 --> 00:26:07,030
own weight and test tools and other

00:26:04,000 --> 00:26:09,850
things to simulate it and i may post it

00:26:07,030 --> 00:26:11,470
back there here with a small c program

00:26:09,850 --> 00:26:13,120
with some library here it's how they

00:26:11,470 --> 00:26:16,000
reproduce tissues where you can see the

00:26:13,120 --> 00:26:18,910
whole thing so i normally white

00:26:16,000 --> 00:26:20,980
basically a small test things around it

00:26:18,910 --> 00:26:23,820
or somehow or find out how it's done

00:26:20,980 --> 00:26:35,170
sometimes it eases configurations

00:26:23,820 --> 00:26:36,790
statements i say it may be a say like a

00:26:35,170 --> 00:26:38,890
few days later there may be a few other

00:26:36,790 --> 00:26:41,050
patches in the meantime too especially

00:26:38,890 --> 00:26:45,550
because it takes so long i cannot really

00:26:41,050 --> 00:26:47,530
automate it completely so it's something

00:26:45,550 --> 00:26:48,970
which I'm work on its seeing if there's

00:26:47,530 --> 00:26:57,430
a better way to have that fully

00:26:48,970 --> 00:27:00,340
automated or something there are some

00:26:57,430 --> 00:27:03,310
discussions but not that clear I mean if

00:27:00,340 --> 00:27:05,490
in Bolton quagga feel free to voice your

00:27:03,310 --> 00:27:09,340
opinion there I would love to i think

00:27:05,490 --> 00:27:10,960
the challenge is a little bit how the

00:27:09,340 --> 00:27:12,730
whole thing is so the initial path from

00:27:10,960 --> 00:27:16,090
the testing i think it's quite well

00:27:12,730 --> 00:27:17,860
accepted that just from anyone posting a

00:27:16,090 --> 00:27:20,980
patch and if anyone else finds a book

00:27:17,860 --> 00:27:22,900
it's basically and put and respect to

00:27:20,980 --> 00:27:24,910
the emails that be luckily there's no

00:27:22,900 --> 00:27:27,460
what people have to fix it the same

00:27:24,910 --> 00:27:30,160
thing if my automated replies say back

00:27:27,460 --> 00:27:34,480
it doesn't work people normally accept

00:27:30,160 --> 00:27:36,160
that and it doesn't go in if the full

00:27:34,480 --> 00:27:38,320
test obviously that takes a bit longer

00:27:36,160 --> 00:27:40,210
but i'm working with its that whenever

00:27:38,320 --> 00:27:42,880
like there are new releases pushed out

00:27:40,210 --> 00:27:44,130
new things some branches back collapse

00:27:42,880 --> 00:27:46,200
in the master drive

00:27:44,130 --> 00:27:51,140
you do a full test run and make sure

00:27:46,200 --> 00:27:51,140
it's clean yeah

00:27:52,800 --> 00:28:09,310
i'm using at last 10 years it stores all

00:27:58,570 --> 00:28:10,930
the test results yes yeah so yes it

00:28:09,310 --> 00:28:24,580
stores all the information to have it

00:28:10,930 --> 00:28:28,210
all down also you talk about a

00:28:24,580 --> 00:28:31,420
compliance test i would say that about i

00:28:28,210 --> 00:28:34,690
would guess around two thousand tests in

00:28:31,420 --> 00:28:36,520
there and there may be about 20 of them

00:28:34,690 --> 00:28:38,530
which are frequently like inconsistent

00:28:36,520 --> 00:28:42,700
and it's frequently it's about timing

00:28:38,530 --> 00:28:44,830
issue some of the pod coffee just rarely

00:28:42,700 --> 00:28:47,170
requires that after specific time

00:28:44,830 --> 00:28:50,020
interval something happens and Clark Oh

00:28:47,170 --> 00:28:52,360
sometimes not like wait on doing that on

00:28:50,020 --> 00:28:54,730
the right time and it may take an extra

00:28:52,360 --> 00:28:56,650
second longer or a little bit faster and

00:28:54,730 --> 00:29:03,490
it's not correct that's really some of

00:28:56,650 --> 00:29:06,490
dishes yeah it may be also obviously I'm

00:29:03,490 --> 00:29:09,310
running it on virtual machines and that

00:29:06,490 --> 00:29:10,990
might be also because my hypervisor

00:29:09,310 --> 00:29:12,700
someone's quite a bit loaded with all

00:29:10,990 --> 00:29:17,580
these virtual machines or it could be

00:29:12,700 --> 00:29:17,580
part of their some issues in that too

00:29:18,970 --> 00:29:23,510
that can be both a good thing in a bad

00:29:21,320 --> 00:29:26,600
thing because if your underlying I'm

00:29:23,510 --> 00:29:29,780
scheduling your hide buzzes overloaded

00:29:26,600 --> 00:29:40,549
Jim it may induce race conditions it

00:29:29,780 --> 00:29:43,240
actually expose the club okay yeah yeah

00:29:40,549 --> 00:29:43,240
so

00:29:43,910 --> 00:29:50,210
okay publish did you publish the scripts

00:29:47,960 --> 00:29:52,190
to get integration from patchwork

00:29:50,210 --> 00:29:54,320
Jenkins did you do you publish any of

00:29:52,190 --> 00:29:59,450
that is that are available for other

00:29:54,320 --> 00:30:01,190
projects it's basically I said like

00:29:59,450 --> 00:30:04,100
before i'm not using Jenkins amusing

00:30:01,190 --> 00:30:07,040
atlassian bamboo but all that stuff so i

00:30:04,100 --> 00:30:09,830
think that small as all public in some

00:30:07,040 --> 00:30:11,960
of our gate if you go now get server if

00:30:09,830 --> 00:30:14,270
not let me know what that's my mistake

00:30:11,960 --> 00:30:16,820
but it should be basically so matter i

00:30:14,270 --> 00:30:18,440
may not have it publicly announced at

00:30:16,820 --> 00:30:21,710
wagga days or something but it should be

00:30:18,440 --> 00:30:24,200
if you go to get dotnet def with f again

00:30:21,710 --> 00:30:27,850
not with me the other work then you

00:30:24,200 --> 00:30:27,850
should be able to find most of it there

00:30:29,770 --> 00:30:37,000

YouTube URL: https://www.youtube.com/watch?v=aACmHhhwnrU


