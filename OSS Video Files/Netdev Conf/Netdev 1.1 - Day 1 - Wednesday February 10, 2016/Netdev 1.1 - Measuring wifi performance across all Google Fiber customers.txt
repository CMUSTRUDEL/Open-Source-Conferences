Title: Netdev 1.1 - Measuring wifi performance across all Google Fiber customers
Publication date: 2016-03-10
Playlist: Netdev 1.1 - Day 1 - Wednesday February 10, 2016
Description: 
	Avery Pennarun
February 2016
Captions: 
	00:00:00,530 --> 00:00:05,970
all right so we're starting a little bit

00:00:03,899 --> 00:00:08,040
late so I'm gonna go a little bit extra

00:00:05,970 --> 00:00:09,300
fast I want to emphasize a couple things

00:00:08,040 --> 00:00:10,679
one of them is that these are my

00:00:09,300 --> 00:00:12,750
personal opinions and my employer

00:00:10,679 --> 00:00:14,610
doesn't necessarily endorse any of my

00:00:12,750 --> 00:00:18,119
personal opinions that might come up as

00:00:14,610 --> 00:00:20,010
I'm talking about these slides so just

00:00:18,119 --> 00:00:21,420
the test I imagine most people he

00:00:20,010 --> 00:00:24,510
referred of Google how many people here

00:00:21,420 --> 00:00:26,369
have heard of Google Fiber okay

00:00:24,510 --> 00:00:28,830
quite a few so we're internet provider

00:00:26,369 --> 00:00:31,410
this is the short version from PC

00:00:28,830 --> 00:00:33,180
Magazine the bar on the left is the

00:00:31,410 --> 00:00:34,440
speed of Google Fiber and the bars on

00:00:33,180 --> 00:00:38,730
the right or the speed of everybody else

00:00:34,440 --> 00:00:41,219
our bar is taller and so we spent a lot

00:00:38,730 --> 00:00:43,379
of time trying to make Wi-Fi go fast

00:00:41,219 --> 00:00:47,280
because unlike almost everybody else's

00:00:43,379 --> 00:00:48,629
ISP these days the LAN link is no longer

00:00:47,280 --> 00:00:50,879
the bottleneck so we find that our

00:00:48,629 --> 00:00:54,120
bottlenecks start migrating everywhere

00:00:50,879 --> 00:00:55,410
except the LAN link and Wi-Fi turns out

00:00:54,120 --> 00:00:57,000
to be one of our major bottlenecks

00:00:55,410 --> 00:00:58,620
people get a gigabit connection at home

00:00:57,000 --> 00:00:59,730
and want to use Wireless of course and

00:00:58,620 --> 00:01:02,609
find out that it's not a gigabit and

00:00:59,730 --> 00:01:04,799
then they complain and so there's a lot

00:01:02,609 --> 00:01:06,360
of stuff that we do to try to gather you

00:01:04,799 --> 00:01:07,580
know information about exactly where the

00:01:06,360 --> 00:01:09,990
bottlenecks might be and under what

00:01:07,580 --> 00:01:12,150
situations what might work and what

00:01:09,990 --> 00:01:15,000
might not work when we're gathering this

00:01:12,150 --> 00:01:17,400
data I just want to you know say on you

00:01:15,000 --> 00:01:19,259
know again in my own personal opinion

00:01:17,400 --> 00:01:21,509
but based on the code that we spent all

00:01:19,259 --> 00:01:25,110
this time implementing we care a lot

00:01:21,509 --> 00:01:26,670
about I have an enmity and we there's

00:01:25,110 --> 00:01:28,020
there's sort of rumors out there that

00:01:26,670 --> 00:01:30,750
Google start up the Google Fiber project

00:01:28,020 --> 00:01:32,220
to so that we'd have even more access to

00:01:30,750 --> 00:01:33,450
your personal information so we could

00:01:32,220 --> 00:01:36,090
track you around the Internet and that's

00:01:33,450 --> 00:01:38,640
really actually not true if you read our

00:01:36,090 --> 00:01:40,470
privacy policy the privacy rules for

00:01:38,640 --> 00:01:42,210
Google Fiber in some ways even stricter

00:01:40,470 --> 00:01:44,820
than the privacy rules for the rest of

00:01:42,210 --> 00:01:47,850
Google and some things that we do not

00:01:44,820 --> 00:01:49,829
track are which which endpoints on the

00:01:47,850 --> 00:01:51,570
internet you're connecting to how

00:01:49,829 --> 00:01:53,399
frequently you connect to them what

00:01:51,570 --> 00:01:55,020
their IP addresses are what the content

00:01:53,399 --> 00:01:58,409
of it is we don't do any deep packet

00:01:55,020 --> 00:02:00,000
inspection and any of that stuff and so

00:01:58,409 --> 00:02:01,469
all of this information obviously we

00:02:00,000 --> 00:02:02,010
make the Wi-Fi routers and that's that's

00:02:01,469 --> 00:02:03,780
my

00:02:02,010 --> 00:02:04,740
project and the Wi-Fi router needs to

00:02:03,780 --> 00:02:07,110
know all these things but that

00:02:04,740 --> 00:02:09,000
information never leaves the Wi-Fi

00:02:07,110 --> 00:02:10,619
router and the information that does

00:02:09,000 --> 00:02:11,790
leave because we do collect some

00:02:10,619 --> 00:02:13,710
statistics and I'm going to be showing

00:02:11,790 --> 00:02:15,600
you over the next few minutes the

00:02:13,710 --> 00:02:16,920
information that we do collect tends to

00:02:15,600 --> 00:02:18,990
be anonymized

00:02:16,920 --> 00:02:20,900
and with all the really the information

00:02:18,990 --> 00:02:23,700
we don't need for performance management

00:02:20,900 --> 00:02:25,560
remove so specifically we take out MAC

00:02:23,700 --> 00:02:27,060
addresses of stations we take out the IP

00:02:25,560 --> 00:02:30,060
addresses of the machines you're talking

00:02:27,060 --> 00:02:32,340
to we definitely don't log session

00:02:30,060 --> 00:02:34,860
lengths or packet contents or anything

00:02:32,340 --> 00:02:36,990
like that and then when people go to

00:02:34,860 --> 00:02:38,670
access that it's even more anonymized we

00:02:36,990 --> 00:02:42,450
sort of treat treat the personal data

00:02:38,670 --> 00:02:44,010
it's it's sort of like radioactive so

00:02:42,450 --> 00:02:45,510
the longer you're exposed to it the

00:02:44,010 --> 00:02:47,100
worse that is and the more you're

00:02:45,510 --> 00:02:49,220
exposed to the worst that is and if

00:02:47,100 --> 00:02:52,500
you're exposed to too much then you die

00:02:49,220 --> 00:02:54,450
so we really spend a lot of time not

00:02:52,500 --> 00:02:57,060
trying to invade your privacy while we

00:02:54,450 --> 00:02:58,590
collect the following information so

00:02:57,060 --> 00:03:01,770
what kind of information are we

00:02:58,590 --> 00:03:03,330
collecting about your Wi-Fi ah here's an

00:03:01,770 --> 00:03:05,130
example if you've ever looked at a

00:03:03,330 --> 00:03:06,300
spectrum analyzer this is an example of

00:03:05,130 --> 00:03:07,950
the Wi-Fi spectrum with some

00:03:06,300 --> 00:03:10,380
interference we have a little program

00:03:07,950 --> 00:03:13,410
that we wrote you can see in the upper

00:03:10,380 --> 00:03:14,970
right we have link to the open source

00:03:13,410 --> 00:03:17,880
versions of various tools we're making

00:03:14,970 --> 00:03:20,700
so the tool we wrote to collect spectrum

00:03:17,880 --> 00:03:22,620
analysis data from your Wi-Fi link is is

00:03:20,700 --> 00:03:24,420
linked here and the output sort of looks

00:03:22,620 --> 00:03:26,310
like it does in this slide the main

00:03:24,420 --> 00:03:29,190
thing that you can see is like the

00:03:26,310 --> 00:03:31,620
y-axis there's one per line one which is

00:03:29,190 --> 00:03:33,510
1 per 2.4 gigahertz Wi-Fi channel and

00:03:31,620 --> 00:03:36,750
then the percent of time that was spent

00:03:33,510 --> 00:03:40,290
in each of the different signal level

00:03:36,750 --> 00:03:42,840
buckets is shown across the horizontal

00:03:40,290 --> 00:03:44,580
sign so in this case it was a period of

00:03:42,840 --> 00:03:46,440
low Wi-Fi traffic so in almost all cases

00:03:44,580 --> 00:03:47,790
it was the minimum power level pocket

00:03:46,440 --> 00:03:49,320
that was that was shown but if we had

00:03:47,790 --> 00:03:51,570
interference coming from various

00:03:49,320 --> 00:03:53,670
different kinds of sources even non

00:03:51,570 --> 00:03:55,709
Wi-Fi traffic we should be able to see

00:03:53,670 --> 00:03:57,510
it on the spectrum analysis chart and

00:03:55,709 --> 00:04:02,280
our device is sort of jump off channel

00:03:57,510 --> 00:04:03,660
every now and then to see what what is

00:04:02,280 --> 00:04:04,709
going on on the other channel so they

00:04:03,660 --> 00:04:06,900
can try to make an informed decision

00:04:04,709 --> 00:04:08,489
about what channel to be on and what

00:04:06,900 --> 00:04:09,810
might be going wrong so we try to do a

00:04:08,489 --> 00:04:10,240
little bit better than just counting the

00:04:09,810 --> 00:04:12,640
number of

00:04:10,240 --> 00:04:15,670
this points in in a region to try to

00:04:12,640 --> 00:04:16,840
pick a channel but we gather there's

00:04:15,670 --> 00:04:18,610
some other stuff as well so here's a

00:04:16,840 --> 00:04:20,800
really basic bit of information it's a

00:04:18,610 --> 00:04:24,910
histogram of the number of visible

00:04:20,800 --> 00:04:28,630
access points near basically every

00:04:24,910 --> 00:04:30,130
Google Fiber customers Wi-Fi router and

00:04:28,630 --> 00:04:31,900
so you can see there's a few interesting

00:04:30,130 --> 00:04:34,090
things in this histogram one of them is

00:04:31,900 --> 00:04:36,130
that zero has a pretty large number of

00:04:34,090 --> 00:04:37,540
samples and that's not that surprising

00:04:36,130 --> 00:04:41,350
because some of our customers actually

00:04:37,540 --> 00:04:42,880
turn off their Wi-Fi one actually has a

00:04:41,350 --> 00:04:44,710
very small number of samples because

00:04:42,880 --> 00:04:46,900
basically our Wi-Fi router shows up as

00:04:44,710 --> 00:04:48,460
two different radios does it's got two

00:04:46,900 --> 00:04:50,140
point four and five keepers so it's very

00:04:48,460 --> 00:04:52,750
unlikely you will have a single radio

00:04:50,140 --> 00:04:54,130
visible and then there's two access

00:04:52,750 --> 00:04:56,650
points for the people who are lucky

00:04:54,130 --> 00:04:58,420
enough to live in isolation and then

00:04:56,650 --> 00:05:00,370
from there you have you know not very

00:04:58,420 --> 00:05:02,110
many Wi-Fi radios around the you know

00:05:00,370 --> 00:05:04,990
five to ten range that's very popular

00:05:02,110 --> 00:05:07,720
and it goes down and it goes down to you

00:05:04,990 --> 00:05:10,510
know the long tail is very very long so

00:05:07,720 --> 00:05:13,890
in my microscopic little I x-axis there

00:05:10,510 --> 00:05:16,750
the number on the far right is a hundred

00:05:13,890 --> 00:05:18,460
and there there are still people with a

00:05:16,750 --> 00:05:19,990
hundred access points within range not

00:05:18,460 --> 00:05:21,340
very many of them but but they're out

00:05:19,990 --> 00:05:23,050
there right and these are the people who

00:05:21,340 --> 00:05:25,720
probably have worse performance than

00:05:23,050 --> 00:05:27,760
some of the other people here's another

00:05:25,720 --> 00:05:32,320
really interesting chart that I think

00:05:27,760 --> 00:05:34,510
maybe nobody else in the world has this

00:05:32,320 --> 00:05:36,700
is basically just the number of or the

00:05:34,510 --> 00:05:40,060
fraction of devices there are of each

00:05:36,700 --> 00:05:41,830
type currently in the field client

00:05:40,060 --> 00:05:45,160
stations so that tall bar in the middle

00:05:41,830 --> 00:05:47,920
is one by one 802 11 n devices which are

00:05:45,160 --> 00:05:49,960
your typical low-end phone the one to

00:05:47,920 --> 00:05:53,280
its left because my x-axis is sorted

00:05:49,960 --> 00:05:56,320
alphabetically is one by one 802 11 AC

00:05:53,280 --> 00:05:58,210
that that's obviously faster than n but

00:05:56,320 --> 00:06:01,990
there's a lot fewer of them and then one

00:05:58,210 --> 00:06:05,380
by one thankfully one by one 802 11 ABG

00:06:01,990 --> 00:06:06,910
devices are very small bar so there's

00:06:05,380 --> 00:06:12,490
not very many of those left I think

00:06:06,910 --> 00:06:14,920
well right a is technically not

00:06:12,490 --> 00:06:16,360
represented there because 5 gigahertz is

00:06:14,920 --> 00:06:18,230
the red bar so there is no red in the

00:06:16,360 --> 00:06:21,140
1x1 802 11 in

00:06:18,230 --> 00:06:23,600
devices are G rather nest thermostats I

00:06:21,140 --> 00:06:25,600
believe are some of the are maybe a

00:06:23,600 --> 00:06:28,130
large number of the things in that bar

00:06:25,600 --> 00:06:30,110
and then there's quite a few two-by-two

00:06:28,130 --> 00:06:31,600
devices you see almost all of them end

00:06:30,110 --> 00:06:35,600
up supporting 5 gigahertz

00:06:31,600 --> 00:06:37,250
Vasari the AC 802 11 AC device is also

00:06:35,600 --> 00:06:39,040
almost all support 5 gigahertz although

00:06:37,250 --> 00:06:41,810
some interesting ones that are

00:06:39,040 --> 00:06:43,610
technically 802 11 AC chipsets they

00:06:41,810 --> 00:06:46,660
support the new MCS levels but they

00:06:43,610 --> 00:06:49,190
didn't bother putting in a 5 gigahertz

00:06:46,660 --> 00:06:50,540
RF transceiver which is what the small

00:06:49,190 --> 00:06:52,520
little sliver of blue at the bottom is

00:06:50,540 --> 00:06:53,630
and then 2 by 2 there's quite a few if

00:06:52,520 --> 00:06:55,730
you're wondering how many people have

00:06:53,630 --> 00:06:58,550
3x3 devices that's the teeny tiny little

00:06:55,730 --> 00:07:00,530
bar on the right so if you're buying a 3

00:06:58,550 --> 00:07:02,330
by 3 or a 4 by 4 Wi-Fi router you should

00:07:00,530 --> 00:07:03,890
be aware that there's limited benefit

00:07:02,330 --> 00:07:05,450
you're getting from from this Wi-Fi

00:07:03,890 --> 00:07:06,950
router unless you have one of those very

00:07:05,450 --> 00:07:09,860
few devices which are almost entirely

00:07:06,950 --> 00:07:12,770
MacBook Pros and we actually don't have

00:07:09,860 --> 00:07:16,730
any we've never observed in 802 11 and

00:07:12,770 --> 00:07:18,110
3x3 device so I'm not sure if I mean I

00:07:16,730 --> 00:07:19,610
imagine they must exist in labs

00:07:18,110 --> 00:07:21,110
somewhere but they don't seem to exist

00:07:19,610 --> 00:07:28,460
in actual people's computers in their

00:07:21,110 --> 00:07:30,080
holes anyway ok so here's here's another

00:07:28,460 --> 00:07:32,840
graph this one I included partly just

00:07:30,080 --> 00:07:36,350
because it looks cool but these are we

00:07:32,840 --> 00:07:38,420
have TV boxes that we distribute for our

00:07:36,350 --> 00:07:40,010
TV service and they all contain wireless

00:07:38,420 --> 00:07:42,430
chips as well and so they can actually

00:07:40,010 --> 00:07:47,000
see what the signal strength is as

00:07:42,430 --> 00:07:48,530
observed on the TV box of the original

00:07:47,000 --> 00:07:51,110
are the central access point in the home

00:07:48,530 --> 00:07:54,080
and so red is again 5 gigahertz and to

00:07:51,110 --> 00:07:56,870
end blue is sorry did I get a backwards

00:07:54,080 --> 00:08:01,030
right on this chart red is 2.4 gigahertz

00:07:56,870 --> 00:08:04,520
and blue is 5 gigahertz and the observed

00:08:01,030 --> 00:08:07,070
irises eye is on the y-axis and I've

00:08:04,520 --> 00:08:10,700
just sorted the TV boxes so each each

00:08:07,070 --> 00:08:12,710
horizontal position is 1 TV box and I've

00:08:10,700 --> 00:08:14,690
sorted them by the maximum RSSI they

00:08:12,710 --> 00:08:18,470
ever observed and the the funny little

00:08:14,690 --> 00:08:20,750
curve that sort of up in to the left is

00:08:18,470 --> 00:08:22,820
just an artifact of my weird sorting

00:08:20,750 --> 00:08:24,770
algorithm so you should ignore that but

00:08:22,820 --> 00:08:27,160
the the interesting thing is that they

00:08:24,770 --> 00:08:28,870
generally at high signal to point 4 & 5

00:08:27,160 --> 00:08:32,380
gigahertz are pretty similar and you can

00:08:28,870 --> 00:08:34,240
see the modest but does exist effect of

00:08:32,380 --> 00:08:38,229
five gigahertz decaying a little bit

00:08:34,240 --> 00:08:40,630
faster with with distance and with with

00:08:38,229 --> 00:08:42,729
as it goes through walls and so you see

00:08:40,630 --> 00:08:44,440
the 2.4 doesn't go down as fast as the 5

00:08:42,729 --> 00:08:45,910
gigahertz does and then toward the end

00:08:44,440 --> 00:08:50,380
you can see it drops off a lot more

00:08:45,910 --> 00:08:52,390
quickly we can also we have to we have

00:08:50,380 --> 00:08:54,130
multiple different variants of our

00:08:52,390 --> 00:08:57,520
access point hardware so we can actually

00:08:54,130 --> 00:08:59,230
see using this information the relative

00:08:57,520 --> 00:09:01,300
signal strength we basically measure the

00:08:59,230 --> 00:09:03,130
RSSI of all the stations attached to

00:09:01,300 --> 00:09:05,080
each of these devices across the entire

00:09:03,130 --> 00:09:07,660
fleet and so we can show and we make

00:09:05,080 --> 00:09:10,360
minor hardware changes whether there's

00:09:07,660 --> 00:09:12,850
an improvement or a reduction in overall

00:09:10,360 --> 00:09:14,350
signal strength and so the redline in

00:09:12,850 --> 00:09:16,150
this case this is a cumulative

00:09:14,350 --> 00:09:19,540
distribution function with our SSI on

00:09:16,150 --> 00:09:22,630
the x-axis and so to the right is better

00:09:19,540 --> 00:09:23,860
and so the red router has slightly

00:09:22,630 --> 00:09:25,510
higher signal strength and it turns out

00:09:23,860 --> 00:09:27,040
in this case it's 3 DB higher signal

00:09:25,510 --> 00:09:30,750
strength for a reason that turned out to

00:09:27,040 --> 00:09:34,300
have some sort of hardware explanation

00:09:30,750 --> 00:09:36,040
ok so that's sort of passive passively

00:09:34,300 --> 00:09:37,510
generated measurements but we also do

00:09:36,040 --> 00:09:40,000
active measurements one of the things we

00:09:37,510 --> 00:09:41,530
do in our Google Fiber android TV app

00:09:40,000 --> 00:09:43,420
has a little background task that runs

00:09:41,530 --> 00:09:45,510
and wakes up once a day and runs this

00:09:43,420 --> 00:09:48,370
little test for have 30 seconds or so

00:09:45,510 --> 00:09:49,870
which I'm sure will will make the the

00:09:48,370 --> 00:09:51,190
Android people angry that we woke up

00:09:49,870 --> 00:09:52,990
their machine in the middle of the night

00:09:51,190 --> 00:09:55,900
to waste battery for 30 seconds but we

00:09:52,990 --> 00:09:57,910
do and I so thing as a program that I

00:09:55,900 --> 00:10:02,320
wrote that can measure the transmitted

00:09:57,910 --> 00:10:03,490
receive latencies separately and the

00:10:02,320 --> 00:10:06,340
source code link gives up there if you

00:10:03,490 --> 00:10:07,930
want to see how it works so you might

00:10:06,340 --> 00:10:09,790
notice in this graph in particular we're

00:10:07,930 --> 00:10:11,830
sort of mapping the transmitted latency

00:10:09,790 --> 00:10:15,040
and the received latency unlike on the x

00:10:11,830 --> 00:10:17,380
axis and y axis respectively the latency

00:10:15,040 --> 00:10:19,360
drops below zero and some of the

00:10:17,380 --> 00:10:23,710
measurements and you see that this sort

00:10:19,360 --> 00:10:25,600
of a y equals minus X line that does

00:10:23,710 --> 00:10:27,730
drop below zero the reason for that is

00:10:25,600 --> 00:10:29,560
that the people who took my ISO ping

00:10:27,730 --> 00:10:33,120
program and translated it to Java made a

00:10:29,560 --> 00:10:35,070
little mistake in one of the

00:10:33,120 --> 00:10:36,300
packet counting code which we did fix

00:10:35,070 --> 00:10:37,470
eventually but there's still a bunch of

00:10:36,300 --> 00:10:40,589
people running the old version of the

00:10:37,470 --> 00:10:42,300
code so we have a situation where

00:10:40,589 --> 00:10:44,490
basically we can accidentally exchange

00:10:42,300 --> 00:10:46,500
100 milliseconds of transmit latency for

00:10:44,490 --> 00:10:48,990
- 100 milliseconds of receive latency or

00:10:46,500 --> 00:10:51,180
vice-versa so I didn't try to fix that

00:10:48,990 --> 00:10:52,410
but the the interesting part is the part

00:10:51,180 --> 00:10:54,060
where that didn't really happen which

00:10:52,410 --> 00:10:55,610
thankfully is generally under 100

00:10:54,060 --> 00:10:59,250
milliseconds so I've zoomed in on that

00:10:55,610 --> 00:11:04,200
and so we can see that you know typical

00:10:59,250 --> 00:11:06,150
Leighton season our Wi-Fi if you if you

00:11:04,200 --> 00:11:07,410
looked at Tim Shepards presentation

00:11:06,150 --> 00:11:10,260
earlier today we're talking about Wi-Fi

00:11:07,410 --> 00:11:12,029
Layton sees so typical latencies are

00:11:10,260 --> 00:11:14,250
actually quite low but they can be up to

00:11:12,029 --> 00:11:16,860
around 15 milliseconds is where the

00:11:14,250 --> 00:11:18,210
cluster sort of lies and then beyond

00:11:16,860 --> 00:11:20,220
that things can be all over the place

00:11:18,210 --> 00:11:21,890
and quite often the receive latency is

00:11:20,220 --> 00:11:24,870
very different from the transmit latency

00:11:21,890 --> 00:11:26,940
as you get so you can see that often

00:11:24,870 --> 00:11:29,070
transmitted receive Layton sees go up

00:11:26,940 --> 00:11:31,170
approximately the same like y equals x

00:11:29,070 --> 00:11:33,089
but there's also these samples all over

00:11:31,170 --> 00:11:34,710
the place which makes sense because you

00:11:33,089 --> 00:11:36,870
would expect that either one direction

00:11:34,710 --> 00:11:38,880
or the other is probably clogged while

00:11:36,870 --> 00:11:40,230
the other one is probably not when

00:11:38,880 --> 00:11:42,870
things are getting really clogged and so

00:11:40,230 --> 00:11:44,580
these speckles that are way off you know

00:11:42,870 --> 00:11:46,820
way above 15 milliseconds are the ones

00:11:44,580 --> 00:11:50,310
we would like to eliminate eventually

00:11:46,820 --> 00:11:51,660
here is ok so Wi-Fi blaster is another

00:11:50,310 --> 00:11:55,260
program that we wrote this one I'm

00:11:51,660 --> 00:11:57,330
actually pretty proud of the name sounds

00:11:55,260 --> 00:12:00,060
a little bit ominous but it's it

00:11:57,330 --> 00:12:01,650
basically blasts packets out the Wi-Fi

00:12:00,060 --> 00:12:03,540
interface as fast as they will go and

00:12:01,650 --> 00:12:05,190
internally our code name for this was

00:12:03,540 --> 00:12:09,029
the Gattaca test I don't know how many

00:12:05,190 --> 00:12:11,490
people here saw the movie but the the

00:12:09,029 --> 00:12:13,740
tagline is he never saved anything for

00:12:11,490 --> 00:12:15,420
the way back and so the Gattaca test

00:12:13,740 --> 00:12:16,740
only blasts all the packets as hard as

00:12:15,420 --> 00:12:18,720
it can but it doesn't expect any answers

00:12:16,740 --> 00:12:20,310
back from these packets it just takes

00:12:18,720 --> 00:12:21,870
advantage of the fact that with Wi-Fi

00:12:20,310 --> 00:12:22,440
every packet that you manage to get

00:12:21,870 --> 00:12:24,570
through

00:12:22,440 --> 00:12:25,800
does get an acknowledgment bit into

00:12:24,570 --> 00:12:27,480
batch acknowledgement that comes back

00:12:25,800 --> 00:12:29,820
eventually so you actually know unlike

00:12:27,480 --> 00:12:31,500
the wired link how many packets were

00:12:29,820 --> 00:12:33,120
actually received by the chip side at

00:12:31,500 --> 00:12:34,680
the other end and you don't care if the

00:12:33,120 --> 00:12:36,120
kernel got it necessarily all you care

00:12:34,680 --> 00:12:36,750
about is what the Wi-Fi chips have got

00:12:36,120 --> 00:12:39,420
it

00:12:36,750 --> 00:12:40,400
which we found interestingly in many

00:12:39,420 --> 00:12:43,310
cases

00:12:40,400 --> 00:12:45,050
a lot of these Wi-Fi low-power Wi-Fi

00:12:43,310 --> 00:12:47,540
devices won't even bother waking up the

00:12:45,050 --> 00:12:48,680
host CPU they just acknowledge the pack

00:12:47,540 --> 00:12:50,240
and say like I don't know we can even

00:12:48,680 --> 00:12:51,530
know what this packet is it's not even a

00:12:50,240 --> 00:12:53,450
ballot IP packet and throw it away

00:12:51,530 --> 00:12:55,730
without even using any battery on the

00:12:53,450 --> 00:12:57,800
host CPU so our access points now I'll

00:12:55,730 --> 00:13:01,700
generate these these Gattaca test

00:12:57,800 --> 00:13:04,910
packets on a regular basis and this is a

00:13:01,700 --> 00:13:07,130
really simple plot this is the blue line

00:13:04,910 --> 00:13:08,690
is 2.4 gigahertz the red line is 5

00:13:07,130 --> 00:13:10,550
gigahertz and you can see the 2.4

00:13:08,690 --> 00:13:15,050
gigahertz obviously maxes out at a

00:13:10,550 --> 00:13:16,970
particular low relatively low speed and

00:13:15,050 --> 00:13:18,500
that 5 gigahertz is going up to

00:13:16,970 --> 00:13:20,270
considerably higher speed I didn't even

00:13:18,500 --> 00:13:22,970
go to get to 100% but if you go up to

00:13:20,270 --> 00:13:25,250
700 or 800 megabits there's a few people

00:13:22,970 --> 00:13:27,020
getting those sorts of speeds but as you

00:13:25,250 --> 00:13:28,520
can see the vast majority of people get

00:13:27,020 --> 00:13:31,310
much below with the maximum possible

00:13:28,520 --> 00:13:33,200
Wi-Fi speed here's another interesting

00:13:31,310 --> 00:13:34,700
statistic we have our customers divided

00:13:33,200 --> 00:13:36,640
up into what's called single family

00:13:34,700 --> 00:13:38,720
units and multi dwelling units

00:13:36,640 --> 00:13:40,420
multi-dwelling units are like apartment

00:13:38,720 --> 00:13:45,680
buildings and single family units are

00:13:40,420 --> 00:13:47,450
homes first stand-alone houses so this

00:13:45,680 --> 00:13:48,890
plot what it means is that MV use which

00:13:47,450 --> 00:13:51,440
is the red line gets slightly better

00:13:48,890 --> 00:13:53,240
average performance than single family

00:13:51,440 --> 00:13:55,220
units which is actually kind of

00:13:53,240 --> 00:13:56,600
counterintuitive if you had asked me to

00:13:55,220 --> 00:13:57,680
make a guess I would have said it would

00:13:56,600 --> 00:13:58,880
be the other way around because in a

00:13:57,680 --> 00:14:00,650
multi dwelling unit it's a lot more

00:13:58,880 --> 00:14:04,310
crowded so you'd expect it to be a lot

00:14:00,650 --> 00:14:06,500
more activity on the on the airwaves

00:14:04,310 --> 00:14:09,020
interfering with you but it turns out

00:14:06,500 --> 00:14:10,970
that that is overwhelmed by this chart

00:14:09,020 --> 00:14:12,440
which is the signal strength in a single

00:14:10,970 --> 00:14:13,730
family versus multi dwelling unit

00:14:12,440 --> 00:14:15,410
multi-dwelling units because they're

00:14:13,730 --> 00:14:17,720
smaller it means you're usually closer

00:14:15,410 --> 00:14:20,120
to the access point and so you have

00:14:17,720 --> 00:14:23,380
several DB more signal strengths and so

00:14:20,120 --> 00:14:25,700
you end up having you end up having

00:14:23,380 --> 00:14:27,770
faster speeds because you're going out

00:14:25,700 --> 00:14:29,930
of you have a higher signal and this is

00:14:27,770 --> 00:14:31,760
a plot of what happens actually we have

00:14:29,930 --> 00:14:34,190
lots and lots of data so we can bruise a

00:14:31,760 --> 00:14:35,810
chart like this which is our SSI or

00:14:34,190 --> 00:14:39,070
signal strength on the x-axis and

00:14:35,810 --> 00:14:41,600
megabits achieved on the y-axis I know

00:14:39,070 --> 00:14:43,580
Wi-Fi hardware vendors like to like to

00:14:41,600 --> 00:14:44,810
produce charts like this in a lab and

00:14:43,580 --> 00:14:46,340
they call it the raid over range chart

00:14:44,810 --> 00:14:46,930
well this is the real world rate of

00:14:46,340 --> 00:14:49,240
arranged

00:14:46,930 --> 00:14:53,110
it doesn't quite look like it does when

00:14:49,240 --> 00:14:55,570
you do it in the lab and you can see

00:14:53,110 --> 00:14:58,720
that single family units interestingly

00:14:55,570 --> 00:15:01,149
are getting less speed at any given

00:14:58,720 --> 00:15:02,830
signal strength than multi-dwelling

00:15:01,149 --> 00:15:05,050
gated so I actually don't know why that

00:15:02,830 --> 00:15:07,870
is but it seems very consistent across

00:15:05,050 --> 00:15:09,160
thousands and thousands of homes so

00:15:07,870 --> 00:15:10,510
there's there's some reason for that I

00:15:09,160 --> 00:15:11,890
personally would have thought background

00:15:10,510 --> 00:15:13,330
difference wouldn't meet my data given

00:15:11,890 --> 00:15:15,910
signal strength you should get lower

00:15:13,330 --> 00:15:22,420
speeds here is a more detailed version

00:15:15,910 --> 00:15:24,430
of the same plot with basically this is

00:15:22,420 --> 00:15:26,470
basically one dot for every sample that

00:15:24,430 --> 00:15:28,630
we we gathered across the entire fleet

00:15:26,470 --> 00:15:29,980
over the course of the day so you can

00:15:28,630 --> 00:15:31,660
see there's a couple of interesting

00:15:29,980 --> 00:15:33,850
things there but generally the blue dots

00:15:31,660 --> 00:15:36,459
are lower than 0.4 gigahertz and there's

00:15:33,850 --> 00:15:37,990
a few little light red dots we have way

00:15:36,459 --> 00:15:39,490
up high for the number of people getting

00:15:37,990 --> 00:15:42,880
high speeds but generally you don't get

00:15:39,490 --> 00:15:44,410
very high speeds I also have a plot for

00:15:42,880 --> 00:15:45,700
how much does performance drop when you

00:15:44,410 --> 00:15:47,709
have more stations connected to an

00:15:45,700 --> 00:15:49,300
access point and this is remember in

00:15:47,709 --> 00:15:50,800
residential settings so basically the

00:15:49,300 --> 00:15:53,080
number of stations connected they're

00:15:50,800 --> 00:15:54,850
almost all idle almost all the time but

00:15:53,080 --> 00:15:56,920
you do get a statistically significant

00:15:54,850 --> 00:15:58,089
drop as the number of people connected

00:15:56,920 --> 00:16:02,410
to your access point drops you get

00:15:58,089 --> 00:16:03,610
something like a roughly 20 30 %

00:16:02,410 --> 00:16:05,290
difference as you get into like 10

00:16:03,610 --> 00:16:06,760
stations and that's probably just

00:16:05,290 --> 00:16:08,140
because it increases the probability if

00:16:06,760 --> 00:16:11,170
somebody else is downloading at the same

00:16:08,140 --> 00:16:13,709
time as you another new feature we've

00:16:11,170 --> 00:16:18,400
recently added I call Wi-Fi taxonomy

00:16:13,709 --> 00:16:19,270
which basically allows us to people like

00:16:18,400 --> 00:16:20,709
to call this sort of thing

00:16:19,270 --> 00:16:22,209
fingerprinting but Google is very

00:16:20,709 --> 00:16:23,200
sensitive about the word fingerprinting

00:16:22,209 --> 00:16:25,480
because we're often accused of

00:16:23,200 --> 00:16:28,029
fingerprinting people Wi-Fi taxonomy

00:16:25,480 --> 00:16:30,250
does not uniquely identify a person and

00:16:28,029 --> 00:16:32,230
uniquely identifies a type of device and

00:16:30,250 --> 00:16:34,360
so there's only you know roughly a

00:16:32,230 --> 00:16:36,670
thousand different types of devices in

00:16:34,360 --> 00:16:39,550
the whole Google Fiber customer fleet

00:16:36,670 --> 00:16:41,529
and we've sort of identified about 60%

00:16:39,550 --> 00:16:44,079
but we can uniquely distinguish about a

00:16:41,529 --> 00:16:45,820
thousand different device types and so

00:16:44,079 --> 00:16:47,050
once you start breaking things down by

00:16:45,820 --> 00:16:49,050
device type you could do need stuff like

00:16:47,050 --> 00:16:51,490
this so here is the same dot plot as

00:16:49,050 --> 00:16:53,410
before only filter down through a

00:16:51,490 --> 00:16:56,470
particular model of a particular type

00:16:53,410 --> 00:16:58,149
phone and you can see the the red line

00:16:56,470 --> 00:17:01,240
and the blue line are the averages for

00:16:58,149 --> 00:17:04,750
2.4 and 5 gigahertz respectively and you

00:17:01,240 --> 00:17:06,939
can see that first of all there are not

00:17:04,750 --> 00:17:10,150
very many data points in the greater

00:17:06,939 --> 00:17:12,579
than 30 or so deep minus 30 or so dB a

00:17:10,150 --> 00:17:14,289
signal and so the little gray bars

00:17:12,579 --> 00:17:16,120
around it sort of expand out and that

00:17:14,289 --> 00:17:18,309
means that these the certainty of the

00:17:16,120 --> 00:17:19,390
average is not very precise because

00:17:18,309 --> 00:17:20,919
there's not very many points there but

00:17:19,390 --> 00:17:23,350
it looks about as much about like you

00:17:20,919 --> 00:17:25,270
expect at low signal strength the speed

00:17:23,350 --> 00:17:26,319
drops eventually it's sort of Peaks and

00:17:25,270 --> 00:17:27,549
it doesn't get any better because your

00:17:26,319 --> 00:17:29,500
signal strength is good enough that

00:17:27,549 --> 00:17:31,600
that's as fast as they can be delivered

00:17:29,500 --> 00:17:36,220
and then it stays flat but on the other

00:17:31,600 --> 00:17:39,039
hand an interesting anomaly is with you

00:17:36,220 --> 00:17:40,690
look pull up chromecast's instead first

00:17:39,039 --> 00:17:42,490
of all we have a lot more data points at

00:17:40,690 --> 00:17:45,549
much higher signal strength and secondly

00:17:42,490 --> 00:17:49,539
the line curves downwards as you go as

00:17:45,549 --> 00:17:51,100
you go towards the far right and we call

00:17:49,539 --> 00:17:53,580
this the the screaming in your ear

00:17:51,100 --> 00:17:55,539
effect where basically Wi-Fi

00:17:53,580 --> 00:17:57,400
desensitizes when the signal is too high

00:17:55,539 --> 00:17:58,809
and why does chromecast have signals

00:17:57,400 --> 00:18:01,059
that are much higher than your phone

00:17:58,809 --> 00:18:02,530
it's because very often people have a

00:18:01,059 --> 00:18:04,090
cabinet and they'll put their access

00:18:02,530 --> 00:18:05,890
point in their chromecast like literally

00:18:04,090 --> 00:18:07,510
right next to each other which is

00:18:05,890 --> 00:18:09,429
actually too loud the chromecast would

00:18:07,510 --> 00:18:12,610
work better if it were further away if

00:18:09,429 --> 00:18:14,559
it was that close and a couple of years

00:18:12,610 --> 00:18:15,940
ago I saw a presentation about minstrel

00:18:14,559 --> 00:18:17,650
Blues which we're going to be testing

00:18:15,940 --> 00:18:21,429
sometime soon and that will Auto

00:18:17,650 --> 00:18:23,980
decrease the transmit power based on

00:18:21,429 --> 00:18:25,780
performance so if we do that we should

00:18:23,980 --> 00:18:27,730
be able to make this downward curve

00:18:25,780 --> 00:18:28,990
flattened out and that's one of the

00:18:27,730 --> 00:18:31,570
things our access points will hopefully

00:18:28,990 --> 00:18:34,330
be able to do better than typical access

00:18:31,570 --> 00:18:35,950
points and we'll try to get that well

00:18:34,330 --> 00:18:37,059
I'll reap be able to report back on

00:18:35,950 --> 00:18:44,110
whether that works when we run the

00:18:37,059 --> 00:18:46,299
experiment right so yeah it might need

00:18:44,110 --> 00:18:47,559
some work the comment was that sometimes

00:18:46,299 --> 00:18:50,620
aren't the code currently assumes that

00:18:47,559 --> 00:18:51,640
won't happen but but we'll we should be

00:18:50,620 --> 00:18:53,140
able to make it assume that it will

00:18:51,640 --> 00:18:53,830
happen and it actually fix this sort of

00:18:53,140 --> 00:18:55,480
problem because it's actually

00:18:53,830 --> 00:18:59,580
surprisingly common you can see there's

00:18:55,480 --> 00:18:59,580
quite a few dots in this reduce signal

00:19:00,190 --> 00:19:03,820
another problem I'll just skim over but

00:19:02,350 --> 00:19:06,460
one of the things we discovered is in

00:19:03,820 --> 00:19:09,370
fact the common advice on 2.4 gigahertz

00:19:06,460 --> 00:19:12,340
just use channels 1 6 and 11 turns out

00:19:09,370 --> 00:19:14,020
not to always be the best advice we have

00:19:12,340 --> 00:19:15,700
an actual data set from a very high

00:19:14,020 --> 00:19:18,280
density Wi-Fi environment where things

00:19:15,700 --> 00:19:20,110
were fixed by by actually using

00:19:18,280 --> 00:19:22,930
partially overlapping channels on

00:19:20,110 --> 00:19:25,840
purpose and the reason for that is

00:19:22,930 --> 00:19:29,020
interesting the reason is that you if

00:19:25,840 --> 00:19:31,570
you are doing interference detection or

00:19:29,020 --> 00:19:33,910
co-channel interference detection with

00:19:31,570 --> 00:19:35,470
Wi-Fi if you can decode the packet you

00:19:33,910 --> 00:19:37,630
consider that and the someone else to be

00:19:35,470 --> 00:19:39,100
talking if you can't be coded you only

00:19:37,630 --> 00:19:41,290
consider someone else to be talking if

00:19:39,100 --> 00:19:43,570
the RSSI is greater than like minus 62

00:19:41,290 --> 00:19:46,540
or so so there's this magic region

00:19:43,570 --> 00:19:48,670
between about minus 62 and minus 90 dB

00:19:46,540 --> 00:19:50,260
where devices will decide the top stop

00:19:48,670 --> 00:19:51,880
talking when their next-door neighbor is

00:19:50,260 --> 00:19:53,020
talking even though they don't really

00:19:51,880 --> 00:19:54,520
care what the next-door neighbor is

00:19:53,020 --> 00:19:56,020
saying and in these super high density

00:19:54,520 --> 00:19:58,030
environments you can actually improve

00:19:56,020 --> 00:19:59,800
performance by going slightly off

00:19:58,030 --> 00:20:01,210
channel so you can't detect or can't

00:19:59,800 --> 00:20:03,220
decode the other person's packet

00:20:01,210 --> 00:20:05,470
anyway this diagram tries to explain

00:20:03,220 --> 00:20:06,940
that and this diagram tries to show when

00:20:05,470 --> 00:20:08,320
we break it down by customer groups who

00:20:06,940 --> 00:20:10,690
pulled out this one apartment building

00:20:08,320 --> 00:20:13,030
that's the Green Line and we changed the

00:20:10,690 --> 00:20:15,550
channel selection algorithm and it

00:20:13,030 --> 00:20:17,830
jumped from way below average to not as

00:20:15,550 --> 00:20:19,000
far below average after making this

00:20:17,830 --> 00:20:21,190
change they were still kind of below

00:20:19,000 --> 00:20:22,360
average because it's so super high

00:20:21,190 --> 00:20:25,600
density environment if there's lots of

00:20:22,360 --> 00:20:28,080
interference here is let's see I'm

00:20:25,600 --> 00:20:31,780
getting very short on time but here is a

00:20:28,080 --> 00:20:34,270
plot of based on my formula for how fast

00:20:31,780 --> 00:20:36,280
your Wi-Fi should go the actual Wi-Fi

00:20:34,270 --> 00:20:37,390
speeds that were achieved so the x-axis

00:20:36,280 --> 00:20:39,100
is what I think you should have been

00:20:37,390 --> 00:20:41,290
able to do with your device using Wi-Fi

00:20:39,100 --> 00:20:43,180
taxonomy and the y-axis is what you

00:20:41,290 --> 00:20:46,390
actually got and each each tiny little

00:20:43,180 --> 00:20:48,700
dot is a sample of a device doing a

00:20:46,390 --> 00:20:50,530
performance test and you can see that in

00:20:48,700 --> 00:20:51,470
general for the most part devices don't

00:20:50,530 --> 00:20:52,610
do better than my

00:20:51,470 --> 00:20:54,950
Allah says they should have been able to

00:20:52,610 --> 00:20:56,409
with the exception of some devices at

00:20:54,950 --> 00:20:58,190
the low end where obviously I've

00:20:56,409 --> 00:20:59,419
miscalculated what that device should

00:20:58,190 --> 00:21:01,400
been able to do but for the most part

00:20:59,419 --> 00:21:04,460
the darkest areas are just below the

00:21:01,400 --> 00:21:06,650
green line but it's and so I sort of

00:21:04,460 --> 00:21:09,710
consider this graph to be the if our

00:21:06,650 --> 00:21:11,150
Wi-Fi was perfect all of those dots

00:21:09,710 --> 00:21:13,460
would be really close to the Green Line

00:21:11,150 --> 00:21:15,530
so obviously the implementation of Wi-Fi

00:21:13,460 --> 00:21:17,240
you know these different drivers is not

00:21:15,530 --> 00:21:18,740
perfect right now but the closer we can

00:21:17,240 --> 00:21:20,510
get to perfect of it are Ruby and we can

00:21:18,740 --> 00:21:22,789
break down this graph by taxonomy and

00:21:20,510 --> 00:21:25,039
say like iPhones seem to do better or

00:21:22,789 --> 00:21:27,080
worse in such-and-such situation here's

00:21:25,039 --> 00:21:28,220
another one where instead of using what

00:21:27,080 --> 00:21:30,740
I predicted would happen

00:21:28,220 --> 00:21:33,820
I broke each device down by taxonomy

00:21:30,740 --> 00:21:36,679
found the average speed for that device

00:21:33,820 --> 00:21:38,299
put that on the x-axis and then plotted

00:21:36,679 --> 00:21:40,010
the actual sample achieved for each

00:21:38,299 --> 00:21:42,320
device on the y-axis and you can see

00:21:40,010 --> 00:21:44,030
this one maps a lot better so Avery's

00:21:42,320 --> 00:21:46,789
calculation for what should be possible

00:21:44,030 --> 00:21:49,220
is not that good but statistics can be

00:21:46,789 --> 00:21:50,630
really useful when determining what what

00:21:49,220 --> 00:21:52,220
you actually should expect and we're

00:21:50,630 --> 00:21:54,110
using this or we're going to use this

00:21:52,220 --> 00:21:55,340
for a customer support when they phone

00:21:54,110 --> 00:21:57,770
in and say how come we're not getting

00:21:55,340 --> 00:21:59,150
gigabit Wi-Fi we can say well you're not

00:21:57,770 --> 00:22:00,890
supposed to get a gigabit Wi-Fi because

00:21:59,150 --> 00:22:02,480
that's impossible but given the type of

00:22:00,890 --> 00:22:03,919
device that you have and the signal

00:22:02,480 --> 00:22:06,320
strength that you're getting you should

00:22:03,919 --> 00:22:08,659
expect a signal strength or a transmit

00:22:06,320 --> 00:22:10,909
rate between such and such and such and

00:22:08,659 --> 00:22:13,580
such and that we're hoping will help

00:22:10,909 --> 00:22:15,710
reduce the argument arguments people

00:22:13,580 --> 00:22:18,860
have on the phone about what should and

00:22:15,710 --> 00:22:21,620
should not be possible and one more

00:22:18,860 --> 00:22:23,870
thing we have a we have a patch called

00:22:21,620 --> 00:22:26,270
ban steering that will try to tell us

00:22:23,870 --> 00:22:27,950
hostapd how to bounce people between 2.4

00:22:26,270 --> 00:22:29,090
and 5 gigahertz is a relatively simple

00:22:27,950 --> 00:22:30,919
patch that we're hoping to upstream

00:22:29,090 --> 00:22:32,780
sometime soon and this is a plot of how

00:22:30,919 --> 00:22:34,220
much better performance gets when you

00:22:32,780 --> 00:22:35,900
turn on this band steering feature as

00:22:34,220 --> 00:22:37,370
far as I know it doesn't hurt anything

00:22:35,900 --> 00:22:38,840
we filtered out Apple devices because

00:22:37,370 --> 00:22:41,659
they tend to choose the right thing on

00:22:38,840 --> 00:22:42,950
their own but for other sorts of devices

00:22:41,659 --> 00:22:45,940
there's a significant improvement in

00:22:42,950 --> 00:22:48,440
performance by turning on this patch I

00:22:45,940 --> 00:22:50,000
have another thing but one of the

00:22:48,440 --> 00:22:51,710
problems with all of these tests is if

00:22:50,000 --> 00:22:53,360
your Wi-Fi is too terrible people stop

00:22:51,710 --> 00:22:54,710
using it especially when they have

00:22:53,360 --> 00:22:56,809
phones they will just turn off their

00:22:54,710 --> 00:22:58,399
Wi-Fi and use 3G or LTE

00:22:56,809 --> 00:23:00,529
on their phones and so trying to

00:22:58,399 --> 00:23:02,960
determine when things are broken is a

00:23:00,529 --> 00:23:04,399
separate issue that has a lot of things

00:23:02,960 --> 00:23:06,710
that we can discuss but one of the

00:23:04,399 --> 00:23:08,299
things that I've noticed is if devices

00:23:06,710 --> 00:23:09,649
are constantly trying to bounce back and

00:23:08,299 --> 00:23:11,029
forth between two point four out of five

00:23:09,649 --> 00:23:13,009
gigahertz that means they're upset about

00:23:11,029 --> 00:23:14,799
something and so it's usually an

00:23:13,009 --> 00:23:17,809
indicator that something has gone wrong

00:23:14,799 --> 00:23:19,220
I won't even talk about this slide but

00:23:17,809 --> 00:23:20,749
we want to measure latency as well as

00:23:19,220 --> 00:23:22,279
bandwidth and I think we found a way to

00:23:20,749 --> 00:23:24,919
do that in a passive way that won't

00:23:22,279 --> 00:23:27,470
actually require messing around with

00:23:24,919 --> 00:23:29,919
like sending a packets on a regular

00:23:27,470 --> 00:23:32,749
basis and killing people's batteries and

00:23:29,919 --> 00:23:33,980
yeah airtime fairness is another one so

00:23:32,749 --> 00:23:36,460
we don't have time for questions I don't

00:23:33,980 --> 00:23:36,460
think we

00:23:45,270 --> 00:23:55,099
you

00:23:46,830 --> 00:23:55,099

YouTube URL: https://www.youtube.com/watch?v=yZcHbD84j5Y


