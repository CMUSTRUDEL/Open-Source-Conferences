Title: Netdev 1.1 - Reducing Latency in Linux Wireless Network Drivers
Publication date: 2016-03-10
Playlist: Netdev 1.1 - Day 1 - Wednesday February 10, 2016
Description: 
	Tim Shepard
February 2016
Captions: 
	00:00:00,290 --> 00:00:04,440
hi my name is Tim Shepherd and I've come

00:00:02,790 --> 00:00:06,270
to this conference hoping to find some

00:00:04,440 --> 00:00:08,880
other people who might be interested in

00:00:06,270 --> 00:00:11,309
working with me or helping me or giving

00:00:08,880 --> 00:00:22,710
me advice on this project I've been

00:00:11,309 --> 00:00:24,630
working on for well a while now i titled

00:00:22,710 --> 00:00:27,779
the talk reducing latency in the linux

00:00:24,630 --> 00:00:32,130
wireless network drivers the term buffer

00:00:27,779 --> 00:00:38,250
blood has been quite well known for the

00:00:32,130 --> 00:00:42,600
past few years with a fq Cadel the drive

00:00:38,250 --> 00:00:43,829
to get the latency out of the the

00:00:42,600 --> 00:00:51,660
bloating queues in the middle of the

00:00:43,829 --> 00:00:57,390
network and I've oops sorry um how do I

00:00:51,660 --> 00:01:00,329
move on there we go so several years ago

00:00:57,390 --> 00:01:03,390
things got better if you're willing to

00:01:00,329 --> 00:01:07,049
replace the cue disk in your linux with

00:01:03,390 --> 00:01:08,729
fql actually do does everybody here

00:01:07,049 --> 00:01:10,590
already familiar with the buffer blood

00:01:08,729 --> 00:01:14,880
problem who is not familiar with buffer

00:01:10,590 --> 00:01:22,170
bloat so at least one see if I can

00:01:14,880 --> 00:01:24,540
explain it concisely TCP fills the queue

00:01:22,170 --> 00:01:27,000
at the bottleneck if you have a path and

00:01:24,540 --> 00:01:28,650
there's one link on the bottom the path

00:01:27,000 --> 00:01:31,380
which is the slowest link the queue

00:01:28,650 --> 00:01:33,390
that's in front of that link the way TCP

00:01:31,380 --> 00:01:35,100
works it tends to put a packet in the

00:01:33,390 --> 00:01:38,820
network when a packet comes out of the

00:01:35,100 --> 00:01:43,409
network and TCP will tend to fill up

00:01:38,820 --> 00:01:47,009
that bottleneck and this was not a

00:01:43,409 --> 00:01:48,630
problem for perhaps several decades in

00:01:47,009 --> 00:01:51,180
the internet until people started using

00:01:48,630 --> 00:01:54,509
the internet for more interactive things

00:01:51,180 --> 00:02:00,180
and things like voice over IP where they

00:01:54,509 --> 00:02:04,049
care more about the latency and I think

00:02:00,180 --> 00:02:08,340
five six years ago a lot of attention

00:02:04,049 --> 00:02:10,739
started getting paid to the this problem

00:02:08,340 --> 00:02:11,770
of increased latency in bottleneck

00:02:10,739 --> 00:02:13,630
queues

00:02:11,770 --> 00:02:15,490
when there are people using them for

00:02:13,630 --> 00:02:19,650
bulk transferred therefore they have

00:02:15,490 --> 00:02:21,280
TCPS that are filling them up and also

00:02:19,650 --> 00:02:24,040
attempting to use them simultaneously

00:02:21,280 --> 00:02:26,470
for services where they care about the

00:02:24,040 --> 00:02:29,560
latency and one thing low lately things

00:02:26,470 --> 00:02:32,620
like voice over IP or simply any kind of

00:02:29,560 --> 00:02:34,240
interactive traffic gaming or simply web

00:02:32,620 --> 00:02:36,130
browsing where you care how fast your

00:02:34,240 --> 00:02:39,040
DNS looks lookups are happening

00:02:36,130 --> 00:02:43,420
sometimes dns lookups can take several

00:02:39,040 --> 00:02:46,690
round-trip times to complete and if your

00:02:43,420 --> 00:02:49,270
resolver is behind a link that is has

00:02:46,690 --> 00:02:52,930
been bloated up by bulk transfers but

00:02:49,270 --> 00:02:54,580
book tcp transfers if it's going to take

00:02:52,930 --> 00:02:56,170
several round trips but that round trip

00:02:54,580 --> 00:02:58,450
that might have been five or ten

00:02:56,170 --> 00:03:00,850
milliseconds has turned into a half

00:02:58,450 --> 00:03:03,130
second you suddenly find yourself with

00:03:00,850 --> 00:03:04,990
multiple second Layton sees before you

00:03:03,130 --> 00:03:09,370
even find out you can get the domain

00:03:04,990 --> 00:03:11,860
name resolution for example or any any

00:03:09,370 --> 00:03:18,910
any service where you care about the

00:03:11,860 --> 00:03:21,070
latency so van jacobson invented kodell

00:03:18,910 --> 00:03:24,090
which got a lot of attention it was sort

00:03:21,070 --> 00:03:27,100
of the first aqm that didn't require

00:03:24,090 --> 00:03:28,600
careful tuning earlier we had had

00:03:27,100 --> 00:03:31,120
something called red random early

00:03:28,600 --> 00:03:37,420
detection which attempted to drop

00:03:31,120 --> 00:03:38,830
packets to signal TCPS earlier that they

00:03:37,420 --> 00:03:40,420
need to back off so that they wouldn't

00:03:38,830 --> 00:03:42,510
completely fill up the buffer but that

00:03:40,420 --> 00:03:45,160
wasn't in Terra terribly successful

00:03:42,510 --> 00:03:47,530
Cadel was a much better option and then

00:03:45,160 --> 00:03:50,590
kodell got implemented for linux as a

00:03:47,530 --> 00:03:54,160
cue disk so you can replace it replace

00:03:50,590 --> 00:03:58,959
the default p 50 fast q desk on your

00:03:54,160 --> 00:04:00,580
linux with Cadel and then fq kodell was

00:03:58,959 --> 00:04:06,220
invented sure was developed shortly

00:04:00,580 --> 00:04:10,450
after that and besides applying the

00:04:06,220 --> 00:04:12,400
Cadel algorithm to reduce to push back

00:04:10,450 --> 00:04:14,910
on the TCPS and convince them to not

00:04:12,400 --> 00:04:17,980
keep that buffer at the bottleneck fall

00:04:14,910 --> 00:04:21,700
fq kodell hashes that flows into

00:04:17,980 --> 00:04:25,660
multiple buckets and then services the

00:04:21,700 --> 00:04:29,320
buckets round-robin so even if one tcp

00:04:25,660 --> 00:04:31,270
flow is in fact building a standing q

00:04:29,320 --> 00:04:33,640
hopefully you hash into a different

00:04:31,270 --> 00:04:35,290
bucket and you will see sort of at most

00:04:33,640 --> 00:04:40,720
one round robin perm all the floats

00:04:35,290 --> 00:04:43,720
going through that device so if you can

00:04:40,720 --> 00:04:46,740
replace there's the command if you want

00:04:43,720 --> 00:04:51,040
to do it interactively you replaced the

00:04:46,740 --> 00:04:55,870
cue disk on the bottleneck link on your

00:04:51,040 --> 00:05:00,820
path you find that the the internet

00:04:55,870 --> 00:05:08,040
seems zippier in mom Layton sees come

00:05:00,820 --> 00:05:18,100
down and and the problem was solved so

00:05:08,040 --> 00:05:22,900
lots of people thought and I thought but

00:05:18,100 --> 00:05:26,440
then there became so it started to

00:05:22,900 --> 00:05:29,170
become and more common that there were

00:05:26,440 --> 00:05:33,550
situations where the wireless link on

00:05:29,170 --> 00:05:37,180
the path was is the bottleneck and in

00:05:33,550 --> 00:05:42,040
fact my friend Andrew McGregor left his

00:05:37,180 --> 00:05:45,580
job at a in New Zealand and took a job

00:05:42,040 --> 00:05:48,940
in Sydney Australia working for google

00:05:45,580 --> 00:05:53,970
and quickly found a temporary apartment

00:05:48,940 --> 00:05:55,870
I moved in somewhere near the office I

00:05:53,970 --> 00:05:57,580
think are actually might have headed

00:05:55,870 --> 00:06:01,060
when your lease anyway he found himself

00:05:57,580 --> 00:06:02,950
in an apartment planning to get the only

00:06:01,060 --> 00:06:05,650
internet service that was available not

00:06:02,950 --> 00:06:07,270
building was dsl and so he quickly then

00:06:05,650 --> 00:06:09,070
put in once he moved in put in the order

00:06:07,270 --> 00:06:11,530
for the dsl service and they came out to

00:06:09,070 --> 00:06:13,419
install it several times and eventually

00:06:11,530 --> 00:06:14,950
told him sorry there are no more pairs

00:06:13,419 --> 00:06:17,110
left into your building we can't offer

00:06:14,950 --> 00:06:20,290
you service and he had no alternatives

00:06:17,110 --> 00:06:22,510
to get internet internet at home other

00:06:20,290 --> 00:06:25,810
than the fact that having just work

00:06:22,510 --> 00:06:27,550
taken a job for Google somebody handed

00:06:25,810 --> 00:06:30,190
them a nexus 5 which was kind of knew

00:06:27,550 --> 00:06:33,700
then and he had great high-speed LTE

00:06:30,190 --> 00:06:36,520
service on his nexus 5 and he had and he

00:06:33,700 --> 00:06:38,760
can share the Wi-Fi link he can share

00:06:36,520 --> 00:06:43,640
his LTE service to his laptop using

00:06:38,760 --> 00:06:49,290
the access point service on his nexus 5

00:06:43,640 --> 00:06:52,230
and so that and so there he was well he

00:06:49,290 --> 00:06:54,240
had come from he had been involved in

00:06:52,230 --> 00:06:55,800
some of the fq kodell work he wasn't one

00:06:54,240 --> 00:06:57,780
of the primary contributors but he had

00:06:55,800 --> 00:07:00,000
certainly been involved and talking with

00:06:57,780 --> 00:07:05,640
all the people who had made that happen

00:07:00,000 --> 00:07:09,840
and got it into sarah wort and then open

00:07:05,640 --> 00:07:11,670
Wirt and he had been an earlier adopter

00:07:09,840 --> 00:07:13,440
of configuring this a lot and so at his

00:07:11,670 --> 00:07:17,580
apartment and I believe his parents

00:07:13,440 --> 00:07:21,300
house in New Zealand they had very low

00:07:17,580 --> 00:07:22,920
latency you know everything fq kodell

00:07:21,300 --> 00:07:26,670
and all the links and they even did the

00:07:22,920 --> 00:07:29,190
hack where you can't fix the bottleneck

00:07:26,670 --> 00:07:31,650
link at your ISP that's feeding your dsl

00:07:29,190 --> 00:07:33,840
line so you actually created a smaller a

00:07:31,650 --> 00:07:36,030
slightly smaller bottle neck that's in

00:07:33,840 --> 00:07:37,260
your house so that that's where the

00:07:36,030 --> 00:07:39,420
queue will build up and then you can

00:07:37,260 --> 00:07:42,720
control it control that with fu kodell

00:07:39,420 --> 00:07:45,480
and he had very low latency internet

00:07:42,720 --> 00:07:47,460
browsing even over his dsl line New

00:07:45,480 --> 00:07:49,770
Zealand and then he moved to Australia

00:07:47,460 --> 00:07:55,140
and is down an apartment and is stuck

00:07:49,770 --> 00:07:59,370
using his phone and discovers that the

00:07:55,140 --> 00:08:02,190
wireless driver on as Nexus 5 is badly

00:07:59,370 --> 00:08:04,440
bloated now normally you wouldn't care

00:08:02,190 --> 00:08:06,480
about the wireless drivers necessarily

00:08:04,440 --> 00:08:09,530
having a buffer blow problem because

00:08:06,480 --> 00:08:13,920
it's normally not the bottleneck usually

00:08:09,530 --> 00:08:16,500
but in in that case he did and then at

00:08:13,920 --> 00:08:20,510
some point he realized he works for

00:08:16,500 --> 00:08:25,020
google now and he says well android

00:08:20,510 --> 00:08:27,720
nexus 5 is a google thing and android is

00:08:25,020 --> 00:08:29,760
a google thing you can get out he works

00:08:27,720 --> 00:08:31,860
for google he complete access to the

00:08:29,760 --> 00:08:33,510
employee directory of google he figured

00:08:31,860 --> 00:08:35,010
out who the right people were at android

00:08:33,510 --> 00:08:37,020
and says i just need to go explain to

00:08:35,010 --> 00:08:39,510
them the problem and his head was full

00:08:37,020 --> 00:08:43,520
of ideas about what needed to be done to

00:08:39,510 --> 00:08:46,170
fix this wireless buffer blow problem

00:08:43,520 --> 00:08:48,330
it's complicated but his head was full

00:08:46,170 --> 00:08:50,610
of ideas he didn't have time to work on

00:08:48,330 --> 00:08:52,200
it but he figured ah I just need to

00:08:50,610 --> 00:08:56,880
explain to the Android folks what the

00:08:52,200 --> 00:08:59,490
problem is and they'll fix it indeed he

00:08:56,880 --> 00:09:00,870
was successful he managed to get an

00:08:59,490 --> 00:09:02,610
appointment to go visit them in

00:09:00,870 --> 00:09:05,130
California he went in sat in their

00:09:02,610 --> 00:09:07,740
office for a while told them the whole

00:09:05,130 --> 00:09:09,890
story about buffer bloat told them what

00:09:07,740 --> 00:09:14,010
the problem with the wireless driver was

00:09:09,890 --> 00:09:18,090
explained it all to them and if i

00:09:14,010 --> 00:09:20,370
remember i'm told me the story quite a

00:09:18,090 --> 00:09:21,960
while ago but my memory of him telling

00:09:20,370 --> 00:09:24,780
the story so this is becoming sort of

00:09:21,960 --> 00:09:26,250
legend as the story gets retold is that

00:09:24,780 --> 00:09:28,230
they thanked him very much for

00:09:26,250 --> 00:09:30,060
explaining the problem to him he thought

00:09:28,230 --> 00:09:32,640
it was great that he had figured all

00:09:30,060 --> 00:09:36,090
this out and they were very interested

00:09:32,640 --> 00:09:38,610
in knowing when he got it fixed and when

00:09:36,090 --> 00:09:40,080
the patches were upstream so that they

00:09:38,610 --> 00:09:46,680
could pull the patches and that they

00:09:40,080 --> 00:09:48,570
would definitely do that oops he was

00:09:46,680 --> 00:09:51,090
hoping to plant the ball firmly in their

00:09:48,570 --> 00:09:59,520
court and they very firmly put it back

00:09:51,090 --> 00:10:01,940
in his court I'm sorry the right guys

00:09:59,520 --> 00:10:01,940
there

00:10:05,460 --> 00:10:12,760
well maybe he did were you there two

00:10:08,830 --> 00:10:15,610
years ago that's great I'm glad I came

00:10:12,760 --> 00:10:18,490
and told that story so I put you in

00:10:15,610 --> 00:10:21,580
touch with Andrew me and maybe me we can

00:10:18,490 --> 00:10:25,330
have a that's that's really great what's

00:10:21,580 --> 00:10:29,410
your name give me three like to find you

00:10:25,330 --> 00:10:31,210
later so he was scratching as it okay

00:10:29,410 --> 00:10:34,440
how do I find how do I get this fixed

00:10:31,210 --> 00:10:40,330
I'm not going to be able to do it so he

00:10:34,440 --> 00:10:44,020
so he eventually about I think about six

00:10:40,330 --> 00:10:45,730
months after that I was or sometime in

00:10:44,020 --> 00:10:48,970
the next half year I was actually

00:10:45,730 --> 00:10:50,260
looking for the next gig and he said hey

00:10:48,970 --> 00:10:54,520
would you be interested in working on

00:10:50,260 --> 00:10:56,410
this as like oh okay maybe so he talked

00:10:54,520 --> 00:10:59,140
me into working in this and another

00:10:56,410 --> 00:11:02,050
example of someplace that cares but it

00:10:59,140 --> 00:11:03,640
took him a while to figure out um he

00:11:02,050 --> 00:11:05,050
eventually figured out he should try to

00:11:03,640 --> 00:11:07,090
figure out how to send some of Google's

00:11:05,050 --> 00:11:11,770
money my way and he tried to figure out

00:11:07,090 --> 00:11:13,180
how to if you know Google's fund some

00:11:11,770 --> 00:11:14,290
open source worked in the past and he

00:11:13,180 --> 00:11:16,360
thought maybe he could get that that

00:11:14,290 --> 00:11:17,620
turned out to be just complicated and

00:11:16,360 --> 00:11:20,650
difficult google took place but he

00:11:17,620 --> 00:11:22,810
eventually introduced me that some folks

00:11:20,650 --> 00:11:24,940
at Google Fiber particular Avery veteran

00:11:22,810 --> 00:11:28,300
he just walked in the room and Google

00:11:24,940 --> 00:11:30,520
Fiber has a similar situation I

00:11:28,300 --> 00:11:32,020
mentioned earlier normally the wireless

00:11:30,520 --> 00:11:35,170
link isn't the bottleneck on the path

00:11:32,020 --> 00:11:36,520
but Google Fiber where they have service

00:11:35,170 --> 00:11:40,630
that they're not in my neighborhood yet

00:11:36,520 --> 00:11:42,760
unfortunately but when we're there where

00:11:40,630 --> 00:11:45,700
they offer service they bring in gigabit

00:11:42,760 --> 00:11:49,530
ethernet or gigabit service which winds

00:11:45,700 --> 00:11:53,110
up on gigabit ethernet in your house and

00:11:49,530 --> 00:11:55,180
and then if you're using in you know

00:11:53,110 --> 00:11:56,860
they are providing the fastest wireless

00:11:55,180 --> 00:12:00,190
access points that they can but they

00:11:56,860 --> 00:12:02,130
still tend to be the bottleneck so again

00:12:00,190 --> 00:12:04,720
once again the wireless driver is

00:12:02,130 --> 00:12:10,939
driving the bottleneck link on the path

00:12:04,720 --> 00:12:12,930
and now buffer blood matters so

00:12:10,939 --> 00:12:14,430
they were interested in this as well

00:12:12,930 --> 00:12:16,949
they're interested in other stuff and I

00:12:14,430 --> 00:12:18,870
wound up getting to talk with the folks

00:12:16,949 --> 00:12:21,660
at Google Fiber often about a bunch of

00:12:18,870 --> 00:12:24,089
stuff so we finally got around to

00:12:21,660 --> 00:12:28,110
actually trying to tackle this specific

00:12:24,089 --> 00:12:31,680
problem I think about a year ago when

00:12:28,110 --> 00:12:32,939
we've got to the point where we okay

00:12:31,680 --> 00:12:36,180
should be able to spend some time on

00:12:32,939 --> 00:12:40,079
this instead of other stuff and okay

00:12:36,180 --> 00:12:49,040
what's the problem fq Cadel tends to fix

00:12:40,079 --> 00:12:49,040
the Buffalo problem in as long as you've

00:12:50,240 --> 00:12:56,519
in most cases but why isn't it fixing it

00:12:54,149 --> 00:13:00,509
for wireless what's different about

00:12:56,519 --> 00:13:01,800
wireless why why I mean you can actually

00:13:00,509 --> 00:13:06,269
put up your kodel on the wireless

00:13:01,800 --> 00:13:09,209
interface but it's and it improves

00:13:06,269 --> 00:13:11,999
things but why is why is there still

00:13:09,209 --> 00:13:14,730
bloat remaining and how much bloat can

00:13:11,999 --> 00:13:16,860
vary a lot it's hard to actually put a

00:13:14,730 --> 00:13:20,490
number on I think I could contrive a

00:13:16,860 --> 00:13:23,699
demonstration to get any numbers you

00:13:20,490 --> 00:13:30,329
want to want it there but i'll show some

00:13:23,699 --> 00:13:32,579
numbers at the end anyway so what really

00:13:30,329 --> 00:13:34,680
happened on the and so this is when I

00:13:32,579 --> 00:13:36,120
quiz the room time and I hope the rest

00:13:34,680 --> 00:13:38,160
of my talk and go a little bit faster a

00:13:36,120 --> 00:13:40,199
little slow getting into this so the

00:13:38,160 --> 00:13:42,720
latency problem and the Mon wireless

00:13:40,199 --> 00:13:44,610
drivers you just replaced the cutest

00:13:42,720 --> 00:13:48,740
with fq cuddle and the problem solved

00:13:44,610 --> 00:13:48,740
right it's not the whole story

00:13:49,310 --> 00:13:55,160
when you have a situation where it's not

00:13:52,340 --> 00:13:57,290
it's not the length of your control that

00:13:55,160 --> 00:13:59,690
has a that's true but imagine

00:13:57,290 --> 00:14:00,980
you're a cop just as simple just that's

00:13:59,690 --> 00:14:04,750
true you have to turn it on at the

00:14:00,980 --> 00:14:04,750
bottleneck link and I think I said I

00:14:07,390 --> 00:14:16,880
have to estimate then what is the yeah

00:14:13,330 --> 00:14:19,250
some people have heard of bql so anyway

00:14:16,880 --> 00:14:21,800
it turns out wireless drivers aren't

00:14:19,250 --> 00:14:24,620
really that different all drivers pull

00:14:21,800 --> 00:14:27,410
packets out of the Linux q disk before

00:14:24,620 --> 00:14:31,460
it is time to actually transmit them for

00:14:27,410 --> 00:14:32,810
good reason this is true for especially

00:14:31,460 --> 00:14:34,400
high performance links but the high

00:14:32,810 --> 00:14:35,750
performance links tend to be faster and

00:14:34,400 --> 00:14:41,510
perhaps aren't the bottleneck on your

00:14:35,750 --> 00:14:43,130
path but anyway the if you don't pull

00:14:41,510 --> 00:14:46,670
enough packets out of the cutest can

00:14:43,130 --> 00:14:49,580
hook them up to the DMA descriptors so

00:14:46,670 --> 00:14:51,680
the device can get busy you run the risk

00:14:49,580 --> 00:14:54,020
of starvation and not fully utilizing

00:14:51,680 --> 00:14:58,040
the length it's there so driver authors

00:14:54,020 --> 00:14:59,240
I believe a lot of drivers you can go

00:14:58,040 --> 00:15:00,890
and look at them where they actually

00:14:59,240 --> 00:15:02,000
have the constant number that's compiled

00:15:00,890 --> 00:15:03,770
into the driver which is how many

00:15:02,000 --> 00:15:05,089
packets they're going to hook up to the

00:15:03,770 --> 00:15:08,030
DMA engine once they've done that many

00:15:05,089 --> 00:15:10,280
that's enough but why is that I mean in

00:15:08,030 --> 00:15:14,690
what does a driver authored probably do

00:15:10,280 --> 00:15:16,910
before bql md you probably turn that up

00:15:14,690 --> 00:15:18,260
until you get all the performance you

00:15:16,910 --> 00:15:20,930
think you shouldn't then leave it the

00:15:18,260 --> 00:15:22,610
high but that might be large a larger

00:15:20,930 --> 00:15:24,110
number than you actually need to achieve

00:15:22,610 --> 00:15:26,330
the performance and by setting that

00:15:24,110 --> 00:15:27,800
number higher what you're doing is

00:15:26,330 --> 00:15:30,290
committing to what art of the packets

00:15:27,800 --> 00:15:33,290
are going to go out the link instead of

00:15:30,290 --> 00:15:35,810
letting whatever fancy q disk somebody

00:15:33,290 --> 00:15:38,089
is installed in the linux traffic

00:15:35,810 --> 00:15:41,300
control which is actually supposed to be

00:15:38,089 --> 00:15:43,130
what's deciding what gets to go next but

00:15:41,300 --> 00:15:45,260
one should that come out of the q disk

00:15:43,130 --> 00:15:46,700
in some sense you've lot you've given up

00:15:45,260 --> 00:15:50,770
on that ability to decide what guess

00:15:46,700 --> 00:15:50,770
what goes next so anyway

00:15:54,730 --> 00:16:00,860
so the solution to that second problem

00:15:58,010 --> 00:16:02,149
which is how much how many package

00:16:00,860 --> 00:16:04,910
should be pulled out of the queue disk

00:16:02,149 --> 00:16:07,579
and go down into the driver is this

00:16:04,910 --> 00:16:10,040
thing called bql and dql bql is byte q

00:16:07,579 --> 00:16:14,450
limits and dql is dynamic queue limits

00:16:10,040 --> 00:16:16,850
dql is a library it's actually in part

00:16:14,450 --> 00:16:19,399
of the kernel source tree I hadn't spent

00:16:16,850 --> 00:16:21,950
much time looking at its under lib and

00:16:19,399 --> 00:16:25,339
there's an include file inning include

00:16:21,950 --> 00:16:26,930
Linux called dynamic queue limits and

00:16:25,339 --> 00:16:28,940
it's a very simple library that it will

00:16:26,930 --> 00:16:31,310
do this auto-tuning for you if you hook

00:16:28,940 --> 00:16:33,110
it up and then in net device dot H I

00:16:31,310 --> 00:16:35,690
think it's entirely in the header file

00:16:33,110 --> 00:16:37,579
there's this thing called bql there's

00:16:35,690 --> 00:16:40,910
also a little bit of work that has to be

00:16:37,579 --> 00:16:43,040
done to individual device drivers to cut

00:16:40,910 --> 00:16:45,350
them over to use this they have to

00:16:43,040 --> 00:16:48,560
report completions in a certain way into

00:16:45,350 --> 00:16:50,839
the system and what the dql library will

00:16:48,560 --> 00:16:52,550
do for you is that well it will watch

00:16:50,839 --> 00:16:55,399
the system run in real time and

00:16:52,550 --> 00:16:57,440
automatically figure out how many

00:16:55,399 --> 00:17:00,010
packets do I actually have to commit

00:16:57,440 --> 00:17:04,130
down into the driver so the driver never

00:17:00,010 --> 00:17:06,799
manages to complete all of them before I

00:17:04,130 --> 00:17:10,370
get the next packet son in other words

00:17:06,799 --> 00:17:13,160
any time the link anytime dql sees that

00:17:10,370 --> 00:17:15,500
it went completely I everything got

00:17:13,160 --> 00:17:18,919
completed before the next thing got in

00:17:15,500 --> 00:17:20,750
it goes oh we didn't put enough in so at

00:17:18,919 --> 00:17:22,280
that point it does an exponential

00:17:20,750 --> 00:17:23,510
increase additive decrease which is the

00:17:22,280 --> 00:17:27,049
opposite of most network control

00:17:23,510 --> 00:17:29,840
algorithms it'll double or something

00:17:27,049 --> 00:17:31,640
similar the amount of packets willing to

00:17:29,840 --> 00:17:34,940
put down in order to avoid starvation

00:17:31,640 --> 00:17:37,880
but it's only doubling and then every

00:17:34,940 --> 00:17:43,730
time a certain amount of time goes by

00:17:37,880 --> 00:17:47,360
where we did not start the queue it it

00:17:43,730 --> 00:17:51,520
tries turning down and additive sort of

00:17:47,360 --> 00:17:51,520
way subtractive sort of way so

00:17:52,980 --> 00:18:02,140
whoops I think I'm going the wrong way

00:17:56,760 --> 00:18:03,640
don't know it okay okay and I spent a

00:18:02,140 --> 00:18:05,860
lot of time looking in the wireless

00:18:03,640 --> 00:18:07,179
drivers in the macular till OpenStack

00:18:05,860 --> 00:18:08,710
which is sort of between the wireless

00:18:07,179 --> 00:18:12,940
drivers and the cutest trying to figure

00:18:08,710 --> 00:18:15,280
out what's going on and I realized

00:18:12,940 --> 00:18:18,039
instead of putting some hack down in the

00:18:15,280 --> 00:18:20,260
wireless drivers to solve this buffer

00:18:18,039 --> 00:18:23,620
below problem for wireless what we

00:18:20,260 --> 00:18:32,580
really need to do is we need dql hooked

00:18:23,620 --> 00:18:35,409
up to wireless but dql assumes that it's

00:18:32,580 --> 00:18:36,880
trying to find it's trying to match the

00:18:35,409 --> 00:18:39,730
rate at which packets go out the

00:18:36,880 --> 00:18:43,929
interface to the system's ability to

00:18:39,730 --> 00:18:46,059
refill the transmit descriptors and the

00:18:43,929 --> 00:18:49,179
trick that what makes wireless different

00:18:46,059 --> 00:18:54,490
and not straight forward to just simply

00:18:49,179 --> 00:18:58,690
hook up dql to it in some way is the dql

00:18:54,490 --> 00:19:00,850
is assuming that there's a rate it's

00:18:58,690 --> 00:19:04,090
trying to match it's trying to find one

00:19:00,850 --> 00:19:05,620
thing you know how many bytes given how

00:19:04,090 --> 00:19:08,590
the responsiveness of my system to

00:19:05,620 --> 00:19:12,039
refill it so maybe now that I've

00:19:08,590 --> 00:19:13,960
explained it this way you all are about

00:19:12,039 --> 00:19:15,070
to have it maybe you even before i move

00:19:13,960 --> 00:19:16,870
to the next slide you're going to have

00:19:15,070 --> 00:19:18,250
the same idea i had in early december

00:19:16,870 --> 00:19:24,549
which one i finally realized what i need

00:19:18,250 --> 00:19:30,000
to do oh I've got another side of setup

00:19:24,549 --> 00:19:30,000
here this is

00:19:30,550 --> 00:19:35,650
so what what should we do for wireless

00:19:32,670 --> 00:19:38,560
and I have had one key ID in early

00:19:35,650 --> 00:19:43,990
December in most of its Connor it's not

00:19:38,560 --> 00:19:47,650
the dql is tuning the right number of

00:19:43,990 --> 00:19:50,020
bytes it's that bites the way dql works

00:19:47,650 --> 00:19:53,140
in normal when bql is normally hooked up

00:19:50,020 --> 00:19:56,260
to an interface is that bql is that is

00:19:53,140 --> 00:19:58,270
that bites are a good proxy for an

00:19:56,260 --> 00:20:01,900
amount of time that the network device

00:19:58,270 --> 00:20:04,090
is going to be transmitting and and for

00:20:01,900 --> 00:20:07,300
devices that transmit it basically a

00:20:04,090 --> 00:20:10,060
single rate you can use bites as sort of

00:20:07,300 --> 00:20:13,270
a measure of time and that's what's

00:20:10,060 --> 00:20:15,460
different about Wireless bites looking

00:20:13,270 --> 00:20:19,450
at the length of a pocket or a list of

00:20:15,460 --> 00:20:21,100
packets does that give you an idea of

00:20:19,450 --> 00:20:29,500
how long it's going to take those

00:20:21,100 --> 00:20:31,930
packets to go out a wireless link yeah

00:20:29,500 --> 00:20:39,000
some numbers some few orders of

00:20:31,930 --> 00:20:39,000
magnitude range exactly good answer so

00:20:39,720 --> 00:20:47,050
so what should we do for wireless and

00:20:43,950 --> 00:20:49,540
when I the ID I had in December is like

00:20:47,050 --> 00:20:51,160
oh we really want to be using time in

00:20:49,540 --> 00:20:54,100
other words i want to take those that

00:20:51,160 --> 00:20:58,390
list of packets and look at their

00:20:54,100 --> 00:21:03,070
lengths and if if it's a wireless driver

00:20:58,390 --> 00:21:05,410
that's using the macular to 11 rate

00:21:03,070 --> 00:21:07,720
control then the packets are already

00:21:05,410 --> 00:21:09,850
decorated with a list of rates for the

00:21:07,720 --> 00:21:11,290
driver to try and it's usually going to

00:21:09,850 --> 00:21:13,900
be the first rate that works because

00:21:11,290 --> 00:21:18,910
that's what the rate control prefers to

00:21:13,900 --> 00:21:20,950
use so i just need to take the rate and

00:21:18,910 --> 00:21:23,500
the number bytes in the packet and turn

00:21:20,950 --> 00:21:27,310
that to time well it's not so simple

00:21:23,500 --> 00:21:33,810
figuring out mapping rates to get into

00:21:27,310 --> 00:21:33,810
some details anyway so oh I guess that's

00:21:34,860 --> 00:21:44,150
yeah yeah so what are we going to not

00:21:40,380 --> 00:21:46,679
actually these days fewer and fewer

00:21:44,150 --> 00:21:49,679
drivers actually use macular tulip and

00:21:46,679 --> 00:21:54,929
rate control typically rate control is

00:21:49,679 --> 00:21:56,970
now done down in a firmware blob we

00:21:54,929 --> 00:22:00,410
already have feedback mechanisms that

00:21:56,970 --> 00:22:02,820
tell you what a rate what the expected

00:22:00,410 --> 00:22:04,470
and everyone is expected to have those

00:22:02,820 --> 00:22:07,549
because you actually need those to

00:22:04,470 --> 00:22:16,410
implement Android to implement android

00:22:07,549 --> 00:22:18,270
android you're expected to ok for an

00:22:16,410 --> 00:22:21,870
access point that has a whole bunch of

00:22:18,270 --> 00:22:23,910
associated clients not all Android

00:22:21,870 --> 00:22:27,679
drivers use use Mac enough 11 though

00:22:23,910 --> 00:22:27,679
most oh no but that's what I'm saying

00:22:29,480 --> 00:22:41,250
this is great i'm starting discussion i

00:22:32,070 --> 00:22:42,750
think i'm about yeah I have my parents

00:22:41,250 --> 00:22:46,350
at a comment it's not it is going to be

00:22:42,750 --> 00:22:53,309
complicated you can observe traffic

00:22:46,350 --> 00:22:54,750
control you can just watch the

00:22:53,309 --> 00:22:58,040
completions and look at how long the

00:22:54,750 --> 00:22:58,040
packets were and that will give you a

00:22:59,570 --> 00:23:03,540
mean here's here's why I think it's a

00:23:02,190 --> 00:23:05,549
little bit difficult and complicated

00:23:03,540 --> 00:23:07,740
because imagine you have a long list of

00:23:05,549 --> 00:23:09,030
packets to a whole bunch of clients I'm

00:23:07,740 --> 00:23:10,559
actually thinking for about the point of

00:23:09,030 --> 00:23:14,100
view in the van access player that's got

00:23:10,559 --> 00:23:15,960
a dozens of associated clients and it's

00:23:14,100 --> 00:23:17,880
a saturated access point what can we do

00:23:15,960 --> 00:23:20,340
in that case well in that case you hand

00:23:17,880 --> 00:23:21,929
a whole bunch of packets down to a

00:23:20,340 --> 00:23:24,020
firmware blob that's going to do rate

00:23:21,929 --> 00:23:27,259
control separately for each of the and

00:23:24,020 --> 00:23:30,000
individual Dustin

00:23:27,259 --> 00:23:43,950
in one way or another agent I'm maybe

00:23:30,000 --> 00:23:48,690
some rumors we should talk okay that's

00:23:43,950 --> 00:23:59,940
different I'm about to declare success

00:23:48,690 --> 00:24:03,600
since I've started discussion there yeah

00:23:59,940 --> 00:24:04,889
I think I my second paragraph your

00:24:03,600 --> 00:24:06,629
happening from leak rate info the

00:24:04,889 --> 00:24:08,429
expected time will need to be aware of

00:24:06,629 --> 00:24:11,789
aggregation either explicitly or via

00:24:08,429 --> 00:24:13,649
size estimate and trying done in the

00:24:11,789 --> 00:24:15,899
case of a flying k which is the thing

00:24:13,649 --> 00:24:19,080
I'm playing with the moment that that's

00:24:15,899 --> 00:24:24,899
done in software and it uses mac 8 or 12

00:24:19,080 --> 00:24:27,269
and rain control yeah it it but it's

00:24:24,899 --> 00:24:32,429
still been served in the middle anyway

00:24:27,269 --> 00:24:38,220
um also DQ else doesn't I'm not aware of

00:24:32,429 --> 00:24:40,139
any thoughts about how dql how the dql

00:24:38,220 --> 00:24:41,490
library works in a multi q situation

00:24:40,139 --> 00:24:43,620
where you're actually using all of the

00:24:41,490 --> 00:24:45,840
cues and at least some people tend to

00:24:43,620 --> 00:24:47,370
think that I mean I haven't seen it in

00:24:45,840 --> 00:24:51,149
action but some people seem to think

00:24:47,370 --> 00:24:52,919
that for wireless the multi Q is more

00:24:51,149 --> 00:25:00,779
important than the multi Q and wired

00:24:52,919 --> 00:25:02,639
drivers dql I'm not even seen any code

00:25:00,779 --> 00:25:04,919
to even suggest that it tries to do

00:25:02,639 --> 00:25:07,710
anything I'll it'll be very stupid it

00:25:04,919 --> 00:25:11,220
doesn't do anything right anyway so

00:25:07,710 --> 00:25:12,990
that's where I am okay so what's

00:25:11,220 --> 00:25:14,669
happening there's a new intermediate

00:25:12,990 --> 00:25:17,730
transmit cues and macular to a lot of

00:25:14,669 --> 00:25:21,809
admit they landed last spring and main

00:25:17,730 --> 00:25:23,190
line Lennox and in my main line language

00:25:21,809 --> 00:25:24,990
colonel at least as far as I can tell

00:25:23,190 --> 00:25:26,429
there are no drivers in the tree that

00:25:24,990 --> 00:25:30,509
actually used these intermediate cues

00:25:26,429 --> 00:25:32,519
but there is an out of tree driver and t

00:25:30,509 --> 00:25:34,019
76 which does and I went and looked at

00:25:32,519 --> 00:25:37,769
that and tried to figure out what's

00:25:34,019 --> 00:25:39,299
going on it's like wow would the switch

00:25:37,769 --> 00:25:39,870
into these intermediate cues actually

00:25:39,299 --> 00:25:42,450
going to help me

00:25:39,870 --> 00:25:44,910
here it actually doesn't make any

00:25:42,450 --> 00:25:46,440
difference at all except it changes

00:25:44,910 --> 00:25:49,590
things around which i think is going to

00:25:46,440 --> 00:25:52,770
make it easier to do something the key

00:25:49,590 --> 00:25:54,750
thing is is that this question currently

00:25:52,770 --> 00:25:56,309
before this intermediate Q's it's

00:25:54,750 --> 00:25:57,750
actually down in each drivers or

00:25:56,309 --> 00:26:00,600
something which decides how much to pull

00:25:57,750 --> 00:26:03,180
out of the linux q disk and do something

00:26:00,600 --> 00:26:05,790
where this intermediate q the the code

00:26:03,180 --> 00:26:08,430
that decides when to stop doing that is

00:26:05,790 --> 00:26:11,910
actually in mackay 802 11 which means if

00:26:08,430 --> 00:26:16,010
we do it there perhaps the code can be

00:26:11,910 --> 00:26:18,720
shared from multiple drivers and i

00:26:16,010 --> 00:26:21,300
didn't i tried to figure out how to get

00:26:18,720 --> 00:26:25,920
ahold of an mt 76 hardware and couldn't

00:26:21,300 --> 00:26:28,230
figure out how to do that so I said oh

00:26:25,920 --> 00:26:30,030
I'll just cut a flying k over that took

00:26:28,230 --> 00:26:31,679
some doing I learned a lot more about

00:26:30,030 --> 00:26:34,170
the internals of the offline k driver

00:26:31,679 --> 00:26:36,150
than I really wanted to but I believe I

00:26:34,170 --> 00:26:39,929
have working patch I'll get to that in a

00:26:36,150 --> 00:26:44,150
moment yeah I said that on this I have

00:26:39,929 --> 00:26:47,130
this patch and it seems to be working

00:26:44,150 --> 00:26:49,200
and I think it's probably going to be a

00:26:47,130 --> 00:26:51,480
good idea that cuddle the drivers over

00:26:49,200 --> 00:26:55,980
but I guess that'll be up to those

00:26:51,480 --> 00:26:59,220
drivers maintained errs now to actually

00:26:55,980 --> 00:27:02,040
get towards solving the problem i have a

00:26:59,220 --> 00:27:04,620
very i have a crude Kluge patch which is

00:27:02,040 --> 00:27:06,630
supposed to enable need to do some demos

00:27:04,620 --> 00:27:10,620
before i came in and spoke with you all

00:27:06,630 --> 00:27:12,030
today and I've written it and it looks

00:27:10,620 --> 00:27:18,240
like it ought to do thing it's not that

00:27:12,030 --> 00:27:20,760
many lines of code and it's actually

00:27:18,240 --> 00:27:22,920
kind of crude I just want to dql to be

00:27:20,760 --> 00:27:24,780
working in my demo and in my demo were

00:27:22,920 --> 00:27:26,070
basically there were just two two

00:27:24,780 --> 00:27:27,780
stations running at two different rates

00:27:26,070 --> 00:27:29,640
and only one of them is actually

00:27:27,780 --> 00:27:31,230
congesting the queue I don't even have

00:27:29,640 --> 00:27:32,550
to get the length of the pack I don't

00:27:31,230 --> 00:27:33,750
even have to get the rates right I just

00:27:32,550 --> 00:27:38,309
took the link that multiplied by a

00:27:33,750 --> 00:27:41,970
constant and threw it in dql but even

00:27:38,309 --> 00:27:44,940
this pet even the simple patch is not

00:27:41,970 --> 00:27:46,380
working and I was even still scratching

00:27:44,940 --> 00:27:47,820
my head last night trying to figure see

00:27:46,380 --> 00:27:49,560
if I could figure it out but any day now

00:27:47,820 --> 00:27:50,190
I think I should at least have a demo

00:27:49,560 --> 00:27:54,090
which would

00:27:50,190 --> 00:27:56,629
some of the numbers a chelator but this

00:27:54,090 --> 00:27:58,440
was just supposed to be a stepping stone

00:27:56,629 --> 00:28:02,399
towards figuring out what the right

00:27:58,440 --> 00:28:04,019
thing to do is and so what I can demo

00:28:02,399 --> 00:28:06,149
just to give you an idea sort of the

00:28:04,019 --> 00:28:09,059
what I'm looking at it my test bed is

00:28:06,149 --> 00:28:10,980
first sort of first case to try to do it

00:28:09,059 --> 00:28:13,259
I have an access point into Associated

00:28:10,980 --> 00:28:16,200
client stations I've turned the power

00:28:13,259 --> 00:28:17,490
down to three milliwatts on the AP to

00:28:16,200 --> 00:28:19,289
make things more interesting getting to

00:28:17,490 --> 00:28:22,620
the client associated client in the next

00:28:19,289 --> 00:28:24,120
room I have the first client sitting

00:28:22,620 --> 00:28:25,830
right next to the access point on the

00:28:24,120 --> 00:28:27,539
table and the other ones in the next

00:28:25,830 --> 00:28:30,110
room about 10 minutes 10 meters away

00:28:27,539 --> 00:28:32,639
what I'm doing is I'm from the nearby

00:28:30,110 --> 00:28:36,690
associated client I'm pinging the access

00:28:32,639 --> 00:28:40,549
point and from the access point in the

00:28:36,690 --> 00:28:45,289
other room I start a bulk download and

00:28:40,549 --> 00:28:47,759
and that bulks up the queue that that

00:28:45,289 --> 00:28:49,230
associated client the rate control is

00:28:47,759 --> 00:28:50,759
turning the right way down in order to

00:28:49,230 --> 00:28:54,090
get the packets with such low power in

00:28:50,759 --> 00:28:57,480
the next room and I start up the bulk

00:28:54,090 --> 00:29:02,850
flow after about 5 seconds of pinging

00:28:57,480 --> 00:29:11,399
and you can see the key is loading up no

00:29:02,850 --> 00:29:13,529
surprise well actually actually yeah if

00:29:11,399 --> 00:29:15,990
you if you let this run longer can you

00:29:13,529 --> 00:29:18,240
can get saved but actually I didn't

00:29:15,990 --> 00:29:20,490
install a few koto there after yokota

00:29:18,240 --> 00:29:22,139
helps on the wireless link and i'll just

00:29:20,490 --> 00:29:25,620
rerun that same experiment with that

00:29:22,139 --> 00:29:27,059
cute photo and you can see i guess this

00:29:25,620 --> 00:29:31,139
is why they want me to stay in it like

00:29:27,059 --> 00:29:33,509
you can see on the right-hand column of

00:29:31,139 --> 00:29:39,210
milliseconds the ping times maybe

00:29:33,509 --> 00:29:40,980
there's some over 50 33 I've seen runs

00:29:39,210 --> 00:29:44,669
where there were actually quite a few in

00:29:40,980 --> 00:29:45,870
the 50 to 65 range millisecond so fq

00:29:44,669 --> 00:29:47,429
kodells definitely worth still

00:29:45,870 --> 00:29:50,070
installing so if you have a wireless

00:29:47,429 --> 00:29:52,559
interface that is your bottleneck don't

00:29:50,070 --> 00:29:55,399
just give up go ahead and switch def

00:29:52,559 --> 00:29:55,399
kyouko tile and

00:29:58,700 --> 00:30:02,780
I've switched over to the intermediate

00:30:00,230 --> 00:30:04,190
cues and I can rerun it and I get

00:30:02,780 --> 00:30:05,270
basically the same numbers they look

00:30:04,190 --> 00:30:08,660
like they're a little smaller here

00:30:05,270 --> 00:30:10,310
there's a 50 1 millisecond on there no

00:30:08,660 --> 00:30:12,500
real improvement by switching the dura

00:30:10,310 --> 00:30:14,150
mater your cues but the next patch which

00:30:12,500 --> 00:30:16,790
is a change to the way the intermediate

00:30:14,150 --> 00:30:18,770
cues work my goal is I think they can

00:30:16,790 --> 00:30:20,780
get all of these into the single-digit

00:30:18,770 --> 00:30:22,250
milliseconds and maybe if things go

00:30:20,780 --> 00:30:30,020
really well down around six or seven

00:30:22,250 --> 00:30:32,300
milliseconds seems like formal my goal

00:30:30,020 --> 00:30:36,460
is vert not to and I'm not that far

00:30:32,300 --> 00:30:41,480
along yet of course I want that so

00:30:36,460 --> 00:30:43,430
thanks for listening please feel free to

00:30:41,480 --> 00:30:45,440
try to unconfuse me any further I feel

00:30:43,430 --> 00:30:48,650
like I made a step function less

00:30:45,440 --> 00:30:49,940
confused in early december i feel like i

00:30:48,650 --> 00:30:55,640
might be working on the right problem

00:30:49,940 --> 00:31:00,080
now and i'll be here through friday and

00:30:55,640 --> 00:31:01,490
i should thanks andrew burger as i told

00:31:00,080 --> 00:31:03,740
at the beginning of the talk is the one

00:31:01,490 --> 00:31:06,430
who started me on this path and he still

00:31:03,740 --> 00:31:10,220
listens to me Avery listens to me

00:31:06,430 --> 00:31:12,680
multiple times per week as we've talked

00:31:10,220 --> 00:31:16,040
about other stuff as well but um and I

00:31:12,680 --> 00:31:18,440
thank Andrew and Avery for figuring out

00:31:16,040 --> 00:31:21,710
how to make it possible for me to work

00:31:18,440 --> 00:31:24,040
on this for a while and I think I'm out

00:31:21,710 --> 00:31:24,040

YouTube URL: https://www.youtube.com/watch?v=3Rg5ONo3_Do


