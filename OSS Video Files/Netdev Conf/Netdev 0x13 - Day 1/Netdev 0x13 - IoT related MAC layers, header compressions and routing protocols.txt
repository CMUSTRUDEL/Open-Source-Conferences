Title: Netdev 0x13 - IoT related MAC layers, header compressions and routing protocols
Publication date: 2019-05-20
Playlist: Netdev 0x13 - Day 1
Description: 
	Stefan Schmidt chairs working session discussions on IoT related MAC layers, header compression and routing protocols.

More info:
https://www.netdevconf.org/0x13/session.html?workshop-on-iot-related-mac-layers-header-compressions-and-routing-protocols
Captions: 
	00:00:18,000 --> 00:00:22,739
[Music]

00:00:50,790 --> 00:00:53,840
[Music]

00:02:01,140 --> 00:02:04,200
[Music]

00:02:09,759 --> 00:02:12,849
[Music]

00:02:24,800 --> 00:02:27,969
[Music]

00:02:53,100 --> 00:02:56,160
[Music]

00:02:56,450 --> 00:02:59,450
yeah

00:03:08,240 --> 00:03:14,159
[Music]

00:03:47,690 --> 00:03:55,350
hey is it working

00:03:51,570 --> 00:03:57,930
yeah my name is Alexei temple I am

00:03:55,350 --> 00:04:05,420
working towards of mark and I am not yet

00:03:57,930 --> 00:04:05,420
maintainer of j1939 stake on top of Ken

00:04:05,780 --> 00:04:15,480
yeah I will try to show some reasons why

00:04:12,110 --> 00:04:17,970
why am they are poaching or why we are

00:04:15,480 --> 00:04:21,860
trying to provide kernel support kernel

00:04:17,970 --> 00:04:23,930
level support of the stake in my slides

00:04:21,860 --> 00:04:27,980
yeah

00:04:23,930 --> 00:04:27,980
will be more later

00:04:28,040 --> 00:04:35,250
hi my name is Andrea swabbo I work at

00:04:31,980 --> 00:04:37,860
zoos labs and I'm in project and release

00:04:35,250 --> 00:04:40,290
management there so not working on

00:04:37,860 --> 00:04:42,990
network stack normally so that's also

00:04:40,290 --> 00:04:45,060
kind of a ten-percent thing and I've

00:04:42,990 --> 00:04:46,890
been looking into a number of new

00:04:45,060 --> 00:04:49,340
wireless technologies that are currently

00:04:46,890 --> 00:04:54,150
not yet represented in the kernel and

00:04:49,340 --> 00:04:57,900
searching for ways to make them

00:04:54,150 --> 00:04:59,970
accessible in suitable ways and pretty

00:04:57,900 --> 00:05:03,510
much brought a bunch of questions that

00:04:59,970 --> 00:05:10,800
an RFC on the net F list really hasn't

00:05:03,510 --> 00:05:14,180
managed to quite clarify yet yeah hi my

00:05:10,800 --> 00:05:18,510
name is Alexander arming and

00:05:14,180 --> 00:05:21,930
I'm the country maintainer of the

00:05:18,510 --> 00:05:24,240
6lowpan stake in the new scanner miss

00:05:21,930 --> 00:05:27,050
youco youco winner listen

00:05:24,240 --> 00:05:33,390
yeah it's not here at the moment but

00:05:27,050 --> 00:05:37,140
he's more doing the Bluetooth adaptation

00:05:33,390 --> 00:05:40,920
for six open I'm more at 800 215 for

00:05:37,140 --> 00:05:44,880
side and also that's why I'm involved

00:05:40,920 --> 00:05:50,310
answer in 802 15 for with Stefan

00:05:44,880 --> 00:05:56,670
together and yeah it's not my full task

00:05:50,310 --> 00:06:02,460
anymore sadly but I'm still working in

00:05:56,670 --> 00:06:08,090
other networking core related topics but

00:06:02,460 --> 00:06:11,250
when I have time I try to improve this

00:06:08,090 --> 00:06:16,320
implementation and also working with

00:06:11,250 --> 00:06:21,930
other IOT Oh myoh TOS around like wilder

00:06:16,320 --> 00:06:26,700
s they know me and then yeah we we try

00:06:21,930 --> 00:06:31,290
to make some new innovations and try to

00:06:26,700 --> 00:06:34,260
make more mistake testing and something

00:06:31,290 --> 00:06:37,410
like that together that we did both

00:06:34,260 --> 00:06:39,560
communities also have something from

00:06:37,410 --> 00:06:39,560
this

00:06:45,039 --> 00:06:48,189
my name is John Malloy I'm working at

00:06:47,349 --> 00:06:51,819
Erickson

00:06:48,189 --> 00:06:56,370
I am the originator and main maintainer

00:06:51,819 --> 00:06:59,499
of the Tipsy protocol stack so my main

00:06:56,370 --> 00:07:02,889
interest here is around the IP stack in

00:06:59,499 --> 00:07:06,210
general just learn more about it so it I

00:07:02,889 --> 00:07:06,210
can progress in my work with it

00:07:06,360 --> 00:07:12,759
hello my name is Kermit SEO rasca I'm

00:07:09,580 --> 00:07:17,439
working in company hosting Guerra and it

00:07:12,759 --> 00:07:20,800
is web hosting industry and I'm not so

00:07:17,439 --> 00:07:24,939
experienced as you and that's why I'm

00:07:20,800 --> 00:07:27,909
here so I am just working with basic

00:07:24,939 --> 00:07:31,870
Network stack in web hosting so it's not

00:07:27,909 --> 00:07:33,999
something fancy and I'm here with my

00:07:31,870 --> 00:07:36,159
colleague Don Atossa brightest and he is

00:07:33,999 --> 00:07:43,629
contributing a lot to the

00:07:36,159 --> 00:07:48,669
ospc project so maybe later than others

00:07:43,629 --> 00:07:51,419
can say more about his work and that's

00:07:48,669 --> 00:07:54,849
all thank you

00:07:51,419 --> 00:07:58,120
hi I'm David Sam Porter

00:07:54,849 --> 00:08:01,089
although people call me a Qui I am a

00:07:58,120 --> 00:08:02,800
maintainer on the fr routing suite that

00:08:01,089 --> 00:08:07,599
does the dynamic routing stuff for

00:08:02,800 --> 00:08:10,449
normal networks so that's my day job

00:08:07,599 --> 00:08:12,610
my night job is putting together a

00:08:10,449 --> 00:08:14,919
random crap at the hacker space so I do

00:08:12,610 --> 00:08:16,930
know the the Linux can API because we

00:08:14,919 --> 00:08:19,060
use that for light control stuff and so

00:08:16,930 --> 00:08:21,669
on and them but I don't really have a

00:08:19,060 --> 00:08:25,560
lot of contact points with IOT otherwise

00:08:21,669 --> 00:08:25,560
so I'm just curious

00:08:27,270 --> 00:08:32,560
hello everyone I'm Rahul Jadhav I've

00:08:29,860 --> 00:08:34,930
been working on the mesh networking part

00:08:32,560 --> 00:08:36,940
for the IIT so I'm going to talk about

00:08:34,930 --> 00:08:41,319
our peel or the ripple the routing

00:08:36,940 --> 00:08:43,870
protocol in my talk we have been using

00:08:41,319 --> 00:08:47,529
ripple primarily on a to do or 15.4 and

00:08:43,870 --> 00:08:49,029
PLC for home automation and smart meters

00:08:47,529 --> 00:08:50,410
all the metering use cases for that

00:08:49,029 --> 00:08:54,420
matter so I work for Bobbie

00:08:50,410 --> 00:08:54,420
technologists in India thank you

00:08:54,850 --> 00:08:59,589
hello I'm Luke Williams I worked for

00:08:57,009 --> 00:09:02,379
canonical the company behind a bun - I'm

00:08:59,589 --> 00:09:05,410
a Technical Architect I work for our

00:09:02,379 --> 00:09:08,680
devices branch a canonical with primary

00:09:05,410 --> 00:09:09,939
focus on IOT and the networking stacks

00:09:08,680 --> 00:09:14,559
and stuff like that that's my primary

00:09:09,939 --> 00:09:16,240
focus thanks a lot

00:09:14,559 --> 00:09:18,100
so I think that at least it helps me a

00:09:16,240 --> 00:09:19,509
bit to understand what people are here

00:09:18,100 --> 00:09:22,899
what are they interested for that and so

00:09:19,509 --> 00:09:24,730
on so yeah I think we have just sinks

00:09:22,899 --> 00:09:27,699
covered I think we can't yeah but early

00:09:24,730 --> 00:09:37,959
but we can switch to Ken already so if

00:09:27,699 --> 00:10:21,910
you guys want to go onstage in 20

00:09:37,959 --> 00:10:27,939
minutes 4 minutes and explain more

00:10:21,910 --> 00:10:31,259
things why we doing this so before so

00:10:27,939 --> 00:10:31,259
that was introduced

00:10:47,000 --> 00:10:50,039
[Music]

00:11:02,330 --> 00:11:05,379
[Music]

00:11:44,830 --> 00:11:47,929
[Music]

00:12:01,460 --> 00:12:07,990
[Music]

00:12:04,080 --> 00:12:20,070
is in session

00:12:07,990 --> 00:12:20,070
like soccer and was for six years and

00:12:32,760 --> 00:12:36,420
different developers

00:12:37,420 --> 00:12:43,320
[Music]

00:12:39,920 --> 00:12:54,210
the typical issues with this tech

00:12:43,320 --> 00:12:57,960
university bite stick implementation for

00:12:54,210 --> 00:13:04,950
other companies really hard way to be

00:12:57,960 --> 00:13:11,580
great to finish this the lot of styles

00:13:04,950 --> 00:13:18,540
and to be able to handle this time the

00:13:11,580 --> 00:13:23,420
user space fool usually this limitations

00:13:18,540 --> 00:13:26,870
on temporary riches and need to go get

00:13:23,420 --> 00:13:31,950
most of all packets from campus means

00:13:26,870 --> 00:13:47,600
calm peaceful uses and under then

00:13:31,950 --> 00:13:47,600
analyze depiction take is like

00:13:48,380 --> 00:13:56,430
definition and there are some spam parts

00:13:53,430 --> 00:14:04,020
which are basically step for example

00:13:56,430 --> 00:14:08,010
suppose in NP 2000 is for ships and so

00:14:04,020 --> 00:14:13,410
on diesel buses contracts and heavy

00:14:08,010 --> 00:14:26,340
which imagery and milk and is for

00:14:13,410 --> 00:14:31,460
military stuff the limitation if you

00:14:26,340 --> 00:14:31,460
have some access for me to wave

00:14:51,170 --> 00:15:31,190
because changes or one of the changes is

00:15:27,200 --> 00:15:31,190
huge into

00:15:31,700 --> 00:15:59,600
gigabyte and ease of us so if you feel

00:16:00,540 --> 00:16:03,620
[Music]

00:16:07,230 --> 00:16:15,790
112 megabytes the MTU is that it's not

00:16:13,270 --> 00:16:19,890
the transmission unit of the underlying

00:16:15,790 --> 00:16:24,010
can protocol it's a maximum packet size

00:16:19,890 --> 00:16:26,530
yeah it's like on IP you have can have

00:16:24,010 --> 00:16:30,850
64 bytes and then IP does the

00:16:26,530 --> 00:16:33,280
segmentation and with that j1939 you

00:16:30,850 --> 00:16:35,250
have a Mac spec reserves of 112

00:16:33,280 --> 00:16:38,920
megabytes

00:16:35,250 --> 00:16:43,650
this is segmented into lots of kin

00:16:38,920 --> 00:16:49,000
packages of seven bytes of payload and

00:16:43,650 --> 00:16:51,940
and one byte of header information which

00:16:49,000 --> 00:16:58,570
is basically just a counter counting

00:16:51,940 --> 00:17:04,990
from 0 to FF yeah and the network stack

00:16:58,570 --> 00:17:09,339
does not really cope with if you do a

00:17:04,990 --> 00:17:16,120
send off 112 megabytes does not really

00:17:09,339 --> 00:17:18,550
cope with this because we want to we

00:17:16,120 --> 00:17:24,220
want to keep the information that this

00:17:18,550 --> 00:17:26,680
112 megabytes is one message because on

00:17:24,220 --> 00:17:28,690
the lower layer it does a header and

00:17:26,680 --> 00:17:31,710
then it says yeah they are going to come

00:17:28,690 --> 00:17:36,190
112 megabytes and then you have to

00:17:31,710 --> 00:17:40,840
transfer all of this the kernel has to

00:17:36,190 --> 00:17:43,390
and you cannot come back to use our

00:17:40,840 --> 00:17:45,670
space and say yeah I've I've sent like

00:17:43,390 --> 00:17:49,420
60 megabytes and not do the rest and

00:17:45,670 --> 00:17:51,940
then send another packet where you have

00:17:49,420 --> 00:17:53,640
to continue that figure that has already

00:17:51,940 --> 00:17:57,430
been started so this is a bit

00:17:53,640 --> 00:17:59,770
problematic but we have found a solution

00:17:57,430 --> 00:18:06,670
at least for for the sending side we

00:17:59,770 --> 00:18:09,220
have we just keep on going and now we're

00:18:06,670 --> 00:18:11,950
going to add signals so for that this is

00:18:09,220 --> 00:18:14,260
probably working so then when you have

00:18:11,950 --> 00:18:16,659
112 megabytes sent and there comes a

00:18:14,260 --> 00:18:20,440
signal you have to go back to user space

00:18:16,659 --> 00:18:22,929
and then you have to continue that send

00:18:20,440 --> 00:18:26,380
so the kernel has to keep the state

00:18:22,929 --> 00:18:28,149
I have sent so many megabytes and now I

00:18:26,380 --> 00:18:31,240
have to continue that without sending a

00:18:28,149 --> 00:18:33,880
new header frame but continuing the

00:18:31,240 --> 00:18:38,740
stream and this all has to be done

00:18:33,880 --> 00:18:40,899
within certain timings so but the

00:18:38,740 --> 00:18:42,850
network is quite slow it just runs with

00:18:40,899 --> 00:18:45,370
two hundred and fifty kilobytes per

00:18:42,850 --> 00:18:48,730
second so if you get a signal you have

00:18:45,370 --> 00:18:50,980
to continue your send within the buffer

00:18:48,730 --> 00:18:54,519
you have already queued in the kernel

00:18:50,980 --> 00:18:56,289
because otherwise the stream gets

00:18:54,519 --> 00:19:23,919
interrupted and then you get a timeout

00:18:56,289 --> 00:19:25,419
from the receiving can hear then you're

00:19:23,919 --> 00:19:27,639
talking about strictly about the

00:19:25,419 --> 00:19:33,960
original can and not can FD or can this

00:19:27,639 --> 00:19:37,720
also be used on top of kind of te the

00:19:33,960 --> 00:19:40,840
socket can works with can FD we have

00:19:37,720 --> 00:19:44,500
several drivers main line and some

00:19:40,840 --> 00:19:47,919
waiting for review this j1939

00:19:44,500 --> 00:19:50,169
which we just discussing the topic I

00:19:47,919 --> 00:19:56,820
think it has not been sanitized for can

00:19:50,169 --> 00:19:56,820
FD but I'm not the real expert in j1939

00:19:59,639 --> 00:20:03,760
can FD would seem to allow slightly

00:20:02,230 --> 00:20:06,220
larger packet sizes than those mentioned

00:20:03,760 --> 00:20:10,779
seven bytes but well not much larger

00:20:06,220 --> 00:20:15,330
still yeah that's a low at maximum of 64

00:20:10,779 --> 00:20:17,399
minus four we the header but

00:20:15,330 --> 00:20:21,779
I don't think that has been sanitized

00:20:17,399 --> 00:20:25,999
the colonel internal stick currently

00:20:21,779 --> 00:20:25,999
assumes that you you are runs donut can

00:20:36,590 --> 00:20:57,509
many can you open the first slide the

00:20:52,590 --> 00:21:03,210
one with the rocket so as everybody

00:20:57,509 --> 00:21:06,299
knows between the protocol family that's

00:21:03,210 --> 00:21:09,899
a great blop and the network hardware

00:21:06,299 --> 00:21:11,850
that's below so this can be broke and

00:21:09,899 --> 00:21:14,100
one we have the packet scheduler and the

00:21:11,850 --> 00:21:15,929
routing the routing we don't use that

00:21:14,100 --> 00:21:19,559
can because we don't have something like

00:21:15,929 --> 00:21:24,710
this sorry but the packet scheduler is

00:21:19,559 --> 00:21:29,129
there and if you send yeah many frames

00:21:24,710 --> 00:21:31,950
from the user space to to the to a

00:21:29,129 --> 00:21:33,629
specific hardware to for example can

00:21:31,950 --> 00:21:35,879
zero you have the packet scheduler that

00:21:33,629 --> 00:21:38,669
schedules the packets so you can send

00:21:35,879 --> 00:21:42,230
like whatever 20 packets also and the

00:21:38,669 --> 00:21:46,049
hardware sends it out as fast as it can

00:21:42,230 --> 00:21:50,309
and if you use this in the in your

00:21:46,049 --> 00:21:52,710
system systemd sets the quatl scheduler

00:21:50,309 --> 00:21:55,769
as default if you don't change anything

00:21:52,710 --> 00:21:59,269
and this coddle has been as far as are

00:21:55,769 --> 00:22:03,509
now optimized for TCP and Ethernet

00:21:59,269 --> 00:22:07,230
automatic Wentworth is Wi-Fi and so on

00:22:03,509 --> 00:22:10,019
and as if I understand it correctly it

00:22:07,230 --> 00:22:13,799
drops packages in the front of the queue

00:22:10,019 --> 00:22:16,919
if the queue grows louder than five

00:22:13,799 --> 00:22:21,809
milliseconds there is a burst limit of

00:22:16,919 --> 00:22:28,470
100 milliseconds or so but packets are

00:22:21,809 --> 00:22:31,460
dropped and on can the network itself

00:22:28,470 --> 00:22:34,710
so the underlying hardware tries to

00:22:31,460 --> 00:22:37,140
guarantee that you don't lose packets

00:22:34,710 --> 00:22:38,760
and there even is half a base

00:22:37,140 --> 00:22:42,510
retransmission if there is no one

00:22:38,760 --> 00:22:44,910
listening for packets so it's really

00:22:42,510 --> 00:22:48,480
hard to explain your chief engineer that

00:22:44,910 --> 00:22:55,620
your UNIX system drops packets because

00:22:48,480 --> 00:22:58,350
it thinks accused so long so for now if

00:22:55,620 --> 00:23:02,600
you send a bike amount of data with your

00:22:58,350 --> 00:23:06,540
can and use quatl as your scheduler you

00:23:02,600 --> 00:23:09,000
see packets dropped dropping but you

00:23:06,540 --> 00:23:11,760
don't see it on the sending side only if

00:23:09,000 --> 00:23:15,150
you look at the traffic schedule at will

00:23:11,760 --> 00:23:17,460
then you can look it up but your normal

00:23:15,150 --> 00:23:19,920
send system call just comes back and

00:23:17,460 --> 00:23:24,870
says yeah I've sent a packet and the

00:23:19,920 --> 00:23:26,430
network driver sends the packets but the

00:23:24,870 --> 00:23:29,960
scheduler in between drops them and you

00:23:26,430 --> 00:23:34,350
get no real feedback to use our space

00:23:29,960 --> 00:23:38,820
now this is a problem yeah if you stay

00:23:34,350 --> 00:23:41,610
to FIFO PF FIFO scheduler you get

00:23:38,820 --> 00:23:43,470
noticed because it drops at the end and

00:23:41,610 --> 00:23:46,350
then you are senses and called just

00:23:43,470 --> 00:23:50,340
returns and says I have no buffers left

00:23:46,350 --> 00:23:52,290
please try again later this is the

00:23:50,340 --> 00:23:55,560
problem we face your own can because you

00:23:52,290 --> 00:24:01,170
don't get noticed that your packet has

00:23:55,560 --> 00:24:04,770
been dropped and then there is this air

00:24:01,170 --> 00:24:06,830
quotes usual blaming system D blames the

00:24:04,770 --> 00:24:09,900
kernel and the kernel blame system D

00:24:06,830 --> 00:24:14,190
wide assistant he set this default and

00:24:09,900 --> 00:24:16,830
this system D says yeah why dozens a

00:24:14,190 --> 00:24:21,240
driver specify which queueing discipline

00:24:16,830 --> 00:24:25,140
it wants to have as far as I can see

00:24:21,240 --> 00:24:27,840
there is no interface that the driver

00:24:25,140 --> 00:24:30,120
can specify I want to have this packet

00:24:27,840 --> 00:24:35,970
scheduler this queueing discipline or I

00:24:30,120 --> 00:24:39,520
want to have another what I have in mind

00:24:35,970 --> 00:24:43,630
is maybe the driver can say

00:24:39,520 --> 00:24:46,120
yes I'm a network interface and I don't

00:24:43,630 --> 00:24:49,110
tolerate that you drop packets in your

00:24:46,120 --> 00:24:52,420
scheduler without noticing the user

00:24:49,110 --> 00:24:55,900
maybe this is a some kind of interface

00:24:52,420 --> 00:25:03,640
we want to or we can add they're in the

00:24:55,900 --> 00:25:05,590
driver someone here who is who is

00:25:03,640 --> 00:25:09,340
familiar with packet schedulers and

00:25:05,590 --> 00:25:11,440
stuff I think I think you know this this

00:25:09,340 --> 00:25:13,180
problem is not specifically related to

00:25:11,440 --> 00:25:15,640
the queuing discipline you know this

00:25:13,180 --> 00:25:18,370
problem is related to the feedback that

00:25:15,640 --> 00:25:21,520
we expect from the link layer to be

00:25:18,370 --> 00:25:25,150
propagated up to the bolyar specifically

00:25:21,520 --> 00:25:27,310
if there is a drop this is this is this

00:25:25,150 --> 00:25:30,130
because this same requirement we have in

00:25:27,310 --> 00:25:31,840
context to 15.4 as well where we want to

00:25:30,130 --> 00:25:33,490
know whether a unicast packet that has

00:25:31,840 --> 00:25:36,430
been transmitted and has been

00:25:33,490 --> 00:25:38,140
acknowledgment and if it has

00:25:36,430 --> 00:25:42,490
acknowledged or whether if it has not

00:25:38,140 --> 00:25:45,430
been acknowledged mamrie of propagating

00:25:42,490 --> 00:25:48,100
the same feedback to the Abal error so

00:25:45,430 --> 00:25:49,510
what I'm trying to say is irrespective

00:25:48,100 --> 00:25:50,800
of the queueing discipline because P

00:25:49,510 --> 00:25:55,420
queuing discipline doesn't have any

00:25:50,800 --> 00:25:56,440
input from the below layer so even if

00:25:55,420 --> 00:26:05,320
you change the queueing discipline it

00:25:56,440 --> 00:26:09,340
won't it won't really help if you stick

00:26:05,320 --> 00:26:12,070
to here FIFO that that helps on the

00:26:09,340 --> 00:26:14,080
cancer at least we you I then we got a

00:26:12,070 --> 00:26:16,950
feedback - from you - user space

00:26:14,080 --> 00:26:25,960
certificate has been dropped in such a

00:26:16,950 --> 00:26:28,570
scheduler exam now so - the feedback

00:26:25,960 --> 00:26:31,360
according the acknowledgement if there

00:26:28,570 --> 00:26:33,700
was an acknowledgement or not Wireless

00:26:31,360 --> 00:26:38,710
has already such feature and this goes

00:26:33,700 --> 00:26:41,560
over the socket Evoque you to get a

00:26:38,710 --> 00:26:45,760
feedback back if the Mo's acknowledgment

00:26:41,560 --> 00:26:49,330
or not so fine oh this is also some bit

00:26:45,760 --> 00:26:52,480
flag currently in some in a bit field

00:26:49,330 --> 00:26:53,470
mapped that it's currently only used in

00:26:52,480 --> 00:26:56,920
wireless but

00:26:53,470 --> 00:27:00,730
we can also use it I think for 800 254

00:26:56,920 --> 00:27:05,050
because it depends on the link layer is

00:27:00,730 --> 00:27:13,480
it a general network device flack or is

00:27:05,050 --> 00:27:16,090
it specific to 5 4 or 11 or I have no

00:27:13,480 --> 00:27:20,710
idea but your harness pack is here on

00:27:16,090 --> 00:27:24,220
London you can Afghan there was a huge

00:27:20,710 --> 00:27:26,970
systemd issue where things are being

00:27:24,220 --> 00:27:32,560
discussed and there was a proposition to

00:27:26,970 --> 00:27:34,690
add the no cue flag to the network

00:27:32,560 --> 00:27:36,820
device but it doesn't work it gives

00:27:34,690 --> 00:27:40,060
different feedback it says a link down

00:27:36,820 --> 00:27:42,570
if the queue is full and if you do

00:27:40,060 --> 00:27:45,220
something wrong even the colonel says

00:27:42,570 --> 00:27:48,580
virtual interface or virtual device

00:27:45,220 --> 00:27:50,950
trying to schedule a cube heckard

00:27:48,580 --> 00:27:55,690
something like this and then someone

00:27:50,950 --> 00:27:58,240
pointed out that the thought 11 guys

00:27:55,690 --> 00:28:02,770
have switched the network devices to no

00:27:58,240 --> 00:28:04,090
queue at all and I'm wondering I had no

00:28:02,770 --> 00:28:09,370
time to look at that but I'm wondering

00:28:04,090 --> 00:28:12,100
how they do it so the queue length of

00:28:09,370 --> 00:28:16,390
your Wi-Fi interface in Linux maybe you

00:28:12,100 --> 00:28:18,490
can check to run Linux currently can you

00:28:16,390 --> 00:28:22,150
check the cooling of your Wi-Fi

00:28:18,490 --> 00:28:28,060
interface it should be zero as far as I

00:28:22,150 --> 00:28:31,080
I notice from that discussion I remember

00:28:28,060 --> 00:28:34,540
there was some change from I made a

00:28:31,080 --> 00:28:37,330
changed as a new new queue was really

00:28:34,540 --> 00:28:39,880
coq at first but somebody added Affleck

00:28:37,330 --> 00:28:43,990
to make some performance hint in the

00:28:39,880 --> 00:28:49,120
kernel that yeah it's just some speed up

00:28:43,990 --> 00:28:52,720
or not this I have no queue before it

00:28:49,120 --> 00:28:54,700
was really the txq Lang was CEO and

00:28:52,720 --> 00:29:02,290
somebody had a dis flag to make some

00:28:54,700 --> 00:29:04,210
performance speed ups Wow I don't ok

00:29:02,290 --> 00:29:07,150
maybe we can talk to we can find the

00:29:04,210 --> 00:29:09,850
wireless guys and talk to them

00:29:07,150 --> 00:29:12,690
we just looked here on a random laptop

00:29:09,850 --> 00:29:16,090
and it has Q line of 1000 maybe

00:29:12,690 --> 00:29:24,130
something different but in Wireless and

00:29:16,090 --> 00:29:31,650
then the 5.4 you have got ascending soft

00:29:24,130 --> 00:29:31,650
IQ or worker or something a separate one

00:29:32,100 --> 00:29:39,400
you have a different you have a context

00:29:34,840 --> 00:29:53,200
on your own not just the net TX soft IQ

00:29:39,400 --> 00:29:55,210
but a separate one okay details so I had

00:29:53,200 --> 00:30:03,700
someone questions on on this or a

00:29:55,210 --> 00:30:05,950
different topic just there already

00:30:03,700 --> 00:30:13,120
conclude to j1939 or just this

00:30:05,950 --> 00:30:15,760
particular discussion about just the

00:30:13,120 --> 00:30:18,990
Picard scheduler I think we have some

00:30:15,760 --> 00:30:23,080
input and find the right guys here and

00:30:18,990 --> 00:30:25,120
talk to them so there is a wireless

00:30:23,080 --> 00:30:27,100
workshop I think one or two rooms over

00:30:25,120 --> 00:30:28,870
there the whole day so you should can

00:30:27,100 --> 00:30:30,310
flip in there and if not just find your

00:30:28,870 --> 00:30:32,020
harness or something to get some idea on

00:30:30,310 --> 00:30:32,470
the how they're using the feedback on

00:30:32,020 --> 00:30:34,990
the socket

00:30:32,470 --> 00:30:36,670
rrq and you have a few more minutes so

00:30:34,990 --> 00:30:39,540
if you have other questions on cam you

00:30:36,670 --> 00:30:43,390
can do that as well now

00:30:39,540 --> 00:30:49,390
yeah regarding the socket Eric who we

00:30:43,390 --> 00:30:52,060
want to add this to the j1939 as well I

00:30:49,390 --> 00:30:57,910
think it was one or one of the features

00:30:52,060 --> 00:30:59,920
you basically can I think it's a receive

00:30:57,910 --> 00:31:04,800
message or something like this from user

00:30:59,920 --> 00:31:09,850
space and then you can from the corner

00:31:04,800 --> 00:31:15,070
put auxiliary data somewhere and say

00:31:09,850 --> 00:31:17,050
this certain packet got a error or

00:31:15,070 --> 00:31:19,900
something and even specify what kind of

00:31:17,050 --> 00:31:21,840
a row so you can do this from I think

00:31:19,900 --> 00:31:26,679
you are

00:31:21,840 --> 00:31:27,820
not the driver but I could family or

00:31:26,679 --> 00:31:32,020
something in the middle

00:31:27,820 --> 00:31:34,929
you can attach information to a you can

00:31:32,020 --> 00:31:39,700
put information to the it's you're

00:31:34,929 --> 00:31:43,559
receiving socket and can somehow or

00:31:39,700 --> 00:31:43,559
identify the packet that had a problem

00:31:43,800 --> 00:31:47,710
just a normal socket op the hope that

00:31:45,880 --> 00:31:49,720
you have certain fifteen or fourth valve

00:31:47,710 --> 00:31:51,160
for the link quality indicator value you

00:31:49,720 --> 00:31:53,140
have to trust recently added for that

00:31:51,160 --> 00:31:55,840
and VF more informations were that you

00:31:53,140 --> 00:31:58,570
asking for for routing specific purpose

00:31:55,840 --> 00:32:00,580
on top we need to add more information

00:31:58,570 --> 00:32:02,200
there but we have it for IKEA okay so

00:32:00,580 --> 00:32:04,210
it's a really simple petrol I mean

00:32:02,200 --> 00:32:06,250
that's really easy cleared actually so

00:32:04,210 --> 00:32:11,230
you have other questions for Ken or

00:32:06,250 --> 00:32:15,429
because you do you have any slide that

00:32:11,230 --> 00:32:21,370
shows how the usage of the 1939

00:32:15,429 --> 00:32:27,250
stack looks like sockets bind connect

00:32:21,370 --> 00:32:30,520
read write is there still in the PF can

00:32:27,250 --> 00:32:32,140
family like a new saw constant that

00:32:30,520 --> 00:32:34,260
you're adding this or how does it fit in

00:32:32,140 --> 00:32:37,830
with you know the the rock and socket

00:32:34,260 --> 00:32:45,790
you don't open a rock and Sarkozy opener

00:32:37,830 --> 00:32:50,760
can j1939 socket so it's I'm not sure

00:32:45,790 --> 00:32:55,179
about the details but yeah open j1939

00:32:50,760 --> 00:32:57,700
socket and then basically behaves now

00:32:55,179 --> 00:33:01,920
when we are finished like UDP you can

00:32:57,700 --> 00:33:07,030
you have to bind to your interface and

00:33:01,920 --> 00:33:08,380
and can read message sent message or if

00:33:07,030 --> 00:33:14,940
you connect you don't have to specify

00:33:08,380 --> 00:33:14,940
the home to destination address

00:33:24,479 --> 00:33:27,479
okay

00:34:03,900 --> 00:34:07,019
[Music]

00:34:29,070 --> 00:34:32,379
[Music]

00:36:30,530 --> 00:36:33,689
[Music]

00:36:39,140 --> 00:36:44,660
so that around

00:38:28,430 --> 00:38:42,260
and so if you

00:38:55,579 --> 00:39:43,729
so different

00:40:09,360 --> 00:40:12,459
[Music]

00:40:54,440 --> 00:40:57,570
[Music]

00:41:18,380 --> 00:41:21,530
[Music]

00:41:41,640 --> 00:41:44,750
[Music]

00:42:45,930 --> 00:42:49,060
[Music]

00:43:02,120 --> 00:43:11,580
hello hello hello so the question is

00:43:09,030 --> 00:43:13,530
regarding the you mentioned extending

00:43:11,580 --> 00:43:33,570
the neighbor table or the neighbor state

00:43:13,530 --> 00:43:34,740
information the reason why I mentioned

00:43:33,570 --> 00:43:36,120
this is because if we keep the

00:43:34,740 --> 00:43:38,820
information in the neighbor state in for

00:43:36,120 --> 00:43:40,830
me in the neighbor table itself it would

00:43:38,820 --> 00:43:42,240
end up extending the structure just for

00:43:40,830 --> 00:43:46,200
this purpose and I don't know whether

00:43:42,240 --> 00:43:49,880
there is a way to not complicate stuff

00:43:46,200 --> 00:43:49,880
for other link layers make it an

00:43:59,360 --> 00:44:04,820
attendee talking about the IP neighbor

00:44:04,880 --> 00:44:11,460
neighbor structure yet we already

00:44:09,660 --> 00:44:14,120
stowing some link layer information

00:44:11,460 --> 00:44:19,590
there which is this short address but

00:44:14,120 --> 00:44:22,890
destruct nay it has like tentative

00:44:19,590 --> 00:44:25,830
interface up I would

00:44:22,890 --> 00:44:29,850
my movie area so you can say for this

00:44:25,830 --> 00:44:33,630
net device for this type I want to have

00:44:29,850 --> 00:44:36,270
a type specific extension you you say

00:44:33,630 --> 00:44:40,560
allocate this memory more and then use

00:44:36,270 --> 00:44:43,470
it as a private memory area where you

00:44:40,560 --> 00:44:46,170
can store additional memories for this

00:44:43,470 --> 00:44:50,340
specific net def interface so when this

00:44:46,170 --> 00:44:53,220
is 6lowpan currently we use in the

00:44:50,340 --> 00:44:54,090
private area structure of the net device

00:44:53,220 --> 00:44:56,910
of 6lowpan

00:44:54,090 --> 00:45:01,020
you have to link layer information which

00:44:56,910 --> 00:45:05,070
can be currently Bluetooth or 802 15 4

00:45:01,020 --> 00:45:08,310
and then we make the same thing again we

00:45:05,070 --> 00:45:11,580
in the neighbor they exist 6 loop and

00:45:08,310 --> 00:45:17,240
specific private area then this should

00:45:11,580 --> 00:45:21,000
be some stowage information which is

00:45:17,240 --> 00:45:25,380
6lowpan only I don't know then you have

00:45:21,000 --> 00:45:30,810
some compression which are on all link

00:45:25,380 --> 00:45:34,830
layers 800 2004 and Bluetooth or two of

00:45:30,810 --> 00:45:37,550
them then it should be stored there but

00:45:34,830 --> 00:45:40,680
then they exist pair neighbor also

00:45:37,550 --> 00:45:43,440
additional link layer private area

00:45:40,680 --> 00:45:45,540
they are currently currently there is

00:45:43,440 --> 00:45:50,160
the short address you can dig into the

00:45:45,540 --> 00:45:53,790
code and there are some private memory

00:45:50,160 --> 00:45:56,310
area length thanks so when the kernel

00:45:53,790 --> 00:46:01,320
allocates the structure neighbor that it

00:45:56,310 --> 00:46:03,410
allocates more memory for your storage

00:46:01,320 --> 00:46:06,560
what you want to have her neighbor

00:46:03,410 --> 00:46:06,560
additional and

00:46:18,660 --> 00:46:21,750
[Music]

00:46:30,980 --> 00:46:33,980
so

00:47:18,760 --> 00:47:22,949
[Music]

00:47:37,040 --> 00:47:40,099
[Music]

00:48:07,360 --> 00:48:10,449
[Music]

00:48:19,690 --> 00:48:26,989
so for the short address it was just

00:48:23,829 --> 00:48:29,329
this is already this information we get

00:48:26,989 --> 00:48:33,220
from the neighbor discovery we messaged

00:48:29,329 --> 00:48:37,279
the address options where we get it and

00:48:33,220 --> 00:48:39,859
you know for link layer specific more

00:48:37,279 --> 00:48:41,960
link layer specific things that you

00:48:39,859 --> 00:48:47,479
don't get from neighbor discovery

00:48:41,960 --> 00:48:52,239
protocols you know then we need to have

00:48:47,479 --> 00:48:52,239
some other place and

00:48:59,410 --> 00:49:03,130
so the other question was regarding so

00:49:01,509 --> 00:49:04,660
most of the compression schemes that I

00:49:03,130 --> 00:49:07,150
mentioned here are for the data plane

00:49:04,660 --> 00:49:09,400
the IP HC the NHIN external compression

00:49:07,150 --> 00:49:12,099
generator compression or all for data

00:49:09,400 --> 00:49:13,960
plane there are certain compression

00:49:12,099 --> 00:49:16,539
scheme for the control plane as well

00:49:13,960 --> 00:49:17,019
especially for social outing header

00:49:16,539 --> 00:49:43,480
compression

00:49:17,019 --> 00:49:59,319
6la rich a28 so there has been a

00:49:43,480 --> 00:50:01,539
consideration that it's just not in gh C

00:49:59,319 --> 00:50:05,200
is there not a part where they

00:50:01,539 --> 00:50:09,569
technically issue that to discover what

00:50:05,200 --> 00:50:09,569
the neighbor is supported according the

00:50:46,410 --> 00:50:51,480
I don't want to go

00:51:33,309 --> 00:51:39,170
Alex you might recall that we had a

00:51:35,539 --> 00:51:41,299
discussion related to an ocean protocol

00:51:39,170 --> 00:51:42,980
which is pretty similar to that neighbor

00:51:41,299 --> 00:51:45,700
discussion in that it also kind of

00:51:42,980 --> 00:51:48,680
requires to store some additional

00:51:45,700 --> 00:51:51,049
descriptive data of like what profile or

00:51:48,680 --> 00:51:54,440
other kind of configuration a remote

00:51:51,049 --> 00:51:56,329
device refers to and for now I was kind

00:51:54,440 --> 00:51:57,799
of resorting to device tree although I

00:51:56,329 --> 00:52:00,259
think that it's not really clean

00:51:57,799 --> 00:52:02,750
solution because it would like describe

00:52:00,259 --> 00:52:05,359
remote devices as if they were local and

00:52:02,750 --> 00:52:08,059
it wouldn't work with these CPI so if we

00:52:05,359 --> 00:52:31,970
could extract this concept going beyond

00:52:08,059 --> 00:52:34,460
just like neighbors neighbors not

00:52:31,970 --> 00:52:37,579
knowing anything about ocean do they

00:52:34,460 --> 00:52:40,069
have a discovery scheme can to discover

00:52:37,579 --> 00:52:42,559
the capabilities you want to store you

00:52:40,069 --> 00:52:44,029
can discover the existence of devices

00:52:42,559 --> 00:52:47,319
but you can't discover how they

00:52:44,029 --> 00:52:47,319
interpret their payload data

00:52:59,840 --> 00:53:03,750
sorry if this is a really stupid

00:53:01,800 --> 00:53:05,790
question but if you put the neighbor

00:53:03,750 --> 00:53:07,710
data into the neighbor table on the IP

00:53:05,790 --> 00:53:10,770
level what happens if the neighbor has

00:53:07,710 --> 00:53:19,340
more than one address is that even

00:53:10,770 --> 00:53:19,340
supported or you mean link layer address

00:53:21,230 --> 00:53:25,619
you were saying earlier that you could

00:53:24,090 --> 00:53:27,540
put the data into the neighbor table in

00:53:25,619 --> 00:54:15,150
the kernel but that is the IP neighbour

00:53:27,540 --> 00:54:17,100
table right or would you keep us in

00:54:15,150 --> 00:54:23,760
touch because we have to addressing

00:54:17,100 --> 00:54:28,470
schemes in j1939 as well so there is a 8

00:54:23,760 --> 00:54:31,280
byte address which is then mapped were a

00:54:28,470 --> 00:54:31,280
bit address

00:54:37,110 --> 00:54:52,020
there are some you know we don't have

00:54:47,110 --> 00:54:55,780
any mac address or IP address so maybe

00:54:52,020 --> 00:54:57,490
yeah we look in that stuff we already

00:54:55,780 --> 00:55:00,490
have an implementation but why to

00:54:57,490 --> 00:55:04,840
duplicate stuff when there's something

00:55:00,490 --> 00:55:07,450
around in the column yeah I can I think

00:55:04,840 --> 00:56:32,280
we talked already about it some last

00:55:07,450 --> 00:56:32,280
conference about and they do some music

00:57:02,609 --> 00:57:07,989
we count out from the party

00:57:05,499 --> 00:57:15,579
interpretation we made it work across

00:57:07,989 --> 00:57:19,449
Stricker comes to be my page and ominous

00:57:15,579 --> 00:57:42,910
color our primary is kiss was so we

00:57:19,449 --> 00:57:44,799
don't have the so deviation so let me

00:57:42,910 --> 00:57:47,439
just talk about one of the mood of

00:57:44,799 --> 00:57:50,079
integration which is most popular and

00:57:47,439 --> 00:57:53,439
has been mostly used today which is the

00:57:50,079 --> 00:57:55,479
sleep mode of a depiction wherein you

00:57:53,439 --> 00:58:00,269
use you don't actually make use of the

00:57:55,479 --> 00:58:00,269
next random take the day you will have

00:58:01,529 --> 00:58:06,219
so you need to go another device which

00:58:04,449 --> 00:58:09,039
connects over step over USB

00:58:06,219 --> 00:58:10,630
oh the Linux PC then most of the

00:58:09,039 --> 00:58:14,829
compression innovation happens here and

00:58:10,630 --> 00:58:18,089
the battery so this is this is the this

00:58:14,829 --> 00:58:18,089
is the you say

00:59:50,330 --> 00:59:56,130
my services so from the ending

00:59:55,140 --> 00:59:58,830
perspective from their activities

00:59:56,130 --> 01:00:01,350
perspective we need to register for

00:59:58,830 --> 01:00:03,390
editing failure than success events for

01:00:01,350 --> 01:00:06,870
every unicast packet if it's a

01:00:03,390 --> 01:00:08,250
successful transmission so the 4th

01:00:06,870 --> 01:00:10,980
automatic calibration we need to know

01:00:08,250 --> 01:00:15,420
how many times was the packet retried

01:00:10,980 --> 01:00:17,190
and then implemented information and for

01:00:15,420 --> 01:00:18,390
the table basis for the routing people

01:00:17,190 --> 01:00:21,220
there are modes of operation that

01:00:18,390 --> 01:00:24,280
progress in my story

01:00:21,220 --> 01:00:24,280
[Music]

01:00:34,410 --> 01:01:53,440
so this is so because the RTI of the

01:01:50,670 --> 01:01:55,109
information this is the this is the

01:01:53,440 --> 01:01:57,670
change which is required at the database

01:01:55,109 --> 01:02:00,849
every little packet needs to carry the

01:01:57,670 --> 01:02:02,829
6.2 header which has a Phoenix Society

01:02:00,849 --> 01:02:06,160
and some other information at a center

01:02:02,829 --> 01:02:09,339
racks which helps in group avoidance in

01:02:06,160 --> 01:02:12,579
detection so this is required together

01:02:09,339 --> 01:02:14,740
in everyday that I had this you know

01:02:12,579 --> 01:02:18,299
this we ended up this this required to

01:02:14,740 --> 01:02:18,299
be male hand so we ended up using

01:03:02,950 --> 01:03:06,010
[Music]

01:03:35,340 --> 01:04:09,330
so this is my definition the Roman table

01:04:03,280 --> 01:04:09,330
into pieces showing em okay we need to

01:04:11,450 --> 01:04:16,880
such a party this and some additional

01:04:17,180 --> 01:04:23,610
this is there for storing vocational

01:04:19,980 --> 01:04:28,290
school on the entire table we need to

01:04:23,610 --> 01:04:32,520
keep we have way of keeping the metric

01:04:28,290 --> 01:04:36,270
information of mists this is something

01:04:32,520 --> 01:04:38,730
which is like we had some discussion

01:04:36,270 --> 01:04:46,080
before there is a possibility of doing

01:04:38,730 --> 01:04:48,420
it on a thesis similarly we need to be

01:04:46,080 --> 01:04:50,910
innovative identification feels better

01:04:48,420 --> 01:05:05,120
than temperature if we have some

01:04:50,910 --> 01:05:05,120
specification for custom dimensions

01:05:11,040 --> 01:05:18,400
yeah for the for the first item Z aka

01:05:15,610 --> 01:05:20,110
value that actually being reported

01:05:18,400 --> 01:05:21,490
already that's a recent addition to one

01:05:20,110 --> 01:05:24,280
of the last kernels I sent you the mail

01:05:21,490 --> 01:05:26,170
about that for the failure and success

01:05:24,280 --> 01:05:27,370
reporting of the mega rose I mentioned

01:05:26,170 --> 01:05:29,410
that before that's something I need to

01:05:27,370 --> 01:05:31,120
sing and gets a Linda but I see that

01:05:29,410 --> 01:05:32,860
there is a good use case for that and I

01:05:31,120 --> 01:05:35,530
just need to figure out where to put

01:05:32,860 --> 01:05:36,850
that and if it's a sake option or if you

01:05:35,530 --> 01:05:39,910
just something you get for the may work

01:05:36,850 --> 01:06:15,280
I don't know yet for the routing stuff

01:05:39,910 --> 01:06:17,890
that's something I most of the time but

01:06:15,280 --> 01:06:20,500
this the sense to me like what you would

01:06:17,890 --> 01:06:24,400
need is to have the routing daemon in

01:06:20,500 --> 01:06:25,870
userspace with some special way to feed

01:06:24,400 --> 01:06:29,080
the data from the kernel to the user

01:06:25,870 --> 01:06:31,660
space on pretty much every single packet

01:06:29,080 --> 01:06:33,370
that you receive I guess and then you

01:06:31,660 --> 01:06:35,080
could keep all of the information in

01:06:33,370 --> 01:06:37,570
that routing daemon and just feed back

01:06:35,080 --> 01:06:38,800
the necessary information to the kernel

01:06:37,570 --> 01:06:41,020
that the kernel needs to actually send

01:06:38,800 --> 01:06:43,000
the packets which is what we would

01:06:41,020 --> 01:06:44,680
normally do in an fr outing because we

01:06:43,000 --> 01:06:46,750
try to keep as little information in the

01:06:44,680 --> 01:06:49,870
kernel as possible so it only has the

01:06:46,750 --> 01:06:51,550
routing table entries I don't know

01:06:49,870 --> 01:06:53,770
enough about the protocol to know

01:06:51,550 --> 01:06:56,050
whether this is feasible to do for

01:06:53,770 --> 01:06:57,550
ripple I don't know what the what

01:06:56,050 --> 01:06:59,980
exactly the extra information is that

01:06:57,550 --> 01:07:01,990
the kernel needs I suppose you already

01:06:59,980 --> 01:07:03,790
have the interface to get all the packet

01:07:01,990 --> 01:07:05,560
data because you could just run a peak

01:07:03,790 --> 01:07:08,080
app essentially on the ripple interface

01:07:05,560 --> 01:07:10,540
and just feed the extra information

01:07:08,080 --> 01:07:14,440
there but I guess that's not the

01:07:10,540 --> 01:07:17,380
cleanest way of doing things but yeah

01:07:14,440 --> 01:07:18,880
yeah we try to minimize the information

01:07:17,380 --> 01:07:20,840
that we have in the kernel that that is

01:07:18,880 --> 01:07:48,560
the routing approach

01:07:20,840 --> 01:07:51,560
normal closest thing in similarity is

01:07:48,560 --> 01:07:54,550
the Babel routing protocol which is just

01:07:51,560 --> 01:07:57,200
mesh routing so it only really uses

01:07:54,550 --> 01:07:59,990
information on its hello packets so

01:07:57,200 --> 01:08:01,910
there the thing is because it only uses

01:07:59,990 --> 01:08:03,920
its own packets to determine link

01:08:01,910 --> 01:08:12,760
quality it's far easier to deal with the

01:08:03,920 --> 01:08:12,760
problem so yes

01:08:21,209 --> 01:08:26,999
so no more questions on this no more

01:08:23,400 --> 01:08:29,699
comments yeah I think yeah since is the

01:08:26,999 --> 01:08:31,529
routing Paris really contribute

01:08:29,699 --> 01:08:34,349
problematic you need to get more people

01:08:31,529 --> 01:08:37,529
involved in that that's not really my

01:08:34,349 --> 01:08:41,279
area of expertise and as people don't

01:08:37,529 --> 01:08:45,920
know about ripple as well so that's so

01:08:41,279 --> 01:08:49,769
um I used one time the unstrung the

01:08:45,920 --> 01:08:52,199
implementation and but this is only a

01:08:49,769 --> 01:08:55,019
mixed MFA's I don't know I think it's

01:08:52,199 --> 01:08:57,059
stowing mode which is the simple part

01:08:55,019 --> 01:09:00,630
and the nonce towing is the complicated

01:08:57,059 --> 01:09:05,130
part because need to add something in

01:09:00,630 --> 01:09:09,299
the IP options to some more headers and

01:09:05,130 --> 01:09:12,029
I don't know I don't know we're very

01:09:09,299 --> 01:09:16,499
linux can is actually doing that at some

01:09:12,029 --> 01:09:19,529
point and also you only you also need to

01:09:16,499 --> 01:09:21,929
say yeah please don't drop the package

01:09:19,529 --> 01:09:26,809
because readings can be drop everything

01:09:21,929 --> 01:09:26,809
which it doesn't know what des recently

01:09:29,929 --> 01:10:08,329
yeah it sounds like but I'm I would

01:10:05,309 --> 01:10:09,989
already be lucky that destroying mode I

01:10:08,329 --> 01:10:11,400
would be very happy

01:10:09,989 --> 01:10:12,959
Bendis knowing when we have a

01:10:11,400 --> 01:10:17,429
implementation may be storing more it

01:10:12,959 --> 01:10:19,909
could be warning where we were yeah yeah

01:10:17,429 --> 01:10:19,909
thank you

01:10:20,210 --> 01:10:25,499
[Applause]

01:11:04,500 --> 01:11:07,500
useful

01:11:24,820 --> 01:11:27,920
[Music]

01:11:49,570 --> 01:11:52,680
[Music]

01:12:23,110 --> 01:12:29,780
yeah we have these tools and they are

01:12:25,460 --> 01:12:34,310
called Ken tests but they are not really

01:12:29,780 --> 01:12:39,040
ready for automatic testing yet I had a

01:12:34,310 --> 01:12:43,130
short look at tighten this network

01:12:39,040 --> 01:12:43,580
testing stuff but this is a piece of its

01:12:43,130 --> 01:13:09,080
own

01:12:43,580 --> 01:13:13,370
I have no yeah yes at least I headed so

01:13:09,080 --> 01:13:15,590
far that it compiles on Debian but to

01:13:13,370 --> 01:13:18,890
get really into it it just took too much

01:13:15,590 --> 01:13:27,710
time to get it done in the remaining 10%

01:13:18,890 --> 01:13:29,930
or so so we have some tests but why I

01:13:27,710 --> 01:13:32,560
don't think they run quite well

01:13:29,930 --> 01:13:32,560
automated

01:13:45,090 --> 01:13:48,860
if I had time I would like to improve

01:14:04,350 --> 01:14:07,409
[Music]

01:14:14,330 --> 01:14:22,820
ask for it to have it enabled in default

01:14:18,199 --> 01:14:28,560
in the deaf convict or deaf convicts for

01:14:22,820 --> 01:14:39,540
x86 so we get quite a lot of this color

01:14:28,560 --> 01:14:42,900
just called as a feedback yes since you

01:14:39,540 --> 01:14:45,780
can buy can USB adapters just plug them

01:14:42,900 --> 01:15:07,650
into your Ubuntu everything works it's

01:14:45,780 --> 01:15:12,300
it's enabled by default this collage

01:15:07,650 --> 01:15:13,820
just in air quotes just tests setting up

01:15:12,300 --> 01:15:18,300
interfaces tearing it down

01:15:13,820 --> 01:15:21,510
and if there are some not handled null

01:15:18,300 --> 01:15:23,460
pointer dereferences or use after fee or

01:15:21,510 --> 01:15:28,130
something like that you get you get a

01:15:23,460 --> 01:15:31,020
nice report back they don't even use

01:15:28,130 --> 01:15:37,640
hardware or simulator taffy for testing

01:15:31,020 --> 01:15:37,640
I think but that's more than nothing

01:15:39,030 --> 01:15:48,580
one more point we have visual Ken so you

01:15:42,850 --> 01:15:53,830
can actually create a canvas report here

01:15:48,580 --> 01:15:55,989
in any Ken hardware and so you can do

01:15:53,830 --> 01:15:59,070
point-to-point transfers just locally

01:15:55,989 --> 01:16:02,620
between two applications or whatever and

01:15:59,070 --> 01:16:07,600
last year was QE move was extended with

01:16:02,620 --> 01:16:11,940
can support so we can use your show Ken

01:16:07,600 --> 01:16:11,940
on the host system to talk

01:16:13,310 --> 01:16:16,479
[Music]

01:16:27,170 --> 01:16:30,300
[Music]

01:16:32,490 --> 01:16:38,159
[Music]

01:16:41,240 --> 01:16:44,300
[Music]

01:17:18,140 --> 01:17:21,239
[Music]

01:18:09,150 --> 01:18:12,929
so speaking for the writing area what is

01:18:11,639 --> 01:18:15,570
happening with all the hardware

01:18:12,929 --> 01:18:18,479
capabilities of switches and routers is

01:18:15,570 --> 01:18:20,249
that they are being kind of hidden

01:18:18,479 --> 01:18:22,440
between existing Linux functionality

01:18:20,249 --> 01:18:25,710
with which is then offloaded into the

01:18:22,440 --> 01:18:27,090
hardware so the way we would do this for

01:18:25,710 --> 01:18:28,499
the routing table is the routing table

01:18:27,090 --> 01:18:30,780
is just installed normally in the kernel

01:18:28,499 --> 01:18:33,239
and then propagated down to the chip and

01:18:30,780 --> 01:18:35,789
the same is currently happening with TC

01:18:33,239 --> 01:18:37,380
filter rules so if you create a TC

01:18:35,789 --> 01:18:39,389
filter rule from user space in the

01:18:37,380 --> 01:18:43,489
kernel the kernel will also propagate it

01:18:39,389 --> 01:18:43,489
down to the hardware through an API and

01:18:43,519 --> 01:18:46,519
then

01:19:36,360 --> 01:19:42,580
before I hand over the mic the the

01:19:39,970 --> 01:19:43,840
distinction here is that I'm not

01:19:42,580 --> 01:19:44,860
completely sure about the futures on

01:19:43,840 --> 01:19:46,450
everything here but I think this is

01:19:44,860 --> 01:19:48,760
something you actually need to do right

01:19:46,450 --> 01:19:51,910
so to implement the protocol properly

01:19:48,760 --> 01:19:53,410
you need this functionality and I would

01:19:51,910 --> 01:19:56,860
be very reluctant to rely on

01:19:53,410 --> 01:19:58,780
xdp to implement a function that must be

01:19:56,860 --> 01:20:01,090
provided for the entire thing to work

01:19:58,780 --> 01:20:03,280
correctly so I wouldn't want to move

01:20:01,090 --> 01:20:05,830
somewhere where I absolutely need to

01:20:03,280 --> 01:20:07,990
have this xtp part just to get it

01:20:05,830 --> 01:20:11,500
working correctly so there should always

01:20:07,990 --> 01:20:13,080
be some kind of standard kernel

01:20:11,500 --> 01:20:15,670
implementation that does the same thing

01:20:13,080 --> 01:20:16,930
somewhere and it sounds like it does

01:20:15,670 --> 01:20:21,940
need to be in the kernel to get the

01:20:16,930 --> 01:20:25,620
timing correctly so is a good way to

01:20:21,940 --> 01:20:25,620
solve this

01:20:28,780 --> 01:20:31,870
[Music]

01:21:04,369 --> 01:21:12,329
yeah I think Donnie acknowledge frame

01:21:08,489 --> 01:21:32,699
there is not any user payload it's just

01:21:12,329 --> 01:22:17,219
been and no information is just so I

01:21:32,699 --> 01:22:22,019
don't know because so far I know

01:22:17,219 --> 01:22:24,599
xqe take--let's one issue in the in the

01:22:22,019 --> 01:22:26,849
networking stack which is the socket

01:22:24,599 --> 01:22:31,170
buffer so you don't working with socket

01:22:26,849 --> 01:22:36,539
buffer but this is also what you need to

01:22:31,170 --> 01:22:39,749
do it on there you have your memory

01:22:36,539 --> 01:22:42,659
space where you know we even don't have

01:22:39,749 --> 01:22:46,050
any transceiver which supports DMA or

01:22:42,659 --> 01:22:49,050
something where you can get is to

01:22:46,050 --> 01:22:51,239
acknowledge bit set and it's this one

01:22:49,050 --> 01:22:54,229
address which belongs to me and then

01:22:51,239 --> 01:22:54,229
send it back

01:23:10,780 --> 01:23:16,480
yeah some note also on this desk also

01:23:14,120 --> 01:23:20,120
one transceiver which doesn't support

01:23:16,480 --> 01:23:25,730
also the collision detection and

01:23:20,120 --> 01:23:29,030
avoiding us yeah yeah I don't know how

01:23:25,730 --> 01:23:34,490
this can be done so it's the back of

01:23:29,030 --> 01:23:47,420
payouts and yeah there was you know just

01:23:34,490 --> 01:23:50,510
Texas Instruments I believe that doing

01:23:47,420 --> 01:23:53,060
XD big work for low-power devices

01:23:50,510 --> 01:23:55,400
kind of dangerous work because you you

01:23:53,060 --> 01:23:59,870
might easily miss packets and having a

01:23:55,400 --> 01:24:01,910
non signal to the structure that you're

01:23:59,870 --> 01:24:04,790
using for following the packets so I

01:24:01,910 --> 01:24:05,900
mean if you do work with xt p with

01:24:04,790 --> 01:24:08,900
higher level devices

01:24:05,900 --> 01:24:14,330
it's very pretty easy to do line rate

01:24:08,900 --> 01:24:15,710
but when you have speech issues then you

01:24:14,330 --> 01:24:19,160
miss packets and you don't know how to

01:24:15,710 --> 01:24:31,430
start replicating work done in the

01:24:19,160 --> 01:24:33,440
kernel down in the X to be I looked into

01:24:31,430 --> 01:24:34,850
x DP but we're not yet at the point

01:24:33,440 --> 01:24:37,780
where we've been really able to

01:24:34,850 --> 01:24:37,780
experiment with it

01:24:49,660 --> 01:24:55,720
so he's like Sweetman ups best before

01:24:52,410 --> 01:24:58,780
this what if just say you have my few

01:24:55,720 --> 01:25:02,460
moments to it should be pleasing so

01:24:58,780 --> 01:25:02,460
thank you god for public speaking

01:25:06,300 --> 01:25:10,789

YouTube URL: https://www.youtube.com/watch?v=HyJt_0GvPxA


