Title: State of ECN and improving congestion feedback with AccECN in Linux
Publication date: 2018-03-14
Playlist: Netdev 2.2
Description: 
	Speaker: Mirja KÃ¼hlewind
Friday November 10th, 2017 
Seoul, Korea
https://www.netdevconf.org/2.2/session.html?kuhlewind-accecn-talk
Captions: 
	00:00:01,000 --> 00:00:04,630
you have like one slide and data center

00:00:03,159 --> 00:00:07,180
TCP because those things together

00:00:04,630 --> 00:00:09,550
explain why we need accurate ecn which

00:00:07,180 --> 00:00:12,550
is a different feedback mechanism for

00:00:09,550 --> 00:00:14,230
ecn and then I have a second part of my

00:00:12,550 --> 00:00:15,969
talk where I show some measurement

00:00:14,230 --> 00:00:17,770
results on the deployment state of ezn

00:00:15,969 --> 00:00:21,939
what the problems are where we are

00:00:17,770 --> 00:00:25,800
currently so explicit congestion

00:00:21,939 --> 00:00:28,900
notification is an tcp/ip extension to

00:00:25,800 --> 00:00:30,820
provide congestion marking say on a high

00:00:28,900 --> 00:00:33,219
level that means if you if your traffic

00:00:30,820 --> 00:00:35,079
is easy and capable then a router that

00:00:33,219 --> 00:00:37,750
is congested can mark your packet and

00:00:35,079 --> 00:00:39,340
tell the end point to slow down instead

00:00:37,750 --> 00:00:40,960
of dropping packets so if everything

00:00:39,340 --> 00:00:43,719
runs well you don't have any packet

00:00:40,960 --> 00:00:47,440
drops anymore that would be great

00:00:43,719 --> 00:00:50,620
ecn is implemented in most of the

00:00:47,440 --> 00:00:54,280
operating systems but it's not turned on

00:00:50,620 --> 00:00:58,120
by default it's usually running in

00:00:54,280 --> 00:01:00,609
so-called server mode which means it

00:00:58,120 --> 00:01:02,890
your machine will not ask for ezn during

00:01:00,609 --> 00:01:05,320
the TCP handshake but if somebody else

00:01:02,890 --> 00:01:06,340
asks your machine to do easy and it will

00:01:05,320 --> 00:01:09,880
negotiate it with it

00:01:06,340 --> 00:01:11,890
so only this the server basically does

00:01:09,880 --> 00:01:16,270
ecn by default but nobody will ever ask

00:01:11,890 --> 00:01:17,530
for easy and support the reason why we

00:01:16,270 --> 00:01:18,939
have the server mode is because

00:01:17,530 --> 00:01:21,520
initially there were some deployment

00:01:18,939 --> 00:01:22,659
problems initially people were excited

00:01:21,520 --> 00:01:24,070
about it they turned easier they

00:01:22,659 --> 00:01:26,020
implemented it they turned easy and on

00:01:24,070 --> 00:01:27,369
by default on all connections and then

00:01:26,020 --> 00:01:29,350
there were some weird home routers who

00:01:27,369 --> 00:01:31,329
never seen this bit and they would just

00:01:29,350 --> 00:01:33,009
reboot and your connections gone and

00:01:31,329 --> 00:01:34,180
everything's gone right and then you try

00:01:33,009 --> 00:01:38,110
again in your machine would reboot again

00:01:34,180 --> 00:01:39,340
so that was very unfortunate and say you

00:01:38,110 --> 00:01:41,290
find on the internet you find like

00:01:39,340 --> 00:01:42,460
whites widespread device you just turn

00:01:41,290 --> 00:01:48,220
off easy end because that makes

00:01:42,460 --> 00:01:50,979
everything better ok now we go a little

00:01:48,220 --> 00:01:52,390
bit into detail so ecn first of all you

00:01:50,979 --> 00:01:54,009
have to negotiate it on the handshake

00:01:52,390 --> 00:01:56,710
because both of the endpoints have to

00:01:54,009 --> 00:01:58,840
support it so you as the sender you will

00:01:56,710 --> 00:02:00,340
mark your packet that easy uncapable but

00:01:58,840 --> 00:02:01,780
the receiver on the other end would

00:02:00,340 --> 00:02:03,759
actually see if there was congestion and

00:02:01,780 --> 00:02:05,079
the Lincoln has to tell you about it so

00:02:03,759 --> 00:02:06,579
you have to know that the other end of

00:02:05,079 --> 00:02:11,050
supporting EC and other otherwise you

00:02:06,579 --> 00:02:13,660
cannot use it if both endpoints support

00:02:11,050 --> 00:02:14,750
EC n then the sender can decide to set a

00:02:13,660 --> 00:02:16,610
certain code

00:02:14,750 --> 00:02:18,350
in the in the IP header to tell the

00:02:16,610 --> 00:02:20,780
network device that this packet is easy

00:02:18,350 --> 00:02:24,070
and capable and you can mark it instead

00:02:20,780 --> 00:02:26,270
of dropping it if you are congested and

00:02:24,070 --> 00:02:29,660
so there are different code points in

00:02:26,270 --> 00:02:32,330
the IP header there are two code points

00:02:29,660 --> 00:02:34,400
which are called ECT ecn cape of the

00:02:32,330 --> 00:02:36,890
transport and there's one code point

00:02:34,400 --> 00:02:38,240
that is called c e so congestion

00:02:36,890 --> 00:02:44,360
experienced and that's a code point that

00:02:38,240 --> 00:02:46,340
the router can set yeah actually that's

00:02:44,360 --> 00:02:48,830
what I just said basically you have this

00:02:46,340 --> 00:02:50,180
is kind of the TCP header and in the TCP

00:02:48,830 --> 00:02:52,790
header you have like all the slacks and

00:02:50,180 --> 00:03:25,910
you have 2 flex belonging to and in the

00:02:52,790 --> 00:03:32,080
IP header you have at some point this

00:03:25,910 --> 00:03:34,160
network node two sites is one and then

00:03:32,080 --> 00:03:36,440
at some point is received by the

00:03:34,160 --> 00:03:38,030
receiver receiver knows no no stuff that

00:03:36,440 --> 00:03:41,030
gets congestion has to tell the sender

00:03:38,030 --> 00:03:42,650
about it and what it does is it uses one

00:03:41,030 --> 00:03:45,290
of the flexibility compete header and

00:03:42,650 --> 00:03:47,269
text effects with them and it's active

00:03:45,290 --> 00:03:49,070
site on every acknowledgment until it

00:03:47,269 --> 00:03:51,200
gets confirmation from the sender that

00:03:49,070 --> 00:03:52,970
this was actually to make sure that the

00:03:51,200 --> 00:03:56,480
conduction signal is really received

00:03:52,970 --> 00:03:59,660
right then I clean up kiosk as soon as

00:03:56,480 --> 00:04:00,360
the sender receives that acknowledgment

00:03:59,660 --> 00:04:03,390
was the east

00:04:00,360 --> 00:04:07,250
except it uses the other tcp like we

00:04:03,390 --> 00:04:09,960
have on the next data packet so that's a

00:04:07,250 --> 00:04:11,940
DWR the congestion to reduce length and

00:04:09,960 --> 00:04:13,350
tell us the receiver that actually

00:04:11,940 --> 00:04:16,560
precedes the singer and it does it for

00:04:13,350 --> 00:04:20,070
every ECE use so basically where the end

00:04:16,560 --> 00:04:22,650
up here is that for one machi who sent

00:04:20,070 --> 00:04:24,360
the whole lingo of ECE Martin's to the

00:04:22,650 --> 00:04:26,790
sender and the sender sends the whole

00:04:24,360 --> 00:04:29,490
marketing of CW art might expect to the

00:04:26,790 --> 00:04:31,080
receiver and what that means is that the

00:04:29,490 --> 00:04:32,580
receiver only notice that there was some

00:04:31,080 --> 00:04:34,080
congestion during this round of time but

00:04:32,580 --> 00:04:38,250
it doesn't know how many congestion our

00:04:34,080 --> 00:04:40,020
needs have been appeared say effectively

00:04:38,250 --> 00:04:42,000
this is not a problem for today's

00:04:40,020 --> 00:04:43,919
conjecture at all because congestion

00:04:42,000 --> 00:04:45,660
control will only react react once per

00:04:43,919 --> 00:04:47,880
round trip time to congestion so it

00:04:45,660 --> 00:04:50,040
doesn't matter there's another marking a

00:04:47,880 --> 00:04:51,540
period during this run to time but there

00:04:50,040 --> 00:04:53,130
are currently more modern and congestion

00:04:51,540 --> 00:04:54,870
calls which take this level of

00:04:53,130 --> 00:04:55,800
conversion engineer company because it

00:04:54,870 --> 00:04:57,720
actually gives you some additional

00:04:55,800 --> 00:05:00,270
information actually lets you know that

00:04:57,720 --> 00:05:01,650
it sounds like a lot of projection or

00:05:00,270 --> 00:05:04,230
just a little bit of congestion and you

00:05:01,650 --> 00:05:06,300
can adapt our behavior and like one of

00:05:04,230 --> 00:05:08,720
those examples is basically data send it

00:05:06,300 --> 00:05:11,040
to the people they said that TCP is

00:05:08,720 --> 00:05:13,950
developed for data in this you cannot

00:05:11,040 --> 00:05:15,690
just use it on the internet it will take

00:05:13,950 --> 00:05:17,790
all the capacity away from other traffic

00:05:15,690 --> 00:05:19,970
but like principle is something that

00:05:17,790 --> 00:05:23,160
whatever judgment rolls four-pointed you

00:05:19,970 --> 00:05:24,600
and what you have here is that condition

00:05:23,160 --> 00:05:26,850
for you should need does this kind of

00:05:24,600 --> 00:05:29,400
multiplicative decrease when it gets

00:05:26,850 --> 00:05:31,860
congestion signal so that means you have

00:05:29,400 --> 00:05:33,240
your window we have the multiplier and

00:05:31,860 --> 00:05:35,340
when you get a congestion saying that

00:05:33,240 --> 00:05:37,560
you just reduce your window and then we

00:05:35,340 --> 00:05:39,600
know that that fix multiplier of the

00:05:37,560 --> 00:05:41,760
corn pipe so we have your window in

00:05:39,600 --> 00:05:44,300
cubic it's a little bit less it's point

00:05:41,760 --> 00:05:44,300
seven weeks

00:05:44,420 --> 00:05:49,770
but it's always a fixed value and what

00:05:48,090 --> 00:05:51,600
data is in Mississippi does different

00:05:49,770 --> 00:05:54,810
here here is that it actually calculates

00:05:51,600 --> 00:05:55,800
the Alpha value dynamically based on the

00:05:54,810 --> 00:05:58,470
number of modules

00:05:55,800 --> 00:06:01,920
it has seen during the last run that

00:05:58,470 --> 00:06:03,570
last primetime say it might be whatever

00:06:01,920 --> 00:06:05,100
it might be point nine to twenty point

00:06:03,570 --> 00:06:07,620
five somewhere in between depending on

00:06:05,100 --> 00:06:09,030
the condition at all and that's the

00:06:07,620 --> 00:06:11,820
information when to happen because you

00:06:09,030 --> 00:06:13,350
don't have to use yet and this the part

00:06:11,820 --> 00:06:17,060
where accurate is hand comes in to the

00:06:13,350 --> 00:06:20,520
end of the game so with equities in

00:06:17,060 --> 00:06:22,560
another nice thing is that it actually

00:06:20,520 --> 00:06:25,140
negotiated during the handshake which is

00:06:22,560 --> 00:06:26,580
also not the case for that isn't it they

00:06:25,140 --> 00:06:28,380
just end up basically because it needs

00:06:26,580 --> 00:06:30,270
this information has just adapted the

00:06:28,380 --> 00:06:33,120
feedback scheme of EC and in some way

00:06:30,270 --> 00:06:34,950
but they don't negotiate it and you have

00:06:33,120 --> 00:06:36,960
to to it in your data center

00:06:34,950 --> 00:06:38,760
all systems are configured to use data

00:06:36,960 --> 00:06:41,400
center TCP otherwise it will break

00:06:38,760 --> 00:06:42,720
actually it's it nicely when I read

00:06:41,400 --> 00:06:44,100
completely but if you will not have

00:06:42,720 --> 00:06:48,090
anything if it's anymore if they have

00:06:44,100 --> 00:06:49,680
not configured correctly so with a

00:06:48,090 --> 00:06:51,270
current you see and we actually used an

00:06:49,680 --> 00:06:54,150
additional flex in the disappeared and

00:06:51,270 --> 00:06:56,490
this leg if you if you have looked up

00:06:54,150 --> 00:06:59,130
you have watched out this was previously

00:06:56,490 --> 00:07:01,650
called an S so that was already used for

00:06:59,130 --> 00:07:04,020
ECM for ECM nuns whatever the EC

00:07:01,650 --> 00:07:05,640
enormous an extension was never really

00:07:04,020 --> 00:07:08,130
deployed and it's not deprecated

00:07:05,640 --> 00:07:10,380
so basic you just you reuse the fit

00:07:08,130 --> 00:07:12,510
forget the practice here and we use it

00:07:10,380 --> 00:07:14,460
to negotiate and anchor it you see and

00:07:12,510 --> 00:07:21,030
in a very competitive way in the

00:07:14,460 --> 00:07:23,160
handshake nature hundred east equity is

00:07:21,030 --> 00:07:24,000
successfully negotiated we don't use

00:07:23,160 --> 00:07:25,860
those

00:07:24,000 --> 00:07:28,290
we just use all three bits we have it's

00:07:25,860 --> 00:07:30,570
like one field and this field always

00:07:28,290 --> 00:07:33,540
reflects the counter of the number of ze

00:07:30,570 --> 00:07:35,190
packets we've seen and so it's only two

00:07:33,540 --> 00:07:37,650
bits it's not that much but also you

00:07:35,190 --> 00:07:39,660
should you don't see so many EC Matthews

00:07:37,650 --> 00:07:41,490
during one round trip times and even if

00:07:39,660 --> 00:07:43,620
a couple of XK boss whatever this should

00:07:41,490 --> 00:07:47,790
still be effort enough to give you the

00:07:43,620 --> 00:07:49,920
right in for me and it's even more

00:07:47,790 --> 00:07:54,630
accurate information desk there's also

00:07:49,920 --> 00:07:56,669
an option say this counter is just like

00:07:54,630 --> 00:07:59,250
a pathetic country of number of - you

00:07:56,669 --> 00:08:01,620
see and the equity see an option even

00:07:59,250 --> 00:08:03,630
provides provide counter of mark by

00:08:01,620 --> 00:08:05,910
using so it's an even more effort and

00:08:03,630 --> 00:08:07,440
it's not only with the amake it also

00:08:05,910 --> 00:08:10,590
provides the information about how many

00:08:07,440 --> 00:08:13,010
each is to 1 and it is 0 mark and set up

00:08:10,590 --> 00:08:15,660
in so you can even do something like

00:08:13,010 --> 00:08:17,040
easy and not if you want to do it some

00:08:15,660 --> 00:08:20,040
kind of it's your checking or whatever

00:08:17,040 --> 00:08:24,330
at you so space open for unionists

00:08:20,040 --> 00:08:26,250
attributes information so that's

00:08:24,330 --> 00:08:28,320
basically what accurate you can is it

00:08:26,250 --> 00:08:29,970
just changes feedback from the receiver

00:08:28,320 --> 00:08:34,620
to the sender to provide more

00:08:29,970 --> 00:08:36,210
information and this is creamy and it

00:08:34,620 --> 00:08:39,030
was on a mini slide this is Cringer is

00:08:36,210 --> 00:08:41,010
dropping the idea it's currently in like

00:08:39,030 --> 00:08:43,380
the last stage of publication so it will

00:08:41,010 --> 00:08:45,120
be an RFC soon so it's probably the

00:08:43,380 --> 00:08:47,220
right kind of time to think about the

00:08:45,120 --> 00:08:49,050
next implementation right now I have

00:08:47,220 --> 00:08:51,450
like proof of concept implementation out

00:08:49,050 --> 00:08:55,530
there it's kind of works it's not read

00:08:51,450 --> 00:08:57,480
test it probably needs some cleanup what

00:08:55,530 --> 00:09:00,570
I did was implementation is that I use

00:08:57,480 --> 00:09:04,380
the existing ECM 62 elf and if you send

00:09:00,570 --> 00:09:07,010
it to poor and in equities yes but I

00:09:04,380 --> 00:09:09,020
think if you want to put it into color

00:09:07,010 --> 00:09:11,660
or the goal would actually to use effort

00:09:09,020 --> 00:09:13,310
each day our enemies requests expertise

00:09:11,660 --> 00:09:35,170
and by default instead of classic you

00:09:13,310 --> 00:09:35,170
soon because actually no yeah because oh

00:10:16,030 --> 00:10:20,750
you need or there might be a case where

00:10:19,610 --> 00:10:22,280
you don't care about the overhead and

00:10:20,750 --> 00:10:23,810
you always want an option just to make

00:10:22,280 --> 00:10:25,760
sure you have all the information you

00:10:23,810 --> 00:10:27,500
need so that could be configured by some

00:10:25,760 --> 00:10:34,610
kind of interface if that's needed I'm

00:10:27,500 --> 00:10:36,260
not sure and then I guess if you want to

00:10:34,610 --> 00:10:37,970
go even further you could even try to

00:10:36,260 --> 00:10:42,140
reorganize some of the code in the

00:10:37,970 --> 00:10:43,970
corner and figure out it and make the

00:10:42,140 --> 00:10:45,080
separation between EC and handling and

00:10:43,970 --> 00:10:47,300
loss handling work here because

00:10:45,080 --> 00:10:48,890
sometimes it's kind of the same but it's

00:10:47,300 --> 00:10:50,210
actually very different signal but I

00:10:48,890 --> 00:10:52,370
didn't do this in this patch and

00:10:50,210 --> 00:10:54,260
probably it's something you would rather

00:10:52,370 --> 00:10:56,960
do before or after whatever not together

00:10:54,260 --> 00:10:58,370
was this change so I could definitely

00:10:56,960 --> 00:11:02,360
need some help here if somebody's

00:10:58,370 --> 00:11:05,290
interested any questions on a gratis yen

00:11:02,360 --> 00:11:05,290
so far

00:11:07,700 --> 00:11:10,839
[Music]

00:11:16,110 --> 00:11:21,460
this is a question not regarding the

00:11:19,300 --> 00:11:26,800
Linux implementation but regarding more

00:11:21,460 --> 00:11:30,940
like the RFC did you probe for industry

00:11:26,800 --> 00:11:33,820
reception I mean is it going to be at

00:11:30,940 --> 00:11:37,750
the end an RFC plus Linux implementation

00:11:33,820 --> 00:11:40,000
or did you get some hints from the

00:11:37,750 --> 00:11:43,870
industry that it's going to be accepted

00:11:40,000 --> 00:11:46,930
I don't know Microsoft Cisco whatever

00:11:43,870 --> 00:11:49,270
you know the big names a Juniper or

00:11:46,930 --> 00:11:51,490
anybody that is going to get involved in

00:11:49,270 --> 00:11:55,300
networking is going to add support for

00:11:51,490 --> 00:11:57,370
this so I mean as the last point says

00:11:55,300 --> 00:11:59,620
here it would also be nice to not only

00:11:57,370 --> 00:12:01,450
implement equity is in but also use it

00:11:59,620 --> 00:12:03,550
with data center TCP then because it's

00:12:01,450 --> 00:12:06,490
just safer because you have the sake of

00:12:03,550 --> 00:12:08,320
negotiation so datacenter TTP is used I

00:12:06,490 --> 00:12:09,400
assume if we would change it in the

00:12:08,320 --> 00:12:12,190
current people would use it there as

00:12:09,400 --> 00:12:13,780
well other than that currently with the

00:12:12,190 --> 00:12:15,910
current congestion control it doesn't

00:12:13,780 --> 00:12:17,260
give you a lot of benefit because there

00:12:15,910 --> 00:12:18,580
are no congestion controls that actually

00:12:17,260 --> 00:12:20,080
utilize this information at the moment

00:12:18,580 --> 00:12:20,830
on the other hand because you don't have

00:12:20,080 --> 00:12:22,120
this information

00:12:20,830 --> 00:12:23,800
there's no congestion control that you

00:12:22,120 --> 00:12:25,840
slightly utilizes information right so

00:12:23,800 --> 00:12:28,270
it's chicken-and-egg problem but there

00:12:25,840 --> 00:12:30,310
is ongoing work also in the IETF to make

00:12:28,270 --> 00:12:31,960
use of this signal but only if you have

00:12:30,310 --> 00:12:33,550
some more congestion more modern

00:12:31,960 --> 00:12:35,230
controls that can use this thing there's

00:12:33,550 --> 00:12:44,070
actually real need for this signaling

00:12:35,230 --> 00:12:47,980
mechanism do you have to have all the

00:12:44,070 --> 00:12:50,590
places in the hop able to handle this

00:12:47,980 --> 00:12:52,390
because I would think that what if

00:12:50,590 --> 00:12:57,190
something in the middle thought it knew

00:12:52,390 --> 00:13:01,000
what to do with an ACN and as it was

00:12:57,190 --> 00:13:03,490
coming across you know it became it was

00:13:01,000 --> 00:13:08,020
not the count bits it was just a signal

00:13:03,490 --> 00:13:10,330
flag bit so for equities in the part in

00:13:08,020 --> 00:13:12,880
the IP header has not changed right for

00:13:10,330 --> 00:13:16,270
the signaling India pietÃ  which is what

00:13:12,880 --> 00:13:18,130
the network notes do for ezn itself yes

00:13:16,270 --> 00:13:19,720
you need support from the network you

00:13:18,130 --> 00:13:21,519
need like this this

00:13:19,720 --> 00:13:23,589
one point where you have to congestion

00:13:21,519 --> 00:13:27,339
if that is not easy and enabled you will

00:13:23,589 --> 00:13:28,839
still see props right and but if so but

00:13:27,339 --> 00:13:30,399
usually the congestion happens somewhere

00:13:28,839 --> 00:13:33,670
at the network borders so if you can

00:13:30,399 --> 00:13:35,290
make your routers easy and support I was

00:13:33,670 --> 00:13:38,199
thinking if it was some intermediate

00:13:35,290 --> 00:13:41,019
node that supported easy end but not

00:13:38,199 --> 00:13:43,720
accurate easy n no that's not necessary

00:13:41,019 --> 00:13:52,360
equity is just on the TCP layer between

00:13:43,720 --> 00:13:54,250
the endpoints so actually to maybe riff

00:13:52,360 --> 00:13:55,870
off of your question I don't think cisco

00:13:54,250 --> 00:13:57,670
juniper needs to support this right

00:13:55,870 --> 00:14:02,550
their box our support easy and already

00:13:57,670 --> 00:14:06,129
this is built on the DC TCP idea so

00:14:02,550 --> 00:14:08,319
Microsoft yes Microsoft or Linux would

00:14:06,129 --> 00:14:09,639
have to support it and if Linux has

00:14:08,319 --> 00:14:11,949
support you'll get it for free

00:14:09,639 --> 00:14:14,680
the bigger question I would have is DC

00:14:11,949 --> 00:14:16,689
TCP itself right as I mean yes we've all

00:14:14,680 --> 00:14:18,129
read the papers it's talked about a lot

00:14:16,689 --> 00:14:21,459
have you do you have any industry to

00:14:18,129 --> 00:14:23,829
rephrase or repeat the question is there

00:14:21,459 --> 00:14:25,449
any industry response on DC TCP actually

00:14:23,829 --> 00:14:29,199
being deployed because I personally have

00:14:25,449 --> 00:14:31,180
not seen a lot of in practice deployment

00:14:29,199 --> 00:14:33,730
I've heard a lot of people talk about it

00:14:31,180 --> 00:14:37,290
but is there data like is it stable does

00:14:33,730 --> 00:14:40,569
it create secondary congestion points

00:14:37,290 --> 00:14:44,350
because companies but I believe that

00:14:40,569 --> 00:14:46,240
Microsoft is actually using it actually

00:14:44,350 --> 00:14:50,649
yeah somebody else can answer that even

00:14:46,240 --> 00:14:54,009
better yeah so we use at Google

00:14:50,649 --> 00:14:59,110
some kind of DC TCP stuff so we are

00:14:54,009 --> 00:15:00,279
using yeah I also believe Daniel Bachman

00:14:59,110 --> 00:15:02,439
who actually implemented it in the

00:15:00,279 --> 00:15:05,470
kernel we had a customer request for it

00:15:02,439 --> 00:15:09,009
so we are well not using exactly BC TCP

00:15:05,470 --> 00:15:11,829
but it's a variant of this stuff the one

00:15:09,009 --> 00:15:12,790
worry I have is about TCP dump support

00:15:11,829 --> 00:15:16,600
because right now

00:15:12,790 --> 00:15:19,300
TCP dump is stateless so it won't be

00:15:16,600 --> 00:15:23,319
able to display a correct value of this

00:15:19,300 --> 00:15:26,139
three bit in the TCP error it will still

00:15:23,319 --> 00:15:32,859
display the two

00:15:26,139 --> 00:15:35,869
legacy seein bits instead of a counter

00:15:32,859 --> 00:15:39,199
you use now three bits for value between

00:15:35,869 --> 00:15:41,629
zero and seven yeah normally speedom

00:15:39,199 --> 00:15:44,479
should be able to display oh it's a it's

00:15:41,629 --> 00:15:46,939
using a key CN so it should display a

00:15:44,479 --> 00:15:50,919
counter value but right now this we

00:15:46,939 --> 00:15:55,279
don't want it will just display a bit

00:15:50,919 --> 00:15:58,009
needs to be updated be not be stateless

00:15:55,279 --> 00:16:00,499
so it cannot record the negotiation on

00:15:58,009 --> 00:16:03,529
the scenes in AK so it will not really

00:16:00,499 --> 00:16:07,579
no yeah but it can just can just show

00:16:03,529 --> 00:16:16,069
the bits you just confuse that I mean

00:16:07,579 --> 00:16:20,329
doing something that's it so the primary

00:16:16,069 --> 00:16:23,629
value that it allows you to aggregate

00:16:20,329 --> 00:16:25,929
more packets on for the axe because

00:16:23,629 --> 00:16:28,459
right now with DC TCP if you change

00:16:25,929 --> 00:16:31,069
state from marked and unmarked you know

00:16:28,459 --> 00:16:32,569
you have to return an ACK immediately so

00:16:31,069 --> 00:16:34,939
the main value of this is that you could

00:16:32,569 --> 00:16:37,069
return a 1 AK that we like acknowledge

00:16:34,939 --> 00:16:39,169
more packets but then you could have the

00:16:37,069 --> 00:16:41,899
right number of markings is that the

00:16:39,169 --> 00:16:44,389
primary value for this not really so

00:16:41,899 --> 00:16:46,789
with data center TCP so we also require

00:16:44,389 --> 00:16:48,919
to send an egg immediately just because

00:16:46,789 --> 00:16:50,809
you get the feedback earlier right so

00:16:48,919 --> 00:16:53,089
it's actually good thing and with data

00:16:50,809 --> 00:16:56,569
center TCP you always have to send an

00:16:53,089 --> 00:16:58,189
egg when that when it changes right so

00:16:56,569 --> 00:17:00,220
you could even reduce the number of X

00:16:58,189 --> 00:17:02,919
because it doesn't change it often so

00:17:00,220 --> 00:17:09,110
kind of that's kind of the same here

00:17:02,919 --> 00:17:10,939
okay but been a real benefit is that

00:17:09,110 --> 00:17:12,860
with data center TCP you can actually

00:17:10,939 --> 00:17:14,809
get out of sync there is a failure case

00:17:12,860 --> 00:17:16,159
where if you do certain X specific X

00:17:14,809 --> 00:17:18,350
you're completely out of sync that

00:17:16,159 --> 00:17:20,209
cannot have me like or much harder here

00:17:18,350 --> 00:17:21,889
because you have those three flags which

00:17:20,209 --> 00:17:23,389
are free bits which are actually have

00:17:21,889 --> 00:17:26,750
you done any measurements about how much

00:17:23,389 --> 00:17:28,970
that gains you because this is LP it's

00:17:26,750 --> 00:17:31,309
averaging so it takes a while to respond

00:17:28,970 --> 00:17:37,760
to the signals right in that immediate

00:17:31,309 --> 00:17:40,340
yeah so I'm just wondering it's the same

00:17:37,760 --> 00:17:42,230
you get provided it's not better

00:17:40,340 --> 00:17:44,840
information identities if it's just more

00:17:42,230 --> 00:17:46,880
safe really it's just like it's more

00:17:44,840 --> 00:17:48,200
accurate it's not more accurate and data

00:17:46,880 --> 00:17:50,600
center TCP it's more accurate than

00:17:48,200 --> 00:17:51,950
classic easy and right but data center

00:17:50,600 --> 00:17:53,810
TCP gives you exactly the same

00:17:51,950 --> 00:17:56,090
information it's just not very safe

00:17:53,810 --> 00:17:57,410
because if you if you lose the wrong X

00:17:56,090 --> 00:17:58,700
which shouldn't have many data center

00:17:57,410 --> 00:18:00,290
which is easy and enabled but if you

00:17:58,700 --> 00:18:01,700
lose some X you could actually get

00:18:00,290 --> 00:18:03,470
completely out of sync and then you have

00:18:01,700 --> 00:18:06,200
wrong information but does my question

00:18:03,470 --> 00:18:09,320
have you tested it to see to see

00:18:06,200 --> 00:18:11,060
actually see the TCP do poorly under

00:18:09,320 --> 00:18:13,490
those conditions right because there's

00:18:11,060 --> 00:18:14,990
an assumption there it's not really

00:18:13,490 --> 00:18:17,690
doing poorly it's really getting out of

00:18:14,990 --> 00:18:19,550
sync so I I can't so there is in the

00:18:17,690 --> 00:18:21,200
draft is it in this draft there is a

00:18:19,550 --> 00:18:23,060
draft where the analysis is in there

00:18:21,200 --> 00:18:24,980
which says like if this and this happens

00:18:23,060 --> 00:18:27,050
then they just data send a TCP it's kind

00:18:24,980 --> 00:18:28,160
of screwed as I said it should not

00:18:27,050 --> 00:18:30,680
happen because you shouldn't lose

00:18:28,160 --> 00:18:32,630
anything in a data center but it's just

00:18:30,680 --> 00:18:40,190
not safe it's not better it's just not

00:18:32,630 --> 00:18:44,240
that safe okay thank you I think there

00:18:40,190 --> 00:18:47,000
is an opportunity with this to help a

00:18:44,240 --> 00:18:49,760
better aggregation on zero layer if we

00:18:47,000 --> 00:18:52,940
can still aggregate right now zero won't

00:18:49,760 --> 00:18:54,920
aggregate packet with different C or ECT

00:18:52,940 --> 00:18:58,400
marks it will just build different

00:18:54,920 --> 00:19:01,280
packets in your proposal we can we could

00:18:58,400 --> 00:19:07,250
modify 0 layer so that aggregation still

00:19:01,280 --> 00:19:09,830
takes place but propagate in new GSO Cee

00:19:07,250 --> 00:19:14,900
counts the exact number of packet which

00:19:09,830 --> 00:19:16,280
were marked with the CE mark so that's

00:19:14,900 --> 00:19:18,740
actually that's actually good point

00:19:16,280 --> 00:19:20,870
because so that is possible especially

00:19:18,740 --> 00:19:22,610
as we have this option which provides

00:19:20,870 --> 00:19:25,820
you all this more detailed information

00:19:22,610 --> 00:19:28,400
and currently we in the in the draft we

00:19:25,820 --> 00:19:31,040
actually say if you see the counter if

00:19:28,400 --> 00:19:34,280
you see the code point changing you have

00:19:31,040 --> 00:19:35,600
to send an immediate egg because that

00:19:34,280 --> 00:19:38,000
also would allow you to kind of

00:19:35,600 --> 00:19:39,590
reconstruct the exact order of markings

00:19:38,000 --> 00:19:41,900
you have seen which gives you additional

00:19:39,590 --> 00:19:44,930
information but that's actually a

00:19:41,900 --> 00:19:47,390
question we had in real deployment if if

00:19:44,930 --> 00:19:49,280
we will release this you must immediate

00:19:47,390 --> 00:19:50,900
egg then you could aggregate more and if

00:19:49,280 --> 00:19:51,539
that provides we benefit to deployment

00:19:50,900 --> 00:19:58,200
scenario suite

00:19:51,539 --> 00:19:59,429
actually no okay let me move on a little

00:19:58,200 --> 00:20:02,340
bit because I'm running otherwise out of

00:19:59,429 --> 00:20:03,960
time so what's the current state of Sen

00:20:02,340 --> 00:20:05,090
deployment so this is classic easy end

00:20:03,960 --> 00:20:09,509
but it doesn't really matter because

00:20:05,090 --> 00:20:11,190
kind of boasts the same so when it was

00:20:09,509 --> 00:20:13,229
first standardized actually there was

00:20:11,190 --> 00:20:14,820
kind of lot of interest in this it was

00:20:13,229 --> 00:20:16,200
implemented and deployed and there was

00:20:14,820 --> 00:20:18,239
like this kind of first measurement

00:20:16,200 --> 00:20:20,639
which has like we already have 8% of rep

00:20:18,239 --> 00:20:22,259
server support very initially which was

00:20:20,639 --> 00:20:24,179
pretty nice but then it dropped down to

00:20:22,259 --> 00:20:26,220
2 to 1 percent which was exactly this

00:20:24,179 --> 00:20:27,720
problem I was mentioning where you see

00:20:26,220 --> 00:20:29,340
some home routers rebooting in so the

00:20:27,720 --> 00:20:32,849
recommendation was just turn it off

00:20:29,340 --> 00:20:35,549
right and then at some point people came

00:20:32,849 --> 00:20:38,519
up with a server mode idea so just

00:20:35,549 --> 00:20:40,710
because their server mode and at some

00:20:38,519 --> 00:20:43,710
point web servers update they OS I guess

00:20:40,710 --> 00:20:46,649
you see more and more support on web

00:20:43,710 --> 00:20:48,599
servers so we're currently somewhere

00:20:46,649 --> 00:20:51,210
here at 75% which is pretty good for

00:20:48,599 --> 00:20:54,210
like the Alexa 1 million web top web

00:20:51,210 --> 00:20:57,899
servers the support in ipv6 is a little

00:20:54,210 --> 00:21:00,149
bit higher but this is also much less IP

00:20:57,899 --> 00:21:00,899
addresses because not all of the Alexa

00:21:00,149 --> 00:21:03,450
top million

00:21:00,899 --> 00:21:05,159
unfortunately support ipv6 so this was

00:21:03,450 --> 00:21:06,599
like a couple of hundred hosts only here

00:21:05,159 --> 00:21:09,029
and now it's a couple of thousand hosts

00:21:06,599 --> 00:21:11,429
I believe but this also just shows

00:21:09,029 --> 00:21:12,720
basically that probably the ipv6

00:21:11,429 --> 00:21:16,649
machines a little bit more up to date

00:21:12,720 --> 00:21:18,479
than the ipv4 machines but like if you

00:21:16,649 --> 00:21:20,159
turn on easy n on your machine right now

00:21:18,479 --> 00:21:23,629
there is a big chance that you can

00:21:20,159 --> 00:21:26,070
actually use it with the web server um

00:21:23,629 --> 00:21:29,460
if you turn easy n on your machine right

00:21:26,070 --> 00:21:31,109
now there were a couple of problems one

00:21:29,460 --> 00:21:33,659
or there might be problems one is that

00:21:31,109 --> 00:21:37,320
there are still machines out there that

00:21:33,659 --> 00:21:39,450
didn't get the memo basically that the

00:21:37,320 --> 00:21:41,639
toss field is not 8-bit anymore but the

00:21:39,450 --> 00:21:44,279
difÃ­cil field it's only six bits say

00:21:41,639 --> 00:21:46,619
they rewrite the whole toss field which

00:21:44,279 --> 00:21:51,840
is 8 bits and they rewrite the IP the

00:21:46,619 --> 00:21:55,099
ecn flex by this as well so with an old

00:21:51,840 --> 00:21:58,049
study from 2011 there was about 25% of

00:21:55,099 --> 00:21:59,580
bleaching of the ec on options which

00:21:58,049 --> 00:22:01,499
means just if you try to use it it

00:21:59,580 --> 00:22:04,250
doesn't work it doesn't break but it

00:22:01,499 --> 00:22:06,679
also doesn't give you any benefit

00:22:04,250 --> 00:22:09,919
we also measured a very small percentage

00:22:06,679 --> 00:22:12,559
of like 8% where we actually we were on

00:22:09,919 --> 00:22:14,120
purpose setting the ze bit at the center

00:22:12,559 --> 00:22:15,620
site already and we didn't get any

00:22:14,120 --> 00:22:17,090
feedback which is an indication that

00:22:15,620 --> 00:22:18,650
there was some rewriting and this

00:22:17,090 --> 00:22:19,970
congestion information just got lost on

00:22:18,650 --> 00:22:21,380
the way which is a little bit of a

00:22:19,970 --> 00:22:23,030
problem because that means if a router

00:22:21,380 --> 00:22:24,590
on the way is actually trying to tell

00:22:23,030 --> 00:22:25,400
you there's congestion and then router

00:22:24,590 --> 00:22:27,110
later on

00:22:25,400 --> 00:22:30,350
it's just removing this signal then you

00:22:27,110 --> 00:22:33,350
don't get the information it's actually

00:22:30,350 --> 00:22:35,179
less problematic if packets with a c e

00:22:33,350 --> 00:22:37,370
marking get dropped because that would

00:22:35,179 --> 00:22:39,919
any anyway happen if you don't have easy

00:22:37,370 --> 00:22:42,140
and support and we observed this in a

00:22:39,919 --> 00:22:45,110
very few cases as well but that doesn't

00:22:42,140 --> 00:22:48,500
happen very often actually and we had

00:22:45,110 --> 00:22:51,429
also a very small number of connection

00:22:48,500 --> 00:22:53,600
failures where we just tried to use or

00:22:51,429 --> 00:22:56,480
negotiate easy end and the connection

00:22:53,600 --> 00:22:59,000
would fail however there is a fallback

00:22:56,480 --> 00:23:00,679
so you simply the next soon packet you

00:22:59,000 --> 00:23:02,120
don't use easy n and then it should work

00:23:00,679 --> 00:23:03,530
so you have some initial delay and it

00:23:02,120 --> 00:23:06,590
was like a very small number of cases

00:23:03,530 --> 00:23:08,830
only yeah but a lot of things can break

00:23:06,590 --> 00:23:14,000
but it seems to kind of work right now

00:23:08,830 --> 00:23:16,520
umm and what happened in the meantime is

00:23:14,000 --> 00:23:20,630
that actually M Apple is trying to

00:23:16,520 --> 00:23:22,610
deploy ecn so what they did in iOS 9 and

00:23:20,630 --> 00:23:25,880
10 and Mac OS

00:23:22,610 --> 00:23:27,890
Sierra and Capitan is that they randomly

00:23:25,880 --> 00:23:30,590
select certain number of connections and

00:23:27,890 --> 00:23:32,539
ABC CN with it so initially it was only

00:23:30,590 --> 00:23:33,140
5% but now it's like 50% of all

00:23:32,539 --> 00:23:35,360
connections

00:23:33,140 --> 00:23:38,750
if you have a Mac already tried to use

00:23:35,360 --> 00:23:40,250
ezn they actually had some initial

00:23:38,750 --> 00:23:41,990
problems there was like one more where

00:23:40,250 --> 00:23:43,970
operator was where they just saw a lot

00:23:41,990 --> 00:23:45,500
of reordering if they trying to use ecn

00:23:43,970 --> 00:23:47,600
that was probably again like one of the

00:23:45,500 --> 00:23:48,950
toast problems they had but what they

00:23:47,600 --> 00:23:50,210
did because it was one carrier they

00:23:48,950 --> 00:23:52,250
talked to the carrier they fixed their

00:23:50,210 --> 00:23:55,970
boxes it's working now

00:23:52,250 --> 00:23:58,760
and last time they reported on this they

00:23:55,970 --> 00:24:00,320
also saw an increasing number of support

00:23:58,760 --> 00:24:03,799
avicii and in the network where actually

00:24:00,320 --> 00:24:06,080
routers were marking packets s congested

00:24:03,799 --> 00:24:07,520
so it's kind of taking up probably

00:24:06,080 --> 00:24:10,309
because like one big company is

00:24:07,520 --> 00:24:12,200
interested in it and say the pressure is

00:24:10,309 --> 00:24:14,840
going up there so but anyway whatever

00:24:12,200 --> 00:24:16,309
did that they implemented a couple of

00:24:14,840 --> 00:24:17,750
heuristics to detect if there has a

00:24:16,309 --> 00:24:18,150
failure case and then fall back to

00:24:17,750 --> 00:24:20,280
nonny's

00:24:18,150 --> 00:24:22,220
you know like things like hi reordering

00:24:20,280 --> 00:24:25,500
they would just not use easy and anymore

00:24:22,220 --> 00:24:27,420
if you get a reset during handshake they

00:24:25,500 --> 00:24:29,070
would not use easy end anymore if you

00:24:27,420 --> 00:24:33,840
lose the sin you don't use it easy end

00:24:29,070 --> 00:24:36,300
anymore and so on and so on so at that

00:24:33,840 --> 00:24:38,910
point my question really is can we also

00:24:36,300 --> 00:24:39,450
try to enable ecn in the linux kernel by

00:24:38,910 --> 00:24:41,730
default

00:24:39,450 --> 00:24:44,370
do we need these heuristics what kind of

00:24:41,730 --> 00:24:48,000
heuristics and like I would even like to

00:24:44,370 --> 00:24:54,180
use accurate easy and by default yeah if

00:24:48,000 --> 00:24:56,310
there's interest question so how do we

00:24:54,180 --> 00:25:01,790
know that the the routers are actually

00:24:56,310 --> 00:25:05,640
marking bits correctly or not just

00:25:01,790 --> 00:25:09,510
firstly so you mean these numbers here

00:25:05,640 --> 00:25:11,880
no no I mean so it's possible that I

00:25:09,510 --> 00:25:14,700
know I know there was a discussion about

00:25:11,880 --> 00:25:16,560
like bread and all that stuff like doing

00:25:14,700 --> 00:25:20,900
the all the marketing and all that stuff

00:25:16,560 --> 00:25:24,330
right but I'm not sure if that was

00:25:20,900 --> 00:25:26,430
carried on and basically I don't know

00:25:24,330 --> 00:25:28,950
what kind of like you know marking with

00:25:26,430 --> 00:25:31,170
which probability the you know the

00:25:28,950 --> 00:25:34,410
routers are doing so how can we actually

00:25:31,170 --> 00:25:37,530
make sure that we are not really

00:25:34,410 --> 00:25:40,080
affected by what after marking that the

00:25:37,530 --> 00:25:42,150
routers aren't doing so this is actually

00:25:40,080 --> 00:25:44,940
actually more a question for accurate

00:25:42,150 --> 00:25:46,710
you see Indonesian because it's the same

00:25:44,940 --> 00:25:48,840
for los right for los you can also use

00:25:46,710 --> 00:25:50,700
some kind of a CEM and then you see more

00:25:48,840 --> 00:25:52,470
or less losses depending what kind of a

00:25:50,700 --> 00:25:54,360
km you use and the congestion control

00:25:52,470 --> 00:25:56,250
will react in one or other way on the

00:25:54,360 --> 00:25:57,690
under on the information and just

00:25:56,250 --> 00:25:59,340
because you don't know what's deployed

00:25:57,690 --> 00:26:01,440
in the network you always have this kind

00:25:59,340 --> 00:26:02,910
of slack where you could probably

00:26:01,440 --> 00:26:04,170
further optimize if you would know it

00:26:02,910 --> 00:26:05,010
but as you don't know you have to be

00:26:04,170 --> 00:26:06,480
prepared for everything

00:26:05,010 --> 00:26:09,480
that's like one of the problems with

00:26:06,480 --> 00:26:12,960
control with accurate easy and where you

00:26:09,480 --> 00:26:14,850
actually with where the ideas to use the

00:26:12,960 --> 00:26:17,700
level of congestion it depends even more

00:26:14,850 --> 00:26:20,850
but as everybody sharing the bottleneck

00:26:17,700 --> 00:26:23,580
gets the same gets the same feedback

00:26:20,850 --> 00:26:28,220
it's also not such a problem as long as

00:26:23,580 --> 00:26:31,140
they react somehow in a useful way to it

00:26:28,220 --> 00:26:31,770
so I think so I don't think there's a

00:26:31,140 --> 00:26:36,320
problem if you

00:26:31,770 --> 00:26:36,320
no you could optimize more but it works

00:26:43,909 --> 00:26:53,639
yes but you need a mic do you have any

00:26:50,879 --> 00:26:56,399
information about adoption of the qcn

00:26:53,639 --> 00:27:00,449
protocol quantified congestion protocol

00:26:56,399 --> 00:27:02,070
if you're yeah I have seen it somewhere

00:27:00,449 --> 00:27:04,440
I don't think it's kind of followed on

00:27:02,070 --> 00:27:07,259
honey anywhere right so I don't think

00:27:04,440 --> 00:27:10,429
there are any plans to implement use it

00:27:07,259 --> 00:27:10,429
or whatever okay

00:27:20,190 --> 00:27:24,519
yeah let me know if you're interested in

00:27:22,570 --> 00:27:26,669
helping me with my pitch otherwise thank

00:27:24,519 --> 00:27:26,669

YouTube URL: https://www.youtube.com/watch?v=CVvKWSGx3fc


