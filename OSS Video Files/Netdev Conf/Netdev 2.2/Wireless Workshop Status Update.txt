Title: Wireless Workshop Status Update
Publication date: 2018-03-14
Playlist: Netdev 2.2
Description: 
	Speaker: Johannes Berg
Friday November 10th, 2017 
Seoul, Korea
https://www.netdevconf.org/2.2/slides/berg-wireless-workshop.pdf
Captions: 
	00:00:02,100 --> 00:00:07,630
all right so I was asked to do a recap

00:00:05,319 --> 00:00:11,679
of what we did yesterday in this very

00:00:07,630 --> 00:00:17,380
room and it looks like about half the

00:00:11,679 --> 00:00:18,850
people are over there yesterday so they

00:00:17,380 --> 00:00:20,440
can interrupt me and tell me if I'm

00:00:18,850 --> 00:00:21,970
summarizing least wrong I did not have a

00:00:20,440 --> 00:00:24,310
lot of time to prepare this so the

00:00:21,970 --> 00:00:26,520
slides are not very polished and I have

00:00:24,310 --> 00:00:29,950
no idea how long this is going to take

00:00:26,520 --> 00:00:33,480
and but do please do feel free to

00:00:29,950 --> 00:00:36,129
interrupt me if there any questions I

00:00:33,480 --> 00:00:37,719
yeah I've been I've tried to summarize

00:00:36,129 --> 00:00:39,999
some of the discussions and try to give

00:00:37,719 --> 00:00:42,429
some background to some of the topics

00:00:39,999 --> 00:00:44,670
since if you get a bunch of Wi-Fi people

00:00:42,429 --> 00:00:46,960
in the room they will talk about Wi-Fi

00:00:44,670 --> 00:00:49,210
based on their previous knowledge and

00:00:46,960 --> 00:00:52,449
they will not explain to everyone else

00:00:49,210 --> 00:00:55,449
what they're talking about so I've tried

00:00:52,449 --> 00:00:59,019
to add some explanations here but it

00:00:55,449 --> 00:01:00,969
since I know all those things they may

00:00:59,019 --> 00:01:03,010
not be sufficient so please do feel free

00:01:00,969 --> 00:01:07,090
to interrupt me and ask for

00:01:03,010 --> 00:01:09,460
clarification where necessary so

00:01:07,090 --> 00:01:11,979
yesterday we had a full day here of a

00:01:09,460 --> 00:01:14,170
workshop with a bunch of people in the

00:01:11,979 --> 00:01:16,539
room to discuss what's going on in

00:01:14,170 --> 00:01:18,340
Wireless and what we're working on what

00:01:16,539 --> 00:01:20,560
the next topics are going or what the

00:01:18,340 --> 00:01:24,880
next work is going to be what the new

00:01:20,560 --> 00:01:28,659
standards are and all those things so I

00:01:24,880 --> 00:01:33,909
just start and this is basically in sort

00:01:28,659 --> 00:01:35,320
of random / chronological order that we

00:01:33,909 --> 00:01:38,320
started off the morning with the

00:01:35,320 --> 00:01:42,219
discussion about how we best merge new

00:01:38,320 --> 00:01:44,109
wireless drivers how the in particularly

00:01:42,219 --> 00:01:46,240
the real tech situation is and in

00:01:44,109 --> 00:01:50,140
particular how we can merge the new

00:01:46,240 --> 00:01:52,780
Marvel drivers I would like to thank

00:01:50,140 --> 00:01:57,070
Realtek and Marvel for sending people

00:01:52,780 --> 00:02:00,420
here to to discuss these issues because

00:01:57,070 --> 00:02:02,140
that's very helpful for for us as

00:02:00,420 --> 00:02:05,530
upstream maintainer

00:02:02,140 --> 00:02:08,050
etc to talk to the people and get their

00:02:05,530 --> 00:02:11,140
view on things and understand what

00:02:08,050 --> 00:02:13,569
they're what what where they're coming

00:02:11,140 --> 00:02:15,310
from what their pain points are etc I

00:02:13,569 --> 00:02:18,940
think we had a

00:02:15,310 --> 00:02:20,920
and good discussion on on these things

00:02:18,940 --> 00:02:23,620
and I'm hoping they will all be

00:02:20,920 --> 00:02:26,800
submitting drivers soon so we'll see

00:02:23,620 --> 00:02:28,390
what happens this was a relatively long

00:02:26,800 --> 00:02:33,910
discussion and we discussed a bunch of

00:02:28,390 --> 00:02:35,770
things about workflow issues and review

00:02:33,910 --> 00:02:37,780
issues and the things like that that

00:02:35,770 --> 00:02:39,940
would be familiar to most people who are

00:02:37,780 --> 00:02:43,650
working upstream so I'm not going to

00:02:39,940 --> 00:02:45,970
reiterate that I will just say that I

00:02:43,650 --> 00:02:48,940
think it was very good that we had real

00:02:45,970 --> 00:02:52,990
tech and Marvel both here represented

00:02:48,940 --> 00:02:55,420
here and hopefully we'll have will have

00:02:52,990 --> 00:02:58,150
some solutions to their their drivers

00:02:55,420 --> 00:03:03,580
and then in the New York to medium

00:02:58,150 --> 00:03:06,850
future and then we sort of started

00:03:03,580 --> 00:03:08,950
diving into all the time kinds of issues

00:03:06,850 --> 00:03:10,780
we're talking about you only spoke about

00:03:08,950 --> 00:03:13,030
the enforcement upcoming enforcement of

00:03:10,780 --> 00:03:15,520
radio parameters in firmware that's not

00:03:13,030 --> 00:03:18,880
really new to many of us it's just new

00:03:15,520 --> 00:03:20,050
to their particular chipset so that's

00:03:18,880 --> 00:03:22,750
something that will happen that the

00:03:20,050 --> 00:03:24,910
regulatory bodies are pushing for so

00:03:22,750 --> 00:03:26,739
that even in an open-source driver the

00:03:24,910 --> 00:03:28,840
the users can't just go modify the code

00:03:26,739 --> 00:03:31,930
and make the radio do something that's

00:03:28,840 --> 00:03:34,510
not permitted by regulatory that there

00:03:31,930 --> 00:03:35,860
are problems with this enforcing this

00:03:34,510 --> 00:03:39,100
because you can't really know where

00:03:35,860 --> 00:03:40,840
you're where you are if you're like if

00:03:39,100 --> 00:03:42,550
you're in the Wi-Fi Nick basically

00:03:40,840 --> 00:03:44,290
firmware running in the Wi-Fi Nick it's

00:03:42,550 --> 00:03:46,239
really hard to figure out where in the

00:03:44,290 --> 00:03:48,519
world you are at a certain point of time

00:03:46,239 --> 00:03:50,890
so there are complications with this but

00:03:48,519 --> 00:03:56,980
it is going to happen and we can't do

00:03:50,890 --> 00:04:00,100
anything against it the another topic

00:03:56,980 --> 00:04:04,390
that comes up here is that let's see the

00:04:00,100 --> 00:04:08,640
European regulatory body essentially is

00:04:04,390 --> 00:04:11,320
starting to limit in order to gain lte-u

00:04:08,640 --> 00:04:13,060
compatibility on the 5 gigahertz band so

00:04:11,320 --> 00:04:15,850
LTE is pushing into a more spectrum

00:04:13,060 --> 00:04:17,530
because everyone wants more spectrum and

00:04:15,850 --> 00:04:18,640
if they can get it for free hey even

00:04:17,530 --> 00:04:22,900
better

00:04:18,640 --> 00:04:25,060
so LT is pushing in to 5 gigahertz

00:04:22,900 --> 00:04:28,570
spectrum that Wi-Fi is currently pretty

00:04:25,060 --> 00:04:29,090
much using by itself so in order to have

00:04:28,570 --> 00:04:32,510
interrupt

00:04:29,090 --> 00:04:34,340
ability the the standards or the yeah so

00:04:32,510 --> 00:04:37,250
Etsy is the standards body in a sense

00:04:34,340 --> 00:04:40,190
but the regulatory agencies are going to

00:04:37,250 --> 00:04:42,680
require certain medium access parameters

00:04:40,190 --> 00:04:46,180
certain ways of accessing the medium so

00:04:42,680 --> 00:04:51,260
that the two can coordinate in a sense

00:04:46,180 --> 00:04:53,990
and then this in in terms of Wi-Fi this

00:04:51,260 --> 00:04:56,330
limits the edca parameters which is the

00:04:53,990 --> 00:04:58,910
which are the parameters that are used

00:04:56,330 --> 00:05:01,550
to determine how medium access is done

00:04:58,910 --> 00:05:04,700
how long you back off listening before

00:05:01,550 --> 00:05:06,740
transmitting if there's a collision how

00:05:04,700 --> 00:05:09,889
long you back off after that how long

00:05:06,740 --> 00:05:11,300
you can use the channel at most for a

00:05:09,889 --> 00:05:13,580
given period of time

00:05:11,300 --> 00:05:14,930
so these parameters are going to be

00:05:13,580 --> 00:05:16,820
limited and there's going to be neat

00:05:14,930 --> 00:05:20,330
we're going to have to do some work to

00:05:16,820 --> 00:05:21,860
implement that in Linux people are

00:05:20,330 --> 00:05:24,979
working on it so it's not really

00:05:21,860 --> 00:05:27,380
something that that's just sort of a

00:05:24,979 --> 00:05:29,900
discussion it was also a bit of an FYI

00:05:27,380 --> 00:05:34,310
this is coming and we'll have to

00:05:29,900 --> 00:05:36,169
implement it another thing with a

00:05:34,310 --> 00:05:39,800
regulatory that we talked about it or

00:05:36,169 --> 00:05:42,350
that I presented essentially was that we

00:05:39,800 --> 00:05:44,780
recently merged a new framework into

00:05:42,350 --> 00:05:47,090
into the wireless stack to load the

00:05:44,780 --> 00:05:49,580
entire regulatory database I don't know

00:05:47,090 --> 00:05:53,180
if you've run Linux on a laptop you've

00:05:49,580 --> 00:05:55,010
perhaps seen the whole C RDA and all

00:05:53,180 --> 00:05:58,280
those things that it loads a new country

00:05:55,010 --> 00:06:01,760
when you put up your system it loads

00:05:58,280 --> 00:06:05,960
data from in a very roundabout way using

00:06:01,760 --> 00:06:07,580
the C RDA tool that we're getting rid of

00:06:05,960 --> 00:06:09,229
essentially and loading the whole

00:06:07,580 --> 00:06:12,169
database into the kernel because it can

00:06:09,229 --> 00:06:16,370
be presented in a roughly 3.5 kilobyte

00:06:12,169 --> 00:06:19,130
blob so it's not very big so loading it

00:06:16,370 --> 00:06:21,860
into the kernel in any new extensible

00:06:19,130 --> 00:06:23,690
format makes a lot of sense because it

00:06:21,860 --> 00:06:26,120
gives us a lot more flexibility than

00:06:23,690 --> 00:06:30,979
having to update the current user space

00:06:26,120 --> 00:06:32,539
tools all the time and having to the

00:06:30,979 --> 00:06:34,400
current format is almost also not

00:06:32,539 --> 00:06:36,200
extensible so there were problems there

00:06:34,400 --> 00:06:37,820
but rather than making the current

00:06:36,200 --> 00:06:39,770
format extensible and updating all the

00:06:37,820 --> 00:06:41,539
user space tools and updating all the

00:06:39,770 --> 00:06:42,330
api's and everything we just decided to

00:06:41,539 --> 00:06:44,039
just

00:06:42,330 --> 00:06:49,379
the whole thing into the kernel which

00:06:44,039 --> 00:06:52,949
makes a lot of things a lot easier not

00:06:49,379 --> 00:06:55,199
three it's in the tree now I it's in

00:06:52,949 --> 00:06:58,259
next now so I'm whatever the next

00:06:55,199 --> 00:07:02,460
version is it will be in 4:15 that I

00:06:58,259 --> 00:07:06,479
guess and then yeah and then we haven't

00:07:02,460 --> 00:07:07,949
even released a binary yet so it will

00:07:06,479 --> 00:07:09,509
take some time to sort out all these

00:07:07,949 --> 00:07:10,830
issues but we have all the

00:07:09,509 --> 00:07:13,740
infrastructure in place and we've

00:07:10,830 --> 00:07:16,500
already done I've already built in one

00:07:13,740 --> 00:07:20,219
extension in a sense to prove that the

00:07:16,500 --> 00:07:22,110
extensible format works so that I think

00:07:20,219 --> 00:07:23,879
it gives us also a way forward with the

00:07:22,110 --> 00:07:28,400
whole Etsy parameters that we need to

00:07:23,879 --> 00:07:28,400
represent in some way and that will help

00:07:29,150 --> 00:07:35,690
yes the yeah we can't break user net

00:07:32,909 --> 00:07:37,919
right so we still do support CID a

00:07:35,690 --> 00:07:39,690
I'm hoping it will go away over some

00:07:37,919 --> 00:07:41,550
time because people will have will want

00:07:39,690 --> 00:07:44,490
and have to migrate to new databases

00:07:41,550 --> 00:07:47,969
that represent more data that we need

00:07:44,490 --> 00:07:50,819
but um for now see RDA still supported

00:07:47,969 --> 00:07:53,190
and will be supported for the

00:07:50,819 --> 00:07:55,440
foreseeable future if you don't have the

00:07:53,190 --> 00:07:57,990
database file then it will invoke see

00:07:55,440 --> 00:07:59,699
RDA but if you do have it and it will

00:07:57,990 --> 00:08:01,379
basically just say all right I got all

00:07:59,699 --> 00:08:03,839
the information I need and I'm not going

00:08:01,379 --> 00:08:06,000
to have to invoke the RDA so that makes

00:08:03,839 --> 00:08:07,259
a lot things simpler because you don't

00:08:06,000 --> 00:08:11,400
have to go through the whole you event

00:08:07,259 --> 00:08:13,669
and everything - to get this to get to

00:08:11,400 --> 00:08:13,669
the data

00:08:31,099 --> 00:08:47,550
yeah yeah I tried to mention that well

00:08:45,480 --> 00:08:49,769
we always need to represent the data in

00:08:47,550 --> 00:08:51,510
both ways because even if we enforce

00:08:49,769 --> 00:08:54,120
things in the device we still need to

00:08:51,510 --> 00:08:56,220
expose the parameters that should be

00:08:54,120 --> 00:08:57,660
used sometimes we just know in the

00:08:56,220 --> 00:08:59,339
device that we need to enforce something

00:08:57,660 --> 00:09:01,769
so we need to take the parameters from

00:08:59,339 --> 00:09:03,480
somewhere sometimes you want your laptop

00:09:01,769 --> 00:09:05,459
is I don't know maybe your laptop was

00:09:03,480 --> 00:09:08,010
built in the EU but your move you've

00:09:05,459 --> 00:09:09,990
moved to to the US and you don't want to

00:09:08,010 --> 00:09:11,250
be breaking the u.s. rules so you need

00:09:09,990 --> 00:09:12,899
some sort of higher level enforcement

00:09:11,250 --> 00:09:15,569
because your laptop may think it's a

00:09:12,899 --> 00:09:19,170
European model and just apply European

00:09:15,569 --> 00:09:21,930
rules so you can apply more restrictive

00:09:19,170 --> 00:09:24,630
rules also using this database right you

00:09:21,930 --> 00:09:26,250
can say alright I really my laptop

00:09:24,630 --> 00:09:28,680
allows me to do channel 12 and 13

00:09:26,250 --> 00:09:30,600
because it was built in Europe but I'm

00:09:28,680 --> 00:09:33,389
in the US right now I really don't want

00:09:30,600 --> 00:09:36,510
to use channel 12 and 13 so nobody comes

00:09:33,389 --> 00:09:38,790
knocking to my door so I you know it's a

00:09:36,510 --> 00:09:40,699
stretch but still so so you can use it

00:09:38,790 --> 00:09:43,500
and there are some things that you just

00:09:40,699 --> 00:09:44,970
you know maybe you you've represented

00:09:43,500 --> 00:09:47,250
your transmit power and you're really

00:09:44,970 --> 00:09:50,579
important create your parameters in the

00:09:47,250 --> 00:09:52,649
firmware like radar detection but other

00:09:50,579 --> 00:09:55,740
things you know which sub-channels or

00:09:52,649 --> 00:09:56,910
have which certain further limits or

00:09:55,740 --> 00:09:59,310
things like that maybe you haven't

00:09:56,910 --> 00:10:02,069
represented so there's still value in

00:09:59,310 --> 00:10:03,930
having this data and I think generally

00:10:02,069 --> 00:10:07,260
there's also still value in having this

00:10:03,930 --> 00:10:10,250
data collected in some way in in a

00:10:07,260 --> 00:10:10,250
format that we can access

00:10:12,310 --> 00:10:19,480
so another thing this is just sort of a

00:10:16,749 --> 00:10:22,959
whole list of things right so there's no

00:10:19,480 --> 00:10:26,529
particular order to it etc so another

00:10:22,959 --> 00:10:32,649
thing that's been going on for I don't

00:10:26,529 --> 00:10:35,620
know I would argue a few years since

00:10:32,649 --> 00:10:39,819
civvy okay so that's a year and a half

00:10:35,620 --> 00:10:43,860
or something like that we've had we've

00:10:39,819 --> 00:10:46,540
we've been discussing that we want to do

00:10:43,860 --> 00:10:48,459
the frame format so Wireless has a

00:10:46,540 --> 00:10:50,680
different frame format over-the-air for

00:10:48,459 --> 00:10:52,600
obvious reasons and we need to be able

00:10:50,680 --> 00:10:54,160
to transform that into the Ethernet

00:10:52,600 --> 00:10:56,589
format because that's the data plane

00:10:54,160 --> 00:10:58,389
format that we expose to the kernel so

00:10:56,589 --> 00:11:00,249
there there's hardware now or there has

00:10:58,389 --> 00:11:03,370
been hardware for quite a while that can

00:11:00,249 --> 00:11:04,899
do this conversion in hardware and we

00:11:03,370 --> 00:11:07,930
need to be able to support that so there

00:11:04,899 --> 00:11:11,050
was some discussion ongoing discussions

00:11:07,930 --> 00:11:12,790
around how we can support that and it

00:11:11,050 --> 00:11:15,309
has some complexities especially around

00:11:12,790 --> 00:11:17,250
monitor mode and encapsulating the

00:11:15,309 --> 00:11:19,990
frames in radio tab because that in

00:11:17,250 --> 00:11:22,059
currently assumes that you have a two to

00:11:19,990 --> 00:11:23,500
eleven format and we discussed a little

00:11:22,059 --> 00:11:25,120
bit what we can do there

00:11:23,500 --> 00:11:28,029
it looks like we'll probably probably

00:11:25,120 --> 00:11:29,529
just have to break it to some extent to

00:11:28,029 --> 00:11:32,199
be able to represent a two to three

00:11:29,529 --> 00:11:34,029
frames because that's we really want to

00:11:32,199 --> 00:11:35,740
be able to represent everything that we

00:11:34,029 --> 00:11:38,889
get from the device there in order to

00:11:35,740 --> 00:11:40,990
aid debugging it was also blocking this

00:11:38,889 --> 00:11:42,699
filter thing I will talk about on the

00:11:40,990 --> 00:11:45,309
next slide but I think we hashed out a

00:11:42,699 --> 00:11:50,920
solution to that over the last couple of

00:11:45,309 --> 00:11:53,740
weeks so the the filter thing there

00:11:50,920 --> 00:11:55,750
there's this comes up every now and then

00:11:53,740 --> 00:11:57,970
people want to introspect

00:11:55,750 --> 00:11:59,679
what's happening on Wi-Fi and they want

00:11:57,970 --> 00:12:02,100
to see management frames they want to

00:11:59,679 --> 00:12:05,110
keep statistics things like that so they

00:12:02,100 --> 00:12:06,610
post patches and I keep rejecting the

00:12:05,110 --> 00:12:08,800
patches saying this you shouldn't be

00:12:06,610 --> 00:12:11,589
using you shouldn't be adding special

00:12:08,800 --> 00:12:13,689
patches for your special infrastructure

00:12:11,589 --> 00:12:15,579
needs or for your special introspection

00:12:13,689 --> 00:12:19,749
needs because we have to maintain that

00:12:15,579 --> 00:12:21,220
code forever essentially and I keep

00:12:19,749 --> 00:12:22,709
saying you should be using monitor

00:12:21,220 --> 00:12:24,360
interfaces because you see everything

00:12:22,709 --> 00:12:26,700
but the problem

00:12:24,360 --> 00:12:27,930
that then you can add a socket filter

00:12:26,700 --> 00:12:29,940
and you don't see the frames that you

00:12:27,930 --> 00:12:33,029
don't care about you only see the frames

00:12:29,940 --> 00:12:36,480
that you want but even just doing the

00:12:33,029 --> 00:12:38,100
sqb copy is too expensive so in order to

00:12:36,480 --> 00:12:40,079
send a frame to the monitor because we

00:12:38,100 --> 00:12:41,730
have to modify the frame later to goo

00:12:40,079 --> 00:12:45,300
header conversions and things like that

00:12:41,730 --> 00:12:47,010
we have to do an esky B copy and that's

00:12:45,300 --> 00:12:48,570
really expensive especially if you just

00:12:47,010 --> 00:12:49,200
throw away the frame in the socket

00:12:48,570 --> 00:12:51,600
filter and later

00:12:49,200 --> 00:12:54,480
so the solution we've been we've been

00:12:51,600 --> 00:12:59,490
talking about for a while is to add an e

00:12:54,480 --> 00:13:00,779
BP F filter before that copy so that you

00:12:59,490 --> 00:13:02,610
can essentially have a filter that

00:13:00,779 --> 00:13:04,079
decides whether or not to do the copy

00:13:02,610 --> 00:13:06,000
and whether or not you want to see that

00:13:04,079 --> 00:13:07,560
frame you could even just discard the

00:13:06,000 --> 00:13:11,459
frame and do your statistics right in

00:13:07,560 --> 00:13:13,709
that e BB F filter using BP BP F maps or

00:13:11,459 --> 00:13:15,690
things like that depending on what your

00:13:13,709 --> 00:13:19,019
needs are so this would be attached to

00:13:15,690 --> 00:13:21,390
monitor interface so I I have patches

00:13:19,019 --> 00:13:24,120
for this I just need to do some

00:13:21,390 --> 00:13:26,250
introspection work like add BPF

00:13:24,120 --> 00:13:28,829
introspection to them and do a little

00:13:26,250 --> 00:13:32,399
bit of work to do the whole frame format

00:13:28,829 --> 00:13:34,410
issue or solve that whole frame format

00:13:32,399 --> 00:13:38,010
ashes issue so you can determine whether

00:13:34,410 --> 00:13:39,839
it's a dodgy Davin or add three frame so

00:13:38,010 --> 00:13:41,730
that that should be that should sort of

00:13:39,839 --> 00:13:43,890
solve that problem of everyone wanting

00:13:41,730 --> 00:13:46,410
to add their own special code to get

00:13:43,890 --> 00:13:49,230
certain frames out of the system to see

00:13:46,410 --> 00:13:51,930
what's going on or sometimes to debug it

00:13:49,230 --> 00:13:55,070
sometimes to just do some statistics

00:13:51,930 --> 00:13:58,980
sometimes to do special protocols on top

00:13:55,070 --> 00:14:00,480
etc so there's some some there's

00:13:58,980 --> 00:14:02,459
certainly a need for that for something

00:14:00,480 --> 00:14:06,920
like this and we don't I don't I don't

00:14:02,459 --> 00:14:06,920
want to add code for all of these things

00:14:08,390 --> 00:14:14,160
another thing we talked about for some

00:14:11,250 --> 00:14:18,529
time was the internal T excuse and

00:14:14,160 --> 00:14:21,420
mcadoo 211 it's a mechanism that allows

00:14:18,529 --> 00:14:24,089
a whole bunch of things we essentially

00:14:21,420 --> 00:14:26,220
started by passing the cue disks and we

00:14:24,089 --> 00:14:28,380
want to convert to all of that - to this

00:14:26,220 --> 00:14:29,610
infrastructure for all the drivers but

00:14:28,380 --> 00:14:32,190
I'm not going to go into this because

00:14:29,610 --> 00:14:34,980
Tucker will explain it in his talk at

00:14:32,190 --> 00:14:36,750
1:00 p.m. so if you're interested you

00:14:34,980 --> 00:14:38,250
should just listen to his talk instead

00:14:36,750 --> 00:14:40,560
and he will spend

00:14:38,250 --> 00:14:42,120
a lot more time than I have now to go

00:14:40,560 --> 00:14:44,730
into the details and what's going on

00:14:42,120 --> 00:14:51,630
there and what are the next things that

00:14:44,730 --> 00:14:54,480
are happening one of the next big things

00:14:51,630 --> 00:14:57,830
coming in the standards is the HD the

00:14:54,480 --> 00:15:01,620
high efficiency standard in 802 11 ax

00:14:57,830 --> 00:15:05,820
it's basically the next five standard

00:15:01,620 --> 00:15:07,590
that's relevant to to the to us as what

00:15:05,820 --> 00:15:10,320
we're doing and in two point four or

00:15:07,590 --> 00:15:13,190
five gigahertz bands for for the regular

00:15:10,320 --> 00:15:17,580
Wi-Fi chips that you have in the laptops

00:15:13,190 --> 00:15:22,760
it's take some tricks from LTE with

00:15:17,580 --> 00:15:26,280
respect to spectrum efficiency so it has

00:15:22,760 --> 00:15:29,940
well it takes some modulation tricks

00:15:26,280 --> 00:15:31,950
from LTE it takes it allows higher and

00:15:29,940 --> 00:15:33,810
even smaller bandwidth then you have

00:15:31,950 --> 00:15:36,420
today in order to cram more people in

00:15:33,810 --> 00:15:38,430
one of the use cases would be to have

00:15:36,420 --> 00:15:41,100
like a whole stadium full of people all

00:15:38,430 --> 00:15:43,200
using Wi-Fi and getting that to a higher

00:15:41,100 --> 00:15:48,180
level of efficiency then you can get to

00:15:43,200 --> 00:15:50,190
with today's Wi-Fi and in there are as

00:15:48,180 --> 00:15:52,650
usual for a new five standard there are

00:15:50,190 --> 00:15:54,990
a lot of things to do we want to be able

00:15:52,650 --> 00:15:56,880
to sniff this so we need radio tap

00:15:54,990 --> 00:15:59,670
definitions there are new management

00:15:56,880 --> 00:16:02,610
frames new management elements inside

00:15:59,670 --> 00:16:04,260
those frames and in particular one of

00:16:02,610 --> 00:16:07,440
the things that we also discussed was

00:16:04,260 --> 00:16:09,540
that it appears to require multi bssid

00:16:07,440 --> 00:16:13,200
support although I haven't found the

00:16:09,540 --> 00:16:17,580
language in the spec yet it's there

00:16:13,200 --> 00:16:19,680
somewhere I know it there's a lot of

00:16:17,580 --> 00:16:21,720
language in the spec where it will say

00:16:19,680 --> 00:16:24,600
all right you you have to do multi PS or

00:16:21,720 --> 00:16:26,940
you can do if you're an HD Phi you you

00:16:24,600 --> 00:16:28,230
can do multi PS SSD support without all

00:16:26,940 --> 00:16:30,270
the other measurement stuff that usually

00:16:28,230 --> 00:16:34,830
implies so that's a bunch of changes

00:16:30,270 --> 00:16:38,310
there but I didn't there's a typo here

00:16:34,830 --> 00:16:41,430
it should be ADA 211 802 11 ax for

00:16:38,310 --> 00:16:43,770
obvious reasons but yeah so that

00:16:41,430 --> 00:16:46,290
requires multi bssid support which we

00:16:43,770 --> 00:16:49,320
also talked about today HP SSID is

00:16:46,290 --> 00:16:51,990
sending beacons and that's not

00:16:49,320 --> 00:16:55,630
necessarily the best thing to do if you

00:16:51,990 --> 00:16:57,040
one air access point that's you know

00:16:55,630 --> 00:16:58,510
said let's say even in your house you

00:16:57,040 --> 00:17:00,490
might have an access point that has your

00:16:58,510 --> 00:17:02,890
home network your carriers Network

00:17:00,490 --> 00:17:06,910
presented like here all those networks

00:17:02,890 --> 00:17:09,520
you also see the ole a Wi-Fi that you

00:17:06,910 --> 00:17:11,020
have to pay to use and that's the same

00:17:09,520 --> 00:17:13,300
access point implementing that so that's

00:17:11,020 --> 00:17:15,190
the second network and Maya house I also

00:17:13,300 --> 00:17:16,870
have a guest network that people can use

00:17:15,190 --> 00:17:20,680
the internet but they can't really get

00:17:16,870 --> 00:17:22,300
to any of my devices so usually you can

00:17:20,680 --> 00:17:25,560
have a whole bunch of networks in the

00:17:22,300 --> 00:17:27,640
enterprise it's worse because you have

00:17:25,560 --> 00:17:29,770
multiple networks maybe you have one for

00:17:27,640 --> 00:17:32,560
your phone's one for certain classes of

00:17:29,770 --> 00:17:35,380
devices one for guests one for the

00:17:32,560 --> 00:17:36,610
employees personal devices that are not

00:17:35,380 --> 00:17:39,250
supposed to be on the company network

00:17:36,610 --> 00:17:41,200
but you want to provide them Wi-Fi for

00:17:39,250 --> 00:17:43,570
their phones and you don't want them to

00:17:41,200 --> 00:17:45,460
be using guest networks so so you can

00:17:43,570 --> 00:17:47,800
have a lot of networks on the same

00:17:45,460 --> 00:17:49,930
access points and today each one of

00:17:47,800 --> 00:17:52,840
those is sending beacons and with the

00:17:49,930 --> 00:17:57,760
multi be SSID that more or less goes

00:17:52,840 --> 00:17:59,590
away it changes that but we need to do

00:17:57,760 --> 00:18:01,450
client updates and these signed updates

00:17:59,590 --> 00:18:05,950
are needed in Linux we need to be able

00:18:01,450 --> 00:18:08,440
to understand what what these what the

00:18:05,950 --> 00:18:12,100
different VSS IDs are for single beacon

00:18:08,440 --> 00:18:13,690
and how to parse them etc so we have

00:18:12,100 --> 00:18:15,550
some code to do that and we spent some

00:18:13,690 --> 00:18:20,280
time discussing what we need to do there

00:18:15,550 --> 00:18:20,280
and what current Orcas that's ongoing

00:18:21,600 --> 00:18:28,180
another thing was the simultaneous

00:18:25,600 --> 00:18:30,220
authentication of equals so we have

00:18:28,180 --> 00:18:32,380
support for this now it's basically a

00:18:30,220 --> 00:18:34,780
replacement for the PSK that you use

00:18:32,380 --> 00:18:37,480
with personal networks it's more secure

00:18:34,780 --> 00:18:40,030
implementation of that it uses elliptic

00:18:37,480 --> 00:18:42,010
curve in the handshake but if you have a

00:18:40,030 --> 00:18:43,840
phone that's offloading the

00:18:42,010 --> 00:18:46,690
authentication handshake to the Wi-Fi

00:18:43,840 --> 00:18:47,980
Nick to the chip itself then you may not

00:18:46,690 --> 00:18:50,560
want to implement the whole elliptic

00:18:47,980 --> 00:18:53,680
curve or not all of the curves in the

00:18:50,560 --> 00:18:56,620
Wi-Fi Wi-Fi chip so we discussed some

00:18:53,680 --> 00:18:58,240
ways of offloading that or well not

00:18:56,620 --> 00:19:00,820
really offloading but of putting that

00:18:58,240 --> 00:19:04,110
back on the host given how those chips

00:19:00,820 --> 00:19:05,429
work and the

00:19:04,110 --> 00:19:06,929
authentication handshake can be

00:19:05,429 --> 00:19:08,549
offloaded when you use the connect

00:19:06,929 --> 00:19:10,350
command or is offloaded when you use the

00:19:08,549 --> 00:19:13,200
connect command but you want the curve

00:19:10,350 --> 00:19:15,059
to be back on the host so we discussed a

00:19:13,200 --> 00:19:17,880
few potential solutions for that I'm not

00:19:15,059 --> 00:19:19,530
sure we freely or I yeah we haven't

00:19:17,880 --> 00:19:21,270
really agreed we need to do some more

00:19:19,530 --> 00:19:26,400
research and what's really unnecessary

00:19:21,270 --> 00:19:31,290
and how we can solve this another thing

00:19:26,400 --> 00:19:35,910
I actually brought up is the nan Anton

00:19:31,290 --> 00:19:37,049
and data path so Nana's neighbor I don't

00:19:35,910 --> 00:19:38,910
know there's a bunch of terms neighbor

00:19:37,049 --> 00:19:42,150
awareness networking neighbor aware

00:19:38,910 --> 00:19:45,030
network networking something like that

00:19:42,150 --> 00:19:48,799
it provides device to device discovery

00:19:45,030 --> 00:19:53,840
in an supposedly energy efficient manner

00:19:48,799 --> 00:19:57,030
someone said it was the apology for p2p

00:19:53,840 --> 00:20:00,059
p2p is the the Wi-Fi direct standard the

00:19:57,030 --> 00:20:01,590
technical term and you may have been

00:20:00,059 --> 00:20:03,059
using it on your phones or you may have

00:20:01,590 --> 00:20:05,790
support on your phones you may even have

00:20:03,059 --> 00:20:07,410
support for nan on your phones it's also

00:20:05,790 --> 00:20:09,000
intended to work well in a crowded

00:20:07,410 --> 00:20:11,370
environment so when you're downstairs

00:20:09,000 --> 00:20:13,470
you can still use it rather than not

00:20:11,370 --> 00:20:16,380
being able to use Wi-Fi because everyone

00:20:13,470 --> 00:20:19,380
is and there are extensions under work

00:20:16,380 --> 00:20:24,179
for for data transfer I even found some

00:20:19,380 --> 00:20:27,299
code out there today and there's a link

00:20:24,179 --> 00:20:31,230
here for for what the Wi-Fi lines has to

00:20:27,299 --> 00:20:33,600
say about this so we are working on I

00:20:31,230 --> 00:20:36,330
work for Intel and we're working on the

00:20:33,600 --> 00:20:39,500
protocol implementation of this in WPA

00:20:36,330 --> 00:20:42,240
supplicants so that we can have we can

00:20:39,500 --> 00:20:44,940
sort of have this in Linux in an easier

00:20:42,240 --> 00:20:47,549
way it will need device support because

00:20:44,940 --> 00:20:50,850
there's a lot of scheduling and timing

00:20:47,549 --> 00:20:52,799
restrictions and you you can be on

00:20:50,850 --> 00:20:55,230
different channels at the same time and

00:20:52,799 --> 00:20:57,720
things like that and but we will also

00:20:55,230 --> 00:21:00,720
likely add some support to Hardware sim

00:20:57,720 --> 00:21:04,380
which is the hardware simulator that

00:21:00,720 --> 00:21:06,210
uses mcadoo 211 so that we can test the

00:21:04,380 --> 00:21:08,820
whole thing in a high level without

00:21:06,210 --> 00:21:10,580
having to have a whole lab set up that

00:21:08,820 --> 00:21:15,059
that has all the different devices that

00:21:10,580 --> 00:21:17,220
you may want to use so there's some this

00:21:15,059 --> 00:21:19,530
is ongoing work we have some code we

00:21:17,220 --> 00:21:22,830
haven't released

00:21:19,530 --> 00:21:24,900
and we I hear we just really wanted to

00:21:22,830 --> 00:21:27,690
discuss the architecture that makes

00:21:24,900 --> 00:21:30,320
sense and so this is probably how what

00:21:27,690 --> 00:21:30,320
we're going to do

00:21:40,870 --> 00:21:48,820
so the remaining slides I have is just a

00:21:44,650 --> 00:21:51,610
whole bunch of miscellaneous topics we

00:21:48,820 --> 00:21:53,409
discussed yet again as we've described

00:21:51,610 --> 00:21:56,440
in discussing in the last few years that

00:21:53,409 --> 00:21:58,210
we want to do the equal the

00:21:56,440 --> 00:22:00,490
authentication frames so the

00:21:58,210 --> 00:22:02,650
authentication frames in Wi-Fi there's

00:22:00,490 --> 00:22:04,299
the One X handshake that uses them and

00:22:02,650 --> 00:22:06,789
there's the four-way handshake that uses

00:22:04,299 --> 00:22:09,669
them and currently they're going through

00:22:06,789 --> 00:22:12,400
the data path which has implications on

00:22:09,669 --> 00:22:14,679
Linux and and how this works there's

00:22:12,400 --> 00:22:17,740
been a regression for years in the

00:22:14,679 --> 00:22:19,990
bridging code that broke this insert in

00:22:17,740 --> 00:22:21,490
some configurations or you have to

00:22:19,990 --> 00:22:23,860
configure it in a really special way

00:22:21,490 --> 00:22:26,200
that's the biggest pain point right now

00:22:23,860 --> 00:22:28,000
there are also extensions that you may

00:22:26,200 --> 00:22:31,240
or may not need to encrypt these frames

00:22:28,000 --> 00:22:33,340
or you may have certain requirements on

00:22:31,240 --> 00:22:35,289
these frames that we can't express when

00:22:33,340 --> 00:22:37,409
they're transmitted as data frames and

00:22:35,289 --> 00:22:40,240
then the Wi-Fi stack doesn't really

00:22:37,409 --> 00:22:42,010
there's no really no way to transmit

00:22:40,240 --> 00:22:44,320
them as data frames and have the Wi-Fi

00:22:42,010 --> 00:22:45,700
stack act specially on them so we want

00:22:44,320 --> 00:22:47,799
to use them because they're really

00:22:45,700 --> 00:22:51,809
control frames in a sense they are not

00:22:47,799 --> 00:22:54,070
actual data frames we want to use them

00:22:51,809 --> 00:22:58,480
embed them in the Wi-Fi configuration

00:22:54,070 --> 00:23:00,970
API instead and yeah so right now the

00:22:58,480 --> 00:23:02,770
status of that is that no one really

00:23:00,970 --> 00:23:04,630
knows what's going on someone promised

00:23:02,770 --> 00:23:07,600
they would work on it but didn't show up

00:23:04,630 --> 00:23:08,950
so I don't know what what their what's

00:23:07,600 --> 00:23:12,480
happening there but it's definitely

00:23:08,950 --> 00:23:16,120
something that we're going to be doing

00:23:12,480 --> 00:23:21,070
we discussed the net link extend attack

00:23:16,120 --> 00:23:24,370
support which basically allows you to

00:23:21,070 --> 00:23:26,830
give more give error strings with error

00:23:24,370 --> 00:23:28,059
messages so in anything that's net link

00:23:26,830 --> 00:23:29,140
you have you always have the problem

00:23:28,059 --> 00:23:31,029
that if you return

00:23:29,140 --> 00:23:34,600
Ian Val it's really hard to figure out

00:23:31,029 --> 00:23:39,450
what that meant so we will likely add a

00:23:34,600 --> 00:23:42,580
bunch of strings to to the Wi-Fi code to

00:23:39,450 --> 00:23:45,820
help you figure out what was wrong when

00:23:42,580 --> 00:23:47,500
you send your Wi-Fi command so that's

00:23:45,820 --> 00:23:49,720
just sort of we have the infrastructure

00:23:47,500 --> 00:23:51,520
now and we want to use it also with the

00:23:49,720 --> 00:23:53,110
non code that we're working on we want

00:23:51,520 --> 00:23:54,160
to use the cookie support so when you

00:23:53,110 --> 00:23:56,410
return so

00:23:54,160 --> 00:23:58,690
successful and you've created some sort

00:23:56,410 --> 00:24:02,140
of object you can return the handle to

00:23:58,690 --> 00:24:04,320
this object which we which is called the

00:24:02,140 --> 00:24:07,090
cookie in the in our case and net link

00:24:04,320 --> 00:24:09,700
you can return that that cookie inside

00:24:07,090 --> 00:24:11,410
the net link act message that comes back

00:24:09,700 --> 00:24:13,470
when you've done your operation so you

00:24:11,410 --> 00:24:24,070
don't have the overhead of creating more

00:24:13,470 --> 00:24:26,860
more messages there so the question is

00:24:24,070 --> 00:24:29,350
what about drivers yeah in theory we can

00:24:26,860 --> 00:24:31,030
plumb this through to the drivers we

00:24:29,350 --> 00:24:33,640
have to we would have to put the net

00:24:31,030 --> 00:24:37,840
link extact pointer somewhere that the

00:24:33,640 --> 00:24:39,850
driver could use it and access it or we

00:24:37,840 --> 00:24:43,360
would have to extend all the operation

00:24:39,850 --> 00:24:45,040
methods to to pass the pointer so in

00:24:43,360 --> 00:24:47,530
theory we can plumb this through I think

00:24:45,040 --> 00:24:50,890
we've got our hands full just adding it

00:24:47,530 --> 00:24:52,240
to the stack itself for now so you know

00:24:50,890 --> 00:24:56,560
plumbing it through through the drivers

00:24:52,240 --> 00:24:58,180
is is yeah if we get there to like you

00:24:56,560 --> 00:25:00,490
know ninety percent in the stack and we

00:24:58,180 --> 00:25:01,900
think that's great and then we find

00:25:00,490 --> 00:25:03,730
something where you really can't tell

00:25:01,900 --> 00:25:05,710
what the driver did and the driver

00:25:03,730 --> 00:25:07,030
rejected something and you know things

00:25:05,710 --> 00:25:09,100
like that I think we can think about it

00:25:07,030 --> 00:25:12,010
at some point but I think for now we

00:25:09,100 --> 00:25:14,200
just have our hands full because this is

00:25:12,010 --> 00:25:15,910
a new mechanism we have probably

00:25:14,200 --> 00:25:20,140
hundreds of error codes that we may want

00:25:15,910 --> 00:25:21,850
to add things to so and and the Wi-Fi

00:25:20,140 --> 00:25:23,380
stack in particular tries to catch a lot

00:25:21,850 --> 00:25:25,900
of errors beforehand right so the

00:25:23,380 --> 00:25:27,880
drivers would advertise their feature

00:25:25,900 --> 00:25:29,860
support and the Wi-Fi check with Wi-Fi

00:25:27,880 --> 00:25:32,800
stack would check those feature support

00:25:29,860 --> 00:25:34,720
flags and reject things so hopefully the

00:25:32,800 --> 00:25:41,260
drivers don't actually have to return an

00:25:34,720 --> 00:25:43,600
error too much it will happen but so so

00:25:41,260 --> 00:25:45,280
kyle is saying at 10 k usually prints an

00:25:43,600 --> 00:25:48,090
error message so yeah something like

00:25:45,280 --> 00:25:51,370
that should eventually be converted to

00:25:48,090 --> 00:25:52,960
extended ack and pass it out to user

00:25:51,370 --> 00:25:55,170
space because just printing it in the

00:25:52,960 --> 00:25:57,640
kernel log is fairly much useless unless

00:25:55,170 --> 00:26:00,910
you're debugging and actually actively

00:25:57,640 --> 00:26:05,370
looking at it no one really no one

00:26:00,910 --> 00:26:05,370
really sees it that way right

00:26:07,200 --> 00:26:14,110
alright why am i another thing that was

00:26:11,289 --> 00:26:15,909
brought up that no one's really or at

00:26:14,110 --> 00:26:19,539
least as far as I know no one's really

00:26:15,909 --> 00:26:20,940
thought about before the was that it

00:26:19,539 --> 00:26:24,010
would be good to simplify hostapd

00:26:20,940 --> 00:26:25,690
configuration for a sort of fully

00:26:24,010 --> 00:26:27,490
featured configuration where you just

00:26:25,690 --> 00:26:29,710
want to use your hardware to the fullest

00:26:27,490 --> 00:26:31,539
capabilities that it has in some sense

00:26:29,710 --> 00:26:33,159
you may not want to use all of the

00:26:31,539 --> 00:26:35,830
capabilities by default because they are

00:26:33,159 --> 00:26:37,809
still under development or something

00:26:35,830 --> 00:26:39,789
like greenfield is not something that

00:26:37,809 --> 00:26:44,140
you want to use for an HT device because

00:26:39,789 --> 00:26:45,580
you can't really deploy that but it was

00:26:44,140 --> 00:26:47,679
brought up that it would be good to have

00:26:45,580 --> 00:26:49,960
some sort of configuration for a host a

00:26:47,679 --> 00:26:51,669
PD that you could just take and run on

00:26:49,960 --> 00:26:54,690
on the device and hostapd would

00:26:51,669 --> 00:26:57,309
automatically configure itself to a

00:26:54,690 --> 00:26:59,350
larger set of features that make sense

00:26:57,309 --> 00:27:01,600
so for instance if you run this on a VHT

00:26:59,350 --> 00:27:03,789
device on five gigahertz you configure

00:27:01,600 --> 00:27:07,659
your channel 236 it would actually try

00:27:03,789 --> 00:27:11,200
to use 80 megahertz configuration with a

00:27:07,659 --> 00:27:13,899
very wide bandwidth rather than right

00:27:11,200 --> 00:27:16,539
now it would just use 11a basically so

00:27:13,899 --> 00:27:19,000
not have any HT or v HT rates until you

00:27:16,539 --> 00:27:21,039
unless you explicitly configure that so

00:27:19,000 --> 00:27:23,980
this would be a way to make that easier

00:27:21,039 --> 00:27:26,830
for well essentially for everyone

00:27:23,980 --> 00:27:28,419
whoever has to do this so that that's

00:27:26,830 --> 00:27:31,450
something I'm hoping someone will work

00:27:28,419 --> 00:27:33,490
on I don't have plans myself but maybe

00:27:31,450 --> 00:27:36,220
the people who brought it up will submit

00:27:33,490 --> 00:27:39,100
a patch to hostapd and that seems to be

00:27:36,220 --> 00:27:41,110
well-received WPA supplicant itself has

00:27:39,100 --> 00:27:42,549
the ability so if you're running it in

00:27:41,110 --> 00:27:46,000
basic name client mode you can still

00:27:42,549 --> 00:27:49,510
have a access point with a certain

00:27:46,000 --> 00:27:51,279
subset of features brought up and that

00:27:49,510 --> 00:27:57,370
has some code so it shouldn't actually

00:27:51,279 --> 00:27:58,990
be very difficult to do this another

00:27:57,370 --> 00:28:03,250
thing we talked about for some time is

00:27:58,990 --> 00:28:10,450
the ADA 211 mesh which was ADA 211s or

00:28:03,250 --> 00:28:13,120
TGS this is a Wi-Fi spec to allow

00:28:10,450 --> 00:28:15,220
matching of devices to allow them to

00:28:13,120 --> 00:28:18,000
transfer frames between themselves and

00:28:15,220 --> 00:28:20,220
have portals and things like that

00:28:18,000 --> 00:28:22,110
it's not really related to any of the

00:28:20,220 --> 00:28:26,130
Batman and all these types of mesh

00:28:22,110 --> 00:28:28,890
things people are doing over 80 211 ad

00:28:26,130 --> 00:28:33,840
hoc networks but this is the real mesh

00:28:28,890 --> 00:28:36,720
that's defined in the spec and my

00:28:33,840 --> 00:28:39,600
concern there was that I don't see a lot

00:28:36,720 --> 00:28:41,880
of people working on it upstream and I

00:28:39,600 --> 00:28:43,470
don't know that much about it but we do

00:28:41,880 --> 00:28:45,300
know that there are people using it so

00:28:43,470 --> 00:28:49,560
we spent some time discussing who may

00:28:45,300 --> 00:28:52,560
who may is or may be using it and what

00:28:49,560 --> 00:28:54,510
if there any problems with it etc and it

00:28:52,560 --> 00:28:56,010
seems that it's working pretty well we

00:28:54,510 --> 00:28:59,070
know that Google is using it they

00:28:56,010 --> 00:29:01,110
presented on it last year so maybe

00:28:59,070 --> 00:29:03,030
someone needs to take them some time to

00:29:01,110 --> 00:29:06,870
look if they have any interesting

00:29:03,030 --> 00:29:09,840
patches there but it looks like it's

00:29:06,870 --> 00:29:11,850
just kind of working so that's perhaps

00:29:09,840 --> 00:29:14,340
why no one's touching it and there were

00:29:11,850 --> 00:29:16,560
only some very recent there were some

00:29:14,340 --> 00:29:18,240
relatively recent patches to add VHT

00:29:16,560 --> 00:29:18,420
support so even that seems to be working

00:29:18,240 --> 00:29:20,760
now

00:29:18,420 --> 00:29:25,710
so in general I guess my concern is a

00:29:20,760 --> 00:29:28,650
little unnecessary in the sense if it's

00:29:25,710 --> 00:29:34,200
just working then maybe we don't need to

00:29:28,650 --> 00:29:36,750
do anything there another thing we've

00:29:34,200 --> 00:29:40,860
been discussing for a long long time is

00:29:36,750 --> 00:29:43,470
FTM this is the fine timing measurement

00:29:40,860 --> 00:29:46,110
that allows you to implement location

00:29:43,470 --> 00:29:49,200
services using Wi-Fi it's essentially a

00:29:46,110 --> 00:29:52,320
way to just measure how far your access

00:29:49,200 --> 00:29:55,470
point is a way using the flight time of

00:29:52,320 --> 00:29:58,350
your Wi-Fi packets so you have to divide

00:29:55,470 --> 00:29:59,790
by the speed of light or to calculations

00:29:58,350 --> 00:30:02,940
with your time and the speed of light

00:29:59,790 --> 00:30:05,070
but that gives you a pretty accurate

00:30:02,940 --> 00:30:06,690
accurate location but we don't have any

00:30:05,070 --> 00:30:08,100
api's for it upstream right now and

00:30:06,690 --> 00:30:10,710
everyone is sort of implementing their

00:30:08,100 --> 00:30:12,330
own vendor specific thing we had a draft

00:30:10,710 --> 00:30:14,760
of api's but they're not very good

00:30:12,330 --> 00:30:17,690
coming from my group and Intel and we

00:30:14,760 --> 00:30:19,830
have been working on getting those

00:30:17,690 --> 00:30:22,740
polished but it's been a very long

00:30:19,830 --> 00:30:24,930
process because it already works for the

00:30:22,740 --> 00:30:28,140
people who care the customers so getting

00:30:24,930 --> 00:30:30,780
it upstream is just very difficult or

00:30:28,140 --> 00:30:34,860
getting time to work on it is difficult

00:30:30,780 --> 00:30:37,020
we hope to be doing that so that's just

00:30:34,860 --> 00:30:38,850
something that hopefully will eventually

00:30:37,020 --> 00:30:40,440
converge in some sense and it will just

00:30:38,850 --> 00:30:43,110
sort of work out of the box you still

00:30:40,440 --> 00:30:44,340
need some higher level algorithms and

00:30:43,110 --> 00:30:46,200
things like that because if you just

00:30:44,340 --> 00:30:47,790
have the wrong measurements you can't

00:30:46,200 --> 00:30:49,290
really say where where you are and

00:30:47,790 --> 00:30:50,520
obviously you need a database of where

00:30:49,290 --> 00:30:53,070
the access points are that you're

00:30:50,520 --> 00:30:55,380
measuring against and all of those

00:30:53,070 --> 00:30:58,680
things but hopefully the low level stuff

00:30:55,380 --> 00:31:00,780
we can sort of sort out and have some

00:30:58,680 --> 00:31:03,920
common way at least have the ability to

00:31:00,780 --> 00:31:07,170
have common api's for it and then

00:31:03,920 --> 00:31:09,630
vendors or OMS who want to use it can

00:31:07,170 --> 00:31:15,360
push their Wi-Fi vendors to implement

00:31:09,630 --> 00:31:18,540
that if necessary and one short topic

00:31:15,360 --> 00:31:22,650
was the VHD extended and SS support so

00:31:18,540 --> 00:31:26,780
when the first 100 60 megahertz access

00:31:22,650 --> 00:31:29,400
points were developed it turned out that

00:31:26,780 --> 00:31:31,110
when you go to 100 60 megahertz some

00:31:29,400 --> 00:31:33,180
Wi-Fi devices have problems still

00:31:31,110 --> 00:31:35,760
supporting the largest number of streams

00:31:33,180 --> 00:31:37,800
so typically your access point may have

00:31:35,760 --> 00:31:41,310
something like 4 antennas and support

00:31:37,800 --> 00:31:43,860
for spatial streams but if on 80

00:31:41,310 --> 00:31:47,100
megahertz for the currently deployed

00:31:43,860 --> 00:31:47,670
11ac devices but if you go to 160

00:31:47,100 --> 00:31:51,720
megahertz

00:31:47,670 --> 00:31:54,720
on those devices you suddenly can only

00:31:51,720 --> 00:31:57,090
support 2 antennas or two streams two

00:31:54,720 --> 00:31:59,670
spatial streams because I don't know I

00:31:57,090 --> 00:32:02,010
don't actually know why I'm yeah there's

00:31:59,670 --> 00:32:03,780
just some some reason for that and for

00:32:02,010 --> 00:32:05,160
some devices some devices can do the

00:32:03,780 --> 00:32:08,460
full thing some devices can't

00:32:05,160 --> 00:32:12,030
so the spec was amended to allow that

00:32:08,460 --> 00:32:13,920
sort of configuration to be conveyed to

00:32:12,030 --> 00:32:16,320
the client so it can understand if it's

00:32:13,920 --> 00:32:18,570
using 80 megahertz transmission

00:32:16,320 --> 00:32:20,670
transmissions it's okay to transmit with

00:32:18,570 --> 00:32:23,010
4 spatial streams but if it's using a

00:32:20,670 --> 00:32:25,200
hundred 60 megahertz transmissions it's

00:32:23,010 --> 00:32:30,780
not ok and it has to use two spatial

00:32:25,200 --> 00:32:32,430
streams only so as a result of how this

00:32:30,780 --> 00:32:34,380
was implemented a client that doesn't

00:32:32,430 --> 00:32:36,180
implement the support for it will

00:32:34,380 --> 00:32:39,180
understand that it should use two

00:32:36,180 --> 00:32:42,600
streams only for all bandwidths which is

00:32:39,180 --> 00:32:43,800
not really what you want so or actually

00:32:42,600 --> 00:32:44,400
no it's the other way around you can use

00:32:43,800 --> 00:32:47,460
forestry

00:32:44,400 --> 00:32:48,840
but not 100 60 megahertz I think yeah

00:32:47,460 --> 00:32:52,620
that's that's the way it's that way

00:32:48,840 --> 00:32:54,750
around but um so I have some code to to

00:32:52,620 --> 00:32:57,480
implement this believe I've had a hard

00:32:54,750 --> 00:32:59,550
time figuring out which access points

00:32:57,480 --> 00:33:01,350
actually have this problem and how to

00:32:59,550 --> 00:33:03,720
test against them so we discussed that

00:33:01,350 --> 00:33:06,020
for some time and we hopefully have some

00:33:03,720 --> 00:33:08,520
people who can do some testing there and

00:33:06,020 --> 00:33:11,090
report back whether my implementation is

00:33:08,520 --> 00:33:14,340
actually correct so we can merge it and

00:33:11,090 --> 00:33:16,410
get rid of that sort of negotiation

00:33:14,340 --> 00:33:19,380
problem where we don't discover the full

00:33:16,410 --> 00:33:22,220
capabilities so I think that was about

00:33:19,380 --> 00:33:24,300
it that what we discussed yesterday

00:33:22,220 --> 00:33:27,840
obviously it took a lot longer than

00:33:24,300 --> 00:33:32,070
summarizing it and we spent almost the

00:33:27,840 --> 00:33:35,400
entire day and yeah there any questions

00:33:32,070 --> 00:33:39,180
comments if you feel free to ask I will

00:33:35,400 --> 00:33:40,590
pass the mic around or if anyone who was

00:33:39,180 --> 00:33:41,690
there yesterday things I forgot

00:33:40,590 --> 00:33:52,020
something important

00:33:41,690 --> 00:33:56,060
feel free to mention it now no questions

00:33:52,020 --> 00:33:56,060

YouTube URL: https://www.youtube.com/watch?v=WHnvkdf8TOs


