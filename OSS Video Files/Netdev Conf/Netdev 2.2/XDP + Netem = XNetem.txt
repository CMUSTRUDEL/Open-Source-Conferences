Title: XDP + Netem = XNetem
Publication date: 2018-03-14
Playlist: Netdev 2.2
Description: 
	Speaker: Stephen Hemminger
Friday November 08th, 2017 
Seoul, Korea
https://www.netdevconf.org/2.2/session.html?hemminger-XNetem-talk
Captions: 
	00:00:02,010 --> 00:00:10,950
so hi everybody I'm Steven Hammond

00:00:05,859 --> 00:00:13,630
you're talking about a project today

00:00:10,950 --> 00:00:16,560
which is a little project I've been

00:00:13,630 --> 00:00:19,570
starting out called X neat Nettie M

00:00:16,560 --> 00:00:25,390
which the name I made up from combining

00:00:19,570 --> 00:00:28,690
XDP and Nettie M and this was the best

00:00:25,390 --> 00:00:32,110
logo I could find to bring into the

00:00:28,690 --> 00:00:39,089
slide just because it had baseball hats

00:00:32,110 --> 00:00:43,989
in Maj Amaro so I'm going to talk about

00:00:39,089 --> 00:00:46,210
let me get the notes up here what

00:00:43,989 --> 00:00:51,339
motivated me to do X

00:00:46,210 --> 00:00:55,499
Nettie M and what is it good for look

00:00:51,339 --> 00:00:55,499
into a little bit of how it works and

00:00:55,859 --> 00:01:03,069
some the usage of it how you would use

00:00:58,780 --> 00:01:07,840
it since this is kind of like the early

00:01:03,069 --> 00:01:09,250
teaser of it of a project there's a lot

00:01:07,840 --> 00:01:12,670
of pieces that need to be filled in and

00:01:09,250 --> 00:01:14,680
I'll try to go through that and some of

00:01:12,670 --> 00:01:17,140
the problems I've run into so far and

00:01:14,680 --> 00:01:23,920
I'll try to leave some time for Q&A

00:01:17,140 --> 00:01:29,109
before lunch so sorry ok the real

00:01:23,920 --> 00:01:35,619
motivation of this is not my employer or

00:01:29,109 --> 00:01:37,630
any great grand unified vision I have

00:01:35,619 --> 00:01:39,850
hobbies and some of the hobbies I have

00:01:37,630 --> 00:01:42,640
are like woodworking and when I do

00:01:39,850 --> 00:01:44,920
woodworking I find really cool tools and

00:01:42,640 --> 00:01:50,259
then I decide to do something with it

00:01:44,920 --> 00:01:53,189
and I pretty much assume everybody in

00:01:50,259 --> 00:01:55,359
this room has a basic idea what XDP is

00:01:53,189 --> 00:01:59,229
otherwise you should go listen to

00:01:55,359 --> 00:02:01,390
another talk on youtube or come back and

00:01:59,229 --> 00:02:04,689
hopefully you'll have filled it in from

00:02:01,390 --> 00:02:07,630
the rest of the week but xtp is a really

00:02:04,689 --> 00:02:12,010
cool tool chest and I want to learn

00:02:07,630 --> 00:02:15,550
about XDP and I wanted some example that

00:02:12,010 --> 00:02:17,470
was non-trivial but wasn't going to be

00:02:15,550 --> 00:02:22,180
I had to do a whole startup company like

00:02:17,470 --> 00:02:26,250
psyllium so this looking at Nettie yeah

00:02:22,180 --> 00:02:29,110
it was just about the right size and

00:02:26,250 --> 00:02:32,770
also what was really cool about Nettie M

00:02:29,110 --> 00:02:35,170
is I did it and it totally blew up in

00:02:32,770 --> 00:02:37,420
terms of the number of contributions by

00:02:35,170 --> 00:02:39,790
blue of I mean I got contributions and

00:02:37,420 --> 00:02:42,130
researchers input that I never ever

00:02:39,790 --> 00:02:44,980
expected and I'm kind of hoping the same

00:02:42,130 --> 00:02:47,500
thing will happen with X Nettie M and I

00:02:44,980 --> 00:02:52,270
want to repeat that and I also think

00:02:47,500 --> 00:02:54,580
that this might be a good use case to

00:02:52,270 --> 00:02:58,000
try to help the developers or to get

00:02:54,580 --> 00:02:59,740
people to use XDP more widely and get

00:02:58,000 --> 00:03:02,530
feedback about what's good and what's

00:02:59,740 --> 00:03:03,880
bad and what's hard to deal with and I

00:03:02,530 --> 00:03:06,520
want to really this is a personal

00:03:03,880 --> 00:03:08,440
project not something at all related to

00:03:06,520 --> 00:03:12,790
anything at Microsoft but they may end

00:03:08,440 --> 00:03:16,090
up using it you never know the basic

00:03:12,790 --> 00:03:18,940
goal of this was to start small and what

00:03:16,090 --> 00:03:21,220
what that I met deal with the basic

00:03:18,940 --> 00:03:25,930
functionality that already existed in

00:03:21,220 --> 00:03:27,610
that iam to break it into components not

00:03:25,930 --> 00:03:32,970
try to do the whole big piece at once

00:03:27,610 --> 00:03:35,980
and to reuse existing technologies and

00:03:32,970 --> 00:03:40,209
software because the licenses are

00:03:35,980 --> 00:03:45,010
compatible and to make it available to

00:03:40,209 --> 00:03:49,030
build the community so let's take a trip

00:03:45,010 --> 00:03:51,880
back in time to where Nettie M started

00:03:49,030 --> 00:03:53,620
this slide has been real pain this was

00:03:51,880 --> 00:03:56,680
supposed to be the original graphic of

00:03:53,620 --> 00:03:57,310
the original slide that a purse put up

00:03:56,680 --> 00:04:03,130
when I did

00:03:57,310 --> 00:04:05,709
nettie M in 2005 at LCA so it's somehow

00:04:03,130 --> 00:04:08,230
in the time machine I can't seem to make

00:04:05,709 --> 00:04:11,530
that graphic come out on the display it

00:04:08,230 --> 00:04:15,870
comes out on this but anyway so what I

00:04:11,530 --> 00:04:19,239
did was I built Nettie M to test TCP in

00:04:15,870 --> 00:04:21,070
2005 we were bringing in all the

00:04:19,239 --> 00:04:23,620
congestion control algorithms from the

00:04:21,070 --> 00:04:25,720
research community and we want I wanted

00:04:23,620 --> 00:04:28,030
to be able to test them and I wanted to

00:04:25,720 --> 00:04:29,200
be able to test them on an upstream

00:04:28,030 --> 00:04:31,390
kernel without

00:04:29,200 --> 00:04:34,210
putting out a million dollar budget to

00:04:31,390 --> 00:04:36,010
go buy some piece of hardware or trying

00:04:34,210 --> 00:04:39,610
to bring in some out of tree Colonel

00:04:36,010 --> 00:04:42,100
patch that was barely tested and barely

00:04:39,610 --> 00:04:46,570
worked and didn't work on anything on

00:04:42,100 --> 00:04:49,270
Linux to six so there was lots of other

00:04:46,570 --> 00:04:51,970
researchers on network emulators and

00:04:49,270 --> 00:04:53,860
there were several other bits and pieces

00:04:51,970 --> 00:04:55,950
around and you can see all the

00:04:53,860 --> 00:04:58,600
references in the paper to those and

00:04:55,950 --> 00:05:00,970
they they were a lot of the inspiration

00:04:58,600 --> 00:05:03,400
for this and where possible I try to use

00:05:00,970 --> 00:05:05,770
their algorithms and statistics so

00:05:03,400 --> 00:05:08,710
here's an example of what a test that

00:05:05,770 --> 00:05:12,160
was run for example you take TCP

00:05:08,710 --> 00:05:14,020
throughput and this is packet loss at

00:05:12,160 --> 00:05:15,910
the bottom it's probably pretty hard to

00:05:14,020 --> 00:05:18,460
read given the resolution but this is

00:05:15,910 --> 00:05:21,880
like 10% packet loss and down here is

00:05:18,460 --> 00:05:24,730
about 1% and there's this equation that

00:05:21,880 --> 00:05:27,160
says for a loss pace tcp the maximum

00:05:24,730 --> 00:05:30,250
throughput you could get is based on the

00:05:27,160 --> 00:05:32,170
segment size and a constant and the

00:05:30,250 --> 00:05:35,790
round-trip time and the packet loss and

00:05:32,170 --> 00:05:38,320
then you can measure different TCPS

00:05:35,790 --> 00:05:41,110
versus the model and this one has Reno

00:05:38,320 --> 00:05:44,170
in cubic and for example if you wanted

00:05:41,110 --> 00:05:46,690
to test BB R versus cubic under packet

00:05:44,170 --> 00:05:52,210
loss nettie m is a really easy way to do

00:05:46,690 --> 00:05:55,480
that so after I did this and it got out

00:05:52,210 --> 00:05:58,360
there I was really surprised whereas

00:05:55,480 --> 00:06:00,870
some of the usages were I mean I

00:05:58,360 --> 00:06:03,420
expected people to use it to test

00:06:00,870 --> 00:06:06,010
large-scale networks you know Internet

00:06:03,420 --> 00:06:08,340
going to Australia was the example I

00:06:06,010 --> 00:06:10,720
used when the original talk was because

00:06:08,340 --> 00:06:14,220
it's 200 milliseconds to get to

00:06:10,720 --> 00:06:17,800
Australia you have a high-speed network

00:06:14,220 --> 00:06:19,780
your TCP may or may not work it may

00:06:17,800 --> 00:06:22,000
decide to either flood the network or it

00:06:19,780 --> 00:06:24,670
may decide that it's so far away that

00:06:22,000 --> 00:06:26,800
it's just gonna give up so that was the

00:06:24,670 --> 00:06:28,620
first thing that it but then the next

00:06:26,800 --> 00:06:32,560
thing that showed up surprisingly was

00:06:28,620 --> 00:06:35,350
people doing Wi-Fi research we're using

00:06:32,560 --> 00:06:39,539
it as well to measure Ingram AL packet

00:06:35,350 --> 00:06:41,649
loss and what that would do and then

00:06:39,539 --> 00:06:43,719
they didn't actually do a very good job

00:06:41,649 --> 00:06:45,399
of using it I don't think they were good

00:06:43,719 --> 00:06:49,899
fart off but the people doing Internet

00:06:45,399 --> 00:06:51,699
on planes I've gotten some feedback from

00:06:49,899 --> 00:06:53,859
some users where they're testing

00:06:51,699 --> 00:06:56,139
satellite links the planes where you've

00:06:53,859 --> 00:06:57,219
got even one or two second round trip

00:06:56,139 --> 00:07:00,339
times because you're going through

00:06:57,219 --> 00:07:04,629
satellites and they do intermediate

00:07:00,339 --> 00:07:08,589
boxes and does that all work people

00:07:04,629 --> 00:07:10,689
doing internet in cars I've gotten some

00:07:08,589 --> 00:07:11,979
feedback from people using it to test

00:07:10,689 --> 00:07:13,989
the internet in cars usually the

00:07:11,979 --> 00:07:16,209
feedback though it's not patches it's

00:07:13,989 --> 00:07:22,149
like how do I configure this to make it

00:07:16,209 --> 00:07:24,969
look like that the most interesting

00:07:22,149 --> 00:07:27,969
feedback I got was a research project

00:07:24,969 --> 00:07:31,119
that was in Italy that was doing massive

00:07:27,969 --> 00:07:32,709
large-scale internet games and they

00:07:31,119 --> 00:07:35,079
wanted to make sure their servers and

00:07:32,709 --> 00:07:36,459
algorithms actually worked at scale and

00:07:35,079 --> 00:07:39,189
they actually use it and they actually

00:07:36,459 --> 00:07:40,629
produce some of the models that I'll

00:07:39,189 --> 00:07:43,389
show a little bit later that's where all

00:07:40,629 --> 00:07:46,299
that came from and the guys doing buffer

00:07:43,389 --> 00:07:49,809
bloat also used it they've taught and

00:07:46,299 --> 00:07:51,759
other people and that's even why he was

00:07:49,809 --> 00:07:54,309
doing the recent contributions to Eddy

00:07:51,759 --> 00:07:56,709
I'm gonna shut up yesterday yes he was

00:07:54,309 --> 00:08:01,389
using it to test some of the buffer

00:07:56,709 --> 00:08:03,429
bloat on Wi-Fi stuff well so what

00:08:01,389 --> 00:08:06,009
phocion says that even yeah I'm half the

00:08:03,429 --> 00:08:07,839
first one that I added and the original

00:08:06,009 --> 00:08:10,799
Metis m was the ability to the white

00:08:07,839 --> 00:08:13,209
packets so you could say my network is

00:08:10,799 --> 00:08:16,419
taking a lot longer I'm going to

00:08:13,209 --> 00:08:19,959
Australia make it look like that the

00:08:16,419 --> 00:08:23,169
next one is packet loss and this one was

00:08:19,959 --> 00:08:25,179
actually fairly easy because in xdp

00:08:23,169 --> 00:08:28,149
there's already a hundred percent packet

00:08:25,179 --> 00:08:29,469
loss example xdp one is 100 percent

00:08:28,149 --> 00:08:32,639
packet loss so we already have a

00:08:29,469 --> 00:08:35,559
starting point for what that looks like

00:08:32,639 --> 00:08:37,509
duplicating packets turns out

00:08:35,559 --> 00:08:40,240
duplicating packets for cars that you'd

00:08:37,509 --> 00:08:41,979
be able to do have some of the same

00:08:40,240 --> 00:08:43,870
underlying inter structure as delay so

00:08:41,979 --> 00:08:49,019
it's not really possible with current

00:08:43,870 --> 00:08:49,019
xgp packet corruption

00:08:49,600 --> 00:08:58,220
it turns out that packet corruption is

00:08:54,310 --> 00:09:01,130
actually not a function of so much of

00:08:58,220 --> 00:09:04,970
noise anymore it's a function of broken

00:09:01,130 --> 00:09:08,960
routers so people have routers that for

00:09:04,970 --> 00:09:11,720
some reason or other decide to have a

00:09:08,960 --> 00:09:14,390
bug where two packets get mangled

00:09:11,720 --> 00:09:17,870
together or a certain data pattern goes

00:09:14,390 --> 00:09:20,440
through a FIFO somewhere and gets

00:09:17,870 --> 00:09:23,150
mangled so it does happen in real life

00:09:20,440 --> 00:09:30,370
and there are plenty of examples for

00:09:23,150 --> 00:09:32,900
that so how'd this neck X net e/m work

00:09:30,370 --> 00:09:37,220
there's a set of components here the

00:09:32,900 --> 00:09:41,600
yellow is the actual core X DB EB bf

00:09:37,220 --> 00:09:43,970
program there is a COI which is just a

00:09:41,600 --> 00:09:47,270
user space application that manages and

00:09:43,970 --> 00:09:50,600
runs all this and then there's two two

00:09:47,270 --> 00:09:53,000
maps that are shared one map is a set of

00:09:50,600 --> 00:09:54,830
the parameters the CLI sets a bunch of

00:09:53,000 --> 00:09:58,330
parameters that this program needs to

00:09:54,830 --> 00:10:03,770
find and the other one is shared state

00:09:58,330 --> 00:10:07,330
where the X net eme bvf program wants to

00:10:03,770 --> 00:10:14,720
push some state back statistics or

00:10:07,330 --> 00:10:19,520
states between runs of X net iam the CLI

00:10:14,720 --> 00:10:22,910
4x and a DM I I'm lazy I didn't want to

00:10:19,520 --> 00:10:26,600
reinvent a CLI so the CLI is basically

00:10:22,910 --> 00:10:28,340
the same as the TC commands that exist

00:10:26,600 --> 00:10:28,880
for Nettie M so the top with Nettie I'm

00:10:28,340 --> 00:10:31,820
you say

00:10:28,880 --> 00:10:34,700
Nettie M is built on a Q discipline and

00:10:31,820 --> 00:10:36,740
you say I'd like to Q discipline a TM

00:10:34,700 --> 00:10:40,550
and you can set a bunch of parameters

00:10:36,740 --> 00:10:44,090
and this one is I'd like to lose 3% of

00:10:40,550 --> 00:10:47,540
the packets and with it 25% correlation

00:10:44,090 --> 00:10:49,760
with a 25 percent correlation this is

00:10:47,540 --> 00:10:51,380
the same example of how it would look in

00:10:49,760 --> 00:10:57,520
X Nettie M

00:10:51,380 --> 00:11:02,720
so just a side note about random numbers

00:10:57,520 --> 00:11:04,700
first of all we're not talking we're not

00:11:02,720 --> 00:11:07,670
talking about real random numbers for

00:11:04,700 --> 00:11:10,460
chromatography what we need for this is

00:11:07,670 --> 00:11:13,280
this a simulation environment so we want

00:11:10,460 --> 00:11:18,470
pseudo-random numbers that do not repeat

00:11:13,280 --> 00:11:21,980
themselves and that so they have a long

00:11:18,470 --> 00:11:26,030
interval and we more want the test to

00:11:21,980 --> 00:11:28,610
generate the full range of values back

00:11:26,030 --> 00:11:30,800
when I did Nettie M the only thing in

00:11:28,610 --> 00:11:34,970
the kernel available was a really crappy

00:11:30,800 --> 00:11:37,460
pseudo-random number generator so I went

00:11:34,970 --> 00:11:39,560
and took I'm not a scientific person I

00:11:37,460 --> 00:11:46,490
don't want to go learn about random

00:11:39,560 --> 00:11:48,650
number genocide and I was lucky at the

00:11:46,490 --> 00:11:52,760
time they hadn't done two gplv3

00:11:48,650 --> 00:11:55,580
and extracted what was at the time

00:11:52,760 --> 00:11:57,590
considered the best of the pseudo-random

00:11:55,580 --> 00:12:00,020
number generators in a news good new

00:11:57,590 --> 00:12:03,500
scientific library it was a towels worth

00:12:00,020 --> 00:12:05,360
one and put in the kernel and I put it

00:12:03,500 --> 00:12:07,580
in the curl first to use for Nettie M

00:12:05,360 --> 00:12:12,560
then it became more widely used in the

00:12:07,580 --> 00:12:15,110
kernel as P random 32 and that function

00:12:12,560 --> 00:12:18,980
is directly available in the EPB F

00:12:15,110 --> 00:12:20,780
program so this long way of saying I get

00:12:18,980 --> 00:12:23,690
the same random a number of behavior in

00:12:20,780 --> 00:12:25,810
X Nettie M that I got inedia and that's

00:12:23,690 --> 00:12:30,260
a good thing

00:12:25,810 --> 00:12:32,720
now just a note about how these switch

00:12:30,260 --> 00:12:35,900
this around how these random numbers

00:12:32,720 --> 00:12:39,140
work the random number generator is your

00:12:35,900 --> 00:12:42,770
u Stute generated a number between 0 & 1

00:12:39,140 --> 00:12:45,620
the random 32 generates a number between

00:12:42,770 --> 00:12:46,390
0 and the maximum 32-bit value which is

00:12:45,620 --> 00:12:50,840
00:12:46,390 --> 00:12:54,440
whenever 42 billion or whatever so a

00:12:50,840 --> 00:12:57,140
hundred percent value is you at 32 so

00:12:54,440 --> 00:13:01,550
when I use X Nettie M and I want to take

00:12:57,140 --> 00:13:04,910
a value like 1 percent that's 1/100 of a

00:13:01,550 --> 00:13:08,440
the maximum ev32 value all the

00:13:04,910 --> 00:13:11,780
math is done in the user space component

00:13:08,440 --> 00:13:17,380
of X Nettie M and the same math is done

00:13:11,780 --> 00:13:21,140
in the TC command so here's the simple

00:13:17,380 --> 00:13:23,960
simplest version of X T P loss is the

00:13:21,140 --> 00:13:25,850
random one basically if you're familiar

00:13:23,960 --> 00:13:27,740
at all with xgp programs you have a

00:13:25,850 --> 00:13:30,950
little program that takes a packet

00:13:27,740 --> 00:13:34,180
coming in and then runs some C code

00:13:30,950 --> 00:13:37,040
which is compiled into EBP F and

00:13:34,180 --> 00:13:40,160
ignoring all the stuff that you need to

00:13:37,040 --> 00:13:41,900
do to actually there's a couple other I

00:13:40,160 --> 00:13:44,150
took a bunch of stuff out to make a fit

00:13:41,900 --> 00:13:45,710
of the slide that every program has to

00:13:44,150 --> 00:13:49,810
validate the packets and so on but the

00:13:45,710 --> 00:13:53,780
core is go look up in the map that says

00:13:49,810 --> 00:13:57,500
tell me what my probability value is so

00:13:53,780 --> 00:13:59,450
Maps the first map has the first key is

00:13:57,500 --> 00:14:02,570
the probability value it's a pointer to

00:13:59,450 --> 00:14:06,430
the value you get the value and then you

00:14:02,570 --> 00:14:08,780
say if the probability is greater than a

00:14:06,430 --> 00:14:13,700
random value dropped the packet

00:14:08,780 --> 00:14:16,310
otherwise passed the packet the other

00:14:13,700 --> 00:14:18,290
thing you'll notice here is I kind of

00:14:16,310 --> 00:14:20,810
make these programs failsafe so if it

00:14:18,290 --> 00:14:23,360
can't find if it can't find the value it

00:14:20,810 --> 00:14:26,660
says the probability 0 I'm not gonna

00:14:23,360 --> 00:14:28,490
drop the packet it's a lot easier than

00:14:26,660 --> 00:14:29,840
trying to do error cases in print case

00:14:28,490 --> 00:14:32,360
and all the other things for this kind

00:14:29,840 --> 00:14:38,840
of program and it also passes the

00:14:32,360 --> 00:14:41,210
verifier then the way net e/m works and

00:14:38,840 --> 00:14:43,640
I've brought this in to XD yet net iam

00:14:41,210 --> 00:14:45,620
is they it has correlated random numbers

00:14:43,640 --> 00:14:49,160
and this was actually goes all the way

00:14:45,620 --> 00:14:50,480
back to the original miss net so if you

00:14:49,160 --> 00:14:55,880
go back to your statistics that

00:14:50,480 --> 00:14:58,150
correlation is a mathematical property

00:14:55,880 --> 00:15:01,610
of how to number sets are related and

00:14:58,150 --> 00:15:03,680
the way it's done is take row which is

00:15:01,610 --> 00:15:07,580
the correlation value take the last

00:15:03,680 --> 00:15:09,290
value and you add basically so this is

00:15:07,580 --> 00:15:11,470
left this is like a quarter of the last

00:15:09,290 --> 00:15:13,370
value plus one minus a quarter

00:15:11,470 --> 00:15:15,600
three-quarters of the next random number

00:15:13,370 --> 00:15:19,889
value

00:15:15,600 --> 00:15:21,389
and it's implemented this way by

00:15:19,889 --> 00:15:24,420
basically taking the last value

00:15:21,389 --> 00:15:30,630
multiplying by Relic constant and then

00:15:24,420 --> 00:15:34,019
doing a correlation shift this kind of

00:15:30,630 --> 00:15:34,680
lost correlation is mathematically

00:15:34,019 --> 00:15:36,720
correct

00:15:34,680 --> 00:15:39,779
there was actually I had a little

00:15:36,720 --> 00:15:42,360
worried because the paper the guys did

00:15:39,779 --> 00:15:43,709
the large-scale gaming said this doesn't

00:15:42,360 --> 00:15:48,000
work as a loss model

00:15:43,709 --> 00:15:49,889
I said mm-hmm and I went through as part

00:15:48,000 --> 00:15:52,380
of Dax 90m and wrote some test programs

00:15:49,889 --> 00:15:54,300
and didn't a million values recalculate

00:15:52,380 --> 00:15:56,690
this calculate the statistics on it and

00:15:54,300 --> 00:15:59,759
yes this does produce the correct value

00:15:56,690 --> 00:16:01,019
so why was it a problem for them the

00:15:59,759 --> 00:16:03,329
real answer if you read the fine print

00:16:01,019 --> 00:16:06,389
of the paper is this doesn't match how

00:16:03,329 --> 00:16:09,300
the Internet does loss so it's a

00:16:06,389 --> 00:16:11,670
mathematical model that's a poor fit for

00:16:09,300 --> 00:16:14,040
what happens in real life so what

00:16:11,670 --> 00:16:17,100
happens in real life real life on

00:16:14,040 --> 00:16:19,410
networks is something like this this is

00:16:17,100 --> 00:16:20,970
a simplified to state model where you

00:16:19,410 --> 00:16:24,300
basically you're in a good state you're

00:16:20,970 --> 00:16:26,670
passing data everything's good and then

00:16:24,300 --> 00:16:29,130
you hit some percentage say 1% of the

00:16:26,670 --> 00:16:30,870
packets and you go into a bad state and

00:16:29,130 --> 00:16:33,990
there's a higher probability that the

00:16:30,870 --> 00:16:37,050
next packet will be dropped as well

00:16:33,990 --> 00:16:39,690
until you finally get out of that so

00:16:37,050 --> 00:16:41,699
it's the typical loss and the internet

00:16:39,690 --> 00:16:43,800
is you're hitting a router and the

00:16:41,699 --> 00:16:46,860
router skin ejected and it will be

00:16:43,800 --> 00:16:49,620
congested for some first interval say

00:16:46,860 --> 00:16:51,510
few microseconds while the queues full

00:16:49,620 --> 00:16:55,589
and all your packets will be dropped

00:16:51,510 --> 00:16:57,449
then and then you'll get through so the

00:16:55,589 --> 00:16:59,490
guys who did that gaming came up with a

00:16:57,449 --> 00:17:01,380
general intuitive model which has a

00:16:59,490 --> 00:17:03,209
different set of parameters basically

00:17:01,380 --> 00:17:05,520
between what's your probability of

00:17:03,209 --> 00:17:07,230
getting from one state to the other good

00:17:05,520 --> 00:17:09,600
to bad and what's your probability of

00:17:07,230 --> 00:17:11,010
getting out of it there's another one

00:17:09,600 --> 00:17:13,439
that's even more complicated

00:17:11,010 --> 00:17:17,669
it basically says I'm in the good state

00:17:13,439 --> 00:17:20,640
and I may go into a bad state because I

00:17:17,669 --> 00:17:23,520
got a congestion event or it might drop

00:17:20,640 --> 00:17:25,049
a packet just because of line noise so

00:17:23,520 --> 00:17:27,089
they have a four state model where

00:17:25,049 --> 00:17:29,450
you're basically I'm in the good state

00:17:27,089 --> 00:17:32,450
but now I'm jested

00:17:29,450 --> 00:17:35,450
or I just got hit by a radio Wi-Fi burst

00:17:32,450 --> 00:17:38,240
and one packets gone so you kind of have

00:17:35,450 --> 00:17:40,370
a bimodal distribution the point of all

00:17:38,240 --> 00:17:43,279
this is these are research models and

00:17:40,370 --> 00:17:46,850
they were trivial to bring from Nettie M

00:17:43,279 --> 00:17:48,590
over 2x Nettie M and I didn't have to go

00:17:46,850 --> 00:17:53,440
I didn't have to go event new models or

00:17:48,590 --> 00:17:58,070
do anything really complicated there and

00:17:53,440 --> 00:18:00,039
the code base these go into xdp really

00:17:58,070 --> 00:18:05,929
easily

00:18:00,039 --> 00:18:08,360
now package corruption this also is an X

00:18:05,929 --> 00:18:11,929
Nettie M but it's important to realize

00:18:08,360 --> 00:18:14,690
this is not this is packet corruption at

00:18:11,929 --> 00:18:18,440
level three so this is not something

00:18:14,690 --> 00:18:20,539
that you're trying to validate the CRC

00:18:18,440 --> 00:18:23,590
and the hardware you're trying to

00:18:20,539 --> 00:18:26,690
violate the higher level protocols it

00:18:23,590 --> 00:18:29,960
actually does what broken network

00:18:26,690 --> 00:18:32,059
switches do and internally there was a

00:18:29,960 --> 00:18:35,480
recent bug where it turned out we

00:18:32,059 --> 00:18:37,399
weren't people hadn't implemented the

00:18:35,480 --> 00:18:39,110
hyper-v network driver correctly that

00:18:37,399 --> 00:18:43,299
they weren't looking at the route the

00:18:39,110 --> 00:18:45,260
correct bit to indicate bat checksum and

00:18:43,299 --> 00:18:47,299
turned out Nettie and was really

00:18:45,260 --> 00:18:49,070
trivially easy to put in the regression

00:18:47,299 --> 00:18:49,909
test to make sure that didn't happen

00:18:49,070 --> 00:18:52,760
again

00:18:49,909 --> 00:18:56,269
and I think the same thing it's

00:18:52,760 --> 00:19:00,019
generally useful for any protocol we all

00:18:56,269 --> 00:19:02,779
know that you can't assume and networks

00:19:00,019 --> 00:19:05,029
perfect from beginning to end and also

00:19:02,779 --> 00:19:08,090
looking at this the current net iam

00:19:05,029 --> 00:19:11,059
model I will admit is very simplistic it

00:19:08,090 --> 00:19:15,019
just has random number in correlation it

00:19:11,059 --> 00:19:19,519
would be nice if the net iam model was

00:19:15,019 --> 00:19:22,549
more sophisticated and did well it such

00:19:19,519 --> 00:19:25,429
as one bit loss it could be you know I

00:19:22,549 --> 00:19:27,590
got zeros for 10 10 bits or something

00:19:25,429 --> 00:19:30,049
because there's there are checksum

00:19:27,590 --> 00:19:32,360
algorithms that don't handle multi bit

00:19:30,049 --> 00:19:35,000
errors correctly and it'll be good to be

00:19:32,360 --> 00:19:37,990
able to test those so how did it's

00:19:35,000 --> 00:19:40,549
corrupt didn't work in X in the ATM

00:19:37,990 --> 00:19:43,010
basically we do the same kind of look up

00:19:40,549 --> 00:19:44,690
the map element to get the probability

00:19:43,010 --> 00:19:48,230
and then if the probability is greater

00:19:44,690 --> 00:19:51,110
than a random value we go choose a bit

00:19:48,230 --> 00:19:58,910
somewhere in the packet an offset and we

00:19:51,110 --> 00:20:01,160
go flipped a bit and there was a really

00:19:58,910 --> 00:20:03,200
an example for this but the example I

00:20:01,160 --> 00:20:05,870
was basing this off of if you look at

00:20:03,200 --> 00:20:08,750
XDP there's examples when you're doing

00:20:05,870 --> 00:20:10,880
actual real correct modifications of a

00:20:08,750 --> 00:20:18,440
packet like packet forwarding so we're

00:20:10,880 --> 00:20:20,870
just doing malicious packet stuff now

00:20:18,440 --> 00:20:22,730
when I was doing X knee IDM I really

00:20:20,870 --> 00:20:25,790
didn't I really didn't want to get into

00:20:22,730 --> 00:20:29,900
second system syndrome I didn't want to

00:20:25,790 --> 00:20:31,130
reinvent what is already done so I don't

00:20:29,900 --> 00:20:33,890
know if you can read this back there it

00:20:31,130 --> 00:20:36,770
says I will not the dad's writing I will

00:20:33,890 --> 00:20:38,450
not say since we're doing this how about

00:20:36,770 --> 00:20:41,990
and the kids busy at the bottom writing

00:20:38,450 --> 00:20:43,460
the same thing really

00:20:41,990 --> 00:20:46,100
you really have to resist the temptation

00:20:43,460 --> 00:20:48,650
to over engineer this as I started

00:20:46,100 --> 00:20:52,250
getting into it I said oh I could start

00:20:48,650 --> 00:20:55,910
building a packet matching algorithm in

00:20:52,250 --> 00:20:58,460
front of this and then decide to delay

00:20:55,910 --> 00:21:00,260
packets and that I could decide to some

00:20:58,460 --> 00:21:03,020
percent of the packets route over

00:21:00,260 --> 00:21:05,600
different methods of like I'm inventing

00:21:03,020 --> 00:21:06,500
a whole packet pipeline for just the

00:21:05,600 --> 00:21:10,070
network emulator

00:21:06,500 --> 00:21:14,570
and I don't want this to explode that

00:21:10,070 --> 00:21:17,270
way it probably doesn't make sense to

00:21:14,570 --> 00:21:20,180
make this thing blow up into a huge part

00:21:17,270 --> 00:21:23,000
of a whole project it would lose its

00:21:20,180 --> 00:21:25,940
focus and I would also lose the

00:21:23,000 --> 00:21:28,280
opportunity to grow the community and to

00:21:25,940 --> 00:21:30,380
get feedback and integrate ideas if it

00:21:28,280 --> 00:21:37,070
was a huge beginning to end packet

00:21:30,380 --> 00:21:39,200
pipeline so so what's there so far I've

00:21:37,070 --> 00:21:47,090
done a proof of concept of loss in

00:21:39,200 --> 00:21:50,170
corruption before I get problem and the

00:21:47,090 --> 00:21:55,190
next steps are easy it turns out with

00:21:50,170 --> 00:21:56,720
xdp you can combine parts so you could

00:21:55,190 --> 00:22:00,140
say I want to lose

00:21:56,720 --> 00:22:03,500
1% of the packets and damage point 1

00:22:00,140 --> 00:22:06,080
percent by changing the xtp programs so

00:22:03,500 --> 00:22:08,570
I want to be able to do that

00:22:06,080 --> 00:22:11,570
this is yellow I don't know why yellow

00:22:08,570 --> 00:22:16,010
doesn't show these slides I also want to

00:22:11,570 --> 00:22:18,860
implement policing so you can say I want

00:22:16,010 --> 00:22:24,650
to any packets over a megabit I want to

00:22:18,860 --> 00:22:26,990
drop and also using explicit add

00:22:24,650 --> 00:22:29,929
explicit congestion notification as an

00:22:26,990 --> 00:22:33,409
option so you can instead of dropping

00:22:29,929 --> 00:22:35,929
the packets you can set the ecn bit the

00:22:33,409 --> 00:22:38,390
harder wants that Nettie M has a delay

00:22:35,929 --> 00:22:40,460
reordering and duplication needs some

00:22:38,390 --> 00:22:42,289
work and discussion on the

00:22:40,460 --> 00:22:45,289
infrastructure of xdp to make that

00:22:42,289 --> 00:22:53,630
happen but we'll work on that going

00:22:45,289 --> 00:22:57,320
forward I think x9 TM is about ready to

00:22:53,630 --> 00:22:59,390
be submitted upstream but initially I

00:22:57,320 --> 00:23:02,210
thought I'd put it as a separate project

00:22:59,390 --> 00:23:05,299
up on github and I thought that might

00:23:02,210 --> 00:23:07,850
attract more people but it turns out

00:23:05,299 --> 00:23:10,880
that for internal reasons it's actually

00:23:07,850 --> 00:23:13,340
much easier to for me to submit

00:23:10,880 --> 00:23:16,850
something to the kernel because it's an

00:23:13,340 --> 00:23:19,250
existing project if I want to start

00:23:16,850 --> 00:23:22,010
another project on github I have to go

00:23:19,250 --> 00:23:26,419
through a whole bunch of legal stuff and

00:23:22,010 --> 00:23:32,330
that's probably less useful of my time

00:23:26,419 --> 00:23:37,130
and I also want to raise the question of

00:23:32,330 --> 00:23:40,490
how important is it to stretch XDP to do

00:23:37,130 --> 00:23:45,350
the things that many M does or are they

00:23:40,490 --> 00:23:49,520
really worth doing for example it's not

00:23:45,350 --> 00:23:53,030
the whole point of doing xcp was to get

00:23:49,520 --> 00:23:55,669
the better performance and I don't view

00:23:53,030 --> 00:23:58,640
X net e/m as something to replace net

00:23:55,669 --> 00:24:01,460
e/m I view it as a solution for those

00:23:58,640 --> 00:24:04,159
high performance use cases so if

00:24:01,460 --> 00:24:08,299
somebody's trying to emulate a one

00:24:04,159 --> 00:24:09,500
megabit Wi-Fi network and a DM can do it

00:24:08,299 --> 00:24:12,200
fine

00:24:09,500 --> 00:24:15,830
it doesn't do anything useful to

00:24:12,200 --> 00:24:20,660
reinvent it in XTP but if somebody wants

00:24:15,830 --> 00:24:24,050
to emulate I've got a 40 gig optical

00:24:20,660 --> 00:24:27,050
network and we can't even come close to

00:24:24,050 --> 00:24:31,150
doing that with a TM that's a useful use

00:24:27,050 --> 00:24:34,730
case and also I don't want to invent

00:24:31,150 --> 00:24:37,480
create technical debt in the xgp

00:24:34,730 --> 00:24:40,010
environment for what is a special work

00:24:37,480 --> 00:24:42,290
we always see a little bit of that with

00:24:40,010 --> 00:24:44,960
nanny em in the kernel because the way

00:24:42,290 --> 00:24:48,200
it plays with control blocks on the skb

00:24:44,960 --> 00:24:52,070
it's the only queuing discipline that

00:24:48,200 --> 00:24:54,740
plays that game and it hasn't really

00:24:52,070 --> 00:24:58,790
produced a lot of bugs but it's every

00:24:54,740 --> 00:25:01,220
bit of semantics thing you do creates a

00:24:58,790 --> 00:25:03,290
burden for everybody to evaluate it and

00:25:01,220 --> 00:25:06,170
review it and make sure it's correct and

00:25:03,290 --> 00:25:11,120
I don't want to really create a lot of

00:25:06,170 --> 00:25:14,540
special cases here just a note about

00:25:11,120 --> 00:25:17,870
policing I'm now gonna break what I said

00:25:14,540 --> 00:25:22,160
and I want to implement a slightly

00:25:17,870 --> 00:25:25,910
richer policing model in X nettie M then

00:25:22,160 --> 00:25:28,970
is there in the basic ingress model of

00:25:25,910 --> 00:25:30,950
Linux and basically it's really trivial

00:25:28,970 --> 00:25:33,200
to do the RFC version where you have two

00:25:30,950 --> 00:25:37,280
colors of policing you basically have

00:25:33,200 --> 00:25:39,710
two token buckets one is the yellow

00:25:37,280 --> 00:25:41,840
bucket one is the red bucket and so

00:25:39,710 --> 00:25:44,420
basically if you hit the yellow

00:25:41,840 --> 00:25:45,980
threshold will start marking the packets

00:25:44,420 --> 00:25:49,040
if you hit the red threshold will start

00:25:45,980 --> 00:25:51,440
start dropping the packets and turns out

00:25:49,040 --> 00:25:54,110
that there's several versions of this

00:25:51,440 --> 00:25:57,100
available in licenses that we can just

00:25:54,110 --> 00:25:59,660
incur I can just grab into XT Neddie M

00:25:57,100 --> 00:26:02,480
there's one in DVD K there's another one

00:25:59,660 --> 00:26:08,840
in FreeBSD both of which can be sucked

00:26:02,480 --> 00:26:10,610
in the delay one is a hard problem I put

00:26:08,840 --> 00:26:12,710
a big pile of cable here because when it

00:26:10,610 --> 00:26:15,110
before I did in nem when I was talking

00:26:12,710 --> 00:26:19,730
to the TCP researchers I actually went

00:26:15,110 --> 00:26:22,760
down to California in Pasadena and they

00:26:19,730 --> 00:26:25,610
had to one kilometer optical

00:26:22,760 --> 00:26:27,800
cable racks and they would take and they

00:26:25,610 --> 00:26:30,050
would run the Cape they would waste wit

00:26:27,800 --> 00:26:32,870
and so they could get like 400

00:26:30,050 --> 00:26:39,050
kilometres of delay through a real

00:26:32,870 --> 00:26:41,990
optical cable and the problem with delay

00:26:39,050 --> 00:26:45,020
and xtp is it breaks the current model

00:26:41,990 --> 00:26:47,600
where the ever it kind of expects a

00:26:45,020 --> 00:26:51,140
packet will come in and it will not live

00:26:47,600 --> 00:26:54,440
around for a long time it kind of exudes

00:26:51,140 --> 00:26:56,600
a work conserving model and with this

00:26:54,440 --> 00:26:59,210
you didn't need to store packets and

00:26:56,600 --> 00:27:04,820
re-inject them and you'd also need

00:26:59,210 --> 00:27:08,390
timers and my thought is a how useful is

00:27:04,820 --> 00:27:12,020
that be at what bounds do we need to do

00:27:08,390 --> 00:27:15,470
that and the C is some of the hardware

00:27:12,020 --> 00:27:19,610
already has pacing and other things in

00:27:15,470 --> 00:27:21,680
the hardware is is there a way or can we

00:27:19,610 --> 00:27:23,210
figure out a way to work with some of

00:27:21,680 --> 00:27:25,430
the hardware at the higher speed network

00:27:23,210 --> 00:27:28,760
cards to say please send this packet

00:27:25,430 --> 00:27:38,150
three micro seconds from now and use the

00:27:28,760 --> 00:27:40,070
hardware to do that role lastly I was so

00:27:38,150 --> 00:27:42,230
pleased with all the contributions to

00:27:40,070 --> 00:27:45,800
Nettie M and I want the same thing this

00:27:42,230 --> 00:27:49,520
happened with X Nettie M and so I plan

00:27:45,800 --> 00:27:52,040
to do multiple presentations and roll

00:27:49,520 --> 00:27:54,740
things out to create interest and I'd

00:27:52,040 --> 00:27:56,720
also like to figure out if it's possible

00:27:54,740 --> 00:27:58,670
to get some code sharing with other

00:27:56,720 --> 00:28:01,790
projects I mean I've had good feedback

00:27:58,670 --> 00:28:03,770
from the BSD and DB DK community about

00:28:01,790 --> 00:28:07,840
these kind of things it would be nice to

00:28:03,770 --> 00:28:13,310
have you know one set of good models

00:28:07,840 --> 00:28:16,340
across a wider community and my last

00:28:13,310 --> 00:28:17,770
slide here I really don't like to do

00:28:16,340 --> 00:28:20,300
these kind of slides I'll tell you why

00:28:17,770 --> 00:28:21,530
it's kind of like the guy who puts kanji

00:28:20,300 --> 00:28:25,640
on his arm it doesn't know what the

00:28:21,530 --> 00:28:30,080
kanji means but thank you very much and

00:28:25,640 --> 00:28:31,470
I would I'll be glad to take some

00:28:30,080 --> 00:28:34,259
questions

00:28:31,470 --> 00:28:37,649
yeah I want it just to commit a commando

00:28:34,259 --> 00:28:42,620
on your desk ABCB using an ATM there is

00:28:37,649 --> 00:28:45,600
no more strange thing here on that next

00:28:42,620 --> 00:28:54,929
we only stored a time to send for the

00:28:45,600 --> 00:28:59,490
escapee anybody else the problem there

00:28:54,929 --> 00:29:01,379
is that Nettie M needed a meditate piece

00:28:59,490 --> 00:29:03,360
of melody and we didn't have any good

00:29:01,379 --> 00:29:04,860
place to put it and I think the same

00:29:03,360 --> 00:29:07,169
thing what we Trude matter what we do

00:29:04,860 --> 00:29:13,440
with xgp you need some metadata that's

00:29:07,169 --> 00:29:14,149
specific to the algorithm somewhere way

00:29:13,440 --> 00:29:25,289
back

00:29:14,149 --> 00:29:27,000
Simon is hi Steven

00:29:25,289 --> 00:29:30,000
you mentioned about doing to ban

00:29:27,000 --> 00:29:31,919
policing in the xtp potentially yeah do

00:29:30,000 --> 00:29:34,710
you have any thoughts on doing to ban

00:29:31,919 --> 00:29:38,970
policing in the kernel itself like the

00:29:34,710 --> 00:29:41,570
normal cue disk regime it could be done

00:29:38,970 --> 00:29:45,299
I was just trying to do things in

00:29:41,570 --> 00:29:48,330
different ways that were easy and fast

00:29:45,299 --> 00:29:50,399
can I comment on that because you can

00:29:48,330 --> 00:29:51,990
take the current police on TC you just

00:29:50,399 --> 00:29:54,389
have to cascade two of them yeah that's

00:29:51,990 --> 00:29:56,639
right you could do that right but it may

00:29:54,389 --> 00:29:58,889
be easier sometimes to just have one

00:29:56,639 --> 00:30:02,940
monolithic piece that does both yeah

00:29:58,889 --> 00:30:05,549
it's like just Jamal to use an example

00:30:02,940 --> 00:30:09,210
at one point I actually went to the

00:30:05,549 --> 00:30:13,889
trouble of setting up flow based read

00:30:09,210 --> 00:30:15,809
it's possible it's just it part of it

00:30:13,889 --> 00:30:17,190
requires about two weeks worth of effort

00:30:15,809 --> 00:30:19,850
to figure out how to configure

00:30:17,190 --> 00:30:21,809
everything I'm not disagreeing yeah

00:30:19,850 --> 00:30:34,230
sometimes it's okay to do something

00:30:21,809 --> 00:30:36,320
monolithic yeah all right thanks thank

00:30:34,230 --> 00:30:36,320
you

00:30:36,460 --> 00:30:40,660

YouTube URL: https://www.youtube.com/watch?v=RY6mzwHUKCA


