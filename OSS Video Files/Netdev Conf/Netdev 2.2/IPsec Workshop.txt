Title: IPsec Workshop
Publication date: 2018-03-14
Playlist: Netdev 2.2
Description: 
	Speaker: Steffen Klassert
Friday November 08th, 2017 
Seoul, Korea
https://www.netdevconf.org/2.2/session.html?klassert-ipsec-workshop
Captions: 
	00:00:02,300 --> 00:00:08,220
okay so let's start with the status

00:00:04,770 --> 00:00:11,040
update so last year we were talking

00:00:08,220 --> 00:00:14,730
about voiding friend copies for the ESP

00:00:11,040 --> 00:00:16,710
data path and there the problem where

00:00:14,730 --> 00:00:18,449
that most of the ESP data friends were

00:00:16,710 --> 00:00:23,519
linearized 300 journey through the

00:00:18,449 --> 00:00:26,640
kernel and that time it was already

00:00:23,519 --> 00:00:31,409
solved for RX and TX but code we're

00:00:26,640 --> 00:00:36,320
still in RFC version so this code we're

00:00:31,409 --> 00:00:38,670
merged in February so good and

00:00:36,320 --> 00:00:40,770
unfortunately already last year a new

00:00:38,670 --> 00:00:42,630
problem peer with that because some of

00:00:40,770 --> 00:00:44,940
the crypto algorithms do the

00:00:42,630 --> 00:00:46,890
linearization of their own so it was

00:00:44,940 --> 00:00:49,380
solved for some crypto algorithms for

00:00:46,890 --> 00:00:51,920
others not and unfortunately this is

00:00:49,380 --> 00:00:55,950
still ok so nobody worked on that so

00:00:51,920 --> 00:00:59,040
still work to be done here ok so far off

00:00:55,950 --> 00:01:02,640
the frame copy the next topic we had

00:00:59,040 --> 00:01:06,570
last year was we wanted to add a zero

00:01:02,640 --> 00:01:09,390
code path for IPSec so and last year we

00:01:06,570 --> 00:01:12,720
already implemented zero handlers but

00:01:09,390 --> 00:01:15,840
code we're in RFC version this code

00:01:12,720 --> 00:01:18,060
we're split first part were merged in

00:01:15,840 --> 00:01:23,909
February where we started to use Bureau

00:01:18,060 --> 00:01:26,640
cells for IPSec and in April the lady

00:01:23,909 --> 00:01:30,750
capsulation code were merged so with

00:01:26,640 --> 00:01:34,200
these two zero works for IPSec now so

00:01:30,750 --> 00:01:36,770
we're done there also we wanted to do

00:01:34,200 --> 00:01:39,979
something for the tEEX path namely the

00:01:36,770 --> 00:01:43,979
diesel code path we wanted to change and

00:01:39,979 --> 00:01:46,590
we wanted to move to existing geo so

00:01:43,979 --> 00:01:48,600
handling out of the transformation layer

00:01:46,590 --> 00:01:52,950
down to the GSO layer which is

00:01:48,600 --> 00:01:55,680
personally - so last year it looked like

00:01:52,950 --> 00:01:58,580
that we had working code but only if we

00:01:55,680 --> 00:02:02,820
can offload decrypt operations to Nick

00:01:58,580 --> 00:02:06,810
so we had our C code that time which was

00:02:02,820 --> 00:02:09,929
merged in April this year so with that

00:02:06,810 --> 00:02:13,590
the Dieselworks for Hardware afloat but

00:02:09,929 --> 00:02:14,710
unfortunately it's us last year we have

00:02:13,590 --> 00:02:18,070
no solution for

00:02:14,710 --> 00:02:19,870
Safra crypto and why is that the problem

00:02:18,070 --> 00:02:22,030
was that we were not able to Hamm who

00:02:19,870 --> 00:02:23,620
hasn't conscripted operations in geocell

00:02:22,030 --> 00:02:27,880
layer we were not able to unwind the

00:02:23,620 --> 00:02:31,090
call stack so that time we just deferred

00:02:27,880 --> 00:02:34,930
because there were no solution inside so

00:02:31,090 --> 00:02:37,690
the situation changed here but so far we

00:02:34,930 --> 00:02:39,820
have a solution which is still in our

00:02:37,690 --> 00:02:43,840
sea State and I hope we can merge this

00:02:39,820 --> 00:02:46,870
during the well next month I hope so

00:02:43,840 --> 00:02:49,510
that's Gio so another thing we talked

00:02:46,870 --> 00:02:54,130
last year is we wanted to implement an

00:02:49,510 --> 00:02:59,680
IPSec Hardware offloading API last year

00:02:54,130 --> 00:03:04,210
we had the API and RFC state go to

00:02:59,680 --> 00:03:06,100
emerge in April and with that

00:03:04,210 --> 00:03:08,410
IPSec Carter offloading is fully

00:03:06,100 --> 00:03:11,950
implemented we have the IP I and D are

00:03:08,410 --> 00:03:15,970
OGS alcohol back so would be possible to

00:03:11,950 --> 00:03:18,490
use it from that point on last year and

00:03:15,970 --> 00:03:22,960
not Mellanox was working to integrate

00:03:18,490 --> 00:03:25,630
the driver with the API this code was

00:03:22,960 --> 00:03:28,660
finally merged in June so we had the API

00:03:25,630 --> 00:03:31,510
and the first user of the API was kind

00:03:28,660 --> 00:03:35,440
of good now and during the last year two

00:03:31,510 --> 00:03:37,210
new things happened one thing is that

00:03:35,440 --> 00:03:39,880
until started to work to integrate their

00:03:37,210 --> 00:03:43,000
hardware with IPSec offload and the

00:03:39,880 --> 00:03:45,790
faculty saying that Oracle start work to

00:03:43,000 --> 00:03:48,580
get the existing Yantic ten digit drives

00:03:45,790 --> 00:03:52,560
work with IPSec offload we will hear

00:03:48,580 --> 00:03:57,100
later more about these two so that's a

00:03:52,560 --> 00:03:59,380
state of IPSec offload last topic we

00:03:57,100 --> 00:04:01,870
discussed last time was the flow cash

00:03:59,380 --> 00:04:05,800
removal we had a discussion about that

00:04:01,870 --> 00:04:10,480
last year and finally the flow cash you

00:04:05,800 --> 00:04:12,370
are removed in July this means that in

00:04:10,480 --> 00:04:14,200
our serves problem with the flow cash

00:04:12,370 --> 00:04:18,190
we're softly you're moved it but

00:04:14,200 --> 00:04:20,230
unfortunately we have a new problem here

00:04:18,190 --> 00:04:23,500
now because the flow cash provided a

00:04:20,230 --> 00:04:25,270
fast lookup for process in SAS and some

00:04:23,500 --> 00:04:27,670
scenarios with a lot of policies at

00:04:25,270 --> 00:04:30,770
nazarius might be very slow now

00:04:27,670 --> 00:04:33,460
unfortunately there is still no solution

00:04:30,770 --> 00:04:35,930
right now so this is great to be done

00:04:33,460 --> 00:04:38,030
okay that's more or less what happened

00:04:35,930 --> 00:04:41,720
in the IPSec sub system during the last

00:04:38,030 --> 00:04:44,450
year so that's the update and we can

00:04:41,720 --> 00:04:52,520
start with the presentations I think

00:04:44,450 --> 00:04:55,150
Shannon want to start yes if you have

00:04:52,520 --> 00:04:55,150
June

00:05:00,520 --> 00:05:10,340
yes yes we can and actually we do I

00:05:08,210 --> 00:05:17,050
think for the offloading it's not

00:05:10,340 --> 00:05:22,790
problem anymore here the problem is that

00:05:17,050 --> 00:05:25,100
the AES and I code for example is not

00:05:22,790 --> 00:05:27,500
Skellig ad-aware so they need to do

00:05:25,100 --> 00:05:29,419
linearization before they put the stem

00:05:27,500 --> 00:05:31,370
down to the crypto engine that's why

00:05:29,419 --> 00:05:34,940
some algorithms still do the

00:05:31,370 --> 00:05:37,580
linearization and others don't I mean we

00:05:34,940 --> 00:05:39,350
can get around this entirely if we

00:05:37,580 --> 00:05:48,410
update a crypto layer but the crypto

00:05:39,350 --> 00:05:50,680
developer self to do that obviously yeah

00:05:48,410 --> 00:05:50,680
sure

00:06:05,930 --> 00:06:10,690
you what do you mean what up exactly

00:06:25,719 --> 00:06:28,169
or

00:06:32,300 --> 00:06:41,419
he oh yeah yeah you talking about some

00:06:37,819 --> 00:06:43,580
coat of what would you see oh yeah I

00:06:41,419 --> 00:06:46,099
mean the problem there was that this

00:06:43,580 --> 00:06:52,759
doesn't work if we do not upload a

00:06:46,099 --> 00:06:55,460
sequence number handling right I mean so

00:06:52,759 --> 00:07:00,319
I think you're talking about to cut out

00:06:55,460 --> 00:07:02,120
a trailer right yeah yeah I think

00:07:00,319 --> 00:07:06,639
there's some work to be done this

00:07:02,120 --> 00:07:06,639
doesn't work out of the box yeah

00:07:26,840 --> 00:07:37,100
ooh well I mean in the past we did the

00:07:34,430 --> 00:07:39,979
linearization mindy is polite generally

00:07:37,100 --> 00:07:42,260
we would for almost all packets we

00:07:39,979 --> 00:07:44,960
changed this and now we just pass it to

00:07:42,260 --> 00:07:47,540
the scholar Geller and pass it down to

00:07:44,960 --> 00:07:50,180
the crypto but then some of the crypto

00:07:47,540 --> 00:07:53,000
algorithms look at this and if it is not

00:07:50,180 --> 00:07:54,979
a linearized packet and a linearized

00:07:53,000 --> 00:08:02,150
because some of the crypto algorithms

00:07:54,979 --> 00:08:07,310
are not able to do scalieri yeah yet you

00:08:02,150 --> 00:08:09,470
know you take the the crypto job you you

00:08:07,310 --> 00:08:13,160
gave them and if this is asked alligator

00:08:09,470 --> 00:08:15,350
and prove more than one entry then the

00:08:13,160 --> 00:08:25,900
crypto put everything together and test

00:08:15,350 --> 00:08:25,900
it them down and do the crypto no no

00:08:26,440 --> 00:08:32,839
okay anything else I mean we have time

00:08:31,010 --> 00:08:35,450
for discussion later on I think we

00:08:32,839 --> 00:08:38,570
should continue with the talks that

00:08:35,450 --> 00:08:42,380
we've gone through okay hi my name is

00:08:38,570 --> 00:08:45,020
Shannon Nelson I'm really fairly new to

00:08:42,380 --> 00:08:47,510
this to the IPSec stuff so bear with me

00:08:45,020 --> 00:08:51,860
as I stumble through a few of the

00:08:47,510 --> 00:08:54,980
concepts I used to work for the Intel

00:08:51,860 --> 00:08:57,670
group and so that's how I ended up on

00:08:54,980 --> 00:09:01,850
part of this but for the quick overview

00:08:57,670 --> 00:09:06,920
the Niantic the 10 gig family from Intel

00:09:01,850 --> 00:09:08,690
does have IPSec hardware offload I have

00:09:06,920 --> 00:09:10,790
some patches and development and the

00:09:08,690 --> 00:09:16,040
basic encryption decryption offload is

00:09:10,790 --> 00:09:19,190
working just don't wait for it it's kind

00:09:16,040 --> 00:09:20,990
of slow partly for partly because of my

00:09:19,190 --> 00:09:27,020
own choices in getting the initial stuff

00:09:20,990 --> 00:09:30,680
working so why do I care well Oracle has

00:09:27,020 --> 00:09:32,959
several database platforms that are that

00:09:30,680 --> 00:09:35,150
work around the Niantic chip they have a

00:09:32,959 --> 00:09:37,610
lot of data going back and forth in

00:09:35,150 --> 00:09:39,270
their own database stuff and then

00:09:37,610 --> 00:09:43,100
getting their database and making

00:09:39,270 --> 00:09:46,500
the results of their output available

00:09:43,100 --> 00:09:47,850
and so it'd be nice to nice for our

00:09:46,500 --> 00:09:49,710
customers to be able to encrypt their

00:09:47,850 --> 00:09:52,230
their work and they already have the

00:09:49,710 --> 00:09:55,980
hardware to do it so let's go enable

00:09:52,230 --> 00:09:59,760
that hardware for them there's something

00:09:55,980 --> 00:10:01,170
to also work on while we drive Intel to

00:09:59,760 --> 00:10:03,570
do the right thing on their next pieces

00:10:01,170 --> 00:10:06,540
of hardware since I know some of the

00:10:03,570 --> 00:10:08,370
people working on it I used to work for

00:10:06,540 --> 00:10:09,780
Intel and I worked on these drivers

00:10:08,370 --> 00:10:12,540
before so I had a little bit of idea

00:10:09,780 --> 00:10:15,450
what I was getting into and so many said

00:10:12,540 --> 00:10:21,240
go do this okay you don't argue with so

00:10:15,450 --> 00:10:24,330
many so I may have this timeline

00:10:21,240 --> 00:10:27,030
slightly wrong but the initial support

00:10:24,330 --> 00:10:32,070
the initial NIC hardware came out around

00:10:27,030 --> 00:10:34,440
2008 2009 there was no offload support

00:10:32,070 --> 00:10:35,270
in the Linux stack so we just didn't do

00:10:34,440 --> 00:10:37,860
anything

00:10:35,270 --> 00:10:40,440
meanwhile the Windows folks said haha we

00:10:37,860 --> 00:10:41,760
can do it so they did it and then they

00:10:40,440 --> 00:10:43,320
promptly kind of forgot about it and

00:10:41,760 --> 00:10:45,600
I've had a hard time trying to get their

00:10:43,320 --> 00:10:51,570
attention saying hey how did you make

00:10:45,600 --> 00:10:53,250
this part work last year I don't know if

00:10:51,570 --> 00:10:55,500
Salman he started it but I know she was

00:10:53,250 --> 00:10:57,570
browbeating poor Josh and Dawn Anna

00:10:55,500 --> 00:11:00,960
Anjali is saying hey get this working we

00:10:57,570 --> 00:11:03,900
want it we want it and Josh did a nice

00:11:00,960 --> 00:11:05,160
job at getting it started and then was

00:11:03,900 --> 00:11:06,930
told go work on something else for a

00:11:05,160 --> 00:11:09,270
while

00:11:06,930 --> 00:11:11,580
the summer I had a little bit of a

00:11:09,270 --> 00:11:14,600
little bit of time and Salman said hey

00:11:11,580 --> 00:11:17,040
we have the off load in the stack now

00:11:14,600 --> 00:11:19,830
you have some time go work on this and

00:11:17,040 --> 00:11:25,380
help us get it working and I said sure

00:11:19,830 --> 00:11:27,750
okay we see we saw that Mellanox had it

00:11:25,380 --> 00:11:30,090
I see someone else just posted patches I

00:11:27,750 --> 00:11:32,190
don't remember who it was someone else

00:11:30,090 --> 00:11:35,550
just posted patches for offload and I

00:11:32,190 --> 00:11:37,910
think was just last week you remember

00:11:35,550 --> 00:11:37,910
who that was

00:11:39,010 --> 00:11:45,470
yeah I haven't had a chance to look

00:11:42,140 --> 00:11:47,090
through their patches so like I said I

00:11:45,470 --> 00:11:49,520
was a little new to the IPSec stuff so I

00:11:47,090 --> 00:11:51,110
had to go digging around looking through

00:11:49,520 --> 00:11:53,690
the public data sheets about what is

00:11:51,110 --> 00:11:58,460
IPSec looking at the public data sheets

00:11:53,690 --> 00:12:00,770
for the i-x GBE driver and the the

00:11:58,460 --> 00:12:02,570
Niantic because when I left until they

00:12:00,770 --> 00:12:06,350
didn't let me take the non-public data

00:12:02,570 --> 00:12:11,630
sheets with me went through the Mellanox

00:12:06,350 --> 00:12:15,620
and a lot of the xf x frm code for hints

00:12:11,630 --> 00:12:17,690
as to what to do study josh's code and

00:12:15,620 --> 00:12:20,320
and poked and cajoled my friends at

00:12:17,690 --> 00:12:24,770
intel for some help

00:12:20,320 --> 00:12:26,270
the basic theory with this driver is you

00:12:24,770 --> 00:12:30,650
know first of all you set the flag

00:12:26,270 --> 00:12:32,630
saying hey I can do the offload but if

00:12:30,650 --> 00:12:34,520
you try to start try to tell the chip to

00:12:32,630 --> 00:12:36,320
start preparing for the offload it's

00:12:34,520 --> 00:12:38,840
gonna suck down a bunch more power so

00:12:36,320 --> 00:12:40,340
figured ok we won't really set up the

00:12:38,840 --> 00:12:44,540
chip for it until we actually have an

00:12:40,340 --> 00:12:46,490
essay to unload to offload and so we

00:12:44,540 --> 00:12:49,910
don't start the actual chip engine until

00:12:46,490 --> 00:12:52,070
we have something to work with in the

00:12:49,910 --> 00:12:54,980
meantime we set up some software tables

00:12:52,070 --> 00:13:00,530
to keep track of all the info we set up

00:12:54,980 --> 00:13:01,670
our offload operations 4x frm to C and

00:13:00,530 --> 00:13:05,150
then when we actually want to start

00:13:01,670 --> 00:13:07,940
stuff we have to shut down the chip data

00:13:05,150 --> 00:13:12,560
paths let them drain for a moment do a

00:13:07,940 --> 00:13:15,880
little tweaking of the inner gap inter I

00:13:12,560 --> 00:13:20,170
never can say that right inter frame gap

00:13:15,880 --> 00:13:20,170
and then start the offload engine

00:13:21,950 --> 00:13:28,140
when the when the stack comes and says

00:13:26,100 --> 00:13:31,350
hey here's here's something we want you

00:13:28,140 --> 00:13:38,220
to offload we go shove it into the chip

00:13:31,350 --> 00:13:41,640
tables on T X we've got 1,024 offloads

00:13:38,220 --> 00:13:45,300
that we can do for essays a 128-bit key

00:13:41,640 --> 00:13:47,240
32 bits alt for just the one now I

00:13:45,300 --> 00:13:51,540
didn't write it down here just the one

00:13:47,240 --> 00:13:54,360
encryption that it does for our X we've

00:13:51,540 --> 00:13:58,140
got tables for the key the salt for the

00:13:54,360 --> 00:14:03,600
SPI coming in the mode basically is this

00:13:58,140 --> 00:14:06,840
an H or an or uh yes ESP and the IP

00:14:03,600 --> 00:14:09,930
addresses again we've got a thousand 24

00:14:06,840 --> 00:14:12,300
offloads we can do but only a hundred

00:14:09,930 --> 00:14:14,850
and twenty-eight IP addresses as targets

00:14:12,300 --> 00:14:16,830
yeah that's ok we can have lots of

00:14:14,850 --> 00:14:18,540
offloads for a single IP address and so

00:14:16,830 --> 00:14:21,870
this this allows us to do some

00:14:18,540 --> 00:14:23,850
multiplexing on the tables now Intel did

00:14:21,870 --> 00:14:25,770
something interesting they used some

00:14:23,850 --> 00:14:29,010
content addressable memory in their

00:14:25,770 --> 00:14:31,020
hardware which took me by surprise at

00:14:29,010 --> 00:14:34,830
first until I read some of the the small

00:14:31,020 --> 00:14:37,500
print it's I don't know how this stuff

00:14:34,830 --> 00:14:40,020
is implemented but you give it the basic

00:14:37,500 --> 00:14:41,970
you give it the lookup information and

00:14:40,020 --> 00:14:44,130
the hardware sucks it in and just runs

00:14:41,970 --> 00:14:45,990
across all the tables and quickly comes

00:14:44,130 --> 00:14:48,750
out with here it is out of your tables

00:14:45,990 --> 00:14:50,700
like oh that's cool what you have to

00:14:48,750 --> 00:14:52,770
remember those that doesn't act like

00:14:50,700 --> 00:14:54,240
normal memory and so it doesn't get

00:14:52,770 --> 00:14:57,650
cleared on reset you have to go and do

00:14:54,240 --> 00:15:00,900
your own clean up before and afterwards

00:14:57,650 --> 00:15:02,430
and then to load those tables you've got

00:15:00,900 --> 00:15:03,930
a set of tables but you've only got one

00:15:02,430 --> 00:15:06,420
register that you're bouncing stuff

00:15:03,930 --> 00:15:08,490
through so you load your IP address in

00:15:06,420 --> 00:15:10,589
the table you set the index that's going

00:15:08,490 --> 00:15:11,940
to go to you and say go and the chip

00:15:10,589 --> 00:15:14,670
puts it in the table then you do the

00:15:11,940 --> 00:15:16,800
next one in order to read what you have

00:15:14,670 --> 00:15:19,620
in the table it's the same thing you set

00:15:16,800 --> 00:15:21,360
the index you say read it gets loaded

00:15:19,620 --> 00:15:23,820
into that bounce register and then you

00:15:21,360 --> 00:15:25,620
can read that register out takes a

00:15:23,820 --> 00:15:27,800
little extra time but yeah alright it

00:15:25,620 --> 00:15:27,800
works

00:15:31,329 --> 00:15:42,440
40x basic offload ex frm is setting up

00:15:39,589 --> 00:15:45,230
the whole packet structure sets up the

00:15:42,440 --> 00:15:46,910
ESP header for you but doesn't encrypt

00:15:45,230 --> 00:15:49,430
the data and then hands it to you and

00:15:46,910 --> 00:15:52,850
says here you go and here's the SA often

00:15:49,430 --> 00:15:55,790
a pointer off from the skb so the driver

00:15:52,850 --> 00:15:58,430
has to go look at that and in our case

00:15:55,790 --> 00:16:00,290
here the driver sets up a context

00:15:58,430 --> 00:16:01,759
descriptor that has some of the

00:16:00,290 --> 00:16:03,050
information and then the actual data

00:16:01,759 --> 00:16:05,389
descriptor so you end up with two

00:16:03,050 --> 00:16:08,420
descriptors for this one packet to get

00:16:05,389 --> 00:16:10,100
sent down the information gets set down

00:16:08,420 --> 00:16:10,610
the driver looks at and goes oh okay

00:16:10,100 --> 00:16:12,560
cool

00:16:10,610 --> 00:16:15,319
does the encryption and shoves it out

00:16:12,560 --> 00:16:19,360
the door the driver does the encryption

00:16:15,319 --> 00:16:23,660
of the packet us and if we're doing TSO

00:16:19,360 --> 00:16:26,720
or checksum stuff it'll do the tweaking

00:16:23,660 --> 00:16:35,060
of the of the context numbers as we go

00:16:26,720 --> 00:16:38,420
along rx similar the engine watches for

00:16:35,060 --> 00:16:40,519
the IPSec headers if it sees an IPSec

00:16:38,420 --> 00:16:42,709
header in the stack coming in it will

00:16:40,519 --> 00:16:46,430
look at the IP address that it's headed

00:16:42,709 --> 00:16:47,930
for and it'll find the SPI number and go

00:16:46,430 --> 00:16:49,009
searching through the tables they do we

00:16:47,930 --> 00:16:51,740
have an offload for this

00:16:49,009 --> 00:16:54,860
if we don't well then fine just shove it

00:16:51,740 --> 00:16:58,009
up the stack if we do go try to do the

00:16:54,860 --> 00:17:01,279
encryption set a bit for success or fail

00:16:58,009 --> 00:17:04,010
and hand that backup the driver that has

00:17:01,279 --> 00:17:06,980
to look at that and say oh look the door

00:17:04,010 --> 00:17:08,510
the chip found something unfortunately

00:17:06,980 --> 00:17:11,689
the chip doesn't tell us actually which

00:17:08,510 --> 00:17:14,270
essay it was and so then we have to do

00:17:11,689 --> 00:17:16,490
in software our own table lookup to find

00:17:14,270 --> 00:17:18,289
out what it is that's where part of my

00:17:16,490 --> 00:17:22,010
speed is gone right now is I'm not doing

00:17:18,289 --> 00:17:25,189
anything fast I got to fix that later so

00:17:22,010 --> 00:17:27,799
we do our status lookup we set up the S

00:17:25,189 --> 00:17:30,919
key BSP and hand that back up the stack

00:17:27,799 --> 00:17:33,919
make that available X frm then goes

00:17:30,919 --> 00:17:35,510
ahead and pulls the header part it

00:17:33,919 --> 00:17:41,600
doesn't have to be the decryption

00:17:35,510 --> 00:17:42,830
because we've already done it so current

00:17:41,600 --> 00:17:48,950
status it works

00:17:42,830 --> 00:17:52,070
yay not very fast and only for ipv4 the

00:17:48,950 --> 00:17:54,500
biggest issue was just getting this

00:17:52,070 --> 00:17:57,320
TWiki little hardware to do anything for

00:17:54,500 --> 00:17:59,720
me yeah we've got specs but you know how

00:17:57,320 --> 00:18:02,090
specs go sometimes they don't tell you

00:17:59,720 --> 00:18:03,320
you really got to do it exactly in this

00:18:02,090 --> 00:18:06,880
order and make sure you do a couple of

00:18:03,320 --> 00:18:06,880
flushes here make sure you do this

00:18:08,169 --> 00:18:13,880
finally I got some guidance on how the

00:18:11,870 --> 00:18:17,980
windows people did it X number of years

00:18:13,880 --> 00:18:20,750
ago and was able to get our code working

00:18:17,980 --> 00:18:23,000
checksum and TSO offload are not working

00:18:20,750 --> 00:18:26,000
yet that's the thing I was just recently

00:18:23,000 --> 00:18:31,880
looking at and so we just won't even

00:18:26,000 --> 00:18:33,830
talk about performance right now so

00:18:31,880 --> 00:18:38,210
there were challenges as anything goes

00:18:33,830 --> 00:18:40,309
and we ran into a couple of as I'm

00:18:38,210 --> 00:18:43,100
stumbling through the API and making my

00:18:40,309 --> 00:18:46,580
own mistakes nothing points out a

00:18:43,100 --> 00:18:48,919
mistake like a kernel crash and so I

00:18:46,580 --> 00:18:51,679
came whining to Steve Stephan saying it

00:18:48,919 --> 00:18:53,390
broke and we found a couple of patches

00:18:51,679 --> 00:18:54,559
to stick in there and he said don't do

00:18:53,390 --> 00:18:56,299
that I said well it shouldn't crash

00:18:54,559 --> 00:18:58,490
anyway

00:18:56,299 --> 00:19:00,380
so I fixed my code so it wouldn't do

00:18:58,490 --> 00:19:01,760
this and then he fixed the the upper

00:19:00,380 --> 00:19:05,299
layer code so that even if someone else

00:19:01,760 --> 00:19:06,649
does it it won't break again I'm sure

00:19:05,299 --> 00:19:07,970
there are other issues we'll run into

00:19:06,649 --> 00:19:09,440
but now as I get a little more familiar

00:19:07,970 --> 00:19:12,820
with what the stack is doing maybe I

00:19:09,440 --> 00:19:12,820
won't have to wind him quite so much

00:19:13,059 --> 00:19:21,110
okay here's the big thing as as we heard

00:19:18,049 --> 00:19:23,390
from Harold documentation is really a

00:19:21,110 --> 00:19:24,380
good thing to have around and this is

00:19:23,390 --> 00:19:26,390
one of the things I'm going to try to

00:19:24,380 --> 00:19:28,850
take care of over the next couple months

00:19:26,390 --> 00:19:30,980
is from my perspective now that I've

00:19:28,850 --> 00:19:33,530
gone through this instead of being one

00:19:30,980 --> 00:19:36,799
of the Emma Emma likes or Mellanox folks

00:19:33,530 --> 00:19:39,440
helping build the API I think I'm one of

00:19:36,799 --> 00:19:41,330
the first consumers of this it took me a

00:19:39,440 --> 00:19:43,520
while to figure out okay how do I need

00:19:41,330 --> 00:19:45,139
to put this together I've got some notes

00:19:43,520 --> 00:19:47,600
I need to write those notes down and

00:19:45,139 --> 00:19:49,899
we'll work out some some sort of readme

00:19:47,600 --> 00:19:49,899
for those

00:19:50,640 --> 00:19:58,320
I peer out - man I hate that

00:19:54,660 --> 00:20:00,620
command-line okay it's great once you

00:19:58,320 --> 00:20:03,809
know which things you need to put where

00:20:00,620 --> 00:20:06,179
but it's a really wonderful example of

00:20:03,809 --> 00:20:09,690
why man pages are not a learning

00:20:06,179 --> 00:20:12,090
facility they're wonderful to help you

00:20:09,690 --> 00:20:15,720
remember what it is you learned the hard

00:20:12,090 --> 00:20:17,549
way somewhere else I'm not sure what to

00:20:15,720 --> 00:20:20,940
do with those yet but we'll we'll look

00:20:17,549 --> 00:20:28,830
at those and then of course there's the

00:20:20,940 --> 00:20:31,350
official data sheets I PJ and I teach a

00:20:28,830 --> 00:20:34,710
driver class at Portland State

00:20:31,350 --> 00:20:36,659
University and one of our favorite one

00:20:34,710 --> 00:20:38,760
of our favorite assignments for the

00:20:36,659 --> 00:20:40,530
young students now these are hardware

00:20:38,760 --> 00:20:42,090
engineering students typically we're

00:20:40,530 --> 00:20:44,039
teaching them how to write a driver for

00:20:42,090 --> 00:20:46,860
hardware so they're not great software

00:20:44,039 --> 00:20:49,080
engineers yet and their hardware people

00:20:46,860 --> 00:20:50,059
they've they have looked at specs a

00:20:49,080 --> 00:20:53,549
little bit

00:20:50,059 --> 00:20:55,500
we tell them here here's a go get this

00:20:53,549 --> 00:20:57,480
spec from Intel

00:20:55,500 --> 00:21:01,230
it's these back so it must be right

00:20:57,480 --> 00:21:03,000
right yeah for the for one of the one

00:21:01,230 --> 00:21:06,020
gig devices and we tell them there

00:21:03,000 --> 00:21:08,460
here's how to read and write registers

00:21:06,020 --> 00:21:12,870
here's here's the information on how to

00:21:08,460 --> 00:21:17,010
do an LED go make that LED blink read

00:21:12,870 --> 00:21:19,380
this back it'll tell you kinda we give

00:21:17,010 --> 00:21:21,270
them extra time on that one because it

00:21:19,380 --> 00:21:24,030
doesn't really tell them how to do it

00:21:21,270 --> 00:21:26,760
and it's wonderfully wonderfully

00:21:24,030 --> 00:21:29,789
exciting to see their eyes get wide but

00:21:26,760 --> 00:21:31,740
but the spec yeah specs lie in real life

00:21:29,789 --> 00:21:35,240
spec slide don't expect the professor to

00:21:31,740 --> 00:21:35,240
get it right for you in real life

00:21:36,049 --> 00:21:41,940
further challenges oh this is kind of an

00:21:39,390 --> 00:21:45,419
extension of all the documentation tied

00:21:41,940 --> 00:21:49,140
together we have stuff that comes in on

00:21:45,419 --> 00:21:52,530
in network order great we have stuff

00:21:49,140 --> 00:21:55,830
that comes down the stack and I was been

00:21:52,530 --> 00:21:57,690
working on both SPARC and x86 so I have

00:21:55,830 --> 00:21:59,370
to deal with his byte swapping stuff and

00:21:57,690 --> 00:22:01,500
when you've got something that comes

00:21:59,370 --> 00:22:02,909
down the stack is supposed to be set

00:22:01,500 --> 00:22:05,580
into network order

00:22:02,909 --> 00:22:07,049
I think it's supposed to be Network

00:22:05,580 --> 00:22:09,840
order on this tip is that what the spec

00:22:07,049 --> 00:22:11,789
is telling me okay but what order am I

00:22:09,840 --> 00:22:14,369
getting it from the stack when when it

00:22:11,789 --> 00:22:16,229
gets handed to me there's a lot of

00:22:14,369 --> 00:22:18,269
experimentation that goes she lied well

00:22:16,229 --> 00:22:20,399
let me try swapping it and maybe it'll

00:22:18,269 --> 00:22:21,720
work and there's there's one or two that

00:22:20,399 --> 00:22:23,549
I had to swap that didn't look like they

00:22:21,720 --> 00:22:27,179
should have been but then it started

00:22:23,549 --> 00:22:29,669
working but that's another thing I want

00:22:27,179 --> 00:22:32,879
to try to make clear is this numbers

00:22:29,669 --> 00:22:35,190
coming down directly from IPSec in this

00:22:32,879 --> 00:22:38,099
byte order and it needs to be compared

00:22:35,190 --> 00:22:39,899
in this byte order from the web now

00:22:38,099 --> 00:22:43,009
figure out what your spec is going to do

00:22:39,899 --> 00:22:43,009
what your chip is going to do with it

00:22:43,849 --> 00:22:51,629
the other fun one which is I have

00:22:49,379 --> 00:22:53,489
several times between my Intel career

00:22:51,629 --> 00:22:57,059
and recently now run into this little

00:22:53,489 --> 00:22:59,489
issue of the original iyx GB driver was

00:22:57,059 --> 00:23:03,210
written for something that was called

00:22:59,489 --> 00:23:06,690
oplan OPLAN was a short-lived 10 gig

00:23:03,210 --> 00:23:08,789
neck it did it's this thing and getting

00:23:06,690 --> 00:23:11,489
the market running and very soon was

00:23:08,789 --> 00:23:13,649
shortened was followed up by the 82

00:23:11,489 --> 00:23:16,440
$5.99 the Niantic and the rest of the

00:23:13,649 --> 00:23:19,169
family but they changed the register set

00:23:16,440 --> 00:23:21,359
and when they changed the register set

00:23:19,169 --> 00:23:26,099
the hardware engineer said oh yeah they

00:23:21,359 --> 00:23:29,129
overlap it's okay no they don't

00:23:26,099 --> 00:23:30,960
they don't overlap completely and in

00:23:29,129 --> 00:23:34,099
fact there are some bits that completely

00:23:30,960 --> 00:23:38,609
change names in in the the descriptors

00:23:34,099 --> 00:23:41,369
and I had to run into that and I don't

00:23:38,609 --> 00:23:43,109
know that Don and folks have seen my

00:23:41,369 --> 00:23:44,909
full patches yet but there are some bits

00:23:43,109 --> 00:23:46,830
that I have to change in some

00:23:44,909 --> 00:23:47,970
long-standing bit old bit definitions

00:23:46,830 --> 00:23:52,289
that I have to change in order to make

00:23:47,970 --> 00:23:56,700
this work that's okay I don't know that

00:23:52,289 --> 00:23:57,450
anyone's using oplan anyway Nick

00:23:56,700 --> 00:24:01,099
weirdness

00:23:57,450 --> 00:24:02,879
yeah well registers not cleared on reset

00:24:01,099 --> 00:24:04,649
experimentation to figure out okay

00:24:02,879 --> 00:24:07,529
exactly what order do I fill these

00:24:04,649 --> 00:24:12,330
tables out and when do i do flushes kind

00:24:07,529 --> 00:24:16,739
of a pain support from Intel was slow

00:24:12,330 --> 00:24:18,899
I'm gonna beat on them for this I it

00:24:16,739 --> 00:24:20,940
took a while to get their attention to

00:24:18,899 --> 00:24:23,639
say hey can you please please look at

00:24:20,940 --> 00:24:25,769
this and and I was silly enough to think

00:24:23,639 --> 00:24:27,809
that my personal direct communications

00:24:25,769 --> 00:24:30,179
would help get my get me information and

00:24:27,809 --> 00:24:31,919
it did to a point but I had to go and

00:24:30,179 --> 00:24:33,330
shake the official tree and say hey I

00:24:31,919 --> 00:24:35,820
need we need support

00:24:33,330 --> 00:24:37,009
Oracle needs support for this and yeah

00:24:35,820 --> 00:24:40,889
that didn't get me very far either

00:24:37,009 --> 00:24:43,289
actually but I really appreciate Jesse

00:24:40,889 --> 00:24:44,759
Brandenburg's help for he he had access

00:24:43,289 --> 00:24:46,769
to the Windows driver and he was able to

00:24:44,759 --> 00:24:50,759
go and dig into it a little bit and look

00:24:46,769 --> 00:24:55,139
at my patch and say try this and it made

00:24:50,759 --> 00:24:58,529
a very large difference for me we'll get

00:24:55,139 --> 00:25:01,499
to performance another day so what is

00:24:58,529 --> 00:25:03,299
there to do left obviously checksum and

00:25:01,499 --> 00:25:06,179
TSO support and need to be there that

00:25:03,299 --> 00:25:09,960
that's just it's got to happen

00:25:06,179 --> 00:25:13,499
ipv6 supposedly the chip will do it I

00:25:09,960 --> 00:25:15,690
will be looking at that probably well

00:25:13,499 --> 00:25:19,379
after I get TSO working and IP before

00:25:15,690 --> 00:25:22,049
working fast there is some advertising

00:25:19,379 --> 00:25:24,359
of some tunnel support at least on

00:25:22,049 --> 00:25:28,049
receive in this chip and so I I'll be

00:25:24,359 --> 00:25:29,609
looking at that a little bit my simple

00:25:28,049 --> 00:25:31,979
sa table lookup

00:25:29,609 --> 00:25:33,779
has got to change I'm gonna look at what

00:25:31,979 --> 00:25:39,119
Mellanox did on there hashing and I'll

00:25:33,779 --> 00:25:42,690
probably just borrow what they did clean

00:25:39,119 --> 00:25:44,460
up some documentation and I want to do

00:25:42,690 --> 00:25:47,700
some performance comparisons with

00:25:44,460 --> 00:25:49,619
intel's qat device which one of its

00:25:47,700 --> 00:25:51,359
failings is it has to go through the PCI

00:25:49,619 --> 00:25:53,399
bus a couple of times in order to do the

00:25:51,359 --> 00:25:55,440
stuff that it's doing at least that was

00:25:53,399 --> 00:25:57,210
one of my understandings and so I I

00:25:55,440 --> 00:25:58,409
wanted to do some work with that and if

00:25:57,210 --> 00:26:03,919
I have a chance I see something going

00:25:58,409 --> 00:26:03,919
yeah yeah hang on a second

00:26:04,700 --> 00:26:11,450
I'm almost done we'll come back to that

00:26:06,640 --> 00:26:15,050
so in the in the spirit of trying to

00:26:11,450 --> 00:26:16,790
make sure informations available looking

00:26:15,050 --> 00:26:18,620
at the slides from the last couple of

00:26:16,790 --> 00:26:23,060
conference has really helped especially

00:26:18,620 --> 00:26:24,800
the Boris's slides about how to how to

00:26:23,060 --> 00:26:30,050
do some of the stuff and so I thought

00:26:24,800 --> 00:26:32,330
well this was one that these are these

00:26:30,050 --> 00:26:34,040
are the these are the IP IP route 2

00:26:32,330 --> 00:26:36,530
commands that I eventually put together

00:26:34,040 --> 00:26:38,330
for my testing and they weren't great I

00:26:36,530 --> 00:26:39,890
figured I may as well put them out there

00:26:38,330 --> 00:26:42,320
so that other people don't have to

00:26:39,890 --> 00:26:46,700
figure them all out and yes I have a

00:26:42,320 --> 00:26:48,080
script that does this for me but that's

00:26:46,700 --> 00:26:59,030
my test setup for my right and left

00:26:48,080 --> 00:27:00,770
machines it works other tidbits this was

00:26:59,030 --> 00:27:06,260
I think this was Boris that these were

00:27:00,770 --> 00:27:08,390
Boris the slides was that right and then

00:27:06,260 --> 00:27:10,700
I found I found a reference to some

00:27:08,390 --> 00:27:12,440
folks in Germany and I don't think I put

00:27:10,700 --> 00:27:15,680
their names down on here they did a

00:27:12,440 --> 00:27:19,040
paper last year they were using DP DK

00:27:15,680 --> 00:27:22,610
and some Lua scripting on top of it to

00:27:19,040 --> 00:27:26,270
do IPSec offload in IX GBE and they had

00:27:22,610 --> 00:27:29,180
some they had some data out of it and

00:27:26,270 --> 00:27:31,010
then the student that was doing that

00:27:29,180 --> 00:27:33,790
moved off to some other thing and it

00:27:31,010 --> 00:27:36,530
never got followed up on I heard

00:27:33,790 --> 00:27:38,300
somebody just sent me a message just

00:27:36,530 --> 00:27:40,490
this morning that someone else on DP D K

00:27:38,300 --> 00:27:41,870
list is talking about doing some more

00:27:40,490 --> 00:27:44,290
offload stuff and I need to go chase

00:27:41,870 --> 00:27:44,290
that down

00:27:50,520 --> 00:27:54,970
okay I'll go I'll go

00:27:52,330 --> 00:27:57,640
so Anjali was just saying that dpk folks

00:27:54,970 --> 00:28:03,150
just posted patches for this so I have

00:27:57,640 --> 00:28:03,150
to go look for that okay questions

00:28:17,400 --> 00:28:23,460
yeah so he's saying support for qat and

00:28:21,210 --> 00:28:28,800
some of its work just isn't all there in

00:28:23,460 --> 00:28:33,090
the upstream colonel and and yeah so

00:28:28,800 --> 00:28:35,130
much for TSO yeah I just remember when I

00:28:33,090 --> 00:28:37,260
was working near that group at the time

00:28:35,130 --> 00:28:39,900
people are going yeah this qat is fun

00:28:37,260 --> 00:28:47,630
fast cool and and I'm looking at it

00:28:39,900 --> 00:28:47,630
going so what happened to it it yeah

00:28:55,970 --> 00:29:15,530
yeah beneficial for big packets so that

00:29:11,250 --> 00:29:15,530
kind of makes sense okay

00:29:44,870 --> 00:29:57,799
yeah when Niantic was designed was mid

00:29:47,330 --> 00:30:00,049
the mid sand like 2005 or so and yeah

00:29:57,799 --> 00:30:01,639
and the the the people that were doing

00:30:00,049 --> 00:30:03,309
the designing of that ship were not

00:30:01,639 --> 00:30:06,460
paying attention to linux i can

00:30:03,309 --> 00:30:06,460
guarantee you that

00:30:18,360 --> 00:30:28,210
yeah any other questions or comments so

00:30:26,050 --> 00:30:31,720
thank you these slides will be available

00:30:28,210 --> 00:30:34,930
and I think my name might be on them

00:30:31,720 --> 00:30:38,470
somewhere for email Thank You Morgan

00:30:34,930 --> 00:30:40,300
all right morning I'm Josh this is done

00:30:38,470 --> 00:30:41,710
at same Josh Shannon was talking about

00:30:40,300 --> 00:30:43,690
actually and we're gonna be presenting

00:30:41,710 --> 00:30:46,690
our implementation for IPSec offload in

00:30:43,690 --> 00:30:51,640
fort ville and our design for support

00:30:46,690 --> 00:30:53,950
for virtualization okay

00:30:51,640 --> 00:30:55,600
so the focus of our presentation is the

00:30:53,950 --> 00:30:57,640
virtualization support because we think

00:30:55,600 --> 00:31:00,610
we have a solution where we don't have

00:30:57,640 --> 00:31:01,870
to extend the existing API but before we

00:31:00,610 --> 00:31:05,890
get into that we want to provide some

00:31:01,870 --> 00:31:09,780
background into our device and some of

00:31:05,890 --> 00:31:09,780
the challenges we faced working with it

00:31:11,430 --> 00:31:17,080
so what we're working with is basically

00:31:13,840 --> 00:31:20,080
a normal fort ville with an IPSec agent

00:31:17,080 --> 00:31:23,050
put right between the Phi and the Mac as

00:31:20,080 --> 00:31:25,770
a bump in the wire so what this means is

00:31:23,050 --> 00:31:28,360
there's no there's no backplane or

00:31:25,770 --> 00:31:31,030
control plane for getting configuration

00:31:28,360 --> 00:31:32,500
or metadata to the IPSec agent so

00:31:31,030 --> 00:31:35,800
everything has to go through the fort

00:31:32,500 --> 00:31:40,150
bill Mac so our solution for this was

00:31:35,800 --> 00:31:43,180
using two different L to ether types to

00:31:40,150 --> 00:31:46,330
distinguish between control packets or

00:31:43,180 --> 00:31:49,050
configuration packets and metadata in an

00:31:46,330 --> 00:31:49,050
IPSec packet

00:31:49,700 --> 00:31:56,400
so in the control plane basically what

00:31:52,890 --> 00:31:59,179
happens is when the SE add si API hook

00:31:56,400 --> 00:32:02,100
is called the driver creates a special

00:31:59,179 --> 00:32:03,750
control configuration packet that is

00:32:02,100 --> 00:32:07,080
going to forward through the Mac to the

00:32:03,750 --> 00:32:09,179
IPSec agent it has this special ether

00:32:07,080 --> 00:32:11,160
type already in the packet and the

00:32:09,179 --> 00:32:13,380
hardware is set up so it knows not to

00:32:11,160 --> 00:32:17,070
mess with it just for its it straight to

00:32:13,380 --> 00:32:19,620
the agent excuse me

00:32:17,070 --> 00:32:22,200
so the agent picks up the packet it sees

00:32:19,620 --> 00:32:24,179
the control tag and it parses the rest

00:32:22,200 --> 00:32:28,080
of the payload with the parameters for

00:32:24,179 --> 00:32:30,870
the SA basically it does the programming

00:32:28,080 --> 00:32:34,080
of the hardware database it also know

00:32:30,870 --> 00:32:35,640
the packets have some fields for status

00:32:34,080 --> 00:32:38,730
and error reporting so they send it back

00:32:35,640 --> 00:32:41,130
to the driver and we know if we had

00:32:38,730 --> 00:32:47,220
failed for example and it can pass it

00:32:41,130 --> 00:32:48,870
back at the stack so the ad was just one

00:32:47,220 --> 00:32:52,740
example there's another command for

00:32:48,870 --> 00:32:54,870
remove and another one for removing all

00:32:52,740 --> 00:32:57,299
essays on a given port for basically

00:32:54,870 --> 00:32:59,429
cleaning up stale essays and the

00:32:57,299 --> 00:33:05,100
hardware database which we come more

00:32:59,429 --> 00:33:08,510
relevant for virtualization so that was

00:33:05,100 --> 00:33:11,429
the control plan now in the data plane

00:33:08,510 --> 00:33:13,770
basically on egress when a packet comes

00:33:11,429 --> 00:33:15,080
down from the stack and says I need to

00:33:13,770 --> 00:33:18,809
offload this the driver is going to do

00:33:15,080 --> 00:33:21,030
some parsing and figure out okay we need

00:33:18,809 --> 00:33:23,700
the hardware to encrypt this packet so

00:33:21,030 --> 00:33:25,890
it's going to create a 32 bit field and

00:33:23,700 --> 00:33:27,570
put it in a descriptor which we're going

00:33:25,890 --> 00:33:30,000
to pass with the packet to the fort

00:33:27,570 --> 00:33:33,090
Ville Mac and the Mac knows to insert

00:33:30,000 --> 00:33:35,790
our special ether type metadata tag with

00:33:33,090 --> 00:33:38,610
with this 32 bits into the front of the

00:33:35,790 --> 00:33:41,429
packet which is then forwarded to the

00:33:38,610 --> 00:33:43,710
IPSec agent the agent knows once it sees

00:33:41,429 --> 00:33:45,870
this to strip that out of the packet and

00:33:43,710 --> 00:33:49,650
read the 32 bits of metadata to do

00:33:45,870 --> 00:33:53,570
whatever processing it needs to some of

00:33:49,650 --> 00:33:57,120
encrypts or whatever similarly on

00:33:53,570 --> 00:33:59,010
ingress when a packet comes in the agent

00:33:57,120 --> 00:34:01,260
looks at various fields in the packet

00:33:59,010 --> 00:34:03,000
does its si lookup and if it finds a

00:34:01,260 --> 00:34:05,309
packet it needs to decrypt

00:34:03,000 --> 00:34:08,820
it does that processing and then it

00:34:05,309 --> 00:34:12,810
inserts this metadata ethertype with 32

00:34:08,820 --> 00:34:14,970
bits of metadata which basically tells

00:34:12,810 --> 00:34:17,070
us what happened with the decryption

00:34:14,970 --> 00:34:18,990
authentication and stuff like that so

00:34:17,070 --> 00:34:22,050
that comes up to the four Phil Mac Mac

00:34:18,990 --> 00:34:24,270
knows to strip that ethertype and the 32

00:34:22,050 --> 00:34:26,429
bits of metadata metadata out of the

00:34:24,270 --> 00:34:30,270
packet it puts it in the descriptor and

00:34:26,429 --> 00:34:32,359
passes the packet up and the driver

00:34:30,270 --> 00:34:36,149
knows okay this is a normal USB packet

00:34:32,359 --> 00:34:43,320
excuse me and we have 32 bits of

00:34:36,149 --> 00:34:45,359
metadata now for processing so more

00:34:43,320 --> 00:34:48,149
specifically what is in the metadata the

00:34:45,359 --> 00:34:51,810
most important bit is the offload packet

00:34:48,149 --> 00:34:54,649
bit for TX this basically says ok we

00:34:51,810 --> 00:34:57,270
need the hardware to encrypt this packet

00:34:54,649 --> 00:34:59,220
then another one is the next header

00:34:57,270 --> 00:35:01,380
field for the trailer so the agent

00:34:59,220 --> 00:35:03,840
doesn't have to do any packet processing

00:35:01,380 --> 00:35:05,640
on it so for me to say hey this is what

00:35:03,840 --> 00:35:08,910
it was put in the trailer don't worry

00:35:05,640 --> 00:35:10,710
about it and there's there's some

00:35:08,910 --> 00:35:12,390
options for other optimizations but

00:35:10,710 --> 00:35:15,930
that's what we need for now

00:35:12,390 --> 00:35:20,220
for TX so then on the RX metadata we

00:35:15,930 --> 00:35:22,200
have the error reporting did was it the

00:35:20,220 --> 00:35:24,720
packet decrypted the authentication fail

00:35:22,200 --> 00:35:28,560
for the any other errors and we also

00:35:24,720 --> 00:35:32,520
have an index for the software Sat

00:35:28,560 --> 00:35:35,460
database so when when the add sa command

00:35:32,520 --> 00:35:38,790
comes down we actually pass along with

00:35:35,460 --> 00:35:41,520
the SA parameters a index to a software

00:35:38,790 --> 00:35:43,170
database to store in the hardware so

00:35:41,520 --> 00:35:45,810
when it gets a packet in it knows what

00:35:43,170 --> 00:35:47,460
essayed used to decrypt we can pass that

00:35:45,810 --> 00:35:49,710
back to the driver and look it up fairly

00:35:47,460 --> 00:35:52,070
quickly so we already know what assay

00:35:49,710 --> 00:35:52,070
was used

00:35:53,470 --> 00:35:58,089
so we're we now we're basically at the

00:35:57,400 --> 00:36:01,210
same place

00:35:58,089 --> 00:36:03,520
shannon is with Niantic we've seen basic

00:36:01,210 --> 00:36:06,010
encryption decryption we don't have

00:36:03,520 --> 00:36:09,010
performance numbers right now and our

00:36:06,010 --> 00:36:11,230
design is pretty far ahead of our agent

00:36:09,010 --> 00:36:12,520
functionality so the important part is

00:36:11,230 --> 00:36:14,710
we haven't done any of the

00:36:12,520 --> 00:36:17,290
virtualization stuff yet we just want to

00:36:14,710 --> 00:36:18,880
discuss it kind of and now we're going

00:36:17,290 --> 00:36:23,349
to talk about some of the challenges for

00:36:18,880 --> 00:36:25,599
virtualization so big one multiple set

00:36:23,349 --> 00:36:28,599
domains and you have multiple VMs

00:36:25,599 --> 00:36:30,400
running different ike Damons they don't

00:36:28,599 --> 00:36:32,079
know that each other right how does si

00:36:30,400 --> 00:36:34,710
woke up in the hardware when you could

00:36:32,079 --> 00:36:39,130
have the same parameters for each

00:36:34,710 --> 00:36:40,390
different VMs basically then you have

00:36:39,130 --> 00:36:43,930
stale si clean up

00:36:40,390 --> 00:36:45,550
so if VF off loads a bunch of essays and

00:36:43,930 --> 00:36:47,710
is wiped out for some reason it didn't

00:36:45,550 --> 00:36:49,839
have a chance to say hey clean these up

00:36:47,710 --> 00:36:52,060
they're still in the hardware it could

00:36:49,839 --> 00:36:53,640
still match on an incoming packet what

00:36:52,060 --> 00:36:56,770
do you do then

00:36:53,640 --> 00:36:59,980
and part of the problem with going

00:36:56,770 --> 00:37:03,520
through the data plane only is that VF

00:36:59,980 --> 00:37:06,490
scan create a configuration packet that

00:37:03,520 --> 00:37:07,930
looks like a control packet for the PF

00:37:06,490 --> 00:37:13,540
or another VF and it could mess up

00:37:07,930 --> 00:37:16,480
somebody's set basically yeah

00:37:13,540 --> 00:37:18,880
and then east-west traffic encrypting

00:37:16,480 --> 00:37:20,859
between between two VMs on the same post

00:37:18,880 --> 00:37:22,270
and now Don's going to talk about all

00:37:20,859 --> 00:37:29,410
these in more detail so I'll hand it off

00:37:22,270 --> 00:37:31,000
to him thanks Josh kind of give you a

00:37:29,410 --> 00:37:33,400
quick overview we wanted to bring up

00:37:31,000 --> 00:37:35,500
stuff that we had kind of run into and

00:37:33,400 --> 00:37:38,319
the solutions we were going to we had

00:37:35,500 --> 00:37:40,089
planned to get around it and one of the

00:37:38,319 --> 00:37:41,829
things that I'd I don't know if I don't

00:37:40,089 --> 00:37:43,420
remember him mentioning is that the plan

00:37:41,829 --> 00:37:45,730
was that we wouldn't have to change any

00:37:43,420 --> 00:37:47,500
of the interfaces into the offload it

00:37:45,730 --> 00:37:48,970
would be all with the existing stuff

00:37:47,500 --> 00:37:51,450
could be stuff we doing the driver to

00:37:48,970 --> 00:37:53,770
get around these virtualization issues

00:37:51,450 --> 00:37:56,680
the first is when we were talking about

00:37:53,770 --> 00:37:58,480
multiple essayed means I kind of tried

00:37:56,680 --> 00:38:00,310
to draw it here the idea being it's

00:37:58,480 --> 00:38:03,339
relatively simple when you have 1s a

00:38:00,310 --> 00:38:05,410
domain in one UNIX instance and one and

00:38:03,339 --> 00:38:06,940
the agent and the agent has all the

00:38:05,410 --> 00:38:09,640
stuff that's offloaded and

00:38:06,940 --> 00:38:12,120
the OS knows all the essays that exist

00:38:09,640 --> 00:38:16,390
but when you start dealing with VF s--

00:38:12,120 --> 00:38:18,780
you have multiple sad domains so that

00:38:16,390 --> 00:38:20,950
there isn't one entity that actually

00:38:18,780 --> 00:38:23,260
understands where every where all the

00:38:20,950 --> 00:38:28,270
essays are and that can lead into

00:38:23,260 --> 00:38:31,350
problems and this is an example the

00:38:28,270 --> 00:38:36,420
essays are unique in a single entity by

00:38:31,350 --> 00:38:38,560
destination IP IP SEC protocol and spy

00:38:36,420 --> 00:38:40,600
but when you start dealing with multiple

00:38:38,560 --> 00:38:42,550
entities it's possible for those to be

00:38:40,600 --> 00:38:44,950
identical and so in the example we have

00:38:42,550 --> 00:38:47,380
here we have two VMs that have all those

00:38:44,950 --> 00:38:49,780
fields as identical but an income patent

00:38:47,380 --> 00:38:53,530
bakit and one of them is offloaded for

00:38:49,780 --> 00:38:55,390
let's say vm 1 but vm 2 is doing it in

00:38:53,530 --> 00:38:57,040
software and the only difference is

00:38:55,390 --> 00:38:59,800
they're in a different view on for this

00:38:57,040 --> 00:39:04,060
example a packet comes in it's destined

00:38:59,800 --> 00:39:07,630
for vm 2 but the agent is looking at it

00:39:04,060 --> 00:39:10,210
and says oh this is the same sad domain

00:39:07,630 --> 00:39:11,710
as vm 1 and it decrypts it sends it up

00:39:10,210 --> 00:39:13,270
to the stack and of course bad things

00:39:11,710 --> 00:39:15,910
happen because the stacks not expecting

00:39:13,270 --> 00:39:19,120
it to be decrypted and there are other

00:39:15,910 --> 00:39:21,520
problems related to that the way we

00:39:19,120 --> 00:39:27,220
propose getting around it is to inside

00:39:21,520 --> 00:39:29,820
the agents s Absa be addy have it also

00:39:27,220 --> 00:39:32,260
contain a local MAC address in one VLAN

00:39:29,820 --> 00:39:34,870
so that when a packet came in in the

00:39:32,260 --> 00:39:37,300
previous example it would hatch to that

00:39:34,870 --> 00:39:38,860
on the SA table see that it has one but

00:39:37,300 --> 00:39:41,770
then do the additional checks to say

00:39:38,860 --> 00:39:45,430
what MAC address is this destined for

00:39:41,770 --> 00:39:47,440
and what VLAN we only picked one VLAN

00:39:45,430 --> 00:39:51,460
because we are concerned specifically

00:39:47,440 --> 00:39:54,520
about VLAN or port VLAN where a VM could

00:39:51,460 --> 00:39:56,230
essentially be having a VLAN ID inserted

00:39:54,520 --> 00:39:57,970
for it and it wouldn't even know that so

00:39:56,230 --> 00:40:01,870
it couldn't no not it couldn't do the

00:39:57,970 --> 00:40:04,420
offload we currently were planning on

00:40:01,870 --> 00:40:06,250
just supporting one VLAN we could

00:40:04,420 --> 00:40:08,020
theoretically and the hardware do more

00:40:06,250 --> 00:40:09,760
but right now we thought we had allow

00:40:08,020 --> 00:40:12,220
that to be

00:40:09,760 --> 00:40:13,660
basically fall back in software so it's

00:40:12,220 --> 00:40:23,440
just a matter of sort of a trade-off

00:40:13,660 --> 00:40:29,080
with complexity in the agent yeah well

00:40:23,440 --> 00:40:32,620
for the for the VLAN IDs right we we

00:40:29,080 --> 00:40:33,970
have a bunch of basically whenever

00:40:32,620 --> 00:40:35,530
they're added they're going to have to

00:40:33,970 --> 00:40:37,510
go down and we'll have we have

00:40:35,530 --> 00:40:44,820
configuration commands that will set all

00:40:37,510 --> 00:40:44,820
this stuff up as as the reader know

00:40:57,430 --> 00:41:01,250
right

00:40:59,570 --> 00:41:09,440
so you almost think of it as we're

00:41:01,250 --> 00:41:12,020
extending the key yeah

00:41:09,440 --> 00:41:14,870
the and and Josh also mentioned

00:41:12,020 --> 00:41:17,120
abandoned si is an example somebody you

00:41:14,870 --> 00:41:19,640
know decides to destroy your VM in our

00:41:17,120 --> 00:41:21,380
case the agent then has these essays in

00:41:19,640 --> 00:41:24,730
it and it never gets a message telling

00:41:21,380 --> 00:41:26,930
it these essays aren't useful anymore

00:41:24,730 --> 00:41:28,190
and that can lead to all kinds of

00:41:26,930 --> 00:41:31,220
problems especially when you give that

00:41:28,190 --> 00:41:33,620
bf to some other VM there's agent essays

00:41:31,220 --> 00:41:35,960
that exist in the hard work for that the

00:41:33,620 --> 00:41:39,470
way we were planning on getting around

00:41:35,960 --> 00:41:42,440
that is we're gonna proxy all SAE ad and

00:41:39,470 --> 00:41:43,970
removes through the PF and that would be

00:41:42,440 --> 00:41:48,530
done in our case through a mailbox

00:41:43,970 --> 00:41:50,360
message from RPF driver to the PF the PF

00:41:48,530 --> 00:41:53,450
would create the configuration message

00:41:50,360 --> 00:41:55,520
and send it down to the agent but what

00:41:53,450 --> 00:41:56,960
the real advantage is that the PF would

00:41:55,520 --> 00:41:59,150
then be able to maintain its own

00:41:56,960 --> 00:42:03,230
database of all the essays that have

00:41:59,150 --> 00:42:07,070
been downloaded so that when in the case

00:42:03,230 --> 00:42:11,140
where something bad occurred like in

00:42:07,070 --> 00:42:15,890
this example where we have vm one with

00:42:11,140 --> 00:42:17,690
VF one has two offloaded essays it gets

00:42:15,890 --> 00:42:22,280
destroyed for some reason at some other

00:42:17,690 --> 00:42:23,720
point you assign the VF to a new vm one

00:42:22,280 --> 00:42:25,400
of the first things that happens is it

00:42:23,720 --> 00:42:27,410
sends a mailbox message down at the PF

00:42:25,400 --> 00:42:28,940
driver saying i need resources so i

00:42:27,410 --> 00:42:31,250
can't do anything until it gets these

00:42:28,940 --> 00:42:33,320
resources but at that time the PF driver

00:42:31,250 --> 00:42:36,680
could look through its database and say

00:42:33,320 --> 00:42:39,740
oh v f1 has two outstanding essays go

00:42:36,680 --> 00:42:42,050
ahead make configuration messages to go

00:42:39,740 --> 00:42:42,860
remove them from the agents and when

00:42:42,050 --> 00:42:45,800
that's finished

00:42:42,860 --> 00:42:49,220
only then supply the configuration of

00:42:45,800 --> 00:42:50,810
information the VF needs so essentially

00:42:49,220 --> 00:42:52,790
it would start off with a clean state

00:42:50,810 --> 00:42:56,780
there is no SAS for that VF at that

00:42:52,790 --> 00:42:59,120
point in some ways we were forced to do

00:42:56,780 --> 00:43:02,840
this because of limitations in our

00:42:59,120 --> 00:43:05,420
hardware or specifically the agent we

00:43:02,840 --> 00:43:06,830
initially wanted to have the agents

00:43:05,420 --> 00:43:08,620
since it's the one that knows all this

00:43:06,830 --> 00:43:12,760
information come down

00:43:08,620 --> 00:43:15,250
of where each essay came from but they

00:43:12,760 --> 00:43:17,230
were using existing IP and it was very

00:43:15,250 --> 00:43:19,420
painful for them to do it and like John

00:43:17,230 --> 00:43:21,850
man Josh mentioned the best they could

00:43:19,420 --> 00:43:25,300
do is delete everything for a given PF

00:43:21,850 --> 00:43:26,920
or a given port and so we needed some

00:43:25,300 --> 00:43:29,230
other software entity to keep that

00:43:26,920 --> 00:43:34,480
information and be able to clean up

00:43:29,230 --> 00:43:36,160
accordingly the other case we had to

00:43:34,480 --> 00:43:39,340
deal with which Josh also brought up a

00:43:36,160 --> 00:43:40,750
good point was malicious VFS you know

00:43:39,340 --> 00:43:42,010
we're communicating in the data plane

00:43:40,750 --> 00:43:44,260
and there's a real disadvantage that

00:43:42,010 --> 00:43:46,840
because anybody can create any packet

00:43:44,260 --> 00:43:49,530
they want and so theoretically you could

00:43:46,840 --> 00:43:51,790
have some V F it would just create some

00:43:49,530 --> 00:43:54,370
configuration message send it down and

00:43:51,790 --> 00:43:56,200
delete an essay do all kinds of bad

00:43:54,370 --> 00:43:57,730
stuff they could also insert metadata

00:43:56,200 --> 00:44:01,180
and their packets to ask them to be

00:43:57,730 --> 00:44:04,480
encrypted so the way we got around on

00:44:01,180 --> 00:44:06,760
this is we were we the model we have

00:44:04,480 --> 00:44:08,590
we're requiring that all the v FS be

00:44:06,760 --> 00:44:11,020
trusted so you have to turn on the

00:44:08,590 --> 00:44:14,740
trusted band and net in the net device

00:44:11,020 --> 00:44:18,370
in order to be an even capable of this

00:44:14,740 --> 00:44:21,310
offload and the way it works then is

00:44:18,370 --> 00:44:23,290
when the PF driver starts up and if the

00:44:21,310 --> 00:44:26,020
device isn't trusted it's going to

00:44:23,290 --> 00:44:27,400
insert automatic VLAN tagging kind of

00:44:26,020 --> 00:44:29,770
like I was saying about what not be LAN

00:44:27,400 --> 00:44:31,930
tagging but l2 tagging and it's going to

00:44:29,770 --> 00:44:34,750
insert our metadata tag that we already

00:44:31,930 --> 00:44:37,030
use for our other traffic flows but the

00:44:34,750 --> 00:44:40,360
one difference is the first bit which

00:44:37,030 --> 00:44:42,550
says do do an offload on this packet

00:44:40,360 --> 00:44:44,980
which is almost was always set for our

00:44:42,550 --> 00:44:47,470
other metadata is now zero and so that

00:44:44,980 --> 00:44:49,420
tells the agent when it parses out that

00:44:47,470 --> 00:44:51,250
header removes it like it's going to do

00:44:49,420 --> 00:44:54,850
anyway don't do anything else with this

00:44:51,250 --> 00:44:57,820
packet just pass it through and so the

00:44:54,850 --> 00:44:59,230
malicious bf can do whatever it wants

00:44:57,820 --> 00:45:02,430
and it'll just be dumping down the line

00:44:59,230 --> 00:45:04,750
like it would normally through fourth oh

00:45:02,430 --> 00:45:08,010
there's some disadvantages we're adding

00:45:04,750 --> 00:45:10,330
this 32-bit ml to header on all of our

00:45:08,010 --> 00:45:12,570
untrusted bakit of the apps at that

00:45:10,330 --> 00:45:12,570
point

00:45:12,890 --> 00:45:20,089
and the next the next one we were

00:45:17,549 --> 00:45:23,280
running into was east-west traffic and

00:45:20,089 --> 00:45:27,230
this of course can be an issue if the

00:45:23,280 --> 00:45:29,730
hardware's it has a vbe and it's then

00:45:27,230 --> 00:45:32,099
redirecting local traffic and not going

00:45:29,730 --> 00:45:33,869
through our agent because like the

00:45:32,099 --> 00:45:35,789
diagram we had earlier you can see it

00:45:33,869 --> 00:45:36,900
sits underneath the fork bail so if you

00:45:35,789 --> 00:45:42,180
don't get in there you don't get the

00:45:36,900 --> 00:45:44,039
offload so at first our gut reaction was

00:45:42,180 --> 00:45:45,150
we'll just go into VP mode and well that

00:45:44,039 --> 00:45:46,470
way everything will be routed through

00:45:45,150 --> 00:45:48,990
the agent it'll go down to the switch

00:45:46,470 --> 00:45:50,700
you'll hairpin and come back up but then

00:45:48,990 --> 00:45:52,200
our architects informed us that not

00:45:50,700 --> 00:45:55,020
everybody's top of rocks which can

00:45:52,200 --> 00:45:57,869
support beep a mode and so we need to

00:45:55,020 --> 00:46:01,829
find a way around that and so our

00:45:57,869 --> 00:46:05,819
proposal was to put have another agent

00:46:01,829 --> 00:46:08,190
essentially that's a VB hairpin and so

00:46:05,819 --> 00:46:10,740
the idea there being is that we would

00:46:08,190 --> 00:46:12,299
leave the fort fell in VP mode but

00:46:10,740 --> 00:46:14,730
traffic would go down through the

00:46:12,299 --> 00:46:15,630
encrypted engine as if it was offloaded

00:46:14,730 --> 00:46:18,599
as normal

00:46:15,630 --> 00:46:21,990
hit the VB hairpin which would know

00:46:18,599 --> 00:46:24,569
about all the local devices and then

00:46:21,990 --> 00:46:26,849
hairpin those that are and then it would

00:46:24,569 --> 00:46:29,430
go through the decrypt engine is normal

00:46:26,849 --> 00:46:31,020
of course this just like you said

00:46:29,430 --> 00:46:34,200
earlier we need a method in order to

00:46:31,020 --> 00:46:36,059
tell every time a new address is added

00:46:34,200 --> 00:46:39,510
it needs to be reported down to that

00:46:36,059 --> 00:46:41,520
hairpin and every times once removes the

00:46:39,510 --> 00:46:43,319
same but once again they it makes a

00:46:41,520 --> 00:46:45,779
little it's not as daunting as you would

00:46:43,319 --> 00:46:47,640
think initially because it's not full VB

00:46:45,779 --> 00:46:49,589
functionality because Portville is still

00:46:47,640 --> 00:46:52,319
doing all the routing all we're doing is

00:46:49,589 --> 00:46:54,170
saying oh this needs to go back so it

00:46:52,319 --> 00:46:57,210
makes it a little simpler in that room

00:46:54,170 --> 00:46:59,250
mechanism so those were the problems

00:46:57,210 --> 00:47:03,180
that we discovered and like Josh said we

00:46:59,250 --> 00:47:04,799
haven't we don't have the our agent

00:47:03,180 --> 00:47:08,490
isn't smart enough yet it we should get

00:47:04,799 --> 00:47:10,020
the first drop Oh about the beginning of

00:47:08,490 --> 00:47:12,960
December where we can start playing

00:47:10,020 --> 00:47:14,670
around with some of this stuff and even

00:47:12,960 --> 00:47:17,010
then it still doesn't have full

00:47:14,670 --> 00:47:19,829
virtualization functionality until later

00:47:17,010 --> 00:47:23,170
but we wanted a chance to kind of

00:47:19,829 --> 00:47:24,760
present all this and see if people could

00:47:23,170 --> 00:47:29,130
really nasty holes in it and then we

00:47:24,760 --> 00:47:32,109
have to go look at it again and that was

00:47:29,130 --> 00:47:33,520
all the stuff we had to hide in it right

00:47:32,109 --> 00:47:38,230
up I was gonna write up an additional

00:47:33,520 --> 00:47:41,859
slide set to talk about instead of doing

00:47:38,230 --> 00:47:43,030
host terminated device terminated but I

00:47:41,859 --> 00:47:45,520
think that would be better in just a

00:47:43,030 --> 00:47:47,260
general discussion because I'm I'm

00:47:45,520 --> 00:47:48,609
really sort of answering questions and

00:47:47,260 --> 00:47:49,960
Anjali it'd be probably much better to

00:47:48,609 --> 00:47:56,010
be involved in that as well

00:47:49,960 --> 00:47:56,010
so any questions in general yeah

00:48:04,230 --> 00:48:08,520
I'm sorry what yeah go ahead

00:48:11,160 --> 00:48:20,070
oh yeah the question was what motivated

00:48:18,120 --> 00:48:23,030
to not have a separate driver for the

00:48:20,070 --> 00:48:26,149
control for that for the agent right

00:48:23,030 --> 00:48:26,149
[Music]

00:48:31,340 --> 00:48:37,500
right so the the reason is basically

00:48:35,430 --> 00:48:39,150
avoiding two right two different drivers

00:48:37,500 --> 00:48:41,550
and you know coordinating with that

00:48:39,150 --> 00:48:44,220
between them like if we would expose a

00:48:41,550 --> 00:48:46,050
separate PCIe device for the agent then

00:48:44,220 --> 00:48:48,150
it becomes a coordination issue and

00:48:46,050 --> 00:48:51,390
having it right underneath and be

00:48:48,150 --> 00:48:54,870
controlled by your main Mac is you know

00:48:51,390 --> 00:48:59,790
you kind of get a consistent you know

00:48:54,870 --> 00:49:01,770
way of controlling that agent yes it

00:48:59,790 --> 00:49:03,240
comes with a limitation of how you talk

00:49:01,770 --> 00:49:06,750
to the agent and that's why we had to

00:49:03,240 --> 00:49:09,540
come up with nifty ways but coordinating

00:49:06,750 --> 00:49:17,580
between two PCI devices to achieve data

00:49:09,540 --> 00:49:19,620
flow is harder the agent and then

00:49:17,580 --> 00:49:21,630
eventually the hardware to is if you put

00:49:19,620 --> 00:49:23,340
the agent on the PCIe bus you have to

00:49:21,630 --> 00:49:26,790
have switched all that stuff it costs

00:49:23,340 --> 00:49:29,510
more takes more electricity things of

00:49:26,790 --> 00:49:29,510
that nature so

00:49:35,820 --> 00:49:48,400
right right and really remember this is

00:49:45,550 --> 00:49:51,070
through portfolio SEC at all so this is

00:49:48,400 --> 00:49:52,600
being added after the fact on a piece of

00:49:51,070 --> 00:49:54,910
silicon that doesn't know what's going

00:49:52,600 --> 00:49:56,470
on and part of the trick we were doing

00:49:54,910 --> 00:49:58,690
is finding ways to put packets through

00:49:56,470 --> 00:50:00,850
fourth though so it wouldn't modify it

00:49:58,690 --> 00:50:03,550
wouldn't do things to them or if it did

00:50:00,850 --> 00:50:10,170
things to I'm like in you know T so we'd

00:50:03,550 --> 00:50:15,760
know what how to work around that yeah

00:50:10,170 --> 00:50:17,410
yes yeah and we actually have some extra

00:50:15,760 --> 00:50:18,880
sides we could talk and share with you

00:50:17,410 --> 00:50:21,430
about how we're doing that in more

00:50:18,880 --> 00:50:22,870
detail and that's why we don't have

00:50:21,430 --> 00:50:25,510
performance numbers either like Shannon

00:50:22,870 --> 00:50:37,470
is currently it doesn't so it's a set of

00:50:25,510 --> 00:50:37,470
a mute point yes

00:50:44,220 --> 00:50:48,020
I think that's a loaded question I know

00:50:45,810 --> 00:50:50,760
that you say yes so mean he said she

00:50:48,020 --> 00:50:52,440
definitely projected that this was the

00:50:50,760 --> 00:50:53,790
reason and there was some reason some of

00:50:52,440 --> 00:50:56,820
the reasons for that actually came down

00:50:53,790 --> 00:50:58,980
to our initial customer we were looking

00:50:56,820 --> 00:51:00,450
at for this and and kind of get an idea

00:50:58,980 --> 00:51:02,430
of the functionality they wanted they

00:51:00,450 --> 00:51:05,340
wanted to have a central pool of essays

00:51:02,430 --> 00:51:06,960
and didn't want them aligned to

00:51:05,340 --> 00:51:09,990
individual different domains so you

00:51:06,960 --> 00:51:12,330
wouldn't say you know you have 20,000

00:51:09,990 --> 00:51:15,060
essays and I'm gonna give you this VF a

00:51:12,330 --> 00:51:16,680
thousand she wanted just an entire pool

00:51:15,060 --> 00:51:18,480
and you pull them until they're empty

00:51:16,680 --> 00:51:19,980
and if you do that by definition you

00:51:18,480 --> 00:51:22,200
need to be trusted because someone could

00:51:19,980 --> 00:51:30,840
steal all your essays never relieved

00:51:22,200 --> 00:51:32,070
Lisa yeah and and so that was the

00:51:30,840 --> 00:51:35,160
beginning and then there are other

00:51:32,070 --> 00:51:36,990
issues we ran into you that a lot of if

00:51:35,160 --> 00:51:40,260
we were to do untrusted what we need to

00:51:36,990 --> 00:51:41,820
do is tag every inside every packet we

00:51:40,260 --> 00:51:44,430
have to put metadata so that you can

00:51:41,820 --> 00:51:45,690
identify where it came in from so that

00:51:44,430 --> 00:51:53,850
the agent could make those kind of

00:51:45,690 --> 00:51:55,440
decisions so in this case when you're

00:51:53,850 --> 00:51:57,510
programming the essay you're actually

00:51:55,440 --> 00:51:58,800
programming it from the VM and asking

00:51:57,510 --> 00:52:00,720
the PF to program it so you have to

00:51:58,800 --> 00:52:04,140
trust your infrastructure which may not

00:52:00,720 --> 00:52:06,840
be true in a lot of cases so yeah I mean

00:52:04,140 --> 00:52:09,240
those are the things that we are you

00:52:06,840 --> 00:52:11,520
know looking into as we go forward that

00:52:09,240 --> 00:52:13,320
there are in the cloud environment where

00:52:11,520 --> 00:52:20,130
you in you cannot really trust your

00:52:13,320 --> 00:52:22,560
infrastructure for things proxying all

00:52:20,130 --> 00:52:24,120
of the essay ads through the PF you

00:52:22,560 --> 00:52:27,180
could say well if you're seeing the raw

00:52:24,120 --> 00:52:28,740
open ads you have the keys so you that

00:52:27,180 --> 00:52:30,750
PF could essentially save all the keys

00:52:28,740 --> 00:52:32,580
and do something nasty with them and and

00:52:30,750 --> 00:52:34,620
we thought about ways of around that

00:52:32,580 --> 00:52:37,440
essentially encrypting between the VF

00:52:34,620 --> 00:52:39,450
and the agent but it kind of came back

00:52:37,440 --> 00:52:41,790
to what Anjali said this is an emulator

00:52:39,450 --> 00:52:44,490
environment if you don't trust the

00:52:41,790 --> 00:52:47,740
hardware or anything beneath you you

00:52:44,490 --> 00:53:11,260
probably should do it in software so

00:52:47,740 --> 00:53:12,520
yeah yes essentially there's you know I

00:53:11,260 --> 00:53:14,740
mean this is in the raw if the

00:53:12,520 --> 00:53:16,390
configuration message comes down the way

00:53:14,740 --> 00:53:18,820
we're doing it is that if you had a

00:53:16,390 --> 00:53:20,530
trusted VF you could essentially put a

00:53:18,820 --> 00:53:22,839
malicious driver on there and do bad

00:53:20,530 --> 00:53:25,770
things you could write your own

00:53:22,839 --> 00:53:25,770
configuration information

00:53:46,250 --> 00:53:49,440
[Music]

00:54:00,800 --> 00:54:03,800
wait

00:54:18,720 --> 00:54:38,890
but this is kind of you could accept

00:54:35,500 --> 00:54:41,080
once again it could configure it could

00:54:38,890 --> 00:54:43,600
verify everything coming down through

00:54:41,080 --> 00:54:45,400
the mailbox message where we create the

00:54:43,600 --> 00:54:47,710
configuration messages but what would

00:54:45,400 --> 00:54:48,970
stop one of those VMs to open up a raw

00:54:47,710 --> 00:54:51,010
socket and create a configuration

00:54:48,970 --> 00:54:52,570
message that goes directly through fort

00:54:51,010 --> 00:54:54,280
bill because it doesn't it looks like a

00:54:52,570 --> 00:54:56,170
normal l2 packet it doesn't do any

00:54:54,280 --> 00:54:57,670
special processing for and then goes

00:54:56,170 --> 00:54:59,050
directly to the agent and it doesn't

00:54:57,670 --> 00:55:04,050
know where it was it came from

00:54:59,050 --> 00:55:04,050
necessarily that that's where are you oh

00:55:06,840 --> 00:55:10,770
that time that

00:55:16,080 --> 00:55:22,420
I bet the issue with that is that it's

00:55:20,440 --> 00:55:24,840
global across the device so if we were

00:55:22,420 --> 00:55:27,340
to stop that we could stop that

00:55:24,840 --> 00:55:29,320
configuration tag but then the metadata

00:55:27,340 --> 00:55:30,820
tags we need in order to get the

00:55:29,320 --> 00:55:33,310
goodness over the fork ville

00:55:30,820 --> 00:55:34,720
automatically adding the l2 head tags so

00:55:33,310 --> 00:55:37,210
we don't have to do any copies remove

00:55:34,720 --> 00:55:40,510
the hardware does all that if once we

00:55:37,210 --> 00:55:42,520
enable that back to block those l2 from

00:55:40,510 --> 00:55:44,500
the VFS we're also disabling their

00:55:42,520 --> 00:55:49,030
ability to dynamically all these add

00:55:44,500 --> 00:55:51,130
these l2 tags what well the VF needs to

00:55:49,030 --> 00:55:53,800
do that for its metadata did you see

00:55:51,130 --> 00:55:55,270
what I mean yeah and in weekend I'd be

00:55:53,800 --> 00:55:57,670
interested to talk about them more too

00:55:55,270 --> 00:56:05,010
if you'd like to again am i eating way

00:55:57,670 --> 00:56:05,010
up too much time okay

00:56:08,650 --> 00:56:31,640
yes yes I don't know how much I can go

00:56:26,930 --> 00:56:34,789
into details but yeah yeah yeah the

00:56:31,640 --> 00:56:36,650
answer is yes I can honestly say that

00:56:34,789 --> 00:56:42,109
every chip after this is going to be

00:56:36,650 --> 00:56:43,430
more IPSec friendly and it yeah we're

00:56:42,109 --> 00:56:47,109
crypto proned that's even a better way

00:56:43,430 --> 00:56:47,109
to put it so

00:56:50,309 --> 00:57:00,369
thanks a lot okay

00:56:52,180 --> 00:57:03,369
thanks Donna Josh hi everyone so this is

00:57:00,369 --> 00:57:05,289
an IPSec update from Mellanox we're

00:57:03,369 --> 00:57:08,859
going to discuss the recent features

00:57:05,289 --> 00:57:11,970
that we've been working on PSN support

00:57:08,859 --> 00:57:14,650
is the first trail removal villain

00:57:11,970 --> 00:57:17,589
encapsulation a small performance update

00:57:14,650 --> 00:57:20,260
and the future which is in our opinion

00:57:17,589 --> 00:57:24,309
full of flows and it's related to

00:57:20,260 --> 00:57:25,980
virtualization as well so would you

00:57:24,309 --> 00:57:28,480
assign I'm going to start really slow

00:57:25,980 --> 00:57:29,529
there's a problem with sequence numbers

00:57:28,480 --> 00:57:32,230
in IPSec

00:57:29,529 --> 00:57:35,170
with the high connection speed numbers

00:57:32,230 --> 00:57:40,029
are depleted really quickly so for

00:57:35,170 --> 00:57:43,930
example using minimal IPSec ipv4 packets

00:57:40,029 --> 00:57:48,490
each packet is 90 bytes and so many on

00:57:43,930 --> 00:57:51,970
link speed is 40 gigabits per second we

00:57:48,490 --> 00:57:54,339
are going to deplete two to the 25 of

00:57:51,970 --> 00:57:57,069
the sequence number space each second

00:57:54,339 --> 00:58:00,369
which means that in about two minutes

00:57:57,069 --> 00:58:05,079
you need to renegotiate your security

00:58:00,369 --> 00:58:08,079
associations which is which the great

00:58:05,079 --> 00:58:12,009
performance in it's quite bad so even

00:58:08,079 --> 00:58:14,740
there see as mentioned is that you might

00:58:12,009 --> 00:58:16,299
be sick you should use extended sequence

00:58:14,740 --> 00:58:23,140
numbers if you have a fast connection

00:58:16,299 --> 00:58:26,619
speed so how do we overcome this so yes

00:58:23,140 --> 00:58:28,450
and what it means is essentially that in

00:58:26,619 --> 00:58:30,819
IPSec packets you have the sequence

00:58:28,450 --> 00:58:34,660
number which is 32 bits and the SN means

00:58:30,819 --> 00:58:37,390
that you add an additional 32 bits which

00:58:34,660 --> 00:58:40,450
is out-of-band it's maintained with each

00:58:37,390 --> 00:58:43,390
security Association and it's it doesn't

00:58:40,450 --> 00:58:44,970
appear in the packet itself so it will

00:58:43,390 --> 00:58:48,460
reduce the number of

00:58:44,970 --> 00:58:51,759
renegotiations that's required in each

00:58:48,460 --> 00:58:53,769
security Association and how do we solve

00:58:51,759 --> 00:58:57,039
that in the hardware offload without

00:58:53,769 --> 00:58:59,529
becoming stateful statefulness is bad

00:58:57,039 --> 00:59:01,990
for hardware and it's also much more

00:58:59,529 --> 00:59:02,370
complicated to implement in software as

00:59:01,990 --> 00:59:04,830
well

00:59:02,370 --> 00:59:07,290
so for the sin side we actually can

00:59:04,830 --> 00:59:09,000
implement this quite easily the way that

00:59:07,290 --> 00:59:12,540
we are going to do it in Mal Knox but

00:59:09,000 --> 00:59:17,160
probably other ways is to use the IV the

00:59:12,540 --> 00:59:20,850
IV is generated anyhow in hardware in

00:59:17,160 --> 00:59:23,190
most of cover the flaws we have on

00:59:20,850 --> 00:59:24,870
transmission so the way that we do it in

00:59:23,190 --> 00:59:27,600
the Sun side is that we simply provide

00:59:24,870 --> 00:59:30,090
the extended security we extended

00:59:27,600 --> 00:59:33,510
sequence number in in the IV field and

00:59:30,090 --> 00:59:36,480
it's going to be used by hardware to

00:59:33,510 --> 00:59:42,060
calculate the the encryption and

00:59:36,480 --> 00:59:45,060
authentication correctly this this is

00:59:42,060 --> 00:59:47,790
just works simple there's nothing

00:59:45,060 --> 00:59:49,410
actually complicated Linux uses the

00:59:47,790 --> 00:59:53,550
extended sequence number to generate the

00:59:49,410 --> 00:59:57,270
correct IV eventually so it's just the

00:59:53,550 --> 01:00:01,950
same flow the receive side is actually

00:59:57,270 --> 01:00:03,630
more complicated what we thought

01:00:01,950 --> 01:00:05,520
initially that we would need something

01:00:03,630 --> 01:00:08,460
really stateful but eventually we came

01:00:05,520 --> 01:00:10,980
up with something that is stateless the

01:00:08,460 --> 01:00:14,880
way that it works is that software would

01:00:10,980 --> 01:00:17,160
update hardware periodically and with

01:00:14,880 --> 01:00:19,170
the way I think of it which makes it

01:00:17,160 --> 01:00:23,220
easier for me to to think about it is

01:00:19,170 --> 01:00:27,120
that if you think about a replay window

01:00:23,220 --> 01:00:28,740
a window of to the to the 32 bits that

01:00:27,120 --> 01:00:31,290
is moving with the sequence numbers

01:00:28,740 --> 01:00:33,300
regardless of of the actual group the

01:00:31,290 --> 01:00:36,900
window just think about the total 32

01:00:33,300 --> 01:00:40,710
window then the way ESL works is that

01:00:36,900 --> 01:00:42,690
you need for each incoming packet you

01:00:40,710 --> 01:00:45,660
need to use the extended sequence number

01:00:42,690 --> 01:00:50,220
according to 252 window that is moving

01:00:45,660 --> 01:00:53,490
so if if we use the slide here assume

01:00:50,220 --> 01:00:56,250
that we are in this first ESN window we

01:00:53,490 --> 01:01:00,060
know that we need to use this GSN one as

01:00:56,250 --> 01:01:02,370
long as we are in this window but if we

01:01:00,060 --> 01:01:04,410
look at each half of this window so

01:01:02,370 --> 01:01:06,780
let's say we start from here and we

01:01:04,410 --> 01:01:11,010
start receiving packets we always use SN

01:01:06,780 --> 01:01:12,750
1 and this is true as long as the replay

01:01:11,010 --> 01:01:15,150
window the replay window is eventually

01:01:12,750 --> 01:01:19,260
much smaller than to the first

01:01:15,150 --> 01:01:21,600
I don't know say the maximum is 256 I

01:01:19,260 --> 01:01:24,030
think it's a free play window so it's

01:01:21,600 --> 01:01:27,260
somewhere here and it starts moving so

01:01:24,030 --> 01:01:30,150
it's going to use yes and one always and

01:01:27,260 --> 01:01:32,280
even if it's the biggest replay window

01:01:30,150 --> 01:01:34,650
that's allowed by the RFC which is two

01:01:32,280 --> 01:01:37,290
to the thirty one so it's half a window

01:01:34,650 --> 01:01:40,140
okay let's the maximum that's allowed by

01:01:37,290 --> 01:01:42,630
the spec so let's think about the

01:01:40,140 --> 01:01:44,970
maximum theoretical window not the Linux

01:01:42,630 --> 01:01:46,890
window so it's half a window and we have

01:01:44,970 --> 01:01:48,960
it here and it's going to use the same

01:01:46,890 --> 01:01:52,950
ESN as long as it doesn't cross the

01:01:48,960 --> 01:01:54,870
middle the replay window so we're going

01:01:52,950 --> 01:01:57,420
to use this and one as long as we don't

01:01:54,870 --> 01:01:59,970
hit this point here once we hit this

01:01:57,420 --> 01:02:03,990
point we ask software to update hardware

01:01:59,970 --> 01:02:06,390
to say okay you are sn1 and possibly you

01:02:03,990 --> 01:02:08,400
are going to have sn2 how do you know

01:02:06,390 --> 01:02:10,290
that it depends on the sequence number

01:02:08,400 --> 01:02:13,320
you are receiving from the packet so

01:02:10,290 --> 01:02:15,900
after the replay window is completely in

01:02:13,320 --> 01:02:18,020
this part so if it's two to the 41 it's

01:02:15,900 --> 01:02:20,550
somewhere either here or somewhere here

01:02:18,020 --> 01:02:22,710
so if you get a small sequence number

01:02:20,550 --> 01:02:28,200
you you are essentially saying that it's

01:02:22,710 --> 01:02:31,980
sn2 so by updating each half window you

01:02:28,200 --> 01:02:34,590
can know which is sent to use according

01:02:31,980 --> 01:02:37,560
to the packet that it's received so here

01:02:34,590 --> 01:02:41,250
it's going to be always the sn1 still

01:02:37,560 --> 01:02:43,200
yes n-1 yes and one possibly sn2 in the

01:02:41,250 --> 01:02:45,890
update already happened here and update

01:02:43,200 --> 01:02:48,780
happened sometime in this window you

01:02:45,890 --> 01:02:52,200
hardware software here please update

01:02:48,780 --> 01:02:54,060
once one software sees this it updates

01:02:52,200 --> 01:02:56,070
but her hardware window keeps moving it

01:02:54,060 --> 01:02:58,260
moves it moves and some time over here

01:02:56,070 --> 01:03:00,240
it's going to be updated and when you

01:02:58,260 --> 01:03:01,860
start already receiving this packet it

01:03:00,240 --> 01:03:03,720
surely has been updated you do you

01:03:01,860 --> 01:03:07,220
haven't received two to the 31 packets

01:03:03,720 --> 01:03:09,660
so if you think about it it just makes

01:03:07,220 --> 01:03:12,570
sense and it works and there are other

01:03:09,660 --> 01:03:14,670
ways to do it it's just one example I'm

01:03:12,570 --> 01:03:18,290
sure everybody would have figured it out

01:03:14,670 --> 01:03:20,640
if - some time thought into this

01:03:18,290 --> 01:03:22,880
you look complex Stefan what do you

01:03:20,640 --> 01:03:22,880
think

01:03:26,510 --> 01:03:31,800
you don't want to maintain the Ripley

01:03:28,890 --> 01:03:33,450
window essentially here so this is how

01:03:31,800 --> 01:03:35,790
you do it without any state you just

01:03:33,450 --> 01:03:39,440
look at the packet you know the state of

01:03:35,790 --> 01:03:45,180
which SN is it yes n 1 or e SN 1 and 1/2

01:03:39,440 --> 01:03:47,609
and you know what to do no nothing you

01:03:45,180 --> 01:03:49,710
just need the update this I don't know

01:03:47,609 --> 01:03:52,920
how to call it head and the head place

01:03:49,710 --> 01:03:54,510
su you send an update the way we suggest

01:03:52,920 --> 01:03:56,550
to implement it is have the really

01:03:54,510 --> 01:03:58,500
protection call called the driver and

01:03:56,550 --> 01:04:00,960
the driver in these packets it would

01:03:58,500 --> 01:04:01,349
just call the hardware say update and it

01:04:00,960 --> 01:04:05,599
works

01:04:01,349 --> 01:04:05,599
we have patches will probably send some

01:04:07,069 --> 01:04:16,650
so this is how you do you send in

01:04:11,369 --> 01:04:19,290
stateless manner our trailer removals so

01:04:16,650 --> 01:04:21,720
something we have noticed with some

01:04:19,290 --> 01:04:24,420
tests that we get 10% performance

01:04:21,720 --> 01:04:27,109
improvement if we remove the the trailer

01:04:24,420 --> 01:04:30,900
from IPSec packets on the receive side

01:04:27,109 --> 01:04:35,099
we been able to go from 23 gigabits per

01:04:30,900 --> 01:04:39,599
second 25 we will really surprised that

01:04:35,099 --> 01:04:42,359
it was so significant the the reason was

01:04:39,599 --> 01:04:47,280
that it save some cash line pollution by

01:04:42,359 --> 01:04:49,170
reading the trailer and trailer and the

01:04:47,280 --> 01:04:51,630
only thing that's required is the next

01:04:49,170 --> 01:04:55,500
header field in the extra firm afloat

01:04:51,630 --> 01:04:58,020
structure one drawback is that TCP dump

01:04:55,500 --> 01:05:02,339
will never see the trailer not sure if

01:04:58,020 --> 01:05:04,890
it's that significant well previously

01:05:02,339 --> 01:05:08,520
it's usually has seen them maybe after

01:05:04,890 --> 01:05:14,339
Giro we didn't yeah but before Jo had

01:05:08,520 --> 01:05:16,920
the trailers of rip ok so encapsulations

01:05:14,339 --> 01:05:19,020
inside and observations is is what we

01:05:16,920 --> 01:05:22,890
get once we start doing something like

01:05:19,020 --> 01:05:25,980
this like weeks on ESP TCP jury ESP TCP

01:05:22,890 --> 01:05:30,630
villain ESP TCP is is not example but

01:05:25,980 --> 01:05:33,359
simpler than this ones what we suggest

01:05:30,630 --> 01:05:36,270
is and we have patches for villains for

01:05:33,359 --> 01:05:38,790
this is that we advertise script off

01:05:36,270 --> 01:05:42,060
the overlay device so if you have say

01:05:38,790 --> 01:05:46,320
villain device like a villain one at

01:05:42,060 --> 01:05:47,790
eth0 then your advertised offload on

01:05:46,320 --> 01:05:50,010
this device

01:05:47,790 --> 01:05:52,260
and then the upper device would call the

01:05:50,010 --> 01:05:54,390
lower device from offload and say I am a

01:05:52,260 --> 01:05:57,720
villain device please try to offload

01:05:54,390 --> 01:06:00,930
this can you do it and eventually the

01:05:57,720 --> 01:06:11,070
physical device would either say yes or

01:06:00,930 --> 01:06:12,870
no yes yes so all this is that ESP

01:06:11,070 --> 01:06:16,230
encrypts the payload that's behind it

01:06:12,870 --> 01:06:20,640
and vixen is just normal villain like

01:06:16,230 --> 01:06:23,130
you've suggested villain is simpler

01:06:20,640 --> 01:06:24,600
because it doesn't have outer IPS so

01:06:23,130 --> 01:06:27,780
when you get double encapsulation

01:06:24,600 --> 01:06:29,930
something that's not really well-defined

01:06:27,780 --> 01:06:32,970
how it looks like in Linux you would

01:06:29,930 --> 01:06:35,880
it's unclear for example what does the

01:06:32,970 --> 01:06:38,490
email headers point to and what's the

01:06:35,880 --> 01:06:39,780
outer so these are some of the

01:06:38,490 --> 01:06:42,900
challenges that we are thinking about

01:06:39,780 --> 01:06:46,710
how we're not sure yet how to address

01:06:42,900 --> 01:06:48,630
them so if you have any ideas except the

01:06:46,710 --> 01:06:54,750
overall infrastructure any comments

01:06:48,630 --> 01:06:57,360
please know say you don't do like today

01:06:54,750 --> 01:06:59,460
you have the external with TSO say you

01:06:57,360 --> 01:07:03,740
you want the extent with IPSec offload

01:06:59,460 --> 01:07:03,740
an TSO like something crazy like that

01:07:04,730 --> 01:07:09,870
okay a small performance update so what

01:07:07,470 --> 01:07:12,780
we have here is single stream in a

01:07:09,870 --> 01:07:17,550
unidirectional TCP measured using net

01:07:12,780 --> 01:07:22,140
path with an IPSec tunnel with 256-bit

01:07:17,550 --> 01:07:27,150
keys as GCM on a you know IPSec it's 40

01:07:22,140 --> 01:07:32,220
gigabit NIC and the message size is the

01:07:27,150 --> 01:07:33,660
size that you call your Cisco with so

01:07:32,220 --> 01:07:39,960
starting from small message size

01:07:33,660 --> 01:07:43,040
increasing to 16 K as we see the single

01:07:39,960 --> 01:07:45,510
stream is being saturated

01:07:43,040 --> 01:07:48,930
here it's not saturated it reaches the

01:07:45,510 --> 01:07:56,430
limit 25 Jakob it's already at maximum

01:07:48,930 --> 01:08:00,300
two packets 15 K so this is currently

01:07:56,430 --> 01:08:04,140
our maximum performance the bottleneck

01:08:00,300 --> 01:08:05,730
is is received side so this is the

01:08:04,140 --> 01:08:08,310
reason we are considering improvements

01:08:05,730 --> 01:08:11,040
to shift side for instance T your opus

01:08:08,310 --> 01:08:13,350
patches that Yosef suggested we have

01:08:11,040 --> 01:08:16,620
work to do there but I really hope we

01:08:13,350 --> 01:08:20,550
could improve further and maybe reach

01:08:16,620 --> 01:08:25,650
full line rate for 40 gigabits using a

01:08:20,550 --> 01:08:30,750
single stream but we still have a long

01:08:25,650 --> 01:08:33,450
road ahead so full of load we intend to

01:08:30,750 --> 01:08:36,540
support it in you know Isaac it's going

01:08:33,450 --> 01:08:38,850
to be called connecting six selects the

01:08:36,540 --> 01:08:40,890
all kinds of requirements that are

01:08:38,850 --> 01:08:42,750
required to move from what we have now

01:08:40,890 --> 01:08:46,770
which is in a sense partial offload to a

01:08:42,750 --> 01:08:50,220
full offload ESPN Cup the Cup replay

01:08:46,770 --> 01:08:54,900
protection and I an IPSec policies only

01:08:50,220 --> 01:08:58,320
to be expressed and somehow applied by

01:08:54,900 --> 01:09:00,900
by hardware there are lots of benefits

01:08:58,320 --> 01:09:02,430
of this what we mean here in necessary

01:09:00,900 --> 01:09:05,280
of V is that the hypervisor can

01:09:02,430 --> 01:09:07,530
configure the DI piece of clothes unlike

01:09:05,280 --> 01:09:08,640
the previous presentation where you were

01:09:07,530 --> 01:09:11,310
discussing virtualization but

01:09:08,640 --> 01:09:13,080
essentially the VM was configuring the

01:09:11,310 --> 01:09:14,550
de sécurité associations and everything

01:09:13,080 --> 01:09:17,790
in here was just the hypervisor

01:09:14,550 --> 01:09:19,350
everything in the virtual machine it

01:09:17,790 --> 01:09:21,720
doesn't know that there's IPSec being

01:09:19,350 --> 01:09:24,420
applied similar to what you have in say

01:09:21,720 --> 01:09:27,830
para para virtual set up where the

01:09:24,420 --> 01:09:32,040
hypervisor or the host machine provides

01:09:27,830 --> 01:09:37,800
IPSec so this something we call unaware

01:09:32,040 --> 01:09:39,300
IPSec the other benefits such as RSS

01:09:37,800 --> 01:09:41,460
according to in your fields if you

01:09:39,300 --> 01:09:42,930
remove the IP second tile in Hardware

01:09:41,460 --> 01:09:46,800
you get our set according to interface

01:09:42,930 --> 01:09:52,080
which is more scalable you you get lro

01:09:46,800 --> 01:09:54,810
for TCP yes key ESPN capsulation of with

01:09:52,080 --> 01:09:55,980
any other supported encapsulation which

01:09:54,810 --> 01:09:57,000
is something we've mentioned in the

01:09:55,980 --> 01:09:59,969
previous

01:09:57,000 --> 01:10:06,360
but here in the realizations case which

01:09:59,969 --> 01:10:09,179
is usually more common for the control

01:10:06,360 --> 01:10:11,429
puffs who think that what we need the

01:10:09,179 --> 01:10:14,610
the most essential thing is the security

01:10:11,429 --> 01:10:17,790
policy add and delete in in addition to

01:10:14,610 --> 01:10:21,390
the security Association this is needed

01:10:17,790 --> 01:10:23,719
to tell hardware which packets are going

01:10:21,390 --> 01:10:26,969
to be used for executive session

01:10:23,719 --> 01:10:30,270
something previously you wouldn't need

01:10:26,969 --> 01:10:34,230
to do so we probably would extend the IP

01:10:30,270 --> 01:10:36,600
route to to add that and then the drive

01:10:34,230 --> 01:10:41,370
will need to bind the security

01:10:36,600 --> 01:10:43,469
Association security policy and once the

01:10:41,370 --> 01:10:47,940
security Association is added after the

01:10:43,469 --> 01:10:49,199
policy has been created initially not

01:10:47,940 --> 01:10:52,080
sure if we would need anything else

01:10:49,199 --> 01:10:55,130
since we didn't really start

01:10:52,080 --> 01:10:55,130
implementation yet

01:11:02,140 --> 01:11:07,190
well it shouldn't matter it could be

01:11:04,610 --> 01:11:08,530
done like live like while you're doing

01:11:07,190 --> 01:11:11,950
it

01:11:08,530 --> 01:11:15,260
essentially the hypervisor could catch

01:11:11,950 --> 01:11:17,090
say the packet but it's going out from

01:11:15,260 --> 01:11:18,680
the VM go to the hyper provides a

01:11:17,090 --> 01:11:22,300
configure security Association does

01:11:18,680 --> 01:11:22,300
everything and then traffic continues

01:11:23,860 --> 01:11:29,600
for data path we have a few exceptions

01:11:26,540 --> 01:11:31,460
for instance IP fragments are going to

01:11:29,600 --> 01:11:34,810
be except an exception and we would need

01:11:31,460 --> 01:11:37,730
some how to do it in the hypervisor so

01:11:34,810 --> 01:11:40,220
the hypervisor would catch those IP

01:11:37,730 --> 01:11:43,180
fragments that are intended for I piece

01:11:40,220 --> 01:11:45,880
of virtual machines process them and

01:11:43,180 --> 01:11:48,950
provide them to DVF eventually

01:11:45,880 --> 01:11:50,810
another option is drop which is much

01:11:48,950 --> 01:11:58,610
simpler but I think people want to be

01:11:50,810 --> 01:12:00,560
happy with that this fall back or data

01:11:58,610 --> 01:12:03,110
buff exception is somewhat similar to

01:12:00,560 --> 01:12:04,670
what exists today in obvious offload

01:12:03,110 --> 01:12:06,710
where they have the slow path and the

01:12:04,670 --> 01:12:09,200
fast path so you can think about IP

01:12:06,710 --> 01:12:18,200
fragments is a slope of YP SEC offload

01:12:09,200 --> 01:12:20,420
in that sense right like you have an

01:12:18,200 --> 01:12:22,880
obvious slope of when you go to the

01:12:20,420 --> 01:12:26,150
stack instead of offload in in all the

01:12:22,880 --> 01:12:28,250
talks of all girl eats and Loney flying

01:12:26,150 --> 01:12:34,370
they're talking it on that if every time

01:12:28,250 --> 01:12:36,470
but you pal didn't listen so right to

01:12:34,370 --> 01:12:38,480
the stack in the hypervisor where does

01:12:36,470 --> 01:12:41,450
real software and encrypts and

01:12:38,480 --> 01:12:45,050
everything and just finishes by

01:12:41,450 --> 01:12:47,410
providing it to DVF eventually so that's

01:12:45,050 --> 01:12:47,410
what I have

01:12:50,030 --> 01:12:57,800
right sure yeah for example yeah or if

01:12:56,150 --> 01:13:12,620
you have some hash context or something

01:12:57,800 --> 01:13:14,270
if your camera well this is the offload

01:13:12,620 --> 01:13:29,030
that they were talking about previously

01:13:14,270 --> 01:13:32,600
in the in dental talk well it's a

01:13:29,030 --> 01:13:34,010
service that like Europe providing a

01:13:32,600 --> 01:13:36,290
cloud and virtual machines to clients

01:13:34,010 --> 01:13:38,210
you provide a service 5p SEC today what

01:13:36,290 --> 01:13:40,430
you do is you do power utilization and

01:13:38,210 --> 01:13:42,680
you do it on the hypervisor and there

01:13:40,430 --> 01:13:45,070
are all kinds of such services Amazon

01:13:42,680 --> 01:13:45,070
whatever

01:13:52,560 --> 01:13:57,489
so you can provide a service for the VM

01:13:55,030 --> 01:13:59,400
can do whatever doesn't matter just a

01:13:57,489 --> 01:14:02,540
different model

01:13:59,400 --> 01:14:02,540
[Music]

01:14:03,210 --> 01:14:07,989
well usually there is a client that

01:14:05,920 --> 01:14:11,170
purchased the service and he pays some

01:14:07,989 --> 01:14:14,040
dollars for it so probably should do

01:14:11,170 --> 01:14:14,040
something that makes sense

01:14:48,280 --> 01:14:51,429
when you

01:15:08,280 --> 01:15:16,750
so we have sort of a flow match an

01:15:14,290 --> 01:15:19,630
action thing in in both transmit and

01:15:16,750 --> 01:15:20,980
receive so we would use that and it

01:15:19,630 --> 01:15:23,440
could be extended to other

01:15:20,980 --> 01:15:26,290
encapsulations so in terms of

01:15:23,440 --> 01:15:27,820
configuration usually today you can

01:15:26,290 --> 01:15:30,460
configure from the hypervisor villains

01:15:27,820 --> 01:15:34,449
for the VM or V excellence or whatever

01:15:30,460 --> 01:15:37,090
and then those configurations would be

01:15:34,449 --> 01:15:38,560
applied before the SA lookup so you

01:15:37,090 --> 01:15:40,510
would always need to walk through that

01:15:38,560 --> 01:15:42,880
and then you do the SA look upon

01:15:40,510 --> 01:15:45,190
transmit and we receive side you have

01:15:42,880 --> 01:15:52,840
the other way around you need to walk

01:15:45,190 --> 01:15:55,449
there well we have a cam there so it's

01:15:52,840 --> 01:15:57,750
simpler we have become simpler than in

01:15:55,449 --> 01:15:57,750
index

01:16:01,959 --> 01:16:07,880
yeah I'm not sure I understand but you

01:16:04,489 --> 01:16:08,719
have the rules before the di Pisa crews

01:16:07,880 --> 01:16:11,420
that are after

01:16:08,719 --> 01:16:12,849
so just goes directly and when you

01:16:11,420 --> 01:16:18,739
configure them they are applied

01:16:12,849 --> 01:16:20,860
automatically to the IP sir crews thank

01:16:18,739 --> 01:16:20,860
you

01:16:36,460 --> 01:16:41,870
okay there's still time and we are at

01:16:39,560 --> 01:16:44,000
the open discussion part is there

01:16:41,870 --> 01:16:56,860
anybody who want to step up to discuss

01:16:44,000 --> 01:16:56,860
something for me

01:17:06,920 --> 01:17:09,920
No

01:17:13,070 --> 01:17:29,230
[Music]

01:17:14,989 --> 01:17:29,230
oh you mean the contract thing okay yes

01:17:36,700 --> 01:17:49,100
yeah right yes I mean I think he is a

01:17:45,890 --> 01:17:50,390
solution to that is to to it like ipv6

01:17:49,100 --> 01:17:54,550
thirsted right

01:17:50,390 --> 01:17:57,739
I mean ipv6 takes all the fragments

01:17:54,550 --> 01:18:00,219
reassembles at ant and contract checks

01:17:57,739 --> 01:18:04,370
the reassemble packet but does the

01:18:00,219 --> 01:18:06,580
fragment chain back to the stack so not

01:18:04,370 --> 01:18:06,580
anymore

01:18:07,120 --> 01:18:11,770
okay so I'm outdated

01:18:18,840 --> 01:18:21,840
yeah

01:18:38,870 --> 01:18:43,280
I'm not so sure either

01:18:53,030 --> 01:18:56,910
yeah no that's not that's not the way

01:18:55,980 --> 01:19:02,250
how to do it

01:18:56,910 --> 01:19:04,290
I think contracts should somehow pass

01:19:02,250 --> 01:19:07,560
the packets back to the stack as they

01:19:04,290 --> 01:19:29,910
wear I mean that's somehow the easiest

01:19:07,560 --> 01:19:32,239
at least for from stat point of view yes

01:19:29,910 --> 01:19:32,239
right

01:19:35,860 --> 01:19:45,100
you know that would be good yeah okay

01:19:39,190 --> 01:19:45,100
anything else okay

01:19:45,290 --> 01:19:50,220
yes

01:19:47,120 --> 01:19:50,220
[Music]

01:19:58,340 --> 01:20:01,529
[Music]

01:20:08,820 --> 01:20:21,940
yes no I think well I mean DVI

01:20:18,840 --> 01:20:27,969
interfaces are well to say they're not

01:20:21,940 --> 01:20:30,699
that well designed yes and well I have

01:20:27,969 --> 01:20:33,190
one more topic namely it was redesigning

01:20:30,699 --> 01:20:35,590
vvt-i interfaces maybe I would just

01:20:33,190 --> 01:20:40,329
present this and maybe it fixes your

01:20:35,590 --> 01:20:43,960
thing then okay that's where this

01:20:40,329 --> 01:20:45,820
happened this happened okay yeah so I

01:20:43,960 --> 01:20:50,250
have a discussion point namely is

01:20:45,820 --> 01:20:52,840
redesigning vti I mean PTI's have some

01:20:50,250 --> 01:20:59,020
disadvantage just you two not so good

01:20:52,840 --> 01:21:02,590
design so I wrote some of the

01:20:59,020 --> 01:21:04,840
disadvantages here this is first thing

01:21:02,590 --> 01:21:07,059
is the vti interface is a light read

01:21:04,840 --> 01:21:10,809
tunnel and this has configurable tunnel

01:21:07,059 --> 01:21:13,210
endpoints but the thing is that tunnel

01:21:10,809 --> 01:21:16,179
endpoints are already determined by DSA

01:21:13,210 --> 01:21:18,130
so configuring these tunnel endpoints

01:21:16,179 --> 01:21:20,320
doesn't make much sense because if you

01:21:18,130 --> 01:21:23,130
if it doesn't match yes I it just

01:21:20,320 --> 01:21:23,130
doesn't work right

01:21:23,639 --> 01:21:29,559
okay now the thing is that well you can

01:21:27,340 --> 01:21:32,920
have a VCI with white card channel and

01:21:29,559 --> 01:21:35,469
parts but only one that's another

01:21:32,920 --> 01:21:37,480
limitation because you certainly want to

01:21:35,469 --> 01:21:40,630
have this all which guys should have

01:21:37,480 --> 01:21:47,530
wild card tunnel endpoints because for

01:21:40,630 --> 01:21:49,690
me yes right yeah I mean they should not

01:21:47,530 --> 01:21:53,739
have tunnel endpoints at all it should

01:21:49,690 --> 01:21:55,270
just an interface yeah just having one

01:21:53,739 --> 01:21:56,920
of these tournament faces could be

01:21:55,270 --> 01:21:58,929
problematic if you need that for

01:21:56,920 --> 01:22:01,510
multiple namespaces you already getting

01:21:58,929 --> 01:22:04,929
travel there so there's no chance to do

01:22:01,510 --> 01:22:06,789
this currently another thing is the

01:22:04,929 --> 01:22:09,789
configuration

01:22:06,789 --> 01:22:12,760
it's configured with jerry keys and

01:22:09,789 --> 01:22:16,150
routing marks we just somehow up I would

01:22:12,760 --> 01:22:17,559
say I mean neither Jerry keys no routing

01:22:16,150 --> 01:22:21,309
marks were made for that

01:22:17,559 --> 01:22:23,590
and during that routing by Mark doesn't

01:22:21,309 --> 01:22:26,829
work that well I don't want to say it

01:22:23,590 --> 01:22:30,789
doesn't work at all but it doesn't work

01:22:26,829 --> 01:22:33,340
so well now the thing is that the PTI is

01:22:30,789 --> 01:22:37,260
just for tunnel motor size which is also

01:22:33,340 --> 01:22:39,340
limitation what is not really needed so

01:22:37,260 --> 01:22:42,159
it's not an interface where you can

01:22:39,340 --> 01:22:43,949
route transporter beat mode with and I

01:22:42,159 --> 01:22:47,980
want to overcome this

01:22:43,949 --> 01:22:50,679
well first thought I can fix VG I but I

01:22:47,980 --> 01:22:55,030
think this will leech incompatible the

01:22:50,679 --> 01:22:57,269
user space problems so my plan is to

01:22:55,030 --> 01:23:02,949
create some new interface I think that's

01:22:57,269 --> 01:23:06,360
pretty much easier so and yeah so I have

01:23:02,949 --> 01:23:08,619
a wishlist how they should look like and

01:23:06,360 --> 01:23:10,269
well it should just be a virtual

01:23:08,619 --> 01:23:12,130
interface everything you wrote in it

01:23:10,269 --> 01:23:15,429
should be IPSec transformed that's it

01:23:12,130 --> 01:23:17,710
not more and less then I do not want

01:23:15,429 --> 01:23:21,360
have to limitation on the mode all of

01:23:17,710 --> 01:23:23,739
them all should work with that and

01:23:21,360 --> 01:23:25,750
multiple interfaces should be possible

01:23:23,739 --> 01:23:30,489
so we can move you to different

01:23:25,750 --> 01:23:32,800
namespaces another thing is the vti

01:23:30,489 --> 01:23:36,159
interface if you route something through

01:23:32,800 --> 01:23:39,340
vti interface you should know if this is

01:23:36,159 --> 01:23:42,909
layer 4 or layer 6 and capsulated

01:23:39,340 --> 01:23:44,530
otherwise you get problems so and this

01:23:42,909 --> 01:23:47,019
is also something it should not be later

01:23:44,530 --> 01:23:48,940
in the face you should route anything in

01:23:47,019 --> 01:23:54,190
that and it should fall out IPSec

01:23:48,940 --> 01:23:57,639
processed after that yes this is my

01:23:54,190 --> 01:24:00,130
configuration idea so the interfaces

01:23:57,639 --> 01:24:03,219
become a mark in a mask for input and

01:24:00,130 --> 01:24:07,150
output and that must match input and

01:24:03,219 --> 01:24:09,699
output mark of the state we kill the gut

01:24:07,150 --> 01:24:12,309
support for an output mark of the state

01:24:09,699 --> 01:24:15,460
which is used for routing by mark now

01:24:12,309 --> 01:24:17,619
and we would have to extend the state

01:24:15,460 --> 01:24:19,420
for an input mark and that's how I think

01:24:17,619 --> 01:24:22,390
we can configure these

01:24:19,420 --> 01:24:24,940
you interfaces well that's basically my

01:24:22,390 --> 01:24:26,830
ideas on that but the question is is

01:24:24,940 --> 01:24:29,050
there anything else I really want to

01:24:26,830 --> 01:24:31,449
avoid that we got yet another interfaces

01:24:29,050 --> 01:24:36,210
almost what we want to have so we should

01:24:31,449 --> 01:24:36,210
get it right now so yeah

01:24:53,390 --> 01:24:57,290
yes right

01:24:58,290 --> 01:25:05,190
[Music]

01:24:59,450 --> 01:25:12,330
yeah good point you know you can think

01:25:05,190 --> 01:25:17,970
about this yes some more things actually

01:25:12,330 --> 01:25:19,950
I have already code for that I haven't

01:25:17,970 --> 01:25:22,350
posted it yet but I think I will do it

01:25:19,950 --> 01:25:24,240
during the next weeks and then a few

01:25:22,350 --> 01:25:31,250
have five years on that just let me know

01:25:24,240 --> 01:25:37,740
and we can adopt this yeah okay so

01:25:31,250 --> 01:25:41,780
anything else some more topics okay if

01:25:37,740 --> 01:25:41,780

YouTube URL: https://www.youtube.com/watch?v=AOEpCRsBTIo


