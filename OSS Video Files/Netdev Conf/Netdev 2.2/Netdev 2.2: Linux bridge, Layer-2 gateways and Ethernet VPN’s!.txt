Title: Netdev 2.2: Linux bridge, Layer-2 gateways and Ethernet VPNâ€™s!
Publication date: 2018-03-14
Playlist: Netdev 2.2
Description: 
	Speaker: Roopa Prabhu
Seoul, Korea
Friday November 10th, 2017 
https://www.netdevconf.org/2.2/session.html?prabhu-linuxbridge-tutorial
Captions: 
	00:00:01,030 --> 00:00:07,089
Wacka cumulus networks and just for some

00:00:04,690 --> 00:00:09,940
context cumulus is the distribution

00:00:07,089 --> 00:00:14,950
running on network switches so all the

00:00:09,940 --> 00:00:16,960
examples and switches but we run the

00:00:14,950 --> 00:00:17,619
Linux bridge on switches and this can be

00:00:16,960 --> 00:00:23,439
applied to

00:00:17,619 --> 00:00:25,390
hypervisors or servers and so on before

00:00:23,439 --> 00:00:28,359
I start last time I did a tutorial at

00:00:25,390 --> 00:00:31,390
NIDA I had very few slides and I was

00:00:28,359 --> 00:00:33,040
done in 20 minutes and I am afraid I

00:00:31,390 --> 00:00:36,700
overworked this time and I have too many

00:00:33,040 --> 00:00:39,040
slides so I'm gonna zip through some of

00:00:36,700 --> 00:00:43,000
the basic slides that have put in there

00:00:39,040 --> 00:00:46,240
mainly for documentation yeah I

00:00:43,000 --> 00:00:49,810
apologize if it can make you dizzy I

00:00:46,240 --> 00:00:52,750
will skip through some basic slides so

00:00:49,810 --> 00:00:54,670
evpn even I do want to mention this is

00:00:52,750 --> 00:00:57,670
not IPSec VPNs

00:00:54,670 --> 00:00:59,170
this is Ethernet VPNs so everything here

00:00:57,670 --> 00:01:02,800
what I'm going to talk about is pure

00:00:59,170 --> 00:01:06,670
layer 2 networks and I do want to say

00:01:02,800 --> 00:01:08,860
that so I I and there is another person

00:01:06,670 --> 00:01:11,500
Nicola who's a bridge expert who at

00:01:08,860 --> 00:01:17,110
cumulus who work on all these

00:01:11,500 --> 00:01:19,900
technologies so this tutorial is again

00:01:17,110 --> 00:01:22,240
it's talking about deploying Linux

00:01:19,900 --> 00:01:25,960
bridge in the data center

00:01:22,240 --> 00:01:28,930
vx land tunnel endpoints for overlay for

00:01:25,960 --> 00:01:32,320
stretching l2 networks across data

00:01:28,930 --> 00:01:35,470
centers or across racks or pods Ethernet

00:01:32,320 --> 00:01:37,420
VPNs Ethernet VPN is a very hot

00:01:35,470 --> 00:01:39,250
technology in their networking in data

00:01:37,420 --> 00:01:42,159
center networking industry today it's

00:01:39,250 --> 00:01:47,790
basically using BGP the routing protocol

00:01:42,159 --> 00:01:47,790
to for network virtualization overlays

00:01:49,710 --> 00:01:56,560
just check to me I'm doing this tutorial

00:01:53,170 --> 00:01:58,119
mainly to give some perspective on all

00:01:56,560 --> 00:02:02,310
the work that we've been doing in the

00:01:58,119 --> 00:02:05,619
kernel in bridge or bx land and so on

00:02:02,310 --> 00:02:11,319
focusing on some use cases and most of

00:02:05,619 --> 00:02:14,580
these examples are from a tour switch so

00:02:11,319 --> 00:02:16,560
i to cover a lot of basics too

00:02:14,580 --> 00:02:17,970
build up the floor for this tutorial I

00:02:16,560 --> 00:02:20,490
have tried to explain data center

00:02:17,970 --> 00:02:24,300
networks then I go into Linux bridge and

00:02:20,490 --> 00:02:27,870
a little bit of networks then using

00:02:24,300 --> 00:02:32,250
Linux bridge with via clan and evpn and

00:02:27,870 --> 00:02:33,360
then Linux bridge with the VPN so data

00:02:32,250 --> 00:02:36,510
center network basics

00:02:33,360 --> 00:02:39,870
I think Jamal's talk yesterday and he

00:02:36,510 --> 00:02:44,250
did cover a bit of pods and racks and so

00:02:39,870 --> 00:02:46,020
on in the data center so yeah so data

00:02:44,250 --> 00:02:48,450
center networks you have racks of

00:02:46,020 --> 00:02:49,410
servers grouped into pods I will show a

00:02:48,450 --> 00:02:52,290
picture in a minute

00:02:49,410 --> 00:02:56,070
VLANs and subnets stretched across racks

00:02:52,290 --> 00:02:57,720
or pods and sometimes these days later

00:02:56,070 --> 00:03:01,020
networks are stretched across data

00:02:57,720 --> 00:03:04,850
centers companies merging and different

00:03:01,020 --> 00:03:04,850
administrative domains merging and so on

00:03:05,209 --> 00:03:09,510
so there are three types layer two you

00:03:08,220 --> 00:03:11,280
can have a data center network that's

00:03:09,510 --> 00:03:13,350
completely layer to be lanced everywhere

00:03:11,280 --> 00:03:15,780
be lanced ranked everywhere it's not a

00:03:13,350 --> 00:03:17,550
very optimal design but there are cases

00:03:15,780 --> 00:03:21,120
where people deploy it that way

00:03:17,550 --> 00:03:24,120
hybrid is like layer 2 and layer 3 and

00:03:21,120 --> 00:03:27,239
layer 3 only data center is all routing

00:03:24,120 --> 00:03:29,970
and everybody wants to move to a layer 3

00:03:27,239 --> 00:03:32,280
because lately data center picker

00:03:29,970 --> 00:03:36,930
surface advantages layer 2 networks with

00:03:32,280 --> 00:03:38,040
STP loops it's not very yeah not very

00:03:36,930 --> 00:03:41,130
interesting anymore

00:03:38,040 --> 00:03:44,040
so modern data center networks are used

00:03:41,130 --> 00:03:48,180
the cloth topology and it's usually

00:03:44,040 --> 00:03:51,330
layer 3 or layer 2 and layer 3 hybrid

00:03:48,180 --> 00:03:54,180
networks so this is an example

00:03:51,330 --> 00:03:56,670
I know Jamal had a similar slide so

00:03:54,180 --> 00:03:58,140
racks of servers connected by top of the

00:03:56,670 --> 00:04:00,959
rack switches which are also called lead

00:03:58,140 --> 00:04:02,880
switches and you can you can have

00:04:00,959 --> 00:04:06,140
another tier another layer of switches

00:04:02,880 --> 00:04:10,799
in between but this is the simplest flat

00:04:06,140 --> 00:04:12,360
folded class topology leads door leads

00:04:10,799 --> 00:04:13,500
switches or tour switches are not

00:04:12,360 --> 00:04:20,850
connected to each other they're all

00:04:13,500 --> 00:04:23,940
going through the spine hybrid so in a

00:04:20,850 --> 00:04:27,570
hybrid models so the servers the

00:04:23,940 --> 00:04:29,730
server's all are running layer to VLANs

00:04:27,570 --> 00:04:33,450
and they use the tour as a gateway to

00:04:29,730 --> 00:04:35,550
the layer 3 network so from the tour and

00:04:33,450 --> 00:04:39,120
a bow you're basically running routing

00:04:35,550 --> 00:04:42,840
demons and like bgp and it's all layer 3

00:04:39,120 --> 00:04:44,810
layer 3 only data center you're doing

00:04:42,840 --> 00:04:48,510
routing everywhere there's no violence

00:04:44,810 --> 00:04:51,150
you're running l3 from these hypervisor

00:04:48,510 --> 00:04:55,650
or servers up to spine and the whole

00:04:51,150 --> 00:04:58,980
data center so layer two gateways with

00:04:55,650 --> 00:05:01,350
Linux bridge so layer 2 gateways are

00:04:58,980 --> 00:05:04,590
nothing but rack of servers servers

00:05:01,350 --> 00:05:06,120
running VLANs and they're with VMs

00:05:04,590 --> 00:05:08,070
communicating through the through the

00:05:06,120 --> 00:05:11,610
Tor switch and your tour switch it

00:05:08,070 --> 00:05:13,500
becomes your layer 2 gateway so you

00:05:11,610 --> 00:05:15,180
bridge between VLANs on the servers in

00:05:13,500 --> 00:05:18,630
the same rack through your gateway

00:05:15,180 --> 00:05:21,780
switch so to build a layer 2 network

00:05:18,630 --> 00:05:23,820
layer 2 gateway with the Linux bridge

00:05:21,780 --> 00:05:25,590
you just need a little bridge with

00:05:23,820 --> 00:05:27,860
switch ports you can connect all your

00:05:25,590 --> 00:05:30,870
switch ports as bridge boats

00:05:27,860 --> 00:05:32,160
bridging the bridge drivers the Linux

00:05:30,870 --> 00:05:34,470
bridge driver actually supports two

00:05:32,160 --> 00:05:38,130
modes one is the VLAN filtering and non

00:05:34,470 --> 00:05:40,830
VLAN filtering mode so the VLAN

00:05:38,130 --> 00:05:43,470
filtering more is the more modern more

00:05:40,830 --> 00:05:46,520
scalable mode I'll just tell you why in

00:05:43,470 --> 00:05:50,280
a minute this is another basic slide

00:05:46,520 --> 00:05:52,710
showing example of nonviolence filtering

00:05:50,280 --> 00:05:55,260
bridge and VLAN filtering bridge in a

00:05:52,710 --> 00:05:57,300
non-violent filtering bridge the bridge

00:05:55,260 --> 00:06:01,050
driver does not really understand VLANs

00:05:57,300 --> 00:06:04,980
so you do put VLAN devices inside the

00:06:01,050 --> 00:06:06,510
bridge and the VLAN filtering bridge the

00:06:04,980 --> 00:06:09,030
bridge driver understands VLAN so you

00:06:06,510 --> 00:06:11,100
can actually tell you can use the bridge

00:06:09,030 --> 00:06:13,950
command the IP wrote a bridge command

00:06:11,100 --> 00:06:19,950
and net link API to configure VLANs on

00:06:13,950 --> 00:06:24,770
the bridge so that was switching within

00:06:19,950 --> 00:06:28,170
a VLAN and routing between VLANs is done

00:06:24,770 --> 00:06:30,900
the difference here is for the VLAN

00:06:28,170 --> 00:06:33,540
filtering bridge for routing between

00:06:30,900 --> 00:06:35,669
VLANs you create a VLAN device on top of

00:06:33,540 --> 00:06:39,570
the bridge yeah these are some minor

00:06:35,669 --> 00:06:41,009
details which they're not documented

00:06:39,570 --> 00:06:43,069
everywhere so I'm hoping

00:06:41,009 --> 00:06:48,629
that this tutorial slides will actually

00:06:43,069 --> 00:06:49,830
help with some of the scan fake scaling

00:06:48,629 --> 00:06:52,710
with Linux bridge

00:06:49,830 --> 00:06:56,909
so the VLAN filtering bridge was mainly

00:06:52,710 --> 00:06:59,939
done for scaling because we are scaling

00:06:56,909 --> 00:07:01,379
net devices the lesser net devices

00:06:59,939 --> 00:07:03,360
number of their devices you have the

00:07:01,379 --> 00:07:05,520
better obviously for many reasons you

00:07:03,360 --> 00:07:09,469
you'll get lesser notifications from the

00:07:05,520 --> 00:07:12,899
kernel overall it's a easier problem

00:07:09,469 --> 00:07:17,370
easier thing to manage so as you can see

00:07:12,899 --> 00:07:22,879
if you are deploying 2000 VLANs on a 32

00:07:17,370 --> 00:07:26,580
port bridge you can end up with a lot of

00:07:22,879 --> 00:07:28,889
net devices with the old model the

00:07:26,580 --> 00:07:30,689
nonviolent the train bridge and the VLAN

00:07:28,889 --> 00:07:39,629
filtering bridge actually reduces that

00:07:30,689 --> 00:07:42,860
to very small number so this is a simple

00:07:39,629 --> 00:07:47,759
example beginner example to showing

00:07:42,860 --> 00:07:50,399
where your beams are on the racks and

00:07:47,759 --> 00:07:51,899
the tour the green boxes the leaf

00:07:50,399 --> 00:07:54,649
switches or your tour switches and

00:07:51,899 --> 00:07:57,300
that's where your bridge is running and

00:07:54,649 --> 00:07:59,189
this example is showing a VLAN filtering

00:07:57,300 --> 00:08:01,139
bridge so there is a beeline device on

00:07:59,189 --> 00:08:11,490
top of the bridge for every VLAN that

00:08:01,139 --> 00:08:13,979
you want to switch between network so

00:08:11,490 --> 00:08:16,949
and bridge the lyrics bridge has a lot

00:08:13,979 --> 00:08:18,330
of features every feature that you need

00:08:16,949 --> 00:08:22,499
in a data center like igmp snooping

00:08:18,330 --> 00:08:24,599
learning yeah selective control of a lot

00:08:22,499 --> 00:08:29,999
of flags or flooding and so on you can

00:08:24,599 --> 00:08:32,250
use this and it also support supported

00:08:29,999 --> 00:08:35,940
art proxy for a long time and recently

00:08:32,250 --> 00:08:40,199
with new patches it supports both our

00:08:35,940 --> 00:08:42,839
Penn ND proxying the use case for this

00:08:40,199 --> 00:08:46,440
will be apparent in the next few slides

00:08:42,839 --> 00:08:50,790
and it supports STP it supports STP in

00:08:46,440 --> 00:08:52,680
kernel mode and also in user space so

00:08:50,790 --> 00:08:54,500
the rest of this tutorial will the

00:08:52,680 --> 00:08:58,610
examples only use VLAN

00:08:54,500 --> 00:09:02,780
during bridge for simplicity overlay

00:08:58,610 --> 00:09:06,080
networks so overlay networks are

00:09:02,780 --> 00:09:08,690
basically they are required to provide

00:09:06,080 --> 00:09:10,490
network virtualization services for

00:09:08,690 --> 00:09:14,300
tenant systems and your talent systems

00:09:10,490 --> 00:09:17,480
are nothing but VMs what overlay

00:09:14,300 --> 00:09:19,640
networks do is they transport or they

00:09:17,480 --> 00:09:25,310
stretch your layer 2 network by using

00:09:19,640 --> 00:09:27,050
layer 3 again this is the basic slide in

00:09:25,310 --> 00:09:29,690
network virtualization NVE

00:09:27,050 --> 00:09:33,440
is the network virtualization endpoint

00:09:29,690 --> 00:09:35,150
it's like the entry point into your

00:09:33,440 --> 00:09:36,050
overlay network for example a V

00:09:35,150 --> 00:09:37,850
excellent driver

00:09:36,050 --> 00:09:40,040
wherever you put your vehicle and Driver

00:09:37,850 --> 00:09:43,940
that becomes your and be it end caps and

00:09:40,040 --> 00:09:50,150
D caps your packets from tenant systems

00:09:43,940 --> 00:09:53,300
VMs or containers into the overlay env

00:09:50,150 --> 00:09:57,560
types there is layer 2 and layer 3 layer

00:09:53,300 --> 00:10:00,530
2 basically provides l2 virtualization

00:09:57,560 --> 00:10:02,510
service and L 3 L 3 and B provides and

00:10:00,530 --> 00:10:07,339
l3 virtualization service for this

00:10:02,510 --> 00:10:10,880
tutorial only layer 2 is the focus this

00:10:07,339 --> 00:10:14,630
is a sample picture basically your TS

00:10:10,880 --> 00:10:17,270
your tenant system is a VM connected to

00:10:14,630 --> 00:10:20,960
an NB II which is doing your VX LAN and

00:10:17,270 --> 00:10:25,820
cap T cap and that is transported over

00:10:20,960 --> 00:10:27,860
l3 underlay network so again why overlay

00:10:25,820 --> 00:10:30,260
networks it's basically isolation

00:10:27,860 --> 00:10:33,820
between tenant systems VMs customer

00:10:30,260 --> 00:10:37,640
systems important in cloud environments

00:10:33,820 --> 00:10:40,520
stretching layer 2 across racks or pods

00:10:37,640 --> 00:10:44,120
in the data center like I showed in the

00:10:40,520 --> 00:10:47,300
previous picture racks between racks if

00:10:44,120 --> 00:10:49,490
you want to move a VM and you want to

00:10:47,300 --> 00:10:53,060
maintain you want the VM to maintain its

00:10:49,490 --> 00:10:55,460
IP and Mac after being mobility you

00:10:53,060 --> 00:10:58,220
would use an overlay network to stretch

00:10:55,460 --> 00:11:02,020
the VMS layer 2 network to be other

00:10:58,220 --> 00:11:02,020
other pods or other racks

00:11:04,530 --> 00:11:10,830
and again l-3 networks are the best

00:11:07,520 --> 00:11:12,690
overlay networks basically try not to

00:11:10,830 --> 00:11:15,720
proliferate your l2 network throughout

00:11:12,690 --> 00:11:19,980
the data center you end up putting your

00:11:15,720 --> 00:11:26,340
l2 network on to l3 so that you get the

00:11:19,980 --> 00:11:29,520
benefits of the l3 networks and the

00:11:26,340 --> 00:11:31,680
deployment options the amis again the

00:11:29,520 --> 00:11:34,200
network virtualization endpoint the

00:11:31,680 --> 00:11:36,450
deployment option is one common thing is

00:11:34,200 --> 00:11:39,270
you can put it on the hypervisor the

00:11:36,450 --> 00:11:41,670
container or VMs are directly converted

00:11:39,270 --> 00:11:44,880
directly talk to an MBE they're mapped

00:11:41,670 --> 00:11:48,720
each tenant system is mapped to a BNI

00:11:44,880 --> 00:11:52,230
for example and or it could be a top of

00:11:48,720 --> 00:11:55,950
the rack switch the reason why you would

00:11:52,230 --> 00:11:57,930
choose one of the other so VX land

00:11:55,950 --> 00:12:01,680
tunnel endpoints on the server you can

00:11:57,930 --> 00:12:05,280
map the VM to an overlay Network

00:12:01,680 --> 00:12:07,320
identity like bx LAN ID add the

00:12:05,280 --> 00:12:10,530
hypervisor so you don't need another

00:12:07,320 --> 00:12:13,980
layer of translations works very well in

00:12:10,530 --> 00:12:16,920
a pure l3 data center you can you don't

00:12:13,980 --> 00:12:21,390
have to stretch your l2 further up the

00:12:16,920 --> 00:12:24,510
rack but there are disadvantages you

00:12:21,390 --> 00:12:29,160
will have to do VX an end cap and D cap

00:12:24,510 --> 00:12:31,020
on the in software on the server but if

00:12:29,160 --> 00:12:33,660
you move that to the tour many of these

00:12:31,020 --> 00:12:36,540
stores switches have Asics that can do

00:12:33,660 --> 00:12:39,060
in cap and D cap at line rate and that's

00:12:36,540 --> 00:12:42,900
the reason you would move the NVE to the

00:12:39,060 --> 00:12:45,450
tour switch now what it mean what it

00:12:42,900 --> 00:12:48,000
also means is if you're moving the NV to

00:12:45,450 --> 00:12:52,650
the tour it means that the tenants

00:12:48,000 --> 00:12:56,070
system mapping needs to happen on the on

00:12:52,650 --> 00:12:59,130
the tour switch to the vni and this is

00:12:56,070 --> 00:13:01,920
usually done by deploying VLANs on the

00:12:59,130 --> 00:13:05,310
servers or hypervisors each VM is mapped

00:13:01,920 --> 00:13:07,830
to a VLAN and so on and at the tour

00:13:05,310 --> 00:13:16,260
switch you do a B lon - OB ni

00:13:07,830 --> 00:13:17,710
translation and yes B it's LAN as as you

00:13:16,260 --> 00:13:21,380
know it's

00:13:17,710 --> 00:13:22,970
it uses a BNI as the ID channel ID be

00:13:21,380 --> 00:13:25,670
excellent tunnel endpoints are basically

00:13:22,970 --> 00:13:31,160
used to end gap and d-cap be excellent

00:13:25,670 --> 00:13:33,290
packets meetups every tunnel endpoint

00:13:31,160 --> 00:13:36,140
which endcaps has its own routable IP

00:13:33,290 --> 00:13:40,670
address and that's how a beat ups

00:13:36,140 --> 00:13:45,080
communicate over the underlay and the D

00:13:40,670 --> 00:13:47,630
cap and go to the other side in Linux

00:13:45,080 --> 00:13:53,630
has the vehicle and Driver as you all

00:13:47,630 --> 00:13:56,780
know here this is what I was trying to

00:13:53,630 --> 00:13:59,600
say beat ups the VX non tunnel endpoints

00:13:56,780 --> 00:14:04,370
can be of the server or they could be on

00:13:59,600 --> 00:14:06,920
the top on the tour so usually when the

00:14:04,370 --> 00:14:08,330
layer two is terminated on the server in

00:14:06,920 --> 00:14:11,570
this case where we tips are on the

00:14:08,330 --> 00:14:17,000
hypervisor your tour becomes just an l-3

00:14:11,570 --> 00:14:19,760
gateway routing between the beat ups the

00:14:17,000 --> 00:14:21,680
VX LAN tunnel endpoint could also be on

00:14:19,760 --> 00:14:23,800
the tours Bennett's on the tour switch

00:14:21,680 --> 00:14:26,540
you're doing B lands on the hypervisor

00:14:23,800 --> 00:14:29,600
you're stretching the VLANs from the

00:14:26,540 --> 00:14:32,360
hypervisor to the tour switch and your

00:14:29,600 --> 00:14:36,980
tour switch becomes layer to gateway

00:14:32,360 --> 00:14:43,000
overlay kit we to route packets between

00:14:36,980 --> 00:14:46,220
beat ups this is another thing showing

00:14:43,000 --> 00:14:50,090
the same thing tenon systems are

00:14:46,220 --> 00:14:52,760
directly mapped to be and I did that is

00:14:50,090 --> 00:14:54,740
done by the vehicle and Driver the

00:14:52,760 --> 00:15:01,180
stores which becomes the l3 gateway and

00:14:54,740 --> 00:15:01,180
then you're doing VX LAN on the underlay

00:15:01,570 --> 00:15:08,050
the other model is VLANs to be and I

00:15:08,590 --> 00:15:15,310
yeah and you use the Linux bridge the

00:15:12,410 --> 00:15:17,600
Linux bridge does understands VLANs and

00:15:15,310 --> 00:15:19,820
I'll explain in a bit how it can

00:15:17,600 --> 00:15:24,500
translate or how it can forward to obey

00:15:19,820 --> 00:15:26,600
its LAN device so learning overlay

00:15:24,500 --> 00:15:30,430
networks are stretched l2 networks

00:15:26,600 --> 00:15:32,740
across racks and pods

00:15:30,430 --> 00:15:35,460
one by default if you don't have a

00:15:32,740 --> 00:15:39,490
controller usually flood and learn

00:15:35,460 --> 00:15:42,370
control plane learning is where you have

00:15:39,490 --> 00:15:45,820
a control plane or a controller trying

00:15:42,370 --> 00:15:48,640
to disseminate endpoint address mappings

00:15:45,820 --> 00:15:52,650
Mac idea or just MAC addresses to other

00:15:48,640 --> 00:15:56,260
beat ups typically done by a controller

00:15:52,650 --> 00:15:59,589
and Static there are also solutions

00:15:56,260 --> 00:16:01,540
where you can configure static max you

00:15:59,589 --> 00:16:05,860
know all the VMS where they decide and

00:16:01,540 --> 00:16:09,760
you configure the VM max on every every

00:16:05,860 --> 00:16:12,040
beta or every tour switch so you do this

00:16:09,760 --> 00:16:14,890
because you want to avoid flooding and

00:16:12,040 --> 00:16:16,570
learning and one characteristic of a

00:16:14,890 --> 00:16:18,460
layer 2 networks is you flood and that

00:16:16,570 --> 00:16:20,170
that is bad and especially when you are

00:16:18,460 --> 00:16:24,130
stretching your l2 network across the

00:16:20,170 --> 00:16:27,910
data center yeah that can that can lead

00:16:24,130 --> 00:16:32,290
to a lot of wasted bandwidth so this is

00:16:27,910 --> 00:16:37,150
a model how you deploy l2 overlaid

00:16:32,290 --> 00:16:43,150
gateway on Linux so the Linux bridge has

00:16:37,150 --> 00:16:45,100
its FDB table and you enslave be its

00:16:43,150 --> 00:16:49,900
land ports to it the excellent driver

00:16:45,100 --> 00:16:53,410
also maintains an FTP table and the

00:16:49,900 --> 00:16:56,709
tunnel so this just uses extract terms

00:16:53,410 --> 00:17:00,760
the tunnel driver basically maintains

00:16:56,709 --> 00:17:02,470
and forwarding database with additional

00:17:00,760 --> 00:17:05,350
information additional reachability

00:17:02,470 --> 00:17:08,620
information about yeah the remote

00:17:05,350 --> 00:17:14,740
meetups where the where the other max

00:17:08,620 --> 00:17:19,059
love this shows a specific example of

00:17:14,740 --> 00:17:21,760
bridge and a BH LAN FTB the key thing

00:17:19,059 --> 00:17:23,470
here is as you see the bridge FDB points

00:17:21,760 --> 00:17:27,429
to the VX LAN port and the be excellent

00:17:23,470 --> 00:17:31,179
FDB points the same Mac has the same Mac

00:17:27,429 --> 00:17:37,780
pointing to the remote IP address where

00:17:31,179 --> 00:17:40,300
the matte lips so broadcast unknown

00:17:37,780 --> 00:17:42,460
unicast and multicast traffic this is

00:17:40,300 --> 00:17:43,890
basically this is the thing that results

00:17:42,460 --> 00:17:48,120
in flooding of traffic in layer 2

00:17:43,890 --> 00:17:49,710
networks and like I said this is

00:17:48,120 --> 00:17:53,010
aggravated when l2 networks are

00:17:49,710 --> 00:17:55,230
stretched across data centers various

00:17:53,010 --> 00:17:56,910
optimizations can be done in such

00:17:55,230 --> 00:18:00,380
networks which which will become

00:17:56,910 --> 00:18:04,980
apparent when I talk about Ethernet VPNs

00:18:00,380 --> 00:18:08,220
so bridge drivers so you could stop

00:18:04,980 --> 00:18:11,040
flooding by just dropping packets if you

00:18:08,220 --> 00:18:15,480
know where all your VMs live and you

00:18:11,040 --> 00:18:18,570
program all your bx lan and beat ups on

00:18:15,480 --> 00:18:22,680
every tower switch you could actually

00:18:18,570 --> 00:18:25,260
control or bridge flooding so bridge

00:18:22,680 --> 00:18:27,240
travel has knobs for each one of them

00:18:25,260 --> 00:18:33,030
broadcast unknown unicast and multicast

00:18:27,240 --> 00:18:36,030
traffic VX land rival also has its own

00:18:33,030 --> 00:18:38,250
mechanisms to avoid flooding so one is

00:18:36,030 --> 00:18:40,620
multicast by default you can configure

00:18:38,250 --> 00:18:45,440
the Linux vehicle and driver to use a

00:18:40,620 --> 00:18:47,820
multicast IP address so that these

00:18:45,440 --> 00:18:51,510
broadcast packets or flooding happens

00:18:47,820 --> 00:18:55,590
only on that multicast group headand

00:18:51,510 --> 00:18:58,080
replication is where you tell you

00:18:55,590 --> 00:18:59,640
install a default FTB forwarding

00:18:58,080 --> 00:19:03,620
database entry into the vehicle and

00:18:59,640 --> 00:19:06,540
Driver FTP table telling it to only send

00:19:03,620 --> 00:19:10,790
your unknown unicast or broadcast

00:19:06,540 --> 00:19:10,790
traffic to a certain beat up list

00:19:11,840 --> 00:19:21,000
flooding is again it's a default option

00:19:18,410 --> 00:19:24,660
Soviet land BX lon

00:19:21,000 --> 00:19:27,270
Ned ups their two two ways you can

00:19:24,660 --> 00:19:30,450
deploy you can have a be excellent

00:19:27,270 --> 00:19:34,290
device for BNI and V and I you can scale

00:19:30,450 --> 00:19:36,330
BNI to a large number and so deploying

00:19:34,290 --> 00:19:40,020
for example some of these data center

00:19:36,330 --> 00:19:42,240
deployments they have 10,000 bien eyes

00:19:40,020 --> 00:19:45,930
and having 10,000 net devs does not

00:19:42,240 --> 00:19:48,560
scale well so in recent kernels support

00:19:45,930 --> 00:19:52,100
having a single bits on their death

00:19:48,560 --> 00:19:56,460
which is which uses the lightweight

00:19:52,100 --> 00:20:00,270
tunnel metadata objects

00:19:56,460 --> 00:20:02,790
so the difference between the two is the

00:20:00,270 --> 00:20:05,760
first one where you use a single be

00:20:02,790 --> 00:20:08,340
excellent letter for every BNI that V

00:20:05,760 --> 00:20:12,840
and I or the vehicle and device stores

00:20:08,340 --> 00:20:16,770
an FTP table for just that BNI the FTB's

00:20:12,840 --> 00:20:20,160
hashed by mac recent kernels support a

00:20:16,770 --> 00:20:22,470
single forwarding database for all the

00:20:20,160 --> 00:20:25,890
VN eyes the FGB tables are hashed with

00:20:22,470 --> 00:20:29,340
mac and BNI this is similar to the

00:20:25,890 --> 00:20:30,990
bridge understanding VLANs a single

00:20:29,340 --> 00:20:34,590
single bridge understanding all the

00:20:30,990 --> 00:20:44,490
billions I think if I remember correctly

00:20:34,590 --> 00:20:47,160
this I got this in in 413 kernel okay

00:20:44,490 --> 00:20:53,220
now this is getting into details of how

00:20:47,160 --> 00:20:54,810
you configure such devices be excellent

00:20:53,220 --> 00:21:01,380
tunnel net d'oeuvres for end cap and D

00:20:54,810 --> 00:21:04,980
cap enslaving it at the Bridgeport so

00:21:01,380 --> 00:21:06,510
the Rex besides have exact commands I

00:21:04,980 --> 00:21:09,600
don't think I'm gonna read through all

00:21:06,510 --> 00:21:13,290
the commands but this is something for

00:21:09,600 --> 00:21:15,990
reference later the first one shows you

00:21:13,290 --> 00:21:19,230
how you create a bits one bit slanted of

00:21:15,990 --> 00:21:20,850
query and I you create your net devs you

00:21:19,230 --> 00:21:24,300
create your VX LAN you create your

00:21:20,850 --> 00:21:27,180
bridge enslave your BX LAN ports which

00:21:24,300 --> 00:21:29,670
are called remote ports here and the

00:21:27,180 --> 00:21:33,390
local ports the local ports which are

00:21:29,670 --> 00:21:36,090
connected to the server's you configure

00:21:33,390 --> 00:21:38,610
VLAN filtering like I said in my

00:21:36,090 --> 00:21:41,490
previous slides I'll be only using a

00:21:38,610 --> 00:21:46,740
beeline filtering example you configure

00:21:41,490 --> 00:21:48,360
be lanced using bridge be lon add your d

00:21:46,740 --> 00:21:50,940
assuming and this assumes you don't have

00:21:48,360 --> 00:21:53,070
a controller so you add your default FTB

00:21:50,940 --> 00:21:56,640
entries to tell the vehicle and driver

00:21:53,070 --> 00:22:01,230
to flood your unknown traffic to these

00:21:56,640 --> 00:22:05,190
particular remote destinations so here's

00:22:01,230 --> 00:22:07,050
how it all looks so the tour switches

00:22:05,190 --> 00:22:08,929
have bridge and the vehicle and natives

00:22:07,050 --> 00:22:11,120
enslaved

00:22:08,929 --> 00:22:15,940
the spine switches the spine switches

00:22:11,120 --> 00:22:19,130
are completely in l3 they only see the

00:22:15,940 --> 00:22:23,480
encapsulated via flan packets the lead

00:22:19,130 --> 00:22:26,299
switches are the ones that see the the

00:22:23,480 --> 00:22:29,450
local traffic from each servers like for

00:22:26,299 --> 00:22:33,409
example BM 1 p.m. one wants to talk to

00:22:29,450 --> 00:22:35,029
BM to in this example vm 1 the brig owes

00:22:33,409 --> 00:22:38,690
to the bridge on the tour switch and the

00:22:35,029 --> 00:22:41,029
bridge bridges it to the VX land device

00:22:38,690 --> 00:22:42,529
the reason it does that is because it

00:22:41,029 --> 00:22:44,840
finds a MAC address pointing to the

00:22:42,529 --> 00:22:47,600
baseline device and then the V excellent

00:22:44,840 --> 00:22:53,299
device from there it knows that that

00:22:47,600 --> 00:22:56,570
that particular VM is on V tap save 10 1

00:22:53,299 --> 00:22:58,760
1 2 that's a middle rack and it

00:22:56,570 --> 00:23:00,260
encapsulate the packet and sends it and

00:22:58,760 --> 00:23:02,049
then after that the packet travels

00:23:00,260 --> 00:23:08,330
actually through the spine switch

00:23:02,049 --> 00:23:10,360
completely l3 this is again a detailed

00:23:08,330 --> 00:23:12,679
example of how you can figure this

00:23:10,360 --> 00:23:16,250
bridge B line shows the command to see

00:23:12,679 --> 00:23:18,169
your VLANs the key thing here is the VX

00:23:16,250 --> 00:23:20,179
land on the baseline device you

00:23:18,169 --> 00:23:23,120
configure the VLAN that it is supposed

00:23:20,179 --> 00:23:27,460
to map to for example in this in this

00:23:23,120 --> 00:23:30,529
example it's be LAN 10 maps to be ni 10

00:23:27,460 --> 00:23:32,149
so if you see the bridge configuration

00:23:30,529 --> 00:23:34,640
it's going to show you VLAN 10

00:23:32,149 --> 00:23:38,750
configured on both of these ports in

00:23:34,640 --> 00:23:42,289
addition you also see that the VLAN on

00:23:38,750 --> 00:23:43,309
VX Land 10 is also it also has the

00:23:42,289 --> 00:23:45,559
egress intact

00:23:43,309 --> 00:23:48,250
peewit egress undocked flag which means

00:23:45,559 --> 00:23:50,570
that if it's getting a tagged packet

00:23:48,250 --> 00:23:53,059
packet tag would be lunch and it's

00:23:50,570 --> 00:23:55,190
always going to strip it and forwarded

00:23:53,059 --> 00:23:57,380
it forward it to the VX LAN device it's

00:23:55,190 --> 00:23:59,419
not going to forward any other traffic

00:23:57,380 --> 00:24:05,600
any other VLAN traffic to that vehicle

00:23:59,419 --> 00:24:07,909
on device there TB tables again the

00:24:05,600 --> 00:24:12,169
bridge FDB table for the remote Mac Mac

00:24:07,909 --> 00:24:14,659
2 was untaught on rack - Mac 2 points to

00:24:12,169 --> 00:24:17,480
the VX LAN device VX LAN in turn points

00:24:14,659 --> 00:24:22,920
to the beat up that is on the middle

00:24:17,480 --> 00:24:25,890
rack to check your running kernel stay

00:24:22,920 --> 00:24:29,550
you have many commands IP link show

00:24:25,890 --> 00:24:31,290
bridge VLAN show or bridge a TV show to

00:24:29,550 --> 00:24:35,970
check the flags on your bridge ports you

00:24:31,290 --> 00:24:40,830
can use IP link show the single VX

00:24:35,970 --> 00:24:43,020
landed up it uses the user similar

00:24:40,830 --> 00:24:47,460
configuration except that now you create

00:24:43,020 --> 00:24:50,910
a single b bx LAN device and in addition

00:24:47,460 --> 00:24:57,500
to that what you do is you configure a

00:24:50,910 --> 00:25:07,320
mode on the bridge ports it's called I

00:24:57,500 --> 00:25:08,610
thought I had an hour ok so so the

00:25:07,320 --> 00:25:13,620
tunnel mode

00:25:08,610 --> 00:25:15,720
it's called VLAN tunnel these patches

00:25:13,620 --> 00:25:18,180
actually the IP Row 2 patches went in

00:25:15,720 --> 00:25:20,940
very late thanks to Stephen actually he

00:25:18,180 --> 00:25:24,870
took it and right before the tutorial so

00:25:20,940 --> 00:25:28,140
they must be in his net next tree so you

00:25:24,870 --> 00:25:30,540
can figure B lands and the in addition

00:25:28,140 --> 00:25:33,540
since now you have a bx land single

00:25:30,540 --> 00:25:38,910
baseline device you have to map the VLAN

00:25:33,540 --> 00:25:43,200
to vni so you have a new command or new

00:25:38,910 --> 00:25:48,420
option to bridge belong to also map the

00:25:43,200 --> 00:25:50,190
tunnel ID so this in this model you have

00:25:48,420 --> 00:25:52,730
very few negatives you have only single

00:25:50,190 --> 00:25:55,290
vehicle and device but your FTB table

00:25:52,730 --> 00:26:00,720
you have a single vehicle and advise for

00:25:55,290 --> 00:26:03,750
a DP table for all BN eyes again this

00:26:00,720 --> 00:26:05,130
looks like this it's it's the same thing

00:26:03,750 --> 00:26:06,870
it's just that now you have a single

00:26:05,130 --> 00:26:09,570
vehicle and device called vehicle and 0

00:26:06,870 --> 00:26:13,530
all the bridge remote entries remote max

00:26:09,570 --> 00:26:16,050
are pointing to that VX lon and the VX

00:26:13,530 --> 00:26:20,220
line driver knows exactly which VLAN

00:26:16,050 --> 00:26:26,240
maps - which tunnel ID and it will do

00:26:20,220 --> 00:26:29,610
the translation the key thing here

00:26:26,240 --> 00:26:31,149
different from the previous slide is now

00:26:29,610 --> 00:26:35,429
since you

00:26:31,149 --> 00:26:38,440
but you are mapping the channel ID -

00:26:35,429 --> 00:26:42,940
sorry be LAN to tunnel ID the bridge is

00:26:38,440 --> 00:26:45,899
going to do the translation and yeah

00:26:42,940 --> 00:26:49,479
it's going to you don't have the egress

00:26:45,899 --> 00:26:51,969
pivot egress untagged for VLAN 10 on the

00:26:49,479 --> 00:26:58,749
VX LAN device I think I have a typo

00:26:51,969 --> 00:27:00,009
there it should be B at lag 0 this this

00:26:58,749 --> 00:27:04,950
is another these are again examples

00:27:00,009 --> 00:27:04,950
showing the output from the commands

00:27:05,639 --> 00:27:12,309
other networking technologies yeah you

00:27:08,469 --> 00:27:16,899
can use VX la you can use in the same

00:27:12,309 --> 00:27:18,759
model I have not tried that and yeah the

00:27:16,899 --> 00:27:22,059
next note was for Tom Herbert if he was

00:27:18,759 --> 00:27:26,039
here he would say you tell everybody to

00:27:22,059 --> 00:27:30,609
move to ipv6 networks and just do native

00:27:26,039 --> 00:27:34,989
use native eyalet to do a native network

00:27:30,609 --> 00:27:36,999
virtualization so summary flood and

00:27:34,989 --> 00:27:40,839
learn by default you need a controller

00:27:36,999 --> 00:27:42,489
to make these networks efficient that

00:27:40,839 --> 00:27:44,349
has distributed this MAC addresses on

00:27:42,489 --> 00:27:47,529
every beat ups so that they are

00:27:44,349 --> 00:27:49,659
reachable distributed controllers win

00:27:47,529 --> 00:27:52,210
over centralized controllers for obvious

00:27:49,659 --> 00:27:54,960
reasons many controller solutions

00:27:52,210 --> 00:27:57,639
available some of them are proprietary

00:27:54,960 --> 00:28:00,159
lead for an open standards-based

00:27:57,639 --> 00:28:05,769
controller and that takes us to the next

00:28:00,159 --> 00:28:10,809
topic of this tutorial a VPN so what are

00:28:05,769 --> 00:28:13,269
eaten at VPNs so Ethernet VPN like I

00:28:10,809 --> 00:28:16,029
said this is not IPSec VPNs

00:28:13,269 --> 00:28:22,979
these are VPNs to just provide isolation

00:28:16,029 --> 00:28:26,289
and they are a form of layer 2 VPNs and

00:28:22,979 --> 00:28:28,989
layer 2 VPNs are nothing but again

00:28:26,289 --> 00:28:31,269
providing isolation usually deployed in

00:28:28,989 --> 00:28:36,570
service provider networks to isolate

00:28:31,269 --> 00:28:40,929
customer information or customer tenant

00:28:36,570 --> 00:28:43,749
VLANs and so on there is something

00:28:40,929 --> 00:28:48,489
called VPLS and I know on net there has

00:28:43,749 --> 00:28:51,969
been recent chatter about VPLS VPLS used

00:28:48,489 --> 00:28:54,609
to be the l2 VPN technology service

00:28:51,969 --> 00:28:56,950
providers and everybody used but it had

00:28:54,609 --> 00:28:59,529
some disadvantages and that's why the

00:28:56,950 --> 00:29:01,419
new standard is EBP N and everybody's

00:28:59,529 --> 00:29:05,529
moving to a VPN so I've put some

00:29:01,419 --> 00:29:12,549
pointers to a lot of RFC's in the

00:29:05,529 --> 00:29:15,779
references section ok and evpn so VPLS

00:29:12,549 --> 00:29:18,940
used MPLS labels to separate tenants

00:29:15,779 --> 00:29:21,339
each customer gets MPLS label and that's

00:29:18,940 --> 00:29:24,039
how you encapsulate traffic and send it

00:29:21,339 --> 00:29:26,559
across the service provider network now

00:29:24,039 --> 00:29:30,659
the RFC the only original RFC was

00:29:26,559 --> 00:29:35,159
written for MPLS BGP based Ethernet VPN

00:29:30,659 --> 00:29:39,129
and that's a reference to the RFC

00:29:35,159 --> 00:29:42,969
ye VPN again overcomes some l2 VPN

00:29:39,129 --> 00:29:44,589
technology limitations multihoming

00:29:42,969 --> 00:29:48,519
redundancy there is lots of literature

00:29:44,589 --> 00:29:50,679
on the net about this control plane

00:29:48,519 --> 00:29:52,749
learning the main thing is you do not

00:29:50,679 --> 00:29:55,629
want to flood you want a control plane

00:29:52,749 --> 00:30:00,789
to distribute your Mac's across your l2

00:29:55,629 --> 00:30:03,820
stretched l2 network evpn is capable of

00:30:00,789 --> 00:30:07,989
supporting multiple encapsulations BX

00:30:03,820 --> 00:30:11,139
LAN is one of them and there are

00:30:07,989 --> 00:30:12,639
multiple sub RFC's doing many

00:30:11,139 --> 00:30:16,029
optimizations they're still coming out

00:30:12,639 --> 00:30:20,279
there are very recent RFC's as well to

00:30:16,029 --> 00:30:24,070
do some optimizations in these areas so

00:30:20,279 --> 00:30:28,029
again the same thing evpn used to be an

00:30:24,070 --> 00:30:31,059
l2 VPN provider service technology it's

00:30:28,029 --> 00:30:34,119
being used in the data centers for

00:30:31,059 --> 00:30:37,539
network virtualization to stretch l2

00:30:34,119 --> 00:30:39,369
networks it's you can also use it as a

00:30:37,539 --> 00:30:40,929
data center in to connect data center

00:30:39,369 --> 00:30:43,779
interconnect is nothing but connecting

00:30:40,929 --> 00:30:49,749
your data centers to stretch your l2

00:30:43,779 --> 00:30:52,359
networks across data centers so and I

00:30:49,749 --> 00:30:54,490
think I have not highlighted enough for

00:30:52,359 --> 00:30:57,490
the whole evpn and

00:30:54,490 --> 00:31:01,270
using BGP BGP is a border gateway

00:30:57,490 --> 00:31:04,179
protocol it's your usual routing

00:31:01,270 --> 00:31:07,090
protocol which you use for layer three

00:31:04,179 --> 00:31:09,280
networks so with this with evpn you're

00:31:07,090 --> 00:31:11,770
using you you will be using BGP for

00:31:09,280 --> 00:31:15,340
layer 2 networks as well that's the

00:31:11,770 --> 00:31:19,000
whole idea so it BGP acts as a

00:31:15,340 --> 00:31:22,360
distributed controller for your network

00:31:19,000 --> 00:31:25,809
virtualization solution and there is a

00:31:22,360 --> 00:31:30,309
specific RFC evpn RFC which states that

00:31:25,809 --> 00:31:33,900
you which is adopted for VX lan overlays

00:31:30,309 --> 00:31:40,750
in the data center and that's the

00:31:33,900 --> 00:31:43,210
pointer to the RFC this is just a little

00:31:40,750 --> 00:31:45,309
information about bgp as you know if

00:31:43,210 --> 00:31:47,970
you're running any bgp implementation on

00:31:45,309 --> 00:31:50,470
linux it's basically distributing routes

00:31:47,970 --> 00:31:52,690
talking to you to its peers disputing

00:31:50,470 --> 00:31:56,940
routes and it has a routing database

00:31:52,690 --> 00:31:59,530
which is called as rip and it installs

00:31:56,940 --> 00:32:02,740
routes in the kernel result resolved

00:31:59,530 --> 00:32:06,220
routes in the kernel which end up

00:32:02,740 --> 00:32:08,830
becoming the FIB routes and with a VPN

00:32:06,220 --> 00:32:11,020
now BGP is not only looking at your

00:32:08,830 --> 00:32:14,890
routing table BG people start looking at

00:32:11,020 --> 00:32:21,280
your bridge rich driver FTP database bx9

00:32:14,890 --> 00:32:24,730
driver FTP database and so on so how do

00:32:21,280 --> 00:32:26,679
you deploy a VPN with bgp bgp you run

00:32:24,730 --> 00:32:28,780
the BGP routing protocol on every beat

00:32:26,679 --> 00:32:32,950
up which is a VX land tunnel endpoint

00:32:28,780 --> 00:32:35,230
node each bgp evpn

00:32:32,950 --> 00:32:39,940
instance on each Veta they appear with

00:32:35,230 --> 00:32:42,790
each other they exchange local max which

00:32:39,940 --> 00:32:44,500
they have learnt from some mechanism the

00:32:42,790 --> 00:32:48,179
bridge bridge just learning and these

00:32:44,500 --> 00:32:52,600
are picked up by bgp and they are

00:32:48,179 --> 00:32:57,520
distributed to other peers so what else

00:32:52,600 --> 00:33:00,340
does BGP do BGP learns the VN eyes that

00:32:57,520 --> 00:33:01,390
are configured VLAN to be ni mappings it

00:33:00,340 --> 00:33:03,250
tracks

00:33:01,390 --> 00:33:05,770
MAC address moves for faster convergence

00:33:03,250 --> 00:33:07,600
it knows if a MAC address is moved and

00:33:05,770 --> 00:33:09,309
it bit draws a market

00:33:07,600 --> 00:33:14,679
is just like exactly how it does with

00:33:09,309 --> 00:33:23,160
routes and there is something called

00:33:14,679 --> 00:33:26,169
route types and BGP can distribute only

00:33:23,160 --> 00:33:30,340
sorry only Max or Mac and IP

00:33:26,169 --> 00:33:33,490
combinations and the broadcast an

00:33:30,340 --> 00:33:38,350
unknown male unknown unicast replication

00:33:33,490 --> 00:33:43,110
list is also configured by BGP so in

00:33:38,350 --> 00:33:46,090
this tutorial the examples show only

00:33:43,110 --> 00:33:49,650
configs from tor switches but there is

00:33:46,090 --> 00:33:54,220
no reason you cannot run a VPN on a host

00:33:49,650 --> 00:33:56,169
or a hypervisor I'm pretty sure even

00:33:54,220 --> 00:33:58,480
cumulus has put out some documentation

00:33:56,169 --> 00:34:02,559
on this I'm running it on the on the

00:33:58,480 --> 00:34:06,400
host so here's the little algorithm that

00:34:02,559 --> 00:34:10,780
runs so your leap switches or the Tor

00:34:06,400 --> 00:34:12,520
switches you have the bridge the local

00:34:10,780 --> 00:34:16,389
ports SW p1

00:34:12,520 --> 00:34:20,200
say it's connected to the local rack the

00:34:16,389 --> 00:34:23,530
BX LAN port is assumed that it is

00:34:20,200 --> 00:34:28,119
talking to every other beat up on every

00:34:23,530 --> 00:34:29,980
other lead switch BGP is the routing

00:34:28,119 --> 00:34:30,460
daemon that's running on each of these V

00:34:29,980 --> 00:34:32,619
tips

00:34:30,460 --> 00:34:37,690
that's the additional thing in this

00:34:32,619 --> 00:34:39,129
picture so BGP discovers I'm just going

00:34:37,690 --> 00:34:42,340
to read through the points there

00:34:39,129 --> 00:34:46,440
BGP discovers the local VN i and be LAN

00:34:42,340 --> 00:34:49,330
mappings it reads the bridge f DB table

00:34:46,440 --> 00:34:53,770
distributes them to other VPN EVP and

00:34:49,330 --> 00:34:56,200
peers it learns remote mac be an VN i

00:34:53,770 --> 00:34:58,420
entries from other vp e VPN instances

00:34:56,200 --> 00:35:05,140
and installs it in the local bridge

00:34:58,420 --> 00:35:08,140
table for forwarding so now because of

00:35:05,140 --> 00:35:09,520
BGP moving max or installing max into

00:35:08,140 --> 00:35:11,710
the kernel remote max into the kernel

00:35:09,520 --> 00:35:14,109
the colonel knows exactly where to send

00:35:11,710 --> 00:35:17,020
and it will not flood that's a whole

00:35:14,109 --> 00:35:20,589
idea behind running BGP and having it

00:35:17,020 --> 00:35:23,520
installed all the Max or max of all the

00:35:20,589 --> 00:35:23,520
beams in the data set

00:35:24,210 --> 00:35:30,609
so Arbonne nd suppression there is

00:35:27,730 --> 00:35:36,609
another RFC specific RFC address to this

00:35:30,609 --> 00:35:38,259
and this is the recent patch which was

00:35:36,609 --> 00:35:40,329
accepted in the kernel

00:35:38,259 --> 00:35:43,950
it's a Bridgeport flag called nay

00:35:40,329 --> 00:35:48,279
suppress neighbor's suppress basically

00:35:43,950 --> 00:35:49,869
since BGP knows all the Max and IPS of

00:35:48,279 --> 00:35:52,569
all the beams in the data center it

00:35:49,869 --> 00:35:55,569
could potentially install all of them

00:35:52,569 --> 00:35:57,730
into the kernel and have the kernel

00:35:55,569 --> 00:36:01,450
database ready for the bridge driver to

00:35:57,730 --> 00:36:02,710
actually proxy ARP and nd traffic so as

00:36:01,450 --> 00:36:05,440
you know I open in D traffic our

00:36:02,710 --> 00:36:07,630
broadcast traffic and you want to avoid

00:36:05,440 --> 00:36:11,049
them to be flooded throughout your

00:36:07,630 --> 00:36:14,950
spines and l3 network so you want to

00:36:11,049 --> 00:36:18,609
avoid that and since you know every VM

00:36:14,950 --> 00:36:21,039
that resides in the data center you can

00:36:18,609 --> 00:36:27,039
make the bridge bridge trap a proxy for

00:36:21,039 --> 00:36:38,319
it and yeah this should be in 15 kernel

00:36:27,039 --> 00:36:42,579
I think so the way it can just put all

00:36:38,319 --> 00:36:45,009
this together as a solution so you can

00:36:42,579 --> 00:36:47,230
have a local Snooper process I think I

00:36:45,009 --> 00:36:49,210
will just switch to the picture so you

00:36:47,230 --> 00:36:53,009
can have a local Snooper process running

00:36:49,210 --> 00:36:55,930
on your torso which which snoops all the

00:36:53,009 --> 00:36:59,589
packets from your local racks which is

00:36:55,930 --> 00:37:02,710
local rack VMs because VMs are sending

00:36:59,589 --> 00:37:05,170
guard packets which you can learn from

00:37:02,710 --> 00:37:06,849
so you can have a local Snooper process

00:37:05,170 --> 00:37:09,999
that's what actually our cumulus

00:37:06,849 --> 00:37:12,099
solution does do it learns the mac IP of

00:37:09,999 --> 00:37:15,039
all your local VMS and it's going to

00:37:12,099 --> 00:37:16,210
install it in in the bridge sorry in the

00:37:15,039 --> 00:37:19,989
neighbor table in the kernel neighbor

00:37:16,210 --> 00:37:22,720
table the BGP is going to pick them up

00:37:19,989 --> 00:37:24,700
again this is wire net link Mettling

00:37:22,720 --> 00:37:26,829
notifications it picks them up it sends

00:37:24,700 --> 00:37:29,710
them across to the other BGP instance

00:37:26,829 --> 00:37:34,329
EBP and instance so that way everybody

00:37:29,710 --> 00:37:35,410
knows about every other VM Mac IP and so

00:37:34,329 --> 00:37:37,780
now if

00:37:35,410 --> 00:37:41,220
particularly M is trying for example say

00:37:37,780 --> 00:37:44,170
BM one is trying to are for BM two

00:37:41,220 --> 00:37:47,319
instead of flooding all the art packets

00:37:44,170 --> 00:37:50,520
through the spine the bridge driver is

00:37:47,319 --> 00:37:53,740
going to intercept that our packet and

00:37:50,520 --> 00:37:58,900
it's going to check that it knows this

00:37:53,740 --> 00:38:01,000
my Mac and IP binding in its neighbor

00:37:58,900 --> 00:38:04,420
table and it's going to respond it'll

00:38:01,000 --> 00:38:06,579
respond to that particular ARP message

00:38:04,420 --> 00:38:10,809
our poor neighbor discovery message and

00:38:06,579 --> 00:38:15,390
this is part of the art it's called our

00:38:10,809 --> 00:38:15,390
poor neighbor or art or neighbor proxy

00:38:15,480 --> 00:38:25,990
the next few slides are just showing an

00:38:19,539 --> 00:38:30,660
example there is an example FRR config

00:38:25,990 --> 00:38:34,869
FRR is a routing daemon implementation

00:38:30,660 --> 00:38:38,700
if you all know quagga quagga is the

00:38:34,869 --> 00:38:42,670
parent of FRR quagga was recently forked

00:38:38,700 --> 00:38:47,260
it's called free-range routing there is

00:38:42,670 --> 00:38:50,950
a pointer to its implementation so that

00:38:47,260 --> 00:38:56,140
has an e VPN implementation contributed

00:38:50,950 --> 00:38:59,220
by cumulus and yeah it understands all

00:38:56,140 --> 00:39:02,799
the bridge labor and routing net link

00:38:59,220 --> 00:39:07,890
information from the kernel and it's

00:39:02,799 --> 00:39:11,410
capable of doing this so we do use we

00:39:07,890 --> 00:39:14,619
override the NT and TF ext learnt flag

00:39:11,410 --> 00:39:17,170
which is a bridge flag or sorry FTB

00:39:14,619 --> 00:39:22,119
entry or nay entry flag to indicate that

00:39:17,170 --> 00:39:24,990
this is an externally learnt entry this

00:39:22,119 --> 00:39:28,240
is also used by switch tab to indicate

00:39:24,990 --> 00:39:30,069
Hardware learnt entries so we use the

00:39:28,240 --> 00:39:31,900
same flag actually BGP uses the same

00:39:30,069 --> 00:39:35,079
flag to indicate that this is a remote

00:39:31,900 --> 00:39:39,520
entry that I have learnt from the EBP

00:39:35,079 --> 00:39:42,520
and peer so the example I don't cover

00:39:39,520 --> 00:39:44,710
both single VX LAN and multiple bx9

00:39:42,520 --> 00:39:48,750
devices this example is to keep it

00:39:44,710 --> 00:39:48,750
simple just a single BX LAN instance

00:39:48,760 --> 00:39:53,830
I've also put an example I have done to

00:39:51,910 --> 00:39:55,780
example I have done to is the network

00:39:53,830 --> 00:40:00,190
interface manager I have talked about it

00:39:55,780 --> 00:40:02,680
in previous net deaths yeah there is a

00:40:00,190 --> 00:40:05,830
pointer to simpler configuration instead

00:40:02,680 --> 00:40:07,900
of using IP link directly you can use a

00:40:05,830 --> 00:40:13,330
template eyes or file format

00:40:07,900 --> 00:40:26,170
configuration in interest of time I'm

00:40:13,330 --> 00:40:28,540
going to rush through these slides yeah

00:40:26,170 --> 00:40:30,550
this EVP and specific config what you

00:40:28,540 --> 00:40:33,070
want to do in such networks is you want

00:40:30,550 --> 00:40:36,070
to turn off learning because you know

00:40:33,070 --> 00:40:39,970
that BGP is going to learn for you the

00:40:36,070 --> 00:40:41,680
remote remote max especially so you turn

00:40:39,970 --> 00:40:46,660
off learning on the BX LAN port the

00:40:41,680 --> 00:40:51,010
tunnel ports and yeah you can turn off

00:40:46,660 --> 00:40:52,840
flooding if you so since our and nd can

00:40:51,010 --> 00:40:58,360
be proxied you can completely turn off

00:40:52,840 --> 00:41:01,000
flooding how to check the config this is

00:40:58,360 --> 00:41:04,990
you can use the bridge and IPE commands

00:41:01,000 --> 00:41:09,420
from IP route 2 this is a snapshot of

00:41:04,990 --> 00:41:12,550
the config troubleshooting and debugging

00:41:09,420 --> 00:41:14,770
so yeah I've been spending a lot of time

00:41:12,550 --> 00:41:19,510
debugging such networks these days so it

00:41:14,770 --> 00:41:23,350
is it can be a pain now you have F TB or

00:41:19,510 --> 00:41:26,100
MAC addresses learnt by hardware

00:41:23,350 --> 00:41:29,440
appearing in the kernel these could be

00:41:26,100 --> 00:41:33,220
bridge driver itself learning through

00:41:29,440 --> 00:41:36,130
packets data path or now there is also

00:41:33,220 --> 00:41:38,740
BGP who is learning from remote entities

00:41:36,130 --> 00:41:41,740
and trying to program a entry into the

00:41:38,740 --> 00:41:44,320
kernel the typical problems in such

00:41:41,740 --> 00:41:48,760
cases is what happens when a VM moves

00:41:44,320 --> 00:41:53,320
from wonder act or the other so you BGP

00:41:48,760 --> 00:41:55,330
until BGP has to come in it has to learn

00:41:53,320 --> 00:41:57,520
via data path sees see that the Mac

00:41:55,330 --> 00:42:00,790
moves it has to communicate to the other

00:41:57,520 --> 00:42:01,960
BGP instance and update the kernel with

00:42:00,790 --> 00:42:04,059
the right flags

00:42:01,960 --> 00:42:06,609
and when all these things are in play

00:42:04,059 --> 00:42:10,030
and packets are flying through all these

00:42:06,609 --> 00:42:13,390
leaves and so on it's it's it can be a

00:42:10,030 --> 00:42:17,430
pain to debug how a particular bridge or

00:42:13,390 --> 00:42:21,579
be excellent FTB entry got modified

00:42:17,430 --> 00:42:24,849
net-net link notifications are good but

00:42:21,579 --> 00:42:27,880
then they don't tell you who exactly did

00:42:24,849 --> 00:42:30,579
the change so yeah there are a couple of

00:42:27,880 --> 00:42:35,790
things that one can use bridge FTB show

00:42:30,579 --> 00:42:38,980
bridge monitor link and monitor FTB and

00:42:35,790 --> 00:42:42,069
recently I've added trace points for

00:42:38,980 --> 00:42:45,069
bridge these these can be really helpful

00:42:42,069 --> 00:42:47,500
to tell you which exact process actually

00:42:45,069 --> 00:42:49,329
try to change your FTP entry whether it

00:42:47,500 --> 00:42:51,790
was due to a bit remote learn or a local

00:42:49,329 --> 00:42:54,700
learn or your local Snooper process

00:42:51,790 --> 00:42:57,450
trying to and most of these problems are

00:42:54,700 --> 00:43:01,329
due to both beams moving between racks

00:42:57,450 --> 00:43:04,569
the thing still in the works is perf

00:43:01,329 --> 00:43:10,089
probes 4px LAN driver for the same thing

00:43:04,569 --> 00:43:11,950
the expand FTP and then references there

00:43:10,089 --> 00:43:19,650
are tons of them and these RFC is

00:43:11,950 --> 00:43:23,170
referred to many more RFC's so Fri

00:43:19,650 --> 00:43:28,059
there is a webinar on e VPN which is

00:43:23,170 --> 00:43:30,010
which is very useful and yeah bgp

00:43:28,059 --> 00:43:32,079
configure I don't think I want to get

00:43:30,010 --> 00:43:35,829
into P ship you can fake bgp config and

00:43:32,079 --> 00:43:39,640
itself be a tutorial but this is just an

00:43:35,829 --> 00:43:41,920
example if anybody wants to try and this

00:43:39,640 --> 00:43:43,780
is the config if you don't want to use

00:43:41,920 --> 00:43:49,059
directly IP route to this is another way

00:43:43,780 --> 00:43:52,079
using I have done - - config that's

00:43:49,059 --> 00:43:53,630
about it thank you

00:43:52,079 --> 00:43:59,919
any questions

00:43:53,630 --> 00:43:59,919
[Applause]

00:44:01,420 --> 00:44:08,690
[Music]

00:44:03,380 --> 00:44:13,009
about the snooping process is it part of

00:44:08,690 --> 00:44:18,200
four or is it part of our No today it's

00:44:13,009 --> 00:44:20,869
not you can use so we have a simple

00:44:18,200 --> 00:44:23,329
process that actually listens to our

00:44:20,869 --> 00:44:23,960
packets and guard packets and adds the

00:44:23,329 --> 00:44:28,009
lay entry

00:44:23,960 --> 00:44:30,200
it's very trivial to add but yeah it's

00:44:28,009 --> 00:44:32,420
not part of a power it could be part of

00:44:30,200 --> 00:44:35,089
a powder in the future so this process

00:44:32,420 --> 00:44:36,859
is not yet available as open source and

00:44:35,089 --> 00:44:39,739
gate sorry

00:44:36,859 --> 00:44:42,619
so is this process available as open

00:44:39,739 --> 00:44:45,109
source on gate somewhere today it's not

00:44:42,619 --> 00:44:48,079
but I don't see a reason why it can't be

00:44:45,109 --> 00:44:50,869
so we can we can put some examples out

00:44:48,079 --> 00:44:57,859
and github it's a very simple ARP

00:44:50,869 --> 00:45:01,219
Snooper process yeah no it's listening

00:44:57,859 --> 00:45:03,769
to packets actually packets yeah so you

00:45:01,219 --> 00:45:10,789
open a socket and listen to guard

00:45:03,769 --> 00:45:20,359
packets are on protocol share code until

00:45:10,789 --> 00:45:25,670
it goes on github I know that's that's

00:45:20,359 --> 00:45:29,410
slightly different but that is available

00:45:25,670 --> 00:45:29,410
yes that's true that's available

00:45:41,040 --> 00:45:48,030
so thank you very much for trying to

00:45:43,780 --> 00:45:51,609
explain a very difficult topic to people

00:45:48,030 --> 00:45:54,010
one thing thinking back is to put this

00:45:51,609 --> 00:45:56,440
in context this is like the modern

00:45:54,010 --> 00:45:59,680
replacement for two technologies that

00:45:56,440 --> 00:46:01,020
have pretty much died which is trill and

00:45:59,680 --> 00:46:04,630
00:46:01,020 --> 00:46:08,470
shortest path bridging yes and both of

00:46:04,630 --> 00:46:11,230
those were mired in vendor proprietary

00:46:08,470 --> 00:46:13,930
and complexity and the one thing they

00:46:11,230 --> 00:46:17,020
did that this doesn't do is you were

00:46:13,930 --> 00:46:19,720
actually able to multi mouth yes because

00:46:17,020 --> 00:46:22,780
this is it basically a layer to overlay

00:46:19,720 --> 00:46:25,990
over layer three the layer three

00:46:22,780 --> 00:46:30,760
substrate can't do any per flow things

00:46:25,990 --> 00:46:34,000
on the L two packets and I was wondering

00:46:30,760 --> 00:46:36,670
have you gotten any am i right in

00:46:34,000 --> 00:46:39,400
assuming that trill in 802 shortest path

00:46:36,670 --> 00:46:41,619
bridging are both dead or or have you

00:46:39,400 --> 00:46:47,800
gotten lots of requests for them and no

00:46:41,619 --> 00:46:52,839
we don't have okay what's the cumulus

00:46:47,800 --> 00:46:54,760
and we have already warned okay I mean I

00:46:52,839 --> 00:46:57,099
mean periodically I've see trouble fly

00:46:54,760 --> 00:47:08,500
by and then dies nobody ever goes

00:46:57,099 --> 00:47:11,050
anywhere with it so so there's a third

00:47:08,500 --> 00:47:12,660
technology that's alive but trooper

00:47:11,050 --> 00:47:17,589
mentioned which is interesting which is

00:47:12,660 --> 00:47:19,599
controller less l2 Network stretching

00:47:17,589 --> 00:47:21,730
right I mean basically you've eliminated

00:47:19,599 --> 00:47:24,869
and as you said instead of having vendor

00:47:21,730 --> 00:47:27,280
proprietary or if not proprietary but

00:47:24,869 --> 00:47:29,010
solution specific ways in which to

00:47:27,280 --> 00:47:31,119
bridge the and stitch these networks

00:47:29,010 --> 00:47:32,440
European gives you a standardized and

00:47:31,119 --> 00:47:34,869
BGP is running anywhere in your

00:47:32,440 --> 00:47:38,859
substrate for the multipathing case by

00:47:34,869 --> 00:47:40,390
the way multi VX Lonnie CMP is something

00:47:38,859 --> 00:47:42,910
that will solve the problem because you

00:47:40,390 --> 00:47:45,579
will get the underlay Network now aware

00:47:42,910 --> 00:47:47,109
of the overlays flows and and steer so

00:47:45,579 --> 00:47:48,750
it will address some of the concerns it

00:47:47,109 --> 00:47:50,799
will you will still not get end-to-end

00:47:48,750 --> 00:47:54,179
multipath because l2 can

00:47:50,799 --> 00:47:54,179

YouTube URL: https://www.youtube.com/watch?v=OXqJnqH7ZTU


