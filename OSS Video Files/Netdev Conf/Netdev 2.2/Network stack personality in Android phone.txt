Title: Network stack personality in Android phone
Publication date: 2018-03-14
Playlist: Netdev 2.2
Description: 
	Speaker: Cristina Opriceana, Hajime Tazaki
Friday November 08th, 2017 
Seoul, Korea
https://www.netdevconf.org/2.2/session.html?tazaki-mptcp-talk
Captions: 
	00:00:01,790 --> 00:00:12,030
okay okay hello everybody my name is

00:00:07,470 --> 00:00:14,190
Hajime from myosin Rob I'm happy to

00:00:12,030 --> 00:00:17,250
present this topic again in this

00:00:14,190 --> 00:00:19,110
conference I'm also going I'm again

00:00:17,250 --> 00:00:21,360
going to talk about the use of space

00:00:19,110 --> 00:00:23,940
networks fact based on my current

00:00:21,360 --> 00:00:28,100
project so this is the joint work of the

00:00:23,940 --> 00:00:31,710
my past internship students and Kristina

00:00:28,100 --> 00:00:35,130
piscina which was happen in the last

00:00:31,710 --> 00:00:40,200
summer so I have been talked about a

00:00:35,130 --> 00:00:42,030
couple of use of space library Network

00:00:40,200 --> 00:00:44,520
stack talk in the past

00:00:42,030 --> 00:00:47,760
net web conference and all that is of my

00:00:44,520 --> 00:00:50,010
talk I was talking about the generic

00:00:47,760 --> 00:00:51,899
general networks not in the user space

00:00:50,010 --> 00:00:54,629
and also presenting the connect

00:00:51,899 --> 00:00:57,930
continuous integration tests based on

00:00:54,629 --> 00:01:01,829
the space networks as an SEC was trying

00:00:57,930 --> 00:01:04,229
to do and some somebody and jelly jelly

00:01:01,829 --> 00:01:07,290
chief from Google also presented an kind

00:01:04,229 --> 00:01:10,260
of performance improvement of the user

00:01:07,290 --> 00:01:13,020
space network structure and I also

00:01:10,260 --> 00:01:15,240
presented resting and with the different

00:01:13,020 --> 00:01:21,780
topic and this time was going to talk

00:01:15,240 --> 00:01:24,030
about Android rental so this is probably

00:01:21,780 --> 00:01:28,260
the popular chest that the Android is

00:01:24,030 --> 00:01:31,909
deployed on people hugest size of

00:01:28,260 --> 00:01:35,369
Android has a huge size of deployment

00:01:31,909 --> 00:01:37,619
they provide more than billions devices

00:01:35,369 --> 00:01:41,850
installed installed in afghani

00:01:37,619 --> 00:01:44,220
and the right side chart shows it's a

00:01:41,850 --> 00:01:47,520
little hard to decolonize but the

00:01:44,220 --> 00:01:50,390
distributions of the Android and the

00:01:47,520 --> 00:01:53,909
best operating system installed in every

00:01:50,390 --> 00:01:57,119
Android devices and this was taken this

00:01:53,909 --> 00:02:01,110
snapshot was taken at a couple of days

00:01:57,119 --> 00:02:04,200
ago and even though this ends days the

00:02:01,110 --> 00:02:07,459
majority of the Android firmware is

00:02:04,200 --> 00:02:13,109
based on the badge on Android version 6

00:02:07,459 --> 00:02:14,490
which was it is mushroom arose and the

00:02:13,109 --> 00:02:18,960
numbers on on

00:02:14,490 --> 00:02:22,800
this chart is representing that the base

00:02:18,960 --> 00:02:25,710
color version on the Linux kernel so as

00:02:22,800 --> 00:02:27,930
you can see the most of the deployed and

00:02:25,710 --> 00:02:30,020
the corrected information on the Android

00:02:27,930 --> 00:02:34,140
devices is theory using three-point

00:02:30,020 --> 00:02:36,990
based scanner although there are so many

00:02:34,140 --> 00:02:40,550
back ports and security related updates

00:02:36,990 --> 00:02:46,410
into this kind of Android versions

00:02:40,550 --> 00:02:50,130
operating system but one might Harbor

00:02:46,410 --> 00:02:52,590
questions that you you guys develop our

00:02:50,130 --> 00:02:55,800
upstream you improvement to the rate

00:02:52,590 --> 00:02:58,860
that is upstream condom when you operate

00:02:55,800 --> 00:03:02,820
at streamcon upstream code is available

00:02:58,860 --> 00:03:06,150
on the Android devices if you have come

00:03:02,820 --> 00:03:10,130
up with nice great idea of the network

00:03:06,150 --> 00:03:13,050
protocols or network devices what what

00:03:10,130 --> 00:03:15,000
what can we do if you want to install

00:03:13,050 --> 00:03:18,450
run and try to play with the angle

00:03:15,000 --> 00:03:20,550
devices so the answers for those

00:03:18,450 --> 00:03:24,450
questions will be we need to wait until

00:03:20,550 --> 00:03:28,020
the the base version will be operated in

00:03:24,450 --> 00:03:30,690
the Android Android platform well you

00:03:28,020 --> 00:03:33,680
want to back port each of the functions

00:03:30,690 --> 00:03:36,860
that you you were introducing

00:03:33,680 --> 00:03:42,030
and if you want to test use with your

00:03:36,860 --> 00:03:44,130
own addition to the linux kernel with

00:03:42,030 --> 00:03:47,250
the android devices you can actually

00:03:44,130 --> 00:03:50,460
create your own color with and putting

00:03:47,250 --> 00:03:54,020
this color image color into your android

00:03:50,460 --> 00:03:57,480
custom from your images so this kind of

00:03:54,020 --> 00:04:00,480
benefit of the Android system you can

00:03:57,480 --> 00:04:04,320
freely organize your software which

00:04:00,480 --> 00:04:06,690
running on top of the other devices but

00:04:04,320 --> 00:04:09,450
if you consider the wrong time he'll

00:04:06,690 --> 00:04:12,390
consider the broader delivery of the

00:04:09,450 --> 00:04:15,480
software updates it might be taking so

00:04:12,390 --> 00:04:20,340
much long time to do all of the vision

00:04:15,480 --> 00:04:23,640
services and under committee has been

00:04:20,340 --> 00:04:25,200
already aware of these issues and there

00:04:23,640 --> 00:04:27,000
are a couple approaches to alleviate

00:04:25,200 --> 00:04:30,610
this kind of problem

00:04:27,000 --> 00:04:33,490
they're obvious obvious approach it to

00:04:30,610 --> 00:04:37,000
the such as update is introducing the

00:04:33,490 --> 00:04:40,569
batch ization technologies but the

00:04:37,000 --> 00:04:43,810
overheads with the hypervisor base

00:04:40,569 --> 00:04:46,360
technology should be not to not be

00:04:43,810 --> 00:04:50,669
tangible especially for this kind of

00:04:46,360 --> 00:04:54,039
embraced devices and there is the new

00:04:50,669 --> 00:04:57,580
project which is called project tribal I

00:04:54,039 --> 00:05:00,340
think this is this contribution is

00:04:57,580 --> 00:05:02,830
available since the latest Android

00:05:00,340 --> 00:05:05,289
version so the motivation of this

00:05:02,830 --> 00:05:06,849
project is trying to decouple the core

00:05:05,289 --> 00:05:09,370
software component inside the Android

00:05:06,849 --> 00:05:12,849
devices and trying to introduce a new

00:05:09,370 --> 00:05:15,490
layer between the hardware vendor

00:05:12,849 --> 00:05:18,849
specific implementation and operating

00:05:15,490 --> 00:05:22,930
system layer so by the coupling those

00:05:18,849 --> 00:05:26,349
two different parts the delivery process

00:05:22,930 --> 00:05:29,620
should be and shorter than the previous

00:05:26,349 --> 00:05:34,000
and design on the Android from you and

00:05:29,620 --> 00:05:35,800
there there is also new activities to

00:05:34,000 --> 00:05:39,250
delight operating system from scratch

00:05:35,800 --> 00:05:41,919
for the Android mobile it's gonna be not

00:05:39,250 --> 00:05:44,860
Android but for the mobile devices in

00:05:41,919 --> 00:05:48,490
general but the project was called

00:05:44,860 --> 00:05:50,289
freesias and I guess they studied their

00:05:48,490 --> 00:05:55,750
writing and operating system from

00:05:50,289 --> 00:06:00,750
scratch in Las Vegas and we can express

00:05:55,750 --> 00:06:04,740
so much expectation for that project but

00:06:00,750 --> 00:06:09,819
it's gonna take long I mean the project

00:06:04,740 --> 00:06:14,500
has been started recently so there's not

00:06:09,819 --> 00:06:17,500
much production code at this moment and

00:06:14,500 --> 00:06:24,009
if you want just if you just want to

00:06:17,500 --> 00:06:27,370
include you can also use the UK also

00:06:24,009 --> 00:06:33,819
introduced a transport protocol over UDP

00:06:27,370 --> 00:06:36,250
as quickly string now our approach is

00:06:33,819 --> 00:06:38,229
slightly defined which is called a

00:06:36,250 --> 00:06:43,930
network stack passionately

00:06:38,229 --> 00:06:46,689
and this is it this is just the

00:06:43,930 --> 00:06:49,779
deployment way to introduce the network

00:06:46,689 --> 00:06:52,360
suck and implement in the user space so

00:06:49,779 --> 00:06:54,879
everything is implementing me in user

00:06:52,360 --> 00:06:57,669
space but so you don't have to depress

00:06:54,879 --> 00:07:00,460
the host operating system :

00:06:57,669 --> 00:07:03,460
in order to extend the network stack

00:07:00,460 --> 00:07:05,889
functionality but at the same time we

00:07:03,460 --> 00:07:08,219
try to preserve all the functionality

00:07:05,889 --> 00:07:10,479
available for the existing application

00:07:08,219 --> 00:07:12,610
otherwise we need to delete all the

00:07:10,479 --> 00:07:16,210
application as well as the network's if

00:07:12,610 --> 00:07:19,349
you have a new network stack so we call

00:07:16,210 --> 00:07:22,900
this kind of functionality as the news

00:07:19,349 --> 00:07:25,300
which is also a run to the field file

00:07:22,900 --> 00:07:31,379
system in user space but the network

00:07:25,300 --> 00:07:34,779
stack part of this uses face so

00:07:31,379 --> 00:07:38,080
everybody doesn't don't be about user

00:07:34,779 --> 00:07:39,969
space implementation especially for the

00:07:38,080 --> 00:07:41,069
network stack part as well as the file

00:07:39,969 --> 00:07:45,000
system path

00:07:41,069 --> 00:07:48,430
somebody says those kind of tools toys

00:07:45,000 --> 00:07:50,319
create by the misguided people and

00:07:48,430 --> 00:07:55,089
somebody said this is kind of selfish

00:07:50,319 --> 00:07:57,610
way to introduce something but I I

00:07:55,089 --> 00:08:00,819
partially agree with that but my

00:07:57,610 --> 00:08:04,149
motivation for doing this training stuff

00:08:00,819 --> 00:08:10,569
is trying to present that this kind of

00:08:04,149 --> 00:08:13,990
toy is practically practically useful so

00:08:10,569 --> 00:08:15,960
I'm going to introduce about this the

00:08:13,990 --> 00:08:19,089
internals of the software that we

00:08:15,960 --> 00:08:23,889
develop developing the project name is

00:08:19,089 --> 00:08:25,870
called Linux kernel really ok I have

00:08:23,889 --> 00:08:31,210
been talking about this in the past but

00:08:25,870 --> 00:08:34,449
I try to do again so air care is out of

00:08:31,210 --> 00:08:37,180
three architecture which is which is

00:08:34,449 --> 00:08:39,849
located and under access directory of

00:08:37,180 --> 00:08:42,459
the Linux kernel and it's totally

00:08:39,849 --> 00:08:44,740
Hardware independent the hardware

00:08:42,459 --> 00:08:46,540
dependent part can be resolved at the

00:08:44,740 --> 00:08:51,300
the other part

00:08:46,540 --> 00:08:55,150
so by introducing architecture we can

00:08:51,300 --> 00:08:57,430
completely use the existing Linux kernel

00:08:55,150 --> 00:09:02,200
tree called other user space reverie for

00:08:57,430 --> 00:09:05,650
example the user space but is only only

00:09:02,200 --> 00:09:08,770
one example for the various available

00:09:05,650 --> 00:09:12,760
platform because this is just a library

00:09:08,770 --> 00:09:15,970
if you want to learn some application on

00:09:12,760 --> 00:09:19,120
the Europe own protocol including this

00:09:15,970 --> 00:09:20,410
library maybe you can benefit with Linux

00:09:19,120 --> 00:09:23,620
networks are in the different

00:09:20,410 --> 00:09:25,870
environment for example currently

00:09:23,620 --> 00:09:29,830
racquel supports supposed to Linux is a

00:09:25,870 --> 00:09:32,860
space execution as well as Windows and

00:09:29,830 --> 00:09:37,090
FreeBSD user space and somebody also

00:09:32,860 --> 00:09:40,150
pray with the UEFI boot road to mount

00:09:37,090 --> 00:09:44,140
the ext4 filesystem and so insensible

00:09:40,150 --> 00:09:45,520
inside the boot road and I have also

00:09:44,140 --> 00:09:47,460
paired with the network shmita

00:09:45,520 --> 00:09:52,270
integration you know that this

00:09:47,460 --> 00:09:56,770
continuous continuously integrate to

00:09:52,270 --> 00:10:02,290
detect elevation bugs and this time is

00:09:56,770 --> 00:10:05,490
extension is randy's but to support not

00:10:02,290 --> 00:10:08,740
to run an application with this library

00:10:05,490 --> 00:10:13,060
so the project status is somehow stalls

00:10:08,740 --> 00:10:16,180
I mean the initial error she was sent in

00:10:13,060 --> 00:10:19,060
the two years ago by Octavian Purdy and

00:10:16,180 --> 00:10:22,030
the primary primary developer of this

00:10:19,060 --> 00:10:24,730
project and since then there's no there

00:10:22,030 --> 00:10:28,870
is no update for the in there came

00:10:24,730 --> 00:10:33,730
raining risks but we have been working

00:10:28,870 --> 00:10:37,240
on the github project page and by

00:10:33,730 --> 00:10:40,810
improving a bunch of functionality to

00:10:37,240 --> 00:10:45,130
the code to the code base so we plan to

00:10:40,810 --> 00:10:47,200
update our budget and try to propose

00:10:45,130 --> 00:10:51,030
again in the future but we are not sure

00:10:47,200 --> 00:10:51,030
where it's going to be

00:10:51,470 --> 00:10:58,700
and extension to this healthcare this

00:10:54,680 --> 00:11:02,480
time is and trying to support Android

00:10:58,700 --> 00:11:05,000
devices which is just and kind of the

00:11:02,480 --> 00:11:12,500
the improvement to the cross compilation

00:11:05,000 --> 00:11:15,770
tool for the lkl we also extended the

00:11:12,500 --> 00:11:17,840
network back-end available for air care

00:11:15,770 --> 00:11:21,410
which was implementing the implemented

00:11:17,840 --> 00:11:24,800
as a battery or the basis so in order to

00:11:21,410 --> 00:11:28,220
support a cellular interface equipped in

00:11:24,800 --> 00:11:31,540
under the devices we extended the packet

00:11:28,220 --> 00:11:36,980
socket extension 200 only dighby

00:11:31,540 --> 00:11:41,330
encapsulation and to support Android

00:11:36,980 --> 00:11:44,960
application implementing in Java we also

00:11:41,330 --> 00:11:47,390
have to have to extend our hijack debris

00:11:44,960 --> 00:11:50,480
I'm going to detail about this hijack

00:11:47,390 --> 00:11:53,450
library later but this is the list of

00:11:50,480 --> 00:11:57,530
the extensions so by using this library

00:11:53,450 --> 00:12:00,110
how to use it on your Android devices

00:11:57,530 --> 00:12:03,440
so here application in the console

00:12:00,110 --> 00:12:12,110
application we can just use the LD

00:12:03,440 --> 00:12:15,920
preload environment variable with the

00:12:12,110 --> 00:12:18,820
name of the library hayek library and if

00:12:15,920 --> 00:12:21,800
the application is the java application

00:12:18,820 --> 00:12:24,350
Android provides on some way to

00:12:21,800 --> 00:12:26,420
introduce environmental variable by

00:12:24,350 --> 00:12:29,720
configuring the properties of the

00:12:26,420 --> 00:12:33,080
applications and with rivalry

00:12:29,720 --> 00:12:35,960
configuration we also can configure the

00:12:33,080 --> 00:12:41,690
network stack itself by writing this

00:12:35,960 --> 00:12:44,960
kind of JSON files in order to configure

00:12:41,690 --> 00:12:47,440
an IP address as well as various kernel

00:12:44,960 --> 00:12:47,440
parameters

00:12:49,529 --> 00:12:58,600
so the next is the one is the hijack

00:12:52,600 --> 00:13:03,189
library hijack library is it's a way to

00:12:58,600 --> 00:13:06,699
depress the available function call into

00:13:03,189 --> 00:13:08,579
the Linux kernel Linux kernel reverie

00:13:06,699 --> 00:13:14,170
which was implemented in the user space

00:13:08,579 --> 00:13:17,350
so typical application usually invoked a

00:13:14,170 --> 00:13:21,879
system call and is going to do it is

00:13:17,350 --> 00:13:24,670
going to be the host column but by using

00:13:21,879 --> 00:13:27,819
the hijack library told system call cam

00:13:24,670 --> 00:13:31,930
will be directed into the user space so

00:13:27,819 --> 00:13:35,920
the code path should be this dotted line

00:13:31,930 --> 00:13:37,029
in order to in order to use the Linux

00:13:35,920 --> 00:13:41,860
kernel library

00:13:37,029 --> 00:13:45,399
so by doing so we need to depress the

00:13:41,860 --> 00:13:49,870
standard library symbols is already pre

00:13:45,399 --> 00:13:53,639
route but we have some some serious

00:13:49,870 --> 00:13:56,050
issues with the genuine standard library

00:13:53,639 --> 00:14:01,300
available in the most desktop operating

00:13:56,050 --> 00:14:03,879
system but I'm not getting into detail

00:14:01,300 --> 00:14:06,910
but the Bionic stands reduced and the

00:14:03,879 --> 00:14:10,600
library available in the Android

00:14:06,910 --> 00:14:13,779
platform is relatively simple and the

00:14:10,600 --> 00:14:18,069
more familiar for this kind of use is so

00:14:13,779 --> 00:14:21,519
we just and then we place some socket

00:14:18,069 --> 00:14:27,220
related symbol which going to be the

00:14:21,519 --> 00:14:29,819
Linux kernel libraries so by using those

00:14:27,220 --> 00:14:33,850
extensions so we are going to present

00:14:29,819 --> 00:14:36,999
the some of the example these cases to

00:14:33,850 --> 00:14:42,429
introduce new network stack functions

00:14:36,999 --> 00:14:47,439
and I picked the multiple TCP extension

00:14:42,429 --> 00:14:50,610
as an example of the kernel extension so

00:14:47,439 --> 00:14:54,309
much participe is kind of wrong time

00:14:50,610 --> 00:14:58,089
adultery extension which extended the

00:14:54,309 --> 00:15:01,180
existing TCP sub system and the goal for

00:14:58,089 --> 00:15:04,630
this extension is trying to utilize

00:15:01,180 --> 00:15:09,750
utilize the multiple passes available in

00:15:04,630 --> 00:15:12,850
the and endpoint devices so if you

00:15:09,750 --> 00:15:18,250
devices has the to two different

00:15:12,850 --> 00:15:24,120
connection to the to the internet so the

00:15:18,250 --> 00:15:27,400
endpoint can utilize aggregated passes

00:15:24,120 --> 00:15:30,730
which might be benefit better better

00:15:27,400 --> 00:15:34,510
better throughput for the downloading

00:15:30,730 --> 00:15:38,580
uploading data and by having the

00:15:34,510 --> 00:15:43,540
multiple passes the redundancies of

00:15:38,580 --> 00:15:45,310
redundancy is also a pre accomplished by

00:15:43,540 --> 00:15:50,260
conducting the handover between the

00:15:45,310 --> 00:15:54,810
available network interfaces so I'm

00:15:50,260 --> 00:15:54,810
going to show some of the demo by using

00:16:00,120 --> 00:16:07,150
this is this is this I mean Nexus 5

00:16:04,300 --> 00:16:11,940
phone installing the stock verge on the

00:16:07,150 --> 00:16:15,940
Android corner so in this version and

00:16:11,940 --> 00:16:20,500
I'm using my custom web browser

00:16:15,940 --> 00:16:24,150
application which to try to load the

00:16:20,500 --> 00:16:24,150
hijack I believe I mentioned before

00:16:27,870 --> 00:16:34,300
verification site which verifies the

00:16:31,380 --> 00:16:39,490
client device is capable with the most

00:16:34,300 --> 00:16:42,820
participe of not so with the Chrome

00:16:39,490 --> 00:16:48,060
browser this site should should present

00:16:42,820 --> 00:16:51,000
no as a result of these pages but with

00:16:48,060 --> 00:16:53,530
you the steps user space extension

00:16:51,000 --> 00:16:57,760
latitude dynamically during the

00:16:53,530 --> 00:17:02,620
execution you can easily press the

00:16:57,760 --> 00:17:06,540
network stack and if you run some test

00:17:02,620 --> 00:17:06,540
bed over in this site

00:17:07,180 --> 00:17:15,459
the grass shoots so good but they're

00:17:12,959 --> 00:17:28,449
actually using the multi-purpose up to

00:17:15,459 --> 00:17:30,640
sometimes so and you can also use some

00:17:28,449 --> 00:17:36,000
sort of the custom application so this

00:17:30,640 --> 00:17:40,150
application is just executing available

00:17:36,000 --> 00:17:45,670
listing application inside this phone

00:17:40,150 --> 00:17:50,530
and he changed the library name you can

00:17:45,670 --> 00:17:52,929
see the car comment will they put the

00:17:50,530 --> 00:18:02,620
the client is not capable with some

00:17:52,929 --> 00:18:05,190
elasticity okay it's not coming so I can

00:18:02,620 --> 00:18:05,190
skip this part

00:18:11,130 --> 00:18:19,870
okay so one natural question for this

00:18:16,660 --> 00:18:23,530
kind of stuff is how much penalty do you

00:18:19,870 --> 00:18:27,010
have with this user space extension and

00:18:23,530 --> 00:18:30,610
we are going to measure the differences

00:18:27,010 --> 00:18:34,480
between this user space execution on the

00:18:30,610 --> 00:18:36,160
network stack as well as the stock page

00:18:34,480 --> 00:18:40,150
on the network stack in the under the

00:18:36,160 --> 00:18:43,150
phone so we conducted this typical

00:18:40,150 --> 00:18:44,860
network measurement by using by using a

00:18:43,150 --> 00:18:48,060
mobile phone as well as the server

00:18:44,860 --> 00:18:52,060
installed with the most specific honor

00:18:48,060 --> 00:18:54,670
and we use the net pass with the 10

00:18:52,060 --> 00:18:57,220
second TV stream and the opposite

00:18:54,670 --> 00:19:00,360
direction and with the five trainers

00:18:57,220 --> 00:19:04,270
between different different target sites

00:19:00,360 --> 00:19:07,060
and we also collected some of the CPU

00:19:04,270 --> 00:19:09,730
utilization information reported from

00:19:07,060 --> 00:19:17,620
the network command and those are

00:19:09,730 --> 00:19:22,660
plotted on the and the box plot so in

00:19:17,620 --> 00:19:26,620
this paper one green one represents the

00:19:22,660 --> 00:19:28,420
achieved good but represented with this

00:19:26,620 --> 00:19:32,830
fast fast

00:19:28,420 --> 00:19:36,220
y axis and the point with the error bar

00:19:32,830 --> 00:19:40,840
indicates a utilization during this

00:19:36,220 --> 00:19:46,780
measurement located pointed with this

00:19:40,840 --> 00:19:49,080
axis in this first graph first plot we

00:19:46,780 --> 00:19:52,390
only use the single first communication

00:19:49,080 --> 00:19:56,980
which utilize only the Wi-Fi interface

00:19:52,390 --> 00:19:59,830
and we used the Erica erica equipped

00:19:56,980 --> 00:20:04,930
network and the stock bond on the

00:19:59,830 --> 00:20:07,150
network and we didn't see any much big

00:20:04,930 --> 00:20:10,360
differences between the good between the

00:20:07,150 --> 00:20:13,300
achieved good food available with this

00:20:10,360 --> 00:20:16,810
different configuration but you could

00:20:13,300 --> 00:20:22,959
see the CPU utilization of for example

00:20:16,810 --> 00:20:27,069
for this variable is less than

00:20:22,959 --> 00:20:31,559
the air over which means that again in

00:20:27,069 --> 00:20:35,439
this case air care consumes less CPU

00:20:31,559 --> 00:20:37,419
processing cycle but this is very

00:20:35,439 --> 00:20:40,629
exceptional case I mean I'm going to

00:20:37,419 --> 00:20:45,789
solve a couple more graphs and those

00:20:40,629 --> 00:20:50,739
graph shows very different different

00:20:45,789 --> 00:20:56,829
with that which was in terms of CPU

00:20:50,739 --> 00:21:03,129
utilization that was especially with

00:20:56,829 --> 00:21:06,129
okay so this is the case with the much

00:21:03,129 --> 00:21:10,299
past communication so in this confident

00:21:06,129 --> 00:21:13,359
we use custom under the family with the

00:21:10,299 --> 00:21:18,759
much plasticity extension and we compare

00:21:13,359 --> 00:21:22,119
those two and the mass fastest speaker

00:21:18,759 --> 00:21:26,049
in hundred of whom and achieved good put

00:21:22,119 --> 00:21:30,729
especially for the TCP stream case in

00:21:26,049 --> 00:21:34,809
the ref figure the good foot was ok good

00:21:30,729 --> 00:21:36,399
put was bigger than the native one even

00:21:34,809 --> 00:21:40,299
though they are using the marsh proposal

00:21:36,399 --> 00:21:43,359
passes and the reason of these

00:21:40,299 --> 00:21:45,549
differences means we couldn't arrange

00:21:43,359 --> 00:21:49,389
all the parameters available for the

00:21:45,549 --> 00:21:52,449
multiple TCP extension for example the

00:21:49,389 --> 00:21:55,449
congestion control algorithm for those

00:21:52,449 --> 00:21:58,959
two different configuration using a

00:21:55,449 --> 00:22:01,329
different one so maybe we may need more

00:21:58,959 --> 00:22:05,319
deeper investigation for this kind of

00:22:01,329 --> 00:22:09,249
measurement and I also conducted another

00:22:05,319 --> 00:22:14,909
experiment in my hotel room and I think

00:22:09,249 --> 00:22:17,829
that almost same and the CPU utilization

00:22:14,909 --> 00:22:26,079
really unstable and their care consumes

00:22:17,829 --> 00:22:30,370
much more seconds and I was not aware of

00:22:26,079 --> 00:22:34,330
any root cause of the disappearance

00:22:30,370 --> 00:22:37,020
stableness but one much one possible

00:22:34,330 --> 00:22:39,580
reason for this kind of and stimulus is

00:22:37,020 --> 00:22:43,059
because we are using the same ip address

00:22:39,580 --> 00:22:46,779
between the host corner and then you

00:22:43,059 --> 00:22:49,480
dispersed network start this limitation

00:22:46,779 --> 00:22:53,169
on the current implementation but we

00:22:49,480 --> 00:22:55,150
need to use the same IP address name if

00:22:53,169 --> 00:22:57,960
you use the same IP address in the same

00:22:55,150 --> 00:23:00,400
and two different country it works that

00:22:57,960 --> 00:23:05,289
the incoming packet is going through the

00:23:00,400 --> 00:23:08,350
two directions and this and this host

00:23:05,289 --> 00:23:10,539
corner should feel that the response

00:23:08,350 --> 00:23:13,029
packet from this one for example if you

00:23:10,539 --> 00:23:16,840
receive sing act packet from the end

00:23:13,029 --> 00:23:19,690
point this whole stack is not aware of

00:23:16,840 --> 00:23:24,700
this established connection happen in

00:23:19,690 --> 00:23:27,789
this uses business so I recon she had IP

00:23:24,700 --> 00:23:30,220
tables to eliminate the TCP decide

00:23:27,789 --> 00:23:33,789
packet from the host car but when

00:23:30,220 --> 00:23:39,549
additional processing might be the cause

00:23:33,789 --> 00:23:42,929
of the CPS DTS unstableness and there

00:23:39,549 --> 00:23:45,279
are still various limitation in

00:23:42,929 --> 00:23:45,789
description for the user space network

00:23:45,279 --> 00:23:49,149
stack

00:23:45,789 --> 00:23:51,970
IP address configuration very tricky we

00:23:49,149 --> 00:23:55,690
can only come here IP address at the

00:23:51,970 --> 00:23:57,490
time of the application execution so you

00:23:55,690 --> 00:24:00,220
cannot obtain the newer IP address

00:23:57,490 --> 00:24:04,539
during the hundred which might be

00:24:00,220 --> 00:24:07,630
resolved by some additional way and the

00:24:04,539 --> 00:24:12,100
hijack library has also fundamental

00:24:07,630 --> 00:24:17,169
issues which not which are not safe in

00:24:12,100 --> 00:24:21,149
nothing crossing and this is also not as

00:24:17,169 --> 00:24:23,649
not safe with much sleeping environment

00:24:21,149 --> 00:24:27,100
we also require the additional tweaks

00:24:23,649 --> 00:24:31,350
for the under in order to assign the and

00:24:27,100 --> 00:24:31,350
acquired permission to the application

00:24:36,630 --> 00:24:42,610
with this current available method and

00:24:39,789 --> 00:24:43,660
we are going to compare with a different

00:24:42,610 --> 00:24:46,030
platform

00:24:43,660 --> 00:24:48,300
for example I always label from Apple

00:24:46,030 --> 00:24:51,100
introduced a new user space

00:24:48,300 --> 00:24:54,760
implementation the network step and I'll

00:24:51,100 --> 00:25:00,030
have a chance maybe we will go go for

00:24:54,760 --> 00:25:05,020
this comparison so to sum up my talk so

00:25:00,030 --> 00:25:07,900
out of three code is no longer taking so

00:25:05,020 --> 00:25:10,960
much time to play with you you can

00:25:07,900 --> 00:25:13,960
introduce the library this library make

00:25:10,960 --> 00:25:17,350
your code is easier to dismiss all over

00:25:13,960 --> 00:25:21,580
the world but at the same time at this

00:25:17,350 --> 00:25:27,040
moment we need to have a couple tricks

00:25:21,580 --> 00:25:29,430
before using that and we are going to we

00:25:27,040 --> 00:25:31,750
are still in the middle of the

00:25:29,430 --> 00:25:35,620
measurement analysis so we are going to

00:25:31,750 --> 00:25:40,060
investigate more about that the result

00:25:35,620 --> 00:25:41,800
that I show you I show this today thank

00:25:40,060 --> 00:25:44,130
you so much for attention I'm happy to

00:25:41,800 --> 00:25:44,130
take

00:25:45,590 --> 00:25:51,500

YouTube URL: https://www.youtube.com/watch?v=oxgoKKjM5c0


