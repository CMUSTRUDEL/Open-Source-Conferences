Title: Netdev 0.1 - Hardware Offloading BoF (Part 7 of 9) - Dell OCP
Publication date: 2015-04-07
Playlist: Netdev 0.1 - Day 2 - Sunday February 15, 2015
Description: 
	Dell OCP
Sanjay Sane
February 2015

Part 7 of 9 in the Hardware Offloading BoF series

This video is licensed under Creative Commons Attribution-ShareAlike 4.0 International license. Feel free to download and distribute.
Captions: 
	00:00:00,860 --> 00:00:07,529
hi everyone I just had a single slide on

00:00:04,680 --> 00:00:09,660
this so I'm sange srna and part of Dell

00:00:07,529 --> 00:00:11,639
my main focus in develop is about

00:00:09,660 --> 00:00:14,910
networking and about open networking in

00:00:11,639 --> 00:00:17,970
particular so we started with opening up

00:00:14,910 --> 00:00:20,220
our hardware and being able to install

00:00:17,970 --> 00:00:22,789
any other networking OS on top of it so

00:00:20,220 --> 00:00:26,580
we also have another initiative in

00:00:22,789 --> 00:00:29,609
another open compute platform which is

00:00:26,580 --> 00:00:31,980
our community to kind of go to the next

00:00:29,609 --> 00:00:34,710
level of openness inside a network OS

00:00:31,980 --> 00:00:37,320
and what that means is opening up all

00:00:34,710 --> 00:00:38,760
the layers inside anyways so as we have

00:00:37,320 --> 00:00:41,730
seen so far is we have talked about

00:00:38,760 --> 00:00:44,730
offload as a keyword which is about

00:00:41,730 --> 00:00:46,760
having a user model in Linux and being

00:00:44,730 --> 00:00:48,870
able to offload that into the switch

00:00:46,760 --> 00:00:51,719
however most of the networking she's

00:00:48,870 --> 00:00:54,620
just so far have have done data path

00:00:51,719 --> 00:00:57,510
forwarding as their sole data path

00:00:54,620 --> 00:00:59,579
mechanism there was no user space

00:00:57,510 --> 00:01:03,239
forwarding at all so this term offload

00:00:59,579 --> 00:01:05,250
is slightly kind of non-intuitive form a

00:01:03,239 --> 00:01:07,860
classical network operating systems

00:01:05,250 --> 00:01:10,830
perspective because that's all it does

00:01:07,860 --> 00:01:13,380
and then obviously now in the server

00:01:10,830 --> 00:01:16,500
plus switch world what we want to

00:01:13,380 --> 00:01:18,930
achieve is a common model a user centric

00:01:16,500 --> 00:01:21,000
model which is about obviously user

00:01:18,930 --> 00:01:24,090
space applications that Linux provides

00:01:21,000 --> 00:01:26,400
and now we also be able to use the

00:01:24,090 --> 00:01:28,860
switching hardware which have built so

00:01:26,400 --> 00:01:31,020
far so far us to do so we take a

00:01:28,860 --> 00:01:32,729
slightly different approach and and came

00:01:31,020 --> 00:01:34,320
up with the initiative which is a which

00:01:32,729 --> 00:01:37,950
is called a sa i switch abstraction

00:01:34,320 --> 00:01:40,590
interface so instead of looking from top

00:01:37,950 --> 00:01:42,659
to down which is how a user in the linux

00:01:40,590 --> 00:01:46,229
land or any other user space land will

00:01:42,659 --> 00:01:48,600
try to look at a forwarding construct

00:01:46,229 --> 00:01:50,340
and then try to offload it we kind of

00:01:48,600 --> 00:01:51,720
went the other way that there are

00:01:50,340 --> 00:01:54,740
already networking switches out there

00:01:51,720 --> 00:01:56,930
there are already so many applications

00:01:54,740 --> 00:01:59,880
networking operating systems out there

00:01:56,930 --> 00:02:03,649
which try to do stuff so why not we take

00:01:59,880 --> 00:02:07,530
a look at the existing SDKs an existing

00:02:03,649 --> 00:02:09,360
switches existing the platforms and try

00:02:07,530 --> 00:02:11,580
to build abstractions to what a switch

00:02:09,360 --> 00:02:13,970
can do or a hardware can do so by the

00:02:11,580 --> 00:02:16,730
way this is a collaborative effort

00:02:13,970 --> 00:02:19,230
microsoft and dell and facebook car

00:02:16,730 --> 00:02:23,459
along with the silicon switch windows

00:02:19,230 --> 00:02:25,170
mellanox broadcom and intel all of them

00:02:23,459 --> 00:02:27,480
contributed towards the original

00:02:25,170 --> 00:02:29,280
authorship and now it's a open github

00:02:27,480 --> 00:02:31,769
there are a lot of contributions and

00:02:29,280 --> 00:02:34,019
flowing in so as I said the approach is

00:02:31,769 --> 00:02:35,900
slightly different and now the next step

00:02:34,019 --> 00:02:37,799
is for us I think this will be

00:02:35,900 --> 00:02:39,629
tremendously helpful some of the folks

00:02:37,799 --> 00:02:41,610
have stated if you don't we don't

00:02:39,629 --> 00:02:43,739
understand what the hardware is can do

00:02:41,610 --> 00:02:46,379
or is capable of doing right so this

00:02:43,739 --> 00:02:50,250
probably serves a good way to kind of

00:02:46,379 --> 00:02:51,989
show what what is which can do so what

00:02:50,250 --> 00:02:55,590
we have done is identified individual

00:02:51,989 --> 00:02:57,930
abstractions in terms of features not to

00:02:55,590 --> 00:02:59,489
the level of lower or like a table level

00:02:57,930 --> 00:03:01,829
details although that can also be

00:02:59,489 --> 00:03:04,079
accomplished in this API but all those

00:03:01,829 --> 00:03:06,870
well-known abstractions as well as the

00:03:04,079 --> 00:03:09,530
flexible abstractions are exposed in a

00:03:06,870 --> 00:03:11,489
common API and they will be supported by

00:03:09,530 --> 00:03:14,579
they will be supported by all the

00:03:11,489 --> 00:03:17,519
silicon a six or the agar question so

00:03:14,579 --> 00:03:20,430
you are you're suggesting a wrap on top

00:03:17,519 --> 00:03:22,709
50 case I wouldn't want to call that as

00:03:20,430 --> 00:03:25,290
a rapper although initially there are

00:03:22,709 --> 00:03:28,109
going to be SDKs out there and this

00:03:25,290 --> 00:03:30,269
essay I API will end up calling this SDK

00:03:28,109 --> 00:03:32,879
is the case but the way we have designed

00:03:30,269 --> 00:03:35,549
is to try to identify the abstractions

00:03:32,879 --> 00:03:38,310
and the essay I API will expose those

00:03:35,549 --> 00:03:40,889
abstractions now whether or not they use

00:03:38,310 --> 00:03:44,129
the underlying SDK API is in one to one

00:03:40,889 --> 00:03:46,379
on one too many fashion it's TBD so it's

00:03:44,129 --> 00:03:48,599
a rapper would be a very loosely because

00:03:46,379 --> 00:03:50,879
with you depending on rappers I do have

00:03:48,599 --> 00:03:52,919
an API for linux on top of this I don't

00:03:50,879 --> 00:03:54,959
so that's what's also when I talk to you

00:03:52,919 --> 00:03:56,760
about this this is like a I'm here to

00:03:54,959 --> 00:03:59,579
look kind of learn and understand what's

00:03:56,760 --> 00:04:01,560
out there but also kind of expose how we

00:03:59,579 --> 00:04:03,690
came about in kind of designing an API

00:04:01,560 --> 00:04:05,579
which may be useful to this community so

00:04:03,690 --> 00:04:07,650
that's this is a first step you also

00:04:05,579 --> 00:04:10,139
linux do you want the good news of the

00:04:07,650 --> 00:04:11,790
bad news i'll give me both yeah okay the

00:04:10,139 --> 00:04:13,169
good news is you've identified exactly

00:04:11,790 --> 00:04:15,000
what the problem is is that we have all

00:04:13,169 --> 00:04:16,769
these SDKs with different interfaces and

00:04:15,000 --> 00:04:18,720
everyone has to recode all their stuff

00:04:16,769 --> 00:04:19,949
on top of it to interface with it the

00:04:18,720 --> 00:04:22,620
bad news is that you're solving the

00:04:19,949 --> 00:04:24,390
problem at the wrong level you're

00:04:22,620 --> 00:04:25,979
actually in your initial phase

00:04:24,390 --> 00:04:26,980
encouraging these guys to keep

00:04:25,979 --> 00:04:29,320
maintaining their sdk

00:04:26,980 --> 00:04:31,810
and we don't want to waste any more time

00:04:29,320 --> 00:04:33,910
and effort in that space anymore this

00:04:31,810 --> 00:04:38,020
thing where you're coming up with open

00:04:33,910 --> 00:04:39,820
API is that you think appeal to the

00:04:38,020 --> 00:04:41,770
lowest common denominator what is

00:04:39,820 --> 00:04:43,120
exactly did at each level that's the

00:04:41,770 --> 00:04:44,830
kind of discussions we should be having

00:04:43,120 --> 00:04:46,330
about our Colonel interfaces and what

00:04:44,830 --> 00:04:50,290
we've been discussing in the last couple

00:04:46,330 --> 00:04:51,760
hours today so I hope that we can

00:04:50,290 --> 00:04:56,050
leverage someone discovers you make

00:04:51,760 --> 00:04:57,610
during that process but I think really

00:04:56,050 --> 00:04:59,260
really really need to get there is to

00:04:57,610 --> 00:05:01,960
invest this kind of investigate

00:04:59,260 --> 00:05:04,360
investors kind of effort it about the

00:05:01,960 --> 00:05:05,590
kernel level so that's just yeah I mean

00:05:04,360 --> 00:05:07,000
that's a excellent point right this is

00:05:05,590 --> 00:05:09,100
exactly what I want came here for to

00:05:07,000 --> 00:05:10,540
open up ourselves to the bigger and more

00:05:09,100 --> 00:05:12,430
community so the next time I come here

00:05:10,540 --> 00:05:15,130
obviously I was something that attaches

00:05:12,430 --> 00:05:17,440
itself to the government and in a

00:05:15,130 --> 00:05:19,540
certain way since you had to take into

00:05:17,440 --> 00:05:21,280
consideration with all the SDKs provide

00:05:19,540 --> 00:05:22,810
for you you kind of are gaining

00:05:21,280 --> 00:05:25,090
knowledge about what the capability

00:05:22,810 --> 00:05:26,830
space is okay so okay so that is nice

00:05:25,090 --> 00:05:28,420
that's exactly what I'm thinking it

00:05:26,830 --> 00:05:31,300
could be useful for this community as we

00:05:28,420 --> 00:05:33,610
all talk about how the user space morals

00:05:31,300 --> 00:05:35,230
collide or can be combined with the

00:05:33,610 --> 00:05:37,420
hardware models and this is a step you

00:05:35,230 --> 00:05:40,720
already have their out there so that's

00:05:37,420 --> 00:05:42,340
the reason for for kind of exposure so

00:05:40,720 --> 00:05:44,680
say I want to make sure you understood

00:05:42,340 --> 00:05:47,080
one thing yes there is no user space

00:05:44,680 --> 00:05:49,390
model the model is Linux more I i

00:05:47,080 --> 00:05:52,420
mentioned user space it's a weasel

00:05:49,390 --> 00:05:54,130
models linux is the model and that's

00:05:52,420 --> 00:05:57,130
kind of the goal that's what I opened

00:05:54,130 --> 00:05:59,650
with because the problem here is making

00:05:57,130 --> 00:06:02,410
API is consistent is actually not a

00:05:59,650 --> 00:06:03,760
solution it's the net model that needs

00:06:02,410 --> 00:06:06,310
to be something that the other side of

00:06:03,760 --> 00:06:08,110
the wire can treat as a equivalent piece

00:06:06,310 --> 00:06:10,960
and that's that is the goal of a linux

00:06:08,110 --> 00:06:14,260
to linux boxes don't operate differently

00:06:10,960 --> 00:06:16,180
right so i think we went through this

00:06:14,260 --> 00:06:18,010
earlier on right there are different

00:06:16,180 --> 00:06:20,500
applications that's that's what I meant

00:06:18,010 --> 00:06:23,320
by user models but there is a hardware

00:06:20,500 --> 00:06:25,810
model which is kind of separated or kind

00:06:23,320 --> 00:06:27,970
of we stranded from the different places

00:06:25,810 --> 00:06:30,430
because some examples even in the flow a

00:06:27,970 --> 00:06:32,680
beer discussion that may come is many of

00:06:30,430 --> 00:06:35,320
the different users models may end up

00:06:32,680 --> 00:06:39,610
using some of the underlying overlapping

00:06:35,320 --> 00:06:40,750
hardware constants so so the user models

00:06:39,610 --> 00:06:43,120
may be restricted to the

00:06:40,750 --> 00:06:44,650
one use of features like TC or EF tables

00:06:43,120 --> 00:06:46,690
might be talking only about their own

00:06:44,650 --> 00:06:48,130
features obviously beans when support

00:06:46,690 --> 00:06:50,590
may be talking about their use in models

00:06:48,130 --> 00:06:52,750
but when I talk about Hardware

00:06:50,590 --> 00:06:54,190
offloading they might end up using the

00:06:52,750 --> 00:06:55,870
same underlying T camps or same

00:06:54,190 --> 00:06:57,580
underlying hash tables and so on so

00:06:55,870 --> 00:07:00,040
forth so that's what I meant by user

00:06:57,580 --> 00:07:01,870
models versus hardware models as a as a

00:07:00,040 --> 00:07:04,570
plugin what we have started with is a is

00:07:01,870 --> 00:07:06,280
coming up from bottoms up and trying to

00:07:04,570 --> 00:07:08,380
identify what is that the hardware can

00:07:06,280 --> 00:07:10,420
expose and about for the next step is to

00:07:08,380 --> 00:07:13,360
kind of merge these two worlds two

00:07:10,420 --> 00:07:16,270
defining a kind of jacket do the offload

00:07:13,360 --> 00:07:18,580
part correctly alright so so these are

00:07:16,270 --> 00:07:20,200
the details as i said i'm talking in

00:07:18,580 --> 00:07:22,600
front of you for the collaborative

00:07:20,200 --> 00:07:24,760
effort although dell is part of that and

00:07:22,600 --> 00:07:28,090
these are the details where you can find

00:07:24,760 --> 00:07:31,300
the existing api's there will be some

00:07:28,090 --> 00:07:33,640
demos in the next OCP meetings and so on

00:07:31,300 --> 00:07:37,030
so forth so feel free to kind of take a

00:07:33,640 --> 00:07:41,260
look and let's collaborate so that was

00:07:37,030 --> 00:07:43,990
one which i want to add day on top of

00:07:41,260 --> 00:07:45,820
what Sanjay said so taking a side the

00:07:43,990 --> 00:07:47,710
level of fair where should be the

00:07:45,820 --> 00:07:49,570
interfaces and of course in this room we

00:07:47,710 --> 00:07:51,760
can understand who wants to go where and

00:07:49,570 --> 00:07:53,919
this is not for the discussion here I

00:07:51,760 --> 00:07:55,720
think that this is the first time at

00:07:53,919 --> 00:07:57,669
least for their many years that I've

00:07:55,720 --> 00:08:00,340
been in the networking that both

00:07:57,669 --> 00:08:02,140
customers and many big customers and

00:08:00,340 --> 00:08:05,260
providers sitting in the same room and

00:08:02,140 --> 00:08:08,020
discuss a unified entity that really

00:08:05,260 --> 00:08:10,750
helps open source and I think that

00:08:08,020 --> 00:08:14,350
building an ecosystem in learning where

00:08:10,750 --> 00:08:17,290
you can enjoy protocols and standards to

00:08:14,350 --> 00:08:19,600
drive one software solution and when you

00:08:17,290 --> 00:08:22,320
where are the areas where in a

00:08:19,600 --> 00:08:26,050
commercial area you do want to enable a

00:08:22,320 --> 00:08:27,610
competition or or secret sauce I think

00:08:26,050 --> 00:08:29,020
sitting in the room and understanding

00:08:27,610 --> 00:08:31,000
and trying to find the best way of

00:08:29,020 --> 00:08:33,190
solving stuff at the networking layer

00:08:31,000 --> 00:08:35,530
layer in and doing some hardware

00:08:33,190 --> 00:08:38,500
acceleration we learn a lot from it and

00:08:35,530 --> 00:08:41,860
I think that by reviewing the interfaces

00:08:38,500 --> 00:08:44,500
and it's the first time that you can see

00:08:41,860 --> 00:08:47,230
an API and no matter level currently

00:08:44,500 --> 00:08:49,600
that knows that underneath this API

00:08:47,230 --> 00:08:52,480
there is more than 100 that probably can

00:08:49,600 --> 00:08:54,160
support that feature set now this we can

00:08:52,480 --> 00:08:56,350
leverage from this knowledge be

00:08:54,160 --> 00:08:59,199
doing an interface in the kernel and try

00:08:56,350 --> 00:09:00,639
to understand it gives a big hint that

00:08:59,199 --> 00:09:04,360
there is a solution that can be

00:09:00,639 --> 00:09:07,569
supported in that way I'm not sure I

00:09:04,360 --> 00:09:10,839
completely agree i would say a nic api

00:09:07,569 --> 00:09:14,800
is netdev that's that's your API there

00:09:10,839 --> 00:09:18,699
isn't a DMA engine or a packet API

00:09:14,800 --> 00:09:20,829
underneath I think trying to make an API

00:09:18,699 --> 00:09:22,870
that is abstracted and that's hidden

00:09:20,829 --> 00:09:24,459
under the colonel just becomes a layer

00:09:22,870 --> 00:09:26,649
that you don't need to maintain I mean

00:09:24,459 --> 00:09:28,180
there is no need to maintain sanctity at

00:09:26,649 --> 00:09:30,279
that layer unless you're exposing it to

00:09:28,180 --> 00:09:34,750
user space and that I think is something

00:09:30,279 --> 00:09:36,699
that scares the crap out of me I am

00:09:34,750 --> 00:09:40,449
taking aside the user space I think that

00:09:36,699 --> 00:09:43,720
try take the p4 issue now the p four

00:09:40,449 --> 00:09:46,569
tries to model something that is not is

00:09:43,720 --> 00:09:48,189
based on ideas right because you don't

00:09:46,569 --> 00:09:50,079
have a true hardware because you don't

00:09:48,189 --> 00:09:52,360
see the RTL of all the vendors I think

00:09:50,079 --> 00:09:54,610
that if all the hardware vendors could

00:09:52,360 --> 00:09:55,870
have opened whatever they invest is the

00:09:54,610 --> 00:09:58,269
billions of dollars that they have

00:09:55,870 --> 00:10:01,480
invented in order to create a silicon

00:09:58,269 --> 00:10:03,339
there wouldn't be a need for logical

00:10:01,480 --> 00:10:06,160
models that describe hardware you could

00:10:03,339 --> 00:10:08,350
just go and read the RTL right but such

00:10:06,160 --> 00:10:09,639
doesn't exist so when you're trying to

00:10:08,350 --> 00:10:14,529
build something that can really

00:10:09,639 --> 00:10:17,110
accelerate it and not in a small home

00:10:14,529 --> 00:10:19,420
router we're talking about commercial

00:10:17,110 --> 00:10:22,120
data center worthy piece of equipment to

00:10:19,420 --> 00:10:24,399
try to build that ecosystem it's it's

00:10:22,120 --> 00:10:27,519
really a challenge and without trying to

00:10:24,399 --> 00:10:29,829
and still be a in cooperation with the

00:10:27,519 --> 00:10:31,930
vendors and the customers and addressing

00:10:29,829 --> 00:10:34,930
those needs and we really need to take

00:10:31,930 --> 00:10:38,980
although you know I and again leave the

00:10:34,930 --> 00:10:41,740
software a level aside I think that we

00:10:38,980 --> 00:10:44,110
need to work with the neck o system and

00:10:41,740 --> 00:10:50,199
and leverage this how can we take that

00:10:44,110 --> 00:10:51,930
work into the Linux as well as I said at

00:10:50,199 --> 00:10:55,089
the minimum this there will be a

00:10:51,930 --> 00:10:57,069
api-based platforms that will be coming

00:10:55,089 --> 00:10:59,649
out so at a minimum for this community

00:10:57,069 --> 00:11:02,829
it will be it was servicing it's a good

00:10:59,649 --> 00:11:04,240
kind of a learning experiences to hey I

00:11:02,829 --> 00:11:06,550
don't even know what this was the case

00:11:04,240 --> 00:11:06,750
provide this this is the API from where

00:11:06,550 --> 00:11:10,080
you

00:11:06,750 --> 00:11:13,620
no what they provide I just think that

00:11:10,080 --> 00:11:18,270
it is purely useful for discovering the

00:11:13,620 --> 00:11:19,860
scope of the problem and that i hope we

00:11:18,270 --> 00:11:21,690
couldn't apply what we learn from it in

00:11:19,860 --> 00:11:24,350
the kernel but i don't think this is the

00:11:21,690 --> 00:11:28,350
long-term thing that we're looking at

00:11:24,350 --> 00:11:30,330
any other questions thanks so it's a

00:11:28,350 --> 00:11:33,090
little disappointing that nobody asking

00:11:30,330 --> 00:11:34,650
questions from this side of the room so

00:11:33,090 --> 00:11:36,960
I have to keep handing the mic over to

00:11:34,650 --> 00:11:39,110
that side come on this side what's going

00:11:36,960 --> 00:11:39,110

YouTube URL: https://www.youtube.com/watch?v=hBn7xgaN7tY


