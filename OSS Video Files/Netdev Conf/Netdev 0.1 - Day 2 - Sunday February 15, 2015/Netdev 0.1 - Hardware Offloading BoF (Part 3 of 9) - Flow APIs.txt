Title: Netdev 0.1 - Hardware Offloading BoF (Part 3 of 9) - Flow APIs
Publication date: 2015-04-07
Playlist: Netdev 0.1 - Day 2 - Sunday February 15, 2015
Description: 
	Flow APIs
JiÅ™Ã­ PÃ­rko
February 2015

Part 3 of 9 in the Hardware Offloading BoF series

https://www.netdev01.org

This video is licensed under Creative Commons Attribution-ShareAlike 4.0 International license. Feel free to download and distribute.
Captions: 
	00:00:02,149 --> 00:00:15,330
open so I would just like to discuss the

00:00:07,049 --> 00:00:18,180
flow API stuff so my concern is as as

00:00:15,330 --> 00:00:22,289
they've set already we have a model in

00:00:18,180 --> 00:00:24,779
in kernel which is kind of good and we

00:00:22,289 --> 00:00:27,810
want to upload stuff to to hardware

00:00:24,779 --> 00:00:34,020
right is that correct so with the flow

00:00:27,810 --> 00:00:39,120
api i don't i see that it allows

00:00:34,020 --> 00:00:42,320
something more than that not only to to

00:00:39,120 --> 00:00:45,750
upload the existing stuff but but to

00:00:42,320 --> 00:00:47,340
provide the user space access to the

00:00:45,750 --> 00:00:50,600
real hardware without Colonel being

00:00:47,340 --> 00:00:54,050
involved which is kind of scary for me

00:00:50,600 --> 00:00:54,050
what do you think they

00:00:57,460 --> 00:01:06,470
the set operations right now I mean for

00:01:04,460 --> 00:01:08,300
harvir for what John you talk about what

00:01:06,470 --> 00:01:10,310
John is proposed right okay he's

00:01:08,300 --> 00:01:11,840
currently has mainly proposed to get

00:01:10,310 --> 00:01:14,750
operation which gets the geography of

00:01:11,840 --> 00:01:15,979
the piece of harder right sure and the

00:01:14,750 --> 00:01:17,750
idea is that there's going to be a bunch

00:01:15,979 --> 00:01:19,250
of set operations that we would build on

00:01:17,750 --> 00:01:21,800
top of inside the kernel to implement

00:01:19,250 --> 00:01:25,430
off loading facilities inside colonel

00:01:21,800 --> 00:01:28,580
yes are you sure I'm not exposing that

00:01:25,430 --> 00:01:31,310
load load flow rule thing to use the

00:01:28,580 --> 00:01:33,020
space silly yes book because it was my

00:01:31,310 --> 00:01:38,320
impression that this will happen John

00:01:33,020 --> 00:01:38,320
can you can you please

00:01:43,200 --> 00:01:53,280
yeah so i'm gerry and i work in the Red

00:01:47,759 --> 00:01:58,140
Hat and I work on a couple stuffins it's

00:01:53,280 --> 00:02:03,210
we def including so yeah and I'm John

00:01:58,140 --> 00:02:05,490
fast man so yeah the bulk of the work

00:02:03,210 --> 00:02:06,659
there is is doing the gits of the model

00:02:05,490 --> 00:02:08,489
in the tables and these things but

00:02:06,659 --> 00:02:13,650
there's also there is also a set rule

00:02:08,489 --> 00:02:15,540
and a delete rule and a good rule this

00:02:13,650 --> 00:02:18,140
is this is kind of the raw interface

00:02:15,540 --> 00:02:22,019
into the tables I think this is useful

00:02:18,140 --> 00:02:24,390
for things that don't have a analog in

00:02:22,019 --> 00:02:25,620
the software side today mm-hmm like

00:02:24,390 --> 00:02:28,380
thinking and think of things that don't

00:02:25,620 --> 00:02:31,110
necessarily I don't there's some things

00:02:28,380 --> 00:02:33,989
you don't want a software representation

00:02:31,110 --> 00:02:37,019
of like forwarding to a VF or forwarding

00:02:33,989 --> 00:02:38,280
to a cue these things aren't what does

00:02:37,019 --> 00:02:42,090
that mean to software it it doesn't mean

00:02:38,280 --> 00:02:44,099
a lot in my opinion so my concern is

00:02:42,090 --> 00:02:45,510
that if you're going to push this out to

00:02:44,099 --> 00:02:47,130
use your space we have to come up with a

00:02:45,510 --> 00:02:49,920
suitable abstraction so that they're

00:02:47,130 --> 00:02:54,650
just doing that and that people can't

00:02:49,920 --> 00:02:54,650
load arbitrary rules for music space

00:02:56,120 --> 00:03:02,340
okay um what about because then then the

00:02:59,549 --> 00:03:03,720
guy is going to do hahaha I'm going to

00:03:02,340 --> 00:03:05,430
make a clog I that doesn't load any of

00:03:03,720 --> 00:03:08,250
the routes into the kernel and bypasses

00:03:05,430 --> 00:03:11,310
all the facilities exactly and this but

00:03:08,250 --> 00:03:14,069
this gets us away from the transparency

00:03:11,310 --> 00:03:17,519
that what the users do today with IP lau

00:03:14,069 --> 00:03:21,290
commands etc etc are exactly followed

00:03:17,519 --> 00:03:21,290
when they're get offloaded to switches

00:03:22,310 --> 00:03:27,750
so I don't care I don't care that there

00:03:26,069 --> 00:03:29,250
are new facilities that are outside the

00:03:27,750 --> 00:03:30,540
software data plan the colonel but if

00:03:29,250 --> 00:03:32,400
you're going to allow people to program

00:03:30,540 --> 00:03:37,079
it you allow them to program that and

00:03:32,400 --> 00:03:39,359
that alone so if there is a like a route

00:03:37,079 --> 00:03:42,030
action that this you have to have a vm

00:03:39,359 --> 00:03:44,400
forward action you got a vm forward RT

00:03:42,030 --> 00:03:47,430
netlink message or something like this p

00:03:44,400 --> 00:03:48,690
so you see okay so when we get the in

00:03:47,430 --> 00:03:50,040
the current API as it exists you do a

00:03:48,690 --> 00:03:54,329
get and you say here's all the headers I

00:03:50,040 --> 00:03:56,189
can parse here's all of the whatever all

00:03:54,329 --> 00:03:57,000
the headers here's all the actions so

00:03:56,189 --> 00:03:59,130
and some of the

00:03:57,000 --> 00:04:02,430
things are like set fields delete field

00:03:59,130 --> 00:04:06,360
push fields which headers right it's

00:04:02,430 --> 00:04:07,830
like those don't necessarily I mean to

00:04:06,360 --> 00:04:09,780
you is that seem like something that's

00:04:07,830 --> 00:04:12,420
outside of the scope of like route IP

00:04:09,780 --> 00:04:14,400
route IP etc cuz to me it is a little

00:04:12,420 --> 00:04:16,440
bit well it's it's sort of combining the

00:04:14,400 --> 00:04:20,220
pipeline's that exists on either side of

00:04:16,440 --> 00:04:22,290
the routing table for example right

00:04:20,220 --> 00:04:24,360
because as you forward you end up going

00:04:22,290 --> 00:04:26,790
through tunnels or whatnot or adding a

00:04:24,360 --> 00:04:28,470
VLAN removing a VLAN right and this is

00:04:26,790 --> 00:04:30,030
part of the processing pipeline pipeline

00:04:28,470 --> 00:04:32,130
that you're exposing with this interface

00:04:30,030 --> 00:04:33,660
right so somehow we're going to have to

00:04:32,130 --> 00:04:35,220
have logic inside the criminal that

00:04:33,660 --> 00:04:36,780
looks at the software data planes

00:04:35,220 --> 00:04:38,430
representation of this and turns it into

00:04:36,780 --> 00:04:41,010
the things that the flow engine can do

00:04:38,430 --> 00:04:43,320
yeah the then the issue i kind of have

00:04:41,010 --> 00:04:45,330
is if you if you're doing say a forward

00:04:43,320 --> 00:04:46,530
to a VF right that's in the vm that's

00:04:45,330 --> 00:04:51,090
never going to come into the software

00:04:46,530 --> 00:04:53,640
what is the what is the Colonel's kind

00:04:51,090 --> 00:04:55,230
of role there right because you're gonna

00:04:53,640 --> 00:04:59,880
have to create abstract abstraction for

00:04:55,230 --> 00:05:02,820
this of some sort because for example

00:04:59,880 --> 00:05:04,470
for efe you can have internal rep you

00:05:02,820 --> 00:05:06,030
can have a represent us for of the

00:05:04,470 --> 00:05:11,550
internal parts of the embedded switch

00:05:06,030 --> 00:05:14,070
and after yeah you can I mean sure and

00:05:11,550 --> 00:05:15,540
then what if the what if the colonel

00:05:14,070 --> 00:05:17,250
doesn't support the header that I want

00:05:15,540 --> 00:05:20,010
to push or the field that I want to set

00:05:17,250 --> 00:05:22,950
well that would be an implicit part of

00:05:20,010 --> 00:05:25,620
whatever API you come up with to export

00:05:22,950 --> 00:05:27,810
the programmability of this nature think

00:05:25,620 --> 00:05:29,669
about this idea of two nics once a year

00:05:27,810 --> 00:05:32,150
once got an embedded Nick embedded

00:05:29,669 --> 00:05:35,370
switch and one doesn't so in one case

00:05:32,150 --> 00:05:37,650
the hardware or the colonel

00:05:35,370 --> 00:05:39,270
representation of the FTB is seeing the

00:05:37,650 --> 00:05:41,940
packets in the other case you're doing a

00:05:39,270 --> 00:05:43,320
VF steer by Mac maybe at the top of the

00:05:41,940 --> 00:05:44,520
pipe which is the case you are talking

00:05:43,320 --> 00:05:46,800
about I'm not talking about staring by

00:05:44,520 --> 00:05:49,140
Max so right I'm steering on the other

00:05:46,800 --> 00:05:51,180
field like something else fine but but

00:05:49,140 --> 00:05:52,520
the problem is that in the case where

00:05:51,180 --> 00:05:55,380
it's going through an embedded switch

00:05:52,520 --> 00:05:56,970
its broadcast domain its replication

00:05:55,380 --> 00:05:58,680
rate all of those are controlled by

00:05:56,970 --> 00:06:00,900
something in the other case it's not so

00:05:58,680 --> 00:06:02,669
what you have now is a different

00:06:00,900 --> 00:06:04,350
behavior to the end user unless you

00:06:02,669 --> 00:06:06,419
explicitly set it to an abstracted

00:06:04,350 --> 00:06:09,479
interface saying this is what I want

00:06:06,419 --> 00:06:10,409
because otherwise it's a surprise okay I

00:06:09,479 --> 00:06:11,909
can

00:06:10,409 --> 00:06:13,830
kind of understand why you want software

00:06:11,909 --> 00:06:16,139
abstractions but i would say is what we

00:06:13,830 --> 00:06:17,759
have in the flow AP idea api today the

00:06:16,139 --> 00:06:20,729
user understands what he's doing right

00:06:17,759 --> 00:06:23,129
you're not losing visibility the user

00:06:20,729 --> 00:06:26,039
specifically said set this flow in the

00:06:23,129 --> 00:06:27,529
hardware and the user knows what

00:06:26,039 --> 00:06:30,179
happened with what's going on in my

00:06:27,529 --> 00:06:31,349
abstraction what I see happening is for

00:06:30,179 --> 00:06:33,869
the things that we already do in the

00:06:31,349 --> 00:06:35,819
colonel the colonel is the user and then

00:06:33,869 --> 00:06:38,309
once we've implemented that on top of

00:06:35,819 --> 00:06:40,259
the flow API stuff then we see what

00:06:38,309 --> 00:06:42,300
falls out and we come up with ideas to

00:06:40,259 --> 00:06:43,999
export those facilities and I think

00:06:42,300 --> 00:06:47,159
that's the only way to do this same lane

00:06:43,999 --> 00:06:50,489
so it's a one that one idea I was

00:06:47,159 --> 00:06:51,839
kicking around is can the table ken

00:06:50,489 --> 00:06:57,179
colonel things like this tin the carl

00:06:51,839 --> 00:07:00,689
today say i want to be the owner of this

00:06:57,179 --> 00:07:02,519
rule set meaning I own these actions I'm

00:07:00,689 --> 00:07:04,110
going to export them but if I ever see a

00:07:02,519 --> 00:07:05,279
set rule come down we're going to tell

00:07:04,110 --> 00:07:07,439
you that you can't set it because it's

00:07:05,279 --> 00:07:09,689
owned by the kernel and then you have a

00:07:07,439 --> 00:07:13,529
you have a complete model from the get

00:07:09,689 --> 00:07:16,079
get get api and the users can expose

00:07:13,529 --> 00:07:18,240
whatever they like but the and you can

00:07:16,079 --> 00:07:22,229
also do sets but if if the colonel says

00:07:18,240 --> 00:07:23,669
hey i've registered and with ourselves

00:07:22,229 --> 00:07:25,259
the routing system has they registered

00:07:23,669 --> 00:07:27,659
with the hard way it would say don't

00:07:25,259 --> 00:07:30,059
don't allow anybody but me to put in

00:07:27,659 --> 00:07:32,129
layer 3 all right don't allow it I am

00:07:30,059 --> 00:07:35,579
the FDB table manager don't let anybody

00:07:32,129 --> 00:07:37,679
touch the FTB table and then this isn't

00:07:35,579 --> 00:07:39,209
that I see we were going with this this

00:07:37,679 --> 00:07:41,369
is not a doorway by which for you to

00:07:39,209 --> 00:07:44,309
export we're all set rule operations

00:07:41,369 --> 00:07:46,439
into user space that this doesn't work

00:07:44,309 --> 00:07:48,629
we're not going to do this because

00:07:46,439 --> 00:07:49,829
that's that's that's at the point where

00:07:48,629 --> 00:07:51,929
we start to get into trouble where

00:07:49,829 --> 00:07:54,300
people are going to implement entire

00:07:51,929 --> 00:07:55,979
routing facilities in userspace demons

00:07:54,300 --> 00:07:57,569
and bypass all the Linux facilities that

00:07:55,979 --> 00:07:59,689
we consider so powerful and useful to

00:07:57,569 --> 00:07:59,689
everyone

00:08:01,650 --> 00:08:05,300
he just wants to say something

00:08:05,320 --> 00:08:09,790
but basically the question is much

00:08:07,420 --> 00:08:12,370
simple to me like do we want to limit

00:08:09,790 --> 00:08:13,990
ourselves to offload exclusively from

00:08:12,370 --> 00:08:18,490
what is being supported inside a colonel

00:08:13,990 --> 00:08:20,710
or not I can understand both standpoints

00:08:18,490 --> 00:08:25,960
I think essentially what would you fee

00:08:20,710 --> 00:08:27,490
oh man basically right what we have

00:08:25,960 --> 00:08:29,260
right now what we supporting the colonel

00:08:27,490 --> 00:08:32,229
ovs would be part of that picture as

00:08:29,260 --> 00:08:34,210
well and oh yes is to sign in a way that

00:08:32,229 --> 00:08:37,360
majority of the complexities in sight

00:08:34,210 --> 00:08:39,700
use of space so if given we do not allow

00:08:37,360 --> 00:08:41,560
you to space to program the harder

00:08:39,700 --> 00:08:43,419
somehow we would need to move all of

00:08:41,560 --> 00:08:44,950
that complex it into the kernel that

00:08:43,419 --> 00:08:47,650
would be a contact that would be a

00:08:44,950 --> 00:08:49,360
consequence like pushed a complete

00:08:47,650 --> 00:08:50,980
pipeline that currently exists to

00:08:49,360 --> 00:08:55,030
userspace push that into the hardware or

00:08:50,980 --> 00:08:56,740
into the into the crawlspace if we don't

00:08:55,030 --> 00:08:58,120
want to do that it would be not able

00:08:56,740 --> 00:09:00,700
that sort of that's not true right i

00:08:58,120 --> 00:09:02,200
mean today you can run like STP runs in

00:09:00,700 --> 00:09:04,570
user space so we use it pretty

00:09:02,200 --> 00:09:06,910
extensively so i think i think control

00:09:04,570 --> 00:09:09,370
setup protocols perfectly live in

00:09:06,910 --> 00:09:11,890
userland that's perfectly OK and a lot

00:09:09,370 --> 00:09:14,020
of obvious as user space features is

00:09:11,890 --> 00:09:18,580
control setup in some sense its policy

00:09:14,020 --> 00:09:20,710
set up right so my opinion mpls in user

00:09:18,580 --> 00:09:22,870
learn using ovs should not exist should

00:09:20,710 --> 00:09:25,450
exist in the colonel because IP route to

00:09:22,870 --> 00:09:27,690
should be able to set up an MPLS tunnel

00:09:25,450 --> 00:09:29,770
if you can't do that you and you need a

00:09:27,690 --> 00:09:32,170
specific vendor or a specific

00:09:29,770 --> 00:09:34,150
programmers userspace tool to get mpls

00:09:32,170 --> 00:09:37,150
then fundamentally linux doesn't support

00:09:34,150 --> 00:09:39,840
it that would be my position and i think

00:09:37,150 --> 00:09:42,910
there is a fine line that can be drawn

00:09:39,840 --> 00:09:44,740
yeah i can i completely agree with that

00:09:42,910 --> 00:09:48,010
i think i want to connect a little bit

00:09:44,740 --> 00:09:49,870
to the p4 demo that which is saw and the

00:09:48,010 --> 00:09:52,360
power of programmability and the

00:09:49,870 --> 00:09:54,250
flexibility you have I think if you want

00:09:52,360 --> 00:09:55,840
to provide that flexibility in an hour

00:09:54,250 --> 00:09:58,660
now linux kernel in our linux

00:09:55,840 --> 00:10:01,150
environment i don't i don't we cannot

00:09:58,660 --> 00:10:03,280
support everything or protocol inside a

00:10:01,150 --> 00:10:05,850
kernel we cannot support everything toys

00:10:03,280 --> 00:10:08,500
graph inside a kernel that's my view

00:10:05,850 --> 00:10:13,780
hopefully we find some middle ground

00:10:08,500 --> 00:10:16,630
that keeps sufficient guarantees that we

00:10:13,780 --> 00:10:18,590
do not allow raw bypass while allowing

00:10:16,630 --> 00:10:20,930
song program abilities that can reach

00:10:18,590 --> 00:10:22,970
that would be would be that would be

00:10:20,930 --> 00:10:24,770
beautiful for my for my perspective I

00:10:22,970 --> 00:10:26,420
absolutely share your concern and in

00:10:24,770 --> 00:10:30,560
fact like the first time I saw it is

00:10:26,420 --> 00:10:31,850
this was my exact same reaction and

00:10:30,560 --> 00:10:34,100
actually if you look at the OBS

00:10:31,850 --> 00:10:35,780
conference minutes you can see that I

00:10:34,100 --> 00:10:37,400
actually raised my hand and said you

00:10:35,780 --> 00:10:42,190
should offload that the data path flows

00:10:37,400 --> 00:10:44,810
and not the logical software pipeline

00:10:42,190 --> 00:10:46,520
when we started trying to figure out how

00:10:44,810 --> 00:10:48,650
to offload Yogi's data path we figured

00:10:46,520 --> 00:10:50,360
what you need is to the soft

00:10:48,650 --> 00:10:53,330
representation all the context that is

00:10:50,360 --> 00:10:54,530
in the user space and the consequent

00:10:53,330 --> 00:10:55,820
would have been to move all of that

00:10:54,530 --> 00:10:58,160
internal space and deaths that's

00:10:55,820 --> 00:11:00,680
undesirable so hopefully we come to

00:10:58,160 --> 00:11:02,750
somewhere maybe we have to adapt to flow

00:11:00,680 --> 00:11:05,900
alive ap a little bit that we may be

00:11:02,750 --> 00:11:07,700
limited to functions which are currently

00:11:05,900 --> 00:11:09,770
already exists in the colonel so you can

00:11:07,700 --> 00:11:11,720
only upload them maybe that's that's a

00:11:09,770 --> 00:11:14,840
that's kind of a compromise that we can

00:11:11,720 --> 00:11:17,660
find another thing I'll say in this area

00:11:14,840 --> 00:11:19,370
is that kind of little disappointed

00:11:17,660 --> 00:11:21,950
about the Frankenstein that open vs

00:11:19,370 --> 00:11:23,240
which has become and as a consequence of

00:11:21,950 --> 00:11:25,010
this things that we traditionally would

00:11:23,240 --> 00:11:27,160
just add protocol proper protocol

00:11:25,010 --> 00:11:29,180
support for in the kernel for a header

00:11:27,160 --> 00:11:31,280
tunneling facility or whatever with

00:11:29,180 --> 00:11:32,630
proper IP route would probably proper

00:11:31,280 --> 00:11:34,010
netlink things people were just like

00:11:32,630 --> 00:11:36,110
I'll just stick it into open V switch

00:11:34,010 --> 00:11:37,640
and let's not talk about it I don't like

00:11:36,110 --> 00:11:40,070
that because that gets away from our

00:11:37,640 --> 00:11:41,600
global model where we have a software

00:11:40,070 --> 00:11:43,070
representation of something and we could

00:11:41,600 --> 00:11:46,280
put it in sort of hardware and have an

00:11:43,070 --> 00:11:47,900
equal equally behavioral behaving

00:11:46,280 --> 00:11:49,520
software component inside the girl we're

00:11:47,900 --> 00:11:52,850
getting away from that and that's not

00:11:49,520 --> 00:11:56,870
nice I think that I agree to that

00:11:52,850 --> 00:11:59,570
actually what is maybe the reality is

00:11:56,870 --> 00:12:02,000
that components like OpenStack they

00:11:59,570 --> 00:12:04,700
demand for programmability they cannot

00:12:02,000 --> 00:12:06,440
learn configure and maybe have simply

00:12:04,700 --> 00:12:08,470
failed to make the existing tools

00:12:06,440 --> 00:12:12,080
programmable enough in scriptable enough

00:12:08,470 --> 00:12:14,000
so obvious existed or is that's why

00:12:12,080 --> 00:12:16,520
maybe obviously so attractive to

00:12:14,000 --> 00:12:21,470
OpenStack and darker and components like

00:12:16,520 --> 00:12:22,700
that but but we've seen that it lacks

00:12:21,470 --> 00:12:24,680
the kind of control that goes into

00:12:22,700 --> 00:12:26,150
proper interfaces being put into kernel

00:12:24,680 --> 00:12:28,360
and that's why it's in the state that

00:12:26,150 --> 00:12:28,360
it's in

00:12:28,980 --> 00:12:32,470
and you can just say that I got it I

00:12:31,089 --> 00:12:34,629
mean it's kind of like a dumping ground

00:12:32,470 --> 00:12:35,709
that where people will put features they

00:12:34,629 --> 00:12:37,660
don't want to go through the full effort

00:12:35,709 --> 00:12:42,449
of adding a full interface for inside

00:12:37,660 --> 00:12:48,759
the colonel it's just my impression okay

00:12:42,449 --> 00:12:50,079
back to the original topic I think for

00:12:48,759 --> 00:12:52,629
all the things that the colonel supports

00:12:50,079 --> 00:12:54,790
currently we we have we have we have to

00:12:52,629 --> 00:12:56,739
do an internal thing to program the

00:12:54,790 --> 00:12:59,739
rules into the thing how we segregate

00:12:56,739 --> 00:13:01,689
that with the things that are outside

00:12:59,739 --> 00:13:03,809
the scope of the colonel you could have

00:13:01,689 --> 00:13:06,939
a table locking feature exclusivity

00:13:03,809 --> 00:13:08,259
permissions whatever you do but I still

00:13:06,939 --> 00:13:10,239
think it needs to be this segregation

00:13:08,259 --> 00:13:11,889
between the stuff that we let the user

00:13:10,239 --> 00:13:13,419
program on the stuff that we don't and

00:13:11,889 --> 00:13:16,089
we need some kind of typing for all

00:13:13,419 --> 00:13:17,109
these things that happen I think you

00:13:16,089 --> 00:13:18,519
have to come up with some kind of

00:13:17,109 --> 00:13:20,199
interface to expose these facilities

00:13:18,519 --> 00:13:22,629
instead of just saying you can program

00:13:20,199 --> 00:13:25,389
whatever you want is in the chip that's

00:13:22,629 --> 00:13:27,759
just my opinion somebody's your ways

00:13:25,389 --> 00:13:32,139
your answer to pee for them what is your

00:13:27,759 --> 00:13:33,279
answer to pee for similar lines I think

00:13:32,139 --> 00:13:35,410
it's just another component you're going

00:13:33,279 --> 00:13:37,209
to have to develop if you want to do

00:13:35,410 --> 00:13:39,669
this kind of stuff I mean I can

00:13:37,209 --> 00:13:44,799
understand the draw for maximum

00:13:39,669 --> 00:13:47,319
generality but I think therapy demons to

00:13:44,799 --> 00:13:49,749
a certain extent but but a very simple

00:13:47,319 --> 00:13:52,689
manifestation of p4 is it's a hardware

00:13:49,749 --> 00:13:56,679
programmable hardware sku you get to

00:13:52,689 --> 00:13:58,929
rebuild your neck effectively and when

00:13:56,679 --> 00:14:00,699
you rebuild the new driver does the

00:13:58,929 --> 00:14:02,110
right thing with it so it's not but

00:14:00,699 --> 00:14:04,209
you're bypassing the colonel kerrville

00:14:02,110 --> 00:14:07,149
program or if the functionality that

00:14:04,209 --> 00:14:10,809
Colonel cannot do no no so so you bought

00:14:07,149 --> 00:14:13,809
your VX land ready Nick now there's

00:14:10,809 --> 00:14:16,869
geneve you got a Jinni firmware upgrade

00:14:13,809 --> 00:14:19,809
which was another p4 program you got it

00:14:16,869 --> 00:14:22,899
but geneve had colonel support therefore

00:14:19,809 --> 00:14:26,639
you could run it properly your vm and

00:14:22,899 --> 00:14:28,689
your hardware now rock looks the same so

00:14:26,639 --> 00:14:30,850
what if somebody wants to do a non

00:14:28,689 --> 00:14:33,160
standard protocol did we start adding

00:14:30,850 --> 00:14:35,189
non-standard ITF protocols into the

00:14:33,160 --> 00:14:37,509
kernel so I think the irony of the p4

00:14:35,189 --> 00:14:39,369
presentation was there was no example of

00:14:37,509 --> 00:14:40,200
protocols that don't exist yet it was

00:14:39,369 --> 00:14:42,030
all doing

00:14:40,200 --> 00:14:49,970
we already tried to do and do an a6

00:14:42,030 --> 00:14:52,290
already yeah so did okay so blame him

00:14:49,970 --> 00:14:53,790
but it's more seriously speaking I think

00:14:52,290 --> 00:14:55,530
we're getting to a lot of situations

00:14:53,790 --> 00:14:57,510
where that are similar to the

00:14:55,530 --> 00:14:59,100
conversation we had earlier about oh my

00:14:57,510 --> 00:15:00,720
god what if the switch has this

00:14:59,100 --> 00:15:02,250
restriction oh my god what if it's laid

00:15:00,720 --> 00:15:03,390
out like this and has a hash table and

00:15:02,250 --> 00:15:05,250
it's a game how will we handle that

00:15:03,390 --> 00:15:08,700
let's cross that bridge when we get

00:15:05,250 --> 00:15:10,380
there I mean I mean take take a certain

00:15:08,700 --> 00:15:14,310
amount of it into consideration now but

00:15:10,380 --> 00:15:15,900
I mean I'm trying to see how many cycles

00:15:14,310 --> 00:15:18,480
we should burn on this at early stages

00:15:15,900 --> 00:15:21,000
of implementation yeah I think the

00:15:18,480 --> 00:15:24,000
question is about if we want to offload

00:15:21,000 --> 00:15:26,310
stuff or if you were to existing or

00:15:24,000 --> 00:15:28,980
future stuff which you will be in kernel

00:15:26,310 --> 00:15:32,040
and to upload that into hyper or to

00:15:28,980 --> 00:15:33,840
allow use this place to do something

00:15:32,040 --> 00:15:35,910
else in artwork that well that's why I

00:15:33,840 --> 00:15:37,140
say if you make proper interfaces then

00:15:35,910 --> 00:15:39,480
the software component will just use

00:15:37,140 --> 00:15:41,610
those proper interface software variant

00:15:39,480 --> 00:15:43,380
yep it's all right so let's take a very

00:15:41,610 --> 00:15:45,240
specific kind of maybe a very specific

00:15:43,380 --> 00:15:46,890
example that's interesting like offload

00:15:45,240 --> 00:15:48,840
officer I of Enoch I think that's the

00:15:46,890 --> 00:15:51,900
first example that we actually wanted to

00:15:48,840 --> 00:15:54,150
tackle because to existing API was using

00:15:51,900 --> 00:15:58,800
eath Tula think which was which we

00:15:54,150 --> 00:16:06,630
wanted to improve on so um if any welds

00:15:58,800 --> 00:16:09,600
want to speak okay 20 defense this was

00:16:06,630 --> 00:16:12,390
initially a replacement for each tool

00:16:09,600 --> 00:16:14,940
right RSS I think it got slightly out of

00:16:12,390 --> 00:16:16,890
control in my opinion I like what you're

00:16:14,940 --> 00:16:18,720
doing I don't like their bypass thing

00:16:16,890 --> 00:16:21,080
that's all I don't think I've told you

00:16:18,720 --> 00:16:26,610
this a few times I posted this on netdev

00:16:21,080 --> 00:16:28,620
you can many times do you agree but I

00:16:26,610 --> 00:16:30,870
see a good replacement for each tool

00:16:28,620 --> 00:16:34,680
using net link but I think it went

00:16:30,870 --> 00:16:36,210
beyond that see that you're more the

00:16:34,680 --> 00:16:37,770
thing is that I've never seen it as a

00:16:36,210 --> 00:16:39,210
bypass thing I've seen it as a a

00:16:37,770 --> 00:16:41,010
framework on which to build things

00:16:39,210 --> 00:16:43,470
inside the current all two day so

00:16:41,010 --> 00:16:45,720
program hard and I accept that and my

00:16:43,470 --> 00:16:48,960
conversation with you John is if you

00:16:45,720 --> 00:16:52,020
could show show me a tool TC my favorite

00:16:48,960 --> 00:16:53,900
IP route to end of tables that actually

00:16:52,020 --> 00:16:57,200
uses this interface they're not be happy

00:16:53,900 --> 00:16:59,270
right and if there's something to unser

00:16:57,200 --> 00:17:01,670
the p4 question if there's something we

00:16:59,270 --> 00:17:03,650
don't we can't do today we should extend

00:17:01,670 --> 00:17:05,120
our tools but a tools that have been

00:17:03,650 --> 00:17:07,010
written a thousand years ago that people

00:17:05,120 --> 00:17:15,350
know how to use should still should be

00:17:07,010 --> 00:17:16,610
the metric on how we move forward do you

00:17:15,350 --> 00:17:20,930
have any response before I start talking

00:17:16,610 --> 00:17:22,370
now I'm good um so John you and I were

00:17:20,930 --> 00:17:24,710
talking out in the hall a little bit

00:17:22,370 --> 00:17:27,730
before to bring the conversation back to

00:17:24,710 --> 00:17:30,440
a little bit about the API definition

00:17:27,730 --> 00:17:33,290
and I can't help but thinking not to try

00:17:30,440 --> 00:17:35,780
make peace out of this but maybe a boat

00:17:33,290 --> 00:17:41,660
solution is the right way to go whereby

00:17:35,780 --> 00:17:43,850
we have an additional API that defines

00:17:41,660 --> 00:17:45,890
software functionality in other words

00:17:43,850 --> 00:17:47,720
al3 forwarding table of a certain size

00:17:45,890 --> 00:17:49,880
that you can reserve in the hardware to

00:17:47,720 --> 00:17:51,620
perform that function implemented in

00:17:49,880 --> 00:17:53,690
whatever way the driver for that hard

00:17:51,620 --> 00:17:56,600
were decides to do so using whatever

00:17:53,690 --> 00:17:58,730
stages the pipeline are necessary and an

00:17:56,600 --> 00:18:00,110
additional low-level primitive API like

00:17:58,730 --> 00:18:02,900
John's written they'll lets a user

00:18:00,110 --> 00:18:05,630
modify that sort of like in the model to

00:18:02,900 --> 00:18:08,240
firewall d in iptables you know you can

00:18:05,630 --> 00:18:09,860
build a service in firewall d and it'll

00:18:08,240 --> 00:18:11,180
translate that into iptables roles and

00:18:09,860 --> 00:18:13,850
if you want to make those more efficient

00:18:11,180 --> 00:18:15,860
you could go in with iptables and munjal

00:18:13,850 --> 00:18:17,600
all around and it might make your

00:18:15,860 --> 00:18:20,240
firewall d state look like absolute

00:18:17,600 --> 00:18:21,860
garbage but I care a whole lot less

00:18:20,240 --> 00:18:24,380
about that if you decided to go

00:18:21,860 --> 00:18:25,970
underneath that service likewise if we

00:18:24,380 --> 00:18:29,150
have some sort of safe software

00:18:25,970 --> 00:18:30,800
definition for certain bits of

00:18:29,150 --> 00:18:32,390
functionality that a driver can

00:18:30,800 --> 00:18:35,360
implement using whatever way it feels

00:18:32,390 --> 00:18:36,740
best as for its hardware I don't care so

00:18:35,360 --> 00:18:38,690
much if you decide to try and make it

00:18:36,740 --> 00:18:41,180
more efficient with a direct written API

00:18:38,690 --> 00:18:42,110
because I don't care if you break your

00:18:41,180 --> 00:18:44,120
heart we're at that point because I've

00:18:42,110 --> 00:18:46,580
given you a safe way to do it that's

00:18:44,120 --> 00:18:47,990
interesting and also I think that makes

00:18:46,580 --> 00:18:51,410
me think that another way to look at it

00:18:47,990 --> 00:18:53,780
is okay use your pee for example how

00:18:51,410 --> 00:18:55,460
come p for can output a little software

00:18:53,780 --> 00:18:58,370
implementation driver that goes into the

00:18:55,460 --> 00:19:00,320
kernel to to backup the physical data

00:18:58,370 --> 00:19:04,760
plane implementation that is actually

00:19:00,320 --> 00:19:07,100
going to run so i don't think one begets

00:19:04,760 --> 00:19:10,549
the other so to speak

00:19:07,100 --> 00:19:12,500
okay so basically maybe I want to bring

00:19:10,549 --> 00:19:15,530
up another example like where we're

00:19:12,500 --> 00:19:17,840
moving towards NF tables we're thinking

00:19:15,530 --> 00:19:21,049
about bringing more EP PF capability

00:19:17,840 --> 00:19:23,809
into the coronal offloading if you

00:19:21,049 --> 00:19:26,480
offload exclusively on a criminal level

00:19:23,809 --> 00:19:28,580
that would imply that we decode the

00:19:26,480 --> 00:19:31,850
intent that is given to us in form of a

00:19:28,580 --> 00:19:36,370
program NF tables bytecode or EP PF

00:19:31,850 --> 00:19:39,380
jaded code how do we offload that case

00:19:36,370 --> 00:19:40,970
how do we how do we make that happen if

00:19:39,380 --> 00:19:42,380
you no longer have a configuration but

00:19:40,970 --> 00:19:49,190
an actual program that is being loaded

00:19:42,380 --> 00:19:52,549
into the kernel yeah yeah actually the

00:19:49,190 --> 00:19:53,900
main get on NP use this is easy I mean

00:19:52,549 --> 00:19:55,490
this yeah well you're just talking a

00:19:53,900 --> 00:19:57,289
period chalking on an early harvest is

00:19:55,490 --> 00:20:00,350
the generic question it off load as

00:19:57,289 --> 00:20:03,200
Gallardo saying offload is offload it

00:20:00,350 --> 00:20:05,780
could be a bunch of core i7s wide

00:20:03,200 --> 00:20:07,909
together with like attending Mac welded

00:20:05,780 --> 00:20:09,890
onto it if that's what you want so as a

00:20:07,909 --> 00:20:12,530
generic answer it can be offloaded in

00:20:09,890 --> 00:20:13,490
the simpler or the more complex case

00:20:12,530 --> 00:20:15,980
that you are talking about like a

00:20:13,490 --> 00:20:17,480
bytecode you can have the device driver

00:20:15,980 --> 00:20:21,110
interpret the bytecode and then program

00:20:17,480 --> 00:20:22,669
the hardware appropriately why that's up

00:20:21,110 --> 00:20:28,220
to the driver and why would we prevent

00:20:22,669 --> 00:20:30,549
them from doing why I'm well so you'll

00:20:28,220 --> 00:20:35,659
give me a TC program or you give me a

00:20:30,549 --> 00:20:37,210
EVP of jit compiled code why can't I

00:20:35,659 --> 00:20:40,220
convert that into primitives I I

00:20:37,210 --> 00:20:44,030
interpret well I think the answer in my

00:20:40,220 --> 00:20:45,500
mind is if if you want to do it and you

00:20:44,030 --> 00:20:47,929
want to do it in a safe and efficient

00:20:45,500 --> 00:20:50,090
manner you develop a model to do it but

00:20:47,929 --> 00:20:52,250
if you can't then you do it by hand but

00:20:50,090 --> 00:20:53,570
it's on you if if it doesn't work out

00:20:52,250 --> 00:20:57,530
right I mean there's only so many

00:20:53,570 --> 00:20:59,150
different models that we can define I'm

00:20:57,530 --> 00:21:00,679
not sure I actually understand yet so

00:20:59,150 --> 00:21:02,900
you having if you have an NF tables

00:21:00,679 --> 00:21:04,309
bytecode MV Lowell a lot of enough

00:21:02,900 --> 00:21:07,669
tables programs into the kernel how do

00:21:04,309 --> 00:21:09,740
you decode the NF tables by instructions

00:21:07,669 --> 00:21:11,510
and you reconstruct and map that somehow

00:21:09,740 --> 00:21:15,700
into a table model that the hardware

00:21:11,510 --> 00:21:19,190
supports inside all inside a colonel

00:21:15,700 --> 00:21:20,280
well regarding and if tables maybe I can

00:21:19,190 --> 00:21:22,410
answer that we

00:21:20,280 --> 00:21:24,180
not sending Michael to the criminal we

00:21:22,410 --> 00:21:26,610
are sending netting messages to the

00:21:24,180 --> 00:21:28,410
kernel which basically you don't have to

00:21:26,610 --> 00:21:31,050
disassemble anything like that they have

00:21:28,410 --> 00:21:32,670
you have fields describing it actually

00:21:31,050 --> 00:21:34,920
pretty much matches what the hardware is

00:21:32,670 --> 00:21:36,900
capable of doing we're saying go to that

00:21:34,920 --> 00:21:38,970
also load this amount of bytes do this

00:21:36,900 --> 00:21:40,290
comparison it's actually pretty close to

00:21:38,970 --> 00:21:42,180
what the hardware is capable of doing

00:21:40,290 --> 00:21:45,120
and what this description world of the

00:21:42,180 --> 00:21:47,420
slow model is exposing it wouldn't be

00:21:45,120 --> 00:21:49,620
hard I think to implement any of tables

00:21:47,420 --> 00:21:52,320
offloading capabilities in this fashion

00:21:49,620 --> 00:21:55,920
I mean I talked to Pablo about this

00:21:52,320 --> 00:21:57,330
previously we don't really care if we we

00:21:55,920 --> 00:21:59,280
are going to send the network messages

00:21:57,330 --> 00:22:01,050
well actually no we're not sure about

00:21:59,280 --> 00:22:03,180
that we don't care where the API is

00:22:01,050 --> 00:22:04,440
exposed as long as it's exposed I think

00:22:03,180 --> 00:22:08,220
we can make the translation in the

00:22:04,440 --> 00:22:11,150
chroma without any big problems yeah I

00:22:08,220 --> 00:22:11,150
mean quite

00:22:14,950 --> 00:22:21,550
I mean another idea was that Pablo

00:22:18,760 --> 00:22:23,380
suggested at the at netcom that he would

00:22:21,550 --> 00:22:24,790
make a separate table for hardware

00:22:23,380 --> 00:22:26,650
offloaded acl's and stuff that if you

00:22:24,790 --> 00:22:27,880
wanna do very simple things you could

00:22:26,650 --> 00:22:29,290
translate it into the hardware

00:22:27,880 --> 00:22:34,300
representation load it with his set

00:22:29,290 --> 00:22:39,120
operations and so on and so forth so ok

00:22:34,300 --> 00:22:39,120
cool so which not steal his lightning

00:22:39,300 --> 00:22:46,260
it's it's definitely an area where we

00:22:41,650 --> 00:22:46,260
need to do some thinking so yeah

00:22:52,809 --> 00:22:58,029
Tom did you have a something you wanted

00:22:55,299 --> 00:23:00,879
to say ok i'm not sure if you reach the

00:22:58,029 --> 00:23:03,460
consensus I believe you cannot do did I

00:23:00,879 --> 00:23:07,059
don't I will not allow arbitrary

00:23:03,460 --> 00:23:09,909
exposure of programming random flow crap

00:23:07,059 --> 00:23:13,269
into the hardware I will have to have a

00:23:09,909 --> 00:23:16,450
type mechanism for every facility ok yep

00:23:13,269 --> 00:23:18,370
so I promise I will block such change

00:23:16,450 --> 00:23:21,039
that's really great because that my

00:23:18,370 --> 00:23:24,909
motivation is that I would like to use

00:23:21,039 --> 00:23:27,340
stuff like TC and to offload stuff to

00:23:24,909 --> 00:23:31,119
hardware without any knowledge of any

00:23:27,340 --> 00:23:34,210
other IP so we have and yeah come to my

00:23:31,119 --> 00:23:42,059
talk tomorrow about this replacement of

00:23:34,210 --> 00:23:42,059
obvious data part might be interesting

00:23:48,679 --> 00:23:53,370
next we have gilad it's going to tell us

00:23:51,360 --> 00:23:55,440
a little bit about how all of this is

00:23:53,370 --> 00:24:02,520
going to become very simple and easy on

00:23:55,440 --> 00:24:04,590
an NP you hi so actually I hope it won't

00:24:02,520 --> 00:24:06,210
be that easy because you know i'm a

00:24:04,590 --> 00:24:11,880
software guy want to keep all as

00:24:06,210 --> 00:24:14,220
programmers you know employed so just

00:24:11,880 --> 00:24:16,080
like a free topics at first I'm glad

00:24:14,220 --> 00:24:18,330
been yourself on the software chief

00:24:16,080 --> 00:24:23,429
architect of easy cheap semiconductors

00:24:18,330 --> 00:24:26,580
we may can be you so that is my you know

00:24:23,429 --> 00:24:30,480
evil corporate hacked under that hat if

00:24:26,580 --> 00:24:32,669
somebody wants to do something with some

00:24:30,480 --> 00:24:35,220
sort of an view from easy cheap and is

00:24:32,669 --> 00:24:37,799
struggling with the I did know in da and

00:24:35,220 --> 00:24:40,919
so and so forth come talk to me i can

00:24:37,799 --> 00:24:42,960
promise i can make you know the changes

00:24:40,919 --> 00:24:47,309
happen but at least we can go and try to

00:24:42,960 --> 00:24:50,279
kill the Lord's together a daughter had

00:24:47,309 --> 00:24:53,399
that i'm wearing i'm actually not always

00:24:50,279 --> 00:24:56,250
have been working in some corporate hard

00:24:53,399 --> 00:24:57,960
was guys i have called in the linux

00:24:56,250 --> 00:25:01,559
kernel i cough or building a building

00:24:57,960 --> 00:25:04,830
systems I broke Davis neither's network

00:25:01,559 --> 00:25:08,789
to eve of some patch it caused the

00:25:04,830 --> 00:25:10,770
caramel panic so I kind of see both both

00:25:08,789 --> 00:25:12,240
sides like I just thought it was

00:25:10,770 --> 00:25:14,789
important to say that because I don't

00:25:12,240 --> 00:25:17,539
think everybody i knows me I know that I

00:25:14,789 --> 00:25:21,120
have a penguin tattoo under this t-shirt

00:25:17,539 --> 00:25:23,850
and basically what i wanted to say has

00:25:21,120 --> 00:25:26,159
become useless because what I've heard

00:25:23,850 --> 00:25:28,980
between girion David Miller just before

00:25:26,159 --> 00:25:31,470
Paul going to say anyway as somebody

00:25:28,980 --> 00:25:36,690
that represents a hard work you know

00:25:31,470 --> 00:25:39,149
fender I would actually prefer that we

00:25:36,690 --> 00:25:40,860
won't supply some user space API to Joe

00:25:39,149 --> 00:25:44,190
spoke the hardware on before the

00:25:40,860 --> 00:25:48,450
criminal I think that's may be tempting

00:25:44,190 --> 00:25:51,210
but in a way useless why because what I

00:25:48,450 --> 00:25:53,190
really want is that for Brazilian people

00:25:51,210 --> 00:25:56,730
that actually go and write you know

00:25:53,190 --> 00:25:59,580
application software ng anak memcache d

00:25:56,730 --> 00:26:01,740
snort SSH all these guys

00:25:59,580 --> 00:26:04,350
to just write their software against the

00:26:01,740 --> 00:26:06,840
API is that they know and work for a lot

00:26:04,350 --> 00:26:08,310
of times right you know the Linux

00:26:06,840 --> 00:26:11,610
socketed behind in all the other AP is

00:26:08,310 --> 00:26:14,580
and have the colonel have the ability

00:26:11,610 --> 00:26:15,900
when such a program is running and doing

00:26:14,580 --> 00:26:18,570
something I'm going to give a few of

00:26:15,900 --> 00:26:21,330
examples and that can be accelerated by

00:26:18,570 --> 00:26:22,560
the hour or accelerated by anything

00:26:21,330 --> 00:26:24,390
right it doesn't have to be hardware

00:26:22,560 --> 00:26:27,120
something beyond the scope of the

00:26:24,390 --> 00:26:30,540
colonel be a switch a bit if it's a vm

00:26:27,120 --> 00:26:35,160
the underline host hypervisor v switch

00:26:30,540 --> 00:26:36,990
did some ASIC and PU or even the

00:26:35,160 --> 00:26:39,720
physical top of rocks which that the

00:26:36,990 --> 00:26:42,030
server may be connected to under their

00:26:39,720 --> 00:26:45,930
circumstances have the colonel asked for

00:26:42,030 --> 00:26:48,690
that acceleration and but having the

00:26:45,930 --> 00:26:51,390
user the program the throat memcache dng

00:26:48,690 --> 00:26:53,640
annex or snort or whatever doesn't have

00:26:51,390 --> 00:26:56,490
to mess and adapt to all those different

00:26:53,640 --> 00:26:58,470
hardware it will just work better right

00:26:56,490 --> 00:27:00,510
and it still continue to work if that

00:26:58,470 --> 00:27:02,970
underlying hardware or support isn't

00:27:00,510 --> 00:27:05,220
there that's for me the kind of thing

00:27:02,970 --> 00:27:08,040
that really needs to get done we don't

00:27:05,220 --> 00:27:10,920
need every programmer to be aware of the

00:27:08,040 --> 00:27:13,320
limitation of it's a little bit of hard

00:27:10,920 --> 00:27:15,270
work and just to give a couple of

00:27:13,320 --> 00:27:17,310
examples right if you look at I don't

00:27:15,270 --> 00:27:21,660
know snort right it has that DAC model

00:27:17,310 --> 00:27:23,250
that if it can write will go by going to

00:27:21,660 --> 00:27:26,690
the colonel and saying okay look I

00:27:23,250 --> 00:27:30,030
really want to only get these kind of

00:27:26,690 --> 00:27:33,600
flows or packets and so on that match

00:27:30,030 --> 00:27:36,510
this regular expression okay and you can

00:27:33,600 --> 00:27:38,880
have the colonel if we decided somebody

00:27:36,510 --> 00:27:40,860
implements that actually try to run a

00:27:38,880 --> 00:27:42,330
regular expression scanning and only

00:27:40,860 --> 00:27:44,280
send it down to you space so you can

00:27:42,330 --> 00:27:46,260
have the colonel if it happens to and

00:27:44,280 --> 00:27:48,990
have the facility to offload it to

00:27:46,260 --> 00:27:51,300
hardwood to say listen when it comes up

00:27:48,990 --> 00:27:53,490
the net don't bother send it up unless

00:27:51,300 --> 00:27:56,370
it matched that regular expression the

00:27:53,490 --> 00:27:58,740
point is that the snort and the doc

00:27:56,370 --> 00:28:00,390
shouldn't care they will work if they

00:27:58,740 --> 00:28:03,210
get everything and they will work back

00:28:00,390 --> 00:28:06,930
there if they get less okay you could

00:28:03,210 --> 00:28:09,090
have the same example with say SSH okay

00:28:06,930 --> 00:28:10,710
today we have a state which is a user

00:28:09,090 --> 00:28:13,440
space program which using the colonel

00:28:10,710 --> 00:28:15,840
api and it opens the socket

00:28:13,440 --> 00:28:18,600
get to be a buffer and then it goes out

00:28:15,840 --> 00:28:21,750
and and for example tries to decrypt it

00:28:18,600 --> 00:28:23,759
and usually if you do this and I hydrati

00:28:21,750 --> 00:28:26,039
you are actually offloading that to

00:28:23,759 --> 00:28:29,129
specific crypto Harbor wouldn't it be

00:28:26,039 --> 00:28:31,710
useful if a program like SSH could you

00:28:29,129 --> 00:28:34,500
know do some socket if do you think that

00:28:31,710 --> 00:28:37,700
which other can look dear Colonel this

00:28:34,500 --> 00:28:42,000
stream of whites it's comes in I know

00:28:37,700 --> 00:28:45,240
that it says crypto encrypted in here

00:28:42,000 --> 00:28:47,250
take the key if you can if you have the

00:28:45,240 --> 00:28:49,200
facility just open the decryption before

00:28:47,250 --> 00:28:51,269
and the colonel might do it by taking

00:28:49,200 --> 00:28:54,600
the bytes and doing the decryption on

00:28:51,269 --> 00:28:56,960
the internal AES of the decor or shoving

00:28:54,600 --> 00:29:01,019
League off to a Krypton engine or

00:28:56,960 --> 00:29:02,879
telling the network were that flow and

00:29:01,019 --> 00:29:05,700
stream coming from to open it on the way

00:29:02,879 --> 00:29:08,639
setting that the frequent trouble via

00:29:05,700 --> 00:29:10,409
the pc I the point is that SSH shouldn't

00:29:08,639 --> 00:29:12,000
care right and we can go to a whole

00:29:10,409 --> 00:29:14,909
bunch of an example but I think the

00:29:12,000 --> 00:29:17,279
general idea is when we're thinking

00:29:14,909 --> 00:29:19,980
about offload it shouldn't be hard work

00:29:17,279 --> 00:29:22,259
offload it should be application

00:29:19,980 --> 00:29:24,210
requesting help from the colonel the

00:29:22,259 --> 00:29:26,009
colonel not doing its best to help them

00:29:24,210 --> 00:29:27,990
whether it's in soft or whether the

00:29:26,009 --> 00:29:30,509
colonel is asking for awful to something

00:29:27,990 --> 00:29:32,220
beneath it p it in a vm something that

00:29:30,509 --> 00:29:34,440
in the hypervisor service which or

00:29:32,220 --> 00:29:36,840
hardware this is the way things should

00:29:34,440 --> 00:29:39,360
be built because that would enable

00:29:36,840 --> 00:29:41,159
people to write programs software

00:29:39,360 --> 00:29:42,899
application which is really what

00:29:41,159 --> 00:29:46,200
customer did end up buying hardware

00:29:42,899 --> 00:29:48,240
offloading or not care about and you

00:29:46,200 --> 00:29:50,789
know all the vendors would actually play

00:29:48,240 --> 00:29:53,580
out not with you wrote this program for

00:29:50,789 --> 00:29:55,889
disappeared at OPI but for what kind of

00:29:53,580 --> 00:29:58,769
offload then what kind of performance we

00:29:55,889 --> 00:30:02,039
can provide the last thing i want to say

00:29:58,769 --> 00:30:06,360
and then on the questions if somebody

00:30:02,039 --> 00:30:10,379
has is a being that i come from mpu a

00:30:06,360 --> 00:30:13,230
network processor or vendor you know i'm

00:30:10,379 --> 00:30:16,919
hearing all this offloading about l2 and

00:30:13,230 --> 00:30:19,259
l3 routing table while switching that's

00:30:16,919 --> 00:30:23,100
nice let's have that you know i'm all

00:30:19,259 --> 00:30:25,019
for it but really if you look at what

00:30:23,100 --> 00:30:26,669
the colonel is doing and what hardware

00:30:25,019 --> 00:30:29,070
is capable you

00:30:26,669 --> 00:30:30,509
really want to be able to offload stuff

00:30:29,070 --> 00:30:33,480
which is more let's call a

00:30:30,509 --> 00:30:36,659
turing-complete okay stuff like T conf

00:30:33,480 --> 00:30:38,309
table bytecode and so on we already have

00:30:36,659 --> 00:30:40,369
hardware that can do this i know i'm not

00:30:38,309 --> 00:30:44,580
talking about impure i'm talking about

00:30:40,369 --> 00:30:46,559
another intel you know running linux on

00:30:44,580 --> 00:30:50,220
the other end of the link and yes it can

00:30:46,559 --> 00:30:54,480
be NP or it can be a multi-core let's

00:30:50,220 --> 00:30:57,179
not shape how offloading looks like by

00:30:54,480 --> 00:31:00,119
the measure of some nasik that has this

00:30:57,179 --> 00:31:03,359
fixed table or pipeline ok let's try to

00:31:00,119 --> 00:31:05,850
make at least the scheme of offload to

00:31:03,359 --> 00:31:10,289
ring complete because this is computer

00:31:05,850 --> 00:31:12,960
off the wall and things evolve ok that's

00:31:10,289 --> 00:31:16,259
it I just want to make a side comment i

00:31:12,960 --> 00:31:19,049
like your ssh example because herbert

00:31:16,259 --> 00:31:22,399
shoe and my eye who is the crypto layer

00:31:19,049 --> 00:31:24,299
maintainer we've discussed doing ssl

00:31:22,399 --> 00:31:26,070
handling over sockets and we could

00:31:24,299 --> 00:31:27,239
easily extend it to arbitrary crypto

00:31:26,070 --> 00:31:28,950
algorithms that are supported by the

00:31:27,239 --> 00:31:30,149
crypto engine already so this is

00:31:28,950 --> 00:31:34,039
something in the back of our heads

00:31:30,149 --> 00:31:34,039
already cool thanks

00:31:35,280 --> 00:31:40,800
no no I won't put that burden on him we

00:31:38,110 --> 00:31:43,840
we've already thought about this already

00:31:40,800 --> 00:31:45,250
yes sir so and before actually doesn't

00:31:43,840 --> 00:31:47,320
have script engine so that's not a good

00:31:45,250 --> 00:31:48,670
example but for the NPS one watching

00:31:47,320 --> 00:31:51,690
samples end of the year you can count

00:31:48,670 --> 00:31:55,440
them you know what I'd love to do that

00:31:51,690 --> 00:31:55,440

YouTube URL: https://www.youtube.com/watch?v=kPR808pQeTU


