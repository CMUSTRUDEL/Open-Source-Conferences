Title: Netdev 0.1 - Hardware Offloading BoF (Part 4 of 9) - Mellanox Presentation
Publication date: 2015-04-07
Playlist: Netdev 0.1 - Day 2 - Sunday February 15, 2015
Description: 
	Mellanox Presentation
Matty
February 2015

Part 4 of 9 in the Hardware Offloading BoF series

https://www.netdev01.org

This video is licensed under Creative Commons Attribution-ShareAlike 4.0 International license. Feel free to download and distribute.
Captions: 
	00:00:00,380 --> 00:00:12,809
so I amati and i'm working with mellanox

00:00:04,020 --> 00:00:14,730
and and we are another hollow vendor and

00:00:12,809 --> 00:00:17,340
yeah we all we want to be part of the

00:00:14,730 --> 00:00:22,890
community and we want to be part of the

00:00:17,340 --> 00:00:26,400
effort and we want our to provide the

00:00:22,890 --> 00:00:31,380
driver that you can just run Quogue on

00:00:26,400 --> 00:00:35,460
top of a box with a driver or configure

00:00:31,380 --> 00:00:37,770
an FD b entry or set a big Santana and

00:00:35,460 --> 00:00:40,860
it you and it will just work and this is

00:00:37,770 --> 00:00:44,700
something that I think everybody in this

00:00:40,860 --> 00:00:46,320
room desire and you know trying to

00:00:44,700 --> 00:00:48,090
figure out what would be the best way to

00:00:46,320 --> 00:00:51,030
do it and what what are the step to do

00:00:48,090 --> 00:00:52,710
it and he is something that I understand

00:00:51,030 --> 00:00:56,610
formatted it is is going to talk about

00:00:52,710 --> 00:00:58,879
it in tomorrow's session so this is some

00:00:56,610 --> 00:01:02,730
slight that I prepared the pipette oh

00:00:58,879 --> 00:01:04,470
sorry Andy I will take part of i will

00:01:02,730 --> 00:01:12,840
talk part of the thing we talked about

00:01:04,470 --> 00:01:14,369
um okay so we have which righty to

00:01:12,840 --> 00:01:18,090
figure out what would be the step and

00:01:14,369 --> 00:01:20,759
since we want we want to be player form

00:01:18,090 --> 00:01:26,580
today and this is not a sacred hours

00:01:20,759 --> 00:01:29,280
decay and I believe that some other how

00:01:26,580 --> 00:01:30,600
the vendor SDK are in user space we need

00:01:29,280 --> 00:01:33,150
to understand what will be the best way

00:01:30,600 --> 00:01:36,210
to start ranking and you are as I said

00:01:33,150 --> 00:01:38,070
we don't want to first port all our SDK

00:01:36,210 --> 00:01:41,520
functionality to the colonel and I'm not

00:01:38,070 --> 00:01:43,229
getting to the i'm not trying to say

00:01:41,520 --> 00:01:47,880
whether it is the right on a wrong way

00:01:43,229 --> 00:01:51,149
I'm just saying that it can't be happen

00:01:47,880 --> 00:01:53,490
from the first day because as you

00:01:51,149 --> 00:01:57,360
probably know that there are more than

00:01:53,490 --> 00:02:00,570
two or 10 line of code in our SDK so we

00:01:57,360 --> 00:02:02,490
want a hole out facing any water we want

00:02:00,570 --> 00:02:04,530
to take a baby step in all together and

00:02:02,490 --> 00:02:09,030
we are trying to figure out what what

00:02:04,530 --> 00:02:11,730
are the doubt those tapes so as we see

00:02:09,030 --> 00:02:13,130
the first step together is to provide

00:02:11,730 --> 00:02:16,700
native as people meaning

00:02:13,130 --> 00:02:19,880
at each silicon port will have nay

00:02:16,700 --> 00:02:21,560
device represent the port as always what

00:02:19,880 --> 00:02:23,630
do you will get an ability to send and

00:02:21,560 --> 00:02:27,620
receive package via this sport and

00:02:23,630 --> 00:02:33,760
actually we will get 30 c 36 or whatever

00:02:27,620 --> 00:02:33,760
number of ports are on this device nix

00:02:34,000 --> 00:02:41,960
on top of that we we will provide of

00:02:39,950 --> 00:02:43,760
course the state state reflection of

00:02:41,960 --> 00:02:47,090
those links so meaning though when did

00:02:43,760 --> 00:02:50,860
one be one of those links get it down it

00:02:47,090 --> 00:02:50,860
will reflect the camel net device

00:02:51,070 --> 00:02:55,820
counters may be there as well so if you

00:02:53,300 --> 00:03:00,730
read those the port counters you will

00:02:55,820 --> 00:03:03,050
get the counters from the hardware may

00:03:00,730 --> 00:03:04,610
some basic functionality may be there as

00:03:03,050 --> 00:03:07,160
well like empty use speed but this is

00:03:04,610 --> 00:03:14,150
not a mandatory for my for my point of

00:03:07,160 --> 00:03:16,010
view next step will be to put some

00:03:14,150 --> 00:03:18,860
resource management logic inside it

00:03:16,010 --> 00:03:21,530
inside this camera module that represent

00:03:18,860 --> 00:03:24,080
the switch and we add a few debates

00:03:21,530 --> 00:03:27,340
before on the resource manager whether

00:03:24,080 --> 00:03:27,340
it should be and now it should work

00:03:28,480 --> 00:03:33,520
problem is that some of the other are

00:03:31,280 --> 00:03:38,750
not deterministic meaning that you have

00:03:33,520 --> 00:03:42,250
huge table in that huddle and this huge

00:03:38,750 --> 00:03:44,360
table used for a lot of different

00:03:42,250 --> 00:03:46,850
logical table meaning you have a huge

00:03:44,360 --> 00:03:50,660
tecum table that could use for a CEO or

00:03:46,850 --> 00:03:54,530
router or you have a huge hash table

00:03:50,660 --> 00:04:01,490
that can use for either mpls vicks lon

00:03:54,530 --> 00:04:05,180
and algorithmic LPM so language life

00:04:01,490 --> 00:04:07,730
before or john proposal and advertising

00:04:05,180 --> 00:04:09,800
some table size won't help you you need

00:04:07,730 --> 00:04:15,010
some vendor specific driver that will

00:04:09,800 --> 00:04:21,020
advertise or will reject or approve some

00:04:15,010 --> 00:04:23,570
table entry insertion operation so this

00:04:21,020 --> 00:04:26,010
should be the next step in in as I see

00:04:23,570 --> 00:04:31,790
it in our phasing

00:04:26,010 --> 00:04:36,990
in our porting to off our SDK to the

00:04:31,790 --> 00:04:40,080
driver to the caramel sorry and from

00:04:36,990 --> 00:04:43,560
that point actually we could have a

00:04:40,080 --> 00:04:45,990
fully functional silicon by providing

00:04:43,560 --> 00:04:48,630
all the above all the below

00:04:45,990 --> 00:04:50,370
functionality native and resource

00:04:48,630 --> 00:04:53,250
manager from the camera on the other

00:04:50,370 --> 00:04:57,620
functionality will be again at the first

00:04:53,250 --> 00:05:00,270
stage provided by user space by going

00:04:57,620 --> 00:05:01,710
bye-bye doing toppling actually it is

00:05:00,270 --> 00:05:03,300
going from the camera to the user

00:05:01,710 --> 00:05:05,550
specific back and configuring the other

00:05:03,300 --> 00:05:09,690
we understand that is not desirable and

00:05:05,550 --> 00:05:11,160
this is not what we aim to do but in

00:05:09,690 --> 00:05:13,140
order to provide a fully functional

00:05:11,160 --> 00:05:14,940
silicon this is what we want to do this

00:05:13,140 --> 00:05:17,430
would be the next step so this is this

00:05:14,940 --> 00:05:20,610
would be the and from that point we will

00:05:17,430 --> 00:05:22,290
start porting tables but one by one so

00:05:20,610 --> 00:05:25,140
we will pull the FDB code into the

00:05:22,290 --> 00:05:33,270
kernel then we can port ACL code into

00:05:25,140 --> 00:05:35,480
the kernel etc etc um question of that

00:05:33,270 --> 00:05:35,480
stage

00:05:37,200 --> 00:05:40,730
nice um

00:05:42,200 --> 00:05:46,790
moving forward we can start on we can

00:05:45,560 --> 00:05:50,810
try to understand what is the best way

00:05:46,790 --> 00:05:52,430
to port complex structure that the data

00:05:50,810 --> 00:05:56,930
structure like I'll go with me Cal p.m.

00:05:52,430 --> 00:06:02,390
i'll go lytic tecum and cell and talked

00:05:56,930 --> 00:06:04,700
about some bulk operation from Colonel

00:06:02,390 --> 00:06:07,190
to the driver in order to do operation

00:06:04,700 --> 00:06:10,210
like issu in service software update and

00:06:07,190 --> 00:06:13,460
so when you are won't when you want to

00:06:10,210 --> 00:06:16,460
bring down a driver and then reboot it

00:06:13,460 --> 00:06:18,950
or bring it up again and get all the

00:06:16,460 --> 00:06:22,370
information that was there before from

00:06:18,950 --> 00:06:32,150
the from all the distributed colonel

00:06:22,370 --> 00:06:34,070
table that's all any question I I think

00:06:32,150 --> 00:06:36,980
it's a good idea and it's been proposed

00:06:34,070 --> 00:06:39,590
in other scenarios to start with a net

00:06:36,980 --> 00:06:42,170
debt based driver that just does pure

00:06:39,590 --> 00:06:43,910
transmit receive functionality and and

00:06:42,170 --> 00:06:46,040
that that's good you should get that

00:06:43,910 --> 00:06:48,650
into the kernel as soon as you can as

00:06:46,040 --> 00:06:50,780
for the next steps where you start

00:06:48,650 --> 00:06:53,780
having the resource manager implemented

00:06:50,780 --> 00:06:55,730
and then one by one moving things into

00:06:53,780 --> 00:06:57,740
the API is that whatever we come with

00:06:55,730 --> 00:07:00,050
for switching off load I think you need

00:06:57,740 --> 00:07:01,940
to do that those intermediate steps

00:07:00,050 --> 00:07:05,240
before you start supporting our stuff in

00:07:01,940 --> 00:07:07,820
your own little playground somewhere I'm

00:07:05,240 --> 00:07:09,530
not against people reviewing the work

00:07:07,820 --> 00:07:11,390
that you're doing step by step on a net

00:07:09,530 --> 00:07:12,890
dev list but I'm not I don't think I

00:07:11,390 --> 00:07:16,220
want to put that in my tree during those

00:07:12,890 --> 00:07:17,810
steps so once you go full bore into the

00:07:16,220 --> 00:07:19,130
AP is that we have in the tree and are

00:07:17,810 --> 00:07:21,560
supporting that that's when I would like

00:07:19,130 --> 00:07:23,180
to see that aspect of your changes so I

00:07:21,560 --> 00:07:25,820
think the or and another thing to think

00:07:23,180 --> 00:07:29,600
about here is part of this exercise is

00:07:25,820 --> 00:07:34,520
about helping us figure out what your

00:07:29,600 --> 00:07:36,350
needs are okay because we have our scope

00:07:34,520 --> 00:07:38,720
is limited currently because we haven't

00:07:36,350 --> 00:07:40,220
seen what all these devices want to do

00:07:38,720 --> 00:07:42,800
and so that's really important for you

00:07:40,220 --> 00:07:46,190
to expose to us what it is that the

00:07:42,800 --> 00:07:47,390
outcome is that you want and discuss

00:07:46,190 --> 00:07:49,520
with us what's a reasonable way to

00:07:47,390 --> 00:07:51,230
achieve that goal and so I think that's

00:07:49,520 --> 00:07:54,249
where the most important part of your

00:07:51,230 --> 00:07:56,229
process from our perspective

00:07:54,249 --> 00:07:58,269
and what the biggest benefit is for

00:07:56,229 --> 00:08:00,759
linux as a hole during the supporting

00:07:58,269 --> 00:08:05,829
process of your SDKs so so great to you

00:08:00,759 --> 00:08:09,279
that I'm just one question so okay the

00:08:05,829 --> 00:08:13,359
nether purport is fun enough we can

00:08:09,279 --> 00:08:16,239
submit something like that and and we

00:08:13,359 --> 00:08:21,189
can try to sync out we can open it it is

00:08:16,239 --> 00:08:22,779
a fair amount of work about all the

00:08:21,189 --> 00:08:27,819
block of SDK we are trying to figure out

00:08:22,779 --> 00:08:30,579
what is the best way in all or nothing

00:08:27,819 --> 00:08:34,990
is probably from our point of view are

00:08:30,579 --> 00:08:39,430
not good solution question is whether we

00:08:34,990 --> 00:08:43,149
can submit a driver which has only

00:08:39,430 --> 00:08:47,199
limited functionality and have some

00:08:43,149 --> 00:08:49,240
extension that are currently closed they

00:08:47,199 --> 00:08:52,870
are not part of the diode closer though

00:08:49,240 --> 00:08:55,509
they are open but not part of their the

00:08:52,870 --> 00:08:59,500
upstream that you can plug in into this

00:08:55,509 --> 00:09:01,149
upstream driver and you're going to have

00:08:59,500 --> 00:09:04,059
to export things that I'm not too happy

00:09:01,149 --> 00:09:07,329
about in order to facilitate that so I I

00:09:04,059 --> 00:09:10,089
really think so for example if you want

00:09:07,329 --> 00:09:12,040
to add the code that manages the switch

00:09:10,089 --> 00:09:15,009
switching offload resources and the

00:09:12,040 --> 00:09:16,480
tables and stuff abstractly which you

00:09:15,009 --> 00:09:19,660
need anyways for your final driver

00:09:16,480 --> 00:09:21,459
that's fine but the interface is to plug

00:09:19,660 --> 00:09:23,319
into that now you can have that as

00:09:21,459 --> 00:09:24,879
changes in your local tree that plug

00:09:23,319 --> 00:09:27,160
that stuff in and you can play hat with

00:09:24,879 --> 00:09:29,259
that however you want in your external

00:09:27,160 --> 00:09:32,050
tree but I don't want new interfaces

00:09:29,259 --> 00:09:34,420
exported inside of my tree know what

00:09:32,050 --> 00:09:37,839
amount is let's assume that I will

00:09:34,420 --> 00:09:40,240
provide a current level and collapsing

00:09:37,839 --> 00:09:43,089
driving with all all the right API so

00:09:40,240 --> 00:09:45,009
you will have all the right API so pal

00:09:43,089 --> 00:09:49,269
pal them will be null implementation

00:09:45,009 --> 00:09:51,510
because county it is missing from there

00:09:49,269 --> 00:09:55,170
are um

00:09:51,510 --> 00:09:57,210
the camera driver but we will provide

00:09:55,170 --> 00:10:00,720
immunity disability won't be part of the

00:09:57,210 --> 00:10:03,420
upstream to make those API fully

00:10:00,720 --> 00:10:06,450
functional we are calling to using space

00:10:03,420 --> 00:10:09,390
code so the name let's can i interject

00:10:06,450 --> 00:10:10,800
for a second day sure so one of things I

00:10:09,390 --> 00:10:14,040
wanted to just ask about from what i

00:10:10,800 --> 00:10:15,390
heard your second ago it sounded like

00:10:14,040 --> 00:10:16,950
you said don't you know don't bring it

00:10:15,390 --> 00:10:19,680
into my tree unless it's sort of done

00:10:16,950 --> 00:10:21,660
I'm I'm saying dumping into my tree

00:10:19,680 --> 00:10:23,220
something that makes its own api's and

00:10:21,660 --> 00:10:25,080
exports it to user space and has this

00:10:23,220 --> 00:10:27,990
user land component diagram serves that

00:10:25,080 --> 00:10:29,610
we haven't made up eyes for yet okay but

00:10:27,990 --> 00:10:31,110
i think but a slow evolution of like

00:10:29,610 --> 00:10:32,760
okay here are the l2 phone here's the l2

00:10:31,110 --> 00:10:35,040
functionality here's the implemented no

00:10:32,760 --> 00:10:36,960
argument and absolutely do it man here's

00:10:35,040 --> 00:10:38,820
the l3 and or here's the ACL right

00:10:36,960 --> 00:10:40,260
anything you can implement with api's we

00:10:38,820 --> 00:10:42,090
have already that's perfectly perfectly

00:10:40,260 --> 00:10:43,290
okay so bring it into pieces and i think

00:10:42,090 --> 00:10:45,450
you really touched on a key point which

00:10:43,290 --> 00:10:46,500
is that if you know the first people

00:10:45,450 --> 00:10:47,940
that are there to break open are the

00:10:46,500 --> 00:10:49,110
ones that get to help define those api's

00:10:47,940 --> 00:10:51,150
a little bit better and really help

00:10:49,110 --> 00:10:52,800
indicate this is what's important you

00:10:51,150 --> 00:10:54,600
know this is what hardware can do

00:10:52,800 --> 00:10:56,460
because we aren't at a point where we

00:10:54,600 --> 00:10:58,890
have a great idea right now of what

00:10:56,460 --> 00:11:00,390
could be done and I mean another process

00:10:58,890 --> 00:11:02,310
that goes along with this is sometimes

00:11:00,390 --> 00:11:03,990
you think you think what you actually

00:11:02,310 --> 00:11:06,480
wanted was X and actually we can show

00:11:03,990 --> 00:11:08,910
you that why is the destination for

00:11:06,480 --> 00:11:11,250
example so yeah okay the two-way street

00:11:08,910 --> 00:11:15,120
so I think I think yeah I got the

00:11:11,250 --> 00:11:17,460
impression you guys are close so cool

00:11:15,120 --> 00:11:19,710
but we're verification I told I totally

00:11:17,460 --> 00:11:21,510
agree with the gradual implementation of

00:11:19,710 --> 00:11:23,040
various offloading features for

00:11:21,510 --> 00:11:24,810
facilities we have already but for the

00:11:23,040 --> 00:11:27,720
stuff that we don't define interfaces

00:11:24,810 --> 00:11:30,510
and infrastructure for I don't want you

00:11:27,720 --> 00:11:32,610
by passing and going into user space or

00:11:30,510 --> 00:11:35,760
whatever and adding new interfaces that

00:11:32,610 --> 00:11:37,830
we don't have yet specifically for the

00:11:35,760 --> 00:11:39,420
facilitation of your ongoing work you

00:11:37,830 --> 00:11:41,010
can do that in an external tree and I

00:11:39,420 --> 00:11:45,000
don't think that's much of a burden if

00:11:41,010 --> 00:11:48,230
honestly in my opinion okay I just want

00:11:45,000 --> 00:11:52,530
to it I'm from mellanox as well Matty's

00:11:48,230 --> 00:11:55,770
hey I wanted to add there is Matty said

00:11:52,530 --> 00:11:57,780
there are many drivers or things that

00:11:55,770 --> 00:12:00,360
need to be run written to the kernel

00:11:57,780 --> 00:12:02,280
which requires a lot of expertise and

00:12:00,360 --> 00:12:04,350
knowledge on the hardware but have some

00:12:02,280 --> 00:12:05,100
very complex algorithms that needs to be

00:12:04,350 --> 00:12:07,710
at

00:12:05,100 --> 00:12:10,170
there was a comment here that people are

00:12:07,710 --> 00:12:13,200
not aware of what the hardware and what

00:12:10,170 --> 00:12:15,480
the switches can do and I really

00:12:13,200 --> 00:12:18,540
encourage once we start to do those

00:12:15,480 --> 00:12:20,460
interfaces to the kernel for people that

00:12:18,540 --> 00:12:22,500
want to take a part of this effort to

00:12:20,460 --> 00:12:25,680
approach mellanox and we will happily

00:12:22,500 --> 00:12:28,610
share devices and try to use the

00:12:25,680 --> 00:12:38,280
leverage the community work on that

00:12:28,610 --> 00:12:40,230
thank you thank you I was hoping they

00:12:38,280 --> 00:12:42,750
would say it but i should say this this

00:12:40,230 --> 00:12:44,730
was the switch side of mellanox they

00:12:42,750 --> 00:12:46,950
actually have fairly open drivers on the

00:12:44,730 --> 00:12:49,230
knicks I'd a bunch of you guys are

00:12:46,950 --> 00:12:50,970
familiar with that so this was only a

00:12:49,230 --> 00:12:54,450
portion of the of the company that we

00:12:50,970 --> 00:12:56,160
are talking about all right so this is

00:12:54,450 --> 00:12:59,250
that was the last of the vendor

00:12:56,160 --> 00:13:01,320
presentation so to say I don't know if

00:12:59,250 --> 00:13:05,160
we should do a bio break because we have

00:13:01,320 --> 00:13:06,510
probably another hour or more of or

00:13:05,160 --> 00:13:09,990
should we keep going what's the general

00:13:06,510 --> 00:13:11,910
vote keep going all right let's keep

00:13:09,990 --> 00:13:13,770
going so next we have rupa we're going

00:13:11,910 --> 00:13:16,410
to talk a little bit about device

00:13:13,770 --> 00:13:18,600
modeling and and the next team so to say

00:13:16,410 --> 00:13:21,360
is group was going to talk a little bit

00:13:18,600 --> 00:13:22,860
about stuff from switch dev we're going

00:13:21,360 --> 00:13:24,540
to Scott talk a little bit about rocker

00:13:22,860 --> 00:13:26,510
as the back end which we've heard a

00:13:24,540 --> 00:13:28,650
little bit about we're going to have

00:13:26,510 --> 00:13:30,390
Sanjay talk a little bit about switch

00:13:28,650 --> 00:13:32,010
abstraction API which is something that

00:13:30,390 --> 00:13:33,780
they're trying to get through and we're

00:13:32,010 --> 00:13:35,880
going to have the Qualcomm people come

00:13:33,780 --> 00:13:37,590
and talk about what small devices look

00:13:35,880 --> 00:13:41,030
like and why they are very interesting

00:13:37,590 --> 00:13:41,030
to us okay

00:13:43,210 --> 00:13:49,850
hello everyone my name is Rupa and I

00:13:45,920 --> 00:13:51,680
worked for killers I have not a lot to

00:13:49,850 --> 00:13:55,060
say just a few things that have been

00:13:51,680 --> 00:13:57,950
going upstream and going on upstream I

00:13:55,060 --> 00:14:04,970
know just this is just a list for myself

00:13:57,950 --> 00:14:08,779
I like the discussion on the policies

00:14:04,970 --> 00:14:11,089
for offloads and right now my focus has

00:14:08,779 --> 00:14:14,149
been on the default policy for the

00:14:11,089 --> 00:14:17,120
colonel I'm trying to make it same as

00:14:14,149 --> 00:14:20,120
how Nick offloads worked basically by

00:14:17,120 --> 00:14:23,000
default if you do a bridge FTB ad dev st

00:14:20,120 --> 00:14:25,640
SW p 1 and if swp one happens to be a

00:14:23,000 --> 00:14:27,589
switch port and the switchport expresses

00:14:25,640 --> 00:14:30,110
interest in hardware offload it

00:14:27,589 --> 00:14:32,899
basically goes to hardware their PP

00:14:30,110 --> 00:14:34,940
entry goes to hardware and if there is

00:14:32,899 --> 00:14:37,510
no resource in hardware it should

00:14:34,940 --> 00:14:41,029
actually fail the operation so that's

00:14:37,510 --> 00:14:43,520
where my focus has been and I've been

00:14:41,029 --> 00:14:47,480
trying to submit patches in that

00:14:43,520 --> 00:14:51,130
direction and in our previous meetings

00:14:47,480 --> 00:14:56,180
on this topic and box we have always

00:14:51,130 --> 00:14:58,910
said that the policy for the kernel for

00:14:56,180 --> 00:15:02,750
resource problems default policy would

00:14:58,910 --> 00:15:04,850
be if / operation if the if you want it

00:15:02,750 --> 00:15:06,950
to go software only or Colonel only you

00:15:04,850 --> 00:15:08,480
could set a flag on the operation the

00:15:06,950 --> 00:15:11,390
net link operation saying that Colonel

00:15:08,480 --> 00:15:14,000
only or hardware only for bridge FTB

00:15:11,390 --> 00:15:16,580
today there is such mechanism to

00:15:14,000 --> 00:15:21,200
actually do a master and self flags

00:15:16,580 --> 00:15:24,500
which works works very well and ok and

00:15:21,200 --> 00:15:27,410
the feature flag on the net EFT for the

00:15:24,500 --> 00:15:30,440
driver to indicate support for offload

00:15:27,410 --> 00:15:32,570
can be turned off similar to how Nick

00:15:30,440 --> 00:15:38,690
features can be turned off via each tool

00:15:32,570 --> 00:15:42,130
today apart from that things in switched

00:15:38,690 --> 00:15:45,709
off happening right now we still need

00:15:42,130 --> 00:15:48,230
ftp offloads to use the net I of

00:15:45,709 --> 00:15:51,950
hardware switch off load flag which I'm

00:15:48,230 --> 00:15:54,680
currently working on and it's okay

00:15:51,950 --> 00:15:55,130
another thing that is important to

00:15:54,680 --> 00:15:57,920
discuss

00:15:55,130 --> 00:16:02,210
is handling offloads through stack net

00:15:57,920 --> 00:16:04,460
devices we have discussed this on on the

00:16:02,210 --> 00:16:07,640
mailing list with Scott and jury and

00:16:04,460 --> 00:16:09,500
everybody else and today we are

00:16:07,640 --> 00:16:12,020
traversing the tree to go to the lower

00:16:09,500 --> 00:16:14,270
device but in previous box and

00:16:12,020 --> 00:16:16,550
discussions we have it has always come

00:16:14,270 --> 00:16:20,420
up if we should introduce a switch

00:16:16,550 --> 00:16:24,650
device a special device I can see Scott

00:16:20,420 --> 00:16:28,130
smiling switch device for to represent

00:16:24,650 --> 00:16:30,770
the switch when you don't have a port to

00:16:28,130 --> 00:16:32,930
resolve the operation to but that has

00:16:30,770 --> 00:16:34,580
always been the position has always been

00:16:32,930 --> 00:16:38,420
to introduce it when it's required and

00:16:34,580 --> 00:16:43,070
not right now and I think Scott already

00:16:38,420 --> 00:16:45,710
has patches for fib dev to use a similar

00:16:43,070 --> 00:16:47,990
approach to go through stack net devices

00:16:45,710 --> 00:16:51,830
to the switchdriver so we'll see as long

00:16:47,990 --> 00:16:55,490
as that works we will go on and maybe

00:16:51,830 --> 00:16:59,750
the future will add a switch device like

00:16:55,490 --> 00:17:03,950
thing for acl's and stuff other than

00:16:59,750 --> 00:17:06,530
that I'm also working on I had RFC

00:17:03,950 --> 00:17:09,170
patches submitted for duplicate packet

00:17:06,530 --> 00:17:10,870
handling which loosen talked about in

00:17:09,170 --> 00:17:14,600
the hardware acceleration offload

00:17:10,870 --> 00:17:16,670
tutorial where packets from switch which

00:17:14,600 --> 00:17:19,670
are already forwarded in hardware we

00:17:16,670 --> 00:17:23,329
want the kernel to not reef or word them

00:17:19,670 --> 00:17:25,040
so yeah you will see some patches on

00:17:23,329 --> 00:17:28,870
that there is already some discussions

00:17:25,040 --> 00:17:33,830
going on and the next in line is

00:17:28,870 --> 00:17:36,530
hardware counters for bridge forwarded

00:17:33,830 --> 00:17:39,620
packets and so on I think we will

00:17:36,530 --> 00:17:43,960
probably carry this discussion on native

00:17:39,620 --> 00:17:43,960
will submit some patches on on that and

00:17:44,710 --> 00:17:52,520
okay soft so on a switch the see the

00:17:50,720 --> 00:17:54,740
colonel doesn't see all the packets it

00:17:52,520 --> 00:17:56,780
so it naturally the software doesn't

00:17:54,740 --> 00:17:58,670
count everything so there are hardware

00:17:56,780 --> 00:18:00,680
counters Hardware maintains current

00:17:58,670 --> 00:18:05,030
counters for bridge packets for routed

00:18:00,680 --> 00:18:08,360
packets and so on and so for switch

00:18:05,030 --> 00:18:10,549
ports today what we do is

00:18:08,360 --> 00:18:12,620
yeah for some of the counties we

00:18:10,549 --> 00:18:15,170
actually we use ton tab driver and we

00:18:12,620 --> 00:18:18,410
have extensions to actually add these

00:18:15,170 --> 00:18:20,360
counters to the colonel now this has to

00:18:18,410 --> 00:18:22,730
be extended to something like the bridge

00:18:20,360 --> 00:18:25,600
device if you are using a bridge and all

00:18:22,730 --> 00:18:28,520
switch ports are in it and the bridge

00:18:25,600 --> 00:18:30,710
net device should actually reflect all

00:18:28,520 --> 00:18:34,370
the packets that are bridged whether in

00:18:30,710 --> 00:18:36,650
hardware or software so we probably will

00:18:34,370 --> 00:18:39,650
need some mechanism to do that there as

00:18:36,650 --> 00:18:42,049
well so he's like a NGO switch gets

00:18:39,650 --> 00:18:43,460
that's yeah something that's something

00:18:42,049 --> 00:18:47,360
like that which will just add the

00:18:43,460 --> 00:18:48,830
hardware stats to there is the

00:18:47,360 --> 00:18:51,410
additional complication rate in a

00:18:48,830 --> 00:18:53,360
standard switch a broadcast frame will

00:18:51,410 --> 00:18:55,179
get broadcast internally and then up to

00:18:53,360 --> 00:18:58,460
the CPU and potentially broadcast again

00:18:55,179 --> 00:18:59,780
so this will require more than just

00:18:58,460 --> 00:19:01,790
simple addition it will have to have

00:18:59,780 --> 00:19:04,700
policies attached to it but we clearly

00:19:01,790 --> 00:19:07,400
need one more layer of indirection for

00:19:04,700 --> 00:19:09,290
the offload counter case a saying in the

00:19:07,400 --> 00:19:10,790
case where we have a switch dev the

00:19:09,290 --> 00:19:12,650
broadcasts were coming in and we figure

00:19:10,790 --> 00:19:14,510
out what software of ports we put it

00:19:12,650 --> 00:19:16,490
through and we don't want to count it

00:19:14,510 --> 00:19:23,540
again from the places where the hardware

00:19:16,490 --> 00:19:30,500
sent it okay and I think the last on the

00:19:23,540 --> 00:19:32,510
list is lag this is simple lag and this

00:19:30,500 --> 00:19:35,390
can be achieved the basic stuff can be

00:19:32,510 --> 00:19:37,490
achieved by notifiers today the switch

00:19:35,390 --> 00:19:40,760
switch driver can actually listen to a

00:19:37,490 --> 00:19:43,400
port going into a bond and actually grab

00:19:40,760 --> 00:19:46,280
all the bond attributes and pass it on

00:19:43,400 --> 00:19:48,710
to hardware so we think that probably

00:19:46,280 --> 00:19:51,140
the switchdriver can listen to use the

00:19:48,710 --> 00:19:53,750
existing notifiers mechanism and support

00:19:51,140 --> 00:19:55,610
this there are also hardware Nick

00:19:53,750 --> 00:19:58,040
drivers that use those notifiers as well

00:19:55,610 --> 00:20:02,630
to program bonding off launch evidence

00:19:58,040 --> 00:20:06,710
alert okay okay great yeah that's all I

00:20:02,630 --> 00:20:09,660
had actually any questions sounds good

00:20:06,710 --> 00:20:11,720
to me thank you

00:20:09,660 --> 00:20:11,720

YouTube URL: https://www.youtube.com/watch?v=6kBlyQiAL4E


