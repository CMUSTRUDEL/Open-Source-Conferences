Title: Netdev 0.1 - Hardware Offloading BoF (Part 9 of 9)
Publication date: 2015-04-07
Playlist: Netdev 0.1 - Day 2 - Sunday February 15, 2015
Description: 
	Hannes Frederic Sowa
February 2015

Part 9 of 9 in the Hardware Offloading BoF series

This video is licensed under Creative Commons Attribution-ShareAlike 4.0 International license. Feel free to download and distribute.
Captions: 
	00:00:00,000 --> 00:00:05,040
and so the last thing now standing

00:00:01,589 --> 00:00:12,509
between you and food is harness lately

00:00:05,040 --> 00:00:14,700
offloads so hello um I was invited on

00:00:12,509 --> 00:00:17,070
short notice so I'm not that well

00:00:14,700 --> 00:00:18,690
prepared but I looked at the discussions

00:00:17,070 --> 00:00:21,930
on that def again and I just hope to

00:00:18,690 --> 00:00:24,210
somehow also get ended up into a

00:00:21,930 --> 00:00:27,390
productive discussion on how to tackle

00:00:24,210 --> 00:00:29,580
this problem basically the idea is what

00:00:27,390 --> 00:00:32,399
what Scott sent to the mailing list was

00:00:29,580 --> 00:00:35,719
basically just a very simple patch set

00:00:32,399 --> 00:00:39,059
which hooks into some some IP route

00:00:35,719 --> 00:00:41,219
addition at until it functions and tries

00:00:39,059 --> 00:00:44,129
to propagate those down to the hardware

00:00:41,219 --> 00:00:47,879
where they can just beam start into yeah

00:00:44,129 --> 00:00:50,430
as a specific of floating device and the

00:00:47,879 --> 00:00:52,350
idea now is that basically we should try

00:00:50,430 --> 00:00:55,079
to come up with a scheme how to better

00:00:52,350 --> 00:00:56,850
integrate that into the Linux Connor so

00:00:55,079 --> 00:00:58,980
we don't lose the features that we

00:00:56,850 --> 00:01:02,190
currently have and fill you up on the

00:00:58,980 --> 00:01:06,810
atomic blocks we already I used to work

00:01:02,190 --> 00:01:08,760
with and I guess that it's kind of

00:01:06,810 --> 00:01:10,740
reasonable to assume that's a basic

00:01:08,760 --> 00:01:14,729
building block we have as the routing

00:01:10,740 --> 00:01:16,290
table so trying to just create new

00:01:14,729 --> 00:01:19,170
routing table which can be offloaded and

00:01:16,290 --> 00:01:22,740
not offloaded but I would assume that is

00:01:19,170 --> 00:01:25,860
the basic idea behind what we can try to

00:01:22,740 --> 00:01:28,409
do and afterwards just putting those

00:01:25,860 --> 00:01:30,360
tables into a specific chain like we

00:01:28,409 --> 00:01:33,000
have already this IP rural chain where

00:01:30,360 --> 00:01:34,950
we currently have a linear list of

00:01:33,000 --> 00:01:38,130
specific actions which can get matched

00:01:34,950 --> 00:01:40,590
and after they get matched there can be

00:01:38,130 --> 00:01:44,670
a decision to to look into a specific

00:01:40,590 --> 00:01:47,759
route table and what we currently can do

00:01:44,670 --> 00:01:50,310
that we basically already can build to

00:01:47,759 --> 00:01:53,549
verifiers one verify a pair table if we

00:01:50,310 --> 00:01:55,320
if the offloading device has enough

00:01:53,549 --> 00:01:58,680
capabilities to upload one particular

00:01:55,320 --> 00:02:02,820
table if that fails we fail offloading

00:01:58,680 --> 00:02:05,909
the whole table and a verifier for a

00:02:02,820 --> 00:02:07,649
complete namespace the namespace so

00:02:05,909 --> 00:02:09,970
basically the namespace incorporates the

00:02:07,649 --> 00:02:13,280
whole rule set

00:02:09,970 --> 00:02:15,890
and it will walk the rule table or the

00:02:13,280 --> 00:02:18,310
rural settings from the beginning to the

00:02:15,890 --> 00:02:21,580
end and we'll look how far it can

00:02:18,310 --> 00:02:25,700
propagate a specific offloading flag and

00:02:21,580 --> 00:02:27,799
as soon as one table fails to to provide

00:02:25,700 --> 00:02:30,769
the offloading flag we will fail all

00:02:27,799 --> 00:02:36,470
other tables after that specific table

00:02:30,769 --> 00:02:39,110
and there are some small problems so

00:02:36,470 --> 00:02:40,879
basically I would suggest that if you if

00:02:39,110 --> 00:02:43,549
someone wants to offload a specific

00:02:40,879 --> 00:02:46,880
routing table it should be bound to IP

00:02:43,549 --> 00:02:48,260
rule was the interface flag always no

00:02:46,880 --> 00:02:53,090
flag at all and otherwise we should

00:02:48,260 --> 00:02:55,160
already weak and offloaded okay that

00:02:53,090 --> 00:03:00,110
would be kind of my proposal and it's

00:02:55,160 --> 00:03:01,670
open for discussion no it matters such

00:03:00,110 --> 00:03:04,280
as these I would suggest that we start

00:03:01,670 --> 00:03:06,260
simple and become complex later that's

00:03:04,280 --> 00:03:08,660
why I want to handle offloading of

00:03:06,260 --> 00:03:11,860
routes and layer 3 forwarding in the

00:03:08,660 --> 00:03:11,860
most simplistic case where we have

00:03:12,280 --> 00:03:18,230
logically a single routing table we have

00:03:16,489 --> 00:03:19,970
the separate local and main tables right

00:03:18,230 --> 00:03:21,410
now but logically they the way that

00:03:19,970 --> 00:03:23,840
those routes getting is centered there

00:03:21,410 --> 00:03:25,190
it's actually one big tree of routes and

00:03:23,840 --> 00:03:27,230
it's very simple and i would like to

00:03:25,190 --> 00:03:29,359
handle that case first things get really

00:03:27,230 --> 00:03:31,609
complicated with the the rule sets

00:03:29,359 --> 00:03:34,069
because it will set support arbitrary

00:03:31,609 --> 00:03:37,190
prefixing and they have ordering

00:03:34,069 --> 00:03:38,750
constraints and they have various

00:03:37,190 --> 00:03:40,880
actions that they can perform which are

00:03:38,750 --> 00:03:42,410
other than look in the look in the

00:03:40,880 --> 00:03:44,660
routing table associated with this will

00:03:42,410 --> 00:03:47,319
say so it's a really complex problem to

00:03:44,660 --> 00:03:51,290
solve I kind understand your your your

00:03:47,319 --> 00:03:53,060
proposed solution where we we keep the

00:03:51,290 --> 00:03:54,889
hardware offload flag on until we find

00:03:53,060 --> 00:03:57,200
something that we can't do basically is

00:03:54,889 --> 00:04:00,160
what you're saying right so I I'm not

00:03:57,200 --> 00:04:02,480
against that once we get to that point

00:04:00,160 --> 00:04:04,579
but I think we need to have a better

00:04:02,480 --> 00:04:06,590
understanding of what hardware can

00:04:04,579 --> 00:04:08,000
actually do these rule sets first before

00:04:06,590 --> 00:04:09,799
we can kind of have a game plan for

00:04:08,000 --> 00:04:11,510
deciding whether it's going to be able

00:04:09,799 --> 00:04:14,840
to be supporting the hardware at all

00:04:11,510 --> 00:04:17,840
like how it would figure it out do we

00:04:14,840 --> 00:04:19,400
know if hardware can can do this at all

00:04:17,840 --> 00:04:21,709
arbitrary prefixes and sources and

00:04:19,400 --> 00:04:22,260
destination address and TLS values and

00:04:21,709 --> 00:04:23,610
things that isn't

00:04:22,260 --> 00:04:31,350
sure that's something we need to

00:04:23,610 --> 00:04:33,600
investigate first I can speak to some of

00:04:31,350 --> 00:04:36,630
that so existing at least again

00:04:33,600 --> 00:04:39,360
switching type Hardware can do fairly

00:04:36,630 --> 00:04:41,820
minimal things but you can emulate all

00:04:39,360 --> 00:04:44,220
of those with a clever use of default

00:04:41,820 --> 00:04:47,640
route and then getting the CPU to step

00:04:44,220 --> 00:04:51,690
in and an impulse policy and then the

00:04:47,640 --> 00:04:53,040
CPU then yeah so there would be simple

00:04:51,690 --> 00:04:54,330
things we can do and honest and I've

00:04:53,040 --> 00:04:56,640
talked a little bit about trying to

00:04:54,330 --> 00:04:58,110
model some of those things also in the

00:04:56,640 --> 00:05:02,280
context of what we talked about in that

00:04:58,110 --> 00:05:06,030
country ordering and ordering is

00:05:02,280 --> 00:05:07,530
horrible yes yes yes those are actually

00:05:06,030 --> 00:05:08,910
ordering is the one that's hard it's

00:05:07,530 --> 00:05:11,460
hard it's much harder it's the same

00:05:08,910 --> 00:05:13,380
reason why iptables conversions into

00:05:11,460 --> 00:05:15,270
hardware offloads can be complicated as

00:05:13,380 --> 00:05:17,010
well or not representable but if we are

00:05:15,270 --> 00:05:19,200
very restrictive we can just write a

00:05:17,010 --> 00:05:22,620
verify in a few short lines for the rule

00:05:19,200 --> 00:05:24,720
of four the rule ordering stuff because

00:05:22,620 --> 00:05:29,670
we find everything if it's not fitting

00:05:24,720 --> 00:05:31,920
into our model right that is the offload

00:05:29,670 --> 00:05:33,840
model that we just talked about relative

00:05:31,920 --> 00:05:35,460
so if you just do it very simple just

00:05:33,840 --> 00:05:39,030
says that basically just walk the route

00:05:35,460 --> 00:05:43,830
side as soon if they're sensing em than

00:05:39,030 --> 00:05:46,110
EF match or you just fail or you say

00:05:43,830 --> 00:05:49,140
match this to the default route make

00:05:46,110 --> 00:05:52,010
sure it comes to the CPU so no objection

00:05:49,140 --> 00:05:52,010
okay

00:05:53,330 --> 00:06:04,280
thank you very much honest thank you all

00:06:01,909 --> 00:06:06,490
right before more people want to talk

00:06:04,280 --> 00:06:09,949
now we're going to call this over and

00:06:06,490 --> 00:06:11,840
let people go home and I know dave has

00:06:09,949 --> 00:06:14,810
to prepare for his big keynote tomorrow

00:06:11,840 --> 00:06:17,419
and and I know that we've gotten a few

00:06:14,810 --> 00:06:20,960
few good coats already when the good

00:06:17,419 --> 00:06:23,389
news or the bad news the fraud of the

00:06:20,960 --> 00:06:25,039
Frankenstein comment Oh baby switched is

00:06:23,389 --> 00:06:27,349
the Frankenstein in our networking stack

00:06:25,039 --> 00:06:29,360
yeah so half your you know it was

00:06:27,349 --> 00:06:34,009
already accounted Frankenstein ization

00:06:29,360 --> 00:06:36,949
of a networking subsystem and it's

00:06:34,009 --> 00:06:39,680
already captured on etherpad i also want

00:06:36,949 --> 00:06:42,289
to actually make sure that i thank Scott

00:06:39,680 --> 00:06:46,099
for taking all the notes on etherpad and

00:06:42,289 --> 00:06:48,710
Jamal who I mean this I hope has been

00:06:46,099 --> 00:06:51,740
instructive for everybody and this has

00:06:48,710 --> 00:06:53,060
been a tough thing to to put together I

00:06:51,740 --> 00:06:54,560
don't know what he's walking you're

00:06:53,060 --> 00:07:00,500
dangerously walking towards me and I

00:06:54,560 --> 00:07:02,210
might have patricks reaction and no sir

00:07:00,500 --> 00:07:03,529
and thank you i want to do a round of

00:07:02,210 --> 00:07:11,300
applause for Jamal for putting this

00:07:03,529 --> 00:07:12,800
together and getting I think most people

00:07:11,300 --> 00:07:15,229
in the audience know this has been a bit

00:07:12,800 --> 00:07:16,940
of a cat herding exercise and and I

00:07:15,229 --> 00:07:20,270
think Jamal has an alternate profession

00:07:16,940 --> 00:07:23,949
and cat herding ahead of him anyway

00:07:20,270 --> 00:07:23,949

YouTube URL: https://www.youtube.com/watch?v=586k_6fcDeI


