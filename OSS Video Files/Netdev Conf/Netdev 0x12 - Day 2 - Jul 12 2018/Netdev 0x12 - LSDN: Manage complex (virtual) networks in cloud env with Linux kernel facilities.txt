Title: Netdev 0x12 - LSDN: Manage complex (virtual) networks in cloud env with Linux kernel facilities
Publication date: 2018-07-31
Playlist: Netdev 0x12 - Day 2 - Jul 12 2018
Description: 
	In this talk, Vojtech Aschenbrenner presented LSDN, a tool for effortless management of complex (virtual) networks at Netdev 0x12 in Montreal on July 12th, 2018.

Often management of virtual networks has dependencies on complex infrastructure orchestration tooling - encumbered with long running agents like OVS etc. LSDN has no external dependency on
any such tools and leaves no agents running thus not only improving usability but also robustness of the operations.
The tool relies entirely on the functionality provided by the Linux kernel, mainly on the Traffic Control (TC) subsystem with its recent features.

Vojtech described LSDN features and challenges faced in its development (and how various kernel and iproute2 issues were addressed); then delved into how to write applications centred around the offered C-library and backends. Vojtech concluded by talking about the future plans for LSDN.

More info:
https://www.netdevconf.org/0x12/session.html?lsdn-manage-complex-virtual-networks-in-cloud-environment-with-linux-kernel-facilities
Captions: 
	00:00:00,790 --> 00:00:03,899
[Music]

00:00:11,480 --> 00:00:21,630
okay so first of all I would like to do

00:00:15,389 --> 00:00:23,750
some like font check in to small so tell

00:00:21,630 --> 00:00:23,750
me now

00:00:30,610 --> 00:00:39,550
well it's not my like it's not my screen

00:00:33,800 --> 00:00:48,980
right so is it possible to chop it off

00:00:39,550 --> 00:00:51,080
okay so fix it

00:00:48,980 --> 00:00:57,610
to move it up a little it's cutting off

00:00:51,080 --> 00:01:00,739
the text yeah I can I can see it in this

00:00:57,610 --> 00:01:09,170
screen so yeah it's cropped even the

00:01:00,739 --> 00:01:13,130
slides can you guys do something with it

00:01:09,170 --> 00:01:15,910
like move the picture right side

00:01:13,130 --> 00:01:15,910
slightly

00:02:05,490 --> 00:02:15,780
thank you okay so I guess that this is

00:02:12,900 --> 00:02:25,370
readable right with some non-trivial

00:02:15,780 --> 00:02:25,370
effort okay welcome back after lunch so

00:02:26,239 --> 00:02:34,349
I'm here because I would like to present

00:02:28,849 --> 00:02:37,950
our like school project because our

00:02:34,349 --> 00:02:42,110
advisor was from Red Hat so we had to go

00:02:37,950 --> 00:02:44,880
there go here and present it so

00:02:42,110 --> 00:02:46,380
basically I am from Faculty of

00:02:44,880 --> 00:02:47,610
mathematics and physics from Charles

00:02:46,380 --> 00:02:52,140
University from crack in Czech Republic

00:02:47,610 --> 00:02:55,340
I think that next net Def Con will be

00:02:52,140 --> 00:03:01,220
there so we will see each other again

00:02:55,340 --> 00:03:05,069
and I believe that this is going to be

00:03:01,220 --> 00:03:07,830
like the most high level talk here like

00:03:05,069 --> 00:03:12,390
don't be scared it's not about Java or

00:03:07,830 --> 00:03:14,400
stuff like that but what I heard so far

00:03:12,390 --> 00:03:18,060
was pretty low level and pretty

00:03:14,400 --> 00:03:20,850
impressive about like performance and

00:03:18,060 --> 00:03:23,780
stuff like that this is not going to be

00:03:20,850 --> 00:03:26,130
like this this is just about like

00:03:23,780 --> 00:03:31,190
configuration and how to make your life

00:03:26,130 --> 00:03:36,510
easier with like very comfortable

00:03:31,190 --> 00:03:41,519
configuration so what's our project

00:03:36,510 --> 00:03:44,280
about it's basically we try to create

00:03:41,519 --> 00:03:45,989
some tool which already exists actually

00:03:44,280 --> 00:03:50,100
in like open V switch and stuff like

00:03:45,989 --> 00:03:53,160
that which will be able to configure

00:03:50,100 --> 00:03:56,040
your like data center virtual network

00:03:53,160 --> 00:03:58,160
and stuff like that and you know all the

00:03:56,040 --> 00:04:02,700
virtual machines connect them together

00:03:58,160 --> 00:04:06,959
specify all the underlying topologies

00:04:02,700 --> 00:04:10,829
like write VX lions villains genève or

00:04:06,959 --> 00:04:13,519
stuff like that and do it in some

00:04:10,829 --> 00:04:13,519
comfortable way

00:04:13,550 --> 00:04:23,270
and leverage the TC for this so for

00:04:20,180 --> 00:04:28,160
example for most of the people TC is not

00:04:23,270 --> 00:04:31,400
like very easily configurable tool right

00:04:28,160 --> 00:04:34,970
it's like the syntax and everything it's

00:04:31,400 --> 00:04:41,690
slightly cumbersome so we tried to make

00:04:34,970 --> 00:04:44,240
some like nice tool which will be easily

00:04:41,690 --> 00:04:47,840
configurable and we'll leverage the

00:04:44,240 --> 00:04:50,300
abilities in TC and stuff like that so

00:04:47,840 --> 00:04:52,250
we communicate with the colonel wire net

00:04:50,300 --> 00:05:02,020
length and use all the TC stuff

00:04:52,250 --> 00:05:06,520
obviously so ok there is also one like

00:05:02,020 --> 00:05:13,460
one aim was to eliminate some running

00:05:06,520 --> 00:05:17,270
demons from your data center which can

00:05:13,460 --> 00:05:22,730
or can or doesn't need to but it can

00:05:17,270 --> 00:05:24,640
lead to mm not great reliability right

00:05:22,730 --> 00:05:30,290
if you have like long-running demons

00:05:24,640 --> 00:05:33,140
it's gonna fall down and so furthermore

00:05:30,290 --> 00:05:35,570
we fix some like bugs in kernel which

00:05:33,140 --> 00:05:39,520
wasn't the original motivation right but

00:05:35,570 --> 00:05:45,860
we found some bugs in TC and fixed it

00:05:39,520 --> 00:05:50,030
because as we know as far we know like

00:05:45,860 --> 00:05:53,630
this like usage like this of TC was is

00:05:50,030 --> 00:05:58,300
kind of unique or I don't know like how

00:05:53,630 --> 00:06:01,850
many people actually use just TC for

00:05:58,300 --> 00:06:08,470
managing their virtual network in their

00:06:01,850 --> 00:06:14,750
data center so what this tool can do

00:06:08,470 --> 00:06:19,520
well so far we have some like basic

00:06:14,750 --> 00:06:23,430
stuff done so you can define virtual

00:06:19,520 --> 00:06:26,650
networks like switches ports

00:06:23,430 --> 00:06:32,020
type of network overlays like VX lands

00:06:26,650 --> 00:06:34,360
real and genève we obviously be super

00:06:32,020 --> 00:06:38,410
multi-tenancy and everything you

00:06:34,360 --> 00:06:40,090
basically need for like this use case we

00:06:38,410 --> 00:06:44,410
have just dateless firewall because of

00:06:40,090 --> 00:06:46,090
contract and basically didn't have

00:06:44,410 --> 00:06:52,120
enough time to implement all the

00:06:46,090 --> 00:06:54,820
stateful staff we have QoS and traffic

00:06:52,120 --> 00:06:59,680
shaping done it's working pretty pretty

00:06:54,820 --> 00:07:02,110
good and you can well the best thing on

00:06:59,680 --> 00:07:04,660
this project is the configuration that

00:07:02,110 --> 00:07:06,880
you can like use our domain specific

00:07:04,660 --> 00:07:10,360
language for configuration which is

00:07:06,880 --> 00:07:15,430
pretty easy and I will show you how it

00:07:10,360 --> 00:07:19,540
looks like or you can use a C API by our

00:07:15,430 --> 00:07:26,740
C library which is also kind of nice in

00:07:19,540 --> 00:07:30,100
my stand point of view so yeah first of

00:07:26,740 --> 00:07:34,740
all I would like to say that like our

00:07:30,100 --> 00:07:40,510
tool has some inner representation of

00:07:34,740 --> 00:07:44,560
the network so we create and we store

00:07:40,510 --> 00:07:48,420
our own network model which is composed

00:07:44,560 --> 00:07:54,070
from like basic primitives you know from

00:07:48,420 --> 00:07:58,600
virtualization and yeah so basically we

00:07:54,070 --> 00:08:03,340
have we describe virtual networks we

00:07:58,600 --> 00:08:07,140
call it Nets just these like words in

00:08:03,340 --> 00:08:13,270
parenthesis these are like our names for

00:08:07,140 --> 00:08:15,670
like our short end times okay so we have

00:08:13,270 --> 00:08:18,820
some virtual networks these virtual

00:08:15,670 --> 00:08:21,850
networks can be supported or the annual

00:08:18,820 --> 00:08:25,960
underlying technology can be Geneva

00:08:21,850 --> 00:08:29,860
excellent or real and in several forms

00:08:25,960 --> 00:08:34,360
we will see later that what forms

00:08:29,860 --> 00:08:36,430
there are and some V ID which is the ID

00:08:34,360 --> 00:08:38,190
of the network then we have some

00:08:36,430 --> 00:08:44,560
physical machines which are typically

00:08:38,190 --> 00:08:46,720
your hypervisors and usually these are

00:08:44,560 --> 00:08:50,980
represented by some physical network

00:08:46,720 --> 00:08:52,510
interface then you have virtual machines

00:08:50,980 --> 00:08:55,089
which are the machines you would like to

00:08:52,510 --> 00:08:58,000
connect to each other right and they

00:08:55,089 --> 00:09:02,140
live on some physical on some physical

00:08:58,000 --> 00:09:05,050
machines usually it's some type

00:09:02,140 --> 00:09:13,720
interface if you have like container or

00:09:05,050 --> 00:09:16,149
some virtualization everything lives in

00:09:13,720 --> 00:09:19,959
one context it means that the context is

00:09:16,149 --> 00:09:23,560
just the box where basically you can

00:09:19,959 --> 00:09:28,870
have several contexts for different

00:09:23,560 --> 00:09:35,470
scenarios or different customers so this

00:09:28,870 --> 00:09:38,860
is basically the top of the hierarchy if

00:09:35,470 --> 00:09:42,339
you specify the model in allows DNA

00:09:38,860 --> 00:09:44,190
which is name of the tool you can run

00:09:42,339 --> 00:09:49,480
the validation which will basically

00:09:44,190 --> 00:09:53,350
check if everything well everything

00:09:49,480 --> 00:09:55,300
if the networks is supposed to be like

00:09:53,350 --> 00:09:58,930
correct if you don't have some for

00:09:55,300 --> 00:10:01,570
example conflicting MAC addresses or IP

00:09:58,930 --> 00:10:04,930
addresses and stuff like that if for

00:10:01,570 --> 00:10:09,459
example you have well it's variable

00:10:04,930 --> 00:10:12,160
rules this can be checked and then you

00:10:09,459 --> 00:10:18,610
can run comment which will just try to

00:10:12,160 --> 00:10:20,500
apply all the the whole module to the

00:10:18,610 --> 00:10:24,519
kernel so it will just generate some

00:10:20,500 --> 00:10:26,769
like TC rules and apply it most probably

00:10:24,519 --> 00:10:30,130
it will it will work because the

00:10:26,769 --> 00:10:36,010
validation is pretty good but it can

00:10:30,130 --> 00:10:38,920
fail so and if it fails then you can you

00:10:36,010 --> 00:10:40,800
can describe some hooks how to behave in

00:10:38,920 --> 00:10:47,589
the case of failure later

00:10:40,800 --> 00:10:52,779
so now I will show you how to how we

00:10:47,589 --> 00:10:55,529
designed the configuration so as I said

00:10:52,779 --> 00:10:59,440
there are two types of configurations

00:10:55,529 --> 00:11:01,810
capi where you just link your

00:10:59,440 --> 00:11:06,850
application or you create a new one with

00:11:01,810 --> 00:11:12,399
lapel Sdn and use just our API there's

00:11:06,850 --> 00:11:15,339
really just minimal of dependencies just

00:11:12,399 --> 00:11:21,750
lip and I'll for communication ynette

00:11:15,339 --> 00:11:28,089
link and that's it if you want to just

00:11:21,750 --> 00:11:31,180
try or just you know play with your

00:11:28,089 --> 00:11:34,360
network you can use our domain specific

00:11:31,180 --> 00:11:37,240
language and configuration via this

00:11:34,360 --> 00:11:40,420
domain-specific language which is pretty

00:11:37,240 --> 00:11:43,089
powerful and you can easily generally

00:11:40,420 --> 00:11:48,550
generate like a huge configurations for

00:11:43,089 --> 00:11:50,920
really like huge scenarios it obviously

00:11:48,550 --> 00:11:57,910
uses the C API so it's basically just a

00:11:50,920 --> 00:12:04,640
wrapper good so I hope that now it will

00:11:57,910 --> 00:12:11,029
be possible to to read it is it

00:12:04,640 --> 00:12:15,589
okay so this is the simple configuration

00:12:11,029 --> 00:12:19,490
where we have one network on two

00:12:15,589 --> 00:12:24,709
physical machines and on each machine we

00:12:19,490 --> 00:12:32,570
have like two virtual machines and two

00:12:24,709 --> 00:12:36,290
virtual networks so first of all like

00:12:32,570 --> 00:12:38,149
the DSL is based on TCL if you know TCL

00:12:36,290 --> 00:12:40,579
and if you ever created some

00:12:38,149 --> 00:12:45,260
domain-specific language over TCL then

00:12:40,579 --> 00:12:46,910
you know that there are sometimes you

00:12:45,260 --> 00:12:49,279
know sometimes some very low price you

00:12:46,910 --> 00:12:54,230
have to put before because you want to

00:12:49,279 --> 00:12:57,350
do some initialization so yeah so this

00:12:54,230 --> 00:13:00,920
is just boilerplate and the real

00:12:57,350 --> 00:13:03,110
configuration begins here where you just

00:13:00,920 --> 00:13:07,880
say what's your underlying technology so

00:13:03,110 --> 00:13:12,110
here we chose genève for the separation

00:13:07,880 --> 00:13:14,480
of networks here we say how many virtual

00:13:12,110 --> 00:13:20,510
networks we want so we want to well so

00:13:14,480 --> 00:13:23,480
networks and he we describe the physical

00:13:20,510 --> 00:13:29,630
machines so face is physical machine

00:13:23,480 --> 00:13:31,250
which is named a it is represented by

00:13:29,630 --> 00:13:33,620
the interface eth0

00:13:31,250 --> 00:13:37,310
and it has this IP address this is the

00:13:33,620 --> 00:13:40,430
real like IP address of the of the

00:13:37,310 --> 00:13:44,930
physical interface the next line says

00:13:40,430 --> 00:13:48,050
that this physical physical interface is

00:13:44,930 --> 00:13:51,230
attached to both of these virtual

00:13:48,050 --> 00:13:56,209
networks so it basically serves to both

00:13:51,230 --> 00:14:00,070
of the of the virtual customers and the

00:13:56,209 --> 00:14:03,649
next two lines are just specification of

00:14:00,070 --> 00:14:05,390
virtual machines address or containers

00:14:03,649 --> 00:14:08,690
address or whatever or virtual

00:14:05,390 --> 00:14:10,339
interfaces and yeah so you can see that

00:14:08,690 --> 00:14:12,440
name of these interfaces are type zero

00:14:10,339 --> 00:14:15,780
and type one with those MAC addresses

00:14:12,440 --> 00:14:20,950
and weird one

00:14:15,780 --> 00:14:25,600
is part of network 1 and 12 2 is part of

00:14:20,950 --> 00:14:29,710
network - so that's it basically you are

00:14:25,600 --> 00:14:32,920
done with configuration of one like

00:14:29,710 --> 00:14:39,850
physical machine where two virtual

00:14:32,920 --> 00:14:42,340
machines lips and similarly to the

00:14:39,850 --> 00:14:46,810
second physical machine you specify

00:14:42,340 --> 00:14:50,560
again its IP address and two virtual

00:14:46,810 --> 00:14:55,180
machines which are part of that one and

00:14:50,560 --> 00:14:58,000
nurse - so basically that's it the end

00:14:55,180 --> 00:15:02,350
is just again claiming local is our

00:14:58,000 --> 00:15:06,940
command for just saying that what

00:15:02,350 --> 00:15:09,100
machines you are so basically you will

00:15:06,940 --> 00:15:11,860
around this script on every physical

00:15:09,100 --> 00:15:15,370
machine which is part of this

00:15:11,860 --> 00:15:18,190
configuration so everywhere you will run

00:15:15,370 --> 00:15:20,710
same local and as a parameter we will

00:15:18,190 --> 00:15:22,600
give it name of the physical machine so

00:15:20,710 --> 00:15:25,600
for example if I am on the physical

00:15:22,600 --> 00:15:29,020
machine a I will run time local a if I

00:15:25,600 --> 00:15:31,150
am on B I will run claim local B and run

00:15:29,020 --> 00:15:35,440
comment so that's it basically

00:15:31,150 --> 00:15:39,850
like this you generated all the TC rules

00:15:35,440 --> 00:15:49,920
needed for virtual networking with this

00:15:39,850 --> 00:15:53,550
specification so it was the DSL

00:15:49,920 --> 00:16:00,910
configuration and as I said we have also

00:15:53,550 --> 00:16:03,760
see API so this is trivial C program

00:16:00,910 --> 00:16:08,500
which will do basically the same thing

00:16:03,760 --> 00:16:12,190
as a previous configuration file but in

00:16:08,500 --> 00:16:17,680
a see just with our API by our library

00:16:12,190 --> 00:16:19,600
so as you can see that it's pretty

00:16:17,680 --> 00:16:24,490
straightforward you will just create

00:16:19,600 --> 00:16:26,940
some context and then the configuration

00:16:24,490 --> 00:16:30,279
basically copy is the

00:16:26,940 --> 00:16:36,340
configuration of the of the previous one

00:16:30,279 --> 00:16:42,520
so settings you set genève with some

00:16:36,340 --> 00:16:46,330
genève port and then you create physical

00:16:42,520 --> 00:16:52,540
machines machine one with LSD NF is new

00:16:46,330 --> 00:16:55,120
and machine to you will provide the

00:16:52,540 --> 00:16:59,610
configuration of the physical machines

00:16:55,120 --> 00:17:02,020
so you will hear specify the IP address

00:16:59,610 --> 00:17:03,700
physical interface and name of the

00:17:02,020 --> 00:17:07,900
machine the same for the physical

00:17:03,700 --> 00:17:12,310
machine B here we create network virtual

00:17:07,900 --> 00:17:14,970
network we attach machine student

00:17:12,310 --> 00:17:17,829
network the same for network to

00:17:14,970 --> 00:17:22,620
attaching that work to to both machines

00:17:17,829 --> 00:17:22,620
and here creating for virtual machines

00:17:23,880 --> 00:17:27,180
depending on

00:17:28,540 --> 00:17:34,480
yeah so here we just we are just

00:17:31,450 --> 00:17:42,250
creating virtual machines 1 2 3 4

00:17:34,480 --> 00:17:47,680
wait MAC addresses and enter names yeah

00:17:42,250 --> 00:17:51,060
and here again claiming local which I

00:17:47,680 --> 00:17:53,380
described before yeah and we are done

00:17:51,060 --> 00:18:00,640
basically this is everything you need to

00:17:53,380 --> 00:18:03,760
do for generating all the TC rules for

00:18:00,640 --> 00:18:07,330
this network yeah

00:18:03,760 --> 00:18:11,620
so if you compile it and run it you will

00:18:07,330 --> 00:18:16,140
see that we will see now that it

00:18:11,620 --> 00:18:16,140
actually works so

00:18:19,160 --> 00:18:28,600
now I will show you real example maybe I

00:18:24,890 --> 00:18:28,600
hope that it will work goes

00:18:32,890 --> 00:18:37,900
so as you can see we have

00:18:41,179 --> 00:18:48,369
we have pretty we have pretty nice like

00:18:44,929 --> 00:18:52,940
testing system very like puts together

00:18:48,369 --> 00:18:56,599
different parts of like tests and create

00:18:52,940 --> 00:19:00,349
some configuration of the real virtual

00:18:56,599 --> 00:19:05,299
network so for example here I will

00:19:00,349 --> 00:19:08,690
execute test which we'll use we

00:19:05,299 --> 00:19:14,389
excellence for as underlying technology

00:19:08,690 --> 00:19:18,440
for for the simple example basic means

00:19:14,389 --> 00:19:19,820
that we will use just like free virtual

00:19:18,440 --> 00:19:22,070
machines or for virtual machines and

00:19:19,820 --> 00:19:27,369
pink is that we will validate the

00:19:22,070 --> 00:19:27,369
functionality where pink so if I run it

00:19:31,080 --> 00:19:34,039
okay it will

00:19:41,650 --> 00:19:44,650
okay

00:20:01,580 --> 00:20:04,750
here we go

00:20:08,360 --> 00:20:25,940
so this test created three physical

00:20:15,140 --> 00:20:27,740
machines ABC two networks and and the

00:20:25,940 --> 00:20:29,809
configuration of virtual machines is as

00:20:27,740 --> 00:20:33,470
follows I will show you the file because

00:20:29,809 --> 00:20:36,309
I think it's yeah the configuration

00:20:33,470 --> 00:20:40,880
looks like this so we have like three

00:20:36,309 --> 00:20:43,159
three physical machines and virtual

00:20:40,880 --> 00:20:50,389
machine is configured like this yeah if

00:20:43,159 --> 00:20:58,100
a1 a2 a3 b1 b2 c1 and c2 which are

00:20:50,389 --> 00:21:04,399
connected now to do two to the 2g

00:20:58,100 --> 00:21:08,929
networks like this this one this one and

00:21:04,399 --> 00:21:10,850
this one are connected together and you

00:21:08,929 --> 00:21:14,260
can see that these are together and this

00:21:10,850 --> 00:21:14,260
one is separate

00:21:16,460 --> 00:21:23,869
so if I go back you will see that the

00:21:20,299 --> 00:21:27,259
validation we're paying worked for four

00:21:23,869 --> 00:21:30,019
virtual machines which were actually in

00:21:27,259 --> 00:21:36,139
the same network so basically it says

00:21:30,019 --> 00:21:38,779
that multi-tenancy works so we are

00:21:36,139 --> 00:21:42,379
pinging from machine 1 to machine 2

00:21:38,779 --> 00:21:45,740
which are in the same network here the

00:21:42,379 --> 00:21:48,980
same information for but if we ping from

00:21:45,740 --> 00:21:51,460
machine 1 to machine free its

00:21:48,980 --> 00:21:54,379
unreachable the same formation 5 because

00:21:51,460 --> 00:21:56,330
these are not in the same network so

00:21:54,379 --> 00:22:03,340
multi-tenancy works and like everything

00:21:56,330 --> 00:22:03,340
is configured as you as you think so

00:22:03,580 --> 00:22:15,700
now I will show you TC rules which were

00:22:08,480 --> 00:22:20,450
generated with this configuration so

00:22:15,700 --> 00:22:24,350
first of all like these tests works or

00:22:20,450 --> 00:22:27,559
uses containers and namespaces so it's

00:22:24,350 --> 00:22:29,990
not need is it doesn't need to like

00:22:27,559 --> 00:22:31,789
create a bunch of virtual machines and

00:22:29,990 --> 00:22:36,470
stuff like that so we use just

00:22:31,789 --> 00:22:43,720
containers so you have several

00:22:36,470 --> 00:22:43,720
net namespaces here ABC namespaces our

00:22:43,929 --> 00:22:49,039
simulation of like physical machines so

00:22:46,639 --> 00:22:54,499
ABC are three different physical

00:22:49,039 --> 00:22:58,070
machines and a 1 a 2 a 3 B 1 B 2 and C 1

00:22:54,499 --> 00:23:02,720
C 2 are very so interfaces representing

00:22:58,070 --> 00:23:06,830
the virtual machines so I will take a

00:23:02,720 --> 00:23:13,210
look at one physical machine in detail

00:23:06,830 --> 00:23:13,210
so I will pick the LSD and a machine so

00:23:15,040 --> 00:23:24,380
so I will execute in a less DNA in

00:23:18,620 --> 00:23:29,680
namespace this command which will show

00:23:24,380 --> 00:23:37,300
me rules for virtual machine number one

00:23:29,680 --> 00:23:37,300
which lives in LSD n a physical machine

00:23:39,160 --> 00:23:49,760
so basically this is for the traffic

00:23:45,530 --> 00:23:55,490
which goes from virtual machine 1 and it

00:23:49,760 --> 00:23:58,450
won't it can communicate with with

00:23:55,490 --> 00:24:01,640
machines on the same network right so

00:23:58,450 --> 00:24:04,160
here we create we generated some TC

00:24:01,640 --> 00:24:07,340
networks which will handle which will

00:24:04,160 --> 00:24:13,850
handle weight multicast so you know that

00:24:07,340 --> 00:24:18,490
with 0 1 multicast begin and we used go

00:24:13,850 --> 00:24:23,720
to change here because the logic is not

00:24:18,490 --> 00:24:28,580
so simple so if it's multicast it jumps

00:24:23,720 --> 00:24:35,060
to chain 1 which is here and it will

00:24:28,580 --> 00:24:42,400
just mirror-like and redirect the packet

00:24:35,060 --> 00:24:45,110
to 2 device - which is which is the

00:24:42,400 --> 00:24:48,020
second virtual machine on the same

00:24:45,110 --> 00:24:51,100
physical host from the same network so

00:24:48,020 --> 00:24:59,150
the packet has to be go has to go there

00:24:51,100 --> 00:25:00,650
next it will send the packet to the

00:24:59,150 --> 00:25:02,120
virtual machine which is in the same

00:25:00,650 --> 00:25:08,180
network but on different physical

00:25:02,120 --> 00:25:16,660
machine so it will use the underlying VX

00:25:08,180 --> 00:25:20,810
LAN technology so it will it will put

00:25:16,660 --> 00:25:24,590
metadata in and send it to interface 5

00:25:20,810 --> 00:25:27,380
which is our like which is we X LAN

00:25:24,590 --> 00:25:31,520
interface which will handle the

00:25:27,380 --> 00:25:35,780
traffic to the next physical machine and

00:25:31,520 --> 00:25:37,100
the same for for the for another

00:25:35,780 --> 00:25:40,160
physical machine because we have like

00:25:37,100 --> 00:25:43,160
three three physical machines there so

00:25:40,160 --> 00:25:47,780
this is these are the rules for one

00:25:43,160 --> 00:25:52,640
wheeler so machine and now let's take a

00:25:47,780 --> 00:25:58,820
look what are the rules for LSD and if

00:25:52,640 --> 00:26:02,090
alpha is 5 which which actually handles

00:25:58,820 --> 00:26:07,430
the traffic which goes in the opposite

00:26:02,090 --> 00:26:13,220
way and a sequence see the interesting

00:26:07,430 --> 00:26:20,960
part is here that it checks the ID of

00:26:13,220 --> 00:26:25,250
the PX LAN and it redirects to the

00:26:20,960 --> 00:26:29,930
interface which is responsible for rely

00:26:25,250 --> 00:26:32,570
for like moving the packet further to

00:26:29,930 --> 00:26:36,980
the corresponding machine so for real

00:26:32,570 --> 00:26:40,250
and 2 for the virtual machine sorry for

00:26:36,980 --> 00:26:45,050
the virtual network wait wheel and ID 2

00:26:40,250 --> 00:26:50,570
it moves to enterprise 6 and if you are

00:26:45,050 --> 00:26:53,290
on the network 1 it goes to the 7 yeah

00:26:50,570 --> 00:27:02,120
and again this is for this is for

00:26:53,290 --> 00:27:07,010
multicast so in this manner we basically

00:27:02,120 --> 00:27:09,590
are able to create the whole like

00:27:07,010 --> 00:27:13,970
working topology for diversion at

00:27:09,590 --> 00:27:17,000
working and just with TC with nothing

00:27:13,970 --> 00:27:21,890
else just with TC loose we obviously

00:27:17,000 --> 00:27:24,080
used a flower classifier which because

00:27:21,890 --> 00:27:27,910
like it's powerful and it's actually

00:27:24,080 --> 00:27:32,570
usable unless unlike you 32 which is

00:27:27,910 --> 00:27:35,690
also like powerful but use it for like

00:27:32,570 --> 00:27:37,050
more complex matching is kind of

00:27:35,690 --> 00:27:47,820
difficult

00:27:37,050 --> 00:28:00,870
yeah so that's it maybe I will conclude

00:27:47,820 --> 00:28:03,060
this example wait showing showing number

00:28:00,870 --> 00:28:06,450
showing different type of interfaces

00:28:03,060 --> 00:28:08,970
which we generate for this one

00:28:06,450 --> 00:28:11,400
particular example if we have we X LAN

00:28:08,970 --> 00:28:14,880
with static configuration which means

00:28:11,400 --> 00:28:16,350
that we don't use FDB from VX lon we

00:28:14,880 --> 00:28:20,600
just manage everything on our own we

00:28:16,350 --> 00:28:24,240
have like all the MAC addresses we know

00:28:20,600 --> 00:28:27,360
what packet or what machine lives where

00:28:24,240 --> 00:28:32,250
so we can handle everything just with

00:28:27,360 --> 00:28:36,960
our like down with our TC rules which

00:28:32,250 --> 00:28:41,210
are changed to the to the some to some

00:28:36,960 --> 00:28:46,440
dummy interface so as you can see that

00:28:41,210 --> 00:28:52,230
we have in one physical machine we have

00:28:46,440 --> 00:28:53,820
two damn interfaces which basically the

00:28:52,230 --> 00:28:55,860
number of them damn interfaces is the

00:28:53,820 --> 00:28:58,730
same as the number of virtual machines

00:28:55,860 --> 00:29:05,040
living on that physical machine because

00:28:58,730 --> 00:29:08,990
we need to we need to somehow like use

00:29:05,040 --> 00:29:12,140
the filter hand action rules and there

00:29:08,990 --> 00:29:16,200
is also what we explained interface

00:29:12,140 --> 00:29:18,060
which just which is like one we

00:29:16,200 --> 00:29:21,390
explained interface pair physical

00:29:18,060 --> 00:29:25,320
machine and it obviously works like that

00:29:21,390 --> 00:29:29,940
it sends traffic to the other physical

00:29:25,320 --> 00:29:31,950
machines yeah so that's it for example

00:29:29,940 --> 00:29:36,150
the next thing I would like to show you

00:29:31,950 --> 00:29:40,500
is our like github page it's if you

00:29:36,150 --> 00:29:43,910
google github LSD n you can find like

00:29:40,500 --> 00:29:43,910
our github page which

00:29:44,499 --> 00:29:53,199
is I think pretty active now because

00:29:49,539 --> 00:29:55,269
like the interesting part is here in the

00:29:53,199 --> 00:29:58,479
net model there are all the source goals

00:29:55,269 --> 00:30:03,159
and stuff like that so you can take a

00:29:58,479 --> 00:30:08,440
look and same patches or anything you

00:30:03,159 --> 00:30:13,059
want there is a lot of lot of things to

00:30:08,440 --> 00:30:14,769
do now because like the functionality a

00:30:13,059 --> 00:30:18,879
lot of functionality is missing

00:30:14,769 --> 00:30:22,479
for example stateful firewall or like

00:30:18,879 --> 00:30:25,779
migrations without demon what I didn't

00:30:22,479 --> 00:30:28,509
say is that we actually have some like

00:30:25,779 --> 00:30:32,499
experimental implementation of daemon

00:30:28,509 --> 00:30:36,039
but we think that it's actually it's

00:30:32,499 --> 00:30:39,839
actually needed only for if you want to

00:30:36,039 --> 00:30:45,190
life migrate your virtual machines and

00:30:39,839 --> 00:30:48,489
like the further steps will be to

00:30:45,190 --> 00:30:50,589
eliminate it and try to use some kernel

00:30:48,489 --> 00:30:54,809
facilities even for storing some more

00:30:50,589 --> 00:30:58,119
metadata needed for the actual migration

00:30:54,809 --> 00:31:00,489
yeah we have like packages for Arch

00:30:58,119 --> 00:31:02,559
Linux rpm and the base distribution so

00:31:00,489 --> 00:31:04,989
it's pretty easy to install it actually

00:31:02,559 --> 00:31:08,709
so you can try it right now it's called

00:31:04,989 --> 00:31:12,219
LSD n so just install the package and

00:31:08,709 --> 00:31:16,629
use the domain-specific language or the

00:31:12,219 --> 00:31:21,549
C API I showed you and you can feel how

00:31:16,629 --> 00:31:25,119
it works yeah so it looks like it works

00:31:21,549 --> 00:31:27,669
well we fixed some patches even in linux

00:31:25,119 --> 00:31:36,119
kernel we found during the project and

00:31:27,669 --> 00:31:36,119
IP route 2 so yeah any questions

00:31:37,169 --> 00:31:40,169
questions

00:31:47,060 --> 00:31:52,440
so in your example here you're using

00:31:49,230 --> 00:31:54,450
just nothing to represent the virtual

00:31:52,440 --> 00:31:57,030
machines but you did do this for real

00:31:54,450 --> 00:32:00,330
with real hosts and real VMs is that

00:31:57,030 --> 00:32:02,490
right safety pin please

00:32:00,330 --> 00:32:05,480
so you've run this system with actual

00:32:02,490 --> 00:32:08,370
machines and actual virtual machines

00:32:05,480 --> 00:32:10,920
like this example I showed no not the

00:32:08,370 --> 00:32:13,880
example that for real or is it only do

00:32:10,920 --> 00:32:17,730
this kind of example level no no it

00:32:13,880 --> 00:32:19,310
actually works in light ok so the real

00:32:17,730 --> 00:32:21,050
virtual machines yeah have you

00:32:19,310 --> 00:32:23,130
integrated any of this with

00:32:21,050 --> 00:32:26,730
orchestration systems or something like

00:32:23,130 --> 00:32:28,680
no it's not yet note it but that's the

00:32:26,730 --> 00:32:31,770
next logical step yeah ok thank you

00:32:28,680 --> 00:32:35,880
thank you you're integrating in lib but

00:32:31,770 --> 00:32:36,830
right now yes you sleep at libvirt is

00:32:35,880 --> 00:32:39,840
that what you're using

00:32:36,830 --> 00:32:42,120
yeah we try to integrate with with

00:32:39,840 --> 00:32:44,640
libvirt but there are some problems with

00:32:42,120 --> 00:32:46,380
hooks so we gave up because we didn't

00:32:44,640 --> 00:32:47,460
have time we have like some more

00:32:46,380 --> 00:32:54,000
important stuff to do

00:32:47,460 --> 00:32:56,940
but we can go back to it and yeah ok I

00:32:54,000 --> 00:33:00,140
see that you ran out on a single server

00:32:56,940 --> 00:33:02,520
is it also working on multiple servers

00:33:00,140 --> 00:33:04,770
yeah this is what I said that we had

00:33:02,520 --> 00:33:06,690
like we had like free in that example we

00:33:04,770 --> 00:33:09,420
simulated basically two free physical

00:33:06,690 --> 00:33:11,280
machines free physical servers so yes so

00:33:09,420 --> 00:33:15,960
the scenario is that you will create

00:33:11,280 --> 00:33:18,150
this like configuration file sshh to all

00:33:15,960 --> 00:33:22,260
of these free servers and just run it

00:33:18,150 --> 00:33:24,300
there ok and if you are running in a

00:33:22,260 --> 00:33:27,060
real server can I use a server via

00:33:24,300 --> 00:33:30,810
virtual function for instead of what

00:33:27,060 --> 00:33:34,260
function virtual functions there will be

00:33:30,810 --> 00:33:36,570
any device for so what do you mean by

00:33:34,260 --> 00:33:41,250
there two functions okay so you can use

00:33:36,570 --> 00:33:44,040
instead of n virtual interfaces okay a

00:33:41,250 --> 00:33:45,660
physic a virtual interface is very V

00:33:44,040 --> 00:33:48,090
interface okay okay

00:33:45,660 --> 00:33:50,670
today the SR IV interface already also

00:33:48,090 --> 00:33:53,760
support T see you see in all your pages

00:33:50,670 --> 00:33:55,680
all the things that's how burn not the

00:33:53,760 --> 00:33:59,730
hundreds of hardware is not offloaded or

00:33:55,680 --> 00:34:00,210
something so if you will use our IV

00:33:59,730 --> 00:34:02,760
interface

00:34:00,210 --> 00:34:06,150
so everything you can use to configure

00:34:02,760 --> 00:34:09,360
the forwarding of SR iov also because

00:34:06,150 --> 00:34:11,250
they also using the same TC command to

00:34:09,360 --> 00:34:13,620
configure their service that's today

00:34:11,250 --> 00:34:17,070
when you using obvious offload we are

00:34:13,620 --> 00:34:19,140
also doing it through TC so ok so if it

00:34:17,070 --> 00:34:21,360
suffers these TC commands then it will

00:34:19,140 --> 00:34:27,330
work yes you just need to have not to

00:34:21,360 --> 00:34:29,940
create virtual interfaces what is that

00:34:27,330 --> 00:34:33,210
at the end the vm themselves what

00:34:29,940 --> 00:34:36,990
they're getting getting a v th or yeah

00:34:33,210 --> 00:34:38,910
there's there is ve th pair okay so be

00:34:36,990 --> 00:34:41,400
in there like in this example but you

00:34:38,910 --> 00:34:45,330
can have there anything you want so ok

00:34:41,400 --> 00:34:49,080
so if we will will change the Vth to be

00:34:45,330 --> 00:34:50,550
a virtual function ok and you will have

00:34:49,080 --> 00:34:53,490
the other part of it which is the

00:34:50,550 --> 00:34:57,780
virtual function representer so it's

00:34:53,490 --> 00:34:59,640
supposed to work also yeah like yeah

00:34:57,780 --> 00:35:01,500
sure but this is not like part of the

00:34:59,640 --> 00:35:02,850
project right you can pick any interface

00:35:01,500 --> 00:35:03,450
you want it was just part of the

00:35:02,850 --> 00:35:06,600
presentation

00:35:03,450 --> 00:35:09,900
ok I think it whether he uses vmz he

00:35:06,600 --> 00:35:12,180
uses hello yeah he uses VMs it looks

00:35:09,900 --> 00:35:15,150
like right you're using VMs yeah no

00:35:12,180 --> 00:35:18,240
containers well here I have containers

00:35:15,150 --> 00:35:19,800
oh but you can use even VMs it doesn't

00:35:18,240 --> 00:35:22,110
matter okay

00:35:19,800 --> 00:35:23,880
right I'm just going to cut this you can

00:35:22,110 --> 00:35:30,430
come and talk to him next speaker can go

00:35:23,880 --> 00:35:32,380
up penalty box okay for 5 minutes Thanks

00:35:30,430 --> 00:35:35,459
[Music]

00:35:32,380 --> 00:35:35,459

YouTube URL: https://www.youtube.com/watch?v=FcUNp1IjV10


