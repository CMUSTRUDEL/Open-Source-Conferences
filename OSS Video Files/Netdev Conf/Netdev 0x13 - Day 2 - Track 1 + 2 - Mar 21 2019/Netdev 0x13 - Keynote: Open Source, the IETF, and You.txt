Title: Netdev 0x13 - Keynote: Open Source, the IETF, and You
Publication date: 2019-05-03
Playlist: Netdev 0x13 - Day 2 - Track 1 + 2 - Mar 21 2019
Description: 
	Alissa Cooper, Internet Engineering Task Force(IETF) chair and keynote speaker at
Netdev conf 0x13, talks about the relationship between Open Source and the IETF.

Once you have a decent open source implementation, should you really care about standardization? Are open source and open standards mutually exclusive?
She believes that they are mutually supportive and that the Linux developer community
and the IETF community should work more closely together.

https://www.netdevconf.org/0x13/session.html?keynote-cooper
Captions: 
	00:00:00,650 --> 00:00:02,610
[Music]

00:00:00,930 --> 00:00:04,589
so I have been granted the honor to

00:00:02,610 --> 00:00:08,069
introduce our keynote speaker fournette

00:00:04,589 --> 00:00:10,650
dev before that I have a question how

00:00:08,069 --> 00:00:15,480
many people have heard of IETF raise

00:00:10,650 --> 00:00:19,320
your hand how many people have actually

00:00:15,480 --> 00:00:24,480
been to an IETF meeting okay that that's

00:00:19,320 --> 00:00:26,609
actually pretty good so so we're every

00:00:24,480 --> 00:00:29,519
net to have we sit down and we actually

00:00:26,609 --> 00:00:32,009
choose the speaker kind of an

00:00:29,519 --> 00:00:35,640
interesting process and this time around

00:00:32,009 --> 00:00:38,510
we have a kind of interesting choice in

00:00:35,640 --> 00:00:42,660
that we're actually going to go into

00:00:38,510 --> 00:00:45,690
IETF kind of interaction with open

00:00:42,660 --> 00:00:47,610
source this is important and it's

00:00:45,690 --> 00:00:49,170
important because IETF is the standards

00:00:47,610 --> 00:00:52,440
body of the intranet in to a large

00:00:49,170 --> 00:00:53,670
extent it's like implementers and Linux

00:00:52,440 --> 00:00:56,489
and other OS as they're actually

00:00:53,670 --> 00:00:59,760
implementing the protocols so these two

00:00:56,489 --> 00:01:01,140
kind of have to somehow match so our

00:00:59,760 --> 00:01:06,450
guest speaker today is actually the

00:01:01,140 --> 00:01:09,240
chair of IETF a fellow at Cisco I

00:01:06,450 --> 00:01:11,800
believe and so I'd like to introduce a

00:01:09,240 --> 00:01:18,739
list of the Cooper

00:01:11,800 --> 00:01:18,739
[Applause]

00:01:22,840 --> 00:01:29,929
so thank you Tom for that introduction

00:01:25,939 --> 00:01:32,689
and huge thanks to Jamal and the other

00:01:29,929 --> 00:01:35,439
organizers first of all for co-locating

00:01:32,689 --> 00:01:38,240
with the IETF we're really happy to have

00:01:35,439 --> 00:01:41,659
that happen twice in less than one year

00:01:38,240 --> 00:01:43,909
and to see the interactions between the

00:01:41,659 --> 00:01:45,890
two communities hopefully we'll see more

00:01:43,909 --> 00:01:50,209
of that in particular after I give this

00:01:45,890 --> 00:01:53,539
talk today I am NOT a Linux kernel

00:01:50,209 --> 00:01:56,599
developer I don't even really write

00:01:53,539 --> 00:01:59,599
standards anymore but I do spend a lot

00:01:56,599 --> 00:02:01,640
of time trying to make it so that people

00:01:59,599 --> 00:02:04,009
who want to collaborate in order to make

00:02:01,640 --> 00:02:07,099
the internet work better can do that and

00:02:04,009 --> 00:02:08,840
can do it more efficiently and can have

00:02:07,099 --> 00:02:11,329
more success in those kinds of

00:02:08,840 --> 00:02:13,610
interactions so that's really what I

00:02:11,329 --> 00:02:18,019
want to talk to you about today open

00:02:13,610 --> 00:02:20,630
source the IETF and you for people who

00:02:18,019 --> 00:02:23,359
are not terribly familiar with the IETF

00:02:20,630 --> 00:02:24,650
which it sounds like some some fraction

00:02:23,359 --> 00:02:27,319
of the room

00:02:24,650 --> 00:02:30,400
the IETF produces standards based on an

00:02:27,319 --> 00:02:33,380
open process so anybody can participate

00:02:30,400 --> 00:02:36,109
all the participation is on an

00:02:33,380 --> 00:02:37,970
individual basis so there's you know

00:02:36,109 --> 00:02:39,889
people's employers support them but

00:02:37,970 --> 00:02:42,260
there's no company representation

00:02:39,889 --> 00:02:44,389
there's no membership and the decisions

00:02:42,260 --> 00:02:47,600
are made on the basis of broad-based

00:02:44,389 --> 00:02:49,880
consensus so we don't come to the end

00:02:47,600 --> 00:02:52,010
and say this protocol should be designed

00:02:49,880 --> 00:02:54,049
this way we're going to take a vote we

00:02:52,010 --> 00:02:55,670
try to get a sense of the room to figure

00:02:54,049 --> 00:02:56,959
out if everybody who's been involved

00:02:55,670 --> 00:02:59,510
really thinks this is the right design

00:02:56,959 --> 00:03:02,359
if the objections that have been raised

00:02:59,510 --> 00:03:07,400
have at least been debated even if they

00:03:02,359 --> 00:03:08,720
haven't been addressed and that's kind

00:03:07,400 --> 00:03:10,910
of the flavor that we like to work in

00:03:08,720 --> 00:03:13,220
and we think it we think it produces the

00:03:10,910 --> 00:03:14,780
the best outcomes and we really try to

00:03:13,220 --> 00:03:17,239
focus around technical merit and

00:03:14,780 --> 00:03:19,849
technical excellence so we don't let the

00:03:17,239 --> 00:03:22,370
business drivers be the determining

00:03:19,849 --> 00:03:24,739
factor we try to think about what's

00:03:22,370 --> 00:03:27,590
going to work the best at internet scale

00:03:24,739 --> 00:03:29,870
and make our determinations that way

00:03:27,590 --> 00:03:32,360
the standards that we produce are

00:03:29,870 --> 00:03:35,599
documented in RFC s you've probably read

00:03:32,360 --> 00:03:37,760
some of these and I think nobody would

00:03:35,599 --> 00:03:40,459
ever really look at an IETF RFC and say

00:03:37,760 --> 00:03:42,650
well we have this great spec why would

00:03:40,459 --> 00:03:44,690
we need an implementation that's not

00:03:42,650 --> 00:03:46,370
something that people say but something

00:03:44,690 --> 00:03:48,470
that people do say is we have a great

00:03:46,370 --> 00:03:50,330
implementation of something what do we

00:03:48,470 --> 00:03:52,880
need a spec for what do we need

00:03:50,330 --> 00:03:56,180
standards for and I think people who

00:03:52,880 --> 00:03:58,310
asked that question might be on the path

00:03:56,180 --> 00:03:59,799
to trying to convince you that open

00:03:58,310 --> 00:04:03,430
source and open standards are

00:03:59,799 --> 00:04:05,930
adversaries and they would be wrong on

00:04:03,430 --> 00:04:08,090
the Internet today we have a lot of

00:04:05,930 --> 00:04:10,569
different models for how open source and

00:04:08,090 --> 00:04:12,709
open standards are working together

00:04:10,569 --> 00:04:14,690
coexisting and being developed together

00:04:12,709 --> 00:04:16,549
so sometimes you do get an

00:04:14,690 --> 00:04:18,440
implementation first and then later

00:04:16,549 --> 00:04:20,479
people come and try to contribute that

00:04:18,440 --> 00:04:22,100
idea to the IETF or to another standards

00:04:20,479 --> 00:04:24,200
organization and you end up

00:04:22,100 --> 00:04:25,660
standardizing a very similar design to

00:04:24,200 --> 00:04:27,320
what was originally implemented

00:04:25,660 --> 00:04:28,850
sometimes it goes the other way around

00:04:27,320 --> 00:04:31,810
sometimes we develop a standard first

00:04:28,850 --> 00:04:34,340
and the implementations come later

00:04:31,810 --> 00:04:36,979
sometimes and I think increasingly what

00:04:34,340 --> 00:04:38,870
we're seeing is a sort of parallel code

00:04:36,979 --> 00:04:41,780
development of standards and

00:04:38,870 --> 00:04:43,400
implementations at the same time among

00:04:41,780 --> 00:04:46,789
the same people who are working on both

00:04:43,400 --> 00:04:48,620
I don't think there's any single model

00:04:46,789 --> 00:04:50,360
of this that's really the right model it

00:04:48,620 --> 00:04:51,770
really depends on what is the specific

00:04:50,360 --> 00:04:53,240
piece of technology that we're talking

00:04:51,770 --> 00:04:55,580
about which part of the stack are we in

00:04:53,240 --> 00:04:57,139
what are we trying to achieve there's

00:04:55,580 --> 00:04:58,880
not really like a one-size-fits-all that

00:04:57,139 --> 00:05:00,710
can tell you oh yeah it's it's

00:04:58,880 --> 00:05:04,160
open-source forever and no standards or

00:05:00,710 --> 00:05:05,810
vice versa today what I'm going to do is

00:05:04,160 --> 00:05:07,520
walk through two different examples of

00:05:05,810 --> 00:05:09,850
that of that last kind of model that I

00:05:07,520 --> 00:05:13,760
talked about the parallel development of

00:05:09,850 --> 00:05:17,060
standards and implementations because I

00:05:13,760 --> 00:05:18,560
think it's a interesting moment in the

00:05:17,060 --> 00:05:20,510
evolution of how we work with in the

00:05:18,560 --> 00:05:22,300
IETF that shows really the value of

00:05:20,510 --> 00:05:24,889
implementations and the value of this

00:05:22,300 --> 00:05:28,400
cross-pollination so the first example

00:05:24,889 --> 00:05:30,979
is going to be TLS 1.3 which was

00:05:28,400 --> 00:05:34,370
finalized last year and the second

00:05:30,979 --> 00:05:37,099
example is quic which is currently still

00:05:34,370 --> 00:05:38,479
under development I'm also going to use

00:05:37,099 --> 00:05:42,099
these two examples to talk a little bit

00:05:38,479 --> 00:05:42,099
about protocol ossification

00:05:42,210 --> 00:05:46,110
maybe a favorite topic among some of you

00:05:44,070 --> 00:05:49,139
certainly a very common topic in the

00:05:46,110 --> 00:05:50,910
IETF and the networking industry and

00:05:49,139 --> 00:05:52,320
then at the end I'm going to explain a

00:05:50,910 --> 00:05:54,180
little bit about how you can get more

00:05:52,320 --> 00:05:57,060
involved in the IETF what some of the

00:05:54,180 --> 00:06:00,060
opportunities are for collaboration and

00:05:57,060 --> 00:06:02,910
hopefully induce you to come join us in

00:06:00,060 --> 00:06:04,710
our in our standards efforts so there

00:06:02,910 --> 00:06:07,800
should be time at the end I hope for

00:06:04,710 --> 00:06:13,039
discussion questions comments throw

00:06:07,800 --> 00:06:16,259
tomatoes whatever you want to do and

00:06:13,039 --> 00:06:18,690
also lucky for you I don't have a lot of

00:06:16,259 --> 00:06:19,889
content on the slides because I didn't

00:06:18,690 --> 00:06:21,960
really think it was much visual to be

00:06:19,889 --> 00:06:26,970
represented so you just get to listen to

00:06:21,960 --> 00:06:29,000
me talk so starting with TLS 103 if we

00:06:26,970 --> 00:06:33,720
go back to the prior version of TLS 1.2

00:06:29,000 --> 00:06:36,690
1.2 was specified in 2008 the standard

00:06:33,720 --> 00:06:40,020
was published in 2008 and it took five

00:06:36,690 --> 00:06:42,960
years before there was support for TLS

00:06:40,020 --> 00:06:46,080
1.2 in the major browsers Chrome and

00:06:42,960 --> 00:06:48,690
Firefox at that point five years later

00:06:46,080 --> 00:06:54,810
about 11% of websites we're supporting

00:06:48,690 --> 00:06:57,030
TLS 1.2 so that's kind of the

00:06:54,810 --> 00:06:59,849
implementation story that the deployment

00:06:57,030 --> 00:07:03,990
story for TLS 1.2 we can compared TLS

00:06:59,849 --> 00:07:06,060
1.3 so TLS 1.3 was the work started some

00:07:03,990 --> 00:07:08,630
years ago it was finalized in August of

00:07:06,060 --> 00:07:12,120
last year and I had a few objectives

00:07:08,630 --> 00:07:13,530
wanted to remove some of the crypto

00:07:12,120 --> 00:07:15,479
algorithms that had been proven to be

00:07:13,530 --> 00:07:17,970
vulnerable in the time since 1.2 was

00:07:15,479 --> 00:07:20,639
finalized wanted to make some

00:07:17,970 --> 00:07:21,780
performance improvements so 1.3 reduces

00:07:20,639 --> 00:07:26,400
the number of round trips that you need

00:07:21,780 --> 00:07:28,530
in order to set up the handshake it

00:07:26,400 --> 00:07:30,750
applies confidentially confidentiality

00:07:28,530 --> 00:07:34,889
protection to more of the connection

00:07:30,750 --> 00:07:37,949
then 1.2 does and it establishes perfect

00:07:34,889 --> 00:07:40,199
forward secrecy by default as as the

00:07:37,949 --> 00:07:41,729
mode of operation so some significant

00:07:40,199 --> 00:07:43,860
security improvements some significant

00:07:41,729 --> 00:07:45,780
performance improvements so we published

00:07:43,860 --> 00:07:48,410
this in August of last year and about

00:07:45,780 --> 00:07:52,110
five months later five months not five

00:07:48,410 --> 00:07:54,090
at the beginning of this year Chrome and

00:07:52,110 --> 00:07:55,819
Firefox were both supporting it about

00:07:54,090 --> 00:07:58,349
eleven percent of web sites were were

00:07:55,819 --> 00:08:00,150
sending the traffic over TLS 1.3 and

00:07:58,349 --> 00:08:03,240
something like 50 percent of Facebook's

00:08:00,150 --> 00:08:05,009
traffic was using TLS 1.3 it's a really

00:08:03,240 --> 00:08:08,310
significant difference in terms of the

00:08:05,009 --> 00:08:09,030
deployment time scale so what made this

00:08:08,310 --> 00:08:10,800
difference

00:08:09,030 --> 00:08:14,130
why were the why were these two stories

00:08:10,800 --> 00:08:16,460
so different during the development of

00:08:14,130 --> 00:08:18,419
TLS 1.3 there were about a dozen

00:08:16,460 --> 00:08:20,460
implementations that were being

00:08:18,419 --> 00:08:23,009
developed in parallel with the

00:08:20,460 --> 00:08:25,919
specification including many of the ones

00:08:23,009 --> 00:08:28,050
that are now seeing wide deployment and

00:08:25,919 --> 00:08:30,389
what this allowed for was a basically a

00:08:28,050 --> 00:08:32,339
near real-time feedback loop between the

00:08:30,389 --> 00:08:34,469
people who were writing the code and the

00:08:32,339 --> 00:08:37,339
people who were writing the specs a

00:08:34,469 --> 00:08:40,469
process I think somewhat reminiscent of

00:08:37,339 --> 00:08:42,990
an open-source project was used so

00:08:40,469 --> 00:08:44,550
people were using github not only to

00:08:42,990 --> 00:08:46,140
collaborate on their code but also to

00:08:44,550 --> 00:08:47,970
collaborate on the standards documents

00:08:46,140 --> 00:08:49,470
themselves we've developed a bunch of

00:08:47,970 --> 00:08:52,500
tooling around that to make it easier to

00:08:49,470 --> 00:08:55,079
do that they had dedicated slack

00:08:52,500 --> 00:08:59,070
channels where people were collaborating

00:08:55,079 --> 00:09:00,930
in real time fixing bugs and really

00:08:59,070 --> 00:09:02,790
taking what they were learning from the

00:09:00,930 --> 00:09:04,529
implementation experience and feeding it

00:09:02,790 --> 00:09:07,320
back into make the to make the standard

00:09:04,529 --> 00:09:09,060
better and we were able to operate this

00:09:07,320 --> 00:09:11,790
way in the IETF because we have actually

00:09:09,060 --> 00:09:13,890
a fairly flexible model this came to be

00:09:11,790 --> 00:09:16,110
because the people who cared about this

00:09:13,890 --> 00:09:17,910
technology who had been involved some of

00:09:16,110 --> 00:09:20,880
them and the development of TLS 1.2 and

00:09:17,910 --> 00:09:22,829
had seen some of the pitfalls and the

00:09:20,880 --> 00:09:25,529
drawbacks and the aspects of it that

00:09:22,829 --> 00:09:27,300
made it slow to deploy and that made it

00:09:25,529 --> 00:09:29,070
less performant or less secure than they

00:09:27,300 --> 00:09:30,660
wanted it to be this was the way they

00:09:29,070 --> 00:09:31,800
wanted to work there were there were

00:09:30,660 --> 00:09:33,240
more there were several of them who

00:09:31,800 --> 00:09:35,520
wanted to collaborate this way and we

00:09:33,240 --> 00:09:39,240
said sure we can we can tolerate that we

00:09:35,520 --> 00:09:40,500
can support that so we did you've

00:09:39,240 --> 00:09:43,050
probably heard the tagline rough

00:09:40,500 --> 00:09:44,790
consensus and running code so these

00:09:43,050 --> 00:09:46,709
people really exercise that the running

00:09:44,790 --> 00:09:49,920
code portion of the tag line like to an

00:09:46,709 --> 00:09:51,300
extreme before every IETF meeting or at

00:09:49,920 --> 00:09:53,520
the beginning of every IETF meeting now

00:09:51,300 --> 00:09:56,579
we have IETF hackathons there's one this

00:09:53,520 --> 00:09:58,660
weekend Saturday and Sunday so the TLS

00:09:56,579 --> 00:10:01,540
folks were collaborating

00:09:58,660 --> 00:10:05,350
we hackathon Interop events in between

00:10:01,540 --> 00:10:08,079
both you know virtual ones and and other

00:10:05,350 --> 00:10:09,850
meetings and they were essentially just

00:10:08,079 --> 00:10:11,259
comparing notes all along the way in

00:10:09,850 --> 00:10:13,959
order to improve both their

00:10:11,259 --> 00:10:15,579
implementations and the specifications

00:10:13,959 --> 00:10:17,709
and part of the reason that they were

00:10:15,579 --> 00:10:19,569
able to do that is because of the

00:10:17,709 --> 00:10:23,319
versioning scheme that was implemented

00:10:19,569 --> 00:10:26,319
in 1.3 this allowed the group to tag

00:10:23,319 --> 00:10:28,629
draft versions of the spec for the

00:10:26,319 --> 00:10:32,079
purposes of doing interrupt tests and

00:10:28,629 --> 00:10:34,180
benchmarking and this was explicit in

00:10:32,079 --> 00:10:36,129
the design of TLS 1.3 they wanted it to

00:10:34,180 --> 00:10:39,279
be more extensible and they wanted to be

00:10:36,129 --> 00:10:42,490
able to do this rapid iteration along

00:10:39,279 --> 00:10:44,889
the way I think probably those of you

00:10:42,490 --> 00:10:47,110
who've had any exposure to standards or

00:10:44,889 --> 00:10:48,839
to the IETF have heard the complaint

00:10:47,110 --> 00:10:51,120
that the standards process is too slow

00:10:48,839 --> 00:10:55,269
who's heard this before

00:10:51,120 --> 00:10:57,250
and everybody's afraid to raise their

00:10:55,269 --> 00:11:00,850
hand I'm raising my hand I have heard

00:10:57,250 --> 00:11:02,980
this every day of my life so the

00:11:00,850 --> 00:11:04,720
standards process can take a while right

00:11:02,980 --> 00:11:06,220
it's much easier to agree with yourself

00:11:04,720 --> 00:11:07,689
to do something and then do it too then

00:11:06,220 --> 00:11:08,769
to agree with a thousand of your closest

00:11:07,689 --> 00:11:10,449
friends that this is the right design

00:11:08,769 --> 00:11:14,380
right it takes a while to come to

00:11:10,449 --> 00:11:17,019
agreement and for TLS 1.3 it essentially

00:11:14,380 --> 00:11:20,019
took four years from start to finish

00:11:17,019 --> 00:11:23,860
one of those years a whole year was

00:11:20,019 --> 00:11:25,810
spent dealing with the fact that middle

00:11:23,860 --> 00:11:28,689
boxes were breaking when they saw a TLS

00:11:25,810 --> 00:11:31,389
1.3 traffic and it's in its draft form

00:11:28,689 --> 00:11:33,910
and the only reason that we were able to

00:11:31,389 --> 00:11:36,759
find that out before we polished the

00:11:33,910 --> 00:11:38,050
final specification is because we had

00:11:36,759 --> 00:11:39,910
implementations that were being

00:11:38,050 --> 00:11:43,329
developed along the way this is how we

00:11:39,910 --> 00:11:46,000
were able to discover this so if the

00:11:43,329 --> 00:11:48,339
standards process is going to take a

00:11:46,000 --> 00:11:52,809
couple of years for something as as

00:11:48,339 --> 00:11:54,279
massive of an effort as TLS was then you

00:11:52,809 --> 00:11:55,899
might as well at the point when you're

00:11:54,279 --> 00:11:57,699
actually ready to finalize the standard

00:11:55,899 --> 00:11:59,170
have implementations that are either

00:11:57,699 --> 00:12:03,459
ready to ship or basically already

00:11:59,170 --> 00:12:05,829
deployed which was the situation here if

00:12:03,459 --> 00:12:08,360
we look at the the effort that went into

00:12:05,829 --> 00:12:10,670
this the protocol that emerged

00:12:08,360 --> 00:12:13,550
looked very different from the protocol

00:12:10,670 --> 00:12:15,230
that's that started and that was in

00:12:13,550 --> 00:12:17,270
large part due not only to this

00:12:15,230 --> 00:12:19,910
collaboration between implementers and

00:12:17,270 --> 00:12:21,470
and the spec writers but also

00:12:19,910 --> 00:12:23,750
collaboration with the cryptographic

00:12:21,470 --> 00:12:25,910
research community and that same kind of

00:12:23,750 --> 00:12:28,130
fast feedback loop where people could

00:12:25,910 --> 00:12:29,750
were doing formal verification of the

00:12:28,130 --> 00:12:31,430
security properties of the protocol and

00:12:29,750 --> 00:12:33,830
they could feed that back in to the

00:12:31,430 --> 00:12:38,540
working group something like 80 people

00:12:33,830 --> 00:12:40,130
contributed to the TLS 1.3 spec and the

00:12:38,540 --> 00:12:42,290
end result was that this protocol was

00:12:40,130 --> 00:12:45,320
more deployables cure more efficient

00:12:42,290 --> 00:12:48,850
than it otherwise would have been if any

00:12:45,320 --> 00:12:51,350
single individual had produced it I

00:12:48,850 --> 00:12:53,180
think people who are familiar with

00:12:51,350 --> 00:12:54,980
open-source probably kind of recognize

00:12:53,180 --> 00:12:57,650
this phenomenon a good open-source

00:12:54,980 --> 00:12:59,000
project also has this quality that you

00:12:57,650 --> 00:13:02,810
get a bunch of different people together

00:12:59,000 --> 00:13:04,610
and the result of that collaboration and

00:13:02,810 --> 00:13:05,900
all of those contributions is a better

00:13:04,610 --> 00:13:08,300
result than it would have been if you

00:13:05,900 --> 00:13:09,560
were out just working on your own so

00:13:08,300 --> 00:13:11,630
we're trying to kind of replicate that a

00:13:09,560 --> 00:13:13,430
little bit in the IETF process to say

00:13:11,630 --> 00:13:15,560
you know can we make this result better

00:13:13,430 --> 00:13:17,960
by bringing people together even though

00:13:15,560 --> 00:13:19,460
the end result is just this one spec we

00:13:17,960 --> 00:13:20,600
hope that it will support a bunch of

00:13:19,460 --> 00:13:24,980
different implementations that are all

00:13:20,600 --> 00:13:30,590
high quality so that's kind of the the

00:13:24,980 --> 00:13:32,420
baseline story for TLS for quick quick

00:13:30,590 --> 00:13:35,600
is an ongoing effort and we're following

00:13:32,420 --> 00:13:37,580
sort of a similar process some of you

00:13:35,600 --> 00:13:39,170
are probably familiar with quick I know

00:13:37,580 --> 00:13:43,730
there was a tutorial yesterday I'm sure

00:13:39,170 --> 00:13:46,880
it was excellent so but for people who

00:13:43,730 --> 00:13:48,470
don't know quic is a new transport

00:13:46,880 --> 00:13:52,960
protocol designed to be an alternative

00:13:48,470 --> 00:13:55,100
to TCP designed to minimize latency and

00:13:52,960 --> 00:13:58,010
maximize its chances for wide deployment

00:13:55,100 --> 00:14:00,170
and parts of the design were inspired by

00:13:58,010 --> 00:14:03,980
the experience we had some years ago in

00:14:00,170 --> 00:14:05,780
developing HTTP 2 so some of the same

00:14:03,980 --> 00:14:08,330
people have been involved and some of

00:14:05,780 --> 00:14:10,070
the ideas grew out of that

00:14:08,330 --> 00:14:12,290
the history here is that Google

00:14:10,070 --> 00:14:15,500
developed its original version of quick

00:14:12,290 --> 00:14:17,630
back in 2012 deployed it on its network

00:14:15,500 --> 00:14:20,360
and experimented with it for a couple of

00:14:17,630 --> 00:14:21,080
years before coming to the ITF to

00:14:20,360 --> 00:14:23,990
propose it

00:14:21,080 --> 00:14:26,750
or standardization and at that point

00:14:23,990 --> 00:14:28,850
there was plenty of interest in the

00:14:26,750 --> 00:14:31,580
community in the industry and looking

00:14:28,850 --> 00:14:33,740
into standardizing this wasn't you know

00:14:31,580 --> 00:14:35,570
it wasn't just a one organization deal

00:14:33,740 --> 00:14:37,880
lots of people were getting interested

00:14:35,570 --> 00:14:40,070
in this and so the IETF effort effort

00:14:37,880 --> 00:14:43,100
actually began in 2016 to do the

00:14:40,070 --> 00:14:44,420
standardization and the hopeful

00:14:43,100 --> 00:14:46,400
estimates that I've heard is that the

00:14:44,420 --> 00:14:48,470
first version of the base protocol might

00:14:46,400 --> 00:14:53,210
be done end of this year or beginning of

00:14:48,470 --> 00:14:55,040
next year yeah hopeful estimates so the

00:14:53,210 --> 00:14:57,200
Google specs that they had were used as

00:14:55,040 --> 00:15:01,760
initial inputs into this work

00:14:57,200 --> 00:15:03,710
but since 2016 every aspect of the wire

00:15:01,760 --> 00:15:06,500
protocol has changed through the

00:15:03,710 --> 00:15:09,800
standardization process basically for

00:15:06,500 --> 00:15:13,250
the purposes of improving it so Google

00:15:09,800 --> 00:15:16,970
started out with some bespoke crypto and

00:15:13,250 --> 00:15:20,840
that has been replaced with TLS 1.3

00:15:16,970 --> 00:15:23,120
essentially other examples we've added

00:15:20,840 --> 00:15:24,440
support for unidirectional streams so we

00:15:23,120 --> 00:15:25,850
can support a wider variety of

00:15:24,440 --> 00:15:27,740
applications

00:15:25,850 --> 00:15:29,690
we've solidified which aspects of the

00:15:27,740 --> 00:15:31,340
protocol are to remain invariant over

00:15:29,690 --> 00:15:34,010
time I'll talk about that a little bit

00:15:31,340 --> 00:15:36,860
more later there's a new HTTP header

00:15:34,010 --> 00:15:40,310
compression scheme for use with what is

00:15:36,860 --> 00:15:42,080
now called HTTP 3 HTTP over quick so

00:15:40,310 --> 00:15:46,430
lots of changes have occurred during the

00:15:42,080 --> 00:15:47,930
process of standardization so I think if

00:15:46,430 --> 00:15:51,710
we come back to this original question

00:15:47,930 --> 00:15:53,570
of do you need a standard if you have a

00:15:51,710 --> 00:15:57,800
good implementation the experience with

00:15:53,570 --> 00:16:00,290
quic is is fairly instructive Google or

00:15:57,800 --> 00:16:02,360
any individual implementer could have

00:16:00,290 --> 00:16:05,600
toiled away on their own implementation

00:16:02,360 --> 00:16:07,130
and I'm sure we all would have benefited

00:16:05,600 --> 00:16:09,380
from that people would have enjoyed this

00:16:07,130 --> 00:16:10,640
new protocol once it got out there you

00:16:09,380 --> 00:16:14,180
know seeing the performance enhancements

00:16:10,640 --> 00:16:17,240
and so on but the this open public

00:16:14,180 --> 00:16:19,370
process of standardization has produced

00:16:17,240 --> 00:16:23,540
I think a stronger or will produce a

00:16:19,370 --> 00:16:25,610
stronger and more enduring design that

00:16:23,540 --> 00:16:28,250
will benefit the whole Internet and not

00:16:25,610 --> 00:16:31,100
just those who choose to adopt a single

00:16:28,250 --> 00:16:32,870
implementation and that includes you

00:16:31,100 --> 00:16:35,370
know users of other browsers other

00:16:32,870 --> 00:16:37,280
operating systems

00:16:35,370 --> 00:16:40,110
different web server software

00:16:37,280 --> 00:16:43,050
application stacks that are written in

00:16:40,110 --> 00:16:44,670
several different languages there's a

00:16:43,050 --> 00:16:47,750
whole ecosystem that can benefit from

00:16:44,670 --> 00:16:51,510
the standardization benefits that accrue

00:16:47,750 --> 00:16:53,940
when people come together I also think

00:16:51,510 --> 00:16:56,720
that documenting the design is allowing

00:16:53,940 --> 00:16:59,520
for many of these implementations to

00:16:56,720 --> 00:17:03,290
sprout up and come into their own so

00:16:59,520 --> 00:17:05,790
there's now nearly two dozen

00:17:03,290 --> 00:17:10,709
implications of quick many of them are

00:17:05,790 --> 00:17:12,870
open source and as with TLS the working

00:17:10,709 --> 00:17:16,050
group tags specific versions to do

00:17:12,870 --> 00:17:18,320
Interop testing they do this again an

00:17:16,050 --> 00:17:20,760
IETF hackathons the quick group meets

00:17:18,320 --> 00:17:23,660
physically and virtually in between the

00:17:20,760 --> 00:17:25,860
IETF meetings to further this effort

00:17:23,660 --> 00:17:28,320
they use the slack channel they have

00:17:25,860 --> 00:17:29,700
shared spreadsheets to track inter ops

00:17:28,320 --> 00:17:32,130
between all of the different

00:17:29,700 --> 00:17:34,110
implementations so it's that same style

00:17:32,130 --> 00:17:37,260
of collaborative work that that was used

00:17:34,110 --> 00:17:38,700
with the TLS group I think this

00:17:37,260 --> 00:17:40,500
experience with quic actually provides

00:17:38,700 --> 00:17:42,840
an interesting occasion to think about

00:17:40,500 --> 00:17:44,640
some of the narratives that are out

00:17:42,840 --> 00:17:49,470
there about this relationship between

00:17:44,640 --> 00:17:51,240
open standards and open source as I said

00:17:49,470 --> 00:17:54,120
we have this tagline rough consensus and

00:17:51,240 --> 00:17:57,060
running code but running code has gotten

00:17:54,120 --> 00:17:58,700
easier to produce since the person who

00:17:57,060 --> 00:18:01,620
spoke of that line first spoke it

00:17:58,700 --> 00:18:03,060
someone recently said to me that every

00:18:01,620 --> 00:18:07,130
bad idea that they see in the IETF

00:18:03,060 --> 00:18:07,130
nowadays is accompanied by running code

00:18:07,160 --> 00:18:11,400
thinks to yourself about whether you

00:18:09,360 --> 00:18:14,250
think that's true or not I think there's

00:18:11,400 --> 00:18:15,990
probably some truth to that but that

00:18:14,250 --> 00:18:18,240
just means that every idea that is

00:18:15,990 --> 00:18:20,880
coming into the IETF more or less is

00:18:18,240 --> 00:18:23,130
accompanied by running code which is

00:18:20,880 --> 00:18:24,450
which is on the one hand good on the

00:18:23,130 --> 00:18:26,640
other hand I think that means that in

00:18:24,450 --> 00:18:27,960
some people's minds the bar for whether

00:18:26,640 --> 00:18:29,460
they're going to engage in a

00:18:27,960 --> 00:18:31,200
standardization effort has kind of

00:18:29,460 --> 00:18:32,970
shifted up a little bit and the question

00:18:31,200 --> 00:18:35,580
is not do you have running code like can

00:18:32,970 --> 00:18:36,780
you throw something up on github but do

00:18:35,580 --> 00:18:39,570
you have code that's running at scale

00:18:36,780 --> 00:18:41,940
and potentially at internet scale and I

00:18:39,570 --> 00:18:45,030
think the early demonstrations of quick

00:18:41,940 --> 00:18:46,410
at Google were actually pretty seminal

00:18:45,030 --> 00:18:48,720
in terms of

00:18:46,410 --> 00:18:50,520
motivating other people to get involved

00:18:48,720 --> 00:18:54,000
because they could see some of the

00:18:50,520 --> 00:18:55,800
results they could see that this might

00:18:54,000 --> 00:18:59,490
be something that could work at scale

00:18:55,800 --> 00:19:01,710
and for those who are you know steeped

00:18:59,490 --> 00:19:03,630
in in transport protocols do you know

00:19:01,710 --> 00:19:06,600
that there's like this graveyard of

00:19:03,630 --> 00:19:10,200
transport protocols that have that never

00:19:06,600 --> 00:19:11,670
really reached the you know achieve the

00:19:10,200 --> 00:19:13,500
kind of deployment that people expected

00:19:11,670 --> 00:19:17,160
them to at design-time or hoped that

00:19:13,500 --> 00:19:19,260
they would and standardization requires

00:19:17,160 --> 00:19:21,240
some investment of time so people want

00:19:19,260 --> 00:19:25,170
to know that this investment of time is

00:19:21,240 --> 00:19:26,670
going to be worthwhile and so you know

00:19:25,170 --> 00:19:28,950
seeing a demonstration of that at the

00:19:26,670 --> 00:19:30,450
outset can be useful and so I think

00:19:28,950 --> 00:19:31,950
that's that's worth thinking about

00:19:30,450 --> 00:19:35,130
because at this point you know seeing

00:19:31,950 --> 00:19:37,020
some demo code even seeing that you know

00:19:35,130 --> 00:19:39,150
somebody's new idea got accepted as a

00:19:37,020 --> 00:19:40,770
patch into the Linux kernel like that

00:19:39,150 --> 00:19:43,320
might not be enough to convince people

00:19:40,770 --> 00:19:46,410
that they should go invest their time to

00:19:43,320 --> 00:19:47,520
standardize it might be that that you

00:19:46,410 --> 00:19:50,190
need more than that or you need multiple

00:19:47,520 --> 00:19:52,920
demonstrations of that so the bar might

00:19:50,190 --> 00:19:55,050
be moving up a little bit I think

00:19:52,920 --> 00:19:57,510
there's another narrative that is out

00:19:55,050 --> 00:20:00,300
there about standards maybe not as much

00:19:57,510 --> 00:20:01,980
about the IETF but but sometimes and

00:20:00,300 --> 00:20:03,750
that's that you have these internet

00:20:01,980 --> 00:20:05,790
giants and they come to standards

00:20:03,750 --> 00:20:07,650
organizations and they get a rubber

00:20:05,790 --> 00:20:09,300
stamp on their thing because they're so

00:20:07,650 --> 00:20:11,310
giant how could we say no to them how

00:20:09,300 --> 00:20:12,810
could we say no to Google or Cisco or

00:20:11,310 --> 00:20:15,140
CloudFlare if they want to come in and

00:20:12,810 --> 00:20:18,210
and and get their new protocol

00:20:15,140 --> 00:20:20,790
standardized just as it is and I think

00:20:18,210 --> 00:20:23,520
the the history with quic really belies

00:20:20,790 --> 00:20:25,260
that narrative as I said before massive

00:20:23,520 --> 00:20:28,770
changes to the protocol since it came in

00:20:25,260 --> 00:20:31,380
for standardization obviously people

00:20:28,770 --> 00:20:33,510
take note of who is promulgating a

00:20:31,380 --> 00:20:36,510
particular idea who is coming to the

00:20:33,510 --> 00:20:38,220
microphone to offer an opinion and they

00:20:36,510 --> 00:20:39,840
think about what what might the market

00:20:38,220 --> 00:20:42,840
trajectory be for a particular

00:20:39,840 --> 00:20:44,910
technology but since we run an open

00:20:42,840 --> 00:20:47,670
process that lets anybody participate as

00:20:44,910 --> 00:20:50,130
an individual and it operates on the

00:20:47,670 --> 00:20:51,780
basis of this rough consensus that means

00:20:50,130 --> 00:20:54,390
it's actually really really difficult

00:20:51,780 --> 00:20:56,310
for a single individual or a single

00:20:54,390 --> 00:20:57,960
entity to just get their thing

00:20:56,310 --> 00:20:59,680
rubber-stamped it's equally difficult

00:20:57,960 --> 00:21:02,320
for a single individual

00:20:59,680 --> 00:21:07,660
to block something from proceeding if if

00:21:02,320 --> 00:21:08,680
most other people want to so I think

00:21:07,660 --> 00:21:10,990
this is interesting because it's

00:21:08,680 --> 00:21:12,820
different from some of the more tightly

00:21:10,990 --> 00:21:15,160
controlled processes that might be out

00:21:12,820 --> 00:21:16,630
there so some open source projects don't

00:21:15,160 --> 00:21:18,370
really have this flavor right like

00:21:16,630 --> 00:21:20,740
whether whether something gets accepted

00:21:18,370 --> 00:21:23,980
or not is up to potentially a very small

00:21:20,740 --> 00:21:25,480
number of people who decide hey I like

00:21:23,980 --> 00:21:27,910
you or I like your thing I'm going to

00:21:25,480 --> 00:21:29,260
accept it or not and it's the same thing

00:21:27,910 --> 00:21:31,540
with standards organizations there's

00:21:29,260 --> 00:21:33,610
lots of standards organizations that are

00:21:31,540 --> 00:21:35,440
much more tightly controlled have a sort

00:21:33,610 --> 00:21:38,350
of one member one vote kind of

00:21:35,440 --> 00:21:40,480
orientation and can be kind of

00:21:38,350 --> 00:21:42,730
politicized in terms of gathering the

00:21:40,480 --> 00:21:44,770
votes and so I think the IETF in

00:21:42,730 --> 00:21:47,590
particular is unique in that we have

00:21:44,770 --> 00:21:49,570
this open consensus based process and

00:21:47,590 --> 00:21:51,700
the the way that the process is run

00:21:49,570 --> 00:21:56,440
defends against that kind of

00:21:51,700 --> 00:21:58,480
manipulation so I'll switch gears and

00:21:56,440 --> 00:21:59,830
talk a little bit about protocol

00:21:58,480 --> 00:22:02,140
ossification and these things are

00:21:59,830 --> 00:22:03,910
actually somewhat related in terms of

00:22:02,140 --> 00:22:08,170
how we ended up designing these two

00:22:03,910 --> 00:22:09,550
protocols and both you know the process

00:22:08,170 --> 00:22:12,010
that went into it and then the design

00:22:09,550 --> 00:22:13,450
that came out of it so when I say

00:22:12,010 --> 00:22:16,780
protocol protocol ossification what I

00:22:13,450 --> 00:22:19,780
mean is the state in which a protocol

00:22:16,780 --> 00:22:22,410
cannot be successfully extended or

00:22:19,780 --> 00:22:24,970
updated because the deployed environment

00:22:22,410 --> 00:22:28,660
has basically frozen the protocol in

00:22:24,970 --> 00:22:30,310
place so out on the network we have Nats

00:22:28,660 --> 00:22:33,160
we have firewalls we have proxies we

00:22:30,310 --> 00:22:35,620
have TCP optimizers we have every kind

00:22:33,160 --> 00:22:38,020
of middle box that you like and they

00:22:35,620 --> 00:22:40,060
bake assumptions about a protocol into

00:22:38,020 --> 00:22:42,340
their own functionality sometimes to the

00:22:40,060 --> 00:22:45,310
point where a protocol breaks if the

00:22:42,340 --> 00:22:47,470
protocol functionality changes because

00:22:45,310 --> 00:22:48,580
it it trying to extend it or trying to

00:22:47,470 --> 00:22:50,380
update it you can't get it through the

00:22:48,580 --> 00:22:53,590
middle box so concerned about

00:22:50,380 --> 00:22:55,870
ossification go back many decades and up

00:22:53,590 --> 00:22:59,140
and down the stack right IP TCP DTLS

00:22:55,870 --> 00:23:01,510
HTTP like many commonly used protocols

00:22:59,140 --> 00:23:03,280
people have been concerned about their

00:23:01,510 --> 00:23:06,280
ossification or have have witnessed it

00:23:03,280 --> 00:23:08,740
happen over the years and we think about

00:23:06,280 --> 00:23:11,230
the two examples from today TLS 1.3 and

00:23:08,740 --> 00:23:13,040
quic have really really ambitious bowls

00:23:11,230 --> 00:23:14,510
so TLS 1.3

00:23:13,040 --> 00:23:16,070
all we wanted to do is replace the most

00:23:14,510 --> 00:23:16,660
widely used security protocol on the

00:23:16,070 --> 00:23:20,480
Internet

00:23:16,660 --> 00:23:24,980
quick all we want to do is provide an

00:23:20,480 --> 00:23:27,440
alternative to TCP okay and if though if

00:23:24,980 --> 00:23:28,760
you're gonna have that kind of goal you

00:23:27,440 --> 00:23:32,450
have to realize that you're like way

00:23:28,760 --> 00:23:34,580
beyond the point of sort of wishing away

00:23:32,450 --> 00:23:37,040
this middle box environment or hoping

00:23:34,580 --> 00:23:40,160
that it will change so that your

00:23:37,040 --> 00:23:41,750
protocol can get deployed you can't

00:23:40,160 --> 00:23:43,670
expect the behavior middleboxes to

00:23:41,750 --> 00:23:46,220
change in any kind of mass or uniform

00:23:43,670 --> 00:23:49,280
way at this point so both of these

00:23:46,220 --> 00:23:52,040
protocols essentially took the deployed

00:23:49,280 --> 00:23:55,220
reality of in-network processing that

00:23:52,040 --> 00:23:57,020
that we know happens very seriously into

00:23:55,220 --> 00:24:00,980
the into the foundations of their design

00:23:57,020 --> 00:24:02,690
for TLS 1.3 as I mentioned earlier the

00:24:00,980 --> 00:24:05,210
process of standardization was actually

00:24:02,690 --> 00:24:10,250
also a process of realizing what this

00:24:05,210 --> 00:24:13,610
deployed reality is so in 2017 some of

00:24:10,250 --> 00:24:17,450
the major browsers started shipping the

00:24:13,610 --> 00:24:19,010
what was the current draft of TLS 1.3 a

00:24:17,450 --> 00:24:20,690
little bit more broadly than they had

00:24:19,010 --> 00:24:22,820
been previously and they started taking

00:24:20,690 --> 00:24:24,470
some measurements and they noticed that

00:24:22,820 --> 00:24:27,290
the error rates for successfully

00:24:24,470 --> 00:24:32,630
negotiating 1.3 were much higher than

00:24:27,290 --> 00:24:35,330
they were for 1.2 and after some fairly

00:24:32,630 --> 00:24:37,580
extensive investigation what they found

00:24:35,330 --> 00:24:38,990
that different kinds of middle boxes

00:24:37,580 --> 00:24:42,200
were interfering with the TLS handshake

00:24:38,990 --> 00:24:44,420
in different ways essentially causing

00:24:42,200 --> 00:24:46,400
one not three connections to fail and at

00:24:44,420 --> 00:24:49,430
this point they spent some time making a

00:24:46,400 --> 00:24:52,790
fairly significant change to the 1.3

00:24:49,430 --> 00:24:55,400
protocol so that it looks like TLS 1.2

00:24:52,790 --> 00:24:58,550
session resumption on the wire like

00:24:55,400 --> 00:25:00,290
including dummy values that have no

00:24:58,550 --> 00:25:03,410
other purpose other than to make the

00:25:00,290 --> 00:25:05,150
protocol essentially masquerade as 1.2

00:25:03,410 --> 00:25:06,710
so that it will get through these metal

00:25:05,150 --> 00:25:09,530
boxes if you go look at the design of it

00:25:06,710 --> 00:25:11,720
today that's what you'll see and with

00:25:09,530 --> 00:25:12,890
this change made people make this change

00:25:11,720 --> 00:25:14,570
and then they updated their

00:25:12,890 --> 00:25:18,950
implementations and they started testing

00:25:14,570 --> 00:25:21,710
again the error rates dropped this also

00:25:18,950 --> 00:25:23,420
I think points out one of the other few

00:25:21,710 --> 00:25:25,180
tools that we have in the toolbox to

00:25:23,420 --> 00:25:26,800
defend against protocol

00:25:25,180 --> 00:25:30,340
ossification or to mitigate it and

00:25:26,800 --> 00:25:32,500
that's encryption so in 1.3 as I

00:25:30,340 --> 00:25:35,590
mentioned a greater portion of the

00:25:32,500 --> 00:25:37,600
connection is is encrypted essentially

00:25:35,590 --> 00:25:40,750
all messages after the server hello are

00:25:37,600 --> 00:25:42,790
encrypted and this not only this was

00:25:40,750 --> 00:25:44,440
done not only because it just generally

00:25:42,790 --> 00:25:46,440
improves the privacy properties of the

00:25:44,440 --> 00:25:48,340
protocol but it also prevents

00:25:46,440 --> 00:25:50,710
middleboxes from

00:25:48,340 --> 00:25:52,240
tinkering with the handshake in the way

00:25:50,710 --> 00:25:54,340
that they were in this process that

00:25:52,240 --> 00:25:56,770
people discovered when they were doing

00:25:54,340 --> 00:25:58,720
the design so this was like an explicit

00:25:56,770 --> 00:26:02,140
decision on the part of the designers of

00:25:58,720 --> 00:26:05,560
the protocol that in order to give 1.3 a

00:26:02,140 --> 00:26:06,880
better chance of not only passing

00:26:05,560 --> 00:26:10,090
through the network successfully today

00:26:06,880 --> 00:26:11,860
but of being able to change and adapt in

00:26:10,090 --> 00:26:15,610
the future to future middleboxes

00:26:11,860 --> 00:26:18,070
intervention the way what they needed to

00:26:15,610 --> 00:26:21,810
do was encrypt more of of the connection

00:26:18,070 --> 00:26:24,220
and quic has adopted a similar strategy

00:26:21,810 --> 00:26:27,520
so if you look at the design of quick

00:26:24,220 --> 00:26:30,370
it's designed around the existing time

00:26:27,520 --> 00:26:32,530
out behavior of Nats it's a UDP based

00:26:30,370 --> 00:26:35,200
protocol and so it has to deal with the

00:26:32,530 --> 00:26:39,370
fact that you know the NAT bindings will

00:26:35,200 --> 00:26:41,200
timeout and there's a mechanism that's

00:26:39,370 --> 00:26:42,940
designed into the protocol whereby

00:26:41,200 --> 00:26:45,040
there's a connection ID in every single

00:26:42,940 --> 00:26:47,940
packet which allows the quick connection

00:26:45,040 --> 00:26:50,920
to survive these these NAT ray bindings

00:26:47,940 --> 00:26:53,830
it didn't have to be this way this is

00:26:50,920 --> 00:26:58,390
the way that it's designed now it could

00:26:53,830 --> 00:26:59,920
have been designed with a NAT visible

00:26:58,390 --> 00:27:03,880
connection close in the same way that

00:26:59,920 --> 00:27:06,100
that TCP has but nobody believed that

00:27:03,880 --> 00:27:09,190
the deployed middleboxes would

00:27:06,100 --> 00:27:11,860
accommodate this and so as a result

00:27:09,190 --> 00:27:14,920
quick again was designed explicitly to

00:27:11,860 --> 00:27:17,560
maximize the likelihood of successful

00:27:14,920 --> 00:27:20,620
deployment given the existing middle box

00:27:17,560 --> 00:27:22,540
environment in addition the vast

00:27:20,620 --> 00:27:27,220
majority of the quick packet is

00:27:22,540 --> 00:27:29,290
encrypted so only very minimal control

00:27:27,220 --> 00:27:31,240
information is revealed in clear-text

00:27:29,290 --> 00:27:34,240
this connection ID and the version

00:27:31,240 --> 00:27:35,650
number essentially and there's some

00:27:34,240 --> 00:27:37,460
initial encryption keys that are used

00:27:35,650 --> 00:27:39,740
before the TLS 1.3 and

00:27:37,460 --> 00:27:40,850
it completes and then the TLS 1 2 3 keys

00:27:39,740 --> 00:27:45,500
are used to encrypt the packet from

00:27:40,850 --> 00:27:47,840
there on so the kinds of in network

00:27:45,500 --> 00:27:51,649
manipulations that we've seen over the

00:27:47,840 --> 00:27:54,370
decades of TCP you know manipulating

00:27:51,649 --> 00:27:57,820
acknowledgments and window size and

00:27:54,370 --> 00:27:59,960
resetting connections and so forth

00:27:57,820 --> 00:28:02,090
extremely difficult with quick because

00:27:59,960 --> 00:28:04,789
all of that information is now going to

00:28:02,090 --> 00:28:07,159
be encrypted and not visible to the

00:28:04,789 --> 00:28:09,559
network and again this was like an

00:28:07,159 --> 00:28:11,570
explicit design decision not only to

00:28:09,559 --> 00:28:13,220
make this protocol work today but to

00:28:11,570 --> 00:28:14,390
give it some flexibility so that we can

00:28:13,220 --> 00:28:17,210
change it in the future and it will

00:28:14,390 --> 00:28:22,840
still work regardless of how middle box

00:28:17,210 --> 00:28:25,960
behavior has changed so two tactics one

00:28:22,840 --> 00:28:29,299
design for deployed reality to encrypt

00:28:25,960 --> 00:28:31,520
there's two more that also I think are

00:28:29,299 --> 00:28:34,460
important to realize part of the tool as

00:28:31,520 --> 00:28:36,770
part of the toolkit one is declaring the

00:28:34,460 --> 00:28:41,200
protocol and variants in advance and the

00:28:36,770 --> 00:28:43,640
other one is what we call greasing so

00:28:41,200 --> 00:28:45,440
declaring protocol invariance means

00:28:43,640 --> 00:28:46,820
essentially documenting the properties

00:28:45,440 --> 00:28:49,399
of the protocol that aren't going to

00:28:46,820 --> 00:28:50,510
change even when new versions of the

00:28:49,399 --> 00:28:52,940
protocol are produced

00:28:50,510 --> 00:28:55,399
so this basically represents a promise

00:28:52,940 --> 00:28:57,799
made by the developers of the of the

00:28:55,399 --> 00:29:01,039
protocol itself that certain bits on the

00:28:57,799 --> 00:29:03,409
wire and behaviors associated with with

00:29:01,039 --> 00:29:06,500
the the wire image will be preserved

00:29:03,409 --> 00:29:09,679
through future new versions of the

00:29:06,500 --> 00:29:12,559
protocol the idea is that by documenting

00:29:09,679 --> 00:29:14,899
what can't change you allow anything

00:29:12,559 --> 00:29:17,450
else to change so it gives you some

00:29:14,899 --> 00:29:19,520
flexibility in the future there's a

00:29:17,450 --> 00:29:22,370
section in the TLS 1.3 spec that

00:29:19,520 --> 00:29:24,500
outlines what what these invariants are

00:29:22,370 --> 00:29:26,539
for TLS 1.3 and for quick there's like a

00:29:24,500 --> 00:29:27,649
whole separate document which is talking

00:29:26,539 --> 00:29:30,440
about what these are if you want to

00:29:27,649 --> 00:29:33,140
check it out I think it's interesting to

00:29:30,440 --> 00:29:35,600
come back to the the beginning of the

00:29:33,140 --> 00:29:38,690
talk to consider this through this lens

00:29:35,600 --> 00:29:41,690
of open source versus open standards I

00:29:38,690 --> 00:29:44,360
think that this invariant declaration

00:29:41,690 --> 00:29:47,240
has a much greater chance of being

00:29:44,360 --> 00:29:49,510
useful and and successful if it's

00:29:47,240 --> 00:29:51,520
documented in in a standard

00:29:49,510 --> 00:29:54,400
than if it's like an agreement among

00:29:51,520 --> 00:29:56,770
parties who are jointly developing an

00:29:54,400 --> 00:29:58,630
implementation because generally

00:29:56,770 --> 00:30:01,390
speaking it's much harder to change a

00:29:58,630 --> 00:30:03,370
standard than it is to change an

00:30:01,390 --> 00:30:05,230
implementation and that's kind of the

00:30:03,370 --> 00:30:08,080
whole point of doing a big broad-based

00:30:05,230 --> 00:30:09,850
consensus process is that you know once

00:30:08,080 --> 00:30:11,770
you've inked it you don't expect it to

00:30:09,850 --> 00:30:13,690
change for you know some some long

00:30:11,770 --> 00:30:15,190
period of time so that kind of thing can

00:30:13,690 --> 00:30:16,870
have a lot more force if it's written

00:30:15,190 --> 00:30:20,080
down in a specification than if it's

00:30:16,870 --> 00:30:21,669
just coded so it's kind of an

00:30:20,080 --> 00:30:25,690
interesting difference between the two

00:30:21,669 --> 00:30:28,330
models again now greasing is meant to

00:30:25,690 --> 00:30:30,970
address this problem where protocol

00:30:28,330 --> 00:30:35,830
extension points or version negotiation

00:30:30,970 --> 00:30:37,210
mechanisms go unused in a protocol so if

00:30:35,830 --> 00:30:39,460
you think about the very first time that

00:30:37,210 --> 00:30:40,960
you're going to design a protocol you

00:30:39,460 --> 00:30:42,130
probably at this point know that you

00:30:40,960 --> 00:30:43,540
should build in an extent an

00:30:42,130 --> 00:30:45,910
extensibility mechanism and a version

00:30:43,540 --> 00:30:47,919
ago she ation mechanism but in the first

00:30:45,910 --> 00:30:49,210
instance nobody's using those because

00:30:47,919 --> 00:30:51,429
you're just off the first version and

00:30:49,210 --> 00:30:53,400
there aren't any extension so as a

00:30:51,429 --> 00:30:55,780
result what we found over time is that

00:30:53,400 --> 00:30:58,630
implementations end up being designed

00:30:55,780 --> 00:31:00,340
such that they can't support or can't

00:30:58,630 --> 00:31:03,580
handle these things when they do show up

00:31:00,340 --> 00:31:05,710
later and and similarly middleboxes get

00:31:03,580 --> 00:31:07,240
designed where they they choke when they

00:31:05,710 --> 00:31:09,250
start to see these new things these new

00:31:07,240 --> 00:31:10,390
extensions or new versions they don't

00:31:09,250 --> 00:31:12,040
know what to do with them because in the

00:31:10,390 --> 00:31:14,559
first instance they weren't designed to

00:31:12,040 --> 00:31:16,270
accommodate them even though you know

00:31:14,559 --> 00:31:18,910
all of this was was designed into the

00:31:16,270 --> 00:31:20,290
protocol itself so if we consider these

00:31:18,910 --> 00:31:23,260
extension points as joints that have

00:31:20,290 --> 00:31:25,410
rusted shut then you can think of the

00:31:23,260 --> 00:31:28,330
idea of grease is to ensure that

00:31:25,410 --> 00:31:30,820
implementations that are regularly

00:31:28,330 --> 00:31:32,860
exposed to unknown values in these

00:31:30,820 --> 00:31:36,100
fields will be able to accommodate them

00:31:32,860 --> 00:31:39,640
in the future when actual extensions or

00:31:36,100 --> 00:31:41,860
new versions are are designed so for TLS

00:31:39,640 --> 00:31:43,840
there's a set of grease values that have

00:31:41,860 --> 00:31:45,640
been proposed for all of the extension

00:31:43,840 --> 00:31:48,790
points for the signature algorithms and

00:31:45,640 --> 00:31:50,860
the versions and and everything the

00:31:48,790 --> 00:31:52,870
clients are the proposals that the

00:31:50,860 --> 00:31:55,570
clients would essentially advertise

00:31:52,870 --> 00:31:58,490
these at random and that servers would

00:31:55,570 --> 00:32:01,220
treat them as unknown values

00:31:58,490 --> 00:32:03,580
and the values are chosen to cover the

00:32:01,220 --> 00:32:05,980
full code points face so that

00:32:03,580 --> 00:32:08,809
implementations don't end up you know

00:32:05,980 --> 00:32:10,280
being built such that just this one

00:32:08,809 --> 00:32:12,679
section of the code point space which

00:32:10,280 --> 00:32:16,640
has been greased is the one that they

00:32:12,679 --> 00:32:19,700
ossify around so that's the idea anyway

00:32:16,640 --> 00:32:21,380
with quick the version number field is

00:32:19,700 --> 00:32:23,840
the proposal is to grease the version

00:32:21,380 --> 00:32:26,390
number field by reserving a certain set

00:32:23,840 --> 00:32:29,809
of values across the whole code point

00:32:26,390 --> 00:32:32,090
space that clients can advertise and

00:32:29,809 --> 00:32:34,130
then expect servers to initiate version

00:32:32,090 --> 00:32:36,500
negotiation and servers can advertise

00:32:34,130 --> 00:32:39,860
them and basically they expect clients

00:32:36,500 --> 00:32:41,419
to ignore them so I think you know this

00:32:39,860 --> 00:32:43,130
is like kind of a smaller technique it's

00:32:41,419 --> 00:32:46,070
definitely not any sort of solution on

00:32:43,130 --> 00:32:48,470
its own it's helpful if you if you marry

00:32:46,070 --> 00:32:51,140
this technique to the the process of

00:32:48,470 --> 00:32:53,419
building implementations along with the

00:32:51,140 --> 00:32:56,690
specifications because you can see early

00:32:53,419 --> 00:32:58,970
on where there might be pain points if

00:32:56,690 --> 00:33:01,760
you if you grease a particular extension

00:32:58,970 --> 00:33:03,890
point develop an implementation before

00:33:01,760 --> 00:33:07,549
we finalize the standard and things

00:33:03,890 --> 00:33:09,049
start to break then you know that that

00:33:07,549 --> 00:33:11,360
you need more support for these

00:33:09,049 --> 00:33:13,070
extensibility mechanisms before people

00:33:11,360 --> 00:33:14,720
are gonna be ready to ship this thing so

00:33:13,070 --> 00:33:18,169
it gives you kind of an early an early

00:33:14,720 --> 00:33:19,760
warning so in summary what's the

00:33:18,169 --> 00:33:23,000
strategy here accommodate the deployed

00:33:19,760 --> 00:33:26,150
reality encrypt declare your protocol on

00:33:23,000 --> 00:33:28,850
barians and greece that's kind of what

00:33:26,150 --> 00:33:32,240
the I think the the state of the art of

00:33:28,850 --> 00:33:34,130
the thinking is around preventing future

00:33:32,240 --> 00:33:36,590
protocol ossification and this is on the

00:33:34,130 --> 00:33:41,330
basis of some of these recent design

00:33:36,590 --> 00:33:43,190
efforts so if all of this sounds like

00:33:41,330 --> 00:33:45,830
the most fun in the world to you and you

00:33:43,190 --> 00:33:48,409
cannot wait to get involved in efforts

00:33:45,830 --> 00:33:49,820
such as these in the ITF I'm gonna tell

00:33:48,409 --> 00:33:55,370
you a little bit about how we work and

00:33:49,820 --> 00:33:57,740
how you can get involved so I mentioned

00:33:55,370 --> 00:33:59,360
before the IETF hackathon and I wanted

00:33:57,740 --> 00:34:01,309
to leave with this because I really do

00:33:59,360 --> 00:34:03,860
think at this point for especially for

00:34:01,309 --> 00:34:06,290
people who are developed development

00:34:03,860 --> 00:34:10,609
oriented it's totally the easiest entry

00:34:06,290 --> 00:34:11,740
point into the world of the IETF so the

00:34:10,609 --> 00:34:14,020
ITF hackathon happened

00:34:11,740 --> 00:34:16,629
the weekend at the start of each IETF

00:34:14,020 --> 00:34:20,440
meeting three times per year all around

00:34:16,629 --> 00:34:22,540
the world as I said this Saturday and

00:34:20,440 --> 00:34:26,770
Sunday you can come join us at the

00:34:22,540 --> 00:34:29,350
Hilton in Prague we have already more

00:34:26,770 --> 00:34:32,200
than 275 people registered we have more

00:34:29,350 --> 00:34:34,270
than 40 projects including a bunch of

00:34:32,200 --> 00:34:36,730
projects that have also been featured

00:34:34,270 --> 00:34:40,690
here on the net Davidge Enda pcp

00:34:36,730 --> 00:34:43,690
Prague's ipv6 path MTU discovery stuffs

00:34:40,690 --> 00:34:45,970
lots of quick stuff going on and and

00:34:43,690 --> 00:34:48,190
many many more so I encourage you to to

00:34:45,970 --> 00:34:53,919
check out the projects and the hackathon

00:34:48,190 --> 00:34:57,790
is free so no fees required there's food

00:34:53,919 --> 00:35:01,180
there's beer there's there's a good time

00:34:57,790 --> 00:35:02,650
to be had it's not your typical kind of

00:35:01,180 --> 00:35:04,780
hackathon it's very much more

00:35:02,650 --> 00:35:06,820
collaborative style than it is a

00:35:04,780 --> 00:35:08,619
competitive style so the idea is that

00:35:06,820 --> 00:35:10,480
you can walk in find an interesting

00:35:08,619 --> 00:35:13,330
product to work on find other

00:35:10,480 --> 00:35:15,160
like-minded people and and maybe learn

00:35:13,330 --> 00:35:18,880
something new and and maybe contribute

00:35:15,160 --> 00:35:21,820
something back you also don't need to

00:35:18,880 --> 00:35:25,960
know anything about the IETF or ITF

00:35:21,820 --> 00:35:28,119
protocols we have organizers there who

00:35:25,960 --> 00:35:30,910
can help help you find a project help

00:35:28,119 --> 00:35:32,440
introduce you to people who are IETF

00:35:30,910 --> 00:35:34,390
veterans who can explain to you what's

00:35:32,440 --> 00:35:36,340
going on and can get you up to speed so

00:35:34,390 --> 00:35:38,619
I really encourage you to check it out

00:35:36,340 --> 00:35:43,750
if not this time then maybe some some

00:35:38,619 --> 00:35:47,470
future hackathon just a little bit about

00:35:43,750 --> 00:35:49,109
how the ITF is organized so we have we

00:35:47,470 --> 00:35:52,300
organized our work into working groups

00:35:49,109 --> 00:35:54,040
which are fairly small and focused in

00:35:52,300 --> 00:35:56,109
terms of the scope of the work that they

00:35:54,040 --> 00:35:57,430
cover typically some of the older

00:35:56,109 --> 00:35:59,200
working groups are a little bit bigger

00:35:57,430 --> 00:36:00,520
in scope but more recently we've been

00:35:59,200 --> 00:36:02,350
creating working groups that are a

00:36:00,520 --> 00:36:04,780
little a little bit more focused and

00:36:02,350 --> 00:36:08,140
those working groups divided into six

00:36:04,780 --> 00:36:10,330
different technical areas so internet

00:36:08,140 --> 00:36:13,840
routing ops and management transport

00:36:10,330 --> 00:36:15,340
apps and real time and security you can

00:36:13,840 --> 00:36:17,109
see some examples those are just

00:36:15,340 --> 00:36:18,850
examples of different protocols that

00:36:17,109 --> 00:36:20,590
have been developed or are currently

00:36:18,850 --> 00:36:21,580
being developed in each area so you can

00:36:20,590 --> 00:36:23,380
kind of get a sense

00:36:21,580 --> 00:36:27,150
of you know if the things that you're

00:36:23,380 --> 00:36:29,320
interested in where they might lie and

00:36:27,150 --> 00:36:32,410
each of these working groups that we

00:36:29,320 --> 00:36:35,170
have about 120 of them they have a

00:36:32,410 --> 00:36:36,790
mailing list many of them are now using

00:36:35,170 --> 00:36:42,430
github repositories to do their

00:36:36,790 --> 00:36:43,840
collaborative work and they have they

00:36:42,430 --> 00:36:46,050
sort of process documents which I'll

00:36:43,840 --> 00:36:48,670
which I'll talk about in a second

00:36:46,050 --> 00:36:50,650
separate from this you may also be some

00:36:48,670 --> 00:36:54,070
of you may be familiar with the IRT F

00:36:50,650 --> 00:36:56,800
the internet research task force which

00:36:54,070 --> 00:37:00,490
is our sister organization not pictured

00:36:56,800 --> 00:37:02,440
on the slide but the IRT F organizes

00:37:00,490 --> 00:37:06,040
research groups I think there's about 15

00:37:02,440 --> 00:37:08,820
or 20 of them and those are a little bit

00:37:06,040 --> 00:37:11,290
more focused on as you might expect

00:37:08,820 --> 00:37:13,720
research more experimental kind of

00:37:11,290 --> 00:37:15,370
protocol development but some of the

00:37:13,720 --> 00:37:16,720
work that you may have heard about this

00:37:15,370 --> 00:37:19,000
week or that they may be familiar with

00:37:16,720 --> 00:37:20,770
will happen in the IRT F research groups

00:37:19,000 --> 00:37:26,470
and they meet at the same time during

00:37:20,770 --> 00:37:28,360
IETF meetings as well so if you wanted

00:37:26,470 --> 00:37:31,560
to come in and and start to get your

00:37:28,360 --> 00:37:33,310
hands a little bit dirty in IETF work

00:37:31,560 --> 00:37:35,590
there's a few different things that

00:37:33,310 --> 00:37:38,440
might be useful to know about to figure

00:37:35,590 --> 00:37:41,320
out how would you get started so here

00:37:38,440 --> 00:37:42,970
you can see the IETF data tracker which

00:37:41,320 --> 00:37:44,980
is where we keep track of all of our

00:37:42,970 --> 00:37:46,990
working groups and the documents that

00:37:44,980 --> 00:37:50,080
we're producing this is just an example

00:37:46,990 --> 00:37:51,550
from the from the quick working group so

00:37:50,080 --> 00:37:53,110
as I said everywhere who group has a

00:37:51,550 --> 00:37:55,060
mailing list if you're interested in a

00:37:53,110 --> 00:37:56,230
particular technology joining joining

00:37:55,060 --> 00:38:00,820
the mailing list is probably a good

00:37:56,230 --> 00:38:03,610
thing to do you can also see the tools

00:38:00,820 --> 00:38:06,160
that they use for collaboration so not

00:38:03,610 --> 00:38:08,530
every group has these but many of the

00:38:06,160 --> 00:38:10,000
groups do you can join the slack channel

00:38:08,530 --> 00:38:14,140
well you can you can find their stuff on

00:38:10,000 --> 00:38:15,640
github and then finally you can find the

00:38:14,140 --> 00:38:16,870
people and I would really encourage you

00:38:15,640 --> 00:38:18,370
to do this if there's if there's

00:38:16,870 --> 00:38:20,380
anything at all that interests you in

00:38:18,370 --> 00:38:22,330
the IETF like sending a targeted email

00:38:20,380 --> 00:38:24,610
to one of the people that you can find

00:38:22,330 --> 00:38:27,610
here in the IETF data tracker is a great

00:38:24,610 --> 00:38:30,100
way to just get an introduction get some

00:38:27,610 --> 00:38:32,110
guidance about you know exactly what to

00:38:30,100 --> 00:38:33,860
do or how to start or what to read or

00:38:32,110 --> 00:38:37,040
who else to talk to

00:38:33,860 --> 00:38:38,210
it's it's really a community

00:38:37,040 --> 00:38:39,680
I mean that's what we call it all the

00:38:38,210 --> 00:38:42,620
time the ietf community that's what it

00:38:39,680 --> 00:38:43,580
is so I would encourage you to you know

00:38:42,620 --> 00:38:45,170
find the people who are knowledgeable

00:38:43,580 --> 00:38:50,270
about the area that you're interested in

00:38:45,170 --> 00:38:51,590
and reach out to them directly I think I

00:38:50,270 --> 00:38:54,260
guess one other thing I would say about

00:38:51,590 --> 00:38:55,250
that in particular you know the ITF has

00:38:54,260 --> 00:38:57,950
been around for more than 30 years

00:38:55,250 --> 00:38:59,570
there's a lot of history there's a lot

00:38:57,950 --> 00:39:02,600
of ideas that have been proposed before

00:38:59,570 --> 00:39:03,830
and there is sometimes hostility to

00:39:02,600 --> 00:39:05,690
people who come and propose the same

00:39:03,830 --> 00:39:08,030
idea again even if they have no idea

00:39:05,690 --> 00:39:09,500
that it was proposed before so reaching

00:39:08,030 --> 00:39:10,790
out to people in advance trying to

00:39:09,500 --> 00:39:13,370
understand the lay of the land

00:39:10,790 --> 00:39:14,480
what what what context what history do

00:39:13,370 --> 00:39:16,520
you need to know in order to

00:39:14,480 --> 00:39:19,820
thoughtfully engage with the standards

00:39:16,520 --> 00:39:23,170
process it can be useful to talk to

00:39:19,820 --> 00:39:23,170
people first just to get a sense of that

00:39:24,310 --> 00:39:28,700
so if you start to engage in one of

00:39:27,320 --> 00:39:31,010
these working groups what you'll see is

00:39:28,700 --> 00:39:33,460
that really the unit of the discussion

00:39:31,010 --> 00:39:36,770
is what we call an internet draft

00:39:33,460 --> 00:39:38,420
example I think this is a technology was

00:39:36,770 --> 00:39:42,320
on the agenda here at net dev earlier

00:39:38,420 --> 00:39:45,380
this week so internet drafts anybody can

00:39:42,320 --> 00:39:48,170
write one anybody can write one you can

00:39:45,380 --> 00:39:50,330
write one up submit it to our repository

00:39:48,170 --> 00:39:51,680
it's fairly straightforward a lot of

00:39:50,330 --> 00:39:53,000
people who write a draft for the first

00:39:51,680 --> 00:39:55,100
time will collaborate with people who

00:39:53,000 --> 00:39:56,780
have done it before just to kind of

00:39:55,100 --> 00:39:59,630
understand the lay of the land a little

00:39:56,780 --> 00:40:02,300
bit better and this is basically just a

00:39:59,630 --> 00:40:03,950
draft specification so somebody who

00:40:02,300 --> 00:40:06,830
eventually wants their thing to be

00:40:03,950 --> 00:40:09,980
standardized as an RFC all our FCS start

00:40:06,830 --> 00:40:11,210
out as internet traps one thing I just

00:40:09,980 --> 00:40:13,730
wanted to point out because it's an

00:40:11,210 --> 00:40:16,430
often a point of confusion is the naming

00:40:13,730 --> 00:40:17,720
convention for internet drafts so here

00:40:16,430 --> 00:40:20,360
what you're looking at is what we call

00:40:17,720 --> 00:40:24,230
an individual draft which means that

00:40:20,360 --> 00:40:26,570
it's been proposed by some individual or

00:40:24,230 --> 00:40:29,660
some set of individuals it hasn't been

00:40:26,570 --> 00:40:31,850
formally adopted as a work item of any

00:40:29,660 --> 00:40:33,590
IETF working group yet so you can see

00:40:31,850 --> 00:40:36,770
that it's named with the last name of

00:40:33,590 --> 00:40:39,770
one of the authors and the working group

00:40:36,770 --> 00:40:43,190
to which it hopes to one day be adopted

00:40:39,770 --> 00:40:45,320
as opposed to if you were to see a

00:40:43,190 --> 00:40:45,819
working group draft it would not have

00:40:45,320 --> 00:40:47,199
the name

00:40:45,819 --> 00:40:49,299
author in it it would just have the name

00:40:47,199 --> 00:40:50,529
of the working group in it so if you're

00:40:49,299 --> 00:40:52,180
out there on the internet reading drafts

00:40:50,529 --> 00:40:54,160
you might take note of the naming

00:40:52,180 --> 00:40:55,989
convention in order to get try to get

00:40:54,160 --> 00:40:58,449
some sense of like how far along in the

00:40:55,989 --> 00:41:00,309
process is this document typically a

00:40:58,449 --> 00:41:02,259
document with an individual's name in it

00:41:00,309 --> 00:41:05,699
is not as far along as a document that

00:41:02,259 --> 00:41:05,699
doesn't have an individual's name in it

00:41:06,479 --> 00:41:10,420
another really useful thing to

00:41:08,229 --> 00:41:14,259
understand is that not all rfcs are

00:41:10,420 --> 00:41:18,309
created equal so there are multiple

00:41:14,259 --> 00:41:20,499
different kinds of RFC's and only some

00:41:18,309 --> 00:41:24,039
of them are like standards that you you

00:41:20,499 --> 00:41:28,319
would want to code to so this one that

00:41:24,039 --> 00:41:31,509
you're looking at is is HTTP 1 1 RFC

00:41:28,319 --> 00:41:33,849
7230 so this is what we call a proposed

00:41:31,509 --> 00:41:36,309
standard which is very confusing lea

00:41:33,849 --> 00:41:38,079
named because most of the things that

00:41:36,309 --> 00:41:39,849
you think of as standards on the

00:41:38,079 --> 00:41:41,229
Internet are proposed standards they're

00:41:39,849 --> 00:41:44,920
not really proposed they've been

00:41:41,229 --> 00:41:46,239
finalized but we have a lot of history

00:41:44,920 --> 00:41:50,049
and baggage in the idea which is why

00:41:46,239 --> 00:41:51,789
they're called for both standards but in

00:41:50,049 --> 00:41:54,880
any event they've resolved you know

00:41:51,789 --> 00:41:56,559
known design choices there's been

00:41:54,880 --> 00:41:59,410
significant community review of these

00:41:56,559 --> 00:42:01,269
things they are stable and wide

00:41:59,410 --> 00:42:04,499
deployment of proposed standards is very

00:42:01,269 --> 00:42:07,420
much encouraged then we have

00:42:04,499 --> 00:42:09,869
experimental standards where protocol

00:42:07,420 --> 00:42:12,249
might still be somewhat in development

00:42:09,869 --> 00:42:15,309
but ready for experimentation and

00:42:12,249 --> 00:42:17,699
sometimes people will publish an RFC as

00:42:15,309 --> 00:42:21,099
experimental first to get some of that

00:42:17,699 --> 00:42:23,769
experimental experience and aim later to

00:42:21,099 --> 00:42:26,469
upgrade it to a proposed standard so for

00:42:23,769 --> 00:42:28,559
example BGP followed this path it was

00:42:26,469 --> 00:42:31,059
originally specified as experimental

00:42:28,559 --> 00:42:32,920
originally there's a version of BGP

00:42:31,059 --> 00:42:35,619
which was specified as experimental and

00:42:32,920 --> 00:42:38,619
eventually it was upgraded into two

00:42:35,619 --> 00:42:41,489
proposed standard and then lastly we

00:42:38,619 --> 00:42:43,749
have informational stant documents which

00:42:41,489 --> 00:42:44,890
which don't really specify standards of

00:42:43,749 --> 00:42:47,589
any kind they're just general

00:42:44,890 --> 00:42:50,049
information for for the benefit of the

00:42:47,589 --> 00:42:51,720
community so you will often see things

00:42:50,049 --> 00:42:54,559
like use cases

00:42:51,720 --> 00:42:57,869
or like operational considerations

00:42:54,559 --> 00:43:02,539
surrounding a particular protocol those

00:42:57,869 --> 00:43:04,559
will be published as informational RFC s

00:43:02,539 --> 00:43:07,380
so I talked a little bit about the

00:43:04,559 --> 00:43:11,789
hackathon a little bit about internet

00:43:07,380 --> 00:43:13,979
drafts and and working groups but

00:43:11,789 --> 00:43:16,229
there's also some other ways that you

00:43:13,979 --> 00:43:18,150
can engage with the IETF community or

00:43:16,229 --> 00:43:20,579
think about why you might want to or

00:43:18,150 --> 00:43:22,619
what you might get out of it so one

00:43:20,579 --> 00:43:26,940
thing is that you can just you can

00:43:22,619 --> 00:43:28,829
discover some like-minded people that's

00:43:26,940 --> 00:43:30,420
part of the beauty of the IETF you can

00:43:28,829 --> 00:43:32,430
come and people will be very interested

00:43:30,420 --> 00:43:33,869
in your implementation experience like

00:43:32,430 --> 00:43:35,369
what you've what you've seen in the wild

00:43:33,869 --> 00:43:37,680
like what your experiences have been

00:43:35,369 --> 00:43:39,809
particularly with implementing protocols

00:43:37,680 --> 00:43:41,249
where those people design them but they

00:43:39,809 --> 00:43:43,559
don't know that much about what's

00:43:41,249 --> 00:43:46,200
happening in an implementation land that

00:43:43,559 --> 00:43:48,089
will very much be valued and so just

00:43:46,200 --> 00:43:49,979
coming to to kind of get a sense of

00:43:48,089 --> 00:43:52,380
people maybe find some other people who

00:43:49,979 --> 00:43:54,869
are working in the same area as you can

00:43:52,380 --> 00:43:56,789
be quite beneficial I'm not gonna say

00:43:54,869 --> 00:43:57,349
that we are uniformly friendly in the

00:43:56,789 --> 00:44:02,219
IETF

00:43:57,349 --> 00:44:03,359
but nobody actually bites so you know

00:44:02,219 --> 00:44:06,269
it's it's a community that's worth

00:44:03,359 --> 00:44:09,599
exploring the other cool thing is that

00:44:06,269 --> 00:44:12,809
we have some really deep and extensive

00:44:09,599 --> 00:44:16,489
expertise in particular areas so namely

00:44:12,809 --> 00:44:20,279
security privacy congestion control

00:44:16,489 --> 00:44:22,380
operations all proposed standards go

00:44:20,279 --> 00:44:24,390
through a process of community-wide

00:44:22,380 --> 00:44:27,779
review where they get specific reviews

00:44:24,390 --> 00:44:30,450
for those aspects and and many others

00:44:27,779 --> 00:44:33,049
and in general we just have sort of a

00:44:30,450 --> 00:44:35,430
locus of experts on some of those issues

00:44:33,049 --> 00:44:37,979
so I think you might be interesting to

00:44:35,430 --> 00:44:39,630
think about even if you don't care about

00:44:37,979 --> 00:44:41,249
standardizing your thing but you have a

00:44:39,630 --> 00:44:43,380
cool idea and you kind of want to get

00:44:41,249 --> 00:44:46,229
some feedback about some of those

00:44:43,380 --> 00:44:47,759
aspects like you're not really sure what

00:44:46,229 --> 00:44:49,440
the security properties are of this

00:44:47,759 --> 00:44:50,910
thing that you've designed but you you

00:44:49,440 --> 00:44:53,430
could really use some help to understand

00:44:50,910 --> 00:44:55,469
that or like get some kind of review of

00:44:53,430 --> 00:44:57,119
that thing that you're working on I

00:44:55,469 --> 00:44:59,160
think it might be interesting to think

00:44:57,119 --> 00:45:00,900
about would there be a way for us to do

00:44:59,160 --> 00:45:03,329
that in the IETF it's not something that

00:45:00,900 --> 00:45:04,170
we do very often right now where

00:45:03,329 --> 00:45:06,030
somebody comes instead

00:45:04,170 --> 00:45:10,530
can I just get the Crosse area review

00:45:06,030 --> 00:45:12,030
part but but not the RFC output but it

00:45:10,530 --> 00:45:15,990
might be something interesting to think

00:45:12,030 --> 00:45:17,730
about or or explore the other thing that

00:45:15,990 --> 00:45:21,809
we're doing that we started doing

00:45:17,730 --> 00:45:24,150
recently is to support to specifically

00:45:21,809 --> 00:45:26,490
support the development of tooling to

00:45:24,150 --> 00:45:28,740
help get IETF standards further deployed

00:45:26,490 --> 00:45:31,740
so right now we're doing this with yang

00:45:28,740 --> 00:45:33,720
the the data modeling language we have

00:45:31,740 --> 00:45:36,030
this tool the set of tools on the yang

00:45:33,720 --> 00:45:38,040
catalog and the ITF is directly

00:45:36,030 --> 00:45:40,740
supporting the development to this as an

00:45:38,040 --> 00:45:42,630
open source project where the yang

00:45:40,740 --> 00:45:44,609
catalog helps people visualize yang

00:45:42,630 --> 00:45:46,109
models understand how what the

00:45:44,609 --> 00:45:50,010
relationships are between them and the

00:45:46,109 --> 00:45:51,990
dependencies to validate models and and

00:45:50,010 --> 00:45:54,809
that applies not just to models that are

00:45:51,990 --> 00:45:57,359
produced in IETF standards but also kind

00:45:54,809 --> 00:45:59,460
of across the industry and so if there's

00:45:57,359 --> 00:46:01,020
that kind of thing that you can think of

00:45:59,460 --> 00:46:03,720
like hey it would be really great if we

00:46:01,020 --> 00:46:05,119
had more tooling support in order to you

00:46:03,720 --> 00:46:06,900
know get this protocol out the door

00:46:05,119 --> 00:46:08,819
that's something that we can also

00:46:06,900 --> 00:46:14,990
entertain as well and I would be

00:46:08,819 --> 00:46:14,990
interested to hear ideas about that so

00:46:16,099 --> 00:46:19,740
I've included here just a bunch of

00:46:18,510 --> 00:46:23,700
references to various different things

00:46:19,740 --> 00:46:26,339
that I talked about today and you can

00:46:23,700 --> 00:46:30,780
look at those later I would be thrilled

00:46:26,339 --> 00:46:33,200
to get questions comments Tomatoes give

00:46:30,780 --> 00:46:33,200
you your time back

00:46:53,620 --> 00:47:04,370
is that working you know great hi I'm

00:46:56,600 --> 00:47:07,730
Dave Todd over here yes nice to meet you

00:47:04,370 --> 00:47:10,340
finally on quick I've always wanted to

00:47:07,730 --> 00:47:13,040
get the history always straight quick

00:47:10,340 --> 00:47:15,650
was started by Jim Raskin a really

00:47:13,040 --> 00:47:17,930
brilliant renegade engineer and we

00:47:15,650 --> 00:47:23,360
analyzed all the properties at TCP and

00:47:17,930 --> 00:47:26,480
through 13 Vision revisions deployed

00:47:23,360 --> 00:47:29,590
throat that buoyed the code until it hit

00:47:26,480 --> 00:47:29,590
an ITF standard

00:47:45,450 --> 00:47:52,630
okay so I have one experience but I ATF

00:47:50,440 --> 00:47:56,380
like we just from a point of view of a

00:47:52,630 --> 00:48:00,520
kernel developer when I was implementing

00:47:56,380 --> 00:48:03,910
a standard draft standard for to the

00:48:00,520 --> 00:48:09,460
kernel and I found I had some concerns

00:48:03,910 --> 00:48:12,940
or find some issues with the the draft

00:48:09,460 --> 00:48:15,190
standard and yeah I go to the mailing

00:48:12,940 --> 00:48:18,369
list send a question there I can't like

00:48:15,190 --> 00:48:21,010
reply okay yeah we might work on that or

00:48:18,369 --> 00:48:23,500
we might do something with that and yeah

00:48:21,010 --> 00:48:26,200
indeed it was like partially addressed

00:48:23,500 --> 00:48:28,329
then I found another issue wrote to the

00:48:26,200 --> 00:48:30,849
semi linguist god no reply so my

00:48:28,329 --> 00:48:34,660
question is from point of view of like

00:48:30,849 --> 00:48:36,579
someone not really in the process and

00:48:34,660 --> 00:48:38,559
not understanding the process and so on

00:48:36,579 --> 00:48:40,930
it was like black box to me I did not

00:48:38,559 --> 00:48:44,349
really know what to do what should I

00:48:40,930 --> 00:48:46,630
more to address my concerns and like how

00:48:44,349 --> 00:48:49,240
to influence the standard without going

00:48:46,630 --> 00:48:51,339
anywhere in person because like if

00:48:49,240 --> 00:48:52,750
you're going on your own like on your

00:48:51,339 --> 00:48:55,180
own budget that's like not always

00:48:52,750 --> 00:48:59,109
feasible so what would be your advice

00:48:55,180 --> 00:49:00,760
for me in situation yeah so I don't

00:48:59,109 --> 00:49:03,819
think that's that's a terribly uncommon

00:49:00,760 --> 00:49:05,020
experience a couple things first you

00:49:03,819 --> 00:49:09,010
don't you definitely don't have to come

00:49:05,020 --> 00:49:12,130
in person but as I noted targeted

00:49:09,010 --> 00:49:13,720
outreach to particular people so in this

00:49:12,130 --> 00:49:17,530
case like the working group chairs

00:49:13,720 --> 00:49:21,640
potentially could be a follow on step if

00:49:17,530 --> 00:49:23,230
you don't get a response the difficulty

00:49:21,640 --> 00:49:24,490
with the IETF in particular is that it's

00:49:23,230 --> 00:49:26,920
all volunteers

00:49:24,490 --> 00:49:28,569
so everybody is there on their own dime

00:49:26,920 --> 00:49:31,599
or you know on their employers dime

00:49:28,569 --> 00:49:33,460
essentially and if it's not you know

00:49:31,599 --> 00:49:35,710
part of their workflow to care about the

00:49:33,460 --> 00:49:38,140
issue that you raised then you might not

00:49:35,710 --> 00:49:40,180
get an answer and that's that's just

00:49:38,140 --> 00:49:43,059
just like kind of the way that it works

00:49:40,180 --> 00:49:46,359
because it's everybody is there on their

00:49:43,059 --> 00:49:47,349
own time essentially so it's you know

00:49:46,359 --> 00:49:50,880
it's something that we have to deal with

00:49:47,349 --> 00:49:52,650
but yeah kind of escalating up to

00:49:50,880 --> 00:49:55,200
you know sending an individual email to

00:49:52,650 --> 00:49:57,450
somebody who appears to be in charge of

00:49:55,200 --> 00:50:00,450
the group or the list or what have you

00:49:57,450 --> 00:50:01,770
it's probably the next right step if you

00:50:00,450 --> 00:50:04,440
if you don't get a response out the

00:50:01,770 --> 00:50:05,730
first time but mailing the list with

00:50:04,440 --> 00:50:07,080
your concerns was definitely you know

00:50:05,730 --> 00:50:12,660
the right thing to do in the first

00:50:07,080 --> 00:50:14,940
instance yeah I mean this is again to

00:50:12,660 --> 00:50:16,740
the part about the timelines like this

00:50:14,940 --> 00:50:18,390
is this is part of why we we can't ever

00:50:16,740 --> 00:50:21,060
guarantee like this will be done on X

00:50:18,390 --> 00:50:23,310
date because you know unlike other

00:50:21,060 --> 00:50:24,720
consortio or whatever it's all volunteer

00:50:23,310 --> 00:50:26,340
based if the person who's authoring

00:50:24,720 --> 00:50:28,260
something just disappears off the face

00:50:26,340 --> 00:50:36,720
of the earth like we can't make it we

00:50:28,260 --> 00:50:47,240
can't cause it to conclude what is the

00:50:36,720 --> 00:50:49,410
ROI sure so I think I mean it's gonna be

00:50:47,240 --> 00:50:51,180
use case specifics so there's certainly

00:50:49,410 --> 00:50:53,580
some like areas where you don't need

00:50:51,180 --> 00:50:56,880
standards but I think there's a there

00:50:53,580 --> 00:50:59,220
are some other benefits right so if you

00:50:56,880 --> 00:51:01,260
if you have a design and you do want to

00:50:59,220 --> 00:51:03,210
like socialize the properties of it if

00:51:01,260 --> 00:51:10,590
you want to get this kind of review I'm

00:51:03,210 --> 00:51:12,230
sorry well I mean we have a we have a

00:51:10,590 --> 00:51:14,700
bunch of people who are coming to do

00:51:12,230 --> 00:51:16,350
data center focused work of different

00:51:14,700 --> 00:51:17,610
kinds at the IETF so it does matter to

00:51:16,350 --> 00:51:18,840
some people apparently like not

00:51:17,610 --> 00:51:22,260
everybody is single sourcing everything

00:51:18,840 --> 00:51:24,180
in their data center but again it's it's

00:51:22,260 --> 00:51:25,590
not only about the value of the IETF is

00:51:24,180 --> 00:51:28,050
not only about interrupts right it can

00:51:25,590 --> 00:51:29,490
be about broad review it can be about

00:51:28,050 --> 00:51:31,860
you know getting more eyes on your on

00:51:29,490 --> 00:51:33,210
the thing that you're designing it can

00:51:31,860 --> 00:51:37,560
be about learning what other people are

00:51:33,210 --> 00:51:38,940
doing it's not only like if if I get I

00:51:37,560 --> 00:51:42,360
have to get my thing standardized in

00:51:38,940 --> 00:51:45,080
otherwise I don't care follow up with a

00:51:42,360 --> 00:51:45,080
common doctor

00:51:56,560 --> 00:52:01,030
I think maybe the question you're asking

00:51:58,570 --> 00:52:04,990
is in the context of ITF because your

00:52:01,030 --> 00:52:09,310
best case is a de facto standard or pre

00:52:04,990 --> 00:52:11,260
standard draft right what are there ways

00:52:09,310 --> 00:52:14,020
in which it could be made into something

00:52:11,260 --> 00:52:18,730
more actionable so that if you have an

00:52:14,020 --> 00:52:21,220
ITF agreement right you have the broad

00:52:18,730 --> 00:52:24,130
view how does it go into the next phase

00:52:21,220 --> 00:52:27,340
does it I mean its implementation

00:52:24,130 --> 00:52:29,560
requirement or can can communities like

00:52:27,340 --> 00:52:34,120
Linux be used such that those things

00:52:29,560 --> 00:52:36,310
become enforced at some point so so I

00:52:34,120 --> 00:52:38,260
talked about this this moniker proposed

00:52:36,310 --> 00:52:40,000
standard right so there's another label

00:52:38,260 --> 00:52:41,620
which I didn't even put up there which

00:52:40,000 --> 00:52:43,390
is called internet standard which is

00:52:41,620 --> 00:52:44,830
like the next level in which you must

00:52:43,390 --> 00:52:47,590
demonstrate interoperability between

00:52:44,830 --> 00:52:50,590
multiple implementations so that Avenue

00:52:47,590 --> 00:52:52,120
is available but typically there's been

00:52:50,590 --> 00:52:53,860
very few instances where anybody cared

00:52:52,120 --> 00:52:56,470
to use it because it requires so much

00:52:53,860 --> 00:52:57,760
effort and the other thing we say in the

00:52:56,470 --> 00:53:00,250
ITF is that we are not the protocol

00:52:57,760 --> 00:53:01,780
police right so it it's part of kind of

00:53:00,250 --> 00:53:03,700
the scoping of our role like we put

00:53:01,780 --> 00:53:05,350
these things out into the world we're

00:53:03,700 --> 00:53:07,870
trying to design them so that they get

00:53:05,350 --> 00:53:09,340
deployed and used but we can't make

00:53:07,870 --> 00:53:12,280
anybody use them and we don't want to

00:53:09,340 --> 00:53:13,870
try to so this I think the kind of

00:53:12,280 --> 00:53:15,310
informal collaboration like getting

00:53:13,870 --> 00:53:19,050
people involved who are gonna go deploy

00:53:15,310 --> 00:53:21,700
is is kind of the best model for us

00:53:19,050 --> 00:53:24,280
thank you for the talk of this thing it

00:53:21,700 --> 00:53:26,040
was quite a nice thing to do here

00:53:24,280 --> 00:53:28,810
especially given that Devon IETF are

00:53:26,040 --> 00:53:31,510
happening back-to-back you suggest an

00:53:28,810 --> 00:53:32,170
alternative tagline bad ideas and

00:53:31,510 --> 00:53:34,510
running code

00:53:32,170 --> 00:53:36,930
I'm not going to publicize that but it

00:53:34,510 --> 00:53:36,930
sounds wonderful

00:53:37,420 --> 00:53:41,920
the the running code part of that which

00:53:39,760 --> 00:53:44,260
you spoke to I think is very instructive

00:53:41,920 --> 00:53:46,120
that it's not just about compiling code

00:53:44,260 --> 00:53:48,640
it's not about code that can run

00:53:46,120 --> 00:53:52,240
it's about code that is running on a

00:53:48,640 --> 00:53:53,980
global scale and that's super helpful to

00:53:52,240 --> 00:53:55,720
mention and to discuss because I think

00:53:53,980 --> 00:53:57,100
it's it's one of those one of those

00:53:55,720 --> 00:53:59,320
points that this community is good at

00:53:57,100 --> 00:54:00,530
its producing code and actually getting

00:53:59,320 --> 00:54:03,290
it running

00:54:00,530 --> 00:54:05,780
and we've seen some tension with that in

00:54:03,290 --> 00:54:09,230
the past though between that and the IDF

00:54:05,780 --> 00:54:11,630
for example people who have 3G just

00:54:09,230 --> 00:54:13,160
mentioned de facto standards because the

00:54:11,630 --> 00:54:14,870
codes running everywhere but there is no

00:54:13,160 --> 00:54:17,090
standard for it

00:54:14,870 --> 00:54:19,400
one example it's not the best example of

00:54:17,090 --> 00:54:21,440
it is cubic right it's running

00:54:19,400 --> 00:54:23,630
everywhere not documented anywhere an

00:54:21,440 --> 00:54:25,250
Internet standard the only Internet

00:54:23,630 --> 00:54:30,440
condition controller that we ever had a

00:54:25,250 --> 00:54:33,350
document for was Reno and we now have a

00:54:30,440 --> 00:54:35,660
document for cubic but that was almost

00:54:33,350 --> 00:54:37,700
eight years after it had become

00:54:35,660 --> 00:54:39,020
effectively a de-facto standard on the

00:54:37,700 --> 00:54:41,030
public internet because it was the

00:54:39,020 --> 00:54:42,860
default condition controller in Linux

00:54:41,030 --> 00:54:46,160
now many in the community may not agree

00:54:42,860 --> 00:54:48,140
that cubic is the best answer to the

00:54:46,160 --> 00:54:49,400
congestion control I certainly don't and

00:54:48,140 --> 00:54:53,090
I'm happy to have that battle with

00:54:49,400 --> 00:54:54,920
anybody who wants but there's a gap

00:54:53,090 --> 00:54:56,720
there there's a gap between de facto

00:54:54,920 --> 00:54:59,120
standards and what we as a community

00:54:56,720 --> 00:55:02,090
believe is the best standard or what we

00:54:59,120 --> 00:55:03,680
want to push as a standard can you speak

00:55:02,090 --> 00:55:05,150
to the tension a little bit I know that

00:55:03,680 --> 00:55:08,120
there are best current practice

00:55:05,150 --> 00:55:11,350
documents but those are again reflective

00:55:08,120 --> 00:55:15,770
over the best community not just

00:55:11,350 --> 00:55:18,790
existing practice yeah so I think the

00:55:15,770 --> 00:55:20,870
thing is like like as I said at the top

00:55:18,790 --> 00:55:23,750
there's a variety of different cases

00:55:20,870 --> 00:55:27,070
right if it's the case that it would

00:55:23,750 --> 00:55:30,380
have been better for the internet if the

00:55:27,070 --> 00:55:32,510
design of Kubik had been you know

00:55:30,380 --> 00:55:35,900
standardized first or standardized in

00:55:32,510 --> 00:55:38,420
tandem with people who are implementing

00:55:35,900 --> 00:55:41,060
it and deploying it then that's like

00:55:38,420 --> 00:55:46,450
that's a good lesson right which is to

00:55:41,060 --> 00:55:50,300
say can we identify these cases where

00:55:46,450 --> 00:55:51,710
it's obvious after the fact that there

00:55:50,300 --> 00:55:52,820
were design flaws there was something

00:55:51,710 --> 00:55:54,800
that could have benefitted from having

00:55:52,820 --> 00:55:57,110
liked them more of an open process to

00:55:54,800 --> 00:55:59,080
actually write down what is this thing

00:55:57,110 --> 00:56:01,550
doing so that then other people who were

00:55:59,080 --> 00:56:02,870
implementing it could do it right or

00:56:01,550 --> 00:56:05,090
could benefit from everything that had

00:56:02,870 --> 00:56:07,070
been learned through that process but

00:56:05,090 --> 00:56:08,780
it's not it's not going to work every

00:56:07,070 --> 00:56:12,680
time like it's not even appropriate

00:56:08,780 --> 00:56:13,580
every time right and so I think there's

00:56:12,680 --> 00:56:15,020
this sense of like

00:56:13,580 --> 00:56:17,720
you can you can like cherry-pick your

00:56:15,020 --> 00:56:19,760
examples and say like aha like this is

00:56:17,720 --> 00:56:22,430
this shows that like you don't need

00:56:19,760 --> 00:56:24,620
standards but I just I just don't think

00:56:22,430 --> 00:56:26,690
it's one size fits all so maybe the

00:56:24,620 --> 00:56:28,850
question is like what are the properties

00:56:26,690 --> 00:56:31,310
of those cases where it wouldn't make

00:56:28,850 --> 00:56:32,390
sense to try and induce people who you

00:56:31,310 --> 00:56:34,280
start to see them early on an

00:56:32,390 --> 00:56:35,660
implementation effort and say hey this

00:56:34,280 --> 00:56:37,010
is really something we're like can we at

00:56:35,660 --> 00:56:39,560
least like write down the spec and see

00:56:37,010 --> 00:56:42,260
what happens so that's that's one thing

00:56:39,560 --> 00:56:44,510
but the other thing is like I'm I'm very

00:56:42,260 --> 00:56:46,700
interested in making the ITF process

00:56:44,510 --> 00:56:49,580
more functional for people who want to

00:56:46,700 --> 00:56:51,920
get good ideas deployed right and if

00:56:49,580 --> 00:56:54,410
it's like our processes is too

00:56:51,920 --> 00:56:58,160
cumbersome or you know it takes too long

00:56:54,410 --> 00:56:59,540
or it's opaque or all these things like

00:56:58,160 --> 00:57:02,180
those are all things that I would love

00:56:59,540 --> 00:57:03,740
to try and like improve upon and get

00:57:02,180 --> 00:57:05,510
feedback about how we can improve upon

00:57:03,740 --> 00:57:07,430
those things we cannot fix everything

00:57:05,510 --> 00:57:09,200
again like agreeing something with a

00:57:07,430 --> 00:57:11,480
thousand of your closest friends is is

00:57:09,200 --> 00:57:15,890
always gonna be harder than sitting in

00:57:11,480 --> 00:57:16,790
in your house and writing code but but

00:57:15,890 --> 00:57:20,020
to the extent that we can make

00:57:16,790 --> 00:57:24,740
improvements in on the process side I

00:57:20,020 --> 00:57:28,520
love to do that so we're gonna have one

00:57:24,740 --> 00:57:32,270
last question here all right just a

00:57:28,520 --> 00:57:37,000
question about the example you gave of

00:57:32,270 --> 00:57:39,140
quick in terms of almost requiring a

00:57:37,000 --> 00:57:40,880
implementation that can work at scale in

00:57:39,140 --> 00:57:44,420
order to get people invested in the

00:57:40,880 --> 00:57:47,530
process of joining the working group in

00:57:44,420 --> 00:57:51,260
providing the review process video RFC

00:57:47,530 --> 00:57:55,070
do you have any concerns that this kind

00:57:51,260 --> 00:57:57,080
of shift in attitude will end locking

00:57:55,070 --> 00:58:00,890
out smaller research institutions

00:57:57,080 --> 00:58:03,740
academics and people who don't have the

00:58:00,890 --> 00:58:07,820
resources to deploy at scale and if so

00:58:03,740 --> 00:58:10,700
do you have any ideas of how people who

00:58:07,820 --> 00:58:13,490
come from academia like myself can still

00:58:10,700 --> 00:58:18,710
have an impact in terms of deploying in

00:58:13,490 --> 00:58:20,270
writing RFC's yeah so I think I think

00:58:18,710 --> 00:58:23,030
it's a it's definitely a valid concern

00:58:20,270 --> 00:58:24,500
and I don't think it's this you know

00:58:23,030 --> 00:58:26,160
deployment at scale thing is it is like

00:58:24,500 --> 00:58:28,040
an across-the-board requirement

00:58:26,160 --> 00:58:30,360
so we still have I think a fairly

00:58:28,040 --> 00:58:33,240
vibrant community of academics and

00:58:30,360 --> 00:58:35,700
researchers who are participating but I

00:58:33,240 --> 00:58:38,130
do think they're a little bit at a

00:58:35,700 --> 00:58:40,680
disadvantage if the decision making

00:58:38,130 --> 00:58:43,200
process revolves around like are the big

00:58:40,680 --> 00:58:46,290
players interested in this and that is

00:58:43,200 --> 00:58:47,790
that is a dynamic honestly which people

00:58:46,290 --> 00:58:49,410
sort of feel like it's new but I don't

00:58:47,790 --> 00:58:52,380
really think it's new like I work at

00:58:49,410 --> 00:58:53,880
Cisco I'm pretty sure that like 15 or 20

00:58:52,380 --> 00:58:56,160
years ago long before I worked at Cisco

00:58:53,880 --> 00:58:57,630
it mattered a lot whether it was like

00:58:56,160 --> 00:58:58,800
Cisco and juniper who are interested in

00:58:57,630 --> 00:58:59,880
doing something and routing and then

00:58:58,800 --> 00:59:02,040
it's out there gonna happen or it's not

00:58:59,880 --> 00:59:05,040
gonna happen so I don't think this is

00:59:02,040 --> 00:59:07,290
necessarily a new dynamic but it's it's

00:59:05,040 --> 00:59:10,470
definitely something that that I am

00:59:07,290 --> 00:59:14,220
cognizant of and that people see in the

00:59:10,470 --> 00:59:15,900
IETF on the other hand I feel like you

00:59:14,220 --> 00:59:18,210
know given the the openness of the

00:59:15,900 --> 00:59:20,400
process people are still like totally

00:59:18,210 --> 00:59:23,250
open to an idea no matter where it comes

00:59:20,400 --> 00:59:25,500
from if it's a good idea and and as I

00:59:23,250 --> 00:59:26,610
said we still have a fairly vibrant

00:59:25,500 --> 00:59:28,920
community of academics and I think

00:59:26,610 --> 00:59:30,750
actually more sort of research activity

00:59:28,920 --> 00:59:31,200
now than we have then we have like five

00:59:30,750 --> 00:59:34,140
years ago

00:59:31,200 --> 00:59:37,200
in the ITF so it's something to watch

00:59:34,140 --> 00:59:38,370
out for and there's not a ton that we

00:59:37,200 --> 00:59:40,770
can do about it within the confines of

00:59:38,370 --> 00:59:46,680
our process but I don't think it's like

00:59:40,770 --> 00:59:50,850
totally dire thinks we could small are

00:59:46,680 --> 00:59:54,170
you just gonna wrap it up here coffee so

00:59:50,850 --> 00:59:57,000
we have us this one is from

00:59:54,170 --> 01:00:01,170
collaboration between academic community

00:59:57,000 --> 01:00:03,890
and open source awesome thank you from

01:00:01,170 --> 01:00:03,890
one of our very own

01:00:08,660 --> 01:00:12,219

YouTube URL: https://www.youtube.com/watch?v=coHhLXw3Q9Y


