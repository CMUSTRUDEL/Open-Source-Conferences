Title: Netdev 2.1 - Distributed Switch Architecture By Andrew Lunn, Vivien Didelot, Florian Fainelli
Publication date: 2017-05-04
Playlist: Netdev 2.1
Description: 
	In this talk given at Netdev 2.1 in Montreal on 6th of Apr/2017, Andrew Lunn, Vivien Didelot and  Florian Fainelli give the first of a kind talk on Distributed Switch Architecture that was introduced in Linux about a decade ago.

The authors talk about the design goals and paradigms of DSA and why they make it a good fit for supporting small home/office routers and switches. The talk covers the work that was done over the past 4 years, the relationship with switchdev and the networking stack, and finally give a heads-up on the upcoming developments to be expected.

https://www.netdevconf.org/2.1/session.html?lunn_didelot_fainelli
Captions: 
	00:00:00,000 --> 00:00:08,639
okay so I'm under learn obviously yeah

00:00:06,410 --> 00:00:13,650
are we going to talk about distributed

00:00:08,639 --> 00:00:16,560
switch architecture after DSA so what is

00:00:13,650 --> 00:00:18,600
it one slide who uses it

00:00:16,560 --> 00:00:24,390
what would a design paradigms excited

00:00:18,600 --> 00:00:27,779
etc we try to summarize the old in one

00:00:24,390 --> 00:00:29,189
slide then you can fall asleep I'm we're

00:00:27,779 --> 00:00:31,289
in different worlds everybody else has

00:00:29,189 --> 00:00:34,230
been talking about things today we're in

00:00:31,289 --> 00:00:36,600
the embedded market Wi-Fi access points

00:00:34,230 --> 00:00:38,670
the set-top boxes

00:00:36,600 --> 00:00:40,559
we're not top of rack we're not talking

00:00:38,670 --> 00:00:42,180
about under supports doing 100 gigabits

00:00:40,559 --> 00:00:44,160
per second we're probably talking about

00:00:42,180 --> 00:00:47,579
eight ports doing one gig if we're lucky

00:00:44,160 --> 00:00:51,030
and we're talking about a little CPU and

00:00:47,579 --> 00:00:54,000
our more immense and beer on Ethernet

00:00:51,030 --> 00:00:56,610
controllers that sort of thing I mean

00:00:54,000 --> 00:01:00,510
how an Ethernet switch are we have

00:00:56,610 --> 00:01:03,210
multiple switches key points the DSA is

00:01:00,510 --> 00:01:06,000
the Ethernet control that's connected to

00:01:03,210 --> 00:01:08,939
the CPU which is also connected to the

00:01:06,000 --> 00:01:13,530
switch that found then there's a path

00:01:08,939 --> 00:01:17,820
from the CPU to switch and we have a

00:01:13,530 --> 00:01:21,299
control path either MDI oh I said si s

00:01:17,820 --> 00:01:24,600
bi it can be memory mapped i/o if it's

00:01:21,299 --> 00:01:26,070
integrated into this memory and then

00:01:24,600 --> 00:01:29,159
switch has got a number of Ethernet

00:01:26,070 --> 00:01:32,640
ports on it they can have built-in Phi's

00:01:29,159 --> 00:01:34,710
we can have external files and we have a

00:01:32,640 --> 00:01:40,130
few boards that have fiber connected to

00:01:34,710 --> 00:01:40,130
them that is esa in the site

00:01:41,620 --> 00:01:48,200
but then there's the D bit in DSA

00:01:44,590 --> 00:01:50,930
distributed day which means it can have

00:01:48,200 --> 00:01:54,979
lots of switches and it gets really

00:01:50,930 --> 00:01:58,250
confusing in this case again CPUs main

00:01:54,979 --> 00:02:00,200
controller and yoyo switch which is

00:01:58,250 --> 00:02:03,020
connected to another switch which could

00:02:00,200 --> 00:02:04,369
be connected to another switch and then

00:02:03,020 --> 00:02:06,470
we've got to forward the packets around

00:02:04,369 --> 00:02:07,909
and round and hopefully they'll go round

00:02:06,470 --> 00:02:11,569
and round they actually come out at some

00:02:07,909 --> 00:02:14,890
point and we've got these DSA forts

00:02:11,569 --> 00:02:17,390
which we connect switches together with

00:02:14,890 --> 00:02:20,660
most of this is my ultimate knowledge II

00:02:17,390 --> 00:02:23,989
but in fact it's generic it should work

00:02:20,660 --> 00:02:29,750
with any chipset that supports this sort

00:02:23,989 --> 00:02:32,450
of concept now many applications where

00:02:29,750 --> 00:02:35,750
who's using this sort of things on the

00:02:32,450 --> 00:02:39,320
left not the rather old Marvell Wi-Fi

00:02:35,750 --> 00:02:40,700
device images taken from to open to RT

00:02:39,320 --> 00:02:43,400
where somebody spent some time actually

00:02:40,700 --> 00:02:45,050
labeled all the tips and if you look at

00:02:43,400 --> 00:02:48,260
the marvel through action of the Marvel

00:02:45,050 --> 00:02:53,989
processor there and then the other side

00:02:48,260 --> 00:02:56,090
is a broad combo which I believe is a

00:02:53,989 --> 00:02:58,190
set-top box we've got an Ethernet switch

00:02:56,090 --> 00:03:00,860
in the top left-hand corner connected to

00:02:58,190 --> 00:03:05,690
a quad by on the big hairy thing in the

00:03:00,860 --> 00:03:08,720
middle I assume is the processor on the

00:03:05,690 --> 00:03:11,239
other the names the lots of use of this

00:03:08,720 --> 00:03:15,160
sort of thing is in industrial transport

00:03:11,239 --> 00:03:18,110
equipment trains planes automobiles you

00:03:15,160 --> 00:03:19,820
see if you look underneath the seat on

00:03:18,110 --> 00:03:25,040
the next flight Iran you might see the

00:03:19,820 --> 00:03:27,230
top box we look at the impostor gene

00:03:25,040 --> 00:03:31,090
information systems on the train is

00:03:27,230 --> 00:03:31,090
probably got something like that in it

00:03:32,320 --> 00:03:38,660
what sweet teas degrees abort as in this

00:03:36,470 --> 00:03:39,320
was all started by novels or as you'd

00:03:38,660 --> 00:03:41,870
expect

00:03:39,320 --> 00:03:44,989
Marvel switches and then Broadcom got

00:03:41,870 --> 00:03:47,840
involved with their robots weights in

00:03:44,989 --> 00:03:50,660
star party to Qualcomm recently joined

00:03:47,840 --> 00:03:52,810
so Qualcomm across Ethernet gypsy

00:03:50,660 --> 00:03:55,879
finding Wi-Fi access points

00:03:52,810 --> 00:03:59,650
MediaTek posted a few times in a few

00:03:55,879 --> 00:04:04,220
weeks should hope I get merge soon

00:03:59,650 --> 00:04:13,159
microchip posted two days ago analyst

00:04:04,220 --> 00:04:15,799
yet another microchip coming soon yes s

00:04:13,159 --> 00:04:18,590
been around for a while it's old older

00:04:15,799 --> 00:04:23,060
than muscles arrested network switch

00:04:18,590 --> 00:04:24,500
stuff was first added in 2008 and it

00:04:23,060 --> 00:04:25,370
went dormant nobody's really interested

00:04:24,500 --> 00:04:30,620
in it

00:04:25,370 --> 00:04:32,570
so you see between 2008 2014 was just a

00:04:30,620 --> 00:04:34,190
little peak our API changes were

00:04:32,570 --> 00:04:36,770
suddenly something mechanical work just

00:04:34,190 --> 00:04:40,130
to keep it compiling but it wasn't

00:04:36,770 --> 00:04:45,199
really used that much in kernel and then

00:04:40,130 --> 00:04:49,690
we got involved and it's cause we a lot

00:04:45,199 --> 00:04:53,990
more interest in it so click this bread

00:04:49,690 --> 00:04:54,380
2008 got added then just like for a long

00:04:53,990 --> 00:04:58,699
time

00:04:54,380 --> 00:05:00,320
2014 a black hole Starfighter 2k and we

00:04:58,699 --> 00:05:03,349
started adding things that go around

00:05:00,320 --> 00:05:05,539
this way things like the EEPROM used to

00:05:03,349 --> 00:05:07,190
configure the switch sometimes suddenly

00:05:05,539 --> 00:05:09,169
they've got temperature sensors in them

00:05:07,190 --> 00:05:12,860
that have bought energy-efficient

00:05:09,169 --> 00:05:15,289
Ethernet wake-on-lan the finds we like

00:05:12,860 --> 00:05:17,660
to control in the Linux way so we use

00:05:15,289 --> 00:05:21,710
the pilot and there's another model

00:05:17,660 --> 00:05:24,410
typically along we're in the embedded

00:05:21,710 --> 00:05:27,349
space meaning arm i'll pc my means

00:05:24,410 --> 00:05:30,349
device tree normally we had to be under

00:05:27,349 --> 00:05:31,910
device tree binding let me actually got

00:05:30,349 --> 00:05:34,190
around to actually using the switches or

00:05:31,910 --> 00:05:38,210
switch hardware briefly which was the

00:05:34,190 --> 00:05:39,710
novel concept and then VLANs when we

00:05:38,210 --> 00:05:43,820
fixed all the kernels laughs when we

00:05:39,710 --> 00:05:45,440
unloaded and loaded modules bin and to

00:05:43,820 --> 00:05:47,740
reset the saying net console just

00:05:45,440 --> 00:05:50,810
generally making it more feature-rich

00:05:47,740 --> 00:05:52,550
and then we discovered that with on the

00:05:50,810 --> 00:05:55,630
device tree binding wrong because of

00:05:52,550 --> 00:05:58,580
various architectural problems and

00:05:55,630 --> 00:06:00,889
switches weren't actually then its

00:05:58,580 --> 00:06:02,530
devices so we changed all that and made

00:06:00,889 --> 00:06:06,070
them Linux devices

00:06:02,530 --> 00:06:09,190
and then that allowed the allowed to use

00:06:06,070 --> 00:06:11,560
SBI their switches or memory-mapped is

00:06:09,190 --> 00:06:13,720
where kids and that opens up the path to

00:06:11,560 --> 00:06:17,020
get the Broadcom 14 which is generally

00:06:13,720 --> 00:06:19,060
SBI off memory mapped i/o and Qualcomm

00:06:17,020 --> 00:06:24,040
came along and give us their switch and

00:06:19,060 --> 00:06:28,390
yet another marble switch 2007 see more

00:06:24,040 --> 00:06:29,770
Marvel most are fighters and then some

00:06:28,390 --> 00:06:32,080
interesting things that actually have

00:06:29,770 --> 00:06:35,350
been like the TCO those responding to

00:06:32,080 --> 00:06:38,640
catch up on top of rat rods we're still

00:06:35,350 --> 00:06:43,380
a long way behind so it was starting

00:06:38,640 --> 00:06:45,940
this is where we talk thanks Andrew so

00:06:43,380 --> 00:06:48,220
even though GSA's been around for some

00:06:45,940 --> 00:06:51,190
time there were alternative approaches

00:06:48,220 --> 00:06:53,680
done before the most famous one is

00:06:51,190 --> 00:06:57,010
probably something called SW config that

00:06:53,680 --> 00:07:00,280
it has been designed by open-air ERT now

00:06:57,010 --> 00:07:02,740
eat that's a generic kinetic based

00:07:00,280 --> 00:07:05,200
interface to program and query the

00:07:02,740 --> 00:07:07,510
switch doesn't make use of proprietary

00:07:05,200 --> 00:07:10,270
switch tags which will describe a little

00:07:07,510 --> 00:07:13,840
more detail right after that instead

00:07:10,270 --> 00:07:16,000
uses normal attitude 1qv lines to trap

00:07:13,840 --> 00:07:20,080
to segregate the traffic so typical use

00:07:16,000 --> 00:07:23,200
case of a 5/4 which is one port is 1/5

00:07:20,080 --> 00:07:25,900
plus 1/4 is one your internet access for

00:07:23,200 --> 00:07:28,450
ports or your local network

00:07:25,900 --> 00:07:30,550
there's no per port network interfaces

00:07:28,450 --> 00:07:32,470
so they don't appear to the user the

00:07:30,550 --> 00:07:34,930
only thing you see is like your CPU

00:07:32,470 --> 00:07:37,300
Ethernet controller hh0 whatever the

00:07:34,930 --> 00:07:40,000
neighbor could it could be and each

00:07:37,300 --> 00:07:43,860
switch device was basically allowed to

00:07:40,000 --> 00:07:46,030
extend the net link API to provide any

00:07:43,860 --> 00:07:47,740
customization by the switch support so

00:07:46,030 --> 00:07:51,760
highly inconsistent from a user

00:07:47,740 --> 00:07:54,850
experience the this was proposed in

00:07:51,760 --> 00:07:57,070
October 2014 and this is what kind of

00:07:54,850 --> 00:07:59,050
rejected for obvious reasons but at

00:07:57,070 --> 00:08:03,669
least it started the discussion that

00:07:59,050 --> 00:08:05,680
eventually led to switch this other

00:08:03,669 --> 00:08:07,990
approaches you may have found before

00:08:05,680 --> 00:08:10,000
from different vendors or based on slash

00:08:07,990 --> 00:08:13,630
products such as iboga Fez

00:08:10,000 --> 00:08:15,090
iocked all people are very creative and

00:08:13,630 --> 00:08:18,270
how you could

00:08:15,090 --> 00:08:21,660
configure switches creativity also means

00:08:18,270 --> 00:08:23,669
inconsistency which is not great there's

00:08:21,660 --> 00:08:25,860
still a lot of vendor proprietary as

00:08:23,669 --> 00:08:28,440
decades and user space nowadays for

00:08:25,860 --> 00:08:29,820
better or worse or even sometimes why

00:08:28,440 --> 00:08:33,530
not have the bootloader configure to

00:08:29,820 --> 00:08:33,530
switch to never touch it again right so

00:08:34,219 --> 00:08:39,630
during various conferences and slide

00:08:37,589 --> 00:08:42,930
discussions your mailing lists or

00:08:39,630 --> 00:08:44,940
privately or through people basically

00:08:42,930 --> 00:08:46,860
sort of agreed but the most sensible

00:08:44,940 --> 00:08:48,960
thing to do is that each switch port

00:08:46,860 --> 00:08:52,260
should be a network device because it's

00:08:48,960 --> 00:08:55,110
a great paradigm to work on that way

00:08:52,260 --> 00:08:57,270
standard Linux tools like IP F config

00:08:55,110 --> 00:08:59,670
will still work because these are

00:08:57,270 --> 00:09:01,290
network devices so we can operate the

00:08:59,670 --> 00:09:03,120
network device layer and do whatever is

00:09:01,290 --> 00:09:07,200
necessary to make that work same thing

00:09:03,120 --> 00:09:10,860
for bridges you could extend that your

00:09:07,200 --> 00:09:13,589
team bonding etc and the switch is

00:09:10,860 --> 00:09:15,810
basically a accelerator of what Linux

00:09:13,589 --> 00:09:19,140
cannot do in software so anything that

00:09:15,810 --> 00:09:20,670
can be offloaded is something that is a

00:09:19,140 --> 00:09:23,250
good candidate for the switchdriver to

00:09:20,670 --> 00:09:25,950
take care of and turns out that DSA has

00:09:23,250 --> 00:09:30,810
been doing business since 2008 except

00:09:25,950 --> 00:09:33,029
the bridging part so what does the data

00:09:30,810 --> 00:09:35,400
plane looks like so each port port

00:09:33,029 --> 00:09:38,880
network interface in DSA is called the

00:09:35,400 --> 00:09:41,700
slave interface there's a bunch of

00:09:38,880 --> 00:09:45,000
tagging protocols for each vendor so

00:09:41,700 --> 00:09:46,920
Marvel has to welcome as to as well

00:09:45,000 --> 00:09:48,959
Qualcomm as their own there's also

00:09:46,920 --> 00:09:51,630
generic trailer that could be like at

00:09:48,959 --> 00:09:54,029
the far end of your even at frame when

00:09:51,630 --> 00:09:55,890
you transmit you call the slave network

00:09:54,029 --> 00:09:59,970
interface and do startx mid function

00:09:55,890 --> 00:10:03,000
which is stubbed by DSA so we can insert

00:09:59,970 --> 00:10:05,459
a custom header in there that will tell

00:10:03,000 --> 00:10:07,800
the switch Hardware hey this port wants

00:10:05,459 --> 00:10:09,570
to transmit what's our this virtual

00:10:07,800 --> 00:10:13,260
network interface wants to transmit to

00:10:09,570 --> 00:10:15,029
this physical port vice versa when you

00:10:13,260 --> 00:10:19,680
want to receive a frame what happens is

00:10:15,029 --> 00:10:22,529
your CPU get a switch tag frame it will

00:10:19,680 --> 00:10:25,020
call Nate a night I have receive skb and

00:10:22,529 --> 00:10:27,389
in very small hook where we can actually

00:10:25,020 --> 00:10:32,430
see ok this is a

00:10:27,389 --> 00:10:35,980
GSA enable mess or network device we can

00:10:32,430 --> 00:10:38,889
locate the GSA structure associated with

00:10:35,980 --> 00:10:41,170
and then extract from the tag we can

00:10:38,889 --> 00:10:43,300
extract the information about which port

00:10:41,170 --> 00:10:45,430
we should deliver this frame to and then

00:10:43,300 --> 00:10:49,540
this just looks like normal

00:10:45,430 --> 00:10:52,089
Ethernet frame delivery so if we look at

00:10:49,540 --> 00:10:54,899
an Ethernet frame that would be say

00:10:52,089 --> 00:10:57,009
normal you have the Ethernet header with

00:10:54,899 --> 00:11:00,180
destination address or side receiver

00:10:57,009 --> 00:11:04,990
type payload frame control checks and

00:11:00,180 --> 00:11:07,300
then when the switch pushes the frame to

00:11:04,990 --> 00:11:10,000
the CPU which the switch terminology

00:11:07,300 --> 00:11:12,339
would be egressing because packets make

00:11:10,000 --> 00:11:14,860
it out of the switchboard you'll find a

00:11:12,339 --> 00:11:16,779
switch tag that is typically inserted

00:11:14,860 --> 00:11:18,939
between the mac source address and the

00:11:16,779 --> 00:11:21,339
eater type there's all kinds of variants

00:11:18,939 --> 00:11:25,120
not all switching protocols are

00:11:21,339 --> 00:11:27,250
consistent in in how they put something

00:11:25,120 --> 00:11:28,660
but basically in there between four and

00:11:27,250 --> 00:11:31,000
eight bytes you'll find enough

00:11:28,660 --> 00:11:33,180
information to know that why is this

00:11:31,000 --> 00:11:36,339
frame sent to me in the first place

00:11:33,180 --> 00:11:39,370
additional metadata which can be time

00:11:36,339 --> 00:11:41,649
stamping information classification

00:11:39,370 --> 00:11:43,509
information and more importantly the

00:11:41,649 --> 00:11:46,319
source port of this frame which is

00:11:43,509 --> 00:11:49,329
really how the magic works in decades

00:11:46,319 --> 00:11:51,519
conversely when the CPU wants to send a

00:11:49,329 --> 00:11:55,750
frame towards a specific port of the

00:11:51,519 --> 00:11:57,699
switch software or Hardware can insert

00:11:55,750 --> 00:11:59,560
the switch tag at the same location

00:11:57,699 --> 00:12:01,959
pretty much and this will include

00:11:59,560 --> 00:12:04,240
additional metadata that might be useful

00:12:01,959 --> 00:12:09,100
to the switch and a vector of

00:12:04,240 --> 00:12:10,779
destination ports so in terms of packet

00:12:09,100 --> 00:12:13,689
processing flow what will typically

00:12:10,779 --> 00:12:17,680
happen is your network driver receive

00:12:13,689 --> 00:12:21,759
path will be invoked were will set SKB

00:12:17,680 --> 00:12:24,579
arrow depth to say eth0 while villain

00:12:21,759 --> 00:12:26,709
called native receive skb and then in

00:12:24,579 --> 00:12:29,410
the ethernet layer of linux or in small

00:12:26,709 --> 00:12:31,930
hook that says oh is this a master

00:12:29,410 --> 00:12:36,160
network interface yes okay in that case

00:12:31,930 --> 00:12:38,500
am i using tags okay yes I am so I'm

00:12:36,160 --> 00:12:40,490
going to call the tag receive function

00:12:38,500 --> 00:12:42,560
which will be responsible for right

00:12:40,490 --> 00:12:45,410
defying the tag format and will be

00:12:42,560 --> 00:12:48,320
either accepting the frame for delivery

00:12:45,410 --> 00:12:50,209
or rejecting it completely and the

00:12:48,320 --> 00:12:52,310
acceptance of the frame delivery

00:12:50,209 --> 00:12:55,010
basically consists in popping the tag

00:12:52,310 --> 00:12:58,880
from the ethernet frame looking at the

00:12:55,010 --> 00:13:01,910
specific protocol bytes in bits to

00:12:58,880 --> 00:13:04,940
determine the source port and reassign

00:13:01,910 --> 00:13:06,529
skb death to the virtual / port network

00:13:04,940 --> 00:13:09,350
interface and then we loop it back

00:13:06,529 --> 00:13:11,500
through for net if' receive skb and then

00:13:09,350 --> 00:13:14,440
we hit the normal packet processing flow

00:13:11,500 --> 00:13:19,270
so a very small hook that does kind of

00:13:14,440 --> 00:13:19,270
automatic but it's reasonably simple

00:13:19,990 --> 00:13:30,160
integer so how do we control our death

00:13:27,290 --> 00:13:33,529
so one thing that can be confusing is

00:13:30,160 --> 00:13:38,709
switch dead vs. ESA so let me try to

00:13:33,529 --> 00:13:41,839
clarify that so what is switch death

00:13:38,709 --> 00:13:47,320
Jerry can keep in from wrong I guess

00:13:41,839 --> 00:13:53,450
services stateless API and to implement

00:13:47,320 --> 00:13:57,079
bridge and switches operations so it

00:13:53,450 --> 00:14:00,860
provides every person that net device

00:13:57,079 --> 00:14:05,649
can implement lycée to add VLAN to other

00:14:00,860 --> 00:14:10,130
MAC address beyond yang given both

00:14:05,649 --> 00:14:13,670
switches also provide the abstract

00:14:10,130 --> 00:14:19,070
models for for other things so real and

00:14:13,670 --> 00:14:23,660
FDB and deviant entries and these are

00:14:19,070 --> 00:14:27,890
the CDF object and typically what we see

00:14:23,660 --> 00:14:30,589
that you will register by yourself in a

00:14:27,890 --> 00:14:32,810
device and you will provide this net

00:14:30,589 --> 00:14:38,630
device a bunch of filters

00:14:32,810 --> 00:14:40,370
oops so what switch def doesn't do so

00:14:38,630 --> 00:14:43,010
that doesn't register on the device all

00:14:40,370 --> 00:14:46,459
you have to do it yourself so there is

00:14:43,010 --> 00:14:49,690
no driver model for the switches and

00:14:46,459 --> 00:14:49,690
switch bus

00:14:54,810 --> 00:15:04,810
so what GSA does with them so basically

00:15:01,720 --> 00:15:07,210
long story short yes I uses switch them

00:15:04,810 --> 00:15:09,550
what it does is trying to provide the

00:15:07,210 --> 00:15:11,620
stateful well that's not really stateful

00:15:09,550 --> 00:15:15,310
because there is some stuff cashing in

00:15:11,620 --> 00:15:18,900
the rabbit we have a state for the

00:15:15,310 --> 00:15:22,480
switch pop the switch chip itself and

00:15:18,900 --> 00:15:24,730
what we can do switch tree which is the

00:15:22,480 --> 00:15:31,660
whole switch fabric so the logical

00:15:24,730 --> 00:15:35,830
switch and so GSA provided well a lot of

00:15:31,660 --> 00:15:38,320
thunder of specific tag so we call that

00:15:35,830 --> 00:15:41,380
GSA because for it's a recovery z'n that

00:15:38,320 --> 00:15:43,720
we not only support as Fran said marvel

00:15:41,380 --> 00:15:49,810
tagging protocol we also support bottom

00:15:43,720 --> 00:15:52,390
quadrant ejector kick Tara so Jessie

00:15:49,810 --> 00:15:54,880
provide that abstraction model for a

00:15:52,390 --> 00:15:58,690
switch chip which is part of a switch

00:15:54,880 --> 00:16:01,330
fabric and an assertion for the the

00:15:58,690 --> 00:16:06,370
fabric itself which is the tree and the

00:16:01,330 --> 00:16:10,720
boss what does it do the GSA frame lock

00:16:06,370 --> 00:16:14,770
will register the lead device one-day

00:16:10,720 --> 00:16:18,430
device peer port and buying all together

00:16:14,770 --> 00:16:21,070
the negative of the ETH to us and the

00:16:18,430 --> 00:16:24,520
switch dev ops everything that grows

00:16:21,070 --> 00:16:28,330
together to make every operation related

00:16:24,520 --> 00:16:36,640
to to bridge and future operations like

00:16:28,330 --> 00:16:43,780
at Baron so yes as I said it implements

00:16:36,640 --> 00:16:45,310
the switcher up and so working we speak

00:16:43,780 --> 00:16:48,630
about Max about the cost ship

00:16:45,310 --> 00:16:51,970
configuration that can be quickly so

00:16:48,630 --> 00:16:55,960
adjacent driver will implement an ad

00:16:51,970 --> 00:16:59,290
support for an Ethernet switch ship so

00:16:55,960 --> 00:17:02,259
the the chip itself but that ship can be

00:16:59,290 --> 00:17:07,600
interconnected with

00:17:02,259 --> 00:17:10,470
to provide well switch fabric so we can

00:17:07,600 --> 00:17:13,510
add science this set-up with three

00:17:10,470 --> 00:17:17,140
attorneys with chip and why are together

00:17:13,510 --> 00:17:21,610
through the DSL link which provides the

00:17:17,140 --> 00:17:27,459
user and logical switch fabric of nine

00:17:21,610 --> 00:17:31,120
pause and there is some clicks with it

00:17:27,459 --> 00:17:34,960
so the basic configuration that we had

00:17:31,120 --> 00:17:37,480
now given the fact that the ESL drivers

00:17:34,960 --> 00:17:43,510
program their own individual it will

00:17:37,480 --> 00:17:45,820
individual chip is that we have the ESL

00:17:43,510 --> 00:17:51,039
links that are correctly configured to

00:17:45,820 --> 00:17:55,480
pass packet for to any destination port

00:17:51,039 --> 00:17:59,679
and but we still have program for that

00:17:55,480 --> 00:18:01,960
so some of the program can be this if

00:17:59,679 --> 00:18:04,029
want to write like bridge and want to

00:18:01,960 --> 00:18:06,520
bridge some some parts together not all

00:18:04,029 --> 00:18:10,929
the parts but some of them like to under

00:18:06,520 --> 00:18:13,419
lesson one on the right so what what

00:18:10,929 --> 00:18:16,210
happened to the one on doing and in the

00:18:13,419 --> 00:18:20,260
middle or just about that on the bridge

00:18:16,210 --> 00:18:23,200
bridge yet so the thing is that we can

00:18:20,260 --> 00:18:26,799
potentially leak frames with it with

00:18:23,200 --> 00:18:31,919
that configuration because the actual

00:18:26,799 --> 00:18:31,919
configuration is too permissive and

00:18:32,309 --> 00:18:38,679
another form can be for the for the

00:18:35,320 --> 00:18:43,419
villain so in that setup if I want to

00:18:38,679 --> 00:18:45,970
provide a bridge let's say 42 VLAN 332

00:18:43,419 --> 00:18:49,480
under on the bridge so on the flip

00:18:45,970 --> 00:18:50,740
bridgeport what would happen what

00:18:49,480 --> 00:18:53,679
happens today with the main and

00:18:50,740 --> 00:18:56,529
generally that switch one won't let the

00:18:53,679 --> 00:18:59,169
traffic pass so you cannot have target

00:18:56,529 --> 00:19:02,880
frames with the idea started to going

00:18:59,169 --> 00:19:06,340
through switch one to switch to and

00:19:02,880 --> 00:19:09,630
that's something that that going to be

00:19:06,340 --> 00:19:12,370
six so what can we do about that

00:19:09,630 --> 00:19:15,119
so for the cost ship

00:19:12,370 --> 00:19:18,009
bridging so this is

00:19:15,119 --> 00:19:20,590
program because it works but they can be

00:19:18,009 --> 00:19:23,470
a security program because as I said you

00:19:20,590 --> 00:19:27,309
can potentially leak frames so most of

00:19:23,470 --> 00:19:30,369
the novel switch chips as what we call

00:19:27,309 --> 00:19:37,720
activity which is a table basically used

00:19:30,369 --> 00:19:41,259
to restrict which external softball is

00:19:37,720 --> 00:19:45,909
allowed to disco to to send packet to

00:19:41,259 --> 00:19:49,869
which local law and what we have done

00:19:45,909 --> 00:19:53,470
that now the GSL am so not the gsa

00:19:49,869 --> 00:19:55,899
driver except the gsa from off when you

00:19:53,470 --> 00:19:57,850
had thought to a bridge we will

00:19:55,899 --> 00:20:02,169
broadcast this information to our switch

00:19:57,850 --> 00:20:04,840
of the fabric so every switch of that

00:20:02,169 --> 00:20:08,049
fabric will get information like suit

00:20:04,840 --> 00:20:12,119
zero four zero got bridge into the or

00:20:08,049 --> 00:20:15,159
zero so with that information every

00:20:12,119 --> 00:20:18,070
novel driver can now program the switch

00:20:15,159 --> 00:20:22,049
to say ok i'm allowing only the port

00:20:18,070 --> 00:20:28,149
number of that bridge to accept a packet

00:20:22,049 --> 00:20:32,169
from this is done something like two

00:20:28,149 --> 00:20:36,340
days ago and father called ship the rank

00:20:32,169 --> 00:20:39,999
that's my next step so i'm going to do

00:20:36,340 --> 00:20:44,830
the same thing like broadcasting suja

00:20:39,999 --> 00:20:48,899
object so whenever some somebody add the

00:20:44,830 --> 00:20:52,029
villain thirty-two to the bridge every

00:20:48,899 --> 00:20:54,450
chip of the sub which should receive

00:20:52,029 --> 00:20:57,820
that information and program the switch

00:20:54,450 --> 00:21:00,850
accordingly so that means that event

00:20:57,820 --> 00:21:05,559
which one will see that some part of the

00:21:00,850 --> 00:21:09,039
bridge of a bridge as the villain 32 so

00:21:05,559 --> 00:21:16,119
it should program itself with the Vav 42

00:21:09,039 --> 00:21:19,690
delayed traffic pass through GSA so

00:21:16,119 --> 00:21:21,609
that's the dimension and the same thing

00:21:19,690 --> 00:21:24,820
happens with ADB an MDB

00:21:21,609 --> 00:21:27,190
MAC addresses entry and stuff if you

00:21:24,820 --> 00:21:28,300
want to program static addressing file

00:21:27,190 --> 00:21:31,030
management

00:21:28,300 --> 00:21:33,310
of all river but that will be easy

00:21:31,030 --> 00:21:39,870
thanks to the switch dev attraction mode

00:21:33,310 --> 00:21:39,870
equality for the object to the future

00:21:41,370 --> 00:21:49,570
another context which at the moment we

00:21:47,230 --> 00:21:52,030
just support one connection between the

00:21:49,570 --> 00:21:54,550
CPU and the switch if you actually look

00:21:52,030 --> 00:21:57,280
at a few Wi-Fi boxes out there you often

00:21:54,550 --> 00:21:58,960
see is actually two and the vendor says

00:21:57,280 --> 00:22:01,300
he took so one is statically map

00:21:58,960 --> 00:22:03,940
straight through on to the internet for

00:22:01,300 --> 00:22:05,380
tour the one port we think we can do a

00:22:03,940 --> 00:22:08,410
lot better than that and actually do

00:22:05,380 --> 00:22:09,670
some load balancing we kept saying we're

00:22:08,410 --> 00:22:11,650
going to do this I'm going to do this

00:22:09,670 --> 00:22:13,810
and it's now actually getting somewhere

00:22:11,650 --> 00:22:17,220
near the top of Orion to-do list so

00:22:13,810 --> 00:22:19,990
maybe next year with it we did it

00:22:17,220 --> 00:22:22,630
we're also making use of the power of

00:22:19,990 --> 00:22:28,200
for the next bridge it knows how to do

00:22:22,630 --> 00:22:31,380
idmp snooping we just need to wire it up

00:22:28,200 --> 00:22:33,760
again it's just getting around to do it

00:22:31,380 --> 00:22:38,350
we're improving the distributed suite

00:22:33,760 --> 00:22:40,180
support it needs more work we see that a

00:22:38,350 --> 00:22:44,020
few devices out there actually have

00:22:40,180 --> 00:22:46,120
fiber with fiber to the home we need to

00:22:44,020 --> 00:22:47,890
improve that support at the moment so

00:22:46,120 --> 00:22:49,390
you can actually connect a fiber in you

00:22:47,890 --> 00:22:52,450
can get the status from the side where

00:22:49,390 --> 00:22:55,120
the management information etc we've got

00:22:52,450 --> 00:22:57,910
a few new tips coming along with drivers

00:22:55,120 --> 00:23:01,980
so just get the media tech driver merged

00:22:57,910 --> 00:23:05,400
and the microchip drivers merged and

00:23:01,980 --> 00:23:06,730
then if you look a bit farther forward

00:23:05,400 --> 00:23:09,520
team-bonding

00:23:06,730 --> 00:23:11,170
we can reuse a lot of hard work that the

00:23:09,520 --> 00:23:13,210
male next guys have been doing to put in

00:23:11,170 --> 00:23:17,170
all the infrastructure in we just need

00:23:13,210 --> 00:23:19,180
to work on the bottom left try to use

00:23:17,170 --> 00:23:20,710
the t cam in these kits to offload some

00:23:19,180 --> 00:23:22,180
of the firewall so you can still get

00:23:20,710 --> 00:23:24,130
your wireless line access point it's

00:23:22,180 --> 00:23:25,660
probably got a firewall in there it will

00:23:24,130 --> 00:23:29,710
be nice to have floats on the lap to the

00:23:25,660 --> 00:23:32,920
hardware the cork on hardware can do

00:23:29,710 --> 00:23:35,260
hardware not again it's offloading what

00:23:32,920 --> 00:23:39,070
can linux already do down into the

00:23:35,260 --> 00:23:41,480
hardware interest and get more vendor

00:23:39,070 --> 00:23:44,840
spying we're not doing too bad moment

00:23:41,480 --> 00:23:47,720
we've got a few vendors using it more

00:23:44,840 --> 00:23:50,690
would be better and then there's more

00:23:47,720 --> 00:23:53,330
please these foul things rod cast on to

00:23:50,690 --> 00:23:56,000
pressure and calls your service yet more

00:23:53,330 --> 00:23:58,100
offloads to be implemented so basically

00:23:56,000 --> 00:24:00,019
the infrastructures there now we just

00:23:58,100 --> 00:24:06,190
need to start filling it out with more

00:24:00,019 --> 00:24:06,190
features questions

00:24:27,970 --> 00:24:32,720
we'll do it reverse we have questions

00:24:30,350 --> 00:24:44,350
for you guys who who's ever heard and

00:24:32,720 --> 00:24:48,559
you use a DSA okay use it heard of it

00:24:44,350 --> 00:24:52,280
yeah so another question that comes

00:24:48,559 --> 00:24:54,890
usually is okay I want to support

00:24:52,280 --> 00:24:56,600
next-generation hardware it's a switch

00:24:54,890 --> 00:25:01,190
should I write a switch safe driver

00:24:56,600 --> 00:25:03,530
should I write a DSA driver and so the

00:25:01,190 --> 00:25:06,230
key thing is do you actually have an

00:25:03,530 --> 00:25:09,220
independent even that controller in your

00:25:06,230 --> 00:25:09,220
system sorry

00:25:09,610 --> 00:25:14,360
because if that's the case yes you'd

00:25:12,200 --> 00:25:17,720
probably want to do DSA if your switch

00:25:14,360 --> 00:25:19,520
is like more top of the rack where the

00:25:17,720 --> 00:25:21,710
switch and the ethernet controller kind

00:25:19,520 --> 00:25:24,610
of melted in the same hardware and can

00:25:21,710 --> 00:25:27,799
do DMA directly to your processor than

00:25:24,610 --> 00:25:34,100
just go ahead with switch dev feature

00:25:27,799 --> 00:25:36,430
set is pretty much the same don't no

00:25:34,100 --> 00:25:39,330
more questions

00:25:36,430 --> 00:25:46,530
okay thank you

00:25:39,330 --> 00:25:46,530

YouTube URL: https://www.youtube.com/watch?v=EK5ZmQOYSpM


