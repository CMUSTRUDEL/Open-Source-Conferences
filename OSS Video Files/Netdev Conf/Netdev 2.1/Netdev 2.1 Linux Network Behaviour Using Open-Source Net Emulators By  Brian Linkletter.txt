Title: Netdev 2.1 Linux Network Behaviour Using Open-Source Net Emulators By  Brian Linkletter
Publication date: 2017-06-03
Playlist: Netdev 2.1
Description: 
	In this talk given at Netdev 2.1 in Montreal, on Apr 7th, 2017, Brian Linkletter discusses several open source, GUI based, network emulation tools that are based on linux containers that could be used to replicate network scenarios including failures. Brian takes a trouble-shooting approach to introduce a sample of these tools.

Content at: https://www.netdevconf.org/2.1/session.html?linkletter
Captions: 
	00:00:00,030 --> 00:00:06,420
hi my name is Brian league letter I'm

00:00:03,360 --> 00:00:08,429
here to talk today investigating Linux

00:00:06,420 --> 00:00:15,059
Network behavior using open source

00:00:08,429 --> 00:00:17,580
network emulators the scope I'm thinking

00:00:15,059 --> 00:00:19,949
about here is the network in a laptop

00:00:17,580 --> 00:00:22,260
I'm not thinking about emulating really

00:00:19,949 --> 00:00:24,330
large networks with distributed systems

00:00:22,260 --> 00:00:26,130
or something that might look more like a

00:00:24,330 --> 00:00:28,680
data center I'm thinking about the

00:00:26,130 --> 00:00:30,929
airplane scenario where you're trying to

00:00:28,680 --> 00:00:37,110
do some investigations either if Network

00:00:30,929 --> 00:00:38,309
behavior or where and you've you're

00:00:37,110 --> 00:00:41,790
you're basically the equipment you have

00:00:38,309 --> 00:00:44,190
access to is your laptop the tools I'm

00:00:41,790 --> 00:00:46,399
thinking about our standard are based on

00:00:44,190 --> 00:00:49,500
standard Linux technology these are not

00:00:46,399 --> 00:00:50,910
proprietary tools it's more of a

00:00:49,500 --> 00:00:52,410
convenience these the people have

00:00:50,910 --> 00:00:55,289
developed these tools have put together

00:00:52,410 --> 00:00:57,120
a series of networking technologies in

00:00:55,289 --> 00:00:59,760
order to basically emulate either

00:00:57,120 --> 00:01:03,480
containers or virtual machines on a

00:00:59,760 --> 00:01:05,700
laptop switch together and to make it

00:01:03,480 --> 00:01:11,040
convenient for people to build laptop or

00:01:05,700 --> 00:01:13,049
to build networks so they orchestrate

00:01:11,040 --> 00:01:15,270
the setup and configuration of virtual

00:01:13,049 --> 00:01:16,500
networks in a user-friendly way many of

00:01:15,270 --> 00:01:20,369
these tools have graphical user

00:01:16,500 --> 00:01:22,470
interfaces they use they may use

00:01:20,369 --> 00:01:25,590
containers or virtual machines depending

00:01:22,470 --> 00:01:27,810
on the tool they may use Linux bridging

00:01:25,590 --> 00:01:29,670
or for example in some cases open V

00:01:27,810 --> 00:01:32,759
switch to create the layer two

00:01:29,670 --> 00:01:36,689
connectivity between nodes when would

00:01:32,759 --> 00:01:39,540
you use tools like these I see case

00:01:36,689 --> 00:01:41,759
mostly for creating blackbox test bed

00:01:39,540 --> 00:01:44,430
scenarios or external nodes you could

00:01:41,759 --> 00:01:46,829
create a scenario inside virtual machine

00:01:44,430 --> 00:01:49,140
or running on a physical server and

00:01:46,829 --> 00:01:53,070
connect your external equipment to it

00:01:49,140 --> 00:01:55,649
and and test behavior you could set up

00:01:53,070 --> 00:01:58,350
ad hoc network scenarios for testing or

00:01:55,649 --> 00:01:59,520
for demonstration purposes and you can

00:01:58,350 --> 00:02:02,340
if you're learning about a new

00:01:59,520 --> 00:02:06,180
technology you can practice network

00:02:02,340 --> 00:02:08,069
operations in a safe environment you

00:02:06,180 --> 00:02:10,170
would choose which tool to use based on

00:02:08,069 --> 00:02:11,550
the virtualization technology that is

00:02:10,170 --> 00:02:12,090
most appropriate to the environment

00:02:11,550 --> 00:02:15,060
you're working

00:02:12,090 --> 00:02:16,620
in scripting language supported you may

00:02:15,060 --> 00:02:18,720
be more comfortable using a scripting

00:02:16,620 --> 00:02:21,209
language that you're familiar with and

00:02:18,720 --> 00:02:29,360
on the user interface that you find the

00:02:21,209 --> 00:02:32,190
easiest to use so I wanted to give a few

00:02:29,360 --> 00:02:34,500
real examples of using a tool to just

00:02:32,190 --> 00:02:36,840
investigate some you know scenarios you

00:02:34,500 --> 00:02:39,360
might see in a real Network these are

00:02:36,840 --> 00:02:41,519
fairly basic examples but I think they

00:02:39,360 --> 00:02:43,890
demonstrate how these tools can be used

00:02:41,519 --> 00:02:45,660
in in this case in these examples here

00:02:43,890 --> 00:02:48,180
I'm using something called the core

00:02:45,660 --> 00:02:51,630
network emulator it's based on Linux

00:02:48,180 --> 00:02:55,260
namespaces just has Linux bridging to

00:02:51,630 --> 00:02:56,940
connect nodes together if it's based on

00:02:55,260 --> 00:02:59,370
Python it's written in Python it's easy

00:02:56,940 --> 00:03:02,849
to extend using Python to add

00:02:59,370 --> 00:03:05,849
functionality to it and it has a fairly

00:03:02,849 --> 00:03:07,500
useful graphical user interface and some

00:03:05,849 --> 00:03:09,180
interesting features on top of that

00:03:07,500 --> 00:03:12,930
which make it a little bit easier to use

00:03:09,180 --> 00:03:15,930
for certain use cases so you could

00:03:12,930 --> 00:03:18,060
investigate some TCP troubleshooting you

00:03:15,930 --> 00:03:20,790
could for example demonstrate the impact

00:03:18,060 --> 00:03:22,350
of round-trip delays you could show how

00:03:20,790 --> 00:03:24,870
you might troubleshoot a bad link and

00:03:22,350 --> 00:03:26,850
you can also investigate routing

00:03:24,870 --> 00:03:29,310
protocols routing protocol

00:03:26,850 --> 00:03:31,920
troubleshooting if the network topology

00:03:29,310 --> 00:03:38,099
changes or if you have a failure in a

00:03:31,920 --> 00:03:41,669
routing protocol on a mode so for

00:03:38,099 --> 00:03:44,790
example if we configure the network that

00:03:41,669 --> 00:03:46,709
I previously showed you I'll just go

00:03:44,790 --> 00:03:49,919
back to that network we configure this

00:03:46,709 --> 00:03:52,440
network here and we are running traffic

00:03:49,919 --> 00:03:55,560
from the pcs on the top to the servers

00:03:52,440 --> 00:03:57,359
on the bottom and we want to test

00:03:55,560 --> 00:04:00,930
basically the performance of the network

00:03:57,359 --> 00:04:02,940
if you have been modifying some of the

00:04:00,930 --> 00:04:05,250
for example if you have a custom kernel

00:04:02,940 --> 00:04:06,690
that you're developing and you've made

00:04:05,250 --> 00:04:08,819
some modifications you want to test that

00:04:06,690 --> 00:04:10,829
you could set up this network emulator

00:04:08,819 --> 00:04:13,410
after you've installed the software on

00:04:10,829 --> 00:04:15,329
your laptop and then run the tests that

00:04:13,410 --> 00:04:18,419
you prefer to run in this case I'm just

00:04:15,329 --> 00:04:20,209
running a iperf 3 between PC and the

00:04:18,419 --> 00:04:22,759
server

00:04:20,209 --> 00:04:25,100
with no delay configured you just get a

00:04:22,759 --> 00:04:28,430
theoretical throughput here 10 gigabits

00:04:25,100 --> 00:04:30,680
per second you literally only have the

00:04:28,430 --> 00:04:32,870
100 microseconds of delay and and in the

00:04:30,680 --> 00:04:34,370
in the scenario here so now you're going

00:04:32,870 --> 00:04:36,620
to configure delay on the links in order

00:04:34,370 --> 00:04:38,210
to have a more real-world scenario here

00:04:36,620 --> 00:04:41,120
for example the total round-trip time is

00:04:38,210 --> 00:04:43,520
50 milliseconds and based on another run

00:04:41,120 --> 00:04:47,900
of Viper 3 you can see that you get a

00:04:43,520 --> 00:04:49,910
more realistic transfer rate of or

00:04:47,900 --> 00:04:52,389
basically bandwidth of 10 megabits per

00:04:49,910 --> 00:04:52,389
second

00:04:56,419 --> 00:05:00,740
you're generating bit hairs on a link

00:04:58,460 --> 00:05:03,530
another feature of the core network

00:05:00,740 --> 00:05:05,990
emulator is you can write into graphical

00:05:03,530 --> 00:05:08,180
user interface you can set bit rates but

00:05:05,990 --> 00:05:10,060
in other network emulators and in that

00:05:08,180 --> 00:05:13,789
case all it's doing is its is

00:05:10,060 --> 00:05:15,110
configuring PC for you on your host in

00:05:13,789 --> 00:05:17,419
other network emulators you would

00:05:15,110 --> 00:05:19,580
manually configure net M or something

00:05:17,419 --> 00:05:21,319
like that on one of the nodes in your

00:05:19,580 --> 00:05:25,250
network in order to emulate bit errors

00:05:21,319 --> 00:05:28,639
or or delay and you can run Wireshark or

00:05:25,250 --> 00:05:31,159
any other network any other packet

00:05:28,639 --> 00:05:33,080
capture tool in order to see what's

00:05:31,159 --> 00:05:35,120
going on inside your virtual network and

00:05:33,080 --> 00:05:37,069
you can check every node in your virtual

00:05:35,120 --> 00:05:39,199
network and explore the behavior that's

00:05:37,069 --> 00:05:41,960
going on so in this case of course we

00:05:39,199 --> 00:05:44,449
see the TCP tree transmissions we see

00:05:41,960 --> 00:05:46,849
that we have problems in our network you

00:05:44,449 --> 00:05:53,719
can then basically fix the problem and

00:05:46,849 --> 00:05:55,779
see the problem go away another scenario

00:05:53,719 --> 00:06:00,710
might investigate is a routing failure

00:05:55,779 --> 00:06:02,300
in this case I created what you know not

00:06:00,710 --> 00:06:03,650
not an unreasonable type of scenario

00:06:02,300 --> 00:06:06,680
where someone might miss configure a

00:06:03,650 --> 00:06:11,060
router in this case we go back to the

00:06:06,680 --> 00:06:12,650
original topology here and you see the

00:06:11,060 --> 00:06:15,080
link that goes horizontally across

00:06:12,650 --> 00:06:17,930
between the two between the two rings

00:06:15,080 --> 00:06:20,449
and on on router 9 which is over on the

00:06:17,930 --> 00:06:22,009
right hand side there you know I think a

00:06:20,449 --> 00:06:24,830
reasonable failure would be that

00:06:22,009 --> 00:06:28,839
somebody might try to configure it based

00:06:24,830 --> 00:06:31,009
on a template might say that that

00:06:28,839 --> 00:06:35,360
Ethernet 0 when you my example here is

00:06:31,009 --> 00:06:37,219
Ethernet 0 somebody basically put OSPF

00:06:35,360 --> 00:06:38,860
interface into silent mode on that

00:06:37,219 --> 00:06:41,060
router thinking maybe that thought

00:06:38,860 --> 00:06:43,699
thinking maybe that every Easter was

00:06:41,060 --> 00:06:44,990
connected to a basic connected to a

00:06:43,699 --> 00:06:48,879
management interface or someplace we

00:06:44,990 --> 00:06:50,960
don't want OSPF running so in that case

00:06:48,879 --> 00:06:53,930
you know if you're looking at the OSPF

00:06:50,960 --> 00:06:55,490
database on the node when everything is

00:06:53,930 --> 00:06:58,909
running properly you can see all of the

00:06:55,490 --> 00:07:01,759
networks after a failure occurs after

00:06:58,909 --> 00:07:04,039
the after base galas gifts times though

00:07:01,759 --> 00:07:05,039
then you see that half your network has

00:07:04,039 --> 00:07:07,369
gone away

00:07:05,039 --> 00:07:09,839
these are just really simple scenarios

00:07:07,369 --> 00:07:12,119
you can actually get a lot more complex

00:07:09,839 --> 00:07:16,919
one of the presentations earlier this

00:07:12,119 --> 00:07:19,649
morning about TCP you know radio access

00:07:16,919 --> 00:07:21,270
network driving along the highway core

00:07:19,649 --> 00:07:25,559
network emulator actually has the

00:07:21,270 --> 00:07:28,110
ability to emulate wireless networks to

00:07:25,559 --> 00:07:30,029
basically emulate the the way that links

00:07:28,110 --> 00:07:33,149
are going to switch from one router to

00:07:30,029 --> 00:07:35,789
another as they pass within range along

00:07:33,149 --> 00:07:38,249
along a path and the core network

00:07:35,789 --> 00:07:40,919
emulator can be again extended using its

00:07:38,249 --> 00:07:43,050
Python API to introduce movement so you

00:07:40,919 --> 00:07:44,580
could actually automate the the movement

00:07:43,050 --> 00:07:46,770
of nodes through a network scenario like

00:07:44,580 --> 00:07:49,020
this and if you're making modifications

00:07:46,770 --> 00:07:51,949
to TCP or other software you could run

00:07:49,020 --> 00:07:55,469
that real software on your emulator and

00:07:51,949 --> 00:07:59,819
see the impacts as you as you go through

00:07:55,469 --> 00:08:01,639
that scenario when you're doing network

00:07:59,819 --> 00:08:03,719
emulation like this you sometimes wonder

00:08:01,639 --> 00:08:05,459
well is this I'm not going to get real

00:08:03,719 --> 00:08:08,959
results here it's going to be something

00:08:05,459 --> 00:08:12,330
that I can rely on there have been some

00:08:08,959 --> 00:08:15,779
academic papers written about that one

00:08:12,330 --> 00:08:17,729
of them was an attempt by the people in

00:08:15,779 --> 00:08:20,490
Stanford working specifically with many

00:08:17,729 --> 00:08:24,419
met network emulator to replicate

00:08:20,490 --> 00:08:28,080
results from from real world research

00:08:24,419 --> 00:08:29,969
and from Network simulation and in in

00:08:28,080 --> 00:08:32,699
those cases in most cases they proved

00:08:29,969 --> 00:08:35,039
that the network emulation is it's very

00:08:32,699 --> 00:08:36,569
close to real-world results assuming

00:08:35,039 --> 00:08:38,099
that you're running assuming that you're

00:08:36,569 --> 00:08:40,310
not using up all the resources on the

00:08:38,099 --> 00:08:40,310
host

00:08:43,800 --> 00:08:49,350
this is just another wireshark capture

00:08:46,199 --> 00:08:54,119
of the OSPF links date updates that

00:08:49,350 --> 00:08:56,670
would result from the router failure so

00:08:54,119 --> 00:08:58,079
what are the tools that you might

00:08:56,670 --> 00:09:00,299
consider using and why would you

00:08:58,079 --> 00:09:03,869
consider using them and again I point

00:09:00,299 --> 00:09:06,569
out that these tools are these tools are

00:09:03,869 --> 00:09:08,790
really useful for people that that want

00:09:06,569 --> 00:09:12,660
the convenience of setting up a network

00:09:08,790 --> 00:09:15,809
on their laptop they make it easy for

00:09:12,660 --> 00:09:18,149
you to to basically just try out new

00:09:15,809 --> 00:09:19,529
topologies new scenarios but all of the

00:09:18,149 --> 00:09:20,639
software and the configuration and

00:09:19,529 --> 00:09:21,829
everything like that still needs to be

00:09:20,639 --> 00:09:24,089
done by the user

00:09:21,829 --> 00:09:25,619
you're basically testing your own

00:09:24,089 --> 00:09:28,470
software on these nodes you could be

00:09:25,619 --> 00:09:31,739
running real soft around these nodes and

00:09:28,470 --> 00:09:33,689
and so you're looking at emulating the

00:09:31,739 --> 00:09:35,939
functionality in your network you're not

00:09:33,689 --> 00:09:37,470
necessarily you know even though

00:09:35,939 --> 00:09:38,790
performance should be close to the

00:09:37,470 --> 00:09:41,369
real-world network as long as you're

00:09:38,790 --> 00:09:42,959
writing very small networks here it's

00:09:41,369 --> 00:09:45,269
not like simulation it's not like using

00:09:42,959 --> 00:09:48,299
for example ns3 or something like that

00:09:45,269 --> 00:09:51,449
where you can where you're really

00:09:48,299 --> 00:09:53,549
looking to ensure that you have a good

00:09:51,449 --> 00:09:55,920
view of the performance of these nodes

00:09:53,549 --> 00:09:58,290
here we're emulating the functionality

00:09:55,920 --> 00:10:00,350
are things working the way I expect if

00:09:58,290 --> 00:10:03,029
you create a scenario at one of these

00:10:00,350 --> 00:10:08,339
network emulators what you're trying to

00:10:03,029 --> 00:10:10,170
do is its explore unexpected unexpected

00:10:08,339 --> 00:10:11,549
functionality that may occur as you're

00:10:10,170 --> 00:10:14,129
as you're working through those software

00:10:11,549 --> 00:10:17,189
that you're developing the core network

00:10:14,129 --> 00:10:20,009
emulator this is just a screenshot again

00:10:17,189 --> 00:10:22,439
it's based on Linux namespaces uses

00:10:20,009 --> 00:10:26,100
Linux bridging it has a Python API so

00:10:22,439 --> 00:10:27,990
it's very extendable and and its file

00:10:26,100 --> 00:10:30,089
format that it uses when you're when

00:10:27,990 --> 00:10:31,589
you're saving Network scenarios is well

00:10:30,089 --> 00:10:33,929
it can be a standard text file it can

00:10:31,589 --> 00:10:39,299
also be XML and you can also export it

00:10:33,929 --> 00:10:40,889
as a Python script again because it's

00:10:39,299 --> 00:10:42,149
extendable using Python then after

00:10:40,889 --> 00:10:43,589
you've exported the Python script you

00:10:42,149 --> 00:10:45,629
can then do some additional editing and

00:10:43,589 --> 00:10:48,989
actually create an automated test

00:10:45,629 --> 00:10:51,059
scenario for yourself as well so I use

00:10:48,989 --> 00:10:53,399
the the core network emulator a fair bit

00:10:51,059 --> 00:10:55,750
I will say it gets a little bit in the

00:10:53,399 --> 00:10:57,430
way because the

00:10:55,750 --> 00:11:00,639
just the way that it works uses a

00:10:57,430 --> 00:11:03,699
paradigm of network services so since it

00:11:00,639 --> 00:11:05,949
uses namespaces this particular network

00:11:03,699 --> 00:11:07,600
emulator really tries to limit the

00:11:05,949 --> 00:11:09,730
amount of resources every single node in

00:11:07,600 --> 00:11:12,790
the network uses so you have to know

00:11:09,730 --> 00:11:14,800
upfront which parts of the file system

00:11:12,790 --> 00:11:16,540
you need to mount on every node you need

00:11:14,800 --> 00:11:18,730
to define the mountain named spaces and

00:11:16,540 --> 00:11:20,110
in addition to the network namespaces

00:11:18,730 --> 00:11:22,300
that are automatically configured for

00:11:20,110 --> 00:11:23,439
you in order to make sure that your

00:11:22,300 --> 00:11:25,060
software is going to work properly on

00:11:23,439 --> 00:11:25,779
every virtual node in this network so

00:11:25,060 --> 00:11:27,639
you have to have a little bit of

00:11:25,779 --> 00:11:30,100
knowledge about what your software

00:11:27,639 --> 00:11:31,420
requires if it's not already set up for

00:11:30,100 --> 00:11:33,850
you because there's a lot of network

00:11:31,420 --> 00:11:35,560
services already available in the

00:11:33,850 --> 00:11:38,620
templates that come with the core

00:11:35,560 --> 00:11:40,180
network emulator and you can define your

00:11:38,620 --> 00:11:42,129
own services and add them in so then

00:11:40,180 --> 00:11:43,959
they become a template for anyone in

00:11:42,129 --> 00:11:45,579
your company who comes after you that

00:11:43,959 --> 00:11:49,990
just wants to use that it then becomes

00:11:45,579 --> 00:11:51,910
point-and-click for them immunes is

00:11:49,990 --> 00:11:53,529
another interesting network emulator the

00:11:51,910 --> 00:11:55,779
core network emulator was originally a

00:11:53,529 --> 00:11:58,509
fork of EMU's so they both got their

00:11:55,779 --> 00:12:00,420
separate ways since then immunes has

00:11:58,509 --> 00:12:02,920
been completely rewritten for Linux it

00:12:00,420 --> 00:12:05,439
works basically all of the notes are

00:12:02,920 --> 00:12:08,230
docker containers open V switch is the

00:12:05,439 --> 00:12:10,180
switching technology but it's similarly

00:12:08,230 --> 00:12:12,490
it uses Python it's just as extendable

00:12:10,180 --> 00:12:15,430
and uses a similar file format for

00:12:12,490 --> 00:12:21,069
saving the file topology or the network

00:12:15,430 --> 00:12:24,430
topology Kleenex is a very simple and

00:12:21,069 --> 00:12:28,959
easy to use network emulator all of the

00:12:24,430 --> 00:12:31,209
notes here are KVM notes the original

00:12:28,959 --> 00:12:33,600
version of Kleenex used you know tap and

00:12:31,209 --> 00:12:36,129
tongue for connecting nodes together

00:12:33,600 --> 00:12:37,750
since then the development team has

00:12:36,129 --> 00:12:42,009
created something they call the clinic

00:12:37,750 --> 00:12:44,009
switch but the every node there is

00:12:42,009 --> 00:12:46,620
basically a KVM machine if you wanted to

00:12:44,009 --> 00:12:48,970
if you wanted to use a different

00:12:46,620 --> 00:12:51,100
different Linux distributions different

00:12:48,970 --> 00:12:56,050
kernels this is the type of network

00:12:51,100 --> 00:12:58,540
emulator you would use the scripting

00:12:56,050 --> 00:13:01,209
language for this is just straight the

00:12:58,540 --> 00:13:02,860
normal shell scripts there's a kleenex

00:13:01,209 --> 00:13:04,870
command line that comes along with

00:13:02,860 --> 00:13:07,149
clinics and you use basically clinics

00:13:04,870 --> 00:13:08,610
commands to execute on every node and

00:13:07,149 --> 00:13:10,470
when you

00:13:08,610 --> 00:13:12,240
the grisly save the topology or it just

00:13:10,470 --> 00:13:14,130
saves a big long script of clinics

00:13:12,240 --> 00:13:15,630
commands that sets that up then

00:13:14,130 --> 00:13:19,019
afterwards you can go back and edit that

00:13:15,630 --> 00:13:20,430
and again create very complex Network

00:13:19,019 --> 00:13:24,860
scenarios where every node is fully

00:13:20,430 --> 00:13:24,860
configured all on the same script

00:13:27,440 --> 00:13:33,060
meaning that is a special case network

00:13:30,540 --> 00:13:34,560
emulator you know the nodes in E net are

00:13:33,060 --> 00:13:37,950
based on network namespaces the

00:13:34,560 --> 00:13:40,560
switching is based on open V switch it's

00:13:37,950 --> 00:13:42,240
also based on Python and you can export

00:13:40,560 --> 00:13:45,300
the network topology as a Python script

00:13:42,240 --> 00:13:46,350
edit it and again do some pretty

00:13:45,300 --> 00:13:48,839
interesting things with the network

00:13:46,350 --> 00:13:50,550
topology you can extend it to create new

00:13:48,839 --> 00:13:52,230
types of nodes so it's not just for s

00:13:50,550 --> 00:13:54,510
the end with a little bit of work you

00:13:52,230 --> 00:13:55,920
can make many network with basically

00:13:54,510 --> 00:13:57,540
make those nodes work like a standard

00:13:55,920 --> 00:14:02,060
router for example you end up using a

00:13:57,540 --> 00:14:02,060
host and turning it into a router

00:14:03,890 --> 00:14:08,519
meaning that seems to be very popular as

00:14:06,269 --> 00:14:10,440
Sdn it becomes popular I'll just point

00:14:08,519 --> 00:14:12,540
out here that you know some individuals

00:14:10,440 --> 00:14:15,480
have extended mini net and there's a

00:14:12,540 --> 00:14:20,279
project called mini net Wi-Fi that that

00:14:15,480 --> 00:14:22,470
basically emulates Wireless so they put

00:14:20,279 --> 00:14:24,510
a Wi-Fi driver in there and then you can

00:14:22,470 --> 00:14:26,010
actually with the with the Python

00:14:24,510 --> 00:14:27,839
language you can script how these nodes

00:14:26,010 --> 00:14:29,610
move around and you can actually have a

00:14:27,839 --> 00:14:32,329
fairly dynamic situation where nodes are

00:14:29,610 --> 00:14:34,170
coming in and out of range of each other

00:14:32,329 --> 00:14:38,339
but that's really only useful for

00:14:34,170 --> 00:14:40,709
network suffered fine networking vnx and

00:14:38,339 --> 00:14:43,199
net kit are the first two network

00:14:40,709 --> 00:14:44,880
emulator said I ever came across they're

00:14:43,199 --> 00:14:50,430
both on a based on command-line

00:14:44,880 --> 00:14:53,850
interface you would use DMX because it

00:14:50,430 --> 00:14:56,990
supports KBM or containers you would use

00:14:53,850 --> 00:15:01,110
neck kit if you wanted to use user mode

00:14:56,990 --> 00:15:03,839
user mode Linux each one has a unique

00:15:01,110 --> 00:15:05,010
network description language each one

00:15:03,839 --> 00:15:06,810
but what's interesting about both of

00:15:05,010 --> 00:15:08,699
these is they're really designed for

00:15:06,810 --> 00:15:10,230
teaching networking to people so they

00:15:08,699 --> 00:15:12,480
come with many prepackaged network

00:15:10,230 --> 00:15:14,220
emulation scenarios then they're created

00:15:12,480 --> 00:15:17,240
for university level networking courses

00:15:14,220 --> 00:15:19,560
so if you want to just set something up

00:15:17,240 --> 00:15:21,000
you could use one of these on network

00:15:19,560 --> 00:15:21,910
emulators and use one of the prepackaged

00:15:21,000 --> 00:15:28,660
scripts that comes

00:15:21,910 --> 00:15:30,360
I won't say a lot about gns3 I'm sure

00:15:28,660 --> 00:15:33,730
most people here are familiar with it

00:15:30,360 --> 00:15:35,350
it's mostly used for you know running

00:15:33,730 --> 00:15:37,150
commercial routers in an emulated

00:15:35,350 --> 00:15:40,000
environment but I will say it is

00:15:37,150 --> 00:15:42,790
becoming more linux friendly with recent

00:15:40,000 --> 00:15:46,180
releases and with release 2.0 which

00:15:42,790 --> 00:15:48,970
should be coming out soon it might be I

00:15:46,180 --> 00:15:51,640
might consider actually that it's usable

00:15:48,970 --> 00:15:54,820
as a network emulator for emulating

00:15:51,640 --> 00:15:59,620
Linux nodes it's not really based on

00:15:54,820 --> 00:16:01,210
Linux networking technology a new a new

00:15:59,620 --> 00:16:04,090
arrival in the network emulation space

00:16:01,210 --> 00:16:05,890
is the is the eve network emulator again

00:16:04,090 --> 00:16:09,040
also really focused more on the

00:16:05,890 --> 00:16:11,560
commercial routers but this particular

00:16:09,040 --> 00:16:13,660
network emulator is also Linux friendly

00:16:11,560 --> 00:16:15,550
just not well documented for Linux but

00:16:13,660 --> 00:16:21,580
you can you can use it to run on Linux

00:16:15,550 --> 00:16:23,380
nodes I won't say much about it just for

00:16:21,580 --> 00:16:25,690
people that are downloading this

00:16:23,380 --> 00:16:28,870
presentation I've saved a series of

00:16:25,690 --> 00:16:31,750
links here so I won't go through that I

00:16:28,870 --> 00:16:33,970
will say that in conclusion you know I

00:16:31,750 --> 00:16:36,010
wanted to sort of raise the awareness of

00:16:33,970 --> 00:16:40,830
what tools are possible for people that

00:16:36,010 --> 00:16:44,950
really want to work in on their own

00:16:40,830 --> 00:16:48,420
laptop in a you know create different

00:16:44,950 --> 00:16:54,040
scenarios in an ad hoc manner and

00:16:48,420 --> 00:16:55,540
basically use real Linux software in an

00:16:54,040 --> 00:16:57,070
emulated environment so they can

00:16:55,540 --> 00:16:58,330
investigate the behavior of other

00:16:57,070 --> 00:16:59,710
software they're writing or just

00:16:58,330 --> 00:17:05,250
software that they're that they're

00:16:59,710 --> 00:17:05,250
learning about thank you very much

00:17:07,170 --> 00:17:20,949
[Applause]

00:17:09,630 --> 00:17:22,959
questions any questions do you know what

00:17:20,949 --> 00:17:25,480
meaning it Wi-Fi uses so we have

00:17:22,959 --> 00:17:27,990
something called hardware SIM to the

00:17:25,480 --> 00:17:30,550
kernel driver that you add stations and

00:17:27,990 --> 00:17:33,160
access points and run all the necessary

00:17:30,550 --> 00:17:35,050
software curious if it uses that or if

00:17:33,160 --> 00:17:37,210
it has its own sort of because you said

00:17:35,050 --> 00:17:38,890
it has its driver yeah he uses hardware

00:17:37,210 --> 00:17:41,230
say music okay we live in her fluid it

00:17:38,890 --> 00:17:47,200
uses the infrastructure we have there

00:17:41,230 --> 00:17:49,390
okay so in your view Koval

00:17:47,200 --> 00:17:52,000
immunes as kind of intrigued by coal

00:17:49,390 --> 00:17:55,150
more than anything else because you live

00:17:52,000 --> 00:17:58,900
in Uxbridge which one is sort of more

00:17:55,150 --> 00:18:01,390
active development right now in terms of

00:17:58,900 --> 00:18:04,570
the community I would say that well many

00:18:01,390 --> 00:18:06,370
that is by far the most active core is

00:18:04,570 --> 00:18:08,440
reasonably active they have a mailing

00:18:06,370 --> 00:18:11,800
list and my mailing list is very active

00:18:08,440 --> 00:18:14,890
however in terms of getting fixes into

00:18:11,800 --> 00:18:16,390
core there they seem to slow down as few

00:18:14,890 --> 00:18:18,030
years ago they were very fast lately

00:18:16,390 --> 00:18:22,510
they're slow and immunes

00:18:18,030 --> 00:18:25,450
immunes I would say they're slow there

00:18:22,510 --> 00:18:28,450
they sort of rewrote the rewrote it

00:18:25,450 --> 00:18:33,970
about one year ago and since then there

00:18:28,450 --> 00:18:36,090
hasn't been much activity okay any other

00:18:33,970 --> 00:18:36,090
questions

00:18:42,580 --> 00:18:46,760
just to point out that I think I'm a

00:18:44,929 --> 00:18:49,399
tester would work out so very well in

00:18:46,760 --> 00:18:50,870
this environment you know I was thinking

00:18:49,399 --> 00:18:51,529
that when I saw your presentation I was

00:18:50,870 --> 00:18:54,140
thinking

00:18:51,529 --> 00:18:55,399
similar idea as a scripting language to

00:18:54,140 --> 00:18:57,919
define a topology

00:18:55,399 --> 00:19:00,080
you know like rather than using real

00:18:57,919 --> 00:19:02,990
machine which is what I do you could use

00:19:00,080 --> 00:19:05,659
these virtual machines or namespaces and

00:19:02,990 --> 00:19:07,940
judgment tests or CDs to specify you

00:19:05,659 --> 00:19:11,149
know the transfers collect all the data

00:19:07,940 --> 00:19:12,590
analyze the data try to point you could

00:19:11,149 --> 00:19:16,399
combine it with exploit one of these

00:19:12,590 --> 00:19:18,500
yeah yeah yes you do you think I'll

00:19:16,399 --> 00:19:21,350
honesty will fit as well I don't know

00:19:18,500 --> 00:19:26,409
here is yeah so there's another one ln

00:19:21,350 --> 00:19:28,399
st which you may have not been aware

00:19:26,409 --> 00:19:31,870
okay we'll send you to the penalty box

00:19:28,399 --> 00:19:31,870

YouTube URL: https://www.youtube.com/watch?v=lSENBSPjN6M


