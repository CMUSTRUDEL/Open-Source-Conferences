Title: Netdev 2.1 - Droplet: DDoS countermeasures powered by BPF + XDP
Publication date: 2017-05-01
Playlist: Netdev 2.1
Description: 
	This talk was given by Martin Lau on Apr 6th/2017 at Netdev 2.1 in Montreal on behalf of Huapeng Zhou, Doug Porter, Ryan Tierney, and Nikita Shirokov

Droplet is a generic framework to implement bpf policers to drop packets at the earliest stage in the networking stack, preferably at line rate. It's born for anti-DDoS and is the preferred infrastructure at Facebook to plug in DDoS countermeasures. This talk presents the overall architecture of Droplet and discusses a few issues in developing and rolling out the software.

Content at: https://www.netdevconf.org/2.1/session.html?zhou
Captions: 
	00:00:00,030 --> 00:00:08,220
hi good morning my name is Martin now I

00:00:03,959 --> 00:00:10,889
work in a facebook kernel team first of

00:00:08,220 --> 00:00:13,889
all I'm not a speaker you are expecting

00:00:10,889 --> 00:00:16,770
today the guys who really did this work

00:00:13,889 --> 00:00:18,630
could I make it today so I'm going to

00:00:16,770 --> 00:00:20,189
present on their behalf I happen to work

00:00:18,630 --> 00:00:24,810
with them closely from the kernel sign

00:00:20,189 --> 00:00:29,750
so I know enough details to know what

00:00:24,810 --> 00:00:32,399
I'm talking about hopefully and secondly

00:00:29,750 --> 00:00:33,870
instead of only talking the details I

00:00:32,399 --> 00:00:37,649
want to extend a copy a little bit today

00:00:33,870 --> 00:00:41,010
to also talk about our another X people

00:00:37,649 --> 00:00:46,320
to production use case which is our l4

00:00:41,010 --> 00:00:49,980
load balancer so since we don't we

00:00:46,320 --> 00:00:52,500
already have one Beatles protection help

00:00:49,980 --> 00:00:54,510
before I'm going to switch the topic a

00:00:52,500 --> 00:00:57,570
little bit to talk about our l4o balance

00:00:54,510 --> 00:01:01,340
of course and then I will talk about our

00:00:57,570 --> 00:01:03,719
DDoS protection mechanism of three more

00:01:01,340 --> 00:01:06,360
before we begin I want to recap a little

00:01:03,719 --> 00:01:09,180
bit how people usually do load balancing

00:01:06,360 --> 00:01:12,210
on the web traffic it's pretty common

00:01:09,180 --> 00:01:13,830
although the ends of requests come in it

00:01:12,210 --> 00:01:16,470
hit our level for low balance of course

00:01:13,830 --> 00:01:20,310
what it usually does is you look at the

00:01:16,470 --> 00:01:23,159
TCP IP header find a five couple to the

00:01:20,310 --> 00:01:25,890
use of shouting or consistent hashing

00:01:23,159 --> 00:01:28,740
people usually do it to find the pilot

00:01:25,890 --> 00:01:31,560
to find a policy which is all levels

00:01:28,740 --> 00:01:35,159
seven no balancer and then send an ISA

00:01:31,560 --> 00:01:37,619
traffic to it on with return path the

00:01:35,159 --> 00:01:40,200
process and respond hourly to the end

00:01:37,619 --> 00:01:46,590
user it doesn't go through the LFO load

00:01:40,200 --> 00:01:49,770
balancer on ship so we call L follow

00:01:46,590 --> 00:01:53,009
balancer ship arm so we use to use the

00:01:49,770 --> 00:01:57,350
IP us to do the L follow balancing

00:01:53,009 --> 00:02:00,570
functionality we now move to the XDP

00:01:57,350 --> 00:02:04,189
mechanism in order to get better

00:02:00,570 --> 00:02:04,189
performance and better throughput

00:02:06,689 --> 00:02:12,090
so before I I hope you can see this

00:02:10,289 --> 00:02:14,580
graph well

00:02:12,090 --> 00:02:17,640
so before I type into the details I want

00:02:14,580 --> 00:02:21,540
to show some graph and data first on on

00:02:17,640 --> 00:02:24,870
the performance we got up to move to XDP

00:02:21,540 --> 00:02:29,790
so at the bottom graph is the packet per

00:02:24,870 --> 00:02:33,690
second so the top line is the machine

00:02:29,790 --> 00:02:35,879
running X wondering XD P so the bottom

00:02:33,690 --> 00:02:39,440
line is other machine running IP we s as

00:02:35,879 --> 00:02:45,000
you can see we can get much better

00:02:39,440 --> 00:02:48,540
throughput with x DP in one case we can

00:02:45,000 --> 00:02:54,120
get at most 10 X difference between X DT

00:02:48,540 --> 00:02:56,970
and Hyperion's the the top graph is

00:02:54,120 --> 00:02:59,730
plotting the CPU idle the top line is

00:02:56,970 --> 00:03:03,329
also are plotting the CPI idle

00:02:59,730 --> 00:03:07,739
percentage of the x DP program or the

00:03:03,329 --> 00:03:09,780
machine running x vp as you can see the

00:03:07,739 --> 00:03:12,389
bottom lines are the machine running IPs

00:03:09,780 --> 00:03:15,540
if you look at both graphs together you

00:03:12,389 --> 00:03:17,940
can see the machine running XP t getting

00:03:15,540 --> 00:03:21,690
much better food put at the same time it

00:03:17,940 --> 00:03:29,040
also doesn't burn as much CPU as the

00:03:21,690 --> 00:03:31,260
machine running IPs so now I'm going to

00:03:29,040 --> 00:03:38,239
I'm going to type in some details what

00:03:31,260 --> 00:03:40,700
the x DP program doing to to realize the

00:03:38,239 --> 00:03:45,329
LFO load balancing functionality is

00:03:40,700 --> 00:03:50,130
amazingly simple I can conquer it into

00:03:45,329 --> 00:03:53,849
two slides so the first line is so f

00:03:50,130 --> 00:03:56,370
almost any PPA program is going to use

00:03:53,849 --> 00:03:59,010
some bad you know in our alpha load

00:03:56,370 --> 00:04:00,660
balancer case we only have two maps the

00:03:59,010 --> 00:04:02,549
first map is a shortened map or

00:04:00,660 --> 00:04:08,310
consistent hashing map that people

00:04:02,549 --> 00:04:09,750
usually do for doing our no balancing so

00:04:08,310 --> 00:04:12,239
the user space program will generate

00:04:09,750 --> 00:04:14,910
this map based on deposited based on a

00:04:12,239 --> 00:04:17,820
policy IP scene has to low balance the

00:04:14,910 --> 00:04:20,220
traffic - it could be a consistent

00:04:17,820 --> 00:04:23,250
hashing algorithm or

00:04:20,220 --> 00:04:27,120
any reasonable shutting algorithm you

00:04:23,250 --> 00:04:29,610
can come up with and the second map you

00:04:27,120 --> 00:04:33,780
say allow your map actually we use it as

00:04:29,610 --> 00:04:38,070
a cache um I will talk about it in a

00:04:33,780 --> 00:04:41,040
moment so when when when there's new TCP

00:04:38,070 --> 00:04:43,490
connection coming it means the VIP City

00:04:41,040 --> 00:04:46,010
sing packet will first look up the

00:04:43,490 --> 00:04:49,260
charting map for supergirl

00:04:46,010 --> 00:04:51,690
which policy is you sent to so that you

00:04:49,260 --> 00:04:54,630
can figure out the policy IP and in send

00:04:51,690 --> 00:04:57,690
the TCP syn packet to that policy at the

00:04:54,630 --> 00:05:00,480
same time you will it will create an

00:04:57,690 --> 00:05:04,110
entry for that piece people to remember

00:05:00,480 --> 00:05:06,650
where or which cross the IP it has sent

00:05:04,110 --> 00:05:09,450
this TC 2 for 2

00:05:06,650 --> 00:05:11,640
so when they when the following Packer

00:05:09,450 --> 00:05:14,940
come in for the sentence people you can

00:05:11,640 --> 00:05:19,260
look up the LRU map to go where we have

00:05:14,940 --> 00:05:21,870
sent this TCP folk before so that is to

00:05:19,260 --> 00:05:25,890
ensure we always send the TCP for to the

00:05:21,870 --> 00:05:27,720
same policy machine otherwise if we send

00:05:25,890 --> 00:05:31,580
it to a definition you will get this

00:05:27,720 --> 00:05:31,580
creepy set things like that

00:05:36,240 --> 00:05:41,580
so next I want to talk about the second

00:05:38,880 --> 00:05:45,060
part of the hour of our XDP program is

00:05:41,580 --> 00:05:48,510
so how do I really how do we how do we

00:05:45,060 --> 00:05:51,030
transmit a packet out so at the first

00:05:48,510 --> 00:05:54,840
green packet is the packet we've got

00:05:51,030 --> 00:05:57,660
from the end user and then the xpp

00:05:54,840 --> 00:06:01,100
program will extend the head of this

00:05:57,660 --> 00:06:05,280
packet to so that it has enough Headroom

00:06:01,100 --> 00:06:10,080
for us to put in another hydrator to it

00:06:05,280 --> 00:06:11,639
arm the IP header is simply the Alpha

00:06:10,080 --> 00:06:14,250
lobe answer IP as a sauce the

00:06:11,639 --> 00:06:15,930
destination is the proxy IP that we have

00:06:14,250 --> 00:06:18,440
just figure by looking up the map I just

00:06:15,930 --> 00:06:21,960
showed you

00:06:18,440 --> 00:06:25,110
so the extent you copy PF x vp I just

00:06:21,960 --> 00:06:31,039
had extended Headroom and capture it in

00:06:25,110 --> 00:06:31,039
into another IP header and then send out

00:06:35,840 --> 00:06:44,930
so that's it it's very simple you can

00:06:41,210 --> 00:06:48,050
imagine the the BBFC cook is a couple

00:06:44,930 --> 00:06:50,750
hundred nights long and then boom we get

00:06:48,050 --> 00:06:54,200
the performance improvement I just so to

00:06:50,750 --> 00:06:58,430
Indy in the first graph until next I

00:06:54,200 --> 00:07:01,520
want to talk about a job that is the is

00:06:58,430 --> 00:07:05,960
the demon or surface of the framework we

00:07:01,520 --> 00:07:10,820
build to to to do the peepee dance

00:07:05,960 --> 00:07:14,229
protection first I want to I also want

00:07:10,820 --> 00:07:17,660
to start with a graph so here is a

00:07:14,229 --> 00:07:20,900
traffic graph that I capture from the

00:07:17,660 --> 00:07:24,260
l4o balancer or the ship machine we have

00:07:20,900 --> 00:07:27,530
in production so you can see from time

00:07:24,260 --> 00:07:30,710
to time we see we see significant or

00:07:27,530 --> 00:07:36,710
major traffic spike those are the

00:07:30,710 --> 00:07:40,190
thoughts apparently you're getting so

00:07:36,710 --> 00:07:43,940
when we when when we start on this job

00:07:40,190 --> 00:07:47,090
lab project we have a dream this we want

00:07:43,940 --> 00:07:49,640
we want to do in in this droplet service

00:07:47,090 --> 00:07:52,430
we want to drop the packet as fast as

00:07:49,640 --> 00:07:55,010
possible without burning a lot of CPU

00:07:52,430 --> 00:07:57,440
and we want to drop it as early as

00:07:55,010 --> 00:08:00,440
possible we want a job it at the leg

00:07:57,440 --> 00:08:03,500
level or at the driver never lot and IDs

00:08:00,440 --> 00:08:05,780
that are entities it is done and other

00:08:03,500 --> 00:08:08,510
things we want is program ability and

00:08:05,780 --> 00:08:11,210
flexibility because we want to be ad

00:08:08,510 --> 00:08:15,050
fast we want to if someone come up with

00:08:11,210 --> 00:08:17,810
a bad education or or dropping stared

00:08:15,050 --> 00:08:20,600
strategy we should be able to develop

00:08:17,810 --> 00:08:24,139
this program and deploy to our whole

00:08:20,600 --> 00:08:26,300
free whoo-hoo whole data center or

00:08:24,139 --> 00:08:31,310
datacenter as as quickly as possible

00:08:26,300 --> 00:08:34,610
without a kernel we would and xtp drop

00:08:31,310 --> 00:08:39,320
our can realize of it and we can job it

00:08:34,610 --> 00:08:41,779
at a halfway limited way so the

00:08:39,320 --> 00:08:43,070
framework you see with basic job is

00:08:41,779 --> 00:08:45,500
basically a get

00:08:43,070 --> 00:08:48,560
daemon running in all machine where does

00:08:45,500 --> 00:08:49,940
is it takes the BPI program we didn't

00:08:48,560 --> 00:08:51,740
see

00:08:49,940 --> 00:08:56,060
usually we can buy the security expert

00:08:51,740 --> 00:08:59,420
and and then the demon will compile it

00:08:56,060 --> 00:09:01,910
at the one time by using a CPCC library

00:08:59,420 --> 00:09:06,140
and we were lower to the kernel populate

00:09:01,910 --> 00:09:09,680
the map with with IP address or some

00:09:06,140 --> 00:09:12,470
packet secretary we recognized for the

00:09:09,680 --> 00:09:18,649
BPA program to map with and then we run

00:09:12,470 --> 00:09:21,740
it in XTP our hope in the neck so the

00:09:18,649 --> 00:09:24,500
last one I want to talk about is how how

00:09:21,740 --> 00:09:28,040
do we place all the BPI program together

00:09:24,500 --> 00:09:30,290
in in our production I told you we have

00:09:28,040 --> 00:09:32,480
at least two program we are running in

00:09:30,290 --> 00:09:35,750
the elf a load balancer already one is

00:09:32,480 --> 00:09:38,089
doing the alvaro balancers L & R one is

00:09:35,750 --> 00:09:41,600
it's the job not doing the packet job to

00:09:38,089 --> 00:09:46,610
do to do to do the advanced DDoS

00:09:41,600 --> 00:09:50,510
protection but there's only one xbp hope

00:09:46,610 --> 00:09:53,540
in the in the neck driver and so

00:09:50,510 --> 00:09:56,630
patent-free optically it can only want

00:09:53,540 --> 00:10:00,920
one program but but that's way to train

00:09:56,630 --> 00:10:04,850
the program together arm is in the BBFC

00:10:00,920 --> 00:10:08,000
scott telco and you can tell call with

00:10:04,850 --> 00:10:09,980
the program away so you can pop your

00:10:08,000 --> 00:10:12,529
populate a BPA program array like that

00:10:09,980 --> 00:10:15,020
that one way we are populating it in our

00:10:12,529 --> 00:10:17,560
production now so the first BPA program

00:10:15,020 --> 00:10:20,270
is called xdp dumb

00:10:17,560 --> 00:10:23,089
it doesn't use it doesn't always to be

00:10:20,270 --> 00:10:25,160
there it this program will be dead if we

00:10:23,089 --> 00:10:27,610
need to do some debugging just like TCP

00:10:25,160 --> 00:10:31,820
dump it would dump the packet out and

00:10:27,610 --> 00:10:34,459
and you can imagine a BPA programmer of

00:10:31,820 --> 00:10:36,380
the XDP thumb is some if if it matched

00:10:34,459 --> 00:10:39,110
something we want to debug then you will

00:10:36,380 --> 00:10:41,240
write out it to the probe to run output

00:10:39,110 --> 00:10:42,860
another user space we will process it

00:10:41,240 --> 00:10:46,130
and then clean it likely to be done

00:10:42,860 --> 00:10:49,970
format and then the legs and then when a

00:10:46,130 --> 00:10:51,709
packet finish run XP be dumb finish

00:10:49,970 --> 00:10:53,050
processing this packet you will go to

00:10:51,709 --> 00:10:55,670
the legs

00:10:53,050 --> 00:10:57,560
BPF program which is droplet I just

00:10:55,670 --> 00:10:59,660
thought about to decide whether it

00:10:57,560 --> 00:11:02,420
should be dropped is a host I'll packet

00:10:59,660 --> 00:11:03,200
or not if not then we will pass to the

00:11:02,420 --> 00:11:05,840
next

00:11:03,200 --> 00:11:09,650
vpf program which is our level photo

00:11:05,840 --> 00:11:11,230
balancer they decide which policy which

00:11:09,650 --> 00:11:14,000
deposit you're next

00:11:11,230 --> 00:11:22,370
but if it is hotel Packer with dropped

00:11:14,000 --> 00:11:23,060
it at a job net already that's all I

00:11:22,370 --> 00:11:41,660
have today

00:11:23,060 --> 00:11:45,470
um questions question okay there were

00:11:41,660 --> 00:11:47,540
questions can we ask you the same

00:11:45,470 --> 00:11:52,420
question we asked the previous speaker

00:11:47,540 --> 00:11:54,800
Ronnie's question so why no why are you

00:11:52,420 --> 00:11:59,240
why do you need XTP when you can drop in

00:11:54,800 --> 00:12:02,500
hardware I'm just going to ask her oneís

00:11:59,240 --> 00:12:06,260
question okay what what makes are using

00:12:02,500 --> 00:12:08,630
know which hardware Nick it's who's Ben

00:12:06,260 --> 00:12:10,850
who's the vendor I'm not sure I think

00:12:08,630 --> 00:12:15,290
you can tell me okay that's fine a

00:12:10,850 --> 00:12:23,630
penalty box for you anybody else have a

00:12:15,290 --> 00:12:26,330
question or yeah so are you

00:12:23,630 --> 00:12:28,790
at what level of packets are you looking

00:12:26,330 --> 00:12:32,540
I'm looking at level 3 level 4 days I'll

00:12:28,790 --> 00:12:34,610
adjust the level 2 headers we need for

00:12:32,540 --> 00:12:36,290
the it depends on which BPA program

00:12:34,610 --> 00:12:38,300
talking about if you're talking about a

00:12:36,290 --> 00:12:44,920
level 4 no balancer we have to look at

00:12:38,300 --> 00:12:44,920
the tcp/ip five couple so M is at alpha

00:12:46,720 --> 00:12:52,480
so one thing I think is really

00:12:48,910 --> 00:12:53,980
interesting about your your flow in your

00:12:52,480 --> 00:12:55,870
XP programs is that you have that

00:12:53,980 --> 00:12:59,170
perfect respect level at the beginning

00:12:55,870 --> 00:13:00,820
with the dump call have you thought

00:12:59,170 --> 00:13:03,910
about thinking us a level further where

00:13:00,820 --> 00:13:06,220
you could use you could put together a

00:13:03,910 --> 00:13:08,290
whole bunch of tracing state as you go

00:13:06,220 --> 00:13:09,940
through the pipeline and then when

00:13:08,290 --> 00:13:11,860
you're finished with the xdp programming

00:13:09,940 --> 00:13:17,380
the returning XDP drop arrives to be

00:13:11,860 --> 00:13:19,810
transmitted emitting a perfect itself

00:13:17,380 --> 00:13:21,790
the decision that the XDP program made

00:13:19,810 --> 00:13:23,680
and that way you could you could debug

00:13:21,790 --> 00:13:26,430
your xvp program using all that this

00:13:23,680 --> 00:13:31,080
kind of pseudo introspection mechanism

00:13:26,430 --> 00:13:33,100
you mean to save the kind of housing

00:13:31,080 --> 00:13:36,250
dancing so I'm saying you make a

00:13:33,100 --> 00:13:39,700
decision in the x2p program be it drop

00:13:36,250 --> 00:13:43,630
or transmit and then you put that in the

00:13:39,700 --> 00:13:45,100
in the perfect end as well as perhaps

00:13:43,630 --> 00:13:47,320
some of the packet headers because that

00:13:45,100 --> 00:13:50,400
way you could debug the xdp program if

00:13:47,320 --> 00:13:52,750
you had this information all in one blob

00:13:50,400 --> 00:13:54,220
so the one thing people keep asking

00:13:52,750 --> 00:13:56,680
about is there's a lack of introspection

00:13:54,220 --> 00:13:58,870
for xdp programs and I'm thinking perf

00:13:56,680 --> 00:14:00,640
maybe the existing facility that a lot

00:13:58,870 --> 00:14:02,680
of people can use to debug their xdp

00:14:00,640 --> 00:14:04,300
programs and I kind of want to think

00:14:02,680 --> 00:14:11,920
when people thinking about that a little

00:14:04,300 --> 00:14:14,290
bit okay you could take more questions

00:14:11,920 --> 00:14:18,490
yeah guess one yeah okay with today's

00:14:14,290 --> 00:14:23,770
bocalee name that's what I said

00:14:18,490 --> 00:14:25,480
salacious baaga realistic okay

00:14:23,770 --> 00:14:27,730
the previous question why do I need to

00:14:25,480 --> 00:14:31,480
use xvp why can't I just drop the packet

00:14:27,730 --> 00:14:35,070
in the neck one use case may be that

00:14:31,480 --> 00:14:38,920
that NIC scandals in cookies I can they

00:14:35,070 --> 00:14:41,680
so if I need to know that in packet is

00:14:38,920 --> 00:14:43,680
legit I may need access or something

00:14:41,680 --> 00:14:46,000
that is quick that I can do something

00:14:43,680 --> 00:14:47,980
not simply for dropping the package but

00:14:46,000 --> 00:14:49,300
actually do that intelligently by

00:14:47,980 --> 00:14:51,280
figuring out whether the other side is

00:14:49,300 --> 00:14:53,920
legit or not that brings the next

00:14:51,280 --> 00:14:57,850
question you said when a syn packet

00:14:53,920 --> 00:14:59,300
comes in you create state how do you

00:14:57,850 --> 00:15:02,720
deal with DDoS attacks

00:14:59,300 --> 00:15:04,790
as in floods creepy our second question

00:15:02,720 --> 00:15:06,710
when dicks income invoicing when you

00:15:04,790 --> 00:15:08,630
explained your load balancer you said

00:15:06,710 --> 00:15:10,580
when the first package that's in pack at

00:15:08,630 --> 00:15:13,340
you look at allows you to figure out tap

00:15:10,580 --> 00:15:17,150
which proxy to send the packet to and

00:15:13,340 --> 00:15:19,340
create state I'm wondering do you do

00:15:17,150 --> 00:15:21,680
since uh production before after are you

00:15:19,340 --> 00:15:26,030
don't do that how do you deal with a

00:15:21,680 --> 00:15:30,560
thin slots that may attempt to exhaust

00:15:26,030 --> 00:15:33,170
your connection state things so we have

00:15:30,560 --> 00:15:35,510
dropped that before el faro balancer so

00:15:33,170 --> 00:15:40,210
hopefully if things are the same thread

00:15:35,510 --> 00:15:40,210
is potato patty chocolate already oh

00:15:40,750 --> 00:15:48,140
that actually sends in cookies at for

00:15:43,880 --> 00:15:49,010
example oh thanks sing-sing cookie okay

00:15:48,140 --> 00:15:54,620
okay

00:15:49,010 --> 00:15:57,020
I think his main point is that the the

00:15:54,620 --> 00:15:59,570
LRU table as a potential denial of

00:15:57,020 --> 00:16:01,280
service sector it is what he's trying to

00:15:59,570 --> 00:16:06,170
say like the routing has used to be in

00:16:01,280 --> 00:16:11,650
the kernel yeah so I'd rather use case

00:16:06,170 --> 00:16:15,320
so the L value is like an annuity

00:16:11,650 --> 00:16:17,450
example we always go to the same console

00:16:15,320 --> 00:16:22,010
right so if that's update things odd

00:16:17,450 --> 00:16:24,080
case or single piece for the two details

00:16:22,010 --> 00:16:26,420
they allow you we will stop using the L

00:16:24,080 --> 00:16:30,560
value and then solely depends on the on

00:16:26,420 --> 00:16:32,240
a shot in math way to the consistent

00:16:30,560 --> 00:16:36,590
hashing for example is usually good

00:16:32,240 --> 00:16:38,150
enough to put to to to ensure the same

00:16:36,590 --> 00:16:40,880
end user will go to the same machine is

00:16:38,150 --> 00:16:42,920
the allows you is protonic protecting us

00:16:40,880 --> 00:16:46,310
and indicates that the deposit machine

00:16:42,920 --> 00:16:48,470
may be up and down and then you will

00:16:46,310 --> 00:16:50,720
affect maybe one percent or top one

00:16:48,470 --> 00:16:53,930
percent of traffic

00:16:50,720 --> 00:16:55,850
stripping to another machine but think

00:16:53,930 --> 00:16:58,670
so there might be missing is do you have

00:16:55,850 --> 00:17:00,110
a so you call it a LRU therefore do you

00:16:58,670 --> 00:17:02,240
have a limit on the size that it can

00:17:00,110 --> 00:17:05,630
grow to yes allergen has to limit the

00:17:02,240 --> 00:17:08,930
size okay but even on one things so on

00:17:05,630 --> 00:17:10,760
top the limited size we also will stop

00:17:08,930 --> 00:17:11,640
looking at the allow you if we detach

00:17:10,760 --> 00:17:19,940
this and

00:17:11,640 --> 00:17:22,170
same time we have about five minutes now

00:17:19,940 --> 00:17:26,670
do we want him to sing for five minutes

00:17:22,170 --> 00:17:29,360
or actually I have a question for it

00:17:26,670 --> 00:17:31,320
since we have time to kill

00:17:29,360 --> 00:17:34,380
what kind of performance do you get with

00:17:31,320 --> 00:17:39,480
that load balancer the first set of your

00:17:34,380 --> 00:17:41,910
slides I cannot accept number oh it's

00:17:39,480 --> 00:17:43,530
the same thing is it for seven account I

00:17:41,910 --> 00:17:45,990
said one I can touch for the same

00:17:43,530 --> 00:17:48,540
account in some case for example sings

00:17:45,990 --> 00:17:51,060
sings my detectives we can't get 10x

00:17:48,540 --> 00:17:53,280
difference with the against what

00:17:51,060 --> 00:17:56,100
something like antenna proxy or

00:17:53,280 --> 00:17:59,520
something like 19 ones okay I guess type

00:17:56,100 --> 00:18:03,840
EVs okay any more questions or should we

00:17:59,520 --> 00:18:08,380
send it to the penalty box okay thanks

00:18:03,840 --> 00:18:08,380

YouTube URL: https://www.youtube.com/watch?v=YEU2ClcGqts


