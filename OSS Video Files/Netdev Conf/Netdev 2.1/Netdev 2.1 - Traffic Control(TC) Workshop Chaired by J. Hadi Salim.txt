Title: Netdev 2.1 - Traffic Control(TC) Workshop Chaired by J. Hadi Salim
Publication date: 2017-04-29
Playlist: Netdev 2.1
Description: 
	TC workshop at Netdev 2.1 chaired by Jamal Hadi Salim on Apr/07/2017. 
Face to Face discussions on different Linux TC issues by the different stakeholders. Topics include new hardware offloads, new features, performance issues and requirements.
Slides at:  https://www.netdevconf.org/2.1/session.html?hadisalim
Captions: 
	00:00:00,030 --> 00:00:08,610
uh this is the TC workshop I'm the chair

00:00:05,130 --> 00:00:12,599
these folks are going to say something

00:00:08,610 --> 00:00:15,089
during this session hello say hello to

00:00:12,599 --> 00:00:18,920
the crowd we're not going to be as

00:00:15,089 --> 00:00:21,449
exciting the days but and it's not the

00:00:18,920 --> 00:00:23,130
it's not as exciting as the net day as

00:00:21,449 --> 00:00:27,750
the performance workshop what is that

00:00:23,130 --> 00:00:30,900
called the death march but we have metal

00:00:27,750 --> 00:00:36,300
box and Intel here so they but metal box

00:00:30,900 --> 00:00:40,230
is overshadowing Intel and we have other

00:00:36,300 --> 00:00:42,329
fair representation anything so do you

00:00:40,230 --> 00:00:45,239
wanna quickly say who you are modeling

00:00:42,329 --> 00:00:47,600
modeling for working for anything use

00:00:45,239 --> 00:00:58,020
the mic please get used to me Chris can

00:00:47,600 --> 00:01:01,649
make me know that Lucas next just family

00:00:58,020 --> 00:01:03,559
or for me or not Iran for Mellanox only

00:01:01,649 --> 00:01:07,590
formula not Giri

00:01:03,559 --> 00:01:10,110
see I told you those big Intel guys over

00:01:07,590 --> 00:01:15,570
ever watched a key gang package from the

00:01:10,110 --> 00:01:17,759
Indian okay so we'll get started so we

00:01:15,570 --> 00:01:20,580
have a very very very tight agenda so

00:01:17,759 --> 00:01:23,640
first thing is we'll do a very quick

00:01:20,580 --> 00:01:25,140
coverage of since net 2.1 what new

00:01:23,640 --> 00:01:28,799
offloads or you office features are

00:01:25,140 --> 00:01:31,799
shown up in different vendor chips we

00:01:28,799 --> 00:01:34,799
have a section on performance and then

00:01:31,799 --> 00:01:36,270
we'll talk about new features and this

00:01:34,799 --> 00:01:38,070
happen attic that has nothing to do love

00:01:36,270 --> 00:01:41,700
floating as well as requirements

00:01:38,070 --> 00:01:44,990
requests improvements and last we have

00:01:41,700 --> 00:01:49,140
time locust will update us on the test

00:01:44,990 --> 00:01:53,520
so i'm going to start the first session

00:01:49,140 --> 00:01:59,240
with eerie if you want to go Yuri will

00:01:53,520 --> 00:02:02,240
f5 here you go so here is going to you

00:01:59,240 --> 00:02:02,240
here

00:02:02,660 --> 00:02:09,330
you're going to talk about the Mellanox

00:02:05,420 --> 00:02:11,850
switching chip we have a box here that

00:02:09,330 --> 00:02:13,680
we can demo someone's excited afterwards

00:02:11,850 --> 00:02:16,230
okay this is just a quick update about

00:02:13,680 --> 00:02:19,110
what weight data analytics SW driver

00:02:16,230 --> 00:02:24,060
that's driver for Mellanox programmatic

00:02:19,110 --> 00:02:28,290
we support the flour classifier and we

00:02:24,060 --> 00:02:30,930
offload the rules to decamp we have our

00:02:28,290 --> 00:02:36,510
we support so far just basic keys and

00:02:30,930 --> 00:02:40,880
basic actions like merit redirect we

00:02:36,510 --> 00:02:44,310
will modify and drop and we have some

00:02:40,880 --> 00:02:46,770
well the p-chem is not not optimally

00:02:44,310 --> 00:02:48,989
utilized because we like multi type of

00:02:46,770 --> 00:02:53,580
support in PC that's what I'm going to

00:02:48,989 --> 00:02:56,910
talk about later on and now also we need

00:02:53,580 --> 00:03:00,570
to somehow hint-hint the driver so we it

00:02:56,910 --> 00:03:04,170
can prepare the Deacon regions so the

00:03:00,570 --> 00:03:09,120
keywords are what they are expected to

00:03:04,170 --> 00:03:13,160
be so they don't so we can fit more

00:03:09,120 --> 00:03:17,250
rules into T camera regions basically oh

00:03:13,160 --> 00:03:19,230
yeah this is this is my colleague your

00:03:17,250 --> 00:03:23,360
time GG hit in Poland it back at

00:03:19,230 --> 00:03:27,510
something so basically what he did he

00:03:23,360 --> 00:03:30,560
introduced a new interface based on

00:03:27,510 --> 00:03:33,049
generic net link which is used for

00:03:30,560 --> 00:03:36,269
pushing the packets to the user space

00:03:33,049 --> 00:03:38,790
originally this is this has been done by

00:03:36,269 --> 00:03:40,709
Hannah flow but a knife lock is specific

00:03:38,790 --> 00:03:43,220
to net photo and we wanted something

00:03:40,709 --> 00:03:43,220
more generic

00:03:47,040 --> 00:03:54,420
and we also implied that this reaction

00:03:49,909 --> 00:03:58,950
sample TC action which uses this

00:03:54,420 --> 00:04:01,739
interface to push back to to use so you

00:03:58,950 --> 00:04:07,140
can see an example of usage and this is

00:04:01,739 --> 00:04:10,230
also affiliate in annex SW spectrum

00:04:07,140 --> 00:04:11,549
switch yeah that is an example that's

00:04:10,230 --> 00:04:13,590
not the example so it's usually

00:04:11,549 --> 00:04:14,760
classified called match all matches

00:04:13,590 --> 00:04:17,489
everything yeah

00:04:14,760 --> 00:04:20,340
and they need action what it samples

00:04:17,489 --> 00:04:24,509
what is the right there it's 12

00:04:20,340 --> 00:04:27,060
every 12 seconds no I would soft bucket

00:04:24,509 --> 00:04:30,330
every every 12 packet okay in city does

00:04:27,060 --> 00:04:33,120
group 13 yeah that that you get you can

00:04:30,330 --> 00:04:36,120
have multiple groups and so in user

00:04:33,120 --> 00:04:36,900
space you can actually know what group

00:04:36,120 --> 00:04:38,880
it come from

00:04:36,900 --> 00:04:40,169
what okay so it's going to be it gets

00:04:38,880 --> 00:04:44,190
tagged when you head to the space you

00:04:40,169 --> 00:04:47,310
know which group it is yeah okay Mike

00:04:44,190 --> 00:04:48,780
there's a Mike here I think the question

00:04:47,310 --> 00:04:52,560
is could you elaborate on what the group

00:04:48,780 --> 00:04:54,060
means yeah so yeah something that you

00:04:52,560 --> 00:04:55,130
are getting as a hint for the hardware

00:04:54,060 --> 00:04:59,330
or is it

00:04:55,130 --> 00:05:02,729
well you define the group when you

00:04:59,330 --> 00:05:05,130
insert the rule you say which group it

00:05:02,729 --> 00:05:08,220
should come to and in the user space you

00:05:05,130 --> 00:05:10,260
see the some sample packets coming in

00:05:08,220 --> 00:05:12,389
with the group ID so we can actually

00:05:10,260 --> 00:05:17,280
distinguish from which true it came

00:05:12,389 --> 00:05:19,139
basically that's it because it the the

00:05:17,280 --> 00:05:22,110
tunnels are not it's not the same

00:05:19,139 --> 00:05:24,930
channel you're using TC are cannot link

00:05:22,110 --> 00:05:26,520
to insert the rule and the sample

00:05:24,930 --> 00:05:28,199
packets are coming through completely

00:05:26,520 --> 00:05:30,120
different channel to make generic

00:05:28,199 --> 00:05:34,169
rattling P sample channel so you have to

00:05:30,120 --> 00:05:37,620
pair it okay basically just keep the mic

00:05:34,169 --> 00:05:41,099
there okay something careful alright

00:05:37,620 --> 00:05:42,270
that's not okay so this is new features

00:05:41,099 --> 00:05:43,800
or should we I think we've been

00:05:42,270 --> 00:05:45,840
originated switch okay we'll leave it to

00:05:43,800 --> 00:05:49,729
then okay so next I'm going to hover on

00:05:45,840 --> 00:05:49,729
you come up honey

00:05:51,260 --> 00:06:07,340
yes slides I believe trying to find

00:05:57,330 --> 00:06:07,340
slice you're cute okay yeah okay okay

00:06:07,850 --> 00:06:16,470
okay so we're working on TC to implement

00:06:14,160 --> 00:06:20,340
it things for open V switch offloads

00:06:16,470 --> 00:06:23,370
and those other kind of stuff and we're

00:06:20,340 --> 00:06:27,690
now adding the option to header rewrite

00:06:23,370 --> 00:06:30,570
the traffic and so what the reason we do

00:06:27,690 --> 00:06:33,420
need to have they rewrite the headers so

00:06:30,570 --> 00:06:35,610
the basic thing is to support a kind of

00:06:33,420 --> 00:06:40,950
routing distributed virtual router

00:06:35,610 --> 00:06:43,740
that's used for OpenStack you also can

00:06:40,950 --> 00:06:46,620
implement it kind of a not just the

00:06:43,740 --> 00:06:51,600
multiplayer changing the IP addresses

00:06:46,620 --> 00:06:55,530
and the port and of course you can do

00:06:51,600 --> 00:06:57,540
that while you're doing routing and you

00:06:55,530 --> 00:07:07,230
can do a lot of other things that you

00:06:57,540 --> 00:07:10,950
can you can imagine okay so what is that

00:07:07,230 --> 00:07:13,920
px how you can do that the action that

00:07:10,950 --> 00:07:15,870
is called it's already was a long time

00:07:13,920 --> 00:07:17,040
time ago I think the more when you edit

00:07:15,870 --> 00:07:18,150
it yes

00:07:17,040 --> 00:07:23,120
I didn't know anybody was going to use

00:07:18,150 --> 00:07:27,630
it for this okay so we are doing it yes

00:07:23,120 --> 00:07:31,740
so there is a TC action that is called P

00:07:27,630 --> 00:07:34,740
edit packet edit the P edit action

00:07:31,740 --> 00:07:38,010
contains set of kill each defining a

00:07:34,740 --> 00:07:40,680
rewrite to element each Key has the kind

00:07:38,010 --> 00:07:43,740
of upset a mask and value that you want

00:07:40,680 --> 00:07:46,170
to change the opposite is is used in

00:07:43,740 --> 00:07:49,890
order to say which fields that you want

00:07:46,170 --> 00:07:53,490
to say and the legacy field not

00:07:49,890 --> 00:07:56,790
explained or another field of course in

00:07:53,490 --> 00:08:01,360
all our 32 bits the opposite mask value

00:07:56,790 --> 00:08:04,710
define by top set use usually using TC

00:08:01,360 --> 00:08:06,969
and that is anywhere in the packet

00:08:04,710 --> 00:08:09,610
starting from the IP address where do

00:08:06,969 --> 00:08:12,400
you want to make the change so it's not

00:08:09,610 --> 00:08:16,270
having a notion of field so you can't

00:08:12,400 --> 00:08:23,110
say explicitly I want to change the UDP

00:08:16,270 --> 00:08:43,599
port okay of course this is the kernel

00:08:23,110 --> 00:08:47,320
API so yes okay so of course what we

00:08:43,599 --> 00:08:51,190
decided to do of course not trying to do

00:08:47,320 --> 00:08:55,019
the to change the wheel of it and to do

00:08:51,190 --> 00:08:59,470
to use the same way to reuse the P edit

00:08:55,019 --> 00:09:02,829
but want to to keep the same idea of

00:08:59,470 --> 00:09:06,399
offset mask and value but the most issue

00:09:02,829 --> 00:09:10,600
that we faced we didn't like that you

00:09:06,399 --> 00:09:12,040
need to say how you cross about two few

00:09:10,600 --> 00:09:14,860
protocols so if you want to change the

00:09:12,040 --> 00:09:18,010
UDP the UDP port you need to count how

00:09:14,860 --> 00:09:21,190
much I pay fee for ipv6 packet so it's

00:09:18,010 --> 00:09:25,060
not in fit in not efficient so what we

00:09:21,190 --> 00:09:27,310
add that we add the header type so you

00:09:25,060 --> 00:09:30,579
need to mention what head are you going

00:09:27,310 --> 00:09:34,510
to to change and in the header we still

00:09:30,579 --> 00:09:36,940
use the same idea of opposite so you can

00:09:34,510 --> 00:09:39,279
if you want to change the TTL or used to

00:09:36,940 --> 00:09:44,709
send the source IP address you just need

00:09:39,279 --> 00:09:47,769
to mention is there a IP and what is the

00:09:44,709 --> 00:09:53,589
object inside the IP and what you want

00:09:47,769 --> 00:09:57,190
to do and ok the the two actions that we

00:09:53,589 --> 00:09:58,839
are supporting is to set a value so you

00:09:57,190 --> 00:10:01,110
want to change the IP address this is

00:09:58,839 --> 00:10:05,320
the new IP address that you want and

00:10:01,110 --> 00:10:08,140
another way another thing is to do to

00:10:05,320 --> 00:10:13,449
add a field like if you want to to

00:10:08,140 --> 00:10:14,590
decrement the TTL so you add 255 you get

00:10:13,449 --> 00:10:16,810
an envelope

00:10:14,590 --> 00:10:22,300
new it's like decrementing the TTL by

00:10:16,810 --> 00:10:27,550
one so all this code was headed by Emil

00:10:22,300 --> 00:10:31,720
Verdi as part of an in smell gin a

00:10:27,550 --> 00:10:33,820
kernel 411 so you can already use it if

00:10:31,720 --> 00:10:39,910
you would like and try to function

00:10:33,820 --> 00:10:42,100
connect X 4 or 5 or it's okay next okay

00:10:39,910 --> 00:10:43,840
okay so before we go to our driving

00:10:42,100 --> 00:10:45,790
we're talking too narrowly okay science

00:10:43,840 --> 00:10:47,740
related to melon ah this has nothing to

00:10:45,790 --> 00:10:49,900
do max they have heart rate okay the

00:10:47,740 --> 00:10:53,020
interface is generic everybody will use

00:10:49,900 --> 00:10:55,180
it and all the drivers we hope that all

00:10:53,020 --> 00:10:57,700
the drivers will support it I have a

00:10:55,180 --> 00:11:00,940
question when you use the protocols

00:10:57,700 --> 00:11:02,890
field over there you're assuming any

00:11:00,940 --> 00:11:05,890
packet that has IP in it so it could be

00:11:02,890 --> 00:11:09,460
tunnelled non tunneled and that's how

00:11:05,890 --> 00:11:10,900
you want the hardware to treat it so you

00:11:09,460 --> 00:11:12,340
need to mention what Heather you want to

00:11:10,900 --> 00:11:14,020
change if it's a you know you're

00:11:12,340 --> 00:11:17,250
mentioning the header that header could

00:11:14,020 --> 00:11:19,750
be in an encapsulated packet or in an

00:11:17,250 --> 00:11:23,410
encapsulated packet okay so currently we

00:11:19,750 --> 00:11:26,050
talked we started with a plane with the

00:11:23,410 --> 00:11:29,350
outer header so we don't spoke about yet

00:11:26,050 --> 00:11:31,930
I was encapsulated pocket it's what I

00:11:29,350 --> 00:11:34,330
mean I will assume we keep that notion

00:11:31,930 --> 00:11:35,650
right so yes it'll be good for the

00:11:34,330 --> 00:11:37,960
hardware if you keep the notion that

00:11:35,650 --> 00:11:41,290
when you say protocol IP it means for

00:11:37,960 --> 00:11:43,270
any packet that has that IP header in it

00:11:41,290 --> 00:11:44,560
no the head I could melon out you're

00:11:43,270 --> 00:11:47,320
missing this is not the code

00:11:44,560 --> 00:11:49,000
specification when I think the first

00:11:47,320 --> 00:11:51,840
field that he's saying if you classify

00:11:49,000 --> 00:11:54,310
it see already saying it's an IP right

00:11:51,840 --> 00:11:57,010
you don't need to say that hippie you

00:11:54,310 --> 00:11:59,920
can classify that if it's a TCP packet

00:11:57,010 --> 00:12:03,970
without explaining that is an IP because

00:11:59,920 --> 00:12:06,970
it could be ipv4 ipv6 you don't use a

00:12:03,970 --> 00:12:08,740
mic please if you but this is related to

00:12:06,970 --> 00:12:10,480
the clasificado 'king is related to a

00:12:08,740 --> 00:12:14,500
certification in fact we related to both

00:12:10,480 --> 00:12:16,720
denial well no so the point he's trying

00:12:14,500 --> 00:12:17,980
to make periods so it's a filter IP so

00:12:16,720 --> 00:12:19,630
that's the filtering thing that's

00:12:17,980 --> 00:12:21,340
unrelated to so the proportion he's

00:12:19,630 --> 00:12:23,720
talking about right now is P edit the

00:12:21,340 --> 00:12:28,250
actual editing of the packet itself so

00:12:23,720 --> 00:12:29,690
the ones and remember it's it's a IP

00:12:28,250 --> 00:12:31,610
filter I'm hearing rumors that's just

00:12:29,690 --> 00:12:37,700
the name of the SIL flower flower flower

00:12:31,610 --> 00:12:39,500
right okay right alright but I see this

00:12:37,700 --> 00:12:41,150
this is yet well protocol IP that's just

00:12:39,500 --> 00:12:43,550
part of the basic TG infrastructure

00:12:41,150 --> 00:12:46,190
itself if I recall you're setting up the

00:12:43,550 --> 00:12:49,250
filtering yeah that's fun and in this

00:12:46,190 --> 00:12:51,410
action so you roll over here you're

00:12:49,250 --> 00:12:55,460
talking about this it's all here's as

00:12:51,410 --> 00:12:58,250
you can see we edit mangling Ethernet

00:12:55,460 --> 00:13:03,380
destination we set it to the specific

00:12:58,250 --> 00:13:06,050
map and we edit their destination map

00:13:03,380 --> 00:13:09,290
and we decrement in the TTL across the

00:13:06,050 --> 00:13:11,540
crowding action no this is really good

00:13:09,290 --> 00:13:13,100
and this is you know useful for HUD room

00:13:11,540 --> 00:13:15,320
I'm not denying that I'm trying to

00:13:13,100 --> 00:13:19,270
understand the meaning for two things

00:13:15,320 --> 00:13:23,030
one is hardware does some optimization

00:13:19,270 --> 00:13:25,420
when you know doing the rules so you

00:13:23,030 --> 00:13:27,860
want to group the rules together right

00:13:25,420 --> 00:13:31,070
sometimes you want to be very specific

00:13:27,860 --> 00:13:33,860
so you want the spirit to happen only on

00:13:31,070 --> 00:13:36,680
certain kind of packet maybe just an

00:13:33,860 --> 00:13:40,760
onion capsulated crackit okay so that's

00:13:36,680 --> 00:13:43,160
the first part of the filter the flowers

00:13:40,760 --> 00:13:47,180
that you classify what on which pocket

00:13:43,160 --> 00:13:50,360
you want to do the editing okay I think

00:13:47,180 --> 00:13:52,580
so we do support the inner things when

00:13:50,360 --> 00:13:56,380
we do where the action is done on a on a

00:13:52,580 --> 00:14:01,280
vehicle an interface what we didn't

00:13:56,380 --> 00:14:02,290
complete it yet we started with basic

00:14:01,280 --> 00:14:05,090
stuff

00:14:02,290 --> 00:14:08,950
this one the P edit you don't intend to

00:14:05,090 --> 00:14:14,300
push and pop of headers or you do know

00:14:08,950 --> 00:14:17,480
it's editing not pushing yeah this is

00:14:14,300 --> 00:14:20,990
pure editing it's you can do X or or or

00:14:17,480 --> 00:14:23,300
e and f you as you said in we of course

00:14:20,990 --> 00:14:25,490
will need to to extend it in order to

00:14:23,300 --> 00:14:28,490
push either because currently the zig

00:14:25,490 --> 00:14:33,040
plan is done differently it's done using

00:14:28,490 --> 00:14:33,040
a device based on device

00:14:33,170 --> 00:14:39,379
that's why I was going like if we're

00:14:35,420 --> 00:14:41,179
doing it to the device the mall is very

00:14:39,379 --> 00:14:43,429
different and if we do it to the pushpop

00:14:41,179 --> 00:14:45,410
action and TC it will be easier to do it

00:14:43,429 --> 00:14:48,079
yeah I think this in this case you have

00:14:45,410 --> 00:14:50,419
some new protocol like gtp for example

00:14:48,079 --> 00:14:52,339
but you have no idea how to deal it then

00:14:50,419 --> 00:14:53,989
this is wrong it's like very assembler

00:14:52,339 --> 00:14:55,220
level so you start your doing something

00:14:53,989 --> 00:15:00,439
and then you write something better

00:14:55,220 --> 00:15:02,720
afterwards okay so in this example as I

00:15:00,439 --> 00:15:05,839
mentioned we see that we're classifying

00:15:02,720 --> 00:15:08,540
like the flower classifier when ever

00:15:05,839 --> 00:15:14,119
packet type that we want here for the

00:15:08,540 --> 00:15:17,869
club sample is a IP protocol and the

00:15:14,119 --> 00:15:22,639
magic words keep software it means that

00:15:17,869 --> 00:15:24,109
you're taken into the hardware and even

00:15:22,639 --> 00:15:25,730
you not specify the scape software it

00:15:24,109 --> 00:15:28,189
means going to the hardware and to the

00:15:25,730 --> 00:15:30,619
software but for the P edit I recommend

00:15:28,189 --> 00:15:37,129
you skip software you don't want to

00:15:30,619 --> 00:15:38,689
struggle with the profit and again what

00:15:37,129 --> 00:15:41,059
we are doing here is the kind of routing

00:15:38,689 --> 00:15:44,059
we send we set the I pick the source IP

00:15:41,059 --> 00:15:48,470
source mercury and destination mark and

00:15:44,059 --> 00:15:53,660
decrementing the TTL and the TC command

00:15:48,470 --> 00:15:57,339
itself look very nice but the net looks

00:15:53,660 --> 00:15:59,600
nice yeah very readable absolutely now

00:15:57,339 --> 00:16:02,509
everywhere as a hand will can read that

00:15:59,600 --> 00:16:05,149
who can't read this okay who can read it

00:16:02,509 --> 00:16:07,819
oh every two people country only

00:16:05,149 --> 00:16:11,119
knowledge it can now let's see how

00:16:07,819 --> 00:16:14,329
people can read the net link yeah ok ok

00:16:11,119 --> 00:16:16,489
so the net link is less nice as I

00:16:14,329 --> 00:16:19,669
mentioned before the netting itself

00:16:16,489 --> 00:16:23,660
contain offsets and not like move the

00:16:19,669 --> 00:16:26,179
FTPS mangling the TTL by the APL it does

00:16:23,660 --> 00:16:28,100
have human friendly interfaces you can

00:16:26,179 --> 00:16:30,410
see ipv4 and it will write this stuff

00:16:28,100 --> 00:16:34,519
where only when I never use it

00:16:30,410 --> 00:16:35,269
yes ok ok but when you do the show yeah

00:16:34,519 --> 00:16:37,699
we get it

00:16:35,269 --> 00:16:39,230
wine roll in Ron Roland yes what we send

00:16:37,699 --> 00:16:41,629
to the camera so this is not obvious

00:16:39,230 --> 00:16:43,009
because usually customers there's some

00:16:41,629 --> 00:16:44,689
ideas where we could actually have that

00:16:43,009 --> 00:16:46,670
web cookies we could actually put the

00:16:44,689 --> 00:16:50,690
cookie and use the cookie to interpret

00:16:46,670 --> 00:16:52,940
right but go ahead yeah okay so here you

00:16:50,690 --> 00:16:56,000
can show you can see how the show

00:16:52,940 --> 00:16:59,480
commanded look like so you might be

00:16:56,000 --> 00:17:02,980
changing the IP at the ethernet +0

00:16:59,480 --> 00:17:06,320
between the sauce mark adamak sorry and

00:17:02,980 --> 00:17:10,250
of course is this as we spoke before

00:17:06,320 --> 00:17:12,709
it's a 32-bit so this is 2 action for

00:17:10,250 --> 00:17:16,310
the source for the destination MAC and

00:17:12,709 --> 00:17:20,180
then to field from object for an option

00:17:16,310 --> 00:17:24,560
on often 8 to change the source MAC

00:17:20,180 --> 00:17:31,490
source mac n plus 8 through the IP

00:17:24,560 --> 00:17:35,050
header to change the detail any question

00:17:31,490 --> 00:17:37,970
the show command has order one is that

00:17:35,050 --> 00:17:39,440
the table lets know that that's

00:17:37,970 --> 00:17:41,990
essentially you could have a chain of

00:17:39,440 --> 00:17:44,000
actions let's just say there's only 1 in

00:17:41,990 --> 00:17:45,680
this case but I don't know hydro

00:17:44,000 --> 00:17:48,380
supports multiple actions in in a

00:17:45,680 --> 00:17:55,670
pipeline then they'll be ordered in the

00:17:48,380 --> 00:17:59,600
way they're going to be executed and and

00:17:55,670 --> 00:18:02,830
as Jamal said of course we did it in

00:17:59,600 --> 00:18:05,540
order to support it in the connected 5

00:18:02,830 --> 00:18:07,250
so it is connected X 5 I didn't no idea

00:18:05,540 --> 00:18:11,360
I was just curious because I have a

00:18:07,250 --> 00:18:17,810
connect expose so y 1 we can give you

00:18:11,360 --> 00:18:21,770
this count ok ok so this is supporting a

00:18:17,810 --> 00:18:23,660
from the connected 5f hardware that use

00:18:21,770 --> 00:18:25,790
the same interface the connecting flow

00:18:23,660 --> 00:18:29,140
and the kinetics v have both of them

00:18:25,790 --> 00:18:33,580
work on the same driver the ml x5 driver

00:18:29,140 --> 00:18:33,580
so now we are aligned with the numbers

00:18:35,500 --> 00:18:42,170
ok so what we doing there of course the

00:18:38,420 --> 00:18:45,170
driver is translating the command the

00:18:42,170 --> 00:18:48,290
header the type to offset into a

00:18:45,170 --> 00:18:51,950
hardware modify header so we take it to

00:18:48,290 --> 00:18:55,100
the our primer and it's the translation

00:18:51,950 --> 00:18:58,090
logics use the header post type offset

00:18:55,100 --> 00:19:00,760
to realize what film it

00:18:58,090 --> 00:19:03,310
internet democracy tails we are doing

00:19:00,760 --> 00:19:09,520
reverse for what uses what we tend to

00:19:03,310 --> 00:19:20,350
and and choose and of course way to let

00:19:09,520 --> 00:19:22,780
a harder parser and do this think okay

00:19:20,350 --> 00:19:25,420
yes so I think it's the most thing that

00:19:22,780 --> 00:19:27,670
we wanted to edit is for the SRA V

00:19:25,420 --> 00:19:31,120
environment so when we do a harder

00:19:27,670 --> 00:19:34,210
offload for a PC so we want to use for

00:19:31,120 --> 00:19:38,320
virtual machine to do a router so this

00:19:34,210 --> 00:19:40,090
is the main reason that we edit but it

00:19:38,320 --> 00:19:42,310
also can be done for non switch

00:19:40,090 --> 00:19:44,530
environment so if you want to do it as a

00:19:42,310 --> 00:19:48,610
NIC so all the traffic that you will be

00:19:44,530 --> 00:19:56,200
getting you will get them changed what

00:19:48,610 --> 00:19:59,890
is rewriting rewriting and of course the

00:19:56,200 --> 00:20:04,780
driver itself was accepted in the 412

00:19:59,890 --> 00:20:07,630
the last night no yes ok alright so I

00:20:04,780 --> 00:20:09,640
know there's based on what you asked and

00:20:07,630 --> 00:20:13,540
I was talking to Simon some point as

00:20:09,640 --> 00:20:17,470
well this may not be this is I use

00:20:13,540 --> 00:20:22,660
spirit I guess I I also wrote it but I

00:20:17,470 --> 00:20:24,520
would not use this for things recently I

00:20:22,660 --> 00:20:26,110
use it to change MAC addresses those

00:20:24,520 --> 00:20:31,480
containers going out and the drivers

00:20:26,110 --> 00:20:34,840
rockin symbol speaking right so I but I

00:20:31,480 --> 00:20:37,270
wouldn't use this stuff it's not human

00:20:34,840 --> 00:20:40,420
friendly as you can see I know you say

00:20:37,270 --> 00:20:42,070
you can read that but it's a good

00:20:40,420 --> 00:20:44,080
starting point and it's only for packet

00:20:42,070 --> 00:20:46,680
editing you don't go and add extra

00:20:44,080 --> 00:20:49,510
headers on it or remove headers i

00:20:46,680 --> 00:20:51,250
recently used it to edit our packets

00:20:49,510 --> 00:20:52,870
going out so i could keep the other guy

00:20:51,250 --> 00:20:55,780
i think i'm coming from a different mark

00:20:52,870 --> 00:20:58,570
address right but if that was a common

00:20:55,780 --> 00:21:00,220
use case and our producer skb mode so I

00:20:58,570 --> 00:21:02,290
think there's contention that this may

00:21:00,220 --> 00:21:05,050
not this is this is how hardware works

00:21:02,290 --> 00:21:07,780
but it may be better ways get wrappers

00:21:05,050 --> 00:21:09,240
to right so as I mentioned earlier then

00:21:07,780 --> 00:21:12,810
the main reason

00:21:09,240 --> 00:21:15,390
we edit reddit it is to support a kind

00:21:12,810 --> 00:21:18,000
of switch for when you use a necessary

00:21:15,390 --> 00:21:20,670
we and you want to have a switch

00:21:18,000 --> 00:21:23,550
environment when you want to do routing

00:21:20,670 --> 00:21:25,950
that you're embedded switch is doing

00:21:23,550 --> 00:21:27,210
routing that's the way that you're

00:21:25,950 --> 00:21:28,650
adding the rooms you don't have to

00:21:27,210 --> 00:21:30,990
change the family to use this right so

00:21:28,650 --> 00:21:33,330
similar reason for you 32 versus flour

00:21:30,990 --> 00:21:36,840
in flour every time we want to add a new

00:21:33,330 --> 00:21:40,650
field well I gotta go and call Ronnie or

00:21:36,840 --> 00:21:43,440
or to change some firmware for me was

00:21:40,650 --> 00:21:45,000
with you 32 I could write my cross like

00:21:43,440 --> 00:21:48,000
this right same thing for editing this

00:21:45,000 --> 00:21:49,730
will be useful right right any comments

00:21:48,000 --> 00:21:52,920
Simon

00:21:49,730 --> 00:21:57,780
Mike why don't you use that Mike full

00:21:52,920 --> 00:22:02,340
full this one here use this one full oh

00:21:57,780 --> 00:22:07,020
actually this works too yeah I think the

00:22:02,340 --> 00:22:10,020
comment I raised about Sapir that is is

00:22:07,020 --> 00:22:11,640
very generic we can act within some

00:22:10,020 --> 00:22:13,050
limits limitation if we can find if we

00:22:11,640 --> 00:22:15,980
know the offset of something we can

00:22:13,050 --> 00:22:19,290
modify it in the packet data so if

00:22:15,980 --> 00:22:22,050
there's some new field we want to modify

00:22:19,290 --> 00:22:26,070
so long as it has a stable offset we can

00:22:22,050 --> 00:22:28,020
modify it without updating the various

00:22:26,070 --> 00:22:29,760
layers we don't have to teach the Linux

00:22:28,020 --> 00:22:31,350
kernel about this and if we're uploading

00:22:29,760 --> 00:22:34,260
it we don't have to teach so the hover

00:22:31,350 --> 00:22:36,060
about it either but the officer

00:22:34,260 --> 00:22:36,720
calculation is actually the weakness in

00:22:36,060 --> 00:22:40,530
p-adic

00:22:36,720 --> 00:22:44,790
from my point of view okay so goes in in

00:22:40,530 --> 00:22:47,400
the for staff tags like they allowed a

00:22:44,790 --> 00:22:49,800
number of VLANs or IP options that

00:22:47,400 --> 00:22:52,080
calculating the office set is right

00:22:49,800 --> 00:22:54,180
because you don't know if the part well

00:22:52,080 --> 00:22:56,520
you could actually classify it so my

00:22:54,180 --> 00:22:59,330
view is you could have two rules one

00:22:56,520 --> 00:23:01,680
that classifies 4-inch X Y P options

00:22:59,330 --> 00:23:05,310
call the same kind of action and

00:23:01,680 --> 00:23:07,080
everyone that assumes as own IP options

00:23:05,310 --> 00:23:10,650
yes if you need to have the same rule

00:23:07,080 --> 00:23:12,720
for ipv4 and ipv6 and ipv6 but consider

00:23:10,650 --> 00:23:16,140
like the if you wanted to match on on

00:23:12,720 --> 00:23:17,550
its specific field in a specific option

00:23:16,140 --> 00:23:21,990
like you wanted to get the fragment

00:23:17,550 --> 00:23:27,630
offset from ninety v6 and not that I do

00:23:21,990 --> 00:23:29,280
you did you and it might be several

00:23:27,630 --> 00:23:31,790
options present in the package and you

00:23:29,280 --> 00:23:34,950
might have to they could be in any order

00:23:31,790 --> 00:23:37,950
it seemed not well solve by priya Pierre

00:23:34,950 --> 00:23:41,160
in my opinion so what was your

00:23:37,950 --> 00:23:43,620
suggestion that we developed a solution

00:23:41,160 --> 00:23:47,520
well this what do you think of skb mode

00:23:43,620 --> 00:23:49,650
as a yeah I think skb model is quite a

00:23:47,520 --> 00:23:50,940
lot nicer in this respectives but it

00:23:49,650 --> 00:23:52,559
suffers from the problem that you

00:23:50,940 --> 00:23:53,940
described is that every time we wanted

00:23:52,559 --> 00:23:56,190
to do something new we would have to

00:23:53,940 --> 00:23:58,470
teach yes it's capable emote about it

00:23:56,190 --> 00:24:05,280
well how about you show up in that depth

00:23:58,470 --> 00:24:06,240
to the 32.2 I tell us how we did or sent

00:24:05,280 --> 00:24:09,510
patches us yeah right

00:24:06,240 --> 00:24:11,340
so I think he comes back to the original

00:24:09,510 --> 00:24:14,220
statement about using something generic

00:24:11,340 --> 00:24:16,260
using offsets or using something that

00:24:14,220 --> 00:24:18,030
you have to teach it every time you want

00:24:16,260 --> 00:24:20,490
here something new if we could come up

00:24:18,030 --> 00:24:22,710
with some Third Way I don't know what it

00:24:20,490 --> 00:24:24,750
is right now but that's I mean I would

00:24:22,710 --> 00:24:26,460
have been happy to see flour have a

00:24:24,750 --> 00:24:31,380
small extension which allows me to

00:24:26,460 --> 00:24:33,020
arbitrary offsets lengths any that's not

00:24:31,380 --> 00:24:37,770
side discussion

00:24:33,020 --> 00:24:40,140
Alex want to say something can be say

00:24:37,770 --> 00:24:42,059
force for the penalty box oh yeah

00:24:40,140 --> 00:24:44,400
nothing else or anything we just do

00:24:42,059 --> 00:24:47,070
pro-education X we're very tight on time

00:24:44,400 --> 00:24:53,510
so next I'm going to have Iran so Iran

00:24:47,070 --> 00:24:59,400
is as a nice network processor that and

00:24:53,510 --> 00:25:01,020
I don't think you can use these or pull

00:24:59,400 --> 00:25:03,679
pull this on you because I want to

00:25:01,020 --> 00:25:03,679
possibly student

00:25:05,150 --> 00:25:11,930
I let him do the talking and I'm going

00:25:10,520 --> 00:25:15,070
to present another solution for

00:25:11,930 --> 00:25:18,380
offloading of TC this time on the

00:25:15,070 --> 00:25:22,510
Mellanox sent to you the Milan of San

00:25:18,380 --> 00:25:25,070
Pio is called indigo so let's talk

00:25:22,510 --> 00:25:26,720
that's all we needed a name for the

00:25:25,070 --> 00:25:28,910
solution the off-site solution we

00:25:26,720 --> 00:25:33,620
decided to call it accelerate traffic

00:25:28,910 --> 00:25:36,050
control ATC pretty ambitious and basicly

00:25:33,620 --> 00:25:38,510
the same functionality as TC what the

00:25:36,050 --> 00:25:40,700
biggest scale and performance in this

00:25:38,510 --> 00:25:44,090
side you can see the box that we

00:25:40,700 --> 00:25:48,470
developed the solution on the box has an

00:25:44,090 --> 00:25:51,970
Intel CPU which a responsible for all

00:25:48,470 --> 00:25:54,800
control configuration management and

00:25:51,970 --> 00:25:57,740
initialization of the Indigo platform

00:25:54,800 --> 00:26:00,170
and also responsible for everything that

00:25:57,740 --> 00:26:03,350
happens inside the box the Indigo

00:26:00,170 --> 00:26:05,570
platform itself also is only responsible

00:26:03,350 --> 00:26:10,460
for the data path it runs the dead past

00:26:05,570 --> 00:26:13,610
only so all traffic that incoming to the

00:26:10,460 --> 00:26:16,940
box itself is handled only by ending the

00:26:13,610 --> 00:26:20,809
the indigo plateau and not by the Intel

00:26:16,940 --> 00:26:23,660
CPU now we're an NP you from whom of you

00:26:20,809 --> 00:26:27,380
who don't know well in NP us the idea is

00:26:23,660 --> 00:26:30,559
basically like a GPU GPU is designed to

00:26:27,380 --> 00:26:32,809
optimize a graphic task and amp you is

00:26:30,559 --> 00:26:37,700
designed for optimization of network

00:26:32,809 --> 00:26:40,160
tasks having expressed so this is our

00:26:37,700 --> 00:26:42,440
architectural vision this is where we

00:26:40,160 --> 00:26:44,960
are going by trying to achieve this is

00:26:42,440 --> 00:26:47,860
our goal we are not there yet we are in

00:26:44,960 --> 00:26:52,190
very early stages of development so

00:26:47,860 --> 00:26:55,040
currently there is a POC solution today

00:26:52,190 --> 00:26:58,690
it's not exactly like this figure but

00:26:55,040 --> 00:27:00,890
this is what we are aiming for and the

00:26:58,690 --> 00:27:03,559
right side of this slide you can see the

00:27:00,890 --> 00:27:06,170
box that I mentioned in the previous

00:27:03,559 --> 00:27:08,630
slide and which has an inter the

00:27:06,170 --> 00:27:11,179
processor then the processor can run

00:27:08,630 --> 00:27:14,750
Linux or any other network operation

00:27:11,179 --> 00:27:17,480
system all commands go to the colonel

00:27:14,750 --> 00:27:19,600
and the colonel is offloading the

00:27:17,480 --> 00:27:22,190
command using a new

00:27:19,600 --> 00:27:24,740
the open and view model in the kernel

00:27:22,190 --> 00:27:28,280
that we are planning the open and view

00:27:24,740 --> 00:27:30,950
model they exposes a headset of the

00:27:28,280 --> 00:27:33,950
high-level API for development for the

00:27:30,950 --> 00:27:39,169
user to communicate with the open a

00:27:33,950 --> 00:27:41,480
video a NPS the chip itself so every

00:27:39,169 --> 00:27:43,340
developer that want to develop any that

00:27:41,480 --> 00:27:45,350
apply that plain application and in

00:27:43,340 --> 00:27:48,440
networking application you can use this

00:27:45,350 --> 00:27:50,600
high level API control connector ask a

00:27:48,440 --> 00:27:52,580
question so this this is already in

00:27:50,600 --> 00:27:55,130
there or no certain so these two pieces

00:27:52,580 --> 00:27:56,929
are not there today but you'll have them

00:27:55,130 --> 00:27:58,910
too didn't well this is the plant

00:27:56,929 --> 00:28:01,640
currently they are in the user space so

00:27:58,910 --> 00:28:06,620
negative two to two will see this in the

00:28:01,640 --> 00:28:10,250
issue in fact not come yes okay Hey so

00:28:06,620 --> 00:28:13,160
the IPS driver self configure the open

00:28:10,250 --> 00:28:14,660
appeal and the opulent view the Indigo

00:28:13,160 --> 00:28:18,440
platform as you can see in the lower

00:28:14,660 --> 00:28:20,270
side of this slide has also an sdk

00:28:18,440 --> 00:28:25,130
library called open and view data point

00:28:20,270 --> 00:28:29,620
api which enables the developer of the

00:28:25,130 --> 00:28:32,360
data path to effectively and easily

00:28:29,620 --> 00:28:36,290
develop a new data plane application on

00:28:32,360 --> 00:28:38,750
top of the indigo plateau and so any

00:28:36,290 --> 00:28:42,970
custom data plane or any third-party

00:28:38,750 --> 00:28:47,299
commercial that point application can be

00:28:42,970 --> 00:28:50,179
developed easily using this decay also

00:28:47,299 --> 00:28:54,530
Melisande provides a set of middlewares

00:28:50,179 --> 00:28:57,260
for SST dpi crypto that also is part of

00:28:54,530 --> 00:29:00,020
the adult plant that this party yeah

00:28:57,260 --> 00:29:02,630
sorry this this is the middle so I can

00:29:00,020 --> 00:29:04,910
go together and download this stuff yeah

00:29:02,630 --> 00:29:06,530
you can call morality call you we have

00:29:04,910 --> 00:29:08,660
two communiques hope you send us a

00:29:06,530 --> 00:29:10,669
little native right now is any of this

00:29:08,660 --> 00:29:15,140
stuff in github right now I don't think

00:29:10,669 --> 00:29:17,000
it operate open sourcing all right they

00:29:15,140 --> 00:29:18,650
open Imperial itself is the open so this

00:29:17,000 --> 00:29:20,780
became being plated open source open

00:29:18,650 --> 00:29:24,440
source here and they all tried IPSec

00:29:20,780 --> 00:29:26,360
offload yeah it's not using your the NGS

00:29:24,440 --> 00:29:29,080
driver and the control key are also open

00:29:26,360 --> 00:29:31,270
source okay and

00:29:29,080 --> 00:29:32,980
this is one way of working with the NPS

00:29:31,270 --> 00:29:35,920
platform another way they're using

00:29:32,980 --> 00:29:38,860
remote vnf to configure the chip itself

00:29:35,920 --> 00:29:40,660
using another set of interface API in

00:29:38,860 --> 00:29:43,000
their user space this will communicate

00:29:40,660 --> 00:29:49,120
with the opening video driver control

00:29:43,000 --> 00:29:51,010
driver in the kernel so a brief

00:29:49,120 --> 00:29:54,510
introduction to the capabilities and

00:29:51,010 --> 00:29:58,240
features in the of the Indigo the

00:29:54,510 --> 00:30:00,850
network processor the programmable which

00:29:58,240 --> 00:30:03,550
is a kind of revolution for a network

00:30:00,850 --> 00:30:07,480
processor until recently it was only

00:30:03,550 --> 00:30:10,960
using assembly and - right at the point

00:30:07,480 --> 00:30:14,950
of application it can reach to ultra

00:30:10,960 --> 00:30:17,950
high for 1400 gigabit throughput you can

00:30:14,950 --> 00:30:20,950
write that plain application after layer

00:30:17,950 --> 00:30:23,830
seven it has an integrated hardware

00:30:20,950 --> 00:30:25,690
traffic management very about variable

00:30:23,830 --> 00:30:30,040
possible the network is ten gigabit

00:30:25,690 --> 00:30:32,830
internet 40 gigabit internet 100 GB the

00:30:30,040 --> 00:30:33,340
network processor itself have 256 it of

00:30:32,830 --> 00:30:37,320
course

00:30:33,340 --> 00:30:40,780
each course has 16 Hardware threads

00:30:37,320 --> 00:30:44,410
which basically enable 14 4k as in

00:30:40,780 --> 00:30:47,440
different a hardware acceleration is

00:30:44,410 --> 00:30:50,440
used using hardware acceleration engines

00:30:47,440 --> 00:30:52,990
for a grito you can reach up to 100

00:30:50,440 --> 00:30:58,410
gigabit per second of IP shape you can

00:30:52,990 --> 00:31:02,950
use it for dpi click on and you have

00:30:58,410 --> 00:31:08,170
very very large scale of ddr 96 gigabit

00:31:02,950 --> 00:31:10,900
you can define huge tables with millions

00:31:08,170 --> 00:31:13,180
of millions of flows and states and you

00:31:10,900 --> 00:31:16,720
can they write an update counters in

00:31:13,180 --> 00:31:20,650
wire speed performance that's it for the

00:31:16,720 --> 00:31:23,740
introduction to the entries so how do we

00:31:20,650 --> 00:31:26,200
do the migration from a TC to the APC on

00:31:23,740 --> 00:31:30,970
the left side you can see the standard

00:31:26,200 --> 00:31:32,140
TC running on a x86 CPU with a NIC so

00:31:30,970 --> 00:31:34,240
you have their management and

00:31:32,140 --> 00:31:36,340
configuration in the user space and the

00:31:34,240 --> 00:31:39,400
Linux kernel does all the hard work for

00:31:36,340 --> 00:31:41,260
the TC data point processing what we

00:31:39,400 --> 00:31:44,140
basically did with

00:31:41,260 --> 00:31:47,309
some kind of a trampoline mechanism to

00:31:44,140 --> 00:31:50,169
capture all the netting configuration so

00:31:47,309 --> 00:31:54,190
what - honestly is about our nested the

00:31:50,169 --> 00:31:58,030
net link is for some actions we have to

00:31:54,190 --> 00:32:00,940
deal with it and we open a socket and

00:31:58,030 --> 00:32:03,580
they open a new reflector given for a PC

00:32:00,940 --> 00:32:07,270
the new socket they're listening listen

00:32:03,580 --> 00:32:10,240
to all a net link messages for a TC

00:32:07,270 --> 00:32:13,480
capture these methods and translate them

00:32:10,240 --> 00:32:17,559
to the NPS via the control driver data

00:32:13,480 --> 00:32:19,540
sitting like it's called me and obvious

00:32:17,559 --> 00:32:22,150
itself a lot of their database

00:32:19,540 --> 00:32:24,400
application of the hard work is done

00:32:22,150 --> 00:32:25,870
over there so is this what is this thing

00:32:24,400 --> 00:32:27,549
so I can understand this right someone

00:32:25,870 --> 00:32:30,250
it writes a TC rule you go like that

00:32:27,549 --> 00:32:31,600
install it someone does again everything

00:32:30,250 --> 00:32:33,970
is presented they're using their

00:32:31,600 --> 00:32:36,100
reflection diamond write to their tables

00:32:33,970 --> 00:32:38,080
of the data add a QC data point is right

00:32:36,100 --> 00:32:40,419
and this is for querying only or what

00:32:38,080 --> 00:32:42,700
what is this no this is the actually the

00:32:40,419 --> 00:32:43,870
buggy this is what time delay the packet

00:32:42,700 --> 00:32:45,610
establish the poly processor

00:32:43,870 --> 00:32:47,830
ok but should it not be sitting in here

00:32:45,610 --> 00:32:51,730
instead it's residing on top of the

00:32:47,830 --> 00:32:54,250
coffee ok ok just there for all right to

00:32:51,730 --> 00:32:57,010
better understand this week ok little

00:32:54,250 --> 00:32:59,350
bit more detail user space

00:32:57,010 --> 00:33:02,380
user can configure the active route to

00:32:59,350 --> 00:33:06,570
TC any routing command anyway TC

00:33:02,380 --> 00:33:10,179
comments we open the socket with an auto

00:33:06,570 --> 00:33:13,030
TCC and I open s in comments capture

00:33:10,179 --> 00:33:15,820
everything in the ITC demon and we

00:33:13,030 --> 00:33:18,610
translate this comment to our tables to

00:33:15,820 --> 00:33:21,490
the dilute about the predefined and

00:33:18,610 --> 00:33:26,020
download it to the NPS that past rewrite

00:33:21,490 --> 00:33:29,230
it say via API the AGC configuration

00:33:26,020 --> 00:33:33,460
block have to box the rules itself and

00:33:29,230 --> 00:33:37,870
the actions and we have a rafting model

00:33:33,460 --> 00:33:39,790
that contains the field are also you can

00:33:37,870 --> 00:33:42,280
see here is the English side of the

00:33:39,790 --> 00:33:45,010
frame parser validation classification

00:33:42,280 --> 00:33:48,010
and on digger side wave transmission to

00:33:45,010 --> 00:33:50,590
network site or punting to us all the

00:33:48,010 --> 00:33:53,200
green blocks here are basically they

00:33:50,590 --> 00:33:55,289
open and view data playing API so

00:33:53,200 --> 00:34:01,480
there's the cables that were using

00:33:55,289 --> 00:34:06,120
and that's it so what what did we

00:34:01,480 --> 00:34:10,690
implement it we we wanted to reach a POC

00:34:06,120 --> 00:34:12,520
pretty quick so we we decided on a small

00:34:10,690 --> 00:34:15,790
feature set minimum feature set that

00:34:12,520 --> 00:34:16,450
will test our platform to see the

00:34:15,790 --> 00:34:21,580
performance

00:34:16,450 --> 00:34:23,710
so only in rescue disk currently with

00:34:21,580 --> 00:34:26,770
flower filter flowers that there is more

00:34:23,710 --> 00:34:29,740
human readable is more easy to

00:34:26,770 --> 00:34:31,629
understand the action that we support is

00:34:29,740 --> 00:34:36,460
a general election all general election

00:34:31,629 --> 00:34:39,730
okay continue reclassify drop etc P edit

00:34:36,460 --> 00:34:42,879
layer the draw mode and mirror

00:34:39,730 --> 00:34:46,690
redirection egress only sophistic

00:34:42,879 --> 00:34:48,849
sometimes 10 direction and we kept that

00:34:46,690 --> 00:34:53,500
if you look and field using the network

00:34:48,849 --> 00:34:56,290
so user can count configure the regulate

00:34:53,500 --> 00:34:58,210
the PC commands we listen to the DC

00:34:56,290 --> 00:35:02,380
commands get the configuration and

00:34:58,210 --> 00:35:06,190
downloaded the the goal were to reach

00:35:02,380 --> 00:35:08,020
400 gigabit per second basically we

00:35:06,190 --> 00:35:11,830
reach this performance with 400 bytes

00:35:08,020 --> 00:35:14,349
packet ID we tested it with the traffic

00:35:11,830 --> 00:35:16,990
generator connected to four ports of 100

00:35:14,349 --> 00:35:21,160
gigabit port and the configuration only

00:35:16,990 --> 00:35:24,310
for the testing was 1k filters per port

00:35:21,160 --> 00:35:25,990
which each filter we had two actions one

00:35:24,310 --> 00:35:29,650
action is to edit to do modify all the

00:35:25,990 --> 00:35:31,330
IP and update the checksum usually the

00:35:29,650 --> 00:35:33,250
checksum is not updated you know in the

00:35:31,330 --> 00:35:36,940
Linux you need to have a special action

00:35:33,250 --> 00:35:39,040
that updated Jackson but we wanted to to

00:35:36,940 --> 00:35:40,300
be sure that we don't do any harm to the

00:35:39,040 --> 00:35:44,230
packet itself in the modification

00:35:40,300 --> 00:35:46,599
process so we did a checksum also and we

00:35:44,230 --> 00:35:48,760
did the mirror redirect we send the

00:35:46,599 --> 00:35:51,640
packet back Lubeck back to the ports

00:35:48,760 --> 00:35:54,490
they came from and statistical action

00:35:51,640 --> 00:35:57,310
timestamp erection and this is the

00:35:54,490 --> 00:36:01,869
result we started somewhere around there

00:35:57,310 --> 00:36:05,470
300 degrees and with some improvement to

00:36:01,869 --> 00:36:07,330
the code and some other changes we did

00:36:05,470 --> 00:36:09,190
we receive on

00:36:07,330 --> 00:36:11,380
with Indian so I think this is a very

00:36:09,190 --> 00:36:13,630
cool feature here that you so you can

00:36:11,380 --> 00:36:15,400
add multiple actions or just you can add

00:36:13,630 --> 00:36:17,890
multiple filters to the same action yeah

00:36:15,400 --> 00:36:21,130
that's cool I don't know if any other

00:36:17,890 --> 00:36:23,620
hardware that can do this lick that can

00:36:21,130 --> 00:36:27,610
can have multiple filters pointing to

00:36:23,620 --> 00:36:29,140
the same action you can connect x4

00:36:27,610 --> 00:36:33,970
country okay

00:36:29,140 --> 00:36:37,510
yes inter you can do it too are you just

00:36:33,970 --> 00:36:39,190
dragging or stroke okay so the other

00:36:37,510 --> 00:36:40,270
thing that I think is very what is the

00:36:39,190 --> 00:36:43,150
limitation why do you only have a

00:36:40,270 --> 00:36:45,640
thousand you know it's just testing

00:36:43,150 --> 00:36:47,320
we're there we didn't watch to go to buy

00:36:45,640 --> 00:36:48,820
you you can do millions you can do

00:36:47,320 --> 00:36:52,630
millions and you'll still get the same

00:36:48,820 --> 00:36:57,250
rate yeah okay I think we're kind of

00:36:52,630 --> 00:36:59,710
running out of time but how so you

00:36:57,250 --> 00:37:01,240
promised to come back with an off loaded

00:36:59,710 --> 00:37:04,420
driver otherwise these guys will kill me

00:37:01,240 --> 00:37:09,670
for giving you the spot oh right okay

00:37:04,420 --> 00:37:16,900
promise me okay all right

00:37:09,670 --> 00:37:29,950
next on the schedule is can I can I have

00:37:16,900 --> 00:37:32,490
that okay but okay okay very choosy yes

00:37:29,950 --> 00:37:32,490
I know I could

00:37:33,920 --> 00:37:50,480
Oh times are a little unique yes okay

00:37:48,440 --> 00:37:52,640
how would I have you keep Karen can you

00:37:50,480 --> 00:37:53,200
do yours first and then while I look

00:37:52,640 --> 00:38:16,250
familiar

00:37:53,200 --> 00:38:18,050
yeah you can go okay okay okay so about

00:38:16,250 --> 00:38:21,950
the previous presentation we saw them

00:38:18,050 --> 00:38:23,990
people dizzy for application silos so

00:38:21,950 --> 00:38:27,140
this is a kind of sticking the stick

00:38:23,990 --> 00:38:30,230
steps forward and see what all the queue

00:38:27,140 --> 00:38:33,170
is feature we can have for some of these

00:38:30,230 --> 00:38:34,730
new features which are coming in so I'm

00:38:33,170 --> 00:38:37,070
sure everyone can understand the first

00:38:34,730 --> 00:38:39,290
command which is essentially we're

00:38:37,070 --> 00:38:41,390
trying to do here is we want to offload

00:38:39,290 --> 00:38:43,880
the young queue prior that's where that

00:38:41,390 --> 00:38:49,070
HW 2 is 2 stands for offloading to the

00:38:43,880 --> 00:38:52,730
hardware and that 0 0 0 1 2 2 3 is

00:38:49,070 --> 00:38:54,320
basically the priority to PC map and the

00:38:52,730 --> 00:38:56,300
queues after that one is for each

00:38:54,320 --> 00:39:00,500
surface class so many cues and at what

00:38:56,300 --> 00:39:02,540
offset so here the couple of things we

00:39:00,500 --> 00:39:04,280
are thinking is basically an ability for

00:39:02,540 --> 00:39:07,280
the hardware to offload some of this

00:39:04,280 --> 00:39:10,190
information using this traffic class

00:39:07,280 --> 00:39:11,720
queues and the count and the second one

00:39:10,190 --> 00:39:14,180
is which is not highlighted but the

00:39:11,720 --> 00:39:15,860
sniffing last minute acts together is we

00:39:14,180 --> 00:39:18,050
would also like to see that if you can

00:39:15,860 --> 00:39:20,720
do some sort of a rate limit for traffic

00:39:18,050 --> 00:39:22,700
class and we can specify the mean rate

00:39:20,720 --> 00:39:24,470
and that would be like basically for

00:39:22,700 --> 00:39:26,600
each traffic class what sort of rate

00:39:24,470 --> 00:39:29,540
limit we would like to have and likewise

00:39:26,600 --> 00:39:32,480
the max rate so that's basically the one

00:39:29,540 --> 00:39:34,520
thing where user can configure and it

00:39:32,480 --> 00:39:38,300
can get offloaded into the hardware with

00:39:34,520 --> 00:39:40,670
a specific rate limit and it can help

00:39:38,300 --> 00:39:44,140
essentially for the applications which

00:39:40,670 --> 00:39:46,870
are bound to specific traffic classes

00:39:44,140 --> 00:39:50,320
now in the second step once we set that

00:39:46,870 --> 00:39:52,150
up in the first step we will say that we

00:39:50,320 --> 00:39:54,670
would like to essentially extend the

00:39:52,150 --> 00:39:56,740
mirror action instead of taking just the

00:39:54,670 --> 00:40:00,240
device name the interface name within

00:39:56,740 --> 00:40:02,920
that one a specific atrophic class and

00:40:00,240 --> 00:40:04,780
again it will be only applicable and

00:40:02,920 --> 00:40:08,830
active in case of hardware also only

00:40:04,780 --> 00:40:11,590
mode so these are basically the two kind

00:40:08,830 --> 00:40:14,290
of our I call the Q s related features

00:40:11,590 --> 00:40:17,650
which we can have by extending or by

00:40:14,290 --> 00:40:20,490
modifying the TCM clip Ryo and having to

00:40:17,650 --> 00:40:24,810
add this rate limit and a specific

00:40:20,490 --> 00:40:24,810
direction for a given profit class

00:40:27,600 --> 00:40:32,800
likewise you can I can I ask you a

00:40:30,430 --> 00:40:36,280
question of sorry I'm still yes so you

00:40:32,800 --> 00:40:40,720
are trying to do something like HTV but

00:40:36,280 --> 00:40:46,060
HTV likely in hardware and then but

00:40:40,720 --> 00:40:49,300
using the mq prior to disk what is the

00:40:46,060 --> 00:40:51,760
hardware number 2 min the HW to offload

00:40:49,300 --> 00:40:54,280
partner yes sir I can offload to HUD but

00:40:51,760 --> 00:40:58,360
what is the tool well ok so I can

00:40:54,280 --> 00:41:00,790
explain ok so the existing mq prior

00:40:58,360 --> 00:41:02,620
configuration you had this Hardware

00:41:00,790 --> 00:41:04,950
value that was being passed that was an

00:41:02,620 --> 00:41:07,600
int that was being treated as a boolean

00:41:04,950 --> 00:41:10,510
I recently pushed changes in so

00:41:07,600 --> 00:41:12,160
basically we and so we'd always accept

00:41:10,510 --> 00:41:13,900
it as just okay you wanted to do

00:41:12,160 --> 00:41:15,670
Hardware offload on this so we'll go

00:41:13,900 --> 00:41:16,780
ahead and offload and hardware then when

00:41:15,670 --> 00:41:18,850
you go to check out the fact that we

00:41:16,780 --> 00:41:21,010
just returned one you could verify that

00:41:18,850 --> 00:41:22,210
ok I turned on the off load but it's now

00:41:21,010 --> 00:41:24,520
telling me I got something completely

00:41:22,210 --> 00:41:27,280
different than what I passed so it picks

00:41:24,520 --> 00:41:29,080
that bit so now basically a more or less

00:41:27,280 --> 00:41:30,400
just locked in at what's existing

00:41:29,080 --> 00:41:31,960
behavior but we should be able to extend

00:41:30,400 --> 00:41:36,670
that to treat that Hardware field as

00:41:31,960 --> 00:41:39,010
either a version or a to specify a type

00:41:36,670 --> 00:41:40,780
of hardware offload ideally is what

00:41:39,010 --> 00:41:42,910
we're looking for because the original

00:41:40,780 --> 00:41:44,680
hardware offload as it was you couldn't

00:41:42,910 --> 00:41:46,450
pass the Q's field it which is just well

00:41:44,680 --> 00:41:48,130
you could pass it it got ignored and

00:41:46,450 --> 00:41:49,600
dropped so it was never actually passed

00:41:48,130 --> 00:41:51,250
down to the device it just got ignored

00:41:49,600 --> 00:41:54,850
and left by the wayside

00:41:51,250 --> 00:41:56,320
there was some okay wiggle room in the

00:41:54,850 --> 00:41:58,390
interface so I locked it down

00:41:56,320 --> 00:41:59,620
a little bit tighter and then what we're

00:41:58,390 --> 00:42:01,810
going to do is Molly try to look at

00:41:59,620 --> 00:42:03,910
doing the hardware field value to

00:42:01,810 --> 00:42:06,010
specify like a version of the offload to

00:42:03,910 --> 00:42:08,890
do okay and those questions will be

00:42:06,010 --> 00:42:10,930
documented some way right and so it will

00:42:08,890 --> 00:42:11,350
be more friendly to humans after this

00:42:10,930 --> 00:42:13,480
right

00:42:11,350 --> 00:42:15,400
okay so ideally when we do this then we

00:42:13,480 --> 00:42:17,140
can pass it with version 2 and the

00:42:15,400 --> 00:42:18,850
kernel will say well no this device

00:42:17,140 --> 00:42:20,530
doesn't support version 2 so I'm not

00:42:18,850 --> 00:42:21,910
paying attention to the cues I'm not

00:42:20,530 --> 00:42:24,130
paying attention to the rate limit don't

00:42:21,910 --> 00:42:25,300
try to ask me to do that and whereas

00:42:24,130 --> 00:42:27,220
with this edge will be able to pass

00:42:25,300 --> 00:42:30,700
version 2 and it should recognize it and

00:42:27,220 --> 00:42:32,110
this syntax existed before yes you can

00:42:30,700 --> 00:42:33,490
so if you did it without the hardware

00:42:32,110 --> 00:42:35,200
offload it would actually give you a

00:42:33,490 --> 00:42:36,730
cute counts based on that it would lay

00:42:35,200 --> 00:42:38,020
out the cues for you and so we thought

00:42:36,730 --> 00:42:40,180
that would be a really useful feature to

00:42:38,020 --> 00:42:42,520
have so if you wanted to you could say

00:42:40,180 --> 00:42:45,070
you know my default traffic class has

00:42:42,520 --> 00:42:47,650
you know whatever the number of CPUs is

00:42:45,070 --> 00:42:49,780
in the system and my lesser one maybe I

00:42:47,650 --> 00:42:52,030
only need like one cube for all of my

00:42:49,780 --> 00:42:53,890
control traffic that's on TC 7 or

00:42:52,030 --> 00:42:55,120
whatever and so you just break things

00:42:53,890 --> 00:42:56,710
out that way and lay them out you don't

00:42:55,120 --> 00:42:58,930
saturate the system with ridiculous and

00:42:56,710 --> 00:43:02,530
Emperor's yeah yeah so the other thing

00:42:58,930 --> 00:43:05,740
is this one here what you're trying to

00:43:02,530 --> 00:43:07,840
do what you're basically we're saying

00:43:05,740 --> 00:43:09,820
instead of going in stop redirecting the

00:43:07,840 --> 00:43:12,580
traffic to just eat zero within the eat

00:43:09,820 --> 00:43:16,090
zero for a certain traffic class so a

00:43:12,580 --> 00:43:19,900
traffic class sort of would 802 dot 1 P

00:43:16,090 --> 00:43:22,030
tag value means traffic class no this

00:43:19,900 --> 00:43:24,400
key key when is there the one where the

00:43:22,030 --> 00:43:26,380
priority train PC map ok so it may be

00:43:24,400 --> 00:43:28,780
this this queue here yeah one of our

00:43:26,380 --> 00:43:31,000
faults okay so that's not a queue so

00:43:28,780 --> 00:43:33,220
number priority private mafia

00:43:31,000 --> 00:43:35,710
yes prior map which okay it's over to TC

00:43:33,220 --> 00:43:38,230
oh yeah oh yeah I guess ok so to do this

00:43:35,710 --> 00:43:39,430
it would be this guy here then yeah so

00:43:38,230 --> 00:43:42,370
basically the easiest way to think of it

00:43:39,430 --> 00:43:44,680
okay so one says just move it over to

00:43:42,370 --> 00:43:46,690
that second grouping there bit - a - yes

00:43:44,680 --> 00:43:48,250
move it over to that set of group at

00:43:46,690 --> 00:43:49,750
that group excuse versus the first yeah

00:43:48,250 --> 00:43:52,330
I'm kind of a little uncomfortable but

00:43:49,750 --> 00:43:54,640
because you're tying it to the week

00:43:52,330 --> 00:43:56,380
you wrote this can be a Detroit should

00:43:54,640 --> 00:43:58,060
we not use this heavy edit for this it

00:43:56,380 --> 00:43:59,470
won't work for this why is that because

00:43:58,060 --> 00:44:01,300
it is telling the hardware to put

00:43:59,470 --> 00:44:02,590
something in your metadata maybe or well

00:44:01,300 --> 00:44:03,190
that's the thing there's no it's not at

00:44:02,590 --> 00:44:05,070
this point

00:44:03,190 --> 00:44:07,920
it's done in hardware

00:44:05,070 --> 00:44:09,210
down in the hardware so basically right

00:44:07,920 --> 00:44:10,890
now we already have something that says

00:44:09,210 --> 00:44:13,530
take you know for like to switch

00:44:10,890 --> 00:44:16,380
difference and take this traffic and put

00:44:13,530 --> 00:44:17,970
it on the VF and now this is a if the VF

00:44:16,380 --> 00:44:21,740
supports TTS you can say take this

00:44:17,970 --> 00:44:23,850
traffic and put it on TC 1 on that VF

00:44:21,740 --> 00:44:27,000
that's basically the idea of yeah it

00:44:23,850 --> 00:44:29,000
does look I I don't care about humans

00:44:27,000 --> 00:44:32,850
that much but it does look a little

00:44:29,000 --> 00:44:34,880
unfriendly well is it just the naming

00:44:32,850 --> 00:44:38,010
because that's the thing is essentially

00:44:34,880 --> 00:44:41,120
could we have an action that before that

00:44:38,010 --> 00:44:42,900
rocks this thing I sit in a hardware

00:44:41,120 --> 00:44:44,520
default if there's not any actual

00:44:42,900 --> 00:44:47,010
metadata that goes along with it that's

00:44:44,520 --> 00:44:49,440
the thing is essentially a TC ends up

00:44:47,010 --> 00:44:51,990
being a sub group within the net tab

00:44:49,440 --> 00:44:54,270
itself so like that empty prior thing

00:44:51,990 --> 00:44:55,680
defines those 4q groups and we're

00:44:54,270 --> 00:44:58,050
wanting to somehow target one of those

00:44:55,680 --> 00:44:59,700
cube groups on transmit yes we can get

00:44:58,050 --> 00:45:02,670
away with using priority 2 priority

00:44:59,700 --> 00:45:03,990
indirect maps back to TT but on the

00:45:02,670 --> 00:45:05,970
receive side there's not a good way to

00:45:03,990 --> 00:45:07,890
do it because the problem is priorities

00:45:05,970 --> 00:45:09,240
okay I'm just what as a tree get is

00:45:07,890 --> 00:45:12,360
going to send me an email complaining

00:45:09,240 --> 00:45:17,280
how complex this is he's done that

00:45:12,360 --> 00:45:22,650
before yeah we might have a healthy box

00:45:17,280 --> 00:45:28,530
okay most like zone click one more site

00:45:22,650 --> 00:45:30,990
okay quickly Lucas do realistic so we we

00:45:28,530 --> 00:45:34,320
saw a similar activity basically table

00:45:30,990 --> 00:45:36,780
creation and linking wire participar so

00:45:34,320 --> 00:45:40,830
likewise I think it will be nice to as

00:45:36,780 --> 00:45:43,200
well have an ability to specify the IP

00:45:40,830 --> 00:45:46,440
address range not just based on the mask

00:45:43,200 --> 00:45:49,320
and a basically any action such as allow

00:45:46,440 --> 00:45:51,450
drop cowington mod so this is generally

00:45:49,320 --> 00:45:52,860
when we are the hardware HDL how we can

00:45:51,450 --> 00:45:56,250
offload some of this feature in the

00:45:52,860 --> 00:46:00,090
hardware ACL using the absolute ranges

00:45:56,250 --> 00:46:02,130
for IP address and the port one and the

00:46:00,090 --> 00:46:05,220
next one is the hardware lag and the

00:46:02,130 --> 00:46:08,450
code cause domain infection select

00:46:05,220 --> 00:46:08,450
phindeli answer that last

00:46:11,810 --> 00:46:17,010
proposition on 1 & 2

00:46:13,710 --> 00:46:18,630
I was thinking if you can explain the PC

00:46:17,010 --> 00:46:21,090
smaller itself which we take the port

00:46:18,630 --> 00:46:23,390
address range and yeah I think port

00:46:21,090 --> 00:46:27,690
address range is a useful feature here

00:46:23,390 --> 00:46:30,480
you adding port ranges in pot ranges are

00:46:27,690 --> 00:46:35,970
poor train so I wanted to look at for 16

00:46:30,480 --> 00:46:40,620
to 1500 with in Flour how charming you

00:46:35,970 --> 00:46:43,080
would that be unique multiple hash part

00:46:40,620 --> 00:46:46,170
just saying this is a bit out of here

00:46:43,080 --> 00:46:49,800
but I would think about it you may need

00:46:46,170 --> 00:46:52,290
multiple because it's going to be power

00:46:49,800 --> 00:46:54,780
of 2 so you probably need to split them

00:46:52,290 --> 00:46:58,770
into mark into two or more but it is

00:46:54,780 --> 00:47:02,370
doable and it's a useful feature so

00:46:58,770 --> 00:47:06,050
you're going to to just add it then or

00:47:02,370 --> 00:47:09,030
how I don't have the range place in this

00:47:06,050 --> 00:47:12,000
so you said ranges right yeah support

00:47:09,030 --> 00:47:13,470
address ranges and IP address range so

00:47:12,000 --> 00:47:16,100
right now we are not added but that's

00:47:13,470 --> 00:47:19,730
something we're seeking to get any cook

00:47:16,100 --> 00:47:19,730
does it even make sense

00:47:22,309 --> 00:47:32,299
an x-phone is a port site broadcast

00:47:24,529 --> 00:47:33,470
domain move action so the first one we

00:47:32,299 --> 00:47:35,599
were talking about the table creation

00:47:33,470 --> 00:47:39,559
and linking is that you're already

00:47:35,599 --> 00:47:42,710
working on that I guess right so with

00:47:39,559 --> 00:47:46,660
the TC flower adding the ability to

00:47:42,710 --> 00:47:48,589
create tables and lengthen

00:47:46,660 --> 00:47:51,049
he's going to talk about nice and

00:47:48,589 --> 00:47:54,380
generic yeah a couple slides I don't

00:47:51,049 --> 00:47:57,499
know ok so I guys are coming yeah okay

00:47:54,380 --> 00:47:59,450
so the last two that you know we're

00:47:57,499 --> 00:48:02,029
looking again from the hardware

00:47:59,450 --> 00:48:04,339
perspective the rules that we add in the

00:48:02,029 --> 00:48:06,499
hardware if we can group them better for

00:48:04,339 --> 00:48:11,390
optimal use that's where it is coming

00:48:06,499 --> 00:48:14,960
from so for now any rule that we are

00:48:11,390 --> 00:48:18,279
mirrored egress rule it kind of has an

00:48:14,960 --> 00:48:22,160
implicit source and destination kind of

00:48:18,279 --> 00:48:23,779
in it so you you have a match action and

00:48:22,160 --> 00:48:26,359
you have a destination where you want

00:48:23,779 --> 00:48:29,599
that packet to be forwarded but also as

00:48:26,359 --> 00:48:32,089
part of your TC rule you specified the

00:48:29,599 --> 00:48:34,759
interface from which that packet is

00:48:32,089 --> 00:48:37,190
coming I mean the hardware could choose

00:48:34,759 --> 00:48:40,369
to ignore that interface and apply it

00:48:37,190 --> 00:48:45,799
for the whole you know the web or the

00:48:40,369 --> 00:48:47,660
whole you know bridge or you know will

00:48:45,799 --> 00:48:50,960
that be a better idea if I could give a

00:48:47,660 --> 00:48:54,259
hint and is there instead of using the

00:48:50,960 --> 00:48:58,489
source interface I give the source

00:48:54,259 --> 00:49:01,640
switch okay well basically the problem

00:48:58,489 --> 00:49:05,980
is that currently in TC you the cutest

00:49:01,640 --> 00:49:09,019
card is per device so via when you add

00:49:05,980 --> 00:49:13,730
any other flower clusters for instance

00:49:09,019 --> 00:49:16,190
or any filter instance and in that queue

00:49:13,730 --> 00:49:19,910
disk it's per death that device so you

00:49:16,190 --> 00:49:23,150
cannot do that it's with something which

00:49:19,910 --> 00:49:26,599
I am trying to handle as well to

00:49:23,150 --> 00:49:28,320
actually be able to share the filters

00:49:26,599 --> 00:49:31,650
amount of humility

00:49:28,320 --> 00:49:33,270
two disks yeah I think no no no you know

00:49:31,650 --> 00:49:35,820
you you guys will have the same problem

00:49:33,270 --> 00:49:38,640
where you really want optimal rules so

00:49:35,820 --> 00:49:41,240
you want to group them together it's the

00:49:38,640 --> 00:49:43,830
problem is two ways one is for grouping

00:49:41,240 --> 00:49:45,810
you know to apply the same match

00:49:43,830 --> 00:49:49,200
crichton for packets from wherever they

00:49:45,810 --> 00:49:53,640
came but ended up in in one one

00:49:49,200 --> 00:49:55,050
interface the other one is I was talking

00:49:53,640 --> 00:49:58,980
when we were talking about the protocol

00:49:55,050 --> 00:50:02,010
header where if I can apply a rule for

00:49:58,980 --> 00:50:03,900
multiple protocol types that are grouped

00:50:02,010 --> 00:50:06,120
together as long as they have the same

00:50:03,900 --> 00:50:08,400
field so that that's another object

00:50:06,120 --> 00:50:16,200
optimization that would be good for

00:50:08,400 --> 00:50:18,600
Hardware yeah thanks thank you okay I

00:50:16,200 --> 00:50:22,770
got yes

00:50:18,600 --> 00:50:30,300
can I switch to ISM oh it's already

00:50:22,770 --> 00:50:34,410
there got thanks hello I'm modeling I'll

00:50:30,300 --> 00:50:37,560
be speaking about the DPA devices and

00:50:34,410 --> 00:50:45,180
the TC offload we have and the ones we

00:50:37,560 --> 00:50:47,070
plan for this okay okay so in case

00:50:45,180 --> 00:50:50,610
anybody wants to read the code after

00:50:47,070 --> 00:50:52,560
after this let me tell you where to find

00:50:50,610 --> 00:50:55,080
it it's in drivers not Ethernet

00:50:52,560 --> 00:50:57,480
Freescale and the reason for that is

00:50:55,080 --> 00:51:01,020
when we started this way we were free

00:50:57,480 --> 00:51:03,950
skinned fiscal was acquired by an XP you

00:51:01,020 --> 00:51:06,990
can see that fiscal is actually the

00:51:03,950 --> 00:51:10,380
semiconductor spin-off of Motorola

00:51:06,990 --> 00:51:13,320
Philips spin-off a company called an XP

00:51:10,380 --> 00:51:16,200
and we are currently in the process of

00:51:13,320 --> 00:51:17,940
being acquired by Qualcomm so probably

00:51:16,200 --> 00:51:20,790
it's a good idea to keep the folder name

00:51:17,940 --> 00:51:26,000
as it is and I change it each time the

00:51:20,790 --> 00:51:29,700
companies decide to buy each other now

00:51:26,000 --> 00:51:31,290
Jamal did you say to slide until 10

00:51:29,700 --> 00:51:34,710
minutes or 10 times in two minutes with

00:51:31,290 --> 00:51:39,420
the line as fast as okay that's already

00:51:34,710 --> 00:51:40,839
mixed yeah so when when I'm talking

00:51:39,420 --> 00:51:46,469
about the Pai

00:51:40,839 --> 00:51:49,509
probably refer to DPA one there are

00:51:46,469 --> 00:51:52,719
several several variants of this

00:51:49,509 --> 00:51:54,249
architecture DPA comes from data plot

00:51:52,719 --> 00:51:58,989
acceleration architecture it was

00:51:54,249 --> 00:52:02,380
introduced in 2008 on PowerPC currently

00:51:58,989 --> 00:52:04,029
it's also found on arm and it has a

00:52:02,380 --> 00:52:06,009
newer generation which is trying to

00:52:04,029 --> 00:52:13,029
address some issues that they will try

00:52:06,009 --> 00:52:16,150
to explain so presently what what we do

00:52:13,029 --> 00:52:18,700
have is support for port is in the

00:52:16,150 --> 00:52:20,739
vanilla kernel we have some touches in

00:52:18,700 --> 00:52:22,869
review that we hope we'll be able to put

00:52:20,739 --> 00:52:25,029
in a good shape and get marsh to get

00:52:22,869 --> 00:52:27,670
support for the army platforms would you

00:52:25,029 --> 00:52:33,700
pay one and we are preparing the k2

00:52:27,670 --> 00:52:35,759
support and we don't have much in in the

00:52:33,700 --> 00:52:39,339
way of DCF loads

00:52:35,759 --> 00:52:42,039
ready we we do have some we're expect a

00:52:39,339 --> 00:52:45,069
and the extra example to get beyond the

00:52:42,039 --> 00:52:48,430
dusting we were joking that the DP from

00:52:45,069 --> 00:52:52,390
decades from dusting and acceleration is

00:52:48,430 --> 00:52:55,509
going to come later that the mq pure

00:52:52,390 --> 00:52:57,640
support we we introduced this is

00:52:55,509 --> 00:53:00,759
basically supporting four priority

00:52:57,640 --> 00:53:06,059
levels these are mud to some are some

00:53:00,759 --> 00:53:10,089
harder harder prioritize what kills now

00:53:06,059 --> 00:53:14,430
this is not a fish it's a diagram of the

00:53:10,089 --> 00:53:17,229
architecture we were six

00:53:14,430 --> 00:53:21,339
we are the weird guys which don't have a

00:53:17,229 --> 00:53:23,499
ring are not on a pc a bus we have all

00:53:21,339 --> 00:53:26,170
kinds of software constructs and

00:53:23,499 --> 00:53:28,079
hardware constructs that differ from the

00:53:26,170 --> 00:53:32,380
usual networking driver

00:53:28,079 --> 00:53:36,309
those those big spots are the queue

00:53:32,380 --> 00:53:38,940
manager we have hardwick use we also

00:53:36,309 --> 00:53:42,600
have something called the buffer manager

00:53:38,940 --> 00:53:44,580
which is central to to our

00:53:42,600 --> 00:53:48,090
oxidation architecture and also we have

00:53:44,580 --> 00:53:51,210
what we call a frame manager for each of

00:53:48,090 --> 00:53:53,790
these animals we were required to put

00:53:51,210 --> 00:53:55,500
together a driver and upstream it and in

00:53:53,790 --> 00:53:57,030
the end up stream the DP eternal driver

00:53:55,500 --> 00:54:00,060
that came as a surprise to some people

00:53:57,030 --> 00:54:01,620
for their work asking ok this is your f

00:54:00,060 --> 00:54:09,390
man driver where's the attendant know

00:54:01,620 --> 00:54:11,400
it's coming later so this you said we

00:54:09,390 --> 00:54:12,900
had time so else been found something

00:54:11,400 --> 00:54:17,460
like ten minutes for each of those

00:54:12,900 --> 00:54:20,430
blocks this is a diagram for for the

00:54:17,460 --> 00:54:23,850
driver we have since 2008 it's a link

00:54:20,430 --> 00:54:25,860
driver it's open source but talking

00:54:23,850 --> 00:54:28,590
about freedom you are free to read that

00:54:25,860 --> 00:54:32,940
code it's only 100,000 lines of code so

00:54:28,590 --> 00:54:37,170
I was a bit shy to send it for review so

00:54:32,940 --> 00:54:39,870
what we did was to start over and this

00:54:37,170 --> 00:54:42,000
is what what one of those drivers I was

00:54:39,870 --> 00:54:45,900
talking about it looks like all kinds of

00:54:42,000 --> 00:54:49,530
blocks these are used for similar agent

00:54:45,900 --> 00:54:51,570
application for this thing yes so that

00:54:49,530 --> 00:54:54,150
code base I was belittling about those

00:54:51,570 --> 00:54:56,880
or 100,000 lines of code are part of the

00:54:54,150 --> 00:54:59,970
SDK which is really available and so you

00:54:56,880 --> 00:55:03,180
have an SDK yeah that's that's offering

00:54:59,970 --> 00:55:05,760
support for both loads all kinds of

00:55:03,180 --> 00:55:08,100
stuff IPSec offload not and I'm hoping

00:55:05,760 --> 00:55:10,590
you hear whatever but what we are doing

00:55:08,100 --> 00:55:13,500
now is reinventing that in a smaller

00:55:10,590 --> 00:55:18,330
package so the current f1 driver is

00:55:13,500 --> 00:55:20,220
10,000 lines of code not 100 and what we

00:55:18,330 --> 00:55:22,110
are trying to do now is work on that

00:55:20,220 --> 00:55:25,500
accessibility part sooner to make the

00:55:22,110 --> 00:55:27,810
code readable and also come up what

00:55:25,500 --> 00:55:30,660
happened here is that the guys working

00:55:27,810 --> 00:55:31,140
on this enabled everything so that's

00:55:30,660 --> 00:55:32,970
great

00:55:31,140 --> 00:55:35,070
but maybe you don't really need

00:55:32,970 --> 00:55:36,810
everything you need only the relevant

00:55:35,070 --> 00:55:39,630
parts and we started with the relevant

00:55:36,810 --> 00:55:41,820
parts and that's that's how we are

00:55:39,630 --> 00:55:43,380
trying to build relevant features and

00:55:41,820 --> 00:55:46,940
not everything because we don't like

00:55:43,380 --> 00:55:49,880
SDKs around here yes I know

00:55:46,940 --> 00:55:53,120
so currently we have two set of drivers

00:55:49,880 --> 00:55:54,770
that we are maintaining okay those we

00:55:53,120 --> 00:55:58,430
were talking about the whole solution is

00:55:54,770 --> 00:56:01,700
something like 150 K lines of code the

00:55:58,430 --> 00:56:04,610
new one is 20 K okay where you're moving

00:56:01,700 --> 00:56:07,070
to a Korean car and we are now trying to

00:56:04,610 --> 00:56:09,770
reinvent this and the line what happens

00:56:07,070 --> 00:56:12,680
you can imagine a decade ago that's

00:56:09,770 --> 00:56:16,040
actually nine years coming and saying we

00:56:12,680 --> 00:56:19,010
would like to have some offloads of DC

00:56:16,040 --> 00:56:26,590
in rather probably it wasn't a good time

00:56:19,010 --> 00:56:29,720
yeah so we're yeah this ugly picture is

00:56:26,590 --> 00:56:32,230
what what we have on the newer set of

00:56:29,720 --> 00:56:37,300
devices this is something called the

00:56:32,230 --> 00:56:41,000
customer aggressive traffic management

00:56:37,300 --> 00:56:43,460
actually what this does is QoS on the

00:56:41,000 --> 00:56:46,520
egress side and you have all kinds of

00:56:43,460 --> 00:56:48,410
features in place which if somebody

00:56:46,520 --> 00:56:51,670
looks carefully at this which resembles

00:56:48,410 --> 00:56:56,150
HTTP to a certain point is not

00:56:51,670 --> 00:56:59,390
perpetually hierarchical it has a series

00:56:56,150 --> 00:57:02,240
of layers what you see doors there are

00:56:59,390 --> 00:57:04,430
queues friend cues we aggregate those

00:57:02,240 --> 00:57:06,830
into work use there are priorities

00:57:04,430 --> 00:57:11,560
between them work use again get

00:57:06,830 --> 00:57:15,320
prioritizing through different different

00:57:11,560 --> 00:57:18,020
sub elements and those we are into the

00:57:15,320 --> 00:57:19,760
interface Union and for each of those

00:57:18,020 --> 00:57:24,320
levels you have priorities and we also

00:57:19,760 --> 00:57:27,380
have shaping and you can set committed

00:57:24,320 --> 00:57:32,030
rate access rate and so on so it's very

00:57:27,380 --> 00:57:34,160
like HTTP now in a way what we are

00:57:32,030 --> 00:57:36,970
trying now to do is to understand which

00:57:34,160 --> 00:57:39,620
would be the best way to introduce this

00:57:36,970 --> 00:57:42,470
so this looks like HTTP you say right

00:57:39,620 --> 00:57:44,060
you have the concept of a class is that

00:57:42,470 --> 00:57:47,270
would that be like an Apache disk you

00:57:44,060 --> 00:57:49,040
know now yeah and then you have levels

00:57:47,270 --> 00:57:51,800
you don't have a hierarchy you can have

00:57:49,040 --> 00:57:53,540
one scheduled well as games enter the

00:57:51,800 --> 00:57:55,520
parent in the right and then we have the

00:57:53,540 --> 00:57:58,790
children here so you can have parenting

00:57:55,520 --> 00:57:59,750
of yeah equivalent to a key disc you

00:57:58,790 --> 00:58:01,130
have the root

00:57:59,750 --> 00:58:03,500
if Kim's right and then you have the

00:58:01,130 --> 00:58:06,860
children or the classrooms here okay and

00:58:03,500 --> 00:58:10,970
this is the essentially an output port

00:58:06,860 --> 00:58:12,710
is a Korean and you have there but you

00:58:10,970 --> 00:58:15,230
don't have hierarchies am I correct I'm

00:58:12,710 --> 00:58:17,600
not we cannot another layer we cannot

00:58:15,230 --> 00:58:19,880
add it so it just the current and

00:58:17,600 --> 00:58:22,250
finally HTV will work fine there yeah

00:58:19,880 --> 00:58:25,880
there are some some questions and I

00:58:22,250 --> 00:58:27,320
summarized those later you need to

00:58:25,880 --> 00:58:28,550
understand how the hardware looks and

00:58:27,320 --> 00:58:30,590
what you can and cannot do because

00:58:28,550 --> 00:58:32,900
otherwise you won't be able to write

00:58:30,590 --> 00:58:34,580
rules so I use I don't care I mean if

00:58:32,900 --> 00:58:37,220
I'm if you're telling me support HTTP I

00:58:34,580 --> 00:58:39,320
just config HTV right then at least you

00:58:37,220 --> 00:58:41,870
have to hide that funny the problem is

00:58:39,320 --> 00:58:44,060
if you want to go deep you cannot

00:58:41,870 --> 00:58:45,950
because the hardware can't and that's

00:58:44,060 --> 00:58:50,420
not so we need some capability exchange

00:58:45,950 --> 00:58:53,630
maybe see what you could do so now

00:58:50,420 --> 00:58:57,470
that's a summary what what what we want

00:58:53,630 --> 00:58:59,620
to do what we we plan to do there are

00:58:57,470 --> 00:59:01,970
multiple ways we can go there's an

00:58:59,620 --> 00:59:04,460
effervescence in this area we are

00:59:01,970 --> 00:59:06,850
looking at lower and it's nothing well

00:59:04,460 --> 00:59:09,980
tour hardware abilities and it's also

00:59:06,850 --> 00:59:13,550
more readable probably more user

00:59:09,980 --> 00:59:16,370
friendly we could do you turkey to

00:59:13,550 --> 00:59:19,670
floating just as well but probably that

00:59:16,370 --> 00:59:21,530
would be second priority we have our

00:59:19,670 --> 00:59:23,870
main priority to do some air accession

00:59:21,530 --> 00:59:28,820
to to improve or forwarding performance

00:59:23,870 --> 00:59:32,240
but that's that's likely to come soon we

00:59:28,820 --> 00:59:34,190
cut a lot of debug stuff from from the

00:59:32,240 --> 00:59:37,400
driver we sent upstream and we probably

00:59:34,190 --> 00:59:39,410
need to think about some critical debug

00:59:37,400 --> 00:59:43,220
features that we need to write back and

00:59:39,410 --> 00:59:46,250
I have seen some some slides that point

00:59:43,220 --> 00:59:50,630
us to a good direction so I can really

00:59:46,250 --> 00:59:53,360
bug stuff is this so when you have this

00:59:50,630 --> 00:59:55,700
this huge an animal you need to see into

00:59:53,360 --> 00:59:57,620
the hardware and reckless with something

00:59:55,700 --> 01:00:00,260
like what you represented on the pipe

00:59:57,620 --> 01:00:02,090
maybe yeah that that's that that's very

01:00:00,260 --> 01:00:04,790
interesting for us and we'll probably

01:00:02,090 --> 01:00:06,920
try to model is you may not have to

01:00:04,790 --> 01:00:10,400
support you 32 if flower can be extended

01:00:06,920 --> 01:00:13,829
to have extended offset length values as

01:00:10,400 --> 01:00:15,899
we have a type

01:00:13,829 --> 01:00:18,089
because you know flour could include

01:00:15,899 --> 01:00:19,559
u-32 and most of them we write apps

01:00:18,089 --> 01:00:23,549
around the steps I don't care about

01:00:19,559 --> 01:00:25,409
humans personally I mean we writing a

01:00:23,549 --> 01:00:26,939
you could write applications that would

01:00:25,409 --> 01:00:33,569
make it more human friendly if needed

01:00:26,939 --> 01:00:39,029
yeah indeed yeah also we besides the

01:00:33,569 --> 01:00:43,739
filters we are looking at we first look

01:00:39,029 --> 01:00:47,549
at TBF and probably HD beads it's closer

01:00:43,739 --> 01:00:49,349
to what we we can do on the hardware we

01:00:47,549 --> 01:00:52,559
have that limitation we cannot do

01:00:49,349 --> 01:00:58,079
everything HTTP does and they did are

01:00:52,559 --> 01:01:00,989
some questions Amazon from this and what

01:00:58,079 --> 01:01:02,669
what we also need to understand is how

01:01:00,989 --> 01:01:03,869
we can leverage what we have in the

01:01:02,669 --> 01:01:06,659
hardware which is strict priority

01:01:03,869 --> 01:01:11,009
weighted fair queuing read way to thread

01:01:06,659 --> 01:01:13,589
that can be configured and in in regards

01:01:11,009 --> 01:01:15,479
to what we already discussed we mean

01:01:13,589 --> 01:01:17,249
probably to think not not only a

01:01:15,479 --> 01:01:21,509
thoughts probably the whole community

01:01:17,249 --> 01:01:23,459
should should think about this this is a

01:01:21,509 --> 01:01:25,409
common problem for for everybody I guess

01:01:23,459 --> 01:01:27,029
there are other features which are not

01:01:25,409 --> 01:01:28,709
perfectly mapping to the software

01:01:27,029 --> 01:01:31,139
features and how do you expose those

01:01:28,709 --> 01:01:33,989
limitations and how do you configure

01:01:31,139 --> 01:01:36,539
them because right now there's a wide

01:01:33,989 --> 01:01:39,299
array of options and I don't know I

01:01:36,539 --> 01:01:42,089
think this B's use the link is an option

01:01:39,299 --> 01:01:44,699
I think they've linked I think is but

01:01:42,089 --> 01:01:47,129
probably more general question is Eric

01:01:44,699 --> 01:01:53,009
for example can you see can you pass the

01:01:47,129 --> 01:01:55,949
mic to Eric so Eric you see htb as ever

01:01:53,009 --> 01:01:59,459
being able to o be offloaded your

01:01:55,949 --> 01:02:01,739
favorite key disk yeah

01:01:59,459 --> 01:02:03,539
probably part of it okay it can be done

01:02:01,739 --> 01:02:05,549
I mean yeah the kubrana

01:02:03,539 --> 01:02:08,189
it should be can be problematic with a

01:02:05,549 --> 01:02:10,979
lot of debt but if we have one hierarchy

01:02:08,189 --> 01:02:13,510
for example if a lot of I think most of

01:02:10,979 --> 01:02:17,050
the use of hv are pretty

01:02:13,510 --> 01:02:20,460
limited I'm not so everybody use a

01:02:17,050 --> 01:02:24,070
full-blown do use hierarchy at all

01:02:20,460 --> 01:02:25,630
rocky you don't use hierarchies do like

01:02:24,070 --> 01:02:28,510
yeah we all have a senior level

01:02:25,630 --> 01:02:30,700
logically okay so it's gonna be a hard

01:02:28,510 --> 01:02:34,630
way what about you

01:02:30,700 --> 01:02:37,000
you guys did you ever consider going the

01:02:34,630 --> 01:02:39,220
other way and saying let's make a new

01:02:37,000 --> 01:02:42,359
cutest that behaves like my hardware

01:02:39,220 --> 01:02:45,850
then and then and if I did that then

01:02:42,359 --> 01:02:48,690
people could test it and your offload

01:02:45,850 --> 01:02:51,220
would match what the cutest offers and

01:02:48,690 --> 01:02:53,290
especially if you have a restricted set

01:02:51,220 --> 01:02:55,570
maybe you can only two levels or maybe

01:02:53,290 --> 01:02:58,690
your you have a weighted read that's

01:02:55,570 --> 01:03:03,580
better and work i'm let's be honest I've

01:02:58,690 --> 01:03:07,330
done the mark and read stuff in its we

01:03:03,580 --> 01:03:09,310
hire a rope we are aware of asking

01:03:07,330 --> 01:03:12,490
ourselves these questions you can see it

01:03:09,310 --> 01:03:15,910
on the slide the next set of things to

01:03:12,490 --> 01:03:19,300
think the consider so we can either try

01:03:15,910 --> 01:03:22,119
to extend whatever exists as our

01:03:19,300 --> 01:03:25,090
colleagues already started doing for and

01:03:22,119 --> 01:03:28,780
keep wheel anodic right has been doing

01:03:25,090 --> 01:03:30,520
this for years but if I had Eric

01:03:28,780 --> 01:03:32,230
correctly in its presentation Annette

01:03:30,520 --> 01:03:38,230
calm you see it may be a problem now

01:03:32,230 --> 01:03:41,730
right with the multipath entries yeah so

01:03:38,230 --> 01:03:45,670
actually yeah so the the ability to

01:03:41,730 --> 01:03:48,640
overload mq prior stuff with the right

01:03:45,670 --> 01:03:50,650
limit or profess it looks awesome that

01:03:48,640 --> 01:03:52,750
you like that yeah because when you have

01:03:50,650 --> 01:03:55,240
a multiple hues a lot of constants you

01:03:52,750 --> 01:03:58,000
then you have this effect of so it's a

01:03:55,240 --> 01:04:00,160
little I'm looking so that would be nice

01:03:58,000 --> 01:04:02,260
to have this instead of having HDTV you

01:04:00,160 --> 01:04:09,220
would rather have NQ prior with with

01:04:02,260 --> 01:04:13,000
rate-limiting support right so the

01:04:09,220 --> 01:04:16,000
design dingo on a direction it's it's in

01:04:13,000 --> 01:04:18,940
our mutual benefit so it's it good as

01:04:16,000 --> 01:04:20,980
we're having the discussion as you said

01:04:18,940 --> 01:04:22,650
we were thinking also about trying to

01:04:20,980 --> 01:04:24,630
invent a new cue disc that

01:04:22,650 --> 01:04:26,549
well map store harder the problem is if

01:04:24,630 --> 01:04:30,599
everybody does that we'll probably too

01:04:26,549 --> 01:04:32,910
many so maybe trying to to fit the

01:04:30,599 --> 01:04:36,180
existing ones such as extending interior

01:04:32,910 --> 01:04:38,190
so it's a better idea and another topic

01:04:36,180 --> 01:04:41,039
that probably needs to be considered is

01:04:38,190 --> 01:04:44,730
what we can do in the in the way of

01:04:41,039 --> 01:04:47,789
mixing software and hardware offloads if

01:04:44,730 --> 01:04:49,019
that is that feasible is it ethical and

01:04:47,789 --> 01:04:51,660
we are we actually doing that with

01:04:49,019 --> 01:04:53,190
filters right you can win it you can

01:04:51,660 --> 01:04:55,009
specify which filter goes in hard win

01:04:53,190 --> 01:04:57,359
which it doesn't right I think Rory's

01:04:55,009 --> 01:04:59,670
example sure it is like a soft with a

01:04:57,359 --> 01:05:00,930
skip skip software option you know if it

01:04:59,670 --> 01:05:02,460
says ok this is going to work in

01:05:00,930 --> 01:05:04,650
software don't give it and go ahead and

01:05:02,460 --> 01:05:06,779
place the hardware but my question is

01:05:04,650 --> 01:05:09,509
for example HTV you have that see

01:05:06,779 --> 01:05:11,579
infinite - I don't think we have that at

01:05:09,509 --> 01:05:13,170
the cutest level yeah oh yeah well can

01:05:11,579 --> 01:05:15,089
you do that so if you don't have

01:05:13,170 --> 01:05:16,440
hierarchies I mean luckily there's no

01:05:15,089 --> 01:05:17,430
reason but all of the other things

01:05:16,440 --> 01:05:19,650
that's always one of the other reasons

01:05:17,430 --> 01:05:22,109
for using empty pile is it actually has

01:05:19,650 --> 01:05:23,700
the concept of if you can specify that

01:05:22,109 --> 01:05:26,039
okay I want this to go into hardware in

01:05:23,700 --> 01:05:27,660
this way and then if it doesn't fit into

01:05:26,039 --> 01:05:28,799
hardware it says ok no I can't do that

01:05:27,660 --> 01:05:30,989
understand returning and you get

01:05:28,799 --> 01:05:33,720
feedback that you can't do that right ok

01:05:30,989 --> 01:05:35,009
so it calls into NGO set of TC right and

01:05:33,720 --> 01:05:36,539
if there's a problem there it just

01:05:35,009 --> 01:05:37,739
returns the error from India said ok

01:05:36,539 --> 01:05:39,989
Indians are trying to set it up in

01:05:37,739 --> 01:05:41,849
software yeah I mean I don't see a good

01:05:39,989 --> 01:05:43,319
reason to have hierarchies that some of

01:05:41,849 --> 01:05:45,749
them sit in software some in hardware

01:05:43,319 --> 01:05:47,339
because typically if you are doing let's

01:05:45,749 --> 01:05:49,829
say rate-limiting or queuing in hardware

01:05:47,339 --> 01:05:52,079
you don't want it to hit CPU right now

01:05:49,829 --> 01:05:54,089
so there's no good reason to say I'm

01:05:52,079 --> 01:05:56,999
going to have half of it in software in

01:05:54,089 --> 01:05:58,829
a hierarchy and we're kind of running

01:05:56,999 --> 01:06:01,130
out of time can you have the schedule

01:05:58,829 --> 01:06:01,130
back

01:06:04,779 --> 01:06:13,430
I'm wondering who's next okay uh okay

01:06:11,769 --> 01:06:15,259
you're next

01:06:13,430 --> 01:06:17,089
what is it okay so we're going to talk

01:06:15,259 --> 01:06:20,299
about performance I don't see Ben is Ben

01:06:17,089 --> 01:06:23,989
here oh there you want to come up here I

01:06:20,299 --> 01:06:28,609
don't know if you should go faster you

01:06:23,989 --> 01:06:30,789
have got like two slides right okay here

01:06:28,609 --> 01:06:30,789
you go

01:06:31,299 --> 01:06:43,729
where are you sighs after FC goes I

01:06:34,099 --> 01:06:46,599
think no that's me that is me okay he

01:06:43,729 --> 01:06:46,599
was this one

01:06:51,630 --> 01:06:58,050
so at an intro known right now we are in

01:06:54,850 --> 01:07:01,690
the process of implementing offloads for

01:06:58,050 --> 01:07:06,120
TC flower now and so we've got a little

01:07:01,690 --> 01:07:09,420
bit of preliminary results based on

01:07:06,120 --> 01:07:13,420
using an existing firmware that already

01:07:09,420 --> 01:07:14,980
implements offload for OBS flows so

01:07:13,420 --> 01:07:18,850
we're using the same firmware but we're

01:07:14,980 --> 01:07:22,560
now using it for offloading TC flower so

01:07:18,850 --> 01:07:26,670
one of the tests that we did recently is

01:07:22,560 --> 01:07:31,180
just a basic flow setup test where

01:07:26,670 --> 01:07:35,590
packets are being injected and the OVS

01:07:31,180 --> 01:07:39,880
user spaces is going and installing flow

01:07:35,590 --> 01:07:42,880
rules so with this is unfortunately the

01:07:39,880 --> 01:07:45,010
I didn't have all the data and what able

01:07:42,880 --> 01:07:49,240
to put them on both on the same slide

01:07:45,010 --> 01:07:51,220
but this is the OBS case so it's nice

01:07:49,240 --> 01:07:53,890
and flat and linear there's a bit of

01:07:51,220 --> 01:07:56,500
weirdness in the middle for some reason

01:07:53,890 --> 01:07:58,630
but it basically is able to go and

01:07:56,500 --> 01:08:02,230
maintain the same flow setup right until

01:07:58,630 --> 01:08:05,980
you hit sort of the end of those

01:08:02,230 --> 01:08:08,560
supported offloads or number of flows

01:08:05,980 --> 01:08:11,320
that the cup is it fold okay what is

01:08:08,560 --> 01:08:17,880
that that's just the traffic being

01:08:11,320 --> 01:08:21,040
turned off I think okay so with TC and

01:08:17,880 --> 01:08:24,970
this was a bit of a surprise is that it

01:08:21,040 --> 01:08:29,170
we have some problems as more flows are

01:08:24,970 --> 01:08:32,770
added to the flower classifier so it

01:08:29,170 --> 01:08:35,020
starts off at a at a reasonable rate and

01:08:32,770 --> 01:08:40,570
then it sort of gets slower and slower

01:08:35,020 --> 01:08:43,900
as as more and more rules are present so

01:08:40,570 --> 01:08:47,530
I'm not following this so the the y axis

01:08:43,900 --> 01:08:49,089
Y axis is really as an older number of

01:08:47,530 --> 01:08:52,810
flows so the number of rules that are

01:08:49,089 --> 01:08:54,820
installed and the the x axis is the the

01:08:52,810 --> 01:08:56,500
time in seconds so he had five thousand

01:08:54,820 --> 01:08:58,180
and you stole and a thousand there were

01:08:56,500 --> 01:09:01,780
two thousand five hundred that takes you

01:08:58,180 --> 01:09:03,740
that's gonna have to 7,500 so I I ran

01:09:01,780 --> 01:09:06,500
the test and software myself

01:09:03,740 --> 01:09:09,650
the this morning and so when you start

01:09:06,500 --> 01:09:12,230
off with TC flour and you add in a

01:09:09,650 --> 01:09:14,360
single rule it takes less than a milking

01:09:12,230 --> 01:09:17,360
millisecond to go and install the rule

01:09:14,360 --> 01:09:20,240
into the flour classifier once you have

01:09:17,360 --> 01:09:23,450
two hundred thousand rules already in

01:09:20,240 --> 01:09:25,610
there it's now taking 40 milliseconds so

01:09:23,450 --> 01:09:28,010
installing over also a bit not being

01:09:25,610 --> 01:09:31,550
offloaded into how to it correct yes are

01:09:28,010 --> 01:09:34,130
they soft so so for data if we were

01:09:31,550 --> 01:09:35,960
actually passing data the the hardware

01:09:34,130 --> 01:09:38,540
will be matching these rules and then

01:09:35,960 --> 01:09:40,540
performing the action based on the rules

01:09:38,540 --> 01:09:43,970
so it's not that's not a question of

01:09:40,540 --> 01:09:46,190
what the the huffed the packets per

01:09:43,970 --> 01:09:49,820
second no I understand you just is a

01:09:46,190 --> 01:09:51,440
northbound interface you right but but

01:09:49,820 --> 01:09:53,050
when you add the rule do you space where

01:09:51,440 --> 01:09:57,830
skip software or it just going straight

01:09:53,050 --> 01:10:01,310
um we just add it in so right now this

01:09:57,830 --> 01:10:03,760
is just a simple drop action and it goes

01:10:01,310 --> 01:10:06,950
it gets off let it too hard work yeah

01:10:03,760 --> 01:10:08,750
not and it's not what to hardware and

01:10:06,950 --> 01:10:12,680
software just say skips off to it right

01:10:08,750 --> 01:10:14,270
so you don't remember that um in in this

01:10:12,680 --> 01:10:16,400
case it's actually being installed in

01:10:14,270 --> 01:10:19,520
software as well so it's on whatever

01:10:16,400 --> 01:10:22,880
okay so so in the obvious case is it

01:10:19,520 --> 01:10:25,850
also being its own software yes in your

01:10:22,880 --> 01:10:27,830
OBS users both both in software and in

01:10:25,850 --> 01:10:31,520
hardware like in the kernel in software

01:10:27,830 --> 01:10:33,290
in hard way yeah yeah yeah and but like

01:10:31,520 --> 01:10:35,180
I said it's the same behavior without

01:10:33,290 --> 01:10:38,690
the hardware also just doing the

01:10:35,180 --> 01:10:41,810
software install so yeah my gut feeling

01:10:38,690 --> 01:10:43,910
is maybe here maybe there's a hash-table

01:10:41,810 --> 01:10:46,640
limitation because we're finding this a

01:10:43,910 --> 01:10:49,490
lot of these issues in TC oh yeah will

01:10:46,640 --> 01:10:50,780
be a hash-table bucket size thing yeah

01:10:49,490 --> 01:10:52,640
we need to change it to use the

01:10:50,780 --> 01:10:54,860
extensible hash table I thought I

01:10:52,640 --> 01:10:57,170
thought it does use our hash table it's

01:10:54,860 --> 01:11:00,380
our entire state way so maybe you hit

01:10:57,170 --> 01:11:02,780
some wall there did you do any paraffin

01:11:00,380 --> 01:11:05,780
check out what what's it doing I only

01:11:02,780 --> 01:11:08,120
got the I haven't had a chance to look

01:11:05,780 --> 01:11:10,640
into it and not oh and I promised to

01:11:08,120 --> 01:11:12,550
look into it and extra vocation because

01:11:10,640 --> 01:11:16,370
uh

01:11:12,550 --> 01:11:18,200
so someone oh yeah I'm just curious

01:11:16,370 --> 01:11:19,760
normally oh yes we'll start to purge the

01:11:18,200 --> 01:11:21,350
flows from the table after their idle

01:11:19,760 --> 01:11:22,910
for a few seconds is that happening as

01:11:21,350 --> 01:11:26,210
part of your test or did you turn that

01:11:22,910 --> 01:11:29,090
awesome out that I don't know because I

01:11:26,210 --> 01:11:34,400
wasn't the one running the OBS test

01:11:29,090 --> 01:11:39,680
unfortunately anyone else with questions

01:11:34,400 --> 01:11:43,550
okay so but st. send an email with what

01:11:39,680 --> 01:11:44,840
prof says maybe we did okay this is

01:11:43,550 --> 01:11:50,960
actually a good segue into mine

01:11:44,840 --> 01:11:54,220
yeah because okay okay thanks yeah yeah

01:11:50,960 --> 01:11:58,900
so I guess can we see the schedule slide

01:11:54,220 --> 01:11:58,900
into that okay I think I'm next

01:12:09,000 --> 01:12:21,039
yeah okay so actually then think sort of

01:12:12,369 --> 01:12:25,090
kind of leads into okay uh uh yes it was

01:12:21,039 --> 01:12:28,539
me afterwards so what what's next

01:12:25,090 --> 01:12:35,739
alright still you isn't me

01:12:28,539 --> 01:12:39,460
okay so we did some tests on this is

01:12:35,739 --> 01:12:41,170
purely actions you can add actions

01:12:39,460 --> 01:12:45,400
without having bound them to any filters

01:12:41,170 --> 01:12:47,530
right so you you can add as you so one

01:12:45,400 --> 01:12:49,300
thing we did observe was what Ben just

01:12:47,530 --> 01:12:51,369
described you basically as you keep

01:12:49,300 --> 01:12:54,030
adding more it gets slow and slow and

01:12:51,369 --> 01:12:57,130
slow and slow

01:12:54,030 --> 01:13:03,159
jinyoung the she did she did a lot of

01:12:57,130 --> 01:13:05,829
this test and likewise there's a

01:13:03,159 --> 01:13:11,619
classifier called CLS fw which also has

01:13:05,829 --> 01:13:12,880
hash buckets what we upon investigating

01:13:11,619 --> 01:13:15,250
this is what we found

01:13:12,880 --> 01:13:17,619
so essentially okay I'm just going to

01:13:15,250 --> 01:13:20,440
doing a computer science 101 here but it

01:13:17,619 --> 01:13:23,050
may excite somebody so basically when

01:13:20,440 --> 01:13:25,510
you add a rule every action has a 32-bit

01:13:23,050 --> 01:13:28,360
index if you don't specify specify one

01:13:25,510 --> 01:13:31,630
the colonel won't give you one so you

01:13:28,360 --> 01:13:35,289
add that object it has an 32-bit index

01:13:31,630 --> 01:13:39,610
hash algorithm is run here to select a

01:13:35,289 --> 01:13:42,579
bucket then you come down and by default

01:13:39,610 --> 01:13:43,900
the kernel has sixteen buckets so

01:13:42,579 --> 01:13:47,590
there's no problem if you are let's say

01:13:43,900 --> 01:13:50,860
study two actions once you start in our

01:13:47,590 --> 01:13:52,719
case we start hitting millions or 1.6

01:13:50,860 --> 01:13:56,409
million for example you have sixteen

01:13:52,719 --> 01:13:59,760
buckets any of these things here could

01:13:56,409 --> 01:14:04,809
have up to 100,000 linked list entries

01:13:59,760 --> 01:14:08,860
so how does adding an action work you go

01:14:04,809 --> 01:14:11,110
up you say okay I've got an index 16 you

01:14:08,860 --> 01:14:13,389
create you run your hash you select a

01:14:11,110 --> 01:14:15,670
bucket you start walking that bucket all

01:14:13,389 --> 01:14:17,679
the way to the end see it doesn't

01:14:15,670 --> 01:14:20,020
exist I'm going to create it now so you

01:14:17,679 --> 01:14:23,470
malloc you add it

01:14:20,020 --> 01:14:25,080
the next action now you're number 20,000

01:14:23,470 --> 01:14:28,000
does the same it comes in there you

01:14:25,080 --> 01:14:30,460
calculus a hash bucket what goes all the

01:14:28,000 --> 01:14:33,850
way it doesn't exist yeah you create you

01:14:30,460 --> 01:14:37,090
add very simple trade what we did was

01:14:33,850 --> 01:14:39,760
just basically let's go and change the

01:14:37,090 --> 01:14:43,720
hash table McConnell as you Inc as you

01:14:39,760 --> 01:14:47,260
double it the performance doubles now of

01:14:43,720 --> 01:14:50,320
course that's a hack so we'll be

01:14:47,260 --> 01:14:51,760
submitting patches to our hash table so

01:14:50,320 --> 01:14:53,410
that's that's issue one that we found so

01:14:51,760 --> 01:14:54,850
that's why your characteristics look

01:14:53,410 --> 01:14:57,790
very similar to this as you keep adding

01:14:54,850 --> 01:14:59,620
rules it gets worse now replace works

01:14:57,790 --> 01:15:01,060
the same way right but your place is

01:14:59,620 --> 01:15:03,070
cheaper because you don't have to malloc

01:15:01,060 --> 01:15:06,010
so once we fix that performance we

01:15:03,070 --> 01:15:08,140
started seeing the path CPU allocation

01:15:06,010 --> 01:15:10,000
of stats that should studies showing up

01:15:08,140 --> 01:15:12,340
in the path profile as the highest the

01:15:10,000 --> 01:15:15,550
most expensive thing I talked to Eric a

01:15:12,340 --> 01:15:18,540
little bit he recognized a disease we

01:15:15,550 --> 01:15:23,710
may have to do batching to solve this

01:15:18,540 --> 01:15:25,180
okay so that's issue one what's left is

01:15:23,710 --> 01:15:26,530
for us to submit hi I don't think

01:15:25,180 --> 01:15:27,970
anybody will accept I don't think they

01:15:26,530 --> 01:15:30,250
will accept patches where we just

01:15:27,970 --> 01:15:32,320
enlarge the hash packet size okay so

01:15:30,250 --> 01:15:35,770
we'll do this right it will dynamically

01:15:32,320 --> 01:15:40,750
adjust itself as needed okay so that's

01:15:35,770 --> 01:15:43,480
one the next one is okay so here now we

01:15:40,750 --> 01:15:44,710
do read a lot of stats so if you can

01:15:43,480 --> 01:15:46,510
imagine you have a hundred thousand

01:15:44,710 --> 01:15:48,730
actions and you're dumping them every

01:15:46,510 --> 01:15:50,290
thousand a million actions may be 16

01:15:48,730 --> 01:15:55,930
million actions and you're dumping these

01:15:50,290 --> 01:15:57,400
actions constantly that was well in our

01:15:55,930 --> 01:15:59,650
case the constant means every five

01:15:57,400 --> 01:16:02,740
seconds we're sucking in the 16 million

01:15:59,650 --> 01:16:05,490
actions to just collect stats and we we

01:16:02,740 --> 01:16:09,670
store them somewhere for analysis so

01:16:05,490 --> 01:16:13,470
what we found was issue number one was

01:16:09,670 --> 01:16:17,980
when the when the camel was doing a dump

01:16:13,470 --> 01:16:19,900
it will send up to maximum of 32 so the

01:16:17,980 --> 01:16:22,300
user says give me a dump you have 16

01:16:19,900 --> 01:16:24,160
million of them and it gives you maximum

01:16:22,300 --> 01:16:27,070
static - so you can imagine how many

01:16:24,160 --> 01:16:30,250
time we have to cross user space with 32

01:16:27,070 --> 01:16:32,499
entries at a time a very quick hack was

01:16:30,250 --> 01:16:36,840
to increment the

01:16:32,499 --> 01:16:40,239
size of the Internet Nick message so so

01:16:36,840 --> 01:16:43,179
literally I think at some point Roman

01:16:40,239 --> 01:16:47,590
took like what 50 an hour to dump just a

01:16:43,179 --> 01:16:51,159
million 11.6 million rule actions 40

01:16:47,590 --> 01:16:52,419
minutes to just dump the actions if we

01:16:51,159 --> 01:16:54,369
had time I would have run the demo and

01:16:52,419 --> 01:16:56,649
it's a really cool demo on how we

01:16:54,369 --> 01:17:00,489
improve this you should see the old TC

01:16:56,649 --> 01:17:02,999
if you run OTC but is what we changed so

01:17:00,489 --> 01:17:05,709
the solution was just let's increase the

01:17:02,999 --> 01:17:09,809
metalic message size the one that gets

01:17:05,709 --> 01:17:13,749
allocated for sending back messages and

01:17:09,809 --> 01:17:15,820
we were able to do it in say 15 20

01:17:13,749 --> 01:17:19,090
seconds something that took over 40

01:17:15,820 --> 01:17:21,340
minutes before that patch is still so I

01:17:19,090 --> 01:17:25,439
presented as a net contractually and we

01:17:21,340 --> 01:17:28,329
went back and forth on discussions and

01:17:25,439 --> 01:17:30,010
we're going to it look appealing enough

01:17:28,329 --> 01:17:32,499
that it could be made generic for other

01:17:30,010 --> 01:17:38,110
T for other subsystems that use netting

01:17:32,499 --> 01:17:41,139
dumping so that's one that's that's a

01:17:38,110 --> 01:17:42,880
trivial one I it's limited by the fact

01:17:41,139 --> 01:17:44,679
they say when somebody dumps you can

01:17:42,880 --> 01:17:47,739
just keep enlarging the cinetic message

01:17:44,679 --> 01:17:50,530
if the receiver socket buffer is small

01:17:47,739 --> 01:17:52,749
so we have to check against the receiver

01:17:50,530 --> 01:17:54,729
socket buffer my patch it didn't have

01:17:52,749 --> 01:17:56,439
that I'm going to be working on that

01:17:54,729 --> 01:18:00,249
piece so I'm going to submit an RFC

01:17:56,439 --> 01:18:04,119
patch that just says here is what we

01:18:00,249 --> 01:18:05,469
think I'm sure somebody brave will say

01:18:04,119 --> 01:18:07,929
let's make this is how you make a

01:18:05,469 --> 01:18:11,110
generic and if not it sells our purpose

01:18:07,929 --> 01:18:12,579
so its standalone enough that you could

01:18:11,110 --> 01:18:15,010
be used for actions where our big

01:18:12,579 --> 01:18:22,389
problem is I don't know what what do you

01:18:15,010 --> 01:18:26,469
think they've if if we were to just know

01:18:22,389 --> 01:18:27,579
this is the dumping now right so that's

01:18:26,469 --> 01:18:32,889
the second I haven't talked about that

01:18:27,579 --> 01:18:38,669
one this is so so the dumping of metalic

01:18:32,889 --> 01:18:40,959
messages yes I think if we were just to

01:18:38,669 --> 01:18:43,329
adopt it for what we need we're just

01:18:40,959 --> 01:18:45,140
going to make the NLL message much x

01:18:43,329 --> 01:18:49,430
times and a message

01:18:45,140 --> 01:18:52,640
sighs and less than the receiver socket

01:18:49,430 --> 01:18:55,220
button so the thing is if you if you're

01:18:52,640 --> 01:18:56,840
going to try to allocate a larger net

01:18:55,220 --> 01:19:00,410
neck message you're going to run into

01:18:56,840 --> 01:19:02,270
two issues it may fail because of memory

01:19:00,410 --> 01:19:03,980
pressure we don't have such large order

01:19:02,270 --> 01:19:05,870
pages so you need a fallback path to go

01:19:03,980 --> 01:19:07,760
back to the NL message good size case

01:19:05,870 --> 01:19:09,950
they know the surgical says all those

01:19:07,760 --> 01:19:11,270
guaranteed I think it's a page or less

01:19:09,950 --> 01:19:13,670
or something like that therefore it

01:19:11,270 --> 01:19:15,860
should work well if not it's something

01:19:13,670 --> 01:19:18,050
to address the other thing is by merely

01:19:15,860 --> 01:19:19,370
starting to use higher order pages more

01:19:18,050 --> 01:19:21,230
often you'll be putting pressure on the

01:19:19,370 --> 01:19:22,580
memory subsystem so again we may be

01:19:21,230 --> 01:19:24,050
starting to get a lot of cycles in the

01:19:22,580 --> 01:19:26,420
page allocator as it tries to reclaim

01:19:24,050 --> 01:19:31,190
pages to satisfy your request so there

01:19:26,420 --> 01:19:33,680
are there are second-order effects that

01:19:31,190 --> 01:19:35,030
even if it's not failing you will have

01:19:33,680 --> 01:19:37,160
on the system so it's something to take

01:19:35,030 --> 01:19:38,600
an exaggeration I think I think you

01:19:37,160 --> 01:19:40,610
should have an upper bound to not use

01:19:38,600 --> 01:19:42,530
more than say order three pages or

01:19:40,610 --> 01:19:45,050
something like that so it doesn't get of

01:19:42,530 --> 01:19:46,250
control I think you can mitigate the

01:19:45,050 --> 01:19:50,270
effects if you do something like that

01:19:46,250 --> 01:19:51,800
but that's just my opinion okay we'll

01:19:50,270 --> 01:19:54,140
play around with this stuff for a bit

01:19:51,800 --> 01:19:56,720
longer so since we're talking about high

01:19:54,140 --> 01:20:00,470
order pages and we copy this thing to

01:19:56,720 --> 01:20:04,210
users pay that receive message can we at

01:20:00,470 --> 01:20:04,210
some point use email lock there

01:20:07,469 --> 01:20:12,579
so we had code to do that at at one

01:20:10,929 --> 01:20:16,059
point I think you ran into all kinds of

01:20:12,579 --> 01:20:20,469
problems but I think that had to do with

01:20:16,059 --> 01:20:22,929
when we had a map net net leg support so

01:20:20,469 --> 01:20:25,869
we undid the be valid uses and went to

01:20:22,929 --> 01:20:28,239
high order pages and then we remove the

01:20:25,869 --> 01:20:30,909
map support now so we may be able to

01:20:28,239 --> 01:20:33,699
revisit that again I think the problem

01:20:30,909 --> 01:20:35,320
is that if we were to generate a net

01:20:33,699 --> 01:20:38,379
like message and interrupt context you

01:20:35,320 --> 01:20:39,999
can't change the kernel map phone from

01:20:38,379 --> 01:20:42,159
there you can't change the journal page

01:20:39,999 --> 01:20:44,169
pages kernel page tables can't be

01:20:42,159 --> 01:20:45,669
changed from in your context and that's

01:20:44,169 --> 01:20:47,050
the reason I'd be malloc confusing this

01:20:45,669 --> 01:20:49,300
is also the reason why we can't

01:20:47,050 --> 01:20:52,539
generally speaking use develop to handle

01:20:49,300 --> 01:20:56,589
our hash table resize allocation

01:20:52,539 --> 01:20:58,659
failures as well so I there are a lot of

01:20:56,589 --> 01:20:59,979
really tricky details to deal with if we

01:20:58,659 --> 01:21:01,599
build to be melech and that would be I

01:20:59,979 --> 01:21:06,879
don't have a clear answer on that

01:21:01,599 --> 01:21:08,649
but it's interesting idea but if M at

01:21:06,879 --> 01:21:12,699
the MF support was the only blocker then

01:21:08,649 --> 01:21:16,899
we could do it again we got some work to

01:21:12,699 --> 01:21:20,129
do yes so the other thing is so if you

01:21:16,899 --> 01:21:21,820
don't pick 16 million actions and

01:21:20,129 --> 01:21:23,919
they're kind of useless

01:21:21,820 --> 01:21:26,409
they have nothing has changed in the

01:21:23,919 --> 01:21:28,510
stats that that's another optimization

01:21:26,409 --> 01:21:31,269
that I've been I had played with so

01:21:28,510 --> 01:21:33,219
essentially what you do is so as an

01:21:31,269 --> 01:21:35,979
example here is a bunch of actions that

01:21:33,219 --> 01:21:38,050
are bound to some filters and only the

01:21:35,979 --> 01:21:39,899
yellow ones have changed right since the

01:21:38,050 --> 01:21:42,129
last time you did a read from the kernel

01:21:39,899 --> 01:21:46,449
we don't want the green ones to be

01:21:42,129 --> 01:21:47,619
showing up I mean we could we so it

01:21:46,449 --> 01:21:49,479
should be optional that I want

01:21:47,619 --> 01:21:50,969
everything or I want only things that

01:21:49,479 --> 01:21:56,609
have changed since I last asked you

01:21:50,969 --> 01:21:58,979
right so this is what I did for the

01:21:56,609 --> 01:22:02,109
Fernet comms

01:21:58,979 --> 01:22:03,789
however this as we'll see it's probably

01:22:02,109 --> 01:22:05,260
insufficient at this point we'll have to

01:22:03,789 --> 01:22:08,229
we have to go back to the drawing board

01:22:05,260 --> 01:22:11,979
so user just basically says please give

01:22:08,229 --> 01:22:15,219
me all the actions that have been give

01:22:11,979 --> 01:22:18,099
me a dump of all actions of type police'

01:22:15,219 --> 01:22:19,840
and only give me the one things have

01:22:18,099 --> 01:22:22,650
been updated since the last time

01:22:19,840 --> 01:22:25,869
and the last time means five seconds ago

01:22:22,650 --> 01:22:27,550
we we had a good discussion on what how

01:22:25,869 --> 01:22:29,739
do you convey this information to the

01:22:27,550 --> 01:22:32,580
kernel to say since the last five

01:22:29,739 --> 01:22:35,040
seconds it could be that we convert

01:22:32,580 --> 01:22:37,929
because the kernel deals with chief is

01:22:35,040 --> 01:22:40,810
that's how we take the time stamp that's

01:22:37,929 --> 01:22:43,659
stored in the in the action is jiffy's

01:22:40,810 --> 01:22:45,190
based so do you take the jiffy and

01:22:43,659 --> 01:22:48,790
convert the second think about it to g

01:22:45,190 --> 01:22:50,230
feed you wait until is it a differential

01:22:48,790 --> 01:22:52,630
you say in the five seconds and it gets

01:22:50,230 --> 01:22:54,400
converted to kernel time and then you go

01:22:52,630 --> 01:22:58,119
and walk these things and say yeah it

01:22:54,400 --> 01:23:02,790
hasn't been updated since the last time

01:22:58,119 --> 01:23:05,409
or it's also the danger that you may be

01:23:02,790 --> 01:23:08,230
it may take longer than five seconds to

01:23:05,409 --> 01:23:10,929
dump everything if you have 16 million

01:23:08,230 --> 01:23:12,699
actions in you dumping all of them and

01:23:10,929 --> 01:23:15,219
you're saying give me something from the

01:23:12,699 --> 01:23:17,639
last time and you're not done in five

01:23:15,219 --> 01:23:21,849
seconds you will miss some of these

01:23:17,639 --> 01:23:24,550
stats and this is how I did it works

01:23:21,849 --> 01:23:26,980
gives a good demo but I think we need to

01:23:24,550 --> 01:23:30,790
go back and consider those inputs we

01:23:26,980 --> 01:23:39,010
we've received okay so that's that's it

01:23:30,790 --> 01:23:41,290
any questions alright next is here if

01:23:39,010 --> 01:23:51,179
you I think sorry can I see the agenda

01:23:41,290 --> 01:23:51,179
right okay yeah Mike

01:23:52,639 --> 01:23:58,290
okay about the dumping and the

01:23:55,949 --> 01:24:00,210
optimizations you do to give me

01:23:58,290 --> 01:24:04,770
everything I changed since last time yes

01:24:00,210 --> 01:24:08,190
and will it be better to use like a

01:24:04,770 --> 01:24:10,980
generation ad instead of timestamp so

01:24:08,190 --> 01:24:13,020
that whenever you're dumped the

01:24:10,980 --> 01:24:15,210
generation D increases and then you get

01:24:13,020 --> 01:24:17,460
it easier to us to filter that way and

01:24:15,210 --> 01:24:19,199
so don't depend on G fever

01:24:17,460 --> 01:24:20,969
yeah they challenges this right I mean

01:24:19,199 --> 01:24:24,360
okay so if something gets updated yes

01:24:20,969 --> 01:24:27,329
the challenge is in a multi-user

01:24:24,360 --> 01:24:29,880
environment who increments that dumb who

01:24:27,329 --> 01:24:33,900
increments that correct either of

01:24:29,880 --> 01:24:36,960
several applications doing them and the

01:24:33,900 --> 01:24:38,670
table is not specific to a user so they

01:24:36,960 --> 01:24:40,469
own so the only way you could do it is

01:24:38,670 --> 01:24:42,420
there is a structure that gets created

01:24:40,469 --> 01:24:44,460
every time you should dump it's called

01:24:42,420 --> 01:24:45,869
the net link callback structure that's

01:24:44,460 --> 01:24:48,060
associated to the process that's

01:24:45,869 --> 01:24:50,280
requesting for this sample so every

01:24:48,060 --> 01:24:53,599
process can keep its own generation at

01:24:50,280 --> 01:24:56,310
the last generation ad that it's all yes

01:24:53,599 --> 01:24:59,190
so that could be in terms of Jesus right

01:24:56,310 --> 01:25:01,380
you could store the G fizz and because

01:24:59,190 --> 01:25:04,440
every action actually has a jiffy has

01:25:01,380 --> 01:25:06,869
full count status one is when was it

01:25:04,440 --> 01:25:09,840
when did it lastly traffic so it's

01:25:06,869 --> 01:25:11,310
called the last use time when was it

01:25:09,840 --> 01:25:15,619
last updated if someone changed the

01:25:11,310 --> 01:25:18,150
policy in it when was it first used and

01:25:15,619 --> 01:25:20,849
this this other field that you're

01:25:18,150 --> 01:25:22,760
describing can only be applied not to

01:25:20,849 --> 01:25:24,869
the action itself but to the user so

01:25:22,760 --> 01:25:26,670
that's the kind of general that's my

01:25:24,869 --> 01:25:29,070
next implementation is going to be based

01:25:26,670 --> 01:25:35,099
on storing this timestamp instead on on

01:25:29,070 --> 01:25:37,560
the callback structure actually also so

01:25:35,099 --> 01:25:40,349
to producer well just a thought if

01:25:37,560 --> 01:25:41,849
nothing else you could like so make it a

01:25:40,349 --> 01:25:44,130
global generation idea that you achieve

01:25:41,849 --> 01:25:46,199
and return that along with the stats so

01:25:44,130 --> 01:25:48,449
then it would just be okay give me the

01:25:46,199 --> 01:25:50,969
last update since generation ID you know

01:25:48,449 --> 01:25:52,710
five when you know you do it the next

01:25:50,969 --> 01:25:55,469
time and if that one returns like maybe

01:25:52,710 --> 01:25:57,239
six or seven you know you know and you

01:25:55,469 --> 01:25:58,679
just be good going through and it

01:25:57,239 --> 01:26:00,929
basically be a way of tracking it via a

01:25:58,679 --> 01:26:03,840
pectus or some so I'm going to post like

01:26:00,929 --> 01:26:09,010
RFC patches and let people fight it out

01:26:03,840 --> 01:26:11,110
okay so next is going to be here again

01:26:09,010 --> 01:26:19,570
so here you have some very interesting

01:26:11,110 --> 01:26:25,120
ideas on a so there's a new feature

01:26:19,570 --> 01:26:29,940
requests etc yeah so I we've mentioned

01:26:25,120 --> 01:26:34,990
it already during the my earlier slide

01:26:29,940 --> 01:26:38,650
there is need to do multi tables in DC

01:26:34,990 --> 01:26:40,090
and the current state is and I kind of

01:26:38,650 --> 01:26:43,410
just interrupt that does anybody

01:26:40,090 --> 01:26:46,660
understand the multi table what it means

01:26:43,410 --> 01:26:49,660
that the understand what it means people

01:26:46,660 --> 01:26:51,460
understand that TC has basically there's

01:26:49,660 --> 01:26:53,320
some very few classifiers that allow you

01:26:51,460 --> 01:26:55,030
to have a concept and I'm going to

01:26:53,320 --> 01:26:58,420
describe it actually oh you're going to

01:26:55,030 --> 01:27:01,030
describe it okay please go ahead okay so

01:26:58,420 --> 01:27:03,940
yeah yeah thing is that you have this

01:27:01,030 --> 01:27:09,070
icky disc that maintains one chain of

01:27:03,940 --> 01:27:15,010
filters and here here is the like you

01:27:09,070 --> 01:27:20,550
have this filter that lists array in

01:27:15,010 --> 01:27:20,550
each cue disc private structure and

01:27:22,770 --> 01:27:35,160
there is there is a helper up which

01:27:27,820 --> 01:27:38,200
allows the the CLS API to get the be

01:27:35,160 --> 01:27:44,740
pointer to the through area of the

01:27:38,200 --> 01:27:48,190
oldest chain and process the chain each

01:27:44,740 --> 01:27:50,500
cue this has to call TC classify

01:27:48,190 --> 01:27:54,310
function and this equals firefight and

01:27:50,500 --> 01:27:58,590
basically just walk the chain and for

01:27:54,310 --> 01:28:02,940
each chain member it calls the classify

01:27:58,590 --> 01:28:09,220
callback it's possible to do

01:28:02,940 --> 01:28:12,550
reclassification and basically one chain

01:28:09,220 --> 01:28:15,870
equals one table so if I'm talking about

01:28:12,550 --> 01:28:23,040
multi table I mean booty change

01:28:15,870 --> 01:28:29,100
and now you can have only one chain 4q

01:28:23,040 --> 01:28:32,100
disk so the motivation is for the multi

01:28:29,100 --> 01:28:41,520
table multi chain is to be able to

01:28:32,100 --> 01:28:46,970
assign a three essentially three of

01:28:41,520 --> 01:28:49,860
tables instead of single table and it

01:28:46,970 --> 01:28:53,040
means to build big deal for for the

01:28:49,860 --> 01:28:55,500
offloading because it allows us to

01:28:53,040 --> 01:28:59,150
utilize Hardware a lot better than if we

01:28:55,500 --> 01:28:59,150
just do one table there

01:29:09,889 --> 01:29:17,389
yeah there is there is possible to

01:29:13,600 --> 01:29:21,670
either do multiple chains in one key

01:29:17,389 --> 01:29:25,909
disk or it is possible to also to have a

01:29:21,670 --> 01:29:29,139
hierarchy of cue discs with each each

01:29:25,909 --> 01:29:32,420
each of the key risk of what one chain I

01:29:29,139 --> 01:29:34,850
think it's nicer to have multiple chains

01:29:32,420 --> 01:29:38,270
within one key risks but it's also

01:29:34,850 --> 01:29:40,639
possible to do it the other way I'm now

01:29:38,270 --> 01:29:45,830
currently working on the first variant

01:29:40,639 --> 01:29:51,190
but let's see how it will go as a side

01:29:45,830 --> 01:29:54,889
effect of this changes it would allow

01:29:51,190 --> 01:29:58,489
the multiplicative to actually change it

01:29:54,889 --> 01:30:06,080
share the block of chains so it would be

01:29:58,489 --> 01:30:08,440
possible to if we if we offload the

01:30:06,080 --> 01:30:13,820
rules which are generic to the whole

01:30:08,440 --> 01:30:16,429
ASIC we can do we can share the

01:30:13,820 --> 01:30:22,880
resources for multiple ports we don't

01:30:16,429 --> 01:30:25,429
have to do per port rules so the plan is

01:30:22,880 --> 01:30:30,650
to introduce some sort of a block which

01:30:25,429 --> 01:30:35,360
holds many chains and this change could

01:30:30,650 --> 01:30:40,489
be the inner just linked list and each

01:30:35,360 --> 01:30:47,030
would have one u32 index that's my idea

01:30:40,489 --> 01:30:49,960
and as a default the chain number zero

01:30:47,030 --> 01:30:54,320
will be processed and basically

01:30:49,960 --> 01:30:57,679
everything would stay the same as it is

01:30:54,320 --> 01:31:06,880
now so there is no performance penalty

01:30:57,679 --> 01:31:10,639
no edit overhead and this block will be

01:31:06,880 --> 01:31:15,409
possible to be shared among multiple key

01:31:10,639 --> 01:31:18,730
risks and you can actually see the work

01:31:15,409 --> 01:31:24,340
in progress on this

01:31:18,730 --> 01:31:27,040
github repository yeah

01:31:24,340 --> 01:31:31,470
and this so there are there any

01:31:27,040 --> 01:31:31,470
questions to the booth table with you

01:31:31,710 --> 01:31:41,980
anyway it will help a lot of our

01:31:37,360 --> 01:31:44,800
problems so so here yeah I'm sorry mr.

01:31:41,980 --> 01:31:51,430
fun so you're going to have how many

01:31:44,800 --> 01:31:53,410
total tables we change you can limit it

01:31:51,430 --> 01:31:56,230
and they have one index that I can press

01:31:53,410 --> 01:31:58,630
okay and basically there will be an

01:31:56,230 --> 01:32:03,610
action which will allow allow you to

01:31:58,630 --> 01:32:06,940
jump into some specific chain and that

01:32:03,610 --> 01:32:10,060
action will welcome you'll have pointer

01:32:06,940 --> 01:32:12,610
to the chain good you'll not have the

01:32:10,060 --> 01:32:13,180
index but upon the directly it should be

01:32:12,610 --> 01:32:17,770
pretty fast

01:32:13,180 --> 01:32:21,160
yeah okay so I think I'm next we're kind

01:32:17,770 --> 01:32:23,410
of a couple of other slides for that and

01:32:21,160 --> 01:32:25,390
everything in the enhancement that is

01:32:23,410 --> 01:32:27,730
another aspect or you want to talk about

01:32:25,390 --> 01:32:36,880
it okay yeah no no okay go ahead sorry

01:32:27,730 --> 01:32:40,510
go go go sorry I say go good weakly yeah

01:32:36,880 --> 01:32:45,850
I don't know let's see yeah could be

01:32:40,510 --> 01:32:49,630
Chloe error reporting is problem for TC

01:32:45,850 --> 01:32:52,090
in general so we have an error talking

01:32:49,630 --> 01:32:55,510
to the kernel it's like the error you

01:32:52,090 --> 01:32:57,370
will see when something is going wrong

01:32:55,510 --> 01:33:00,910
but we don't know nothing

01:32:57,370 --> 01:33:05,290
so that's not good and would be probably

01:33:00,910 --> 01:33:07,180
better to perhaps pass some arbitrary

01:33:05,290 --> 01:33:10,990
string to the user

01:33:07,180 --> 01:33:11,410
well we can actually find out what went

01:33:10,990 --> 01:33:15,970
wrong

01:33:11,410 --> 01:33:19,420
I mean string would be nice or some

01:33:15,970 --> 01:33:22,810
other error code maybe so it's with

01:33:19,420 --> 01:33:24,869
Pablo that's Pablo 10 TC meetings is not

01:33:22,810 --> 01:33:29,260
here

01:33:24,869 --> 01:33:31,989
bubbler so Pablo we have a volunteer

01:33:29,260 --> 01:33:34,030
over there he's complaining about the

01:33:31,989 --> 01:33:43,570
same problem sorry

01:33:34,030 --> 01:33:46,449
oh it's coming okay okay

01:33:43,570 --> 01:33:48,399
welcome to welcome to the DC workshop

01:33:46,449 --> 01:33:51,789
Pablo

01:33:48,399 --> 01:33:55,149
thank you mom yes we're talking about

01:33:51,789 --> 01:33:58,149
the in ethnic okay so all right maybe we

01:33:55,149 --> 01:34:00,610
can skip it okay I was so enthusiastic

01:33:58,149 --> 01:34:02,559
that you invited me to participate but

01:34:00,610 --> 01:34:04,030
okay yes I want you to participate in

01:34:02,559 --> 01:34:08,369
the TV workshop okay

01:34:04,030 --> 01:34:08,369
excess something that's good I like it

01:34:09,059 --> 01:34:16,090
no this is the net link all the error

01:34:13,989 --> 01:34:17,800
reporting yeah yeah we talk you make it

01:34:16,090 --> 01:34:19,899
said we architect we are finishing the

01:34:17,800 --> 01:34:22,510
days to design now so it's almost on

01:34:19,899 --> 01:34:23,969
this is so cool okay is it is it done

01:34:22,510 --> 01:34:28,719
David

01:34:23,969 --> 01:34:29,769
yes okay so we just designed this about

01:34:28,719 --> 01:34:32,439
20 minutes ago

01:34:29,769 --> 01:34:34,929
okay okay so it's a if the application

01:34:32,439 --> 01:34:36,639
asks for this extended error reporting

01:34:34,929 --> 01:34:39,309
facility in net link and that link act

01:34:36,639 --> 01:34:42,579
along with all the usual other aspects I

01:34:39,309 --> 01:34:44,949
it gets four new attributes potentially

01:34:42,579 --> 01:34:47,409
there is an error string which is just a

01:34:44,949 --> 01:34:49,739
net link string that says what the error

01:34:47,409 --> 01:34:52,570
type business coaching mentioning here

01:34:49,739 --> 01:34:55,209
there is an offset so you can say we're

01:34:52,570 --> 01:34:56,829
within the net lake message the problem

01:34:55,209 --> 01:34:59,679
is occurring like what specific value

01:34:56,829 --> 01:35:01,749
but we recognize that there may be no

01:34:59,679 --> 01:35:03,969
specific context involved therefore an

01:35:01,749 --> 01:35:06,639
unspecified value would mean music the

01:35:03,969 --> 01:35:09,849
first attribute which which some problem

01:35:06,639 --> 01:35:11,860
is it depends upon the situation so for

01:35:09,849 --> 01:35:12,999
example let me go through the rest of

01:35:11,860 --> 01:35:14,050
the attributes I can come back and talk

01:35:12,999 --> 01:35:16,570
about or else click Next

01:35:14,050 --> 01:35:18,070
so the next thing you get is an

01:35:16,570 --> 01:35:19,959
attribute so this could be one of two

01:35:18,070 --> 01:35:21,489
things it could be the number of the

01:35:19,959 --> 01:35:23,499
apps should be daft of your code for the

01:35:21,489 --> 01:35:25,869
one that's in validly specified like the

01:35:23,499 --> 01:35:27,550
value inside is wrong the other thing it

01:35:25,869 --> 01:35:30,969
could be used for is to say there's an

01:35:27,550 --> 01:35:33,140
attribute that's missing so who needed

01:35:30,969 --> 01:35:35,390
to be in this construct and you didn't

01:35:33,140 --> 01:35:37,670
defy it and that's where the offset can

01:35:35,390 --> 01:35:39,650
come in you can say zero which means the

01:35:37,670 --> 01:35:42,950
top level attribute was missing or you

01:35:39,650 --> 01:35:44,720
could say the nested container is a

01:35:42,950 --> 01:35:47,840
offset you specifying inside their

01:35:44,720 --> 01:35:52,460
expected you to specify X and there's a

01:35:47,840 --> 01:35:55,400
fourth attribute which was a subsystem

01:35:52,460 --> 01:35:56,660
specific error codes as well so those

01:35:55,400 --> 01:35:58,250
are the four things were thinking about

01:35:56,660 --> 01:36:01,490
adding to the net link AK error

01:35:58,250 --> 01:36:03,110
reporting all based on Pablo's idea that

01:36:01,490 --> 01:36:04,760
to kind of go in this direction and have

01:36:03,110 --> 01:36:06,410
your hana start working on it so I think

01:36:04,760 --> 01:36:07,550
well how could you know hundreds you're

01:36:06,410 --> 01:36:09,800
just hiding there working on this

01:36:07,550 --> 01:36:11,930
coolness time look at there is so and I

01:36:09,800 --> 01:36:13,640
just want to say for the record yeah

01:36:11,930 --> 01:36:15,440
David a her and said that we never do

01:36:13,640 --> 01:36:21,080
stuff right and I'm gonna make sure we

01:36:15,440 --> 01:36:22,910
do stuff okay you said that we don't do

01:36:21,080 --> 01:36:26,650
stuff that we talked about for years I'm

01:36:22,910 --> 01:36:29,780
going to make sure today we do stuff oh

01:36:26,650 --> 01:36:31,700
you just rolling gears oh your only

01:36:29,780 --> 01:36:32,570
purpose okay never mind I think like

01:36:31,700 --> 01:36:35,960
when I visit

01:36:32,570 --> 01:36:38,120
so the I hope we can use it for success

01:36:35,960 --> 01:36:41,210
right if I just want to return success

01:36:38,120 --> 01:36:45,590
AK and I want to say I already tarnish

01:36:41,210 --> 01:36:48,320
our one key with my success please walk

01:36:45,590 --> 01:36:50,990
on please walk on it get on it now okay

01:36:48,320 --> 01:36:52,790
next yep

01:36:50,990 --> 01:36:56,750
another thing is naming consistency is

01:36:52,790 --> 01:37:01,330
Kenya we are in T C so we have filter

01:36:56,750 --> 01:37:09,200
and crossfire right the same thing also

01:37:01,330 --> 01:37:12,980
the names of the IQs T filter notify PCF

01:37:09,200 --> 01:37:14,330
proto even the realization in the code

01:37:12,980 --> 01:37:16,640
it's all the same thing

01:37:14,330 --> 01:37:18,380
yeah okay I had nothing to do with that

01:37:16,640 --> 01:37:20,000
okay all right I know any point here but

01:37:18,380 --> 01:37:21,170
you're pointing I think is some Russian

01:37:20,000 --> 01:37:24,470
guy that did that yeah

01:37:21,170 --> 01:37:28,360
also exe and action the same thing as

01:37:24,470 --> 01:37:31,520
well of one or two other variables on

01:37:28,360 --> 01:37:32,870
lot of places which is telling us

01:37:31,520 --> 01:37:34,970
essentially nothing and the same

01:37:32,870 --> 01:37:38,090
combinations are used for totally

01:37:34,970 --> 01:37:41,060
different things so this high parties I

01:37:38,090 --> 01:37:44,090
don't like TP sorry you don't like TP as

01:37:41,060 --> 01:37:45,230
a variable name deeply let's highly use

01:37:44,090 --> 01:37:47,900
at everywhere at

01:37:45,230 --> 01:37:53,600
is used everywhere and for nothing else

01:37:47,900 --> 01:37:57,500
that's good yeah yeah there might be

01:37:53,600 --> 01:38:00,590
good to have some namespaces like this

01:37:57,500 --> 01:38:03,230
namespace prefixes for the functions so

01:38:00,590 --> 01:38:05,930
you actually know further the function

01:38:03,230 --> 01:38:10,130
it's located at least something like

01:38:05,930 --> 01:38:12,740
that we how far do we go on again how

01:38:10,130 --> 01:38:17,270
long is this function name at least to

01:38:12,740 --> 01:38:20,060
give you some hint that this is easy to

01:38:17,270 --> 01:38:23,690
grab it it's just a small thing but it

01:38:20,060 --> 01:38:29,180
will help another thing is the user

01:38:23,690 --> 01:38:31,100
space API and they for example in for

01:38:29,180 --> 01:38:33,380
the for the classifier there's a lot of

01:38:31,100 --> 01:38:36,290
duplication of the independent ribbet

01:38:33,380 --> 01:38:40,250
you can see for BPF flour you click to

01:38:36,290 --> 01:38:41,930
add across first with this attributes do

01:38:40,250 --> 01:38:48,500
the same thing are used for the same

01:38:41,930 --> 01:38:53,810
thing also if you look at the the

01:38:48,500 --> 01:38:57,020
prefixes that's also you can use TC and

01:38:53,810 --> 01:38:59,810
PCA that M yeah no I I don't know why

01:38:57,020 --> 01:39:01,550
yeah I agree with it I mean this is

01:38:59,810 --> 01:39:02,360
redundant because they all mean the same

01:39:01,550 --> 01:39:07,160
thing right

01:39:02,360 --> 01:39:09,200
yeah so question is if you can do

01:39:07,160 --> 01:39:14,030
something about it and I was thinking

01:39:09,200 --> 01:39:17,240
about perhaps introducing some cleaner

01:39:14,030 --> 01:39:22,040
approach as a new generic nothing API

01:39:17,240 --> 01:39:24,530
which I think the problem is you'll have

01:39:22,040 --> 01:39:27,320
to do the t see a message level as

01:39:24,530 --> 01:39:30,290
opposed to netlink level yes so when

01:39:27,320 --> 01:39:32,780
someone says here is an action when it's

01:39:30,290 --> 01:39:34,430
the same action as any every other

01:39:32,780 --> 01:39:35,630
classifier it just has a different name

01:39:34,430 --> 01:39:39,620
because it's a different classifier

01:39:35,630 --> 01:39:42,290
right that that is what abuse I would

01:39:39,620 --> 01:39:45,680
say right yeah but it should be the same

01:39:42,290 --> 01:39:47,570
attribute yes so relative this one but

01:39:45,680 --> 01:39:50,420
you can do nothing about that problem

01:39:47,570 --> 01:39:53,270
you can't get away without breaking

01:39:50,420 --> 01:39:55,670
backward compatibility right and also

01:39:53,270 --> 01:39:57,380
you there's there's actually no point

01:39:55,670 --> 01:40:00,530
was to put this January

01:39:57,380 --> 01:40:04,520
attribute to I know you can put it at

01:40:00,530 --> 01:40:07,850
say the TCA the TC sub service level

01:40:04,520 --> 01:40:10,220
message or oil yeah anyway we can talk

01:40:07,850 --> 01:40:13,640
about it it was nice yeah what I'm just

01:40:10,220 --> 01:40:16,370
thinking about just to do new API and to

01:40:13,640 --> 01:40:18,650
try out the new API low I know you can't

01:40:16,370 --> 01:40:22,130
just store the audio like what what what

01:40:18,650 --> 01:40:25,640
would the engineers engineers you have a

01:40:22,130 --> 01:40:28,970
lot of time to migrate ha ha ha ha

01:40:25,640 --> 01:40:31,070
really yeah because yeah that's you know

01:40:28,970 --> 01:40:33,500
it's this will this will get bigger and

01:40:31,070 --> 01:40:38,090
bigger and the API gets more polluted

01:40:33,500 --> 01:40:40,160
and and I believe that in 20 years or in

01:40:38,090 --> 01:40:43,940
30 years you can't we cannot speak with

01:40:40,160 --> 01:40:47,330
this API so yes eventually has it has to

01:40:43,940 --> 01:40:49,340
change so why not now right if your

01:40:47,330 --> 01:40:53,060
brain is as long as you don't break all

01:40:49,340 --> 01:40:55,100
the old stuff I will do eventually in 10

01:40:53,060 --> 01:40:57,290
years okay Oh in 10 years it's ok to

01:40:55,100 --> 01:41:01,310
break it itself I haven't okay

01:40:57,290 --> 01:41:04,310
since this is a you API I don't know if

01:41:01,310 --> 01:41:05,960
this is legit or if it's blasphemy but

01:41:04,310 --> 01:41:09,550
you could do something like compat liar

01:41:05,960 --> 01:41:13,190
at user mode so like a library that

01:41:09,550 --> 01:41:16,850
converts the old deprecated API to the

01:41:13,190 --> 01:41:19,730
new modern idea I think we may have to

01:41:16,850 --> 01:41:22,520
make that requirement before we move it

01:41:19,730 --> 01:41:25,820
with it I'd say okay first you had

01:41:22,520 --> 01:41:28,370
compadre PII and then yeah that's the

01:41:25,820 --> 01:41:30,260
first task then you'll be fair that new

01:41:28,370 --> 01:41:32,900
users can use unity right that's the

01:41:30,260 --> 01:41:34,070
plan eventually to have it confirmed API

01:41:32,900 --> 01:41:36,530
inside the kernel and you have back

01:41:34,070 --> 01:41:38,870
that's the slide so yeah so we're

01:41:36,530 --> 01:41:45,220
running out of time unfortunately so you

01:41:38,870 --> 01:41:45,220
have more or okay okay

01:41:46,780 --> 01:41:52,039
okay so I I think I'm going to UM Sawyer

01:41:50,659 --> 01:41:56,179
I'm gonna have to cut off some people

01:41:52,039 --> 01:42:00,619
that at the end for poor guys and I get

01:41:56,179 --> 01:42:01,909
to present still because I was in the

01:42:00,619 --> 01:42:09,739
agenda sir

01:42:01,909 --> 01:42:11,809
okay I'll do this very quickly so this

01:42:09,739 --> 01:42:15,409
is a new feature it's not really a new

01:42:11,809 --> 01:42:19,820
feature had at least four months so one

01:42:15,409 --> 01:42:30,469
of the problems we have is I only put

01:42:19,820 --> 01:42:33,829
them the others that is if I wanted to

01:42:30,469 --> 01:42:39,439
add a graph of actions that look like

01:42:33,829 --> 01:42:43,789
this to say much something and then if

01:42:39,439 --> 01:42:45,499
it you run some action foo and based on

01:42:43,789 --> 01:42:48,199
the result you want to go this way or

01:42:45,499 --> 01:42:50,590
that way you the only way you can do it

01:42:48,199 --> 01:42:55,219
today is you have to define two policies

01:42:50,590 --> 01:42:58,010
you specify the same filter with a

01:42:55,219 --> 01:43:00,590
priority that's a lower number that gets

01:42:58,010 --> 01:43:03,499
hit fast say okay match full bars

01:43:00,590 --> 01:43:06,139
go to full based on that state instead

01:43:03,499 --> 01:43:07,729
of saying pipe to hear you say continue

01:43:06,139 --> 01:43:10,760
and then this other guy is going to be

01:43:07,729 --> 01:43:15,019
managed and then you execute this this

01:43:10,760 --> 01:43:16,729
graph place right of course if you have

01:43:15,019 --> 01:43:18,110
millions of rules this becomes very

01:43:16,729 --> 01:43:21,229
annoying because now you have to install

01:43:18,110 --> 01:43:26,229
two rules for every match you want for

01:43:21,229 --> 01:43:30,260
each graph so it happens that there is a

01:43:26,229 --> 01:43:31,820
an OP code that already existed in in TC

01:43:30,260 --> 01:43:35,449
but was never fully implemented it's

01:43:31,820 --> 01:43:38,510
called jump so it's like I go to that

01:43:35,449 --> 01:43:40,909
allows me to do this so I have some

01:43:38,510 --> 01:43:42,979
patches we discussed a net comp I think

01:43:40,909 --> 01:43:44,749
I'm going to have to add some sort of

01:43:42,979 --> 01:43:49,399
TTL field so they go to doesn't go

01:43:44,749 --> 01:43:53,840
infinitely that's that's it kind of the

01:43:49,399 --> 01:43:55,130
schedule I think we have say fifteen

01:43:53,840 --> 01:43:58,550
minutes I'm not sure what we can do in

01:43:55,130 --> 01:44:01,980
fifteen who was next

01:43:58,550 --> 01:44:05,630
okay do you I don't know five anything

01:44:01,980 --> 01:44:05,630
from you so I've got Roman and Leo

01:44:06,950 --> 01:44:12,930
so the Mellanox card we've been working

01:44:09,570 --> 01:44:14,640
with a Mellanox card a little bit Roman

01:44:12,930 --> 01:44:16,230
accompany rod I've never seen I haven't

01:44:14,640 --> 01:44:20,850
seen this code but they wrote the GDP

01:44:16,230 --> 01:44:23,070
Act encoder/decoder and the Mellanox

01:44:20,850 --> 01:44:25,980
from where was extended to be able to

01:44:23,070 --> 01:44:28,130
recognize gtp and dig deep into the

01:44:25,980 --> 01:44:30,210
packet and look at the inner headers

01:44:28,130 --> 01:44:35,100
people interested to hear about it

01:44:30,210 --> 01:44:40,830
raise your hand one two three

01:44:35,100 --> 01:44:43,110
okay should you skip it one no okay well

01:44:40,830 --> 01:44:45,330
all right you own I guess because

01:44:43,110 --> 01:44:50,130
because the other alternative is I was

01:44:45,330 --> 01:44:52,680
going to have Lucas show his very

01:44:50,130 --> 01:44:54,210
exciting test environment that we are

01:44:52,680 --> 01:44:55,110
now going to push forward way I think

01:44:54,210 --> 01:44:57,420
we've got it this time

01:44:55,110 --> 01:45:00,510
how do we test kisi so if someone makes

01:44:57,420 --> 01:45:02,520
changes to the kernel you guys have to

01:45:00,510 --> 01:45:08,220
choose one or the other right if we push

01:45:02,520 --> 01:45:09,990
it into the kernel and someone makes a

01:45:08,220 --> 01:45:12,510
small changes he will make them run a

01:45:09,990 --> 01:45:15,840
regression test that's built in to make

01:45:12,510 --> 01:45:19,070
sure nothing else breaks so anybody up

01:45:15,840 --> 01:45:20,720
for that presentation one two three four

01:45:19,070 --> 01:45:24,990
I'm sorry

01:45:20,720 --> 01:45:27,180
so locus so actually they had a demo

01:45:24,990 --> 01:45:29,070
right here could have shown packets

01:45:27,180 --> 01:45:33,240
coming in but we you can talk to these

01:45:29,070 --> 01:45:35,730
two guys afterwards him and Leo is the

01:45:33,240 --> 01:45:37,860
guy sitting right standing next to where

01:45:35,730 --> 01:45:38,760
Lucas is standing okay so look as you're

01:45:37,860 --> 01:45:41,450
on do you want to come and show

01:45:38,760 --> 01:45:45,930
something magic here maybe I don't know

01:45:41,450 --> 01:45:48,150
demos never work but let's see yeah like

01:45:45,930 --> 01:45:51,460
you want to use this one you can use

01:45:48,150 --> 01:45:53,440
this right

01:45:51,460 --> 01:45:55,870
I'm not aware that people were really

01:45:53,440 --> 01:45:58,719
that interested in the in the testing

01:45:55,870 --> 01:46:05,440
subsystem so thankfully I do have

01:45:58,719 --> 01:46:08,650
something ready so anyone who was at net

01:46:05,440 --> 01:46:11,770
dev Tokyo saw what I put together the

01:46:08,650 --> 01:46:15,370
first time around it was a lot of hand

01:46:11,770 --> 01:46:18,760
coded Python for each individual test

01:46:15,370 --> 01:46:21,090
case I was not happy with it at all I

01:46:18,760 --> 01:46:24,239
thought it was ugly it was messy it was

01:46:21,090 --> 01:46:26,409
bordering on on my unmaintainable which

01:46:24,239 --> 01:46:29,380
considering that I basically volunteered

01:46:26,409 --> 01:46:31,360
to look after it meant that I was

01:46:29,380 --> 01:46:36,040
probably going to be you know in a

01:46:31,360 --> 01:46:40,270
living hell um so what I did was I took

01:46:36,040 --> 01:46:43,449
some time and I rewrote and refactored

01:46:40,270 --> 01:46:49,060
and now the test cases are separate from

01:46:43,449 --> 01:46:50,800
the code this was the biggest

01:46:49,060 --> 01:46:56,650
achievement I had I'm actually very

01:46:50,800 --> 01:47:00,040
happy with it it's a lot easier so now

01:46:56,650 --> 01:47:02,110
we have well basically a bunch of

01:47:00,040 --> 01:47:05,560
metadata we have an ID we have the name

01:47:02,110 --> 01:47:07,600
of the test itself category it can

01:47:05,560 --> 01:47:09,250
actually fall under multiple categories

01:47:07,600 --> 01:47:13,960
which comes in later when you actually

01:47:09,250 --> 01:47:15,969
go to run the tests you can basically

01:47:13,960 --> 01:47:18,010
just run a subset if you only want to

01:47:15,969 --> 01:47:20,350
test actions you can do that if you only

01:47:18,010 --> 01:47:22,719
want to test you 32 filters you can do

01:47:20,350 --> 01:47:26,800
that as long as the tests themselves are

01:47:22,719 --> 01:47:32,920
categorized properly sorry this is

01:47:26,800 --> 01:47:35,080
actually a deprecated thing so then you

01:47:32,920 --> 01:47:39,070
have your set of commands this can be

01:47:35,080 --> 01:47:41,860
one or many however many it takes to get

01:47:39,070 --> 01:47:43,510
the environments that you want in order

01:47:41,860 --> 01:47:46,510
to make the command under test to

01:47:43,510 --> 01:47:52,719
succeed which brings us to our next line

01:47:46,510 --> 01:47:54,370
here okay so this is what the Python is

01:47:52,719 --> 01:47:57,130
actually going to evaluate the results

01:47:54,370 --> 01:47:59,739
of so is it going to work what's at exit

01:47:57,130 --> 01:48:04,390
code okay in this case we want it to

01:47:59,739 --> 01:48:11,260
return zero and then I'm still big on

01:48:04,390 --> 01:48:14,320
you know querying to see did did the

01:48:11,260 --> 01:48:15,280
colonel get the correct information is

01:48:14,320 --> 01:48:17,140
it going to return the correct

01:48:15,280 --> 01:48:18,520
information so you know we're going to

01:48:17,140 --> 01:48:22,150
list the actions and then we're actually

01:48:18,520 --> 01:48:23,770
going to look for in this case index

01:48:22,150 --> 01:48:27,970
eight because I had already defined it

01:48:23,770 --> 01:48:31,620
in the command under test you can also

01:48:27,970 --> 01:48:33,820
do you know match Kemp's you know I

01:48:31,620 --> 01:48:37,390
create five actions does the colonel

01:48:33,820 --> 01:48:39,430
work for five actions and then follow it

01:48:37,390 --> 01:48:42,220
you followed up with the teardown and

01:48:39,430 --> 01:48:43,690
then this just repeats okay so so

01:48:42,220 --> 01:48:46,930
there's three phases there's a set of

01:48:43,690 --> 01:48:49,210
phase yeah do people find this readable

01:48:46,930 --> 01:48:53,320
like could someone create a TC test to

01:48:49,210 --> 01:48:58,660
this and you you have a pre pre setup

01:48:53,320 --> 01:49:03,340
and why why would I need an IDs just two

01:48:58,660 --> 01:49:04,960
so I ID just to keep travels okay so

01:49:03,340 --> 01:49:06,940
this could be run from Jenkins for

01:49:04,960 --> 01:49:11,160
example Langer and I could draw some

01:49:06,940 --> 01:49:13,960
nice graphs or not yeah you probably

01:49:11,160 --> 01:49:15,760
doesn't sound very Oh what you have old

01:49:13,960 --> 01:49:17,560
was a silent on I yet okay I haven't

01:49:15,760 --> 01:49:19,840
done like any kind of graphing with it

01:49:17,560 --> 01:49:21,700
oh no but but you could you could flow

01:49:19,840 --> 01:49:24,840
to go back five months and find when it

01:49:21,700 --> 01:49:27,970
broke or something well ask you if your

01:49:24,840 --> 01:49:30,130
if it's being run on a regular basis and

01:49:27,970 --> 01:49:31,690
the results are being stored legs by

01:49:30,130 --> 01:49:33,730
some sort of yeah okay which would be

01:49:31,690 --> 01:49:36,700
with fantastic to settle you have a

01:49:33,730 --> 01:49:37,930
preset phase your execution phase and

01:49:36,700 --> 01:49:40,840
then you have a teardown and then you

01:49:37,930 --> 01:49:42,220
run the next test case yeah a couple of

01:49:40,840 --> 01:49:45,220
the changes that I made in this as well

01:49:42,220 --> 01:49:48,670
because if again anyone who was at the

01:49:45,220 --> 01:49:51,400
last not that all of these are actually

01:49:48,670 --> 01:49:56,140
being executed in a separate namespace

01:49:51,400 --> 01:49:58,090
so you don't pollute the hosts and what

01:49:56,140 --> 01:50:00,910
I had to do before was basically for

01:49:58,090 --> 01:50:03,400
each individual test or block of tests I

01:50:00,910 --> 01:50:05,650
had to go create that create whatever

01:50:03,400 --> 01:50:07,870
devices were needed and then teardown

01:50:05,650 --> 01:50:09,310
for each individual one so I've actually

01:50:07,870 --> 01:50:13,600
even managed to

01:50:09,310 --> 01:50:18,010
of the overall execution time over what

01:50:13,600 --> 01:50:21,250
I have in Japan so okay what do people

01:50:18,010 --> 01:50:22,420
think about this any comments yes okay

01:50:21,250 --> 01:50:24,430
thanks

01:50:22,420 --> 01:50:25,450
all right maybe you want to run a demo

01:50:24,430 --> 01:50:29,140
or you think is too risky

01:50:25,450 --> 01:50:34,180
oh no oh no no you can actually see the

01:50:29,140 --> 01:50:35,770
end results up here so okay there's

01:50:34,180 --> 01:50:37,540
where the IDS come in as well that helps

01:50:35,770 --> 01:50:39,580
you narrow down in individual test case

01:50:37,540 --> 01:50:42,670
and now moving up in there

01:50:39,580 --> 01:50:44,830
yeah so this is actually new to me I

01:50:42,670 --> 01:50:47,590
don't know what this is it did not like

01:50:44,830 --> 01:50:50,020
it maybe maybe the unit link will help

01:50:47,590 --> 01:50:52,180
will print exactly what happened it you

01:50:50,020 --> 01:50:54,550
see this is this is what the gyro is

01:50:52,180 --> 01:50:58,600
complaining about right invalid argument

01:50:54,550 --> 01:51:02,260
what the heck does that even mean okay

01:50:58,600 --> 01:51:04,600
no invalid argument is good error

01:51:02,260 --> 01:51:06,460
talking to Colonel that's all just don't

01:51:04,600 --> 01:51:08,650
test their necessary no that's that's

01:51:06,460 --> 01:51:12,570
active see saying the happy thing all

01:51:08,650 --> 01:51:16,350
right so just to speed things along here

01:51:12,570 --> 01:51:21,190
this specific problem happened because I

01:51:16,350 --> 01:51:22,600
believe this was a setup error the tests

01:51:21,190 --> 01:51:24,310
will execute if you encounter an error

01:51:22,600 --> 01:51:26,440
up and sat down or tear down because

01:51:24,310 --> 01:51:33,250
then you know your your environment is

01:51:26,440 --> 01:51:37,410
not good anymore so I can actually just

01:51:33,250 --> 01:51:37,410
oh no wait I know what I can do

01:51:38,050 --> 01:51:44,680
yeah fine oh yeah better and move this

01:51:43,390 --> 01:51:46,630
move it a little bit it seems like is

01:51:44,680 --> 01:51:49,150
being chopped off or something I know it

01:51:46,630 --> 01:51:55,350
is sliced like if it is a little gap

01:51:49,150 --> 01:51:56,560
over here yeah okay there you go yeah

01:51:55,350 --> 01:52:03,580
okay

01:51:56,560 --> 01:52:06,550
people can see that right there we go so

01:52:03,580 --> 01:52:08,950
is that single a single test in me in

01:52:06,550 --> 01:52:10,600
the filter category right now so you can

01:52:08,950 --> 01:52:13,090
actually see what a successful run looks

01:52:10,600 --> 01:52:15,400
like so it's spitting out the output in

01:52:13,090 --> 01:52:18,700
tap if any of the tests fail it will

01:52:15,400 --> 01:52:20,650
give you the output from the error

01:52:18,700 --> 01:52:23,170
can you explain what copies for the

01:52:20,650 --> 01:52:29,350
uninitiated tap test anything protocol

01:52:23,170 --> 01:52:32,650
so it gives you the start and end of the

01:52:29,350 --> 01:52:34,030
tests by number so you know if it's

01:52:32,650 --> 01:52:37,260
going to run the 15 tests and you only

01:52:34,030 --> 01:52:39,220
get you know 14 lines you know it will

01:52:37,260 --> 01:52:41,140
visit the healthy figures and their load

01:52:39,220 --> 01:52:43,360
of tools around rusty Russell's big on

01:52:41,140 --> 01:52:45,760
this so if there's a lot of tooling

01:52:43,360 --> 01:52:48,160
around tap yeah because if you ask with

01:52:45,760 --> 01:52:49,750
this format you can run yeah this is

01:52:48,160 --> 01:52:51,070
pretty much the only format of that it's

01:52:49,750 --> 01:52:52,870
doing right now is okay but it's very

01:52:51,070 --> 01:52:55,480
readable so it basically gives you an

01:52:52,870 --> 01:52:59,050
okay or not okay and if it gives you the

01:52:55,480 --> 01:53:01,950
not okay it tells you why so whether the

01:52:59,050 --> 01:53:06,070
verify command did not work or the

01:53:01,950 --> 01:53:14,179
expected exit code was bad okay so if I

01:53:06,070 --> 01:53:17,630
jump to three one oh sorry

01:53:14,179 --> 01:53:21,429
I can actually demonstrate this by

01:53:17,630 --> 01:53:21,429
changing that Oh

01:53:34,099 --> 01:53:41,420
Sarah they'll have a little bit of

01:53:37,849 --> 01:53:46,099
correction you do okay um what happened

01:53:41,420 --> 01:53:47,659
there so I what happened I told it to

01:53:46,099 --> 01:53:51,320
run the filters and ended to nominate

01:53:47,659 --> 01:53:56,389
filters so okay so it's not okay

01:53:51,320 --> 01:53:59,329
what yes so I changed the exit code so

01:53:56,389 --> 01:54:01,489
it tells you not okay and apparently so

01:53:59,329 --> 01:54:03,500
it's dependent it's dependent two things

01:54:01,489 --> 01:54:06,020
right and I exit code that TC will

01:54:03,500 --> 01:54:07,250
return yeah well and we're assuming

01:54:06,020 --> 01:54:09,560
that's all those returns the correct

01:54:07,250 --> 01:54:11,570
exit codes yes a number two where you

01:54:09,560 --> 01:54:14,659
enter parsing on this command line and

01:54:11,570 --> 01:54:16,329
the result so if anybody from now nobody

01:54:14,659 --> 01:54:18,860
is allowed to change the C output

01:54:16,329 --> 01:54:20,780
because we're going to be parsing it

01:54:18,860 --> 01:54:23,510
right actually I think most tooling most

01:54:20,780 --> 01:54:31,909
bash scripts out there were dependent on

01:54:23,510 --> 01:54:33,260
the output like yeah yeah there's given

01:54:31,909 --> 01:54:47,239
images here what am I talking about

01:54:33,260 --> 01:54:49,820
yeah yeah okay so so to just repeat it

01:54:47,239 --> 01:54:56,239
for YouTube I guess hi mom

01:54:49,820 --> 01:54:58,820
so the it's for Stephen will allow a

01:54:56,239 --> 01:55:02,989
patch which I'll add things to the end

01:54:58,820 --> 01:55:06,110
of the string but not right yeah okay

01:55:02,989 --> 01:55:08,750
and that should be more than enough as

01:55:06,110 --> 01:55:11,510
well and if anything happens to break in

01:55:08,750 --> 01:55:13,880
the output then we can we can update it

01:55:11,510 --> 01:55:15,079
but you know if you go doing something

01:55:13,880 --> 01:55:18,349
like that I would hope that you know if

01:55:15,079 --> 01:55:24,560
I me so don't we have such a sellout put

01:55:18,349 --> 01:55:27,679
for this I'm going for the past song no

01:55:24,560 --> 01:55:31,310
over the DC output test for the test

01:55:27,679 --> 01:55:33,380
results you know see got the other well

01:55:31,310 --> 01:55:36,469
there is just so to throw other things

01:55:33,380 --> 01:55:38,480
right there's some stuff it should be

01:55:36,469 --> 01:55:41,150
should be probably the best if you

01:55:38,480 --> 01:55:44,840
introduce JSON output to TC and then you

01:55:41,150 --> 01:55:45,790
just browse the Jason yeah what you'll

01:55:44,840 --> 01:55:49,630
need to

01:55:45,790 --> 01:55:51,310
check the human readable reports so it

01:55:49,630 --> 01:55:54,280
may take a while to get it all that

01:55:51,310 --> 01:55:57,430
completed but yes it don't like I had a

01:55:54,280 --> 01:55:59,290
lot of sense because that's our a formal

01:55:57,430 --> 01:56:02,020
output right yes

01:55:59,290 --> 01:56:04,420
so well-defined I don't see that being a

01:56:02,020 --> 01:56:06,730
problem but it's not ready and we want

01:56:04,420 --> 01:56:08,440
to push this thing a sub so the other

01:56:06,730 --> 01:56:11,320
thing is you're doing this things on

01:56:08,440 --> 01:56:14,860
what on containers on hosts or the NSA

01:56:11,320 --> 01:56:17,200
struggling in containers okay now to the

01:56:14,860 --> 01:56:20,320
stuff you will the test framework you

01:56:17,200 --> 01:56:21,220
have or had how can we fit into this o

01:56:20,320 --> 01:56:24,550
honesty

01:56:21,220 --> 01:56:26,440
yes I think that it this can be easily

01:56:24,550 --> 01:56:29,400
round with honesty altogether I mean

01:56:26,440 --> 01:56:34,450
this is just for single host of honesty

01:56:29,400 --> 01:56:37,090
is used to multiple hosts I mean so

01:56:34,450 --> 01:56:41,650
let's move to close together so you can

01:56:37,090 --> 01:56:43,390
actually run this from elastic okay so

01:56:41,650 --> 01:56:46,570
inside for a single host we run it and

01:56:43,390 --> 01:56:48,070
then when we wanna know just you can

01:56:46,570 --> 01:56:51,640
have multiple hosts in goes doesn't

01:56:48,070 --> 01:56:53,970
really matter you just run this using

01:56:51,640 --> 01:56:55,990
honesty orchestration mm-hm

01:56:53,970 --> 01:56:57,670
maybe we need to talk to you after this

01:56:55,990 --> 01:57:00,520
but we'd like to start pushing some

01:56:57,670 --> 01:57:03,460
changes some things in yeah the big

01:57:00,520 --> 01:57:07,090
thing right now is the like we should

01:57:03,460 --> 01:57:09,940
definitely turn all Jamal has a very

01:57:07,090 --> 01:57:11,470
significant library that I have to start

01:57:09,940 --> 01:57:13,390
going through but if anyone has any

01:57:11,470 --> 01:57:15,550
other test that they already use that

01:57:13,390 --> 01:57:18,160
they would like to submit for me I would

01:57:15,550 --> 01:57:20,280
definitely appreciate it so young Lucas

01:57:18,160 --> 01:57:23,860
is going to take all my tests and

01:57:20,280 --> 01:57:27,340
convert them into this so I have I have

01:57:23,860 --> 01:57:30,700
accumulated tests over many years like

01:57:27,340 --> 01:57:37,590
some obscure features as well in there

01:57:30,700 --> 01:57:42,940
he write our time is up

01:57:37,590 --> 01:57:44,110
I'm sorry for the people I cut but as I

01:57:42,940 --> 01:57:46,630
almost feel like we need a whole day

01:57:44,110 --> 01:57:49,990
workshop but because I had to cut other

01:57:46,630 --> 01:57:54,520
people before this and I thank you all

01:57:49,990 --> 01:57:57,190
for standing up there and if you didn't

01:57:54,520 --> 01:57:57,350
speak thank let's give them an applause

01:57:57,190 --> 01:58:00,469
you

01:57:57,350 --> 01:58:00,469

YouTube URL: https://www.youtube.com/watch?v=NMxrbVdDcNA


