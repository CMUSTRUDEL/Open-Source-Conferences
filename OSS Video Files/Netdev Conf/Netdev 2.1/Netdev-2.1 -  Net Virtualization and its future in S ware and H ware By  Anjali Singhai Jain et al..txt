Title: Netdev-2.1 -  Net Virtualization and its future in S ware and H ware By  Anjali Singhai Jain et al.
Publication date: 2017-05-15
Playlist: Netdev 2.1
Description: 
	In this talk given on the 7th of Apr, 2017 at the Netdev 2.1 Conference in Montreal Anjali Singhai Jain and Alexander H Duyck go through the history of Network Virtualization, talk about lessons learnt and their view of what the future brings.

Content:
https://www.netdevconf.org/2.1/session.html?jain
Captions: 
	00:00:00,030 --> 00:00:05,339
okay so you all met me all all right

00:00:03,659 --> 00:00:08,599
after lunch my name is Alexander Dyke

00:00:05,339 --> 00:00:10,980
this is Anjali sing sing hi Jane and

00:00:08,599 --> 00:00:12,360
architect with our well I guess

00:00:10,980 --> 00:00:13,679
technically it's not networking division

00:00:12,360 --> 00:00:15,599
because that architecture team separate

00:00:13,679 --> 00:00:19,109
but the architect that works with nd

00:00:15,599 --> 00:00:23,400
within the Intel and then I'll have to

00:00:19,109 --> 00:00:25,140
read the remote go and we're here to

00:00:23,400 --> 00:00:27,449
basically discuss network i/o

00:00:25,140 --> 00:00:32,239
virtualization you know its history in

00:00:27,449 --> 00:00:34,829
this future so I start out with a quote

00:00:32,239 --> 00:00:37,380
progress far from consisting and change

00:00:34,829 --> 00:00:39,629
depends on retentiveness when changes

00:00:37,380 --> 00:00:42,300
absolute there remains no being to

00:00:39,629 --> 00:00:44,700
improve and no direction is set for

00:00:42,300 --> 00:00:47,309
possible improvement and when experience

00:00:44,700 --> 00:00:50,670
is not retained as among savages infancy

00:00:47,309 --> 00:00:52,410
is perpetual summarize those who cannot

00:00:50,670 --> 00:00:53,010
remember the past are condemned to

00:00:52,410 --> 00:00:54,870
repeat it

00:00:53,010 --> 00:00:56,670
you know we've gone through a lot of

00:00:54,870 --> 00:00:58,050
different technologies over the last few

00:00:56,670 --> 00:00:59,190
years in terms of a lot of stuff and it

00:00:58,050 --> 00:01:01,559
seems like we end up making a lot of the

00:00:59,190 --> 00:01:03,180
same mistakes over and over again and so

00:01:01,559 --> 00:01:05,880
one of the goals of this presentation is

00:01:03,180 --> 00:01:07,830
to help remind some of us of some of the

00:01:05,880 --> 00:01:10,710
things we've done the good the bad and

00:01:07,830 --> 00:01:12,060
hopefully set some helps to set some

00:01:10,710 --> 00:01:15,689
directions that we avoid some of the

00:01:12,060 --> 00:01:18,360
same mistakes we've made in the past so

00:01:15,689 --> 00:01:19,830
yeah as I said it's going to be go over

00:01:18,360 --> 00:01:21,990
a brief evolution of network i/o

00:01:19,830 --> 00:01:25,229
virtualization and Linux some of the

00:01:21,990 --> 00:01:29,460
pros and cons of SRA ovie the future of

00:01:25,229 --> 00:01:31,049
network i/o virtualization a comparison

00:01:29,460 --> 00:01:32,759
of a few different items that some

00:01:31,049 --> 00:01:36,030
things that we're considering and just

00:01:32,759 --> 00:01:39,290
brief conclusion so evolution the

00:01:36,030 --> 00:01:42,240
network i/o virtualization those

00:01:39,290 --> 00:01:45,380
probably familiar the e1000 is a NIC

00:01:42,240 --> 00:01:49,259
that are a driver that worked with older

00:01:45,380 --> 00:01:51,149
Intel Gigabit Ethernet silicon when I

00:01:49,259 --> 00:01:53,310
say older I don't know how many of you

00:01:51,149 --> 00:01:54,840
know what this is this in the Intel yeah

00:01:53,310 --> 00:01:57,780
at this distance you can't really see it

00:01:54,840 --> 00:02:01,710
nice it card no it's actually a PCI card

00:01:57,780 --> 00:02:04,469
we aren't going that old but it is still

00:02:01,710 --> 00:02:09,270
pretty old you know PCI it supports one

00:02:04,469 --> 00:02:12,120
interrupt vector can do gigabit mostly

00:02:09,270 --> 00:02:13,230
as long as it's got a fast enough PCI

00:02:12,120 --> 00:02:15,150
bus was it 60

00:02:13,230 --> 00:02:17,400
to make a Hertz bus instead of 33 you

00:02:15,150 --> 00:02:18,690
know for back in this day like you know

00:02:17,400 --> 00:02:20,250
10-15 years ago

00:02:18,690 --> 00:02:22,650
this is a pretty cool thing and you know

00:02:20,250 --> 00:02:24,090
when you installed it in Windows XP 64

00:02:22,650 --> 00:02:25,110
which was the bleeding-edge thing it

00:02:24,090 --> 00:02:26,970
worked

00:02:25,110 --> 00:02:28,769
which you know that's great it works and

00:02:26,970 --> 00:02:30,959
so in advantage you go and you set it up

00:02:28,769 --> 00:02:32,730
inside your VM and you create a virtual

00:02:30,959 --> 00:02:35,370
version of this and you can load the OS

00:02:32,730 --> 00:02:37,860
and it works great and then you know 4

00:02:35,370 --> 00:02:40,200
gig that works really well the problem

00:02:37,860 --> 00:02:42,569
is that thing was designed back when you

00:02:40,200 --> 00:02:44,579
know pentium with the big new processor

00:02:42,569 --> 00:02:46,410
essentially so it's not designed to

00:02:44,579 --> 00:02:49,890
handle multi-core it's not designed to

00:02:46,410 --> 00:02:51,769
handle 10 gig or 40 gig or anything

00:02:49,890 --> 00:02:54,560
that's going to be you know really fast

00:02:51,769 --> 00:02:57,090
it's good for installing an OS you know

00:02:54,560 --> 00:02:58,859
that's pretty much the full extent of it

00:02:57,090 --> 00:02:59,910
you're not going to get the kind of

00:02:58,859 --> 00:03:02,190
speeds that you're looking for in a

00:02:59,910 --> 00:03:04,049
telco so needless to say you know

00:03:02,190 --> 00:03:04,709
emulating something like this in your

00:03:04,049 --> 00:03:06,480
hypervisor

00:03:04,709 --> 00:03:08,730
yeah we're just good if you want to

00:03:06,480 --> 00:03:09,870
install an OS or you know just said

00:03:08,730 --> 00:03:11,849
somebody episode can set it you know

00:03:09,870 --> 00:03:13,950
access their email and such maybe even

00:03:11,849 --> 00:03:15,269
transfer some small files but you're not

00:03:13,950 --> 00:03:17,310
going to put it in you know emulate

00:03:15,269 --> 00:03:21,090
something like that a system that needs

00:03:17,310 --> 00:03:22,769
to handle a large heavy workload so you

00:03:21,090 --> 00:03:24,180
know that being said of course the

00:03:22,769 --> 00:03:26,630
thought is well what do we do you know

00:03:24,180 --> 00:03:28,620
the next virtualization here at the next

00:03:26,630 --> 00:03:29,910
solution ends up becoming kind of

00:03:28,620 --> 00:03:31,919
obvious so let's what if we ought to

00:03:29,910 --> 00:03:34,680
turn around and instead emulating a

00:03:31,919 --> 00:03:36,329
device that's actual Hardware we emulate

00:03:34,680 --> 00:03:37,980
them all yeah something that's you know

00:03:36,329 --> 00:03:39,480
designed to run on the software and

00:03:37,980 --> 00:03:42,690
that's where para virtualization comes

00:03:39,480 --> 00:03:44,910
in specifically in the history of Linux

00:03:42,690 --> 00:03:48,030
anyway the main one being for KBM verdi

00:03:44,910 --> 00:03:50,069
oh the whole design there it's optimized

00:03:48,030 --> 00:03:51,329
for software emulation so you can get

00:03:50,069 --> 00:03:52,650
away it's a lot of little tricks and

00:03:51,329 --> 00:03:54,780
software that you want to be able to get

00:03:52,650 --> 00:03:55,980
it with get away with otherwise for

00:03:54,780 --> 00:03:59,910
example when you're emulating one of

00:03:55,980 --> 00:04:02,129
these things you can't say ok and we're

00:03:59,910 --> 00:04:04,319
going to add LRO support this thing

00:04:02,129 --> 00:04:06,090
doesn't know what LRO was it was you

00:04:04,319 --> 00:04:08,579
know it was lucky to have jumbo frames

00:04:06,090 --> 00:04:11,099
back in the day but with something like

00:04:08,579 --> 00:04:12,449
Verdi oh we can say ok yeah we're going

00:04:11,099 --> 00:04:14,430
to cheat a little bit we know we're

00:04:12,449 --> 00:04:15,750
software on both sides we don't actually

00:04:14,430 --> 00:04:17,970
have to send the packets across the

00:04:15,750 --> 00:04:21,719
network so what we'll do we'll report

00:04:17,970 --> 00:04:23,909
TSO on this side LRO on this side and

00:04:21,719 --> 00:04:25,950
when we send the packet down we'll just

00:04:23,909 --> 00:04:26,590
hit it directly across do a couple of

00:04:25,950 --> 00:04:30,280
big page

00:04:26,590 --> 00:04:32,830
maps and copies and that's about it so

00:04:30,280 --> 00:04:34,180
for stuff like east-west traffic it

00:04:32,830 --> 00:04:36,970
looks really good

00:04:34,180 --> 00:04:39,699
you can go set up a UDP transmit it does

00:04:36,970 --> 00:04:41,830
64k UDP frames right across no

00:04:39,699 --> 00:04:46,870
fragmentation needed just done it does

00:04:41,830 --> 00:04:49,870
UFO um on the downside though it's still

00:04:46,870 --> 00:04:51,430
a more or less an emulated interface so

00:04:49,870 --> 00:04:54,190
if you're doing a lot of small packets

00:04:51,430 --> 00:04:56,440
and they're at just the right rate such

00:04:54,190 --> 00:04:57,880
that you can't bulk them together you're

00:04:56,440 --> 00:04:59,740
looking at having kickin to the

00:04:57,880 --> 00:05:01,600
hypervisor every time you do a send in

00:04:59,740 --> 00:05:03,940
order to you know to get it to actually

00:05:01,600 --> 00:05:06,280
kick off and send the packet down into

00:05:03,940 --> 00:05:07,750
the actual host network stack you end up

00:05:06,280 --> 00:05:09,310
taking a lot of traps as a result and

00:05:07,750 --> 00:05:11,440
then there's still the mem copy overhead

00:05:09,310 --> 00:05:15,160
for moving the packets down from the

00:05:11,440 --> 00:05:16,630
guest into the host and so of course the

00:05:15,160 --> 00:05:19,000
next solution everybody went with after

00:05:16,630 --> 00:05:20,650
that it's like well you know why bother

00:05:19,000 --> 00:05:22,030
virtualizing will take the real hardware

00:05:20,650 --> 00:05:28,210
and put it right in there

00:05:22,030 --> 00:05:29,650
which yeah that works okay until you

00:05:28,210 --> 00:05:32,139
really start doing the things like you

00:05:29,650 --> 00:05:33,490
know security into account you know how

00:05:32,139 --> 00:05:35,350
these VMS are running around with

00:05:33,490 --> 00:05:37,270
devices that are have direct access to

00:05:35,350 --> 00:05:38,650
your network so if kind of a cross your

00:05:37,270 --> 00:05:43,539
fingers and hope you can trust the guy

00:05:38,650 --> 00:05:47,050
that you just gave the NIC to but yeah

00:05:43,539 --> 00:05:48,280
as far as performance goes if something

00:05:47,050 --> 00:05:50,710
like that really can't be beat you're

00:05:48,280 --> 00:05:52,660
bypassing things know mem copies the

00:05:50,710 --> 00:05:53,889
only gotcha it's you still have some

00:05:52,660 --> 00:05:56,590
internet or not

00:05:53,889 --> 00:05:58,900
so I'm interrupts overhead as the host

00:05:56,590 --> 00:06:00,700
still has to notify the guest oh hey you

00:05:58,900 --> 00:06:02,349
have an interrupt now but even that's

00:06:00,700 --> 00:06:04,360
you know to some extent now we've got

00:06:02,349 --> 00:06:07,270
the next generation of iommu is coming

00:06:04,360 --> 00:06:09,099
out that can do things like IO a pic

00:06:07,270 --> 00:06:11,740
inside the guest to some extent even

00:06:09,099 --> 00:06:13,599
that's been mitigated and so then we

00:06:11,740 --> 00:06:16,060
start getting into actually I set this

00:06:13,599 --> 00:06:20,380
down to because then we start getting

00:06:16,060 --> 00:06:24,280
into SR IO V which you know right off

00:06:20,380 --> 00:06:26,200
the bat to some extent the initial idea

00:06:24,280 --> 00:06:28,360
with SR IO be is yeah

00:06:26,200 --> 00:06:31,000
we can't take a system shove it full of

00:06:28,360 --> 00:06:33,160
40 Nix and hand them all out that's just

00:06:31,000 --> 00:06:34,900
not going to scale at all I've actually

00:06:33,160 --> 00:06:37,270
seen systems like that where it's like

00:06:34,900 --> 00:06:38,440
you get to the point where you've got so

00:06:37,270 --> 00:06:40,180
many NICs in the system there's just

00:06:38,440 --> 00:06:40,360
resources aren't showing up just because

00:06:40,180 --> 00:06:42,610
you're

00:06:40,360 --> 00:06:44,500
out of like busses and whatnot it just

00:06:42,610 --> 00:06:45,759
it starts to get kind of silly trying to

00:06:44,500 --> 00:06:47,500
do something like that and so the idea

00:06:45,759 --> 00:06:50,050
with sr iove is you can take one

00:06:47,500 --> 00:06:55,990
physical function and partition it into

00:06:50,050 --> 00:06:59,979
multiple virtual functions so the way in

00:06:55,990 --> 00:07:03,639
addition the big thing you get with srl

00:06:59,979 --> 00:07:05,409
v versus just a physically assigned

00:07:03,639 --> 00:07:07,960
function as you have sort of an

00:07:05,409 --> 00:07:10,569
intermediary normally this ends up being

00:07:07,960 --> 00:07:12,849
the PS the physical function connect as

00:07:10,569 --> 00:07:16,569
an inter marry intermediary between the

00:07:12,849 --> 00:07:18,610
VF and the host so if he asked for

00:07:16,569 --> 00:07:20,289
something that seems wrong you can deny

00:07:18,610 --> 00:07:22,000
it so if he decides to add a MAC address

00:07:20,289 --> 00:07:23,800
you don't like you can deny it because

00:07:22,000 --> 00:07:25,779
usually that VF is having to ask the

00:07:23,800 --> 00:07:29,650
physical function for permission to take

00:07:25,779 --> 00:07:31,750
the various actions that it's taking in

00:07:29,650 --> 00:07:33,699
addition we still get the added security

00:07:31,750 --> 00:07:34,779
so you can't actually write memory to

00:07:33,699 --> 00:07:39,039
anywhere where you're not supposed to

00:07:34,779 --> 00:07:40,779
because the iommu is still in play let's

00:07:39,039 --> 00:07:42,699
see yeah so like I mentioned there's

00:07:40,779 --> 00:07:44,229
also some control plane separation now

00:07:42,699 --> 00:07:45,669
you don't have one physical Nick so the

00:07:44,229 --> 00:07:47,830
PS can control things

00:07:45,669 --> 00:07:49,719
so the VF doesn't have full control with

00:07:47,830 --> 00:07:52,839
a setup like this you end up getting

00:07:49,719 --> 00:07:54,279
high packet rate low CPU utilization and

00:07:52,839 --> 00:07:56,560
low latency thinks the fact that's all

00:07:54,279 --> 00:07:59,229
direct costs are no copy when the VF

00:07:56,560 --> 00:08:00,460
hits that doorbell it should be just

00:07:59,229 --> 00:08:02,080
hitting that doorbell assuming there's

00:08:00,460 --> 00:08:04,599
no extra traps or anything in the way

00:08:02,080 --> 00:08:07,479
there and so it'll just go the packets

00:08:04,599 --> 00:08:11,199
will move as fast as possible then as

00:08:07,479 --> 00:08:13,419
far as some of the issues the biggest

00:08:11,199 --> 00:08:17,979
one is probably just the fact that sr

00:08:13,419 --> 00:08:20,379
iove is very inflexible most designs if

00:08:17,979 --> 00:08:22,889
you support sr iove you get to support

00:08:20,379 --> 00:08:25,419
you know n times whatever you enable and

00:08:22,889 --> 00:08:28,060
my advice is you probably only ever want

00:08:25,419 --> 00:08:29,979
to hit that enable once because if

00:08:28,060 --> 00:08:31,810
you're having to change the number of VF

00:08:29,979 --> 00:08:33,550
you have do you have to rip everything

00:08:31,810 --> 00:08:35,820
down and rebuild it from the ground up

00:08:33,550 --> 00:08:37,779
at least in the case of the intel parts

00:08:35,820 --> 00:08:39,760
because you're having to create

00:08:37,779 --> 00:08:42,279
brand-new PCI functions on the bus

00:08:39,760 --> 00:08:44,740
you're having to change resource

00:08:42,279 --> 00:08:46,570
allocations rings vectors etc and that

00:08:44,740 --> 00:08:48,279
gets to be very expensive so it's not

00:08:46,570 --> 00:08:49,690
something like oh you know it's not

00:08:48,279 --> 00:08:51,710
something you can spin up on demand just

00:08:49,690 --> 00:08:52,880
because I have a new VM I want a new VF

00:08:51,710 --> 00:08:54,770
at that point you're having to like

00:08:52,880 --> 00:09:00,860
reset the whole server tape tear down

00:08:54,770 --> 00:09:03,050
your BMS and rebuild them all see and

00:09:00,860 --> 00:09:05,240
yeah as far as the rest of it so we have

00:09:03,050 --> 00:09:08,180
some other scalability issues that still

00:09:05,240 --> 00:09:09,950
come up although it's not as bad bust

00:09:08,180 --> 00:09:11,810
advice function number limits you know

00:09:09,950 --> 00:09:13,459
in theory in the future

00:09:11,810 --> 00:09:16,910
somebody might want to have something

00:09:13,459 --> 00:09:18,170
like 64,000 DMS theoretically there's no

00:09:16,910 --> 00:09:20,890
way we can support that with existing

00:09:18,170 --> 00:09:24,350
best device function numbers

00:09:20,890 --> 00:09:26,240
another issue is sr io v forces a lot of

00:09:24,350 --> 00:09:27,920
switching features into the NIC that can

00:09:26,240 --> 00:09:30,350
make it more difficult to actually see

00:09:27,920 --> 00:09:32,420
in debug what's going on so with like

00:09:30,350 --> 00:09:37,910
OBS or bridge we could actually you know

00:09:32,420 --> 00:09:41,180
just go promiscuous mode and analyze

00:09:37,910 --> 00:09:42,560
some of the ports with sr iove you lose

00:09:41,180 --> 00:09:44,510
that functionality just because

00:09:42,560 --> 00:09:46,310
everything's bypassing you if traffic

00:09:44,510 --> 00:09:48,020
goes to VF it goes the VF and it

00:09:46,310 --> 00:09:51,589
bypasses the PF and he has no way to get

00:09:48,020 --> 00:09:53,300
any visibility into that and yeah and

00:09:51,589 --> 00:09:54,830
thus everything in terms of switching

00:09:53,300 --> 00:09:57,529
ends up becoming each other all in the

00:09:54,830 --> 00:10:00,410
hardware or nothing it gets much harder

00:09:57,529 --> 00:10:01,850
to manage things when you enable us for

00:10:00,410 --> 00:10:04,610
example just a year ago I was having to

00:10:01,850 --> 00:10:06,950
fix the fact that promiscuous mode for

00:10:04,610 --> 00:10:09,350
VLANs even you know didn't really work

00:10:06,950 --> 00:10:10,700
in the Intel hardware now when this was

00:10:09,350 --> 00:10:13,130
all enabled it took a little bit of

00:10:10,700 --> 00:10:16,100
rearranging to get that all up and

00:10:13,130 --> 00:10:19,930
running so with that I'm going to hand

00:10:16,100 --> 00:10:23,900
it over to Anjali to discuss switching

00:10:19,930 --> 00:10:26,209
ok so I like started with you know

00:10:23,900 --> 00:10:30,529
describing the cones for thyri and one

00:10:26,209 --> 00:10:34,430
of them as we saw was you know lot of

00:10:30,529 --> 00:10:36,980
switching stuff eventually ended up in

00:10:34,430 --> 00:10:41,029
the Nick thanks to supporting a Savi

00:10:36,980 --> 00:10:44,480
Savi being a PCIe spec it started you

00:10:41,029 --> 00:10:47,510
know just looking like oh yeah we can do

00:10:44,480 --> 00:10:49,579
this in networking and you know we'll

00:10:47,510 --> 00:10:52,520
we'll get Network I watched ization when

00:10:49,579 --> 00:10:54,950
you actually get to the bottom of it

00:10:52,520 --> 00:10:56,420
you've actually ended up creating a

00:10:54,950 --> 00:11:00,440
switch right there in the neck and

00:10:56,420 --> 00:11:02,630
that's what happened and and and you

00:11:00,440 --> 00:11:04,460
know the one of the problem that Alex

00:11:02,630 --> 00:11:08,000
just mentioned about the VLAN

00:11:04,460 --> 00:11:11,149
stuff all those things since it

00:11:08,000 --> 00:11:14,000
gradually happened that once you start

00:11:11,149 --> 00:11:16,190
doing this you realize oh if you wanted

00:11:14,000 --> 00:11:20,210
to do something like what you can do on

00:11:16,190 --> 00:11:21,740
your you know the PS interface you want

00:11:20,210 --> 00:11:23,120
to do the same thing on the VF interface

00:11:21,740 --> 00:11:26,589
now you have replicated all of those

00:11:23,120 --> 00:11:26,589
functionality of creator switch there

00:11:32,380 --> 00:11:37,459
okay so just a quick glance on the

00:11:35,959 --> 00:11:41,450
switching features that ended up in the

00:11:37,459 --> 00:11:44,360
hardware with SRB support we started

00:11:41,450 --> 00:11:48,589
with some basic Mac filtering Mac base

00:11:44,360 --> 00:11:52,130
switching and then slowly to more and

00:11:48,589 --> 00:11:54,410
more complete switch features some of

00:11:52,130 --> 00:11:55,910
this you know started in the first

00:11:54,410 --> 00:11:58,490
version of Safari with anti school

00:11:55,910 --> 00:11:59,990
support which is actually a basic ACL

00:11:58,490 --> 00:12:02,779
for the VF if you look at it from the

00:11:59,990 --> 00:12:05,630
hardware perspective you know something

00:12:02,779 --> 00:12:09,709
very common you lead down using T camps

00:12:05,630 --> 00:12:14,209
and hardware's VLAN filtering switching

00:12:09,709 --> 00:12:16,490
pruning for freelance and then you add

00:12:14,209 --> 00:12:20,959
all the LTL for forwarding rules drop

00:12:16,490 --> 00:12:25,250
rules if you see this whole list you're

00:12:20,959 --> 00:12:27,380
building a switch there the broadcast

00:12:25,250 --> 00:12:32,500
multicast replication you know it got

00:12:27,380 --> 00:12:35,089
really really crazy in there and so

00:12:32,500 --> 00:12:38,470
there was a point that Shoji's mentioned

00:12:35,089 --> 00:12:41,540
in a keynote this morning and he said

00:12:38,470 --> 00:12:44,330
all these devices are you know they

00:12:41,540 --> 00:12:47,209
should have a common software api is on

00:12:44,330 --> 00:12:49,100
top to manage and it makes a whole lot

00:12:47,209 --> 00:12:54,770
sense because these devices are looking

00:12:49,100 --> 00:12:57,140
a whole lot similar to so you know i

00:12:54,770 --> 00:12:59,000
have kind of put together this whole

00:12:57,140 --> 00:13:02,120
list where some of these things are

00:12:59,000 --> 00:13:03,680
still kind of evolving and happening but

00:13:02,120 --> 00:13:05,510
they're all coming from two perspectives

00:13:03,680 --> 00:13:07,459
some of the tour features getting pulled

00:13:05,510 --> 00:13:09,529
into the Nick where's or and some of the

00:13:07,459 --> 00:13:11,149
software switch features getting pulled

00:13:09,529 --> 00:13:13,400
into the next because now you have

00:13:11,149 --> 00:13:15,320
passed through through a therapy so all

00:13:13,400 --> 00:13:16,850
of that has to happen in hardware unless

00:13:15,320 --> 00:13:19,220
you have a really good software model

00:13:16,850 --> 00:13:21,050
which kind of

00:13:19,220 --> 00:13:22,790
you know the slope of the control plane

00:13:21,050 --> 00:13:25,100
and data plane into three different

00:13:22,790 --> 00:13:27,610
problems and addresses only one in your

00:13:25,100 --> 00:13:27,610
pasture

00:13:28,720 --> 00:13:37,370
okay so so what is it that we want to do

00:13:35,150 --> 00:13:39,650
in future learning from our past and

00:13:37,370 --> 00:13:42,860
what is going on you know the in

00:13:39,650 --> 00:13:44,540
progress enhancements last net that we

00:13:42,860 --> 00:13:47,240
talked about the adaptive virtual

00:13:44,540 --> 00:13:49,970
function driver which is still one of

00:13:47,240 --> 00:13:53,540
the things that you know we're going to

00:13:49,970 --> 00:13:55,730
carry forward because we did realize VM

00:13:53,540 --> 00:13:59,090
that is getting a pass through should

00:13:55,730 --> 00:14:01,070
not be having a new VF driver with every

00:13:59,090 --> 00:14:02,780
different device or every different

00:14:01,070 --> 00:14:06,620
vendor for that matter because that's

00:14:02,780 --> 00:14:08,060
now not how it is supposed to be it

00:14:06,620 --> 00:14:09,800
should still look like a you know

00:14:08,060 --> 00:14:14,720
Ethernet driver which is accelerated and

00:14:09,800 --> 00:14:16,520
you know there is no reason that if you

00:14:14,720 --> 00:14:18,500
have offloaded all these switch features

00:14:16,520 --> 00:14:23,510
in your hardware that your VF driver

00:14:18,500 --> 00:14:26,750
should be changing the live migration

00:14:23,510 --> 00:14:31,370
with a therapy it's it's a column that

00:14:26,750 --> 00:14:35,330
we are trying to you know solve or maybe

00:14:31,370 --> 00:14:38,600
if we look forward and if acerra V is

00:14:35,330 --> 00:14:39,320
not the right you know rigid model that

00:14:38,600 --> 00:14:44,120
works for us

00:14:39,320 --> 00:14:46,160
maybe we solve it a different way better

00:14:44,120 --> 00:14:48,080
which place so I mean you know that

00:14:46,160 --> 00:14:49,730
that's where we lead into a couple of

00:14:48,080 --> 00:14:51,470
alternate solutions where we take the

00:14:49,730 --> 00:14:53,600
goodness of a therapy but take away the

00:14:51,470 --> 00:14:59,270
rigidness of authority which came with

00:14:53,600 --> 00:15:02,270
it being a PC ice box so yeah this is

00:14:59,270 --> 00:15:06,410
the slide from the past past net dev

00:15:02,270 --> 00:15:11,540
where we you know talked about adaptive

00:15:06,410 --> 00:15:15,590
virtual function the you know as I just

00:15:11,540 --> 00:15:18,230
mentioned the VF driver has no business

00:15:15,590 --> 00:15:22,430
and being so tied down to the hardware

00:15:18,230 --> 00:15:26,000
or the hardware generation that you know

00:15:22,430 --> 00:15:28,790
it is you know rendered useless as soon

00:15:26,000 --> 00:15:31,930
as you upgrade your hardware so same

00:15:28,790 --> 00:15:34,310
driver it should always be able to do

00:15:31,930 --> 00:15:36,710
your basic functionality which is

00:15:34,310 --> 00:15:38,810
networking and then you if you wanted

00:15:36,710 --> 00:15:42,520
something fancy you negotiate and

00:15:38,810 --> 00:15:42,520
negotiate in a device-independent way

00:15:43,270 --> 00:15:50,320
this model looks really good to cloud

00:15:45,620 --> 00:15:50,320
customers so we'll keep going with it

00:15:50,410 --> 00:15:55,610
you know going forward

00:15:53,180 --> 00:15:58,400
I kind of was trying to put together

00:15:55,610 --> 00:16:00,050
this picture and I may not have done a

00:15:58,400 --> 00:16:05,210
whole lot of justice to it but I'll try

00:16:00,050 --> 00:16:06,470
to describe it so on the right side you

00:16:05,210 --> 00:16:08,210
know the green block which is your

00:16:06,470 --> 00:16:13,550
passed through a CeraVe model which is

00:16:08,210 --> 00:16:15,500
backed by a you know a device you know

00:16:13,550 --> 00:16:19,010
I'm calling it a common device or Fri we

00:16:15,500 --> 00:16:21,140
devise whatever which are NIC implements

00:16:19,010 --> 00:16:26,600
which is backed by a PCI config space

00:16:21,140 --> 00:16:32,540
that you know the Nick helps create and

00:16:26,600 --> 00:16:36,350
and this is your fastest is not West you

00:16:32,540 --> 00:16:41,330
know traffic solution of course you know

00:16:36,350 --> 00:16:43,640
as Alex was mentioning if you look at

00:16:41,330 --> 00:16:45,500
you know the paravirtualized solution

00:16:43,640 --> 00:16:48,070
from you know what I am stuff it did

00:16:45,500 --> 00:16:50,510
just really good with east-west traffic

00:16:48,070 --> 00:16:52,190
you start doing that or therapy you're

00:16:50,510 --> 00:16:56,270
eating up on your north-south bandwidth

00:16:52,190 --> 00:17:00,350
in the PDF space in your PC bandwidth

00:16:56,270 --> 00:17:03,560
and and not to mention you know your PCI

00:17:00,350 --> 00:17:08,470
config space explosion done by sorry

00:17:03,560 --> 00:17:14,000
down there which may be an artificially

00:17:08,470 --> 00:17:20,780
constrained constraint that we inherited

00:17:14,000 --> 00:17:24,650
from a therapy as we move towards the

00:17:20,780 --> 00:17:29,260
left you know the red block most devices

00:17:24,650 --> 00:17:33,490
hardware devices you know either

00:17:29,260 --> 00:17:36,640
as they evolved because of SRV they have

00:17:33,490 --> 00:17:39,440
resources that can be partitioned and

00:17:36,640 --> 00:17:43,610
and they can be partitioned independent

00:17:39,440 --> 00:17:45,720
of they being SRV backed or not you know

00:17:43,610 --> 00:17:48,240
so most devices will

00:17:45,720 --> 00:17:53,879
provide multiple RSS domains they will

00:17:48,240 --> 00:17:56,490
provide you know a ton of cues of course

00:17:53,879 --> 00:17:59,490
and these three sources which are

00:17:56,490 --> 00:18:04,940
necessarily are necessary for the fast

00:17:59,490 --> 00:18:09,110
path you know they are plain they can be

00:18:04,940 --> 00:18:12,450
you know used for exploration

00:18:09,110 --> 00:18:16,740
independent office RV and that's what

00:18:12,450 --> 00:18:18,750
the red model is where you have the same

00:18:16,740 --> 00:18:20,669
driver running in the VM which was

00:18:18,750 --> 00:18:22,519
running for your pass through so you

00:18:20,669 --> 00:18:25,230
still have the common driver front-end

00:18:22,519 --> 00:18:28,500
but you have a common device back in

00:18:25,230 --> 00:18:32,070
which is your in your emulated Colonel

00:18:28,500 --> 00:18:33,659
model and but then if you use your

00:18:32,070 --> 00:18:37,230
hardware resources to activate that

00:18:33,659 --> 00:18:38,669
back-end you almost have achieved the

00:18:37,230 --> 00:18:47,460
same kind of performance you can with

00:18:38,669 --> 00:18:48,779
this RV okay more issues yeah more

00:18:47,460 --> 00:18:52,590
issues I'm good at listing all the

00:18:48,779 --> 00:18:53,759
issues so yeah one of the big issues

00:18:52,590 --> 00:18:56,070
that's actually been coming up quite a

00:18:53,759 --> 00:18:59,279
bit lately the issue of live migration

00:18:56,070 --> 00:19:01,110
with SR iov for those aren't familiar

00:18:59,279 --> 00:19:03,960
with the issue it's a century that right

00:19:01,110 --> 00:19:07,110
now last I knew if you have an SR iov

00:19:03,960 --> 00:19:10,679
device direct assigned to a guest that

00:19:07,110 --> 00:19:13,379
guest can't move the issue being yet

00:19:10,679 --> 00:19:14,820
there's no way to know the full state of

00:19:13,379 --> 00:19:17,070
the memory in the system because the

00:19:14,820 --> 00:19:18,389
device can change it at any second is

00:19:17,070 --> 00:19:21,419
what it comes down to so when you start

00:19:18,389 --> 00:19:24,840
a migration the the guest has no way of

00:19:21,419 --> 00:19:26,789
knowing or actually the host has no way

00:19:24,840 --> 00:19:29,340
of knowing what pages in the guests were

00:19:26,789 --> 00:19:32,039
dirtied by the device or not this may be

00:19:29,340 --> 00:19:33,809
fixed some other means in the future but

00:19:32,039 --> 00:19:36,840
there's a there's a patch set that was

00:19:33,809 --> 00:19:37,889
submitted like a year or so back and I

00:19:36,840 --> 00:19:40,110
actually pointed out that there's a few

00:19:37,889 --> 00:19:41,700
issues with it the big one there's a

00:19:40,110 --> 00:19:43,470
couple of big ones though so the biggest

00:19:41,700 --> 00:19:46,529
issue is just that dirty page tracking

00:19:43,470 --> 00:19:49,590
there has to be a way for the host to

00:19:46,529 --> 00:19:52,320
know what pages are DMA mapped and

00:19:49,590 --> 00:19:55,080
writable by the device without having

00:19:52,320 --> 00:19:58,200
that basically migration can't happen

00:19:55,080 --> 00:19:59,640
because it'll the the host will migrate

00:19:58,200 --> 00:20:02,220
those pages there'll be mark

00:19:59,640 --> 00:20:03,360
is clean and they might get written to

00:20:02,220 --> 00:20:05,160
again by the device which would

00:20:03,360 --> 00:20:06,299
completely invalidates the state of that

00:20:05,160 --> 00:20:08,520
memory and there's no way for the host

00:20:06,299 --> 00:20:10,170
to know that that happened I've proposed

00:20:08,520 --> 00:20:12,600
some stuff in the past like trying to do

00:20:10,170 --> 00:20:14,040
like a pair of virtual iommu the problem

00:20:12,600 --> 00:20:15,360
is there's going to be obvious it costs

00:20:14,040 --> 00:20:17,309
to trying to do anything that would make

00:20:15,360 --> 00:20:19,080
it my gradable so there's a lot of

00:20:17,309 --> 00:20:20,820
trade-offs is still a lot of work to be

00:20:19,080 --> 00:20:22,350
done on that that's really in the early

00:20:20,820 --> 00:20:24,780
stages is still even understanding how

00:20:22,350 --> 00:20:26,280
to solve this problem

00:20:24,780 --> 00:20:29,070
then there's a couple other things that

00:20:26,280 --> 00:20:31,640
go on so when you're migrating a VM

00:20:29,070 --> 00:20:34,140
one of the things they'll happen is well

00:20:31,640 --> 00:20:35,429
the address is going to move from one

00:20:34,140 --> 00:20:38,250
host to another one so if you're running

00:20:35,429 --> 00:20:39,450
SR io v those packets are still arriving

00:20:38,250 --> 00:20:42,360
to the VF and they're just going to

00:20:39,450 --> 00:20:44,730
basically die there or worse yet they

00:20:42,360 --> 00:20:45,990
arrive at the NIC and the NIC has

00:20:44,730 --> 00:20:47,730
already removed that filter and it just

00:20:45,990 --> 00:20:49,260
drops the packet so now you've got

00:20:47,730 --> 00:20:50,820
packets they're just disappearing and so

00:20:49,260 --> 00:20:53,820
to some extent you end up needing to put

00:20:50,820 --> 00:20:56,760
something in the PF or maybe on a bridge

00:20:53,820 --> 00:20:59,429
on the PF so you could then redirect

00:20:56,760 --> 00:21:01,470
traffic for that VF to that entity and

00:20:59,429 --> 00:21:03,600
have a hairpin and send the packets back

00:21:01,470 --> 00:21:04,950
out while the switches trail while the

00:21:03,600 --> 00:21:06,299
network is still trying to figure out oh

00:21:04,950 --> 00:21:10,440
why did that MAC address and we'll just

00:21:06,299 --> 00:21:11,940
move across the network in the last bit

00:21:10,440 --> 00:21:13,919
and all this is try to minimize the drop

00:21:11,940 --> 00:21:15,780
packet rate so like the existing

00:21:13,919 --> 00:21:17,910
solution that's out there right now for

00:21:15,780 --> 00:21:20,100
this is if you want to migrate you have

00:21:17,910 --> 00:21:22,710
to have like the VF bonded with like a

00:21:20,100 --> 00:21:25,080
Verdi interface and as soon as you're

00:21:22,710 --> 00:21:28,470
going to migrate you have done just

00:21:25,080 --> 00:21:30,120
hot-plug removed the DF from the network

00:21:28,470 --> 00:21:31,679
the problem is at that point all of a

00:21:30,120 --> 00:21:34,980
sudden all the utilization and

00:21:31,679 --> 00:21:37,290
everything on the system goes way up it

00:21:34,980 --> 00:21:38,549
gives you a lower drop packet rate but

00:21:37,290 --> 00:21:39,900
you still have to wait until the

00:21:38,549 --> 00:21:42,860
migrations finish and you're going to

00:21:39,900 --> 00:21:44,790
have packets dropping in the meantime

00:21:42,860 --> 00:21:51,110
actually I guess I kind of covered the

00:21:44,790 --> 00:21:51,110
solution there so do another yes sorry

00:21:53,409 --> 00:21:57,230
okay

00:21:54,590 --> 00:21:59,960
so yeah I mean there isn't a clean

00:21:57,230 --> 00:22:02,450
solution here there is a Hardware

00:21:59,960 --> 00:22:04,549
agnostic solution which is what alex is

00:22:02,450 --> 00:22:07,700
talking about the integrated teaming in

00:22:04,549 --> 00:22:09,799
software using an emulator interface

00:22:07,700 --> 00:22:12,379
bonded with a you know a pass-through

00:22:09,799 --> 00:22:14,960
interface this is this is a solution

00:22:12,379 --> 00:22:20,690
that you know Microsoft does it for

00:22:14,960 --> 00:22:23,659
their you know movie ends so in this

00:22:20,690 --> 00:22:29,090
case your you know your you know dirty

00:22:23,659 --> 00:22:31,970
page tracking is done by PML and you

00:22:29,090 --> 00:22:36,379
have because you're failing over to

00:22:31,970 --> 00:22:38,990
emulate a path you know you are free of

00:22:36,379 --> 00:22:42,879
all the HIV issues which is you know if

00:22:38,990 --> 00:22:46,279
if you were using a therapy for doing

00:22:42,879 --> 00:22:48,350
live migration you you have without

00:22:46,279 --> 00:22:50,120
actually having the steaming solution

00:22:48,350 --> 00:22:54,049
you have to build some more hardware

00:22:50,120 --> 00:22:56,539
pieces down there so I mean there are

00:22:54,049 --> 00:22:59,389
two possible solutions again in in the

00:22:56,539 --> 00:23:03,159
hardware solutions if we were not to do

00:22:59,389 --> 00:23:05,809
integrated teaming for like migration

00:23:03,159 --> 00:23:07,669
you could wait for the platform level

00:23:05,809 --> 00:23:09,440
solution to come where I mean tracking

00:23:07,669 --> 00:23:12,169
dirty pages will track both ways like

00:23:09,440 --> 00:23:14,840
the pages which are dirtied by the CPU

00:23:12,169 --> 00:23:16,669
and by the device once you can track

00:23:14,840 --> 00:23:20,960
those dirty pages dirtied by the device

00:23:16,669 --> 00:23:22,990
and you know you can you can have a live

00:23:20,960 --> 00:23:26,090
migration migration solution or you

00:23:22,990 --> 00:23:28,519
could do a NIC based solution where

00:23:26,090 --> 00:23:31,700
every NIC kind of does a similar thing

00:23:28,519 --> 00:23:35,389
which is which a platform would have

00:23:31,700 --> 00:23:37,759
done for all DMA devices which were

00:23:35,389 --> 00:23:40,159
writing into memory and tracking

00:23:37,759 --> 00:23:43,220
identity pages now make every NIC vendor

00:23:40,159 --> 00:23:45,409
does their own solution flip for it it's

00:23:43,220 --> 00:23:47,690
not a clean solution you know we we kind

00:23:45,409 --> 00:23:54,830
of listed hole you know lot of detail

00:23:47,690 --> 00:23:57,980
over there the point here is if you know

00:23:54,830 --> 00:24:01,399
we stick to the SR Ivy model there is a

00:23:57,980 --> 00:24:03,710
lot more you know things that we have to

00:24:01,399 --> 00:24:05,950
solve particularly in case of live

00:24:03,710 --> 00:24:05,950
migration

00:24:05,990 --> 00:24:11,900
either using you know platform platform

00:24:10,040 --> 00:24:14,270
level solution or Nick level solutions

00:24:11,900 --> 00:24:17,890
although if we were to solve this in

00:24:14,270 --> 00:24:21,620
software we can have a solution now

00:24:17,890 --> 00:24:25,390
which means a VF driver change you have

00:24:21,620 --> 00:24:28,910
an integrated teeming driver there which

00:24:25,390 --> 00:24:31,390
which seems like you know the only

00:24:28,910 --> 00:24:39,710
reasonable solution without a hardware

00:24:31,390 --> 00:24:43,640
update okay so which leads to the next

00:24:39,710 --> 00:24:46,040
you know topic now that we have done all

00:24:43,640 --> 00:24:48,830
the bashing for SRV and all the issues

00:24:46,040 --> 00:24:52,700
so this is this is what we look up as

00:24:48,830 --> 00:24:56,290
what would happen in future based on you

00:24:52,700 --> 00:25:00,429
know all the issues that we see most

00:24:56,290 --> 00:25:03,890
devices you know they they would like to

00:25:00,429 --> 00:25:05,720
you know break free of the limitations

00:25:03,890 --> 00:25:08,750
that aside we brought brought which is

00:25:05,720 --> 00:25:12,080
the pset spec limitation so if you could

00:25:08,750 --> 00:25:15,730
fabricate your PCI device for the VM and

00:25:12,080 --> 00:25:18,130
it is not visible in your in your

00:25:15,730 --> 00:25:20,990
hypervisor you're not eating into the

00:25:18,130 --> 00:25:23,720
config space over there and then you

00:25:20,990 --> 00:25:27,010
have a lot more control of all the PS

00:25:23,720 --> 00:25:30,140
devices that you create for your VMs

00:25:27,010 --> 00:25:33,440
they become lot more composable because

00:25:30,140 --> 00:25:36,320
you're you're taking only the pieces

00:25:33,440 --> 00:25:38,360
that are needed for the data plane and

00:25:36,320 --> 00:25:41,840
the rest of it can be done in software

00:25:38,360 --> 00:25:45,169
so if it's like a combined device which

00:25:41,840 --> 00:25:48,980
is you have left pieces which can be

00:25:45,169 --> 00:25:51,230
done more in a device independent way in

00:25:48,980 --> 00:25:53,360
the software and the slope add pieces in

00:25:51,230 --> 00:25:56,750
the software so yeah your control plane

00:25:53,360 --> 00:26:04,280
your slow path remains in the hypervisor

00:25:56,750 --> 00:26:08,600
whereas only you get your you know the

00:26:04,280 --> 00:26:14,080
the fast path queues which get composed

00:26:08,600 --> 00:26:18,740
as VF device and exposed to your VM so

00:26:14,080 --> 00:26:22,610
yeah so basically by doing that we avoid

00:26:18,740 --> 00:26:28,270
too much pass through and solve the

00:26:22,610 --> 00:26:28,270
three three areas in in the right places

00:26:29,740 --> 00:26:37,490
this is a more hypothetical there you

00:26:33,860 --> 00:26:41,570
know it's not data backed so don't blame

00:26:37,490 --> 00:26:43,820
me for it it's more of saying that if

00:26:41,570 --> 00:26:45,830
you and this is mostly talking about

00:26:43,820 --> 00:26:48,620
north-south traffic it's not east-west

00:26:45,830 --> 00:26:50,510
traffic so if you're using word I obeyed

00:26:48,620 --> 00:26:53,330
without pass through yes you have a

00:26:50,510 --> 00:26:55,490
degradation performance if you were to

00:26:53,330 --> 00:26:56,570
accelerate what I go through all the

00:26:55,490 --> 00:26:59,929
possible things that we talked about

00:26:56,570 --> 00:27:02,960
today today which were you know use AF

00:26:59,929 --> 00:27:06,350
packet use you know virtual descriptor

00:27:02,960 --> 00:27:10,760
rings use XDP to kind of take your

00:27:06,350 --> 00:27:14,120
packet directly to your VF you know at

00:27:10,760 --> 00:27:15,770
the back end there are there's a whole

00:27:14,120 --> 00:27:20,510
lot of possibilities that you can do to

00:27:15,770 --> 00:27:24,190
kind of reduce that last mile from the

00:27:20,510 --> 00:27:28,940
packet being received in your in your

00:27:24,190 --> 00:27:34,029
ps2 going to your VF without doing a

00:27:28,940 --> 00:27:36,909
sorry so yes that that green oval can

00:27:34,029 --> 00:27:39,169
move quite up based on how much

00:27:36,909 --> 00:27:43,179
acceleration we do and how much of

00:27:39,169 --> 00:27:46,940
cleanup we do in our kernel stack for it

00:27:43,179 --> 00:27:48,409
the you know the SRA we want we know

00:27:46,940 --> 00:27:49,750
since it's a direct pass through it

00:27:48,409 --> 00:27:52,490
gives you the best performance

00:27:49,750 --> 00:27:54,919
the goal for composable vs will be to

00:27:52,490 --> 00:27:56,299
retain all the goodness of SRA v4 which

00:27:54,919 --> 00:27:58,789
we get to pass through which is you're

00:27:56,299 --> 00:28:01,669
not self traffic being as far as it can

00:27:58,789 --> 00:28:04,940
be but so the performance should remain

00:28:01,669 --> 00:28:08,510
as good as sorry we but it should take

00:28:04,940 --> 00:28:11,390
away the rigidness that was the idea the

00:28:08,510 --> 00:28:13,909
this the slide can we looked the other

00:28:11,390 --> 00:28:15,620
way where you know if you were talking

00:28:13,909 --> 00:28:17,330
sleep utilization a serbian compose

00:28:15,620 --> 00:28:23,539
Olivia's will be where the bottom

00:28:17,330 --> 00:28:29,270
whereas the others will be on top other

00:28:23,539 --> 00:28:32,540
points of comparison I I think we talked

00:28:29,270 --> 00:28:34,870
about during the day we talked

00:28:32,540 --> 00:28:38,810
about where should the invasion be and

00:28:34,870 --> 00:28:41,300
innovation should remain buried down

00:28:38,810 --> 00:28:44,210
there in the lowest level and it should

00:28:41,300 --> 00:28:48,620
not be exposed to the you know software

00:28:44,210 --> 00:28:51,220
APs which are using these devices to at

00:28:48,620 --> 00:28:55,070
that level it should all look very

00:28:51,220 --> 00:28:57,920
similar and you know it should use the

00:28:55,070 --> 00:29:02,060
same kind of tools that should you know

00:28:57,920 --> 00:29:03,590
work seamlessly so the and and the

00:29:02,060 --> 00:29:06,710
hardware implementation should remain

00:29:03,590 --> 00:29:09,100
flexible enough for innovation that was

00:29:06,710 --> 00:29:09,100
the point

00:29:09,470 --> 00:29:13,610
all sorts that require driver changes

00:29:11,690 --> 00:29:17,720
versus the ones that don't and I kind of

00:29:13,610 --> 00:29:19,730
touched on that point that you know last

00:29:17,720 --> 00:29:21,680
few years we saw the VF driver changing

00:29:19,730 --> 00:29:26,180
a whole lot there shouldn't be a reason

00:29:21,680 --> 00:29:29,930
for that if we were doing this you know

00:29:26,180 --> 00:29:31,670
the switch model for network i/o

00:29:29,930 --> 00:29:33,110
virtualization where we have a switch

00:29:31,670 --> 00:29:35,930
staff kind of managing the a survey

00:29:33,110 --> 00:29:39,140
devices and the other then this should

00:29:35,930 --> 00:29:43,450
be invisible for most part in the VF

00:29:39,140 --> 00:29:45,680
driver unless you are creating you know

00:29:43,450 --> 00:29:47,990
multiple control domains which can

00:29:45,680 --> 00:29:50,690
happen where your VF could be one of

00:29:47,990 --> 00:29:52,430
those network function virtualization vs

00:29:50,690 --> 00:29:55,910
which is trying to do a lot more than a

00:29:52,430 --> 00:29:59,720
simple VF and in that case you are

00:29:55,910 --> 00:30:02,720
actually partitioning your hardware into

00:29:59,720 --> 00:30:06,200
multiple control domains and multiples

00:30:02,720 --> 00:30:09,440
you know you are dedicating a whole lot

00:30:06,200 --> 00:30:11,690
of switch resources to your VM and and

00:30:09,440 --> 00:30:14,240
that that would be the only reason why

00:30:11,690 --> 00:30:17,840
you should ever be considering your VF

00:30:14,240 --> 00:30:19,820
driver changing we touched a little bit

00:30:17,840 --> 00:30:21,980
about the east-west traffic SRV doesn't

00:30:19,820 --> 00:30:24,380
have a solution for it and that's why I

00:30:21,980 --> 00:30:29,770
make small models with composable VF

00:30:24,380 --> 00:30:32,420
will it will be a better model and

00:30:29,770 --> 00:30:36,440
overall cost of maintenance I guess this

00:30:32,420 --> 00:30:39,950
is a really good question it cost in

00:30:36,440 --> 00:30:43,790
terms of you know

00:30:39,950 --> 00:30:48,410
the end user how you know user

00:30:43,790 --> 00:30:54,350
experience versus you know we can

00:30:48,410 --> 00:30:58,250
probably argue about that a lot and for

00:30:54,350 --> 00:31:00,410
conclusions so we're already over time

00:30:58,250 --> 00:31:01,760
so I'll keep this short big issues with

00:31:00,410 --> 00:31:03,890
SR Iove

00:31:01,760 --> 00:31:06,470
we can't migrate an east-west traffic

00:31:03,890 --> 00:31:08,600
really hurts on it so we should need to

00:31:06,470 --> 00:31:10,460
look at doing more to try to actually

00:31:08,600 --> 00:31:13,550
get less traffic to go across that

00:31:10,460 --> 00:31:15,350
interface if possible and to that and

00:31:13,550 --> 00:31:18,110
one of the things we're suggesting is

00:31:15,350 --> 00:31:19,940
basically when you look at doing a combo

00:31:18,110 --> 00:31:21,680
basically most cases you probably need

00:31:19,940 --> 00:31:24,230
to have Verdejo for your east-west

00:31:21,680 --> 00:31:25,460
traffic SRA o V for your north-south

00:31:24,230 --> 00:31:29,510
traffic and you would probably get the

00:31:25,460 --> 00:31:34,070
best of both worlds in that case let's

00:31:29,510 --> 00:31:35,690
see yeah so switch to have mile the

00:31:34,070 --> 00:31:38,060
searched model works for the SR AV

00:31:35,690 --> 00:31:39,740
control playing but you know there's

00:31:38,060 --> 00:31:41,080
some things going on there although I

00:31:39,740 --> 00:31:42,950
don't know if there's really much of a

00:31:41,080 --> 00:31:44,660
scaling issue we'll have to see over

00:31:42,950 --> 00:31:46,610
time the biggest issue is going to be

00:31:44,660 --> 00:31:48,800
what happens if you know we start adding

00:31:46,610 --> 00:31:50,660
more and more ports especially when we

00:31:48,800 --> 00:31:55,550
start looking at you know theoretical

00:31:50,660 --> 00:31:57,980
upper limits the last one was yeah

00:31:55,550 --> 00:31:59,660
basically gets back to the with Verdi Oh

00:31:57,980 --> 00:32:01,400
being accelerated there's a lot more we

00:31:59,660 --> 00:32:03,410
can do so if we're using something like

00:32:01,400 --> 00:32:05,420
x GP or AF packet which john mentioned

00:32:03,410 --> 00:32:07,490
we can look at solving some of the vert

00:32:05,420 --> 00:32:09,590
vert realization bottleneck for the

00:32:07,490 --> 00:32:14,480
Verdi oh and that should help to improve

00:32:09,590 --> 00:32:16,880
things quite a bit and just some

00:32:14,480 --> 00:32:20,230
acknowledgments so yeah I know a few

00:32:16,880 --> 00:32:23,480
other people are here here in Mitch John

00:32:20,230 --> 00:32:25,400
you know I think that's the list so yeah

00:32:23,480 --> 00:32:29,720
well yeah I said Kieran Kieran Mitch

00:32:25,400 --> 00:32:33,790
John yeah then Danielle alien near of I

00:32:29,720 --> 00:32:36,790
don't think you're here so no and yeah

00:32:33,790 --> 00:32:36,790
questions

00:32:41,180 --> 00:32:47,040
so in my experience the worst part about

00:32:45,150 --> 00:32:50,850
SRV is something you didn't mention

00:32:47,040 --> 00:32:54,210
which is only about 10% of the hardware

00:32:50,850 --> 00:32:56,130
platforms I run into will run it cleanly

00:32:54,210 --> 00:33:00,810
out of the box unless you get you know

00:32:56,130 --> 00:33:03,810
top shelf hardware I and its luckily

00:33:00,810 --> 00:33:05,730
it's better in Linux then any of the

00:33:03,810 --> 00:33:07,640
other operating systems the worst being

00:33:05,730 --> 00:33:10,440
VMware which doesn't tell you anything

00:33:07,640 --> 00:33:11,910
and Windows you there's a bunch of

00:33:10,440 --> 00:33:14,850
PowerShell commands will tell you oh

00:33:11,910 --> 00:33:18,030
your boxes got this wart I can't do

00:33:14,850 --> 00:33:19,500
anything ok let's see there's your

00:33:18,030 --> 00:33:21,420
problem you're not running Linux come on

00:33:19,500 --> 00:33:23,100
but with Linux with Linux you can at

00:33:21,420 --> 00:33:24,780
least get a key message slug or

00:33:23,100 --> 00:33:27,300
something that tells you that that this

00:33:24,780 --> 00:33:29,640
is that you're these two devices overlap

00:33:27,300 --> 00:33:31,980
or whatever is going on well to give you

00:33:29,640 --> 00:33:33,270
some background like you know for those

00:33:31,980 --> 00:33:35,220
that don't know I was one of the ones

00:33:33,270 --> 00:33:37,290
that had to work on the first few VF

00:33:35,220 --> 00:33:38,550
drivers it got to the point where I

00:33:37,290 --> 00:33:40,530
could take a system that didn't support

00:33:38,550 --> 00:33:41,910
SR io v didn't support any of it I knew

00:33:40,530 --> 00:33:46,080
enough workaround I could just turn them

00:33:41,910 --> 00:33:48,240
all on and ok this is no old like I CH 9

00:33:46,080 --> 00:33:50,160
platform had no support for any of that

00:33:48,240 --> 00:33:52,980
and I could turn it all on although I

00:33:50,160 --> 00:33:54,210
had some of the other developers yelling

00:33:52,980 --> 00:33:55,920
at me for things because like you know

00:33:54,210 --> 00:33:58,080
we got into an argument about whether or

00:33:55,920 --> 00:34:00,390
not SR io v actually required an iommu

00:33:58,080 --> 00:34:02,610
or not so I'm like why I'm testing it on

00:34:00,390 --> 00:34:03,960
my I CH 9 it doesn't have an iommu it's

00:34:02,610 --> 00:34:06,120
bare metal what are you talking about

00:34:03,960 --> 00:34:07,800
this is before like containerization had

00:34:06,120 --> 00:34:09,630
really caught on because in their mind

00:34:07,800 --> 00:34:13,290
sr EOP was only ever going to be pushed

00:34:09,630 --> 00:34:14,610
into a vm it's like you know so those

00:34:13,290 --> 00:34:16,110
are the kind of things you know don't

00:34:14,610 --> 00:34:17,850
narrow things down too much but at the

00:34:16,110 --> 00:34:19,680
same time we need to think about stuff

00:34:17,850 --> 00:34:21,390
like migration in the future and

00:34:19,680 --> 00:34:23,640
actually when we introduce something

00:34:21,390 --> 00:34:25,440
tests all the cases not just north-south

00:34:23,640 --> 00:34:27,000
because it's kind of embarrassing now to

00:34:25,440 --> 00:34:29,310
go and show custom oh yeah we can do

00:34:27,000 --> 00:34:33,030
this VM to VM and they move the two VMs

00:34:29,310 --> 00:34:35,070
on the same host it's like yeah you're

00:34:33,030 --> 00:34:37,860
going to get like 40 gig on Verdi oh and

00:34:35,070 --> 00:34:39,750
we're going to do maybe 10 15 and it's

00:34:37,860 --> 00:34:41,220
like okay why is that it's like well

00:34:39,750 --> 00:34:42,930
because it's just straight memory

00:34:41,220 --> 00:34:46,010
there's a PCI bus thing and it's

00:34:42,930 --> 00:34:49,770
bottlenecking us can only go so fast so

00:34:46,010 --> 00:34:52,410
yeah and at the same point right like

00:34:49,770 --> 00:34:53,760
sorry we started as a PT spec the

00:34:52,410 --> 00:34:55,500
switching features game

00:34:53,760 --> 00:34:57,450
even tell you when you realize that oh

00:34:55,500 --> 00:34:59,850
you might get the slowdown there and now

00:34:57,450 --> 00:35:03,510
we have to have some more harder blocks

00:34:59,850 --> 00:35:05,820
to kind of deal with it plus in the

00:35:03,510 --> 00:35:10,590
infancy all the asari drivers were so

00:35:05,820 --> 00:35:12,030
device dependent area right so you know

00:35:10,590 --> 00:35:18,780
that that's those are the problems we

00:35:12,030 --> 00:35:24,750
are trying to solve nobody else I've got

00:35:18,780 --> 00:35:26,250
Tom over here so now that you brought it

00:35:24,750 --> 00:35:28,170
up and I was thinking about this during

00:35:26,250 --> 00:35:31,020
your talk but since there are so much

00:35:28,170 --> 00:35:33,090
depth on the VM in the vs and what have

00:35:31,020 --> 00:35:35,480
you how much of this actually is

00:35:33,090 --> 00:35:37,350
applicable to a containers environment

00:35:35,480 --> 00:35:39,780
just depends on how it's going to be

00:35:37,350 --> 00:35:42,510
used so that's the thing is I think what

00:35:39,780 --> 00:35:43,410
is it Mellanox was presenting a solution

00:35:42,510 --> 00:35:45,000
that essentially ends up giving you

00:35:43,410 --> 00:35:47,400
something whether it was a harbor

00:35:45,000 --> 00:35:50,790
accelerated mac VLAN with switch dev

00:35:47,400 --> 00:35:52,020
support if you remember right yeah the

00:35:50,790 --> 00:35:52,920
advantage with containers is you can get

00:35:52,020 --> 00:35:54,480
away with stuff like that

00:35:52,920 --> 00:35:56,160
so you can actually control the

00:35:54,480 --> 00:35:58,020
granularity much better and that gets

00:35:56,160 --> 00:35:59,880
handed back to that idea of composable

00:35:58,020 --> 00:36:01,710
vs because then you're just taking

00:35:59,880 --> 00:36:02,970
resources out of the PF and you say okay

00:36:01,710 --> 00:36:05,370
I can actually hand this off if I need

00:36:02,970 --> 00:36:07,200
to it just depends on what level of

00:36:05,370 --> 00:36:09,720
security you want to then you know you

00:36:07,200 --> 00:36:11,700
don't get the iommu isolation

00:36:09,720 --> 00:36:12,930
necessarily that's something that you

00:36:11,700 --> 00:36:14,520
know will probably have something like

00:36:12,930 --> 00:36:18,300
that in the future I don't know a lot to

00:36:14,520 --> 00:36:19,950
see what so when you see this in

00:36:18,300 --> 00:36:22,080
deployment are a lot of people using it

00:36:19,950 --> 00:36:23,760
with containers because the thing that

00:36:22,080 --> 00:36:25,530
I'm thinking of is if I have an

00:36:23,760 --> 00:36:28,020
opportunity to do something in software

00:36:25,530 --> 00:36:29,970
instead of hardware and it's like 99

00:36:28,020 --> 00:36:32,460
percent as efficient in software I

00:36:29,970 --> 00:36:34,380
almost always rather do it in software

00:36:32,460 --> 00:36:36,570
so I understand VMs while you're kind of

00:36:34,380 --> 00:36:37,770
forced into this area of your model well

00:36:36,570 --> 00:36:38,400
see that's the things it depends on what

00:36:37,770 --> 00:36:40,140
you're doing

00:36:38,400 --> 00:36:42,810
north-south traffic as long as you're

00:36:40,140 --> 00:36:44,580
heading out of the box sro v8 will

00:36:42,810 --> 00:36:46,530
outperform but if you're going east west

00:36:44,580 --> 00:36:50,090
we can't compete because we're

00:36:46,530 --> 00:36:52,140
bottlenecked by the PCI bus or PCIe bus

00:36:50,090 --> 00:36:54,390
because I can only handle so much so

00:36:52,140 --> 00:36:57,540
it's like a by eight so like on an 8 to

00:36:54,390 --> 00:36:59,220
$5.99 for instance it's a by H into so

00:36:57,540 --> 00:37:03,390
that gives you I'm trying to read the

00:36:59,220 --> 00:37:05,820
exact number now it's like I think 30

00:37:03,390 --> 00:37:07,890
gigs something like that up throughput

00:37:05,820 --> 00:37:10,799
max if you go over

00:37:07,890 --> 00:37:12,569
that whereas you can do like 4050 gig

00:37:10,799 --> 00:37:13,440
just going around locally on the system

00:37:12,569 --> 00:37:16,529
because it's just a memory - memory

00:37:13,440 --> 00:37:18,029
transfer instead so out like I've seen

00:37:16,529 --> 00:37:19,410
some pretty weird setups where people

00:37:18,029 --> 00:37:22,769
start looping things in and out of the S

00:37:19,410 --> 00:37:24,359
and it's like whoa don't do that please

00:37:22,769 --> 00:37:25,799
how can you accept that because it's

00:37:24,359 --> 00:37:27,779
like by the time they're done they've

00:37:25,799 --> 00:37:29,940
cut like they're ten or 40 gig links

00:37:27,779 --> 00:37:31,289
down to like just single gigabit numbers

00:37:29,940 --> 00:37:33,539
because they're having to make so many

00:37:31,289 --> 00:37:36,059
trips over the PCIe bus but if you're

00:37:33,539 --> 00:37:39,150
doing this like what the middle skills

00:37:36,059 --> 00:37:39,990
are saying Mike feel on exposed posed

00:37:39,150 --> 00:37:41,940
into a container

00:37:39,990 --> 00:37:43,890
well that would still have some exposing

00:37:41,940 --> 00:37:45,329
the PCI bus right it'll it would

00:37:43,890 --> 00:37:47,670
probably have some of the same kind of

00:37:45,329 --> 00:37:49,500
issues but in theory it's like one thing

00:37:47,670 --> 00:37:52,230
we've been like batting around the idea

00:37:49,500 --> 00:37:54,630
of was essentially the add a Verdi a

00:37:52,230 --> 00:37:56,519
channel to you something like your bf

00:37:54,630 --> 00:37:58,230
and then as long as you have a Mac table

00:37:56,519 --> 00:38:01,039
it says hey that guy is actually local

00:37:58,230 --> 00:38:03,210
to the Verdi Oh send it that way instead

00:38:01,039 --> 00:38:05,369
then you could actually get the best of

00:38:03,210 --> 00:38:07,470
both worlds you end up doing like almost

00:38:05,369 --> 00:38:08,940
a Mac based routing set so all the local

00:38:07,470 --> 00:38:10,769
VMS would be using Verdi oh and

00:38:08,940 --> 00:38:13,410
everything yourself would be going sr io

00:38:10,769 --> 00:38:15,960
v you know it wouldn't be too surprising

00:38:13,410 --> 00:38:17,910
that's kind of like the thing that they

00:38:15,960 --> 00:38:20,809
do in hyper-v at this point where they

00:38:17,910 --> 00:38:23,940
bond the two together under one channel

00:38:20,809 --> 00:38:26,940
yes just to add some more you know John

00:38:23,940 --> 00:38:28,589
had done the Mac wheel and stuff for HCV

00:38:26,940 --> 00:38:30,869
and that's pretty much what the

00:38:28,589 --> 00:38:34,140
paravirtualized model is with hardware

00:38:30,869 --> 00:38:35,519
acceleration right so to answer that's

00:38:34,140 --> 00:38:37,559
your model for container if you don't

00:38:35,519 --> 00:38:40,859
need security if you need security a

00:38:37,559 --> 00:38:42,960
survey is the DES model but unless we

00:38:40,859 --> 00:38:45,119
come with something else a service

00:38:42,960 --> 00:38:48,660
limited right okay how many survived is

00:38:45,119 --> 00:38:50,609
it certainly uh-oh I mean the spike it

00:38:48,660 --> 00:38:52,380
sells well why do you yeah it depends on

00:38:50,609 --> 00:38:54,630
the hardware yeah you can actually go

00:38:52,380 --> 00:38:56,160
pretty big but most of them you can only

00:38:54,630 --> 00:38:57,210
partition into so many slices like I

00:38:56,160 --> 00:39:00,420
think most the intel parts are like

00:38:57,210 --> 00:39:03,630
around 64 oh yeah so you know I thought

00:39:00,420 --> 00:39:05,009
you will do like 128 128 the big number

00:39:03,630 --> 00:39:08,819
is a problem where there's only eight

00:39:05,009 --> 00:39:11,369
six seven eight bits so well eight well

00:39:08,819 --> 00:39:14,190
eight in the device or the the function

00:39:11,369 --> 00:39:15,660
number portion right no but the device

00:39:14,190 --> 00:39:17,369
and function number is eight but

00:39:15,660 --> 00:39:18,359
theoretically you can go beyond that it

00:39:17,369 --> 00:39:20,430
just kind of get Terrier because you

00:39:18,359 --> 00:39:21,920
start showing your device has to support

00:39:20,430 --> 00:39:23,850
some extra PCI

00:39:21,920 --> 00:39:25,590
configuration option just to clarify

00:39:23,850 --> 00:39:26,880
when you're saying if you don't care

00:39:25,590 --> 00:39:30,150
about security you're talking about the

00:39:26,880 --> 00:39:32,040
iommu or right yeah okay do that sound

00:39:30,150 --> 00:39:34,800
that it's basically right now it

00:39:32,040 --> 00:39:36,150
operates on a PCI function by PCI

00:39:34,800 --> 00:39:39,180
function basis you have no way of

00:39:36,150 --> 00:39:40,890
telling you know the rest of the system

00:39:39,180 --> 00:39:42,720
cannot access this the rest and only

00:39:40,890 --> 00:39:44,070
that one cue pair can act like that what

00:39:42,720 --> 00:39:46,740
we're just going to cut it off here guys

00:39:44,070 --> 00:39:48,210
oh all right Tom Haas Tom how do is all

00:39:46,740 --> 00:39:50,160
those funds we don't have to like hold

00:39:48,210 --> 00:39:51,750
on drink okay I got a follow-up because

00:39:50,160 --> 00:39:54,660
you mentioned the other thing I was

00:39:51,750 --> 00:39:57,180
thinking about so the use of the term

00:39:54,660 --> 00:39:59,400
security here I'm not exactly sure what

00:39:57,180 --> 00:40:01,140
that means because if I was a user and

00:39:59,400 --> 00:40:03,480
you told me this was secure that would

00:40:01,140 --> 00:40:06,270
have to mean an end and I think there

00:40:03,480 --> 00:40:09,150
was some offhand comment that there was

00:40:06,270 --> 00:40:11,070
crypto offload but what exactly does

00:40:09,150 --> 00:40:12,810
that mean so I understand the security

00:40:11,070 --> 00:40:14,550
and well ok isolation of the hardware

00:40:12,810 --> 00:40:15,540
but yet security that's what we're

00:40:14,550 --> 00:40:17,610
talking about with this it's just

00:40:15,540 --> 00:40:20,340
isolation of the hardware okay basically

00:40:17,610 --> 00:40:22,380
of the EF if it decides to write a like

00:40:20,340 --> 00:40:24,540
a malformed descriptor at least on

00:40:22,380 --> 00:40:26,430
mostly Intel hardware it'll catch that

00:40:24,540 --> 00:40:27,780
and say ok this guy tried to do

00:40:26,430 --> 00:40:30,000
something bad I'm just switching him off

00:40:27,780 --> 00:40:31,710
for now versus like if you did like a

00:40:30,000 --> 00:40:33,570
direct design of give it a physical port

00:40:31,710 --> 00:40:36,720
it just plow right through hanging the

00:40:33,570 --> 00:40:39,690
NIC and call it a day what about the

00:40:36,720 --> 00:40:42,030
crypto offload comment so the cursor

00:40:39,690 --> 00:40:44,460
offload is different of course that that

00:40:42,030 --> 00:40:46,710
is coming from where you have a complete

00:40:44,460 --> 00:40:49,230
pass for using a CeraVe so you say you

00:40:46,710 --> 00:40:52,980
were having a flow which was you know

00:40:49,230 --> 00:40:55,710
encrypted and now you are you psyche or

00:40:52,980 --> 00:40:57,930
whatever you have you in the hardware

00:40:55,710 --> 00:41:00,420
though so if it was happening in the

00:40:57,930 --> 00:41:01,650
software as soon as you pull that flow

00:41:00,420 --> 00:41:04,380
and you're doing a pasture into a

00:41:01,650 --> 00:41:05,670
therapy you have to do the crypto down

00:41:04,380 --> 00:41:09,300
there if you want to get the benefits of

00:41:05,670 --> 00:41:11,160
TSO and stuff like that so now that was

00:41:09,300 --> 00:41:13,230
the comment about crypto being in the

00:41:11,160 --> 00:41:14,850
holiday and then you know other

00:41:13,230 --> 00:41:16,380
protocols when when you doing a

00:41:14,850 --> 00:41:17,940
pass-through and you're creating like an

00:41:16,380 --> 00:41:20,010
interest in from structure level

00:41:17,940 --> 00:41:22,950
security it will all have to happen in

00:41:20,010 --> 00:41:24,600
the husband where your VM is getting a

00:41:22,950 --> 00:41:27,140
packet which is already decrypted and

00:41:24,600 --> 00:41:30,200
handed over

00:41:27,140 --> 00:41:32,299
but does it does it actually help yeah

00:41:30,200 --> 00:41:35,180
we have to be like a bump are you do you

00:41:32,299 --> 00:41:37,609
allow the gentleman to ask a question or

00:41:35,180 --> 00:41:39,380
we I'll come on we talked about Verdi oh

00:41:37,609 --> 00:41:40,880
how can we not let my creative chances

00:41:39,380 --> 00:41:42,680
should I give him a chance to okay all

00:41:40,880 --> 00:41:47,239
right you can what you could say

00:41:42,680 --> 00:41:49,190
something yeah my question would be like

00:41:47,239 --> 00:41:52,099
bunch of issues that you discussed like

00:41:49,190 --> 00:41:53,900
the this big fixed assignment of

00:41:52,099 --> 00:41:58,579
resources that the issue that you have

00:41:53,900 --> 00:42:00,769
is we have and stuff like that so do you

00:41:58,579 --> 00:42:03,559
really have to throw out all of all the

00:42:00,769 --> 00:42:06,529
way through IV to get that maybe maybe

00:42:03,559 --> 00:42:08,720
you could add you know the PCI spec new

00:42:06,529 --> 00:42:11,239
capabilities that it let you add and

00:42:08,720 --> 00:42:13,400
remove the functions on dynamic list

00:42:11,239 --> 00:42:16,400
because there are some advantages like

00:42:13,400 --> 00:42:19,400
HIV at least to the spec so it it lets

00:42:16,400 --> 00:42:22,579
us find out okay this is where this is

00:42:19,400 --> 00:42:26,239
safe to access this is where how you

00:42:22,579 --> 00:42:28,369
reset this thing well so like the point

00:42:26,239 --> 00:42:30,049
of issues of the PCI is small but yeah

00:42:28,369 --> 00:42:34,099
essentially with the way the PCIe spec

00:42:30,049 --> 00:42:36,920
press wherever you set up is you can go

00:42:34,099 --> 00:42:39,650
to a number or a nonzero value or you

00:42:36,920 --> 00:42:42,019
can go to a zero value so if you want to

00:42:39,650 --> 00:42:48,680
take take your number of like EF from

00:42:42,019 --> 00:42:51,460
four to five well you think pick and PCI

00:42:48,680 --> 00:42:54,490
suits back which yes

00:42:51,460 --> 00:42:56,440
or get away from it's very easy Talia

00:42:54,490 --> 00:42:57,880
PJs well you can compromise it to some

00:42:56,440 --> 00:43:00,940
to our compromise with it to some extent

00:42:57,880 --> 00:43:03,220
alright guys we got a few minutes before

00:43:00,940 --> 00:43:04,960
pizza so I'm going to cut it off here

00:43:03,220 --> 00:43:05,770
let's give them a run we saw wasn't

00:43:04,960 --> 00:43:06,180
going to be here too late

00:43:05,770 --> 00:43:09,410
[Applause]

00:43:06,180 --> 00:43:09,410

YouTube URL: https://www.youtube.com/watch?v=PmwOKSgwHtk


