Title: Netdev 2.1 IoT MAC layers, hdr compression and routing protocols workshop Chaired by Stefan Schmidt
Publication date: 2017-06-03
Playlist: Netdev 2.1
Description: 
	This workshop chaired by Stefan Schmidt on April the 7th of 2017 at Netdev 2.1 In Montreal tries to identify generic requirements for the networking subsystem for IoT and initiates the process of addressing the gaps found. 

The workshop encompass related MAC layers, networking protocols, adaptation layers, header compression, routing protocols and application layers.

Content at: https://www.netdevconf.org/2.1/session.html?schmidt
Captions: 
	00:00:03,680 --> 00:00:09,960
yes a lot of money so on the afternoon

00:00:07,919 --> 00:00:12,590
of the last days I'm quite happy to see

00:00:09,960 --> 00:00:16,320
quite a few people still around here so

00:00:12,590 --> 00:00:17,910
this is a workshop together with Michael

00:00:16,320 --> 00:00:20,220
and Alexander we talked a little bit

00:00:17,910 --> 00:00:22,710
about this stuff here doing the well

00:00:20,220 --> 00:00:25,250
ioki space so mostly in the things that

00:00:22,710 --> 00:00:27,449
are doing low-power wireless

00:00:25,250 --> 00:00:29,160
technologies and stuff like that so not

00:00:27,449 --> 00:00:33,450
really the things you are used to hear

00:00:29,160 --> 00:00:35,190
about here so this little bit of agenda

00:00:33,450 --> 00:00:38,250
for today so I will start with a small

00:00:35,190 --> 00:00:42,210
introduction then ever go over some

00:00:38,250 --> 00:00:43,980
slides for ipv6 over Bluetooth I have a

00:00:42,210 --> 00:00:46,050
doozy talk here but the slides are

00:00:43,980 --> 00:00:47,789
initially done from from Louise but he's

00:00:46,050 --> 00:00:51,750
not able to attend here so I'm going to

00:00:47,789 --> 00:00:53,399
stand in for him so be there with me

00:00:51,750 --> 00:00:55,079
because I'm not really into the Google

00:00:53,399 --> 00:00:58,260
stuff here but I will try my best to

00:00:55,079 --> 00:01:00,449
explain the slides here after that we

00:00:58,260 --> 00:01:02,489
talked a little bit about national ink

00:01:00,449 --> 00:01:05,369
establishment that the specification

00:01:02,489 --> 00:01:07,470
coming out of C I guess it's not an RFC

00:01:05,369 --> 00:01:09,180
and it's unclear if it ever will be but

00:01:07,470 --> 00:01:11,280
it's something that might be needed for

00:01:09,180 --> 00:01:13,500
for the things that I can never talk

00:01:11,280 --> 00:01:16,140
about that now so that Michael will talk

00:01:13,500 --> 00:01:17,670
about routing this kind of slotting

00:01:16,140 --> 00:01:22,950
networks that are available there your

00:01:17,670 --> 00:01:26,549
note moving around and so on so yeah so

00:01:22,950 --> 00:01:28,170
such things so it C is a bit alien if I

00:01:26,549 --> 00:01:30,570
listen to all the other topics I've seen

00:01:28,170 --> 00:01:32,520
you so far but all about performance and

00:01:30,570 --> 00:01:34,259
offloading stuff like that data center

00:01:32,520 --> 00:01:38,369
so we are coming from a completely

00:01:34,259 --> 00:01:39,780
different angle here so we try to use

00:01:38,369 --> 00:01:42,590
this workshop there's a little bit of

00:01:39,780 --> 00:01:44,909
awareness and what we are working on and

00:01:42,590 --> 00:01:45,360
things that we might can work together

00:01:44,909 --> 00:01:47,340
on

00:01:45,360 --> 00:01:49,500
or maybe infrastructure we we could use

00:01:47,340 --> 00:01:51,360
from you guys or something we might need

00:01:49,500 --> 00:01:54,270
to bring to the kernel to support our

00:01:51,360 --> 00:01:56,520
own needs here so it's really a little

00:01:54,270 --> 00:01:59,040
bit of an itch right now but the Araki

00:01:56,520 --> 00:02:00,990
stuff is exploding and it will come back

00:01:59,040 --> 00:02:03,090
to networking protocols at some point as

00:02:00,990 --> 00:02:04,710
well you just need to filter out all the

00:02:03,090 --> 00:02:06,450
marketing staff and surround to really

00:02:04,710 --> 00:02:08,869
bring it down to the to the interesting

00:02:06,450 --> 00:02:08,869
bits here

00:02:09,190 --> 00:02:14,450
so a lot of the networking protocols

00:02:12,740 --> 00:02:16,760
that are around in the LT space are

00:02:14,450 --> 00:02:18,950
really vendor specific so they often

00:02:16,760 --> 00:02:20,990
don't even use IP e and they just has

00:02:18,950 --> 00:02:23,510
their own solutions try to lock the

00:02:20,990 --> 00:02:25,400
customer in and surrond what we are

00:02:23,510 --> 00:02:28,310
trying to do here is ignoring all this

00:02:25,400 --> 00:02:29,900
we really try to focus on specifications

00:02:28,310 --> 00:02:31,580
that are available in the public so

00:02:29,900 --> 00:02:33,650
people can just go there I look at them

00:02:31,580 --> 00:02:35,450
download them and try to implement the

00:02:33,650 --> 00:02:38,480
census things so most of the things are

00:02:35,450 --> 00:02:40,670
based on are typically ITF maybe other

00:02:38,480 --> 00:02:44,300
things but we really want to avoid all

00:02:40,670 --> 00:02:46,100
the the consortium so you have to go and

00:02:44,300 --> 00:02:48,440
pay a lot of money to just look at the

00:02:46,100 --> 00:02:51,890
specification and get them the devices

00:02:48,440 --> 00:02:54,860
certified in the end I mean you could

00:02:51,890 --> 00:02:56,900
want to get a summary here really

00:02:54,860 --> 00:03:01,100
bringing ideas and cakes all the way

00:02:56,900 --> 00:03:02,840
down to the center so the subsystems he

00:03:01,100 --> 00:03:05,380
has currently in the kernels that are

00:03:02,840 --> 00:03:09,730
kind of related to this our routines

00:03:05,380 --> 00:03:13,610
there's work going on for blue 2006 a

00:03:09,730 --> 00:03:15,890
sorry ipv6 over blue tees and there's

00:03:13,610 --> 00:03:17,600
also glucose mesh coming up I don't

00:03:15,890 --> 00:03:19,940
really have much details on that because

00:03:17,600 --> 00:03:22,010
that's still a closed specification by

00:03:19,940 --> 00:03:23,810
bayi lucu stick but I hope that will

00:03:22,010 --> 00:03:24,920
come out whatever this year next year or

00:03:23,810 --> 00:03:27,650
something like that it could be

00:03:24,920 --> 00:03:29,870
interesting as well and then we are 15.4

00:03:27,650 --> 00:03:31,550
subsystems that something Alexander and

00:03:29,870 --> 00:03:33,680
myself are maintaining in the kernel so

00:03:31,550 --> 00:03:37,459
that is really short-range low-power

00:03:33,680 --> 00:03:38,989
wireless has a small and cute size we

00:03:37,459 --> 00:03:41,600
really have to adapt to make sure that

00:03:38,989 --> 00:03:43,580
you can actually an IP over and stuff

00:03:41,600 --> 00:03:46,100
like that so that is what fixed open

00:03:43,580 --> 00:03:48,320
initially comes came from from the

00:03:46,100 --> 00:03:49,760
system of for specification what what

00:03:48,320 --> 00:03:52,190
the ITF was trying to do there was

00:03:49,760 --> 00:03:55,040
trying to bring the normal IP version 6

00:03:52,190 --> 00:03:58,340
protocol over this kind of small limited

00:03:55,040 --> 00:04:00,290
links with in this case for example 127

00:03:58,340 --> 00:04:01,700
by thousand and Q so that's the

00:04:00,290 --> 00:04:03,800
adaptation they are bringing in and by

00:04:01,700 --> 00:04:05,510
now they are going for a lot more link

00:04:03,800 --> 00:04:09,290
layer technologies as some slides about

00:04:05,510 --> 00:04:11,570
them at the end and then we have ripple

00:04:09,290 --> 00:04:13,910
as a routing protocol for these kind of

00:04:11,570 --> 00:04:15,620
lost networks and then we have the I'm

00:04:13,910 --> 00:04:17,450
strong implementation for Michael here

00:04:15,620 --> 00:04:19,370
that was running in user space and that

00:04:17,450 --> 00:04:21,510
is actually trying to make sure that all

00:04:19,370 --> 00:04:24,240
the notes find each other and I

00:04:21,510 --> 00:04:28,830
two packets and form kind of summation

00:04:24,240 --> 00:04:34,920
mesh networks here okay so starting with

00:04:28,830 --> 00:04:37,880
the bluetooth part the RC you can see

00:04:34,920 --> 00:04:40,470
here that was the adaptation layer

00:04:37,880 --> 00:04:43,350
specified force abilities to bring IP

00:04:40,470 --> 00:04:46,140
version 6 over it it's really close to

00:04:43,350 --> 00:04:48,150
what the patient layer is for system up

00:04:46,140 --> 00:04:50,610
for they have some some differences here

00:04:48,150 --> 00:04:53,130
and that's why we go into the details so

00:04:50,610 --> 00:04:55,380
that is the they have some 48-bit MAC

00:04:53,130 --> 00:04:57,630
address that is different from what he

00:04:55,380 --> 00:04:59,850
has been fixed in look for so they're

00:04:57,630 --> 00:05:03,060
splitting up to make address to to build

00:04:59,850 --> 00:05:05,700
up the UE 64 and they're just splitting

00:05:03,060 --> 00:05:07,080
up with first three bytes then to start

00:05:05,700 --> 00:05:08,640
heading in between and then glue the

00:05:07,080 --> 00:05:12,630
last three buds to putting it all

00:05:08,640 --> 00:05:18,630
together here that is basically the the

00:05:12,630 --> 00:05:20,910
core point one part of pollutants here

00:05:18,630 --> 00:05:24,120
is that you history have to keep in mind

00:05:20,910 --> 00:05:26,580
that it's a star topology that will

00:05:24,120 --> 00:05:28,410
hopefully change this mesh but as I said

00:05:26,580 --> 00:05:30,810
I don't have much details on that but at

00:05:28,410 --> 00:05:32,610
the moment if you use a given six over

00:05:30,810 --> 00:05:35,550
Bluetooth it's a star topology and

00:05:32,610 --> 00:05:37,470
central that is in blue to stone the

00:05:35,550 --> 00:05:39,750
central element that does all the active

00:05:37,470 --> 00:05:42,240
scanning and other authentication stuff

00:05:39,750 --> 00:05:44,130
like that that is kind of the border

00:05:42,240 --> 00:05:46,200
route on the scenario and then you have

00:05:44,130 --> 00:05:48,660
all these smaller nodes but all of them

00:05:46,200 --> 00:05:50,400
are coming back to the to the central

00:05:48,660 --> 00:05:52,140
point to the water route on doing all

00:05:50,400 --> 00:05:54,210
the communication over that so that also

00:05:52,140 --> 00:05:56,070
means that you don't have any direct

00:05:54,210 --> 00:05:58,740
connection between the nodes we don't

00:05:56,070 --> 00:06:00,540
have any useful the link local address

00:05:58,740 --> 00:06:02,300
or something like that they all go over

00:06:00,540 --> 00:06:05,660
the central node into all the

00:06:02,300 --> 00:06:05,660
communication all of that

00:06:10,410 --> 00:06:17,740
yeah that is basically why I said

00:06:14,470 --> 00:06:19,810
already so you have you can use

00:06:17,740 --> 00:06:22,479
different mechanisms like neighbor

00:06:19,810 --> 00:06:24,370
advertisin stuff like that to make sure

00:06:22,479 --> 00:06:26,650
that the addresses are learned from the

00:06:24,370 --> 00:06:28,479
central node but it all comes back to

00:06:26,650 --> 00:06:31,660
the case that they have to go over the

00:06:28,479 --> 00:06:34,030
central node and once he has something

00:06:31,660 --> 00:06:36,580
like mesh and you're able to just do all

00:06:34,030 --> 00:06:38,710
the hopping from one node to another and

00:06:36,580 --> 00:06:40,539
that might be really a bit more more

00:06:38,710 --> 00:06:42,310
tricky for for you to actually handle

00:06:40,539 --> 00:06:44,199
that and I expect that there might be in

00:06:42,310 --> 00:06:46,150
another Ashley coming up for that and

00:06:44,199 --> 00:06:48,370
that would mean that there need to be a

00:06:46,150 --> 00:06:50,039
lot of to be done in the kernel here so

00:06:48,370 --> 00:06:52,360
for all the things you can see here we

00:06:50,039 --> 00:06:54,070
the most of most of the things are

00:06:52,360 --> 00:06:55,960
actually in the mainline kernel just

00:06:54,070 --> 00:06:57,840
recently we've got another size Tetris

00:06:55,960 --> 00:07:00,820
to fix some of the corner cases and

00:06:57,840 --> 00:07:04,289
there is more work to do there but it's

00:07:00,820 --> 00:07:08,740
actually getting the rudder action on

00:07:04,289 --> 00:07:12,130
one of the things Luis was trying was

00:07:08,740 --> 00:07:14,770
wanted to bring up here is that he might

00:07:12,130 --> 00:07:17,080
has a need for a six load ton network

00:07:14,770 --> 00:07:20,620
driver the way he explained it to me

00:07:17,080 --> 00:07:23,169
that all the Austin authorization and

00:07:20,620 --> 00:07:25,500
all the other link layer two things

00:07:23,169 --> 00:07:28,389
Bluetooth has to do in a special way

00:07:25,500 --> 00:07:29,979
might be quite complex to do in a chrome

00:07:28,389 --> 00:07:31,870
in the corner side you could do it

00:07:29,979 --> 00:07:34,090
obviously but it might not be the right

00:07:31,870 --> 00:07:36,970
place or we might not want to maintain

00:07:34,090 --> 00:07:40,120
it there and so he was arguing to me

00:07:36,970 --> 00:07:41,740
that might be better to lease it in the

00:07:40,120 --> 00:07:43,870
Bluetooth daemon exhaust bass doing all

00:07:41,740 --> 00:07:46,060
that and then has a six low tunnel

00:07:43,870 --> 00:07:48,520
network driver which actually can then

00:07:46,060 --> 00:07:50,470
use all the six loca and compression

00:07:48,520 --> 00:07:52,900
techniques he has already in the kernel

00:07:50,470 --> 00:07:54,220
that's something that is up for

00:07:52,900 --> 00:07:57,669
discussion I think if you want to do

00:07:54,220 --> 00:07:59,680
that or not you just wanted me to bring

00:07:57,669 --> 00:08:01,150
it up here so if you have any opinion on

00:07:59,680 --> 00:08:04,570
that just let me know if you think it's

00:08:01,150 --> 00:08:08,530
wrong idea or it's just a good idea just

00:08:04,570 --> 00:08:11,260
let me know about it some other saying

00:08:08,530 --> 00:08:14,650
that related to that is that not all of

00:08:11,260 --> 00:08:17,710
the N word and I am iOS devices are able

00:08:14,650 --> 00:08:20,669
to reuse these they are to cap protocol

00:08:17,710 --> 00:08:20,669
to actually do the

00:08:20,760 --> 00:08:26,110
good excellent stuff over it so they

00:08:24,340 --> 00:08:27,910
might have to fall back to the the gap

00:08:26,110 --> 00:08:29,980
for the cove it was in a different way

00:08:27,910 --> 00:08:31,960
in builders doing it so there might have

00:08:29,980 --> 00:08:35,140
to to do that over the gap protocol as

00:08:31,960 --> 00:08:36,700
well but there I'm sailing to understand

00:08:35,140 --> 00:08:40,770
the details because I'm not that much

00:08:36,700 --> 00:08:45,070
into duties here okay

00:08:40,770 --> 00:08:47,410
yeah the context earth good and this I

00:08:45,070 --> 00:08:49,720
will hand over to Alexander to talk a

00:08:47,410 --> 00:08:53,920
little bit about the Emily experiences

00:08:49,720 --> 00:09:02,890
having by developing it so that one for

00:08:53,920 --> 00:09:05,230
the next round so hello everybody my

00:09:02,890 --> 00:09:09,520
name is Alex and Owen and I currently

00:09:05,230 --> 00:09:14,710
work at Pendleton X as a student and I

00:09:09,520 --> 00:09:19,680
did my final exam about money about an M

00:09:14,710 --> 00:09:26,170
le ma implementation folly not and added

00:09:19,680 --> 00:09:28,060
this edge ahora y mine so what and then

00:09:26,170 --> 00:09:32,080
Emily stands for mentioning

00:09:28,060 --> 00:09:37,060
establishment and it's currently LTS

00:09:32,080 --> 00:09:41,170
craft which is for the 6lowpan link

00:09:37,060 --> 00:09:45,070
layer 802 15 for so there's no Bluetooth

00:09:41,170 --> 00:09:49,980
specific specifications for and original

00:09:45,070 --> 00:09:55,600
me it's developed by Big B Big B is some

00:09:49,980 --> 00:09:59,670
vendor specific vendor some upper layer

00:09:55,600 --> 00:10:04,390
protocol developed for 800 215 for and

00:09:59,670 --> 00:10:08,940
they moved the layer stack on 6lowpan so

00:10:04,390 --> 00:10:13,770
the winner is to seek PID and Emily was

00:10:08,940 --> 00:10:19,360
one protocol which they were developed

00:10:13,770 --> 00:10:24,460
but I IDF it's udp-based and currently

00:10:19,360 --> 00:10:28,270
it's max max as that in the IETF data

00:10:24,460 --> 00:10:32,230
tracker so as the key ID IP doesn't

00:10:28,270 --> 00:10:32,800
follow to make some work anymore on this

00:10:32,230 --> 00:10:35,769
and

00:10:32,800 --> 00:10:39,279
then it's moved to fix no working group

00:10:35,769 --> 00:10:42,970
but there is no activity and so far I

00:10:39,279 --> 00:10:49,600
know it's already topped so it's a

00:10:42,970 --> 00:10:55,029
question of if this protocol will will

00:10:49,600 --> 00:11:01,990
be ever used but it's it's used in VIP

00:10:55,029 --> 00:11:07,149
and also this sweat specification sweat

00:11:01,990 --> 00:11:10,060
this from the swept coupe that found a

00:11:07,149 --> 00:11:13,029
nest labs which some home automation if

00:11:10,060 --> 00:11:17,620
you about about the nest left and it's

00:11:13,029 --> 00:11:21,490
now Google and they named it ml e

00:11:17,620 --> 00:11:25,149
there's a open-source implementations is

00:11:21,490 --> 00:11:27,700
that specification is closed but there

00:11:25,149 --> 00:11:31,420
is a open source implementation it's a

00:11:27,700 --> 00:11:38,170
little bit very weird and they named it

00:11:31,420 --> 00:11:40,690
ml e but I saw some difference between

00:11:38,170 --> 00:11:43,050
the open sweat implementation and the

00:11:40,690 --> 00:11:46,029
IETF draft and it was a little bit funny

00:11:43,050 --> 00:11:49,480
I try to fix it in the open sweat

00:11:46,029 --> 00:11:53,070
implementation and then they talk to me

00:11:49,480 --> 00:11:57,180
it's a fork and it works a little bit

00:11:53,070 --> 00:12:03,670
different and my name next question mark

00:11:57,180 --> 00:12:07,209
on the open sweat mailing list so I know

00:12:03,670 --> 00:12:07,899
now Emily is a fork of our ITF strata

00:12:07,209 --> 00:12:11,560
creation

00:12:07,899 --> 00:12:15,850
what else is a fork so maybe they also

00:12:11,560 --> 00:12:20,500
Fork is a Copeland but no they would not

00:12:15,850 --> 00:12:26,880
do it but I think I didn't look at it

00:12:20,500 --> 00:12:26,880
but I think only Emily is a fork and

00:12:27,959 --> 00:12:37,449
yeah it's a little bit confusing so but

00:12:33,610 --> 00:12:42,100
love Emily Emily has three major tasks

00:12:37,449 --> 00:12:46,760
that at first link establishment so if

00:12:42,100 --> 00:12:51,350
you can mention from mesh topology and

00:12:46,760 --> 00:12:56,800
you want to join this network you need

00:12:51,350 --> 00:12:59,920
to exchange at first some security

00:12:56,800 --> 00:13:01,130
parameters for the link layer security

00:12:59,920 --> 00:13:06,110
feed

00:13:01,130 --> 00:13:10,910
and this yeah the link layer security

00:13:06,110 --> 00:13:17,630
feed come from I Triple E but they have

00:13:10,910 --> 00:13:21,410
no full solution for to exchange the

00:13:17,630 --> 00:13:25,930
security parameters in their standard so

00:13:21,410 --> 00:13:32,960
they moved it to the other layers and

00:13:25,930 --> 00:13:34,040
another link were major Chavez a link

00:13:32,960 --> 00:13:37,100
quality detection

00:13:34,040 --> 00:13:40,910
this is how is the link quality to a

00:13:37,100 --> 00:13:46,190
neighbor of good or bad we need yet at

00:13:40,910 --> 00:13:49,900
least for routing protocols like what

00:13:46,190 --> 00:13:54,650
Michael will report about whipple and

00:13:49,900 --> 00:13:57,020
the last soft Network pub parameter

00:13:54,650 --> 00:14:00,320
distribution in the six lo pan this

00:13:57,020 --> 00:14:06,170
requires multicast forwarding mission is

00:14:00,320 --> 00:14:09,470
mission isn't but this was a task which

00:14:06,170 --> 00:14:14,540
I was not interested in the course I can

00:14:09,470 --> 00:14:20,510
change some channel or address filtering

00:14:14,540 --> 00:14:23,870
stuff and I didn't did do it the first

00:14:20,510 --> 00:14:27,770
two task was very interesting to solve

00:14:23,870 --> 00:14:31,840
these issues because also the the first

00:14:27,770 --> 00:14:31,840
task because we have currently no

00:14:32,410 --> 00:14:42,320
solution for that I I will explain it

00:14:38,930 --> 00:14:46,460
more about link establishment so link

00:14:42,320 --> 00:14:50,750
establishment if you have a toner 215 4

00:14:46,460 --> 00:14:55,100
6 6 open Network this ml e enabled then

00:14:50,750 --> 00:14:58,370
it accessed it blocks our traffic except

00:14:55,100 --> 00:15:00,440
ma e traffic until the link aesthetician

00:14:58,370 --> 00:15:07,850
to neighbors install

00:15:00,440 --> 00:15:13,640
and if the security parameter exchange

00:15:07,850 --> 00:15:16,910
is not I already talked about that it's

00:15:13,640 --> 00:15:19,820
not solved by HIV but it's not fully

00:15:16,910 --> 00:15:22,670
correct it's not it's not solved for

00:15:19,820 --> 00:15:25,490
peer-to-peer properly they have also a

00:15:22,670 --> 00:15:28,460
star topology which we doesn't support

00:15:25,490 --> 00:15:33,440
right now in Linux and the asset that

00:15:28,460 --> 00:15:37,510
the source but mostly people use the

00:15:33,440 --> 00:15:40,940
peer to peer topology and in tightest

00:15:37,510 --> 00:15:44,690
security parameter exchange they have

00:15:40,940 --> 00:15:48,260
some handshake algorithm with response

00:15:44,690 --> 00:15:51,350
and challenge and some interesting part

00:15:48,260 --> 00:15:55,340
is also that they move the Security

00:15:51,350 --> 00:16:01,000
Suite from the link layer in the upper

00:15:55,340 --> 00:16:04,700
layer so they use the same and the same

00:16:01,000 --> 00:16:08,990
security switch there

00:16:04,700 --> 00:16:13,060
the reasons are because 6lowpan is it

00:16:08,990 --> 00:16:20,240
may it's for small tiny devices which

00:16:13,060 --> 00:16:26,750
this low voice or this versus and they

00:16:20,240 --> 00:16:30,410
want to share some implementation about

00:16:26,750 --> 00:16:32,630
it so the security power meter which

00:16:30,410 --> 00:16:41,000
I'll talk about this is a for encounter

00:16:32,630 --> 00:16:46,070
so all nodes have in their own structure

00:16:41,000 --> 00:16:51,320
access control lists with all neighbors

00:16:46,070 --> 00:16:54,589
and they need to be synced because um if

00:16:51,320 --> 00:16:57,800
you assume if you want to join our mesh

00:16:54,589 --> 00:17:03,770
network and you assume a firm counter of

00:16:57,800 --> 00:17:08,270
0 then you trust all message which came

00:17:03,770 --> 00:17:12,050
at first and it's just a free encounter

00:17:08,270 --> 00:17:14,240
which is always incremented after each

00:17:12,050 --> 00:17:17,449
transmit and

00:17:14,240 --> 00:17:20,630
here comes a frame then it will be

00:17:17,449 --> 00:17:27,049
checked if the frame counter is lower

00:17:20,630 --> 00:17:30,289
and if the it's to a former neighbor

00:17:27,049 --> 00:17:32,899
then it will be dropped because the

00:17:30,289 --> 00:17:42,559
message was already seen on the neighbor

00:17:32,899 --> 00:17:44,870
on the network so the the other task is

00:17:42,559 --> 00:17:48,159
a link quality so MLE

00:17:44,870 --> 00:17:54,770
supports to send out chaotic message

00:17:48,159 --> 00:17:57,500
they name it advertising message and you

00:17:54,770 --> 00:18:02,390
need to know if you want to make some

00:17:57,500 --> 00:18:05,539
link quality measurements then you need

00:18:02,390 --> 00:18:08,990
to transmit before something that

00:18:05,539 --> 00:18:17,149
because you sent out periodic message

00:18:08,990 --> 00:18:22,750
and then you get a more and more mirror

00:18:17,149 --> 00:18:22,750
to the link quality of the neighbor and

00:18:24,520 --> 00:18:32,480
it's also for the directional link

00:18:28,460 --> 00:18:37,279
quality measurements that's for

00:18:32,480 --> 00:18:40,970
detecting other metric links where for

00:18:37,279 --> 00:18:46,309
my point of view to our neighbor the

00:18:40,970 --> 00:18:50,750
link quality can be measured easily but

00:18:46,309 --> 00:18:54,350
in the other direction if the MLA node

00:18:50,750 --> 00:18:57,880
wants to know how the link quality is

00:18:54,350 --> 00:19:01,640
from the FAA neighbor to the node and

00:18:57,880 --> 00:19:07,940
this works easily that's the ml a

00:19:01,640 --> 00:19:10,580
neighbor put in the periodic message the

00:19:07,940 --> 00:19:16,130
link quality value of the energy node

00:19:10,580 --> 00:19:19,789
and then the MA node has the link

00:19:16,130 --> 00:19:22,909
quality of booth direction well and this

00:19:19,789 --> 00:19:26,840
is because routing protocols like web

00:19:22,909 --> 00:19:28,220
will use be depth you speed X be

00:19:26,840 --> 00:19:35,580
external

00:19:28,220 --> 00:19:41,330
connections between the that nodes so

00:19:35,580 --> 00:19:45,990
one of the weird soft issues which have

00:19:41,330 --> 00:19:49,890
MLG F requirement is to reach and select

00:19:45,990 --> 00:19:53,160
meketa information on UDP level so I did

00:19:49,890 --> 00:19:56,910
a user space implementation and if you

00:19:53,160 --> 00:20:00,860
get a UDP socket you have no possibility

00:19:56,910 --> 00:20:07,440
to access the mech header information

00:20:00,860 --> 00:20:10,500
normally and but because the reason that

00:20:07,440 --> 00:20:13,140
the security's suite of the link layer

00:20:10,500 --> 00:20:16,560
is moved into the application layer and

00:20:13,140 --> 00:20:21,690
they need to some information from there

00:20:16,560 --> 00:20:24,410
and my solution is to put it in the

00:20:21,690 --> 00:20:27,240
axillary data and the controller message

00:20:24,410 --> 00:20:31,860
missile system called micro message and

00:20:27,240 --> 00:20:37,310
sent message and they exist out already

00:20:31,860 --> 00:20:43,190
a socket option for any radius attribute

00:20:37,310 --> 00:20:49,470
ipv6 we see packet info and it's also

00:20:43,190 --> 00:20:53,790
defined from ITF to get the hop limit

00:20:49,470 --> 00:20:55,550
and source and destination address but I

00:20:53,790 --> 00:21:00,720
put a simple

00:20:55,550 --> 00:21:05,910
under core and a true for layer 2 for

00:21:00,720 --> 00:21:08,430
the mech and I implemented that this

00:21:05,910 --> 00:21:15,210
attribute is link layer specific so you

00:21:08,430 --> 00:21:19,580
need to first detect what link layer it

00:21:15,210 --> 00:21:26,520
is and then in the attribute it stands

00:21:19,580 --> 00:21:28,800
which struct you can cast on it and I'm

00:21:26,520 --> 00:21:33,450
not happy with this solution because I

00:21:28,800 --> 00:21:37,890
already see issues because if you have

00:21:33,450 --> 00:21:41,030
two 6lowpan interfaces into one

00:21:37,890 --> 00:21:41,030
namespace and

00:21:41,140 --> 00:21:50,380
you have connect I I P connection from

00:21:48,490 --> 00:21:55,000
one interface to the another interface

00:21:50,380 --> 00:21:58,179
it will not reach the max not reach the

00:21:55,000 --> 00:22:03,490
Mac layer yeah

00:21:58,179 --> 00:22:07,830
but we do then I don't know I think it's

00:22:03,490 --> 00:22:12,220
the right solution to make this

00:22:07,830 --> 00:22:16,809
accelerate data because the requirements

00:22:12,220 --> 00:22:19,870
in ml e it's it's depending on the every

00:22:16,809 --> 00:22:23,049
message type and then the user space

00:22:19,870 --> 00:22:27,460
need to decide what make header

00:22:23,049 --> 00:22:34,179
information it will be set and this is

00:22:27,460 --> 00:22:40,559
not only a issue in MLA because 6lowpan

00:22:34,179 --> 00:22:45,760
does many compassion and they will ever

00:22:40,559 --> 00:22:49,270
receive information sometimes from the

00:22:45,760 --> 00:22:55,240
Micaiah med neck in header to

00:22:49,270 --> 00:23:02,230
reconstruct this information so my final

00:22:55,240 --> 00:23:05,679
opinion about ma e now it's I think the

00:23:02,230 --> 00:23:14,500
link establishment which solve the frame

00:23:05,679 --> 00:23:16,780
counter issue in the Security Suite it's

00:23:14,500 --> 00:23:24,390
already a solution for that

00:23:16,780 --> 00:23:30,870
but but when we think about threat and

00:23:24,390 --> 00:23:37,510
traffic location and it's already it's

00:23:30,870 --> 00:23:42,820
incompatible with the IGF draft it will

00:23:37,510 --> 00:23:47,140
not not work and so my message is more

00:23:42,820 --> 00:23:51,220
if you want to if you buy sweat enabled

00:23:47,140 --> 00:23:53,720
device and you think it's like so it's

00:23:51,220 --> 00:23:56,420
like it's 6lowpan

00:23:53,720 --> 00:23:59,270
and I want to connect it within my Linux

00:23:56,420 --> 00:24:02,660
machine it doesn't work directly because

00:23:59,270 --> 00:24:05,770
the traffic location and the Emily stuff

00:24:02,660 --> 00:24:10,400
which they do there so they use a lot of

00:24:05,770 --> 00:24:16,960
open protocols I took a year 800 254

00:24:10,400 --> 00:24:21,110
6lowpan and then nothing works because

00:24:16,960 --> 00:24:26,990
Emmaline's which need to be handled

00:24:21,110 --> 00:24:28,670
somehow in the application here so the

00:24:26,990 --> 00:24:30,170
four encounter issue is sort of the

00:24:28,670 --> 00:24:34,130
still synchronization with all night

00:24:30,170 --> 00:24:37,010
neighbors but we have a new issue then

00:24:34,130 --> 00:24:41,200
because if the flu encounter will

00:24:37,010 --> 00:24:44,240
overflow then we need a new yorky and

00:24:41,200 --> 00:24:49,940
this requires a key distribution

00:24:44,240 --> 00:24:53,870
protocol which is you know the access

00:24:49,940 --> 00:24:59,120
the I Triple E 802 15 9 working group

00:24:53,870 --> 00:25:03,680
which working order but we nee we need

00:24:59,120 --> 00:25:11,120
to look which standard will be used

00:25:03,680 --> 00:25:14,570
outside there and for for threat ml ye I

00:25:11,120 --> 00:25:18,170
can think about it to to use the open

00:25:14,570 --> 00:25:22,040
sweat implementation so they have it's

00:25:18,170 --> 00:25:25,430
written in C++ and they have some ml e

00:25:22,040 --> 00:25:28,700
instance class and maybe I can build

00:25:25,430 --> 00:25:34,580
some for a pair which in a hit from this

00:25:28,700 --> 00:25:38,920
class and over Y to the methods to make

00:25:34,580 --> 00:25:43,520
my own bindings to set up the Linux

00:25:38,920 --> 00:25:49,090
6lowpan and I Triple E 800 215 for neck

00:25:43,520 --> 00:25:52,460
so so ml Eve with one R as some given in

00:25:49,090 --> 00:25:58,300
incident and maybe it we can also talk

00:25:52,460 --> 00:26:01,610
to the sweat devices and I I looked at

00:25:58,300 --> 00:26:04,280
slash Emily and they doesn't use IP

00:26:01,610 --> 00:26:06,910
physics neighbor discovery day they

00:26:04,280 --> 00:26:13,480
combined it somehow with Emory

00:26:06,910 --> 00:26:18,100
but I have no no I didn't looked into

00:26:13,480 --> 00:26:21,940
the spec under under mailing list they

00:26:18,100 --> 00:26:27,820
offer me to be a member of the red group

00:26:21,940 --> 00:26:30,610
but it cost money and I need to find the

00:26:27,820 --> 00:26:35,610
area and then I don't know what I can

00:26:30,610 --> 00:26:40,810
publish more to the kernel and making

00:26:35,610 --> 00:26:44,230
open source stuff and yeah i also bought

00:26:40,810 --> 00:26:48,130
in my exam m LED sector

00:26:44,230 --> 00:26:52,150
I only saw picture

00:26:48,130 --> 00:26:55,450
screenshot about it that thread opens

00:26:52,150 --> 00:26:58,990
let's have something also but they

00:26:55,450 --> 00:27:01,840
didn't release it to Wireshark so by a

00:26:58,990 --> 00:27:07,090
fact effector is for making the craft

00:27:01,840 --> 00:27:12,360
graphical analyzers and I think I will

00:27:07,090 --> 00:27:20,520
publish them there tool then we need to

00:27:12,360 --> 00:27:20,520
look more into the MLG stuff so that was

00:27:23,400 --> 00:27:28,390
I'm going to use this one that will work

00:27:25,690 --> 00:27:30,430
just click so any questions about any of

00:27:28,390 --> 00:27:32,020
the things and just leave it in the

00:27:30,430 --> 00:27:33,670
middle of it so we can flip to the next

00:27:32,020 --> 00:27:37,020
topic afterwards if you have anything

00:27:33,670 --> 00:27:37,020
just enough now

00:27:40,650 --> 00:27:52,890
hi so my name is Michael Richardson I I

00:27:50,280 --> 00:27:56,640
live in Ottawa those as a not a day trip

00:27:52,890 --> 00:27:58,770
but could be and so I'm going to talk a

00:27:56,640 --> 00:28:01,680
little bit about some of the routing and

00:27:58,770 --> 00:28:05,220
layer three layer three to layer two

00:28:01,680 --> 00:28:07,140
issues and challenges in doing some of

00:28:05,220 --> 00:28:07,740
this stuff so Alex has talked a lot

00:28:07,140 --> 00:28:09,780
about you know

00:28:07,740 --> 00:28:10,770
MLE things and some of his challenges

00:28:09,780 --> 00:28:14,730
and I think he's going to talk again

00:28:10,770 --> 00:28:16,740
later today about his test bed right so

00:28:14,730 --> 00:28:18,570
that should be actually very interesting

00:28:16,740 --> 00:28:20,850
too and you may have also heard that

00:28:18,570 --> 00:28:26,690
there's a lot of challenges we have with

00:28:20,850 --> 00:28:29,490
a variety of industry consortium who

00:28:26,690 --> 00:28:31,500
like in the xdp space you know and all

00:28:29,490 --> 00:28:32,850
those other things they want to do their

00:28:31,500 --> 00:28:36,150
own thing and not tell anyone about it

00:28:32,850 --> 00:28:38,700
and then somehow want to put code in the

00:28:36,150 --> 00:28:41,700
kernels that do things that they won't

00:28:38,700 --> 00:28:43,860
tell us what it does so it's across the

00:28:41,700 --> 00:28:47,010
board but basically we're trying to

00:28:43,860 --> 00:28:51,420
bring standards open standards to the

00:28:47,010 --> 00:28:54,120
lln space so a little bit high level

00:28:51,420 --> 00:28:58,650
stuff what is an lln it's a low-power

00:28:54,120 --> 00:29:00,630
and lossy network um they look where's

00:28:58,650 --> 00:29:06,000
the button that makes the laser pointer

00:29:00,630 --> 00:29:10,850
go that one yes so arrangement of nodes

00:29:06,000 --> 00:29:13,710
in space they have some circle of radio

00:29:10,850 --> 00:29:16,559
communications you can see a big circle

00:29:13,710 --> 00:29:18,420
here this number two rows node has a

00:29:16,559 --> 00:29:20,840
here this slide was stolen from a

00:29:18,420 --> 00:29:23,700
presentation last week where the guy is

00:29:20,840 --> 00:29:25,380
upset because for some reason all of

00:29:23,700 --> 00:29:26,640
these guys have connected to number

00:29:25,380 --> 00:29:29,010
three and he'd like some of them to

00:29:26,640 --> 00:29:31,770
connect to number two and he describes a

00:29:29,010 --> 00:29:32,910
protocol where that could happen that's

00:29:31,770 --> 00:29:34,290
not so important it's about he had a

00:29:32,910 --> 00:29:36,120
really good slide to some nice pictures

00:29:34,290 --> 00:29:40,530
and colors to explain the nice thing and

00:29:36,120 --> 00:29:42,480
I'm lazy so I stole this line so but the

00:29:40,530 --> 00:29:47,670
important thing is that these networks

00:29:42,480 --> 00:29:50,970
are slow 250 kilobits per second that's

00:29:47,670 --> 00:29:53,730
a kill oh it's not terabits

00:29:50,970 --> 00:29:59,780
okay some of you who are thinking about

00:29:53,730 --> 00:30:02,070
that they go down as slow as 9600 baud

00:29:59,780 --> 00:30:07,140
okay

00:30:02,070 --> 00:30:11,490
and people are deploying a 6lowpan on

00:30:07,140 --> 00:30:14,310
things like BACnet which does run at six

00:30:11,490 --> 00:30:19,140
9600 baud and that's multi drop over

00:30:14,310 --> 00:30:21,720
9600 baud and the air conditioning vents

00:30:19,140 --> 00:30:25,020
up there above our head are probably

00:30:21,720 --> 00:30:27,450
connected by bacnet okay because

00:30:25,020 --> 00:30:30,180
buildings don't innovate much they last

00:30:27,450 --> 00:30:32,610
for 30 or 50 years and they don't like

00:30:30,180 --> 00:30:35,940
to run new wiring and apparently these

00:30:32,610 --> 00:30:37,860
guys would like to run ipv6 to the to

00:30:35,940 --> 00:30:39,030
the vents up there so they can do more

00:30:37,860 --> 00:30:42,090
intelligent controlling so they're going

00:30:39,030 --> 00:30:43,860
to replace both the HVAC and the

00:30:42,090 --> 00:30:45,030
controller but not the wiring in between

00:30:43,860 --> 00:30:48,720
and of course they're going to do

00:30:45,030 --> 00:30:50,910
incrementally so so that's the kind of

00:30:48,720 --> 00:30:53,760
speeds are dealing with and the packet

00:30:50,910 --> 00:30:57,650
size is over 15.4 as it's defined today

00:30:53,760 --> 00:31:02,700
is you have time to transmit 127 bytes

00:30:57,650 --> 00:31:04,380
so if you want to transmit 1280 ipv6 you

00:31:02,700 --> 00:31:07,170
have to have a fragmentation protocol at

00:31:04,380 --> 00:31:13,170
layer two and that's what 6lowpan is is

00:31:07,170 --> 00:31:16,230
that mechanism so specifications so

00:31:13,170 --> 00:31:18,050
typically as I said 15.4 is the one of

00:31:16,230 --> 00:31:20,460
the specifications from the I Triple E

00:31:18,050 --> 00:31:25,140
bluetooth has similar characteristics

00:31:20,460 --> 00:31:27,150
and forethought ex back net DECT if

00:31:25,140 --> 00:31:28,380
you've ever especially live in Europe

00:31:27,150 --> 00:31:31,590
and you have a cordless phone it

00:31:28,380 --> 00:31:33,540
probably uses DECT I'm voting on DECT to

00:31:31,590 --> 00:31:36,270
be the winner because the chips are

00:31:33,540 --> 00:31:39,210
pennies a bandwidth is much better than

00:31:36,270 --> 00:31:40,800
9600 and this approach the

00:31:39,210 --> 00:31:42,600
specifications are apparently really

00:31:40,800 --> 00:31:46,860
cheap and easy to implement and there's

00:31:42,600 --> 00:31:49,410
lots of chips but industrial places are

00:31:46,860 --> 00:31:51,150
going with 15.4 and there's good and bad

00:31:49,410 --> 00:31:55,110
reasons and there's another another rep

00:31:51,150 --> 00:31:58,200
of 15.4 expected next year with a faster

00:31:55,110 --> 00:32:01,080
phi and depending on what time of day

00:31:58,200 --> 00:32:04,110
you ask the I Triple E people you might

00:32:01,080 --> 00:32:04,659
get a thousand bytes per frame size or

00:32:04,110 --> 00:32:07,899
you

00:32:04,659 --> 00:32:09,460
get 2,000 bytes in that same time which

00:32:07,899 --> 00:32:12,220
suddenly means you don't need a

00:32:09,460 --> 00:32:12,849
fragmentation protocol so that's kind of

00:32:12,220 --> 00:32:16,119
exciting

00:32:12,849 --> 00:32:19,599
still over 800 megahertz 900 megahertz

00:32:16,119 --> 00:32:21,460
2.4 gigahertz and the 2.4 it uses

00:32:19,599 --> 00:32:24,460
essentially one Wi-Fi channel if you

00:32:21,460 --> 00:32:28,599
like to think of that so I'm going to

00:32:24,460 --> 00:32:31,419
talk about roll typically a network that

00:32:28,599 --> 00:32:32,950
is used in that space is usually a kind

00:32:31,419 --> 00:32:35,049
of a collection a data collection

00:32:32,950 --> 00:32:36,999
network so you have sensors and

00:32:35,049 --> 00:32:39,940
actuators and they talk back to a

00:32:36,999 --> 00:32:44,049
controller the controller might be in

00:32:39,940 --> 00:32:46,029
the cloud or it might it might not but

00:32:44,049 --> 00:32:47,559
basically what role does is it arranges

00:32:46,029 --> 00:32:52,059
the nodes in some kind of a directed

00:32:47,559 --> 00:32:53,889
directed acyclic tree and there's a

00:32:52,059 --> 00:32:55,720
routing a layer 3 routing relationship

00:32:53,889 --> 00:32:59,049
between them and there's some kind of

00:32:55,720 --> 00:33:03,909
backbone and I have an implementation of

00:32:59,049 --> 00:33:08,590
it you see that button right ripple roll

00:33:03,909 --> 00:33:12,479
the roll what is it again the routing

00:33:08,590 --> 00:33:17,229
protocol for LLNS we pronounce it ripple

00:33:12,479 --> 00:33:19,720
and as I said it forms destination

00:33:17,229 --> 00:33:21,999
oriented directed acyclic graph dough

00:33:19,720 --> 00:33:23,919
dag and that's the last time you ever

00:33:21,999 --> 00:33:25,840
expand the acronym again where they're

00:33:23,919 --> 00:33:27,279
just dode eggs from now on and the

00:33:25,840 --> 00:33:29,559
important part is that you can actually

00:33:27,279 --> 00:33:32,979
have multiple of them so while I showed

00:33:29,559 --> 00:33:35,830
one tree you could actually if another

00:33:32,979 --> 00:33:39,359
node in that in that group wanted to see

00:33:35,830 --> 00:33:42,009
if I go back if if this guy loop back

00:33:39,359 --> 00:33:44,320
that button if this guy wanted to

00:33:42,009 --> 00:33:47,409
receive sensors he could create a doe

00:33:44,320 --> 00:33:49,299
tag with arrows pointing to him so you

00:33:47,409 --> 00:33:51,940
can have many of these of these trees

00:33:49,299 --> 00:33:54,580
and they're basically oriented by where

00:33:51,940 --> 00:33:56,940
you want to go to often the place you

00:33:54,580 --> 00:34:00,039
want to go to is colon colon slash zero

00:33:56,940 --> 00:34:04,749
right and that's the doe tag for the

00:34:00,039 --> 00:34:07,020
internet and that's great but and the

00:34:04,749 --> 00:34:09,369
lighting guys are particular

00:34:07,020 --> 00:34:11,230
enthusiastic about this so they created

00:34:09,369 --> 00:34:12,909
this thing called point-to-point RPL

00:34:11,230 --> 00:34:15,369
usually capitalized I screwed that up

00:34:12,909 --> 00:34:17,109
and so they create an additional doe tag

00:34:15,369 --> 00:34:18,370
on top of it which basically connects a

00:34:17,109 --> 00:34:22,150
light switch

00:34:18,370 --> 00:34:24,130
to a light bulb through some other other

00:34:22,150 --> 00:34:26,500
possibly some other intermediate places

00:34:24,130 --> 00:34:29,470
and the light switches are often

00:34:26,500 --> 00:34:32,110
kinetically powered so that means that

00:34:29,470 --> 00:34:33,760
the act of pushing the button down boots

00:34:32,110 --> 00:34:35,830
us system asleep a little

00:34:33,760 --> 00:34:38,970
microcontroller okay

00:34:35,830 --> 00:34:43,180
produces enough power it sends a packet

00:34:38,970 --> 00:34:46,480
hopefully gets an AK and then dies

00:34:43,180 --> 00:34:49,660
because it runs out of power okay and

00:34:46,480 --> 00:34:51,040
and I kid you not this is this is I keep

00:34:49,660 --> 00:34:53,320
wanting to try and order them there's a

00:34:51,040 --> 00:34:55,180
companies out there selling them and and

00:34:53,320 --> 00:34:57,970
there's companies that say they have

00:34:55,180 --> 00:34:59,920
them but so far I haven't gotten anyone

00:34:57,970 --> 00:35:05,500
to actually give me one or show me one

00:34:59,920 --> 00:35:07,540
in real life but they do exist and I you

00:35:05,500 --> 00:35:09,070
know I know people who say they've

00:35:07,540 --> 00:35:11,170
touched them but I have yet to touch

00:35:09,070 --> 00:35:13,270
them myself but I'm still I'm still

00:35:11,170 --> 00:35:16,990
hopeful so just a little bit of

00:35:13,270 --> 00:35:21,130
different so it's reactive if no packets

00:35:16,990 --> 00:35:25,180
flow in the forest then nobody cares if

00:35:21,130 --> 00:35:27,850
the tree is up or down okay we don't try

00:35:25,180 --> 00:35:31,000
to fix the network when nobody needs it

00:35:27,850 --> 00:35:33,490
when if when a packet flows and we go

00:35:31,000 --> 00:35:35,590
whoo I can no longer reach that

00:35:33,490 --> 00:35:39,040
neighbour then we repair the network at

00:35:35,590 --> 00:35:40,780
that point and the idea is that there's

00:35:39,040 --> 00:35:43,660
no point in wasting power doing things

00:35:40,780 --> 00:35:45,430
that for no purpose that's in contrast

00:35:43,660 --> 00:35:47,410
to a bunch of other protocols so so

00:35:45,430 --> 00:35:49,510
Babel which is in the process of

00:35:47,410 --> 00:35:52,350
becoming a full a ETF specification not

00:35:49,510 --> 00:35:55,680
just a not just a informational draft

00:35:52,350 --> 00:35:58,870
very popular in community mesh networks

00:35:55,680 --> 00:36:00,010
it will be used in home net which is

00:35:58,870 --> 00:36:04,390
basically supposed to be plug-and-play

00:36:00,010 --> 00:36:06,880
for your grandma so she can up she can

00:36:04,390 --> 00:36:08,770
now he or she can now you know plug

00:36:06,880 --> 00:36:12,910
things together and still print into the

00:36:08,770 --> 00:36:16,960
day um but it is a it is a proactive

00:36:12,910 --> 00:36:18,670
protocol it regularly says things hey

00:36:16,960 --> 00:36:21,610
I'm here hey I'm here hey I'm here and

00:36:18,670 --> 00:36:24,160
exactly what information is is exchanged

00:36:21,610 --> 00:36:27,340
you know is different whether it's a

00:36:24,160 --> 00:36:29,820
distance vector or like OSPF is a

00:36:27,340 --> 00:36:31,720
basically share the whole database

00:36:29,820 --> 00:36:32,020
wasn't my intention one of the things

00:36:31,720 --> 00:36:32,980
you can

00:36:32,020 --> 00:36:35,080
and you because you have all the

00:36:32,980 --> 00:36:39,400
information is you can equal path Multi

00:36:35,080 --> 00:36:41,290
multi path equal cost multi path and in

00:36:39,400 --> 00:36:42,520
ripple we can't do that okay

00:36:41,290 --> 00:36:44,170
there are people that building

00:36:42,520 --> 00:36:47,490
extensions to do this kind of stuff and

00:36:44,170 --> 00:36:50,590
of course everyone wants to announce it

00:36:47,490 --> 00:36:53,230
so a little too little little more

00:36:50,590 --> 00:36:55,840
detail kind of two modes in ripple one's

00:36:53,230 --> 00:37:00,730
called storing mode and storing mode

00:36:55,840 --> 00:37:03,670
every arm every node has routes to all

00:37:00,730 --> 00:37:08,200
the nodes below it so I think this

00:37:03,670 --> 00:37:12,340
connector there we go so 35 is has a

00:37:08,200 --> 00:37:15,600
route to 45 and a route to 55 so it says

00:37:12,340 --> 00:37:16,720
to get 35 nodes to get 55 you go to 45

00:37:15,600 --> 00:37:19,090
okay

00:37:16,720 --> 00:37:20,710
and seems pretty obvious right that's

00:37:19,090 --> 00:37:23,440
the what was good it knows about lee

00:37:20,710 --> 00:37:25,570
jason see down upwards he may just have

00:37:23,440 --> 00:37:29,800
a default road that's enough

00:37:25,570 --> 00:37:33,280
okay so that means that if traffic is

00:37:29,800 --> 00:37:34,960
going from 51 to 52 you might go up to

00:37:33,280 --> 00:37:38,260
this guy which is the common node and

00:37:34,960 --> 00:37:41,620
then down to here if you built here to

00:37:38,260 --> 00:37:44,650
pick p2p RPL you might discover that you

00:37:41,620 --> 00:37:48,040
could go up to 41 across and down but

00:37:44,650 --> 00:37:49,750
that's not in that this routing tree so

00:37:48,040 --> 00:37:52,000
that's storing road the nice thing about

00:37:49,750 --> 00:37:53,800
storing mode is you only have to use the

00:37:52,000 --> 00:37:55,450
network up to the point to the common

00:37:53,800 --> 00:37:57,460
point you didn't have to go up to the

00:37:55,450 --> 00:37:59,400
dag root and you realize that these

00:37:57,460 --> 00:38:02,110
links are quite can be quite congested

00:37:59,400 --> 00:38:03,310
because all the traffic that has to go

00:38:02,110 --> 00:38:04,900
from one end to the other it has to go

00:38:03,310 --> 00:38:07,240
them and if you're trying to go up to

00:38:04,900 --> 00:38:08,920
this application server all the traffic

00:38:07,240 --> 00:38:11,050
has to go at some point up and down the

00:38:08,920 --> 00:38:14,110
link so that's great

00:38:11,050 --> 00:38:18,370
the downside is that you need a routing

00:38:14,110 --> 00:38:21,430
entry at some level for every node so

00:38:18,370 --> 00:38:23,980
this guy's got at least 56 routing

00:38:21,430 --> 00:38:27,640
entries and since we slope we basically

00:38:23,980 --> 00:38:31,780
do / 128 routes there's no there's no

00:38:27,640 --> 00:38:34,360
compression in general so that's great

00:38:31,780 --> 00:38:37,390
it's wonderful for machines that have

00:38:34,360 --> 00:38:39,220
you know more than a couple kilobytes of

00:38:37,390 --> 00:38:42,460
RAM I didn't mention that many of the

00:38:39,220 --> 00:38:45,460
low powered devices are way too small to

00:38:42,460 --> 00:38:48,940
run Linux so we're talking many cases my

00:38:45,460 --> 00:38:53,280
controllers that have say 64 to 96 K of

00:38:48,940 --> 00:38:55,960
ROM and summers June 1 in 50 K of RAM

00:38:53,280 --> 00:38:57,910
depending on the class and there's an

00:38:55,960 --> 00:39:00,700
RFC actually where we defined it tried

00:38:57,910 --> 00:39:02,410
to define different classes so generally

00:39:00,700 --> 00:39:05,650
we have a class 1 device which are

00:39:02,410 --> 00:39:08,650
considered too small to run ipv6 that a

00:39:05,650 --> 00:39:10,450
lot of really active things to do and a

00:39:08,650 --> 00:39:12,430
class 2 device which probably could run

00:39:10,450 --> 00:39:13,810
which is what I described and most

00:39:12,430 --> 00:39:15,790
things that Linux would boot on would be

00:39:13,810 --> 00:39:18,339
what I hope we'll eventually call the

00:39:15,790 --> 00:39:19,930
class three device and I would call it I

00:39:18,339 --> 00:39:23,830
would consider that you know our first

00:39:19,930 --> 00:39:26,410
you know open work for 4 Meg's of Flash

00:39:23,830 --> 00:39:29,740
and you know a couple megabytes of RAM

00:39:26,410 --> 00:39:31,960
right that's kind of the minimum for

00:39:29,740 --> 00:39:34,630
most Linux machines to boot you don't

00:39:31,960 --> 00:39:37,089
get a lot with it but that's that's very

00:39:34,630 --> 00:39:38,680
rich compared to some of these things so

00:39:37,089 --> 00:39:40,900
what is Linux care why do we care about

00:39:38,680 --> 00:39:42,609
it well the dag root is an obvious place

00:39:40,900 --> 00:39:44,200
where you going to on Linux and then the

00:39:42,609 --> 00:39:46,750
other side that's happening is that as

00:39:44,200 --> 00:39:50,290
Moore's Law basically means that the

00:39:46,750 --> 00:39:52,420
minimum cost for these things is going

00:39:50,290 --> 00:39:54,760
way down people are saying why am i

00:39:52,420 --> 00:39:58,510
screwing with a with a $45

00:39:54,760 --> 00:40:03,760
microcontroller when I can buy some arm

00:39:58,510 --> 00:40:06,820
core or a device for $4 and it has

00:40:03,760 --> 00:40:08,619
megabytes of RAM and my developers don't

00:40:06,820 --> 00:40:10,630
have to be stupid but I still have a

00:40:08,619 --> 00:40:12,609
power budget right and I still have

00:40:10,630 --> 00:40:14,890
radios that are very limited so that's

00:40:12,609 --> 00:40:16,630
that's there so that's the trend that I

00:40:14,890 --> 00:40:17,920
see is that that essentially these

00:40:16,630 --> 00:40:20,170
little tiny devices are going to get

00:40:17,920 --> 00:40:22,210
replaced with what we consider is

00:40:20,170 --> 00:40:24,130
relatively tiny devices in the Linux

00:40:22,210 --> 00:40:26,080
world but for their for them are very

00:40:24,130 --> 00:40:28,000
rich but they still have a very limited

00:40:26,080 --> 00:40:31,680
power budget they still sleep a lot and

00:40:28,000 --> 00:40:35,140
their networks are still very slow so

00:40:31,680 --> 00:40:38,250
non storing mode so most of the people

00:40:35,140 --> 00:40:44,470
that are building big big networks like

00:40:38,250 --> 00:40:48,490
industrial plant networks and water and

00:40:44,470 --> 00:40:50,710
gas of metering networks specifically

00:40:48,490 --> 00:40:53,260
for those two because if you build an

00:40:50,710 --> 00:40:55,390
electricity or in Quebec we call it

00:40:53,260 --> 00:40:58,230
hydro which is confusing for those of

00:40:55,390 --> 00:40:58,230
you think that means water

00:40:58,950 --> 00:41:03,310
all the electricity in Quebec is

00:41:01,300 --> 00:41:06,340
produced by water pretty much so it's

00:41:03,310 --> 00:41:08,320
why it's the hydroelectric company if

00:41:06,340 --> 00:41:10,540
you're producing if you're doing

00:41:08,320 --> 00:41:11,860
monitoring of your electricity meter the

00:41:10,540 --> 00:41:14,080
odds are that you can get some

00:41:11,860 --> 00:41:16,030
electricity to run your device at least

00:41:14,080 --> 00:41:17,920
most of the time and you may put

00:41:16,030 --> 00:41:21,790
batteries in it but if you're collecting

00:41:17,920 --> 00:41:24,250
data about gas meters or water then you

00:41:21,790 --> 00:41:27,400
probably don't have access to power on

00:41:24,250 --> 00:41:31,420
the next to that brick in your driveway

00:41:27,400 --> 00:41:33,340
where the device gets placed so there

00:41:31,420 --> 00:41:35,650
are networks out there in Canada United

00:41:33,340 --> 00:41:37,750
States and Europe that that are running

00:41:35,650 --> 00:41:41,260
this right now collecting gas and meter

00:41:37,750 --> 00:41:43,660
and other stuff some of them are running

00:41:41,260 --> 00:41:46,720
actually running v6 some of them are

00:41:43,660 --> 00:41:48,160
running the proprietary stuff before

00:41:46,720 --> 00:41:49,630
they implemented it but the same

00:41:48,160 --> 00:41:52,510
hardware supposed to be upgradeable to

00:41:49,630 --> 00:41:53,830
this and they're so non storing mode so

00:41:52,510 --> 00:41:57,130
I wanted to deal this so these they're

00:41:53,830 --> 00:42:01,060
non storing mode you don't have any

00:41:57,130 --> 00:42:04,260
routes so what that means is that

00:42:01,060 --> 00:42:06,910
traffic goes up gets to this common

00:42:04,260 --> 00:42:08,350
parent but it still goes up to the dag

00:42:06,910 --> 00:42:12,070
root because only the day group actually

00:42:08,350 --> 00:42:15,100
knows the topology of the whole tree the

00:42:12,070 --> 00:42:19,360
dag root then basically puts a source

00:42:15,100 --> 00:42:23,440
route header okay and it says go 11:23

00:42:19,360 --> 00:42:25,870
33 43 and 53 with being the destination

00:42:23,440 --> 00:42:29,290
at address says here's the list of

00:42:25,870 --> 00:42:32,200
places to go go as you can see that

00:42:29,290 --> 00:42:36,430
burns network bandwidth and therefore

00:42:32,200 --> 00:42:39,070
power in exchange for ram okay the

00:42:36,430 --> 00:42:41,260
advantage about it is that only this guy

00:42:39,070 --> 00:42:44,290
at the top actually has to have a big

00:42:41,260 --> 00:42:46,630
routing table okay he has to store it

00:42:44,290 --> 00:42:48,190
all but it's a more capable node and we

00:42:46,630 --> 00:42:51,250
plugged it in and all these guys

00:42:48,190 --> 00:42:55,090
literally some of them have one kilobyte

00:42:51,250 --> 00:42:57,790
of RAM and they can barely assemble a v6

00:42:55,090 --> 00:42:59,290
packet to begin with right and so we

00:42:57,790 --> 00:43:03,640
have discussions about what happens if

00:42:59,290 --> 00:43:06,400
fragments arrive from you know this node

00:43:03,640 --> 00:43:07,570
and this node up to 23 at the same time

00:43:06,400 --> 00:43:09,810
and he's trying to assemble two

00:43:07,570 --> 00:43:12,069
fragments he's only got one buffer and

00:43:09,810 --> 00:43:14,709
sometimes the answer is the network

00:43:12,069 --> 00:43:16,359
throughput goes or goes to zero because

00:43:14,709 --> 00:43:18,849
it's to keep throwing all the fragments

00:43:16,359 --> 00:43:21,579
away so there's a there's a there's an

00:43:18,849 --> 00:43:24,940
ongoing discussion of the IETF exactly

00:43:21,579 --> 00:43:27,670
how do we want to solve this problem but

00:43:24,940 --> 00:43:29,739
so we have a magic header the next slide

00:43:27,670 --> 00:43:30,789
here yeah so we have this magic header

00:43:29,739 --> 00:43:35,619
called rh3

00:43:30,789 --> 00:43:38,170
it's a source route header of type 3 and

00:43:35,619 --> 00:43:40,930
it contains a list of nodes so in this

00:43:38,170 --> 00:43:42,729
case we're trying to go from this from a

00:43:40,930 --> 00:43:45,249
presentation I did where we're trying to

00:43:42,729 --> 00:43:49,930
optimize this we're trying to go from a

00:43:45,249 --> 00:43:53,259
down to e 8f SRA f2g you trying to go F

00:43:49,930 --> 00:43:55,539
to G and it's gotten up to B and now

00:43:53,259 --> 00:43:57,849
it's going to go down again so F to G so

00:43:55,539 --> 00:43:59,199
that's what this header is there and we

00:43:57,849 --> 00:44:02,680
have this road header that has been

00:43:59,199 --> 00:44:07,449
added by a and this this header here is

00:44:02,680 --> 00:44:10,630
called an RTI our PL parameters index I

00:44:07,449 --> 00:44:12,849
think it is and the r2 means that it's

00:44:10,630 --> 00:44:14,709
at rank two and so we deal with the fact

00:44:12,849 --> 00:44:17,380
that you might have loops when the

00:44:14,709 --> 00:44:19,989
network changes by basically knowing if

00:44:17,380 --> 00:44:22,660
we're going up or down and how far up or

00:44:19,989 --> 00:44:26,910
down or going it going and obviously if

00:44:22,660 --> 00:44:30,160
you see an r2 packet on the way up and

00:44:26,910 --> 00:44:32,440
you are have a rank greater than two

00:44:30,160 --> 00:44:35,229
then it must have looped back around to

00:44:32,440 --> 00:44:37,329
somehow so we do a loop detection by the

00:44:35,229 --> 00:44:40,329
fact that so let's say B suddenly

00:44:37,329 --> 00:44:42,849
started sending packets to D because the

00:44:40,329 --> 00:44:44,589
topology changed then this packet that

00:44:42,849 --> 00:44:48,219
says r2 would arrive at D and D would

00:44:44,589 --> 00:44:50,079
say boom but I'm at rank 3 why am I

00:44:48,219 --> 00:44:52,420
getting a packet going upwards with rank

00:44:50,079 --> 00:44:58,150
2 it must be a loop and then it would do

00:44:52,420 --> 00:45:00,160
something to fix it rule in ipv6 which

00:44:58,150 --> 00:45:02,140
is also sort of an ipv4 but we've never

00:45:00,160 --> 00:45:04,859
actually enforced it or cared about it

00:45:02,140 --> 00:45:08,890
you're not supposed to insert headers in

00:45:04,859 --> 00:45:10,420
v6 and v4 you can fragment in the middle

00:45:08,890 --> 00:45:13,469
but you weren't ever supposed to like

00:45:10,420 --> 00:45:15,969
insert extension headers in the middle

00:45:13,469 --> 00:45:17,890
people did never actually had a clear

00:45:15,969 --> 00:45:20,140
rule in v6 it's quite adamant there's a

00:45:17,890 --> 00:45:24,099
bit of a war right now going on in the

00:45:20,140 --> 00:45:26,050
IETF because some people in the terabit

00:45:24,099 --> 00:45:28,510
networking space would like to so

00:45:26,050 --> 00:45:30,010
headers to do essentially MPLS like

00:45:28,510 --> 00:45:33,070
things in the middle of network and

00:45:30,010 --> 00:45:35,350
other people say don't so because of

00:45:33,070 --> 00:45:38,790
that rule when the packet got up to a

00:45:35,350 --> 00:45:42,150
and we need to insert this our h3 header

00:45:38,790 --> 00:45:45,100
we had to add an IP IP header around it

00:45:42,150 --> 00:45:47,500
so that sounds oh that's sucky Wow looks

00:45:45,100 --> 00:45:49,750
like an extra 40 bytes 44 bytes Plus

00:45:47,500 --> 00:45:53,380
this Plus this Plus this and most of its

00:45:49,750 --> 00:45:56,470
empty so a lot of the work in 6lowpan is

00:45:53,380 --> 00:45:59,530
to compress all this stuff so basically

00:45:56,470 --> 00:46:03,100
we say hey from a virtual point of view

00:45:59,530 --> 00:46:06,130
yes we have all these headers please

00:46:03,100 --> 00:46:07,900
ICF please that police don't kill us but

00:46:06,130 --> 00:46:09,730
from a practical point of view on the

00:46:07,900 --> 00:46:12,310
wire they're all compressed down to

00:46:09,730 --> 00:46:15,070
about six bytes right if you can do it

00:46:12,310 --> 00:46:16,780
right and that's that's that's neat and

00:46:15,070 --> 00:46:20,020
alex has worked a lot on getting that

00:46:16,780 --> 00:46:23,440
work so there were some revisions that

00:46:20,020 --> 00:46:26,200
have happened to how to do it this was

00:46:23,440 --> 00:46:28,750
one notion it was a good doc good color

00:46:26,200 --> 00:46:30,310
diagram that I did how to do it we had

00:46:28,750 --> 00:46:31,930
some notions of how to do the fragment

00:46:30,310 --> 00:46:33,520
header how to move it around we thought

00:46:31,930 --> 00:46:35,170
if we could move some of the things

00:46:33,520 --> 00:46:37,330
above the fragment header we might be

00:46:35,170 --> 00:46:39,880
able to forward fragments rather than

00:46:37,330 --> 00:46:41,470
reassemble them each time and all these

00:46:39,880 --> 00:46:43,120
things get compressed and they get

00:46:41,470 --> 00:46:46,690
compressed into pretty pretty small

00:46:43,120 --> 00:46:48,850
sizes if you can do it right some of it

00:46:46,690 --> 00:46:50,860
is vaguely stateful I'm just going to go

00:46:48,850 --> 00:46:53,890
back some of it is some of this

00:46:50,860 --> 00:46:55,870
the stuff is stateful but not in a per

00:46:53,890 --> 00:46:57,910
packet basis we don't exchange packets

00:46:55,870 --> 00:47:01,260
in the States rather we have a protocol

00:46:57,910 --> 00:47:05,200
called 6co which basically allows us to

00:47:01,260 --> 00:47:07,510
broadcast some dictionaries to all the

00:47:05,200 --> 00:47:09,220
nodes so they have things for instance a

00:47:07,510 --> 00:47:11,680
really good thing is you you send your

00:47:09,220 --> 00:47:14,230
64 bits of your prefix out of the

00:47:11,680 --> 00:47:17,050
context and then you can refer to the 64

00:47:14,230 --> 00:47:19,120
bits of you know 2000 0 colon DB 8 blah

00:47:17,050 --> 00:47:22,840
blah blah you can refer to that as with

00:47:19,120 --> 00:47:26,740
one byte and decompress it magically to

00:47:22,840 --> 00:47:29,710
do that kind of thing so we want we

00:47:26,740 --> 00:47:31,840
really really want I struggled very hard

00:47:29,710 --> 00:47:33,730
to find a image of the Spice Girls that

00:47:31,840 --> 00:47:36,030
I thought was appropriate to put on a

00:47:33,730 --> 00:47:36,030
slide

00:47:37,430 --> 00:47:43,410
that's what I wound up with what I'd

00:47:40,949 --> 00:47:45,029
really like is I'd rather add this

00:47:43,410 --> 00:47:46,499
source route I'd like to do something

00:47:45,029 --> 00:47:50,279
like that from user space so I'd like to

00:47:46,499 --> 00:47:52,890
do it from net link really and I'd like

00:47:50,279 --> 00:47:54,390
to be able to list you know a series of

00:47:52,890 --> 00:47:58,259
things obviously I have to implement the

00:47:54,390 --> 00:48:01,319
rh3 header and I need to put that in

00:47:58,259 --> 00:48:02,999
there and I need to make this happen and

00:48:01,319 --> 00:48:05,400
so this is the kind of direction and I

00:48:02,999 --> 00:48:07,499
would sure appreciate feedback because

00:48:05,400 --> 00:48:08,759
we haven't even got to a point of you

00:48:07,499 --> 00:48:11,279
know what exactly we're going to do

00:48:08,759 --> 00:48:12,900
basically we're at this point the Linux

00:48:11,279 --> 00:48:15,269
Linux works really well in a storing

00:48:12,900 --> 00:48:18,119
Network and not at all in a non storing

00:48:15,269 --> 00:48:20,160
network we need this for a non-story

00:48:18,119 --> 00:48:23,309
so something nice and you'll notice that

00:48:20,160 --> 00:48:25,709
we most the time we probably list the

00:48:23,309 --> 00:48:27,839
hops by link layer address but remember

00:48:25,709 --> 00:48:29,940
to make them different I did good and

00:48:27,839 --> 00:48:32,940
the other thing I'll note is that one of

00:48:29,940 --> 00:48:36,469
the things that we do and Alex struggled

00:48:32,940 --> 00:48:41,039
a great deal with it's in 15.4 we have

00:48:36,469 --> 00:48:43,859
64-bit EU is and we also can have these

00:48:41,039 --> 00:48:46,849
short two byte addresses and the two

00:48:43,859 --> 00:48:49,529
byte addresses are generally assigned by

00:48:46,849 --> 00:48:51,239
could be dhcpv6 but there are other

00:48:49,529 --> 00:48:52,739
mechanisms that we're discussing to do

00:48:51,239 --> 00:48:54,209
this as part of the security enrollment

00:48:52,739 --> 00:48:56,009
and the whole point of this is to say

00:48:54,209 --> 00:48:57,809
look if you've got less than 64 K nodes

00:48:56,009 --> 00:49:00,180
why are you wasting all your time with

00:48:57,809 --> 00:49:02,299
layer 2 addresses that have 64 bits

00:49:00,180 --> 00:49:04,890
you've got two of them

00:49:02,299 --> 00:49:06,539
assign a 2x2 dressing to do that and

00:49:04,890 --> 00:49:08,609
then what you do is you then say take oh

00:49:06,539 --> 00:49:10,559
look I have this rule and slack that

00:49:08,609 --> 00:49:13,259
says if I take my MAC address and I slap

00:49:10,559 --> 00:49:15,390
an EFI fe80 on it I have my link local

00:49:13,259 --> 00:49:17,180
address and look at how many zeros there

00:49:15,390 --> 00:49:20,190
are in that I can compress and

00:49:17,180 --> 00:49:23,459
furthermore we have a magic we have a

00:49:20,190 --> 00:49:26,339
magic context magic context that has an

00:49:23,459 --> 00:49:27,690
F dat in it so actually we get away in

00:49:26,339 --> 00:49:32,130
many cases with storing an entire

00:49:27,690 --> 00:49:35,699
address compressed to about 12 bits ok

00:49:32,130 --> 00:49:37,709
so that's pretty pretty good more if

00:49:35,699 --> 00:49:40,380
it's bigger than 256 so you can see

00:49:37,709 --> 00:49:42,180
there's some advantages so that's part

00:49:40,380 --> 00:49:45,749
of it the other thing that we need to be

00:49:42,180 --> 00:49:49,440
able to do is we basically need to be

00:49:45,749 --> 00:49:52,200
able to set the neighbor table

00:49:49,440 --> 00:49:56,520
and we need to be able to modify the

00:49:52,200 --> 00:49:59,250
power so here I'm imagining I said if

00:49:56,520 --> 00:50:03,380
you want to go to 12 uses link layer

00:49:59,250 --> 00:50:06,180
short address of one two three four and

00:50:03,380 --> 00:50:09,300
here's maybe the encrypts the per pair

00:50:06,180 --> 00:50:11,579
encryption key that I want to use and I

00:50:09,300 --> 00:50:12,780
want to set a TX power of 19 I don't

00:50:11,579 --> 00:50:16,619
know what units they are I just need up

00:50:12,780 --> 00:50:17,940
19 and that's what I like to use I'd

00:50:16,619 --> 00:50:19,829
like to do that and that's what I like

00:50:17,940 --> 00:50:22,980
the routing table to entry then a

00:50:19,829 --> 00:50:26,190
colonel will take care of that Alex

00:50:22,980 --> 00:50:30,260
mentioned MLA as a source of where you

00:50:26,190 --> 00:50:32,760
do per per pure keying so some networks

00:50:30,260 --> 00:50:35,040
if you remember if you remember web who

00:50:32,760 --> 00:50:40,290
has configured WEP keys and their Wi-Fi

00:50:35,040 --> 00:50:42,480
yeah what a pain in the ass a like to go

00:50:40,290 --> 00:50:45,540
there again so so one model for layer

00:50:42,480 --> 00:50:48,839
two security for 15.4 is basically WEP

00:50:45,540 --> 00:50:51,990
here is a magic key it put on all the

00:50:48,839 --> 00:50:54,300
nodes magically and you can encrypt all

00:50:51,990 --> 00:50:59,190
your packets that way and in some

00:50:54,300 --> 00:51:02,819
contexts such as the time Sladek Psch

00:50:59,190 --> 00:51:04,380
time slot channel hopping version it's a

00:51:02,819 --> 00:51:06,180
little bit more sophisticated and

00:51:04,380 --> 00:51:07,859
there's some other things and you

00:51:06,180 --> 00:51:09,480
incorporate your frequency into the key

00:51:07,859 --> 00:51:11,190
and a bunch of other stuff so the crypto

00:51:09,480 --> 00:51:14,190
is not bad even though you have this

00:51:11,190 --> 00:51:16,680
common key on the other model which is a

00:51:14,190 --> 00:51:18,390
little bit more sophisticated is that in

00:51:16,680 --> 00:51:21,000
all of the pairs and all the links that

00:51:18,390 --> 00:51:24,810
I drew you actually derive a new layer

00:51:21,000 --> 00:51:26,520
to key for that particular pair and when

00:51:24,810 --> 00:51:29,339
you do that obviously now you need to

00:51:26,520 --> 00:51:32,880
have a layer to key that is specific to

00:51:29,339 --> 00:51:35,010
going from point A to point B much more

00:51:32,880 --> 00:51:36,839
secure but requires a key management

00:51:35,010 --> 00:51:38,970
protocol to actually go back and forth

00:51:36,839 --> 00:51:43,230
and do a diffie-hellman based upon some

00:51:38,970 --> 00:51:44,609
authenticated data there so we nice to

00:51:43,230 --> 00:51:46,109
be able to set all this because of

00:51:44,609 --> 00:51:51,500
course we want to do all this in user

00:51:46,109 --> 00:51:53,670
space um there furthermore what I want

00:51:51,500 --> 00:51:58,619
I'd like to be able to do the same

00:51:53,670 --> 00:52:02,290
things on a per packet basis so Alex has

00:51:58,619 --> 00:52:04,210
mentioned l2 packet info l2

00:52:02,290 --> 00:52:06,250
and I'd like to be able to know what

00:52:04,210 --> 00:52:08,860
that if the receiver can tell me how

00:52:06,250 --> 00:52:10,930
much power was received and how how

00:52:08,860 --> 00:52:14,530
strong was that signal how close is that

00:52:10,930 --> 00:52:16,180
node because that matters to me secondly

00:52:14,530 --> 00:52:18,880
I want to be able to transmit with only

00:52:16,180 --> 00:52:21,370
enough power to reach the peer that I

00:52:18,880 --> 00:52:25,480
want to talk to and it's not just about

00:52:21,370 --> 00:52:27,610
me being Petty and and greedy with my

00:52:25,480 --> 00:52:29,290
energy which I obviously should because

00:52:27,610 --> 00:52:31,510
I just want to survive as long as I can

00:52:29,290 --> 00:52:34,450
but if I transmit with too much power

00:52:31,510 --> 00:52:34,930
then I pollute the RF spectrum for other

00:52:34,450 --> 00:52:37,390
nodes

00:52:34,930 --> 00:52:38,680
that's probably why Wi-Fi doesn't work

00:52:37,390 --> 00:52:40,270
well in this room because as far as I

00:52:38,680 --> 00:52:42,250
can see they have too many access points

00:52:40,270 --> 00:52:43,930
and they're all turned up too high right

00:52:42,250 --> 00:52:46,420
so basically they're basically screaming

00:52:43,930 --> 00:52:47,890
at each other and and that's a that's an

00:52:46,420 --> 00:52:49,990
issue so you want to go to transmit with

00:52:47,890 --> 00:52:52,810
only as much power as you need to

00:52:49,990 --> 00:52:54,310
transmit so that's why I want and I need

00:52:52,810 --> 00:52:58,210
to somehow attach this to the neighbor

00:52:54,310 --> 00:52:59,340
entry but what I'm doing probing because

00:52:58,210 --> 00:53:02,440
I want to know

00:52:59,340 --> 00:53:04,710
Lukas way back there Lukas is way back

00:53:02,440 --> 00:53:07,390
there I have to scream louder at him and

00:53:04,710 --> 00:53:10,780
but I won't he won't hear me he won't

00:53:07,390 --> 00:53:11,280
even know if I'm here unless I say it

00:53:10,780 --> 00:53:13,690
louder

00:53:11,280 --> 00:53:17,170
right so when I want to figure out if

00:53:13,690 --> 00:53:19,300
he's near or further and how much power

00:53:17,170 --> 00:53:21,520
I need to use I need to transmit my

00:53:19,300 --> 00:53:23,440
probe packets with you know using some

00:53:21,520 --> 00:53:25,240
kind of a search algorithm probably just

00:53:23,440 --> 00:53:27,430
a simple bisect you know start at the

00:53:25,240 --> 00:53:28,960
middle amount go higher lower he says I

00:53:27,430 --> 00:53:30,610
still hear you I don't hear you and

00:53:28,960 --> 00:53:33,280
eventually I find out what the right

00:53:30,610 --> 00:53:35,080
power is and I have to do this now and

00:53:33,280 --> 00:53:37,120
then because the nodes could move they

00:53:35,080 --> 00:53:38,770
could physically move it's one of the

00:53:37,120 --> 00:53:41,440
classic things that can happen is the

00:53:38,770 --> 00:53:42,340
door can open right someone comes

00:53:41,440 --> 00:53:45,940
through that door

00:53:42,340 --> 00:53:47,470
all the lights in this room may suddenly

00:53:45,940 --> 00:53:50,560
see all those light bulbs in the other

00:53:47,470 --> 00:53:52,600
room and that may be good and they may

00:53:50,560 --> 00:53:54,970
decide to reassociate and that's maybe

00:53:52,600 --> 00:53:57,790
the correct answer or maybe the door is

00:53:54,970 --> 00:54:00,870
going to closed and they won't right but

00:53:57,790 --> 00:54:00,870
let's figure that out

00:54:01,480 --> 00:54:08,530
so I mentioned our PL instanceid so it's

00:54:05,140 --> 00:54:11,740
possible to create I think it's 60 5060

00:54:08,530 --> 00:54:14,620
16-bit field doe tags over the network

00:54:11,740 --> 00:54:15,790
in many cases installations run with

00:54:14,620 --> 00:54:19,240
only a single instance

00:54:15,790 --> 00:54:21,010
sidee kontiki until a year ago for

00:54:19,240 --> 00:54:23,860
instance in its ripple implementation

00:54:21,010 --> 00:54:26,050
didn't even put the RPI in which is

00:54:23,860 --> 00:54:27,130
great because Linux kernel doesn't even

00:54:26,050 --> 00:54:28,570
know how to do that either so we

00:54:27,130 --> 00:54:34,000
interoperate adjusts great because we

00:54:28,570 --> 00:54:37,780
were both buggy right and but that's not

00:54:34,000 --> 00:54:39,790
strictly kosher and furthermore the RPI

00:54:37,780 --> 00:54:41,980
also has the rank information that

00:54:39,790 --> 00:54:44,980
allows you to remove loops so you really

00:54:41,980 --> 00:54:48,640
do need it to send it so we need to go

00:54:44,980 --> 00:54:50,710
set the in star PL instanceid I would

00:54:48,640 --> 00:54:54,400
like I don't know if it's the right

00:54:50,710 --> 00:54:58,510
answer I write it in here yeah I wrote

00:54:54,400 --> 00:55:03,220
it here so this instanceid it's a bit

00:54:58,510 --> 00:55:04,930
like a VLAN tag maybe maybe it could be

00:55:03,220 --> 00:55:06,910
plopped into the SK buffs in the right

00:55:04,930 --> 00:55:09,700
place and we could pretend it's a VLAN

00:55:06,910 --> 00:55:14,020
and that would work today except that

00:55:09,700 --> 00:55:18,010
they Tripoli is added added Ethernet

00:55:14,020 --> 00:55:19,960
types to a new spec of 15.4 so in a

00:55:18,010 --> 00:55:22,330
couple years we'll Theory be able to run

00:55:19,960 --> 00:55:26,650
VLANs over 15.4 I don't know why that's

00:55:22,330 --> 00:55:30,190
useful but you could do it so that may

00:55:26,650 --> 00:55:31,750
be a bad idea secondly um there's

00:55:30,190 --> 00:55:33,610
nothing that stops you from running

00:55:31,750 --> 00:55:37,930
ripple or any of this stuff over

00:55:33,610 --> 00:55:44,710
Ethernet ATM PPP any layer to that can

00:55:37,930 --> 00:55:47,170
support v6 so Bluetooth PPP channel over

00:55:44,710 --> 00:55:50,590
a USB cable between your laptop and your

00:55:47,170 --> 00:55:53,650
phone why not you could do that so I'd

00:55:50,590 --> 00:55:55,000
rather not use a VLAN tag because there

00:55:53,650 --> 00:55:59,980
may be other things that are going to

00:55:55,000 --> 00:56:04,230
use it I thought maybe they should just

00:55:59,980 --> 00:56:06,520
run in separate namespaces I don't know

00:56:04,230 --> 00:56:08,790
there's a whole bunch of things there

00:56:06,520 --> 00:56:13,680
was an internal ripple implementation

00:56:08,790 --> 00:56:18,400
lizzing Joel Joe well Joe yeah yeah

00:56:13,680 --> 00:56:20,890
Spanish guy he did a lot of work he was

00:56:18,400 --> 00:56:22,600
a bit bit miffed because I don't think

00:56:20,890 --> 00:56:24,520
he understood the culture very much of

00:56:22,600 --> 00:56:26,800
it why no one listened to him one reason

00:56:24,520 --> 00:56:29,660
is I think he added at least 30 or 40

00:56:26,800 --> 00:56:33,990
bytes to the SK buff

00:56:29,660 --> 00:56:36,360
okay and I was like well don't think

00:56:33,990 --> 00:56:39,330
that's going to fly a lot of stuff that

00:56:36,360 --> 00:56:42,840
you've added and yeah he wasn't entirely

00:56:39,330 --> 00:56:44,340
wrong to say I need something but he he

00:56:42,840 --> 00:56:46,530
wasn't right to do that and a lot of the

00:56:44,340 --> 00:56:48,150
stuff he didn't need it there but anyway

00:56:46,530 --> 00:56:50,250
I'm not sure that I'm not sure it makes

00:56:48,150 --> 00:56:52,820
sense to put a route that routing

00:56:50,250 --> 00:56:55,650
protocol in the kernel to me it does not

00:56:52,820 --> 00:56:57,270
but I mean he had a constraint and I

00:56:55,650 --> 00:56:59,520
think he's actually deployed his stuff

00:56:57,270 --> 00:57:07,440
to lamp posts or something like this

00:56:59,520 --> 00:57:08,670
where it runs somewhere but anyway so

00:57:07,440 --> 00:57:10,200
somewhere as we need to be able to

00:57:08,670 --> 00:57:12,870
record this information we need to build

00:57:10,200 --> 00:57:14,250
pass it through and we need to actually

00:57:12,870 --> 00:57:16,140
be able to select a routing table so

00:57:14,250 --> 00:57:17,760
ideally it maps to a routing table and

00:57:16,140 --> 00:57:19,560
as far as I know there's nothing in SK

00:57:17,760 --> 00:57:21,870
buff that tells you which routing table

00:57:19,560 --> 00:57:25,010
to use it's it's passed through two

00:57:21,870 --> 00:57:26,940
arguments down through the the stack and

00:57:25,010 --> 00:57:28,860
so that's why I need to I need to

00:57:26,940 --> 00:57:31,590
somehow be able to say hey to me it

00:57:28,860 --> 00:57:34,710
makes sense you know I have 64k instance

00:57:31,590 --> 00:57:37,860
IDs we have you have 32 bits of routing

00:57:34,710 --> 00:57:40,080
table numbers you know what

00:57:37,860 --> 00:57:42,360
you understand that I'm not sure that

00:57:40,080 --> 00:57:44,430
people feel comfortable with an external

00:57:42,360 --> 00:57:46,560
device picking which routing table the

00:57:44,430 --> 00:57:49,650
packets going to go through but the

00:57:46,560 --> 00:57:51,090
upper 16 bits are set to known value

00:57:49,650 --> 00:57:52,620
then I think that's pretty well fire

00:57:51,090 --> 00:57:54,090
rolled off and you can do the right

00:57:52,620 --> 00:57:55,770
thing so that's really what I'm looking

00:57:54,090 --> 00:57:57,330
for because that makes my life easy I

00:57:55,770 --> 00:57:57,720
just use routing I don't have to do

00:57:57,330 --> 00:57:59,730
anything

00:57:57,720 --> 00:58:02,520
I give you my are h3 processing that

00:57:59,730 --> 00:58:05,070
somewhere probably can do two netfilter

00:58:02,520 --> 00:58:06,600
I'm not sure it could be a module it

00:58:05,070 --> 00:58:08,310
could be it could be something else

00:58:06,600 --> 00:58:10,980
we really haven't really sat down and

00:58:08,310 --> 00:58:12,750
did this right now personally I spend my

00:58:10,980 --> 00:58:15,180
time trying to get those keys into the

00:58:12,750 --> 00:58:16,350
security part at the higher level so we

00:58:15,180 --> 00:58:18,570
haven't really sat down for the rest

00:58:16,350 --> 00:58:22,800
part I think that was last slide anyway

00:58:18,570 --> 00:58:26,910
oh yeah if you're interested I'll just

00:58:22,800 --> 00:58:30,990
plug a code stand it's a new IETF effort

00:58:26,910 --> 00:58:32,670
if you are looking to have people

00:58:30,990 --> 00:58:34,560
implement a protocol that you've defined

00:58:32,670 --> 00:58:36,750
or you want to implement a protocol that

00:58:34,560 --> 00:58:40,150
someone else is defined then it's a kind

00:58:36,750 --> 00:58:41,890
of a matchmaking service okay

00:58:40,150 --> 00:58:44,640
it's particularly useful for students

00:58:41,890 --> 00:58:48,520
and but you know anyone can use it

00:58:44,640 --> 00:58:50,770
really you say hey would really nice if

00:58:48,520 --> 00:58:53,380
Linux Journal had rapid spanning tree

00:58:50,770 --> 00:58:55,750
and you don't want to implement it and

00:58:53,380 --> 00:58:57,520
you put it up and some some kids

00:58:55,750 --> 00:59:00,100
somewhere it says hey I like to do that

00:58:57,520 --> 00:59:03,450
and implement it so so Alex and I

00:59:00,100 --> 00:59:05,920
actually use this as beta testers for it

00:59:03,450 --> 00:59:07,360
we have a whole bunch of stuff a new

00:59:05,920 --> 00:59:10,450
stuff in six low RH

00:59:07,360 --> 00:59:12,430
so that is a six low router header

00:59:10,450 --> 00:59:14,800
compression so basically what we've done

00:59:12,430 --> 00:59:16,600
is we discovered how bad this IP IP

00:59:14,800 --> 00:59:19,090
situation I showed you earlier was that

00:59:16,600 --> 00:59:22,720
was but maybe three years ago it became

00:59:19,090 --> 00:59:24,340
obvious how bad it was and that not

00:59:22,720 --> 00:59:26,680
everyone was implementing according to

00:59:24,340 --> 00:59:29,290
the spec and then we asked the question

00:59:26,680 --> 00:59:31,030
what was the spec and we realized that

00:59:29,290 --> 00:59:33,790
we hadn't written it down well enough to

00:59:31,030 --> 00:59:35,590
argue so we wrote it down and we said

00:59:33,790 --> 00:59:37,930
okay this is the terrible terrible

00:59:35,590 --> 00:59:39,640
number of bytes we need and then we

00:59:37,930 --> 00:59:41,190
wrote a spec that said and this is how

00:59:39,640 --> 00:59:44,880
you compress them down to almost nothing

00:59:41,190 --> 00:59:47,650
so we need implementation to extend that

00:59:44,880 --> 00:59:51,640
of the hop by hop option the rh3

00:59:47,650 --> 00:59:53,530
processor and ideally what we'd like to

00:59:51,640 --> 00:59:56,710
do is we'd like to run the decompressor

00:59:53,530 --> 00:59:58,270
on the input path extract the

00:59:56,710 --> 01:00:02,500
information that we care about for

00:59:58,270 --> 01:00:04,330
forwarding put it somewhere act on it

01:00:02,500 --> 01:00:07,420
and then just forward the packet without

01:00:04,330 --> 01:00:08,620
recompressing it okay because we don't

01:00:07,420 --> 01:00:10,960
actually have to take the whole thing

01:00:08,620 --> 01:00:13,870
apart we don't have to just make space

01:00:10,960 --> 01:00:15,940
for it at all we just need to pull the

01:00:13,870 --> 01:00:18,150
information out do something and pass it

01:00:15,940 --> 01:00:21,070
through and as I said you know

01:00:18,150 --> 01:00:22,720
preferably without adding 30 or 40 bytes

01:00:21,070 --> 01:00:28,470
to the skb because that would really be

01:00:22,720 --> 01:00:31,000
dumb so well well the data rates are low

01:00:28,470 --> 01:00:32,530
we'd still like to run it in as few

01:00:31,000 --> 01:00:37,690
instructions as possible because we'd

01:00:32,530 --> 01:00:39,580
like to go back to sleep again and the

01:00:37,690 --> 01:00:42,760
other thing I'll mention I think that's

01:00:39,580 --> 01:00:44,710
my last slide right yes so I thought I

01:00:42,760 --> 01:00:48,010
think I'll mention is that ripple is

01:00:44,710 --> 01:00:50,860
being used to build what's called the

01:00:48,010 --> 01:00:53,200
autonomic control plane and in a working

01:00:50,860 --> 01:00:56,040
group in IETF called anima

01:00:53,200 --> 01:00:59,890
and that is essentially a in-band

01:00:56,040 --> 01:01:03,280
encrypted back-back control channel and

01:00:59,890 --> 01:01:07,180
it's not aimed at IOT devices it's aimed

01:01:03,280 --> 01:01:10,030
at at BFRs so we're basically talking

01:01:07,180 --> 01:01:13,030
about running ripple treating you know

01:01:10,030 --> 01:01:15,460
big ass routers control planes as things

01:01:13,030 --> 01:01:17,770
that we need to manage and running us

01:01:15,460 --> 01:01:21,809
all so what that means is that some of

01:01:17,770 --> 01:01:24,930
this processing may actually show up in

01:01:21,809 --> 01:01:27,099
the fast path of a hundred gig router

01:01:24,930 --> 01:01:29,799
because these are the packets that have

01:01:27,099 --> 01:01:32,980
to pull out and hand to the control

01:01:29,799 --> 01:01:34,089
plane even when the interface is totally

01:01:32,980 --> 01:01:37,030
screwed up in foo bard

01:01:34,089 --> 01:01:39,430
and the administrator the operator would

01:01:37,030 --> 01:01:41,140
like to get in to do something so that's

01:01:39,430 --> 01:01:43,390
an entirely different talk but just to

01:01:41,140 --> 01:01:44,950
mention that that that's the case so it

01:01:43,390 --> 01:01:47,589
would actually be nice if we could solve

01:01:44,950 --> 01:01:51,760
it in as efficient in as an efficient

01:01:47,589 --> 01:01:53,349
way possible because it would make it

01:01:51,760 --> 01:01:58,900
easier to do that kind of stuff in the

01:01:53,349 --> 01:02:01,200
in the the VFR type equipment that's it

01:01:58,900 --> 01:02:01,200
for me

01:02:09,270 --> 01:02:14,290
so do we have any feedback on the

01:02:12,210 --> 01:02:18,520
requirements michael has here with a

01:02:14,290 --> 01:02:22,200
sore throat and anything so yeah more

01:02:18,520 --> 01:02:22,200
than enough time so that's not a problem

01:02:22,860 --> 01:02:32,880
Tom asks for Mike I guess it's get down

01:02:38,950 --> 01:02:49,910
so Michael can you go back to the first

01:02:42,040 --> 01:02:56,390
slide of your wish list what you want

01:02:49,910 --> 01:02:58,340
okay they're good yeah okay so point

01:02:56,390 --> 01:03:00,440
number one looks a lot like segment

01:02:58,340 --> 01:03:03,020
routing the meeting have you looked at

01:03:00,440 --> 01:03:04,400
that API and whether or not we could is

01:03:03,020 --> 01:03:07,370
that excellent leads upstream

01:03:04,400 --> 01:03:09,470
yep really wow I didn't know that that's

01:03:07,370 --> 01:03:11,600
really cool work could have HVAC and all

01:03:09,470 --> 01:03:14,330
of that and somehow this just looks like

01:03:11,600 --> 01:03:15,920
a WoW well okay going round segment

01:03:14,330 --> 01:03:16,970
rating other people that by the way are

01:03:15,920 --> 01:03:21,050
not supposed to be inserting and

01:03:16,970 --> 01:03:23,420
deleting headers but they are okay but

01:03:21,050 --> 01:03:25,240
but yeah okay I'll look exactly at that

01:03:23,420 --> 01:03:31,580
that's I did not know that

01:03:25,240 --> 01:03:35,600
and then for number two they want rounds

01:03:31,580 --> 01:03:37,400
there are neighbors I need to its about

01:03:35,600 --> 01:03:42,410
neighbors it's about you are going to

01:03:37,400 --> 01:03:44,390
this place so do this thing so neighbor

01:03:42,410 --> 01:03:46,070
yeah so maybe I just type this in so

01:03:44,390 --> 01:03:48,950
actually maybe that ad is actually it

01:03:46,070 --> 01:03:54,200
should be a MAC address what I should it

01:03:48,950 --> 01:03:56,990
no no no that's it anymore link specific

01:03:54,200 --> 01:03:58,610
information its link specific yeah yeah

01:03:56,990 --> 01:04:05,710
okay and then you can you go to the next

01:03:58,610 --> 01:04:08,210
slide so what I gathered from this is

01:04:05,710 --> 01:04:10,250
the general statement of the problem is

01:04:08,210 --> 01:04:13,850
we have some sort of UDP or Datagram

01:04:10,250 --> 01:04:17,210
packet coming in and we want to attach

01:04:13,850 --> 01:04:19,850
some sort of ancillary information to

01:04:17,210 --> 01:04:22,010
the sk buff which is device specific and

01:04:19,850 --> 01:04:23,840
be able to pass it all the way up to

01:04:22,010 --> 01:04:25,370
user's face through presumably ancillary

01:04:23,840 --> 01:04:29,030
data is that when you're thinking yeah

01:04:25,370 --> 01:04:30,770
and it's either UDP or ICMP okay but in

01:04:29,030 --> 01:04:33,730
either case state again we have anything

01:04:30,770 --> 01:04:37,250
like that just an arbitrary block of

01:04:33,730 --> 01:04:39,940
something that's it up to user space

01:04:37,250 --> 01:04:39,940
with the classic

01:04:51,020 --> 01:04:59,190
so what who needed it last time just

01:04:56,540 --> 01:05:02,810
it's not it's not an honor it's not a

01:04:59,190 --> 01:05:05,670
block that you can't look at it's it's a

01:05:02,810 --> 01:05:07,500
it could be well defined so just like

01:05:05,670 --> 01:05:10,130
the control blocking skp we always have

01:05:07,500 --> 01:05:13,770
this issue of who owns that layer do you

01:05:10,130 --> 01:05:16,800
do you release ownership when at once it

01:05:13,770 --> 01:05:18,420
gets out of your realm we the control

01:05:16,800 --> 01:05:19,920
blocking skv has these issues all their

01:05:18,420 --> 01:05:22,080
play so we start sharing hetero space

01:05:19,920 --> 01:05:24,780
and infinite man guys their stuff breaks

01:05:22,080 --> 01:05:27,540
and then it's just going in the other

01:05:24,780 --> 01:05:32,430
direction right my understanding is is

01:05:27,540 --> 01:05:34,140
802 11 needs this as well and for the

01:05:32,430 --> 01:05:36,510
same reason that they need to be able to

01:05:34,140 --> 01:05:38,550
control the the transmit power to

01:05:36,510 --> 01:05:41,070
neighbors now I believe that a lot of

01:05:38,550 --> 01:05:42,780
that stays in the kernel

01:05:41,070 --> 01:05:44,190
whereas we'd like to get it out of the

01:05:42,780 --> 01:05:47,310
kernel ways the other thing this is

01:05:44,190 --> 01:05:50,520
sounds like a privileged operation oh it

01:05:47,310 --> 01:05:52,320
well could be absolutely pretty maybe

01:05:50,520 --> 01:05:56,100
that's why we don't see this as a

01:05:52,320 --> 01:05:58,800
already explored API for 802 11 was I

01:05:56,100 --> 01:06:00,870
mean the traditional Wireless because

01:05:58,800 --> 01:06:02,490
that you could probably do really useful

01:06:00,870 --> 01:06:04,470
interesting things to optimize your

01:06:02,490 --> 01:06:06,600
wireless network if you could mess with

01:06:04,470 --> 01:06:08,310
the power certainly demons Knesset the

01:06:06,600 --> 01:06:10,050
power I thought that was I thought those

01:06:08,310 --> 01:06:11,970
people wanted to do that just this

01:06:10,050 --> 01:06:15,060
specific life or that each application

01:06:11,970 --> 01:06:16,620
doing it is only a story oh I see yes

01:06:15,060 --> 01:06:22,470
because you got this control message the

01:06:16,620 --> 01:06:24,600
thing is like oh okay I don't think it's

01:06:22,470 --> 01:06:27,510
I don't I think that the I think that

01:06:24,600 --> 01:06:30,830
the the app that in most cases

01:06:27,510 --> 01:06:33,240
applications could use make useful

01:06:30,830 --> 01:06:37,280
information about receiving the

01:06:33,240 --> 01:06:40,490
information okay it would tell them Wow

01:06:37,280 --> 01:06:44,010
is not really any point in trying to

01:06:40,490 --> 01:06:46,080
retransmit your data because honestly no

01:06:44,010 --> 01:06:48,360
one's hearing you right

01:06:46,080 --> 01:06:49,950
sweet district I'm getting back yet if I

01:06:48,360 --> 01:06:53,280
know how strong the signal is and I'm

01:06:49,950 --> 01:06:54,070
getting from node 53 I could adjust my

01:06:53,280 --> 01:06:57,130
turret my sin

01:06:54,070 --> 01:06:58,570
right - but but who is doing is this a

01:06:57,130 --> 01:07:00,970
user thing or is it something in the

01:06:58,570 --> 01:07:04,750
kernel that's making this work that way

01:07:00,970 --> 01:07:06,730
so I'm saying that that the decision to

01:07:04,750 --> 01:07:08,350
change the thing I think is a user space

01:07:06,730 --> 01:07:10,930
daemon because I think the algorithms

01:07:08,350 --> 01:07:15,610
are going to be applicable complicated

01:07:10,930 --> 01:07:18,550
and I think probably cause routing

01:07:15,610 --> 01:07:20,530
changes when you hear that things are

01:07:18,550 --> 01:07:22,720
are too weak you can pick a different

01:07:20,530 --> 01:07:24,310
path and so that's a privileged

01:07:22,720 --> 01:07:25,840
operation to pick a different path so

01:07:24,310 --> 01:07:28,960
that's not a problem that transmit power

01:07:25,840 --> 01:07:30,340
is privileged right on the other hand if

01:07:28,960 --> 01:07:32,290
we only need okay

01:07:30,340 --> 01:07:33,970
growling demons would have to have

01:07:32,290 --> 01:07:37,680
knowledge about transmit powering nodes

01:07:33,970 --> 01:07:40,870
to make rerouting decision yes however

01:07:37,680 --> 01:07:42,430
the power through which we should talk

01:07:40,870 --> 01:07:45,400
to our direct neighbors is a completely

01:07:42,430 --> 01:07:48,220
different matter all-together so I think

01:07:45,400 --> 01:07:50,980
there's some different problems it's the

01:07:48,220 --> 01:07:53,080
same you're right you're right it's that

01:07:50,980 --> 01:07:54,490
it's a different it's a different number

01:07:53,080 --> 01:07:57,160
different statistic the routing daemon

01:07:54,490 --> 01:07:59,620
has because what he cares is to talk to

01:07:57,160 --> 01:08:01,570
neighbor a or parent a ripple we talk

01:07:59,620 --> 01:08:03,340
about parents talk to parent a requires

01:08:01,570 --> 01:08:05,350
as many much energy to come talk to

01:08:03,340 --> 01:08:07,780
parent B requires a different amount but

01:08:05,350 --> 01:08:11,650
but when I talk to parent a I need at

01:08:07,780 --> 01:08:13,510
least 10 right and not more and that

01:08:11,650 --> 01:08:15,340
that number gets bigger then I might

01:08:13,510 --> 01:08:17,319
switch to parent be okay right

01:08:15,340 --> 01:08:19,510
so that switching would be a user space

01:08:17,319 --> 01:08:21,339
task but the neighbor layer itself and

01:08:19,510 --> 01:08:22,780
the physical layer inside all this stuff

01:08:21,339 --> 01:08:25,330
that's in the kernel ready could maybe

01:08:22,780 --> 01:08:27,100
handle the adjusting the power thing it

01:08:25,330 --> 01:08:28,270
could hand it definitely could live in

01:08:27,100 --> 01:08:30,580
that in the neighbor the certainly the

01:08:28,270 --> 01:08:32,770
looking for how much power to transmit

01:08:30,580 --> 01:08:33,880
certainly could live in the kernel so

01:08:32,770 --> 01:08:36,670
that means what you think you're saying

01:08:33,880 --> 01:08:38,859
is that the the the setting of the power

01:08:36,670 --> 01:08:41,859
could happen in the kernel even if the

01:08:38,859 --> 01:08:45,970
reporting was to user space yes that's a

01:08:41,859 --> 01:08:49,839
good compromise yes yeah part of the

01:08:45,970 --> 01:08:51,130
next hop stuff because absolutely alex

01:08:49,839 --> 01:08:55,060
has already done a lot of work putting

01:08:51,130 --> 01:08:59,280
two byte next neighbors in somehow to

01:08:55,060 --> 01:09:03,100
the what was the what was your block

01:08:59,280 --> 01:09:06,820
yeah I did some neighborhood scum we

01:09:03,100 --> 01:09:09,100
called back evaluation to make

01:09:06,820 --> 01:09:13,060
additional change in the AP physics name

01:09:09,100 --> 01:09:17,050
in Discovery and I also use the bio-data

01:09:13,060 --> 01:09:19,300
boom for a neighbor entry and I think we

01:09:17,050 --> 01:09:24,910
can put there some extra and some

01:09:19,300 --> 01:09:27,520
information for specific link attributes

01:09:24,910 --> 01:09:31,840
like the Prada dress which is also the

01:09:27,520 --> 01:09:32,950
link stuff and I need to look how I can

01:09:31,840 --> 01:09:37,300
teach it

01:09:32,950 --> 01:09:40,080
IP would too but I think this should be

01:09:37,300 --> 01:09:43,030
possible come on

01:09:40,080 --> 01:09:45,400
it also occurs to me that maybe what we

01:09:43,030 --> 01:09:47,650
need is a private interface to that to

01:09:45,400 --> 01:09:49,210
the 6lowpan neighbor discovery Private

01:09:47,650 --> 01:09:51,130
Eye meaning it's not shared with

01:09:49,210 --> 01:09:53,200
applications it's not received message

01:09:51,130 --> 01:09:54,760
it rather is some kind of thing that

01:09:53,200 --> 01:09:56,860
could be net linked it just basically

01:09:54,760 --> 01:10:00,370
says here's that here's the here's the

01:09:56,860 --> 01:10:03,280
powers that I'm seeing and then it does

01:10:00,370 --> 01:10:05,020
the here's the replies with okay it does

01:10:03,280 --> 01:10:06,820
the bisecting or whatever the hysteresis

01:10:05,020 --> 01:10:08,650
curves it needs to do to do that to

01:10:06,820 --> 01:10:10,630
figure it out and keep it stable because

01:10:08,650 --> 01:10:13,060
this is the power I'd like to descend X

01:10:10,630 --> 01:10:14,350
time and so that becomes a input to the

01:10:13,060 --> 01:10:17,260
neighbor discovery but we just need to

01:10:14,350 --> 01:10:18,760
get the output of these are the this is

01:10:17,260 --> 01:10:24,730
the power of the packets that I'm

01:10:18,760 --> 01:10:26,290
hearing because if it's probably it

01:10:24,730 --> 01:10:29,230
means if you're hearing something with a

01:10:26,290 --> 01:10:33,250
lot of power it probably means that you

01:10:29,230 --> 01:10:36,610
could transmit with a similar power to

01:10:33,250 --> 01:10:39,670
what's what's the Delta there's a lot of

01:10:36,610 --> 01:10:40,960
there's a lot of there's a lot of PhD

01:10:39,670 --> 01:10:43,690
students out there that would like to

01:10:40,960 --> 01:10:46,050
write new algorithms and publish

01:10:43,690 --> 01:10:46,050
something

01:10:52,310 --> 01:11:04,160
okay so as a few more slides just this

01:11:01,220 --> 01:11:05,810
kind of a pending topic so I wasn't sure

01:11:04,160 --> 01:11:09,260
how much time people spend on this

01:11:05,810 --> 01:11:12,410
conference around some of the things you

01:11:09,260 --> 01:11:14,450
might see in the future that might come

01:11:12,410 --> 01:11:16,100
back to the neck that somehow might be

01:11:14,450 --> 01:11:19,280
something like low power wide area

01:11:16,100 --> 01:11:21,590
networks and what they mostly defined

01:11:19,280 --> 01:11:23,750
are like if it's a star topology you

01:11:21,590 --> 01:11:24,980
have and the googles are connected to

01:11:23,750 --> 01:11:26,510
the deck down and then I connected

01:11:24,980 --> 01:11:31,040
together to actually get all the

01:11:26,510 --> 01:11:32,660
sender's talk to each other sometimes as

01:11:31,040 --> 01:11:34,700
our system access a radios you have

01:11:32,660 --> 01:11:36,920
there at between like three or maybe ten

01:11:34,700 --> 01:11:39,830
kilometers some vendors actually say

01:11:36,920 --> 01:11:41,540
it's more so I think three depends on

01:11:39,830 --> 01:11:43,850
the on the area you're going to deploy

01:11:41,540 --> 01:11:46,400
them and so on so example so that would

01:11:43,850 --> 01:11:48,500
be things like Laura and say Clark six

01:11:46,400 --> 01:11:50,540
Hawks is problematic was at the close

01:11:48,500 --> 01:11:52,940
network and you have to actually pay

01:11:50,540 --> 01:11:54,980
them and I think even the complete stack

01:11:52,940 --> 01:11:57,320
is close so lowers a bit different there

01:11:54,980 --> 01:11:58,610
I think to make layers close but all the

01:11:57,320 --> 01:12:00,770
other things on top of that might be

01:11:58,610 --> 01:12:02,930
something we want to implement on the

01:12:00,770 --> 01:12:04,940
long side but that's unclear right now

01:12:02,930 --> 01:12:06,770
have to look into that a bit more but

01:12:04,940 --> 01:12:08,090
some of the carry characteristics are

01:12:06,770 --> 01:12:09,950
quite industry in here because they're

01:12:08,090 --> 01:12:13,250
even more restricted in dentists in

01:12:09,950 --> 01:12:15,050
compared to what we described before so

01:12:13,250 --> 01:12:17,480
we're talking media about like tens of

01:12:15,050 --> 01:12:19,970
bytes and queue size and we are talking

01:12:17,480 --> 01:12:22,400
about a few hundred bytes per day they

01:12:19,970 --> 01:12:25,340
can only be sent out by this device some

01:12:22,400 --> 01:12:27,500
of them actually only able to receive or

01:12:25,340 --> 01:12:29,060
some of them are only able to transmit

01:12:27,500 --> 01:12:31,120
packets I'm not doing the other way

01:12:29,060 --> 01:12:33,830
around so it's really I think as well

01:12:31,120 --> 01:12:36,080
and for this kind of things they also

01:12:33,830 --> 01:12:38,270
starting to define IP version 6

01:12:36,080 --> 01:12:40,180
adaptation layers on top of that and

01:12:38,270 --> 01:12:42,170
they are looking into different

01:12:40,180 --> 01:12:44,150
compression schemes because she

01:12:42,170 --> 01:12:45,560
obviously needs them something like six

01:12:44,150 --> 01:12:47,720
low pain is not going to work they're

01:12:45,560 --> 01:12:49,370
getting it down to like temple slides

01:12:47,720 --> 01:12:51,200
and there's something in the in the

01:12:49,370 --> 01:12:54,350
making that's called a static complex

01:12:51,200 --> 01:12:55,610
header compression a CFC what they

01:12:54,350 --> 01:12:57,740
really do is like they're having a lot

01:12:55,610 --> 01:12:59,300
shared context because he has a star

01:12:57,740 --> 01:13:01,220
topology you know all the other things

01:12:59,300 --> 01:13:03,380
what the small sensor and what kind of

01:13:01,220 --> 01:13:05,600
state it is right now and it's all this

01:13:03,380 --> 01:13:05,770
kind of context you have you can most of

01:13:05,600 --> 01:13:07,990
the

01:13:05,770 --> 01:13:09,370
time bring the messages being

01:13:07,990 --> 01:13:11,410
distributed or the head off being

01:13:09,370 --> 01:13:12,940
distributed down to a context identifier

01:13:11,410 --> 01:13:15,190
and then just has a little bit of

01:13:12,940 --> 01:13:17,080
payload which is in machine to machine

01:13:15,190 --> 01:13:18,970
communication could be just a few bytes

01:13:17,080 --> 01:13:21,400
or something so that's something that

01:13:18,970 --> 01:13:23,950
might cover come up in the future I just

01:13:21,400 --> 01:13:25,570
ordered myself a couple of these devices

01:13:23,950 --> 01:13:29,620
but I haven't been able to really play

01:13:25,570 --> 01:13:31,720
around with it and some things that

01:13:29,620 --> 01:13:34,180
might be interesting for us in the user

01:13:31,720 --> 01:13:36,190
space API perspective so the second

01:13:34,180 --> 01:13:37,990
point is actually quite moot because it

01:13:36,190 --> 01:13:39,850
was already discussed here from these

01:13:37,990 --> 01:13:42,340
things that Michael needs and another

01:13:39,850 --> 01:13:44,530
thing we have this is 6lowpan header

01:13:42,340 --> 01:13:46,540
compressions yes in the kernel

01:13:44,530 --> 01:13:48,400
you have no configuration options for

01:13:46,540 --> 01:13:50,110
that right now so what we do is we have

01:13:48,400 --> 01:13:52,150
this kernel modules and once they are

01:13:50,110 --> 01:13:54,310
loaded they are applied to the to the

01:13:52,150 --> 01:13:56,770
tech herbs and if they are not loaded

01:13:54,310 --> 01:13:58,480
they are not used at all so what we are

01:13:56,770 --> 01:14:00,550
planning on doing is like having a net

01:13:58,480 --> 01:14:02,470
link interface for that but really need

01:14:00,550 --> 01:14:04,690
to put a bit more salt into that because

01:14:02,470 --> 01:14:06,490
it's not simple on us it could be for

01:14:04,690 --> 01:14:08,890
sell mostly hello conversions but it

01:14:06,490 --> 01:14:10,600
could be also pair node basis so exams

01:14:08,890 --> 01:14:13,810
there's something called generic header

01:14:10,600 --> 01:14:15,940
compression and you're not really sure

01:14:13,810 --> 01:14:17,560
if all the other nodes in the network

01:14:15,940 --> 01:14:19,750
support that or not and then you have

01:14:17,560 --> 01:14:21,520
slightly normal and a dag problem if you

01:14:19,750 --> 01:14:24,250
get something out sending the message

01:14:21,520 --> 01:14:25,420
compressed or not so edie most of the

01:14:24,250 --> 01:14:27,130
time you cook you something like

01:14:25,420 --> 01:14:29,620
neighbor discovery to actually have a

01:14:27,130 --> 01:14:32,230
field in that I'm telling okay I honor I

01:14:29,620 --> 01:14:34,420
am accept ght you can send me packages

01:14:32,230 --> 01:14:36,310
that but you need to test it in a very

01:14:34,420 --> 01:14:39,130
configurable so I need to really put a

01:14:36,310 --> 01:14:41,230
bit of salt into that and I expect at

01:14:39,130 --> 01:14:43,060
least that the compression schemes that

01:14:41,230 --> 01:14:45,160
are we need to support the kernel will

01:14:43,060 --> 01:14:46,810
get a bit more over time if you are

01:14:45,160 --> 01:14:49,540
going to support different I will keep

01:14:46,810 --> 01:14:52,180
protocols here so the six open what we

01:14:49,540 --> 01:14:53,800
have right now is good it's working but

01:14:52,180 --> 01:14:55,450
they need to make sure that we can

01:14:53,800 --> 01:15:00,880
actually cater for the future as well

01:14:55,450 --> 01:15:03,460
yeah yes some some miss topics just to

01:15:00,880 --> 01:15:05,470
finish up here so that the ripple

01:15:03,460 --> 01:15:06,760
implementation Michael was referring to

01:15:05,470 --> 01:15:09,640
was from Yahoo

01:15:06,760 --> 01:15:10,360
federal Tavia and hopefully pronounce

01:15:09,640 --> 01:15:12,670
that correctly

01:15:10,360 --> 01:15:13,900
most certainly not and because

01:15:12,670 --> 01:15:15,940
implementing that and there are some

01:15:13,900 --> 01:15:16,590
competitors out there but they are based

01:15:15,940 --> 01:15:19,410
on

01:15:16,590 --> 01:15:21,570
I think we point eighteen by now I try

01:15:19,410 --> 01:15:23,460
to get him here to talk a little bit

01:15:21,570 --> 01:15:26,300
about it but it didn't work out in the

01:15:23,460 --> 01:15:28,740
end and he seems to be turned out into

01:15:26,300 --> 01:15:30,720
looking into that so it seems that

01:15:28,740 --> 01:15:32,010
there's going nowhere because we have on

01:15:30,720 --> 01:15:34,260
the other hand we have Armstrong and if

01:15:32,010 --> 01:15:36,150
you're able to get the user space API

01:15:34,260 --> 01:15:37,980
that to get all the information out of

01:15:36,150 --> 01:15:41,820
the kernel that might be the right

01:15:37,980 --> 01:15:43,680
direction to do that and then something

01:15:41,820 --> 01:15:45,900
slow there's a lot of other link layer

01:15:43,680 --> 01:15:47,810
adaptations in process Michael mentioned

01:15:45,900 --> 01:15:51,600
that already there's things like

01:15:47,810 --> 01:15:54,510
magnetic as MSTP they're stacked Auto

01:15:51,600 --> 01:15:57,690
low energy users z-wave that even stuff

01:15:54,510 --> 01:16:02,130
for NFC doing IP version 6 of NFC that's

01:15:57,690 --> 01:16:03,600
all in the making somehow it's unclear

01:16:02,130 --> 01:16:05,640
to me if anything of that is really

01:16:03,600 --> 01:16:08,330
going to come back into the kernel at

01:16:05,640 --> 01:16:10,680
some point and if s and if see we have a

01:16:08,330 --> 01:16:12,030
subsystem for that but for all the other

01:16:10,680 --> 01:16:13,950
ones they don't even have support for

01:16:12,030 --> 01:16:15,780
that so it's unclear if we have to give

01:16:13,950 --> 01:16:20,820
is that at some point or not but it

01:16:15,780 --> 01:16:23,670
might come up at some point yeah I also

01:16:20,820 --> 01:16:24,900
start to try to get some of the groups

01:16:23,670 --> 01:16:26,940
that are working on the on the

01:16:24,900 --> 01:16:28,170
application layer side and what kind of

01:16:26,940 --> 01:16:30,630
interfaces they need to actually

01:16:28,170 --> 01:16:32,550
understand that a little bit better what

01:16:30,630 --> 01:16:34,980
they would need from the kernel to

01:16:32,550 --> 01:16:37,260
actually function in the same way and

01:16:34,980 --> 01:16:38,850
performant variants around so I try to

01:16:37,260 --> 01:16:40,830
talk to some of the people there I'm

01:16:38,850 --> 01:16:43,440
trying to get some feedback but that is

01:16:40,830 --> 01:16:47,010
still missing right now I think that

01:16:43,440 --> 01:16:48,690
wallet yep that's it so thanks for

01:16:47,010 --> 01:16:50,250
having us if you have any more question

01:16:48,690 --> 01:16:57,480
just go ahead we have like 12 minutes

01:16:50,250 --> 01:17:01,040
left so I just wanted to add Devon use

01:16:57,480 --> 01:17:04,650
terms of route over and mesh under and

01:17:01,040 --> 01:17:08,460
they may be unclear there to some people

01:17:04,650 --> 01:17:10,260
so root over is layer 3 routing what I'm

01:17:08,460 --> 01:17:13,760
doing and then strong and ripples doing

01:17:10,260 --> 01:17:16,710
and and mesh under is layer two tricks

01:17:13,760 --> 01:17:18,960
okay so if you remember the exo laptop

01:17:16,710 --> 01:17:25,560
and their attempt to do nash networking

01:17:18,960 --> 01:17:28,710
over 802 16 that was that was mesh under

01:17:25,560 --> 01:17:29,940
and essentially part of the reason why

01:17:28,710 --> 01:17:31,410
it doesn't work is because

01:17:29,940 --> 01:17:34,710
don't get any visibility into layer two

01:17:31,410 --> 01:17:36,810
and that's a layer two problem but

01:17:34,710 --> 01:17:39,110
that's my opinion that my opinion is

01:17:36,810 --> 01:17:43,440
that mesh under is a disaster and that

01:17:39,110 --> 01:17:45,180
that's my opinion anyway because because

01:17:43,440 --> 01:17:46,890
where's traceroute you have an internet

01:17:45,180 --> 01:17:50,460
trace route that goes through STP

01:17:46,890 --> 01:17:55,650
switches nobody it just doesn't exist

01:17:50,460 --> 01:18:04,140
and yet so how do you diagnose it from

01:17:55,650 --> 01:18:06,130
me that's right of course yes okay so

01:18:04,140 --> 01:18:09,419
thank you very much

01:18:06,130 --> 01:18:09,419

YouTube URL: https://www.youtube.com/watch?v=rseB3PsPWHg


