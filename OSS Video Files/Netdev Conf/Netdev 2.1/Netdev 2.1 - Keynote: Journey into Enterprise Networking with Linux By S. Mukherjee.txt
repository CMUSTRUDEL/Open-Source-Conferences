Title: Netdev 2.1 - Keynote: Journey into Enterprise Networking with Linux By S. Mukherjee
Publication date: 2017-05-03
Playlist: Netdev 2.1
Description: 
	Keynote given by Shrijeet Mukherjee from Cumulus at Netdev 2.1 in Montreal Apr 06 2017
Content: https://www.netdevconf.org/2.1/session.html?mukherjee
Captions: 
	00:00:00,949 --> 00:00:07,620
alright so far next speaker tom is going

00:00:05,700 --> 00:00:08,910
to do the intro this is a keynote sofas

00:00:07,620 --> 00:00:13,799
keynote will have a keynote every day

00:00:08,910 --> 00:00:15,570
I'll hand it over to Tom so I have the

00:00:13,799 --> 00:00:20,880
pleasure of introducing our first

00:00:15,570 --> 00:00:25,380
keynote speaker Sergey mukerji surjeet

00:00:20,880 --> 00:00:27,750
is VP of engineering at cumulus manages

00:00:25,380 --> 00:00:31,080
manages of the team working on a network

00:00:27,750 --> 00:00:34,020
operating system and Linux has done some

00:00:31,080 --> 00:00:35,850
nice contributions in the vrf area

00:00:34,020 --> 00:00:40,260
looking through the patches or actually

00:00:35,850 --> 00:00:44,430
some has a great background let's see

00:00:40,260 --> 00:00:46,739
Cisco precision i/o silicon graphics but

00:00:44,430 --> 00:00:49,379
more importantly what I found is he's

00:00:46,739 --> 00:00:54,239
quite passionate does like a good

00:00:49,379 --> 00:00:56,190
argument and even though he's attained

00:00:54,239 --> 00:00:59,160
the high lofty title of VP of

00:00:56,190 --> 00:01:01,859
engineering he actually has a really

00:00:59,160 --> 00:01:04,979
good sense of humor and in fact has that

00:01:01,859 --> 00:01:09,420
touch of cynicism that's a great

00:01:04,979 --> 00:01:11,760
homework in a true criminal engineer so

00:01:09,420 --> 00:01:19,680
without any further ado surjeet taken

00:01:11,760 --> 00:01:23,189
away no not really it should be room

00:01:19,680 --> 00:01:25,439
it's on okay all right so thank you for

00:01:23,189 --> 00:01:27,750
that very generous introduction I was

00:01:25,439 --> 00:01:31,619
expecting more of my sense of humor to

00:01:27,750 --> 00:01:34,500
get tested but I'm happy with that I'm

00:01:31,619 --> 00:01:36,329
going to actually talk a little bit this

00:01:34,500 --> 00:01:39,630
talk is a little bit counter culture for

00:01:36,329 --> 00:01:42,030
this group I'm here really to explain a

00:01:39,630 --> 00:01:45,090
little bit about what givenness networks

00:01:42,030 --> 00:01:47,759
does why we think it's important and

00:01:45,090 --> 00:01:50,189
you'll see in this talk that it's going

00:01:47,759 --> 00:01:52,320
to take some of the things that most of

00:01:50,189 --> 00:01:55,619
the people in this room focus on work on

00:01:52,320 --> 00:01:57,299
on a daily basis on a slight tangent but

00:01:55,619 --> 00:02:00,000
you'll see why everything that everybody

00:01:57,299 --> 00:02:02,790
here and the larger community has been

00:02:00,000 --> 00:02:04,770
working on is very relevant and and is

00:02:02,790 --> 00:02:08,250
an interesting application of of the

00:02:04,770 --> 00:02:09,899
same so this is just sort of an

00:02:08,250 --> 00:02:12,000
introduction I want to set the stage to

00:02:09,899 --> 00:02:13,230
say that look I mean we know that

00:02:12,000 --> 00:02:14,700
networking in Linux

00:02:13,230 --> 00:02:17,280
runs and everything from that small

00:02:14,700 --> 00:02:19,140
little device to that large set of

00:02:17,280 --> 00:02:21,810
computers and infrastructure that runs

00:02:19,140 --> 00:02:23,849
over there most of us on our day job or

00:02:21,810 --> 00:02:25,409
in our day job focus on one or two or

00:02:23,849 --> 00:02:28,560
three of those aspects that of course

00:02:25,409 --> 00:02:30,599
exceptions people like David who have to

00:02:28,560 --> 00:02:31,860
worry about the whole gamut but it is

00:02:30,599 --> 00:02:33,330
important I think for us of the

00:02:31,860 --> 00:02:35,670
community to understand that there is a

00:02:33,330 --> 00:02:37,709
really large gamut and the ways in which

00:02:35,670 --> 00:02:40,260
things that are being done by this

00:02:37,709 --> 00:02:42,000
community affect everybody is often very

00:02:40,260 --> 00:02:45,660
hard to tell them and in fact I would

00:02:42,000 --> 00:02:47,160
say impossible to further so if you look

00:02:45,660 --> 00:02:49,799
inside the data center and I'm going to

00:02:47,160 --> 00:02:51,780
restrict my conversation to entirely the

00:02:49,799 --> 00:02:54,269
enterprise on the data center as my of

00:02:51,780 --> 00:02:56,129
the headline says and if you look at all

00:02:54,269 --> 00:02:59,190
the talks in this conference most of

00:02:56,129 --> 00:03:00,660
them focus on the layers the top three

00:02:59,190 --> 00:03:02,040
layers up their words with virtual

00:03:00,660 --> 00:03:05,370
machines virtual switches physical

00:03:02,040 --> 00:03:08,280
servers and those little black spider

00:03:05,370 --> 00:03:10,829
like icons indicate where your linux

00:03:08,280 --> 00:03:13,760
kernel networking stack is an operation

00:03:10,829 --> 00:03:16,379
and I think it's highly in

00:03:13,760 --> 00:03:19,500
non-controversial and something we can

00:03:16,379 --> 00:03:21,510
all agree on that in those upper three

00:03:19,500 --> 00:03:25,109
layers and all the applications of

00:03:21,510 --> 00:03:26,880
networking as we know it Linux is

00:03:25,109 --> 00:03:28,950
dominant it may not be one hundred

00:03:26,880 --> 00:03:32,310
percent but it's very very close and

00:03:28,950 --> 00:03:34,950
this is where things lie today now the

00:03:32,310 --> 00:03:37,650
point I'm here to talk about is that

00:03:34,950 --> 00:03:41,220
that's not sufficient right if you look

00:03:37,650 --> 00:03:43,799
at the data center as a whole the

00:03:41,220 --> 00:03:45,930
compute side has followed the trajectory

00:03:43,799 --> 00:03:48,510
of the pictures on the tall it has gone

00:03:45,930 --> 00:03:51,060
from these highly isolated boxes to a

00:03:48,510 --> 00:03:53,400
box that is highly disagree gated and

00:03:51,060 --> 00:03:55,650
there were obviously the sample

00:03:53,400 --> 00:03:57,180
applications in between and then finally

00:03:55,650 --> 00:03:58,950
you get the picture that looks like

00:03:57,180 --> 00:04:01,079
today where you have a highly

00:03:58,950 --> 00:04:03,450
disaggregated system applications run on

00:04:01,079 --> 00:04:08,250
any infrastructure you don't go by the

00:04:03,450 --> 00:04:09,989
the trading computer and the database

00:04:08,250 --> 00:04:12,599
computer and the servants or computer

00:04:09,989 --> 00:04:13,919
what you do is you say i bought generic

00:04:12,599 --> 00:04:16,410
infrastructure and i'm going to run

00:04:13,919 --> 00:04:17,729
whatever compute app i want on it if you

00:04:16,410 --> 00:04:20,549
look at all the applications we've been

00:04:17,729 --> 00:04:23,280
talking about even today right xdp ebps

00:04:20,549 --> 00:04:26,940
yes they can both be offloaded wherever

00:04:23,280 --> 00:04:28,620
gemma is and and and so on and so forth

00:04:26,940 --> 00:04:30,750
the fundamental idea there is that

00:04:28,620 --> 00:04:33,330
you're basically saying I don't want to

00:04:30,750 --> 00:04:35,400
rebuild my hardware infrastructure so I

00:04:33,330 --> 00:04:38,220
can run a slightly more innovative or

00:04:35,400 --> 00:04:40,710
largely more innovative application what

00:04:38,220 --> 00:04:42,390
we kinless and I think this community

00:04:40,710 --> 00:04:44,160
needs to get to is where the bottom

00:04:42,390 --> 00:04:46,710
picture begins to look the same so you

00:04:44,160 --> 00:04:49,170
have networking today that still

00:04:46,710 --> 00:04:51,330
fundamentally looks like big iron boxes

00:04:49,170 --> 00:04:54,480
it's back in the 80s mode of operation

00:04:51,330 --> 00:04:56,450
it's monolithic it's invisible it's hard

00:04:54,480 --> 00:04:58,500
to manage it creates its own ecosystem

00:04:56,450 --> 00:05:00,600
into something that looks more like a

00:04:58,500 --> 00:05:03,530
generic IP fabric and then eventually

00:05:00,600 --> 00:05:07,250
the whole data center is the Linux

00:05:03,530 --> 00:05:11,100
expression and not the other way around

00:05:07,250 --> 00:05:13,740
so where do we want to go right then and

00:05:11,100 --> 00:05:15,570
it's a little bit of a future looking

00:05:13,740 --> 00:05:17,310
statement but it's also a little bit of

00:05:15,570 --> 00:05:19,320
a present statement because this is

00:05:17,310 --> 00:05:20,570
happening this this transition is

00:05:19,320 --> 00:05:22,680
already happening today and

00:05:20,570 --> 00:05:25,140
fundamentally what we want to get to is

00:05:22,680 --> 00:05:28,260
we want to get to the point where the

00:05:25,140 --> 00:05:30,900
physical switches and routers also run

00:05:28,260 --> 00:05:33,600
linux and this is an interesting point

00:05:30,900 --> 00:05:37,110
and I'll dwell on this slide for a few

00:05:33,600 --> 00:05:39,330
minutes because in this universe and in

00:05:37,110 --> 00:05:41,430
this infrastructure the data plane of

00:05:39,330 --> 00:05:43,830
Linux is sort of de-emphasized a little

00:05:41,430 --> 00:05:45,780
bit but the control plane all the

00:05:43,830 --> 00:05:49,560
protocols are on the way interfaces are

00:05:45,780 --> 00:05:51,720
managed the way objects are represented

00:05:49,560 --> 00:05:54,570
the way a pipeline is represented is

00:05:51,720 --> 00:05:56,880
still the fundamental linux kernel

00:05:54,570 --> 00:05:59,310
pipeline and if you keep it that way

00:05:56,880 --> 00:06:02,100
what you get to be able to say is that

00:05:59,310 --> 00:06:04,169
those black spider boxes can now live on

00:06:02,100 --> 00:06:07,260
every element in your system and you

00:06:04,169 --> 00:06:09,360
don't have to wonder whether you can run

00:06:07,260 --> 00:06:10,770
an ex DP program in your network or you

00:06:09,360 --> 00:06:12,440
can run it on your host you don't have

00:06:10,770 --> 00:06:15,150
to wonder whether you can run wireshark

00:06:12,440 --> 00:06:17,310
in your network or in your host you

00:06:15,150 --> 00:06:20,070
don't have to have a conversation in the

00:06:17,310 --> 00:06:22,830
company of oh I put 2 pi want to put a

00:06:20,070 --> 00:06:24,120
VLAN on my host how the hell do I put

00:06:22,830 --> 00:06:27,030
that chain we land on the switch that

00:06:24,120 --> 00:06:29,550
it's connected to and the thing that I

00:06:27,030 --> 00:06:33,000
want to sort of emphasize and make sure

00:06:29,550 --> 00:06:35,400
everybody agrees to is the solution from

00:06:33,000 --> 00:06:37,620
a networking perspective only works when

00:06:35,400 --> 00:06:39,810
this whole picture has been realized in

00:06:37,620 --> 00:06:41,700
the absence of realizing this picture

00:06:39,810 --> 00:06:44,950
you're always going to have

00:06:41,700 --> 00:06:47,200
discontinuity lack of completeness at

00:06:44,950 --> 00:06:50,590
the boundary between where the host and

00:06:47,200 --> 00:06:52,420
the network meet and the one fact I

00:06:50,590 --> 00:06:54,940
think it's a reality for us all today is

00:06:52,420 --> 00:06:56,740
that the host without the network will

00:06:54,940 --> 00:06:58,330
not survive because everything has been

00:06:56,740 --> 00:07:00,370
built around a scale-out model whether

00:06:58,330 --> 00:07:02,080
it's the public cloud people or their

00:07:00,370 --> 00:07:03,640
private cloud people or even your home

00:07:02,080 --> 00:07:05,830
data center most of us have more than

00:07:03,640 --> 00:07:12,220
one computer at home running a network

00:07:05,830 --> 00:07:14,140
that stitches them all together so this

00:07:12,220 --> 00:07:16,870
slide mostly is there just to make a

00:07:14,140 --> 00:07:19,900
point right if you look at why linux is

00:07:16,870 --> 00:07:22,480
that i don't and to sort of analyze the

00:07:19,900 --> 00:07:24,850
point i just made you look at everything

00:07:22,480 --> 00:07:27,880
that's here and this is a smattering if

00:07:24,850 --> 00:07:31,300
I have missed somebody's commit I'm

00:07:27,880 --> 00:07:33,580
sorry it was not a point to go highlight

00:07:31,300 --> 00:07:36,040
specific things or uh nordy highlight

00:07:33,580 --> 00:07:37,240
specific things the point here was to

00:07:36,040 --> 00:07:40,060
make the point I'm trying to make here

00:07:37,240 --> 00:07:44,290
is if you look at the Linux kernel it's

00:07:40,060 --> 00:07:46,840
today by far the top vehicle for

00:07:44,290 --> 00:07:49,690
innovation you look at this list and

00:07:46,840 --> 00:07:53,920
this is I used to say 2015 jamel made me

00:07:49,690 --> 00:07:55,150
say 2016 as well and and actually

00:07:53,920 --> 00:07:57,400
there's a point there and I want to make

00:07:55,150 --> 00:07:58,990
it which is it's because most of these

00:07:57,400 --> 00:08:02,650
things are still in development and

00:07:58,990 --> 00:08:05,410
that's a good thing we were able to as a

00:08:02,650 --> 00:08:07,450
community bring innovative features to

00:08:05,410 --> 00:08:10,930
the market lead the market in certain

00:08:07,450 --> 00:08:13,630
directions and we have the horsepower

00:08:10,930 --> 00:08:15,940
the community passion to be able to keep

00:08:13,630 --> 00:08:18,730
working on it and to keep improving it

00:08:15,940 --> 00:08:21,850
till it becomes a highly usable feature

00:08:18,730 --> 00:08:23,590
this is not something that pretty much

00:08:21,850 --> 00:08:26,320
anybody in this industry can lay claim

00:08:23,590 --> 00:08:28,810
to this is a real problem right i mean

00:08:26,320 --> 00:08:30,550
most people talk about highly

00:08:28,810 --> 00:08:32,260
established vendors in the space and

00:08:30,550 --> 00:08:35,560
they are still talking about the top

00:08:32,260 --> 00:08:37,510
feature being in data for a year because

00:08:35,560 --> 00:08:40,570
that's how long it takes for them to go

00:08:37,510 --> 00:08:43,120
from I have a thought so I can actually

00:08:40,570 --> 00:08:45,370
validate this use case whereas if you

00:08:43,120 --> 00:08:47,290
are leveraging this community you get to

00:08:45,370 --> 00:08:49,990
short-circuit that and speed that up in

00:08:47,290 --> 00:08:52,750
ways that no one vendor can ever hope to

00:08:49,990 --> 00:08:54,430
achieve or hope to compete with and this

00:08:52,750 --> 00:08:54,760
list is actually very impressive I mean

00:08:54,430 --> 00:08:57,640
some of

00:08:54,760 --> 00:09:00,310
these bullets are not equivalent some

00:08:57,640 --> 00:09:02,830
bullets represent tons of work and some

00:09:00,310 --> 00:09:06,100
not so much but it's a very very

00:09:02,830 --> 00:09:11,940
impressive list and then there is a GP

00:09:06,100 --> 00:09:14,470
and this if not just because dave is so

00:09:11,940 --> 00:09:17,350
passionate about xdp but it's also

00:09:14,470 --> 00:09:19,660
because it addresses a very explicit

00:09:17,350 --> 00:09:21,190
requirement in our networks today which

00:09:19,660 --> 00:09:24,190
is people are building networking

00:09:21,190 --> 00:09:26,320
appliances and then doing all kinds of

00:09:24,190 --> 00:09:29,260
short circuits and breaking the Linux

00:09:26,320 --> 00:09:30,640
infrastructure and I mean the point that

00:09:29,260 --> 00:09:33,250
I maybe should have put in one of the

00:09:30,640 --> 00:09:35,800
slides but i did is networking it about

00:09:33,250 --> 00:09:37,330
interconnecting things and you cannot

00:09:35,800 --> 00:09:38,940
interconnect things if you don't know

00:09:37,330 --> 00:09:42,160
what the hell is on the other side and

00:09:38,940 --> 00:09:44,350
to be able to establish that something

00:09:42,160 --> 00:09:46,060
is that is on the other side is going to

00:09:44,350 --> 00:09:48,700
be able to talk to you you need a mortal

00:09:46,060 --> 00:09:50,860
and that's what linux provides its linux

00:09:48,700 --> 00:09:54,670
is the model then doing things with a

00:09:50,860 --> 00:09:58,300
with HDTV BPF that well understood and

00:09:54,670 --> 00:10:01,300
sanctioned interfaces is a giant step

00:09:58,300 --> 00:10:02,950
forward then just completely subverting

00:10:01,300 --> 00:10:05,050
Linux doing everything on your own and

00:10:02,950 --> 00:10:07,060
having people wonder whether app is

00:10:05,050 --> 00:10:08,740
going to work for you or not which is if

00:10:07,060 --> 00:10:13,450
you think about it a very very scary

00:10:08,740 --> 00:10:15,910
place to be so who is cumulus and why

00:10:13,450 --> 00:10:18,550
would why would anyone care so what

00:10:15,910 --> 00:10:20,770
cumulus is doing and has been doing for

00:10:18,550 --> 00:10:22,600
a while now is to effectively bring the

00:10:20,770 --> 00:10:24,910
idea of web scale networking for the

00:10:22,600 --> 00:10:27,430
enterprise cloud now clearly there are

00:10:24,910 --> 00:10:29,200
people in this room who built massive

00:10:27,430 --> 00:10:31,420
infrastructure on the networking side

00:10:29,200 --> 00:10:34,000
along the lines of what I'm talking but

00:10:31,420 --> 00:10:36,160
this is not news to a lot of people what

00:10:34,000 --> 00:10:37,390
what we have done is we've created a

00:10:36,160 --> 00:10:40,570
distribution it's a debian based

00:10:37,390 --> 00:10:42,970
distribution it runs your linux in a

00:10:40,570 --> 00:10:44,830
sense and the user interface the

00:10:42,970 --> 00:10:47,410
application interface is the earlier

00:10:44,830 --> 00:10:49,480
Linux experience it runs on open

00:10:47,410 --> 00:10:52,260
hardware and therefore allows you to

00:10:49,480 --> 00:10:54,610
benefit from the entire Linux ecosystem

00:10:52,260 --> 00:10:56,680
not just the people in this room but

00:10:54,610 --> 00:10:59,800
it's a much larger ecosystem of people

00:10:56,680 --> 00:11:01,840
who write apps against Linux VMS people

00:10:59,800 --> 00:11:04,600
who test automation tools against the

00:11:01,840 --> 00:11:07,450
next VMS people who for whom if you ever

00:11:04,600 --> 00:11:08,390
took linux off the table they wouldn't

00:11:07,450 --> 00:11:11,330
know what to do

00:11:08,390 --> 00:11:14,840
in their entire day that's the ecosystem

00:11:11,330 --> 00:11:18,050
that this solution sort of benefit from

00:11:14,840 --> 00:11:20,090
and in return what you get is customers

00:11:18,050 --> 00:11:24,380
that are able to use a wide variety of

00:11:20,090 --> 00:11:25,880
hardware and be able to benefit from all

00:11:24,380 --> 00:11:31,250
the advances that this community has

00:11:25,880 --> 00:11:34,880
made over the years so the question that

00:11:31,250 --> 00:11:36,860
I am here to talk about is we believe

00:11:34,880 --> 00:11:40,340
that solution is possible we believe all

00:11:36,860 --> 00:11:42,860
the components exist why isn't Linux

00:11:40,340 --> 00:11:46,280
what is running every enterprises

00:11:42,860 --> 00:11:47,720
network I mean this is a question that

00:11:46,280 --> 00:11:49,760
is worth pondering right it's if

00:11:47,720 --> 00:11:52,790
everything was there and it was easy and

00:11:49,760 --> 00:11:55,820
accessible and and the ecosystem is

00:11:52,790 --> 00:11:58,580
there why is it not prevalent everywhere

00:11:55,820 --> 00:12:01,040
so that the simple answer is packaging

00:11:58,580 --> 00:12:02,900
there's a few things that need to be

00:12:01,040 --> 00:12:04,520
worked on some of them require Colonel

00:12:02,900 --> 00:12:07,280
work and we'll talk about them in a

00:12:04,520 --> 00:12:10,100
second there's a few things that require

00:12:07,280 --> 00:12:12,320
a greater ecosystem outside the colonel

00:12:10,100 --> 00:12:13,940
will talk about that as well and then

00:12:12,320 --> 00:12:16,010
there's the mindset and focus and

00:12:13,940 --> 00:12:18,170
understanding and what I'm hoping to

00:12:16,010 --> 00:12:20,000
achieve here is to have a greater

00:12:18,170 --> 00:12:22,910
appreciation in the community of all

00:12:20,000 --> 00:12:24,560
three of them so let's talk with the

00:12:22,910 --> 00:12:26,270
things that are the features that are in

00:12:24,560 --> 00:12:28,760
the kernel that that have a major impact

00:12:26,270 --> 00:12:31,280
and enterprise the very first one is eat

00:12:28,760 --> 00:12:33,710
stool and and I'm sure there's a large

00:12:31,280 --> 00:12:35,240
number of people even in this room seyi

00:12:33,710 --> 00:12:39,230
to layer that thing that gives you some

00:12:35,240 --> 00:12:41,930
some numbers but when you're in an

00:12:39,230 --> 00:12:43,850
enterprise network and and this is a

00:12:41,930 --> 00:12:46,250
number that will order statistic that

00:12:43,850 --> 00:12:48,440
will shock some people I suspect you're

00:12:46,250 --> 00:12:50,120
spending more money on cables than any

00:12:48,440 --> 00:12:53,510
other piece of equipment in your data

00:12:50,120 --> 00:12:55,700
center e to suddenly becomes a very very

00:12:53,510 --> 00:12:58,850
important thing your ability to identify

00:12:55,700 --> 00:13:01,250
a cable to see if its operating in its

00:12:58,850 --> 00:13:02,900
right operating parameters whether the

00:13:01,250 --> 00:13:05,990
error rate is right or wrong if it's

00:13:02,900 --> 00:13:08,990
identified the right way or not it's a

00:13:05,990 --> 00:13:11,570
very big deal and in in sort of the

00:13:08,990 --> 00:13:13,360
Linux ecosystem the forefront the

00:13:11,570 --> 00:13:16,070
component the tool that defines

00:13:13,360 --> 00:13:17,990
validates tests whether a cable is to

00:13:16,070 --> 00:13:21,209
spec whether the programming of the

00:13:17,990 --> 00:13:23,519
cable is correct or not is e2 and

00:13:21,209 --> 00:13:26,220
as some of us I'm sure some of you know

00:13:23,519 --> 00:13:29,970
we are having this transition from 10

00:13:26,220 --> 00:13:32,699
gig 48 to 20 500 gig this is a big big

00:13:29,970 --> 00:13:34,589
step and it's a it's got lots of

00:13:32,699 --> 00:13:37,129
complications and no answers about how

00:13:34,589 --> 00:13:39,360
auto error correction happens and

00:13:37,129 --> 00:13:41,850
auto-negotiation works and a whole bunch

00:13:39,360 --> 00:13:43,259
of other things and that all needs to go

00:13:41,850 --> 00:13:45,029
into each tool that needs to become the

00:13:43,259 --> 00:13:47,279
de facto standard that needs to be the

00:13:45,029 --> 00:13:50,970
thing that everybody can hang their hat

00:13:47,279 --> 00:13:52,410
on without any any hesitation cumulus

00:13:50,970 --> 00:13:54,480
has been obviously working in this space

00:13:52,410 --> 00:13:55,860
quite a bit and you know there are

00:13:54,480 --> 00:13:59,759
people in the community who want to do

00:13:55,860 --> 00:14:02,249
more more encouragement from us the

00:13:59,759 --> 00:14:04,679
second thing is the bridging model again

00:14:02,249 --> 00:14:06,269
a favorite whipping boy for a lot of

00:14:04,679 --> 00:14:07,709
people the bridge is slow the bridges

00:14:06,269 --> 00:14:11,420
problem the bridges the bridge is that

00:14:07,709 --> 00:14:15,350
it turns out that in physical networks

00:14:11,420 --> 00:14:18,029
today the number one model is a bridge

00:14:15,350 --> 00:14:19,649
because mostly because of the rise of

00:14:18,029 --> 00:14:21,629
enterprise networks being built around

00:14:19,649 --> 00:14:24,119
the likes of virtual switches which

00:14:21,629 --> 00:14:26,639
expect everybody to be on a large layer

00:14:24,119 --> 00:14:28,769
to segment the physical devices

00:14:26,639 --> 00:14:30,119
underneath our dumb bridges but they

00:14:28,769 --> 00:14:33,360
need to support all of the bridging

00:14:30,119 --> 00:14:35,730
protocols stp needs to work networks

00:14:33,360 --> 00:14:39,299
need to not melt it's kind of a strange

00:14:35,730 --> 00:14:41,100
requirement and and a whole bunch of

00:14:39,299 --> 00:14:43,290
functions that sit on top of it need to

00:14:41,100 --> 00:14:46,139
work in a reliable way you don't have

00:14:43,290 --> 00:14:50,699
these they don't play another example

00:14:46,139 --> 00:14:51,600
multicast I think anybody who's I'm

00:14:50,699 --> 00:14:53,369
going to say something slightly

00:14:51,600 --> 00:14:56,459
offensive but anybody who's a big

00:14:53,369 --> 00:14:57,509
proponent of multicast today should we

00:14:56,459 --> 00:15:00,449
examine whether that's the right

00:14:57,509 --> 00:15:02,459
position to take or not however there

00:15:00,449 --> 00:15:05,009
are many many many enterprise networks

00:15:02,459 --> 00:15:06,540
where multicast is implicit to the way

00:15:05,009 --> 00:15:08,279
they work they use it for rendezvous

00:15:06,540 --> 00:15:10,410
they use it to figure out if a service

00:15:08,279 --> 00:15:12,240
is alive or not they have legacy

00:15:10,410 --> 00:15:14,850
applications that have high performance

00:15:12,240 --> 00:15:16,889
multicast and then there are the trading

00:15:14,850 --> 00:15:21,029
and financial segments that use

00:15:16,889 --> 00:15:22,649
multicast in a very in a far more

00:15:21,029 --> 00:15:25,429
efficient way and actually probably is

00:15:22,649 --> 00:15:28,379
the one right use case for multicast now

00:15:25,429 --> 00:15:30,089
we as a group can say okay multicast

00:15:28,379 --> 00:15:31,860
doesn't need to be in most of the

00:15:30,089 --> 00:15:33,029
high-performance path because you know

00:15:31,860 --> 00:15:33,960
virtual machines don't need them

00:15:33,029 --> 00:15:36,570
containers only

00:15:33,960 --> 00:15:38,820
all the progressive technologies don't

00:15:36,570 --> 00:15:40,260
need them however the model needs to be

00:15:38,820 --> 00:15:42,870
preserved and backward compatibility

00:15:40,260 --> 00:15:44,370
needs to be there and if you are going

00:15:42,870 --> 00:15:45,660
to ever get into an enterprise network

00:15:44,370 --> 00:15:48,390
these functions have to work the way

00:15:45,660 --> 00:15:49,980
they need to work the last one is the

00:15:48,390 --> 00:15:53,640
excellence que Linda actually it's a

00:15:49,980 --> 00:15:56,430
it's more about scale the problem if you

00:15:53,640 --> 00:15:59,490
look at a host typically is your 4 8 10

00:15:56,430 --> 00:16:02,940
16 interfaces most switching devices

00:15:59,490 --> 00:16:05,070
come with 128 devices can go up to like

00:16:02,940 --> 00:16:07,680
tens of thousands of virtual devices at

00:16:05,070 --> 00:16:08,880
the end of the day you've if you're

00:16:07,680 --> 00:16:10,940
following the mailing list you'll see

00:16:08,880 --> 00:16:14,520
cumulus people are always talking about

00:16:10,940 --> 00:16:16,800
netdev scale and netlink scale and all

00:16:14,520 --> 00:16:19,920
of these objects that the colonel is

00:16:16,800 --> 00:16:21,750
moving around and at some point these

00:16:19,920 --> 00:16:23,820
relatively small objects become

00:16:21,750 --> 00:16:26,430
incredibly complex and incredibly hard

00:16:23,820 --> 00:16:28,580
to move around at high speed and it's

00:16:26,430 --> 00:16:31,080
again it's a slight shift in focus

00:16:28,580 --> 00:16:32,880
instead of thinking of a box of having

00:16:31,080 --> 00:16:34,830
single digit number of interfaces if you

00:16:32,880 --> 00:16:37,020
start thinking of them as having three

00:16:34,830 --> 00:16:40,010
digit number of interfaces a lot of

00:16:37,020 --> 00:16:40,010
things begin to look a lot different

00:16:40,190 --> 00:16:45,780
route path selection I think for anybody

00:16:43,920 --> 00:16:47,730
who's looked at routing in the linux

00:16:45,780 --> 00:16:51,750
kernel you'll know that we have a large

00:16:47,730 --> 00:16:54,660
beef or v6 mindset difference the v6

00:16:51,750 --> 00:16:56,160
implementation came in later came in

00:16:54,660 --> 00:16:58,950
with a much cleaner approach in some

00:16:56,160 --> 00:17:01,080
ways but the v4 implementation has had a

00:16:58,950 --> 00:17:03,600
lot of legacy has had many years and

00:17:01,080 --> 00:17:05,820
many iterations of work there was the

00:17:03,600 --> 00:17:08,520
routing cash solution which is now much

00:17:05,820 --> 00:17:10,530
improved with with removing it and

00:17:08,520 --> 00:17:14,520
having policy enforcement in a far more

00:17:10,530 --> 00:17:15,690
reasonable way however if you look at

00:17:14,520 --> 00:17:18,330
this from the perspective of an

00:17:15,690 --> 00:17:19,800
enterprise user they don't understand

00:17:18,330 --> 00:17:21,390
the difference they don't want to know

00:17:19,800 --> 00:17:24,959
why it makes sense to the Linux

00:17:21,390 --> 00:17:27,600
community to them it's a mind boggling

00:17:24,959 --> 00:17:30,150
thing that before is done one way and v6

00:17:27,600 --> 00:17:32,280
has done a different way so we as a

00:17:30,150 --> 00:17:35,700
community have to figure out pathways

00:17:32,280 --> 00:17:38,820
how we can without abandoning the legacy

00:17:35,700 --> 00:17:40,710
users in in the way that we move forward

00:17:38,820 --> 00:17:42,510
unify these things such that the end

00:17:40,710 --> 00:17:44,520
user experience for v4 and v6 is

00:17:42,510 --> 00:17:46,290
actually seamless because the one thing

00:17:44,520 --> 00:17:47,250
we do know is that more and more

00:17:46,290 --> 00:17:49,710
companies that go

00:17:47,250 --> 00:17:51,900
two words v6 and more and more companies

00:17:49,710 --> 00:17:53,490
understand the value of the larger

00:17:51,900 --> 00:17:56,660
address space and all of the functional

00:17:53,490 --> 00:18:02,130
improvements that we six brought with it

00:17:56,660 --> 00:18:04,560
BRF as Tom mentioned we spend a bunch of

00:18:02,130 --> 00:18:06,710
time on this David David aaron's been

00:18:04,560 --> 00:18:09,720
spending a bunch of time making this a

00:18:06,710 --> 00:18:13,130
first and first class citizen for a

00:18:09,720 --> 00:18:16,620
whole bunch of applications and the one

00:18:13,130 --> 00:18:19,020
major thing here is without a key

00:18:16,620 --> 00:18:21,300
component like the RS you cannot

00:18:19,020 --> 00:18:23,940
actually go into a large multi-tenancy

00:18:21,300 --> 00:18:25,650
lyrically cloud you need to be able to

00:18:23,940 --> 00:18:28,710
separate your layer three segments think

00:18:25,650 --> 00:18:30,090
of it as vlans for layer 3 and this was

00:18:28,710 --> 00:18:32,640
one of the reasons I cumulus took such a

00:18:30,090 --> 00:18:35,580
large interest in it and I believe that

00:18:32,640 --> 00:18:36,810
as we go forward you will see more if

00:18:35,580 --> 00:18:38,730
you are building a more and more

00:18:36,810 --> 00:18:39,960
integrated solution between the host and

00:18:38,730 --> 00:18:42,690
the physical Network you are going to

00:18:39,960 --> 00:18:44,910
use mechanisms like the RF to build

00:18:42,690 --> 00:18:49,800
those segments and to separate them out

00:18:44,910 --> 00:18:52,560
end-to-end and the last thing along the

00:18:49,800 --> 00:18:54,720
same line now it's kind of boring

00:18:52,560 --> 00:18:57,480
repetitive team is mpls so it's auntie

00:18:54,720 --> 00:18:59,160
alice is the label based forwarding

00:18:57,480 --> 00:19:01,470
technology that a lot of service

00:18:59,160 --> 00:19:03,810
providers use a judge as edge networks

00:19:01,470 --> 00:19:05,580
and if you look at the picture that I

00:19:03,810 --> 00:19:07,800
was drawing the piece of the picture

00:19:05,580 --> 00:19:09,450
that I didn't have was how does that

00:19:07,800 --> 00:19:12,030
edge router eventually connect to the

00:19:09,450 --> 00:19:13,740
internet ninety-nine point nine percent

00:19:12,030 --> 00:19:16,170
today that's an MPLS circuit of some

00:19:13,740 --> 00:19:18,390
kind and if you really are going to get

00:19:16,170 --> 00:19:21,270
to the point where n 2 and functionality

00:19:18,390 --> 00:19:23,820
is going to be available then you need

00:19:21,270 --> 00:19:26,550
to have mpls and it was for this reason

00:19:23,820 --> 00:19:30,030
that Eric started mpls program group

00:19:26,550 --> 00:19:33,210
added LWT editions and we've had a bunch

00:19:30,030 --> 00:19:36,440
of other people contribute on fixing the

00:19:33,210 --> 00:19:39,540
MPLS data part and what I want to

00:19:36,440 --> 00:19:41,790
emphasize here sort of again at an

00:19:39,540 --> 00:19:44,010
overall level is you look at these

00:19:41,790 --> 00:19:45,660
things that as a totality and you

00:19:44,010 --> 00:19:47,670
realize that these are things that are

00:19:45,660 --> 00:19:49,740
needed for the enterprise networks to

00:19:47,670 --> 00:19:52,430
make progress they cannot move forward

00:19:49,740 --> 00:19:56,010
without components like this being

00:19:52,430 --> 00:19:57,630
first-class citizens being comparable to

00:19:56,010 --> 00:19:59,850
what is the standard in the industry

00:19:57,630 --> 00:20:00,909
today and and that's what we've

00:19:59,850 --> 00:20:02,700
obviously didn't focus

00:20:00,909 --> 00:20:07,960
but i would encourage a larger

00:20:02,700 --> 00:20:10,419
participation in the community and once

00:20:07,960 --> 00:20:13,269
you have the colonel going as we all

00:20:10,419 --> 00:20:17,229
know right i mean i think we all have i

00:20:13,269 --> 00:20:20,080
suspect at some point unconsciously

00:20:17,229 --> 00:20:22,869
substituted linux from a kernel to a

00:20:20,080 --> 00:20:26,830
distribution because it's become sort of

00:20:22,869 --> 00:20:29,289
a easy word for many many different

00:20:26,830 --> 00:20:30,849
implications and applications today so

00:20:29,289 --> 00:20:32,979
you need a bigger ecosystem right a

00:20:30,849 --> 00:20:35,499
colonel by itself doesn't interact with

00:20:32,979 --> 00:20:37,359
users because it has no user space so

00:20:35,499 --> 00:20:39,940
there are things you need to do and

00:20:37,359 --> 00:20:42,429
we'll cover them in separate slides but

00:20:39,940 --> 00:20:45,309
you need to have an ecosystem so we did

00:20:42,429 --> 00:20:49,809
things like Oni which allows a switch to

00:20:45,309 --> 00:20:54,399
be remote booted which was a huge step

00:20:49,809 --> 00:20:56,499
forward in 2013 which blew my mind we'll

00:20:54,399 --> 00:20:58,929
talk about fr are a little bit it's a

00:20:56,499 --> 00:21:01,450
routing suite that Kim has contributed

00:20:58,929 --> 00:21:04,539
to the linux foundation along the tix

00:21:01,450 --> 00:21:08,919
wind and orange and a few other few

00:21:04,539 --> 00:21:11,440
other companies and the point I wanted

00:21:08,919 --> 00:21:15,070
to make was the routing performance in

00:21:11,440 --> 00:21:16,869
your box matters and today the colonel

00:21:15,070 --> 00:21:18,070
teach the routing policy outside the

00:21:16,869 --> 00:21:22,210
kernel which is the right thing to do

00:21:18,070 --> 00:21:24,999
and for that matter you need a vibrant

00:21:22,210 --> 00:21:27,489
open routing stack a stack that actually

00:21:24,999 --> 00:21:29,799
applies to a whole bunch of applications

00:21:27,489 --> 00:21:32,019
is accessible to a whole bunch of

00:21:29,799 --> 00:21:35,950
developers and allows you to build a

00:21:32,019 --> 00:21:38,169
routed fabric that is coherent with the

00:21:35,950 --> 00:21:39,519
modern technology so so we'll talk more

00:21:38,169 --> 00:21:41,889
about that will come to that but it

00:21:39,519 --> 00:21:45,249
actually is one of the engines that

00:21:41,889 --> 00:21:48,609
feels and feeds technologies like switch

00:21:45,249 --> 00:21:51,099
there that will allow over time to have

00:21:48,609 --> 00:21:53,289
a basic device driver interface that

00:21:51,099 --> 00:21:55,239
says now the routing to it doesn't care

00:21:53,289 --> 00:21:56,830
what's underneath me bring in the

00:21:55,239 --> 00:21:58,509
hardware that works being in the harbor

00:21:56,830 --> 00:22:00,970
with a driver that's at the right level

00:21:58,509 --> 00:22:04,299
my routing performance my routing

00:22:00,970 --> 00:22:07,269
compatibility my networking aspect of my

00:22:04,299 --> 00:22:10,479
network box is still well understood and

00:22:07,269 --> 00:22:13,610
it's encapsulated by farhat another

00:22:10,479 --> 00:22:16,040
thing that we do did sorry is

00:22:13,610 --> 00:22:18,950
we worked a lot in user interfaces same

00:22:16,040 --> 00:22:22,040
thing again right if you're managing for

00:22:18,950 --> 00:22:24,860
interfaces on a server Linux is ok

00:22:22,040 --> 00:22:26,750
manageable you get to 10 15 even then

00:22:24,860 --> 00:22:29,330
network manager and all the other things

00:22:26,750 --> 00:22:32,299
start kicking in and I'm sure if we took

00:22:29,330 --> 00:22:35,270
a poll here network manager would get

00:22:32,299 --> 00:22:39,490
less than fifty percent of people going

00:22:35,270 --> 00:22:44,090
yeah that's the tool i dream about using

00:22:39,490 --> 00:22:46,130
exactly so so rupa actually spent a

00:22:44,090 --> 00:22:48,679
bunch of time doing building this thing

00:22:46,130 --> 00:22:50,360
called life up down to which is a real

00:22:48,679 --> 00:22:51,710
doc again more a little bit more about

00:22:50,360 --> 00:22:54,260
it in a second but it's a highly

00:22:51,710 --> 00:22:55,669
extensible interface management system

00:22:54,260 --> 00:22:58,280
which was required for enterprise users

00:22:55,669 --> 00:23:02,270
because i'll give you a simple example

00:22:58,280 --> 00:23:05,210
if you have to add five vlans 264 ports

00:23:02,270 --> 00:23:08,960
you have to go edit like a 250 line

00:23:05,210 --> 00:23:11,270
config file which is not just annoying

00:23:08,960 --> 00:23:13,700
and boring and highly confusing it's

00:23:11,270 --> 00:23:15,710
also incredibly prone to errors and you

00:23:13,700 --> 00:23:17,780
want to not have that kind of problem in

00:23:15,710 --> 00:23:21,410
an enterprise network you do not want to

00:23:17,780 --> 00:23:23,750
find out the New York Times Network came

00:23:21,410 --> 00:23:25,580
down because somebody mistyped a five

00:23:23,750 --> 00:23:28,280
instead of a six and uploaded that

00:23:25,580 --> 00:23:29,750
configuration it's a it's a kind of

00:23:28,280 --> 00:23:33,110
problem you never want to have to go

00:23:29,750 --> 00:23:35,120
explain to anybody else about we did

00:23:33,110 --> 00:23:37,070
this single ncl you will talk more about

00:23:35,120 --> 00:23:40,040
that as well and we talked about the

00:23:37,070 --> 00:23:42,020
protocols and in the protocol space the

00:23:40,040 --> 00:23:43,549
two things that we are very focused on

00:23:42,020 --> 00:23:46,340
right now and I think the industry as a

00:23:43,549 --> 00:23:48,650
whole is very focused on is a VPN and

00:23:46,340 --> 00:23:51,200
mpls and both of them effectively allow

00:23:48,650 --> 00:23:54,110
you to build what the industry would

00:23:51,200 --> 00:23:56,480
call LC VPNs alerts the virtual private

00:23:54,110 --> 00:23:59,150
network so that i can now create

00:23:56,480 --> 00:24:01,340
isolated segments create tenants route

00:23:59,150 --> 00:24:02,960
between them efficiently and route into

00:24:01,340 --> 00:24:06,200
them efficiently from outside the

00:24:02,960 --> 00:24:08,150
network you will see a lot more work

00:24:06,200 --> 00:24:09,860
coming from us in this space and i

00:24:08,150 --> 00:24:12,950
suspect you will see a lot more work in

00:24:09,860 --> 00:24:14,630
both of those protocols spaces as we go

00:24:12,950 --> 00:24:20,780
forward as we move into enterprise

00:24:14,630 --> 00:24:23,270
networking so this was an example of

00:24:20,780 --> 00:24:25,100
something we've done the pages a little

00:24:23,270 --> 00:24:26,780
hard to read or the slide is a little

00:24:25,100 --> 00:24:27,200
hard to read this is an ubuntu packages

00:24:26,780 --> 00:24:29,570
list

00:24:27,200 --> 00:24:31,730
as I've gone to has been submitted it's

00:24:29,570 --> 00:24:36,710
actually if you can read this from

00:24:31,730 --> 00:24:39,049
behind it in the genial LTS package list

00:24:36,710 --> 00:24:40,940
you can install it run it do what you

00:24:39,049 --> 00:24:43,340
want to do with it I encourage people to

00:24:40,940 --> 00:24:44,960
adopt it in every every distribution

00:24:43,340 --> 00:24:49,340
possible because once you start looking

00:24:44,960 --> 00:24:50,960
at large scale device lists we have some

00:24:49,340 --> 00:24:53,779
experience to be able to say that this

00:24:50,960 --> 00:24:55,519
is important it supports templating it

00:24:53,779 --> 00:24:57,230
handles dependencies that validates

00:24:55,519 --> 00:25:00,710
configuration it's written in Python

00:24:57,230 --> 00:25:04,190
it's extensible it slices bread so it

00:25:00,710 --> 00:25:06,200
doesn't do that and for a debian

00:25:04,190 --> 00:25:09,130
distribution you can just use it but if

00:25:06,200 --> 00:25:11,419
you are young or a red hat based

00:25:09,130 --> 00:25:14,720
distribution and somebody wants to go

00:25:11,419 --> 00:25:20,750
try porting it and packaging it you will

00:25:14,720 --> 00:25:22,490
get all the support you want from us we

00:25:20,750 --> 00:25:24,260
talked about the single and CLU this is

00:25:22,490 --> 00:25:26,059
another thing right so we would go to

00:25:24,260 --> 00:25:27,710
these enterprise users time and time

00:25:26,059 --> 00:25:30,710
again and like I said they don't want to

00:25:27,710 --> 00:25:32,120
edit vlans and 200 lines they don't want

00:25:30,710 --> 00:25:34,070
to have to go figure out that if I

00:25:32,120 --> 00:25:37,549
change my IP address here I need to

00:25:34,070 --> 00:25:39,289
restart my DHCP server or I need to

00:25:37,549 --> 00:25:41,510
restart my name server and they don't

00:25:39,289 --> 00:25:44,000
want to understand how each of these

00:25:41,510 --> 00:25:46,549
demons have potential cross linkages and

00:25:44,000 --> 00:25:48,440
when and where these linkages break and

00:25:46,549 --> 00:25:50,200
if they renamed an interface who all do

00:25:48,440 --> 00:25:54,380
they need to tell and so on and so forth

00:25:50,200 --> 00:25:56,570
so so we had a big problem right and we

00:25:54,380 --> 00:25:58,580
said okay so the answer is a CLI like

00:25:56,570 --> 00:26:01,490
every other network switching vendor in

00:25:58,580 --> 00:26:03,649
the world and there are many people

00:26:01,490 --> 00:26:05,269
including me who said never because that

00:26:03,649 --> 00:26:06,799
fundamentally breaks Linux it

00:26:05,269 --> 00:26:09,440
fundamentally breaks the Linux user

00:26:06,799 --> 00:26:11,870
space interface so after much

00:26:09,440 --> 00:26:14,750
armwrestling hand wrangling and

00:26:11,870 --> 00:26:16,519
discussions and conversations we came up

00:26:14,750 --> 00:26:18,500
with a very clever ideas we have this

00:26:16,519 --> 00:26:19,909
project call mglu at some point we will

00:26:18,500 --> 00:26:22,600
make this available to other

00:26:19,909 --> 00:26:25,399
distributions as well what it does is it

00:26:22,600 --> 00:26:27,529
again a python-based demon that sits on

00:26:25,399 --> 00:26:29,809
top of all the standard user space tools

00:26:27,529 --> 00:26:31,690
so you interact with it as if you're

00:26:29,809 --> 00:26:34,159
interacting with the CLI it uses

00:26:31,690 --> 00:26:37,070
incredibly modern technologies like get

00:26:34,159 --> 00:26:39,440
and this to manage all of the

00:26:37,070 --> 00:26:41,210
infrastructure that inside it and it

00:26:39,440 --> 00:26:43,549
basically allows you to

00:26:41,210 --> 00:26:45,830
to interact with it as if it's a model

00:26:43,549 --> 00:26:48,110
CLI it's actually non-modal but it

00:26:45,830 --> 00:26:51,850
behaves almost like it like a modal tli

00:26:48,110 --> 00:26:54,860
and what you get at the end of it is

00:26:51,850 --> 00:26:58,010
actions get taken on Linux config files

00:26:54,860 --> 00:26:59,240
action get taken on Linux demons and all

00:26:58,010 --> 00:27:01,640
of the validation tools that are

00:26:59,240 --> 00:27:05,090
available underneath it all get exercise

00:27:01,640 --> 00:27:06,770
and invoke and you can find out exactly

00:27:05,090 --> 00:27:09,010
what you need to do if you don't want to

00:27:06,770 --> 00:27:12,380
run it again and never look at it again

00:27:09,010 --> 00:27:14,630
the end user is literally everybody wins

00:27:12,380 --> 00:27:16,159
strategy right the config files are

00:27:14,630 --> 00:27:17,870
still there you can use automation to

00:27:16,159 --> 00:27:20,450
just slap and config files any time you

00:27:17,870 --> 00:27:22,640
want but if you want to automate through

00:27:20,450 --> 00:27:25,669
such a clr you can do that as well and

00:27:22,640 --> 00:27:27,320
since it's a stateless fundamentally

00:27:25,669 --> 00:27:29,809
stateless it does do some caching but

00:27:27,320 --> 00:27:33,110
it's fundamentally a stateless demon and

00:27:29,809 --> 00:27:35,390
a stateless component you don't have to

00:27:33,110 --> 00:27:38,450
worry about any idiosyncrasies that it

00:27:35,390 --> 00:27:42,230
introduces to your system bugs

00:27:38,450 --> 00:27:45,500
notwithstanding that standard disclaimer

00:27:42,230 --> 00:27:47,510
on all of these sentences and the last

00:27:45,500 --> 00:27:49,070
thing I want to talk about was free

00:27:47,510 --> 00:27:54,289
range outing what used to be called

00:27:49,070 --> 00:27:56,210
quarter and quarter has been I would say

00:27:54,289 --> 00:27:58,669
a very very successful open source

00:27:56,210 --> 00:28:01,549
program in terms of reach there are

00:27:58,669 --> 00:28:03,440
people running very important websites

00:28:01,549 --> 00:28:07,480
using quagga as their edge router

00:28:03,440 --> 00:28:10,970
running on a Linux box unsurprisingly

00:28:07,480 --> 00:28:12,649
but what what had happened was what we

00:28:10,970 --> 00:28:14,240
saw when we sort of started interacting

00:28:12,649 --> 00:28:16,070
with the community is that the community

00:28:14,240 --> 00:28:18,380
wasn't moving fast enough there were

00:28:16,070 --> 00:28:21,409
lots of modern technologies a VPN is a

00:28:18,380 --> 00:28:24,620
classic example and we are after that

00:28:21,409 --> 00:28:26,870
were being introduced but the time it

00:28:24,620 --> 00:28:29,029
took to get that supported in the

00:28:26,870 --> 00:28:31,490
routing ecosystem was taking way longer

00:28:29,029 --> 00:28:33,320
than we liked and clearly it was

00:28:31,490 --> 00:28:34,850
beginning to hamper us because we didn't

00:28:33,320 --> 00:28:38,809
want to get out in front of the

00:28:34,850 --> 00:28:41,360
community so after much hand wrangling

00:28:38,809 --> 00:28:43,760
here as well we decided along with the

00:28:41,360 --> 00:28:45,860
partners listed down there that we are

00:28:43,760 --> 00:28:48,770
going to go for quagga into a new

00:28:45,860 --> 00:28:51,820
program and at the time of fourth we

00:28:48,770 --> 00:28:54,590
were about like a thousand patches

00:28:51,820 --> 00:28:55,110
deviated because that was the rate at

00:28:54,590 --> 00:28:57,620
which the

00:28:55,110 --> 00:29:01,500
our community was moving at the time so

00:28:57,620 --> 00:29:03,330
we have gone I had done this it supports

00:29:01,500 --> 00:29:05,610
as of today it supposed bgp I don't know

00:29:03,330 --> 00:29:09,360
why it says for only suppose bgp for m6

00:29:05,610 --> 00:29:11,460
a template ospf 23 rip ldp is actually

00:29:09,360 --> 00:29:13,980
in the works I esaias is in the works

00:29:11,460 --> 00:29:16,350
and that's not a bad word it's a routing

00:29:13,980 --> 00:29:21,090
protocol for people not familiar with it

00:29:16,350 --> 00:29:23,549
and the model that we want this to go

00:29:21,090 --> 00:29:27,419
towards is and we already actually are

00:29:23,549 --> 00:29:29,130
on that road is you can get routing vm

00:29:27,419 --> 00:29:32,220
you can get a routing container you can

00:29:29,130 --> 00:29:33,809
use it to route natively on your server

00:29:32,220 --> 00:29:36,210
on your application on your little

00:29:33,809 --> 00:29:38,669
handheld device if you want because it

00:29:36,210 --> 00:29:40,679
uses standard Linux kernel back-end

00:29:38,669 --> 00:29:42,510
interfaces and of course if you have

00:29:40,679 --> 00:29:44,309
switches that are running something like

00:29:42,510 --> 00:29:47,429
cumulus you'll get that as your core

00:29:44,309 --> 00:29:49,320
routing sweet and again you're not going

00:29:47,429 --> 00:29:50,760
to be surprised by some protocol

00:29:49,320 --> 00:29:52,919
interaction or you're not going to be

00:29:50,760 --> 00:29:54,480
wondering whether if I send a message

00:29:52,919 --> 00:29:57,480
this guy will receive it and do the

00:29:54,480 --> 00:29:59,010
right thing with it or not this is in my

00:29:57,480 --> 00:30:01,110
opinion a very big deal and it's

00:29:59,010 --> 00:30:03,299
actually one of the things that if you

00:30:01,110 --> 00:30:04,890
are super focused on the first and we

00:30:03,299 --> 00:30:06,720
don't think about the larger picture a

00:30:04,890 --> 00:30:09,120
lot of people don't pay attention to and

00:30:06,720 --> 00:30:10,980
i'll admit very freely that before i

00:30:09,120 --> 00:30:15,360
started working on switching hardware i

00:30:10,980 --> 00:30:17,130
totally didn't care about it but since i

00:30:15,360 --> 00:30:18,990
have i've come to realize that unless

00:30:17,130 --> 00:30:21,360
for the for the sort of the whole data

00:30:18,990 --> 00:30:24,059
center solution unless the solution

00:30:21,360 --> 00:30:25,710
hangs together top to bottom it's not a

00:30:24,059 --> 00:30:27,720
complete solution and as long as it's

00:30:25,710 --> 00:30:32,190
not a complete solution its value is

00:30:27,720 --> 00:30:33,840
less than the sum of its parts and in in

00:30:32,190 --> 00:30:38,010
that sense this is a very important

00:30:33,840 --> 00:30:41,760
piece of blue so i wanted to switch to

00:30:38,010 --> 00:30:43,620
the last section of my slide and and

00:30:41,760 --> 00:30:45,750
this is something that again if you're

00:30:43,620 --> 00:30:47,880
in the networking field you'll hear a

00:30:45,750 --> 00:30:51,299
lot of conversations and a lot of

00:30:47,880 --> 00:30:54,140
chatter about and for people who are

00:30:51,299 --> 00:30:56,040
wondering how I'm a clue here is

00:30:54,140 --> 00:30:57,780
suggesting that the Linux kernel is

00:30:56,040 --> 00:30:59,970
getting in your way because that's the

00:30:57,780 --> 00:31:03,150
line that I hear a lot out in the

00:30:59,970 --> 00:31:05,840
industry and and I have a few thoughts

00:31:03,150 --> 00:31:05,840
about that so

00:31:06,000 --> 00:31:10,410
the very specific thing that I want to

00:31:08,220 --> 00:31:12,270
talk about is what constitutes an

00:31:10,410 --> 00:31:18,690
operating system and what constitutes a

00:31:12,270 --> 00:31:20,520
user interface in my humble opinion the

00:31:18,690 --> 00:31:21,930
picture has drawn is the way an

00:31:20,520 --> 00:31:24,150
operating system should behave that

00:31:21,930 --> 00:31:25,730
should be a system call interface the

00:31:24,150 --> 00:31:28,140
system call interface is what

00:31:25,730 --> 00:31:32,070
applications and user interaction is

00:31:28,140 --> 00:31:38,570
model against if you model it here apps

00:31:32,070 --> 00:31:41,970
become portable and things just work if

00:31:38,570 --> 00:31:43,500
you don't model it that way as when you

00:31:41,970 --> 00:31:46,320
make the system call interface your

00:31:43,500 --> 00:31:48,930
hardware interface you'd get non

00:31:46,320 --> 00:31:50,810
portable applications in fact Steven was

00:31:48,930 --> 00:31:53,400
talking about that this morning if your

00:31:50,810 --> 00:31:56,940
if your device is named by your device

00:31:53,400 --> 00:31:58,560
driver every time you change in it a nic

00:31:56,940 --> 00:32:00,600
card you're going to have to rewrite

00:31:58,560 --> 00:32:03,780
your app or in the very least we compile

00:32:00,600 --> 00:32:06,540
it which is not a good thing it ends up

00:32:03,780 --> 00:32:08,520
with very narrow use cases like what

00:32:06,540 --> 00:32:10,770
your particular application or so you

00:32:08,520 --> 00:32:12,870
what your particular hardware does that

00:32:10,770 --> 00:32:15,300
day is what your application can do that

00:32:12,870 --> 00:32:16,770
day if you change your hardware you have

00:32:15,300 --> 00:32:19,620
to rethink how your application works

00:32:16,770 --> 00:32:22,370
and ultimately it leads to a lot of

00:32:19,620 --> 00:32:25,890
hair-pulling which is not a good thing

00:32:22,370 --> 00:32:27,480
the right where you build a system such

00:32:25,890 --> 00:32:30,390
that it's extensible such that you have

00:32:27,480 --> 00:32:34,350
broad customer buying and broad consumer

00:32:30,390 --> 00:32:36,380
buying is by moving the device specific

00:32:34,350 --> 00:32:38,640
functionality to the device driver layer

00:32:36,380 --> 00:32:41,160
which is exactly what linux has

00:32:38,640 --> 00:32:44,250
propounded for for its history of

00:32:41,160 --> 00:32:46,890
existence doing it here makes it good

00:32:44,250 --> 00:32:48,900
and it also makes it such that the end

00:32:46,890 --> 00:32:51,660
user experience actually improves over

00:32:48,900 --> 00:32:53,370
the years it doesn't it's undone

00:32:51,660 --> 00:32:55,470
controversially going to improve with

00:32:53,370 --> 00:32:56,970
over the years because the hardware

00:32:55,470 --> 00:32:58,650
vendor is going to make the hardware

00:32:56,970 --> 00:33:00,810
look better and build standardized

00:32:58,650 --> 00:33:03,060
interfaces to interact with that hard

00:33:00,810 --> 00:33:04,740
work and if you don't do it that way you

00:33:03,060 --> 00:33:06,300
will end up with a speciality use case

00:33:04,740 --> 00:33:10,500
that may or may not ever be replicated

00:33:06,300 --> 00:33:12,270
in the next generation so and there are

00:33:10,500 --> 00:33:14,670
challenges to this model there is a list

00:33:12,270 --> 00:33:16,590
of solutions out there so on Erik opens

00:33:14,670 --> 00:33:19,230
with HF boss and a whole bunch of other

00:33:16,590 --> 00:33:19,830
networking stocks that have gone down

00:33:19,230 --> 00:33:21,299
the road

00:33:19,830 --> 00:33:23,039
saying that the right answer to

00:33:21,299 --> 00:33:25,409
networking is the networking is just an

00:33:23,039 --> 00:33:28,710
application it has no system-wide

00:33:25,409 --> 00:33:31,529
implication at all and it therefore

00:33:28,710 --> 00:33:33,779
should have direct access to hardware at

00:33:31,529 --> 00:33:36,750
the system called later that this is

00:33:33,779 --> 00:33:39,470
called there and clearly in my humble

00:33:36,750 --> 00:33:41,279
opinion that's the wrong way to go but I

00:33:39,470 --> 00:33:42,690
think it's something that we as a

00:33:41,279 --> 00:33:44,279
community have to pay attention to

00:33:42,690 --> 00:33:45,840
because there are there are reasons why

00:33:44,279 --> 00:33:49,740
they like that right it's its velocity

00:33:45,840 --> 00:33:52,529
its speed of execution it's being able

00:33:49,740 --> 00:33:55,769
to manifest features in Hardware on a

00:33:52,529 --> 00:33:59,519
quick turn basis however if you do it

00:33:55,769 --> 00:34:01,440
that way you're making a long-term wrong

00:33:59,519 --> 00:34:02,880
trade-off in my mind where you're going

00:34:01,440 --> 00:34:05,190
to be stuck with what choice you made

00:34:02,880 --> 00:34:06,480
today for the rest of your life and if

00:34:05,190 --> 00:34:10,260
you ever want to change that whether

00:34:06,480 --> 00:34:12,000
it's a box a vendor or or even a an

00:34:10,260 --> 00:34:13,619
application you're going to have to

00:34:12,000 --> 00:34:16,950
rethink everything about how you deploy

00:34:13,619 --> 00:34:18,780
things on the other hand if you use

00:34:16,950 --> 00:34:20,760
Linux then you don't even actually have

00:34:18,780 --> 00:34:22,560
to make a choice Linux is not getting in

00:34:20,760 --> 00:34:26,940
your way because all the things you

00:34:22,560 --> 00:34:28,440
don't care about don't care about it

00:34:26,940 --> 00:34:30,030
there are enough people in the community

00:34:28,440 --> 00:34:32,730
in the greater community that will make

00:34:30,030 --> 00:34:36,500
sure it works it's not a headache or a

00:34:32,730 --> 00:34:40,740
hair-pulling inducing component moreover

00:34:36,500 --> 00:34:43,589
your horse already run it so you will

00:34:40,740 --> 00:34:47,429
likely get a speed up in terms of tool a

00:34:43,589 --> 00:34:49,139
tool integration if you were to buy in

00:34:47,429 --> 00:34:52,740
into things like switch there's each

00:34:49,139 --> 00:34:55,349
tool and hopefully everybody understands

00:34:52,740 --> 00:34:57,750
why am i creating them here but switch

00:34:55,349 --> 00:34:59,070
Davies tool will give you a layer to

00:34:57,750 --> 00:35:01,080
integrate with it gives you the right

00:34:59,070 --> 00:35:03,780
delineation you pick the layer at which

00:35:01,080 --> 00:35:05,070
you want to incorporate integrate and

00:35:03,780 --> 00:35:06,630
move forward but you don't have to

00:35:05,070 --> 00:35:11,070
rethink the whole stack from the bottom

00:35:06,630 --> 00:35:12,630
up and finally on I think most

00:35:11,070 --> 00:35:15,089
importantly you get the largest software

00:35:12,630 --> 00:35:17,460
community as built-in support this this

00:35:15,089 --> 00:35:22,290
D risks your deployment in ways that you

00:35:17,460 --> 00:35:24,000
cannot father because literally imagine

00:35:22,290 --> 00:35:25,650
if I should finish the sentence but

00:35:24,000 --> 00:35:27,450
literally you could lose this entire

00:35:25,650 --> 00:35:29,940
room and the next we'll keep working

00:35:27,450 --> 00:35:32,400
right there is no there is enough

00:35:29,940 --> 00:35:33,340
resiliency in the system that nothing

00:35:32,400 --> 00:35:36,070
can beat it

00:35:33,340 --> 00:35:37,510
and and that's one of its biggest value

00:35:36,070 --> 00:35:40,530
and especially if you're going to make a

00:35:37,510 --> 00:35:43,540
career deciding choice something that

00:35:40,530 --> 00:35:45,280
defines whether or not okay maybe it's

00:35:43,540 --> 00:35:47,920
not that important but whether you'll

00:35:45,280 --> 00:35:50,470
get fired or not this is the kind of

00:35:47,920 --> 00:35:54,670
residence you should be looking for so

00:35:50,470 --> 00:35:55,810
bottom line use the Linux kernel of the

00:35:54,670 --> 00:35:58,690
model and become part of the solution

00:35:55,810 --> 00:36:22,300
not part of the problem and that's all I

00:35:58,690 --> 00:36:24,280
had any questions for Jamal hi I'm

00:36:22,300 --> 00:36:27,310
Macklin from the Knicks we can use could

00:36:24,280 --> 00:36:31,060
you expand a little on why quagga with

00:36:27,310 --> 00:36:33,160
fort and the differences between the

00:36:31,060 --> 00:36:36,820
fork in the quad at this point in terms

00:36:33,160 --> 00:36:38,200
of features okay let me see if I got the

00:36:36,820 --> 00:36:39,730
question right the question was can you

00:36:38,200 --> 00:36:42,670
explain a little bit more about the

00:36:39,730 --> 00:36:47,020
history why there was a fork and and the

00:36:42,670 --> 00:36:48,820
differences so it's a little bit outside

00:36:47,020 --> 00:36:52,860
the scope of this conference obviously

00:36:48,820 --> 00:36:55,000
but I see why it's an important question

00:36:52,860 --> 00:36:57,490
fundamentally what if you look at the

00:36:55,000 --> 00:37:00,430
history of Korra what hit it went to a

00:36:57,490 --> 00:37:03,430
few key maintainer actually let me take

00:37:00,430 --> 00:37:05,950
that back let me say it very simply the

00:37:03,430 --> 00:37:08,260
maintenance for quagga the community was

00:37:05,950 --> 00:37:11,050
nowhere near the quality of the

00:37:08,260 --> 00:37:14,470
maintenance for linux kernel networking

00:37:11,050 --> 00:37:17,290
and we living in both these communities

00:37:14,470 --> 00:37:20,800
realized this vast difference and wanted

00:37:17,290 --> 00:37:23,110
to move such that it gets closer not

00:37:20,800 --> 00:37:25,270
that we have that ambitious and

00:37:23,110 --> 00:37:28,510
aspiration but we will do everything we

00:37:25,270 --> 00:37:30,670
can to make it be the same level of the

00:37:28,510 --> 00:37:32,980
same level of efficiency and the same

00:37:30,670 --> 00:37:35,310
amount of applicability now those are

00:37:32,980 --> 00:37:38,110
sort of fluffy high-level words

00:37:35,310 --> 00:37:41,430
specifically there were many technology

00:37:38,110 --> 00:37:44,400
components that needed to go in the

00:37:41,430 --> 00:37:47,079
routing stack for example for ospfv3

00:37:44,400 --> 00:37:49,029
when we started looking at it versus

00:37:47,079 --> 00:37:52,209
we ended up with patching it was

00:37:49,029 --> 00:37:55,420
somewhere in the order of like 400 4000

00:37:52,209 --> 00:37:57,369
x speed up and fundamentally what it

00:37:55,420 --> 00:37:58,809
meant to us was that nobody was looking

00:37:57,369 --> 00:38:01,180
at this as something that they would

00:37:58,809 --> 00:38:03,700
hang their hat on and and define their

00:38:01,180 --> 00:38:05,319
career on and we needed that the

00:38:03,700 --> 00:38:06,849
community to have that kind of impetus

00:38:05,319 --> 00:38:09,130
because at the end of the day like

00:38:06,849 --> 00:38:10,859
anything else right something gets

00:38:09,130 --> 00:38:13,180
better because people care about it and

00:38:10,859 --> 00:38:14,769
we needed to create a community of

00:38:13,180 --> 00:38:16,959
people who care about it enough to

00:38:14,769 --> 00:38:19,450
participate and give them an avenue to

00:38:16,959 --> 00:38:24,579
move forward I don't have that answered

00:38:19,450 --> 00:38:32,309
your question but that's all I got what

00:38:24,579 --> 00:38:32,309

YouTube URL: https://www.youtube.com/watch?v=kTbaHOj8z98


