Title: Netdev 2.1 - What's in a name? By Stephen Hemminger
Publication date: 2017-05-07
Playlist: Netdev 2.1
Description: 
	In this talk given at Netdev 2.1 in Montreal on Apr 6, 2017, Stephen Hemminger delves into the philosophical topic of names.
Network device names have existed from the earliest days of Unix networking but their usage has evolved. This of course comes with its own menu of issues.

Content:
https://www.netdevconf.org/2.1/session.html?hemminger
Captions: 
	00:00:00,030 --> 00:00:06,020
so I'm gonna welcome Steven Hammond jur

00:00:02,510 --> 00:00:08,670
he's gonna give us a talk and say

00:00:06,020 --> 00:00:12,530
demystify what could possibly be in a

00:00:08,670 --> 00:00:12,530
name thank you

00:00:14,030 --> 00:00:17,780
[Applause]

00:00:20,930 --> 00:00:25,310
while they play with the slides um

00:00:29,359 --> 00:00:35,969
nothing seems to piss users off more

00:00:32,669 --> 00:00:38,670
than naming I've got I've got

00:00:35,969 --> 00:00:42,840
discussions with customers and I've had

00:00:38,670 --> 00:00:45,379
more issues over naming then crashes

00:00:42,840 --> 00:00:50,180
bugs performance anything else

00:00:45,379 --> 00:00:50,180
changing games breaks user scripts and

00:00:50,449 --> 00:00:58,710
causes fights and really gets into a

00:00:53,840 --> 00:01:01,590
deep rat hole so this talk is not about

00:00:58,710 --> 00:01:02,879
solving the problem it's about framing

00:01:01,590 --> 00:01:05,700
the problem it's about giving you the

00:01:02,879 --> 00:01:08,340
information about what's going on where

00:01:05,700 --> 00:01:12,960
it's coming from and some of the

00:01:08,340 --> 00:01:16,259
pitfalls that I've seen let's start off

00:01:12,960 --> 00:01:22,170
with East 0 does anybody here know how

00:01:16,259 --> 00:01:25,500
old East 0 is well I did a little

00:01:22,170 --> 00:01:28,100
backtracking and it's before pretty much

00:01:25,500 --> 00:01:34,400
everybody in this room was using Linux

00:01:28,100 --> 00:01:37,130
it's almost 25 years old 24 years ago in

00:01:34,400 --> 00:01:40,110
that one version of Linux

00:01:37,130 --> 00:01:42,630
there was a hard-coded file in the time

00:01:40,110 --> 00:01:45,270
it was in net TCP space that said

00:01:42,630 --> 00:01:47,640
there's a three column card it's at this

00:01:45,270 --> 00:01:50,460
address and if we see it we'll give it

00:01:47,640 --> 00:01:52,950
its 0 there's another one and if it's at

00:01:50,460 --> 00:01:54,899
this address we'll give it a 0 so that

00:01:52,950 --> 00:01:57,719
named was actually hard-coded all the

00:01:54,899 --> 00:02:03,270
way back from the first implementations

00:01:57,719 --> 00:02:09,030
of networking Linux and this slide got a

00:02:03,270 --> 00:02:11,849
little messed up the place that this

00:02:09,030 --> 00:02:13,590
shows up externally to a lot of

00:02:11,849 --> 00:02:17,959
networking customers is

00:02:13,590 --> 00:02:21,750
SNMP and let me just fill these in kazoo

00:02:17,959 --> 00:02:27,150
so innocent of T there's a number of

00:02:21,750 --> 00:02:30,000
values for a network interface and an

00:02:27,150 --> 00:02:33,989
SNMP all these map to things that exist

00:02:30,000 --> 00:02:39,090
in our Linux networking stack today the

00:02:33,989 --> 00:02:44,400
first one is the if' index which in SNMP

00:02:39,090 --> 00:02:46,709
every object has an ID and the index is

00:02:44,400 --> 00:02:50,069
the last part of the ID for network

00:02:46,709 --> 00:02:51,500
interfaces so we just map that to the

00:02:50,069 --> 00:02:57,150
if' index and Linux

00:02:51,500 --> 00:03:00,660
the type is whether it's Ethernet FDDI

00:02:57,150 --> 00:03:04,319
infinite man anything like that you have

00:03:00,660 --> 00:03:07,500
a MAC address field and there's a name

00:03:04,319 --> 00:03:09,870
and if you read the standard it is the

00:03:07,500 --> 00:03:11,760
name that is suitable for display on the

00:03:09,870 --> 00:03:14,730
console so basically they kind of assume

00:03:11,760 --> 00:03:17,069
you have a CLI that you interact with a

00:03:14,730 --> 00:03:20,670
networking stack and that's the name you

00:03:17,069 --> 00:03:23,600
handle you use for the naming there's

00:03:20,670 --> 00:03:25,769
also something called AF description and

00:03:23,600 --> 00:03:28,739
if you read the fine print

00:03:25,769 --> 00:03:33,540
they expect you to fill in the

00:03:28,739 --> 00:03:39,359
manufacturer version etc that in recent

00:03:33,540 --> 00:03:42,690
versions of Linux SNMP I hooked in to

00:03:39,359 --> 00:03:46,010
have the PCI library go dumpster-dive

00:03:42,690 --> 00:03:49,079
and figure out oh that's an intel IX GBE

00:03:46,010 --> 00:03:52,919
version 3 whatever based on that

00:03:49,079 --> 00:03:56,930
information and the last one is I F

00:03:52,919 --> 00:03:59,669
alias which is user provided information

00:03:56,930 --> 00:04:03,840
so your typical networking switch

00:03:59,669 --> 00:04:06,150
customer will fill in on his CLI that

00:04:03,840 --> 00:04:08,190
that's the one connected to the backbone

00:04:06,150 --> 00:04:09,780
network that's the other ones connected

00:04:08,190 --> 00:04:11,940
to the internal network so that when

00:04:09,780 --> 00:04:15,150
they use their SNMP to query to switch

00:04:11,940 --> 00:04:19,440
they can say that this one is connected

00:04:15,150 --> 00:04:24,450
to that Network and all these fields

00:04:19,440 --> 00:04:26,740
exist today in looks networking staff so

00:04:24,450 --> 00:04:29,500
in Linux

00:04:26,740 --> 00:04:31,600
I'll get to the latest ones now we're

00:04:29,500 --> 00:04:34,960
familiar with these zero well so what

00:04:31,600 --> 00:04:39,550
are other operating systems do the

00:04:34,960 --> 00:04:43,389
granddaddy of UNIX networking BSD uses a

00:04:39,550 --> 00:04:47,710
name that is based on the device driver

00:04:43,389 --> 00:04:51,490
so the original UNIX networking bsd had

00:04:47,710 --> 00:04:54,880
to comp cards and they were named en 0 1

00:04:51,490 --> 00:04:58,720
2 or whatever and if you use the intel i

00:04:54,880 --> 00:05:03,789
exceed the e driver on FreeBSD today you

00:04:58,720 --> 00:05:08,410
get IX gb 0 1 2 3 can anybody see what's

00:05:03,789 --> 00:05:10,479
wrong with that if I take out the Intel

00:05:08,410 --> 00:05:14,500
card and I put in a Mellanox card and my

00:05:10,479 --> 00:05:18,030
server also in the names change that's

00:05:14,500 --> 00:05:18,030
not a very friendly thing to do

00:05:18,419 --> 00:05:27,870
Windows does it based on a usage model

00:05:24,250 --> 00:05:31,240
which is pretty which is sort of nice

00:05:27,870 --> 00:05:34,570
but ends up with this really long name

00:05:31,240 --> 00:05:37,060
and none of it since Windows is 90% GUI

00:05:34,570 --> 00:05:40,360
based nobody ever sees the name anyway

00:05:37,060 --> 00:05:42,880
they just see a little icon so you'll

00:05:40,360 --> 00:05:46,570
get Ethernet adapter 1 Ethernet adapter

00:05:42,880 --> 00:05:49,720
2 or hyper-v virtual Ethernet adapter as

00:05:46,570 --> 00:05:52,960
the full log name so they're kind of

00:05:49,720 --> 00:05:56,229
using the is alias kind of model for

00:05:52,960 --> 00:05:59,289
naming so you look at juniper and cisco

00:05:56,229 --> 00:06:01,960
they both use different things juniper

00:05:59,289 --> 00:06:05,229
kind of being a BS teasing what they do

00:06:01,960 --> 00:06:07,020
is they take this part which is really

00:06:05,229 --> 00:06:11,500
what kind of hardware are you having it

00:06:07,020 --> 00:06:17,860
and then they have a basically chassis

00:06:11,500 --> 00:06:20,889
slot port naming with flashes and Cisco

00:06:17,860 --> 00:06:22,659
does well everything before used to be

00:06:20,889 --> 00:06:26,110
like you had Ethernet Fast Ethernet

00:06:22,659 --> 00:06:29,590
Gigabit Ethernet so they get longer and

00:06:26,110 --> 00:06:33,760
longer and they use a naming like this

00:06:29,590 --> 00:06:35,620
in fact when I was at the Riviera there

00:06:33,760 --> 00:06:38,110
was people that wanted us to switch over

00:06:35,620 --> 00:06:40,120
to putting flashes in the name that was

00:06:38,110 --> 00:06:42,800
like not a good idea

00:06:40,120 --> 00:06:44,840
the reason I bring these up just because

00:06:42,800 --> 00:06:46,340
you will have customers that are coming

00:06:44,840 --> 00:06:48,889
from other environments that have a

00:06:46,340 --> 00:06:52,840
different expectation and that's an

00:06:48,889 --> 00:06:55,849
important part so some of the issues are

00:06:52,840 --> 00:06:58,689
the first thing that shows up with the

00:06:55,849 --> 00:07:03,110
original linux naming scheme was

00:06:58,689 --> 00:07:04,789
originally linux 2.4 probed in parallel

00:07:03,110 --> 00:07:06,919
actually originally was a table like a

00:07:04,789 --> 00:07:08,449
set of three com whatever so it's

00:07:06,919 --> 00:07:11,120
totally linear it's totally cereal

00:07:08,449 --> 00:07:13,340
totally predictable we switched off to

00:07:11,120 --> 00:07:16,090
modern PCI architectures and initially

00:07:13,340 --> 00:07:18,919
they were probing sequentially and

00:07:16,090 --> 00:07:21,680
modern architectures we pro PCI in

00:07:18,919 --> 00:07:22,370
parallel so in fact which one's going to

00:07:21,680 --> 00:07:25,939
come first

00:07:22,370 --> 00:07:28,039
is not deterministic and so if you had

00:07:25,939 --> 00:07:29,599
two cards you get e0 to each one and

00:07:28,039 --> 00:07:32,870
sometimes they be swapped on some

00:07:29,599 --> 00:07:36,370
machines and not others the other one

00:07:32,870 --> 00:07:40,099
that's a problem is for some of these

00:07:36,370 --> 00:07:43,069
buried in our POSIX world standards is

00:07:40,099 --> 00:07:45,050
AF name size I have named size being 16

00:07:43,069 --> 00:07:49,580
characters means you have 15 characters

00:07:45,050 --> 00:07:50,029
for your interface name no more I'll

00:07:49,580 --> 00:07:52,430
show you

00:07:50,029 --> 00:07:55,430
example where that hits but I've seen

00:07:52,430 --> 00:07:59,180
that hit several other times in customer

00:07:55,430 --> 00:08:02,289
situations and changing that it's pretty

00:07:59,180 --> 00:08:05,029
much a note is a non-starter today

00:08:02,289 --> 00:08:12,110
there's too many places that would get

00:08:05,029 --> 00:08:15,710
impacted also related to that um there

00:08:12,110 --> 00:08:17,560
are k12 I can go out uh but the other

00:08:15,710 --> 00:08:19,759
one I mentioned

00:08:17,560 --> 00:08:23,000
consistency is a real problem people

00:08:19,759 --> 00:08:24,740
want to have different machines in

00:08:23,000 --> 00:08:28,520
different places all come up with the

00:08:24,740 --> 00:08:32,089
same sequence of interfaces there was a

00:08:28,520 --> 00:08:34,190
customer that we had that the way they

00:08:32,089 --> 00:08:37,430
worked is they provide a virtual hosting

00:08:34,190 --> 00:08:40,099
model where you would provision and

00:08:37,430 --> 00:08:43,519
instead of getting a VM you would get

00:08:40,099 --> 00:08:45,140
basically a white box in Iraq and they

00:08:43,519 --> 00:08:47,480
would pull different white boxes out of

00:08:45,140 --> 00:08:50,329
the rack and they would put your image

00:08:47,480 --> 00:08:51,560
on it problem with that is different

00:08:50,329 --> 00:08:53,690
hardware would come up with different

00:08:51,560 --> 00:08:56,300
orders different sequences

00:08:53,690 --> 00:08:59,029
how would you manage that that if that

00:08:56,300 --> 00:09:01,250
was a gal today and next one is an HP

00:08:59,029 --> 00:09:05,750
server and they came up with different

00:09:01,250 --> 00:09:08,000
interface names she was uh but the last

00:09:05,750 --> 00:09:10,279
one is there are situations and I'll go

00:09:08,000 --> 00:09:13,339
to something later where you get totally

00:09:10,279 --> 00:09:15,139
illogical numbering um you get values

00:09:13,339 --> 00:09:17,540
that are off the charts names that are

00:09:15,139 --> 00:09:20,019
way too long and make no sense at all

00:09:17,540 --> 00:09:24,949
another at the customer completely notes

00:09:20,019 --> 00:09:27,769
and all these things can make sense so

00:09:24,949 --> 00:09:30,319
what were the early pioneers in network

00:09:27,769 --> 00:09:34,220
naming well the first one that showed up

00:09:30,319 --> 00:09:37,189
was you dev which is the way we have

00:09:34,220 --> 00:09:38,720
scripts that handle hot plug events and

00:09:37,189 --> 00:09:40,519
you could have there's a layer of

00:09:38,720 --> 00:09:43,129
scripts and the layer of scripts would

00:09:40,519 --> 00:09:46,009
see a hot plug of it of a network device

00:09:43,129 --> 00:09:49,459
and try to apply some rules to get to

00:09:46,009 --> 00:09:52,329
naming the initial version of that was

00:09:49,459 --> 00:09:56,420
based on the MAC address of the device

00:09:52,329 --> 00:09:58,069
that was to maintain persistence so

00:09:56,420 --> 00:10:00,500
every time it came up with the same MAC

00:09:58,069 --> 00:10:02,209
address it would get the same name that

00:10:00,500 --> 00:10:04,339
works fine now single machine doesn't

00:10:02,209 --> 00:10:05,660
work when you take that image and you

00:10:04,339 --> 00:10:07,040
take that image and put it on another

00:10:05,660 --> 00:10:09,470
machine and there's a different MAC

00:10:07,040 --> 00:10:12,069
address so it's very common for a

00:10:09,470 --> 00:10:14,120
customer to bring up one in one VM

00:10:12,069 --> 00:10:16,040
putting on another one and all of a

00:10:14,120 --> 00:10:17,750
sudden eto week there was no easy

00:10:16,040 --> 00:10:22,130
release one because it was a different

00:10:17,750 --> 00:10:24,350
address and modern versions of the UDF

00:10:22,130 --> 00:10:28,279
rules do the same thing but they do it

00:10:24,350 --> 00:10:30,800
based on PCI information so that at

00:10:28,279 --> 00:10:37,670
least it's if it's in the same slot

00:10:30,800 --> 00:10:40,699
comes up with the same name so the next

00:10:37,670 --> 00:10:42,769
attempt was done by that Damas at Dell

00:10:40,699 --> 00:10:45,980
we threw out something called BIOS dev

00:10:42,769 --> 00:10:48,769
name which basically said oh I saw an

00:10:45,980 --> 00:10:50,720
interface name let's go dumpster diving

00:10:48,769 --> 00:10:53,600
in the system and see if I can come up

00:10:50,720 --> 00:10:56,930
with a good name for that the problem

00:10:53,600 --> 00:10:59,029
with that program was it was he was

00:10:56,930 --> 00:11:02,870
solving a problem at a very small domain

00:10:59,029 --> 00:11:06,959
which was basically Dell servers and it

00:11:02,870 --> 00:11:09,350
also pretty much had kind of the most

00:11:06,959 --> 00:11:13,649
people level access the system it was

00:11:09,350 --> 00:11:17,189
going in India decoding TMI cables to

00:11:13,649 --> 00:11:23,160
give mem to get raw access to device

00:11:17,189 --> 00:11:25,350
memory so it was basically going as deep

00:11:23,160 --> 00:11:27,749
as it possibly could in a very system

00:11:25,350 --> 00:11:31,379
specific manner and often it would not

00:11:27,749 --> 00:11:33,540
work so it never really got widely

00:11:31,379 --> 00:11:35,360
deployed although it had the right

00:11:33,540 --> 00:11:39,149
intentions

00:11:35,360 --> 00:11:41,759
so the next thing came along which is

00:11:39,149 --> 00:11:44,269
the system D developers saw this

00:11:41,759 --> 00:11:47,220
persistent network name problem and

00:11:44,269 --> 00:11:53,759
started to attack it and I love the sock

00:11:47,220 --> 00:11:58,379
plucker fish actually proposed me but

00:11:53,759 --> 00:12:02,220
they they basically started started with

00:11:58,379 --> 00:12:05,279
the same underlying model of BIOS tab

00:12:02,220 --> 00:12:09,240
name but did it in a more consistent

00:12:05,279 --> 00:12:11,449
manner using standard interfaces and at

00:12:09,240 --> 00:12:13,980
the same time the kernel and PCI

00:12:11,449 --> 00:12:16,079
environment had gotten smarter so more

00:12:13,980 --> 00:12:19,379
information was available to user space

00:12:16,079 --> 00:12:22,319
to do naming so what kinds of names you

00:12:19,379 --> 00:12:25,550
see today with a system D you get

00:12:22,319 --> 00:12:29,819
basically the first one is if you have

00:12:25,550 --> 00:12:32,220
onboard network devices these are ones

00:12:29,819 --> 00:12:34,699
on like management consoles and so on

00:12:32,220 --> 00:12:38,490
the adult self on the bus if they were

00:12:34,699 --> 00:12:46,050
reported by a CPI it will name them with

00:12:38,490 --> 00:12:48,509
b no1 if the PCI Express bus has slot

00:12:46,050 --> 00:12:52,499
information it will use that to make a

00:12:48,509 --> 00:12:55,620
name like en s3 if it doesn't have slot

00:12:52,499 --> 00:12:59,730
information it will use the PCI address

00:12:55,620 --> 00:13:01,889
to make a name if you plug a USB stick

00:12:59,730 --> 00:13:05,369
in it uses the MAC address to make a

00:13:01,889 --> 00:13:07,079
name and if it doesn't know anything it

00:13:05,369 --> 00:13:08,929
goes back to the whatever was there

00:13:07,079 --> 00:13:10,889
before

00:13:08,929 --> 00:13:14,819
so what could possibly go wrong

00:13:10,889 --> 00:13:17,519
everything solved well they have

00:13:14,819 --> 00:13:19,120
problems with every one of these first

00:13:17,519 --> 00:13:22,920
of all it's

00:13:19,120 --> 00:13:25,949
but first of all the on board bias one

00:13:22,920 --> 00:13:31,240
we had a box that we were supporting

00:13:25,949 --> 00:13:33,790
that had four feet easier nets in the

00:13:31,240 --> 00:13:39,689
back and they were labeled one two three

00:13:33,790 --> 00:13:43,779
four well of course the a CPI BIOS

00:13:39,689 --> 00:13:45,939
information did not report the on board

00:13:43,779 --> 00:13:48,490
port number to match the labels on the

00:13:45,939 --> 00:13:50,139
back of the box needless to say you

00:13:48,490 --> 00:13:52,629
don't want to tell the customer their

00:13:50,139 --> 00:13:54,610
port that one that's labeled two is

00:13:52,629 --> 00:13:58,389
really one and the one that's labeled

00:13:54,610 --> 00:14:00,519
three is really four and it took several

00:13:58,389 --> 00:14:04,600
weeks of meetings to convince the vendor

00:14:00,519 --> 00:14:08,829
to get the BIOS fixed to make the slot

00:14:04,600 --> 00:14:12,809
numbering match the tags on the back the

00:14:08,829 --> 00:14:17,620
next one of the PCI slot information

00:14:12,809 --> 00:14:21,699
well like life why is the first one that

00:14:17,620 --> 00:14:24,370
shows up on most boxes slot three it's

00:14:21,699 --> 00:14:26,529
really because the ACPI decides to

00:14:24,370 --> 00:14:28,209
number one or two for like an internal

00:14:26,529 --> 00:14:30,819
bus route poured and something else

00:14:28,209 --> 00:14:35,620
there's nothing there's no logical

00:14:30,819 --> 00:14:39,309
reason that it's always slot three also

00:14:35,620 --> 00:14:43,629
once again you're relying on non broken

00:14:39,309 --> 00:14:48,790
firmware to give you good data PCI

00:14:43,629 --> 00:14:52,240
location that basically means you're

00:14:48,790 --> 00:14:55,209
expecting that PCI location information

00:14:52,240 --> 00:14:58,569
is consistent across machines and it's

00:14:55,209 --> 00:15:00,999
not it can often be the case if you have

00:14:58,569 --> 00:15:03,399
the system vendor situation you have a

00:15:00,999 --> 00:15:05,980
Dell and HP they'll have two PCI bus is

00:15:03,399 --> 00:15:07,420
completely different naming and the MAC

00:15:05,980 --> 00:15:11,259
address one can able I think what's

00:15:07,420 --> 00:15:14,709
wrong with that one that's a fifteen

00:15:11,259 --> 00:15:16,569
character name the standard convention

00:15:14,709 --> 00:15:21,689
to put a VLAN on the end of something is

00:15:16,569 --> 00:15:24,309
go dot V land can't do it

00:15:21,689 --> 00:15:27,309
not only that if you had to type it

00:15:24,309 --> 00:15:28,720
you're good to go and going back to none

00:15:27,309 --> 00:15:32,470
of the above basically means you're

00:15:28,720 --> 00:15:34,240
throwing your hands up and a lot of

00:15:32,470 --> 00:15:36,070
zatia environments and other things all

00:15:34,240 --> 00:15:40,930
the above don't work and you end up with

00:15:36,070 --> 00:15:43,230
zero again so it's making a good effort

00:15:40,930 --> 00:15:47,560
but it's not really solving the problem

00:15:43,230 --> 00:15:50,680
the other one that shows up is in the

00:15:47,560 --> 00:15:53,320
cloud the way people typically do it is

00:15:50,680 --> 00:15:55,720
they set up one image and they want to

00:15:53,320 --> 00:15:58,720
make thousands of copies of the same

00:15:55,720 --> 00:16:02,620
image and they want the names of the

00:15:58,720 --> 00:16:05,980
devices to come up exactly the same and

00:16:02,620 --> 00:16:10,440
not only that not all those images will

00:16:05,980 --> 00:16:13,270
be deployed on the same model of server

00:16:10,440 --> 00:16:18,160
so you might have situations where you

00:16:13,270 --> 00:16:20,800
have some for CPU deployments you might

00:16:18,160 --> 00:16:25,170
have 64 CPU deployments you might have 4

00:16:20,800 --> 00:16:29,740
in 4 connections on 1 & 2 on another and

00:16:25,170 --> 00:16:31,420
it's not consistent and the naming has

00:16:29,740 --> 00:16:34,840
to be consistent for the applications

00:16:31,420 --> 00:16:39,040
that show up the other one that shows up

00:16:34,840 --> 00:16:43,180
is in virtualization environments we

00:16:39,040 --> 00:16:47,800
don't really have a PCI bus what happens

00:16:43,180 --> 00:16:53,650
is on hyper-v we have a VM bus then has

00:16:47,800 --> 00:16:58,270
a Zen bus KBM emulates PCI and all of

00:16:53,650 --> 00:17:00,190
those buses tend to give try to give

00:16:58,270 --> 00:17:02,890
information that will give you a network

00:17:00,190 --> 00:17:06,370
name but the values they give may be

00:17:02,890 --> 00:17:10,750
completely off for example a recent

00:17:06,370 --> 00:17:15,850
thing that showed up was on VMware they

00:17:10,750 --> 00:17:17,620
would give a different very large PCI M

00:17:15,850 --> 00:17:20,440
range in order to separate the

00:17:17,620 --> 00:17:22,090
pass-through devices where they're

00:17:20,440 --> 00:17:25,420
passing through the real physical

00:17:22,090 --> 00:17:27,610
hardware to the virtualized CCI and the

00:17:25,420 --> 00:17:29,530
virtualized PCI would be way out in a

00:17:27,610 --> 00:17:35,740
very big number and so you'd end up with

00:17:29,530 --> 00:17:37,870
a slot 1395 33 and so in fact recent

00:17:35,740 --> 00:17:40,090
versions of system D say basically if

00:17:37,870 --> 00:17:44,450
the slot numbers bigger than this large

00:17:40,090 --> 00:17:48,499
value something's lacked and ignore it

00:17:44,450 --> 00:17:51,830
so all of these emulated buses do crazy

00:17:48,499 --> 00:17:55,970
things and pretty much camels guaranteed

00:17:51,830 --> 00:18:01,509
to break the naming the other one that

00:17:55,970 --> 00:18:07,850
shows up is on hyper-v the way we handle

00:18:01,509 --> 00:18:09,830
Silv is that you have a network

00:18:07,850 --> 00:18:11,960
interface card and you'll pass through a

00:18:09,830 --> 00:18:15,710
virtual function device into the guest

00:18:11,960 --> 00:18:17,419
and will also pass a synthetic device

00:18:15,710 --> 00:18:21,830
into the guest and the two or parent

00:18:17,419 --> 00:18:24,440
would to 1 and then we bond them above

00:18:21,830 --> 00:18:27,769
that the pub has the same MAC address

00:18:24,440 --> 00:18:30,200
and if you go and you click if you're

00:18:27,769 --> 00:18:33,799
using like Windows Server and you click

00:18:30,200 --> 00:18:37,340
and you turn off Silv on the GUI this

00:18:33,799 --> 00:18:40,100
device gets hot plugged away or if I

00:18:37,340 --> 00:18:42,549
migrated you you get migrated to another

00:18:40,100 --> 00:18:45,649
one this creates all sorts of

00:18:42,549 --> 00:18:47,720
interesting gaming issues because the

00:18:45,649 --> 00:18:57,379
customer really wants to have is zero

00:18:47,720 --> 00:19:00,679
talking to its management stack lat so

00:18:57,379 --> 00:19:03,559
one of the here is some of the ideas

00:19:00,679 --> 00:19:05,239
that I wanted to go over and I don't

00:19:03,559 --> 00:19:09,440
think that their solutions

00:19:05,239 --> 00:19:13,190
they're just teasers at this point AWS

00:19:09,440 --> 00:19:15,409
and what we're doing on a sure is tried

00:19:13,190 --> 00:19:19,059
to have customers standardized using a

00:19:15,409 --> 00:19:21,799
zero for their management interface

00:19:19,059 --> 00:19:24,320
whether that can be a de-facto standard

00:19:21,799 --> 00:19:28,340
or whether it's just codification of

00:19:24,320 --> 00:19:34,279
what everybody uses that's fine in order

00:19:28,340 --> 00:19:36,950
to deal with the migration issue I think

00:19:34,279 --> 00:19:39,200
we need to have some tools and user

00:19:36,950 --> 00:19:41,690
space that are ready to deal with that

00:19:39,200 --> 00:19:46,340
whether that's fixing network manager or

00:19:41,690 --> 00:19:48,739
fixing tingey to deal with I'm dealing

00:19:46,340 --> 00:19:53,539
with a migrated interface that needs to

00:19:48,739 --> 00:19:57,349
have active and passive ports and the or

00:19:53,539 --> 00:19:58,380
the other one that seeded some rfcs of

00:19:57,349 --> 00:20:00,870
mailing lists we have some

00:19:58,380 --> 00:20:04,130
discussions about is if you get back to

00:20:00,870 --> 00:20:08,160
this situation you really want to hide

00:20:04,130 --> 00:20:10,590
these guys from existing or being

00:20:08,160 --> 00:20:12,960
visible unless you ask for it in the

00:20:10,590 --> 00:20:15,660
guest operating system so that

00:20:12,960 --> 00:20:17,720
applications and other things don't go

00:20:15,660 --> 00:20:20,100
what are these confusing things I see

00:20:17,720 --> 00:20:21,420
network interfaces that I should have be

00:20:20,100 --> 00:20:24,960
playing with them and should I be

00:20:21,420 --> 00:20:27,840
configuring them there's the couple

00:20:24,960 --> 00:20:29,850
suggestions on way to hide them the

00:20:27,840 --> 00:20:31,590
other option is use network games cases

00:20:29,850 --> 00:20:33,420
but that runs into problems because the

00:20:31,590 --> 00:20:35,310
tools that you're trying to build to

00:20:33,420 --> 00:20:38,370
manage this can't see the devices they

00:20:35,310 --> 00:20:41,790
need to manage so we need to figure out

00:20:38,370 --> 00:20:45,450
how to solve that problem lastly I

00:20:41,790 --> 00:20:49,260
recently added to we don't support it

00:20:45,450 --> 00:20:52,260
yet in hyper-v there's a way to with

00:20:49,260 --> 00:20:55,920
Windows you can actually configure that

00:20:52,260 --> 00:20:58,500
the VM switch port has additional

00:20:55,920 --> 00:21:01,020
information say I am connected to your

00:20:58,500 --> 00:21:03,600
management network that you can go

00:21:01,020 --> 00:21:06,390
configure and then be able to pass that

00:21:03,600 --> 00:21:08,310
information up into the guest and I

00:21:06,390 --> 00:21:10,710
think that that would be very useful in

00:21:08,310 --> 00:21:12,540
general so that you could have metadata

00:21:10,710 --> 00:21:15,210
information about what network and

00:21:12,540 --> 00:21:17,670
interface is connected to populate up

00:21:15,210 --> 00:21:19,500
into the guest and that would be great

00:21:17,670 --> 00:21:22,710
for orchestration because then you could

00:21:19,500 --> 00:21:25,020
just orchestrate a thousand machines and

00:21:22,710 --> 00:21:27,150
eat you which would know what it's

00:21:25,020 --> 00:21:31,980
connected to based on information from

00:21:27,150 --> 00:21:35,240
the host and maybe even having tools and

00:21:31,980 --> 00:21:41,550
ap is maybe as minor as you know

00:21:35,240 --> 00:21:45,750
standard library support for that so in

00:21:41,550 --> 00:21:47,160
conclusion naming is a real issue kernel

00:21:45,750 --> 00:21:49,260
developers tend to think about moving

00:21:47,160 --> 00:21:52,230
packets but most people think about how

00:21:49,260 --> 00:21:55,470
to talk to them real customers get

00:21:52,230 --> 00:21:58,440
really upset and I'd like to see the

00:21:55,470 --> 00:22:00,180
vendors communities not just the kernel

00:21:58,440 --> 00:22:01,950
community but the user space communities

00:22:00,180 --> 00:22:06,330
working together to have better

00:22:01,950 --> 00:22:07,920
solutions for this and so that I don't

00:22:06,330 --> 00:22:11,059
have to sit in boring meetings where

00:22:07,920 --> 00:22:16,650
people yell okay thank you

00:22:11,059 --> 00:22:18,660
and what okay

00:22:16,650 --> 00:22:24,840
Jamal says I have a chance for time for

00:22:18,660 --> 00:22:28,280
a few questions like please anybody come

00:22:24,840 --> 00:22:34,920
on you agree with everything you say

00:22:28,280 --> 00:22:36,570
hiding slave interfaces it's funny you

00:22:34,920 --> 00:22:38,700
mention if name sighs because it seems

00:22:36,570 --> 00:22:39,930
that this restriction forced us to think

00:22:38,700 --> 00:22:42,780
about the problem instead of letting

00:22:39,930 --> 00:22:44,940
people make one caned long names with

00:22:42,780 --> 00:22:56,520
all our great so I think it's kind of a

00:22:44,940 --> 00:22:57,780
nice situation we had I just threw out

00:22:56,520 --> 00:23:00,240
there one other thing that we have seen

00:22:57,780 --> 00:23:02,580
on the virtualization environments is if

00:23:00,240 --> 00:23:05,400
you change the instances set of

00:23:02,580 --> 00:23:07,830
interfaces then the PCI buses will renew

00:23:05,400 --> 00:23:09,210
mer 8 a young boots and that change of

00:23:07,830 --> 00:23:11,580
the name as well the other thing that

00:23:09,210 --> 00:23:13,500
happens is the order of interfaces on

00:23:11,580 --> 00:23:16,920
most virtualization environments is

00:23:13,500 --> 00:23:20,190
based on where what order you added them

00:23:16,920 --> 00:23:23,040
to the guest in whatever API you had

00:23:20,190 --> 00:23:26,400
whether it's a GUI or command line which

00:23:23,040 --> 00:23:28,590
is kind of convenient but not really

00:23:26,400 --> 00:23:30,030
necessarily good if you actually added

00:23:28,590 --> 00:23:33,179
them in the wrong order how do you go

00:23:30,030 --> 00:23:34,559
get that corrected which I guess in the

00:23:33,179 --> 00:23:36,090
virtualization environments you just

00:23:34,559 --> 00:23:38,160
basically say oh well throw up my hands

00:23:36,090 --> 00:23:45,140
throw away that work and it'll start it

00:23:38,160 --> 00:23:45,140

YouTube URL: https://www.youtube.com/watch?v=1SUnpH5Mt4s


