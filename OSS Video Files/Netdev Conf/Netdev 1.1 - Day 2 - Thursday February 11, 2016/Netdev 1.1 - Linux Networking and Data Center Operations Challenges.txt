Title: Netdev 1.1 - Linux Networking and Data Center Operations Challenges
Publication date: 2016-03-10
Playlist: Netdev 1.1 - Day 2 - Thursday February 11, 2016
Description: 
	Damascene Joachimpillai
February 2016
Captions: 
	00:00:00,410 --> 00:00:08,069
so my name is a damascene Joachim Pillai

00:00:06,540 --> 00:00:11,059
as you can see it's a very long name

00:00:08,069 --> 00:00:14,820
probably the longest in this whole room

00:00:11,059 --> 00:00:18,300
but they call me DJ and i am from

00:00:14,820 --> 00:00:20,910
verizon and for those of you who don't

00:00:18,300 --> 00:00:26,160
know who verizon is we are a small telco

00:00:20,910 --> 00:00:30,150
order for united states and we run a

00:00:26,160 --> 00:00:32,279
wireless network and also a wild line

00:00:30,150 --> 00:00:34,350
network even though we are divesting

00:00:32,279 --> 00:00:36,540
from the wild line networks from quite a

00:00:34,350 --> 00:00:39,629
bit and we are shrinking to the

00:00:36,540 --> 00:00:41,610
northeast side of the country but we

00:00:39,629 --> 00:00:48,300
have a significant presence in the

00:00:41,610 --> 00:00:51,270
wireless network i'm actually part of an

00:00:48,300 --> 00:00:54,840
organization in verizon called products

00:00:51,270 --> 00:00:57,899
and we concentrate on developing

00:00:54,840 --> 00:01:01,350
applications that right on top of the

00:00:57,899 --> 00:01:03,480
network we don't necessarily always get

00:01:01,350 --> 00:01:05,640
ourselves involved in the day-to-day

00:01:03,480 --> 00:01:08,729
operations of network but we actually

00:01:05,640 --> 00:01:10,560
have significant applications that right

00:01:08,729 --> 00:01:17,000
on top of the network that we actually

00:01:10,560 --> 00:01:21,360
host and this is where we encountered

00:01:17,000 --> 00:01:24,659
data centers of large scale and the

00:01:21,360 --> 00:01:28,200
issues with running a data center of

00:01:24,659 --> 00:01:29,810
large scale there are a lot of companies

00:01:28,200 --> 00:01:33,390
that have done this many times before

00:01:29,810 --> 00:01:36,210
like Google and Facebook and Amazon and

00:01:33,390 --> 00:01:40,079
Microsoft they have perfected the art of

00:01:36,210 --> 00:01:41,820
running data centers at scale Verizon we

00:01:40,079 --> 00:01:44,100
have mostly been involved on the network

00:01:41,820 --> 00:01:47,399
site but we are slowly moving into

00:01:44,100 --> 00:01:49,649
large-scale data center it's primarily

00:01:47,399 --> 00:01:51,689
not for public consumption even though

00:01:49,649 --> 00:01:54,090
the information that we store and we

00:01:51,689 --> 00:01:57,479
manage is actually public information

00:01:54,090 --> 00:02:02,009
but it's primarily for private use so it

00:01:57,479 --> 00:02:03,899
is not we don't sell virtual spaces for

00:02:02,009 --> 00:02:05,840
others to come and occupy we actually

00:02:03,899 --> 00:02:09,539
provided as part of our service offering

00:02:05,840 --> 00:02:12,940
so that's in a nutshell where we come

00:02:09,539 --> 00:02:16,380
from and that's where we encounter net

00:02:12,940 --> 00:02:19,630
working and networking related issues I

00:02:16,380 --> 00:02:21,430
am responsible for the networking and

00:02:19,630 --> 00:02:25,870
the security of the data centers and

00:02:21,430 --> 00:02:27,310
that's where my responsibility lies and

00:02:25,870 --> 00:02:31,150
that's where I encounter a lot of

00:02:27,310 --> 00:02:34,150
challenges and when I look at Linux

00:02:31,150 --> 00:02:37,590
networking which I have been looking at

00:02:34,150 --> 00:02:42,700
it for the last I don't know about since

00:02:37,590 --> 00:02:46,240
1999 I think the first linux machine

00:02:42,700 --> 00:02:48,520
that Iran was I don't know for people

00:02:46,240 --> 00:02:52,090
that are that have used it for a long

00:02:48,520 --> 00:02:55,120
time they used to be a distribution that

00:02:52,090 --> 00:02:58,330
started with why I don't know how to

00:02:55,120 --> 00:02:59,980
pronounce the name it grad cell was the

00:02:58,330 --> 00:03:04,150
name of the distribution I started

00:02:59,980 --> 00:03:08,230
running it way back and you have to

00:03:04,150 --> 00:03:12,300
actually pass command-line arguments to

00:03:08,230 --> 00:03:12,300
bootstrap yours casa card otherwise your

00:03:13,020 --> 00:03:17,980
yo-yo spinning media won't even be

00:03:15,850 --> 00:03:20,860
recognized we should have proper scuzzy

00:03:17,980 --> 00:03:23,290
hard drives in those days if I remember

00:03:20,860 --> 00:03:25,180
correctly so I've been dabbling in Linux

00:03:23,290 --> 00:03:27,880
for a long time so for me it was a

00:03:25,180 --> 00:03:31,680
natural extension but as things have

00:03:27,880 --> 00:03:34,090
moved from those days to today I see the

00:03:31,680 --> 00:03:37,090
especially with with respect to

00:03:34,090 --> 00:03:40,180
networking the number of applications

00:03:37,090 --> 00:03:43,420
that the Linux networking stack has to

00:03:40,180 --> 00:03:46,180
support is all the way from handsets

00:03:43,420 --> 00:03:50,050
like Android handsets to data center

00:03:46,180 --> 00:03:54,989
switches and large-scale routers and so

00:03:50,050 --> 00:04:00,340
the application is is quite significant

00:03:54,989 --> 00:04:04,120
variety and if I look at how it should

00:04:00,340 --> 00:04:05,980
work is what is required on the host is

00:04:04,120 --> 00:04:08,560
quite significantly different than what

00:04:05,980 --> 00:04:11,170
is required on the middle box the scale

00:04:08,560 --> 00:04:14,769
is different what meets the scale is

00:04:11,170 --> 00:04:19,150
different because for an endpoint it's a

00:04:14,769 --> 00:04:22,350
much simpler issue for a for a middle

00:04:19,150 --> 00:04:24,770
box it's a different issue so how do you

00:04:22,350 --> 00:04:28,490
bring all this together

00:04:24,770 --> 00:04:31,160
then keep the user interface as common

00:04:28,490 --> 00:04:32,870
and as user the last possible is the

00:04:31,160 --> 00:04:34,819
biggest challenge that I face and I

00:04:32,870 --> 00:04:36,560
think a lot of people that actually use

00:04:34,819 --> 00:04:42,860
it in this space will face the same

00:04:36,560 --> 00:04:45,530
issue and this is when by know Jamal for

00:04:42,860 --> 00:04:47,560
a long time and we were talking about

00:04:45,530 --> 00:04:50,800
this for a little while and then finally

00:04:47,560 --> 00:04:55,699
he said why don't we have a network

00:04:50,800 --> 00:04:57,470
specific discussion group where we can

00:04:55,699 --> 00:05:01,539
actually share this information and

00:04:57,470 --> 00:05:01,539
people can come and present and you can

00:05:02,289 --> 00:05:07,159
go back and forth with ideas and then we

00:05:04,970 --> 00:05:09,770
can actually come to a decision and move

00:05:07,159 --> 00:05:12,889
forward and that actually brought us to

00:05:09,770 --> 00:05:18,889
netdev zeroed on one and that was last

00:05:12,889 --> 00:05:22,009
year in in in Ottawa and we were one of

00:05:18,889 --> 00:05:24,949
the first sponsors of that conference as

00:05:22,009 --> 00:05:26,810
well and that's because I think the

00:05:24,949 --> 00:05:29,900
conversation that happens in this room

00:05:26,810 --> 00:05:32,840
and the speed with which things get

00:05:29,900 --> 00:05:34,729
adopted and worked through is quite

00:05:32,840 --> 00:05:37,940
impressive to be honest with you because

00:05:34,729 --> 00:05:39,530
if i remember correctly it was not a

00:05:37,940 --> 00:05:42,849
year ago that we were talking about

00:05:39,530 --> 00:05:47,120
search dev and all of a sudden there's a

00:05:42,849 --> 00:05:48,740
virtual switch in place and all i heard

00:05:47,120 --> 00:05:51,229
a lot of conversation about the

00:05:48,740 --> 00:05:54,259
challenges of integrating a switch them

00:05:51,229 --> 00:05:57,199
into a real switch which is quite the

00:05:54,259 --> 00:05:59,599
nostalgia short period of time within

00:05:57,199 --> 00:06:02,240
which a lot of things have happened and

00:05:59,599 --> 00:06:04,669
i like the speed with which things

00:06:02,240 --> 00:06:08,630
happen in a forum like this where a lot

00:06:04,669 --> 00:06:11,599
of people are not necessarily i should

00:06:08,630 --> 00:06:14,419
be careful in what I say not necessarily

00:06:11,599 --> 00:06:15,979
marketing people that sell me stuff but

00:06:14,419 --> 00:06:17,990
actually engineers who are actually

00:06:15,979 --> 00:06:21,020
sitting there and writing code who

00:06:17,990 --> 00:06:22,460
understand what the issues are with the

00:06:21,020 --> 00:06:28,370
specific approach versus some other

00:06:22,460 --> 00:06:30,169
approach and so this is why I really

00:06:28,370 --> 00:06:32,899
love to take this opportunity to do

00:06:30,169 --> 00:06:36,050
highlight a couple of things that I am

00:06:32,899 --> 00:06:38,470
seeing as things that are thrust in

00:06:36,050 --> 00:06:41,360
front of us that make

00:06:38,470 --> 00:06:44,470
having the tape take back and take stock

00:06:41,360 --> 00:06:48,710
of what we have at what we need to have

00:06:44,470 --> 00:06:51,800
so one of the things that that I looked

00:06:48,710 --> 00:06:53,870
at over the net dev one dot one the last

00:06:51,800 --> 00:06:58,220
line at the highlighted banner that you

00:06:53,870 --> 00:07:01,250
can see is is the statement that I

00:06:58,220 --> 00:07:02,780
actually strongly believe it a lot of

00:07:01,250 --> 00:07:07,790
people come and tell me or we're on

00:07:02,780 --> 00:07:10,490
linux and they run linux fine but it's

00:07:07,790 --> 00:07:14,810
mostly to provide a CLI interface and

00:07:10,490 --> 00:07:18,590
the CLI then has custom libraries that

00:07:14,810 --> 00:07:20,540
then in work custom code and everybody

00:07:18,590 --> 00:07:23,800
is going to give me a different CLI and

00:07:20,540 --> 00:07:27,170
a different custom code and now i have

00:07:23,800 --> 00:07:28,640
20 different variations of CLI and 20

00:07:27,170 --> 00:07:30,590
different patch streams that i have to

00:07:28,640 --> 00:07:34,660
maintain and it becomes a nightmare for

00:07:30,590 --> 00:07:38,290
us from a network operations perspective

00:07:34,660 --> 00:07:41,300
some of the others they have actually

00:07:38,290 --> 00:07:43,390
created their own versions of Linux and

00:07:41,300 --> 00:07:49,460
they are actually managing it themselves

00:07:43,390 --> 00:07:51,770
we are in need a boat we we need vendors

00:07:49,460 --> 00:07:54,080
the suppliers equipment but we also need

00:07:51,770 --> 00:07:57,200
to make sure that we don't have too many

00:07:54,080 --> 00:08:01,610
variabilities in what we get delivered

00:07:57,200 --> 00:08:05,240
this is why i believe that i would like

00:08:01,610 --> 00:08:08,450
to use the linux especially the linux

00:08:05,240 --> 00:08:11,540
networking stack as much as possible for

00:08:08,450 --> 00:08:16,150
whatever we need to do and then only go

00:08:11,540 --> 00:08:22,280
outside of it for additional operations

00:08:16,150 --> 00:08:26,090
so for instance we run a large-scale

00:08:22,280 --> 00:08:29,600
application using mostly containers and

00:08:26,090 --> 00:08:32,450
it's it went live in in November

00:08:29,600 --> 00:08:36,020
December timeframe it's slowly ramping

00:08:32,450 --> 00:08:38,600
up and as it goes on what I'm seeing is

00:08:36,020 --> 00:08:40,490
that we need more and more taxing is

00:08:38,600 --> 00:08:43,670
going to happen on the networking layer

00:08:40,490 --> 00:08:45,710
because containers are going to come and

00:08:43,670 --> 00:08:47,930
go and networks have to be plumbed and

00:08:45,710 --> 00:08:49,050
unplumbed and policies have to be

00:08:47,930 --> 00:08:51,810
maintained

00:08:49,050 --> 00:08:54,360
and so when we go into that kind of

00:08:51,810 --> 00:08:56,760
stuff the offload discussion that we had

00:08:54,360 --> 00:08:59,339
for the last few days in hardware

00:08:56,760 --> 00:09:03,720
offload becomes very important for us to

00:08:59,339 --> 00:09:06,089
get the scale you doing everything in

00:09:03,720 --> 00:09:08,820
the CPU is not necessarily the best

00:09:06,089 --> 00:09:10,500
option if I can have hardware

00:09:08,820 --> 00:09:12,870
acceleration then it will be the best

00:09:10,500 --> 00:09:17,399
thing that I will actually be able to

00:09:12,870 --> 00:09:20,490
use and the other thing that I wanted to

00:09:17,399 --> 00:09:23,880
also point out was we a lot of times we

00:09:20,490 --> 00:09:27,029
look at user space implementations of

00:09:23,880 --> 00:09:30,660
stuff especially with respect to

00:09:27,029 --> 00:09:33,959
networking for us user space networking

00:09:30,660 --> 00:09:36,180
stack is very good and it avoids a lot

00:09:33,959 --> 00:09:38,519
of overhead in in some ways because

00:09:36,180 --> 00:09:41,550
every time there's a kernel to use a

00:09:38,519 --> 00:09:43,290
copy there is going to be locks taken

00:09:41,550 --> 00:09:45,690
and context switching and all of that

00:09:43,290 --> 00:09:50,250
that great stuff that goes along with it

00:09:45,690 --> 00:09:52,260
but it also adds a lot of complexity to

00:09:50,250 --> 00:09:54,959
the code as well as it slows down

00:09:52,260 --> 00:09:58,380
significantly the performance of CPUs

00:09:54,959 --> 00:10:00,870
and that's what has been shown to us in

00:09:58,380 --> 00:10:03,240
many ways that every time you cross over

00:10:00,870 --> 00:10:05,730
the user to network user to Colonel it's

00:10:03,240 --> 00:10:08,339
going to cause us a lot of grief so if i

00:10:05,730 --> 00:10:10,440
have a very large-scale application and

00:10:08,339 --> 00:10:14,820
that is crossing the user colonel

00:10:10,440 --> 00:10:18,390
boundary it's going to cost a lot so how

00:10:14,820 --> 00:10:20,370
do we minimize it is what my other big

00:10:18,390 --> 00:10:24,480
challenges and we have been trying to

00:10:20,370 --> 00:10:27,000
look at it to make sure that we keep as

00:10:24,480 --> 00:10:29,670
much stuff in the kernel as possible or

00:10:27,000 --> 00:10:32,490
kernel and below as possible and to only

00:10:29,670 --> 00:10:34,709
come up to the user space for breathing

00:10:32,490 --> 00:10:37,320
let's say because if i have a transit

00:10:34,709 --> 00:10:39,480
network traffic i don't have to go all

00:10:37,320 --> 00:10:42,149
the way to the user space to come back

00:10:39,480 --> 00:10:44,279
down all the time but that in itself

00:10:42,149 --> 00:10:46,440
provides a lot of challenges because the

00:10:44,279 --> 00:10:49,170
api's will have to be looked at and how

00:10:46,440 --> 00:10:52,140
it works has to be looked at a lot of

00:10:49,170 --> 00:10:54,019
people have very well-defined

00:10:52,140 --> 00:10:57,720
Southbourne interface in the socket API

00:10:54,019 --> 00:11:00,390
so in the networking space especially if

00:10:57,720 --> 00:11:03,059
I have to use sockets to read and write

00:11:00,390 --> 00:11:06,519
stuff to take advantage of

00:11:03,059 --> 00:11:09,009
excellent tcp stack that exists in the

00:11:06,519 --> 00:11:11,410
linux kernel today there is a certain

00:11:09,009 --> 00:11:13,540
amount of taxes I have to pay for it how

00:11:11,410 --> 00:11:15,129
do i minimize that and how do I make

00:11:13,540 --> 00:11:19,269
sure that I can take full advantage of

00:11:15,129 --> 00:11:22,929
the CPUs is is what one of our biggest

00:11:19,269 --> 00:11:27,160
challenges today and going forward

00:11:22,929 --> 00:11:30,369
that's what I would like to see working

00:11:27,160 --> 00:11:36,540
for us and at this point I would like to

00:11:30,369 --> 00:11:40,269
take a minute to thank Jamal Pablo Dave

00:11:36,540 --> 00:11:43,119
wherever here is for letting me speak

00:11:40,269 --> 00:11:45,839
here and I am open for questions if you

00:11:43,119 --> 00:11:45,839
guys have any questions

00:12:04,339 --> 00:12:09,540
okay so da you wearing a switch tape

00:12:07,860 --> 00:12:15,329
t-shirt what is what are you applying

00:12:09,540 --> 00:12:19,320
here Oh as I said before the speed with

00:12:15,329 --> 00:12:21,779
which switch dev came together and we

00:12:19,320 --> 00:12:26,519
have always been on the on the on the

00:12:21,779 --> 00:12:30,060
view that ass which is nothing but a a

00:12:26,519 --> 00:12:34,589
high port density nick is how we looked

00:12:30,060 --> 00:12:37,740
at it and see the the Linux kernel team

00:12:34,589 --> 00:12:41,220
and Linux network team come together and

00:12:37,740 --> 00:12:44,190
create that view in such a short period

00:12:41,220 --> 00:12:46,560
of time goes to the flexibility of the

00:12:44,190 --> 00:12:48,899
actual implementation of the networking

00:12:46,560 --> 00:12:51,990
stack in the kernel and also the

00:12:48,899 --> 00:12:54,600
motivation of all the offloads that we

00:12:51,990 --> 00:12:57,180
keep talking about that actually made it

00:12:54,600 --> 00:12:59,430
possible to make that happen in such a

00:12:57,180 --> 00:13:02,250
short period of time and that is

00:12:59,430 --> 00:13:06,329
impressed me actually so something some

00:13:02,250 --> 00:13:08,310
big sdk vendor was a switch defender if

00:13:06,329 --> 00:13:11,519
you had a boolean logic which one is

00:13:08,310 --> 00:13:14,790
true there my preferences as I said I

00:13:11,519 --> 00:13:19,100
don't want to boot linux to use some CLI

00:13:14,790 --> 00:13:22,380
as soon as I have some other

00:13:19,100 --> 00:13:25,440
implementation I have to know they see a

00:13:22,380 --> 00:13:27,720
lie i have to learn the CLI and if i

00:13:25,440 --> 00:13:30,300
have a variation in the CLI then i have

00:13:27,720 --> 00:13:32,399
to learn a new set of CLI it becomes a

00:13:30,300 --> 00:13:34,529
nightmare for you to manage it or I have

00:13:32,399 --> 00:13:37,320
to standardize it or I have to write a

00:13:34,529 --> 00:13:40,260
layer on top of it to abstract the CL

00:13:37,320 --> 00:13:42,510
eyes all of which we have in our network

00:13:40,260 --> 00:13:44,699
today by the way and I'm trying to move

00:13:42,510 --> 00:13:47,519
away from it because from our

00:13:44,699 --> 00:13:50,310
perspective Linux has a very well

00:13:47,519 --> 00:13:52,680
understood a scriptable environment

00:13:50,310 --> 00:13:55,920
which I can use as a not born interface

00:13:52,680 --> 00:13:58,970
to operate on why would I need more

00:13:55,920 --> 00:13:58,970
stuff is my question

00:14:02,890 --> 00:14:09,500
hi so this is a very interesting i'm

00:14:07,190 --> 00:14:12,560
wondering though at a high level can you

00:14:09,500 --> 00:14:15,890
describe kind of the scale of the

00:14:12,560 --> 00:14:18,110
problem and what I'm thinking is the

00:14:15,890 --> 00:14:20,060
larger the scale the more difficult it

00:14:18,110 --> 00:14:21,560
may be to apply some of these newer

00:14:20,060 --> 00:14:25,430
technologies at least that's my

00:14:21,560 --> 00:14:29,870
experience yes the scale is a fairly

00:14:25,430 --> 00:14:33,050
large right now so we have two distinct

00:14:29,870 --> 00:14:35,720
applications and one application is

00:14:33,050 --> 00:14:38,510
actually sitting in the in the wireless

00:14:35,720 --> 00:14:42,110
network that we run and I would like to

00:14:38,510 --> 00:14:45,170
bring this setup into that space as well

00:14:42,110 --> 00:14:47,959
at some point in the near future

00:14:45,170 --> 00:14:49,940
probably in the next year or so but the

00:14:47,959 --> 00:14:51,920
other the data center side is actually

00:14:49,940 --> 00:14:55,130
we are building it as we speak right now

00:14:51,920 --> 00:14:58,010
and that's about four data centers right

00:14:55,130 --> 00:15:00,680
now is that the kind of scale that you

00:14:58,010 --> 00:15:03,589
know so for datacenters that's actually

00:15:00,680 --> 00:15:05,390
pretty pretty impressive in terms of the

00:15:03,589 --> 00:15:07,850
applications are you able to

00:15:05,390 --> 00:15:11,360
characterize like this is our normal

00:15:07,850 --> 00:15:12,589
application like resource utilization

00:15:11,360 --> 00:15:15,079
and things like that are you finding

00:15:12,589 --> 00:15:17,779
that it's all over the board such that

00:15:15,079 --> 00:15:20,870
even if you optimize for one application

00:15:17,779 --> 00:15:25,100
maybe another application doesn't bet on

00:15:20,870 --> 00:15:27,370
it yeah so so there in our case most of

00:15:25,100 --> 00:15:30,459
the application fit into a certain model

00:15:27,370 --> 00:15:33,709
except for certain applications are more

00:15:30,459 --> 00:15:37,220
outbound oriented and some applications

00:15:33,709 --> 00:15:38,750
are inbound oriented so let me give you

00:15:37,220 --> 00:15:41,540
an example so we have an application

00:15:38,750 --> 00:15:45,769
called busy cloud so you have all your

00:15:41,540 --> 00:15:47,959
phones have pictures and contacts we

00:15:45,769 --> 00:15:50,800
back it up automatically for you and

00:15:47,959 --> 00:15:55,040
that application is mostly inbound and

00:15:50,800 --> 00:15:57,399
then you also know that we have go 90

00:15:55,040 --> 00:16:00,230
which is actually a video playback

00:15:57,399 --> 00:16:02,899
service that we provide that's mostly

00:16:00,230 --> 00:16:05,449
outbound traffic that we have so those

00:16:02,899 --> 00:16:07,040
are the kind of two different spectrums

00:16:05,449 --> 00:16:10,160
of applications that I can actually talk

00:16:07,040 --> 00:16:12,390
about that we currently have that will

00:16:10,160 --> 00:16:13,710
most likely come into this data set

00:16:12,390 --> 00:16:16,080
that's going to be running out of the

00:16:13,710 --> 00:16:19,380
data center okay so one last question

00:16:16,080 --> 00:16:21,630
related to that so in terms of your

00:16:19,380 --> 00:16:24,660
development strategy are you finding

00:16:21,630 --> 00:16:28,620
that it's mostly trying to tune systems

00:16:24,660 --> 00:16:30,930
to experimentation or are you able to

00:16:28,620 --> 00:16:33,390
actually do like kernel development for

00:16:30,930 --> 00:16:36,180
things that you absolutely need and then

00:16:33,390 --> 00:16:38,280
in terms of like like vendors and the

00:16:36,180 --> 00:16:42,630
new technology how easy do you find it

00:16:38,280 --> 00:16:46,620
to kind of integrate okay so vendors of

00:16:42,630 --> 00:16:51,390
new technology is most of the time what

00:16:46,620 --> 00:16:54,090
we see is a lot of vendors have a lot of

00:16:51,390 --> 00:16:56,520
new technology in the roadmap and we

00:16:54,090 --> 00:16:59,130
never see them come to fruition they

00:16:56,520 --> 00:17:01,470
actually disappear and other vendors

00:16:59,130 --> 00:17:03,180
have existing ones they painted green

00:17:01,470 --> 00:17:04,890
one day blue another day right another

00:17:03,180 --> 00:17:08,370
day at they just bring it to me and sell

00:17:04,890 --> 00:17:11,760
it to me as far as kernel development is

00:17:08,370 --> 00:17:14,870
concerned we actually rely mostly on

00:17:11,760 --> 00:17:19,260
people like Jamal and others to actually

00:17:14,870 --> 00:17:21,870
help us with some of those things if if

00:17:19,260 --> 00:17:24,060
it is agreeable with the kernel

00:17:21,870 --> 00:17:26,880
development team we don't get everything

00:17:24,060 --> 00:17:32,000
we want but some of the things that may

00:17:26,880 --> 00:17:35,430
get it the requirements are also very

00:17:32,000 --> 00:17:37,170
very specific to us and we are aware of

00:17:35,430 --> 00:17:38,910
that and when there are requirements

00:17:37,170 --> 00:17:41,760
that are specific to us we don't always

00:17:38,910 --> 00:17:45,660
push it to the gun we will try to solve

00:17:41,760 --> 00:17:47,310
it another way either a box in the front

00:17:45,660 --> 00:17:48,750
or a box in the back or something else

00:17:47,310 --> 00:17:51,030
we will do something else to solve our

00:17:48,750 --> 00:17:53,850
problems that way instead of pushing

00:17:51,030 --> 00:17:56,010
everything into corner because if I have

00:17:53,850 --> 00:17:57,180
to push everything in the colonel I have

00:17:56,010 --> 00:18:00,030
to be in the bleeding edge of the

00:17:57,180 --> 00:18:01,440
colonel and I haven't seen anything

00:18:00,030 --> 00:18:03,510
that's at the bleeding edge of the

00:18:01,440 --> 00:18:06,570
kernel that action can provide me with

00:18:03,510 --> 00:18:08,790
the user space applications that I need

00:18:06,570 --> 00:18:10,710
well I mean I mean clearly that's true

00:18:08,790 --> 00:18:11,789
but one thing that's really nice about

00:18:10,710 --> 00:18:14,970
linux and you

00:18:11,789 --> 00:18:19,710
an open-source operating system for a

00:18:14,970 --> 00:18:21,330
scenario like this is so it's not so

00:18:19,710 --> 00:18:23,399
easy just to come and say here's a whole

00:18:21,330 --> 00:18:25,710
bunch of requirements for us please

00:18:23,399 --> 00:18:27,239
implement them that's kind of not the

00:18:25,710 --> 00:18:31,619
way it works the way it works is more

00:18:27,239 --> 00:18:34,139
like like it's up to you to kind of if

00:18:31,619 --> 00:18:36,090
you contribute something and then build

00:18:34,139 --> 00:18:38,279
on that so why would I see a lot of is

00:18:36,090 --> 00:18:40,679
we start with very small things like

00:18:38,279 --> 00:18:42,359
some of the the package steering and

00:18:40,679 --> 00:18:45,749
things like that and over the years this

00:18:42,359 --> 00:18:47,729
mushrooms and some of this stuff fits

00:18:45,749 --> 00:18:49,799
very well into the datacenter model some

00:18:47,729 --> 00:18:51,779
of it does and some of its more you know

00:18:49,799 --> 00:18:55,019
for completely different use cases but

00:18:51,779 --> 00:18:56,820
the net effect is in some sense if if we

00:18:55,019 --> 00:18:58,679
are somehow getting the requirements in

00:18:56,820 --> 00:19:00,629
and I think you've been here a great a

00:18:58,679 --> 00:19:02,070
great thing to do getting the

00:19:00,629 --> 00:19:04,590
requirements back to the actual

00:19:02,070 --> 00:19:05,789
developers development community then

00:19:04,590 --> 00:19:08,099
that gives us the opportunity to

00:19:05,789 --> 00:19:09,599
actually build solutions that fit into

00:19:08,099 --> 00:19:12,479
this model and that's why I asked like

00:19:09,599 --> 00:19:14,999
how easy it is is it to update hardware

00:19:12,479 --> 00:19:16,440
across your data center that's a really

00:19:14,999 --> 00:19:18,509
hard problem for anyone so we're talking

00:19:16,440 --> 00:19:20,879
years before we get like switched up and

00:19:18,509 --> 00:19:22,289
things like that into production so we

00:19:20,879 --> 00:19:23,940
need to be aware of that but also give

00:19:22,289 --> 00:19:27,029
us the opportunity if we can do stuff in

00:19:23,940 --> 00:19:28,499
software in the short term that solve

00:19:27,029 --> 00:19:29,999
some of these problems so it's kind of

00:19:28,499 --> 00:19:32,849
like we want to approach this from all

00:19:29,999 --> 00:19:34,769
angles but again we need the you know

00:19:32,849 --> 00:19:36,599
the resource requirements and we

00:19:34,769 --> 00:19:39,029
definitely know that wireless and data

00:19:36,599 --> 00:19:40,409
center and end users have very very

00:19:39,029 --> 00:19:43,889
different requirements trying to satisfy

00:19:40,409 --> 00:19:45,239
those in 10 s is a challenge that's the

00:19:43,889 --> 00:19:47,429
biggest challenge that I have right

00:19:45,239 --> 00:19:50,009
there when I have so much of variation

00:19:47,429 --> 00:19:52,320
in my application space getting one

00:19:50,009 --> 00:19:56,009
applicant one solution to solve it is

00:19:52,320 --> 00:19:57,659
very different but in our current data

00:19:56,009 --> 00:20:00,289
center we are trying to build it in such

00:19:57,659 --> 00:20:05,099
a way that we can actually flip out any

00:20:00,289 --> 00:20:07,470
any part of the hardware anytime we want

00:20:05,099 --> 00:20:09,239
just to try out a new one because we are

00:20:07,470 --> 00:20:11,669
trying to build a scale on model and

00:20:09,239 --> 00:20:14,159
then we are not trying to make sure we

00:20:11,669 --> 00:20:16,409
are trying to make it make it modular

00:20:14,159 --> 00:20:19,409
enough that if I changed something it

00:20:16,409 --> 00:20:21,659
doesn't always make everything else not

00:20:19,409 --> 00:20:22,140
usable so that's what we are trying to

00:20:21,659 --> 00:20:24,000
show

00:20:22,140 --> 00:20:25,650
you have to protect your investment

00:20:24,000 --> 00:20:28,020
right i mean there are certain things

00:20:25,650 --> 00:20:30,450
that we have to protect others i am

00:20:28,020 --> 00:20:33,780
willing to change it right now we are

00:20:30,450 --> 00:20:36,750
thinking about how do i wire up top of

00:20:33,780 --> 00:20:39,960
racks we just to end of row it's as

00:20:36,750 --> 00:20:42,180
simple as that one itself is a it's not

00:20:39,960 --> 00:20:43,500
such a simple thing if you actually look

00:20:42,180 --> 00:20:46,410
at the bundle of wires that have to

00:20:43,500 --> 00:20:48,930
carry over from one place to another

00:20:46,410 --> 00:20:51,600
when you have so many racks in one

00:20:48,930 --> 00:20:55,020
location so we are actually looking at

00:20:51,600 --> 00:20:58,110
how do we optimize those paths and make

00:20:55,020 --> 00:21:01,890
sure that the switches that we have can

00:20:58,110 --> 00:21:05,100
be modified fairly simply we are also

00:21:01,890 --> 00:21:08,370
selecting technologies today that will

00:21:05,100 --> 00:21:09,960
allow me to change out from a software

00:21:08,370 --> 00:21:11,730
model to a hardware model fairly easily

00:21:09,960 --> 00:21:15,450
that's the other thing I'm very

00:21:11,730 --> 00:21:17,760
cognizant about if there's a software

00:21:15,450 --> 00:21:20,250
model that will lend itself to be

00:21:17,760 --> 00:21:21,960
accelerated by hardware that is the

00:21:20,250 --> 00:21:23,940
model that I will go forward with and

00:21:21,960 --> 00:21:25,410
that's why it's which dev was very

00:21:23,940 --> 00:21:28,290
attractive to me because it actually

00:21:25,410 --> 00:21:30,720
allowed me to take what runs on a

00:21:28,290 --> 00:21:32,760
software can be accelerated using a

00:21:30,720 --> 00:21:36,210
hardware in tomorrow's day that's what

00:21:32,760 --> 00:21:40,920
have you had success with that so far in

00:21:36,210 --> 00:21:43,350
some mechanisms I we have for instance

00:21:40,920 --> 00:21:45,120
there ipsec that we were talking about

00:21:43,350 --> 00:21:49,170
earlier we have had some success in

00:21:45,120 --> 00:21:51,750
accelerating that in hardware because

00:21:49,170 --> 00:21:54,270
bulk encrypt decrypt can be done in many

00:21:51,750 --> 00:21:56,580
different hardware not necessarily on

00:21:54,270 --> 00:21:58,710
nicks but other hardware but other than

00:21:56,580 --> 00:22:01,320
that we haven't done too much of that

00:21:58,710 --> 00:22:04,860
yet i'm still waiting for the first

00:22:01,320 --> 00:22:12,150
version of workable hard i can actually

00:22:04,860 --> 00:22:16,470
use which there are TJ your last point

00:22:12,150 --> 00:22:18,600
about the propagating custom CL eyes is

00:22:16,470 --> 00:22:21,630
this more of a statement about you want

00:22:18,600 --> 00:22:22,310
one CLI or you don't even want any CLI

00:22:21,630 --> 00:22:24,560
you want

00:22:22,310 --> 00:22:27,260
do things programmatically I want to do

00:22:24,560 --> 00:22:30,550
things programmatically I don't want CLI

00:22:27,260 --> 00:22:33,680
CLI is 10 to cause grief it will always

00:22:30,550 --> 00:22:36,620
have bifurcation at some point because

00:22:33,680 --> 00:22:38,140
everybody wants they gone are the days

00:22:36,620 --> 00:22:40,760
when people wanted to make

00:22:38,140 --> 00:22:42,590
differentiation in in Hardware a lot of

00:22:40,760 --> 00:22:45,050
times nowadays the differentiation and

00:22:42,590 --> 00:22:47,360
the stickiness come from the CLI more

00:22:45,050 --> 00:22:50,120
than anything else and I'm trying to get

00:22:47,360 --> 00:22:51,620
rid of that so that it's actually in the

00:22:50,120 --> 00:22:53,570
implementation that you make the

00:22:51,620 --> 00:22:56,960
differentiation not on the user

00:22:53,570 --> 00:22:58,700
interface so if you if you want to have

00:22:56,960 --> 00:23:01,700
a programmatic interface the things do

00:22:58,700 --> 00:23:06,950
you have any flavor of theology that you

00:23:01,700 --> 00:23:10,970
want to apply to that I'm sort of from

00:23:06,950 --> 00:23:13,780
like the ansible rest yang all that sort

00:23:10,970 --> 00:23:17,210
of possible University do you not care

00:23:13,780 --> 00:23:20,120
my personal preference is a rust for

00:23:17,210 --> 00:23:22,490
most of the time and because that's easy

00:23:20,120 --> 00:23:26,870
to understand and easy to manage easy to

00:23:22,490 --> 00:23:29,540
upgrade yang requires a significant

00:23:26,870 --> 00:23:34,400
amount of upfront lift before you can do

00:23:29,540 --> 00:23:38,660
anything so from that perspective i have

00:23:34,400 --> 00:23:41,620
seen somebody tried to define yang for a

00:23:38,660 --> 00:23:43,730
router and it took them about two years

00:23:41,620 --> 00:23:45,050
because a lot of people had to come

00:23:43,730 --> 00:23:48,050
together and I don't know whether it

00:23:45,050 --> 00:23:51,950
eventually worked out or not when I was

00:23:48,050 --> 00:23:55,550
part of IETF that's what I saw and so

00:23:51,950 --> 00:23:58,070
it's people sometimes say a lot of

00:23:55,550 --> 00:24:01,370
things that can be done doesn't mean

00:23:58,070 --> 00:24:04,070
that it will be done and there is a lot

00:24:01,370 --> 00:24:07,070
of gap between reality and that so

00:24:04,070 --> 00:24:09,680
programmatically I would prefer a simple

00:24:07,070 --> 00:24:11,720
JSON format that actually I can do

00:24:09,680 --> 00:24:14,800
respond api's to that's the best way I

00:24:11,720 --> 00:24:14,800
look at it

00:24:18,940 --> 00:24:24,370
if there are no one of the questions

00:24:21,050 --> 00:24:24,370

YouTube URL: https://www.youtube.com/watch?v=FLXafTTrlfY


