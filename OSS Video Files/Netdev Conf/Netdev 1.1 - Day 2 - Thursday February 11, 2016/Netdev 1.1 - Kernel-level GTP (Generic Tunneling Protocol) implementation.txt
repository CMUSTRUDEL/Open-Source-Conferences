Title: Netdev 1.1 - Kernel-level GTP (Generic Tunneling Protocol) implementation
Publication date: 2016-03-10
Playlist: Netdev 1.1 - Day 2 - Thursday February 11, 2016
Description: 
	Harald Welte, Andreas Schultz
February 2016
Captions: 
	00:00:00,000 --> 00:00:04,440
I'd like to welcome everyone to the

00:00:02,070 --> 00:00:07,200
first session this afternoon which is

00:00:04,440 --> 00:00:08,849
going to be about a kernel level gtp

00:00:07,200 --> 00:00:11,820
implementation that we've been working

00:00:08,849 --> 00:00:16,580
on inside the osmocon project osmocon is

00:00:11,820 --> 00:00:20,130
open source mobile communications ok so

00:00:16,580 --> 00:00:24,080
let's start with a introduction about

00:00:20,130 --> 00:00:28,109
what is gtp at all in the first place

00:00:24,080 --> 00:00:30,960
gtp is the GPRS tunneling protocol which

00:00:28,109 --> 00:00:33,480
was first introduced with GPRS which is

00:00:30,960 --> 00:00:36,800
the packet switched add-on to GSM

00:00:33,480 --> 00:00:40,370
networks that was first deployed around

00:00:36,800 --> 00:00:44,640
1999-2000 at that kind of timeframe and

00:00:40,370 --> 00:00:48,930
GPRS basically serves to or is there to

00:00:44,640 --> 00:00:52,530
serve IP IP data user data to a mobile

00:00:48,930 --> 00:00:56,280
phone and to do so it establishes what

00:00:52,530 --> 00:00:58,079
it's called a PDP context and the PDP

00:00:56,280 --> 00:01:00,090
context is basically a tunnel that is

00:00:58,079 --> 00:01:03,600
established from the mobile phones

00:01:00,090 --> 00:01:06,000
through the entire cell core network and

00:01:03,600 --> 00:01:10,010
radio access network to the external IP

00:01:06,000 --> 00:01:14,610
network and in the original GPRS

00:01:10,010 --> 00:01:17,040
networks and edge to the same extent it

00:01:14,610 --> 00:01:20,250
was used between the s3 as an energy GSM

00:01:17,040 --> 00:01:22,009
node and that's the interface here on

00:01:20,250 --> 00:01:25,350
the right hand side of the slide and

00:01:22,009 --> 00:01:26,850
that interface is also the interface if

00:01:25,350 --> 00:01:29,280
you're in a roaming scenario for example

00:01:26,850 --> 00:01:31,110
then the entire left part up and

00:01:29,280 --> 00:01:33,150
including the sgsn is in the visited

00:01:31,110 --> 00:01:35,640
network and the G GSN is in the home

00:01:33,150 --> 00:01:38,250
network and this gtp protocol is then

00:01:35,640 --> 00:01:41,369
exchanged between operators and make

00:01:38,250 --> 00:01:43,320
sure that your IP tunnel always goes

00:01:41,369 --> 00:01:46,979
back to your home network and doesn't

00:01:43,320 --> 00:01:49,409
terminate in the visited network the

00:01:46,979 --> 00:01:52,920
same protocol is used also in UMTS in

00:01:49,409 --> 00:01:54,899
the earlier releases basically nothing

00:01:52,920 --> 00:01:56,939
really changed so you also have an STS

00:01:54,899 --> 00:02:01,140
and energy GSN and they speak TTP to

00:01:56,939 --> 00:02:02,850
each other and as speeds got higher and

00:02:01,140 --> 00:02:05,970
higher with

00:02:02,850 --> 00:02:09,960
release seven of the umps network

00:02:05,970 --> 00:02:12,570
architecture actually GTP no longer is

00:02:09,960 --> 00:02:14,970
originated by the sgsn but the user

00:02:12,570 --> 00:02:16,740
plane already can be originated by the

00:02:14,970 --> 00:02:19,040
node B which is basically your base

00:02:16,740 --> 00:02:22,980
station at the edge of the network so

00:02:19,040 --> 00:02:24,870
gtp is used more and by more elements

00:02:22,980 --> 00:02:28,050
and different elements in the later

00:02:24,870 --> 00:02:34,770
release UMTS networks and once we go

00:02:28,050 --> 00:02:37,200
further to LTE basically there are even

00:02:34,770 --> 00:02:42,739
more interfaces all over the network

00:02:37,200 --> 00:02:45,330
that use gtp the GPRS tunneling protocol

00:02:42,739 --> 00:02:48,660
just for me to get a little bit of an

00:02:45,330 --> 00:02:50,280
input is that is everyone familiar with

00:02:48,660 --> 00:02:53,820
that architecture or is there a useful

00:02:50,280 --> 00:02:57,600
introduction so far who has never heard

00:02:53,820 --> 00:02:59,430
of gtp before in this room okay that's a

00:02:57,600 --> 00:03:02,580
relatively large number of people okay

00:02:59,430 --> 00:03:06,390
then I should maybe not have gone that

00:03:02,580 --> 00:03:08,820
quickly through the that part but

00:03:06,390 --> 00:03:12,750
nevertheless it is used between lots of

00:03:08,820 --> 00:03:15,530
network elements and so far I mean you

00:03:12,750 --> 00:03:18,180
can of course buy lots of proprietary

00:03:15,530 --> 00:03:20,430
equipment from various vendors that

00:03:18,180 --> 00:03:24,950
implements the functional elements like

00:03:20,430 --> 00:03:28,769
the essays and other tdsn in this slide

00:03:24,950 --> 00:03:30,600
but if you look at Linux so far there's

00:03:28,769 --> 00:03:33,870
to my knowledge only one implementation

00:03:30,600 --> 00:03:37,079
of let's say a tree GSN which brings a

00:03:33,870 --> 00:03:39,060
gtp implementation with it and that's a

00:03:37,079 --> 00:03:41,310
user space implementation so basically

00:03:39,060 --> 00:03:43,739
you have user space code that adds and

00:03:41,310 --> 00:03:46,530
removes your your your header and

00:03:43,739 --> 00:03:49,620
implements the tunneling feature and

00:03:46,530 --> 00:03:52,410
that's basically something that we try

00:03:49,620 --> 00:03:56,250
to change and we will describe in more

00:03:52,410 --> 00:03:59,549
detail okay getting to LTE networks LTE

00:03:56,250 --> 00:04:01,230
is also referred to as 4G networks by

00:03:59,549 --> 00:04:03,829
some people the first generation of

00:04:01,230 --> 00:04:07,410
mobile cellular networks in digital form

00:04:03,829 --> 00:04:09,939
it uses gtp even at more interfaces

00:04:07,410 --> 00:04:13,819
throughout the network elements

00:04:09,939 --> 00:04:16,459
so what if we go back originally gtp and

00:04:13,819 --> 00:04:18,139
GPRS and in the early UMTS it was only

00:04:16,459 --> 00:04:22,729
spoken on the core network side on the

00:04:18,139 --> 00:04:25,310
right-hand side of those slides and then

00:04:22,729 --> 00:04:26,960
in a set in later UMTS releases it has

00:04:25,310 --> 00:04:28,639
moved to the edge to the actual base

00:04:26,960 --> 00:04:32,900
station which is called node B in this

00:04:28,639 --> 00:04:37,130
case and in LTE this is the normal case

00:04:32,900 --> 00:04:39,740
so gtp is already originated by each and

00:04:37,130 --> 00:04:43,190
every base station that you find in an

00:04:39,740 --> 00:04:46,039
LTE network and it encapsulate the user

00:04:43,190 --> 00:04:48,500
IP data over the IP network that is used

00:04:46,039 --> 00:04:50,630
for transport for backhaul basically for

00:04:48,500 --> 00:04:56,150
connecting your base stations with the

00:04:50,630 --> 00:04:58,789
operator core network the gtp is passed

00:04:56,150 --> 00:05:02,870
from the node B to something called the

00:04:58,789 --> 00:05:05,660
STS GW and the serving gateway and then

00:05:02,870 --> 00:05:09,740
the serving gateway forwards those

00:05:05,660 --> 00:05:12,830
packets to the packet gateway or PD ng W

00:05:09,740 --> 00:05:13,300
or PG w that then again interfaces with

00:05:12,830 --> 00:05:15,530
the

00:05:13,300 --> 00:05:18,080
external IP network so here on the

00:05:15,530 --> 00:05:20,180
right-hand side of the PGW

00:05:18,080 --> 00:05:22,250
you would then have either public

00:05:20,180 --> 00:05:24,320
internet access or access to private

00:05:22,250 --> 00:05:27,169
corporate IP networks or whatever you

00:05:24,320 --> 00:05:28,610
might want to imagine and gtp serves as

00:05:27,169 --> 00:05:33,139
a transport medium between those

00:05:28,610 --> 00:05:36,380
elements well so gtp itself is split

00:05:33,139 --> 00:05:39,680
into two parts there is a control part

00:05:36,380 --> 00:05:41,720
and a user plain part and now we are in

00:05:39,680 --> 00:05:46,039
the funny situation that we want to put

00:05:41,720 --> 00:05:47,599
the user plane into a kernel space which

00:05:46,039 --> 00:05:49,190
sort of sometimes confused because if

00:05:47,599 --> 00:05:50,599
user space but now you want to have a

00:05:49,190 --> 00:05:53,120
user plane and that you handle in the

00:05:50,599 --> 00:05:54,800
kernel but anyway as I don't get

00:05:53,120 --> 00:05:56,449
confused about the meaning of user in

00:05:54,800 --> 00:05:58,699
this context so we have a control plane

00:05:56,449 --> 00:06:01,820
that exists to basically configure

00:05:58,699 --> 00:06:05,120
establish modify and teardown tunnels

00:06:01,820 --> 00:06:08,150
and we have a user plane which carries

00:06:05,120 --> 00:06:11,270
the actual user traffic all of this

00:06:08,150 --> 00:06:13,969
happens on top of well-known UDP ports

00:06:11,270 --> 00:06:17,719
there's two port numbers

00:06:13,969 --> 00:06:19,610
that I used for gtp why - well this

00:06:17,719 --> 00:06:21,110
relates to different versions we don't

00:06:19,610 --> 00:06:23,089
want to go into all of the details here

00:06:21,110 --> 00:06:27,159
but there's basically version zero

00:06:23,089 --> 00:06:30,939
version one and version two of GDP and

00:06:27,159 --> 00:06:33,529
it spoken different versions are using

00:06:30,939 --> 00:06:35,449
different ports and also control and and

00:06:33,529 --> 00:06:38,149
user plain can use different ports

00:06:35,449 --> 00:06:40,969
depending on the version of TTP that is

00:06:38,149 --> 00:06:42,860
being implemented this tool this

00:06:40,969 --> 00:06:44,839
protocol is specified like all of the

00:06:42,860 --> 00:06:47,539
other cellular protocols are specified

00:06:44,839 --> 00:06:49,849
by the 3gpp the third generation

00:06:47,539 --> 00:06:51,860
partnership project originally they

00:06:49,849 --> 00:06:53,239
inherited this from the Etsy at the

00:06:51,860 --> 00:06:56,360
European telecommunication

00:06:53,239 --> 00:06:58,789
standardization Institute so yeah once

00:06:56,360 --> 00:07:00,979
again the control to set up a teardown

00:06:58,789 --> 00:07:03,709
modify the actual channels and the user

00:07:00,979 --> 00:07:05,479
plan to encapsulate the user IP data

00:07:03,709 --> 00:07:07,360
coming from the mobile phone and vice

00:07:05,479 --> 00:07:11,649
versa

00:07:07,360 --> 00:07:14,389
what's interesting is that there is

00:07:11,649 --> 00:07:17,029
identifier specific new identifiers to

00:07:14,389 --> 00:07:19,610
distinguish the individual channels from

00:07:17,029 --> 00:07:21,889
each other they're called T IDs channel

00:07:19,610 --> 00:07:24,669
identifiers depending on the version of

00:07:21,889 --> 00:07:28,579
the protocol that can be 32 or 64 bits

00:07:24,669 --> 00:07:33,229
and there's one for each direction so

00:07:28,579 --> 00:07:36,409
basically one for each side so off of

00:07:33,229 --> 00:07:38,689
the of the tunnel so it's not only one

00:07:36,409 --> 00:07:40,929
ton identifier but basically one channel

00:07:38,689 --> 00:07:43,879
identify a per direction of your

00:07:40,929 --> 00:07:49,029
connection and it's the only identifier

00:07:43,879 --> 00:07:52,369
for your packets not IP portals so

00:07:49,029 --> 00:07:53,749
basically it's a bit different from what

00:07:52,369 --> 00:07:55,669
you normally would look like when you

00:07:53,749 --> 00:07:57,379
try to find out which packets belong to

00:07:55,669 --> 00:07:59,329
a tunnel or to not belong to a channel

00:07:57,379 --> 00:08:01,999
you don't care what the source IP

00:07:59,329 --> 00:08:04,579
address is no matter what the source IP

00:08:01,999 --> 00:08:07,579
address is if the t ID matches then

00:08:04,579 --> 00:08:09,199
basically that's part of the and

00:08:07,579 --> 00:08:11,269
particularly the port number is the same

00:08:09,199 --> 00:08:15,199
for all of the tunnels so you have

00:08:11,269 --> 00:08:17,209
basically no way to distinguish

00:08:15,199 --> 00:08:21,559
different tunnels by okay

00:08:17,209 --> 00:08:23,149
somebody has fun with the light okay so

00:08:21,559 --> 00:08:25,279
you differentiate based on these tunnel

00:08:23,149 --> 00:08:26,990
identifiers and support for packet

00:08:25,279 --> 00:08:30,289
sequence numberings and and

00:08:26,990 --> 00:08:32,060
basically to enforce order ordering

00:08:30,289 --> 00:08:34,610
guarantees since it operates on top of

00:08:32,060 --> 00:08:38,570
UDP and there's some support in that in

00:08:34,610 --> 00:08:43,339
the protocol so the control plane

00:08:38,570 --> 00:08:45,980
protocol is well you exchanged some

00:08:43,339 --> 00:08:49,580
metadata you assign addresses to both

00:08:45,980 --> 00:08:54,200
sides of the tunnel you can specify the

00:08:49,580 --> 00:08:56,240
DHS DHCP the DNS server so DHCP like

00:08:54,200 --> 00:08:57,770
functionality you can specify the DNS

00:08:56,240 --> 00:08:59,870
service that the mobile station should

00:08:57,770 --> 00:09:01,670
be using and you establish and remove

00:08:59,870 --> 00:09:05,420
those tunnels and as the user moves

00:09:01,670 --> 00:09:07,279
across the mobility I mean the different

00:09:05,420 --> 00:09:09,860
parts of the network moves across cells

00:09:07,279 --> 00:09:12,230
across coverage areas even from one

00:09:09,860 --> 00:09:14,180
operator to another maybe and then you

00:09:12,230 --> 00:09:16,610
need to move those tunnel endpoints of

00:09:14,180 --> 00:09:19,850
course from one gateway to the other so

00:09:16,610 --> 00:09:22,010
basically the PDP context the tunnel

00:09:19,850 --> 00:09:24,680
between the user device and the core

00:09:22,010 --> 00:09:27,529
network can stay established why are you

00:09:24,680 --> 00:09:31,700
changing cells and even serving gateways

00:09:27,529 --> 00:09:35,000
Oreste reasons or other parts of the

00:09:31,700 --> 00:09:38,300
network involved so now I'm going to

00:09:35,000 --> 00:09:40,970
hand over to and aleeah's to cover the

00:09:38,300 --> 00:09:42,649
little bit about gtp itself and then the

00:09:40,970 --> 00:09:46,640
Osmo comm implementation that we were

00:09:42,649 --> 00:09:49,399
working on yeah the user space program

00:09:46,640 --> 00:09:52,040
protocol of basically out the control

00:09:49,399 --> 00:09:56,990
plane protocol as well they have a fixed

00:09:52,040 --> 00:09:59,990
header which identifies the type mostly

00:09:56,990 --> 00:10:02,930
the only three types like echo request

00:09:59,990 --> 00:10:04,870
replies then the user data traffic and

00:10:02,930 --> 00:10:10,329
the control data traffic

00:10:04,870 --> 00:10:10,329
now the

00:10:13,640 --> 00:10:19,050
yeah the the echo replies are used for

00:10:16,170 --> 00:10:20,580
pet maintenance and a bit of length

00:10:19,050 --> 00:10:23,750
information so there's nothing that

00:10:20,580 --> 00:10:26,460
specific they're that interesting

00:10:23,750 --> 00:10:28,140
so it's it's a relatively simple I mean

00:10:26,460 --> 00:10:29,250
it see the six fixed header I mean we

00:10:28,140 --> 00:10:31,230
don't need to spend time about

00:10:29,250 --> 00:10:33,330
explaining that there can be some TVs at

00:10:31,230 --> 00:10:34,560
the end but for the user traffic that

00:10:33,330 --> 00:10:36,120
we're looking here to move into the

00:10:34,560 --> 00:10:38,730
kernel it's relatively simple had a

00:10:36,120 --> 00:10:43,110
straightforward to parse straightforward

00:10:38,730 --> 00:10:47,760
to continue now the question is well

00:10:43,110 --> 00:10:50,600
what to do what's the problem with user

00:10:47,760 --> 00:10:55,110
faced gtp well that's pretty easy

00:10:50,600 --> 00:10:57,330
basically we have the problem that with

00:10:55,110 --> 00:10:59,610
GPRS and the speeds at that time like

00:10:57,330 --> 00:11:01,500
talking about kilobits or tens of kilo

00:10:59,610 --> 00:11:03,780
bits or maybe hundreds of kilo bits if

00:11:01,500 --> 00:11:05,520
we have a first subscriber then of

00:11:03,780 --> 00:11:06,930
course you don't mind doing all that in

00:11:05,520 --> 00:11:09,060
user space even if it's a lot of

00:11:06,930 --> 00:11:11,550
subscribers it will not add up to really

00:11:09,060 --> 00:11:13,410
significant data rates but if you move

00:11:11,550 --> 00:11:17,520
to more modern cellular technologies

00:11:13,410 --> 00:11:19,500
like HSPA and particularly LTE the world

00:11:17,520 --> 00:11:22,740
has completely changed and you

00:11:19,500 --> 00:11:24,750
definitely have a very large bandwidth

00:11:22,740 --> 00:11:27,330
that you need to handle at those central

00:11:24,750 --> 00:11:31,170
elements in your network and the control

00:11:27,330 --> 00:11:36,240
plane traffic is very limited of course

00:11:31,170 --> 00:11:37,950
and therefore it can stay to continue to

00:11:36,240 --> 00:11:39,720
be processed in user space you have your

00:11:37,950 --> 00:11:42,360
actual implementation of that network

00:11:39,720 --> 00:11:45,990
element but the user plane you try to

00:11:42,360 --> 00:11:48,330
move into the kernel and that's

00:11:45,990 --> 00:11:49,230
basically what andreas is going to

00:11:48,330 --> 00:11:53,330
explain further

00:11:49,230 --> 00:11:55,620
yes the the traffic becomes more time

00:11:53,330 --> 00:11:58,890
critical and more bandwidth for hungry

00:11:55,620 --> 00:12:00,570
so I think that's in use up you know the

00:11:58,890 --> 00:12:04,110
plane introduces latency is that you

00:12:00,570 --> 00:12:07,860
want to avoid and hope to reduce those

00:12:04,110 --> 00:12:10,020
latency by putting into a secona the

00:12:07,860 --> 00:12:12,650
control plane makes absolutely no sense

00:12:10,020 --> 00:12:16,800
to put them into the into the corner

00:12:12,650 --> 00:12:18,870
there are the repairs that transport all

00:12:16,800 --> 00:12:20,190
the informations and they simply have no

00:12:18,870 --> 00:12:23,620
place in the krona they are not

00:12:20,190 --> 00:12:26,709
interesting they're now too

00:12:23,620 --> 00:12:30,170
to actually establish the usual data

00:12:26,709 --> 00:12:31,850
tunnel we only need a few information to

00:12:30,170 --> 00:12:34,639
perversion from the from the user plain

00:12:31,850 --> 00:12:37,129
to the corner this basically the IP

00:12:34,639 --> 00:12:40,730
address of the the station that uses the

00:12:37,129 --> 00:12:44,300
standard the endpoint address of the

00:12:40,730 --> 00:12:45,649
sgsn we want to talk to and the toner

00:12:44,300 --> 00:12:50,439
identifier yeah

00:12:45,649 --> 00:12:53,300
for that we use the net link based API

00:12:50,439 --> 00:12:57,079
yeah okay

00:12:53,300 --> 00:12:58,930
yeah the the old implementation was

00:12:57,079 --> 00:13:03,110
actually started quite a while ago and

00:12:58,930 --> 00:13:05,420
2012 by by Howard and Pablo now

00:13:03,110 --> 00:13:07,819
apparently their customer at the time

00:13:05,420 --> 00:13:11,089
disappeared and so was this lay around

00:13:07,819 --> 00:13:14,740
and some some kind of git repository and

00:13:11,089 --> 00:13:18,589
I already discovered this yeah I think

00:13:14,740 --> 00:13:21,170
so well I'm not actually fixed harrods

00:13:18,589 --> 00:13:23,540
and the problems backs but I introduced

00:13:21,170 --> 00:13:25,759
new ones I think also the author

00:13:23,540 --> 00:13:27,980
implementation being three years or

00:13:25,759 --> 00:13:29,930
didn't take a network maybe space since

00:13:27,980 --> 00:13:33,050
this kind of things into account

00:13:29,930 --> 00:13:35,959
so I added that a bit and obviously

00:13:33,050 --> 00:13:38,259
doing during those years a couple of ton

00:13:35,959 --> 00:13:42,110
of support coat in the the corner

00:13:38,259 --> 00:13:47,300
appeared and changed and so I adopted

00:13:42,110 --> 00:13:50,600
that to that as well also cost for was a

00:13:47,300 --> 00:13:53,000
specific project I need that for we want

00:13:50,600 --> 00:13:54,500
to run the outer tunnel the encapsulated

00:13:53,000 --> 00:13:58,069
packets into a different network

00:13:54,500 --> 00:14:01,670
namespace then the user data Tonga did

00:13:58,069 --> 00:14:03,620
not use a data traffic and so as far as

00:14:01,670 --> 00:14:06,129
I know it's at the moment the only

00:14:03,620 --> 00:14:08,899
tunnel protocol in and I was Crona that

00:14:06,129 --> 00:14:15,230
works across a network namespace in a

00:14:08,899 --> 00:14:18,050
way yeah the the net link API this

00:14:15,230 --> 00:14:22,009
changed a bit in misperceive is in your

00:14:18,050 --> 00:14:22,699
new version but it's still built on top

00:14:22,009 --> 00:14:28,290
of

00:14:22,699 --> 00:14:30,569
Ganet link organ and now for two extra

00:14:28,290 --> 00:14:35,699
set up a tunnel we first need to

00:14:30,569 --> 00:14:37,949
discover the ID then we create the GTP

00:14:35,699 --> 00:14:39,869
socket and user space actually create

00:14:37,949 --> 00:14:41,100
two sockets in user space one for GTP

00:14:39,869 --> 00:14:45,329
vv0

00:14:41,100 --> 00:14:47,639
and one for the version version one then

00:14:45,329 --> 00:14:50,549
they pass that on to the network that is

00:14:47,639 --> 00:14:53,999
a kernel to to work on those sockets and

00:14:50,549 --> 00:14:56,579
bind bind the sockets to a ton like

00:14:53,999 --> 00:15:00,119
network interface the tandoc interface

00:14:56,579 --> 00:15:03,449
is used to capture the traffic from the

00:15:00,119 --> 00:15:08,369
from the user and routed through the 3d

00:15:03,449 --> 00:15:11,819
tailor then so to identify which tunnel

00:15:08,369 --> 00:15:14,279
we want to use we create a PDP context

00:15:11,819 --> 00:15:15,869
structure which contains the relevant

00:15:14,279 --> 00:15:19,379
information like the IP address the

00:15:15,869 --> 00:15:21,389
eternal endpoint identifier actually to

00:15:19,379 --> 00:15:23,759
that trauma and part identifier one for

00:15:21,389 --> 00:15:27,209
the incoming packets one for the

00:15:23,759 --> 00:15:38,239
outgoing packets and the remote end

00:15:27,209 --> 00:15:43,350
point for the sgsn thing now one thing

00:15:38,239 --> 00:15:45,449
was gtp is that on a singer IP address

00:15:43,350 --> 00:15:46,410
you can actually have one endpoint and

00:15:45,449 --> 00:15:49,319
that endpoint

00:15:46,410 --> 00:15:54,600
needs to be managed by the same control

00:15:49,319 --> 00:15:57,089
instance the con type I a PG v or GG s

00:15:54,600 --> 00:15:59,459
and IP shared by different control

00:15:57,089 --> 00:16:02,249
instances that's because he is a tunnel

00:15:59,459 --> 00:16:05,039
identify I need to can't rely on that

00:16:02,249 --> 00:16:09,839
endpoint they need to be unique in every

00:16:05,039 --> 00:16:12,589
direction following that VM we also use

00:16:09,839 --> 00:16:15,539
only one tunnel that only one virtually

00:16:12,589 --> 00:16:18,059
Senate interface to capture the traffic

00:16:15,539 --> 00:16:20,429
and direct that through the endpoint

00:16:18,059 --> 00:16:23,519
into the tunnels and then on to the

00:16:20,429 --> 00:16:25,049
mobile network also I mean it doesn't

00:16:23,519 --> 00:16:26,669
make sense I mean if you have a million

00:16:25,049 --> 00:16:28,289
subscribers you don't want a million ton

00:16:26,669 --> 00:16:28,709
devices on the UNIX box doesn't make

00:16:28,289 --> 00:16:31,259
sense

00:16:28,709 --> 00:16:33,539
you just have one device to basically

00:16:31,259 --> 00:16:35,549
route all the traffic to and then

00:16:33,539 --> 00:16:39,389
basically everything coming into that

00:16:35,549 --> 00:16:40,020
device it gets basically based on the IP

00:16:39,389 --> 00:16:42,209
address

00:16:40,020 --> 00:16:43,980
gets mapped and to watch into which PDP

00:16:42,209 --> 00:16:45,149
context it belongs and then forwarded

00:16:43,980 --> 00:16:50,279
through the correct handle to the

00:16:45,149 --> 00:16:53,160
respective subscriber so yeah the

00:16:50,279 --> 00:16:55,830
current implementation basically

00:16:53,160 --> 00:17:00,149
supports HTTP you in version 0 and

00:16:55,830 --> 00:17:02,160
version 1 for IP v4 packets over ipv4

00:17:00,149 --> 00:17:06,120
now GDP

00:17:02,160 --> 00:17:09,870
generally is designed for v6 and v4 both

00:17:06,120 --> 00:17:12,089
as transport protocol as well as user

00:17:09,870 --> 00:17:15,209
data protocol but the current

00:17:12,089 --> 00:17:18,179
implementation and only knows how to

00:17:15,209 --> 00:17:20,579
handle a v4 that's mostly because I

00:17:18,179 --> 00:17:24,030
couldn't figure out how to do with a v6

00:17:20,579 --> 00:17:27,590
stuff right so this is planned for the

00:17:24,030 --> 00:17:31,830
near future to do that to implement that

00:17:27,590 --> 00:17:34,260
we support the truth yeah probably not

00:17:31,830 --> 00:17:38,730
be multiple channels but multi PDF PDP

00:17:34,260 --> 00:17:41,040
contexts but only at the moment one one

00:17:38,730 --> 00:17:43,290
APN that's an implementation limitation

00:17:41,040 --> 00:17:48,900
that hopefully will disappear soon as

00:17:43,290 --> 00:17:51,980
well what doesn't work as I said the v6

00:17:48,900 --> 00:17:55,140
support still need to understand how to

00:17:51,980 --> 00:17:58,440
do the the packet forwarding there and

00:17:55,140 --> 00:18:00,630
then the other big topic is mostly

00:17:58,440 --> 00:18:03,780
different offload mechanisms they are

00:18:00,630 --> 00:18:05,400
currently simply disabled so there are

00:18:03,780 --> 00:18:07,800
this is definitely you know a bit bit of

00:18:05,400 --> 00:18:13,170
performance lacking at that point at

00:18:07,800 --> 00:18:16,679
that place now for the implementations

00:18:13,170 --> 00:18:19,500
the the original corner support was

00:18:16,679 --> 00:18:22,860
written for the open G GSN and that is

00:18:19,500 --> 00:18:24,450
still working or progressing and then we

00:18:22,860 --> 00:18:26,580
also have a new implementation which is

00:18:24,450 --> 00:18:29,730
Great Britain completely and rollin who

00:18:26,580 --> 00:18:34,490
knows what everything is we got a few

00:18:29,730 --> 00:18:37,410
people so that's open source as well I

00:18:34,490 --> 00:18:40,590
would like to invite you to try it out

00:18:37,410 --> 00:18:44,610
to contribute hopefully maybe we can get

00:18:40,590 --> 00:18:46,880
a fully working GSM PGP and knowing as

00:18:44,610 --> 00:18:46,880
well

00:18:49,310 --> 00:18:55,140
yeah and then the always introduce well

00:18:52,680 --> 00:18:57,980
clean up submission clean up so that we

00:18:55,140 --> 00:19:01,650
can submit submitted to mainline there's

00:18:57,980 --> 00:19:04,440
still I think a lot of work ahead and

00:19:01,650 --> 00:19:07,980
then the physics support which we

00:19:04,440 --> 00:19:11,850
already discussed now there are a few

00:19:07,980 --> 00:19:15,240
questions left and I hope that some of

00:19:11,850 --> 00:19:18,090
you can can help with that one is how to

00:19:15,240 --> 00:19:23,330
implement MTU discovery if we really

00:19:18,090 --> 00:19:27,330
needed the specifications ourself simply

00:19:23,330 --> 00:19:29,940
say to send the packets the the GP

00:19:27,330 --> 00:19:32,880
packets out was the DF flag cleared and

00:19:29,940 --> 00:19:38,160
leave the fragmentation to the first hop

00:19:32,880 --> 00:19:41,280
that has to do the fragmentation now on

00:19:38,160 --> 00:19:43,560
production networks usually the MTU was

00:19:41,280 --> 00:19:46,200
much larger than than 1500 so you don't

00:19:43,560 --> 00:19:48,540
have to worry about that at all

00:19:46,200 --> 00:19:51,120
but I feel that for a line of scrimmage

00:19:48,540 --> 00:19:55,680
invitation we should in some way at

00:19:51,120 --> 00:19:57,840
least try to support that the biggest

00:19:55,680 --> 00:20:00,480
thing there I think is that there all

00:19:57,840 --> 00:20:02,370
the other tunnel technologies they in

00:20:00,480 --> 00:20:04,740
some kind of way implement them to

00:20:02,370 --> 00:20:07,860
discovery or path MTU discovery but

00:20:04,740 --> 00:20:10,380
everybody uses a slight variation of the

00:20:07,860 --> 00:20:12,570
office mostly the same code so there

00:20:10,380 --> 00:20:15,180
might be an opportunity to unify that

00:20:12,570 --> 00:20:19,100
that support across the different tunnel

00:20:15,180 --> 00:20:21,990
technologies and then of course the

00:20:19,100 --> 00:20:23,460
offloading which I'm still trying to

00:20:21,990 --> 00:20:31,560
understand how it should be done

00:20:23,460 --> 00:20:34,620
correctly one of the topics probably for

00:20:31,560 --> 00:20:36,660
a after we have the mainland inclusion

00:20:34,620 --> 00:20:39,150
or at least have reached a certain

00:20:36,660 --> 00:20:40,770
steady state would be to investigate how

00:20:39,150 --> 00:20:43,530
to integrate this polite by tunneling

00:20:40,770 --> 00:20:46,170
with a bit tunnel infrastructure that

00:20:43,530 --> 00:20:48,540
would be especially useful to be able to

00:20:46,170 --> 00:20:51,120
use something like open V switch to

00:20:48,540 --> 00:20:53,970
build a GTP switch there currently is a

00:20:51,120 --> 00:20:55,170
user space project that does exactly

00:20:53,970 --> 00:20:58,110
that

00:20:55,170 --> 00:21:00,900
takes gtp tunnels from an SUV and

00:20:58,110 --> 00:21:02,820
forwards it to any number of gSN's but

00:21:00,900 --> 00:21:05,309
doing this completely in corner versus

00:21:02,820 --> 00:21:08,070
an open process which might make things

00:21:05,309 --> 00:21:10,799
much more flexible they're also

00:21:08,070 --> 00:21:13,650
directing the tunnels through a routing

00:21:10,799 --> 00:21:15,059
like entry could probably save us a lot

00:21:13,650 --> 00:21:16,980
of infrastructure work that we currently

00:21:15,059 --> 00:21:22,049
have to do in the h2 become a model

00:21:16,980 --> 00:21:24,450
module to direct the pickets okay and

00:21:22,049 --> 00:21:26,970
then brings us to the end of what we

00:21:24,450 --> 00:21:29,130
wanted to basically give you an update

00:21:26,970 --> 00:21:31,380
on what we've been working on so if you

00:21:29,130 --> 00:21:33,690
have questions comments feedback feel

00:21:31,380 --> 00:21:36,030
free to go ahead and use the microphone

00:21:33,690 --> 00:21:48,270
please that will be passed around in a

00:21:36,030 --> 00:21:58,710
second or so yeah microphone is being

00:21:48,270 --> 00:22:01,740
switched on maybe we can okay three

00:21:58,710 --> 00:22:11,240
questions first of all do you also

00:22:01,740 --> 00:22:13,980
support TCP gtp tunnels okay this was a

00:22:11,240 --> 00:22:16,790
Korea and apparently they don't use it

00:22:13,980 --> 00:22:19,860
at at all so as far as they're concerned

00:22:16,790 --> 00:22:22,200
UDP only is completely fine for for real

00:22:19,860 --> 00:22:26,660
production networks well I know for sure

00:22:22,200 --> 00:22:26,660
that we have customers that do use TCP

00:22:28,880 --> 00:22:36,030
okay and the next question is regarding

00:22:33,780 --> 00:22:38,820
the network namespace you said that you

00:22:36,030 --> 00:22:41,610
can do cross network namespace but what

00:22:38,820 --> 00:22:45,030
if I want network namespace separation

00:22:41,610 --> 00:22:49,500
is it supported as well or you or you by

00:22:45,030 --> 00:22:52,200
default make crossing between network

00:22:49,500 --> 00:22:53,970
namespaces you can run both the end

00:22:52,200 --> 00:22:55,770
point and you are trafficking the same

00:22:53,970 --> 00:22:57,330
that network namespace that works as

00:22:55,770 --> 00:23:00,060
well

00:22:57,330 --> 00:23:02,220
for our use cases you wondered separated

00:23:00,060 --> 00:23:05,100
so the user traffic is in one network

00:23:02,220 --> 00:23:06,900
name space is routed there and we have

00:23:05,100 --> 00:23:08,760
another network name is Basim which we

00:23:06,900 --> 00:23:15,120
terminate the actual return of traffic

00:23:08,760 --> 00:23:19,740
or the end point the sockets one last

00:23:15,120 --> 00:23:22,380
thing the code that you describe is the

00:23:19,740 --> 00:23:23,070
last coat on you're a jittery on the

00:23:22,380 --> 00:23:29,220
Internet

00:23:23,070 --> 00:23:31,140
the last version is come get there are

00:23:29,220 --> 00:23:33,180
there some some patches that need to be

00:23:31,140 --> 00:23:35,370
reviewed before they go into that git

00:23:33,180 --> 00:23:38,870
repository the last version is currently

00:23:35,370 --> 00:23:41,880
on I think and get upon my repository

00:23:38,870 --> 00:23:45,000
because I tried from the osmocon to

00:23:41,880 --> 00:23:47,520
clone the gate and we tried on three

00:23:45,000 --> 00:23:49,050
different kernels to compile it as a as

00:23:47,520 --> 00:23:53,150
a kernel mode and there are a lot of

00:23:49,050 --> 00:23:56,220
compilation errors when did you do that

00:23:53,150 --> 00:24:00,030
last time I did it just before I left a

00:23:56,220 --> 00:24:02,490
few days ago I tried if kernel 4.4.2 on

00:24:00,030 --> 00:24:05,730
and another guy from my company tried

00:24:02,490 --> 00:24:07,710
affecting 2.6 and 3 dots

00:24:05,730 --> 00:24:10,020
I don't remember it right if two

00:24:07,710 --> 00:24:12,270
versions of Ubuntu and I gave up and I

00:24:10,020 --> 00:24:16,010
said maybe you're just using the latest

00:24:12,270 --> 00:24:19,010
one and I tried to fall for that one and

00:24:16,010 --> 00:24:22,230
there's some descriptions in that in

00:24:19,010 --> 00:24:25,320
what kind of structure of net devices it

00:24:22,230 --> 00:24:27,030
expects to collect there's a it was

00:24:25,320 --> 00:24:30,030
based on totally different kernel

00:24:27,030 --> 00:24:32,130
version a really bad gap I me just know

00:24:30,030 --> 00:24:34,830
the git is not updating my internet I'm

00:24:32,130 --> 00:24:37,560
not sure but yeah the I think they all

00:24:34,830 --> 00:24:39,690
smoke um it has not all patches yet

00:24:37,560 --> 00:24:42,330
there was some some review things that

00:24:39,690 --> 00:24:46,410
need to be addressed but I definitely

00:24:42,330 --> 00:24:49,500
have a working on for for I can can give

00:24:46,410 --> 00:24:52,200
you a lot if you follow the the RGB link

00:24:49,500 --> 00:24:54,870
in the presentation they're the same

00:24:52,200 --> 00:24:59,250
repository should have the the kernel

00:24:54,870 --> 00:25:02,070
module but as I said we are working on

00:24:59,250 --> 00:25:04,170
getting the the patches integrated so

00:25:02,070 --> 00:25:06,210
hopefully next week or so it will be on

00:25:04,170 --> 00:25:08,430
the Osmo common gate as well the current

00:25:06,210 --> 00:25:10,410
version if you have spare time

00:25:08,430 --> 00:25:13,260
afterwards I have a Dalek

00:25:10,410 --> 00:25:14,550
can you do the URL if you want let's try

00:25:13,260 --> 00:25:18,990
to give some other people chance to

00:25:14,550 --> 00:25:20,670
raise their questions to please so

00:25:18,990 --> 00:25:24,780
comment about some of your limitations

00:25:20,670 --> 00:25:27,560
the no offload support as long as you're

00:25:24,780 --> 00:25:31,140
using the normal UDP kind of

00:25:27,560 --> 00:25:33,750
encapsulation interfaces you should be

00:25:31,140 --> 00:25:39,600
able to get checksum receiving transmit

00:25:33,750 --> 00:25:41,730
mostly for free and TSO gso should work

00:25:39,600 --> 00:25:44,730
on the basis that this looks like a UDP

00:25:41,730 --> 00:25:46,140
sort of encapsulation so we kind of

00:25:44,730 --> 00:25:49,410
already have support this this is

00:25:46,140 --> 00:25:51,600
basically a foo over UDP scenario the

00:25:49,410 --> 00:25:54,180
only offload that you probably have to

00:25:51,600 --> 00:25:56,880
have special code for is 0 that's just

00:25:54,180 --> 00:25:59,550
by nature of how sharor works it kind of

00:25:56,880 --> 00:26:02,250
requires that and then so I didn't quite

00:25:59,550 --> 00:26:03,600
understand the ipv6 this is just because

00:26:02,250 --> 00:26:06,980
you haven't gotten around to it or is

00:26:03,600 --> 00:26:10,350
there some actual reason not to do it

00:26:06,980 --> 00:26:12,750
well just got done the time to look into

00:26:10,350 --> 00:26:15,740
that in detail there were some code from

00:26:12,750 --> 00:26:18,030
Pablo and from there in place already

00:26:15,740 --> 00:26:20,610
because I changed it around I think it

00:26:18,030 --> 00:26:25,170
broke a bit of that and the ipv6 support

00:26:20,610 --> 00:26:26,640
was just stops so just have to have to

00:26:25,170 --> 00:26:31,110
find the time to look into that how to

00:26:26,640 --> 00:26:32,850
do it right well so is this so the gtp

00:26:31,110 --> 00:26:35,030
itself is that something that's you're

00:26:32,850 --> 00:26:38,460
intending to become a standard and 90f

00:26:35,030 --> 00:26:40,650
know is it is a 3gpp standard it's not

00:26:38,460 --> 00:26:43,410
related to ITF it's the 3gpp standard

00:26:40,650 --> 00:26:46,260
and it's deployed in in the field for

00:26:43,410 --> 00:26:48,240
about 1516 years or so okay so so that

00:26:46,260 --> 00:26:52,620
standard is only defined for ipv4 then

00:26:48,240 --> 00:26:54,930
no yeah it's all specified there's

00:26:52,620 --> 00:27:00,630
nothing architectural ey it shouldn't

00:26:54,930 --> 00:27:02,190
work cuz needs work that's all such as

00:27:00,630 --> 00:27:03,600
what you know I'm working on a path I'm

00:27:02,190 --> 00:27:05,640
to issue for VX LAN and y'all are

00:27:03,600 --> 00:27:07,020
totally implementations it's probably

00:27:05,640 --> 00:27:09,330
exactly the same issue that you're

00:27:07,020 --> 00:27:11,340
having as well what I'm currently

00:27:09,330 --> 00:27:13,470
exploring is to kind of get feedback

00:27:11,340 --> 00:27:15,510
from the underlay into the overlay that

00:27:13,470 --> 00:27:17,790
if the packet was dropped because of MTU

00:27:15,510 --> 00:27:19,310
you provide that feedback so you can

00:27:17,790 --> 00:27:21,860
generate an ICMP

00:27:19,310 --> 00:27:23,260
in your inner in your header contact I

00:27:21,860 --> 00:27:26,630
think that's what you need as well to

00:27:23,260 --> 00:27:28,880
resolve perfect.you issues and I would

00:27:26,630 --> 00:27:31,790
be glad to help you light berry tones as

00:27:28,880 --> 00:27:33,620
well it's really not difficult it's

00:27:31,790 --> 00:27:36,500
really simple so I think move that up

00:27:33,620 --> 00:27:37,910
from the wish list to before you

00:27:36,500 --> 00:27:42,500
actually submit the patches I think that

00:27:37,910 --> 00:27:50,360
will make a lot of sense okay any

00:27:42,500 --> 00:27:52,070
further questions okay well thank you

00:27:50,360 --> 00:27:54,430
for your attention and have fun with the

00:27:52,070 --> 00:27:54,430

YouTube URL: https://www.youtube.com/watch?v=puCMipd8fck


