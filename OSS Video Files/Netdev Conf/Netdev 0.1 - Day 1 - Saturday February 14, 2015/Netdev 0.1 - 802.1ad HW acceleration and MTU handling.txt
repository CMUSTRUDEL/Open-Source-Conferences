Title: Netdev 0.1 - 802.1ad HW acceleration and MTU handling
Publication date: 2015-04-05
Playlist: Netdev 0.1 - Day 1 - Saturday February 14, 2015
Description: 
	802.1ad HW acceleration and MTU handling
Toshiaki Makita
February 2015

Description from netdev01.org:
 Since 802.1ad was introduced back in 3.10, stacked vlan has been getting common on Linux. It can be used not only inside a data center network, but also in integrating Linux into Metro Ethernet, which often consists of 802.1ad switches.

However, there still remain a couple of challenges around stacked vlan.
Offloading

Stacked vlan device has no offloading features, or there are not even any in-kernel infrastructure to enable them. Tx/Rx vlan offloads, checksum offload, and TSO/UFO would be beneficial for performance, if any.
MTU (Tx/Rx buffers size)

Most drivers have 4 bytes extra buffers in additon to MTU to handle vlan tags. This is not suitable once we use multiple vlan tags, where the receive buffer size is not sufficient and packets are dropped by oversize error on NIC by default.

This discussion focuses how to handle these issues. 

http://www.netdev01.org

This video is licensed under Creative Commons Attribution-ShareAlike 4.0 International license. Feel free to download and distribute.
Captions: 
	00:00:00,230 --> 00:00:07,649
so please welcome toshiaki makita he's

00:00:04,140 --> 00:00:09,900
got a this is above means he has some

00:00:07,649 --> 00:00:13,500
ideas that he wants to suggest and some

00:00:09,900 --> 00:00:16,710
challenges he's been facing it on 880

00:00:13,500 --> 00:00:19,619
hardware acceleration in the postman MTU

00:00:16,710 --> 00:00:29,550
handling as well and applause like

00:00:19,619 --> 00:00:31,679
thanks thank you for gathering today I'm

00:00:29,550 --> 00:00:39,090
so chef master pro me indeed the absence

00:00:31,679 --> 00:00:42,870
of the center today I want to discuss I

00:00:39,090 --> 00:00:44,910
taught you don't want issues and the

00:00:42,870 --> 00:00:53,210
direction of implementation to others

00:00:44,910 --> 00:00:59,449
then there are three issues one is

00:00:53,210 --> 00:01:02,059
loading TSO and the second one is

00:00:59,449 --> 00:01:07,580
without inserting a stripping absolutely

00:01:02,059 --> 00:01:07,580
and the last one is empty Johan doing

00:01:07,670 --> 00:01:20,100
I'll explain the detail of these problem

00:01:12,840 --> 00:01:28,560
later we hope explaining the issues i'll

00:01:20,100 --> 00:01:35,340
show the use case for a 2220 those not

00:01:28,560 --> 00:01:44,580
familiar with this so

00:01:35,340 --> 00:01:48,430
yeah Mary network that uses thought Yad

00:01:44,580 --> 00:01:56,619
in this world such as when Theresa night

00:01:48,430 --> 00:02:03,460
or is rate VPN and they use these double

00:01:56,619 --> 00:02:06,549
toggle pocket that is the pocket has but

00:02:03,460 --> 00:02:13,840
why the bid on talking addition to the

00:02:06,549 --> 00:02:17,769
model to on kill with a hug and use the

00:02:13,840 --> 00:02:26,230
dude why he talks to separate customers

00:02:17,769 --> 00:02:30,459
in the VPN so for example customer a

00:02:26,230 --> 00:02:34,330
house reason I d20 in the customer he

00:02:30,459 --> 00:02:39,070
has feline custody hospital Heidi safi

00:02:34,330 --> 00:02:44,739
in this network and where we want to

00:02:39,070 --> 00:02:51,250
incorporate when X into the top 20 bit

00:02:44,739 --> 00:02:55,930
work then we need handle the double

00:02:51,250 --> 00:03:03,790
double pocket in the linux so in this

00:02:55,930 --> 00:03:06,160
case there is a vm and the BM uses build

00:03:03,790 --> 00:03:11,410
a third pocket send the beyond third

00:03:06,160 --> 00:03:20,489
pocket and the bridge in such additional

00:03:11,410 --> 00:03:20,489
220 vedanta to identify the customer

00:03:20,910 --> 00:03:31,520
so for example if this PM belongs to

00:03:25,350 --> 00:03:44,940
customize the bridging starts with an ID

00:03:31,520 --> 00:03:47,430
for a customer so we need we need to

00:03:44,940 --> 00:03:55,590
handle a double double pocket in the

00:03:47,430 --> 00:04:02,610
legs okay and this is a first problem

00:03:55,590 --> 00:04:07,110
TSO for stock speed on this is the

00:04:02,610 --> 00:04:19,250
current implementation of TS always

00:04:07,110 --> 00:04:24,260
start belong in this figure the PM has

00:04:19,250 --> 00:04:29,250
appeared on interface and send packets

00:04:24,260 --> 00:04:32,250
from the interface create is a pocket

00:04:29,250 --> 00:04:38,460
and send it to the host and breathe

00:04:32,250 --> 00:04:43,100
insults don't really talk and hundred to

00:04:38,460 --> 00:04:47,060
the physical device driver we start our

00:04:43,100 --> 00:04:47,060
bead on Dougs

00:04:47,490 --> 00:04:58,740
but before entering the driver kinetics

00:04:52,650 --> 00:05:06,780
the device features and segment this

00:04:58,740 --> 00:05:12,150
pocket by software so we can't do TSO we

00:05:06,780 --> 00:05:15,650
start without pockets we just do the

00:05:12,150 --> 00:05:15,650
software emulation Ortiz

00:05:18,490 --> 00:05:30,639
so this is the check of the device

00:05:22,120 --> 00:05:35,039
features and this is checking for single

00:05:30,639 --> 00:05:42,280
double villain in this case we use these

00:05:35,039 --> 00:05:47,650
devices video pictures so the device

00:05:42,280 --> 00:05:55,690
guarantees or if it otherwise DSO in the

00:05:47,650 --> 00:06:01,800
villages and this is feature checking

00:05:55,690 --> 00:06:09,449
for struct be done and there is a fixed

00:06:01,800 --> 00:06:13,840
features with a diesel it's good for

00:06:09,449 --> 00:06:24,370
devices that cannot handle is always to

00:06:13,840 --> 00:06:31,599
protect villains but we need T so when

00:06:24,370 --> 00:06:34,479
we uses advice that can hunt is 0 so we

00:06:31,599 --> 00:06:40,680
need a mechanism to and check the device

00:06:34,479 --> 00:06:40,680
features we start our villain correctly

00:06:44,139 --> 00:06:50,999
this is these are possible approach to

00:06:47,139 --> 00:06:56,860
implement it the first one is making

00:06:50,999 --> 00:06:59,050
device avedon features are it in this

00:06:56,860 --> 00:07:03,360
approach number of tags are limited to

00:06:59,050 --> 00:07:08,439
the right size and the second option is

00:07:03,360 --> 00:07:12,270
use envio feature check this is recently

00:07:08,439 --> 00:07:16,180
introduced and more flexible but maybe

00:07:12,270 --> 00:07:22,900
we need default which a check to drop

00:07:16,180 --> 00:07:26,830
the authorities or by default it is the

00:07:22,900 --> 00:07:29,939
feature is dropped by default country

00:07:26,830 --> 00:07:29,939
like this

00:07:34,790 --> 00:07:39,500
so does anyone have any coins

00:07:53,360 --> 00:08:00,889
oh okay have you seen any problems with

00:07:58,520 --> 00:08:02,449
the existing conventional hardware and

00:08:00,889 --> 00:08:08,750
the propagating of the double take

00:08:02,449 --> 00:08:11,090
effect sorry can tell me have you seen

00:08:08,750 --> 00:08:13,490
any problems with the commercial

00:08:11,090 --> 00:08:18,110
switches and the propagating of the

00:08:13,490 --> 00:08:23,210
double naked package that the programmer

00:08:18,110 --> 00:08:25,550
in the sky alland avatar Duty so yes do

00:08:23,210 --> 00:08:28,310
they always handle them correctly oh

00:08:25,550 --> 00:08:31,250
there was a well-known set of equipment

00:08:28,310 --> 00:08:35,690
which which gets puzzled would it's

00:08:31,250 --> 00:08:39,500
depends on driver so we can't check the

00:08:35,690 --> 00:08:41,180
drivers capability part you know that

00:08:39,500 --> 00:08:44,390
was asking about the external equipment

00:08:41,180 --> 00:08:47,540
you got created those packets sending

00:08:44,390 --> 00:08:50,870
them out in the kind of internet and

00:08:47,540 --> 00:08:52,730
then the first switch can gum can go

00:08:50,870 --> 00:08:54,440
crazy and do something wrong with the

00:08:52,730 --> 00:09:00,250
packet which is double take it because

00:08:54,440 --> 00:09:00,250
sometimes we just tend to think a lot I

00:09:00,279 --> 00:09:07,839
have in mind we use this in angel

00:09:03,470 --> 00:09:11,630
quietiy network so there there is only

00:09:07,839 --> 00:09:14,690
one only switches that can recognize

00:09:11,630 --> 00:09:17,529
that our pockets will it done hope he's

00:09:14,690 --> 00:09:17,529
okay

00:09:27,570 --> 00:09:36,300
I'm thinking the second option and the

00:09:31,240 --> 00:09:39,910
official jerk is preferable so if anyone

00:09:36,300 --> 00:09:42,960
no one has any objections I try to

00:09:39,910 --> 00:09:42,960
implement it

00:09:47,380 --> 00:09:55,760
okay what's the deal about the BB line

00:09:52,730 --> 00:09:58,760
features ray um how would you select

00:09:55,760 --> 00:10:00,410
which one you use or I mean if you have

00:09:58,760 --> 00:10:05,690
right now we have the VLAN features

00:10:00,410 --> 00:10:07,730
which basically define the features the

00:10:05,690 --> 00:10:10,070
hardware support in combination with us

00:10:07,730 --> 00:10:13,130
I see ok I think I answered my second

00:10:10,070 --> 00:10:16,160
question you want to use them like the

00:10:13,130 --> 00:10:21,580
first array element 4 s tagging in the

00:10:16,160 --> 00:10:21,580
sector 14 c tagging right I see

00:10:27,510 --> 00:10:36,690
okay so there seems to be no any more

00:10:34,350 --> 00:10:40,980
comments so let's move on to the next

00:10:36,690 --> 00:10:47,420
issues the next one is starting a

00:10:40,980 --> 00:10:54,690
stripping out full stock speed on and

00:10:47,420 --> 00:11:03,950
this figure is what I think this feature

00:10:54,690 --> 00:11:14,040
is most effective environment so it's

00:11:03,950 --> 00:11:17,880
intervie am communication in the vm this

00:11:14,040 --> 00:11:20,490
vm creates in without pocket insane to

00:11:17,880 --> 00:11:24,620
the bridge and the bridge in such say

00:11:20,490 --> 00:11:29,510
can't talk but there is no room for

00:11:24,620 --> 00:11:33,300
accelerating this insulting so it is

00:11:29,510 --> 00:11:35,510
hmmm copy to insert the second double

00:11:33,300 --> 00:11:35,510
talk

00:11:36,579 --> 00:11:48,759
and if it is worried to another vm it

00:11:42,249 --> 00:11:52,350
will be stripped immediately so it's

00:11:48,759 --> 00:11:52,350
very inefficient

00:11:58,390 --> 00:12:06,730
these are prosperous for this one of

00:12:02,800 --> 00:12:09,280
Chinese skb TV but this is very pretty

00:12:06,730 --> 00:12:15,420
specific solution and cannot be useful

00:12:09,280 --> 00:12:23,680
beyond photonic and the second option is

00:12:15,420 --> 00:12:25,690
making sk v.p don t see all right hey if

00:12:23,680 --> 00:12:29,860
this case the number of talk so let me

00:12:25,690 --> 00:12:36,730
get to our size and it touches the

00:12:29,860 --> 00:12:40,600
skivvy but it has the second option is

00:12:36,730 --> 00:12:49,710
more generic I am thinking with this

00:12:40,600 --> 00:12:53,110
kind of transparent any comments yeah

00:12:49,710 --> 00:12:56,350
right now if you only want to add one

00:12:53,110 --> 00:12:58,810
tag so you don't want to add the s.s tag

00:12:56,350 --> 00:13:01,000
just the sea tag you can use the

00:12:58,810 --> 00:13:03,250
existing vedanta society because we also

00:13:01,000 --> 00:13:05,320
have the deal encontrado member of the

00:13:03,250 --> 00:13:07,510
sk p which basically defines our which

00:13:05,320 --> 00:13:09,790
tag you want to add to the escapee if

00:13:07,510 --> 00:13:13,090
you want to to retell the tag so you

00:13:09,790 --> 00:13:14,680
want to add add both tags and hardware

00:13:13,090 --> 00:13:17,730
for instance at that point i think the

00:13:14,680 --> 00:13:21,370
real and TC IRA is most likely the most

00:13:17,730 --> 00:13:23,710
reasonable solution for that you

00:13:21,370 --> 00:13:26,020
probably would also i'm not sure if you

00:13:23,710 --> 00:13:28,150
also need the double would need a VLAN

00:13:26,020 --> 00:13:34,450
photo array but i think it's only used

00:13:28,150 --> 00:13:36,570
for the outermost order protocol thank

00:13:34,450 --> 00:13:36,570
you

00:13:44,630 --> 00:13:50,790
so it seems to be the second option is

00:13:47,370 --> 00:13:57,120
preferable I try to implement it ok

00:13:50,790 --> 00:14:02,000
thank you ok the last one is most tough

00:13:57,120 --> 00:14:02,000
problem empty

00:14:06,540 --> 00:14:16,810
so the lakes is connected to the 220

00:14:11,110 --> 00:14:21,360
network and 220 network sense a double

00:14:16,810 --> 00:14:27,270
star pocket and the size of the pocket

00:14:21,360 --> 00:14:31,780
will be a max of a thousand 526 parts

00:14:27,270 --> 00:14:36,370
because it has two times and it

00:14:31,780 --> 00:14:42,810
preserves a science payload max MTU size

00:14:36,370 --> 00:14:51,910
a thousand five hundred bites but

00:14:42,810 --> 00:14:58,110
currently typically we have receive

00:14:51,910 --> 00:15:03,520
buffer size of a thousand 522 vice for

00:14:58,110 --> 00:15:08,860
200 single pill but it is not enough for

00:15:03,520 --> 00:15:11,710
the double double pockets so these

00:15:08,860 --> 00:15:14,550
pockets received pockets are dropped by

00:15:11,710 --> 00:15:14,550
over size zero

00:15:18,360 --> 00:15:26,370
and this is so problematic because it

00:15:22,529 --> 00:15:29,190
looks like a strange random failure pink

00:15:26,370 --> 00:15:32,370
is okay and TCP connection can be

00:15:29,190 --> 00:15:36,350
established he says it is also mostly

00:15:32,370 --> 00:15:39,570
okay but only large pocket is discarded

00:15:36,350 --> 00:15:45,690
it's hard to identify the root cause for

00:15:39,570 --> 00:15:53,329
users and what even what is the walk

00:15:45,690 --> 00:15:53,329
around there is driveable sitting empty

00:15:54,110 --> 00:15:58,670
2504 would work in most cases but

00:15:59,060 --> 00:16:08,160
satanic requires a thousand five hundred

00:16:02,190 --> 00:16:14,060
and eight or nine thousand MTU size 200

00:16:08,160 --> 00:16:17,810
the last pocket so it is very difficult

00:16:14,060 --> 00:16:17,810
200 for users

00:16:22,290 --> 00:16:29,250
and one possible approach is always

00:16:24,630 --> 00:16:33,060
reserved for white small room but it may

00:16:29,250 --> 00:16:37,380
be overkill for kind of corner case like

00:16:33,060 --> 00:16:42,779
this some driver changes behavior if

00:16:37,380 --> 00:16:47,519
buffer sizes modern southern 522 for

00:16:42,779 --> 00:16:51,149
example a thousand reuses target speed

00:16:47,519 --> 00:16:59,430
descriptor if prophesizes modern

00:16:51,149 --> 00:17:03,060
southern 422 so may be preferable

00:16:59,430 --> 00:17:07,169
approaches automatically adjust focus on

00:17:03,060 --> 00:17:11,939
creating lute riley device for the try

00:17:07,169 --> 00:17:15,959
the protocol in the bridge for example

00:17:11,939 --> 00:17:20,939
introduced function like in the UN

00:17:15,959 --> 00:17:25,410
criticize and bridging vision device

00:17:20,939 --> 00:17:30,439
cause the law devices and the UN

00:17:25,410 --> 00:17:30,439
criticize to indicate optional exercise

00:17:30,860 --> 00:17:36,900
this approach can be used for

00:17:33,770 --> 00:17:40,740
appropriate exposure size and harder

00:17:36,900 --> 00:17:43,040
protocol's I can pay less could also use

00:17:40,740 --> 00:17:43,040
it

00:17:44,080 --> 00:17:47,070
any swords

00:17:51,100 --> 00:17:57,559
one question you're suggesting to adjust

00:17:54,649 --> 00:18:01,100
the MTU of the lower device when

00:17:57,559 --> 00:18:08,240
creating a VLAN I don't think so that's

00:18:01,100 --> 00:18:15,529
good suit just buffer stars not

00:18:08,240 --> 00:18:20,029
divisible into you yes I see okay hey I

00:18:15,529 --> 00:18:24,980
have a two thoughts one I think the

00:18:20,029 --> 00:18:29,509
extended Vic son has the same issue with

00:18:24,980 --> 00:18:31,220
the Vienna other size increased and the

00:18:29,509 --> 00:18:34,070
solution there is probably to play with

00:18:31,220 --> 00:18:38,659
the MTU of the second to first lower it

00:18:34,070 --> 00:18:41,659
or I read in this case I think it's also

00:18:38,659 --> 00:18:43,309
can be the default case people know when

00:18:41,659 --> 00:18:46,009
they work with their stack feel and so

00:18:43,309 --> 00:18:48,440
they in addition probably play with the

00:18:46,009 --> 00:18:58,309
MD of the interface I wanted to say

00:18:48,440 --> 00:19:00,559
something again about the by the way I

00:18:58,309 --> 00:19:03,230
think if you go over all the drivers in

00:19:00,559 --> 00:19:07,549
the kernel you will see no one is really

00:19:03,230 --> 00:19:10,669
allocating 1522 bites like in a dense

00:19:07,549 --> 00:19:16,190
tway probably it's aligned to a cache

00:19:10,669 --> 00:19:20,139
line usually or aligned to 2k say so you

00:19:16,190 --> 00:19:23,299
will have 1536 bites so I think that

00:19:20,139 --> 00:19:26,029
catches the case in most drivers I'm not

00:19:23,299 --> 00:19:28,070
sure everyone does that but the drivers

00:19:26,029 --> 00:19:30,110
are no usually align into a cache line

00:19:28,070 --> 00:19:34,580
and then you can get the extra bytes

00:19:30,110 --> 00:19:38,299
there in free so maybe you can maybe you

00:19:34,580 --> 00:19:43,639
solve the issue in there like in most

00:19:38,299 --> 00:19:47,269
cases and the third option the end do

00:19:43,639 --> 00:19:49,789
any other size it could be nice but I

00:19:47,269 --> 00:19:52,519
don't know if it fits all drivers and

00:19:49,789 --> 00:19:57,049
behaviors probably not even legacies

00:19:52,519 --> 00:20:00,139
drivers or that kind so i would think

00:19:57,049 --> 00:20:04,429
that changing the MTU is the most common

00:20:00,139 --> 00:20:05,539
case and maybe check if any driver i

00:20:04,429 --> 00:20:07,879
don't think there is a drive of the

00:20:05,539 --> 00:20:10,190
really allocates 15 20 20 you can get

00:20:07,879 --> 00:20:12,350
but this is only for the two static

00:20:10,190 --> 00:20:15,440
villains if you want to propagate it to

00:20:12,350 --> 00:20:28,519
like 10 or 20 and probably you need the

00:20:15,440 --> 00:20:33,679
third option I'm talking about onika

00:20:28,519 --> 00:20:42,769
buffer size so do you mean the server

00:20:33,679 --> 00:20:44,750
Papa sighs over Escobar enough it

00:20:42,769 --> 00:20:46,970
doesn't have to be escaped of because

00:20:44,750 --> 00:20:49,639
right yeah it's an escape of linear or

00:20:46,970 --> 00:20:52,159
or the fragmented section the driver out

00:20:49,639 --> 00:20:54,440
reallocates those before the packet

00:20:52,159 --> 00:20:58,159
comes other heat allocates in a

00:20:54,440 --> 00:21:01,700
fragmented page or he allocates and SJ

00:20:58,159 --> 00:21:06,350
bein in scattered II the packets inside

00:21:01,700 --> 00:21:09,350
the linear section but before and it

00:21:06,350 --> 00:21:11,809
needs to decide about the size of the

00:21:09,350 --> 00:21:15,889
max packet with the empty usually it

00:21:11,809 --> 00:21:18,340
will be 15 22 but 99 percent of the time

00:21:15,889 --> 00:21:21,500
they will align it to some number

00:21:18,340 --> 00:21:25,549
usually cache line size this will

00:21:21,500 --> 00:21:27,830
increase the size 215 36 and then you

00:21:25,549 --> 00:21:35,240
can have the extra for by over there in

00:21:27,830 --> 00:21:42,369
free trees at least Intel's Nick doesn't

00:21:35,240 --> 00:21:47,830
allow thousand 522 vice because it and

00:21:42,369 --> 00:21:52,369
HD da means if the pocket is over the 10

00:21:47,830 --> 00:21:55,730
15 22 then it drops by also delete this

00:21:52,369 --> 00:22:04,660
is this is a tunable

00:21:55,730 --> 00:22:04,660
and there is no room for the nick buffer

00:22:14,450 --> 00:22:20,830
I'm not sure why the cache line is hard

00:22:21,130 --> 00:22:34,130
relative to this program the next simply

00:22:27,320 --> 00:22:38,390
discard if does this the specified max

00:22:34,130 --> 00:22:42,400
frame size perceived franchise to go

00:22:38,390 --> 00:22:47,080
about the space bottom expressions so

00:22:42,400 --> 00:22:47,080
i'm not sure if it can help

00:22:56,870 --> 00:23:09,889
honest your suggestion is decreasing MTU

00:23:00,929 --> 00:23:13,080
size no I mean increasing increase but

00:23:09,889 --> 00:23:21,830
increasing empty sizes also problem dick

00:23:13,080 --> 00:23:27,649
because some droid x requires a southern

00:23:21,830 --> 00:23:32,700
504 200 the oversized pocket but other

00:23:27,649 --> 00:23:39,470
driver requires southern 508 you are an

00:23:32,700 --> 00:23:39,470
adult River request 9000 it's not it's

00:23:40,580 --> 00:23:58,429
very hard to determine what what size is

00:23:49,919 --> 00:23:58,429
better so I'm suggesting another a peon

00:24:07,220 --> 00:24:12,950
can I ask a question I'm not so sure

00:24:10,270 --> 00:24:15,429
awareness was probably happen exactly i

00:24:12,950 --> 00:24:18,080
mean if you're doing tagging in hardware

00:24:15,429 --> 00:24:20,780
the tags are offloaded to the

00:24:18,080 --> 00:24:21,980
descriptors and never hit the data areas

00:24:20,780 --> 00:24:24,530
where that point there shouldn't be a

00:24:21,980 --> 00:24:26,299
problem so most likely are you talking

00:24:24,530 --> 00:24:32,299
about drivers where the tagging has been

00:24:26,299 --> 00:24:38,390
done in software before yes no second

00:24:32,299 --> 00:24:41,510
available fraud so if we use don't mind

00:24:38,390 --> 00:24:49,880
it I mean go to market ugh then we

00:24:41,510 --> 00:24:52,280
cannot afford them country okay um so

00:24:49,880 --> 00:24:54,230
the problem is that the tag is added to

00:24:52,280 --> 00:24:58,750
the data everyone at that point it

00:24:54,230 --> 00:25:01,750
exceeds the pre allocated space yes

00:24:58,750 --> 00:25:01,750
thanks

00:25:08,960 --> 00:25:14,010
at least some of the adapters have

00:25:11,279 --> 00:25:15,630
programmable packet size registers so

00:25:14,010 --> 00:25:18,240
they have to know what the ultimate that

00:25:15,630 --> 00:25:21,480
size is whether it's be laser beam and

00:25:18,240 --> 00:25:24,600
plus V explain matters right so at some

00:25:21,480 --> 00:25:27,260
point the driver has no appropriate size

00:25:24,600 --> 00:25:31,230
for a standard empty standard size frame

00:25:27,260 --> 00:25:33,179
so programming but user forces that

00:25:31,230 --> 00:25:35,520
happened then I don't think that's the

00:25:33,179 --> 00:25:37,500
switch really should be something the

00:25:35,520 --> 00:25:41,700
driver should be aware of and an ad that

00:25:37,500 --> 00:25:44,070
be less at least one glut header tag or

00:25:41,700 --> 00:25:45,450
more if we need more than there needs to

00:25:44,070 --> 00:25:49,010
be some API don't let the driver know

00:25:45,450 --> 00:25:49,010
what the match site should be

00:25:57,020 --> 00:26:02,570
if there are no more comments I

00:26:02,840 --> 00:26:08,150
implementing this idea

00:26:09,570 --> 00:26:14,520
it's basically two solutions there one

00:26:12,030 --> 00:26:16,410
is that the driver handles it internally

00:26:14,520 --> 00:26:18,030
and the other one is that we provide a

00:26:16,410 --> 00:26:20,280
new API so when there's some kind of

00:26:18,030 --> 00:26:23,640
system change and that gets propagated

00:26:20,280 --> 00:26:26,190
down to the driver but it seems to me

00:26:23,640 --> 00:26:28,410
that the first option is the preferable

00:26:26,190 --> 00:26:34,080
one because it just really should just

00:26:28,410 --> 00:26:35,880
work it if the driver is decided to make

00:26:34,080 --> 00:26:37,830
assumptions about the maximum packet

00:26:35,880 --> 00:26:40,500
size and those packets and that isn't

00:26:37,830 --> 00:26:42,180
valid it should adjust itself is what I

00:26:40,500 --> 00:26:43,980
think I don't feel very strongly about

00:26:42,180 --> 00:26:51,570
this but it seems that the top solution

00:26:43,980 --> 00:26:53,970
is is slightly nicer do you prefer the

00:26:51,570 --> 00:26:56,580
first option yes is what I see father

00:26:53,970 --> 00:27:01,800
best times I I think I did the first one

00:26:56,580 --> 00:27:06,060
is preferable but how much how much more

00:27:01,800 --> 00:27:09,450
room so for instance like what the e1000

00:27:06,060 --> 00:27:11,190
he does which is it from what I

00:27:09,450 --> 00:27:14,280
understand of what you said is it he

00:27:11,190 --> 00:27:17,280
he'd uses 15 22 but then if it realizes

00:27:14,280 --> 00:27:20,490
that's too small in an eating it makes

00:27:17,280 --> 00:27:25,890
an adjustment is a correct that seems to

00:27:20,490 --> 00:27:29,490
be the cleanest solution to me but my

00:27:25,890 --> 00:27:37,370
concern is some terrible changes

00:27:29,490 --> 00:27:41,500
behavior Assad is modern Assad under 522

00:27:37,370 --> 00:27:45,600
so this is

00:27:41,500 --> 00:27:49,840
this example is a sudden t a disease

00:27:45,600 --> 00:27:57,400
extended descriptor when the buffer size

00:27:49,840 --> 00:27:59,460
is equal to all this town 1522 what

00:27:57,400 --> 00:28:04,620
enticed us to use other descriptive

00:27:59,460 --> 00:28:07,660
format if the focus is all right and

00:28:04,620 --> 00:28:11,590
that is good the descriptor for one's

00:28:07,660 --> 00:28:17,350
uses to descriptor for one pocket it is

00:28:11,590 --> 00:28:19,530
not efficient okay I see it's more

00:28:17,350 --> 00:28:19,530
complicated

00:28:25,860 --> 00:28:28,970
okay boys

00:28:32,610 --> 00:28:39,070
okay well increasing it is quite easy of

00:28:37,180 --> 00:28:41,890
course I mean when you use of a second

00:28:39,070 --> 00:28:44,110
solution you added on your notice you

00:28:41,890 --> 00:28:47,170
require more space and if you're saying

00:28:44,110 --> 00:28:49,810
the solution gets inefficient if you

00:28:47,170 --> 00:28:51,880
would do it by default so I guess at

00:28:49,810 --> 00:28:55,510
some what you would decrease it again if

00:28:51,880 --> 00:28:57,040
the land gets unregistered and he plans

00:28:55,510 --> 00:28:58,600
how to do that because it's a lot more

00:28:57,040 --> 00:29:00,580
complicated you would have to look at

00:28:58,600 --> 00:29:06,150
all the devices what is to left or track

00:29:00,580 --> 00:29:06,150
each individual increase on its own so

00:29:07,050 --> 00:29:13,120
sorry I couldn't follow you can see

00:29:10,780 --> 00:29:16,210
anything I was just wondering how you

00:29:13,120 --> 00:29:20,800
plan to reverse the increase once at the

00:29:16,210 --> 00:29:26,070
wheel amazon registered i think it's

00:29:20,800 --> 00:29:30,130
very dirty cartoon maybe i can do that

00:29:26,070 --> 00:29:32,790
but we increase the capacity and we can

00:29:30,130 --> 00:29:32,790
take receipt

00:29:39,030 --> 00:29:42,030
yes

00:29:43,059 --> 00:29:49,749
I imagine they're class of adapters that

00:29:45,999 --> 00:29:53,669
aren't able to to use anything larger

00:29:49,749 --> 00:29:56,289
than 15-20 to do you know if that's true

00:29:53,669 --> 00:29:59,950
are there are there adapters that exist

00:29:56,289 --> 00:30:02,860
they don't use beyond 15 22 don't use

00:29:59,950 --> 00:30:07,840
can transmit or receive a frame larger

00:30:02,860 --> 00:30:10,360
than fifteen twenty two bytes I don't

00:30:07,840 --> 00:30:13,870
think all adapters that's support this

00:30:10,360 --> 00:30:16,210
extra tagging yes so is there a solution

00:30:13,870 --> 00:30:27,129
for those other than producing them to

00:30:16,210 --> 00:30:29,440
you crazy empty you its requirement for

00:30:27,129 --> 00:30:31,149
well there's two options as either an

00:30:29,440 --> 00:30:33,669
adapter can't support larger than

00:30:31,149 --> 00:30:36,279
fifteen twenty two bites and therefore

00:30:33,669 --> 00:30:41,889
cannot transmit of the excellent of the

00:30:36,279 --> 00:30:45,399
explant tag frame right if if he can't

00:30:41,889 --> 00:30:47,950
support a 1526 by frame he can't

00:30:45,399 --> 00:30:50,669
transmit that right so that means that

00:30:47,950 --> 00:30:55,720
adapter can't support be explained right

00:30:50,669 --> 00:30:57,340
I asking at the troc cosmic site I'm

00:30:55,720 --> 00:31:00,700
saying there are so there's a class of

00:30:57,340 --> 00:31:04,720
adapters that are unable to use a larger

00:31:00,700 --> 00:31:06,970
frame size and is there is there a

00:31:04,720 --> 00:31:11,159
proposed solution for that other don't

00:31:06,970 --> 00:31:15,639
support me eggs LAN or reducing the MTU

00:31:11,159 --> 00:31:19,029
to allow the extra be excellent bytes to

00:31:15,639 --> 00:31:21,820
be inserted into the frame that's case

00:31:19,029 --> 00:31:26,980
very hard to reduce them to you that's

00:31:21,820 --> 00:31:31,450
or any other social okay so its content

00:31:26,980 --> 00:31:34,450
right I agree so assuming a class of

00:31:31,450 --> 00:31:37,779
adapters exists that supports that

00:31:34,450 --> 00:31:40,029
cannot support more than 15-20 buds any

00:31:37,779 --> 00:31:44,350
any solution will have to produce the

00:31:40,029 --> 00:31:46,929
MTU maybe I not seeing

00:31:44,350 --> 00:31:52,900
using empty automatically is not good

00:31:46,929 --> 00:31:56,760
for users so we maybe we can output the

00:31:52,900 --> 00:32:03,340
warning message to reduce aunty sighs

00:31:56,760 --> 00:32:05,470
what do you think warning message is

00:32:03,340 --> 00:32:10,080
better than nothing but i always prefer

00:32:05,470 --> 00:32:10,080
a little more automatically or possible

00:32:12,750 --> 00:32:19,809
okay well i mean the obvious solution

00:32:16,900 --> 00:32:22,630
would be to make your your new and do

00:32:19,809 --> 00:32:25,179
and kerah sighs call back return of

00:32:22,630 --> 00:32:28,030
status if it's succeeded or failed and

00:32:25,179 --> 00:32:30,520
if it failed and then you reduce banty

00:32:28,030 --> 00:32:33,100
of the device which try to increase the

00:32:30,520 --> 00:32:35,590
letter size well I mean a warning

00:32:33,100 --> 00:32:38,820
message just not a very good solution I

00:32:35,590 --> 00:32:43,510
mean just handle it automatically so you

00:32:38,820 --> 00:32:46,840
provide automatically adjusting give

00:32:43,510 --> 00:32:48,970
size d fan tion and criticize this

00:32:46,840 --> 00:32:51,159
ferret yes sir if the Lord device can't

00:32:48,970 --> 00:32:52,900
handle it I mean why should the user I

00:32:51,159 --> 00:32:54,820
mean it doesn't have any other solution

00:32:52,900 --> 00:32:58,510
anyway so you can just as well good

00:32:54,820 --> 00:33:01,380
automatically obviously if it look if it

00:32:58,510 --> 00:33:03,700
returns how many bytes it can support or

00:33:01,380 --> 00:33:07,210
that your request is too large by

00:33:03,700 --> 00:33:09,880
explains it returns minus X and you

00:33:07,210 --> 00:33:12,429
apply that to the MTU you have your MP

00:33:09,880 --> 00:33:14,730
Liam to you hey you can sport it those

00:33:12,429 --> 00:33:14,730
frames

00:33:20,180 --> 00:33:30,560
so I worry with almost ready decreasing

00:33:25,530 --> 00:33:30,560
in size it's it looks pretty

00:33:51,630 --> 00:33:57,149
one last question is about the kink in

00:33:54,460 --> 00:34:01,570
general not about the daughter issues is

00:33:57,149 --> 00:34:04,570
for silv I saw now there is a bridge

00:34:01,570 --> 00:34:07,120
capability to add the king will it be

00:34:04,570 --> 00:34:11,349
all so you thought about a sorority

00:34:07,120 --> 00:34:19,540
option to enable on vast interface this

00:34:11,349 --> 00:34:24,609
day the king I don't see any sorry can

00:34:19,540 --> 00:34:31,649
handle double pockets or I'm not sure

00:34:24,609 --> 00:34:35,819
there is such a jew sara lee lewis so i

00:34:31,649 --> 00:34:35,819
have no idea party

00:34:37,889 --> 00:34:43,300
now I'm sure no issues i'm just talking

00:34:40,750 --> 00:34:45,010
about the Colbert's that for the

00:34:43,300 --> 00:34:50,290
configuration if it's just a bridge

00:34:45,010 --> 00:34:53,169
option for now our also there is a IP

00:34:50,290 --> 00:35:00,369
route to command to you to configure

00:34:53,169 --> 00:35:04,480
this see this area criticized its core

00:35:00,369 --> 00:35:09,180
don't muscari we create a total material

00:35:04,480 --> 00:35:13,660
device while putting the bridge into

00:35:09,180 --> 00:35:16,080
dope why the water so it's no there's no

00:35:13,660 --> 00:35:16,080
api

00:35:27,410 --> 00:35:32,010
and it's not really a problem but they

00:35:30,329 --> 00:35:33,930
are the ways that you could get 80

00:35:32,010 --> 00:35:35,579
frames appearing in the network for

00:35:33,930 --> 00:35:38,190
instance if you're open using open V

00:35:35,579 --> 00:35:39,809
switch so i guess that in that case it

00:35:38,190 --> 00:35:43,380
would just have to hold the NGO is

00:35:39,809 --> 00:35:44,819
appropriate when you use their what base

00:35:43,380 --> 00:35:48,059
with you you're not using the bridge

00:35:44,819 --> 00:35:52,680
code or we land but so it just be in

00:35:48,059 --> 00:35:55,529
another case it needs to be covered that

00:35:52,680 --> 00:35:56,849
case of orphan disease yeah well I'm not

00:35:55,529 --> 00:35:59,190
sure if it supports it right now with

00:35:56,849 --> 00:36:02,940
interior you would push it I even have

00:35:59,190 --> 00:36:05,549
an action that wishes an ad tag if that

00:36:02,940 --> 00:36:09,329
doesn't support don't buy any now but

00:36:05,549 --> 00:36:13,980
maybe they seemed a solution can you use

00:36:09,329 --> 00:36:15,809
yes that's what I'm saying yeah it may

00:36:13,980 --> 00:36:19,730
support ad right now I'm not sure that

00:36:15,809 --> 00:36:19,730
it has a kind in the future

00:36:40,200 --> 00:36:43,550
oh no Maureen

00:36:45,690 --> 00:36:49,700
okay so

00:36:57,740 --> 00:37:01,309
here the comments

00:37:07,960 --> 00:37:16,390
well thanks are we done any no comments

00:37:14,290 --> 00:37:19,859
come on you have to use all your

00:37:16,390 --> 00:37:24,450
problems you've got all the answers

00:37:19,859 --> 00:37:24,450

YouTube URL: https://www.youtube.com/watch?v=HTRxHOlJ1lY


