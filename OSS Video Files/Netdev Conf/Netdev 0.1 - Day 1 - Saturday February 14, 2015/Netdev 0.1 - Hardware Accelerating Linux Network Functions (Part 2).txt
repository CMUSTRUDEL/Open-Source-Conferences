Title: Netdev 0.1 - Hardware Accelerating Linux Network Functions (Part 2)
Publication date: 2015-04-05
Playlist: Netdev 0.1 - Day 1 - Saturday February 14, 2015
Description: 
	Hardware Accelerating Linux Network Functions (Part 1)
Roopa Prabhu
Wilson Kok
February 2015

Description from netdev01.org:
 Linux Kernel Switchdev API being discussed recently in the context of supporting networking switch ASIC's is the future of offload API's. And existing standard Linux interfaces can be used to offload Linux network functions to a network switch ASIC.

In this tutorial we will demonstrate this with an existing implementation.

We will show how existing Linux networking tools like iproute2/brctl/ethtool can be used to offload to a network switch ASIC.

We will start by talking and demonstrating various virtual switching technologies around the Linux bridge and related technologies (SRIOV, macvlan etc).

We will then proceed to demonstrate how Linux bridge can be accelerated with commodity network switch ASICs utilizing the same control tools:

    Create bridge device, add network switch ports using `ip link` or `brctl`
    Set vlans on bridge ports using `bridge vlan add`
    Vlans programmed in hardware
    hardware learning, software aging of fdb entries
    Dumping hardware fdb tables using `bridge fdb show`

We plan to cover L3 as well.

Most of the network switch drivers available today rely on a closed vendor SDK API. We will not be able to cover all hardware details, but we hope to show enough details of kernel structures offloaded to hardware for easier API development.

We will use an industry standard network switch running Debian based Cumulus Linux distribution. We are also looking at possibilities of showing this on other devices running Linux. 

http://www.netdev01.org

This video is licensed under Creative Commons Attribution-ShareAlike 4.0 International license. Feel free to download and distribute.
Captions: 
	00:00:00,000 --> 00:00:08,730
everybody do and I became instead words

00:00:04,609 --> 00:00:11,340
so I will be coming the rest of the I in

00:00:08,730 --> 00:00:13,530
Wilson actually Wilson is our switch a

00:00:11,340 --> 00:00:17,310
sig driver user space travel expert and

00:00:13,530 --> 00:00:20,070
we'll be covering the hardware also role

00:00:17,310 --> 00:00:23,550
acceleration of nodes in terms of switch

00:00:20,070 --> 00:00:25,500
Asics but to continue with whatever

00:00:23,550 --> 00:00:27,390
toshiaki said I have a few slides to

00:00:25,500 --> 00:00:29,640
give a background and just gradually

00:00:27,390 --> 00:00:33,780
move towards introduce you to switch

00:00:29,640 --> 00:00:37,620
Asics so the agenda for this part of the

00:00:33,780 --> 00:00:40,710
tutorial is to actually cover off the

00:00:37,620 --> 00:00:42,270
models at a higher level and off your

00:00:40,710 --> 00:00:44,850
types of course new drivers we have

00:00:42,270 --> 00:00:51,120
today and a little bit of introduction

00:00:44,850 --> 00:00:53,309
to switch Asics and l2 Mac learning and

00:00:51,120 --> 00:00:56,129
aging and then to STP handling we also

00:00:53,309 --> 00:00:58,739
from the current to hardware I gently

00:00:56,129 --> 00:01:00,239
snooping we explain so since we're

00:00:58,739 --> 00:01:01,949
talking in context of switching

00:01:00,239 --> 00:01:04,949
switching six can do a lot more than

00:01:01,949 --> 00:01:08,369
what this can do and one toshiaki

00:01:04,949 --> 00:01:11,549
covered so we'll also cover l3 in the

00:01:08,369 --> 00:01:14,640
context of switch a6 and maybe a small

00:01:11,549 --> 00:01:17,100
demo after that and I think Wilson and I

00:01:14,640 --> 00:01:21,180
will be switching back and forth during

00:01:17,100 --> 00:01:23,580
the stop to cover some of the topics so

00:01:21,180 --> 00:01:24,000
to continue the flow with what she just

00:01:23,580 --> 00:01:26,189
said

00:01:24,000 --> 00:01:31,320
this is a high-level slide it looks a

00:01:26,189 --> 00:01:33,930
little busy but it shows that we will

00:01:31,320 --> 00:01:36,360
use the same kernel API the RT mecklink

00:01:33,930 --> 00:01:38,579
API whatever the bridge we learn a

00:01:36,360 --> 00:01:44,820
directly we add a bridge create and

00:01:38,579 --> 00:01:48,240
stuff and towards the right you see Nick

00:01:44,820 --> 00:01:50,130
- neighs - pictures for Nick's one that

00:01:48,240 --> 00:01:52,409
does not do offload is not capable of

00:01:50,130 --> 00:01:57,149
learning or does not have any forwarding

00:01:52,409 --> 00:01:59,909
in the neck and towards the next is Nick

00:01:57,149 --> 00:02:02,990
- which can which does have an FTP which

00:01:59,909 --> 00:02:06,189
can probably learn or does have

00:02:02,990 --> 00:02:09,050
where you can program which is usually

00:02:06,189 --> 00:02:11,300
the example that to she has said in

00:02:09,050 --> 00:02:15,380
vehement violence you can program the VM

00:02:11,300 --> 00:02:17,930
FTB's MAC addresses in MTB and towards

00:02:15,380 --> 00:02:21,190
the far left there's a switch ASIC which

00:02:17,930 --> 00:02:23,330
can do a lot more but that also can do

00:02:21,190 --> 00:02:26,000
forwarding in hardware and so you have

00:02:23,330 --> 00:02:29,239
an FTP in hardware and the kernel

00:02:26,000 --> 00:02:32,620
portions in all three models show the

00:02:29,239 --> 00:02:36,200
bridge driver with the bridge sports and

00:02:32,620 --> 00:02:38,930
for the for the models where the

00:02:36,200 --> 00:02:41,360
hardware can do learning and/or accept

00:02:38,930 --> 00:02:45,860
activities or can accelerate forwarding

00:02:41,360 --> 00:02:48,590
you can see the bridge control path from

00:02:45,860 --> 00:02:53,959
user space art image link API going to

00:02:48,590 --> 00:02:56,030
the bridge driver and offload the of the

00:02:53,959 --> 00:03:00,380
bridge fbb a door which will an ad is

00:02:56,030 --> 00:03:02,180
then propagated to switch ASIC and the

00:03:00,380 --> 00:03:04,580
blue lines actually show the our team is

00:03:02,180 --> 00:03:09,920
metalic api which terminate mostly at

00:03:04,580 --> 00:03:11,299
the bridge driver and from there on it's

00:03:09,920 --> 00:03:14,829
the switch

00:03:11,299 --> 00:03:17,570
offload api the recent kernel support

00:03:14,829 --> 00:03:19,850
for switch ative API has put introduced

00:03:17,570 --> 00:03:23,510
which actually is nothing but a few in

00:03:19,850 --> 00:03:25,970
do ops on net devices which can take it

00:03:23,510 --> 00:03:27,850
which can take the operation to the

00:03:25,970 --> 00:03:34,579
switchdriver and the switchdriver can

00:03:27,850 --> 00:03:39,170
program hardware accordingly so the

00:03:34,579 --> 00:03:42,019
bigger picture here is what what we

00:03:39,170 --> 00:03:44,540
wanna say is all the kernel network

00:03:42,019 --> 00:03:49,549
functions like routing neighbor tables

00:03:44,540 --> 00:03:52,310
bridge FTB netfilter TC all these can be

00:03:49,549 --> 00:03:55,370
hardware accelerated by switching Asics

00:03:52,310 --> 00:03:57,410
which can do the same thing and the main

00:03:55,370 --> 00:04:00,410
point is your user stack remains the

00:03:57,410 --> 00:04:03,579
same whether you're running it on your

00:04:00,410 --> 00:04:06,200
ax written using a Nick or a switch ASIC

00:04:03,579 --> 00:04:07,970
in the user space you can see you can

00:04:06,200 --> 00:04:11,650
use IP route to whether it's the routing

00:04:07,970 --> 00:04:15,340
even pada or bird or MSTP

00:04:11,650 --> 00:04:18,340
user space and this STP daemon TC and of

00:04:15,340 --> 00:04:21,250
tables SNMP D all these talk to the

00:04:18,340 --> 00:04:27,120
colonel using the normal art innately

00:04:21,250 --> 00:04:29,440
KPI at the same API and the colonel can

00:04:27,120 --> 00:04:32,050
do software ordering or software

00:04:29,440 --> 00:04:33,910
bridging software routing if needed but

00:04:32,050 --> 00:04:35,470
if this Hardware available it can

00:04:33,910 --> 00:04:39,040
accelerate all these functions and

00:04:35,470 --> 00:04:41,020
that's what actually cumulus does and I

00:04:39,040 --> 00:04:45,789
went in cumulus and we have a demo later

00:04:41,020 --> 00:04:47,289
on and the switchdriver I don't call it

00:04:45,789 --> 00:04:49,810
a switch driver here just calling it

00:04:47,289 --> 00:04:54,090
hardware driver because it can be a big

00:04:49,810 --> 00:04:56,380
driver or any other driver but the

00:04:54,090 --> 00:04:58,570
example below is an example of a

00:04:56,380 --> 00:05:00,930
switching because it can do more than a

00:04:58,570 --> 00:05:00,930
Nick

00:05:01,199 --> 00:05:07,680
so Hardware offload driver models I want

00:05:05,620 --> 00:05:11,800
to introduce this for some context

00:05:07,680 --> 00:05:13,810
because the rest of the slides we are

00:05:11,800 --> 00:05:18,039
based on an implementation that cumulus

00:05:13,810 --> 00:05:21,479
has which uses a user space switch

00:05:18,039 --> 00:05:24,479
driver because most of the switch

00:05:21,479 --> 00:05:27,090
vendors today they have a user space SDK

00:05:24,479 --> 00:05:30,430
for their to program their hardware and

00:05:27,090 --> 00:05:32,440
so we want to introduce you to also the

00:05:30,430 --> 00:05:34,349
driver models where you can have the

00:05:32,440 --> 00:05:38,770
translate the kernel or in user space

00:05:34,349 --> 00:05:41,410
using the same kernel API so this one is

00:05:38,770 --> 00:05:44,580
you should be more familiar if you are

00:05:41,410 --> 00:05:48,130
following the recent kernel updates for

00:05:44,580 --> 00:05:49,349
switch then switch ASIC support in the

00:05:48,130 --> 00:05:53,349
kernel

00:05:49,349 --> 00:05:55,870
basically we a bunch of us have added

00:05:53,349 --> 00:05:59,349
some support with and you ops in the

00:05:55,870 --> 00:06:01,449
kernel to offload directly from the

00:05:59,349 --> 00:06:04,599
current path so in this picture you see

00:06:01,449 --> 00:06:07,690
a routing daemon communicating by are in

00:06:04,599 --> 00:06:10,120
it linked to the kernel faith and the

00:06:07,690 --> 00:06:13,210
colorful Intel calling and your ops

00:06:10,120 --> 00:06:15,460
directly to the switch driver and same

00:06:13,210 --> 00:06:18,490
goes for bridge MSTP

00:06:15,460 --> 00:06:20,710
stp diamond in userspace communicates

00:06:18,490 --> 00:06:23,350
with the bridge driver by ardently and

00:06:20,710 --> 00:06:30,099
it's forwarded the officer forwarded to

00:06:23,350 --> 00:06:33,849
the switchdriver the same thing will be

00:06:30,099 --> 00:06:36,870
achieved by a userspace driver which can

00:06:33,849 --> 00:06:40,150
have an art in it link listener and

00:06:36,870 --> 00:06:42,639
today our model humanist witches use

00:06:40,150 --> 00:06:45,810
this model we have an implementation on

00:06:42,639 --> 00:06:48,009
this but it's from the user spaces

00:06:45,810 --> 00:06:51,310
perspective the API remains the same

00:06:48,009 --> 00:06:53,650
it's art in Italy the kernel kernel is

00:06:51,310 --> 00:06:55,960
very good at generating notifications

00:06:53,650 --> 00:06:59,320
and notifi user space about whatever

00:06:55,960 --> 00:07:01,750
changes it to its routing tables or the

00:06:59,320 --> 00:07:03,729
bridge forwarding database and the user

00:07:01,750 --> 00:07:07,979
space driver can actually pick up those

00:07:03,729 --> 00:07:07,979
notifications and program hardware a

00:07:09,479 --> 00:07:17,639
little switch hardware ports and the

00:07:13,900 --> 00:07:19,750
switchdriver because it does make

00:07:17,639 --> 00:07:22,509
introduced a little bit of changes on

00:07:19,750 --> 00:07:28,150
how you what you see at the kernel level

00:07:22,509 --> 00:07:30,159
what packets you see and so this in this

00:07:28,150 --> 00:07:32,590
picture we have the switch hardware at

00:07:30,159 --> 00:07:36,400
the bottom and the curl the front panel

00:07:32,590 --> 00:07:39,430
ports the switch front panel ports the

00:07:36,400 --> 00:07:41,469
switchdriver creates a native Linux

00:07:39,430 --> 00:07:46,449
native construct for each of the front

00:07:41,469 --> 00:07:48,460
panel holes and not all traffic that

00:07:46,449 --> 00:07:53,070
comes to the front panel ports actually

00:07:48,460 --> 00:07:57,880
have received on these on these natives

00:07:53,070 --> 00:07:59,949
but whatever doesn't go for example 40

00:07:57,880 --> 00:08:01,990
if this the forwarding database in the

00:07:59,949 --> 00:08:05,050
switch is it has all the entries the

00:08:01,990 --> 00:08:07,479
forwarding happens in the spacing and it

00:08:05,050 --> 00:08:10,560
does the kernel basically does not see

00:08:07,479 --> 00:08:13,840
it it's passed through which is but then

00:08:10,560 --> 00:08:18,040
in case of broadcast a copy can come to

00:08:13,840 --> 00:08:21,490
switch the CPU board the blue one is the

00:08:18,040 --> 00:08:23,800
CPU board there and that's what the

00:08:21,490 --> 00:08:25,810
bridge vibrancy and the bridge the

00:08:23,800 --> 00:08:27,460
protocol scan the bridge driver if it's

00:08:25,810 --> 00:08:29,110
an STP frame it can come to the

00:08:27,460 --> 00:08:31,600
switchboard and hence to the bridge

00:08:29,110 --> 00:08:36,240
driver and the bridge driver can STP

00:08:31,600 --> 00:08:36,240
protocol can process that frame and

00:08:37,020 --> 00:08:43,479
recently we've also introduced switch

00:08:40,870 --> 00:08:46,570
offload feature flag on a switch driver

00:08:43,479 --> 00:08:49,270
a switch yeah on the switchdriver

00:08:46,570 --> 00:08:51,339
so as an interested switch driver can

00:08:49,270 --> 00:08:54,480
indicate that it is capable of

00:08:51,339 --> 00:09:01,930
offloading any feature to be Hardware by

00:08:54,480 --> 00:09:04,720
setting this flag on the needle just a

00:09:01,930 --> 00:09:08,410
preview about how the switch ports look

00:09:04,720 --> 00:09:10,029
on a switch in its regular natives you

00:09:08,410 --> 00:09:17,170
can see the e0 is a management board

00:09:10,029 --> 00:09:20,709
here and SW p12 this box is about 59 54

00:09:17,170 --> 00:09:22,839
poorest they look like regular den devs

00:09:20,709 --> 00:09:27,370
this is just a sample from one of the

00:09:22,839 --> 00:09:31,930
implementations each tool works as is

00:09:27,370 --> 00:09:33,970
the switchdriver can actually talk to

00:09:31,930 --> 00:09:38,170
the switch hardware to support each tool

00:09:33,970 --> 00:09:39,880
functionality and bridge bridging this

00:09:38,170 --> 00:09:41,680
is an example simple example of showing

00:09:39,880 --> 00:09:43,990
that the exact same commands that to

00:09:41,680 --> 00:09:47,260
share he showed on a host can actually

00:09:43,990 --> 00:09:50,020
work on a switch so SW v1 and is

00:09:47,260 --> 00:09:51,670
typically to our switch ports and you

00:09:50,020 --> 00:09:55,330
use exactly the same commands to create

00:09:51,670 --> 00:09:58,750
a bridge to assign the ports to the

00:09:55,330 --> 00:10:04,650
bridge device and add VLANs and FDB will

00:09:58,750 --> 00:10:04,650
show a demo of this later on on switch

00:10:06,180 --> 00:10:12,970
we also want to cover bonds as bridge

00:10:08,950 --> 00:10:15,160
ports a little bit this was a case of

00:10:12,970 --> 00:10:15,649
stacked devices in their devices case

00:10:15,160 --> 00:10:17,629
that

00:10:15,649 --> 00:10:22,040
I recently talked on the mailing list

00:10:17,629 --> 00:10:25,519
and the switch Asics are also capable of

00:10:22,040 --> 00:10:27,920
doing like so the bonding driver can

00:10:25,519 --> 00:10:29,209
actually be offloaded some of the

00:10:27,920 --> 00:10:32,720
functions of the body driver can be

00:10:29,209 --> 00:10:36,619
programmed in the hardware for example

00:10:32,720 --> 00:10:42,170
life and when bonds are parts of bridges

00:10:36,619 --> 00:10:44,689
we actually shorten of your documenting

00:10:42,170 --> 00:10:48,399
API through the broad driver to the

00:10:44,689 --> 00:10:48,399
switchboard under the switch ASIC

00:10:50,290 --> 00:11:12,259
questions give an example of bondings

00:11:09,559 --> 00:11:14,629
in this case there are CP state machine

00:11:12,259 --> 00:11:16,269
and sending of packets will be initiated

00:11:14,629 --> 00:11:38,569
by the hopper

00:11:16,269 --> 00:11:41,569
so what did you okay and this is that

00:11:38,569 --> 00:11:49,449
strengthened right no this is on the

00:11:41,569 --> 00:11:49,449
mainland this is the user space

00:11:57,239 --> 00:12:23,709
this is actually and our question in

00:12:22,329 --> 00:12:26,860
previous slides when you showed the

00:12:23,709 --> 00:12:36,329
multiple Ethernet devices so each switch

00:12:26,860 --> 00:12:41,429
boat has Mac of its own so the next

00:12:36,329 --> 00:12:41,429
through some of the hardware paths

00:12:41,610 --> 00:12:49,259
harder paths for bridge bridge packets

00:12:54,119 --> 00:13:04,329
so you said there was a separate native

00:12:58,660 --> 00:13:08,379
for every switch port how many actual

00:13:04,329 --> 00:13:09,910
Knicks are only on the host so one so

00:13:08,379 --> 00:13:12,879
you know you more replacing them across

00:13:09,910 --> 00:13:15,100
yes max even so the diagram alright so

00:13:12,879 --> 00:13:22,720
so you're messing them across and then

00:13:15,100 --> 00:13:25,329
demultiplexing them okay and then and so

00:13:22,720 --> 00:13:28,809
do you use multi cue how do you how do

00:13:25,329 --> 00:13:30,970
you deal with this is this provided

00:13:28,809 --> 00:13:36,069
usually by the SDK today we don't use

00:13:30,970 --> 00:13:40,919
money yes so it's not concurrent server

00:13:36,069 --> 00:13:44,429
so what's the advantage of doing in them

00:13:40,919 --> 00:13:47,709
having movies all the switch ports to be

00:13:44,429 --> 00:13:50,619
fixed yeah so this is not all the

00:13:47,709 --> 00:13:53,829
traffic that Hardware sees this is just

00:13:50,619 --> 00:13:57,009
control Muslim so tomorrow we will have

00:13:53,829 --> 00:14:01,300
multi cue we can have multi cue for the

00:13:57,009 --> 00:14:06,519
switch maybe

00:14:01,300 --> 00:14:09,310
the restate so the front panting horns

00:14:06,519 --> 00:14:11,140
so in the context of a real server

00:14:09,310 --> 00:14:14,620
you only have Nix Nix have two

00:14:11,140 --> 00:14:16,300
interfaces abort and VCI back right yes

00:14:14,620 --> 00:14:19,000
in the case of a switch that's not the

00:14:16,300 --> 00:14:22,450
case then mink is only on sort of the

00:14:19,000 --> 00:14:23,980
top of the switch the front panel Ward's

00:14:22,450 --> 00:14:27,190
can talk to each other without ever

00:14:23,980 --> 00:14:29,980
going to be see other what the port

00:14:27,190 --> 00:14:31,540
forwarding is still looks like an eight

00:14:29,980 --> 00:14:33,310
to the control plane but from a

00:14:31,540 --> 00:14:35,740
forwarding plane perspective the CPU is

00:14:33,310 --> 00:14:38,940
not important at all or so but the

00:14:35,740 --> 00:14:43,390
impression I got was that essentially

00:14:38,940 --> 00:14:47,260
the ASIC external switch was being proxy

00:14:43,390 --> 00:14:48,940
proxy and so all those ports the front

00:14:47,260 --> 00:14:51,190
side ports were effectively the

00:14:48,940 --> 00:14:56,079
equivalent of frontside ports that you'd

00:14:51,190 --> 00:14:58,990
have in well the IOC all the other ports

00:14:56,079 --> 00:15:01,660
that you'd have in the kernel if that

00:14:58,990 --> 00:15:03,790
was the case then and traffic that is

00:15:01,660 --> 00:15:05,709
the case for data thing perfect there is

00:15:03,790 --> 00:15:11,800
not the kids all right so this is only

00:15:05,709 --> 00:15:13,690
controller talking about okay son can

00:15:11,800 --> 00:15:16,240
ask a question I'm cured

00:15:13,690 --> 00:15:18,190
might stand up I'm curious how you'll

00:15:16,240 --> 00:15:20,950
deal with something simple like the net

00:15:18,190 --> 00:15:23,110
dev statistics think take something like

00:15:20,950 --> 00:15:26,140
how many packets at scene or how many

00:15:23,110 --> 00:15:28,660
bytes it seemed and ask how do you

00:15:26,140 --> 00:15:31,270
propagate that information how do you if

00:15:28,660 --> 00:15:33,550
you're multiplexing through one NIC

00:15:31,270 --> 00:15:35,850
interface what are you doing is it a

00:15:33,550 --> 00:15:38,170
sideman communication is an in man

00:15:35,850 --> 00:15:42,550
packet handling how do you actually get

00:15:38,170 --> 00:15:49,750
statistics update the hardware stats

00:15:42,550 --> 00:15:52,720
from hardware will be actually a few

00:15:49,750 --> 00:15:55,140
seconds talking about the tab anchor

00:15:52,720 --> 00:15:55,140
points

00:15:59,030 --> 00:16:07,190
to the tap I opted to actually set stats

00:16:02,660 --> 00:16:09,470
on the tap device which means that so

00:16:07,190 --> 00:16:27,740
negative stats and hardware stars are

00:16:09,470 --> 00:16:44,780
added periodically the periodicity five

00:16:27,740 --> 00:16:48,140
seconds to me so folks that really

00:16:44,780 --> 00:16:53,570
answer my previous question so now I

00:16:48,140 --> 00:16:55,790
have a new does something go might seem

00:16:53,570 --> 00:16:57,380
weird when you have this model well you

00:16:55,790 --> 00:16:59,750
have you know what the next running and

00:16:57,380 --> 00:17:01,430
there's hardware Nabal you know a sec

00:16:59,750 --> 00:17:03,560
doing the switch pinning and basically

00:17:01,430 --> 00:17:05,810
you're synchronizing you do the hardware

00:17:03,560 --> 00:17:07,670
so that the hardware can do offer you

00:17:05,810 --> 00:17:10,520
all sort of stuff Linux we're done for

00:17:07,670 --> 00:17:13,040
bothering and I'm sort of wondering if

00:17:10,520 --> 00:17:17,960
you think that you go to the wall and

00:17:13,040 --> 00:17:20,900
put Linux in is he in and looking at the

00:17:17,960 --> 00:17:23,180
switch that serves that the end it sort

00:17:20,900 --> 00:17:24,800
of it looks kind of the same way as a

00:17:23,180 --> 00:17:26,600
hardware I think although it's not a

00:17:24,800 --> 00:17:30,290
harder and you still have the same kind

00:17:26,600 --> 00:17:31,820
of logic of you know if I told you to I

00:17:30,290 --> 00:17:34,730
don't know do something with this

00:17:31,820 --> 00:17:36,260
traffic don't bother with it with me so

00:17:34,730 --> 00:17:38,240
in a way what I'm saying there's

00:17:36,260 --> 00:17:40,520
absolutely nothing in this model which

00:17:38,240 --> 00:17:42,590
is unique to a hardware awful it just

00:17:40,520 --> 00:17:46,250
saw a loop which is behind the scope of

00:17:42,590 --> 00:17:49,040
the machine do you think or see any way

00:17:46,250 --> 00:17:51,470
or something working on making it a

00:17:49,040 --> 00:17:53,990
silly a hard work afloat but you know

00:17:51,470 --> 00:17:55,340
I'm on although the owners cope with

00:17:53,990 --> 00:17:59,560
machine whether it's of this which

00:17:55,340 --> 00:17:59,560
should be below the VM or this scenario

00:18:06,999 --> 00:18:15,529
and one Linux exactly believe you said

00:18:11,269 --> 00:18:19,989
so yeah we would you suggest works to be

00:18:15,529 --> 00:18:19,989
and yeah

00:18:21,770 --> 00:18:26,280
you know also other question probably

00:18:24,390 --> 00:18:28,650
not the right time to ask but you know

00:18:26,280 --> 00:18:33,260
it you can cascade it right noviembre

00:18:28,650 --> 00:18:33,260
street whatever yeah okay thanks cool

00:18:58,480 --> 00:19:03,830
a small announcement if you're trying to

00:19:01,970 --> 00:19:09,130
log into the wireless the username is

00:19:03,830 --> 00:19:09,130
netday and password native all lowercase

00:19:25,330 --> 00:19:50,960
SSID is meeting rules Westen meeting

00:19:29,690 --> 00:19:54,409
rooms so I'll continue on topic so we

00:19:50,960 --> 00:19:57,610
sort of touched on like the control path

00:19:54,409 --> 00:20:01,640
and how bridge is set up and how for

00:19:57,610 --> 00:20:05,049
translate into purchased some take a

00:20:01,640 --> 00:20:08,890
moment and look at slightly different

00:20:05,049 --> 00:20:13,669
angle so how this packet forward is

00:20:08,890 --> 00:20:17,750
offloaded environment so in this picture

00:20:13,669 --> 00:20:22,909
showing a switch ASIC and Linux kernel

00:20:17,750 --> 00:20:26,270
so different types of packet so for

00:20:22,909 --> 00:20:29,059
packets that has no destination address

00:20:26,270 --> 00:20:33,380
so which is represented by the dark blue

00:20:29,059 --> 00:20:35,899
line basically the switch ASIC just for

00:20:33,380 --> 00:20:37,820
the packet without the kernel ever

00:20:35,899 --> 00:20:41,779
seeing the packet so this actually

00:20:37,820 --> 00:20:44,029
creates some considerations that we have

00:20:41,779 --> 00:20:48,470
to look at when we do other things like

00:20:44,029 --> 00:20:52,070
aging and things like that for packets

00:20:48,470 --> 00:20:54,980
that are flooded my either broadcast

00:20:52,070 --> 00:20:56,890
multicast or on the unicast switch ASIC

00:20:54,980 --> 00:21:00,640
would flooded across all the ports in

00:20:56,890 --> 00:21:04,460
some cases it may send a copy to the CPU

00:21:00,640 --> 00:21:08,060
now nowadays ASIC has capability to

00:21:04,460 --> 00:21:10,040
filter most of these packets and

00:21:08,060 --> 00:21:12,260
nothing the packets that we really need

00:21:10,040 --> 00:21:13,850
to go to CPU to go there like for

00:21:12,260 --> 00:21:15,980
example if you have unknowns like

00:21:13,850 --> 00:21:18,710
there's really no need for the kernel to

00:21:15,980 --> 00:21:21,710
do - to see the packet so some many

00:21:18,710 --> 00:21:25,550
things allow you to to drop drop that

00:21:21,710 --> 00:21:28,370
extra copy to the CPU but more important

00:21:25,550 --> 00:21:31,280
point there is if such a packet does go

00:21:28,370 --> 00:21:33,470
to the CPU the one thing to make sure is

00:21:31,280 --> 00:21:37,340
to not be forward a packet because it's

00:21:33,470 --> 00:21:40,010
already done in hardware so some

00:21:37,340 --> 00:21:43,340
capability in the kernel will be needed

00:21:40,010 --> 00:21:46,160
to do that and one of the bridges I

00:21:43,340 --> 00:21:49,100
guess we have other discussions and

00:21:46,160 --> 00:21:51,020
forums but one of the projects would be

00:21:49,100 --> 00:21:53,810
using the optimal flag on the net-net

00:21:51,020 --> 00:21:55,790
device to indicate that such a frame

00:21:53,810 --> 00:22:02,120
does need to be reported

00:21:55,790 --> 00:22:03,530
same goes with the statistics that the

00:22:02,120 --> 00:22:08,600
kernel and the hardware should not be

00:22:03,530 --> 00:22:11,180
doubled and the last case is the light

00:22:08,600 --> 00:22:14,300
blue line which is packets that are

00:22:11,180 --> 00:22:18,550
destined to the CPU or generated by the

00:22:14,300 --> 00:22:18,550
CPU so those are pretty straightforward

00:22:21,670 --> 00:22:33,380
so FDB learning so as I mentioned

00:22:28,400 --> 00:22:35,120
earlier in in most cases the packets are

00:22:33,380 --> 00:22:37,760
switched by the ASIC but I guess when

00:22:35,120 --> 00:22:39,590
the package first shows up and the

00:22:37,760 --> 00:22:44,600
magnetars not seen that the hardware

00:22:39,590 --> 00:22:45,890
will learn the MAC address and the

00:22:44,600 --> 00:22:49,250
fridge tracker will be getting the

00:22:45,890 --> 00:22:52,460
notification from the hardware and then

00:22:49,250 --> 00:22:56,960
it will populate the FDB in the bridge

00:22:52,460 --> 00:23:00,520
driver and subsequently all the unique a

00:22:56,960 --> 00:23:00,520
spring just continue on back address

00:23:00,530 --> 00:23:07,970
switched by the hardwood it's important

00:23:04,730 --> 00:23:10,840
to note that when Hart was doing the

00:23:07,970 --> 00:23:13,370
offload in terms of learning MAC address

00:23:10,840 --> 00:23:16,430
we should turn off the learning in the

00:23:13,370 --> 00:23:18,890
kernel also the main reason for that is

00:23:16,430 --> 00:23:21,610
to avoid race conditions because you

00:23:18,890 --> 00:23:24,350
have two different paths of learning and

00:23:21,610 --> 00:23:26,300
packets may actually show up in the

00:23:24,350 --> 00:23:30,890
kernel because of some reasons like

00:23:26,300 --> 00:23:34,190
punting and maybe broadcast and so there

00:23:30,890 --> 00:23:37,570
is a chance of a race condition and you

00:23:34,190 --> 00:23:43,580
want to avoid that by just turning out

00:23:37,570 --> 00:23:45,740
learning in the kernel the other things

00:23:43,580 --> 00:23:48,200
are kind of obvious like the hardware

00:23:45,740 --> 00:23:51,140
will present is view of what is an

00:23:48,200 --> 00:23:53,390
interface what is a VLAN and Driver

00:23:51,140 --> 00:23:55,100
basically has to convert it to the

00:23:53,390 --> 00:24:02,030
kernel constructs like what is a bridge

00:23:55,100 --> 00:24:06,080
and once supported I have index think

00:24:02,030 --> 00:24:09,200
something is aging so so then obviously

00:24:06,080 --> 00:24:11,300
two possible places to do aging like one

00:24:09,200 --> 00:24:16,280
is in the kernel and one is in the

00:24:11,300 --> 00:24:19,330
hardware so if the kernel is doing aging

00:24:16,280 --> 00:24:21,590
the first problem that comes to mind is

00:24:19,330 --> 00:24:23,450
kernel doesn't see packets most of the

00:24:21,590 --> 00:24:26,840
time so how does it do

00:24:23,450 --> 00:24:30,650
aging properly so to do that we require

00:24:26,840 --> 00:24:34,580
the switchdriver to update or refresh

00:24:30,650 --> 00:24:37,940
the angel of the FDB and that will

00:24:34,580 --> 00:24:41,570
require periodic polling of its status

00:24:37,940 --> 00:24:44,390
from the hardware and then updating the

00:24:41,570 --> 00:24:48,049
MTB in the kernel and then when the

00:24:44,390 --> 00:24:50,629
kernel is running is timer and it can

00:24:48,049 --> 00:24:53,480
they should have to be delete when and

00:24:50,629 --> 00:25:00,169
she has to be aged up so it depends on

00:24:53,480 --> 00:25:04,279
how efficient the hardware is SDK or API

00:25:00,169 --> 00:25:07,129
presents itself so it and you can

00:25:04,279 --> 00:25:12,129
imagine like how frequent you can PO and

00:25:07,129 --> 00:25:17,499
how accurate your your timing has to be

00:25:12,129 --> 00:25:17,499
yeah the choice is do needed hardware so

00:25:18,009 --> 00:25:22,850
this this this one's an obvious like

00:25:20,629 --> 00:25:24,980
when hardware runs runs is timer and

00:25:22,850 --> 00:25:27,409
then decides that that leads to a child

00:25:24,980 --> 00:25:29,779
and it just need to send it to the

00:25:27,409 --> 00:25:32,929
notification to the switch charming and

00:25:29,779 --> 00:25:41,690
let's treat switch dragon will tell the

00:25:32,929 --> 00:25:45,110
bridge driver to delete the MDE one

00:25:41,690 --> 00:25:47,299
thing to can mention is that this is

00:25:45,110 --> 00:25:50,990
about aging that what about showing the

00:25:47,299 --> 00:25:54,980
age of a man from like when you wanted

00:25:50,990 --> 00:25:58,669
to have TV show with the - says or the

00:25:54,980 --> 00:26:00,919
RCT of show Mac so again the problem is

00:25:58,669 --> 00:26:04,249
currently DC packets on most of the time

00:26:00,919 --> 00:26:07,369
so if we have the refresh that we talked

00:26:04,249 --> 00:26:11,480
about earlier and you can kind of keep

00:26:07,369 --> 00:26:14,659
it reasonably up to date in terms of of

00:26:11,480 --> 00:26:17,210
the age and so with that then maybe it's

00:26:14,659 --> 00:26:20,049
an argument it was doing it doing the

00:26:17,210 --> 00:26:20,049
aging colonel

00:26:24,170 --> 00:26:29,390
so STP offload

00:26:39,230 --> 00:26:47,400
so I'll delivering a quarantine that's

00:26:44,280 --> 00:26:50,880
an idea because the framing for be

00:26:47,400 --> 00:26:52,980
forward by Dublin that vacation or sorry

00:26:50,880 --> 00:26:57,510
the bridge client was breach will not

00:26:52,980 --> 00:27:01,500
see him at all so all the learning will

00:26:57,510 --> 00:27:02,850
more work before they leave before I

00:27:01,500 --> 00:27:05,820
didn't catch the last part of the

00:27:02,850 --> 00:27:07,800
questions right so I'm trying to so I

00:27:05,820 --> 00:27:18,320
have a little breach right let's model

00:27:07,800 --> 00:27:21,510
the the Hubble breach and then yes so

00:27:18,320 --> 00:27:23,460
what is the method to do that how I made

00:27:21,510 --> 00:27:30,180
the bridge see that the packet it came

00:27:23,460 --> 00:27:32,910
from five five so this is back to this

00:27:30,180 --> 00:27:35,730
light so when the hardware is seeing a

00:27:32,910 --> 00:27:37,950
frame and find that as the magnetars is

00:27:35,730 --> 00:27:43,050
not seen before and it's sensor

00:27:37,950 --> 00:27:46,830
notification to to the switchdriver this

00:27:43,050 --> 00:27:49,970
is and then the switchdriver will

00:27:46,830 --> 00:27:52,620
basically populate the using the api to

00:27:49,970 --> 00:27:55,680
populate that british either with the

00:27:52,620 --> 00:27:57,660
FDP and at that point that there is a

00:27:55,680 --> 00:28:02,070
need for translating between what the

00:27:57,660 --> 00:28:05,490
hardware means by 495

00:28:02,070 --> 00:28:09,470
and you need to translate it into I said

00:28:05,490 --> 00:28:13,080
PP let's say six and then and that

00:28:09,470 --> 00:28:15,870
feeling feelings whatever number is

00:28:13,080 --> 00:28:17,400
actually British let's say PR zero so

00:28:15,870 --> 00:28:19,770
there's a mapping that needs to be kept

00:28:17,400 --> 00:28:22,620
and the China is the one that that is

00:28:19,770 --> 00:28:28,800
doing the translation did I answer your

00:28:22,620 --> 00:28:30,360
question I'm talking about okay so is it

00:28:28,800 --> 00:28:31,830
is it a new API that you're adding to

00:28:30,360 --> 00:28:37,250
the end of the bridge in order to make

00:28:31,830 --> 00:28:37,250
him learn so the nominee entries yes

00:28:37,280 --> 00:28:43,770
Scott that they added from the

00:28:40,740 --> 00:28:45,630
switchdriver you can use the notifier to

00:28:43,770 --> 00:28:48,840
inform this way French driver about

00:28:45,630 --> 00:28:51,570
newly learned entries in the case of the

00:28:48,840 --> 00:28:54,060
user space driver like it's my signal if

00:28:51,570 --> 00:28:55,770
that you can make the user space user

00:28:54,060 --> 00:28:57,210
space driver send a metalic message to

00:28:55,770 --> 00:28:59,850
the colonel to say that this is a

00:28:57,210 --> 00:29:02,450
learning so is it only a reflection or

00:28:59,850 --> 00:29:14,430
who is the master of the earth to be so

00:29:02,450 --> 00:29:19,530
hyper is the master all those make the

00:29:14,430 --> 00:29:24,480
aging for the same you can actually work

00:29:19,530 --> 00:29:27,330
event basically very happy weights it

00:29:24,480 --> 00:29:30,300
actually also depends on two things

00:29:27,330 --> 00:29:32,070
right so one is how well the ASIC does

00:29:30,300 --> 00:29:34,560
aging tonight how granular it can do

00:29:32,070 --> 00:29:37,130
like some ASIC has one one call time of

00:29:34,560 --> 00:29:39,060
death sweeps and so the granular

00:29:37,130 --> 00:29:42,180
granularity is actually not not very

00:29:39,060 --> 00:29:44,100
good and the other thing is if you are

00:29:42,180 --> 00:29:47,250
letting the kernel to do

00:29:44,100 --> 00:29:51,870
agent and basically you are making sure

00:29:47,250 --> 00:29:55,380
that to to your mass mastership point

00:29:51,870 --> 00:29:58,169
you are basically telling one one of

00:29:55,380 --> 00:29:59,700
them will be doing the creation and that

00:29:58,169 --> 00:30:03,000
the other one kind only comes the

00:29:59,700 --> 00:30:05,160
deletion and then you because usually

00:30:03,000 --> 00:30:08,460
can also do like that delete delete and

00:30:05,160 --> 00:30:10,950
so in in those spaces then when the man

00:30:08,460 --> 00:30:12,840
addresses in the hardware or not in the

00:30:10,950 --> 00:30:15,600
hardware you have to kind of think

00:30:12,840 --> 00:30:19,380
through which one act is it a user

00:30:15,600 --> 00:30:21,960
initiated to meet or is it is it a

00:30:19,380 --> 00:30:23,549
hardware each energy so there are

00:30:21,960 --> 00:30:27,530
situations like that that needs to be

00:30:23,549 --> 00:30:29,730
just evacuated I guess there's no like

00:30:27,530 --> 00:30:31,110
absolutely right way or wrong way either

00:30:29,730 --> 00:30:32,400
way you can make it work but then you

00:30:31,110 --> 00:30:36,990
just have to be consistent and

00:30:32,400 --> 00:30:39,780
understand that and one more point is

00:30:36,990 --> 00:30:42,419
like about the the freshness of the age

00:30:39,780 --> 00:30:44,370
right sometimes some people may not

00:30:42,419 --> 00:30:47,880
think that so it's a very important

00:30:44,370 --> 00:30:49,440
thing but when you when you actually

00:30:47,880 --> 00:30:53,190
need to troubleshoot or when you need to

00:30:49,440 --> 00:30:56,700
do things about that age you want to

00:30:53,190 --> 00:30:59,970
show reasonably accurate age information

00:30:56,700 --> 00:31:02,010
and because you need to do that then you

00:30:59,970 --> 00:31:05,010
already have the plumbing to to do the

00:31:02,010 --> 00:31:09,570
kernel aging properly so that's no

00:31:05,010 --> 00:31:13,409
reason why you cannot do it thank you

00:31:09,570 --> 00:31:16,110
I have another question on the same

00:31:13,409 --> 00:31:18,630
topic almost so the a single have fixed

00:31:16,110 --> 00:31:20,850
or limited to have to be table size

00:31:18,630 --> 00:31:24,299
I assumed that once the table is falling

00:31:20,850 --> 00:31:27,919
off the package to deceive you but the

00:31:24,299 --> 00:31:27,919
bridge table will have learning disabled

00:31:28,039 --> 00:31:33,510
how it does turn out with or what day is

00:31:30,750 --> 00:31:35,220
it never on the package up actually if

00:31:33,510 --> 00:31:36,880
the table in the hardware is ready for

00:31:35,220 --> 00:31:39,460
you you don't really want

00:31:36,880 --> 00:31:41,140
on any packet to the CP Aviles seem to

00:31:39,460 --> 00:31:43,840
you most likely will not be able handle

00:31:41,140 --> 00:31:45,700
the vote so in that case you will

00:31:43,840 --> 00:31:50,590
degrade the service by flooding the

00:31:45,700 --> 00:31:52,000
hardware okay so I this is it would be a

00:31:50,590 --> 00:31:53,260
chance to extend them and I'm not sure

00:31:52,000 --> 00:31:54,340
about the hardware limitations on

00:31:53,260 --> 00:31:56,320
whether it makes sense or whether it'll

00:31:54,340 --> 00:31:58,300
be on a stick that has the bandwidth on

00:31:56,320 --> 00:32:01,930
packets will deceive you but that might

00:31:58,300 --> 00:32:03,280
be an opportunity to kind of go beyond

00:32:01,930 --> 00:32:05,740
the current limitation at Hardware

00:32:03,280 --> 00:32:11,350
always has a fixed size or a limited I

00:32:05,740 --> 00:32:14,380
have to be table for the enterprise use

00:32:11,350 --> 00:32:16,630
case 128 Deming ports you're not going

00:32:14,380 --> 00:32:19,120
to build this if you big enough to to

00:32:16,630 --> 00:32:21,070
make it sustainable it's it's actually

00:32:19,120 --> 00:32:23,650
pretty impractical for us to try and do

00:32:21,070 --> 00:32:26,970
a multi-layered solution for this use is

00:32:23,650 --> 00:32:30,580
for a host a few links many cores that

00:32:26,970 --> 00:32:32,410
makes total sense but for us we would we

00:32:30,580 --> 00:32:34,450
would melt whatever CPU we need other

00:32:32,410 --> 00:32:36,610
I'm not necessarily only talking about

00:32:34,450 --> 00:32:38,770
enterprise right this model is

00:32:36,610 --> 00:32:41,260
interesting for a host or uses other

00:32:38,770 --> 00:32:42,280
hosting is my smaller small devices I

00:32:41,260 --> 00:32:44,680
think we need to find them all over

00:32:42,280 --> 00:32:47,530
Beaufort support we cannot hard-code

00:32:44,680 --> 00:32:50,730
about yoga learning in the British

00:32:47,530 --> 00:32:50,730
service always disabled

00:32:57,130 --> 00:33:04,630
so my question is whether or not the

00:33:01,110 --> 00:33:08,890
model that says that the switch is going

00:33:04,630 --> 00:33:12,040
to actually learn and tell the Linux

00:33:08,890 --> 00:33:14,860
bridge that it learned a particular MAC

00:33:12,040 --> 00:33:17,620
address versus a model where first

00:33:14,860 --> 00:33:19,510
packets go to the bridge or unlearned

00:33:17,620 --> 00:33:22,780
unknown packets go to the bridge

00:33:19,510 --> 00:33:24,490
it doesn't learning and says here create

00:33:22,780 --> 00:33:28,179
this in your forwarding database rather

00:33:24,490 --> 00:33:30,340
than the switch certainly I can

00:33:28,179 --> 00:33:32,620
understand in large-scale enterprise

00:33:30,340 --> 00:33:34,840
model that you know fails fairly quickly

00:33:32,620 --> 00:33:39,790
in terms of too many first packets

00:33:34,840 --> 00:33:43,210
adding the CPU but in a home router as

00:33:39,790 --> 00:33:48,070
an example right the number here would

00:33:43,210 --> 00:33:50,380
be relatively small right is the you

00:33:48,070 --> 00:33:55,120
know do we set up Linux with both

00:33:50,380 --> 00:33:58,210
capabilities I guess it's an flexibility

00:33:55,120 --> 00:34:01,059
that that would be applicable to to the

00:33:58,210 --> 00:34:07,600
case you mentioned and I've not seen why

00:34:01,059 --> 00:34:10,210
we will preclude that as an option yeah

00:34:07,600 --> 00:34:11,800
and you can do not learning in hardware

00:34:10,210 --> 00:34:14,980
and you can learn all your software and

00:34:11,800 --> 00:34:17,679
still push they're given really similar

00:34:14,980 --> 00:34:21,119
to what you do so the ABS can do both

00:34:17,679 --> 00:34:21,119
one support for others

00:34:30,310 --> 00:34:37,600
okay notifications are sent to Linux

00:34:33,530 --> 00:34:37,600
kernel only learning sink east or not

00:34:39,940 --> 00:34:45,800
yeah what they've got the time after

00:34:43,190 --> 00:34:48,470
learning so if you turn on turn off on

00:34:45,800 --> 00:34:49,850
the on the kernel tab that means even

00:34:48,470 --> 00:34:52,030
the first package shown of the bridge

00:34:49,850 --> 00:34:55,820
travel will not learn so there's some

00:34:52,030 --> 00:34:58,610
mechanism that needs to be in place to

00:34:55,820 --> 00:35:00,950
basically shut off the learning in the

00:34:58,610 --> 00:35:13,780
hardware but continue to do learning in

00:35:00,950 --> 00:35:18,650
the code so I guess I started at STP so

00:35:13,780 --> 00:35:22,220
STP basically it's needed it only to

00:35:18,650 --> 00:35:25,400
network maybe not a very small home

00:35:22,220 --> 00:35:28,070
network but anything that is reasonably

00:35:25,400 --> 00:35:32,270
skilled definitely need STP for

00:35:28,070 --> 00:35:36,320
protection and so in we can run kernel

00:35:32,270 --> 00:35:39,050
STP or home STP demon either user space

00:35:36,320 --> 00:35:40,820
and basically the kernel is still the

00:35:39,050 --> 00:35:43,000
one that British drivers still the one

00:35:40,820 --> 00:35:47,660
that is keeping the stateful encourage

00:35:43,000 --> 00:35:51,410
metal ports and all those updates are

00:35:47,660 --> 00:35:55,250
being broadcasted in that link message

00:35:51,410 --> 00:35:57,290
and so the switch charter if it's a use

00:35:55,250 --> 00:36:00,320
of space which drive I will be listening

00:35:57,290 --> 00:36:01,670
to those updates and setting the

00:36:00,320 --> 00:36:05,480
forwarding state in the hardware

00:36:01,670 --> 00:36:07,460
appropriately and if it's a kernel

00:36:05,480 --> 00:36:11,410
search rather than I I think there's a

00:36:07,460 --> 00:36:17,600
API to do that also does anything right

00:36:11,410 --> 00:36:20,510
I gently snooping so so this this

00:36:17,600 --> 00:36:23,300
picture is trying to show in the in the

00:36:20,510 --> 00:36:25,930
most contents form like how igmp

00:36:23,300 --> 00:36:29,750
snooping kind words in this environment

00:36:25,930 --> 00:36:32,600
the light blue line shows a query packet

00:36:29,750 --> 00:36:33,740
that comes to the asic which needs to be

00:36:32,600 --> 00:36:35,630
punted to

00:36:33,740 --> 00:36:39,500
to the colonel and then the bridge

00:36:35,630 --> 00:36:41,510
driver basically processes the query in

00:36:39,500 --> 00:36:44,300
the in the case of query actually it

00:36:41,510 --> 00:36:47,540
needs to be flooded and some basic stuff

00:36:44,300 --> 00:36:50,210
does the flooding in hardware and in

00:36:47,540 --> 00:36:54,440
some cases the kernel actually needs to

00:36:50,210 --> 00:36:56,930
flow and then the red line shows a joint

00:36:54,440 --> 00:37:00,080
message that comes from another port for

00:36:56,930 --> 00:37:02,000
a particular group and again it goes all

00:37:00,080 --> 00:37:05,590
the way to the British driver which

00:37:02,000 --> 00:37:08,869
creates the membership and the result is

00:37:05,590 --> 00:37:13,610
an empty B entry that's shown on the

00:37:08,869 --> 00:37:17,350
left and route important indication and

00:37:13,610 --> 00:37:20,480
these entries and settings will again be

00:37:17,350 --> 00:37:25,510
installed in the hardware so that the

00:37:20,480 --> 00:37:25,510
multicast traffic is is offloaded also

00:37:26,980 --> 00:37:32,140
so I'm going to touch on just a question

00:37:40,440 --> 00:38:00,430
in external something that you build on

00:37:58,210 --> 00:38:01,990
that was in the presentation different

00:38:00,430 --> 00:38:14,859
so the bridge today supported not

00:38:01,990 --> 00:38:19,809
promiscuous mode customer and so such an

00:38:14,859 --> 00:38:24,539
excellent so I'm going to talk about the

00:38:19,809 --> 00:38:28,589
tab from hard from switch perspective

00:38:24,539 --> 00:38:32,859
extending obviously and the deployed

00:38:28,589 --> 00:38:35,890
switch for us accumulates we're more

00:38:32,859 --> 00:38:40,200
interested in making this which is a

00:38:35,890 --> 00:38:42,579
hardware meter to offload the weeks then

00:38:40,200 --> 00:38:46,390
encapsulation encapsulation processing

00:38:42,579 --> 00:38:49,420
on behalf of hosts that cannot do it so

00:38:46,390 --> 00:38:54,279
the model that we are falling is that

00:38:49,420 --> 00:38:56,619
for local rich ports we basically put

00:38:54,279 --> 00:38:59,019
them in a bridge just like normal they

00:38:56,619 --> 00:39:01,119
are to bridging and so you can have a

00:38:59,019 --> 00:39:03,640
hosts that are part of the latest sub

00:39:01,119 --> 00:39:07,109
when that can be doing normal way of

00:39:03,640 --> 00:39:11,230
bridging at the same time we will be

00:39:07,109 --> 00:39:13,809
putting the week's LAN link into the

00:39:11,230 --> 00:39:15,609
same bridge and by doing so we are

00:39:13,809 --> 00:39:19,869
basically creating an association

00:39:15,609 --> 00:39:24,599
between the local ports and the V and I

00:39:19,869 --> 00:39:27,940
the vehicle and instance and in terms of

00:39:24,599 --> 00:39:30,819
the FTP table

00:39:27,940 --> 00:39:36,099
you can see in this example I have two

00:39:30,819 --> 00:39:37,430
local local host and so on the bridge

00:39:36,099 --> 00:39:40,280
driver FTP

00:39:37,430 --> 00:39:43,160
no I have Mackey and back be pointing

00:39:40,280 --> 00:39:45,170
locally and that there's a maxi because

00:39:43,160 --> 00:39:47,240
of the enslaving of the beast and

00:39:45,170 --> 00:39:50,660
Lincoln to bridge the maxi actually

00:39:47,240 --> 00:39:54,619
points to the extend link and then in

00:39:50,660 --> 00:39:57,140
the village either the maxi which is

00:39:54,619 --> 00:40:00,349
actually remote will be pointing to

00:39:57,140 --> 00:40:05,740
remote meet MIT and then for any unknown

00:40:00,349 --> 00:40:08,750
frames but depending on whether was the

00:40:05,740 --> 00:40:10,670
configuration supports it or not the the

00:40:08,750 --> 00:40:16,280
unknown can be pointing to a particular

00:40:10,670 --> 00:40:19,369
address for replication so this is this

00:40:16,280 --> 00:40:21,740
is the kind of full of of a packet so

00:40:19,369 --> 00:40:26,270
when the packet shows up coming from

00:40:21,740 --> 00:40:29,559
this WP one port and destined to let's

00:40:26,270 --> 00:40:32,329
say the maxi then the packet actually

00:40:29,559 --> 00:40:34,609
crosses the bridge driver into the

00:40:32,329 --> 00:40:36,230
vehicle and driver does the lookup and

00:40:34,609 --> 00:40:38,780
then it decides that it needs to

00:40:36,230 --> 00:40:42,049
encapsulate and run towards the remote

00:40:38,780 --> 00:40:44,780
location in terms of hardware offload

00:40:42,049 --> 00:40:49,099
this is that the bridge part is pretty

00:40:44,780 --> 00:40:53,359
much the same and as before and the only

00:40:49,099 --> 00:40:56,960
extension is that later forwarding

00:40:53,359 --> 00:40:59,329
instance in hardware now we have tunnel

00:40:56,960 --> 00:41:02,270
encapsulation concerts that are that are

00:40:59,329 --> 00:41:05,869
hanging off it so that the frames that

00:41:02,270 --> 00:41:10,420
are being destined to remote can get

00:41:05,869 --> 00:41:10,420
tunnel encapsulated and even ecmp

00:41:10,480 --> 00:41:20,900
routing to was the very fabric and on

00:41:16,490 --> 00:41:23,690
the reverse basically in the reverse

00:41:20,900 --> 00:41:24,750
direction the Vixen encapsulating the

00:41:23,690 --> 00:41:28,200
packing

00:41:24,750 --> 00:41:31,560
we'll have an ID that matches the Vita

00:41:28,200 --> 00:41:34,950
IP in this case it's the loopback

00:41:31,560 --> 00:41:37,440
address of the switch and it will

00:41:34,950 --> 00:41:39,960
qualify for excellent termination and

00:41:37,440 --> 00:41:42,570
then after that it will look up in the

00:41:39,960 --> 00:41:45,270
hard way we'll look at the later tango

00:41:42,570 --> 00:41:49,790
again and then it will match one of the

00:41:45,270 --> 00:41:49,790
local addresses and then before the loan

00:41:51,870 --> 00:42:04,020
I mentioned the replication briefly just

00:41:56,610 --> 00:42:06,780
now so the extend supports various ways

00:42:04,020 --> 00:42:09,740
of handling handling sokoban packets

00:42:06,780 --> 00:42:13,860
basically the unknown flood cases

00:42:09,740 --> 00:42:18,960
multicast is what's recommended or

00:42:13,860 --> 00:42:21,630
suggested approach from the RC and there

00:42:18,960 --> 00:42:25,080
are other systems out there that can do

00:42:21,630 --> 00:42:28,050
replication using a dedicated note yet

00:42:25,080 --> 00:42:30,660
another model is to leverage some of the

00:42:28,050 --> 00:42:35,730
hardware capability to do local

00:42:30,660 --> 00:42:37,560
replication so imagine you this

00:42:35,730 --> 00:42:40,050
particular v10 is being told about all

00:42:37,560 --> 00:42:44,040
of the attempts out there then it needs

00:42:40,050 --> 00:42:48,330
to send two in in case of flood then it

00:42:44,040 --> 00:42:50,280
basically populates most of the time is

00:42:48,330 --> 00:42:55,650
self populating the multicast table

00:42:50,280 --> 00:42:57,630
which which can trigger a multicast

00:42:55,650 --> 00:43:05,250
replication each with a different

00:42:57,630 --> 00:43:08,400
unicast tunnel encapsulation so this is

00:43:05,250 --> 00:43:13,200
not so much related to linux kernel but

00:43:08,400 --> 00:43:16,230
since obvious is obviously be is kind of

00:43:13,200 --> 00:43:19,860
becoming a very standard interface in

00:43:16,230 --> 00:43:23,430
terms of provisioning the exam so here I

00:43:19,860 --> 00:43:27,630
have a slide to kind of showcase how we

00:43:23,430 --> 00:43:28,410
construct how we translate obviously

00:43:27,630 --> 00:43:31,920
because

00:43:28,410 --> 00:43:34,950
to Linux kernel contract so just briefly

00:43:31,920 --> 00:43:38,430
like for example locals which we map it

00:43:34,950 --> 00:43:42,450
to a big slam link with a bridge created

00:43:38,430 --> 00:43:45,660
and physical for physical switch tunnel

00:43:42,450 --> 00:43:50,070
IP is essentially the local IP address

00:43:45,660 --> 00:43:54,270
of that the extend link and logical

00:43:50,070 --> 00:43:57,900
finding will translate to a local bridge

00:43:54,270 --> 00:44:01,860
member port or port comma female being a

00:43:57,900 --> 00:44:03,150
member of that bridge and then the other

00:44:01,860 --> 00:44:07,590
things are like how the MAC addresses

00:44:03,150 --> 00:44:09,540
are represented like for example unicast

00:44:07,590 --> 00:44:13,500
remote MAC address with the physical

00:44:09,540 --> 00:44:18,420
located can be installed as a FDB entry

00:44:13,500 --> 00:44:21,660
with a remote V type IP the unknown case

00:44:18,420 --> 00:44:25,650
is the one that that that would trigger

00:44:21,660 --> 00:44:27,770
the bomb handling and for that we can

00:44:25,650 --> 00:44:32,010
use the weeks that default destination

00:44:27,770 --> 00:44:34,470
to do that and lastly the unique and

00:44:32,010 --> 00:44:37,340
Slocum at interest rate that TV with the

00:44:34,470 --> 00:44:41,010
physical okay they're essentially just

00:44:37,340 --> 00:44:43,640
normal local bridge of TB that points to

00:44:41,010 --> 00:44:43,640
a local interface

00:44:53,960 --> 00:44:58,350
how do you handle the case if there are

00:44:56,160 --> 00:45:00,570
multi P or the vni is encoded in a small

00:44:58,350 --> 00:45:02,610
table like you can have any number of

00:45:00,570 --> 00:45:07,110
combination you cannot represent that

00:45:02,610 --> 00:45:09,480
scalable with the expand devices how

00:45:07,110 --> 00:45:12,780
many can you repeat your question sorry

00:45:09,480 --> 00:45:15,750
I saw an obvious offers to a capability

00:45:12,780 --> 00:45:18,720
of encoding the remote the tunnel

00:45:15,750 --> 00:45:22,620
endpoint IP address and the vnr in a

00:45:18,720 --> 00:45:24,480
full table so you can have possibly

00:45:22,620 --> 00:45:28,290
millions of possible combinations of

00:45:24,480 --> 00:45:30,360
remote IP and V and I you know scalable

00:45:28,290 --> 00:45:33,030
or you cannot represent that with an end

00:45:30,360 --> 00:45:36,170
device structure in a scalable way you

00:45:33,030 --> 00:45:39,240
have any idea I could resolve that so

00:45:36,170 --> 00:45:42,750
basically in this model we need we

00:45:39,240 --> 00:45:47,940
require one net device per million item

00:45:42,750 --> 00:45:50,460
and so also the time the number of that

00:45:47,940 --> 00:45:58,850
is actually limited by how much the

00:45:50,460 --> 00:46:02,310
hardware can do efficiently so you can

00:45:58,850 --> 00:46:05,840
50 B in Linux you can have one the

00:46:02,310 --> 00:46:12,180
excellent port and multiple VN eyes and

00:46:05,840 --> 00:46:16,980
VTP anyone's aftb accepts for you to use

00:46:12,180 --> 00:46:18,690
a semi expired device net dev mark

00:46:16,980 --> 00:46:21,870
addresses I use this all the time that's

00:46:18,690 --> 00:46:27,390
however I don't know I think you would

00:46:21,870 --> 00:46:31,910
support dementia we possible all right

00:46:27,390 --> 00:46:35,490
so it's if you look at the FD b @ v 9

00:46:31,910 --> 00:46:41,100
there the x10 mac address

00:46:35,490 --> 00:46:43,470
Lada IPR display it works it works but

00:46:41,100 --> 00:46:47,540
in that part into a specific remote IP

00:46:43,470 --> 00:46:47,540
address of the town ID and if you have

00:46:50,000 --> 00:46:58,170
what is well we need one we expand

00:46:52,920 --> 00:46:59,730
device very mortality yeah that's what I

00:46:58,170 --> 00:47:01,680
thought as well until I was playing

00:46:59,730 --> 00:47:04,020
there is a wife the hell can I do I have

00:47:01,680 --> 00:47:10,710
to specify the IP address on the

00:47:04,020 --> 00:47:12,750
the IP addresses the Vita and what does

00:47:10,710 --> 00:47:13,260
anybody else know this each other so

00:47:12,750 --> 00:47:22,350
maybe

00:47:13,260 --> 00:47:25,140
toshiaki if played with excellent sorry

00:47:22,350 --> 00:47:28,460
so I was just wondering if somebody else

00:47:25,140 --> 00:47:28,460
is using the future they were I use it

00:47:28,580 --> 00:47:37,110
feels exactly the same way yeah hiding

00:47:32,940 --> 00:47:51,720
behind the same Vida which has comments

00:47:37,110 --> 00:47:53,310
or CD but a lot of this Tamika maybe so

00:47:51,720 --> 00:47:55,830
you need a necessary comment whatever

00:47:53,310 --> 00:47:57,930
works needed that device to represent

00:47:55,830 --> 00:48:00,750
Andy and I thought that every single we

00:47:57,930 --> 00:48:03,090
tap up there and definitely not in every

00:48:00,750 --> 00:48:07,190
single managers that's out there so the

00:48:03,090 --> 00:48:07,190
scale scale with the number of Vietnam

00:48:15,940 --> 00:48:19,140
any more questions

00:48:35,780 --> 00:48:43,320
this is the last light and it's an n3

00:48:39,030 --> 00:48:46,350
offloads it follows the same model where

00:48:43,320 --> 00:48:48,750
userspace stops - the kernel via RT net

00:48:46,350 --> 00:48:50,850
lane and in userspace the routes can

00:48:48,750 --> 00:48:54,540
static routes can come by I you know -

00:48:50,850 --> 00:48:57,300
or a network manager or a routing daemon

00:48:54,540 --> 00:49:00,000
like quark our bird and those are

00:48:57,300 --> 00:49:03,630
ejected into the tunnel table v table

00:49:00,000 --> 00:49:06,690
and the heart but those basically go to

00:49:03,630 --> 00:49:09,420
hardware using the same suite of API or

00:49:06,690 --> 00:49:11,910
a user space driver can actually listen

00:49:09,420 --> 00:49:22,410
to our ticket link browse notifications

00:49:11,910 --> 00:49:25,110
and program drugs in Hardware unresolved

00:49:22,410 --> 00:49:27,630
next hops they are initially pointed to

00:49:25,110 --> 00:49:30,710
CPU and the switchdriver can actually

00:49:27,630 --> 00:49:36,390
initiate the resolution by sending an R

00:49:30,710 --> 00:49:41,240
or an ipv6 ng message and refreshing of

00:49:36,390 --> 00:49:47,160
the D entries so most of the we do have

00:49:41,240 --> 00:49:48,690
we do listen to hip it's for mixed or

00:49:47,160 --> 00:49:50,990
increase in hardware and we try to

00:49:48,690 --> 00:49:56,100
refresh two million trees in the kernel

00:49:50,990 --> 00:49:58,770
by setting an art field and that's about

00:49:56,100 --> 00:50:00,600
it is not much on n three of those

00:49:58,770 --> 00:50:03,290
surrounding material takes care of

00:50:00,600 --> 00:50:06,860
things

00:50:03,290 --> 00:50:06,860
any questions

00:50:18,310 --> 00:50:29,390
so if you have a locally endpoint thing

00:50:23,780 --> 00:50:32,930
a BGP employ and you have something like

00:50:29,390 --> 00:50:35,270
this do you actually do our proxy in the

00:50:32,930 --> 00:50:38,180
switch for that bubble endpoint or do

00:50:35,270 --> 00:50:40,850
you expect the table in the kernel to be

00:50:38,180 --> 00:50:58,130
totally up to date with a switch ARP

00:50:40,850 --> 00:51:00,560
table yesterday the current

00:50:58,130 --> 00:51:02,000
implementation uses the kernels kernel

00:51:00,560 --> 00:51:04,610
is the art master all neighbor

00:51:02,000 --> 00:51:06,920
resolution is up to the kernel we clean

00:51:04,610 --> 00:51:09,200
everything off of packets that are sent

00:51:06,920 --> 00:51:11,150
into the CPU so that as a punch in is

00:51:09,200 --> 00:51:13,070
making the first packet unknowns are

00:51:11,150 --> 00:51:15,620
always pointing at the CPUs of the CPU

00:51:13,070 --> 00:51:22,580
will resolve our or NS or any or

00:51:15,620 --> 00:51:24,020
whatever scheme using the switch doesn't

00:51:22,580 --> 00:51:29,950
participate in the whole lot of

00:51:24,020 --> 00:51:29,950
conversation so Jason just let it go

00:51:46,030 --> 00:51:57,350
that's a switch driver saw the addition

00:51:48,260 --> 00:51:59,270
of a link for the but yet here what

00:51:57,350 --> 00:52:02,990
we're trying to see is v is in sync with

00:51:59,270 --> 00:52:06,800
the routing table in hardware so if you

00:52:02,990 --> 00:52:10,630
do an IP now show on the kernel browse

00:52:06,800 --> 00:52:10,630
the all the routes at this

00:52:14,150 --> 00:53:28,140
yes we have a switch here how do you

00:52:35,549 --> 00:53:37,650
deal with things we don't in the that's

00:53:28,140 --> 00:53:41,460
working produce so I mean obviously

00:53:37,650 --> 00:53:43,609
always have was consisted 100 has

00:53:41,460 --> 00:53:46,890
something maybe too big enough maybe not

00:53:43,609 --> 00:53:48,450
seems useful just fitted here is it if

00:53:46,890 --> 00:53:50,609
it's a cash maybe the colonel does

00:53:48,450 --> 00:53:52,309
something smart to iterate the cash is

00:53:50,609 --> 00:53:55,170
just the stuff that actually gets used

00:53:52,309 --> 00:53:57,029
but then you're always consistent right

00:53:55,170 --> 00:53:58,890
no other acceleration well finding her

00:53:57,029 --> 00:54:00,779
not without there is still the colonel

00:53:58,890 --> 00:54:03,779
as that thing the harbor Manor was the

00:54:00,779 --> 00:54:12,450
thing if he doesn't just punch I just

00:54:03,779 --> 00:54:16,619
sees worth three pumping is dangerous

00:54:12,450 --> 00:54:18,150
because you have a hierarchical Expo

00:54:16,619 --> 00:54:20,369
and the hardware might make a choice

00:54:18,150 --> 00:54:23,579
that's incorrect because there might be

00:54:20,369 --> 00:54:25,229
a and encapsulating entry above you that

00:54:23,579 --> 00:54:27,089
you never saw and you make their own

00:54:25,229 --> 00:54:28,680
choice and forwarded because you took

00:54:27,089 --> 00:54:31,709
the best match that was available for

00:54:28,680 --> 00:54:33,660
your context well doing a layered

00:54:31,709 --> 00:54:36,359
approach the way Thomas was talking

00:54:33,660 --> 00:54:38,789
about is much more pragmatic however I

00:54:36,359 --> 00:54:41,789
think there's clearly a very interesting

00:54:38,789 --> 00:54:43,319
goal to be had where you go and say I

00:54:41,789 --> 00:54:46,229
can build bigger than hardware

00:54:43,319 --> 00:54:47,369
capability table size and that's

00:54:46,229 --> 00:54:49,229
something worth looking into that's a

00:54:47,369 --> 00:54:51,329
lot of research out there multiple

00:54:49,229 --> 00:54:53,279
people trying it and people are trying

00:54:51,329 --> 00:54:55,019
it in the routing daemon because part of

00:54:53,279 --> 00:54:56,489
the problem is in a three if you

00:54:55,019 --> 00:54:58,410
advertise to the rest of the world that

00:54:56,489 --> 00:55:00,209
you can forward you better be able to

00:54:58,410 --> 00:55:04,650
forward because otherwise you're

00:55:00,209 --> 00:55:06,989
blackening so it's an open question at

00:55:04,650 --> 00:55:21,979
this point we start doing things that we

00:55:06,989 --> 00:55:21,979
can actually deliver my question policy

00:56:32,500 --> 00:56:36,020
if you would like to have several

00:56:34,490 --> 00:56:39,530
different ers then you would have to

00:56:36,020 --> 00:56:50,450
have some epi which says what type of

00:56:39,530 --> 00:56:52,580
protein to be I need to understand which

00:56:50,450 --> 00:56:55,250
entry to offload through which port

00:56:52,580 --> 00:56:59,630
cetera so is there already an API for

00:56:55,250 --> 00:57:01,940
that so Lenox user the thing we are

00:56:59,630 --> 00:57:03,500
looking at is IP rules and you can

00:57:01,940 --> 00:57:05,930
specify which is also the answer to the

00:57:03,500 --> 00:57:09,260
policy concerning question you basically

00:57:05,930 --> 00:57:11,810
say bind an interface I have four oh I

00:57:09,260 --> 00:57:14,270
have a particular table and that's what

00:57:11,810 --> 00:57:16,210
they look up policy becomes and that's

00:57:14,270 --> 00:57:17,990
how you will do that it's not complete

00:57:16,210 --> 00:57:20,030
we

00:57:17,990 --> 00:57:21,680
discussion yesterday on things that are

00:57:20,030 --> 00:57:24,619
needed to make it into a complete

00:57:21,680 --> 00:57:28,400
solution and we work on some patches

00:57:24,619 --> 00:57:31,869
father just time warning we have another

00:57:28,400 --> 00:57:31,869
time in at 11:00

00:57:32,210 --> 00:57:41,510
you have probably less attendance yeah

00:57:35,090 --> 00:57:44,630
so I'm logging into this switch set up

00:57:41,510 --> 00:57:47,360
here it's just a single switch so we'll

00:57:44,630 --> 00:57:50,900
just show that whatever commands

00:57:47,360 --> 00:57:52,700
toshiaki used on the host we can use the

00:57:50,900 --> 00:57:55,690
same commands to actually create a

00:57:52,700 --> 00:58:02,600
bridge and add force to it before that

00:57:55,690 --> 00:58:07,310
let me just I feel like show showing 50s

00:58:02,600 --> 00:58:09,290
WP 52 so 52 ports is at any codes each

00:58:07,310 --> 00:58:12,800
zero is the management report on the

00:58:09,290 --> 00:58:14,660
switch yeah these are regular internet

00:58:12,800 --> 00:58:19,990
devices on this particular switch they

00:58:14,660 --> 00:58:19,990
are actually tap devices and

00:58:36,539 --> 00:58:45,299
to create a bridge using IP link I will

00:58:40,499 --> 00:58:51,380
accept death is to be one in master BR 0

00:58:45,299 --> 00:58:51,380
this is how one sorry

00:59:15,170 --> 00:59:17,890
is that

00:59:19,050 --> 00:59:25,800
so actually have SPRC to shoot

00:59:26,660 --> 00:59:35,089
I'm feeling sent to death as W we do

00:59:30,200 --> 00:59:37,450
this is missing point George could you

00:59:35,089 --> 00:59:37,450
like

00:59:40,800 --> 00:59:48,320
you can see it's open if you do it is we

00:59:43,710 --> 00:59:48,320
need to want a switch and

01:00:07,370 --> 01:00:18,750
do you cannot bridge fbb entry using the

01:00:11,970 --> 01:00:20,010
same way so by while I'm doing this all

01:00:18,750 --> 01:00:22,490
of this is getting programmed in

01:00:20,010 --> 01:00:25,020
hardware the thing is the hardware

01:00:22,490 --> 01:00:27,840
tables I can't really show right now but

01:00:25,020 --> 01:00:30,180
the switch is going to be around and if

01:00:27,840 --> 01:00:32,340
anybody wants to take a closer look we

01:00:30,180 --> 01:00:36,710
can show actually we can also show

01:00:32,340 --> 01:00:41,730
routes being programmed and Hardware

01:00:36,710 --> 01:00:45,950
about it we actually have a be explained

01:00:41,730 --> 01:00:48,450
demo as well and then a set up for

01:00:45,950 --> 01:00:50,930
showing route of nodes as well if

01:00:48,450 --> 01:00:50,930
there's time

01:01:09,960 --> 01:01:16,930
well so sorry you have 45 minutes for

01:01:15,310 --> 01:01:18,910
everybody else here was going to the

01:01:16,930 --> 01:01:21,609
Tipsy talk is in New Brunswick if you go

01:01:18,910 --> 01:01:24,400
outside that we volunteers giving you

01:01:21,609 --> 01:01:42,040
directions on how to hit just but ten

01:01:24,400 --> 01:01:46,810
meters so I have a new tab in the middle

01:01:42,040 --> 01:01:54,430
right here and you can see that I have

01:01:46,810 --> 01:01:58,000
two bridges and one of them is having a

01:01:54,430 --> 01:02:01,480
piece land instance recent 100 and the

01:01:58,000 --> 01:02:06,330
other one is to be plan 200 and locally

01:02:01,480 --> 01:02:11,500
weeks than 100 map to the end 1000

01:02:06,330 --> 01:02:24,400
devices and the mean flame 200 is mapped

01:02:11,500 --> 01:02:28,859
to 90 mm so on this window it's it's

01:02:24,400 --> 01:02:34,060
basically a host hanging of a local port

01:02:28,859 --> 01:02:40,000
then on the right side is it's a VM on

01:02:34,060 --> 01:02:43,990
that same V slant instance and so you

01:02:40,000 --> 01:02:46,260
can see guests are living and of course

01:02:43,990 --> 01:02:46,260
it works

01:02:49,089 --> 01:02:52,089
French

01:03:03,410 --> 01:03:09,839
this is the local address that's being

01:03:06,450 --> 01:03:14,960
burned on that beam and $1,000 interface

01:03:09,839 --> 01:03:14,960
and is part of that bridge these land

01:03:18,890 --> 01:03:26,369
from here but basically there's another

01:03:21,839 --> 01:03:32,999
entry that represents this is the MAC

01:03:26,369 --> 01:03:35,970
address which is I think it's pointing

01:03:32,999 --> 01:03:42,089
to that we don't eat a pie so this is

01:03:35,970 --> 01:03:45,619
very simple he's like devil so I think

01:03:42,089 --> 01:03:45,619

YouTube URL: https://www.youtube.com/watch?v=xcGHqyPPk0s


