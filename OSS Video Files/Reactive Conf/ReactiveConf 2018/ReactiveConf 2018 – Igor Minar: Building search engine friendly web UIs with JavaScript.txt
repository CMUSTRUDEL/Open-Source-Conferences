Title: ReactiveConf 2018 â€“ Igor Minar: Building search engine friendly web UIs with JavaScript
Publication date: 2018-11-02
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
Building search engine friendly web UIs with JavaScript

The Web has a unique feature - it makes information accessible and discoverable by both humans and machines. Virtually everyone using the web relies on search engines to find information and get their questions answered. As we build richer and richer web UIs we need to ensure that they remain accessible to both humans and machines. In this talk, Igor covered real-world strategies and tips that make rich JavaScript web applications and the information they provide accessible to search engines.
Captions: 
	00:00:02,140 --> 00:00:08,610
[Music]

00:00:11,730 --> 00:00:16,000
my name is Igor Minar I'm a soft

00:00:14,440 --> 00:00:18,730
engineer at Google in Mountain View

00:00:16,000 --> 00:00:21,490
California I lead the angular project

00:00:18,730 --> 00:00:23,110
there and I have lots of

00:00:21,490 --> 00:00:25,240
responsibilities on this project and one

00:00:23,110 --> 00:00:28,600
of them as I consider the hobby is

00:00:25,240 --> 00:00:30,820
running angular io which is our website

00:00:28,600 --> 00:00:32,710
and what I thought would be interesting

00:00:30,820 --> 00:00:35,760
is to talk about search engine

00:00:32,710 --> 00:00:37,840
optimization optimizations and

00:00:35,760 --> 00:00:40,090
JavaScript and clients had rendered

00:00:37,840 --> 00:00:42,010
applications so even though I'm gonna

00:00:40,090 --> 00:00:44,620
mention angular and angular quite a bit

00:00:42,010 --> 00:00:46,600
today all of the information in this

00:00:44,620 --> 00:00:49,840
presentation are generally applicable to

00:00:46,600 --> 00:00:52,059
any JavaScript library or framework and

00:00:49,840 --> 00:00:53,559
I sure I'm gonna share lots of

00:00:52,059 --> 00:00:55,450
information with you so I already

00:00:53,559 --> 00:00:57,960
published the slides and in the slides

00:00:55,450 --> 00:01:00,040
you'll find links to code snippets and

00:00:57,960 --> 00:01:03,930
specifications and other informations

00:01:00,040 --> 00:01:06,579
some post-mortems and other fun stuff

00:01:03,930 --> 00:01:08,350
with that I already mentioned angular

00:01:06,579 --> 00:01:10,960
angular IO is a progressive web

00:01:08,350 --> 00:01:13,090
application built with angular it's a

00:01:10,960 --> 00:01:16,299
community hub application where we share

00:01:13,090 --> 00:01:18,280
information about angular share

00:01:16,299 --> 00:01:20,020
information about events in happening in

00:01:18,280 --> 00:01:22,540
the angular community but also share

00:01:20,020 --> 00:01:25,320
information about angle itself it's the

00:01:22,540 --> 00:01:28,360
main documentation aside for the project

00:01:25,320 --> 00:01:30,580
we use this project also as a way to

00:01:28,360 --> 00:01:33,250
experiment with angular itself before we

00:01:30,580 --> 00:01:35,950
roll any kind of bigger improvements to

00:01:33,250 --> 00:01:37,990
Google or the external community and one

00:01:35,950 --> 00:01:41,560
of these experiments that we tried on

00:01:37,990 --> 00:01:45,479
the angular website is this challenge

00:01:41,560 --> 00:01:48,790
can we build a client-side rendered

00:01:45,479 --> 00:01:51,220
progressive web application and make it

00:01:48,790 --> 00:01:54,070
high traffic site and reachable by

00:01:51,220 --> 00:01:57,070
search engines and I'm happy to say that

00:01:54,070 --> 00:01:59,829
today about 1.4 million unique visitors

00:01:57,070 --> 00:02:01,420
come to angular IO monthly and most of

00:01:59,829 --> 00:02:03,310
them comes through search so this is

00:02:01,420 --> 00:02:06,460
definitely possible and I'm gonna show

00:02:03,310 --> 00:02:08,229
you how but before I go any further I

00:02:06,460 --> 00:02:09,939
wanna give you a little disclaimer even

00:02:08,229 --> 00:02:11,739
though I work at Google I'm not

00:02:09,939 --> 00:02:13,510
affiliated with the search team and I

00:02:11,739 --> 00:02:14,770
don't represent them all of the

00:02:13,510 --> 00:02:17,530
information that I'm gonna share

00:02:14,770 --> 00:02:20,050
with you was gathered through

00:02:17,530 --> 00:02:22,090
experiments and building angular IO as a

00:02:20,050 --> 00:02:23,650
developer and also reading public

00:02:22,090 --> 00:02:27,190
information so I'm not gonna spill any

00:02:23,650 --> 00:02:28,960
beans that were secret in the past you

00:02:27,190 --> 00:02:31,060
might be wondering why the search

00:02:28,960 --> 00:02:34,660
friendliness matter and it really comes

00:02:31,060 --> 00:02:36,940
down to making the application and the

00:02:34,660 --> 00:02:39,940
information this application provides as

00:02:36,940 --> 00:02:43,450
widely accessible to users around the

00:02:39,940 --> 00:02:46,060
world there is around four billion

00:02:43,450 --> 00:02:48,310
people around the world that come and

00:02:46,060 --> 00:02:50,770
access Internet and when they come

00:02:48,310 --> 00:02:52,720
online they usually come for two reasons

00:02:50,770 --> 00:02:55,090
they either need to get something done

00:02:52,720 --> 00:02:58,780
or they are looking for some information

00:02:55,090 --> 00:03:01,750
and your application is often the source

00:02:58,780 --> 00:03:04,600
of this information users use search

00:03:01,750 --> 00:03:06,940
engines to ask queries and get relevant

00:03:04,600 --> 00:03:10,840
results and search engines then send

00:03:06,940 --> 00:03:12,250
traffic to to your two websites you

00:03:10,840 --> 00:03:12,850
might be wondering how those search

00:03:12,250 --> 00:03:14,980
engines

00:03:12,850 --> 00:03:17,860
create these results how they index the

00:03:14,980 --> 00:03:20,230
web and answer to that is both simple

00:03:17,860 --> 00:03:23,440
and complicated and I'm actually not the

00:03:20,230 --> 00:03:25,840
expert on this but I know an expert John

00:03:23,440 --> 00:03:28,780
Mueller is a search analyst at Google

00:03:25,840 --> 00:03:30,520
and he gave an excellent presentation at

00:03:28,780 --> 00:03:33,490
angular connect two years ago where he

00:03:30,520 --> 00:03:35,709
explained how all of this stuff works

00:03:33,490 --> 00:03:36,910
and I encourage you to check it out if

00:03:35,709 --> 00:03:39,910
you're interested in this particular

00:03:36,910 --> 00:03:42,070
topic this year he actually updated some

00:03:39,910 --> 00:03:43,540
of the information at Google i/o so

00:03:42,070 --> 00:03:45,310
there is additional talk that I would

00:03:43,540 --> 00:03:50,050
also recommend if you're interested in

00:03:45,310 --> 00:03:52,090
this topic in general you might be

00:03:50,050 --> 00:03:55,420
thinking okay what should I do

00:03:52,090 --> 00:03:57,250
how do i how can I be successful when I

00:03:55,420 --> 00:04:00,730
build my application and want to make it

00:03:57,250 --> 00:04:02,770
accessible the search our companies will

00:04:00,730 --> 00:04:05,830
generally tell you well just tree the

00:04:02,770 --> 00:04:08,200
crawler as a regular user start by

00:04:05,830 --> 00:04:11,170
providing valuable content and create

00:04:08,200 --> 00:04:13,780
great user experience one thing I would

00:04:11,170 --> 00:04:15,610
add to that is also make your

00:04:13,780 --> 00:04:18,250
application accessible to screen readers

00:04:15,610 --> 00:04:21,070
and the reason for this is because

00:04:18,250 --> 00:04:24,160
crawlers and screen readers often share

00:04:21,070 --> 00:04:26,080
similar constraints so if you invest

00:04:24,160 --> 00:04:28,430
into making the application accessible

00:04:26,080 --> 00:04:30,650
to screen readers you will actually get

00:04:28,430 --> 00:04:34,310
double the reward because you will be

00:04:30,650 --> 00:04:37,009
able to access users that have the needs

00:04:34,310 --> 00:04:38,570
of using screen reader but also search

00:04:37,009 --> 00:04:40,090
engines will understand the application

00:04:38,570 --> 00:04:42,949
better

00:04:40,090 --> 00:04:44,960
there are five key takeaways that we

00:04:42,949 --> 00:04:46,220
learned from building angular io and

00:04:44,960 --> 00:04:50,990
these are the ones that I'm going to

00:04:46,220 --> 00:04:53,630
share with you number one is think URLs

00:04:50,990 --> 00:04:56,660
even though we are building rich

00:04:53,630 --> 00:04:59,000
applications we should be thinking in

00:04:56,660 --> 00:05:01,400
terms of documents especially if we are

00:04:59,000 --> 00:05:03,280
building applications that provide very

00:05:01,400 --> 00:05:06,470
valuable information this information

00:05:03,280 --> 00:05:09,979
needs to be addressed and the address to

00:05:06,470 --> 00:05:12,229
this document is a URL so whenever you

00:05:09,979 --> 00:05:15,560
start working on a big project that

00:05:12,229 --> 00:05:17,539
provides a lot of useful information sit

00:05:15,560 --> 00:05:20,330
down and think about the information we

00:05:17,539 --> 00:05:22,220
are Keeney application and design your

00:05:20,330 --> 00:05:25,729
URL schema so you don't need to change

00:05:22,220 --> 00:05:27,560
it later because any kind of changes are

00:05:25,729 --> 00:05:31,789
actually breaking change to your public

00:05:27,560 --> 00:05:33,740
API your URLs are public API of the

00:05:31,789 --> 00:05:36,139
application and a contract between the

00:05:33,740 --> 00:05:38,030
application and the rest of the web you

00:05:36,139 --> 00:05:41,510
have several ways how you can control

00:05:38,030 --> 00:05:44,780
this public API surface the first one is

00:05:41,510 --> 00:05:49,960
links which you should express through

00:05:44,780 --> 00:05:53,120
anchor tags a href you can use links to

00:05:49,960 --> 00:05:54,979
help users discover content but also

00:05:53,120 --> 00:05:57,710
Express relationships between different

00:05:54,979 --> 00:06:00,680
screens on the application one thing you

00:05:57,710 --> 00:06:03,740
should avoid is doing important

00:06:00,680 --> 00:06:06,620
navigation from JavaScript using on

00:06:03,740 --> 00:06:09,139
click or other event handlers especially

00:06:06,620 --> 00:06:12,169
if you don't have a matching anchor tags

00:06:09,139 --> 00:06:14,360
in your application this makes the

00:06:12,169 --> 00:06:17,210
application hard to access to screen

00:06:14,360 --> 00:06:19,610
readers but also the crawlers will not

00:06:17,210 --> 00:06:21,199
understand the graph and in dependencies

00:06:19,610 --> 00:06:23,509
between screen on screens on the

00:06:21,199 --> 00:06:27,889
application the next tool at your

00:06:23,509 --> 00:06:30,470
disposal is robots.txt robots.txt allows

00:06:27,889 --> 00:06:33,169
you to create a black list of URLs and

00:06:30,470 --> 00:06:37,010
your all patterns that you don't want

00:06:33,169 --> 00:06:39,349
the crawler to see an index use this to

00:06:37,010 --> 00:06:41,920
exclude any kind of testing or staging

00:06:39,349 --> 00:06:44,580
or archival size that you don't want

00:06:41,920 --> 00:06:47,020
to be displayed in the search results

00:06:44,580 --> 00:06:50,740
use this feature very carefully it's

00:06:47,020 --> 00:06:53,740
very easy to drop out of in the search

00:06:50,740 --> 00:06:55,810
index if you miss configure robots.txt

00:06:53,740 --> 00:06:58,000
and one of the common mistakes that

00:06:55,810 --> 00:07:00,970
developers make is that they block

00:06:58,000 --> 00:07:03,030
JavaScript images or other assets that

00:07:00,970 --> 00:07:06,040
are necessary for rendering on the

00:07:03,030 --> 00:07:09,150
document the URL that you want to be

00:07:06,040 --> 00:07:12,550
indexed make sure these are not blocked

00:07:09,150 --> 00:07:15,610
the last tool at your disposal is

00:07:12,550 --> 00:07:19,000
sitemap dot XML sitemap XML provide

00:07:15,610 --> 00:07:22,300
guidance to crawlers as to what is the

00:07:19,000 --> 00:07:24,970
pool of interesting URLs that the

00:07:22,300 --> 00:07:26,920
crawlers should be interested in this

00:07:24,970 --> 00:07:30,190
doesn't guarantee that all these URLs

00:07:26,920 --> 00:07:32,320
will be indexed but it's a good hint and

00:07:30,190 --> 00:07:34,150
a very strong signal to the crawler at

00:07:32,320 --> 00:07:37,210
minimum I suggest that all of your

00:07:34,150 --> 00:07:39,730
static URLs and any static routes that

00:07:37,210 --> 00:07:43,320
are not parameterised are present in the

00:07:39,730 --> 00:07:46,620
sitemap XML and again as I mentioned

00:07:43,320 --> 00:07:49,270
URLs are public API don't break it

00:07:46,620 --> 00:07:50,830
deprecated them through redirects one of

00:07:49,270 --> 00:07:53,080
the things we learned is that not only

00:07:50,830 --> 00:07:56,290
server side but also client side

00:07:53,080 --> 00:07:59,950
redirects are treated just fine and the

00:07:56,290 --> 00:08:02,010
crawlers understand that you moved some

00:07:59,950 --> 00:08:04,810
content from one place to another and

00:08:02,010 --> 00:08:07,060
once you you realize and once you

00:08:04,810 --> 00:08:09,640
analyze your traffic in and find out

00:08:07,060 --> 00:08:11,200
that particular URL or URLs and no

00:08:09,640 --> 00:08:13,150
longer significant entry points to

00:08:11,200 --> 00:08:17,740
application that's when you can remove

00:08:13,150 --> 00:08:20,620
them number two is about speaking your

00:08:17,740 --> 00:08:22,680
SEO strategy often people think that

00:08:20,620 --> 00:08:25,210
this comes down to should I do

00:08:22,680 --> 00:08:27,370
server-side rendering or should I not do

00:08:25,210 --> 00:08:30,010
server-side rendering the answer is

00:08:27,370 --> 00:08:32,500
actually quite more nuanced and it comes

00:08:30,010 --> 00:08:35,320
down to a trade-off between how much you

00:08:32,500 --> 00:08:38,170
want to invest in terms of effort time

00:08:35,320 --> 00:08:42,010
and money and what is the reward you're

00:08:38,170 --> 00:08:45,070
looking for in terms of the coverage of

00:08:42,010 --> 00:08:46,900
your site and the ranking many

00:08:45,070 --> 00:08:49,450
developers don't do anything and they

00:08:46,900 --> 00:08:51,100
just hope that things will be okay well

00:08:49,450 --> 00:08:52,810
my experience hope is not a good

00:08:51,100 --> 00:08:53,650
strategy and it's not something that I

00:08:52,810 --> 00:08:56,100
would recommend

00:08:53,650 --> 00:08:57,760
the next thing you can do if you

00:08:56,100 --> 00:09:00,130
resource-constrained

00:08:57,760 --> 00:09:02,020
or if you have production environmental

00:09:00,130 --> 00:09:04,570
limitations where you can't run certain

00:09:02,020 --> 00:09:07,450
certain servers in production you can

00:09:04,570 --> 00:09:09,220
rely on client-side client-side SEO

00:09:07,450 --> 00:09:12,220
client-side rendering this is will be

00:09:09,220 --> 00:09:15,490
proven with angular IO the results are

00:09:12,220 --> 00:09:17,650
very good angular is highly ranked and

00:09:15,490 --> 00:09:18,940
is doing really well but we know that

00:09:17,650 --> 00:09:20,589
there are some limitations and I'm going

00:09:18,940 --> 00:09:21,010
to talk about them seven but in a little

00:09:20,589 --> 00:09:24,730
bit

00:09:21,010 --> 00:09:27,279
if search ranking and coverage is very

00:09:24,730 --> 00:09:28,300
important to application then I highly

00:09:27,279 --> 00:09:30,220
recommend that you look at the

00:09:28,300 --> 00:09:33,010
server-side rendering and server-side

00:09:30,220 --> 00:09:34,510
optimizations this will require more

00:09:33,010 --> 00:09:36,400
effort and more expertise more

00:09:34,510 --> 00:09:37,540
maintenance but in the long run

00:09:36,400 --> 00:09:40,779
it might be worth it for your

00:09:37,540 --> 00:09:43,900
application if search accessibility is

00:09:40,779 --> 00:09:45,400
important to your case but that's not

00:09:43,900 --> 00:09:47,200
where it ends there are so many other

00:09:45,400 --> 00:09:49,240
things that you can do when it comes to

00:09:47,200 --> 00:09:51,520
providing information about structured

00:09:49,240 --> 00:09:54,640
data and additional metadata that can

00:09:51,520 --> 00:09:56,890
help search engines understand it works

00:09:54,640 --> 00:09:58,779
out better and depending on a use case

00:09:56,890 --> 00:10:01,300
you this these are the things that you

00:09:58,779 --> 00:10:05,709
might want to investigate and implement

00:10:01,300 --> 00:10:07,839
any application additionally one thing

00:10:05,709 --> 00:10:11,200
that you should consider when deciding

00:10:07,839 --> 00:10:13,300
on a general strategy is your users your

00:10:11,200 --> 00:10:15,190
users use different crawler and

00:10:13,300 --> 00:10:17,830
different search engines to access the

00:10:15,190 --> 00:10:19,420
information and different search engines

00:10:17,830 --> 00:10:21,910
have different capabilities even though

00:10:19,420 --> 00:10:23,500
in general they work in the same way so

00:10:21,910 --> 00:10:26,589
in our experience one of the things we

00:10:23,500 --> 00:10:29,490
found was that angular IO that relies on

00:10:26,589 --> 00:10:32,350
client-side rendering only is

00:10:29,490 --> 00:10:35,620
represented pretty well on Google and

00:10:32,350 --> 00:10:37,450
Google and asked these are the two

00:10:35,620 --> 00:10:39,580
crawlers that we found that understand

00:10:37,450 --> 00:10:42,940
JavaScript pretty well unfortunately

00:10:39,580 --> 00:10:44,500
there are other crawlers that don't do

00:10:42,940 --> 00:10:46,480
so well and this is all now so you know

00:10:44,500 --> 00:10:48,160
we picked this strategy and we are

00:10:46,480 --> 00:10:50,740
missing out on reaching certain users

00:10:48,160 --> 00:10:53,320
that if we want to reach we probably

00:10:50,740 --> 00:10:56,080
need to rethink of strategy so this is a

00:10:53,320 --> 00:10:59,190
trade of that you need to consider when

00:10:56,080 --> 00:11:03,640
deciding on how to approach the solution

00:10:59,190 --> 00:11:06,339
number three is tools there are

00:11:03,640 --> 00:11:07,240
different tools that can help you debug

00:11:06,339 --> 00:11:08,889
infamy

00:11:07,240 --> 00:11:10,629
debug problems and understand what is

00:11:08,889 --> 00:11:14,079
happening I'm gonna share just three

00:11:10,629 --> 00:11:16,509
with you three that we heavily use there

00:11:14,079 --> 00:11:17,980
are others and you might find the others

00:11:16,509 --> 00:11:18,819
more useful in in your particular

00:11:17,980 --> 00:11:21,249
situation

00:11:18,819 --> 00:11:22,569
Google Analytics is something that

00:11:21,249 --> 00:11:26,230
probably most of you are familiar with

00:11:22,569 --> 00:11:28,509
we use it to just understand our users

00:11:26,230 --> 00:11:31,119
in general terms understand the trends

00:11:28,509 --> 00:11:32,889
understand the traffic things like are

00:11:31,119 --> 00:11:35,800
we growing are we not growing our

00:11:32,889 --> 00:11:38,490
experiments working can be really well

00:11:35,800 --> 00:11:41,800
represented in Google Analytics

00:11:38,490 --> 00:11:44,559
additionally Google Analytics also very

00:11:41,800 --> 00:11:47,199
useful tool to understand where the

00:11:44,559 --> 00:11:49,509
traffic is coming from so for example in

00:11:47,199 --> 00:11:53,079
the case of angular I oh I was surprised

00:11:49,509 --> 00:11:55,389
that almost 78% of our traffic comes

00:11:53,079 --> 00:11:57,639
from search so search is a very

00:11:55,389 --> 00:12:00,459
significant source of traffic for our

00:11:57,639 --> 00:12:02,589
site and if we care about a user is we

00:12:00,459 --> 00:12:05,439
need to make sure that we are both

00:12:02,589 --> 00:12:07,600
represented in the search results once

00:12:05,439 --> 00:12:09,699
you know that search is an important

00:12:07,600 --> 00:12:12,970
traffic source for you there are other

00:12:09,699 --> 00:12:14,319
tools that help you understand how your

00:12:12,970 --> 00:12:16,779
site is represented in the search

00:12:14,319 --> 00:12:19,540
results search console is one of them

00:12:16,779 --> 00:12:21,459
this is a this is a product that comes

00:12:19,540 --> 00:12:23,679
from the search team

00:12:21,459 --> 00:12:25,990
it has different information that you

00:12:23,679 --> 00:12:29,049
can see about your particular site one

00:12:25,990 --> 00:12:30,389
of them is performance how are your URLs

00:12:29,049 --> 00:12:32,799
the URLs belonging to your site

00:12:30,389 --> 00:12:34,209
represented in the search results the

00:12:32,799 --> 00:12:36,100
impressions and what is the

00:12:34,209 --> 00:12:39,040
click-through rate using a tool like

00:12:36,100 --> 00:12:40,569
this you can see anomalies like for

00:12:39,040 --> 00:12:43,240
example this one where we ran an

00:12:40,569 --> 00:12:44,920
experiment that went terribly wrong and

00:12:43,240 --> 00:12:48,490
we actually dropped out of the ranking

00:12:44,920 --> 00:12:52,209
and I had to course-correct and get back

00:12:48,490 --> 00:12:53,399
on track this tool gives you that kind

00:12:52,209 --> 00:12:55,660
of visibility

00:12:53,399 --> 00:12:58,869
additionally you might be interested in

00:12:55,660 --> 00:13:03,639
knowing how much of your side is covered

00:12:58,869 --> 00:13:06,160
by the search index how is your how is

00:13:03,639 --> 00:13:07,809
your site crawled by the crawler the

00:13:06,160 --> 00:13:10,779
coverage report gives you information

00:13:07,809 --> 00:13:12,790
about all the URLs that are processed

00:13:10,779 --> 00:13:15,639
and successfully indexed by the crawler

00:13:12,790 --> 00:13:17,210
in addition you also see URLs that are

00:13:15,639 --> 00:13:21,080
problematic by the crawler

00:13:17,210 --> 00:13:22,520
and general summary of these once you

00:13:21,080 --> 00:13:24,800
want to debug these particular issues

00:13:22,520 --> 00:13:27,050
there is a third tool that I find

00:13:24,800 --> 00:13:29,530
extremely helpful and not many people

00:13:27,050 --> 00:13:32,660
know about this it's a tool called

00:13:29,530 --> 00:13:36,290
mobile-friendly test originally the tool

00:13:32,660 --> 00:13:39,410
was built to help developers make their

00:13:36,290 --> 00:13:41,750
applications mobile-friendly as the

00:13:39,410 --> 00:13:43,880
search engines and users in general are

00:13:41,750 --> 00:13:46,400
moving towards mobile this is a tool

00:13:43,880 --> 00:13:49,010
that helps you diagnose mobile specific

00:13:46,400 --> 00:13:51,200
issues with your web application in

00:13:49,010 --> 00:13:53,660
addition to that however I also find it

00:13:51,200 --> 00:13:56,810
useful to understand how the search

00:13:53,660 --> 00:13:58,430
engine sees my web application because

00:13:56,810 --> 00:14:01,760
the same infrastructure that is used by

00:13:58,430 --> 00:14:03,920
the crawler is also used by this tool so

00:14:01,760 --> 00:14:06,140
you get to see how is the application

00:14:03,920 --> 00:14:08,330
rendered by the crawler but more

00:14:06,140 --> 00:14:12,290
importantly you also get to see the

00:14:08,330 --> 00:14:14,870
snapshot of the Dom after running all

00:14:12,290 --> 00:14:17,230
the JavaScript and this is very helpful

00:14:14,870 --> 00:14:19,910
when you are debugging protocol issues

00:14:17,230 --> 00:14:22,550
additionally this tool also highlights

00:14:19,910 --> 00:14:24,710
information about accessibility of any

00:14:22,550 --> 00:14:26,750
project to the resources that might be

00:14:24,710 --> 00:14:29,090
blocked by robots.txt or inaccessible

00:14:26,750 --> 00:14:31,520
for other reason and the thing that I'm

00:14:29,090 --> 00:14:33,710
most excited about is that finally we

00:14:31,520 --> 00:14:36,410
get to see any kind of JavaScript errors

00:14:33,710 --> 00:14:38,420
that happened within the crawler this is

00:14:36,410 --> 00:14:40,630
information that was previously very

00:14:38,420 --> 00:14:43,670
hard to obtain and only with this tool

00:14:40,630 --> 00:14:46,130
this information is easily accessible

00:14:43,670 --> 00:14:49,940
and allows you to debug your application

00:14:46,130 --> 00:14:52,460
very quickly once you have all your

00:14:49,940 --> 00:14:55,400
tools in place there are a few things

00:14:52,460 --> 00:14:58,910
you need to know about client-side

00:14:55,400 --> 00:15:01,810
specific use cases so how to be

00:14:58,910 --> 00:15:05,200
successful in the client-side world

00:15:01,810 --> 00:15:08,060
the search team recently published

00:15:05,200 --> 00:15:12,110
article in which they actually disclosed

00:15:08,060 --> 00:15:13,640
how this web applications are being

00:15:12,110 --> 00:15:16,880
rendered and for the first time they

00:15:13,640 --> 00:15:20,060
said we're actually using render based

00:15:16,880 --> 00:15:22,610
on the Chrome version 41 previously we

00:15:20,060 --> 00:15:24,680
didn't know it was suppose the rendering

00:15:22,610 --> 00:15:26,570
engine used now this is great because

00:15:24,680 --> 00:15:29,320
now we know what is the target that we

00:15:26,570 --> 00:15:33,070
are trying to make work

00:15:29,320 --> 00:15:35,740
but unfortunately from 41 is three years

00:15:33,070 --> 00:15:38,920
old it's a browser from 2015 that no

00:15:35,740 --> 00:15:40,449
other users out there used today so if

00:15:38,920 --> 00:15:41,980
you are used to just all the

00:15:40,449 --> 00:15:44,320
capabilities that chrome have today

00:15:41,980 --> 00:15:46,660
you'll be yesterday you'll be surprised

00:15:44,320 --> 00:15:50,019
that some of them are not available in

00:15:46,660 --> 00:15:52,600
this browser specifically some of the

00:15:50,019 --> 00:15:55,089
new HTML feature editions are missing

00:15:52,600 --> 00:15:57,850
and the browser has no support for es

00:15:55,089 --> 00:15:59,920
2015 so if you want to be compatible you

00:15:57,850 --> 00:16:02,709
have to download all your code 2 vs 5

00:15:59,920 --> 00:16:04,810
and some of the api's were explicitly

00:16:02,709 --> 00:16:07,660
disabled by the search team these are

00:16:04,810 --> 00:16:10,899
api is like the WebSockets web workers

00:16:07,660 --> 00:16:13,630
web GL and additionally one thing to

00:16:10,899 --> 00:16:15,910
know about how this the crawling is done

00:16:13,630 --> 00:16:20,829
it's done in a very stateless way where

00:16:15,910 --> 00:16:23,319
each URL is navigated to rendered and

00:16:20,829 --> 00:16:26,019
then the DOM is snapshotted and indexed

00:16:23,319 --> 00:16:27,819
and once that happens all the results

00:16:26,019 --> 00:16:30,370
are thrown away a new navigation is done

00:16:27,819 --> 00:16:31,990
full navigation to the next URL so you

00:16:30,370 --> 00:16:37,000
don't have any state preserve between

00:16:31,990 --> 00:16:39,160
the navigations with this if you want

00:16:37,000 --> 00:16:40,680
your application to be compatible there

00:16:39,160 --> 00:16:42,970
are three things you should consider

00:16:40,680 --> 00:16:45,370
first one is providing the right

00:16:42,970 --> 00:16:47,980
polyfill because this is after all a

00:16:45,370 --> 00:16:49,839
legacy browser you should feature detect

00:16:47,980 --> 00:16:52,360
because I expected the version will

00:16:49,839 --> 00:16:54,010
change in the future and you should

00:16:52,360 --> 00:16:55,930
conditionally load this polyfill so that

00:16:54,010 --> 00:16:58,540
your users don't pay the penalty if

00:16:55,930 --> 00:17:01,300
they're using every game browser the way

00:16:58,540 --> 00:17:03,819
we do this on angular is we actually

00:17:01,300 --> 00:17:07,299
provide the same polyfills that we built

00:17:03,819 --> 00:17:10,329
for IE browser and we conditionally load

00:17:07,299 --> 00:17:13,510
them using the node no module attribute

00:17:10,329 --> 00:17:15,370
this does both feature detection and

00:17:13,510 --> 00:17:18,579
conditional loading it's very convenient

00:17:15,370 --> 00:17:21,490
way to provide the polyfill the next

00:17:18,579 --> 00:17:23,439
thing to keep in mind is how to do error

00:17:21,490 --> 00:17:25,689
handling and we actually learned this in

00:17:23,439 --> 00:17:28,299
the hard way back in the December of

00:17:25,689 --> 00:17:30,850
last year a trap traffic dropped

00:17:28,299 --> 00:17:32,799
significantly and for some time we

00:17:30,850 --> 00:17:34,540
didn't know why this was happening or

00:17:32,799 --> 00:17:36,190
that it was happening at all because the

00:17:34,540 --> 00:17:39,790
site kept on working all the tests were

00:17:36,190 --> 00:17:41,510
passing and only through user reports we

00:17:39,790 --> 00:17:44,360
learned that they no longer can find

00:17:41,510 --> 00:17:46,550
and angular io in the search results we

00:17:44,360 --> 00:17:50,060
investigated this and actually included

00:17:46,550 --> 00:17:52,700
a issue issue linked in in this slide

00:17:50,060 --> 00:17:55,460
that you can review later with the fall

00:17:52,700 --> 00:17:57,680
investigation and post-modern and also

00:17:55,460 --> 00:17:59,600
the eventual fix but what it came down

00:17:57,680 --> 00:18:02,360
to is if you are relying on the

00:17:59,600 --> 00:18:05,150
client-side rendering your server your

00:18:02,360 --> 00:18:08,120
static server is actually sending an

00:18:05,150 --> 00:18:11,060
empty document that only contains

00:18:08,120 --> 00:18:14,420
stricter script tags and it's serving

00:18:11,060 --> 00:18:17,180
this document with HTTP 200 it's only

00:18:14,420 --> 00:18:19,430
the script once they run that they add

00:18:17,180 --> 00:18:21,350
content to this document and this is the

00:18:19,430 --> 00:18:24,290
content that you want the crawler to see

00:18:21,350 --> 00:18:26,390
if however there is an exception thrown

00:18:24,290 --> 00:18:28,700
as the application is being loaded in

00:18:26,390 --> 00:18:31,010
bootstrap nothing will be added to the

00:18:28,700 --> 00:18:33,770
document and all that the crawler will

00:18:31,010 --> 00:18:36,170
see is an empty document and a

00:18:33,770 --> 00:18:38,210
javascript error javascript errors are

00:18:36,170 --> 00:18:40,010
so common on the web that the crawler

00:18:38,210 --> 00:18:43,340
doesn't consider them a significant

00:18:40,010 --> 00:18:45,380
signal and it will rely on the HTTP 200

00:18:43,340 --> 00:18:48,100
as a signal that everything went well

00:18:45,380 --> 00:18:51,140
this happened to us and even though we

00:18:48,100 --> 00:18:53,960
remained in the in the index and we had

00:18:51,140 --> 00:18:55,910
a full coverage of her site all of the

00:18:53,960 --> 00:18:57,800
URLs were empty and the ranking

00:18:55,910 --> 00:18:59,510
algorithm thought that we were just

00:18:57,800 --> 00:19:03,170
playing some jokes or something and

00:18:59,510 --> 00:19:06,140
dropped us out of the page results so

00:19:03,170 --> 00:19:09,200
this is why no traffic was coming once

00:19:06,140 --> 00:19:10,670
we knew this it was very easy to fix it

00:19:09,200 --> 00:19:12,620
we fixed the original issue that was

00:19:10,670 --> 00:19:15,320
throwing the exception but we also

00:19:12,620 --> 00:19:17,210
learned that HTTP status codes is not

00:19:15,320 --> 00:19:19,370
something that is available to us in the

00:19:17,210 --> 00:19:22,400
JavaScript world and JavaScript errors

00:19:19,370 --> 00:19:24,020
are not considered as strongly as HTTP

00:19:22,400 --> 00:19:27,500
status codes and it's not something that

00:19:24,020 --> 00:19:29,600
we can use also signal to the crawler we

00:19:27,500 --> 00:19:33,800
actually found a different way to deal

00:19:29,600 --> 00:19:38,060
with this and the way we use is using

00:19:33,800 --> 00:19:40,520
meta tags so what we do is when the

00:19:38,060 --> 00:19:43,190
application is bootstrapping we actually

00:19:40,520 --> 00:19:47,410
execute a very small snippet of code

00:19:43,190 --> 00:19:50,060
that adds meta tag with robots no index

00:19:47,410 --> 00:19:52,340
to a document this is the first script

00:19:50,060 --> 00:19:54,600
that runs and tells the crawler hey this

00:19:52,340 --> 00:19:57,870
page is not ready to be

00:19:54,600 --> 00:19:59,549
indexed yet after application is fully

00:19:57,870 --> 00:20:02,880
bootstrapped we removed this meta tag

00:19:59,549 --> 00:20:04,980
and then the crawler sees the document

00:20:02,880 --> 00:20:08,970
the way we wanted to see if any error

00:20:04,980 --> 00:20:11,429
error happens in between the the time

00:20:08,970 --> 00:20:14,309
when the tag is added and when the page

00:20:11,429 --> 00:20:17,429
is done rendering the meta tag remains

00:20:14,309 --> 00:20:19,679
in the document and the crawler will

00:20:17,429 --> 00:20:20,549
then see you know this document there's

00:20:19,679 --> 00:20:22,350
something wrong with it

00:20:20,549 --> 00:20:24,720
and it will probably issue warnings

00:20:22,350 --> 00:20:26,130
until you hey there's something going on

00:20:24,720 --> 00:20:29,299
you should go check it out

00:20:26,130 --> 00:20:32,130
this works really well for us

00:20:29,299 --> 00:20:35,370
additionally you should also think about

00:20:32,130 --> 00:20:37,679
how to handle 404s again you don't have

00:20:35,370 --> 00:20:40,559
status codes available to you on the

00:20:37,679 --> 00:20:42,510
client side and the crawler we'll see

00:20:40,559 --> 00:20:45,330
broken links so it's just a matter of

00:20:42,510 --> 00:20:48,780
how do you deal with this you can use

00:20:45,330 --> 00:20:50,909
the same no index trick to add a meta

00:20:48,780 --> 00:20:53,220
information to the document and to

00:20:50,909 --> 00:20:54,740
communicate to the crawler that this is

00:20:53,220 --> 00:20:57,960
not something that should be indexed and

00:20:54,740 --> 00:21:01,620
if you don't do this you might see

00:20:57,960 --> 00:21:03,539
something called soft 404s for initially

00:21:01,620 --> 00:21:06,390
we didn't understand what so for force

00:21:03,539 --> 00:21:08,039
word but so far for soft 404s are

00:21:06,390 --> 00:21:10,710
warnings that the crawler will issue

00:21:08,039 --> 00:21:13,620
when it comes true across a page that

00:21:10,710 --> 00:21:17,010
looks like a 404 page but didn't give

00:21:13,620 --> 00:21:20,460
you it wasn't served with a 404 status

00:21:17,010 --> 00:21:23,159
code or didn't have the the no index

00:21:20,460 --> 00:21:25,320
meta tag present on it and if you don't

00:21:23,159 --> 00:21:27,630
want to be like us avoid one of the

00:21:25,320 --> 00:21:29,850
mistakes that we made where we turned

00:21:27,630 --> 00:21:32,429
our 404 page into a honey pot for

00:21:29,850 --> 00:21:36,720
crawlers and the result of that was that

00:21:32,429 --> 00:21:39,720
at some point almost 1600 results were

00:21:36,720 --> 00:21:41,970
present in the search results and we're

00:21:39,720 --> 00:21:44,520
pointing to a 404 page with bogus

00:21:41,970 --> 00:21:46,080
content once we investigated this and

00:21:44,520 --> 00:21:48,720
again there is an issue that describes

00:21:46,080 --> 00:21:51,780
you know how we came to realize what was

00:21:48,720 --> 00:21:53,309
wrong and how we fixed it it was very

00:21:51,780 --> 00:21:55,830
easy to fix we just added the noindex

00:21:53,309 --> 00:21:58,980
meta tag and we removed it and the

00:21:55,830 --> 00:22:01,350
reason why these results were being

00:21:58,980 --> 00:22:04,080
displayed and often were considered

00:22:01,350 --> 00:22:06,030
highly ranking results was because a 404

00:22:04,080 --> 00:22:07,600
page contain lots of keywords and lots

00:22:06,030 --> 00:22:10,059
of links

00:22:07,600 --> 00:22:11,890
were very interesting to the ranking

00:22:10,059 --> 00:22:14,140
algorithm and that's why it gave it a

00:22:11,890 --> 00:22:17,309
single boost but once you market with no

00:22:14,140 --> 00:22:20,220
index meta tag this problem goes away

00:22:17,309 --> 00:22:23,289
the last thing I want to talk about is

00:22:20,220 --> 00:22:27,340
you put all this effort into making your

00:22:23,289 --> 00:22:29,919
application accessible and you are doing

00:22:27,340 --> 00:22:32,140
really well in the search results how do

00:22:29,919 --> 00:22:35,910
you make sure that you can sustain this

00:22:32,140 --> 00:22:38,340
success I recommend doing three things

00:22:35,910 --> 00:22:42,520
monitoring login and alerting

00:22:38,340 --> 00:22:44,890
with monitoring you are able to keep

00:22:42,520 --> 00:22:46,990
track of any kind of trends and anything

00:22:44,890 --> 00:22:49,990
happening on the side we reviewed the

00:22:46,990 --> 00:22:52,950
search results and we review the search

00:22:49,990 --> 00:22:55,900
console and the google analytics

00:22:52,950 --> 00:22:58,210
dashboards quite regularly we use this

00:22:55,900 --> 00:22:59,710
information to also experiment and we

00:22:58,210 --> 00:23:02,919
use the results to analyze the

00:22:59,710 --> 00:23:04,720
experiments and then use the data out of

00:23:02,919 --> 00:23:08,860
these experiments to fuel future

00:23:04,720 --> 00:23:10,539
improvements logging is another way how

00:23:08,860 --> 00:23:13,000
you can get more insights into what is

00:23:10,539 --> 00:23:15,549
happening the client-side unlike with

00:23:13,000 --> 00:23:17,049
server-side hosted applications where

00:23:15,549 --> 00:23:19,270
you have logs that are easily accessible

00:23:17,049 --> 00:23:22,120
and you can you know if there is lots of

00:23:19,270 --> 00:23:25,059
tools to process these logs on the

00:23:22,120 --> 00:23:28,299
client side the story is slightly

00:23:25,059 --> 00:23:30,520
different you actually need to do extra

00:23:28,299 --> 00:23:32,350
work to collect the logs and it's

00:23:30,520 --> 00:23:34,419
definitely worth it especially when

00:23:32,350 --> 00:23:36,580
errors are happening in production you

00:23:34,419 --> 00:23:38,679
want to collect these errors and analyze

00:23:36,580 --> 00:23:41,710
them there are different ways to do it

00:23:38,679 --> 00:23:44,409
different tools one of the if you don't

00:23:41,710 --> 00:23:47,320
want to pay for a paid product one easy

00:23:44,409 --> 00:23:49,900
way to do this is by setting up a global

00:23:47,320 --> 00:23:51,880
error handler that will send any kind of

00:23:49,900 --> 00:23:54,250
errors to Google Analytics and this is

00:23:51,880 --> 00:23:57,220
what we've done and I left a link to our

00:23:54,250 --> 00:24:00,039
implementation once you do that you can

00:23:57,220 --> 00:24:01,539
go to Google Analytics and see general

00:24:00,039 --> 00:24:03,820
trends about any kind of errors

00:24:01,539 --> 00:24:05,799
happening in your client side and also

00:24:03,820 --> 00:24:07,539
general summary about how frequent

00:24:05,799 --> 00:24:10,480
different errors are and this is super

00:24:07,539 --> 00:24:13,419
useful when you're debugging Google

00:24:10,480 --> 00:24:15,730
Analytics by default tracks user agent

00:24:13,419 --> 00:24:18,460
if you're not using Google Analytics

00:24:15,730 --> 00:24:19,929
please collect user agent because that's

00:24:18,460 --> 00:24:21,850
information that is often

00:24:19,929 --> 00:24:25,179
crucial to understanding how to

00:24:21,850 --> 00:24:29,110
reproduce particular error and the last

00:24:25,179 --> 00:24:31,899
one is alerting if you set up the search

00:24:29,110 --> 00:24:33,940
console for a property search console

00:24:31,899 --> 00:24:36,220
will automatically send you errors about

00:24:33,940 --> 00:24:38,399
things that don't look right that the

00:24:36,220 --> 00:24:41,049
crawler sees as it processes your side I

00:24:38,399 --> 00:24:42,700
mentioned soft 404s but there are other

00:24:41,049 --> 00:24:44,980
warnings that you might get for example

00:24:42,700 --> 00:24:46,840
your certificate is about to ssl

00:24:44,980 --> 00:24:49,570
certificate certificate is about to

00:24:46,840 --> 00:24:52,840
expire soon that was a very useful

00:24:49,570 --> 00:24:57,070
warning for us in the past additionally

00:24:52,840 --> 00:25:01,059
to this I also use a custom alert in

00:24:57,070 --> 00:25:03,580
Google Analytics that if you can set up

00:25:01,059 --> 00:25:05,619
in a way where in emails is sent to you

00:25:03,580 --> 00:25:09,429
every time there is a significant change

00:25:05,619 --> 00:25:11,169
in the traffic pattern coming from

00:25:09,429 --> 00:25:13,929
search engines you can use this

00:25:11,169 --> 00:25:15,909
particular formula on this screenshot to

00:25:13,929 --> 00:25:17,350
set it up and you will be informed every

00:25:15,909 --> 00:25:20,980
time there is animal happening in

00:25:17,350 --> 00:25:23,110
production so pre useful so I covered a

00:25:20,980 --> 00:25:25,539
lot of ground let me just quickly

00:25:23,110 --> 00:25:28,029
summarize if you're building your

00:25:25,539 --> 00:25:29,980
application and relying both on server

00:25:28,029 --> 00:25:32,139
side or client side you should think

00:25:29,980 --> 00:25:34,360
about URLs and how important they are

00:25:32,139 --> 00:25:37,119
there your public API surface don't

00:25:34,360 --> 00:25:39,309
break them embrace them this is

00:25:37,119 --> 00:25:41,679
something special that is specific to

00:25:39,309 --> 00:25:43,360
the web platform and sets web

00:25:41,679 --> 00:25:45,909
applications apart from native

00:25:43,360 --> 00:25:48,999
applications so we should take a good

00:25:45,909 --> 00:25:51,730
care of of this public API surface the

00:25:48,999 --> 00:25:53,740
second one is pick on your journals SEO

00:25:51,730 --> 00:25:57,100
strategy depending on how much you can

00:25:53,740 --> 00:25:58,419
invest or what are the rewards or what

00:25:57,100 --> 00:26:00,100
are the interests and what are the

00:25:58,419 --> 00:26:01,269
specifics of the application what is the

00:26:00,100 --> 00:26:03,669
audience that you are trying to reach

00:26:01,269 --> 00:26:06,639
there are several options pick the right

00:26:03,669 --> 00:26:08,440
one for you the next one is there are

00:26:06,639 --> 00:26:11,100
different tools that are available to

00:26:08,440 --> 00:26:13,360
you analytics search console and

00:26:11,100 --> 00:26:14,559
mobile-friendly test at just three there

00:26:13,360 --> 00:26:17,049
are others that you might find useful

00:26:14,559 --> 00:26:19,929
get familiar with them they can really

00:26:17,049 --> 00:26:23,379
help you save a lot of time number four

00:26:19,929 --> 00:26:28,779
is if you do go with client-side beware

00:26:23,379 --> 00:26:30,460
that the crawler is not the evergreen

00:26:28,779 --> 00:26:30,940
browser that you typically deal with and

00:26:30,460 --> 00:26:33,340
run

00:26:30,940 --> 00:26:37,390
against so make sure you load your

00:26:33,340 --> 00:26:40,420
polyfill and handle errors and 404s

00:26:37,390 --> 00:26:43,120
properly and the last one is if you want

00:26:40,420 --> 00:26:46,360
to be successful in the long run set up

00:26:43,120 --> 00:26:48,550
monitoring logging and alerting so that

00:26:46,360 --> 00:26:50,440
you know about any changes happening in

00:26:48,550 --> 00:26:53,380
production and can respond to them

00:26:50,440 --> 00:26:55,330
accordingly and when I be credit to a

00:26:53,380 --> 00:26:57,580
few people that help me collect all of

00:26:55,330 --> 00:26:59,260
this information P George and Martin

00:26:57,580 --> 00:27:00,820
from the angular team and they help me

00:26:59,260 --> 00:27:03,130
work through many of these issues and

00:27:00,820 --> 00:27:05,800
result them and John Muller from the

00:27:03,130 --> 00:27:07,780
search team that through his public work

00:27:05,800 --> 00:27:09,760
was able to share a lot of the

00:27:07,780 --> 00:27:13,060
information about how the curler works

00:27:09,760 --> 00:27:15,220
and it's a really good resource with

00:27:13,060 --> 00:27:17,650
that thank you very much the slides

00:27:15,220 --> 00:27:19,660
already public you can you can learn

00:27:17,650 --> 00:27:21,400
more about different things from the

00:27:19,660 --> 00:27:23,620
links I shared and I'm gonna be doing

00:27:21,400 --> 00:27:25,000
ask me anything session where I'm happy

00:27:23,620 --> 00:27:29,700
to answer any questions

00:27:25,000 --> 00:27:29,700

YouTube URL: https://www.youtube.com/watch?v=Hn_oxbWEnpc


