Title: ReactiveConf 2018 - AMA w  Michel Weststrate
Publication date: 2018-11-06
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Ask Me Anything session, moderated by Gerard Sans.
Based on Michel's previous talk on ReactiveConf Main stage: https://www.youtube.com/watch?v=N2mSG28jADQ
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,200 --> 00:00:20,550
okay so we are going to start this ask

00:00:15,389 --> 00:00:22,289
me anything session with Michelle West

00:00:20,550 --> 00:00:27,330
rap wow that's awesome

00:00:22,289 --> 00:00:30,900
yes nice nice and he was speaking this

00:00:27,330 --> 00:00:34,320
morning about the different approaches

00:00:30,900 --> 00:00:38,309
to state management I I think that was a

00:00:34,320 --> 00:00:40,379
very interesting talk and it reminds me

00:00:38,309 --> 00:00:43,909
that sometimes some people just

00:00:40,379 --> 00:00:47,129
disregard other approaches they pick

00:00:43,909 --> 00:00:50,670
maybe one of the libraries and then they

00:00:47,129 --> 00:00:53,190
go mental and then it's like the source

00:00:50,670 --> 00:00:55,650
of truth and then when you show them

00:00:53,190 --> 00:00:57,780
that there's actually other ways of

00:00:55,650 --> 00:01:02,839
doing exactly the same thing they are

00:00:57,780 --> 00:01:07,950
kind of like oh my god I didn't realize

00:01:02,839 --> 00:01:11,429
so yeah we have a few questions that we

00:01:07,950 --> 00:01:13,920
were recording during this morning and

00:01:11,429 --> 00:01:17,939
we can we can take some of those we can

00:01:13,920 --> 00:01:21,109
also take your questions and yeah we'll

00:01:17,939 --> 00:01:24,390
spend some time covering covering those

00:01:21,109 --> 00:01:28,109
so the first question is what about a

00:01:24,390 --> 00:01:31,729
polo link state for local state handling

00:01:28,109 --> 00:01:35,310
what what's your what's your take I

00:01:31,729 --> 00:01:38,369
think it's not when I've seen from it so

00:01:35,310 --> 00:01:38,729
far it's just me it's not entirely there

00:01:38,369 --> 00:01:43,140
yet

00:01:38,729 --> 00:01:45,329
it's like quickly quite complicated

00:01:43,140 --> 00:01:48,749
still too for simple things to do it

00:01:45,329 --> 00:01:53,460
with Apple link set but the ID makes a

00:01:48,749 --> 00:01:56,549
lot of sense in that sense that you have

00:01:53,460 --> 00:01:58,499
like one unified way of working with

00:01:56,549 --> 00:02:02,490
data regardless from the backends or

00:01:58,499 --> 00:02:06,810
just some local state I just think it

00:02:02,490 --> 00:02:08,160
needs to evolve more for example if I'm

00:02:06,810 --> 00:02:13,410
not mistaken they don't have a concept

00:02:08,160 --> 00:02:16,840
for like really derives smartly updating

00:02:13,410 --> 00:02:19,870
information yet okay so it's either what

00:02:16,840 --> 00:02:24,190
you define your data model and nothing

00:02:19,870 --> 00:02:27,790
beyond that but I think it will just

00:02:24,190 --> 00:02:29,350
gets more shares a couple time and makes

00:02:27,790 --> 00:02:33,459
more and more sense if you are on Apollo

00:02:29,350 --> 00:02:36,100
anyway already yeah but in the context

00:02:33,459 --> 00:02:39,370
of if you have an a solution that is

00:02:36,100 --> 00:02:41,980
already using Apollo then it makes it

00:02:39,370 --> 00:02:43,900
makes a lot of sense in that we good fit

00:02:41,980 --> 00:02:47,320
for that application

00:02:43,900 --> 00:02:49,360
yeah exactly and I think that most of

00:02:47,320 --> 00:02:52,810
the improvements have to be some item

00:02:49,360 --> 00:02:56,550
like a PA API level where it's easy to

00:02:52,810 --> 00:03:00,269
use as local component State for example

00:02:56,550 --> 00:03:02,319
and if they managed to bridge that gap

00:03:00,269 --> 00:03:07,690
then it makes lots of sense to have why

00:03:02,319 --> 00:03:12,430
you're not unified way awesome any any

00:03:07,690 --> 00:03:25,690
questions from from the people here yeah

00:03:12,430 --> 00:03:28,090
you want to throw one for me the thing

00:03:25,690 --> 00:03:30,430
we're at statement forever becomes

00:03:28,090 --> 00:03:34,870
really relevant is as soon as you want

00:03:30,430 --> 00:03:38,650
to separate your UI from your state and

00:03:34,870 --> 00:03:40,209
it can be a few reasons to do that once

00:03:38,650 --> 00:03:41,920
for example you use the same state or

00:03:40,209 --> 00:03:44,170
same logic across multiple pieces of

00:03:41,920 --> 00:03:48,280
your stack for example a front end or

00:03:44,170 --> 00:03:50,620
back ends are also angular or something

00:03:48,280 --> 00:03:53,920
another reason can be that like your

00:03:50,620 --> 00:03:55,840
state is hard to normalize stuff where

00:03:53,920 --> 00:03:59,410
sometimes you have to state which

00:03:55,840 --> 00:04:01,870
doesn't really match your few tree

00:03:59,410 --> 00:04:04,930
nicely right like your view is a tree

00:04:01,870 --> 00:04:07,480
but it turns out if you keep pulling out

00:04:04,930 --> 00:04:10,690
all your state up because it's needed a

00:04:07,480 --> 00:04:12,670
lot of different places and then it also

00:04:10,690 --> 00:04:16,419
makes for me a lot of sense of just

00:04:12,670 --> 00:04:18,579
pulling say the outsides having that

00:04:16,419 --> 00:04:21,099
defined separately testing it separately

00:04:18,579 --> 00:04:23,870
and they're making your view Dom bar by

00:04:21,099 --> 00:04:29,090
pulling a dress out of a statement

00:04:23,870 --> 00:04:30,080
library so just the domaine drivers i

00:04:29,090 --> 00:04:34,010
think the complexity of the application

00:04:30,080 --> 00:04:36,770
i like if you're already really familiar

00:04:34,010 --> 00:04:38,510
with a certain a solution then you will

00:04:36,770 --> 00:04:40,850
introduce it earlier just because you're

00:04:38,510 --> 00:04:46,400
used to it but the primary driver should

00:04:40,850 --> 00:04:53,330
be complexity it seems we got we got a

00:04:46,400 --> 00:04:56,570
really really fun pop up okay thanks

00:04:53,330 --> 00:05:01,010
thanks a lot okay so the next we can go

00:04:56,570 --> 00:05:06,680
for the next question and it's very

00:05:01,010 --> 00:05:08,449
insistent okay that's good

00:05:06,680 --> 00:05:10,880
so the next question i think you can

00:05:08,449 --> 00:05:14,930
also you can also see it on the screen

00:05:10,880 --> 00:05:18,050
there so that still makes sense if you

00:05:14,930 --> 00:05:21,110
want to stick with either redux or more

00:05:18,050 --> 00:05:25,580
vex in the in the context of a graph

00:05:21,110 --> 00:05:28,520
quelle application or you will always

00:05:25,580 --> 00:05:35,539
use like a polo link state instead I

00:05:28,520 --> 00:05:38,330
think sometimes I think usually not the

00:05:35,539 --> 00:05:40,669
cases were right accents it's like where

00:05:38,330 --> 00:05:41,570
you have some stated essence delivered

00:05:40,669 --> 00:05:45,650
true Apolo

00:05:41,570 --> 00:05:47,810
for example cash or for some state might

00:05:45,650 --> 00:05:52,190
be really local really really temporal

00:05:47,810 --> 00:05:55,760
like complex form said or something but

00:05:52,190 --> 00:05:59,919
I think in most cases it would might be

00:05:55,760 --> 00:06:04,000
overkill to use both yep make sense I

00:05:59,919 --> 00:06:04,000
think we have a question

00:06:35,330 --> 00:06:43,770
yeah that's true so like if you use

00:06:40,230 --> 00:06:46,200
react in its purest form like the

00:06:43,770 --> 00:06:48,900
cleanest mental model possible what you

00:06:46,200 --> 00:06:51,360
would be doing is like just rendering

00:06:48,900 --> 00:06:53,910
your whole component tree entirely for

00:06:51,360 --> 00:06:55,290
Africa chases that's like the conceptual

00:06:53,910 --> 00:06:58,200
model that gets presented to you by

00:06:55,290 --> 00:07:01,830
react like you don't want to think about

00:06:58,200 --> 00:07:05,250
what updates well and practice the

00:07:01,830 --> 00:07:08,040
problem is that it doesn't skill enough

00:07:05,250 --> 00:07:10,590
because it's even a refresher DOMA is

00:07:08,040 --> 00:07:13,530
expensive to reconcile your entire

00:07:10,590 --> 00:07:16,170
component area all the time so that

00:07:13,530 --> 00:07:19,580
means that in practice whatever solution

00:07:16,170 --> 00:07:22,680
you pick beat Apollo or Redux MOU bakes

00:07:19,580 --> 00:07:25,050
there's always somewhere a subscription

00:07:22,680 --> 00:07:27,000
subscription mechanism that just make

00:07:25,050 --> 00:07:30,210
sure that some components get updated

00:07:27,000 --> 00:07:32,310
based on state and so that's indeed the

00:07:30,210 --> 00:07:35,850
point where you break with the

00:07:32,310 --> 00:07:37,710
conceptual super simple model but with

00:07:35,850 --> 00:07:40,500
the model what he needs and practice to

00:07:37,710 --> 00:07:43,010
build and build a big performance

00:07:40,500 --> 00:07:43,010
application

00:08:08,919 --> 00:08:16,310
so I'm going oh I'm going to repeat just

00:08:13,280 --> 00:08:19,039
for the recording so the question is

00:08:16,310 --> 00:08:22,069
that we lose we lose some of the

00:08:19,039 --> 00:08:24,530
features that we had before with Redux

00:08:22,069 --> 00:08:27,710
and one of them is the automatically

00:08:24,530 --> 00:08:30,289
rendering of the components when we get

00:08:27,710 --> 00:08:33,579
you know a change and which I understood

00:08:30,289 --> 00:08:38,209
that more vex it needs some extra code

00:08:33,579 --> 00:08:39,589
so we lose some of some of that now I

00:08:38,209 --> 00:08:41,899
think the questions were diverse that

00:08:39,589 --> 00:08:43,669
like with what makes you lose some

00:08:41,899 --> 00:08:46,810
control over okay when that's happening

00:08:43,669 --> 00:08:46,810
because it's done for you

00:08:46,870 --> 00:08:55,040
so in essence model is from redux from

00:08:51,560 --> 00:08:58,160
to mobile it's not very different and

00:08:55,040 --> 00:09:00,620
shirt away so in both cases you have

00:08:58,160 --> 00:09:03,290
components that start to subscribing to

00:09:00,620 --> 00:09:04,930
a part of the state so a reader should

00:09:03,290 --> 00:09:07,190
typically have the separation between

00:09:04,930 --> 00:09:09,920
the container components and

00:09:07,190 --> 00:09:14,360
presentational components or the smart

00:09:09,920 --> 00:09:16,370
and atomic apartments but it's also case

00:09:14,360 --> 00:09:19,240
like a container component renders

00:09:16,370 --> 00:09:22,279
independently of its own parents so

00:09:19,240 --> 00:09:24,260
there you have the same thing and an

00:09:22,279 --> 00:09:27,220
official alt reactor container called

00:09:24,260 --> 00:09:28,579
it's a sideways loading so the ID that's

00:09:27,220 --> 00:09:31,480
something else

00:09:28,579 --> 00:09:35,899
influences a rendering keeping a tree

00:09:31,480 --> 00:09:38,930
and that concept you still have mo

00:09:35,899 --> 00:09:41,149
breaks except that's with move X more

00:09:38,930 --> 00:09:43,490
components are smart because observer

00:09:41,149 --> 00:09:46,519
basically makes them smart themselves so

00:09:43,490 --> 00:09:48,410
almost every component that deals with

00:09:46,519 --> 00:09:52,760
observables is basically a container

00:09:48,410 --> 00:09:54,620
components so that might kind of set you

00:09:52,760 --> 00:09:56,120
off because it's like not super

00:09:54,620 --> 00:09:57,890
expeditious which ones are the container

00:09:56,120 --> 00:09:59,720
components because basically all the

00:09:57,890 --> 00:10:02,899
observer components are the container

00:09:59,720 --> 00:10:07,490
components if you would translate the

00:10:02,899 --> 00:10:11,600
mechanisms if you have less control and

00:10:07,490 --> 00:10:13,880
practice I'm not sure I hear people

00:10:11,600 --> 00:10:16,819
Jarrell also be pretty happy especially

00:10:13,880 --> 00:10:19,520
since we introduced trace so you could

00:10:16,819 --> 00:10:20,620
put a trace call inside a home X

00:10:19,520 --> 00:10:23,590
components

00:10:20,620 --> 00:10:26,650
it would break and exactly show em

00:10:23,590 --> 00:10:30,190
stacked rise with mutation I was

00:10:26,650 --> 00:10:32,500
crossing the chains which is really not

00:10:30,190 --> 00:10:33,940
you gots actually synchronous so you can

00:10:32,500 --> 00:10:38,100
really trace it back to the action

00:10:33,940 --> 00:10:41,560
that's causing your best but yet those

00:10:38,100 --> 00:10:43,780
details are hidden away from you so in

00:10:41,560 --> 00:10:45,220
that sense it's surprise you always pay

00:10:43,780 --> 00:10:54,190
for a projection the more objection you

00:10:45,220 --> 00:10:56,110
get the more of closed box you f cool we

00:10:54,190 --> 00:10:57,340
have a couple more questions but we can

00:10:56,110 --> 00:11:09,040
we can take another one from the

00:10:57,340 --> 00:11:10,960
audience not big ones so I think so the

00:11:09,040 --> 00:11:14,080
question is what are the new features in

00:11:10,960 --> 00:11:16,050
the latest versions of molex Oh in the

00:11:14,080 --> 00:11:17,920
coming versus automatic so what's coming

00:11:16,050 --> 00:11:22,840
so there are a few interesting things

00:11:17,920 --> 00:11:27,030
that are coming the most significant one

00:11:22,840 --> 00:11:31,240
is probably the decorator states tree

00:11:27,030 --> 00:11:33,810
implementation so decorators are almost

00:11:31,240 --> 00:11:39,190
home search further and sanitization

00:11:33,810 --> 00:11:42,010
which means that's the behavior change

00:11:39,190 --> 00:11:46,900
habits - we are all ready for that just

00:11:42,010 --> 00:11:49,660
waiting until standard continues and the

00:11:46,900 --> 00:11:53,980
other one is a adopting hooks once they

00:11:49,660 --> 00:11:56,260
are said last actually I did already an

00:11:53,980 --> 00:11:58,990
initial rewrite of the bindings and web

00:11:56,260 --> 00:12:02,950
hooks and that's soft a lot of no

00:11:58,990 --> 00:12:06,670
education and wait reoccurrence so I'm

00:12:02,950 --> 00:12:09,580
really happy about it but beyond that

00:12:06,670 --> 00:12:13,030
they're not like really big changes

00:12:09,580 --> 00:12:16,890
plans within the library itself I use

00:12:13,030 --> 00:12:16,890
may be missing something specific

00:12:19,470 --> 00:12:25,260
at will most probably in version 4 or 5

00:12:25,890 --> 00:12:32,500
awesome I I want to remind all the

00:12:29,380 --> 00:12:36,510
people here that you can use the little

00:12:32,500 --> 00:12:39,880
app you just need to join this hash

00:12:36,510 --> 00:12:43,660
reactive conf 18 and you can add your

00:12:39,880 --> 00:12:46,420
questions there if you find it easier so

00:12:43,660 --> 00:12:49,270
the next question we have its we cover

00:12:46,420 --> 00:12:53,320
this one so the next one I guess it's

00:12:49,270 --> 00:12:57,400
asking if it's what's better using

00:12:53,320 --> 00:13:00,180
mobile or immutable J's I mean if that's

00:12:57,400 --> 00:13:02,680
if that's something you can do

00:13:00,180 --> 00:13:04,390
I'm not sure you can you can't really

00:13:02,680 --> 00:13:06,130
compare them because one its

00:13:04,390 --> 00:13:09,280
establishment library ID number one is a

00:13:06,130 --> 00:13:11,710
data structure library and might be that

00:13:09,280 --> 00:13:13,270
the question was about Emer okay I can

00:13:11,710 --> 00:13:26,280
imagine that was about a more versus

00:13:13,270 --> 00:13:28,960
immutable okay that girls babe

00:13:26,280 --> 00:13:30,090
definitely use a mutable yes I mean it's

00:13:28,960 --> 00:13:33,820
just experiments

00:13:30,090 --> 00:13:37,840
so the actual code that it does kind of

00:13:33,820 --> 00:13:43,800
show this morning not really tested to

00:13:37,840 --> 00:13:43,800
roughly atrophic I mean why not time

00:13:43,950 --> 00:13:52,120
well that's that's another question

00:13:47,610 --> 00:13:57,250
really quickly solved any any other

00:13:52,120 --> 00:13:59,850
questions that you may think yeah we got

00:13:57,250 --> 00:13:59,850
one there

00:14:35,870 --> 00:14:43,080
there are two solutions I know of

00:14:39,089 --> 00:14:45,810
so the attract Europe I thought about

00:14:43,080 --> 00:14:48,089
writing your own type system that runs a

00:14:45,810 --> 00:14:50,730
trend type so very similar to probe

00:14:48,089 --> 00:14:55,160
types where you can like the final shape

00:14:50,730 --> 00:14:56,940
of object and you can then verify our

00:14:55,160 --> 00:14:59,339
responses from a server or something

00:14:56,940 --> 00:15:01,620
that the shape is correct for context

00:14:59,339 --> 00:15:03,210
and then third part is that the

00:15:01,620 --> 00:15:05,160
real-time library you write you can

00:15:03,210 --> 00:15:07,440
actually apply type inference to it with

00:15:05,160 --> 00:15:10,860
for example type script and you can also

00:15:07,440 --> 00:15:12,930
aesthetically check whether your data

00:15:10,860 --> 00:15:15,270
you're passing to a function matches

00:15:12,930 --> 00:15:18,120
your runtime type you declare that your

00:15:15,270 --> 00:15:21,230
LDAP system it's quite mind-blowing and

00:15:18,120 --> 00:15:24,870
it works it's really interesting and

00:15:21,230 --> 00:15:31,130
there are as far as an l2 library to do

00:15:24,870 --> 00:15:34,260
it one is taken by GDL come see it

00:15:31,130 --> 00:15:35,970
it's called tea cup t Combinator type

00:15:34,260 --> 00:15:38,279
Combinator

00:15:35,970 --> 00:15:41,550
he made us have the load library out of

00:15:38,279 --> 00:15:44,820
it and I think it also has decent error

00:15:41,550 --> 00:15:47,190
reporting like where it fails and the

00:15:44,820 --> 00:15:50,250
other one is I choose to move exte tree

00:15:47,190 --> 00:15:53,640
so mobile backs a tree you define models

00:15:50,250 --> 00:15:56,250
of your data and then also any chase you

00:15:53,640 --> 00:15:58,110
apply or be validated against type

00:15:56,250 --> 00:16:03,060
should you fight and then you get also

00:15:58,110 --> 00:16:05,970
detailed error messages so if you just

00:16:03,060 --> 00:16:08,610
looking for the random type system what

00:16:05,970 --> 00:16:15,839
works like a little I would definitely

00:16:08,610 --> 00:16:18,839
go for that a Campari cool well we have

00:16:15,839 --> 00:16:21,240
another question I guess from the

00:16:18,839 --> 00:16:23,910
audience so do you think the react

00:16:21,240 --> 00:16:26,670
context app API has removed the need for

00:16:23,910 --> 00:16:30,270
additional state management libraries in

00:16:26,670 --> 00:16:33,410
react applications the answer questions

00:16:30,270 --> 00:16:33,410
really simply no

00:16:33,790 --> 00:16:41,200
let me explain Drake's context FBI

00:16:37,770 --> 00:16:43,870
didn't change anything in regards to

00:16:41,200 --> 00:16:45,940
what was possible and reacted with

00:16:43,870 --> 00:16:48,280
complex everything you can do with the

00:16:45,940 --> 00:16:50,800
new complex API we could already do it

00:16:48,280 --> 00:16:52,480
before it was just a guy was not as

00:16:50,800 --> 00:16:57,120
officially are you needed packages for

00:16:52,480 --> 00:16:57,120
it like react broadcasts or something

00:16:57,390 --> 00:17:06,670
but basic problem is it's like quite

00:17:01,230 --> 00:17:07,930
coarse great so I always see context

00:17:06,670 --> 00:17:09,640
where I said dependency injection

00:17:07,930 --> 00:17:11,410
mechanism where you can like inject your

00:17:09,640 --> 00:17:14,320
team or your language so those kind of

00:17:11,410 --> 00:17:16,630
things but not really as state

00:17:14,320 --> 00:17:19,959
management imagine for example if you

00:17:16,630 --> 00:17:21,520
have a to-do list with humble items what

00:17:19,959 --> 00:17:24,880
are you going to put in your contacts do

00:17:21,520 --> 00:17:27,610
you create one context that contains all

00:17:24,880 --> 00:17:29,230
those 100 to-do items and then basically

00:17:27,610 --> 00:17:33,070
indeed may need a state management

00:17:29,230 --> 00:17:36,190
library to update that's data in context

00:17:33,070 --> 00:17:38,680
smartly or are you going to create a

00:17:36,190 --> 00:17:41,620
hundred context one for its to do item I

00:17:38,680 --> 00:17:45,640
think that's also would result and

00:17:41,620 --> 00:17:48,370
really horrible cut so short answer is

00:17:45,640 --> 00:17:51,280
no it doesn't change the game I think in

00:17:48,370 --> 00:17:55,060
terms of state management the thing that

00:17:51,280 --> 00:17:57,100
does solve is for example mob react by

00:17:55,060 --> 00:18:00,600
things I have always provider inject

00:17:57,100 --> 00:18:04,360
same is true for the Redux findings and

00:18:00,600 --> 00:18:06,280
those we could I think basically gets at

00:18:04,360 --> 00:18:08,080
least partially enough because you can

00:18:06,280 --> 00:18:18,040
do the same thing with context in a very

00:18:08,080 --> 00:18:21,670
clean way okay so I guess there's few

00:18:18,040 --> 00:18:26,260
questions that I think we covered let's

00:18:21,670 --> 00:18:30,460
see who can get some more so I guess

00:18:26,260 --> 00:18:34,150
that's that's cover already let's cover

00:18:30,460 --> 00:18:36,360
this last one the second one now what

00:18:34,150 --> 00:18:39,480
are your tips to managing an open source

00:18:36,360 --> 00:18:42,730
as popular as more of X I I mean after

00:18:39,480 --> 00:18:44,230
having been you know the main

00:18:42,730 --> 00:18:47,770
maintainer behind

00:18:44,230 --> 00:18:52,690
a large open source project what would

00:18:47,770 --> 00:18:57,580
be your Europe eyes like what to do what

00:18:52,690 --> 00:19:02,530
not to do find it like first of all I'm

00:18:57,580 --> 00:19:07,179
still trying to figure it out but there

00:19:02,530 --> 00:19:15,090
are a few things I noticed that's worked

00:19:07,179 --> 00:19:17,919
really well and one I still have a

00:19:15,090 --> 00:19:20,700
really clear philosophy if you project

00:19:17,919 --> 00:19:23,260
and they're really clear scope boundary

00:19:20,700 --> 00:19:25,120
because because otherwise your project

00:19:23,260 --> 00:19:26,650
will basically be taken alpha by

00:19:25,120 --> 00:19:30,520
everybody who needs a very specific

00:19:26,650 --> 00:19:35,740
feature but once you have that boundary

00:19:30,520 --> 00:19:39,790
set you can also really be relaxed and

00:19:35,740 --> 00:19:42,669
allowing hours to contribute that can be

00:19:39,790 --> 00:19:45,400
answering questions sometimes somebody

00:19:42,669 --> 00:19:47,500
you could ask for a feature I I just ask

00:19:45,400 --> 00:19:49,720
them I can imagine you don't know how to

00:19:47,500 --> 00:19:52,960
build a feature but then at least make a

00:19:49,720 --> 00:19:54,840
pull request to to add some unit tests

00:19:52,960 --> 00:19:59,190
that verify the feature as you like it

00:19:54,840 --> 00:20:03,640
and those kind of things I really try to

00:19:59,190 --> 00:20:05,650
encourage people to enjoy it I'm also

00:20:03,640 --> 00:20:10,299
like not really strict about code style

00:20:05,650 --> 00:20:13,809
and those kind of fix I think I'm in

00:20:10,299 --> 00:20:16,540
absorbs let's straighten it away as my

00:20:13,809 --> 00:20:18,910
professional projects because well I'm

00:20:16,540 --> 00:20:20,410
not paying the person to do it if it

00:20:18,910 --> 00:20:23,500
works out fine and drugs are fine and

00:20:20,410 --> 00:20:26,290
otherwise we can manage projects easily

00:20:23,500 --> 00:20:31,720
because it's absortion you can revert

00:20:26,290 --> 00:20:33,100
things easily so just test coverage is

00:20:31,720 --> 00:20:35,080
extremely important because then you

00:20:33,100 --> 00:20:37,230
have the confidence that you can have

00:20:35,080 --> 00:20:39,640
others mess around with girls and

00:20:37,230 --> 00:20:44,440
they'll find out themselves that they

00:20:39,640 --> 00:20:48,010
did something wrong another very

00:20:44,440 --> 00:20:49,809
important thing is to become a bit

00:20:48,010 --> 00:20:51,020
strict about issues that are false and

00:20:49,809 --> 00:20:54,080
so

00:20:51,020 --> 00:20:57,320
like if there's not a clear reproduction

00:20:54,080 --> 00:21:00,860
or clear explanation a rentable

00:20:57,320 --> 00:21:03,020
reproduction then usually I don't really

00:21:00,860 --> 00:21:06,770
investigate features because then I'm

00:21:03,020 --> 00:21:09,950
just basically doing the work somebody

00:21:06,770 --> 00:21:13,370
else's already being paid to do and that

00:21:09,950 --> 00:21:15,920
is very time-consuming if you have to

00:21:13,370 --> 00:21:18,940
like clone a ruby repository and start a

00:21:15,920 --> 00:21:23,240
project install seven tools just to

00:21:18,940 --> 00:21:24,260
isolate the book so usually when people

00:21:23,240 --> 00:21:26,750
file a shoes

00:21:24,260 --> 00:21:30,080
my question is file something isolated

00:21:26,750 --> 00:21:33,050
small reproduction and sometimes people

00:21:30,080 --> 00:21:36,280
will say I don't manage sue or I don't

00:21:33,050 --> 00:21:38,600
have time to isolate it or Syria and

00:21:36,280 --> 00:21:40,490
then I'm simply well if you don't have

00:21:38,600 --> 00:21:42,500
time to reproduce the problem you are

00:21:40,490 --> 00:21:44,600
being paid to solve then I of course

00:21:42,500 --> 00:21:49,430
have no time to fix a problem I don't if

00:21:44,600 --> 00:21:54,530
you pay this off so that helps you to

00:21:49,430 --> 00:21:57,380
keep say and also and I think that's a

00:21:54,530 --> 00:22:00,440
host for programming in general we also

00:21:57,380 --> 00:22:03,200
have to learn to be the test from your

00:22:00,440 --> 00:22:05,930
project product I mean it's your product

00:22:03,200 --> 00:22:09,650
it's not you some will like it some once

00:22:05,930 --> 00:22:13,550
some will fight with it someday some

00:22:09,650 --> 00:22:15,380
days your project will go somebody else

00:22:13,550 --> 00:22:18,400
so I have a few bad days because they

00:22:15,380 --> 00:22:20,690
like stuck and I can't figure out that

00:22:18,400 --> 00:22:23,780
let have a say could really help it and

00:22:20,690 --> 00:22:29,360
that's you have to be able to detach

00:22:23,780 --> 00:22:32,450
from that and realize that basically

00:22:29,360 --> 00:22:35,900
you're sharing your work for free but

00:22:32,450 --> 00:22:37,910
them doesn't mean that there's an

00:22:35,900 --> 00:22:42,800
application back to make sure that

00:22:37,910 --> 00:22:46,370
people get unstuck so I understand

00:22:42,800 --> 00:22:47,810
that's quite an important thing to

00:22:46,370 --> 00:22:52,840
realize otherwise you won't have to be

00:22:47,810 --> 00:22:52,840
able to take a holiday basically and

00:22:53,740 --> 00:23:02,320
finally what really helped with my big

00:22:58,520 --> 00:23:04,850
success is finding those early adopters

00:23:02,320 --> 00:23:09,169
talk of them and especially encourage

00:23:04,850 --> 00:23:10,730
them to share their excitement because

00:23:09,169 --> 00:23:13,970
basically you can't sell your own stuff

00:23:10,730 --> 00:23:18,590
because well I choose selling your own

00:23:13,970 --> 00:23:21,049
stuff it's not like super believable so

00:23:18,590 --> 00:23:23,330
it's really cool if you can find a few

00:23:21,049 --> 00:23:25,850
people that are just like and are

00:23:23,330 --> 00:23:27,769
willing to share their experiences even

00:23:25,850 --> 00:23:30,200
if their downsides they're sharing still

00:23:27,769 --> 00:23:33,620
fine kind of because at least they're

00:23:30,200 --> 00:23:37,220
talking about it I thought that's also

00:23:33,620 --> 00:23:39,200
really helps yeah I think I think we can

00:23:37,220 --> 00:23:41,960
we can use this movement you know -

00:23:39,200 --> 00:23:44,539
thank you for sharing you know a library

00:23:41,960 --> 00:23:48,980
like mobic so I would I would thank you

00:23:44,539 --> 00:23:53,059
for that it's a it's hard work you know

00:23:48,980 --> 00:23:57,950
for a long time now for you and you know

00:23:53,059 --> 00:23:59,990
really appreciate it thanks thanks okay

00:23:57,950 --> 00:24:03,590
so we have a probably time for another

00:23:59,990 --> 00:24:05,509
question and then we we will wrap up so

00:24:03,590 --> 00:24:08,720
this one is what tooling do you

00:24:05,509 --> 00:24:10,759
recommend to actually debug an

00:24:08,720 --> 00:24:14,210
application that is using more vex you

00:24:10,759 --> 00:24:20,600
have any any tips or any tricks that you

00:24:14,210 --> 00:24:24,259
use there are the mobile dev tools and

00:24:20,600 --> 00:24:26,450
for crop and quite some people use them

00:24:24,259 --> 00:24:29,120
I think I don't really use it myself I

00:24:26,450 --> 00:24:32,179
have to admit still my favorite tool of

00:24:29,120 --> 00:24:36,440
debugging it's just the the debugger and

00:24:32,179 --> 00:24:38,149
I know this is actually a surprising

00:24:36,440 --> 00:24:39,289
amount of people that's mostly used to

00:24:38,149 --> 00:24:42,470
console statements and search for

00:24:39,289 --> 00:24:46,220
debugging I come from a Java background

00:24:42,470 --> 00:24:48,440
so I always use like debugging with

00:24:46,220 --> 00:24:49,960
debugger and how to reload swap a code

00:24:48,440 --> 00:24:53,210
shopping and those kind of things and

00:24:49,960 --> 00:24:54,710
when I joined the front-end world and

00:24:53,210 --> 00:24:56,419
they're all JavaScript and then I saw

00:24:54,710 --> 00:25:01,450
people doing all this console.log stuff

00:24:56,419 --> 00:25:04,519
again I can't really confuse so I think

00:25:01,450 --> 00:25:06,409
debugger like just eat burger segments

00:25:04,519 --> 00:25:10,279
are great way to debug your application

00:25:06,409 --> 00:25:12,769
and actually because you can do really

00:25:10,279 --> 00:25:14,230
powerful things of have them so for

00:25:12,769 --> 00:25:16,960
example

00:25:14,230 --> 00:25:19,590
use conditional excitements to more

00:25:16,960 --> 00:25:23,590
precisely know when it will hit your

00:25:19,590 --> 00:25:25,660
breakpoints you can even put console of

00:25:23,590 --> 00:25:28,360
log statements in your condition of your

00:25:25,660 --> 00:25:32,919
debugger statement it gets console

00:25:28,360 --> 00:25:35,980
logging for free and also sometimes you

00:25:32,919 --> 00:25:37,030
just want to check whether something

00:25:35,980 --> 00:25:40,600
very specific

00:25:37,030 --> 00:25:42,370
you know object is updated and because

00:25:40,600 --> 00:25:44,620
you could use spy or observe from

00:25:42,370 --> 00:25:46,570
objects but there's also a more general

00:25:44,620 --> 00:25:50,049
approach which works for everything

00:25:46,570 --> 00:25:51,820
and let's just wrap a property of an

00:25:50,049 --> 00:25:54,250
object and get her settled I put a

00:25:51,820 --> 00:25:57,070
debugger in there and then you can just

00:25:54,250 --> 00:25:59,470
intercept the reason of rights from the

00:25:57,070 --> 00:26:04,030
engine to your property that is if you

00:25:59,470 --> 00:26:06,460
really need to go deep with the best way

00:26:04,030 --> 00:26:09,210
of the biggest still just take a step

00:26:06,460 --> 00:26:13,600
back take a walk

00:26:09,210 --> 00:26:15,760
think about C think a little bit about

00:26:13,600 --> 00:26:19,480
what you try to do and whether your the

00:26:15,760 --> 00:26:21,640
behavior that you see well that was

00:26:19,480 --> 00:26:24,580
there was a really interesting chat of

00:26:21,640 --> 00:26:27,130
course Michelle is going to be around

00:26:24,580 --> 00:26:30,700
for the next couple of days so if you

00:26:27,130 --> 00:26:31,299
want to reach him I think he's a really

00:26:30,700 --> 00:26:35,380
nice guy

00:26:31,299 --> 00:26:38,169
so do approach him and ask him any other

00:26:35,380 --> 00:26:42,220
questions that you may that may pop up

00:26:38,169 --> 00:26:44,220
in your mind thanks a lot for for coming

00:26:42,220 --> 00:26:46,390
to these ask me anything session and

00:26:44,220 --> 00:26:49,950
yeah I hope to see you around

00:26:46,390 --> 00:26:49,950
Thanks Thanks

00:26:50,980 --> 00:26:53,040

YouTube URL: https://www.youtube.com/watch?v=I5MqCddKCIk


