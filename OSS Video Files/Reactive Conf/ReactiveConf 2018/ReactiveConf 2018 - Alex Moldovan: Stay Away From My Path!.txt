Title: ReactiveConf 2018 - Alex Moldovan: Stay Away From My Path!
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Stay away from my path!

So youâ€™re building this exciting new web application powered by 'insert your framework of choice'. But when you ship it to your users, you realize that they might have a bad experience loading the app. There are a lot of variables in the mix, from the internet connection to the performance of the device and of course to the browser of choice. The first experience with your application can be crucial in the decision to use your service or not, so better make it right! Performance is not something that you handle reactively after you ship the application, performance should be baked into your software development process and your team should embrace performance optimization techniques as part of their working culture. One of the crucial elements of performance is to ship relevant content to your users as soon as possible. But in modern web applications, figuring out what to ship and what to prioritize can be hard. We will start from understanding how the browser works, then we will explain what the critical rendering path is and how we can optimize it. Expect a talk full of valuable resources and ideas that one can use to improve the performance of a modern web application.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,660 --> 00:00:18,760
so yeah good evening Prague and thanks

00:00:16,209 --> 00:00:22,060
for joining this session Jared mentioned

00:00:18,760 --> 00:00:25,330
my name is Alex I am an open source

00:00:22,060 --> 00:00:28,150
engineer at teleport startup from Cluj

00:00:25,330 --> 00:00:30,820
and I'm also the co-founder of J's

00:00:28,150 --> 00:00:32,470
heroes which is the biggest JavaScript

00:00:30,820 --> 00:00:35,590
community in Romania and all the biggest

00:00:32,470 --> 00:00:41,350
conferences that we're doing every April

00:00:35,590 --> 00:00:44,469
so if you want to join us next April do

00:00:41,350 --> 00:00:46,390
look me up after this as we have some

00:00:44,469 --> 00:00:51,129
discount links for as we're partnering

00:00:46,390 --> 00:00:54,219
up with reactive conf but and also if I

00:00:51,129 --> 00:00:55,960
tried to arrange my slides after the

00:00:54,219 --> 00:00:57,129
tech check I saw that there's a little

00:00:55,960 --> 00:00:59,320
thing in the middle I try to arrange my

00:00:57,129 --> 00:01:02,039
slides so that you can see the content

00:00:59,320 --> 00:01:05,740
but if you find any problems there's

00:01:02,039 --> 00:01:08,290
bitly slash reactive - Alex you can

00:01:05,740 --> 00:01:09,820
follow along with the slides and also

00:01:08,290 --> 00:01:13,090
there are a bunch of links there which

00:01:09,820 --> 00:01:14,409
you can access later so don't you don't

00:01:13,090 --> 00:01:18,070
need to bother to take pictures while

00:01:14,409 --> 00:01:22,090
this is on so we're going to talk about

00:01:18,070 --> 00:01:25,119
performance and performance is very it's

00:01:22,090 --> 00:01:31,119
a topic very dear to me and I would like

00:01:25,119 --> 00:01:33,700
to start by trying - so let's focus

00:01:31,119 --> 00:01:36,159
first on what are what is our objective

00:01:33,700 --> 00:01:38,439
right as a web developer when we talk

00:01:36,159 --> 00:01:44,469
about performance so what we need to do

00:01:38,439 --> 00:01:46,600
is to get to offer to the users a way by

00:01:44,469 --> 00:01:48,490
which they load the browser browser they

00:01:46,600 --> 00:01:50,890
load they go to the website and they get

00:01:48,490 --> 00:01:52,360
back and they they see something right

00:01:50,890 --> 00:01:54,250
the rendering is happening they get to

00:01:52,360 --> 00:01:56,469
interact with the with the page and they

00:01:54,250 --> 00:01:58,180
they have overall a delightful

00:01:56,469 --> 00:02:01,359
experience so there are a couple of

00:01:58,180 --> 00:02:03,039
steps to this and this is part of what

00:02:01,359 --> 00:02:05,469
we do when we talk about performance

00:02:03,039 --> 00:02:08,500
optimization but I like to think of

00:02:05,469 --> 00:02:10,660
performance as seen on two different

00:02:08,500 --> 00:02:13,210
dimensions we have the context and we

00:02:10,660 --> 00:02:16,720
have the process I think we should start

00:02:13,210 --> 00:02:20,320
by that before we actually get into the

00:02:16,720 --> 00:02:23,440
action into the deep technical part so

00:02:20,320 --> 00:02:24,220
context is about all the external

00:02:23,440 --> 00:02:26,620
dependencies

00:02:24,220 --> 00:02:28,180
that are affecting our objective right

00:02:26,620 --> 00:02:30,250
remember our objective is to load the

00:02:28,180 --> 00:02:32,590
page as soon as possible to make it make

00:02:30,250 --> 00:02:36,550
it interactive and so on so external

00:02:32,590 --> 00:02:39,250
dependencies can be browsers can be your

00:02:36,550 --> 00:02:43,330
network speed can be the device that the

00:02:39,250 --> 00:02:45,160
users have and the device that they are

00:02:43,330 --> 00:02:48,430
they are using to to load up your page

00:02:45,160 --> 00:02:50,080
and this this context is very it can be

00:02:48,430 --> 00:02:52,180
problematic because you of course you

00:02:50,080 --> 00:02:54,580
cannot really do much about it right you

00:02:52,180 --> 00:02:56,680
cannot upgrade the network speed of your

00:02:54,580 --> 00:02:59,260
users or you cannot improve their their

00:02:56,680 --> 00:03:02,230
devices so this is one thing where you

00:02:59,260 --> 00:03:04,450
need to be fully aware of right you need

00:03:02,230 --> 00:03:06,850
to test in different scenarios different

00:03:04,450 --> 00:03:09,760
combinations right test on 3G networks

00:03:06,850 --> 00:03:11,170
test on low-end devices because context

00:03:09,760 --> 00:03:13,180
can differ a lot whether you're in

00:03:11,170 --> 00:03:15,400
Romania or in other countries in the

00:03:13,180 --> 00:03:17,410
world and I'm pointing out Romania not

00:03:15,400 --> 00:03:19,060
because it's just my home countries

00:03:17,410 --> 00:03:21,730
because we have some of the fastest and

00:03:19,060 --> 00:03:23,410
cheapest internet in the world but there

00:03:21,730 --> 00:03:26,380
are other places in the world where

00:03:23,410 --> 00:03:29,800
unfortunately internet can be quite

00:03:26,380 --> 00:03:32,290
expensive and speeds can be quite low

00:03:29,800 --> 00:03:34,420
and also devices are not always the

00:03:32,290 --> 00:03:37,300
latest generation but we have this

00:03:34,420 --> 00:03:40,120
notion we have this problem of thinking

00:03:37,300 --> 00:03:42,370
inside our box as a developer so we say

00:03:40,120 --> 00:03:46,269
ok sure my MacBook is running this

00:03:42,370 --> 00:03:48,880
website fine so I don't need to to make

00:03:46,269 --> 00:03:52,120
myself and I have extra problems just

00:03:48,880 --> 00:03:53,799
testing it out on different devices this

00:03:52,120 --> 00:03:56,590
is the context but we also have the

00:03:53,799 --> 00:03:58,120
process the process is the way in which

00:03:56,590 --> 00:03:59,860
the browser's actually work

00:03:58,120 --> 00:04:02,680
we need to thoroughly understand this

00:03:59,860 --> 00:04:06,549
process in order to be able to act on

00:04:02,680 --> 00:04:10,900
performance and again here we have sort

00:04:06,549 --> 00:04:13,690
of like we have this problem of thinking

00:04:10,900 --> 00:04:15,970
that the browser's are like like a

00:04:13,690 --> 00:04:19,479
multi-lane highway right we need to get

00:04:15,970 --> 00:04:20,979
from A to B and it just goes fast right

00:04:19,479 --> 00:04:24,760
the browser is fast we start from this

00:04:20,979 --> 00:04:28,120
assumption but I think so I like to

00:04:24,760 --> 00:04:31,540
think of browsers as more like busy

00:04:28,120 --> 00:04:34,630
cities with a lot of intersections and

00:04:31,540 --> 00:04:37,570
with a lot of streetlights so you as a

00:04:34,630 --> 00:04:38,240
developer actually have access to those

00:04:37,570 --> 00:04:41,660
streetlight

00:04:38,240 --> 00:04:43,789
and if you do your job well then maybe

00:04:41,660 --> 00:04:45,349
some of the street lights are green by

00:04:43,789 --> 00:04:46,729
the time the browser gets there so

00:04:45,349 --> 00:04:49,340
they'll be able the browser will be able

00:04:46,729 --> 00:04:51,169
to actually go fast from A to B but in

00:04:49,340 --> 00:04:53,120
other cases maybe those street lights

00:04:51,169 --> 00:04:55,039
are red so then the browser has to wait

00:04:53,120 --> 00:04:56,509
and has to stop everything and has to

00:04:55,039 --> 00:04:59,870
wait for something else to happen and

00:04:56,509 --> 00:05:01,430
whenever there's a red whenever there's

00:04:59,870 --> 00:05:04,880
a red light

00:05:01,430 --> 00:05:08,740
we happen to talk about something called

00:05:04,880 --> 00:05:12,050
a critical resource in our performance

00:05:08,740 --> 00:05:16,849
in our web in our application actually

00:05:12,050 --> 00:05:18,740
so why I wanted to put this first thing

00:05:16,849 --> 00:05:20,509
to into decide the context in the

00:05:18,740 --> 00:05:22,310
process to bring it in front of you is

00:05:20,509 --> 00:05:25,250
because they are part of like this

00:05:22,310 --> 00:05:29,210
performance mindset that we need to have

00:05:25,250 --> 00:05:31,009
right we need to be aware of where are

00:05:29,210 --> 00:05:35,419
our users how are they using the

00:05:31,009 --> 00:05:37,699
application how am i taking care of the

00:05:35,419 --> 00:05:39,590
whole process and how are things if

00:05:37,699 --> 00:05:44,180
things are streamed light enough or not

00:05:39,590 --> 00:05:46,880
and in order to the main problem with

00:05:44,180 --> 00:05:49,909
performance is that you get you say okay

00:05:46,880 --> 00:05:51,740
I understand now that my application is

00:05:49,909 --> 00:05:54,139
slow or that I can actually do something

00:05:51,740 --> 00:05:54,680
to improve the performance but where do

00:05:54,139 --> 00:05:56,479
I start

00:05:54,680 --> 00:05:58,430
and you get online and start going

00:05:56,479 --> 00:06:00,050
through this turns like time to first

00:05:58,430 --> 00:06:02,449
buy it time to interactive first

00:06:00,050 --> 00:06:06,259
meaningful paint speedy index and you're

00:06:02,449 --> 00:06:09,139
like okay I am I have no idea how to

00:06:06,259 --> 00:06:11,630
start actually I have no idea what these

00:06:09,139 --> 00:06:14,210
mean and how I can actually represent

00:06:11,630 --> 00:06:16,370
these based on what I currently know

00:06:14,210 --> 00:06:19,219
about how a website works or how

00:06:16,370 --> 00:06:22,639
browsers work so let's dig into that a

00:06:19,219 --> 00:06:26,539
bit if we go if you look at an

00:06:22,639 --> 00:06:29,569
application to find my cursor yeah so if

00:06:26,539 --> 00:06:31,520
we look at our application you see that

00:06:29,569 --> 00:06:35,210
there are different stages right this is

00:06:31,520 --> 00:06:37,840
the Twitter the mobile version of the of

00:06:35,210 --> 00:06:41,449
the of the Twitter web app and you see

00:06:37,840 --> 00:06:44,389
it's running on 3G it's not exactly fast

00:06:41,449 --> 00:06:47,029
right it took around 10 seconds to to

00:06:44,389 --> 00:06:48,469
actually show something so if we were

00:06:47,029 --> 00:06:50,150
good to go over this again you see

00:06:48,469 --> 00:06:51,920
intermediary steps right now we have

00:06:50,150 --> 00:06:54,980
just the spinner now we have some count

00:06:51,920 --> 00:06:57,260
at the top now we wait and we wait and

00:06:54,980 --> 00:06:58,760
wait and only now we have some relevant

00:06:57,260 --> 00:07:01,010
content for the users right because

00:06:58,760 --> 00:07:02,420
users want to see tweets when they go to

00:07:01,010 --> 00:07:05,480
Twitter they don't want to see just the

00:07:02,420 --> 00:07:07,790
header so we have this intermediary

00:07:05,480 --> 00:07:11,030
steps when loading an application and

00:07:07,790 --> 00:07:13,760
let's try to let's try to see which are

00:07:11,030 --> 00:07:17,120
these steps and how we can how how do

00:07:13,760 --> 00:07:20,360
they map to those terms that performance

00:07:17,120 --> 00:07:22,610
standards are about so initially we have

00:07:20,360 --> 00:07:24,350
a blank page or in this case because

00:07:22,610 --> 00:07:28,070
it's a progressive web app it has the

00:07:24,350 --> 00:07:30,530
the logo but at this point the user

00:07:28,070 --> 00:07:33,710
doesn't know that something is happening

00:07:30,530 --> 00:07:35,810
they will just assume that the they

00:07:33,710 --> 00:07:37,490
might assume actually the the website is

00:07:35,810 --> 00:07:40,970
not working at all if you just display a

00:07:37,490 --> 00:07:42,800
blank plate page at certain at a certain

00:07:40,970 --> 00:07:45,020
point they have the first paint when

00:07:42,800 --> 00:07:47,060
they actually see something you will not

00:07:45,020 --> 00:07:51,980
see here but there's a there's a spinner

00:07:47,060 --> 00:07:54,140
in the middle this is this is the first

00:07:51,980 --> 00:07:57,230
time that the user has some indication

00:07:54,140 --> 00:08:00,230
that the operation that they requested

00:07:57,230 --> 00:08:04,070
loading the page actually worked or is

00:08:00,230 --> 00:08:06,200
working is in progress somehow then

00:08:04,070 --> 00:08:08,930
that's at a certain point we have some

00:08:06,200 --> 00:08:12,380
content being displayed this is called

00:08:08,930 --> 00:08:15,440
the first content full paint because at

00:08:12,380 --> 00:08:17,200
this point a first element that the

00:08:15,440 --> 00:08:21,770
browser considers to be content like

00:08:17,200 --> 00:08:24,110
text like links like anything that they

00:08:21,770 --> 00:08:26,960
add a browser considers content is being

00:08:24,110 --> 00:08:29,540
displayed so we have probably we have

00:08:26,960 --> 00:08:33,890
some fonts already loaded and we have

00:08:29,540 --> 00:08:35,900
the main layout in place after that we

00:08:33,890 --> 00:08:37,790
get this very important step called the

00:08:35,900 --> 00:08:40,220
first meaningful paint on which we were

00:08:37,790 --> 00:08:41,840
going to focus a bit today because this

00:08:40,220 --> 00:08:45,260
is the first time that the user actually

00:08:41,840 --> 00:08:47,180
sees what they perceive as the actual

00:08:45,260 --> 00:08:49,280
application so the layout is pretty much

00:08:47,180 --> 00:08:50,660
there it might be missing some content

00:08:49,280 --> 00:08:52,760
it might be missing some images and

00:08:50,660 --> 00:08:54,140
especially in Twitter's case that might

00:08:52,760 --> 00:08:56,810
be relevant because there are a lot of

00:08:54,140 --> 00:08:59,180
images that are being shared but

00:08:56,810 --> 00:09:02,600
nevertheless the user will see this as

00:08:59,180 --> 00:09:04,760
the application being ready they will

00:09:02,600 --> 00:09:05,690
have this perceived performance this is

00:09:04,760 --> 00:09:08,450
how it's actually called

00:09:05,690 --> 00:09:11,060
that the browser already loaded the

00:09:08,450 --> 00:09:12,620
application so it's crucial to get this

00:09:11,060 --> 00:09:16,010
first meaningful paint as soon as

00:09:12,620 --> 00:09:17,900
possible to our users one problem with

00:09:16,010 --> 00:09:20,540
this is that this is not interactive yet

00:09:17,900 --> 00:09:22,330
there's another step called there's

00:09:20,540 --> 00:09:26,090
another event called Page interactive

00:09:22,330 --> 00:09:27,890
and this is usually this usually takes

00:09:26,090 --> 00:09:29,360
time a bit after the initial render

00:09:27,890 --> 00:09:31,460
because you have you need to have time

00:09:29,360 --> 00:09:32,990
to download parse and execute JavaScript

00:09:31,460 --> 00:09:35,050
and especially in modern web

00:09:32,990 --> 00:09:39,740
applications which we're talking about

00:09:35,050 --> 00:09:42,770
this can take a lot of time and finally

00:09:39,740 --> 00:09:45,530
we have the page load so the first four

00:09:42,770 --> 00:09:49,070
frames here are part of the rendering

00:09:45,530 --> 00:09:52,400
part of performance this is this is what

00:09:49,070 --> 00:09:55,940
this is will be our focus for today the

00:09:52,400 --> 00:09:58,760
second part is is is strictly related or

00:09:55,940 --> 00:10:01,310
mostly related to interactivity to how

00:09:58,760 --> 00:10:04,940
fast and how much JavaScript you're

00:10:01,310 --> 00:10:07,010
actually executing on the on the browser

00:10:04,940 --> 00:10:10,430
when the page is loading and you can

00:10:07,010 --> 00:10:12,350
actually go to on the main stage at four

00:10:10,430 --> 00:10:14,690
o'clock to Brian's talk and he will talk

00:10:12,350 --> 00:10:16,670
specifically about getting your

00:10:14,690 --> 00:10:20,210
JavaScript to a minimum size and getting

00:10:16,670 --> 00:10:21,980
that interactivity sooner on on web

00:10:20,210 --> 00:10:24,440
applications so we're going to focus on

00:10:21,980 --> 00:10:26,390
the first four here but in order to

00:10:24,440 --> 00:10:28,400
focus on that let's actually now get

00:10:26,390 --> 00:10:30,050
into the technical part how what does

00:10:28,400 --> 00:10:33,800
have what what's happening actually when

00:10:30,050 --> 00:10:37,760
the browser does a request to the to the

00:10:33,800 --> 00:10:40,310
server so we you fetch a page and just

00:10:37,760 --> 00:10:42,470
as a parenthesis this scenario here is

00:10:40,310 --> 00:10:44,930
the optimal scenario that that we're

00:10:42,470 --> 00:10:46,880
going to see and then we're going to go

00:10:44,930 --> 00:10:49,310
through some of the steps that we need

00:10:46,880 --> 00:10:51,710
to do in order to make sure that this

00:10:49,310 --> 00:10:54,710
actually happens and this is this is

00:10:51,710 --> 00:10:56,180
even even more optimal at the end so you

00:10:54,710 --> 00:10:59,089
get oops sorry

00:10:56,180 --> 00:11:01,880
you get a the request and you get back

00:10:59,089 --> 00:11:04,730
some HTML right this is the basic idea

00:11:01,880 --> 00:11:07,880
of how browser should work now of course

00:11:04,730 --> 00:11:09,080
browser cannot really display that HTML

00:11:07,880 --> 00:11:10,760
at this point because it's just some

00:11:09,080 --> 00:11:13,430
tags with no style with no interaction

00:11:10,760 --> 00:11:14,900
in any with no interactivity this part

00:11:13,430 --> 00:11:16,880
here is called time to first byte

00:11:14,900 --> 00:11:18,380
because this is the time you're

00:11:16,880 --> 00:11:19,080
basically waiting behind the blank

00:11:18,380 --> 00:11:23,010
screen

00:11:19,080 --> 00:11:25,680
the the browser the browser has no has

00:11:23,010 --> 00:11:28,350
nothing to show you now the browser

00:11:25,680 --> 00:11:31,800
starts parsing HTML horn all starts from

00:11:28,350 --> 00:11:35,370
the head and the browser finds the first

00:11:31,800 --> 00:11:37,709
external resources stylesheets external

00:11:35,370 --> 00:11:40,620
stylesheets fonts images maybe

00:11:37,709 --> 00:11:42,329
javascript all of these resources which

00:11:40,620 --> 00:11:45,420
are encountered by the browsers are the

00:11:42,329 --> 00:11:47,910
red lights that we talked about whenever

00:11:45,420 --> 00:11:50,850
the browser comes to a external resource

00:11:47,910 --> 00:11:54,140
they have to stop wait for the resource

00:11:50,850 --> 00:11:58,019
to be fetched and then come back and

00:11:54,140 --> 00:12:00,870
resume the parsing of the HTML the

00:11:58,019 --> 00:12:02,820
browser needs HTML it needs the CSS to

00:12:00,870 --> 00:12:05,459
be applied so the Dom to be created the

00:12:02,820 --> 00:12:08,089
CSS on to be created to be composed and

00:12:05,459 --> 00:12:13,290
to actually be rendered on the screen

00:12:08,089 --> 00:12:17,220
now so the HTML gets parsed we ask for

00:12:13,290 --> 00:12:18,839
CSS we ask for fonts any other resources

00:12:17,220 --> 00:12:20,970
which are critical at this point this is

00:12:18,839 --> 00:12:22,620
what we call critical resources all the

00:12:20,970 --> 00:12:26,940
resources which are blocking the

00:12:22,620 --> 00:12:28,470
rendering phase after a while all these

00:12:26,940 --> 00:12:30,649
resources are back and now the browser

00:12:28,470 --> 00:12:33,149
starts assembling things together and

00:12:30,649 --> 00:12:35,100
this whole period here this is the most

00:12:33,149 --> 00:12:38,130
important part that we're gonna focusing

00:12:35,100 --> 00:12:39,600
on and this is where all these different

00:12:38,130 --> 00:12:41,399
steps that we already saw in the

00:12:39,600 --> 00:12:42,870
screenshots are happening the first pane

00:12:41,399 --> 00:12:47,149
the first contentful pane the first

00:12:42,870 --> 00:12:50,220
meaningful paint so now we get

00:12:47,149 --> 00:12:51,959
javascript now we get now we start

00:12:50,220 --> 00:12:54,839
making Ajax calls and we start

00:12:51,959 --> 00:12:56,640
populating the rest of the page and this

00:12:54,839 --> 00:13:00,149
is the interactivity part which we're

00:12:56,640 --> 00:13:02,550
not going to talk about so again focus

00:13:00,149 --> 00:13:05,100
is here on this part here and focus is

00:13:02,550 --> 00:13:07,079
basically on making sure that this part

00:13:05,100 --> 00:13:09,180
is squeezed in as much as possible to

00:13:07,079 --> 00:13:11,550
the top from the moment when the HTML is

00:13:09,180 --> 00:13:13,800
back the first time to the moment when

00:13:11,550 --> 00:13:16,380
we can have the first meaningful paint

00:13:13,800 --> 00:13:18,390
of that first render which is critical

00:13:16,380 --> 00:13:23,100
for the users to perceive our app as

00:13:18,390 --> 00:13:26,010
fast so this is called optimizing the

00:13:23,100 --> 00:13:28,079
critical rendering path and the whole

00:13:26,010 --> 00:13:31,890
point of this talk is then to make sure

00:13:28,079 --> 00:13:32,670
to go through a few ideas of how you can

00:13:31,890 --> 00:13:34,260
eliminate

00:13:32,670 --> 00:13:36,450
resources from your path because the

00:13:34,260 --> 00:13:38,340
less resources you have on your critical

00:13:36,450 --> 00:13:40,290
rendering path the fastest the browser

00:13:38,340 --> 00:13:43,350
will be able to render something for the

00:13:40,290 --> 00:13:46,650
user so first thing we need to do is

00:13:43,350 --> 00:13:48,620
make sure that JavaScript is off the

00:13:46,650 --> 00:13:53,580
critical path but how can we do that

00:13:48,620 --> 00:13:56,520
when our modern front-end applications

00:13:53,580 --> 00:13:57,780
are actually relying on JavaScript to

00:13:56,520 --> 00:14:01,250
render anything right usually our

00:13:57,780 --> 00:14:04,470
index.html is a blank page with some

00:14:01,250 --> 00:14:05,820
some references to some bundles from

00:14:04,470 --> 00:14:07,830
JavaScript bundles that are kicking

00:14:05,820 --> 00:14:09,870
everything in and start rendering the

00:14:07,830 --> 00:14:12,480
page well we do that with server-side

00:14:09,870 --> 00:14:14,670
rendering we take advantage of the

00:14:12,480 --> 00:14:17,850
modern capabilities of frameworks to

00:14:14,670 --> 00:14:21,540
render in node so when the users first

00:14:17,850 --> 00:14:26,190
fetches the the page does the first

00:14:21,540 --> 00:14:28,530
request they will wait a bit longer but

00:14:26,190 --> 00:14:31,140
on the server we'll make sure that the

00:14:28,530 --> 00:14:33,780
page is rendered their HTML is being

00:14:31,140 --> 00:14:36,510
built up out of the framework that

00:14:33,780 --> 00:14:38,400
that's running there so react angular

00:14:36,510 --> 00:14:41,130
view they all have the capability of

00:14:38,400 --> 00:14:43,170
doing this of rendering on the server so

00:14:41,130 --> 00:14:46,260
instead of this which is on the Left

00:14:43,170 --> 00:14:48,540
instead of waiting behind the spinner or

00:14:46,260 --> 00:14:50,400
behind an empty page the user will

00:14:48,540 --> 00:14:54,600
actually get this will get the first

00:14:50,400 --> 00:14:57,150
meaningful paint much sooner if you want

00:14:54,600 --> 00:14:59,370
to learn more about specifically in

00:14:57,150 --> 00:15:02,190
react I worked a bit on this and there's

00:14:59,370 --> 00:15:04,230
an article I published on on doing

00:15:02,190 --> 00:15:05,580
server-side rendering which you will you

00:15:04,230 --> 00:15:07,290
will find there's a link there if you go

00:15:05,580 --> 00:15:08,700
to the slides there's a there's a link

00:15:07,290 --> 00:15:11,520
at the end or so the slides if you

00:15:08,700 --> 00:15:13,530
didn't get that but it's a pretty

00:15:11,520 --> 00:15:16,290
straightforward operation and it's a

00:15:13,530 --> 00:15:19,560
huge win for performance now that we

00:15:16,290 --> 00:15:21,420
have our JavaScript that we don't need

00:15:19,560 --> 00:15:23,940
our JavaScript at this point with only

00:15:21,420 --> 00:15:26,790
we can only rely on the HTML and CSS

00:15:23,940 --> 00:15:29,400
that we get from the server we can

00:15:26,790 --> 00:15:31,170
further actually just kick out

00:15:29,400 --> 00:15:33,000
JavaScript from the rendering from the

00:15:31,170 --> 00:15:35,850
critical rendering path by using

00:15:33,000 --> 00:15:39,720
something like the differ attribute

00:15:35,850 --> 00:15:42,180
which if you see here it's you can also

00:15:39,720 --> 00:15:44,370
use async in some situations but the

00:15:42,180 --> 00:15:46,480
differ attribute will actually allow you

00:15:44,370 --> 00:15:49,540
to will tell the browser

00:15:46,480 --> 00:15:51,370
that HTML can be fully parsed the first

00:15:49,540 --> 00:15:53,769
meaningful paint or the first render can

00:15:51,370 --> 00:15:57,850
happen and only then JavaScript can be a

00:15:53,769 --> 00:16:01,180
should be executed you can read more

00:15:57,850 --> 00:16:03,220
about it also on that link there ok so

00:16:01,180 --> 00:16:06,220
talk about the first thing

00:16:03,220 --> 00:16:08,829
what about fonts are fonts a critical

00:16:06,220 --> 00:16:11,820
resource the answer to that is yes and

00:16:08,829 --> 00:16:15,459
no of course fonts are critical because

00:16:11,820 --> 00:16:17,470
we rely on them heavily I think almost

00:16:15,459 --> 00:16:21,970
everyone here in the room uses some sort

00:16:17,470 --> 00:16:24,760
of web web font for their website so the

00:16:21,970 --> 00:16:27,339
problem with this is that in some

00:16:24,760 --> 00:16:29,440
situations you might have to wait a bit

00:16:27,339 --> 00:16:31,630
for the fonts to actually load so you

00:16:29,440 --> 00:16:33,910
get this strange situation situation

00:16:31,630 --> 00:16:37,540
called a flash of invisible text your

00:16:33,910 --> 00:16:41,350
HTML is ready your CSS is ready the DOM

00:16:37,540 --> 00:16:43,329
is fully constructed but the browser can

00:16:41,350 --> 00:16:46,690
actually show content because the font

00:16:43,329 --> 00:16:49,839
is not the font is not yet loaded to

00:16:46,690 --> 00:16:54,100
circumvent this we can use font display

00:16:49,839 --> 00:16:56,470
which is a which is a great great trick

00:16:54,100 --> 00:16:58,810
in CSS you can actually read more about

00:16:56,470 --> 00:17:03,839
it on that link you can understand

00:16:58,810 --> 00:17:06,459
exactly how each each each individual

00:17:03,839 --> 00:17:08,919
option has a different strategy for

00:17:06,459 --> 00:17:10,839
handling this but for example one one of

00:17:08,919 --> 00:17:14,079
the easiest things is to use from this

00:17:10,839 --> 00:17:16,299
place swap and in that case when the

00:17:14,079 --> 00:17:17,949
HTML and the CSS are done the browser

00:17:16,299 --> 00:17:20,589
can perform the initial render with the

00:17:17,949 --> 00:17:24,069
default system font and then when the

00:17:20,589 --> 00:17:26,380
web font is ready that will be replaced

00:17:24,069 --> 00:17:31,150
on the spot in the back I mean in the

00:17:26,380 --> 00:17:33,940
background ok we kicked out some

00:17:31,150 --> 00:17:37,270
resources now it's time to see what's

00:17:33,940 --> 00:17:40,690
left and to prioritize what's left to

00:17:37,270 --> 00:17:43,750
say ok now we have 5 6 resources in our

00:17:40,690 --> 00:17:46,000
critical path how do we prioritize those

00:17:43,750 --> 00:17:52,140
how do we pray what do we prioritize

00:17:46,000 --> 00:17:55,450
actually and first of all we think about

00:17:52,140 --> 00:17:59,799
prioritizing of course what's in the in

00:17:55,450 --> 00:18:00,070
the viewport right we we think of we

00:17:59,799 --> 00:18:02,800
have

00:18:00,070 --> 00:18:04,990
this idea that everything that that is

00:18:02,800 --> 00:18:06,940
above the fault which is this invisible

00:18:04,990 --> 00:18:08,680
line that separating the viewport like

00:18:06,940 --> 00:18:10,630
the the content that actually is

00:18:08,680 --> 00:18:12,700
displayed to the user from the content

00:18:10,630 --> 00:18:14,350
that's not displayed and we try to

00:18:12,700 --> 00:18:18,580
prioritize everything above the fault

00:18:14,350 --> 00:18:22,120
and above the fold we can do things like

00:18:18,580 --> 00:18:25,210
inlining critical CSS or critical CSS is

00:18:22,120 --> 00:18:27,880
the is extracted for the globe from the

00:18:25,210 --> 00:18:29,890
global CSS and can be inlined

00:18:27,880 --> 00:18:32,710
into your HTML so you avoid another

00:18:29,890 --> 00:18:36,520
round trip to the server as the HTML is

00:18:32,710 --> 00:18:38,740
being parsed you can lazy load images

00:18:36,520 --> 00:18:40,810
because images are pretty much the

00:18:38,740 --> 00:18:44,050
heaviest thing that you have in web

00:18:40,810 --> 00:18:45,550
applications today and all the images

00:18:44,050 --> 00:18:47,440
which are not in the viewport you can

00:18:45,550 --> 00:18:50,140
actually load them progressively as the

00:18:47,440 --> 00:18:53,410
user starts scrolling we will talk about

00:18:50,140 --> 00:18:55,840
images on the next slide actually but

00:18:53,410 --> 00:18:58,390
you can also think of the entire page

00:18:55,840 --> 00:19:02,590
being progressively loaded because we

00:18:58,390 --> 00:19:04,480
have today things like dynamic imports

00:19:02,590 --> 00:19:06,520
when we use something like web pack so

00:19:04,480 --> 00:19:10,090
we will be able to load parts of the

00:19:06,520 --> 00:19:12,550
application as the user scrolls and of

00:19:10,090 --> 00:19:15,070
course even in the react community now

00:19:12,550 --> 00:19:17,410
we have a lot of a lot of activity

00:19:15,070 --> 00:19:19,870
behind the the new developments and the

00:19:17,410 --> 00:19:22,060
suspense API is doing exactly that it's

00:19:19,870 --> 00:19:25,870
offering you a way to lazy load parts of

00:19:22,060 --> 00:19:29,710
your content parts of your application a

00:19:25,870 --> 00:19:31,660
few tools that you can look up address

00:19:29,710 --> 00:19:34,240
money wrote in a library for extracting

00:19:31,660 --> 00:19:36,790
critical CSS which you can use in your

00:19:34,240 --> 00:19:39,660
application and also there is a react

00:19:36,790 --> 00:19:42,100
loadable it's a very nice quick

00:19:39,660 --> 00:19:46,230
libraries which you can use for your

00:19:42,100 --> 00:19:49,360
react application to make that

00:19:46,230 --> 00:19:52,990
progressive load of parts of your

00:19:49,360 --> 00:19:55,480
application so we talked about images

00:19:52,990 --> 00:19:56,800
now the main problem with images is that

00:19:55,480 --> 00:19:59,710
again we are not thinking about the

00:19:56,800 --> 00:20:02,500
context we say ok the browser loads on

00:19:59,710 --> 00:20:05,770
this this on this display we never think

00:20:02,500 --> 00:20:09,820
that on a full HD image can load on a

00:20:05,770 --> 00:20:11,950
360 pixels screen so you have 200 300

00:20:09,820 --> 00:20:13,660
kilobytes of data for nothing because

00:20:11,950 --> 00:20:14,890
the user doesn't actually see

00:20:13,660 --> 00:20:17,860
what's the difference between a full HD

00:20:14,890 --> 00:20:23,170
and a regular image resolution on such a

00:20:17,860 --> 00:20:26,080
small device and in order to do that of

00:20:23,170 --> 00:20:28,210
course takes a bit of effort but it's

00:20:26,080 --> 00:20:31,660
very easy it's extremely rewarding for

00:20:28,210 --> 00:20:34,870
the for the overall for the overall

00:20:31,660 --> 00:20:38,080
performance because images can be in the

00:20:34,870 --> 00:20:39,880
critical path I mean images can be

00:20:38,080 --> 00:20:41,830
meaningful that's that's the whole point

00:20:39,880 --> 00:20:45,010
we want to optimize what's what user

00:20:41,830 --> 00:20:47,080
sees first if the website is is focused

00:20:45,010 --> 00:20:49,060
on sharing images then we would like for

00:20:47,080 --> 00:20:50,800
users to see those images as soon as

00:20:49,060 --> 00:20:53,050
possible

00:20:50,800 --> 00:20:54,910
further you can of course lazy load

00:20:53,050 --> 00:20:57,550
images because you might not need them

00:20:54,910 --> 00:21:01,150
might not need images which are I know

00:20:57,550 --> 00:21:02,740
behind carousels or I got 12 image in a

00:21:01,150 --> 00:21:05,080
carousel might not be needed to be

00:21:02,740 --> 00:21:08,500
downloaded even if it is in the viewport

00:21:05,080 --> 00:21:11,890
and my favorite one you can use modern

00:21:08,500 --> 00:21:13,960
encoding there unfortunately here there

00:21:11,890 --> 00:21:15,580
is not a single encoding that's work

00:21:13,960 --> 00:21:21,100
works across browsers

00:21:15,580 --> 00:21:23,940
but there's web P in Chrome there's JPEG

00:21:21,100 --> 00:21:27,730
2000 I think in you know in Firefox

00:21:23,940 --> 00:21:29,530
there are each browser supports some

00:21:27,730 --> 00:21:33,310
form of modern encoding which will get

00:21:29,530 --> 00:21:34,900
your JPEG twice as small and maintaining

00:21:33,310 --> 00:21:37,600
the quality and you can use something

00:21:34,900 --> 00:21:40,690
like the picture tag to actually load

00:21:37,600 --> 00:21:44,680
different formats of images similar with

00:21:40,690 --> 00:21:47,410
how you use videos lazy sizes is a great

00:21:44,680 --> 00:21:48,790
library for image optimization which I

00:21:47,410 --> 00:21:51,340
highly recommend it should be the

00:21:48,790 --> 00:21:53,830
starting point and also there's this

00:21:51,340 --> 00:21:56,380
ebook image guides by again by adios

00:21:53,830 --> 00:22:01,450
money where they go over a lot of these

00:21:56,380 --> 00:22:06,850
image optimization techniques ok now we

00:22:01,450 --> 00:22:08,620
go to resource hints now that we managed

00:22:06,850 --> 00:22:11,800
to prioritize some of the things let's

00:22:08,620 --> 00:22:14,170
let's try to find tweak some some other

00:22:11,800 --> 00:22:17,770
some other stuff here for example we can

00:22:14,170 --> 00:22:23,890
use this new spec called link rel

00:22:17,770 --> 00:22:26,260
preload cedar to tell the browser that

00:22:23,890 --> 00:22:27,490
hey I'm going to use this resource so

00:22:26,260 --> 00:22:31,840
make sure that you load it

00:22:27,490 --> 00:22:33,940
as soon as you can this is this is just

00:22:31,840 --> 00:22:36,640
the beginning you can see there you can

00:22:33,940 --> 00:22:38,650
preload fonts you can prolong preload

00:22:36,640 --> 00:22:39,940
pretty much any resource that can go in

00:22:38,650 --> 00:22:43,059
a in a link tag

00:22:39,940 --> 00:22:47,040
the nice part you can also sort you can

00:22:43,059 --> 00:22:49,990
also preload script script files also

00:22:47,040 --> 00:22:53,830
the nice part is this is evolving into a

00:22:49,990 --> 00:22:57,429
newer spec that's going to land in HTML

00:22:53,830 --> 00:22:59,230
sometime in the future where we could

00:22:57,429 --> 00:23:02,140
you will be able to use this attribute

00:22:59,230 --> 00:23:05,170
of importance and you will be able to

00:23:02,140 --> 00:23:07,710
manually tell the browser that ok these

00:23:05,170 --> 00:23:10,720
resources are more important than these

00:23:07,710 --> 00:23:15,760
what all of these do is that they

00:23:10,720 --> 00:23:17,980
actually manipulate this priority here

00:23:15,760 --> 00:23:20,320
in chrome dev tools you'll be able to

00:23:17,980 --> 00:23:23,020
see the priority in your network tab if

00:23:20,320 --> 00:23:25,780
you toggle it on and you'll be able to

00:23:23,020 --> 00:23:28,030
see how the browser by default assigns

00:23:25,780 --> 00:23:30,100
some priorities to your resources but

00:23:28,030 --> 00:23:31,660
with link preload and with the with the

00:23:30,100 --> 00:23:34,240
new spec coming in you will be able to

00:23:31,660 --> 00:23:38,260
manipulate that even even more to to be

00:23:34,240 --> 00:23:40,300
able to to fully control how the browser

00:23:38,260 --> 00:23:44,110
in which order are the resource is being

00:23:40,300 --> 00:23:46,840
being downloaded by the browser one

00:23:44,110 --> 00:23:48,850
quick word about third parties never

00:23:46,840 --> 00:23:51,130
have third parties in your critical

00:23:48,850 --> 00:23:53,559
rendering path because the moment

00:23:51,130 --> 00:23:55,210
there's a third party outage your

00:23:53,559 --> 00:23:57,670
website will also have an outage because

00:23:55,210 --> 00:24:00,309
it will take 60 seconds for the timeout

00:23:57,670 --> 00:24:01,990
to come back and meanwhile the user will

00:24:00,309 --> 00:24:03,910
stand behind a blank screen because your

00:24:01,990 --> 00:24:05,860
your third party is on the critical

00:24:03,910 --> 00:24:08,320
rendering path so always make sure you

00:24:05,860 --> 00:24:10,840
use D for async for credit for rent for

00:24:08,320 --> 00:24:13,090
third parties if possible make sure you

00:24:10,840 --> 00:24:15,490
kick them out of the project this is a

00:24:13,090 --> 00:24:16,390
funny thing that happened in May when

00:24:15,490 --> 00:24:21,730
gdpr

00:24:16,390 --> 00:24:24,309
was released USA Today they decided that

00:24:21,730 --> 00:24:26,170
it's not worth implementing GDP our

00:24:24,309 --> 00:24:29,110
rules for their website so they just

00:24:26,170 --> 00:24:31,000
stripped their European version of the

00:24:29,110 --> 00:24:33,880
website of all the third parties and all

00:24:31,000 --> 00:24:37,590
the trackers so they got down for from

00:24:33,880 --> 00:24:40,440
5.2 megabytes to 500 kilobytes of

00:24:37,590 --> 00:24:42,600
of doubt that was like the payload of

00:24:40,440 --> 00:24:45,630
the entire website including images at

00:24:42,600 --> 00:24:50,880
that point so yeah Thank You gdpr for

00:24:45,630 --> 00:24:54,690
making the web faster yes finally one

00:24:50,880 --> 00:24:56,460
quick word when I'm usually I'm asking

00:24:54,690 --> 00:24:58,950
this I'm not going to ask this today but

00:24:56,460 --> 00:25:01,110
because I get the same response over and

00:24:58,950 --> 00:25:04,380
over again I see people are not using

00:25:01,110 --> 00:25:06,450
HTTP to yet it's I think it's the single

00:25:04,380 --> 00:25:09,210
easiest thing that you can actually do

00:25:06,450 --> 00:25:11,220
in your application which will improve

00:25:09,210 --> 00:25:13,740
the performance because you will start

00:25:11,220 --> 00:25:16,020
getting this parallel downloads of

00:25:13,740 --> 00:25:18,600
critical resources at a much faster rate

00:25:16,020 --> 00:25:20,340
than with HTTP one and it's fully

00:25:18,600 --> 00:25:22,470
backwards compatible so at this point

00:25:20,340 --> 00:25:24,210
it's been a standard for almost more

00:25:22,470 --> 00:25:27,450
than two years I think so you don't need

00:25:24,210 --> 00:25:29,640
to worry about anything before just

00:25:27,450 --> 00:25:32,279
before we wrap a few tools that you can

00:25:29,640 --> 00:25:35,399
use to improve performance overall and

00:25:32,279 --> 00:25:37,740
this will help you a lot also in gaining

00:25:35,399 --> 00:25:39,270
more experience about what needs to be

00:25:37,740 --> 00:25:42,809
done in order to improve performance

00:25:39,270 --> 00:25:44,820
first there's lighthouse by by Google

00:25:42,809 --> 00:25:48,750
this is already embedded in chrome dev

00:25:44,820 --> 00:25:50,340
tools under the audit tab and this is

00:25:48,750 --> 00:25:53,070
not only about performance it runs also

00:25:50,340 --> 00:25:55,620
accessibility security and all sorts of

00:25:53,070 --> 00:25:59,549
other aspects of software Quality is a

00:25:55,620 --> 00:26:03,179
great tool to run constantly GT metrics

00:25:59,549 --> 00:26:05,700
is a is a very nice platform or you can

00:26:03,179 --> 00:26:09,360
use just to track your waterfall charts

00:26:05,700 --> 00:26:13,559
to to track a lot of a lot of metrics of

00:26:09,360 --> 00:26:16,080
performance over time and webpagetest

00:26:13,559 --> 00:26:18,210
is I think actually the underlying thing

00:26:16,080 --> 00:26:21,090
that Google uses for lighthouse also so

00:26:18,210 --> 00:26:24,899
this is like the the root of performance

00:26:21,090 --> 00:26:26,940
testing overall and also there's others

00:26:24,899 --> 00:26:31,020
tools like speed curve or calibre which

00:26:26,940 --> 00:26:33,210
are more on the on the on the business

00:26:31,020 --> 00:26:35,850
side let's say where you you can pay a

00:26:33,210 --> 00:26:38,880
monthly fee so you can have some some

00:26:35,850 --> 00:26:43,679
constant metrics and dashboards and

00:26:38,880 --> 00:26:47,220
stuff like that so quick recap we talked

00:26:43,679 --> 00:26:49,919
about a few tricks to optimize your

00:26:47,220 --> 00:26:51,389
critical rendering path and things like

00:26:49,919 --> 00:26:52,919
server rendering your application

00:26:51,389 --> 00:26:55,469
things like prioritizing everything

00:26:52,919 --> 00:26:59,009
which is above the fold optimize images

00:26:55,469 --> 00:27:02,039
use HTTP - and so on there are a couple

00:26:59,009 --> 00:27:06,079
of links here which you can have a look

00:27:02,039 --> 00:27:09,179
at when you go on the on the slides

00:27:06,079 --> 00:27:11,009
which either go further from these to

00:27:09,179 --> 00:27:13,559
some other aspects of performance or

00:27:11,009 --> 00:27:16,639
simply are getting deeper into some of

00:27:13,559 --> 00:27:21,450
the things that we discussed today and

00:27:16,639 --> 00:27:23,309
one final word is that why why I'm

00:27:21,450 --> 00:27:24,719
trying to present these things and why I

00:27:23,309 --> 00:27:26,570
think it's important to talk about this

00:27:24,719 --> 00:27:29,009
is to also get people excited about

00:27:26,570 --> 00:27:33,989
performance because it's not it's it's

00:27:29,009 --> 00:27:35,609
actually one of the few areas in in in

00:27:33,989 --> 00:27:37,349
in web development where you actually

00:27:35,609 --> 00:27:39,149
get to see the improvements day by day

00:27:37,349 --> 00:27:40,950
and you get to do this small little

00:27:39,149 --> 00:27:43,369
tweak and you see a huge improvement for

00:27:40,950 --> 00:27:45,719
users so it's very nice and it's very

00:27:43,369 --> 00:27:49,109
it's very interesting and it's it

00:27:45,719 --> 00:27:51,419
especially it can be especially a very

00:27:49,109 --> 00:27:53,909
good thing for the morale of the team to

00:27:51,419 --> 00:27:55,679
have these performance success stories

00:27:53,909 --> 00:27:58,979
that people put the effort that people

00:27:55,679 --> 00:28:03,389
put behind them so yeah thank you very

00:27:58,979 --> 00:28:05,339
much and yeah I'm also be I'm gonna be

00:28:03,389 --> 00:28:08,129
around for questions after that because

00:28:05,339 --> 00:28:09,600
I know I ran a bit over time so sorry

00:28:08,129 --> 00:28:17,020
for that thank you

00:28:09,600 --> 00:28:17,020
[Applause]

00:28:20,950 --> 00:28:34,730
should I do the reading and yeah okay I

00:28:31,309 --> 00:28:36,559
will just go through one or two

00:28:34,730 --> 00:28:40,820
questions I see there I still have two

00:28:36,559 --> 00:28:45,049
more minutes here so modern encoding

00:28:40,820 --> 00:28:47,240
what about older browsers with modern so

00:28:45,049 --> 00:28:50,870
you can actually use the picture element

00:28:47,240 --> 00:28:52,759
which is a rather new spec of HTML where

00:28:50,870 --> 00:28:55,250
inside the picture element you can put

00:28:52,759 --> 00:28:57,320
different sources you can put a source

00:28:55,250 --> 00:28:59,450
for a modern encoding you can put the

00:28:57,320 --> 00:29:03,049
source as a default for JPEG and JPEG is

00:28:59,450 --> 00:29:05,600
as a default value so you will using

00:29:03,049 --> 00:29:07,879
that you will be able to improve the

00:29:05,600 --> 00:29:09,500
performance in in browsers the support

00:29:07,879 --> 00:29:12,940
modern encoding and you will not affect

00:29:09,500 --> 00:29:12,940
the browsers that don't support that

00:29:15,610 --> 00:29:25,490
yes ESS in jeaious I think it's it's not

00:29:20,649 --> 00:29:26,899
doesn't really if it's CSS in J's in in

00:29:25,490 --> 00:29:29,269
the way in which you're actually just

00:29:26,899 --> 00:29:31,029
writing CSS in J's but you're building

00:29:29,269 --> 00:29:33,139
to something like traditional age

00:29:31,029 --> 00:29:35,210
traditionally a JavaScript and the CSS

00:29:33,139 --> 00:29:37,840
is separate and of course there's no

00:29:35,210 --> 00:29:42,080
there's no problem with that

00:29:37,840 --> 00:29:44,179
I'm not sure if I don't have hands-on

00:29:42,080 --> 00:29:46,610
experience with that so I'm I'm not I

00:29:44,179 --> 00:29:49,509
won't be able to tell me if that impacts

00:29:46,610 --> 00:29:49,509
performance in any way

00:29:54,590 --> 00:29:59,570
good practice to learn important

00:29:56,990 --> 00:30:04,520
libraries asynchronous or differ the

00:29:59,570 --> 00:30:06,470
problem with async is that acing does

00:30:04,520 --> 00:30:08,630
not guarantee that the order in which

00:30:06,470 --> 00:30:11,860
you put the resources is the order in

00:30:08,630 --> 00:30:14,870
which they get executed so if you have

00:30:11,860 --> 00:30:18,020
some script that depends on something to

00:30:14,870 --> 00:30:20,780
be executed before that you will not be

00:30:18,020 --> 00:30:23,530
able to use async without having some

00:30:20,780 --> 00:30:26,990
sort of conflict or potential conflicts

00:30:23,530 --> 00:30:29,150
now I assume that this question is in

00:30:26,990 --> 00:30:33,770
the context of not necessarily having a

00:30:29,150 --> 00:30:36,290
modern front-end application driven by a

00:30:33,770 --> 00:30:38,480
front-end framework but rather something

00:30:36,290 --> 00:30:40,700
like Ruby on Rails or PHP and in that

00:30:38,480 --> 00:30:44,420
case I think the whole strategy should

00:30:40,700 --> 00:30:46,250
be different because then you will don't

00:30:44,420 --> 00:30:48,260
you you will need to rely on some

00:30:46,250 --> 00:30:49,910
resources in order to load the page

00:30:48,260 --> 00:30:51,500
faster and it's a bit of a different

00:30:49,910 --> 00:30:55,960
story than with this with server-side

00:30:51,500 --> 00:31:00,910
rendering and with deferring JavaScript

00:30:55,960 --> 00:31:00,910
okay do I have time for more or should I

00:31:01,990 --> 00:31:19,180
does anyone want to come on stage and

00:31:04,310 --> 00:31:24,770
speak something ok let's see ok yeah

00:31:19,180 --> 00:31:26,780
there is a I only worked in in Ruby with

00:31:24,770 --> 00:31:31,190
something called dragonfly which allows

00:31:26,780 --> 00:31:33,110
you to generate on-the-spot different

00:31:31,190 --> 00:31:35,840
resolutions for your images based on the

00:31:33,110 --> 00:31:39,070
requests that are coming in but I'm

00:31:35,840 --> 00:31:41,600
pretty sure that most of the server

00:31:39,070 --> 00:31:43,880
frameworks have some sort of

00:31:41,600 --> 00:31:47,300
implementation for that and there's also

00:31:43,880 --> 00:31:50,270
I think image image magic I think it's

00:31:47,300 --> 00:31:51,710
like a a pretty standard library in most

00:31:50,270 --> 00:31:54,340
implemented in most of the languages

00:31:51,710 --> 00:31:57,530
that has support for that kind of thing

00:31:54,340 --> 00:31:59,330
ok I'm going to probably get off the

00:31:57,530 --> 00:32:00,950
stage now and we can continue the

00:31:59,330 --> 00:32:02,350
discussion there and everyone can take a

00:32:00,950 --> 00:32:04,410
break thank you

00:32:02,350 --> 00:32:04,410

YouTube URL: https://www.youtube.com/watch?v=j0c8UnfIQzQ


