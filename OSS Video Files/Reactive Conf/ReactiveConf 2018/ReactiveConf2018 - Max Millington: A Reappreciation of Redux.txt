Title: ReactiveConf2018 - Max Millington: A Reappreciation of Redux
Publication date: 2018-11-02
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
A Reappreciation of Redux: Why my team at PayPal removed ApolloClient and went back to Redux

Keeping up with the JavaScript community can be one of the most difficult yet enjoyable parts of being a frontend developer. It is not easy to know what will truly deliver lasting value to your development as opposed to what is merely a passing fad or what will fail to live up to its hype. Max's at PayPal has been excitedly using GraphQL in many of our new apps. They love the idea of a single endpoint providing frontend developers access to the great multitude of PayPal services. In their excitement for GraphQL, they also implemented Apollo Client and React Apollo into our app. After all, the boilerplate and heavy weight of Redux has been much maligned, and they saw and easy way to significantly reduce the amount of code we wrote, all the while utilizing the sleek new utility for state management that Apollo Client provided. However, they soon realized that they had made a mistake and pre-emptively jumped into Apollo Client. The fact of the matter is, Redux is much more than simply state management, and they had failed in their original estimation to fully appreciate what Redux gave our app that Apollo Client simply does not. This talk will explore why they initially were so excited about Apollo Client and why it was their first choice. It will then explain how Apollo Client fell short of our needs, and why Redux is a significantly better choice for most larger applications. Finally, it will hope to inspire a reappreciation for Redux.
Captions: 
	00:00:02,040 --> 00:00:08,610
[Music]

00:00:11,900 --> 00:00:15,299
hi hi everybody I'm really happy to be

00:00:14,969 --> 00:00:18,599
here

00:00:15,299 --> 00:00:21,720
this is a great event and I'm here to

00:00:18,599 --> 00:00:25,199
share my experience about going back to

00:00:21,720 --> 00:00:27,150
redux and re appreciating redux a quick

00:00:25,199 --> 00:00:31,050
note before this talk started I wrote

00:00:27,150 --> 00:00:32,189
this talk before hooks were announced so

00:00:31,050 --> 00:00:33,690
in case you're wondering I am gonna

00:00:32,189 --> 00:00:34,980
address hooked towards the end of my

00:00:33,690 --> 00:00:37,379
talk and I think it'll fit nicely

00:00:34,980 --> 00:00:40,710
actually with what I'm saying

00:00:37,379 --> 00:00:43,379
so before we get into it let's just a

00:00:40,710 --> 00:00:45,989
bit of an introduction again my name is

00:00:43,379 --> 00:00:48,750
Max I'm a software engineer at PayPal I

00:00:45,989 --> 00:00:50,820
work primarily in JavaScript and I

00:00:48,750 --> 00:00:53,280
specialize in react and building new

00:00:50,820 --> 00:00:54,899
products I wanted to mention that I

00:00:53,280 --> 00:00:57,449
build new products because in my

00:00:54,899 --> 00:00:59,309
experience engineers who work on open

00:00:57,449 --> 00:01:01,079
source and engineers who build products

00:00:59,309 --> 00:01:02,820
often have different priorities and I'm

00:01:01,079 --> 00:01:05,220
sure there's many of you in the audience

00:01:02,820 --> 00:01:07,170
now who are working on products and will

00:01:05,220 --> 00:01:08,640
read tutorials or read what open-source

00:01:07,170 --> 00:01:12,330
developers have to say and think like

00:01:08,640 --> 00:01:13,500
okay it's it's harder to adapt or to

00:01:12,330 --> 00:01:16,220
understand how it fits into what I'm

00:01:13,500 --> 00:01:18,360
doing our code is grittier and we have a

00:01:16,220 --> 00:01:22,289
we have a greater emphasis on simplicity

00:01:18,360 --> 00:01:24,569
and durability accordingly the tools we

00:01:22,289 --> 00:01:26,729
use become less desirable the more

00:01:24,569 --> 00:01:29,280
clever they are something that might

00:01:26,729 --> 00:01:31,080
save me time in lines of code up front

00:01:29,280 --> 00:01:33,060
might be good for the first few weeks of

00:01:31,080 --> 00:01:34,470
a project but if I ultimately don't

00:01:33,060 --> 00:01:36,720
understand what's going on the tool

00:01:34,470 --> 00:01:39,530
could become unsustainable as soon as

00:01:36,720 --> 00:01:42,450
the first unforeseen problem arises

00:01:39,530 --> 00:01:44,069
furthermore in my experience new tools

00:01:42,450 --> 00:01:46,349
that emphasize cleverness or handle too

00:01:44,069 --> 00:01:49,500
much for me often do not take into

00:01:46,349 --> 00:01:51,360
consideration every edge case and it can

00:01:49,500 --> 00:01:53,250
also be hard to refactor the tool

00:01:51,360 --> 00:01:55,140
properly and update it for for edge

00:01:53,250 --> 00:01:57,030
cases and since I work at PayPal I've

00:01:55,140 --> 00:01:58,679
got I have right products to deal with

00:01:57,030 --> 00:02:00,000
millions of merchants and hundreds of

00:01:58,679 --> 00:02:01,590
millions of consumers so I could tell

00:02:00,000 --> 00:02:03,599
you we have a lot of edge cases which is

00:02:01,590 --> 00:02:06,420
why so many PayPal tools are actually

00:02:03,599 --> 00:02:07,830
built internally not because we think

00:02:06,420 --> 00:02:09,090
we're better but because we've tried a

00:02:07,830 --> 00:02:12,180
lot of the alternatives and they often

00:02:09,090 --> 00:02:13,860
just won't work for our use cases so

00:02:12,180 --> 00:02:15,510
let's talk briefly about the front end

00:02:13,860 --> 00:02:18,420
landscape today

00:02:15,510 --> 00:02:21,030
so JavaScript developers especially

00:02:18,420 --> 00:02:22,710
front-end developers we constantly have

00:02:21,030 --> 00:02:25,380
to re-examine the technological tooling

00:02:22,710 --> 00:02:27,960
landscape this is both a benefit and a

00:02:25,380 --> 00:02:30,240
potential pitfall of our profession on

00:02:27,960 --> 00:02:31,800
the one hand I've never met an engineer

00:02:30,240 --> 00:02:33,780
that's not interested in learning new

00:02:31,800 --> 00:02:35,850
things making applications more

00:02:33,780 --> 00:02:37,800
efficient and expanding their knowledge

00:02:35,850 --> 00:02:40,290
but on the other hand I think we've all

00:02:37,800 --> 00:02:42,630
experienced a time where we've we've

00:02:40,290 --> 00:02:44,190
been burned by some technology it was

00:02:42,630 --> 00:02:46,530
the we used it because it was the cool

00:02:44,190 --> 00:02:48,570
hot new thing and that only turned out

00:02:46,530 --> 00:02:52,170
to be a tech tech debt generating

00:02:48,570 --> 00:02:53,670
nightmare later on so my so I'm here to

00:02:52,170 --> 00:02:56,690
talk a little bit about my experience

00:02:53,670 --> 00:02:59,130
with this on a recent project at PayPal

00:02:56,690 --> 00:03:02,010
we had a brand new project and we

00:02:59,130 --> 00:03:03,570
eagerly jumped at the chance to use

00:03:02,010 --> 00:03:05,310
whatever contemporary technology we

00:03:03,570 --> 00:03:07,860
wanted and we spent some time

00:03:05,310 --> 00:03:09,240
researching the shape of our shape that

00:03:07,860 --> 00:03:10,920
our repository would look like so this

00:03:09,240 --> 00:03:12,660
mark this talk is as much about RIA

00:03:10,920 --> 00:03:15,180
ppreciate in real acts as it is kind of

00:03:12,660 --> 00:03:19,050
fun what I learned finding away excuse

00:03:15,180 --> 00:03:22,740
me what I learned as a way to appreciate

00:03:19,050 --> 00:03:26,250
and and adequately identify the benefits

00:03:22,740 --> 00:03:27,900
of a new technology so at PayPal we were

00:03:26,250 --> 00:03:29,430
already big fans of react so that that

00:03:27,900 --> 00:03:32,070
didn't really come into question we were

00:03:29,430 --> 00:03:33,630
definitely going to use react and then

00:03:32,070 --> 00:03:36,510
we have some teams that are really

00:03:33,630 --> 00:03:39,420
investing heavily in graph QL and our

00:03:36,510 --> 00:03:41,730
team my team was really excited about

00:03:39,420 --> 00:03:43,020
the prospect of using graph QL so we

00:03:41,730 --> 00:03:45,000
eagerly went down the rabbit hole and

00:03:43,020 --> 00:03:49,110
familiarize ourselves with the ecosystem

00:03:45,000 --> 00:03:50,340
and the community during our research in

00:03:49,110 --> 00:03:52,320
part there is a great there's a great

00:03:50,340 --> 00:03:54,180
blog post by someone on the Apollo team

00:03:52,320 --> 00:03:55,680
named Peggy vases who talks who wrote a

00:03:54,180 --> 00:03:57,120
blog post something called something

00:03:55,680 --> 00:04:00,390
like the future of state management and

00:03:57,120 --> 00:04:02,520
that was really great and I I went to

00:04:00,390 --> 00:04:04,020
the there was an Apollo graph QL

00:04:02,520 --> 00:04:04,980
conference in San Francisco I went to

00:04:04,020 --> 00:04:08,220
that and I was like this is all really

00:04:04,980 --> 00:04:09,270
great and at the same time we were kind

00:04:08,220 --> 00:04:12,660
of questioning whether or not we really

00:04:09,270 --> 00:04:14,640
needed Redux Redux his downsides are

00:04:12,660 --> 00:04:16,650
well known I've already talked with some

00:04:14,640 --> 00:04:19,049
people in the audience yesterday and

00:04:16,650 --> 00:04:22,080
today about them so we were really

00:04:19,049 --> 00:04:26,100
seriously considering using a Apollo

00:04:22,080 --> 00:04:27,600
client with graph QL on top of that last

00:04:26,100 --> 00:04:29,760
month someone pointed me out to this

00:04:27,600 --> 00:04:31,500
teeth tweet by Andrew Clark Andrew Clark

00:04:29,760 --> 00:04:33,480
is one of the co-creators of Redux and

00:04:31,500 --> 00:04:35,070
he had this to say about it that Redux

00:04:33,480 --> 00:04:36,300
is a stupid event emitter

00:04:35,070 --> 00:04:38,190
with disproportionately excellent

00:04:36,300 --> 00:04:40,140
ecosystem of tools built on top of it I

00:04:38,190 --> 00:04:42,120
wonder what the opportunity cost of that

00:04:40,140 --> 00:04:43,920
ecosystem is imagine if these tools were

00:04:42,120 --> 00:04:46,950
built on top of something owns a stupid

00:04:43,920 --> 00:04:49,410
event like react so I think that looking

00:04:46,950 --> 00:04:51,060
at it now the last census he's probably

00:04:49,410 --> 00:04:52,710
talking about hooks but the reason I

00:04:51,060 --> 00:04:55,200
this didn't affect our decision in all

00:04:52,710 --> 00:04:56,550
cuz we this this tweet was made many

00:04:55,200 --> 00:05:00,300
many months after we had already made

00:04:56,550 --> 00:05:03,240
our decision but I put in a point point

00:05:00,300 --> 00:05:06,660
this out because a lot of people feel

00:05:03,240 --> 00:05:08,940
the same way about Redux and I even

00:05:06,660 --> 00:05:10,590
though I was never super anti Redux but

00:05:08,940 --> 00:05:14,970
I did want to move on just to something

00:05:10,590 --> 00:05:16,500
more developed so briefly I wanna this

00:05:14,970 --> 00:05:19,850
talk releasing too much about Apollo

00:05:16,500 --> 00:05:22,470
client but I just wanted to show a brief

00:05:19,850 --> 00:05:26,910
example of Apollo client for anybody who

00:05:22,470 --> 00:05:28,410
hasn't used it and you could see why

00:05:26,910 --> 00:05:30,330
something like this would be attractive

00:05:28,410 --> 00:05:32,340
I mean we've got our functional

00:05:30,330 --> 00:05:34,650
component our query up top and what I

00:05:32,340 --> 00:05:37,260
really like is a we've got loading and

00:05:34,650 --> 00:05:39,810
arrow States kind of taken care of for

00:05:37,260 --> 00:05:41,610
us I mean we've already seen talks talk

00:05:39,810 --> 00:05:45,030
about like oh there's it's really really

00:05:41,610 --> 00:05:46,290
encumbering to have to handle loading in

00:05:45,030 --> 00:05:48,360
Aero states because there's a lot of

00:05:46,290 --> 00:05:52,860
human work involved and therefore a lot

00:05:48,360 --> 00:05:54,840
of capacity for error so anyway my team

00:05:52,860 --> 00:05:58,020
was using graph QL Apollo client and we

00:05:54,840 --> 00:06:00,810
were happy for a while however we soon

00:05:58,020 --> 00:06:02,430
began to second-guess our choice we

00:06:00,810 --> 00:06:04,110
found that there were some limitations

00:06:02,430 --> 00:06:06,120
and peculiarities about Apollo client

00:06:04,110 --> 00:06:07,740
that we didn't like and also we found

00:06:06,120 --> 00:06:10,980
ourselves missing many of the core

00:06:07,740 --> 00:06:14,070
features of redux and the process we

00:06:10,980 --> 00:06:16,170
started to reevaluate Redux and take a

00:06:14,070 --> 00:06:17,760
look at what was good about it what were

00:06:16,170 --> 00:06:19,770
we really missing and I think in the

00:06:17,760 --> 00:06:22,500
process identified what I think is

00:06:19,770 --> 00:06:24,360
really great about Redux so again I'm

00:06:22,500 --> 00:06:25,980
not going to talk too much about Apollo

00:06:24,360 --> 00:06:28,950
client I have a high opinion of the

00:06:25,980 --> 00:06:31,800
Apollo team and I think that it's a it's

00:06:28,950 --> 00:06:33,930
a great product and neither is my point

00:06:31,800 --> 00:06:36,000
to just use Redux which again I'll

00:06:33,930 --> 00:06:38,550
discuss hooks at the end I think again

00:06:36,000 --> 00:06:41,550
some of the critics of Redux are

00:06:38,550 --> 00:06:42,690
justified but nevertheless I think that

00:06:41,550 --> 00:06:44,280
there's going to be something there's

00:06:42,690 --> 00:06:47,250
something valuable underneath Redux

00:06:44,280 --> 00:06:49,040
which we should all take away and again

00:06:47,250 --> 00:06:53,720
I'm also going to talk about

00:06:49,040 --> 00:06:55,940
what by by what means we evaluate a new

00:06:53,720 --> 00:06:57,800
technology so let's go back to this

00:06:55,940 --> 00:07:01,280
Andrew Clark treat tweet real quick even

00:06:57,800 --> 00:07:03,170
he acknowledges that the quality of

00:07:01,280 --> 00:07:04,820
tuning tooling is exceedingly good and

00:07:03,170 --> 00:07:08,600
we had become really lazy in our

00:07:04,820 --> 00:07:10,130
development we we had become very

00:07:08,600 --> 00:07:12,320
reliant on the Reid extra tools

00:07:10,130 --> 00:07:14,690
time-traveling things of the like even

00:07:12,320 --> 00:07:16,040
some of the middleware and for all you

00:07:14,690 --> 00:07:18,740
product engineers out there ask

00:07:16,040 --> 00:07:21,800
yourselves do I really have the time

00:07:18,740 --> 00:07:24,290
just to sacrifice do I can I really

00:07:21,800 --> 00:07:26,450
sacrifice time to have my team learn

00:07:24,290 --> 00:07:29,810
some new technology and then not have

00:07:26,450 --> 00:07:31,420
the ecosystem and tooling around it and

00:07:29,810 --> 00:07:33,890
again this isn't the fault of any other

00:07:31,420 --> 00:07:35,930
technology Redux has just been around

00:07:33,890 --> 00:07:37,910
really a long time and it's been the

00:07:35,930 --> 00:07:41,500
standard in the ecosystem as and the

00:07:37,910 --> 00:07:44,180
community has rewarded it accordingly

00:07:41,500 --> 00:07:48,290
further we don't really know the future

00:07:44,180 --> 00:07:49,670
of graph QL at PayPal again PayPal devs

00:07:48,290 --> 00:07:52,660
are investing a fair amount of energy

00:07:49,670 --> 00:07:54,620
into it and my team is a fan in so far

00:07:52,660 --> 00:07:57,230
we've encountered a good degree of

00:07:54,620 --> 00:07:59,450
success using it however again it's

00:07:57,230 --> 00:08:02,180
future is far from certain so for all I

00:07:59,450 --> 00:08:05,210
know for some reason we might need to go

00:08:02,180 --> 00:08:06,890
back to rest api's or rest endpoints or

00:08:05,210 --> 00:08:09,800
we might have to have some rest api s

00:08:06,890 --> 00:08:12,440
and then we can use graph QL when we

00:08:09,800 --> 00:08:14,870
want and this is a clear benefit of

00:08:12,440 --> 00:08:16,370
something like Redux shines or any other

00:08:14,870 --> 00:08:18,860
technology for that matter which is

00:08:16,370 --> 00:08:21,860
really agnostic to this fact redock

00:08:18,860 --> 00:08:25,340
really doesn't care where I'm getting my

00:08:21,860 --> 00:08:27,710
data from and so today today you know my

00:08:25,340 --> 00:08:30,740
app or one of my apps is in is in graph

00:08:27,710 --> 00:08:32,300
QL and Redux oh and and I also didn't

00:08:30,740 --> 00:08:37,700
want to use some combination which I

00:08:32,300 --> 00:08:39,680
think would be for obvious reasons so

00:08:37,700 --> 00:08:41,840
these these two reasons are these few

00:08:39,680 --> 00:08:45,020
reasons are kind of trivial in my

00:08:41,840 --> 00:08:46,850
opinion they're kind of superficial but

00:08:45,020 --> 00:08:48,290
as I mentioned you know I'm a product

00:08:46,850 --> 00:08:50,510
engineer and I'm sure many of you are as

00:08:48,290 --> 00:08:53,600
well and sometimes these trivial reasons

00:08:50,510 --> 00:08:56,060
are good enough for us to use the

00:08:53,600 --> 00:08:59,120
technology however upon further

00:08:56,060 --> 00:09:00,680
reflection again something deeper is

00:08:59,120 --> 00:09:01,840
really really strong about Redux and

00:09:00,680 --> 00:09:04,029
that's what I'm going to talk about now

00:09:01,840 --> 00:09:05,560
and I'm not gonna bury the lede anymore

00:09:04,029 --> 00:09:08,080
the what I think is really really

00:09:05,560 --> 00:09:11,080
powerful about Redux is the functional

00:09:08,080 --> 00:09:13,450
paradigm that that exists underneath it

00:09:11,080 --> 00:09:14,830
and before before I talk about that I

00:09:13,450 --> 00:09:18,430
want to talk a little bit about how I

00:09:14,830 --> 00:09:21,220
approached the problem so this is

00:09:18,430 --> 00:09:23,020
Aristotle he's a you know an ancient

00:09:21,220 --> 00:09:25,089
Greek philosopher and he had lots of

00:09:23,020 --> 00:09:27,700
things to say but one thing that really

00:09:25,089 --> 00:09:29,950
stuck with me when I was reading him is

00:09:27,700 --> 00:09:31,420
the way he examined a problem or subject

00:09:29,950 --> 00:09:33,940
whenever he was approaching something

00:09:31,420 --> 00:09:37,240
new he would always begin by examining

00:09:33,940 --> 00:09:39,400
the opinions of everyone else and it's

00:09:37,240 --> 00:09:42,070
not it's not just that that was really

00:09:39,400 --> 00:09:43,779
great it was the way he was never

00:09:42,070 --> 00:09:45,279
dismissive and would always attempt to

00:09:43,779 --> 00:09:49,150
find the truth or what was really great

00:09:45,279 --> 00:09:51,730
about an opinion even if the opinion on

00:09:49,150 --> 00:09:54,610
the surface appeared to be false or even

00:09:51,730 --> 00:09:58,000
insane so I'm gonna go through one

00:09:54,610 --> 00:09:59,350
opinion real one case real quick so

00:09:58,000 --> 00:10:01,330
Aristotle spent a lot of his time

00:09:59,350 --> 00:10:02,680
talking about change what is the nature

00:10:01,330 --> 00:10:05,230
of change what's the definition of

00:10:02,680 --> 00:10:08,650
change how has changed possible and in

00:10:05,230 --> 00:10:11,230
doing so he examined two pretty

00:10:08,650 --> 00:10:14,460
ridiculous opinions one is one is that

00:10:11,230 --> 00:10:16,390
of Parmenides who's on the left here

00:10:14,460 --> 00:10:18,100
Parmenides hold that held that

00:10:16,390 --> 00:10:21,310
everything we perceive is an illusion

00:10:18,100 --> 00:10:23,800
change does not occur our perception of

00:10:21,310 --> 00:10:25,120
change is merely an error of opinion so

00:10:23,800 --> 00:10:27,640
this this opinion is pretty ridiculous

00:10:25,120 --> 00:10:28,839
in my opinion but but trust me the

00:10:27,640 --> 00:10:30,700
ancient Greeks actually had a really

00:10:28,839 --> 00:10:34,180
hard time refuting this and this guy

00:10:30,700 --> 00:10:36,160
actually had whole cults devoted to him

00:10:34,180 --> 00:10:39,130
of his most famous founder it was Zeno

00:10:36,160 --> 00:10:41,170
of Zeno's paradoxes ii ridiculous

00:10:39,130 --> 00:10:42,880
opinion is that of Heraclitus who is on

00:10:41,170 --> 00:10:45,250
the right he spoke in poems so he said

00:10:42,880 --> 00:10:48,160
no one steps in the same river twice and

00:10:45,250 --> 00:10:49,570
what he's getting at is that everything

00:10:48,160 --> 00:10:53,260
is constantly in flux and there's no

00:10:49,570 --> 00:10:55,150
identity so the the you are not the same

00:10:53,260 --> 00:10:57,310
you you were five minutes ago and you

00:10:55,150 --> 00:10:59,860
will not be the same thing five minutes

00:10:57,310 --> 00:11:02,170
from now I think it's fair to say that

00:10:59,860 --> 00:11:03,310
both these opinions are pretty

00:11:02,170 --> 00:11:04,540
ridiculous and most people would just

00:11:03,310 --> 00:11:06,250
ignore them after all it's fairly

00:11:04,540 --> 00:11:09,220
obvious that change occurs my hands are

00:11:06,250 --> 00:11:11,200
moving I'm speaking and then similarly

00:11:09,220 --> 00:11:13,240
in some respects if I step in the

00:11:11,200 --> 00:11:15,310
Mississippi River today and tomorrow

00:11:13,240 --> 00:11:17,230
something about it's the same the water

00:11:15,310 --> 00:11:18,389
water is constantly moving so it changes

00:11:17,230 --> 00:11:20,620
but something about it's the same

00:11:18,389 --> 00:11:22,660
however these these opinions were took

00:11:20,620 --> 00:11:24,699
very seriously by Aristotle and he used

00:11:22,660 --> 00:11:28,230
them as the starting point to build his

00:11:24,699 --> 00:11:32,410
own system of physics and philosophy and

00:11:28,230 --> 00:11:34,329
and what I look from it is that his

00:11:32,410 --> 00:11:36,009
belief that no one would ever earnestly

00:11:34,329 --> 00:11:39,009
hold an opinion without there being some

00:11:36,009 --> 00:11:42,730
truth to it that I could apply the same

00:11:39,009 --> 00:11:44,259
logic to not so ridiculous opinions so

00:11:42,730 --> 00:11:46,930
what does this have to do with redux I

00:11:44,259 --> 00:11:49,410
use this extreme example of Aristotle

00:11:46,930 --> 00:11:52,120
dealing with ridiculous opinions and

00:11:49,410 --> 00:11:54,459
Redux is not ridiculous however I talk

00:11:52,120 --> 00:11:55,300
to a lot of people and they some people

00:11:54,459 --> 00:11:57,040
think it's like a foregone conclusion

00:11:55,300 --> 00:11:58,839
like oh you're still using real arcs

00:11:57,040 --> 00:12:01,300
it's it's really annoying I have to go

00:11:58,839 --> 00:12:04,930
to like four different files to to

00:12:01,300 --> 00:12:07,360
access my data and okay fair enough fair

00:12:04,930 --> 00:12:08,949
enough but why is it been so popular the

00:12:07,360 --> 00:12:13,649
past three to four years why has it been

00:12:08,949 --> 00:12:15,999
like the standard for most web apps and

00:12:13,649 --> 00:12:17,920
so that's that's kind of what I want to

00:12:15,999 --> 00:12:20,860
talk about and again I'm not going to

00:12:17,920 --> 00:12:22,629
talk about that you have to use Redux or

00:12:20,860 --> 00:12:27,279
that Redux is perfect I think some of

00:12:22,629 --> 00:12:28,509
the critiques are justified and eat but

00:12:27,279 --> 00:12:31,089
however even though there's some less

00:12:28,509 --> 00:12:32,290
than purposed aspects to it it doesn't

00:12:31,089 --> 00:12:34,449
mean that we shouldn't try to figure out

00:12:32,290 --> 00:12:35,290
what's great about it I don't I just

00:12:34,449 --> 00:12:37,000
want to make sure we don't throw the

00:12:35,290 --> 00:12:39,579
baby out with the bathwater if we end up

00:12:37,000 --> 00:12:41,680
if you end up moving around if you end

00:12:39,579 --> 00:12:43,269
up moving from Redux and so before I

00:12:41,680 --> 00:12:44,980
talk about Redux there's one last thing

00:12:43,269 --> 00:12:47,949
I want to address which I think will

00:12:44,980 --> 00:12:49,120
also influence the way we look at it if

00:12:47,949 --> 00:12:50,620
we think if we think about the same

00:12:49,120 --> 00:12:52,980
reason you can ask the same question

00:12:50,620 --> 00:12:55,809
about react why is react been so popular

00:12:52,980 --> 00:12:58,509
the past ever since it was made and I

00:12:55,809 --> 00:13:00,309
think the the the reason is because the

00:12:58,509 --> 00:13:03,519
essential elements of react are very

00:13:00,309 --> 00:13:05,679
simple I think that oftentimes when

00:13:03,519 --> 00:13:07,899
people discuss react they think oh it's

00:13:05,679 --> 00:13:09,579
it's got a high barrier to entry webpack

00:13:07,899 --> 00:13:11,259
some nightmare just getting an app up

00:13:09,579 --> 00:13:13,509
and running is tough state management is

00:13:11,259 --> 00:13:15,009
hard fair enough but I'll tell you that

00:13:13,509 --> 00:13:16,300
at PayPal we have a lot of interns and

00:13:15,009 --> 00:13:18,220
why when they come in they don't know

00:13:16,300 --> 00:13:20,199
react but if they know JavaScript I'll

00:13:18,220 --> 00:13:23,470
say write me a function that returns me

00:13:20,199 --> 00:13:25,779
markup and bam they know react and if I

00:13:23,470 --> 00:13:26,949
say okay you need some you need some you

00:13:25,779 --> 00:13:28,839
need some data let's talk about

00:13:26,949 --> 00:13:29,480
class-based components and they can

00:13:28,839 --> 00:13:31,310
basically

00:13:29,480 --> 00:13:33,380
they're written really well and it's

00:13:31,310 --> 00:13:35,540
very easy like the so there's much more

00:13:33,380 --> 00:13:39,170
complex situations that involve complex

00:13:35,540 --> 00:13:41,870
complex more complexity from react but

00:13:39,170 --> 00:13:45,829
the core elements of react I think are

00:13:41,870 --> 00:13:49,610
very simple so similarly in my opinion

00:13:45,829 --> 00:13:51,110
the core elements of redux are also very

00:13:49,610 --> 00:13:52,310
simple I think maybe this is a little

00:13:51,110 --> 00:13:55,190
small match so everyone can read it but

00:13:52,310 --> 00:13:57,500
this is just a reducer so if you if you

00:13:55,190 --> 00:13:59,600
read if you boil down what Redux is it's

00:13:57,500 --> 00:14:00,620
actually people people can find about

00:13:59,600 --> 00:14:02,149
being really complicated but it's

00:14:00,620 --> 00:14:04,579
actually fairly simple

00:14:02,149 --> 00:14:06,589
it's a dispatch of an action it's the

00:14:04,579 --> 00:14:09,110
reducing of an immutable state object in

00:14:06,589 --> 00:14:11,209
an iterator over subscribers and that's

00:14:09,110 --> 00:14:13,190
about it and my opinion is that that

00:14:11,209 --> 00:14:15,589
pattern is what may read are so

00:14:13,190 --> 00:14:17,630
successful and that pattern we should

00:14:15,589 --> 00:14:20,899
try and preserve and the reason it's

00:14:17,630 --> 00:14:23,240
become so successful is because well

00:14:20,899 --> 00:14:25,430
that's why I'm gonna go over now so at

00:14:23,240 --> 00:14:27,829
PayPal we have we employed Douglas

00:14:25,430 --> 00:14:30,829
Crockford who wrote this book he's kind

00:14:27,829 --> 00:14:33,110
of a well-known JavaScript guy and if I

00:14:30,829 --> 00:14:34,910
had to summarize his opinion I would say

00:14:33,110 --> 00:14:36,829
it like this the bad parts of JavaScript

00:14:34,910 --> 00:14:38,630
are really bad and you should avoid them

00:14:36,829 --> 00:14:40,339
like the plague and the good parts are

00:14:38,630 --> 00:14:42,319
really really good and when you harness

00:14:40,339 --> 00:14:44,029
them correctly it can make JavaScript

00:14:42,319 --> 00:14:46,130
one of the most powerful programming

00:14:44,029 --> 00:14:47,899
languages and perhaps the most powerful

00:14:46,130 --> 00:14:50,720
pattern is the functional programming

00:14:47,899 --> 00:14:53,149
pattern for which javascript is really

00:14:50,720 --> 00:14:55,010
well equipped so let's briefly talk

00:14:53,149 --> 00:14:56,060
about functional programming a lot of

00:14:55,010 --> 00:14:57,139
you been talking about it today which

00:14:56,060 --> 00:14:59,329
i've been really surprised and happy

00:14:57,139 --> 00:15:00,860
about so functional programming is the

00:14:59,329 --> 00:15:03,139
process of building software by

00:15:00,860 --> 00:15:04,930
composing pure functions avoiding

00:15:03,139 --> 00:15:07,940
mutable data and avoiding side-effects

00:15:04,930 --> 00:15:09,319
pure functions are functions which given

00:15:07,940 --> 00:15:12,110
the same inputs always return the same

00:15:09,319 --> 00:15:14,149
output and have no side effects an

00:15:12,110 --> 00:15:15,940
immutable object is an object that can't

00:15:14,149 --> 00:15:18,440
be modified after its created

00:15:15,940 --> 00:15:19,880
immutability is a central concept of

00:15:18,440 --> 00:15:22,040
functional programming because without

00:15:19,880 --> 00:15:24,260
it the data in your program becomes lost

00:15:22,040 --> 00:15:26,810
e and state history can abandon and bugs

00:15:24,260 --> 00:15:28,490
can creep into your code so functional

00:15:26,810 --> 00:15:30,230
programming is a programming paradigm

00:15:28,490 --> 00:15:31,699
meaning that it's a way of thinking

00:15:30,230 --> 00:15:33,399
about software construction based on

00:15:31,699 --> 00:15:37,100
some fundamental defining principles

00:15:33,399 --> 00:15:38,689
functional code tends to be concise more

00:15:37,100 --> 00:15:40,519
predictable and critically from my point

00:15:38,689 --> 00:15:41,930
of view it's very easy to test you know

00:15:40,519 --> 00:15:44,660
you've written a really good function

00:15:41,930 --> 00:15:47,180
when the test feels domed or

00:15:44,660 --> 00:15:48,830
the whole goal I'm trying to achieve so

00:15:47,180 --> 00:15:50,090
why is this so good it's because the

00:15:48,830 --> 00:15:51,770
whole goal that I'm trying to achieve

00:15:50,090 --> 00:15:54,770
when I write applications is not

00:15:51,770 --> 00:15:56,300
cleverness or elegance rather it's to

00:15:54,770 --> 00:15:58,550
write a program that works well and is

00:15:56,300 --> 00:16:01,010
free of error and the thesis that I hold

00:15:58,550 --> 00:16:03,110
is that following a functional

00:16:01,010 --> 00:16:05,120
programming paradigm as much as possible

00:16:03,110 --> 00:16:06,710
helps me achieve that goal namely it

00:16:05,120 --> 00:16:09,020
helps me avoid as many errors as

00:16:06,710 --> 00:16:13,760
possible so let's go back to redux

00:16:09,020 --> 00:16:15,860
and the core of redux this reducer we

00:16:13,760 --> 00:16:17,870
will see that the pattern redux

00:16:15,860 --> 00:16:20,210
implements is as relevant as powerful as

00:16:17,870 --> 00:16:21,770
ever redux is fundamentally built on the

00:16:20,210 --> 00:16:23,750
notion of an immutable state object in a

00:16:21,770 --> 00:16:25,310
pure side-effect free reduce or function

00:16:23,750 --> 00:16:28,130
there really isn't that much to it

00:16:25,310 --> 00:16:30,410
similarly when I if I have a new intern

00:16:28,130 --> 00:16:31,700
and I say you know they know what this

00:16:30,410 --> 00:16:33,260
is some people don't like the case

00:16:31,700 --> 00:16:35,450
switch case statement but you don't even

00:16:33,260 --> 00:16:37,490
need that it's just a pure function

00:16:35,450 --> 00:16:40,070
there that that returns a new immutable

00:16:37,490 --> 00:16:44,060
object so the middleware the API the

00:16:40,070 --> 00:16:45,710
tooling those are all extras to redux

00:16:44,060 --> 00:16:48,860
some of these we like some of these we'd

00:16:45,710 --> 00:16:50,600
like to complain about and it's these

00:16:48,860 --> 00:16:52,880
things that people typically discuss

00:16:50,600 --> 00:16:54,710
when they're talking about redux they

00:16:52,880 --> 00:16:58,070
talk about boilerplate they talk about

00:16:54,710 --> 00:16:59,510
not dispatch to props but in reality we

00:16:58,070 --> 00:17:01,370
should also be ultimately to be

00:16:59,510 --> 00:17:03,200
discussing this in my opinion the power

00:17:01,370 --> 00:17:05,660
the clarity simplicity of the reducer

00:17:03,200 --> 00:17:07,040
pattern so when you choose a state

00:17:05,660 --> 00:17:08,420
management system you're buying into a

00:17:07,040 --> 00:17:10,510
pattern and the thing about Redux is

00:17:08,420 --> 00:17:12,560
pattern it's really really good and

00:17:10,510 --> 00:17:14,300
despite the many criticisms about how

00:17:12,560 --> 00:17:17,110
complex it is the fact of the matter of

00:17:14,300 --> 00:17:20,510
the matter is the basics of it or not

00:17:17,110 --> 00:17:22,339
and this is why we went back to it after

00:17:20,510 --> 00:17:24,260
after experimenting with Apollo client

00:17:22,339 --> 00:17:26,660
so if we look back at Apollo client real

00:17:24,260 --> 00:17:27,709
quickly we'll see it's kind of we look

00:17:26,660 --> 00:17:29,000
at it again and it feels a little

00:17:27,709 --> 00:17:30,980
strange because we've got something that

00:17:29,000 --> 00:17:33,050
looks like a functional component but

00:17:30,980 --> 00:17:35,210
then we've got this query component

00:17:33,050 --> 00:17:40,340
which is coming from somewhere and it's

00:17:35,210 --> 00:17:42,590
certainly impure so it's it's it just

00:17:40,340 --> 00:17:45,770
feels strange and it even if you even if

00:17:42,590 --> 00:17:47,900
you look at the the Redux core code you

00:17:45,770 --> 00:17:50,360
really can't find anything that isn't

00:17:47,900 --> 00:17:52,310
just plain old JavaScript which is what

00:17:50,360 --> 00:17:54,140
I like because ultimately I when I write

00:17:52,310 --> 00:17:55,790
programs I want to write them for the

00:17:54,140 --> 00:17:56,460
next programmer so the next programmer

00:17:55,790 --> 00:17:58,050
comes in

00:17:56,460 --> 00:18:00,660
is able to understand them and read

00:17:58,050 --> 00:18:02,160
what's going on so here's where I can

00:18:00,660 --> 00:18:04,050
talk a little bit about hooks I didn't I

00:18:02,160 --> 00:18:05,910
didn't change my slide but I have an I

00:18:04,050 --> 00:18:08,340
have a line in here that says I really

00:18:05,910 --> 00:18:10,200
hope that react itself incorporates this

00:18:08,340 --> 00:18:12,060
pattern out of the box so that way we

00:18:10,200 --> 00:18:13,350
don't need to use Redux which is kind of

00:18:12,060 --> 00:18:14,430
what hooks are about and if people have

00:18:13,350 --> 00:18:15,810
questions about it we could discuss it

00:18:14,430 --> 00:18:18,330
more in the Q&A or you could just find

00:18:15,810 --> 00:18:21,810
me after I think that that's probably

00:18:18,330 --> 00:18:23,370
the way to go forward however I was at

00:18:21,810 --> 00:18:25,530
react conf and I think that a lot of

00:18:23,370 --> 00:18:27,600
people maybe didn't watch the talk to

00:18:25,530 --> 00:18:29,490
the end which the point was it was it's

00:18:27,600 --> 00:18:30,600
in alpha and you should not put it in

00:18:29,490 --> 00:18:32,220
production yet and it's merely a

00:18:30,600 --> 00:18:34,350
proposal and then they want feedback for

00:18:32,220 --> 00:18:36,090
it so so don't go don't dive headfirst

00:18:34,350 --> 00:18:37,860
into it yet but definitely I think that

00:18:36,090 --> 00:18:40,080
it's very promising and I think that

00:18:37,860 --> 00:18:41,700
that's probably the direction things

00:18:40,080 --> 00:18:43,890
would go because then we could we can

00:18:41,700 --> 00:18:45,240
remove a lot of things that people don't

00:18:43,890 --> 00:18:48,210
like about redox while kind of keeping

00:18:45,240 --> 00:18:49,800
that core pattern alternatively you

00:18:48,210 --> 00:18:51,540
could you don't really need a library at

00:18:49,800 --> 00:18:53,370
all you could do your own thing and not

00:18:51,540 --> 00:18:56,340
even use the use reduce your hook from

00:18:53,370 --> 00:18:57,960
react but you know the downside of that

00:18:56,340 --> 00:18:59,760
is that you know you miss the tooling

00:18:57,960 --> 00:19:01,230
you're not gonna have you'd have to

00:18:59,760 --> 00:19:02,490
build in your own time traveler or your

00:19:01,230 --> 00:19:05,130
own dev tool function which is you know

00:19:02,490 --> 00:19:06,360
that's possible but you know if you

00:19:05,130 --> 00:19:08,420
already have something that's built for

00:19:06,360 --> 00:19:13,320
you that's that's really really uh

00:19:08,420 --> 00:19:15,540
that's really really powerful so again

00:19:13,320 --> 00:19:17,190
just in closing part of the reason react

00:19:15,540 --> 00:19:18,960
has enjoyed such success in the

00:19:17,190 --> 00:19:21,000
front-end community is because

00:19:18,960 --> 00:19:23,880
especially since the introduction of es6

00:19:21,000 --> 00:19:25,410
syntax building and react feels a lot

00:19:23,880 --> 00:19:27,210
like you're just coding in JavaScript

00:19:25,410 --> 00:19:29,820
and our intellectual effort is spent

00:19:27,210 --> 00:19:32,300
more on component our component

00:19:29,820 --> 00:19:34,050
architecture and other other challenges

00:19:32,300 --> 00:19:35,600
rather than on something that seems

00:19:34,050 --> 00:19:37,770
completely foreign to the language and

00:19:35,600 --> 00:19:40,950
my contention is that the same is true

00:19:37,770 --> 00:19:42,630
for this core feature of redux the

00:19:40,950 --> 00:19:44,790
essence of redux reads like pure

00:19:42,630 --> 00:19:46,110
functional JavaScript which makes sense

00:19:44,790 --> 00:19:49,260
because it is just pure functional

00:19:46,110 --> 00:19:50,730
JavaScript so when I decided when I

00:19:49,260 --> 00:19:52,620
started diving deeper into redux I not

00:19:50,730 --> 00:19:54,870
only came to really a library but I all

00:19:52,620 --> 00:19:57,450
came I also came away with a stronger

00:19:54,870 --> 00:20:00,450
sense of by what means I would judge a

00:19:57,450 --> 00:20:01,740
new technology and how I would decide

00:20:00,450 --> 00:20:04,200
whether or not one whether or not I

00:20:01,740 --> 00:20:05,880
wanted to use it with my team I want to

00:20:04,200 --> 00:20:07,440
use libraries that not only clearly show

00:20:05,880 --> 00:20:10,030
me what's going on but also ones that

00:20:07,440 --> 00:20:12,160
use the so-called good parts of Java's

00:20:10,030 --> 00:20:14,230
namely solid functional programming

00:20:12,160 --> 00:20:16,060
principles so the in the future these

00:20:14,230 --> 00:20:17,410
are the ones that I'm going to be that

00:20:16,060 --> 00:20:21,590
are going to be heavily preferred by me

00:20:17,410 --> 00:20:29,540
and my team thank you

00:20:21,590 --> 00:20:34,620
[Applause]

00:20:29,540 --> 00:20:38,280
Thank You max we have some nice

00:20:34,620 --> 00:20:41,130
questions for you as well why is every

00:20:38,280 --> 00:20:43,170
Dex and not the react context yeah I

00:20:41,130 --> 00:20:45,480
think that so I forgot to mention

00:20:43,170 --> 00:20:47,850
everyone if anyone who has not watched

00:20:45,480 --> 00:20:49,830
Ryan Florence's talk from react comp a

00:20:47,850 --> 00:20:51,570
few days ago you should definitely go

00:20:49,830 --> 00:20:53,340
watch it and in it he used he doesn't

00:20:51,570 --> 00:20:56,730
really go through the entire thing but

00:20:53,340 --> 00:20:59,820
he uses the use reduced use reducer hook

00:20:56,730 --> 00:21:01,290
and then he talks about how all you need

00:20:59,820 --> 00:21:03,390
to do is is hook it up to the react

00:21:01,290 --> 00:21:04,740
context but he doesn't do it so you have

00:21:03,390 --> 00:21:05,760
to figure it out yourself but I'm sure

00:21:04,740 --> 00:21:07,590
there's some someone who's already

00:21:05,760 --> 00:21:10,050
figured it out but in short if you can

00:21:07,590 --> 00:21:11,220
if you can use the use reducer hook with

00:21:10,050 --> 00:21:14,730
the react context I think that that's

00:21:11,220 --> 00:21:17,520
probably going to replace Redux I think

00:21:14,730 --> 00:21:20,250
today some of the more trivial reasons

00:21:17,520 --> 00:21:21,690
that I identified namely you know the

00:21:20,250 --> 00:21:23,640
dev tools the time traveler and things

00:21:21,690 --> 00:21:25,590
like that those are those are reasons

00:21:23,640 --> 00:21:28,140
why I really wanted to keep using the

00:21:25,590 --> 00:21:31,710
library but I mean reacted I mean Redux

00:21:28,140 --> 00:21:33,570
itself uses the read the react context

00:21:31,710 --> 00:21:35,100
API and it used it before when it was

00:21:33,570 --> 00:21:38,730
just experimental so the two are very

00:21:35,100 --> 00:21:41,310
very similar so in short you could you

00:21:38,730 --> 00:21:47,210
could use the react context as well and

00:21:41,310 --> 00:21:49,170
still implement this pattern you like it

00:21:47,210 --> 00:21:52,040
do you believe that the biggest

00:21:49,170 --> 00:21:55,200
uncertainty in choosing Apollo client is

00:21:52,040 --> 00:21:57,810
it being tightly coupled with craftier

00:21:55,200 --> 00:22:01,500
which creates an unwanted dependency yes

00:21:57,810 --> 00:22:03,150
I do actually and that was if so again I

00:22:01,500 --> 00:22:04,170
I really love the Apollo team and I

00:22:03,150 --> 00:22:07,050
think they're great everything they do

00:22:04,170 --> 00:22:09,360
is great and when I went to the graph QL

00:22:07,050 --> 00:22:11,970
conference it really makes the most

00:22:09,360 --> 00:22:14,450
sense if you completely restructure your

00:22:11,970 --> 00:22:17,310
entire workflow around Apollo and that

00:22:14,450 --> 00:22:19,680
wasn't something my team was willing to

00:22:17,310 --> 00:22:21,450
do and moreover there's still are

00:22:19,680 --> 00:22:23,160
arguments I mean PayPal has been around

00:22:21,450 --> 00:22:24,390
for a long time and I'm sure some of

00:22:23,160 --> 00:22:27,330
your companies have been around for a

00:22:24,390 --> 00:22:28,830
long time and who knows whether or not

00:22:27,330 --> 00:22:30,960
you'll be able to fully incorporate

00:22:28,830 --> 00:22:33,600
graph QL or whether or not you'll have

00:22:30,960 --> 00:22:37,110
to have some raffle at api's and having

00:22:33,600 --> 00:22:39,430
a having a mix of state management

00:22:37,110 --> 00:22:41,440
system seems like an obvious no-no to me

00:22:39,430 --> 00:22:42,940
seems like I just don't want to add

00:22:41,440 --> 00:22:45,610
extra dependencies where I don't need

00:22:42,940 --> 00:22:50,080
them so so the answer that that question

00:22:45,610 --> 00:22:54,130
is yes I'm short can you use a fellow

00:22:50,080 --> 00:22:56,110
client and Redux together so yes but I

00:22:54,130 --> 00:22:58,930
wouldn't recommend it I had there's one

00:22:56,110 --> 00:23:00,730
team I know of that does this in fact he

00:22:58,930 --> 00:23:02,980
initially wanted to use entirely Apollo

00:23:00,730 --> 00:23:04,240
client and then just found some trouble

00:23:02,980 --> 00:23:05,770
with it and he ended up creating like a

00:23:04,240 --> 00:23:07,420
global state variable something he was

00:23:05,770 --> 00:23:09,670
like oh that's ugly so I'm gonna use

00:23:07,420 --> 00:23:11,590
Redux for that and then he had this

00:23:09,670 --> 00:23:14,230
awkward mixture and I think that that's

00:23:11,590 --> 00:23:16,420
that's obviously a bad idea you wanted

00:23:14,230 --> 00:23:19,270
use you want to pick one and stick to it

00:23:16,420 --> 00:23:20,530
and then and then I think about some of

00:23:19,270 --> 00:23:23,520
the things I talked about to make the

00:23:20,530 --> 00:23:26,590
right choice for you and your team

00:23:23,520 --> 00:23:29,410
what's your opinion about Redux with

00:23:26,590 --> 00:23:31,900
angular so I've never used Redux with

00:23:29,410 --> 00:23:34,240
angular I haven't used angular in over

00:23:31,900 --> 00:23:36,040
two years so I don't have an opinion on

00:23:34,240 --> 00:23:38,410
it I'm sure you can use it oh okay

00:23:36,040 --> 00:23:40,060
people like that I'm sure you can use it

00:23:38,410 --> 00:23:41,410
I mean the benefit again the benefit one

00:23:40,060 --> 00:23:44,200
of the benefits of Redux is it

00:23:41,410 --> 00:23:46,110
intentionally does not care and I think

00:23:44,200 --> 00:23:48,610
that that's really powerful

00:23:46,110 --> 00:23:50,080
have you considered up a little

00:23:48,610 --> 00:23:51,310
link-state yes

00:23:50,080 --> 00:23:53,650
I didn't I didn't discuss it in my

00:23:51,310 --> 00:23:56,320
presentation but I did I also had a

00:23:53,650 --> 00:23:59,860
Paula link state in my app and great

00:23:56,320 --> 00:24:01,210
technology but I liked I was really

00:23:59,860 --> 00:24:04,690
missing like some of the things that I

00:24:01,210 --> 00:24:07,870
mentioned in the talk and maybe we can

00:24:04,690 --> 00:24:10,180
take one more do you have some solution

00:24:07,870 --> 00:24:13,630
to every writing so much quote for

00:24:10,180 --> 00:24:16,240
reducers yes my solution is don't

00:24:13,630 --> 00:24:19,840
overuse Redux don't overuse your

00:24:16,240 --> 00:24:22,540
reducers I don't use Redux for any of my

00:24:19,840 --> 00:24:25,870
my UI state I use local state for my UI

00:24:22,540 --> 00:24:27,400
state and I think that I've seen either

00:24:25,870 --> 00:24:29,410
some libraries out there and I've seen

00:24:27,400 --> 00:24:31,750
some apps where everything is put in

00:24:29,410 --> 00:24:33,960
redock a everything is put in Redux then

00:24:31,750 --> 00:24:36,010
they have massive reducers and things

00:24:33,960 --> 00:24:37,450
components star tree rendering that

00:24:36,010 --> 00:24:39,160
aren't intended to re-render and

00:24:37,450 --> 00:24:41,080
moreover you've got events flying all

00:24:39,160 --> 00:24:42,940
over the place I think that that's not a

00:24:41,080 --> 00:24:44,770
good idea I think this is in part due to

00:24:42,940 --> 00:24:46,690
some of the tutorials which really

00:24:44,770 --> 00:24:49,360
emphasize the API over how to think

00:24:46,690 --> 00:24:52,630
about a Redux app so in short my thought

00:24:49,360 --> 00:24:53,540
is don't overuse it use it maybe only

00:24:52,630 --> 00:24:55,220
for data

00:24:53,540 --> 00:24:57,550
or something like that over the things

00:24:55,220 --> 00:25:01,390
over the wire but not for you I stay

00:24:57,550 --> 00:25:01,390

YouTube URL: https://www.youtube.com/watch?v=dYtcsvxzShM


