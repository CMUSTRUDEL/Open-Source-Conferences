Title: ReactiveConf 2018 – Anna Doubkova: Going Native
Publication date: 2018-11-03
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
Going Native

React Native allows you to re-use your web code to build native applications. What’s not to like? This approach is simple in theory but challenging in practice. In this talk, you’ll learn what is re-usable and what isn’t, the intricacies of shared code bases, and cross-team communication when building React and React Native apps at the same time. With real-life examples, code snippets, and memes, you will learn everything you need to know to get started on your native journey.
Captions: 
	00:00:02,220 --> 00:00:08,679
[Music]

00:00:12,730 --> 00:00:22,220
so exciting to be here I'm Anna as you

00:00:18,080 --> 00:00:24,109
can tell pearl from my surname I am from

00:00:22,220 --> 00:00:26,510
this country originally but I have lived

00:00:24,109 --> 00:00:28,490
in London for the last six years but

00:00:26,510 --> 00:00:32,000
this is my first time being sort of back

00:00:28,490 --> 00:00:35,900
as a development it's so exciting to be

00:00:32,000 --> 00:00:36,949
here to talk to you about some react

00:00:35,900 --> 00:00:40,940
programming

00:00:36,949 --> 00:00:44,989
I work as a developer at hive and we're

00:00:40,940 --> 00:00:46,699
a company who do Smart Homes and there

00:00:44,989 --> 00:00:49,370
is a reason why I want to show you what

00:00:46,699 --> 00:00:52,549
what we do we do a lot of different

00:00:49,370 --> 00:00:54,860
things we've got our whole range of

00:00:52,549 --> 00:00:57,350
smart devices mainly thermistors but

00:00:54,860 --> 00:01:01,309
also four different types of light bulbs

00:00:57,350 --> 00:01:03,530
and cameras and plugs and sensors so you

00:01:01,309 --> 00:01:05,449
can control all of these devices with

00:01:03,530 --> 00:01:09,020
our applications but you can also set up

00:01:05,449 --> 00:01:12,049
schedules and actions such as if the

00:01:09,020 --> 00:01:13,729
door opens turn on the light bulb so we

00:01:12,049 --> 00:01:16,820
have a lot of complexity in our

00:01:13,729 --> 00:01:18,649
applications in fact it's such a complex

00:01:16,820 --> 00:01:20,810
application that after a year of working

00:01:18,649 --> 00:01:23,060
at that company I still don't understand

00:01:20,810 --> 00:01:24,740
half of it so I'm just sticking to the

00:01:23,060 --> 00:01:29,899
things that I actually know which is

00:01:24,740 --> 00:01:31,520
usually just light bulbs and we have

00:01:29,899 --> 00:01:34,609
three different apps that allow the

00:01:31,520 --> 00:01:36,289
users to control our devices and we've

00:01:34,609 --> 00:01:38,689
got the web which is written in react

00:01:36,289 --> 00:01:40,609
and at the moment we still have the

00:01:38,689 --> 00:01:44,509
Android and iOS apps that are written in

00:01:40,609 --> 00:01:47,569
Swift and Android SDK and we also have

00:01:44,509 --> 00:01:51,049
quite a wide range of the sort of

00:01:47,569 --> 00:01:56,539
back-end services and the actual

00:01:51,049 --> 00:01:58,490
controlling low-level apps so we have

00:01:56,539 --> 00:02:00,499
about six or seven different teams that

00:01:58,490 --> 00:02:02,530
need to cooperate so any any time

00:02:00,499 --> 00:02:06,200
someone comes and says we would like to

00:02:02,530 --> 00:02:08,450
create a feature it means that seven

00:02:06,200 --> 00:02:11,000
different teams need to cooperate and

00:02:08,450 --> 00:02:13,400
develop the same thing to the same spec

00:02:11,000 --> 00:02:16,310
and as you can imagine that is a long

00:02:13,400 --> 00:02:17,849
and be very expensive and see it doesn't

00:02:16,310 --> 00:02:20,730
always work out very well

00:02:17,849 --> 00:02:24,209
and so we decided that we will introduce

00:02:20,730 --> 00:02:26,609
react to rule them all or at least on

00:02:24,209 --> 00:02:28,709
the front end because obviously we can't

00:02:26,609 --> 00:02:30,840
yet do back and with react but seeing

00:02:28,709 --> 00:02:34,590
how things go that might be the case

00:02:30,840 --> 00:02:37,319
soon and so when you tell people let's

00:02:34,590 --> 00:02:39,390
use JavaScript for all the things people

00:02:37,319 --> 00:02:41,609
like me will get very excited because I

00:02:39,390 --> 00:02:44,909
as a JavaScript developer I'm really

00:02:41,609 --> 00:02:46,739
happy that I can do native apps but a

00:02:44,909 --> 00:02:48,870
lot of people get terrified and it's

00:02:46,739 --> 00:02:50,970
specially native developers and it and a

00:02:48,870 --> 00:02:53,420
lot of business people as well they are

00:02:50,970 --> 00:02:56,459
wondering what does that mean for us

00:02:53,420 --> 00:02:59,669
well there are a few reasons why we

00:02:56,459 --> 00:03:03,569
decided to transition and a huge amount

00:02:59,669 --> 00:03:06,900
of like one of the biggest reasons was

00:03:03,569 --> 00:03:08,760
the fact that we can reuse code we can

00:03:06,900 --> 00:03:12,299
take the code that we use to develop our

00:03:08,760 --> 00:03:14,340
web app and use it to create our native

00:03:12,299 --> 00:03:16,200
apps and that means that we will reach

00:03:14,340 --> 00:03:18,269
much faster delivery we have to write

00:03:16,200 --> 00:03:20,549
things once and of three times with

00:03:18,269 --> 00:03:23,040
their limitations obviously and the

00:03:20,549 --> 00:03:25,739
increase that means that we have lower

00:03:23,040 --> 00:03:27,479
costs for development but also it's kind

00:03:25,739 --> 00:03:29,760
of easier to hire in a way because you

00:03:27,479 --> 00:03:31,590
don't have to hire an Android dev and

00:03:29,760 --> 00:03:34,530
iOS death and a reactive you just have

00:03:31,590 --> 00:03:35,819
to hire a reactive and last but not

00:03:34,530 --> 00:03:37,290
least it's also a really cool thing to

00:03:35,819 --> 00:03:39,290
do because you know it's one of the new

00:03:37,290 --> 00:03:43,319
shiny things to play with

00:03:39,290 --> 00:03:46,590
and say my the rest of my talk will be

00:03:43,319 --> 00:03:48,780
about our journey of how a bunch of web

00:03:46,590 --> 00:03:52,079
developers became native developers and

00:03:48,780 --> 00:03:55,349
how we took our code from web to native

00:03:52,079 --> 00:03:57,120
and originally when we started working

00:03:55,349 --> 00:03:58,979
on this project I made a few assumptions

00:03:57,120 --> 00:04:02,040
about what we can reuse and what we call

00:03:58,979 --> 00:04:04,889
breeze I thought that we will be able to

00:04:02,040 --> 00:04:06,659
reuse the UI components easily I thought

00:04:04,889 --> 00:04:08,400
that styling would be impossible to

00:04:06,659 --> 00:04:11,430
reuse because the styling and native

00:04:08,400 --> 00:04:14,909
world is so different from the styling

00:04:11,430 --> 00:04:17,519
in in web and then I assumed that

00:04:14,909 --> 00:04:19,470
business logic would not be shareable

00:04:17,519 --> 00:04:20,880
either because there are so many things

00:04:19,470 --> 00:04:25,560
in native world that works simply

00:04:20,880 --> 00:04:27,630
differently but I was entirely wrong and

00:04:25,560 --> 00:04:30,870
in fact actually it's quite the opposite

00:04:27,630 --> 00:04:31,710
and in order to explain why that is I

00:04:30,870 --> 00:04:34,560
would like to first

00:04:31,710 --> 00:04:38,130
talk a little bit about how react native

00:04:34,560 --> 00:04:39,720
works how we render components and then

00:04:38,130 --> 00:04:43,230
sort of take it from that to explain

00:04:39,720 --> 00:04:47,340
what were you reusing what we're not say

00:04:43,230 --> 00:04:50,370
react native surprised me at first

00:04:47,340 --> 00:04:52,500
because I as a react developer thought I

00:04:50,370 --> 00:04:54,600
would be completely lost but in fact we

00:04:52,500 --> 00:04:57,000
still ride the same JSX we still use

00:04:54,600 --> 00:04:59,850
pretty much the same libraries we're

00:04:57,000 --> 00:05:02,640
still using readouts and reduc sagas and

00:04:59,850 --> 00:05:04,200
and all that stuff is exactly the same

00:05:02,640 --> 00:05:06,840
the only difference is that you use

00:05:04,200 --> 00:05:08,820
views instead of divs essentially well

00:05:06,840 --> 00:05:11,130
at first it looks like it so you've got

00:05:08,820 --> 00:05:14,070
your app that's react up and it's just

00:05:11,130 --> 00:05:17,580
any old app that you could write and

00:05:14,070 --> 00:05:19,410
that sits in a JavaScript runtime and

00:05:17,580 --> 00:05:21,390
that's the interesting bit for me

00:05:19,410 --> 00:05:23,850
because I originally thought it would be

00:05:21,390 --> 00:05:26,970
compiled down to native but actually we

00:05:23,850 --> 00:05:28,890
still run JavaScript app there and that

00:05:26,970 --> 00:05:30,600
sits in the native environment and there

00:05:28,890 --> 00:05:33,840
is just this thin layer around the

00:05:30,600 --> 00:05:35,730
JavaScript thread that sort of

00:05:33,840 --> 00:05:39,510
translates whatever is happening in

00:05:35,730 --> 00:05:41,430
JavaScript into native and vice versa so

00:05:39,510 --> 00:05:43,980
as I said it's not compile code and it's

00:05:41,430 --> 00:05:46,020
also not just sitting in a web for you

00:05:43,980 --> 00:05:47,400
which gives us greater power to actually

00:05:46,020 --> 00:05:53,850
reach out to the native world and

00:05:47,400 --> 00:05:55,680
actually talk to hardware cetera so what

00:05:53,850 --> 00:05:57,030
happens with components having keeping

00:05:55,680 --> 00:05:59,340
that in mind what happens with

00:05:57,030 --> 00:06:03,050
components how do I get from having that

00:05:59,340 --> 00:06:07,160
JSX that I always need see having an

00:06:03,050 --> 00:06:09,570
actual thing render in a mobile phone

00:06:07,160 --> 00:06:11,880
well there is a little bit more theory

00:06:09,570 --> 00:06:14,340
behind that when you have your JSX what

00:06:11,880 --> 00:06:16,800
react essentially does it passes it into

00:06:14,340 --> 00:06:19,890
a virtual tree it's basically just like

00:06:16,800 --> 00:06:21,420
a blob of data that tells you what the

00:06:19,890 --> 00:06:22,920
state of the app is right now what

00:06:21,420 --> 00:06:27,090
should be rendered what kind of

00:06:22,920 --> 00:06:29,340
components there might be and then you

00:06:27,090 --> 00:06:31,620
send it this blob of data into the final

00:06:29,340 --> 00:06:34,680
destination so usually it would be dumb

00:06:31,620 --> 00:06:36,540
and the web browser sort of figures out

00:06:34,680 --> 00:06:38,790
how to render that although the render

00:06:36,540 --> 00:06:41,670
will figure that out and similarly it

00:06:38,790 --> 00:06:44,340
would be very easy to send this 200 to

00:06:41,670 --> 00:06:45,510
iOS you can even control hardware with

00:06:44,340 --> 00:06:47,760
react these days but

00:06:45,510 --> 00:06:50,150
the renderer allows you to take this

00:06:47,760 --> 00:06:52,680
blob of data and render it to anything

00:06:50,150 --> 00:06:54,960
so I've kind of made an assumption you

00:06:52,680 --> 00:06:58,320
know okay so I've got JSX

00:06:54,960 --> 00:06:59,790
the JavaScript runtime we'll just pass

00:06:58,320 --> 00:07:01,740
that into the tree then react native

00:06:59,790 --> 00:07:04,380
bridge we'll take it and send it over to

00:07:01,740 --> 00:07:06,570
the native bit just as well as a piece

00:07:04,380 --> 00:07:09,690
of information and then the native

00:07:06,570 --> 00:07:11,760
thread will just render it out and that

00:07:09,690 --> 00:07:13,770
could theoretically work and I think

00:07:11,760 --> 00:07:16,470
there are a lot of people who are trying

00:07:13,770 --> 00:07:17,790
to do this but the problem is that there

00:07:16,470 --> 00:07:21,180
are a lot of differences between

00:07:17,790 --> 00:07:23,460
platforms unfortunately when we look at

00:07:21,180 --> 00:07:27,210
the component or like the UI kids that

00:07:23,460 --> 00:07:29,100
we get from different platforms we see

00:07:27,210 --> 00:07:31,470
quite a few differences so this these

00:07:29,100 --> 00:07:34,380
are HTML tags you've got your a in span

00:07:31,470 --> 00:07:37,740
and header and you can kind of tell that

00:07:34,380 --> 00:07:40,200
this is semantics right on web we really

00:07:37,740 --> 00:07:44,100
care about the difference between a span

00:07:40,200 --> 00:07:45,660
and a paragraph and h1 and headers etc

00:07:44,100 --> 00:07:49,740
we actually care about the information

00:07:45,660 --> 00:07:52,200
that they carry together with whatever

00:07:49,740 --> 00:07:54,480
content they have and that is because

00:07:52,200 --> 00:07:57,000
web was originally created as a document

00:07:54,480 --> 00:07:59,520
it's a web page it wasn't supposed to be

00:07:57,000 --> 00:08:02,040
an application to begin with so the

00:07:59,520 --> 00:08:04,460
whole system was created around the fact

00:08:02,040 --> 00:08:08,340
that we just want to render out some

00:08:04,460 --> 00:08:09,990
text and later on obviously we added

00:08:08,340 --> 00:08:12,330
JavaScript and we started being able to

00:08:09,990 --> 00:08:14,370
write dynamic apps which is great but

00:08:12,330 --> 00:08:16,530
we're still dealing with the components

00:08:14,370 --> 00:08:18,600
and we still want to use the power of

00:08:16,530 --> 00:08:24,180
semantics and accessibility that it

00:08:18,600 --> 00:08:27,090
gives us and when we look at IRS and

00:08:24,180 --> 00:08:28,830
Android you'll see that we've got now

00:08:27,090 --> 00:08:31,500
we've got views and scroll views and

00:08:28,830 --> 00:08:32,729
sliders and labels and even between

00:08:31,500 --> 00:08:35,460
these two platforms there are

00:08:32,729 --> 00:08:37,530
differences because for example is a

00:08:35,460 --> 00:08:40,050
date picker which allows you to select

00:08:37,530 --> 00:08:42,780
date and time but Android helper

00:08:40,050 --> 00:08:44,850
components say there are always

00:08:42,780 --> 00:08:46,790
difficulties with figuring out well if I

00:08:44,850 --> 00:08:50,370
write want a thing how will that render

00:08:46,790 --> 00:08:51,930
if I write a view or a div we know that

00:08:50,370 --> 00:08:54,240
they would probably match each other and

00:08:51,930 --> 00:08:56,490
the same thing with paragraphs and text

00:08:54,240 --> 00:08:58,440
but when it comes to flat list or slider

00:08:56,490 --> 00:09:00,750
or h1 or header

00:08:58,440 --> 00:09:02,790
it's not very obvious how we would

00:09:00,750 --> 00:09:05,550
render it out of course we can say well

00:09:02,790 --> 00:09:07,440
h1 is a text with specific styling but

00:09:05,550 --> 00:09:10,170
then I'm kind of losing the semantics of

00:09:07,440 --> 00:09:11,940
it and if I write down text with

00:09:10,170 --> 00:09:15,089
specific styling how will I know that

00:09:11,940 --> 00:09:16,860
it's supposed to be h1 on web so there

00:09:15,089 --> 00:09:20,399
are difficulties with trying to figure

00:09:16,860 --> 00:09:22,470
out how do I map it what is what in

00:09:20,399 --> 00:09:24,269
these platforms and so it's not

00:09:22,470 --> 00:09:26,160
surprising that react negative actually

00:09:24,269 --> 00:09:28,740
decided to have completely separate

00:09:26,160 --> 00:09:33,540
system from web because they are really

00:09:28,740 --> 00:09:36,149
quite different platforms and say there

00:09:33,540 --> 00:09:38,009
of course but from solutions obviously

00:09:36,149 --> 00:09:39,860
there is the react native web which is

00:09:38,009 --> 00:09:43,139
or was used by Twitter

00:09:39,860 --> 00:09:44,699
there is the reactor's platform which is

00:09:43,139 --> 00:09:46,589
done by Microsoft although they are

00:09:44,699 --> 00:09:49,259
using xamarin so I'm not quite sure what

00:09:46,589 --> 00:09:51,089
was going but on with that and we did

00:09:49,259 --> 00:09:54,029
look at react native web but

00:09:51,089 --> 00:09:56,029
unfortunately they cover only about 60%

00:09:54,029 --> 00:09:58,740
of the native components to sort of

00:09:56,029 --> 00:10:02,819
revert all a convert react native apps

00:09:58,740 --> 00:10:05,399
into web apps and it's so new that you

00:10:02,819 --> 00:10:06,870
know serving a million users we have to

00:10:05,399 --> 00:10:08,550
make sure that our app will work

00:10:06,870 --> 00:10:11,250
properly and we didn't really want to

00:10:08,550 --> 00:10:13,860
take that risk just yet having said that

00:10:11,250 --> 00:10:16,889
there is a certain amount of companies

00:10:13,860 --> 00:10:19,139
that we can reuse in the previous talkie

00:10:16,889 --> 00:10:20,880
so headless components I called them

00:10:19,139 --> 00:10:23,370
here logical components but it's

00:10:20,880 --> 00:10:24,870
essentially the same thing where we

00:10:23,370 --> 00:10:28,319
don't render anything we just have the

00:10:24,870 --> 00:10:31,589
logical bits around it and we have also

00:10:28,319 --> 00:10:34,680
this kind of hacky approach potentially

00:10:31,589 --> 00:10:36,500
of supplying the end components that the

00:10:34,680 --> 00:10:39,180
company supposed to render as props

00:10:36,500 --> 00:10:42,569
they're just super quickly this is a

00:10:39,180 --> 00:10:44,880
logic component as an example of what I

00:10:42,569 --> 00:10:47,009
was talking about it's just like a

00:10:44,880 --> 00:10:49,050
conditional feature we have a lot of

00:10:47,009 --> 00:10:50,430
feature flags on our app we just want to

00:10:49,050 --> 00:10:53,790
render some things only if a feature

00:10:50,430 --> 00:10:55,589
flag is on so this component just says

00:10:53,790 --> 00:10:57,569
well if it should render based on some

00:10:55,589 --> 00:10:59,220
conditions render out the children

00:10:57,569 --> 00:11:01,680
otherwise don't render anything at all

00:10:59,220 --> 00:11:03,120
and this we can reuse between web and

00:11:01,680 --> 00:11:06,139
react native because we don't actually

00:11:03,120 --> 00:11:10,019
care about what renders at the end and

00:11:06,139 --> 00:11:11,649
then we have sort of props components I

00:11:10,019 --> 00:11:14,769
don't already how to call it

00:11:11,649 --> 00:11:17,139
but we use it especially for SVG's SVG's

00:11:14,769 --> 00:11:19,509
are amazing it's so useful to use like

00:11:17,139 --> 00:11:21,279
Coons as as Fiji's but unfortunately

00:11:19,509 --> 00:11:24,369
when you look at SVG it just looks like

00:11:21,279 --> 00:11:26,160
HTML and there are libraries and react

00:11:24,369 --> 00:11:29,529
native but you have to spend some time

00:11:26,160 --> 00:11:31,059
figuring out how to convert the icons

00:11:29,529 --> 00:11:32,439
you get it from your designers into

00:11:31,059 --> 00:11:34,660
something you can actually use on both

00:11:32,439 --> 00:11:37,029
platforms and so we created these

00:11:34,660 --> 00:11:39,879
wrappers around all of our SVG icons and

00:11:37,029 --> 00:11:42,939
then we just supply whatever element

00:11:39,879 --> 00:11:44,559
should be rendered out as a prop and we

00:11:42,939 --> 00:11:46,779
have this handy map this one is from our

00:11:44,559 --> 00:11:48,339
web app where we say well when you see

00:11:46,779 --> 00:11:50,499
an SVG component just render out this

00:11:48,339 --> 00:11:53,920
SVG similarly we have a react native

00:11:50,499 --> 00:11:55,990
version for this but we decided to keep

00:11:53,920 --> 00:11:57,819
this sort of very low-key we didn't want

00:11:55,990 --> 00:11:59,589
to use this approach a lot because we

00:11:57,819 --> 00:12:05,050
again weren't very sure that it would

00:11:59,589 --> 00:12:06,699
actually work on large-scale so that was

00:12:05,050 --> 00:12:08,319
for the components unfortunately the

00:12:06,699 --> 00:12:11,920
answer is we can't really reuse them

00:12:08,319 --> 00:12:13,869
much but there is styling and the the

00:12:11,920 --> 00:12:18,970
story there is a little bit more hopeful

00:12:13,869 --> 00:12:20,920
optimistic I have to tell you the CSS is

00:12:18,970 --> 00:12:22,779
still there no matter how far away you

00:12:20,920 --> 00:12:26,139
run away from web CSS is following

00:12:22,779 --> 00:12:27,850
everywhere I actually have found out

00:12:26,139 --> 00:12:29,350
that there are people who like CSS but

00:12:27,850 --> 00:12:31,899
I'm definitely not one of them so I

00:12:29,350 --> 00:12:34,959
wasn't very happy about this having said

00:12:31,899 --> 00:12:38,920
that CSS in react native is quite

00:12:34,959 --> 00:12:43,120
bearable see the normal reactive Styles

00:12:38,920 --> 00:12:46,660
are a very sort of typical CSS nsj you

00:12:43,120 --> 00:12:48,819
just define your Styles as objects and

00:12:46,660 --> 00:12:51,579
then you apply them as you would

00:12:48,819 --> 00:12:54,160
normally do in web but there are a few

00:12:51,579 --> 00:12:55,990
differences and the first thing is that

00:12:54,160 --> 00:12:58,089
and the quite a few CSS and J's

00:12:55,990 --> 00:12:59,740
frameworks have this you can see that

00:12:58,089 --> 00:13:02,319
things are defined in camel case or not

00:12:59,740 --> 00:13:05,620
kebab case so it's actually not CSS

00:13:02,319 --> 00:13:08,079
really it just looks like it react

00:13:05,620 --> 00:13:09,959
native doesn't have units so you can see

00:13:08,079 --> 00:13:12,549
that font size is 30 in there because

00:13:09,959 --> 00:13:14,920
you know you can write px and it's not

00:13:12,549 --> 00:13:17,529
gonna do anything and there are some

00:13:14,920 --> 00:13:20,529
other differences such as flex is by

00:13:17,529 --> 00:13:22,299
default on on all components and is by

00:13:20,529 --> 00:13:24,639
default in a column and not in a row

00:13:22,299 --> 00:13:25,450
which is a bit confusing for web

00:13:24,639 --> 00:13:27,460
developers

00:13:25,450 --> 00:13:29,290
so there are differences but you can

00:13:27,460 --> 00:13:31,420
kind of see that it's heading in the

00:13:29,290 --> 00:13:33,910
similar direction and since we're using

00:13:31,420 --> 00:13:35,950
start components on web it was actually

00:13:33,910 --> 00:13:37,930
really easy to take them to react native

00:13:35,950 --> 00:13:40,510
because there is a react native version

00:13:37,930 --> 00:13:42,940
of salt components and that's what that

00:13:40,510 --> 00:13:44,740
that means that you can just write CSS

00:13:42,940 --> 00:13:47,380
like you would in any other place and

00:13:44,740 --> 00:13:50,470
you can write exactly the same stuff for

00:13:47,380 --> 00:13:52,390
web and for react native and we have

00:13:50,470 --> 00:13:55,030
this like amazing collaboration with our

00:13:52,390 --> 00:13:56,500
designers who sort of defined variables

00:13:55,030 --> 00:13:59,050
that we can share they define based

00:13:56,500 --> 00:14:00,550
components so that we know how things

00:13:59,050 --> 00:14:04,570
are supposed to look in both platforms

00:14:00,550 --> 00:14:06,580
and that also increases consistency of

00:14:04,570 --> 00:14:08,380
design between platforms if you can

00:14:06,580 --> 00:14:10,120
reuse it and you don't have to worry

00:14:08,380 --> 00:14:12,070
anymore about like oh the Android app

00:14:10,120 --> 00:14:14,140
looks a little bit different stay all

00:14:12,070 --> 00:14:16,750
now look the same because we can reuse

00:14:14,140 --> 00:14:18,790
that having said that there are

00:14:16,750 --> 00:14:20,850
differences and we have to keep that in

00:14:18,790 --> 00:14:23,290
mind

00:14:20,850 --> 00:14:25,000
say stars are kind of somewhere in

00:14:23,290 --> 00:14:27,760
between we can kind of reuse them kind

00:14:25,000 --> 00:14:30,670
of not but there is business logic and

00:14:27,760 --> 00:14:32,980
that is actually the exciting bit for us

00:14:30,670 --> 00:14:34,690
and again he's kind of saw it in the

00:14:32,980 --> 00:14:36,990
previous talk that there was these sort

00:14:34,690 --> 00:14:39,430
of like illogical components around and

00:14:36,990 --> 00:14:41,980
normally we would just use connect with

00:14:39,430 --> 00:14:44,290
redux and redock sagas but essentially

00:14:41,980 --> 00:14:46,210
the the idea is the same you've got

00:14:44,290 --> 00:14:48,760
different components that you supply

00:14:46,210 --> 00:14:52,270
into it different your eyes but the

00:14:48,760 --> 00:14:56,050
business logic can be shared there are

00:14:52,270 --> 00:14:57,610
some bits in native apps though that are

00:14:56,050 --> 00:14:59,440
different there are some hardware

00:14:57,610 --> 00:15:01,930
integrations that you can't obviously do

00:14:59,440 --> 00:15:04,840
on web such as taking photos and stuff

00:15:01,930 --> 00:15:06,820
like that so there are some amount of

00:15:04,840 --> 00:15:08,950
native business logic things that we

00:15:06,820 --> 00:15:11,590
can't reuse and then there are some

00:15:08,950 --> 00:15:12,820
native SDKs such as for analytics that

00:15:11,590 --> 00:15:14,440
we have to use that we can't actually

00:15:12,820 --> 00:15:18,100
take from JavaScript

00:15:14,440 --> 00:15:20,920
apart from that day and since we do run

00:15:18,100 --> 00:15:22,720
our app in a JavaScript runtime we can

00:15:20,920 --> 00:15:24,190
just use anything that isn't playing

00:15:22,720 --> 00:15:25,930
JavaScript and we don't have to worry

00:15:24,190 --> 00:15:28,900
about changing a thing about it

00:15:25,930 --> 00:15:31,660
so our whole store everything that we

00:15:28,900 --> 00:15:33,970
have written in redux actually still

00:15:31,660 --> 00:15:38,330
works fine and equally well the

00:15:33,970 --> 00:15:40,700
translations are completely reusable so

00:15:38,330 --> 00:15:42,620
when we are writing now our application

00:15:40,700 --> 00:15:45,110
we spent quite a lot of time on

00:15:42,620 --> 00:15:46,580
components and style and that is mainly

00:15:45,110 --> 00:15:50,390
because as I said we can't actually

00:15:46,580 --> 00:15:52,400
reuse the UI very much we spend some

00:15:50,390 --> 00:15:55,310
amount of time on writing business logic

00:15:52,400 --> 00:15:57,170
but most of it is just moving the

00:15:55,310 --> 00:16:00,080
business logic that we already have for

00:15:57,170 --> 00:16:01,430
web into a place where we can share it

00:16:00,080 --> 00:16:02,990
between the two apps so that usually

00:16:01,430 --> 00:16:05,960
just means moving into a different

00:16:02,990 --> 00:16:08,120
folder so that is an easy one and a very

00:16:05,960 --> 00:16:11,570
little time we spend on the actual

00:16:08,120 --> 00:16:13,310
native code and that is given partially

00:16:11,570 --> 00:16:16,130
by the fact that we can do a lot of

00:16:13,310 --> 00:16:18,380
stuff in in JavaScript but partially

00:16:16,130 --> 00:16:20,810
also given by the fact that react native

00:16:18,380 --> 00:16:22,910
already has a huge ecosystem of

00:16:20,810 --> 00:16:25,100
libraries that we can use so I think we

00:16:22,910 --> 00:16:27,020
have maybe like two or three either

00:16:25,100 --> 00:16:28,760
folks our own libraries that we wrote

00:16:27,020 --> 00:16:30,830
but vast majority of things including

00:16:28,760 --> 00:16:33,410
working with camera and Bluetooth are

00:16:30,830 --> 00:16:37,180
things that we can actually use kind of

00:16:33,410 --> 00:16:39,890
out of the box and that's really amazing

00:16:37,180 --> 00:16:41,450
so to sum up what we can share what we

00:16:39,890 --> 00:16:42,050
can share it's exactly the other way

00:16:41,450 --> 00:16:44,510
around

00:16:42,050 --> 00:16:46,850
and we can't reuse your components we

00:16:44,510 --> 00:16:49,160
kinda can reuse styling to a certain

00:16:46,850 --> 00:16:51,080
degree and we can reuse practically all

00:16:49,160 --> 00:16:53,320
of our business logic which gives us a

00:16:51,080 --> 00:16:55,850
huge boost whenever developing anything

00:16:53,320 --> 00:16:58,330
so that's quite all right and we're

00:16:55,850 --> 00:17:00,500
quite happy with it

00:16:58,330 --> 00:17:02,000
but then there is a question you know

00:17:00,500 --> 00:17:03,530
I've been talking about like what we are

00:17:02,000 --> 00:17:06,560
sharing but how are we actually going

00:17:03,530 --> 00:17:09,589
about it well obviously you have to you

00:17:06,560 --> 00:17:11,450
take the code that you want to reuse and

00:17:09,589 --> 00:17:14,150
put it somewhere where both apps can

00:17:11,450 --> 00:17:15,680
reach it and the most obvious answer to

00:17:14,150 --> 00:17:17,600
this problem would be a romona repo

00:17:15,680 --> 00:17:20,270
where you have one folder that is like a

00:17:17,600 --> 00:17:22,120
core or shell shared folder and one

00:17:20,270 --> 00:17:24,980
would be for web one for react native

00:17:22,120 --> 00:17:26,900
some people even combine these together

00:17:24,980 --> 00:17:31,010
in one folder so you would have a file

00:17:26,900 --> 00:17:35,060
where you have a Denari indexed web tjs

00:17:31,010 --> 00:17:37,040
and indexed or Andreas etc but there is

00:17:35,060 --> 00:17:38,990
a program on a repos and that is that

00:17:37,040 --> 00:17:41,450
once you make a small change unless you

00:17:38,990 --> 00:17:43,640
have a very custom tool like a build

00:17:41,450 --> 00:17:45,320
pipeline to the whole thing will get

00:17:43,640 --> 00:17:47,330
compiled to every single time if we

00:17:45,320 --> 00:17:49,910
pushed into this repo we would get

00:17:47,330 --> 00:17:51,590
builds for web for Android for iOS and

00:17:49,910 --> 00:17:53,120
that is just really

00:17:51,590 --> 00:17:55,669
not something that we would want to do

00:17:53,120 --> 00:17:59,570
to ourselves is that obviously you have

00:17:55,669 --> 00:18:01,640
much longer wait times etc and so we

00:17:59,570 --> 00:18:04,130
decided at that point to go for multiple

00:18:01,640 --> 00:18:06,980
repos and we were thinking about sharing

00:18:04,130 --> 00:18:09,950
the code using NPM and and have some

00:18:06,980 --> 00:18:11,480
kind of versioning around it but that

00:18:09,950 --> 00:18:13,850
proved quite cumbersome and that's

00:18:11,480 --> 00:18:16,929
especially because NPM is a really silly

00:18:13,850 --> 00:18:20,090
way of having sort of like private

00:18:16,929 --> 00:18:21,529
packages and that proved so complicated

00:18:20,090 --> 00:18:24,080
for us that we ended up having like a

00:18:21,529 --> 00:18:26,330
very custom tool that one of our

00:18:24,080 --> 00:18:28,760
developers built that literally checks

00:18:26,330 --> 00:18:31,610
out a branch or hash commit from the web

00:18:28,760 --> 00:18:34,610
app and uses it in in the react native

00:18:31,610 --> 00:18:37,039
app and although that works there are a

00:18:34,610 --> 00:18:39,049
lot of problems for example with

00:18:37,039 --> 00:18:40,820
conflicts you know like if someone bumps

00:18:39,049 --> 00:18:44,059
up the version of the comet that we're

00:18:40,820 --> 00:18:45,710
using then you know that the conflicts

00:18:44,059 --> 00:18:48,080
and our pull requests are occurring a

00:18:45,710 --> 00:18:50,240
lot and we're actually now thinking once

00:18:48,080 --> 00:18:52,250
we have a little bit of time so you

00:18:50,240 --> 00:18:54,760
start using mana repos instead to the

00:18:52,250 --> 00:18:57,320
case that would make it much easier and

00:18:54,760 --> 00:18:58,700
hopefully soon there will be a build

00:18:57,320 --> 00:19:00,640
pipeline tool that can just

00:18:58,700 --> 00:19:04,309
out-of-the-box build whatever we

00:19:00,640 --> 00:19:07,130
actually want to build and if not we're

00:19:04,309 --> 00:19:08,840
probably just gonna write our own say

00:19:07,130 --> 00:19:10,130
this is how we are sharing code and

00:19:08,840 --> 00:19:12,350
although it's been a bit of a journey

00:19:10,130 --> 00:19:14,840
and a bit of a struggle I think we're

00:19:12,350 --> 00:19:17,330
we're at a relatively good point because

00:19:14,840 --> 00:19:19,640
we still have a huge advantage of being

00:19:17,330 --> 00:19:24,110
fast while not having too much hustle

00:19:19,640 --> 00:19:27,409
with the tooling and so we have just a

00:19:24,110 --> 00:19:29,240
few more steps to take at the moment we

00:19:27,409 --> 00:19:32,029
are we haven't released our react native

00:19:29,240 --> 00:19:34,190
apps yet so our users are still using

00:19:32,029 --> 00:19:36,289
the native native apps but we have

00:19:34,190 --> 00:19:38,390
started doing trial runs with a lot of

00:19:36,289 --> 00:19:41,980
our users at the moment I think we have

00:19:38,390 --> 00:19:44,360
a trial run for about 15,000 users and

00:19:41,980 --> 00:19:46,399
the apps look really nice I actually

00:19:44,360 --> 00:19:48,740
find like they do look native and they

00:19:46,399 --> 00:19:53,299
feel really neat if it's really nice to

00:19:48,740 --> 00:19:55,450
use them and some of our trial users are

00:19:53,299 --> 00:19:57,830
already giving us really good feedback

00:19:55,450 --> 00:19:59,539
for example this this was one of our

00:19:57,830 --> 00:20:01,100
first ones it was on the first day and

00:19:59,539 --> 00:20:03,289
they said I have found it much clearer

00:20:01,100 --> 00:20:04,590
than the old app and we're like yes you

00:20:03,289 --> 00:20:06,240
know it's great

00:20:04,590 --> 00:20:08,520
and then even better was one comment

00:20:06,240 --> 00:20:10,559
that said I don't understand why we are

00:20:08,520 --> 00:20:12,539
trying this because it looks pretty much

00:20:10,559 --> 00:20:15,210
like the old app does the design changed

00:20:12,539 --> 00:20:17,760
a little bit so you actually can tell

00:20:15,210 --> 00:20:19,799
that the whole thing changed that that

00:20:17,760 --> 00:20:22,140
we they are no longer using native apps

00:20:19,799 --> 00:20:23,700
and that's amazing because you know when

00:20:22,140 --> 00:20:26,039
we used to have web views and the kind

00:20:23,700 --> 00:20:29,700
of stuff the apps were clunky and slow

00:20:26,039 --> 00:20:31,289
and with our app it the users actually

00:20:29,700 --> 00:20:33,480
can't tell the difference which is great

00:20:31,289 --> 00:20:35,429
and using RAM bundling even the

00:20:33,480 --> 00:20:37,409
performance of the startup of the

00:20:35,429 --> 00:20:40,710
application is exactly the same as our

00:20:37,409 --> 00:20:43,500
core native apps so it feels like we're

00:20:40,710 --> 00:20:47,460
getting a lot of benefits out of it

00:20:43,500 --> 00:20:50,419
and that's about it a thank you very

00:20:47,460 --> 00:20:50,419
much for your attention

00:20:56,240 --> 00:21:02,179
I think we've got plenty of time for

00:20:58,700 --> 00:21:04,990
questions if anyone has asked yes they

00:21:02,179 --> 00:21:07,760
have asked and they have voted one a lot

00:21:04,990 --> 00:21:10,700
what do you think about progressive web

00:21:07,760 --> 00:21:13,340
apps will they replace native apps in

00:21:10,700 --> 00:21:15,679
the future that's an interesting one I

00:21:13,340 --> 00:21:18,650
really love our progressive web apps I

00:21:15,679 --> 00:21:20,809
was a huge fan of them for a very long

00:21:18,650 --> 00:21:24,050
time but they just never really picked

00:21:20,809 --> 00:21:26,900
up and whenever we tried to use service

00:21:24,050 --> 00:21:28,490
workers in our apps it just caused a lot

00:21:26,900 --> 00:21:31,130
of problems to a point where we usually

00:21:28,490 --> 00:21:33,890
just decommissioned them quite quickly

00:21:31,130 --> 00:21:37,190
and then I think it was last year at the

00:21:33,890 --> 00:21:40,040
react conference in London Lee Byron

00:21:37,190 --> 00:21:41,590
actually from from Facebook said that

00:21:40,040 --> 00:21:44,120
Facebook doesn't believe that

00:21:41,590 --> 00:21:45,980
progressive web apps will ever get the

00:21:44,120 --> 00:21:48,140
traction that they would need and that's

00:21:45,980 --> 00:21:50,420
why Facebook invests so much money into

00:21:48,140 --> 00:21:52,190
developing native application ad

00:21:50,420 --> 00:21:56,660
frameworks and in react it's just one of

00:21:52,190 --> 00:21:59,270
the many that they have and obviously I

00:21:56,660 --> 00:22:01,429
don't know what the answer is but if a

00:21:59,270 --> 00:22:03,020
company like Facebook is investing so

00:22:01,429 --> 00:22:06,730
much money into native I would say

00:22:03,020 --> 00:22:06,730
that's probably the way things will go

00:22:06,850 --> 00:22:13,670
the second question what do your native

00:22:10,940 --> 00:22:18,050
mobile developers think about react

00:22:13,670 --> 00:22:20,179
native that's that's a tricky question a

00:22:18,050 --> 00:22:23,390
lot of so we obviously had a native

00:22:20,179 --> 00:22:25,280
teams in our company and we offered all

00:22:23,390 --> 00:22:27,380
of our negative developers that they can

00:22:25,280 --> 00:22:29,270
join us in react native and some of them

00:22:27,380 --> 00:22:31,580
were really eager to do it one of them

00:22:29,270 --> 00:22:34,880
even take Friday's off to learn react

00:22:31,580 --> 00:22:37,190
native quickly but a lot of people

00:22:34,880 --> 00:22:38,780
obviously have a lot of reservations and

00:22:37,190 --> 00:22:40,940
it's understandable especially when you

00:22:38,780 --> 00:22:42,760
look at the history you know like with

00:22:40,940 --> 00:22:44,660
the web views and all this stuff there

00:22:42,760 --> 00:22:46,940
javascript solutions were just never

00:22:44,660 --> 00:22:49,010
really on par with the native solutions

00:22:46,940 --> 00:22:51,890
but it looks like react native actually

00:22:49,010 --> 00:22:54,380
does the trick so I'm hoping that more

00:22:51,890 --> 00:22:56,450
native native developers will start

00:22:54,380 --> 00:22:58,309
seeing react native as a good

00:22:56,450 --> 00:23:03,320
alternative and start joining us as well

00:22:58,309 --> 00:23:06,800
I think we have time for one more what

00:23:03,320 --> 00:23:09,299
do you think about flutter I don't know

00:23:06,800 --> 00:23:14,159
what flutter is I'm sorry it's

00:23:09,299 --> 00:23:16,200
shocking then there is one more that

00:23:14,159 --> 00:23:18,419
people would like to get you to get

00:23:16,200 --> 00:23:20,879
answers on performing heavy operations

00:23:18,419 --> 00:23:22,919
is affecting rendering react negative

00:23:20,879 --> 00:23:27,840
only offering one threat Virginia's how

00:23:22,919 --> 00:23:29,669
do you deal with that problem sir there

00:23:27,840 --> 00:23:32,100
are actually quite a few libraries by

00:23:29,669 --> 00:23:34,759
now that's like the main heavy things on

00:23:32,100 --> 00:23:37,019
the J's threat would be animations and

00:23:34,759 --> 00:23:39,419
possibly some like heavy native

00:23:37,019 --> 00:23:42,149
operations to be honest we don't have

00:23:39,419 --> 00:23:44,460
any like computation heavy things that

00:23:42,149 --> 00:23:46,259
would stop it but especially gesture

00:23:44,460 --> 00:23:48,149
handling and animations have been

00:23:46,259 --> 00:23:50,220
problematic and navigation actually

00:23:48,149 --> 00:23:52,619
those are the three main things and by

00:23:50,220 --> 00:23:55,830
now there are really good libraries that

00:23:52,619 --> 00:23:57,690
the sort of go into the native UI thread

00:23:55,830 --> 00:24:00,840
and don't block the chest right at all

00:23:57,690 --> 00:24:03,029
so that way Jas thread is free to you to

00:24:00,840 --> 00:24:05,519
do whatever it needs to do while having

00:24:03,029 --> 00:24:08,159
this sort of like heavy operations on

00:24:05,519 --> 00:24:10,259
the UI thread so I would say as long as

00:24:08,159 --> 00:24:12,450
you use the right libraries for the

00:24:10,259 --> 00:24:17,460
right job that's not the problem anymore

00:24:12,450 --> 00:24:19,529
oh thank you thank you I'll be around so

00:24:17,460 --> 00:24:21,090
if you have any questions let me know or

00:24:19,529 --> 00:24:25,609
hit me up on twitter which is lesson

00:24:21,090 --> 00:24:25,609
with mm cool thank you thank you Anna

00:24:26,320 --> 00:24:28,380

YouTube URL: https://www.youtube.com/watch?v=AXOrXFBe6Dk


