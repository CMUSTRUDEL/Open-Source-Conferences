Title: ReactiveConf 2018 - David Kimr: React Context - Lessons Learned
Publication date: 2018-11-03
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
React Context - Lessons Learned

As Unicornâ€™s CTO, I am responsible for the design and development of the Unicorn Mobile-first IoT-ready Cloud Architecture that all of our most recent products and projects use to deliver end-user functionality to our customers. The key part of the architecture is a React-based frontend library called UU5. Making React Context official in version 16.3 (with new API) we have upgraded several concepts in the library using the new feature - themes, multi-language, SPA layout and components communication. The speech will cover our experience with React Context and will show cases where React Context can help and be more efficient as compared to traditional Redux/MobX state managers.
Captions: 
	00:00:02,140 --> 00:00:08,610
[Music]

00:00:11,699 --> 00:00:17,020
good morning everyone hope you enjoyed

00:00:14,020 --> 00:00:19,600
the show and all all your parties

00:00:17,020 --> 00:00:22,150
yesterday when I was preparing the

00:00:19,600 --> 00:00:24,369
speech I was thinking about when I'm

00:00:22,150 --> 00:00:25,930
attendee of such a conference what are

00:00:24,369 --> 00:00:29,710
the best speeches of what I want to

00:00:25,930 --> 00:00:31,360
attend well first of course keynote you

00:00:29,710 --> 00:00:33,850
know keynotes are bright some great

00:00:31,360 --> 00:00:35,800
visionary people giving you their view

00:00:33,850 --> 00:00:38,350
on the future order of the technology

00:00:35,800 --> 00:00:39,420
it's always very enthusiastic it's

00:00:38,350 --> 00:00:41,380
perfect

00:00:39,420 --> 00:00:44,920
unfortunately I'm not that kind of guy

00:00:41,380 --> 00:00:47,170
so don't expect it from me now but my

00:00:44,920 --> 00:00:50,739
second favorite speech on a conference

00:00:47,170 --> 00:00:54,309
is when I see something may be tiny but

00:00:50,739 --> 00:00:58,149
which which I can try right away which I

00:00:54,309 --> 00:01:01,510
can open open my laptop maybe during the

00:00:58,149 --> 00:01:04,989
presentation and I can try and it can

00:01:01,510 --> 00:01:06,549
help me in my developer stack so this is

00:01:04,989 --> 00:01:09,670
the kind of speech I'm going to give you

00:01:06,549 --> 00:01:11,380
today so I encourage you if you never

00:01:09,670 --> 00:01:14,409
try to react context and you are a

00:01:11,380 --> 00:01:17,860
developer maybe try right away during my

00:01:14,409 --> 00:01:19,570
speech I will help you before we switch

00:01:17,860 --> 00:01:22,390
to react context something about my

00:01:19,570 --> 00:01:25,030
context well I am chief technology

00:01:22,390 --> 00:01:27,850
officer of unicorn unicorn is the large

00:01:25,030 --> 00:01:30,460
system integrator working operating from

00:01:27,850 --> 00:01:34,720
here from frac and we have more than

00:01:30,460 --> 00:01:37,840
four maybe there's 350 but nice 400

00:01:34,720 --> 00:01:41,530
solutions bespoke solutions in banking

00:01:37,840 --> 00:01:45,040
industry automotive telco and of course

00:01:41,530 --> 00:01:46,570
in consumer market every day we have

00:01:45,040 --> 00:01:49,780
more than 2 million of users online

00:01:46,570 --> 00:01:52,990
which are great and we have more than

00:01:49,780 --> 00:01:55,180
2000 IT professionals working on it in 4

00:01:52,990 --> 00:01:59,170
countries and 19 cities so quite a large

00:01:55,180 --> 00:02:02,710
staff and currently more than half of

00:01:59,170 --> 00:02:04,869
them are front-end developers and react

00:02:02,710 --> 00:02:07,030
is the core part of the earth stack so I

00:02:04,869 --> 00:02:09,009
can say that we have one of the largest

00:02:07,030 --> 00:02:10,379
react teams here in a century Europe I'm

00:02:09,009 --> 00:02:14,169
very proud of it

00:02:10,379 --> 00:02:16,059
ok most of developers work on

00:02:14,169 --> 00:02:17,370
developments that we caught unicorn

00:02:16,059 --> 00:02:19,980
mobile first out here it

00:02:17,370 --> 00:02:23,090
architecture which is the architecture

00:02:19,980 --> 00:02:25,500
we are developing for us for days and

00:02:23,090 --> 00:02:27,750
it's focused on progressive abrogation

00:02:25,500 --> 00:02:31,799
because we think there's a great future

00:02:27,750 --> 00:02:33,840
in progressive applications and in many

00:02:31,799 --> 00:02:35,760
industries they will go over native

00:02:33,840 --> 00:02:37,409
applications and it will be due only for

00:02:35,760 --> 00:02:39,560
intent you don't need to develop of

00:02:37,409 --> 00:02:43,079
course responsive working on all devices

00:02:39,560 --> 00:02:43,620
but just HTML Javascript and CSS and

00:02:43,079 --> 00:02:46,470
that's it

00:02:43,620 --> 00:02:50,819
so we are focusing on that for quite

00:02:46,470 --> 00:02:53,970
strongly and I'm still active developer

00:02:50,819 --> 00:02:55,680
and committer in this technology so but

00:02:53,970 --> 00:02:58,680
what I want to share with you today is

00:02:55,680 --> 00:03:00,629
our experience with introducing such a

00:02:58,680 --> 00:03:03,750
new concept like create context into

00:03:00,629 --> 00:03:06,359
this development stack and some pros and

00:03:03,750 --> 00:03:09,840
cons we we found out during during this

00:03:06,359 --> 00:03:11,970
by the way today I'm working 25 years

00:03:09,840 --> 00:03:13,680
plus one day for unicorn because

00:03:11,970 --> 00:03:16,709
yesterday was anniversary of my

00:03:13,680 --> 00:03:21,389
interview so I think it's quite quite

00:03:16,709 --> 00:03:24,269
huge thank you thank you by the way when

00:03:21,389 --> 00:03:27,359
I joined a company you are for now we

00:03:24,269 --> 00:03:29,190
are 2000 but actually I didn't progress

00:03:27,359 --> 00:03:33,540
anywhere because I'm still in the first

00:03:29,190 --> 00:03:36,959
4 ok no problem

00:03:33,540 --> 00:03:39,750
ok maybe sometimes I teach in a private

00:03:36,959 --> 00:03:44,129
college unicron College which gives you

00:03:39,750 --> 00:03:46,530
the degrees in in science in IT and in

00:03:44,129 --> 00:03:49,049
economy and I teach a front-end

00:03:46,530 --> 00:03:50,730
development and when I spare sometimes I

00:03:49,049 --> 00:03:52,620
write elephants you know

00:03:50,730 --> 00:03:55,379
all right travel of course but you know

00:03:52,620 --> 00:03:59,040
riding an elephant it's a nice thing you

00:03:55,379 --> 00:04:01,079
learn a lot because the best way the

00:03:59,040 --> 00:04:03,419
only civilized way how to make elephant

00:04:01,079 --> 00:04:06,720
to go somewhere where you want to go is

00:04:03,419 --> 00:04:09,239
to make him think is the best and

00:04:06,720 --> 00:04:13,549
coolest thing to do in the world to go

00:04:09,239 --> 00:04:16,889
there and second that was this idea and

00:04:13,549 --> 00:04:18,539
those those two ideas are very important

00:04:16,889 --> 00:04:20,459
when you manage 2,000 people in a

00:04:18,539 --> 00:04:23,789
company because its best way how you can

00:04:20,459 --> 00:04:26,070
manage the company ok so enough

00:04:23,789 --> 00:04:27,680
marketing about unicorn and let's switch

00:04:26,070 --> 00:04:30,930
to react context

00:04:27,680 --> 00:04:31,650
let's start with in good old probe

00:04:30,930 --> 00:04:33,890
drilling program

00:04:31,650 --> 00:04:36,660
anyone who develops in reacts knows this

00:04:33,890 --> 00:04:38,760
when you want to gather some information

00:04:36,660 --> 00:04:41,670
some data at the top of the application

00:04:38,760 --> 00:04:44,520
in our example it's an authentication

00:04:41,670 --> 00:04:49,350
information so you lock in your user in

00:04:44,520 --> 00:04:52,170
in in your application and now you need

00:04:49,350 --> 00:04:54,210
to pass this data down your component

00:04:52,170 --> 00:04:57,510
tree and put it somewhere

00:04:54,210 --> 00:05:00,420
no twenties level component very well

00:04:57,510 --> 00:05:03,630
actually render this data so there are

00:05:00,420 --> 00:05:06,330
many ways how to do so the most obvious

00:05:03,630 --> 00:05:07,920
way in react is called probe drilling

00:05:06,330 --> 00:05:09,870
she'll basically trance the probes

00:05:07,920 --> 00:05:12,270
manually during the whole tree of

00:05:09,870 --> 00:05:15,630
components down to the level where you

00:05:12,270 --> 00:05:19,290
need to render them okay it works but

00:05:15,630 --> 00:05:21,240
seems awkward I think because especially

00:05:19,290 --> 00:05:22,980
when you're three is quite deep and it's

00:05:21,240 --> 00:05:26,790
always when you develop a large

00:05:22,980 --> 00:05:28,830
application just a lot of repetition a

00:05:26,790 --> 00:05:30,480
lot of code you have to rewrite if you

00:05:28,830 --> 00:05:34,440
want to rename a probe add a probe

00:05:30,480 --> 00:05:36,600
remove a prop it's a nightmare so this

00:05:34,440 --> 00:05:39,120
is maybe not the best way how to do it

00:05:36,600 --> 00:05:40,950
so there are some ways how to how to

00:05:39,120 --> 00:05:43,410
avoid this the first one which would

00:05:40,950 --> 00:05:45,180
everyone tell you okay lift just stayed

00:05:43,410 --> 00:05:47,580
somewhere make some single than

00:05:45,180 --> 00:05:49,530
JavaScript and maintain the change of

00:05:47,580 --> 00:05:52,710
the state somehow implement some even

00:05:49,530 --> 00:05:55,530
driven system or something this is a

00:05:52,710 --> 00:05:59,340
common way in other frameworks not in

00:05:55,530 --> 00:06:01,860
react so another option of course good

00:05:59,340 --> 00:06:04,770
advice do but the component proposition

00:06:01,860 --> 00:06:07,160
when your tree is true deep river I do

00:06:04,770 --> 00:06:11,970
components to make it make it shallow

00:06:07,160 --> 00:06:14,130
rearrange components well it's nice and

00:06:11,970 --> 00:06:17,010
easy advice it's very hard to implement

00:06:14,130 --> 00:06:18,510
it's not always easy to do this so when

00:06:17,010 --> 00:06:22,200
you start to Google how to how to avoid

00:06:18,510 --> 00:06:24,780
problem program you find Redux maybe it

00:06:22,200 --> 00:06:27,300
will first or second hit when when you

00:06:24,780 --> 00:06:29,940
do this of course you can implement

00:06:27,300 --> 00:06:31,680
Redux so you start reading relaxed

00:06:29,940 --> 00:06:35,220
documentation and you read about

00:06:31,680 --> 00:06:37,740
reducers and global ties etc it's not

00:06:35,220 --> 00:06:38,900
easy for a first reading and first not

00:06:37,740 --> 00:06:43,370
easy to do in too

00:06:38,900 --> 00:06:48,620
right so we heard about react context

00:06:43,370 --> 00:06:51,830
it's quite a new feature it's in react

00:06:48,620 --> 00:06:54,320
it's quite a short time for one year but

00:06:51,830 --> 00:06:56,479
it solves the programming problem very

00:06:54,320 --> 00:07:00,320
effectively because it provides the way

00:06:56,479 --> 00:07:03,919
you can pass pass your data through a

00:07:00,320 --> 00:07:05,990
component tree just directly where you

00:07:03,919 --> 00:07:08,960
need to without doing programming

00:07:05,990 --> 00:07:09,350
without manually copying props on each

00:07:08,960 --> 00:07:12,740
level

00:07:09,350 --> 00:07:14,240
so this avoid from drilling program it

00:07:12,740 --> 00:07:15,740
avoids try rendering of all our

00:07:14,240 --> 00:07:18,530
components because the side-effect of

00:07:15,740 --> 00:07:20,300
drilling is that under prop on each

00:07:18,530 --> 00:07:22,039
level change each triggers render on

00:07:20,300 --> 00:07:24,229
each level and you have to go pass

00:07:22,039 --> 00:07:28,090
through renders fortunate or at least

00:07:24,229 --> 00:07:32,330
quite good in updating your HTML

00:07:28,090 --> 00:07:34,729
document object model but still does

00:07:32,330 --> 00:07:36,800
some extra extra work your browser need

00:07:34,729 --> 00:07:40,669
to do when it's not needed

00:07:36,800 --> 00:07:43,340
okay so rack context does this and now I

00:07:40,669 --> 00:07:45,680
will show you in a few slides the API

00:07:43,340 --> 00:07:48,080
and how it's super simple to use it and

00:07:45,680 --> 00:07:50,180
then we go through some deeper deeper

00:07:48,080 --> 00:07:54,139
programs and deeper things which we

00:07:50,180 --> 00:07:56,630
found out in our stack and typical

00:07:54,139 --> 00:07:59,289
mistakes our developers might when

00:07:56,630 --> 00:08:02,449
introduced react context and replication

00:07:59,289 --> 00:08:05,570
for typically react context is used for

00:08:02,449 --> 00:08:07,940
global or session settings like this

00:08:05,570 --> 00:08:10,580
obvious authentication it may be

00:08:07,940 --> 00:08:14,000
language internalization it may be

00:08:10,580 --> 00:08:16,130
teaming most of species of about react

00:08:14,000 --> 00:08:18,050
context are about teaming your

00:08:16,130 --> 00:08:19,909
application about changing colors and

00:08:18,050 --> 00:08:22,729
the ground pictures will attach to that

00:08:19,909 --> 00:08:26,960
later of course you can avoid its time

00:08:22,729 --> 00:08:28,849
zones anymore maybe maybe you will see a

00:08:26,960 --> 00:08:31,340
red context is good enough to manage

00:08:28,849 --> 00:08:33,440
your application state just out of the

00:08:31,340 --> 00:08:35,839
box without introducing any other tool

00:08:33,440 --> 00:08:39,529
into your stack without using radix move

00:08:35,839 --> 00:08:43,420
six more Big Sur other ok let's go to

00:08:39,529 --> 00:08:47,000
the API the API to do is super simple

00:08:43,420 --> 00:08:49,279
there are just few methods you need to

00:08:47,000 --> 00:08:51,300
know to use red context just two

00:08:49,279 --> 00:08:53,070
components you need to know

00:08:51,300 --> 00:08:56,900
and let's show some codes it will be

00:08:53,070 --> 00:08:59,820
better first how to create an context

00:08:56,900 --> 00:09:01,500
there's a react great context method and

00:08:59,820 --> 00:09:03,180
when you call it it actually provides

00:09:01,500 --> 00:09:06,540
you an object which contains two new

00:09:03,180 --> 00:09:09,000
components one is called provider is the

00:09:06,540 --> 00:09:11,670
component which holds the data to the

00:09:09,000 --> 00:09:14,370
contextual data you need to pass through

00:09:11,670 --> 00:09:16,080
a component tree and that's the

00:09:14,370 --> 00:09:17,820
component when if you need to change the

00:09:16,080 --> 00:09:20,340
contest for you you change it on

00:09:17,820 --> 00:09:22,710
provider level and second it will

00:09:20,340 --> 00:09:24,540
provide consumer compare component which

00:09:22,710 --> 00:09:27,660
is the computer component you include

00:09:24,540 --> 00:09:30,450
into your sub components in the sub tree

00:09:27,660 --> 00:09:32,580
and which allowed to consume the data

00:09:30,450 --> 00:09:35,640
from the provider and which will trigger

00:09:32,580 --> 00:09:39,690
render anytime provider changes the

00:09:35,640 --> 00:09:41,640
value so the most easy way is just to

00:09:39,690 --> 00:09:45,480
quadrate create context it will create a

00:09:41,640 --> 00:09:47,700
new context new to components or you can

00:09:45,480 --> 00:09:50,100
use default value for a provider value

00:09:47,700 --> 00:09:52,920
right away so when you pass the first

00:09:50,100 --> 00:09:55,400
argument to react react crate context it

00:09:52,920 --> 00:10:00,930
will give you default values for further

00:09:55,400 --> 00:10:02,460
sorry for your context then you need to

00:10:00,930 --> 00:10:04,380
place those new components somewhere in

00:10:02,460 --> 00:10:06,810
your component tree first you need to

00:10:04,380 --> 00:10:08,520
place a provider provider will be

00:10:06,810 --> 00:10:10,350
usually the topmost or one of the

00:10:08,520 --> 00:10:11,970
topmost components in your component

00:10:10,350 --> 00:10:16,290
tree it will be somewhere around app

00:10:11,970 --> 00:10:18,240
page somewhere on top because consumers

00:10:16,290 --> 00:10:19,830
work only when they are in the context

00:10:18,240 --> 00:10:21,960
of the provider of course so there need

00:10:19,830 --> 00:10:25,590
to be children somewhere in the subtree

00:10:21,960 --> 00:10:28,110
of the provider so if we place to our

00:10:25,590 --> 00:10:30,150
page content component which from the

00:10:28,110 --> 00:10:33,480
name it looks like a topmost component

00:10:30,150 --> 00:10:36,180
in application you will place my user

00:10:33,480 --> 00:10:38,550
context provider and provider has just

00:10:36,180 --> 00:10:41,160
one value just one prop the prop is

00:10:38,550 --> 00:10:42,930
called value and you can pass anything

00:10:41,160 --> 00:10:44,760
to this prop anything you can pass to

00:10:42,930 --> 00:10:47,040
any other prop in reactor so it might be

00:10:44,760 --> 00:10:50,490
number it might be string it might be

00:10:47,040 --> 00:10:52,310
null it might be of course an object and

00:10:50,490 --> 00:10:55,080
which is the most typical usage of

00:10:52,310 --> 00:11:00,420
provider value and you render your

00:10:55,080 --> 00:11:02,640
children and then notice that you don't

00:11:00,420 --> 00:11:03,750
use just consumer you use my user

00:11:02,640 --> 00:11:06,360
context the

00:11:03,750 --> 00:11:09,600
consumer because this context is about

00:11:06,360 --> 00:11:11,550
user so those components are created by

00:11:09,600 --> 00:11:12,870
react especially for this context we

00:11:11,550 --> 00:11:15,690
will touch the slider because we can

00:11:12,870 --> 00:11:19,200
have more pondus in one application okay

00:11:15,690 --> 00:11:21,960
now you take now you take your my user

00:11:19,200 --> 00:11:23,370
context consumer and I render it in your

00:11:21,960 --> 00:11:25,260
application which will be concept

00:11:23,370 --> 00:11:27,960
context-sensitive basically which

00:11:25,260 --> 00:11:31,350
renders the data from the context you

00:11:27,960 --> 00:11:33,600
pass the data from the consumer to some

00:11:31,350 --> 00:11:35,340
components by calling children as a

00:11:33,600 --> 00:11:38,520
function you should everybody know how

00:11:35,340 --> 00:11:39,300
to do it so I used directly some nice

00:11:38,520 --> 00:11:42,210
destructuring

00:11:39,300 --> 00:11:44,820
of the value so extract user name and

00:11:42,210 --> 00:11:48,330
user photo from the context and pass it

00:11:44,820 --> 00:11:51,840
here to to image which we were under the

00:11:48,330 --> 00:11:53,360
photo and to some day which were under

00:11:51,840 --> 00:11:56,970
name easy peasy

00:11:53,360 --> 00:12:00,870
okay so this is my consumer actually in

00:11:56,970 --> 00:12:03,470
react 16.6 which is available for since

00:12:00,870 --> 00:12:06,090
last week so it's like one week old

00:12:03,470 --> 00:12:08,310
information you have another way how you

00:12:06,090 --> 00:12:11,400
can consume your context inside your

00:12:08,310 --> 00:12:14,040
child component you can just assign

00:12:11,400 --> 00:12:17,900
context type I'm using here of course

00:12:14,040 --> 00:12:20,370
experimental but very useful syntax of

00:12:17,900 --> 00:12:22,950
JavaScript classes so I define static

00:12:20,370 --> 00:12:25,050
property for for the class and assign

00:12:22,950 --> 00:12:27,089
the context typed this my user context

00:12:25,050 --> 00:12:29,850
I've imported from the module where I

00:12:27,089 --> 00:12:32,040
created it and now you can access the

00:12:29,850 --> 00:12:34,410
context like you would access state or

00:12:32,040 --> 00:12:37,230
props so when you want to access user

00:12:34,410 --> 00:12:38,780
photo you just go this context dot user

00:12:37,230 --> 00:12:42,089
photo

00:12:38,780 --> 00:12:45,480
context that dot username will be your

00:12:42,089 --> 00:12:46,650
name and if you use this in your render

00:12:45,480 --> 00:12:48,690
function

00:12:46,650 --> 00:12:51,900
the Wrangler will be triggered anytime

00:12:48,690 --> 00:12:55,500
contacts will be changed so we will be

00:12:51,900 --> 00:12:56,940
change we will touch so this is

00:12:55,500 --> 00:12:59,910
easy-peasy

00:12:56,940 --> 00:13:02,160
and very simple simple syntax for using

00:12:59,910 --> 00:13:03,870
context when you are using just one

00:13:02,160 --> 00:13:05,760
context in application is the best way

00:13:03,870 --> 00:13:08,370
how to integrate and very easy to

00:13:05,760 --> 00:13:13,530
understand for everybody who's familiar

00:13:08,370 --> 00:13:15,450
with props and state okay so here's a

00:13:13,530 --> 00:13:18,240
result of our context

00:13:15,450 --> 00:13:20,370
your new componentry looks much better

00:13:18,240 --> 00:13:22,340
because you just passed your your

00:13:20,370 --> 00:13:25,680
authentication perhaps on a top level

00:13:22,340 --> 00:13:27,990
all your intermediate components doesn't

00:13:25,680 --> 00:13:30,360
need to drill down drops down down there

00:13:27,990 --> 00:13:31,830
and even your User Profile component

00:13:30,360 --> 00:13:33,600
which renders data from the

00:13:31,830 --> 00:13:35,310
authentication doesn't need to get those

00:13:33,600 --> 00:13:38,610
props because it will get them from the

00:13:35,310 --> 00:13:41,160
context so you see the coton on the

00:13:38,610 --> 00:13:44,190
right side much better to understand

00:13:41,160 --> 00:13:49,410
much much better to UM to maintain okay

00:13:44,190 --> 00:13:54,660
so this is the context API and now some

00:13:49,410 --> 00:13:57,390
hints first it's true that any time

00:13:54,660 --> 00:14:00,660
provider changes its value it will

00:13:57,390 --> 00:14:03,360
render all the consumers so when

00:14:00,660 --> 00:14:07,710
provider changes the value it's the same

00:14:03,360 --> 00:14:10,260
when prop value in react change so if

00:14:07,710 --> 00:14:13,710
it's a number then if there's a

00:14:10,260 --> 00:14:15,920
different value in number the value

00:14:13,710 --> 00:14:19,020
changed and the render will be triggered

00:14:15,920 --> 00:14:21,330
if it's a string the same if it's an

00:14:19,020 --> 00:14:25,020
object of course the object reference

00:14:21,330 --> 00:14:27,030
must change to trigger so the first

00:14:25,020 --> 00:14:29,400
common mistake I found in our code and

00:14:27,030 --> 00:14:33,180
many places was of course we need to

00:14:29,400 --> 00:14:35,580
pass an object so let's take our context

00:14:33,180 --> 00:14:38,220
values from somewhere doesn't need to be

00:14:35,580 --> 00:14:41,040
explained here from where and let's

00:14:38,220 --> 00:14:44,990
create an object directly into gs6

00:14:41,040 --> 00:14:48,930
and pass it to the value okay it works

00:14:44,990 --> 00:14:52,170
but it works too much because this

00:14:48,930 --> 00:14:55,200
sentence means that anytime this Michael

00:14:52,170 --> 00:14:57,930
user context provider gets rendered new

00:14:55,200 --> 00:15:00,510
object is created from those values so

00:14:57,930 --> 00:15:02,880
anytime parent component renders

00:15:00,510 --> 00:15:07,620
provider will be rendered and it will

00:15:02,880 --> 00:15:11,010
render all consumer components so it

00:15:07,620 --> 00:15:12,840
might be some quite a lot of overhead ok

00:15:11,010 --> 00:15:14,790
because actually there's no should

00:15:12,840 --> 00:15:16,680
component update from context function

00:15:14,790 --> 00:15:18,630
in life cycle they react

00:15:16,680 --> 00:15:21,000
maybe we should at this but correctly

00:15:18,630 --> 00:15:24,420
not so when value of provider is

00:15:21,000 --> 00:15:27,990
triggered all consumers Valerie render

00:15:24,420 --> 00:15:29,910
so on the other hand when you just pass

00:15:27,990 --> 00:15:32,160
a reference to an object which is

00:15:29,910 --> 00:15:35,850
defined somewhere in your code and then

00:15:32,160 --> 00:15:37,890
you change the object piece the object

00:15:35,850 --> 00:15:41,130
reference will not change the provider

00:15:37,890 --> 00:15:42,450
will not render or your consumers so

00:15:41,130 --> 00:15:45,330
what's the solution

00:15:42,450 --> 00:15:48,420
well the best solution is let react to

00:15:45,330 --> 00:15:50,580
do his work what is the best and what is

00:15:48,420 --> 00:15:52,920
react very Boonton it's changing and

00:15:50,580 --> 00:15:55,380
managing the state of the component so

00:15:52,920 --> 00:15:58,230
matter by my advice how to manage the

00:15:55,380 --> 00:16:00,600
value of the provider would be left over

00:15:58,230 --> 00:16:05,790
you to the state of the parent component

00:16:00,600 --> 00:16:08,250
so we have here in component state this

00:16:05,790 --> 00:16:13,470
user context key which contains our

00:16:08,250 --> 00:16:16,500
values and in provider we assign the

00:16:13,470 --> 00:16:19,770
value to the state now if you change the

00:16:16,500 --> 00:16:22,670
state in the react proper way not

00:16:19,770 --> 00:16:26,940
directly by using Create state of course

00:16:22,670 --> 00:16:29,390
any time the user context changes this

00:16:26,940 --> 00:16:33,480
will render it will render consumers

00:16:29,390 --> 00:16:36,300
very easy maybe the best way you can of

00:16:33,480 --> 00:16:39,029
course left it to props but then you can

00:16:36,300 --> 00:16:41,250
manage object references change etc when

00:16:39,029 --> 00:16:44,570
you lift it to state regular do this for

00:16:41,250 --> 00:16:49,310
you and you'd need to care for it okay

00:16:44,570 --> 00:16:52,230
another advice when your context is a

00:16:49,310 --> 00:16:54,360
sets of objects with distinct values but

00:16:52,230 --> 00:16:56,850
you don't change each property of the

00:16:54,360 --> 00:16:59,610
object any time maybe the good way would

00:16:56,850 --> 00:17:03,750
be to lift them to some module name

00:16:59,610 --> 00:17:06,780
those object values and then just assign

00:17:03,750 --> 00:17:08,370
a string to your context because links

00:17:06,780 --> 00:17:11,069
is compared by value every time in

00:17:08,370 --> 00:17:13,110
JavaScript so in the string changes you

00:17:11,069 --> 00:17:15,480
do a render of course in your consumer

00:17:13,110 --> 00:17:17,520
component you know they need to import

00:17:15,480 --> 00:17:19,470
those this is the theming of course I

00:17:17,520 --> 00:17:22,939
studied a week we can avoid it in a real

00:17:19,470 --> 00:17:27,839
context speech you can import teams and

00:17:22,939 --> 00:17:30,090
you get a value from from this object so

00:17:27,839 --> 00:17:34,200
this is another good practice how to use

00:17:30,090 --> 00:17:37,410
context another good practice sometimes

00:17:34,200 --> 00:17:39,610
many times actually you need to trigger

00:17:37,410 --> 00:17:42,429
the update of the whole

00:17:39,610 --> 00:17:44,760
context from some consumer because

00:17:42,429 --> 00:17:47,290
something down in your application tree

00:17:44,760 --> 00:17:49,929
changes and you need to trigger the

00:17:47,290 --> 00:17:52,720
context change so what's the best way

00:17:49,929 --> 00:17:54,340
how to how to get to your provider and

00:17:52,720 --> 00:17:59,040
how to how to trigger the change

00:17:54,340 --> 00:18:03,010
well again very easy react practice

00:17:59,040 --> 00:18:05,020
create a handler a function actually in

00:18:03,010 --> 00:18:06,670
a parent component which will change the

00:18:05,020 --> 00:18:10,270
state of the of the parent component

00:18:06,670 --> 00:18:12,309
will change the context and pass the

00:18:10,270 --> 00:18:15,280
reference to this function to their

00:18:12,309 --> 00:18:18,720
context so if you do it this way I'm

00:18:15,280 --> 00:18:21,309
again using this experimental property

00:18:18,720 --> 00:18:25,240
but in this case private property

00:18:21,309 --> 00:18:29,890
property class syntax if you do it this

00:18:25,240 --> 00:18:33,540
way you can pass and you can you can

00:18:29,890 --> 00:18:36,220
call it from any consumer okay

00:18:33,540 --> 00:18:38,350
actually there's no need to have just

00:18:36,220 --> 00:18:40,900
one context in an application if you

00:18:38,350 --> 00:18:43,540
have different context values and

00:18:40,900 --> 00:18:44,919
different consumers basically components

00:18:43,540 --> 00:18:47,230
which will which will render on

00:18:44,919 --> 00:18:49,780
different keys which change in your

00:18:47,230 --> 00:18:53,890
contest don't put them in one context

00:18:49,780 --> 00:18:59,250
create more context and render more

00:18:53,890 --> 00:19:02,770
context this is the advice over here

00:18:59,250 --> 00:19:04,690
another another advice is that it looks

00:19:02,770 --> 00:19:07,480
like context is global but it's not true

00:19:04,690 --> 00:19:11,919
because consumer goes through the

00:19:07,480 --> 00:19:14,410
component 3 and always finds the closest

00:19:11,919 --> 00:19:17,190
appropriate provider so if you need to

00:19:14,410 --> 00:19:20,140
change your context in your subtree and

00:19:17,190 --> 00:19:22,179
for one part of the sub here for

00:19:20,140 --> 00:19:24,010
different 3 of comfo different values of

00:19:22,179 --> 00:19:26,890
context for another power different

00:19:24,010 --> 00:19:29,470
value you can do it just by rendering

00:19:26,890 --> 00:19:32,890
another provider of the same type inside

00:19:29,470 --> 00:19:34,720
your component tree is the example if

00:19:32,890 --> 00:19:36,910
you need if you want to have a component

00:19:34,720 --> 00:19:40,929
which will which will render headings

00:19:36,910 --> 00:19:42,340
and you need to don't need to you don't

00:19:40,929 --> 00:19:44,230
want to count about the headings you

00:19:42,340 --> 00:19:46,720
just want to when you put your component

00:19:44,230 --> 00:19:48,790
inside another component it will find

00:19:46,720 --> 00:19:51,660
out on which level address and render

00:19:48,790 --> 00:19:53,010
proper proper heading level and when you

00:19:51,660 --> 00:19:54,870
put another component inside this

00:19:53,010 --> 00:19:57,320
component it will again render the

00:19:54,870 --> 00:20:00,270
proper heading level you do it just this

00:19:57,320 --> 00:20:01,860
you can be just one component which

00:20:00,270 --> 00:20:05,430
renders consumer on the top level

00:20:01,860 --> 00:20:08,310
consumer finds out if there is context

00:20:05,430 --> 00:20:10,470
already if not it will create one and it

00:20:08,310 --> 00:20:13,560
will update the level actually it will

00:20:10,470 --> 00:20:15,120
add one to this level and then you can

00:20:13,560 --> 00:20:16,950
render anything and if you put this

00:20:15,120 --> 00:20:19,680
component inside somewhere in the

00:20:16,950 --> 00:20:21,510
subtree it will be the proper level and

00:20:19,680 --> 00:20:23,490
it will increase it and for the

00:20:21,510 --> 00:20:25,890
subsidiary there will be no interest

00:20:23,490 --> 00:20:27,180
level of of course this is very simple

00:20:25,890 --> 00:20:28,860
example there might be different ways

00:20:27,180 --> 00:20:30,960
how to do it but I think you get the

00:20:28,860 --> 00:20:32,640
idea how you can change the way sure

00:20:30,960 --> 00:20:35,430
we've used it in one of our applications

00:20:32,640 --> 00:20:37,560
for very difficult difficult task

00:20:35,430 --> 00:20:41,370
because we have a document altering

00:20:37,560 --> 00:20:45,210
applications called Bukit and it allows

00:20:41,370 --> 00:20:47,970
you to to author online documentation in

00:20:45,210 --> 00:20:49,830
many languages parallely it's best by

00:20:47,970 --> 00:20:51,120
how to how to do it for for someone who

00:20:49,830 --> 00:20:54,360
want to translate it to whom the

00:20:51,120 --> 00:20:56,880
original documentation and translations

00:20:54,360 --> 00:20:59,550
to other languages in place in one place

00:20:56,880 --> 00:21:01,800
so we have one language for the

00:20:59,550 --> 00:21:03,690
application and each section has its own

00:21:01,800 --> 00:21:05,460
language and the author can switch

00:21:03,690 --> 00:21:08,040
between languages and this is done

00:21:05,460 --> 00:21:09,630
through direct context it's works very

00:21:08,040 --> 00:21:12,290
well for hundreds of sections in one

00:21:09,630 --> 00:21:15,690
page so it's very fast how fast is it

00:21:12,290 --> 00:21:18,000
actually it's very fast when you

00:21:15,690 --> 00:21:20,280
consider reactor context performance

00:21:18,000 --> 00:21:22,800
shouldn't be an issue we've tried that

00:21:20,280 --> 00:21:23,960
thousands of consumers in one page is

00:21:22,800 --> 00:21:27,000
not a problem

00:21:23,960 --> 00:21:29,250
so which providers is bit more difficult

00:21:27,000 --> 00:21:31,800
but your provider should be sparse in

00:21:29,250 --> 00:21:34,290
your three but hundreds of providers are

00:21:31,800 --> 00:21:36,000
ok as well so it's generally faster than

00:21:34,290 --> 00:21:38,780
redux because it's building it's less

00:21:36,000 --> 00:21:41,310
complex so performance is not an issue

00:21:38,780 --> 00:21:44,010
ok can it be used for state management

00:21:41,310 --> 00:21:47,610
of the whole application in my opinion

00:21:44,010 --> 00:21:49,080
and strongly opinionated opinion yes of

00:21:47,610 --> 00:21:51,300
course

00:21:49,080 --> 00:21:53,340
it's nice about win way you don't need

00:21:51,300 --> 00:21:58,270
to introduce Redux more based on any

00:21:53,340 --> 00:21:59,800
other tool into your stack but maybe

00:21:58,270 --> 00:22:02,350
you already did and you are familiar

00:21:59,800 --> 00:22:04,390
with the redux there's no need to throw

00:22:02,350 --> 00:22:08,080
it away and replace for your context it

00:22:04,390 --> 00:22:10,120
will rock almost the same and generally

00:22:08,080 --> 00:22:14,220
react context it's much easier to learn

00:22:10,120 --> 00:22:16,690
for beginners so yes I think such state

00:22:14,220 --> 00:22:19,470
really solved the state of component

00:22:16,690 --> 00:22:22,450
maybe the best of best in the market and

00:22:19,470 --> 00:22:27,100
create contexts solve the application

00:22:22,450 --> 00:22:35,350
straight out of the box in regs okay

00:22:27,100 --> 00:22:36,520
that's it questions answers all right

00:22:35,350 --> 00:22:38,200
thank you David

00:22:36,520 --> 00:22:41,380
we have a couple of questions for you

00:22:38,200 --> 00:22:43,900
ready okay yeah all right we have a very

00:22:41,380 --> 00:22:46,120
popular one here how does this scale is

00:22:43,900 --> 00:22:48,040
it really an alternative to redux other

00:22:46,120 --> 00:22:51,820
state management libraries in a big

00:22:48,040 --> 00:22:54,070
application well maybe I answered in one

00:22:51,820 --> 00:22:57,160
of the last slides it scales very well

00:22:54,070 --> 00:22:58,840
but on the other hand if you want to use

00:22:57,160 --> 00:23:00,640
it efficiently you have to think about

00:22:58,840 --> 00:23:02,670
more context you have to split your

00:23:00,640 --> 00:23:06,309
context according the way it's updated

00:23:02,670 --> 00:23:09,309
so the thinking about react context I

00:23:06,309 --> 00:23:11,140
think it's more difficult to comparing

00:23:09,309 --> 00:23:14,170
to redux when you know how to use it

00:23:11,140 --> 00:23:16,270
because radix does this work for you and

00:23:14,170 --> 00:23:19,420
you don't need to think about if this

00:23:16,270 --> 00:23:23,020
way if this part updates different way I

00:23:19,420 --> 00:23:24,730
have to introduce another Redux so if

00:23:23,020 --> 00:23:29,410
you use it carefully it can scale

00:23:24,730 --> 00:23:31,179
perfectly but it it needs more

00:23:29,410 --> 00:23:32,950
architecting than redux I would say in

00:23:31,179 --> 00:23:35,410
this part all right the next question

00:23:32,950 --> 00:23:39,340
can a component subscribe to multiple

00:23:35,410 --> 00:23:42,370
contexts of course it can you just

00:23:39,340 --> 00:23:44,890
render consumers inside a component one

00:23:42,370 --> 00:23:47,110
inside other and you can consume the

00:23:44,890 --> 00:23:51,429
context of as many providers as you want

00:23:47,110 --> 00:23:56,290
okay next one from Robert does context

00:23:51,429 --> 00:24:00,460
API work with pure components well of

00:23:56,290 --> 00:24:04,300
course it does yeah but there's no it's

00:24:00,460 --> 00:24:05,860
yet the consumer is just a component so

00:24:04,300 --> 00:24:09,660
when you render a consumer consumer

00:24:05,860 --> 00:24:12,130
inside a pure component it will work

00:24:09,660 --> 00:24:14,050
next one phenomenal

00:24:12,130 --> 00:24:19,480
create presentational components with

00:24:14,050 --> 00:24:24,310
react context API well I'm not sure if I

00:24:19,480 --> 00:24:28,120
understand the question perfectly but if

00:24:24,310 --> 00:24:32,800
you mean that you want to change the

00:24:28,120 --> 00:24:34,420
context of the render often of some

00:24:32,800 --> 00:24:38,590
presentational component according to

00:24:34,420 --> 00:24:40,180
context it's just easier I shown you

00:24:38,590 --> 00:24:42,900
of course it's always a good practice

00:24:40,180 --> 00:24:45,550
and I think it was there in one of the

00:24:42,900 --> 00:24:47,680
presentations last day if you split your

00:24:45,550 --> 00:24:52,060
components to just presentational and

00:24:47,680 --> 00:24:54,100
logic so comparing director or using

00:24:52,060 --> 00:24:56,710
reactive context it would mean that your

00:24:54,100 --> 00:24:58,030
provider should stay in some higher

00:24:56,710 --> 00:24:59,620
order component is some non visual

00:24:58,030 --> 00:25:02,770
component which will maintain

00:24:59,620 --> 00:25:04,900
application state and logic and you

00:25:02,770 --> 00:25:07,240
render your consumers inside your

00:25:04,900 --> 00:25:09,130
presentation component because they were

00:25:07,240 --> 00:25:13,090
a contextual render you want to put

00:25:09,130 --> 00:25:14,800
whatever the context changes next

00:25:13,090 --> 00:25:16,870
question from ena is this a good

00:25:14,800 --> 00:25:19,660
practice to use react context together

00:25:16,870 --> 00:25:21,760
with redux mob ex or other state manager

00:25:19,660 --> 00:25:24,580
or should developer avoid using

00:25:21,760 --> 00:25:28,380
solutions together well of course it

00:25:24,580 --> 00:25:31,330
depends on rusticana architecture of

00:25:28,380 --> 00:25:32,860
from the developer's perspective less

00:25:31,330 --> 00:25:36,370
truth in your stack means less

00:25:32,860 --> 00:25:38,500
complexity easier learning curve so if

00:25:36,370 --> 00:25:40,000
you can avoid it avoid it but there

00:25:38,500 --> 00:25:42,640
might be some good reasons for example

00:25:40,000 --> 00:25:46,030
when you use Redux for managing the

00:25:42,640 --> 00:25:49,780
state of your application data and use

00:25:46,030 --> 00:25:52,090
context just for teaming or other global

00:25:49,780 --> 00:25:54,600
settings I would say in your application

00:25:52,090 --> 00:25:59,590
that might be it would good by the way

00:25:54,600 --> 00:26:03,330
read Redux react connector uses context

00:25:59,590 --> 00:26:05,620
behind the hood so so there's no no

00:26:03,330 --> 00:26:08,410
performance bottleneck or something when

00:26:05,620 --> 00:26:11,650
you lose it together just complexity of

00:26:08,410 --> 00:26:13,840
your cult mm-hmm all right Lucas box

00:26:11,650 --> 00:26:15,490
would like to know so context type

00:26:13,840 --> 00:26:19,120
injects context props in my child

00:26:15,490 --> 00:26:21,360
component seems magic confused smiley

00:26:19,120 --> 00:26:21,360
face

00:26:21,590 --> 00:26:29,460
okay it doesn't actually of course I've

00:26:27,270 --> 00:26:33,360
used some experimental syntax for class

00:26:29,460 --> 00:26:36,000
but if you want to avoid this you just

00:26:33,360 --> 00:26:38,430
assigned to your class to cross

00:26:36,000 --> 00:26:40,680
identification you just assign dot

00:26:38,430 --> 00:26:43,830
context type and you assign context to

00:26:40,680 --> 00:26:46,610
it and it's no magic this is just the

00:26:43,830 --> 00:26:49,200
proposed syntax for JavaScript classes

00:26:46,610 --> 00:26:51,030
okay or I probably time for one more

00:26:49,200 --> 00:26:53,730
question from checkmate I like that one

00:26:51,030 --> 00:26:55,230
good from you is there any specific

00:26:53,730 --> 00:26:57,240
reason to set the state two equal

00:26:55,230 --> 00:27:00,540
contexts and then passing state rather

00:26:57,240 --> 00:27:03,600
than passing the context directly well

00:27:00,540 --> 00:27:05,790
there is one and that's what I said that

00:27:03,600 --> 00:27:08,940
react is very really very good when

00:27:05,790 --> 00:27:11,730
managing an updating state so when you

00:27:08,940 --> 00:27:14,580
update your state key for our context

00:27:11,730 --> 00:27:17,850
actually what react does bar calling set

00:27:14,580 --> 00:27:20,670
state it would create a new instance of

00:27:17,850 --> 00:27:23,070
your object within the state so the

00:27:20,670 --> 00:27:24,930
object gets new reference ID and when

00:27:23,070 --> 00:27:27,750
you pass it to the context in the render

00:27:24,930 --> 00:27:30,240
if you pass directly you have to manage

00:27:27,750 --> 00:27:31,890
this alone so that's the reason what

00:27:30,240 --> 00:27:33,810
it's better to do it passed by state of

00:27:31,890 --> 00:27:35,810
course it's possible you can you can

00:27:33,810 --> 00:27:37,890
develop it by yourself no problem

00:27:35,810 --> 00:27:39,570
alright and that's what we have time for

00:27:37,890 --> 00:27:42,550
please give a very warm round of

00:27:39,570 --> 00:27:44,290
applause for David thank you very much

00:27:42,550 --> 00:27:46,350
[Applause]

00:27:44,290 --> 00:27:46,350

YouTube URL: https://www.youtube.com/watch?v=R2iIpDdYekk


