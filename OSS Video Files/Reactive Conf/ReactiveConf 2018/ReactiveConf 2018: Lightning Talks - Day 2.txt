Title: ReactiveConf 2018: Lightning Talks - Day 2
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
1. Speaker: Jarda Machaň
Analytics visualizations as simple React components
GoodData.UI is a React-based JavaScript library used for building responsive analytical applications on top of the GoodData platform’s complex data analytics. Let me briefly show you the main principles, philosophy and capabilities of our latest contribution to the field of data visualization.

2. Speaker: Vojta Přikryl
Delightful Drag and Drop for complex interactive UIs
Drag and Drop is undoubtedly one of the most popular and user-friendly interactions in software nowadays. There are plenty awesome libraries for DnD in React realm, covering most of the use cases. We tried them all at productboard, but realized we need something special for complex interfaces we are building. We developed our own solution that satisfied three main requirements we had:

Delightful user experience 🤩
Great performance even for large datasets 🏎
Reusability of already existing code 🔌
In this lightning talk, I will explain why we decided to develop our own solution, what have we achieved, and how other developers can benefit from the knowledge we acquired. And most importantly - We are excited to open-source the tools we created and announce it at conference!

3.  Speaker: Oleksiy Golovko
Fastpack - pack JavaScript fast & easy
Brief intro on the world of bundlers
Why Fastpack is special?
How to install / configure / use it
Short demo if time permits

4.Speaker: Adam Klein
How to write bad code in Redux
Redux forces you to write good code" - I've heard that sentence many times. In fact - it's quite easy to write bad code with Redux, as I've seen many times.
In this talk I will show some bad practices and techniques with Redux, and how to avoid them.
Captions: 
	00:00:02,170 --> 00:00:08,600
[Music]

00:00:11,799 --> 00:00:18,680
hello everyone on the rect conf 2018

00:00:15,920 --> 00:00:21,650
it's great to be here with you so my

00:00:18,680 --> 00:00:26,059
name is Jana Mahan and I'm the developer

00:00:21,650 --> 00:00:28,790
evangelist in good data and I also love

00:00:26,059 --> 00:00:31,460
my wife and she's here today watching me

00:00:28,790 --> 00:00:35,719
for the very first time on stage so I

00:00:31,460 --> 00:00:37,520
shouldn't screw this up thank you for

00:00:35,719 --> 00:00:41,510
the opportunity to speak at such a great

00:00:37,520 --> 00:00:46,280
event and today I'm gonna talk about our

00:00:41,510 --> 00:00:50,350
latest data visualization called

00:00:46,280 --> 00:00:53,230
good data Yui SDK contribution to this

00:00:50,350 --> 00:00:57,250
analytic field

00:00:53,230 --> 00:01:01,820
let me just really quickly and briefly

00:00:57,250 --> 00:01:06,079
introduce good data we have started the

00:01:01,820 --> 00:01:09,409
company more than 10 years ago in Prague

00:01:06,079 --> 00:01:13,999
and Oslo Brno and now we are

00:01:09,409 --> 00:01:17,359
headquartered in San Francisco at the

00:01:13,999 --> 00:01:20,749
beginning there was this nice white

00:01:17,359 --> 00:01:24,740
board and a brilliant idea of data

00:01:20,749 --> 00:01:28,249
analytics in clouds maybe it sounds a

00:01:24,740 --> 00:01:30,590
bit ordinary now in 2018 like watching

00:01:28,249 --> 00:01:33,560
two pegs hologram rapping on the stage

00:01:30,590 --> 00:01:38,840
of Madison Square Garden but back then

00:01:33,560 --> 00:01:42,380
in 2007 it was a million dollars idea so

00:01:38,840 --> 00:01:45,649
there were those five guys in love with

00:01:42,380 --> 00:01:49,959
advanced algebra data and new

00:01:45,649 --> 00:01:49,959
technologies who kick it off

00:01:53,619 --> 00:02:01,189
currently we are an end-to-end data

00:01:57,310 --> 00:02:04,389
analytics platform which enables you to

00:02:01,189 --> 00:02:07,700
load any kind of data process it

00:02:04,389 --> 00:02:11,000
transform it and finally analyze and

00:02:07,700 --> 00:02:13,550
visualize it that means that there must

00:02:11,000 --> 00:02:18,260
be some dashboards at the ends of the

00:02:13,550 --> 00:02:21,680
day right but believe it or not there

00:02:18,260 --> 00:02:22,920
was no dashboard in the initial phase of

00:02:21,680 --> 00:02:26,550
the product in

00:02:22,920 --> 00:02:30,420
2009 but customers wanted it obviously

00:02:26,550 --> 00:02:34,010
so this is the very first dashboard in

00:02:30,420 --> 00:02:38,550
good data as you can see no option of

00:02:34,010 --> 00:02:41,400
drilling or or filtering but an option

00:02:38,550 --> 00:02:44,340
to embed it to your solution which I

00:02:41,400 --> 00:02:50,220
would say is a crucial feature in the

00:02:44,340 --> 00:02:53,989
data analytics field let's move to these

00:02:50,220 --> 00:02:58,140
days we are really strong in so-called

00:02:53,989 --> 00:03:01,440
business to business to business model

00:02:58,140 --> 00:03:04,700
you can imagine it as for example our

00:03:01,440 --> 00:03:07,170
biggest customer Zendesk is providing

00:03:04,700 --> 00:03:10,410
analytics for more than twenty eight

00:03:07,170 --> 00:03:13,769
thousands of their customers for example

00:03:10,410 --> 00:03:18,000
uber or Google and they are using good

00:03:13,769 --> 00:03:22,380
data for this so it means they need to

00:03:18,000 --> 00:03:28,230
use good data front-end in many many

00:03:22,380 --> 00:03:31,320
many different solutions what are the

00:03:28,230 --> 00:03:35,430
options to use good data out there in

00:03:31,320 --> 00:03:39,720
your solution in in your context you can

00:03:35,430 --> 00:03:43,470
embed it using iframe you can also white

00:03:39,720 --> 00:03:47,940
label it using our API with the JSON

00:03:43,470 --> 00:03:51,269
configuration file you can also dig even

00:03:47,940 --> 00:03:56,010
deeper and use our low-level JavaScript

00:03:51,269 --> 00:03:59,910
API but it doesn't stand much for the

00:03:56,010 --> 00:04:05,250
context of the world simple and this is

00:03:59,910 --> 00:04:08,430
the time for good data UI SDK to come to

00:04:05,250 --> 00:04:12,650
the stage because it allows you to

00:04:08,430 --> 00:04:16,709
programmatically shape and customize our

00:04:12,650 --> 00:04:23,250
visualization front-end using those

00:04:16,709 --> 00:04:27,289
simple react components so from now you

00:04:23,250 --> 00:04:30,389
are not limited to use just embedding

00:04:27,289 --> 00:04:33,200
using sometimes those heavyweight

00:04:30,389 --> 00:04:37,250
iframes and you could

00:04:33,200 --> 00:04:40,700
use ready-made react components in your

00:04:37,250 --> 00:04:45,680
solution and because you are developer

00:04:40,700 --> 00:04:49,370
so we don't want to limit you using just

00:04:45,680 --> 00:04:50,690
our components so there we go using the

00:04:49,370 --> 00:04:53,590
so called

00:04:50,690 --> 00:04:58,190
execute component which allows you to

00:04:53,590 --> 00:05:02,060
read any any lines of your custom code

00:04:58,190 --> 00:05:05,320
or the visualization you need to use no

00:05:02,060 --> 00:05:10,330
matter if it is d3 high chart or

00:05:05,320 --> 00:05:14,630
whatever visualization package and PM

00:05:10,330 --> 00:05:18,800
this all together means that good data

00:05:14,630 --> 00:05:25,340
UI SDK allows you to code the whole

00:05:18,800 --> 00:05:29,660
application the whole solution including

00:05:25,340 --> 00:05:31,580
your visual brand identity or taking the

00:05:29,660 --> 00:05:36,830
for example approach to the

00:05:31,580 --> 00:05:40,640
responsiveness you you take so please

00:05:36,830 --> 00:05:43,460
have a look at our developer site where

00:05:40,640 --> 00:05:45,620
you can find not not just the

00:05:43,460 --> 00:05:51,170
documentation but also the library of

00:05:45,620 --> 00:05:54,800
our react components which also comes

00:05:51,170 --> 00:05:57,430
together the source code so maybe some

00:05:54,800 --> 00:06:01,370
of you would like to play a bit around

00:05:57,430 --> 00:06:03,980
locally so for kit and it will be

00:06:01,370 --> 00:06:07,810
absolutely great if you could share any

00:06:03,980 --> 00:06:12,020
thoughts you will have any ideas any

00:06:07,810 --> 00:06:17,210
criticism to it so we can follow your

00:06:12,020 --> 00:06:20,000
thoughts as a community and that was all

00:06:17,210 --> 00:06:22,940
for me for today thank you a lot for

00:06:20,000 --> 00:06:27,020
your attention and for the opportunity

00:06:22,940 --> 00:06:29,140
to speak at the reactive 2018 bye see

00:06:27,020 --> 00:06:29,140
you

00:06:29,560 --> 00:06:35,990
[Music]

00:06:39,340 --> 00:06:47,780
hello everybody my name is vojta and i

00:06:46,069 --> 00:06:50,180
work in great company called product

00:06:47,780 --> 00:06:53,750
world you can also find me on twitter as

00:06:50,180 --> 00:06:55,310
void to underscore prickle today i'd

00:06:53,750 --> 00:06:59,659
like to talk about drag-and-drop and

00:06:55,310 --> 00:07:05,199
building interactive you eyes drag and

00:06:59,659 --> 00:07:09,800
drop everybody loves it kids love it

00:07:05,199 --> 00:07:12,379
humans love it everybody understands it

00:07:09,800 --> 00:07:14,530
you know even my grandpa knows what to

00:07:12,379 --> 00:07:14,530
do

00:07:15,460 --> 00:07:20,330
oops

00:07:17,500 --> 00:07:22,039
we had product board we especially love

00:07:20,330 --> 00:07:25,819
drag-and-drop and when we were thinking

00:07:22,039 --> 00:07:29,270
about implementing next features we went

00:07:25,819 --> 00:07:31,789
to NPM and boom there was a lot of it so

00:07:29,270 --> 00:07:35,120
we tried some libraries like react D&D

00:07:31,789 --> 00:07:36,080
it was probably the first good DND

00:07:35,120 --> 00:07:39,800
librarian react

00:07:36,080 --> 00:07:42,110
it has great dogs it's hecka bow but we

00:07:39,800 --> 00:07:44,690
couldn't use it it didn't allow us to

00:07:42,110 --> 00:07:48,529
create delightful experience we always

00:07:44,690 --> 00:07:51,589
aim for so we try to react beautifully

00:07:48,529 --> 00:07:53,180
ND and yeah it's beautiful now if you

00:07:51,589 --> 00:07:55,279
are building something like Trello board

00:07:53,180 --> 00:07:58,219
you can do it in matter of minutes with

00:07:55,279 --> 00:08:01,669
this tool but again we couldn't use it

00:07:58,219 --> 00:08:04,400
it was for us too opinionated and what

00:08:01,669 --> 00:08:06,589
we wanted to extend the functionality in

00:08:04,400 --> 00:08:10,509
the library there was like no way to do

00:08:06,589 --> 00:08:13,219
it we're playing around with d3

00:08:10,509 --> 00:08:17,199
data-driven documents it's very powerful

00:08:13,219 --> 00:08:20,509
powerful technology bus get guess what

00:08:17,199 --> 00:08:22,339
we couldn't use it now we just didn't

00:08:20,509 --> 00:08:24,919
feel comfortable introducing whole new

00:08:22,339 --> 00:08:27,620
technology into our def stack now we are

00:08:24,919 --> 00:08:32,690
react guys and we want to build things

00:08:27,620 --> 00:08:34,449
on top of react so what are actually our

00:08:32,690 --> 00:08:37,550
needs

00:08:34,449 --> 00:08:40,610
this is roadmap one part of product

00:08:37,550 --> 00:08:42,230
board and what do we want here now we

00:08:40,610 --> 00:08:46,100
want to drag cart

00:08:42,230 --> 00:08:47,300
you wanna drag whole columns and at this

00:08:46,100 --> 00:08:49,640
point you can argue with me

00:08:47,300 --> 00:08:51,560
okay so why didn't you use the react

00:08:49,640 --> 00:08:54,290
beautiful D&D library that was exactly

00:08:51,560 --> 00:08:56,840
the use case right but not really

00:08:54,290 --> 00:08:59,660
there's more of it you know we can turn

00:08:56,840 --> 00:09:02,780
on custom visualizations of the cards

00:08:59,660 --> 00:09:04,190
and look how beautiful animated it is

00:09:02,780 --> 00:09:08,290
you know we can hide things that it

00:09:04,190 --> 00:09:11,510
moves you can turn on different view and

00:09:08,290 --> 00:09:13,850
scroll the board and look at the titles

00:09:11,510 --> 00:09:18,620
in the blue bars how perfectly aligned

00:09:13,850 --> 00:09:19,940
they are at the edge of the viewport so

00:09:18,620 --> 00:09:23,210
yeah you can also collapse things and

00:09:19,940 --> 00:09:26,270
etc we really believe that this helps

00:09:23,210 --> 00:09:28,850
our customers with using our product

00:09:26,270 --> 00:09:31,190
when they have instant feedback on they

00:09:28,850 --> 00:09:34,160
work it's easier for them to understand

00:09:31,190 --> 00:09:35,750
what's going on and also I think it's

00:09:34,160 --> 00:09:41,150
much more fun to use

00:09:35,750 --> 00:09:43,190
playful animated UI so what is the trick

00:09:41,150 --> 00:09:45,590
how did we achieve such beautiful

00:09:43,190 --> 00:09:47,870
animations even in quite complex boards

00:09:45,590 --> 00:09:54,940
and tada

00:09:47,870 --> 00:09:57,530
absolute positions let me explain here

00:09:54,940 --> 00:10:00,590
on the right hand side you can see the

00:09:57,530 --> 00:10:03,680
dome if DIF represents one card on the

00:10:00,590 --> 00:10:05,570
board is on the left and as you can see

00:10:03,680 --> 00:10:09,820
they are all absolutely positioned with

00:10:05,570 --> 00:10:14,480
translate3d so when you are dragging and

00:10:09,820 --> 00:10:18,800
you know the items switch just set new

00:10:14,480 --> 00:10:20,420
3d i mean x and y-coordinate and it's

00:10:18,800 --> 00:10:23,180
just automatically animated with

00:10:20,420 --> 00:10:26,420
transition property from CSS and you

00:10:23,180 --> 00:10:29,240
will have it like for free easy there's

00:10:26,420 --> 00:10:32,090
more of it here you can see that we are

00:10:29,240 --> 00:10:34,030
scrolling the board and some of the day

00:10:32,090 --> 00:10:37,460
is starting to disappear why why is that

00:10:34,030 --> 00:10:38,990
you know the cards are not a viewport

00:10:37,460 --> 00:10:41,920
anymore so there's no need to render

00:10:38,990 --> 00:10:44,000
them and this is like really easy great

00:10:41,920 --> 00:10:45,980
performance optimization and once you

00:10:44,000 --> 00:10:48,650
have all the X&Y coordinates of each

00:10:45,980 --> 00:10:50,240
cards calculated it's just so easy to

00:10:48,650 --> 00:10:54,180
determine what to render and what you're

00:10:50,240 --> 00:10:56,160
not at this point

00:10:54,180 --> 00:10:59,759
I'm glad to announce that we are open

00:10:56,160 --> 00:11:02,189
sourcing the library we create it you

00:10:59,759 --> 00:11:05,850
can find it at github.com select product

00:11:02,189 --> 00:11:08,850
board slash TBD DVD nd quite a silly

00:11:05,850 --> 00:11:11,879
name right well we are in the early

00:11:08,850 --> 00:11:14,749
stage but there are some examples

00:11:11,879 --> 00:11:16,019
already a code you can check it out and

00:11:14,749 --> 00:11:19,230
yeah

00:11:16,019 --> 00:11:21,990
any ideas concerns your experience with

00:11:19,230 --> 00:11:23,339
drag and drop you know just tell me like

00:11:21,990 --> 00:11:24,089
what do you think about it if it makes

00:11:23,339 --> 00:11:27,120
sense or not

00:11:24,089 --> 00:11:30,529
let's talk I'll build around so approach

00:11:27,120 --> 00:11:42,180
me and say hi and let's talk about it

00:11:30,529 --> 00:11:43,559
thank you very much all right doesn't

00:11:42,180 --> 00:11:46,470
look like we have any questions or any

00:11:43,559 --> 00:11:48,180
anything else you'd like to add well not

00:11:46,470 --> 00:11:51,389
really just if you are interested you

00:11:48,180 --> 00:11:52,649
know check the open-source fantastic

00:11:51,389 --> 00:11:55,069
scheme a round of applause thank you

00:11:52,649 --> 00:11:55,069
very much

00:11:55,610 --> 00:12:02,080
[Music]

00:12:05,130 --> 00:12:10,690
I'm here today to present you the first

00:12:08,260 --> 00:12:12,880
pack first pack is a module bundler

00:12:10,690 --> 00:12:14,890
you've probably heard of other module

00:12:12,880 --> 00:12:16,630
bundles right yeah this is JavaScript

00:12:14,890 --> 00:12:20,530
conference so probably you all know

00:12:16,630 --> 00:12:24,340
where pack or parcel and this is the

00:12:20,530 --> 00:12:26,290
competitor actually so I am a lexical of

00:12:24,340 --> 00:12:29,890
comm the lead developer of this thing

00:12:26,290 --> 00:12:33,910
and you can find me on Twitter and on a

00:12:29,890 --> 00:12:38,770
github so why not a module bundler egg

00:12:33,910 --> 00:12:42,070
show and the JavaScript developers it

00:12:38,770 --> 00:12:45,970
faced a lot of problems day by day one

00:12:42,070 --> 00:12:49,120
of those is a building times right so we

00:12:45,970 --> 00:12:53,770
pick just two random numbers one second

00:12:49,120 --> 00:12:56,200
and 100 milliseconds and decided to ask

00:12:53,770 --> 00:12:59,950
ourselves if we could do better

00:12:56,200 --> 00:13:05,380
could we get the sub second bonding time

00:12:59,950 --> 00:13:08,230
like on a cold build and apparently we

00:13:05,380 --> 00:13:12,490
are able to do it so here you can see

00:13:08,230 --> 00:13:16,090
the benchmarking table comparing

00:13:12,490 --> 00:13:19,330
fastpack web pack and apart so and the

00:13:16,090 --> 00:13:21,280
three roles in it and the first role is

00:13:19,330 --> 00:13:25,060
an initial build this is when you just

00:13:21,280 --> 00:13:27,280
installed your application and executed

00:13:25,060 --> 00:13:29,470
the bundler and the bundler doesn't know

00:13:27,280 --> 00:13:32,380
anything about your application but only

00:13:29,470 --> 00:13:35,620
the configuration you has given him the

00:13:32,380 --> 00:13:38,680
persistent cache mode is the second the

00:13:35,620 --> 00:13:40,480
subsequent run which means that there

00:13:38,680 --> 00:13:43,450
might be some artifacts from your

00:13:40,480 --> 00:13:46,330
previous build and you can reuse those

00:13:43,450 --> 00:13:47,890
in this next build and the watch mode is

00:13:46,330 --> 00:13:49,990
something you are very familiar with

00:13:47,890 --> 00:13:52,380
this is when you're running the AF

00:13:49,990 --> 00:13:54,760
server or just watching the filesystem

00:13:52,380 --> 00:13:59,290
change in one file and the bundle

00:13:54,760 --> 00:14:03,970
rebuilds so to prove the table above I

00:13:59,290 --> 00:14:05,620
actually recorded a little demo so you

00:14:03,970 --> 00:14:08,770
can see that the first built in this

00:14:05,620 --> 00:14:10,690
demo takes 0.8 seconds then the

00:14:08,770 --> 00:14:13,810
persistent cache

00:14:10,690 --> 00:14:17,560
and at the top frame I'm changing

00:14:13,810 --> 00:14:21,490
they're cold and I just pick two random

00:14:17,560 --> 00:14:26,380
libraries UI components libraries for

00:14:21,490 --> 00:14:28,240
react which typically are quite big so

00:14:26,380 --> 00:14:32,050
you can see that bundle size is about

00:14:28,240 --> 00:14:34,270
five megabytes which is quite big and

00:14:32,050 --> 00:14:37,300
this is not showing zipped or minified

00:14:34,270 --> 00:14:40,210
so this is bundle essays and then I

00:14:37,300 --> 00:14:44,020
subsequently adding grommet library to

00:14:40,210 --> 00:14:47,980
it which actually duplicates the sides

00:14:44,020 --> 00:14:55,390
of the bundle as you can see during the

00:14:47,980 --> 00:14:57,610
next action so what are the features of

00:14:55,390 --> 00:15:00,720
the first pack so first of all it's a

00:14:57,610 --> 00:15:05,800
fast bundler that's the primary goal and

00:15:00,720 --> 00:15:08,200
this is said been said in a title the

00:15:05,800 --> 00:15:10,570
second one we are trying to respect the

00:15:08,200 --> 00:15:13,600
existing ecosystem and we don't want

00:15:10,570 --> 00:15:15,910
developers to redo everything so we are

00:15:13,600 --> 00:15:18,400
compatible with the web pack loaders we

00:15:15,910 --> 00:15:22,540
didn't try all of them but the basic

00:15:18,400 --> 00:15:26,410
ones like CSS les says whatever you name

00:15:22,540 --> 00:15:29,610
it those are those are working it also

00:15:26,410 --> 00:15:34,090
includes the basic transpilers required

00:15:29,610 --> 00:15:36,970
to run the code in evergreen browsers so

00:15:34,090 --> 00:15:39,160
specifically we are transpiring the

00:15:36,970 --> 00:15:43,090
spread and rest operators removing flow

00:15:39,160 --> 00:15:45,820
type in support in class decorators and

00:15:43,090 --> 00:15:49,320
properties as well as we are converting

00:15:45,820 --> 00:15:52,150
your j6 into the react compatible j6

00:15:49,320 --> 00:15:54,070
also it includes the basic development

00:15:52,150 --> 00:15:55,870
server will a server but without the

00:15:54,070 --> 00:15:59,800
quadrille of what module reloading yet

00:15:55,870 --> 00:16:02,589
it uses the flow parser behind the

00:15:59,800 --> 00:16:06,430
scenes and it's written in Reason ml and

00:16:02,589 --> 00:16:08,110
compiled to a binary executables with

00:16:06,430 --> 00:16:11,110
that being said there are also the

00:16:08,110 --> 00:16:13,060
limitations you would expect it there

00:16:11,110 --> 00:16:15,580
are no windows support right now but we

00:16:13,060 --> 00:16:19,570
are actively working on it there is only

00:16:15,580 --> 00:16:21,250
the development mode so you cannot build

00:16:19,570 --> 00:16:23,300
your bundle for production with the

00:16:21,250 --> 00:16:25,759
first pack yet

00:16:23,300 --> 00:16:30,269
simple page reloading by the dev server

00:16:25,759 --> 00:16:33,269
it depends on a watchman as for watching

00:16:30,269 --> 00:16:36,600
the file system and the configuration is

00:16:33,269 --> 00:16:39,209
in a command line only style right now

00:16:36,600 --> 00:16:41,970
and here is there an example of the

00:16:39,209 --> 00:16:43,829
configuration don't be scared

00:16:41,970 --> 00:16:46,379
this is this configuration is for real

00:16:43,829 --> 00:16:49,889
application we've been working on and it

00:16:46,379 --> 00:16:55,589
actually includes most of the create

00:16:49,889 --> 00:17:00,470
react up goodness so thank you all for

00:16:55,589 --> 00:17:03,839
listening me during our discord channel

00:17:00,470 --> 00:17:06,780
put file an issue on a github you know

00:17:03,839 --> 00:17:08,789
install try try it yourself let us know

00:17:06,780 --> 00:17:17,549
what you're thinking of thank you so

00:17:08,789 --> 00:17:21,600
much oh we got a few questions for you

00:17:17,549 --> 00:17:26,069
I would not expect that sorry guys first

00:17:21,600 --> 00:17:28,409
one is tree shaking supported it it was

00:17:26,069 --> 00:17:30,750
supported before but and we've done a

00:17:28,409 --> 00:17:33,570
big refactoring and it will be supported

00:17:30,750 --> 00:17:36,059
within a few weeks so we are working on

00:17:33,570 --> 00:17:36,500
it right now right now okay next

00:17:36,059 --> 00:17:39,120
question

00:17:36,500 --> 00:17:43,169
what about watch mode I think it's a bit

00:17:39,120 --> 00:17:48,720
more important and initial build it

00:17:43,169 --> 00:17:52,770
exists it's baked by Watchmen which is a

00:17:48,720 --> 00:17:55,799
Facebook utility it works on linux mac

00:17:52,770 --> 00:17:59,580
and windows so it's supported let me

00:17:55,799 --> 00:18:01,590
know if it doesn't work for you the next

00:17:59,580 --> 00:18:03,809
question why not contribute back to web

00:18:01,590 --> 00:18:05,250
pack and they're only core differences

00:18:03,809 --> 00:18:10,950
from web pack that force you to create

00:18:05,250 --> 00:18:14,240
another bundle that's a hard question i

00:18:10,950 --> 00:18:17,789
think we can do better by applying

00:18:14,240 --> 00:18:21,809
binary builds first of all by applying

00:18:17,789 --> 00:18:24,150
there better parsing capabilities

00:18:21,809 --> 00:18:27,240
because we are like protected with the

00:18:24,150 --> 00:18:31,370
static type in and our AST strongly type

00:18:27,240 --> 00:18:33,960
at same so it's way easier to you know

00:18:31,370 --> 00:18:36,659
develop the bundler based on such a

00:18:33,960 --> 00:18:40,609
tools so that would be my question

00:18:36,659 --> 00:18:44,669
but you know alright our last question

00:18:40,609 --> 00:18:50,159
does it support typescript it does via

00:18:44,669 --> 00:18:51,570
the tears loader looks like we might

00:18:50,159 --> 00:18:54,029
have time for one more as a quick letter

00:18:51,570 --> 00:18:55,919
is it complicated to replace webpack

00:18:54,029 --> 00:18:58,529
with Fastback how about projects with

00:18:55,919 --> 00:19:01,289
very customized configurations

00:18:58,529 --> 00:19:06,029
it depends some projects might be easy

00:19:01,289 --> 00:19:08,970
to to be like a powered by the first

00:19:06,029 --> 00:19:11,909
pack others might be more difficult

00:19:08,970 --> 00:19:15,419
it depends project by projects you know

00:19:11,909 --> 00:19:18,659
talk to me after this I will probably

00:19:15,419 --> 00:19:21,210
make an advice all right thank you very

00:19:18,659 --> 00:19:27,640
much Alexey

00:19:21,210 --> 00:19:27,640
[Music]

00:19:30,710 --> 00:19:40,620
who uses redux okay so this is an

00:19:37,200 --> 00:19:43,590
opinionated talk so feel free to cheer

00:19:40,620 --> 00:19:46,200
if you see something you like or boo if

00:19:43,590 --> 00:19:48,120
you see something you don't like and my

00:19:46,200 --> 00:19:50,580
name is Adam Klein I'm a developer

00:19:48,120 --> 00:19:54,720
consultant and trainer and I'm the CEO

00:19:50,580 --> 00:19:56,610
of 500 tech in 500 tech we've started

00:19:54,720 --> 00:19:59,460
using redux when it was just starting

00:19:56,610 --> 00:20:02,870
and we build dozens of projects using

00:19:59,460 --> 00:20:05,580
redux and we learned a lot from each one

00:20:02,870 --> 00:20:07,919
so the original talk was supposed to be

00:20:05,580 --> 00:20:10,440
sharing common mistakes but instead I'm

00:20:07,919 --> 00:20:12,870
going to give you just a taste of our

00:20:10,440 --> 00:20:17,250
tools and bread and best practices that

00:20:12,870 --> 00:20:24,029
work for us so for handling immutable

00:20:17,250 --> 00:20:25,950
data we use Laura chef P no one uses

00:20:24,029 --> 00:20:29,220
lunch of T so it's the functional

00:20:25,950 --> 00:20:31,620
programming version of lodash it has a

00:20:29,220 --> 00:20:34,649
rich API and if you're already using

00:20:31,620 --> 00:20:38,490
lodash then the methods will be familiar

00:20:34,649 --> 00:20:41,629
and the code is very concise much more

00:20:38,490 --> 00:20:44,399
than using plain is-6

00:20:41,629 --> 00:20:47,639
so to make sure that the state never

00:20:44,399 --> 00:20:51,809
gets mutated we use relaxed free fries

00:20:47,639 --> 00:20:54,720
sorry which it is a library that deep

00:20:51,809 --> 00:20:57,200
freezes your state after every action

00:20:54,720 --> 00:21:00,059
which means that if someone tries to

00:20:57,200 --> 00:21:03,330
mutate the state or by accident then

00:21:00,059 --> 00:21:05,220
they will get an exception we is it only

00:21:03,330 --> 00:21:07,830
in development which means we don't get

00:21:05,220 --> 00:21:10,860
any performance penalties in production

00:21:07,830 --> 00:21:12,330
and a great advantage about this

00:21:10,860 --> 00:21:14,399
approach is that we're using plain

00:21:12,330 --> 00:21:16,289
objects which means that it's very easy

00:21:14,399 --> 00:21:18,659
to serialize and integrate with other

00:21:16,289 --> 00:21:25,500
tools and that's the reason we don't use

00:21:18,659 --> 00:21:28,289
immutable J's yay one clap so our

00:21:25,500 --> 00:21:30,509
reducers are pretty simple sorry no time

00:21:28,289 --> 00:21:33,269
for jokes it's a lightning talk and we

00:21:30,509 --> 00:21:36,269
use handle actions from Redux actions

00:21:33,269 --> 00:21:38,460
which allows us to avoid switch cases

00:21:36,269 --> 00:21:41,129
and it also works right we

00:21:38,460 --> 00:21:44,570
typescript because it allows us to use a

00:21:41,129 --> 00:21:47,149
specific action type inside the handler

00:21:44,570 --> 00:21:50,999
we use selectors for encapsulating

00:21:47,149 --> 00:21:54,509
access to the store and we always keep

00:21:50,999 --> 00:21:57,960
them separate from the reducers and that

00:21:54,509 --> 00:22:00,269
is because a selector might access data

00:21:57,960 --> 00:22:03,659
from several locations in the store so

00:22:00,269 --> 00:22:07,110
want to decouple them from reducers we

00:22:03,659 --> 00:22:09,360
basically have two types of selectors if

00:22:07,110 --> 00:22:12,539
we just need simple access to the store

00:22:09,360 --> 00:22:14,309
we use plain functions and only if we

00:22:12,539 --> 00:22:16,169
need some kind of computed value like

00:22:14,309 --> 00:22:18,629
filters aggregated values

00:22:16,169 --> 00:22:22,259
transformations then we use the wrist

00:22:18,629 --> 00:22:25,980
select library that caches the value of

00:22:22,259 --> 00:22:28,909
the selector the way we handled side

00:22:25,980 --> 00:22:33,450
effects async flows stuff like that is

00:22:28,909 --> 00:22:36,450
that we actually write middle words like

00:22:33,450 --> 00:22:41,610
an API middleware that handles our API

00:22:36,450 --> 00:22:44,100
requests in a generic way we don't use

00:22:41,610 --> 00:22:48,509
any of these even though I know they're

00:22:44,100 --> 00:22:51,090
very popular and sorry and that's

00:22:48,509 --> 00:22:56,549
because we think they are either over

00:22:51,090 --> 00:22:59,879
complicated or forced the developer to

00:22:56,549 --> 00:23:03,019
make like break the architecture or give

00:22:59,879 --> 00:23:05,879
them too much power in the wrong places

00:23:03,019 --> 00:23:08,580
so finally let's talk about state design

00:23:05,879 --> 00:23:11,429
let's take an example of a list of users

00:23:08,580 --> 00:23:15,059
that come from the server and the user

00:23:11,429 --> 00:23:17,249
can select them using checkboxes so we

00:23:15,059 --> 00:23:19,320
will store the raw data from the server

00:23:17,249 --> 00:23:22,320
on the state and we will not change it

00:23:19,320 --> 00:23:26,909
and notice that we're using a dictionary

00:23:22,320 --> 00:23:28,710
where the keys are the user IDs and the

00:23:26,909 --> 00:23:31,559
UI state we will keep completely

00:23:28,710 --> 00:23:34,619
separate so in this case for each user

00:23:31,559 --> 00:23:39,299
ID whether it is selected or not in the

00:23:34,619 --> 00:23:41,789
UI what does this give us it means that

00:23:39,299 --> 00:23:43,950
if we reload the data from the server we

00:23:41,789 --> 00:23:46,139
can just overwrite whatever is in the

00:23:43,950 --> 00:23:49,259
store and not worry about losing the

00:23:46,139 --> 00:23:51,149
user selection and also if we need to do

00:23:49,259 --> 00:23:52,749
things like save and restore the UI

00:23:51,149 --> 00:23:57,299
state from local

00:23:52,749 --> 00:23:59,769
then it's much easier when it's separate

00:23:57,299 --> 00:24:02,169
sometimes we need to show some kind of

00:23:59,769 --> 00:24:04,209
loading indication and we have a

00:24:02,169 --> 00:24:07,269
dedicated reducer and set of actions

00:24:04,209 --> 00:24:10,719
just for the network state and basically

00:24:07,269 --> 00:24:14,649
we save the number of pending requests

00:24:10,719 --> 00:24:18,369
per request type and request type is

00:24:14,649 --> 00:24:20,709
just a string label and when that number

00:24:18,369 --> 00:24:25,769
is zero we know that nothing is loading

00:24:20,709 --> 00:24:29,019
and we can hide the spinners etc and

00:24:25,769 --> 00:24:31,690
keeping it isolated in a single reducer

00:24:29,019 --> 00:24:34,719
allows us to reuse the logic and we

00:24:31,690 --> 00:24:39,869
don't have to re-implement it for every

00:24:34,719 --> 00:24:39,869
reducer that handles API requests

00:24:41,309 --> 00:24:47,169
sometimes we use higher order reducers

00:24:43,659 --> 00:24:49,329
but we try to avoid them because we feel

00:24:47,169 --> 00:24:52,599
they make your code complex and hard to

00:24:49,329 --> 00:24:57,399
debug and prone to errors like a name

00:24:52,599 --> 00:25:00,039
clashing of keys finally I want to

00:24:57,399 --> 00:25:03,039
recommend two books if you want to get

00:25:00,039 --> 00:25:05,529
deep into redux the complete redux book

00:25:03,039 --> 00:25:09,509
and thinking in redux you can get both

00:25:05,529 --> 00:25:12,249
of them online so this was just a taste

00:25:09,509 --> 00:25:12,729
if you want to hear more or tell me I'm

00:25:12,249 --> 00:25:15,820
wrong

00:25:12,729 --> 00:25:20,579
catch me around the conference thank you

00:25:15,820 --> 00:25:23,739
[Applause]

00:25:20,579 --> 00:25:25,179
we got some questions there you go do

00:25:23,739 --> 00:25:25,839
you have public repo for your

00:25:25,179 --> 00:25:28,809
middlewares

00:25:25,839 --> 00:25:31,989
so we have a but we have a repo for

00:25:28,809 --> 00:25:34,269
boiler plate of our projects which has a

00:25:31,989 --> 00:25:38,429
middleware Redux and a lot of other cool

00:25:34,269 --> 00:25:41,049
stuff we will release it publicly so

00:25:38,429 --> 00:25:44,229
probably just follow me or my company

00:25:41,049 --> 00:25:45,639
and we'll let you know right now the

00:25:44,229 --> 00:25:48,759
popular question what do you think about

00:25:45,639 --> 00:25:52,659
Emma instead of I - FP

00:25:48,759 --> 00:25:55,379
yeah so amar is a library for handling

00:25:52,659 --> 00:25:57,820
immutable data in case you didn't know

00:25:55,379 --> 00:26:02,950
actually we started losing using Laura

00:25:57,820 --> 00:26:04,750
chef P before Emma was out we like it

00:26:02,950 --> 00:26:06,580
but I think if we would

00:26:04,750 --> 00:26:11,260
Cedar's switching to something else it

00:26:06,580 --> 00:26:13,750
would be imir all right any specific

00:26:11,260 --> 00:26:16,360
reason why going with eyelash FP instead

00:26:13,750 --> 00:26:18,940
of things like Ram de yeah so Randa is a

00:26:16,360 --> 00:26:21,640
lower library for handling a functional

00:26:18,940 --> 00:26:25,360
programming and yeah

00:26:21,640 --> 00:26:27,400
and we find the API more complex and not

00:26:25,360 --> 00:26:31,690
intuitive like in Lotus you have a

00:26:27,400 --> 00:26:35,110
function called set and in Rhonda it's

00:26:31,690 --> 00:26:38,200
something like a sock path something

00:26:35,110 --> 00:26:40,570
like that so and also we know the API of

00:26:38,200 --> 00:26:40,990
law - and it's it's enough for most use

00:26:40,570 --> 00:26:43,750
cases

00:26:40,990 --> 00:26:45,400
all right probably time for one more how

00:26:43,750 --> 00:26:48,250
about static type checking looks like

00:26:45,400 --> 00:26:52,690
let's say flow won't play nice with I -

00:26:48,250 --> 00:26:56,400
FP yeah so it's true that when you use

00:26:52,690 --> 00:27:00,820
functional programming static types is

00:26:56,400 --> 00:27:04,090
it's less effective and which is

00:27:00,820 --> 00:27:07,180
probably a good reason maybe to look at

00:27:04,090 --> 00:27:09,220
things like Emer but you can still use

00:27:07,180 --> 00:27:15,040
it or advanced features in typescript

00:27:09,220 --> 00:27:17,350
that you can use yeah I guess trade-offs

00:27:15,040 --> 00:27:18,520
you know all right

00:27:17,350 --> 00:27:19,990
that's all we have time for the

00:27:18,520 --> 00:27:23,110
questions I can see there are a few more

00:27:19,990 --> 00:27:25,410
so find Adam in the break alright thank

00:27:23,110 --> 00:27:25,410
you guys

00:27:25,420 --> 00:27:27,480

YouTube URL: https://www.youtube.com/watch?v=81K49MN0dM8


