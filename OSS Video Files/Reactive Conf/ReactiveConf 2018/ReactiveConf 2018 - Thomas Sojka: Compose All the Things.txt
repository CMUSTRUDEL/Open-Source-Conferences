Title: ReactiveConf 2018 - Thomas Sojka: Compose All the Things
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Compose all the things

Functional composition can help to build flexible and readable APIs. It is a concept that can be translated into a variety of programming languages and domains and is therefore not limited to JavaScript. This talk helps to understand the advantages of functional composition and to explain its underlying ideas. Furthermore, it bridges practical programming concepts such as testing or dependency injection with functional programming concepts such as pure functions or partial application.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,320 --> 00:00:17,610
good morning everyone today we're going

00:00:15,930 --> 00:00:19,890
to learn the last programming technique

00:00:17,610 --> 00:00:21,740
you ever need because I think the

00:00:19,890 --> 00:00:23,700
programming is sometimes just too hard

00:00:21,740 --> 00:00:26,670
you have to learn so many different

00:00:23,700 --> 00:00:29,599
things like design patterns such as

00:00:26,670 --> 00:00:32,189
facades decorators or builders

00:00:29,599 --> 00:00:34,470
inheritance structures complex control

00:00:32,189 --> 00:00:37,370
flows but I like my applications as

00:00:34,470 --> 00:00:40,440
simple as possible as simple as that

00:00:37,370 --> 00:00:43,590
just imagine that every dot is just some

00:00:40,440 --> 00:00:45,390
small part of your application maybe the

00:00:43,590 --> 00:00:48,149
first one is rendering some component

00:00:45,390 --> 00:00:50,100
one is just processing some data doing

00:00:48,149 --> 00:00:52,739
some networking or getting something

00:00:50,100 --> 00:00:54,809
from your database and all you have to

00:00:52,739 --> 00:00:57,660
do all day long is combining them

00:00:54,809 --> 00:01:00,570
together until they're large enough that

00:00:57,660 --> 00:01:02,399
you can call it an application what

00:01:00,570 --> 00:01:04,259
usually happens after you have an

00:01:02,399 --> 00:01:07,590
application is that your requirements

00:01:04,259 --> 00:01:10,380
changes and in that case you just have a

00:01:07,590 --> 00:01:12,720
look at your first primitives maybe it

00:01:10,380 --> 00:01:14,880
changed some of them recompose it

00:01:12,720 --> 00:01:18,149
together and you have a new application

00:01:14,880 --> 00:01:22,440
removing your old one and that is

00:01:18,149 --> 00:01:24,840
composition and that is me I am Thomas I

00:01:22,440 --> 00:01:27,000
am a software engineer working for come

00:01:24,840 --> 00:01:28,619
sister reply if you're ever looking for

00:01:27,000 --> 00:01:30,569
a cool job I might be your future

00:01:28,619 --> 00:01:34,619
interviewer and you only have to answer

00:01:30,569 --> 00:01:36,479
one question can you compose and if your

00:01:34,619 --> 00:01:39,090
answer is no today I hope you're going

00:01:36,479 --> 00:01:41,880
to change that in the next 30 minutes by

00:01:39,090 --> 00:01:44,580
following a three-step plan first we're

00:01:41,880 --> 00:01:47,610
gonna compose some things then we're

00:01:44,580 --> 00:01:49,440
going to compose all the things and in

00:01:47,610 --> 00:01:52,770
the end we're going to learn about the

00:01:49,440 --> 00:01:54,869
fundamentals of composition the first

00:01:52,770 --> 00:01:57,660
thing that we're going to compose is

00:01:54,869 --> 00:01:59,970
something really old unix commands

00:01:57,660 --> 00:02:01,619
they're from the 17th and they're one of

00:01:59,970 --> 00:02:06,420
the oldest things I know they can be

00:02:01,619 --> 00:02:08,459
composed they're small utility functions

00:02:06,420 --> 00:02:11,610
provided by operating system which can

00:02:08,459 --> 00:02:13,920
work for instance with files and that's

00:02:11,610 --> 00:02:16,590
an example of a composed unix commands

00:02:13,920 --> 00:02:19,110
while composing free unix commands here

00:02:16,590 --> 00:02:21,900
and here's an example for our tree going

00:02:19,110 --> 00:02:24,270
to use containing some programming

00:02:21,900 --> 00:02:26,820
concepts we pass this file

00:02:24,270 --> 00:02:29,010
to a first function which is cat which

00:02:26,820 --> 00:02:31,320
means concatenate and print lines and

00:02:29,010 --> 00:02:33,900
the content of our file gets printed to

00:02:31,320 --> 00:02:36,180
the console right the cat there's this

00:02:33,900 --> 00:02:38,640
pipe symbol and this pipe symbol

00:02:36,180 --> 00:02:41,250
actually from the composition passing

00:02:38,640 --> 00:02:44,280
the output of cat as an input to grab

00:02:41,250 --> 00:02:46,980
and grab is the global regular

00:02:44,280 --> 00:02:49,830
expression pattern which removes every

00:02:46,980 --> 00:02:52,380
line that contains a small o keeping

00:02:49,830 --> 00:02:54,720
only four lines left we have one more

00:02:52,380 --> 00:02:57,210
pipe which is this which just does the

00:02:54,720 --> 00:02:59,040
same thing getting the output of grab to

00:02:57,210 --> 00:03:02,760
sort which is finally a good function

00:02:59,040 --> 00:03:05,070
name and sorting our lines what we did

00:03:02,760 --> 00:03:07,110
so far was we had three small primitives

00:03:05,070 --> 00:03:11,100
we compose them together in order to get

00:03:07,110 --> 00:03:13,380
one more complex one and I assume that

00:03:11,100 --> 00:03:14,910
most of you JavaScript developers and we

00:03:13,380 --> 00:03:17,610
can do something very similar with

00:03:14,910 --> 00:03:21,000
JavaScript for instance with string

00:03:17,610 --> 00:03:23,490
manipulations and we're going to use a

00:03:21,000 --> 00:03:26,430
library called Rambla which is a library

00:03:23,490 --> 00:03:28,290
bolt with composability in mind it isn't

00:03:26,430 --> 00:03:30,840
it even has a method which is called

00:03:28,290 --> 00:03:34,170
compose which works very similar as the

00:03:30,840 --> 00:03:36,630
UNIX pipe we're going to compose free

00:03:34,170 --> 00:03:39,900
primitive string primitives trim

00:03:36,630 --> 00:03:42,450
replacing removing some spaces to upper

00:03:39,900 --> 00:03:45,020
upper casing a string and replace

00:03:42,450 --> 00:03:47,910
removing a substring with industry

00:03:45,020 --> 00:03:50,310
thanks to compose we can combine these

00:03:47,910 --> 00:03:52,110
three functions as we like creating an

00:03:50,310 --> 00:03:55,290
upper case trimmer an upper case

00:03:52,110 --> 00:03:56,459
replacer a trimmer replacer and an upper

00:03:55,290 --> 00:03:59,430
case trimmer replacer

00:03:56,459 --> 00:04:02,490
we're always replacing a lower case a

00:03:59,430 --> 00:04:04,709
with a lower case B now we can just

00:04:02,490 --> 00:04:08,250
apply the same parameters to these four

00:04:04,709 --> 00:04:11,880
functions the parameter is a space a

00:04:08,250 --> 00:04:14,970
lowercase a space and we get our

00:04:11,880 --> 00:04:17,310
expected results so what we just did was

00:04:14,970 --> 00:04:19,500
very similar to the first example once

00:04:17,310 --> 00:04:21,299
more we had three small primitives we

00:04:19,500 --> 00:04:23,250
compose them together in order to create

00:04:21,299 --> 00:04:25,800
something more complex and it's almost

00:04:23,250 --> 00:04:28,620
the same between unix commands and d

00:04:25,800 --> 00:04:32,820
string manipulations in JavaScript but

00:04:28,620 --> 00:04:35,330
we can compose much more than only texts

00:04:32,820 --> 00:04:38,130
another thing which you can compose our

00:04:35,330 --> 00:04:40,170
components but before I enjoy the

00:04:38,130 --> 00:04:43,370
example let me first tell you a short

00:04:40,170 --> 00:04:45,900
story I work as a software consultant

00:04:43,370 --> 00:04:48,840
and about a year ago my customer

00:04:45,900 --> 00:04:50,670
approached me and told me all Thomas do

00:04:48,840 --> 00:04:53,100
you remember that table component we

00:04:50,670 --> 00:04:56,640
built people had to select something in

00:04:53,100 --> 00:04:59,220
there well we made a user test and no

00:04:56,640 --> 00:05:01,080
one really gets it we probably need to

00:04:59,220 --> 00:05:03,870
replace it with something more simple of

00:05:01,080 --> 00:05:06,020
maybe a drop-down or something and of

00:05:03,870 --> 00:05:09,690
course I remember the table component

00:05:06,020 --> 00:05:11,940
because in order to implement it I had a

00:05:09,690 --> 00:05:13,650
long list of features I searched through

00:05:11,940 --> 00:05:15,570
the whole internet to find that one

00:05:13,650 --> 00:05:17,700
JavaScript table library that

00:05:15,570 --> 00:05:19,980
implemented all the features and after

00:05:17,700 --> 00:05:22,500
two days I finally found it the perfect

00:05:19,980 --> 00:05:25,320
JavaScript table framework I integrated

00:05:22,500 --> 00:05:27,870
it and then I noticed well maybe it's

00:05:25,320 --> 00:05:29,460
not that perfect maybe I have to change

00:05:27,870 --> 00:05:32,370
a little bit here and a little bit there

00:05:29,460 --> 00:05:35,570
and after two Monday's I was finally

00:05:32,370 --> 00:05:38,070
finished integrated and integrated it

00:05:35,570 --> 00:05:41,450
but with this changed to drop downs

00:05:38,070 --> 00:05:45,120
I basically have to remove all my code

00:05:41,450 --> 00:05:48,060
and that is quite a sad story but this

00:05:45,120 --> 00:05:51,030
story could could be much better if I

00:05:48,060 --> 00:05:53,820
used composition because of composition

00:05:51,030 --> 00:05:56,940
every small feature of my table would

00:05:53,820 --> 00:05:59,280
would be separated and the only thing I

00:05:56,940 --> 00:06:01,530
needed to change would be the last part

00:05:59,280 --> 00:06:05,160
which is the rendering into a table or

00:06:01,530 --> 00:06:07,080
to a drop-down and we can use something

00:06:05,160 --> 00:06:09,120
like that will create components I'm

00:06:07,080 --> 00:06:11,070
usually working react I think that this

00:06:09,120 --> 00:06:14,030
is an example like that should be

00:06:11,070 --> 00:06:16,740
possible with any other UI framework -

00:06:14,030 --> 00:06:18,810
we are going to compose to react

00:06:16,740 --> 00:06:22,470
libraries one is called downshift

00:06:18,810 --> 00:06:25,230
by can dots and it's really a classical

00:06:22,470 --> 00:06:27,450
example of a composable library you have

00:06:25,230 --> 00:06:29,610
a lot of small primitives and you can

00:06:27,450 --> 00:06:29,940
build many different components out of

00:06:29,610 --> 00:06:33,060
them

00:06:29,940 --> 00:06:35,730
the main goal of downshift is that this

00:06:33,060 --> 00:06:37,710
component should be accessible here's an

00:06:35,730 --> 00:06:40,260
example of an accessible drop-down

00:06:37,710 --> 00:06:42,150
created with downshift it is accessible

00:06:40,260 --> 00:06:44,790
because you can create controller with

00:06:42,150 --> 00:06:46,050
your keyboard and it can be read by a

00:06:44,790 --> 00:06:48,509
screen reader

00:06:46,050 --> 00:06:51,479
we are going to compose downshift with

00:06:48,509 --> 00:06:53,520
react virtualized by Brian Vaughn wreck

00:06:51,479 --> 00:06:55,349
virtualized our react components for

00:06:53,520 --> 00:06:58,620
efficiently rendering large lists and

00:06:55,349 --> 00:07:00,750
tabular data that means if you want to

00:06:58,620 --> 00:07:03,330
render for instant 100 thousand items

00:07:00,750 --> 00:07:05,490
into your browser you will first have to

00:07:03,330 --> 00:07:08,280
wait for quite a long time and then

00:07:05,490 --> 00:07:11,430
probably your browser crashes this won't

00:07:08,280 --> 00:07:13,680
happen with react virtualized because

00:07:11,430 --> 00:07:15,810
react virtualized enforce that only the

00:07:13,680 --> 00:07:17,610
visible part of your list gets rendered

00:07:15,810 --> 00:07:21,750
to screen and as soon as the user

00:07:17,610 --> 00:07:24,240
Scrolls these parts get switched you can

00:07:21,750 --> 00:07:26,449
probably guess what happens when you try

00:07:24,240 --> 00:07:29,250
to compose these two libraries together

00:07:26,449 --> 00:07:31,139
we get a drop-down that is able to

00:07:29,250 --> 00:07:34,199
contain multiple hundred thousands of

00:07:31,139 --> 00:07:37,349
items in code that would look something

00:07:34,199 --> 00:07:39,780
like that it's not important that you

00:07:37,349 --> 00:07:41,370
read the code the only thing that I want

00:07:39,780 --> 00:07:43,050
you to see here is that we have down

00:07:41,370 --> 00:07:45,150
shift on the outside providing some

00:07:43,050 --> 00:07:48,840
primitives passing it in to react

00:07:45,150 --> 00:07:51,509
virtualized which outputs a list so it's

00:07:48,840 --> 00:07:54,599
very similar as thick as a unix pipeline

00:07:51,509 --> 00:07:58,560
and that is the working list with

00:07:54,599 --> 00:08:02,610
multiple thousand items so the benefit

00:07:58,560 --> 00:08:04,710
for an application developer in writing

00:08:02,610 --> 00:08:06,539
composable code is that you can freely

00:08:04,710 --> 00:08:09,690
choose some features that you like and

00:08:06,539 --> 00:08:11,250
easily replace some of our features but

00:08:09,690 --> 00:08:13,650
it's not only good for application

00:08:11,250 --> 00:08:15,659
developers it's also good for library

00:08:13,650 --> 00:08:17,729
maintenance because as a library

00:08:15,659 --> 00:08:20,940
maintainer you you only need to have one

00:08:17,729 --> 00:08:24,090
main concern the maintainer of downshift

00:08:20,940 --> 00:08:25,710
is concerned about accessibility and the

00:08:24,090 --> 00:08:27,389
maintainer of wrecked virtualized is

00:08:25,710 --> 00:08:28,919
concerned about performance and if you

00:08:27,389 --> 00:08:32,550
want them both you just need to combine

00:08:28,919 --> 00:08:36,209
them let's compose the next thing let's

00:08:32,550 --> 00:08:39,180
compose cascading style sheets but why

00:08:36,209 --> 00:08:41,459
would you do something like that imagine

00:08:39,180 --> 00:08:44,219
you working on a huge application with

00:08:41,459 --> 00:08:46,890
multiple different pages and there are

00:08:44,219 --> 00:08:50,399
multiple design agencies involved in

00:08:46,890 --> 00:08:52,920
styling these sites and every morning

00:08:50,399 --> 00:08:55,230
you get a call the design agency calls

00:08:52,920 --> 00:08:57,360
you and tells you good morning we

00:08:55,230 --> 00:08:59,769
created this very unique user experience

00:08:57,360 --> 00:09:02,019
with fifteen different cast

00:08:59,769 --> 00:09:04,929
components could you add them to use

00:09:02,019 --> 00:09:07,329
style sheets say of course you add them

00:09:04,929 --> 00:09:09,879
then the next one calls of 20 new

00:09:07,329 --> 00:09:13,179
components and the next one and the next

00:09:09,879 --> 00:09:15,550
one and the next one and finally you end

00:09:13,179 --> 00:09:17,860
up with a huge style sheet you get some

00:09:15,550 --> 00:09:20,699
new problems you probably shouldn't send

00:09:17,860 --> 00:09:24,699
all your style sheets to your user and

00:09:20,699 --> 00:09:27,670
once more compose ibly composability can

00:09:24,699 --> 00:09:30,429
help you if this problem by using a

00:09:27,670 --> 00:09:32,889
composable CSS framework like tachyons

00:09:30,429 --> 00:09:35,889
by adam ors it allows you to create

00:09:32,889 --> 00:09:39,850
responsive interfaces with as little CSS

00:09:35,889 --> 00:09:42,040
as possible but how does it work that's

00:09:39,850 --> 00:09:44,920
the button component rendered with

00:09:42,040 --> 00:09:47,619
tachyons and that is this corresponding

00:09:44,920 --> 00:09:49,899
HTML as you see there are quite a lot of

00:09:47,619 --> 00:09:52,239
classes involved in order to render this

00:09:49,899 --> 00:09:55,799
button let's quickly step through them

00:09:52,239 --> 00:09:58,929
so I get an idea of how tachyons works

00:09:55,799 --> 00:10:02,829
you can almost see that we have here a

00:09:58,929 --> 00:10:04,749
link which is not styled at all and then

00:10:02,829 --> 00:10:08,379
we have a blue background behind this

00:10:04,749 --> 00:10:10,509
link by adding the BG blue class and we

00:10:08,379 --> 00:10:13,959
add a white font by adding the class

00:10:10,509 --> 00:10:17,499
font Eric the white class next one is

00:10:13,959 --> 00:10:20,410
border-radius one and this makes the

00:10:17,499 --> 00:10:22,600
edges a little bit rounder this one is a

00:10:20,410 --> 00:10:26,170
multiplier and this multiplier has some

00:10:22,600 --> 00:10:28,179
default value within tachyons and maybe

00:10:26,170 --> 00:10:29,740
something like six pixels and the

00:10:28,179 --> 00:10:32,079
multiply eight you would have 12 pixels

00:10:29,740 --> 00:10:33,910
three would have 18 pixels and it

00:10:32,079 --> 00:10:36,009
ensures that you always use some

00:10:33,910 --> 00:10:37,749
consisting spacing if you use it for

00:10:36,009 --> 00:10:39,639
instance for padding's and the

00:10:37,749 --> 00:10:42,429
consistent spacing is really important

00:10:39,639 --> 00:10:44,889
if you want to create a nice design next

00:10:42,429 --> 00:10:47,879
class is font size six making the font a

00:10:44,889 --> 00:10:51,129
little smaller padding horizontal free

00:10:47,879 --> 00:10:55,499
padding vertical to link removing your

00:10:51,129 --> 00:10:58,959
decorator and dim adding a hover effect

00:10:55,499 --> 00:11:01,899
when you adding an opacity effect when

00:10:58,959 --> 00:11:04,929
you hover over the button the last thing

00:11:01,899 --> 00:11:08,949
that we're going to sorry the advantage

00:11:04,929 --> 00:11:11,589
of that is that you CSS basically never

00:11:08,949 --> 00:11:13,050
grows because if you want to create a

00:11:11,589 --> 00:11:14,970
new component you

00:11:13,050 --> 00:11:16,830
three using these small composable

00:11:14,970 --> 00:11:19,260
primitives of stylesheets in order to

00:11:16,830 --> 00:11:21,149
create one and as soon as the quite

00:11:19,260 --> 00:11:23,220
small core of tachyons is loaded into

00:11:21,149 --> 00:11:27,330
your application you have all the CSS

00:11:23,220 --> 00:11:29,519
you need in addition thanks to these

00:11:27,330 --> 00:11:32,910
multipliers it's very easy to be

00:11:29,519 --> 00:11:34,620
consistent within your design and now

00:11:32,910 --> 00:11:37,680
the last thing which we're gonna compose

00:11:34,620 --> 00:11:40,470
our graphics and I want to do that in a

00:11:37,680 --> 00:11:42,329
live demo because I want you to see how

00:11:40,470 --> 00:11:43,620
it feels like working with composable

00:11:42,329 --> 00:11:46,170
code because I think it's a really

00:11:43,620 --> 00:11:48,839
pleasant experience but before we

00:11:46,170 --> 00:11:52,740
compose our code we first decompose

00:11:48,839 --> 00:11:54,570
something the reactive conf logo and the

00:11:52,740 --> 00:11:56,910
reactive comp logo consists of several

00:11:54,570 --> 00:12:00,570
shapes we have a circle in the middle

00:11:56,910 --> 00:12:03,540
and we have an vertical ellipse here or

00:12:00,570 --> 00:12:05,670
multiple vertical ellipses this vertical

00:12:03,540 --> 00:12:08,519
ellipse needs to be rotated for just a

00:12:05,670 --> 00:12:12,079
little degrees multiple times in order

00:12:08,519 --> 00:12:14,730
to create his first ellipse group and

00:12:12,079 --> 00:12:17,850
next step is to rotate these ellipse

00:12:14,730 --> 00:12:20,940
groups so by two times by sixty degree

00:12:17,850 --> 00:12:27,390
to fully recreate the logo but let's see

00:12:20,940 --> 00:12:29,730
how that looks in code and the demo you

00:12:27,390 --> 00:12:32,730
can see my browser on the right and my

00:12:29,730 --> 00:12:34,649
editor on the left and I wrote a little

00:12:32,730 --> 00:12:37,260
graphics library in order for this demo

00:12:34,649 --> 00:12:38,880
it does not have that many features but

00:12:37,260 --> 00:12:41,610
you can render some graphic elements

00:12:38,880 --> 00:12:44,250
currently only ellipses you can color

00:12:41,610 --> 00:12:47,220
these ellipses and rotate them we are

00:12:44,250 --> 00:12:49,860
also using Ram de once more and I

00:12:47,220 --> 00:12:51,870
renamed the compose method to see so I

00:12:49,860 --> 00:12:53,790
don't have to type that much and I'll

00:12:51,870 --> 00:12:56,190
explain these other functions as soon as

00:12:53,790 --> 00:12:59,070
we use them let's create our first shape

00:12:56,190 --> 00:13:02,699
the circle and our circle expects a

00:12:59,070 --> 00:13:04,440
radius only passed this radius two times

00:13:02,699 --> 00:13:06,420
to ellipse because an ellipse with the

00:13:04,440 --> 00:13:09,480
same height and the same width is a

00:13:06,420 --> 00:13:11,870
circle we want to have a white circle

00:13:09,480 --> 00:13:15,540
so a create a first composition

00:13:11,870 --> 00:13:18,510
composing the white fill with the circle

00:13:15,540 --> 00:13:20,070
which is created it's important to note

00:13:18,510 --> 00:13:22,140
that composition works from right to

00:13:20,070 --> 00:13:25,380
left and not from left to right as the

00:13:22,140 --> 00:13:26,910
UNIX pipe did now we can render our

00:13:25,380 --> 00:13:30,780
first element the white circle

00:13:26,910 --> 00:13:33,990
providing it with a radius next step are

00:13:30,780 --> 00:13:37,680
our ellipses let's create a green

00:13:33,990 --> 00:13:39,620
ellipse shape once more we can compose

00:13:37,680 --> 00:13:44,310
the primitives provided by the library

00:13:39,620 --> 00:13:47,280
we have a transparent fill and a green

00:13:44,310 --> 00:13:52,170
stroke and a stroke is just the same as

00:13:47,280 --> 00:13:54,060
a border and of course the ellipse we

00:13:52,170 --> 00:13:56,700
can also pass in an array instead of

00:13:54,060 --> 00:13:58,170
only one graphical element we provide

00:13:56,700 --> 00:14:02,490
you with and the height of the ellipse

00:13:58,170 --> 00:14:04,860
and the first ellipse gets rendered now

00:14:02,490 --> 00:14:06,840
we need two rotations so let's create

00:14:04,860 --> 00:14:09,660
some rotations by using Ram Dass range

00:14:06,840 --> 00:14:11,940
method and our arrange methods creates

00:14:09,660 --> 00:14:14,760
an array starting by zero with five

00:14:11,940 --> 00:14:23,760
elements so we have an array of 0 1 2 3

00:14:14,760 --> 00:14:27,840
4 5 oh thank you think that's better we

00:14:23,760 --> 00:14:30,810
need to map over this array and mapping

00:14:27,840 --> 00:14:33,570
means that we apply a function to every

00:14:30,810 --> 00:14:38,370
element of this array and we're going to

00:14:33,570 --> 00:14:43,320
apply our rotate function now we can

00:14:38,370 --> 00:14:45,930
create our lips group and this time we

00:14:43,320 --> 00:14:52,260
need to map once more but this time over

00:14:45,930 --> 00:14:55,410
there rotations we just created we use

00:14:52,260 --> 00:14:56,910
the ellipse we created before and we

00:14:55,410 --> 00:14:59,910
need to use Randall's apply to you

00:14:56,910 --> 00:15:03,030
method because our rotations are an

00:14:59,910 --> 00:15:06,810
array of functions and our green ellipse

00:15:03,030 --> 00:15:08,970
is an object and apply two flips the

00:15:06,810 --> 00:15:10,560
invocation so it expects an object and

00:15:08,970 --> 00:15:13,320
then a function and then applies the

00:15:10,560 --> 00:15:15,510
object to the function now we can pass

00:15:13,320 --> 00:15:18,630
in the ellipse group and set of our

00:15:15,510 --> 00:15:21,570
single ellipse recreating multiple

00:15:18,630 --> 00:15:23,700
ellipses they're not that much rotated

00:15:21,570 --> 00:15:26,700
so let's multiply the range by a

00:15:23,700 --> 00:15:31,620
constant and now we clearly see that

00:15:26,700 --> 00:15:33,300
there are multiple ellipses the next

00:15:31,620 --> 00:15:35,730
step which you have to do is very

00:15:33,300 --> 00:15:38,190
similar to the previous step once more

00:15:35,730 --> 00:15:39,720
we're going to rotate these ellipses but

00:15:38,190 --> 00:15:40,740
this time we want to rotate them by a

00:15:39,720 --> 00:15:43,110
different degree

00:15:40,740 --> 00:15:45,230
for a different shape count what we can

00:15:43,110 --> 00:15:49,520
just do is adding two parameters a

00:15:45,230 --> 00:15:52,200
degree parameter and the shape count and

00:15:49,520 --> 00:15:56,070
then we replace our constants here with

00:15:52,200 --> 00:15:57,810
these parameters we need to reapply

00:15:56,070 --> 00:16:00,930
these old values to the rotations

00:15:57,810 --> 00:16:04,320
functions in here and now we can rotate

00:16:00,930 --> 00:16:08,580
all of our ellipses we're gonna use Ram

00:16:04,320 --> 00:16:13,740
nose-up method and app applies an array

00:16:08,580 --> 00:16:16,800
of functions so our rotations with 60

00:16:13,740 --> 00:16:21,270
degree three times two an array of

00:16:16,800 --> 00:16:24,149
objects which is our ellipse group now

00:16:21,270 --> 00:16:26,610
we can render our ellipse group and we

00:16:24,149 --> 00:16:28,440
recreated the reactive cones logo it

00:16:26,610 --> 00:16:33,540
looks almost as beautiful as the

00:16:28,440 --> 00:16:35,580
original and what we just did was using

00:16:33,540 --> 00:16:38,880
a lot was really a classic example of

00:16:35,580 --> 00:16:42,270
composable code we had some primitives

00:16:38,880 --> 00:16:45,779
that we reused and then we were able to

00:16:42,270 --> 00:16:47,940
use the one composable library together

00:16:45,779 --> 00:16:49,770
with another one because if two

00:16:47,940 --> 00:16:51,930
libraries are both of composability in

00:16:49,770 --> 00:16:54,990
mind it's usually quite easy to combine

00:16:51,930 --> 00:16:57,120
them together yeah we were all it was

00:16:54,990 --> 00:16:59,540
also easy to add some abstractions into

00:16:57,120 --> 00:17:02,010
our code to reuse some functionality and

00:16:59,540 --> 00:17:04,339
it's quite easy to move this code around

00:17:02,010 --> 00:17:07,890
and that's what I really like about

00:17:04,339 --> 00:17:11,660
composable code but let's get back to

00:17:07,890 --> 00:17:14,790
this slide and see what we did so far

00:17:11,660 --> 00:17:15,809
until today until this time we composed

00:17:14,790 --> 00:17:19,050
very different things

00:17:15,809 --> 00:17:21,179
but our actual goal is to compose all

00:17:19,050 --> 00:17:23,720
the things so we need to find a

00:17:21,179 --> 00:17:26,429
commonality between all these parts and

00:17:23,720 --> 00:17:28,830
the commonality is of course the

00:17:26,429 --> 00:17:30,660
function because unix commands are

00:17:28,830 --> 00:17:33,240
functions string manipulations of

00:17:30,660 --> 00:17:34,800
functions components at least react

00:17:33,240 --> 00:17:38,730
components can be written as a function

00:17:34,800 --> 00:17:40,650
component CSS class names are not really

00:17:38,730 --> 00:17:42,720
functions but you can write a function

00:17:40,650 --> 00:17:45,420
that applies a class name to an element

00:17:42,720 --> 00:17:48,570
and all these graphics primitives I

00:17:45,420 --> 00:17:50,760
showed you where functions - what that

00:17:48,570 --> 00:17:54,240
means is that if you learn something

00:17:50,760 --> 00:17:56,460
about composing functions you Bey

00:17:54,240 --> 00:17:58,640
learn how to compose all the things and

00:17:56,460 --> 00:18:01,050
then you can create an example like that

00:17:58,640 --> 00:18:04,290
which is maybe a little bit contrived

00:18:01,050 --> 00:18:07,050
but it combines almost all the things we

00:18:04,290 --> 00:18:09,270
did so far first we're going to call cat

00:18:07,050 --> 00:18:11,910
on a file in order to get this file from

00:18:09,270 --> 00:18:14,100
our file system then we use some string

00:18:11,910 --> 00:18:17,340
manipulations to transform this file

00:18:14,100 --> 00:18:19,530
into an array of strings we pass this

00:18:17,340 --> 00:18:22,559
array of strings to react virtualize to

00:18:19,530 --> 00:18:24,330
create a table and for every row in the

00:18:22,559 --> 00:18:27,390
table we are going to apply some

00:18:24,330 --> 00:18:29,070
tachyons classes I thought about adding

00:18:27,390 --> 00:18:31,590
some ellipses to the example but I think

00:18:29,070 --> 00:18:33,870
it's concrete enough this way so we're

00:18:31,590 --> 00:18:34,760
just generating an index HTML out of

00:18:33,870 --> 00:18:37,890
that computation

00:18:34,760 --> 00:18:39,780
all you do is call all the things with

00:18:37,890 --> 00:18:42,179
our sample.txt file which is the same

00:18:39,780 --> 00:18:46,980
file from the beginning and we get our

00:18:42,179 --> 00:18:50,280
result a react virtualized table built

00:18:46,980 --> 00:18:52,920
from a text file which might be not that

00:18:50,280 --> 00:18:55,080
useful but I think it's really cool that

00:18:52,920 --> 00:18:57,809
it's possible to compose just everything

00:18:55,080 --> 00:19:00,840
you want you if you learn debate about

00:18:57,809 --> 00:19:05,040
the basics of composition but there's

00:19:00,840 --> 00:19:07,380
even one more thing as probably all of

00:19:05,040 --> 00:19:09,390
you know javascript is a language that

00:19:07,380 --> 00:19:11,520
has functions but they're quite some

00:19:09,390 --> 00:19:15,300
other languages that has functions like

00:19:11,520 --> 00:19:17,580
closure elm Java Python go or any other

00:19:15,300 --> 00:19:19,500
programming language so if you learn

00:19:17,580 --> 00:19:22,020
about function composition in general

00:19:19,500 --> 00:19:24,240
you can reuse that for every programming

00:19:22,020 --> 00:19:25,920
language which is especially cool if

00:19:24,240 --> 00:19:28,200
you're a JavaScript developer because

00:19:25,920 --> 00:19:29,940
usually you learn two new frameworks in

00:19:28,200 --> 00:19:31,620
the morning but this morning you're

00:19:29,940 --> 00:19:36,720
going to learn something which you can

00:19:31,620 --> 00:19:39,450
use route to program a life so the next

00:19:36,720 --> 00:19:42,660
step is to learn about the fundamentals

00:19:39,450 --> 00:19:46,110
of composition and one part of that as

00:19:42,660 --> 00:19:48,090
pure functions pure functions are

00:19:46,110 --> 00:19:50,400
functions that we turn the same input

00:19:48,090 --> 00:19:54,150
for the same output and a free of side

00:19:50,400 --> 00:19:56,070
effects the most easiest way to explain

00:19:54,150 --> 00:19:58,830
pure functions is by showing you an

00:19:56,070 --> 00:20:02,490
impure example I'm going to use the

00:19:58,830 --> 00:20:04,500
library called p5.js which is a graphics

00:20:02,490 --> 00:20:05,910
library very similar to mine but it can

00:20:04,500 --> 00:20:08,389
do much more than just rendering

00:20:05,910 --> 00:20:11,669
ellipses and it's a little bit faster

00:20:08,389 --> 00:20:14,009
in order for p5 to work it needs a draw

00:20:11,669 --> 00:20:16,979
method this draw method gets repeatedly

00:20:14,009 --> 00:20:19,200
called for every frame p5 renders within

00:20:16,979 --> 00:20:22,590
its draw method I call the rect function

00:20:19,200 --> 00:20:25,169
of p5 and a color direct function which

00:20:22,590 --> 00:20:27,629
is a function arrow by myself this

00:20:25,169 --> 00:20:29,519
function calls the fill method which

00:20:27,629 --> 00:20:32,190
changes the color of a rectangular and

00:20:29,519 --> 00:20:34,499
then rendering a rectangular just by

00:20:32,190 --> 00:20:37,169
looking at this code you might expect a

00:20:34,499 --> 00:20:39,929
result like that but unfortunately

00:20:37,169 --> 00:20:42,389
that's not what happens you actually get

00:20:39,929 --> 00:20:44,909
two colored rectangle errs because the

00:20:42,389 --> 00:20:46,919
fill method had a side effect the side

00:20:44,909 --> 00:20:48,419
effect of changing the color of every

00:20:46,919 --> 00:20:51,059
graphical element that gets rendered

00:20:48,419 --> 00:20:52,950
after fill has called and since the draw

00:20:51,059 --> 00:20:56,340
method gets called repeatedly every

00:20:52,950 --> 00:20:58,440
rectangular has the same color which is

00:20:56,340 --> 00:21:00,029
very bad for composition because as soon

00:20:58,440 --> 00:21:02,099
as you have some side effect within your

00:21:00,029 --> 00:21:04,710
composition you need to take care about

00:21:02,099 --> 00:21:06,690
it in all your other composition if one

00:21:04,710 --> 00:21:08,669
of your compositions have filled with a

00:21:06,690 --> 00:21:10,139
side effect all the other compositions

00:21:08,669 --> 00:21:12,450
needs their own fill method if they

00:21:10,139 --> 00:21:14,820
shouldn't have the same color the more

00:21:12,450 --> 00:21:17,129
impure functions you have the harder it

00:21:14,820 --> 00:21:19,229
gets to compose this code and at some

00:21:17,129 --> 00:21:21,809
point you probably lost track what your

00:21:19,229 --> 00:21:23,849
application is actually doing so in

00:21:21,809 --> 00:21:26,369
order to stay sane you should always try

00:21:23,849 --> 00:21:28,249
to default to pure functions and use

00:21:26,369 --> 00:21:31,789
impure functions only if you have to

00:21:28,249 --> 00:21:31,789
sometimes you have to

00:21:48,440 --> 00:21:54,560
instead you trace a new object here is

00:21:52,100 --> 00:21:57,890
the beautiful version of the rotate

00:21:54,560 --> 00:22:00,440
function of my mother's wedding and

00:21:57,890 --> 00:22:02,600
expect sanitation and annulment coming

00:22:00,440 --> 00:22:04,930
over the contents of the element and

00:22:02,600 --> 00:22:07,880
then changing on the new rotation and

00:22:04,930 --> 00:22:09,950
that is the mutable version of it once

00:22:07,880 --> 00:22:12,740
more we expect rotation in an element

00:22:09,950 --> 00:22:15,080
but this time you taking the rotation of

00:22:12,740 --> 00:22:18,440
this element and returning or mutated a

00:22:15,080 --> 00:22:20,480
lot if I wouldn't use the second version

00:22:18,440 --> 00:22:24,770
for my demo

00:22:20,480 --> 00:22:29,420
my little vector which is not really as

00:22:24,770 --> 00:22:32,060
beautiful and very comfortable there

00:22:29,420 --> 00:22:34,880
accidentally mutated every government of

00:22:32,060 --> 00:22:38,960
my sample and every and every links in

00:22:34,880 --> 00:22:42,380
my example not as a same patient so once

00:22:38,960 --> 00:22:45,050
more try to use only unicode if you want

00:22:42,380 --> 00:22:47,570
drive with a composable code and this

00:22:45,050 --> 00:22:50,770
movability only to have someone to

00:22:47,570 --> 00:22:53,480
commit space release with ability also

00:22:50,770 --> 00:22:55,610
manages built on the usability for me

00:22:53,480 --> 00:23:05,270
such you'll be able to is only usable

00:22:55,610 --> 00:23:07,910
functions as composition I

00:23:05,270 --> 00:23:12,200
things together when you at this URL so

00:23:07,910 --> 00:23:15,380
I can look and find one of the books in

00:23:12,200 --> 00:23:18,800
the Torres about atomic the slice and

00:23:15,380 --> 00:23:21,200
this almost beats example since I

00:23:18,800 --> 00:23:23,570
started today you have people may stuff

00:23:21,200 --> 00:23:25,160
the anything about composition I'm also

00:23:23,570 --> 00:23:28,870
really interested in all this number

00:23:25,160 --> 00:23:28,870
Tommy's and if you want to hear it

00:23:30,710 --> 00:23:39,390
so as I started today disturbing that in

00:23:35,220 --> 00:23:41,400
the last program immediately eventually

00:23:39,390 --> 00:23:43,080
beliefs to determine the qualifications

00:23:41,400 --> 00:23:46,200
for momentum all things coming to New

00:23:43,080 --> 00:23:48,630
Orleans but it's probably not the

00:23:46,200 --> 00:23:51,360
easiest way to do so some last gets

00:23:48,630 --> 00:23:54,210
really hard to do really compulsive and

00:23:51,360 --> 00:24:00,929
it becomes my comments even the small of

00:23:54,210 --> 00:24:02,880
beats example especially if you want to

00:24:00,929 --> 00:24:05,280
manage it will be flexible education I

00:24:02,880 --> 00:24:07,679
think that composability is the best way

00:24:05,280 --> 00:24:09,750
to do that and I wanted some more people

00:24:07,679 --> 00:24:13,070
attracted to the most other things from

00:24:09,750 --> 00:24:13,070
tomorrow thank you

00:24:19,980 --> 00:24:31,519
so now fed tested so that was very

00:24:38,610 --> 00:24:43,840
lots of them

00:24:41,159 --> 00:24:47,649
first thing let's tip it's the change in

00:24:43,840 --> 00:24:50,769
composition but it's not that much

00:24:47,649 --> 00:24:52,450
different and literally changing words

00:24:50,769 --> 00:24:56,919
from left to right my composition

00:24:52,450 --> 00:24:59,830
instructors right west so is also highly

00:24:56,919 --> 00:25:03,419
happened which is basically the same as

00:24:59,830 --> 00:25:03,419
compose but just any other direction

00:25:07,260 --> 00:25:12,659
together we are changing or composition

00:25:10,179 --> 00:25:12,659
is

00:25:24,920 --> 00:25:28,710
what is the best but it looked quite

00:25:27,900 --> 00:25:33,000
strange

00:25:28,710 --> 00:25:35,790
I make Edison because best way is not an

00:25:33,000 --> 00:25:39,030
average square composition originated

00:25:35,790 --> 00:25:42,600
from and usually every man election is

00:25:39,030 --> 00:25:47,150
composed from right to left and that's

00:25:42,600 --> 00:25:52,920
why most especially from voltages always

00:25:47,150 --> 00:25:58,350
uses compression and also because my

00:25:52,920 --> 00:26:01,380
plan won't work so I'm happy right next

00:25:58,350 --> 00:26:03,360
one is inconsiderate immutability rather

00:26:01,380 --> 00:26:09,270
than the storage and cpu to come in

00:26:03,360 --> 00:26:12,150
there is some considerable because there

00:26:09,270 --> 00:26:14,280
exist some like wheat which help you to

00:26:12,150 --> 00:26:17,280
use beautiful functions presence

00:26:14,280 --> 00:26:20,340
beautiful jacks or Maureen Johnson which

00:26:17,280 --> 00:26:23,010
makes sure that if you instead of

00:26:20,340 --> 00:26:28,920
holding your whole basement between the

00:26:23,010 --> 00:26:30,640
only copy the part has changed and I

00:26:28,920 --> 00:26:32,770
think that

00:26:30,640 --> 00:26:35,290
the main stage is all the black people

00:26:32,770 --> 00:26:36,280
in there and it's a really cool way to

00:26:35,290 --> 00:26:38,530
be mutability

00:26:36,280 --> 00:26:42,460
but unfortunately kind of watch it but

00:26:38,530 --> 00:26:45,160
you should watch it on YouTube to do

00:26:42,460 --> 00:26:49,000
even ability which is which is having

00:26:45,160 --> 00:26:50,860
the over half of the CPU so of course

00:26:49,000 --> 00:26:54,670
that is always some over and mutability

00:26:50,860 --> 00:26:57,429
will always be faster but introducing

00:26:54,670 --> 00:27:01,080
people by the way the difference should

00:26:57,429 --> 00:27:04,330
make that much difference in between up

00:27:01,080 --> 00:27:09,130
right next question can be used not as a

00:27:04,330 --> 00:27:12,760
composition you can basically need the

00:27:09,130 --> 00:27:15,549
only example I it's not many promises

00:27:12,760 --> 00:27:18,490
and is something called task which grows

00:27:15,549 --> 00:27:20,230
almost as a promise and it's the only

00:27:18,490 --> 00:27:22,809
difference or the main difference

00:27:20,230 --> 00:27:26,980
between a promise and analysis that the

00:27:22,809 --> 00:27:29,799
task is lazy that's important because in

00:27:26,980 --> 00:27:33,490
common promise it immediately starts to

00:27:29,799 --> 00:27:36,299
and do a heavy promise etude you do not

00:27:33,490 --> 00:27:36,299
really have a website

00:27:40,019 --> 00:28:33,519
which is because so I'm not sure if I

00:28:27,360 --> 00:28:35,789
understand this question frankly sherry

00:28:33,519 --> 00:28:35,789
sauce

00:28:37,470 --> 00:28:41,820
have you may take less different

00:28:39,629 --> 00:28:46,080
elections so how do you remember little

00:28:41,820 --> 00:28:48,149
Jason then slicing politics so I think

00:28:46,080 --> 00:28:51,240
one of the cool things about composition

00:28:48,149 --> 00:28:57,809
is it is really easy to move the quarter

00:28:51,240 --> 00:28:59,549
I necessarily in when well in deep it

00:28:57,809 --> 00:29:01,259
usually depends on the language in a

00:28:59,549 --> 00:29:05,629
language like JavaScript would have

00:29:01,259 --> 00:29:08,190
caused severe autism Watchers composing

00:29:05,629 --> 00:29:18,590
small communities together than the ones

00:29:08,190 --> 00:29:21,590
we use but I don't like that one certain

00:29:18,590 --> 00:29:21,590

YouTube URL: https://www.youtube.com/watch?v=juMLwOTxnvw


