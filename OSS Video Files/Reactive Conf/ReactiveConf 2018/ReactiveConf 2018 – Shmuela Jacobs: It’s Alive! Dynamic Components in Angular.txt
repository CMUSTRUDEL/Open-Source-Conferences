Title: ReactiveConf 2018 – Shmuela Jacobs: It’s Alive! Dynamic Components in Angular
Publication date: 2018-11-03
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
It’s Alive! Dynamic Components in Angular

The main use-case for using dynamic components is when we can decide only in run-time which component is loaded. They’re also the only solution when we want to embed Angular components in non-Angular ones. In many cases, replacing in-template components with dynamic ones is beneficial to performance and code quality. In this talk you'll learn how to create and use dynamic components, and discuss several types of usages.
Captions: 
	00:00:02,190 --> 00:00:08,760
[Music]

00:00:12,100 --> 00:00:21,920
hi hi everybody

00:00:15,070 --> 00:00:24,740
neck's amate good how are you doing good

00:00:21,920 --> 00:00:27,560
morning everyone I'm really excited to

00:00:24,740 --> 00:00:30,199
be here again interactive conf and to

00:00:27,560 --> 00:00:36,320
talk to you about dynamic components in

00:00:30,199 --> 00:00:39,110
angular so just a few words about myself

00:00:36,320 --> 00:00:42,770
very shortly because the introduction

00:00:39,110 --> 00:00:46,960
was really great and I love angular and

00:00:42,770 --> 00:00:53,360
that's all I do most of the time and

00:00:46,960 --> 00:00:59,000
integrals let's start our presentation

00:00:53,360 --> 00:01:03,079
with a demo so we're talking about

00:00:59,000 --> 00:01:09,590
dynamic components who is not familiar

00:01:03,079 --> 00:01:11,450
with this scream almost no hands if

00:01:09,590 --> 00:01:13,610
you're not familiar with the screen you

00:01:11,450 --> 00:01:15,920
probably don't use angular and you

00:01:13,610 --> 00:01:19,460
should start doing this this is the

00:01:15,920 --> 00:01:23,110
screen the main component that the

00:01:19,460 --> 00:01:29,180
angular CLI gives us when it generates a

00:01:23,110 --> 00:01:29,900
project for us so what is a dynamic

00:01:29,180 --> 00:01:34,600
component

00:01:29,900 --> 00:01:34,600
are there any dynamic components here

00:01:34,689 --> 00:01:40,820
not really right nothing seems really

00:01:37,909 --> 00:01:44,960
dynamic what about if I press here and

00:01:40,820 --> 00:01:51,320
get this mm color input what do you say

00:01:44,960 --> 00:01:56,470
about that is this dynamic well still

00:01:51,320 --> 00:02:00,320
not really let's see what else this

00:01:56,470 --> 00:02:04,490
component can do if I click here Oh what

00:02:00,320 --> 00:02:07,579
you say is this dynamic well it could be

00:02:04,490 --> 00:02:12,140
it depends on the implementation and if

00:02:07,579 --> 00:02:16,550
I click here okay so this must be a

00:02:12,140 --> 00:02:19,430
dynamic component right okay so dynamic

00:02:16,550 --> 00:02:21,500
components are actually not something

00:02:19,430 --> 00:02:24,920
about the component themselves it's

00:02:21,500 --> 00:02:28,700
about how they're used so even a regular

00:02:24,920 --> 00:02:30,260
component can be dynamic let's look at

00:02:28,700 --> 00:02:32,750
the project that I have with real

00:02:30,260 --> 00:02:36,980
dynamic components I have here two

00:02:32,750 --> 00:02:40,760
buttons add quote and add graph and I

00:02:36,980 --> 00:02:43,540
can dynamically decide what component I

00:02:40,760 --> 00:02:47,959
want to add so for example quote

00:02:43,540 --> 00:02:52,849
components or graph components and these

00:02:47,959 --> 00:02:55,540
components are not hard-coded in my

00:02:52,849 --> 00:02:59,019
project and we'll see how we do that and

00:02:55,540 --> 00:03:02,360
these components are also linked to

00:02:59,019 --> 00:03:05,659
everything we have in angular dependency

00:03:02,360 --> 00:03:08,510
injection and change detection so for

00:03:05,659 --> 00:03:09,110
example let me just make it a little bit

00:03:08,510 --> 00:03:13,760
bigger

00:03:09,110 --> 00:03:17,769
if for example I want to change the name

00:03:13,760 --> 00:03:22,400
of the person who said this sentence

00:03:17,769 --> 00:03:26,360
here now it's me so you can see it

00:03:22,400 --> 00:03:29,900
changes also here in the note and if I

00:03:26,360 --> 00:03:33,379
want to change the values of the graph

00:03:29,900 --> 00:03:37,040
so these components are also linked to

00:03:33,379 --> 00:03:40,370
the data of the whole application so if

00:03:37,040 --> 00:03:42,739
I change it in one graph then it should

00:03:40,370 --> 00:03:45,230
change also in the other one so these

00:03:42,739 --> 00:03:47,629
components work with angular but they're

00:03:45,230 --> 00:03:53,060
loaded dynamically so let's see what I

00:03:47,629 --> 00:03:57,349
mean about that let's talk first about

00:03:53,060 --> 00:03:59,750
static components okay steady components

00:03:57,349 --> 00:04:02,659
are components that we know about them

00:03:59,750 --> 00:04:05,330
in runtime we know about them in

00:04:02,659 --> 00:04:07,849
development time we just fuse them in

00:04:05,330 --> 00:04:10,099
the template with the selector like here

00:04:07,849 --> 00:04:13,099
we have lots of dynamic a static

00:04:10,099 --> 00:04:15,319
components we have the app header which

00:04:13,099 --> 00:04:17,120
we don't really know here it's content

00:04:15,319 --> 00:04:19,760
it's a different component written

00:04:17,120 --> 00:04:21,880
somewhere we have the tab set and tab

00:04:19,760 --> 00:04:25,970
these are components that come from

00:04:21,880 --> 00:04:29,509
angular a bootstrap and we have another

00:04:25,970 --> 00:04:32,600
component their app dashboard which is

00:04:29,509 --> 00:04:35,840
also static we use them directly in the

00:04:32,600 --> 00:04:37,810
template we can pass inputs and bind to

00:04:35,840 --> 00:04:40,310
events and so on

00:04:37,810 --> 00:04:42,919
so when I'm developing this application

00:04:40,310 --> 00:04:45,199
I know about these components I know

00:04:42,919 --> 00:04:49,310
that I'm going to use them I import

00:04:45,199 --> 00:04:51,500
their code into the module and they're

00:04:49,310 --> 00:04:54,770
in a fixed location wherever I put them

00:04:51,500 --> 00:04:57,590
so it's kind of hard coded which is fine

00:04:54,770 --> 00:04:59,960
if you use it it wants in a very

00:04:57,590 --> 00:05:02,060
specific way location this is the way

00:04:59,960 --> 00:05:07,130
that we're supposed to use most of our

00:05:02,060 --> 00:05:12,759
components so let's say that you're

00:05:07,130 --> 00:05:16,699
developing a dashboard right who hasn't

00:05:12,759 --> 00:05:18,350
been working on a dashboard this is a

00:05:16,699 --> 00:05:21,979
very common use case with the web

00:05:18,350 --> 00:05:24,979
applications so you have lots of lots of

00:05:21,979 --> 00:05:29,660
different types of components and your

00:05:24,979 --> 00:05:32,570
users decide what components they want

00:05:29,660 --> 00:05:35,060
to use so you can provide them with tens

00:05:32,570 --> 00:05:39,169
or even hundreds of different components

00:05:35,060 --> 00:05:43,699
and the API to use them to pass data and

00:05:39,169 --> 00:05:46,789
bind to event and the user might select

00:05:43,699 --> 00:05:49,190
only five types of components

00:05:46,789 --> 00:05:51,259
ten types of components that they want

00:05:49,190 --> 00:05:54,050
to use not all of them and you also

00:05:51,259 --> 00:05:56,270
don't know in which order so the user

00:05:54,050 --> 00:05:58,639
you can select the same component a few

00:05:56,270 --> 00:06:03,259
different times the same chart with

00:05:58,639 --> 00:06:06,889
different data so if we're working with

00:06:03,259 --> 00:06:09,919
static components then you might do

00:06:06,889 --> 00:06:13,100
something like this you have your

00:06:09,919 --> 00:06:15,770
template and you have all the different

00:06:13,100 --> 00:06:19,360
components there you're iterating over

00:06:15,770 --> 00:06:22,610
this array of components of

00:06:19,360 --> 00:06:27,680
configuration that the user has and for

00:06:22,610 --> 00:06:32,449
each item on this array you will check

00:06:27,680 --> 00:06:37,400
the items type first and then use ng

00:06:32,449 --> 00:06:39,139
switch to show the component that you

00:06:37,400 --> 00:06:42,439
want that the

00:06:39,139 --> 00:06:46,039
that matches this type so here I have

00:06:42,439 --> 00:06:49,279
only how many five components and it

00:06:46,039 --> 00:06:51,949
already looks really bad right

00:06:49,279 --> 00:06:55,759
imagine that we really have hundreds of

00:06:51,949 --> 00:06:58,810
components so this template will be

00:06:55,759 --> 00:07:02,210
really really big and there's no way to

00:06:58,810 --> 00:07:06,340
split the template because we need all

00:07:02,210 --> 00:07:10,639
these components we already split it and

00:07:06,340 --> 00:07:13,219
destructor it by by really creating

00:07:10,639 --> 00:07:16,099
specific components for for each type

00:07:13,219 --> 00:07:20,779
and we need to call them here in the

00:07:16,099 --> 00:07:23,509
template now another thing that's not

00:07:20,779 --> 00:07:25,430
really great here is that we have to

00:07:23,509 --> 00:07:28,099
ship all the code of all these

00:07:25,430 --> 00:07:31,099
components to the user even though the

00:07:28,099 --> 00:07:35,210
user will not use most of these

00:07:31,099 --> 00:07:40,039
components like I said probably 5 10 20

00:07:35,210 --> 00:07:43,879
types and we have hundreds of them so I

00:07:40,039 --> 00:07:48,229
want you to imagine just imagine if we

00:07:43,879 --> 00:07:54,159
could replace this whole code snippet

00:07:48,229 --> 00:07:59,149
this whole template with just one line

00:07:54,159 --> 00:08:01,370
what do you say about that huh ok so

00:07:59,149 --> 00:08:06,219
let's talk about then I'm a component

00:08:01,370 --> 00:08:08,779
and first we'll talk about some you know

00:08:06,219 --> 00:08:11,839
like what they are and we'll show some

00:08:08,779 --> 00:08:15,229
use cases where they're used where you

00:08:11,839 --> 00:08:18,080
should use them so dynamic components

00:08:15,229 --> 00:08:22,580
are added to the application to the Dom

00:08:18,080 --> 00:08:25,969
in runtime so you can load configuration

00:08:22,580 --> 00:08:28,250
from the server for example you can load

00:08:25,969 --> 00:08:30,770
the specific components that you want

00:08:28,250 --> 00:08:34,550
this array of components and you can

00:08:30,770 --> 00:08:37,539
even lazy load the the components code

00:08:34,550 --> 00:08:42,289
you don't need all the code on your

00:08:37,539 --> 00:08:44,990
application when it starts running so

00:08:42,289 --> 00:08:47,930
most of the code these hundreds of

00:08:44,990 --> 00:08:49,350
components will not be shipped to the

00:08:47,930 --> 00:08:52,230
user

00:08:49,350 --> 00:08:55,650
and like I said this there's only one

00:08:52,230 --> 00:08:58,770
line in the template this is the

00:08:55,650 --> 00:09:02,520
placeholder where the dynamic components

00:08:58,770 --> 00:09:05,070
will be inserted we get a reference to

00:09:02,520 --> 00:09:09,960
this place using the view child

00:09:05,070 --> 00:09:13,050
decorator and we need them to resolve

00:09:09,960 --> 00:09:17,220
the component Factory and create the

00:09:13,050 --> 00:09:19,980
component itself so where can we use

00:09:17,220 --> 00:09:25,170
them like I mentioned dashboard classic

00:09:19,980 --> 00:09:28,170
usage for this data-driven forms so you

00:09:25,170 --> 00:09:32,820
have maybe a form configuration or you

00:09:28,170 --> 00:09:37,020
have a form that's built according to

00:09:32,820 --> 00:09:41,100
the data itself so you check the type of

00:09:37,020 --> 00:09:42,990
data if this is a date if this is a text

00:09:41,100 --> 00:09:45,750
if this is an email and then you

00:09:42,990 --> 00:09:50,610
dynamically create the form for this

00:09:45,750 --> 00:09:53,580
data pop ups and models so here we

00:09:50,610 --> 00:09:58,140
actually have two dynamic components

00:09:53,580 --> 00:10:01,080
used one is the pop up itself whenever

00:09:58,140 --> 00:10:04,530
we want to add this pop up it it is

00:10:01,080 --> 00:10:06,900
supposed to be added to the body element

00:10:04,530 --> 00:10:09,330
and not inside a specific component not

00:10:06,900 --> 00:10:13,110
even inside the app component that we

00:10:09,330 --> 00:10:15,750
have and we might need it

00:10:13,110 --> 00:10:18,120
in from different places in the

00:10:15,750 --> 00:10:21,390
application from different flows and

00:10:18,120 --> 00:10:25,160
news cases so instead of hard-coding it

00:10:21,390 --> 00:10:28,410
somewhere we just have a method that

00:10:25,160 --> 00:10:31,260
creates this pop-up whenever whenever

00:10:28,410 --> 00:10:33,630
and wherever we need it and the other

00:10:31,260 --> 00:10:36,900
dynamic component we have here is the

00:10:33,630 --> 00:10:40,500
content of this model of this pop-up so

00:10:36,900 --> 00:10:42,960
this is the component the dialog

00:10:40,500 --> 00:10:46,230
component from material and Euler

00:10:42,960 --> 00:10:49,820
material and that's exactly the way that

00:10:46,230 --> 00:10:53,370
they do this they let you create

00:10:49,820 --> 00:10:57,240
component and add it dynamically inside

00:10:53,370 --> 00:11:00,010
the this dialog because you will need a

00:10:57,240 --> 00:11:02,920
different component each time

00:11:00,010 --> 00:11:06,280
again there's nowhere you can hard-coded

00:11:02,920 --> 00:11:10,120
inside this dialogue that they give to

00:11:06,280 --> 00:11:12,490
you with their library content

00:11:10,120 --> 00:11:14,950
management systems and a great example

00:11:12,490 --> 00:11:19,120
for that is the angular documentation

00:11:14,950 --> 00:11:22,810
angular IO so they have a bunch of

00:11:19,120 --> 00:11:26,680
dynamic components that they just give

00:11:22,810 --> 00:11:30,750
content to and the application actually

00:11:26,680 --> 00:11:36,070
can read the source code of angular and

00:11:30,750 --> 00:11:38,410
so the the all the code all the classes

00:11:36,070 --> 00:11:43,840
all the documentation that there is if

00:11:38,410 --> 00:11:47,230
it's changed the the guys who who write

00:11:43,840 --> 00:11:50,170
this a documentation they don't need to

00:11:47,230 --> 00:11:54,790
do anything because the application just

00:11:50,170 --> 00:11:57,580
gets the source code and builds the page

00:11:54,790 --> 00:12:00,640
the documentation by itself with dynamic

00:11:57,580 --> 00:12:04,440
components all the code snippets and if

00:12:00,640 --> 00:12:09,030
we have code snippets with tabs and

00:12:04,440 --> 00:12:16,510
examples links everything is dynamically

00:12:09,030 --> 00:12:20,170
loaded we can we can embed dynamic

00:12:16,510 --> 00:12:22,840
components into components from a

00:12:20,170 --> 00:12:26,550
different framework so in this example

00:12:22,840 --> 00:12:31,720
this is a real use case that I had I was

00:12:26,550 --> 00:12:38,760
creating an application which is for

00:12:31,720 --> 00:12:43,030
drawing diagrams and we were using their

00:12:38,760 --> 00:12:46,750
library called a joint jet and it's

00:12:43,030 --> 00:12:50,170
written a backbone and most of the

00:12:46,750 --> 00:12:52,540
components there are in SVG so you can

00:12:50,170 --> 00:12:54,730
create these boxes and links between

00:12:52,540 --> 00:12:57,910
them and you can move them around and

00:12:54,730 --> 00:13:04,090
they give you an option to embed an HTML

00:12:57,910 --> 00:13:06,970
component in the SVG but if you if you

00:13:04,090 --> 00:13:10,990
want to embed a regular HTML component

00:13:06,970 --> 00:13:13,110
that's really easy but we want to create

00:13:10,990 --> 00:13:17,100
an angular component

00:13:13,110 --> 00:13:20,160
and I have it working with dependency

00:13:17,100 --> 00:13:23,640
injection and change detection and all

00:13:20,160 --> 00:13:28,160
the things that I mentioned a from

00:13:23,640 --> 00:13:30,899
within this backbone and a framework so

00:13:28,160 --> 00:13:33,690
the way that you do that you create

00:13:30,899 --> 00:13:36,540
dynamic components and you also have to

00:13:33,690 --> 00:13:41,310
manage them with the live circle hooks

00:13:36,540 --> 00:13:44,790
and make sure that you have the ng

00:13:41,310 --> 00:13:48,300
ondestroy called whenever you remove the

00:13:44,790 --> 00:13:52,500
SVG box and so on so a really great

00:13:48,300 --> 00:13:57,000
article about that is by URI strumpf

00:13:52,500 --> 00:13:59,660
owner and he wrote how to do this

00:13:57,000 --> 00:14:03,600
exactly so if you have this use case I

00:13:59,660 --> 00:14:08,339
really recommend this article another

00:14:03,600 --> 00:14:11,000
use case that we had is using plug-in

00:14:08,339 --> 00:14:15,839
components so let's say you're working

00:14:11,000 --> 00:14:18,649
with a team and you're you're building

00:14:15,839 --> 00:14:22,980
the application and other team members

00:14:18,649 --> 00:14:28,550
build some plugins that you can plug

00:14:22,980 --> 00:14:28,550
into this application so in this example

00:14:29,180 --> 00:14:35,100
this is an application that allows

00:14:31,949 --> 00:14:39,449
teachers to create worksheets for their

00:14:35,100 --> 00:14:42,000
students and they can use different

00:14:39,449 --> 00:14:49,110
types of questions like you see here a

00:14:42,000 --> 00:14:54,480
complete the text or this a problems

00:14:49,110 --> 00:15:01,140
with a screen resolution here and select

00:14:54,480 --> 00:15:04,079
the right answer and so on so the

00:15:01,140 --> 00:15:08,040
teachers want to use more and more

00:15:04,079 --> 00:15:10,110
different types of questions but you

00:15:08,040 --> 00:15:12,870
don't know what each teacher is going to

00:15:10,110 --> 00:15:16,050
use and you can create you or other

00:15:12,870 --> 00:15:20,070
developers can create more types of

00:15:16,050 --> 00:15:21,990
questions for them so when you're

00:15:20,070 --> 00:15:24,420
writing the application you don't know

00:15:21,990 --> 00:15:25,180
what kind of questions are going to be

00:15:24,420 --> 00:15:27,520
you

00:15:25,180 --> 00:15:30,400
can't state them specifically in your

00:15:27,520 --> 00:15:33,040
application but there's a way if you're

00:15:30,400 --> 00:15:36,430
using dynamic components that you can

00:15:33,040 --> 00:15:40,900
load from the server the current a list

00:15:36,430 --> 00:15:42,850
of plugins that are available and then

00:15:40,900 --> 00:15:45,460
the user can choose whatever they want

00:15:42,850 --> 00:15:48,850
and again they don't need the code of

00:15:45,460 --> 00:15:56,370
all the different components that you

00:15:48,850 --> 00:16:00,370
have they need only what what they use a

00:15:56,370 --> 00:16:03,940
great article about that and also a

00:16:00,370 --> 00:16:06,790
video that you can watch is by maksim

00:16:03,940 --> 00:16:12,550
Koretsky modules are not what you think

00:16:06,790 --> 00:16:15,340
they are so make sure you you watch this

00:16:12,550 --> 00:16:20,980
and read his blog posts in angular in

00:16:15,340 --> 00:16:25,180
depth so if we're using a regular

00:16:20,980 --> 00:16:29,650
component our components are declared in

00:16:25,180 --> 00:16:32,500
our modules or angular modules and then

00:16:29,650 --> 00:16:34,780
angular looks at your templates and

00:16:32,500 --> 00:16:37,900
knows where the components is

00:16:34,780 --> 00:16:42,190
instantiated it creates a component

00:16:37,900 --> 00:16:46,870
Factory and then it just creates the

00:16:42,190 --> 00:16:50,320
instance of the component with the

00:16:46,870 --> 00:16:52,720
component view which includes the Dom

00:16:50,320 --> 00:16:55,150
node that it's sitting on and the

00:16:52,720 --> 00:16:57,310
instance itself the instance of the

00:16:55,150 --> 00:16:59,920
class with all the information and logic

00:16:57,310 --> 00:17:04,959
and then it is just rendered where you

00:16:59,920 --> 00:17:07,600
use it in the under dome but if you want

00:17:04,959 --> 00:17:12,490
to use a dynamic component you need to

00:17:07,600 --> 00:17:15,490
add it on top of the declarations also

00:17:12,490 --> 00:17:19,060
in entry components and this way angular

00:17:15,490 --> 00:17:21,880
knows that this component is probably

00:17:19,060 --> 00:17:25,330
not used anywhere in the template but it

00:17:21,880 --> 00:17:31,090
needs to create a component factory for

00:17:25,330 --> 00:17:34,810
it and also it creates a host factory to

00:17:31,090 --> 00:17:36,270
create a host component the host will

00:17:34,810 --> 00:17:39,390
link

00:17:36,270 --> 00:17:43,679
the component to the dom node where it's

00:17:39,390 --> 00:17:46,290
going to be inserted eventually the

00:17:43,679 --> 00:17:49,140
dynamically so that's why we need to

00:17:46,290 --> 00:17:52,950
specify it in the entry components as

00:17:49,140 --> 00:17:55,410
well in the entry module the main app

00:17:52,950 --> 00:17:58,470
component that we have is actually also

00:17:55,410 --> 00:18:01,380
an entry component but because we state

00:17:58,470 --> 00:18:04,380
that it is the bootstrap component in

00:18:01,380 --> 00:18:09,620
our angular module then it is already

00:18:04,380 --> 00:18:09,620
also considered as an entry component

00:18:12,650 --> 00:18:22,330
okay now you can actually check the

00:18:18,830 --> 00:18:23,510
components that are created or the

00:18:22,330 --> 00:18:27,090
[Music]

00:18:23,510 --> 00:18:31,380
instances of of the classes that are

00:18:27,090 --> 00:18:40,740
created by angular let's get this little

00:18:31,380 --> 00:18:50,910
bit bigger in our dev tools yeah you can

00:18:40,740 --> 00:18:58,590
see this great if you go to no sorry not

00:18:50,910 --> 00:19:03,150
the application sources okay

00:18:58,590 --> 00:19:05,130
you go to sources and you have all the

00:19:03,150 --> 00:19:08,130
scripts that are loaded and also

00:19:05,130 --> 00:19:11,550
everything that is created so here under

00:19:08,130 --> 00:19:14,700
ng you can see all the modules that are

00:19:11,550 --> 00:19:19,950
created and let's pick one of them so

00:19:14,700 --> 00:19:23,809
for example app module you can see a the

00:19:19,950 --> 00:19:27,710
entry factories that are created and for

00:19:23,809 --> 00:19:27,710
let's take a look here

00:19:27,960 --> 00:19:35,320
mm wait a minute okay home module you

00:19:32,980 --> 00:19:38,320
can see that for our study components

00:19:35,320 --> 00:19:40,390
only an energy factor is created and you

00:19:38,320 --> 00:19:45,070
can take a look at it and see its

00:19:40,390 --> 00:19:48,700
content but it might change according to

00:19:45,070 --> 00:19:54,220
the angular version and compiler so

00:19:48,700 --> 00:19:55,660
don't really take a specific example of

00:19:54,220 --> 00:19:58,240
what's written in this code it's

00:19:55,660 --> 00:20:00,790
generated by angular but you can see

00:19:58,240 --> 00:20:04,390
that for regular components there's only

00:20:00,790 --> 00:20:06,970
an NG and a factory and for dynamic

00:20:04,390 --> 00:20:10,210
components that we have in entry

00:20:06,970 --> 00:20:14,670
components we also have a host factory

00:20:10,210 --> 00:20:22,540
okay so that you can check the

00:20:14,670 --> 00:20:27,760
surrounding Dom element with okay so how

00:20:22,540 --> 00:20:30,430
do we create dynamic components like I

00:20:27,760 --> 00:20:33,190
said we have a placeholder in our

00:20:30,430 --> 00:20:36,940
template and this is one way to achieve

00:20:33,190 --> 00:20:40,000
this and we hold the view child and then

00:20:36,940 --> 00:20:45,100
this is the place where we'll insert the

00:20:40,000 --> 00:20:48,040
component now to insert it we fill first

00:20:45,100 --> 00:20:52,150
need to resolve the component factory to

00:20:48,040 --> 00:20:55,630
get it angular gives us the factory

00:20:52,150 --> 00:21:01,570
according to the component a type class

00:20:55,630 --> 00:21:04,510
that we pass to it and then we need the

00:21:01,570 --> 00:21:08,500
injector that we have in the component

00:21:04,510 --> 00:21:10,540
that we're attaching it to and with the

00:21:08,500 --> 00:21:12,610
injector this is the way that we bind it

00:21:10,540 --> 00:21:15,640
to dependency injection with the

00:21:12,610 --> 00:21:22,210
injection injector we create an instance

00:21:15,640 --> 00:21:24,510
and insert it on this element now this

00:21:22,210 --> 00:21:27,610
is actually the long version which is

00:21:24,510 --> 00:21:32,800
like you seen not very long at all you

00:21:27,610 --> 00:21:38,460
can actually even minimize it to just

00:21:32,800 --> 00:21:41,190
well to two lines of code

00:21:38,460 --> 00:21:43,559
so you still need to resolve the

00:21:41,190 --> 00:21:46,830
component factory and the view child

00:21:43,559 --> 00:21:49,320
always has a method already create

00:21:46,830 --> 00:21:52,610
component that attaches it to the

00:21:49,320 --> 00:21:59,039
injector and voila you have your

00:21:52,610 --> 00:22:01,649
component generated there now we can

00:21:59,039 --> 00:22:03,960
bind input and outputs to the dynamic

00:22:01,649 --> 00:22:08,070
components because we just have the

00:22:03,960 --> 00:22:10,499
instance of the component tress of the

00:22:08,070 --> 00:22:14,519
component itself and we have everything

00:22:10,499 --> 00:22:18,600
on the instance so we can just go

00:22:14,519 --> 00:22:24,029
directly and whatever is public on this

00:22:18,600 --> 00:22:29,490
a a component we can change the data or

00:22:24,029 --> 00:22:33,389
bind to it if its events but because

00:22:29,490 --> 00:22:36,629
it's not passed in with regular inputs

00:22:33,389 --> 00:22:39,119
and outputs in the template then the

00:22:36,629 --> 00:22:41,460
life cycle hook entry on changes will

00:22:39,119 --> 00:22:45,269
not detect changes when the value

00:22:41,460 --> 00:22:47,789
changes so be sure to use ng to check if

00:22:45,269 --> 00:22:53,970
you do want to respond to changes in the

00:22:47,789 --> 00:22:59,620
data you know you can even do more

00:22:53,970 --> 00:23:01,460
things with the component like a pass

00:22:59,620 --> 00:23:05,009
[Music]

00:23:01,460 --> 00:23:08,039
pass a inner components to it a

00:23:05,009 --> 00:23:12,809
projection using a content projection

00:23:08,039 --> 00:23:19,230
with the with another parameter when you

00:23:12,809 --> 00:23:22,590
create the component but what we have

00:23:19,230 --> 00:23:25,769
here is still not really dynamic why is

00:23:22,590 --> 00:23:29,220
that because we need to know the type of

00:23:25,769 --> 00:23:31,860
the component ahead of time during

00:23:29,220 --> 00:23:34,470
development time in this case this means

00:23:31,860 --> 00:23:37,559
that we need to import the code to this

00:23:34,470 --> 00:23:40,440
file and we don't need that we don't

00:23:37,559 --> 00:23:42,960
want that this means that the code of

00:23:40,440 --> 00:23:45,450
the node component will be included in

00:23:42,960 --> 00:23:48,830
the bundle even though the user might

00:23:45,450 --> 00:23:52,190
not need the node component

00:23:48,830 --> 00:23:54,740
so let's talk about dynamic dynamic

00:23:52,190 --> 00:23:59,770
component or plug-in components like we

00:23:54,740 --> 00:24:04,430
mentioned before these component are

00:23:59,770 --> 00:24:07,130
probably unknown in compile time and we

00:24:04,430 --> 00:24:09,050
can lazy load them no we can't lazy load

00:24:07,130 --> 00:24:12,170
the component we can lazy load a whole

00:24:09,050 --> 00:24:18,260
module so you build a module for this

00:24:12,170 --> 00:24:21,200
component and then you have to resolve

00:24:18,260 --> 00:24:24,980
the module we have the loader that comes

00:24:21,200 --> 00:24:29,900
with angular that can lazy load a module

00:24:24,980 --> 00:24:33,200
a by giving it a string so you don't

00:24:29,900 --> 00:24:36,200
need to know the the class of the type

00:24:33,200 --> 00:24:39,320
of the module itself you don't need to

00:24:36,200 --> 00:24:41,060
import its code so it's just a string so

00:24:39,320 --> 00:24:44,030
that's great this is the same way that

00:24:41,060 --> 00:24:49,190
it's done with the router in late lazy

00:24:44,030 --> 00:24:54,710
loaded routes then once you have the a

00:24:49,190 --> 00:24:57,830
module you create the injector and and

00:24:54,710 --> 00:25:00,740
ask for the component resolver to get

00:24:57,830 --> 00:25:03,820
the factory and you can create the

00:25:00,740 --> 00:25:06,650
component that you have in this module

00:25:03,820 --> 00:25:09,500
now when you're building this with the

00:25:06,650 --> 00:25:13,550
angular CLI you have this option lazy

00:25:09,500 --> 00:25:16,910
modules and this will create different

00:25:13,550 --> 00:25:20,540
bundles and will not load them with the

00:25:16,910 --> 00:25:22,730
main bundle and when you're building

00:25:20,540 --> 00:25:25,820
your project so this is the way that you

00:25:22,730 --> 00:25:28,040
do this when when you're using routes

00:25:25,820 --> 00:25:30,140
and lazy loaded routes you don't need to

00:25:28,040 --> 00:25:33,250
do that because the router does that by

00:25:30,140 --> 00:25:36,200
itself but when you want to build the

00:25:33,250 --> 00:25:38,360
lazy loaded modules by yourself and

00:25:36,200 --> 00:25:41,450
control them then this is the way you

00:25:38,360 --> 00:25:43,880
will configure the angular CLI and it

00:25:41,450 --> 00:25:48,590
will send its instructions to web pack

00:25:43,880 --> 00:25:50,370
to build it in the right way um here it

00:25:48,590 --> 00:25:53,610
is

00:25:50,370 --> 00:25:55,190
okay but still we have a bit of a

00:25:53,610 --> 00:25:59,250
problem here

00:25:55,190 --> 00:26:04,260
we still use the component class itself

00:25:59,250 --> 00:26:07,500
to resolve the factory so again we need

00:26:04,260 --> 00:26:10,740
the code of this component here but

00:26:07,500 --> 00:26:13,830
there is a great way that we can fix it

00:26:10,740 --> 00:26:17,750
and this is what Maksym Koretsky

00:26:13,830 --> 00:26:21,030
mentions in his talks and his blog post

00:26:17,750 --> 00:26:24,420
and this is the entry module the

00:26:21,030 --> 00:26:27,210
trapping our dynamic component and we

00:26:24,420 --> 00:26:30,360
can use the providers to register this

00:26:27,210 --> 00:26:32,040
component on the provider so we just

00:26:30,360 --> 00:26:34,860
need to know the name of the provider

00:26:32,040 --> 00:26:38,240
here it's just a string but you should

00:26:34,860 --> 00:26:41,910
use of course in a back token for this

00:26:38,240 --> 00:26:45,300
and the string is supposed to be known

00:26:41,910 --> 00:26:49,280
in the application and we're using multi

00:26:45,300 --> 00:26:52,290
true because we can load a different

00:26:49,280 --> 00:26:55,980
components on the same provider so it

00:26:52,290 --> 00:26:59,790
will be an array of components instead

00:26:55,980 --> 00:27:03,590
of just one value so make sure to a

00:26:59,790 --> 00:27:06,660
write multi true over there and then

00:27:03,590 --> 00:27:11,400
instead of fetching the component itself

00:27:06,660 --> 00:27:14,550
we go and we get the widget provider

00:27:11,400 --> 00:27:18,030
using the injector and just access it

00:27:14,550 --> 00:27:22,080
and get the component that we have there

00:27:18,030 --> 00:27:26,910
without knowing its class so what do you

00:27:22,080 --> 00:27:30,809
say do we have dynamic plugin components

00:27:26,910 --> 00:27:34,380
now did we succeed in this in our

00:27:30,809 --> 00:27:38,809
mission of lazy loading the components

00:27:34,380 --> 00:27:46,970
and dynamically adding them to the Dom I

00:27:38,809 --> 00:27:50,490
think we succeeded right all right so

00:27:46,970 --> 00:27:53,730
here are the resources that I used there

00:27:50,490 --> 00:27:59,429
is another one that I have to mention by

00:27:53,730 --> 00:28:02,400
manfred steyr he also shows another way

00:27:59,429 --> 00:28:06,100
to dynamically load components

00:28:02,400 --> 00:28:08,200
this is his demo project so there's a

00:28:06,100 --> 00:28:11,680
regular static component and a lazy

00:28:08,200 --> 00:28:15,100
loaded component but he also creates

00:28:11,680 --> 00:28:17,710
components and wraps them as angular

00:28:15,100 --> 00:28:21,040
elements so actually creates web

00:28:17,710 --> 00:28:23,800
components and then loads them using a

00:28:21,040 --> 00:28:27,580
script tag that is attached dynamically

00:28:23,800 --> 00:28:32,310
to the application the script tag loads

00:28:27,580 --> 00:28:36,070
the script of this now web component and

00:28:32,310 --> 00:28:38,350
attaches the newly created the component

00:28:36,070 --> 00:28:42,430
that we have there so you should check

00:28:38,350 --> 00:28:47,680
out this way also of fusing dynamic

00:28:42,430 --> 00:28:50,080
components and perhaps this will be a

00:28:47,680 --> 00:28:52,570
better way for you to use this

00:28:50,080 --> 00:28:55,600
especially if you have different teams

00:28:52,570 --> 00:29:00,460
using different frameworks to create

00:28:55,600 --> 00:29:05,080
your components and another person that

00:29:00,460 --> 00:29:08,920
I need to to thank is Igor Minar who is

00:29:05,080 --> 00:29:11,130
going to be a speaker here he's giving a

00:29:08,920 --> 00:29:14,110
talk in about an hour

00:29:11,130 --> 00:29:16,450
heat from the angular team and he also

00:29:14,110 --> 00:29:18,640
helped me understand what's going on

00:29:16,450 --> 00:29:21,640
with with the components when they're

00:29:18,640 --> 00:29:25,510
dynamically loaded and what threats

00:29:21,640 --> 00:29:28,060
there are so make sure that you know

00:29:25,510 --> 00:29:30,100
what's going on in this code that you

00:29:28,060 --> 00:29:32,620
trust the code of the dynamic components

00:29:30,100 --> 00:29:36,880
because if you let some other developer

00:29:32,620 --> 00:29:40,570
that you don't trust to ship code into

00:29:36,880 --> 00:29:43,000
your application it might be misused so

00:29:40,570 --> 00:29:44,500
they of course all those security

00:29:43,000 --> 00:29:49,540
threats and everything you need to

00:29:44,500 --> 00:29:52,770
consider those so if you have any

00:29:49,540 --> 00:29:56,740
questions I'll be here later with the

00:29:52,770 --> 00:29:57,559
Q&A session and you can also reach me in

00:29:56,740 --> 00:30:01,190
the

00:29:57,559 --> 00:30:03,740
male Twitter and so on and if you'd like

00:30:01,190 --> 00:30:06,380
to support ng girls we have a newly

00:30:03,740 --> 00:30:11,590
created patreon page and your

00:30:06,380 --> 00:30:15,710
contribution will be very very a very

00:30:11,590 --> 00:30:18,650
welcome and we'll be very grateful for

00:30:15,710 --> 00:30:20,030
this I hope you enjoyed and enjoy the

00:30:18,650 --> 00:30:22,410
rest of the conference

00:30:20,030 --> 00:30:25,759
thank you very much

00:30:22,410 --> 00:30:25,759

YouTube URL: https://www.youtube.com/watch?v=Rf935Va1os0


