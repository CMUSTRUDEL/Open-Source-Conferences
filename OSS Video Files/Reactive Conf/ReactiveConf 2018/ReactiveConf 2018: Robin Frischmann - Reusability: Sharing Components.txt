Title: ReactiveConf 2018: Robin Frischmann - Reusability: Sharing Components
Publication date: 2018-11-02
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
Reausability: Sharing Components

Reusability is often listed as one of the core benefits of component-based architectures. While in theory itâ€™s pretty straight-forward, in practice, writing truly reusable components is way more complicated. How do we customize styling? how to render to non-browser environments? There are all valid questions and issues with current solutions. But, following some rules and patterns can help to minify the problems. Follow me along my quest to achieve maximal reusability and delightful component sharing.
Captions: 
	00:00:02,370 --> 00:00:08,930
[Music]

00:00:12,480 --> 00:00:19,810
okay hi everyone I'm here today to talk

00:00:16,990 --> 00:00:23,649
about reusability in the context of

00:00:19,810 --> 00:00:26,340
react components and I want to leave you

00:00:23,649 --> 00:00:30,250
with some tips and patterns making

00:00:26,340 --> 00:00:33,040
sharing components more enjoyable so to

00:00:30,250 --> 00:00:37,000
introduce myself I'm Robin freshmen from

00:00:33,040 --> 00:00:39,640
Germany and I'm a front-end engineer at

00:00:37,000 --> 00:00:43,480
the entropy remarked which is the

00:00:39,640 --> 00:00:45,940
biggest drug store in Europe and to the

00:00:43,480 --> 00:00:48,609
left you can see a picture of me giving

00:00:45,940 --> 00:00:50,980
my first-ever big conference talk just

00:00:48,609 --> 00:00:54,100
one a year ago at reactive content for

00:00:50,980 --> 00:00:56,379
this lava which is why I'm super glad

00:00:54,100 --> 00:01:00,969
and happy that I have the opportunity to

00:00:56,379 --> 00:01:03,429
be here again thank you and now speaking

00:01:00,969 --> 00:01:07,000
about reusability I think the first

00:01:03,429 --> 00:01:11,680
thing we should probably look at is how

00:01:07,000 --> 00:01:14,140
do we reuse components in general and it

00:01:11,680 --> 00:01:15,610
turns out that in theory this is as

00:01:14,140 --> 00:01:18,550
simple as just for using a plain

00:01:15,610 --> 00:01:21,130
JavaScript function because in fact we

00:01:18,550 --> 00:01:23,230
can describe a component it's just a

00:01:21,130 --> 00:01:25,870
function that takes some so-called props

00:01:23,230 --> 00:01:29,200
and then returns a markup that is then

00:01:25,870 --> 00:01:31,480
rendered to the Dom and now that's

00:01:29,200 --> 00:01:33,550
basically all we need to reuse this

00:01:31,480 --> 00:01:36,540
component in like everywhere just like

00:01:33,550 --> 00:01:39,040
we do with this button example but

00:01:36,540 --> 00:01:42,970
obviously I wouldn't be here it was

00:01:39,040 --> 00:01:46,480
always like that simple and it turns out

00:01:42,970 --> 00:01:49,200
that in reality it's rarely a simple

00:01:46,480 --> 00:01:52,300
like this because our code base is

00:01:49,200 --> 00:01:54,730
growing and changing and it's steadily

00:01:52,300 --> 00:01:58,210
evolving with new features and new use

00:01:54,730 --> 00:02:02,200
cases and we need to make our components

00:01:58,210 --> 00:02:03,970
adapt to those changes and eventually we

00:02:02,200 --> 00:02:05,980
also have to satisfy like more and more

00:02:03,970 --> 00:02:10,060
use cases which might result in the

00:02:05,980 --> 00:02:12,670
growing complexity and at some point the

00:02:10,060 --> 00:02:15,249
button component we showed before might

00:02:12,670 --> 00:02:17,109
end up something like this you have a

00:02:15,249 --> 00:02:19,030
lots of props a lot of conditions and a

00:02:17,109 --> 00:02:22,420
lot of logic and stuff inside

00:02:19,030 --> 00:02:24,069
just to make it reusable and actually

00:02:22,420 --> 00:02:26,019
it's kind of intended that you can't

00:02:24,069 --> 00:02:28,150
really see anything because I just want

00:02:26,019 --> 00:02:30,190
to give you a feel how complex a

00:02:28,150 --> 00:02:32,709
component a simple component like a

00:02:30,190 --> 00:02:34,510
button can get and I think we can agree

00:02:32,709 --> 00:02:40,870
that the button should probably not be

00:02:34,510 --> 00:02:42,160
that simple yeah so what would you do if

00:02:40,870 --> 00:02:43,660
I would now tell you

00:02:42,160 --> 00:02:46,060
please implement some new feature in

00:02:43,660 --> 00:02:48,220
this button right you would probably not

00:02:46,060 --> 00:02:50,830
even try to understand it because you're

00:02:48,220 --> 00:02:52,690
afraid of breaking something but you

00:02:50,830 --> 00:02:55,150
would probably just go copy paste the

00:02:52,690 --> 00:02:58,840
code and eventually we would end up with

00:02:55,150 --> 00:03:00,910
something like this but it's not going

00:02:58,840 --> 00:03:02,920
to be any better because now we have to

00:03:00,910 --> 00:03:04,480
deal with a lot of duplication and if

00:03:02,920 --> 00:03:06,040
something changes like in the core of

00:03:04,480 --> 00:03:09,400
the button you would have to change it

00:03:06,040 --> 00:03:11,650
in many different places and it turns

00:03:09,400 --> 00:03:14,049
out that this is also especially true

00:03:11,650 --> 00:03:17,260
for open-source components because they

00:03:14,049 --> 00:03:20,590
need to fit like for like literally

00:03:17,260 --> 00:03:23,709
thousands of use cases and as a result

00:03:20,590 --> 00:03:26,739
I've seen very many open-source

00:03:23,709 --> 00:03:29,200
components that were super complex with

00:03:26,739 --> 00:03:33,100
like 100 drops or something like that

00:03:29,200 --> 00:03:36,280
and this might be the reason for the

00:03:33,100 --> 00:03:39,310
following so even through we have like

00:03:36,280 --> 00:03:43,030
thousands of components on NPM I can

00:03:39,310 --> 00:03:45,970
barely see them used in any project and

00:03:43,030 --> 00:03:48,040
this is pretty sad because the concept

00:03:45,970 --> 00:03:50,889
of a component is pretty cool we have a

00:03:48,040 --> 00:03:53,440
small encapsulated module that you

00:03:50,889 --> 00:03:57,030
should be able to reuse everywhere but

00:03:53,440 --> 00:04:00,250
somehow this doesn't work in most cases

00:03:57,030 --> 00:04:03,760
but I think that doesn't have to be like

00:04:00,250 --> 00:04:06,910
this and I want to invite you today on

00:04:03,760 --> 00:04:09,849
my journey we to get DM or exploring

00:04:06,910 --> 00:04:11,980
some issues we found when reusing

00:04:09,849 --> 00:04:14,709
components and I want to present some

00:04:11,980 --> 00:04:17,979
possible solutions for them and to do

00:04:14,709 --> 00:04:20,019
that we will look at two different types

00:04:17,979 --> 00:04:23,110
of components which are presentational

00:04:20,019 --> 00:04:25,330
and logical components and for those of

00:04:23,110 --> 00:04:27,400
you who don't know there's the concept

00:04:25,330 --> 00:04:29,409
in react which is kind of about

00:04:27,400 --> 00:04:31,539
splitting a presentational components

00:04:29,409 --> 00:04:32,350
and logical components where the

00:04:31,539 --> 00:04:35,110
presentation

00:04:32,350 --> 00:04:37,390
opponents are all about stock styling

00:04:35,110 --> 00:04:39,550
and markup so they are like dumped

00:04:37,390 --> 00:04:41,470
stateless components and on the other

00:04:39,550 --> 00:04:43,090
hand we have those logical components

00:04:41,470 --> 00:04:46,030
that are all concerned with business

00:04:43,090 --> 00:04:48,460
logic and behavior and we are doing this

00:04:46,030 --> 00:04:50,380
because as you will later see both of

00:04:48,460 --> 00:04:52,990
those type of components have completely

00:04:50,380 --> 00:04:56,860
different problems and solutions in

00:04:52,990 --> 00:04:59,830
terms of reusability so to start with

00:04:56,860 --> 00:05:02,590
I'd like to explore how we can reuse

00:04:59,830 --> 00:05:04,180
presentation and first of all I got some

00:05:02,590 --> 00:05:06,690
component examples so you better

00:05:04,180 --> 00:05:09,400
understand what we're talking about so

00:05:06,690 --> 00:05:12,400
basically everything you would include

00:05:09,400 --> 00:05:14,950
in a style guide can be considered a

00:05:12,400 --> 00:05:16,930
presentational component so for example

00:05:14,950 --> 00:05:19,510
if you have some type of graphic

00:05:16,930 --> 00:05:21,970
components or if you have a set of

00:05:19,510 --> 00:05:24,040
buttons with different variations and as

00:05:21,970 --> 00:05:26,470
we can see we can also have different

00:05:24,040 --> 00:05:28,660
pseudo classes like however active and

00:05:26,470 --> 00:05:31,900
disabled so it doesn't need to be like a

00:05:28,660 --> 00:05:34,300
static component and then we can also go

00:05:31,900 --> 00:05:37,210
on and compose smaller presentational

00:05:34,300 --> 00:05:40,330
components into bigger latwon's like for

00:05:37,210 --> 00:05:43,600
example this cut component which itself

00:05:40,330 --> 00:05:47,350
uses an image and having any text

00:05:43,600 --> 00:05:50,200
component now that we know what we're

00:05:47,350 --> 00:05:52,420
talking about we can explore like the

00:05:50,200 --> 00:05:55,120
goal with prisons educational components

00:05:52,420 --> 00:05:57,220
in terms of reusability by asking

00:05:55,120 --> 00:05:59,790
ourself what what makes the

00:05:57,220 --> 00:06:03,220
presentational components reusable and

00:05:59,790 --> 00:06:06,550
we might say that it's the ability to

00:06:03,220 --> 00:06:08,590
adapt to as many different use cases as

00:06:06,550 --> 00:06:12,280
possible just like we've seen with this

00:06:08,590 --> 00:06:14,380
button before and the way we can achieve

00:06:12,280 --> 00:06:18,070
this is by making our component

00:06:14,380 --> 00:06:20,200
composable customized able so now we

00:06:18,070 --> 00:06:22,120
have to think about what can actually be

00:06:20,200 --> 00:06:24,760
customized for presentational components

00:06:22,120 --> 00:06:27,100
and if we look at this definition for

00:06:24,760 --> 00:06:29,230
the presentational components again we

00:06:27,100 --> 00:06:34,000
can see that it turns out to be this

00:06:29,230 --> 00:06:35,770
darling and this markup part so our

00:06:34,000 --> 00:06:38,850
first goal is to accomplish that

00:06:35,770 --> 00:06:41,470
customization and I want to do this by

00:06:38,850 --> 00:06:44,290
looking at this previous button example

00:06:41,470 --> 00:06:45,729
again which was something like this and

00:06:44,290 --> 00:06:46,300
as you can see it's pretty simple it

00:06:45,729 --> 00:06:49,060
renders

00:06:46,300 --> 00:06:51,430
this trade button there but now let's

00:06:49,060 --> 00:06:53,530
say we want to have another button like

00:06:51,430 --> 00:06:55,930
for example this one which it's blue and

00:06:53,530 --> 00:06:57,789
has some rounded corners okay so the

00:06:55,930 --> 00:07:00,099
first thing you might want to do is just

00:06:57,789 --> 00:07:01,960
add some new props there and some new

00:07:00,099 --> 00:07:05,650
style properties and you're done you got

00:07:01,960 --> 00:07:08,379
your button but you can't as you can

00:07:05,650 --> 00:07:10,060
think of like this growing and growing

00:07:08,379 --> 00:07:14,650
and more complex because you have more

00:07:10,060 --> 00:07:17,830
use cases the common case is to kind of

00:07:14,650 --> 00:07:20,199
extend this styling and as we can see

00:07:17,830 --> 00:07:23,139
here we're composing like these base

00:07:20,199 --> 00:07:25,629
tiles with the with some custom style

00:07:23,139 --> 00:07:28,120
that is passed by the user and this

00:07:25,629 --> 00:07:31,360
allows us to add any other style to the

00:07:28,120 --> 00:07:33,639
button if we need to and okay now this

00:07:31,360 --> 00:07:35,289
it might be reasonable for single

00:07:33,639 --> 00:07:37,690
element components like this buttons

00:07:35,289 --> 00:07:39,879
that just renders one node element but

00:07:37,690 --> 00:07:42,969
what if we look at this cup component

00:07:39,879 --> 00:07:45,039
again which is multiple elements and now

00:07:42,969 --> 00:07:46,780
let's say we want to customize every

00:07:45,039 --> 00:07:50,740
single element of those of this

00:07:46,780 --> 00:07:53,440
component and we would have to use many

00:07:50,740 --> 00:07:57,219
different style props just to achieve

00:07:53,440 --> 00:08:00,009
that and it even gets worse if we want

00:07:57,219 --> 00:08:02,349
to do responsive styling because we

00:08:00,009 --> 00:08:06,699
might end up passing values for every

00:08:02,349 --> 00:08:09,190
break point for every property for every

00:08:06,699 --> 00:08:11,199
element we got in there and now just

00:08:09,190 --> 00:08:14,409
imagine you got maybe like five

00:08:11,199 --> 00:08:16,300
properties you already have like over 50

00:08:14,409 --> 00:08:20,020
different props and just imagine the

00:08:16,300 --> 00:08:22,840
mess you can create with this but still

00:08:20,020 --> 00:08:25,060
in reality I've seen a lot of many

00:08:22,840 --> 00:08:28,690
different API is that kind of work like

00:08:25,060 --> 00:08:32,620
this from a more explicit one like this

00:08:28,690 --> 00:08:35,020
one to something that like this we rely

00:08:32,620 --> 00:08:38,709
on some naming convention to apply those

00:08:35,020 --> 00:08:41,079
responsive Styles to something like this

00:08:38,709 --> 00:08:45,010
which basically allows you to pass in

00:08:41,079 --> 00:08:46,570
anything so you kind of can do a lot of

00:08:45,010 --> 00:08:50,279
stuff but you also don't have any

00:08:46,570 --> 00:08:53,890
convention at all and as you can imagine

00:08:50,279 --> 00:08:56,649
any of those api's can get super big and

00:08:53,890 --> 00:08:59,290
pretty fast again and eventually at some

00:08:56,649 --> 00:09:01,390
point we might just give up and

00:08:59,290 --> 00:09:04,060
especially developers who are not too

00:09:01,390 --> 00:09:06,670
familiar with those the implementation

00:09:04,060 --> 00:09:09,820
details and whatever they might just go

00:09:06,670 --> 00:09:13,750
back to the one single solution we have

00:09:09,820 --> 00:09:18,550
to over write styles confidently which

00:09:13,750 --> 00:09:21,970
is using this important flag again yeah

00:09:18,550 --> 00:09:25,240
but obviously that's probably not what I

00:09:21,970 --> 00:09:28,060
want you to do right now though as you

00:09:25,240 --> 00:09:31,089
can say we also suffered from those

00:09:28,060 --> 00:09:33,819
issues that um a lot and we tried all

00:09:31,089 --> 00:09:36,940
kind of different api's just to find out

00:09:33,819 --> 00:09:39,790
that it again just doesn't really feel

00:09:36,940 --> 00:09:44,890
like any better until we discovered

00:09:39,790 --> 00:09:48,399
another approach yeah so what if instead

00:09:44,890 --> 00:09:50,709
of hard-coding all those properties we

00:09:48,399 --> 00:09:53,319
would leverage the power of a design

00:09:50,709 --> 00:09:56,260
system in combination with theming and

00:09:53,319 --> 00:09:58,120
we've already seen and Marx talked that

00:09:56,260 --> 00:10:01,899
we can do pretty cool stuff with design

00:09:58,120 --> 00:10:05,470
system so I found this library called

00:10:01,899 --> 00:10:07,089
style system and I want to show you a

00:10:05,470 --> 00:10:09,459
quick example of using this library

00:10:07,089 --> 00:10:13,329
together with another a library which is

00:10:09,459 --> 00:10:15,730
called system components it basically

00:10:13,329 --> 00:10:17,860
uses this styled system a library

00:10:15,730 --> 00:10:21,449
together with styled components which is

00:10:17,860 --> 00:10:24,399
a CSS and J's library but you can

00:10:21,449 --> 00:10:26,890
probably use it with like any other

00:10:24,399 --> 00:10:29,770
styling library if you want to so it's

00:10:26,890 --> 00:10:33,640
pretty general and you can adapt it to a

00:10:29,770 --> 00:10:36,430
lot of solutions so the idea of style

00:10:33,640 --> 00:10:39,819
system is that you define your design

00:10:36,430 --> 00:10:42,160
system as a theme object and it also

00:10:39,819 --> 00:10:44,560
provides some clever shortcuts like for

00:10:42,160 --> 00:10:46,089
example those break point values they

00:10:44,560 --> 00:10:49,449
actually resolve to something more

00:10:46,089 --> 00:10:51,459
complex like this and it also adds those

00:10:49,449 --> 00:10:53,890
pixels to the sizes and spaces and

00:10:51,459 --> 00:10:55,690
whatever but you could also just pass

00:10:53,890 --> 00:10:59,260
the full value if you don't want to rely

00:10:55,690 --> 00:11:01,839
on this magic at all and if we look at

00:10:59,260 --> 00:11:04,510
how we can implement this button before

00:11:01,839 --> 00:11:07,089
again we just need to call this system

00:11:04,510 --> 00:11:09,760
function with a set of style groups

00:11:07,089 --> 00:11:11,139
which we want to be customizable where

00:11:09,760 --> 00:11:14,139
each of those groups

00:11:11,139 --> 00:11:16,179
represents a set of style properties

00:11:14,139 --> 00:11:18,160
like for example this space stands for

00:11:16,179 --> 00:11:20,499
the margin and padding the font size

00:11:18,160 --> 00:11:25,359
just stands for the font size and this

00:11:20,499 --> 00:11:29,859
color goes for those color values and if

00:11:25,359 --> 00:11:31,660
you look at the no so that's fine right

00:11:29,859 --> 00:11:34,029
now but if you look at those values that

00:11:31,660 --> 00:11:35,709
are passed to the button it they look a

00:11:34,029 --> 00:11:38,019
bit strange right because you would

00:11:35,709 --> 00:11:42,879
probably not want your font size to be 4

00:11:38,019 --> 00:11:44,949
pixels and now if we look at this theme

00:11:42,879 --> 00:11:47,769
again it turns out that the number

00:11:44,949 --> 00:11:51,699
actually refers to the index in our

00:11:47,769 --> 00:11:55,809
array so this 2 actually stands for d8

00:11:51,699 --> 00:11:59,980
pixels the 3 stands for the 16 pixel to

00:11:55,809 --> 00:12:03,309
4 for the 24 and so on and if we look at

00:11:59,980 --> 00:12:06,069
those color values there it turns out

00:12:03,309 --> 00:12:08,559
that those are not hard-coded values

00:12:06,069 --> 00:12:10,749
which you might think in the first place

00:12:08,559 --> 00:12:16,959
but they also refer to the color values

00:12:10,749 --> 00:12:19,149
in the scene yeah so for now that's fine

00:12:16,959 --> 00:12:22,959
but what about responsive styling again

00:12:19,149 --> 00:12:24,819
so it turns out that it can be done by

00:12:22,959 --> 00:12:27,549
passing an error instead of a single

00:12:24,819 --> 00:12:29,949
value where again the index represents

00:12:27,549 --> 00:12:33,129
the same index in this breakpoints array

00:12:29,949 --> 00:12:37,419
so this 4 actually relates to the

00:12:33,129 --> 00:12:41,399
smallest breakpoint and so on and yeah I

00:12:37,419 --> 00:12:43,449
think that's a pretty cool idea because

00:12:41,399 --> 00:12:47,949
we were implementing this darling

00:12:43,449 --> 00:12:49,660
customization API with the exact same

00:12:47,949 --> 00:12:51,819
props all the time and they are all

00:12:49,660 --> 00:12:55,329
centered around this single design

00:12:51,819 --> 00:13:00,309
system object which we're passing down

00:12:55,329 --> 00:13:03,179
from above so yeah now that we know how

00:13:00,309 --> 00:13:06,100
to provide great style customization

00:13:03,179 --> 00:13:08,679
let's look at the next big part of

00:13:06,100 --> 00:13:10,629
presentational components which you

00:13:08,679 --> 00:13:13,389
probably might already guess it's

00:13:10,629 --> 00:13:15,779
rendering customization because next to

00:13:13,389 --> 00:13:18,369
this darling we got this structure which

00:13:15,779 --> 00:13:22,539
is basically the way something is

00:13:18,369 --> 00:13:24,680
rendered and I want to show showcase

00:13:22,539 --> 00:13:27,470
like the main issue using

00:13:24,680 --> 00:13:28,760
Scott come example again so let's say

00:13:27,470 --> 00:13:30,589
it's implemented something like this

00:13:28,760 --> 00:13:32,450
where you've got this cut component that

00:13:30,589 --> 00:13:34,760
renders a day for some special card

00:13:32,450 --> 00:13:37,460
props to make it look like this card and

00:13:34,760 --> 00:13:40,700
then it just renders all those nested

00:13:37,460 --> 00:13:42,290
components but now let's say at some

00:13:40,700 --> 00:13:45,620
point we want to reuse this code

00:13:42,290 --> 00:13:48,320
component but instead we are fusing this

00:13:45,620 --> 00:13:49,790
heading for we want to use a heading two

00:13:48,320 --> 00:13:51,920
because we want to make this title

00:13:49,790 --> 00:13:54,740
bigger or something like that but still

00:13:51,920 --> 00:13:56,870
we also need to have this heading for at

00:13:54,740 --> 00:13:59,720
some other places so you need a way to

00:13:56,870 --> 00:14:02,709
customize the way this heading is

00:13:59,720 --> 00:14:05,839
rendered the first thing you might do is

00:14:02,709 --> 00:14:07,339
extending the API again like passing and

00:14:05,839 --> 00:14:10,339
heading prop to customize a rendered

00:14:07,339 --> 00:14:12,620
element and you're fine but as you can

00:14:10,339 --> 00:14:15,440
imagine the problem is if we do this

00:14:12,620 --> 00:14:20,000
over and over again we will end up with

00:14:15,440 --> 00:14:22,279
something super complex again now the

00:14:20,000 --> 00:14:24,800
solution aren't proposing for this is

00:14:22,279 --> 00:14:26,930
probably not actually solution but more

00:14:24,800 --> 00:14:30,370
like avoiding the problem in the first

00:14:26,930 --> 00:14:33,370
place and we can achieve that with

00:14:30,370 --> 00:14:38,000
embracing composition of a configuration

00:14:33,370 --> 00:14:40,459
so instead of configuring everything via

00:14:38,000 --> 00:14:42,650
props we can't we just don't render

00:14:40,459 --> 00:14:45,200
those nested components in the cart in

00:14:42,650 --> 00:14:47,779
the first place but we composed those

00:14:45,200 --> 00:14:50,390
components together separately so the

00:14:47,779 --> 00:14:52,250
cart component only remains rendering

00:14:50,390 --> 00:14:55,190
this safe with the special props and

00:14:52,250 --> 00:14:57,140
then just renders a children and if we

00:14:55,190 --> 00:14:58,580
now want to use this heading to

00:14:57,140 --> 00:15:01,520
component instead they're heading for

00:14:58,580 --> 00:15:03,620
all we have to do is change the single

00:15:01,520 --> 00:15:08,270
line of code without touching the card

00:15:03,620 --> 00:15:11,390
at all and we're done okay and to finish

00:15:08,270 --> 00:15:15,470
off this presentational part I just want

00:15:11,390 --> 00:15:17,570
to give you a quick reminder so even if

00:15:15,470 --> 00:15:19,459
I'm showing some solutions

00:15:17,570 --> 00:15:21,620
I still want you to always challenge

00:15:19,459 --> 00:15:24,470
what you're all actually doing because

00:15:21,620 --> 00:15:26,810
those solutions they may work in a lot

00:15:24,470 --> 00:15:28,940
of places and they especially helped us

00:15:26,810 --> 00:15:31,190
at the end to get our stuff done but

00:15:28,940 --> 00:15:33,680
this doesn't mean it's like the solution

00:15:31,190 --> 00:15:34,970
for everything but it can rather just

00:15:33,680 --> 00:15:38,060
help you if your components grow to

00:15:34,970 --> 00:15:40,130
complex and I can only recommend

00:15:38,060 --> 00:15:42,980
to start as simple as stupid as possible

00:15:40,130 --> 00:15:45,460
and then later at abstraction as soon as

00:15:42,980 --> 00:15:45,460
you need it

00:15:46,030 --> 00:15:52,910
alright but now let's look into reusing

00:15:49,880 --> 00:15:56,300
logic so again I want to give you some

00:15:52,910 --> 00:15:59,600
examples and some common examples for

00:15:56,300 --> 00:16:01,670
logical component logical components

00:15:59,600 --> 00:16:03,770
would be something like toppling a menu

00:16:01,670 --> 00:16:07,520
handling some dragon downs

00:16:03,770 --> 00:16:09,530
drag and drop stuff but also doing some

00:16:07,520 --> 00:16:11,630
state management some API calls and

00:16:09,530 --> 00:16:13,550
something like this and I brought a

00:16:11,630 --> 00:16:18,140
simple visual example which we're using

00:16:13,550 --> 00:16:21,140
to explore later and yeah consider this

00:16:18,140 --> 00:16:25,150
component which takes the github

00:16:21,140 --> 00:16:29,150
username then calls the github API

00:16:25,150 --> 00:16:32,030
fetches a list of repositories and sort

00:16:29,150 --> 00:16:34,040
them all by stars and then in the

00:16:32,030 --> 00:16:35,900
rendering pot we go on and render this

00:16:34,040 --> 00:16:39,260
information as some like visual cards

00:16:35,900 --> 00:16:40,610
and if you look at the simplified

00:16:39,260 --> 00:16:43,340
implementation it might look something

00:16:40,610 --> 00:16:45,650
like this we got some state then we have

00:16:43,340 --> 00:16:47,740
this fetch method that actually does

00:16:45,650 --> 00:16:51,110
this get up call and updates the state

00:16:47,740 --> 00:16:53,380
including a loading indicator and then

00:16:51,110 --> 00:16:55,610
if we look at the rendering part

00:16:53,380 --> 00:16:56,990
depending on this loading indicator we

00:16:55,610 --> 00:16:59,240
are either rendering this loading

00:16:56,990 --> 00:17:02,600
component or actually rendering those

00:16:59,240 --> 00:17:04,370
repository cards and you think this

00:17:02,600 --> 00:17:07,250
component is as simple as just rendering

00:17:04,370 --> 00:17:11,420
it to any element with those with their

00:17:07,250 --> 00:17:14,210
owner passed as a property but there's

00:17:11,420 --> 00:17:18,140
one major issue with those kind of

00:17:14,210 --> 00:17:20,150
logical components and let's say we want

00:17:18,140 --> 00:17:22,730
to customize for example this loading

00:17:20,150 --> 00:17:25,190
component so instead of having this cool

00:17:22,730 --> 00:17:26,840
bubble loading thing we want to go on

00:17:25,190 --> 00:17:30,350
and use this like old-school spinner

00:17:26,840 --> 00:17:33,020
stuff like that for some reason yeah

00:17:30,350 --> 00:17:35,210
another example would be what if you

00:17:33,020 --> 00:17:36,830
want to use this components on mobile

00:17:35,210 --> 00:17:39,650
but it turns out that this card

00:17:36,830 --> 00:17:41,810
component doesn't really fit there so we

00:17:39,650 --> 00:17:47,300
rather want to go and use some kind of

00:17:41,810 --> 00:17:49,910
list item component so now what if we

00:17:47,300 --> 00:17:51,120
look at those issues again it turns out

00:17:49,910 --> 00:17:53,010
that it's

00:17:51,120 --> 00:17:54,660
not really a problem with free using

00:17:53,010 --> 00:17:57,180
this this logical part of the component

00:17:54,660 --> 00:18:00,480
but again it's a problem with the

00:17:57,180 --> 00:18:03,630
presentation and the reason for this is

00:18:00,480 --> 00:18:06,180
even if we split those logical and

00:18:03,630 --> 00:18:08,520
presentational components we still have

00:18:06,180 --> 00:18:11,670
to render something at some point to

00:18:08,520 --> 00:18:13,830
make use of this logic and the usually

00:18:11,670 --> 00:18:15,780
you would do this by rendering some

00:18:13,830 --> 00:18:17,070
presentational and components within the

00:18:15,780 --> 00:18:20,070
render function of your logical

00:18:17,070 --> 00:18:22,440
components and just as I'm saying this

00:18:20,070 --> 00:18:26,000
right now if you think about it it might

00:18:22,440 --> 00:18:28,470
sound kind of stupid doesn't it occurs

00:18:26,000 --> 00:18:31,830
again here now to add lickable the

00:18:28,470 --> 00:18:33,960
presentation with the logic which is not

00:18:31,830 --> 00:18:35,970
what we kind of wanted to do in the

00:18:33,960 --> 00:18:37,980
first place by splitting them but

00:18:35,970 --> 00:18:41,250
somehow this turned out to be the common

00:18:37,980 --> 00:18:43,350
way to implement logical components but

00:18:41,250 --> 00:18:45,450
instead I would say the presentation

00:18:43,350 --> 00:18:47,059
shouldn't be a concern of those logical

00:18:45,450 --> 00:18:51,420
components at all

00:18:47,059 --> 00:18:53,790
so yeah luckily there's like a solution

00:18:51,420 --> 00:18:56,970
to this which is pretty simple but it's

00:18:53,790 --> 00:18:59,220
somehow it emerged just some months ago

00:18:56,970 --> 00:19:03,929
I think it's not that old actually and

00:18:59,220 --> 00:19:05,910
it's called headless components so a

00:19:03,929 --> 00:19:08,580
headless component is a logical

00:19:05,910 --> 00:19:11,450
component that encapsulate some logic of

00:19:08,580 --> 00:19:14,940
course like this fetch to github repos

00:19:11,450 --> 00:19:17,370
but as the name concludes it doesn't

00:19:14,940 --> 00:19:20,220
actually render any UI so you could say

00:19:17,370 --> 00:19:23,520
it's a user interface component without

00:19:20,220 --> 00:19:24,240
an user interface but as we already

00:19:23,520 --> 00:19:26,250
learned

00:19:24,240 --> 00:19:28,290
we need to render something at some

00:19:26,250 --> 00:19:30,330
point to make use of this logic or we

00:19:28,290 --> 00:19:32,520
just wouldn't have to write it at all

00:19:30,330 --> 00:19:34,260
and that's actually the clever part of

00:19:32,520 --> 00:19:36,450
those headless components because

00:19:34,260 --> 00:19:38,640
instead of internally handling all this

00:19:36,450 --> 00:19:41,880
rendering in the render function it use

00:19:38,640 --> 00:19:45,240
utilizes the render props pattern by

00:19:41,880 --> 00:19:48,990
calling a render function giving all the

00:19:45,240 --> 00:19:51,440
rendering power to the user again and I

00:19:48,990 --> 00:19:54,059
want to explore how this concept applies

00:19:51,440 --> 00:19:57,030
by using this get up example we had from

00:19:54,059 --> 00:19:59,820
before so if you look at this code again

00:19:57,030 --> 00:20:01,620
now we can see that the logic part is

00:19:59,820 --> 00:20:03,660
still the exact same because that's the

00:20:01,620 --> 00:20:06,600
concern of the logical component and we

00:20:03,660 --> 00:20:09,720
to reuse this one but if we look at the

00:20:06,600 --> 00:20:11,430
rendering part we can see that the

00:20:09,720 --> 00:20:13,680
rendering got way smaller because

00:20:11,430 --> 00:20:16,110
actually we don't have to render those

00:20:13,680 --> 00:20:17,940
cards anymore

00:20:16,110 --> 00:20:20,100
and in fact we only just call this

00:20:17,940 --> 00:20:24,240
children Rob with all this relevant data

00:20:20,100 --> 00:20:25,950
we got and if you don't have to use this

00:20:24,240 --> 00:20:28,980
children Rob in general it's just like

00:20:25,950 --> 00:20:30,510
more the common way in the community but

00:20:28,980 --> 00:20:34,710
you could call any brought that a user

00:20:30,510 --> 00:20:37,140
presses in but obviously this also comes

00:20:34,710 --> 00:20:38,700
at a cost because now we can't just use

00:20:37,140 --> 00:20:41,940
this component as we did before and

00:20:38,700 --> 00:20:44,370
we're done but we have to do some extra

00:20:41,940 --> 00:20:47,220
work we have to press a function as

00:20:44,370 --> 00:20:50,640
children what receives all this relevant

00:20:47,220 --> 00:20:53,550
data re passed in and returns the actual

00:20:50,640 --> 00:20:55,410
markup we want to be rendered and if you

00:20:53,550 --> 00:20:57,390
look at this markup it turns out that

00:20:55,410 --> 00:21:00,210
it's the exact same markup we had in the

00:20:57,390 --> 00:21:02,270
logical component before but just split

00:21:00,210 --> 00:21:05,880
apart and put in another little location

00:21:02,270 --> 00:21:08,040
so now you might ask okay but how does

00:21:05,880 --> 00:21:12,030
this help me I mean all you did is like

00:21:08,040 --> 00:21:14,730
putting this to another location but if

00:21:12,030 --> 00:21:17,460
we go back to the problems we had before

00:21:14,730 --> 00:21:20,310
like rendering this different loading

00:21:17,460 --> 00:21:23,010
component all we now have to do to

00:21:20,310 --> 00:21:24,720
achieve that is by switching out this

00:21:23,010 --> 00:21:27,960
loading with the spinner components and

00:21:24,720 --> 00:21:30,720
we are done and we can this also applies

00:21:27,960 --> 00:21:32,340
to this like mobile view example where

00:21:30,720 --> 00:21:34,560
you want to use this repository lists

00:21:32,340 --> 00:21:36,900
instead of the repository card and you

00:21:34,560 --> 00:21:39,870
can just switch the component and you're

00:21:36,900 --> 00:21:41,970
done and the important thing here is

00:21:39,870 --> 00:21:45,180
that we don't have to touch the logical

00:21:41,970 --> 00:21:49,080
component at all and this makes it easy

00:21:45,180 --> 00:21:51,030
to have coexisting like versions

00:21:49,080 --> 00:21:53,670
variations of this logical component

00:21:51,030 --> 00:21:57,300
working together nicely without any

00:21:53,670 --> 00:21:59,640
issues but actually the cool thing about

00:21:57,300 --> 00:22:02,520
headless components is that simply don't

00:21:59,640 --> 00:22:06,030
render anything or they're most often

00:22:02,520 --> 00:22:08,610
also platform agnostic which means with

00:22:06,030 --> 00:22:11,120
just some small changes we can now also

00:22:08,610 --> 00:22:14,190
use this component in rect native and

00:22:11,120 --> 00:22:16,610
basically in every like rendering target

00:22:14,190 --> 00:22:16,610
for yet

00:22:16,620 --> 00:22:21,809
if you're using something like react

00:22:19,409 --> 00:22:24,059
primitives which Mark showed before you

00:22:21,809 --> 00:22:27,840
would probably not even have to change

00:22:24,059 --> 00:22:30,330
anything at all okay and now to finish

00:22:27,840 --> 00:22:33,419
off I'd like to go one step further and

00:22:30,330 --> 00:22:35,759
show you how my team a DM uses those

00:22:33,419 --> 00:22:40,070
headless components to implement

00:22:35,759 --> 00:22:43,649
something we called Kraft components so

00:22:40,070 --> 00:22:44,820
consider the following UI there's you

00:22:43,649 --> 00:22:47,039
have to know we're building an online

00:22:44,820 --> 00:22:49,049
shop because we're drugstore and we need

00:22:47,039 --> 00:22:51,470
the customers addresses at some point to

00:22:49,049 --> 00:22:55,860
ship the packages with the products and

00:22:51,470 --> 00:22:58,529
this is just an design prototype which

00:22:55,860 --> 00:23:01,320
it might look like and as you can see we

00:22:58,529 --> 00:23:03,389
can have different addresses we can edit

00:23:01,320 --> 00:23:05,970
we can remove them and we can also add a

00:23:03,389 --> 00:23:08,220
new address if you want to and then in

00:23:05,970 --> 00:23:09,600
the backend we got the rest API that

00:23:08,220 --> 00:23:12,749
looks something like this

00:23:09,600 --> 00:23:14,610
and that's it and usually now the front

00:23:12,749 --> 00:23:16,980
developers would go and use this REST

00:23:14,610 --> 00:23:19,220
API directly which means they would have

00:23:16,980 --> 00:23:21,480
to implement like the error handling

00:23:19,220 --> 00:23:24,360
setting up the fetching with all these

00:23:21,480 --> 00:23:26,639
different configurations but they would

00:23:24,360 --> 00:23:28,980
also have to do the state management

00:23:26,639 --> 00:23:31,559
like updating this addresses array

00:23:28,980 --> 00:23:34,730
because if we click on this remove

00:23:31,559 --> 00:23:38,879
button you actually want to remove this

00:23:34,730 --> 00:23:42,179
list item as well as soon as the new

00:23:38,879 --> 00:23:44,730
request is successful now the problem is

00:23:42,179 --> 00:23:47,129
that we have many different teams that

00:23:44,730 --> 00:23:49,499
implement specific front ends but they

00:23:47,129 --> 00:23:51,690
all need to use those addresses api's

00:23:49,499 --> 00:23:54,269
but they don't know anything about this

00:23:51,690 --> 00:23:56,279
specific domain and if we do it just

00:23:54,269 --> 00:23:58,350
like this they would have to go to the

00:23:56,279 --> 00:24:02,700
REST API and do all this stuff

00:23:58,350 --> 00:24:04,830
repeatedly what's even worse if like if

00:24:02,700 --> 00:24:06,119
the API changes all of those teams would

00:24:04,830 --> 00:24:08,580
have to go there and change their

00:24:06,119 --> 00:24:10,740
components again and we thought about

00:24:08,580 --> 00:24:13,740
how to improve that and came up with

00:24:10,740 --> 00:24:15,779
this idea recall core components so

00:24:13,740 --> 00:24:18,269
basically there are headless components

00:24:15,779 --> 00:24:20,700
and are pretty similar to like what

00:24:18,269 --> 00:24:23,220
Apollo is for graphic well about forest

00:24:20,700 --> 00:24:26,850
api's and the way you use it is super

00:24:23,220 --> 00:24:28,919
simple you just import the relevant API

00:24:26,850 --> 00:24:29,880
components you need has all the required

00:24:28,919 --> 00:24:32,810
props to it

00:24:29,880 --> 00:24:36,480
and then render any UI given this

00:24:32,810 --> 00:24:38,760
specific API interface and our interface

00:24:36,480 --> 00:24:40,620
might look something like this where you

00:24:38,760 --> 00:24:42,450
got this area of addresses you've got

00:24:40,620 --> 00:24:44,070
three four methods to add update and

00:24:42,450 --> 00:24:47,250
remove this address and that's it

00:24:44,070 --> 00:24:48,810
and the cool thing is the from the

00:24:47,250 --> 00:24:51,630
developers don't have to think about

00:24:48,810 --> 00:24:54,480
this actual API call anymore because

00:24:51,630 --> 00:24:57,000
this address api component does like

00:24:54,480 --> 00:24:58,770
everything for them and it even handles

00:24:57,000 --> 00:25:00,630
the state so if you call this at address

00:24:58,770 --> 00:25:02,880
come from a function and it successfully

00:25:00,630 --> 00:25:05,700
does the call it automatically gets

00:25:02,880 --> 00:25:08,340
updates this address array which

00:25:05,700 --> 00:25:10,530
remembers the component so can I ensure

00:25:08,340 --> 00:25:14,760
that I was front-end in the background

00:25:10,530 --> 00:25:18,120
are always in sync and yeah

00:25:14,760 --> 00:25:20,700
now before finish off I'd like to I'd

00:25:18,120 --> 00:25:22,590
like got one more little thing I quickly

00:25:20,700 --> 00:25:24,900
want to mention because it's driving

00:25:22,590 --> 00:25:28,290
people crazy since Friday evening and

00:25:24,900 --> 00:25:30,690
you guessed it it's a reactors API and

00:25:28,290 --> 00:25:32,220
if you're not familiar just check it out

00:25:30,690 --> 00:25:34,740
it's pretty cool but if you're familiar

00:25:32,220 --> 00:25:37,680
with it you might now ask yourself okay

00:25:34,740 --> 00:25:40,260
so doesn't this replace this whole idea

00:25:37,680 --> 00:25:42,540
of headless components like isn't what

00:25:40,260 --> 00:25:48,690
you're telling us right now is already

00:25:42,540 --> 00:25:51,240
outdated as of now yeah and I'm pretty

00:25:48,690 --> 00:25:53,040
happy to tell you yes and no because

00:25:51,240 --> 00:25:55,980
it's true that you don't have to write

00:25:53,040 --> 00:25:57,540
this component with these render props

00:25:55,980 --> 00:25:59,130
anymore but still you have to think

00:25:57,540 --> 00:26:02,310
about this logic and presentation in

00:25:59,130 --> 00:26:04,860
separation but the cool thing is with

00:26:02,310 --> 00:26:06,480
hooks this address API could now look as

00:26:04,860 --> 00:26:09,270
simple as something like this where you

00:26:06,480 --> 00:26:11,700
just call this use address API within

00:26:09,270 --> 00:26:16,500
your just basic function components and

00:26:11,700 --> 00:26:18,540
that's it it will work okay so just let

00:26:16,500 --> 00:26:21,000
me sum it up very quickly

00:26:18,540 --> 00:26:23,370
we learned that reusing the presentation

00:26:21,000 --> 00:26:25,140
is all about customization and we

00:26:23,370 --> 00:26:27,630
learned that improving the customization

00:26:25,140 --> 00:26:29,940
can be achieved by leveraging the ideas

00:26:27,630 --> 00:26:31,830
of design systems on theming as well as

00:26:29,940 --> 00:26:35,340
embracing composition of a configuration

00:26:31,830 --> 00:26:38,040
and then we found that reusing logic can

00:26:35,340 --> 00:26:40,740
be achieved by really strictly splitting

00:26:38,040 --> 00:26:42,510
the logic on the presentation using for

00:26:40,740 --> 00:26:43,460
example headless components and probably

00:26:42,510 --> 00:26:46,880
in the future

00:26:43,460 --> 00:26:49,760
using react jokes and I hope this can

00:26:46,880 --> 00:26:52,730
help you to write more usable components

00:26:49,760 --> 00:26:55,330
in the future and yeah that's it thank

00:26:52,730 --> 00:26:55,330
you for having me

00:27:00,600 --> 00:27:06,300
Thank You Robin for sharing a nice

00:27:03,210 --> 00:27:09,390
presentation on sharing components thank

00:27:06,300 --> 00:27:11,970
you we have some popular questions

00:27:09,390 --> 00:27:13,700
waiting for you should we take the tough

00:27:11,970 --> 00:27:16,470
one

00:27:13,700 --> 00:27:18,900
at what point should one decide on a new

00:27:16,470 --> 00:27:23,330
component is needed instead of altering

00:27:18,900 --> 00:27:23,330
and already created one with new crops

00:27:23,450 --> 00:27:29,160
yeah that's a pretty tricky question

00:27:26,160 --> 00:27:32,280
because many people have many different

00:27:29,160 --> 00:27:35,250
opinions on this but I can tell you what

00:27:32,280 --> 00:27:39,650
I usually do when I encounter something

00:27:35,250 --> 00:27:42,120
like this which is I basically don't

00:27:39,650 --> 00:27:44,520
create components when I'm like

00:27:42,120 --> 00:27:46,620
prototyping something at all I just

00:27:44,520 --> 00:27:49,890
write down a single huge tree of

00:27:46,620 --> 00:27:53,280
components elements like this and

00:27:49,890 --> 00:27:57,630
whatever and I do this up to the point

00:27:53,280 --> 00:27:59,910
where I'm like so exhausted and bored of

00:27:57,630 --> 00:28:02,430
this like scrolling for everything that

00:27:59,910 --> 00:28:05,520
I can't start extracting components and

00:28:02,430 --> 00:28:07,770
I think it's pretty useful if you wait

00:28:05,520 --> 00:28:11,370
as long as you can to do that because

00:28:07,770 --> 00:28:13,830
that way you kind of make sure that

00:28:11,370 --> 00:28:15,510
you're not stripping out the wrong

00:28:13,830 --> 00:28:18,450
abstractions in the first place because

00:28:15,510 --> 00:28:22,080
that's way more effort to get right

00:28:18,450 --> 00:28:23,880
after it then by just like copying

00:28:22,080 --> 00:28:25,620
pasting stuff until you're confident

00:28:23,880 --> 00:28:32,730
enough like okay this looks like a

00:28:25,620 --> 00:28:35,010
really repeating pattern thank you when

00:28:32,730 --> 00:28:37,740
changing a theme for example adding

00:28:35,010 --> 00:28:45,960
break point how do you find all usages

00:28:37,740 --> 00:28:47,940
arrays to update yeah actually that's a

00:28:45,960 --> 00:28:52,920
good question

00:28:47,940 --> 00:28:56,970
I hope I'm happy to I never like got

00:28:52,920 --> 00:29:01,260
into this problem I can't imagine that

00:28:56,970 --> 00:29:03,630
it's quite difficult actually but maybe

00:29:01,260 --> 00:29:05,760
a solution would be to at this new

00:29:03,630 --> 00:29:08,640
breakpoint at the end of your

00:29:05,760 --> 00:29:10,560
breakpoints array so you don't at least

00:29:08,640 --> 00:29:12,630
you don't break your application at

00:29:10,560 --> 00:29:14,070
first but you still would have to go to

00:29:12,630 --> 00:29:15,890
all the places and

00:29:14,070 --> 00:29:20,010
like a new value for this breakpoint so

00:29:15,890 --> 00:29:22,470
basically that's yeah a big drawback of

00:29:20,010 --> 00:29:26,270
this idea that's I never thought about

00:29:22,470 --> 00:29:29,310
this actually asking good questions

00:29:26,270 --> 00:29:33,470
thank you thank you for your speech in

00:29:29,310 --> 00:29:33,470

YouTube URL: https://www.youtube.com/watch?v=Y7es1vcib14


