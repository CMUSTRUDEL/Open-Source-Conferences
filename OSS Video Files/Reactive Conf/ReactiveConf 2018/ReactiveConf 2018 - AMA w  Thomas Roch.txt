Title: ReactiveConf 2018 - AMA w  Thomas Roch
Publication date: 2018-11-04
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
Ask Me Anything session, moderated by Gerard Sans.
Based on Thomas's previous talk on ReactiveConf Main stage: https://youtu.be/c8p9o4rxcYk
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,840 --> 00:00:22,050
okay so we are here for another session

00:00:17,350 --> 00:00:27,220
of ask me anything and we have here

00:00:22,050 --> 00:00:29,680
Thomas rock you are coming from where so

00:00:27,220 --> 00:00:31,480
I'll stay in Scotland like in Glasgow

00:00:29,680 --> 00:00:35,050
Coma you party

00:00:31,480 --> 00:00:38,170
if you've went to my talk you party you

00:00:35,050 --> 00:00:41,620
realize to have a French accent so I'm

00:00:38,170 --> 00:00:45,309
originally from France okay and you were

00:00:41,620 --> 00:00:48,309
talking about reactive programming isn't

00:00:45,309 --> 00:00:52,120
it yeah so we will we will take some

00:00:48,309 --> 00:00:54,460
questions from Lido and also some other

00:00:52,120 --> 00:00:57,460
questions from the people here in the

00:00:54,460 --> 00:01:01,600
session and let's start picking one of

00:00:57,460 --> 00:01:05,070
the questions here so which problem use

00:01:01,600 --> 00:01:08,140
case react with reactive is solving

00:01:05,070 --> 00:01:10,409
working with react Redux but never

00:01:08,140 --> 00:01:18,520
encounter any such problem where

00:01:10,409 --> 00:01:21,609
reactivity was required okay so in fact

00:01:18,520 --> 00:01:24,460
it's not necessarily the case of what is

00:01:21,609 --> 00:01:26,079
react with reactive solving but more

00:01:24,460 --> 00:01:30,280
what we actually programming is solving

00:01:26,079 --> 00:01:33,490
okay so it's something we spin which has

00:01:30,280 --> 00:01:33,909
been mentioned in the talk from David

00:01:33,490 --> 00:01:36,130
Cordish

00:01:33,909 --> 00:01:37,990
which was after mine about statecharts

00:01:36,130 --> 00:01:43,079
is actually the ability to manipulate

00:01:37,990 --> 00:01:46,329
time so we're actually programming works

00:01:43,079 --> 00:01:50,109
in a way where you purge data and

00:01:46,329 --> 00:01:52,499
people's like subscribers can subscribe

00:01:50,109 --> 00:01:56,020
to something they are interested in and

00:01:52,499 --> 00:01:58,359
what that means is that backed in

00:01:56,020 --> 00:02:00,880
reactive programming is when no-one

00:01:58,359 --> 00:02:04,090
subscribe it to something it doesn't

00:02:00,880 --> 00:02:06,880
happen anymore so that comes that can

00:02:04,090 --> 00:02:09,520
come very handy for cancelling requests

00:02:06,880 --> 00:02:14,280
so if you're doing something like switch

00:02:09,520 --> 00:02:17,890
map which is a reparative demonstrated

00:02:14,280 --> 00:02:19,950
like it will what is going to is going

00:02:17,890 --> 00:02:21,690
to only subscribe to the latest request

00:02:19,950 --> 00:02:23,400
which means

00:02:21,690 --> 00:02:25,680
that it would cancel the previous one

00:02:23,400 --> 00:02:28,020
and you've got it like that happens

00:02:25,680 --> 00:02:32,070
without even you having to worry about

00:02:28,020 --> 00:02:34,290
it and then there's a time aspect which

00:02:32,070 --> 00:02:38,480
is for anything you want to deep bounce

00:02:34,290 --> 00:02:41,970
and total this and limit basically the

00:02:38,480 --> 00:02:44,420
the performance aspect so one example is

00:02:41,970 --> 00:02:46,980
how many requests you want to make

00:02:44,420 --> 00:02:48,690
typically when a user ID tapping and

00:02:46,980 --> 00:02:52,620
inside the landing pad you don't want to

00:02:48,690 --> 00:02:54,840
make a request on every single key they

00:02:52,620 --> 00:02:57,240
depress that would be too many requests

00:02:54,840 --> 00:02:59,520
so instead you can say oh I want to do

00:02:57,240 --> 00:03:03,120
bounce that's that inputs back to 300

00:02:59,520 --> 00:03:06,870
milliseconds and only if the user like

00:03:03,120 --> 00:03:09,120
since type 400 milliseconds will you

00:03:06,870 --> 00:03:12,770
make a request one of the like very

00:03:09,120 --> 00:03:16,560
interesting problem it solves is

00:03:12,770 --> 00:03:18,150
reporting to analytics so in our

00:03:16,560 --> 00:03:20,490
application we've got the search box I

00:03:18,150 --> 00:03:23,820
wanted to know what typically users are

00:03:20,490 --> 00:03:27,270
searching for again if you report every

00:03:23,820 --> 00:03:29,250
single keys like I have you're not going

00:03:27,270 --> 00:03:31,709
you can maybe have too much data it's

00:03:29,250 --> 00:03:35,160
not going to be relevant if you only do

00:03:31,709 --> 00:03:38,070
it when there is a blow under the inputs

00:03:35,160 --> 00:03:40,110
you actually might not get intermediate

00:03:38,070 --> 00:03:41,730
values that they might have typed so

00:03:40,110 --> 00:03:44,880
instead use reactive programming and you

00:03:41,730 --> 00:03:47,100
can observe the inputs and say well I'm

00:03:44,880 --> 00:03:49,350
gonna wait for one second for example

00:03:47,100 --> 00:03:51,300
yeah and if the result some type for one

00:03:49,350 --> 00:03:53,180
second then I'm going to report the

00:03:51,300 --> 00:03:55,950
value which is inside the search box

00:03:53,180 --> 00:03:57,989
yeah that can be sometimes more

00:03:55,950 --> 00:04:00,360
difficult if you want to implement it on

00:03:57,989 --> 00:04:02,610
your own yeah so if you don't use YT

00:04:00,360 --> 00:04:06,360
programming basically you end up having

00:04:02,610 --> 00:04:09,330
to write a lot of codes and if you

00:04:06,360 --> 00:04:11,400
really invest in trying to reduce that

00:04:09,330 --> 00:04:14,670
boilerplate you're actually likely to

00:04:11,400 --> 00:04:16,859
find at the end that well the

00:04:14,670 --> 00:04:18,570
abstractions you're going to create is

00:04:16,859 --> 00:04:20,850
going to be close to reactive

00:04:18,570 --> 00:04:22,710
programming so the way I'd like to tell

00:04:20,850 --> 00:04:24,470
people is a reactive programming is a

00:04:22,710 --> 00:04:27,300
bit like infrastructure to your code

00:04:24,470 --> 00:04:30,360
like you just purge data it will flow

00:04:27,300 --> 00:04:32,610
through operators but all the like the

00:04:30,360 --> 00:04:35,430
behavior which is not linked to your

00:04:32,610 --> 00:04:38,610
business logic but to your own operation

00:04:35,430 --> 00:04:39,870
that the operator does is like available

00:04:38,610 --> 00:04:44,070
there and you can just compose them

00:04:39,870 --> 00:04:47,880
together so it's maybe easier to follow

00:04:44,070 --> 00:04:52,770
or oh yeah so in terms of yeah in terms

00:04:47,880 --> 00:04:54,930
of weeding out intent former codes once

00:04:52,770 --> 00:04:56,850
you've got knowledge of basic reactive

00:04:54,930 --> 00:04:59,400
programming operators

00:04:56,850 --> 00:05:01,710
it's definitely readable it's one line

00:04:59,400 --> 00:05:03,660
equals one operation and you can read

00:05:01,710 --> 00:05:06,960
what's happening if you've got the

00:05:03,660 --> 00:05:11,430
imperative code with setting a timeout

00:05:06,960 --> 00:05:14,550
somewhere like saving the timeout and

00:05:11,430 --> 00:05:17,250
then cancel it elsewhere while tracking

00:05:14,550 --> 00:05:19,530
what's the latest promise is from like

00:05:17,250 --> 00:05:21,390
fetching from an API that's very

00:05:19,530 --> 00:05:24,630
difficult to read a lot more difficult

00:05:21,390 --> 00:05:26,010
to it so waiting will give more compact

00:05:24,630 --> 00:05:30,140
syntax which is readable

00:05:26,010 --> 00:05:34,230
mm-hm and this is a question of my own

00:05:30,140 --> 00:05:37,440
what in your experience you know the

00:05:34,230 --> 00:05:40,920
roadblocks for new teams are using

00:05:37,440 --> 00:05:45,360
versus coming yeah so reactive

00:05:40,920 --> 00:05:47,550
programming is quite so people tend to

00:05:45,360 --> 00:05:50,400
say that is a learning curve to it and

00:05:47,550 --> 00:05:53,430
the learning curve is can be down to a

00:05:50,400 --> 00:05:56,190
few factors one which is commonly

00:05:53,430 --> 00:05:58,920
mentioned is that it kind of change the

00:05:56,190 --> 00:06:02,910
way you think about stuff so it will pay

00:05:58,920 --> 00:06:04,770
us to to adapt and the other the other

00:06:02,910 --> 00:06:09,870
like difficulty is actually to try to

00:06:04,770 --> 00:06:13,410
find a place where you can use it quite

00:06:09,870 --> 00:06:16,950
often like you can end up having to

00:06:13,410 --> 00:06:19,470
write a lot of bullet bla plate code to

00:06:16,950 --> 00:06:23,460
create observables to connect them to a

00:06:19,470 --> 00:06:27,570
piece of your application and that can

00:06:23,460 --> 00:06:29,940
at the end a thing be a bit of a hotel

00:06:27,570 --> 00:06:32,160
for other people to have to do all the

00:06:29,940 --> 00:06:33,390
ceremony all the time they want to use

00:06:32,160 --> 00:06:37,920
relative programming

00:06:33,390 --> 00:06:41,550
I remember you introduced a library that

00:06:37,920 --> 00:06:43,500
that can help on these on these yes q

00:06:41,550 --> 00:06:45,670
what it does is once you choose what

00:06:43,500 --> 00:06:48,400
we're actually planning you you

00:06:45,670 --> 00:06:53,620
- up with and we support for currently

00:06:48,400 --> 00:06:55,630
which are ICS extreme most and coal bag

00:06:53,620 --> 00:06:59,860
once you choose like which one you want

00:06:55,630 --> 00:07:02,530
to walk for walk with what is going to

00:06:59,860 --> 00:07:04,750
provide you is with observables you know

00:07:02,530 --> 00:07:06,670
using that library so you can observe in

00:07:04,750 --> 00:07:09,430
react react or in Faneuil you can

00:07:06,670 --> 00:07:13,390
observe pops you can observe events that

00:07:09,430 --> 00:07:15,610
you create yourself you can if you bring

00:07:13,390 --> 00:07:18,130
your store as a pub you can use an

00:07:15,610 --> 00:07:22,870
enhancer which will allow you to observe

00:07:18,130 --> 00:07:25,390
actions or selectors so and then you can

00:07:22,870 --> 00:07:29,470
mix them into your custom business logic

00:07:25,390 --> 00:07:32,440
and you return a single observable which

00:07:29,470 --> 00:07:34,690
is going to emit effects and then those

00:07:32,440 --> 00:07:37,600
effects that can be handled internally

00:07:34,690 --> 00:07:40,120
but we fact that we that we've have

00:07:37,600 --> 00:07:43,660
introduced yeah all that can be just

00:07:40,120 --> 00:07:45,160
values like with acts actions that

00:07:43,660 --> 00:07:47,410
you're going to pass to an effect down

00:07:45,160 --> 00:07:49,660
low and basically your effect on low is

00:07:47,410 --> 00:07:53,620
going to be a switch map which says okay

00:07:49,660 --> 00:07:55,560
this effect is of type storage so like

00:07:53,620 --> 00:07:59,080
I'm going to call local storage and set

00:07:55,560 --> 00:08:01,450
the value whatever is specified inside

00:07:59,080 --> 00:08:04,080
the effect objects so you cannot quite

00:08:01,450 --> 00:08:09,820
your own API for effect but what it does

00:08:04,080 --> 00:08:14,020
effectively as a it removes imperative

00:08:09,820 --> 00:08:17,890
code from your presence logic so you

00:08:14,020 --> 00:08:19,480
don't no longer need to know how to use

00:08:17,890 --> 00:08:21,760
local storage in every single place

00:08:19,480 --> 00:08:23,920
where you want to use local storage you

00:08:21,760 --> 00:08:26,470
just know that you need to use an effect

00:08:23,920 --> 00:08:29,140
crate or function similar to an actual

00:08:26,470 --> 00:08:30,610
Cueto and with ax which is a reserved

00:08:29,140 --> 00:08:33,940
values I want to send to local storage

00:08:30,610 --> 00:08:36,220
and then inside local storage to going

00:08:33,940 --> 00:08:37,930
to do the same for analytics say oh I

00:08:36,220 --> 00:08:42,430
want to that sent and did it that we

00:08:37,930 --> 00:08:45,010
were 206 and you like inside that that

00:08:42,430 --> 00:08:47,680
effect handler that you can actually use

00:08:45,010 --> 00:08:49,870
without your entire application you can

00:08:47,680 --> 00:08:51,970
then you know try to be clever about how

00:08:49,870 --> 00:08:55,660
you how you handle stuff sample for

00:08:51,970 --> 00:08:56,970
analytics you can try to G fare calls to

00:08:55,660 --> 00:08:59,970
analytics

00:08:56,970 --> 00:09:02,460
you can try to like bundle them together

00:08:59,970 --> 00:09:04,500
if you want to but these optimizations

00:09:02,460 --> 00:09:05,670
are you going to make you don't have to

00:09:04,500 --> 00:09:08,070
repeat that projects throughout the

00:09:05,670 --> 00:09:09,870
entire application so you can save you

00:09:08,070 --> 00:09:11,640
can save you quite a lot of time you can

00:09:09,870 --> 00:09:13,290
save you a lot of time and can you can

00:09:11,640 --> 00:09:15,840
enables you to actually start to

00:09:13,290 --> 00:09:18,240
optimize your application but do it in a

00:09:15,840 --> 00:09:21,780
global way rather than just in random

00:09:18,240 --> 00:09:25,830
places awesome okay I'll I'll pick a

00:09:21,780 --> 00:09:28,020
question from from the list okay if if

00:09:25,830 --> 00:09:32,730
you have any questions you can use this

00:09:28,020 --> 00:09:35,670
little we have this hash RC 18 and you

00:09:32,730 --> 00:09:39,330
can add any questions at any time the

00:09:35,670 --> 00:09:42,840
next question of course this is the new

00:09:39,330 --> 00:09:45,360
things coming in in react so react uses

00:09:42,840 --> 00:09:48,600
set state to make the re-rendering more

00:09:45,360 --> 00:09:51,050
efficient when using react in a reacting

00:09:48,600 --> 00:09:54,210
way and then we're risking the

00:09:51,050 --> 00:09:57,690
performance of the pre-rendering so it's

00:09:54,210 --> 00:10:02,390
quite quite the opposite so we could

00:09:57,690 --> 00:10:06,690
reflect the lab we've introduced a is

00:10:02,390 --> 00:10:08,460
using set States and other hoods so it's

00:10:06,690 --> 00:10:10,260
not gonna work when you make a change

00:10:08,460 --> 00:10:14,220
locally it's not going to render your

00:10:10,260 --> 00:10:17,790
entire application it's it's like when

00:10:14,220 --> 00:10:21,120
use connects with react with herbs it

00:10:17,790 --> 00:10:23,250
chooses set States under the hood you

00:10:21,120 --> 00:10:25,440
don't have to worry about it the only

00:10:23,250 --> 00:10:28,140
thing you you you you want to do is I

00:10:25,440 --> 00:10:31,470
want to connect these components with

00:10:28,140 --> 00:10:34,290
this piece of data so either like

00:10:31,470 --> 00:10:36,630
whether or not you do it reactive in a

00:10:34,290 --> 00:10:39,810
reactive way or in a more imperative way

00:10:36,630 --> 00:10:41,970
actually the reactive ways more can be

00:10:39,810 --> 00:10:44,490
like so I'm not going to say it's more

00:10:41,970 --> 00:10:47,640
performant but it can bring performance

00:10:44,490 --> 00:10:52,110
optimizations and the biggest one is

00:10:47,640 --> 00:10:55,920
that you can control when things are

00:10:52,110 --> 00:10:57,690
being competed or observed and pushed to

00:10:55,920 --> 00:11:00,630
you to you to to the state of your

00:10:57,690 --> 00:11:02,790
components so I'm gonna take like read

00:11:00,630 --> 00:11:06,100
acts as an example again when use

00:11:02,790 --> 00:11:09,130
connects and use web state to pubs

00:11:06,100 --> 00:11:11,920
all the sectors you use they're going to

00:11:09,130 --> 00:11:14,860
be recomputed on every single state

00:11:11,920 --> 00:11:19,779
change whether whether you're interested

00:11:14,860 --> 00:11:22,420
in a value initially or the change of

00:11:19,779 --> 00:11:24,639
that value of your time you won't have

00:11:22,420 --> 00:11:26,769
the choice this sector is going to be

00:11:24,639 --> 00:11:28,750
called every single time if you want

00:11:26,769 --> 00:11:31,839
that behavior to not happen you've got

00:11:28,750 --> 00:11:37,389
to use memorization and memorization is

00:11:31,839 --> 00:11:41,259
actually quite it's a bit verbose to do

00:11:37,389 --> 00:11:44,110
like in wit ecstasies library called we

00:11:41,259 --> 00:11:46,600
select and I mean I've seen out of

00:11:44,110 --> 00:11:48,220
people not having a clue about what he

00:11:46,600 --> 00:11:51,519
was doing and what he was really for

00:11:48,220 --> 00:11:54,850
initially with reactive programming you

00:11:51,519 --> 00:12:00,490
could say I want to observe this select

00:11:54,850 --> 00:12:02,620
arm I want to filter faulty values and I

00:12:00,490 --> 00:12:04,389
want to take one and that means

00:12:02,620 --> 00:12:08,709
basically that once you've take take

00:12:04,389 --> 00:12:12,730
take one value which was like Treaty

00:12:08,709 --> 00:12:14,500
which was there which existed to stream

00:12:12,730 --> 00:12:17,709
will complete and you will no longer

00:12:14,500 --> 00:12:20,259
observe that selector so we'll never we

00:12:17,709 --> 00:12:22,630
compute the value and what you can do as

00:12:20,259 --> 00:12:25,089
well is that once you've got a value you

00:12:22,630 --> 00:12:28,329
can start to invoke more more selectors

00:12:25,089 --> 00:12:31,029
and you can chain that logic and you're

00:12:28,329 --> 00:12:33,639
not stuck with here's a behavior of my

00:12:31,029 --> 00:12:37,120
map state two pubs which we call only

00:12:33,639 --> 00:12:40,180
selectors from the time my compounds

00:12:37,120 --> 00:12:42,670
mounted the time it announced wherever

00:12:40,180 --> 00:12:44,319
what what about that I'll return okay

00:12:42,670 --> 00:12:46,509
well now that you are talking about

00:12:44,319 --> 00:12:49,000
these is there any reactive

00:12:46,509 --> 00:12:55,509
implementation of redux

00:12:49,000 --> 00:12:59,800
so we taxes reactive itself the the

00:12:55,509 --> 00:13:02,889
thing is I it's not granular so you've

00:12:59,800 --> 00:13:05,110
got actions which are sent to the store

00:13:02,889 --> 00:13:08,319
and then they propagate through your

00:13:05,110 --> 00:13:12,040
registers and then for each action

00:13:08,319 --> 00:13:14,380
there's going to be new state objects so

00:13:12,040 --> 00:13:17,740
that's the store is actually we active

00:13:14,380 --> 00:13:18,940
in we tax we can observe the store but

00:13:17,740 --> 00:13:21,910
what you get

00:13:18,940 --> 00:13:24,040
is the whole state so whatever something

00:13:21,910 --> 00:13:28,120
has changed then that's why we use

00:13:24,040 --> 00:13:31,240
selectors to like have a slice of the

00:13:28,120 --> 00:13:35,100
states were interested in typically what

00:13:31,240 --> 00:13:38,250
we do when we want to in refract is we

00:13:35,100 --> 00:13:44,410
observe the star we map a selector and

00:13:38,250 --> 00:13:48,370
then we use in in access an operator

00:13:44,410 --> 00:13:53,050
called distinct until changed yeah which

00:13:48,370 --> 00:13:57,100
will only emit values which are new like

00:13:53,050 --> 00:13:59,500
not equal to here is one but you can't

00:13:57,100 --> 00:14:02,340
really get away from having to observe

00:13:59,500 --> 00:14:08,610
the whole state and get all the updates

00:14:02,340 --> 00:14:13,590
okay do you know about how is called

00:14:08,610 --> 00:14:18,520
observable the yes seven specification

00:14:13,590 --> 00:14:23,710
no it's observable I forgot now but they

00:14:18,520 --> 00:14:29,470
build reduce implementation using erect

00:14:23,710 --> 00:14:32,620
yes and it's the law was kind of Oh like

00:14:29,470 --> 00:14:36,010
whatevs observable the this guess so

00:14:32,620 --> 00:14:38,650
we're not subscriber is a very similar

00:14:36,010 --> 00:14:43,330
approach that we of gamifying

00:14:38,650 --> 00:14:45,490
provides only limited to redux so what

00:14:43,330 --> 00:14:49,660
you can do with Redux of the weapon is

00:14:45,490 --> 00:14:51,490
you can observe actions you do your

00:14:49,660 --> 00:14:54,820
logic and what you do at the end is to

00:14:51,490 --> 00:14:57,400
map also to dispatch resurrection right

00:14:54,820 --> 00:15:00,700
what we can do in reflect exact we can

00:14:57,400 --> 00:15:02,680
observe with exceptions with the state

00:15:00,700 --> 00:15:04,810
actually you can do in real estate now

00:15:02,680 --> 00:15:10,570
in the widow so level okay you can

00:15:04,810 --> 00:15:12,940
observe component pops and events and

00:15:10,570 --> 00:15:14,620
then so that's what what you like a lot

00:15:12,940 --> 00:15:17,100
more things we can observe it gives you

00:15:14,620 --> 00:15:20,290
more options yes and then what we can do

00:15:17,100 --> 00:15:21,880
like on the other side is you can

00:15:20,290 --> 00:15:24,430
dispatch actions if you want just need

00:15:21,880 --> 00:15:26,410
to implement alone in effect on well you

00:15:24,430 --> 00:15:29,590
can pass you any effect you want like

00:15:26,410 --> 00:15:32,410
storage analytics then like

00:15:29,590 --> 00:15:34,660
you're basically the the limit is what

00:15:32,410 --> 00:15:36,250
your application requires there's

00:15:34,660 --> 00:15:38,170
between no limits in dick type of

00:15:36,250 --> 00:15:40,450
effects you can implement and you can

00:15:38,170 --> 00:15:43,510
also push to pops pops for your

00:15:40,450 --> 00:15:48,390
components and you can push to even

00:15:43,510 --> 00:15:51,070
tightly person JSX some elements awesome

00:15:48,390 --> 00:15:52,780
so it's it's a really it's a lot more

00:15:51,070 --> 00:15:55,720
competitive with us whether it's a lot

00:15:52,780 --> 00:15:59,020
more general purpose so it's not just

00:15:55,720 --> 00:16:01,060
like one specific case and everything

00:15:59,020 --> 00:16:04,630
you do today in Redux observable you

00:16:01,060 --> 00:16:06,940
actually can do in we fact with the

00:16:04,630 --> 00:16:09,250
added benefits of co-locating the logic

00:16:06,940 --> 00:16:11,350
to your components whatever and globally

00:16:09,250 --> 00:16:15,130
in your application so all these

00:16:11,350 --> 00:16:16,960
business logic if I'd like maybe I

00:16:15,130 --> 00:16:19,960
should give a bit of background on on

00:16:16,960 --> 00:16:22,030
the library itself describes the reason

00:16:19,960 --> 00:16:24,070
why it came about is because we've been

00:16:22,030 --> 00:16:27,250
Luke we have a large-scale application

00:16:24,070 --> 00:16:30,310
and we've been looking at having views

00:16:27,250 --> 00:16:35,140
of supplication which is just a single

00:16:30,310 --> 00:16:37,120
component that you mount and mount all

00:16:35,140 --> 00:16:40,090
the logic the business logic of our

00:16:37,120 --> 00:16:44,530
components regarding what requests they

00:16:40,090 --> 00:16:48,160
have to make and what analytics I need

00:16:44,530 --> 00:16:50,170
to report like what's like all of that

00:16:48,160 --> 00:16:51,900
you know belongs to view itself and it's

00:16:50,170 --> 00:16:56,110
not the concern of the overall

00:16:51,900 --> 00:16:57,700
applications Clayton and that way your

00:16:56,110 --> 00:17:01,930
initial banda aceh can be smaller

00:16:57,700 --> 00:17:04,600
because all these effects you can

00:17:01,930 --> 00:17:07,300
describe in relaxed observable or we

00:17:04,600 --> 00:17:10,990
talked saga are not in your main bundle

00:17:07,300 --> 00:17:12,940
again you to just be completely you can

00:17:10,990 --> 00:17:15,040
that you can to partially that in with

00:17:12,940 --> 00:17:17,260
our server and cigar to kind of which is

00:17:15,040 --> 00:17:19,270
tell things after the facts but it's

00:17:17,260 --> 00:17:23,350
it's not as powerful that what works you

00:17:19,270 --> 00:17:24,130
we can offer I say well that's that's a

00:17:23,350 --> 00:17:27,790
good answer

00:17:24,130 --> 00:17:30,670
thanks a lot let's see let's see we can

00:17:27,790 --> 00:17:36,070
gather some questions from the audience

00:17:30,670 --> 00:17:39,150
here no experts around oh we have a

00:17:36,070 --> 00:17:39,150
question excellent

00:17:44,700 --> 00:17:50,700
depends so we try to in our

00:17:48,130 --> 00:17:52,900
documentation we try to say that

00:17:50,700 --> 00:17:55,990
actually try to use a global effect and

00:17:52,900 --> 00:17:59,860
alarm so this way

00:17:55,990 --> 00:18:02,380
in fact so if you look at the high order

00:17:59,860 --> 00:18:05,620
components which is exposed I parted by

00:18:02,380 --> 00:18:09,429
refract which is called with effects it

00:18:05,620 --> 00:18:13,000
has its series of arguments you can pass

00:18:09,429 --> 00:18:16,720
so what you can do basically is provide

00:18:13,000 --> 00:18:19,470
you can you can bound it with your

00:18:16,720 --> 00:18:22,360
effect down there and then provide that

00:18:19,470 --> 00:18:24,190
bounded higher-order components the rest

00:18:22,360 --> 00:18:28,059
of your application so that way you

00:18:24,190 --> 00:18:29,860
never have to worry about like having to

00:18:28,059 --> 00:18:32,169
kind of create your eye out a

00:18:29,860 --> 00:18:33,659
comprehensive home scratch without it

00:18:32,169 --> 00:18:36,400
without an example is a bit difficult to

00:18:33,659 --> 00:18:38,470
to describe yeah if you go online and

00:18:36,400 --> 00:18:40,809
look you look in the docs you see to see

00:18:38,470 --> 00:18:43,480
what I mean yeah yeah of course that

00:18:40,809 --> 00:18:45,850
will require some some little example

00:18:43,480 --> 00:18:47,230
that you can you can show that yes we

00:18:45,850 --> 00:18:49,780
have we have exam person that we put the

00:18:47,230 --> 00:18:52,150
tree on are you going to do a workshop

00:18:49,780 --> 00:18:54,220
during the no I'm not saying about

00:18:52,150 --> 00:18:56,770
accessibility now maybe in the future

00:18:54,220 --> 00:18:59,110
okay that would be that would be perfect

00:18:56,770 --> 00:19:02,140
that the show is well I'll take another

00:18:59,110 --> 00:19:05,350
question so this question is saying like

00:19:02,140 --> 00:19:10,210
Erin you cook coupling too much with the

00:19:05,350 --> 00:19:13,059
bill with your API layer so is that an

00:19:10,210 --> 00:19:15,080
issue and so I guess that question is

00:19:13,059 --> 00:19:22,640
coming from

00:19:15,080 --> 00:19:25,010
the demo when you're not coupling it so

00:19:22,640 --> 00:19:27,730
how are you how are you binding with so

00:19:25,010 --> 00:19:31,220
like we you can use dependency injection

00:19:27,730 --> 00:19:33,710
to inject so if you've if you've got

00:19:31,220 --> 00:19:36,050
sample and API dependency which is a

00:19:33,710 --> 00:19:38,960
collection of methods that you can call

00:19:36,050 --> 00:19:43,400
to make calls to your API what you do is

00:19:38,960 --> 00:19:46,970
that you just inject a dependency you

00:19:43,400 --> 00:19:49,460
don't have to you know build the UI and

00:19:46,970 --> 00:19:50,900
the whole like inside inside your

00:19:49,460 --> 00:19:52,400
function when you want to make a call

00:19:50,900 --> 00:19:57,140
you just say for example

00:19:52,400 --> 00:20:01,370
let's call get you zero API call there

00:19:57,140 --> 00:20:03,680
is no there's no I mean I'm not sure I

00:20:01,370 --> 00:20:05,840
understand we're like what the question

00:20:03,680 --> 00:20:08,200
is coming from so if anyone here has

00:20:05,840 --> 00:20:14,150
asked it and we'll want to clarify

00:20:08,200 --> 00:20:16,640
anyone knows the context know yeah we

00:20:14,150 --> 00:20:19,250
can we can move on I mean if if no I

00:20:16,640 --> 00:20:22,340
don't think that is capping any

00:20:19,250 --> 00:20:24,950
finishing day's collocation which I

00:20:22,340 --> 00:20:27,950
think have some more benefits yeah no

00:20:24,950 --> 00:20:32,270
nothing specific that you cannot use in

00:20:27,950 --> 00:20:33,920
react in other in other libraries okay

00:20:32,270 --> 00:20:36,550
so let's move to the next question

00:20:33,920 --> 00:20:40,070
why I should represent components as

00:20:36,550 --> 00:20:43,250
functions functions are stateless by

00:20:40,070 --> 00:20:47,720
definition instead components have state

00:20:43,250 --> 00:20:50,720
and props so we can use Hopi to

00:20:47,720 --> 00:20:56,000
represent them so you you are more like

00:20:50,720 --> 00:20:58,130
a function you're defending I'm not

00:20:56,000 --> 00:21:00,050
defending anything in particular by

00:20:58,130 --> 00:21:02,800
showing what you can achieve with a

00:21:00,050 --> 00:21:02,800
particular approach

00:21:05,520 --> 00:21:14,370
see you can use all next so in a

00:21:09,870 --> 00:21:16,590
components there's two parts if I so

00:21:14,370 --> 00:21:19,910
yeah there are two about says like the

00:21:16,590 --> 00:21:24,900
states and the projection of that states

00:21:19,910 --> 00:21:27,000
into visual elements the like changing

00:21:24,900 --> 00:21:30,020
state and pops into virtual elements

00:21:27,000 --> 00:21:33,900
yeah it's a purely a transformation

00:21:30,020 --> 00:21:36,450
you take name you know a new iPad if I

00:21:33,900 --> 00:21:42,090
want it mm-hmm it's just expressing a

00:21:36,450 --> 00:21:45,110
piece of data a different way so whether

00:21:42,090 --> 00:21:49,290
use or P or functional programming I

00:21:45,110 --> 00:21:51,960
think it is it's not done aside to state

00:21:49,290 --> 00:21:55,320
it's more about data flow inside your

00:21:51,960 --> 00:21:57,240
application that's why I would say yeah

00:21:55,320 --> 00:21:59,550
I think we have seen if you have been

00:21:57,240 --> 00:22:02,010
around in the last few days we have seen

00:21:59,550 --> 00:22:05,820
few examples using hooks

00:22:02,010 --> 00:22:09,300
yes replacing one component by a

00:22:05,820 --> 00:22:11,700
function and then the opposite both yes

00:22:09,300 --> 00:22:13,380
I mean like in you know hoops is

00:22:11,700 --> 00:22:15,390
actually a different way to express the

00:22:13,380 --> 00:22:17,790
same thing so it's more about their

00:22:15,390 --> 00:22:20,160
positive and whether you want to use a

00:22:17,790 --> 00:22:22,950
class or a function because what it does

00:22:20,160 --> 00:22:25,380
actually is its introduced impurity in a

00:22:22,950 --> 00:22:28,590
function but again it's all about

00:22:25,380 --> 00:22:30,270
composition so you have like maybe the

00:22:28,590 --> 00:22:34,470
definition of components is slightly

00:22:30,270 --> 00:22:38,090
going to change with hooks but you still

00:22:34,470 --> 00:22:40,980
have collecting data and then

00:22:38,090 --> 00:22:45,900
transforming that data into virtual

00:22:40,980 --> 00:22:48,410
elements using JSX so like I think it's

00:22:45,900 --> 00:22:55,320
more different ways to compose things

00:22:48,410 --> 00:22:57,300
but a class is also like I don't know if

00:22:55,320 --> 00:23:03,680
people get caught up into the idea of

00:22:57,300 --> 00:23:06,780
purity a class is as impure as books and

00:23:03,680 --> 00:23:09,440
but you can't you can't make everything

00:23:06,780 --> 00:23:11,610
pure because otherwise you just end up

00:23:09,440 --> 00:23:13,820
rendering your whole application

00:23:11,610 --> 00:23:16,080
everything every time something changes

00:23:13,820 --> 00:23:16,560
which don't always all we're about

00:23:16,080 --> 00:23:18,870
trade-offs

00:23:16,560 --> 00:23:19,460
I would say that will be easier with a

00:23:18,870 --> 00:23:26,210
fine

00:23:19,460 --> 00:23:28,490
with a component in any way yes I am NOT

00:23:26,210 --> 00:23:29,960
trying to change another person well we

00:23:28,490 --> 00:23:31,909
are moving we are moving to a bigger

00:23:29,960 --> 00:23:34,010
yeah Vanessa I've learned I've lost

00:23:31,909 --> 00:23:38,049
touch with all people for so many years

00:23:34,010 --> 00:23:40,909
now so I just don't want to sort of like

00:23:38,049 --> 00:23:43,220
I'm more here to demonstrate what you

00:23:40,909 --> 00:23:48,350
can achieve with what I know very well

00:23:43,220 --> 00:23:49,970
and not necessarily trying to say what's

00:23:48,350 --> 00:23:52,580
like what the benefits are of this

00:23:49,970 --> 00:23:55,370
approach over or be if you want an OPA

00:23:52,580 --> 00:23:57,830
or like okay expert if is your thing I

00:23:55,370 --> 00:24:00,110
think you can only be the judge of

00:23:57,830 --> 00:24:02,059
whether my proposition is better than

00:24:00,110 --> 00:24:06,679
what you're used to and you think you

00:24:02,059 --> 00:24:10,370
can achieve the same result it's always

00:24:06,679 --> 00:24:15,830
going to I think it's always going to be

00:24:10,370 --> 00:24:18,020
a bit more verbose like the main

00:24:15,830 --> 00:24:24,500
difference between function and objects

00:24:18,020 --> 00:24:26,750
with methods is methods like aware of

00:24:24,500 --> 00:24:28,940
the object itself and tend to imitate

00:24:26,750 --> 00:24:30,350
the object itself as opposed to a

00:24:28,940 --> 00:24:33,500
function which is just like being

00:24:30,350 --> 00:24:36,590
passing objects and we turn a new one if

00:24:33,500 --> 00:24:38,539
you're doing it in a functional way at

00:24:36,590 --> 00:24:41,750
the end like when you come to actually

00:24:38,539 --> 00:24:43,850
architecture of applications people will

00:24:41,750 --> 00:24:45,740
like you kind of tend to realize that

00:24:43,850 --> 00:24:50,840
there's not so much difference between

00:24:45,740 --> 00:24:57,590
the two is really just a different way

00:24:50,840 --> 00:25:03,440
to like express or making your data flow

00:24:57,590 --> 00:25:05,360
through your application okay let's take

00:25:03,440 --> 00:25:10,190
another question so the next question is

00:25:05,360 --> 00:25:11,240
can you mix Redux with refract yes you

00:25:10,190 --> 00:25:15,950
can

00:25:11,240 --> 00:25:22,429
does it make sense yes we depends

00:25:15,950 --> 00:25:25,429
we depends what your application is so

00:25:22,429 --> 00:25:29,120
what I particularly like myself with my

00:25:25,429 --> 00:25:34,730
tax is the global actions darken society

00:25:29,120 --> 00:25:37,460
the global state because when like when

00:25:34,730 --> 00:25:40,190
God's producers they all receive the

00:25:37,460 --> 00:25:43,460
same actions so that's really good that

00:25:40,190 --> 00:25:45,140
actions lack global but they don't the

00:25:43,460 --> 00:25:45,950
purchasers that don't necessarily care

00:25:45,140 --> 00:25:53,929
about each other

00:25:45,950 --> 00:25:56,120
mm-hmm I think there is a day's like in

00:25:53,929 --> 00:25:58,490
my experience of like what we've been

00:25:56,120 --> 00:25:59,630
doing with sweet acts when we started

00:25:58,490 --> 00:26:02,690
using it three years ago

00:25:59,630 --> 00:26:05,030
we followed the dogmatic approach of the

00:26:02,690 --> 00:26:08,750
community which was everything has to be

00:26:05,030 --> 00:26:12,140
global and we found limitations to that

00:26:08,750 --> 00:26:15,200
which made us reevaluate our position

00:26:12,140 --> 00:26:17,600
which is like yes some stuff output to

00:26:15,200 --> 00:26:20,510
be global and some stuff are good to be

00:26:17,600 --> 00:26:22,910
local and you can like we've right

00:26:20,510 --> 00:26:25,220
actually allows you to mix these kind of

00:26:22,910 --> 00:26:29,300
things together without necessarily

00:26:25,220 --> 00:26:32,860
making your app look like a complete

00:26:29,300 --> 00:26:37,330
nonsense that's good

00:26:32,860 --> 00:26:40,130
so the answer is yes I think you like

00:26:37,330 --> 00:26:43,070
like we practice is more true than

00:26:40,130 --> 00:26:45,890
something opinionated so you can bring

00:26:43,070 --> 00:26:47,600
whatever you want to it and then it's

00:26:45,890 --> 00:26:50,679
basically what makes sense for you and

00:26:47,600 --> 00:26:53,570
your application right well I will take

00:26:50,679 --> 00:26:57,340
last question so here

00:26:53,570 --> 00:27:01,970
it's Eric G's chain streams are done by

00:26:57,340 --> 00:27:05,000
transducers or is it iterated multiple

00:27:01,970 --> 00:27:08,540
times this is kind of in depth question

00:27:05,000 --> 00:27:12,530
I have no idea actually don't work with

00:27:08,540 --> 00:27:14,750
access databases per walk with extreme

00:27:12,530 --> 00:27:18,170
[Music]

00:27:14,750 --> 00:27:20,390
way of the internals of your eyes yes so

00:27:18,170 --> 00:27:22,550
we need and we need some more time to go

00:27:20,390 --> 00:27:25,310
go if you someone has the answer like

00:27:22,550 --> 00:27:28,510
please like shout it out

00:27:25,310 --> 00:27:31,510
okay then we'll skip you go oh we have

00:27:28,510 --> 00:27:31,510
nice

00:27:38,060 --> 00:27:41,160
[Music]

00:28:09,379 --> 00:28:17,240
yes oh we like I think which we fight we

00:28:14,580 --> 00:28:20,610
an in you UI development in the general

00:28:17,240 --> 00:28:23,690
we are much more like interesting hot

00:28:20,610 --> 00:28:26,850
observables yeah

00:28:23,690 --> 00:28:30,120
no I'm getting confused but yeah

00:28:26,850 --> 00:28:34,409
basically you once you subscribe you're

00:28:30,120 --> 00:28:36,389
getting values from that now and from

00:28:34,409 --> 00:28:40,230
that moment on time and on walls or than

00:28:36,389 --> 00:28:41,669
anything which happened before cool good

00:28:40,230 --> 00:28:45,840
thanks

00:28:41,669 --> 00:28:50,759
yeah maybe we can we can wrap up so um

00:28:45,840 --> 00:28:53,610
how would you wrap up what will be the

00:28:50,759 --> 00:28:56,519
features that you think people can use

00:28:53,610 --> 00:28:59,070
from refracts that can that they can

00:28:56,519 --> 00:29:02,610
apply to their to their projects so I

00:28:59,070 --> 00:29:06,450
think like there's not necessarily we

00:29:02,610 --> 00:29:09,000
flat itself but there is a lot of power

00:29:06,450 --> 00:29:11,580
and benefits in trying to use reactive

00:29:09,000 --> 00:29:14,070
farming techniques or any way using

00:29:11,580 --> 00:29:18,889
anything which enables you to manipulate

00:29:14,070 --> 00:29:21,840
time and do things you know with time

00:29:18,889 --> 00:29:26,159
like with the talk which was right after

00:29:21,840 --> 00:29:30,629
me from David is another way to conceive

00:29:26,159 --> 00:29:32,820
these IDs using state charts I think

00:29:30,629 --> 00:29:36,149
though like those those things I show me

00:29:32,820 --> 00:29:39,000
powerful and just having them in lines

00:29:36,149 --> 00:29:42,000
the day you need them is actually quite

00:29:39,000 --> 00:29:43,649
quite cute because you you know that you

00:29:42,000 --> 00:29:46,440
can which photos for this kind of twing

00:29:43,649 --> 00:29:49,230
yeah I think that there's more people

00:29:46,440 --> 00:29:51,360
getting interested when every activity

00:29:49,230 --> 00:29:53,580
and we can see a few examples of that

00:29:51,360 --> 00:29:56,899
and just I think another aspect I

00:29:53,580 --> 00:30:00,360
mentioned already also is being able to

00:29:56,899 --> 00:30:03,480
so if you if we look at we tax because

00:30:00,360 --> 00:30:06,929
of immigrants is really well known with

00:30:03,480 --> 00:30:09,240
acts as a mansion is is observable and

00:30:06,929 --> 00:30:12,750
because it's of the observable it has

00:30:09,240 --> 00:30:15,149
seen a lot of innovation so you know

00:30:12,750 --> 00:30:18,629
there's been with the saga

00:30:15,149 --> 00:30:20,239
and we ducks without subs amiable

00:30:18,629 --> 00:30:22,529
because we've got this kind of like

00:30:20,239 --> 00:30:24,929
central point where everything is

00:30:22,529 --> 00:30:26,879
converging so it's just actually very

00:30:24,929 --> 00:30:28,440
easy to look at what's happening and you

00:30:26,879 --> 00:30:29,009
can look at middleware functions in

00:30:28,440 --> 00:30:30,839
redux

00:30:29,009 --> 00:30:34,469
so you can do something on specific

00:30:30,839 --> 00:30:36,509
actions but also what people have have

00:30:34,469 --> 00:30:39,539
realized with the tablet with this

00:30:36,509 --> 00:30:40,529
approach is a you don't listen one they

00:30:39,539 --> 00:30:42,089
say I want to centralize everything

00:30:40,529 --> 00:30:44,940
anymore

00:30:42,089 --> 00:30:47,809
so what what we fact enables you with

00:30:44,940 --> 00:30:50,339
and I think state charts as well with

00:30:47,809 --> 00:30:54,059
communicating to different state charts

00:30:50,339 --> 00:30:57,299
he's be able to decentralize geologic

00:30:54,059 --> 00:31:01,289
and co-located with the components where

00:30:57,299 --> 00:31:02,849
it makes sense in Texas I think the

00:31:01,289 --> 00:31:05,219
biggest example is if you have a forum

00:31:02,849 --> 00:31:07,859
if you have a view if something you have

00:31:05,219 --> 00:31:10,139
something which is a feature just

00:31:07,859 --> 00:31:12,359
co-locate that logic you know everything

00:31:10,139 --> 00:31:14,519
to do with logic of handling user

00:31:12,359 --> 00:31:16,589
interactions communicating with

00:31:14,519 --> 00:31:19,379
different services receiving the data

00:31:16,589 --> 00:31:24,749
from the network just just like like

00:31:19,379 --> 00:31:27,029
this many awesome well thanks thanks a

00:31:24,749 --> 00:31:30,330
lot for joining the ask me anything

00:31:27,029 --> 00:31:31,979
session he will be available for the

00:31:30,330 --> 00:31:34,080
rest of the conference so if you have

00:31:31,979 --> 00:31:38,160
any more questions feel free to reach

00:31:34,080 --> 00:31:40,060
him thanks a lot thank you thank you

00:31:38,160 --> 00:31:42,120
[Applause]

00:31:40,060 --> 00:31:42,120

YouTube URL: https://www.youtube.com/watch?v=liqHgQz8Ar0


