Title: ReactiveConf 2018 - Martin Pinter: Convenient Data Fetching with Higher Order Components
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Convenient Data Fetching with Higher Order Components

While the React community has largely agreed on abstracting complex app state away from the components, it is often a different story when it comes to remote data-fetching. On one side stand the many incarnations of the "fetch on didMount, show placeholder while isLoading" pattern, on the other you have frameworks like Apollo and Falcor - great in their own right, but what if we can't (or even don't want to) use them on a particular project ?
We'll be showing a small and self-contained data provider library - using higher-order React components and Redux on client side, and requiring zero changes to you backend. We'll also keep our components from worrying about how and when the fetching happens - defining instead only what data is required, while abstracting all of the race-conditions and caching via a single HOC, handling the hard parts.
Captions: 
	00:00:05,480 --> 00:00:19,270
oh hello everybody very excited to be

00:00:15,500 --> 00:00:21,949
here today my name is Martin as

00:00:19,270 --> 00:00:24,230
mentioned I'm from vacuum labs we are a

00:00:21,949 --> 00:00:27,140
company based in Slovakia and Czech

00:00:24,230 --> 00:00:29,509
Republic we do FinTech we do crypto and

00:00:27,140 --> 00:00:31,490
we were actually behind the inception of

00:00:29,509 --> 00:00:36,920
this very conference some three years

00:00:31,490 --> 00:00:40,250
ago so today's talk will be about data

00:00:36,920 --> 00:00:42,800
fetching and I'm super glad that all a

00:00:40,250 --> 00:00:45,379
few folks are actually here now because

00:00:42,800 --> 00:00:46,579
really the original title convenient

00:00:45,379 --> 00:00:49,520
data fetching interact using

00:00:46,579 --> 00:00:52,489
higher-order components this not the

00:00:49,520 --> 00:00:55,820
best title in this day and age first off

00:00:52,489 --> 00:00:58,670
fetch Inc that is like so three years

00:00:55,820 --> 00:01:00,739
ago who do fetching on their own in and

00:00:58,670 --> 00:01:03,140
remember three years that's a lot of

00:01:00,739 --> 00:01:05,300
time when talking about Davis JavaScript

00:01:03,140 --> 00:01:07,760
world so who would be fetch doing

00:01:05,300 --> 00:01:09,410
fetching in 2018 when we have all of

00:01:07,760 --> 00:01:10,000
these wonderful frameworks that do this

00:01:09,410 --> 00:01:13,610
for us

00:01:10,000 --> 00:01:15,620
furthermore hire the components nobody's

00:01:13,610 --> 00:01:17,270
ever using them again because we all

00:01:15,620 --> 00:01:22,220
have hooks now and hooks are awesome

00:01:17,270 --> 00:01:24,410
yeah so you've probably seen the

00:01:22,220 --> 00:01:27,970
questions from yesterday you've all

00:01:24,410 --> 00:01:30,770
heard that was something about hooks and

00:01:27,970 --> 00:01:32,690
the main idea is that it does not really

00:01:30,770 --> 00:01:36,590
matter what kind of abstraction you will

00:01:32,690 --> 00:01:39,050
use the core of this talk isn't affected

00:01:36,590 --> 00:01:42,050
by using higher the components or hooks

00:01:39,050 --> 00:01:44,390
or even render probes and the core of

00:01:42,050 --> 00:01:46,910
this talk will be about handling

00:01:44,390 --> 00:01:49,250
asynchronous data interact and about

00:01:46,910 --> 00:01:53,270
creating a good abstraction for handling

00:01:49,250 --> 00:01:55,310
them so and there already are some

00:01:53,270 --> 00:01:57,980
pretty good abstraction out there we've

00:01:55,310 --> 00:01:58,790
mentioned Apollo and Apollo does some

00:01:57,980 --> 00:02:00,950
really nice stuff

00:01:58,790 --> 00:02:03,320
you will first define the query

00:02:00,950 --> 00:02:06,050
component you will define your resource

00:02:03,320 --> 00:02:08,450
that you need for your presentation

00:02:06,050 --> 00:02:11,120
layer to render and then in your child

00:02:08,450 --> 00:02:13,220
components you will receive whether the

00:02:11,120 --> 00:02:15,620
resource is still holding whether there

00:02:13,220 --> 00:02:17,580
was an error and finally the data that

00:02:15,620 --> 00:02:20,940
you need to present

00:02:17,580 --> 00:02:22,800
and this has some really really tasty

00:02:20,940 --> 00:02:24,960
features behind it and I'm not

00:02:22,800 --> 00:02:28,290
necessarily talking about the graph

00:02:24,960 --> 00:02:31,200
queue model but I like much more is

00:02:28,290 --> 00:02:33,330
first off that your presentational

00:02:31,200 --> 00:02:36,060
components now live in a magical fairy

00:02:33,330 --> 00:02:38,430
land now all of the their data is always

00:02:36,060 --> 00:02:40,260
available then you don't have to worry

00:02:38,430 --> 00:02:42,390
about fetching it they don't have to

00:02:40,260 --> 00:02:44,700
worry about the data not being there

00:02:42,390 --> 00:02:49,290
once they are rendered they know they

00:02:44,700 --> 00:02:51,390
have the data a second of we were

00:02:49,290 --> 00:02:53,490
defining the resource that we need in

00:02:51,390 --> 00:02:55,530
the query component but we are only

00:02:53,490 --> 00:02:58,620
defining that resource we are not

00:02:55,530 --> 00:03:01,470
defining an imperative model where we

00:02:58,620 --> 00:03:05,250
fetch it directly and this is also

00:03:01,470 --> 00:03:07,410
something we really want from from our

00:03:05,250 --> 00:03:08,280
presentation component that they don't

00:03:07,410 --> 00:03:11,700
really care

00:03:08,280 --> 00:03:14,310
on what drive psycho hook or when that

00:03:11,700 --> 00:03:16,860
resource is fetched they only care about

00:03:14,310 --> 00:03:22,170
it being there at the moment that they

00:03:16,860 --> 00:03:26,850
need to render it so this stuff exists

00:03:22,170 --> 00:03:29,400
and it exists mostly on top of other

00:03:26,850 --> 00:03:32,459
query languages really and Apollo use

00:03:29,400 --> 00:03:36,090
graph QL and have rather similar

00:03:32,459 --> 00:03:39,330
approach Falkor also provides this and

00:03:36,090 --> 00:03:40,890
he has his own query language but really

00:03:39,330 --> 00:03:44,100
this query language is providing you

00:03:40,890 --> 00:03:47,010
with a lot of nice stuff but what we

00:03:44,100 --> 00:03:51,380
have just defined isn't dependent in any

00:03:47,010 --> 00:03:54,600
way on those so what we would like is

00:03:51,380 --> 00:03:57,480
having something like this over a REST

00:03:54,600 --> 00:04:00,270
API and quick go into the audience who

00:03:57,480 --> 00:04:03,560
is who has been using REST API over the

00:04:00,270 --> 00:04:05,700
last year on their project yeah and my

00:04:03,560 --> 00:04:09,540
assumption was that pretty much everyone

00:04:05,700 --> 00:04:11,220
if you been using only rescue or

00:04:09,540 --> 00:04:15,150
something like that that's awesome for

00:04:11,220 --> 00:04:16,859
you but rest is still here and there's

00:04:15,150 --> 00:04:19,519
nothing wrong about that that might be

00:04:16,859 --> 00:04:22,350
everything that we actually need now and

00:04:19,519 --> 00:04:26,039
that does not mean we have to look up to

00:04:22,350 --> 00:04:30,240
the cool kids using graph QL and just

00:04:26,039 --> 00:04:31,140
hang drink this in weird ways ourselves

00:04:30,240 --> 00:04:34,550
and looking like

00:04:31,140 --> 00:04:37,740
like we would like a framework like this

00:04:34,550 --> 00:04:39,600
so what we will be talking about is

00:04:37,740 --> 00:04:42,360
bringing the same level of convenience

00:04:39,600 --> 00:04:45,600
as we have shown with Apollo to

00:04:42,360 --> 00:04:48,060
something built just on top of react we

00:04:45,600 --> 00:04:50,640
will even let you bring whatever state

00:04:48,060 --> 00:04:53,670
management that you like and we will all

00:04:50,640 --> 00:04:56,910
do all of this strictly on client no

00:04:53,670 --> 00:04:59,190
needs to do anything on the server will

00:04:56,910 --> 00:05:03,140
do it on client and we will do it all

00:04:59,190 --> 00:05:09,570
with native fetch indeed let us make

00:05:03,140 --> 00:05:11,610
using fetch grade again so and since

00:05:09,570 --> 00:05:14,040
this dog exists and since the framework

00:05:11,610 --> 00:05:15,660
exists that means that the name approach

00:05:14,040 --> 00:05:17,520
probably had some problems so let us

00:05:15,660 --> 00:05:20,220
first define those problems otherwise

00:05:17,520 --> 00:05:24,120
there would be no need for making it

00:05:20,220 --> 00:05:25,620
great now what is the Navy approach you

00:05:24,120 --> 00:05:28,230
have your component you need it to

00:05:25,620 --> 00:05:30,600
display some remote data so the most

00:05:28,230 --> 00:05:33,240
straightforward thing to do something

00:05:30,600 --> 00:05:37,140
that all of us using react have probably

00:05:33,240 --> 00:05:39,600
done is we fetch the data directory in

00:05:37,140 --> 00:05:43,290
the presentational component so we will

00:05:39,600 --> 00:05:45,810
add some state we will add some

00:05:43,290 --> 00:05:48,570
lifecycle methods we will check whether

00:05:45,810 --> 00:05:51,300
we are still fetching or whether there

00:05:48,570 --> 00:05:55,320
has been an error and finally we display

00:05:51,300 --> 00:05:57,480
the remote data and this is fine it does

00:05:55,320 --> 00:06:00,690
the job it certainly does the job for

00:05:57,480 --> 00:06:03,360
small application but as your code

00:06:00,690 --> 00:06:07,380
starts to grow there are a couple of

00:06:03,360 --> 00:06:09,660
dots actually so what if you have

00:06:07,380 --> 00:06:11,580
multiple components requesting the very

00:06:09,660 --> 00:06:13,650
same resource and it does not really

00:06:11,580 --> 00:06:16,860
matter if it's the same component just

00:06:13,650 --> 00:06:19,260
different instances or if these are

00:06:16,860 --> 00:06:22,260
completely different components if you

00:06:19,260 --> 00:06:24,930
use this name approach you will need to

00:06:22,260 --> 00:06:26,130
fetch the same resource two times so

00:06:24,930 --> 00:06:28,530
this means that you have a redundant

00:06:26,130 --> 00:06:31,230
request and also if you are not

00:06:28,530 --> 00:06:34,920
synchronizing already over some state

00:06:31,230 --> 00:06:36,090
manager this can read video to your page

00:06:34,920 --> 00:06:38,400
getting out of sync

00:06:36,090 --> 00:06:40,860
because the second component will

00:06:38,400 --> 00:06:42,690
probably fetch a bit lighter the data

00:06:40,860 --> 00:06:45,259
might have changed he might have

00:06:42,690 --> 00:06:49,259
received different data

00:06:45,259 --> 00:06:51,479
and yeah that's because they don't share

00:06:49,259 --> 00:06:54,539
the data between them so that's a pity

00:06:51,479 --> 00:06:57,360
we can solve that of course and again

00:06:54,539 --> 00:06:59,699
the night way to solve this is just to

00:06:57,360 --> 00:07:02,840
abstract this using component hierarchy

00:06:59,699 --> 00:07:07,110
we will create a data fetcher component

00:07:02,840 --> 00:07:08,610
whose child whose children will be the

00:07:07,110 --> 00:07:11,580
component that the components that

00:07:08,610 --> 00:07:13,229
actually need the resource and this will

00:07:11,580 --> 00:07:17,009
solve the duplicity we will only search

00:07:13,229 --> 00:07:19,110
once but well it solves the duplicity it

00:07:17,009 --> 00:07:24,150
will make a bunch of other problems pop

00:07:19,110 --> 00:07:26,729
up that we also now have to work first

00:07:24,150 --> 00:07:29,430
off it might be really hard to do this

00:07:26,729 --> 00:07:32,400
correctly it might be hard to find the

00:07:29,430 --> 00:07:34,830
place where we can put this component so

00:07:32,400 --> 00:07:38,580
that all the components that require the

00:07:34,830 --> 00:07:40,590
data are known in a hierarchy if the

00:07:38,580 --> 00:07:43,080
components are really far apart on your

00:07:40,590 --> 00:07:46,620
web app this might be all the way to the

00:07:43,080 --> 00:07:48,300
root of your application and once we

00:07:46,620 --> 00:07:50,940
have them in the root of our application

00:07:48,300 --> 00:07:53,250
that means that we still have to handle

00:07:50,940 --> 00:07:55,860
the loading an error stage director in

00:07:53,250 --> 00:07:57,870
the presentational components and as we

00:07:55,860 --> 00:08:01,529
mentioned we don't want to do that they

00:07:57,870 --> 00:08:03,960
don't care about the resource not being

00:08:01,529 --> 00:08:08,279
there we just want them to display the

00:08:03,960 --> 00:08:10,319
resources furthermore inevitably there

00:08:08,279 --> 00:08:11,370
will come a time where you will change

00:08:10,319 --> 00:08:13,139
your app around

00:08:11,370 --> 00:08:16,139
this might not even be you it may be

00:08:13,139 --> 00:08:19,680
someone maintaining the app one year

00:08:16,139 --> 00:08:21,750
down and he will need to take one of the

00:08:19,680 --> 00:08:23,580
components and move it something

00:08:21,750 --> 00:08:25,620
somewhere completely else in the

00:08:23,580 --> 00:08:27,810
hierarchy and he might not know about

00:08:25,620 --> 00:08:30,719
the data fetcher he might just do this

00:08:27,810 --> 00:08:34,229
and suddenly he will remove one thing

00:08:30,719 --> 00:08:36,539
the whole app will break and he will

00:08:34,229 --> 00:08:41,130
just roll his eyes that's why does this

00:08:36,539 --> 00:08:43,680
even happen so the problem is that using

00:08:41,130 --> 00:08:46,050
the component hierarchy maybe isn't the

00:08:43,680 --> 00:08:48,690
best abstraction that we can provide for

00:08:46,050 --> 00:08:51,120
this data fetching indeed we would want

00:08:48,690 --> 00:08:53,699
the same thing as we had with Apple we

00:08:51,120 --> 00:08:55,440
want to define the resources directory

00:08:53,699 --> 00:08:57,990
on the components which come which

00:08:55,440 --> 00:08:58,649
consume them but we want them to be

00:08:57,990 --> 00:09:00,360
fetched

00:08:58,649 --> 00:09:02,999
somewhere else somewhere in the

00:09:00,360 --> 00:09:05,519
background we also want this fetching to

00:09:02,999 --> 00:09:08,850
happen for the first time when the first

00:09:05,519 --> 00:09:11,579
component requiring it renders and then

00:09:08,850 --> 00:09:13,889
if any subsequent components require the

00:09:11,579 --> 00:09:17,369
same same resource unless we tell them

00:09:13,889 --> 00:09:19,379
something else we want them to render

00:09:17,369 --> 00:09:22,319
the same resource we have touched

00:09:19,379 --> 00:09:24,660
initially so naturally what I'm talking

00:09:22,319 --> 00:09:26,579
about this some form of caching but

00:09:24,660 --> 00:09:31,319
again this might not be the

00:09:26,579 --> 00:09:35,240
straightforward we might need some smart

00:09:31,319 --> 00:09:39,509
stuff from it so what would we need

00:09:35,240 --> 00:09:41,369
first off it's not enough to know about

00:09:39,509 --> 00:09:44,490
the resources we have already received

00:09:41,369 --> 00:09:46,920
we also know about the requests that are

00:09:44,490 --> 00:09:49,470
still in progress otherwise we will just

00:09:46,920 --> 00:09:53,600
run into the same issues we had before

00:09:49,470 --> 00:09:58,129
we duplicitous only on a smaller scale

00:09:53,600 --> 00:10:00,809
second off if someone updates the data

00:09:58,129 --> 00:10:03,660
after some time that they are already

00:10:00,809 --> 00:10:06,449
rendered rendered we need some mechanism

00:10:03,660 --> 00:10:09,089
to update all of the components which

00:10:06,449 --> 00:10:11,279
listen to them and this is something

00:10:09,089 --> 00:10:14,069
that state managers already handle

00:10:11,279 --> 00:10:17,819
pretty well so we can probably reuse

00:10:14,069 --> 00:10:20,160
them and third off we might ultimately

00:10:17,819 --> 00:10:23,759
need more control over the cache

00:10:20,160 --> 00:10:26,189
invalidation we might need to tell our

00:10:23,759 --> 00:10:28,679
app to invalidate the cache at a certain

00:10:26,189 --> 00:10:32,129
moment we might tell it to invalidate it

00:10:28,679 --> 00:10:34,649
after some time indeed we might need not

00:10:32,129 --> 00:10:37,649
only to invalidate but to refresh the

00:10:34,649 --> 00:10:39,449
resource regularly so to do some kind of

00:10:37,649 --> 00:10:41,850
simple polling and while we are doing

00:10:39,449 --> 00:10:44,749
all of this we need to be handling the

00:10:41,850 --> 00:10:48,689
loading and the error phase correctly

00:10:44,749 --> 00:10:51,149
indeed this is starting to look like a

00:10:48,689 --> 00:10:56,910
lot of work and a lot of code to just do

00:10:51,149 --> 00:10:59,069
some simple fetching and we haven't been

00:10:56,910 --> 00:11:01,889
talking about error handling at all so

00:10:59,069 --> 00:11:03,929
far so you have to handle the errors

00:11:01,889 --> 00:11:07,499
that we received from the server you

00:11:03,929 --> 00:11:09,689
have to handle your 400 or 500 you have

00:11:07,499 --> 00:11:12,339
to handle those weird errors where the

00:11:09,689 --> 00:11:15,490
server returns 200 okay and

00:11:12,339 --> 00:11:19,029
has error inside the body you even

00:11:15,490 --> 00:11:21,879
should be handling when the fetch itself

00:11:19,029 --> 00:11:24,399
fails because of course we never just

00:11:21,879 --> 00:11:28,139
ride the catch with the console.log so

00:11:24,399 --> 00:11:30,699
that the winter does not complain and

00:11:28,139 --> 00:11:33,699
this is something you will be faced with

00:11:30,699 --> 00:11:35,379
on every web application it will be

00:11:33,699 --> 00:11:37,600
developing essentially otherwise every

00:11:35,379 --> 00:11:41,740
that will be connecting to some form of

00:11:37,600 --> 00:11:44,050
a REST API and it was the same for us

00:11:41,740 --> 00:11:46,959
for our company basically on every new

00:11:44,050 --> 00:11:50,170
project so what we've done instead of

00:11:46,959 --> 00:11:52,569
rewriting all of this logic this bunch

00:11:50,170 --> 00:11:55,240
of logic all over again we done what

00:11:52,569 --> 00:11:57,699
good lazy programmers should do and we

00:11:55,240 --> 00:11:59,949
have abstracted away and very good that

00:11:57,699 --> 00:12:04,540
this meme Leafs it was also on the

00:11:59,949 --> 00:12:08,579
previous presentation ok and this is not

00:12:04,540 --> 00:12:10,809
a groundbreaking thought for example

00:12:08,579 --> 00:12:13,029
yesterday on mainstage you could have

00:12:10,809 --> 00:12:15,309
heard the same about the headless

00:12:13,029 --> 00:12:17,800
components and really shoutouts to the

00:12:15,309 --> 00:12:20,740
presentation as well that was great

00:12:17,800 --> 00:12:23,079
and also it's something that we as a

00:12:20,740 --> 00:12:25,389
rillette community have done before with

00:12:23,079 --> 00:12:28,689
the state management a long time ago

00:12:25,389 --> 00:12:32,050
before the flux VARs had happened we

00:12:28,689 --> 00:12:34,839
have managed the stage just in different

00:12:32,050 --> 00:12:37,120
react components we have saw that this

00:12:34,839 --> 00:12:39,459
is a tangled mess and the way that we've

00:12:37,120 --> 00:12:42,089
abstracted it is that we've moved this

00:12:39,459 --> 00:12:45,309
out of our presentational components and

00:12:42,089 --> 00:12:48,040
moreover we did it in such a way that

00:12:45,309 --> 00:12:49,689
the components don't know nothing about

00:12:48,040 --> 00:12:52,329
the state management happening about

00:12:49,689 --> 00:12:55,240
them they only receive props as they

00:12:52,329 --> 00:12:58,899
need them and they don't care how those

00:12:55,240 --> 00:13:01,179
probes came to be and this is the same

00:12:58,899 --> 00:13:04,120
thing we want to do with the

00:13:01,179 --> 00:13:07,089
asynchronous data we don't need and

00:13:04,120 --> 00:13:09,160
indeed don't want our react and our

00:13:07,089 --> 00:13:11,800
state management layer to know anything

00:13:09,160 --> 00:13:14,199
about the big bed internet there that

00:13:11,800 --> 00:13:16,720
will take time to fetch your data that

00:13:14,199 --> 00:13:20,410
mirror error out and ultimately not

00:13:16,720 --> 00:13:23,019
render we want them to live in a magical

00:13:20,410 --> 00:13:25,540
variant where all of the data are

00:13:23,019 --> 00:13:27,929
available just at that moment that they

00:13:25,540 --> 00:13:27,929
need them

00:13:28,619 --> 00:13:34,029
alright so the way we've abstracted it

00:13:31,179 --> 00:13:36,129
is that we took away all of the fetching

00:13:34,029 --> 00:13:41,079
business and put it into a single

00:13:36,129 --> 00:13:42,220
library and it handles all of the hard

00:13:41,079 --> 00:13:43,809
stuff that we were talking

00:13:42,220 --> 00:13:50,019
out-of-the-box and much more

00:13:43,809 --> 00:13:52,209
conveniently and moreover just like the

00:13:50,019 --> 00:13:55,029
state layer and the react layer

00:13:52,209 --> 00:13:57,100
shouldn't care about the data provider

00:13:55,029 --> 00:14:01,239
buyers shouldn't know nothing about it

00:13:57,100 --> 00:14:03,819
being there so do our library is so does

00:14:01,239 --> 00:14:06,039
our library not care about the layers

00:14:03,819 --> 00:14:09,579
underneath it it only needs react to

00:14:06,039 --> 00:14:12,399
work and it lets you bring whatever

00:14:09,579 --> 00:14:14,470
state management whatever other tooling

00:14:12,399 --> 00:14:18,639
that you might use that you might like

00:14:14,470 --> 00:14:21,160
and the key is that the the only thing

00:14:18,639 --> 00:14:25,989
that this library should do is handle

00:14:21,160 --> 00:14:28,600
and synchronize the data fetching so how

00:14:25,989 --> 00:14:30,369
does it look we define those two

00:14:28,600 --> 00:14:32,199
abstraction point in the beginning and

00:14:30,369 --> 00:14:36,009
we will be getting back to them we want

00:14:32,199 --> 00:14:38,619
to define the remote resources so we'll

00:14:36,009 --> 00:14:42,819
do that we'll create create a resource

00:14:38,619 --> 00:14:44,709
we'll give it a unique name we'll tell

00:14:42,819 --> 00:14:47,859
it what it should do once it receives

00:14:44,709 --> 00:14:52,869
data that is probably store it somewhere

00:14:47,859 --> 00:14:56,309
in your state and finally we tell it how

00:14:52,869 --> 00:14:59,289
the data is acquired but this equation

00:14:56,309 --> 00:15:01,299
will not be done on the presentation

00:14:59,289 --> 00:15:03,669
component itself the product the

00:15:01,299 --> 00:15:06,819
components will require the resource but

00:15:03,669 --> 00:15:09,819
this receive this recite a recipe to

00:15:06,819 --> 00:15:14,799
acquire the resources will be happening

00:15:09,819 --> 00:15:18,399
somewhere behind the scenes and second

00:15:14,799 --> 00:15:20,709
off we want to wrap them around our

00:15:18,399 --> 00:15:23,049
components in such a way that they know

00:15:20,709 --> 00:15:25,509
they are completely oblivious to the

00:15:23,049 --> 00:15:27,339
data provider layer so the way that we

00:15:25,509 --> 00:15:30,429
do that is we define a higher-order

00:15:27,339 --> 00:15:34,839
component where in an array we provide

00:15:30,429 --> 00:15:36,689
them with all of the resources and I can

00:15:34,839 --> 00:15:39,159
already hear everyone that yeah they

00:15:36,689 --> 00:15:40,060
hire the components we are not do you

00:15:39,159 --> 00:15:41,830
think that we are using

00:15:40,060 --> 00:15:43,780
hooks it does not really matter

00:15:41,830 --> 00:15:46,300
higher-order components are available to

00:15:43,780 --> 00:15:49,600
us now once hooks are available we can

00:15:46,300 --> 00:15:51,850
do the same thing with hooks but the key

00:15:49,600 --> 00:15:55,540
is the abstraction those two points of

00:15:51,850 --> 00:15:58,330
abstraction the obliviousness of our web

00:15:55,540 --> 00:16:01,480
components and also the fact that we

00:15:58,330 --> 00:16:04,480
define only what data is needed not the

00:16:01,480 --> 00:16:07,060
other imperative way so we've written

00:16:04,480 --> 00:16:09,040
this I don't know ten lines there is

00:16:07,060 --> 00:16:12,340
some useful stuff in the second example

00:16:09,040 --> 00:16:14,830
and we have our fetching we have

00:16:12,340 --> 00:16:17,590
essentially what is a simple Apollo

00:16:14,830 --> 00:16:19,000
client built on top of rest and yeah

00:16:17,590 --> 00:16:22,570
that's pretty great it's pretty

00:16:19,000 --> 00:16:25,840
convenient to use actually and there is

00:16:22,570 --> 00:16:28,990
still more we've glanced about we

00:16:25,840 --> 00:16:30,790
glanced off we just hand waved a lot of

00:16:28,990 --> 00:16:33,250
stuff a lot of problems we were talking

00:16:30,790 --> 00:16:35,860
about before but they are usually solved

00:16:33,250 --> 00:16:40,030
by a single line of configuration so you

00:16:35,860 --> 00:16:41,830
probably want to configure your

00:16:40,030 --> 00:16:44,320
placeholder components you want to

00:16:41,830 --> 00:16:46,840
configure holding your error components

00:16:44,320 --> 00:16:48,760
you just put it in the resource or you

00:16:46,840 --> 00:16:52,660
can configure it globally you want to

00:16:48,760 --> 00:16:54,310
configure your your resource to be

00:16:52,660 --> 00:16:56,410
cached you just tell it to cache for

00:16:54,310 --> 00:16:58,930
some time you can tell it to poll

00:16:56,410 --> 00:17:01,060
regularly you can even define initial

00:16:58,930 --> 00:17:04,360
data which helps you with server-side

00:17:01,060 --> 00:17:06,720
rendering where the fetches themselves

00:17:04,360 --> 00:17:09,730
don't happen

00:17:06,720 --> 00:17:12,130
remember that cache that none of us if

00:17:09,730 --> 00:17:15,070
we are horrible programmers are not

00:17:12,130 --> 00:17:17,470
handling by default we will interpret

00:17:15,070 --> 00:17:20,560
this as a failing Network and what we do

00:17:17,470 --> 00:17:23,650
we will simply try to refresh a couple

00:17:20,560 --> 00:17:25,930
times you can configure this you can opt

00:17:23,650 --> 00:17:28,990
out of this this is a great convenience

00:17:25,930 --> 00:17:31,570
out-of-the-box if you are working with

00:17:28,990 --> 00:17:34,270
an app for mobile users because mobile

00:17:31,570 --> 00:17:37,150
networks tend to fail and sometimes it

00:17:34,270 --> 00:17:38,890
only needs all you need is to just

00:17:37,150 --> 00:17:42,520
refresh a couple of times and the

00:17:38,890 --> 00:17:45,070
results will arrive furthermore you

00:17:42,520 --> 00:17:47,470
might need to eagerly freak out some of

00:17:45,070 --> 00:17:49,810
the data you have your article you have

00:17:47,470 --> 00:17:51,370
your comment section you don't need to

00:17:49,810 --> 00:17:53,440
display the comment section right away

00:17:51,370 --> 00:17:56,049
but you want it to be ready

00:17:53,440 --> 00:17:57,549
and you can easily define data that

00:17:56,049 --> 00:18:00,480
should be pre-welded this way and

00:17:57,549 --> 00:18:03,220
moreover this data will not block your

00:18:00,480 --> 00:18:05,590
loads of the resources that are

00:18:03,220 --> 00:18:07,690
necessary for your up to display this

00:18:05,590 --> 00:18:12,809
will happen first and once those are

00:18:07,690 --> 00:18:16,269
ready you will get your eager pre old

00:18:12,809 --> 00:18:19,690
alright and we were talking about a lot

00:18:16,269 --> 00:18:21,759
of data fetching and REST API but this

00:18:19,690 --> 00:18:24,039
abstraction does not care it works

00:18:21,759 --> 00:18:26,860
perfectly well with any kind of a

00:18:24,039 --> 00:18:29,679
synchronous data so if you are working

00:18:26,860 --> 00:18:33,009
on reg native for example handling a lot

00:18:29,679 --> 00:18:35,830
of the mobile api's which tends to be a

00:18:33,009 --> 00:18:40,230
synchronous you can use this just as

00:18:35,830 --> 00:18:40,230
well to get the data into your component

00:18:41,279 --> 00:18:48,789
alright and finally we've talked about

00:18:44,769 --> 00:18:50,620
this being completely oblivious or not

00:18:48,789 --> 00:18:52,600
caring about the state management that

00:18:50,620 --> 00:18:55,269
you use that is true you can plug in

00:18:52,600 --> 00:18:58,210
whatever state that you like but we are

00:18:55,269 --> 00:19:01,000
using redux a lot so it comes with a

00:18:58,210 --> 00:19:03,399
bunch of conveniences while you are

00:19:01,000 --> 00:19:05,980
using Redux for example in your own data

00:19:03,399 --> 00:19:08,379
you will usually want to put the data

00:19:05,980 --> 00:19:10,509
you have received into the store so we

00:19:08,379 --> 00:19:13,960
provide me with a dispatch out of

00:19:10,509 --> 00:19:16,299
context so well we take it out of the

00:19:13,960 --> 00:19:22,509
country Act context so that you can use

00:19:16,299 --> 00:19:24,220
it and this works really well with Redux

00:19:22,509 --> 00:19:26,019
is model of containers if you are

00:19:24,220 --> 00:19:29,279
writing redux you've probably heard

00:19:26,019 --> 00:19:31,450
about this model where you put your

00:19:29,279 --> 00:19:33,429
presentational components into one file

00:19:31,450 --> 00:19:35,320
and your container files into the other

00:19:33,429 --> 00:19:37,690
file the container the container

00:19:35,320 --> 00:19:41,289
component the container component takes

00:19:37,690 --> 00:19:44,409
care of connecting your components to

00:19:41,289 --> 00:19:46,450
the state and this all works well unless

00:19:44,409 --> 00:19:49,509
you are connecting to some parts of sate

00:19:46,450 --> 00:19:51,879
that first needs to be fetched from the

00:19:49,509 --> 00:19:54,940
internet but it is a problem no more

00:19:51,879 --> 00:19:58,360
because redundancy is not a problem in

00:19:54,940 --> 00:20:00,669
this model so we can just wrap every

00:19:58,360 --> 00:20:03,669
connect we have in the application every

00:20:00,669 --> 00:20:05,740
connect that is connecting two parts

00:20:03,669 --> 00:20:06,919
that first need to be received from the

00:20:05,740 --> 00:20:09,590
Internet

00:20:06,919 --> 00:20:11,419
repeat with with data providers and we

00:20:09,590 --> 00:20:13,519
can be sure that at the time that these

00:20:11,419 --> 00:20:16,279
connect happens you might have some

00:20:13,519 --> 00:20:18,799
complex selectors in there that may fail

00:20:16,279 --> 00:20:20,899
in various ways that all the data that

00:20:18,799 --> 00:20:25,100
you actually need for the selectors to

00:20:20,899 --> 00:20:29,869
happen and to work we will be there will

00:20:25,100 --> 00:20:32,359
be available moreover we have now

00:20:29,869 --> 00:20:34,489
abstracted a bunch of logic away from

00:20:32,359 --> 00:20:37,999
the presentational component and we can

00:20:34,489 --> 00:20:40,220
reuse it across wide scale of other

00:20:37,999 --> 00:20:42,350
components and it does not really matter

00:20:40,220 --> 00:20:44,869
if they are on the same platform we can

00:20:42,350 --> 00:20:47,480
easily reuse them between react and

00:20:44,869 --> 00:20:49,759
react native and this is again something

00:20:47,480 --> 00:20:52,399
super strong that we are already using

00:20:49,759 --> 00:20:56,090
and that we are super happy about it

00:20:52,399 --> 00:21:02,059
lets us skip a lot of writing when we

00:20:56,090 --> 00:21:04,809
can do this all right we are approaching

00:21:02,059 --> 00:21:06,980
the end so first off this is not

00:21:04,809 --> 00:21:09,679
something of course we have written it

00:21:06,980 --> 00:21:11,840
to solve the problems we were solving in

00:21:09,679 --> 00:21:14,809
the company but it's also not something

00:21:11,840 --> 00:21:17,149
we wanted to keep in the back office in

00:21:14,809 --> 00:21:20,330
fact it is being used in production

00:21:17,149 --> 00:21:23,330
already today and again that is a bit

00:21:20,330 --> 00:21:26,509
unfortunate but there is a page called

00:21:23,330 --> 00:21:28,940
very near digital which is a Slovak page

00:21:26,509 --> 00:21:30,889
and it's something I want to plug bit is

00:21:28,940 --> 00:21:33,350
because it's a really cool open source

00:21:30,889 --> 00:21:36,309
project we there honor to participate on

00:21:33,350 --> 00:21:39,799
it is a project that lets you easily

00:21:36,309 --> 00:21:42,049
search and browse public data about

00:21:39,799 --> 00:21:45,019
government officials politicians and

00:21:42,049 --> 00:21:47,960
companies in Slovakia and it is rooted

00:21:45,019 --> 00:21:49,759
rated a tool like this exists and if you

00:21:47,960 --> 00:21:53,059
are interested in that kind of field

00:21:49,759 --> 00:21:55,609
certain will check it out so we very

00:21:53,059 --> 00:21:57,950
glad to cooperate on it and if you visit

00:21:55,609 --> 00:22:00,169
the page every piece of data fetching in

00:21:57,950 --> 00:22:02,600
there every piece of asynchronous data

00:22:00,169 --> 00:22:05,330
handling in there is written using data

00:22:02,600 --> 00:22:08,080
providers and it works pretty well and

00:22:05,330 --> 00:22:11,690
it was really fun writing the app it's

00:22:08,080 --> 00:22:14,389
unburdened us a lot to do this so of

00:22:11,690 --> 00:22:17,210
course the library is ready it's open

00:22:14,389 --> 00:22:19,429
source on github we will be happy for

00:22:17,210 --> 00:22:20,840
any comments and pro requests and really

00:22:19,429 --> 00:22:23,059
we will be happy

00:22:20,840 --> 00:22:26,630
if you provide us with any kind of

00:22:23,059 --> 00:22:30,559
feedback because this asynchronous data

00:22:26,630 --> 00:22:32,419
thing is a hard problem indeed and even

00:22:30,559 --> 00:22:35,059
if the feedback is that this kind of

00:22:32,419 --> 00:22:37,820
abstraction does not work for you at all

00:22:35,059 --> 00:22:39,919
we would have to hear it because this is

00:22:37,820 --> 00:22:42,409
something we could improve on as a real

00:22:39,919 --> 00:22:44,360
community and we can only do this

00:22:42,409 --> 00:22:48,020
together we can only do this by sharing

00:22:44,360 --> 00:22:50,570
ideas so even if it turns out that this

00:22:48,020 --> 00:22:52,789
is not the way to go we would love to

00:22:50,570 --> 00:22:55,370
build on each other's ideas towards

00:22:52,789 --> 00:22:59,990
something that would be easy to use and

00:22:55,370 --> 00:23:00,370
convenient for all of us so to wrap this

00:22:59,990 --> 00:23:04,909
up

00:23:00,370 --> 00:23:08,240
the main point main points first off its

00:23:04,909 --> 00:23:11,330
not graph QL or Die you can write nice

00:23:08,240 --> 00:23:13,580
api's nice abstractions today with the

00:23:11,330 --> 00:23:16,010
rest as architecture that's just fine

00:23:13,580 --> 00:23:18,320
graph QL provides you with a lot of nice

00:23:16,010 --> 00:23:20,630
stuff but you don't need to switch

00:23:18,320 --> 00:23:25,730
technologies only to arrive at the color

00:23:20,630 --> 00:23:28,309
code second of the key points at least

00:23:25,730 --> 00:23:30,830
in my opinion in abstracting the

00:23:28,309 --> 00:23:33,350
asynchronous data fetching are first off

00:23:30,830 --> 00:23:34,970
to keep the presentational components

00:23:33,350 --> 00:23:36,529
and state management completely

00:23:34,970 --> 00:23:39,260
oblivious to the fact that this is

00:23:36,529 --> 00:23:42,020
happening and second off to be able to

00:23:39,260 --> 00:23:44,480
define the data that is needed directly

00:23:42,020 --> 00:23:47,240
on the presentational components but to

00:23:44,480 --> 00:23:50,929
handle the acquisition somewhere else

00:23:47,240 --> 00:23:53,539
somewhere in the background and finally

00:23:50,929 --> 00:23:56,899
on top of these abstractions we have

00:23:53,539 --> 00:24:01,309
built a library we will be super excited

00:23:56,899 --> 00:24:04,070
if you check it out with that thank you

00:24:01,309 --> 00:24:07,850
for your attention the link to github is

00:24:04,070 --> 00:24:11,390
there the slides are on convenient -

00:24:07,850 --> 00:24:14,120
data - fetching dot now dot SH and if

00:24:11,390 --> 00:24:15,710
you are interested about how it is used

00:24:14,120 --> 00:24:20,649
where it is use you can check out

00:24:15,710 --> 00:24:20,649
viremia dot digital thank you

00:24:26,430 --> 00:24:32,740
thanks Martin

00:24:28,680 --> 00:24:37,240
give it a great poem at the end of the

00:24:32,740 --> 00:24:39,850
talk sometimes we go crazy we are I mean

00:24:37,240 --> 00:24:42,270
I'm a big fan of Graff quail myself but

00:24:39,850 --> 00:24:44,740
some people just take it without any

00:24:42,270 --> 00:24:46,810
reasoning behind and it's a little bit

00:24:44,740 --> 00:24:49,060
dangerous sometime and it's good to see

00:24:46,810 --> 00:24:51,490
some examples of applying some of the

00:24:49,060 --> 00:24:54,130
same techniques but without bringing the

00:24:51,490 --> 00:24:56,080
whole stack so that that was awesome

00:24:54,130 --> 00:24:58,390
in fact I'm also a big fan of graph QL

00:24:56,080 --> 00:24:59,920
it's just that it might not always be

00:24:58,390 --> 00:25:03,160
option might not always be the right

00:24:59,920 --> 00:25:06,280
option so it's great to have options

00:25:03,160 --> 00:25:09,820
also they're cool so let's take let's

00:25:06,280 --> 00:25:11,860
take one question right see what we have

00:25:09,820 --> 00:25:13,690
so we have this why would you choose

00:25:11,860 --> 00:25:16,540
hire the components of our query

00:25:13,690 --> 00:25:19,300
components okay so this was because as

00:25:16,540 --> 00:25:22,390
mentioned this started off by solving

00:25:19,300 --> 00:25:25,720
problems we were using we were we've had

00:25:22,390 --> 00:25:28,270
in the company and we were using a lot

00:25:25,720 --> 00:25:31,120
of state management's and it might be

00:25:28,270 --> 00:25:33,520
really hard to synchronize the remote

00:25:31,120 --> 00:25:36,370
data with your state manager if you are

00:25:33,520 --> 00:25:38,110
doing it as I assume that something like

00:25:36,370 --> 00:25:41,530
very components something like at all

00:25:38,110 --> 00:25:44,080
the render probes and also since we were

00:25:41,530 --> 00:25:47,020
already using react a lot of how it's

00:25:44,080 --> 00:25:49,480
done is modeled after how react react

00:25:47,020 --> 00:25:51,790
I'm sorry Redux yeah a lot of it is

00:25:49,480 --> 00:25:54,610
modeled after how Redux is doing bit so

00:25:51,790 --> 00:25:56,830
just like you have to connect what is

00:25:54,610 --> 00:25:58,810
with data providers is essentially a

00:25:56,830 --> 00:26:02,140
remote connect a connect to remote

00:25:58,810 --> 00:26:03,850
resources if you would say that's the

00:26:02,140 --> 00:26:06,370
that's the reasoning behind this kind of

00:26:03,850 --> 00:26:10,420
abstraction but of course hooks books

00:26:06,370 --> 00:26:12,340
are great cooks will be great cool we we

00:26:10,420 --> 00:26:14,680
have time for a couple more questions so

00:26:12,340 --> 00:26:18,670
what about using connecting read acts

00:26:14,680 --> 00:26:22,090
saga so we are using redirects saga I'm

00:26:18,670 --> 00:26:24,850
afraid I not really qualified to answer

00:26:22,090 --> 00:26:25,270
this because I haven't ever used Redux

00:26:24,850 --> 00:26:29,950
acha

00:26:25,270 --> 00:26:32,540
but overall we have many times we have

00:26:29,950 --> 00:26:35,240
abstracted this logic into

00:26:32,540 --> 00:26:38,210
something Redux based and what I feel is

00:26:35,240 --> 00:26:41,000
that just like beforehand we were

00:26:38,210 --> 00:26:43,400
untangling the fetching logic with the

00:26:41,000 --> 00:26:46,100
presentation component logic this is

00:26:43,400 --> 00:26:49,640
just putting together the state handling

00:26:46,100 --> 00:26:52,670
logic with the data fetching logic and I

00:26:49,640 --> 00:26:55,010
feel those are still different domains

00:26:52,670 --> 00:26:58,220
and they should be kept apart and only

00:26:55,010 --> 00:27:01,520
communicate between each other so but

00:26:58,220 --> 00:27:02,780
I've never used Redux agha that's that's

00:27:01,520 --> 00:27:05,240
the disclaimer there

00:27:02,780 --> 00:27:07,700
oh that looks that looks cool well

00:27:05,240 --> 00:27:09,880
thanks for your answer here let's take

00:27:07,700 --> 00:27:12,610
the last question so would you say the

00:27:09,880 --> 00:27:15,470
upcoming suspense and react cache

00:27:12,610 --> 00:27:18,140
features make some of these strategies

00:27:15,470 --> 00:27:20,480
unnecessary or they will still be useful

00:27:18,140 --> 00:27:23,180
yeah so we were thinking about this a

00:27:20,480 --> 00:27:26,090
lot actually and we feel that yeah react

00:27:23,180 --> 00:27:29,450
suspense and react cache make a lot of

00:27:26,090 --> 00:27:32,060
the straightforward like the the very

00:27:29,450 --> 00:27:34,340
basic pattern is now made much easier

00:27:32,060 --> 00:27:38,600
it's much easier than the original

00:27:34,340 --> 00:27:40,850
fetching pattern but still this is I

00:27:38,600 --> 00:27:43,790
feel that library like this or

00:27:40,850 --> 00:27:47,540
abstraction like this is build like one

00:27:43,790 --> 00:27:49,550
level higher so something like reacts

00:27:47,540 --> 00:27:52,820
cache and suspense would for example

00:27:49,550 --> 00:27:55,580
allow us to write what is done in this

00:27:52,820 --> 00:27:59,470
library in much more straightforward way

00:27:55,580 --> 00:28:01,700
but the features that this brings the

00:27:59,470 --> 00:28:04,580
abstraction that this brings and also

00:28:01,700 --> 00:28:07,340
the conveniences with caching and

00:28:04,580 --> 00:28:10,370
polling and the management of this is

00:28:07,340 --> 00:28:12,740
still something a bit stronger than what

00:28:10,370 --> 00:28:15,470
husbands and react cache brings you out

00:28:12,740 --> 00:28:17,810
of the box awesome well thank you again

00:28:15,470 --> 00:28:19,370
Martin of course if you have more

00:28:17,810 --> 00:28:22,040
questions and you want to reach to

00:28:19,370 --> 00:28:22,790
Martine he will be happy to answer your

00:28:22,040 --> 00:28:24,770
questions

00:28:22,790 --> 00:28:27,110
yeah also I'll be hanging around the

00:28:24,770 --> 00:28:29,210
back Hume WAPs stands throughout the

00:28:27,110 --> 00:28:31,520
most of the day so you can catch me now

00:28:29,210 --> 00:28:33,890
or catch me later there ok thank you

00:28:31,520 --> 00:28:35,950
thank you again

00:28:33,890 --> 00:28:35,950

YouTube URL: https://www.youtube.com/watch?v=iEIwTiPQY3g


