Title: ReactiveConf 2018 - Gleb Bahmutov: End-to-end Testing Is Hard - But It Doesn't Have to Be
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
End-to-end Testing Is Hard - But It Doesn't Have to Be

Cypress.io is an open source free end-to-end test runner that runs your web application inside an iframe in a browser it can closely control. This architecture completely changes how your tests behave (hint: no flake), what you can test (pretty much everything), and why you write more e2e tests (because you love writing them). In this talk, I will give a very brief intro into Cypress itself but mostly will concentrate on how it changes the entire testing experience. Cypress users can test web applications by observing just the external behavior (DOM, network calls, storage) or can reach deep inside the application's code, and I will explain the trade-offs. Finally, I will discuss why Cypress tests do not use "async / await" keywords, and instead look like declarative reactive streams.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,320 --> 00:00:18,119
all right and to end testing is hard but

00:00:15,900 --> 00:00:19,860
it doesn't have to be I'm glad I caught

00:00:18,119 --> 00:00:22,289
up and I'm here to talk about how you

00:00:19,860 --> 00:00:25,050
can test your web apps or websites

00:00:22,289 --> 00:00:27,150
easier because I know some of you hate

00:00:25,050 --> 00:00:29,939
you know testing web applications and

00:00:27,150 --> 00:00:32,369
some of you love web application testing

00:00:29,939 --> 00:00:35,280
and this presentations for both of you

00:00:32,369 --> 00:00:37,650
so you can find me online everywhere and

00:00:35,280 --> 00:00:39,150
it's Liars that come / Bachmann tough

00:00:37,650 --> 00:00:42,120
you'll find this particular set of

00:00:39,150 --> 00:00:42,540
slides so yes I work at Cypress that I

00:00:42,120 --> 00:00:44,309
own

00:00:42,540 --> 00:00:46,320
I've been a happy user for a year and

00:00:44,309 --> 00:00:49,650
then I joined the company and I've been

00:00:46,320 --> 00:00:52,710
better for a year and a half so what is

00:00:49,650 --> 00:00:58,530
Cypress let me quickly show its electron

00:00:52,710 --> 00:01:00,900
based app that can run your app I framed

00:00:58,530 --> 00:01:03,659
right here on the right it's a real

00:01:00,900 --> 00:01:05,460
application you can control it but you

00:01:03,659 --> 00:01:07,710
also see all the commands with the test

00:01:05,460 --> 00:01:10,259
ran you have a time-traveling debugger

00:01:07,710 --> 00:01:12,450
you can go back and like see what the

00:01:10,259 --> 00:01:15,659
app did you can stop networking and so

00:01:12,450 --> 00:01:17,100
on so it's pretty useful app and it's so

00:01:15,659 --> 00:01:20,189
useful but it was actually introduced

00:01:17,100 --> 00:01:23,070
here at reactive conf two years ago in

00:01:20,189 --> 00:01:25,590
Bratislava so this guy is Brian man who

00:01:23,070 --> 00:01:30,359
actually wrote Cyprus I just work on it

00:01:25,590 --> 00:01:33,749
and you know this this was two years ago

00:01:30,359 --> 00:01:35,939
and what has changed in two years well

00:01:33,749 --> 00:01:38,609
exactly one year ago we went open-source

00:01:35,939 --> 00:01:40,740
so everything I'm showing here is

00:01:38,609 --> 00:01:42,229
completely open-source MIT license you

00:01:40,740 --> 00:01:44,640
don't have to pay anything

00:01:42,229 --> 00:01:47,399
as a company we were working on the tool

00:01:44,640 --> 00:01:49,350
itself we're working on a Docs we don't

00:01:47,399 --> 00:01:51,840
limit you in any way so it's really nice

00:01:49,350 --> 00:01:54,600
tool and you can kind of tell but right

00:01:51,840 --> 00:01:57,509
about here we open-source the whole

00:01:54,600 --> 00:02:00,329
thing so now is gaining popularity right

00:01:57,509 --> 00:02:02,280
it's gaining stars even this graph is

00:02:00,329 --> 00:02:05,639
out of date a little bit because we

00:02:02,280 --> 00:02:07,590
actually got more popular and as a

00:02:05,639 --> 00:02:09,810
company we're working on things but go

00:02:07,590 --> 00:02:12,270
beyond like running tests locally or on

00:02:09,810 --> 00:02:14,280
CI a single time right we're working on

00:02:12,270 --> 00:02:16,590
services where you can record things and

00:02:14,280 --> 00:02:18,600
you can load balance all your tests and

00:02:16,590 --> 00:02:20,700
all the things but really require by

00:02:18,600 --> 00:02:24,570
of test runs and not a single test run

00:02:20,700 --> 00:02:26,310
so in this talk I'm gonna talk about not

00:02:24,570 --> 00:02:28,530
about the Cypress is a tool but about

00:02:26,310 --> 00:02:30,330
some architectural decisions but we have

00:02:28,530 --> 00:02:32,670
made but might be you know kind of hard

00:02:30,330 --> 00:02:35,010
to grasp and usually I becoming

00:02:32,670 --> 00:02:37,730
obstacles to people using Cypress and

00:02:35,010 --> 00:02:40,290
maybe become kind of hard to understand

00:02:37,730 --> 00:02:44,220
so first thing I want to show our

00:02:40,290 --> 00:02:48,780
command retries so actually the best

00:02:44,220 --> 00:02:51,410
thing is just to show it live so I have

00:02:48,780 --> 00:02:54,120
a test right I'm selecting an element

00:02:51,410 --> 00:02:56,340
with a selector and when I'm typing just

00:02:54,120 --> 00:02:58,260
like a user types and when I'm typing

00:02:56,340 --> 00:03:01,110
again and pressing enter so I'm really

00:02:58,260 --> 00:03:02,970
adding for to-do items and when I'm

00:03:01,110 --> 00:03:06,990
making an assertion with ver I really

00:03:02,970 --> 00:03:10,560
for to-do items in in this list so again

00:03:06,990 --> 00:03:13,170
if I rerun this it types and really

00:03:10,560 --> 00:03:15,920
there are four items in a list excellent

00:03:13,170 --> 00:03:20,280
but what happens if for example my

00:03:15,920 --> 00:03:24,450
assertion is wrong what if I added four

00:03:20,280 --> 00:03:26,250
items but it really expected only two so

00:03:24,450 --> 00:03:28,710
the test fails but it doesn't fail

00:03:26,250 --> 00:03:30,750
immediately notice but it actually spins

00:03:28,710 --> 00:03:35,580
for a couple seconds and when it says

00:03:30,750 --> 00:03:39,450
hey I expected two items but there were

00:03:35,580 --> 00:03:43,350
four so what's happening there well this

00:03:39,450 --> 00:03:45,330
get is a command I'm saying get me all

00:03:43,350 --> 00:03:48,510
the items that match with selector and

00:03:45,330 --> 00:03:51,420
should have length two is is an

00:03:48,510 --> 00:03:53,850
assertion and what cyprus does under the

00:03:51,420 --> 00:03:56,430
hood it actually reruns the previous

00:03:53,850 --> 00:04:00,030
command the last command until the

00:03:56,430 --> 00:04:01,920
assertion passes all times out and we

00:04:00,030 --> 00:04:04,890
can see it much better if we actually

00:04:01,920 --> 00:04:09,150
control this assertion and we said

00:04:04,890 --> 00:04:10,770
something really really long notice it

00:04:09,150 --> 00:04:14,180
just keeps spinning and spinning and

00:04:10,770 --> 00:04:17,060
spinning constantly selecting items

00:04:14,180 --> 00:04:20,040
checking if there are two items failing

00:04:17,060 --> 00:04:21,740
selecting items again failing selecting

00:04:20,040 --> 00:04:24,420
items again and so on and so on and

00:04:21,740 --> 00:04:29,100
because this is live application these

00:04:24,420 --> 00:04:30,870
three tries can be helped so now it

00:04:29,100 --> 00:04:32,340
actually found three items but it's

00:04:30,870 --> 00:04:35,100
looking for two so it keeps

00:04:32,340 --> 00:04:37,770
and reevaluate in the command hoping

00:04:35,100 --> 00:04:41,970
with the source new path so if I delete

00:04:37,770 --> 00:04:43,949
one item but as passes so this command

00:04:41,970 --> 00:04:46,380
retries are built into every command in

00:04:43,949 --> 00:04:49,380
Cyprus because the web is asynchronous

00:04:46,380 --> 00:04:50,760
nothing happens when you expect it we

00:04:49,380 --> 00:04:53,610
had to build this logic into every

00:04:50,760 --> 00:04:57,600
command because we really want it you

00:04:53,610 --> 00:04:59,729
know for web applications not to fail so

00:04:57,600 --> 00:05:01,410
again we have a command and we have an

00:04:59,729 --> 00:05:05,310
assertion and every command will be

00:05:01,410 --> 00:05:07,169
retried we have timeouts for every

00:05:05,310 --> 00:05:10,169
command which had defaults we have

00:05:07,169 --> 00:05:13,950
timeouts for you know page to load for

00:05:10,169 --> 00:05:16,050
Network requests to return something but

00:05:13,950 --> 00:05:21,360
here's a question which command is the

00:05:16,050 --> 00:05:25,410
last one right because what happens is

00:05:21,360 --> 00:05:29,310
that what if you select a list first so

00:05:25,410 --> 00:05:33,870
you get a list element and then you

00:05:29,310 --> 00:05:35,490
select Ally elements so you say find a

00:05:33,870 --> 00:05:38,039
la element so now you get a reference to

00:05:35,490 --> 00:05:41,610
both Ally elements and then you say well

00:05:38,039 --> 00:05:44,490
there should be two Ally elements last

00:05:41,610 --> 00:05:47,550
command assertion so if something goes

00:05:44,490 --> 00:05:51,150
wrong it will be retried but only the

00:05:47,550 --> 00:05:52,860
last command not the whole chain and so

00:05:51,150 --> 00:05:55,650
what happens liquid sometimes you react

00:05:52,860 --> 00:05:57,960
it renders the whole thing if something

00:05:55,650 --> 00:05:59,700
changes so now your reference is

00:05:57,960 --> 00:06:02,639
actually stale reference and you keep

00:05:59,700 --> 00:06:05,340
retrying but the app is actually doing

00:06:02,639 --> 00:06:07,289
something else well luckily it's really

00:06:05,340 --> 00:06:08,970
easy to fix you just combine your

00:06:07,289 --> 00:06:11,370
selectors you don't work in steps you

00:06:08,970 --> 00:06:15,510
make the command actually more

00:06:11,370 --> 00:06:19,200
meaningful similarly you can actually

00:06:15,510 --> 00:06:21,419
expose during tests your app code right

00:06:19,200 --> 00:06:23,220
by setting a global variable and then

00:06:21,419 --> 00:06:25,139
it's really easy from Cyprus because it

00:06:23,220 --> 00:06:28,139
runs right next to a code it runs in a

00:06:25,139 --> 00:06:31,169
browser your app is just iframe next to

00:06:28,139 --> 00:06:34,940
it you can point the Cyprus test at a

00:06:31,169 --> 00:06:38,700
window grab the app global variable grab

00:06:34,940 --> 00:06:41,490
store no dollar store property grab each

00:06:38,700 --> 00:06:43,620
property items and you assume that there

00:06:41,490 --> 00:06:45,689
should be a check but there are really

00:06:43,620 --> 00:06:48,059
two items in that list

00:06:45,689 --> 00:06:51,839
but you see how you kind of nested those

00:06:48,059 --> 00:06:54,329
things and you only gonna retry the last

00:06:51,839 --> 00:06:56,759
one but maybe the app isn't ready yet

00:06:54,329 --> 00:06:58,589
maybe the store has been overwritten

00:06:56,759 --> 00:07:00,899
maybe the store hasn't been initialized

00:06:58,589 --> 00:07:03,569
yet if you grab the reference too early

00:07:00,899 --> 00:07:05,429
you never gonna retry that particular

00:07:03,569 --> 00:07:08,399
command you're only gonna keep searching

00:07:05,429 --> 00:07:11,309
for items in an object with no longer

00:07:08,399 --> 00:07:14,129
valid so luckily we implement bunch of

00:07:11,309 --> 00:07:17,579
things like getting a deeply nested

00:07:14,129 --> 00:07:20,459
property using lodash get so you get the

00:07:17,579 --> 00:07:22,319
whole thing in one shot so no matter

00:07:20,459 --> 00:07:23,879
when you app is initialized no matter

00:07:22,319 --> 00:07:26,039
when your state is initialized

00:07:23,879 --> 00:07:29,009
you're gonna rerun the whole thing the

00:07:26,039 --> 00:07:32,819
whole getter and really check for items

00:07:29,009 --> 00:07:35,099
without getting a stale reference but

00:07:32,819 --> 00:07:36,719
then where is the problem what if you

00:07:35,099 --> 00:07:39,659
don't use our commands and you implement

00:07:36,719 --> 00:07:43,219
your own callback using them right so

00:07:39,659 --> 00:07:45,869
you get something with a custom logic

00:07:43,219 --> 00:07:48,899
you really want to return a promise make

00:07:45,869 --> 00:07:50,909
it asynchronous callback but in that

00:07:48,899 --> 00:07:52,499
case we don't retry it because we don't

00:07:50,909 --> 00:07:54,269
know what you're doing inside then are

00:07:52,499 --> 00:07:57,059
we allowed to retry it or maybe you're

00:07:54,269 --> 00:07:59,279
doing something destructive but it's

00:07:57,059 --> 00:08:02,909
really easy if you have a promise

00:07:59,279 --> 00:08:05,729
returning logic like throwing a dice to

00:08:02,909 --> 00:08:08,089
bring completely third party library but

00:08:05,729 --> 00:08:10,499
can retry promise returning function

00:08:08,089 --> 00:08:14,849
based with parameters like retry it

00:08:10,499 --> 00:08:18,179
every 100 milliseconds using over shelf

00:08:14,849 --> 00:08:20,429
retry logic and then you can put it

00:08:18,179 --> 00:08:22,349
inside Cypress test and now we're not

00:08:20,429 --> 00:08:25,499
retrying it but you are trying your own

00:08:22,349 --> 00:08:27,719
call back on your own terms and it's

00:08:25,499 --> 00:08:30,029
easy to do you can even bring logic from

00:08:27,719 --> 00:08:31,979
other testing tools like big tests so

00:08:30,029 --> 00:08:34,649
big test has this nice utility called

00:08:31,979 --> 00:08:36,479
convergence where it's easy to define

00:08:34,649 --> 00:08:38,639
like rerun this function until it

00:08:36,479 --> 00:08:41,430
stabilizes and gives me a passing

00:08:38,639 --> 00:08:45,449
condition and you can usually put that

00:08:41,430 --> 00:08:50,069
logic inside the Cypress test to do your

00:08:45,449 --> 00:08:53,939
own retries so I think with design

00:08:50,069 --> 00:08:56,790
between making every command retrial by

00:08:53,939 --> 00:08:58,480
default is for end to end is a crucial

00:08:56,790 --> 00:09:01,269
decision

00:08:58,480 --> 00:09:03,100
otherwise you run a test and things are

00:09:01,269 --> 00:09:05,380
never ready when you think they're ready

00:09:03,100 --> 00:09:07,660
and you always have to hard-code you

00:09:05,380 --> 00:09:10,209
know wait for 30 seconds just to be sure

00:09:07,660 --> 00:09:15,250
with this Vitesse confront as fast as

00:09:10,209 --> 00:09:17,680
possible without unnecessary weights but

00:09:15,250 --> 00:09:19,180
how did it feel right if you're writing

00:09:17,680 --> 00:09:22,930
end-to-end tests with cyprus if you have

00:09:19,180 --> 00:09:25,720
just starting a bit so your application

00:09:22,930 --> 00:09:27,820
runs inside an iframe right next to your

00:09:25,720 --> 00:09:31,839
tests your tests are actually running in

00:09:27,820 --> 00:09:34,269
a real browser I feel like this I feel

00:09:31,839 --> 00:09:36,579
I'm not working with black box I can

00:09:34,269 --> 00:09:40,420
observe the object I'm manipulating

00:09:36,579 --> 00:09:43,510
through a glass I'm well protected right

00:09:40,420 --> 00:09:47,250
because the tests right can seep a code

00:09:43,510 --> 00:09:50,709
but the app has no idea what's going on

00:09:47,250 --> 00:09:52,990
and if you ever been to a lab but has

00:09:50,709 --> 00:09:54,250
was like gloves there once we turn them

00:09:52,990 --> 00:09:58,269
off we're like really fine you can

00:09:54,250 --> 00:10:01,209
high-five them all okay when I'm testing

00:09:58,269 --> 00:10:05,079
application in Cyprus and to an test

00:10:01,209 --> 00:10:06,850
operate the app through a Dom right

00:10:05,079 --> 00:10:09,519
nothing is framework specific we're only

00:10:06,850 --> 00:10:12,040
using well-documented

00:10:09,519 --> 00:10:16,870
stable browser API like Dom Network

00:10:12,040 --> 00:10:19,779
local storage index DB cookies which

00:10:16,870 --> 00:10:21,760
means Cyprus is framework agnostic it

00:10:19,779 --> 00:10:25,750
doesn't it doesn't care if you're

00:10:21,760 --> 00:10:27,639
running elm closer view app react app it

00:10:25,750 --> 00:10:30,130
only goes through public api's but not

00:10:27,639 --> 00:10:32,199
probably will not change which means

00:10:30,130 --> 00:10:34,959
that if you write your end-to-end tests

00:10:32,199 --> 00:10:36,399
once you can change the implementation

00:10:34,959 --> 00:10:38,829
under the hood without breaking anything

00:10:36,399 --> 00:10:40,569
so if you have a GSP application but you

00:10:38,829 --> 00:10:42,730
always want to rewrite but nobody wrote

00:10:40,569 --> 00:10:45,370
end-to-end test for it well you can quit

00:10:42,730 --> 00:10:47,889
it fro end-to-end tests rewrite the

00:10:45,370 --> 00:10:49,750
whole thing to be modern stack and no

00:10:47,889 --> 00:10:54,610
one will know because you've never

00:10:49,750 --> 00:10:57,279
broken engine and end-to-end tests but

00:10:54,610 --> 00:10:58,750
that's fine for browser API is because

00:10:57,279 --> 00:11:01,870
the tests run in a browser but what

00:10:58,750 --> 00:11:04,180
about the rest of a system how do you

00:11:01,870 --> 00:11:05,889
test actually check but database has

00:11:04,180 --> 00:11:08,050
been updated correctly or your file

00:11:05,889 --> 00:11:11,050
system has been updated correctly other

00:11:08,050 --> 00:11:11,980
frameworks they run in know directly so

00:11:11,050 --> 00:11:14,110
they can have full

00:11:11,980 --> 00:11:16,510
access to a file system to the databases

00:11:14,110 --> 00:11:19,960
without doing anything because there are

00:11:16,510 --> 00:11:22,150
none note so we implemented a way for

00:11:19,960 --> 00:11:23,980
your browser test to jump back to an old

00:11:22,150 --> 00:11:26,230
context and it's called site tasks

00:11:23,980 --> 00:11:28,240
inside the browser you have site test

00:11:26,230 --> 00:11:30,400
command you say the name of a task for

00:11:28,240 --> 00:11:33,760
you wanna run and you pass arguments and

00:11:30,400 --> 00:11:36,220
it goes to the node backend with Cypress

00:11:33,760 --> 00:11:38,950
running and where you register a

00:11:36,220 --> 00:11:41,590
callback by name and then you know you

00:11:38,950 --> 00:11:44,310
compute an return result back to your

00:11:41,590 --> 00:11:46,990
test of a task and pass fail or continue

00:11:44,310 --> 00:11:50,500
so it looks like this imagine you

00:11:46,990 --> 00:11:52,780
modifying your adding and you to do you

00:11:50,500 --> 00:11:55,150
go through a dumb but then you want to

00:11:52,780 --> 00:11:58,180
check if but database actually has saved

00:11:55,150 --> 00:11:59,830
when you record all the way for your

00:11:58,180 --> 00:12:01,510
application stack all the way to the

00:11:59,830 --> 00:12:04,120
database you really want to check what

00:12:01,510 --> 00:12:06,970
database so you say site ask in the name

00:12:04,120 --> 00:12:10,210
of a task and inside the node backend

00:12:06,970 --> 00:12:15,000
code but you can add to Cypress you have

00:12:10,210 --> 00:12:15,000
just a van callback in this case tasks

00:12:15,090 --> 00:12:20,080
and it kind of looks like within a

00:12:17,170 --> 00:12:21,970
terminal the spinner spins until the

00:12:20,080 --> 00:12:24,160
database actually gets updated you can

00:12:21,970 --> 00:12:26,560
use your retry logic but I described

00:12:24,160 --> 00:12:29,020
before and as soon as we record is saved

00:12:26,560 --> 00:12:31,510
but task finishes and your task can

00:12:29,020 --> 00:12:33,490
continue and if you're looking for a

00:12:31,510 --> 00:12:36,340
wrong record it just keeps checking and

00:12:33,490 --> 00:12:40,360
checking until it actually fails and

00:12:36,340 --> 00:12:42,190
times out and to compare ourselves with

00:12:40,360 --> 00:12:44,950
other tools but other tools are trying

00:12:42,190 --> 00:12:47,980
to go from one node context by throwing

00:12:44,950 --> 00:12:50,590
code into a browser the browser is very

00:12:47,980 --> 00:12:52,600
complex thing it's hard for you to throw

00:12:50,590 --> 00:12:54,510
something and expect it to catch it but

00:12:52,600 --> 00:12:57,130
browser is doing a lot of stuff

00:12:54,510 --> 00:12:58,510
rendering controlling Network you know

00:12:57,130 --> 00:13:01,240
working with different contexts with

00:12:58,510 --> 00:13:03,340
service workers and so on but note in

00:13:01,240 --> 00:13:05,140
comparison is very very simple so when

00:13:03,340 --> 00:13:08,710
you do webdriver executes you sending

00:13:05,140 --> 00:13:10,720
actual code from node to a browser the

00:13:08,710 --> 00:13:12,850
browser will have I might execute the

00:13:10,720 --> 00:13:16,180
kuraki or with something might be wrong

00:13:12,850 --> 00:13:18,130
there's no idea like what to do when you

00:13:16,180 --> 00:13:20,470
go with side tasks you're going from a

00:13:18,130 --> 00:13:22,960
browser to node which is much much

00:13:20,470 --> 00:13:25,400
simpler process note is specifically

00:13:22,960 --> 00:13:28,430
done to do that

00:13:25,400 --> 00:13:31,180
we just call an event an event handler

00:13:28,430 --> 00:13:34,100
just picks it up and returns the result

00:13:31,180 --> 00:13:36,550
so we have site tasks - you know to go

00:13:34,100 --> 00:13:39,790
to a node you can execute arbitrary

00:13:36,550 --> 00:13:43,910
program or you can do HTTP requests

00:13:39,790 --> 00:13:45,860
great but still looks different right

00:13:43,910 --> 00:13:48,650
even people who like Cypress kind of

00:13:45,860 --> 00:13:53,620
publish things like this but Cypress has

00:13:48,650 --> 00:13:58,100
a very bizarre syntax here's an example

00:13:53,620 --> 00:14:01,940
sigh visit URL site get awesome selector

00:13:58,100 --> 00:14:04,700
click sigh URL should include a new URL

00:14:01,940 --> 00:14:07,040
well to me this is very very obvious and

00:14:04,700 --> 00:14:09,070
very declarative but if you compare to

00:14:07,040 --> 00:14:11,839
other frameworks that have async/await

00:14:09,070 --> 00:14:15,110
it's completely different so here's a

00:14:11,839 --> 00:14:17,950
puppeteer example like Brahmo await and

00:14:15,110 --> 00:14:22,630
async keywords and actual keywords here

00:14:17,950 --> 00:14:25,910
you can look at desk FF the same thing

00:14:22,630 --> 00:14:27,830
so the Cypress really if you think

00:14:25,910 --> 00:14:31,220
what's I variable that we give to you it

00:14:27,830 --> 00:14:34,010
usually should be called a user a user

00:14:31,220 --> 00:14:36,589
visits a URL a user gets a selector and

00:14:34,010 --> 00:14:39,170
clicks on it a user looks at URL and

00:14:36,589 --> 00:14:41,720
checks what it contains a new URL is

00:14:39,170 --> 00:14:46,490
that way and this kind of shows our

00:14:41,720 --> 00:14:48,080
perspective on running tests you're not

00:14:46,490 --> 00:14:49,279
running the test immediately that's why

00:14:48,080 --> 00:14:52,339
you cannot use async/await

00:14:49,279 --> 00:14:54,670
instead when cypress sees visit it

00:14:52,339 --> 00:14:57,320
actually adds a command in its queue

00:14:54,670 --> 00:15:00,200
when it's Eastside yet it adds another

00:14:57,320 --> 00:15:03,080
command and links it to the first one in

00:15:00,200 --> 00:15:07,160
skew when you say click you adding a

00:15:03,080 --> 00:15:08,900
thing into the queue and so on and we're

00:15:07,160 --> 00:15:11,779
certain as is added to the queue and

00:15:08,900 --> 00:15:13,520
this is ultimately the principle

00:15:11,779 --> 00:15:16,520
difference between Cyprus and any other

00:15:13,520 --> 00:15:20,270
tool there because you get at the end of

00:15:16,520 --> 00:15:22,580
a day a single command Q but hasn't run

00:15:20,270 --> 00:15:25,130
yet it just defines all the things with

00:15:22,580 --> 00:15:27,560
the test folder and it's like it's

00:15:25,130 --> 00:15:30,320
single path because when they use it to

00:15:27,560 --> 00:15:33,050
test your software you cannot do bunch

00:15:30,320 --> 00:15:35,540
of stuff at the same time no you might

00:15:33,050 --> 00:15:37,459
click in a very fast but you're still

00:15:35,540 --> 00:15:39,059
doing one thing you open a page and you

00:15:37,459 --> 00:15:40,349
wait for page to load

00:15:39,059 --> 00:15:42,419
you open a page and you wait for

00:15:40,349 --> 00:15:45,509
selector to be visible and so you can

00:15:42,419 --> 00:15:47,879
type into it and so on this queue is

00:15:45,509 --> 00:15:49,049
always deterministic and westwood

00:15:47,879 --> 00:15:50,819
current keys with the test are

00:15:49,049 --> 00:15:52,469
repeatable and not flaky because you're

00:15:50,819 --> 00:15:56,249
not executing different things you don't

00:15:52,469 --> 00:15:58,859
have race conditions and finally we're

00:15:56,249 --> 00:16:00,659
pew is lazy - like I'm a lazy right it

00:15:58,859 --> 00:16:03,599
hasn't run yet you have to explicitly

00:16:00,659 --> 00:16:06,629
starve a task for this queue to start

00:16:03,599 --> 00:16:09,149
processing before we just build it and

00:16:06,629 --> 00:16:12,329
this gives us execution model where we

00:16:09,149 --> 00:16:14,069
can start with a command if it passes we

00:16:12,329 --> 00:16:16,979
go to the second command if it passes we

00:16:14,069 --> 00:16:18,299
go to a fraud command if it fails we

00:16:16,979 --> 00:16:20,609
actually know exactly where it fail and

00:16:18,299 --> 00:16:22,379
we can show you here's what failed here

00:16:20,609 --> 00:16:23,939
are all the commands but ran how they

00:16:22,379 --> 00:16:24,569
ran and all the commands were the

00:16:23,939 --> 00:16:27,119
following

00:16:24,569 --> 00:16:31,259
so you precisely know whether this big

00:16:27,119 --> 00:16:33,029
test failed and also like I showed with

00:16:31,259 --> 00:16:35,759
this execution model we can always go

00:16:33,029 --> 00:16:38,189
back to a previous command and rerun it

00:16:35,759 --> 00:16:40,469
until best sourcing passes you cannot do

00:16:38,189 --> 00:16:42,329
it with promises because promises are

00:16:40,469 --> 00:16:45,569
fulfilled once and when they're done

00:16:42,329 --> 00:16:47,189
like a single shot bullet so that's why

00:16:45,569 --> 00:16:50,369
you cannot do things with people usually

00:16:47,189 --> 00:16:52,579
are trying to do that means a wait sigh

00:16:50,369 --> 00:16:54,839
you are L because nothing will run there

00:16:52,579 --> 00:16:58,919
you just building the queue when you

00:16:54,839 --> 00:17:02,519
execute the test if I can use an analogy

00:16:58,919 --> 00:17:05,939
is that we sold game of pipes in that

00:17:02,519 --> 00:17:08,159
game you arrange little pipes and then

00:17:05,939 --> 00:17:08,689
in turn the water and the water stops

00:17:08,159 --> 00:17:11,220
flowing

00:17:08,689 --> 00:17:13,589
similarly for us when you build the

00:17:11,220 --> 00:17:15,749
queue then you start the test and the

00:17:13,589 --> 00:17:18,240
water started flowing meaning with

00:17:15,749 --> 00:17:20,309
testers as giving commands and if the

00:17:18,240 --> 00:17:22,619
commands if a water reaches all the way

00:17:20,309 --> 00:17:28,980
to the bottom that means the task has

00:17:22,619 --> 00:17:31,860
passed even better is to think of this

00:17:28,980 --> 00:17:33,960
as reactive stream we attractive conf

00:17:31,860 --> 00:17:36,179
conference so of course I had to explain

00:17:33,960 --> 00:17:38,070
it in terms of reactive streams when you

00:17:36,179 --> 00:17:40,830
do reactive stream like using our GS

00:17:38,070 --> 00:17:43,529
library let's say we've move a pipe you

00:17:40,830 --> 00:17:46,889
adding filter you adding map you adding

00:17:43,529 --> 00:17:50,669
scan when you run that code it defines a

00:17:46,889 --> 00:17:52,480
pipeline a reactive stream but that

00:17:50,669 --> 00:17:55,299
stream just stays where

00:17:52,480 --> 00:17:56,530
drive nothing is running in order for

00:17:55,299 --> 00:17:58,540
you to start running and in order for

00:17:56,530 --> 00:18:00,940
you to start generating advance doing

00:17:58,540 --> 00:18:04,390
mapping filtering and so on someone has

00:18:00,940 --> 00:18:06,429
to click or execute subscribe before

00:18:04,390 --> 00:18:09,250
anyone does subscribe West Jim can just

00:18:06,429 --> 00:18:11,440
stay there without any advance flowing

00:18:09,250 --> 00:18:14,530
it will be like function but never gets

00:18:11,440 --> 00:18:18,220
executed just defined so when the test

00:18:14,530 --> 00:18:19,419
starts we do the same thing just like AB

00:18:18,220 --> 00:18:22,030
and start flowing through reactive

00:18:19,419 --> 00:18:24,700
pipeline our commands start executing

00:18:22,030 --> 00:18:26,919
retrying and so on and if events

00:18:24,700 --> 00:18:28,540
finished subscribe it means you finish

00:18:26,919 --> 00:18:31,480
if we went from a whole reactive stream

00:18:28,540 --> 00:18:32,950
and you actually reached pipeline so

00:18:31,480 --> 00:18:34,929
writing cyprus test is almost like

00:18:32,950 --> 00:18:38,559
writing a reactive single reactive

00:18:34,929 --> 00:18:41,140
stream where you flatmap latest every

00:18:38,559 --> 00:18:46,240
operation and you take only one event a

00:18:41,140 --> 00:18:48,700
command passes and you continue okay so

00:18:46,240 --> 00:18:51,880
now something personal a lot of users

00:18:48,700 --> 00:18:53,590
ask us well is cyprus the end of

00:18:51,880 --> 00:18:56,770
selenium it cypress better of a

00:18:53,590 --> 00:18:58,960
Nightwatch right truly use webdriver or

00:18:56,770 --> 00:19:01,570
so they just replace on my tests and we

00:18:58,960 --> 00:19:03,490
think like we never like tried we try to

00:19:01,570 --> 00:19:06,130
avoid this conversation because we never

00:19:03,490 --> 00:19:09,700
thing but our tool is replacement for

00:19:06,130 --> 00:19:11,740
another tool okay we think that every

00:19:09,700 --> 00:19:13,870
tool has been written by its offers to

00:19:11,740 --> 00:19:17,500
solve a specific problem fro specific

00:19:13,870 --> 00:19:19,540
point of view right there is no sense in

00:19:17,500 --> 00:19:21,460
saying our tool is para venir tool

00:19:19,540 --> 00:19:23,020
because well you probably wrote your

00:19:21,460 --> 00:19:25,030
tool to solve your problem we trying to

00:19:23,020 --> 00:19:26,890
UM overcome or shortcomings but we know

00:19:25,030 --> 00:19:29,679
by using your tool so we actually

00:19:26,890 --> 00:19:33,549
benefit from your tool being written

00:19:29,679 --> 00:19:35,760
maintain you know explained where is

00:19:33,549 --> 00:19:40,960
plenty of room to create bunch of tools

00:19:35,760 --> 00:19:43,870
and if we look at this pie so imagine

00:19:40,960 --> 00:19:46,090
like this piece are all the people using

00:19:43,870 --> 00:19:48,809
selenium and webdriver it's a

00:19:46,090 --> 00:19:53,830
significant chunk selenium is number one

00:19:48,809 --> 00:19:56,230
we want to be this chunk right a very

00:19:53,830 --> 00:19:59,080
sizable slice of a pie where people will

00:19:56,230 --> 00:20:01,299
start using Cypress but there is a huge

00:19:59,080 --> 00:20:03,909
pie of people who are not writing any

00:20:01,299 --> 00:20:05,770
end-to-end tests like verse real market

00:20:03,909 --> 00:20:07,420
but we're trying to capture

00:20:05,770 --> 00:20:09,790
we're trying to make it so simple for

00:20:07,420 --> 00:20:11,200
you to try Cyprus but we're not taking

00:20:09,790 --> 00:20:13,420
sure from selenium we're not competing

00:20:11,200 --> 00:20:16,059
in selenium will be happy when people

00:20:13,420 --> 00:20:20,050
use selenium and Cyprus and we split the

00:20:16,059 --> 00:20:23,530
whole pie right just do NPM install and

00:20:20,050 --> 00:20:25,330
try Cypress and finally I want to finish

00:20:23,530 --> 00:20:27,370
with something else so people like

00:20:25,330 --> 00:20:29,350
customizing I used to have a Honda Civic

00:20:27,370 --> 00:20:32,320
and added a spoiler and it looked

00:20:29,350 --> 00:20:34,480
ridiculous because it's a crappy car but

00:20:32,320 --> 00:20:35,980
it looked cool people loved IKEA

00:20:34,480 --> 00:20:37,809
furniture not because it's a great

00:20:35,980 --> 00:20:39,429
furniture but because it's cheap and you

00:20:37,809 --> 00:20:43,480
assemble it yourself so you feel proud

00:20:39,429 --> 00:20:46,660
right and a real example is hyper

00:20:43,480 --> 00:20:48,670
terminal from site not because it

00:20:46,660 --> 00:20:50,710
customizes you know and replaces the

00:20:48,670 --> 00:20:53,050
fast terminal with a slow electron

00:20:50,710 --> 00:20:54,850
application know the real power is

00:20:53,050 --> 00:20:57,280
because you can customize it yourself by

00:20:54,850 --> 00:20:59,260
knowing just JavaScript so people write

00:20:57,280 --> 00:21:01,300
things like awesome hyper where you

00:20:59,260 --> 00:21:04,170
don't miss mode and also a new type and

00:21:01,300 --> 00:21:07,059
you look power move everywhere right

00:21:04,170 --> 00:21:12,490
that's the power of me taking a tool and

00:21:07,059 --> 00:21:15,520
making to your tool so what can we do

00:21:12,490 --> 00:21:17,620
well as I told you your tests are

00:21:15,520 --> 00:21:20,890
running right inside the browser right

00:21:17,620 --> 00:21:23,740
next to the application under test so

00:21:20,890 --> 00:21:25,720
what can you do well anytime you run

00:21:23,740 --> 00:21:28,780
something in an iframe you can just say

00:21:25,720 --> 00:21:30,250
hey give me my parent reference and all

00:21:28,780 --> 00:21:33,970
sudden you get a reference to a whole

00:21:30,250 --> 00:21:35,890
window the whole browser window and your

00:21:33,970 --> 00:21:37,900
browser developer your front-end

00:21:35,890 --> 00:21:40,750
developer trying to test code and now

00:21:37,900 --> 00:21:44,820
you have access to a browser so what can

00:21:40,750 --> 00:21:49,300
I do well why not just load some styles

00:21:44,820 --> 00:21:51,630
before the test start I mean you like

00:21:49,300 --> 00:21:55,270
running in a browser so what does it do

00:21:51,630 --> 00:21:59,429
so I have my app right here and let me

00:21:55,270 --> 00:22:04,929
remove this stuff right we don't need it

00:21:59,429 --> 00:22:07,750
we can do this thing our way so Cypress

00:22:04,929 --> 00:22:12,160
always like watches my files runs so I'm

00:22:07,750 --> 00:22:17,860
gonna require another module and all of

00:22:12,160 --> 00:22:21,250
a sudden it's switch to the scroll

00:22:17,860 --> 00:22:23,350
- halloween-themed I didn't ask

00:22:21,250 --> 00:22:24,279
Cyprus to actually expose folks exposed

00:22:23,350 --> 00:22:28,600
like a new theme

00:22:24,279 --> 00:22:31,450
no it runs in the browser my code you

00:22:28,600 --> 00:22:33,220
know can just change everything and the

00:22:31,450 --> 00:22:40,600
cool thing you can do is that also if a

00:22:33,220 --> 00:22:51,130
test fails ok spinning

00:22:40,600 --> 00:22:53,679
I mean it's silly but like okay so I

00:22:51,130 --> 00:22:55,899
don't care about like it's it's too

00:22:53,679 --> 00:22:58,299
short of a talk to go through the

00:22:55,899 --> 00:23:00,940
summary of what I just showed right my

00:22:58,299 --> 00:23:03,820
only conclusion of my only parting

00:23:00,940 --> 00:23:05,740
thought is like keep creating the tools

00:23:03,820 --> 00:23:08,139
people have this thing or JavaScript new

00:23:05,740 --> 00:23:10,720
framework a new tool every day but fine

00:23:08,139 --> 00:23:12,820
ask Java developers would you be happy

00:23:10,720 --> 00:23:15,580
with one new tool every month will the

00:23:12,820 --> 00:23:17,889
key right we have this unique thing

00:23:15,580 --> 00:23:19,510
where we have new toys new solutions

00:23:17,889 --> 00:23:23,169
even to all problems are new problems

00:23:19,510 --> 00:23:25,179
but appeared constantly right if we were

00:23:23,169 --> 00:23:28,120
happy with the state of things we would

00:23:25,179 --> 00:23:30,250
never have written Cyprus or which will

00:23:28,120 --> 00:23:31,870
happy with Cyprus in Ohio it was a year

00:23:30,250 --> 00:23:35,200
ago we would never actually release new

00:23:31,870 --> 00:23:40,299
versions you know keep pumping new stuff

00:23:35,200 --> 00:23:41,889
right like don't never stop well you can

00:23:40,299 --> 00:23:43,080
find supplies online and thank you so

00:23:41,889 --> 00:23:49,960
much

00:23:43,080 --> 00:23:52,130
[Applause]

00:23:49,960 --> 00:23:53,870
thank you very much Claire all right

00:23:52,130 --> 00:23:58,760
we've got a few questions for you no we

00:23:53,870 --> 00:24:00,470
don't yeah yes we do some tests need

00:23:58,760 --> 00:24:03,920
specific processes to be launched and

00:24:00,470 --> 00:24:06,560
killed after testing Oh strong language

00:24:03,920 --> 00:24:09,020
is there just just keep the violence to

00:24:06,560 --> 00:24:11,120
a minimum today guys databases services

00:24:09,020 --> 00:24:12,590
etc how would you achieve that right so

00:24:11,120 --> 00:24:14,600
with the Jeff but you start your server

00:24:12,590 --> 00:24:17,300
before you start your tests right so

00:24:14,600 --> 00:24:19,970
don't like run long-running process from

00:24:17,300 --> 00:24:22,250
side tasks you know create your services

00:24:19,970 --> 00:24:25,640
start them and then start your tasks you

00:24:22,250 --> 00:24:27,740
know and then finish everything does

00:24:25,640 --> 00:24:28,970
Cypress work with react native so react

00:24:27,740 --> 00:24:30,890
native is interesting thing I know

00:24:28,970 --> 00:24:33,020
people have done where we took apart

00:24:30,890 --> 00:24:35,690
with just a web application and before

00:24:33,020 --> 00:24:37,970
they can learn to react native they run

00:24:35,690 --> 00:24:40,700
end-to-end tests in Cyprus against wet

00:24:37,970 --> 00:24:43,250
in a browser but once you convert we

00:24:40,700 --> 00:24:45,860
don't support like native platforms so

00:24:43,250 --> 00:24:48,110
we cannot run the test on a converted

00:24:45,860 --> 00:24:51,320
app like while you're thinking about

00:24:48,110 --> 00:24:53,330
this slider but you just here use a

00:24:51,320 --> 00:24:56,300
cypress for testing so they are a big

00:24:53,330 --> 00:25:03,250
big friend okay increase that slice of

00:24:56,300 --> 00:25:05,750
the pie can't Cypress handle off login

00:25:03,250 --> 00:25:09,080
yes but not in a way you expect right

00:25:05,750 --> 00:25:11,480
it's like with all of his thunder

00:25:09,080 --> 00:25:14,840
outside of your control right so forever

00:25:11,480 --> 00:25:16,730
off if you can do you know Sai request

00:25:14,840 --> 00:25:19,100
HTTP request to log in and then you get

00:25:16,730 --> 00:25:21,350
a cookie or talking and then use it it's

00:25:19,100 --> 00:25:23,990
much better than trying to like pop a

00:25:21,350 --> 00:25:27,110
browser pop off and enter information

00:25:23,990 --> 00:25:30,050
and go for the Dom right it's much

00:25:27,110 --> 00:25:33,160
better to do as I request HTTP requests

00:25:30,050 --> 00:25:35,600
and be logged in right away

00:25:33,160 --> 00:25:37,880
excellent any roadmaps for Cypress

00:25:35,600 --> 00:25:39,890
absolutely if you go to a github where

00:25:37,880 --> 00:25:41,870
it's a roadmap where it's changelog it's

00:25:39,890 --> 00:25:44,120
open source project so we're discussing

00:25:41,870 --> 00:25:46,610
everything but we want to work on very

00:25:44,120 --> 00:25:48,920
very publicly because we don't have to

00:25:46,610 --> 00:25:50,420
make money over testrunner the money and

00:25:48,920 --> 00:25:51,050
price doesn't really influence our

00:25:50,420 --> 00:25:53,360
decision

00:25:51,050 --> 00:25:57,350
but the impact that's how we decide

00:25:53,360 --> 00:26:00,170
which things we should prioritize gable

00:25:57,350 --> 00:26:02,880
kansai handle non or mobile testing for

00:26:00,170 --> 00:26:05,070
example iOS Safari excellent

00:26:02,880 --> 00:26:06,840
so right now we can control only Chrome

00:26:05,070 --> 00:26:09,000
based browser like Chrome you know

00:26:06,840 --> 00:26:11,970
electron we're working on other browsers

00:26:09,000 --> 00:26:15,360
like Firefox and ie Levin after we do

00:26:11,970 --> 00:26:17,070
that we want to do safari mobile right

00:26:15,360 --> 00:26:20,880
and then you'll be able to run Cypress

00:26:17,070 --> 00:26:23,190
against fre mobile Gabe or again getting

00:26:20,880 --> 00:26:25,650
a bit greedy with the questions can

00:26:23,190 --> 00:26:28,860
Cypress test not dumb canvas based web

00:26:25,650 --> 00:26:31,440
app so what kind of testing do you think

00:26:28,860 --> 00:26:33,450
you know the canvas should do right like

00:26:31,440 --> 00:26:35,850
I'll be willing like to discuss this

00:26:33,450 --> 00:26:37,860
right now where are other companies that

00:26:35,850 --> 00:26:40,890
do screenshot dipping so with Cypress

00:26:37,860 --> 00:26:43,200
you can do screenshots and then use

00:26:40,890 --> 00:26:45,090
third-party software to do screenshot D

00:26:43,200 --> 00:26:48,090
things to compare how you can vez looks

00:26:45,090 --> 00:26:49,920
for example but it's more specific case

00:26:48,090 --> 00:26:54,180
and I would be very happy to discuss

00:26:49,920 --> 00:26:56,190
this all right our next question are you

00:26:54,180 --> 00:26:58,590
actually changing the actual code by

00:26:56,190 --> 00:27:02,850
test if yes is it not dangerous the way

00:26:58,590 --> 00:27:05,820
how the code should be tested well of

00:27:02,850 --> 00:27:09,420
course right yes you can always reach

00:27:05,820 --> 00:27:11,280
inside your code and stop by application

00:27:09,420 --> 00:27:14,370
code a very useful example is like

00:27:11,280 --> 00:27:15,810
stopping math.random so your idea is

00:27:14,370 --> 00:27:18,960
that you generate actually what you

00:27:15,810 --> 00:27:20,970
expect and but a very easy to use inside

00:27:18,960 --> 00:27:23,190
the test and compare against so it does

00:27:20,970 --> 00:27:24,780
become deterministic so in that case

00:27:23,190 --> 00:27:26,820
it's a judgment call that comes from

00:27:24,780 --> 00:27:28,650
your experience should you spy on the

00:27:26,820 --> 00:27:32,700
application code oh is it about to

00:27:28,650 --> 00:27:34,380
change so what s will be broken it's you

00:27:32,700 --> 00:27:36,120
know you can wear a trade-off you

00:27:34,380 --> 00:27:36,720
looking at me like I understand what

00:27:36,120 --> 00:27:39,360
you're saying

00:27:36,720 --> 00:27:43,700
I feel like we're two different species

00:27:39,360 --> 00:27:46,530
here we go home and have a very long fry

00:27:43,700 --> 00:27:48,120
all right maybe last question this thing

00:27:46,530 --> 00:27:49,530
is displaying all sorts of strange

00:27:48,120 --> 00:27:51,600
numbers I don't know how much time we

00:27:49,530 --> 00:27:55,530
have any estimate for the fetch support

00:27:51,600 --> 00:27:56,790
on Cypress okay I mean come on like we

00:27:55,530 --> 00:27:59,430
have some when you walk around to

00:27:56,790 --> 00:28:01,620
replace fetch with xhr which you can spy

00:27:59,430 --> 00:28:06,570
and stop no I will not to give you any

00:28:01,620 --> 00:28:09,090
estimate oh yeah good clip what about

00:28:06,570 --> 00:28:10,680
Firefox support okay we're almost done a

00:28:09,090 --> 00:28:12,570
Firefox support and then we look at like

00:28:10,680 --> 00:28:13,860
number of hacks we had to do to get it

00:28:12,570 --> 00:28:15,630
working and we're like it's not gonna

00:28:13,860 --> 00:28:17,400
scale to any other browser

00:28:15,630 --> 00:28:19,230
so we actually scrape like whatever we

00:28:17,400 --> 00:28:20,280
implemented and then we're gonna do ie

00:28:19,230 --> 00:28:23,520
and Firefox

00:28:20,280 --> 00:28:25,560
hopefully phone no timetable all right

00:28:23,520 --> 00:28:27,090
hello final question Kensei run

00:28:25,560 --> 00:28:28,740
automatically on a server and give

00:28:27,090 --> 00:28:31,890
results back to an automatic deployment

00:28:28,740 --> 00:28:33,390
workflow absolutely you know everything

00:28:31,890 --> 00:28:35,340
I will have examples we have darker

00:28:33,390 --> 00:28:37,610
images so you can do just you know

00:28:35,340 --> 00:28:41,250
install Cypress Ron and it runs without

00:28:37,610 --> 00:28:42,670
problems fantastic alright let's give a

00:28:41,250 --> 00:28:46,670
round of applause

00:28:42,670 --> 00:28:46,670

YouTube URL: https://www.youtube.com/watch?v=swpz0H0u13k


