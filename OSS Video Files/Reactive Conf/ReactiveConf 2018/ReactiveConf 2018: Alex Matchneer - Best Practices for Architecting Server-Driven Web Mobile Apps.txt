Title: ReactiveConf 2018: Alex Matchneer - Best Practices for Architecting Server-Driven Web Mobile Apps
Publication date: 2018-11-02
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
Building for Realtime: Best Practices for Architecting Server-Driven Web/Mobile Apps

Alex builds/maintains a Mobile Checkout app (at FutureProofRetail.com), which like Uber/Lyft and other popular ride-sharing apps, involves a tight coordination between server state and app state. This kind of app is very difficult to build and test with confidence, and Alex presented on the current state of design patterns and best practices to facilitate building such an app. Alex touched on Uber's open-sourced RIBs architecture, as well as what we've built in Ember to make it easier to build these kinds of apps. Alex believes this talk will be of interest to anyone who's tried to build an app with a live socket connection to the server (e.g. WebSockets), which is probably most people at this point :).
Captions: 
	00:00:02,220 --> 00:00:08,679
[Music]

00:00:11,639 --> 00:00:16,810
so my name is Alex Manor I'm here to

00:00:14,559 --> 00:00:20,619
talk about architecting real-time mobile

00:00:16,810 --> 00:00:22,750
apps and I live and work out of New York

00:00:20,619 --> 00:00:25,150
and I'm a developer at a company called

00:00:22,750 --> 00:00:26,710
future-proof retail which focuses on

00:00:25,150 --> 00:00:29,679
building lots of mobile apps that are

00:00:26,710 --> 00:00:32,079
sort of retail centric and I used to be

00:00:29,679 --> 00:00:33,840
a member of the ember GS core team still

00:00:32,079 --> 00:00:36,610
very actively involved in the community

00:00:33,840 --> 00:00:39,430
mostly now is a maintainer of an add-on

00:00:36,610 --> 00:00:40,600
called ever concurrency I want to try

00:00:39,430 --> 00:00:42,370
something I'm not sure if it's a good

00:00:40,600 --> 00:00:46,690
idea but just a show of hands who here

00:00:42,370 --> 00:00:50,110
uses Ember okay let the record show that

00:00:46,690 --> 00:00:51,640
everybody's raising their hands and

00:00:50,110 --> 00:00:55,060
everyone of course probably uses ember

00:00:51,640 --> 00:00:56,500
concurrency but moving on so the main

00:00:55,060 --> 00:00:59,680
app that I maintain is an app called

00:00:56,500 --> 00:01:01,120
mobile check out and it's pretty simple

00:00:59,680 --> 00:01:03,250
it's a mobile app you can get it on the

00:01:01,120 --> 00:01:05,140
App Store or Play Store and you can use

00:01:03,250 --> 00:01:07,299
it to go into supporting stores scan

00:01:05,140 --> 00:01:10,240
items with your phone pay on your phone

00:01:07,299 --> 00:01:11,859
and check out and skip the line and we

00:01:10,240 --> 00:01:14,109
it's a white labelled app that's kind of

00:01:11,859 --> 00:01:17,439
available in a variety of different

00:01:14,109 --> 00:01:19,630
brands the one that's closest to here

00:01:17,439 --> 00:01:23,200
would be in Belgium where we're live at

00:01:19,630 --> 00:01:26,590
spar no K stores for the scan pay go app

00:01:23,200 --> 00:01:28,509
and we build this with ember and Cordova

00:01:26,590 --> 00:01:30,609
so unlike probably a lot of people here

00:01:28,509 --> 00:01:31,899
it's not react native but it's something

00:01:30,609 --> 00:01:34,749
that's about kind of been around since

00:01:31,899 --> 00:01:36,399
before react native so as a quick demo

00:01:34,749 --> 00:01:38,740
of what the experience is like you use

00:01:36,399 --> 00:01:40,420
the app you open it you geo locate it

00:01:38,740 --> 00:01:42,520
finds the nearest store you say you want

00:01:40,420 --> 00:01:44,139
to start shopping you can start pulling

00:01:42,520 --> 00:01:45,880
items off the shelf you can scan them

00:01:44,139 --> 00:01:48,039
with your phone you see the items with

00:01:45,880 --> 00:01:49,600
real prices show up at the bottom you

00:01:48,039 --> 00:01:52,600
review what you've added to your cart

00:01:49,600 --> 00:01:56,200
and then you check out this is a quick

00:01:52,600 --> 00:01:59,170
demo of me using the app to scan some

00:01:56,200 --> 00:02:00,759
Haribo gummy bears from the fairway

00:01:59,170 --> 00:02:03,520
store in New York and then getting to

00:02:00,759 --> 00:02:05,770
the checkout screen that's that's all

00:02:03,520 --> 00:02:07,479
running ember inside a Cordova app and

00:02:05,770 --> 00:02:09,340
we're kind of live at a bunch of

00:02:07,479 --> 00:02:10,720
different places around the globe these

00:02:09,340 --> 00:02:13,049
are just the ones that are sort of the

00:02:10,720 --> 00:02:15,580
larger retailers we also have sort of

00:02:13,049 --> 00:02:18,760
vending machine deployments and micro

00:02:15,580 --> 00:02:19,420
markets that we also built for so this

00:02:18,760 --> 00:02:22,720
is supposed to be a

00:02:19,420 --> 00:02:25,000
talk on real-time architecture so

00:02:22,720 --> 00:02:27,370
exactly where where's the real time and

00:02:25,000 --> 00:02:28,569
in an app like this I mean you can sort

00:02:27,370 --> 00:02:29,980
of tell from the demo is that you're

00:02:28,569 --> 00:02:32,290
scanning codes and there's got to be

00:02:29,980 --> 00:02:33,819
some interaction with the server but

00:02:32,290 --> 00:02:35,349
maybe you know maybe you could just do

00:02:33,819 --> 00:02:38,830
that with Ajax maybe you're just saying

00:02:35,349 --> 00:02:40,840
like hey server look up this item add it

00:02:38,830 --> 00:02:42,610
to the cart and give me the result so

00:02:40,840 --> 00:02:44,980
where's the real-time aspect of an app

00:02:42,610 --> 00:02:46,720
like this well part of it is that

00:02:44,980 --> 00:02:48,190
there's another app that's not one thing

00:02:46,720 --> 00:02:49,930
you get from the App Store but it's the

00:02:48,190 --> 00:02:52,569
one that the cashiers and merchants have

00:02:49,930 --> 00:02:54,750
in the store and one of the main

00:02:52,569 --> 00:02:56,709
functionalities of this app is to

00:02:54,750 --> 00:02:58,390
summarize all the people that are

00:02:56,709 --> 00:03:01,000
currently in your store or shopping and

00:02:58,390 --> 00:03:02,140
you can sort of see like kind of where

00:03:01,000 --> 00:03:04,660
they are in the process what they've

00:03:02,140 --> 00:03:06,700
added to their cart but more importantly

00:03:04,660 --> 00:03:08,860
there's also this occasional security

00:03:06,700 --> 00:03:10,360
check so part of our security model is

00:03:08,860 --> 00:03:11,680
that you know most of the time you can

00:03:10,360 --> 00:03:13,569
just walk out of the store and skip the

00:03:11,680 --> 00:03:15,069
line and but every so often there might

00:03:13,569 --> 00:03:18,340
be some logic that triggers like hey

00:03:15,069 --> 00:03:19,930
this it's time for a cashier to come and

00:03:18,340 --> 00:03:22,630
sort of just double check what you

00:03:19,930 --> 00:03:25,329
scanned and so there's this kind of

00:03:22,630 --> 00:03:26,680
interaction this interplay between the

00:03:25,329 --> 00:03:28,000
server that needs to keep the the

00:03:26,680 --> 00:03:30,459
shopper app and the merchants app in

00:03:28,000 --> 00:03:33,160
sync and this kind of interplay might

00:03:30,459 --> 00:03:35,079
remind you of another much more common

00:03:33,160 --> 00:03:38,049
app that you've certainly heard of so

00:03:35,079 --> 00:03:39,370
the various rideshare apps such as uber

00:03:38,049 --> 00:03:42,370
and lyft have this kind of interaction

00:03:39,370 --> 00:03:44,079
where you've got shoppers you I'm sorry

00:03:42,370 --> 00:03:45,489
passengers using the passenger app that

00:03:44,079 --> 00:03:47,950
you can just get from the App Store and

00:03:45,489 --> 00:03:50,500
then drivers are also connecting as well

00:03:47,950 --> 00:03:52,540
and so these apps in order for the whole

00:03:50,500 --> 00:03:56,560
product to work need to be very reliably

00:03:52,540 --> 00:03:58,060
real-time and for us if you if there's

00:03:56,560 --> 00:04:00,040
anything where the shopper and the

00:03:58,060 --> 00:04:01,299
merchant app are out of sync then you're

00:04:00,040 --> 00:04:02,590
gonna have a very awkward checkout

00:04:01,299 --> 00:04:04,180
experience so it's very important for

00:04:02,590 --> 00:04:06,700
our product that these things just work

00:04:04,180 --> 00:04:08,140
very seamlessly so yes

00:04:06,700 --> 00:04:10,150
very business critical that everything

00:04:08,140 --> 00:04:11,380
is in sync with the server because if

00:04:10,150 --> 00:04:15,730
they're in sync with the server they're

00:04:11,380 --> 00:04:17,200
in sync with each other so of all the

00:04:15,730 --> 00:04:18,700
things that we have to build as part of

00:04:17,200 --> 00:04:20,739
this product to make it work all the

00:04:18,700 --> 00:04:23,560
integrations all the linking up with

00:04:20,739 --> 00:04:25,389
super old inventory infrastructure so we

00:04:23,560 --> 00:04:28,479
can look up items and prices and all

00:04:25,389 --> 00:04:30,010
this stuff I consider what we have to do

00:04:28,479 --> 00:04:32,180
in the mobile apps to keep things in

00:04:30,010 --> 00:04:34,310
sync and build that correctly to be

00:04:32,180 --> 00:04:37,400
probably the most difficult aspect of of

00:04:34,310 --> 00:04:39,289
what we do and it's deceptively

00:04:37,400 --> 00:04:41,360
difficult it doesn't sound like it would

00:04:39,289 --> 00:04:42,830
be but it eats up a lot of time and and

00:04:41,360 --> 00:04:44,479
and I think we've found some good

00:04:42,830 --> 00:04:47,240
patterns for it now but it's it's taking

00:04:44,479 --> 00:04:49,520
quite a while and I found that for this

00:04:47,240 --> 00:04:51,440
particular kind of app there's not a lot

00:04:49,520 --> 00:04:53,300
of good like reference and blogs and

00:04:51,440 --> 00:04:56,090
people talking about it because it's

00:04:53,300 --> 00:04:58,370
it's it's kind of special in ways that

00:04:56,090 --> 00:05:00,889
I'll describe that are common with like

00:04:58,370 --> 00:05:03,199
the uber ride share apps but I'll get

00:05:00,889 --> 00:05:05,780
into that a moment but let's first

00:05:03,199 --> 00:05:08,000
define some basic terms so when I say

00:05:05,780 --> 00:05:11,509
real-time what does that actually mean

00:05:08,000 --> 00:05:13,550
and so in very general terms I just mean

00:05:11,509 --> 00:05:16,099
any situation where you have a client

00:05:13,550 --> 00:05:19,099
app that says hey server please

00:05:16,099 --> 00:05:21,590
subscribe me to like this kind of event

00:05:19,099 --> 00:05:24,440
or this piece of data that changes over

00:05:21,590 --> 00:05:27,050
time and then after that point it's all

00:05:24,440 --> 00:05:29,120
up to the server to listen on its end

00:05:27,050 --> 00:05:33,020
for any changes and then broadcast those

00:05:29,120 --> 00:05:35,449
to anybody who is subscribed to it so I

00:05:33,020 --> 00:05:38,020
would contrast this with very with the

00:05:35,449 --> 00:05:41,030
classic sort of request response cycle

00:05:38,020 --> 00:05:43,909
of of an app where you tap a button to

00:05:41,030 --> 00:05:46,550
refresh get the latest data and that'll

00:05:43,909 --> 00:05:47,840
kick off an ajax request and and after

00:05:46,550 --> 00:05:50,090
that's done there's no further

00:05:47,840 --> 00:05:52,370
interaction from the server so with the

00:05:50,090 --> 00:05:54,590
real-time it's any kind of interaction

00:05:52,370 --> 00:05:59,599
where the server is alive and continuing

00:05:54,590 --> 00:06:01,190
to send data so on our app the

00:05:59,599 --> 00:06:03,110
subscriptions in place are mostly along

00:06:01,190 --> 00:06:05,479
the lines of the shopper app saying hey

00:06:03,110 --> 00:06:07,610
server I would like to start shopping at

00:06:05,479 --> 00:06:09,590
the store please notify me of any like

00:06:07,610 --> 00:06:12,169
changes to my shopping session such as

00:06:09,590 --> 00:06:13,820
if you know if the merchant does

00:06:12,169 --> 00:06:15,590
something or cancels the purchase or

00:06:13,820 --> 00:06:18,289
approves the purchase during the

00:06:15,590 --> 00:06:19,909
security check and for the merchants app

00:06:18,289 --> 00:06:21,860
that lives in the store this cart sort

00:06:19,909 --> 00:06:24,590
of an even like wider scope subscription

00:06:21,860 --> 00:06:27,110
of please let me know of any changes new

00:06:24,590 --> 00:06:28,880
purchases and purchases that are that

00:06:27,110 --> 00:06:30,289
are needing a security check let me know

00:06:28,880 --> 00:06:32,840
of anything that happens at this

00:06:30,289 --> 00:06:37,550
particular store that I'm supervising

00:06:32,840 --> 00:06:40,159
that I'm logged into so real-time is a

00:06:37,550 --> 00:06:42,500
giant broad topic and I realized sort of

00:06:40,159 --> 00:06:45,249
after submitting this talk that I would

00:06:42,500 --> 00:06:47,259
need to focus on something narrower

00:06:45,249 --> 00:06:49,479
and a lot could be said about exactly

00:06:47,259 --> 00:06:52,029
how you should architect the server side

00:06:49,479 --> 00:06:53,169
of things because it's very difficult if

00:06:52,029 --> 00:06:55,329
you're gonna do it right particularly

00:06:53,169 --> 00:06:58,029
for this kind of app but for this talk

00:06:55,329 --> 00:06:59,769
I'm gonna focus on the client and I I do

00:06:58,029 --> 00:07:02,709
have a QA session that's that's

00:06:59,769 --> 00:07:03,999
scheduled for tomorrow so if you've got

00:07:02,709 --> 00:07:05,379
any questions for what I'd recommend on

00:07:03,999 --> 00:07:08,109
the server side happy to answer those

00:07:05,379 --> 00:07:10,109
but this talk will just be sort of on

00:07:08,109 --> 00:07:12,639
the client side architectural patterns

00:07:10,109 --> 00:07:13,929
so a lot to be said about the server but

00:07:12,639 --> 00:07:17,679
it would be out of scope and would have

00:07:13,929 --> 00:07:19,389
to be a separate talk so part of it

00:07:17,679 --> 00:07:21,099
being difficult to find the literature I

00:07:19,389 --> 00:07:23,829
need to sort of compare how our approach

00:07:21,099 --> 00:07:25,179
is to other things is that I think

00:07:23,829 --> 00:07:27,639
everyone has a different idea of what

00:07:25,179 --> 00:07:29,139
real time means and I think maybe being

00:07:27,639 --> 00:07:31,149
able to qualify these things and

00:07:29,139 --> 00:07:33,549
introducing some terminology might help

00:07:31,149 --> 00:07:35,649
people place where they are on that sort

00:07:33,549 --> 00:07:37,179
of difficulty scale as they're maybe

00:07:35,649 --> 00:07:39,309
planning out features that they want to

00:07:37,179 --> 00:07:42,729
add to their apps or make their apps

00:07:39,309 --> 00:07:44,349
more real time so I don't stand by these

00:07:42,729 --> 00:07:46,089
names but they're good enough so I'd say

00:07:44,349 --> 00:07:50,409
the first degree of real-time is

00:07:46,089 --> 00:07:52,029
so-called nice to have real time and a

00:07:50,409 --> 00:07:54,429
very standard example of this would be

00:07:52,029 --> 00:07:56,319
getting rid of a refresh button so

00:07:54,429 --> 00:07:57,849
chances are you could say you've already

00:07:56,319 --> 00:08:01,319
you already have an app that's working

00:07:57,849 --> 00:08:04,809
it's largely request/response based and

00:08:01,319 --> 00:08:06,399
a product project manager comes along

00:08:04,809 --> 00:08:09,159
and says like it's pretty annoying that

00:08:06,399 --> 00:08:10,689
we still you know it's 2018 and you

00:08:09,159 --> 00:08:12,909
still have to press that refresh button

00:08:10,689 --> 00:08:15,459
to get the latest data let's fix that

00:08:12,909 --> 00:08:17,679
how do we go about doing that and that's

00:08:15,459 --> 00:08:19,959
an example of sort of nice to have real

00:08:17,679 --> 00:08:21,939
time where it's not completely critical

00:08:19,959 --> 00:08:24,669
to your product but it could be sort of

00:08:21,939 --> 00:08:26,949
like bolted on to your existing system

00:08:24,669 --> 00:08:28,659
or introduced in a way that doesn't

00:08:26,949 --> 00:08:31,329
involve like rebuilding everything from

00:08:28,659 --> 00:08:32,860
the ground up so a common approach and

00:08:31,329 --> 00:08:34,479
one that we used at one point is you

00:08:32,860 --> 00:08:36,579
have something like rails which

00:08:34,479 --> 00:08:39,129
certainly five years ago didn't have

00:08:36,579 --> 00:08:40,839
tons of it didn't have action cable it

00:08:39,129 --> 00:08:43,059
didn't have sort of WebSockets support

00:08:40,839 --> 00:08:44,980
so it was very common to use a system

00:08:43,059 --> 00:08:46,660
like pusher so that you didn't have to

00:08:44,980 --> 00:08:48,970
teach rails how to maintain a persistent

00:08:46,660 --> 00:08:50,829
connection to the client you let pusher

00:08:48,970 --> 00:08:52,809
do that you tell your clients to connect

00:08:50,829 --> 00:08:56,649
to pusher then all rails has to do is

00:08:52,809 --> 00:08:58,540
tell pusher that stuff changed so that's

00:08:56,649 --> 00:09:01,840
kind of an example of the sort of

00:08:58,540 --> 00:09:04,180
nice to have real time which the pattern

00:09:01,840 --> 00:09:06,460
is the server needs to add some code to

00:09:04,180 --> 00:09:09,340
start broadcasting events the client

00:09:06,460 --> 00:09:13,360
needs to start subscribing to specific

00:09:09,340 --> 00:09:15,640
event names and then the easiest thing

00:09:13,360 --> 00:09:17,350
that you can do depending depending on

00:09:15,640 --> 00:09:18,940
what data that you can sort of fit into

00:09:17,350 --> 00:09:22,150
that payload that needs to be sent out

00:09:18,940 --> 00:09:23,770
to everybody you may or may not on the

00:09:22,150 --> 00:09:25,330
client need to just like hit that same

00:09:23,770 --> 00:09:28,270
endpoint that you used to hit when you

00:09:25,330 --> 00:09:30,550
tap the refresh button sometimes that

00:09:28,270 --> 00:09:32,380
that notification that data change

00:09:30,550 --> 00:09:34,420
payload is so custom tailor to a

00:09:32,380 --> 00:09:36,070
specific client that you can't share

00:09:34,420 --> 00:09:37,450
that with everybody but I'm starting to

00:09:36,070 --> 00:09:41,080
get into stuff that's on the sort of

00:09:37,450 --> 00:09:43,660
server-side stuff but this is all sort

00:09:41,080 --> 00:09:45,990
of within me like the easiest degree of

00:09:43,660 --> 00:09:48,520
making things more real-time in your app

00:09:45,990 --> 00:09:50,410
so the second one which is also name ID

00:09:48,520 --> 00:09:52,720
not not sure I'm in love with but it's

00:09:50,410 --> 00:09:54,550
basically if you have I call it single

00:09:52,720 --> 00:09:58,450
page real-time which is basically you

00:09:54,550 --> 00:10:00,940
are using a much more refined and robust

00:09:58,450 --> 00:10:04,030
server-side mechanism for publishing and

00:10:00,940 --> 00:10:07,300
maintaining synchronicity with all of

00:10:04,030 --> 00:10:10,630
your connected clients but on the client

00:10:07,300 --> 00:10:12,730
side the data that the server is sending

00:10:10,630 --> 00:10:16,060
you is decoupled from any kind of

00:10:12,730 --> 00:10:18,400
client-side navigation so for instance

00:10:16,060 --> 00:10:20,230
you could think of a having an admin

00:10:18,400 --> 00:10:22,750
dashboard where one page or maybe even

00:10:20,230 --> 00:10:24,420
one component opens a connection to some

00:10:22,750 --> 00:10:26,260
server and starts getting lives

00:10:24,420 --> 00:10:28,720
statistics coming into it and

00:10:26,260 --> 00:10:32,290
progressively updating some graph that

00:10:28,720 --> 00:10:37,120
shifts over over time that definitely

00:10:32,290 --> 00:10:41,260
involves some real like server back-end

00:10:37,120 --> 00:10:43,510
might but it's you're never going to get

00:10:41,260 --> 00:10:45,100
an event sent to that component that

00:10:43,510 --> 00:10:46,840
causes the screen that you're on to

00:10:45,100 --> 00:10:48,970
actually shift you're not going to it's

00:10:46,840 --> 00:10:50,610
not gonna make you navigate away and in

00:10:48,970 --> 00:10:52,990
this way this is a very like

00:10:50,610 --> 00:10:55,420
self-contained real time that is

00:10:52,990 --> 00:10:57,670
constrained in that way to as so as to

00:10:55,420 --> 00:10:59,770
not get very so as to not be very

00:10:57,670 --> 00:11:02,230
difficult to to write because everything

00:10:59,770 --> 00:11:03,790
is contained in this little world or

00:11:02,230 --> 00:11:07,090
component where you get a sort of view

00:11:03,790 --> 00:11:09,400
into some real time piece of data so

00:11:07,090 --> 00:11:10,660
robust server-side subscription

00:11:09,400 --> 00:11:12,190
management all these things that are

00:11:10,660 --> 00:11:14,500
difficult to do but

00:11:12,190 --> 00:11:16,389
constrained to a single page or a single

00:11:14,500 --> 00:11:18,279
component and the messages that you get

00:11:16,389 --> 00:11:19,690
from the server are only pretty much

00:11:18,279 --> 00:11:22,060
going to amount to re-rendering

00:11:19,690 --> 00:11:24,730
that view that component at page iran

00:11:22,060 --> 00:11:26,649
but never sort of deeply integrate with

00:11:24,730 --> 00:11:28,209
the state of your app and what what

00:11:26,649 --> 00:11:30,939
you're currently navigating and looking

00:11:28,209 --> 00:11:33,370
at so it express things the sort of meme

00:11:30,939 --> 00:11:35,500
terminology you start off with having no

00:11:33,370 --> 00:11:37,420
real time you just have a refresh button

00:11:35,500 --> 00:11:39,370
in your product you have nice to have

00:11:37,420 --> 00:11:41,889
real time so you've added pusher to your

00:11:39,370 --> 00:11:44,110
rails app and then you have single page

00:11:41,889 --> 00:11:45,759
real time which is a robust subscription

00:11:44,110 --> 00:11:47,980
mechanism but all constrained in a

00:11:45,759 --> 00:11:51,370
single client side component so what's

00:11:47,980 --> 00:11:56,560
the third one well I guess I call it

00:11:51,370 --> 00:11:58,180
deep real-time and I would say that this

00:11:56,560 --> 00:11:59,889
is this is where you start to get into

00:11:58,180 --> 00:12:01,120
the realm of like uber and sort of the

00:11:59,889 --> 00:12:03,040
realm of the problems that I've had to

00:12:01,120 --> 00:12:04,870
solve for for my app and that's when

00:12:03,040 --> 00:12:07,029
that's when the data that the server can

00:12:04,870 --> 00:12:08,620
send you has implications on like where

00:12:07,029 --> 00:12:10,180
you are in the app like what you're

00:12:08,620 --> 00:12:13,180
currently looking at which page you're

00:12:10,180 --> 00:12:15,879
on and when you start getting into that

00:12:13,180 --> 00:12:17,040
particular problem set you it you

00:12:15,879 --> 00:12:19,720
realize you're in a completely different

00:12:17,040 --> 00:12:21,189
territory and a lot of the tools that

00:12:19,720 --> 00:12:22,720
you might normally reach for suddenly

00:12:21,189 --> 00:12:26,259
break in weird ways and don't really

00:12:22,720 --> 00:12:27,699
seem to fit this mental model so in

00:12:26,259 --> 00:12:29,709
other words now the server can start

00:12:27,699 --> 00:12:31,149
sending you things that say you can't

00:12:29,709 --> 00:12:34,060
look at this page anymore you need to be

00:12:31,149 --> 00:12:36,490
here and you need to write your client

00:12:34,060 --> 00:12:38,589
in code in such a way that you can trust

00:12:36,490 --> 00:12:43,480
it to always do the right thing but

00:12:38,589 --> 00:12:48,730
ultimately leave the server in charge of

00:12:43,480 --> 00:12:51,610
what the state's going to be so thinking

00:12:48,730 --> 00:12:53,079
about back to the uber use case the the

00:12:51,610 --> 00:12:55,360
interaction basically starts with the

00:12:53,079 --> 00:12:57,250
passengers going to submit a request to

00:12:55,360 --> 00:12:59,800
like I would like to ride from here to

00:12:57,250 --> 00:13:02,800
here and the server is going to start

00:12:59,800 --> 00:13:04,990
looking for a driver and eventually find

00:13:02,800 --> 00:13:06,339
a driver that's going to pick up the

00:13:04,990 --> 00:13:08,980
passenger and take them to their

00:13:06,339 --> 00:13:10,870
destination and it's internally going to

00:13:08,980 --> 00:13:12,819
set this passenger session state to

00:13:10,870 --> 00:13:14,529
let's say riding I don't work it I don't

00:13:12,819 --> 00:13:16,290
work it over I don't know how this stuff

00:13:14,529 --> 00:13:20,230
all works internally but it's the same

00:13:16,290 --> 00:13:21,730
basic mechanisms so the client app that

00:13:20,230 --> 00:13:23,529
they've written is going to see this new

00:13:21,730 --> 00:13:25,320
riding stay that's been broadcast to it

00:13:23,529 --> 00:13:28,530
from some live connection presume

00:13:25,320 --> 00:13:30,000
some kind of socket and it's going to be

00:13:28,530 --> 00:13:32,100
smart enough to be like well I was on

00:13:30,000 --> 00:13:33,900
the request ride screen but this doesn't

00:13:32,100 --> 00:13:36,480
make sense for me to be here anymore now

00:13:33,900 --> 00:13:39,690
I need to be in the sort of current ride

00:13:36,480 --> 00:13:43,980
screen again if this is sounding easy

00:13:39,690 --> 00:13:46,830
just wait it's not and we'll get to that

00:13:43,980 --> 00:13:48,980
but so one of the things that sort of

00:13:46,830 --> 00:13:51,750
built into the app is this idea that

00:13:48,980 --> 00:13:54,000
there's no way to like navigate back to

00:13:51,750 --> 00:13:55,530
a state that doesn't there's no law

00:13:54,000 --> 00:13:58,800
there's no way to navigate back to a

00:13:55,530 --> 00:14:00,450
screen that that doesn't logically make

00:13:58,800 --> 00:14:02,220
sense for you to be able to look at

00:14:00,450 --> 00:14:04,050
there's all these kind of impossible

00:14:02,220 --> 00:14:06,630
states that the app prevents you from

00:14:04,050 --> 00:14:08,250
being in as part of of this solution and

00:14:06,630 --> 00:14:10,080
that's sort of a way to think about it

00:14:08,250 --> 00:14:11,940
there's all these you want to make

00:14:10,080 --> 00:14:15,090
impossible States impossible and then

00:14:11,940 --> 00:14:18,750
now bringing in the real-time aspect of

00:14:15,090 --> 00:14:21,360
it is sort of a difficult part so that

00:14:18,750 --> 00:14:23,580
was a burr our app is very similar in

00:14:21,360 --> 00:14:25,710
that when the shopper is basically if

00:14:23,580 --> 00:14:27,090
whenever there's an exchange that takes

00:14:25,710 --> 00:14:29,160
place where it's like kind of a handoff

00:14:27,090 --> 00:14:31,740
between the the shopper and the

00:14:29,160 --> 00:14:34,080
merchants we have these similar problems

00:14:31,740 --> 00:14:36,900
so if our security algorithm kicks in

00:14:34,080 --> 00:14:39,030
and says you've had you know so many

00:14:36,900 --> 00:14:40,830
purchases where you were in bag checked

00:14:39,030 --> 00:14:43,020
and you're buying all sorts of weird

00:14:40,830 --> 00:14:44,790
items or whatever it is I can't you know

00:14:43,020 --> 00:14:46,410
give away the the company secrets on how

00:14:44,790 --> 00:14:48,660
all this stuff works but if we decide

00:14:46,410 --> 00:14:51,090
that you need a bag check then you're

00:14:48,660 --> 00:14:52,440
gonna be put in a special state you as a

00:14:51,090 --> 00:14:54,630
client are going to get that message

00:14:52,440 --> 00:14:56,580
from the server the merchant app is

00:14:54,630 --> 00:14:59,190
going to get a message saying you know

00:14:56,580 --> 00:15:01,800
alerting and making we sort of have this

00:14:59,190 --> 00:15:04,980
Hardware beacon that flashes and makes

00:15:01,800 --> 00:15:08,970
noise to alert people that sort of a

00:15:04,980 --> 00:15:10,530
manual intervention is needed and so the

00:15:08,970 --> 00:15:13,530
employee is going to see this merchant

00:15:10,530 --> 00:15:17,070
app that's now beeping and making noise

00:15:13,530 --> 00:15:18,390
and flashing and they're going to do the

00:15:17,070 --> 00:15:19,980
bag check make sure all the items are

00:15:18,390 --> 00:15:21,930
there and everything is as what you

00:15:19,980 --> 00:15:23,280
expect and then they approve the

00:15:21,930 --> 00:15:24,630
purchase and then that's going to Brod

00:15:23,280 --> 00:15:26,220
that's going to set the state of the

00:15:24,630 --> 00:15:28,050
purchase to complete which gets

00:15:26,220 --> 00:15:29,820
broadcasted to everyone that subscribed

00:15:28,050 --> 00:15:31,230
to it and the shopper app needs to be

00:15:29,820 --> 00:15:33,330
smart enough to go to the receipt screen

00:15:31,230 --> 00:15:36,900
again just reading the stuff out loud

00:15:33,330 --> 00:15:38,730
sounds easy but it's not so it's very

00:15:36,900 --> 00:15:41,100
difficult to actually get the stuff

00:15:38,730 --> 00:15:42,260
and I've spent a long time trying a

00:15:41,100 --> 00:15:45,209
bunch of different patterns that never

00:15:42,260 --> 00:15:47,399
quite fit and I'd always try to also

00:15:45,209 --> 00:15:50,459
like you know I work I mostly react but

00:15:47,399 --> 00:15:51,750
I also keep a pulse on on what all I'm

00:15:50,459 --> 00:15:54,180
sorry I think I said that wrong mostly

00:15:51,750 --> 00:15:55,410
work on ember but I keep pulse on

00:15:54,180 --> 00:15:57,690
whatever what's going on the react

00:15:55,410 --> 00:16:00,120
community and see if maybe maybe Redux

00:15:57,690 --> 00:16:02,820
fits in here maybe mob X maybe some

00:16:00,120 --> 00:16:06,029
other thing so tried a lot of things and

00:16:02,820 --> 00:16:07,139
I think I think I'm a lot closer to to

00:16:06,029 --> 00:16:12,300
something which is what I'm presenting

00:16:07,139 --> 00:16:14,070
on so what I found is that having worked

00:16:12,300 --> 00:16:17,370
on ember and having built lots of apps

00:16:14,070 --> 00:16:21,540
that were typically facing like standard

00:16:17,370 --> 00:16:23,459
desktop browser a lot of my go-to tools

00:16:21,540 --> 00:16:24,930
for how do I build this how do I use

00:16:23,459 --> 00:16:25,589
promises how do I write this

00:16:24,930 --> 00:16:27,420
clickhandler

00:16:25,589 --> 00:16:30,449
how do I change the state of the app how

00:16:27,420 --> 00:16:33,149
do I transition between screens a lot of

00:16:30,449 --> 00:16:35,610
these tools and my tool kit started to

00:16:33,149 --> 00:16:38,940
just not make sense when I had to deal

00:16:35,610 --> 00:16:40,589
with with mobile and you'd think that it

00:16:38,940 --> 00:16:43,290
would be more commonality but all these

00:16:40,589 --> 00:16:45,209
these little ways where the assumptions

00:16:43,290 --> 00:16:50,190
were just slightly different we're

00:16:45,209 --> 00:16:51,899
constantly trolling me and and I think

00:16:50,190 --> 00:16:53,760
there's one anti-pattern in particular

00:16:51,899 --> 00:16:55,110
which is hard to don't like so many

00:16:53,760 --> 00:16:57,690
other things it's so hard to put a name

00:16:55,110 --> 00:16:59,579
to but I would call this pattern which

00:16:57,690 --> 00:17:01,290
you might find in lots of sort of intro

00:16:59,579 --> 00:17:05,540
tutorials for how to build web apps the

00:17:01,290 --> 00:17:08,160
to break the app and fix it approach so

00:17:05,540 --> 00:17:09,959
you this is kind of pseudocode that's a

00:17:08,160 --> 00:17:11,939
mixture of how things look in ember and

00:17:09,959 --> 00:17:14,880
and react in whatever your favorite sort

00:17:11,939 --> 00:17:18,270
of component or framework library

00:17:14,880 --> 00:17:19,709
whatever you want to call it this is an

00:17:18,270 --> 00:17:22,020
example of something you might see on a

00:17:19,709 --> 00:17:24,360
sort of an intro page how do I do X how

00:17:22,020 --> 00:17:26,490
do I do Y and this would be how do i

00:17:24,360 --> 00:17:29,250
implement the login button on this page

00:17:26,490 --> 00:17:31,140
so assuming the user has already filled

00:17:29,250 --> 00:17:33,270
out their username and other information

00:17:31,140 --> 00:17:36,240
and they tap login you take this data

00:17:33,270 --> 00:17:37,710
and then you hit the server with it you

00:17:36,240 --> 00:17:39,780
would wait the promise that comes back

00:17:37,710 --> 00:17:42,929
from hitting the server and if the

00:17:39,780 --> 00:17:45,809
response is a success then there's kind

00:17:42,929 --> 00:17:48,929
of this two-phase process of like update

00:17:45,809 --> 00:17:51,480
the state but then transition to where I

00:17:48,929 --> 00:17:52,440
should should go but this is kind of

00:17:51,480 --> 00:17:54,990
like a two-phase

00:17:52,440 --> 00:17:56,370
like a dual right approach and I

00:17:54,990 --> 00:17:57,600
consider it sort of breaking the app and

00:17:56,370 --> 00:18:00,450
fixing it because it's like at this

00:17:57,600 --> 00:18:02,940
point whether you model this as like a

00:18:00,450 --> 00:18:04,919
redux dispatched event or some other way

00:18:02,940 --> 00:18:07,080
of observing state changes or mutating

00:18:04,919 --> 00:18:08,879
some shared state if this were the only

00:18:07,080 --> 00:18:10,289
thing that would happen then you've left

00:18:08,879 --> 00:18:10,799
the app in a state that doesn't make

00:18:10,289 --> 00:18:13,049
sense

00:18:10,799 --> 00:18:16,309
specifically because why would you ever

00:18:13,049 --> 00:18:18,919
be continuing to display a login page if

00:18:16,309 --> 00:18:22,200
your app knows that a user is logged in

00:18:18,919 --> 00:18:23,970
so we'll get to what is looking like but

00:18:22,200 --> 00:18:26,549
this is the part that's kind of suspect

00:18:23,970 --> 00:18:28,919
why do I need to write this part we know

00:18:26,549 --> 00:18:30,870
that obviously we need to publish some

00:18:28,919 --> 00:18:32,759
state change but why do we need to do

00:18:30,870 --> 00:18:34,860
the second step and isn't it a little

00:18:32,759 --> 00:18:36,419
weird that we're kind of even that even

00:18:34,860 --> 00:18:38,250
if this synchronously happens right

00:18:36,419 --> 00:18:42,450
after something something's a little off

00:18:38,250 --> 00:18:44,580
here and I think particularly if you're

00:18:42,450 --> 00:18:46,320
used to building you know react Web Apps

00:18:44,580 --> 00:18:51,090
ember web apps you've got sort of an

00:18:46,320 --> 00:18:52,169
idea for what encapsulation means so for

00:18:51,090 --> 00:18:54,000
instance it's it might be really

00:18:52,169 --> 00:18:56,700
tempting to lock away a certain piece of

00:18:54,000 --> 00:18:57,960
logic into a specific component because

00:18:56,700 --> 00:19:00,000
you think okay this is the login

00:18:57,960 --> 00:19:01,889
component this knows how to log people

00:19:00,000 --> 00:19:04,620
in and should just know where to go

00:19:01,889 --> 00:19:05,850
after login success seems reasonable but

00:19:04,620 --> 00:19:07,019
this is one of those places where if

00:19:05,850 --> 00:19:08,789
you're building real time that's going

00:19:07,019 --> 00:19:10,649
to come back and troll you because you

00:19:08,789 --> 00:19:12,570
can't predict what the server state is

00:19:10,649 --> 00:19:14,330
going to have like the server if you

00:19:12,570 --> 00:19:16,529
happen to have a stream of

00:19:14,330 --> 00:19:18,210
authentication updates coming from the

00:19:16,529 --> 00:19:20,279
server then the server any point can say

00:19:18,210 --> 00:19:22,620
your sessions timed out you're no longer

00:19:20,279 --> 00:19:25,259
logged in and stopped displaying

00:19:22,620 --> 00:19:28,110
whatever screen that you're on so the

00:19:25,259 --> 00:19:30,629
idea that one component would know what

00:19:28,110 --> 00:19:32,460
to do in that case of you know no longer

00:19:30,629 --> 00:19:34,409
being logged in or logging in and

00:19:32,460 --> 00:19:36,299
suddenly having a session it makes less

00:19:34,409 --> 00:19:39,000
and less sense when when your server is

00:19:36,299 --> 00:19:40,080
ultimately the thing in charge so some

00:19:39,000 --> 00:19:41,850
of you are thinking this sounds like

00:19:40,080 --> 00:19:43,080
kind of like a Redux II thing right this

00:19:41,850 --> 00:19:45,299
sounds like maybe there's some global

00:19:43,080 --> 00:19:46,889
concern where you need to decide what to

00:19:45,299 --> 00:19:49,440
do and you can funnel something through

00:19:46,889 --> 00:19:52,889
the top level that says you know logged

00:19:49,440 --> 00:19:56,519
in and decide where to go I I get the

00:19:52,889 --> 00:19:57,779
intuition but certainly if you're some

00:19:56,519 --> 00:19:58,980
if you're saying that I should start

00:19:57,779 --> 00:20:00,559
putting all like the component local

00:19:58,980 --> 00:20:02,789
state and redux I'm not a fan of that

00:20:00,559 --> 00:20:03,889
there's plenty of people about tons of

00:20:02,789 --> 00:20:06,179
opinions you could say that more

00:20:03,889 --> 00:20:07,470
eloquently than me but more

00:20:06,179 --> 00:20:09,419
Pacific to this problem is that I looked

00:20:07,470 --> 00:20:12,749
around a lot and I really couldn't find

00:20:09,419 --> 00:20:14,389
a reed eccentric library that solved all

00:20:12,749 --> 00:20:16,769
of the different mobile navigation

00:20:14,389 --> 00:20:18,059
problems that that need to be solved in

00:20:16,769 --> 00:20:18,619
order for me to sort of take it

00:20:18,059 --> 00:20:22,440
seriously

00:20:18,619 --> 00:20:23,940
so naturally I figured since my apps

00:20:22,440 --> 00:20:25,590
pretty much the same as ubers as far as

00:20:23,940 --> 00:20:28,860
this interaction goes I looked at what

00:20:25,590 --> 00:20:30,269
they did and so uber uses this library

00:20:28,860 --> 00:20:33,269
that they open sourced some time last

00:20:30,269 --> 00:20:38,100
year called ribs are IB for routers

00:20:33,269 --> 00:20:39,749
interactors and builders and a rib is

00:20:38,100 --> 00:20:42,330
basically any one of these nodes

00:20:39,749 --> 00:20:44,399
represents a rib it's got some some

00:20:42,330 --> 00:20:46,740
stateful data to it and an optional view

00:20:44,399 --> 00:20:47,850
that it might render and the idea is

00:20:46,740 --> 00:20:51,509
that you should try and structure

00:20:47,850 --> 00:20:55,379
yourself structure your app into a tree

00:20:51,509 --> 00:21:00,539
of potential like branches and ribs such

00:20:55,379 --> 00:21:02,999
that and in this case actually let's

00:21:00,539 --> 00:21:04,619
lead by example so this is an example

00:21:02,999 --> 00:21:08,789
where you start the app and you're on

00:21:04,619 --> 00:21:10,379
these sort of login screen and then the

00:21:08,789 --> 00:21:12,659
root node is basically going to be in

00:21:10,379 --> 00:21:14,490
charge of basically listening to an

00:21:12,659 --> 00:21:16,110
authentic an observable like an RX

00:21:14,490 --> 00:21:17,639
observable that's broadcasting events

00:21:16,110 --> 00:21:19,529
every time that there's a change to user

00:21:17,639 --> 00:21:21,869
authentication and they're gonna log in

00:21:19,529 --> 00:21:26,669
to this page that's who ultimately going

00:21:21,869 --> 00:21:27,960
to sort of do a flux style cyclical it's

00:21:26,669 --> 00:21:29,490
going to cause an event to be fired on

00:21:27,960 --> 00:21:33,749
that on the route the routes going to

00:21:29,490 --> 00:21:35,309
capture that event it's going to be like

00:21:33,749 --> 00:21:37,409
oh well now the person is logged in this

00:21:35,309 --> 00:21:39,450
whole like logged out node doesn't make

00:21:37,409 --> 00:21:41,610
sense to this whole subtree doesn't make

00:21:39,450 --> 00:21:43,830
sense to exist anymore so it detaches

00:21:41,610 --> 00:21:47,369
cleans up after itself and then installs

00:21:43,830 --> 00:21:48,720
a logged entry in its place so you can

00:21:47,369 --> 00:21:50,879
sort of get a sense there's something

00:21:48,720 --> 00:21:52,769
Redux e happening here there's sort of

00:21:50,879 --> 00:21:55,169
like have the route most thing be

00:21:52,769 --> 00:21:58,499
concerned with with how to handle these

00:21:55,169 --> 00:21:59,820
transitions um so yeah ribs give you

00:21:58,499 --> 00:22:03,230
this sort of like reactive tree

00:21:59,820 --> 00:22:06,210
architecture and there's a sort of clear

00:22:03,230 --> 00:22:08,190
model of like which nodes in charge of

00:22:06,210 --> 00:22:09,330
what and in and even though the example

00:22:08,190 --> 00:22:11,399
I gave before is sort of authentication

00:22:09,330 --> 00:22:13,139
being handled at the root there's all

00:22:11,399 --> 00:22:15,029
these sort of sub trees where they are

00:22:13,139 --> 00:22:16,679
only concerned with listening to changes

00:22:15,029 --> 00:22:20,160
to an observable that really belongs to

00:22:16,679 --> 00:22:23,340
them so it's not Redux but it's redux II

00:22:20,160 --> 00:22:24,900
and I mean ultimately ribs is it's not a

00:22:23,340 --> 00:22:27,510
JavaScript library it's actually a

00:22:24,900 --> 00:22:30,330
framework for that's implemented in both

00:22:27,510 --> 00:22:32,370
iOS and Android and the idea is if you

00:22:30,330 --> 00:22:34,140
can if you can propose a new feature you

00:22:32,370 --> 00:22:35,730
want to build in terms of ribs then you

00:22:34,140 --> 00:22:37,590
can hand that to your Android team your

00:22:35,730 --> 00:22:40,080
iOS team and and they'll build the same

00:22:37,590 --> 00:22:41,700
things using Android or iOS but they're

00:22:40,080 --> 00:22:43,200
both like building the same components

00:22:41,700 --> 00:22:45,240
that you've agreed to build build ahead

00:22:43,200 --> 00:22:46,890
of time versus having this try and

00:22:45,240 --> 00:22:51,300
converge on the same designs with

00:22:46,890 --> 00:22:54,240
Android specific UI and iOS specific UI

00:22:51,300 --> 00:22:55,470
and components and stuff like that so

00:22:54,240 --> 00:22:57,390
this there's not really an option of

00:22:55,470 --> 00:22:59,190
like I'll just use ribs it's mostly just

00:22:57,390 --> 00:23:01,890
an idea of like what are we gonna try

00:22:59,190 --> 00:23:02,730
and build and model this thing off of so

00:23:01,890 --> 00:23:04,830
one thing I didn't really like about

00:23:02,730 --> 00:23:07,020
ribs is that there's still a lot of like

00:23:04,830 --> 00:23:08,940
manual checking and detaching of like

00:23:07,020 --> 00:23:11,160
trees like the root thing has to say

00:23:08,940 --> 00:23:13,110
okay you're no longer logged in is the

00:23:11,160 --> 00:23:15,480
logged out things still attached if if

00:23:13,110 --> 00:23:17,640
it is remove it and there's a lot of

00:23:15,480 --> 00:23:20,940
like kind of mutation on sort of really

00:23:17,640 --> 00:23:22,500
sensitive parts of your app state that I

00:23:20,940 --> 00:23:23,880
didn't I didn't really like you know I'm

00:23:22,500 --> 00:23:26,070
used to doing things and ember things

00:23:23,880 --> 00:23:27,870
are often more declarative than that as

00:23:26,070 --> 00:23:29,310
they are and react you don't ever have

00:23:27,870 --> 00:23:31,140
to say like I would like to unrendered

00:23:29,310 --> 00:23:34,110
asyou just don't return it from your

00:23:31,140 --> 00:23:37,800
render hook I shouldn't use a hook

00:23:34,110 --> 00:23:39,450
anymore that means something else now so

00:23:37,800 --> 00:23:40,740
the other pattern is that ribs doesn't

00:23:39,450 --> 00:23:42,390
really come with the sort of community

00:23:40,740 --> 00:23:44,160
standard for how to build like really

00:23:42,390 --> 00:23:46,470
complicated navigational structures it's

00:23:44,160 --> 00:23:48,600
just how you model your app State and

00:23:46,470 --> 00:23:50,760
when I actually use the uber app there's

00:23:48,600 --> 00:23:53,520
not tons of these like nested pushed

00:23:50,760 --> 00:23:55,650
States and modal's and screens and stuff

00:23:53,520 --> 00:23:57,870
a lot of its kind of flat and the

00:23:55,650 --> 00:24:01,250
flatter your app is the kind of closer

00:23:57,870 --> 00:24:03,330
to that like second sort of real-time

00:24:01,250 --> 00:24:05,610
it's just it gets a little bit easier

00:24:03,330 --> 00:24:07,110
there's less like you know multiple

00:24:05,610 --> 00:24:09,420
trees being at different depths that

00:24:07,110 --> 00:24:11,040
need to agree with each other so we like

00:24:09,420 --> 00:24:14,400
these ribs these are eye bees these

00:24:11,040 --> 00:24:16,370
rather interactive builders but we

00:24:14,400 --> 00:24:18,720
missed having models and components so

00:24:16,370 --> 00:24:21,600
so we built something called the McRib

00:24:18,720 --> 00:24:23,130
by future-proof retail called the model

00:24:21,600 --> 00:24:25,470
component router interactor builder and

00:24:23,130 --> 00:24:27,720
just to be clear this is a total joke I

00:24:25,470 --> 00:24:30,060
had to go to I need to go to wiki and

00:24:27,720 --> 00:24:31,290
basically look up the McRib because I

00:24:30,060 --> 00:24:32,610
thought maybe this would just be like

00:24:31,290 --> 00:24:33,060
this American joke that wouldn't make

00:24:32,610 --> 00:24:35,010
sense

00:24:33,060 --> 00:24:37,620
because the McRib is a sandwich that

00:24:35,010 --> 00:24:39,030
comes and goes from McDonald's and a

00:24:37,620 --> 00:24:40,380
seasonal basis and when it comes

00:24:39,030 --> 00:24:42,300
everyone gets really excited about it

00:24:40,380 --> 00:24:44,040
when it leaves everyone said and I

00:24:42,300 --> 00:24:45,720
expected maybe maybe Europeans don't

00:24:44,040 --> 00:24:48,030
know about this but turns out the McRib

00:24:45,720 --> 00:24:51,920
is actually a like full-time year-round

00:24:48,030 --> 00:24:55,320
item in Germany complete surprise to me

00:24:51,920 --> 00:24:57,840
all right so what's so difficult about

00:24:55,320 --> 00:24:59,640
all of these problems and I'm gonna need

00:24:57,840 --> 00:25:00,750
to speed it up here the answer is that

00:24:59,640 --> 00:25:03,390
there's all these different like

00:25:00,750 --> 00:25:04,170
competing ideas of trees you've got your

00:25:03,390 --> 00:25:07,080
view layer

00:25:04,170 --> 00:25:08,550
you've got your JSON data these ribs as

00:25:07,080 --> 00:25:11,040
a way of structuring your app or are

00:25:08,550 --> 00:25:13,290
also a form of trees your your your

00:25:11,040 --> 00:25:15,630
common sort of classic browser API is

00:25:13,290 --> 00:25:17,790
for for declaring all these different

00:25:15,630 --> 00:25:19,890
routes and URLs take the form of a tree

00:25:17,790 --> 00:25:22,040
and all these different API is sort of

00:25:19,890 --> 00:25:24,780
try to say okay I'll try to couple these

00:25:22,040 --> 00:25:27,690
trees to each other maybe you're like an

00:25:24,780 --> 00:25:29,430
ember for a long time and it's just more

00:25:27,690 --> 00:25:31,800
flexible now but for a long time you

00:25:29,430 --> 00:25:34,680
sort of had a approach where like your

00:25:31,800 --> 00:25:36,750
your URL tree is kind of coupled to the

00:25:34,680 --> 00:25:38,490
the UI that we intend to render and how

00:25:36,750 --> 00:25:40,410
those things get nested and it wasn't

00:25:38,490 --> 00:25:44,640
really doing me any favors when actually

00:25:40,410 --> 00:25:45,480
trying to build a mobile app so yeah all

00:25:44,640 --> 00:25:47,400
these browser-based

00:25:45,480 --> 00:25:49,080
api's are usually coupling trees

00:25:47,400 --> 00:25:50,820
together to sort of simply simplify

00:25:49,080 --> 00:25:52,770
things for you but if it's the wrong

00:25:50,820 --> 00:25:56,070
coupling it doesn't do you any favors

00:25:52,770 --> 00:25:59,040
for mobile I'm going to talk about this

00:25:56,070 --> 00:26:00,750
tree what is this tree this is the

00:25:59,040 --> 00:26:03,120
browser navigation stack it is the

00:26:00,750 --> 00:26:05,820
simplest tree and by that I mean it's a

00:26:03,120 --> 00:26:08,340
you know this stack here that you can

00:26:05,820 --> 00:26:10,860
control with backwards and forwards

00:26:08,340 --> 00:26:12,360
buttons so it's a single branch tree

00:26:10,860 --> 00:26:14,250
that you can walk forward and back on at

00:26:12,360 --> 00:26:15,990
any time that you're back along the

00:26:14,250 --> 00:26:18,120
stack and you push another frame it kind

00:26:15,990 --> 00:26:19,470
of it kind of gets rid of the forward

00:26:18,120 --> 00:26:21,990
stack and then starts you off on a new

00:26:19,470 --> 00:26:24,780
branch it's the simplest possible tree

00:26:21,990 --> 00:26:26,790
and yet a few years ago it was the most

00:26:24,780 --> 00:26:29,430
difficult kind of tree to to build

00:26:26,790 --> 00:26:32,070
around and you know in 2013 there was

00:26:29,430 --> 00:26:33,600
very common for all the JavaScript

00:26:32,070 --> 00:26:35,670
frameworks to kind of give you a

00:26:33,600 --> 00:26:37,530
solution that had broken URLs or broken

00:26:35,670 --> 00:26:39,210
back buttons and ember which is the

00:26:37,530 --> 00:26:41,880
thing that I worked on was really good

00:26:39,210 --> 00:26:43,950
as sort of pushing that forward but you

00:26:41,880 --> 00:26:45,570
know fast forward but you know six years

00:26:43,950 --> 00:26:46,809
in before that they had already

00:26:45,570 --> 00:26:50,169
introduced

00:26:46,809 --> 00:26:52,059
you know the iPhone and these concept of

00:26:50,169 --> 00:26:53,649
pushing all these stacks to navigation

00:26:52,059 --> 00:26:55,960
controllers and all these things and and

00:26:53,649 --> 00:26:58,600
if you imagine looking all that all the

00:26:55,960 --> 00:27:00,940
different tabs of a very basic app all

00:26:58,600 --> 00:27:02,799
these different tabs have their own sort

00:27:00,940 --> 00:27:04,690
of complicated States where things can

00:27:02,799 --> 00:27:06,370
be pushed to each other and those those

00:27:04,690 --> 00:27:10,090
nodes can have sub children and sub

00:27:06,370 --> 00:27:12,340
stacks so with all these different trees

00:27:10,090 --> 00:27:14,889
it's very important for the rules to be

00:27:12,340 --> 00:27:17,559
simple and I'm gonna try it in to speed

00:27:14,889 --> 00:27:19,240
it along a bit here so I want to make a

00:27:17,559 --> 00:27:21,269
quick call out to a library that I think

00:27:19,240 --> 00:27:23,799
is very fantastically designed and and

00:27:21,269 --> 00:27:24,909
that's react navigation and then that's

00:27:23,799 --> 00:27:27,549
something that you can use if you're

00:27:24,909 --> 00:27:30,309
building react native apps quick show of

00:27:27,549 --> 00:27:32,200
hands who's using react navigation okay

00:27:30,309 --> 00:27:35,860
more people using that the number that's

00:27:32,200 --> 00:27:37,450
fair and I love this library I mean just

00:27:35,860 --> 00:27:39,610
this woman who wants to build his own

00:27:37,450 --> 00:27:40,480
sort of bring some of this to Ember I

00:27:39,610 --> 00:27:43,299
think they have a really powerful

00:27:40,480 --> 00:27:44,860
abstraction for a navigator where you

00:27:43,299 --> 00:27:47,440
can have stacks and you can have tabs

00:27:44,860 --> 00:27:49,840
and you can have switch navigators when

00:27:47,440 --> 00:27:51,220
you're you know so that when you log out

00:27:49,840 --> 00:27:52,990
you don't maintain state of all the

00:27:51,220 --> 00:27:55,179
logged in stuff it's a very simple

00:27:52,990 --> 00:27:57,369
mental model and it's very easy to like

00:27:55,179 --> 00:27:59,019
refactor and iterate and take something

00:27:57,369 --> 00:28:01,779
that was a simple screen and promote it

00:27:59,019 --> 00:28:02,919
so I basically I want to build this in

00:28:01,779 --> 00:28:04,330
Ember because I don't really have

00:28:02,919 --> 00:28:05,529
another option at this point but there's

00:28:04,330 --> 00:28:07,899
one thing that's kind of missing from

00:28:05,529 --> 00:28:09,369
react navigation and that's the idea

00:28:07,899 --> 00:28:12,789
that you might have constraints that are

00:28:09,369 --> 00:28:14,889
driven by the current state of data so

00:28:12,789 --> 00:28:17,110
react navigations mental model or how

00:28:14,889 --> 00:28:19,059
they tell you to use it is basically let

00:28:17,110 --> 00:28:21,129
react navigation handle everything that

00:28:19,059 --> 00:28:22,269
has to do with navigation state don't

00:28:21,129 --> 00:28:24,220
try and touch that don't try to use

00:28:22,269 --> 00:28:26,320
Redux for that they used to sort of let

00:28:24,220 --> 00:28:27,940
you use Redux no longer now they want

00:28:26,320 --> 00:28:29,470
you now the only place that Redux comes

00:28:27,940 --> 00:28:31,509
in is if there's any kind of state that

00:28:29,470 --> 00:28:33,639
you might want to share with another one

00:28:31,509 --> 00:28:35,379
you need to use like a Redux tour and

00:28:33,639 --> 00:28:37,119
then start using higher-order components

00:28:35,379 --> 00:28:38,379
like if you have a shared theme between

00:28:37,119 --> 00:28:39,879
all these things that you want to be

00:28:38,379 --> 00:28:42,070
able to change and have it update

00:28:39,879 --> 00:28:45,610
everywhere then that's what you use you

00:28:42,070 --> 00:28:46,779
use redux but what if that that other

00:28:45,610 --> 00:28:48,490
state that you're supposed to put in

00:28:46,779 --> 00:28:50,019
redux has implications on where you can

00:28:48,490 --> 00:28:51,549
navigate well then you wind up with a

00:28:50,019 --> 00:28:52,869
situation where redux sees something

00:28:51,549 --> 00:28:54,279
that needs to change tells a navigator

00:28:52,869 --> 00:28:56,769
but they they kind of criss cross

00:28:54,279 --> 00:28:59,019
because they're kind of two different is

00:28:56,769 --> 00:29:00,380
a previous talk that said like you you

00:28:59,019 --> 00:29:03,559
probably shouldn't try to mix two

00:29:00,380 --> 00:29:04,730
and state machine approaches kind of I

00:29:03,559 --> 00:29:06,160
want to pick one or the other but when

00:29:04,730 --> 00:29:08,929
you start thinking about this sort of

00:29:06,160 --> 00:29:11,630
real-time solution are these real-time

00:29:08,929 --> 00:29:13,630
problems you realize that the navigator

00:29:11,630 --> 00:29:15,710
and whatever your Trek and stayed in

00:29:13,630 --> 00:29:18,559
they kind of need to be the same thing

00:29:15,710 --> 00:29:20,510
so what we've been doing at future-proof

00:29:18,559 --> 00:29:21,980
is working on an add-on that is not

00:29:20,510 --> 00:29:24,650
released yet because it's kind of still

00:29:21,980 --> 00:29:26,059
a meshed in one of our apps but it's

00:29:24,650 --> 00:29:27,230
kind of scoping out or staking our

00:29:26,059 --> 00:29:29,480
claims to something called ember

00:29:27,230 --> 00:29:30,559
navigator which is really based on react

00:29:29,480 --> 00:29:34,039
navigation because they've done such a

00:29:30,559 --> 00:29:36,530
good job but with a additional support

00:29:34,039 --> 00:29:38,230
for live data constraints so this thing

00:29:36,530 --> 00:29:40,190
that we need in order for us to actually

00:29:38,230 --> 00:29:44,120
build our app without a bunch of

00:29:40,190 --> 00:29:45,890
duplication and and some ugly logic so

00:29:44,120 --> 00:29:47,390
one thing that we have this is I guess

00:29:45,890 --> 00:29:49,640
isn't it too important but there is a

00:29:47,390 --> 00:29:52,250
separate state tree separate from

00:29:49,640 --> 00:29:55,580
components I'll just skip that slide and

00:29:52,250 --> 00:29:57,530
this is an example of kind of what it

00:29:55,580 --> 00:30:00,020
looks like this is a subset of our sort

00:29:57,530 --> 00:30:01,789
of like stack that we use that this is

00:30:00,020 --> 00:30:03,110
this is the sort of section of the app

00:30:01,789 --> 00:30:05,419
where you're actually monitoring your

00:30:03,110 --> 00:30:06,770
active purchase and the idea here is

00:30:05,419 --> 00:30:08,990
that you can just define these

00:30:06,770 --> 00:30:11,179
constraints that say when the purchase

00:30:08,990 --> 00:30:14,179
date is this you can go here here here

00:30:11,179 --> 00:30:15,669
and I'm running out of time here but the

00:30:14,179 --> 00:30:19,070
idea here is that when you're navigating

00:30:15,669 --> 00:30:21,320
from outside of of this particular route

00:30:19,070 --> 00:30:23,059
into it all you need to do is say I'd

00:30:21,320 --> 00:30:24,650
like to try navigate to active purchase

00:30:23,059 --> 00:30:26,990
and the constraint is smart enough to be

00:30:24,650 --> 00:30:29,179
like okay well the purchase is in this

00:30:26,990 --> 00:30:30,770
state so go here so nothing outside of

00:30:29,179 --> 00:30:32,059
it needs to know anything about all

00:30:30,770 --> 00:30:33,520
these different purchase States or

00:30:32,059 --> 00:30:35,539
nestings or whatnot

00:30:33,520 --> 00:30:38,350
so it automatically goes to the correct

00:30:35,539 --> 00:30:40,820
sub route and when you're inside of it

00:30:38,350 --> 00:30:42,530
then you don't have to have any sort of

00:30:40,820 --> 00:30:44,000
logic for like ok I've changed a state

00:30:42,530 --> 00:30:44,659
if I've submitted the purchase or it's

00:30:44,000 --> 00:30:46,640
been canceled

00:30:44,659 --> 00:30:48,710
now I'm gonna decide as a local

00:30:46,640 --> 00:30:51,350
component where to go all this stuff is

00:30:48,710 --> 00:30:53,419
just handled for you automatically

00:30:51,350 --> 00:30:55,850
because you've taken the time to declare

00:30:53,419 --> 00:30:58,370
your constraints so the result is that

00:30:55,850 --> 00:31:00,260
you get these sort of deep real-time

00:30:58,370 --> 00:31:03,110
patterns in a way that doesn't feel very

00:31:00,260 --> 00:31:05,630
ugly and instead of this break the app

00:31:03,110 --> 00:31:07,159
and fix it you can teach the app to fix

00:31:05,630 --> 00:31:08,690
itself and maybe is the wrong way of

00:31:07,159 --> 00:31:10,490
putting it you can carefully break it or

00:31:08,690 --> 00:31:12,559
you can make it react to things as as

00:31:10,490 --> 00:31:14,200
the data changes that's

00:31:12,559 --> 00:31:19,130
for me thank you

00:31:14,200 --> 00:31:19,130

YouTube URL: https://www.youtube.com/watch?v=0HDhDQ_yde0


