Title: ReactiveConf 2018 - Chris Fuentes: Reactive iOS App Development
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Reactive iOS App Development

Apple offers the KVO (Key-Value-Observation) framework as a way to make apps reactive to model property changes, but this technology is far from comprehensive enough to serve all of the needs of a modern application developer. We'll discuss how using Realm for iOS gives us the benefits of a truly reactive paradigm in mobile development and allows us to decouple our application logic from our API layer, creating a much cleaner application architecture that lends itself to more seamless on/offline experiences.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,550 --> 00:00:18,710
hi everybody good morning all right I

00:00:16,520 --> 00:00:20,240
guess there's a lot of you here so it

00:00:18,710 --> 00:00:22,630
didn't party too hard last night or

00:00:20,240 --> 00:00:25,460
you're like me and you just come anyway

00:00:22,630 --> 00:00:26,830
so I'm Chris I'm from Microsoft and I'm

00:00:25,460 --> 00:00:29,269
gonna be talking a little bit about

00:00:26,830 --> 00:00:31,929
reactive development on mobile with

00:00:29,269 --> 00:00:35,300
realm database now before I get started

00:00:31,929 --> 00:00:36,649
this is a native mobile talk but this

00:00:35,300 --> 00:00:38,210
isn't really a native mobile talk this

00:00:36,649 --> 00:00:40,489
is a talk about design and this is a

00:00:38,210 --> 00:00:42,499
talk about patterns so just spoiler

00:00:40,489 --> 00:00:43,129
you're gonna see some Swift code try not

00:00:42,499 --> 00:00:45,109
to panic

00:00:43,129 --> 00:00:46,879
the concepts that you see are broadly

00:00:45,109 --> 00:00:48,079
applicable to a lot of technologies and

00:00:46,879 --> 00:00:49,579
roam database that I'm going to be

00:00:48,079 --> 00:00:52,429
talking about a little bit it does have

00:00:49,579 --> 00:00:54,379
a react native library so you can use it

00:00:52,429 --> 00:00:56,629
with react native I personally have it

00:00:54,379 --> 00:00:57,379
so if you have some experiences with it

00:00:56,629 --> 00:01:00,260
let me know

00:00:57,379 --> 00:01:02,659
without further ado yeah do you need a

00:01:00,260 --> 00:01:05,560
local database in your mobile

00:01:02,659 --> 00:01:08,119
application I would argue yes yes you do

00:01:05,560 --> 00:01:09,979
there are a ton of options out there

00:01:08,119 --> 00:01:12,020
nowadays it's not like the old days and

00:01:09,979 --> 00:01:14,479
then the the traditional solutions to

00:01:12,020 --> 00:01:16,880
storing data locally on their mobile

00:01:14,479 --> 00:01:18,950
device are really insufficient if you're

00:01:16,880 --> 00:01:20,270
talking from is perspective if you're

00:01:18,950 --> 00:01:22,130
using nsuserdefaults

00:01:20,270 --> 00:01:24,020
you're doing it wrong and if you're like

00:01:22,130 --> 00:01:25,250
storing it in a local JSON file or

00:01:24,020 --> 00:01:26,539
something like that you're doing it

00:01:25,250 --> 00:01:29,420
wrong these are not performant and

00:01:26,539 --> 00:01:31,490
moreover there's no reason not to use a

00:01:29,420 --> 00:01:33,079
local database nowadays because there

00:01:31,490 --> 00:01:35,030
are so many options out there and

00:01:33,079 --> 00:01:36,820
they're all great yep by this point I'd

00:01:35,030 --> 00:01:40,009
even say they're pretty battle-tested

00:01:36,820 --> 00:01:43,130
but I'd say it's not enough to use a

00:01:40,009 --> 00:01:45,289
local database no I would say you want a

00:01:43,130 --> 00:01:46,969
reactive one and what does this mean

00:01:45,289 --> 00:01:48,439
this means this is a type of database

00:01:46,969 --> 00:01:50,960
that allows you to actually observe

00:01:48,439 --> 00:01:52,819
changes to the data in your database and

00:01:50,960 --> 00:01:53,960
there's a few of these options out there

00:01:52,819 --> 00:01:56,090
nowadays I'm going to be talking about

00:01:53,960 --> 00:01:56,960
realm but there are other options out

00:01:56,090 --> 00:02:00,439
there and I'm not

00:01:56,960 --> 00:02:03,350
I like realm personally but I think any

00:02:00,439 --> 00:02:05,780
of them will work so the the basic

00:02:03,350 --> 00:02:07,670
concepts are in order to transform a

00:02:05,780 --> 00:02:09,979
traditionally imperative mobile

00:02:07,670 --> 00:02:12,260
application into a reactive one you need

00:02:09,979 --> 00:02:14,030
to just follow these two pretty simple

00:02:12,260 --> 00:02:16,490
principles one is that the local

00:02:14,030 --> 00:02:18,230
bass is the source of truth and we'll

00:02:16,490 --> 00:02:20,120
see an example of this in a minute the

00:02:18,230 --> 00:02:22,190
other is that what follows naturally is

00:02:20,120 --> 00:02:23,810
that the UI is reacting to changes in

00:02:22,190 --> 00:02:25,580
the database as I mentioned the database

00:02:23,810 --> 00:02:29,300
is reactive so when the data is changing

00:02:25,580 --> 00:02:31,190
your mobile app can react to those so

00:02:29,300 --> 00:02:32,690
what's the architecture well if your if

00:02:31,190 --> 00:02:34,550
you come from a mobile background or if

00:02:32,690 --> 00:02:37,040
you've hung out with mobile developers

00:02:34,550 --> 00:02:39,319
wherever they are you've probably heard

00:02:37,040 --> 00:02:41,720
about them talking MVC you know the

00:02:39,319 --> 00:02:43,880
model-view-controller but nowadays

00:02:41,720 --> 00:02:47,030
that's not really enough we also need

00:02:43,880 --> 00:02:48,800
this this Data Sync layer at the bottom

00:02:47,030 --> 00:02:52,120
what I call it which is on the top as

00:02:48,800 --> 00:02:54,650
database and this connects to your API

00:02:52,120 --> 00:02:58,700
or it could be push notifications or

00:02:54,650 --> 00:03:00,019
some workers whatever maybe in reactive

00:02:58,700 --> 00:03:01,519
it's awesome in reactive programming

00:03:00,019 --> 00:03:02,989
it's often said that everything is a

00:03:01,519 --> 00:03:05,030
stream and if you're a mobile developer

00:03:02,989 --> 00:03:06,920
this isn't a natural concept and so I

00:03:05,030 --> 00:03:08,000
would just challenge that for a moment

00:03:06,920 --> 00:03:10,730
and say maybe you can think of

00:03:08,000 --> 00:03:13,790
everything as an event with mobile that

00:03:10,730 --> 00:03:16,150
it's a little bit more intuitive and how

00:03:13,790 --> 00:03:18,440
does that work well you have user

00:03:16,150 --> 00:03:21,650
somewhere interacting with your app

00:03:18,440 --> 00:03:23,180
hopefully and this event comes down into

00:03:21,650 --> 00:03:25,130
the user interface that's your view and

00:03:23,180 --> 00:03:27,709
from there you're receiving the event in

00:03:25,130 --> 00:03:29,690
your view controller from there it goes

00:03:27,709 --> 00:03:32,269
into your models or your managers which

00:03:29,690 --> 00:03:35,000
are maybe singleton instances similar to

00:03:32,269 --> 00:03:37,630
stores and then from there what you're

00:03:35,000 --> 00:03:40,880
gonna do is write to your database maybe

00:03:37,630 --> 00:03:42,709
from their events propagate back up if

00:03:40,880 --> 00:03:43,850
you're using a reactive database then

00:03:42,709 --> 00:03:46,100
you've got changes occurring in the

00:03:43,850 --> 00:03:47,750
database your models are reacting to

00:03:46,100 --> 00:03:49,459
those changes and your view controllers

00:03:47,750 --> 00:03:53,299
are reacting to those changes and your

00:03:49,459 --> 00:03:56,030
views are then updated but there's also

00:03:53,299 --> 00:03:58,850
events occurring in your data sync layer

00:03:56,030 --> 00:04:00,350
so your API you could have a worker

00:03:58,850 --> 00:04:02,030
that's you know completely asynchronous

00:04:00,350 --> 00:04:03,950
that's just pulling data from your API

00:04:02,030 --> 00:04:05,810
or maybe you're receiving push

00:04:03,950 --> 00:04:07,400
notifications something like that

00:04:05,810 --> 00:04:09,410
the point is your app is completely

00:04:07,400 --> 00:04:11,780
agnostic to what the source of your data

00:04:09,410 --> 00:04:13,160
is your app doesn't care your app only

00:04:11,780 --> 00:04:14,630
cares about the local database that's

00:04:13,160 --> 00:04:16,400
your source of truth so there are events

00:04:14,630 --> 00:04:18,229
occurring between say your server or

00:04:16,400 --> 00:04:20,329
something some long-running process

00:04:18,229 --> 00:04:22,130
calculation in the background in your

00:04:20,329 --> 00:04:23,810
database is in real time being notified

00:04:22,130 --> 00:04:27,819
of these changes and your application

00:04:23,810 --> 00:04:33,169
and turn on updates so yep use

00:04:27,819 --> 00:04:34,430
and the internet is down there again

00:04:33,169 --> 00:04:36,050
this is the part that I really want you

00:04:34,430 --> 00:04:37,310
to focus on because this is not the

00:04:36,050 --> 00:04:39,919
traditional model that's talked about in

00:04:37,310 --> 00:04:42,199
mobile so as I mentioned I like realm

00:04:39,919 --> 00:04:43,550
it's but there are several alternatives

00:04:42,199 --> 00:04:46,009
out there I'm not an evangelist for

00:04:43,550 --> 00:04:48,380
realm I'm not involved with the company

00:04:46,009 --> 00:04:49,849
in any way but for me as somebody that's

00:04:48,380 --> 00:04:52,069
coming from a rails and a sequel

00:04:49,849 --> 00:04:53,479
back-end I I kind of like how it's

00:04:52,069 --> 00:04:55,880
working and I will show you an example

00:04:53,479 --> 00:04:56,960
of it but again the key it doesn't

00:04:55,880 --> 00:04:58,310
matter what your databases and there's

00:04:56,960 --> 00:04:59,599
actually a lot more options out there

00:04:58,310 --> 00:05:02,300
for Android so if you're on that side

00:04:59,599 --> 00:05:03,289
then you're a lot better off but the key

00:05:02,300 --> 00:05:05,870
is that you want a database that

00:05:03,289 --> 00:05:09,080
supports query observation and again

00:05:05,870 --> 00:05:11,990
that is what makes it reactive all right

00:05:09,080 --> 00:05:15,409
so now I'm going to tempt to the demo

00:05:11,990 --> 00:05:19,389
gods and show you a real real real live

00:05:15,409 --> 00:05:22,970
example of this all running and this is

00:05:19,389 --> 00:05:25,940
very real it's a sample up that I wrote

00:05:22,970 --> 00:05:27,169
fairly quickly but I did incorporate all

00:05:25,940 --> 00:05:30,710
the layers that you would normally use

00:05:27,169 --> 00:05:32,150
in an application so let's see script

00:05:30,710 --> 00:05:34,719
I'm just gonna start up my server here

00:05:32,150 --> 00:05:39,409
because I have a real server running and

00:05:34,719 --> 00:05:42,080
okay because I'm the man there we go so

00:05:39,409 --> 00:05:48,340
I have a pseudo rails back-end running

00:05:42,080 --> 00:05:54,199
here and let me get the logs out logs

00:05:48,340 --> 00:06:01,780
probably this one goodbye okay let's see

00:05:54,199 --> 00:06:04,069
if that's live demos scripts run and

00:06:01,780 --> 00:06:06,430
let's see what's going on in the

00:06:04,069 --> 00:06:06,430
foreground

00:06:10,639 --> 00:06:16,520
oh I think I've already got a um an

00:06:13,580 --> 00:06:21,319
instance running so let me let me just

00:06:16,520 --> 00:06:22,789
turn my back end off and then I will get

00:06:21,319 --> 00:06:31,729
it going

00:06:22,789 --> 00:06:40,129
duck er compose yeah okay let's try that

00:06:31,729 --> 00:06:43,370
again okay looking better okay here's my

00:06:40,129 --> 00:06:45,770
up here's my dog and so the application

00:06:43,370 --> 00:06:47,990
I actually wrote in a couple days of his

00:06:45,770 --> 00:06:49,340
using Apple's AR kit and again this is a

00:06:47,990 --> 00:06:53,139
reason why you might want to be doing

00:06:49,340 --> 00:06:56,449
something native as opposed to say with

00:06:53,139 --> 00:06:57,860
react native alright so this is a this

00:06:56,449 --> 00:07:00,259
is a pretty simple application what I

00:06:57,860 --> 00:07:02,150
have here is a that's what you're seeing

00:07:00,259 --> 00:07:03,620
is a leaderboard a scoreboard I'm gonna

00:07:02,150 --> 00:07:05,629
enter him a name I'm gonna create a new

00:07:03,620 --> 00:07:09,169
user and then we're gonna show you a

00:07:05,629 --> 00:07:11,029
little AR game that's we will see in

00:07:09,169 --> 00:07:13,939
real time is gonna be sending out the

00:07:11,029 --> 00:07:17,479
user's score so what's a good name let's

00:07:13,939 --> 00:07:17,779
say Boris or sounds like a good name all

00:07:17,479 --> 00:07:20,120
right

00:07:17,779 --> 00:07:21,319
now notice my my UI has updated I'll

00:07:20,120 --> 00:07:23,210
come back to that in a minute but just

00:07:21,319 --> 00:07:25,490
take note that the text box is no longer

00:07:23,210 --> 00:07:28,099
there and we have label so here we are

00:07:25,490 --> 00:07:29,810
and here you guys are and there's some

00:07:28,099 --> 00:07:31,520
bugs now I want you to pay attention on

00:07:29,810 --> 00:07:33,259
the top left you'll notice that as I'm

00:07:31,520 --> 00:07:36,770
tapping these bugs the score is

00:07:33,259 --> 00:07:39,969
increasing and then as the bugs come to

00:07:36,770 --> 00:07:45,080
close the health is decreasing and

00:07:39,969 --> 00:07:46,849
eventually we get game over so and just

00:07:45,080 --> 00:07:48,860
to show you that this is in fact

00:07:46,849 --> 00:07:50,569
connecting to the backend if I go all

00:07:48,860 --> 00:07:55,159
the way back up here I think we will

00:07:50,569 --> 00:07:57,349
find that there is somewhere an entry

00:07:55,159 --> 00:07:59,810
for creating a user session with a Boris

00:07:57,349 --> 00:08:02,389
so here's my server so this you know

00:07:59,810 --> 00:08:04,400
it's it's a simple application but this

00:08:02,389 --> 00:08:06,409
is these are very real components and

00:08:04,400 --> 00:08:08,810
I'm using a realm and I'm using an

00:08:06,409 --> 00:08:10,339
actual API and I'm an actual back-end so

00:08:08,810 --> 00:08:12,680
this isn't like a really tight example

00:08:10,339 --> 00:08:14,779
so first point that I want to make is

00:08:12,680 --> 00:08:16,909
here and again it's Swift code I'm sorry

00:08:14,779 --> 00:08:19,880
but it probably looks like something

00:08:16,909 --> 00:08:21,560
you've read so what happens when I

00:08:19,880 --> 00:08:23,300
created that user so I entered a name

00:08:21,560 --> 00:08:24,180
right entered your name in my text field

00:08:23,300 --> 00:08:27,300
and then

00:08:24,180 --> 00:08:29,580
what happens I enter and then I'm taking

00:08:27,300 --> 00:08:31,590
that text and I'm sending it over to

00:08:29,580 --> 00:08:34,500
this manager instance that I have and

00:08:31,590 --> 00:08:37,440
this is making an API call to sync the

00:08:34,500 --> 00:08:39,029
user session that's it it's totally

00:08:37,440 --> 00:08:40,830
fire-and-forget what happens this is my

00:08:39,029 --> 00:08:42,750
API layer remember in the model that I

00:08:40,830 --> 00:08:44,820
showed you have this data Sinclair so

00:08:42,750 --> 00:08:47,220
the the user when we get a successful

00:08:44,820 --> 00:08:49,589
response we're saving the user locally

00:08:47,220 --> 00:08:51,390
there's no big callback chain there's no

00:08:49,589 --> 00:08:54,360
nobody is like just sitting around and

00:08:51,390 --> 00:08:57,209
waiting for this there's no messy stack

00:08:54,360 --> 00:08:59,040
to worry about the it's completely

00:08:57,209 --> 00:09:00,839
fire-and-forget model very simple very

00:08:59,040 --> 00:09:03,180
clean so then what happens when the user

00:09:00,839 --> 00:09:05,070
is created well I have a listener here

00:09:03,180 --> 00:09:06,630
and this is more or less what a change

00:09:05,070 --> 00:09:08,250
listener would look like and the

00:09:06,630 --> 00:09:10,770
interface will be the same in other

00:09:08,250 --> 00:09:13,560
languages but what I'm waiting for is if

00:09:10,770 --> 00:09:16,529
there is any change to the local state

00:09:13,560 --> 00:09:19,440
of users in the database in the case of

00:09:16,529 --> 00:09:22,260
an update I check that there is one user

00:09:19,440 --> 00:09:23,850
and if there is then I create that text

00:09:22,260 --> 00:09:25,620
field the one the button that you saw

00:09:23,850 --> 00:09:28,770
before this is hell that said hello

00:09:25,620 --> 00:09:30,630
Boris let's get started so that's an

00:09:28,770 --> 00:09:32,370
example of updating the UI based on and

00:09:30,630 --> 00:09:34,890
I hope you noticed that was quite fast

00:09:32,370 --> 00:09:36,450
even though I'm making an API call and

00:09:34,890 --> 00:09:38,640
it's going out to some Azure cloud

00:09:36,450 --> 00:09:41,640
somewhere which is not the fastest one

00:09:38,640 --> 00:09:44,190
because I'm cheap and it's still it's

00:09:41,640 --> 00:09:47,250
quite reactive so the second thing that

00:09:44,190 --> 00:09:50,160
I want to point out is that during the

00:09:47,250 --> 00:09:53,550
actual gameplay and I'm gonna look here

00:09:50,160 --> 00:09:57,150
in these scenes in the game scene and I

00:09:53,550 --> 00:09:59,070
apologize again this is this is some AR

00:09:57,150 --> 00:10:00,209
swift code so probably it's not super

00:09:59,070 --> 00:10:01,500
familiar but you can kind of understand

00:10:00,209 --> 00:10:03,720
what's going on here when I was touching

00:10:01,500 --> 00:10:05,459
the screen to squash those books I get

00:10:03,720 --> 00:10:07,709
touches began events which is this is

00:10:05,459 --> 00:10:09,300
just you know a touch handler and then I

00:10:07,709 --> 00:10:13,440
check for to see if I've hit anything

00:10:09,300 --> 00:10:15,209
and if I do then I call increased score

00:10:13,440 --> 00:10:16,920
now you remember on the top left of the

00:10:15,209 --> 00:10:18,959
screen we had the score increasing as

00:10:16,920 --> 00:10:20,790
I'm squashing those bugs what does

00:10:18,959 --> 00:10:22,829
increased score do it well it finds the

00:10:20,790 --> 00:10:25,260
current user which is again this is set

00:10:22,829 --> 00:10:27,570
by a listener but I'll wait my head at

00:10:25,260 --> 00:10:29,370
that for now so we find the current user

00:10:27,570 --> 00:10:31,140
and then we're making just a simple

00:10:29,370 --> 00:10:33,779
database call to increase the user's

00:10:31,140 --> 00:10:36,510
score then somewhere else

00:10:33,779 --> 00:10:37,920
I have a listener that is actually

00:10:36,510 --> 00:10:42,600
sending these updates

00:10:37,920 --> 00:10:46,859
over to the server so you'll notice that

00:10:42,600 --> 00:10:48,779
I have these calls with score here being

00:10:46,859 --> 00:10:50,369
updated now the reason why I want to

00:10:48,779 --> 00:10:52,379
point this out is because this is this

00:10:50,369 --> 00:10:53,489
is all running on the main thread which

00:10:52,379 --> 00:10:55,319
is a horrible idea

00:10:53,489 --> 00:10:57,839
but it is all running on the main thread

00:10:55,319 --> 00:10:59,579
in an AR game just let that sink in for

00:10:57,839 --> 00:11:01,439
a moment you're not seeing we're writing

00:10:59,579 --> 00:11:03,629
to the database we're reading from the

00:11:01,439 --> 00:11:04,709
database and we're making API calls so

00:11:03,629 --> 00:11:05,639
the API calls are happening in the

00:11:04,709 --> 00:11:07,290
background but we're triggering those

00:11:05,639 --> 00:11:09,329
API calls all on the main thread

00:11:07,290 --> 00:11:11,429
synchronously while we're running an AR

00:11:09,329 --> 00:11:13,139
game so it is quite performant and I

00:11:11,429 --> 00:11:14,910
have done a bit of load testing with it

00:11:13,139 --> 00:11:17,669
and I was pretty impressed by what it

00:11:14,910 --> 00:11:20,549
could handle the last thing that I want

00:11:17,669 --> 00:11:22,259
to show and this is really the big aha

00:11:20,549 --> 00:11:24,119
moment for me what really makes this

00:11:22,259 --> 00:11:26,220
whole thing worth it so here's my server

00:11:24,119 --> 00:11:27,869
and as happens with servers as you just

00:11:26,220 --> 00:11:28,769
saw a few minutes ago things go wrong so

00:11:27,869 --> 00:11:30,389
let's kill it

00:11:28,769 --> 00:11:32,100
let's kill the server there was an

00:11:30,389 --> 00:11:34,919
outage oops you know don't know what

00:11:32,100 --> 00:11:37,169
happened so here I am I'm gonna sign in

00:11:34,919 --> 00:11:40,109
as Boris again and I don't know what

00:11:37,169 --> 00:11:41,609
would you expect to happen well as a

00:11:40,109 --> 00:11:43,290
user you don't really want to stop

00:11:41,609 --> 00:11:45,029
playing your game right I mean you don't

00:11:43,290 --> 00:11:46,259
care if somebody's server went out if

00:11:45,029 --> 00:11:47,549
someone forgot to pay their bill or

00:11:46,259 --> 00:11:47,970
whatever you want just want to keep

00:11:47,549 --> 00:11:49,949
playing

00:11:47,970 --> 00:11:51,149
and you'll notice obviously I'm not

00:11:49,949 --> 00:11:53,610
getting any more logs here because my

00:11:51,149 --> 00:11:57,149
server is dead but the game is working

00:11:53,610 --> 00:11:59,459
just perfectly why is that it's because

00:11:57,149 --> 00:12:02,220
it's designed that way it's designed to

00:11:59,459 --> 00:12:04,410
work seamlessly offline by virtue of the

00:12:02,220 --> 00:12:06,449
fact that the local database is the

00:12:04,410 --> 00:12:08,429
source of truth and when you do that it

00:12:06,449 --> 00:12:10,709
transforms your application amazingly

00:12:08,429 --> 00:12:12,779
you don't need to worry about outages or

00:12:10,709 --> 00:12:14,699
if your notifications aren't coming in

00:12:12,779 --> 00:12:16,860
or whatever you have the updated state

00:12:14,699 --> 00:12:18,389
that you need in your local database and

00:12:16,860 --> 00:12:20,069
you're just working off of that and so

00:12:18,389 --> 00:12:22,169
the online offline thing that's going to

00:12:20,069 --> 00:12:23,939
happen inevitably to somebody that's

00:12:22,169 --> 00:12:26,699
already handled by virtue of the design

00:12:23,939 --> 00:12:28,499
so I think this is a really powerful way

00:12:26,699 --> 00:12:30,869
to get what what would normally take a

00:12:28,499 --> 00:12:32,999
lot of explicit forethought it's sort of

00:12:30,869 --> 00:12:34,919
you get it for free which as a mobile

00:12:32,999 --> 00:12:37,079
developer often times you're working on

00:12:34,919 --> 00:12:41,100
a limited resource limited time budget

00:12:37,079 --> 00:12:42,419
that's something that you really want by

00:12:41,100 --> 00:12:43,769
the way all this code that you saw if

00:12:42,419 --> 00:12:47,429
you really want to learn more about

00:12:43,769 --> 00:12:49,329
Swift and the very odd example of a

00:12:47,429 --> 00:12:51,549
arcade and iOS it

00:12:49,329 --> 00:12:53,470
on github so you can feel free to clone

00:12:51,549 --> 00:12:57,100
that and leave nasty comments or

00:12:53,470 --> 00:12:58,809
whatever so benefits as I've just shown

00:12:57,100 --> 00:13:00,610
you it's pretty easy to support the

00:12:58,809 --> 00:13:03,489
online offline experience seamlessly

00:13:00,610 --> 00:13:05,769
because your your your application logic

00:13:03,489 --> 00:13:07,329
your business logic doesn't care you're

00:13:05,769 --> 00:13:08,739
your source of truth is here

00:13:07,329 --> 00:13:10,540
doesn't matter how it got there it

00:13:08,739 --> 00:13:14,319
doesn't matter how it's changing it's

00:13:10,540 --> 00:13:15,910
right there the business logic as I've

00:13:14,319 --> 00:13:17,799
shown you that this one business logic

00:13:15,910 --> 00:13:19,209
concerns are cleanly separated so you

00:13:17,799 --> 00:13:20,559
know when you start writing a mobile

00:13:19,209 --> 00:13:21,730
application everybody says oh yes

00:13:20,559 --> 00:13:23,559
model-view-controller

00:13:21,730 --> 00:13:25,089
and then suddenly you're doing API calls

00:13:23,559 --> 00:13:26,799
from your view and suddenly you're

00:13:25,089 --> 00:13:30,790
writing to the database from wherever

00:13:26,799 --> 00:13:32,889
and this is interrupt this is the dirty

00:13:30,790 --> 00:13:34,239
bleed-over of the design yeah that might

00:13:32,889 --> 00:13:36,699
work for you if you're one guys sitting

00:13:34,239 --> 00:13:38,619
in a garage but I'm talking from from

00:13:36,699 --> 00:13:41,679
somebody who works on some pretty large

00:13:38,619 --> 00:13:43,899
applications in my day job you really

00:13:41,679 --> 00:13:45,579
want a clean design as that's what

00:13:43,899 --> 00:13:47,199
provides scalability from a team

00:13:45,579 --> 00:13:49,480
perspective from from a project

00:13:47,199 --> 00:13:51,519
perspective scalability a project that's

00:13:49,480 --> 00:13:53,139
gonna live a long time and you're gonna

00:13:51,519 --> 00:13:54,669
be able to reuse that code and new

00:13:53,139 --> 00:13:56,529
engineers are gonna come in and not go

00:13:54,669 --> 00:13:57,759
like wow what is happening because this

00:13:56,529 --> 00:14:01,929
design doesn't make any sense

00:13:57,759 --> 00:14:03,610
it's clean another really cool part I

00:14:01,929 --> 00:14:05,410
think for me is that the mobile

00:14:03,610 --> 00:14:07,600
architecture now kind of resembles your

00:14:05,410 --> 00:14:09,910
hosted web architecture so the same way

00:14:07,600 --> 00:14:11,769
that in the in your your web application

00:14:09,910 --> 00:14:13,839
you know you have a database somewhere

00:14:11,769 --> 00:14:14,949
you have maybe some workers somewhere

00:14:13,839 --> 00:14:16,809
and then you have your front-end

00:14:14,949 --> 00:14:18,429
somewhere and you can you can think of

00:14:16,809 --> 00:14:20,559
these as completely separate components

00:14:18,429 --> 00:14:22,269
and in fact many times these dark like

00:14:20,559 --> 00:14:24,879
completely separate you know repose or

00:14:22,269 --> 00:14:26,829
darker containers etc and so now you can

00:14:24,879 --> 00:14:28,419
really mirror that in your mobile

00:14:26,829 --> 00:14:31,839
application which i think is a powerful

00:14:28,419 --> 00:14:34,509
way to think about that but I like to be

00:14:31,839 --> 00:14:37,689
honest so there's realm in particular

00:14:34,509 --> 00:14:39,759
has some disadvantages if you have an

00:14:37,689 --> 00:14:42,699
application like let's say I don't know

00:14:39,759 --> 00:14:44,860
you've got a 3,000 lines of code and you

00:14:42,699 --> 00:14:46,869
wanna you say hey realm that looks great

00:14:44,860 --> 00:14:48,790
let's try it out well you're not really

00:14:46,869 --> 00:14:51,369
gonna like try it out you're gonna spend

00:14:48,790 --> 00:14:54,879
about a week kind of refactoring your

00:14:51,369 --> 00:14:56,860
models and moving things around it's not

00:14:54,879 --> 00:14:58,629
really super easy it's not something you

00:14:56,860 --> 00:15:02,730
just like you know and him install or

00:14:58,629 --> 00:15:04,410
pod update in the case of iOS

00:15:02,730 --> 00:15:06,870
onboarding will take some time it will

00:15:04,410 --> 00:15:08,100
take the the learning curve is not super

00:15:06,870 --> 00:15:11,340
high especially if you've worked with

00:15:08,100 --> 00:15:13,350
something like sequel eyes or active

00:15:11,340 --> 00:15:14,790
record with rails but actually

00:15:13,350 --> 00:15:16,200
incorporating this into your application

00:15:14,790 --> 00:15:20,040
and making sure that all your models are

00:15:16,200 --> 00:15:23,520
compliant with the realm schema is not

00:15:20,040 --> 00:15:24,720
like it's not one of those so you have

00:15:23,520 --> 00:15:27,570
to be careful with object nesting so we

00:15:24,720 --> 00:15:30,420
saw an example of like if the user gets

00:15:27,570 --> 00:15:33,060
updated then I want to call back well so

00:15:30,420 --> 00:15:37,320
here's a here's an example let's say you

00:15:33,060 --> 00:15:39,150
are listening for changes on I don't

00:15:37,320 --> 00:15:40,920
know let's say you've got a house model

00:15:39,150 --> 00:15:43,650
and you're listening for changes on a

00:15:40,920 --> 00:15:45,270
particular house model well and you're

00:15:43,650 --> 00:15:46,950
updating re-rendering some part of your

00:15:45,270 --> 00:15:48,840
I when you when that house model changes

00:15:46,950 --> 00:15:50,790
well that house contains some rooms and

00:15:48,840 --> 00:15:52,140
those rooms contain some people etc any

00:15:50,790 --> 00:15:53,310
of these are all modeled in the database

00:15:52,140 --> 00:15:55,650
what's actually gonna happen is if

00:15:53,310 --> 00:15:57,780
somebody's shoe color changes that is a

00:15:55,650 --> 00:15:59,010
change on the person that is a change on

00:15:57,780 --> 00:16:00,600
the room and that is a change on the

00:15:59,010 --> 00:16:03,570
house and so you might actually end up

00:16:00,600 --> 00:16:05,520
getting a ton of callbacks when you

00:16:03,570 --> 00:16:07,380
don't really want them so you have to be

00:16:05,520 --> 00:16:08,730
careful with object nesting and that's

00:16:07,380 --> 00:16:10,710
and the reason why I bring that up is

00:16:08,730 --> 00:16:11,940
because your API may be designed your

00:16:10,710 --> 00:16:13,500
data model on your back-end may be

00:16:11,940 --> 00:16:15,060
designed in such a way that the objects

00:16:13,500 --> 00:16:17,250
are supposed to be nested in a certain

00:16:15,060 --> 00:16:19,890
way but you don't necessarily want to do

00:16:17,250 --> 00:16:23,340
that and then the third one is I don't

00:16:19,890 --> 00:16:24,780
maybe this is a French to you guys but

00:16:23,340 --> 00:16:27,300
nsdictionary and there's there's a lot

00:16:24,780 --> 00:16:30,800
of native like if you're used to the

00:16:27,300 --> 00:16:33,830
native object types they're not all

00:16:30,800 --> 00:16:35,880
perfectly supported there are some some

00:16:33,830 --> 00:16:37,920
Ananas dictionaries in example which is

00:16:35,880 --> 00:16:40,320
basically if you have a property of a

00:16:37,920 --> 00:16:42,060
model that's a dictionary that doesn't

00:16:40,320 --> 00:16:46,320
fly in a realm that's you can't actually

00:16:42,060 --> 00:16:48,870
store that to the database and that's

00:16:46,320 --> 00:16:50,790
all she wrote yeah so I'm Chris I'm a

00:16:48,870 --> 00:16:53,580
software engineer at Microsoft I don't

00:16:50,790 --> 00:16:58,110
actually work on mobile during my

00:16:53,580 --> 00:17:00,480
working hours but I used to so yeah and

00:16:58,110 --> 00:17:03,630
I feel free to reach out to me on github

00:17:00,480 --> 00:17:04,980
or you can god-forbid check out the

00:17:03,630 --> 00:17:06,810
products that we're working on which is

00:17:04,980 --> 00:17:09,349
called App Center but I'm not gonna do a

00:17:06,810 --> 00:17:20,689
plug so that's it

00:17:09,349 --> 00:17:20,689
[Applause]

00:17:28,850 --> 00:17:36,809
sorry my man will pick one of the

00:17:34,950 --> 00:17:40,080
questions if you are if you don't mind

00:17:36,809 --> 00:17:42,600
and here we can read this question from

00:17:40,080 --> 00:17:44,640
Alexander what if you get conflicts when

00:17:42,600 --> 00:17:49,340
you get back on line in that scenario

00:17:44,640 --> 00:17:52,350
yeah I mean you probably will all right

00:17:49,340 --> 00:17:54,809
so again I want to keep this as as

00:17:52,350 --> 00:17:56,190
general as possible but youyou need you

00:17:54,809 --> 00:17:58,080
need to have a model of how you're gonna

00:17:56,190 --> 00:17:59,880
handle conflicts kind of from the start

00:17:58,080 --> 00:18:03,450
and that's often going to depend very

00:17:59,880 --> 00:18:05,190
much on just the specifics of your

00:18:03,450 --> 00:18:06,990
application or whatever I mean you know

00:18:05,190 --> 00:18:09,720
there's some things that like you know

00:18:06,990 --> 00:18:11,429
if your users authentication information

00:18:09,720 --> 00:18:13,169
has changed on the back end you know

00:18:11,429 --> 00:18:16,020
obviously you want that to persist but

00:18:13,169 --> 00:18:18,600
if somebody has made some less less

00:18:16,020 --> 00:18:19,590
system important change to some local

00:18:18,600 --> 00:18:22,830
model you'll probably want to have to

00:18:19,590 --> 00:18:24,659
persist you know yeah alternately you'll

00:18:22,830 --> 00:18:26,490
need to have implement some sort of

00:18:24,659 --> 00:18:28,740
conflict handling I'm sorry I don't have

00:18:26,490 --> 00:18:30,809
a more elegant answer but I mean if you

00:18:28,740 --> 00:18:34,260
want the simple way is you just you know

00:18:30,809 --> 00:18:36,059
last in wins and see if that works but

00:18:34,260 --> 00:18:40,049
yeah it does require a bit of

00:18:36,059 --> 00:18:42,360
forethought and design they're cool if

00:18:40,049 --> 00:18:45,419
you have any more questions or you want

00:18:42,360 --> 00:18:48,600
to get more details about Chris talk you

00:18:45,419 --> 00:18:52,130
can reach him after this talk so thanks

00:18:48,600 --> 00:18:52,130
a lot again just

00:18:52,480 --> 00:18:54,540

YouTube URL: https://www.youtube.com/watch?v=W0ykKVn7b6M


