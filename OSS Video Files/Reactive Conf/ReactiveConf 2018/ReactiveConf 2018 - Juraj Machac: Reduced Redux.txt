Title: ReactiveConf 2018 - Juraj Machac: Reduced Redux
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Reduced redux

Redux is a predictable state container for JS apps. It helps to achieve consistency by keeping data in a single state, and managing state changes via dispatching actions. The idea itself is great, yet often misunderstood - the necessary code management is interpreted as a boilerplate, and coders seek any library which just helps them write a little less code. Though, most of the libraries/approaches which try to reduce this ‘boilerplate’ seem to miss the point. In this talk, we’ll discuss an approach that introduces some tradeoff, but preserves many of the important guarantees of redux, and also introduces some new nice features with less code. We’ll also talk about how to gradually transition from traditional Redux to this Reduced redux.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,170 --> 00:00:17,040
all right thank you for introduction

00:00:14,280 --> 00:00:19,080
juror so yeah

00:00:17,040 --> 00:00:22,130
perhaps you have seen the tweet for

00:00:19,080 --> 00:00:24,779
Robin freshmen yesterday when she was

00:00:22,130 --> 00:00:27,210
burning calories shaking so I definitely

00:00:24,779 --> 00:00:32,700
need one of those smartwatches now and

00:00:27,210 --> 00:00:36,110
2:00 p.m. right so I'm you right and I'm

00:00:32,700 --> 00:00:38,790
coming from vacuum labs short promo

00:00:36,110 --> 00:00:41,370
vacuum as you have you have over 1 and

00:00:38,790 --> 00:00:42,829
20 people based in Bratislava and also

00:00:41,370 --> 00:00:45,899
offices in the four outer cities

00:00:42,829 --> 00:00:48,510
including Prague so we are interested in

00:00:45,899 --> 00:00:50,879
the crypto of intact web native or

00:00:48,510 --> 00:00:53,579
back-end development if you're

00:00:50,879 --> 00:00:58,739
interested just grab us and we'll talk

00:00:53,579 --> 00:01:04,110
ok so now for the reduced Redux first

00:00:58,739 --> 00:01:06,300
what it is I'll ask this question so how

00:01:04,110 --> 00:01:08,750
many of you here had the honor to code

00:01:06,300 --> 00:01:12,090
at least a very simple example in Redux

00:01:08,750 --> 00:01:14,850
hands up right yeah everybody is many of

00:01:12,090 --> 00:01:15,860
you have done redirects so you probably

00:01:14,850 --> 00:01:18,300
know what I'm talking about

00:01:15,860 --> 00:01:21,780
first very briefly was the realize about

00:01:18,300 --> 00:01:23,730
for those who don't know you have a

00:01:21,780 --> 00:01:25,800
single you have a state in real estate

00:01:23,730 --> 00:01:28,050
which renders you I've there are some

00:01:25,800 --> 00:01:30,690
components the user interacts with the

00:01:28,050 --> 00:01:33,480
UI triggering some actions and then the

00:01:30,690 --> 00:01:35,400
actions get caught by reducer and the

00:01:33,480 --> 00:01:37,680
reducer update state accordingly

00:01:35,400 --> 00:01:40,010
every time the state is updated the you

00:01:37,680 --> 00:01:42,750
are gets rendered and we have this nice

00:01:40,010 --> 00:01:44,850
unidirectional data flow it's good

00:01:42,750 --> 00:01:47,730
because it ensures consistencies makes

00:01:44,850 --> 00:01:49,770
it easy to reason about we also get this

00:01:47,730 --> 00:01:51,600
read ice logger which tells you the

00:01:49,770 --> 00:01:53,460
previous day the next day the action

00:01:51,600 --> 00:01:56,790
that happened and it makes debugging

00:01:53,460 --> 00:01:59,370
quite easy for example I think is a

00:01:56,790 --> 00:02:00,990
great idea but there are a couple of

00:01:59,370 --> 00:02:04,430
issues for those who have gone through

00:02:00,990 --> 00:02:07,110
this but to illustrate that let's first

00:02:04,430 --> 00:02:12,360
create a simple counter in a big project

00:02:07,110 --> 00:02:15,629
so what would you do you would first

00:02:12,360 --> 00:02:17,340
need to create some unique type

00:02:15,629 --> 00:02:19,530
somewhere perhaps you put it in type of

00:02:17,340 --> 00:02:22,760
Jaso you create some string that has to

00:02:19,530 --> 00:02:22,760
be unique for this action

00:02:23,959 --> 00:02:29,640
then you create actions and reducers so

00:02:28,140 --> 00:02:32,400
in actions you put the action creator

00:02:29,640 --> 00:02:35,030
which takes some some arguments puts in

00:02:32,400 --> 00:02:39,989
the payload and the type I hope this I

00:02:35,030 --> 00:02:42,989
managed to fix the puzzles okay great so

00:02:39,989 --> 00:02:44,640
you put in the type in payload I'm Dan

00:02:42,989 --> 00:02:47,099
and you import this type again in the

00:02:44,640 --> 00:02:48,360
reducers we actually write the logic

00:02:47,099 --> 00:02:50,400
that should be happening that you want

00:02:48,360 --> 00:02:53,670
to increase this simple counter by one

00:02:50,400 --> 00:02:56,250
or by some amount right so what's the

00:02:53,670 --> 00:02:59,370
problem here I there's a lot of code to

00:02:56,250 --> 00:03:03,180
write to just update a very simple value

00:02:59,370 --> 00:03:05,400
in the state many of you I guess many of

00:03:03,180 --> 00:03:07,680
you have gone through this frustration

00:03:05,400 --> 00:03:10,170
well just to ask how many of you have

00:03:07,680 --> 00:03:12,120
gone through this verbosity of redux and

00:03:10,170 --> 00:03:13,889
eventually went to search for something

00:03:12,120 --> 00:03:19,470
else something that would reduce the

00:03:13,889 --> 00:03:21,480
boilerplate in redux right so we are I

00:03:19,470 --> 00:03:22,859
would say we're quite lazy programmers

00:03:21,480 --> 00:03:24,629
right we don't want to write a lot of

00:03:22,859 --> 00:03:26,849
code just to achieve very simple thing

00:03:24,629 --> 00:03:30,000
we just want to write the least to

00:03:26,849 --> 00:03:32,760
achieve the most so you might think that

00:03:30,000 --> 00:03:34,139
this is just another attempt you had are

00:03:32,760 --> 00:03:37,349
plenty of attempts to reduce the

00:03:34,139 --> 00:03:39,470
boilerplate but when you look when you

00:03:37,349 --> 00:03:42,090
search for for something like this you

00:03:39,470 --> 00:03:44,370
find libraries which invent some

00:03:42,090 --> 00:03:46,049
syntactic sugar over that so they just

00:03:44,370 --> 00:03:47,940
invent syntactic sugar over how to

00:03:46,049 --> 00:03:50,010
create actions or how to register the

00:03:47,940 --> 00:03:52,889
reducers but the traffic there stay the

00:03:50,010 --> 00:03:55,560
same they are still dispatching the same

00:03:52,889 --> 00:03:57,060
actions with type and payload and they

00:03:55,560 --> 00:04:03,440
are afraid to do fundamental changes to

00:03:57,060 --> 00:04:05,819
read X so let's do that here first

00:04:03,440 --> 00:04:09,299
what's the problem here

00:04:05,819 --> 00:04:10,049
we got a dispatch things which are then

00:04:09,299 --> 00:04:12,870
listened to

00:04:10,049 --> 00:04:14,430
and matched against the reducer and

00:04:12,870 --> 00:04:16,739
that's why which means so much code

00:04:14,430 --> 00:04:18,870
because we always write the publishing

00:04:16,739 --> 00:04:22,010
and the subscriber part for every action

00:04:18,870 --> 00:04:25,260
regardless of how simple it looks like

00:04:22,010 --> 00:04:27,389
well most of the time meaning we just

00:04:25,260 --> 00:04:30,150
want subscriber for one publisher

00:04:27,389 --> 00:04:31,710
because we know what we do what we want

00:04:30,150 --> 00:04:33,930
to do with the state how do we want to

00:04:31,710 --> 00:04:37,110
update it so what can we do with this

00:04:33,930 --> 00:04:37,620
how can make this last scatter to decode

00:04:37,110 --> 00:04:39,840
how can

00:04:37,620 --> 00:04:41,430
but lodging in one place so that when I

00:04:39,840 --> 00:04:42,810
look at it I don't have to go to several

00:04:41,430 --> 00:04:46,830
files to figure out what's actually

00:04:42,810 --> 00:04:48,840
happening how do we how do we stop this

00:04:46,830 --> 00:04:50,550
mental challenge of that you have to go

00:04:48,840 --> 00:04:53,160
through every time you're creating an

00:04:50,550 --> 00:04:56,220
action mental challenge of creating a

00:04:53,160 --> 00:04:58,260
unique string thinking that if this has

00:04:56,220 --> 00:05:02,729
ever been used before or how should i

00:04:58,260 --> 00:05:05,120
scope it right so imagine suspensive

00:05:02,729 --> 00:05:09,720
drum roll here

00:05:05,120 --> 00:05:11,430
let's dispatch the reducer what what is

00:05:09,720 --> 00:05:13,440
this guy talking about right so we're

00:05:11,430 --> 00:05:14,910
not dispatching reducer for dispatching

00:05:13,440 --> 00:05:18,960
actions and they're matched against

00:05:14,910 --> 00:05:21,030
reducers know what no let's stay with me

00:05:18,960 --> 00:05:22,919
on this okay so this is how a regular

00:05:21,030 --> 00:05:25,169
action would look like we are

00:05:22,919 --> 00:05:28,260
dispatching some objects which contain

00:05:25,169 --> 00:05:30,030
type and payload but essentially they're

00:05:28,260 --> 00:05:32,220
just objects right they can contain

00:05:30,030 --> 00:05:34,740
anything so let's make them contain the

00:05:32,220 --> 00:05:36,389
reducer yeah I figured that one out

00:05:34,740 --> 00:05:38,280
that's what this is empty space here so

00:05:36,389 --> 00:05:43,860
you don't have to worry about the

00:05:38,280 --> 00:05:47,250
comments there so if we dispatcher

00:05:43,860 --> 00:05:49,800
reducer here we tell exactly what should

00:05:47,250 --> 00:05:53,639
be happening now what are the properties

00:05:49,800 --> 00:05:55,470
of this by the way the update there is a

00:05:53,639 --> 00:05:57,960
simple it says immutability helper

00:05:55,470 --> 00:05:59,729
update which just gets the some

00:05:57,960 --> 00:06:02,010
structure of your object and the state

00:05:59,729 --> 00:06:04,530
which I forgot to right there but should

00:06:02,010 --> 00:06:08,639
be in the bottom and update the state

00:06:04,530 --> 00:06:13,139
immutably right so what her properties

00:06:08,639 --> 00:06:14,699
does is have since we are dispatching

00:06:13,139 --> 00:06:17,669
exactly the reducer that should happen

00:06:14,699 --> 00:06:19,979
we don't need the type anymore there is

00:06:17,669 --> 00:06:21,810
nothing to match direction against so we

00:06:19,979 --> 00:06:24,150
can we could just simply dispose of the

00:06:21,810 --> 00:06:26,490
type but we still keep it because Redux

00:06:24,150 --> 00:06:28,800
tools they expect the type to be there

00:06:26,490 --> 00:06:30,660
and is used for for logging so so that

00:06:28,800 --> 00:06:33,479
is useful for knowing which action was

00:06:30,660 --> 00:06:38,400
actually dispatched but it's no longer

00:06:33,479 --> 00:06:40,680
required to be unique all right so the

00:06:38,400 --> 00:06:43,199
reducer here still looks very verbose

00:06:40,680 --> 00:06:45,389
right so I'm just updating some some

00:06:43,199 --> 00:06:48,300
value in stay and but I have to write

00:06:45,389 --> 00:06:50,729
all that code so most of the time you

00:06:48,300 --> 00:06:51,689
have a couple of actions which are

00:06:50,729 --> 00:06:53,699
related

00:06:51,689 --> 00:06:55,919
part which I really did the same module

00:06:53,699 --> 00:06:59,039
and they shall share some similarities

00:06:55,919 --> 00:07:02,849
such as the path where where they are

00:06:59,039 --> 00:07:05,069
updating the state so we could simply

00:07:02,849 --> 00:07:06,689
just extract this path and instead of

00:07:05,069 --> 00:07:09,119
having the reducer operate on the whole

00:07:06,689 --> 00:07:11,219
state with major reduce to operate on

00:07:09,119 --> 00:07:13,889
just some sub state and again path so

00:07:11,219 --> 00:07:17,249
now the reducer will be responsible for

00:07:13,889 --> 00:07:18,839
updating the state on the given path and

00:07:17,249 --> 00:07:22,499
returning a new state which should be on

00:07:18,839 --> 00:07:25,019
the given path right so yeah this is

00:07:22,499 --> 00:07:27,659
basically all that's there all that is

00:07:25,019 --> 00:07:31,379
about we could as well as we have these

00:07:27,659 --> 00:07:33,149
modules related to some specific part we

00:07:31,379 --> 00:07:37,169
could just extract it to variable just

00:07:33,149 --> 00:07:38,909
to avoid some typos and that's it so the

00:07:37,169 --> 00:07:42,829
nice thing is that's all the code you

00:07:38,909 --> 00:07:45,689
need to write to just create some action

00:07:42,829 --> 00:07:47,639
right you might think we have all that

00:07:45,689 --> 00:07:49,169
we also did some fundamental changes to

00:07:47,639 --> 00:07:52,169
read there so we just cannot use the

00:07:49,169 --> 00:07:53,429
former route reducer we will need to do

00:07:52,169 --> 00:07:57,389
some changes to the route reducer as

00:07:53,429 --> 00:08:00,749
well but as the as all of the logic is

00:07:57,389 --> 00:08:02,279
now specified in the action itself the

00:08:00,749 --> 00:08:05,279
route reducer will essentially be very

00:08:02,279 --> 00:08:08,249
dumped it doesn't have to do pretty much

00:08:05,279 --> 00:08:09,779
anything it just takes the action passes

00:08:08,249 --> 00:08:12,809
the reducer the substrate on the given

00:08:09,779 --> 00:08:14,669
path and updates the sub State on the

00:08:12,809 --> 00:08:16,709
given path that's it because all the

00:08:14,669 --> 00:08:21,919
logic is in the action dispatched action

00:08:16,709 --> 00:08:26,279
now what is this about what we gained

00:08:21,919 --> 00:08:28,019
let's recap a little okay so we have

00:08:26,279 --> 00:08:30,419
lodging in one place

00:08:28,019 --> 00:08:33,029
the steering go very well we have

00:08:30,419 --> 00:08:35,490
lodging in one place which is very

00:08:33,029 --> 00:08:38,189
useful for debugging now imagine the new

00:08:35,490 --> 00:08:41,430
standard rejects you you you debug like

00:08:38,189 --> 00:08:43,199
you you go to your log you see the

00:08:41,430 --> 00:08:45,660
action that's been dispatched you search

00:08:43,199 --> 00:08:47,069
for the string you fight it in types you

00:08:45,660 --> 00:08:49,230
find the constant you look for the

00:08:47,069 --> 00:08:52,019
constant you find it if the reducer

00:08:49,230 --> 00:08:53,759
couple of reducers and then someone has

00:08:52,019 --> 00:08:55,559
to rename the parameters in payload in

00:08:53,759 --> 00:08:57,839
the action crater right well good luck

00:08:55,559 --> 00:09:01,079
debugging then now you only look for a

00:08:57,839 --> 00:09:03,329
type and you go to this one place and

00:09:01,079 --> 00:09:04,990
see what's happening this is the reducer

00:09:03,329 --> 00:09:07,120
that change the state

00:09:04,990 --> 00:09:10,470
is what happened the state the register

00:09:07,120 --> 00:09:13,209
is the what then the path is the where

00:09:10,470 --> 00:09:15,580
now I want to find out what this action

00:09:13,209 --> 00:09:17,680
is doing it's simple go to go to

00:09:15,580 --> 00:09:19,180
definition of this action crater in

00:09:17,680 --> 00:09:21,130
traditional readers I would go to the

00:09:19,180 --> 00:09:22,870
definition of the action crater I will

00:09:21,130 --> 00:09:25,120
find out that there is some type so

00:09:22,870 --> 00:09:27,520
let's search for this type and search

00:09:25,120 --> 00:09:30,070
for reducers finally find out find out

00:09:27,520 --> 00:09:32,860
what state changes will happen when I

00:09:30,070 --> 00:09:34,839
call this okay

00:09:32,860 --> 00:09:36,550
additionally there are no more unique

00:09:34,839 --> 00:09:38,740
types I don't have to go through this

00:09:36,550 --> 00:09:40,899
mental challenge I'm thinking yeah this

00:09:38,740 --> 00:09:41,320
is update form update form where they

00:09:40,899 --> 00:09:43,209
exist

00:09:41,320 --> 00:09:45,250
let's scope it user settings / update

00:09:43,209 --> 00:09:47,740
form this hope this one doesn't exist

00:09:45,250 --> 00:09:49,660
no no more challenge like this so we

00:09:47,740 --> 00:09:53,529
don't have to invent when unique types

00:09:49,660 --> 00:09:56,200
anymore but still if we want to preserve

00:09:53,529 --> 00:09:58,899
unique types which might be nice you're

00:09:56,200 --> 00:10:03,130
not you can nobody but nobody forces you

00:09:58,899 --> 00:10:06,130
to there is inherently less code

00:10:03,130 --> 00:10:08,529
altogether that's because this is really

00:10:06,130 --> 00:10:10,660
all the code you need to write to change

00:10:08,529 --> 00:10:13,600
something in the stage so you only write

00:10:10,660 --> 00:10:15,850
the least possible code because the

00:10:13,600 --> 00:10:17,500
reduces specify what you want to do and

00:10:15,850 --> 00:10:20,860
the part is where you want to do it

00:10:17,500 --> 00:10:24,339
there is no less than that so you

00:10:20,860 --> 00:10:26,680
specify the least to achieve most we

00:10:24,339 --> 00:10:30,310
also get something like yeah reacts

00:10:26,680 --> 00:10:33,700
comprehend reusability which but what I

00:10:30,310 --> 00:10:36,370
call it it's something like imagine you

00:10:33,700 --> 00:10:39,700
have Redux component with all of its

00:10:36,370 --> 00:10:41,890
actions and selectors related to to some

00:10:39,700 --> 00:10:44,050
it's a path where it's mounted and you

00:10:41,890 --> 00:10:46,630
want to display it somewhere else but

00:10:44,050 --> 00:10:48,730
with its own State well the path is now

00:10:46,630 --> 00:10:52,450
dynamics if you can make you could you

00:10:48,730 --> 00:10:54,490
could abstract it and make those big the

00:10:52,450 --> 00:10:56,740
component relative to some dynamic path

00:10:54,490 --> 00:10:58,209
this is quite hard to achieve it

00:10:56,740 --> 00:11:01,240
traditional rejects and it's quite a

00:10:58,209 --> 00:11:02,649
powerful concept just take a moment to

00:11:01,240 --> 00:11:04,300
process this this is all the code you

00:11:02,649 --> 00:11:08,620
need to write okay there's no more

00:11:04,300 --> 00:11:12,640
verbosity or frustration we are using

00:11:08,620 --> 00:11:15,220
this approach in in production in many

00:11:12,640 --> 00:11:18,360
projects already and made two

00:11:15,220 --> 00:11:22,529
large-scale projects I'm I'm very

00:11:18,360 --> 00:11:25,199
we are I'm happy with it so you're

00:11:22,529 --> 00:11:27,809
you're free to try it out you can also

00:11:25,199 --> 00:11:30,329
do with the very same things with these

00:11:27,809 --> 00:11:33,839
redux as with the traditional the

00:11:30,329 --> 00:11:35,369
standard one but just with less CO and

00:11:33,839 --> 00:11:43,110
less scattered you can achieve the very

00:11:35,369 --> 00:11:44,970
same now and get this question a lot so

00:11:43,110 --> 00:11:48,179
perhaps it's in the slide oh I don't

00:11:44,970 --> 00:11:50,480
know most of the time you have I said it

00:11:48,179 --> 00:11:54,389
most of the time you have one one

00:11:50,480 --> 00:11:56,939
subscriber for one publisher so are you

00:11:54,389 --> 00:11:59,249
mostly there just changes in one part of

00:11:56,939 --> 00:12:02,459
the state for every action but what if

00:11:59,249 --> 00:12:04,470
you want to do updates in multiple parts

00:12:02,459 --> 00:12:06,839
of the state at the very same time what

00:12:04,470 --> 00:12:08,759
do you have you had more subscribers so

00:12:06,839 --> 00:12:11,369
how would that work now we only have one

00:12:08,759 --> 00:12:14,059
reducer here right so what can we do

00:12:11,369 --> 00:12:18,089
with that to imagine this situation

00:12:14,059 --> 00:12:21,839
just imagine have a logout action so

00:12:18,089 --> 00:12:24,149
your first call API for logout and then

00:12:21,839 --> 00:12:26,309
you could just you want to probably

00:12:24,149 --> 00:12:29,459
clear several parts of the state you

00:12:26,309 --> 00:12:31,319
could go and dispatch it one by one but

00:12:29,459 --> 00:12:33,329
as The Dispatch is synchronous this

00:12:31,319 --> 00:12:35,309
would cause cause you having

00:12:33,329 --> 00:12:36,929
intermediate states and all of the map

00:12:35,309 --> 00:12:39,239
states you profiting connect the day

00:12:36,929 --> 00:12:41,369
with recompute so you might have

00:12:39,239 --> 00:12:43,410
glitches intermediate state human you

00:12:41,369 --> 00:12:47,639
want to avoid that you want to avoid

00:12:43,410 --> 00:12:50,610
such an consistency like this so what do

00:12:47,639 --> 00:12:53,459
you do in in standard redux you would

00:12:50,610 --> 00:12:54,779
just define an action action creator and

00:12:53,459 --> 00:12:56,819
you would listen to it in multiple

00:12:54,779 --> 00:12:58,949
places this would be a single state

00:12:56,819 --> 00:13:01,499
transition so we'd like to have achieved

00:12:58,949 --> 00:13:04,860
something like this with this reduced

00:13:01,499 --> 00:13:07,110
Redux we'd like to go from something

00:13:04,860 --> 00:13:09,959
like that having three dispatches are

00:13:07,110 --> 00:13:12,149
multiple dispatches into a single one

00:13:09,959 --> 00:13:14,669
perhaps dispatching an array of actions

00:13:12,149 --> 00:13:17,279
which would happen at the very same time

00:13:14,669 --> 00:13:20,189
which would do happen in one state

00:13:17,279 --> 00:13:26,040
transition so how can make it basically

00:13:20,189 --> 00:13:28,669
a single action yes oh so that's with

00:13:26,040 --> 00:13:31,949
middle bears and functional composition

00:13:28,669 --> 00:13:32,190
so first now we have to realize that we

00:13:31,949 --> 00:13:35,550
are

00:13:32,190 --> 00:13:37,110
spatula reducers reducer is really just

00:13:35,550 --> 00:13:41,100
a function that takes a state and

00:13:37,110 --> 00:13:42,930
returns a new state so we could just

00:13:41,100 --> 00:13:45,480
compose them together we could just take

00:13:42,930 --> 00:13:47,340
this path the state to the first one see

00:13:45,480 --> 00:13:50,580
what it has returned past the state to

00:13:47,340 --> 00:13:53,790
the next one and so on so that's how we

00:13:50,580 --> 00:13:55,950
could compose reducers and what we will

00:13:53,790 --> 00:13:59,730
use middle bears to transform the array

00:13:55,950 --> 00:14:03,510
that we dispatch into into a an action

00:13:59,730 --> 00:14:07,080
with discomposed reducers so let's see

00:14:03,510 --> 00:14:10,890
how would that work this is some

00:14:07,080 --> 00:14:12,810
standard redux middle bear syntax so

00:14:10,890 --> 00:14:16,290
here we will do all the magic this

00:14:12,810 --> 00:14:19,110
caches the actions and first we have to

00:14:16,290 --> 00:14:21,270
detect if it's an array and if it's an

00:14:19,110 --> 00:14:23,460
array of actions will compose it some

00:14:21,270 --> 00:14:26,870
just into a single action if it's not we

00:14:23,460 --> 00:14:26,870
simple pass it to the next middleware

00:14:26,990 --> 00:14:33,240
now this is how the magic happens here

00:14:30,440 --> 00:14:37,650
we need we need to create an action so

00:14:33,240 --> 00:14:39,510
we need to give it some type I went went

00:14:37,650 --> 00:14:41,520
with batch dispatch but you're free to

00:14:39,510 --> 00:14:44,070
name it whatever you want

00:14:41,520 --> 00:14:45,870
also our dispatch these actions here

00:14:44,070 --> 00:14:50,100
just for the logging purposes so that I

00:14:45,870 --> 00:14:51,960
know what has been dispatched and the

00:14:50,100 --> 00:14:54,660
magic here happens when in the reducer

00:14:51,960 --> 00:14:57,540
and how we can we compose it exactly as

00:14:54,660 --> 00:14:59,670
I said before now this slide I suppose

00:14:57,540 --> 00:15:02,430
let's suppose that the reducers always

00:14:59,670 --> 00:15:04,530
take the whole state not so not some

00:15:02,430 --> 00:15:06,180
local state with the path but but does

00:15:04,530 --> 00:15:08,760
the whole state so we'll simply just

00:15:06,180 --> 00:15:10,440
compose them all together take the first

00:15:08,760 --> 00:15:12,330
take the state apply the first reducer

00:15:10,440 --> 00:15:15,930
take what it has returned apply the next

00:15:12,330 --> 00:15:19,500
reducer and so on and then dispatch this

00:15:15,930 --> 00:15:21,720
action but we've simplified the the

00:15:19,500 --> 00:15:24,240
actions so that they contain path and

00:15:21,720 --> 00:15:26,160
the reducers and there and the reducers

00:15:24,240 --> 00:15:29,790
would operate on some sub state on the

00:15:26,160 --> 00:15:32,970
given path so we'll make this whole make

00:15:29,790 --> 00:15:38,790
this big action operate on global path

00:15:32,970 --> 00:15:41,550
and the current that the sorry create a

00:15:38,790 --> 00:15:44,190
reducer that operates on the whole state

00:15:41,550 --> 00:15:45,610
from this local register and path so

00:15:44,190 --> 00:15:48,550
it's possible in

00:15:45,610 --> 00:15:51,010
this simple function does there and this

00:15:48,550 --> 00:15:52,300
is all the code you need to write I said

00:15:51,010 --> 00:15:56,290
this is all the code you need to write

00:15:52,300 --> 00:15:58,690
for for creating such middleware and you

00:15:56,290 --> 00:16:01,209
can now simple dispatch multiple actions

00:15:58,690 --> 00:16:03,430
which happen at the very same time in

00:16:01,209 --> 00:16:06,490
the single state transition so I can now

00:16:03,430 --> 00:16:09,579
go and update my logout action like this

00:16:06,490 --> 00:16:13,200
and dispatch these multiple actions with

00:16:09,579 --> 00:16:16,170
the within the single state transition

00:16:13,200 --> 00:16:18,579
so yeah this is this is reused Redux

00:16:16,170 --> 00:16:20,920
that's all it is we are dispatching

00:16:18,579 --> 00:16:23,200
reducers in the path or they but it

00:16:20,920 --> 00:16:26,260
happened and we are we are very happy to

00:16:23,200 --> 00:16:28,570
that we are using it I no longer want to

00:16:26,260 --> 00:16:31,149
return to traditional readers I don't

00:16:28,570 --> 00:16:35,200
want to write a lot of code no I'm not a

00:16:31,149 --> 00:16:38,200
verbose kind of guy but there is I

00:16:35,200 --> 00:16:42,959
mentioned a lot of prose but perhaps

00:16:38,200 --> 00:16:46,269
you've noticed some some cons as well so

00:16:42,959 --> 00:16:49,000
we are losing one thing with this

00:16:46,269 --> 00:16:53,680
approach you might think we are we are

00:16:49,000 --> 00:16:56,140
losing civilize ability now what's the

00:16:53,680 --> 00:16:59,290
answer to that so we can't make this

00:16:56,140 --> 00:17:01,420
serializable we can't simply we can't

00:16:59,290 --> 00:17:03,550
make the function sterilizable so it

00:17:01,420 --> 00:17:06,970
wouldn't work the simple answer is that

00:17:03,550 --> 00:17:10,000
well don't use reduce Redux if you want

00:17:06,970 --> 00:17:12,880
your code runs your actions desperately

00:17:10,000 --> 00:17:15,309
to be survivable but now really let's be

00:17:12,880 --> 00:17:17,470
honest here how many of you do really

00:17:15,309 --> 00:17:19,329
need survivability desperately in your

00:17:17,470 --> 00:17:21,189
code in production how many have used

00:17:19,329 --> 00:17:25,360
the remote debugging tool in some

00:17:21,189 --> 00:17:26,650
production code as I've guessed there

00:17:25,360 --> 00:17:29,679
are a couple of hands zero like

00:17:26,650 --> 00:17:32,320
congratulations to you I am regarded

00:17:29,679 --> 00:17:34,240
glad you did but most of the time for

00:17:32,320 --> 00:17:36,610
most most people you don't need it it's

00:17:34,240 --> 00:17:38,679
you can still log all of the actions

00:17:36,610 --> 00:17:41,470
that have happened and see see what's

00:17:38,679 --> 00:17:44,500
been happening with the application but

00:17:41,470 --> 00:17:47,020
if you still need sterilized ability we

00:17:44,500 --> 00:17:48,669
we have been experimenting a little but

00:17:47,020 --> 00:17:50,470
just keep in mind this is just a

00:17:48,669 --> 00:17:52,059
theoretical experiment so we're not

00:17:50,470 --> 00:17:56,650
using it as in production we are just

00:17:52,059 --> 00:17:59,270
thinking about the improvements so we

00:17:56,650 --> 00:18:00,710
can't despair the reducer anymore and

00:17:59,270 --> 00:18:04,610
we'll probably need some piecing code

00:18:00,710 --> 00:18:06,260
which would match the dispatched actions

00:18:04,610 --> 00:18:08,030
against some reducers in code against

00:18:06,260 --> 00:18:11,690
some functions in codes so essentially

00:18:08,030 --> 00:18:14,450
we are bringing back the type but we'll

00:18:11,690 --> 00:18:16,400
move things around so we still want to

00:18:14,450 --> 00:18:20,750
still like the idea of mounting the

00:18:16,400 --> 00:18:26,090
reducer on some part so so so we'll move

00:18:20,750 --> 00:18:27,440
it to some reducer definition and we

00:18:26,090 --> 00:18:29,060
want to preserve one-to-one

00:18:27,440 --> 00:18:31,760
correspondence between the actions and

00:18:29,060 --> 00:18:34,400
reducers so instead of having this type

00:18:31,760 --> 00:18:36,220
which we write somewhere on import we

00:18:34,400 --> 00:18:39,350
don't need that which we can just simply

00:18:36,220 --> 00:18:44,450
import the type of the reducer and to

00:18:39,350 --> 00:18:48,530
give in the action creator now we also

00:18:44,450 --> 00:18:51,410
need to tell the route reducer how how

00:18:48,530 --> 00:18:53,810
the reducer looks like so the route

00:18:51,410 --> 00:18:55,190
reducer needs to be aware of all the

00:18:53,810 --> 00:18:58,190
other reducers so we'll create some

00:18:55,190 --> 00:18:59,330
function like registered user and which

00:18:58,190 --> 00:19:02,570
does that for us

00:18:59,330 --> 00:19:04,700
and it can always it can also scope the

00:19:02,570 --> 00:19:06,230
types it could also make them unique so

00:19:04,700 --> 00:19:08,420
we don't have to go through this mental

00:19:06,230 --> 00:19:13,130
challenge every time now if you look at

00:19:08,420 --> 00:19:15,980
the action creator here it's very it

00:19:13,130 --> 00:19:17,960
looks pretty useless because it doesn't

00:19:15,980 --> 00:19:19,880
do anything it just takes the one type

00:19:17,960 --> 00:19:22,970
where is it one-to-one correspondence

00:19:19,880 --> 00:19:25,100
between the reducer and puts the count

00:19:22,970 --> 00:19:25,880
in the object right so perhaps we don't

00:19:25,100 --> 00:19:29,150
need it at all

00:19:25,880 --> 00:19:31,610
we're thinking let's look at the

00:19:29,150 --> 00:19:34,100
component where usable look like so you

00:19:31,610 --> 00:19:36,740
have this disconnect here and with the

00:19:34,100 --> 00:19:38,660
maps map dispatch the props you bind

00:19:36,740 --> 00:19:40,250
your action creators where the change

00:19:38,660 --> 00:19:42,200
calendar by is your action creator and

00:19:40,250 --> 00:19:45,440
the increase counter and decrease

00:19:42,200 --> 00:19:49,400
calories what you bind now if we didn't

00:19:45,440 --> 00:19:51,460
have them if we just had the didn't have

00:19:49,400 --> 00:19:55,520
the action creators at all we'll just

00:19:51,460 --> 00:19:56,930
simply spread it into a map where the

00:19:55,520 --> 00:19:59,180
positional arguments of the change

00:19:56,930 --> 00:20:01,280
counter by function will change to named

00:19:59,180 --> 00:20:03,140
arguments and instead of specifying the

00:20:01,280 --> 00:20:05,210
function we specify the type which is

00:20:03,140 --> 00:20:07,940
not much of an overhead and we also get

00:20:05,210 --> 00:20:09,669
named parameters which might not be a

00:20:07,940 --> 00:20:12,669
bad thing right

00:20:09,669 --> 00:20:16,209
so yeah that's it and still you need to

00:20:12,669 --> 00:20:18,070
write very less code for for creating

00:20:16,209 --> 00:20:20,349
some action this is all you need to

00:20:18,070 --> 00:20:22,869
write with registering reducer like this

00:20:20,349 --> 00:20:25,239
and you need to call call it in the in

00:20:22,869 --> 00:20:27,969
the connect like that

00:20:25,239 --> 00:20:31,209
so still preserves the logic in one

00:20:27,969 --> 00:20:33,969
place it's still very less code to write

00:20:31,209 --> 00:20:35,979
it might not be that bad but still we

00:20:33,969 --> 00:20:39,609
haven't used it in production yet so

00:20:35,979 --> 00:20:43,169
it's just a theoretical experiment now

00:20:39,609 --> 00:20:46,629
you might think that you already have an

00:20:43,169 --> 00:20:48,789
application which has in redux and

00:20:46,629 --> 00:20:50,139
traditional redux or whatever library

00:20:48,789 --> 00:20:53,919
you were using for using the boilerplate

00:20:50,139 --> 00:20:56,829
and it has a lot of actions and a lot of

00:20:53,919 --> 00:20:58,389
reducers you don't want to do do this in

00:20:56,829 --> 00:21:00,729
the single transition is not worth

00:20:58,389 --> 00:21:03,219
changing all the actions and reducers in

00:21:00,729 --> 00:21:05,320
the single pull request why completely

00:21:03,219 --> 00:21:07,809
agree with you it's not worth doing it

00:21:05,320 --> 00:21:10,440
in a single per request right but you

00:21:07,809 --> 00:21:14,799
can go do it completely gradually

00:21:10,440 --> 00:21:16,929
because you just these reducers there's

00:21:14,799 --> 00:21:19,509
different types of users they can very

00:21:16,929 --> 00:21:23,049
easily coexist with each other you just

00:21:19,509 --> 00:21:24,940
have to let everyone have the steering

00:21:23,049 --> 00:21:26,559
wheel for a while so you pass the state

00:21:24,940 --> 00:21:29,529
to the for an action to the first one

00:21:26,559 --> 00:21:31,659
see what it has returned past state and

00:21:29,529 --> 00:21:34,239
next one and so on so each one every

00:21:31,659 --> 00:21:36,459
each one get to say and in what happens

00:21:34,239 --> 00:21:41,309
to the state and they can easily coexist

00:21:36,459 --> 00:21:43,570
with each other or no wishes right so

00:21:41,309 --> 00:21:45,969
this probably won't work right so that's

00:21:43,570 --> 00:21:50,079
why I went with this approach okay so

00:21:45,969 --> 00:21:53,289
I've I've prepared repository with all

00:21:50,079 --> 00:21:56,889
of these all of these features of these

00:21:53,289 --> 00:21:59,589
different approaches coded so there is

00:21:56,889 --> 00:22:01,929
the reduced redirects the reduced

00:21:59,589 --> 00:22:04,059
service realizable Redux batch actions

00:22:01,929 --> 00:22:06,609
middleware for these these both read

00:22:04,059 --> 00:22:09,119
approaches readers compound reusability

00:22:06,609 --> 00:22:12,249
which I've mentioned everything and code

00:22:09,119 --> 00:22:14,229
included they're all coexisting in the

00:22:12,249 --> 00:22:16,359
same environment so if you're interested

00:22:14,229 --> 00:22:18,219
in how that would look like just go and

00:22:16,359 --> 00:22:20,169
leave me comments if you find something

00:22:18,219 --> 00:22:21,400
you've run into some issues I'll be

00:22:20,169 --> 00:22:25,330
happy to have

00:22:21,400 --> 00:22:28,000
to discuss so I guess that's all from me

00:22:25,330 --> 00:22:42,070
and if you have any questions well thank

00:22:28,000 --> 00:22:44,950
you any questions and you remember the

00:22:42,070 --> 00:22:47,500
questions okay now so thanks things

00:22:44,950 --> 00:22:49,420
you're right so I think we have a couple

00:22:47,500 --> 00:22:53,590
of minutes we can take some of these

00:22:49,420 --> 00:22:57,340
questions and I mean thanks for you know

00:22:53,590 --> 00:23:00,630
for the approach of trying to help

00:22:57,340 --> 00:23:04,300
when using rataxes a little bit you know

00:23:00,630 --> 00:23:06,580
not so common that people from you know

00:23:04,300 --> 00:23:08,740
different companies and teams they try

00:23:06,580 --> 00:23:10,600
to share this you know these

00:23:08,740 --> 00:23:14,050
explorations so thank thank you for that

00:23:10,600 --> 00:23:17,050
and let's see the first one so doesn't

00:23:14,050 --> 00:23:20,590
copying the action type with a reducer

00:23:17,050 --> 00:23:23,740
break its reusability for example if we

00:23:20,590 --> 00:23:26,080
want to use it within redact saga right

00:23:23,740 --> 00:23:27,880
so I personally didn't have too much

00:23:26,080 --> 00:23:30,700
experience with reading saga but I

00:23:27,880 --> 00:23:32,920
didn't like to use it because it invent

00:23:30,700 --> 00:23:35,380
it adds an additional state your

00:23:32,920 --> 00:23:37,330
application your application in addition

00:23:35,380 --> 00:23:39,250
to your state that you have with redox

00:23:37,330 --> 00:23:41,320
or other state you have you still have

00:23:39,250 --> 00:23:43,720
the state of the saga where the cursor

00:23:41,320 --> 00:23:48,990
is so I didn't like to use it so I'm not

00:23:43,720 --> 00:23:50,140
sure how we really address this question

00:23:48,990 --> 00:23:52,180
sorry

00:23:50,140 --> 00:23:56,680
perhaps I used a little bit more about

00:23:52,180 --> 00:24:00,250
retargeting no problem the next question

00:23:56,680 --> 00:24:03,220
so what what will happen if we have one

00:24:00,250 --> 00:24:05,620
reducer taking different actions or

00:24:03,220 --> 00:24:08,650
multiple actions how that would be

00:24:05,620 --> 00:24:11,140
approach yeah I think this was basically

00:24:08,650 --> 00:24:14,470
watched both the batch dispatch

00:24:11,140 --> 00:24:16,000
middleware was about so you're saying

00:24:14,470 --> 00:24:18,220
that you would like to listen to

00:24:16,000 --> 00:24:24,910
multiply actions sorry you listened to

00:24:18,220 --> 00:24:30,010
multiple actions and I'm not sure I

00:24:24,910 --> 00:24:31,540
could use I could listen to multiple

00:24:30,010 --> 00:24:34,589
actions using one reducer

00:24:31,540 --> 00:24:34,589
[Music]

00:24:40,390 --> 00:24:44,990
actually sing yeah and did that that's

00:24:43,190 --> 00:24:46,910
that in multiple reducers if you listen

00:24:44,990 --> 00:24:49,460
to one action okay so this is what the

00:24:46,910 --> 00:24:52,220
bad dispatch metal bear was about so if

00:24:49,460 --> 00:24:54,410
you want to do state changes in multiple

00:24:52,220 --> 00:24:57,590
parts of the state you just dispatch

00:24:54,410 --> 00:24:59,300
them as an area of action then the then

00:24:57,590 --> 00:25:01,130
the middle bear up will do do its thing

00:24:59,300 --> 00:25:04,640
and it's nice because you can also

00:25:01,130 --> 00:25:05,690
always just check what every action is

00:25:04,640 --> 00:25:07,250
doing can you see what you're

00:25:05,690 --> 00:25:08,690
dispatching you don't have to go and

00:25:07,250 --> 00:25:10,250
search for the type and go through all

00:25:08,690 --> 00:25:16,520
of the reducer that you're handling it

00:25:10,250 --> 00:25:18,590
so it's much better actually okay let's

00:25:16,520 --> 00:25:21,700
just take another one

00:25:18,590 --> 00:25:25,400
aren't you recreating reducer function

00:25:21,700 --> 00:25:30,770
redundantly each time an action is

00:25:25,400 --> 00:25:36,470
created yes I am and I am creating an

00:25:30,770 --> 00:25:41,080
anonymous function well I am I know what

00:25:36,470 --> 00:25:43,610
are they I mean are we going for a WebGL

00:25:41,080 --> 00:25:45,500
performance somewhere or something this

00:25:43,610 --> 00:25:47,000
doesn't really matter too much creating

00:25:45,500 --> 00:25:49,520
one anonymous function for every

00:25:47,000 --> 00:25:53,260
dispassion doesn't really matter I guess

00:25:49,520 --> 00:25:55,730
I would say so there are not really

00:25:53,260 --> 00:25:58,250
great implications from doing that sorry

00:25:55,730 --> 00:26:00,230
there's no big implications like perform

00:25:58,250 --> 00:26:02,330
and wise or maybe resources well

00:26:00,230 --> 00:26:04,970
creating an anonymous function is but

00:26:02,330 --> 00:26:09,230
some performance overhead but I think

00:26:04,970 --> 00:26:11,000
it's not too much for dispatcher right

00:26:09,230 --> 00:26:14,960
so there is a lot of other overhead

00:26:11,000 --> 00:26:17,660
happening in this patch than this okay I

00:26:14,960 --> 00:26:19,070
think yeah we still have a couple of

00:26:17,660 --> 00:26:22,760
minutes more

00:26:19,070 --> 00:26:24,860
what about testing since you keep the

00:26:22,760 --> 00:26:28,190
reducer inside the action I think you

00:26:24,860 --> 00:26:30,590
lose some possibility to test it on its

00:26:28,190 --> 00:26:35,110
own like a separate test for for that

00:26:30,590 --> 00:26:35,110
reducer that's an interesting question

00:26:35,830 --> 00:26:41,150
it really is so you could still you

00:26:39,530 --> 00:26:43,130
could still test

00:26:41,150 --> 00:26:45,530
well I realized - back to the other

00:26:43,130 --> 00:26:46,780
questions you can still not make an

00:26:45,530 --> 00:26:49,260
anonymous function you can

00:26:46,780 --> 00:26:52,600
create some reducers which you test

00:26:49,260 --> 00:26:55,240
which is test independently and then

00:26:52,600 --> 00:26:57,340
just use use them as the is the

00:26:55,240 --> 00:26:59,440
functions you have defined in the

00:26:57,340 --> 00:27:06,390
reducer that you dispatched so you could

00:26:59,440 --> 00:27:06,390
do it that's a good question really okay

00:27:06,420 --> 00:27:12,670
yeah I think we have okay let's take the

00:27:09,970 --> 00:27:15,820
last one now dispatching multiple

00:27:12,670 --> 00:27:18,580
actions and anti-pattern wouldn't be

00:27:15,820 --> 00:27:22,740
better to have an action for actual user

00:27:18,580 --> 00:27:25,090
system actions just to do that

00:27:22,740 --> 00:27:28,300
dispatching multiple actions as in

00:27:25,090 --> 00:27:31,180
updating the state and model paths at

00:27:28,300 --> 00:27:34,210
the same time I don't think this is an

00:27:31,180 --> 00:27:36,220
anti-pattern I for example in the logout

00:27:34,210 --> 00:27:38,290
action you probably want to do that

00:27:36,220 --> 00:27:40,270
because you don't want any intermediate

00:27:38,290 --> 00:27:42,400
staging glitches and when you're for

00:27:40,270 --> 00:27:44,500
example fetching some data you probably

00:27:42,400 --> 00:27:48,100
want to store them in some cash and then

00:27:44,500 --> 00:27:49,330
store them what you want to display so I

00:27:48,100 --> 00:27:50,950
don't think this is really an

00:27:49,330 --> 00:27:55,930
anti-pattern dispatching multiple

00:27:50,950 --> 00:28:03,460
actions and I don't think I understand

00:27:55,930 --> 00:28:04,540
the other question yeah if you disperse

00:28:03,460 --> 00:28:06,550
them separately you might have

00:28:04,540 --> 00:28:08,650
intermediate stage like yeah that that

00:28:06,550 --> 00:28:11,130
would be an anti-pattern but that's why

00:28:08,650 --> 00:28:13,960
you can batch them merge the actions

00:28:11,130 --> 00:28:17,290
well there's so much to talk about relax

00:28:13,960 --> 00:28:20,200
and this new approach so if you have

00:28:17,290 --> 00:28:22,240
more questions laughing I'll be I'll be

00:28:20,200 --> 00:28:25,000
available at the vacant elapsed and so

00:28:22,240 --> 00:28:28,780
after after this talk so grab me and

00:28:25,000 --> 00:28:31,590
let's talk yeah thanks that's great

00:28:28,780 --> 00:28:31,590
thanks again

00:28:32,580 --> 00:28:34,640

YouTube URL: https://www.youtube.com/watch?v=v01Kxg-5R3I


