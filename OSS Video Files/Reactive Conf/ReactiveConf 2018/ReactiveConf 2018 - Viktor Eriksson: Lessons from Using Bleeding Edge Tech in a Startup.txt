Title: ReactiveConf 2018 - Viktor Eriksson: Lessons from Using Bleeding Edge Tech in a Startup
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Lessons from Using Bleeding Edge Tech in a Startup

Our stack at Pilloxa contains shiny things like React Native, ClojureScript and Serverless but also classics like Jetty servers and Postgres databases. In this talk I’ll talk about the technology we’ve used and abstract our learnings into something that could be useful when evaluating tech stack choices in general.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,270 --> 00:00:18,279
thank you very much

00:00:14,769 --> 00:00:20,770
yeah I'll talk about the lessons we've

00:00:18,279 --> 00:00:25,510
learned from using bleeding edge

00:00:20,770 --> 00:00:28,269
technology building our startup yeah so

00:00:25,510 --> 00:00:32,050
me my name is Victor Eriksson I'm the

00:00:28,269 --> 00:00:34,840
CTO at Palazzo and we're a med tech IOT

00:00:32,050 --> 00:00:37,839
startup based in Stockholm we help

00:00:34,840 --> 00:00:38,970
people take their medications and I've

00:00:37,839 --> 00:00:41,440
been working professionally with

00:00:38,970 --> 00:00:42,909
JavaScript's and closure scripts and

00:00:41,440 --> 00:00:47,110
some other technologies that I'll

00:00:42,909 --> 00:00:49,629
mention for about five years and yeah as

00:00:47,110 --> 00:00:54,610
synchronous said I enjoy these other

00:00:49,629 --> 00:00:57,339
little emojis as well and yeah so what

00:00:54,610 --> 00:00:59,199
I'll talk about then today first I'll

00:00:57,339 --> 00:01:02,140
talk a little about the the allure of

00:00:59,199 --> 00:01:04,119
the bleeding edge why do we what is why

00:01:02,140 --> 00:01:06,580
do we want to do adopt a new technology

00:01:04,119 --> 00:01:10,090
at all and then I'll talk a little about

00:01:06,580 --> 00:01:13,810
what we at pillocks are needed and the

00:01:10,090 --> 00:01:16,180
the tech stack that we chose pros and

00:01:13,810 --> 00:01:19,270
cons with that tech stack and then I'll

00:01:16,180 --> 00:01:21,820
try to generalize these in some sort of

00:01:19,270 --> 00:01:27,190
learnings that you might or might not

00:01:21,820 --> 00:01:30,490
agree with so to begin and the alert the

00:01:27,190 --> 00:01:32,860
bleeding edge obviously its apart from

00:01:30,490 --> 00:01:35,200
being feeling very cool and exciting to

00:01:32,860 --> 00:01:38,560
do something new it's also historically

00:01:35,200 --> 00:01:41,440
proven to yield very like very good

00:01:38,560 --> 00:01:43,630
improvements in productivity quality and

00:01:41,440 --> 00:01:47,110
performance so it's definitely worth

00:01:43,630 --> 00:01:55,000
pursuing it's not always a success story

00:01:47,110 --> 00:01:58,450
though when I when I started in

00:01:55,000 --> 00:02:01,690
programming or as a front developer 2013

00:01:58,450 --> 00:02:03,100
this framework was pretty cool famous I

00:02:01,690 --> 00:02:06,729
don't know if you've heard about it I

00:02:03,100 --> 00:02:08,860
was a new beginner programmer and when I

00:02:06,729 --> 00:02:10,780
read the ultimate web platform for

00:02:08,860 --> 00:02:16,690
developers of designers I thought this

00:02:10,780 --> 00:02:19,170
is obviously for me the problem was yeah

00:02:16,690 --> 00:02:21,480
the selling point was this

00:02:19,170 --> 00:02:24,810
3d renderings are so good that it will

00:02:21,480 --> 00:02:29,099
make native mobile apps obsolete and you

00:02:24,810 --> 00:02:31,319
can use it even as a beginner I I used

00:02:29,099 --> 00:02:34,950
it as a beginner and it was resulted in

00:02:31,319 --> 00:02:37,739
a horribly laggy parallax website and I

00:02:34,950 --> 00:02:39,470
tried to optimize JavaScript in ways

00:02:37,739 --> 00:02:43,730
that you shouldn't optimized javascript

00:02:39,470 --> 00:02:46,140
not successful at all then however I

00:02:43,730 --> 00:02:49,230
tried the next framework that also came

00:02:46,140 --> 00:02:52,230
out in 2013 and this is the react

00:02:49,230 --> 00:02:55,110
website from them and it has a much more

00:02:52,230 --> 00:02:58,160
humble tagline a JavaScript library for

00:02:55,110 --> 00:03:02,400
building web user user interfaces and

00:02:58,160 --> 00:03:05,459
it's what react promised was you only

00:03:02,400 --> 00:03:08,400
added the global or component state and

00:03:05,459 --> 00:03:11,489
we will solve the Dom for you and yes I

00:03:08,400 --> 00:03:14,569
had written some previous web apps and

00:03:11,489 --> 00:03:17,700
this resulted in way less bugs and

00:03:14,569 --> 00:03:20,280
pretty performant even when written by a

00:03:17,700 --> 00:03:25,680
beginner so you can see bleeding-edge

00:03:20,280 --> 00:03:29,010
can be very good and very bad so back to

00:03:25,680 --> 00:03:32,310
Apple Aqsa so we are a med tech startup

00:03:29,010 --> 00:03:34,260
we have a smart pill box with sensors

00:03:32,310 --> 00:03:37,079
that sense if you take your medication

00:03:34,260 --> 00:03:38,549
or not and if you're about to be late or

00:03:37,079 --> 00:03:41,010
miss your medicine you get a

00:03:38,549 --> 00:03:42,840
notification in your phone and so have a

00:03:41,010 --> 00:03:44,609
smart pill box and an app I'll be

00:03:42,840 --> 00:03:49,260
talking mainly about the app side here

00:03:44,609 --> 00:03:51,510
today and we started in 2015 and as you

00:03:49,260 --> 00:03:53,400
see most of the technologies that we use

00:03:51,510 --> 00:03:55,739
are from that year or a couple of years

00:03:53,400 --> 00:03:58,799
earlier so there's a lot of new

00:03:55,739 --> 00:04:01,859
technology now what we need is what we

00:03:58,799 --> 00:04:04,350
needed was an iOS and an Android app we

00:04:01,859 --> 00:04:06,120
needed some sort of cloud backup and

00:04:04,350 --> 00:04:08,700
sync so that you when you get a new

00:04:06,120 --> 00:04:10,470
device your data will silver there and

00:04:08,700 --> 00:04:12,390
then we needed some analytics

00:04:10,470 --> 00:04:15,030
infrastructure to keep track of what our

00:04:12,390 --> 00:04:16,889
users are doing or like are they using

00:04:15,030 --> 00:04:19,440
the app oh yeah those kinds of things

00:04:16,889 --> 00:04:24,600
anonymized of course this is yeah we're

00:04:19,440 --> 00:04:27,479
very very adamant about security so the

00:04:24,600 --> 00:04:29,220
actual signal that we use in the app or

00:04:27,479 --> 00:04:31,560
using you can't see it right now but

00:04:29,220 --> 00:04:32,729
it's react native and they were using

00:04:31,560 --> 00:04:34,949
clojurescript

00:04:32,729 --> 00:04:40,589
to compile to JavaScript in the react

00:04:34,949 --> 00:04:44,550
native app and then in the cloud backup

00:04:40,589 --> 00:04:47,849
and sync we're using AWS but using

00:04:44,550 --> 00:04:50,249
terraform to manage AWS and we're using

00:04:47,849 --> 00:04:54,599
closure and we're using Postgres as a

00:04:50,249 --> 00:04:57,120
database and then for our logging and

00:04:54,599 --> 00:04:59,430
which is anonymized on the client side

00:04:57,120 --> 00:05:02,729
and we're using the server list

00:04:59,430 --> 00:05:08,120
framework previously jaws and the

00:05:02,729 --> 00:05:10,699
elasticsearch and if some firebase so

00:05:08,120 --> 00:05:12,629
now i'm going to talk about like or

00:05:10,699 --> 00:05:14,339
experiences of these technologies and

00:05:12,629 --> 00:05:16,979
it's very important that this is from

00:05:14,339 --> 00:05:20,729
our perspective you might have totally

00:05:16,979 --> 00:05:23,249
different experiences so we used

00:05:20,729 --> 00:05:25,259
firebase to begin with for our app locks

00:05:23,249 --> 00:05:27,499
and bug reports and those kinds of

00:05:25,259 --> 00:05:30,300
things and it's good because it's

00:05:27,499 --> 00:05:33,199
extremely easy but also you don't know

00:05:30,300 --> 00:05:37,319
what firebase is if your yeah it's like

00:05:33,199 --> 00:05:39,839
MongoDB as a service you could say and

00:05:37,319 --> 00:05:42,629
it's start 2012 and it's super easy you

00:05:39,839 --> 00:05:44,550
can just post a JSON document to an

00:05:42,629 --> 00:05:48,389
endpoint and that gets inserted to a

00:05:44,550 --> 00:05:51,899
database magically and it's also we used

00:05:48,389 --> 00:05:53,999
it for some hardware we develop its

00:05:51,899 --> 00:05:56,099
hardware tooling to test our hardware

00:05:53,999 --> 00:05:57,689
and then we had one server that was

00:05:56,099 --> 00:05:59,490
collecting metrics from the hardware and

00:05:57,689 --> 00:06:01,379
another that we were discipline is

00:05:59,490 --> 00:06:03,569
playing some charts of how these metrics

00:06:01,379 --> 00:06:05,219
came in in real time and it was super

00:06:03,569 --> 00:06:07,199
easy to set up you magically just

00:06:05,219 --> 00:06:10,050
subscribe to this um data and you get it

00:06:07,199 --> 00:06:12,180
and it's it works very well we had some

00:06:10,050 --> 00:06:13,439
problems though when in the indie

00:06:12,180 --> 00:06:17,159
production when we started filling up

00:06:13,439 --> 00:06:19,709
our web app with or the with logs and we

00:06:17,159 --> 00:06:21,629
realized we are the first the web UI

00:06:19,709 --> 00:06:24,930
couldn't handle the amount of data

00:06:21,629 --> 00:06:27,539
anymore okay but it's fine it's a web UI

00:06:24,930 --> 00:06:30,149
I'll just delete the logs from from the

00:06:27,539 --> 00:06:32,209
CLI but I couldn't do that either

00:06:30,149 --> 00:06:35,879
it also timed out so in the end I had to

00:06:32,209 --> 00:06:37,860
fetch all the keys and then delete them

00:06:35,879 --> 00:06:39,509
like and we do a script that iterate

00:06:37,860 --> 00:06:42,839
through all the keys and delete them one

00:06:39,509 --> 00:06:44,399
by one which is something that they like

00:06:42,839 --> 00:06:46,230
yeah obviously you don't read that on

00:06:44,399 --> 00:06:49,020
the on the website

00:06:46,230 --> 00:06:52,950
and it also had for us very limited

00:06:49,020 --> 00:06:54,990
query possibilities yeah so that's also

00:06:52,950 --> 00:06:58,620
something I could have could have

00:06:54,990 --> 00:07:00,570
researched but I didn't yeah react

00:06:58,620 --> 00:07:03,570
native and we already heard some talks

00:07:00,570 --> 00:07:05,240
about rigged Naidu today and the main

00:07:03,570 --> 00:07:08,240
selling point I guess is to write a

00:07:05,240 --> 00:07:10,980
multi-platform apps in JavaScript with

00:07:08,240 --> 00:07:15,480
high productivity and better performance

00:07:10,980 --> 00:07:19,530
than html5 apps yeah and the good thing

00:07:15,480 --> 00:07:23,220
good things for us designing a UI with

00:07:19,530 --> 00:07:26,010
hot code reloading is super awesome

00:07:23,220 --> 00:07:27,510
compared to normal native like

00:07:26,010 --> 00:07:29,520
development when you have to recompile

00:07:27,510 --> 00:07:32,220
that kind of stuff so that's been really

00:07:29,520 --> 00:07:34,380
nice and also since we're using cleaner

00:07:32,220 --> 00:07:36,840
script we can have the repple connected

00:07:34,380 --> 00:07:39,270
which is like then we interactively

00:07:36,840 --> 00:07:42,210
connect to the running app and we can

00:07:39,270 --> 00:07:44,880
execute commands like show notifications

00:07:42,210 --> 00:07:47,040
and modify texts and stuff like we can

00:07:44,880 --> 00:07:49,410
control our whole business logic with

00:07:47,040 --> 00:07:52,560
like is basically zero overhead so the

00:07:49,410 --> 00:07:55,400
feedback loop is super fast also I did

00:07:52,560 --> 00:07:59,640
some calculations we are sharing a DFM

00:07:55,400 --> 00:08:03,300
85% over code between platforms and so

00:07:59,640 --> 00:08:06,690
then the rest 50% is Java plus Objective

00:08:03,300 --> 00:08:08,160
C another good thing about react native

00:08:06,690 --> 00:08:10,590
is that you can leverage all these

00:08:08,160 --> 00:08:13,380
compile to JavaScript languages not all

00:08:10,590 --> 00:08:15,690
you can like l unfortunately has its own

00:08:13,380 --> 00:08:18,390
doesn't use react so but the ones the

00:08:15,690 --> 00:08:22,710
use react type script flow reason call

00:08:18,390 --> 00:08:25,110
you script you can use another good

00:08:22,710 --> 00:08:27,180
thing is with native code it might not

00:08:25,110 --> 00:08:30,000
be super performance but the Interop is

00:08:27,180 --> 00:08:31,650
very easy so it's we wrote a lot of

00:08:30,000 --> 00:08:34,560
interrupts code and it's yeah very easy

00:08:31,650 --> 00:08:37,620
with native and a good thing is also the

00:08:34,560 --> 00:08:41,040
vast npm library or the all the npm

00:08:37,620 --> 00:08:43,500
libraries you can have access to some

00:08:41,040 --> 00:08:46,620
problems that we found working with

00:08:43,500 --> 00:08:48,000
react native is it's like kind of

00:08:46,620 --> 00:08:49,980
running fast and break things they're

00:08:48,000 --> 00:08:52,110
still breaking changes interactive

00:08:49,980 --> 00:08:54,920
especially on the tooling side which

00:08:52,110 --> 00:08:58,140
affects us using clojurescript

00:08:54,920 --> 00:09:00,510
it has naturally some slower performance

00:08:58,140 --> 00:09:02,190
than native which most notably is

00:09:00,510 --> 00:09:04,650
noticed when you open the app it takes

00:09:02,190 --> 00:09:07,529
quite a while to load load up the actual

00:09:04,650 --> 00:09:10,500
the actual content and we had to rewrite

00:09:07,529 --> 00:09:11,880
some Luth of sync things in native but

00:09:10,500 --> 00:09:14,100
we still would have had to written those

00:09:11,880 --> 00:09:16,470
in native though so that's not really a

00:09:14,100 --> 00:09:18,870
loss and also obviously a con it's also

00:09:16,470 --> 00:09:24,270
NPM with all the security problems and

00:09:18,870 --> 00:09:27,630
yeah you are aware of that I'm sure no

00:09:24,270 --> 00:09:30,060
technology were using elasticsearch so

00:09:27,630 --> 00:09:31,950
we gather all the app locks and then we

00:09:30,060 --> 00:09:35,850
put them in elasticsearch which is a

00:09:31,950 --> 00:09:38,250
database that you can search and with

00:09:35,850 --> 00:09:40,980
its it comes with a front end called

00:09:38,250 --> 00:09:43,290
Cabana so you can super easily search

00:09:40,980 --> 00:09:45,690
through millions of logs easily you can

00:09:43,290 --> 00:09:47,850
just spray all your like app logs into

00:09:45,690 --> 00:09:50,910
there and it's it just eats it very good

00:09:47,850 --> 00:09:52,710
and it's easy to get going and you can

00:09:50,910 --> 00:09:55,710
do just the basic easy search like

00:09:52,710 --> 00:09:57,600
search for a word but then when you want

00:09:55,710 --> 00:10:00,120
to do more advanced stuff like how many

00:09:57,600 --> 00:10:03,270
times it's like aggregations those kinds

00:10:00,120 --> 00:10:07,920
of styles it has this fairly confusing

00:10:03,270 --> 00:10:11,820
but powerful query API so a query is a

00:10:07,920 --> 00:10:14,279
JSON object basically and the bad things

00:10:11,820 --> 00:10:16,650
about elastic searcher we run into is

00:10:14,279 --> 00:10:18,720
that when you're a beginner singing up

00:10:16,650 --> 00:10:21,150
you might not know all the settings that

00:10:18,720 --> 00:10:23,250
you want and then then you can't change

00:10:21,150 --> 00:10:24,300
those settings afterwards like then

00:10:23,250 --> 00:10:26,490
you're stuck with that you have to like

00:10:24,300 --> 00:10:31,230
copy things up so it's like it's a

00:10:26,490 --> 00:10:33,480
little that's a little a little bad it's

00:10:31,230 --> 00:10:35,610
also a new mental model if you know I

00:10:33,480 --> 00:10:37,980
know sequel it doesn't help me at all

00:10:35,610 --> 00:10:39,660
when I'm like doing my these queries you

00:10:37,980 --> 00:10:43,020
have to learn this whole new query

00:10:39,660 --> 00:10:45,660
language or like query setup I guess and

00:10:43,020 --> 00:10:47,820
it's not super intuitive and it's the

00:10:45,660 --> 00:10:50,430
documentation is not great and stuff it

00:10:47,820 --> 00:10:51,900
is powerful though but it can also be

00:10:50,430 --> 00:10:55,010
hard to debug when things are not

00:10:51,900 --> 00:10:59,310
working it's not super easy to know why

00:10:55,010 --> 00:11:00,959
we're also using closure script and

00:10:59,310 --> 00:11:04,890
close your script for those who don't

00:11:00,959 --> 00:11:07,110
know is a functional Lisp that has

00:11:04,890 --> 00:11:10,980
immutable data structures

00:11:07,110 --> 00:11:13,320
and it compiles to JavaScript and the

00:11:10,980 --> 00:11:16,110
good thing about closure script is it's

00:11:13,320 --> 00:11:19,079
a very powerful functional language and

00:11:16,110 --> 00:11:21,570
I like functional programming so then

00:11:19,079 --> 00:11:23,160
that suits me very well it also has

00:11:21,570 --> 00:11:25,410
these really good immutable data

00:11:23,160 --> 00:11:29,089
structures built in nowadays you have

00:11:25,410 --> 00:11:31,440
things like immutable Jas and that is

00:11:29,089 --> 00:11:33,420
very similar but the good thing is in

00:11:31,440 --> 00:11:35,519
closure their first-class citizens you

00:11:33,420 --> 00:11:38,279
don't have to change anything that's out

00:11:35,519 --> 00:11:39,630
of the box it has a wrap ball so you can

00:11:38,279 --> 00:11:41,370
as I said you can connect to your

00:11:39,630 --> 00:11:44,250
running environment and execute code

00:11:41,370 --> 00:11:46,920
which if you if you haven't used that it

00:11:44,250 --> 00:11:49,920
might be you might not yeah yet how

00:11:46,920 --> 00:11:53,839
useful that is but it's very nice and it

00:11:49,920 --> 00:11:55,860
also has a very stable ecosystem

00:11:53,839 --> 00:11:59,040
although it might be a little fragment

00:11:55,860 --> 00:12:01,769
at times but basically since I the first

00:11:59,040 --> 00:12:03,660
time I wrote code five years ago not

00:12:01,769 --> 00:12:04,140
much has happened and that's a good

00:12:03,660 --> 00:12:05,550
thing

00:12:04,140 --> 00:12:07,260
like I can use basically the same

00:12:05,550 --> 00:12:10,589
libraries I rarely have to update them

00:12:07,260 --> 00:12:12,690
it just works so that's that's my

00:12:10,589 --> 00:12:15,180
personal experience that's been it's

00:12:12,690 --> 00:12:18,120
been nice that like no breaking changes

00:12:15,180 --> 00:12:21,269
those things are very very stable and

00:12:18,120 --> 00:12:24,209
it's also a dynamic language like

00:12:21,269 --> 00:12:26,490
JavaScript and so a Java function is a

00:12:24,209 --> 00:12:28,740
clojurescript function vice-versa and

00:12:26,490 --> 00:12:30,630
you have different data structures but

00:12:28,740 --> 00:12:32,910
you can still access javascript data

00:12:30,630 --> 00:12:34,740
structures very easily so the Interop

00:12:32,910 --> 00:12:38,220
with javascript is is very very

00:12:34,740 --> 00:12:39,360
straightforward about things is when you

00:12:38,220 --> 00:12:41,279
start off I don't know if you've seen

00:12:39,360 --> 00:12:42,990
call your script but it's a lisp so we

00:12:41,279 --> 00:12:45,390
have all these parentheses and the

00:12:42,990 --> 00:12:47,610
immutability and all these and now

00:12:45,390 --> 00:12:49,740
immutability is becoming more standard

00:12:47,610 --> 00:12:51,480
with immutability jas and those things

00:12:49,740 --> 00:12:53,760
but when I started like I've never never

00:12:51,480 --> 00:12:55,890
heard of it before so it took a while to

00:12:53,760 --> 00:12:59,310
get started and get my brain surrounded

00:12:55,890 --> 00:13:02,730
it also has a small community so if you

00:12:59,310 --> 00:13:05,279
run into a slightly edge case issue that

00:13:02,730 --> 00:13:07,110
then you can't count on someone from

00:13:05,279 --> 00:13:08,519
Facebook or Google to come and fix that

00:13:07,110 --> 00:13:11,850
for you you have to do that yourself

00:13:08,519 --> 00:13:14,339
usually and they're also the tooling

00:13:11,850 --> 00:13:17,399
that like now we're using closure script

00:13:14,339 --> 00:13:20,190
and then react native and that can be

00:13:17,399 --> 00:13:21,089
some little complex at times you can't

00:13:20,190 --> 00:13:25,170
be afraid to

00:13:21,089 --> 00:13:27,809
read some source code and we're using

00:13:25,170 --> 00:13:29,970
closure on the back end it's like

00:13:27,809 --> 00:13:33,059
closure script but for the JVM

00:13:29,970 --> 00:13:38,279
oh yeah closures it was yeah I came out

00:13:33,059 --> 00:13:40,470
2009 and we share these specs so closer

00:13:38,279 --> 00:13:42,720
and closer script has these like runtime

00:13:40,470 --> 00:13:44,129
types and you can share between the

00:13:42,720 --> 00:13:47,129
back-end and front-end so you can make

00:13:44,129 --> 00:13:49,259
sure that the same data leaves the the

00:13:47,129 --> 00:13:53,100
front-end and as and really just the

00:13:49,259 --> 00:13:54,569
backend and for us closure has has

00:13:53,100 --> 00:13:58,740
worked very well we have a very basic

00:13:54,569 --> 00:14:00,870
REST API we deployed it in a week and we

00:13:58,740 --> 00:14:03,120
like we haven't touched it since it just

00:14:00,870 --> 00:14:04,730
yeah it works well and I I added all

00:14:03,120 --> 00:14:07,559
right I did another end point in

00:14:04,730 --> 00:14:10,550
literally 30 minutes and it was deployed

00:14:07,559 --> 00:14:14,730
and it works well so for us it's been

00:14:10,550 --> 00:14:18,540
very good then we're using Postgres and

00:14:14,730 --> 00:14:22,199
yeah this is the oldest like technology

00:14:18,540 --> 00:14:24,240
of the game it's from 96 very old it's

00:14:22,199 --> 00:14:25,170
and yeah obviously post Chris super

00:14:24,240 --> 00:14:29,670
Babel tested

00:14:25,170 --> 00:14:31,649
everyone uses it sequel is powerful but

00:14:29,670 --> 00:14:33,209
you can also use it as a beginner and it

00:14:31,649 --> 00:14:35,639
works with all the tools everything is

00:14:33,209 --> 00:14:38,100
prosperous compatible and the problem is

00:14:35,639 --> 00:14:40,319
sequel you have to learn sequel

00:14:38,100 --> 00:14:43,050
obviously it's not like you might

00:14:40,319 --> 00:14:46,230
understand it but it's not super super

00:14:43,050 --> 00:14:48,389
easy and also when you try to do more

00:14:46,230 --> 00:14:50,970
complex analytics you know like you

00:14:48,389 --> 00:14:53,730
can't do everything in sequel it's just

00:14:50,970 --> 00:14:55,319
gonna be this long code that no one

00:14:53,730 --> 00:14:57,749
understands there's no variables and

00:14:55,319 --> 00:14:59,670
it's just like it's not super easy to

00:14:57,749 --> 00:15:02,160
work with analytics in Postgres in my

00:14:59,670 --> 00:15:03,600
opinion you couldn't have an ETL work

00:15:02,160 --> 00:15:05,339
for when you take it up and you

00:15:03,600 --> 00:15:06,839
transform it and you put it back or

00:15:05,339 --> 00:15:08,910
materialized view so it's things like

00:15:06,839 --> 00:15:11,610
that but it's yeah it's not it's not

00:15:08,910 --> 00:15:15,809
ideal for complex analytics in that

00:15:11,610 --> 00:15:18,720
sense now music terraform and terraform

00:15:15,809 --> 00:15:21,449
is a platform to or like a tool to

00:15:18,720 --> 00:15:26,189
manage your AWS infrastructure as code

00:15:21,449 --> 00:15:28,199
and it kingdom came out 2014 and

00:15:26,189 --> 00:15:32,949
basically you define your whole AWS

00:15:28,199 --> 00:15:35,230
stack in in big yeah in data

00:15:32,949 --> 00:15:38,319
and it's a good thing is his

00:15:35,230 --> 00:15:40,359
deterministic so you can in fear you can

00:15:38,319 --> 00:15:42,220
open a new AWS account you can just run

00:15:40,359 --> 00:15:43,179
terraform it'll deploy the exact same

00:15:42,220 --> 00:15:45,279
stack for you

00:15:43,179 --> 00:15:47,649
apart from that data in there of course

00:15:45,279 --> 00:15:49,839
and databases and stuff and you can

00:15:47,649 --> 00:15:55,119
version control it you can use variables

00:15:49,839 --> 00:15:56,679
and yeah it's very good problems that we

00:15:55,119 --> 00:15:58,569
run into is like obviously in the

00:15:56,679 --> 00:16:00,970
beginning you have to learn understand

00:15:58,569 --> 00:16:02,319
what this is and how it works and like

00:16:00,970 --> 00:16:04,329
you don't want to mess up your

00:16:02,319 --> 00:16:06,369
infrastructure accidentally like oh I

00:16:04,329 --> 00:16:09,279
just deleted the database whoops

00:16:06,369 --> 00:16:10,749
those things like so it's like that

00:16:09,279 --> 00:16:12,549
would being being tough to learn

00:16:10,749 --> 00:16:16,540
combined with that is it's a little

00:16:12,549 --> 00:16:19,779
scary and then we also using serverless

00:16:16,540 --> 00:16:21,879
for our debug logs so we send the data

00:16:19,779 --> 00:16:23,919
to server less that then puts it in a

00:16:21,879 --> 00:16:27,429
double in elasticsearch when it's been

00:16:23,919 --> 00:16:29,709
authenticated etc good thing about

00:16:27,429 --> 00:16:33,129
serverless super easy to get started

00:16:29,709 --> 00:16:35,499
NPM install invoke deploy like very easy

00:16:33,129 --> 00:16:39,160
and like no maintenance you know you

00:16:35,499 --> 00:16:41,889
have no servers running that kind of

00:16:39,160 --> 00:16:44,290
stuff and you're also an api gateway

00:16:41,889 --> 00:16:45,879
which is in front of serverless

00:16:44,290 --> 00:16:47,919
oh yeah I should explain what serverless

00:16:45,879 --> 00:16:51,009
is it's basically you can run it's a

00:16:47,919 --> 00:16:54,069
tool for running fine AWS lambda

00:16:51,009 --> 00:16:58,029
functions and for with friends asher and

00:16:54,069 --> 00:16:59,319
google functions in the cloud so it's

00:16:58,029 --> 00:17:02,619
basically just like the tooling around

00:16:59,319 --> 00:17:04,899
to deploy these functions and it comes

00:17:02,619 --> 00:17:07,029
with the api gateway in which which

00:17:04,899 --> 00:17:08,799
means that you get an HTTP endpoint by

00:17:07,029 --> 00:17:11,529
default then it's all like sorted out

00:17:08,799 --> 00:17:14,289
and you load balancing all those things

00:17:11,529 --> 00:17:16,299
are covered for you and the problems

00:17:14,289 --> 00:17:17,620
we've had with serverless it's easy came

00:17:16,299 --> 00:17:19,539
out the same year that we started using

00:17:17,620 --> 00:17:25,049
it it's been some breaking changes there

00:17:19,539 --> 00:17:28,299
as well and it has like it's very the CI

00:17:25,049 --> 00:17:30,909
in my opinion the sea-ice store is not

00:17:28,299 --> 00:17:32,830
clear and it's like there's no way to

00:17:30,909 --> 00:17:34,960
know which version of a function that I

00:17:32,830 --> 00:17:36,309
deployed so it's very easy like oh did I

00:17:34,960 --> 00:17:38,289
deploy a new version of a function now

00:17:36,309 --> 00:17:40,019
or like what's happening

00:17:38,289 --> 00:17:43,240
that's that might be a little difficult

00:17:40,019 --> 00:17:44,559
and it's also limited environments like

00:17:43,240 --> 00:17:46,720
you can't or like the supported

00:17:44,559 --> 00:17:49,870
environments is no date for exam

00:17:46,720 --> 00:17:51,909
and so if you want to use no.10 you can

00:17:49,870 --> 00:17:55,120
like hack around it with binaries and

00:17:51,909 --> 00:17:57,880
stuff but like typically it's yeah

00:17:55,120 --> 00:18:00,220
you're out of luck and also API gateways

00:17:57,880 --> 00:18:04,450
also a problem because we had an issue

00:18:00,220 --> 00:18:06,100
when our pillbox has a mobile you

00:18:04,450 --> 00:18:08,289
connect to the mobile networks and since

00:18:06,100 --> 00:18:11,559
data and it's sent day and it doesn't

00:18:08,289 --> 00:18:16,690
that mobile chip doesn't use SNI for

00:18:11,559 --> 00:18:18,610
each HTTP and a api gateway enforces as

00:18:16,690 --> 00:18:20,860
an i so that we couldn't send data to

00:18:18,610 --> 00:18:23,260
api gateway api get we would just reject

00:18:20,860 --> 00:18:30,429
our our calls so that's that's

00:18:23,260 --> 00:18:32,640
unfortunate so now like trying to sum

00:18:30,429 --> 00:18:35,350
this up it's a lot of lot of information

00:18:32,640 --> 00:18:37,650
but the things that we've seen here is

00:18:35,350 --> 00:18:41,500
that things are easy to get going with

00:18:37,650 --> 00:18:44,799
are usually more limited in their use

00:18:41,500 --> 00:18:46,809
cases they can be extremely powerful

00:18:44,799 --> 00:18:49,539
if you hit they're like what they were

00:18:46,809 --> 00:18:52,299
designed for yeah but the problem is

00:18:49,539 --> 00:18:53,470
they all have like flashy web sites and

00:18:52,299 --> 00:18:56,200
they're like they might be a

00:18:53,470 --> 00:18:57,880
software-as-a-service etc and they won't

00:18:56,200 --> 00:19:02,080
will generally not tell you what they

00:18:57,880 --> 00:19:05,409
suck at so like just yeah and other

00:19:02,080 --> 00:19:07,120
things that require more upfront mental

00:19:05,409 --> 00:19:07,690
you the first time you look at it it's

00:19:07,120 --> 00:19:10,960
like huh

00:19:07,690 --> 00:19:13,840
what am i using this for they can give

00:19:10,960 --> 00:19:16,150
you more control and which means that

00:19:13,840 --> 00:19:19,059
you can use that tool for longer for

00:19:16,150 --> 00:19:21,520
more more things and this is programming

00:19:19,059 --> 00:19:24,490
languages naturally infrastructure

00:19:21,520 --> 00:19:26,710
things they generally don't have sexy

00:19:24,490 --> 00:19:31,110
websites or like bad documentation at

00:19:26,710 --> 00:19:34,390
least and they're typically open source

00:19:31,110 --> 00:19:38,350
so i've taken these technologies that

00:19:34,390 --> 00:19:40,330
we've had and i plotted them on this

00:19:38,350 --> 00:19:43,030
scatter chart we have intuitive and easy

00:19:40,330 --> 00:19:45,460
versus control and this is very

00:19:43,030 --> 00:19:47,679
arbitrary by the way yeah versatile

00:19:45,460 --> 00:19:49,570
scales well that it's not scaling as in

00:19:47,679 --> 00:19:51,820
performance but it's more scaling it's

00:19:49,570 --> 00:19:53,470
like I can use this for a lot of other

00:19:51,820 --> 00:19:55,330
things and when I learn more about it I

00:19:53,470 --> 00:19:58,330
can use for even yeah it like it'll

00:19:55,330 --> 00:20:00,250
serve a lot of use cases and or reverses

00:19:58,330 --> 00:20:02,770
you have specific use cases

00:20:00,250 --> 00:20:05,680
in our experience this is how they the

00:20:02,770 --> 00:20:10,060
technology plays out firebase super into

00:20:05,680 --> 00:20:14,830
VDC very specific server let's also very

00:20:10,060 --> 00:20:18,160
intuitively see less specific react

00:20:14,830 --> 00:20:20,710
native also fare not as intuitive in DC

00:20:18,160 --> 00:20:23,230
but still quite specific because you

00:20:20,710 --> 00:20:26,170
can't do a game in react native that's

00:20:23,230 --> 00:20:28,090
not very smart you can do some games of

00:20:26,170 --> 00:20:30,130
course not like no and then we have

00:20:28,090 --> 00:20:32,920
elasticsearch which is interesting like

00:20:30,130 --> 00:20:35,830
you can it I've like faded it because

00:20:32,920 --> 00:20:38,410
it's in two places at the same time so

00:20:35,830 --> 00:20:40,600
what it is is that it's you can't get

00:20:38,410 --> 00:20:42,850
started easily and like you'll it's

00:20:40,600 --> 00:20:44,740
intuitive and it works but when you put

00:20:42,850 --> 00:20:47,080
the time in to learn than their query

00:20:44,740 --> 00:20:49,090
thing then it could also give you more

00:20:47,080 --> 00:20:51,820
control and you can be used it for more

00:20:49,090 --> 00:20:53,650
more things so it has like both this is

00:20:51,820 --> 00:20:56,200
what I like what I like when it has both

00:20:53,650 --> 00:20:58,390
things you can get started easily but it

00:20:56,200 --> 00:21:00,880
has like in the underlying model that

00:20:58,390 --> 00:21:04,300
just scales well as your problem space

00:21:00,880 --> 00:21:06,280
because more complicated terraform it's

00:21:04,300 --> 00:21:07,960
like if you can use it for all the

00:21:06,280 --> 00:21:10,090
infrastructure and it gives you a fair

00:21:07,960 --> 00:21:14,470
amount of control but there's also a lot

00:21:10,090 --> 00:21:17,920
of magic happening there Postgres is the

00:21:14,470 --> 00:21:19,900
this is the oldest one oldest contender

00:21:17,920 --> 00:21:22,480
I guess it's the only one on that side

00:21:19,900 --> 00:21:24,910
you can use it for a lot of things but

00:21:22,480 --> 00:21:26,440
it's also fairly easy to setup and if

00:21:24,910 --> 00:21:28,390
you're using a hosted version of pulse

00:21:26,440 --> 00:21:30,250
CRA's you don't have too many parameters

00:21:28,390 --> 00:21:32,530
to tune it's like you don't have that

00:21:30,250 --> 00:21:34,000
much control which I wouldn't want

00:21:32,530 --> 00:21:38,410
control over pulse occurs anyway because

00:21:34,000 --> 00:21:40,450
it's yeah complicated and then you have

00:21:38,410 --> 00:21:42,460
a closure on it obviously a programming

00:21:40,450 --> 00:21:44,950
language is true and complete so it

00:21:42,460 --> 00:21:51,000
gives you like a lot of control and you

00:21:44,950 --> 00:21:56,020
can use it for a lot of things yeah so

00:21:51,000 --> 00:21:59,250
the takeaways if you have like intuitive

00:21:56,020 --> 00:22:01,840
and easy new tech you can't get like

00:21:59,250 --> 00:22:04,330
extreme multiples of productivity it's a

00:22:01,840 --> 00:22:06,730
lot faster to develop for me to develop

00:22:04,330 --> 00:22:09,850
only one code base with like iOS and

00:22:06,730 --> 00:22:12,640
Java we recognize then then there would

00:22:09,850 --> 00:22:13,900
have been otherwise but beware of their

00:22:12,640 --> 00:22:16,300
limitations though

00:22:13,900 --> 00:22:18,730
they're usually almost impossible to

00:22:16,300 --> 00:22:20,650
mitigate when you run into Oh a p.i

00:22:18,730 --> 00:22:23,770
gateway doesn't support our Hattie

00:22:20,650 --> 00:22:26,050
requires sni I'm not gonna there's no

00:22:23,770 --> 00:22:27,640
config they can like oh I just want to

00:22:26,050 --> 00:22:29,620
change this so if there's no open source

00:22:27,640 --> 00:22:32,650
pull the quest so I can do two API

00:22:29,620 --> 00:22:36,520
gateway just that it works how it works

00:22:32,650 --> 00:22:39,640
and also sometimes it could be worth

00:22:36,520 --> 00:22:43,030
spending some time learning something

00:22:39,640 --> 00:22:45,940
that seems a little complex but it might

00:22:43,030 --> 00:22:49,210
they might be written by by somebody who

00:22:45,940 --> 00:22:51,220
knows this problems very well and they

00:22:49,210 --> 00:22:53,830
have like figured out very well like a

00:22:51,220 --> 00:22:55,300
very smart way of handling it so even

00:22:53,830 --> 00:22:57,760
though it doesn't make sense to you in

00:22:55,300 --> 00:22:59,290
the beginning it might make sense after

00:22:57,760 --> 00:23:02,500
a while and you then you might use that

00:22:59,290 --> 00:23:03,880
for a lot of things and also another

00:23:02,500 --> 00:23:08,080
thing that I've learned over the years

00:23:03,880 --> 00:23:12,640
is do not trust their cool promotional

00:23:08,080 --> 00:23:14,470
video famous but entrust the the people

00:23:12,640 --> 00:23:15,970
that actually use the tool because they

00:23:14,470 --> 00:23:17,860
are like the real users are the ones

00:23:15,970 --> 00:23:19,420
that you should listen to they have all

00:23:17,860 --> 00:23:24,640
you usually have the most relevant

00:23:19,420 --> 00:23:25,910
feedback yeah I think that's it

00:23:24,640 --> 00:23:32,400
thank you very much for your time

00:23:25,910 --> 00:23:34,960
[Applause]

00:23:32,400 --> 00:23:38,370
thank you very much Victor all right you

00:23:34,960 --> 00:23:42,220
got a couple of questions for you

00:23:38,370 --> 00:23:44,290
Postgres has a no SQL / JSON database

00:23:42,220 --> 00:23:47,830
versus traditional columns good idea or

00:23:44,290 --> 00:23:51,190
bad yeah you couldn't you can definitely

00:23:47,830 --> 00:23:52,980
use post-crisis that way but I think you

00:23:51,190 --> 00:23:56,170
know we don't we didn't in the end

00:23:52,980 --> 00:23:58,450
elasticsearch + s3 covered our use cases

00:23:56,170 --> 00:24:02,800
in a better way like an elastic search

00:23:58,450 --> 00:24:04,240
is also no sequel in that sense so but

00:24:02,800 --> 00:24:05,890
yeah you can totally use Postgres that

00:24:04,240 --> 00:24:08,080
way as well I don't know how the support

00:24:05,890 --> 00:24:09,760
is though for or like for not all

00:24:08,080 --> 00:24:14,410
libraries works super well with the

00:24:09,760 --> 00:24:16,780
Jason part all right next question graph

00:24:14,410 --> 00:24:20,710
QL good or bad with that problem

00:24:16,780 --> 00:24:24,640
what about Gia PC okay yeah I haven't I

00:24:20,710 --> 00:24:26,440
haven't deployed any graph QL apps but I

00:24:24,640 --> 00:24:28,809
do think that it's one of those things

00:24:26,440 --> 00:24:30,250
that like a lot of people might be

00:24:28,809 --> 00:24:32,260
resistant to because it's like I don't

00:24:30,250 --> 00:24:33,910
really understand this this is complex

00:24:32,260 --> 00:24:36,429
and new but if you actually understand

00:24:33,910 --> 00:24:38,920
it I think it could solve a problem very

00:24:36,429 --> 00:24:41,500
well like this whole idea of like not

00:24:38,920 --> 00:24:44,110
having to do a lot of requests and

00:24:41,500 --> 00:24:45,820
having and that you can do for example

00:24:44,110 --> 00:24:47,500
that you can update the front-end

00:24:45,820 --> 00:24:49,990
without having to synchronize with the

00:24:47,500 --> 00:24:54,400
API is like it's I think it's calm of a

00:24:49,990 --> 00:24:56,500
real need with n plus 1 I don't

00:24:54,400 --> 00:25:00,280
understand that part of the question

00:24:56,500 --> 00:25:01,900
though we're in the same boat buddy next

00:25:00,280 --> 00:25:03,910
question after knowing all the pros and

00:25:01,900 --> 00:25:05,679
cons would your tech stack look the same

00:25:03,910 --> 00:25:08,590
if you would have to make the decision

00:25:05,679 --> 00:25:12,190
again yeah that's a very good question I

00:25:08,590 --> 00:25:16,179
am what has changed since we started is

00:25:12,190 --> 00:25:17,350
that vanilla JavaScript is nicer and a

00:25:16,179 --> 00:25:18,880
lot of the things I liked about closure

00:25:17,350 --> 00:25:20,830
script like the structuring in

00:25:18,880 --> 00:25:23,440
immutability have reached vanilla

00:25:20,830 --> 00:25:25,570
JavaScript I still it still takes

00:25:23,440 --> 00:25:27,820
equally long though to compile like

00:25:25,570 --> 00:25:29,020
babel as close your script so I think I

00:25:27,820 --> 00:25:30,820
might have gone with the same there

00:25:29,020 --> 00:25:35,200
might have possibly tried something

00:25:30,820 --> 00:25:37,900
typed right could you elaborate only you

00:25:35,200 --> 00:25:42,730
kind of use cases you had to move back

00:25:37,900 --> 00:25:44,340
to native yeah we so it's like it yeah

00:25:42,730 --> 00:25:47,669
for a couple mostly

00:25:44,340 --> 00:25:49,919
it's about bluetooth so our app works

00:25:47,669 --> 00:25:52,080
with Bluetooth in the background and the

00:25:49,919 --> 00:25:54,059
band so instead of and the react native

00:25:52,080 --> 00:25:56,520
as I said it takes a while to start up

00:25:54,059 --> 00:25:58,559
the environment and both Android and iOS

00:25:56,520 --> 00:26:01,230
don't let you do stuff in the background

00:25:58,559 --> 00:26:02,929
very long they will kill your app so we

00:26:01,230 --> 00:26:05,610
had to like move all the Bluetooth

00:26:02,929 --> 00:26:07,049
connection and reading to the to the

00:26:05,610 --> 00:26:09,630
actual native layer because then will be

00:26:07,049 --> 00:26:12,900
instant and then when react native woke

00:26:09,630 --> 00:26:14,520
up then you can get the data from secret

00:26:12,900 --> 00:26:17,010
light that we just save the we cache

00:26:14,520 --> 00:26:20,700
sort of the Bluetooth ya happenings in

00:26:17,010 --> 00:26:22,620
there all right if flutter resolves your

00:26:20,700 --> 00:26:25,919
conserv react native would you consider

00:26:22,620 --> 00:26:32,370
switching if not y-yeah floor is super

00:26:25,919 --> 00:26:33,690
interesting but I little hesitant to it

00:26:32,370 --> 00:26:36,140
yeah it doesn't feel like it has a

00:26:33,690 --> 00:26:38,820
community yet and it feels like it's

00:26:36,140 --> 00:26:40,649
yeah a little a little hazard needs some

00:26:38,820 --> 00:26:42,149
time to get proven and people start

00:26:40,649 --> 00:26:43,140
actually using it but it's a very

00:26:42,149 --> 00:26:46,230
interesting idea

00:26:43,140 --> 00:26:50,850
for sure but I'm not trying art either

00:26:46,230 --> 00:26:53,460
so yeah alright how big was it's a

00:26:50,850 --> 00:26:58,470
personal question from Patrick yeah I

00:26:53,460 --> 00:27:00,270
think it's yeah I think it's only thirty

00:26:58,470 --> 00:27:03,779
thousand lines of code or something like

00:27:00,270 --> 00:27:05,340
that yeah alright from Chris if you

00:27:03,779 --> 00:27:07,409
could snap your fingers and have a big

00:27:05,340 --> 00:27:13,140
team of native mobile devs would you

00:27:07,409 --> 00:27:14,669
still prefer react native yeah no I

00:27:13,140 --> 00:27:16,919
think so yeah because the good thing is

00:27:14,669 --> 00:27:20,159
about the the business logic having all

00:27:16,919 --> 00:27:23,340
the business laws in the same place you

00:27:20,159 --> 00:27:26,580
can like you can make sure that it for

00:27:23,340 --> 00:27:28,200
us as like medtech it has to be right

00:27:26,580 --> 00:27:29,610
you know the logic can't be wrong you

00:27:28,200 --> 00:27:31,830
have to know that you took a dose so

00:27:29,610 --> 00:27:33,659
like in that sense like the business

00:27:31,830 --> 00:27:36,090
logic it's super important that we'd

00:27:33,659 --> 00:27:38,159
have it like solid so you can't have

00:27:36,090 --> 00:27:40,409
bugs there so for the for the sake of

00:27:38,159 --> 00:27:42,179
keeping business log is the same yeah I

00:27:40,409 --> 00:27:44,580
would maybe we do more things native

00:27:42,179 --> 00:27:47,850
that like UI and stuff but yeah in

00:27:44,580 --> 00:27:49,470
general yes all right looks like our

00:27:47,850 --> 00:27:51,960
last question anonymous has had a few

00:27:49,470 --> 00:27:56,470
beers how about all DP management

00:27:51,960 --> 00:27:58,990
systems PHP admin for example what

00:27:56,470 --> 00:28:03,910
command we've spent I spent a fair

00:27:58,990 --> 00:28:05,830
amount of time in PHP myadmin but no

00:28:03,910 --> 00:28:10,750
were using I like just use the the

00:28:05,830 --> 00:28:13,780
console now like a or you say our or

00:28:10,750 --> 00:28:15,160
business intelligence app also has like

00:28:13,780 --> 00:28:18,000
you can just access the database and

00:28:15,160 --> 00:28:21,010
write queries in that straight away so

00:28:18,000 --> 00:28:23,650
no I would write real queries myself

00:28:21,010 --> 00:28:24,550
instead fantastic Thank You Victor

00:28:23,650 --> 00:28:28,319
let's give them a hand

00:28:24,550 --> 00:28:28,319

YouTube URL: https://www.youtube.com/watch?v=Y0Z_U-AlFhw


