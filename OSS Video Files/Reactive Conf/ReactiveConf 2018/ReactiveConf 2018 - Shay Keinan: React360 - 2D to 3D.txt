Title: ReactiveConf 2018 - Shay Keinan: React360 - 2D to 3D
Publication date: 2018-11-04
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
React360 - 2D to 3D

WebVR enables web developers to create frictionless, immersive experiences. Weâ€™ll explore the core concepts behind VR, see different demonstrations, \learn how to get started with Three.js and React360 to create 3D experiences both for web and VR.
Captions: 
	00:00:02,260 --> 00:00:08,720
[Music]

00:00:11,820 --> 00:00:17,800
hi everyone my name is Shai Keenan and

00:00:15,429 --> 00:00:21,789
today we are going to talk about react

00:00:17,800 --> 00:00:24,310
360 a bit about myself I'm a software

00:00:21,789 --> 00:00:27,250
developer at a company called 500 tech I

00:00:24,310 --> 00:00:30,099
work mainly with react and react native

00:00:27,250 --> 00:00:33,129
I provide consulting services and teach

00:00:30,099 --> 00:00:36,190
various courses such as react advanced

00:00:33,129 --> 00:00:39,579
react Redux CSS and data visualizations

00:00:36,190 --> 00:00:43,770
and one of the organizers of react next

00:00:39,579 --> 00:00:46,719
are react conference in Tel Aviv and I

00:00:43,770 --> 00:00:49,960
hope that you will join me maybe next

00:00:46,719 --> 00:00:52,600
year today I am able to talk to you

00:00:49,960 --> 00:00:55,930
about react 360 we will start with the

00:00:52,600 --> 00:00:58,570
basic concepts of virtual reality learn

00:00:55,930 --> 00:01:01,809
how to get started with reactive 360 and

00:00:58,570 --> 00:01:05,379
learn a new approach for integrating 3d

00:01:01,809 --> 00:01:08,560
views into react.js by the end of this

00:01:05,379 --> 00:01:11,349
talk you will know when to use react 360

00:01:08,560 --> 00:01:15,520
and how to do it and how to get started

00:01:11,349 --> 00:01:19,660
with 3GS and develop 3d experiences in

00:01:15,520 --> 00:01:21,849
your web browsers virtual reality is

00:01:19,660 --> 00:01:25,179
being used in many industries

00:01:21,849 --> 00:01:28,140
besides games VR is used in fields such

00:01:25,179 --> 00:01:31,959
as medicine education movies

00:01:28,140 --> 00:01:35,800
architecture travel military preparation

00:01:31,959 --> 00:01:37,569
retail and much much more because of its

00:01:35,800 --> 00:01:41,619
ability to completely immerse you in a

00:01:37,569 --> 00:01:44,140
scene the possibilities are endless it

00:01:41,619 --> 00:01:47,170
all goes back to something called lucid

00:01:44,140 --> 00:01:49,539
dreaming a lucid dream is the dream

00:01:47,170 --> 00:01:53,700
during which the dreamer is aware of

00:01:49,539 --> 00:01:56,170
dreaming and can do anything even fly

00:01:53,700 --> 00:01:58,330
the first known mention of lucid

00:01:56,170 --> 00:02:01,179
dreaming was in the ancient Sanskrit

00:01:58,330 --> 00:02:05,860
texts of mandioca Upanishad around 500

00:02:01,179 --> 00:02:08,319
BC then around 415 BC st. Augustine

00:02:05,860 --> 00:02:11,080
presented to us the first well-known

00:02:08,319 --> 00:02:13,840
report of lucid dreaming he shared the

00:02:11,080 --> 00:02:16,180
story of a friend who dreamed he was

00:02:13,840 --> 00:02:17,670
hanging out a guy in heaven and the guy

00:02:16,180 --> 00:02:22,349
kept reminding him that

00:02:17,670 --> 00:02:25,020
actually asleep in 1838 Charles

00:02:22,349 --> 00:02:26,700
Wheatstone invented the stereoscope he

00:02:25,020 --> 00:02:29,430
found that if you put two slightly

00:02:26,700 --> 00:02:32,760
different images next to each other the

00:02:29,430 --> 00:02:34,980
brain can turn them into a 3d image this

00:02:32,760 --> 00:02:37,739
product something called virtual tourism

00:02:34,980 --> 00:02:40,230
for the first time people could actually

00:02:37,739 --> 00:02:41,330
see and experience places they have only

00:02:40,230 --> 00:02:45,060
dreamed about

00:02:41,330 --> 00:02:45,840
in 1935 Stanley wine Baum released

00:02:45,060 --> 00:02:48,269
pygmalions

00:02:45,840 --> 00:02:50,069
spectacles a story about a pair of

00:02:48,269 --> 00:02:52,980
goggles that can let a person feel like

00:02:50,069 --> 00:02:55,019
they are in a fictional world this story

00:02:52,980 --> 00:02:59,400
is considered the first comprehensive

00:02:55,019 --> 00:03:01,410
model for virtual reality for the next

00:02:59,400 --> 00:03:02,069
several decades we got things like the

00:03:01,410 --> 00:03:05,269
sensorama

00:03:02,069 --> 00:03:08,730
the ultimate display NASA's virtual

00:03:05,269 --> 00:03:13,049
visual environment display Steger VR and

00:03:08,730 --> 00:03:15,420
the Nintendo Virtual Boy finally in 1987

00:03:13,049 --> 00:03:18,269
Jaron Lanier invented the term virtual

00:03:15,420 --> 00:03:20,610
reality and since then we've had things

00:03:18,269 --> 00:03:23,609
like Google cardboard google daydream

00:03:20,610 --> 00:03:27,780
and the Samsung gear VR all of which are

00:03:23,609 --> 00:03:30,299
very basic and affordable devices then

00:03:27,780 --> 00:03:33,180
we got the oculus rift the HTC vive and

00:03:30,299 --> 00:03:35,790
the PlayStation VR that gives us a rich

00:03:33,180 --> 00:03:39,030
experience but with an expensive price

00:03:35,790 --> 00:03:41,340
tag those devices requires external

00:03:39,030 --> 00:03:43,709
computing power and external tracking

00:03:41,340 --> 00:03:47,190
sensors and as a result they are not

00:03:43,709 --> 00:03:49,109
portable computing systems of all sorts

00:03:47,190 --> 00:03:52,049
are getting smaller cheaper and much

00:03:49,109 --> 00:03:54,420
more efficient and virtual reality is no

00:03:52,049 --> 00:03:57,060
different a couple of stand-alone VR

00:03:54,420 --> 00:03:59,489
systems will arrive next year and they

00:03:57,060 --> 00:04:03,329
will be able to advance virtual reality

00:03:59,489 --> 00:04:06,260
as a mainstream consumer technology one

00:04:03,329 --> 00:04:09,269
of them is the oculus go that already

00:04:06,260 --> 00:04:11,430
was already released this year a couple

00:04:09,269 --> 00:04:13,829
of months ago the goal is offering a

00:04:11,430 --> 00:04:16,440
standalone experience but without

00:04:13,829 --> 00:04:18,870
positional tracking meaning that the

00:04:16,440 --> 00:04:23,010
user will always be at the center but

00:04:18,870 --> 00:04:25,550
with a 360-degree views oculus is also

00:04:23,010 --> 00:04:28,590
working on two different stand-alones

00:04:25,550 --> 00:04:31,650
the Santa Cruz the oculus Santa Cruz and

00:04:28,590 --> 00:04:34,669
the oculus quest that will be released

00:04:31,650 --> 00:04:37,440
early next year those headset will offer

00:04:34,669 --> 00:04:40,229
positional tracking using on headset

00:04:37,440 --> 00:04:42,690
truckers and something called six

00:04:40,229 --> 00:04:45,210
degrees of freedom meaning that the

00:04:42,690 --> 00:04:47,250
headset recognize your hand movement and

00:04:45,210 --> 00:04:51,810
you can touch and grab things with

00:04:47,250 --> 00:04:54,120
within the scene this headset are a big

00:04:51,810 --> 00:04:56,180
step towards virtual reality becoming a

00:04:54,120 --> 00:04:58,830
true mainstream technology

00:04:56,180 --> 00:05:01,380
so now after understanding how it all

00:04:58,830 --> 00:05:04,470
started we can talk about virtual

00:05:01,380 --> 00:05:07,229
reality concepts think that we as

00:05:04,470 --> 00:05:10,800
developers must know if we want to build

00:05:07,229 --> 00:05:14,160
a virtual reality application so what is

00:05:10,800 --> 00:05:17,330
virtual reality in a nutshell visual

00:05:14,160 --> 00:05:20,430
virtual reality is made up of two things

00:05:17,330 --> 00:05:23,910
stirrups copic imaging and movement

00:05:20,430 --> 00:05:29,220
tracking so let's take a look at these

00:05:23,910 --> 00:05:31,080
two images are they identical they seem

00:05:29,220 --> 00:05:32,669
identical but if you look closely you

00:05:31,080 --> 00:05:35,789
can see some differences I've

00:05:32,669 --> 00:05:37,289
highlighted one for you can you notice

00:05:35,789 --> 00:05:40,800
the figure on the background on the

00:05:37,289 --> 00:05:43,260
right stairs Copic images are based on

00:05:40,800 --> 00:05:45,389
how the human brain works it takes two

00:05:43,260 --> 00:05:48,080
images that choke the same content but

00:05:45,389 --> 00:05:50,849
from a slightly different point of view

00:05:48,080 --> 00:05:53,460
the offset of these images corresponds

00:05:50,849 --> 00:05:54,810
to the distance between our eyes this

00:05:53,460 --> 00:05:57,599
distance is called interpupillary

00:05:54,810 --> 00:06:00,240
distance or IPD for short

00:05:57,599 --> 00:06:02,039
in this way we simulate the way we see

00:06:00,240 --> 00:06:06,240
the world naturally and it gives us the

00:06:02,039 --> 00:06:08,520
perception of 3d depth headset lenses

00:06:06,240 --> 00:06:10,979
are an integral part of the virtual

00:06:08,520 --> 00:06:13,530
reality experience and why do we use

00:06:10,979 --> 00:06:15,780
hazard lenses because they position the

00:06:13,530 --> 00:06:18,449
images on the screen at the exact

00:06:15,780 --> 00:06:20,810
distance that they need to be to get the

00:06:18,449 --> 00:06:24,570
desired effect the stereoscopic effect

00:06:20,810 --> 00:06:27,210
but we our lenses are thick so they

00:06:24,570 --> 00:06:30,090
cause a distortion the square that you

00:06:27,210 --> 00:06:32,760
see on the left looks caved in through

00:06:30,090 --> 00:06:35,520
the lenses the outcome looks like what

00:06:32,760 --> 00:06:38,310
we see on the right so to compensate for

00:06:35,520 --> 00:06:40,919
this we give images that are rounded out

00:06:38,310 --> 00:06:43,830
on the left you can see the compensated

00:06:40,919 --> 00:06:45,480
image before the lenses and on the right

00:06:43,830 --> 00:06:49,230
this is the final design

00:06:45,480 --> 00:06:52,380
image so to sum up stereoscopic imaging

00:06:49,230 --> 00:06:56,220
by showing two slightly different images

00:06:52,380 --> 00:06:58,730
to each eye using special lenses we get

00:06:56,220 --> 00:07:01,710
the effect of depth

00:06:58,730 --> 00:07:03,120
besides the Copic imaging the second

00:07:01,710 --> 00:07:05,910
thing we need to complete the illusion

00:07:03,120 --> 00:07:09,570
of virtual space is to track the

00:07:05,910 --> 00:07:12,840
movement of our body all VR devices

00:07:09,570 --> 00:07:15,780
track head movement so we can look

00:07:12,840 --> 00:07:18,960
around some devices the more expensive

00:07:15,780 --> 00:07:20,880
ones track body movement so we can move

00:07:18,960 --> 00:07:23,460
around we can walk around the scene of

00:07:20,880 --> 00:07:25,440
course the more tracking sensors that

00:07:23,460 --> 00:07:30,510
you have the better the illusion of

00:07:25,440 --> 00:07:33,600
reality last year Facebook announced the

00:07:30,510 --> 00:07:38,330
launch of react 360 a new JavaScript

00:07:33,600 --> 00:07:41,490
framework based on 3GS and react native

00:07:38,330 --> 00:07:43,770
react 360 allows developers to build

00:07:41,490 --> 00:07:46,740
virtual reality experiences with the

00:07:43,770 --> 00:07:50,220
help of JavaScript as the name implies

00:07:46,740 --> 00:07:52,410
react 360 uses the same concepts as

00:07:50,220 --> 00:07:55,590
Facebook existing react framework just

00:07:52,410 --> 00:07:57,750
like with react for standard web apps VR

00:07:55,590 --> 00:08:00,000
developers can now use the same

00:07:57,750 --> 00:08:03,840
declarative model to write apps for the

00:08:00,000 --> 00:08:07,110
360-degree experiences just like in

00:08:03,840 --> 00:08:09,450
animation VR apps need to be rendered at

00:08:07,110 --> 00:08:11,640
60 frames per second and this is

00:08:09,450 --> 00:08:15,360
something that react native is already

00:08:11,640 --> 00:08:18,720
solved for us it's important to know

00:08:15,360 --> 00:08:23,010
again that reactor e 60 is based on

00:08:18,720 --> 00:08:25,590
react native and triggers most of the

00:08:23,010 --> 00:08:28,320
components that we use our react native

00:08:25,590 --> 00:08:31,890
components and the 3d rendering engine

00:08:28,320 --> 00:08:35,250
is the 3GS rendering engine for those of

00:08:31,890 --> 00:08:37,800
you are not familiar with trager's 3GS

00:08:35,250 --> 00:08:40,620
is a close browser JavaScript library

00:08:37,800 --> 00:08:45,270
used for displaying animated 3d graphics

00:08:40,620 --> 00:08:48,720
in a invented around 2008 by Riccardo

00:08:45,270 --> 00:08:51,900
Cabello he decided to write a Java split

00:08:48,720 --> 00:08:53,550
abstraction for WebGL and since then

00:08:51,900 --> 00:08:56,490
this is the leading library for those

00:08:53,550 --> 00:08:58,550
experiences so now let's take a look at

00:08:56,490 --> 00:09:00,940
some 3GS examples

00:08:58,550 --> 00:09:00,940
from the web

00:09:36,370 --> 00:09:42,950
pretty cool right and everything is work

00:09:40,130 --> 00:09:46,520
is working here at 60 frames per second

00:09:42,950 --> 00:09:51,680
in your web browser and sometimes even

00:09:46,520 --> 00:09:55,580
in your mobile box so let's get started

00:09:51,680 --> 00:09:57,380
with react 360 first we'll begin by

00:09:55,580 --> 00:10:00,140
installing the tool that we need we will

00:09:57,380 --> 00:10:02,720
install react Tristan 60 CLI this is a

00:10:00,140 --> 00:10:05,930
generator just like create react up or

00:10:02,720 --> 00:10:08,030
create react native up and we are going

00:10:05,930 --> 00:10:11,270
to initialize our project by running

00:10:08,030 --> 00:10:14,930
react 360 in it the name of our project

00:10:11,270 --> 00:10:16,940
in this case it's a low 360 this will

00:10:14,930 --> 00:10:19,220
install all of the dependencies that we

00:10:16,940 --> 00:10:22,220
need in order to run the project then we

00:10:19,220 --> 00:10:25,460
are going to run NPM start and open our

00:10:22,220 --> 00:10:27,890
browsers Facebook already created a very

00:10:25,460 --> 00:10:31,910
basic hello world project which they

00:10:27,890 --> 00:10:34,670
call a load 360 and if everything went

00:10:31,910 --> 00:10:36,740
well you should see the following we

00:10:34,670 --> 00:10:40,340
have a basic scene with a panoramic

00:10:36,740 --> 00:10:42,980
image of stars and in front of us we can

00:10:40,340 --> 00:10:43,640
see a text component with the text with

00:10:42,980 --> 00:10:49,070
the sentence

00:10:43,640 --> 00:10:52,160
welcome to react 360 after the init we

00:10:49,070 --> 00:10:54,140
get the following file structure all of

00:10:52,160 --> 00:10:56,300
the static assets are located in the

00:10:54,140 --> 00:11:01,670
static asset folder so if we want to

00:10:56,300 --> 00:11:04,850
load 3d models textures images sounds

00:11:01,670 --> 00:11:07,130
this is the right place the entry point

00:11:04,850 --> 00:11:09,980
where our application is the index vrj

00:11:07,130 --> 00:11:12,170
s5 and there is also a file called

00:11:09,980 --> 00:11:15,980
client j s used for the application

00:11:12,170 --> 00:11:19,130
configuration and this is the entry

00:11:15,980 --> 00:11:22,610
point for for our application basic

00:11:19,130 --> 00:11:25,430
react component that contains two views

00:11:22,610 --> 00:11:29,360
and a text component with the sentence

00:11:25,430 --> 00:11:32,510
welcome to react 360 and on the bottom

00:11:29,360 --> 00:11:34,610
we register this component just like any

00:11:32,510 --> 00:11:38,360
react component just like in react

00:11:34,610 --> 00:11:41,810
native or react for web now let's begin

00:11:38,360 --> 00:11:43,280
building our own application the update

00:11:41,810 --> 00:11:47,110
we are going to build together will

00:11:43,280 --> 00:11:47,110
present our solar system planets

00:11:47,420 --> 00:11:51,440
you can ease the link on the screen to

00:11:49,550 --> 00:11:56,680
try the demo right now on your mobile

00:11:51,440 --> 00:12:00,470
phones or your laptops it's bit dot ly /

00:11:56,680 --> 00:12:03,200
solar demo and this is what the

00:12:00,470 --> 00:12:07,160
application is going to look like we can

00:12:03,200 --> 00:12:09,380
see a planet with some text there is a

00:12:07,160 --> 00:12:12,500
menu on the right to change to another

00:12:09,380 --> 00:12:17,060
planet there is some animations as well

00:12:12,500 --> 00:12:22,330
and if we look to our left there is some

00:12:17,060 --> 00:12:22,330
additional information about each planet

00:12:24,070 --> 00:12:28,610
to know where to place objects and how

00:12:26,960 --> 00:12:31,520
to move around the scene we need to be

00:12:28,610 --> 00:12:33,590
familiar with the coordinate system the

00:12:31,520 --> 00:12:34,340
coordinate system is the same as OpenGL

00:12:33,590 --> 00:12:37,010
coordinates

00:12:34,340 --> 00:12:40,550
meaning that y+ is up and we use the

00:12:37,010 --> 00:12:42,950
right hand rule for rotation we can

00:12:40,550 --> 00:12:46,010
apply different transformations on any

00:12:42,950 --> 00:12:48,170
component just like we do with CSS the

00:12:46,010 --> 00:12:50,540
syntax is a bit different than classic

00:12:48,170 --> 00:12:54,290
CSS but should be familiar to those who

00:12:50,540 --> 00:12:56,630
code in react native so for example if I

00:12:54,290 --> 00:13:00,710
want to place an object anywhere other

00:12:56,630 --> 00:13:03,590
than zero zero zero I will use translate

00:13:00,710 --> 00:13:06,830
if I want to change its size I will use

00:13:03,590 --> 00:13:10,490
scale and if I want to rotate it along a

00:13:06,830 --> 00:13:15,590
certain axis I will use rotate just like

00:13:10,490 --> 00:13:18,410
in CSS translate scale and rotate just

00:13:15,590 --> 00:13:20,600
like react native react 360 provides a

00:13:18,410 --> 00:13:23,060
set of basic primitives used to

00:13:20,600 --> 00:13:25,070
construct user interface this is a

00:13:23,060 --> 00:13:27,410
powerful feature of reactor e60

00:13:25,070 --> 00:13:29,480
developers can use the same styling and

00:13:27,410 --> 00:13:33,170
layout system across web react native

00:13:29,480 --> 00:13:34,880
and VR which opens the doors to directly

00:13:33,170 --> 00:13:38,510
sharing layout styles across these

00:13:34,880 --> 00:13:42,080
platforms view is the most fundamental

00:13:38,510 --> 00:13:43,940
component for building a UI view is a

00:13:42,080 --> 00:13:47,930
container that supports layout with

00:13:43,940 --> 00:13:49,730
flexbox style and touch handling view

00:13:47,930 --> 00:13:52,370
maps directly to the native view

00:13:49,730 --> 00:13:54,560
equivalent on whatever platform react

00:13:52,370 --> 00:13:59,150
native is running on whether that is a

00:13:54,560 --> 00:14:01,430
UI view a div an android view etc views

00:13:59,150 --> 00:14:03,350
designed to be nested inside other view

00:14:01,430 --> 00:14:07,880
and can have zero too many children of

00:14:03,350 --> 00:14:10,520
any type 'text this is a red component

00:14:07,880 --> 00:14:14,600
for displaying text text supports

00:14:10,520 --> 00:14:16,910
nesting and styling as well and image a

00:14:14,600 --> 00:14:20,209
react component for displaying different

00:14:16,910 --> 00:14:22,730
types of images but keep in mind that

00:14:20,209 --> 00:14:27,170
you must manually specify the dimensions

00:14:22,730 --> 00:14:29,660
of your images here in reactor 360 image

00:14:27,170 --> 00:14:31,310
dimensions are specified in meters and

00:14:29,660 --> 00:14:34,160
it's not possible to predict the

00:14:31,310 --> 00:14:37,670
intended dimensions from the pixel width

00:14:34,160 --> 00:14:40,310
and height of the original image so now

00:14:37,670 --> 00:14:44,000
let's go back to our solar system up and

00:14:40,310 --> 00:14:47,300
add a panoramic image you can create

00:14:44,000 --> 00:14:49,880
panoramic images or videos by using a

00:14:47,300 --> 00:14:53,990
special 360 camera or even nowadays

00:14:49,880 --> 00:14:56,660
using your mobile phones if you only

00:14:53,990 --> 00:14:59,390
need to set the background once during

00:14:56,660 --> 00:15:02,839
your application lifetime this is the

00:14:59,390 --> 00:15:05,450
easiest way to go to the client J's file

00:15:02,839 --> 00:15:09,320
and to set the background here you need

00:15:05,450 --> 00:15:12,050
to provide the path to your image but if

00:15:09,320 --> 00:15:14,120
your background is dynamic such as in a

00:15:12,050 --> 00:15:16,070
multi room environment you will want to

00:15:14,120 --> 00:15:18,529
control it from your react application

00:15:16,070 --> 00:15:20,839
from your components and this is

00:15:18,529 --> 00:15:24,140
possible through the environment model

00:15:20,839 --> 00:15:26,570
you can just import it from reactor 360

00:15:24,140 --> 00:15:30,070
and again set the background and you

00:15:26,570 --> 00:15:35,360
need to provide the path to your image

00:15:30,070 --> 00:15:41,270
so this is my JPEG now let's see what it

00:15:35,360 --> 00:15:43,720
looks like in 3d this is the result we

00:15:41,270 --> 00:15:47,120
can see that we are inside the sphere

00:15:43,720 --> 00:15:51,440
our sphere is the cosmos the image is

00:15:47,120 --> 00:15:55,670
surrounding us so that was the way to

00:15:51,440 --> 00:15:57,529
load panoramic images or even videos now

00:15:55,670 --> 00:16:01,130
let's talk about the flexbox layout

00:15:57,529 --> 00:16:05,060
system in rack 360 we can layout

00:16:01,130 --> 00:16:08,270
components in 3d using flexbox the

00:16:05,060 --> 00:16:10,520
library used is CSS layout and the

00:16:08,270 --> 00:16:11,930
syntax is more or less identical to the

00:16:10,520 --> 00:16:15,020
web flex box

00:16:11,930 --> 00:16:17,930
but as you can imagine using flexbox to

00:16:15,020 --> 00:16:21,260
layout content on a 2d plane is not

00:16:17,930 --> 00:16:23,089
optimal for the 3d experience so it's a

00:16:21,260 --> 00:16:25,610
common practice to layout the content on

00:16:23,089 --> 00:16:30,050
a cylindrical plane and this will give

00:16:25,610 --> 00:16:32,779
us a two and a half D field so in our

00:16:30,050 --> 00:16:36,880
application I created a menu to navigate

00:16:32,779 --> 00:16:40,190
between planets this is our menu

00:16:36,880 --> 00:16:42,560
declaration a basic read component that

00:16:40,190 --> 00:16:45,860
and we can see that we have a view that

00:16:42,560 --> 00:16:48,500
contains other views one view per planet

00:16:45,860 --> 00:16:52,190
and we can also see a text component

00:16:48,500 --> 00:16:56,270
with the name of the planet and this is

00:16:52,190 --> 00:17:00,580
our menu a view with nine views inside

00:16:56,270 --> 00:17:00,580
one for each planet

00:17:01,450 --> 00:17:06,920
so we built a menu for navigating among

00:17:04,579 --> 00:17:11,420
the planets but now we want to make it

00:17:06,920 --> 00:17:13,939
clickable in VR we interact with objects

00:17:11,420 --> 00:17:16,490
in a different way than the web we don't

00:17:13,939 --> 00:17:18,230
necessarily click on something it may be

00:17:16,490 --> 00:17:20,300
enough that we look at an object for a

00:17:18,230 --> 00:17:23,449
significant amount of time in order to

00:17:20,300 --> 00:17:25,730
trigger an event other than looking we

00:17:23,449 --> 00:17:29,270
can also press the controller in order

00:17:25,730 --> 00:17:30,710
to trigger a reaction to make our scene

00:17:29,270 --> 00:17:34,160
interruptible we are going to use a

00:17:30,710 --> 00:17:37,100
component from react 360 called vr

00:17:34,160 --> 00:17:40,670
button this is a helper component that

00:17:37,100 --> 00:17:43,790
manages the interaction state machine by

00:17:40,670 --> 00:17:45,710
default of VR button has no appearance

00:17:43,790 --> 00:17:48,290
and will only act as a wrapper to

00:17:45,710 --> 00:17:52,130
capture events but it can be styled in

00:17:48,290 --> 00:17:54,559
the same way as a view so when pressing

00:17:52,130 --> 00:17:58,030
a button in our menu we are going to

00:17:54,559 --> 00:18:01,910
update our state with the new planet and

00:17:58,030 --> 00:18:04,400
let's take a look at our menu again now

00:18:01,910 --> 00:18:06,650
when we press a button we are updating

00:18:04,400 --> 00:18:09,350
our state and as a result we can see

00:18:06,650 --> 00:18:14,270
that the header component updates with

00:18:09,350 --> 00:18:17,420
the new planet name next I want to talk

00:18:14,270 --> 00:18:19,850
about loading models there are many

00:18:17,420 --> 00:18:22,220
types of model formats available other

00:18:19,850 --> 00:18:25,040
obj STL COLLADA

00:18:22,220 --> 00:18:25,730
c 3d they may come with a built in

00:18:25,040 --> 00:18:27,470
animation

00:18:25,730 --> 00:18:31,490
they may come with a material or with

00:18:27,470 --> 00:18:36,679
texture at the moment react 360 supports

00:18:31,490 --> 00:18:40,730
to f5 formats the wavefront obj and the

00:18:36,679 --> 00:18:44,029
gltf so under the static asset folder I

00:18:40,730 --> 00:18:46,120
have created a folder for models and a

00:18:44,029 --> 00:18:50,080
folder for textures

00:18:46,120 --> 00:18:54,919
what are textures they are images images

00:18:50,080 --> 00:18:59,840
PNG or JPEG that wraps our 3d model with

00:18:54,919 --> 00:19:02,289
UV mapping reactor e60 provides a

00:18:59,840 --> 00:19:07,789
component for loading models called

00:19:02,289 --> 00:19:10,370
entity so let's try to load earth here

00:19:07,789 --> 00:19:12,620
is our planet declaration and we can see

00:19:10,370 --> 00:19:16,250
that we need to provide a property

00:19:12,620 --> 00:19:19,399
called soft we need to provide our 3d

00:19:16,250 --> 00:19:23,299
model here in in this case it's the obj

00:19:19,399 --> 00:19:26,480
and also a material a material and this

00:19:23,299 --> 00:19:28,940
is optional keep in mind that we are

00:19:26,480 --> 00:19:31,490
using here a utility called asset this

00:19:28,940 --> 00:19:34,610
is the utility from reactor 360 that we

00:19:31,490 --> 00:19:39,289
load asset for us straight from the

00:19:34,610 --> 00:19:42,830
static asset folder and here is the

00:19:39,289 --> 00:19:44,389
loaded model we can see that by changing

00:19:42,830 --> 00:19:47,720
the current planet

00:19:44,389 --> 00:19:53,000
we're causing a new model to load every

00:19:47,720 --> 00:19:55,580
time to make our scene more interesting

00:19:53,000 --> 00:19:58,460
we can add animations to objects and

00:19:55,580 --> 00:20:01,429
layouts there are many ways to create

00:19:58,460 --> 00:20:03,580
animations in reactor 360 for example

00:20:01,429 --> 00:20:06,260
using the animated library or any

00:20:03,580 --> 00:20:09,080
third-party library for JavaScript

00:20:06,260 --> 00:20:12,529
animations or manually with

00:20:09,080 --> 00:20:15,710
requestanimationframe so this is an

00:20:12,529 --> 00:20:19,610
example of request animation frame what

00:20:15,710 --> 00:20:21,260
I want to do here is rotate a planet the

00:20:19,610 --> 00:20:24,649
rotate function in this example is

00:20:21,260 --> 00:20:28,130
called in a loop hopefully at least 60

00:20:24,649 --> 00:20:30,860
frames per second and on each coil we

00:20:28,130 --> 00:20:34,879
are advancing the rotation by a delta

00:20:30,860 --> 00:20:37,750
and this is the result we can see that

00:20:34,879 --> 00:20:41,380
the planet is rotating

00:20:37,750 --> 00:20:44,410
and if we switch planets the new model

00:20:41,380 --> 00:20:49,480
will still rotate around itself in the

00:20:44,410 --> 00:20:51,610
same way now let's see an example of how

00:20:49,480 --> 00:20:54,340
to use the animated library for

00:20:51,610 --> 00:20:56,620
animations so when a button is pressed

00:20:54,340 --> 00:20:59,890
we want to make it look like it bounces

00:20:56,620 --> 00:21:02,920
a bit and also when a new planet appears

00:20:59,890 --> 00:21:05,740
we want to give it nice little bounce in

00:21:02,920 --> 00:21:09,310
the animated library this effect is

00:21:05,740 --> 00:21:11,080
called spring a spring effect and keep

00:21:09,310 --> 00:21:14,140
in mind that the animated library is

00:21:11,080 --> 00:21:18,540
built in reactive 360 just like react

00:21:14,140 --> 00:21:21,490
native you can just import it and use it

00:21:18,540 --> 00:21:23,680
now let's look at the bounce effect at

00:21:21,490 --> 00:21:27,790
the spring effect when we click on a

00:21:23,680 --> 00:21:30,430
menu button we can see a bounce and also

00:21:27,790 --> 00:21:36,220
the new model the new planet appears

00:21:30,430 --> 00:21:39,670
with a bounce with a spring and here is

00:21:36,220 --> 00:21:41,860
our final application we are inside a

00:21:39,670 --> 00:21:44,680
panoramic image where we loaded an image

00:21:41,860 --> 00:21:47,560
of stars we can see the header component

00:21:44,680 --> 00:21:49,960
with two text inside below that is a

00:21:47,560 --> 00:21:52,480
loaded model where we used the entity

00:21:49,960 --> 00:21:55,360
component on the right you can see a

00:21:52,480 --> 00:21:57,880
menu a click on a menu on a menu item

00:21:55,360 --> 00:22:00,730
will switch to a different planet with a

00:21:57,880 --> 00:22:03,370
bounce the menu button also has a spring

00:22:00,730 --> 00:22:06,670
to it and on our left we can see some

00:22:03,370 --> 00:22:11,680
additional information about the planet

00:22:06,670 --> 00:22:15,820
as I mentioned before react 360 is based

00:22:11,680 --> 00:22:19,030
on 3GS but only uses a portion of its

00:22:15,820 --> 00:22:21,670
features the main feature of reactor e60

00:22:19,030 --> 00:22:24,100
is the ability to create user interfaces

00:22:21,670 --> 00:22:26,980
in 3d but when we want to develop

00:22:24,100 --> 00:22:30,250
complex 3d experiences and dive deep

00:22:26,980 --> 00:22:32,680
into 3gs we need to do some hacks or try

00:22:30,250 --> 00:22:35,530
to extend reactor e 60 to include those

00:22:32,680 --> 00:22:38,710
capabilities in order to use different

00:22:35,530 --> 00:22:40,710
materials lights and shaders to access

00:22:38,710 --> 00:22:43,570
the different properties of an object or

00:22:40,710 --> 00:22:46,480
manipulate it we need to extend reactor

00:22:43,570 --> 00:22:48,460
360 and as a result we are always trying

00:22:46,480 --> 00:22:51,100
to keep both of the libraries in sync

00:22:48,460 --> 00:22:53,960
and this is too difficult for us

00:22:51,100 --> 00:22:56,870
so now I want to show you a different

00:22:53,960 --> 00:23:00,500
way if we don't care if the user

00:22:56,870 --> 00:23:03,740
interface itself is in 2d and we want to

00:23:00,500 --> 00:23:06,590
focus on the 3d content we can split the

00:23:03,740 --> 00:23:09,560
UI from the 3d content so all of the UI

00:23:06,590 --> 00:23:12,250
is the plain react and all of the 3d

00:23:09,560 --> 00:23:14,630
content is 3js

00:23:12,250 --> 00:23:18,020
we are going to create a separate class

00:23:14,630 --> 00:23:19,400
that controls the 3gs scene now let's

00:23:18,020 --> 00:23:22,960
take a look at such a class and learn

00:23:19,400 --> 00:23:25,600
how to initialize a basic three.js scene

00:23:22,960 --> 00:23:28,490
here in our class in the init function

00:23:25,600 --> 00:23:31,520
we are getting a reference to an element

00:23:28,490 --> 00:23:33,380
that will hold the three J's canvas we

00:23:31,520 --> 00:23:37,070
are creating a new perspective camera

00:23:33,380 --> 00:23:41,120
and a WebGL renderer and on the bottom

00:23:37,070 --> 00:23:43,220
we are calling the animate function this

00:23:41,120 --> 00:23:45,260
will create a loop that causes the

00:23:43,220 --> 00:23:47,900
renderer to draw the scene every time

00:23:45,260 --> 00:23:51,950
the screen is refreshed on a typical

00:23:47,900 --> 00:23:55,790
screen this means 60 times per second

00:23:51,950 --> 00:23:58,160
and that's it from this point three J's

00:23:55,790 --> 00:24:01,610
is fully integrated and we can

00:23:58,160 --> 00:24:04,370
manipulate the scene easily after

00:24:01,610 --> 00:24:07,550
splitting react and three J's we can use

00:24:04,370 --> 00:24:10,520
different loaders unlike react 360 which

00:24:07,550 --> 00:24:12,950
only supports the obj and the gltf file

00:24:10,520 --> 00:24:16,070
formats now we can load different file

00:24:12,950 --> 00:24:18,710
types that three.js supports like STL or

00:24:16,070 --> 00:24:21,830
colada or like this file format that

00:24:18,710 --> 00:24:23,660
comes with a built-in animation and we

00:24:21,830 --> 00:24:26,000
can also use different materials and

00:24:23,660 --> 00:24:28,250
controls there and control their

00:24:26,000 --> 00:24:31,430
properties such as metalness or

00:24:28,250 --> 00:24:33,200
roughness we can load to the scene

00:24:31,430 --> 00:24:36,050
different lights that will affect our

00:24:33,200 --> 00:24:39,170
objects such as ambient light direct

00:24:36,050 --> 00:24:43,040
directional light spotlight a miss few

00:24:39,170 --> 00:24:45,560
light and many many more now we can

00:24:43,040 --> 00:24:49,100
access the actual model and manipulate

00:24:45,560 --> 00:24:51,440
its geometry the geometry is basically a

00:24:49,100 --> 00:24:54,650
set of points that define the models

00:24:51,440 --> 00:24:57,530
vertices and faces and here with a very

00:24:54,650 --> 00:24:59,750
simple for loop I'm rotating

00:24:57,530 --> 00:25:03,550
each vertices according to his height

00:24:59,750 --> 00:25:03,550
according to his Y position

00:25:03,690 --> 00:25:08,549
to make the scene more realistic we can

00:25:06,029 --> 00:25:11,159
add third-party libraries that simulate

00:25:08,549 --> 00:25:14,129
physics this will add to our scene

00:25:11,159 --> 00:25:18,269
gravity collision detection friction

00:25:14,129 --> 00:25:20,820
forces and much much more because we

00:25:18,269 --> 00:25:23,639
have access to the render loop now it is

00:25:20,820 --> 00:25:25,440
easier to animate objects in this

00:25:23,639 --> 00:25:27,419
example I'm getting input from the

00:25:25,440 --> 00:25:32,220
device's microphone and I'm controlling

00:25:27,419 --> 00:25:34,799
the cubes Y position it's also easier

00:25:32,220 --> 00:25:38,250
now to integrate different controllers

00:25:34,799 --> 00:25:43,409
that affect our scene such as lip motion

00:25:38,250 --> 00:25:46,830
or vive controllers but if we still want

00:25:43,409 --> 00:25:51,029
the VR experience we need to add three

00:25:46,830 --> 00:25:53,549
things to our scene the first is the web

00:25:51,029 --> 00:25:55,440
we are polyfill a JavaScript

00:25:53,549 --> 00:25:59,789
implementation of the web we are spec

00:25:55,440 --> 00:26:02,039
that will work on any platform second is

00:25:59,789 --> 00:26:04,889
the VR controls that will allow us to

00:26:02,039 --> 00:26:09,179
look around the scene using our headset

00:26:04,889 --> 00:26:11,490
and lastly the VR effect this will give

00:26:09,179 --> 00:26:16,080
us the stereoscopic vision that I

00:26:11,490 --> 00:26:18,539
mentioned in the beginning reactor e60

00:26:16,080 --> 00:26:19,470
is relatively new and lacked some of the

00:26:18,539 --> 00:26:23,549
core features of

00:26:19,470 --> 00:26:26,039
three.js for a very basic project that

00:26:23,549 --> 00:26:29,460
relies primarily on layout I suggest

00:26:26,039 --> 00:26:30,840
using react 360 but for projects that

00:26:29,460 --> 00:26:33,360
use advanced features of

00:26:30,840 --> 00:26:36,870
3js I would instead recommend

00:26:33,360 --> 00:26:39,659
integrating 3GS into react on your own

00:26:36,870 --> 00:26:41,399
this will give you much more flexibility

00:26:39,659 --> 00:26:45,360
and access to the full range of features

00:26:41,399 --> 00:26:47,730
that the library offers I hope that you

00:26:45,360 --> 00:26:49,289
found this talk instructive and I'll be

00:26:47,730 --> 00:26:51,450
more than happy if you share your future

00:26:49,289 --> 00:26:55,250
experiences with me thank you very much

00:26:51,450 --> 00:26:55,250
and enjoy the rest of the conference

00:26:58,850 --> 00:27:03,600
thank you very much to get a couple of

00:27:02,160 --> 00:27:05,070
questions for you we only have a very

00:27:03,600 --> 00:27:09,480
short amount of time what do you think

00:27:05,070 --> 00:27:12,440
about webassembly for 3d I don't have

00:27:09,480 --> 00:27:17,880
much experience with webassembly

00:27:12,440 --> 00:27:20,990
so I can't answer that yet but maybe I

00:27:17,880 --> 00:27:23,400
will check that and we can talk about it

00:27:20,990 --> 00:27:24,300
after this after this talk all right

00:27:23,400 --> 00:27:27,210
sounds good

00:27:24,300 --> 00:27:30,390
next one do you think AI has a stronger

00:27:27,210 --> 00:27:33,059
future versus VR I think that AR and VR

00:27:30,390 --> 00:27:37,200
are completely due to different

00:27:33,059 --> 00:27:39,360
experiences because in area our

00:27:37,200 --> 00:27:42,960
augmented reality you can see the real

00:27:39,360 --> 00:27:46,050
world with some manipulations and in VR

00:27:42,960 --> 00:27:48,750
we you are in a different world so you

00:27:46,050 --> 00:27:51,360
can't the you can't compete you can't

00:27:48,750 --> 00:27:53,610
compare between the two of them because

00:27:51,360 --> 00:27:56,520
there are two different experiences

00:27:53,610 --> 00:27:59,550
mm-hmm all right Dani bit of

00:27:56,520 --> 00:28:01,290
self-promotion I like it does react 360

00:27:59,550 --> 00:28:05,309
on react native work with Google

00:28:01,290 --> 00:28:10,980
cardboard yes if you use a webview react

00:28:05,309 --> 00:28:14,309
360 is not native the the output is is

00:28:10,980 --> 00:28:16,440
the either web is a web application so

00:28:14,309 --> 00:28:21,690
you can use the webview to inject it

00:28:16,440 --> 00:28:24,150
into react native mm-hmm all right how

00:28:21,690 --> 00:28:25,980
does the 3GS WebGL implementation

00:28:24,150 --> 00:28:29,520
perform on mobile comparing to native

00:28:25,980 --> 00:28:34,080
OpenGL ES solution of course that OpenGL

00:28:29,520 --> 00:28:37,800
will be better than 3GS for us web

00:28:34,080 --> 00:28:42,030
developers we can use JavaScript and we

00:28:37,800 --> 00:28:45,720
can with with with with is create 3d

00:28:42,030 --> 00:28:50,010
applications for for the web or even for

00:28:45,720 --> 00:28:53,850
VR so the performance will be a bit

00:28:50,010 --> 00:28:56,100
slower a bit with some lags of course

00:28:53,850 --> 00:28:56,670
OpenGL the native approach will be

00:28:56,100 --> 00:28:59,010
better

00:28:56,670 --> 00:29:02,910
mm-hmm next question was he in Prague

00:28:59,010 --> 00:29:05,190
yet I might add is it possible to use UI

00:29:02,910 --> 00:29:07,720
libraries like semantic UI or material

00:29:05,190 --> 00:29:11,409
UI with react 360 or is it

00:29:07,720 --> 00:29:16,030
we support 3d materials you can't use it

00:29:11,409 --> 00:29:18,909
if you can just use the view text or

00:29:16,030 --> 00:29:25,120
other basic components the track 260

00:29:18,909 --> 00:29:28,900
provides but if you want to stop - if

00:29:25,120 --> 00:29:33,700
you want to use react as the you are as

00:29:28,900 --> 00:29:36,340
the interface as one layer and 3GS let's

00:29:33,700 --> 00:29:39,220
say in the back as the 3d engine you can

00:29:36,340 --> 00:29:42,070
use whatever you want if you want to lay

00:29:39,220 --> 00:29:44,890
out the content on a 3d way you can do

00:29:42,070 --> 00:29:47,740
it using other libraries with other

00:29:44,890 --> 00:29:51,700
libraries ok the next question how does

00:29:47,740 --> 00:29:56,830
react 360 compare to a frame a frame

00:29:51,700 --> 00:29:59,140
uses 3GS here with react 360 we can use

00:29:56,830 --> 00:30:03,460
react something that we don't have in a

00:29:59,140 --> 00:30:05,440
frame right do you have any idea where

00:30:03,460 --> 00:30:13,780
VR technology can be used in a digital

00:30:05,440 --> 00:30:18,580
media company maybe in showrooms or for

00:30:13,780 --> 00:30:24,190
example there is some usages in hotels

00:30:18,580 --> 00:30:28,020
to show rooms and things like that maybe

00:30:24,190 --> 00:30:30,940
for an example caterpillar to present

00:30:28,020 --> 00:30:33,190
vehicles very large vehicles you can

00:30:30,940 --> 00:30:35,970
switch between the parts and it's easier

00:30:33,190 --> 00:30:39,610
to do that with VR with virtual reality

00:30:35,970 --> 00:30:47,770
mm-hmm ok what is a texture image look

00:30:39,610 --> 00:30:51,970
like it's like a UV mapping it's like a

00:30:47,770 --> 00:30:55,270
regular image that if you take a sphere

00:30:51,970 --> 00:30:58,900
and you try to open it so something like

00:30:55,270 --> 00:30:59,770
that alright maybe time for one or two

00:30:58,900 --> 00:31:02,080
more questions

00:30:59,770 --> 00:31:05,590
is there any physics library compatible

00:31:02,080 --> 00:31:11,799
with VR 360 example Canon Jas yeah you

00:31:05,590 --> 00:31:14,610
can use can ingest or MOJ s or 50 GS

00:31:11,799 --> 00:31:15,789
with three J's there is no problem

00:31:14,610 --> 00:31:17,980
alright

00:31:15,789 --> 00:31:21,070
is it possible to change the fov in

00:31:17,980 --> 00:31:23,259
react 360 I'm not sure but

00:31:21,070 --> 00:31:24,850
in three.js you can so if you will take

00:31:23,259 --> 00:31:27,759
the second approach that I showed you

00:31:24,850 --> 00:31:30,309
you can do that all right getting

00:31:27,759 --> 00:31:32,049
through a lot is it now possible to

00:31:30,309 --> 00:31:37,539
write VR games and react native together

00:31:32,049 --> 00:31:40,809
with react 360 yes but very basic games

00:31:37,539 --> 00:31:42,190
very very basic games because you don't

00:31:40,809 --> 00:31:46,570
have all of the features that you have

00:31:42,190 --> 00:31:51,220
in 3GS so very basic games that says

00:31:46,570 --> 00:31:53,379
games for four kids will be alright very

00:31:51,220 --> 00:31:55,570
last question all the static files for

00:31:53,379 --> 00:31:57,580
the 3d objects usually large how do you

00:31:55,570 --> 00:32:00,159
tackle performance caching memory

00:31:57,580 --> 00:32:02,740
battery data consumption etc so of

00:32:00,159 --> 00:32:06,279
course if you want to load 3d models in

00:32:02,740 --> 00:32:08,830
the web you will need to use smaller

00:32:06,279 --> 00:32:12,850
files let's say for for the web for for

00:32:08,830 --> 00:32:16,080
laptops desktop a 5 mega or 10 megabytes

00:32:12,850 --> 00:32:20,620
and you can create different version of

00:32:16,080 --> 00:32:25,149
of those files for mobile versions let's

00:32:20,620 --> 00:32:27,360
say with more less polygons so it will

00:32:25,149 --> 00:32:30,100
look less nicer but it will work faster

00:32:27,360 --> 00:32:30,980
all right thank you very much I'll give

00:32:30,100 --> 00:32:34,079
a round of applause

00:32:30,980 --> 00:32:34,079

YouTube URL: https://www.youtube.com/watch?v=jHTehwK9Zhw


