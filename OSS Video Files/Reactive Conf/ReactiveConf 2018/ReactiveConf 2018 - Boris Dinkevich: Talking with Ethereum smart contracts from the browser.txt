Title: ReactiveConf 2018 - Boris Dinkevich: Talking with Ethereum smart contracts from the browser
Publication date: 2018-11-02
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Main stage
-------------------------------------------------------------------
Talking with Ethereum smart contracts from the browser / Ethereum dApps & React

We all heard of CryptoKitties - in this talk we will build a web interface to our own small dApp and learn how to communicate with the Ethereum network.
Captions: 
	00:00:02,040 --> 00:00:08,610
[Music]

00:00:11,830 --> 00:00:17,840
all right well no pressure no pressure

00:00:15,020 --> 00:00:20,150
well the lights hello everyone so today

00:00:17,840 --> 00:00:22,009
I want to be speaking about the subject

00:00:20,150 --> 00:00:23,199
I really really love and that's the

00:00:22,009 --> 00:00:26,109
whole world of cryptocurrencies

00:00:23,199 --> 00:00:28,519
blockchain the algorithms there and

00:00:26,109 --> 00:00:30,499
another part which is the world of

00:00:28,519 --> 00:00:33,110
fronting and connecting these two things

00:00:30,499 --> 00:00:35,210
together which I think now probably the

00:00:33,110 --> 00:00:38,899
biggest problem in the blockchain world

00:00:35,210 --> 00:00:40,160
making stuff accessible so in this talk

00:00:38,899 --> 00:00:43,670
I hope we gonna build an application

00:00:40,160 --> 00:00:46,609
together from the start until then with

00:00:43,670 --> 00:00:50,269
a real contract deployed and access it

00:00:46,609 --> 00:00:52,789
from a react application hey my name is

00:00:50,269 --> 00:00:55,940
Boris I've been developing for quite a

00:00:52,789 --> 00:00:58,160
while now started doing managing

00:00:55,940 --> 00:01:00,710
exchange servers a long time ago

00:00:58,160 --> 00:01:03,829
a building USB sticks for embedded

00:01:00,710 --> 00:01:05,600
devices Ruby on Rails and the past few

00:01:03,829 --> 00:01:08,990
years front-end development with angular

00:01:05,600 --> 00:01:11,960
react and redux and I got into

00:01:08,990 --> 00:01:14,990
blockchain somewhere in 2013 a back

00:01:11,960 --> 00:01:18,290
before a filament existed doing real

00:01:14,990 --> 00:01:20,690
Bitcoin stuff and I never lost a passion

00:01:18,290 --> 00:01:24,730
for it and always enjoyed looking this

00:01:20,690 --> 00:01:27,470
field grow and become what it is today a

00:01:24,730 --> 00:01:29,750
little shameless plug our section

00:01:27,470 --> 00:01:31,550
edition of redux book is out it's

00:01:29,750 --> 00:01:33,860
completely free so if you doing Redux

00:01:31,550 --> 00:01:36,860
they want to get some new ideas going

00:01:33,860 --> 00:01:38,630
download the book alright and I like

00:01:36,860 --> 00:01:41,150
cats which you might have noticed and

00:01:38,630 --> 00:01:45,140
you see again so I wanted to speak about

00:01:41,150 --> 00:01:46,850
a real application domain names let's

00:01:45,140 --> 00:01:50,180
say tomorrow you wanted register a

00:01:46,850 --> 00:01:51,560
domain of your own Boris comm you

00:01:50,180 --> 00:01:53,930
probably will go to something like a

00:01:51,560 --> 00:01:56,150
private company to do that most still

00:01:53,930 --> 00:01:58,700
these are private companies in a way so

00:01:56,150 --> 00:02:01,820
that means while I own the domain in

00:01:58,700 --> 00:02:03,650
reality it's not really mine someone can

00:02:01,820 --> 00:02:05,930
take it from me maybe legal action or

00:02:03,650 --> 00:02:07,730
something else but the world of

00:02:05,930 --> 00:02:09,830
blockchain offers something really new I

00:02:07,730 --> 00:02:12,440
can register my domain of the blockchain

00:02:09,830 --> 00:02:14,510
it's completely decentralized there is

00:02:12,440 --> 00:02:17,060
no central party that can govern it

00:02:14,510 --> 00:02:18,440
hopefully that means I really own that

00:02:17,060 --> 00:02:20,180
asset

00:02:18,440 --> 00:02:22,220
and of course certainly to someone pass

00:02:20,180 --> 00:02:24,380
it to someone but I own it

00:02:22,220 --> 00:02:26,240
fully and totally so I thought that

00:02:24,380 --> 00:02:28,670
might be a great idea for this talk to

00:02:26,240 --> 00:02:31,760
build a simple domain service that can

00:02:28,670 --> 00:02:36,170
resolve strings domains to IP addresses

00:02:31,760 --> 00:02:38,810
I even went ahead and created a simple

00:02:36,170 --> 00:02:41,870
react based application that can resolve

00:02:38,810 --> 00:02:43,760
domains and register them now you might

00:02:41,870 --> 00:02:45,140
notice with spinner here and that's

00:02:43,760 --> 00:02:47,570
because nothing is really working I

00:02:45,140 --> 00:02:51,140
don't have any back-end I don't connect

00:02:47,570 --> 00:02:54,200
a real domain service and actually have

00:02:51,140 --> 00:02:57,650
it all stabbed here in my database file

00:02:54,200 --> 00:02:59,720
two functions one that gets a domain it

00:02:57,650 --> 00:03:01,370
should return an IP and a second

00:02:59,720 --> 00:03:04,760
function that should get a domain an IP

00:03:01,370 --> 00:03:06,470
and register it somewhere and we'll try

00:03:04,760 --> 00:03:11,690
to tackle these two things and connect

00:03:06,470 --> 00:03:13,610
them to a real blockchain so my talk is

00:03:11,690 --> 00:03:15,710
not about Bitcoin it's about etherium

00:03:13,610 --> 00:03:17,350
and the reason behind it is that the

00:03:15,710 --> 00:03:20,720
film is really suited to applications

00:03:17,350 --> 00:03:23,140
like the domain service because if film

00:03:20,720 --> 00:03:27,560
in its base is kind of like a database

00:03:23,140 --> 00:03:29,780
so it's not a tabular database or a

00:03:27,560 --> 00:03:31,340
document based or it's kind of like a

00:03:29,780 --> 00:03:33,739
database where you can just throw data

00:03:31,340 --> 00:03:34,430
in and when I say that it can be

00:03:33,739 --> 00:03:36,650
anything

00:03:34,430 --> 00:03:38,989
strings numbers and either things like

00:03:36,650 --> 00:03:42,709
mappings so I mean it maps from a string

00:03:38,989 --> 00:03:44,690
to a number another important thing but

00:03:42,709 --> 00:03:49,010
we'll talk about a bit later is they can

00:03:44,690 --> 00:03:51,019
also store code inside their database so

00:03:49,010 --> 00:03:52,750
first of all what's blockchain to those

00:03:51,019 --> 00:03:55,070
that are not really familiar with it I

00:03:52,750 --> 00:03:58,130
said it's a database so why do we have

00:03:55,070 --> 00:04:01,489
blocks you can kind of think about it as

00:03:58,130 --> 00:04:03,920
a git repository with one branch we

00:04:01,489 --> 00:04:05,630
started our really big commit and slowly

00:04:03,920 --> 00:04:08,090
we had more and more pages on top of it

00:04:05,630 --> 00:04:10,370
so if you want to know the current state

00:04:08,090 --> 00:04:12,620
of a system I just look at the top of

00:04:10,370 --> 00:04:15,560
the branch with all the pages going down

00:04:12,620 --> 00:04:19,669
that's pretty much the blocks so let's

00:04:15,560 --> 00:04:21,080
think about a new example actually it's

00:04:19,669 --> 00:04:23,360
the first time I'm speaking about it I'm

00:04:21,080 --> 00:04:27,110
going to be launching a boris coin today

00:04:23,360 --> 00:04:29,720
and before pre launch I decided to

00:04:27,110 --> 00:04:31,879
distribute some coins around so I have

00:04:29,720 --> 00:04:34,580
10 coins on my account

00:04:31,879 --> 00:04:37,159
and I have ten coins 20 coins with other

00:04:34,580 --> 00:04:39,349
my friend and this morning he was really

00:04:37,159 --> 00:04:42,199
nice and he loaned me in Europe so I can

00:04:39,349 --> 00:04:44,569
buy coffee and instead of giving him a

00:04:42,199 --> 00:04:47,360
euro because it is just currency now I

00:04:44,569 --> 00:04:49,189
want to give him a Boris coin back so

00:04:47,360 --> 00:04:52,129
plan to login into my application and

00:04:49,189 --> 00:04:55,699
change the balances so they reflect the

00:04:52,129 --> 00:04:57,709
change of amounts now if it was a real

00:04:55,699 --> 00:05:01,969
database what I'll probably do is just

00:04:57,709 --> 00:05:04,009
do two transactions right to change my

00:05:01,969 --> 00:05:07,189
balance to nine and increase his balance

00:05:04,009 --> 00:05:09,439
to 21 but since all the code is running

00:05:07,189 --> 00:05:12,679
on my laptop I can probably just open

00:05:09,439 --> 00:05:15,139
the JavaScript code and change it a

00:05:12,679 --> 00:05:17,869
little bit so I'd never deduct from

00:05:15,139 --> 00:05:20,959
myself but just give Adam the money he's

00:05:17,869 --> 00:05:22,669
owned a but I know that Adam is sitting

00:05:20,959 --> 00:05:24,080
somewhere in the audience here so you

00:05:22,669 --> 00:05:26,689
might be sitting there thinking wait is

00:05:24,080 --> 00:05:28,490
JavaScript so he can go on this computer

00:05:26,689 --> 00:05:32,300
and change the code to be something like

00:05:28,490 --> 00:05:33,769
this and become instantly rich so we

00:05:32,300 --> 00:05:36,379
kind of have a big problem here if

00:05:33,769 --> 00:05:38,959
everyone can change the code we don't

00:05:36,379 --> 00:05:41,209
really have any meaningful a data

00:05:38,959 --> 00:05:43,279
sitting in the database we want everyone

00:05:41,209 --> 00:05:44,659
to be running exactly the same code that

00:05:43,279 --> 00:05:47,389
does a lot of different checks and

00:05:44,659 --> 00:05:49,849
verifications and since I'm not going to

00:05:47,389 --> 00:05:52,159
be using any server at all and I want to

00:05:49,849 --> 00:05:54,110
be using my JavaScript application to

00:05:52,159 --> 00:05:56,059
speak directly to the server to be

00:05:54,110 --> 00:05:58,699
blocked chain there is only one place I

00:05:56,059 --> 00:06:01,249
can put my coding right that's on the

00:05:58,699 --> 00:06:02,869
blockchain so I'm going to move my only

00:06:01,249 --> 00:06:06,009
live front and cold on the laptop and

00:06:02,869 --> 00:06:08,119
put my code on the aphelion blockchain

00:06:06,009 --> 00:06:10,819
this means that if I want to change

00:06:08,119 --> 00:06:13,490
balances I no longer just change values

00:06:10,819 --> 00:06:16,159
I have to call a function for instance

00:06:13,490 --> 00:06:18,559
transfer function of course will

00:06:16,159 --> 00:06:20,449
validate that I'm allowed to transfer

00:06:18,559 --> 00:06:22,490
money it will check that I actually have

00:06:20,449 --> 00:06:24,979
enough money to send and maybe even

00:06:22,490 --> 00:06:27,079
verify that Adam as an active account on

00:06:24,979 --> 00:06:29,990
the system right so this makes a lot

00:06:27,079 --> 00:06:32,509
more sense from security perspective so

00:06:29,990 --> 00:06:35,089
we'll jump back again to real parts of

00:06:32,509 --> 00:06:38,179
aphelion in the world with phillium we

00:06:35,089 --> 00:06:40,279
have two types of accounts accounts with

00:06:38,179 --> 00:06:42,469
whole if helium coins that I'll mention

00:06:40,279 --> 00:06:45,080
a few minutes and accounts that hold

00:06:42,469 --> 00:06:48,830
contract code which is called a

00:06:45,080 --> 00:06:52,400
data every account has a unique global

00:06:48,830 --> 00:06:54,379
identifier so I have multiple personal

00:06:52,400 --> 00:06:56,629
accounts we've money in them and I can

00:06:54,379 --> 00:06:59,780
have multiple conference like any one of

00:06:56,629 --> 00:07:03,050
you initial vast contrast is also built

00:06:59,780 --> 00:07:05,409
of two parts the code itself and the

00:07:03,050 --> 00:07:09,229
data for instance the balances or

00:07:05,409 --> 00:07:10,460
register domain names now you probably

00:07:09,229 --> 00:07:13,460
can't see it because it's really tiny

00:07:10,460 --> 00:07:16,370
intentionally but that's not really cold

00:07:13,460 --> 00:07:18,379
there's a sort of byte code each node in

00:07:16,370 --> 00:07:20,509
the etherium network can have something

00:07:18,379 --> 00:07:24,020
called EVM an affair in virtual machine

00:07:20,509 --> 00:07:26,629
so they can execute a special byte code

00:07:24,020 --> 00:07:30,229
now probably none of you want to be

00:07:26,629 --> 00:07:33,469
developing in by code maybe some other

00:07:30,229 --> 00:07:34,819
keys but it's really hard so open source

00:07:33,469 --> 00:07:37,419
community created some higher-order

00:07:34,819 --> 00:07:40,490
languages the most common one being

00:07:37,419 --> 00:07:42,500
solidity now the reason it's really

00:07:40,490 --> 00:07:44,479
common is because it's very very similar

00:07:42,500 --> 00:07:46,430
to JavaScript I'm going to be showing

00:07:44,479 --> 00:07:48,050
you a contract in a few minutes and

00:07:46,430 --> 00:07:49,610
probably all the JavaScript developers

00:07:48,050 --> 00:07:51,919
here will be find it really easy to

00:07:49,610 --> 00:07:54,199
understand now it's not really pure

00:07:51,919 --> 00:07:56,599
JavaScript because the solidity language

00:07:54,199 --> 00:07:58,729
have a lot of constructs and changes so

00:07:56,599 --> 00:08:02,150
you can get build more secure contracts

00:07:58,729 --> 00:08:03,680
but the base is very similar so let's

00:08:02,150 --> 00:08:07,880
see how we turn this bytecode

00:08:03,680 --> 00:08:10,279
into a nice readable solidity code so

00:08:07,880 --> 00:08:12,409
first I'll define my contract we'll call

00:08:10,279 --> 00:08:14,330
it domains and then I'll define all the

00:08:12,409 --> 00:08:17,330
data I want to store inside of it so in

00:08:14,330 --> 00:08:19,279
our case I'm an assert a mapping they

00:08:17,330 --> 00:08:21,860
takes a string and domain and gives us

00:08:19,279 --> 00:08:24,800
back an IP and here I'm going to be

00:08:21,860 --> 00:08:26,659
using an unsigned integer which has four

00:08:24,800 --> 00:08:28,430
bytes inside which is exactly what we

00:08:26,659 --> 00:08:31,789
need for an IP address it's the most

00:08:28,430 --> 00:08:34,430
smallest and concise way and now we need

00:08:31,789 --> 00:08:37,490
to define at least one function right we

00:08:34,430 --> 00:08:39,440
want something like resolve I'll give it

00:08:37,490 --> 00:08:41,120
an IP address it will look in the

00:08:39,440 --> 00:08:43,370
mapping and give us back so I'll give it

00:08:41,120 --> 00:08:45,829
a domain look there in the mapping give

00:08:43,370 --> 00:08:49,160
us back an IP and another function for

00:08:45,829 --> 00:08:51,890
registration a domain name an IP and it

00:08:49,160 --> 00:08:54,649
will just add them to the mapping this

00:08:51,890 --> 00:08:56,680
code should be breezy like really easily

00:08:54,649 --> 00:08:59,290
readable to everyone

00:08:56,680 --> 00:09:00,100
it's long warning don't just go ahead

00:08:59,290 --> 00:09:02,259
and start writing

00:09:00,100 --> 00:09:03,850
if helium contracts a lot of money has

00:09:02,259 --> 00:09:05,980
been lost because people just started

00:09:03,850 --> 00:09:08,889
doing that you should really study the

00:09:05,980 --> 00:09:12,610
language in there and the site problems

00:09:08,889 --> 00:09:15,149
that can happen there alright so that

00:09:12,610 --> 00:09:17,800
was like a very general overview

00:09:15,149 --> 00:09:20,350
recovered only very pouts a very small

00:09:17,800 --> 00:09:22,209
part of a theory on network if you want

00:09:20,350 --> 00:09:23,920
to get more into this development you

00:09:22,209 --> 00:09:25,990
should really understand how a consensus

00:09:23,920 --> 00:09:28,209
protocols work what is proof of work and

00:09:25,990 --> 00:09:30,369
how the database synchronizes with other

00:09:28,209 --> 00:09:33,970
nodes in its server in the network might

00:09:30,369 --> 00:09:37,600
don't have just one server here before I

00:09:33,970 --> 00:09:39,249
jump to to live coding though and small

00:09:37,600 --> 00:09:41,879
thing we need to think about is reads

00:09:39,249 --> 00:09:45,399
and writes so let's look at our contract

00:09:41,879 --> 00:09:48,699
at the two main lines here so when I try

00:09:45,399 --> 00:09:50,980
to resolve something and I'm speaking as

00:09:48,699 --> 00:09:53,470
a node now I'll just look at my database

00:09:50,980 --> 00:09:55,089
I map between a string and a number and

00:09:53,470 --> 00:09:57,639
give it back to you as a client really

00:09:55,089 --> 00:10:00,490
simple and easy but if you want to

00:09:57,639 --> 00:10:02,800
register in new IP things become more

00:10:00,490 --> 00:10:04,629
complicated think about someone trying

00:10:02,800 --> 00:10:07,089
to spend my network and create a

00:10:04,629 --> 00:10:09,790
register I know a thousand type es or a

00:10:07,089 --> 00:10:11,649
billion IPS and since the same database

00:10:09,790 --> 00:10:13,929
is going to be replicated for the whole

00:10:11,649 --> 00:10:14,740
refilm framework they can make it really

00:10:13,929 --> 00:10:16,839
really huge

00:10:14,740 --> 00:10:19,120
so you want to limit people so they can

00:10:16,839 --> 00:10:22,389
just create fill the database we've

00:10:19,120 --> 00:10:24,850
prepped another problem is once as a

00:10:22,389 --> 00:10:26,679
node I've dated my local database I have

00:10:24,850 --> 00:10:28,839
to update all the other nodes in the

00:10:26,679 --> 00:10:30,129
network which is going to be quite a bit

00:10:28,839 --> 00:10:33,639
of work specially since we're using

00:10:30,129 --> 00:10:35,259
proof-of-work now that means as a server

00:10:33,639 --> 00:10:38,139
I need to find a way to limit you guys

00:10:35,259 --> 00:10:41,019
from doing bad stuff and for that we

00:10:38,139 --> 00:10:43,749
actually use way phillium currency its

00:10:41,019 --> 00:10:46,329
original intention was to pay nodes and

00:10:43,749 --> 00:10:48,579
miners for adding stuff to the database

00:10:46,329 --> 00:10:50,589
the more data you wanna add the more you

00:10:48,579 --> 00:10:52,809
will pay the more instructions you wanna

00:10:50,589 --> 00:10:54,399
run the more you'll pay and of course

00:10:52,809 --> 00:10:56,980
every block that this crate is also

00:10:54,399 --> 00:11:00,160
being and the miner gets a bit of a mana

00:10:56,980 --> 00:11:02,350
from that so that means reading from

00:11:00,160 --> 00:11:04,740
this video network is usually completely

00:11:02,350 --> 00:11:06,549
free writing to the freedom network

00:11:04,740 --> 00:11:09,210
costs real money

00:11:06,549 --> 00:11:12,430
if you're working on the main network

00:11:09,210 --> 00:11:15,340
cool so let's try and get all this to

00:11:12,430 --> 00:11:19,450
work in reality and we're going to jump

00:11:15,340 --> 00:11:21,310
to be more exciting parts live coding so

00:11:19,450 --> 00:11:23,110
I'm not going to be using really video

00:11:21,310 --> 00:11:25,450
network because it takes quite a while

00:11:23,110 --> 00:11:28,570
for new blocks to be formed I think it's

00:11:25,450 --> 00:11:29,890
about 27 seconds now and it's going to

00:11:28,570 --> 00:11:32,590
cost me money which I don't want to

00:11:29,890 --> 00:11:35,650
spend when the Guru is running a local

00:11:32,590 --> 00:11:39,640
server so there is a nice tool ganache

00:11:35,650 --> 00:11:42,190
that creates a local private node just

00:11:39,640 --> 00:11:43,600
for me it gives me a bit of a film

00:11:42,190 --> 00:11:46,180
that's quite a few accounts here that

00:11:43,600 --> 00:11:47,890
have 100 etherium unfortunately that's

00:11:46,180 --> 00:11:51,970
not real money because I always bet will

00:11:47,890 --> 00:11:53,560
be like $20,000 now in each one but it

00:11:51,970 --> 00:11:59,080
gives me a really nice way to test stuff

00:11:53,560 --> 00:12:00,820
locally without any ops installations in

00:11:59,080 --> 00:12:04,270
our tool I'm going to use is the remix

00:12:00,820 --> 00:12:05,560
ID it's a waste by web-based ID it's

00:12:04,270 --> 00:12:08,320
really nice to play around with

00:12:05,560 --> 00:12:10,240
contracts deploy them and afterwards see

00:12:08,320 --> 00:12:13,090
what's happening inside of them so we

00:12:10,240 --> 00:12:14,760
got our contract already here there are

00:12:13,090 --> 00:12:17,830
a few keywords that I didn't have in the

00:12:14,760 --> 00:12:20,440
presentation that are needed now to make

00:12:17,830 --> 00:12:22,560
the contract more concise and what I

00:12:20,440 --> 00:12:27,250
want to do is really try to compile it

00:12:22,560 --> 00:12:28,570
so we hit the compile button here well

00:12:27,250 --> 00:12:29,890
you don't see it but actually something

00:12:28,570 --> 00:12:32,890
happen in the compilation of the code

00:12:29,890 --> 00:12:35,260
and we can look at the details and here

00:12:32,890 --> 00:12:36,970
we'll see the bytecode generated and

00:12:35,260 --> 00:12:40,000
quite a few other things that the

00:12:36,970 --> 00:12:42,310
compiler have done so happily my

00:12:40,000 --> 00:12:44,470
contract is compiling correctly which is

00:12:42,310 --> 00:12:46,780
already a great thing and now I want to

00:12:44,470 --> 00:12:49,480
run it so in my case I have a local

00:12:46,780 --> 00:12:53,520
network so I'm going to connect to it

00:12:49,480 --> 00:12:58,510
we're going to the web provider and

00:12:53,520 --> 00:13:01,150
connect to localhost and let's see what

00:12:58,510 --> 00:13:02,410
happens if you watch the right side of

00:13:01,150 --> 00:13:04,720
the screen and trying to zoom in

00:13:02,410 --> 00:13:07,360
unsuccessfully unfortunately you will

00:13:04,720 --> 00:13:10,330
see we have a list of accounts we 100e

00:13:07,360 --> 00:13:13,090
for inside which exactly where cannes we

00:13:10,330 --> 00:13:16,360
had in my ganache so I'm connected to my

00:13:13,090 --> 00:13:18,100
local node and now let's try to deploy

00:13:16,360 --> 00:13:21,510
my contract so I only have one contract

00:13:18,100 --> 00:13:25,020
compiled I'll click the deploy button

00:13:21,510 --> 00:13:27,960
and hope for the best well according to

00:13:25,020 --> 00:13:29,550
the ID the contract was deployed I can

00:13:27,960 --> 00:13:32,610
take a quick look inside my ganache

00:13:29,550 --> 00:13:36,500
server and see that really a transaction

00:13:32,610 --> 00:13:39,570
happened another interesting thing is I

00:13:36,500 --> 00:13:43,770
can see my amounts of ether went down

00:13:39,570 --> 00:13:46,320
from 100 to 99.9999 that means actually

00:13:43,770 --> 00:13:48,780
paid the local server to create a new

00:13:46,320 --> 00:13:50,820
contract so the payment was really

00:13:48,780 --> 00:13:53,160
happening I can actually deploy it a few

00:13:50,820 --> 00:13:55,320
times so I have now three deployments

00:13:53,160 --> 00:13:57,320
but each one is sitting on a different

00:13:55,320 --> 00:13:59,580
address each one is completely unique

00:13:57,320 --> 00:14:02,790
let's play around a little bit with the

00:13:59,580 --> 00:14:05,730
first one I hope you can see it it's a

00:14:02,790 --> 00:14:07,620
bit low here on the screen let's try

00:14:05,730 --> 00:14:11,970
running the register function and gonna

00:14:07,620 --> 00:14:14,700
register google.com and here IPS is an

00:14:11,970 --> 00:14:17,460
unsigned integer so since I can't really

00:14:14,700 --> 00:14:19,440
convert it mentally now they have

00:14:17,460 --> 00:14:23,670
something like 20 that means the IP will

00:14:19,440 --> 00:14:25,770
be 0 0 0 20 let's hit the register

00:14:23,670 --> 00:14:27,950
button again we fear imbalance went down

00:14:25,770 --> 00:14:31,140
a little bit and let's register

00:14:27,950 --> 00:14:37,950
facebook.com as well and I'm gonna give

00:14:31,140 --> 00:14:39,720
it an IP of 0 0 0 60 another peek inside

00:14:37,950 --> 00:14:42,780
ganache and we can see that I have to

00:14:39,720 --> 00:14:44,100
contract calls want to create the Google

00:14:42,780 --> 00:14:45,870
mapping and the second you create a

00:14:44,100 --> 00:14:48,870
Facebook mapping so things are really

00:14:45,870 --> 00:14:50,790
happening on the local server so let's

00:14:48,870 --> 00:14:57,420
try to look up stuff let's try to

00:14:50,790 --> 00:14:59,010
resolve facebook.com and 60 perfect so

00:14:57,420 --> 00:15:01,680
we have a contract it's deployed on the

00:14:59,010 --> 00:15:04,110
server we register two domains and I can

00:15:01,680 --> 00:15:06,150
actually read back the values but that's

00:15:04,110 --> 00:15:08,520
all happening inside this nice ID and

00:15:06,150 --> 00:15:11,100
obviously we don't really want our users

00:15:08,520 --> 00:15:14,280
playing with IDs when I give them a nice

00:15:11,100 --> 00:15:17,000
beautiful interface which is something

00:15:14,280 --> 00:15:20,580
most theorem developers don't really do

00:15:17,000 --> 00:15:23,700
so let's try to make this app work with

00:15:20,580 --> 00:15:25,740
the local node now the best way to when

00:15:23,700 --> 00:15:29,340
you create from JavaScript via theorem

00:15:25,740 --> 00:15:32,220
is to use an existing package it's

00:15:29,340 --> 00:15:34,620
already in 9 p.m. the web free and pay

00:15:32,220 --> 00:15:35,850
package gives us a very nice and robust

00:15:34,620 --> 00:15:38,819
interface to do

00:15:35,850 --> 00:15:40,440
lots of stuff with aetherium nodes since

00:15:38,819 --> 00:15:42,959
I already have it installed I'll just

00:15:40,440 --> 00:15:45,720
try to use it with you together so let's

00:15:42,959 --> 00:15:52,170
go to our index file and just start from

00:15:45,720 --> 00:15:54,600
scratch I'm going to import web 3 from

00:15:52,170 --> 00:15:56,430
the web 3 package and I'm going to

00:15:54,600 --> 00:16:02,519
create a new instance of a web 3

00:15:56,430 --> 00:16:05,009
connection you know web 3 now since I

00:16:02,519 --> 00:16:06,420
want to connect to a specific node right

00:16:05,009 --> 00:16:08,069
I might have an test Network a

00:16:06,420 --> 00:16:09,750
production network and a local network

00:16:08,069 --> 00:16:12,870
you actually have to create some kind of

00:16:09,750 --> 00:16:16,279
connector for web 3 in my case it's a

00:16:12,870 --> 00:16:20,970
local node so we'll create a web 3

00:16:16,279 --> 00:16:26,190
provider and use the HTTP provider for

00:16:20,970 --> 00:16:30,120
that just go HTTP connection HTTP local

00:16:26,190 --> 00:16:31,980
host on port 8545 we're going to add a

00:16:30,120 --> 00:16:36,180
debugger here so we can try to see if

00:16:31,980 --> 00:16:40,170
things are actually working for me ok no

00:16:36,180 --> 00:16:42,839
errors so really good web free seated

00:16:40,170 --> 00:16:44,579
and looks like it's working I'm not sure

00:16:42,839 --> 00:16:48,029
yet but something is looking much nicer

00:16:44,579 --> 00:16:50,730
now so now I have a connection to by

00:16:48,029 --> 00:16:52,470
node but what I really want to do is

00:16:50,730 --> 00:16:55,170
speak with the contract right I wanna

00:16:52,470 --> 00:16:56,550
ask a contract to resolve domains and I

00:16:55,170 --> 00:16:58,560
want to ask the contract to register

00:16:56,550 --> 00:17:00,930
domains that means we need an instance

00:16:58,560 --> 00:17:02,759
of the contract itself or a connection

00:17:00,930 --> 00:17:09,209
to the contract so let's create that as

00:17:02,759 --> 00:17:16,860
well cons contract a new web 3 web 3

00:17:09,209 --> 00:17:21,240
sorry theorem contract now running this

00:17:16,860 --> 00:17:24,120
won't really work because one because

00:17:21,240 --> 00:17:26,610
there are a few things missing you've

00:17:24,120 --> 00:17:30,059
seen before I deployed three different

00:17:26,610 --> 00:17:31,770
contracts so we have to tell which

00:17:30,059 --> 00:17:33,150
contract we wanna speak with so I'm

00:17:31,770 --> 00:17:35,250
going to copy the address so the first

00:17:33,150 --> 00:17:37,669
one that's where we put all our mappings

00:17:35,250 --> 00:17:37,669
so far

00:17:39,390 --> 00:17:43,620
and even now we're not really done

00:17:40,980 --> 00:17:45,900
because if you think about it from my

00:17:43,620 --> 00:17:47,900
perspective now what we have saved in

00:17:45,900 --> 00:17:50,400
the contract is just a bunch of bytecode

00:17:47,900 --> 00:17:52,110
how do I know what kind of interface it

00:17:50,400 --> 00:17:54,000
gives us well right I can try passing

00:17:52,110 --> 00:17:56,160
record and understanding what functions

00:17:54,000 --> 00:17:57,030
inside what functions exist inside but

00:17:56,160 --> 00:17:59,640
that's going to be really complicated

00:17:57,030 --> 00:18:02,670
and weird what we need is some kind of

00:17:59,640 --> 00:18:04,260
header file that tell us what functions

00:18:02,670 --> 00:18:07,559
are exported by the contract and what

00:18:04,260 --> 00:18:09,059
parameters ever functions expect so in

00:18:07,559 --> 00:18:11,580
the world of etherium that ejects

00:18:09,059 --> 00:18:15,150
actually exists already and it's called

00:18:11,580 --> 00:18:17,130
an ABI once we compiled our contract we

00:18:15,150 --> 00:18:19,049
get both the byte codes and something

00:18:17,130 --> 00:18:21,299
called an ABI time on a copy copied now

00:18:19,049 --> 00:18:25,190
so we can take a closer look at it and

00:18:21,299 --> 00:18:29,640
copy it inside my project a new file

00:18:25,190 --> 00:18:32,250
contract JSON no it's already exist

00:18:29,640 --> 00:18:34,559
perfect you know overwrite it with a new

00:18:32,250 --> 00:18:37,049
contract and as you can see the API is

00:18:34,559 --> 00:18:39,360
just a basic JSON file currently it has

00:18:37,049 --> 00:18:41,940
two objects inside an array the first

00:18:39,360 --> 00:18:44,730
object describe the function whose name

00:18:41,940 --> 00:18:47,820
is register and it gets two parameters a

00:18:44,730 --> 00:18:50,190
domain an IP and the second object again

00:18:47,820 --> 00:18:51,900
a function it's called the resolve that

00:18:50,190 --> 00:18:54,900
gets only one domain so that's our

00:18:51,900 --> 00:18:56,820
header file for the contract and we'll

00:18:54,900 --> 00:18:58,770
have to use it to be able to communicate

00:18:56,820 --> 00:19:08,540
with the contract so I'm gonna import it

00:18:58,770 --> 00:19:10,470
as well in import API from contract

00:19:08,540 --> 00:19:12,620
alright that's actually the first

00:19:10,470 --> 00:19:16,970
parameter to the contact creation and

00:19:12,620 --> 00:19:20,309
let's run the code and see what happens

00:19:16,970 --> 00:19:24,059
okay now so far let's take a look inside

00:19:20,309 --> 00:19:26,490
the contract we created and we can see

00:19:24,059 --> 00:19:29,309
here in the methods we actually see the

00:19:26,490 --> 00:19:31,400
register and resolve functions so maybe

00:19:29,309 --> 00:19:36,510
we'll just try using them already

00:19:31,400 --> 00:19:39,480
contract methods resolve give it let's

00:19:36,510 --> 00:19:42,090
say google.com and see what happens so

00:19:39,480 --> 00:19:45,179
we don't really get a value bette right

00:19:42,090 --> 00:19:46,950
we got some kind of weird structure and

00:19:45,179 --> 00:19:49,070
that is because when we if you want to

00:19:46,950 --> 00:19:52,110
call a functional contract we have to

00:19:49,070 --> 00:19:52,950
decide how we're gonna call it in my

00:19:52,110 --> 00:19:54,720
case

00:19:52,950 --> 00:19:56,460
just want to ask the server to do it for

00:19:54,720 --> 00:19:58,470
me I don't want to pay anything because

00:19:56,460 --> 00:20:01,440
I'm doing a read request so I'm going to

00:19:58,470 --> 00:20:03,480
use the recall function now this looks

00:20:01,440 --> 00:20:05,730
much better I get back a promise and

00:20:03,480 --> 00:20:08,190
let's see what this promise resolves to

00:20:05,730 --> 00:20:11,460
let's just print out whatever of

00:20:08,190 --> 00:20:15,540
promised returns so I'm gonna let things

00:20:11,460 --> 00:20:16,980
run and we got one e which is exactly

00:20:15,540 --> 00:20:18,840
the number we registered for Google

00:20:16,980 --> 00:20:20,910
let's try this again this time gonna

00:20:18,840 --> 00:20:25,080
give it instead of Google are going to

00:20:20,910 --> 00:20:29,880
try to Facebook and hopefully we'll get

00:20:25,080 --> 00:20:32,790
60 back cool so we're using web tree to

00:20:29,880 --> 00:20:34,980
connect of a node to the local node and

00:20:32,790 --> 00:20:38,100
getting a value back you take this nice

00:20:34,980 --> 00:20:42,570
code and use it inside our real react

00:20:38,100 --> 00:20:45,570
application so remove a debugger of

00:20:42,570 --> 00:20:49,890
course no need for that anymore remove a

00:20:45,570 --> 00:20:56,880
fake resolve and replace resolve with

00:20:49,890 --> 00:21:01,080
contract methods resolve domain and do a

00:20:56,880 --> 00:21:05,730
call okay let's see if it works perfect

00:21:01,080 --> 00:21:07,380
0-0 2000 60 and now let's try to make

00:21:05,730 --> 00:21:09,750
this one work as well so we can register

00:21:07,380 --> 00:21:12,930
the domain now if I click it now nothing

00:21:09,750 --> 00:21:15,540
really happens right because we didn't

00:21:12,930 --> 00:21:18,060
connect at all let's try to create a

00:21:15,540 --> 00:21:22,070
code directly here without a console

00:21:18,060 --> 00:21:26,000
anymore so we go to the contract methods

00:21:22,070 --> 00:21:28,470
register give it a domain give it Y P

00:21:26,000 --> 00:21:31,350
but now we cannot do the call method

00:21:28,470 --> 00:21:34,980
anymore reason being the server will

00:21:31,350 --> 00:21:37,080
expect payment for the change it's not

00:21:34,980 --> 00:21:38,610
going to do it for us for free so what

00:21:37,080 --> 00:21:42,600
we'll have to do is call the set method

00:21:38,610 --> 00:21:45,090
and tell it which account is gonna pay

00:21:42,600 --> 00:21:52,910
for it because this is not free for us

00:21:45,090 --> 00:21:52,910
anymore sorry

00:21:53,590 --> 00:21:59,090
and let's take one of their accounts we

00:21:56,090 --> 00:22:05,960
got in ganache and steal some money from

00:21:59,090 --> 00:22:09,800
it and let's let give us application of

00:22:05,960 --> 00:22:11,290
Westfield so try like hit register but

00:22:09,800 --> 00:22:15,590
nothing is happening

00:22:11,290 --> 00:22:19,100
let me try refresh wait so the data

00:22:15,590 --> 00:22:22,460
actually got saved in the server but

00:22:19,100 --> 00:22:24,050
when you I did not get updated and the

00:22:22,460 --> 00:22:26,059
reason behind it is because we didn't

00:22:24,050 --> 00:22:28,550
really listen to changes right I just

00:22:26,059 --> 00:22:30,470
write stuff to the blockchain the

00:22:28,550 --> 00:22:32,330
correct way to do it would have been to

00:22:30,470 --> 00:22:34,360
add events to my contract so every time

00:22:32,330 --> 00:22:36,800
someone registers in a domain a

00:22:34,360 --> 00:22:38,840
Chancellor's of the main does any

00:22:36,800 --> 00:22:41,330
changes in the database I would like it

00:22:38,840 --> 00:22:42,679
to send an event out and that way inside

00:22:41,330 --> 00:22:44,870
of my front-end I would be able to

00:22:42,679 --> 00:22:47,809
actually listen to events I would say

00:22:44,870 --> 00:22:50,030
the contract at specific address listen

00:22:47,809 --> 00:22:53,809
to all events of a type register or

00:22:50,030 --> 00:22:56,090
update and update my UI so you can

00:22:53,809 --> 00:22:57,920
really work with blockchain without any

00:22:56,090 --> 00:23:00,590
server in the middle every thinking in

00:22:57,920 --> 00:23:06,170
down directly from the browser twine to

00:23:00,590 --> 00:23:10,610
my local node right jump back to the

00:23:06,170 --> 00:23:12,710
presentation for a second so I want to

00:23:10,610 --> 00:23:15,440
be do a quick recap of what we've done

00:23:12,710 --> 00:23:17,630
so we brought the contract over own we

00:23:15,440 --> 00:23:19,790
had our local node running we deployed

00:23:17,630 --> 00:23:21,620
the contract right and we connected it

00:23:19,790 --> 00:23:25,010
successfully with JavaScript to react

00:23:21,620 --> 00:23:27,170
application and while it all worked in

00:23:25,010 --> 00:23:29,150
reality you probably won't be doing

00:23:27,170 --> 00:23:30,080
things exactly like that because because

00:23:29,150 --> 00:23:32,420
there are a few things we have to

00:23:30,080 --> 00:23:35,720
consider so first of all is the whole

00:23:32,420 --> 00:23:38,420
idea of a node now I just went ahead and

00:23:35,720 --> 00:23:40,220
connected to an old laggy locally but in

00:23:38,420 --> 00:23:42,920
real production environment I will have

00:23:40,220 --> 00:23:47,120
to set up a server do a lot of DevOps

00:23:42,920 --> 00:23:48,950
security updates all of a mess so if you

00:23:47,120 --> 00:23:50,809
want to really start running with the we

00:23:48,950 --> 00:23:52,730
theorem you can use a startup like in

00:23:50,809 --> 00:23:55,429
fura that already hosts a number of

00:23:52,730 --> 00:23:58,160
Afyon nodes and completely let me get

00:23:55,429 --> 00:24:00,260
completely for free a crypto kitties for

00:23:58,160 --> 00:24:02,240
us familiar with it we're using in Fura

00:24:00,260 --> 00:24:05,009
as the servers to connect with fear 'i'm

00:24:02,240 --> 00:24:07,690
not running their own servers

00:24:05,009 --> 00:24:10,539
in the affiliate network is also a

00:24:07,690 --> 00:24:12,340
number of different networks we have of

00:24:10,539 --> 00:24:14,470
course a live network where all the real

00:24:12,340 --> 00:24:16,419
money is being changed and real assets

00:24:14,470 --> 00:24:18,309
are moving around there are a number of

00:24:16,419 --> 00:24:20,139
different test networks each one with

00:24:18,309 --> 00:24:22,570
slightly different implementations and

00:24:20,139 --> 00:24:24,279
ideas that we film developers want to

00:24:22,570 --> 00:24:25,809
put out in the world that should

00:24:24,279 --> 00:24:28,299
definitely be your next step before you

00:24:25,809 --> 00:24:30,249
go to real production and of course a

00:24:28,299 --> 00:24:31,899
number of private networks both running

00:24:30,249 --> 00:24:34,059
locally in your machine and in the

00:24:31,899 --> 00:24:37,509
organization if you're doing more and

00:24:34,059 --> 00:24:40,389
you know tests but perhaps the biggest

00:24:37,509 --> 00:24:42,820
thing is what I've done with remix ID I

00:24:40,389 --> 00:24:45,279
wrote down a contract I deployed it

00:24:42,820 --> 00:24:47,499
manually and you can probably imagine

00:24:45,279 --> 00:24:49,960
how dangerous that is if you give

00:24:47,499 --> 00:24:53,230
developers a simple tool to deploy stuff

00:24:49,960 --> 00:24:55,899
to production a burgeoning can change

00:24:53,230 --> 00:24:57,820
tests need to be run so very mixed ID

00:24:55,899 --> 00:24:59,769
was really nice for playing it's not

00:24:57,820 --> 00:25:01,360
really meant for production I was wrong

00:24:59,769 --> 00:25:04,179
again and suggested to use something

00:25:01,360 --> 00:25:06,879
like truffle it's a library that manages

00:25:04,179 --> 00:25:09,340
the whole lifecycle of a film contract

00:25:06,879 --> 00:25:10,899
different versioning testing deployments

00:25:09,340 --> 00:25:13,600
to test environments and production

00:25:10,899 --> 00:25:15,820
environments everything in my place is

00:25:13,600 --> 00:25:19,059
sitting inside gate and very well

00:25:15,820 --> 00:25:20,860
documented and working and also here

00:25:19,059 --> 00:25:24,070
I've been using web 3 which is a

00:25:20,860 --> 00:25:26,019
basically really low-level interface to

00:25:24,070 --> 00:25:27,759
the etherium node and there are a number

00:25:26,019 --> 00:25:30,789
different libraries that try to make it

00:25:27,759 --> 00:25:32,769
more user friendly for developers one of

00:25:30,789 --> 00:25:35,559
them is drizzle which creates something

00:25:32,769 --> 00:25:37,389
very similar to a doc store but that's

00:25:35,559 --> 00:25:39,100
connected to any film node some from

00:25:37,389 --> 00:25:41,080
reactive developers perspective with

00:25:39,100 --> 00:25:44,110
this fuel feel probably almost like at

00:25:41,080 --> 00:25:47,200
home the things just magically working

00:25:44,110 --> 00:25:49,929
and and I'm now really suggested to this

00:25:47,200 --> 00:25:52,269
ganache before ganache if you wanted to

00:25:49,929 --> 00:25:55,419
run a local network you would have to

00:25:52,269 --> 00:25:58,240
download stuff compile stuff run a long

00:25:55,419 --> 00:26:00,610
list of common line commands to generate

00:25:58,240 --> 00:26:02,350
your first database in sync with ganache

00:26:00,610 --> 00:26:04,360
you just download the app double-click

00:26:02,350 --> 00:26:07,869
and you have a network and you can start

00:26:04,360 --> 00:26:10,659
playing around with it so this was like

00:26:07,869 --> 00:26:13,029
a really really really fast recap of a

00:26:10,659 --> 00:26:14,409
theorem my main goal here was to show

00:26:13,029 --> 00:26:16,779
you how easy it is to do it and

00:26:14,409 --> 00:26:18,610
hopefully you will take some time maybe

00:26:16,779 --> 00:26:20,559
over a weekend a few hours

00:26:18,610 --> 00:26:22,960
setting everything up on a Mac takes I

00:26:20,559 --> 00:26:24,490
think like 20 minutes no more and then

00:26:22,960 --> 00:26:26,410
if you spend a few hours on it you'll be

00:26:24,490 --> 00:26:30,220
able to take this simple example and

00:26:26,410 --> 00:26:32,410
ownership and maybe transfers CL can pay

00:26:30,220 --> 00:26:35,110
for domains and really get a feeling for

00:26:32,410 --> 00:26:38,080
the the whole tool how we use react and

00:26:35,110 --> 00:26:40,270
the blockchain and no one really knows

00:26:38,080 --> 00:26:41,170
where abduction is going but I think

00:26:40,270 --> 00:26:43,360
it's really important for us to

00:26:41,170 --> 00:26:46,510
understand just how it works and how to

00:26:43,360 --> 00:26:48,690
work with it because hopefully when it

00:26:46,510 --> 00:26:51,370
blows up again in the good way

00:26:48,690 --> 00:26:54,190
you'll have a chance to work on it and

00:26:51,370 --> 00:26:57,419
it's really fun all right thank you very

00:26:54,190 --> 00:27:04,530
much I hope you enjoyed the talk and

00:26:57,419 --> 00:27:08,410
thank you we have time for questions

00:27:04,530 --> 00:27:12,549
perfect timing thank you buddies we also

00:27:08,410 --> 00:27:17,190
have some questions for you how do you

00:27:12,549 --> 00:27:20,410
fix bugs in a deployed smart project

00:27:17,190 --> 00:27:22,720
it's well there are it's kind of not

00:27:20,410 --> 00:27:24,850
possible there are two a number of

00:27:22,720 --> 00:27:26,559
approaches to it first you can call up

00:27:24,850 --> 00:27:28,390
all the every film developer you know in

00:27:26,559 --> 00:27:31,020
the world and beg them to create a

00:27:28,390 --> 00:27:33,070
special fork which probably won't happen

00:27:31,020 --> 00:27:35,169
but there isn't a different approach

00:27:33,070 --> 00:27:37,090
some people create contracts that are

00:27:35,169 --> 00:27:40,299
actually are breathable so the contract

00:27:37,090 --> 00:27:42,220
itself just points to production

00:27:40,299 --> 00:27:43,990
contract and if the code in your

00:27:42,220 --> 00:27:45,940
production contract is not good you go

00:27:43,990 --> 00:27:48,250
to the original contract and just change

00:27:45,940 --> 00:27:50,440
the pointer Dayton averages so

00:27:48,250 --> 00:27:52,419
theoretically it's possible but then you

00:27:50,440 --> 00:27:55,740
kind of break the whole idea of a film

00:27:52,419 --> 00:27:58,240
because the contracts you put online is

00:27:55,740 --> 00:28:01,120
changeable so then people can't really

00:27:58,240 --> 00:28:03,040
trust your contract so just don't write

00:28:01,120 --> 00:28:07,110
bugs in your code I know what what's the

00:28:03,040 --> 00:28:10,299
problem sounds easy

00:28:07,110 --> 00:28:14,320
what about removing an existing contract

00:28:10,299 --> 00:28:16,390
once it's verified if not how is it fair

00:28:14,320 --> 00:28:21,630
I'm in compliance with relevant EU laws

00:28:16,390 --> 00:28:21,630
on removal whoa what what is that

00:28:22,430 --> 00:28:28,190
if you're the owner you can delete a

00:28:24,950 --> 00:28:29,900
contract again if you took care - if you

00:28:28,190 --> 00:28:32,360
made sure you actually can do it but you

00:28:29,900 --> 00:28:34,130
can delete contacts if you think about

00:28:32,360 --> 00:28:37,130
it the same way I deploy a contract I

00:28:34,130 --> 00:28:39,380
create an account with code and data I

00:28:37,130 --> 00:28:41,000
can delete that same color and data and

00:28:39,380 --> 00:28:44,270
free everything up and removed from

00:28:41,000 --> 00:28:46,820
blockchain the only problem is I cannot

00:28:44,270 --> 00:28:49,220
delete history so you won't see it

00:28:46,820 --> 00:28:50,660
looking at the current state but looking

00:28:49,220 --> 00:28:53,930
back at the blocks that were created

00:28:50,660 --> 00:28:56,870
before it will be there forever so you

00:28:53,930 --> 00:29:01,220
you really can't delete history much

00:28:56,870 --> 00:29:03,680
like you know the real world so not sure

00:29:01,220 --> 00:29:07,700
about the compliance that's not a

00:29:03,680 --> 00:29:10,910
question I really know how to answer can

00:29:07,700 --> 00:29:12,830
a contract call another contract mmm

00:29:10,910 --> 00:29:16,670
that's the next question can i contract

00:29:12,830 --> 00:29:17,840
call another yeah of course so actually

00:29:16,670 --> 00:29:19,730
it's a really good present you can

00:29:17,840 --> 00:29:22,100
create multiple contracts there's a lot

00:29:19,730 --> 00:29:24,650
of libraries and created that you can

00:29:22,100 --> 00:29:26,390
use from inside the contracts itself the

00:29:24,650 --> 00:29:28,580
example I gave in the beginning I can

00:29:26,390 --> 00:29:30,740
create a very simple contract but every

00:29:28,580 --> 00:29:32,990
call to that contract gets proxied to

00:29:30,740 --> 00:29:34,790
another contract so if that second

00:29:32,990 --> 00:29:37,370
contract you have a problem I can just

00:29:34,790 --> 00:29:39,470
fix it deploy a new contract and make my

00:29:37,370 --> 00:29:40,850
proxy go to menu one so you can

00:29:39,470 --> 00:29:43,640
definitely use multiple contracts

00:29:40,850 --> 00:29:46,280
communicate between them but there is

00:29:43,640 --> 00:29:48,380
only one cave adhere most of the bigger

00:29:46,280 --> 00:29:50,210
bugs we've seen in contracts of the

00:29:48,380 --> 00:29:52,450
freedom network or from contracts

00:29:50,210 --> 00:29:55,310
calling other contracts so it's really

00:29:52,450 --> 00:29:58,580
should be super careful doing that but

00:29:55,310 --> 00:30:00,880
it's definitely doable sounds good thank

00:29:58,580 --> 00:30:04,009
you thank you very much

00:30:00,880 --> 00:30:04,009

YouTube URL: https://www.youtube.com/watch?v=pYmAwyaxl5Y


