Title: ReactiveConf 2018 -Tessa Kelly: Typing Towards an Accessible Web
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Typing Towards an Accessible Web

Writing accessible code is hard, but modern web languages can make it easier, and can save developers from mistakes. We can leverage type safety to prevent inaccessible event listeners on divs, we can avoid the dreaded tpyo. In this talk, we'll delve into accessibility on the web, and how type safety on the frontend can guide towards more accessible code.
We'll explore examples using Elm, a functional, type-safe language that compiles to JavaScript, and the Elm package "accessible-html", a helper library encouraging accessible practices. Elm experience is not necessary!
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,340 --> 00:00:20,300
okay so hello I'm Tessa Kelly I'm T

00:00:17,390 --> 00:00:23,000
underscore Kelly 9 on Twitter and test 9

00:00:20,300 --> 00:00:24,860
on github I'm a software engineer at no

00:00:23,000 --> 00:00:26,720
red ink which is an ed tech company

00:00:24,860 --> 00:00:29,360
helping to unlock the potential of the

00:00:26,720 --> 00:00:31,460
next generation of writers I've been

00:00:29,360 --> 00:00:33,620
writing elm code at no red ink for a

00:00:31,460 --> 00:00:36,010
little over 3 years and I've spent about

00:00:33,620 --> 00:00:38,930
two years of that time as the team lead

00:00:36,010 --> 00:00:43,340
and today I'm gonna be talking about

00:00:38,930 --> 00:00:46,700
accessibility so if you'd like to follow

00:00:43,340 --> 00:00:48,320
along on your own computer you're

00:00:46,700 --> 00:00:50,960
welcome to if you follow this link.slide

00:00:48,320 --> 00:00:53,930
comma slash test ok slash technique -

00:00:50,960 --> 00:00:55,489
web slash live there will be code on

00:00:53,930 --> 00:00:58,220
some of the slides and it might be small

00:00:55,489 --> 00:01:00,710
especially if you're in the back and

00:00:58,220 --> 00:01:02,480
I've tried to avoid the center line of

00:01:00,710 --> 00:01:04,280
the TVs there but I might have missed

00:01:02,480 --> 00:01:08,390
something so you might be happier if

00:01:04,280 --> 00:01:11,569
you're looking at your own computer so

00:01:08,390 --> 00:01:12,740
to start off with I'm someone who is

00:01:11,569 --> 00:01:14,569
interested in trying to do the right

00:01:12,740 --> 00:01:17,420
thing I want to make sure that the

00:01:14,569 --> 00:01:18,350
neighbor cat keeps looking up to me and

00:01:17,420 --> 00:01:21,979
I believe that everyone should have

00:01:18,350 --> 00:01:24,709
access to the Internet I tend to be also

00:01:21,979 --> 00:01:26,060
inclined to like following a list of

00:01:24,709 --> 00:01:28,819
rules checking them off and then being

00:01:26,060 --> 00:01:31,749
like ok I'm a good person so that's

00:01:28,819 --> 00:01:33,859
something that really appeals to me but

00:01:31,749 --> 00:01:35,869
even though I cared about doing a good

00:01:33,859 --> 00:01:38,240
job and I was willing to read a lot of

00:01:35,869 --> 00:01:40,490
documentation I wasn't actually really

00:01:38,240 --> 00:01:42,170
writing accessible code and I'm sure

00:01:40,490 --> 00:01:45,319
that many of us here are in the same

00:01:42,170 --> 00:01:47,090
situation we care about people we care

00:01:45,319 --> 00:01:49,700
about doing the right thing we like to

00:01:47,090 --> 00:01:51,679
write quality we want to do well by the

00:01:49,700 --> 00:01:54,009
users that we have and yet there's this

00:01:51,679 --> 00:01:58,099
gap between those desires and what we're

00:01:54,009 --> 00:02:01,310
potentially actually delivering so let's

00:01:58,099 --> 00:02:04,130
do a quick show of hands do you know for

00:02:01,310 --> 00:02:08,090
sure that your application works for

00:02:04,130 --> 00:02:10,590
Mouse users oh man not a lot of

00:02:08,090 --> 00:02:13,050
confidence ok

00:02:10,590 --> 00:02:17,010
so some of us think mouse users can use

00:02:13,050 --> 00:02:19,970
our site people who are primarily

00:02:17,010 --> 00:02:23,489
navigating the site through the keyboard

00:02:19,970 --> 00:02:31,080
okay like five good good

00:02:23,489 --> 00:02:34,170
screenreader users before okay visually

00:02:31,080 --> 00:02:36,140
impaired users including users who will

00:02:34,170 --> 00:02:38,069
want to have like high contrast views

00:02:36,140 --> 00:02:40,709
users with various forms of

00:02:38,069 --> 00:02:42,630
colorblindness users who maybe want to

00:02:40,709 --> 00:02:48,810
be able to blow up the text hurry on

00:02:42,630 --> 00:02:50,850
that two three three and then users who

00:02:48,810 --> 00:02:53,220
need extra time to process material

00:02:50,850 --> 00:02:54,989
users who will be unhappy if there's a

00:02:53,220 --> 00:02:56,220
little ticker like on a new site that

00:02:54,989 --> 00:02:58,370
goes really quickly and they can't slow

00:02:56,220 --> 00:02:58,370
it down

00:02:58,610 --> 00:03:05,610
anyone know okay one and then maybe

00:03:03,810 --> 00:03:07,560
users who can't handle flashing because

00:03:05,610 --> 00:03:12,330
of maybe a medical condition that would

00:03:07,560 --> 00:03:14,549
result everyone's just thinking like

00:03:12,330 --> 00:03:16,530
using that blink really aggressively it

00:03:14,549 --> 00:03:18,930
sounds like okay

00:03:16,530 --> 00:03:20,760
and is anyone confident that their

00:03:18,930 --> 00:03:25,320
application works for all of these user

00:03:20,760 --> 00:03:29,130
groups yay awesome

00:03:25,320 --> 00:03:30,810
and then follow-up question who here

00:03:29,130 --> 00:03:33,569
would like for the application that they

00:03:30,810 --> 00:03:38,730
work on to be useful and usable for all

00:03:33,569 --> 00:03:41,819
of these user groups yeah so I guess I'm

00:03:38,730 --> 00:03:43,380
curious like we want this thing so why

00:03:41,819 --> 00:03:45,980
aren't we there like why aren't our

00:03:43,380 --> 00:03:48,000
applications actually accessible

00:03:45,980 --> 00:03:49,980
personally I'm not really compelled by

00:03:48,000 --> 00:03:52,410
an answer that's like well you ought to

00:03:49,980 --> 00:03:54,750
you should be writing accessible code so

00:03:52,410 --> 00:03:57,389
feel bad that you're not you know it's

00:03:54,750 --> 00:03:59,730
like I feel that we care about doing the

00:03:57,389 --> 00:04:02,400
right thing we care about quality we

00:03:59,730 --> 00:04:04,680
want to do right by our users so if our

00:04:02,400 --> 00:04:07,230
goal is a more accessible internet which

00:04:04,680 --> 00:04:09,600
that's my goal I think I'm more

00:04:07,230 --> 00:04:11,160
interested in asking how can we as

00:04:09,600 --> 00:04:13,709
language communities as groups of

00:04:11,160 --> 00:04:16,650
developers as people make learning about

00:04:13,709 --> 00:04:18,930
accessibility easier and how can we

00:04:16,650 --> 00:04:21,060
build tools to decrease what a person

00:04:18,930 --> 00:04:22,570
actually needs to know to successfully

00:04:21,060 --> 00:04:24,430
write an accessible code

00:04:22,570 --> 00:04:26,800
how can we become more confident in our

00:04:24,430 --> 00:04:30,910
ability to meet the needs of all of our

00:04:26,800 --> 00:04:32,350
various user groups so maybe a good

00:04:30,910 --> 00:04:35,430
starting point or at least a starting

00:04:32,350 --> 00:04:38,100
point I've chosen is working with how we

00:04:35,430 --> 00:04:40,390
make sure that our code works in general

00:04:38,100 --> 00:04:42,940
what are the strategies that we used to

00:04:40,390 --> 00:04:44,890
feel confident enough that our code does

00:04:42,940 --> 00:04:49,630
that we thought it would do to actually

00:04:44,890 --> 00:04:52,060
deliver that code to users so as we talk

00:04:49,630 --> 00:04:55,150
about like what working code is let's

00:04:52,060 --> 00:04:57,640
keep in mind these like things that we

00:04:55,150 --> 00:05:00,940
want to check off first users should be

00:04:57,640 --> 00:05:03,010
able to perceive the content users

00:05:00,940 --> 00:05:06,010
should be able to operate the

00:05:03,010 --> 00:05:09,760
applications UI to navigate the content

00:05:06,010 --> 00:05:10,840
to change the application state users

00:05:09,760 --> 00:05:14,230
should be able to understand the

00:05:10,840 --> 00:05:17,190
interface and finally the implementation

00:05:14,230 --> 00:05:19,030
should be robust error-free up-to-date

00:05:17,190 --> 00:05:20,890
consistent with user agent

00:05:19,030 --> 00:05:25,140
implementations it's pretty much like

00:05:20,890 --> 00:05:25,140
can I use calm says it's all good

00:05:25,350 --> 00:05:30,070
so maybe we don't know for sure that our

00:05:27,880 --> 00:05:32,200
code meets all those standards but we

00:05:30,070 --> 00:05:33,550
still follow some strategies to be

00:05:32,200 --> 00:05:35,890
confident enough to put our code in the

00:05:33,550 --> 00:05:37,210
production I can tell because we do put

00:05:35,890 --> 00:05:40,540
our code into production so there's like

00:05:37,210 --> 00:05:42,640
some amount of confidence there so maybe

00:05:40,540 --> 00:05:44,080
we write unit tests maybe we check that

00:05:42,640 --> 00:05:47,200
small itty-bitty little sections of the

00:05:44,080 --> 00:05:49,300
code do what we think they do maybe we

00:05:47,200 --> 00:05:51,280
write integration tests we say here's

00:05:49,300 --> 00:05:52,690
our next date are you just gonna do some

00:05:51,280 --> 00:05:54,540
stuff and they're gonna end up here

00:05:52,690 --> 00:05:57,120
amazing it worked

00:05:54,540 --> 00:05:59,650
maybe we write visual regression tests

00:05:57,120 --> 00:06:01,390
yeah check a state you take a picture of

00:05:59,650 --> 00:06:02,860
the state and then we check the state

00:06:01,390 --> 00:06:05,920
again or I like to the picture change no

00:06:02,860 --> 00:06:08,320
good ok cool maybe we use static

00:06:05,920 --> 00:06:09,880
analysis tooling of some kind maybe we

00:06:08,320 --> 00:06:12,670
have a compiler or like type checking or

00:06:09,880 --> 00:06:16,180
something like get post hook dealio that

00:06:12,670 --> 00:06:17,500
does something neat for us maybe we just

00:06:16,180 --> 00:06:20,560
run the code locally on around machine

00:06:17,500 --> 00:06:24,070
sir like yeah that's good enough maybe

00:06:20,560 --> 00:06:25,150
we hire professionals to check it maybe

00:06:24,070 --> 00:06:27,520
we don't really check it out carefully

00:06:25,150 --> 00:06:28,070
at all but we watch to see what happens

00:06:27,520 --> 00:06:34,970
and

00:06:28,070 --> 00:06:37,190
after the fact but for whom do we know

00:06:34,970 --> 00:06:41,000
that our code works once we have this

00:06:37,190 --> 00:06:43,220
metric of confidence for whom is our

00:06:41,000 --> 00:06:48,800
code foreseeable operable understandable

00:06:43,220 --> 00:06:51,410
and robust so let's see if we can apply

00:06:48,800 --> 00:06:53,750
some of the strategies that I just

00:06:51,410 --> 00:06:57,620
mentioned for deploying working code to

00:06:53,750 --> 00:06:59,240
benefit all of our potential users I'm

00:06:57,620 --> 00:07:01,520
gonna focus in on a handful of

00:06:59,240 --> 00:07:03,200
strategies here but that's not meant to

00:07:01,520 --> 00:07:05,420
imply anything in particular about the

00:07:03,200 --> 00:07:07,700
strategies that I don't really dive in

00:07:05,420 --> 00:07:10,130
on there's definitely work to be done

00:07:07,700 --> 00:07:12,170
there and there's definitely neat

00:07:10,130 --> 00:07:16,610
applications of those strategies in this

00:07:12,170 --> 00:07:17,930
space as well so let's start by

00:07:16,610 --> 00:07:21,740
considering what we do with code that's

00:07:17,930 --> 00:07:24,110
already in production we probably log

00:07:21,740 --> 00:07:27,080
errors and we probably address those

00:07:24,110 --> 00:07:29,990
that impact many users on the browsers

00:07:27,080 --> 00:07:30,350
that we support maybe we have a support

00:07:29,990 --> 00:07:33,920
team

00:07:30,350 --> 00:07:36,950
fielding areas of confusion operability

00:07:33,920 --> 00:07:38,930
questions if you will and managing user

00:07:36,950 --> 00:07:43,400
submitted bug reports about the

00:07:38,930 --> 00:07:45,290
robustness of our application but what

00:07:43,400 --> 00:07:49,760
do we actually do with those support

00:07:45,290 --> 00:07:50,960
requests once we have them if we already

00:07:49,760 --> 00:07:53,680
know that our application is not

00:07:50,960 --> 00:07:56,390
accessible and we get a support request

00:07:53,680 --> 00:07:59,300
regarding an accessibility feature how

00:07:56,390 --> 00:08:02,150
do we actually prioritize it do we

00:07:59,300 --> 00:08:05,420
ignore accessibility requests due to the

00:08:02,150 --> 00:08:07,700
volume of those requests I guess my

00:08:05,420 --> 00:08:09,920
point here is if we force segments of

00:08:07,700 --> 00:08:12,650
users from our app due to a lack of

00:08:09,920 --> 00:08:13,850
accessibility then of course the

00:08:12,650 --> 00:08:15,560
percentage of users reporting

00:08:13,850 --> 00:08:16,760
accessibility issues users who care

00:08:15,560 --> 00:08:17,030
enough about our app to want it to be

00:08:16,760 --> 00:08:21,070
better

00:08:17,030 --> 00:08:26,120
it'll be low and it doesn't reflect the

00:08:21,070 --> 00:08:27,800
value financially legally or morally of

00:08:26,120 --> 00:08:32,240
actually addressing these accessibility

00:08:27,800 --> 00:08:33,440
issues that being said prioritization is

00:08:32,240 --> 00:08:36,140
probably outside of that job description

00:08:33,440 --> 00:08:38,590
and most of us here so let's go on back

00:08:36,140 --> 00:08:38,590
to our list

00:08:39,070 --> 00:08:44,029
so maybe we hierarchy way folks maybe we

00:08:42,080 --> 00:08:45,470
have a QA team that checks at our code

00:08:44,029 --> 00:08:48,710
does what we want at a bunch of

00:08:45,470 --> 00:08:50,600
different browsers can that QA team also

00:08:48,710 --> 00:08:53,510
check that our app is perceivable

00:08:50,600 --> 00:08:55,760
operable and understandable by screwing

00:08:53,510 --> 00:09:01,580
software and for keyboard-only users or

00:08:55,760 --> 00:09:03,620
for others maybe if you or folks on your

00:09:01,580 --> 00:09:05,630
QA team have recommendations for

00:09:03,620 --> 00:09:06,980
trainings on this subject or resources

00:09:05,630 --> 00:09:09,140
or getting started guides or anything

00:09:06,980 --> 00:09:12,650
like that feel free to add me on Twitter

00:09:09,140 --> 00:09:15,380
and I will very very happily retweet any

00:09:12,650 --> 00:09:17,750
of your recommendations this is another

00:09:15,380 --> 00:09:19,640
area though that's likely outside the

00:09:17,750 --> 00:09:21,170
domain and many of us gathered here so

00:09:19,640 --> 00:09:26,360
let's move on from QA and head back to

00:09:21,170 --> 00:09:27,770
our list oh darn I moved I moved to the

00:09:26,360 --> 00:09:33,010
white space that there would be a little

00:09:27,770 --> 00:09:33,010
slot and it's I failed you all I'm sorry

00:09:33,070 --> 00:09:37,790
what's highlighted here though you can

00:09:34,940 --> 00:09:40,930
see integration tests so let's focus on

00:09:37,790 --> 00:09:43,220
integration tests so for this category

00:09:40,930 --> 00:09:45,770
I'm gonna be showing some example cook

00:09:43,220 --> 00:09:47,900
it's gonna be written in Ruby with our

00:09:45,770 --> 00:09:50,810
spec and copy Barra but the general

00:09:47,900 --> 00:09:52,400
concepts applies to if not any

00:09:50,810 --> 00:09:55,640
integration testing framework at least

00:09:52,400 --> 00:09:58,100
many integration testing frameworks so

00:09:55,640 --> 00:10:00,770
again if you'd like to follow along on

00:09:58,100 --> 00:10:04,370
your own computer go to slides comm

00:10:00,770 --> 00:10:11,540
slash tests okay - typing - web slash

00:10:04,370 --> 00:10:15,230
live ok so when we write integration

00:10:11,540 --> 00:10:19,160
tests what does our code look like does

00:10:15,230 --> 00:10:21,170
it look like this so here we're testing

00:10:19,160 --> 00:10:23,450
that something on the page can be

00:10:21,170 --> 00:10:25,339
toggled open and closed the first thing

00:10:23,450 --> 00:10:28,550
we do is find an element with the ID

00:10:25,339 --> 00:10:30,950
login and we click that element then we

00:10:28,550 --> 00:10:33,080
assert that the page has a certain class

00:10:30,950 --> 00:10:36,410
on it here we're asserting that the

00:10:33,080 --> 00:10:38,180
login modal form classes present we find

00:10:36,410 --> 00:10:40,070
the login element again we click it and

00:10:38,180 --> 00:10:42,580
then we expect for the login modal form

00:10:40,070 --> 00:10:44,450
class to have disappeared from the page

00:10:42,580 --> 00:10:47,150
so this is fine

00:10:44,450 --> 00:10:48,820
it definitely tests something but

00:10:47,150 --> 00:10:51,320
consider this test written another way

00:10:48,820 --> 00:10:52,250
so this test is also called can be

00:10:51,320 --> 00:10:55,220
toggled open and closed

00:10:52,250 --> 00:10:57,860
but here we click on something called

00:10:55,220 --> 00:11:00,530
login and then we expect the page to

00:10:57,860 --> 00:11:03,520
have content of email or username and

00:11:00,530 --> 00:11:07,460
password then we click on the log in

00:11:03,520 --> 00:11:09,110
thing again then we expect that this

00:11:07,460 --> 00:11:14,150
content email our username and password

00:11:09,110 --> 00:11:16,220
have disappeared so this test the second

00:11:14,150 --> 00:11:18,260
version of the test actually test the

00:11:16,220 --> 00:11:20,930
content that the users care about not

00:11:18,260 --> 00:11:24,110
the classes and ID's that our users user

00:11:20,930 --> 00:11:26,270
agents may or may not care about this

00:11:24,110 --> 00:11:28,910
version of the test better mimics real

00:11:26,270 --> 00:11:30,860
user flow real user behavior which is

00:11:28,910 --> 00:11:32,480
generally what we want to be testing

00:11:30,860 --> 00:11:34,250
when we're writing an integration test

00:11:32,480 --> 00:11:39,260
when we're testing the functionality of

00:11:34,250 --> 00:11:40,910
the user flow so what is this version of

00:11:39,260 --> 00:11:42,890
the test actually better for all of our

00:11:40,910 --> 00:11:47,570
users and not just for a point and click

00:11:42,890 --> 00:11:49,580
users in particular well it is if we

00:11:47,570 --> 00:11:52,390
actually run this test this is the

00:11:49,580 --> 00:11:54,500
result we get it says failure error

00:11:52,390 --> 00:11:57,680
tried to click on something called log

00:11:54,500 --> 00:11:59,810
in but it got coffee bar could not find

00:11:57,680 --> 00:12:04,540
the element specifically it was unable

00:11:59,810 --> 00:12:07,220
to find the link or button login so oh

00:12:04,540 --> 00:12:10,339
it looks like what we were clicking on

00:12:07,220 --> 00:12:12,980
as the by the ID login wasn't actually a

00:12:10,339 --> 00:12:15,800
button it wasn't actually a link this is

00:12:12,980 --> 00:12:17,360
probably a clickable div or just a

00:12:15,800 --> 00:12:19,280
classic example of an accessible code

00:12:17,360 --> 00:12:24,440
that will only work for a subset of our

00:12:19,280 --> 00:12:27,200
users so what we've seen here is a copy

00:12:24,440 --> 00:12:29,660
bars API encourages test authors to

00:12:27,200 --> 00:12:32,839
write semantic HTML to write accessible

00:12:29,660 --> 00:12:34,490
code if we do choose to write semantic

00:12:32,839 --> 00:12:36,830
HTML it will make writing our

00:12:34,490 --> 00:12:39,890
integration test easier and the result

00:12:36,830 --> 00:12:42,710
will also be nice to read tests this is

00:12:39,890 --> 00:12:44,720
pretty cool but this integration test by

00:12:42,710 --> 00:12:47,210
itself is not actually sufficient to our

00:12:44,720 --> 00:12:49,610
needs all we really know is that some

00:12:47,210 --> 00:12:52,880
content appeared on the page and then

00:12:49,610 --> 00:12:55,370
disappeared from the page on a click but

00:12:52,880 --> 00:12:57,530
we don't know whether we successfully

00:12:55,370 --> 00:13:00,110
handled the user's focus as we toggle

00:12:57,530 --> 00:13:01,880
this item open we don't know whether the

00:13:00,110 --> 00:13:04,610
contrast is sufficient to make the

00:13:01,880 --> 00:13:05,820
content readable and useful at this

00:13:04,610 --> 00:13:09,870
point we can't be confident

00:13:05,820 --> 00:13:11,940
haven't missed something so let's write

00:13:09,870 --> 00:13:14,400
integration tests as well as we can and

00:13:11,940 --> 00:13:16,380
if we happen to write testing frameworks

00:13:14,400 --> 00:13:18,510
let's draw some inspiration from what

00:13:16,380 --> 00:13:20,820
copy bara has done here but let's also

00:13:18,510 --> 00:13:25,350
return to our list of strategies and see

00:13:20,820 --> 00:13:28,380
what else we can do so static analysis

00:13:25,350 --> 00:13:30,030
tools static analysis tooling is the

00:13:28,380 --> 00:13:31,590
area that I'm personally most excited

00:13:30,030 --> 00:13:32,940
about and where I see the most

00:13:31,590 --> 00:13:36,060
opportunities for innovation and

00:13:32,940 --> 00:13:37,380
improvement I'm gonna be talking about

00:13:36,060 --> 00:13:40,530
the tools that I'm most familiar with

00:13:37,380 --> 00:13:42,960
here but this isn't meant to be like a

00:13:40,530 --> 00:13:44,460
pitch of those tools my hope is that

00:13:42,960 --> 00:13:47,610
you'll be excited about some of the

00:13:44,460 --> 00:13:49,350
ideas that are used in those tools and

00:13:47,610 --> 00:13:50,880
that maybe you'll look around for or

00:13:49,350 --> 00:13:52,440
create something that fills the same

00:13:50,880 --> 00:13:58,020
hole in whatever stacks you happen to

00:13:52,440 --> 00:13:59,910
work with so which tools at no hiddink

00:13:58,020 --> 00:14:03,270
almost our entire front end is written

00:13:59,910 --> 00:14:04,670
an L LM is a functional strongly typed

00:14:03,270 --> 00:14:07,950
language that compels to JavaScript

00:14:04,670 --> 00:14:09,750
there are plenty of talks on the

00:14:07,950 --> 00:14:12,510
benefits of album so I'm definitely not

00:14:09,750 --> 00:14:14,760
gonna try to sell you here this list of

00:14:12,510 --> 00:14:16,350
benefits no runtime exceptions great

00:14:14,760 --> 00:14:19,200
performance and for semantic versioning

00:14:16,350 --> 00:14:20,760
small assets JavaScript Interop or just

00:14:19,200 --> 00:14:22,080
those highlighted on the main home site

00:14:20,760 --> 00:14:25,170
so you can read more about those there

00:14:22,080 --> 00:14:27,180
if you're interested the things that

00:14:25,170 --> 00:14:30,450
like to stand out for me from an

00:14:27,180 --> 00:14:33,740
accessibility standpoint and just from

00:14:30,450 --> 00:14:36,870
like a personal standpoint are these

00:14:33,740 --> 00:14:39,000
runtime exceptions and this item I've

00:14:36,870 --> 00:14:43,470
added makes it harder to read invalid

00:14:39,000 --> 00:14:45,150
HTML so what do I mean here the own

00:14:43,470 --> 00:14:46,980
compiler checks that the code that I

00:14:45,150 --> 00:14:50,040
write will work before I rely on that

00:14:46,980 --> 00:14:52,920
code to work this is great because I

00:14:50,040 --> 00:14:54,750
write mistakes and the elf compiler can

00:14:52,920 --> 00:14:58,500
help me to avoid putting those mistakes

00:14:54,750 --> 00:15:00,780
in front of the users so as I write on

00:14:58,500 --> 00:15:03,150
code I get to be quite confident that

00:15:00,780 --> 00:15:05,370
whatever I give to users will actually

00:15:03,150 --> 00:15:07,220
work for at least the point-and-click

00:15:05,370 --> 00:15:11,370
users

00:15:07,220 --> 00:15:13,740
okay so just brief this is what Elm code

00:15:11,370 --> 00:15:15,510
looks like so here we're importing the

00:15:13,740 --> 00:15:18,310
HTML library this is how we actually

00:15:15,510 --> 00:15:20,830
write HTML we're making a view

00:15:18,310 --> 00:15:23,430
we've created a div and we've added some

00:15:20,830 --> 00:15:25,900
text on specifically hello reactive con

00:15:23,430 --> 00:15:28,270
if I run this code if I try to compile

00:15:25,900 --> 00:15:31,690
this code uh-oh

00:15:28,270 --> 00:15:34,600
I cannot find a TX e T variable that's

00:15:31,690 --> 00:15:36,640
because I have written a typo here

00:15:34,600 --> 00:15:39,280
so um compiler offers some suggestions

00:15:36,640 --> 00:15:43,570
including text which is actually what I

00:15:39,280 --> 00:15:45,520
want here to create a text node or if I

00:15:43,570 --> 00:15:48,790
make a different mistake like leaving

00:15:45,520 --> 00:15:52,360
off a closing bracket when I run the

00:15:48,790 --> 00:15:54,910
compiler it'll suggest that this code

00:15:52,360 --> 00:15:58,120
was not possible and maybe I should have

00:15:54,910 --> 00:16:01,540
included the end of that list that's

00:15:58,120 --> 00:16:03,910
pretty cool and then kind of continuing

00:16:01,540 --> 00:16:06,310
with some elements ample code we can

00:16:03,910 --> 00:16:08,200
make our view interactive so I've hidden

00:16:06,310 --> 00:16:11,920
a little bit of kind of irrelevant to

00:16:08,200 --> 00:16:13,870
this talks set up here the important

00:16:11,920 --> 00:16:16,720
things to note here we're importing the

00:16:13,870 --> 00:16:18,700
HTML events module and we're exposing

00:16:16,720 --> 00:16:21,370
the onclick helper the onclick helper is

00:16:18,700 --> 00:16:23,440
gonna help us to add a quick listener so

00:16:21,370 --> 00:16:26,290
we've created an attribute and then when

00:16:23,440 --> 00:16:29,350
a user actually clicks when we hear that

00:16:26,290 --> 00:16:31,000
click we had some exclamation points so

00:16:29,350 --> 00:16:33,280
seeing this code reading about mouse

00:16:31,000 --> 00:16:36,310
over do some clicks and we'll get some

00:16:33,280 --> 00:16:42,010
more exclamation points on this on this

00:16:36,310 --> 00:16:45,010
element so that's great oh wait that's a

00:16:42,010 --> 00:16:46,900
dude that's a div with an event listener

00:16:45,010 --> 00:16:49,360
on it it's really easy to do and it

00:16:46,900 --> 00:16:51,610
wasn't marked as invalid whatever I user

00:16:49,360 --> 00:16:55,000
clicks on the div we add exclamation

00:16:51,610 --> 00:16:58,030
marks so this feels more than one of our

00:16:55,000 --> 00:17:00,520
goals for working code it's not obvious

00:16:58,030 --> 00:17:02,170
to any of our users that they might

00:17:00,520 --> 00:17:05,260
click the hello reactive conscious

00:17:02,170 --> 00:17:06,220
message it just looks like text it

00:17:05,260 --> 00:17:07,660
doesn't look like a button it doesn't

00:17:06,220 --> 00:17:12,189
look like a link it's not perceivably

00:17:07,660 --> 00:17:14,290
interactive keyboard users can't tab to

00:17:12,189 --> 00:17:18,040
the element at all so they they can't

00:17:14,290 --> 00:17:21,640
operate this view and the quickl div has

00:17:18,040 --> 00:17:24,610
gotten us once again so how can we avoid

00:17:21,640 --> 00:17:27,760
this mistake it would be really nice if

00:17:24,610 --> 00:17:30,680
we got an error message like we got for

00:17:27,760 --> 00:17:33,080
the text type like like we got for the

00:17:30,680 --> 00:17:34,220
in close bracket that told us that

00:17:33,080 --> 00:17:36,500
something was wrong with the code that

00:17:34,220 --> 00:17:37,880
we were writing that we'd made of you

00:17:36,500 --> 00:17:43,130
with a clickable tip on it when we

00:17:37,880 --> 00:17:46,670
definitely didn't intend to we can have

00:17:43,130 --> 00:17:47,840
that because we're using Elm because

00:17:46,670 --> 00:17:50,030
we're doing checks before the code is

00:17:47,840 --> 00:17:52,550
live we can add whatever verifications

00:17:50,030 --> 00:17:56,540
that we want by building another layer

00:17:52,550 --> 00:17:58,610
between the code that we want between

00:17:56,540 --> 00:18:00,680
the code that we write and the code that

00:17:58,610 --> 00:18:02,930
the user agent actually uses we can to

00:18:00,680 --> 00:18:06,500
find whatever API we want we can decide

00:18:02,930 --> 00:18:10,100
what is and isn't valid for that API so

00:18:06,500 --> 00:18:12,260
fundamentally inaccessible code doesn't

00:18:10,100 --> 00:18:14,540
need to compile if we write code that's

00:18:12,260 --> 00:18:16,010
not accessible we don't have to allow

00:18:14,540 --> 00:18:20,600
ourselves to put it in front of our

00:18:16,010 --> 00:18:22,340
users so I've explored the initial edges

00:18:20,600 --> 00:18:25,580
of this idea with an out package called

00:18:22,340 --> 00:18:27,290
accessible HTML the library seeks to

00:18:25,580 --> 00:18:30,830
make it easier to write accessible code

00:18:27,290 --> 00:18:32,030
and make it a little bit harder to fall

00:18:30,830 --> 00:18:36,290
into some of the common accessibility

00:18:32,030 --> 00:18:38,090
pitfalls like the clickable div if you

00:18:36,290 --> 00:18:39,680
have an elm project that's already set

00:18:38,090 --> 00:18:41,810
up you can install this package by

00:18:39,680 --> 00:18:45,290
running elements tall task 9 slash

00:18:41,810 --> 00:18:47,600
accessible - HTML if not and you're

00:18:45,290 --> 00:18:49,100
interested in elm find me and I will

00:18:47,600 --> 00:18:53,870
direct you Susan getting started with

00:18:49,100 --> 00:18:55,610
elm resources ok so the bulk of the

00:18:53,870 --> 00:18:58,220
library is based off the elm HTML

00:18:55,610 --> 00:19:00,500
library so here we have some code again

00:18:58,220 --> 00:19:01,460
we import the HTML library we expose

00:19:00,500 --> 00:19:07,490
some things from it

00:19:01,460 --> 00:19:10,550
we make a div with some text hello again

00:19:07,490 --> 00:19:13,160
if we wanted to use the accessible HTML

00:19:10,550 --> 00:19:15,860
library it would look very similar we

00:19:13,160 --> 00:19:17,390
would import a different we would import

00:19:15,860 --> 00:19:20,330
accessibility or rather than importing

00:19:17,390 --> 00:19:22,430
tml but the exposed items have the same

00:19:20,330 --> 00:19:25,730
names and the code itself actually looks

00:19:22,430 --> 00:19:26,510
quite similar so if you happen to have

00:19:25,730 --> 00:19:28,280
used elm

00:19:26,510 --> 00:19:30,740
you'll notice that the API is quite

00:19:28,280 --> 00:19:35,450
quite familiar and quite similar between

00:19:30,740 --> 00:19:36,710
the two the key difference is in the the

00:19:35,450 --> 00:19:39,590
types of the functions that we're

00:19:36,710 --> 00:19:41,720
working with the div from the HTML

00:19:39,590 --> 00:19:43,750
library allows event listeners as astra

00:19:41,720 --> 00:19:49,090
buttes the differently accessible

00:19:43,750 --> 00:19:53,500
Shema library does not so going back to

00:19:49,090 --> 00:19:54,460
our code with our clickable div this is

00:19:53,500 --> 00:19:56,290
the code that we were looking at before

00:19:54,460 --> 00:19:58,870
that added the extra exclamation marks

00:19:56,290 --> 00:20:01,180
when these are clicked on it if we

00:19:58,870 --> 00:20:06,180
import the accessible HTML library

00:20:01,180 --> 00:20:09,700
instead rather than the LM HTML library

00:20:06,180 --> 00:20:14,920
this code will no longer compile we'll

00:20:09,700 --> 00:20:18,520
get air it'll say Dib needs the argument

00:20:14,920 --> 00:20:21,220
to never have event listeners this is a

00:20:18,520 --> 00:20:24,070
one-line change and we've added a static

00:20:21,220 --> 00:20:29,830
check against a really common kind of an

00:20:24,070 --> 00:20:32,800
accessible code so it's pretty cool so

00:20:29,830 --> 00:20:35,580
the accessible HTML library gives you

00:20:32,800 --> 00:20:37,390
guaranteed dibs without event listeners

00:20:35,580 --> 00:20:39,640
except for when you're really sure that

00:20:37,390 --> 00:20:42,690
you want them there are escape hatches

00:20:39,640 --> 00:20:45,100
you can make custom custom HTML

00:20:42,690 --> 00:20:47,140
fanciness if you want to and it's meant

00:20:45,100 --> 00:20:51,100
to be used in concert with you with the

00:20:47,140 --> 00:20:52,540
foundational almeida tml library but

00:20:51,100 --> 00:20:56,110
when would you actually want it

00:20:52,540 --> 00:20:58,060
clickable div before trying to answer

00:20:56,110 --> 00:21:00,630
that question let's take a look at some

00:20:58,060 --> 00:21:03,010
of our alternatives to the clickable div

00:21:00,630 --> 00:21:04,480
okay so first off we've got our roots

00:21:03,010 --> 00:21:06,190
and meta elements I've got tons of stuff

00:21:04,480 --> 00:21:08,860
people don't usually add event listeners

00:21:06,190 --> 00:21:11,620
to these we've got a structure and

00:21:08,860 --> 00:21:13,450
layout item that's ever tagged so header

00:21:11,620 --> 00:21:17,440
nav main a side section article some

00:21:13,450 --> 00:21:19,510
header there's footer lots of stuff text

00:21:17,440 --> 00:21:21,010
elements these are where you're more

00:21:19,510 --> 00:21:22,630
likely to run into some clickable stuff

00:21:21,010 --> 00:21:25,510
that shouldn't be clickable like

00:21:22,630 --> 00:21:30,570
blockquote I don't need a event listener

00:21:25,510 --> 00:21:34,930
on that divs are definitely an offender

00:21:30,570 --> 00:21:38,230
you can also embed content like script

00:21:34,930 --> 00:21:41,770
tags hello JavaScript and we could have

00:21:38,230 --> 00:21:44,500
a table so lots of options so far and

00:21:41,770 --> 00:21:46,660
then continuing there are interactive

00:21:44,500 --> 00:21:48,490
elements so the details summary is

00:21:46,660 --> 00:21:51,370
little toggle maybe we have a dialogue

00:21:48,490 --> 00:21:52,750
maybe we have a menu maybe we've got a

00:21:51,370 --> 00:21:54,610
form

00:21:52,750 --> 00:21:56,890
there's a lot of different options here

00:21:54,610 --> 00:21:59,200
inputs outputs text areas buttons

00:21:56,890 --> 00:22:00,809
dropdowns a little progress bar that

00:21:59,200 --> 00:22:04,120
tells you how your request is doing

00:22:00,809 --> 00:22:06,669
field sets lots of stuff just looking at

00:22:04,120 --> 00:22:09,549
one of these the different types of HTML

00:22:06,669 --> 00:22:11,200
inputs it's like so varied button check

00:22:09,549 --> 00:22:12,940
box color date date/time local email

00:22:11,200 --> 00:22:14,710
file hidden image month number password

00:22:12,940 --> 00:22:16,450
radio re-entry set search submit

00:22:14,710 --> 00:22:18,159
telephone text time your a week so

00:22:16,450 --> 00:22:19,539
that's pretty good right like that's a

00:22:18,159 --> 00:22:20,860
pretty solid list of things that you

00:22:19,539 --> 00:22:24,870
could maybe use instead of a clickable

00:22:20,860 --> 00:22:27,100
div so one would you actually want one

00:22:24,870 --> 00:22:28,240
maybe you're making a fancy custom

00:22:27,100 --> 00:22:32,140
element maybe if you're making like a

00:22:28,240 --> 00:22:33,340
tabular view but probably my guess is

00:22:32,140 --> 00:22:36,549
that it's because you don't realize what

00:22:33,340 --> 00:22:38,049
HTML elements are actually available so

00:22:36,549 --> 00:22:40,299
recently I've been playing with building

00:22:38,049 --> 00:22:41,230
a robust color library because I have

00:22:40,299 --> 00:22:43,360
interested in trying to generate

00:22:41,230 --> 00:22:46,299
accessible color palettes and managing

00:22:43,360 --> 00:22:48,070
custom color palettes for users and I

00:22:46,299 --> 00:22:49,929
built some like example uses of the

00:22:48,070 --> 00:22:52,270
library and the feedback that I got was

00:22:49,929 --> 00:22:54,010
this should be interactive and I was

00:22:52,270 --> 00:22:56,500
like ok cool I'll just make a color

00:22:54,010 --> 00:22:58,059
picker so I did and I've looked at lots

00:22:56,500 --> 00:22:59,530
of examples of accessible sliders on the

00:22:58,059 --> 00:23:02,860
internet and I was like a keyboard

00:22:59,530 --> 00:23:04,900
navigability killing it and then I was

00:23:02,860 --> 00:23:09,580
reminded of the existence of the color

00:23:04,900 --> 00:23:11,940
type input and the range type input this

00:23:09,580 --> 00:23:14,919
is what the color type input looks like

00:23:11,940 --> 00:23:16,510
it's not supported in all browsers but

00:23:14,919 --> 00:23:19,240
given my purposes it was exactly what I

00:23:16,510 --> 00:23:20,350
should have used and the range type

00:23:19,240 --> 00:23:23,260
input would also have been a pretty

00:23:20,350 --> 00:23:26,230
reasonable choice so my theory is that a

00:23:23,260 --> 00:23:29,260
lot of the time when we want a clickable

00:23:26,230 --> 00:23:32,220
data what we really want is to know

00:23:29,260 --> 00:23:36,340
about some of these other alternatives

00:23:32,220 --> 00:23:39,309
so my hope is that at this point you're

00:23:36,340 --> 00:23:41,409
convinced by a handful of points one you

00:23:39,309 --> 00:23:44,100
can improve accessibility on the web to

00:23:41,409 --> 00:23:46,630
integration tests are a good a good idea

00:23:44,100 --> 00:23:49,270
3 maybe that type checking has some

00:23:46,630 --> 00:23:53,320
pretty neat applications and that's all

00:23:49,270 --> 00:23:58,870
nice but do we know that our code works

00:23:53,320 --> 00:24:00,789
for all users not yet we don't have much

00:23:58,870 --> 00:24:03,280
time remaining at all so let's go

00:24:00,789 --> 00:24:04,780
through one final example of a small API

00:24:03,280 --> 00:24:06,660
change that can help guide us towards

00:24:04,780 --> 00:24:08,860
accessibility

00:24:06,660 --> 00:24:11,050
so this presentation has you might have

00:24:08,860 --> 00:24:13,150
noticed included a lot of different

00:24:11,050 --> 00:24:15,910
images intended to supplement the

00:24:13,150 --> 00:24:17,980
content or suggests a mood or idea some

00:24:15,910 --> 00:24:20,310
of the images though we're like totally

00:24:17,980 --> 00:24:23,110
just decorative it's like this flower

00:24:20,310 --> 00:24:25,630
it's kind of pretty it kind of matches

00:24:23,110 --> 00:24:27,240
the color scheme a little bit but it

00:24:25,630 --> 00:24:29,710
doesn't really matter this a flower and

00:24:27,240 --> 00:24:32,830
it doesn't really matter that it's here

00:24:29,710 --> 00:24:36,400
at all so how how might we add this

00:24:32,830 --> 00:24:37,750
decorative image to a web page maybe we

00:24:36,400 --> 00:24:41,770
do something like this we add an image

00:24:37,750 --> 00:24:44,500
an image tag with a source and we're

00:24:41,770 --> 00:24:46,000
like we want our users to have excellent

00:24:44,500 --> 00:24:49,290
fresh images but the cache invalidation

00:24:46,000 --> 00:24:52,750
so we've got this long all cloud for any

00:24:49,290 --> 00:24:56,140
source so this is nice start users are

00:24:52,750 --> 00:24:58,810
like yeah cool flower but right now

00:24:56,140 --> 00:25:00,790
users who are accessing our application

00:24:58,810 --> 00:25:03,940
through a screen reader will have this

00:25:00,790 --> 00:25:08,290
entire file name read to them like

00:25:03,940 --> 00:25:11,110
assets / pretty - flower - Oh F or a

00:25:08,290 --> 00:25:12,760
yeah so that's not great and this is

00:25:11,110 --> 00:25:15,400
because in the absence of alt text

00:25:12,760 --> 00:25:16,600
screen readers will still try to explain

00:25:15,400 --> 00:25:19,000
that image they'll still try to say this

00:25:16,600 --> 00:25:22,420
is what's here and they'll use this

00:25:19,000 --> 00:25:27,400
source before that so how can we resolve

00:25:22,420 --> 00:25:28,510
this if we add an empty alt text what

00:25:27,400 --> 00:25:29,830
I've noticed though is that I have a

00:25:28,510 --> 00:25:35,350
hard time remembering to add an empty

00:25:29,830 --> 00:25:37,330
alt text so kind of a attempt at a

00:25:35,350 --> 00:25:39,760
solution of this that the accessible

00:25:37,330 --> 00:25:42,940
HTML library includes a decorative image

00:25:39,760 --> 00:25:46,690
function that sets the alternate text to

00:25:42,940 --> 00:25:49,270
an empty string for you so the idea here

00:25:46,690 --> 00:25:51,010
is that by changing the API to include

00:25:49,270 --> 00:25:53,290
the purpose of the image that it is

00:25:51,010 --> 00:25:55,000
decorative we don't have to remember to

00:25:53,290 --> 00:25:57,160
include an empty alt text when we add an

00:25:55,000 --> 00:26:00,310
image and we're forced to be explicit

00:25:57,160 --> 00:26:03,910
about our intent and as a result to

00:26:00,310 --> 00:26:06,970
hopefully better serve our users if we

00:26:03,910 --> 00:26:09,580
wanted our users to know all the other

00:26:06,970 --> 00:26:11,560
details of our content all the details

00:26:09,580 --> 00:26:13,780
of our image we could use that image

00:26:11,560 --> 00:26:17,140
function which requires us to actually

00:26:13,780 --> 00:26:19,640
include alternate text so we can

00:26:17,140 --> 00:26:21,890
describe the image as being of a piano

00:26:19,640 --> 00:26:24,430
broken beyond repair sitting in a

00:26:21,890 --> 00:26:26,930
driveway well maybe we could describe

00:26:24,430 --> 00:26:28,520
some pieces of wood that have been kind

00:26:26,930 --> 00:26:31,730
of styled to look like a piano but will

00:26:28,520 --> 00:26:34,010
never actually function as a piano the

00:26:31,730 --> 00:26:38,570
piano is that div that looks like a

00:26:34,010 --> 00:26:40,070
phone that's the idea but at this point

00:26:38,570 --> 00:26:44,900
does our code actually work for all of

00:26:40,070 --> 00:26:47,030
our users maybe we're part of the way

00:26:44,900 --> 00:26:49,010
there but there remain a lot of topics

00:26:47,030 --> 00:26:51,230
that we didn't actually explore we

00:26:49,010 --> 00:26:55,820
didn't talk about widgets or really

00:26:51,230 --> 00:26:57,650
managing focus or page navigability but

00:26:55,820 --> 00:26:58,910
my hope is it some of the ideas that I

00:26:57,650 --> 00:27:02,450
presented here or at least a starting

00:26:58,910 --> 00:27:04,790
point even once we have theoretically

00:27:02,450 --> 00:27:06,410
accessible code though we still won't

00:27:04,790 --> 00:27:08,990
know that it works for our users for

00:27:06,410 --> 00:27:11,390
sure we can't know unless we actually

00:27:08,990 --> 00:27:15,230
ask our users and see how they are using

00:27:11,390 --> 00:27:17,480
our application as I'm sure many of us

00:27:15,230 --> 00:27:19,430
have experienced sometimes the code does

00:27:17,480 --> 00:27:20,510
exactly what we want it to do and we're

00:27:19,430 --> 00:27:23,480
like yeah that's pretty slick that was

00:27:20,510 --> 00:27:26,560
pretty good uh yeah that's not at all

00:27:23,480 --> 00:27:26,560
what our users actually want

00:27:27,700 --> 00:27:33,290
fundamentally making content perceivable

00:27:30,890 --> 00:27:37,660
operable understandable and robust

00:27:33,290 --> 00:27:42,140
is user experience work it's design work

00:27:37,660 --> 00:27:44,840
this doesn't take aways use semantic

00:27:42,140 --> 00:27:49,580
HTML there's a ton there it's pretty

00:27:44,840 --> 00:27:50,810
great it's very deep build tools the

00:27:49,580 --> 00:27:53,900
protect against accessibility of

00:27:50,810 --> 00:27:57,430
mistakes and also use build tools that

00:27:53,900 --> 00:28:00,350
protection as accessibility mistakes

00:27:57,430 --> 00:28:05,120
make API choices that guide toward

00:28:00,350 --> 00:28:07,520
accessibility results and remember that

00:28:05,120 --> 00:28:09,530
building accessible code means doing

00:28:07,520 --> 00:28:10,760
design work means thinking about how

00:28:09,530 --> 00:28:14,780
your users are actually going to be

00:28:10,760 --> 00:28:15,950
using your application if you're

00:28:14,780 --> 00:28:17,420
interested in learning more about

00:28:15,950 --> 00:28:19,460
accessibility best practices

00:28:17,420 --> 00:28:22,240
I recommend browsing the W CAD

00:28:19,460 --> 00:28:25,220
guidelines those that's actually the

00:28:22,240 --> 00:28:26,240
origin point for the the poor guidelines

00:28:25,220 --> 00:28:29,150
the perceivable operable understandable

00:28:26,240 --> 00:28:31,070
and robust and they go into a great deal

00:28:29,150 --> 00:28:32,870
more detail and have success criteria

00:28:31,070 --> 00:28:34,370
that you can go through and check off

00:28:32,870 --> 00:28:37,700
when thinking about your own application

00:28:34,370 --> 00:28:40,940
and Deanna also has some some great

00:28:37,700 --> 00:28:42,500
resources and if you build anything

00:28:40,940 --> 00:28:52,820
tell me about it I'd love to hear about

00:28:42,500 --> 00:28:54,860
it thank you let's give it up for Tessa

00:28:52,820 --> 00:28:56,720
Kelly fantastic to see someone concerned

00:28:54,860 --> 00:28:58,760
with the accessibility that we're but

00:28:56,720 --> 00:29:00,049
obviously not something that a lot of

00:28:58,760 --> 00:29:01,340
people are really promoting which is

00:29:00,049 --> 00:29:02,900
fantastic we only have a very short

00:29:01,340 --> 00:29:04,880
amount of time for the question so was

00:29:02,900 --> 00:29:06,500
it through these what about using Aria

00:29:04,880 --> 00:29:10,250
attributes to make a clickable div

00:29:06,500 --> 00:29:11,750
accessible yeah yeah you can definitely

00:29:10,250 --> 00:29:13,480
use Aria attributes to improve the

00:29:11,750 --> 00:29:16,130
accessibility of a clickable div and

00:29:13,480 --> 00:29:18,020
actually the accessible HTML library has

00:29:16,130 --> 00:29:19,220
a whole section on like roles and

00:29:18,020 --> 00:29:21,610
widgets and like all of the different

00:29:19,220 --> 00:29:25,490
attributes that you might want to use

00:29:21,610 --> 00:29:29,899
however it takes a great deal more work

00:29:25,490 --> 00:29:30,890
to go from a little box box deal just

00:29:29,899 --> 00:29:32,990
something that's really full-fledged

00:29:30,890 --> 00:29:35,390
then it does just start with something

00:29:32,990 --> 00:29:37,250
really full-fledged and use it so I

00:29:35,390 --> 00:29:38,870
think if you're thinking about like

00:29:37,250 --> 00:29:41,510
building your own radio button say

00:29:38,870 --> 00:29:43,490
there's a great deal of depth there and

00:29:41,510 --> 00:29:45,710
it can be quite hard to replicate that

00:29:43,490 --> 00:29:47,240
behavior and a lot of it you might not

00:29:45,710 --> 00:29:49,789
actually even know about like there's a

00:29:47,240 --> 00:29:52,730
lot of detail around using arrow buttons

00:29:49,789 --> 00:29:56,899
to manage focus so totally Aria

00:29:52,730 --> 00:29:58,220
attributes do it but also rolling your

00:29:56,899 --> 00:30:01,669
own is harder than using what's already

00:29:58,220 --> 00:30:04,909
rolled next one is this something like

00:30:01,669 --> 00:30:08,000
your task 9 accessible HTML 4 reactant

00:30:04,909 --> 00:30:10,330
Babel not that I know of but you could

00:30:08,000 --> 00:30:10,330
make it

00:30:11,020 --> 00:30:20,779
Nicole we don't use L our only tools for

00:30:17,570 --> 00:30:22,789
automated testing of accessibility yeah

00:30:20,779 --> 00:30:25,070
there are definitely tools but because

00:30:22,789 --> 00:30:26,539
I've been very immersed in the old world

00:30:25,070 --> 00:30:29,750
I'm not that familiar with them

00:30:26,539 --> 00:30:32,809
so again if you know of any at me on

00:30:29,750 --> 00:30:36,409
Twitter to underscore Kelly 9 and I will

00:30:32,809 --> 00:30:38,159
retweet this one from Patrick is Ellen

00:30:36,409 --> 00:30:40,899
production-ready

00:30:38,159 --> 00:30:42,700
well I feel like I'm speaking from a

00:30:40,899 --> 00:30:45,460
biased standpoint here we've been using

00:30:42,700 --> 00:30:47,980
it in production for three and a half or

00:30:45,460 --> 00:30:52,809
so years maybe heading towards four so

00:30:47,980 --> 00:30:55,149
for us I would say like yeah yeah bencao

00:30:52,809 --> 00:30:56,200
but I appreciate that different

00:30:55,149 --> 00:30:58,029
different people have different needs

00:30:56,200 --> 00:30:59,460
and are looking for different things for

00:30:58,029 --> 00:31:04,299
the languages that they choose I

00:30:59,460 --> 00:31:06,159
recommend it alright that's - does

00:31:04,299 --> 00:31:07,360
accessible HTML also give direct

00:31:06,159 --> 00:31:10,059
suggestions on how to improve

00:31:07,360 --> 00:31:13,299
accessibility is it open source yeah

00:31:10,059 --> 00:31:16,390
it's available on the package site what

00:31:13,299 --> 00:31:17,770
are the main benefits of Elms from my

00:31:16,390 --> 00:31:20,500
perspective is actually that the package

00:31:17,770 --> 00:31:22,419
site has great documentation and there's

00:31:20,500 --> 00:31:25,059
like a cultural value towards providing

00:31:22,419 --> 00:31:26,890
good documentation and providing clear

00:31:25,059 --> 00:31:28,779
learning pallets as you go through a

00:31:26,890 --> 00:31:31,299
package it's like lots of examples lots

00:31:28,779 --> 00:31:34,840
of resources and suggestions on how to

00:31:31,299 --> 00:31:37,690
get started so I have done my best to

00:31:34,840 --> 00:31:40,270
follow the cultural standard there and

00:31:37,690 --> 00:31:41,830
do a good job of documentation and it is

00:31:40,270 --> 00:31:45,100
open source so if I haven't done a good

00:31:41,830 --> 00:31:47,350
job please fix it for me all right and

00:31:45,100 --> 00:31:48,760
final question what are some ways we can

00:31:47,350 --> 00:31:50,470
determine which aspects of our

00:31:48,760 --> 00:31:58,240
application are not accessible

00:31:50,470 --> 00:32:00,340
I mean I think I would think about what

00:31:58,240 --> 00:32:02,440
your main flows are like what your main

00:32:00,340 --> 00:32:04,350
flows as a user so maybe if you wanted

00:32:02,440 --> 00:32:07,000
to start with like the signup flow and

00:32:04,350 --> 00:32:09,010
see if you as the person who knows your

00:32:07,000 --> 00:32:10,570
application really really well since you

00:32:09,010 --> 00:32:15,549
built it you can actually get through

00:32:10,570 --> 00:32:18,210
that flow using like just the keyboard

00:32:15,549 --> 00:32:22,840
or using these different access patterns

00:32:18,210 --> 00:32:24,549
see how it goes alright that's kind of

00:32:22,840 --> 00:32:26,350
vague but that's that's my answer

00:32:24,549 --> 00:32:26,950
let's give a round of applause for Tessa

00:32:26,350 --> 00:32:28,100
Kelly

00:32:26,950 --> 00:32:30,160
[Applause]

00:32:28,100 --> 00:32:30,160

YouTube URL: https://www.youtube.com/watch?v=icxjvSkDX2M


