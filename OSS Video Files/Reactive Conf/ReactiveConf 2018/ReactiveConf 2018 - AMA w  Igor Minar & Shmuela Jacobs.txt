Title: ReactiveConf 2018 - AMA w  Igor Minar & Shmuela Jacobs
Publication date: 2018-11-05
Playlist: ReactiveConf 2018
Description: 
	29th - 31st October 2018, Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Ask Me Anything session, moderated by Gerard Sans.
Based on Igor's (https://www.youtube.com/watch?v=Hn_oxbWEnpc&t=276s) and Shmuela's (https://www.youtube.com/watch?v=Rf935Va1os0&feature=youtu.be) previous talk on ReactiveConf Main stage.
Captions: 
	00:00:02,490 --> 00:00:08,960
[Music]

00:00:12,620 --> 00:00:22,109
you wanted a for wall so we can okay I

00:00:18,240 --> 00:00:24,180
think we we are ready and we are going

00:00:22,109 --> 00:00:28,710
to start a session of ask me anything

00:00:24,180 --> 00:00:30,859
and we have two guests so we have eager

00:00:28,710 --> 00:00:35,100
Minar and voila

00:00:30,859 --> 00:00:38,640
all those we're going to be talking

00:00:35,100 --> 00:00:43,320
about what do you think we're going to

00:00:38,640 --> 00:00:43,739
talk about angular or its ask me

00:00:43,320 --> 00:00:46,799
anything

00:00:43,739 --> 00:00:50,549
yeah ask me anything but I would I would

00:00:46,799 --> 00:00:53,729
point to angular questions now let's see

00:00:50,549 --> 00:00:56,879
what we got so we we are using is Lido

00:00:53,729 --> 00:00:59,549
and we were going to big questions from

00:00:56,879 --> 00:01:01,799
there and then we can also grab some

00:00:59,549 --> 00:01:06,180
questions from you if you want to use

00:01:01,799 --> 00:01:08,760
Lido you can point to this hash RC 18

00:01:06,180 --> 00:01:12,570
and feel free to add any questions and

00:01:08,760 --> 00:01:15,630
then we will pick them from the top so

00:01:12,570 --> 00:01:17,759
let's pick the first one and you can you

00:01:15,630 --> 00:01:20,340
can read it here as well it's rendering

00:01:17,759 --> 00:01:24,659
a lazy load module in a name

00:01:20,340 --> 00:01:26,880
route outlet possible it seems that was

00:01:24,659 --> 00:01:30,659
a fixed quarry issue but is still not

00:01:26,880 --> 00:01:32,390
working for us with angular 6 yeah this

00:01:30,659 --> 00:01:34,740
is the issue that we fixed in six I

00:01:32,390 --> 00:01:36,090
don't know who the person is to ask this

00:01:34,740 --> 00:01:37,740
question but maybe you can come to me

00:01:36,090 --> 00:01:42,439
afterwards and we can look into that

00:01:37,740 --> 00:01:45,659
partnership we have we have there Aziz

00:01:42,439 --> 00:01:47,219
so it seems it's fixed now so currently

00:01:45,659 --> 00:01:51,659
if you have a reproduction then let's

00:01:47,219 --> 00:01:53,609
take a look at it afterwards awesome so

00:01:51,659 --> 00:01:57,139
let's take another one can you recommend

00:01:53,609 --> 00:02:01,579
a tool that can be integrated into a CIA

00:01:57,139 --> 00:02:01,579
pipeline to check accessibility

00:02:02,149 --> 00:02:07,880
yes I'm blanking on the name right now

00:02:07,900 --> 00:02:14,870
sorry lighthouse can do some

00:02:12,260 --> 00:02:18,080
accessibility checks but there's another

00:02:14,870 --> 00:02:24,140
tool that is much better that starts

00:02:18,080 --> 00:02:30,140
with a and has X in it it's a quiz who

00:02:24,140 --> 00:02:31,760
knows anybody okay it can be done it can

00:02:30,140 --> 00:02:34,460
be done I'm sorry I'm blanking on the

00:02:31,760 --> 00:02:42,170
name but yes there is a tool that you

00:02:34,460 --> 00:02:42,820
can build it your CI per line oh yeah

00:02:42,170 --> 00:02:45,800
totally

00:02:42,820 --> 00:02:50,240
we will if we find that out we will

00:02:45,800 --> 00:02:52,880
share it with everyone okay so another

00:02:50,240 --> 00:02:56,270
one out of the way we are doing good

00:02:52,880 --> 00:02:59,870
progress so far

00:02:56,270 --> 00:03:03,200
ohit's so Google can execute your GS

00:02:59,870 --> 00:03:07,190
code and index the render output but

00:03:03,200 --> 00:03:08,780
what about other crowler's there are

00:03:07,190 --> 00:03:12,200
scraping your page so this is more like

00:03:08,780 --> 00:03:15,769
CEO and you know indexing the content of

00:03:12,200 --> 00:03:18,440
your single page applications so in my

00:03:15,769 --> 00:03:22,760
experience Google is further along in

00:03:18,440 --> 00:03:25,820
this I don't believe that Facebook and

00:03:22,760 --> 00:03:30,769
Twitter can do this with with these two

00:03:25,820 --> 00:03:34,670
you can provide meta tags that can pick

00:03:30,769 --> 00:03:35,540
up text from you from your page but I

00:03:34,670 --> 00:03:37,970
don't believe they are running

00:03:35,540 --> 00:03:41,630
JavaScript information about this stuff

00:03:37,970 --> 00:03:47,030
and implementation is very scarce but

00:03:41,630 --> 00:03:50,780
this is what I've seen in wild actually

00:03:47,030 --> 00:03:54,739
I was at def s Nance and there was a

00:03:50,780 --> 00:03:58,910
team member from the CEO Google team and

00:03:54,739 --> 00:04:01,310
they have some new implementation that

00:03:58,910 --> 00:04:03,739
is covering so many scenarios improving

00:04:01,310 --> 00:04:06,200
that for Google I'm not so sure about

00:04:03,739 --> 00:04:08,660
the other browsers but it seems there's

00:04:06,200 --> 00:04:11,950
some new development from that from

00:04:08,660 --> 00:04:15,319
Google yeah from the kind of the

00:04:11,950 --> 00:04:16,789
indexing team yeah so this is what my

00:04:15,319 --> 00:04:17,440
talk was about you know how can you

00:04:16,789 --> 00:04:18,660
build

00:04:17,440 --> 00:04:21,459
script client-side JavaScript

00:04:18,660 --> 00:04:23,830
applications and get them indexed so

00:04:21,459 --> 00:04:28,000
that's totally possible with with Google

00:04:23,830 --> 00:04:32,320
and ask.com has actually pretty good

00:04:28,000 --> 00:04:35,620
support as well the other crawlers and

00:04:32,320 --> 00:04:40,060
search engines are not capable of doing

00:04:35,620 --> 00:04:42,580
that yet okay so let's let's take

00:04:40,060 --> 00:04:44,860
another question how does the growler

00:04:42,580 --> 00:04:48,460
know that the single page application

00:04:44,860 --> 00:04:50,680
has finished loading good question I

00:04:48,460 --> 00:04:54,760
don't know the implementation details

00:04:50,680 --> 00:04:57,580
but here's what I know if you are

00:04:54,760 --> 00:04:59,320
running your own browser you and you can

00:04:57,580 --> 00:05:02,470
start it with different flags you can

00:04:59,320 --> 00:05:03,610
actually get information about what is

00:05:02,470 --> 00:05:06,010
happening in the browser you can

00:05:03,610 --> 00:05:08,110
understand to the queue of events and

00:05:06,010 --> 00:05:10,420
tasks that are being queued up by the

00:05:08,110 --> 00:05:12,100
application so you can monitor and know

00:05:10,420 --> 00:05:15,190
when the application is done rendering

00:05:12,100 --> 00:05:17,620
or when it's ready for being interactive

00:05:15,190 --> 00:05:19,720
lighthouse already supports some of the

00:05:17,620 --> 00:05:21,490
metrics so in a similar way the crawler

00:05:19,720 --> 00:05:24,550
can know when the application is in

00:05:21,490 --> 00:05:27,610
their interactive state in addition to

00:05:24,550 --> 00:05:29,380
that I also know that there are resource

00:05:27,610 --> 00:05:32,350
constraints and you know how much time

00:05:29,380 --> 00:05:34,900
the crawler can spend trying to wait for

00:05:32,350 --> 00:05:36,700
application to render so there is some

00:05:34,900 --> 00:05:39,600
timeout I don't know what the timeout is

00:05:36,700 --> 00:05:41,620
I think it's in a few seconds

00:05:39,600 --> 00:05:43,630
don't take me for the number but it's

00:05:41,620 --> 00:05:46,660
like somewhere between 5 to 10 seconds I

00:05:43,630 --> 00:05:48,250
would guess and if your application is

00:05:46,660 --> 00:05:50,800
capable to finish rendering within that

00:05:48,250 --> 00:05:52,510
timeout everything will be good if you

00:05:50,800 --> 00:05:54,520
have a very slow application that allows

00:05:52,510 --> 00:05:56,230
a lot of JavaScript or javascript is

00:05:54,520 --> 00:05:58,060
very slow or you're making ton of

00:05:56,230 --> 00:06:01,540
requests to the backend you might not

00:05:58,060 --> 00:06:03,550
make it in within the timeout so in that

00:06:01,540 --> 00:06:06,040
case you're already providing a bad user

00:06:03,550 --> 00:06:07,600
experience so you might reconsider you

00:06:06,040 --> 00:06:07,990
know how your fishing data or how are

00:06:07,600 --> 00:06:10,060
you

00:06:07,990 --> 00:06:14,080
bundling your application to make it

00:06:10,060 --> 00:06:17,169
more efficient cool I can see a pattern

00:06:14,080 --> 00:06:20,800
here it's going to be you're answering

00:06:17,169 --> 00:06:26,230
all the questions so I'm going to make a

00:06:20,800 --> 00:06:30,940
question of my own so we can see as well

00:06:26,230 --> 00:06:33,700
answers and I'm thinking that maybe some

00:06:30,940 --> 00:06:38,500
people don't know about ng girls maybe

00:06:33,700 --> 00:06:40,540
you want to make a small intro know

00:06:38,500 --> 00:06:43,510
about it yeah sure

00:06:40,540 --> 00:06:48,310
so ng girls is an organization where we

00:06:43,510 --> 00:06:51,250
introduce women into coding and so we

00:06:48,310 --> 00:06:53,200
our main main activity is full-day

00:06:51,250 --> 00:06:55,870
workshops they're free for women and

00:06:53,200 --> 00:06:59,500
they learn angular with the help of

00:06:55,870 --> 00:07:04,270
volunteering mentors we do this all

00:06:59,500 --> 00:07:06,610
around the world and we start with an

00:07:04,270 --> 00:07:09,520
intro to angular that there's a tutorial

00:07:06,610 --> 00:07:12,370
that it's not the web you can also check

00:07:09,520 --> 00:07:14,350
it out and they follow it during the day

00:07:12,370 --> 00:07:16,120
again with the help of mentors who are

00:07:14,350 --> 00:07:21,120
there not just to answer questions but

00:07:16,120 --> 00:07:28,150
also inspire and and show more ideas and

00:07:21,120 --> 00:07:33,520
tools so if you want to help us out be a

00:07:28,150 --> 00:07:39,850
mentor organize a workshop like that or

00:07:33,520 --> 00:07:42,220
just contribute on patreon then we'll be

00:07:39,850 --> 00:07:45,040
very excited about this so you can just

00:07:42,220 --> 00:07:47,350
talk to me about it yeah that's a really

00:07:45,040 --> 00:07:50,200
that's a really good project thank you

00:07:47,350 --> 00:07:53,650
okay so let's move on to more questions

00:07:50,200 --> 00:07:55,240
from from today from the from the

00:07:53,650 --> 00:07:59,670
session from today so do you already

00:07:55,240 --> 00:08:03,670
have some goal to achieve v-eight I

00:07:59,670 --> 00:08:08,080
guess support not the transcript p.m.

00:08:03,670 --> 00:08:19,900
rv-8 but every learner personally

00:08:08,080 --> 00:08:22,240
thinking right yes and officially we're

00:08:19,900 --> 00:08:24,460
trying really hard to lend I be by the

00:08:22,240 --> 00:08:26,350
VA time aha timeline the biggest

00:08:24,460 --> 00:08:28,270
question mark there is can we upgrade

00:08:26,350 --> 00:08:29,650
all of the Google applications and time

00:08:28,270 --> 00:08:31,630
and can make sure that IVs

00:08:29,650 --> 00:08:33,849
backwards-compatible fully with

00:08:31,630 --> 00:08:35,950
everything we have today so we can roll

00:08:33,849 --> 00:08:38,010
it out at Google and this is what we're

00:08:35,950 --> 00:08:40,770
doing right now

00:08:38,010 --> 00:08:43,320
this month and probably until the end of

00:08:40,770 --> 00:08:44,900
the year the entire team is working on

00:08:43,320 --> 00:08:47,760
making sure that we're making IV

00:08:44,900 --> 00:08:50,130
backwards-compatible can run it against

00:08:47,760 --> 00:08:51,600
all of the application tests at Google

00:08:50,130 --> 00:08:52,320
and verify that everything is working

00:08:51,600 --> 00:08:54,750
properly

00:08:52,320 --> 00:08:57,420
and if there are no surprises then I

00:08:54,750 --> 00:09:00,360
think I've is gonna be the biggest thing

00:08:57,420 --> 00:09:02,340
in a v8 in addition to that we have some

00:09:00,360 --> 00:09:04,440
enhancements prepared but those are

00:09:02,340 --> 00:09:07,590
currently on the back burner until I was

00:09:04,440 --> 00:09:09,870
done yeah I I know that there's a lot of

00:09:07,590 --> 00:09:15,630
people really excited about

00:09:09,870 --> 00:09:18,690
Avia and what would be the main benefits

00:09:15,630 --> 00:09:21,920
from moving and in the tests that you

00:09:18,690 --> 00:09:24,900
have done and maybe some some user tests

00:09:21,920 --> 00:09:27,210
the biggest benefit of IV right somebody

00:09:24,900 --> 00:09:29,610
asked oh yes that's it the reason why

00:09:27,210 --> 00:09:33,030
project IV exists and for those of you

00:09:29,610 --> 00:09:35,670
don't know IV is about rewriting the

00:09:33,030 --> 00:09:39,780
entire renderer of angular and doing it

00:09:35,670 --> 00:09:42,870
in a different style so that we can do

00:09:39,780 --> 00:09:45,170
several things one of them is generate

00:09:42,870 --> 00:09:47,640
less codes the application is smaller

00:09:45,170 --> 00:09:50,100
generate code in a different way where

00:09:47,640 --> 00:09:53,400
we're actually able to code split

00:09:50,100 --> 00:09:56,310
angular render itself right now the

00:09:53,400 --> 00:09:58,290
render is very monolithic so if even if

00:09:56,310 --> 00:10:01,170
you use just one out of the thousand

00:09:58,290 --> 00:10:03,510
features you pay for all these features

00:10:01,170 --> 00:10:05,100
with IV you will only pay for what

00:10:03,510 --> 00:10:07,020
you're using so we'll be able to tree

00:10:05,100 --> 00:10:09,960
shake any features that are not being

00:10:07,020 --> 00:10:12,420
used and additionally there's a lot of

00:10:09,960 --> 00:10:16,860
focus on making sure that we can better

00:10:12,420 --> 00:10:19,740
scale build by having this locality it's

00:10:16,860 --> 00:10:21,660
a property that allow us to compile the

00:10:19,740 --> 00:10:23,370
template without looking at the rest of

00:10:21,660 --> 00:10:24,830
the application so if you have an

00:10:23,370 --> 00:10:28,740
application that has a million

00:10:24,830 --> 00:10:30,420
components and only one changes all we

00:10:28,740 --> 00:10:33,720
need to do is to recompile it one

00:10:30,420 --> 00:10:36,420
component and nothing else so that also

00:10:33,720 --> 00:10:39,990
fits really well with lazy loading it's

00:10:36,420 --> 00:10:42,600
is it related or its locality itself is

00:10:39,990 --> 00:10:44,550
not but the way we generate code will

00:10:42,600 --> 00:10:47,940
simplify our lazy loading you'll be able

00:10:44,550 --> 00:10:49,470
on the code itself is now going to be in

00:10:47,940 --> 00:10:51,420
separate classes as it is

00:10:49,470 --> 00:10:54,420
it will be actually part of the original

00:10:51,420 --> 00:10:56,370
component class which means which means

00:10:54,420 --> 00:11:01,350
that you no longer need to deal with

00:10:56,370 --> 00:11:03,660
with factories as we have today unless

00:11:01,350 --> 00:11:07,800
it's hidden behind the CLI but even

00:11:03,660 --> 00:11:10,530
within CLI factories will not be there

00:11:07,800 --> 00:11:12,990
you will be just having a references to

00:11:10,530 --> 00:11:14,540
components and Co splitting and all the

00:11:12,990 --> 00:11:17,370
tooling will become much simpler

00:11:14,540 --> 00:11:19,230
additionally because the generated code

00:11:17,370 --> 00:11:23,310
is much more readable it's gonna be much

00:11:19,230 --> 00:11:25,530
easier to place breakpoints and stop the

00:11:23,310 --> 00:11:27,300
application as it's running in a way

00:11:25,530 --> 00:11:31,110
that you can debug it and understand

00:11:27,300 --> 00:11:32,640
what the angle is doing at a time so the

00:11:31,110 --> 00:11:37,410
developer experience is also going to

00:11:32,640 --> 00:11:39,720
improve as a side effect cool well we

00:11:37,410 --> 00:11:42,630
had some questions also related to the

00:11:39,720 --> 00:11:43,160
same conversation let's pick the next

00:11:42,630 --> 00:11:46,580
one

00:11:43,160 --> 00:11:50,370
what has better performance with

00:11:46,580 --> 00:11:56,370
rendering dynamic components comparing

00:11:50,370 --> 00:11:58,080
angular versus react you know I actually

00:11:56,370 --> 00:12:02,270
don't know I just I don't know about

00:11:58,080 --> 00:12:05,610
react but I think in angular its

00:12:02,270 --> 00:12:08,010
performance is pretty great and and like

00:12:05,610 --> 00:12:11,730
you said with Ivy there's gonna be even

00:12:08,010 --> 00:12:14,670
more improvements and with that but if

00:12:11,730 --> 00:12:18,510
you have experience with react I think

00:12:14,670 --> 00:12:20,880
it shouldn't be something very I wonder

00:12:18,510 --> 00:12:22,470
if there is some particular angle for

00:12:20,880 --> 00:12:24,240
this question because in general there's

00:12:22,470 --> 00:12:25,950
no big difference in performance of

00:12:24,240 --> 00:12:27,660
dynamically rendered components in

00:12:25,950 --> 00:12:30,300
angular and react but maybe there is

00:12:27,660 --> 00:12:34,170
more to the question then what's being

00:12:30,300 --> 00:12:39,000
asked here can we get a clarification on

00:12:34,170 --> 00:12:42,660
this or I'm not sure ask the question we

00:12:39,000 --> 00:12:46,590
don't have their owner I guess they're

00:12:42,660 --> 00:12:48,390
in my mind probably the actual parsing

00:12:46,590 --> 00:12:50,550
of the template depending how big is the

00:12:48,390 --> 00:12:53,880
template for the that dynamic component

00:12:50,550 --> 00:12:56,070
it could be an initial but it will put

00:12:53,880 --> 00:12:58,530
the supposes that all of that has been

00:12:56,070 --> 00:12:59,040
processed in both angular and react by

00:12:58,530 --> 00:13:02,790
the time you

00:12:59,040 --> 00:13:07,500
loading a dynamic component there can be

00:13:02,790 --> 00:13:10,610
a big difference okay well we leave it

00:13:07,500 --> 00:13:13,709
open no problem

00:13:10,610 --> 00:13:16,170
can we load components not known at

00:13:13,709 --> 00:13:18,209
development line well this is pointing

00:13:16,170 --> 00:13:22,649
to these dynamic components that we were

00:13:18,209 --> 00:13:25,380
talking about so maybe we are so we can

00:13:22,649 --> 00:13:28,130
pick up these components that were

00:13:25,380 --> 00:13:33,990
statically generated and then somehow

00:13:28,130 --> 00:13:36,449
load them faster or the topic yeah we

00:13:33,990 --> 00:13:39,240
were talking about this and so this was

00:13:36,449 --> 00:13:44,310
like an idea that I had and in several

00:13:39,240 --> 00:13:45,870
projects that we had so basically you

00:13:44,310 --> 00:13:50,100
can do that but it's best to wrap it

00:13:45,870 --> 00:13:53,550
with as a web component and it will be

00:13:50,100 --> 00:13:56,959
very difficult to to add it to integrate

00:13:53,550 --> 00:14:00,720
it really into the angular project and

00:13:56,959 --> 00:14:03,300
and if if the versions that you're using

00:14:00,720 --> 00:14:06,600
in your main angular project if if the

00:14:03,300 --> 00:14:09,089
version changes if you update the

00:14:06,600 --> 00:14:10,709
version then you also need to update the

00:14:09,089 --> 00:14:13,560
version of the components that you're

00:14:10,709 --> 00:14:16,310
going to use so that's a bit of a

00:14:13,560 --> 00:14:21,600
problem if it's an angular component and

00:14:16,310 --> 00:14:24,680
so basically use angular elements to

00:14:21,600 --> 00:14:28,709
build it as a web component to do this

00:14:24,680 --> 00:14:31,260
but we also raised some other issues

00:14:28,709 --> 00:14:33,899
that you need you really need to trust

00:14:31,260 --> 00:14:36,720
this source that generates the

00:14:33,899 --> 00:14:40,620
components for you because you're

00:14:36,720 --> 00:14:43,500
letting your users use code that you

00:14:40,620 --> 00:14:45,920
didn't try it by yourself so there might

00:14:43,500 --> 00:14:49,380
be some a security issues there

00:14:45,920 --> 00:14:53,490
vulnerabilities so we I guess you should

00:14:49,380 --> 00:14:57,449
know better what what you let your users

00:14:53,490 --> 00:15:00,740
have as part of your web application now

00:14:57,449 --> 00:15:04,370
there are different methods to really

00:15:00,740 --> 00:15:08,270
at plugins to your website for your web

00:15:04,370 --> 00:15:12,790
application that really separate the

00:15:08,270 --> 00:15:18,290
plugin from the application code and

00:15:12,790 --> 00:15:20,560
gives it a very specific API and you

00:15:18,290 --> 00:15:23,810
wrap it with we stop we're talking about

00:15:20,560 --> 00:15:28,779
iframes and other methods that you might

00:15:23,810 --> 00:15:32,440
use so it's much more complex to do this

00:15:28,779 --> 00:15:35,720
just just take this into consideration I

00:15:32,440 --> 00:15:37,399
think it really depends on the use cases

00:15:35,720 --> 00:15:40,700
if you control all the code then the

00:15:37,399 --> 00:15:41,930
security issues another problem and if

00:15:40,700 --> 00:15:43,580
you control the versions and also

00:15:41,930 --> 00:15:45,410
versioning it's not a problem and you

00:15:43,580 --> 00:15:47,089
can totally do this but if you want

00:15:45,410 --> 00:15:50,390
something really robust and especially

00:15:47,089 --> 00:15:52,310
if the code is authored by other parties

00:15:50,390 --> 00:15:54,709
then there are many different things

00:15:52,310 --> 00:15:58,430
they need to consider and creating a

00:15:54,709 --> 00:16:00,649
self encapsulating component in the form

00:15:58,430 --> 00:16:05,089
of web component using middle element is

00:16:00,649 --> 00:16:09,050
probably the best choice okay I think we

00:16:05,089 --> 00:16:11,720
have answered that one this one is going

00:16:09,050 --> 00:16:15,709
to be a little bit more interesting so

00:16:11,720 --> 00:16:18,740
what's your take on bjs CLI which it's

00:16:15,709 --> 00:16:24,110
close to the CLI that was released by

00:16:18,740 --> 00:16:27,170
Angie and you know and in air X the CLI

00:16:24,110 --> 00:16:29,390
- for you know that's a difference Eli

00:16:27,170 --> 00:16:35,390
but there's an angular CLI that was

00:16:29,390 --> 00:16:37,300
recently released by n Eric's Tim a CLI

00:16:35,390 --> 00:16:41,480
tool that was released by the ante or ex

00:16:37,300 --> 00:16:44,420
DX but how Narwhal did not vote yeah

00:16:41,480 --> 00:16:48,440
well n ik Oh EDX okay so alex is just

00:16:44,420 --> 00:16:53,959
the extension of the angular CLI right a

00:16:48,440 --> 00:16:56,360
view has its own CLI tool they I don't

00:16:53,959 --> 00:16:59,360
know how all of the features compare but

00:16:56,360 --> 00:17:03,380
you know Evan Singh awesome work with

00:16:59,360 --> 00:17:05,780
you and it's interesting how all of the

00:17:03,380 --> 00:17:07,910
the main players and the market realized

00:17:05,780 --> 00:17:10,730
that providing tooling and abstracting

00:17:07,910 --> 00:17:12,510
away from the hands of users has so many

00:17:10,730 --> 00:17:14,850
benefits because it's

00:17:12,510 --> 00:17:16,949
so easy to get the build setup wrong so

00:17:14,850 --> 00:17:19,290
if you have a tool that can give you the

00:17:16,949 --> 00:17:22,380
right optimizations and fine-tune things

00:17:19,290 --> 00:17:24,570
for your application then you just save

00:17:22,380 --> 00:17:27,440
a lot of headaches developers so it's

00:17:24,570 --> 00:17:31,260
not surprising to me that you has a CLI

00:17:27,440 --> 00:17:34,260
yeah it's interesting to see I guess the

00:17:31,260 --> 00:17:37,620
first seal I was from ember and then it

00:17:34,260 --> 00:17:40,200
kind of spread and I mean good ideas you

00:17:37,620 --> 00:17:42,360
know they will stay it was amber there

00:17:40,200 --> 00:17:45,060
was young men if you remember a long

00:17:42,360 --> 00:17:47,880
time ago which was trying to be agnostic

00:17:45,060 --> 00:17:49,080
but that's very difficult when you're

00:17:47,880 --> 00:17:53,340
trying to serve everybody you don't

00:17:49,080 --> 00:17:55,320
really serve anybody and now yeah most

00:17:53,340 --> 00:17:56,940
of the most of the frameworks and

00:17:55,320 --> 00:17:59,790
libraries have their own seal eyes that

00:17:56,940 --> 00:18:03,810
are specific to that one thing that I

00:17:59,790 --> 00:18:11,130
like that view CLI is doing is that it

00:18:03,810 --> 00:18:13,080
has the UI which our CLI also has in the

00:18:11,130 --> 00:18:15,690
form of angular console so angular

00:18:13,080 --> 00:18:18,030
console is built on top of a CLI and it

00:18:15,690 --> 00:18:20,430
gives you the user interface where you

00:18:18,030 --> 00:18:23,490
can debug things understand the

00:18:20,430 --> 00:18:25,830
structure of your project and run run

00:18:23,490 --> 00:18:29,370
tasks and currently we're working

00:18:25,830 --> 00:18:31,320
working on exposing logs as well so that

00:18:29,370 --> 00:18:33,180
if your application and build system is

00:18:31,320 --> 00:18:35,400
producing lots of logs they're much

00:18:33,180 --> 00:18:38,610
easier to navigate and understand if you

00:18:35,400 --> 00:18:42,080
have UI extension and UI representation

00:18:38,610 --> 00:18:44,480
of that yeah there's also a nice

00:18:42,080 --> 00:18:47,790
integration between the different

00:18:44,480 --> 00:18:52,170
tooling around angular that I can see

00:18:47,790 --> 00:18:54,030
also with schematics and CLI and all

00:18:52,170 --> 00:18:55,980
they are working together you know to

00:18:54,030 --> 00:18:59,280
achieve these better developer

00:18:55,980 --> 00:19:01,309
experience also nice when there's a new

00:18:59,280 --> 00:19:04,010
developer joining

00:19:01,309 --> 00:19:06,350
maybe a team they get all of this

00:19:04,010 --> 00:19:08,690
tooling that will support a nice you

00:19:06,350 --> 00:19:11,360
know like a Welcome Packet song

00:19:08,690 --> 00:19:14,510
something like this and then it can also

00:19:11,360 --> 00:19:17,000
integrate with different you know

00:19:14,510 --> 00:19:20,779
methodologies that may not be angular

00:19:17,000 --> 00:19:24,100
CLI but some some spin off of angular

00:19:20,779 --> 00:19:26,929
CLI templates which is which is quite

00:19:24,100 --> 00:19:29,480
interesting yeah one of the things we

00:19:26,929 --> 00:19:31,490
are trying to do with the CLI is not try

00:19:29,480 --> 00:19:33,409
to solve all the problems but provide

00:19:31,490 --> 00:19:36,529
extension points so that the community

00:19:33,409 --> 00:19:37,909
can build additional add-ons and those

00:19:36,529 --> 00:19:41,059
those are built in the form of

00:19:37,909 --> 00:19:42,919
schematics so there are different teams

00:19:41,059 --> 00:19:44,659
out there that have built schematics

00:19:42,919 --> 00:19:49,010
that extend functionality within your

00:19:44,659 --> 00:19:51,799
project by providing native script for

00:19:49,010 --> 00:19:54,769
example integration other other

00:19:51,799 --> 00:19:56,630
integrations where we bring material

00:19:54,769 --> 00:19:58,789
design components and scaffold things

00:19:56,630 --> 00:20:02,389
for you all of these can be done outside

00:19:58,789 --> 00:20:06,230
of the CLI core and this enables the

00:20:02,389 --> 00:20:08,539
community to contribute more features

00:20:06,230 --> 00:20:11,600
more more extensions more functionality

00:20:08,539 --> 00:20:15,889
yeah it's really really good work I may

00:20:11,600 --> 00:20:16,700
say so here we can point to the to the

00:20:15,889 --> 00:20:20,269
next question

00:20:16,700 --> 00:20:23,149
oh that's a nice one so what do you

00:20:20,269 --> 00:20:26,799
think about angular future who wants to

00:20:23,149 --> 00:20:30,399
take this one let's how small our

00:20:26,799 --> 00:20:34,430
angular future is great it's awesome

00:20:30,399 --> 00:20:38,290
it keeps developing and

00:20:34,430 --> 00:20:47,420
and the the angular team is amazing with

00:20:38,290 --> 00:20:49,280
bringing us that not only girls they're

00:20:47,420 --> 00:20:51,650
really trying to give the developers the

00:20:49,280 --> 00:20:53,720
best experience that they can give and

00:20:51,650 --> 00:20:56,510
to always use cutting-edge technologies

00:20:53,720 --> 00:20:59,570
to makes us developers happy and to make

00:20:56,510 --> 00:21:02,920
our users happy so that's why they're

00:20:59,570 --> 00:21:07,970
spending a lot of time rebuilding and

00:21:02,920 --> 00:21:12,200
and testing the the compiler and

00:21:07,970 --> 00:21:17,150
renderer with ivy and and giving us all

00:21:12,200 --> 00:21:22,400
these additional tools so I think that

00:21:17,150 --> 00:21:26,180
it's it makes it really easy and trusted

00:21:22,400 --> 00:21:27,920
you to work with you start an Edgar

00:21:26,180 --> 00:21:29,810
project and you know that it's gonna

00:21:27,920 --> 00:21:31,940
work well and also you have a very

00:21:29,810 --> 00:21:35,810
strong community that contributes to it

00:21:31,940 --> 00:21:39,140
and also reports to the team about any

00:21:35,810 --> 00:21:42,680
issues or bugs and and things that we

00:21:39,140 --> 00:21:45,530
would like to have and having this this

00:21:42,680 --> 00:21:50,810
support in the community I think is very

00:21:45,530 --> 00:21:52,790
very important and angular is structured

00:21:50,810 --> 00:21:56,840
especially with the CLI and other tools

00:21:52,790 --> 00:21:59,890
it's very opinionated and how you have

00:21:56,840 --> 00:22:04,880
to write your code and structure your a

00:21:59,890 --> 00:22:06,650
your project and we mentioned a NX by

00:22:04,880 --> 00:22:11,090
our well that also gives you the

00:22:06,650 --> 00:22:15,340
structure of multi do call it um mono

00:22:11,090 --> 00:22:18,920
repo mono repo yeah for several projects

00:22:15,340 --> 00:22:22,550
it's especially great well it's great

00:22:18,920 --> 00:22:25,070
both for big companies that have to

00:22:22,550 --> 00:22:28,160
manage different teams that work only on

00:22:25,070 --> 00:22:31,330
several projects that some have rely on

00:22:28,160 --> 00:22:33,560
each other and also for small teams

00:22:31,330 --> 00:22:35,760
small projects that you're just

00:22:33,560 --> 00:22:38,160
prototyping in

00:22:35,760 --> 00:22:44,220
want to want to develop something really

00:22:38,160 --> 00:22:46,500
quickly and and it just works it works

00:22:44,220 --> 00:22:49,530
really easily so that's why I really

00:22:46,500 --> 00:22:51,170
believe that and color is gonna stick

00:22:49,530 --> 00:22:55,110
for a long time

00:22:51,170 --> 00:22:57,180
cool cool you have you want to say your

00:22:55,110 --> 00:22:59,990
well for me you know the future of

00:22:57,180 --> 00:23:03,510
angular is really in in IV right now

00:22:59,990 --> 00:23:05,010
once Ivy's done that will unleash a new

00:23:03,510 --> 00:23:07,440
wave of things that we want to do in

00:23:05,010 --> 00:23:09,360
angular but we need to get to the

00:23:07,440 --> 00:23:12,180
milestone where IV is fully rollout

00:23:09,360 --> 00:23:14,250
everybody's using it and then there are

00:23:12,180 --> 00:23:15,600
quite a few exciting things that we are

00:23:14,250 --> 00:23:18,710
planning that we would like to get done

00:23:15,600 --> 00:23:23,820
but Ivan needs to come first

00:23:18,710 --> 00:23:26,790
now that sounds great oh I think we can

00:23:23,820 --> 00:23:30,180
we can take one last question and then

00:23:26,790 --> 00:23:33,270
we can do like a wrap-up so what's the

00:23:30,180 --> 00:23:38,040
way to dynamically render UI by using a

00:23:33,270 --> 00:23:44,400
JSON schema and then a follow-up is it

00:23:38,040 --> 00:23:46,290
is angularjs okay so previously we use

00:23:44,400 --> 00:23:48,690
JSON Forum to do that

00:23:46,290 --> 00:23:51,390
is there any liver library to use it a

00:23:48,690 --> 00:23:56,790
similar approach with angular current

00:23:51,390 --> 00:23:58,920
version yeah there isn't well you can i

00:23:56,790 --> 00:24:01,260
don't erase something there is something

00:23:58,920 --> 00:24:05,940
but it's it's build time I think the

00:24:01,260 --> 00:24:07,380
question is like could we do it yeah so

00:24:05,940 --> 00:24:08,670
at the build time you can totally do it

00:24:07,380 --> 00:24:10,530
you can pulling a schema you can

00:24:08,670 --> 00:24:13,380
generate a template and then have it

00:24:10,530 --> 00:24:15,390
processed by angular with Ivy however

00:24:13,380 --> 00:24:17,850
we'll be able to do the same thing at

00:24:15,390 --> 00:24:21,810
runtime and this is like one of the cool

00:24:17,850 --> 00:24:23,760
things that I will enable so yeah I

00:24:21,810 --> 00:24:26,700
think this is a very popular use case

00:24:23,760 --> 00:24:30,900
for companies that they deal with a lot

00:24:26,700 --> 00:24:33,570
of form driven kind of features I mean

00:24:30,900 --> 00:24:36,750
this is a excellent they can store this

00:24:33,570 --> 00:24:37,910
data in JSON format and then bring it as

00:24:36,750 --> 00:24:40,950
as they

00:24:37,910 --> 00:24:42,450
I'm trying to think to remember the name

00:24:40,950 --> 00:24:45,410
of the library that allows you to do

00:24:42,450 --> 00:24:49,190
this in command

00:24:45,410 --> 00:24:53,010
well like to use it not dynamically but

00:24:49,190 --> 00:24:56,760
remember so there was talk by URIs

00:24:53,010 --> 00:24:59,250
trunkful owner in ng talks you can find

00:24:56,760 --> 00:25:01,080
it on YouTube and he was showing this

00:24:59,250 --> 00:25:05,280
library I just don't remember its name I

00:25:01,080 --> 00:25:07,710
know there was formerly for angularjs oh

00:25:05,280 --> 00:25:11,100
yeah I remember formally so there's

00:25:07,710 --> 00:25:14,820
something similar for angular so this is

00:25:11,100 --> 00:25:17,400
probably one that covers this so it just

00:25:14,820 --> 00:25:19,500
needs a little bit of research well

00:25:17,400 --> 00:25:22,010
thanks thanks a lot

00:25:19,500 --> 00:25:26,700
I don't know if you want to add anything

00:25:22,010 --> 00:25:29,220
just final words just thank you for warm

00:25:26,700 --> 00:25:31,830
welcome it's it's great to be in Central

00:25:29,220 --> 00:25:35,190
Europe and thanks everybody for coming

00:25:31,830 --> 00:25:37,890
ok so you want to reach them just after

00:25:35,190 --> 00:25:41,100
this session feel free to do so they

00:25:37,890 --> 00:25:44,220
have really nice people you can talk to

00:25:41,100 --> 00:25:45,780
them and yeah as he was saying like

00:25:44,220 --> 00:25:48,990
thank you for for joining this session

00:25:45,780 --> 00:25:52,710
and we will stick for the last bit of

00:25:48,990 --> 00:25:54,720
the conference thanks everyone thank you

00:25:52,710 --> 00:25:56,780
[Applause]

00:25:54,720 --> 00:25:56,780

YouTube URL: https://www.youtube.com/watch?v=WLjR-CQ0unE


