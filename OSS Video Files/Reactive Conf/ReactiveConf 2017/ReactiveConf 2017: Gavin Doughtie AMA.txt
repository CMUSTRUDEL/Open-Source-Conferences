Title: ReactiveConf 2017: Gavin Doughtie AMA
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Discovery stage

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:14,550 --> 00:00:19,920
all right so you've been working on

00:00:16,880 --> 00:00:23,010
flutter and I bet use your sink flutter

00:00:19,920 --> 00:00:24,720
for a revision of the mobile app that I

00:00:23,010 --> 00:00:26,550
work on at Google which is the AdWords

00:00:24,720 --> 00:00:29,220
mobile app so if you buy ads from Google

00:00:26,550 --> 00:00:31,470
you use currently our native Android and

00:00:29,220 --> 00:00:32,700
iOS app to check your campaigns

00:00:31,470 --> 00:00:34,860
on-the-go so it gives you sort of a

00:00:32,700 --> 00:00:36,840
lightweight management interface for

00:00:34,860 --> 00:00:39,540
what could be very large advertising

00:00:36,840 --> 00:00:41,790
spends with Google so I think probably

00:00:39,540 --> 00:00:44,370
this you know being a reactive

00:00:41,790 --> 00:00:45,360
conference the top question people are

00:00:44,370 --> 00:00:46,620
going to be thinking about it's like how

00:00:45,360 --> 00:00:49,230
does this compare to something like

00:00:46,620 --> 00:00:53,789
reaction native well you know analogy

00:00:49,230 --> 00:00:55,769
there I think you would use this maybe

00:00:53,789 --> 00:00:57,809
not in preference to react native but

00:00:55,769 --> 00:01:00,660
the the main technical difference is

00:00:57,809 --> 00:01:03,059
that react native is driving the native

00:01:00,660 --> 00:01:05,820
UI system from JavaScript so it's

00:01:03,059 --> 00:01:08,520
pushing basically commands across a

00:01:05,820 --> 00:01:11,250
bridge to operate the native UI system

00:01:08,520 --> 00:01:13,980
from the JavaScript interpreter so a lot

00:01:11,250 --> 00:01:15,720
of the art of doing react native so I'm

00:01:13,980 --> 00:01:18,360
told I haven't done it I've done quite a

00:01:15,720 --> 00:01:20,340
bit of web react but but the art of that

00:01:18,360 --> 00:01:22,370
is minimizing your transits across that

00:01:20,340 --> 00:01:25,380
bridge so you have good performance

00:01:22,370 --> 00:01:27,780
flutter on the other hand keeps all of

00:01:25,380 --> 00:01:30,390
its operation pretty much all of its

00:01:27,780 --> 00:01:32,660
operations sort of in the dart VM on its

00:01:30,390 --> 00:01:35,070
own side of that bridge so it's using

00:01:32,660 --> 00:01:38,130
you know fairly low-level access to the

00:01:35,070 --> 00:01:41,340
graphics hardware to do its rendering

00:01:38,130 --> 00:01:44,010
and the entire stack is built on top of

00:01:41,340 --> 00:01:45,540
that in Dart and you have programmatic

00:01:44,010 --> 00:01:47,970
access to it so you're not transiting

00:01:45,540 --> 00:01:50,790
this bridge as much so that opens up the

00:01:47,970 --> 00:01:55,890
possibility of doing certain kinds of UI

00:01:50,790 --> 00:01:56,940
programming at a higher framerate so

00:01:55,890 --> 00:02:00,270
along those lines

00:01:56,940 --> 00:02:02,130
what does flutter output so in the sense

00:02:00,270 --> 00:02:04,260
that rack native is obviously binding to

00:02:02,130 --> 00:02:06,000
the existing kind of UI libraries right

00:02:04,260 --> 00:02:07,650
is flutter just kind of compiling down

00:02:06,000 --> 00:02:11,459
to native code and driving everything

00:02:07,650 --> 00:02:12,930
it's exactly that it's it's when one

00:02:11,459 --> 00:02:13,860
analogy I like to draw is if you if

00:02:12,930 --> 00:02:17,280
you're familiar with the Unity game

00:02:13,860 --> 00:02:18,840
engine it's the same general idea as you

00:02:17,280 --> 00:02:21,060
take you were writing in this other

00:02:18,840 --> 00:02:23,130
language against this other SDK and then

00:02:21,060 --> 00:02:25,860
producing a native application from it

00:02:23,130 --> 00:02:26,609
and you know with Unity applications you

00:02:25,860 --> 00:02:28,379
have

00:02:26,609 --> 00:02:30,420
you know it has a cross-platform story

00:02:28,379 --> 00:02:31,769
because you're targeting the Unity SDKs

00:02:30,420 --> 00:02:34,079
and it's the same thing with flutter you

00:02:31,769 --> 00:02:35,579
you target the flutter SDKs and then you

00:02:34,079 --> 00:02:39,299
can largely from the same codebase

00:02:35,579 --> 00:02:41,639
deploy to both iOS and Android so one of

00:02:39,299 --> 00:02:42,930
the questions here is that I mean this

00:02:41,639 --> 00:02:44,159
seems like something that Google has

00:02:42,930 --> 00:02:45,689
designed obviously you probably need

00:02:44,159 --> 00:02:47,519
kind of the scale of Google to be able

00:02:45,689 --> 00:02:51,719
to reinvent everything from this level

00:02:47,519 --> 00:02:54,109
up what are the benefits for a smaller

00:02:51,719 --> 00:02:57,030
company of using something like flutter

00:02:54,109 --> 00:02:58,980
well I think with a smaller company you

00:02:57,030 --> 00:03:00,540
know there's always the what is going to

00:02:58,980 --> 00:03:02,549
give us the most leverage for what we're

00:03:00,540 --> 00:03:06,120
trying to do so if your if your

00:03:02,549 --> 00:03:08,219
application is about the fluidity of the

00:03:06,120 --> 00:03:09,510
user experience and you're a small team

00:03:08,219 --> 00:03:10,680
but you want to target both iOS and

00:03:09,510 --> 00:03:12,180
Android

00:03:10,680 --> 00:03:14,040
you know I mentioned the Hamilton app in

00:03:12,180 --> 00:03:16,500
my talk that was done by a very small

00:03:14,040 --> 00:03:18,989
team at a digital ad agency in New York

00:03:16,500 --> 00:03:20,879
City and they use the firebase database

00:03:18,989 --> 00:03:22,590
system as well so they're their entire

00:03:20,879 --> 00:03:24,269
app is architected around sort of live

00:03:22,590 --> 00:03:26,219
data updates from firebase in their UI

00:03:24,269 --> 00:03:30,239
is rendered with flutter so if you've

00:03:26,219 --> 00:03:32,430
got an application like that you get a

00:03:30,239 --> 00:03:34,259
lot of leverage out of using flutter so

00:03:32,430 --> 00:03:37,229
I expect you to see to see it being

00:03:34,259 --> 00:03:39,509
quite popular with digital agencies who

00:03:37,229 --> 00:03:41,340
want to do stuff really quickly and

00:03:39,509 --> 00:03:42,989
still have it feel and look really good

00:03:41,340 --> 00:03:45,060
and be really performant as a native

00:03:42,989 --> 00:03:46,739
application and particularly if they've

00:03:45,060 --> 00:03:48,870
got you sort of a separate of how a side

00:03:46,739 --> 00:03:50,189
of the house doing web development so

00:03:48,870 --> 00:03:53,629
they're they're kind of breaking up

00:03:50,189 --> 00:03:56,009
their development across teams that way

00:03:53,629 --> 00:03:58,290
but generally we're using it for like a

00:03:56,009 --> 00:04:00,569
mainstream mobile application you know

00:03:58,290 --> 00:04:01,319
it's gonna be you know the AdWords

00:04:00,569 --> 00:04:03,000
application is kind of a

00:04:01,319 --> 00:04:04,259
business-to-business application so if

00:04:03,000 --> 00:04:06,030
you're if you're in if you're an

00:04:04,259 --> 00:04:07,859
advertiser you you open up this app and

00:04:06,030 --> 00:04:09,689
you can do all this work in it so I

00:04:07,859 --> 00:04:11,069
don't see any impediment to writing

00:04:09,689 --> 00:04:13,079
those kinds of applications with flutter

00:04:11,069 --> 00:04:16,019
you know I I kind of whenever the

00:04:13,079 --> 00:04:17,909
benefits of using it in in the talk but

00:04:16,019 --> 00:04:19,169
we've got a single API surface in a

00:04:17,909 --> 00:04:21,000
single programming language and we're

00:04:19,169 --> 00:04:23,099
able to sort of bring the two halves of

00:04:21,000 --> 00:04:25,199
our team back together like we're all

00:04:23,099 --> 00:04:27,090
sitting in the same area but half of

00:04:25,199 --> 00:04:29,759
them behalf of us work on iOS and half

00:04:27,090 --> 00:04:30,810
of us work on Android and it's nice to

00:04:29,759 --> 00:04:32,310
finally be able to talk with my

00:04:30,810 --> 00:04:33,200
co-workers about a specific piece of

00:04:32,310 --> 00:04:36,230
code that we are

00:04:33,200 --> 00:04:38,300
actually both using and working on so

00:04:36,230 --> 00:04:42,770
kind of along those lines how critical

00:04:38,300 --> 00:04:45,140
to making this work is Dart so the story

00:04:42,770 --> 00:04:49,790
i've been told by the flutter team and

00:04:45,140 --> 00:04:51,680
these guys are not you know non web

00:04:49,790 --> 00:04:54,620
developers and like two of the founders

00:04:51,680 --> 00:04:56,480
worked on WebKit and blink and chrome

00:04:54,620 --> 00:04:58,580
and the other one was the editor of the

00:04:56,480 --> 00:05:08,420
HTML spec for the ten years so these are

00:04:58,580 --> 00:05:09,830
like serious web UI guys and dart

00:05:08,420 --> 00:05:11,840
started the dart language so what be

00:05:09,830 --> 00:05:13,370
what I've been told is they started out

00:05:11,840 --> 00:05:17,060
with JavaScript and they try to make it

00:05:13,370 --> 00:05:19,190
work twice and the architecture of the

00:05:17,060 --> 00:05:22,160
UI system was you're always effectively

00:05:19,190 --> 00:05:24,500
allocating new objects as you rebuild

00:05:22,160 --> 00:05:26,690
your widget tree so you're potentially

00:05:24,500 --> 00:05:29,150
allocating you know thousands or

00:05:26,690 --> 00:05:31,940
millions of objects every frame and the

00:05:29,150 --> 00:05:34,340
dart virtual machines garbage collection

00:05:31,940 --> 00:05:37,850
system is so much more efficient that

00:05:34,340 --> 00:05:40,220
that particular kind of thing just works

00:05:37,850 --> 00:05:41,420
much better so they were they try to us

00:05:40,220 --> 00:05:44,690
in it and they they were able to take

00:05:41,420 --> 00:05:45,890
the dart language and move they were

00:05:44,690 --> 00:05:47,030
gonna take more of a react native

00:05:45,890 --> 00:05:49,670
approach to this they're gonna have a

00:05:47,030 --> 00:05:51,950
lot more machinery running on the sort

00:05:49,670 --> 00:05:53,300
of C+ C++ side of things but they

00:05:51,950 --> 00:05:54,590
realized that dart would be fast enough

00:05:53,300 --> 00:05:57,320
they could bring it all into the dart

00:05:54,590 --> 00:05:58,340
inside of the house so a lot of these

00:05:57,320 --> 00:06:00,710
things I was talking about as an

00:05:58,340 --> 00:06:02,510
advantage for flutter are because they

00:06:00,710 --> 00:06:05,180
were able to program more in the dart

00:06:02,510 --> 00:06:07,610
language and so I mean flutter is such a

00:06:05,180 --> 00:06:10,610
kind of full stack and caps elating

00:06:07,610 --> 00:06:12,620
approach what does it look like if I

00:06:10,610 --> 00:06:14,450
want to be able to pull in some native

00:06:12,620 --> 00:06:18,380
dependencies or rely on some existing

00:06:14,450 --> 00:06:19,730
library that isn't in Dart well you what

00:06:18,380 --> 00:06:21,470
you can do is you can use flutter has a

00:06:19,730 --> 00:06:24,590
plug-in systems where you can take a

00:06:21,470 --> 00:06:26,990
native piece of code and then through a

00:06:24,590 --> 00:06:29,870
fairly simple messaging interface

00:06:26,990 --> 00:06:32,270
connected to dart and then expose

00:06:29,870 --> 00:06:34,850
whatever kind of dart API you think is

00:06:32,270 --> 00:06:36,140
idiomatic for what you want to do so

00:06:34,850 --> 00:06:38,090
we're doing that in our application

00:06:36,140 --> 00:06:39,350
we're not only using it to to talk to

00:06:38,090 --> 00:06:41,740
native services but we're using it to

00:06:39,350 --> 00:06:44,600
talk to what I will now call legacy

00:06:41,740 --> 00:06:45,980
native libraries that do a quite a

00:06:44,600 --> 00:06:46,400
number of things and they'll even bring

00:06:45,980 --> 00:06:48,650
up their own

00:06:46,400 --> 00:06:51,380
you eye and do some operation and you'll

00:06:48,650 --> 00:06:53,300
get a message back on the dart side with

00:06:51,380 --> 00:06:55,789
for example the OAuth token for our

00:06:53,300 --> 00:06:58,100
first party sign-in library so that's

00:06:55,789 --> 00:07:01,490
that's one way you can also go the other

00:06:58,100 --> 00:07:03,800
way that we typically don't you know a

00:07:01,490 --> 00:07:05,690
flutter application is just a single

00:07:03,800 --> 00:07:07,820
window in the native operating system

00:07:05,690 --> 00:07:09,740
and it's doing all of its the flutter

00:07:07,820 --> 00:07:11,060
views are all just things going on as

00:07:09,740 --> 00:07:12,530
far as the native app is concerned it's

00:07:11,060 --> 00:07:15,620
just a hardware accelerated graphics

00:07:12,530 --> 00:07:17,240
surface that receives input so you could

00:07:15,620 --> 00:07:18,740
bring up a flutter application in its

00:07:17,240 --> 00:07:19,699
own view in your native application if

00:07:18,740 --> 00:07:22,160
you want to try it out for some

00:07:19,699 --> 00:07:23,570
subsection of your application there's

00:07:22,160 --> 00:07:24,860
not a lot of example code of doing that

00:07:23,570 --> 00:07:26,570
but I don't see any reason why you

00:07:24,860 --> 00:07:27,740
couldn't if you want to like invert it

00:07:26,570 --> 00:07:29,389
instead of having a halt flutter

00:07:27,740 --> 00:07:32,419
application with a few native plugins

00:07:29,389 --> 00:07:34,370
you could go the other way so again with

00:07:32,419 --> 00:07:36,110
with flutter I mean I mean flutter is

00:07:34,370 --> 00:07:37,610
driving everything down to the

00:07:36,110 --> 00:07:40,160
individual pixel right that's right this

00:07:37,610 --> 00:07:41,630
is a full-stack how does that affect

00:07:40,160 --> 00:07:43,340
something like there's a question here

00:07:41,630 --> 00:07:45,590
about whether or not there's our plans

00:07:43,340 --> 00:07:47,539
to target desktop platforms and kind of

00:07:45,590 --> 00:07:49,250
the work involved for that you'd have to

00:07:47,539 --> 00:07:50,780
be able to create everything from the

00:07:49,250 --> 00:07:53,900
ground up to work on something like

00:07:50,780 --> 00:07:56,419
Windows and that's right though though

00:07:53,900 --> 00:07:58,250
that you know I'm not gonna pre announce

00:07:56,419 --> 00:08:00,289
any like flutter plans flutter flutter

00:07:58,250 --> 00:08:02,240
is expressly like we are just doing

00:08:00,289 --> 00:08:04,190
mobile man it's like we're not gonna do

00:08:02,240 --> 00:08:06,169
web or not gonna do desktop but

00:08:04,190 --> 00:08:08,180
conceptually all you would have to port

00:08:06,169 --> 00:08:10,849
is that bottom layer the dart UI layer

00:08:08,180 --> 00:08:12,740
and even the C++ portion of that since

00:08:10,849 --> 00:08:16,000
it's largely extracted from Chrome which

00:08:12,740 --> 00:08:19,039
is its itself a cross-platform codebase

00:08:16,000 --> 00:08:20,360
that should be a pretty straight port so

00:08:19,039 --> 00:08:22,159
you know flutter is open source I

00:08:20,360 --> 00:08:23,780
encourage you all to try and contribute

00:08:22,159 --> 00:08:25,280
pull requests back to the flutter

00:08:23,780 --> 00:08:27,260
projects it's like hey there's flutter

00:08:25,280 --> 00:08:28,880
desktop now and you know this guy who

00:08:27,260 --> 00:08:30,380
doesn't even work at Google wrote it so

00:08:28,880 --> 00:08:31,270
I don't see any reason why that wouldn't

00:08:30,380 --> 00:08:33,349
be possible

00:08:31,270 --> 00:08:35,360
so you soldier alright you show some

00:08:33,349 --> 00:08:36,650
pretty cool bits of code with the

00:08:35,360 --> 00:08:39,260
streams and being able to implement

00:08:36,650 --> 00:08:40,969
everything from these primitives up what

00:08:39,260 --> 00:08:41,880
does it look like to describe a UI in

00:08:40,969 --> 00:08:44,339
fly

00:08:41,880 --> 00:08:46,230
and is there any plans to introduce some

00:08:44,339 --> 00:08:49,110
sugar kind of like JSX or something

00:08:46,230 --> 00:08:51,740
along these lines well there's no reason

00:08:49,110 --> 00:08:54,660
you couldn't write that sugaring layer

00:08:51,740 --> 00:08:56,880
though it's pretty declarative code I

00:08:54,660 --> 00:09:01,319
mean it's just like new widget child new

00:08:56,880 --> 00:09:03,600
widget child new widget children so by

00:09:01,319 --> 00:09:05,310
not introducing this this other kind of

00:09:03,600 --> 00:09:06,870
conceptual representation of your user

00:09:05,310 --> 00:09:11,310
interface you actually don't have to

00:09:06,870 --> 00:09:12,360
context switch between them so I don't

00:09:11,310 --> 00:09:16,680
know if anyone's ever found it necessary

00:09:12,360 --> 00:09:18,300
to do non JSX react but it's actually

00:09:16,680 --> 00:09:21,209
it's actually not that bad

00:09:18,300 --> 00:09:22,860
and similarly flutter is is very you

00:09:21,209 --> 00:09:24,240
know it's very ergonomic and your it

00:09:22,860 --> 00:09:28,199
feels like okay it's code it's code it's

00:09:24,240 --> 00:09:29,399
code it's code it's UI so you know don't

00:09:28,199 --> 00:09:33,449
knock it till you've tried it it's not

00:09:29,399 --> 00:09:36,500
that hard it's it's actually and and I

00:09:33,449 --> 00:09:39,420
often find one of my little personal

00:09:36,500 --> 00:09:41,730
things that I rant about is web template

00:09:39,420 --> 00:09:44,790
existence I'm always upset by them and

00:09:41,730 --> 00:09:46,370
I'm very happy with JSX because JSX is

00:09:44,790 --> 00:09:49,889
just a sugaring layer on lodge on

00:09:46,370 --> 00:09:53,040
JavaScript and you always need to do

00:09:49,889 --> 00:09:57,060
some UI some logic to render your UI

00:09:53,040 --> 00:09:59,009
that's purely UI related stuff and you

00:09:57,060 --> 00:10:00,420
know the flutter widget build function

00:09:59,009 --> 00:10:02,160
is just a function you can do whatever

00:10:00,420 --> 00:10:04,050
you want in there to construct your UI

00:10:02,160 --> 00:10:05,430
so we roll we'll call helper functions

00:10:04,050 --> 00:10:07,350
that build a portion of the UI and then

00:10:05,430 --> 00:10:09,899
return the results of those functions in

00:10:07,350 --> 00:10:12,269
our in our fully built up widget so you

00:10:09,899 --> 00:10:13,920
can compose functions to do your your

00:10:12,269 --> 00:10:17,279
top-level widget build if you were

00:10:13,920 --> 00:10:18,569
building or something complex so one of

00:10:17,279 --> 00:10:20,850
the trade-offs that comes with like

00:10:18,569 --> 00:10:23,069
having so much power and this is it

00:10:20,850 --> 00:10:25,199
makes tooling much more difficult and so

00:10:23,069 --> 00:10:27,660
react native and reacts the ecosystem

00:10:25,199 --> 00:10:29,310
has a lot of tooling is kind of already

00:10:27,660 --> 00:10:31,170
there can you kind of speak to what the

00:10:29,310 --> 00:10:32,759
tooling and the ecosystem looks like for

00:10:31,170 --> 00:10:36,120
flutter why I'm glad you asked that

00:10:32,759 --> 00:10:38,880
Shawn okay um so one of the nice things

00:10:36,120 --> 00:10:41,790
about dart is it runs in in dev mode it

00:10:38,880 --> 00:10:43,740
runs a headless server in your running

00:10:41,790 --> 00:10:45,449
application and you can connect to it

00:10:43,740 --> 00:10:47,430
from a web browser and it's got quite

00:10:45,449 --> 00:10:49,920
detailed statistics about what's going

00:10:47,430 --> 00:10:53,010
on with dart but that's also a you know

00:10:49,920 --> 00:10:54,730
like an HTTP API so your development

00:10:53,010 --> 00:10:56,639
tooling can talk over that

00:10:54,730 --> 00:11:01,779
API to the running dart virtual machine

00:10:56,639 --> 00:11:04,930
and Google working with JetBrains has

00:11:01,779 --> 00:11:06,010
developed plug-ins for IntelliJ that

00:11:04,930 --> 00:11:07,779
will give you you know source code level

00:11:06,010 --> 00:11:10,870
debugging and variable inspections so

00:11:07,779 --> 00:11:12,220
often inside of IntelliJ and you can do

00:11:10,870 --> 00:11:15,639
all the things you'd want to do in a

00:11:12,220 --> 00:11:17,850
typed language IDE you can command click

00:11:15,639 --> 00:11:20,800
on things and jump around but other

00:11:17,850 --> 00:11:25,750
there are other open source projects

00:11:20,800 --> 00:11:27,310
that talk to the dart debugging API so

00:11:25,750 --> 00:11:28,269
you can use it from inside of Adam and I

00:11:27,310 --> 00:11:31,120
think there's quite a good one for

00:11:28,269 --> 00:11:32,949
Visual Studio code as well so and you

00:11:31,120 --> 00:11:34,839
can write your own so there's there's

00:11:32,949 --> 00:11:36,160
good tooling there there's more tooling

00:11:34,839 --> 00:11:37,779
coming out if you've ever seen like sort

00:11:36,160 --> 00:11:38,889
of the the visual inspectors that Xcode

00:11:37,779 --> 00:11:41,170
gives you where you can like look at

00:11:38,889 --> 00:11:42,880
your UI and and you know click through

00:11:41,170 --> 00:11:45,070
the hierarchy and see how the how the

00:11:42,880 --> 00:11:46,540
components are constructed so there's

00:11:45,070 --> 00:11:48,279
more of that kind of tooling coming

00:11:46,540 --> 00:11:50,800
online you know as I mentioned flutter

00:11:48,279 --> 00:11:52,660
is just officially when alpha a few

00:11:50,800 --> 00:11:54,100
months ago and while it's still you know

00:11:52,660 --> 00:11:55,870
quite polished for a product that's

00:11:54,100 --> 00:11:57,699
early on you know these things are

00:11:55,870 --> 00:12:00,880
coming online so I'd expect to see more

00:11:57,699 --> 00:12:03,790
and more of that stuff coming how is the

00:12:00,880 --> 00:12:05,589
because it is so new how is the

00:12:03,790 --> 00:12:07,899
third-party ecosystem there are a lot of

00:12:05,589 --> 00:12:10,569
third-party plugins or packages or not

00:12:07,899 --> 00:12:12,850
or is it primarily well I mean I think I

00:12:10,569 --> 00:12:15,970
think Google is still driving flutter

00:12:12,850 --> 00:12:18,750
pretty heavily but one thing I will say

00:12:15,970 --> 00:12:21,130
is because it's based in Dart

00:12:18,750 --> 00:12:22,870
you know dart got a big push from Google

00:12:21,130 --> 00:12:24,160
a while back as maybe an alternate to a

00:12:22,870 --> 00:12:26,860
higher performance alternative to

00:12:24,160 --> 00:12:28,630
JavaScript in the web browser and that

00:12:26,860 --> 00:12:30,600
wasn't really successful but they

00:12:28,630 --> 00:12:33,339
continue to use dart as a production

00:12:30,600 --> 00:12:34,660
language for our web developers because

00:12:33,339 --> 00:12:35,920
a lot of them were coming from

00:12:34,660 --> 00:12:37,540
environments where they really wanted

00:12:35,920 --> 00:12:40,240
like we've got a gigantic team and we

00:12:37,540 --> 00:12:41,980
want a lot of static typing support so

00:12:40,240 --> 00:12:43,690
mainstream dart if going to the

00:12:41,980 --> 00:12:45,370
dartlang.org page it talks a lot about

00:12:43,690 --> 00:12:48,220
the dart dev compiler which is actually

00:12:45,370 --> 00:12:49,990
a babel style transpiler and it emits

00:12:48,220 --> 00:12:52,630
fairly readable JavaScript which is used

00:12:49,990 --> 00:12:54,190
with angular Dart so a lot of that code

00:12:52,630 --> 00:12:56,199
has you know some of the some of that

00:12:54,190 --> 00:12:59,170
code is angular specific but a lot of it

00:12:56,199 --> 00:13:01,899
is not so there's quite a lot of dart

00:12:59,170 --> 00:13:04,209
code that you can use directly with your

00:13:01,899 --> 00:13:06,910
flutter application that was maybe

00:13:04,209 --> 00:13:08,279
originally written as logical bindings

00:13:06,910 --> 00:13:09,749
that you could use from

00:13:08,279 --> 00:13:11,009
in angulardart which can also use them

00:13:09,749 --> 00:13:12,540
in flutter so there's there's a big

00:13:11,009 --> 00:13:14,490
ecosystem of that in fact some of the

00:13:12,540 --> 00:13:17,129
stuff I was mentioning in my talk like

00:13:14,490 --> 00:13:19,740
the RX dart implementation and the the

00:13:17,129 --> 00:13:21,600
Redux implementation for dart were

00:13:19,740 --> 00:13:23,370
originally written by people who had

00:13:21,600 --> 00:13:24,600
been using angular dart for various

00:13:23,370 --> 00:13:26,490
reasons and some of them weren't even

00:13:24,600 --> 00:13:28,680
Google engineers so it's there's there

00:13:26,490 --> 00:13:30,480
is there's an ecosystem there you know

00:13:28,680 --> 00:13:32,399
it's not as gigantic as JavaScript

00:13:30,480 --> 00:13:34,079
currently is but you you aren't having a

00:13:32,399 --> 00:13:35,550
cold start you actually have some code

00:13:34,079 --> 00:13:36,829
you can look at and some people in the

00:13:35,550 --> 00:13:40,259
community that you can communicate with

00:13:36,829 --> 00:13:46,139
on the dart and flutter getters that's

00:13:40,259 --> 00:13:48,089
the the main live chat channel since

00:13:46,139 --> 00:13:51,449
Google is kind of the driving force here

00:13:48,089 --> 00:13:54,470
and is reimplemented the ground up does

00:13:51,449 --> 00:13:57,509
that am i able to use kind of the native

00:13:54,470 --> 00:13:59,579
like cameras and sensors and whatnot is

00:13:57,509 --> 00:14:01,290
that already yeah I think most of the

00:13:59,579 --> 00:14:02,819
things that you're gonna want to do like

00:14:01,290 --> 00:14:05,850
you know the things that most developers

00:14:02,819 --> 00:14:07,649
will want to do are going to be exposed

00:14:05,850 --> 00:14:09,240
as pre-written plug-ins there's a number

00:14:07,649 --> 00:14:10,589
of them available and we're writing more

00:14:09,240 --> 00:14:13,709
and third parties are starting to write

00:14:10,589 --> 00:14:17,040
more of them you know you haven't asked

00:14:13,709 --> 00:14:18,689
what flutter can't do so I should

00:14:17,040 --> 00:14:20,610
mention that as a caveat for anyone

00:14:18,689 --> 00:14:23,309
who's like this is great I'm going to

00:14:20,610 --> 00:14:24,720
I'm gonna use it right away with you

00:14:23,309 --> 00:14:26,100
know I'm gonna embed a video and I'm

00:14:24,720 --> 00:14:27,839
gonna embed the Google Maps from the

00:14:26,100 --> 00:14:31,800
Google Maps API and that kind of

00:14:27,839 --> 00:14:34,199
interleaving of flutter UI and native UI

00:14:31,800 --> 00:14:36,420
views is not something that flutter

00:14:34,199 --> 00:14:38,850
supports right now you can you can go to

00:14:36,420 --> 00:14:41,309
a full screen or a full view that has

00:14:38,850 --> 00:14:43,079
your native stuff in it but you can't

00:14:41,309 --> 00:14:45,660
currently mix and match them and I know

00:14:43,079 --> 00:14:47,970
that there's some some efforts to to

00:14:45,660 --> 00:14:49,920
address that but but that the current

00:14:47,970 --> 00:14:51,449
state of the world is like if you want a

00:14:49,920 --> 00:14:55,079
flutter UI it's just gonna be flutter

00:14:51,449 --> 00:14:57,000
stuff so it doesn't kind of in many ways

00:14:55,079 --> 00:14:59,850
like an all-or-nothing proposition like

00:14:57,000 --> 00:15:03,240
there is some some bits of that of

00:14:59,850 --> 00:15:04,740
bridging and whatnot but how would you I

00:15:03,240 --> 00:15:06,360
mean even with down to the language

00:15:04,740 --> 00:15:08,040
level riders buying into dart coming

00:15:06,360 --> 00:15:08,610
from say JavaScript or typescript or

00:15:08,040 --> 00:15:11,579
something like that

00:15:08,610 --> 00:15:13,230
how would you pitch this to someone

00:15:11,579 --> 00:15:15,629
who's coming from from reaction native

00:15:13,230 --> 00:15:19,030
and and JavaScript and whatnot how would

00:15:15,629 --> 00:15:21,220
you pitch them on dart and flutter

00:15:19,030 --> 00:15:25,090
I don't know if thought I would go in

00:15:21,220 --> 00:15:29,920
you know if you're using if you're using

00:15:25,090 --> 00:15:33,420
ES 2017 syntax with you know typescript

00:15:29,920 --> 00:15:35,500
or flow I would say you're gonna have a

00:15:33,420 --> 00:15:37,840
comparable experience with Dart

00:15:35,500 --> 00:15:40,390
it's a fairly modern language it has it

00:15:37,840 --> 00:15:43,300
has a weight a sink it has generators it

00:15:40,390 --> 00:15:46,510
has generic types it has you know

00:15:43,300 --> 00:15:48,160
functions as first-class objects it has

00:15:46,510 --> 00:15:51,370
no primitive types like everything is

00:15:48,160 --> 00:15:54,370
conceptually an object so it's a fairly

00:15:51,370 --> 00:15:55,870
modern language it's also one of the the

00:15:54,370 --> 00:15:58,240
flutter engineering team founders said

00:15:55,870 --> 00:15:59,290
yeah darts kind of a boring language so

00:15:58,240 --> 00:16:00,910
it's not it's not a particularly

00:15:59,290 --> 00:16:04,210
surprising language and it has a lot of

00:16:00,910 --> 00:16:05,770
nice syntactic sugar so I don't think

00:16:04,210 --> 00:16:09,250
Dart should prevent you from looking at

00:16:05,770 --> 00:16:11,020
flutter if you're coming from a you know

00:16:09,250 --> 00:16:12,820
I would say maybe the more of the

00:16:11,020 --> 00:16:14,500
immediate can competition is if you're

00:16:12,820 --> 00:16:16,780
coming from native mobile development

00:16:14,500 --> 00:16:23,370
flutters a much more pleasant experience

00:16:16,780 --> 00:16:25,600
so if you if you can't sell your team on

00:16:23,370 --> 00:16:27,430
bringing javascript into their native

00:16:25,600 --> 00:16:29,320
apps for whatever reason flutter might

00:16:27,430 --> 00:16:31,390
actually be a more appealing solution

00:16:29,320 --> 00:16:33,610
because you can you can do more with a

00:16:31,390 --> 00:16:35,010
smaller team and you also get really

00:16:33,610 --> 00:16:37,900
good runtime performance

00:16:35,010 --> 00:16:40,120
so along those lines can kind of speak

00:16:37,900 --> 00:16:43,240
to the degree of code reuse you'll get

00:16:40,120 --> 00:16:44,410
across these different platforms oh the

00:16:43,240 --> 00:16:45,790
the two platforms that you can target

00:16:44,410 --> 00:16:49,270
right now with flutter or ios and

00:16:45,790 --> 00:16:51,100
android and you know it's going to be

00:16:49,270 --> 00:16:53,410
you know if you don't have to do

00:16:51,100 --> 00:16:56,080
something that's like only on the native

00:16:53,410 --> 00:17:03,310
platform you've got a plugin for it you

00:16:56,080 --> 00:17:05,079
can get high 90s you know almost all of

00:17:03,310 --> 00:17:07,329
your code certainly all of your sort of

00:17:05,079 --> 00:17:09,339
application level code application logic

00:17:07,329 --> 00:17:12,310
UI code is going to be shared across

00:17:09,339 --> 00:17:14,380
platforms and you can address platform

00:17:12,310 --> 00:17:16,990
differences like in one of the demos if

00:17:14,380 --> 00:17:18,550
you go watch the talk that Eric Seidel

00:17:16,990 --> 00:17:20,890
did about flutter at Strange Loop

00:17:18,550 --> 00:17:24,280
recently it's a really good deep dive on

00:17:20,890 --> 00:17:26,560
flutter itself but one of the standard

00:17:24,280 --> 00:17:28,209
demos is to show over scroll behavior in

00:17:26,560 --> 00:17:29,740
a list so if you're on if you're towards

00:17:28,209 --> 00:17:30,540
the end of a list on Android you get

00:17:29,740 --> 00:17:32,580
this kind of glow

00:17:30,540 --> 00:17:35,040
the bottom and if you're on iOS and you

00:17:32,580 --> 00:17:37,530
do the same gesture it'll kind of bounce

00:17:35,040 --> 00:17:39,830
and and and it preserves those kind of

00:17:37,530 --> 00:17:42,120
platform differences across the flutter

00:17:39,830 --> 00:17:43,740
applications but the application use an

00:17:42,120 --> 00:17:46,740
application developer only have to worry

00:17:43,740 --> 00:17:48,720
about the you know semantically loading

00:17:46,740 --> 00:17:50,460
up your your virtual list or your

00:17:48,720 --> 00:17:52,020
scrolling list and rendering its

00:17:50,460 --> 00:17:54,810
contents and that's going to be rendered

00:17:52,020 --> 00:17:57,630
pixel per pixel on both platforms within

00:17:54,810 --> 00:17:59,790
the limits of graphics hardware so in

00:17:57,630 --> 00:18:01,920
this case we're relying on effectively

00:17:59,790 --> 00:18:03,710
Google to re-implement these behaviors

00:18:01,920 --> 00:18:06,090
that's right on both on both platforms

00:18:03,710 --> 00:18:08,300
that goes for things like accessibility

00:18:06,090 --> 00:18:10,770
as well it's like how do you actually

00:18:08,300 --> 00:18:12,570
how how is flutter kind of approaching

00:18:10,770 --> 00:18:14,070
the accessibility problems you know

00:18:12,570 --> 00:18:15,600
they've just been landing a lot of code

00:18:14,070 --> 00:18:18,780
related to accessibility and

00:18:15,600 --> 00:18:20,160
right-to-left text because we have to

00:18:18,780 --> 00:18:23,550
have that stuff before we can shape our

00:18:20,160 --> 00:18:25,700
happens like yeah you got to do this but

00:18:23,550 --> 00:18:29,220
they've done it before for Chrome and

00:18:25,700 --> 00:18:30,570
WebKit and so on you know I haven't even

00:18:29,220 --> 00:18:32,430
read those api's because they've been

00:18:30,570 --> 00:18:34,340
changing a lot recently but they really

00:18:32,430 --> 00:18:36,120
did just land a bunch of stuff but

00:18:34,340 --> 00:18:38,520
essentially what they're doing is you

00:18:36,120 --> 00:18:41,730
can kind of semantically decorate your

00:18:38,520 --> 00:18:44,280
widgets and that decoration interacts

00:18:41,730 --> 00:18:46,320
with a native accessibility system so

00:18:44,280 --> 00:18:47,730
you know when you when you gesture on a

00:18:46,320 --> 00:18:52,110
widget it will talk to the native

00:18:47,730 --> 00:18:53,940
screenreader you know so you should be

00:18:52,110 --> 00:18:55,410
able to do full accessibility with the

00:18:53,940 --> 00:18:56,850
flutter but it's that's code that

00:18:55,410 --> 00:18:59,430
literally just landed in the last few

00:18:56,850 --> 00:19:02,430
weeks so go read the api's and then you

00:18:59,430 --> 00:19:04,080
will know more than I do there's kind of

00:19:02,430 --> 00:19:07,340
a general question here about some I

00:19:04,080 --> 00:19:09,180
know if you can speak to maybe the

00:19:07,340 --> 00:19:12,330
whether or not the web whether it

00:19:09,180 --> 00:19:15,210
becomes like a full ecosystem comparable

00:19:12,330 --> 00:19:17,730
maybe to the kind of native experience I

00:19:15,210 --> 00:19:20,460
know your flutter is purely a native

00:19:17,730 --> 00:19:23,340
mobile targeted thing well you know I

00:19:20,460 --> 00:19:25,530
started at Google as a web developer and

00:19:23,340 --> 00:19:26,880
I sought it out particularly to do web

00:19:25,530 --> 00:19:29,700
development I'm actually a big believer

00:19:26,880 --> 00:19:30,840
in the web but I had a had a chance to

00:19:29,700 --> 00:19:34,560
do some native develop and I thought

00:19:30,840 --> 00:19:36,870
that would be kind of fun to do Google

00:19:34,560 --> 00:19:38,640
is also working on you know progressive

00:19:36,870 --> 00:19:41,100
web applications so if you if you want

00:19:38,640 --> 00:19:42,700
the reach of a web application we're

00:19:41,100 --> 00:19:46,930
doing a lot of stuff

00:19:42,700 --> 00:19:49,030
that that is important to the web as a

00:19:46,930 --> 00:19:50,770
platform so if you if you follow my

00:19:49,030 --> 00:19:53,320
friend Alex Russell slightly late on

00:19:50,770 --> 00:19:55,600
Twitter he's he just published a great

00:19:53,320 --> 00:19:58,330
thing about performance benchmarking and

00:19:55,600 --> 00:20:01,420
you know he's got examples that are both

00:19:58,330 --> 00:20:03,250
reactive API examples and using things

00:20:01,420 --> 00:20:05,590
like web components and service workers

00:20:03,250 --> 00:20:09,340
and so like fundamental web technologies

00:20:05,590 --> 00:20:13,780
so you know I think Google finds a lot

00:20:09,340 --> 00:20:15,190
of its leverage technically in support

00:20:13,780 --> 00:20:18,250
of the platform through its work with

00:20:15,190 --> 00:20:19,840
Chrome so you know the things that we

00:20:18,250 --> 00:20:22,240
can get into chrome and can get

00:20:19,840 --> 00:20:26,290
standardized that make the platform

00:20:22,240 --> 00:20:28,150
itself better are really going to help

00:20:26,290 --> 00:20:30,520
everyone who's working you know whether

00:20:28,150 --> 00:20:33,130
you were using react or review or any of

00:20:30,520 --> 00:20:35,220
these other frameworks if you can you

00:20:33,130 --> 00:20:38,770
know use the serviceworker to cache your

00:20:35,220 --> 00:20:41,080
data for example you know so you can

00:20:38,770 --> 00:20:44,200
have a good laugh line experience so I

00:20:41,080 --> 00:20:45,700
you know I think it's a both/and thing

00:20:44,200 --> 00:20:48,820
you know sometimes sometimes you're

00:20:45,700 --> 00:20:50,380
gonna need to pick a different set of

00:20:48,820 --> 00:20:51,910
technologies depending on the needs of

00:20:50,380 --> 00:20:54,220
your application you know so a lot of

00:20:51,910 --> 00:20:56,200
people are like yeah I'm gonna I'm gonna

00:20:54,220 --> 00:20:57,730
just do a web application and that's

00:20:56,200 --> 00:20:59,350
completely the right thing to do for

00:20:57,730 --> 00:21:02,140
their users you have to be connected to

00:20:59,350 --> 00:21:04,570
the net or you can use native caching in

00:21:02,140 --> 00:21:05,920
the web browser but maybe you want to

00:21:04,570 --> 00:21:07,120
have a different kinds of interaction

00:21:05,920 --> 00:21:09,460
models that are a little harder to

00:21:07,120 --> 00:21:11,710
implement as web you eyes at the moment

00:21:09,460 --> 00:21:14,350
you know and then you will be able to

00:21:11,710 --> 00:21:16,120
you know in two three years and then

00:21:14,350 --> 00:21:18,250
you'll be able to do something else

00:21:16,120 --> 00:21:19,600
only on native systems or systems that

00:21:18,250 --> 00:21:21,370
have kind of native level access so it's

00:21:19,600 --> 00:21:23,410
a it's a spectrum of development and

00:21:21,370 --> 00:21:25,210
google has products kind of it you know

00:21:23,410 --> 00:21:27,520
in all stages along that one it does

00:21:25,210 --> 00:21:29,170
seem very nice it's there's a lot of

00:21:27,520 --> 00:21:32,110
opportunity I guess for kind of osmosis

00:21:29,170 --> 00:21:33,550
between these teams exactly yeah just as

00:21:32,110 --> 00:21:34,630
a side note I mean if anyone has any

00:21:33,550 --> 00:21:37,090
questions go ahead and raise your hand

00:21:34,630 --> 00:21:38,860
and someone will pass out of mic and

00:21:37,090 --> 00:21:42,510
we'll just keep going on this in the

00:21:38,860 --> 00:21:44,230
meantime though are there any

00:21:42,510 --> 00:21:46,780
reassurances you might be able to give

00:21:44,230 --> 00:21:50,050
in terms of someone who from the outside

00:21:46,780 --> 00:21:52,120
might be nervous to adopt something that

00:21:50,050 --> 00:21:54,850
Google might throw away even so dart or

00:21:52,120 --> 00:21:56,980
flutter why I can talk I can talk about

00:21:54,850 --> 00:22:00,130
the potential for inertia

00:21:56,980 --> 00:22:01,300
with dart and flutter and and you know

00:22:00,130 --> 00:22:03,610
this is this is a question that I asked

00:22:01,300 --> 00:22:04,510
myself and I'm always that you work

00:22:03,610 --> 00:22:06,580
inside of a large technology

00:22:04,510 --> 00:22:07,660
organization like Google and you know

00:22:06,580 --> 00:22:09,400
part of your effectiveness is

00:22:07,660 --> 00:22:12,220
effectiveness is based on how well you

00:22:09,400 --> 00:22:13,960
understand the internal tooling that may

00:22:12,220 --> 00:22:15,010
or may not be used outside of Google and

00:22:13,960 --> 00:22:16,330
when you have a chance to work on

00:22:15,010 --> 00:22:18,640
something that is available outside of

00:22:16,330 --> 00:22:20,559
Google I golike great you know this is

00:22:18,640 --> 00:22:21,970
like a little a little potential

00:22:20,559 --> 00:22:24,460
security for me if I ever want to work

00:22:21,970 --> 00:22:28,270
somebody somewhere else but why would

00:22:24,460 --> 00:22:31,559
you but you know if you did so the

00:22:28,270 --> 00:22:33,340
things I can say about dart and flutter

00:22:31,559 --> 00:22:35,650
even though we didn't end up

00:22:33,340 --> 00:22:36,880
incorporating dart as a programming

00:22:35,650 --> 00:22:40,380
language you could use inside of the web

00:22:36,880 --> 00:22:43,240
browser we wrote the dart dev compiler

00:22:40,380 --> 00:22:47,140
which is a transpiler from dart to

00:22:43,240 --> 00:22:49,679
JavaScript so and using that we

00:22:47,140 --> 00:22:53,040
developed angular dart so there's a

00:22:49,679 --> 00:22:56,860
gigantic system of angular dart code

00:22:53,040 --> 00:22:58,929
inside of Google with the product that

00:22:56,860 --> 00:23:00,340
our advertisers use to spend literally

00:22:58,929 --> 00:23:05,290
billions of dollars with us

00:23:00,340 --> 00:23:08,950
so darts not going away that is a a mini

00:23:05,290 --> 00:23:11,490
years codebase that's being used for the

00:23:08,950 --> 00:23:14,380
front end of the adwords app at Google

00:23:11,490 --> 00:23:15,670
that seemed very reassuring yeah and in

00:23:14,380 --> 00:23:18,040
addition to that in addition to those

00:23:15,670 --> 00:23:19,900
billions of dollars flutter is not just

00:23:18,040 --> 00:23:21,100
being used for ios and android

00:23:19,900 --> 00:23:24,070
development there's a project called

00:23:21,100 --> 00:23:28,090
turquoise which is you know sort of a

00:23:24,070 --> 00:23:30,340
next-gen mobile operating system which

00:23:28,090 --> 00:23:35,020
is also open source and it's kind of got

00:23:30,340 --> 00:23:36,760
a more of a microkernel approach to the

00:23:35,020 --> 00:23:39,490
the native OS part of it with the

00:23:36,760 --> 00:23:41,679
underlying OS but its UI system is also

00:23:39,490 --> 00:23:43,360
written in flutter with a different set

00:23:41,679 --> 00:23:45,970
of widgets so they don't they don't it's

00:23:43,360 --> 00:23:47,500
not just this material design or iOS

00:23:45,970 --> 00:23:49,360
style widgets it's you know it's its own

00:23:47,500 --> 00:23:51,580
thing and it's got its own capabilities

00:23:49,360 --> 00:23:53,950
so you know flutter is getting

00:23:51,580 --> 00:23:56,550
investment from other areas of the

00:23:53,950 --> 00:24:00,150
company it's not just it's not just ads

00:23:56,550 --> 00:24:02,640
for this one kind of specialized case

00:24:00,150 --> 00:24:06,220
there's a question here about you know

00:24:02,640 --> 00:24:08,950
having an exclusive it's not proprietary

00:24:06,220 --> 00:24:09,400
but it is kind of there is one kind of

00:24:08,950 --> 00:24:12,040
powerhouse

00:24:09,400 --> 00:24:15,610
behind it exclusive kind of full stack

00:24:12,040 --> 00:24:17,440
SDK is usually a bit of a constraint on

00:24:15,610 --> 00:24:20,410
team on teams right so one that you

00:24:17,440 --> 00:24:22,720
might want to avoid there's kind of high

00:24:20,410 --> 00:24:23,830
infrastructure costs associated with if

00:24:22,720 --> 00:24:25,000
this goes away or something along those

00:24:23,830 --> 00:24:28,330
lines

00:24:25,000 --> 00:24:33,520
is there a benefits to kind of this full

00:24:28,330 --> 00:24:36,040
stack approach well yes so I don't know

00:24:33,520 --> 00:24:38,380
if anyone here has done Android and iOS

00:24:36,040 --> 00:24:40,410
development together or worked on teams

00:24:38,380 --> 00:24:43,030
that are doing both kinds of development

00:24:40,410 --> 00:24:44,800
one of the you know like I'm not gonna

00:24:43,030 --> 00:24:46,710
like slam Android it's extremely

00:24:44,800 --> 00:24:48,940
successful you should all target Android

00:24:46,710 --> 00:24:50,500
but one thing that Android developers

00:24:48,940 --> 00:24:51,700
have to deal with that iOS developers

00:24:50,500 --> 00:24:53,170
don't have to deal with as much as

00:24:51,700 --> 00:24:55,630
version skew across devices and

00:24:53,170 --> 00:24:57,280
manufacturers you know there there are

00:24:55,630 --> 00:24:58,900
in the wild many versions of Android

00:24:57,280 --> 00:25:00,400
that people end up having to support on

00:24:58,900 --> 00:25:05,800
many many different kinds of hardware

00:25:00,400 --> 00:25:07,330
and iOS doesn't have that because Apple

00:25:05,800 --> 00:25:10,090
controls things pretty tightly and

00:25:07,330 --> 00:25:11,800
flutter is kind of in between so you get

00:25:10,090 --> 00:25:13,630
the advantage of sort of like there

00:25:11,800 --> 00:25:15,310
being one version of flutter it's not

00:25:13,630 --> 00:25:17,500
it's not forked it's workable

00:25:15,310 --> 00:25:19,750
I mean it's open source you you could do

00:25:17,500 --> 00:25:22,570
that but you really probably don't want

00:25:19,750 --> 00:25:24,610
to just there is there's one API surface

00:25:22,570 --> 00:25:25,930
and then it's a really responsive team

00:25:24,610 --> 00:25:28,390
they're very friendly team so you can

00:25:25,930 --> 00:25:31,690
you can talk to them on getter as you

00:25:28,390 --> 00:25:32,950
develop your own opinion about how the

00:25:31,690 --> 00:25:35,260
clutter should work and you can submit

00:25:32,950 --> 00:25:36,940
pull requests and so on so you can you

00:25:35,260 --> 00:25:39,820
you have a stake in how flutter could

00:25:36,940 --> 00:25:42,190
develop and that was also like a risk

00:25:39,820 --> 00:25:44,230
medic mitigation thing is like even if

00:25:42,190 --> 00:25:46,120
Google for some reason thought that they

00:25:44,230 --> 00:25:48,550
they needed to drop dart and flutter

00:25:46,120 --> 00:25:50,350
like C++ source code is that open source

00:25:48,550 --> 00:25:53,440
the dart source code is open source you

00:25:50,350 --> 00:25:55,090
know you can you can keep it all on your

00:25:53,440 --> 00:25:58,840
own repository and keep going if you

00:25:55,090 --> 00:26:00,460
really feel you must I think one thing

00:25:58,840 --> 00:26:02,980
you mentioned beforehand is kind of

00:26:00,460 --> 00:26:04,690
flutter takes the look and feel of its

00:26:02,980 --> 00:26:06,640
own its own style right it's not

00:26:04,690 --> 00:26:09,670
necessarily trying to mimic the native

00:26:06,640 --> 00:26:11,920
look well what it's doing it does mimic

00:26:09,670 --> 00:26:15,370
delayed it in the native look for iOS in

00:26:11,920 --> 00:26:16,780
certain cases so it's just we don't want

00:26:15,370 --> 00:26:19,210
to have people having the experience of

00:26:16,780 --> 00:26:21,040
like well I tried out on iOS and it just

00:26:19,210 --> 00:26:22,420
looks like you know some other weird

00:26:21,040 --> 00:26:25,840
Google thing it's like no it looks like

00:26:22,420 --> 00:26:28,090
an iOS app the default design language

00:26:25,840 --> 00:26:30,520
is material design so you know that's

00:26:28,090 --> 00:26:33,520
that Google you know their fault Android

00:26:30,520 --> 00:26:37,210
material design look but the like the

00:26:33,520 --> 00:26:39,370
the specifics are kind of native to the

00:26:37,210 --> 00:26:42,490
platform but you really can rewrite that

00:26:39,370 --> 00:26:44,380
stuff and and override it you can skin

00:26:42,490 --> 00:26:46,750
it and theme it to your heart's content

00:26:44,380 --> 00:26:48,130
and you've got pretty pretty powerful

00:26:46,750 --> 00:26:50,500
abstractions in the way you compose

00:26:48,130 --> 00:26:51,790
widgets to be able to override default

00:26:50,500 --> 00:26:53,170
behavior in your application and

00:26:51,790 --> 00:26:53,620
including things like animation and

00:26:53,170 --> 00:26:56,080
curves

00:26:53,620 --> 00:26:58,650
yeah I think the strange loop talk did a

00:26:56,080 --> 00:27:01,600
good job of kind of showing just how

00:26:58,650 --> 00:27:03,190
flexible it is all right I think that's

00:27:01,600 --> 00:27:04,930
probably all we have time for thank you

00:27:03,190 --> 00:27:07,140
very much please thank Gavin for his

00:27:04,930 --> 00:27:07,140

YouTube URL: https://www.youtube.com/watch?v=F28ecHrGH3w


