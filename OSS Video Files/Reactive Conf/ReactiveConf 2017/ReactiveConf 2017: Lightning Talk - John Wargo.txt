Title: ReactiveConf 2017: Lightning Talk - John Wargo
Publication date: 2017-11-24
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,040 --> 00:00:07,440
[Music]

00:00:19,670 --> 00:00:23,810
so um how many people I noticed earlier

00:00:22,160 --> 00:00:25,789
that not many people raised their hand

00:00:23,810 --> 00:00:27,410
about typescript I'm assuming a lot of

00:00:25,789 --> 00:00:29,150
you are JavaScript developers I'm

00:00:27,410 --> 00:00:31,730
assuming also that many of you are

00:00:29,150 --> 00:00:33,890
either familiar with or use Visual

00:00:31,730 --> 00:00:35,600
Studio code and so I saw a presentation

00:00:33,890 --> 00:00:37,790
recently where someone from the code

00:00:35,600 --> 00:00:39,410
team and too talked about a new feature

00:00:37,790 --> 00:00:41,059
they had I think if you haven't seen

00:00:39,410 --> 00:00:44,210
this this is really interesting so if

00:00:41,059 --> 00:00:45,260
you decorate your JavaScript files so

00:00:44,210 --> 00:00:47,780
this is just a plain old everyday

00:00:45,260 --> 00:00:51,920
JavaScript file if you decorate the file

00:00:47,780 --> 00:00:53,930
with this at TS - check parameter what

00:00:51,920 --> 00:00:56,120
happens is that a normal everyday

00:00:53,930 --> 00:00:59,059
javascript file suddenly starts to

00:00:56,120 --> 00:01:02,329
represent errors that are caught by the

00:00:59,059 --> 00:01:04,100
typescript compiler so instead of

00:01:02,329 --> 00:01:05,179
converting my file to a typescript file

00:01:04,100 --> 00:01:07,280
and getting all the benefits of the

00:01:05,179 --> 00:01:09,500
typescript compiler I can just add this

00:01:07,280 --> 00:01:11,210
decorator to the top of the JavaScript

00:01:09,500 --> 00:01:13,820
file in Visual Studio code and it

00:01:11,210 --> 00:01:16,220
happens automatically yes

00:01:13,820 --> 00:01:17,810
all right all right here we go all right

00:01:16,220 --> 00:01:19,220
so you noticed as soon as I added this

00:01:17,810 --> 00:01:20,899
suddenly it showed me that there was a

00:01:19,220 --> 00:01:22,970
problem here where this read-only colon

00:01:20,899 --> 00:01:24,439
false and I can hover over it and it

00:01:22,970 --> 00:01:26,479
tells me blah blah blah there's

00:01:24,439 --> 00:01:27,979
something wrong with that but I know

00:01:26,479 --> 00:01:29,420
there's a problem and it's a developer I

00:01:27,979 --> 00:01:31,310
can start to poke through this since I

00:01:29,420 --> 00:01:32,689
have three minutes left I'm not going to

00:01:31,310 --> 00:01:35,000
describe the whole scenario but

00:01:32,689 --> 00:01:37,399
basically if I come over here and click

00:01:35,000 --> 00:01:39,049
on the property definition and I take a

00:01:37,399 --> 00:01:41,360
look and I see okay I've got a set of

00:01:39,049 --> 00:01:44,299
attributes right property descriptor

00:01:41,360 --> 00:01:46,159
when I click on the the attributes I see

00:01:44,299 --> 00:01:49,600
that my available options are listed

00:01:46,159 --> 00:01:52,790
here and read-only is not one of them

00:01:49,600 --> 00:01:55,310
okay so this code would have would have

00:01:52,790 --> 00:01:57,049
executed but nothing would have happened

00:01:55,310 --> 00:01:58,820
around that particular parameter because

00:01:57,049 --> 00:02:01,759
I used the wrong parameter and so what I

00:01:58,820 --> 00:02:03,380
can do is I can take this out use

00:02:01,759 --> 00:02:04,840
type-ahead to catch up so it's

00:02:03,380 --> 00:02:08,509
technically called intellisense

00:02:04,840 --> 00:02:10,729
to catch the right property and then I

00:02:08,509 --> 00:02:13,250
fixed my code so before code that never

00:02:10,729 --> 00:02:14,570
would have run I've suddenly fixed all

00:02:13,250 --> 00:02:16,730
right now if I look further down in the

00:02:14,570 --> 00:02:18,320
code I'll notice I have this thing

00:02:16,730 --> 00:02:19,910
called ship weight is greater than 100

00:02:18,320 --> 00:02:21,260
now if I had more than two minutes I

00:02:19,910 --> 00:02:22,489
would let you stare at the code and see

00:02:21,260 --> 00:02:24,079
if you can figure out what's wrong here

00:02:22,489 --> 00:02:26,329
but I'm just going to tell you what it

00:02:24,079 --> 00:02:28,250
is and because the time but basically

00:02:26,329 --> 00:02:31,700
what's happening is this console dot log

00:02:28,250 --> 00:02:33,440
would never execute why because I'm

00:02:31,700 --> 00:02:36,230
comparing an object to see

00:02:33,440 --> 00:02:38,210
if it's greater than 100 right see ship

00:02:36,230 --> 00:02:40,910
wait up whoops ship wait here it's a

00:02:38,210 --> 00:02:44,060
function and I'm not actually calling

00:02:40,910 --> 00:02:45,740
the function code so if I put my left

00:02:44,060 --> 00:02:47,840
paren a right paren there suddenly I've

00:02:45,740 --> 00:02:50,630
converted it from the result of the

00:02:47,840 --> 00:02:53,060
function call greater than 100 then this

00:02:50,630 --> 00:02:59,180
line here would work so am I done any

00:02:53,060 --> 00:03:02,900
more errors no you're wrong all right so

00:02:59,180 --> 00:03:04,340
if I go here I've got a function and I

00:03:02,900 --> 00:03:07,460
have the ability with typescript to

00:03:04,340 --> 00:03:09,170
decorate the function definition in such

00:03:07,460 --> 00:03:11,900
a way that I can define the parameter so

00:03:09,170 --> 00:03:16,340
if I go here this is hard to do with the

00:03:11,900 --> 00:03:17,750
keyboard give me one second here so now

00:03:16,340 --> 00:03:20,360
I'm adding documentation of the function

00:03:17,750 --> 00:03:22,520
and it's asking me what the type is of

00:03:20,360 --> 00:03:27,050
the parameter that's passed in here and

00:03:22,520 --> 00:03:29,690
so if I say it's a string or oops I did

00:03:27,050 --> 00:03:38,390
this every time hang on if it's a string

00:03:29,690 --> 00:03:40,550
or an array of string right so now I'm

00:03:38,390 --> 00:03:42,380
typescript knows that the email address

00:03:40,550 --> 00:03:44,930
parameter comes in as either an array or

00:03:42,380 --> 00:03:46,880
string array of strings or string so

00:03:44,930 --> 00:03:48,470
then it identifies very quickly that

00:03:46,880 --> 00:03:52,670
this here should be trim instead of

00:03:48,470 --> 00:03:54,980
trend okay so again it's still a

00:03:52,670 --> 00:03:56,840
JavaScript file I haven't done anything

00:03:54,980 --> 00:03:59,180
to convert it to typescript but I was

00:03:56,840 --> 00:04:00,890
able with adding one decorator to

00:03:59,180 --> 00:04:03,260
dramatically change the abilities I have

00:04:00,890 --> 00:04:07,740
as a developer to identify problems and

00:04:03,260 --> 00:04:12,780
fix them oh come on is that cool or why

00:04:07,740 --> 00:04:13,620
all right John thank you very much

00:04:12,780 --> 00:04:16,080
you're welcome

00:04:13,620 --> 00:04:17,850
all right it's not the end yeah okay

00:04:16,080 --> 00:04:19,500
good I can tell a joke somebody where

00:04:17,850 --> 00:04:20,970
something is just so impressive the day

00:04:19,500 --> 00:04:25,430
you know clapping I don't know what to

00:04:20,970 --> 00:04:25,430
do so no that's good thank you so much

00:04:31,040 --> 00:04:33,100

YouTube URL: https://www.youtube.com/watch?v=iLw31vY7kLs


