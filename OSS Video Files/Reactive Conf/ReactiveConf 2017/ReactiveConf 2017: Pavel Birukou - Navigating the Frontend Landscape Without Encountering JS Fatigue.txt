Title: ReactiveConf 2017: Pavel Birukou - Navigating the Frontend Landscape Without Encountering JS Fatigue
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Festival Friday

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:14,570 --> 00:00:19,480
hello everyone thanks for being here

00:00:19,539 --> 00:00:27,310
I'm going to start my computer a lot

00:00:21,869 --> 00:00:29,890
sorry about that so let's start my name

00:00:27,310 --> 00:00:32,529
is Pavel I work at evolution gaming calm

00:00:29,890 --> 00:00:35,739
as a JavaScript developer platform team

00:00:32,529 --> 00:00:37,239
where we develop live casino games so if

00:00:35,739 --> 00:00:39,100
you have heard about life casino games

00:00:37,239 --> 00:00:42,610
then you must probably have heard at

00:00:39,100 --> 00:00:44,979
least about one of our clients we

00:00:42,610 --> 00:00:47,199
provide b2b solution that allows casinos

00:00:44,979 --> 00:00:49,329
to integrate our life cuisine game in

00:00:47,199 --> 00:00:51,190
their platform so that they can be

00:00:49,329 --> 00:00:53,650
authenticated in our games and their

00:00:51,190 --> 00:00:55,150
actual dances will be shown and all the

00:00:53,650 --> 00:00:57,909
money will flow in the right direction

00:00:55,150 --> 00:01:00,070
and in the last couple of years we

00:00:57,909 --> 00:01:02,320
managed to migrate away or migrate to

00:01:00,070 --> 00:01:04,030
certain technologies so I'm going to

00:01:02,320 --> 00:01:06,130
tell you a couple of very personal

00:01:04,030 --> 00:01:09,939
stories about doing with modern in its

00:01:06,130 --> 00:01:13,240
time javascript so I have to give you

00:01:09,939 --> 00:01:15,610
more context so these are JavaScript

00:01:13,240 --> 00:01:17,020
developers in Riga because we our

00:01:15,610 --> 00:01:19,240
headquarter in Riga

00:01:17,020 --> 00:01:21,040
these are JavaScript developers who work

00:01:19,240 --> 00:01:22,390
at evolution gaming and these are

00:01:21,040 --> 00:01:26,080
JavaScript developer who were

00:01:22,390 --> 00:01:27,580
interviewed for evolution since we

00:01:26,080 --> 00:01:29,560
provide live streaming cuz you know we

00:01:27,580 --> 00:01:31,600
apparently provide livestream across all

00:01:29,560 --> 00:01:34,270
the devices even the slowest one so we

00:01:31,600 --> 00:01:35,890
care about performance a lot and as many

00:01:34,270 --> 00:01:37,600
other product companies who care about

00:01:35,890 --> 00:01:39,430
everything we can't outsource a single

00:01:37,600 --> 00:01:42,220
part of all our application we can't

00:01:39,430 --> 00:01:43,960
hire junior junior developers and we

00:01:42,220 --> 00:01:46,000
have self-sustaining teams that work on

00:01:43,960 --> 00:01:48,369
different games they work on front-end

00:01:46,000 --> 00:01:50,740
back-end we have on front-end side we

00:01:48,369 --> 00:01:54,190
have flash and HTML for desktop as well

00:01:50,740 --> 00:01:57,280
as mobile so we also work on 3d games

00:01:54,190 --> 00:02:01,180
using WebGL Babylon GS so let me tell

00:01:57,280 --> 00:02:05,560
you the story first front-end department

00:02:01,180 --> 00:02:08,500
was established and set in 2012 and by

00:02:05,560 --> 00:02:11,860
the Year 2015 we had 10 developers and

00:02:08,500 --> 00:02:14,590
around 4 games and after that we started

00:02:11,860 --> 00:02:17,379
to grow explosively so that's why we had

00:02:14,590 --> 00:02:19,150
to reconsider existing architecture so

00:02:17,379 --> 00:02:22,450
by that time we had couple of problems

00:02:19,150 --> 00:02:24,129
like we had problems with our CSS we had

00:02:22,450 --> 00:02:28,389
problems with our build tool because we

00:02:24,129 --> 00:02:29,859
were using ant and our architecture that

00:02:28,389 --> 00:02:33,310
we had the architecture that didn't

00:02:29,859 --> 00:02:35,170
really scale so by messy CSS I mean

00:02:33,310 --> 00:02:37,569
when you have a lot of CSS where

00:02:35,170 --> 00:02:39,819
Cascades are used extensively and now

00:02:37,569 --> 00:02:42,400
one gives a about the structure

00:02:39,819 --> 00:02:43,780
because you don't have any and when you

00:02:42,400 --> 00:02:45,790
fix in a bug instead of looking for a

00:02:43,780 --> 00:02:47,290
line that might be a reason for this

00:02:45,790 --> 00:02:49,000
buck you just put it Huck in a random

00:02:47,290 --> 00:02:50,739
place because it because everything is

00:02:49,000 --> 00:02:54,459
so tangled and you're so afraid to break

00:02:50,739 --> 00:02:56,680
anything and after a while your own CSS

00:02:54,459 --> 00:02:58,260
picture started to look like just

00:02:56,680 --> 00:03:02,020
settler Hawks

00:02:58,260 --> 00:03:03,430
so we had problem with I'm not sure if

00:03:02,020 --> 00:03:05,320
it's a problem we started to use it

00:03:03,430 --> 00:03:07,450
because we had JavaScript background or

00:03:05,320 --> 00:03:09,280
first developers in our department and

00:03:07,450 --> 00:03:11,500
it was slow because we used to execute

00:03:09,280 --> 00:03:13,930
Google tortured compiler and even in

00:03:11,500 --> 00:03:15,670
parallel it takes a lot of time and it

00:03:13,930 --> 00:03:18,370
was very unnatural for JavaScript

00:03:15,670 --> 00:03:20,410
developer developers and after all it

00:03:18,370 --> 00:03:23,050
wasn't pretty but it worked anyway we

00:03:20,410 --> 00:03:24,670
didn't like it when it comes to

00:03:23,050 --> 00:03:26,800
architecture we were using backbone

00:03:24,670 --> 00:03:29,050
pretty standard one it was industry

00:03:26,800 --> 00:03:30,430
standard back then it was good but it

00:03:29,050 --> 00:03:33,160
was a bit hard to build scalable

00:03:30,430 --> 00:03:34,840
architecture on that so actions are

00:03:33,160 --> 00:03:38,140
immutable that's obvious

00:03:34,840 --> 00:03:40,750
for MVC everything is about mutating the

00:03:38,140 --> 00:03:44,079
state and every new developer that was

00:03:40,750 --> 00:03:46,329
carrying our company revealed a problem

00:03:44,079 --> 00:03:47,260
with the dealing with backbone within a

00:03:46,329 --> 00:03:49,600
huge application

00:03:47,260 --> 00:03:52,329
even's are immutable as well no

00:03:49,600 --> 00:03:54,340
surprises is JavaScript but one day you

00:03:52,329 --> 00:03:56,799
may want to add a little extra to the

00:03:54,340 --> 00:03:58,540
event so that the next event might know

00:03:56,799 --> 00:04:01,060
something more about what's gonna happen

00:03:58,540 --> 00:04:03,100
and you end up having listeners with

00:04:01,060 --> 00:04:07,390
priorities and then after a while you

00:04:03,100 --> 00:04:09,400
add listener with priority - 999 because

00:04:07,390 --> 00:04:11,980
a year ago you already added the top

00:04:09,400 --> 00:04:14,410
priority listener with Priority One

00:04:11,980 --> 00:04:18,519
but since then you needed one more

00:04:14,410 --> 00:04:20,799
priority and one day you might implement

00:04:18,519 --> 00:04:22,900
patch update because backbone advises to

00:04:20,799 --> 00:04:25,840
re-render everything but it is slow on

00:04:22,900 --> 00:04:27,430
slow devices it won't work so once you

00:04:25,840 --> 00:04:29,650
started to implement patch update sees

00:04:27,430 --> 00:04:31,390
but patch updates it's gonna be a

00:04:29,650 --> 00:04:34,510
problem because it's fragile and it's

00:04:31,390 --> 00:04:37,360
really hard to test so that's how we

00:04:34,510 --> 00:04:39,160
felt about backbone at our scale it just

00:04:37,360 --> 00:04:42,789
won't work poorly

00:04:39,160 --> 00:04:46,090
anyway it was 2015 so the react bus has

00:04:42,789 --> 00:04:46,900
finally caught up with crowds and that

00:04:46,090 --> 00:04:48,940
was our break

00:04:46,900 --> 00:04:50,949
the cloud so we decided to try to react

00:04:48,940 --> 00:04:54,759
ideas behind reacts in straight and

00:04:50,949 --> 00:04:58,240
simple and in 2015 like you had to use

00:04:54,759 --> 00:05:00,520
react right we started to create

00:04:58,240 --> 00:05:03,509
reusable components it was nice and

00:05:00,520 --> 00:05:06,280
shiny and obstruction was really good

00:05:03,509 --> 00:05:09,160
though it was costly it consumes more

00:05:06,280 --> 00:05:12,910
memory and CPU rather than but if you

00:05:09,160 --> 00:05:16,690
wisely use backbone and it turns out to

00:05:12,910 --> 00:05:19,360
be just sorry it turns out to be just a

00:05:16,690 --> 00:05:22,990
few library but we need something for

00:05:19,360 --> 00:05:25,690
state management and again 2015 we had

00:05:22,990 --> 00:05:28,479
no choice because Oh everyone was using

00:05:25,690 --> 00:05:31,210
the redux and so we decided to use but

00:05:28,479 --> 00:05:33,880
again when it comes to real life and you

00:05:31,210 --> 00:05:36,669
have to deal with the side effects you

00:05:33,880 --> 00:05:38,710
have to choose redux thunk which is

00:05:36,669 --> 00:05:40,840
whatever you just put your side effect

00:05:38,710 --> 00:05:43,090
to for caught in a function and call it

00:05:40,840 --> 00:05:45,280
or redux saga which is pretty the same

00:05:43,090 --> 00:05:49,030
idea but instead we have a bit to link

00:05:45,280 --> 00:05:51,190
and go to a like syntax or you can do it

00:05:49,030 --> 00:05:54,280
in a middleware and all the approaches

00:05:51,190 --> 00:05:56,770
were going at a time so whatever

00:05:54,280 --> 00:05:58,990
millions of people can be wrong we

00:05:56,770 --> 00:06:02,320
decided to go with Redux but enough

00:05:58,990 --> 00:06:03,820
about that nope remember the days when

00:06:02,320 --> 00:06:07,690
we needed a build system when we had

00:06:03,820 --> 00:06:11,110
autoprefixer coffees creep and we were

00:06:07,690 --> 00:06:13,210
so tired about barn 1/1000 Lions ground

00:06:11,110 --> 00:06:16,419
files because they were boring instead

00:06:13,210 --> 00:06:19,030
of executing for tasks one by one we had

00:06:16,419 --> 00:06:21,699
gallop where we can pipe the execution

00:06:19,030 --> 00:06:24,909
it sounds very efficient and gulps him a

00:06:21,699 --> 00:06:27,130
way to go after all but gulp is about

00:06:24,909 --> 00:06:30,190
streaming not building so we end up

00:06:27,130 --> 00:06:34,150
having dozens dependencies like gulp

00:06:30,190 --> 00:06:36,849
shell gulp rename and even go eat which

00:06:34,150 --> 00:06:41,380
for me seems the opposite of streaming

00:06:36,849 --> 00:06:43,750
system anyway after all our gulp file

00:06:41,380 --> 00:06:48,370
was around 1,000 lines and it was

00:06:43,750 --> 00:06:50,440
unreadable next types apparently we need

00:06:48,370 --> 00:06:53,139
types and we had to make complicated

00:06:50,440 --> 00:06:55,419
choice between flow and type script flow

00:06:53,139 --> 00:06:58,180
has more powerful type system by design

00:06:55,419 --> 00:06:59,990
but typescript is more or less mature

00:06:58,180 --> 00:07:03,140
was better than

00:06:59,990 --> 00:07:04,820
and and still and had more definition

00:07:03,140 --> 00:07:05,870
files and frankly the fact that under

00:07:04,820 --> 00:07:08,270
his house Berg

00:07:05,870 --> 00:07:10,190
stays behind these meant a lot for us

00:07:08,270 --> 00:07:13,070
but two years back very important

00:07:10,190 --> 00:07:16,010
argument was how easy is that to

00:07:13,070 --> 00:07:19,220
integrate interviewer system and even

00:07:16,010 --> 00:07:21,440
more except of bubble we had bad back

00:07:19,220 --> 00:07:22,850
we even considering switching to flow

00:07:21,440 --> 00:07:25,370
just because of the problem with

00:07:22,850 --> 00:07:27,470
configuration flow what was easily

00:07:25,370 --> 00:07:30,290
integrated to bubble just turn one

00:07:27,470 --> 00:07:33,080
plug-in home and that's it but this DSC

00:07:30,290 --> 00:07:35,510
wasn't so efficient so we were using

00:07:33,080 --> 00:07:37,490
typescript compiler in order to just

00:07:35,510 --> 00:07:39,650
three move types and might invalidate

00:07:37,490 --> 00:07:42,680
them and then we were passing files to

00:07:39,650 --> 00:07:44,270
bubble again it was tough anyway never

00:07:42,680 --> 00:07:46,400
do I solve the problems we had to usable

00:07:44,270 --> 00:07:48,410
component it is well it was already good

00:07:46,400 --> 00:07:51,320
for us and we felt ready to split our

00:07:48,410 --> 00:07:54,290
code and someone told us that reactive

00:07:51,320 --> 00:07:56,540
come two years ago that they use private

00:07:54,290 --> 00:07:59,390
NPM it is very convenient and helps a

00:07:56,540 --> 00:08:01,310
lot so we decided to try because you

00:07:59,390 --> 00:08:05,020
also have a manager that does all the

00:08:01,310 --> 00:08:07,370
job for you and also it plays well with

00:08:05,020 --> 00:08:09,650
multiple repositories because we have

00:08:07,370 --> 00:08:11,780
multiple teams that could have multiple

00:08:09,650 --> 00:08:14,360
repositories and they can carry about

00:08:11,780 --> 00:08:17,330
their own code and they become

00:08:14,360 --> 00:08:19,400
self-sufficient and it does works well

00:08:17,330 --> 00:08:22,070
if your dependency tree looks like these

00:08:19,400 --> 00:08:23,810
even in more complicated cases when you

00:08:22,070 --> 00:08:25,820
have entry point and couple of

00:08:23,810 --> 00:08:28,430
dependencies on the same level it still

00:08:25,820 --> 00:08:31,160
works well but in our case and probably

00:08:28,430 --> 00:08:33,230
most of the companies the dependency

00:08:31,160 --> 00:08:35,030
tree it looks like this because

00:08:33,230 --> 00:08:36,680
everything has its own repository and

00:08:35,030 --> 00:08:39,620
its own package and there are utils

00:08:36,680 --> 00:08:42,080
translation components video components

00:08:39,620 --> 00:08:43,700
and sometimes you try to deliver changes

00:08:42,080 --> 00:08:46,820
from downloadable components to the

00:08:43,700 --> 00:08:49,430
uplevel components and it takes you like

00:08:46,820 --> 00:08:52,150
four five to ten large requests and

00:08:49,430 --> 00:08:55,370
while emerging them you're built

00:08:52,150 --> 00:08:58,520
constantly read so it was like the

00:08:55,370 --> 00:09:01,400
opposite of what we expected and when we

00:08:58,520 --> 00:09:03,920
found out ourself in a state of program

00:09:01,400 --> 00:09:07,250
delivery first we merged everything back

00:09:03,920 --> 00:09:10,790
to mana repository and that we get our

00:09:07,250 --> 00:09:12,920
history navigation back and we were able

00:09:10,790 --> 00:09:15,200
to make major changes in one coming but

00:09:12,920 --> 00:09:17,389
problem was still here the packages

00:09:15,200 --> 00:09:20,120
wasn't the word about existence of each

00:09:17,389 --> 00:09:22,730
other in a file system and here we're

00:09:20,120 --> 00:09:25,220
learner comes into stage but the problem

00:09:22,730 --> 00:09:26,959
with learner is once you need to release

00:09:25,220 --> 00:09:29,389
something you have to release everything

00:09:26,959 --> 00:09:31,279
even in a case when you have to back

00:09:29,389 --> 00:09:32,630
board certain commit to certain version

00:09:31,279 --> 00:09:34,699
you still have to release everything

00:09:32,630 --> 00:09:37,490
which doesn't make a lot of sense for us

00:09:34,699 --> 00:09:39,649
so we decided to not use Lorna we just

00:09:37,490 --> 00:09:41,149
directly reference referenced all the

00:09:39,649 --> 00:09:43,730
packages in the file system using

00:09:41,149 --> 00:09:46,550
typescript configuring config or web

00:09:43,730 --> 00:09:48,980
pack config and also I think the problem

00:09:46,550 --> 00:09:50,839
is a bit in assembler idea is very

00:09:48,980 --> 00:09:53,300
straight like you have major version

00:09:50,839 --> 00:09:56,660
minor and patch I never change API you

00:09:53,300 --> 00:10:00,470
release major major version but in real

00:09:56,660 --> 00:10:02,060
life in our SAS world and especially if

00:10:00,470 --> 00:10:04,370
you have a be testing where you could

00:10:02,060 --> 00:10:06,889
have two versions of application that is

00:10:04,370 --> 00:10:08,660
that are equally valid and exist in

00:10:06,889 --> 00:10:11,180
parallel there is no semantics for

00:10:08,660 --> 00:10:13,910
assembler so we spend a lot of time

00:10:11,180 --> 00:10:16,070
breaking and fixing our workflow but the

00:10:13,910 --> 00:10:21,199
question is how did we ever fall into

00:10:16,070 --> 00:10:23,300
that you know the guy that is meters he

00:10:21,199 --> 00:10:27,220
just turned his own daughter into gold

00:10:23,300 --> 00:10:30,579
imagine how upset he is and that is

00:10:27,220 --> 00:10:37,399
JavaScript developer let's say me and

00:10:30,579 --> 00:10:39,290
sometimes I feel myself like he there

00:10:37,399 --> 00:10:41,899
are hundreds of buzzwords that are

00:10:39,290 --> 00:10:44,779
already dead and everything in our world

00:10:41,899 --> 00:10:46,550
is either hateful or beloved we had a

00:10:44,779 --> 00:10:48,410
story with backbone we actually when we

00:10:46,550 --> 00:10:50,060
introduced it we liked it a lot it

00:10:48,410 --> 00:10:52,610
helped it helped us we were using

00:10:50,060 --> 00:10:54,709
prototypal inheritance we were we were

00:10:52,610 --> 00:10:57,290
even using multiple inheritance in

00:10:54,709 --> 00:10:59,089
JavaScript and we liked how backbone was

00:10:57,290 --> 00:11:01,370
solving our problem but it just stopped

00:10:59,089 --> 00:11:03,470
scaling at certain size at certain

00:11:01,370 --> 00:11:05,510
application size we had CoffeeScript

00:11:03,470 --> 00:11:07,880
because developers like how elegant it

00:11:05,510 --> 00:11:10,430
is they like classes they like arrows

00:11:07,880 --> 00:11:12,050
they like least generators in overall it

00:11:10,430 --> 00:11:15,680
was more functional like everything is

00:11:12,050 --> 00:11:18,199
expression isn't it great remember the

00:11:15,680 --> 00:11:20,870
guy from the first lay yeah we have

00:11:18,199 --> 00:11:23,240
experienced fatigue at the time but we

00:11:20,870 --> 00:11:24,860
know the recipe in order to cure it you

00:11:23,240 --> 00:11:27,100
have to think about your experience

00:11:24,860 --> 00:11:30,350
recap and I know

00:11:27,100 --> 00:11:32,750
so let's compare we know for sure that

00:11:30,350 --> 00:11:35,480
react is slower than backbone if you use

00:11:32,750 --> 00:11:37,220
backbone wisely at the same time react

00:11:35,480 --> 00:11:39,050
is faster than backbone because you can

00:11:37,220 --> 00:11:42,019
provide reusable components

00:11:39,050 --> 00:11:45,350
relax sunk is way better than react saga

00:11:42,019 --> 00:11:48,500
because if you know why because then a

00:11:45,350 --> 00:11:50,570
berm of creativity and vice versa Redux

00:11:48,500 --> 00:11:52,430
tag is worth and read relax tank is

00:11:50,570 --> 00:11:54,639
worth than Redux second but the thing

00:11:52,430 --> 00:11:58,970
here is none of these actually throughs

00:11:54,639 --> 00:12:01,579
and it's it is fine as long as you have

00:11:58,970 --> 00:12:04,100
control over your codebase there are

00:12:01,579 --> 00:12:07,339
hundreds of questions with no answer we

00:12:04,100 --> 00:12:10,190
can argue about NPM versus yarn for

00:12:07,339 --> 00:12:13,100
years but it never gonna end

00:12:10,190 --> 00:12:15,139
so our recipe is just to keep calm and

00:12:13,100 --> 00:12:17,810
stop worrying about problems you never

00:12:15,139 --> 00:12:20,209
had and be critical and make sure you

00:12:17,810 --> 00:12:22,250
actually solve the problem and there are

00:12:20,209 --> 00:12:25,760
actually some instruments that help us a

00:12:22,250 --> 00:12:27,440
lot like react lifecycle is good we

00:12:25,760 --> 00:12:29,510
never had problems with it because it

00:12:27,440 --> 00:12:32,120
reflects well what was this happening

00:12:29,510 --> 00:12:34,760
and there are also alternatives with the

00:12:32,120 --> 00:12:36,589
same API if you may get tired of react

00:12:34,760 --> 00:12:38,839
that's what we usually JavaScript

00:12:36,589 --> 00:12:43,250
developers do there is pre act or react

00:12:38,839 --> 00:12:45,649
like we had react light we like type

00:12:43,250 --> 00:12:47,510
Street Allah because it has good - link

00:12:45,649 --> 00:12:50,570
there is type script language service

00:12:47,510 --> 00:12:55,070
which which you may use we use wrapper

00:12:50,570 --> 00:12:57,199
or get so we execute parts of the our

00:12:55,070 --> 00:12:59,149
application or we ignore certain errors

00:12:57,199 --> 00:13:04,220
if we import code from third party which

00:12:59,149 --> 00:13:06,079
has different rules it has it gives us

00:13:04,220 --> 00:13:08,029
less runtime errors and it has been

00:13:06,079 --> 00:13:10,279
proven when we were migrating to

00:13:08,029 --> 00:13:12,740
typescript we managed to find couple of

00:13:10,279 --> 00:13:15,110
small problems that were reported to

00:13:12,740 --> 00:13:17,690
sentry but we never were able to

00:13:15,110 --> 00:13:21,170
reproduce them we just found him by

00:13:17,690 --> 00:13:22,730
adding types and the good thing for us

00:13:21,170 --> 00:13:24,350
we don't need bubble anymore

00:13:22,730 --> 00:13:26,540
you've got really and no-one actually

00:13:24,350 --> 00:13:28,459
noticed this in a company because type

00:13:26,540 --> 00:13:31,399
cube compiler it compiles to down level

00:13:28,459 --> 00:13:33,589
JavaScript with no problems and you

00:13:31,399 --> 00:13:36,079
always can make type definition stricter

00:13:33,589 --> 00:13:38,060
which means whatever whenever you want

00:13:36,079 --> 00:13:38,779
you can just ratify and backbone that's

00:13:38,060 --> 00:13:39,320
what we do

00:13:38,779 --> 00:13:41,420
or

00:13:39,320 --> 00:13:44,180
underscored and make it stricter so that

00:13:41,420 --> 00:13:45,950
harder to break and typescript is

00:13:44,180 --> 00:13:49,430
getting better that's apparently from

00:13:45,950 --> 00:13:51,350
version to version CSS modules are they

00:13:49,430 --> 00:13:53,840
are just useful there is no reason to

00:13:51,350 --> 00:13:56,030
not use them and it not necessarily has

00:13:53,840 --> 00:13:59,630
to be CSS modules that could be anything

00:13:56,030 --> 00:14:01,730
that relates your component styles mono

00:13:59,630 --> 00:14:04,130
repo is a thing actually we have strong

00:14:01,730 --> 00:14:06,560
opinion about I still see articles that

00:14:04,130 --> 00:14:08,990
starts like create a new repository pad

00:14:06,560 --> 00:14:10,670
github but I think you shouldn't do this

00:14:08,990 --> 00:14:12,800
unless you have a microservices

00:14:10,670 --> 00:14:15,920
architecture or you understand well what

00:14:12,800 --> 00:14:18,860
you what's gonna happen next because for

00:14:15,920 --> 00:14:20,870
me there is no difference between for me

00:14:18,860 --> 00:14:22,670
for me separate repositories is not any

00:14:20,870 --> 00:14:25,190
better than separate directories under

00:14:22,670 --> 00:14:27,260
one get because this little print I mean

00:14:25,190 --> 00:14:29,750
two dashes can narrow down all the get

00:14:27,260 --> 00:14:32,000
comments to the certain directory and it

00:14:29,750 --> 00:14:35,930
also works with the graphical interface

00:14:32,000 --> 00:14:39,350
apps and what's most important we keep

00:14:35,930 --> 00:14:41,720
our process phone we focus on problems

00:14:39,350 --> 00:14:43,730
rather than solutions you may recall

00:14:41,720 --> 00:14:48,560
hammock driven development by rich

00:14:43,730 --> 00:14:50,810
Hickey without everything and we try to

00:14:48,560 --> 00:14:53,660
stop github star driven development and

00:14:50,810 --> 00:14:56,300
hype driven development and when it

00:14:53,660 --> 00:14:59,300
comes to what we calculate only number

00:14:56,300 --> 00:15:02,420
of arguments not number of bodies that

00:14:59,300 --> 00:15:05,150
has voted and we support prove me wrong

00:15:02,420 --> 00:15:07,880
attitude that means whoever can make

00:15:05,150 --> 00:15:10,310
both statement and asked to evaluate the

00:15:07,880 --> 00:15:12,860
idea that's what basically just happened

00:15:10,310 --> 00:15:16,990
to you guys that's it

00:15:12,860 --> 00:15:16,990
I was sure thank you

00:15:21,340 --> 00:15:39,950
do you guys have questions well we had

00:15:33,650 --> 00:15:41,780
like hundreds of use controllers and it

00:15:39,950 --> 00:15:44,440
just sometimes hard to find a place

00:15:41,780 --> 00:15:48,650
where you just mutated your state and

00:15:44,440 --> 00:15:50,690
boom basically we made we made mistakes

00:15:48,650 --> 00:15:53,690
when we were just introducing backbone

00:15:50,690 --> 00:15:56,330
as I said we once we mutate it and even

00:15:53,690 --> 00:15:58,850
so we end up having listeners with

00:15:56,330 --> 00:16:01,700
priorities which is dead end for you

00:15:58,850 --> 00:16:03,470
and overall yet backbone I mean MVC

00:16:01,700 --> 00:16:06,020
structures from my experience play well

00:16:03,470 --> 00:16:08,840
at certain certain scale like I don't

00:16:06,020 --> 00:16:10,790
know hundreds of controllers might be

00:16:08,840 --> 00:16:12,890
okay if you have thousand like we have

00:16:10,790 --> 00:16:18,740
it might be a little bit tricky to

00:16:12,890 --> 00:16:21,280
manage them yes from developers not not

00:16:18,740 --> 00:16:21,280
performance

00:16:24,870 --> 00:16:33,769
okay thank you

00:16:28,840 --> 00:16:33,769
[Applause]

00:16:38,130 --> 00:16:40,190

YouTube URL: https://www.youtube.com/watch?v=vSa2_MYFIOQ


