Title: ReactiveConf 2017 - Gavin Doughtie: Architecting the Reactive Flutter App
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,020 --> 00:00:08,639
[Music]

00:00:14,550 --> 00:00:18,900
you might have noticed I'm Gavin dowdy

00:00:16,620 --> 00:00:20,760
I'm an engineer on the AdWords mobile

00:00:18,900 --> 00:00:22,650
app at the Google office in Los Angeles

00:00:20,760 --> 00:00:25,310
I've been working with flutter for about

00:00:22,650 --> 00:00:27,720
the last year and I'm here to tell you

00:00:25,310 --> 00:00:30,540
something about it I'm going to show you

00:00:27,720 --> 00:00:32,189
how the flutter SDK works really well if

00:00:30,540 --> 00:00:33,720
you're building a reactive application

00:00:32,189 --> 00:00:36,060
I'm going to show you how it's

00:00:33,720 --> 00:00:37,650
programming language dart gives you some

00:00:36,060 --> 00:00:38,880
really good core language level

00:00:37,650 --> 00:00:41,940
primitives that you can build up

00:00:38,880 --> 00:00:43,200
reactive data systems with and I'll show

00:00:41,940 --> 00:00:44,660
you a few practical tips that we've

00:00:43,200 --> 00:00:48,600
learned building an app with flutter

00:00:44,660 --> 00:00:50,579
over the last few months I don't think

00:00:48,600 --> 00:00:52,170
I'm gonna lose many of you guys but I

00:00:50,579 --> 00:00:54,960
expect you to understand object-oriented

00:00:52,170 --> 00:00:56,399
programming and know what a function is

00:00:54,960 --> 00:00:58,079
particularly functions that can return

00:00:56,399 --> 00:01:01,739
other functions and take functions as

00:00:58,079 --> 00:01:03,989
parameters that's because I'm going to

00:01:01,739 --> 00:01:05,910
show you a little bit of code in the

00:01:03,989 --> 00:01:10,380
dart programming language I think you'll

00:01:05,910 --> 00:01:12,000
find dart quite familiar but I'll try to

00:01:10,380 --> 00:01:13,190
highlight the relevant parts as I go

00:01:12,000 --> 00:01:15,570
along

00:01:13,190 --> 00:01:17,640
now I've been at Google for about 11

00:01:15,570 --> 00:01:19,950
years I worked on the web for the first

00:01:17,640 --> 00:01:22,680
five years and then I worked on native

00:01:19,950 --> 00:01:23,730
iOS development around the same time I

00:01:22,680 --> 00:01:25,710
started working on native iOS

00:01:23,730 --> 00:01:28,440
development on things like Google+ and

00:01:25,710 --> 00:01:33,150
Google Photos I also had a kid my

00:01:28,440 --> 00:01:34,830
youngest kid around 2011 and you know

00:01:33,150 --> 00:01:37,560
always have some little hobby project

00:01:34,830 --> 00:01:39,150
cooking on the side but when I had the

00:01:37,560 --> 00:01:42,390
kid I was like totally busy I was just

00:01:39,150 --> 00:01:45,810
like deja Fatherhood for several years

00:01:42,390 --> 00:01:48,270
and it turned out these were these were

00:01:45,810 --> 00:01:50,100
bad years to miss and web development I

00:01:48,270 --> 00:01:52,860
wanted to get back into doing some some

00:01:50,100 --> 00:01:55,020
hobby web projects just to experiment

00:01:52,860 --> 00:01:57,150
with things let me show you the whole

00:01:55,020 --> 00:02:00,390
testbed application I was using for this

00:01:57,150 --> 00:02:01,830
amazing application it's a little

00:02:00,390 --> 00:02:04,800
tic-tac-toe game that I was using to

00:02:01,830 --> 00:02:06,330
figure out different web technology

00:02:04,800 --> 00:02:08,280
stacks after being away for several

00:02:06,330 --> 00:02:10,709
years and you know you can play a robot

00:02:08,280 --> 00:02:13,170
AI and if you're on the internet you can

00:02:10,709 --> 00:02:15,420
play a another person live over the

00:02:13,170 --> 00:02:17,580
Internet so this is my testbed

00:02:15,420 --> 00:02:20,580
application because what I was really

00:02:17,580 --> 00:02:22,830
interested in was live data this idea

00:02:20,580 --> 00:02:25,470
that data is going to be changing in

00:02:22,830 --> 00:02:27,960
real time potentially by multiple users

00:02:25,470 --> 00:02:30,030
so things like chat apps and

00:02:27,960 --> 00:02:31,650
of editors and multiplayer games these

00:02:30,030 --> 00:02:32,820
are all kind of live data applications

00:02:31,650 --> 00:02:34,170
and I thought they were they were really

00:02:32,820 --> 00:02:36,300
interesting and I wanted to have some

00:02:34,170 --> 00:02:38,790
some pretty good tooling to start out

00:02:36,300 --> 00:02:40,130
with for a live data and as I dug into

00:02:38,790 --> 00:02:45,900
the live data I had this realization

00:02:40,130 --> 00:02:48,720
which that is that come on all data is

00:02:45,900 --> 00:02:50,610
live data so as programmers we like to

00:02:48,720 --> 00:02:52,230
lie to ourselves and pretend that the

00:02:50,610 --> 00:02:53,910
data is going to change when it is

00:02:52,230 --> 00:02:56,070
convenient for us to have the data

00:02:53,910 --> 00:02:59,100
change but inevitably we get it wrong

00:02:56,070 --> 00:03:01,050
you know mountains crumble and stock

00:02:59,100 --> 00:03:03,660
market prices fluctuate and your

00:03:01,050 --> 00:03:05,340
application data changes somewhere on

00:03:03,660 --> 00:03:07,020
that spectrum but you never get it right

00:03:05,340 --> 00:03:09,510
the first time and if you don't design

00:03:07,020 --> 00:03:11,520
your application for it right away at

00:03:09,510 --> 00:03:13,020
the beginning you'll you'll be in for a

00:03:11,520 --> 00:03:14,640
lot of trouble later when the the

00:03:13,020 --> 00:03:15,930
real-world characteristics of the

00:03:14,640 --> 00:03:22,670
application suggested it's gonna be

00:03:15,930 --> 00:03:22,670
changing on some other time scale so I

00:03:22,940 --> 00:03:27,600
kind of missed out what had happened in

00:03:25,470 --> 00:03:30,330
the front-end after 2011 when my kid was

00:03:27,600 --> 00:03:32,220
born and I came back in and it's like

00:03:30,330 --> 00:03:34,020
wow all this stuff has happened in such

00:03:32,220 --> 00:03:35,850
a short time you know you not only to

00:03:34,020 --> 00:03:40,320
have things like web components and

00:03:35,850 --> 00:03:42,180
service workers but also web pack and

00:03:40,320 --> 00:03:45,360
babble and it's like wow there's just an

00:03:42,180 --> 00:03:47,880
explosion of technologies to look at but

00:03:45,360 --> 00:03:50,250
there was also this architectural sea

00:03:47,880 --> 00:03:52,350
change which I'm sure you guys are all

00:03:50,250 --> 00:03:54,720
familiar with by now and that is

00:03:52,350 --> 00:03:58,320
reactive programming so I started

00:03:54,720 --> 00:04:00,900
looking at you know how react worked and

00:03:58,320 --> 00:04:04,670
Elm and all of these kinds of systems

00:04:00,900 --> 00:04:07,560
and they kind of blew my mind because

00:04:04,670 --> 00:04:09,450
they were they aligned really perfectly

00:04:07,560 --> 00:04:11,700
with this idea of your data always

00:04:09,450 --> 00:04:13,410
changing so I kind of want to share with

00:04:11,700 --> 00:04:17,310
you my little model of what I what I

00:04:13,410 --> 00:04:19,530
consider the reactive programming this

00:04:17,310 --> 00:04:21,900
is not particularly original but you

00:04:19,530 --> 00:04:23,310
start with some piece of state that's

00:04:21,900 --> 00:04:25,440
coming from you know all the users in

00:04:23,310 --> 00:04:28,530
the world maybe and you produce the

00:04:25,440 --> 00:04:31,500
state of your application the UI renders

00:04:28,530 --> 00:04:33,600
that state to create a view which the

00:04:31,500 --> 00:04:35,670
user then interacts with to produce

00:04:33,600 --> 00:04:37,080
events that are combined with the state

00:04:35,670 --> 00:04:38,669
to produce a new version of the state

00:04:37,080 --> 00:04:41,190
and the cycle continues

00:04:38,669 --> 00:04:41,790
now you can simplify this a little

00:04:41,190 --> 00:04:44,220
further

00:04:41,790 --> 00:04:46,500
and just say the user is a pure function

00:04:44,220 --> 00:04:48,750
of the UI the users input the user

00:04:46,500 --> 00:04:50,490
function input is the user interface and

00:04:48,750 --> 00:04:53,190
the users output is a stream of events

00:04:50,490 --> 00:04:55,170
that changed the state so I want to say

00:04:53,190 --> 00:04:56,760
like hatch up to Andre stalls for coming

00:04:55,170 --> 00:05:00,150
up with that you should go watch his

00:04:56,760 --> 00:05:01,530
talk and then this middle section when

00:05:00,150 --> 00:05:04,020
you're rendering the state and when

00:05:01,530 --> 00:05:07,650
you're handling a user input that that

00:05:04,020 --> 00:05:09,270
piece is your reactive UI system and

00:05:07,650 --> 00:05:11,010
that was the kind of that like the

00:05:09,270 --> 00:05:12,450
missing piece that started the flood of

00:05:11,010 --> 00:05:16,890
being able to reason about your

00:05:12,450 --> 00:05:18,540
application as this flow of data so I'm

00:05:16,890 --> 00:05:21,330
working on this and I'm having a lot of

00:05:18,540 --> 00:05:24,690
fun and I'm you know doing this fluid

00:05:21,330 --> 00:05:25,860
development you know and I'm talking

00:05:24,690 --> 00:05:28,230
about it at work a lot and saying this

00:05:25,860 --> 00:05:29,480
is great this is amazing but at work I'm

00:05:28,230 --> 00:05:32,250
still doing your classic

00:05:29,480 --> 00:05:35,790
model-view-controller programming so I'm

00:05:32,250 --> 00:05:37,950
sad but then my team lead comes up to me

00:05:35,790 --> 00:05:39,600
and says you know I've been hearing you

00:05:37,950 --> 00:05:40,710
talk about this reactive stuff for a

00:05:39,600 --> 00:05:42,480
while I want you to take a look at this

00:05:40,710 --> 00:05:45,510
flutter thing and see if we can use it

00:05:42,480 --> 00:05:47,550
for our app and I started looking at

00:05:45,510 --> 00:05:49,620
what flutter was and how it worked and I

00:05:47,550 --> 00:05:51,510
realized that flutter one of the things

00:05:49,620 --> 00:05:56,640
that was really designed to be was a

00:05:51,510 --> 00:06:00,210
reactive UI system so happy cabin so how

00:05:56,640 --> 00:06:01,440
many of you heard of flutter before yeah

00:06:00,210 --> 00:06:06,300
not nearly enough

00:06:01,440 --> 00:06:09,060
so mile-high overview kilometer high

00:06:06,300 --> 00:06:11,370
overview since we're in Europe it's a

00:06:09,060 --> 00:06:14,010
full application SDK you use the dart

00:06:11,370 --> 00:06:16,170
programming language you use the flutter

00:06:14,010 --> 00:06:18,630
SDK and the flutter API is to write your

00:06:16,170 --> 00:06:22,500
application it gives you a really nice

00:06:18,630 --> 00:06:25,380
developer ergonomics but you deliver an

00:06:22,500 --> 00:06:28,530
arm binary image compiled machine code

00:06:25,380 --> 00:06:32,730
application to both Android and iOS so

00:06:28,530 --> 00:06:33,840
it's a cross platform SDK it's just the

00:06:32,730 --> 00:06:36,920
same as you would if you're writing an

00:06:33,840 --> 00:06:39,090
objective-c or Swift or C++ or something

00:06:36,920 --> 00:06:41,160
it's got a really complete set of

00:06:39,090 --> 00:06:42,420
widgets you generally don't have to

00:06:41,160 --> 00:06:44,970
write your own widgets for the sort of

00:06:42,420 --> 00:06:48,900
standard UI components they're very

00:06:44,970 --> 00:06:51,300
complete but we don't pretend that there

00:06:48,900 --> 00:06:53,700
isn't an underlying operating system so

00:06:51,300 --> 00:06:55,009
there's a plugins interface that you can

00:06:53,700 --> 00:06:56,900
use so

00:06:55,009 --> 00:06:59,599
take native code and access platform

00:06:56,900 --> 00:07:00,860
level functionality and you can also use

00:06:59,599 --> 00:07:04,279
code that you've already written if

00:07:00,860 --> 00:07:06,110
you've got native mobile code and

00:07:04,279 --> 00:07:08,029
finally it's a reactive framework it

00:07:06,110 --> 00:07:11,180
uses the the reactive idiom for

00:07:08,029 --> 00:07:14,569
rendering your user interface and a lot

00:07:11,180 --> 00:07:16,009
of mobile development systems the the

00:07:14,569 --> 00:07:18,259
code that is running when your

00:07:16,009 --> 00:07:20,240
application runs you know there's

00:07:18,259 --> 00:07:22,330
there's a fairly small percentage of it

00:07:20,240 --> 00:07:25,189
that is accessible to you the engineer

00:07:22,330 --> 00:07:27,800
you know you don't you don't really have

00:07:25,189 --> 00:07:30,020
a lot of insight into how UI kit renders

00:07:27,800 --> 00:07:31,879
the views on iOS or you don't have you

00:07:30,020 --> 00:07:34,430
don't have control of how the Dom itself

00:07:31,879 --> 00:07:36,020
operates or how the compositor operates

00:07:34,430 --> 00:07:37,779
or how the stylesheet system operates

00:07:36,020 --> 00:07:41,680
you know you're using it through a

00:07:37,779 --> 00:07:43,939
fairly small piece of that code is yours

00:07:41,680 --> 00:07:46,159
flutter kind of flips it on its head

00:07:43,939 --> 00:07:49,909
flutter starts with a very print

00:07:46,159 --> 00:07:51,709
low-level primitive layer it's the text

00:07:49,909 --> 00:07:53,330
rendering subsystem from Google Chrome

00:07:51,709 --> 00:07:55,550
it's a very mature text rendering

00:07:53,330 --> 00:07:56,990
subsystem it's multilingual and it does

00:07:55,550 --> 00:08:01,099
nice fonts you know all of that good

00:07:56,990 --> 00:08:05,379
stuff it uses the dart runtime VM and

00:08:01,099 --> 00:08:08,209
libraries dart is a high-performance

00:08:05,379 --> 00:08:09,740
language interpreter that was written by

00:08:08,209 --> 00:08:11,569
some of the original engineers on the v8

00:08:09,740 --> 00:08:14,930
interpreter team so it's a really kind

00:08:11,569 --> 00:08:18,139
of a next-gen language and then it uses

00:08:14,930 --> 00:08:20,870
skia which is a portable hardware

00:08:18,139 --> 00:08:22,879
accelerated graphics layer and it does

00:08:20,870 --> 00:08:24,469
the very primitive graphics operations

00:08:22,879 --> 00:08:26,300
like bleeding and drawing lines and

00:08:24,469 --> 00:08:29,360
filling and things like that so very low

00:08:26,300 --> 00:08:32,569
level on top of that low level it's all

00:08:29,360 --> 00:08:34,250
exposed as the dart UI package the rest

00:08:32,569 --> 00:08:36,709
of flutter is built and that includes

00:08:34,250 --> 00:08:39,889
not just what you'd expect

00:08:36,709 --> 00:08:41,300
you know low-level primitives but all

00:08:39,889 --> 00:08:45,019
the way up into the widget and styled

00:08:41,300 --> 00:08:46,130
widget system so everything that you

00:08:45,019 --> 00:08:47,810
would normally think of as kind of

00:08:46,130 --> 00:08:49,399
off-limits to you as an engineer is

00:08:47,810 --> 00:08:52,750
available to you in flutter so you can

00:08:49,399 --> 00:08:55,610
hook into it and unlike systems like

00:08:52,750 --> 00:08:57,860
where you are programming in JavaScript

00:08:55,610 --> 00:09:01,399
say and then you're driving the native

00:08:57,860 --> 00:09:03,230
UI system with your code and pushing

00:09:01,399 --> 00:09:06,540
code back and forth across a bridge to

00:09:03,230 --> 00:09:08,760
the underlying platform UI system

00:09:06,540 --> 00:09:10,649
flutter it keeps all of that code on

00:09:08,760 --> 00:09:12,990
sort of its side of the wall so there's

00:09:10,649 --> 00:09:16,260
no bridging and you get really good

00:09:12,990 --> 00:09:17,639
performance that way now I was really a

00:09:16,260 --> 00:09:19,440
you know excited to be able to build a

00:09:17,639 --> 00:09:22,769
reactive system it's also pretty

00:09:19,440 --> 00:09:24,449
skeptical that you'd be able to get

00:09:22,769 --> 00:09:25,889
something that looked and felt nice

00:09:24,449 --> 00:09:27,510
because a lot of the other

00:09:25,889 --> 00:09:29,850
cross-platform systems I've used in my

00:09:27,510 --> 00:09:31,829
career kind of always left me wanting a

00:09:29,850 --> 00:09:34,050
little bit more but I did just what you

00:09:31,829 --> 00:09:35,040
guys can do tonight is downloaded the

00:09:34,050 --> 00:09:37,380
flutter SDK

00:09:35,040 --> 00:09:38,459
I built the sample applications this is

00:09:37,380 --> 00:09:40,440
one of them this is a gallery

00:09:38,459 --> 00:09:41,459
application and I was like okay these

00:09:40,440 --> 00:09:42,899
are great these were running at 60

00:09:41,459 --> 00:09:48,230
frames a second you can do these really

00:09:42,899 --> 00:09:50,430
nice designs and animations with it and

00:09:48,230 --> 00:09:52,110
you know animated gifs don't actually

00:09:50,430 --> 00:09:53,399
run at 60 frames a second so if you want

00:09:52,110 --> 00:09:56,160
to get a feel for the the native look

00:09:53,399 --> 00:09:58,529
and feel you can download the SDK if you

00:09:56,160 --> 00:10:00,449
don't feel like downloading the SDK you

00:09:58,529 --> 00:10:02,610
can actually download this app it's the

00:10:00,449 --> 00:10:06,029
Hamilton app it's available in the App

00:10:02,610 --> 00:10:06,480
Store since since we're not in the

00:10:06,029 --> 00:10:08,579
States

00:10:06,480 --> 00:10:10,620
Hamilton's one of our presidents there's

00:10:08,579 --> 00:10:12,839
a really successful Broadway musical

00:10:10,620 --> 00:10:13,529
production live musical production about

00:10:12,839 --> 00:10:15,660
this guy

00:10:13,529 --> 00:10:17,880
it's a rap opera about president

00:10:15,660 --> 00:10:19,350
Hamilton it's been selling out for years

00:10:17,880 --> 00:10:22,139
now it's like completely sold out

00:10:19,350 --> 00:10:24,630
theaters and they the producers of the

00:10:22,139 --> 00:10:27,569
play contracted with a digital agency in

00:10:24,630 --> 00:10:30,180
New York who wrote this application

00:10:27,569 --> 00:10:32,190
using flutter and firebase and it's the

00:10:30,180 --> 00:10:34,589
application you can use to submit

00:10:32,190 --> 00:10:35,880
yourself to a lottery to win a chance to

00:10:34,589 --> 00:10:38,339
spend hundreds of dollars for a ticket

00:10:35,880 --> 00:10:39,810
to a Broadway show it's kind of

00:10:38,339 --> 00:10:42,750
interesting because they didn't choose

00:10:39,810 --> 00:10:44,490
either material design or iOS as their

00:10:42,750 --> 00:10:46,079
UI metaphor so they've got more of a

00:10:44,490 --> 00:10:48,180
branded UI experience and they found

00:10:46,079 --> 00:10:51,060
that was very easy to develop with the

00:10:48,180 --> 00:10:54,750
flutter system so why were we interested

00:10:51,060 --> 00:10:56,550
in using flutter flutter wasn't even

00:10:54,750 --> 00:10:59,329
officially in alpha release when we

00:10:56,550 --> 00:11:01,649
started prototyping with it it is now

00:10:59,329 --> 00:11:05,459
but we were particularly interested in

00:11:01,649 --> 00:11:07,889
it for a few reasons one is we wanted a

00:11:05,459 --> 00:11:09,930
reduced API surface like our team is

00:11:07,889 --> 00:11:11,850
actually a fairly small team for like a

00:11:09,930 --> 00:11:15,180
mainstream Google consumer facing

00:11:11,850 --> 00:11:17,579
application and half of it was doing iOS

00:11:15,180 --> 00:11:19,529
and half the team was doing Android

00:11:17,579 --> 00:11:20,389
development and we liked each other just

00:11:19,529 --> 00:11:21,949
fine

00:11:20,389 --> 00:11:24,290
and we're using the same data sources

00:11:21,949 --> 00:11:26,480
and stuff but we couldn't really share

00:11:24,290 --> 00:11:27,920
code and we couldn't share expertise but

00:11:26,480 --> 00:11:29,660
we did have to have the applications be

00:11:27,920 --> 00:11:32,179
you know fairly identical on both

00:11:29,660 --> 00:11:33,470
platforms so it was nice to say okay

00:11:32,179 --> 00:11:35,299
great we're only gonna have one API to

00:11:33,470 --> 00:11:36,499
target and it's not going to be iOS or

00:11:35,299 --> 00:11:38,839
Android it's gonna be you the flutter

00:11:36,499 --> 00:11:40,819
SDK API you know

00:11:38,839 --> 00:11:42,259
similarly we were able to say it's just

00:11:40,819 --> 00:11:43,730
going to be this one language so we can

00:11:42,259 --> 00:11:45,949
share some expertise and we can share

00:11:43,730 --> 00:11:47,959
some code between ourselves and we don't

00:11:45,949 --> 00:11:53,629
have to like be expert in both Java and

00:11:47,959 --> 00:11:55,189
iOS and finally we had quite a bit of

00:11:53,629 --> 00:11:58,910
existing dart code this is kind of a

00:11:55,189 --> 00:12:01,069
bonus a bonus round here there are a lot

00:11:58,910 --> 00:12:03,230
of a lot of dart code running in

00:12:01,069 --> 00:12:04,489
production from major applications

00:12:03,230 --> 00:12:06,259
inside of Google so we were able to

00:12:04,489 --> 00:12:08,119
leverage some of that expertise and some

00:12:06,259 --> 00:12:09,350
of that code but that's not really

00:12:08,119 --> 00:12:12,459
required if you want to take advantage

00:12:09,350 --> 00:12:16,119
of flutter I only mention it because a

00:12:12,459 --> 00:12:19,220
lot of that code has been open sourced

00:12:16,119 --> 00:12:21,019
so you're not you're not doing a cold

00:12:19,220 --> 00:12:23,089
start you've actually got quite a lot of

00:12:21,019 --> 00:12:26,269
libraries that are available dart has a

00:12:23,089 --> 00:12:28,189
nice packaging system akin to NPM so you

00:12:26,269 --> 00:12:30,290
can get a hold of these dart packages

00:12:28,189 --> 00:12:32,540
and write your own but one of the other

00:12:30,290 --> 00:12:34,819
major reasons we were interested in

00:12:32,540 --> 00:12:37,879
using flutter was simple developer

00:12:34,819 --> 00:12:39,709
happiness our large mobile applications

00:12:37,879 --> 00:12:41,660
were taking several minutes to compile

00:12:39,709 --> 00:12:43,970
you know you'd go and you'd have to

00:12:41,660 --> 00:12:45,769
navigate to some subview and like make

00:12:43,970 --> 00:12:47,480
sure that you've changed the fonts or

00:12:45,769 --> 00:12:49,369
the spacing of the layout to be correct

00:12:47,480 --> 00:12:50,989
for that view and if you didn't you'd

00:12:49,369 --> 00:12:53,480
have to like rebuild and reallocate down

00:12:50,989 --> 00:12:56,449
to that view and flutter has hot

00:12:53,480 --> 00:12:59,149
reloading so as you might be comfortable

00:12:56,449 --> 00:13:01,279
with from other environments you can you

00:12:59,149 --> 00:13:03,980
can do this for like high-performance

00:13:01,279 --> 00:13:05,149
native mobile development as well and

00:13:03,980 --> 00:13:07,369
the nice thing a couple of nice things

00:13:05,149 --> 00:13:08,540
about hot reloading and flutter is the

00:13:07,369 --> 00:13:10,879
way the system is architecture

00:13:08,540 --> 00:13:13,879
architected it preserves state so you

00:13:10,879 --> 00:13:15,319
can hot reload in under a second and it

00:13:13,879 --> 00:13:16,309
will preserve the state of your

00:13:15,319 --> 00:13:17,929
application you see there's a little

00:13:16,309 --> 00:13:20,600
counter numbers going back and forth and

00:13:17,929 --> 00:13:23,059
when they change the text it will it

00:13:20,600 --> 00:13:25,459
will maintain the state another nice

00:13:23,059 --> 00:13:28,490
thing about flutter hot reloading is if

00:13:25,459 --> 00:13:30,949
you make an error you can you'll see

00:13:28,490 --> 00:13:32,269
debug information for that widget that

00:13:30,949 --> 00:13:33,799
had the error in it this particular

00:13:32,269 --> 00:13:34,040
widget is taking up the whole screen but

00:13:33,799 --> 00:13:35,860
it

00:13:34,040 --> 00:13:38,570
could be just some sub widget on your UI

00:13:35,860 --> 00:13:40,639
and you'll see debug information about

00:13:38,570 --> 00:13:42,230
the widget you can usually correct it

00:13:40,639 --> 00:13:43,639
and reload again and it'll just keep

00:13:42,230 --> 00:13:46,750
going so that's a really nice

00:13:43,639 --> 00:13:49,430
productivity thing that's code isn't it

00:13:46,750 --> 00:13:53,360
we're not seeing nearly enough code are

00:13:49,430 --> 00:13:54,589
we so I started learning flutter just on

00:13:53,360 --> 00:13:58,069
a flutter to write a prototype for our

00:13:54,589 --> 00:14:00,800
app and I started right where you

00:13:58,069 --> 00:14:02,720
probably will with widgets and widgets

00:14:00,800 --> 00:14:06,319
are the overriding metaphor in flutter

00:14:02,720 --> 00:14:07,790
so it's like files and UNIX systems so

00:14:06,319 --> 00:14:08,480
there's sort of a metaphor that's used

00:14:07,790 --> 00:14:10,819
for things you wouldn't necessarily

00:14:08,480 --> 00:14:13,459
expect them to be so everything in

00:14:10,819 --> 00:14:16,910
flutter is a widget including things

00:14:13,459 --> 00:14:19,250
like visuals styling and animation are

00:14:16,910 --> 00:14:22,699
all widgets and you compose these

00:14:19,250 --> 00:14:25,279
widgets and deep hierarchies of simpler

00:14:22,699 --> 00:14:27,199
objects and the flutter runtime system

00:14:25,279 --> 00:14:29,990
makes that efficient so let's take a

00:14:27,199 --> 00:14:32,000
look at a really simple widget this is

00:14:29,990 --> 00:14:33,860
like a labeled value it's got a label

00:14:32,000 --> 00:14:36,079
it's got a value it's got some default

00:14:33,860 --> 00:14:40,550
padding around it here's the source code

00:14:36,079 --> 00:14:41,959
for that widget just a couple of things

00:14:40,550 --> 00:14:43,970
it's got a couple of member variables

00:14:41,959 --> 00:14:47,480
they're marked as final which would be

00:14:43,970 --> 00:14:49,339
equivalent like es6 Const it's got a

00:14:47,480 --> 00:14:50,870
Const constructor which means once you

00:14:49,339 --> 00:14:51,440
construct this object it's never going

00:14:50,870 --> 00:14:53,209
to change

00:14:51,440 --> 00:14:54,829
widgets are always immutable do I

00:14:53,209 --> 00:14:58,430
default but you can even mark them

00:14:54,829 --> 00:15:00,889
constant a language level and then all

00:14:58,430 --> 00:15:02,899
it's really responsible for is returning

00:15:00,889 --> 00:15:05,300
a tree of other widgets that will then

00:15:02,899 --> 00:15:07,910
be composed so this is this is maybe

00:15:05,300 --> 00:15:11,300
equivalent to a pure functional react

00:15:07,910 --> 00:15:12,889
component you know if you want to expand

00:15:11,300 --> 00:15:14,540
this the padding you could just

00:15:12,889 --> 00:15:16,399
introduce a padding widget around

00:15:14,540 --> 00:15:19,010
everything else so it gives you a single

00:15:16,399 --> 00:15:20,959
model a single semantic model for doing

00:15:19,010 --> 00:15:24,260
your styling as well as rendering your

00:15:20,959 --> 00:15:26,000
UI if you do have state like this this

00:15:24,260 --> 00:15:27,560
nice material design slider that's

00:15:26,000 --> 00:15:28,910
dragging back and forth it has some

00:15:27,560 --> 00:15:31,970
state which is the current position of

00:15:28,910 --> 00:15:34,009
the slider in numeric space and then

00:15:31,970 --> 00:15:37,880
that that floating-point value is being

00:15:34,009 --> 00:15:40,430
rendered in a label so this is called a

00:15:37,880 --> 00:15:41,990
stateful widget a stateful which it

00:15:40,430 --> 00:15:44,569
doesn't produce the render method

00:15:41,990 --> 00:15:46,910
directly it produces an object called a

00:15:44,569 --> 00:15:47,720
state object that then implements the

00:15:46,910 --> 00:15:50,000
the render map

00:15:47,720 --> 00:15:53,900
state objects stick around between

00:15:50,000 --> 00:15:55,910
widget rebuilds so the state and this

00:15:53,900 --> 00:15:59,900
object is just a value as a floating

00:15:55,910 --> 00:16:01,610
point value and when you implement the

00:15:59,900 --> 00:16:03,440
build method now in your state object

00:16:01,610 --> 00:16:05,210
the state keeps building this widget

00:16:03,440 --> 00:16:07,850
tree you can use that value so it keeps

00:16:05,210 --> 00:16:09,440
the the the stateful value of your

00:16:07,850 --> 00:16:12,350
widget together with the code that

00:16:09,440 --> 00:16:15,200
builds the UI and that's actually all

00:16:12,350 --> 00:16:17,240
that flutter provides at a conceptual

00:16:15,200 --> 00:16:19,040
level it's got a really rich library of

00:16:17,240 --> 00:16:19,790
these things that do a lot of stuff for

00:16:19,040 --> 00:16:21,140
you

00:16:19,790 --> 00:16:23,450
but that's really what you need to know

00:16:21,140 --> 00:16:24,590
to get started building so knowing this

00:16:23,450 --> 00:16:27,290
and having worked a little bit with

00:16:24,590 --> 00:16:29,270
react and redux on my hobby projects I

00:16:27,290 --> 00:16:30,740
built a prototype in a couple of months

00:16:29,270 --> 00:16:34,550
and I want to tell you though most of

00:16:30,740 --> 00:16:37,820
that time was doing application

00:16:34,550 --> 00:16:39,470
infrastructure work to you know be able

00:16:37,820 --> 00:16:40,820
to use it from Dart and to be you know

00:16:39,470 --> 00:16:42,110
work with our build system and stuff

00:16:40,820 --> 00:16:43,610
there's a lot of kind of heavyweight

00:16:42,110 --> 00:16:45,320
infrastructure at Google for writing is

00:16:43,610 --> 00:16:47,750
super scalable applications with really

00:16:45,320 --> 00:16:50,480
large teams the flutter part was kind of

00:16:47,750 --> 00:16:52,490
the fun lightweight part and here's a

00:16:50,480 --> 00:16:55,970
little screenshot of the the application

00:16:52,490 --> 00:16:57,230
that the prototype application you see

00:16:55,970 --> 00:16:58,820
like the animations are pretty smooth

00:16:57,230 --> 00:17:00,470
and UI looks pretty nice because I'm

00:16:58,820 --> 00:17:01,760
using the out-of-the-box flutter widgets

00:17:00,470 --> 00:17:03,830
and it's actually making a live data

00:17:01,760 --> 00:17:06,260
query against our production servers

00:17:03,830 --> 00:17:09,260
it's a fake account so that's nobody's

00:17:06,260 --> 00:17:11,600
real data by the way so how do I build

00:17:09,260 --> 00:17:14,930
the prototype I started with the

00:17:11,600 --> 00:17:17,510
out-of-the-box widgets I use the core

00:17:14,930 --> 00:17:20,150
library for HTTP to do the networking to

00:17:17,510 --> 00:17:22,670
do authenticated HTTP fetches against

00:17:20,150 --> 00:17:25,579
our production servers I used the Google

00:17:22,670 --> 00:17:27,530
authentication plug-in so if you want to

00:17:25,579 --> 00:17:29,120
have your users authenticate to their

00:17:27,530 --> 00:17:30,860
Google services you would use the same

00:17:29,120 --> 00:17:32,360
plug-in that I did for the prototype and

00:17:30,860 --> 00:17:33,770
it you know it pulls up the permissions

00:17:32,360 --> 00:17:35,270
page that they have to agree to and all

00:17:33,770 --> 00:17:36,410
of that you don't have to write any of

00:17:35,270 --> 00:17:39,440
that stuff yourself you just get the the

00:17:36,410 --> 00:17:41,660
correct token back and I used a Redux

00:17:39,440 --> 00:17:44,510
datastore I used a ported Redux called

00:17:41,660 --> 00:17:47,480
green cat and that worked just fine I

00:17:44,510 --> 00:17:49,370
worked just like you'd expect it to so

00:17:47,480 --> 00:17:51,350
this was convincing enough we decided we

00:17:49,370 --> 00:17:54,470
would start work on a production version

00:17:51,350 --> 00:17:55,790
of our application using flutter but one

00:17:54,470 --> 00:17:57,410
thing they became pretty obvious to us

00:17:55,790 --> 00:17:59,450
is that we had some complicated

00:17:57,410 --> 00:18:01,340
asynchronous logic going on especially

00:17:59,450 --> 00:18:03,500
go into detail for a second about this

00:18:01,340 --> 00:18:05,150
view you can say it'll resort when you

00:18:03,500 --> 00:18:06,860
click on one of these column headers you

00:18:05,150 --> 00:18:08,750
can scroll past the currently loaded

00:18:06,860 --> 00:18:10,640
page of data and just keep scrolling and

00:18:08,750 --> 00:18:12,260
eventually when you stop scrolling it'll

00:18:10,640 --> 00:18:14,420
load the next page of data so you can

00:18:12,260 --> 00:18:16,010
quit down to these ends of these multi

00:18:14,420 --> 00:18:18,950
thousand line lists and it will it'll

00:18:16,010 --> 00:18:20,600
fetch extra data for you and it will

00:18:18,950 --> 00:18:22,460
also filter by that date range at the

00:18:20,600 --> 00:18:24,860
top it'll filter your queries by that

00:18:22,460 --> 00:18:26,600
date range and all of these user

00:18:24,860 --> 00:18:29,480
interactions and all these network

00:18:26,600 --> 00:18:31,340
interactions you know are fairly

00:18:29,480 --> 00:18:32,660
complicated to coordinate and we looked

00:18:31,340 --> 00:18:35,570
at a bunch of solutions for this and

00:18:32,660 --> 00:18:38,330
what we decided to use was observables

00:18:35,570 --> 00:18:41,630
so there's a port of the observables

00:18:38,330 --> 00:18:44,090
library it only took about a hundred

00:18:41,630 --> 00:18:46,010
lines of code to do that that's blurred

00:18:44,090 --> 00:18:49,340
out because it's you know not open

00:18:46,010 --> 00:18:50,870
source code but that's really about what

00:18:49,340 --> 00:18:52,400
the code looked like to do all of those

00:18:50,870 --> 00:18:56,600
interactions with that table and all

00:18:52,400 --> 00:18:58,930
that complicated async logic that's a

00:18:56,600 --> 00:19:03,110
like a snippet a readable snippet of it

00:18:58,930 --> 00:19:05,150
but you can see it's it's very similar

00:19:03,110 --> 00:19:07,640
to how you would chain operations on

00:19:05,150 --> 00:19:09,770
collections and JavaScript some say it's

00:19:07,640 --> 00:19:11,930
just very straight line and you're

00:19:09,770 --> 00:19:15,080
declaring a lot of interaction this is

00:19:11,930 --> 00:19:16,730
taking the the virtual list scroll index

00:19:15,080 --> 00:19:18,140
that that list is virtualized so it's

00:19:16,730 --> 00:19:21,830
not doing a lot of extra work that's not

00:19:18,140 --> 00:19:23,120
on screen and using the observable for

00:19:21,830 --> 00:19:26,120
the scroll position of the list

00:19:23,120 --> 00:19:28,190
to drive the creation of a network RPC

00:19:26,120 --> 00:19:29,660
request that asks for a specific page of

00:19:28,190 --> 00:19:31,220
data so it's doing kind of a lot of work

00:19:29,660 --> 00:19:34,190
but it's all kind of packaged up in this

00:19:31,220 --> 00:19:35,750
nice declara it's too much that's too

00:19:34,190 --> 00:19:37,670
complicated isn't it we're gonna do this

00:19:35,750 --> 00:19:39,110
widget instead of that list so I can

00:19:37,670 --> 00:19:41,630
show you what observables look like when

00:19:39,110 --> 00:19:44,300
you're coding this is just a button as

00:19:41,630 --> 00:19:45,920
you get a bunch of clicks on the button

00:19:44,300 --> 00:19:47,090
and you add them up and render it inside

00:19:45,920 --> 00:19:50,330
the button so it's just a link riman

00:19:47,090 --> 00:19:51,920
encounter these are all kind of trivial

00:19:50,330 --> 00:19:54,230
examples in there and it's overkill

00:19:51,920 --> 00:19:58,190
sometimes to use streams but it's it's

00:19:54,230 --> 00:20:00,680
easy to illustrate this this is going to

00:19:58,190 --> 00:20:02,810
use the scan operator from our X from

00:20:00,680 --> 00:20:04,880
the observables library this is a little

00:20:02,810 --> 00:20:06,650
animated rx marbles diagram of how the

00:20:04,880 --> 00:20:08,450
scan operator works it basically takes

00:20:06,650 --> 00:20:11,360
the last value produced by the stream

00:20:08,450 --> 00:20:13,280
and the new value and runs a function on

00:20:11,360 --> 00:20:15,880
them and outputs the results of that

00:20:13,280 --> 00:20:15,880
function

00:20:16,670 --> 00:20:21,660
so this is all the code that you would

00:20:19,320 --> 00:20:23,730
need to do to implement a stream of this

00:20:21,660 --> 00:20:25,800
incrementing value based on clicks on

00:20:23,730 --> 00:20:27,450
the button you could you know you see

00:20:25,800 --> 00:20:29,880
it's creating a new observable from the

00:20:27,450 --> 00:20:31,200
stream of clicks and it's running the

00:20:29,880 --> 00:20:32,820
scan operator on it with this

00:20:31,200 --> 00:20:34,500
accumulation function you can even play

00:20:32,820 --> 00:20:36,300
coke off on it a little bit and inline

00:20:34,500 --> 00:20:38,400
the accumulation function because we've

00:20:36,300 --> 00:20:43,620
got some pretty compact fat our syntax

00:20:38,400 --> 00:20:46,880
for defining functions so observables

00:20:43,620 --> 00:20:49,800
are just transforms on this data flow

00:20:46,880 --> 00:20:51,120
and if you want to make your own

00:20:49,800 --> 00:20:52,800
observables or if you want to be able to

00:20:51,120 --> 00:20:55,380
read the observables library in Dart

00:20:52,800 --> 00:20:57,900
what you can use is the core dart

00:20:55,380 --> 00:20:59,550
streams library so let's take a couple

00:20:57,900 --> 00:21:01,620
of minutes and look at streams this is

00:20:59,550 --> 00:21:03,590
kind of a contrived example but again

00:21:01,620 --> 00:21:05,550
it's this stream of clicks on a button

00:21:03,590 --> 00:21:08,370
down at the bottom you can see you can

00:21:05,550 --> 00:21:11,280
subscribe to that stream of clicks and

00:21:08,370 --> 00:21:13,080
then call set state with an incrementing

00:21:11,280 --> 00:21:15,240
counter values so this is this is the

00:21:13,080 --> 00:21:18,960
state of a stateful widget calling set

00:21:15,240 --> 00:21:20,990
state so it'll be rear-end 'red and

00:21:18,960 --> 00:21:23,400
here's here's how you build the button

00:21:20,990 --> 00:21:26,040
they're just mapping the on pressed

00:21:23,400 --> 00:21:28,650
handler to push the number one into this

00:21:26,040 --> 00:21:30,780
stream so the input stream that the that

00:21:28,650 --> 00:21:32,340
you're starting with is 1 1 1 1 1 1 1 11

00:21:30,780 --> 00:21:36,420
asynchronously from the user and then

00:21:32,340 --> 00:21:38,490
they're being added up and there is a

00:21:36,420 --> 00:21:40,679
member variable getting updated so I can

00:21:38,490 --> 00:21:43,530
call set state with it but that feels

00:21:40,679 --> 00:21:45,840
kind of non-functional to me so you

00:21:43,530 --> 00:21:48,720
which can do is you can move it into

00:21:45,840 --> 00:21:52,559
like a local variable and then use it

00:21:48,720 --> 00:21:54,570
inside of the stream map operator so

00:21:52,559 --> 00:21:56,010
this is just like map on an array except

00:21:54,570 --> 00:21:58,620
instead of processing all the values in

00:21:56,010 --> 00:22:00,540
the array it's processing them as they

00:21:58,620 --> 00:22:02,309
come in as they arrive and then I'm just

00:22:00,540 --> 00:22:04,470
calling this local closure that's

00:22:02,309 --> 00:22:11,130
incrementing the counter value and

00:22:04,470 --> 00:22:13,410
returning a stream of that value but I'm

00:22:11,130 --> 00:22:15,750
not calling set state because what

00:22:13,410 --> 00:22:18,750
flutter gives you out of the box

00:22:15,750 --> 00:22:20,040
is this the stream builder widget and

00:22:18,750 --> 00:22:22,559
that's a generic widget that you can

00:22:20,040 --> 00:22:24,600
include and it takes the stream that's

00:22:22,559 --> 00:22:27,590
producing some value and a build

00:22:24,600 --> 00:22:30,380
function that takes that value

00:22:27,590 --> 00:22:31,850
and you takes a snapshot of the latest

00:22:30,380 --> 00:22:33,500
version of that value and lets you build

00:22:31,850 --> 00:22:35,690
your UI using that value so you don't

00:22:33,500 --> 00:22:38,750
have to hold on to the state in your

00:22:35,690 --> 00:22:40,730
stateful widget you just have to use a

00:22:38,750 --> 00:22:42,620
stringbuilder widget and that will also

00:22:40,730 --> 00:22:44,750
take care of subscribing and

00:22:42,620 --> 00:22:46,429
unsubscribing to the stream and calling

00:22:44,750 --> 00:22:48,830
set state for you so it's really the way

00:22:46,429 --> 00:22:50,529
to go if you're doing stateful UI if you

00:22:48,830 --> 00:22:53,750
look at this map function a little bit

00:22:50,529 --> 00:22:55,370
it's just a transform on the stream so

00:22:53,750 --> 00:22:57,830
map is implemented with transform

00:22:55,370 --> 00:23:00,080
transforms an interface you can

00:22:57,830 --> 00:23:02,450
implement yourself there's a handy

00:23:00,080 --> 00:23:05,450
stream transform operator here I'm not

00:23:02,450 --> 00:23:08,570
going to go into this too much except to

00:23:05,450 --> 00:23:11,360
say you could make a generic helper

00:23:08,570 --> 00:23:12,470
function it takes parameterised types so

00:23:11,360 --> 00:23:14,809
you don't have to work on integers like

00:23:12,470 --> 00:23:18,230
I'm doing in this example and if you

00:23:14,809 --> 00:23:19,730
look at this implement implementation

00:23:18,230 --> 00:23:21,200
you can see it's basically calling a

00:23:19,730 --> 00:23:24,080
reducer function with a state in action

00:23:21,200 --> 00:23:26,870
which is the core of how redux does its

00:23:24,080 --> 00:23:30,919
thing in addition to being almost almost

00:23:26,870 --> 00:23:32,870
all of redux right here you get this is

00:23:30,919 --> 00:23:35,390
pretty much literally the implementation

00:23:32,870 --> 00:23:37,399
of the scan operator in the RX

00:23:35,390 --> 00:23:40,029
observables library that you get with rx

00:23:37,399 --> 00:23:43,159
start if you're using rx dart

00:23:40,029 --> 00:23:45,049
observables are subclass from stream so

00:23:43,159 --> 00:23:47,419
you can pass one directly to the stream

00:23:45,049 --> 00:23:50,299
builder widget and that's what we're

00:23:47,419 --> 00:23:51,710
doing with a lot of our our code so how

00:23:50,299 --> 00:23:53,240
are we using flutter and our production

00:23:51,710 --> 00:23:55,130
app well the first thing is we have a

00:23:53,240 --> 00:23:57,710
lot of business objects that represent

00:23:55,130 --> 00:24:00,230
kind of complex data flows and and user

00:23:57,710 --> 00:24:01,870
interactions and network requests and

00:24:00,230 --> 00:24:04,490
we're modeling those things as

00:24:01,870 --> 00:24:06,799
essentially named collections of streams

00:24:04,490 --> 00:24:08,929
and sinks a sink is just how you input a

00:24:06,799 --> 00:24:11,059
value into the stream so the public API

00:24:08,929 --> 00:24:13,940
for a business object would be you know

00:24:11,059 --> 00:24:15,409
you put a value in here and then there's

00:24:13,940 --> 00:24:17,179
a stream that you could subscribe to

00:24:15,409 --> 00:24:18,649
that might represent the results of

00:24:17,179 --> 00:24:21,529
taking that value in making a net

00:24:18,649 --> 00:24:25,279
request and transforming the data to

00:24:21,529 --> 00:24:28,840
make it convenient for rendering so and

00:24:25,279 --> 00:24:30,890
and that connection is actually made

00:24:28,840 --> 00:24:32,659
using our observables so the

00:24:30,890 --> 00:24:35,000
implementation of connecting the input

00:24:32,659 --> 00:24:36,679
sync to the output stream is through

00:24:35,000 --> 00:24:39,049
some arbitrarily complicated stream

00:24:36,679 --> 00:24:40,880
chain of observables so we're using the

00:24:39,049 --> 00:24:42,200
observables library ourselves

00:24:40,880 --> 00:24:44,420
also using the native streaming library

00:24:42,200 --> 00:24:46,760
it sort of depends on the use case we're

00:24:44,420 --> 00:24:48,230
using plugins we're not just using

00:24:46,760 --> 00:24:50,750
plugins because we want to access

00:24:48,230 --> 00:24:54,490
certain platform functionality we do but

00:24:50,750 --> 00:24:56,870
we also have quite a lot of native

00:24:54,490 --> 00:25:00,080
libraries that we've already implemented

00:24:56,870 --> 00:25:01,460
for Android on and iOS for like that

00:25:00,080 --> 00:25:03,380
have comparable functionality for

00:25:01,460 --> 00:25:06,100
example first-party authentication is a

00:25:03,380 --> 00:25:07,760
plug-in and there's Android and iOS

00:25:06,100 --> 00:25:10,190
implementations that we're wrapping up

00:25:07,760 --> 00:25:11,300
as a plug-in so we can use it in our

00:25:10,190 --> 00:25:14,210
application without having to write all

00:25:11,300 --> 00:25:16,610
is kind of complicated and maybe legally

00:25:14,210 --> 00:25:20,060
significant code to make sure we're

00:25:16,610 --> 00:25:21,200
authenticating people correctly we're

00:25:20,060 --> 00:25:22,850
using a lot of flutter widgets we're

00:25:21,200 --> 00:25:24,950
contributing widgets back to flutter

00:25:22,850 --> 00:25:27,800
there was an engineer on our sister team

00:25:24,950 --> 00:25:30,290
who wrote an autocomplete widget that's

00:25:27,800 --> 00:25:32,450
going into the main flutter library and

00:25:30,290 --> 00:25:35,960
that's because we're relying on all of

00:25:32,450 --> 00:25:38,930
you there's there's quite an ecosystem

00:25:35,960 --> 00:25:40,910
of reactive tooling already not all of

00:25:38,930 --> 00:25:43,970
it is written by Googlers there's the RX

00:25:40,910 --> 00:25:46,370
dart library that you can use if you're

00:25:43,970 --> 00:25:48,320
into immutable immutable j/s immutable

00:25:46,370 --> 00:25:50,690
values I encourage you to take a look at

00:25:48,320 --> 00:25:53,810
the built value library that uses some

00:25:50,690 --> 00:25:56,450
really slick dart code generation which

00:25:53,810 --> 00:25:59,170
is a whole other topic but it makes it

00:25:56,450 --> 00:26:01,640
very easy for you to say to define a

00:25:59,170 --> 00:26:05,900
complicated structure of immutable

00:26:01,640 --> 00:26:07,820
objects and then efficiently produce new

00:26:05,900 --> 00:26:12,020
versions of that based on your your

00:26:07,820 --> 00:26:13,850
desired mutations and then there are

00:26:12,020 --> 00:26:14,390
redox implementations so this is the one

00:26:13,850 --> 00:26:16,400
you should use

00:26:14,390 --> 00:26:20,770
it's the the public Dart Redux

00:26:16,400 --> 00:26:23,150
implementation there is a flutter

00:26:20,770 --> 00:26:24,140
companion package these guys are

00:26:23,150 --> 00:26:25,790
building out these are not Google

00:26:24,140 --> 00:26:28,160
employees but they're building out the

00:26:25,790 --> 00:26:31,760
the redox an ecosystem for you so you

00:26:28,160 --> 00:26:34,810
can hook up to a Redux store with

00:26:31,760 --> 00:26:38,780
flutter with a minimum of boilerplate so

00:26:34,810 --> 00:26:40,910
go to and I just want to wrap this up

00:26:38,780 --> 00:26:43,040
and say you've seen how like

00:26:40,910 --> 00:26:44,900
applications might want to respond to

00:26:43,040 --> 00:26:49,370
data that changes on some unpredictable

00:26:44,900 --> 00:26:52,550
schedule you can use observables to get

00:26:49,370 --> 00:26:54,500
a powerful vocabulary for declaratively

00:26:52,550 --> 00:26:58,309
describing how you want to react to

00:26:54,500 --> 00:27:00,289
things you can use dart streams if you

00:26:58,309 --> 00:27:02,299
want a little more low-level power I

00:27:00,289 --> 00:27:03,860
think you know dart streams is going to

00:27:02,299 --> 00:27:06,740
continue to add things and maybe and

00:27:03,860 --> 00:27:11,809
maybe get up to parity with observables

00:27:06,740 --> 00:27:13,159
so you just use them directly and you

00:27:11,809 --> 00:27:15,380
can hook it all into flutter pretty

00:27:13,159 --> 00:27:17,000
trivially flutter is designed to work

00:27:15,380 --> 00:27:21,159
with data that's going to be changing

00:27:17,000 --> 00:27:24,230
rapidly so you can take all of your

00:27:21,159 --> 00:27:25,429
reactive development expertise and start

00:27:24,230 --> 00:27:27,289
right away with flutter you don't have

00:27:25,429 --> 00:27:29,299
to like reinvent your your mental model

00:27:27,289 --> 00:27:32,179
of how this stuff works you could just

00:27:29,299 --> 00:27:34,220
use mine if you've got any questions

00:27:32,179 --> 00:27:35,960
about flutter if you download the SDK

00:27:34,220 --> 00:27:38,240
and play with it and have problems with

00:27:35,960 --> 00:27:41,030
it you can ask me anything tomorrow at

00:27:38,240 --> 00:27:42,890
2:30 there's also a talk about Rx

00:27:41,030 --> 00:27:46,610
tomorrow at 5:30 so you want to really

00:27:42,890 --> 00:27:47,990
deep dive and observables if you want to

00:27:46,610 --> 00:27:50,929
learn more about our X you can go to

00:27:47,990 --> 00:27:53,539
reactive xio if you want to have some

00:27:50,929 --> 00:27:55,220
those cool marble diagrams there rx

00:27:53,539 --> 00:27:58,490
marbles comm you can learn more about

00:27:55,220 --> 00:28:00,140
dart at dartlang.org one of the cool

00:27:58,490 --> 00:28:02,360
things they have on that site is an

00:28:00,140 --> 00:28:03,890
interactive browser-based repple for the

00:28:02,360 --> 00:28:06,080
dart language so you can just pull it up

00:28:03,890 --> 00:28:07,909
in your browser and try out code

00:28:06,080 --> 00:28:09,140
snippets in dart and it has a sharing

00:28:07,909 --> 00:28:11,270
functionality we use it all the time

00:28:09,140 --> 00:28:12,620
we'd like hey how'd you code this up in

00:28:11,270 --> 00:28:13,789
dart and you're like well you could try

00:28:12,620 --> 00:28:15,140
this or you could try that and you could

00:28:13,789 --> 00:28:17,120
send a link to somebody it's really

00:28:15,140 --> 00:28:18,919
really handy and finally if you want to

00:28:17,120 --> 00:28:21,919
learn more about flutter you can go to

00:28:18,919 --> 00:28:24,470
flutter dot IO and get the link to

00:28:21,919 --> 00:28:26,380
download the SDK for your platform as

00:28:24,470 --> 00:28:29,570
well as a lot of really good polished

00:28:26,380 --> 00:28:32,840
documentation and API Docs and so forth

00:28:29,570 --> 00:28:35,200
oh okay all right I'm doing so thank you

00:28:32,840 --> 00:28:35,200
very much

00:28:41,870 --> 00:28:43,930

YouTube URL: https://www.youtube.com/watch?v=n_5JULTrstU


