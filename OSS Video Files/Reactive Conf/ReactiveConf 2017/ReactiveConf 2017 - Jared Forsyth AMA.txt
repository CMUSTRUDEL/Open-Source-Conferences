Title: ReactiveConf 2017 - Jared Forsyth AMA
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Discovery stage

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:15,559 --> 00:00:20,330
I'm curious what got you into reason

00:00:18,560 --> 00:00:22,220
because you have this kind of you

00:00:20,330 --> 00:00:23,660
traverse the spectrum where I've seen

00:00:22,220 --> 00:00:25,670
you do a lot of cool closure trip stuff

00:00:23,660 --> 00:00:28,400
you're very familiar with the JavaScript

00:00:25,670 --> 00:00:45,710
world how did you end up working so much

00:00:28,400 --> 00:00:52,700
in reason for contributing so much let's

00:00:45,710 --> 00:00:54,770
try this okay so I I am always

00:00:52,700 --> 00:00:57,200
dissatisfied with whatever language I'm

00:00:54,770 --> 00:01:00,110
working in I guess that's one way to put

00:00:57,200 --> 00:01:01,670
it because I have this vision of the

00:01:00,110 --> 00:01:02,870
future where it's like oh computers

00:01:01,670 --> 00:01:05,330
should be able to take care of this for

00:01:02,870 --> 00:01:08,509
me like why am I am i handling this

00:01:05,330 --> 00:01:10,160
nitty-gritty that like computers are so

00:01:08,509 --> 00:01:14,119
powerful and so fast like why can't I

00:01:10,160 --> 00:01:16,130
just do this and so if I'm working in

00:01:14,119 --> 00:01:17,690
Java or Swift I'm like these types are

00:01:16,130 --> 00:01:19,340
getting me down way too many annotations

00:01:17,690 --> 00:01:24,140
if I'm working in JavaScript it's like I

00:01:19,340 --> 00:01:26,420
need some types and a couple years ago I

00:01:24,140 --> 00:01:27,709
started using flow with my JavaScript

00:01:26,420 --> 00:01:29,690
and I was like okay this is this is

00:01:27,709 --> 00:01:32,060
better like I can feel more comfortable

00:01:29,690 --> 00:01:34,700
at this and we're using it at work at

00:01:32,060 --> 00:01:36,920
Khan Academy but then I was reaching the

00:01:34,700 --> 00:01:40,550
edges of where flow can help me and it's

00:01:36,920 --> 00:01:42,140
like oh it I I have this false sense of

00:01:40,550 --> 00:01:45,200
security because flow actually allows a

00:01:42,140 --> 00:01:47,270
lot of lack of safety it allows a lot of

00:01:45,200 --> 00:01:50,090
things in order to fit in well with the

00:01:47,270 --> 00:01:53,179
JavaScript ecosystem so I was looking

00:01:50,090 --> 00:01:55,630
beyond I was looking at Elm and frankly

00:01:53,179 --> 00:01:59,330
the syntax held me back where it's like

00:01:55,630 --> 00:02:02,599
I don't wanna learn new things which is

00:01:59,330 --> 00:02:04,970
funny and then I was talking to Jordan

00:02:02,599 --> 00:02:08,000
walk who started reason and he was like

00:02:04,970 --> 00:02:10,789
oh here's this thing it's Oh camel and I

00:02:08,000 --> 00:02:12,349
I started kind of playing around with it

00:02:10,789 --> 00:02:15,830
year and a half on a year and a half ago

00:02:12,349 --> 00:02:18,920
but it was still very very bleeding edge

00:02:15,830 --> 00:02:21,410
and I was bleeding a lot and so you know

00:02:18,920 --> 00:02:24,410
I kind of got off of it got back

00:02:21,410 --> 00:02:26,600
interested into it six months ago I was

00:02:24,410 --> 00:02:28,090
just really happy with with the

00:02:26,600 --> 00:02:30,489
trade-off that they've chosen with the

00:02:28,090 --> 00:02:33,450
places they've come down in immutability

00:02:30,489 --> 00:02:37,390
versus mutability kind of syntax

00:02:33,450 --> 00:02:39,430
adoption kind of all these things so one

00:02:37,390 --> 00:02:41,739
phrase I generally hate to hear is this

00:02:39,430 --> 00:02:44,290
idea of use the best tool for their job

00:02:41,739 --> 00:02:46,030
just use the best tool right I think you

00:02:44,290 --> 00:02:47,650
often need to follow up with this idea

00:02:46,030 --> 00:02:49,060
of like what's the rubric how do you

00:02:47,650 --> 00:02:49,720
actually decide what is the best tool

00:02:49,060 --> 00:02:51,819
for the job

00:02:49,720 --> 00:02:52,870
so from someone kind of looking in from

00:02:51,819 --> 00:02:54,849
the outside

00:02:52,870 --> 00:02:56,920
what are the differentiators between say

00:02:54,849 --> 00:02:59,200
Elm and reason and pure script and

00:02:56,920 --> 00:03:01,569
whatnot like how do I decide which of

00:02:59,200 --> 00:03:11,849
these I actually approach and apply or

00:03:01,569 --> 00:03:14,560
use an anger some of this has to do with

00:03:11,849 --> 00:03:16,480
kind of how you feel about programming

00:03:14,560 --> 00:03:19,209
and and maybe it's a maturity thing

00:03:16,480 --> 00:03:20,530
maybe it's like oh i I've tried this way

00:03:19,209 --> 00:03:24,519
and it was terrible I'm gonna try this

00:03:20,530 --> 00:03:26,890
new way you know people who have really

00:03:24,519 --> 00:03:28,980
been stung by one kind of program you're

00:03:26,890 --> 00:03:31,030
like oh let's let's go to the opposite

00:03:28,980 --> 00:03:33,220
and I think it's great that there are

00:03:31,030 --> 00:03:36,209
different options where it's like Elm

00:03:33,220 --> 00:03:40,359
has these properties where where it is

00:03:36,209 --> 00:03:44,470
you know as I said in my talk more

00:03:40,359 --> 00:03:48,569
strict than reason for example where Elm

00:03:44,470 --> 00:03:51,609
is immutability all day no local state

00:03:48,569 --> 00:03:52,900
just functions and that's that's the

00:03:51,609 --> 00:03:54,940
best way to do it

00:03:52,900 --> 00:03:56,680
whereas reason says where we're gonna

00:03:54,940 --> 00:03:58,090
have some of the object oriented we're

00:03:56,680 --> 00:04:00,459
gonna have some of the local state and

00:03:58,090 --> 00:04:05,829
some mutability if that's what you're

00:04:00,459 --> 00:04:09,370
into so it's it's hard to say it's not

00:04:05,829 --> 00:04:12,880
like Oh use Elm if you are doing X use

00:04:09,370 --> 00:04:14,769
reason if you're doing why I can

00:04:12,880 --> 00:04:18,039
definitely say use Elm or reason rather

00:04:14,769 --> 00:04:19,690
than JavaScript like I can be pretty

00:04:18,039 --> 00:04:22,289
confident in saying javascript is the

00:04:19,690 --> 00:04:24,039
baseline and we're definitely above that

00:04:22,289 --> 00:04:24,729
but it kinda has to do with your

00:04:24,039 --> 00:04:29,380
philosophy

00:04:24,729 --> 00:04:31,930
I remember a satisfying well it's it may

00:04:29,380 --> 00:04:33,880
be interesting to ask kind of you know

00:04:31,930 --> 00:04:35,200
in many ways I think they are kind of

00:04:33,880 --> 00:04:37,780
pointing towards the same goal right

00:04:35,200 --> 00:04:39,070
it's like we're all in a very similar

00:04:37,780 --> 00:04:40,009
space we're very very close together

00:04:39,070 --> 00:04:43,460
over here and read

00:04:40,009 --> 00:04:44,930
and whatnot if you had to guess if you

00:04:43,460 --> 00:04:46,580
were forced to on stage someone asked

00:04:44,930 --> 00:04:48,379
you this uncomfortable question how what

00:04:46,580 --> 00:04:50,089
would you say was what is the difference

00:04:48,379 --> 00:04:54,619
in the goals between these different

00:04:50,089 --> 00:05:02,300
languages so between elm pure script and

00:04:54,619 --> 00:05:04,699
reason in particular I think so pure

00:05:02,300 --> 00:05:07,520
scripts goal as I understand it so that

00:05:04,699 --> 00:05:11,719
this is where I'm least confident where

00:05:07,520 --> 00:05:15,039
their goal is be as much like Haskell as

00:05:11,719 --> 00:05:19,789
possible but compile to JavaScript well

00:05:15,039 --> 00:05:21,770
and Elms goal as a contrast from that is

00:05:19,789 --> 00:05:23,449
like be inspired by a lot of cool things

00:05:21,770 --> 00:05:26,330
that Haskell does but actually be a lot

00:05:23,449 --> 00:05:28,449
more restricted in the the things that

00:05:26,330 --> 00:05:31,189
the language can do the power it has and

00:05:28,449 --> 00:05:35,389
there might be a lot easier to learn a

00:05:31,189 --> 00:05:39,499
lot more maintainable a lot safer but

00:05:35,389 --> 00:05:42,740
still being very kind of very true to

00:05:39,499 --> 00:05:47,180
the Haskell ethic like the the mindset

00:05:42,740 --> 00:05:52,729
of having purity and you know

00:05:47,180 --> 00:05:57,649
dysfunctional based and then also I

00:05:52,729 --> 00:06:02,050
think Elm stands out because it's so

00:05:57,649 --> 00:06:04,219
very well tuned towards making web UIs

00:06:02,050 --> 00:06:06,379
well it's like this is what we're gonna

00:06:04,219 --> 00:06:08,839
be super good at right if you want to

00:06:06,379 --> 00:06:11,240
make deep learning or whatever like Elm

00:06:08,839 --> 00:06:14,659
is not probably not going to be where

00:06:11,240 --> 00:06:16,069
you turn but that that's a really great

00:06:14,659 --> 00:06:16,999
thing if what you want is to build a web

00:06:16,069 --> 00:06:18,800
UI because you're not you're not gonna

00:06:16,999 --> 00:06:21,139
fall off the path and be like oh I don't

00:06:18,800 --> 00:06:23,149
Lea went down this aspect of the

00:06:21,139 --> 00:06:24,979
language that is better suited for X or

00:06:23,149 --> 00:06:29,509
Y or you know all of it is well-suited

00:06:24,979 --> 00:06:31,999
toward making web UIs and then and then

00:06:29,509 --> 00:06:34,939
reason by contrast doesn't doesn't have

00:06:31,999 --> 00:06:38,330
that focus where it's like reason also

00:06:34,939 --> 00:06:40,729
wants to be able to write servers and do

00:06:38,330 --> 00:06:43,639
kind of interesting like performance

00:06:40,729 --> 00:06:45,379
based things in addition to being a good

00:06:43,639 --> 00:06:48,019
compilation target or a compilation

00:06:45,379 --> 00:06:49,550
source for going to JavaScript and

00:06:48,019 --> 00:06:51,099
building things on the web so I think I

00:06:49,550 --> 00:06:53,080
think reason tries to be more general

00:06:51,099 --> 00:06:55,150
and

00:06:53,080 --> 00:06:57,729
have kind of multiple paradigms so that

00:06:55,150 --> 00:07:02,139
people from different sides can can get

00:06:57,729 --> 00:07:04,180
a foothold in where where Elm is very

00:07:02,139 --> 00:07:07,629
focused I think that's a that's a

00:07:04,180 --> 00:07:11,289
testament to Evans vision for like what

00:07:07,629 --> 00:07:13,270
programming should be so there's some

00:07:11,289 --> 00:07:15,340
questions about you know reason and

00:07:13,270 --> 00:07:16,979
react native I think you mentioned in

00:07:15,340 --> 00:07:19,690
your talk that there are actually some

00:07:16,979 --> 00:07:22,840
published apps in the App Store right

00:07:19,690 --> 00:07:25,810
now that are running on that we're in

00:07:22,840 --> 00:07:27,610
that diagram of like hold off you know

00:07:25,810 --> 00:07:29,620
proceed with caution and it's good to go

00:07:27,610 --> 00:07:33,969
would you say that is if you had to

00:07:29,620 --> 00:07:36,639
hazard a guess I think it's probably

00:07:33,969 --> 00:07:39,789
pretty decent actually I think there are

00:07:36,639 --> 00:07:43,240
a lot of you can get a lot of mileage

00:07:39,789 --> 00:07:44,919
out of react native like if you're

00:07:43,240 --> 00:07:46,690
building mobile apps I think the scope

00:07:44,919 --> 00:07:49,360
is is more restricted than if you're

00:07:46,690 --> 00:07:51,430
just building a general website and so

00:07:49,360 --> 00:07:52,449
you you won't need that many libraries

00:07:51,430 --> 00:07:54,930
it'll be okay if you have to write your

00:07:52,449 --> 00:07:59,110
own bindings for a couple of things and

00:07:54,930 --> 00:08:00,159
so I think I think it's kind of on its

00:07:59,110 --> 00:08:04,319
greenish-yellow

00:08:00,159 --> 00:08:09,370
right so a little bit past caution but

00:08:04,319 --> 00:08:11,949
but not quite ready to go and in terms

00:08:09,370 --> 00:08:14,770
of if I am building an app say with with

00:08:11,949 --> 00:08:16,449
the reason you know Elm has the ELMO

00:08:14,770 --> 00:08:17,909
architecture right it's like very

00:08:16,449 --> 00:08:20,380
straightforward here's how we do it

00:08:17,909 --> 00:08:21,909
approach are there similar

00:08:20,380 --> 00:08:25,379
recommendations for building reason apps

00:08:21,909 --> 00:08:33,490
in particular or maybe reason react apps

00:08:25,379 --> 00:08:36,729
so reason react has its it's very

00:08:33,490 --> 00:08:38,800
similar to just writing a react app but

00:08:36,729 --> 00:08:40,089
it actually brings in some of the

00:08:38,800 --> 00:08:42,640
benefits of immutability some of the

00:08:40,089 --> 00:08:45,490
benefits of types such that it's it's

00:08:42,640 --> 00:08:50,199
kind of similar to using react and redux

00:08:45,490 --> 00:08:51,579
so you you type your your action and so

00:08:50,199 --> 00:08:56,680
it's it's more specified the way the

00:08:51,579 --> 00:08:58,300
state can change and so that there's no

00:08:56,680 --> 00:09:01,720
document out lighting this is how you do

00:08:58,300 --> 00:09:03,699
it but based on the library it just kind

00:09:01,720 --> 00:09:06,589
of shows you oh this is how you do it

00:09:03,699 --> 00:09:08,180
and you can you can get pretty far

00:09:06,589 --> 00:09:10,970
there are some questions about you know

00:09:08,180 --> 00:09:13,850
you talked that reason is very general

00:09:10,970 --> 00:09:16,699
and has lots of different targets that

00:09:13,850 --> 00:09:19,370
it might go for is it possible to write

00:09:16,699 --> 00:09:22,160
for example native-like CLI absolute or

00:09:19,370 --> 00:09:25,250
is it specifically kind of a front-end

00:09:22,160 --> 00:09:27,829
web UI experience right now I have I

00:09:25,250 --> 00:09:31,310
have written CLI apps that compiled to

00:09:27,829 --> 00:09:34,519
native machine code so it's it's quite

00:09:31,310 --> 00:09:36,410
possible there are like depending on

00:09:34,519 --> 00:09:38,060
what you do you might run into oh I wish

00:09:36,410 --> 00:09:41,269
there was this community library for

00:09:38,060 --> 00:09:42,230
doing X because again we're still kind

00:09:41,269 --> 00:09:45,709
of at the beginning of building that

00:09:42,230 --> 00:09:48,829
community but it's quite possible so oak

00:09:45,709 --> 00:09:52,220
Emily is twenty thirty years old at this

00:09:48,829 --> 00:09:54,500
point why do you think that it's just

00:09:52,220 --> 00:09:56,329
now kind of seeing some interests from

00:09:54,500 --> 00:09:58,310
companies like Facebook and and whatnot

00:09:56,329 --> 00:09:59,660
and actually potentially taking a shot

00:09:58,310 --> 00:10:07,339
it's mainstream ish

00:09:59,660 --> 00:10:10,279
I think okay and well has been it's been

00:10:07,339 --> 00:10:12,410
used by companies in the like

00:10:10,279 --> 00:10:14,509
competitive advantage way where it's

00:10:12,410 --> 00:10:15,829
like oh we're gonna beat our competitors

00:10:14,509 --> 00:10:17,509
because we're using this better language

00:10:15,829 --> 00:10:19,309
and so we're not gonna really talk about

00:10:17,509 --> 00:10:21,019
it right we're gonna we're gonna do our

00:10:19,309 --> 00:10:23,990
in-house things and we're gonna beat

00:10:21,019 --> 00:10:26,180
everybody else and there hasn't yet been

00:10:23,990 --> 00:10:28,939
somebody who's like oh actually let's

00:10:26,180 --> 00:10:31,430
let's try and get everybody on board and

00:10:28,939 --> 00:10:33,620
I think that's that's just Jordan walk

00:10:31,430 --> 00:10:35,600
being like this is awesome why aren't

00:10:33,620 --> 00:10:37,069
more people using it let's put a lot of

00:10:35,600 --> 00:10:38,689
effort into that so there's nothing

00:10:37,069 --> 00:10:39,980
inherently holding it back it's maybe

00:10:38,689 --> 00:10:44,420
more of a marketing communication

00:10:39,980 --> 00:10:47,120
problem and and like a community an

00:10:44,420 --> 00:10:49,959
aspect of the community where we're the

00:10:47,120 --> 00:10:52,519
majority the community was made up of

00:10:49,959 --> 00:10:54,529
people coming from academia background

00:10:52,519 --> 00:10:57,230
people with PhDs who are who are willing

00:10:54,529 --> 00:10:59,120
to to stomach the cost of my goodness

00:10:57,230 --> 00:11:00,860
this takes two days to set up but then

00:10:59,120 --> 00:11:04,850
I'm fine like and then I can write my

00:11:00,860 --> 00:11:07,519
PhD whereas you know somebody coming

00:11:04,850 --> 00:11:08,750
from JavaScript is like if it doesn't

00:11:07,519 --> 00:11:09,399
work after ten minutes I'm gonna try

00:11:08,750 --> 00:11:13,250
something else

00:11:09,399 --> 00:11:14,959
so along those lines of you know let's

00:11:13,250 --> 00:11:17,029
get this to everyone it's like I feel

00:11:14,959 --> 00:11:18,080
that reason almost has a Borg like

00:11:17,029 --> 00:11:23,290
approach

00:11:18,080 --> 00:11:26,750
it goes to some pretty extreme - maybe

00:11:23,290 --> 00:11:28,040
appeal to JavaScript developers maybe

00:11:26,750 --> 00:11:29,630
can talk a little bit about that in

00:11:28,040 --> 00:11:31,850
terms of like the syntax changes that

00:11:29,630 --> 00:11:35,120
I've actually gone in from say oh camel

00:11:31,850 --> 00:11:40,490
to dnews and Texas coming out yeah so

00:11:35,120 --> 00:11:42,350
learning learning reason syntax if

00:11:40,490 --> 00:11:44,870
you've kept up with JavaScript the past

00:11:42,350 --> 00:11:47,300
two years you should be fine right like

00:11:44,870 --> 00:11:49,130
all of the changes with coming out of

00:11:47,300 --> 00:11:52,310
tc39 we're gonna add async await we're

00:11:49,130 --> 00:11:54,980
gonna add X or Y or Z and you know if

00:11:52,310 --> 00:11:56,360
you're familiar with flow I I think it's

00:11:54,980 --> 00:11:58,730
at this point it's a very low barrier

00:11:56,360 --> 00:12:01,060
because it's almost everything that

00:11:58,730 --> 00:12:03,790
could be made JavaScript like has been

00:12:01,060 --> 00:12:06,920
whereas whereas Oh camel is

00:12:03,790 --> 00:12:08,630
comparatively quite foreign you

00:12:06,920 --> 00:12:09,950
mentioned that syntax was the thing that

00:12:08,630 --> 00:12:12,050
kind of held you back a little bit with

00:12:09,950 --> 00:12:14,959
with Elm how important do you feel it is

00:12:12,050 --> 00:12:16,490
that you know reason migrate as close as

00:12:14,959 --> 00:12:21,529
possible to say JavaScript syntax in

00:12:16,490 --> 00:12:23,390
terms of public adoption it's kind of

00:12:21,529 --> 00:12:26,930
funny because I think I think syntax is

00:12:23,390 --> 00:12:30,290
one of those first-day things like if if

00:12:26,930 --> 00:12:32,060
you are excited enough about Elm that

00:12:30,290 --> 00:12:33,560
you're willing to spend a day on it like

00:12:32,060 --> 00:12:34,790
it's probably fine and you'll you know

00:12:33,560 --> 00:12:38,870
you'll get used to it and you'll keep

00:12:34,790 --> 00:12:39,950
using L be great but but I think there

00:12:38,870 --> 00:12:42,850
there are plenty of people that won't

00:12:39,950 --> 00:12:46,459
give it that first day well it's like oh

00:12:42,850 --> 00:12:49,520
this is cool but oh gosh I'll look at

00:12:46,459 --> 00:12:51,290
that tomorrow and so I I think I I think

00:12:49,520 --> 00:12:53,930
it's just you know it's it's a weird

00:12:51,290 --> 00:12:55,760
hurdle but it's there and I think it

00:12:53,930 --> 00:12:57,529
will get I think it'll make a big

00:12:55,760 --> 00:12:59,420
difference in the number of people that

00:12:57,529 --> 00:13:02,089
actually give it a try

00:12:59,420 --> 00:13:03,649
beyond syntax though what is it do you

00:13:02,089 --> 00:13:06,440
think that the reason community has to

00:13:03,649 --> 00:13:08,620
do in order to onboard newcomers much

00:13:06,440 --> 00:13:14,630
more easily like what are we missing

00:13:08,620 --> 00:13:16,970
that will convert people I can probably

00:13:14,630 --> 00:13:21,740
think of several things but but one

00:13:16,970 --> 00:13:22,850
thing we need is for for new people that

00:13:21,740 --> 00:13:24,709
are trying it out to tell us what

00:13:22,850 --> 00:13:26,829
they're what it's missing because

00:13:24,709 --> 00:13:29,390
because the people in the community have

00:13:26,829 --> 00:13:31,320
it many of us have been working with it

00:13:29,390 --> 00:13:32,310
for a while so we're used to like Oh

00:13:31,320 --> 00:13:33,930
we already know it doesn't have this

00:13:32,310 --> 00:13:35,040
we'll get around to it but if somebody

00:13:33,930 --> 00:13:38,630
shows up and it's like whoa it doesn't

00:13:35,040 --> 00:13:43,710
have this like this is kind of this is a

00:13:38,630 --> 00:13:45,300
breaking the the deal-breaker for me one

00:13:43,710 --> 00:13:46,650
of those things is you show up and it's

00:13:45,300 --> 00:13:50,310
like oh I have to write my own bindings

00:13:46,650 --> 00:13:53,550
for Express now there was a library that

00:13:50,310 --> 00:13:55,290
will wrap Express it's not terribly

00:13:53,550 --> 00:13:57,870
fully featured but you can you can write

00:13:55,290 --> 00:13:59,250
a server with it but you can't you come

00:13:57,870 --> 00:14:00,900
over and it's like oh I'm used to styled

00:13:59,250 --> 00:14:03,180
components can I do that oh I have to I

00:14:00,900 --> 00:14:06,150
have to try and work out the the binding

00:14:03,180 --> 00:14:09,240
so I think a big part of what we'll be

00:14:06,150 --> 00:14:10,620
working on is making it so they're just

00:14:09,240 --> 00:14:12,090
anything you come from in JavaScript

00:14:10,620 --> 00:14:14,870
there there's a good answer for it in

00:14:12,090 --> 00:14:17,520
reason how about in terms of

00:14:14,870 --> 00:14:20,070
documentation so you mentioned you know

00:14:17,520 --> 00:14:21,780
blogs and tutorials and whatnot what

00:14:20,070 --> 00:14:24,900
would you like to see the community work

00:14:21,780 --> 00:14:27,840
on more to make it more accessible for

00:14:24,900 --> 00:14:31,400
people coming in I would love to see a

00:14:27,840 --> 00:14:34,170
lot of different levels of blog posts

00:14:31,400 --> 00:14:36,750
where it's like oh I'm just coming in

00:14:34,170 --> 00:14:38,520
and I'm gonna you know let's let's do

00:14:36,750 --> 00:14:40,980
the first five minutes of just getting

00:14:38,520 --> 00:14:44,790
set up and then a post where it's like

00:14:40,980 --> 00:14:49,230
let's let's zero in on how do I do an

00:14:44,790 --> 00:14:51,180
asynchronous API we're just gonna talk

00:14:49,230 --> 00:14:53,820
about that and so there there's a lot of

00:14:51,180 --> 00:14:56,130
little things I wrote a tutorial several

00:14:53,820 --> 00:14:59,100
months ago that is kind of a long

00:14:56,130 --> 00:15:01,800
expecting you have no background here's

00:14:59,100 --> 00:15:04,860
how to write to do MBC and reason and

00:15:01,800 --> 00:15:05,700
react but it's it's a very straight road

00:15:04,860 --> 00:15:07,350
and there are lots of branches that

00:15:05,700 --> 00:15:08,760
people could take where it's like oh you

00:15:07,350 --> 00:15:10,680
know I don't really care about writing a

00:15:08,760 --> 00:15:11,820
to-do app but what if I what if I had

00:15:10,680 --> 00:15:14,490
this and this and this and I think

00:15:11,820 --> 00:15:18,240
there's kind of filling in that space is

00:15:14,490 --> 00:15:20,130
what needs to happen if you could maybe

00:15:18,240 --> 00:15:21,660
speak a little bit about the Oh camel

00:15:20,130 --> 00:15:26,460
type system in general and how it

00:15:21,660 --> 00:15:27,900
compares to say flow and maybe even

00:15:26,460 --> 00:15:29,040
something like pure script or or high

00:15:27,900 --> 00:15:30,060
school and whatnot kind of the

00:15:29,040 --> 00:15:33,810
trade-offs and where it sits on that

00:15:30,060 --> 00:15:38,910
spectrum sure so ok wells type system

00:15:33,810 --> 00:15:42,630
has is an interesting meld of of the

00:15:38,910 --> 00:15:45,180
functional and the object-oriented and I

00:15:42,630 --> 00:15:46,880
think that lends itself well to

00:15:45,180 --> 00:15:48,750
integrating with JavaScript and being

00:15:46,880 --> 00:15:52,280
accessible to people coming from a

00:15:48,750 --> 00:15:54,570
JavaScript background because there are

00:15:52,280 --> 00:15:56,790
there are constructs you know that the

00:15:54,570 --> 00:16:00,000
default list construct is immutable it's

00:15:56,790 --> 00:16:01,920
persistent it is a linked list and then

00:16:00,000 --> 00:16:03,780
but then there's also a parallel which

00:16:01,920 --> 00:16:05,580
is the array which is fixed length but

00:16:03,780 --> 00:16:08,400
it's mutable so you can you can change

00:16:05,580 --> 00:16:10,230
it and that at runtime translates to a

00:16:08,400 --> 00:16:13,290
JavaScript array so you can you can use

00:16:10,230 --> 00:16:14,970
JavaScript array methods if that's you

00:16:13,290 --> 00:16:18,450
know what you need to get to move

00:16:14,970 --> 00:16:20,130
forward and then on the object side

00:16:18,450 --> 00:16:23,360
there's the record which is kind of the

00:16:20,130 --> 00:16:27,210
default it's immutable it's persistent

00:16:23,360 --> 00:16:29,190
that you used to hang on to you know a

00:16:27,210 --> 00:16:31,860
bag with names you know attribute and

00:16:29,190 --> 00:16:34,890
value but then there's an object which

00:16:31,860 --> 00:16:39,120
like again is a JavaScript object and it

00:16:34,890 --> 00:16:42,390
is kind of more object oriented it isn't

00:16:39,120 --> 00:16:43,830
as restricted you can you don't have to

00:16:42,390 --> 00:16:46,160
spend as much time writing out type

00:16:43,830 --> 00:16:52,380
definitions if you're using the objects

00:16:46,160 --> 00:16:54,990
and yeah there's a lot of other things

00:16:52,380 --> 00:16:57,630
I'd probably need need a whiteboard and

00:16:54,990 --> 00:17:00,240
maybe what we'll cover this in the in

00:16:57,630 --> 00:17:02,310
the workshop tomorrow but one of the one

00:17:00,240 --> 00:17:06,330
of the coolest things about the type

00:17:02,310 --> 00:17:08,910
system I think is many many type systems

00:17:06,330 --> 00:17:11,400
have some types which is where it's like

00:17:08,910 --> 00:17:14,790
this is type animal and it could be a

00:17:11,400 --> 00:17:16,770
dog with you know an integer which is

00:17:14,790 --> 00:17:18,090
the number of legs and it could be a cat

00:17:16,770 --> 00:17:20,640
with an integer which is the number of

00:17:18,090 --> 00:17:23,640
ears you know kind of it could be one of

00:17:20,640 --> 00:17:28,530
these many things and okay we'll have

00:17:23,640 --> 00:17:30,960
that but it also has a what we call

00:17:28,530 --> 00:17:34,050
variant which is the same thing except

00:17:30,960 --> 00:17:37,260
much more flexible so it it's not tied

00:17:34,050 --> 00:17:39,710
to a specific module where that owns it

00:17:37,260 --> 00:17:43,220
anybody can declare it and it's kind of

00:17:39,710 --> 00:17:46,590
if you're familiar with with closures

00:17:43,220 --> 00:17:47,820
keywords where it's like you just give

00:17:46,590 --> 00:17:49,410
it this keyword and you can get the

00:17:47,820 --> 00:17:51,090
thing out of it versus namespace

00:17:49,410 --> 00:17:53,880
keywords where it's like oh this this is

00:17:51,090 --> 00:17:57,000
specific to this file that's kind of the

00:17:53,880 --> 00:18:00,539
parallel I draw for variants versus

00:17:57,000 --> 00:18:04,409
some types and just acid it explicitly

00:18:00,539 --> 00:18:07,049
does it have union types it does there

00:18:04,409 --> 00:18:10,110
we go that so that that's when I say

00:18:07,049 --> 00:18:14,340
some I mean Union yeah it's fun to make

00:18:10,110 --> 00:18:17,159
sure you address it specifically how

00:18:14,340 --> 00:18:18,510
would you pitch reason to someone who is

00:18:17,159 --> 00:18:20,970
coming from closer trip for example

00:18:18,510 --> 00:18:24,059
someone who is used to a repple based

00:18:20,970 --> 00:18:26,700
developments very very fast feedback

00:18:24,059 --> 00:18:28,799
what is it's going to pull me out of

00:18:26,700 --> 00:18:34,830
that's that happy space and make me

00:18:28,799 --> 00:18:36,179
motivate me to go over to reason so in

00:18:34,830 --> 00:18:42,510
as much as reason compiles to JavaScript

00:18:36,179 --> 00:18:44,549
we have we have rebels that they're not

00:18:42,510 --> 00:18:45,900
nearly as good as as closure and closure

00:18:44,549 --> 00:18:49,200
because they're kind of built from the

00:18:45,900 --> 00:18:52,799
ground up to support that but the the

00:18:49,200 --> 00:18:54,210
other thing that's that keeps making me

00:18:52,799 --> 00:18:57,539
happy about working and reason is that

00:18:54,210 --> 00:19:00,480
the compiler so fast so you don't you

00:18:57,539 --> 00:19:05,220
don't need to do all of these kind of

00:19:00,480 --> 00:19:07,500
tricks to get fast reload time where if

00:19:05,220 --> 00:19:09,510
you're working in a large closure script

00:19:07,500 --> 00:19:13,230
project and line you know takes a couple

00:19:09,510 --> 00:19:15,600
of seconds to reload your project buckle

00:19:13,230 --> 00:19:17,220
script does it in milliseconds and so I

00:19:15,600 --> 00:19:19,710
think I think it has some things to

00:19:17,220 --> 00:19:21,990
offer even though maybe the ruffle story

00:19:19,710 --> 00:19:24,390
isn't as good so you've talked a lot

00:19:21,990 --> 00:19:26,429
about targeting browsers and compiling

00:19:24,390 --> 00:19:27,659
the JavaScript and whatnot and your talk

00:19:26,429 --> 00:19:30,270
I think you mentioned that you know you

00:19:27,659 --> 00:19:31,770
can go other places as well what does

00:19:30,270 --> 00:19:33,270
that look like right now is that kind of

00:19:31,770 --> 00:19:35,520
a be careful

00:19:33,270 --> 00:19:37,110
area or is it like there's enough there

00:19:35,520 --> 00:19:39,690
that I could get started as a JavaScript

00:19:37,110 --> 00:19:43,620
developer exploring native developments

00:19:39,690 --> 00:19:46,080
using reason so the current status of of

00:19:43,620 --> 00:19:48,539
native element is very tied to the Oh

00:19:46,080 --> 00:19:50,669
camel ecosystem if you're going to be

00:19:48,539 --> 00:19:51,600
writing a web server targeting native

00:19:50,669 --> 00:19:53,340
compilation you're going to be

00:19:51,600 --> 00:19:57,179
interacting with Oh camel libraries

00:19:53,340 --> 00:20:00,299
which historically are quite poorly

00:19:57,179 --> 00:20:02,250
documented and you're gonna be reading

00:20:00,299 --> 00:20:03,919
tutorials that are written in the Oh

00:20:02,250 --> 00:20:07,350
camel syntax instead other reason syntax

00:20:03,919 --> 00:20:10,410
so depending on on how willing you are

00:20:07,350 --> 00:20:12,450
to to deal with that

00:20:10,410 --> 00:20:13,770
you you can definitely go for it but I

00:20:12,450 --> 00:20:14,880
think over the over the course of the

00:20:13,770 --> 00:20:17,970
next little bit we're gonna get a lot

00:20:14,880 --> 00:20:20,210
more kind of reason focused

00:20:17,970 --> 00:20:23,850
documentation and and better support

00:20:20,210 --> 00:20:26,100
onboarding people into that so you

00:20:23,850 --> 00:20:27,420
mentioned you know the idea that we're

00:20:26,100 --> 00:20:29,340
moving the syntax as close as possible

00:20:27,420 --> 00:20:32,190
to JavaScript you know make the familiar

00:20:29,340 --> 00:20:34,320
things familiar but this comes at a cost

00:20:32,190 --> 00:20:36,480
that you know everything that exists in

00:20:34,320 --> 00:20:38,480
is document to know camel now there I

00:20:36,480 --> 00:20:41,280
have to do some translation in my head

00:20:38,480 --> 00:20:43,980
how familiar with Oh camel and Oh camel

00:20:41,280 --> 00:20:47,040
syntax should I be if I really want to

00:20:43,980 --> 00:20:49,410
be productive and reason so there we are

00:20:47,040 --> 00:20:52,380
making a there is a Chrome extension

00:20:49,410 --> 00:20:54,000
that'll actually look you know you click

00:20:52,380 --> 00:20:56,250
the button and it'll find any Oh camel

00:20:54,000 --> 00:20:59,910
code on the page and translate it to

00:20:56,250 --> 00:21:02,400
reason which is super fun so that's

00:20:59,910 --> 00:21:05,820
that's one thing to to ease the the

00:21:02,400 --> 00:21:09,810
barrier but also I mean learning a

00:21:05,820 --> 00:21:13,730
learning new syntax isn't isn't that bad

00:21:09,810 --> 00:21:17,570
again it's kind of a first-day thing so

00:21:13,730 --> 00:21:19,890
as things stand I think we have enough

00:21:17,570 --> 00:21:21,240
reason documentation and enough of the

00:21:19,890 --> 00:21:23,070
Oh camel documentation translated to

00:21:21,240 --> 00:21:25,290
reason that you don't really need to dig

00:21:23,070 --> 00:21:27,570
into it but if you come across a camel I

00:21:25,290 --> 00:21:32,160
don't think it'll prove too strong of a

00:21:27,570 --> 00:21:34,230
barrier do you think so I think right

00:21:32,160 --> 00:21:35,850
now the Oh camel community and the

00:21:34,230 --> 00:21:37,500
reason community are quite distinct

00:21:35,850 --> 00:21:38,760
there's actually very little overlap

00:21:37,500 --> 00:21:41,090
between the two of them right you have

00:21:38,760 --> 00:21:42,960
as you said kind of academics and

00:21:41,090 --> 00:21:46,380
powerhouse companies that use it as a

00:21:42,960 --> 00:21:48,150
competitive example or advantage and

00:21:46,380 --> 00:21:50,580
then on the reason side we're kind of

00:21:48,150 --> 00:21:52,830
starting from web based JavaScript

00:21:50,580 --> 00:21:54,600
developers and well not do you see these

00:21:52,830 --> 00:21:56,220
two communities coming together in the

00:21:54,600 --> 00:21:58,050
future do you think that given that

00:21:56,220 --> 00:21:59,340
reason can go to all these places and

00:21:58,050 --> 00:22:01,530
compiled to native and whatnot

00:21:59,340 --> 00:22:03,570
that's this is the bridge that gets

00:22:01,530 --> 00:22:04,680
travel script developers over there or

00:22:03,570 --> 00:22:09,660
do you think that they will remain

00:22:04,680 --> 00:22:12,420
separate I think I think they're likely

00:22:09,660 --> 00:22:14,220
to remain separate the the O'Kane will

00:22:12,420 --> 00:22:16,680
community have a thing that is that is

00:22:14,220 --> 00:22:19,380
working well for them and they they have

00:22:16,680 --> 00:22:20,940
made choices they have come down you

00:22:19,380 --> 00:22:23,040
know along the spectrum like this is

00:22:20,940 --> 00:22:23,940
this is what we care about when we're

00:22:23,040 --> 00:22:25,860
looking at a package man

00:22:23,940 --> 00:22:28,740
this is what we care about when we're

00:22:25,860 --> 00:22:32,040
looking at you know kind of the the

00:22:28,740 --> 00:22:33,420
compiler ecosystem the build tools and I

00:22:32,040 --> 00:22:35,130
think I think those are probably

00:22:33,420 --> 00:22:36,720
different things then then the reason

00:22:35,130 --> 00:22:38,490
community cares about the people that

00:22:36,720 --> 00:22:40,170
are coming from JavaScript so I think

00:22:38,490 --> 00:22:43,250
though they'll probably remain separate

00:22:40,170 --> 00:22:43,250
and I think that's fine

00:22:43,290 --> 00:22:51,030
so you know Elm has Evan and closure has

00:22:46,800 --> 00:22:52,800
rich Hickey what is the is there a

00:22:51,030 --> 00:22:55,860
equivalent in the Oh camel and reason

00:22:52,800 --> 00:22:59,100
world is it just Jordan or like is it

00:22:55,860 --> 00:23:00,810
much more community like maybe panel

00:22:59,100 --> 00:23:03,380
driven is there a lot more people kind

00:23:00,810 --> 00:23:05,580
of getting input into this language I

00:23:03,380 --> 00:23:09,120
mean I think Chang's probably the public

00:23:05,580 --> 00:23:12,380
face of reason he's given some very

00:23:09,120 --> 00:23:14,940
popular talks about kind of kind of

00:23:12,380 --> 00:23:16,730
almost rich Hickey esque talks where

00:23:14,940 --> 00:23:21,960
it's like we're gonna think deeply about

00:23:16,730 --> 00:23:23,610
languages but as far as how how the

00:23:21,960 --> 00:23:26,520
language develops whether whether there

00:23:23,610 --> 00:23:29,820
is a BD FL that calls all the shots I

00:23:26,520 --> 00:23:32,580
think it's it's more panel based I think

00:23:29,820 --> 00:23:34,980
it's more where what we're gonna kind of

00:23:32,580 --> 00:23:38,730
see what our community thinks and and

00:23:34,980 --> 00:23:42,290
react to it an engine question about

00:23:38,730 --> 00:23:45,270
maybe someone coming from Haskell the

00:23:42,290 --> 00:23:48,360
monads are kind of the first word out of

00:23:45,270 --> 00:23:49,680
high schools mouth oftentimes how do I

00:23:48,360 --> 00:23:52,890
handle like monads are they first-class

00:23:49,680 --> 00:23:53,190
citizens in a reason if I want to do I

00:23:52,890 --> 00:23:56,580
owe

00:23:53,190 --> 00:23:58,020
is that a explicitly captured and type

00:23:56,580 --> 00:24:02,610
thing or is it kind of much more free

00:23:58,020 --> 00:24:08,160
for all maybe JavaScript style you you

00:24:02,610 --> 00:24:09,390
can easily write write monadic ly so if

00:24:08,160 --> 00:24:13,440
you're if you're doing a sink for

00:24:09,390 --> 00:24:18,930
example and you want to make a special

00:24:13,440 --> 00:24:20,490
syntax for handling a promise as as it

00:24:18,930 --> 00:24:22,020
appears mone ethically you can do that

00:24:20,490 --> 00:24:23,520
and there there are plenty of people

00:24:22,020 --> 00:24:24,870
especially coming from the oh camel side

00:24:23,520 --> 00:24:28,050
of things that are like yes we you know

00:24:24,870 --> 00:24:31,410
we have our bind we have our map we have

00:24:28,050 --> 00:24:35,450
these monadic rules I think one of my

00:24:31,410 --> 00:24:38,650
goals with reason is to

00:24:35,450 --> 00:24:42,140
kind of make it less in-your-face and

00:24:38,650 --> 00:24:46,070
I'm working on a syntax change that will

00:24:42,140 --> 00:24:47,570
add a sink and a weight to to reason so

00:24:46,070 --> 00:24:50,810
that you you don't have to think about

00:24:47,570 --> 00:24:54,370
Oh like let and bind like what what is

00:24:50,810 --> 00:24:56,570
what's return Mon ethically it's just

00:24:54,370 --> 00:24:57,590
kind of appealing to the things that are

00:24:56,570 --> 00:24:59,750
already established in the JavaScript

00:24:57,590 --> 00:25:01,460
unity so this sounds like reason then

00:24:59,750 --> 00:25:03,440
he's very kind of intentionally issuing

00:25:01,460 --> 00:25:09,710
this idea of like a first-class monadic

00:25:03,440 --> 00:25:12,260
syntax and sugary supports we we haven't

00:25:09,710 --> 00:25:14,030
focused on it but because of our Oh

00:25:12,260 --> 00:25:17,360
camel heritage and the fact that we're

00:25:14,030 --> 00:25:19,640
built on Oh camel it's there right so

00:25:17,360 --> 00:25:23,540
it's not like you're you're any less

00:25:19,640 --> 00:25:25,850
able to use monads but it's it's not a

00:25:23,540 --> 00:25:29,870
focus like oh hey you're coming to

00:25:25,850 --> 00:25:31,940
reason let's talk about monads so you

00:25:29,870 --> 00:25:33,860
know there's this sales pitch that all

00:25:31,940 --> 00:25:36,020
right I can compile to the front-end

00:25:33,860 --> 00:25:37,730
with reason and it can go to the backend

00:25:36,020 --> 00:25:40,790
and it can go to native on mobile and

00:25:37,730 --> 00:25:42,140
whatnots is it really there in terms of

00:25:40,790 --> 00:25:44,290
being able to share for example logic

00:25:42,140 --> 00:25:48,560
between all these different clients I

00:25:44,290 --> 00:25:50,270
have written an example app where the

00:25:48,560 --> 00:25:51,860
the front end and the back end are both

00:25:50,270 --> 00:25:53,120
written as reason and the back end is

00:25:51,860 --> 00:25:54,980
compiled to native the front end is

00:25:53,120 --> 00:25:58,100
compiled of JavaScript and it's chairs

00:25:54,980 --> 00:26:02,210
it shares a lot of the logic and also

00:25:58,100 --> 00:26:04,130
the type definitions of the API so as as

00:26:02,210 --> 00:26:07,730
far as that goes that there's a good

00:26:04,130 --> 00:26:10,490
story for it if we're compiling to for

00:26:07,730 --> 00:26:12,920
example iOS native or you know Android

00:26:10,490 --> 00:26:15,440
JDK stuff that is that is very much

00:26:12,920 --> 00:26:18,290
experimental at the moment how useful do

00:26:15,440 --> 00:26:19,670
you find it to be able to share the type

00:26:18,290 --> 00:26:21,710
definitions between the server and the

00:26:19,670 --> 00:26:23,990
client has it actually helped you or is

00:26:21,710 --> 00:26:26,990
it kind of like that might be nice and a

00:26:23,990 --> 00:26:28,610
feature I I think it gives me a lot of

00:26:26,990 --> 00:26:31,310
peace of mind where I don't have to be

00:26:28,610 --> 00:26:35,540
maintaining two separate type

00:26:31,310 --> 00:26:38,600
definitions at work we've got an Android

00:26:35,540 --> 00:26:39,800
app and an iOS app and react native on

00:26:38,600 --> 00:26:41,570
both of them but they started out

00:26:39,800 --> 00:26:42,770
without react native so there's there's

00:26:41,570 --> 00:26:44,600
a binding layer where it's like Oh

00:26:42,770 --> 00:26:46,250
native has to send some data data to

00:26:44,600 --> 00:26:47,600
JavaScript and so we've got the types in

00:26:46,250 --> 00:26:49,210
flow and we've got the types in Swift

00:26:47,600 --> 00:26:51,549
and the types in Java and we have

00:26:49,210 --> 00:26:52,480
make sure Oh like let's we changing here

00:26:51,549 --> 00:26:54,640
we have to change at these other two

00:26:52,480 --> 00:26:56,440
places and that is tedious and

00:26:54,640 --> 00:26:59,500
error-prone and we have shipped bugs

00:26:56,440 --> 00:27:03,039
because we forgot to align things well

00:26:59,500 --> 00:27:04,980
and so I think it really gives you a lot

00:27:03,039 --> 00:27:07,029
of peace of mind to have just one set

00:27:04,980 --> 00:27:09,190
all right I think that's probably about

00:27:07,029 --> 00:27:13,380
it for our time thank you very much

00:27:09,190 --> 00:27:13,380
please think Jared thank you

00:27:19,049 --> 00:27:21,110

YouTube URL: https://www.youtube.com/watch?v=8HuvjUFvWhU


