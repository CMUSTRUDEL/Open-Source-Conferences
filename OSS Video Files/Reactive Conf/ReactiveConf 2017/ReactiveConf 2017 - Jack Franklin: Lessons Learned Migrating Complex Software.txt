Title: ReactiveConf 2017 - Jack Franklin: Lessons Learned Migrating Complex Software
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,020 --> 00:00:08,639
[Music]

00:00:14,610 --> 00:00:18,550
all right awesome thank you very much

00:00:17,020 --> 00:00:21,430
for the intro thank you very much for

00:00:18,550 --> 00:00:22,960
being here it's a pleasure to be here oh

00:00:21,430 --> 00:00:25,840
it's my first time in the city and it's

00:00:22,960 --> 00:00:27,369
been a great experience so far as was

00:00:25,840 --> 00:00:29,110
introduced my name is Jack that's me on

00:00:27,369 --> 00:00:31,300
Twitter where you can find me I'll also

00:00:29,110 --> 00:00:32,320
tweet a link to the slides later and

00:00:31,300 --> 00:00:33,610
it's got all the links and references

00:00:32,320 --> 00:00:36,730
and things so don't worry about writing

00:00:33,610 --> 00:00:38,380
stuff down straight away so yeah I think

00:00:36,730 --> 00:00:39,730
when I when I leave here when I leave

00:00:38,380 --> 00:00:41,920
but Slava I'm gonna have to memories

00:00:39,730 --> 00:00:43,900
from it first is gonna be the amazing

00:00:41,920 --> 00:00:45,340
scenery in the city it's an amazing

00:00:43,900 --> 00:00:47,530
place and I thank you very much for

00:00:45,340 --> 00:00:49,810
inviting me here but I'd also like to

00:00:47,530 --> 00:00:51,310
personally thank Christina because this

00:00:49,810 --> 00:00:53,620
was me last night in the hotel elevator

00:00:51,310 --> 00:00:57,550
waiting to go to the dinner for half an

00:00:53,620 --> 00:00:59,650
hour I got very warm a bit bit weird bit

00:00:57,550 --> 00:01:01,030
tense and I had to ring Christina to

00:00:59,650 --> 00:01:03,010
come and get the people to come and get

00:01:01,030 --> 00:01:04,600
us out of the elevator so yeah without

00:01:03,010 --> 00:01:06,880
her I wouldn't even be here today I'd

00:01:04,600 --> 00:01:08,970
still be in that elevator and for now

00:01:06,880 --> 00:01:11,590
and I'll be taking steps to avoid them

00:01:08,970 --> 00:01:12,909
alright yeah that's quite a good pun I

00:01:11,590 --> 00:01:14,619
think I stole that from a co-worker

00:01:12,909 --> 00:01:17,610
Thanks someone laughed down here here

00:01:14,619 --> 00:01:17,610
thank you thank you

00:01:17,700 --> 00:01:21,670
so I work at a company called threads in

00:01:20,200 --> 00:01:23,590
London but the talk today is actually

00:01:21,670 --> 00:01:26,229
based on work I did at previous company

00:01:23,590 --> 00:01:28,020
at a company called Songkick I just give

00:01:26,229 --> 00:01:30,429
you a bit of background on me the talk

00:01:28,020 --> 00:01:32,469
some kick was a ticket selling company

00:01:30,429 --> 00:01:34,509
so we sold tickets to music gigs so big

00:01:32,469 --> 00:01:37,509
artists go on a big tour and we'd sell

00:01:34,509 --> 00:01:39,069
them tickets the product I worked on was

00:01:37,509 --> 00:01:40,600
called the store and this is what it

00:01:39,069 --> 00:01:43,210
looked like in its unstyled kind of

00:01:40,600 --> 00:01:44,770
plain state so for a particular artist

00:01:43,210 --> 00:01:46,299
we have like their fan club in the top

00:01:44,770 --> 00:01:48,399
left where fans can sign in and get

00:01:46,299 --> 00:01:49,659
discounts and special offers and you

00:01:48,399 --> 00:01:51,399
have a list of all the different dates

00:01:49,659 --> 00:01:53,889
and venues this artist is performing at

00:01:51,399 --> 00:01:55,270
and what happened is we take this and

00:01:53,889 --> 00:01:57,399
we'd style it and we put it into an

00:01:55,270 --> 00:01:59,649
artist website so r example we sell

00:01:57,399 --> 00:02:01,600
tickets for Adele and this is that same

00:01:59,649 --> 00:02:03,189
product but styled in place to look like

00:02:01,600 --> 00:02:05,020
it's on a Dell site it's actually

00:02:03,189 --> 00:02:06,399
embedded within an iframe there's a

00:02:05,020 --> 00:02:08,740
whole other talk and iframes I'm not

00:02:06,399 --> 00:02:10,240
going to subject you to and we tell the

00:02:08,740 --> 00:02:11,980
tickets and we post them to happy fans

00:02:10,240 --> 00:02:13,209
who would get them and then people go to

00:02:11,980 --> 00:02:16,000
gigs and have a great time and that's

00:02:13,209 --> 00:02:17,830
what we did I'm telling you this because

00:02:16,000 --> 00:02:20,440
this is the product that is found this

00:02:17,830 --> 00:02:21,520
talk we called it the store so just want

00:02:20,440 --> 00:02:23,379
to be super clear when I'm talking about

00:02:21,520 --> 00:02:25,510
the store in this talk I'm talking about

00:02:23,379 --> 00:02:26,980
the song cake ticket store store in

00:02:25,510 --> 00:02:28,430
front and particular things like Redux

00:02:26,980 --> 00:02:31,700
is quite an overloaded term but

00:02:28,430 --> 00:02:33,829
door here means the song cake product it

00:02:31,700 --> 00:02:35,989
was started while two three years ago it

00:02:33,829 --> 00:02:38,930
was built on angular 1 tickets are being

00:02:35,989 --> 00:02:40,670
sold pretty much 24/7 through it and it

00:02:38,930 --> 00:02:44,030
was used by all our big flagship clients

00:02:40,670 --> 00:02:46,370
like Adele and the store actually worked

00:02:44,030 --> 00:02:47,870
pretty well if we just needed to keep

00:02:46,370 --> 00:02:48,739
the store in its current state and not

00:02:47,870 --> 00:02:50,480
do anything else with it

00:02:48,739 --> 00:02:52,670
we probably wouldn't have done the

00:02:50,480 --> 00:02:54,859
migration that we did the issue was that

00:02:52,670 --> 00:02:57,920
we found changing it fixing bugs was

00:02:54,859 --> 00:02:59,389
really really tricky it was a quite an

00:02:57,920 --> 00:03:00,709
old codebase that had been around for a

00:02:59,389 --> 00:03:02,150
long time and seen a lot of different

00:03:00,709 --> 00:03:04,579
people working on it a lot of features

00:03:02,150 --> 00:03:06,379
added and removed it was running when I

00:03:04,579 --> 00:03:09,200
joined on a very old version of angular

00:03:06,379 --> 00:03:10,459
1 which made it more tricky and also all

00:03:09,200 --> 00:03:12,379
the developers had proves he worked on

00:03:10,459 --> 00:03:13,819
it had to have left so kind of a

00:03:12,379 --> 00:03:16,219
combination of all those factors made it

00:03:13,819 --> 00:03:18,560
very hard to work on and be confident in

00:03:16,219 --> 00:03:21,169
it eventually we lacked confidence in

00:03:18,560 --> 00:03:23,299
this application yes it ran it worked it

00:03:21,169 --> 00:03:25,459
sold tickets and we we were successful

00:03:23,299 --> 00:03:27,409
doing that however if there was a bug

00:03:25,459 --> 00:03:29,629
that came up or we needed a new feature

00:03:27,409 --> 00:03:31,430
it could take a very long time relative

00:03:29,629 --> 00:03:32,659
to what that feature was because we just

00:03:31,430 --> 00:03:35,030
couldn't move through the system with

00:03:32,659 --> 00:03:36,109
confidence I'm sure all of you in the

00:03:35,030 --> 00:03:37,579
room know well that's like when you're

00:03:36,109 --> 00:03:39,109
fighting against this big codebase

00:03:37,579 --> 00:03:40,639
that's making it really hard to ship one

00:03:39,109 --> 00:03:44,479
tiny change it's a very frustrating

00:03:40,639 --> 00:03:46,099
place to be in so really I want to break

00:03:44,479 --> 00:03:48,379
this migration down for you into the

00:03:46,099 --> 00:03:51,620
forties we've got the tech the tests the

00:03:48,379 --> 00:03:53,030
team and talking so this talk is is 50

00:03:51,620 --> 00:03:55,189
percent roughly focused on the technical

00:03:53,030 --> 00:03:56,389
aspects but then what surprised me is

00:03:55,189 --> 00:03:57,709
throughout this migration I learned a

00:03:56,389 --> 00:03:58,790
lot of non-technical things that I

00:03:57,709 --> 00:04:01,609
haven't learned before which I wanted to

00:03:58,790 --> 00:04:03,199
share with you as well so you will start

00:04:01,609 --> 00:04:04,669
with the tech and it's probably no

00:04:03,199 --> 00:04:06,650
surprise being that this is reactive

00:04:04,669 --> 00:04:09,349
comp that we picked react as the thing

00:04:06,650 --> 00:04:10,909
to migrate to this talk although we

00:04:09,349 --> 00:04:12,769
migrated to react there's a lot of stuff

00:04:10,909 --> 00:04:14,689
in here that I think is true of any

00:04:12,769 --> 00:04:16,880
migration from any library to any other

00:04:14,689 --> 00:04:18,530
library I won't go into too many reasons

00:04:16,880 --> 00:04:19,880
why we picked react we were big fans of

00:04:18,530 --> 00:04:21,590
it effectively and there were some other

00:04:19,880 --> 00:04:23,330
reasons but you could swap react here

00:04:21,590 --> 00:04:25,190
for the new version of angular or ember

00:04:23,330 --> 00:04:28,849
or view or any of the other frameworks

00:04:25,190 --> 00:04:30,470
and this talk would still make sense so

00:04:28,849 --> 00:04:31,669
once we decided that we did want to move

00:04:30,470 --> 00:04:34,099
and we want to move our code base

00:04:31,669 --> 00:04:35,990
forward we have this question of how are

00:04:34,099 --> 00:04:37,490
we going to do it do we do a big bang

00:04:35,990 --> 00:04:39,169
release where we build a brand new app

00:04:37,490 --> 00:04:41,690
from the ground up and we release it one

00:04:39,169 --> 00:04:42,350
day and customers start using that or do

00:04:41,690 --> 00:04:43,940
we do an increment

00:04:42,350 --> 00:04:47,360
to rewrite where we build slowly bit by

00:04:43,940 --> 00:04:48,920
bit and to react there are benefits to

00:04:47,360 --> 00:04:51,710
both there are negatives to both as well

00:04:48,920 --> 00:04:54,050
but the thing that we focused on was

00:04:51,710 --> 00:04:55,730
when we could add value so if we build

00:04:54,050 --> 00:04:56,990
in Big Bang so we're gonna build

00:04:55,730 --> 00:04:58,970
completely from the scratch we've got a

00:04:56,990 --> 00:05:00,950
legacy app and we've got the brand new

00:04:58,970 --> 00:05:02,930
app and over time the new app grows as

00:05:00,950 --> 00:05:04,970
it gets closer to being the feature set

00:05:02,930 --> 00:05:06,770
that the legacy app offers but the issue

00:05:04,970 --> 00:05:09,080
is throughout here you still have to

00:05:06,770 --> 00:05:10,250
maintain that legacy app if you fix a

00:05:09,080 --> 00:05:11,540
bug or deal with an issue in the legacy

00:05:10,250 --> 00:05:13,280
app you're probably gonna have to do it

00:05:11,540 --> 00:05:15,290
all over again in the brand new app and

00:05:13,280 --> 00:05:16,790
it's only here right at the very end of

00:05:15,290 --> 00:05:19,160
this cycle where you actually release

00:05:16,790 --> 00:05:20,540
the new app that you had value until

00:05:19,160 --> 00:05:21,860
then all your users are still been using

00:05:20,540 --> 00:05:25,130
this old out whilst you're building a

00:05:21,860 --> 00:05:26,900
brand new one this is also much risky in

00:05:25,130 --> 00:05:28,100
terms of deploying like if one day just

00:05:26,900 --> 00:05:31,390
switch everyone to their new app that

00:05:28,100 --> 00:05:33,500
could be very risky and go quite badly

00:05:31,390 --> 00:05:34,610
if you go from the other approach and

00:05:33,500 --> 00:05:36,590
you start building from the inside out

00:05:34,610 --> 00:05:38,600
you can actually add value straightaway

00:05:36,590 --> 00:05:40,460
so you find a tiny bit of your app and

00:05:38,600 --> 00:05:42,650
you turn that from in our case angular

00:05:40,460 --> 00:05:44,120
to react and Ameet leave then added some

00:05:42,650 --> 00:05:45,440
value because you've turned some older

00:05:44,120 --> 00:05:47,540
code that you weren't happy with into

00:05:45,440 --> 00:05:49,100
some new code that you were and again we

00:05:47,540 --> 00:05:50,390
went angular to react but you could swap

00:05:49,100 --> 00:05:53,390
those out for whichever frameworks you

00:05:50,390 --> 00:05:54,530
happen to be working with so effectively

00:05:53,390 --> 00:05:56,480
doing it this way just keep adding more

00:05:54,530 --> 00:05:58,790
and more value every time you migrate a

00:05:56,480 --> 00:06:01,720
piece of code you've added value to the

00:05:58,790 --> 00:06:03,980
app and your users are benefitting too

00:06:01,720 --> 00:06:05,630
going bit by bit like this lets us

00:06:03,980 --> 00:06:06,020
release early and often which is really

00:06:05,630 --> 00:06:07,910
good

00:06:06,020 --> 00:06:09,950
it lets you learn as you migrate so you

00:06:07,910 --> 00:06:11,660
might migrate one component to react and

00:06:09,950 --> 00:06:12,980
learn some things oh I didn't redo that

00:06:11,660 --> 00:06:14,750
as well as we'd like we can do that

00:06:12,980 --> 00:06:16,070
better next time and you can just do

00:06:14,750 --> 00:06:18,710
that because you're releasing it in very

00:06:16,070 --> 00:06:20,180
small increments all steps this also

00:06:18,710 --> 00:06:22,970
doesn't break any existing functionality

00:06:20,180 --> 00:06:24,800
and it means if a critical bug pops up

00:06:22,970 --> 00:06:26,030
in your app just because you're

00:06:24,800 --> 00:06:29,240
migrating it doesn't mean you can take

00:06:26,030 --> 00:06:30,620
the time to fix that bug Martin Fowler

00:06:29,240 --> 00:06:32,600
actually calls this the strangler

00:06:30,620 --> 00:06:34,640
application you're kind of strangling

00:06:32,600 --> 00:06:35,960
the app from the inside out I like to

00:06:34,640 --> 00:06:37,220
think of it as like aliens where the

00:06:35,960 --> 00:06:39,490
aliens burst through the chest that's

00:06:37,220 --> 00:06:41,570
that's kind of what I was going for and

00:06:39,490 --> 00:06:42,980
really the main benefits of this was

00:06:41,570 --> 00:06:44,750
that we shipped migrator code the day

00:06:42,980 --> 00:06:46,520
after we started the migration we found

00:06:44,750 --> 00:06:48,710
the smallest bit that we could migrate

00:06:46,520 --> 00:06:51,530
and we migrated it took a few hours we

00:06:48,710 --> 00:06:52,970
shipped it live and that was it so it's

00:06:51,530 --> 00:06:54,470
really nice feeling that we could start

00:06:52,970 --> 00:06:55,669
shipping straight away and really impact

00:06:54,470 --> 00:06:59,030
the application

00:06:55,669 --> 00:07:00,740
and for those who are really interested

00:06:59,030 --> 00:07:01,819
in the specifics of angular to react and

00:07:00,740 --> 00:07:03,710
how we did this I'm happy to go into

00:07:01,819 --> 00:07:05,960
more detail kind of in person so please

00:07:03,710 --> 00:07:07,099
come and find me but at high level what

00:07:05,960 --> 00:07:08,659
we're dealing with is loads of

00:07:07,099 --> 00:07:10,340
components or an angular they were

00:07:08,659 --> 00:07:11,930
called directives but for the purpose of

00:07:10,340 --> 00:07:13,960
this talk an angular directive really

00:07:11,930 --> 00:07:15,680
Maps pretty closely to a react component

00:07:13,960 --> 00:07:17,779
and when you build apps out of

00:07:15,680 --> 00:07:19,639
components or angular directives you end

00:07:17,779 --> 00:07:21,050
up affecting your big trees so you've

00:07:19,639 --> 00:07:22,849
got one component at the top that

00:07:21,050 --> 00:07:26,240
renders to others that each render three

00:07:22,849 --> 00:07:27,740
more that render some more and so on so

00:07:26,240 --> 00:07:29,210
our plan was we found the smallest bit

00:07:27,740 --> 00:07:31,449
we could one of these ones right at the

00:07:29,210 --> 00:07:33,770
bottom and we swapped it out for react

00:07:31,449 --> 00:07:35,629
then we continued with all its siblings

00:07:33,770 --> 00:07:37,430
so we swapped all those out for react

00:07:35,629 --> 00:07:39,319
and that point you've got an angular

00:07:37,430 --> 00:07:41,120
thing rendering a bunch of react stuff

00:07:39,319 --> 00:07:43,879
so then you can very easily lift all of

00:07:41,120 --> 00:07:45,319
that into react and effectively that's

00:07:43,879 --> 00:07:47,360
the process you just keep doing that on

00:07:45,319 --> 00:07:49,639
and on so if we take a bit more of a

00:07:47,360 --> 00:07:50,599
concrete example if you look at the app

00:07:49,639 --> 00:07:52,460
and you start breaking it down into

00:07:50,599 --> 00:07:55,729
components you see we have the fanclub

00:07:52,460 --> 00:07:57,110
banner and we have a listings row but of

00:07:55,729 --> 00:07:58,789
course listings Row is still pretty high

00:07:57,110 --> 00:08:00,589
level so you can break that down even

00:07:58,789 --> 00:08:02,629
further into the smaller bit so the date

00:08:00,589 --> 00:08:04,939
of the listing the title and the venue

00:08:02,629 --> 00:08:07,339
and then some buttons to let you buy VIP

00:08:04,939 --> 00:08:08,300
or normal tickets the listings date was

00:08:07,339 --> 00:08:12,680
actually the very first thing we

00:08:08,300 --> 00:08:14,360
migrated so to migrate a component from

00:08:12,680 --> 00:08:16,789
angular to react we first write the new

00:08:14,360 --> 00:08:18,500
react component whatever goes in and one

00:08:16,789 --> 00:08:19,939
of the key things we decided with this

00:08:18,500 --> 00:08:22,009
migration is that the react components

00:08:19,939 --> 00:08:23,930
we write should have no specific angular

00:08:22,009 --> 00:08:25,729
react kind of integration code in them

00:08:23,930 --> 00:08:27,409
we should be able to just write pure

00:08:25,729 --> 00:08:28,669
react components and not worry about the

00:08:27,409 --> 00:08:31,339
fact that being embedded into an angular

00:08:28,669 --> 00:08:32,899
system so there's nothing special about

00:08:31,339 --> 00:08:34,669
these react components they are exactly

00:08:32,899 --> 00:08:37,190
like any rare components anyone else is

00:08:34,669 --> 00:08:40,339
writing and then we have to try and

00:08:37,190 --> 00:08:41,570
insert this into angular so at the time

00:08:40,339 --> 00:08:44,779
and bear in mind we're on quite an old

00:08:41,570 --> 00:08:46,940
version of angular 1 angular directives

00:08:44,779 --> 00:08:48,740
were inserted via templates that used

00:08:46,940 --> 00:08:50,300
custom elements effectively so this

00:08:48,740 --> 00:08:52,940
listing stash button would be an angular

00:08:50,300 --> 00:08:55,209
directive and we need to swap that out

00:08:52,940 --> 00:08:57,199
for our brand new react component and

00:08:55,209 --> 00:08:58,610
there's this really great library that I

00:08:57,199 --> 00:09:00,470
want to give a shout out to called ng

00:08:58,610 --> 00:09:01,880
react which lets you render react within

00:09:00,470 --> 00:09:03,380
angular it just provides a couple of

00:09:01,880 --> 00:09:05,269
directives that make this really easy to

00:09:03,380 --> 00:09:06,829
do for the purposes of migrating from

00:09:05,269 --> 00:09:09,290
one to the other this was an absolute

00:09:06,829 --> 00:09:11,870
lifesaver and saved us a lot of time

00:09:09,290 --> 00:09:13,100
so we can effectively take this and we

00:09:11,870 --> 00:09:14,960
can swap it out for a react component

00:09:13,100 --> 00:09:17,900
directive that renders our react

00:09:14,960 --> 00:09:19,250
component on to the screen so now we've

00:09:17,900 --> 00:09:21,920
done the bottom we might continue and do

00:09:19,250 --> 00:09:23,900
the title so we swap out the title for

00:09:21,920 --> 00:09:25,520
another react component and at this

00:09:23,900 --> 00:09:28,190
point we're basically at this stage in

00:09:25,520 --> 00:09:29,720
the tree so now what we do is we create

00:09:28,190 --> 00:09:32,120
a react component to encompass all of

00:09:29,720 --> 00:09:33,890
this so we create our listings item

00:09:32,120 --> 00:09:35,780
component that has the title in the

00:09:33,890 --> 00:09:39,020
button component inside it again this is

00:09:35,780 --> 00:09:40,820
just a regular react component and now

00:09:39,020 --> 00:09:42,530
our angular template just becomes one

00:09:40,820 --> 00:09:44,750
react component reference that renders

00:09:42,530 --> 00:09:47,630
all that together and that gets us there

00:09:44,750 --> 00:09:49,070
effectively again if anyone really cares

00:09:47,630 --> 00:09:50,600
more about the specifics come and find

00:09:49,070 --> 00:09:52,190
me because I can tell you more but I'm

00:09:50,600 --> 00:09:53,930
aware this is fairly niche so I didn't

00:09:52,190 --> 00:09:55,310
want to go into too much detail and we

00:09:53,930 --> 00:10:00,200
effectively we did that on and on and on

00:09:55,310 --> 00:10:01,850
to migrate more of our app and as we're

00:10:00,200 --> 00:10:02,960
doing this we of course we're running

00:10:01,850 --> 00:10:05,210
this in production and we're deploying

00:10:02,960 --> 00:10:07,700
it on in almost most days we would do a

00:10:05,210 --> 00:10:09,140
deploy with some form of change and we

00:10:07,700 --> 00:10:12,530
can't break this thing we're selling

00:10:09,140 --> 00:10:14,420
tickets all the time so there were a

00:10:12,530 --> 00:10:17,570
load of unit tests they were written in

00:10:14,420 --> 00:10:19,280
angular via karma we moved over to Jess

00:10:17,570 --> 00:10:20,600
just because for us personally we

00:10:19,280 --> 00:10:22,760
preferred it more especially for route

00:10:20,600 --> 00:10:24,620
tests and we saw a good glimpse of Jess

00:10:22,760 --> 00:10:26,060
yesterday again not gonna go into too

00:10:24,620 --> 00:10:27,650
much detail here but I have written a

00:10:26,060 --> 00:10:31,220
blog post on this and I'll share the

00:10:27,650 --> 00:10:32,660
slides later - but of course unit tests

00:10:31,220 --> 00:10:35,030
to some degree are always going to be

00:10:32,660 --> 00:10:36,890
coupled to the implementation when you

00:10:35,030 --> 00:10:38,330
write a react component or an angular

00:10:36,890 --> 00:10:40,070
component the tests for that are going

00:10:38,330 --> 00:10:41,810
to be very much tied to it so when you

00:10:40,070 --> 00:10:43,550
migrate the angular component you also

00:10:41,810 --> 00:10:44,690
have to update and change the tests to

00:10:43,550 --> 00:10:46,970
make them relevant to the new react

00:10:44,690 --> 00:10:48,980
component what it's really value

00:10:46,970 --> 00:10:50,930
valuable for us with some acceptance

00:10:48,980 --> 00:10:52,940
tests and these are great because they

00:10:50,930 --> 00:10:55,580
they run we ran them via protractor via

00:10:52,940 --> 00:10:57,050
selenium and these are entirely detached

00:10:55,580 --> 00:10:58,850
from the code they actually load up the

00:10:57,050 --> 00:11:00,590
app in a browser click around here and

00:10:58,850 --> 00:11:01,910
see what's broken or or what's working

00:11:00,590 --> 00:11:03,950
and report stuff to us

00:11:01,910 --> 00:11:05,540
and when you're changing so much of the

00:11:03,950 --> 00:11:07,400
underlying code having tests that don't

00:11:05,540 --> 00:11:10,250
care what the code is if it's angular or

00:11:07,400 --> 00:11:12,200
react was really really valuable they

00:11:10,250 --> 00:11:13,790
are there are some downsides and this is

00:11:12,200 --> 00:11:15,290
what they looked like we also ran ours

00:11:13,790 --> 00:11:16,760
primarily an ie because that's the

00:11:15,290 --> 00:11:18,560
browser we didn't want to test it

00:11:16,760 --> 00:11:21,830
manually the most though we did have to

00:11:18,560 --> 00:11:23,089
sometimes there are some downsides these

00:11:21,830 --> 00:11:24,470
things they're slow to run

00:11:23,089 --> 00:11:25,970
I'm sure anyone else who's done these

00:11:24,470 --> 00:11:27,350
kind of end-to-end acceptance tests

00:11:25,970 --> 00:11:29,240
knows like some of the pain that there

00:11:27,350 --> 00:11:32,029
is in them they've you know they will

00:11:29,240 --> 00:11:33,980
often fail for no apparent reason so

00:11:32,029 --> 00:11:35,930
there is kind of some downsides so we

00:11:33,980 --> 00:11:37,370
picked four or five key user journeys

00:11:35,930 --> 00:11:39,139
through the application to make sure we

00:11:37,370 --> 00:11:40,430
had tested that meant even if we

00:11:39,139 --> 00:11:41,839
deployed some that was a bit buggy

00:11:40,430 --> 00:11:43,759
we knew that users could still buy

00:11:41,839 --> 00:11:48,559
tickets which is the primary kind of

00:11:43,759 --> 00:11:49,670
thing they want to do on our app so

00:11:48,559 --> 00:11:51,199
moving on from that I want to talk a bit

00:11:49,670 --> 00:11:54,319
more about the team and how we manage

00:11:51,199 --> 00:11:55,550
this this whole project we knew this

00:11:54,319 --> 00:11:57,529
migration was going to be at least six

00:11:55,550 --> 00:11:59,540
months long more likely a year it turned

00:11:57,529 --> 00:12:00,920
out to be about a year and for me

00:11:59,540 --> 00:12:02,600
personally that was the longest project

00:12:00,920 --> 00:12:04,279
I've ever worked in in one continuation

00:12:02,600 --> 00:12:06,050
normally I've worked in like smaller

00:12:04,279 --> 00:12:07,639
sprint style things or you had a full

00:12:06,050 --> 00:12:09,470
week project or maybe even a three-month

00:12:07,639 --> 00:12:10,819
project but to have at least a year's

00:12:09,470 --> 00:12:12,889
worth of work ahead of you was pretty

00:12:10,819 --> 00:12:14,749
daunting so organizing that and keeping

00:12:12,889 --> 00:12:16,040
everyone kind of men happy and

00:12:14,749 --> 00:12:17,540
productive and you know feeling like

00:12:16,040 --> 00:12:19,699
we've got good momentum was pretty

00:12:17,540 --> 00:12:20,959
tricky of course in your head in an

00:12:19,699 --> 00:12:22,490
ideal world the migration would look

00:12:20,959 --> 00:12:24,589
like this just be a straight line going

00:12:22,490 --> 00:12:26,269
up and it would all go smoothly and then

00:12:24,589 --> 00:12:27,649
maybe in a still pretty ideal world it

00:12:26,269 --> 00:12:29,209
might look a bit like this you hit a few

00:12:27,649 --> 00:12:31,370
roadblocks but on the whole it's a

00:12:29,209 --> 00:12:32,329
pretty smooth progression or in the real

00:12:31,370 --> 00:12:34,670
world and looks like this very

00:12:32,329 --> 00:12:36,230
scientific graph that I drew that shows

00:12:34,670 --> 00:12:37,399
really that you go back a few steps and

00:12:36,230 --> 00:12:38,329
you progress and then you make big leaps

00:12:37,399 --> 00:12:39,769
forward and then you realize that

00:12:38,329 --> 00:12:41,899
something went wrong and you you come

00:12:39,769 --> 00:12:43,850
back down again so kind of keeping

00:12:41,899 --> 00:12:45,139
everyone on board and a happy and having

00:12:43,850 --> 00:12:46,790
the work planned whilst taking these

00:12:45,139 --> 00:12:50,179
roadblocks made it quite an interesting

00:12:46,790 --> 00:12:52,490
project to deal with and really this

00:12:50,179 --> 00:12:54,259
comes down to how do you prioritize when

00:12:52,490 --> 00:12:56,059
you have a year's worth of work ahead of

00:12:54,259 --> 00:12:57,740
you and you've got to do all of it

00:12:56,059 --> 00:12:59,839
you've got to migrate the entire thing

00:12:57,740 --> 00:13:03,079
how on earth do you start to pick what

00:12:59,839 --> 00:13:04,279
you're going to work on one of our goals

00:13:03,079 --> 00:13:06,559
and one of the things we struggled with

00:13:04,279 --> 00:13:07,939
with the old angular app was that we

00:13:06,559 --> 00:13:09,559
wanted to make it easier to fix bugs

00:13:07,939 --> 00:13:10,730
with confidence that was a thing we

00:13:09,559 --> 00:13:12,980
hated the most that we couldn't move

00:13:10,730 --> 00:13:14,569
quickly we fixed the bug we'd have spent

00:13:12,980 --> 00:13:17,629
a few hours manually testing various

00:13:14,569 --> 00:13:19,490
edge cases just to make sure so we kind

00:13:17,629 --> 00:13:21,920
of let that feed into how we prioritized

00:13:19,490 --> 00:13:23,779
so he picked work based on the bugs and

00:13:21,920 --> 00:13:26,089
the churn rate not so much the code

00:13:23,779 --> 00:13:27,589
quality and what I mean here by churn

00:13:26,089 --> 00:13:29,389
rate is it's the amount of times a

00:13:27,589 --> 00:13:32,240
developer in your team will touch us

00:13:29,389 --> 00:13:34,160
given file so so there's a file it's a

00:13:32,240 --> 00:13:35,299
component somewhere and it's is you

00:13:34,160 --> 00:13:36,350
don't like how it's written it's really

00:13:35,299 --> 00:13:38,780
badly written in your opinion

00:13:36,350 --> 00:13:40,790
however its functionality is watertight

00:13:38,780 --> 00:13:42,710
users don't have any bugs with it and it

00:13:40,790 --> 00:13:44,030
works perfectly that's pretty low

00:13:42,710 --> 00:13:45,890
priority although you don't like the

00:13:44,030 --> 00:13:47,360
code the fact that it's working makes it

00:13:45,890 --> 00:13:49,400
a pretty good thing to just leave alone

00:13:47,360 --> 00:13:51,230
but if there's a file that you have to

00:13:49,400 --> 00:13:53,090
edit every single week as you're doing

00:13:51,230 --> 00:13:54,980
other bits work and that files tricky to

00:13:53,090 --> 00:13:56,210
edit that's got quite a high churn rate

00:13:54,980 --> 00:13:57,350
because you're touching it a lot and

00:13:56,210 --> 00:14:00,440
therefore it's probably something you

00:13:57,350 --> 00:14:03,260
should look to prioritize sooner so

00:14:00,440 --> 00:14:05,000
given these these kind of files with

00:14:03,260 --> 00:14:07,640
code quality churn rate and bug rate

00:14:05,000 --> 00:14:09,470
we've picked more so on the churn and

00:14:07,640 --> 00:14:11,480
the the rate of bugs rather than the

00:14:09,470 --> 00:14:12,800
actual quality of the code so in this

00:14:11,480 --> 00:14:14,990
case we'd pick the bottom one as the

00:14:12,800 --> 00:14:16,640
highest priority and this is how I would

00:14:14,990 --> 00:14:17,840
prioritize those you might you might

00:14:16,640 --> 00:14:19,910
disagree a little bit and do them

00:14:17,840 --> 00:14:21,470
slightly differently but kind of

00:14:19,910 --> 00:14:23,090
treating code quality is the lowest

00:14:21,470 --> 00:14:24,910
priority thing to decide on actually

00:14:23,090 --> 00:14:27,320
works pretty well

00:14:24,910 --> 00:14:28,910
it's also important here to mix larger

00:14:27,320 --> 00:14:31,040
bits of work with lots of small bits of

00:14:28,910 --> 00:14:32,360
work too if you I love working on long

00:14:31,040 --> 00:14:34,100
projects like getting stuck into a

00:14:32,360 --> 00:14:35,750
project for a few weeks but then

00:14:34,100 --> 00:14:37,310
sometimes it's also nice to bash three

00:14:35,750 --> 00:14:39,440
tiny bugs out in a couple of days and

00:14:37,310 --> 00:14:41,240
deploy lots of stuff rapidly so we had a

00:14:39,440 --> 00:14:42,920
massive backlog we had again we happen

00:14:41,240 --> 00:14:45,020
to use Trello it doesn't matter what the

00:14:42,920 --> 00:14:46,700
tool is that had a big mix of stuff the

00:14:45,020 --> 00:14:47,900
developers could pick stuff off you had

00:14:46,700 --> 00:14:49,340
a spare afternoon you could find a

00:14:47,900 --> 00:14:50,630
really small thing to migrate if you had

00:14:49,340 --> 00:14:53,930
a longer piece of time you'd pick up a

00:14:50,630 --> 00:14:55,940
bigger bit of work and even when we have

00:14:53,930 --> 00:14:57,650
to do really large rewrites I mean some

00:14:55,940 --> 00:14:59,720
parts of this system was were pretty big

00:14:57,650 --> 00:15:01,190
and we had to do them in one big go

00:14:59,720 --> 00:15:03,650
we're just a label to break those down

00:15:01,190 --> 00:15:05,000
into lots of smaller cards again Trello

00:15:03,650 --> 00:15:07,550
checklists are quite a good way to do

00:15:05,000 --> 00:15:09,050
this the tool doesn't really matter but

00:15:07,550 --> 00:15:10,310
breaking this down also mate meant that

00:15:09,050 --> 00:15:12,590
you didn't have like for weeks without

00:15:10,310 --> 00:15:13,700
merging a single thing on on github the

00:15:12,590 --> 00:15:15,440
fact that you could do lots of small

00:15:13,700 --> 00:15:18,020
bits and still feel progress was was

00:15:15,440 --> 00:15:20,300
really nice and we used feature branches

00:15:18,020 --> 00:15:21,860
quite a lot to do this so one of the big

00:15:20,300 --> 00:15:24,020
projects we did was we rebuilt the queue

00:15:21,860 --> 00:15:25,220
so the queue is the thing customers get

00:15:24,020 --> 00:15:27,650
stuck in when they're waiting to buy

00:15:25,220 --> 00:15:28,760
tickets such that if we have a hundred

00:15:27,650 --> 00:15:30,200
thousand people trying to buy a dell

00:15:28,760 --> 00:15:31,940
tickets they don't all here our servers

00:15:30,200 --> 00:15:33,950
at once and crash our entire system so

00:15:31,940 --> 00:15:35,630
we put them in a queue and we rebuilt

00:15:33,950 --> 00:15:38,510
this from scratch and react over two or

00:15:35,630 --> 00:15:40,040
three weeks but rather than do one big

00:15:38,510 --> 00:15:42,470
code review and big release at the end

00:15:40,040 --> 00:15:43,910
we tried to break it down so what we did

00:15:42,470 --> 00:15:46,820
is we had our master branch and we

00:15:43,910 --> 00:15:48,050
pulled off a cue master and then we did

00:15:46,820 --> 00:15:50,060
lots of small bits of work on those

00:15:48,050 --> 00:15:51,560
corresponding to the checklist on Trello

00:15:50,060 --> 00:15:54,380
and we'd merge them in in small bits

00:15:51,560 --> 00:15:55,880
getting code review at each stage so by

00:15:54,380 --> 00:15:57,440
the time it came for the actual queue

00:15:55,880 --> 00:15:59,360
master branch to be merged into our

00:15:57,440 --> 00:16:01,430
actual master and be deployed most of

00:15:59,360 --> 00:16:02,690
the code had already been reviewed this

00:16:01,430 --> 00:16:04,610
is a really nice way to keep things

00:16:02,690 --> 00:16:05,990
going and also spare a developer from

00:16:04,610 --> 00:16:07,850
out a thousand line code review at the

00:16:05,990 --> 00:16:10,310
end we all know if you give a developer

00:16:07,850 --> 00:16:11,720
five lines of code to review they will

00:16:10,310 --> 00:16:12,830
leave about ten comments if you give

00:16:11,720 --> 00:16:14,960
them a thousand lines review they'll

00:16:12,830 --> 00:16:16,820
leave one comment at best so doing lots

00:16:14,960 --> 00:16:19,400
of small code reviews also keeps the

00:16:16,820 --> 00:16:21,050
quality up there and this is again part

00:16:19,400 --> 00:16:22,670
of our releasing early releasing often

00:16:21,050 --> 00:16:23,660
it encourages those small pull requests

00:16:22,670 --> 00:16:26,270
and units of work

00:16:23,660 --> 00:16:27,470
it keeps the momentum on the team and it

00:16:26,270 --> 00:16:28,850
keeps risk to a minimum if you're

00:16:27,470 --> 00:16:30,470
deploying lots of small things and

00:16:28,850 --> 00:16:32,750
suddenly users report they can't buy

00:16:30,470 --> 00:16:34,580
tickets you can track that down and roll

00:16:32,750 --> 00:16:35,990
back the thing you just deployed and

00:16:34,580 --> 00:16:38,960
it's a really small thing rather than a

00:16:35,990 --> 00:16:40,640
much bigger thing this also means if

00:16:38,960 --> 00:16:44,570
there is a sudden bug you can deal with

00:16:40,640 --> 00:16:46,280
it much more quickly and when you're

00:16:44,570 --> 00:16:47,930
migrating you'll often find bits of work

00:16:46,280 --> 00:16:49,250
that end up being way more complicated

00:16:47,930 --> 00:16:50,900
than you think there might be a bit of

00:16:49,250 --> 00:16:53,330
say a date on a page that you think

00:16:50,900 --> 00:16:54,620
that's easy to migrate but then once you

00:16:53,330 --> 00:16:56,210
start using it you'll see that there's a

00:16:54,620 --> 00:16:58,130
few weird things it does it pulls in

00:16:56,210 --> 00:16:59,690
this external library that's a bit weird

00:16:58,130 --> 00:17:01,730
or it depends on some code that you're

00:16:59,690 --> 00:17:02,990
not a big fan of and suddenly what you

00:17:01,730 --> 00:17:05,000
thought you could get done in an hour

00:17:02,990 --> 00:17:06,530
might end up taking you a day or two

00:17:05,000 --> 00:17:09,230
days and you might not have that day or

00:17:06,530 --> 00:17:11,120
two days right now so what we tried to

00:17:09,230 --> 00:17:12,950
kind of put in place this Scout rule

00:17:11,120 --> 00:17:14,450
that says just leave something but leave

00:17:12,950 --> 00:17:16,010
things better than when you found them

00:17:14,450 --> 00:17:17,540
so you load up a component you're going

00:17:16,010 --> 00:17:18,890
to migrate you realize it's much more

00:17:17,540 --> 00:17:20,900
complicated you've only got an hour you

00:17:18,890 --> 00:17:22,520
can't do it rather than not do any of it

00:17:20,900 --> 00:17:23,960
you could you could start that work you

00:17:22,520 --> 00:17:25,160
could rewrite a bit of the JavaScript to

00:17:23,960 --> 00:17:28,670
leave it in a better place when we do

00:17:25,160 --> 00:17:30,440
come to migrate it it's important to

00:17:28,670 --> 00:17:32,540
remember that a migrated codebase is not

00:17:30,440 --> 00:17:34,190
a perfect codebase this is something

00:17:32,540 --> 00:17:37,310
that I fell into and a lot of people

00:17:34,190 --> 00:17:39,770
seem to if you're migrating in our case

00:17:37,310 --> 00:17:41,270
angular to react you're not expected to

00:17:39,770 --> 00:17:43,310
write the best react components that

00:17:41,270 --> 00:17:45,080
have ever existed during your migration

00:17:43,310 --> 00:17:46,400
it's just not going to happen you know

00:17:45,080 --> 00:17:48,140
you're probably gonna have to make a few

00:17:46,400 --> 00:17:49,850
hats or tweaks to make them react

00:17:48,140 --> 00:17:51,740
component play nicely and that's

00:17:49,850 --> 00:17:53,960
absolutely fine what we found is it was

00:17:51,740 --> 00:17:56,240
more important to migrate get off in our

00:17:53,960 --> 00:17:57,890
case angular to react and then we could

00:17:56,240 --> 00:17:59,690
refactor the react components as we saw

00:17:57,890 --> 00:18:01,910
fit but moving them off angular was the

00:17:59,690 --> 00:18:03,410
most important step so don't be afraid

00:18:01,910 --> 00:18:03,860
of migrating and being aware that you

00:18:03,410 --> 00:18:05,540
want to

00:18:03,860 --> 00:18:07,970
right what you've just migrated that's

00:18:05,540 --> 00:18:09,860
that's perfectly fine and again we had a

00:18:07,970 --> 00:18:13,010
thing in Trello with just a list of

00:18:09,860 --> 00:18:14,240
things we wanted to do really the way to

00:18:13,010 --> 00:18:15,950
think about this is the next time you

00:18:14,240 --> 00:18:17,390
touch a piece of code or a component

00:18:15,950 --> 00:18:18,740
you'll know more about it than you did

00:18:17,390 --> 00:18:20,780
the last time because you've worked on

00:18:18,740 --> 00:18:22,220
it a bit more so you can never make it

00:18:20,780 --> 00:18:23,390
perfect the first time it's always gonna

00:18:22,220 --> 00:18:24,890
need you to work on it a few times

00:18:23,390 --> 00:18:28,460
before you really get a sense of how it

00:18:24,890 --> 00:18:30,290
should work another thing we wanted to

00:18:28,460 --> 00:18:32,480
avoid that was one of the issues when it

00:18:30,290 --> 00:18:34,400
came to plan this this migration was the

00:18:32,480 --> 00:18:35,660
lottery factor now I think some

00:18:34,400 --> 00:18:37,280
companies would call this the bus factor

00:18:35,660 --> 00:18:39,710
and this is if someone gets hit by bus

00:18:37,280 --> 00:18:41,059
like how screwed EE that's a bit kind of

00:18:39,710 --> 00:18:42,799
depressing and morbid so we went for the

00:18:41,059 --> 00:18:44,590
lottery factor so if I win the lottery

00:18:42,799 --> 00:18:46,940
and retire to an island somewhere sunny

00:18:44,590 --> 00:18:50,000
which by the way is totally not London

00:18:46,940 --> 00:18:51,530
then you know how how is the team gonna

00:18:50,000 --> 00:18:53,570
be can they can they move without me

00:18:51,530 --> 00:18:54,650
really this is if someone goes on

00:18:53,570 --> 00:18:57,500
holiday for a couple of weeks

00:18:54,650 --> 00:18:58,760
are we okay or not and this came down to

00:18:57,500 --> 00:19:00,860
really trying to share knowledge as

00:18:58,760 --> 00:19:02,630
we're migrating you find like common

00:19:00,860 --> 00:19:04,429
like gotchas or bits of info like tip

00:19:02,630 --> 00:19:05,929
bits of information that are going to be

00:19:04,429 --> 00:19:08,330
really useful for other developers and

00:19:05,929 --> 00:19:09,890
putting them somewhere where people will

00:19:08,330 --> 00:19:11,480
actually read them and keep it up to

00:19:09,890 --> 00:19:13,640
date is can be a challenge

00:19:11,480 --> 00:19:15,590
we tried Google Docs but that's too far

00:19:13,640 --> 00:19:17,929
detached from the code so they got out

00:19:15,590 --> 00:19:19,220
Dave very quickly github wikis kind of

00:19:17,929 --> 00:19:21,049
same problem you don't ricci them that

00:19:19,220 --> 00:19:22,760
much and we actually ended up with a

00:19:21,049 --> 00:19:24,770
really low Phi solution we just created

00:19:22,760 --> 00:19:27,260
a markdown file in the actual code app

00:19:24,770 --> 00:19:28,910
itself called knowledge base knowledge

00:19:27,260 --> 00:19:30,380
bases of rather grand terms or as

00:19:28,910 --> 00:19:32,600
effectively some random notes in

00:19:30,380 --> 00:19:34,070
markdown but it's just a place to dump

00:19:32,600 --> 00:19:35,450
like bits of information that you find

00:19:34,070 --> 00:19:37,220
useful and it was really useful to be

00:19:35,450 --> 00:19:39,049
able to refer to this well I'd say oh I

00:19:37,220 --> 00:19:40,040
just fit fixed this particular problem

00:19:39,049 --> 00:19:42,770
and I put something in the knowledge

00:19:40,040 --> 00:19:44,419
base and people could read it because it

00:19:42,770 --> 00:19:46,040
was right next to the code we found we

00:19:44,419 --> 00:19:48,919
were more likely to keep it in sync and

00:19:46,040 --> 00:19:49,970
up-to-date and when you've got some

00:19:48,919 --> 00:19:51,950
really long-running

00:19:49,970 --> 00:19:53,419
projects like this the most important

00:19:51,950 --> 00:19:55,640
thing was to have some metrics to track

00:19:53,419 --> 00:19:57,559
your actual progress there's a year's

00:19:55,640 --> 00:19:59,510
worth of work here and actually figuring

00:19:57,559 --> 00:20:01,220
out how far along is very tricky and

00:19:59,510 --> 00:20:02,870
sometimes it can feel like there's just

00:20:01,220 --> 00:20:05,030
a never-ending tunnel of work ahead of

00:20:02,870 --> 00:20:07,940
you and there's no actual end in sight

00:20:05,030 --> 00:20:09,830
and I'm not talking like really fleshed

00:20:07,940 --> 00:20:12,710
out perfect polished metrics here I'm

00:20:09,830 --> 00:20:14,750
talking really rough metrics so this was

00:20:12,710 --> 00:20:16,429
one that grabbed a bunch of files for

00:20:14,750 --> 00:20:17,660
any mention of angular and greps a bunch

00:20:16,429 --> 00:20:19,550
of files for any mention of real

00:20:17,660 --> 00:20:22,670
and it gave me the number of files it

00:20:19,550 --> 00:20:25,370
found so this point we're on 126 angular

00:20:22,670 --> 00:20:27,020
files and 122 react files this is like

00:20:25,370 --> 00:20:28,910
the worst metric in the world because

00:20:27,020 --> 00:20:30,200
it's incredibly inaccurate like a load

00:20:28,910 --> 00:20:31,820
of files don't mention either react or

00:20:30,200 --> 00:20:33,140
angular some might mention angular in a

00:20:31,820 --> 00:20:35,480
different way like this is

00:20:33,140 --> 00:20:37,100
non-scientific but it let us see

00:20:35,480 --> 00:20:40,550
progress because I could run this here

00:20:37,100 --> 00:20:41,990
and you can see the numbers 126 122 I'll

00:20:40,550 --> 00:20:43,570
run it here I've also changed my

00:20:41,990 --> 00:20:46,730
terminal theme in case you can't notice

00:20:43,570 --> 00:20:48,500
we're now on a tee fan Euler and 159 for

00:20:46,730 --> 00:20:49,880
react now this doesn't actually mean

00:20:48,500 --> 00:20:51,320
that much and it doesn't mean with

00:20:49,880 --> 00:20:53,300
whatever percentage of the way through

00:20:51,320 --> 00:20:54,560
but what it does mean is when closer

00:20:53,300 --> 00:20:57,920
than we were when I ran the first

00:20:54,560 --> 00:20:59,270
screenshot in the first terminal so this

00:20:57,920 --> 00:21:01,010
is really nice like we don't share these

00:20:59,270 --> 00:21:02,480
metrics they don't mean much but as a

00:21:01,010 --> 00:21:06,830
team just having some numbers that you

00:21:02,480 --> 00:21:08,390
can see are moving is really nice and of

00:21:06,830 --> 00:21:09,560
course it was important to get the rest

00:21:08,390 --> 00:21:11,090
of the business on side with this

00:21:09,560 --> 00:21:12,140
migration and for them to understand it

00:21:11,090 --> 00:21:13,850
and I'll come on more to that in a

00:21:12,140 --> 00:21:15,770
minute but we also had a spreadsheet

00:21:13,850 --> 00:21:17,930
that we shared round and we broke up

00:21:15,770 --> 00:21:19,370
work into rough points and we based on

00:21:17,930 --> 00:21:22,250
that we figured out a percentage of how

00:21:19,370 --> 00:21:23,960
migrated we were now we're all software

00:21:22,250 --> 00:21:25,820
developers or most of us are and we know

00:21:23,960 --> 00:21:27,110
that you can't really give a percentage

00:21:25,820 --> 00:21:29,240
for how a migrated you are it doesn't

00:21:27,110 --> 00:21:31,280
really work but you can't say we're 64

00:21:29,240 --> 00:21:33,200
and a half percent migrated but what

00:21:31,280 --> 00:21:34,580
does that really mean but by giving

00:21:33,200 --> 00:21:36,110
these rough estimates and showing them

00:21:34,580 --> 00:21:37,490
around again we could track progress and

00:21:36,110 --> 00:21:39,110
other teams could get a sense of where

00:21:37,490 --> 00:21:40,400
we're up to and in the course of a

00:21:39,110 --> 00:21:42,920
couple of months at one point we moved

00:21:40,400 --> 00:21:45,950
it from 43 to 70 again does that mean

00:21:42,920 --> 00:21:47,360
we're 70.5% migrated probably not but

00:21:45,950 --> 00:21:51,830
doesn't mean we're much more migrated

00:21:47,360 --> 00:21:53,180
than we were here yes it does migration

00:21:51,830 --> 00:21:55,190
was always a really good chance to

00:21:53,180 --> 00:21:56,330
upgrade your tooling as well if you've

00:21:55,190 --> 00:21:58,670
got any parts the app you're not happy

00:21:56,330 --> 00:22:00,920
with any say your test framework or your

00:21:58,670 --> 00:22:03,050
build tool or any other kind of tools

00:22:00,920 --> 00:22:04,760
you you know linting anything like that

00:22:03,050 --> 00:22:06,890
there's a really good chance to upgrade

00:22:04,760 --> 00:22:08,510
those as well given your rewriting a

00:22:06,890 --> 00:22:10,550
bunch of stuff anyway it's a good chance

00:22:08,510 --> 00:22:14,000
to take some time to figure out your

00:22:10,550 --> 00:22:15,800
tooling it's also important sorry it's

00:22:14,000 --> 00:22:17,120
also important because it was quite nice

00:22:15,800 --> 00:22:18,680
sometimes to get a break from the actual

00:22:17,120 --> 00:22:21,230
migration and just do some hauling stuff

00:22:18,680 --> 00:22:23,060
and being able to mix up like longer

00:22:21,230 --> 00:22:25,220
bits of work small bits of work tooling

00:22:23,060 --> 00:22:28,390
work all sorts of different things get

00:22:25,220 --> 00:22:28,390
the project really interesting

00:22:30,260 --> 00:22:34,710
so finally I'd like to talk about

00:22:32,070 --> 00:22:37,320
talking or communication that it was 40

00:22:34,710 --> 00:22:38,670
so it has been talking really and kind

00:22:37,320 --> 00:22:41,730
of sharing what we were doing with the

00:22:38,670 --> 00:22:43,080
wider business the most important people

00:22:41,730 --> 00:22:44,250
to convince here weren't actually on the

00:22:43,080 --> 00:22:45,840
tech team it was fairly straightforward

00:22:44,250 --> 00:22:47,760
to convince my colleagues that this was

00:22:45,840 --> 00:22:49,950
a good idea they were on board the CTO

00:22:47,760 --> 00:22:51,480
kind of understood and was keen for it

00:22:49,950 --> 00:22:52,650
but then how do you tell the people who

00:22:51,480 --> 00:22:54,510
actually deal with this application

00:22:52,650 --> 00:22:56,460
every day people like customer support

00:22:54,510 --> 00:22:58,040
who get angry emails when users can't

00:22:56,460 --> 00:23:00,300
buy tickets they want because of a bug

00:22:58,040 --> 00:23:01,710
you know the people who deal with the

00:23:00,300 --> 00:23:02,790
artists who are using our store who

00:23:01,710 --> 00:23:05,070
complain when something's not quite

00:23:02,790 --> 00:23:06,270
right you have to tell those people that

00:23:05,070 --> 00:23:07,350
for a year you're not gonna be adding

00:23:06,270 --> 00:23:09,540
that many features because you're

00:23:07,350 --> 00:23:11,660
rebuilding it from the inside out and

00:23:09,540 --> 00:23:13,920
like selling that is is quite tricky and

00:23:11,660 --> 00:23:15,300
I don't know if this is a surprise to

00:23:13,920 --> 00:23:16,860
just me but it turns out they don't

00:23:15,300 --> 00:23:18,510
really care about frameworks it's it's

00:23:16,860 --> 00:23:21,810
just us who care about frameworks which

00:23:18,510 --> 00:23:23,370
is mind-blowing right so see No so when

00:23:21,810 --> 00:23:24,870
I first started kind of communicating

00:23:23,370 --> 00:23:26,610
sent an email around that the business

00:23:24,870 --> 00:23:28,350
saying why we're doing this I use things

00:23:26,610 --> 00:23:30,510
like reacts lifecycle methods and small

00:23:28,350 --> 00:23:32,070
API is easier for developers to learn or

00:23:30,510 --> 00:23:33,180
react state model is less magical which

00:23:32,070 --> 00:23:34,320
uni-directional dataflow really

00:23:33,180 --> 00:23:36,510
simplifies because it makes it easy like

00:23:34,320 --> 00:23:37,650
what does that really mean does anyone

00:23:36,510 --> 00:23:38,910
like if someone could tell me what that

00:23:37,650 --> 00:23:40,650
means please come and find me because I

00:23:38,910 --> 00:23:42,840
still don't know one talking about car

00:23:40,650 --> 00:23:44,460
for the time and if I don't know and we

00:23:42,840 --> 00:23:45,810
can't communicate that how are people

00:23:44,460 --> 00:23:47,430
outside of engineering going to know

00:23:45,810 --> 00:23:50,310
what that means how is that gonna sell

00:23:47,430 --> 00:23:52,470
them the benefits of doing this work so

00:23:50,310 --> 00:23:54,510
really it was a case of flipping it and

00:23:52,470 --> 00:23:56,010
talking to them about how it is from

00:23:54,510 --> 00:23:58,020
their perspective or their point of view

00:23:56,010 --> 00:23:58,590
things like when you ask us for a new

00:23:58,020 --> 00:24:01,890
bug

00:23:58,590 --> 00:24:03,450
oh sorry out not a new bug I expose when

00:24:01,890 --> 00:24:05,700
you ask us for a new feature or a fix to

00:24:03,450 --> 00:24:07,410
an existing bugs right now we can't do

00:24:05,700 --> 00:24:09,120
it or we can do it but it takes three

00:24:07,410 --> 00:24:10,170
times longer than it should and we don't

00:24:09,120 --> 00:24:12,660
have competence and we don't break

00:24:10,170 --> 00:24:14,520
something else where we can improve our

00:24:12,660 --> 00:24:15,660
mobile performance because we have a lot

00:24:14,520 --> 00:24:18,450
of dead code as part of this migration

00:24:15,660 --> 00:24:19,860
we can rip out and we can make things on

00:24:18,450 --> 00:24:21,630
mobile much nicer we should lead to more

00:24:19,860 --> 00:24:22,940
tickets being sold and happier users and

00:24:21,630 --> 00:24:25,560
so on and so forth

00:24:22,940 --> 00:24:27,180
so this was how we started to get people

00:24:25,560 --> 00:24:29,640
outside the business understanding the

00:24:27,180 --> 00:24:31,080
benefits to this migration another way

00:24:29,640 --> 00:24:32,190
of doing this that comes back to the

00:24:31,080 --> 00:24:34,680
prioritization I was talking about

00:24:32,190 --> 00:24:36,270
earlier is that if you can fix bugs that

00:24:34,680 --> 00:24:38,130
cause pain for other departments and

00:24:36,270 --> 00:24:40,560
prioritize those based and you know

00:24:38,130 --> 00:24:42,030
during the the year-long project this

00:24:40,560 --> 00:24:43,140
will get you a lot of friends in a lot

00:24:42,030 --> 00:24:44,880
of places

00:24:43,140 --> 00:24:47,580
so we had a bug that had been existing

00:24:44,880 --> 00:24:50,040
for over a year which is very few a few

00:24:47,580 --> 00:24:52,620
users maybe one in tens of thousands

00:24:50,040 --> 00:24:53,760
very very rarely would get stuck when

00:24:52,620 --> 00:24:55,770
they entered their credit card they'd

00:24:53,760 --> 00:24:57,210
hit submit and just it would freeze and

00:24:55,770 --> 00:24:59,160
nothing would happen and those people

00:24:57,210 --> 00:25:00,570
would miss out on tickets which if

00:24:59,160 --> 00:25:01,920
you're in a queue for tickets and you've

00:25:00,570 --> 00:25:03,600
been sat your computer for two hours

00:25:01,920 --> 00:25:05,370
waiting for tickets like that really

00:25:03,600 --> 00:25:07,740
sucks and people are understandably very

00:25:05,370 --> 00:25:09,059
very angry and customer support were fed

00:25:07,740 --> 00:25:10,799
up at dealing with these people when the

00:25:09,059 --> 00:25:13,080
tech team had had this issue for a year

00:25:10,799 --> 00:25:15,450
that we just couldn't fix so we said

00:25:13,080 --> 00:25:17,490
well let's migrate that bit so we did we

00:25:15,450 --> 00:25:19,200
migrated it and we kind of communicated

00:25:17,490 --> 00:25:20,910
this we use slack but again whatever

00:25:19,200 --> 00:25:23,160
tool you happen to use saying we fixed

00:25:20,910 --> 00:25:24,630
it keep me informed like if it happens

00:25:23,160 --> 00:25:26,970
again but we're in a much better place

00:25:24,630 --> 00:25:30,000
now and after this day we didn't see the

00:25:26,970 --> 00:25:31,290
issue again so that really communicates

00:25:30,000 --> 00:25:33,150
to me like the benefit and it

00:25:31,290 --> 00:25:35,010
communicates to in this case Kaelyn from

00:25:33,150 --> 00:25:37,049
the customer support team the benefits

00:25:35,010 --> 00:25:38,970
of this work and why we're doing it it

00:25:37,049 --> 00:25:40,169
communicates it much better than react

00:25:38,970 --> 00:25:43,410
is better than angular or whatever

00:25:40,169 --> 00:25:44,340
technical and reasons we may have had so

00:25:43,410 --> 00:25:45,510
it's important to make sure you keep

00:25:44,340 --> 00:25:48,540
everyone in the loop with this project

00:25:45,510 --> 00:25:49,980
as it's going on and of course sometimes

00:25:48,540 --> 00:25:52,020
when you are migrating and it's a

00:25:49,980 --> 00:25:53,880
complex bit of software things will go

00:25:52,020 --> 00:25:55,710
wrong you can put all the tests in place

00:25:53,880 --> 00:25:57,330
you can do all the checks bottom utley

00:25:55,710 --> 00:25:59,160
now and then you will deploy some broken

00:25:57,330 --> 00:26:01,919
code it's just a fact of a fact of being

00:25:59,160 --> 00:26:03,750
a developer and when it when you do that

00:26:01,919 --> 00:26:05,990
it's important to kind of react to that

00:26:03,750 --> 00:26:08,490
in in the right way and deal with it

00:26:05,990 --> 00:26:10,470
sometimes we will we will break things I

00:26:08,490 --> 00:26:11,640
found this on Twitter and I always

00:26:10,470 --> 00:26:13,860
include it there are two types of

00:26:11,640 --> 00:26:15,390
developer in the world there are those

00:26:13,860 --> 00:26:18,140
who have broken production and there are

00:26:15,390 --> 00:26:20,190
those who are about to break production

00:26:18,140 --> 00:26:21,690
so I'd like to personally apologize to

00:26:20,190 --> 00:26:23,280
three people who bought tickets for a

00:26:21,690 --> 00:26:25,440
concert on the wrong day in Tokyo

00:26:23,280 --> 00:26:27,240
because of me

00:26:25,440 --> 00:26:29,910
turns out time zones are tricky like

00:26:27,240 --> 00:26:31,260
again who knew and so yeah we did fix

00:26:29,910 --> 00:26:32,910
that by the way and got the new tickets

00:26:31,260 --> 00:26:34,380
but that kind of really sucked that was

00:26:32,910 --> 00:26:35,820
also like a week into the migration that

00:26:34,380 --> 00:26:37,950
I did that and it wasn't the best the

00:26:35,820 --> 00:26:40,020
best way to start but it's kind of

00:26:37,950 --> 00:26:41,640
you've got to acknowledge it and kind of

00:26:40,020 --> 00:26:43,230
figure out why that happened and how can

00:26:41,640 --> 00:26:45,030
we prevent it again so we always asked

00:26:43,230 --> 00:26:47,070
what went wrong why didn't we catch it

00:26:45,030 --> 00:26:49,320
how can we fix it and most importantly

00:26:47,070 --> 00:26:50,910
how we prevent it happening again so in

00:26:49,320 --> 00:26:52,440
that case it was a time zone bug there's

00:26:50,910 --> 00:26:54,660
a time zone bug when you are only in

00:26:52,440 --> 00:26:56,670
basically not British time for some

00:26:54,660 --> 00:26:58,920
reason it affected New York time and

00:26:56,670 --> 00:27:00,570
like Tokyo time so if we were ever doing

00:26:58,920 --> 00:27:02,340
any date work I just manually set my

00:27:00,570 --> 00:27:03,900
computer to that date time and test it

00:27:02,340 --> 00:27:05,370
there things like that we had a list of

00:27:03,900 --> 00:27:08,250
like common things we've messed up

00:27:05,370 --> 00:27:08,940
before that we can fix now and it's

00:27:08,250 --> 00:27:10,680
important to remember with this

00:27:08,940 --> 00:27:12,360
migration it's a two-way street there's

00:27:10,680 --> 00:27:13,920
a lot of other people outside the tech

00:27:12,360 --> 00:27:16,710
team invested in it and you need to keep

00:27:13,920 --> 00:27:19,680
them informed so just to end some

00:27:16,710 --> 00:27:21,840
takeaways don't migrate for the sake of

00:27:19,680 --> 00:27:23,940
it like just because this one on angular

00:27:21,840 --> 00:27:25,800
that's not one why we migrated we

00:27:23,940 --> 00:27:27,930
couldn't fix things we can move quickly

00:27:25,800 --> 00:27:29,460
and again just to be clear I'm not

00:27:27,930 --> 00:27:31,380
hating on angular like we could have

00:27:29,460 --> 00:27:32,520
migrated from angular 1 to angular 2 we

00:27:31,380 --> 00:27:34,140
could have migrated from angular to

00:27:32,520 --> 00:27:36,660
Ember to view whatever it's just in our

00:27:34,140 --> 00:27:40,560
case we pick react plan plan and plan

00:27:36,660 --> 00:27:42,360
again cross unit business communication

00:27:40,560 --> 00:27:44,040
is is so important and you should start

00:27:42,360 --> 00:27:45,630
that earlier I waited a couple of months

00:27:44,040 --> 00:27:47,130
before I really understood that people

00:27:45,630 --> 00:27:48,360
need to know about this stuff that's

00:27:47,130 --> 00:27:50,370
what I started sooner a lot of things

00:27:48,360 --> 00:27:51,810
would've been smoother prioritize more

00:27:50,370 --> 00:27:53,340
so based on the current pain points in

00:27:51,810 --> 00:27:55,350
your application for you and for other

00:27:53,340 --> 00:27:58,200
stakeholders users customer support and

00:27:55,350 --> 00:27:59,340
so on have a bunch of different tasks so

00:27:58,200 --> 00:28:02,310
that the work is kind of fresh and

00:27:59,340 --> 00:28:03,840
interesting have some metrics both

00:28:02,310 --> 00:28:05,310
internally and externally and they can

00:28:03,840 --> 00:28:07,980
be really happy metrics that you come up

00:28:05,310 --> 00:28:09,570
with in a in a couple of hours and don't

00:28:07,980 --> 00:28:12,360
expect a migrate perfectly the first

00:28:09,570 --> 00:28:14,190
time so I'd like to thank you very much

00:28:12,360 --> 00:28:16,650
for listening before I go just gonna do

00:28:14,190 --> 00:28:17,910
a quick self plug as always I blogged on

00:28:16,650 --> 00:28:18,960
the JavaScript player on comm it's

00:28:17,910 --> 00:28:21,450
entirely free is just that it's

00:28:18,960 --> 00:28:23,340
available we've seen a lot of CSS and

00:28:21,450 --> 00:28:24,960
J's discussions recently I did a video

00:28:23,340 --> 00:28:26,460
tutorial with Glenn Madden one the

00:28:24,960 --> 00:28:27,330
co-creators of style components which I

00:28:26,460 --> 00:28:29,010
think a lot of people would find

00:28:27,330 --> 00:28:30,930
interesting it's a JavaScript playground

00:28:29,010 --> 00:28:32,580
calm I don't know if I have time for

00:28:30,930 --> 00:28:34,260
questions now if I don't I'm around all

00:28:32,580 --> 00:28:35,670
today I'm also in the Elm workshop

00:28:34,260 --> 00:28:36,060
tomorrow helping out so come and find me

00:28:35,670 --> 00:28:37,710
there

00:28:36,060 --> 00:28:39,240
or if you don't get a chance you can

00:28:37,710 --> 00:28:40,590
tweet me as Jack underscore Franklin

00:28:39,240 --> 00:28:42,720
I'll also tweet the slides with the

00:28:40,590 --> 00:28:43,800
hashtag and I'm Jack at thread comm as

00:28:42,720 --> 00:28:48,740
well so thank you very much for

00:28:43,800 --> 00:28:48,740
listening Thank You Jarek

00:28:50,380 --> 00:28:56,270
we do have time for one or two questions

00:28:52,940 --> 00:28:57,830
okay we should go through them the first

00:28:56,270 --> 00:28:59,630
one is something I can I even understand

00:28:57,830 --> 00:29:01,880
how to convince the business guys such a

00:28:59,630 --> 00:29:03,470
factories worth it especially if the

00:29:01,880 --> 00:29:07,370
current product is actually working and

00:29:03,470 --> 00:29:09,710
makes money it was it was working with

00:29:07,370 --> 00:29:11,180
some common issues and bugs for example

00:29:09,710 --> 00:29:12,470
payment process saying that bug had been

00:29:11,180 --> 00:29:14,150
around for ages and we'd actually tried

00:29:12,470 --> 00:29:15,650
to fix it like four or five times

00:29:14,150 --> 00:29:17,720
it was another bug where people got

00:29:15,650 --> 00:29:19,550
stuck in the queue so they'd be in the

00:29:17,720 --> 00:29:21,140
queue for say two hours then we'd run

00:29:19,550 --> 00:29:23,030
out a ticket so we closed the queue and

00:29:21,140 --> 00:29:24,470
that should kick everyone out but for

00:29:23,030 --> 00:29:26,120
like again one in a few thousand users

00:29:24,470 --> 00:29:27,770
they would be stuck in this queue there

00:29:26,120 --> 00:29:29,960
was a poor person who spent eight hours

00:29:27,770 --> 00:29:31,580
at their laptop in a queue for tickets

00:29:29,960 --> 00:29:33,620
for an event even though it sold out

00:29:31,580 --> 00:29:35,210
after like an hour things like that so

00:29:33,620 --> 00:29:36,620
although it did work that were there

00:29:35,210 --> 00:29:38,270
were outstanding issues we need to fix

00:29:36,620 --> 00:29:39,590
and also we're in a period of iterating

00:29:38,270 --> 00:29:41,810
a lot on the product and adding a lot of

00:29:39,590 --> 00:29:43,550
new features as well if it just worked

00:29:41,810 --> 00:29:45,440
we probably wouldn't have done such an

00:29:43,550 --> 00:29:47,270
aggressive migration so the next

00:29:45,440 --> 00:29:49,490
question is swapping tiny bits is great

00:29:47,270 --> 00:29:51,290
but you're loading both frameworks what

00:29:49,490 --> 00:29:52,640
about performance yeah that is the

00:29:51,290 --> 00:29:54,590
downsides of this approach is you do

00:29:52,640 --> 00:29:56,270
have to load both frameworks in for us

00:29:54,590 --> 00:29:58,520
we decided that penalty wasn't really

00:29:56,270 --> 00:30:00,050
worth it because we happen to have quite

00:29:58,520 --> 00:30:02,300
a big application already and we knew

00:30:00,050 --> 00:30:03,680
performance wasn't great but we felt

00:30:02,300 --> 00:30:05,330
that with the code in the situation

00:30:03,680 --> 00:30:06,710
there was limited kind of impact we

00:30:05,330 --> 00:30:08,330
could have on the performance with it in

00:30:06,710 --> 00:30:11,330
its current state so we're willing to

00:30:08,330 --> 00:30:12,770
pay that cost to add react in to get the

00:30:11,330 --> 00:30:14,270
benefits later on but that is certainly

00:30:12,770 --> 00:30:16,250
a consideration when it comes to like

00:30:14,270 --> 00:30:18,710
big bank release or iterative approach

00:30:16,250 --> 00:30:21,710
and the last question is any reason for

00:30:18,710 --> 00:30:23,480
using react instead of angular or - for

00:30:21,710 --> 00:30:24,830
us it was just that not many people in

00:30:23,480 --> 00:30:27,290
the team myself included was super

00:30:24,830 --> 00:30:29,030
familiar with angular - not many of us I

00:30:27,290 --> 00:30:30,980
was pretty familiar with angular 1 we

00:30:29,030 --> 00:30:32,210
were all familiar with react Songkick

00:30:30,980 --> 00:30:34,190
actually had another product that had

00:30:32,210 --> 00:30:35,540
been built in react recently so there

00:30:34,190 --> 00:30:37,100
was much more knowledge of react and

00:30:35,540 --> 00:30:39,050
that was really the prime factor there

00:30:37,100 --> 00:30:41,210
was no one on the team like really who

00:30:39,050 --> 00:30:43,370
knew and was evangelizing angular - was

00:30:41,210 --> 00:30:46,190
there a lot who knew react Jake thank

00:30:43,370 --> 00:30:48,250
you very much thank you thank you

00:30:46,190 --> 00:30:48,250
you

00:30:54,029 --> 00:30:56,090

YouTube URL: https://www.youtube.com/watch?v=712LBDux1qs


