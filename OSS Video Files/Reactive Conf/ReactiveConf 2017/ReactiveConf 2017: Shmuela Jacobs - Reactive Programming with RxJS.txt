Title: ReactiveConf 2017: Shmuela Jacobs - Reactive Programming with RxJS
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Discovery stage

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:14,670 --> 00:00:23,779
okay hey everybody hey let's talk of the

00:00:21,150 --> 00:00:27,720
reactive conference I'm really excited

00:00:23,779 --> 00:00:32,930
how are you doing how was the conference

00:00:27,720 --> 00:00:38,490
was it good yeah I bet you enjoyed I

00:00:32,930 --> 00:00:43,680
heard some really brilliant talks and it

00:00:38,490 --> 00:00:47,039
was a lot of fun for me so I'm going to

00:00:43,680 --> 00:00:49,440
talk a little bit more about reactive

00:00:47,039 --> 00:00:52,829
programming like you've probably heard

00:00:49,440 --> 00:00:57,750
throughout the conference and with our

00:00:52,829 --> 00:01:00,090
exchanges and because I focus on angular

00:00:57,750 --> 00:01:04,230
then we're going to see some examples

00:01:00,090 --> 00:01:07,140
with angular because it really it has

00:01:04,230 --> 00:01:10,950
great features and it really promotes

00:01:07,140 --> 00:01:14,090
the use of rxjs in your applications so

00:01:10,950 --> 00:01:19,079
just a little bit about myself

00:01:14,090 --> 00:01:22,079
so um front-end developer consultant and

00:01:19,079 --> 00:01:25,470
trainer focusing in angular in the past

00:01:22,079 --> 00:01:30,200
few years a few things that I do in my

00:01:25,470 --> 00:01:30,200
spare time is I organize the antic girls

00:01:30,320 --> 00:01:35,909
organization and the founder of ng girls

00:01:33,329 --> 00:01:37,200
we have workshops which are free for

00:01:35,909 --> 00:01:41,939
women who are beginners in the

00:01:37,200 --> 00:01:44,130
programming world and we of course a do

00:01:41,939 --> 00:01:49,140
this with angular we also think about

00:01:44,130 --> 00:01:51,600
more events for more advanced women and

00:01:49,140 --> 00:01:55,790
not only women also we want to increase

00:01:51,600 --> 00:01:59,189
the diversity in all aspects in the

00:01:55,790 --> 00:02:01,020
programming world so we're having

00:01:59,189 --> 00:02:03,990
workshops all around the world all the

00:02:01,020 --> 00:02:07,580
time in some of them I'm present in some

00:02:03,990 --> 00:02:12,150
other workshops I'm just helping out

00:02:07,580 --> 00:02:14,910
remotely giving the resources it's all

00:02:12,150 --> 00:02:18,480
open source so if you're if you want to

00:02:14,910 --> 00:02:21,120
organize a workshop like this or some

00:02:18,480 --> 00:02:25,410
kind of an event with ng girls so just

00:02:21,120 --> 00:02:27,500
come talk to me I'd love that another

00:02:25,410 --> 00:02:31,370
thing that I do

00:02:27,500 --> 00:02:36,830
time is I organized the angular Knights

00:02:31,370 --> 00:02:40,120
meetup group in Israel we're learning

00:02:36,830 --> 00:02:44,570
angular in its circle system by doing by

00:02:40,120 --> 00:02:50,480
working workshops and so on okay enough

00:02:44,570 --> 00:02:53,510
about that let's dive into reactive okay

00:02:50,480 --> 00:02:56,450
so I'm gonna give a little bit of

00:02:53,510 --> 00:02:59,780
overview of some things that you can do

00:02:56,450 --> 00:03:03,470
with our XJS we can't dive really deeply

00:02:59,780 --> 00:03:05,630
into this in half an hour and also be

00:03:03,470 --> 00:03:09,290
the end of the conference the end of the

00:03:05,630 --> 00:03:11,900
day you probably have already a lot on

00:03:09,290 --> 00:03:19,600
your mind and a lot of drinks say that

00:03:11,900 --> 00:03:24,920
you've been drinking maybe right so

00:03:19,600 --> 00:03:30,860
let's start with the way I like to think

00:03:24,920 --> 00:03:34,370
about reactive programming what I what

00:03:30,860 --> 00:03:39,790
it makes me think about do you remember

00:03:34,370 --> 00:03:47,450
this who is familiar with this thing oh

00:03:39,790 --> 00:03:51,160
my god yeah so The Incredible Machine I

00:03:47,450 --> 00:03:53,989
used to play there's a little girl and

00:03:51,160 --> 00:03:59,890
just a few months ago I realized that

00:03:53,989 --> 00:04:05,480
this was actually kind of like kind of

00:03:59,890 --> 00:04:08,060
and that I was building just you know

00:04:05,480 --> 00:04:11,060
building systems that you have some kind

00:04:08,060 --> 00:04:13,280
of a chain reaction but there is a

00:04:11,060 --> 00:04:15,460
difference here because in the

00:04:13,280 --> 00:04:18,640
Incredible Machine

00:04:15,460 --> 00:04:21,970
each time there's an operation that's

00:04:18,640 --> 00:04:25,080
doing something then it's doing it once

00:04:21,970 --> 00:04:28,780
and you have to restart the whole system

00:04:25,080 --> 00:04:30,910
if you want to do it again right okay

00:04:28,780 --> 00:04:34,030
but it there is some kind of a chain

00:04:30,910 --> 00:04:38,790
reaction also like the domino that we

00:04:34,030 --> 00:04:48,280
saw before so maybe a better example is

00:04:38,790 --> 00:05:01,030
this do you know this one who's familiar

00:04:48,280 --> 00:05:05,320
with this movie so yeah really great

00:05:01,030 --> 00:05:08,590
movie called modern times we see Charlie

00:05:05,320 --> 00:05:11,230
Chaplin here and he's really doing the

00:05:08,590 --> 00:05:19,060
same operation he's like an operator is

00:05:11,230 --> 00:05:22,960
getting a stream of events and and do

00:05:19,060 --> 00:05:33,430
the same operation each time without

00:05:22,960 --> 00:05:37,600
having anything so this is a great scene

00:05:33,430 --> 00:05:53,140
from a great movie so if you're in if

00:05:37,600 --> 00:05:56,770
you I just watch it again like serious

00:05:53,140 --> 00:05:59,530
so I'm talking about we have the links

00:05:56,770 --> 00:06:02,530
to the youtubes here if you want when I

00:05:59,530 --> 00:06:06,340
publish this presentation so we're

00:06:02,530 --> 00:06:09,910
talking about rxjs with angular so let's

00:06:06,340 --> 00:06:15,850
see some use cases and what what it

00:06:09,910 --> 00:06:18,160
means okay so our XJ is functional

00:06:15,850 --> 00:06:21,490
programming you think about everything

00:06:18,160 --> 00:06:23,860
about the world as an event stream so

00:06:21,490 --> 00:06:25,900
you get events one after another and

00:06:23,860 --> 00:06:28,510
after another sometimes you just get one

00:06:25,900 --> 00:06:28,780
event and you finish your job so that's

00:06:28,510 --> 00:06:33,880
all

00:06:28,780 --> 00:06:36,700
okay so HTTP calls are events when the

00:06:33,880 --> 00:06:42,910
event comes it's usually it's a

00:06:36,700 --> 00:06:45,639
synchronous event so we have HTTP calls

00:06:42,910 --> 00:06:47,650
so when the response comes and you can

00:06:45,639 --> 00:06:51,430
do something with it and change some

00:06:47,650 --> 00:06:53,050
reactions maybe even have another HTTP

00:06:51,430 --> 00:06:56,070
call chain to it

00:06:53,050 --> 00:06:58,870
WebSockets so WebSockets are direct

00:06:56,070 --> 00:07:01,960
communication with the server so of

00:06:58,870 --> 00:07:05,790
course to get streams of events Dom

00:07:01,960 --> 00:07:09,760
events a user does something clicks

00:07:05,790 --> 00:07:11,910
Mouse moves and so on so these are also

00:07:09,760 --> 00:07:16,030
things that you can stream into rxjs

00:07:11,910 --> 00:07:21,040
into observables animations also there

00:07:16,030 --> 00:07:25,120
is a there's a great lecture I think I

00:07:21,040 --> 00:07:30,000
have a link maybe maybe in the next

00:07:25,120 --> 00:07:33,040
slides Ben Lesh who is one of the

00:07:30,000 --> 00:07:36,370
developers of rxjs and he's also a

00:07:33,040 --> 00:07:39,460
speaker that speaks in lots of events

00:07:36,370 --> 00:07:45,270
all around the world he recently started

00:07:39,460 --> 00:07:45,270
talking about animations with our Xperia

00:07:46,770 --> 00:07:52,720
some people tell me that they start

00:07:49,390 --> 00:07:56,229
seeing events and observables like all

00:07:52,720 --> 00:07:59,950
around them so I think I also started

00:07:56,229 --> 00:08:02,740
doing this like my dog barks and her

00:07:59,950 --> 00:08:07,930
extreme of barks isn't in the stream of

00:08:02,740 --> 00:08:13,870
events and so on you start getting too

00:08:07,930 --> 00:08:18,160
much into this at one point in angular

00:08:13,870 --> 00:08:22,000
you've got a lot going on around rxjs

00:08:18,160 --> 00:08:25,930
and observables so routing is done with

00:08:22,000 --> 00:08:28,090
observable and we'll see that HTTP or

00:08:25,930 --> 00:08:34,120
the new implementation of HTTP which is

00:08:28,090 --> 00:08:37,599
HTTP client also and the response the

00:08:34,120 --> 00:08:41,560
default response is an observable you

00:08:37,599 --> 00:08:42,580
can change it to promise if you're more

00:08:41,560 --> 00:08:44,950
comfortable with

00:08:42,580 --> 00:08:49,390
but there are many advantages for

00:08:44,950 --> 00:08:54,000
observables so try using them before you

00:08:49,390 --> 00:09:02,800
switch back to promises I'm using a

00:08:54,000 --> 00:09:05,850
server let's say a lot firebase so I'm

00:09:02,800 --> 00:09:09,580
using also the library angularfire 2

00:09:05,850 --> 00:09:13,450
which is a special library built for

00:09:09,580 --> 00:09:15,790
angular and firebase which connects the

00:09:13,450 --> 00:09:21,190
the stream of events we have in firebase

00:09:15,790 --> 00:09:25,120
a real time database and and the status

00:09:21,190 --> 00:09:27,400
of the of the user which is also can

00:09:25,120 --> 00:09:30,550
also change all the time because the

00:09:27,400 --> 00:09:32,740
user logs in locks out maybe changes the

00:09:30,550 --> 00:09:35,680
credentials or something

00:09:32,740 --> 00:09:36,490
so all these streams they come with a

00:09:35,680 --> 00:09:43,020
WebSocket

00:09:36,490 --> 00:09:46,210
and they're dealt by angularfire 2 as

00:09:43,020 --> 00:09:52,330
observables so you can get them and

00:09:46,210 --> 00:09:55,450
chain the your actions to that and

00:09:52,330 --> 00:09:59,470
another thing about angularfire 2 if you

00:09:55,450 --> 00:10:02,110
want to query your data then your

00:09:59,470 --> 00:10:05,790
queries the Krays themselves that come

00:10:02,110 --> 00:10:09,640
from the client-side they also

00:10:05,790 --> 00:10:11,680
implemented them as observables so if

00:10:09,640 --> 00:10:13,960
you for example want the user to be able

00:10:11,680 --> 00:10:16,870
to change the number of results that you

00:10:13,960 --> 00:10:22,180
get from the database then the number of

00:10:16,870 --> 00:10:25,260
results will be an event coming in to an

00:10:22,180 --> 00:10:31,210
observable emitted in the observable

00:10:25,260 --> 00:10:35,200
observable and if you like the redux

00:10:31,210 --> 00:10:39,010
pattern for managing your your data your

00:10:35,200 --> 00:10:43,210
data flow then in angular we have ng rx

00:10:39,010 --> 00:10:45,700
which is a whole implementation of the

00:10:43,210 --> 00:10:48,820
Redux pattern as observables and it

00:10:45,700 --> 00:10:51,480
takes advantage again of everything that

00:10:48,820 --> 00:10:56,640
angular has to give you for a a

00:10:51,480 --> 00:11:02,050
observables with our exchange so what is

00:10:56,640 --> 00:11:05,020
observables we have in the observer

00:11:02,050 --> 00:11:07,920
pattern it's not something very new

00:11:05,020 --> 00:11:11,530
we've had it for a long time and

00:11:07,920 --> 00:11:20,590
basically well this is my dog and she

00:11:11,530 --> 00:11:26,350
observes broadcast so there is a stream

00:11:20,590 --> 00:11:29,290
and you subscribe to it you a open this

00:11:26,350 --> 00:11:33,340
YouTube view or you turn on the

00:11:29,290 --> 00:11:35,860
television and then you this is your

00:11:33,340 --> 00:11:38,110
subscription to the data to the stream

00:11:35,860 --> 00:11:41,020
and then you do something with it so

00:11:38,110 --> 00:11:44,800
what my dog is doing with it is just

00:11:41,020 --> 00:11:48,340
watching very interestingly and you know

00:11:44,800 --> 00:11:52,480
maybe she's also doing some kind of

00:11:48,340 --> 00:11:57,000
switch map which takes these this stream

00:11:52,480 --> 00:12:04,210
and switches it to her dreams at night

00:11:57,000 --> 00:12:06,820
maybe so just an abstraction of what's

00:12:04,210 --> 00:12:11,020
going on in this picture we have the

00:12:06,820 --> 00:12:15,700
subject which is the source of the event

00:12:11,020 --> 00:12:20,200
and you can create your own subjects the

00:12:15,700 --> 00:12:22,960
the subjects are what you can control to

00:12:20,200 --> 00:12:25,030
emit events but sometimes you just let

00:12:22,960 --> 00:12:27,340
something else emit the events so this

00:12:25,030 --> 00:12:31,090
is the subject then it is wrapped within

00:12:27,340 --> 00:12:34,030
our observable which you can't make it

00:12:31,090 --> 00:12:36,100
emit anything ok you can't control it

00:12:34,030 --> 00:12:39,490
you just subscribe to it you just listen

00:12:36,100 --> 00:12:44,170
to the events from there ok and you have

00:12:39,490 --> 00:12:46,960
the observer the dog and the

00:12:44,170 --> 00:12:48,450
subscription so only as long as there

00:12:46,960 --> 00:12:53,020
are subscriptions

00:12:48,450 --> 00:12:55,990
then the observable matters the the

00:12:53,020 --> 00:12:59,350
subject matters its events are doing

00:12:55,990 --> 00:13:01,690
something and when you switch off the

00:12:59,350 --> 00:13:03,790
television then you don't get the data

00:13:01,690 --> 00:13:06,089
and you don't pass on the data to the

00:13:03,790 --> 00:13:06,089
dog

00:13:07,340 --> 00:13:14,420
okay so this is how you would do this

00:13:10,520 --> 00:13:19,260
encode this in this case it's a angular

00:13:14,420 --> 00:13:23,580
component now just to tell you ahead of

00:13:19,260 --> 00:13:26,250
time this is not exactly the best

00:13:23,580 --> 00:13:29,420
practice and the next slide will be the

00:13:26,250 --> 00:13:34,310
best practice because angular has a

00:13:29,420 --> 00:13:38,400
special ways to deal with observables

00:13:34,310 --> 00:13:45,150
but this is really the basic so you have

00:13:38,400 --> 00:13:47,940
here can you see the pointer okay so we

00:13:45,150 --> 00:13:51,030
inject the user service into the

00:13:47,940 --> 00:13:57,240
component and then we want to get the

00:13:51,030 --> 00:13:59,640
user name in the template okay so a good

00:13:57,240 --> 00:14:02,780
practice one of the best practice is to

00:13:59,640 --> 00:14:06,210
really deal with data deal with

00:14:02,780 --> 00:14:09,930
initializing the component the data of

00:14:06,210 --> 00:14:14,870
the component within the ng on it method

00:14:09,930 --> 00:14:18,740
and ng on init method which is a

00:14:14,870 --> 00:14:22,440
lifecycle method in angular components

00:14:18,740 --> 00:14:27,330
okay so so far so good what we do here

00:14:22,440 --> 00:14:31,110
we have a subscription we have let's

00:14:27,330 --> 00:14:34,980
talk about this in a moment we go to the

00:14:31,110 --> 00:14:37,350
user service and we have their the user

00:14:34,980 --> 00:14:39,540
observable which we're getting from

00:14:37,350 --> 00:14:44,910
somewhere else we're not getting into

00:14:39,540 --> 00:14:50,070
the service at the moment and also a

00:14:44,910 --> 00:14:53,640
good practice is to put a dollar sign in

00:14:50,070 --> 00:14:56,520
the names of the observables so that we

00:14:53,640 --> 00:15:01,890
will know when just when we look at them

00:14:56,520 --> 00:15:03,840
but these are observables so user dollar

00:15:01,890 --> 00:15:08,430
sign and observable that we get from

00:15:03,840 --> 00:15:10,650
somewhere and when we subscribe to it we

00:15:08,430 --> 00:15:13,200
can do something with this the event

00:15:10,650 --> 00:15:15,210
that we're getting so every time that

00:15:13,200 --> 00:15:18,780
the user changes or the user data

00:15:15,210 --> 00:15:20,550
changes then we can do something and in

00:15:18,780 --> 00:15:26,280
this case we just

00:15:20,550 --> 00:15:29,810
copy it to the local a user that we have

00:15:26,280 --> 00:15:33,540
on this component and then we can

00:15:29,810 --> 00:15:38,010
display it in our template now this

00:15:33,540 --> 00:15:42,060
notation with the question mark it tells

00:15:38,010 --> 00:15:46,290
the template the interpolation here that

00:15:42,060 --> 00:15:50,220
only fuser exists then go and take its

00:15:46,290 --> 00:15:52,230
name the name property that you have on

00:15:50,220 --> 00:15:54,540
the user because if you don't do that

00:15:52,230 --> 00:15:58,260
and user is null or undefined then you

00:15:54,540 --> 00:16:00,660
will get an error so this is kind of I

00:15:58,260 --> 00:16:04,890
remember this syntax from CoffeeScript

00:16:00,660 --> 00:16:10,200
oh here's his used CoffeeScript yeah

00:16:04,890 --> 00:16:13,560
okay so that was a really good idea

00:16:10,200 --> 00:16:16,860
there and I like this notation okay so

00:16:13,560 --> 00:16:19,500
you can do this with angular okay now

00:16:16,860 --> 00:16:21,990
when you subscribe to the user like I

00:16:19,500 --> 00:16:24,180
said before if you don't subscribe then

00:16:21,990 --> 00:16:28,770
nothing happens then the user can change

00:16:24,180 --> 00:16:32,340
the can you know log in log out and so

00:16:28,770 --> 00:16:34,950
on but nothing really will happen no one

00:16:32,340 --> 00:16:37,050
will listen to this only once you have

00:16:34,950 --> 00:16:42,170
at least one subscription and the

00:16:37,050 --> 00:16:46,680
observable has a saves all its

00:16:42,170 --> 00:16:48,660
subscriptions and no counts them and so

00:16:46,680 --> 00:16:52,530
as long as there at least one

00:16:48,660 --> 00:16:53,600
subscription then you get the data and

00:16:52,530 --> 00:16:57,510
do something with it

00:16:53,600 --> 00:17:01,980
okay but the thing is that this

00:16:57,510 --> 00:17:07,490
subscription will keep living until you

00:17:01,980 --> 00:17:11,700
unsubscribe from it so it takes a it

00:17:07,490 --> 00:17:14,790
takes up your memory it keeps on working

00:17:11,700 --> 00:17:18,990
in the background and if this component

00:17:14,790 --> 00:17:24,540
is destroyed then still the subscription

00:17:18,990 --> 00:17:34,529
works it still tries to do it tries to

00:17:24,540 --> 00:17:38,289
do this thing to to copy the data

00:17:34,529 --> 00:17:40,539
so what we want to do is when the when

00:17:38,289 --> 00:17:42,789
the component is destroyed to

00:17:40,539 --> 00:17:46,390
unsubscribe so when you subscribe you

00:17:42,789 --> 00:17:48,909
get a reference to the subscription so

00:17:46,390 --> 00:17:51,870
we save that and on another hook of

00:17:48,909 --> 00:17:55,269
angular ng on destroy we just call

00:17:51,870 --> 00:17:59,980
unsubscribe on the subscription okay so

00:17:55,269 --> 00:18:03,269
if you do have to use subscribe and you

00:17:59,980 --> 00:18:06,490
know that it's in a place that is a

00:18:03,269 --> 00:18:11,289
temporary in your application then

00:18:06,490 --> 00:18:13,570
always remember to clean up in the when

00:18:11,289 --> 00:18:18,600
when this place is destroyed if it's a

00:18:13,570 --> 00:18:22,600
component usually it's a component okay

00:18:18,600 --> 00:18:24,940
so this is a more a better way in the

00:18:22,600 --> 00:18:26,919
angular way because angular introduce is

00:18:24,940 --> 00:18:31,870
something that's called the a sync pipe

00:18:26,919 --> 00:18:34,809
and the I think pipe is a built to deal

00:18:31,870 --> 00:18:39,250
exactly with this with observables with

00:18:34,809 --> 00:18:42,639
a sync data so it manages the

00:18:39,250 --> 00:18:46,529
subscription it subscribes whenever it's

00:18:42,639 --> 00:18:49,269
needed when the component is created it

00:18:46,529 --> 00:18:55,600
unsubscribes automatically for you

00:18:49,269 --> 00:18:58,990
when the component is destroyed so again

00:18:55,600 --> 00:19:03,340
on in it we're just grabbing a reference

00:18:58,990 --> 00:19:07,419
to the user observable and we use it in

00:19:03,340 --> 00:19:12,220
the template we pass the a sync pipe and

00:19:07,419 --> 00:19:15,159
then we do the same thing we see like it

00:19:12,220 --> 00:19:17,320
it's already takes out the data it

00:19:15,159 --> 00:19:21,460
doesn't display the observable it

00:19:17,320 --> 00:19:23,049
displays the the event that you get the

00:19:21,460 --> 00:19:26,230
data that you get in the in the

00:19:23,049 --> 00:19:29,620
observable and then it takes out the

00:19:26,230 --> 00:19:34,210
name out of that okay so this is the

00:19:29,620 --> 00:19:37,330
better way to do this now in 99% of

00:19:34,210 --> 00:19:41,409
cases this is the day the way you'll do

00:19:37,330 --> 00:19:45,270
this another example that we have here

00:19:41,409 --> 00:19:48,650
is for getting the recipe observable and

00:19:45,270 --> 00:19:52,350
in this case

00:19:48,650 --> 00:19:57,260
the component might get and a recipe ID

00:19:52,350 --> 00:20:02,160
from the parameters or from the user's

00:19:57,260 --> 00:20:05,100
action or something like that so you

00:20:02,160 --> 00:20:08,280
might need it an entry on in it or maybe

00:20:05,100 --> 00:20:11,340
you'll have this line somewhere else in

00:20:08,280 --> 00:20:16,050
a different method that is reacting to

00:20:11,340 --> 00:20:19,290
the users actions but every time here

00:20:16,050 --> 00:20:23,790
you get a new observable actually into

00:20:19,290 --> 00:20:25,800
this recipe you you get a copy a

00:20:23,790 --> 00:20:28,680
reference of a different observable and

00:20:25,800 --> 00:20:31,680
that's okay because the a sync type also

00:20:28,680 --> 00:20:34,890
deals with that so when it sees that the

00:20:31,680 --> 00:20:37,380
all-day observable is not referenced

00:20:34,890 --> 00:20:39,810
anymore then it also unsubscribes to it

00:20:37,380 --> 00:20:40,770
and subscribes to the new one so this is

00:20:39,810 --> 00:20:45,390
what we have here

00:20:40,770 --> 00:20:51,080
and there's another little trick here if

00:20:45,390 --> 00:20:56,160
for example we want to get multiple

00:20:51,080 --> 00:20:59,300
members of the recipe data then we can

00:20:56,160 --> 00:21:06,840
wrap the relevant code with entries and

00:20:59,300 --> 00:21:11,550
then a let recipe get the copy of the

00:21:06,840 --> 00:21:15,540
data and then we can just go directly to

00:21:11,550 --> 00:21:18,950
recipe okay so this is recipe data

00:21:15,540 --> 00:21:22,410
without the observable and we can just

00:21:18,950 --> 00:21:24,870
go and grab recipe ID and recipe title

00:21:22,410 --> 00:21:28,170
and so on instead of doing recipe

00:21:24,870 --> 00:21:31,290
observable as think that ID recipe

00:21:28,170 --> 00:21:32,040
observable I think that title every time

00:21:31,290 --> 00:21:37,250
okay

00:21:32,040 --> 00:21:37,250
so nice little trick again with angular

00:21:38,750 --> 00:21:50,220
okay so we have operators in in rxjs of

00:21:47,940 --> 00:21:52,260
course thanks J's is mostly operators

00:21:50,220 --> 00:21:57,800
they're like more than 60 different

00:21:52,260 --> 00:22:01,230
operators to to manipulate your data and

00:21:57,800 --> 00:22:04,470
what we what we what we see here

00:22:01,230 --> 00:22:08,130
is getting again well the recipe with

00:22:04,470 --> 00:22:11,760
its ad and doing something and returning

00:22:08,130 --> 00:22:16,460
something else or modify the data that

00:22:11,760 --> 00:22:22,580
we that we get with the event okay so

00:22:16,460 --> 00:22:27,059
HTTP here I'm using HTTP client service

00:22:22,580 --> 00:22:30,750
grabbing the the item that I need with

00:22:27,059 --> 00:22:35,520
the idea that I need but what it returns

00:22:30,750 --> 00:22:39,450
back the result is an object of data but

00:22:35,520 --> 00:22:42,120
I need the ID inside it okay it doesn't

00:22:39,450 --> 00:22:45,150
give me the ID inside the object but I

00:22:42,120 --> 00:22:48,299
have the ID already before because I I

00:22:45,150 --> 00:22:51,090
called it with the ID okay so maybe I

00:22:48,299 --> 00:22:54,929
want a list of items I want to preserve

00:22:51,090 --> 00:22:58,490
the ID within the object that later on

00:22:54,929 --> 00:23:04,169
I'll may be displayed in the component

00:22:58,490 --> 00:23:08,850
so one very very useful of the operator

00:23:04,169 --> 00:23:13,980
is map and it takes whatever you got

00:23:08,850 --> 00:23:19,049
from the event and then you can do stuff

00:23:13,980 --> 00:23:21,419
with it and return new data so in this

00:23:19,049 --> 00:23:24,630
case we return a new object that

00:23:21,419 --> 00:23:30,750
actually copies the result object and

00:23:24,630 --> 00:23:38,040
adds the ID more useful popular

00:23:30,750 --> 00:23:40,440
operators so in this example we have

00:23:38,040 --> 00:23:43,620
some kind of an observable which

00:23:40,440 --> 00:23:47,400
represents well we don't see the laser

00:23:43,620 --> 00:23:51,540
here that gets numbers a stream of

00:23:47,400 --> 00:23:55,799
numbers and the first operator start

00:23:51,540 --> 00:23:58,280
with it just gives you the first value

00:23:55,799 --> 00:24:03,179
so that you can do something with it

00:23:58,280 --> 00:24:05,070
there in case you're waiting for a like

00:24:03,179 --> 00:24:08,669
if the first value doesn't come right

00:24:05,070 --> 00:24:11,309
away you can filter the results so it

00:24:08,669 --> 00:24:14,610
will not continue the stream if it

00:24:11,309 --> 00:24:19,190
doesn't match the the filter

00:24:14,610 --> 00:24:23,010
scan is like reduce in regular

00:24:19,190 --> 00:24:27,320
synchronous JavaScript so you can

00:24:23,010 --> 00:24:31,500
collect the results the events that you

00:24:27,320 --> 00:24:33,600
had before and do something with that so

00:24:31,500 --> 00:24:36,090
start with really helps with that

00:24:33,600 --> 00:24:39,029
because in reduce we always have the

00:24:36,090 --> 00:24:42,570
initial value right and this is the way

00:24:39,029 --> 00:24:46,019
to give an initial value to work on in

00:24:42,570 --> 00:24:48,809
observables and do is also very very

00:24:46,019 --> 00:24:53,519
useful it doesn't have any side effects

00:24:48,809 --> 00:24:57,630
it's it doesn't it passes whatever the

00:24:53,519 --> 00:25:00,210
stream passed to it so you can't return

00:24:57,630 --> 00:25:03,360
something else you just do stuff so you

00:25:00,210 --> 00:25:05,279
can debug with it or you can route with

00:25:03,360 --> 00:25:09,510
it we'll see another example in a moment

00:25:05,279 --> 00:25:15,380
now in favor of tree-shaking you have to

00:25:09,510 --> 00:25:15,380
import every operator that you use

00:25:15,860 --> 00:25:27,809
separately and it just adds it to the

00:25:21,000 --> 00:25:31,649
operators okay so switch map is also a

00:25:27,809 --> 00:25:37,820
very powerful operator that you're gonna

00:25:31,649 --> 00:25:42,090
use a lot a lot and in this example we

00:25:37,820 --> 00:25:43,919
again listen to the user observable in

00:25:42,090 --> 00:25:46,320
this case we're connected to firebase

00:25:43,919 --> 00:25:49,919
and we're using to the authentication

00:25:46,320 --> 00:25:54,330
state to the true firebase and we want

00:25:49,919 --> 00:25:56,279
to have to get the user data from the

00:25:54,330 --> 00:26:00,779
database because we have additional data

00:25:56,279 --> 00:26:04,830
like favorite color or other things so

00:26:00,779 --> 00:26:07,549
once we get value of the user reduce

00:26:04,830 --> 00:26:10,529
which map which always takes the last

00:26:07,549 --> 00:26:12,990
value of the loop of the user and does

00:26:10,529 --> 00:26:14,850
something with that and returns a new

00:26:12,990 --> 00:26:20,510
observable not of value but an

00:26:14,850 --> 00:26:25,889
observable and so here we're returning

00:26:20,510 --> 00:26:26,890
the reference the value that we get from

00:26:25,889 --> 00:26:29,650
the

00:26:26,890 --> 00:26:34,510
database where we access the user

00:26:29,650 --> 00:26:38,010
details we got the a ID from the user

00:26:34,510 --> 00:26:43,570
and well this is just the syntax of

00:26:38,010 --> 00:26:50,200
angularfire 5a for grabbing angularfire

00:26:43,570 --> 00:26:54,220
to version 5 sorry for having the the

00:26:50,200 --> 00:26:56,830
data from the real-time database and you

00:26:54,220 --> 00:27:00,220
can check whether the user exists

00:26:56,830 --> 00:27:03,430
because if the user is logged out then

00:27:00,220 --> 00:27:06,460
it will return null and then we can

00:27:03,430 --> 00:27:09,520
return an observable of null in the end

00:27:06,460 --> 00:27:12,700
ok so we don't have any user data but

00:27:09,520 --> 00:27:15,520
that also stresses the fact that switch

00:27:12,700 --> 00:27:21,640
map returns an observable and this

00:27:15,520 --> 00:27:25,120
observable is then also a gives you the

00:27:21,640 --> 00:27:28,090
events the data that you need ok I've

00:27:25,120 --> 00:27:31,000
got a lot more examples here and not so

00:27:28,090 --> 00:27:33,130
much time so let's try to go quickly

00:27:31,000 --> 00:27:35,740
over what I've got here

00:27:33,130 --> 00:27:38,110
routing parameters when you route with

00:27:35,740 --> 00:27:45,210
the angular router then the parameters

00:27:38,110 --> 00:27:48,460
are a stream of observables so ok so the

00:27:45,210 --> 00:27:51,970
parameters and for each parameter is 4

00:27:48,460 --> 00:27:55,690
so that's also a method an operator of

00:27:51,970 --> 00:27:58,870
observables you do something for example

00:27:55,690 --> 00:28:05,620
you grab the data that you need from the

00:27:58,870 --> 00:28:09,610
component more in routing so a lot about

00:28:05,620 --> 00:28:12,220
the routing the activated route this is

00:28:09,610 --> 00:28:14,770
just one example of something you have

00:28:12,220 --> 00:28:18,580
in the router that gives you that works

00:28:14,770 --> 00:28:20,710
with observables ok so the URL segments

00:28:18,580 --> 00:28:24,360
the parameters like we saw so the query

00:28:20,710 --> 00:28:30,220
parameters that can change and so on so

00:28:24,360 --> 00:28:33,310
check out how to the router how to use

00:28:30,220 --> 00:28:36,670
this what kind of data you're getting

00:28:33,310 --> 00:28:40,230
with these observables the guards the

00:28:36,670 --> 00:28:43,740
route guards are also well you can pass

00:28:40,230 --> 00:28:46,320
boolean tooth to the guard to say

00:28:43,740 --> 00:28:48,900
whether a the routing is allowed or not

00:28:46,320 --> 00:28:51,600
you can pass a promise and you can also

00:28:48,900 --> 00:28:55,230
pass an observable and in this example

00:28:51,600 --> 00:28:58,410
we just check if the user is authorized

00:28:55,230 --> 00:29:02,549
to get into this route for example the

00:28:58,410 --> 00:29:06,630
user is an admin so every time we try

00:29:02,549 --> 00:29:12,080
this the router guard will will check

00:29:06,630 --> 00:29:17,250
once if this user is authorized it will

00:29:12,080 --> 00:29:20,730
perform the the can activate method once

00:29:17,250 --> 00:29:23,669
every time the users try to route their

00:29:20,730 --> 00:29:26,520
so we just need the first result take

00:29:23,669 --> 00:29:29,400
one and then we map it because we want

00:29:26,520 --> 00:29:33,630
to take from the user only the user is

00:29:29,400 --> 00:29:36,750
admin and if it's true then let let them

00:29:33,630 --> 00:29:40,980
go to this route and if not then you can

00:29:36,750 --> 00:29:43,559
navigate and here we're using the do

00:29:40,980 --> 00:29:48,299
operator then the do operator just

00:29:43,559 --> 00:29:51,090
navigates to another route okay

00:29:48,299 --> 00:29:55,620
these are more route guards that you can

00:29:51,090 --> 00:29:57,450
use which also take observables can

00:29:55,620 --> 00:30:00,990
activate connective a child can

00:29:57,450 --> 00:30:02,970
deactivate a route resolve resolve the

00:30:00,990 --> 00:30:06,780
data that you need for this route can

00:30:02,970 --> 00:30:11,690
load and just check it out really

00:30:06,780 --> 00:30:14,250
powerful stuff I have here an example of

00:30:11,690 --> 00:30:17,010
event that I got from another library

00:30:14,250 --> 00:30:19,380
that isn't angular it's actually

00:30:17,010 --> 00:30:21,900
something with backbone that they used

00:30:19,380 --> 00:30:25,410
within an angular application so

00:30:21,900 --> 00:30:28,799
whenever I get event there for some type

00:30:25,410 --> 00:30:34,940
of event I want to open a dialog for the

00:30:28,799 --> 00:30:36,210
user and the dialog is is displayed with

00:30:34,940 --> 00:30:43,230
material

00:30:36,210 --> 00:30:46,500
it was angular material so so I don't

00:30:43,230 --> 00:30:51,090
show the callback for this event if that

00:30:46,500 --> 00:30:52,740
comes from this library but this is well

00:30:51,090 --> 00:30:53,700
this is the callback I don't show the

00:30:52,740 --> 00:30:55,860
use of the call

00:30:53,700 --> 00:30:58,860
back but the callback is create dialogue

00:30:55,860 --> 00:31:02,940
and then you can pass in the data that

00:30:58,860 --> 00:31:04,919
you need and this is a service this is

00:31:02,940 --> 00:31:11,100
not in the component this is a service

00:31:04,919 --> 00:31:15,019
that gets these events and this is just

00:31:11,100 --> 00:31:18,929
the way that we create an observable

00:31:15,019 --> 00:31:22,409
from this data from this event and then

00:31:18,929 --> 00:31:24,840
we can emit with next we emit the data

00:31:22,409 --> 00:31:26,789
that we want and then in the main

00:31:24,840 --> 00:31:28,980
component for example the component

00:31:26,789 --> 00:31:33,960
that's responsible for open opening the

00:31:28,980 --> 00:31:38,669
dialogues then we can use this subscribe

00:31:33,960 --> 00:31:41,549
to this dialogue oops we subscribe to

00:31:38,669 --> 00:31:45,120
the dialogue and whenever we get this

00:31:41,549 --> 00:31:50,100
event we open the dialogue so this is an

00:31:45,120 --> 00:31:53,760
example of using subscription inside the

00:31:50,100 --> 00:31:58,559
component so don't forget undestroyed to

00:31:53,760 --> 00:32:00,690
unsubscribe creating observable so there

00:31:58,559 --> 00:32:03,659
are a lot of methods like you can create

00:32:00,690 --> 00:32:06,779
a rock observable but you can create

00:32:03,659 --> 00:32:10,289
also a observables based on data on

00:32:06,779 --> 00:32:15,260
streams that you already have so for

00:32:10,289 --> 00:32:18,029
example from events oh I try too much

00:32:15,260 --> 00:32:22,289
wait am i okay

00:32:18,029 --> 00:32:28,710
from Dom events from promises timer and

00:32:22,289 --> 00:32:31,919
interval events and from Aries whether

00:32:28,710 --> 00:32:35,220
it's a it's whether you get an area and

00:32:31,919 --> 00:32:38,159
want to spread it or you get values that

00:32:35,220 --> 00:32:43,590
are like an array that's already spread

00:32:38,159 --> 00:32:48,330
it um this is an example of mousemove

00:32:43,590 --> 00:32:51,480
where you can create observables from

00:32:48,330 --> 00:32:54,750
the mouse mouse down like it's a

00:32:51,480 --> 00:32:57,419
drag-and-drop example so you create the

00:32:54,750 --> 00:32:59,760
observable from the event mouse down and

00:32:57,419 --> 00:33:01,950
another one for mouse move and one from

00:32:59,760 --> 00:33:05,900
mouse up but nothing happens until you

00:33:01,950 --> 00:33:11,330
subscribe to them and then you you can

00:33:05,900 --> 00:33:14,540
use a merge map and take until to modify

00:33:11,330 --> 00:33:16,700
to take to take one stream and then

00:33:14,540 --> 00:33:18,860
switch it once you get an event switch

00:33:16,700 --> 00:33:20,960
to the other stream so it's subscribed

00:33:18,860 --> 00:33:24,920
to the other stream and then take until

00:33:20,960 --> 00:33:27,620
also actually unsubscribes to the stream

00:33:24,920 --> 00:33:30,920
when something happens okay so take

00:33:27,620 --> 00:33:33,650
until Mouse up so when when you get an

00:33:30,920 --> 00:33:36,020
event of mouse up then you stop

00:33:33,650 --> 00:33:38,150
listening to Mouse move you unsubscribe

00:33:36,020 --> 00:33:40,430
to this actually okay

00:33:38,150 --> 00:33:46,100
really really quickly I'm Way over my

00:33:40,430 --> 00:33:50,360
time right so you have completing of

00:33:46,100 --> 00:33:52,670
observables which you can use and then

00:33:50,360 --> 00:33:54,830
you don't need to unsubscribe and so

00:33:52,670 --> 00:33:57,200
that's really really great so use them

00:33:54,830 --> 00:34:02,780
when you know that you can stop the

00:33:57,200 --> 00:34:05,870
stream of events and more in observables

00:34:02,780 --> 00:34:08,480
well listen there there's a lot more to

00:34:05,870 --> 00:34:12,290
know and to think about observables but

00:34:08,480 --> 00:34:16,340
just whenever you have some kind of use

00:34:12,290 --> 00:34:19,610
case that you say okay these are a

00:34:16,340 --> 00:34:22,550
synchronous events and how do I deal

00:34:19,610 --> 00:34:24,950
with that then there are a lot of

00:34:22,550 --> 00:34:27,140
answers for death okay so a lot of

00:34:24,950 --> 00:34:31,040
things that you can read more learn more

00:34:27,140 --> 00:34:35,510
about them I'm not gonna get into this

00:34:31,040 --> 00:34:39,380
right now I've got here a list of great

00:34:35,510 --> 00:34:42,110
resources that you can use I just want

00:34:39,380 --> 00:34:45,710
to quickly show two of the resources

00:34:42,110 --> 00:34:50,330
there's Eric's fiddle which is really

00:34:45,710 --> 00:34:54,280
small okay so you can hear this is the

00:34:50,330 --> 00:34:57,350
their demo you can try out different

00:34:54,280 --> 00:35:00,400
operators of rxjs and you can try

00:34:57,350 --> 00:35:05,150
combining and creating observables and

00:35:00,400 --> 00:35:11,930
see the result here okay and you can it

00:35:05,150 --> 00:35:16,220
test it you can just try it out it's

00:35:11,930 --> 00:35:17,890
really great and Eric's marbles which

00:35:16,220 --> 00:35:21,309
has all the

00:35:17,890 --> 00:35:24,339
I think all the operators here and you

00:35:21,309 --> 00:35:26,140
can actually change these marbles these

00:35:24,339 --> 00:35:29,529
are actually the events in the stream

00:35:26,140 --> 00:35:37,960
and see what this operator is doing and

00:35:29,529 --> 00:35:43,180
what will be the result okay tomorrow if

00:35:37,960 --> 00:35:45,579
you haven't if they're still in this

00:35:43,180 --> 00:35:49,210
workshop I'm having a workshop with

00:35:45,579 --> 00:35:54,730
Dominic Elm a we're doing it it's part

00:35:49,210 --> 00:35:59,950
of the forum a training and we will be

00:35:54,730 --> 00:36:02,140
teaching you a rxjs and ng Eric's for

00:35:59,950 --> 00:36:04,779
the whole day there's a lot to learn but

00:36:02,140 --> 00:36:09,660
once you get a grasp of it it's really

00:36:04,779 --> 00:36:13,119
cool after tomorrow I'm doing a little

00:36:09,660 --> 00:36:16,420
Meetup very little actually where I'm

00:36:13,119 --> 00:36:19,150
talking about a angular with firebase

00:36:16,420 --> 00:36:21,279
which like we saw also works with

00:36:19,150 --> 00:36:24,220
observables and really fun to work with

00:36:21,279 --> 00:36:27,999
so you can join the meetup also this

00:36:24,220 --> 00:36:30,369
will be hands-on meetup and that's it

00:36:27,999 --> 00:36:33,549
that was me sorry that I took a bit more

00:36:30,369 --> 00:36:36,220
of your time but you can ask me

00:36:33,549 --> 00:36:38,890
questions and they contact me through

00:36:36,220 --> 00:36:41,890
these channels so I hope you're going to

00:36:38,890 --> 00:36:43,660
start using observable it's a rxjs if

00:36:41,890 --> 00:36:46,569
you haven't done so yet

00:36:43,660 --> 00:36:48,609
Alex Jess it works not only with angular

00:36:46,569 --> 00:36:50,890
it works with a lot of stuff in

00:36:48,609 --> 00:36:54,039
JavaScript with everything actually

00:36:50,890 --> 00:36:56,739
vanilla even so I hope you're going to

00:36:54,039 --> 00:36:57,960
start using it so thank you very much

00:36:56,739 --> 00:37:02,999
thank you

00:36:57,960 --> 00:37:02,999
[Applause]

00:37:07,430 --> 00:37:09,490

YouTube URL: https://www.youtube.com/watch?v=Rq_SmVVgwHs


