Title: ReactiveConf 2017 - John Wargo: Creative Hacking: Delivering React Native App A B Testing
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,040 --> 00:00:08,639
[Music]

00:00:14,639 --> 00:00:19,000
so I'm excited to be here I wanted to

00:00:17,680 --> 00:00:20,920
talk about something that I called it

00:00:19,000 --> 00:00:24,009
creative hacking and it's kind of funny

00:00:20,920 --> 00:00:26,140
because the conference folks took my

00:00:24,009 --> 00:00:28,509
whole long title and contracted to those

00:00:26,140 --> 00:00:30,310
two words and if you're excited about me

00:00:28,509 --> 00:00:31,989
presenting some interesting methodology

00:00:30,310 --> 00:00:34,660
or something I'm not going to I want to

00:00:31,989 --> 00:00:36,670
talk specifically about using some tools

00:00:34,660 --> 00:00:43,090
that we provide to make a be testing

00:00:36,670 --> 00:00:45,219
with react native easier what and so a

00:00:43,090 --> 00:00:47,469
little bit about me I'm a program

00:00:45,219 --> 00:00:49,239
manager at Microsoft I'm part of the

00:00:47,469 --> 00:00:50,499
team working on visual studio mobile

00:00:49,239 --> 00:00:52,870
center which we'll talk about a little

00:00:50,499 --> 00:00:56,620
bit later I'm also responsible for our

00:00:52,870 --> 00:00:58,989
JavaScript tooling so the visual studio

00:00:56,620 --> 00:01:01,390
code plug-in for Apache Cordova and for

00:00:58,989 --> 00:01:03,309
react native and I'm a longtime

00:01:01,390 --> 00:01:04,839
contributor to Cordova I'm just now

00:01:03,309 --> 00:01:06,850
starting to get into react native and

00:01:04,839 --> 00:01:09,490
like he said I've written six books on

00:01:06,850 --> 00:01:12,580
mobile development so I know the space a

00:01:09,490 --> 00:01:15,250
little bit so as far as creative hacking

00:01:12,580 --> 00:01:17,080
goes in my mind it's it's not some cool

00:01:15,250 --> 00:01:20,110
methodology for delivering more

00:01:17,080 --> 00:01:23,469
thoughtfully written code basically in

00:01:20,110 --> 00:01:25,540
my mind I use that title because it's an

00:01:23,469 --> 00:01:27,310
idea where you're taking some tool and

00:01:25,540 --> 00:01:29,829
using it for a purpose for which it

00:01:27,310 --> 00:01:30,850
wasn't designed and you'll see what I

00:01:29,829 --> 00:01:34,570
mean in a minute but that's what I mean

00:01:30,850 --> 00:01:37,270
by creative hacking so the idea is I

00:01:34,570 --> 00:01:38,829
want to cover how to go about doing a be

00:01:37,270 --> 00:01:40,960
testing with react native applications

00:01:38,829 --> 00:01:42,850
and if you think about that process

00:01:40,960 --> 00:01:45,130
you've got a few options available to

00:01:42,850 --> 00:01:47,500
you the first one is I can deploy two or

00:01:45,130 --> 00:01:48,789
more versions of my app which if you're

00:01:47,500 --> 00:01:52,930
a developer like I think all of you are

00:01:48,789 --> 00:01:54,759
that's not a good thing to do you could

00:01:52,930 --> 00:01:56,710
perhaps mock up two versions of an app

00:01:54,759 --> 00:01:58,780
do it in react or do it in some sort of

00:01:56,710 --> 00:02:00,670
mock-up tool and deploy that to the

00:01:58,780 --> 00:02:02,829
world and then the third option the one

00:02:00,670 --> 00:02:04,840
I like the best is utilize some

00:02:02,829 --> 00:02:06,520
capability which enables you to the

00:02:04,840 --> 00:02:09,360
point one app but with different content

00:02:06,520 --> 00:02:12,250
and then basically use for each of these

00:02:09,360 --> 00:02:13,780
analytics to track the users interaction

00:02:12,250 --> 00:02:15,520
with the app and make decisions about

00:02:13,780 --> 00:02:20,380
which version and the application wins

00:02:15,520 --> 00:02:21,670
makes sense all right so I want to talk

00:02:20,380 --> 00:02:23,230
about visual studio mobile center how

00:02:21,670 --> 00:02:24,580
many here I can't really see cuz there's

00:02:23,230 --> 00:02:26,830
a big light in my eyes but how many

00:02:24,580 --> 00:02:28,240
folks here are familiar with with visual

00:02:26,830 --> 00:02:32,060
studio a mobile center

00:02:28,240 --> 00:02:33,320
so just a few huh so they lied to me

00:02:32,060 --> 00:02:36,230
they told me all of you guys knew all

00:02:33,320 --> 00:02:38,300
about mobile center oh well so let's

00:02:36,230 --> 00:02:40,250
talk about it it was announced a year

00:02:38,300 --> 00:02:42,920
year and a half ago it's basically a

00:02:40,250 --> 00:02:44,990
cloud offering it's a exposes some

00:02:42,920 --> 00:02:47,120
capabilities on the is your side in a

00:02:44,990 --> 00:02:49,460
mobile friendly way it includes things

00:02:47,120 --> 00:02:51,260
like build and test and deploy so

00:02:49,460 --> 00:02:54,850
basically the build piece is visual

00:02:51,260 --> 00:02:57,830
studio team services the test apiece is

00:02:54,850 --> 00:02:59,420
xamarin test cloud and the distribution

00:02:57,830 --> 00:03:02,510
piece of it there's actually two options

00:02:59,420 --> 00:03:04,700
part of it is something called a hockey

00:03:02,510 --> 00:03:06,590
app you guys familiar the hockey up so

00:03:04,700 --> 00:03:07,730
these were acquisitions the Microsoft

00:03:06,590 --> 00:03:09,560
did in the mobile space over the last

00:03:07,730 --> 00:03:11,450
few years now the second piece of this

00:03:09,560 --> 00:03:12,800
is something called code push which is

00:03:11,450 --> 00:03:15,470
what I'm gonna use in my my

00:03:12,800 --> 00:03:17,900
demonstration today it also supports a

00:03:15,470 --> 00:03:20,480
push notifications crash detection and

00:03:17,900 --> 00:03:22,600
analytics so those are the parts that

00:03:20,480 --> 00:03:26,000
are a mobile center and we're gonna use

00:03:22,600 --> 00:03:29,380
three of them actually four of them in

00:03:26,000 --> 00:03:31,820
the demonstration on the Deuter day and

00:03:29,380 --> 00:03:33,890
what my role at Microsoft is I recently

00:03:31,820 --> 00:03:36,680
joined the team and I'm responsible for

00:03:33,890 --> 00:03:38,540
helping to craft nem bass capabilities

00:03:36,680 --> 00:03:39,980
to go along with this so the idea is

00:03:38,540 --> 00:03:42,680
that we want to take some Azure

00:03:39,980 --> 00:03:44,720
capabilities expose them or bundle them

00:03:42,680 --> 00:03:46,400
in a mobile friendly way and expose them

00:03:44,720 --> 00:03:49,880
through mobile Center so that's that's

00:03:46,400 --> 00:03:51,350
what I do it's my day job all right so I

00:03:49,880 --> 00:03:53,830
want to start by talking about code push

00:03:51,350 --> 00:03:56,360
how many here from they were code push

00:03:53,830 --> 00:03:59,570
okay so slightly more than visuals to

00:03:56,360 --> 00:04:01,550
t-mobile star all right so our code push

00:03:59,570 --> 00:04:03,590
is essentially an open source project

00:04:01,550 --> 00:04:05,980
that we started a few years ago that

00:04:03,590 --> 00:04:08,240
gives developers the ability to push

00:04:05,980 --> 00:04:10,340
application updates to their mobile

00:04:08,240 --> 00:04:12,200
applications the idea is that it does

00:04:10,340 --> 00:04:15,290
over-the-air updates to the applications

00:04:12,200 --> 00:04:18,859
content supports Apache Cordova and

00:04:15,290 --> 00:04:21,950
react native allows you to distribute an

00:04:18,859 --> 00:04:24,680
app with the base core content and then

00:04:21,950 --> 00:04:27,410
use a command line interface to deploy

00:04:24,680 --> 00:04:30,770
new versions of the application to the

00:04:27,410 --> 00:04:33,680
device and the idea is though that it

00:04:30,770 --> 00:04:36,380
needs to not modify the app in any kind

00:04:33,680 --> 00:04:38,540
of fundamental way which I thought was

00:04:36,380 --> 00:04:40,760
there but it'll come up later so on the

00:04:38,540 --> 00:04:41,630
the client side when it when you put

00:04:40,760 --> 00:04:43,700
together an application

00:04:41,630 --> 00:04:46,400
using code push you have the ability to

00:04:43,700 --> 00:04:47,930
either configure your application so it

00:04:46,400 --> 00:04:49,970
automatically checks for updates and

00:04:47,930 --> 00:04:51,890
applies them whenever it sees it there's

00:04:49,970 --> 00:04:53,870
updates available in the cloud the other

00:04:51,890 --> 00:04:56,030
option is you can manually trigger an

00:04:53,870 --> 00:04:58,910
update check based upon the application

00:04:56,030 --> 00:05:01,690
needs so one the developer initializes

00:04:58,910 --> 00:05:04,430
the app in such a way that code push

00:05:01,690 --> 00:05:06,050
initializes knows what it needs to do it

00:05:04,430 --> 00:05:09,320
checks for updates and applies them or

00:05:06,050 --> 00:05:12,080
either you implement manual check for

00:05:09,320 --> 00:05:15,020
upgrade or or some sort of time to check

00:05:12,080 --> 00:05:18,500
or some other mechanism to deploy the

00:05:15,020 --> 00:05:20,060
application to the users and then this

00:05:18,500 --> 00:05:22,670
is what I mentioned earlier the there's

00:05:20,060 --> 00:05:24,230
an expectation not on our side but

00:05:22,670 --> 00:05:26,060
expectation especially an apple side

00:05:24,230 --> 00:05:28,520
that you don't fundamentally change the

00:05:26,060 --> 00:05:31,400
application when you deploy updates over

00:05:28,520 --> 00:05:32,750
the air okay so I'll have to agree not

00:05:31,400 --> 00:05:34,160
to mess with the app when we do with

00:05:32,750 --> 00:05:39,890
that just kidding

00:05:34,160 --> 00:05:41,540
all right so um code push actually has

00:05:39,890 --> 00:05:43,520
some capabilities that you could use for

00:05:41,540 --> 00:05:46,460
a be testing or at least validating a

00:05:43,520 --> 00:05:47,810
design through the CLI basically when

00:05:46,460 --> 00:05:49,580
you and I'll show you some of this later

00:05:47,810 --> 00:05:51,500
but when you deploy an application

00:05:49,580 --> 00:05:54,590
update using the command-line interface

00:05:51,500 --> 00:05:57,110
you have the ability to use - our or - -

00:05:54,590 --> 00:05:59,300
roll out and specify a numeric

00:05:57,110 --> 00:06:01,250
percentage and then code push will

00:05:59,300 --> 00:06:03,710
automatically the automatically deploy

00:06:01,250 --> 00:06:06,290
your update to that percentage of the

00:06:03,710 --> 00:06:07,460
user population so if you have some

00:06:06,290 --> 00:06:09,470
major change want to make to the

00:06:07,460 --> 00:06:11,690
application you make the change you

00:06:09,470 --> 00:06:13,850
deploy it's a code push with this

00:06:11,690 --> 00:06:15,140
parameter and then code pushed

00:06:13,850 --> 00:06:16,820
automatically deploys it to just a

00:06:15,140 --> 00:06:19,400
percentage of your user population and

00:06:16,820 --> 00:06:20,930
then you use analytics and whatever

00:06:19,400 --> 00:06:24,410
other capabilities you have that track

00:06:20,930 --> 00:06:27,410
usage and figure out whether that

00:06:24,410 --> 00:06:30,200
version is useful enough or is liked

00:06:27,410 --> 00:06:33,200
enough or is functional enough that it

00:06:30,200 --> 00:06:35,270
works if it does you roll it out to the

00:06:33,200 --> 00:06:37,400
rest of the community if it's not you

00:06:35,270 --> 00:06:40,430
can roll it back and deploy some other

00:06:37,400 --> 00:06:42,110
version all right so that's the poor

00:06:40,430 --> 00:06:44,180
man's version of a/b testing with code

00:06:42,110 --> 00:06:46,910
push but I think we can do better so

00:06:44,180 --> 00:06:48,230
another way to do it is you to point

00:06:46,910 --> 00:06:53,330
updated version in the app to code push

00:06:48,230 --> 00:06:55,040
and then use push notifications to send

00:06:53,330 --> 00:06:57,530
a deployment key to the

00:06:55,040 --> 00:07:00,230
app and then based upon that deployment

00:06:57,530 --> 00:07:05,690
key it pulls down the right version the

00:07:00,230 --> 00:07:07,370
app and then you test that way and then

00:07:05,690 --> 00:07:09,740
basically there's code within the

00:07:07,370 --> 00:07:11,510
application that when it receives the

00:07:09,740 --> 00:07:13,520
push notification figures out what it

00:07:11,510 --> 00:07:16,760
needs to do and then does what it needs

00:07:13,520 --> 00:07:18,470
to do and then the content refreshes

00:07:16,760 --> 00:07:19,910
there's two peas in the word app I don't

00:07:18,470 --> 00:07:22,490
you guys notice that or not it's

00:07:19,910 --> 00:07:24,950
supposed to be two peas there and away

00:07:22,490 --> 00:07:27,260
we go and then you're going to use the

00:07:24,950 --> 00:07:28,820
crashes feature of mobile center to

00:07:27,260 --> 00:07:30,440
detect any crashes in the application

00:07:28,820 --> 00:07:32,900
and then you're gonna use analytics to

00:07:30,440 --> 00:07:34,460
track the user's activity so wrapping

00:07:32,900 --> 00:07:36,640
together a few of the capabilities of

00:07:34,460 --> 00:07:38,630
mobile Center all for this one purpose

00:07:36,640 --> 00:07:40,880
so here's kind of a diagram that shows

00:07:38,630 --> 00:07:42,350
the same thing in my mind you know when

00:07:40,880 --> 00:07:44,900
I first started talking about this

00:07:42,350 --> 00:07:46,580
scenario this is what it meant to me so

00:07:44,900 --> 00:07:48,560
you start with a base version of the

00:07:46,580 --> 00:07:51,740
application you publish it using the

00:07:48,560 --> 00:07:53,150
court the code push CLI it goes to the

00:07:51,740 --> 00:07:55,400
push service up at mobile center and

00:07:53,150 --> 00:07:58,310
then from there it deploys down of the

00:07:55,400 --> 00:08:00,770
device if the devices don't already have

00:07:58,310 --> 00:08:02,540
that version okay and then you make a

00:08:00,770 --> 00:08:04,250
revision B or revision a of the

00:08:02,540 --> 00:08:07,370
application and publish those as well so

00:08:04,250 --> 00:08:09,560
essentially the code push service has

00:08:07,370 --> 00:08:12,490
multiple versions of your applications

00:08:09,560 --> 00:08:15,010
and then each version the application is

00:08:12,490 --> 00:08:18,380
identified by a unique deployment key

00:08:15,010 --> 00:08:21,470
okay so you you would probably maintain

00:08:18,380 --> 00:08:23,690
one set of code in github for example

00:08:21,470 --> 00:08:25,730
and then use branches to control your

00:08:23,690 --> 00:08:27,140
a/b versions I don't imagine you would

00:08:25,730 --> 00:08:28,550
make a complete separate copy of your

00:08:27,140 --> 00:08:31,280
app I would just use github to manage

00:08:28,550 --> 00:08:33,460
that but when it comes to publishing it

00:08:31,280 --> 00:08:36,050
you can publish from multiple branches

00:08:33,460 --> 00:08:38,720
independently into code push and then

00:08:36,050 --> 00:08:41,000
control it from there so then once

00:08:38,720 --> 00:08:43,820
everything is deployed in the cloud then

00:08:41,000 --> 00:08:46,280
you can use the push service to send a

00:08:43,820 --> 00:08:48,530
notification to the device to load the

00:08:46,280 --> 00:08:50,860
particular version and then like I said

00:08:48,530 --> 00:08:53,570
earlier use crash detection and

00:08:50,860 --> 00:08:57,400
analytics to monitor usage and how the

00:08:53,570 --> 00:09:00,590
application is working and so on alright

00:08:57,400 --> 00:09:02,930
so I'm gonna do a demo a couple things

00:09:00,590 --> 00:09:05,390
I'm not at home so I don't have a

00:09:02,930 --> 00:09:09,170
chicken or a pig to sacrifice to the

00:09:05,390 --> 00:09:10,370
demo gods so I'm I'm you know he just

00:09:09,170 --> 00:09:12,050
the best I can here we'll see what

00:09:10,370 --> 00:09:13,519
happens um for those of you that are

00:09:12,050 --> 00:09:15,139
heavily using the Wi-Fi network if you

00:09:13,519 --> 00:09:17,120
could do me a favor and hop off the

00:09:15,139 --> 00:09:19,459
network for the next 15 minutes or so

00:09:17,120 --> 00:09:21,550
that would make me happy let's see what

00:09:19,459 --> 00:09:26,060
happens you guys hungry

00:09:21,550 --> 00:09:27,740
are you awake okay whoo all right cool

00:09:26,060 --> 00:09:29,300
all right let's see what happens here so

00:09:27,740 --> 00:09:33,260
I have an application running on a

00:09:29,300 --> 00:09:36,040
device um it's just basically some text

00:09:33,260 --> 00:09:40,220
and a button that you click on it and

00:09:36,040 --> 00:09:40,730
then in my application can everybody see

00:09:40,220 --> 00:09:43,610
this okay

00:09:40,730 --> 00:09:44,660
I'm hoping it's big enough if it's not

00:09:43,610 --> 00:09:47,060
big enough to come up closer there's

00:09:44,660 --> 00:09:48,560
some free seats up here so basically

00:09:47,060 --> 00:09:50,269
there's there's two aspects of where

00:09:48,560 --> 00:09:52,790
I've modified the application to make

00:09:50,269 --> 00:09:55,040
all of this work the first one is in the

00:09:52,790 --> 00:09:57,769
constructor so what I did was like I

00:09:55,040 --> 00:10:01,100
made a variable called default key and a

00:09:57,769 --> 00:10:03,079
default key I pass in the connection ID

00:10:01,100 --> 00:10:05,240
for that base version of the application

00:10:03,079 --> 00:10:09,620
I'll show you how I got that in a minute

00:10:05,240 --> 00:10:12,829
and then in my constructor I basically

00:10:09,620 --> 00:10:16,310
read async storage to figure out whether

00:10:12,829 --> 00:10:18,260
I've stored that another key and then if

00:10:16,310 --> 00:10:20,899
I store that as a key I use it otherwise

00:10:18,260 --> 00:10:23,690
I go ahead and sink using this default

00:10:20,899 --> 00:10:26,000
appointment key so this code push got

00:10:23,690 --> 00:10:27,769
sync is what actually connects to the

00:10:26,000 --> 00:10:29,779
server pulls down the changes and so on

00:10:27,769 --> 00:10:32,420
all right so this is the manually

00:10:29,779 --> 00:10:36,230
triggered process I'm sorry we're in

00:10:32,420 --> 00:10:37,730
your process so so that's the first

00:10:36,230 --> 00:10:40,220
piece to this this is how I set up my

00:10:37,730 --> 00:10:43,550
code to understand that there's multiple

00:10:40,220 --> 00:10:46,220
versions and automatically update my

00:10:43,550 --> 00:10:48,140
core version the application so that

00:10:46,220 --> 00:10:49,940
once the a B testing is over I'm still

00:10:48,140 --> 00:10:52,160
gonna use that mechanism to deploy new

00:10:49,940 --> 00:10:54,410
versus the application once I've decided

00:10:52,160 --> 00:10:57,769
on a path and then the next piece of

00:10:54,410 --> 00:10:58,910
this is there's an event listener so

00:10:57,769 --> 00:11:01,190
there's a Porsche event listener that

00:10:58,910 --> 00:11:04,519
I've set and in that push event listener

00:11:01,190 --> 00:11:06,740
whenever a notification comes in I then

00:11:04,519 --> 00:11:09,139
use the data that I sent with that push

00:11:06,740 --> 00:11:11,199
notification to identify a different

00:11:09,139 --> 00:11:13,730
deployment key that I want to use and

00:11:11,199 --> 00:11:16,970
that's how I get my a B version the

00:11:13,730 --> 00:11:20,630
application running so basically I parse

00:11:16,970 --> 00:11:22,450
the deployment key and then I do a code

00:11:20,630 --> 00:11:24,400
push dot sync

00:11:22,450 --> 00:11:26,350
to deploy that version of the

00:11:24,400 --> 00:11:28,600
application so basically the application

00:11:26,350 --> 00:11:30,400
runs with a default deployment key when

00:11:28,600 --> 00:11:31,840
it gets a new one via push notification

00:11:30,400 --> 00:11:35,530
it swaps out that version of the

00:11:31,840 --> 00:11:36,640
application on the fly cool stuff yeah

00:11:35,530 --> 00:11:38,980
all right

00:11:36,640 --> 00:11:41,200
and the rest of this is just a standard

00:11:38,980 --> 00:11:44,250
everyday application so if you look at

00:11:41,200 --> 00:11:49,300
my application you'll see that I have a

00:11:44,250 --> 00:11:50,890
button called press me that's this guy

00:11:49,300 --> 00:11:52,930
right here currently it's this color

00:11:50,890 --> 00:11:54,400
what I'm gonna do is I'm gonna deploy a

00:11:52,930 --> 00:11:56,260
new version the application and then use

00:11:54,400 --> 00:11:57,370
push to swap it in so I need some

00:11:56,260 --> 00:12:01,600
audience participation

00:11:57,370 --> 00:12:03,400
so should I do red blue or green I heard

00:12:01,600 --> 00:12:07,360
red we're gonna do red all right so I'm

00:12:03,400 --> 00:12:10,930
gonna comment out that line I'm gonna

00:12:07,360 --> 00:12:13,480
uncomment red and then over my command

00:12:10,930 --> 00:12:15,720
line and by the way I'm gonna cheat cuz

00:12:13,480 --> 00:12:21,640
I wanna make sure I get this right oh

00:12:15,720 --> 00:12:29,470
here we go so if I yeah let's do this so

00:12:21,640 --> 00:12:31,180
if I do code push code push - LS so I

00:12:29,470 --> 00:12:32,520
want to list my code push sessions and

00:12:31,180 --> 00:12:35,580
then I have a name

00:12:32,520 --> 00:12:35,580
[Music]

00:12:40,030 --> 00:12:46,060
whoops I did that wrong yeah that's why

00:12:42,130 --> 00:12:47,730
I can't be that stuff that's what I

00:12:46,060 --> 00:12:54,280
wanted oh here we go I did it wrong I

00:12:47,730 --> 00:12:55,810
want to do code push deployment so if I

00:12:54,280 --> 00:12:58,390
use this command line tool it'll show me

00:12:55,810 --> 00:13:00,460
all of the deployments I have defined up

00:12:58,390 --> 00:13:01,780
on the code push service so right now

00:13:00,460 --> 00:13:03,310
there's a production deployment and

00:13:01,780 --> 00:13:06,370
there's something called staging so if I

00:13:03,310 --> 00:13:13,960
go into mobile center and I look here in

00:13:06,370 --> 00:13:14,500
my whoops let's write again try this

00:13:13,960 --> 00:13:17,670
again

00:13:14,500 --> 00:13:26,920
so if I go in here to my application I

00:13:17,670 --> 00:13:28,780
go to distribute encode push you'll see

00:13:26,920 --> 00:13:30,160
that I have multiple versions and right

00:13:28,780 --> 00:13:32,410
now I have this production as staging

00:13:30,160 --> 00:13:33,880
version of the app okay so whatever I do

00:13:32,410 --> 00:13:35,290
is I want to change that but before I do

00:13:33,880 --> 00:13:37,420
that let me show you how to get the

00:13:35,290 --> 00:13:39,790
deployment key so if I add a dash K to

00:13:37,420 --> 00:13:41,860
the end of this and execute the command

00:13:39,790 --> 00:13:43,630
it'll get me the same data but it'll

00:13:41,860 --> 00:13:45,580
also give me the deployment keys

00:13:43,630 --> 00:13:47,050
for those particular versions of the

00:13:45,580 --> 00:13:50,110
application okay

00:13:47,050 --> 00:13:51,790
everyone see that this right here all

00:13:50,110 --> 00:13:53,230
right so now what I'm gonna do is I'm

00:13:51,790 --> 00:13:54,250
going to create a deployment and I'm

00:13:53,230 --> 00:13:57,550
gonna create a deployment called

00:13:54,250 --> 00:13:58,960
revision a and once again I'm lazy so

00:13:57,550 --> 00:14:01,900
I'm gonna copy that directly from the

00:13:58,960 --> 00:14:03,460
from the document so now I'm telling it

00:14:01,900 --> 00:14:06,339
I'm telling code bush to created

00:14:03,460 --> 00:14:09,910
appointment add one for this particular

00:14:06,339 --> 00:14:14,110
app and then call it revision a so now

00:14:09,910 --> 00:14:19,839
when this runs and if I go back here and

00:14:14,110 --> 00:14:22,960
refresh my page you'll see there's a new

00:14:19,839 --> 00:14:27,750
one now called revision a ok and if I go

00:14:22,960 --> 00:14:27,750
back here and run that again

00:14:30,180 --> 00:14:35,590
here's my deployment key for revision a

00:14:33,390 --> 00:14:36,700
now I want to copy that because I'm

00:14:35,590 --> 00:14:39,600
gonna need that in a minute

00:14:36,700 --> 00:14:39,600
crikey

00:14:46,070 --> 00:14:57,290
and doing this without a keyboard is

00:14:51,200 --> 00:15:00,080
really really earth a mouse alright so

00:14:57,290 --> 00:15:01,730
there's my deployment key all right so I

00:15:00,080 --> 00:15:03,230
have it appointment key and what I want

00:15:01,730 --> 00:15:07,840
to do is I want to deploy that version

00:15:03,230 --> 00:15:10,610
the application so what I'm gonna do is

00:15:07,840 --> 00:15:12,260
I am going to actually I want to not

00:15:10,610 --> 00:15:14,530
have that I'm gonna do a different

00:15:12,260 --> 00:15:16,810
command first so I want to deploy this

00:15:14,530 --> 00:15:19,160
actually let's do this

00:15:16,810 --> 00:15:23,690
store that deployment key so I can get

00:15:19,160 --> 00:15:25,670
it later so now what I would do is I've

00:15:23,690 --> 00:15:28,670
modified the application so I now have

00:15:25,670 --> 00:15:31,340
converted this to read/write I've saved

00:15:28,670 --> 00:15:37,340
my changes and I'm gonna go back to the

00:15:31,340 --> 00:15:39,110
command line and paste that in and so

00:15:37,340 --> 00:15:41,720
now I'm publishing this version of the

00:15:39,110 --> 00:15:46,100
application to that deployment area

00:15:41,720 --> 00:15:50,200
called revision a so it's reading the

00:15:46,100 --> 00:15:54,190
app processing it doing some cool stuff

00:15:50,200 --> 00:15:54,190
I'm gonna drink some water while I wait

00:16:01,800 --> 00:16:07,529
I don't have any jokes sorry I've

00:16:03,420 --> 00:16:10,589
already told all my jokes here we go so

00:16:07,529 --> 00:16:12,899
it's done so now if I go over here and I

00:16:10,589 --> 00:16:14,160
go until my revision a area there's the

00:16:12,899 --> 00:16:15,779
deployment of my application so I'm

00:16:14,160 --> 00:16:17,910
ready to go so I've got the production

00:16:15,779 --> 00:16:20,160
version I've got this new slightly

00:16:17,910 --> 00:16:27,149
different version in the app and then to

00:16:20,160 --> 00:16:31,769
make this work what I do is that go into

00:16:27,149 --> 00:16:33,980
push notifications I'm gonna send a

00:16:31,769 --> 00:16:33,980
notification

00:16:43,720 --> 00:16:47,920
okay well who is a technical term and

00:16:45,910 --> 00:16:49,180
then down here when I have I have the

00:16:47,920 --> 00:16:52,990
ability to send custom data along with

00:16:49,180 --> 00:17:00,279
my push notification so I I give it a

00:16:52,990 --> 00:17:03,120
key of deployment key and then I copy my

00:17:00,279 --> 00:17:03,120
deployment key

00:17:07,380 --> 00:17:11,069
and then when I want to send my

00:17:09,540 --> 00:17:13,079
notification if I want to send it to

00:17:11,069 --> 00:17:15,000
everybody I can but what I really want

00:17:13,079 --> 00:17:16,470
to do for this a be testing thing is I

00:17:15,000 --> 00:17:17,520
want to actually define an audience and

00:17:16,470 --> 00:17:19,410
I'm not going to do that but I'm going

00:17:17,520 --> 00:17:20,880
to show you how it works anyways um and

00:17:19,410 --> 00:17:23,790
then when I define an audience I have

00:17:20,880 --> 00:17:26,339
the ability to give it a name and then

00:17:23,790 --> 00:17:28,860
add a series of rules that define the

00:17:26,339 --> 00:17:31,800
audience for that push notification so

00:17:28,860 --> 00:17:32,880
for example if I want to send this first

00:17:31,800 --> 00:17:35,240
of the application everybody a

00:17:32,880 --> 00:17:38,010
particular country particular carrier

00:17:35,240 --> 00:17:40,110
particular device model or OS version I

00:17:38,010 --> 00:17:42,390
can do that by using one or more of

00:17:40,110 --> 00:17:44,070
these properties all right so I build my

00:17:42,390 --> 00:17:47,100
criteria I sent it to my audience and

00:17:44,070 --> 00:17:48,330
I'm good for this demo I'm merely going

00:17:47,100 --> 00:17:52,860
to send it to all registered devices

00:17:48,330 --> 00:18:01,370
just because it's easier there's my

00:17:52,860 --> 00:18:01,370
message and when I send my notification

00:18:10,290 --> 00:18:15,030
I should have had this already running

00:18:11,760 --> 00:18:16,950
Shania when I sent my notification you

00:18:15,030 --> 00:18:19,440
can see that a notification was received

00:18:16,950 --> 00:18:22,010
with the text that I sent in my message

00:18:19,440 --> 00:18:25,470
and then here's my deployment key and

00:18:22,010 --> 00:18:26,520
then code push woke up and in went out

00:18:25,470 --> 00:18:29,880
and downloaded that version of the

00:18:26,520 --> 00:18:31,970
application so how do we feel about the

00:18:29,880 --> 00:18:35,850
demo gods do they like us or not like us

00:18:31,970 --> 00:18:40,560
we'll see so if I go here and I kill my

00:18:35,850 --> 00:18:48,270
application all right what color should

00:18:40,560 --> 00:18:51,210
that button be red so when I go in my

00:18:48,270 --> 00:18:57,660
app is red the demo gods were nice to us

00:18:51,210 --> 00:19:00,930
today so that's basically it that is

00:18:57,660 --> 00:19:02,520
everything I wanted to show you so I

00:19:00,930 --> 00:19:05,100
made some screenshots here so you can

00:19:02,520 --> 00:19:08,120
see the difference between the regular

00:19:05,100 --> 00:19:11,820
deployment and deployment with - Kay and

00:19:08,120 --> 00:19:14,400
then the codes in here as well so that's

00:19:11,820 --> 00:19:16,020
basically my session some resources

00:19:14,400 --> 00:19:17,040
available for you first of all take a

00:19:16,020 --> 00:19:18,870
look at visual studio code

00:19:17,040 --> 00:19:21,990
I'm sorry visual studio mobile center

00:19:18,870 --> 00:19:24,060
it's a free preview for now which means

00:19:21,990 --> 00:19:25,350
you can sign up for an account you can

00:19:24,060 --> 00:19:28,550
use it to build test and deploy your

00:19:25,350 --> 00:19:31,620
applications it'll go into production

00:19:28,550 --> 00:19:33,210
sometime relatively soon and then

00:19:31,620 --> 00:19:35,850
they'll be it'll be a four fee service

00:19:33,210 --> 00:19:37,200
but there should still be your low cost

00:19:35,850 --> 00:19:38,460
or free options that you can use to

00:19:37,200 --> 00:19:40,170
really prove whether this gonna work for

00:19:38,460 --> 00:19:41,340
your environment or not I've published

00:19:40,170 --> 00:19:43,800
the source code on github

00:19:41,340 --> 00:19:45,450
/j Wargo so you can have the same

00:19:43,800 --> 00:19:49,160
application that I just demonstrated and

00:19:45,450 --> 00:19:52,140
then what I showed in this session was a

00:19:49,160 --> 00:19:54,270
full demo of something one of my former

00:19:52,140 --> 00:19:56,850
colleagues wrote about so this is a link

00:19:54,270 --> 00:19:58,920
to his original blogpost parashu used to

00:19:56,850 --> 00:20:01,740
be part of the team he used to own the

00:19:58,920 --> 00:20:03,960
the JavaScript plugins and so on for

00:20:01,740 --> 00:20:05,610
Visual Studio code he's since moved on

00:20:03,960 --> 00:20:08,850
and so I took over his responsibilities

00:20:05,610 --> 00:20:11,430
but this is a good overview of how how

00:20:08,850 --> 00:20:14,850
that demonstration works so I'm I have

00:20:11,430 --> 00:20:16,290
23 seconds left before we go to

00:20:14,850 --> 00:20:18,720
questions so we have questions ah we

00:20:16,290 --> 00:20:20,940
have questions might I we have questions

00:20:18,720 --> 00:20:23,600
yeah we're good it's good to get it for

00:20:20,940 --> 00:20:23,600
the questions yeah

00:20:23,690 --> 00:20:28,559
so let's go for the first one this Apple

00:20:26,400 --> 00:20:31,380
actually allow apps that use code Bush

00:20:28,559 --> 00:20:32,610
yeah it's code pushes several years old

00:20:31,380 --> 00:20:35,220
it's been out there

00:20:32,610 --> 00:20:39,090
Apple has specific guidelines over what

00:20:35,220 --> 00:20:42,059
technologies you can use but javascript

00:20:39,090 --> 00:20:44,720
and so on is supported so like I said

00:20:42,059 --> 00:20:47,340
it's my understanding that they have a

00:20:44,720 --> 00:20:50,039
restriction that whatever you push to

00:20:47,340 --> 00:20:51,990
the app using code push does not

00:20:50,039 --> 00:20:54,120
fundamentally change the nature of the

00:20:51,990 --> 00:20:56,429
app that's gonna get you in trouble yeah

00:20:54,120 --> 00:20:57,960
but if you have add new content add new

00:20:56,429 --> 00:20:59,820
features move things around I don't

00:20:57,960 --> 00:21:01,260
think they'll care okay but but I mean

00:20:59,820 --> 00:21:02,720
there's no definite answer on that right

00:21:01,260 --> 00:21:05,100
because they do what they want to do

00:21:02,720 --> 00:21:09,480
what will be the pricing of mobile

00:21:05,100 --> 00:21:10,909
center and the code push so I know but I

00:21:09,480 --> 00:21:14,610
don't know I know but I can't tell you

00:21:10,909 --> 00:21:16,409
just understand that a lot of this is

00:21:14,610 --> 00:21:18,960
available today through other products

00:21:16,409 --> 00:21:22,380
code push is a free service that's

00:21:18,960 --> 00:21:25,679
available to you today so mobile center

00:21:22,380 --> 00:21:29,370
when it does go live is gonna have fees

00:21:25,679 --> 00:21:31,440
around testing on live devices and build

00:21:29,370 --> 00:21:34,280
and things like that but I don't imagine

00:21:31,440 --> 00:21:37,010
that this particular service is gonna

00:21:34,280 --> 00:21:40,140
okay have a cost I can't say too much

00:21:37,010 --> 00:21:43,350
okay so uh next question does it work on

00:21:40,140 --> 00:21:48,780
Windows Phone does it work on Windows

00:21:43,350 --> 00:21:50,539
Phone no okay okay no hang on you were

00:21:48,780 --> 00:21:54,450
expecting some marketing interviewer

00:21:50,539 --> 00:21:56,700
yeah so um we're not going too deep into

00:21:54,450 --> 00:22:00,929
the weeds there's a there's a

00:21:56,700 --> 00:22:03,600
fundamental architecture around security

00:22:00,929 --> 00:22:05,880
in Windows apps that make this not

00:22:03,600 --> 00:22:07,770
possible and it's been around for a

00:22:05,880 --> 00:22:09,659
couple years and I think as much as we

00:22:07,770 --> 00:22:11,549
want to fix it we're much happier with

00:22:09,659 --> 00:22:14,600
having the security in place than

00:22:11,549 --> 00:22:17,669
breaking it to allow this okay

00:22:14,600 --> 00:22:19,950
so users to disable push notifications

00:22:17,669 --> 00:22:22,740
can be targeted is it correct

00:22:19,950 --> 00:22:24,270
if they've disabled push yeah I not yeah

00:22:22,740 --> 00:22:25,980
I don't I don't think this will work

00:22:24,270 --> 00:22:27,270
it's if they've disabled push

00:22:25,980 --> 00:22:29,700
notifications there's nothing we can do

00:22:27,270 --> 00:22:33,710
to get around it how could push handles

00:22:29,700 --> 00:22:40,460
if deployment went wrong I have no idea

00:22:33,710 --> 00:22:42,260
so so code push well there's two parts

00:22:40,460 --> 00:22:45,320
to this right so the push notification

00:22:42,260 --> 00:22:48,980
triggers the code push code push is

00:22:45,320 --> 00:22:52,279
going to pull down the complete code

00:22:48,980 --> 00:22:53,480
change and then I try to apply it so

00:22:52,279 --> 00:22:56,120
it's not going to modify the app until

00:22:53,480 --> 00:22:59,360
it no hits it has all of it and as far

00:22:56,120 --> 00:23:00,770
as I know it's not going to it'll roll

00:22:59,360 --> 00:23:03,260
back to the previous state if the

00:23:00,770 --> 00:23:05,539
upgrade fails the beauty this is it's an

00:23:03,260 --> 00:23:06,860
open source solution right so the CLI

00:23:05,539 --> 00:23:09,049
and all the tools for code push are

00:23:06,860 --> 00:23:11,960
available up and get up so go take a

00:23:09,049 --> 00:23:13,580
look the next question how is the

00:23:11,960 --> 00:23:15,529
security handled is there risk of

00:23:13,580 --> 00:23:18,919
malicious codes to get pushed to our

00:23:15,529 --> 00:23:22,370
users so good question you saw that I

00:23:18,919 --> 00:23:24,020
worked with that deployment key I am

00:23:22,370 --> 00:23:25,309
asleep showed them up on the screen I'm

00:23:24,020 --> 00:23:27,320
gonna delete my application I'm done so

00:23:25,309 --> 00:23:29,630
you can't mess with my demo but that

00:23:27,320 --> 00:23:30,830
deployment key is all you need to be

00:23:29,630 --> 00:23:33,770
able to mess with somebody else's

00:23:30,830 --> 00:23:35,270
application so protect that if you've

00:23:33,770 --> 00:23:37,610
done that so the application name is

00:23:35,270 --> 00:23:39,770
used and that deployment key is used so

00:23:37,610 --> 00:23:41,270
I would protect that information and

00:23:39,770 --> 00:23:42,559
that's the best way to avoid that we

00:23:41,270 --> 00:23:44,419
have time for two more questions so

00:23:42,559 --> 00:23:46,549
let's go through them is there way to

00:23:44,419 --> 00:23:49,730
revert a specific version already rolled

00:23:46,549 --> 00:23:52,820
out for a certain percentage so I hinted

00:23:49,730 --> 00:23:54,649
at that in my session and I'm not sure

00:23:52,820 --> 00:23:56,000
and I apologize I'm only three months at

00:23:54,649 --> 00:23:59,029
Microsoft so you have to give me a break

00:23:56,000 --> 00:24:03,940
but um I was talking to the developer

00:23:59,029 --> 00:24:06,710
lead and he said that code push will

00:24:03,940 --> 00:24:11,929
always deploy the latest version of a

00:24:06,710 --> 00:24:13,490
deployed deployment key so to revert all

00:24:11,929 --> 00:24:14,990
you have to do is switch that key and

00:24:13,490 --> 00:24:16,820
then it'll automatically pull down the

00:24:14,990 --> 00:24:20,149
latest one and overwrite your changes

00:24:16,820 --> 00:24:22,399
but don't try to push a change to an

00:24:20,149 --> 00:24:24,500
existing deployment key and then try to

00:24:22,399 --> 00:24:26,149
rollback within that deployment key does

00:24:24,500 --> 00:24:27,250
that make sense not to me but it's okay

00:24:26,149 --> 00:24:31,880
that makes sense to you guys

00:24:27,250 --> 00:24:33,679
somebody say yes or no it was a

00:24:31,880 --> 00:24:37,039
resounding yes yeah I heard one of them

00:24:33,679 --> 00:24:38,419
if not and one more question what are

00:24:37,039 --> 00:24:41,690
the benefits comparing to docker

00:24:38,419 --> 00:24:43,179
solutions docker solution yeah to a

00:24:41,690 --> 00:24:46,190
mobile center mm-hm

00:24:43,179 --> 00:24:49,669
really I'm just reading it from the

00:24:46,190 --> 00:24:50,539
screen you know yeah so that's a tough

00:24:49,669 --> 00:24:54,010
focus I'm not really sure what the

00:24:50,539 --> 00:24:56,000
question means so I mean docker is a

00:24:54,010 --> 00:24:57,919
completely different technology it's a

00:24:56,000 --> 00:25:00,860
technology for deploying applications

00:24:57,919 --> 00:25:03,440
virtually and this is cloud services for

00:25:00,860 --> 00:25:05,179
Microsoft so I can't answer that it's a

00:25:03,440 --> 00:25:07,850
wrong question guys okay I can try but

00:25:05,179 --> 00:25:09,679
don't worry good so let's end on a

00:25:07,850 --> 00:25:12,830
positive note you can choose one of

00:25:09,679 --> 00:25:14,090
these code push is great Fastlane is

00:25:12,830 --> 00:25:16,640
also great what do you think about

00:25:14,090 --> 00:25:19,159
integrate code push with Fastlane the

00:25:16,640 --> 00:25:19,580
answer real good question um that's a

00:25:19,159 --> 00:25:21,049
great idea

00:25:19,580 --> 00:25:23,030
I'll talk to the velopment team and I

00:25:21,049 --> 00:25:25,850
got one more here it's okay this looks a

00:25:23,030 --> 00:25:29,480
bit clumsy well it was a five minute

00:25:25,850 --> 00:25:31,370
demo I mean you feel scripted and you'll

00:25:29,480 --> 00:25:33,679
make it easier but I just I had five

00:25:31,370 --> 00:25:35,320
minutes great John appreciate it thank

00:25:33,679 --> 00:25:38,480
you much you're welcome

00:25:35,320 --> 00:25:40,600
go take this with it yes you can thank

00:25:38,480 --> 00:25:40,600
you

00:25:46,380 --> 00:25:48,440

YouTube URL: https://www.youtube.com/watch?v=DpahJibuH7M


