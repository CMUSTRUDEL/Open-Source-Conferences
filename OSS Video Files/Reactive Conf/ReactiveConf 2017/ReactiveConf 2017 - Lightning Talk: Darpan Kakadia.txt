Title: ReactiveConf 2017 - Lightning Talk: Darpan Kakadia
Publication date: 2017-11-24
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,040 --> 00:00:07,440
[Music]

00:00:20,410 --> 00:00:23,800
hi I'll be talking about a sink in the

00:00:23,169 --> 00:00:27,220
next today

00:00:23,800 --> 00:00:29,859
I am helping Acharya I work as a UI

00:00:27,220 --> 00:00:31,809
engineer here trip and my twitter handle

00:00:29,859 --> 00:00:34,600
is Korea help and Twitter handles get up

00:00:31,809 --> 00:00:36,850
everywhere and at ClearType I'm

00:00:34,600 --> 00:00:39,489
revamping the complete front-end using

00:00:36,850 --> 00:00:41,829
react and making a PWA so I am here to

00:00:39,489 --> 00:00:44,470
share my experiences here so let's start

00:00:41,829 --> 00:00:47,710
so how do you handle a sync actions in

00:00:44,470 --> 00:00:50,829
your redux probably promises or thunks

00:00:47,710 --> 00:00:53,199
or maybe sagas or it expect something

00:00:50,829 --> 00:00:55,839
like that so let's see that watch oh

00:00:53,199 --> 00:00:59,830
I'll share Mac's mirror what I found is

00:00:55,839 --> 00:01:03,269
better and I see so generally speaking

00:00:59,830 --> 00:01:06,310
we only use one deducts middleware and

00:01:03,269 --> 00:01:10,570
which should you choose Alex Agha and

00:01:06,310 --> 00:01:12,460
let me tell you why so first let me tell

00:01:10,570 --> 00:01:16,509
you what headaches are guys look saga is

00:01:12,460 --> 00:01:18,479
a saga is a library using es6 generator

00:01:16,509 --> 00:01:22,210
functions to handle your I think actions

00:01:18,479 --> 00:01:23,710
and if you don't know what es6 generator

00:01:22,210 --> 00:01:27,310
functions are let me tell you what it is

00:01:23,710 --> 00:01:29,409
so he is 600 functions they are not here

00:01:27,310 --> 00:01:31,619
not like your regular functions they can

00:01:29,409 --> 00:01:33,850
be paused and paid whenever you want

00:01:31,619 --> 00:01:37,630
so that makes redux are very powerful

00:01:33,850 --> 00:01:40,329
let's see what is next so this is a

00:01:37,630 --> 00:01:42,639
sample saga so if you see here there are

00:01:40,329 --> 00:01:45,399
fee a few keywords like take every put

00:01:42,639 --> 00:01:47,829
delay take every listen to all the

00:01:45,399 --> 00:01:49,409
actions that are dispatched and whatever

00:01:47,829 --> 00:01:52,299
function you pass it over there is

00:01:49,409 --> 00:01:54,429
dispatch in that particular action so

00:01:52,299 --> 00:01:56,109
then other is delay delay is delay

00:01:54,429 --> 00:01:57,999
delays the execution by that many

00:01:56,109 --> 00:01:59,679
milliseconds then there is put it is

00:01:57,999 --> 00:02:02,170
similar to what dispatch is in three

00:01:59,679 --> 00:02:06,969
ducks tank it actually specify this

00:02:02,170 --> 00:02:10,720
purchase an action that's it and so if

00:02:06,969 --> 00:02:12,340
you see here this is the watch I'll cue

00:02:10,720 --> 00:02:14,020
energy method sync so here I am

00:02:12,340 --> 00:02:15,790
listening to this particular action and

00:02:14,020 --> 00:02:17,260
whenever I encounter that and I'm

00:02:15,790 --> 00:02:20,170
dispatching incremental sanka generator

00:02:17,260 --> 00:02:22,390
which I have written here and there's a

00:02:20,170 --> 00:02:27,760
simple increment tasks that said nothing

00:02:22,390 --> 00:02:29,560
else so let's see how would you how

00:02:27,760 --> 00:02:32,650
would you do something in tank and how

00:02:29,560 --> 00:02:34,370
would you do something in saga so this

00:02:32,650 --> 00:02:38,000
is just a simple fetch data

00:02:34,370 --> 00:02:40,819
and introduction you return and function

00:02:38,000 --> 00:02:43,550
which dispatches an action right so here

00:02:40,819 --> 00:02:47,150
you see there is a we are we are making

00:02:43,550 --> 00:02:50,540
a get call and then writing down and

00:02:47,150 --> 00:02:55,340
catch and dispatching respective actions

00:02:50,540 --> 00:02:57,590
right simple but in case of saga we have

00:02:55,340 --> 00:02:59,090
to do so many things first we write a

00:02:57,590 --> 00:03:00,170
rule saga way beyond watching all the

00:02:59,090 --> 00:03:03,440
actions that are dispatched and

00:03:00,170 --> 00:03:05,569
dispatching a generator accordingly like

00:03:03,440 --> 00:03:07,720
this and then we have a try cache

00:03:05,569 --> 00:03:10,069
because whenever you encounter a

00:03:07,720 --> 00:03:12,500
server-side relying set error in your

00:03:10,069 --> 00:03:14,209
API requests it throws an error which is

00:03:12,500 --> 00:03:16,190
handled in the catch so we have try

00:03:14,209 --> 00:03:17,870
catch we write everything in try and

00:03:16,190 --> 00:03:21,440
whatever we want to handle is an error

00:03:17,870 --> 00:03:23,500
we put it in catch simple but you would

00:03:21,440 --> 00:03:26,180
say isn't this just too much work

00:03:23,500 --> 00:03:28,190
yes it is if your application is very

00:03:26,180 --> 00:03:30,260
simple but when your application becomes

00:03:28,190 --> 00:03:32,269
very complex saga is really really

00:03:30,260 --> 00:03:34,220
beautiful because as you see you saw in

00:03:32,269 --> 00:03:36,920
the last page it is very declarative

00:03:34,220 --> 00:03:39,560
that he's called exists what can I get

00:03:36,920 --> 00:03:41,389
slash data so you know exactly what your

00:03:39,560 --> 00:03:43,810
code is see by just reading it you know

00:03:41,389 --> 00:03:49,190
what it is doing it is as simple as that

00:03:43,810 --> 00:03:51,829
and that's it and these are the

00:03:49,190 --> 00:03:53,569
advantages of reduction saga it has ten

00:03:51,829 --> 00:03:55,010
solutions so sometimes you don't want

00:03:53,569 --> 00:03:56,959
your all of the actions that are

00:03:55,010 --> 00:03:59,180
dispatched should be handled so for

00:03:56,959 --> 00:04:01,310
example autocomplete right so when you

00:03:59,180 --> 00:04:03,380
type in three keywords after after that

00:04:01,310 --> 00:04:04,970
you want to dispatch an action but on

00:04:03,380 --> 00:04:06,530
every key you are dispatching an action

00:04:04,970 --> 00:04:08,540
but you don't want to handle them only

00:04:06,530 --> 00:04:10,430
the latest one right in that in that

00:04:08,540 --> 00:04:12,799
case you can use teak latest from

00:04:10,430 --> 00:04:14,419
critics AHA which only handles the

00:04:12,799 --> 00:04:17,870
latest action that has been dispatched

00:04:14,419 --> 00:04:20,660
latest same action then you have race

00:04:17,870 --> 00:04:24,070
conditions throttling debouncing

00:04:20,660 --> 00:04:26,690
redrawing Network calls and undo actions

00:04:24,070 --> 00:04:28,840
that's it I'm stopping either pan thank

00:04:26,690 --> 00:04:28,840
you

00:04:30,400 --> 00:04:35,180
great thank you very much let's now go

00:04:33,530 --> 00:04:38,350
for the questions let's open the

00:04:35,180 --> 00:04:42,050
questions we have a couple of them so

00:04:38,350 --> 00:04:44,210
why not use async evades with drunk funk

00:04:42,050 --> 00:04:46,250
okay so yeah so I think of eight you

00:04:44,210 --> 00:04:48,320
care if you use it will be a little

00:04:46,250 --> 00:04:49,790
similar but the only thing is that in a

00:04:48,320 --> 00:04:52,220
think of it you cannot pause a function

00:04:49,790 --> 00:04:53,530
in generators you can do that so that is

00:04:52,220 --> 00:04:55,790
the power of relaxed auga

00:04:53,530 --> 00:04:58,970
the next question don't you think that

00:04:55,790 --> 00:05:00,650
rejects observable is better I have not

00:04:58,970 --> 00:05:02,290
used Redux of variables so I cannot

00:05:00,650 --> 00:05:05,830
comment on that sorry

00:05:02,290 --> 00:05:08,450
so the next one is from Yvonne VTF

00:05:05,830 --> 00:05:12,020
generator functions are not pure is it

00:05:08,450 --> 00:05:13,880
okay to use them with react yes it is

00:05:12,020 --> 00:05:15,650
okay to use them at react because all

00:05:13,880 --> 00:05:17,810
the data manipulation that you are doing

00:05:15,650 --> 00:05:20,600
the only good logic business logic it

00:05:17,810 --> 00:05:22,280
goes in soccer but the store updation it

00:05:20,600 --> 00:05:25,490
is handled in reducer which is still

00:05:22,280 --> 00:05:27,530
pure so that is okay so what is the

00:05:25,490 --> 00:05:29,360
added value of using rid of saga versus

00:05:27,530 --> 00:05:31,730
Redux observable given that Rx is so

00:05:29,360 --> 00:05:33,650
widely used everywhere again the same

00:05:31,730 --> 00:05:38,810
thing I have not used your lectures we

00:05:33,650 --> 00:05:41,630
will sorry it's fine so there's two more

00:05:38,810 --> 00:05:45,920
how to dispatch a saga only one as when

00:05:41,630 --> 00:05:48,110
store change is it possible I know about

00:05:45,920 --> 00:05:49,730
that I've never done that I'll have to

00:05:48,110 --> 00:05:52,790
look into that probably if you tweet me

00:05:49,730 --> 00:05:54,440
or DM me I can help you with that cool

00:05:52,790 --> 00:05:57,520
and the last one we already covered so

00:05:54,440 --> 00:05:57,520
thank you very much

00:06:02,990 --> 00:06:05,050

YouTube URL: https://www.youtube.com/watch?v=bvfRTv3qJJY


