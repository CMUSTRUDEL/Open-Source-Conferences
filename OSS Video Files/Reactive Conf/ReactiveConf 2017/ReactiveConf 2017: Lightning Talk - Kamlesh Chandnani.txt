Title: ReactiveConf 2017: Lightning Talk - Kamlesh Chandnani
Publication date: 2017-11-24
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,040 --> 00:00:07,440
[Music]

00:00:19,590 --> 00:00:29,699
hello folks so I'm Kamlesh I'm from

00:00:26,009 --> 00:00:32,579
India I work for mobile technologies as

00:00:29,699 --> 00:00:34,949
a front-end engineer so currently we are

00:00:32,579 --> 00:00:38,400
developing Salesforce automation systems

00:00:34,949 --> 00:00:41,070
for FMCG and material industries and we

00:00:38,400 --> 00:00:43,850
are revamping our products UI using

00:00:41,070 --> 00:00:48,269
react and soon we'll be launching our

00:00:43,850 --> 00:00:51,589
first ever b2b progressive web apps you

00:00:48,269 --> 00:00:53,610
can find me on social media and github

00:00:51,589 --> 00:00:57,269
so today I will be talking about

00:00:53,610 --> 00:01:01,470
progressive loading it says less code

00:00:57,269 --> 00:01:05,549
loaded better improves performance so

00:01:01,470 --> 00:01:08,490
why what is the need so has the simple

00:01:05,549 --> 00:01:11,970
answer to the question everyone hates

00:01:08,490 --> 00:01:16,350
waiting so I'm going to start with a

00:01:11,970 --> 00:01:19,500
small story just imagine that you bought

00:01:16,350 --> 00:01:22,920
a big giant pizza and you ask the kid to

00:01:19,500 --> 00:01:25,920
grab it all at once now I can closely

00:01:22,920 --> 00:01:27,689
related this giant pizza with my entire

00:01:25,920 --> 00:01:32,570
applications main Mandal which is not

00:01:27,689 --> 00:01:35,189
code splitted so what I will do it

00:01:32,570 --> 00:01:39,179
obviously I will take a pizza slicer

00:01:35,189 --> 00:01:39,749
slice it and give it to the kid so pizza

00:01:39,179 --> 00:01:44,789
slicer

00:01:39,749 --> 00:01:46,950
is my webpack and which will code split

00:01:44,789 --> 00:01:49,590
my entire application has for my

00:01:46,950 --> 00:01:51,299
configurations and it will load based on

00:01:49,590 --> 00:01:56,039
whatever is needed as for my

00:01:51,299 --> 00:01:57,749
configurations so finally is I'll have a

00:01:56,039 --> 00:02:00,420
pizza slice I will give it to the kid

00:01:57,749 --> 00:02:06,240
and the kid is happy and she can easily

00:02:00,420 --> 00:02:09,149
grab it so this is how it looks without

00:02:06,240 --> 00:02:12,209
code splitting I have the entire app

00:02:09,149 --> 00:02:15,620
bundle which is this is a very small app

00:02:12,209 --> 00:02:17,880
so the bundle is just 1 0 6 kilobytes

00:02:15,620 --> 00:02:21,270
and just imagine if you are having a

00:02:17,880 --> 00:02:23,819
huge application if you are not code

00:02:21,270 --> 00:02:26,370
splitting your application you know then

00:02:23,819 --> 00:02:28,530
your this entire application bundle may

00:02:26,370 --> 00:02:31,230
reach somewhere around 2 to 3 ma which

00:02:28,530 --> 00:02:32,500
is again a pain if you are running your

00:02:31,230 --> 00:02:36,220
application on slow

00:02:32,500 --> 00:02:37,900
what networks and this is what I can

00:02:36,220 --> 00:02:40,240
achieve using code splitting my entire

00:02:37,900 --> 00:02:42,340
applications code is splitted based on

00:02:40,240 --> 00:02:46,240
the configurations and it will load as

00:02:42,340 --> 00:02:48,000
and when the modules are needed so I

00:02:46,240 --> 00:02:51,250
have a small checklist which I usually

00:02:48,000 --> 00:02:53,170
see when I look for code splitting the

00:02:51,250 --> 00:02:55,630
first is conferring configuring my web

00:02:53,170 --> 00:02:56,800
pack second is using dynamic imports

00:02:55,630 --> 00:02:59,200
which is again a beautiful feature

00:02:56,800 --> 00:03:01,990
provided by web pack and third is

00:02:59,200 --> 00:03:06,910
configuring my routes to load async

00:03:01,990 --> 00:03:10,989
bundles so just have a look at this

00:03:06,910 --> 00:03:14,040
small configuration which I used to

00:03:10,989 --> 00:03:16,810
configure web pack so web pack is a very

00:03:14,040 --> 00:03:19,360
good plug-in which is common strong

00:03:16,810 --> 00:03:23,070
plug-in which is used to split my

00:03:19,360 --> 00:03:25,930
applications into small small chunks so

00:03:23,070 --> 00:03:29,440
first I am Telling web pack to split out

00:03:25,930 --> 00:03:32,080
my vendor vendor chunk which is rarely

00:03:29,440 --> 00:03:37,180
gonna change and put it into a separate

00:03:32,080 --> 00:03:40,150
bundle second I am asking web pack to

00:03:37,180 --> 00:03:43,320
scan all my async bundles which are

00:03:40,150 --> 00:03:47,080
recognized using the imports and then

00:03:43,320 --> 00:03:49,840
also check the children's of those

00:03:47,080 --> 00:03:52,660
racing bundles and move them into a

00:03:49,840 --> 00:03:55,209
separate chunk after that I am Telling

00:03:52,660 --> 00:03:58,390
web pack to move the runtime module

00:03:55,209 --> 00:04:01,269
which is used by a pack to resolve the

00:03:58,390 --> 00:04:03,940
modules at runtime to move it into a

00:04:01,269 --> 00:04:06,940
separate chunk so now I'll be having

00:04:03,940 --> 00:04:10,630
three chunks basically one would be for

00:04:06,940 --> 00:04:13,980
my async async routes second would be my

00:04:10,630 --> 00:04:18,070
vendor and third would be my run time

00:04:13,980 --> 00:04:23,650
again a fact sequence of all these

00:04:18,070 --> 00:04:25,510
common chunks matters so after that once

00:04:23,650 --> 00:04:28,300
I have configured common cheong common

00:04:25,510 --> 00:04:31,120
chunk then I'll configure the entry and

00:04:28,300 --> 00:04:33,520
output points for web pack so the entry

00:04:31,120 --> 00:04:36,570
point tells web pack where to start and

00:04:33,520 --> 00:04:38,050
the output property of the web pack

00:04:36,570 --> 00:04:41,200
identifies for uh

00:04:38,050 --> 00:04:45,580
identifier options related to the output

00:04:41,200 --> 00:04:46,300
emitted by the of a pack so we are done

00:04:45,580 --> 00:04:50,949
with the first

00:04:46,300 --> 00:04:54,970
second is using dynamic inputs so weapon

00:04:50,949 --> 00:04:58,300
has a very great property like dynamic

00:04:54,970 --> 00:05:01,289
inputs using which we can actually load

00:04:58,300 --> 00:05:03,970
the asynchronous bundles at runtime so

00:05:01,289 --> 00:05:06,090
as soon as the as soon as webpack

00:05:03,970 --> 00:05:08,680
identifies this import statement it

00:05:06,090 --> 00:05:11,740
recognizes that it has to be splitted

00:05:08,680 --> 00:05:13,360
out into a separate bundle and the if

00:05:11,740 --> 00:05:16,599
you remember in common shanks plugin i

00:05:13,360 --> 00:05:18,190
used a sink equals to true so using a

00:05:16,599 --> 00:05:20,620
sequel to true and the import statement

00:05:18,190 --> 00:05:24,699
web pack identifies how to split out my

00:05:20,620 --> 00:05:26,800
bundles now if you guys are already

00:05:24,699 --> 00:05:29,400
aware with react Rooter so react wrote

00:05:26,800 --> 00:05:32,620
afore came up with the major rewrite

00:05:29,400 --> 00:05:35,819
which was everything was components in

00:05:32,620 --> 00:05:38,710
reactor four so we missed out common

00:05:35,819 --> 00:05:41,379
property of react Rooter which was gate

00:05:38,710 --> 00:05:43,719
component which allowed us to split out

00:05:41,379 --> 00:05:47,409
my application and load the asynchronous

00:05:43,719 --> 00:05:51,340
bundles at runtime so now what we can do

00:05:47,409 --> 00:05:54,729
with that so sit back and relax I'm a

00:05:51,340 --> 00:05:58,360
small library which actually loads

00:05:54,729 --> 00:06:01,659
bundles at runtime so this is how it

00:05:58,360 --> 00:06:06,009
works this is the this is my routes J

00:06:01,659 --> 00:06:08,400
routes file so first I'm importing this

00:06:06,009 --> 00:06:10,599
component chunk from reaction cable

00:06:08,400 --> 00:06:13,240
second is I have written a higher-order

00:06:10,599 --> 00:06:15,159
function which is using commons module

00:06:13,240 --> 00:06:17,949
plug-in provided by web pack it says

00:06:15,159 --> 00:06:23,020
here pack give me all the modules in

00:06:17,949 --> 00:06:25,029
this relative path then this is the

00:06:23,020 --> 00:06:27,629
function which actually uses component

00:06:25,029 --> 00:06:31,050
chunks it has two properties the

00:06:27,629 --> 00:06:34,060
component props which are used by the

00:06:31,050 --> 00:06:35,560
routes at runtime and second is the

00:06:34,060 --> 00:06:37,889
module name which has to be which I

00:06:35,560 --> 00:06:40,750
which is to be loaded asynchronously so

00:06:37,889 --> 00:06:44,860
here we are we are done with all the

00:06:40,750 --> 00:06:47,610
three points so this is already open

00:06:44,860 --> 00:06:51,969
source you can go out and check out this

00:06:47,610 --> 00:06:56,789
this is the link to the slides DMS are

00:06:51,969 --> 00:06:56,789
open you can say hi thank you

00:06:57,760 --> 00:07:04,160
great colors thank you very much now we

00:07:01,130 --> 00:07:07,370
have the sweet time to ask some

00:07:04,160 --> 00:07:09,260
questions and don't guys I know it's

00:07:07,370 --> 00:07:11,750
after lunch but please take out your

00:07:09,260 --> 00:07:13,880
phones law again you already know the

00:07:11,750 --> 00:07:15,110
login ask questions and up for the ones

00:07:13,880 --> 00:07:17,180
that you want me to read with my

00:07:15,110 --> 00:07:18,770
fantastic understanding of all this

00:07:17,180 --> 00:07:22,300
technology what do you think about

00:07:18,770 --> 00:07:25,160
reloadable for code splitting okay

00:07:22,300 --> 00:07:27,580
always answer this okay so I am NOT

00:07:25,160 --> 00:07:30,980
saying that this is the best friend or I

00:07:27,580 --> 00:07:33,650
am computing with react loadable react

00:07:30,980 --> 00:07:36,940
loadable is very great this is just what

00:07:33,650 --> 00:07:39,260
was suitable for my need so I just

00:07:36,940 --> 00:07:43,430
created a small library out of my

00:07:39,260 --> 00:07:46,760
working example so the other one next to

00:07:43,430 --> 00:07:48,860
next question do you have experience

00:07:46,760 --> 00:07:51,230
with code splitting in an SS our

00:07:48,860 --> 00:07:53,390
environments and we recommend the trolls

00:07:51,230 --> 00:07:55,910
react universal components question mark

00:07:53,390 --> 00:07:57,890
ok so yes react universal component and

00:07:55,910 --> 00:08:01,100
you can also use react loadable if you

00:07:57,890 --> 00:08:05,180
are if you are intended to do code

00:08:01,100 --> 00:08:07,300
splitting using SS are okay why not use

00:08:05,180 --> 00:08:10,940
the I I plugin instead

00:08:07,300 --> 00:08:12,970
okay I'm not aware maybe I'll secure so

00:08:10,940 --> 00:08:16,690
what is the difference to react loadable

00:08:12,970 --> 00:08:20,900
okay so there are main differences I

00:08:16,690 --> 00:08:23,780
have not amused I'm not able to crack

00:08:20,900 --> 00:08:26,600
the SS are with the reaction cable so

00:08:23,780 --> 00:08:30,980
yes maybe you can go with react loadable

00:08:26,600 --> 00:08:33,290
for SSR with using react root of 4 so

00:08:30,980 --> 00:08:35,960
asked question the react router guys

00:08:33,290 --> 00:08:38,120
intentionally removed code splitting

00:08:35,960 --> 00:08:40,940
capabilities from it why should we

00:08:38,120 --> 00:08:43,250
replant pre implements them so if you

00:08:40,940 --> 00:08:45,410
will go out and check out their repo ran

00:08:43,250 --> 00:08:48,260
Florence have had actually answered this

00:08:45,410 --> 00:08:50,570
question I mean the way they have

00:08:48,260 --> 00:08:55,820
created the react root of 4

00:08:50,570 --> 00:08:58,160
so maybe what you need is the SEO the

00:08:55,820 --> 00:09:00,290
SEO is able to track your applications

00:08:58,160 --> 00:09:03,470
or not so yes using react root of 4

00:09:00,290 --> 00:09:05,990
without using SSL or SEO is actually

00:09:03,470 --> 00:09:09,230
able to grab your links so yes the

00:09:05,990 --> 00:09:09,920
that's why they didn't actually spend so

00:09:09,230 --> 00:09:12,320
much of time

00:09:09,920 --> 00:09:14,649
achieving SS huh come lish thank you

00:09:12,320 --> 00:09:14,649
very much

00:09:20,130 --> 00:09:22,190

YouTube URL: https://www.youtube.com/watch?v=urW99xVmy1I


