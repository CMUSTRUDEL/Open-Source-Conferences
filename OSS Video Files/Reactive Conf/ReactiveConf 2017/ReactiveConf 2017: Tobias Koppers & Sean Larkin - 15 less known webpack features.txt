Title: ReactiveConf 2017: Tobias Koppers & Sean Larkin - 15 less known webpack features
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Festival Friday

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:14,720 --> 00:00:21,350
so they come and yeah you hundreds if

00:00:18,289 --> 00:00:24,110
I'd only you try to do the talk this

00:00:21,350 --> 00:00:28,759
slot but he got sick so we do take the

00:00:24,110 --> 00:00:32,480
placement talk for a web peg yes so who

00:00:28,759 --> 00:00:34,820
was here a yesterday for our talk in the

00:00:32,480 --> 00:00:38,000
discovery stage okay cool

00:00:34,820 --> 00:00:40,190
thanks you you're getting it again but

00:00:38,000 --> 00:00:43,640
doesn't talk okay we want to talk today

00:00:40,190 --> 00:00:47,840
a short talk about fifty not very known

00:00:43,640 --> 00:00:50,390
epic features so absolutely we have a

00:00:47,840 --> 00:00:53,300
very short title keep it short not very

00:00:50,390 --> 00:00:56,030
wary of explained and no amazing

00:00:53,300 --> 00:00:59,649
animation we haven't time I try to get

00:00:56,030 --> 00:01:03,260
to talk in the Twain so okay thanks and

00:00:59,649 --> 00:01:05,840
yeah but you want you will see some code

00:01:03,260 --> 00:01:11,000
samples so it's super great all code is

00:01:05,840 --> 00:01:13,880
the best explanation so import so and

00:01:11,000 --> 00:01:17,330
not like we went on is said WebEx we

00:01:13,880 --> 00:01:18,220
edit a new syntax for importing for the

00:01:17,330 --> 00:01:20,690
lazy boarding

00:01:18,220 --> 00:01:23,840
it's called import it's covered by is a

00:01:20,690 --> 00:01:27,830
Akuma script spec and also supported by

00:01:23,840 --> 00:01:30,740
Chrome and Safari natively and yeah it's

00:01:27,830 --> 00:01:34,429
looking this way it was just a pass and

00:01:30,740 --> 00:01:37,429
module name Tunes imports function its

00:01:34,429 --> 00:01:39,709
kind of function and it will return a

00:01:37,429 --> 00:01:41,780
promise which will resolve to the module

00:01:39,709 --> 00:01:45,440
was the name state the whole namespace

00:01:41,780 --> 00:01:47,300
of the module ik mashup module also

00:01:45,440 --> 00:01:50,750
great to come by it with awesome

00:01:47,300 --> 00:01:53,539
functions await available and yeah epic

00:01:50,750 --> 00:01:56,450
basically takes this and split your

00:01:53,539 --> 00:01:59,179
application at this point and you will

00:01:56,450 --> 00:02:02,270
get better performance yes so this is

00:01:59,179 --> 00:02:04,759
something you wanna use when ever so for

00:02:02,270 --> 00:02:06,260
example if you're using like a chrome

00:02:04,759 --> 00:02:08,780
coverage feature you can see

00:02:06,260 --> 00:02:11,600
code is used up front by percentage and

00:02:08,780 --> 00:02:14,390
so code that isn't actually used on your

00:02:11,600 --> 00:02:16,820
initial render of your page but is being

00:02:14,390 --> 00:02:18,920
used at a later time whether it's below

00:02:16,820 --> 00:02:21,380
the fold or it's in a different route or

00:02:18,920 --> 00:02:23,660
something else you should be using the

00:02:21,380 --> 00:02:25,790
dynamic import statement because it's

00:02:23,660 --> 00:02:30,710
going to a synchronously load any of the

00:02:25,790 --> 00:02:32,660
code until it's actually needed so and

00:02:30,710 --> 00:02:35,750
import function has some great features

00:02:32,660 --> 00:02:38,000
and bit additions the Nok not covered

00:02:35,750 --> 00:02:39,650
pass a spec and and we try to make it

00:02:38,000 --> 00:02:41,810
backward compatible with a metric

00:02:39,650 --> 00:02:45,020
comment so it's shouldn't break other

00:02:41,810 --> 00:02:47,600
things the native support of Chrome and

00:02:45,020 --> 00:02:50,810
so so you basically add a comment within

00:02:47,600 --> 00:02:52,700
Jason like syntax in the comment and can

00:02:50,810 --> 00:02:54,830
add some metadata to the import

00:02:52,700 --> 00:02:57,800
statement example you can give and in

00:02:54,830 --> 00:03:00,350
there the chunk a name which is if you

00:02:57,800 --> 00:03:02,450
run to a file name of the chunk you

00:03:00,350 --> 00:03:06,709
better debugging you see what files

00:03:02,450 --> 00:03:09,290
loaded or yeah and it's also combined

00:03:06,709 --> 00:03:11,810
able with expressions here we used

00:03:09,290 --> 00:03:14,330
template strings to add some name or

00:03:11,810 --> 00:03:17,030
some expression like statement into the

00:03:14,330 --> 00:03:20,450
into the import statement and the metric

00:03:17,030 --> 00:03:23,600
is here M web equates and shank pair

00:03:20,450 --> 00:03:26,060
each expression possible so and you get

00:03:23,600 --> 00:03:28,730
basically for every route or for every

00:03:26,060 --> 00:03:31,580
page or for every template you have you

00:03:28,730 --> 00:03:34,519
get an chunk and import statement only

00:03:31,580 --> 00:03:35,720
lots of chunk you requested so it's very

00:03:34,519 --> 00:03:41,090
yeah

00:03:35,720 --> 00:03:44,120
it's quick yeah so this if you're used

00:03:41,090 --> 00:03:45,560
to using require ensure we recommend

00:03:44,120 --> 00:03:47,930
using this because then you can leverage

00:03:45,560 --> 00:03:50,480
all the features such as the naming for

00:03:47,930 --> 00:03:51,890
the chunks but this is also really

00:03:50,480 --> 00:03:53,769
beneficial if you use top module

00:03:51,890 --> 00:03:56,600
replacement and you want to be able to

00:03:53,769 --> 00:03:57,459
re-request inside of the pop dot module

00:03:56,600 --> 00:03:59,590
except

00:03:57,459 --> 00:04:02,590
the important statements of the eager so

00:03:59,590 --> 00:04:07,409
that it's similar oh and that's it

00:04:02,590 --> 00:04:11,319
next slide okay there yeah and you maybe

00:04:07,409 --> 00:04:14,230
wanted to have a chunk pea expression

00:04:11,319 --> 00:04:16,449
but and you can opt into other behaviors

00:04:14,230 --> 00:04:19,509
it's in default behavior is a lazy one

00:04:16,449 --> 00:04:22,710
so every every expression is in in its

00:04:19,509 --> 00:04:26,169
own chunk but it's also a lazy one so

00:04:22,710 --> 00:04:28,330
it's in it every expression is in one

00:04:26,169 --> 00:04:31,570
extra chunk but it's an extra song and

00:04:28,330 --> 00:04:34,900
so CJ one which is basically like

00:04:31,570 --> 00:04:38,440
synchronous so it's it's stable returns

00:04:34,900 --> 00:04:42,490
a promise but M say modules are already

00:04:38,440 --> 00:04:44,650
included in the chunk you in so it's not

00:04:42,490 --> 00:04:47,680
doing network requests but it returns a

00:04:44,650 --> 00:04:51,099
promise which resolves instantly yeah

00:04:47,680 --> 00:04:54,580
there's also a hidden one this mode week

00:04:51,099 --> 00:04:58,210
which doesn't which doesn't include

00:04:54,580 --> 00:04:59,349
their files as a modules it and we

00:04:58,210 --> 00:05:01,210
checked the permits if it's not

00:04:59,349 --> 00:05:04,090
available and it's resolved it promise

00:05:01,210 --> 00:05:06,070
if it's already available so you may be

00:05:04,090 --> 00:05:07,690
it's available and it's which one

00:05:06,070 --> 00:05:10,060
synchronously or returns the promise

00:05:07,690 --> 00:05:11,590
with already resolved and if not not

00:05:10,060 --> 00:05:14,979
available it doesn't do a network

00:05:11,590 --> 00:05:21,310
request but just says yeah we happen to

00:05:14,979 --> 00:05:25,930
modulate yeah it's kind of a feature for

00:05:21,310 --> 00:05:28,690
SSL so and basically in SSR um already

00:05:25,930 --> 00:05:35,919
you have said modules available and want

00:05:28,690 --> 00:05:39,729
to don't want to do a network request so

00:05:35,919 --> 00:05:42,940
um yet know there's a bunch of resolving

00:05:39,729 --> 00:05:46,599
features and ways of alias is the first

00:05:42,940 --> 00:05:49,659
one so here you can redirect module

00:05:46,599 --> 00:05:52,479
request in WebEx so you just say ah my

00:05:49,659 --> 00:05:54,820
code biased use underscore but notice

00:05:52,479 --> 00:05:59,349
seems to be better and so a smaller and

00:05:54,820 --> 00:06:01,750
you can just say Elias underscore - no -

00:05:59,349 --> 00:06:05,010
and in metric we automatically resolve

00:06:01,750 --> 00:06:09,070
any require underscore to acquire no -

00:06:05,010 --> 00:06:10,470
also great for here we will place low -

00:06:09,070 --> 00:06:13,070
with low - yes which

00:06:10,470 --> 00:06:15,390
a quick version of loaders which

00:06:13,070 --> 00:06:19,200
supports better tree shaking so it's mo

00:06:15,390 --> 00:06:20,640
optimized or sometimes and modules have

00:06:19,200 --> 00:06:23,820
one package

00:06:20,640 --> 00:06:26,270
Jason fits one main field or you want to

00:06:23,820 --> 00:06:29,820
point to a production version of some

00:06:26,270 --> 00:06:34,140
distribution module so you can we solve

00:06:29,820 --> 00:06:37,080
module request to inner modules it's a

00:06:34,140 --> 00:06:40,800
missing main field and and all the cool

00:06:37,080 --> 00:06:42,720
is to have like and you don't want to

00:06:40,800 --> 00:06:46,110
have the dot slash dot dot slash dot

00:06:42,720 --> 00:06:47,910
slash behavior so you can just say app

00:06:46,110 --> 00:06:49,650
is my root of my application if you

00:06:47,910 --> 00:06:52,560
resolve it with the would offer Kim and

00:06:49,650 --> 00:06:56,550
now you can write require ab / something

00:06:52,560 --> 00:07:00,980
to always go back to the hood many

00:06:56,550 --> 00:07:03,900
people just always a tiled and so it's

00:07:00,980 --> 00:07:07,440
yeah the Tildy is really common in like

00:07:03,900 --> 00:07:08,790
/ UJS or like next or next they use kind

00:07:07,440 --> 00:07:12,120
of this pattern here out of the box

00:07:08,790 --> 00:07:14,340
where it makes it easier to require

00:07:12,120 --> 00:07:15,900
require modules from different folders

00:07:14,340 --> 00:07:17,520
or different locations because it always

00:07:15,900 --> 00:07:19,800
points back to let's say a root folder

00:07:17,520 --> 00:07:21,390
your source folder so this is just a

00:07:19,800 --> 00:07:23,630
simple way to make your required

00:07:21,390 --> 00:07:26,780
statements easier when you're relatively

00:07:23,630 --> 00:07:30,510
requiring them between different modules

00:07:26,780 --> 00:07:33,479
yes great and we saw what you it's it's

00:07:30,510 --> 00:07:36,660
something similar so em with this option

00:07:33,479 --> 00:07:39,060
you just say you set say say look up

00:07:36,660 --> 00:07:39,990
folder for all the modules in the in the

00:07:39,060 --> 00:07:42,510
application Zoe

00:07:39,990 --> 00:07:44,790
like I say require an underscore and

00:07:42,510 --> 00:07:48,030
that pic looks it by default it looks it

00:07:44,790 --> 00:07:50,100
up in the node modules folder but here

00:07:48,030 --> 00:07:52,140
you can modify this behavior so maybe

00:07:50,100 --> 00:07:54,150
you want to have your own folder with

00:07:52,140 --> 00:07:56,580
modules maybe you'll have a modularized

00:07:54,150 --> 00:07:59,640
code base or even just passed an

00:07:56,580 --> 00:08:03,960
absolute fat and to the folder where my

00:07:59,640 --> 00:08:06,690
modules are so and don't forget to m at

00:08:03,960 --> 00:08:09,390
city fort one so we NPN module stays

00:08:06,690 --> 00:08:11,760
works so and I think if you pass an

00:08:09,390 --> 00:08:14,850
absolute fat you get resolving in this

00:08:11,760 --> 00:08:17,130
so in this folder if you pass and for

00:08:14,850 --> 00:08:19,410
the name it looks up all the node

00:08:17,130 --> 00:08:22,530
modules in the directory tree from your

00:08:19,410 --> 00:08:24,159
relative to require statement so yeah

00:08:22,530 --> 00:08:26,559
always in the power and for

00:08:24,159 --> 00:08:28,149
and if it's fun untied song this is

00:08:26,559 --> 00:08:30,309
useful for life let's see if you have a

00:08:28,149 --> 00:08:32,469
mono repo or you have like hundreds of

00:08:30,309 --> 00:08:35,079
personal flake packages that you want to

00:08:32,469 --> 00:08:37,419
try and resolve first now you can pass

00:08:35,079 --> 00:08:39,370
that directory and think of like a flat

00:08:37,419 --> 00:08:40,779
module you know or like a flat folder of

00:08:39,370 --> 00:08:42,430
packages that you might have locally

00:08:40,779 --> 00:08:44,199
it'll maybe easier to automatically

00:08:42,430 --> 00:08:49,269
resolve those just as if there were no

00:08:44,199 --> 00:08:52,509
modules themselves so we're sort of

00:08:49,269 --> 00:08:54,850
clock ends and in its not very known but

00:08:52,509 --> 00:08:57,819
it's well known that they pick the pods

00:08:54,850 --> 00:09:00,279
plug ins but we solve pod plugins is

00:08:57,819 --> 00:09:02,680
also in plugins for the resolver so you

00:09:00,279 --> 00:09:05,500
can y2a solving click in switch have

00:09:02,680 --> 00:09:09,160
custom behavior support you legacy code

00:09:05,500 --> 00:09:11,829
base oh yeah by migrating you can point

00:09:09,160 --> 00:09:14,980
some matrix stuff to something else so

00:09:11,829 --> 00:09:17,920
so so it's just to know you can write

00:09:14,980 --> 00:09:19,420
plug-ins for so I think you popular one

00:09:17,920 --> 00:09:20,949
in the react community is like the

00:09:19,420 --> 00:09:22,149
ability like you know they kinda have

00:09:20,949 --> 00:09:24,430
the naming convention where it's like

00:09:22,149 --> 00:09:26,259
the folder name and then because they

00:09:24,430 --> 00:09:27,850
didn't want to have an index jsm where

00:09:26,259 --> 00:09:28,569
they do like name of the component Jeff

00:09:27,850 --> 00:09:30,519
JSX

00:09:28,569 --> 00:09:33,310
you know people have written a resolver

00:09:30,519 --> 00:09:34,990
for like a resolver plug-in to basically

00:09:33,310 --> 00:09:38,439
automatically resolve that by request

00:09:34,990 --> 00:09:40,180
and yes they'd like to have the name of

00:09:38,439 --> 00:09:43,149
the file in the in the code editor

00:09:40,180 --> 00:09:46,870
because it's always shows as a base name

00:09:43,149 --> 00:09:49,600
so looks better but em it's be careful

00:09:46,870 --> 00:09:52,120
with this stuff because if you try to

00:09:49,600 --> 00:09:54,550
try to stick with the default dissolving

00:09:52,120 --> 00:09:59,050
stuff because getting incompatibility to

00:09:54,550 --> 00:10:00,550
non WebEx stuff if you want to sometimes

00:09:59,050 --> 00:10:03,279
in the future maybe is something else

00:10:00,550 --> 00:10:07,449
web pop-up or so it's better than there

00:10:03,279 --> 00:10:12,009
peg so and you can't easily migrate to

00:10:07,449 --> 00:10:16,209
this don't expect this about okay and

00:10:12,009 --> 00:10:18,579
output library and you can use webpack

00:10:16,209 --> 00:10:20,470
to create libraries and which is

00:10:18,579 --> 00:10:22,930
supported by this output library option

00:10:20,470 --> 00:10:25,660
and output library target option so you

00:10:22,930 --> 00:10:28,180
can just say it's the name of my level

00:10:25,660 --> 00:10:30,490
my lip and that will target there are

00:10:28,180 --> 00:10:31,899
multiple options between empty modules

00:10:30,490 --> 00:10:35,529
come trays modules

00:10:31,899 --> 00:10:38,019
global variables or um D which its kind

00:10:35,529 --> 00:10:41,709
of automatically choose the right one

00:10:38,019 --> 00:10:45,579
for you so this just it's some header to

00:10:41,709 --> 00:10:49,269
the to the bundle and create some come

00:10:45,579 --> 00:10:53,230
chest export so our MD defines or them

00:10:49,269 --> 00:10:55,600
to a gym D header it also it's also

00:10:53,230 --> 00:10:59,679
affected by the external option so if

00:10:55,600 --> 00:11:01,809
you have excess say if you example use

00:10:59,679 --> 00:11:04,989
low - as external become lettuces and

00:11:01,809 --> 00:11:16,420
then a it's a defined function includes

00:11:04,989 --> 00:11:18,189
a dependency and to this I mean in your

00:11:16,420 --> 00:11:20,199
application code and this library will

00:11:18,189 --> 00:11:25,689
look for that dependency to be available

00:11:20,199 --> 00:11:27,999
when you use it yeah this in the seismic

00:11:25,689 --> 00:11:31,959
death - it is very known but there's

00:11:27,999 --> 00:11:36,040
also a less optimized web dev tools it's

00:11:31,959 --> 00:11:38,350
either to a dev tool it's not don't have

00:11:36,040 --> 00:11:40,420
the same quality is it source mapping

00:11:38,350 --> 00:11:42,309
dev to it but it's not a lot faster so

00:11:40,420 --> 00:11:45,639
it's maybe an option for you if you

00:11:42,309 --> 00:11:49,209
don't have heavily transpired modules or

00:11:45,639 --> 00:11:51,309
can we transport code or don't use paper

00:11:49,209 --> 00:11:54,879
or something like that well yeah and

00:11:51,309 --> 00:11:56,740
yeah something you should keep the

00:11:54,879 --> 00:11:59,829
consideration is that don't use this in

00:11:56,740 --> 00:12:01,660
production eval will just basically wrap

00:11:59,829 --> 00:12:04,869
your entire module function in your

00:12:01,660 --> 00:12:06,519
bundle in a string and you valid so the

00:12:04,869 --> 00:12:11,139
size your bundles gets considerably

00:12:06,519 --> 00:12:15,160
larger as well and yes and you know eval

00:12:11,139 --> 00:12:16,899
D ops so is this a good table in the

00:12:15,160 --> 00:12:18,759
documentation which lists all the dev

00:12:16,899 --> 00:12:20,740
tools and if they're production ready if

00:12:18,759 --> 00:12:24,249
they which quality of codes they produce

00:12:20,740 --> 00:12:24,910
which if they're fast or slow and you

00:12:24,249 --> 00:12:28,929
can look it up

00:12:24,910 --> 00:12:32,169
if you interested so and if you like the

00:12:28,929 --> 00:12:34,209
sauce mapping stuff and but you don't

00:12:32,169 --> 00:12:37,629
think it's flexible enough for your case

00:12:34,209 --> 00:12:40,089
and there's a you can instead of the dev

00:12:37,629 --> 00:12:41,889
tool sauce map you can use a source map

00:12:40,089 --> 00:12:45,189
def to plug in which is the plugin which

00:12:41,889 --> 00:12:48,220
have a lot of options in example you can

00:12:45,189 --> 00:12:50,889
exclude vendor Chung's you can filter by

00:12:48,220 --> 00:12:51,880
name you can pass additional options use

00:12:50,889 --> 00:12:54,880
another command

00:12:51,880 --> 00:12:57,690
and for the sourcemap it's great if you

00:12:54,880 --> 00:13:02,440
need more flexible flexibility for

00:12:57,690 --> 00:13:08,340
assortments it's also for event and evil

00:13:02,440 --> 00:13:10,630
sauce map test too so so externals and

00:13:08,340 --> 00:13:14,350
experience basically allows you to

00:13:10,630 --> 00:13:16,270
reference and modules which aren't

00:13:14,350 --> 00:13:17,650
included in the panel that you want to

00:13:16,270 --> 00:13:21,160
reference and from the environment

00:13:17,650 --> 00:13:24,370
example you have lodash from CDN and you

00:13:21,160 --> 00:13:27,220
want to include this one to include his

00:13:24,370 --> 00:13:30,550
MJ lodash liberia skeptic and then you

00:13:27,220 --> 00:13:32,590
can just pass some externals

00:13:30,550 --> 00:13:34,990
configuration and loaders will be used

00:13:32,590 --> 00:13:36,910
from from CDN with your script check

00:13:34,990 --> 00:13:39,400
from the script X so it's been used from

00:13:36,910 --> 00:13:41,380
global scope and there many options you

00:13:39,400 --> 00:13:45,250
can pass like a regular expressions

00:13:41,380 --> 00:13:48,820
exactly all react specific modules are

00:13:45,250 --> 00:13:51,780
external you can pass a custom function

00:13:48,820 --> 00:13:54,670
which allows you to choose at one time

00:13:51,780 --> 00:13:57,910
yeah not at one time and at compile time

00:13:54,670 --> 00:14:01,690
and there's a complex a configuration

00:13:57,910 --> 00:14:04,480
for if you see um de target the basic

00:14:01,690 --> 00:14:06,820
and choose which but what is behavior

00:14:04,480 --> 00:14:09,400
for loader for calm J is for MT or if

00:14:06,820 --> 00:14:16,980
it's in the global scope because some

00:14:09,400 --> 00:14:20,230
lobbyists have differences you just

00:14:16,980 --> 00:14:22,960
white require a low - and the epoch

00:14:20,230 --> 00:14:25,510
won't look it up in the node modules for

00:14:22,960 --> 00:14:28,810
it I assume it's available and the one

00:14:25,510 --> 00:14:30,040
time at one time in the environment so

00:14:28,810 --> 00:14:32,800
you don't have to change the code base

00:14:30,040 --> 00:14:35,740
you just have this corporation and still

00:14:32,800 --> 00:14:40,600
white what lower and it escaped modules

00:14:35,740 --> 00:14:42,880
come to s modules in the code base so

00:14:40,600 --> 00:14:45,730
and yeah it's not been known that the

00:14:42,880 --> 00:14:48,940
epoch has other targets and web it can

00:14:45,730 --> 00:14:52,090
compile in example can compile code for

00:14:48,940 --> 00:14:55,210
electron so it basically you have a

00:14:52,090 --> 00:14:56,620
target option which can have electro

00:14:55,210 --> 00:14:59,440
main electron vendor and it

00:14:56,620 --> 00:15:01,930
automatically choose native modules

00:14:59,440 --> 00:15:05,470
forces and the right pattern for code

00:15:01,930 --> 00:15:10,750
for code splitting how to form lazy

00:15:05,470 --> 00:15:14,020
loading good no yeah and there's also a

00:15:10,750 --> 00:15:18,130
no J's target which you said yesterday

00:15:14,020 --> 00:15:21,280
but um no target note target us ignored

00:15:18,130 --> 00:15:24,790
with Susan a sink way to large chunks

00:15:21,280 --> 00:15:28,480
and juggernaut Louis just uses required

00:15:24,790 --> 00:15:30,700
chunks it and it's great because it

00:15:28,480 --> 00:15:33,550
makes the code faster no chess because

00:15:30,700 --> 00:15:36,750
no chess has very slow and synchronous

00:15:33,550 --> 00:15:40,570
require statement so it's basically all

00:15:36,750 --> 00:15:42,700
sequencer and if it's pandered it's much

00:15:40,570 --> 00:15:46,690
faster because it just has to read one

00:15:42,700 --> 00:15:49,120
file no i/o and super fast yeah but it's

00:15:46,690 --> 00:15:51,940
M may be difficult or ever to do Oh

00:15:49,120 --> 00:15:54,070
mister it's a good experience to try hot

00:15:51,940 --> 00:15:55,570
module replacement with nodejs if you

00:15:54,070 --> 00:16:01,840
have never tried it before you should I

00:15:55,570 --> 00:16:05,020
recommend it okay some cash and Chung

00:16:01,840 --> 00:16:07,510
cash it's a nice function to allow us to

00:16:05,020 --> 00:16:11,680
obtain into long term caching so

00:16:07,510 --> 00:16:13,960
basically give it this place out in some

00:16:11,680 --> 00:16:17,950
options file name chunk file name output

00:16:13,960 --> 00:16:20,470
fat weight or not but fine aim and it's

00:16:17,950 --> 00:16:23,770
epic we replace it with an hash of the

00:16:20,470 --> 00:16:27,160
file so you can just cash our files

00:16:23,770 --> 00:16:29,830
forever and every time you recompile and

00:16:27,160 --> 00:16:33,820
file changed it will have a new hash so

00:16:29,830 --> 00:16:36,520
it's basically automatically yeah and we

00:16:33,820 --> 00:16:38,710
had a question yesterday M final file

00:16:36,520 --> 00:16:41,350
name can be found in the stats and if

00:16:38,710 --> 00:16:45,010
you you you have the problem you need to

00:16:41,350 --> 00:16:47,440
edit script tag to the hit HTML file but

00:16:45,010 --> 00:16:50,020
you don't know which hash has it at one

00:16:47,440 --> 00:16:53,680
time so you can export the stats of

00:16:50,020 --> 00:16:56,800
webpack repetitive is the epics test -

00:16:53,680 --> 00:16:59,350
Jason the subtract in which stretches to

00:16:56,800 --> 00:17:04,830
a file and in this topic there's a

00:16:59,350 --> 00:17:07,930
mapping from a chunk name to fine name

00:17:04,830 --> 00:17:10,630
other words if you use a HTML epic

00:17:07,930 --> 00:17:14,830
dragon it will ultimately choose user

00:17:10,630 --> 00:17:17,740
right fine name for the record

00:17:14,830 --> 00:17:19,000
and the problem is aimed in this trunk

00:17:17,740 --> 00:17:23,020
hashes is said

00:17:19,000 --> 00:17:25,300
you try to have to avoid that the chunks

00:17:23,020 --> 00:17:29,020
are changing but web make ultimately

00:17:25,300 --> 00:17:31,780
choose module IDs for you so if you add

00:17:29,020 --> 00:17:34,900
some module all the module names which

00:17:31,780 --> 00:17:37,930
number egg and in sequential maybe

00:17:34,900 --> 00:17:40,120
invalidate some vendor Jango unwanted

00:17:37,930 --> 00:17:41,800
changes in the abundant so there's a

00:17:40,120 --> 00:17:44,650
feature which called records which

00:17:41,800 --> 00:17:49,480
allows you to store as a mapping from

00:17:44,650 --> 00:17:51,730
module name to module ID and we use it

00:17:49,480 --> 00:17:54,760
and on the next compilation so beta

00:17:51,730 --> 00:17:57,670
gates to us a file and we uses the

00:17:54,760 --> 00:18:00,940
modules for from from the records files

00:17:57,670 --> 00:18:04,060
so they never is they never changed if

00:18:00,940 --> 00:18:05,980
you have records but the problem is you

00:18:04,060 --> 00:18:08,140
have to keep this file somewhere and

00:18:05,980 --> 00:18:10,590
pass it to the next compilation it's

00:18:08,140 --> 00:18:13,030
maybe a bit infrastructure overhead I

00:18:10,590 --> 00:18:17,680
can recommend a network layer for

00:18:13,030 --> 00:18:20,890
stowing this file checking m2 committees

00:18:17,680 --> 00:18:23,380
is not set great so basically I'm

00:18:20,890 --> 00:18:26,200
networks is the best option so if you

00:18:23,380 --> 00:18:28,270
don't want to use this overhead with

00:18:26,200 --> 00:18:31,180
infrastructure there's an alternative

00:18:28,270 --> 00:18:35,380
and which doesn't great sit optimize

00:18:31,180 --> 00:18:38,230
Pandits but it basically use the chat as

00:18:35,380 --> 00:18:41,350
a module name is module ID so it's just

00:18:38,230 --> 00:18:43,600
at wing with a module name and it's also

00:18:41,350 --> 00:18:47,020
useful for debugging because you see all

00:18:43,600 --> 00:18:49,990
the names in your bundle but there's a

00:18:47,020 --> 00:18:52,540
disadvantages say you if you use it in

00:18:49,990 --> 00:18:54,400
production is your customer can see your

00:18:52,540 --> 00:18:56,350
file structure of your applications to

00:18:54,400 --> 00:18:59,620
basically which fast which which file

00:18:56,350 --> 00:19:03,730
names the modules are and maybe the D

00:18:59,620 --> 00:19:06,610
compile it to some you know knowledge so

00:19:03,730 --> 00:19:08,800
it also increases the panel size be a

00:19:06,610 --> 00:19:10,870
bit because numbers are shorter than

00:19:08,800 --> 00:19:13,780
strings but

00:19:10,870 --> 00:19:16,480
keys keys if it's not said much affected

00:19:13,780 --> 00:19:28,230
because it's strings and also kiseop

00:19:16,480 --> 00:19:31,150
very good ok and there's an alternative

00:19:28,230 --> 00:19:32,890
the hashed mode you plug in and which

00:19:31,150 --> 00:19:35,950
basic just the same but

00:19:32,890 --> 00:19:38,010
hashes murder names which increase the

00:19:35,950 --> 00:19:41,890
balance has a lot more and also the

00:19:38,010 --> 00:19:46,120
gzipped size but it doesn't leak their

00:19:41,890 --> 00:19:48,550
names so it's the last one and it's a

00:19:46,120 --> 00:19:52,180
deal a plugin which basically allows you

00:19:48,550 --> 00:19:54,540
to and just a separate compilation with

00:19:52,180 --> 00:19:58,690
some of the modules and we use this

00:19:54,540 --> 00:20:01,510
bundle in your india application bundle

00:19:58,690 --> 00:20:03,700
so we basically to to script x1 wizardy

00:20:01,510 --> 00:20:05,830
red bundle and one dose application

00:20:03,700 --> 00:20:08,490
bundle and the application bundle points

00:20:05,830 --> 00:20:12,190
with the reference clock into the

00:20:08,490 --> 00:20:15,580
manifest and uses modules inside it's

00:20:12,190 --> 00:20:19,630
great for a bit performance and you can

00:20:15,580 --> 00:20:24,310
use a blender bundled services in idea

00:20:19,630 --> 00:20:26,230
but disadvantage disadvantages you get

00:20:24,310 --> 00:20:28,240
note which hiking or scope highest in

00:20:26,230 --> 00:20:31,630
Sedalia partly because every module has

00:20:28,240 --> 00:20:37,210
to has to be exposed to the application

00:20:31,630 --> 00:20:39,690
bundle here's an oosik example yep okay

00:20:37,210 --> 00:20:39,690
thanks

00:20:41,710 --> 00:20:46,789
[Applause]

00:20:52,000 --> 00:20:54,060

YouTube URL: https://www.youtube.com/watch?v=2EaP3a6E4B0


