Title: ReactiveConf 2017: Andrey Sitnik - Using Logux in Production
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,020 --> 00:00:08,639
[Music]

00:00:14,570 --> 00:00:23,240
hello everyone my name is Marisa dick

00:00:19,369 --> 00:00:24,890
I'm from Russia son Petersburg I'm Lee's

00:00:23,240 --> 00:00:27,560
pretend developer in idle Martians team

00:00:24,890 --> 00:00:30,320
but I think you know me for differences

00:00:27,560 --> 00:00:34,040
for our as creator of after professor

00:00:30,320 --> 00:00:35,780
post SS and browser list this is my

00:00:34,040 --> 00:00:38,750
Twitter and I will post the slides and

00:00:35,780 --> 00:00:43,399
all syncs all links to this Twitter

00:00:38,750 --> 00:00:46,070
subscribe but today is a reactive conf

00:00:43,399 --> 00:00:49,400
not CSS conf so definitely not speak

00:00:46,070 --> 00:00:51,320
about processes yes because today I will

00:00:49,400 --> 00:00:56,060
present a completely different project

00:00:51,320 --> 00:00:59,360
completely irrelevant to a CSS world but

00:00:56,060 --> 00:01:01,490
I will start from a different song this

00:00:59,360 --> 00:01:03,620
is my family they live in rock in China

00:01:01,490 --> 00:01:05,960
and you know it's very important to

00:01:03,620 --> 00:01:08,780
visit your family to eat your mother's

00:01:05,960 --> 00:01:10,790
borscht soup and I would really like to

00:01:08,780 --> 00:01:14,030
do it but unfortunately there isn't one

00:01:10,790 --> 00:01:16,460
and big problem is Chinese internet when

00:01:14,030 --> 00:01:17,990
you will open a legal website which is

00:01:16,460 --> 00:01:20,450
not blocked by Chinese government's

00:01:17,990 --> 00:01:22,820
legal normal website from Western

00:01:20,450 --> 00:01:26,780
Internet half of the packages will be

00:01:22,820 --> 00:01:32,390
lost because this is some sort of local

00:01:26,780 --> 00:01:34,490
companies support and like how your site

00:01:32,390 --> 00:01:36,350
will work in this situation how my site

00:01:34,490 --> 00:01:37,970
will work in this situation of course

00:01:36,350 --> 00:01:39,740
most of web sites they always have

00:01:37,970 --> 00:01:42,170
infinite loaders and like it's very hard

00:01:39,740 --> 00:01:44,720
to use a web site but of course a good

00:01:42,170 --> 00:01:46,240
question should we care about China

00:01:44,720 --> 00:01:48,979
because it's like second world

00:01:46,240 --> 00:01:50,540
fortunately it's not a problem of some

00:01:48,979 --> 00:01:52,940
different countries unfortunately we

00:01:50,540 --> 00:01:56,510
have the same problems here unlike in

00:01:52,940 --> 00:01:59,500
big city these are important for us for

00:01:56,510 --> 00:02:02,659
example in new york trane in the metro

00:01:59,500 --> 00:02:05,390
they don't have Wi-Fi and they have a

00:02:02,659 --> 00:02:07,970
very unstable mobile connection or for

00:02:05,390 --> 00:02:10,459
example on dot conferences in in paris

00:02:07,970 --> 00:02:12,680
we have a one of the best venue in the

00:02:10,459 --> 00:02:14,390
world and unfortunately in this venue

00:02:12,680 --> 00:02:18,530
they don't have a Wi-Fi and mobile

00:02:14,390 --> 00:02:21,980
signal is extremely unstable so there is

00:02:18,530 --> 00:02:24,139
a good rule any wireless connection is

00:02:21,980 --> 00:02:25,690
unstable this is like by definition is

00:02:24,139 --> 00:02:28,420
how violence works

00:02:25,690 --> 00:02:31,450
and this is the reason why we should

00:02:28,420 --> 00:02:33,670
care about offline not because of some

00:02:31,450 --> 00:02:35,700
client who want to go hiking can have

00:02:33,670 --> 00:02:39,250
our website it's a rare situation

00:02:35,700 --> 00:02:41,950
unfortunately every day in our like big

00:02:39,250 --> 00:02:44,380
technology city we have one or two

00:02:41,950 --> 00:02:46,810
minutes of flying because virus is

00:02:44,380 --> 00:02:51,370
unstable and this is why we should take

00:02:46,810 --> 00:02:52,090
care about offline but unfortunately we

00:02:51,370 --> 00:02:54,450
don't care

00:02:52,090 --> 00:02:56,950
the reason like including me of course

00:02:54,450 --> 00:02:58,900
the reason is because we created a

00:02:56,950 --> 00:03:00,760
websites for this type of connections

00:02:58,900 --> 00:03:01,390
and the real connections completely

00:03:00,760 --> 00:03:04,110
different

00:03:01,390 --> 00:03:07,690
thank you for Nikita for these slides

00:03:04,110 --> 00:03:11,700
and in this inconsistent connection we

00:03:07,690 --> 00:03:14,380
have like from my experience it is 3

00:03:11,700 --> 00:03:16,570
biggest problem just problem it is

00:03:14,380 --> 00:03:20,920
infinite Lauder when you have error

00:03:16,570 --> 00:03:23,080
during the exact request this is why a

00:03:20,920 --> 00:03:25,000
lot of users they know if they have some

00:03:23,080 --> 00:03:27,490
problem with websites just press reload

00:03:25,000 --> 00:03:30,100
page button is it like a stable

00:03:27,490 --> 00:03:32,740
ecosystem for website if every user

00:03:30,100 --> 00:03:35,770
knows that he or she must press the load

00:03:32,740 --> 00:03:37,870
button light on any problems or like

00:03:35,770 --> 00:03:39,880
several second problem when I press a

00:03:37,870 --> 00:03:42,550
safe and connection less stable I must

00:03:39,880 --> 00:03:45,250
wait until a jack request will be

00:03:42,550 --> 00:03:48,310
finished but like I want to continue my

00:03:45,250 --> 00:03:51,209
work I don't need to spend a time in

00:03:48,310 --> 00:03:52,959
waiting and unfortunately we wasteful

00:03:51,209 --> 00:03:56,760
end of the loader

00:03:52,959 --> 00:03:59,739
just because Sun like 1% or even lower

00:03:56,760 --> 00:04:01,630
request a feather'd unfortunately most

00:03:59,739 --> 00:04:04,330
of the requests are successful we don't

00:04:01,630 --> 00:04:08,560
really need to wait a lawyer or for

00:04:04,330 --> 00:04:11,260
example third problem for example we

00:04:08,560 --> 00:04:14,650
have two users they both open a web page

00:04:11,260 --> 00:04:17,770
like form on same time they have a same

00:04:14,650 --> 00:04:20,680
state then one user changed in one field

00:04:17,770 --> 00:04:23,530
other change a second field they then

00:04:20,680 --> 00:04:26,200
both press are safe but because we we

00:04:23,530 --> 00:04:28,270
send the full state to the server one

00:04:26,200 --> 00:04:31,419
client with otherwise all edges of the

00:04:28,270 --> 00:04:33,160
other this like in every side I have

00:04:31,419 --> 00:04:36,490
it's my sides I think you have it on

00:04:33,160 --> 00:04:38,950
your side because we we don't think

00:04:36,490 --> 00:04:40,930
about it but unfortunately right now

00:04:38,950 --> 00:04:43,810
any website you have at least that to

00:04:40,930 --> 00:04:47,740
users because every user have not only a

00:04:43,810 --> 00:04:50,650
laptop but also a mobile device this is

00:04:47,740 --> 00:04:52,840
the reality but I dream about better

00:04:50,650 --> 00:04:55,180
world every time then I'm going to sleep

00:04:52,840 --> 00:04:57,490
I'm imagine a better world this when

00:04:55,180 --> 00:04:59,770
everything is fine I imagine a world

00:04:57,490 --> 00:05:02,260
when every regular application on a

00:04:59,770 --> 00:05:04,960
special web chat just any application

00:05:02,260 --> 00:05:07,120
with forms you'll have a real-time

00:05:04,960 --> 00:05:10,060
update when you don't need to reload the

00:05:07,120 --> 00:05:12,420
page to see a update updates when

00:05:10,060 --> 00:05:16,360
updates who came to your computer or

00:05:12,420 --> 00:05:19,090
when our web application save our

00:05:16,360 --> 00:05:23,080
changes in the background not bothering

00:05:19,090 --> 00:05:26,050
car with the lawyers and when we have a

00:05:23,080 --> 00:05:29,290
full of Lyon support and not with like

00:05:26,050 --> 00:05:31,510
KNK data but which allow us to edit the

00:05:29,290 --> 00:05:33,550
data for example I gave me in New York

00:05:31,510 --> 00:05:36,430
Metro and I got a message from my

00:05:33,550 --> 00:05:38,290
grandmother are you alive and I want to

00:05:36,430 --> 00:05:41,110
write a message and forgot about it but

00:05:38,290 --> 00:05:42,850
unfortunately a current application

00:05:41,110 --> 00:05:46,870
which tell me that it is impossible and

00:05:42,850 --> 00:05:50,470
yeah all the things I want with all a

00:05:46,870 --> 00:05:51,880
less code and with current ecosystem you

00:05:50,470 --> 00:05:54,760
know it's impossible to go to your

00:05:51,880 --> 00:05:56,430
develops team and say that yes I have I

00:05:54,760 --> 00:05:59,440
found a very nice database with version

00:05:56,430 --> 00:06:03,730
zero point one point five let's replace

00:05:59,440 --> 00:06:07,870
our Postgres to this shiny library so

00:06:03,730 --> 00:06:08,350
yeah this this dream is like it's big

00:06:07,870 --> 00:06:11,800
dream

00:06:08,350 --> 00:06:13,750
I bid I'll be honest there is no

00:06:11,800 --> 00:06:15,130
solution for this dream right now maybe

00:06:13,750 --> 00:06:17,350
we will create in the next two years

00:06:15,130 --> 00:06:19,780
maybe it will the solution is not be

00:06:17,350 --> 00:06:22,390
created by me but I think this is a

00:06:19,780 --> 00:06:25,600
thing that we all want a better internet

00:06:22,390 --> 00:06:29,350
web application so how we can deal with

00:06:25,600 --> 00:06:31,750
it I think the real problem is a Jacke

00:06:29,350 --> 00:06:34,030
request the octopus is very easy in the

00:06:31,750 --> 00:06:37,060
beginning but when you like make it more

00:06:34,030 --> 00:06:39,820
complex and complex the hummed hell to

00:06:37,060 --> 00:06:44,560
write it so we need to kill a jack

00:06:39,820 --> 00:06:46,150
request solution is simple and this a

00:06:44,560 --> 00:06:48,100
joke request they have a different

00:06:46,150 --> 00:06:49,530
problem for Mayans that when we create

00:06:48,100 --> 00:06:51,810
the web application we don't care about

00:06:49,530 --> 00:06:54,240
service or different stuff

00:06:51,810 --> 00:06:57,360
Center question you know I not care

00:06:54,240 --> 00:06:59,430
about the server and there is a much

00:06:57,360 --> 00:07:02,160
better approach to think about computer

00:06:59,430 --> 00:07:04,680
system it called distributed systems or

00:07:02,160 --> 00:07:07,740
distributed programming it means that

00:07:04,680 --> 00:07:10,020
every component of your web application

00:07:07,740 --> 00:07:12,840
like client-side server site or other

00:07:10,020 --> 00:07:14,639
client-side they are part of the biggest

00:07:12,840 --> 00:07:17,310
system and you creating this big system

00:07:14,639 --> 00:07:19,500
not a separated component this is the

00:07:17,310 --> 00:07:22,800
idea and with a lot of Technology around

00:07:19,500 --> 00:07:26,220
it and of course it's like very old idea

00:07:22,800 --> 00:07:28,470
but it's not so easy to implement it and

00:07:26,220 --> 00:07:30,780
you know we all go into JavaScript

00:07:28,470 --> 00:07:34,590
because we saw that it was easier we

00:07:30,780 --> 00:07:36,780
will just make our own click listeners

00:07:34,590 --> 00:07:40,229
and we is not expected they will have

00:07:36,780 --> 00:07:42,330
all these science problems right now so

00:07:40,229 --> 00:07:45,000
we need some we need to make this

00:07:42,330 --> 00:07:46,979
ability system easier and there is a way

00:07:45,000 --> 00:07:49,200
to make something more easier it's

00:07:46,979 --> 00:07:51,060
called frameworks do you remember how

00:07:49,200 --> 00:07:53,940
difficult it was to make a single page

00:07:51,060 --> 00:07:56,460
application in the past before the react

00:07:53,940 --> 00:07:58,200
or like back end before the Ruby on

00:07:56,460 --> 00:08:00,180
Rails it was to really help it was a

00:07:58,200 --> 00:08:01,820
really complex things but right now is

00:08:00,180 --> 00:08:04,169
not a problem because of the frameworks

00:08:01,820 --> 00:08:08,729
so we need a framework to distributed

00:08:04,169 --> 00:08:12,060
system but what is framework I think the

00:08:08,729 --> 00:08:16,919
framework is the idea it is not a code

00:08:12,060 --> 00:08:19,590
it is not a code written on github react

00:08:16,919 --> 00:08:22,020
is not the code on the Facebook / react

00:08:19,590 --> 00:08:24,090
react is the idea Ruby on Rails is

00:08:22,020 --> 00:08:26,010
getting Creole if you accept this idea

00:08:24,090 --> 00:08:29,520
you will write the same code on a new

00:08:26,010 --> 00:08:31,800
language unlike any name so we need a

00:08:29,520 --> 00:08:36,719
idea to make a framework for distributed

00:08:31,800 --> 00:08:39,900
system and we found one we created Sadie

00:08:36,719 --> 00:08:42,060
in st. Petersburg the best bars city in

00:08:39,900 --> 00:08:44,940
the Russia and in my experience in the

00:08:42,060 --> 00:08:45,390
world we have discussion with Dena

00:08:44,940 --> 00:08:47,070
brahma

00:08:45,390 --> 00:08:49,020
after a meet-up with a lot of alcohol

00:08:47,070 --> 00:08:51,540
and we spoke about a very interesting

00:08:49,020 --> 00:08:54,120
problem like imagine if you have a two

00:08:51,540 --> 00:08:56,400
clients and they both sent a same

00:08:54,120 --> 00:08:58,020
document but with different states like

00:08:56,400 --> 00:09:00,690
different states of one document and

00:08:58,020 --> 00:09:02,610
then you must merge it and like write a

00:09:00,690 --> 00:09:04,620
code to merge these two concept is very

00:09:02,610 --> 00:09:05,110
hard especially when you don't

00:09:04,620 --> 00:09:10,480
understand

00:09:05,110 --> 00:09:12,730
Chinese but if we have a some problem

00:09:10,480 --> 00:09:14,620
with algorithm we should change a data

00:09:12,730 --> 00:09:17,560
structure that the structure is a four

00:09:14,620 --> 00:09:19,839
silk algorithm is a second so what if we

00:09:17,560 --> 00:09:22,990
will change a doctor structure what we

00:09:19,839 --> 00:09:25,329
will not silk in the state but we will

00:09:22,990 --> 00:09:26,350
sink in the term of actions what was

00:09:25,329 --> 00:09:29,649
changed exactly

00:09:26,350 --> 00:09:32,170
so this first two actions is an initial

00:09:29,649 --> 00:09:34,810
state that was sent from the server so

00:09:32,170 --> 00:09:37,060
one client had action to remove in one

00:09:34,810 --> 00:09:40,390
like and other client interaction to

00:09:37,060 --> 00:09:42,310
change the name merging these two conf

00:09:40,390 --> 00:09:45,130
this conflict is very easy we just need

00:09:42,310 --> 00:09:48,850
to put this array to one array and sort

00:09:45,130 --> 00:09:51,399
it by the time it this idea called event

00:09:48,850 --> 00:09:54,420
source and its alt idea and on top of

00:09:51,399 --> 00:09:56,260
this idea we have a very nice

00:09:54,420 --> 00:09:59,260
scientifically researched difficult

00:09:56,260 --> 00:10:01,720
paper it cause here D T it is conflict

00:09:59,260 --> 00:10:05,560
free replica data types it's a data

00:10:01,720 --> 00:10:07,149
types with a lot of limits and if you

00:10:05,560 --> 00:10:08,529
agree with this limits you do not have a

00:10:07,149 --> 00:10:12,730
conflict of course in terms of the

00:10:08,529 --> 00:10:15,640
slingers and the best implementation of

00:10:12,730 --> 00:10:17,740
CDC swarm Jesus created by met Russian

00:10:15,640 --> 00:10:21,670
scientists with regression K already saw

00:10:17,740 --> 00:10:24,160
it on the stage this morning so we

00:10:21,670 --> 00:10:26,760
talked how we can connect every ducts

00:10:24,160 --> 00:10:29,560
with the Swans yes and it was a problem

00:10:26,760 --> 00:10:32,260
it was a problem because every component

00:10:29,560 --> 00:10:34,480
has a own list of the action we have a

00:10:32,260 --> 00:10:36,699
list of the actions in small ingest the

00:10:34,480 --> 00:10:39,279
if we have a list of the action in Redux

00:10:36,699 --> 00:10:42,100
we have a list of mutation in graph here

00:10:39,279 --> 00:10:43,480
everyone have the same list of the

00:10:42,100 --> 00:10:45,339
action but they are separated and

00:10:43,480 --> 00:10:51,250
connection between them is very hard and

00:10:45,339 --> 00:10:54,910
so this is the ID of regards what one

00:10:51,250 --> 00:10:57,670
second what if we will have a single

00:10:54,910 --> 00:11:00,610
lock for every component what if we have

00:10:57,670 --> 00:11:03,760
a single log for a CDT what if you have

00:11:00,610 --> 00:11:05,680
the same look for Redux and same log for

00:11:03,760 --> 00:11:09,220
synchronization with the service this is

00:11:05,680 --> 00:11:11,620
idea beside Lagarde's framework so how

00:11:09,220 --> 00:11:13,720
it works we have a list of the action on

00:11:11,620 --> 00:11:15,880
the client of course the same as we have

00:11:13,720 --> 00:11:17,529
in redux same action as three ducks

00:11:15,880 --> 00:11:18,640
everything is same like right now you

00:11:17,529 --> 00:11:21,850
have on your website

00:11:18,640 --> 00:11:25,450
then we have a same list of the action

00:11:21,850 --> 00:11:26,500
on the server and then we need to do

00:11:25,450 --> 00:11:29,620
only one sink

00:11:26,500 --> 00:11:31,900
we need to synchronize this list of the

00:11:29,620 --> 00:11:34,000
actions we need to open web circuit and

00:11:31,900 --> 00:11:36,250
when client will add a new action we

00:11:34,000 --> 00:11:39,340
will send it to a server by WebSockets

00:11:36,250 --> 00:11:42,160
if we don't have a connection for some

00:11:39,340 --> 00:11:45,610
time on the next connection server will

00:11:42,160 --> 00:11:47,320
say a number of the last action that

00:11:45,610 --> 00:11:50,500
it's received and so it's very easy to

00:11:47,320 --> 00:11:52,120
send updates and we don't have a problem

00:11:50,500 --> 00:11:55,480
with duplications like it's very easy

00:11:52,120 --> 00:11:58,510
way to scrutinize the data in the time

00:11:55,480 --> 00:12:00,850
order it locks also several could create

00:11:58,510 --> 00:12:03,970
action and send the total client to so

00:12:00,850 --> 00:12:05,950
it's a boss way direction and also other

00:12:03,970 --> 00:12:08,310
plans could create action send it to the

00:12:05,950 --> 00:12:11,530
server and then we will send it to our

00:12:08,310 --> 00:12:13,270
client so we have left updates for free

00:12:11,530 --> 00:12:17,140
just because we have this idea of

00:12:13,270 --> 00:12:18,940
actions synchronization options and same

00:12:17,140 --> 00:12:20,230
with browser tabs we don't need their

00:12:18,940 --> 00:12:22,230
connection to strong I stay between

00:12:20,230 --> 00:12:25,360
browser tabs let's sync in term of

00:12:22,230 --> 00:12:27,100
internal in terms of contributed system

00:12:25,360 --> 00:12:31,000
it's a two clients that synchronize the

00:12:27,100 --> 00:12:33,640
state between each other so I do flag

00:12:31,000 --> 00:12:36,490
acts is to put action inside a lock and

00:12:33,640 --> 00:12:38,590
forgot about it don't sink who when and

00:12:36,490 --> 00:12:39,160
how you synchronize it it's like problem

00:12:38,590 --> 00:12:42,310
of lagarza

00:12:39,160 --> 00:12:44,050
every sync will be deal with regards you

00:12:42,310 --> 00:12:47,220
just need to put the action to the lock

00:12:44,050 --> 00:12:51,220
and like think about and forget about it

00:12:47,220 --> 00:12:52,570
so for example right now we have to

00:12:51,220 --> 00:12:55,480
create an action to the name our project

00:12:52,570 --> 00:12:57,550
send it to a server and we must show a

00:12:55,480 --> 00:12:59,980
loader until it will be returned and

00:12:57,550 --> 00:13:02,170
only then we can change the name in low

00:12:59,980 --> 00:13:04,300
ducks approach it means that you put it

00:13:02,170 --> 00:13:06,160
to the lock and forgot about it so your

00:13:04,300 --> 00:13:09,940
foot action to the lock and update

00:13:06,160 --> 00:13:13,210
interface immediately of course and of

00:13:09,940 --> 00:13:14,980
course we will have a sum in regards we

00:13:13,210 --> 00:13:17,320
have a special library to show a current

00:13:14,980 --> 00:13:19,600
synchronization state so user will see

00:13:17,320 --> 00:13:22,330
all of this like how a synchronization

00:13:19,600 --> 00:13:23,770
works but it is not problem for you it's

00:13:22,330 --> 00:13:27,280
a problem for loggers we actually take

00:13:23,770 --> 00:13:29,050
care about it if but of course if we

00:13:27,280 --> 00:13:31,730
will send something to a server update

00:13:29,050 --> 00:13:34,100
the state but then server have a

00:13:31,730 --> 00:13:36,920
some problem what we will do in this

00:13:34,100 --> 00:13:39,470
case in Lagarde server and anytime could

00:13:36,920 --> 00:13:42,110
send an undo action and undo any action

00:13:39,470 --> 00:13:45,290
on the client so if this project name

00:13:42,110 --> 00:13:46,760
was wrong and we update the interface

00:13:45,290 --> 00:13:50,810
then we have a problem on the server

00:13:46,760 --> 00:13:55,339
server sent undo and we update name to

00:13:50,810 --> 00:13:59,120
the old version so yeah this is ID of

00:13:55,339 --> 00:14:00,889
the guards but you know ID is very easy

00:13:59,120 --> 00:14:02,300
when you speak about it and it's much

00:14:00,889 --> 00:14:08,630
more complex when you start to implement

00:14:02,300 --> 00:14:10,550
it so first problem we have like the

00:14:08,630 --> 00:14:13,160
core idea of any event sourcing system

00:14:10,550 --> 00:14:14,690
is the same order if you have different

00:14:13,160 --> 00:14:15,170
order of same action on different

00:14:14,690 --> 00:14:16,760
machine

00:14:15,170 --> 00:14:19,610
it's more easy just to run away from

00:14:16,760 --> 00:14:21,949
your work and forgotten it's very hard

00:14:19,610 --> 00:14:24,529
to fix this problem so we need to be

00:14:21,949 --> 00:14:27,139
sure about the order of course first

00:14:24,529 --> 00:14:29,839
idea let's have a sometime property and

00:14:27,139 --> 00:14:32,510
sort by this time but you know time is

00:14:29,839 --> 00:14:35,089
not so easy in the tributed system for

00:14:32,510 --> 00:14:36,709
example two times create it in like if

00:14:35,089 --> 00:14:38,420
you create one times and create second

00:14:36,709 --> 00:14:41,149
time it could be equal so you can sort

00:14:38,420 --> 00:14:44,029
by this time because like we need unique

00:14:41,149 --> 00:14:47,120
time to sort it properly or that

00:14:44,029 --> 00:14:50,149
different idea time created after the

00:14:47,120 --> 00:14:52,250
first time could be lower than a

00:14:50,149 --> 00:14:53,959
previous time it happens because you

00:14:52,250 --> 00:14:56,209
have a time synchronization process in

00:14:53,959 --> 00:14:59,420
our operation systems in any moment it

00:14:56,209 --> 00:15:03,500
could run and change the time also good

00:14:59,420 --> 00:15:05,990
example of this problem is lip-read ii

00:15:03,500 --> 00:15:08,810
it's a special extra second in the end

00:15:05,990 --> 00:15:12,110
of the year so you will have a time to

00:15:08,810 --> 00:15:13,639
finish all your work on the new tasks

00:15:12,110 --> 00:15:15,889
that you have no time on this year

00:15:13,639 --> 00:15:18,740
special second special for you not in

00:15:15,889 --> 00:15:21,860
any year in some of the years or

00:15:18,740 --> 00:15:24,560
sometimes client and the server could

00:15:21,860 --> 00:15:26,600
have a time difference more than one

00:15:24,560 --> 00:15:28,790
hour I'm not talking about the time

00:15:26,600 --> 00:15:31,880
zones because time stamp is a time zone

00:15:28,790 --> 00:15:34,250
free type it happens because some client

00:15:31,880 --> 00:15:36,380
go into other city and they don't a

00:15:34,250 --> 00:15:38,180
distant idea of the time zones and in

00:15:36,380 --> 00:15:39,829
the new place they don't change the time

00:15:38,180 --> 00:15:41,810
zone they change the actual time it

00:15:39,829 --> 00:15:44,449
happens and so it's we should take care

00:15:41,810 --> 00:15:45,380
about it there is a solution called

00:15:44,449 --> 00:15:47,060
dactyl

00:15:45,380 --> 00:15:50,210
but unfortunately vector clock is not

00:15:47,060 --> 00:15:52,910
really fit my tasks because vector clock

00:15:50,210 --> 00:15:56,240
is not work very great in offline when

00:15:52,910 --> 00:15:57,890
the flying have a long to Riyadh so this

00:15:56,240 --> 00:16:00,020
is why we created a different timer it

00:15:57,890 --> 00:16:01,520
used timestamp it uses unique node ID

00:16:00,020 --> 00:16:04,220
and special sequence numbers that

00:16:01,520 --> 00:16:07,730
increase every time we have a same time

00:16:04,220 --> 00:16:10,160
with the same timestamp and server sent

00:16:07,730 --> 00:16:12,440
current time to a client client

00:16:10,160 --> 00:16:15,590
calculate the difference between server

00:16:12,440 --> 00:16:18,530
and its time and at this difference to

00:16:15,590 --> 00:16:20,150
any actions so any action in several

00:16:18,530 --> 00:16:23,690
client log is in the current machine

00:16:20,150 --> 00:16:29,180
time so yeah like ours time is nice use

00:16:23,690 --> 00:16:31,460
it second problem second problem so of

00:16:29,180 --> 00:16:33,710
course we have a one storage to save

00:16:31,460 --> 00:16:36,890
actions because like it's offline should

00:16:33,710 --> 00:16:39,560
working offline but if you will open a

00:16:36,890 --> 00:16:41,810
web site in two different browser tops

00:16:39,560 --> 00:16:43,790
and then these two browser tabs will

00:16:41,810 --> 00:16:46,130
keep keep at two WebSocket connections

00:16:43,790 --> 00:16:48,620
and action will send the same action to

00:16:46,130 --> 00:16:50,150
these browser tabs one browser tab will

00:16:48,620 --> 00:16:52,430
save it to the database and second we'll

00:16:50,150 --> 00:16:55,160
see that it is a duplicate the main

00:16:52,430 --> 00:16:57,890
problem of this problem is that I found

00:16:55,160 --> 00:17:00,920
it I just in a few weeks before as a

00:16:57,890 --> 00:17:03,110
first introduction of magog's

00:17:00,920 --> 00:17:04,790
it was like disaster for me like you

00:17:03,110 --> 00:17:08,180
created things and found that it doesn't

00:17:04,790 --> 00:17:11,360
work but sometimes you can put your

00:17:08,180 --> 00:17:14,750
problems into your benefits so we found

00:17:11,360 --> 00:17:17,600
a very nice solution browser tabs elect

00:17:14,750 --> 00:17:20,240
a leaders and only a leader keep a

00:17:17,600 --> 00:17:22,339
WebSocket connection other tabs follower

00:17:20,240 --> 00:17:23,000
tops will have a new action from the

00:17:22,339 --> 00:17:25,339
leader tab

00:17:23,000 --> 00:17:29,140
so finally we will have a same

00:17:25,339 --> 00:17:34,730
notification count in any browser tops

00:17:29,140 --> 00:17:36,620
so it was an idea like but let's show

00:17:34,730 --> 00:17:38,420
the code how it actually looks like

00:17:36,620 --> 00:17:42,560
because like I can't talk about infinite

00:17:38,420 --> 00:17:46,490
but how it actually look like so black

00:17:42,560 --> 00:17:49,820
ox is a client-side library only 12

00:17:46,490 --> 00:17:52,460
kilobytes cells full size limit it's

00:17:49,820 --> 00:17:54,410
read are compatible API you need only to

00:17:52,460 --> 00:17:56,840
replace one line with a few lines and

00:17:54,410 --> 00:17:57,600
then you will have a same dispatch

00:17:56,840 --> 00:17:59,220
methods and

00:17:57,600 --> 00:18:01,820
you can continue use it without any

00:17:59,220 --> 00:18:05,760
problem but in addition if you have a to

00:18:01,820 --> 00:18:07,950
special dispatch methods so first method

00:18:05,760 --> 00:18:11,490
with create action visible in every

00:18:07,950 --> 00:18:14,610
browser tab so you'll have cross stop

00:18:11,490 --> 00:18:17,220
synchronization for free second a third

00:18:14,610 --> 00:18:20,750
method will send this action to the

00:18:17,220 --> 00:18:23,549
server so instead of the thinking about

00:18:20,750 --> 00:18:26,669
making a jug think about loaders all

00:18:23,549 --> 00:18:28,890
that stuff you need only to make call it

00:18:26,669 --> 00:18:32,580
dispatch with a special song message

00:18:28,890 --> 00:18:34,470
sync method and it's all unfortunately

00:18:32,580 --> 00:18:36,870
not only a client site you must have a

00:18:34,470 --> 00:18:38,429
Lagarde server right now it's not just

00:18:36,870 --> 00:18:42,840
framework but vertical is open you can

00:18:38,429 --> 00:18:45,179
implement it so in the server you have a

00:18:42,840 --> 00:18:48,390
handler for every actions in this

00:18:45,179 --> 00:18:51,090
boundary of course check action access

00:18:48,390 --> 00:18:52,799
for this user and you have a callback in

00:18:51,090 --> 00:18:54,960
this callback you can do anything that

00:18:52,799 --> 00:18:56,400
you want you can use any database that

00:18:54,960 --> 00:18:58,289
you want you can use pause Greece clear

00:18:56,400 --> 00:19:02,690
my screen or something

00:18:58,289 --> 00:19:07,260
I don't know file file budget systems

00:19:02,690 --> 00:19:08,850
and if you have a legacy web web service

00:19:07,260 --> 00:19:10,919
it doesn't mean that you need to replace

00:19:08,850 --> 00:19:13,320
it to a Lagarde server you can make a

00:19:10,919 --> 00:19:15,270
network server in some sort of proxy it

00:19:13,320 --> 00:19:18,330
will get actions from the oligarchs

00:19:15,270 --> 00:19:23,370
client and send it to your old back-end

00:19:18,330 --> 00:19:25,289
by like HTTP it's not a problem in any

00:19:23,370 --> 00:19:28,620
moment client could create action and

00:19:25,289 --> 00:19:30,299
send this action to the server and and

00:19:28,620 --> 00:19:32,760
send its action to a client and client

00:19:30,299 --> 00:19:37,159
will seize new actions and in any moment

00:19:32,760 --> 00:19:40,230
client could undo any action on a client

00:19:37,159 --> 00:19:42,450
how subscription work how will create a

00:19:40,230 --> 00:19:45,570
data in regards we don't think in terms

00:19:42,450 --> 00:19:46,620
of the requests we created for a

00:19:45,570 --> 00:19:49,470
subscription

00:19:46,620 --> 00:19:51,950
subscription subscribe so you have a

00:19:49,470 --> 00:19:54,630
special decorator you rub your react

00:19:51,950 --> 00:19:56,429
components into this decorator and when

00:19:54,630 --> 00:19:59,880
this react components will go render it

00:19:56,429 --> 00:20:02,010
will call a subscribe method select same

00:19:59,880 --> 00:20:05,340
with a graphical but with subscription

00:20:02,010 --> 00:20:08,280
by default not with the requests and on

00:20:05,340 --> 00:20:09,590
the server you check access for the user

00:20:08,280 --> 00:20:12,710
and then you

00:20:09,590 --> 00:20:15,140
can put any state to a lock for the

00:20:12,710 --> 00:20:17,750
client and client will receive the in

00:20:15,140 --> 00:20:21,830
the initial state of the of this

00:20:17,750 --> 00:20:23,630
resource of this user of Samsung so I

00:20:21,830 --> 00:20:26,120
talked a lot about the benefits of

00:20:23,630 --> 00:20:26,980
magog's let's talk about the problem of

00:20:26,120 --> 00:20:29,960
loggers

00:20:26,980 --> 00:20:32,690
so first problem it's not CDC it's not a

00:20:29,960 --> 00:20:34,460
database it's a framework to make both

00:20:32,690 --> 00:20:37,970
of them to make a database and to make

00:20:34,460 --> 00:20:41,539
sure that you second problem it's a lock

00:20:37,970 --> 00:20:43,490
clinic I talked about how easy to add

00:20:41,539 --> 00:20:44,929
something to the lock but to remove

00:20:43,490 --> 00:20:47,090
something from the lock is not so easy

00:20:44,929 --> 00:20:48,590
you have a special API it's not like

00:20:47,090 --> 00:20:52,340
rocket science but you need to think

00:20:48,590 --> 00:20:56,000
about it so sort of a second problem is

00:20:52,340 --> 00:20:57,620
complexity our information technologists

00:20:56,000 --> 00:21:00,230
is not about using her fancy

00:20:57,620 --> 00:21:02,899
technologies not about to put react in

00:21:00,230 --> 00:21:05,559
any way we are programmers to make a

00:21:02,899 --> 00:21:08,299
sink simpler this is ID of programming

00:21:05,559 --> 00:21:10,669
simplicity and if you have a simple

00:21:08,299 --> 00:21:12,260
website don't you slugs because

00:21:10,669 --> 00:21:14,149
Lagarde's is like framework need to

00:21:12,260 --> 00:21:16,850
think about it and also need to think

00:21:14,149 --> 00:21:18,919
about a clinic so if you have a simple

00:21:16,850 --> 00:21:21,649
website complexity bill grows and it's

00:21:18,919 --> 00:21:23,659
not what we want but if you have a more

00:21:21,649 --> 00:21:25,760
complex web application and you know

00:21:23,659 --> 00:21:28,159
about it because you feel everyday pain

00:21:25,760 --> 00:21:30,590
and nightmares about networking

00:21:28,159 --> 00:21:32,779
in this sense you will understand that

00:21:30,590 --> 00:21:34,760
like ours is a great idea for you and it

00:21:32,779 --> 00:21:36,620
will reduce a complexity because you can

00:21:34,760 --> 00:21:40,070
forget about a jack request and all the

00:21:36,620 --> 00:21:44,390
hell with requests and third problem it

00:21:40,070 --> 00:21:47,630
is a young project 0.12 is Samsung yeah

00:21:44,390 --> 00:21:51,350
it's about only year so you can sell

00:21:47,630 --> 00:21:54,679
alcohol to them to this project what we

00:21:51,350 --> 00:21:56,059
use it in our production because we have

00:21:54,679 --> 00:21:59,360
a very brave managers

00:21:56,059 --> 00:22:01,130
technically is don't have a choice any

00:21:59,360 --> 00:22:02,809
sort of one towards on projects we have

00:22:01,130 --> 00:22:04,159
a modern so she contributed sense to

00:22:02,809 --> 00:22:06,799
them and like if you want to make a

00:22:04,159 --> 00:22:12,110
great open source come to us make crazy

00:22:06,799 --> 00:22:15,409
stuff so result Lagarde is a framework

00:22:12,110 --> 00:22:17,809
to replace a jack requests and restful

00:22:15,409 --> 00:22:20,330
on the server it replace it with idea of

00:22:17,809 --> 00:22:22,030
log synchronization you put your action

00:22:20,330 --> 00:22:24,310
with our action to the log and for

00:22:22,030 --> 00:22:27,460
how and when it will be synchronize it

00:22:24,310 --> 00:22:29,560
it will be a problem of logics whether

00:22:27,460 --> 00:22:31,900
to use plug arcs not in the web chats

00:22:29,560 --> 00:22:35,140
not only in web chats I created it for a

00:22:31,900 --> 00:22:37,420
simple web application like this app

00:22:35,140 --> 00:22:41,140
with any application with a lot of forms

00:22:37,420 --> 00:22:43,060
and sort why you should use it just you

00:22:41,140 --> 00:22:44,620
don't need a redux Agra anymore you

00:22:43,060 --> 00:22:46,540
don't need to all the crazy stuff to

00:22:44,620 --> 00:22:48,870
make a jerk request it is a simple

00:22:46,540 --> 00:22:51,880
reduction action and forgot about it

00:22:48,870 --> 00:22:55,330
then you will your interface will be

00:22:51,880 --> 00:22:56,740
faster because optimistic UI user press

00:22:55,330 --> 00:22:59,320
the save button and it's immediately

00:22:56,740 --> 00:23:02,500
closed and saved of course it will have

00:22:59,320 --> 00:23:05,740
left update and offline source out like

00:23:02,500 --> 00:23:08,080
out of box or in with some extra moves

00:23:05,740 --> 00:23:10,810
but it is very easy and it's ready for

00:23:08,080 --> 00:23:13,330
current data system so it's with our API

00:23:10,810 --> 00:23:16,870
saying that you have and any database on

00:23:13,330 --> 00:23:20,070
the server that's all this is a Twitter

00:23:16,870 --> 00:23:20,070
of Lagarde is my Twitter

00:23:35,260 --> 00:23:38,420
[Music]

00:23:39,279 --> 00:23:43,970
everybody's on time today great so let's

00:23:42,559 --> 00:23:44,539
go through the three questions if

00:23:43,970 --> 00:23:46,220
possible

00:23:44,539 --> 00:23:49,130
so let's read through them yeah of

00:23:46,220 --> 00:23:52,070
course can all agog see oh yeah

00:23:49,130 --> 00:23:54,620
like if you have a friend who don't use

00:23:52,070 --> 00:23:55,880
the darks like on this conference or for

00:23:54,620 --> 00:23:58,039
example a friend who don't use even

00:23:55,880 --> 00:24:00,470
react you have a Lagarde client and slow

00:23:58,039 --> 00:24:02,270
level library and you mean you can use

00:24:00,470 --> 00:24:04,840
it in any type of frameworks you can use

00:24:02,270 --> 00:24:07,850
it with you juice you can use it visa

00:24:04,840 --> 00:24:11,419
jQuery is innocent so yeah it's not a

00:24:07,850 --> 00:24:15,529
problem so let's separate the job I read

00:24:11,419 --> 00:24:17,539
you answer so why not treat separate

00:24:15,529 --> 00:24:20,870
tabs and separate machines why a letter

00:24:17,539 --> 00:24:23,510
election leader election why not

00:24:20,870 --> 00:24:25,580
oh yeah first problem if you have

00:24:23,510 --> 00:24:27,890
intercept database it will be a global

00:24:25,580 --> 00:24:31,220
for any browser tabs of course we can

00:24:27,890 --> 00:24:33,080
create in the database database for

00:24:31,220 --> 00:24:35,539
every browser tab but like it will

00:24:33,080 --> 00:24:37,940
reduce data on your machine it will

00:24:35,539 --> 00:24:39,950
reduce to use more memory like I think

00:24:37,940 --> 00:24:41,659
it's not a good way and also like keep

00:24:39,950 --> 00:24:44,059
into one connection have a lot of

00:24:41,659 --> 00:24:47,450
benefits for example you will have a lot

00:24:44,059 --> 00:24:50,450
less load on your servers it is possible

00:24:47,450 --> 00:24:54,890
to have custom API error handling do not

00:24:50,450 --> 00:24:57,409
do undo instead try again yep it's

00:24:54,890 --> 00:24:59,779
possible okay

00:24:57,409 --> 00:25:01,250
you prefer if you have for callbacks you

00:24:59,779 --> 00:25:03,049
can do anything keys that you want in

00:25:01,250 --> 00:25:04,880
Colbert so you can you can make a catch

00:25:03,049 --> 00:25:08,240
method and do anything in the catch

00:25:04,880 --> 00:25:10,520
message that you want yeah so the next

00:25:08,240 --> 00:25:12,500
one is should we expect logos abstracted

00:25:10,520 --> 00:25:14,149
from radix is it I wonder if it's

00:25:12,500 --> 00:25:16,210
possible to integrate with something

00:25:14,149 --> 00:25:18,320
like cerebral

00:25:16,210 --> 00:25:21,440
useful like X client it's like

00:25:18,320 --> 00:25:25,100
abstracted from the from the redux

00:25:21,440 --> 00:25:26,870
you can use it with use Lagarde's client

00:25:25,100 --> 00:25:29,750
doesn't have for with arson site you can

00:25:26,870 --> 00:25:32,960
use any state in states api that you

00:25:29,750 --> 00:25:35,270
want okay let's do two more

00:25:32,960 --> 00:25:37,669
how does WebSocket a form under poor

00:25:35,270 --> 00:25:40,669
network connection

00:25:37,669 --> 00:25:43,590
we test like Lagarde's web sockets in

00:25:40,669 --> 00:25:45,840
the China I think it's a good test

00:25:43,590 --> 00:25:47,700
the main problem with WebSockets and

00:25:45,840 --> 00:25:49,559
many people hear about it is not a

00:25:47,700 --> 00:25:53,010
larper connection the main problem is

00:25:49,559 --> 00:25:55,559
firewalls and firewalls it like oh I see

00:25:53,010 --> 00:25:56,970
unknown traffic I will just cut just cut

00:25:55,559 --> 00:25:59,610
it because I can don't know what is it

00:25:56,970 --> 00:26:01,740
and there is a good solution use secure

00:25:59,610 --> 00:26:04,440
WebSocket if your WebSockets will be

00:26:01,740 --> 00:26:08,130
encrypted with DSL like we SS protocol

00:26:04,440 --> 00:26:11,010
in this case it should be equal to like

00:26:08,130 --> 00:26:12,960
keep alive our CTP connections so

00:26:11,010 --> 00:26:15,150
firewalls will not see a difference and

00:26:12,960 --> 00:26:18,030
you feel like you not cut your

00:26:15,150 --> 00:26:19,980
connection okay and let's do one more

00:26:18,030 --> 00:26:21,300
do you think about what do you think

00:26:19,980 --> 00:26:23,490
about snapshot did you think about

00:26:21,300 --> 00:26:26,250
snapshots in order to clean events over

00:26:23,490 --> 00:26:27,690
time or we need to store all events yep

00:26:26,250 --> 00:26:30,929
it care for snapshots which have a

00:26:27,690 --> 00:26:32,940
snapshot about 100 actions of course

00:26:30,929 --> 00:26:35,429
because without the snapshots any undo

00:26:32,940 --> 00:26:37,260
action will be like extremely long and

00:26:35,429 --> 00:26:40,700
on this positive note thank you very

00:26:37,260 --> 00:26:40,700
much for the presentation appreciated

00:26:47,200 --> 00:26:49,260

YouTube URL: https://www.youtube.com/watch?v=DvHNOplQ-tY


