Title: ReactiveConf 2017: Evan You AMA
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Discovery stage

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:10,000
[Music]

00:00:07,940 --> 00:00:10,000
you

00:00:14,599 --> 00:00:18,470
all right so I mean you have this kind

00:00:16,880 --> 00:00:22,910
of crazy CPU works on all this crazy

00:00:18,470 --> 00:00:26,619
stuff so the first question was to start

00:00:22,910 --> 00:00:31,300
at the top which is your fuse future

00:00:26,619 --> 00:00:31,300
like how do you see it fitting inside

00:00:33,489 --> 00:00:44,410
how do you see so the first thing I want

00:00:41,570 --> 00:00:47,030
to say is the thing that ecosystem is

00:00:44,410 --> 00:00:49,219
more healthy when you have like

00:00:47,030 --> 00:00:53,090
competing solutions and in a sense I

00:00:49,219 --> 00:00:55,070
don't even think it's a it's a one

00:00:53,090 --> 00:00:58,280
solution all the other situation but

00:00:55,070 --> 00:01:00,590
more like these different solutions

00:00:58,280 --> 00:01:03,199
definitely cover different different

00:01:00,590 --> 00:01:04,699
target audience gets the web space is

00:01:03,199 --> 00:01:18,920
really diverse we have all kinds of

00:01:04,699 --> 00:01:23,180
different developers about how they want

00:01:18,920 --> 00:01:25,610
to deal with building user interfaces so

00:01:23,180 --> 00:01:27,560
and I think it's important that we have

00:01:25,610 --> 00:01:29,659
these different opinions and choices for

00:01:27,560 --> 00:01:31,670
these different groups of people so in

00:01:29,659 --> 00:01:34,189
that sense there are definitely overlaps

00:01:31,670 --> 00:01:36,770
between these solutions but I also feel

00:01:34,189 --> 00:01:39,049
like each of these main street solutions

00:01:36,770 --> 00:01:42,860
definitely deserve their own dedicated

00:01:39,049 --> 00:01:47,420
group of users and I'm just happy that

00:01:42,860 --> 00:01:49,579
view is able to fill a gap in I believe

00:01:47,420 --> 00:01:53,240
you have captured a group of users who

00:01:49,579 --> 00:01:55,579
are like not the like hundred percent

00:01:53,240 --> 00:01:59,750
pre-sized her Guardians have either

00:01:55,579 --> 00:02:01,939
neither react nor angular and that's

00:01:59,750 --> 00:02:03,530
also why view is able to be where it is

00:02:01,939 --> 00:02:06,140
today because in the beginning I really

00:02:03,530 --> 00:02:08,030
didn't I when I started view I had no

00:02:06,140 --> 00:02:10,549
intention of say like I want to compete

00:02:08,030 --> 00:02:13,720
with react or angular it just sort of

00:02:10,549 --> 00:02:18,200
grew naturally organically because

00:02:13,720 --> 00:02:20,390
people who just they naturally fell to

00:02:18,200 --> 00:02:24,560
to work with you they feel it's more

00:02:20,390 --> 00:02:26,650
natural for them so to answer the

00:02:24,560 --> 00:02:28,280
question I think the future of you I

00:02:26,650 --> 00:02:29,840
honestly I

00:02:28,280 --> 00:02:31,970
obviously hope it's continued it's going

00:02:29,840 --> 00:02:33,530
to continue to grow but whether it's

00:02:31,970 --> 00:02:36,770
going to be more popular than reactor

00:02:33,530 --> 00:02:39,260
angler I don't know and I don't think

00:02:36,770 --> 00:02:41,690
it's it's necessary that I want to work

00:02:39,260 --> 00:02:45,319
towards that that's not my goal my goal

00:02:41,690 --> 00:02:47,569
is to to serve the users who like view

00:02:45,319 --> 00:02:49,700
and make sure like they are more

00:02:47,569 --> 00:02:52,400
productive they can build their apps

00:02:49,700 --> 00:02:54,530
faster and more efficiently so I'm kind

00:02:52,400 --> 00:02:57,560
of a big fan of a lot of niche

00:02:54,530 --> 00:02:59,780
technologies right so Lisbon and whatnot

00:02:57,560 --> 00:03:01,310
and reason so there's a challenge I

00:02:59,780 --> 00:03:02,750
think whenever you have a smaller

00:03:01,310 --> 00:03:04,640
community to sustain it there's a big

00:03:02,750 --> 00:03:06,590
social aspect to this right versus kind

00:03:04,640 --> 00:03:10,269
of the inertia that maybe a bigger

00:03:06,590 --> 00:03:12,140
ecosystem has so how do you maintain

00:03:10,269 --> 00:03:17,870
this community you actually keep it

00:03:12,140 --> 00:03:21,500
going even at a small size so the thing

00:03:17,870 --> 00:03:24,110
is we have so few is an interesting case

00:03:21,500 --> 00:03:27,110
where it's in its position as a

00:03:24,110 --> 00:03:30,110
framework assists between react and

00:03:27,110 --> 00:03:32,150
angular in some sense react is really

00:03:30,110 --> 00:03:33,769
community driven a lot of innovations

00:03:32,150 --> 00:03:36,200
comes from people who are just excited

00:03:33,769 --> 00:03:39,290
to build things on top of react angular

00:03:36,200 --> 00:03:41,000
seems to be more in a complete package

00:03:39,290 --> 00:03:42,290
where it sort of offers opinions and

00:03:41,000 --> 00:03:44,570
solutions to almost everything you can

00:03:42,290 --> 00:03:47,780
think of in United States in between

00:03:44,570 --> 00:03:50,650
where we sort of carefully try to pick a

00:03:47,780 --> 00:03:53,239
sweet spot between pragmatism and

00:03:50,650 --> 00:03:56,630
leaving things that can be done in user

00:03:53,239 --> 00:03:58,670
land to the users so we want to provide

00:03:56,630 --> 00:04:02,060
useful primitives but we also want to do

00:03:58,670 --> 00:04:06,040
a bit more to come and cover more common

00:04:02,060 --> 00:04:08,690
use cases essentially we are we are

00:04:06,040 --> 00:04:11,959
think of you as something that

00:04:08,690 --> 00:04:13,850
incorporates the react or on the same

00:04:11,959 --> 00:04:15,680
level but we try to offer a think layer

00:04:13,850 --> 00:04:17,630
on top of it to be tiny bit more

00:04:15,680 --> 00:04:20,419
opinionated but like allows you to opt

00:04:17,630 --> 00:04:23,330
in and I think that's a healthy mix

00:04:20,419 --> 00:04:24,979
because we allow people who want more

00:04:23,330 --> 00:04:27,229
opinions to be productive from the

00:04:24,979 --> 00:04:28,910
get-go but we also leave room for the

00:04:27,229 --> 00:04:31,100
community to sort of figure out their

00:04:28,910 --> 00:04:34,310
own way of doing things that makes a lot

00:04:31,100 --> 00:04:37,280
of sense so whenever you were starting

00:04:34,310 --> 00:04:39,279
with you were you focused a lot on the

00:04:37,280 --> 00:04:41,859
implementation so for example

00:04:39,279 --> 00:04:43,419
we have the reactor kind of popularized

00:04:41,859 --> 00:04:45,099
this idea of a virtual DOM and whatnot

00:04:43,419 --> 00:04:46,329
were you worried about the

00:04:45,099 --> 00:04:48,879
implementation or not or where you focus

00:04:46,329 --> 00:04:50,379
kind of purely on the abstractions and

00:04:48,879 --> 00:04:53,409
the API kind of what you were presenting

00:04:50,379 --> 00:04:56,049
to your users I think it's a mix of both

00:04:53,409 --> 00:04:59,139
in the beginning the experiment really

00:04:56,049 --> 00:05:01,589
comes from two aspects the first aspect

00:04:59,139 --> 00:05:05,529
is the first version of view is

00:05:01,589 --> 00:05:07,779
obviously inspired by angular a lot but

00:05:05,529 --> 00:05:11,379
the from the API perspective is really

00:05:07,779 --> 00:05:13,779
trying to strip out all the all the

00:05:11,379 --> 00:05:16,929
things that I seem that in the way for

00:05:13,779 --> 00:05:19,089
people getting started and just try to

00:05:16,929 --> 00:05:21,809
expose the minimal amount of things you

00:05:19,089 --> 00:05:25,149
need to know to get something going on

00:05:21,809 --> 00:05:27,099
so I think that's important for learning

00:05:25,149 --> 00:05:30,219
important for getting people into of the

00:05:27,099 --> 00:05:31,599
development which is kind of a mission I

00:05:30,219 --> 00:05:33,969
sort of putting to building this

00:05:31,599 --> 00:05:35,709
framework and the other aspect of it was

00:05:33,969 --> 00:05:39,429
the internal implementation the

00:05:35,709 --> 00:05:41,079
reactivity system which was the internal

00:05:39,429 --> 00:05:42,699
was different from the way angular 2

00:05:41,079 --> 00:05:46,119
things angular used dirty-checking back

00:05:42,699 --> 00:05:50,199
then and view was it's essentially

00:05:46,119 --> 00:05:52,479
trying to take some the ideas from knock

00:05:50,199 --> 00:05:54,999
out and like meteor tracker and try to

00:05:52,479 --> 00:05:56,889
but expose them view yes five getters

00:05:54,999 --> 00:05:59,649
and setters so that it becomes sort of a

00:05:56,889 --> 00:06:02,049
little bit magical way of making things

00:05:59,649 --> 00:06:06,429
reactive pretty much like mob acts what

00:06:02,049 --> 00:06:09,129
is what max is doing today so that was

00:06:06,429 --> 00:06:11,139
the implementation part I was just had

00:06:09,129 --> 00:06:13,809
this idea because back then we still had

00:06:11,139 --> 00:06:15,819
to support some older browsers and it

00:06:13,809 --> 00:06:18,579
was like what if we can just ditch ie8

00:06:15,819 --> 00:06:20,739
and just use es5 getters and setters so

00:06:18,579 --> 00:06:24,429
that was kind of part of the the

00:06:20,739 --> 00:06:25,479
intention of doing it for people were

00:06:24,429 --> 00:06:27,369
kind of interested in the implementation

00:06:25,479 --> 00:06:29,349
layer right so there are two there are

00:06:27,369 --> 00:06:31,360
consumers of your library who mainly

00:06:29,349 --> 00:06:33,099
focus on like API and ergonomics and

00:06:31,360 --> 00:06:35,409
whatnot but if someone wants to kind of

00:06:33,099 --> 00:06:36,849
peek under the hood how would you say

00:06:35,409 --> 00:06:38,529
the implementation of you kind of

00:06:36,849 --> 00:06:42,159
differs and what's the guiding

00:06:38,529 --> 00:06:46,749
philosophy there so if you has been

00:06:42,159 --> 00:06:48,189
rewritten like two times so I would just

00:06:46,749 --> 00:06:50,139
talk about version two because I believe

00:06:48,189 --> 00:06:52,870
early versions were

00:06:50,139 --> 00:06:57,460
you know old code but the the newer

00:06:52,870 --> 00:07:00,129
version I guess it can I would say the

00:06:57,460 --> 00:07:03,220
internal pieces are sort of try I try to

00:07:00,129 --> 00:07:05,520
separate into different aspects so the

00:07:03,220 --> 00:07:08,669
observer package is really just

00:07:05,520 --> 00:07:10,780
reactivity making objects reactive and

00:07:08,669 --> 00:07:13,389
also the part of code that tracks

00:07:10,780 --> 00:07:16,180
changes over time then there's the part

00:07:13,389 --> 00:07:18,310
which is responsible for rendering it's

00:07:16,180 --> 00:07:22,690
forked off stab Dom which is a great

00:07:18,310 --> 00:07:25,479
library we added views component

00:07:22,690 --> 00:07:28,449
lifecycle on top of it and expanded its

00:07:25,479 --> 00:07:31,419
its module system to add support for

00:07:28,449 --> 00:07:34,599
like things like transitions and other

00:07:31,419 --> 00:07:37,060
things so for people who want to get

00:07:34,599 --> 00:07:40,120
into it I think so these are the two

00:07:37,060 --> 00:07:43,509
major chunks of things that people need

00:07:40,120 --> 00:07:46,719
to sort of know about like how these

00:07:43,509 --> 00:07:48,520
internal reactivity works and how views

00:07:46,719 --> 00:07:50,469
are the rendering layer how the virtual

00:07:48,520 --> 00:07:51,879
Dom different happens and if they want

00:07:50,469 --> 00:07:55,360
to go further they probably should look

00:07:51,879 --> 00:07:57,159
at how this view is also the core is

00:07:55,360 --> 00:08:00,490
platform agnostic and we kind of break

00:07:57,159 --> 00:08:02,289
out platform specific code into like Dom

00:08:00,490 --> 00:08:05,199
specific things is in the web package

00:08:02,289 --> 00:08:07,800
and we also have a native runtime for

00:08:05,199 --> 00:08:10,389
the week's project so we use different

00:08:07,800 --> 00:08:12,219
implementations for part of the so

00:08:10,389 --> 00:08:14,409
inject different runtime modules into

00:08:12,219 --> 00:08:16,389
the core virtual Dom patching algorithm

00:08:14,409 --> 00:08:17,949
for different platforms so that's

00:08:16,389 --> 00:08:20,110
something interesting to look like look

00:08:17,949 --> 00:08:23,110
at it as well do you want to tell us

00:08:20,110 --> 00:08:25,509
kind of any specific differences in

00:08:23,110 --> 00:08:27,699
terms of if I can visualize how say for

00:08:25,509 --> 00:08:30,580
example reacts virtual Dom works and how

00:08:27,699 --> 00:08:31,690
use internal implementation works is

00:08:30,580 --> 00:08:34,419
there any particular interesting

00:08:31,690 --> 00:08:35,800
differences between the two so when you

00:08:34,419 --> 00:08:37,870
go down to the virtual Dom layer it's

00:08:35,800 --> 00:08:40,810
mostly algorithmic different differences

00:08:37,870 --> 00:08:42,339
so it's probably just details but on the

00:08:40,810 --> 00:08:44,140
on the higher level there's an

00:08:42,339 --> 00:08:46,540
interesting distinction where view has

00:08:44,140 --> 00:08:49,390
this extra layer of templates right and

00:08:46,540 --> 00:08:51,070
we have a right though I should probably

00:08:49,390 --> 00:08:53,140
mention the third biggest chunk of the

00:08:51,070 --> 00:08:56,320
code is the compiler that is responsible

00:08:53,140 --> 00:08:59,920
for compiling templates into virtual Dom

00:08:56,320 --> 00:09:01,750
run the render function code so so in

00:08:59,920 --> 00:09:03,460
react we we really just use the battle

00:09:01,750 --> 00:09:05,260
plug-in Transpo JSX into

00:09:03,460 --> 00:09:07,240
into raw render function code but in

00:09:05,260 --> 00:09:09,339
view it's a bit more involved because we

00:09:07,240 --> 00:09:12,399
have the full template syntax and the

00:09:09,339 --> 00:09:15,190
template syntax was sort of evolved from

00:09:12,399 --> 00:09:17,589
version 1 which then kind of derives

00:09:15,190 --> 00:09:19,660
from angular syntax so there was a lot

00:09:17,589 --> 00:09:23,290
of them I would say there is some

00:09:19,660 --> 00:09:24,700
history burden in there but we try to in

00:09:23,290 --> 00:09:28,180
the version to rewrite we try to make

00:09:24,700 --> 00:09:31,600
the syntax a bit more concise a bit more

00:09:28,180 --> 00:09:33,130
coherent and and it turns out in the

00:09:31,600 --> 00:09:34,959
process we realized there was a lot of

00:09:33,130 --> 00:09:38,950
interesting we can do because we have

00:09:34,959 --> 00:09:40,990
this extra compilation step so so this

00:09:38,950 --> 00:09:42,610
kind of connects with some of the

00:09:40,990 --> 00:09:45,399
optimizations I talked about in

00:09:42,610 --> 00:09:48,190
yesterday's talk in where in which we

00:09:45,399 --> 00:09:50,770
are able to like analyze static trees by

00:09:48,190 --> 00:09:52,720
default optimize some of the different

00:09:50,770 --> 00:09:54,190
skip things that we didn't need to do

00:09:52,720 --> 00:09:57,640
because we have more static information

00:09:54,190 --> 00:09:59,380
at compile time allows these these

00:09:57,640 --> 00:10:01,649
things we can just do it transparently

00:09:59,380 --> 00:10:07,920
without the user even knowing about it

00:10:01,649 --> 00:10:07,920
and and then on top of that we also

00:10:08,070 --> 00:10:12,580
expand it on the template idea even

00:10:10,870 --> 00:10:14,860
further we we have this single file

00:10:12,580 --> 00:10:17,560
component format which is also really

00:10:14,860 --> 00:10:20,290
just a source format for compliation so

00:10:17,560 --> 00:10:22,839
when you co-locate more about your

00:10:20,290 --> 00:10:24,339
components into the same file the

00:10:22,839 --> 00:10:26,650
compiler get more information in

00:10:24,339 --> 00:10:30,040
compiler can do more so that's kind of

00:10:26,650 --> 00:10:33,580
the interesting distinction we realize

00:10:30,040 --> 00:10:35,320
after we did it yeah so there's a bunch

00:10:33,580 --> 00:10:38,380
of obviously there's been a big movement

00:10:35,320 --> 00:10:40,209
in terms of moving things over kind of

00:10:38,380 --> 00:10:41,470
static analysis and compilation or

00:10:40,209 --> 00:10:43,900
whatnot in JavaScript community

00:10:41,470 --> 00:10:45,430
I'm just do you enjoy working at that

00:10:43,900 --> 00:10:47,620
layer or do you mainly focus on the

00:10:45,430 --> 00:10:48,910
product in terms of like that's what

00:10:47,620 --> 00:10:50,950
excites you to be able to deliver this

00:10:48,910 --> 00:10:52,420
this library that everyone uses or do

00:10:50,950 --> 00:10:54,850
you enjoy kind of geeking out and being

00:10:52,420 --> 00:10:56,440
able to apply all these optimizations at

00:10:54,850 --> 00:11:00,310
the static compilation stuff I think I

00:10:56,440 --> 00:11:04,300
enjoy both I think it's a because being

00:11:00,310 --> 00:11:06,730
able to I think for a library to succeed

00:11:04,300 --> 00:11:08,380
both aspects are real important you want

00:11:06,730 --> 00:11:10,270
to have a streamlined package that

00:11:08,380 --> 00:11:12,850
people would enjoy you enjoying using

00:11:10,270 --> 00:11:15,640
but you also want to have great

00:11:12,850 --> 00:11:17,209
internals that you can promise that it's

00:11:15,640 --> 00:11:19,699
going to be robust it's going to

00:11:17,209 --> 00:11:21,980
for me it's going to be giving you the

00:11:19,699 --> 00:11:26,269
same defaults and kind of prevents you

00:11:21,980 --> 00:11:28,790
from doing things wrong so like that's

00:11:26,269 --> 00:11:30,740
why I get to keep on working it for so

00:11:28,790 --> 00:11:32,360
so long because there are we still have

00:11:30,740 --> 00:11:34,670
a long list of things that we want to

00:11:32,360 --> 00:11:37,459
implement and I think that's exciting

00:11:34,670 --> 00:11:39,769
so I think I kind of work in cycles

00:11:37,459 --> 00:11:42,980
sometimes I just dedicate to improve the

00:11:39,769 --> 00:11:45,470
API for awhile then I'm like now it's

00:11:42,980 --> 00:11:47,689
time to go back to the dowel level and

00:11:45,470 --> 00:11:49,910
try to optimize things so both are

00:11:47,689 --> 00:11:52,759
equally interesting very nice so along

00:11:49,910 --> 00:11:54,439
those lines you kind of talk about the

00:11:52,759 --> 00:11:57,199
migration from you know version one to

00:11:54,439 --> 00:11:59,629
version two you can work at the API

00:11:57,199 --> 00:12:01,670
lever and level and the implementation

00:11:59,629 --> 00:12:05,059
level any plans you want to share with

00:12:01,670 --> 00:12:06,889
us for Version three right so there was

00:12:05,059 --> 00:12:10,279
a brief mention of versions three a

00:12:06,889 --> 00:12:12,379
while ago but we after that we discuss a

00:12:10,279 --> 00:12:14,420
little bit and concluded that it should

00:12:12,379 --> 00:12:18,259
not really be called version three but

00:12:14,420 --> 00:12:23,089
rather we we want to label it as with an

00:12:18,259 --> 00:12:25,819
extra like - next label so the main idea

00:12:23,089 --> 00:12:27,980
is we want to swap out the current

00:12:25,819 --> 00:12:29,839
implementation the reactivity system

00:12:27,980 --> 00:12:33,230
which is based on us five getters and

00:12:29,839 --> 00:12:35,240
setters to leverage es2015 proxies and

00:12:33,230 --> 00:12:36,949
at the same time because you know

00:12:35,240 --> 00:12:39,980
practice basically demands the browser

00:12:36,949 --> 00:12:42,319
having native es2015 support so in the

00:12:39,980 --> 00:12:45,879
process we're going to essentially drop

00:12:42,319 --> 00:12:49,309
support for all browsers that does not

00:12:45,879 --> 00:12:51,139
natively support es2015 and leverage all

00:12:49,309 --> 00:12:55,160
the latest features like we can finally

00:12:51,139 --> 00:12:58,309
use map and set in our code base and so

00:12:55,160 --> 00:13:00,949
that's going to essentially slim clean

00:12:58,309 --> 00:13:04,129
up the code base a bit and gets rid of

00:13:00,949 --> 00:13:07,759
some of the current limitations of es5

00:13:04,129 --> 00:13:10,519
implementation in our reactivity system

00:13:07,759 --> 00:13:12,860
so it's going to be really partially

00:13:10,519 --> 00:13:16,100
internal base and code base improvement

00:13:12,860 --> 00:13:18,589
and also a public like quality of life

00:13:16,100 --> 00:13:22,819
improvements there's also going to be

00:13:18,589 --> 00:13:24,319
some performance improvements in certain

00:13:22,819 --> 00:13:27,860
cases but we still need to measure and

00:13:24,319 --> 00:13:29,540
benchmark that to be more precise but

00:13:27,860 --> 00:13:30,770
for the public API it's not going to

00:13:29,540 --> 00:13:33,470
change

00:13:30,770 --> 00:13:35,420
we try our best to try to keep it

00:13:33,470 --> 00:13:40,940
completely the same they're going to be

00:13:35,420 --> 00:13:43,190
on so on that there is going to be very

00:13:40,940 --> 00:13:44,630
one small tiny breaking change that we

00:13:43,190 --> 00:13:46,700
know for sure it's going to happen but

00:13:44,630 --> 00:13:50,930
it's probably not going to affect like

00:13:46,700 --> 00:13:53,630
99% users will not run into it that's

00:13:50,930 --> 00:13:56,420
why we were labeling it as 2 point X

00:13:53,630 --> 00:13:58,190
next and it's going to be basically two

00:13:56,420 --> 00:14:00,020
parallel branches that's maintained

00:13:58,190 --> 00:14:02,240
alongside each other and we just

00:14:00,020 --> 00:14:04,160
cherry-pick P features because the nice

00:14:02,240 --> 00:14:06,620
thing is this refactoring really doesn't

00:14:04,160 --> 00:14:09,380
affect the feature ler that much it's

00:14:06,620 --> 00:14:11,330
just the the internals and most of our

00:14:09,380 --> 00:14:13,340
future lyric code will remain exactly

00:14:11,330 --> 00:14:16,760
the same the public API is going to be

00:14:13,340 --> 00:14:18,680
the same so for we believe for the

00:14:16,760 --> 00:14:21,200
majority of the users if they are able

00:14:18,680 --> 00:14:22,670
to drop IE then they should just be able

00:14:21,200 --> 00:14:24,800
to move over to the new version with

00:14:22,670 --> 00:14:28,540
minimal effort which was why we believe

00:14:24,800 --> 00:14:31,280
it should not be caught 3.0 at all but

00:14:28,540 --> 00:14:33,530
so currently honestly there's no really

00:14:31,280 --> 00:14:35,980
no plan that to reform in the in the

00:14:33,530 --> 00:14:39,830
short term because we don't really see

00:14:35,980 --> 00:14:43,160
enough like intentions to do breaking

00:14:39,830 --> 00:14:44,450
API changes well we have a few things we

00:14:43,160 --> 00:14:46,420
want to change but it's probably not

00:14:44,450 --> 00:14:49,700
worth the whole breaking released yet

00:14:46,420 --> 00:14:51,410
how do you balance so for example react

00:14:49,700 --> 00:14:52,670
fiber was released and they had to go

00:14:51,410 --> 00:14:54,700
through a lot of effort to make sure

00:14:52,670 --> 00:14:56,600
that they didn't break this public API

00:14:54,700 --> 00:14:57,620
while they were doing this massive

00:14:56,600 --> 00:14:59,690
refactoring of the underlying

00:14:57,620 --> 00:15:00,860
implementation how do you balance these

00:14:59,690 --> 00:15:03,350
concerns so we're saying that you

00:15:00,860 --> 00:15:05,270
already you have one small breaking

00:15:03,350 --> 00:15:06,980
change but largely you want to maintain

00:15:05,270 --> 00:15:09,380
this public API how do you actually

00:15:06,980 --> 00:15:12,470
achieve that without accidentally

00:15:09,380 --> 00:15:14,990
breaking one of your users case so yeah

00:15:12,470 --> 00:15:16,850
it is extremely hard to balance we like

00:15:14,990 --> 00:15:18,800
even in minor releases we sometimes

00:15:16,850 --> 00:15:23,240
still unexpectly bright people things

00:15:18,800 --> 00:15:25,730
but the core the the baseline is we make

00:15:23,240 --> 00:15:28,610
sure our public all documented public

00:15:25,730 --> 00:15:30,880
API works consistently and that's kind

00:15:28,610 --> 00:15:34,520
of covered by the test Suites and stuff

00:15:30,880 --> 00:15:37,610
so unfortunately a lot of the internal

00:15:34,520 --> 00:15:39,800
behavior for example we don't have a

00:15:37,610 --> 00:15:42,050
synthetic event system so sometimes like

00:15:39,800 --> 00:15:44,360
when we are just the way we handle

00:15:42,050 --> 00:15:46,190
events people who rely on

00:15:44,360 --> 00:15:48,620
some really low-level details of the

00:15:46,190 --> 00:15:50,839
tablet Dom behavior behaves we're

00:15:48,620 --> 00:15:54,440
running to problems but unfortunately

00:15:50,839 --> 00:15:56,180
that's that's just like that happens

00:15:54,440 --> 00:15:59,420
when people rely on things that's not

00:15:56,180 --> 00:16:01,880
part of a public API and it's it's

00:15:59,420 --> 00:16:03,890
really hard to make a like super strict

00:16:01,880 --> 00:16:06,829
guarantee about that but we try our best

00:16:03,890 --> 00:16:08,540
to minimize such cases and try to we

00:16:06,829 --> 00:16:14,149
label them as regressions and try to fix

00:16:08,540 --> 00:16:16,640
them in the long run like so for the two

00:16:14,149 --> 00:16:18,260
points for the next version we

00:16:16,640 --> 00:16:20,930
considered that breaking change to beYOU

00:16:18,260 --> 00:16:23,839
a worthwhile trade-off because it's

00:16:20,930 --> 00:16:26,930
really small enough and it's people

00:16:23,839 --> 00:16:29,899
really would actually run into it but in

00:16:26,930 --> 00:16:31,070
return you get a lot of benefits so we

00:16:29,899 --> 00:16:33,019
believe that's a worthwhile trade-off

00:16:31,070 --> 00:16:35,209
and we would only make such trade-offs

00:16:33,019 --> 00:16:38,420
if you know the the benefit greatly

00:16:35,209 --> 00:16:40,339
greatly outweighs the drawback so

00:16:38,420 --> 00:16:43,730
there's a question here about you know

00:16:40,339 --> 00:16:46,850
is the the motivation for moving to

00:16:43,730 --> 00:16:49,760
typescript is that's generally driven by

00:16:46,850 --> 00:16:52,579
compiling optimizations concerns or are

00:16:49,760 --> 00:16:55,040
there other reasons so that there's a

00:16:52,579 --> 00:16:58,490
concern for example to transit to using

00:16:55,040 --> 00:17:01,699
typescript is there like what would be

00:16:58,490 --> 00:17:03,610
the motivation for that compiling

00:17:01,699 --> 00:17:05,839
operations our concern for you to

00:17:03,610 --> 00:17:08,419
transit to using time well we're not

00:17:05,839 --> 00:17:10,990
technically transiting to typescript

00:17:08,419 --> 00:17:14,510
we're just improving typescript support

00:17:10,990 --> 00:17:17,000
because we believe typescript is great

00:17:14,510 --> 00:17:18,620
for the users who like static typing so

00:17:17,000 --> 00:17:20,179
we want to make sure users who want to

00:17:18,620 --> 00:17:22,910
use both view and types great get the

00:17:20,179 --> 00:17:25,760
optimal experience out of it but

00:17:22,910 --> 00:17:27,620
typescript itself really has little to

00:17:25,760 --> 00:17:29,419
do with how view optimizes things

00:17:27,620 --> 00:17:32,780
internally so I'm not sure if that

00:17:29,419 --> 00:17:34,700
question is actually make sense the idea

00:17:32,780 --> 00:17:36,110
is that this is an end user

00:17:34,700 --> 00:17:40,130
ergonomic issue rather than an

00:17:36,110 --> 00:17:42,679
implementation exactly so any have you

00:17:40,130 --> 00:17:44,630
tried out Facebook's pre-pack yes or

00:17:42,679 --> 00:17:48,429
have you heard of it any thoughts on it

00:17:44,630 --> 00:17:51,230
so yeah I've played with a little bit so

00:17:48,429 --> 00:17:52,730
essentially but that was when is first

00:17:51,230 --> 00:17:54,470
announced I'm I haven't being like

00:17:52,730 --> 00:17:56,480
closely following up how it has been

00:17:54,470 --> 00:17:58,250
progressing but my initial impression is

00:17:56,480 --> 00:18:00,050
it does a lot of cool things in

00:17:58,250 --> 00:18:02,570
in places but it muscle has some places

00:18:00,050 --> 00:18:05,060
where like loop unrolling sometimes it's

00:18:02,570 --> 00:18:09,470
just undesirable makes the code actually

00:18:05,060 --> 00:18:11,150
much larger so and it at that time there

00:18:09,470 --> 00:18:12,860
wasn't you know a configurable options

00:18:11,150 --> 00:18:15,140
to say I just want to disable this

00:18:12,860 --> 00:18:16,610
specific behavior so our initial

00:18:15,140 --> 00:18:18,350
impression is this is cool but it's

00:18:16,610 --> 00:18:20,600
probably not ready for production yet

00:18:18,350 --> 00:18:23,150
well but it's definitely interesting and

00:18:20,600 --> 00:18:24,680
we'll keep watching it just in general I

00:18:23,150 --> 00:18:27,950
mean you know with tools like Babel and

00:18:24,680 --> 00:18:30,110
whatnot have you explored the space of

00:18:27,950 --> 00:18:31,490
with the compiler the kinds of

00:18:30,110 --> 00:18:34,360
optimizations you can do ahead of time

00:18:31,490 --> 00:18:36,620
with eval another time and whatnot

00:18:34,360 --> 00:18:39,200
that's a very interesting question

00:18:36,620 --> 00:18:40,580
unfortunately not because Babel doesn't

00:18:39,200 --> 00:18:43,640
really afford that capability

00:18:40,580 --> 00:18:46,640
there is no partial evaluation that's

00:18:43,640 --> 00:18:48,530
made possible of your Babel in a way so

00:18:46,640 --> 00:18:50,660
a pre-pack is able to do that I believe

00:18:48,530 --> 00:18:53,030
due to the way it is specifically

00:18:50,660 --> 00:18:55,430
architecture to do flow based like

00:18:53,030 --> 00:18:58,070
partial evaluation similar to how flow

00:18:55,430 --> 00:18:59,360
in first types by like kind of making

00:18:58,070 --> 00:19:04,940
assumptions about that but I don't think

00:18:59,360 --> 00:19:07,660
these tools expose the you like easier

00:19:04,940 --> 00:19:10,280
enough easy enough to use primitives for

00:19:07,660 --> 00:19:12,530
tooling to be built on top of that but

00:19:10,280 --> 00:19:16,250
I'd be curious if there's something like

00:19:12,530 --> 00:19:18,370
that available yeah so I mean with tools

00:19:16,250 --> 00:19:20,360
like babel and and whatnot and

00:19:18,370 --> 00:19:22,310
implementing templating languages well

00:19:20,360 --> 00:19:26,030
not it takes a lot of effort to kind of

00:19:22,310 --> 00:19:27,380
add a library like this what are your

00:19:26,030 --> 00:19:29,420
thoughts in kind of a general ast

00:19:27,380 --> 00:19:31,790
transformation so something like macro

00:19:29,420 --> 00:19:33,740
system sweet Jas that kind of thing

00:19:31,790 --> 00:19:35,030
how would that if that was available how

00:19:33,740 --> 00:19:39,380
would that change or implementation your

00:19:35,030 --> 00:19:41,720
usage and ergonomics of view could you

00:19:39,380 --> 00:19:44,480
repeat that question yeah sure so if

00:19:41,720 --> 00:19:46,430
imagine that Java Script had macros

00:19:44,480 --> 00:19:49,360
mm-hmm how would that change either the

00:19:46,430 --> 00:19:53,750
implementation or the ergonomics of view

00:19:49,360 --> 00:19:55,490
if javis crackles like but but the

00:19:53,750 --> 00:19:58,490
macros how would that be different from

00:19:55,490 --> 00:19:59,600
say a babble plug-in yes I sew babble

00:19:58,490 --> 00:20:01,670
plugins right now are kind of

00:19:59,600 --> 00:20:05,240
approaching I think macros right imagine

00:20:01,670 --> 00:20:06,679
this was built into the the language so

00:20:05,240 --> 00:20:08,300
right now I think to add for example the

00:20:06,679 --> 00:20:10,429
templating language requires a lot of

00:20:08,300 --> 00:20:11,260
efforts if you're able to do say a

00:20:10,429 --> 00:20:13,680
generalized

00:20:11,260 --> 00:20:15,610
see transformation at the library level

00:20:13,680 --> 00:20:17,050
would that be a useful thing for the

00:20:15,610 --> 00:20:18,700
JavaScript ecosystem or do you think

00:20:17,050 --> 00:20:21,040
that power slightly may be more

00:20:18,700 --> 00:20:23,410
dangerous than useful I honestly believe

00:20:21,040 --> 00:20:25,960
is going to be super dangerous the way

00:20:23,410 --> 00:20:27,910
the JavaScript ecosystem is right now is

00:20:25,960 --> 00:20:29,920
like we already have enough crazy ideas

00:20:27,910 --> 00:20:32,470
given there the language itself is

00:20:29,920 --> 00:20:34,300
doesn't have mackerels and i think it's

00:20:32,470 --> 00:20:35,770
a good thing that the the way of

00:20:34,300 --> 00:20:38,080
experimenting with language level

00:20:35,770 --> 00:20:40,270
features is separated into a you know a

00:20:38,080 --> 00:20:43,810
tall chain that's separate from the

00:20:40,270 --> 00:20:46,170
language itself I personally hope we

00:20:43,810 --> 00:20:49,750
don't actually have macros in JavaScript

00:20:46,170 --> 00:20:52,390
fair enough so there's some questions

00:20:49,750 --> 00:20:54,460
about you know so for example react 16

00:20:52,390 --> 00:20:56,950
has the fiber reconciliation they've

00:20:54,460 --> 00:20:59,440
done a lot of work to kind of optimize

00:20:56,950 --> 00:21:01,570
and be able to assign priorities to

00:20:59,440 --> 00:21:03,040
certain updates and whatnot is their

00:21:01,570 --> 00:21:06,250
equivalent work being done on the View

00:21:03,040 --> 00:21:08,080
side of things so we don't have a strict

00:21:06,250 --> 00:21:11,490
fiber equivalent but the interesting

00:21:08,080 --> 00:21:14,470
thing is if you already the way viewed

00:21:11,490 --> 00:21:18,630
updates work is we already do a similar

00:21:14,470 --> 00:21:22,810
style of we push each components updates

00:21:18,630 --> 00:21:25,090
job as a unit of work into a scheduler

00:21:22,810 --> 00:21:27,190
so we have that concept like from

00:21:25,090 --> 00:21:29,410
starting 2.0 but we never really

00:21:27,190 --> 00:21:30,970
leveraged that much aside from making

00:21:29,410 --> 00:21:34,810
sure the components updated in the

00:21:30,970 --> 00:21:37,930
correct order in cascading sequence but

00:21:34,810 --> 00:21:40,210
it's fiber really give us some ideas

00:21:37,930 --> 00:21:43,330
about how we can actually like leverage

00:21:40,210 --> 00:21:46,240
what we already have and try to you know

00:21:43,330 --> 00:21:48,070
simulate what fiber does in some cases

00:21:46,240 --> 00:21:51,250
it's not going to be exactly the same of

00:21:48,070 --> 00:21:53,380
fibers but the thing is the biggest

00:21:51,250 --> 00:21:55,420
change about fiber is it turned it into

00:21:53,380 --> 00:21:57,940
a deep stack call into something that

00:21:55,420 --> 00:22:02,380
flat queue that you can sort of

00:21:57,940 --> 00:22:03,970
rearrange and prioritize but in view we

00:22:02,380 --> 00:22:06,460
already had this like queue like

00:22:03,970 --> 00:22:08,890
structure that's in place we just never

00:22:06,460 --> 00:22:10,810
actually did anything about it aside

00:22:08,890 --> 00:22:13,630
from making sure that the order is

00:22:10,810 --> 00:22:15,670
correct but we're we're really

00:22:13,630 --> 00:22:20,500
interesting watching too we're expecting

00:22:15,670 --> 00:22:24,040
to see more like real-world use cases

00:22:20,500 --> 00:22:25,060
where fiber provides interesting like

00:22:24,040 --> 00:22:28,030
real-world use case

00:22:25,060 --> 00:22:30,850
and we hope to analyze it a bit better

00:22:28,030 --> 00:22:33,310
to dip to move before before we actually

00:22:30,850 --> 00:22:35,580
move to you know pick some of the great

00:22:33,310 --> 00:22:38,590
ideas from that into our current system

00:22:35,580 --> 00:22:39,940
kind of on that theme of you know taking

00:22:38,590 --> 00:22:41,830
the best and learning from other other

00:22:39,940 --> 00:22:44,020
people is there going to be kind of an

00:22:41,830 --> 00:22:48,250
equivalent of say glimmers opcode

00:22:44,020 --> 00:22:50,020
approach in implementation that's a

00:22:48,250 --> 00:22:53,470
great question I was actually talking

00:22:50,020 --> 00:22:56,140
with Tom Dale yesterday and we were just

00:22:53,470 --> 00:23:00,400
like thinking out wild and I had this

00:22:56,140 --> 00:23:02,140
idea of directly compiled so so op codes

00:23:00,400 --> 00:23:03,940
are essentially a even lower level

00:23:02,140 --> 00:23:06,640
abstraction for the way you interact

00:23:03,940 --> 00:23:09,700
with Dom so currently virtual Dom is

00:23:06,640 --> 00:23:11,410
sort of a layer in between and when you

00:23:09,700 --> 00:23:13,450
perform the virtual down death and

00:23:11,410 --> 00:23:15,670
eventually what you actually produce is

00:23:13,450 --> 00:23:18,220
the exact sequence of operations you

00:23:15,670 --> 00:23:21,690
want to actually perform so we can think

00:23:18,220 --> 00:23:24,370
of the different paths as a runtime

00:23:21,690 --> 00:23:26,950
computation there produces runtime op

00:23:24,370 --> 00:23:28,600
codes but at the same time your template

00:23:26,950 --> 00:23:31,960
can also be directly compiled into

00:23:28,600 --> 00:23:34,680
static op codes so so there could be

00:23:31,960 --> 00:23:37,330
anarchy so it's probably gonna be pretty

00:23:34,680 --> 00:23:40,030
messy if we like to just slap it on top

00:23:37,330 --> 00:23:41,950
of what View is doing right now but it's

00:23:40,030 --> 00:23:43,870
technically possible for us to do

00:23:41,950 --> 00:23:46,810
something like you have the source

00:23:43,870 --> 00:23:50,290
template it can compile in directly into

00:23:46,810 --> 00:23:52,990
op codes and then for people who want to

00:23:50,290 --> 00:23:54,790
drop down to the render function layer

00:23:52,990 --> 00:23:56,320
and directly write render functions so

00:23:54,790 --> 00:23:57,640
which is a feature we definitely want to

00:23:56,320 --> 00:24:00,040
preserve because we believe it's

00:23:57,640 --> 00:24:02,200
available those would just produce alpha

00:24:00,040 --> 00:24:06,190
codes in runtime and both just talk to

00:24:02,200 --> 00:24:08,680
the lowest level the glimmer glimmer VM

00:24:06,190 --> 00:24:11,290
that or equivalent that handles the op

00:24:08,680 --> 00:24:16,390
codes and the great thing about op codes

00:24:11,290 --> 00:24:19,050
is that they can essentially be a format

00:24:16,390 --> 00:24:21,940
that's really easy to parse in transport

00:24:19,050 --> 00:24:24,520
transfer over the network which is super

00:24:21,940 --> 00:24:26,980
efficient and it also is a great format

00:24:24,520 --> 00:24:28,750
when we want to leverage the computing

00:24:26,980 --> 00:24:30,510
power of web assembly and then let the

00:24:28,750 --> 00:24:32,800
web assembly talk to the main thread

00:24:30,510 --> 00:24:35,050
because web assembly doesn't cannot

00:24:32,800 --> 00:24:37,180
touch the Dom so we need a very compact

00:24:35,050 --> 00:24:38,500
efficient format was to sort of talking

00:24:37,180 --> 00:24:39,820
back and forth

00:24:38,500 --> 00:24:42,340
transferring these like dhamma

00:24:39,820 --> 00:24:44,650
operations so that's some interesting

00:24:42,340 --> 00:24:45,820
area and the the glimmer team is

00:24:44,650 --> 00:24:48,039
actually exploring some really

00:24:45,820 --> 00:24:50,320
interesting ideas and we we have this

00:24:48,039 --> 00:24:52,450
idea of you know maybe one day we can

00:24:50,320 --> 00:24:54,190
leverage a common format so that all the

00:24:52,450 --> 00:24:56,950
frameworks can somewhat leverage that

00:24:54,190 --> 00:24:59,110
thing as a standardized interface to let

00:24:56,950 --> 00:25:01,659
represent lis talk to the main thread to

00:24:59,110 --> 00:25:03,520
touch the Dom very interesting there was

00:25:01,659 --> 00:25:06,580
one more I think interesting question to

00:25:03,520 --> 00:25:09,730
end on perhaps which was do you see kind

00:25:06,580 --> 00:25:12,669
of any shortcomings in the compile time

00:25:09,730 --> 00:25:14,320
optimization or static tooling in the

00:25:12,669 --> 00:25:16,570
JavaScript ecosystem right now so things

00:25:14,320 --> 00:25:19,360
like babel and and other things if so

00:25:16,570 --> 00:25:21,580
like what should the community be

00:25:19,360 --> 00:25:25,000
working on to improve these kinds of

00:25:21,580 --> 00:25:27,760
toolings well I wouldn't say it's a

00:25:25,000 --> 00:25:29,620
shortcoming like I wouldn't say there

00:25:27,760 --> 00:25:31,780
are like very obvious shortcomings maybe

00:25:29,620 --> 00:25:33,700
there should be min more documentation

00:25:31,780 --> 00:25:36,970
on to how to properly write about all

00:25:33,700 --> 00:25:39,730
plugging or the other thing we mentioned

00:25:36,970 --> 00:25:42,520
earlier about like you know if the tool

00:25:39,730 --> 00:25:45,010
actually lets you have some way to do

00:25:42,520 --> 00:25:47,530
partial evaluation of things essentially

00:25:45,010 --> 00:25:50,679
Babel currently you know pure static

00:25:47,530 --> 00:25:52,750
analysis can be useful but it obviously

00:25:50,679 --> 00:25:56,409
has limitations on how much information

00:25:52,750 --> 00:26:00,190
you can infer from just static semantics

00:25:56,409 --> 00:26:01,870
so runtime semantics currently there's

00:26:00,190 --> 00:26:04,510
nothing we can do about it but tools

00:26:01,870 --> 00:26:06,070
like flow and pre-pack already is going

00:26:04,510 --> 00:26:08,770
into that territory and it would be

00:26:06,070 --> 00:26:10,960
interesting to see how such capabilities

00:26:08,770 --> 00:26:12,760
can be exposed to the wider developer

00:26:10,960 --> 00:26:14,830
community so that we can leverage that

00:26:12,760 --> 00:26:15,460
to build even more interesting stuff on

00:26:14,830 --> 00:26:17,500
top of it

00:26:15,460 --> 00:26:20,290
super interesting thank you very much

00:26:17,500 --> 00:26:24,270
please give it up for Evan thank you

00:26:20,290 --> 00:26:24,270
[Applause]

00:26:28,890 --> 00:26:30,950

YouTube URL: https://www.youtube.com/watch?v=v2qlHXm1YnE


