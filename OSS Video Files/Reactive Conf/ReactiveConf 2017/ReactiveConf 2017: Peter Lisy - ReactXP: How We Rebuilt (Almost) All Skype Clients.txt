Title: ReactiveConf 2017: Peter Lisy - ReactXP: How We Rebuilt (Almost) All Skype Clients
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,020 --> 00:00:08,639
[Music]

00:00:15,690 --> 00:00:19,570
hello everybody

00:00:17,710 --> 00:00:22,800
please don't challenge me I'm not sure

00:00:19,570 --> 00:00:25,810
if I still can do it I used to be able

00:00:22,800 --> 00:00:29,260
so I'm Peter Lisi I'm a software

00:00:25,810 --> 00:00:32,110
engineer in Skype in Prague you can find

00:00:29,260 --> 00:00:34,810
me on Twitter you can reach me on skype

00:00:32,110 --> 00:00:37,270
or langdon if you have question

00:00:34,810 --> 00:00:39,550
afterwards there is a Microsoft booth

00:00:37,270 --> 00:00:44,670
with it where I'll be staying for the

00:00:39,550 --> 00:00:47,530
rest of the day probably so feel free so

00:00:44,670 --> 00:00:51,730
today I'm gonna tell you something about

00:00:47,530 --> 00:00:54,850
how we rebuilt almost all Skype clients

00:00:51,730 --> 00:00:57,520
why we decided to do that what was the

00:00:54,850 --> 00:01:01,420
motivation about the technologies we

00:00:57,520 --> 00:01:04,239
built in the in the process and we keep

00:01:01,420 --> 00:01:07,780
building because this is one of the

00:01:04,239 --> 00:01:11,170
biggest if not the biggest Greenfield

00:01:07,780 --> 00:01:15,040
react native application out there we

00:01:11,170 --> 00:01:18,280
started releasing them in June this year

00:01:15,040 --> 00:01:22,060
so it's pretty much new we started to

00:01:18,280 --> 00:01:28,149
rewriting it year and a half two years

00:01:22,060 --> 00:01:31,569
ago but maybe more on that later it's a

00:01:28,149 --> 00:01:34,539
little bit of history about Skype the

00:01:31,569 --> 00:01:36,969
first client was released almost 14

00:01:34,539 --> 00:01:40,060
years ago it was based on peer-to-peer

00:01:36,969 --> 00:01:43,359
technology which didn't really work that

00:01:40,060 --> 00:01:45,249
well on mobile phones mobile phones

00:01:43,359 --> 00:01:48,240
weren't really a thing back then at

00:01:45,249 --> 00:01:50,979
least not smartphones they came later

00:01:48,240 --> 00:01:55,090
and eventually and we started building

00:01:50,979 --> 00:01:58,810
mobile clients as well as the time went

00:01:55,090 --> 00:02:01,689
we expanded from Windows to bunch of

00:01:58,810 --> 00:02:05,950
different platforms we were on Macs we

00:02:01,689 --> 00:02:10,720
were on Lennox's we were on TVs and cars

00:02:05,950 --> 00:02:13,090
we were pretty much everywhere to to

00:02:10,720 --> 00:02:17,140
provide the best experience for users

00:02:13,090 --> 00:02:20,770
though we used to build those clients in

00:02:17,140 --> 00:02:24,939
native to each platform the problem with

00:02:20,770 --> 00:02:27,120
that is you have 10 plus teams working

00:02:24,939 --> 00:02:29,970
on one

00:02:27,120 --> 00:02:32,480
thing but they have their own agendas

00:02:29,970 --> 00:02:36,659
they have their own backlogs they own

00:02:32,480 --> 00:02:39,750
bugs they own platform specific things

00:02:36,659 --> 00:02:43,650
they need to implement and so it becomes

00:02:39,750 --> 00:02:47,159
quite challenging to keep the features

00:02:43,650 --> 00:02:49,709
they are shipping in sync so it used to

00:02:47,159 --> 00:02:54,750
take a lot of time to ship one feature

00:02:49,709 --> 00:02:58,879
across all platforms as you can imagine

00:02:54,750 --> 00:03:01,739
that's pretty that creates a problem for

00:02:58,879 --> 00:03:04,739
the company as it can't really

00:03:01,739 --> 00:03:07,319
experiment fast it cannot grow as fast

00:03:04,739 --> 00:03:10,230
as it could if it was shipping the

00:03:07,319 --> 00:03:14,970
features across the board really fast

00:03:10,230 --> 00:03:18,930
and so we decided to fix this to

00:03:14,970 --> 00:03:25,290
implement most of the clients from one

00:03:18,930 --> 00:03:28,560
code base the focus was on engineering

00:03:25,290 --> 00:03:31,069
point of view we wanted one team we

00:03:28,560 --> 00:03:33,450
wanted one code base that work on it and

00:03:31,069 --> 00:03:35,970
so we started evaluating different

00:03:33,450 --> 00:03:38,310
technologies we knew what that we needed

00:03:35,970 --> 00:03:40,950
to be on that we knew that we needed to

00:03:38,310 --> 00:03:44,910
be on mobile we needed we had to be

00:03:40,950 --> 00:03:46,650
really strong on mobile and we still

00:03:44,910 --> 00:03:49,260
needed to support most of the platforms

00:03:46,650 --> 00:03:53,220
we needed to go back and support Linux

00:03:49,260 --> 00:03:56,190
client we needed to go and be able to

00:03:53,220 --> 00:03:59,849
update Mac and Windows as fast as any

00:03:56,190 --> 00:04:03,560
other platform and so we looked into

00:03:59,849 --> 00:04:08,370
hybrid applications built in JavaScript

00:04:03,560 --> 00:04:11,400
they were easy to build relatively but

00:04:08,370 --> 00:04:14,669
they are locked on on mobile they lacked

00:04:11,400 --> 00:04:17,820
in performance they lacked and user

00:04:14,669 --> 00:04:19,799
experience it wasn't the native feel you

00:04:17,820 --> 00:04:23,699
usually want from your applications

00:04:19,799 --> 00:04:27,030
right so then we went and since

00:04:23,699 --> 00:04:30,990
Microsoft now owns a marine we evaluated

00:04:27,030 --> 00:04:35,050
that really cool technology though it

00:04:30,990 --> 00:04:37,659
only supports supported mobile back then

00:04:35,050 --> 00:04:39,069
and that didn't work for us because we

00:04:37,659 --> 00:04:43,810
still need it

00:04:39,069 --> 00:04:46,750
desktop and we still need it that so as

00:04:43,810 --> 00:04:51,750
far as they know xamarin still doesn't

00:04:46,750 --> 00:04:56,650
do that so we ended up doing react now

00:04:51,750 --> 00:04:59,770
you have reactive native and you have

00:04:56,650 --> 00:05:02,740
the regular react differently the same

00:04:59,770 --> 00:05:07,509
technology learned once right every use

00:05:02,740 --> 00:05:11,020
everywhere but different api's different

00:05:07,509 --> 00:05:14,770
styling different capabilities so we

00:05:11,020 --> 00:05:19,629
needed to solve that and we decided to

00:05:14,770 --> 00:05:24,729
build a library that wraps and built on

00:05:19,629 --> 00:05:28,900
top of react native and react so we we

00:05:24,729 --> 00:05:40,090
really cared about having single

00:05:28,900 --> 00:05:43,750
codebase from there we built so now we

00:05:40,090 --> 00:05:46,389
have a bunch of components we can use

00:05:43,750 --> 00:05:51,759
bunch of api's that came from react

00:05:46,389 --> 00:05:55,060
native a small layer but it's not enough

00:05:51,759 --> 00:05:59,710
you still need to build networking you

00:05:55,060 --> 00:06:05,409
still need to build data persistence you

00:05:59,710 --> 00:06:09,610
still need to build state management

00:06:05,409 --> 00:06:12,310
solution so in the process we started

00:06:09,610 --> 00:06:17,199
building open source libraries we built

00:06:12,310 --> 00:06:21,219
something for talking to our rest

00:06:17,199 --> 00:06:25,479
services we build something to persist

00:06:21,219 --> 00:06:31,479
data we built a no sequel abstraction on

00:06:25,479 --> 00:06:37,349
top of sequel light for iOS and indexdb

00:06:31,479 --> 00:06:42,900
for web we built our own solution for

00:06:37,349 --> 00:06:42,900
Bill for state management in react

00:06:48,879 --> 00:06:57,469
now react XP on its own is really only

00:06:54,829 --> 00:07:01,459
about the core functionality that most

00:06:57,469 --> 00:07:04,219
of the applications use you get about 11

00:07:01,459 --> 00:07:07,519
different foundational components you

00:07:04,219 --> 00:07:13,269
can use together you get styling you get

00:07:07,519 --> 00:07:16,669
animations you get accessibility api's

00:07:13,269 --> 00:07:22,759
but that's pretty much it for what you

00:07:16,669 --> 00:07:25,489
get from react XP if you still need to

00:07:22,759 --> 00:07:30,050
have the ability to go native on those

00:07:25,489 --> 00:07:35,119
platforms you need ability to write for

00:07:30,050 --> 00:07:39,019
example file picker right and so we

00:07:35,119 --> 00:07:45,139
created this concept called react XP

00:07:39,019 --> 00:07:49,459
extensions where you expose the same API

00:07:45,139 --> 00:07:52,639
across the entire support all the

00:07:49,459 --> 00:07:56,019
supported platforms which are in case of

00:07:52,639 --> 00:08:00,379
react speeds babb its iOS android and

00:07:56,019 --> 00:08:02,929
experimental uwp we don't know whether

00:08:00,379 --> 00:08:06,169
that's gonna pay off we are trying to

00:08:02,929 --> 00:08:08,239
pay play with it a little it's kinda

00:08:06,169 --> 00:08:11,419
supported probably not production-ready

00:08:08,239 --> 00:08:14,029
the rest of the platforms are in

00:08:11,419 --> 00:08:19,059
production so this is something you can

00:08:14,029 --> 00:08:19,059
download now it's used in real products

00:08:23,589 --> 00:08:29,689
then we build something called Reis up

00:08:26,439 --> 00:08:31,849
react subscriptions actually we could

00:08:29,689 --> 00:08:38,479
get better at naming things because

00:08:31,849 --> 00:08:41,629
really speed initially V evaluated Fox's

00:08:38,479 --> 00:08:44,680
architecture for this but it contains a

00:08:41,629 --> 00:08:47,809
lot of boilerplate all over the place

00:08:44,680 --> 00:08:50,389
you needed to create actions action

00:08:47,809 --> 00:08:55,720
dispatchers which is in the end old of

00:08:50,389 --> 00:08:58,040
code that doesn't really do anything and

00:08:55,720 --> 00:09:00,740
next problem with it

00:08:58,040 --> 00:09:05,390
didn't really work well with our more

00:09:00,740 --> 00:09:09,170
complex scenarios imagine you have a

00:09:05,390 --> 00:09:14,540
conversation and you navigate to a

00:09:09,170 --> 00:09:17,810
conversation you create dynamic modal

00:09:14,540 --> 00:09:22,280
from you get it from database you sync

00:09:17,810 --> 00:09:24,650
it from services and now this is so good

00:09:22,280 --> 00:09:29,660
you can do this pretty performant lis

00:09:24,650 --> 00:09:35,870
with flux but now in skype messages

00:09:29,660 --> 00:09:38,540
aren't immutable so you can react to

00:09:35,870 --> 00:09:41,030
messages you can delete messages you can

00:09:38,540 --> 00:09:43,220
edit messages and if you created a

00:09:41,030 --> 00:09:45,830
subscription for every message in the

00:09:43,220 --> 00:09:50,000
stream which is a lot you'd be in

00:09:45,830 --> 00:09:53,690
trouble performance wise what we did in

00:09:50,000 --> 00:10:00,560
Reis up it is we allowed users to

00:09:53,690 --> 00:10:04,580
subscribe to keys to parts of stay store

00:10:00,560 --> 00:10:07,880
State you can have an entire list of

00:10:04,580 --> 00:10:10,130
conversation conversations and subscribe

00:10:07,880 --> 00:10:13,370
to single conversation by ID you can

00:10:10,130 --> 00:10:15,890
then go and you can subscribe to a

00:10:13,370 --> 00:10:22,630
single message the same way the same

00:10:15,890 --> 00:10:25,610
api's next thing I'm gonna show you is

00:10:22,630 --> 00:10:29,660
how this actually looks looks in a

00:10:25,610 --> 00:10:33,020
component right we ended up in the

00:10:29,660 --> 00:10:35,720
beginning this this was a huge project

00:10:33,020 --> 00:10:39,460
not everybody was familiar with react or

00:10:35,720 --> 00:10:43,040
even JavaScript in the beginning and so

00:10:39,460 --> 00:10:46,640
people tended to forget unsubscribing

00:10:43,040 --> 00:10:48,890
from stores we needed to tackle that

00:10:46,640 --> 00:10:51,410
like absolutely unsubscribing from

00:10:48,890 --> 00:10:54,530
something it's just another line of

00:10:51,410 --> 00:10:57,650
coding component will unmount but why

00:10:54,530 --> 00:11:00,380
would you do that if you we decided to

00:10:57,650 --> 00:11:04,930
go and provide a base class that does

00:11:00,380 --> 00:11:04,930
all this subscription management for you

00:11:08,250 --> 00:11:17,070
so if you want to use Reis up with your

00:11:13,590 --> 00:11:19,950
react components or react XP components

00:11:17,070 --> 00:11:23,700
you extend something regal component

00:11:19,950 --> 00:11:26,820
base component base gives you a very

00:11:23,700 --> 00:11:29,910
basic very simple method to subscribing

00:11:26,820 --> 00:11:33,690
to things which is there is a build

00:11:29,910 --> 00:11:37,530
state method you over right in there you

00:11:33,690 --> 00:11:41,670
go and you just call your outer

00:11:37,530 --> 00:11:45,350
subscribable getters on your store

00:11:41,670 --> 00:11:47,910
that's it that will automatically create

00:11:45,350 --> 00:11:51,930
subscriptions for you you don't even

00:11:47,910 --> 00:11:56,040
need to return that value anywhere you

00:11:51,930 --> 00:11:58,620
can use it in boolean expressions just

00:11:56,040 --> 00:12:01,740
calling that method automatically

00:11:58,620 --> 00:12:06,810
creates subscription for you

00:12:01,740 --> 00:12:10,710
debts subscription isn't a subscription

00:12:06,810 --> 00:12:14,790
right it's a once next time when that

00:12:10,710 --> 00:12:18,000
value updates build status call again

00:12:14,790 --> 00:12:20,490
and you need to call together again to

00:12:18,000 --> 00:12:24,120
subscribe for the next round this is

00:12:20,490 --> 00:12:27,090
very useful for cases like

00:12:24,120 --> 00:12:29,400
fire-and-forget you just get drop the

00:12:27,090 --> 00:12:31,770
value when you initialize the component

00:12:29,400 --> 00:12:33,660
and you don't really care anymore about

00:12:31,770 --> 00:12:38,700
the changes that happen to it

00:12:33,660 --> 00:12:42,810
yeah the build state fund method takes

00:12:38,700 --> 00:12:46,410
props and initial build which is true

00:12:42,810 --> 00:12:48,510
only when you build the component for a

00:12:46,410 --> 00:12:54,110
first time like the first time you

00:12:48,510 --> 00:12:56,970
create state every other time it's false

00:12:54,110 --> 00:13:00,300
and from there it's basically in your

00:12:56,970 --> 00:13:08,070
state and you can use it as in any other

00:13:00,300 --> 00:13:13,410
react component before oh this is a

00:13:08,070 --> 00:13:15,810
really simple store where where you

00:13:13,410 --> 00:13:20,880
decorated what out to subscribe store

00:13:15,810 --> 00:13:24,000
you extend it and you have an action

00:13:20,880 --> 00:13:26,639
did you call when you want to update

00:13:24,000 --> 00:13:29,850
your state you don't create explicit

00:13:26,639 --> 00:13:33,630
action objects you basically create

00:13:29,850 --> 00:13:40,170
methods you go you do it the old way

00:13:33,630 --> 00:13:42,480
basically OB and since you then pass for

00:13:40,170 --> 00:13:44,730
example in this case to deuce straight

00:13:42,480 --> 00:13:48,000
to your application you always need to

00:13:44,730 --> 00:13:49,620
create a new instance like you need to

00:13:48,000 --> 00:13:52,470
grab a new reference you can't just

00:13:49,620 --> 00:13:56,339
mutate it otherwise you'd be mutating

00:13:52,470 --> 00:14:00,120
props of something down the line we

00:13:56,339 --> 00:14:02,519
thought about the freezing basically

00:14:00,120 --> 00:14:05,209
when you have a method there we thought

00:14:02,519 --> 00:14:07,889
about freezing it for development and

00:14:05,209 --> 00:14:11,130
throwing exceptions some or something

00:14:07,889 --> 00:14:14,850
when you mutate it because we ran into

00:14:11,130 --> 00:14:20,759
problems with that then you have the

00:14:14,850 --> 00:14:23,459
outer subscribe getter a method that's a

00:14:20,759 --> 00:14:26,870
getter for the state and it has a how to

00:14:23,459 --> 00:14:29,490
subscribe decorator that decorator

00:14:26,870 --> 00:14:34,230
ensures that once you call it in build

00:14:29,490 --> 00:14:37,920
state it it knows to create the

00:14:34,230 --> 00:14:40,529
subscription for you now if you for

00:14:37,920 --> 00:14:45,180
example called the method inside of

00:14:40,529 --> 00:14:47,160
render function there is no way for us

00:14:45,180 --> 00:14:50,910
to subscribe to it the render function

00:14:47,160 --> 00:14:54,870
and it would just keep updating and so

00:14:50,910 --> 00:14:57,509
it produces a warning we are really

00:14:54,870 --> 00:15:02,189
trying to help you as much as possible

00:14:57,509 --> 00:15:04,680
do the right thing based on two year

00:15:02,189 --> 00:15:09,240
let's say two years of development with

00:15:04,680 --> 00:15:15,560
this library we are trying to give you

00:15:09,240 --> 00:15:15,560
the ability to really do it right

00:15:15,769 --> 00:15:22,560
there's more complex scenarios that this

00:15:19,860 --> 00:15:26,480
supports I'm not gonna show them really

00:15:22,560 --> 00:15:31,980
here you can there is a site that

00:15:26,480 --> 00:15:34,470
describes all these things but one as I

00:15:31,980 --> 00:15:37,080
said you can you can subscribe to keys

00:15:34,470 --> 00:15:40,800
basically a key can be a parameter a key

00:15:37,080 --> 00:15:41,670
can be you can have a out to subscribe

00:15:40,800 --> 00:15:44,850
with a key

00:15:41,670 --> 00:15:46,350
so you subscribe it makes sense to have

00:15:44,850 --> 00:15:49,140
a bunch of logic in the same state

00:15:46,350 --> 00:15:52,530
because it's doing it's regarding the

00:15:49,140 --> 00:15:54,980
same thing and so you meant it in the

00:15:52,530 --> 00:16:11,310
same class it lives there it's happier

00:15:54,980 --> 00:16:14,040
and from and so you don't want to get

00:16:11,310 --> 00:16:16,470
updates on a huge store with lots of

00:16:14,040 --> 00:16:20,430
data you don't want to get updates on

00:16:16,470 --> 00:16:24,120
everything so you just subscribe this

00:16:20,430 --> 00:16:27,570
Gator is is hooking into this property

00:16:24,120 --> 00:16:31,890
this that can be a number it can be a

00:16:27,570 --> 00:16:35,370
symbol it can be a unique value it can

00:16:31,890 --> 00:16:38,490
be an ID of something inside of this

00:16:35,370 --> 00:16:41,130
store then when you want to update that

00:16:38,490 --> 00:16:43,290
value and you want to trigger changes in

00:16:41,130 --> 00:16:46,910
your components there is a trigger

00:16:43,290 --> 00:16:52,790
method that that method comes from the

00:16:46,910 --> 00:16:55,050
store base class calling that method

00:16:52,790 --> 00:16:57,270
triggers changes on all the

00:16:55,050 --> 00:17:00,630
subscriptions let's kind of descriptive

00:16:57,270 --> 00:17:02,550
write what you don't see there is that

00:17:00,630 --> 00:17:08,189
you can specify the keys you want to

00:17:02,550 --> 00:17:12,589
trigger it with and those and so you who

00:17:08,189 --> 00:17:17,750
can do all those extra powerful features

00:17:12,589 --> 00:17:21,600
you don't the component base then

00:17:17,750 --> 00:17:25,709
provides one more way to subscribe and

00:17:21,600 --> 00:17:30,240
that's dynamic subscriptions those are

00:17:25,709 --> 00:17:33,630
most likely an overkill in 99.9% of

00:17:30,240 --> 00:17:36,510
cases it's an overkill there is one

00:17:33,630 --> 00:17:39,240
component that does that in entire Skype

00:17:36,510 --> 00:17:41,300
code base and that's a code base with

00:17:39,240 --> 00:17:44,750
hundreds of thousands of lines of code

00:17:41,300 --> 00:17:46,750
thousands of components probably so

00:17:44,750 --> 00:17:57,100
that's why I'm not really

00:17:46,750 --> 00:18:00,250
showing it here now how we even build

00:17:57,100 --> 00:18:03,280
this whole thing we grab it in the

00:18:00,250 --> 00:18:06,570
beginning you have something called

00:18:03,280 --> 00:18:10,390
start to manage me because now all those

00:18:06,570 --> 00:18:13,330
stores in our case are Singleton's so

00:18:10,390 --> 00:18:16,690
you can't really initialize them in

00:18:13,330 --> 00:18:20,230
constructor you can't really grab data

00:18:16,690 --> 00:18:24,220
from database in constructor so we

00:18:20,230 --> 00:18:30,580
needed something to model dependencies

00:18:24,220 --> 00:18:34,860
between between different stores and how

00:18:30,580 --> 00:18:39,570
to initialize them and it's something

00:18:34,860 --> 00:18:43,390
that start a manager does it's part of

00:18:39,570 --> 00:18:46,150
resub and it takes care of your

00:18:43,390 --> 00:18:52,510
dependencies at the time of registering

00:18:46,150 --> 00:18:55,929
- for the start - manager you need to

00:18:52,510 --> 00:18:59,409
specify some ID of your store and you

00:18:55,929 --> 00:19:03,250
need to specify your dependencies then

00:18:59,409 --> 00:19:05,230
start the manager will start on start of

00:19:03,250 --> 00:19:09,360
the application will start initializing

00:19:05,230 --> 00:19:14,039
them and since the start of methods are

00:19:09,360 --> 00:19:18,280
acing Inc it can go in parallel it can

00:19:14,039 --> 00:19:20,289
unless the store or service doesn't have

00:19:18,280 --> 00:19:22,600
any dependency on something that's not

00:19:20,289 --> 00:19:27,539
initialized it's gonna go and it's gonna

00:19:22,600 --> 00:19:31,630
start initializing that store or service

00:19:27,539 --> 00:19:34,059
once it does the first round it goes to

00:19:31,630 --> 00:19:38,220
the next round and next round until it

00:19:34,059 --> 00:19:41,260
initializes all services and stores and

00:19:38,220 --> 00:19:43,720
then it lets you know ok now is the time

00:19:41,260 --> 00:19:46,750
when you can hide your loading screen

00:19:43,720 --> 00:19:50,169
and display the the actual client

00:19:46,750 --> 00:19:53,500
because now you load it data from

00:19:50,169 --> 00:19:56,470
database you loaded data from network

00:19:53,500 --> 00:19:57,730
you need you know what feature flags you

00:19:56,470 --> 00:20:03,490
have on

00:19:57,730 --> 00:20:06,429
go ahead start your client the next

00:20:03,490 --> 00:20:09,940
crucial thing we implemented as a part

00:20:06,429 --> 00:20:15,190
of this effort to have single codebase

00:20:09,940 --> 00:20:20,919
is a abstraction on top of sequel Lite

00:20:15,190 --> 00:20:23,880
and indexdb we needed a database that

00:20:20,919 --> 00:20:27,460
could do transactions that could do

00:20:23,880 --> 00:20:31,510
indexes for a quick look up and that

00:20:27,460 --> 00:20:36,159
could and that would work across the

00:20:31,510 --> 00:20:39,970
board unfortunately within X DB you

00:20:36,159 --> 00:20:43,620
cannot really use promises the standard

00:20:39,970 --> 00:20:48,940
promise as such to implement

00:20:43,620 --> 00:20:53,320
transactions because if you don't have a

00:20:48,940 --> 00:20:58,289
pending query the connection will just

00:20:53,320 --> 00:21:01,659
close and so when your regular promise

00:20:58,289 --> 00:21:04,450
resolves somewhere in the next evil loop

00:21:01,659 --> 00:21:05,710
iteration the transactions is or the

00:21:04,450 --> 00:21:09,190
transaction and the connection to

00:21:05,710 --> 00:21:13,950
database is already gone that's why we

00:21:09,190 --> 00:21:17,740
had to roll our own version of promises

00:21:13,950 --> 00:21:23,139
that it's called same tasks open source

00:21:17,740 --> 00:21:27,399
as well it removes this notion that

00:21:23,139 --> 00:21:30,880
every venable needs to be resolved in

00:21:27,399 --> 00:21:39,370
next even loop cycle this one can

00:21:30,880 --> 00:21:42,010
resolve now synchronously this

00:21:39,370 --> 00:21:44,769
abstraction also fixes a couple of

00:21:42,010 --> 00:21:48,580
problems you'd have with for example

00:21:44,769 --> 00:21:52,750
Safari or ie there are differences in

00:21:48,580 --> 00:21:56,830
how indexdb behaves in those browsers so

00:21:52,750 --> 00:21:58,120
this fixes it this is this works is the

00:21:56,830 --> 00:22:03,220
same across the board

00:21:58,120 --> 00:22:06,500
iOS Android web browsers all of them

00:22:03,220 --> 00:22:11,360
supported from IE 9

00:22:06,500 --> 00:22:16,970
by 3r exp so this works just out of the

00:22:11,360 --> 00:22:20,660
box next thing we got is a something we

00:22:16,970 --> 00:22:22,810
call simple restclient that's something

00:22:20,660 --> 00:22:23,990
we needed to talk to our make

00:22:22,810 --> 00:22:29,600
micro-services

00:22:23,990 --> 00:22:35,630
by default you extend a generic

00:22:29,600 --> 00:22:39,250
restclient class and you get all the

00:22:35,630 --> 00:22:44,840
functionality like header setting

00:22:39,250 --> 00:22:47,780
authentication for free you just specify

00:22:44,840 --> 00:22:53,300
what you want to send where and it goes

00:22:47,780 --> 00:22:59,330
and it works next challenge we had is

00:22:53,300 --> 00:23:02,180
this is one code base you have different

00:22:59,330 --> 00:23:05,270
form factors you have mobile phones you

00:23:02,180 --> 00:23:12,080
have small screens for small tablets you

00:23:05,270 --> 00:23:16,570
have huge 4k TVs you have IMAX and so we

00:23:12,080 --> 00:23:20,420
went and we decided ok here are four

00:23:16,570 --> 00:23:23,870
responsive breakpoints and this is what

00:23:20,420 --> 00:23:29,650
we are going to work with and we have

00:23:23,870 --> 00:23:33,380
two things that are responsive one is

00:23:29,650 --> 00:23:35,960
the navigation because you have a mobile

00:23:33,380 --> 00:23:38,150
phone and it's a small device you can't

00:23:35,960 --> 00:23:40,580
really have multiple panels on a mobile

00:23:38,150 --> 00:23:41,210
phone so you need need to stack them one

00:23:40,580 --> 00:23:45,590
on another

00:23:41,210 --> 00:23:47,750
that's why start navigation and then you

00:23:45,590 --> 00:23:50,330
have a bigger form factor like desktop

00:23:47,750 --> 00:23:52,550
or tablet there you can go and you can

00:23:50,330 --> 00:23:55,010
see multiple things you can have chat

00:23:52,550 --> 00:23:57,620
list on one side you can have the

00:23:55,010 --> 00:24:02,150
current open conversation on the other

00:23:57,620 --> 00:24:06,380
side so this is something we called

00:24:02,150 --> 00:24:09,860
composite navigation we have the

00:24:06,380 --> 00:24:12,980
underlying modal's that are represented

00:24:09,860 --> 00:24:16,040
exactly the same way right on stack

00:24:12,980 --> 00:24:19,070
navigation we have a stack that you push

00:24:16,040 --> 00:24:25,250
to on the back end that drives

00:24:19,070 --> 00:24:27,530
than the navigation code and you push on

00:24:25,250 --> 00:24:30,290
something we call navigation context

00:24:27,530 --> 00:24:32,930
navigation context is strongly typed

00:24:30,290 --> 00:24:36,320
thing that you can then recognize in a

00:24:32,930 --> 00:24:39,410
view in a react component and decide

00:24:36,320 --> 00:24:44,600
which of the scenes or panels you want

00:24:39,410 --> 00:24:46,340
to render composite navigation context

00:24:44,600 --> 00:24:49,840
on the other hand has multiple

00:24:46,340 --> 00:24:53,900
properties so you have multiple possible

00:24:49,840 --> 00:24:58,820
moving parts in there the the cool thing

00:24:53,900 --> 00:25:03,080
about it is that all the they are nested

00:24:58,820 --> 00:25:05,390
so if for example you have gallery on

00:25:03,080 --> 00:25:08,030
your in your conversation and you

00:25:05,390 --> 00:25:10,550
navigate to a different conversation you

00:25:08,030 --> 00:25:12,260
don't end up with the same with the

00:25:10,550 --> 00:25:16,340
gallery from the previous conversation

00:25:12,260 --> 00:25:19,430
because that was a child of the previous

00:25:16,340 --> 00:25:22,160
navigation context that gets discarded

00:25:19,430 --> 00:25:27,260
with that the context of previous

00:25:22,160 --> 00:25:31,610
navigation for example you can see here

00:25:27,260 --> 00:25:35,780
right on the on the phones first is the

00:25:31,610 --> 00:25:40,450
open Skype and you have chat list you

00:25:35,780 --> 00:25:43,970
click on a conversation we push a

00:25:40,450 --> 00:25:46,010
conversation navigation context and you

00:25:43,970 --> 00:25:51,410
get a conversation rendered with an

00:25:46,010 --> 00:25:54,290
animation right that's built in in the

00:25:51,410 --> 00:25:56,240
background there is the laptop that's

00:25:54,290 --> 00:25:58,520
pretty much the same situation with a

00:25:56,240 --> 00:26:02,060
conversation except it's a composite

00:25:58,520 --> 00:26:05,750
thing you have conversation list panel

00:26:02,060 --> 00:26:07,910
in one place and you have the

00:26:05,750 --> 00:26:10,370
conversation itself in the other panel

00:26:07,910 --> 00:26:15,530
the those are the same components you

00:26:10,370 --> 00:26:19,550
just you can see on on mobile it's

00:26:15,530 --> 00:26:22,370
exactly the same they they use the

00:26:19,550 --> 00:26:26,930
second part of responsiveness very where

00:26:22,370 --> 00:26:28,760
we have this responsive wit store the

00:26:26,930 --> 00:26:31,580
name is a little little bit misleading

00:26:28,760 --> 00:26:36,769
because it doesn't do only

00:26:31,580 --> 00:26:39,769
with it does also rotation and the sort

00:26:36,769 --> 00:26:42,019
of stuff you from there you get your

00:26:39,769 --> 00:26:45,320
application sites basically you

00:26:42,019 --> 00:26:48,369
subscribe to that store and the you

00:26:45,320 --> 00:26:51,710
resize your application based on that

00:26:48,369 --> 00:26:56,749
for example in there you are on a call

00:26:51,710 --> 00:26:58,669
and that takes call navigation contacts

00:26:56,749 --> 00:27:01,610
just takes over the whole route

00:26:58,669 --> 00:27:07,399
navigation it's a full screen thing so

00:27:01,610 --> 00:27:10,249
you can have different forms some with

00:27:07,399 --> 00:27:14,509
two panels some with three there's no

00:27:10,249 --> 00:27:18,649
limit with this I'm gonna talk a little

00:27:14,509 --> 00:27:23,629
about styling we used to we build

00:27:18,649 --> 00:27:27,679
styling into Ryoga XP in a way that if

00:27:23,629 --> 00:27:30,649
you implement your components with this

00:27:27,679 --> 00:27:33,950
constraints we give you it's almost

00:27:30,649 --> 00:27:36,440
guaranteed that they'll look the same if

00:27:33,950 --> 00:27:38,929
they don't please report the back like

00:27:36,440 --> 00:27:40,999
we're gonna fix it for you or you can

00:27:38,929 --> 00:27:45,340
submit the pr it's open-source we're

00:27:40,999 --> 00:27:50,320
happy to take contributions as well

00:27:45,340 --> 00:27:54,259
styles are solved in a way that every

00:27:50,320 --> 00:27:57,200
basic react native reg XP component has

00:27:54,259 --> 00:28:00,259
its own set of styles you get type

00:27:57,200 --> 00:28:02,139
checking on those you get okay for

00:28:00,259 --> 00:28:05,509
example which has to be a number

00:28:02,139 --> 00:28:08,600
we'd has to be a number across both

00:28:05,509 --> 00:28:13,789
across the board even for desktop you

00:28:08,600 --> 00:28:16,039
can't really do EMS it's a challenge we

00:28:13,789 --> 00:28:19,070
have to face and we basically decided

00:28:16,039 --> 00:28:21,409
okay pixel it is because that's what we

00:28:19,070 --> 00:28:25,159
can implement across the board for

00:28:21,409 --> 00:28:29,629
everything and so you get different

00:28:25,159 --> 00:28:31,759
style you have the same base styles for

00:28:29,629 --> 00:28:34,850
every component but then views have

00:28:31,759 --> 00:28:38,109
their own styles then text has its own

00:28:34,850 --> 00:28:42,109
styles because you can't really do a

00:28:38,109 --> 00:28:45,470
font size on a view you can own context

00:28:42,109 --> 00:28:50,169
so you get this type checking out of

00:28:45,470 --> 00:28:52,490
the XP where it's really hard to do

00:28:50,169 --> 00:28:57,049
styles that don't belong to something

00:28:52,490 --> 00:28:59,090
right on top of it we have for example

00:28:57,049 --> 00:29:01,940
type script with rules that keep the

00:28:59,090 --> 00:29:04,549
styling screen I'm pretty sure you ran

00:29:01,940 --> 00:29:11,450
into it at some point where you have

00:29:04,549 --> 00:29:15,440
this huge style style in C in JavaScript

00:29:11,450 --> 00:29:18,980
and most of it is not even used this is

00:29:15,440 --> 00:29:22,730
JavaScript week and TS lent the hell out

00:29:18,980 --> 00:29:25,270
of it and we get errors when styles are

00:29:22,730 --> 00:29:25,270
not used

00:29:25,630 --> 00:29:34,460
you can combine styles you you can even

00:29:29,720 --> 00:29:37,909
do a combination based on state for

00:29:34,460 --> 00:29:40,970
example you take is hover from state

00:29:37,909 --> 00:29:44,570
because what we don't support is for

00:29:40,970 --> 00:29:47,000
example hover state or subclasses in CSS

00:29:44,570 --> 00:29:51,470
because that thing doesn't exist in

00:29:47,000 --> 00:29:54,740
native and so we the philosophy behind

00:29:51,470 --> 00:29:56,960
really experience but we implemented the

00:29:54,740 --> 00:29:59,419
things that we can get across the board

00:29:56,960 --> 00:30:02,809
there are very few exceptions to the

00:29:59,419 --> 00:30:05,750
rule where we didn't really get another

00:30:02,809 --> 00:30:14,210
chance like there wasn't a viable option

00:30:05,750 --> 00:30:16,700
to go on then we have animations it

00:30:14,210 --> 00:30:21,710
packs a pretty powerful animation

00:30:16,700 --> 00:30:25,460
framework you have four different

00:30:21,710 --> 00:30:30,650
animation animated components you can

00:30:25,460 --> 00:30:34,150
use and on to animate them you basically

00:30:30,650 --> 00:30:38,270
assign styles to them right those styles

00:30:34,150 --> 00:30:43,030
use animated value and from and then

00:30:38,270 --> 00:30:43,030
when you need to you animate that value

00:30:43,090 --> 00:30:49,970
this is how you define define the

00:30:46,730 --> 00:30:52,050
animated value then you pretty much

00:30:49,970 --> 00:30:56,640
define your style

00:30:52,050 --> 00:31:00,360
and you use it in an animated component

00:30:56,640 --> 00:31:02,940
from there you declaratively say okay

00:31:00,360 --> 00:31:09,210
this is my animation and once you need

00:31:02,940 --> 00:31:11,600
it you started you there are this timing

00:31:09,210 --> 00:31:18,390
animations that you can animate one

00:31:11,600 --> 00:31:20,700
value at a time but we have the you have

00:31:18,390 --> 00:31:23,490
the ability to combine those animations

00:31:20,700 --> 00:31:29,850
you can run them in sequence and you can

00:31:23,490 --> 00:31:32,700
run them in parallel as well so in the

00:31:29,850 --> 00:31:37,860
end this is pretty powerful and it

00:31:32,700 --> 00:31:41,010
exists across the board again and last

00:31:37,860 --> 00:31:45,240
thing I'd like to talk is react XP

00:31:41,010 --> 00:31:48,570
extensions that's our way out of this

00:31:45,240 --> 00:31:51,780
world where you have one API across the

00:31:48,570 --> 00:31:55,830
board you have one way to write things

00:31:51,780 --> 00:32:00,540
if you really need to go native this is

00:31:55,830 --> 00:32:01,100
your way to go this is where you go for

00:32:00,540 --> 00:32:05,160
help

00:32:01,100 --> 00:32:08,309
here in react XP extensions you can go

00:32:05,160 --> 00:32:13,880
wild you can write your native

00:32:08,309 --> 00:32:18,179
components in for iOS for Android for

00:32:13,880 --> 00:32:21,780
Windows it's up to you the only thing is

00:32:18,179 --> 00:32:26,210
you need to keep the external API of the

00:32:21,780 --> 00:32:29,010
extension the same for every platform

00:32:26,210 --> 00:32:32,220
right you know some of the properties

00:32:29,010 --> 00:32:37,290
can be no up you don't necessarily have

00:32:32,220 --> 00:32:43,850
to do them but it's I'd suggest you do

00:32:37,290 --> 00:32:48,080
because then you have one API okay

00:32:43,850 --> 00:32:48,080
that's my talk

00:32:50,140 --> 00:32:56,720
mm Peter thank you very much let's go

00:32:54,890 --> 00:33:01,640
through a couple of the questions that

00:32:56,720 --> 00:33:03,500
we have here number one any reason for

00:33:01,640 --> 00:33:06,760
building your own react store incentive

00:33:03,500 --> 00:33:10,190
using critics or mob acts

00:33:06,760 --> 00:33:15,830
I don't think mob X was a thing back

00:33:10,190 --> 00:33:21,050
then this is two years ago I'm pretty

00:33:15,830 --> 00:33:24,110
sure Redux existed back then but we came

00:33:21,050 --> 00:33:28,910
from a company that's basically all P we

00:33:24,110 --> 00:33:30,650
had a lot of C++ developers not really

00:33:28,910 --> 00:33:35,300
that much into functional composition

00:33:30,650 --> 00:33:38,810
and so they decided to go this way okay

00:33:35,300 --> 00:33:40,760
so what why is Skype for business so

00:33:38,810 --> 00:33:42,230
different from normal Skype so many

00:33:40,760 --> 00:33:44,720
features missing I'm not sure if you're

00:33:42,230 --> 00:33:51,350
the expert for that but you know give it

00:33:44,720 --> 00:33:54,200
a try um I'm not really but I don't know

00:33:51,350 --> 00:33:57,380
like Skype for business has a completely

00:33:54,200 --> 00:34:01,130
different use case you have features

00:33:57,380 --> 00:34:02,840
like for example you can take control of

00:34:01,130 --> 00:34:05,600
the other computer we don't have that

00:34:02,840 --> 00:34:09,650
ability we don't have all those business

00:34:05,600 --> 00:34:12,770
features and we don't think we'll build

00:34:09,650 --> 00:34:15,110
them unless there's a lot of requests

00:34:12,770 --> 00:34:19,100
like we're taking a lot of feedback and

00:34:15,110 --> 00:34:24,080
we're acting on on it when we released

00:34:19,100 --> 00:34:27,230
the first mobile clients initially some

00:34:24,080 --> 00:34:29,300
people really didn't like it and so we

00:34:27,230 --> 00:34:33,740
started changing it we started moving

00:34:29,300 --> 00:34:42,080
towards more native experience on iOS we

00:34:33,740 --> 00:34:46,010
had as snapchat kind of UI we're moving

00:34:42,080 --> 00:34:48,140
away from it probably moved him for one

00:34:46,010 --> 00:34:50,330
more question what features did she lose

00:34:48,140 --> 00:34:52,250
in the port how did the incoming team

00:34:50,330 --> 00:34:55,400
feel about being rewritten after being

00:34:52,250 --> 00:34:59,780
acquired and how did you manage that I

00:34:55,400 --> 00:35:03,309
wasn't there when Skype was acquired so

00:34:59,780 --> 00:35:06,619
I can't answer that

00:35:03,309 --> 00:35:09,559
there where internally some people who

00:35:06,619 --> 00:35:13,069
didn't like the rewrite because it mean

00:35:09,559 --> 00:35:14,690
it's missing some features it's for

00:35:13,069 --> 00:35:17,150
example there is no contact sharing

00:35:14,690 --> 00:35:19,190
because we don't really have contacts

00:35:17,150 --> 00:35:24,410
per se anymore

00:35:19,190 --> 00:35:26,690
you have contacts less I don't really

00:35:24,410 --> 00:35:28,970
know what else we dropped like we're

00:35:26,690 --> 00:35:30,770
gonna build those features that were

00:35:28,970 --> 00:35:35,440
used we have a bunch of new features

00:35:30,770 --> 00:35:38,839
though we have much richer media sharing

00:35:35,440 --> 00:35:42,140
capabilities than we used to on previous

00:35:38,839 --> 00:35:42,920
clients great thank you so much Peter

00:35:42,140 --> 00:35:46,450
appreciate it

00:35:42,920 --> 00:35:46,450
yeah thanks

00:35:52,610 --> 00:35:54,670

YouTube URL: https://www.youtube.com/watch?v=jFHuOhNAsw4


