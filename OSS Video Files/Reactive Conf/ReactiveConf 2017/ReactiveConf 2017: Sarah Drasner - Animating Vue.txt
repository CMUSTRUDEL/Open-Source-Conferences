Title: ReactiveConf 2017: Sarah Drasner - Animating Vue
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,020 --> 00:00:08,639
[Music]

00:00:14,570 --> 00:00:19,460
all right okay last talk of the

00:00:17,360 --> 00:00:21,680
conference this has been amazing check

00:00:19,460 --> 00:00:23,360
out the white like pyrotechnics and

00:00:21,680 --> 00:00:25,550
stuff all of these things coming on the

00:00:23,360 --> 00:00:27,560
stage a Hulk oh my god

00:00:25,550 --> 00:00:29,119
how about we give it up for all of the

00:00:27,560 --> 00:00:30,769
conference organizers who put all of

00:00:29,119 --> 00:00:38,540
this together for us that was really

00:00:30,769 --> 00:00:40,040
amazing all right are you ready to have

00:00:38,540 --> 00:00:42,920
some fun we're gonna learn how to make

00:00:40,040 --> 00:00:46,910
complex and beautiful animations in view

00:00:42,920 --> 00:00:49,640
Jas my name is Sarah Dresner I go by

00:00:46,910 --> 00:00:51,530
Sarah Edo on Twitter this is me picking

00:00:49,640 --> 00:00:53,480
my nose as a child and also my

00:00:51,530 --> 00:00:54,770
relationship with Authority my poor

00:00:53,480 --> 00:00:56,899
mother

00:00:54,770 --> 00:00:59,000
I used to be a consultant which did not

00:00:56,899 --> 00:01:02,300
mean that I was unemployed I worked with

00:00:59,000 --> 00:01:05,509
all of these companies here but recently

00:01:02,300 --> 00:01:07,280
I took a job with Microsoft as a senior

00:01:05,509 --> 00:01:11,180
cloud developer advocate which I'm

00:01:07,280 --> 00:01:12,530
really excited about okay so before we

00:01:11,180 --> 00:01:13,820
dig into all the ways that you can

00:01:12,530 --> 00:01:15,590
animate on the web it's kind of

00:01:13,820 --> 00:01:18,050
important that we discuss why you'd even

00:01:15,590 --> 00:01:21,259
want to animate on the web so let's

00:01:18,050 --> 00:01:24,350
start off with a quote we've evolved to

00:01:21,259 --> 00:01:26,360
perform actions more or less seamlessly

00:01:24,350 --> 00:01:27,830
we aren't wired to deal with the fits

00:01:26,360 --> 00:01:30,140
and starts of human-computer interaction

00:01:27,830 --> 00:01:32,869
so what she means by that what Tammy

00:01:30,140 --> 00:01:34,729
Everett means by this is we don't have

00:01:32,869 --> 00:01:36,290
boolean States when we're looking at

00:01:34,729 --> 00:01:38,810
something I didn't just pop up onto the

00:01:36,290 --> 00:01:42,350
stage right I transitioned onto the

00:01:38,810 --> 00:01:45,049
stage by like walking on and in fact our

00:01:42,350 --> 00:01:47,450
occipital word lobe only works in 100

00:01:45,049 --> 00:01:49,280
millisecond bursts so what that means

00:01:47,450 --> 00:01:50,930
for you is that anything that pops out

00:01:49,280 --> 00:01:53,810
into your face is usually something

00:01:50,930 --> 00:01:55,369
that's dangerous or scary or like not

00:01:53,810 --> 00:01:59,240
supposed to be there or something that

00:01:55,369 --> 00:02:01,880
maybe you should be alerted to so timing

00:01:59,240 --> 00:02:04,369
on the web is incredibly important

00:02:01,880 --> 00:02:06,380
timing is pivotal for jokes this is a

00:02:04,369 --> 00:02:08,299
really bad dark UX pattern you're

00:02:06,380 --> 00:02:10,220
probably familiar with when you visit a

00:02:08,299 --> 00:02:12,079
site for the first time you haven't even

00:02:10,220 --> 00:02:14,000
looked around yet and all of a sudden

00:02:12,079 --> 00:02:16,730
that's asking you for your information

00:02:14,000 --> 00:02:18,019
I'm always like come on like buy me a

00:02:16,730 --> 00:02:20,480
drink first

00:02:18,019 --> 00:02:22,280
if you think I'm being picky know that

00:02:20,480 --> 00:02:23,930
Google agrees and it actually will

00:02:22,280 --> 00:02:27,780
impact your SEO if you have a timed

00:02:23,930 --> 00:02:29,940
interstitial on mobile so here's

00:02:27,780 --> 00:02:31,800
an example of how we can gain spatial

00:02:29,940 --> 00:02:33,569
understanding on the web this is an

00:02:31,800 --> 00:02:36,330
example from code drops we're just

00:02:33,569 --> 00:02:38,190
choosing your seats allows you to be

00:02:36,330 --> 00:02:40,410
able to get a real sense of how that

00:02:38,190 --> 00:02:42,240
experience would feel and what's ahead

00:02:40,410 --> 00:02:43,319
of you what's in store for you during

00:02:42,240 --> 00:02:46,230
that experience

00:02:43,319 --> 00:02:48,380
you're also seamlessly transitioned from

00:02:46,230 --> 00:02:51,090
one place to another

00:02:48,380 --> 00:02:54,060
so without transitions we lose an

00:02:51,090 --> 00:02:56,190
opportunity the user has to remap every

00:02:54,060 --> 00:02:58,500
interactive space which creates kind of

00:02:56,190 --> 00:03:01,880
a cognitive load for us and it doesn't

00:02:58,500 --> 00:03:04,830
feel as fluid it feels more clunky in

00:03:01,880 --> 00:03:06,300
paul baucus's illusion of speed he

00:03:04,830 --> 00:03:09,540
addresses some of these studies and

00:03:06,300 --> 00:03:12,030
shows that lots of small it like tiny

00:03:09,540 --> 00:03:14,100
little activities in a short amount of

00:03:12,030 --> 00:03:17,040
time are perceived as really long

00:03:14,100 --> 00:03:21,030
whereas one continuous activity is

00:03:17,040 --> 00:03:22,319
actually perceived as very short so I

00:03:21,030 --> 00:03:24,330
made this pen to show you what that

00:03:22,319 --> 00:03:26,580
might look like in this instance we have

00:03:24,330 --> 00:03:29,040
a map marker that in turn becomes a

00:03:26,580 --> 00:03:31,260
contact form labels move out of the way

00:03:29,040 --> 00:03:37,739
to gather input and they become loaders

00:03:31,260 --> 00:03:40,799
and those in turn become the success and

00:03:37,739 --> 00:03:43,230
now if I said to you where is that

00:03:40,799 --> 00:03:46,230
contact form you'd say oh it's in there

00:03:43,230 --> 00:03:48,180
but there's no in there it's just a

00:03:46,230 --> 00:03:50,519
bunch of divs and absolute positioning

00:03:48,180 --> 00:03:52,560
and form elements but because instead of

00:03:50,519 --> 00:03:54,660
popping modal after modal in front of

00:03:52,560 --> 00:03:58,560
your face it really actually feels like

00:03:54,660 --> 00:04:00,120
one seamless activity so people often

00:03:58,560 --> 00:04:02,100
ask me how to animate in view and

00:04:00,120 --> 00:04:03,630
there's actually a like a ton of

00:04:02,100 --> 00:04:05,370
different ways so we're gonna go through

00:04:03,630 --> 00:04:07,109
a whole bunch of them they'll start off

00:04:05,370 --> 00:04:10,470
simple and we're gonna get progressively

00:04:07,109 --> 00:04:12,720
more complex as the talk goes on so um

00:04:10,470 --> 00:04:14,579
first because view is a relatively young

00:04:12,720 --> 00:04:16,500
framework we're gonna talk a little bit

00:04:14,579 --> 00:04:18,900
about directives you know and what View

00:04:16,500 --> 00:04:20,549
has to offer before we dig in we'll talk

00:04:18,900 --> 00:04:22,289
about the transition component in case

00:04:20,549 --> 00:04:23,850
you're not familiar with it then we'll

00:04:22,289 --> 00:04:26,010
talk about the Watchers and the

00:04:23,850 --> 00:04:27,830
reactivity system which is kind of make

00:04:26,010 --> 00:04:31,020
sense since we're at reactive cough

00:04:27,830 --> 00:04:33,570
we'll talk about custom directives will

00:04:31,020 --> 00:04:36,080
talk about page transitions and then

00:04:33,570 --> 00:04:38,880
we'll talk about some data visualization

00:04:36,080 --> 00:04:40,650
okay so we don't really have time to

00:04:38,880 --> 00:04:41,590
dive into everything that view has to

00:04:40,650 --> 00:04:43,060
offer

00:04:41,590 --> 00:04:44,470
so I'm just gonna show one of the many

00:04:43,060 --> 00:04:47,230
directives that's really really

00:04:44,470 --> 00:04:49,450
compelling these kind of directives and

00:04:47,230 --> 00:04:51,550
all of these abstractions keep you from

00:04:49,450 --> 00:04:53,710
yak shaving I realize not everybody

00:04:51,550 --> 00:04:55,780
knows what yak shaving is yak shavings

00:04:53,710 --> 00:04:58,090
anytime you have to go do some other

00:04:55,780 --> 00:04:59,740
activity in order to get started with

00:04:58,090 --> 00:05:02,290
the current activity so anytime you're

00:04:59,740 --> 00:05:04,630
like wasting time kind of doing

00:05:02,290 --> 00:05:07,030
something else so we eliminate a lot of

00:05:04,630 --> 00:05:09,100
this kind of work that we're doing over

00:05:07,030 --> 00:05:09,880
and over and over again with you because

00:05:09,100 --> 00:05:13,540
it has some really beautiful

00:05:09,880 --> 00:05:16,060
abstractions so in order to keep you

00:05:13,540 --> 00:05:18,729
productive view offers simple ways to

00:05:16,060 --> 00:05:20,590
hook into some deeper functionality and

00:05:18,729 --> 00:05:22,870
this is stolen from angular but

00:05:20,590 --> 00:05:24,820
simplified in view one of the more

00:05:22,870 --> 00:05:27,639
interesting directives it's v-model

00:05:24,820 --> 00:05:30,130
so first we're setting up our view

00:05:27,639 --> 00:05:31,750
instance and you can see in our data we

00:05:30,130 --> 00:05:33,130
have this thing called message and then

00:05:31,750 --> 00:05:34,720
there's a message in there you can if

00:05:33,130 --> 00:05:38,169
you're from a react background this is

00:05:34,720 --> 00:05:40,450
similar to getting initial state so the

00:05:38,169 --> 00:05:42,280
text area is just a normal semantic text

00:05:40,450 --> 00:05:44,590
area except it has one difference it has

00:05:42,280 --> 00:05:46,479
that v-model directive that's connecting

00:05:44,590 --> 00:05:49,090
it to that message that you just saw and

00:05:46,479 --> 00:05:53,140
it outputs in those mustache templates

00:05:49,090 --> 00:05:55,030
here so when the user types things were

00:05:53,140 --> 00:05:57,850
automatically both allowing it to update

00:05:55,030 --> 00:06:00,160
and also continuing to store it for

00:05:57,850 --> 00:06:02,680
ourselves we're not having to check the

00:06:00,160 --> 00:06:04,570
Dom we're not having to set state it all

00:06:02,680 --> 00:06:07,870
updates automatically with the

00:06:04,570 --> 00:06:10,150
reactivity system and in terms of

00:06:07,870 --> 00:06:12,610
animation because that relationship was

00:06:10,150 --> 00:06:15,550
established with so much ease it's also

00:06:12,610 --> 00:06:18,100
incredibly simple to do advanced effects

00:06:15,550 --> 00:06:21,550
given given any kind of information

00:06:18,100 --> 00:06:22,750
given do you already know how half of

00:06:21,550 --> 00:06:24,639
that demo works we're going to talk

00:06:22,750 --> 00:06:27,010
about how the other half works too and

00:06:24,639 --> 00:06:29,139
this along with the other abstractions

00:06:27,010 --> 00:06:33,850
offered speeds up your development in a

00:06:29,139 --> 00:06:36,190
really slick way so let's dig into the

00:06:33,850 --> 00:06:38,320
transition component for a moment let's

00:06:36,190 --> 00:06:41,169
say you have a modal component that only

00:06:38,320 --> 00:06:44,080
shows based on a condition it would show

00:06:41,169 --> 00:06:45,789
like this which is easily done but you

00:06:44,080 --> 00:06:48,100
know we talked a little bit before about

00:06:45,789 --> 00:06:50,020
how that's not great it's popping in our

00:06:48,100 --> 00:06:52,450
face there's it's just a boolean state

00:06:50,020 --> 00:06:54,159
so maybe let's transition that so if you

00:06:52,450 --> 00:06:55,240
haven't worked with it before here's

00:06:54,159 --> 00:06:56,620
what the transition

00:06:55,240 --> 00:06:58,240
it looks like we wrap that in a

00:06:56,620 --> 00:07:00,250
condition we wrap that conditional and

00:06:58,240 --> 00:07:03,250
it's super simple and easy to read and

00:07:00,250 --> 00:07:05,530
maintain and here you have two ways of

00:07:03,250 --> 00:07:07,090
describing what's changing that we can

00:07:05,530 --> 00:07:09,849
hook into it's the enter and leave

00:07:07,090 --> 00:07:11,560
states so you can see the enter and B

00:07:09,849 --> 00:07:13,509
enter to V enter is like right before

00:07:11,560 --> 00:07:15,520
the transition for the entrance occurs

00:07:13,509 --> 00:07:17,979
enter two are the styles for what

00:07:15,520 --> 00:07:19,650
happens after and that the enter active

00:07:17,979 --> 00:07:23,440
is what we're gonna plug in to for any

00:07:19,650 --> 00:07:26,050
interpolation so our transition will

00:07:23,440 --> 00:07:27,430
plug into that V enter active and we can

00:07:26,050 --> 00:07:29,800
say something like this if we just want

00:07:27,430 --> 00:07:32,139
a simple interpolation this is like the

00:07:29,800 --> 00:07:35,020
most basic thing you can do you just say

00:07:32,139 --> 00:07:37,240
transition opacity one second ease and

00:07:35,020 --> 00:07:39,220
here's the base of what we need it

00:07:37,240 --> 00:07:40,780
states the intermediary values and which

00:07:39,220 --> 00:07:42,310
would happen once it's done and when

00:07:40,780 --> 00:07:44,409
it's leaving and we don't have to

00:07:42,310 --> 00:07:46,180
declare the initial stages because the

00:07:44,409 --> 00:07:49,479
browser will fall back to the defaults

00:07:46,180 --> 00:07:50,319
whatever is on the element itself so

00:07:49,479 --> 00:07:52,449
here we have something that's a little

00:07:50,319 --> 00:07:53,949
bit better a transition from one state

00:07:52,449 --> 00:07:56,830
to another rather than that boolean

00:07:53,949 --> 00:07:59,229
which is great but what if we want to

00:07:56,830 --> 00:08:01,240
make the background fade out of you well

00:07:59,229 --> 00:08:02,590
the thing in the foreground is you know

00:08:01,240 --> 00:08:04,960
kind of capturing our attention that's

00:08:02,590 --> 00:08:07,000
kind of a useful thing to have happen we

00:08:04,960 --> 00:08:09,729
could wrap it in a transition component

00:08:07,000 --> 00:08:11,889
but man like that's like wrapping the

00:08:09,729 --> 00:08:13,930
entire page in a transition component is

00:08:11,889 --> 00:08:16,599
there something simpler well yeah there

00:08:13,930 --> 00:08:18,669
definitely is this is a pretty legible

00:08:16,599 --> 00:08:20,740
way of adjusting and changing those

00:08:18,669 --> 00:08:22,960
classes based on it a state transition

00:08:20,740 --> 00:08:24,280
we could also bind inline styles we

00:08:22,960 --> 00:08:26,800
don't have to use classes even

00:08:24,280 --> 00:08:29,050
necessarily so we use a simple ternary

00:08:26,800 --> 00:08:31,990
state to see what happens before and

00:08:29,050 --> 00:08:33,579
after that transition occurs and now we

00:08:31,990 --> 00:08:36,130
have classes that we can hook in to

00:08:33,579 --> 00:08:38,200
create some transitions we have the

00:08:36,130 --> 00:08:40,930
transition class as well as the blur and

00:08:38,200 --> 00:08:42,909
opacity so here we have something better

00:08:40,930 --> 00:08:44,680
with minimal effort it shows and hides

00:08:42,909 --> 00:08:46,980
the modal's and blurs the background and

00:08:44,680 --> 00:08:50,140
now it's a component that we can reuse

00:08:46,980 --> 00:08:51,790
so aside from keeping the changes

00:08:50,140 --> 00:08:54,070
consistent and granular there's some

00:08:51,790 --> 00:08:55,930
nice pieces of sugar offered here like

00:08:54,070 --> 00:08:58,300
transition modes and what this will

00:08:55,930 --> 00:09:00,520
allow us to do is say if two things are

00:08:58,300 --> 00:09:02,110
changing at once one things entering

00:09:00,520 --> 00:09:03,850
well and other things leaving what

00:09:02,110 --> 00:09:06,010
happens does it wait for the other thing

00:09:03,850 --> 00:09:06,660
to fire and to and then kind of bring in

00:09:06,010 --> 00:09:08,080
the next one

00:09:06,660 --> 00:09:09,700
luckily

00:09:08,080 --> 00:09:10,990
cuz of these transition modes it makes

00:09:09,700 --> 00:09:13,810
it really simple to write that without

00:09:10,990 --> 00:09:15,850
any callbacks or any kind of delays so

00:09:13,810 --> 00:09:17,740
we looked at this example a bit earlier

00:09:15,850 --> 00:09:19,390
that moment that both of there's like

00:09:17,740 --> 00:09:21,160
that awkward moment where both of them

00:09:19,390 --> 00:09:22,960
are in the Dom at once and that doesn't

00:09:21,160 --> 00:09:25,420
feel very good that feels kind of clunky

00:09:22,960 --> 00:09:28,570
so you can have these awkward visual

00:09:25,420 --> 00:09:30,730
pauses and visual inconsistencies so

00:09:28,570 --> 00:09:32,620
this looks like it's one element but

00:09:30,730 --> 00:09:34,300
it's actually two elements one of them

00:09:32,620 --> 00:09:35,650
is transitioning out and the other ones

00:09:34,300 --> 00:09:37,660
transitioning in and with those

00:09:35,650 --> 00:09:39,430
transition modes it's happening really

00:09:37,660 --> 00:09:39,910
really seamlessly we're not writing a

00:09:39,430 --> 00:09:41,950
callback

00:09:39,910 --> 00:09:44,080
we're not like making really weird

00:09:41,950 --> 00:09:46,120
imperative code with scheduled delays

00:09:44,080 --> 00:09:48,850
that we then have to change if we have

00:09:46,120 --> 00:09:50,620
to change the timing so just to be sure

00:09:48,850 --> 00:09:52,270
that you can see what I'm referring to

00:09:50,620 --> 00:09:54,040
here I'm showing an example without

00:09:52,270 --> 00:09:56,050
transition modes you can see the picture

00:09:54,040 --> 00:09:59,710
snaps forward and we missed the other

00:09:56,050 --> 00:10:01,660
animation it happened behind it so of

00:09:59,710 --> 00:10:04,030
the two modes the one I always reach out

00:10:01,660 --> 00:10:05,560
reach for us out in that's probably the

00:10:04,030 --> 00:10:08,320
one that you want nine times out of ten

00:10:05,560 --> 00:10:10,060
that's the one finishes transitioning

00:10:08,320 --> 00:10:11,560
out and then comes in and when we start

00:10:10,060 --> 00:10:14,800
talking about page transitions later

00:10:11,560 --> 00:10:17,590
this is really important so we have the

00:10:14,800 --> 00:10:20,200
transition component that transition

00:10:17,590 --> 00:10:22,060
mode and we're using a slot here to

00:10:20,200 --> 00:10:24,310
replace the content which allows us to

00:10:22,060 --> 00:10:27,460
change the component easily and with

00:10:24,310 --> 00:10:29,200
really nice defaults okay so we talked

00:10:27,460 --> 00:10:31,270
about a transition how about a CSS

00:10:29,200 --> 00:10:33,220
animation we're still going to use that

00:10:31,270 --> 00:10:35,560
transition component but now we can

00:10:33,220 --> 00:10:38,140
assign classes based on the enter and

00:10:35,560 --> 00:10:40,870
leave States and we can also plug into

00:10:38,140 --> 00:10:43,000
CSS animation libraries if we want so

00:10:40,870 --> 00:10:45,460
you know we can do something like bounce

00:10:43,000 --> 00:10:48,670
this ball and roll it out every time we

00:10:45,460 --> 00:10:50,290
have something occurring and in the demo

00:10:48,670 --> 00:10:51,850
you can see that if I wrap that in a V

00:10:50,290 --> 00:10:54,310
if statement with that transition

00:10:51,850 --> 00:10:57,640
component giving the entrance and exit a

00:10:54,310 --> 00:10:59,110
class name bounces and CSS are a bit of

00:10:57,640 --> 00:11:01,120
a drag they're a little bit easier to

00:10:59,110 --> 00:11:03,720
write in JavaScript but we can make our

00:11:01,120 --> 00:11:06,280
code a little drier here using a mixin

00:11:03,720 --> 00:11:08,740
okay so now we get to the really good

00:11:06,280 --> 00:11:10,390
stuff javascript is really powerful for

00:11:08,740 --> 00:11:12,960
animations so let's do some cool stuff

00:11:10,390 --> 00:11:16,090
with view and JavaScript animation hooks

00:11:12,960 --> 00:11:17,980
so here we have some custom naming for

00:11:16,090 --> 00:11:20,260
our hooks each part is available to us

00:11:17,980 --> 00:11:21,370
we can use as many of these as we'd like

00:11:20,260 --> 00:11:23,890
we don't have to use

00:11:21,370 --> 00:11:25,660
any of them we can also state that the

00:11:23,890 --> 00:11:27,160
CSS is false so that that transition

00:11:25,660 --> 00:11:28,870
come on a second I'll go looking in the

00:11:27,160 --> 00:11:32,350
CSS for things that's gonna go looking

00:11:28,870 --> 00:11:34,210
looking in our methods instead so here's

00:11:32,350 --> 00:11:35,830
like the most basic example of that I

00:11:34,210 --> 00:11:39,310
usually don't use all of them I usually

00:11:35,830 --> 00:11:41,740
use like an enter and a leave and then

00:11:39,310 --> 00:11:43,300
in my methods I'm using these hooks and

00:11:41,740 --> 00:11:47,200
I'm also going to state when that when

00:11:43,300 --> 00:11:49,300
the animation is done so in this demo we

00:11:47,200 --> 00:11:51,339
can hook up the v-model and animate our

00:11:49,300 --> 00:11:54,880
text into the book on in a really

00:11:51,339 --> 00:11:57,250
playful manner we've got the transition

00:11:54,880 --> 00:12:00,460
component with before enter enter and a

00:11:57,250 --> 00:12:02,589
CSS class binding and in the data we

00:12:00,460 --> 00:12:04,930
have a default component in before enter

00:12:02,589 --> 00:12:07,420
and you can see that the styles that we

00:12:04,930 --> 00:12:10,240
need to accomplish this animation we're

00:12:07,420 --> 00:12:11,830
putting in that before enter and the

00:12:10,240 --> 00:12:14,500
reason people ask me why I don't set

00:12:11,830 --> 00:12:16,450
that in CSS or in styles directly on the

00:12:14,500 --> 00:12:18,760
component instead and part of the reason

00:12:16,450 --> 00:12:19,930
for that is these Styles are really

00:12:18,760 --> 00:12:22,150
important for the way that that

00:12:19,930 --> 00:12:24,160
animation works and they changed the way

00:12:22,150 --> 00:12:25,990
that that animation works but if it's

00:12:24,160 --> 00:12:27,790
not animating you can't see them they

00:12:25,990 --> 00:12:29,680
don't do anything so if you're

00:12:27,790 --> 00:12:31,300
maintaining a large code base with a lot

00:12:29,680 --> 00:12:32,680
of other developers they might come

00:12:31,300 --> 00:12:34,300
along you know we like to delete code

00:12:32,680 --> 00:12:36,279
everybody likes to delete code they'll

00:12:34,300 --> 00:12:38,350
be like oh if I take this out nothing

00:12:36,279 --> 00:12:40,240
has changed I'll just remove it but by

00:12:38,350 --> 00:12:42,190
putting these kind of together in the

00:12:40,240 --> 00:12:43,779
same place you're making an association

00:12:42,190 --> 00:12:46,120
it's a little bit more easy to maintain

00:12:43,779 --> 00:12:49,779
people can say oh this probably is

00:12:46,120 --> 00:12:52,029
related to the animation so here in the

00:12:49,779 --> 00:12:53,589
date in the enter we have all of our

00:12:52,029 --> 00:12:55,690
animation logic and we were able to

00:12:53,589 --> 00:12:58,870
scatter things around and apply them to

00:12:55,690 --> 00:13:01,209
a timeline and do bounces and eases and

00:12:58,870 --> 00:13:04,570
all sorts of really fun JavaScript

00:13:01,209 --> 00:13:06,550
animation logic so it's just like such a

00:13:04,570 --> 00:13:10,450
super party that's my face when I'm

00:13:06,550 --> 00:13:12,010
animating in view with JavaScript okay

00:13:10,450 --> 00:13:13,480
so we know about the transition

00:13:12,010 --> 00:13:15,250
component what about the transition

00:13:13,480 --> 00:13:16,630
group component let's take a look at

00:13:15,250 --> 00:13:20,260
that for just a second because that's a

00:13:16,630 --> 00:13:22,990
really fun one you may or may not be

00:13:20,260 --> 00:13:26,440
familiar with flip in animation but what

00:13:22,990 --> 00:13:28,180
flip stands for is first last invert

00:13:26,440 --> 00:13:30,220
play it's one way to make sure that you

00:13:28,180 --> 00:13:33,900
have really silky smooth animations on

00:13:30,220 --> 00:13:36,090
the web when you animate margin-left

00:13:33,900 --> 00:13:38,310
things like that you cause repaints so

00:13:36,090 --> 00:13:40,470
transforms are actually the way to get

00:13:38,310 --> 00:13:42,840
the most smooth animations on the web

00:13:40,470 --> 00:13:45,030
but in order to animate something from

00:13:42,840 --> 00:13:47,490
one place to another what we'd have to

00:13:45,030 --> 00:13:49,380
do is we'd have to get the bounding

00:13:47,490 --> 00:13:51,240
client wreck of wrecked of each one of

00:13:49,380 --> 00:13:53,160
them and then we have to figure out all

00:13:51,240 --> 00:13:55,740
the transforms that happen in between

00:13:53,160 --> 00:13:57,660
those two states so that works really

00:13:55,740 --> 00:13:59,400
well but the trouble is it's really

00:13:57,660 --> 00:14:01,500
difficult to implement you have to go

00:13:59,400 --> 00:14:03,330
get both coordinates you have to invert

00:14:01,500 --> 00:14:04,590
them you have to find the difference is

00:14:03,330 --> 00:14:07,710
in between them and apply the changes

00:14:04,590 --> 00:14:09,600
and for one element it's okay but what

00:14:07,710 --> 00:14:11,250
if you have a hundred elements or you

00:14:09,600 --> 00:14:13,140
have a bunch of data coming from an API

00:14:11,250 --> 00:14:14,790
or something like that and that's

00:14:13,140 --> 00:14:16,380
actually when you really need it that's

00:14:14,790 --> 00:14:17,910
when you need the best performance is

00:14:16,380 --> 00:14:20,250
when you're animating a ton of Dom

00:14:17,910 --> 00:14:23,220
elements so it becomes a little clunky

00:14:20,250 --> 00:14:25,440
to write well with views transition

00:14:23,220 --> 00:14:27,540
group all you have to do is wrap those

00:14:25,440 --> 00:14:29,790
elements and view takes care of the rest

00:14:27,540 --> 00:14:32,070
of you under the hood the rest for you

00:14:29,790 --> 00:14:34,020
under the hood so here you can see we're

00:14:32,070 --> 00:14:37,170
making use of the v4 loop we talked

00:14:34,020 --> 00:14:39,840
about earlier and now we can make a lazy

00:14:37,170 --> 00:14:41,400
game a game of lazy Sudoku this is from

00:14:39,840 --> 00:14:43,920
the guide where you can just keep

00:14:41,400 --> 00:14:48,780
hitting that and it will keep playing

00:14:43,920 --> 00:14:51,210
for you until you finally win so how do

00:14:48,780 --> 00:14:53,190
we use this in a real application with a

00:14:51,210 --> 00:14:55,230
combination of views computed properties

00:14:53,190 --> 00:14:57,150
which cache the logic we can filter a

00:14:55,230 --> 00:14:59,550
lot of data and show the results in a

00:14:57,150 --> 00:15:01,080
really performant manner with just a few

00:14:59,550 --> 00:15:03,810
lines of code that way you typically

00:15:01,080 --> 00:15:05,040
take hours for us to right and snip cuts

00:15:03,810 --> 00:15:09,630
post does a really good job of

00:15:05,040 --> 00:15:11,640
explaining all this - okay so we talked

00:15:09,630 --> 00:15:13,620
about the transition component but we're

00:15:11,640 --> 00:15:15,750
at reactive cough so I think it's

00:15:13,620 --> 00:15:18,210
fitting so that we can talk about how

00:15:15,750 --> 00:15:20,490
animation fits in with views reactivity

00:15:18,210 --> 00:15:22,980
system view has really really nice

00:15:20,490 --> 00:15:24,660
abstractions but typically what ends up

00:15:22,980 --> 00:15:26,970
happening is abstractions start to fail

00:15:24,660 --> 00:15:29,760
when we find these use cases that aren't

00:15:26,970 --> 00:15:32,130
exactly our use case well luckily view

00:15:29,760 --> 00:15:35,070
allows us to dig deeper and it allows us

00:15:32,130 --> 00:15:36,840
ax access so that we can write were

00:15:35,070 --> 00:15:39,390
never like beholden to these

00:15:36,840 --> 00:15:41,790
abstractions we can actually access the

00:15:39,390 --> 00:15:42,960
reactivity system if we want so that we

00:15:41,790 --> 00:15:45,260
can leverage this for asynchronous

00:15:42,960 --> 00:15:48,260
updates and transitions

00:15:45,260 --> 00:15:50,360
animations and so the way that will plug

00:15:48,260 --> 00:15:52,220
into the system is called Watchers in

00:15:50,360 --> 00:15:53,780
order for you to understand what what

00:15:52,220 --> 00:15:56,690
how we're working with them let's talk a

00:15:53,780 --> 00:15:58,790
little bit about reactivity first so

00:15:56,690 --> 00:16:00,350
what is reactive I think usually when I

00:15:58,790 --> 00:16:06,260
asked developers this question they say

00:16:00,350 --> 00:16:08,570
um rxjs which is true rxjs is reactive

00:16:06,260 --> 00:16:11,420
programming but reactive programming is

00:16:08,570 --> 00:16:13,070
a really big umbrella and rxjs fits

00:16:11,420 --> 00:16:15,110
under that umbrella there's actually a

00:16:13,070 --> 00:16:17,270
lot of ways to write reactive

00:16:15,110 --> 00:16:19,070
programming so let's kind of define it

00:16:17,270 --> 00:16:22,400
first and then we'll go through how it's

00:16:19,070 --> 00:16:24,290
implemented so reactive programming is

00:16:22,400 --> 00:16:29,210
programming with asynchronous data

00:16:24,290 --> 00:16:31,460
streams okay what alright so here here's

00:16:29,210 --> 00:16:34,790
another example or another definition a

00:16:31,460 --> 00:16:37,310
stream is a sequence of ongoing events

00:16:34,790 --> 00:16:39,350
ordered in time that offer some hooks

00:16:37,310 --> 00:16:41,210
with which to observe it that is a

00:16:39,350 --> 00:16:43,490
little bit more clear I think that

00:16:41,210 --> 00:16:46,160
example that almost everybody uses is an

00:16:43,490 --> 00:16:47,750
excel sheet if you have one cell and

00:16:46,160 --> 00:16:49,550
another cell and then you want to make

00:16:47,750 --> 00:16:51,680
the sum of those appear in another cell

00:16:49,550 --> 00:16:53,390
what you're allowed to do is you can

00:16:51,680 --> 00:16:55,430
change the you know the value of the

00:16:53,390 --> 00:16:57,850
first one it automatically updates in

00:16:55,430 --> 00:16:59,930
that sum and that's reactive programming

00:16:57,850 --> 00:17:02,150
reactive programming I think Mike

00:16:59,930 --> 00:17:04,070
Bostock who wrote d3 said it best

00:17:02,150 --> 00:17:05,630
reactive programming is really

00:17:04,070 --> 00:17:08,060
compelling because it allows you to

00:17:05,630 --> 00:17:10,970
write asynchronous code as if you were

00:17:08,060 --> 00:17:12,709
writing it synchronously so when we use

00:17:10,970 --> 00:17:14,780
reactive premises for building

00:17:12,709 --> 00:17:17,360
applications this means it's really easy

00:17:14,780 --> 00:17:19,400
to update state in reaction to user

00:17:17,360 --> 00:17:20,720
events which is kind of a typical use

00:17:19,400 --> 00:17:22,130
case right where a lot of us are

00:17:20,720 --> 00:17:24,530
reacting to events when we make

00:17:22,130 --> 00:17:28,550
application logic andand results has a

00:17:24,530 --> 00:17:30,440
really great post on this on github - so

00:17:28,550 --> 00:17:32,030
what is reactive for all of these

00:17:30,440 --> 00:17:35,180
different frameworks we have different

00:17:32,030 --> 00:17:36,020
ways of working with it angular 1.x has

00:17:35,180 --> 00:17:38,780
dirty-checking

00:17:36,020 --> 00:17:43,070
cycle and angular 2 used reactive

00:17:38,780 --> 00:17:45,680
streams like extreme and rxjs view x mob

00:17:43,070 --> 00:17:48,500
x and r active all use of variation of

00:17:45,680 --> 00:17:50,120
getters and setters and despite the name

00:17:48,500 --> 00:17:52,760
I know this is confusing despite the

00:17:50,120 --> 00:17:54,740
name react is not reactive it uses a

00:17:52,760 --> 00:17:56,420
pull approach rather than push I was

00:17:54,740 --> 00:17:58,250
talking to Dan Abramoff about this and

00:17:56,420 --> 00:17:59,090
he was like yeah everybody's confused

00:17:58,250 --> 00:18:01,460
about this

00:17:59,090 --> 00:18:03,259
about the name so he pointed me to this

00:18:01,460 --> 00:18:04,820
place where you can look at the react

00:18:03,259 --> 00:18:06,139
design documentation if you want to know

00:18:04,820 --> 00:18:08,749
more information about that

00:18:06,139 --> 00:18:10,789
there's also posts about views

00:18:08,749 --> 00:18:12,529
reactivity documentation and damien

00:18:10,789 --> 00:18:15,769
Dulles has a really great post from

00:18:12,529 --> 00:18:17,929
Montrell as well so okay we're going to

00:18:15,769 --> 00:18:19,460
watch any data property declared on the

00:18:17,929 --> 00:18:21,830
view instance what I mean by that is we

00:18:19,460 --> 00:18:23,779
have in our data that counter that

00:18:21,830 --> 00:18:26,090
counter starts at zero and when I use

00:18:23,779 --> 00:18:29,269
watch to look at that counter that

00:18:26,090 --> 00:18:31,309
console.log is going to it I were

00:18:29,269 --> 00:18:33,619
basically going to allow for a console

00:18:31,309 --> 00:18:36,830
log every time something changes every

00:18:33,619 --> 00:18:39,139
time we have an update so if the state

00:18:36,830 --> 00:18:41,210
is similar enough you can simply

00:18:39,139 --> 00:18:43,700
transition the state with Watchers here

00:18:41,210 --> 00:18:46,369
I built from scratch a chart with view

00:18:43,700 --> 00:18:47,990
and as the data changes the Watchers

00:18:46,369 --> 00:18:50,690
will update and it will simply

00:18:47,990 --> 00:18:52,789
transition between them and SVG is good

00:18:50,690 --> 00:18:54,649
for this because it's built with math so

00:18:52,789 --> 00:18:59,269
it's really really good tool for this

00:18:54,649 --> 00:19:00,950
job so if you care SVG's with directives

00:18:59,269 --> 00:19:03,139
and view you don't even need a charting

00:19:00,950 --> 00:19:05,149
library I didn't use d3 or Chartist or

00:19:03,139 --> 00:19:06,950
anything here I just used a few

00:19:05,149 --> 00:19:09,950
directives from view and I'm able to

00:19:06,950 --> 00:19:11,960
eliminate that entire library this is

00:19:09,950 --> 00:19:13,999
for the x-axis which is actually way

00:19:11,960 --> 00:19:17,090
more complicated than the bars the bars

00:19:13,999 --> 00:19:21,230
are like a V for loop and done so that's

00:19:17,090 --> 00:19:22,669
really cool so first when we're do using

00:19:21,230 --> 00:19:24,320
those Watchers we'll create a dummy

00:19:22,669 --> 00:19:26,509
object that will be updated by our

00:19:24,320 --> 00:19:28,190
animation library then we'll have an

00:19:26,509 --> 00:19:30,169
update function that's invoked on every

00:19:28,190 --> 00:19:32,690
tween step we use this to push the data

00:19:30,169 --> 00:19:35,360
then we create an object to hold the

00:19:32,690 --> 00:19:38,179
source data and in the function pointer

00:19:35,360 --> 00:19:40,549
for update events and in this for loop

00:19:38,179 --> 00:19:43,519
we turn the current index into a string

00:19:40,549 --> 00:19:45,169
and then we can tween over our target

00:19:43,519 --> 00:19:48,950
dummy object and we'll only do this for

00:19:45,169 --> 00:19:50,299
the specific key so we can also use

00:19:48,950 --> 00:19:51,950
animation and Watchers to create

00:19:50,299 --> 00:19:54,889
something like this time different style

00:19:51,950 --> 00:19:56,960
I travel a lot and my co-workers do too

00:19:54,889 --> 00:19:58,730
and we're all in different areas so I

00:19:56,960 --> 00:20:00,559
made this to kind of keep track of what

00:19:58,730 --> 00:20:02,690
the local time was in different areas so

00:20:00,559 --> 00:20:04,909
I'm not scheduling meetings for them at

00:20:02,690 --> 00:20:07,399
4:00 in the morning or something so we

00:20:04,909 --> 00:20:09,320
also have that visual signification of

00:20:07,399 --> 00:20:11,750
whether it's daytime or nighttime to

00:20:09,320 --> 00:20:13,789
kind of pair with that as well

00:20:11,750 --> 00:20:16,370
and my syntax highlighting fell off of

00:20:13,789 --> 00:20:17,960
this slide but we're watching the

00:20:16,370 --> 00:20:20,419
checked property and we'll fire

00:20:17,960 --> 00:20:22,880
different animations that change the hue

00:20:20,419 --> 00:20:24,980
and saturation based on some relative

00:20:22,880 --> 00:20:28,669
Association to where it existed before

00:20:24,980 --> 00:20:30,860
to the current time and as a quick side

00:20:28,669 --> 00:20:33,289
note using a native method called two

00:20:30,860 --> 00:20:36,830
local time string I was able to remove a

00:20:33,289 --> 00:20:39,289
giant library like mo moment J s and

00:20:36,830 --> 00:20:41,570
this will actually even respect daylight

00:20:39,289 --> 00:20:44,929
savings data so that's a really cool

00:20:41,570 --> 00:20:46,610
native method you should check it out so

00:20:44,929 --> 00:20:49,309
with view we can also respond to

00:20:46,610 --> 00:20:51,380
synthetic events midstream like I did

00:20:49,309 --> 00:20:54,169
with this ball bouncing in SVG I can

00:20:51,380 --> 00:21:00,350
update the radius and change the height

00:20:54,169 --> 00:21:01,730
while it's bouncing around and we don't

00:21:00,350 --> 00:21:03,530
even have to plug into Watchers to

00:21:01,730 --> 00:21:05,570
leverage them to interpolate state

00:21:03,530 --> 00:21:08,299
either view offers class and style

00:21:05,570 --> 00:21:10,549
bindings so it lets us connect user

00:21:08,299 --> 00:21:12,380
interaction and element Styles you might

00:21:10,549 --> 00:21:15,110
have seen similar demos to this like I

00:21:12,380 --> 00:21:17,720
made this with like SVG and some weird

00:21:15,110 --> 00:21:20,030
Tron like graphics but you might have

00:21:17,720 --> 00:21:21,530
seen similar demos to this with CSS

00:21:20,030 --> 00:21:24,590
variables in JavaScript but in this case

00:21:21,530 --> 00:21:26,419
view allows for more backwards

00:21:24,590 --> 00:21:30,320
compatibility so this will work on ie

00:21:26,419 --> 00:21:33,260
and edge as well so in the instance here

00:21:30,320 --> 00:21:35,630
we start with X at 0 and Y at 0 we're

00:21:33,260 --> 00:21:38,720
gonna track progress with a client X & Y

00:21:35,630 --> 00:21:41,150
and we can hook it up to our Styles in

00:21:38,720 --> 00:21:44,510
this case just perspective origin and

00:21:41,150 --> 00:21:46,340
then we have you know a template literal

00:21:44,510 --> 00:21:50,240
where I'm plugging in those x and y

00:21:46,340 --> 00:21:52,669
values pretty easily so SVG animation

00:21:50,240 --> 00:21:54,590
and view end up becoming really good

00:21:52,669 --> 00:21:56,049
friends because they place so nicely

00:21:54,590 --> 00:21:58,640
together for those updates

00:21:56,049 --> 00:22:01,520
so let's look at this little Wally I

00:21:58,640 --> 00:22:03,919
made from a dribble shot

00:22:01,520 --> 00:22:05,870
well he has a looping animation in the

00:22:03,919 --> 00:22:07,850
way he looks around and blinks then as

00:22:05,870 --> 00:22:10,190
my mouse or this little cockroach guy

00:22:07,850 --> 00:22:12,260
who's his friend moves he follows his

00:22:10,190 --> 00:22:15,400
little buddy around it's also worth

00:22:12,260 --> 00:22:17,419
mentioning that anytime you have a user

00:22:15,400 --> 00:22:19,490
respond to something with emotion

00:22:17,419 --> 00:22:21,049
they're more likely to remember it later

00:22:19,490 --> 00:22:23,090
because it'll attach to their limbic

00:22:21,049 --> 00:22:24,770
system so anytime you make something

00:22:23,090 --> 00:22:26,840
that's a little bit more charming or

00:22:24,770 --> 00:22:29,260
makes them sad or something they'll be

00:22:26,840 --> 00:22:32,240
able to recall that information better

00:22:29,260 --> 00:22:34,520
so in the view template we create a

00:22:32,240 --> 00:22:36,320
mousemove event in the HTML and then in

00:22:34,520 --> 00:22:37,820
the methods in JavaScript there's a bit

00:22:36,320 --> 00:22:39,620
of logic I'm not showing here but

00:22:37,820 --> 00:22:41,870
basically you can think of it like this

00:22:39,620 --> 00:22:43,640
there's one kind of blinking head

00:22:41,870 --> 00:22:45,140
turning movement that's happening all

00:22:43,640 --> 00:22:48,530
the time and then there's another

00:22:45,140 --> 00:22:50,870
animation where he's extending his arms

00:22:48,530 --> 00:22:53,809
that I could like create first I paused

00:22:50,870 --> 00:22:56,750
that timeline and then I allow view to

00:22:53,809 --> 00:22:59,270
scrub the timeline that's that that's

00:22:56,750 --> 00:23:03,110
that a client X and like the pause

00:22:59,270 --> 00:23:04,549
progress here so so far all of our

00:23:03,110 --> 00:23:06,860
animations have been in lockstep with

00:23:04,549 --> 00:23:09,440
each other and just another small piece

00:23:06,860 --> 00:23:11,600
of our application but what happens if

00:23:09,440 --> 00:23:13,429
it's a giant application and there's a

00:23:11,600 --> 00:23:14,990
bit of state that you want communicated

00:23:13,429 --> 00:23:18,230
across a bunch of different components

00:23:14,990 --> 00:23:21,289
well you might be familiar with Redux

00:23:18,230 --> 00:23:24,080
from Reax view has a similar thing

00:23:21,289 --> 00:23:26,809
called view X it's basically like the

00:23:24,080 --> 00:23:29,120
redux of view to be clear you can still

00:23:26,809 --> 00:23:31,340
use Redux in view that's totally fine

00:23:29,120 --> 00:23:35,799
but it is kind of nice to use the one

00:23:31,340 --> 00:23:38,330
that is for the framework so once we've

00:23:35,799 --> 00:23:40,820
encapsulated what's changing each

00:23:38,330 --> 00:23:42,559
component owns its own state and the

00:23:40,820 --> 00:23:46,070
entrance will always be consistent as

00:23:42,559 --> 00:23:49,039
well as the exit so we can reuse these

00:23:46,070 --> 00:23:50,570
components change their order and manage

00:23:49,039 --> 00:23:53,350
their state and a really clean and

00:23:50,570 --> 00:23:53,350
simple manner

00:24:05,790 --> 00:24:10,090
so in this example I'm not even passing

00:24:08,350 --> 00:24:12,669
state around I create a central store

00:24:10,090 --> 00:24:15,040
with view X and in mutations I number

00:24:12,669 --> 00:24:17,080
these templates toggle their visibility

00:24:15,040 --> 00:24:19,679
and advance the templates looping back

00:24:17,080 --> 00:24:22,480
around when I get to the final one and

00:24:19,679 --> 00:24:23,799
this is all inside of one SVG I have we

00:24:22,480 --> 00:24:25,480
have different components based on the

00:24:23,799 --> 00:24:28,090
state of our store each with their own

00:24:25,480 --> 00:24:31,150
entrance and I'm committing to the store

00:24:28,090 --> 00:24:32,919
and toggling and like when that that

00:24:31,150 --> 00:24:35,440
toggle fires and we have our animation

00:24:32,919 --> 00:24:37,960
logic actually like hooked into a

00:24:35,440 --> 00:24:39,940
lifecycle method so again like if you're

00:24:37,960 --> 00:24:42,790
familiar with react you'd use component

00:24:39,940 --> 00:24:45,130
did mount here we use mounted in view

00:24:42,790 --> 00:24:47,110
and we have all of our animation logic

00:24:45,130 --> 00:24:49,540
as soon as that component is mounted so

00:24:47,110 --> 00:24:51,370
if you're not familiar with lifecycle

00:24:49,540 --> 00:24:53,049
methods this is like as a child is

00:24:51,370 --> 00:24:59,140
coming in we have a few events that we

00:24:53,049 --> 00:25:01,299
can hook into so okay custom directives

00:24:59,140 --> 00:25:02,950
we talked about directives like that V

00:25:01,299 --> 00:25:04,990
model before but let's say you're doing

00:25:02,950 --> 00:25:06,910
something very specific and repetitive

00:25:04,990 --> 00:25:08,890
and you need deeper access to your

00:25:06,910 --> 00:25:10,960
application and you don't want to just

00:25:08,890 --> 00:25:13,419
create an event you want to actually use

00:25:10,960 --> 00:25:15,580
a directive well view allows us to make

00:25:13,419 --> 00:25:18,520
our own custom directives so let's apply

00:25:15,580 --> 00:25:20,500
that to animation so here's how you

00:25:18,520 --> 00:25:22,690
would create a view custom directive

00:25:20,500 --> 00:25:24,850
it's probably the most common to hook

00:25:22,690 --> 00:25:26,290
into bind so we've got a custom

00:25:24,850 --> 00:25:27,970
directive called v-tach

00:25:26,290 --> 00:25:29,679
but it's actually not that useful yet

00:25:27,970 --> 00:25:32,799
it's just like making the thing position

00:25:29,679 --> 00:25:34,480
fixed so let's do one better we'll pass

00:25:32,799 --> 00:25:36,040
the value into the directive it's a bit

00:25:34,480 --> 00:25:37,690
more flexible then we can call the

00:25:36,040 --> 00:25:40,450
attack on the directive and stick the

00:25:37,690 --> 00:25:42,520
element at 770 pixels down from the top

00:25:40,450 --> 00:25:46,419
so you can see it as I scroll down the

00:25:42,520 --> 00:25:49,030
page it's stuck at 770 pixels so let's

00:25:46,419 --> 00:25:51,070
do one better format will pass in more

00:25:49,030 --> 00:25:53,020
than one value and here we can make it

00:25:51,070 --> 00:25:56,440
really flexible and we can tack the

00:25:53,020 --> 00:25:59,110
element anywhere so okay let's apply

00:25:56,440 --> 00:26:01,179
this to animation in this example we'll

00:25:59,110 --> 00:26:03,460
create a directive that attaches to the

00:26:01,179 --> 00:26:06,400
scroll event it allows you to hook into

00:26:03,460 --> 00:26:08,049
that functionality and do animation or

00:26:06,400 --> 00:26:11,410
something and then you can remove the

00:26:08,049 --> 00:26:13,720
listener so now we're really cooking

00:26:11,410 --> 00:26:17,110
with gas we can emit an entire library

00:26:13,720 --> 00:26:18,010
like waypoints and just use cut or like

00:26:17,110 --> 00:26:19,780
scroll magic

00:26:18,010 --> 00:26:22,060
or something like that and just use

00:26:19,780 --> 00:26:24,750
custom directives to orchestrate these

00:26:22,060 --> 00:26:27,370
interesting Interactive's on our pages

00:26:24,750 --> 00:26:29,110
so I'm in the process of making this

00:26:27,370 --> 00:26:31,540
demo but this is a sneak peek we can use

00:26:29,110 --> 00:26:34,570
these custom directives to hook into d3s

00:26:31,540 --> 00:26:40,840
functionality and do some scrolling

00:26:34,570 --> 00:26:42,790
telling as we move down the page so here

00:26:40,840 --> 00:26:44,860
you see our custom directive in action

00:26:42,790 --> 00:26:46,930
we can use this to update those circles

00:26:44,860 --> 00:26:49,330
based on some fireball data that I got

00:26:46,930 --> 00:26:51,160
from NASA and we're updating all of the

00:26:49,330 --> 00:26:53,830
visualizations on that page so I'm

00:26:51,160 --> 00:26:56,560
saying total impacts and then I'm also

00:26:53,830 --> 00:26:58,860
returning I have some logic here that it

00:26:56,560 --> 00:27:00,970
connects to d3 and then I'm returning

00:26:58,860 --> 00:27:04,030
when we want to remove that event

00:27:00,970 --> 00:27:05,770
listener okay now we're going to talk

00:27:04,030 --> 00:27:07,660
about page transitions you've got two

00:27:05,770 --> 00:27:10,630
things to go I know that you've been

00:27:07,660 --> 00:27:12,340
like very very patient and like super

00:27:10,630 --> 00:27:13,480
engaged all day today but we're almost

00:27:12,340 --> 00:27:16,060
done

00:27:13,480 --> 00:27:18,070
next is a really really great tool for

00:27:16,060 --> 00:27:21,610
building out view applications it's

00:27:18,070 --> 00:27:23,320
similar to next js4 react so we have

00:27:21,610 --> 00:27:26,500
things like routing and page

00:27:23,320 --> 00:27:28,740
transitioning and server-side rendering

00:27:26,500 --> 00:27:31,030
and code splitting just out of the box

00:27:28,740 --> 00:27:32,920
so you might have heard people talk

00:27:31,030 --> 00:27:34,960
about server-side rendering of late if

00:27:32,920 --> 00:27:37,450
you're not familiar with the idea or the

00:27:34,960 --> 00:27:39,010
concept or why you would do this I think

00:27:37,450 --> 00:27:40,630
this is probably the best quote I've

00:27:39,010 --> 00:27:43,540
heard about it by rendering on the

00:27:40,630 --> 00:27:45,610
server you can cache the final shape of

00:27:43,540 --> 00:27:47,740
your data and what really that what that

00:27:45,610 --> 00:27:49,960
really allows you to do is not do a lot

00:27:47,740 --> 00:27:51,310
of the you know the template logic in

00:27:49,960 --> 00:27:53,350
the client and do it on the server

00:27:51,310 --> 00:27:57,130
instead which really speeds up your

00:27:53,350 --> 00:27:59,590
process it allows for some better SEO so

00:27:57,130 --> 00:28:01,360
that's really really compelling so if

00:27:59,590 --> 00:28:02,170
you don't already have view CLI

00:28:01,360 --> 00:28:03,790
installed

00:28:02,170 --> 00:28:06,490
here's that command will only have to

00:28:03,790 --> 00:28:08,500
run that once then once its installed

00:28:06,490 --> 00:28:10,420
any one time we want to spin up a

00:28:08,500 --> 00:28:12,850
project we'll just right view an X

00:28:10,420 --> 00:28:15,190
viewing it next starter in the name of

00:28:12,850 --> 00:28:17,620
your project and you have code splitting

00:28:15,190 --> 00:28:19,900
routing server-side rendering all step

00:28:17,620 --> 00:28:23,470
all set up for you without ever stepping

00:28:19,900 --> 00:28:25,450
outside of a view file so you'll be

00:28:23,470 --> 00:28:27,820
given an index page in the pages

00:28:25,450 --> 00:28:30,190
directory if you dump that content and

00:28:27,820 --> 00:28:31,539
simply create a view file and a next

00:28:30,190 --> 00:28:33,879
link you get our duplicate

00:28:31,539 --> 00:28:36,309
that page and you have links that point

00:28:33,879 --> 00:28:38,679
to one another so a fully routed

00:28:36,309 --> 00:28:41,340
single page application with server-side

00:28:38,679 --> 00:28:43,869
rendering I think that's really cool and

00:28:41,340 --> 00:28:45,429
next is also amazing because you don't

00:28:43,869 --> 00:28:48,100
have to wrap anything in a transition

00:28:45,429 --> 00:28:50,739
component either it already offers you a

00:28:48,100 --> 00:28:53,139
hook for that so all I have to do to

00:28:50,739 --> 00:28:56,350
create page transitions literally is

00:28:53,139 --> 00:28:58,539
write a bit of CSS that plugs into that

00:28:56,350 --> 00:29:01,090
so we've got page enter active page

00:28:58,539 --> 00:29:03,729
leave active page enter and page leave

00:29:01,090 --> 00:29:06,849
active that's so cool to create those

00:29:03,729 --> 00:29:09,009
page transitions because it's really

00:29:06,849 --> 00:29:10,899
hard to coordinate page transitions a

00:29:09,009 --> 00:29:12,849
lot of the time I feel like I'm always

00:29:10,899 --> 00:29:14,499
making a mess of page transitions and

00:29:12,849 --> 00:29:17,049
all I have to do is write a little bit

00:29:14,499 --> 00:29:18,489
of code here and we don't just have to

00:29:17,049 --> 00:29:20,919
use transitions either we can create

00:29:18,489 --> 00:29:22,779
animations too don't ever make your page

00:29:20,919 --> 00:29:24,840
transition this way I was just having

00:29:22,779 --> 00:29:24,840
fun

00:29:25,979 --> 00:29:30,820
but of course my favorite thing is the

00:29:28,570 --> 00:29:32,739
JavaScript hooks so we have transition

00:29:30,820 --> 00:29:34,570
modes available to us just the way that

00:29:32,739 --> 00:29:37,029
we saw earlier so we can make sure one

00:29:34,570 --> 00:29:38,979
page is done you know leaving before the

00:29:37,029 --> 00:29:41,379
other one comes in and we can use these

00:29:38,979 --> 00:29:45,009
hooks to create all of our animation

00:29:41,379 --> 00:29:47,169
logic and we can create something like

00:29:45,009 --> 00:29:49,869
this where you can see each different

00:29:47,169 --> 00:29:52,179
page is actually animating differently

00:29:49,869 --> 00:29:54,549
all of those mountains and text is all

00:29:52,179 --> 00:29:56,320
has its own kind of animation I don't

00:29:54,549 --> 00:29:57,700
want to be a buzzkill but we're like

00:29:56,320 --> 00:30:00,970
running a little bit over time okay

00:29:57,700 --> 00:30:03,190
I'll speed it up for the last you good

00:30:00,970 --> 00:30:04,809
okay sorry

00:30:03,190 --> 00:30:06,549
and there's the demo to explore the code

00:30:04,809 --> 00:30:09,729
the last thing today we'll look at is

00:30:06,549 --> 00:30:11,259
view and server lists I think server

00:30:09,729 --> 00:30:13,720
this is a really cool thing with a

00:30:11,259 --> 00:30:15,999
really click Beatty title really

00:30:13,720 --> 00:30:17,320
anything anybody who works with server

00:30:15,999 --> 00:30:18,759
list functions is going to tell you that

00:30:17,320 --> 00:30:20,470
you're still using a server but the

00:30:18,759 --> 00:30:22,330
promise of server lists is that you're

00:30:20,470 --> 00:30:25,359
no longer having to babysit a server or

00:30:22,330 --> 00:30:27,519
scale it or maintain it so basically you

00:30:25,359 --> 00:30:29,049
can write these functions and that's why

00:30:27,519 --> 00:30:30,249
we call it functions as a service so

00:30:29,049 --> 00:30:32,710
you're just writing the function and

00:30:30,249 --> 00:30:35,169
basically you don't have to babysit your

00:30:32,710 --> 00:30:37,599
server and scale it and you can have the

00:30:35,169 --> 00:30:39,489
pricing reflect that as well so as I

00:30:37,599 --> 00:30:41,230
mentioned before I work for Microsoft as

00:30:39,489 --> 00:30:43,359
a developer advocate and people often

00:30:41,230 --> 00:30:45,490
ask where my team is speaking so with

00:30:43,359 --> 00:30:47,500
three jeaious and view and some

00:30:45,490 --> 00:30:50,380
properties I'm using a server list

00:30:47,500 --> 00:30:52,480
function to gather all of that the

00:30:50,380 --> 00:30:56,650
geolocation data for that and then I'm

00:30:52,480 --> 00:30:58,210
able to update this globe you I'm gonna

00:30:56,650 --> 00:31:00,640
run through this really quickly we're

00:30:58,210 --> 00:31:03,309
receiving all of the geolocation data

00:31:00,640 --> 00:31:05,050
we're caching all of those entries and

00:31:03,309 --> 00:31:07,059
then we're able to run that function in

00:31:05,050 --> 00:31:10,030
the portal and then we're gonna use that

00:31:07,059 --> 00:31:11,740
for our three J's globe we have a single

00:31:10,030 --> 00:31:14,620
element and then we're gonna call on

00:31:11,740 --> 00:31:17,080
that mounted hook that three J's we're

00:31:14,620 --> 00:31:18,429
gonna pass in the texture and not that

00:31:17,080 --> 00:31:20,650
you'd want to do this because but

00:31:18,429 --> 00:31:23,170
because view and three J's play together

00:31:20,650 --> 00:31:25,750
so easily you can easily update that

00:31:23,170 --> 00:31:27,880
globe from a circle to you know any

00:31:25,750 --> 00:31:30,070
other thing like an Acosta Hedra so we

00:31:27,880 --> 00:31:33,610
can create myriad data visualizations

00:31:30,070 --> 00:31:36,610
very simply and we get view to do a lot

00:31:33,610 --> 00:31:39,220
of the heavy lifting for us so view

00:31:36,610 --> 00:31:40,750
makes it extraordinarily simple to

00:31:39,220 --> 00:31:43,179
create complex and beautiful

00:31:40,750 --> 00:31:46,270
interactions that feel seamless for our

00:31:43,179 --> 00:31:47,890
users we can connect States and reduce

00:31:46,270 --> 00:31:49,600
cognitive load for things that are

00:31:47,890 --> 00:31:52,150
changing in our application with ease

00:31:49,600 --> 00:31:53,950
and I'd like to say finally as a

00:31:52,150 --> 00:31:56,110
personal note that sometimes building

00:31:53,950 --> 00:31:57,760
and maintaining large applications on a

00:31:56,110 --> 00:31:59,890
corporate deadline can start to burn you

00:31:57,760 --> 00:32:01,720
out this happened to me and by working

00:31:59,890 --> 00:32:04,179
with animations something that gives

00:32:01,720 --> 00:32:06,280
both you and your users a dopamine rush

00:32:04,179 --> 00:32:08,530
of excitement I was able to stave off

00:32:06,280 --> 00:32:11,290
burnout and remember why I love working

00:32:08,530 --> 00:32:13,590
on the web so damn much thank you so

00:32:11,290 --> 00:32:13,590
much

00:32:21,630 --> 00:32:23,690

YouTube URL: https://www.youtube.com/watch?v=y5LAAkwQK6c


