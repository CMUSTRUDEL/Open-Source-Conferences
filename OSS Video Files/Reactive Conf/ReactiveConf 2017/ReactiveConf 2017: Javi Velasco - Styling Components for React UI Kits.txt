Title: ReactiveConf 2017: Javi Velasco - Styling Components for React UI Kits
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Discovery stage

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:15,289 --> 00:00:22,680
so welcome this is a styling components

00:00:19,800 --> 00:00:24,750
for react UI kids I want to share with

00:00:22,680 --> 00:00:26,790
you in this presentation some thoughts

00:00:24,750 --> 00:00:29,279
and patterns on how can you build like

00:00:26,790 --> 00:00:30,480
real really really flexible components

00:00:29,279 --> 00:00:32,930
for UI kids

00:00:30,480 --> 00:00:34,170
I mean don't use that for your business

00:00:32,930 --> 00:00:36,570
stuff

00:00:34,170 --> 00:00:38,630
my name is Kavya Velasco that's my

00:00:36,570 --> 00:00:41,820
twitter handle and my beautiful dog I

00:00:38,630 --> 00:00:44,129
work for a company called audience and I

00:00:41,820 --> 00:00:46,110
have this project called react toolbox

00:00:44,129 --> 00:00:50,310
which is an implementation of material

00:00:46,110 --> 00:00:52,980
design that at first was built using CSS

00:00:50,310 --> 00:00:54,900
modules it turns out that this not that

00:00:52,980 --> 00:00:58,079
a good idea at the end I'm gonna mention

00:00:54,900 --> 00:01:00,480
that later but in the beginning I built

00:00:58,079 --> 00:01:02,400
it as an alternative to the this popular

00:01:00,480 --> 00:01:05,400
project that I'm sure almost everybody

00:01:02,400 --> 00:01:08,460
knows which is material UI and suddenly

00:01:05,400 --> 00:01:11,340
the library became very very popular so

00:01:08,460 --> 00:01:14,340
these guys are using it for internal

00:01:11,340 --> 00:01:17,070
projects in Amazon Netflix and Walmart

00:01:14,340 --> 00:01:18,899
and apparently it is working well so far

00:01:17,070 --> 00:01:21,119
for them but I think that there are

00:01:18,899 --> 00:01:24,329
issues with the project in general and

00:01:21,119 --> 00:01:27,810
with some some design flaws that are

00:01:24,329 --> 00:01:31,409
coming essentially from CSS modules are

00:01:27,810 --> 00:01:32,789
you familiar with CSS modules yeah most

00:01:31,409 --> 00:01:35,609
everybody huh that's cool

00:01:32,789 --> 00:01:36,289
so it's not like CSS modules is a bad

00:01:35,609 --> 00:01:39,149
idea

00:01:36,289 --> 00:01:41,880
just the opposite it's a great idea but

00:01:39,149 --> 00:01:44,670
it's probably a bad idea for react UI

00:01:41,880 --> 00:01:47,310
kit in case you don't know about CSS

00:01:44,670 --> 00:01:49,729
modules it's going to allow you to

00:01:47,310 --> 00:01:55,469
import CSS into an object that can be

00:01:49,729 --> 00:01:58,109
used and passed as a draft reference to

00:01:55,469 --> 00:01:59,490
class names that can be later locally

00:01:58,109 --> 00:02:02,999
like locally scope they're gonna be

00:01:59,490 --> 00:02:05,009
hatched so you avoid collisions and you

00:02:02,999 --> 00:02:10,679
skip some issues that you usually have

00:02:05,009 --> 00:02:12,930
with regular CSS but that gives ya turns

00:02:10,679 --> 00:02:16,230
out that this problem coming from that

00:02:12,930 --> 00:02:18,720
because you have to install webpack or

00:02:16,230 --> 00:02:20,970
what model bundle or whatever to consume

00:02:18,720 --> 00:02:23,430
the library so it is not that easy as

00:02:20,970 --> 00:02:25,140
importing the component and just use it

00:02:23,430 --> 00:02:28,349
but you have to configure this whole

00:02:25,140 --> 00:02:30,659
thing so CSS modules can

00:02:28,349 --> 00:02:32,430
transpires and transform and you change

00:02:30,659 --> 00:02:35,310
the variables and gaming and everything

00:02:32,430 --> 00:02:37,620
so that's a problem because you can't

00:02:35,310 --> 00:02:40,139
really force people to do that kind of

00:02:37,620 --> 00:02:42,450
stuff and also there is another problem

00:02:40,139 --> 00:02:45,980
with this which is that since class

00:02:42,450 --> 00:02:49,079
names are scoped you can't write any

00:02:45,980 --> 00:02:51,299
selectors from outside see if you want

00:02:49,079 --> 00:02:54,419
to modify the style of a small piece in

00:02:51,299 --> 00:02:56,790
your component so I build this react CSS

00:02:54,419 --> 00:02:58,499
dimmer as a workaround for that that

00:02:56,790 --> 00:03:01,859
exposed like an API for customization

00:02:58,499 --> 00:03:04,349
that it's based in in objects so you can

00:03:01,859 --> 00:03:06,599
tell I want to put this class name in

00:03:04,349 --> 00:03:08,939
this specific node and react assist

00:03:06,599 --> 00:03:11,400
image is gonna take care of that but at

00:03:08,939 --> 00:03:13,139
the end you're still using CSS and that

00:03:11,400 --> 00:03:15,389
class name combination and applying

00:03:13,139 --> 00:03:20,099
those selectors is going to be very

00:03:15,389 --> 00:03:22,079
dependent on the priority right so say

00:03:20,099 --> 00:03:24,419
that you from that I provide a component

00:03:22,079 --> 00:03:26,930
that has a very specific selector it's

00:03:24,419 --> 00:03:29,699
very very difficult to override that so

00:03:26,930 --> 00:03:31,829
still there are issues that that got me

00:03:29,699 --> 00:03:34,889
thinking like the library is working so

00:03:31,829 --> 00:03:37,949
far people were using it they are ok but

00:03:34,889 --> 00:03:39,000
how can I give you a component that is

00:03:37,949 --> 00:03:42,810
completely reusable

00:03:39,000 --> 00:03:44,939
and I mean reusable because we were

00:03:42,810 --> 00:03:47,819
taught that we were never going to write

00:03:44,939 --> 00:03:49,799
another drop-down with react you just

00:03:47,819 --> 00:03:50,370
get a drop-down and use it but that's

00:03:49,799 --> 00:03:53,189
not true

00:03:50,370 --> 00:03:54,689
we are usually copying code and copy and

00:03:53,189 --> 00:03:59,009
pasting because we want to change stuff

00:03:54,689 --> 00:04:01,290
that we can't really change so have you

00:03:59,009 --> 00:04:04,680
ever visible they pick a component any

00:04:01,290 --> 00:04:09,150
other that's a lot of people interesting

00:04:04,680 --> 00:04:11,969
or have you ever copy component and you

00:04:09,150 --> 00:04:13,620
build your component yeah almost

00:04:11,969 --> 00:04:16,139
everybody because there is a lot of

00:04:13,620 --> 00:04:18,599
complex logic going on there another

00:04:16,139 --> 00:04:22,139
question do you think it was really yeah

00:04:18,599 --> 00:04:25,169
customizable customizable sorry no

00:04:22,139 --> 00:04:28,050
really because you can't change a lot of

00:04:25,169 --> 00:04:29,940
stuff like the render in layout there

00:04:28,050 --> 00:04:34,409
are difficult stuff to deal with there

00:04:29,940 --> 00:04:37,409
so let me show you something this is a

00:04:34,409 --> 00:04:39,330
demo of a proof-of-concept I made these

00:04:37,409 --> 00:04:41,430
two they pick there are two date pickers

00:04:39,330 --> 00:04:41,969
in the left side what you see is the

00:04:41,430 --> 00:04:44,669
area

00:04:41,969 --> 00:04:47,579
they'd speaker right with dosa styles

00:04:44,669 --> 00:04:50,879
this layout with 2 Mons and everything

00:04:47,579 --> 00:04:54,209
and on the right side what you're seeing

00:04:50,879 --> 00:04:56,519
is a react native date picker that use

00:04:54,209 --> 00:04:58,979
exactly the same logic it's exactly the

00:04:56,519 --> 00:05:01,649
same logic is sharing everything but

00:04:58,979 --> 00:05:04,199
it's not sharing style or anything it's

00:05:01,649 --> 00:05:08,069
just customization and hacking a little

00:05:04,199 --> 00:05:11,249
bit right so usually people get like how

00:05:08,069 --> 00:05:15,569
the did you get that done taking

00:05:11,249 --> 00:05:17,339
possible but it is not and I want to

00:05:15,569 --> 00:05:20,610
share with you the process that allowed

00:05:17,339 --> 00:05:22,799
me to make this thing okay so let's

00:05:20,610 --> 00:05:25,799
let's talk about the theming on

00:05:22,799 --> 00:05:27,089
customization first because people

00:05:25,799 --> 00:05:28,860
usually mess with Demming and

00:05:27,089 --> 00:05:31,039
customization they think that gets the

00:05:28,860 --> 00:05:35,629
same thing to me they're quite different

00:05:31,039 --> 00:05:37,739
so I see three levels in customization

00:05:35,629 --> 00:05:39,389
first of all you have this theming

00:05:37,739 --> 00:05:41,309
imagine this is a scenario where you

00:05:39,389 --> 00:05:43,199
want do you have a bunch of components

00:05:41,309 --> 00:05:45,209
that are sharing the same primary color

00:05:43,199 --> 00:05:48,569
for example and you want to change that

00:05:45,209 --> 00:05:51,719
color usually what you do is to give

00:05:48,569 --> 00:05:54,179
some kind of variable or something so

00:05:51,719 --> 00:05:55,709
you transpile using sass or less or

00:05:54,179 --> 00:05:57,389
whatever and just change the primary

00:05:55,709 --> 00:06:00,300
color but this is possible because you

00:05:57,389 --> 00:06:00,959
can decide when you are building the

00:06:00,300 --> 00:06:03,329
components

00:06:00,959 --> 00:06:04,649
hey this is likely to be change it so

00:06:03,329 --> 00:06:06,779
I'm going to extract that into a

00:06:04,649 --> 00:06:10,199
variable so later somebody else can

00:06:06,779 --> 00:06:12,089
build @vm object and then process

00:06:10,199 --> 00:06:15,059
everything on or or maybe not processing

00:06:12,089 --> 00:06:17,209
it's not necessarily these days but you

00:06:15,059 --> 00:06:20,279
can customize the whole thing right

00:06:17,209 --> 00:06:21,929
that's teaming to me you can predict

00:06:20,279 --> 00:06:25,319
what's going to be changed so you can

00:06:21,929 --> 00:06:28,889
define the API for that but there is

00:06:25,319 --> 00:06:31,499
also style customization by this I mean

00:06:28,889 --> 00:06:33,689
like overriding styles for example I

00:06:31,499 --> 00:06:36,209
give you this card component in reactive

00:06:33,689 --> 00:06:38,909
box and I don't think you want to want

00:06:36,209 --> 00:06:40,409
to change the title maybe because that's

00:06:38,909 --> 00:06:42,749
something that is specified in the

00:06:40,409 --> 00:06:44,099
guidelines right so I can't really

00:06:42,749 --> 00:06:45,869
predict that you want to change the

00:06:44,099 --> 00:06:47,789
title but maybe you don't care about the

00:06:45,869 --> 00:06:50,610
spec that much and you want to change it

00:06:47,789 --> 00:06:52,649
so I have to give you some kind of Cape

00:06:50,610 --> 00:06:54,659
Hatcher whatever so you can really

00:06:52,649 --> 00:06:56,160
change that in an easy way and not

00:06:54,659 --> 00:06:59,840
writing in

00:06:56,160 --> 00:07:02,310
at the end of a CSS selector right so

00:06:59,840 --> 00:07:04,620
you can't predict what's going to be

00:07:02,310 --> 00:07:06,120
change it that's the problem so but but

00:07:04,620 --> 00:07:08,390
still you have to support that and

00:07:06,120 --> 00:07:10,380
finally there is this other

00:07:08,390 --> 00:07:13,710
customization which is rendering

00:07:10,380 --> 00:07:16,440
customization nobody does this because

00:07:13,710 --> 00:07:18,660
not mostly cinereous is not like

00:07:16,440 --> 00:07:21,600
necessary but imagine this situation

00:07:18,660 --> 00:07:23,640
where you have this date picker the

00:07:21,600 --> 00:07:26,280
month for the weekdays for example are

00:07:23,640 --> 00:07:28,020
rendered with capital letters and you

00:07:26,280 --> 00:07:30,360
don't want that you wanted full names

00:07:28,020 --> 00:07:32,690
for example how can you change that I

00:07:30,360 --> 00:07:34,500
mean that's customization as well

00:07:32,690 --> 00:07:36,780
because there is something that you want

00:07:34,500 --> 00:07:39,600
to change that is given to you by

00:07:36,780 --> 00:07:44,850
default but it's not related to styling

00:07:39,600 --> 00:07:49,020
is a different thing so if you get a

00:07:44,850 --> 00:07:52,440
component that can be themed that can be

00:07:49,020 --> 00:07:55,500
where you can easily customize the style

00:07:52,440 --> 00:07:58,410
where you can customize rendering you

00:07:55,500 --> 00:08:00,300
can barely change I mean everything you

00:07:58,410 --> 00:08:03,390
can change the whole thing if you need

00:08:00,300 --> 00:08:05,670
to and just keep the logic that's taking

00:08:03,390 --> 00:08:08,940
customization to the limits and that's

00:08:05,670 --> 00:08:10,290
what I want to get done so let's talk

00:08:08,940 --> 00:08:14,280
about how react

00:08:10,290 --> 00:08:17,490
faces styling first of all if not facing

00:08:14,280 --> 00:08:20,070
styling at all so we have this common

00:08:17,490 --> 00:08:22,620
model where a component can be compose

00:08:20,070 --> 00:08:25,110
it can be considered as a function of

00:08:22,620 --> 00:08:27,420
the state you have this component state

00:08:25,110 --> 00:08:29,400
you generate the view right but

00:08:27,420 --> 00:08:31,580
everything is encapsulated into

00:08:29,400 --> 00:08:35,340
JavaScript we are not writing with react

00:08:31,580 --> 00:08:39,720
HTML anymore and the DOM is managed by

00:08:35,340 --> 00:08:42,300
us way for us by react and but CSS is

00:08:39,720 --> 00:08:45,120
not taking part in this process so they

00:08:42,300 --> 00:08:46,860
say ok you just define your class names

00:08:45,120 --> 00:08:48,990
and then pass class names to those

00:08:46,860 --> 00:08:51,570
components and and that's all you have

00:08:48,990 --> 00:08:54,570
to do to get something style so I would

00:08:51,570 --> 00:08:58,680
say that style is CSS or styling is not

00:08:54,570 --> 00:09:01,980
a first class citizen in react and that

00:08:58,680 --> 00:09:04,830
leads to problems like for example to

00:09:01,980 --> 00:09:08,490
get Deming do you need building and

00:09:04,830 --> 00:09:09,540
setting up do you have of course in CSS

00:09:08,490 --> 00:09:12,329
this caste

00:09:09,540 --> 00:09:15,060
some properties but custom properties

00:09:12,329 --> 00:09:17,670
are not supports but are not supported

00:09:15,060 --> 00:09:19,800
by any browser so you probably would

00:09:17,670 --> 00:09:21,990
need to use something like Poe CSS or

00:09:19,800 --> 00:09:24,209
whatever to transform the whole thing

00:09:21,990 --> 00:09:28,199
and that transformation process you

00:09:24,209 --> 00:09:30,209
happen in the final user if I am gonna

00:09:28,199 --> 00:09:32,040
give you some patterns some big Pickers

00:09:30,209 --> 00:09:33,630
and stuff like that and you want to

00:09:32,040 --> 00:09:36,329
change that color you're gonna have to

00:09:33,630 --> 00:09:39,480
process everything in the in the client

00:09:36,329 --> 00:09:44,459
and again that is for team people to

00:09:39,480 --> 00:09:46,740
install all of these plugins or systems

00:09:44,459 --> 00:09:49,190
to transform the whole thing that's not

00:09:46,740 --> 00:09:52,290
a good idea but there is another issue

00:09:49,190 --> 00:09:54,300
like for example you want to use the

00:09:52,290 --> 00:09:56,430
component but the CSS is not there

00:09:54,300 --> 00:09:58,889
because it's not a first class citizen

00:09:56,430 --> 00:10:02,160
in react so you have to import in some

00:09:58,889 --> 00:10:04,680
way in the document the the the CSS of

00:10:02,160 --> 00:10:07,079
course you can ship the component with

00:10:04,680 --> 00:10:08,790
CSS loader but again you can't do that

00:10:07,079 --> 00:10:12,300
because you need to process that in real

00:10:08,790 --> 00:10:15,870
time or at bonding time a built I'm

00:10:12,300 --> 00:10:17,579
sorry so we are happy with react and we

00:10:15,870 --> 00:10:20,519
are happy with real hunting they don't

00:10:17,579 --> 00:10:22,079
for us so I may ask what if we take

00:10:20,519 --> 00:10:24,149
style as a function of a state tool

00:10:22,079 --> 00:10:26,180
because it is actually what we do is to

00:10:24,149 --> 00:10:29,519
create like a combination of class names

00:10:26,180 --> 00:10:31,889
so we decide what class name is our

00:10:29,519 --> 00:10:33,510
modifier depending on the state and all

00:10:31,889 --> 00:10:36,630
of that logic is happening in the in the

00:10:33,510 --> 00:10:40,980
component itself but it is then a

00:10:36,630 --> 00:10:44,579
function of the state - so can we handle

00:10:40,980 --> 00:10:46,980
CSS as reactors with HTML yes we do with

00:10:44,579 --> 00:10:48,899
CSS yeah yes the implementation of the

00:10:46,980 --> 00:10:52,139
JavaScript fatigue with the 60 dive

00:10:48,899 --> 00:10:55,050
different libraries of the RAI but

00:10:52,139 --> 00:10:57,209
particularly I'm gonna use for the

00:10:55,050 --> 00:11:00,689
examples style components just because I

00:10:57,209 --> 00:11:02,850
like the API there are great libraries

00:11:00,689 --> 00:11:06,329
out there we have some authors here that

00:11:02,850 --> 00:11:07,860
are very smart and you can use whatever

00:11:06,329 --> 00:11:11,970
you want actually but I'm gonna use that

00:11:07,860 --> 00:11:14,220
as an example so it is described style

00:11:11,970 --> 00:11:17,130
components as primitives for the

00:11:14,220 --> 00:11:19,860
component era and you build your

00:11:17,130 --> 00:11:22,700
components final components they seem

00:11:19,860 --> 00:11:26,480
based on those primitives

00:11:22,700 --> 00:11:29,840
so let me show you an example first this

00:11:26,480 --> 00:11:31,790
is how we can build a pattern right we

00:11:29,840 --> 00:11:35,540
have this button it is receiving a

00:11:31,790 --> 00:11:39,140
primary property and we are deciding

00:11:35,540 --> 00:11:41,450
which class name is going to be included

00:11:39,140 --> 00:11:44,300
depending on the property and what we

00:11:41,450 --> 00:11:46,610
are rendering is a button component it's

00:11:44,300 --> 00:11:50,450
a button element right that renders

00:11:46,610 --> 00:11:53,060
directly to the done so the problem with

00:11:50,450 --> 00:11:55,250
this is that you are encapsulating this

00:11:53,060 --> 00:11:57,080
logic to decide how the component is

00:11:55,250 --> 00:12:00,260
going to look like in the component

00:11:57,080 --> 00:12:02,000
itself and not in the node that is going

00:12:00,260 --> 00:12:03,590
to be rendered because eventually when

00:12:02,000 --> 00:12:06,440
you write CSS you want to target on a

00:12:03,590 --> 00:12:09,020
specific element so it makes sense to

00:12:06,440 --> 00:12:10,820
write those Styles directly into the

00:12:09,020 --> 00:12:12,590
component in the in to denote that it's

00:12:10,820 --> 00:12:13,760
going to get rendered just think about

00:12:12,590 --> 00:12:14,590
the abstraction that's what's

00:12:13,760 --> 00:12:17,660
interesting

00:12:14,590 --> 00:12:19,760
instead components though you can create

00:12:17,660 --> 00:12:21,380
a button like this are you familiar with

00:12:19,760 --> 00:12:24,140
the components by the way and I didn't

00:12:21,380 --> 00:12:26,090
ask here right almost everybody okay so

00:12:24,140 --> 00:12:28,280
step components is going to allow you to

00:12:26,090 --> 00:12:30,710
create a component just calling them

00:12:28,280 --> 00:12:33,470
calling a method like this and you can

00:12:30,710 --> 00:12:37,550
this is going to produce a component

00:12:33,470 --> 00:12:40,400
that gets rendered with one element

00:12:37,550 --> 00:12:42,830
which is going to be a link obviously so

00:12:40,400 --> 00:12:44,930
you just call that function and pass the

00:12:42,830 --> 00:12:48,650
styles that this element is going to

00:12:44,930 --> 00:12:50,180
have eventually but what is more

00:12:48,650 --> 00:12:52,310
interesting is that you can interpolate

00:12:50,180 --> 00:12:54,830
on the end a function and that function

00:12:52,310 --> 00:12:57,590
is going to be called with the props of

00:12:54,830 --> 00:13:00,230
the bottom component so you can use

00:12:57,590 --> 00:13:03,650
properties of this component to the side

00:13:00,230 --> 00:13:08,270
what's going to be the style so in this

00:13:03,650 --> 00:13:10,490
case what we're seeing is this props if

00:13:08,270 --> 00:13:13,070
I'm including the primary prop its

00:13:10,490 --> 00:13:16,880
evaluate so truthy I'm going to add a

00:13:13,070 --> 00:13:18,260
white background and this color we

00:13:16,880 --> 00:13:22,100
change the abstraction we are not

00:13:18,260 --> 00:13:24,230
telling if this property primary exists

00:13:22,100 --> 00:13:25,880
I'm going to add this class name that I

00:13:24,230 --> 00:13:28,280
don't know what are the styles for that

00:13:25,880 --> 00:13:31,010
class names but what we are telling is

00:13:28,280 --> 00:13:32,950
at these Styles when it gets this

00:13:31,010 --> 00:13:36,230
property and that's interesting because

00:13:32,950 --> 00:13:38,900
you use the component like that happy

00:13:36,230 --> 00:13:41,720
just button primary but primary is the

00:13:38,900 --> 00:13:44,510
modifier but not a class name but a

00:13:41,720 --> 00:13:46,610
property that's cool right so when you

00:13:44,510 --> 00:13:48,500
compose your components you can with

00:13:46,610 --> 00:13:50,300
something like style components

00:13:48,500 --> 00:13:53,480
something like not SCI components

00:13:50,300 --> 00:13:56,050
necessary you focus on building your

00:13:53,480 --> 00:13:58,850
components rendering two components

00:13:56,050 --> 00:14:01,640
instead of rendering two elements so I

00:13:58,850 --> 00:14:03,350
have this here may be designers will be

00:14:01,640 --> 00:14:06,320
happy with the right side but we

00:14:03,350 --> 00:14:09,500
developers are more happy with the than

00:14:06,320 --> 00:14:12,890
with the right side right so if you

00:14:09,500 --> 00:14:15,560
render two elements the problem is that

00:14:12,890 --> 00:14:17,540
you have to link class name combined

00:14:15,560 --> 00:14:19,400
those class name and everything and you

00:14:17,540 --> 00:14:21,520
are mapping to this combination you have

00:14:19,400 --> 00:14:24,500
no building a strategy for daemon and

00:14:21,520 --> 00:14:26,210
also the offer I overriding style is

00:14:24,500 --> 00:14:30,920
going to rely on the selector priority

00:14:26,210 --> 00:14:34,130
but using just components it's a much

00:14:30,920 --> 00:14:35,510
more powerful abstraction I'm is going

00:14:34,130 --> 00:14:37,250
to give you the min for free because

00:14:35,510 --> 00:14:38,420
probably the library that you use to

00:14:37,250 --> 00:14:41,020
produce those components already

00:14:38,420 --> 00:14:44,330
supports a way to get theming done and

00:14:41,020 --> 00:14:46,460
also the customization can rely on the

00:14:44,330 --> 00:14:49,220
library itself instead of in the browser

00:14:46,460 --> 00:14:52,790
so let's try to embrace this approach

00:14:49,220 --> 00:14:55,730
and see how can you really solve this

00:14:52,790 --> 00:14:57,380
deeming and style customization using

00:14:55,730 --> 00:15:01,040
style components in this case okay using

00:14:57,380 --> 00:15:04,160
those primitives so the mean is very

00:15:01,040 --> 00:15:06,110
very easy just like this dude create

00:15:04,160 --> 00:15:08,750
your component interpolate this function

00:15:06,110 --> 00:15:10,370
at the end and you grab the color of

00:15:08,750 --> 00:15:12,710
whatever value you want to interpolate

00:15:10,370 --> 00:15:15,110
from the theme object that is going to

00:15:12,710 --> 00:15:18,680
be passing the properties but how can

00:15:15,110 --> 00:15:21,290
you get that easy just use this provide

00:15:18,680 --> 00:15:23,780
a provider pattern that is very commonly

00:15:21,290 --> 00:15:28,000
react and sure everybody used Redux at

00:15:23,780 --> 00:15:32,120
least once and watch that provider right

00:15:28,000 --> 00:15:36,530
so you just create your theme and use it

00:15:32,120 --> 00:15:38,780
for the dim provider so every component

00:15:36,530 --> 00:15:40,910
that is inside there it's going it's

00:15:38,780 --> 00:15:44,270
going to know how to grab that theme

00:15:40,910 --> 00:15:46,730
object so you can beam easily with sub

00:15:44,270 --> 00:15:50,000
components that's that's cool but what

00:15:46,730 --> 00:15:51,950
if I want to overwrite style

00:15:50,000 --> 00:15:53,420
style customization that's the

00:15:51,950 --> 00:15:56,480
customization that's the problem

00:15:53,420 --> 00:15:59,050
how can we get that done style component

00:15:56,480 --> 00:16:02,000
is giving you a way to customize

00:15:59,050 --> 00:16:04,550
components but not element bypassing a

00:16:02,000 --> 00:16:07,340
class name down but I like this approach

00:16:04,550 --> 00:16:11,060
to where you just interpolate at the end

00:16:07,340 --> 00:16:13,190
of this at the end of the CSS a function

00:16:11,060 --> 00:16:18,110
that returns a property which is style

00:16:13,190 --> 00:16:21,260
you might wonder what is that style it

00:16:18,110 --> 00:16:25,250
could be a representation of a piece of

00:16:21,260 --> 00:16:27,560
CSS just like this okay and what is

00:16:25,250 --> 00:16:30,860
really really cool about this is that

00:16:27,560 --> 00:16:33,050
you can still interpolate a function in

00:16:30,860 --> 00:16:37,550
that piece of CSS I mean this is not

00:16:33,050 --> 00:16:39,380
directly related to the component it is

00:16:37,550 --> 00:16:44,180
along it can be used in any component as

00:16:39,380 --> 00:16:47,260
long as it gets a primary property so

00:16:44,180 --> 00:16:50,000
this is very nice because you can

00:16:47,260 --> 00:16:52,040
customize stuff not only based on

00:16:50,000 --> 00:16:54,260
properties that are defined for the

00:16:52,040 --> 00:16:56,589
component but with original properties

00:16:54,260 --> 00:16:59,990
that you can pass to that component and

00:16:56,589 --> 00:17:02,660
this is how you use it you just use this

00:16:59,990 --> 00:17:05,810
button and pass the styles object like

00:17:02,660 --> 00:17:09,199
that and you get a customized button

00:17:05,810 --> 00:17:11,060
that you can be sure that it's going to

00:17:09,199 --> 00:17:13,160
get those Styles applied because you are

00:17:11,060 --> 00:17:15,260
interpolating at the end there is a

00:17:13,160 --> 00:17:18,170
warning with this in a style components

00:17:15,260 --> 00:17:20,390
in particular which is that the module

00:17:18,170 --> 00:17:23,000
interpolate the vigor is the CSS the

00:17:20,390 --> 00:17:25,250
harder is to parse the whole thing so if

00:17:23,000 --> 00:17:26,689
you're doing a lot of rendering like for

00:17:25,250 --> 00:17:29,270
very heavy animations and stuff

00:17:26,689 --> 00:17:32,060
animations and stuff like that might not

00:17:29,270 --> 00:17:34,100
be that good idea but again you can use

00:17:32,060 --> 00:17:35,840
something else and if it's based for

00:17:34,100 --> 00:17:39,200
example on objects you can just merge

00:17:35,840 --> 00:17:40,700
two object but this is fine because it's

00:17:39,200 --> 00:17:42,830
rendering to one single node what

00:17:40,700 --> 00:17:46,100
happens if it is a more complex

00:17:42,830 --> 00:17:47,600
component how can we deal with that do

00:17:46,100 --> 00:17:49,340
you have to design some kind of API for

00:17:47,600 --> 00:17:51,350
that so picture this you have this

00:17:49,340 --> 00:17:54,470
counter component that is composed by

00:17:51,350 --> 00:17:57,830
two different nodes these primitives are

00:17:54,470 --> 00:18:01,250
rubber and count so what you do is to

00:17:57,830 --> 00:18:03,420
turn this style property into an object

00:18:01,250 --> 00:18:07,380
and the prop

00:18:03,420 --> 00:18:10,230
for these objects can be the same as the

00:18:07,380 --> 00:18:12,510
name you use for the note so you are

00:18:10,230 --> 00:18:14,880
designing here like a contract what you

00:18:12,510 --> 00:18:19,020
are saying my counter component is

00:18:14,880 --> 00:18:21,750
composed by rapper and so you give

00:18:19,020 --> 00:18:24,510
me a stylus object that use this rap

00:18:21,750 --> 00:18:26,250
rankled properties so I can know what

00:18:24,510 --> 00:18:29,130
are the styles over right that you want

00:18:26,250 --> 00:18:33,810
to pass then to pass to these primitives

00:18:29,130 --> 00:18:36,690
okay but you can use it like this by the

00:18:33,810 --> 00:18:39,660
way do you just create your counter pass

00:18:36,690 --> 00:18:41,310
that pieces of CSS in the case for all

00:18:39,660 --> 00:18:43,620
the library it could be an object with

00:18:41,310 --> 00:18:45,930
the properties and you render like that

00:18:43,620 --> 00:18:51,300
to friend your counter pass the styles

00:18:45,930 --> 00:18:53,250
boom done but with this approach how can

00:18:51,300 --> 00:18:54,960
you solve render customization

00:18:53,250 --> 00:18:57,270
customization and and and this is what

00:18:54,960 --> 00:18:59,960
is really interesting and it's the most

00:18:57,270 --> 00:19:03,990
difficult part probably in this talk

00:18:59,960 --> 00:19:06,300
again back to this counter component in

00:19:03,990 --> 00:19:08,550
this counter component we are importing

00:19:06,300 --> 00:19:10,110
some from somewhere this rapper and

00:19:08,550 --> 00:19:13,080
count elements

00:19:10,110 --> 00:19:15,270
sorry components and we are just using

00:19:13,080 --> 00:19:18,870
them like that but rendering

00:19:15,270 --> 00:19:21,210
customization what if I want the rapper

00:19:18,870 --> 00:19:23,370
to render something else and not just

00:19:21,210 --> 00:19:25,830
the children what if I have this counter

00:19:23,370 --> 00:19:28,770
that is a rapper on a counter inside and

00:19:25,830 --> 00:19:30,180
I want to pull some kind of phrase or

00:19:28,770 --> 00:19:33,650
whatever inside the rapper

00:19:30,180 --> 00:19:36,870
how can I do that well what you can do

00:19:33,650 --> 00:19:39,270
is to expose a function that receives

00:19:36,870 --> 00:19:40,860
those two components instead of just

00:19:39,270 --> 00:19:43,440
importing them is that this is

00:19:40,860 --> 00:19:46,170
dependency injection this is a classic

00:19:43,440 --> 00:19:50,010
concept right so you get those rubber

00:19:46,170 --> 00:19:53,730
and count component and return the

00:19:50,010 --> 00:19:57,480
counter component just like like a

00:19:53,730 --> 00:19:59,340
factory and then how can you use this

00:19:57,480 --> 00:20:01,680
how can you use this function it's a

00:19:59,340 --> 00:20:05,010
simple of this this is very declarative

00:20:01,680 --> 00:20:06,540
right it's like built a counter where

00:20:05,010 --> 00:20:09,330
the rapper is going to look like this

00:20:06,540 --> 00:20:11,460
and the count is going to look like this

00:20:09,330 --> 00:20:15,180
and it's very declarative it's very

00:20:11,460 --> 00:20:17,370
clear it's nice right but the cool thing

00:20:15,180 --> 00:20:20,880
and what I like about style component

00:20:17,370 --> 00:20:22,560
is again this abstraction because after

00:20:20,880 --> 00:20:27,060
style components there are adapters for

00:20:22,560 --> 00:20:29,430
riad Fela for jss that allows you to use

00:20:27,060 --> 00:20:31,770
the same API like you call this function

00:20:29,430 --> 00:20:35,160
and return a star component that bundles

00:20:31,770 --> 00:20:37,470
the styles so you can use something else

00:20:35,160 --> 00:20:40,110
you can use fill out for example to get

00:20:37,470 --> 00:20:42,560
there and look at this is they look

00:20:40,110 --> 00:20:46,650
almost the same right but they are

00:20:42,560 --> 00:20:49,440
different styling libraries but you know

00:20:46,650 --> 00:20:52,980
what is cooler that you can use react

00:20:49,440 --> 00:20:56,190
native too because that abstraction that

00:20:52,980 --> 00:20:58,740
component note abstraction it doesn't

00:20:56,190 --> 00:21:00,690
matter if it's a div or a span or a view

00:20:58,740 --> 00:21:03,450
or a text it's just a contract that you

00:21:00,690 --> 00:21:04,770
define for the component right but there

00:21:03,450 --> 00:21:07,890
is a problem with that the contract is

00:21:04,770 --> 00:21:10,530
implicit it is there and apparently it

00:21:07,890 --> 00:21:13,440
can be modified so let's get evil and

00:21:10,530 --> 00:21:15,450
let me put it this way like what if I

00:21:13,440 --> 00:21:18,810
want to have a red background with the

00:21:15,450 --> 00:21:22,290
counter value is higher than 10 for

00:21:18,810 --> 00:21:24,570
example is that even possible and this

00:21:22,290 --> 00:21:27,840
is my approach for that you pass an

00:21:24,570 --> 00:21:29,750
additional an additional property to

00:21:27,840 --> 00:21:33,330
this function which is the pass-through

00:21:29,750 --> 00:21:35,730
function this pass-through function has

00:21:33,330 --> 00:21:39,720
this contract like it has to return an

00:21:35,730 --> 00:21:42,630
object and this object can be spread in

00:21:39,720 --> 00:21:45,060
each node so this function can be used

00:21:42,630 --> 00:21:46,950
to decide what properties are going to

00:21:45,060 --> 00:21:49,680
be passed down to every single element

00:21:46,950 --> 00:21:52,380
inside of this component and the

00:21:49,680 --> 00:21:56,610
arguments for this function are going to

00:21:52,380 --> 00:21:59,820
be the name of the component note that

00:21:56,610 --> 00:22:03,270
it's being called and the props of the

00:21:59,820 --> 00:22:05,570
component itself so an implementation

00:22:03,270 --> 00:22:08,940
that allows me to solve that problem

00:22:05,570 --> 00:22:10,470
turning the back the background red the

00:22:08,940 --> 00:22:12,780
wrapper background when the contours

00:22:10,470 --> 00:22:17,280
Haggar done then could be something like

00:22:12,780 --> 00:22:19,830
this I just say if this function is

00:22:17,280 --> 00:22:21,960
being called with the wrapper component

00:22:19,830 --> 00:22:24,270
with the wrapper for the wrapper I'm

00:22:21,960 --> 00:22:27,030
going to return this object that

00:22:24,270 --> 00:22:30,180
includes count work count is the

00:22:27,030 --> 00:22:34,140
children of my contour element right

00:22:30,180 --> 00:22:36,290
and with that I can know that rapper is

00:22:34,140 --> 00:22:40,860
going to receive this counter property

00:22:36,290 --> 00:22:43,980
so later I can just use it like that

00:22:40,860 --> 00:22:47,160
I can use this interpolation and I know

00:22:43,980 --> 00:22:49,920
that props are going to include count so

00:22:47,160 --> 00:22:52,050
I can say if it's higher than ten turn

00:22:49,920 --> 00:22:55,650
the background red and this can be done

00:22:52,050 --> 00:22:57,840
with any order property with internal

00:22:55,650 --> 00:23:00,300
handlers and everything but of course

00:22:57,840 --> 00:23:01,740
there are problems like the API can

00:23:00,300 --> 00:23:03,990
become very very complex and the

00:23:01,740 --> 00:23:06,570
documentation believe me could be huge

00:23:03,990 --> 00:23:09,690
for especially for components that are

00:23:06,570 --> 00:23:11,550
very complex and also you don't know

00:23:09,690 --> 00:23:13,410
exactly what properties are going to

00:23:11,550 --> 00:23:15,570
receive each node because the contract

00:23:13,410 --> 00:23:17,580
is inside of the component that can be

00:23:15,570 --> 00:23:20,610
solved using static typing for example

00:23:17,580 --> 00:23:22,980
do you know what properties shoot the

00:23:20,610 --> 00:23:26,190
component except so as you write this

00:23:22,980 --> 00:23:28,140
component you can get insight on what

00:23:26,190 --> 00:23:30,210
are they allowed properties and also if

00:23:28,140 --> 00:23:31,950
you use a property that is not gonna be

00:23:30,210 --> 00:23:33,900
compassed it's going to complain like

00:23:31,950 --> 00:23:36,600
you seen type scrape or flow something

00:23:33,900 --> 00:23:38,070
like that and of course the last program

00:23:36,600 --> 00:23:41,940
is that you have to reveal the internals

00:23:38,070 --> 00:23:45,990
but you know what school this is very

00:23:41,940 --> 00:23:50,370
very cool we get done with this with

00:23:45,990 --> 00:23:52,560
this approach the three different layers

00:23:50,370 --> 00:23:55,230
that I mentioned before you get theming

00:23:52,560 --> 00:23:58,380
you get overwrite and you get render

00:23:55,230 --> 00:24:04,290
customization so back to react and react

00:23:58,380 --> 00:24:06,210
toolbox this means sort of the final

00:24:04,290 --> 00:24:09,450
version of react toolbox which is going

00:24:06,210 --> 00:24:11,550
to be using side components but the cool

00:24:09,450 --> 00:24:15,240
part is that we are going to use

00:24:11,550 --> 00:24:17,010
internally this abstraction so all

00:24:15,240 --> 00:24:18,780
components of react toolbox I'm going to

00:24:17,010 --> 00:24:21,060
be not all what the mocks the most

00:24:18,780 --> 00:24:24,210
complex ones are going to be built using

00:24:21,060 --> 00:24:26,340
these factory functions and all of these

00:24:24,210 --> 00:24:28,320
utilities higher-order components

00:24:26,340 --> 00:24:30,540
factory functions and stuff they are

00:24:28,320 --> 00:24:32,910
going to be extract into an external

00:24:30,540 --> 00:24:35,580
library which is reactive box core and

00:24:32,910 --> 00:24:37,890
this is going to be a set of agnostic

00:24:35,580 --> 00:24:39,960
component factories hydro components and

00:24:37,890 --> 00:24:43,980
all tivities that are going to allow you

00:24:39,960 --> 00:24:46,860
that to instead of using a drop-down and

00:24:43,980 --> 00:24:49,650
change that door down entirely do import

00:24:46,860 --> 00:24:53,280
this factory function for a drop-down

00:24:49,650 --> 00:24:55,740
and then decide how each node is going

00:24:53,280 --> 00:24:56,880
to look like so thanks for listening

00:24:55,740 --> 00:25:05,669
that's all I got

00:24:56,880 --> 00:25:07,830
thank you okay

00:25:05,669 --> 00:25:09,299
questions have you seen the rendered

00:25:07,830 --> 00:25:13,080
props button do you think that's a cool

00:25:09,299 --> 00:25:15,120
wave customization actually everybody

00:25:13,080 --> 00:25:20,100
went crazy with this render props

00:25:15,120 --> 00:25:23,490
pattern I try it out and like everything

00:25:20,100 --> 00:25:27,750
else it is not it cannot be applied to

00:25:23,490 --> 00:25:30,660
every single use case I mean it is cool

00:25:27,750 --> 00:25:32,820
because it allows you to be very

00:25:30,660 --> 00:25:35,520
explicit on the properties that are

00:25:32,820 --> 00:25:39,480
going to be passed by this what can be a

00:25:35,520 --> 00:25:42,000
higher-order component but I have some

00:25:39,480 --> 00:25:44,790
use case where it is not possible to

00:25:42,000 --> 00:25:47,429
apply this pattern but I think that when

00:25:44,790 --> 00:25:49,980
it possible you should definitely use it

00:25:47,429 --> 00:25:52,200
because it's way more explicit and I

00:25:49,980 --> 00:25:54,480
like it and some components in the

00:25:52,200 --> 00:25:57,540
reactor box core are going to include

00:25:54,480 --> 00:26:01,020
this this pattern but for example I have

00:25:57,540 --> 00:26:03,510
this one where you get full knowledge do

00:26:01,020 --> 00:26:05,880
you have a list like a unnumbered list

00:26:03,510 --> 00:26:08,820
and list items and you want to make that

00:26:05,880 --> 00:26:10,650
list navigable so you can use the arrows

00:26:08,820 --> 00:26:12,600
on your keyboard navigation it's going

00:26:10,650 --> 00:26:14,280
to handle the scroll and everything this

00:26:12,600 --> 00:26:18,059
has nothing to do with styles but the

00:26:14,280 --> 00:26:20,340
problem is that I need to know what's

00:26:18,059 --> 00:26:22,020
going to be the least element which is

00:26:20,340 --> 00:26:24,150
the one that is going to be decorated

00:26:22,020 --> 00:26:26,190
and also I need to know what are going

00:26:24,150 --> 00:26:28,350
to be the children and pass some

00:26:26,190 --> 00:26:30,600
properties to the children so I have to

00:26:28,350 --> 00:26:33,000
decorate a struct not not one single

00:26:30,600 --> 00:26:34,830
component but a structure and in that

00:26:33,000 --> 00:26:37,350
case I'm afraid it is not possible to

00:26:34,830 --> 00:26:39,750
use it but if you think that the render

00:26:37,350 --> 00:26:41,640
props pattern is applicable you should

00:26:39,750 --> 00:26:44,070
definitely go for that because it's way

00:26:41,640 --> 00:26:49,200
more explicit that composition using a

00:26:44,070 --> 00:26:55,520
higher-order components so it's a dumb

00:26:49,200 --> 00:26:57,210
shift by paper that does the thing I

00:26:55,520 --> 00:26:59,909
didn't hurt

00:26:57,210 --> 00:27:02,610
or the conference about downshift and it

00:26:59,909 --> 00:27:04,740
was mentioned to me during the last two

00:27:02,610 --> 00:27:06,000
days and I think it's gonna be very

00:27:04,740 --> 00:27:09,450
interesting but I couldn't check her out

00:27:06,000 --> 00:27:11,159
yet but I'm gonna definitely take a look

00:27:09,450 --> 00:27:14,730
into that because if it's pretty similar

00:27:11,159 --> 00:27:17,520
I mean I think that I can get something

00:27:14,730 --> 00:27:19,110
from there volleyball definitely so but

00:27:17,520 --> 00:27:21,980
sorry I have I have no opinion because I

00:27:19,110 --> 00:27:25,200
have to check it out like deeper yeah

00:27:21,980 --> 00:27:29,880
how this approach one will if you depend

00:27:25,200 --> 00:27:33,860
on Twitter bootstrap wolf does anybody

00:27:29,880 --> 00:27:33,860
depends on Twitter bootstrap anymore I

00:27:35,000 --> 00:27:41,279
don't know I think that this has nothing

00:27:38,490 --> 00:27:45,120
to them it you can you can use this when

00:27:41,279 --> 00:27:47,070
you want to ship to ship component that

00:27:45,120 --> 00:27:48,390
has to be very very customizable but it

00:27:47,070 --> 00:27:50,279
doesn't mean that you have to use it for

00:27:48,390 --> 00:27:52,740
your internal components for example I

00:27:50,279 --> 00:27:56,070
was mentioning before that CSS modules

00:27:52,740 --> 00:27:58,350
is a very very very nice approach when

00:27:56,070 --> 00:28:00,149
it comes to styling but it is okay if

00:27:58,350 --> 00:28:02,789
you have control of environment I am

00:28:00,149 --> 00:28:04,500
using I have some projects where I am

00:28:02,789 --> 00:28:04,860
using CSS modules and I am very happy

00:28:04,500 --> 00:28:06,480
with that

00:28:04,860 --> 00:28:09,899
but this is because I don't have to

00:28:06,480 --> 00:28:10,970
expose those components to be customized

00:28:09,899 --> 00:28:15,600
later

00:28:10,970 --> 00:28:17,190
so yeah I think that the that would work

00:28:15,600 --> 00:28:19,080
preferably because you are still using

00:28:17,190 --> 00:28:22,960
class names regarding that bootstrap

00:28:19,080 --> 00:28:27,640
question so that's all thank you

00:28:22,960 --> 00:28:27,640
[Applause]

00:28:32,000 --> 00:28:34,060

YouTube URL: https://www.youtube.com/watch?v=uFkyn9cFkO8


