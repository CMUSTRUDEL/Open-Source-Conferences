Title: ReactiveConf 2017: Lukas Fryc - Evolutionary Frontend Architectures with Angular
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Festival Friday

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:14,960 --> 00:00:22,760
thanks for coming this talk is about

00:00:19,210 --> 00:00:24,800
evolutionary architectures you may

00:00:22,760 --> 00:00:29,270
wonder what does it mean

00:00:24,800 --> 00:00:32,000
so I will explain in a in a bit

00:00:29,270 --> 00:00:35,079
this dog won't be actually specific to

00:00:32,000 --> 00:00:38,809
to anger I will I will touch such a

00:00:35,079 --> 00:00:41,570
surface a bit but it will be specific to

00:00:38,809 --> 00:00:44,210
to front and I create a architectures in

00:00:41,570 --> 00:00:50,300
general but some samples I will give you

00:00:44,210 --> 00:00:53,570
will be will be targeting angora so once

00:00:50,300 --> 00:00:57,890
again thanks for thanks for having me

00:00:53,570 --> 00:01:00,739
my name is Luca ostrich an elite front

00:00:57,890 --> 00:01:03,499
um engineer in an exponent

00:01:00,739 --> 00:01:05,659
which is a pretty solid based company I

00:01:03,499 --> 00:01:07,460
have more than 10 years experience in

00:01:05,659 --> 00:01:10,310
front an engineering which is my

00:01:07,460 --> 00:01:13,700
favorite I I love anger I love it from

00:01:10,310 --> 00:01:18,020
first versions and I must admit I even

00:01:13,700 --> 00:01:20,410
love no one and I love it even so that

00:01:18,020 --> 00:01:24,560
we have created a community called

00:01:20,410 --> 00:01:28,910
Bratislava angora so so I go I will

00:01:24,560 --> 00:01:31,700
later give you a link we are we are we

00:01:28,910 --> 00:01:37,970
are having some some workshop workshops

00:01:31,700 --> 00:01:39,920
meetups and so on so and that that

00:01:37,970 --> 00:01:42,620
person actually comes from my my

00:01:39,920 --> 00:01:45,350
previous work but I have I was working

00:01:42,620 --> 00:01:47,540
for open source communities in in a run

00:01:45,350 --> 00:01:53,420
hatsue there are some some projects you

00:01:47,540 --> 00:01:56,540
may or may not recognize but uh first

00:01:53,420 --> 00:01:59,440
let me let me start the water what I

00:01:56,540 --> 00:02:02,810
even mean by by evolutionary

00:01:59,440 --> 00:02:06,500
architecture and uh I would like to

00:02:02,810 --> 00:02:13,040
describe it on all our other and about

00:02:06,500 --> 00:02:15,410
our or my story I was thinking some time

00:02:13,040 --> 00:02:18,920
some time ago like it's several months

00:02:15,410 --> 00:02:20,959
and uh I was struggling whether our

00:02:18,920 --> 00:02:23,719
project is actually moving into into

00:02:20,959 --> 00:02:26,900
right direction theta is it something

00:02:23,719 --> 00:02:27,900
that's this common was who are

00:02:26,900 --> 00:02:31,409
struggling who was

00:02:27,900 --> 00:02:33,329
thinking about whether your project is

00:02:31,409 --> 00:02:36,480
is going into right direction

00:02:33,329 --> 00:02:41,400
yeah so some of you some of you it's a

00:02:36,480 --> 00:02:43,920
hard to admit but but I was I was

00:02:41,400 --> 00:02:46,470
thinking about it a lot and discussing

00:02:43,920 --> 00:02:48,840
with with other people not only on the

00:02:46,470 --> 00:02:54,349
front end but also on a backhand side or

00:02:48,840 --> 00:02:57,180
our system architects and you know

00:02:54,349 --> 00:03:00,930
exponent exponent at this point isn't

00:02:57,180 --> 00:03:06,840
isn't a small small project anymore

00:03:00,930 --> 00:03:11,370
it basically what exponent does we we

00:03:06,840 --> 00:03:15,090
drag drag data which we can analyze and

00:03:11,370 --> 00:03:17,250
then you can engage but it's not it's

00:03:15,090 --> 00:03:21,000
not that important important is that it

00:03:17,250 --> 00:03:25,349
already has like 60 62 different anger

00:03:21,000 --> 00:03:28,709
modules and so I would consider eight at

00:03:25,349 --> 00:03:32,519
this point a large large applications so

00:03:28,709 --> 00:03:35,280
it has 60 60 different features that you

00:03:32,519 --> 00:03:38,010
can you can open inside inside your

00:03:35,280 --> 00:03:40,680
application Anna

00:03:38,010 --> 00:03:45,569
so the question I was really struggling

00:03:40,680 --> 00:03:50,000
with was since exponent is like really

00:03:45,569 --> 00:03:52,680
fast growing company and everything

00:03:50,000 --> 00:03:56,879
everything is constantly changing we are

00:03:52,680 --> 00:04:00,629
we are releasing each week and in such a

00:03:56,879 --> 00:04:06,209
pace it may be really really problematic

00:04:00,629 --> 00:04:13,260
to to watch where your project is is

00:04:06,209 --> 00:04:14,760
going so another question maybe if you

00:04:13,260 --> 00:04:16,500
are not already struggling here it

00:04:14,760 --> 00:04:19,310
defines some architecture for your

00:04:16,500 --> 00:04:22,019
project you still you still may be

00:04:19,310 --> 00:04:24,979
wondering whether you are going into

00:04:22,019 --> 00:04:27,419
right direction in the in the long term

00:04:24,979 --> 00:04:32,729
your your architects for maybe actually

00:04:27,419 --> 00:04:35,880
decorating over over time and actually

00:04:32,729 --> 00:04:39,029
when discussing that that problem with

00:04:35,880 --> 00:04:40,530
people around I have noticed that it's

00:04:39,029 --> 00:04:44,190
actually very common

00:04:40,530 --> 00:04:47,310
very common problem and a a lot of

00:04:44,190 --> 00:04:51,570
people just told me that they they are

00:04:47,310 --> 00:04:52,320
fine with it and you know I'm kind of a

00:04:51,570 --> 00:04:55,560
perfectionist

00:04:52,320 --> 00:04:58,590
so I was I was thinking I really really

00:04:55,560 --> 00:04:59,040
it is that that way what can I do about

00:04:58,590 --> 00:05:05,220
it

00:04:59,040 --> 00:05:08,120
and I actually I actually found a very

00:05:05,220 --> 00:05:12,120
nice book which is called evolutionary

00:05:08,120 --> 00:05:16,530
architecture it's a it's a cooper

00:05:12,120 --> 00:05:19,320
accompanied with with a block in the

00:05:16,530 --> 00:05:23,730
same name or the under the same name the

00:05:19,320 --> 00:05:25,950
book is from Neil Neil Ford and Rebecca

00:05:23,730 --> 00:05:28,110
Rebecca Parsons do you know how did you

00:05:25,950 --> 00:05:32,780
recognize those those names the

00:05:28,110 --> 00:05:36,419
architects from our works so sound works

00:05:32,780 --> 00:05:43,530
so I really recommend you to read their

00:05:36,419 --> 00:05:46,860
their book later however what this what

00:05:43,530 --> 00:05:50,340
this book told me is that we actually

00:05:46,860 --> 00:05:54,180
did many things completely right and it

00:05:50,340 --> 00:05:58,200
actually it actually may help me to to

00:05:54,180 --> 00:06:03,030
confirm that the path we we we started

00:05:58,200 --> 00:06:05,340
is is exactly right right approach we we

00:06:03,030 --> 00:06:10,680
have we did some mistakes and so on but

00:06:05,340 --> 00:06:13,560
but still still we we are on a good path

00:06:10,680 --> 00:06:16,610
and and this book was a confirmation for

00:06:13,560 --> 00:06:21,090
me and that's why I would like to share

00:06:16,610 --> 00:06:28,380
my experiences with you basically what

00:06:21,090 --> 00:06:30,840
is what this book talks about is the the

00:06:28,380 --> 00:06:33,900
base of the architecture it doesn't

00:06:30,840 --> 00:06:35,820
focus specifically on front-end but if

00:06:33,900 --> 00:06:38,970
you if you think think about it a lot of

00:06:35,820 --> 00:06:41,330
architectures in our larger systems can

00:06:38,970 --> 00:06:43,580
be simply applied to front-end

00:06:41,330 --> 00:06:50,250
architectures

00:06:43,580 --> 00:06:51,780
generally one of the one of the common

00:06:50,250 --> 00:06:53,790
are architectures that you can see

00:06:51,780 --> 00:06:58,800
around this big ball of mud

00:06:53,790 --> 00:07:00,420
have you heard about the term yeah some

00:06:58,800 --> 00:07:03,750
of you perfect great

00:07:00,420 --> 00:07:05,550
and did you have do maintain some

00:07:03,750 --> 00:07:10,400
application that was built thought this

00:07:05,550 --> 00:07:13,680
way oh thank you thank you yeah I

00:07:10,400 --> 00:07:16,410
promote darted to these applications as

00:07:13,680 --> 00:07:18,540
well basically what is Graf says it's a

00:07:16,410 --> 00:07:21,090
dependent dependency graph where you

00:07:18,540 --> 00:07:23,250
have courses around the circle and there

00:07:21,090 --> 00:07:26,640
are connections are dependencies so you

00:07:23,250 --> 00:07:28,950
can see that this this application or

00:07:26,640 --> 00:07:30,840
maybe you really really unmeant able at

00:07:28,950 --> 00:07:32,220
some at some point usually it's

00:07:30,840 --> 00:07:35,430
connected with other programs so like

00:07:32,220 --> 00:07:37,830
like like of automatic testing and so on

00:07:35,430 --> 00:07:41,490
so that's probably architecture that you

00:07:37,830 --> 00:07:43,290
don't want to see so if you if you see

00:07:41,490 --> 00:07:44,490
that in your project maybe you should

00:07:43,290 --> 00:07:48,810
you should

00:07:44,490 --> 00:07:52,350
Ronna however if we get a little bit a

00:07:48,810 --> 00:07:54,870
little bit more structured than then we

00:07:52,350 --> 00:07:58,040
get monolith basically a big ball of

00:07:54,870 --> 00:08:01,830
Marty's monolith morally as well but

00:07:58,040 --> 00:08:06,630
here we can we can already see some some

00:08:01,830 --> 00:08:10,680
kinds of architecture if we look really

00:08:06,630 --> 00:08:13,890
really deep however what's more

00:08:10,680 --> 00:08:18,180
important for us is having monoliths

00:08:13,890 --> 00:08:20,790
that are internally structured and we

00:08:18,180 --> 00:08:24,840
can for example have modules for for

00:08:20,790 --> 00:08:27,330
each feature and and that's if you are

00:08:24,840 --> 00:08:29,400
using anger you get you get that for

00:08:27,330 --> 00:08:31,830
free because because angular angular

00:08:29,400 --> 00:08:33,090
module modules will give you exactly

00:08:31,830 --> 00:08:36,770
exactly

00:08:33,090 --> 00:08:40,229
this if you are using them them properly

00:08:36,770 --> 00:08:42,870
then we can recognize also other other

00:08:40,229 --> 00:08:46,920
kinds of architectures like layered

00:08:42,870 --> 00:08:49,140
architecture we can we can see basis of

00:08:46,920 --> 00:08:52,410
layered architecture in my in standard

00:08:49,140 --> 00:08:56,820
MVC MVC Model Model Model View

00:08:52,410 --> 00:08:59,730
controller and for completeness we can

00:08:56,820 --> 00:09:03,600
we can also see even based architectures

00:08:59,730 --> 00:09:06,690
around also see seen even a lot of

00:09:03,600 --> 00:09:07,200
front-end and something which I wouldn't

00:09:06,690 --> 00:09:10,680
probably

00:09:07,200 --> 00:09:12,720
for front-end actually I would you would

00:09:10,680 --> 00:09:15,660
consider microservice style architecture

00:09:12,720 --> 00:09:18,390
for front-end is there a we don't can

00:09:15,660 --> 00:09:21,360
you kidding the imaginers you'll really

00:09:18,390 --> 00:09:24,150
ah then can we talk later about it

00:09:21,360 --> 00:09:26,910
because well one of the one of the

00:09:24,150 --> 00:09:32,390
basics of micro-services is that you

00:09:26,910 --> 00:09:37,530
shouldn't you shouldn't share share the

00:09:32,390 --> 00:09:40,860
the pole the power code which for

00:09:37,530 --> 00:09:42,990
example visual basis of structure of

00:09:40,860 --> 00:09:47,160
your application some bait base layout

00:09:42,990 --> 00:09:49,680
it has to be sure so yeah I I can see

00:09:47,160 --> 00:09:53,640
that but maybe maybe that's possible and

00:09:49,680 --> 00:09:59,040
I would love that in in practice see

00:09:53,640 --> 00:10:01,530
that in practice however you are

00:09:59,040 --> 00:10:06,900
probably even you you're probably ever

00:10:01,530 --> 00:10:11,010
of those those architectures but what it

00:10:06,900 --> 00:10:16,130
is what is book turns leaf which is

00:10:11,010 --> 00:10:19,160
which was unique for me is architecture

00:10:16,130 --> 00:10:24,200
architecture properties the book lists

00:10:19,160 --> 00:10:27,660
around 50 50 properties and basically

00:10:24,200 --> 00:10:30,600
you would you would love them all to see

00:10:27,660 --> 00:10:32,960
in your project you would love to have

00:10:30,600 --> 00:10:35,610
have them all you know

00:10:32,960 --> 00:10:38,370
agility in your project flexibility

00:10:35,610 --> 00:10:40,880
reproducibility modularity don't

00:10:38,370 --> 00:10:44,160
figurative you you want them all and

00:10:40,880 --> 00:10:46,910
I've talked yesterday with my flight

00:10:44,160 --> 00:10:51,030
business colleague and he asked me and I

00:10:46,910 --> 00:10:54,240
don't have them all like III have told

00:10:51,030 --> 00:10:57,450
him just give me 200 people and we will

00:10:54,240 --> 00:10:59,910
have them all you know so what what any

00:10:57,450 --> 00:11:03,450
reasonable project should do is actually

00:10:59,910 --> 00:11:05,430
choose the ones that are important but

00:11:03,450 --> 00:11:08,610
not important for your project but

00:11:05,430 --> 00:11:10,680
important for your for your product for

00:11:08,610 --> 00:11:14,880
your business you're operating in some

00:11:10,680 --> 00:11:17,700
environment and you should choose the

00:11:14,880 --> 00:11:20,070
the right properties for your project

00:11:17,700 --> 00:11:25,350
that that are important at

00:11:20,070 --> 00:11:29,190
particular point in time you have to see

00:11:25,350 --> 00:11:30,870
that these properties are the importance

00:11:29,190 --> 00:11:34,560
of the properties may actually change

00:11:30,870 --> 00:11:38,550
over time so for example it it happen at

00:11:34,560 --> 00:11:41,040
in a in Expo Nia that we haven't we

00:11:38,550 --> 00:11:44,070
haven't cared about performance much we

00:11:41,040 --> 00:11:47,130
hadn't have performance problems but at

00:11:44,070 --> 00:11:50,070
some point people start to complain like

00:11:47,130 --> 00:11:52,230
you know I I wasn't sure what was

00:11:50,070 --> 00:11:54,480
happening because on my on my macbook

00:11:52,230 --> 00:11:57,840
pro it was loading like like three

00:11:54,480 --> 00:12:00,540
seconds what's up that's less dashboard

00:11:57,840 --> 00:12:03,060
type application it can be loading fee

00:12:00,540 --> 00:12:05,160
three seconds that's that's completely

00:12:03,060 --> 00:12:07,470
acceptable but then we then we measure

00:12:05,160 --> 00:12:10,860
it properly and we found that and that

00:12:07,470 --> 00:12:14,190
on a different device is it it separate

00:12:10,860 --> 00:12:15,630
a lot more pores so what we did we

00:12:14,190 --> 00:12:18,030
actually we actually elevated

00:12:15,630 --> 00:12:23,520
performance factor into into our

00:12:18,030 --> 00:12:25,710
properties and a we we we went on but

00:12:23,520 --> 00:12:27,600
okay we have we have architecture we

00:12:25,710 --> 00:12:31,650
have the properties of the of the

00:12:27,600 --> 00:12:36,390
architecture and their importance what

00:12:31,650 --> 00:12:39,630
is what is special about the book is the

00:12:36,390 --> 00:12:42,270
way how you should you should treat

00:12:39,630 --> 00:12:46,320
those properties those are some some

00:12:42,270 --> 00:12:49,590
abstract things that that you probably

00:12:46,320 --> 00:12:52,380
you probably think that your project is

00:12:49,590 --> 00:12:56,610
more modular it's the debuggable you

00:12:52,380 --> 00:12:59,010
know but what's unique about the book is

00:12:56,610 --> 00:13:01,770
it says that you should measure that all

00:12:59,010 --> 00:13:04,860
you should do data on data on a

00:13:01,770 --> 00:13:08,220
development you should basically ask

00:13:04,860 --> 00:13:11,150
yourself how fit is actually my my

00:13:08,220 --> 00:13:17,640
architecture at any any point in time

00:13:11,150 --> 00:13:20,790
and what what actually measures the the

00:13:17,640 --> 00:13:23,640
fitness of the architecture are Fitness

00:13:20,790 --> 00:13:28,760
functions Fitness functions we can

00:13:23,640 --> 00:13:33,120
recognize many many different kinds of

00:13:28,760 --> 00:13:38,329
measurements for example testability

00:13:33,120 --> 00:13:40,589
and coverage do you do basic do basic

00:13:38,329 --> 00:13:44,730
fitness functions you can you can

00:13:40,589 --> 00:13:48,300
recognize I believe nowadays is in every

00:13:44,730 --> 00:13:50,040
almost every project you you should you

00:13:48,300 --> 00:13:52,860
should set up some some metrics from

00:13:50,040 --> 00:13:55,410
from run time for example how many how

00:13:52,860 --> 00:13:57,829
many errors did vary release to

00:13:55,410 --> 00:14:00,870
production have you have you noticed

00:13:57,829 --> 00:14:05,249
what is our runtime performance what was

00:14:00,870 --> 00:14:09,089
initial long time and so on for example

00:14:05,249 --> 00:14:11,189
some some conventions can be like some

00:14:09,089 --> 00:14:14,189
conventions that are guarded typically

00:14:11,189 --> 00:14:18,629
by winters could be could be taken as a

00:14:14,189 --> 00:14:21,360
fitness function some static analyzes

00:14:18,629 --> 00:14:24,120
applies as well like dependencies

00:14:21,360 --> 00:14:26,879
between projects if if we have like

00:14:24,120 --> 00:14:33,360
exponent have something like modular

00:14:26,879 --> 00:14:35,879
modular or monolith and we are measuring

00:14:33,360 --> 00:14:38,429
it better there are sill code

00:14:35,879 --> 00:14:40,319
dependencies are normal that's fine

00:14:38,429 --> 00:14:43,759
however we have cross module

00:14:40,319 --> 00:14:47,459
dependencies we have dependencies or on

00:14:43,759 --> 00:14:49,889
for example our reporting sorry our

00:14:47,459 --> 00:14:52,829
dashboard module depends on a reporting

00:14:49,889 --> 00:14:54,629
module and on trends module one and so

00:14:52,829 --> 00:14:56,610
on so there are gross module

00:14:54,629 --> 00:14:59,429
dependencies and we can actually

00:14:56,610 --> 00:15:01,860
recognize they are problematic parts

00:14:59,429 --> 00:15:08,129
when a when it comes to to refactoring

00:15:01,860 --> 00:15:12,839
and moving the project forward so those

00:15:08,129 --> 00:15:16,110
are those are fitness functions and the

00:15:12,839 --> 00:15:18,899
idea is that when you have architecture

00:15:16,110 --> 00:15:23,009
and you can you can continue so measure

00:15:18,899 --> 00:15:27,149
how how fit it is you can actually

00:15:23,009 --> 00:15:29,519
change it because you you will you know

00:15:27,149 --> 00:15:32,339
every time know whether your project is

00:15:29,519 --> 00:15:35,189
still still fit even though you don't

00:15:32,339 --> 00:15:38,220
watch every change in the in the project

00:15:35,189 --> 00:15:40,050
you will be fine because you're only

00:15:38,220 --> 00:15:41,370
your checks of the architecture will be

00:15:40,050 --> 00:15:46,080
actually

00:15:41,370 --> 00:15:49,860
actually coded in some sort of either

00:15:46,080 --> 00:15:53,160
automatic or manual manual check so

00:15:49,860 --> 00:15:55,440
basically what what we should do we

00:15:53,160 --> 00:15:57,540
should do we should drink as much as

00:15:55,440 --> 00:16:02,640
data about architecture as possible and

00:15:57,540 --> 00:16:03,210
and then then automate them as much as

00:16:02,640 --> 00:16:06,150
possible

00:16:03,210 --> 00:16:08,790
so that's that's what we did

00:16:06,150 --> 00:16:10,920
for example exponent started one year

00:16:08,790 --> 00:16:14,339
ago refactoring

00:16:10,920 --> 00:16:18,990
from angular 1 to angular 2 right now

00:16:14,339 --> 00:16:22,589
you can see the blue the blue trend says

00:16:18,990 --> 00:16:27,600
that we are almost in 50% after a year

00:16:22,589 --> 00:16:30,210
you know my one of the stakeholders the

00:16:27,600 --> 00:16:32,250
founder of the company asked me how much

00:16:30,210 --> 00:16:35,130
it will take to refactor the application

00:16:32,250 --> 00:16:38,250
I said I don't know like three months

00:16:35,130 --> 00:16:40,890
one year four years so I think now we

00:16:38,250 --> 00:16:42,750
are on our target if if nothing happens

00:16:40,890 --> 00:16:46,589
we are on target to compete it in in

00:16:42,750 --> 00:16:49,830
another year which which was my mmm it

00:16:46,589 --> 00:16:53,220
wasn't my estimate actually at all

00:16:49,830 --> 00:16:58,020
I I don't like estimating these these

00:16:53,220 --> 00:17:00,510
projects but you can see that we did we

00:16:58,020 --> 00:17:03,180
did or we track in this regards to

00:17:00,510 --> 00:17:05,280
properties angular 1 to angular 2

00:17:03,180 --> 00:17:06,660
progress than JavaScript to typescript

00:17:05,280 --> 00:17:11,670
because the project was Oregon

00:17:06,660 --> 00:17:15,089
originally anger angularjs in in pure

00:17:11,670 --> 00:17:19,079
pure JavaScript so we were actually we

00:17:15,089 --> 00:17:21,420
were actually River I think like let's

00:17:19,079 --> 00:17:24,260
say we are not pushing for a 4e ride we

00:17:21,420 --> 00:17:28,170
are ever right as we go what has to go

00:17:24,260 --> 00:17:30,420
and be a rabbit on a original so if you

00:17:28,170 --> 00:17:33,440
if you look at it it's its particular

00:17:30,420 --> 00:17:36,660
problems because we we still we still go

00:17:33,440 --> 00:17:38,730
and after one year we will we will have

00:17:36,660 --> 00:17:40,470
angular to you and we don't have much

00:17:38,730 --> 00:17:42,510
problems with that we can discuss it

00:17:40,470 --> 00:17:45,240
later if you want you can you can catch

00:17:42,510 --> 00:17:47,220
me that's that's not my point however

00:17:45,240 --> 00:17:49,350
what you can see from the data is that

00:17:47,220 --> 00:17:53,429
JavaScript - typescript progress is

00:17:49,350 --> 00:17:55,140
similar to anger anger refactoring but

00:17:53,429 --> 00:18:00,870
at some point we decided to

00:17:55,140 --> 00:18:03,990
right or all services from angularjs and

00:18:00,870 --> 00:18:06,780
instead of instead of using the upgrade

00:18:03,990 --> 00:18:12,170
of the services we basically we easily

00:18:06,780 --> 00:18:12,170
switch them all to anger injectables and

00:18:13,940 --> 00:18:22,740
if you could if you think about it

00:18:16,920 --> 00:18:27,150
I find it kind kind of kind of hard task

00:18:22,740 --> 00:18:29,010
to do let me put a little power to the

00:18:27,150 --> 00:18:32,670
to the story let's let's say you have

00:18:29,010 --> 00:18:35,970
some gas gas powered car and you want to

00:18:32,670 --> 00:18:37,740
switch it to electric electric vehicle

00:18:35,970 --> 00:18:41,670
how would you do that

00:18:37,740 --> 00:18:45,420
you know let's consider the you are you

00:18:41,670 --> 00:18:49,170
are changing the car in a state 1 a1

00:18:45,420 --> 00:18:51,360
it's running on a highway so it's it's

00:18:49,170 --> 00:18:53,880
speeding on a highway and you are you

00:18:51,360 --> 00:18:56,220
can you can imagine that that you won't

00:18:53,880 --> 00:18:58,910
change wheels but let's imagine that you

00:18:56,220 --> 00:19:02,010
will change engine aim at that point

00:18:58,910 --> 00:19:04,410
yeah it's it's not that it's not that

00:19:02,010 --> 00:19:09,060
simple but in a software project it's a

00:19:04,410 --> 00:19:12,630
it's actually possible and what helps a

00:19:09,060 --> 00:19:17,210
lot is having having a tools that that

00:19:12,630 --> 00:19:22,560
actually guide you throughout the

00:19:17,210 --> 00:19:27,330
process one of the one of the tools that

00:19:22,560 --> 00:19:31,980
helps a team a lot from how from and the

00:19:27,330 --> 00:19:34,650
supports of my team members is static

00:19:31,980 --> 00:19:39,810
typing so I really encourage if you

00:19:34,650 --> 00:19:42,390
haven't if you are and into into static

00:19:39,810 --> 00:19:44,610
typing then then really consider that

00:19:42,390 --> 00:19:46,890
because working on a larger project

00:19:44,610 --> 00:19:51,240
without without a static typing it's

00:19:46,890 --> 00:19:54,270
it's really really nightmare and also

00:19:51,240 --> 00:19:58,350
tests between we even started with we

00:19:54,270 --> 00:20:01,170
built a happy path test for for at least

00:19:58,350 --> 00:20:04,530
half of the application just to make

00:20:01,170 --> 00:20:07,140
sure that that we can we can go go fast

00:20:04,530 --> 00:20:08,650
before there were no end-to-end tests so

00:20:07,140 --> 00:20:11,470
before we started we axe

00:20:08,650 --> 00:20:15,460
written we're done rate on these tests

00:20:11,470 --> 00:20:18,940
and I think fully I I was listening

00:20:15,460 --> 00:20:21,760
I also assuming yesterday for another

00:20:18,940 --> 00:20:24,310
another migration story and they had a

00:20:21,760 --> 00:20:28,270
pretty pretty similar experience from

00:20:24,310 --> 00:20:31,540
from I have seen but uh what uh what the

00:20:28,270 --> 00:20:35,290
book says I already told you but you

00:20:31,540 --> 00:20:38,560
should basically build all these Fitness

00:20:35,290 --> 00:20:41,080
functions and treat them as only other

00:20:38,560 --> 00:20:43,510
tests and already all the other parallel

00:20:41,080 --> 00:20:46,810
checks you should put them into your

00:20:43,510 --> 00:20:49,390
deployment pipeline so you can at any

00:20:46,810 --> 00:20:52,870
point you can see them you can drag them

00:20:49,390 --> 00:20:55,540
you can for example use a good lob that

00:20:52,870 --> 00:20:58,420
will that will upload the statics

00:20:55,540 --> 00:21:02,500
statistics to two sonar or some other

00:20:58,420 --> 00:21:05,200
some other tool that can that can track

00:21:02,500 --> 00:21:09,220
that so this is this is one simple a

00:21:05,200 --> 00:21:12,370
simple case or simple simple case that

00:21:09,220 --> 00:21:14,680
we that we use factoring from anger one

00:21:12,370 --> 00:21:17,260
to anger to but now we are considering

00:21:14,680 --> 00:21:20,980
adding more more and more fitness

00:21:17,260 --> 00:21:25,900
functions and we we actually we actually

00:21:20,980 --> 00:21:31,270
see that it encourages experimentation

00:21:25,900 --> 00:21:35,350
and another story since exponent is in

00:21:31,270 --> 00:21:40,260
in a hybrid mode now it uses anger 1 and

00:21:35,350 --> 00:21:44,650
angular 2 in so no harm a half way and

00:21:40,260 --> 00:21:47,080
this is a huge project and it will it

00:21:44,650 --> 00:21:51,420
will last for another year and uh I was

00:21:47,080 --> 00:21:55,300
a bit reluctant to to start another huge

00:21:51,420 --> 00:21:58,330
huge initiatives while we are on

00:21:55,300 --> 00:22:01,360
undergoing such a such a change however

00:21:58,330 --> 00:22:03,700
if you think about it you can you can do

00:22:01,360 --> 00:22:05,740
incremental changes and you can do them

00:22:03,700 --> 00:22:10,420
in bin parallel your project won't

00:22:05,740 --> 00:22:13,240
actually like me me as a programmer I

00:22:10,420 --> 00:22:18,420
would like the project to convert

00:22:13,240 --> 00:22:20,850
convert converge to some point where

00:22:18,420 --> 00:22:22,980
everything will be will

00:22:20,850 --> 00:22:28,200
same or everything will use similar

00:22:22,980 --> 00:22:32,190
concepts everything be will be under

00:22:28,200 --> 00:22:33,420
article conventions and it will be in a

00:22:32,190 --> 00:22:36,420
nice place to be

00:22:33,420 --> 00:22:39,210
however I have recognized that this this

00:22:36,420 --> 00:22:42,530
point probably will never never come you

00:22:39,210 --> 00:22:45,840
know I'm sure that at some point

00:22:42,530 --> 00:22:49,620
something more than anger welcome and

00:22:45,840 --> 00:22:52,350
maybe or some new breaking change in

00:22:49,620 --> 00:22:57,000
anger will welcome and we will start to

00:22:52,350 --> 00:23:00,110
leveraging that for for our good it it's

00:22:57,000 --> 00:23:04,170
perfectly it's perfectly imaginable now

00:23:00,110 --> 00:23:09,270
for example we are just introducing and

00:23:04,170 --> 00:23:12,120
grx to to to the application if you if

00:23:09,270 --> 00:23:14,820
you don't know what's ng ng rx it's

00:23:12,120 --> 00:23:19,020
basically the the Redux implementation

00:23:14,820 --> 00:23:22,590
for for angular which is leveraging

00:23:19,020 --> 00:23:26,820
leveraging our rxjs reactive streams as

00:23:22,590 --> 00:23:31,460
a base and it's perfect tool for for

00:23:26,820 --> 00:23:35,160
decoupling you can you can basically

00:23:31,460 --> 00:23:39,390
have several layers that that aren't

00:23:35,160 --> 00:23:43,220
aren't talking directly but they are

00:23:39,390 --> 00:23:45,570
talking we are message passing or

00:23:43,220 --> 00:23:49,800
actually passing you know in a case of

00:23:45,570 --> 00:23:52,890
ingr X so you can see that one of the

00:23:49,800 --> 00:23:55,410
problems that architectures have the two

00:23:52,890 --> 00:23:59,520
tight coupling are actually solved very

00:23:55,410 --> 00:24:01,880
nice in in ng rx and but how to

00:23:59,520 --> 00:24:09,150
introduce into into a large application

00:24:01,880 --> 00:24:12,440
such a such a change basically what I

00:24:09,150 --> 00:24:16,290
would recommend at at at that point is

00:24:12,440 --> 00:24:19,560
some some partial partial update like

00:24:16,290 --> 00:24:21,450
some experiment in the code base let's

00:24:19,560 --> 00:24:22,800
let's say that let's let's treat your

00:24:21,450 --> 00:24:26,480
module

00:24:22,800 --> 00:24:29,550
modular monolith like microservice and

00:24:26,480 --> 00:24:32,010
in my grocery in micro-services it's

00:24:29,550 --> 00:24:35,780
encouraged to experiment to rewrite

00:24:32,010 --> 00:24:37,560
whole micro surveys to another

00:24:35,780 --> 00:24:41,820
programming language to another

00:24:37,560 --> 00:24:44,610
framework to another library so we can

00:24:41,820 --> 00:24:46,800
do that in a in a modular or more light

00:24:44,610 --> 00:24:49,620
we can still do that even it's it's

00:24:46,800 --> 00:24:53,870
large application however we have to

00:24:49,620 --> 00:24:58,400
drag that we have to be sure that that

00:24:53,870 --> 00:25:02,760
we are we are not breaking any

00:24:58,400 --> 00:25:05,010
architecture architecture functional

00:25:02,760 --> 00:25:08,400
fitness functions that did we

00:25:05,010 --> 00:25:11,760
established before and while while we do

00:25:08,400 --> 00:25:18,180
that we are we are fine and for example

00:25:11,760 --> 00:25:21,210
what we are doing we are we are sorry we

00:25:18,180 --> 00:25:23,700
are accommodating one of the modules to

00:25:21,210 --> 00:25:25,470
to leverage and grx so we can see how it

00:25:23,700 --> 00:25:29,220
looked like before the refactoring and

00:25:25,470 --> 00:25:33,990
after after the refactoring so one of

00:25:29,220 --> 00:25:39,270
the fitness functions is we can actually

00:25:33,990 --> 00:25:42,300
measure how how good the ng rx is but we

00:25:39,270 --> 00:25:45,090
have feelings we have team of team of

00:25:42,300 --> 00:25:47,550
programmers and they can feel that they

00:25:45,090 --> 00:25:50,610
know how they feel about the changes in

00:25:47,550 --> 00:25:52,650
the in the code base so they can compare

00:25:50,610 --> 00:25:56,280
how it looked before how it looks now

00:25:52,650 --> 00:25:59,810
and if that works out at the end we will

00:25:56,280 --> 00:26:04,350
go with ng Rx and and I try to use it in

00:25:59,810 --> 00:26:08,100
many more many more modules so at first

00:26:04,350 --> 00:26:11,490
we apply partially to one module then

00:26:08,100 --> 00:26:13,620
our critical point comes where were you

00:26:11,490 --> 00:26:17,900
have to decide you have to decide

00:26:13,620 --> 00:26:21,810
whether you you will continue and then I

00:26:17,900 --> 00:26:25,320
think that's from a management point of

00:26:21,810 --> 00:26:30,810
view it's important to to take a

00:26:25,320 --> 00:26:33,540
decision and and basically decide with

00:26:30,810 --> 00:26:36,600
other stakeholders that you will go for

00:26:33,540 --> 00:26:41,040
all all or nothing it's a

00:26:36,600 --> 00:26:42,540
it's an important step because you

00:26:41,040 --> 00:26:46,110
remember that we are migrating from

00:26:42,540 --> 00:26:48,060
anger one to anger to you and uh what

00:26:46,110 --> 00:26:48,720
would happen if in the half of the

00:26:48,060 --> 00:26:53,010
project

00:26:48,720 --> 00:26:55,950
let's take holders told me you know we

00:26:53,010 --> 00:26:58,380
shouldn't be migrating okay but we are

00:26:55,950 --> 00:27:02,070
on the half of the base so to revive the

00:26:58,380 --> 00:27:07,650
changes so it's a one year one year away

00:27:02,070 --> 00:27:10,400
so that's that's perfectly perfectly ma

00:27:07,650 --> 00:27:13,140
imaginable so under these conditions

00:27:10,400 --> 00:27:16,230
after after using Fitness functions

00:27:13,140 --> 00:27:19,320
after after using incremental changes

00:27:16,230 --> 00:27:22,260
and and tracking them I'm finally I'm

00:27:19,320 --> 00:27:25,560
finally happy with where I architecture

00:27:22,260 --> 00:27:28,800
is doing and I don't know about about

00:27:25,560 --> 00:27:33,840
like large problems that we are we are

00:27:28,800 --> 00:27:35,790
seeing in terms of the of the India in

00:27:33,840 --> 00:27:38,160
the architecture so with that I would

00:27:35,790 --> 00:27:40,920
like to thank you for listening I hope

00:27:38,160 --> 00:27:43,200
it gave you great we gave you something

00:27:40,920 --> 00:27:47,420
and that you will be happy with your

00:27:43,200 --> 00:27:47,420
architecture thank you

00:27:53,520 --> 00:27:55,580

YouTube URL: https://www.youtube.com/watch?v=D2yUXG2oLuw


