Title: ReactiveConf 2017: Manfred Steyer - Through the Sound Barrier
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Festival Friday

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:09,180 --> 00:00:11,240
you

00:00:14,730 --> 00:00:20,530
so hello everybody and welcome to this

00:00:18,190 --> 00:00:22,960
talk it's about angular and performance

00:00:20,530 --> 00:00:27,010
tuning and first of all let me introduce

00:00:22,960 --> 00:00:30,610
myself I am manfred and I'm a train and

00:00:27,010 --> 00:00:32,950
consultant focusing on angular and I'm

00:00:30,610 --> 00:00:35,170
also part of the Google developer expert

00:00:32,950 --> 00:00:37,380
team that means that I have a direct

00:00:35,170 --> 00:00:40,600
connection to Google that I can ask

00:00:37,380 --> 00:00:43,329
questions and that I'm getting answers I

00:00:40,600 --> 00:00:46,060
have also written a book it's in German

00:00:43,329 --> 00:00:49,270
it's the book with the most ugly cover

00:00:46,060 --> 00:00:52,840
animal but anyway I'm very proud of it

00:00:49,270 --> 00:00:55,360
it's also about angular so I would

00:00:52,840 --> 00:01:02,140
suggest let's start with a picture who

00:00:55,360 --> 00:01:05,019
knows this machine it's a Intel 386 the

00:01:02,140 --> 00:01:07,150
hero of my childhood and the most

00:01:05,019 --> 00:01:09,369
awesome thing about this machine was

00:01:07,150 --> 00:01:11,710
this button here there was a turbo

00:01:09,369 --> 00:01:14,500
button when you pressed it's the machine

00:01:11,710 --> 00:01:17,860
was about twice as fast as before

00:01:14,500 --> 00:01:20,380
okay the original purpose of it was to

00:01:17,860 --> 00:01:23,320
make the machine slower by pressing it

00:01:20,380 --> 00:01:26,829
again to be more compatible with all the

00:01:23,320 --> 00:01:29,409
versions of the machine but anyway it

00:01:26,829 --> 00:01:31,270
was just a matter of pushing a button to

00:01:29,409 --> 00:01:33,729
make it faster and so the question

00:01:31,270 --> 00:01:36,850
arises is there something for angular

00:01:33,729 --> 00:01:39,310
and the answer is here there is there

00:01:36,850 --> 00:01:41,700
are some quick wins you can use with

00:01:39,310 --> 00:01:44,770
angular to get faster performance

00:01:41,700 --> 00:01:47,799
immediately and one of those quick wins

00:01:44,770 --> 00:01:50,999
is bundling putting all the JavaScript

00:01:47,799 --> 00:01:54,340
files into a tiny amount of files

00:01:50,999 --> 00:01:57,249
another quick finish minification to get

00:01:54,340 --> 00:02:00,009
rid of long names to get rid of commands

00:01:57,249 --> 00:02:03,759
to get rid of long variable names and

00:02:00,009 --> 00:02:05,439
white spaces and a third thing is the

00:02:03,759 --> 00:02:07,959
production mode of Angola

00:02:05,439 --> 00:02:10,990
you can put angular into production mode

00:02:07,959 --> 00:02:14,110
and then angular will be much faster of

00:02:10,990 --> 00:02:17,800
course the error messages won't be that

00:02:14,110 --> 00:02:20,590
nice but Angola will be faster and the

00:02:17,800 --> 00:02:23,049
good information about this is that the

00:02:20,590 --> 00:02:25,840
angle of syl.i is doing all this for you

00:02:23,049 --> 00:02:27,850
you just have to do a production build

00:02:25,840 --> 00:02:30,610
with the angular CLI on

00:02:27,850 --> 00:02:32,710
you get all these for free but in

00:02:30,610 --> 00:02:35,560
addition to debts there are also some

00:02:32,710 --> 00:02:38,080
things you can do in addition to that to

00:02:35,560 --> 00:02:40,990
make the angular application even faster

00:02:38,080 --> 00:02:44,110
and this is what this talk is about in

00:02:40,990 --> 00:02:46,090
this talk I will talk about lazy loading

00:02:44,110 --> 00:02:49,120
and reloading I will talk about

00:02:46,090 --> 00:02:51,460
performance boosting for data binding

00:02:49,120 --> 00:02:55,090
with on push and I will also talk about

00:02:51,460 --> 00:02:57,820
AUD ahead of time compilation and story

00:02:55,090 --> 00:03:01,150
shaking but first things first let's

00:02:57,820 --> 00:03:03,370
talk about lazy loading so by the way a

00:03:01,150 --> 00:03:05,620
good friend of mine told me that I am

00:03:03,370 --> 00:03:09,400
very authentic when I'm talking about

00:03:05,620 --> 00:03:11,500
lazy things I'm not sure what he meant

00:03:09,400 --> 00:03:14,650
but I think it was some kind of

00:03:11,500 --> 00:03:17,380
compliment doesn't matter so what you

00:03:14,650 --> 00:03:20,140
see here is the typical structure of an

00:03:17,380 --> 00:03:23,770
angular application the typically model

00:03:20,140 --> 00:03:26,860
structure contains app model it contains

00:03:23,770 --> 00:03:29,800
several feature models and it contains

00:03:26,860 --> 00:03:32,830
one or several shared model and as you

00:03:29,800 --> 00:03:35,940
see here the app module is also referred

00:03:32,830 --> 00:03:38,970
to as the routes model sometimes and

00:03:35,940 --> 00:03:41,560
normally everything is loaded at startup

00:03:38,970 --> 00:03:44,230
and of course that means that your

00:03:41,560 --> 00:03:46,900
startup performance is influenced in a

00:03:44,230 --> 00:03:49,630
paid way and it is exactly where lazy

00:03:46,900 --> 00:03:52,450
loading comes in cause beef lazy loading

00:03:49,630 --> 00:03:55,150
you just need to load one module when

00:03:52,450 --> 00:03:58,030
you start of course you can load several

00:03:55,150 --> 00:04:00,880
modules at start but it's minimum you

00:03:58,030 --> 00:04:03,640
can just go with one model and each

00:04:00,880 --> 00:04:06,250
other model is just loaded on demand

00:04:03,640 --> 00:04:09,730
when the user clicks your taya the other

00:04:06,250 --> 00:04:12,430
models are loaded via the network into

00:04:09,730 --> 00:04:14,920
the memory into the browser and of

00:04:12,430 --> 00:04:18,390
course this is influencing startup

00:04:14,920 --> 00:04:21,400
performance in a very very good way so

00:04:18,390 --> 00:04:24,100
what does it take to get started with

00:04:21,400 --> 00:04:26,440
lazy loading the answer here is get

00:04:24,100 --> 00:04:30,310
started with lazy loading is very easy

00:04:26,440 --> 00:04:32,380
it just takes one special route on

00:04:30,310 --> 00:04:35,530
special routes that is using load

00:04:32,380 --> 00:04:38,050
children as you see here one special

00:04:35,530 --> 00:04:41,180
route that is pointing to the model in

00:04:38,050 --> 00:04:43,009
question to the lazy model

00:04:41,180 --> 00:04:45,650
and for this you have to mention the

00:04:43,009 --> 00:04:48,889
name of the model in this very case the

00:04:45,650 --> 00:04:51,710
name of the model is flights - buckling

00:04:48,889 --> 00:04:55,400
point model and you have to mention the

00:04:51,710 --> 00:04:58,250
model class each model is represented by

00:04:55,400 --> 00:05:01,460
a class in angular and this class name

00:04:58,250 --> 00:05:03,560
has to be AB and that after hash in this

00:05:01,460 --> 00:05:08,479
case the class name is also flight

00:05:03,560 --> 00:05:11,060
booking model in Pascal case when you

00:05:08,479 --> 00:05:14,090
are triggering this route angular will

00:05:11,060 --> 00:05:16,490
start to lazy loads this model and then

00:05:14,090 --> 00:05:19,130
of course the question arises which

00:05:16,490 --> 00:05:22,880
routes is activated within this model

00:05:19,130 --> 00:05:25,970
and the answer is this lazy model can

00:05:22,880 --> 00:05:28,190
have an own routing configuration and of

00:05:25,970 --> 00:05:31,400
course this routing configuration can

00:05:28,190 --> 00:05:33,800
have a default route and this is the

00:05:31,400 --> 00:05:36,590
route without a path or let's say with

00:05:33,800 --> 00:05:40,759
an empty path like here and in this case

00:05:36,590 --> 00:05:44,419
this very route is activated so when our

00:05:40,759 --> 00:05:46,610
model is lazy loaded the flight booking

00:05:44,419 --> 00:05:50,090
component which you see here gets

00:05:46,610 --> 00:05:53,060
activated at the screen of course you

00:05:50,090 --> 00:05:55,669
can directly jump to a supper out within

00:05:53,060 --> 00:05:58,280
a lazy model for this you have to

00:05:55,669 --> 00:06:01,039
trigger their routes that is triggering

00:05:58,280 --> 00:06:02,930
lazy loading in my case the route has

00:06:01,039 --> 00:06:05,090
the name flight booking this is the

00:06:02,930 --> 00:06:07,669
route that is leveraging load children

00:06:05,090 --> 00:06:10,550
and then you have to advance the name of

00:06:07,669 --> 00:06:13,669
this abroad which is supporting this

00:06:10,550 --> 00:06:23,560
very case so let's have a look at an

00:06:13,669 --> 00:06:26,509
example for this here I have prepared a

00:06:23,560 --> 00:06:29,449
tiny sample application it's about

00:06:26,509 --> 00:06:32,030
booking flights and you can switch to

00:06:29,449 --> 00:06:34,190
flight booking flight booking is lazily

00:06:32,030 --> 00:06:37,159
loaded and there you can search for

00:06:34,190 --> 00:06:40,610
flight and also booked for flights then

00:06:37,159 --> 00:06:43,340
we have a look at the configuration we

00:06:40,610 --> 00:06:46,009
are seeing this lazy route here we are

00:06:43,340 --> 00:06:50,360
seeing that flight booking is triggering

00:06:46,009 --> 00:06:52,510
lazy loading of this model and then we

00:06:50,360 --> 00:06:56,200
look at the net

00:06:52,510 --> 00:06:58,540
except in our browser and when we reload

00:06:56,200 --> 00:07:01,600
the application then we see that

00:06:58,540 --> 00:07:04,990
everything is loaded everything but not

00:07:01,600 --> 00:07:08,110
our model our model that is has the name

00:07:04,990 --> 00:07:11,260
flight booking but then I'm clicking on

00:07:08,110 --> 00:07:17,560
flight booking then we see that this

00:07:11,260 --> 00:07:20,260
flight booking model is just loaded on

00:07:17,560 --> 00:07:22,750
demand so we see that here the flight

00:07:20,260 --> 00:07:26,170
booking model chunks and does the

00:07:22,750 --> 00:07:28,420
browser nice thing and of course this is

00:07:26,170 --> 00:07:31,540
influencing the startup time in a good

00:07:28,420 --> 00:07:36,550
way but it also comes with a drawback

00:07:31,540 --> 00:07:38,790
let's reload everything again and let's

00:07:36,550 --> 00:07:42,250
click on flight booking which is

00:07:38,790 --> 00:07:45,130
triggering lazy loading did you see this

00:07:42,250 --> 00:07:49,810
loading indicator let's do this one more

00:07:45,130 --> 00:07:51,970
time yeah there was this loading

00:07:49,810 --> 00:07:54,130
indicator and of course the loading

00:07:51,970 --> 00:07:56,530
indicator didn't show up for long a time

00:07:54,130 --> 00:08:01,030
because I'm testing with locally host

00:07:56,530 --> 00:08:04,750
and locally host is a very fast network

00:08:01,030 --> 00:08:07,570
connection but when you are going before

00:08:04,750 --> 00:08:09,400
eg fast free cheese low frizzy or

00:08:07,570 --> 00:08:13,060
something else this loading indicator

00:08:09,400 --> 00:08:13,570
would stay Capital m so what does this

00:08:13,060 --> 00:08:16,360
show

00:08:13,570 --> 00:08:20,290
this shows that lazy loading is just

00:08:16,360 --> 00:08:22,690
postponing burg it isn't making the work

00:08:20,290 --> 00:08:25,000
going away it just means that you have

00:08:22,690 --> 00:08:28,030
to do this work later and because of

00:08:25,000 --> 00:08:30,060
this this leads to a slightly delayed

00:08:28,030 --> 00:08:32,890
during the execution of the application

00:08:30,060 --> 00:08:36,910
when the user is kicking here or there

00:08:32,890 --> 00:08:44,260
and this is exactly where the next topic

00:08:36,910 --> 00:08:47,860
comes in and this next topic is pre

00:08:44,260 --> 00:08:50,710
loading so the idea of pre loading is

00:08:47,860 --> 00:08:53,380
pretty simple the idea of pre loading is

00:08:50,710 --> 00:08:56,620
that models that might be needed later

00:08:53,380 --> 00:08:59,230
are loaded after the application started

00:08:56,620 --> 00:09:02,170
so first of all the application starts

00:08:59,230 --> 00:09:05,260
that means that the users see something

00:09:02,170 --> 00:09:06,140
very quickly and after this after the

00:09:05,260 --> 00:09:09,020
use of salt

00:09:06,140 --> 00:09:11,260
first screen the application starts with

00:09:09,020 --> 00:09:14,830
lazy loading in the background and

00:09:11,260 --> 00:09:17,180
because of this the model is available

00:09:14,830 --> 00:09:20,750
immediately when we need it when the

00:09:17,180 --> 00:09:23,360
user clicks here or there what does it

00:09:20,750 --> 00:09:26,210
take to go with reloading we just need

00:09:23,360 --> 00:09:29,720
to register a pre loading strategy then

00:09:26,210 --> 00:09:31,970
we are setting up our main routes to set

00:09:29,720 --> 00:09:34,550
up the main routing table we are

00:09:31,970 --> 00:09:37,250
normally using for route route the

00:09:34,550 --> 00:09:39,560
module for route we are passing in our

00:09:37,250 --> 00:09:42,950
array with the routing configuration

00:09:39,560 --> 00:09:46,850
this array is called route configure and

00:09:42,950 --> 00:09:50,000
then we can pass in a parameter object

00:09:46,850 --> 00:09:53,000
and as part of this parameter object we

00:09:50,000 --> 00:09:56,300
can define for instance a pre loading

00:09:53,000 --> 00:09:59,120
strategy in this very case I am going

00:09:56,300 --> 00:10:01,460
with the pre load all modal strategy it

00:09:59,120 --> 00:10:03,860
is a baked in strategy

00:10:01,460 --> 00:10:06,860
it comes with angular and as the name

00:10:03,860 --> 00:10:09,880
implies it just pre loads all the lazy

00:10:06,860 --> 00:10:12,770
models after the application started of

00:10:09,880 --> 00:10:15,260
course you can also write your own pre

00:10:12,770 --> 00:10:17,360
loading strategies for instance pre

00:10:15,260 --> 00:10:19,580
loading strategies that are just pre

00:10:17,360 --> 00:10:22,520
loading things the current user is

00:10:19,580 --> 00:10:27,800
allowed to use or the current user will

00:10:22,520 --> 00:10:30,740
use more often than other things so I

00:10:27,800 --> 00:10:33,410
think it's quite easy to get started

00:10:30,740 --> 00:10:36,200
with this sense to use the best things

00:10:33,410 --> 00:10:40,400
of both worlds the best things of going

00:10:36,200 --> 00:10:42,590
with and without lazy loading so much

00:10:40,400 --> 00:10:45,560
for this let's switch to another topic

00:10:42,590 --> 00:10:47,840
that can improve your performance let's

00:10:45,560 --> 00:10:52,010
talk about performance tuning with on

00:10:47,840 --> 00:10:54,980
push and instead of talking about theory

00:10:52,010 --> 00:10:57,980
I will just jump into my example one

00:10:54,980 --> 00:11:03,440
more time and show you a motivation for

00:10:57,980 --> 00:11:05,980
ambush so as mentioned before within my

00:11:03,440 --> 00:11:09,410
example I can search for flights

00:11:05,980 --> 00:11:11,930
let's click at search and there is also

00:11:09,410 --> 00:11:14,300
this delay button which is delaying just

00:11:11,930 --> 00:11:16,520
the first flight not the other ones just

00:11:14,300 --> 00:11:17,330
the first one just have a look at the

00:11:16,520 --> 00:11:19,270
first flight

00:11:17,330 --> 00:11:22,470
you see 11

00:11:19,270 --> 00:11:26,670
57 here and after pressing delay it's

00:11:22,470 --> 00:11:30,400
12:12 Anton it's 12 27 and then it's

00:11:26,670 --> 00:11:33,610
12:42 I think this is what Lufthansa is

00:11:30,400 --> 00:11:36,070
doing all the time but when you are

00:11:33,610 --> 00:11:38,740
looking at a second and a third flight

00:11:36,070 --> 00:11:41,080
you are seeing that nothing changes when

00:11:38,740 --> 00:11:43,890
impressing delay for instance just have

00:11:41,080 --> 00:11:47,560
a look at the second flight there is

00:11:43,890 --> 00:11:52,000
1457 and then embracing delay it stays

00:11:47,560 --> 00:11:56,260
at 1357 so as mentioned just the first

00:11:52,000 --> 00:11:59,590
flight is delayed perhaps you've noticed

00:11:56,260 --> 00:12:02,470
the blinky effect here so this isn't a

00:11:59,590 --> 00:12:05,710
talk about animations I'm not the right

00:12:02,470 --> 00:12:08,320
guy for animations but in this case I

00:12:05,710 --> 00:12:12,100
want to visualize the change track of

00:12:08,320 --> 00:12:14,710
Angola I'm using a very dirty heck here

00:12:12,100 --> 00:12:18,220
to visualize the work of the change

00:12:14,710 --> 00:12:21,490
tracker every time Angola is checking a

00:12:18,220 --> 00:12:25,090
component for a change these components

00:12:21,490 --> 00:12:27,600
are blinking and here we see that even

00:12:25,090 --> 00:12:30,790
though just the first flight is delayed

00:12:27,600 --> 00:12:32,920
Angola checks all the flights this is

00:12:30,790 --> 00:12:36,510
the default behavior of Angola and

00:12:32,920 --> 00:12:39,940
normally this is done in a very fast way

00:12:36,510 --> 00:12:43,080
Angola is even generating code for this

00:12:39,940 --> 00:12:45,970
to make this procedure very very fast

00:12:43,080 --> 00:12:48,790
but sometimes this isn't fast enough

00:12:45,970 --> 00:12:53,320
especially when you are triggering

00:12:48,790 --> 00:12:55,810
events in a short time a lot of events

00:12:53,320 --> 00:12:58,240
in a very short time for instance by

00:12:55,810 --> 00:13:01,710
triggering a lot of mouse move or mouse

00:12:58,240 --> 00:13:05,650
over events then this could cause a

00:13:01,710 --> 00:13:10,930
performance impact and the solution for

00:13:05,650 --> 00:13:16,030
this is on push the on push optimization

00:13:10,930 --> 00:13:19,540
technique so when it comes to on push

00:13:16,030 --> 00:13:21,910
you can just tell Angola that it

00:13:19,540 --> 00:13:24,640
shouldn't check some components at all

00:13:21,910 --> 00:13:27,270
for instance you could tell Angola that

00:13:24,640 --> 00:13:30,640
it shouldn't check your flight cards or

00:13:27,270 --> 00:13:32,950
that it just should check it when it

00:13:30,640 --> 00:13:35,709
gets notified about a change

00:13:32,950 --> 00:13:38,740
so of course now the question is how can

00:13:35,709 --> 00:13:41,680
we notify Angola that just the first

00:13:38,740 --> 00:13:43,680
flight card has been changed and the

00:13:41,680 --> 00:13:47,350
answer is there are several

00:13:43,680 --> 00:13:50,110
possibilities for this first of all you

00:13:47,350 --> 00:13:52,839
could change bounced data that that is

00:13:50,110 --> 00:13:55,420
passed to the component by the means of

00:13:52,839 --> 00:13:59,170
a property binding by the means of an

00:13:55,420 --> 00:14:02,860
input binding but this isn't as easy as

00:13:59,170 --> 00:14:05,709
it seems because Angola is just checking

00:14:02,860 --> 00:14:08,860
whether the object reference has changed

00:14:05,709 --> 00:14:11,920
in on push mode Angola is just comparing

00:14:08,860 --> 00:14:14,680
the object references it is just doing a

00:14:11,920 --> 00:14:18,070
check like this here it checks whether

00:14:14,680 --> 00:14:20,829
the old object is the same object as the

00:14:18,070 --> 00:14:22,959
new object whether the form of light is

00:14:20,829 --> 00:14:26,620
the same flight as the current flight

00:14:22,959 --> 00:14:29,290
and when this holds true Angola assumes

00:14:26,620 --> 00:14:31,990
that nothing has changed if this isn't

00:14:29,290 --> 00:14:35,139
true Angola is looking at the component

00:14:31,990 --> 00:14:38,260
and Angola is trying to find out what

00:14:35,139 --> 00:14:40,600
changed within the component to put it

00:14:38,260 --> 00:14:44,050
in an other way this means you aren't

00:14:40,600 --> 00:14:46,630
allowed to just modify a property you

00:14:44,050 --> 00:14:49,269
aren't allowed to set the date property

00:14:46,630 --> 00:14:52,149
due to a new value you have to create a

00:14:49,269 --> 00:14:55,180
whole new flight object and you have to

00:14:52,149 --> 00:14:58,149
set the whole new flight object to the

00:14:55,180 --> 00:15:01,089
new time and to the other properties of

00:14:58,149 --> 00:15:04,000
the old flight object this is what they

00:15:01,089 --> 00:15:06,610
are calling immutables immutables are

00:15:04,000 --> 00:15:09,070
quite usual in the area of functional

00:15:06,610 --> 00:15:11,440
programming they aren't that usual in

00:15:09,070 --> 00:15:14,709
the area of object-oriented programming

00:15:11,440 --> 00:15:17,050
but nevertheless as mentioned here they

00:15:14,709 --> 00:15:19,959
can of course improve the performance

00:15:17,050 --> 00:15:23,920
because the framework just needs to

00:15:19,959 --> 00:15:27,069
check one object reference there are

00:15:23,920 --> 00:15:29,680
other possibilities for notifying Angola

00:15:27,069 --> 00:15:32,410
about changes for instance you can raise

00:15:29,680 --> 00:15:35,470
an event you can raise an event within

00:15:32,410 --> 00:15:38,380
the component in question and a special

00:15:35,470 --> 00:15:41,709
case of this is you can notify a pound--

00:15:38,380 --> 00:15:44,800
observable when you bind an observable

00:15:41,709 --> 00:15:46,460
to the template and when this observable

00:15:44,800 --> 00:15:49,220
comes up with a new value

00:15:46,460 --> 00:15:52,339
Angola we'll check this very component

00:15:49,220 --> 00:15:55,580
and of course you can trigger change

00:15:52,339 --> 00:15:59,240
detection manually but please don't try

00:15:55,580 --> 00:16:02,360
this at home it isn't a good idea to do

00:15:59,240 --> 00:16:04,430
it to do change detection manually in

00:16:02,360 --> 00:16:06,830
this case you are bypassing the

00:16:04,430 --> 00:16:10,010
framework and bypassing your main

00:16:06,830 --> 00:16:14,570
framework is a bad idea in most cases I

00:16:10,010 --> 00:16:19,310
would say try hard to avoid this perhaps

00:16:14,570 --> 00:16:21,830
there are some some events where you

00:16:19,310 --> 00:16:24,920
can't avoid this but I found out in

00:16:21,830 --> 00:16:28,130
general you can avoid this by leveraging

00:16:24,920 --> 00:16:33,440
one of the first free approaches here on

00:16:28,130 --> 00:16:35,649
this light two entities on push mode you

00:16:33,440 --> 00:16:39,050
just have to set this change detection

00:16:35,649 --> 00:16:41,690
strategy on on bush and as you see here

00:16:39,050 --> 00:16:44,930
you can do this on a component basis

00:16:41,690 --> 00:16:47,570
that means you don't have to use on bush

00:16:44,930 --> 00:16:50,810
with all components you can just decide

00:16:47,570 --> 00:16:53,209
which component needs more performance

00:16:50,810 --> 00:16:56,029
and then you can turn it on of course

00:16:53,209 --> 00:16:58,760
there are also people out there who are

00:16:56,029 --> 00:17:00,890
using on push all the time people who

00:16:58,760 --> 00:17:06,709
want to have the best performance all

00:17:00,890 --> 00:17:09,650
the time here I have a diagram that

00:17:06,709 --> 00:17:12,920
shows how on bush works when you are

00:17:09,650 --> 00:17:15,530
changing the inputs in this example I'm

00:17:12,920 --> 00:17:19,550
passing flights down to my flight cut

00:17:15,530 --> 00:17:22,490
and in this case when I'm using on Bush

00:17:19,550 --> 00:17:25,370
Angola just checks whether the object

00:17:22,490 --> 00:17:28,339
reference changed and when this is the

00:17:25,370 --> 00:17:31,130
case angola will have a closer look to

00:17:28,339 --> 00:17:33,800
the component in fashion if this isn't

00:17:31,130 --> 00:17:37,010
the case angola will just skip this

00:17:33,800 --> 00:17:40,520
component and all its sub components for

00:17:37,010 --> 00:17:44,059
change tracking here i have another

00:17:40,520 --> 00:17:47,179
example here i am using an observable it

00:17:44,059 --> 00:17:50,179
is called flight stola or flat stola and

00:17:47,179 --> 00:17:53,630
i'm binding this observable to a

00:17:50,179 --> 00:17:56,150
template using the async pipe and one

00:17:53,630 --> 00:17:58,669
more time in this case angular will

00:17:56,150 --> 00:17:59,650
trigger change detection then this

00:17:58,669 --> 00:18:04,059
observe

00:17:59,650 --> 00:18:08,159
comes up with a new value let's have a

00:18:04,059 --> 00:18:08,159
look at another demonstration for this

00:18:10,110 --> 00:18:16,210
here in this demonstration I will just

00:18:13,600 --> 00:18:19,090
leverage on Bush they could message

00:18:16,210 --> 00:18:22,600
about this is that my delay button is

00:18:19,090 --> 00:18:25,539
already creating new flights every time

00:18:22,600 --> 00:18:28,150
I'm pressing delay a new first flight is

00:18:25,539 --> 00:18:30,669
created and it gets all the data of the

00:18:28,150 --> 00:18:34,179
former first flight and then you date

00:18:30,669 --> 00:18:37,720
and because of this I can easily switch

00:18:34,179 --> 00:18:41,700
over to on push let me just do this for

00:18:37,720 --> 00:18:41,700
this I will put the microphone away

00:18:50,510 --> 00:18:56,540
okay as you sow here i'm just activated

00:18:53,900 --> 00:18:58,880
on bush for this very flight card

00:18:56,540 --> 00:19:02,990
component let's switch back to my

00:18:58,880 --> 00:19:05,360
example let's search for a flight let's

00:19:02,990 --> 00:19:08,990
delay my flight and hooray you see

00:19:05,360 --> 00:19:14,210
angola is just focusing on the one and

00:19:08,990 --> 00:19:17,360
only changed component and of course we

00:19:14,210 --> 00:19:21,350
all can imagine that this has a lot of

00:19:17,360 --> 00:19:24,650
potential for performance boosting okay

00:19:21,350 --> 00:19:27,470
so much for this let's switch to another

00:19:24,650 --> 00:19:31,030
topic about the performance tuning let's

00:19:27,470 --> 00:19:34,309
talk about aod ahead of time compilation

00:19:31,030 --> 00:19:37,309
perhaps you know it when you are going

00:19:34,309 --> 00:19:41,179
with angola your HTML templates are

00:19:37,309 --> 00:19:43,280
compiled to JavaScript code and this is

00:19:41,179 --> 00:19:47,059
because JavaScript codes can be

00:19:43,280 --> 00:19:51,020
evaluated more easily in a faster way

00:19:47,059 --> 00:19:54,950
compared to HTML code and in addition to

00:19:51,020 --> 00:19:59,120
that the engine your browser engine can

00:19:54,950 --> 00:20:02,900
optimize execution of JavaScript it is

00:19:59,120 --> 00:20:06,590
very good at optimizing execution of

00:20:02,900 --> 00:20:08,929
JavaScript code that must be executed

00:20:06,590 --> 00:20:12,020
several times and this is the case when

00:20:08,929 --> 00:20:14,000
it comes to evaluating templates this is

00:20:12,020 --> 00:20:16,669
done all the times when you are going

00:20:14,000 --> 00:20:19,880
with angular and for this compilation

00:20:16,669 --> 00:20:22,700
there are two approaches one approach is

00:20:19,880 --> 00:20:25,549
the just-in-time approach just in time

00:20:22,700 --> 00:20:28,250
means that compilation takes happen at

00:20:25,549 --> 00:20:31,790
runtime when the application starts and

00:20:28,250 --> 00:20:34,520
one more time this leads to a bad start

00:20:31,790 --> 00:20:36,860
performance and there is another

00:20:34,520 --> 00:20:40,400
approach approach that will be the

00:20:36,860 --> 00:20:43,070
default approach with angular 5 at least

00:20:40,400 --> 00:20:47,330
there are plans for this it is called

00:20:43,070 --> 00:20:50,210
äôt ahead of time that means that we are

00:20:47,330 --> 00:20:53,299
compiling the templates during the build

00:20:50,210 --> 00:20:56,150
process and there are some other

00:20:53,299 --> 00:20:58,820
advantages of aot of course the first

00:20:56,150 --> 00:21:01,130
advantage is very obvious the first

00:20:58,820 --> 00:21:04,310
advantage is we get a better startup

00:21:01,130 --> 00:21:06,890
performance because angular does

00:21:04,310 --> 00:21:09,620
Knots needs to do compilation during the

00:21:06,890 --> 00:21:13,990
startup phase but in addition to that

00:21:09,620 --> 00:21:18,110
there are also some not tis those

00:21:13,990 --> 00:21:21,170
obvious advantages for instance and none

00:21:18,110 --> 00:21:23,870
of use advantages that we end up with

00:21:21,170 --> 00:21:27,020
smaller bundles the reason for this is

00:21:23,870 --> 00:21:29,480
we don't need to include the compiler in

00:21:27,020 --> 00:21:32,030
our bundles we don't need the compiler

00:21:29,480 --> 00:21:35,320
at runtime at all so we can skip the

00:21:32,030 --> 00:21:38,690
compiler we just need it at Build time

00:21:35,320 --> 00:21:41,590
another advantage of this is that tools

00:21:38,690 --> 00:21:44,230
can easier analyze the source code

00:21:41,590 --> 00:21:47,420
because everything consists out of

00:21:44,230 --> 00:21:50,780
JavaScript and because of this their

00:21:47,420 --> 00:21:53,600
tools we are using can analyze the

00:21:50,780 --> 00:21:56,630
JavaScript codes the whole code and try

00:21:53,600 --> 00:21:59,750
to find out which parts of frameworks

00:21:56,630 --> 00:22:02,450
aren't needed and I'm sure when you are

00:21:59,750 --> 00:22:05,240
using libraries or frameworks you are

00:22:02,450 --> 00:22:08,210
never using all the parts of them you

00:22:05,240 --> 00:22:10,940
are just using some specific parts of

00:22:08,210 --> 00:22:14,090
them and leveraging a technique called

00:22:10,940 --> 00:22:16,790
tree shaking we can hunt down those

00:22:14,090 --> 00:22:19,700
unneeded parts and just remove those

00:22:16,790 --> 00:22:23,630
parts of angular or of out of RAM works

00:22:19,700 --> 00:22:27,290
from our bundles tree shaking is a nice

00:22:23,630 --> 00:22:31,460
metaphor just shaking the tree to make

00:22:27,290 --> 00:22:33,980
all the loose branches fall down then

00:22:31,460 --> 00:22:37,090
I've talked about this about a year ago

00:22:33,980 --> 00:22:40,160
then I showed the audience how to

00:22:37,090 --> 00:22:42,650
configure the angular compiler how to

00:22:40,160 --> 00:22:45,470
set up the angular compiler and how to

00:22:42,650 --> 00:22:48,920
make it work with your bundling and tree

00:22:45,470 --> 00:22:51,980
shaking solutions nowadays we can just

00:22:48,920 --> 00:22:54,380
leverage two angular CLI we can trust to

00:22:51,980 --> 00:22:58,250
an production built with angular and

00:22:54,380 --> 00:23:01,730
when we are doing so we just get ahead

00:22:58,250 --> 00:23:05,960
of time compilation we also get tree

00:23:01,730 --> 00:23:08,780
shaking behind the scenes the angle of

00:23:05,960 --> 00:23:11,750
SIL I is using this plugin here it is

00:23:08,780 --> 00:23:14,930
called the AOD plugin and it's located

00:23:11,750 --> 00:23:17,929
within the ng tools backpack package as

00:23:14,930 --> 00:23:20,720
the name implies this is a

00:23:17,929 --> 00:23:23,929
in for a backpack and the good message

00:23:20,720 --> 00:23:26,570
is you can use it even without the CLI

00:23:23,929 --> 00:23:30,100
when you have a direct backpack

00:23:26,570 --> 00:23:33,200
configuration you can use it with it

00:23:30,100 --> 00:23:37,309
soon we will get a new plugin for this

00:23:33,200 --> 00:23:39,799
purpose it is planned for angular 5 I've

00:23:37,309 --> 00:23:43,249
seen the release notes today in the

00:23:39,799 --> 00:23:46,460
morning it seems like it will really get

00:23:43,249 --> 00:23:48,950
into angular 5 and it's called to angle

00:23:46,460 --> 00:23:51,169
a compiler plug-in you don't have to

00:23:48,950 --> 00:23:53,869
worry about this when you are using the

00:23:51,169 --> 00:23:57,259
CLI when you are using backpack then you

00:23:53,869 --> 00:24:00,889
can just use it one minute left no

00:23:57,259 --> 00:24:05,539
add-ons believe this okay so I have to

00:24:00,889 --> 00:24:08,200
speed up so this can be used with the

00:24:05,539 --> 00:24:10,909
seal I do so let me give you just one

00:24:08,200 --> 00:24:15,019
demonstration and then we are finished

00:24:10,909 --> 00:24:18,440
in this last demonstration I've prepared

00:24:15,019 --> 00:24:23,240
two pills of my application the first

00:24:18,440 --> 00:24:26,929
build is a production build a production

00:24:23,240 --> 00:24:30,429
build that isn't leveraging a OD let me

00:24:26,929 --> 00:24:30,429
just start this production build

00:24:41,980 --> 00:24:47,760
and when we now switch to the

00:24:44,440 --> 00:24:50,590
performance step of our browser then we

00:24:47,760 --> 00:24:58,360
clear the cache and then we reload

00:24:50,590 --> 00:25:02,950
everything then we see that the start up

00:24:58,360 --> 00:25:05,860
time was about 1.5 seconds so when you

00:25:02,950 --> 00:25:08,290
repeat this with an AUD built just to

00:25:05,860 --> 00:25:13,540
save some time I have prepared this on a

00:25:08,290 --> 00:25:15,790
slide we end up with about a half and I

00:25:13,540 --> 00:25:19,150
think that shows the potential of a ot

00:25:15,790 --> 00:25:21,880
that shows that a ot can really cut your

00:25:19,150 --> 00:25:26,110
starts performance or your start time to

00:25:21,880 --> 00:25:29,320
the half ok so much for this let me just

00:25:26,110 --> 00:25:31,840
make a conclusion as we are running out

00:25:29,320 --> 00:25:33,610
of time as we have seen at the start of

00:25:31,840 --> 00:25:36,190
the presentation there are some quick

00:25:33,610 --> 00:25:38,559
wins you can leverage bundling

00:25:36,190 --> 00:25:41,169
minification and the production mode and

00:25:38,559 --> 00:25:43,750
the good message is the seal I'd asked

00:25:41,169 --> 00:25:46,000
is for you in addition to that we have

00:25:43,750 --> 00:25:47,950
seen that you can improve the startup

00:25:46,000 --> 00:25:50,679
performance with lazy loading and

00:25:47,950 --> 00:25:53,140
reloading we have also seen that there

00:25:50,679 --> 00:25:55,540
is something like on push you can use to

00:25:53,140 --> 00:25:58,690
improve your data binding performance

00:25:55,540 --> 00:26:01,960
and you have seen in my last

00:25:58,690 --> 00:26:04,690
demonstration that we can leverage a OD

00:26:01,960 --> 00:26:08,919
and three shaking to shrink our bundles

00:26:04,690 --> 00:26:13,380
and to make the startup performance much

00:26:08,919 --> 00:26:16,150
better to cut it in the half to the half

00:26:13,380 --> 00:26:18,309
okay today I have also a workshop about

00:26:16,150 --> 00:26:21,010
this perhaps we are meeting at this

00:26:18,309 --> 00:26:23,710
workshop it's about at 1:00 p.m.

00:26:21,010 --> 00:26:26,380
and here I have my contact data you find

00:26:23,710 --> 00:26:28,690
all my material and slides and you can

00:26:26,380 --> 00:26:31,360
also write me an email then you have a

00:26:28,690 --> 00:26:34,320
question so thank you for this and have

00:26:31,360 --> 00:26:34,320
a good time at the conference

00:26:41,710 --> 00:26:43,770

YouTube URL: https://www.youtube.com/watch?v=SJGco_bOriw


