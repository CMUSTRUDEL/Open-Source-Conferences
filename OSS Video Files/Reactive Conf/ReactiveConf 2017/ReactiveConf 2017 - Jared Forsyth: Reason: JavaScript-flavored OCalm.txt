Title: ReactiveConf 2017 - Jared Forsyth: Reason: JavaScript-flavored OCalm
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,020 --> 00:00:08,639
[Music]

00:00:14,599 --> 00:00:20,599
so I'm Jarrod I work for Khan Academy

00:00:17,570 --> 00:00:22,640
which is an online education nonprofit

00:00:20,599 --> 00:00:24,140
and we're working to build a free

00:00:22,640 --> 00:00:24,919
world-class education for anyone

00:00:24,140 --> 00:00:27,919
anywhere

00:00:24,919 --> 00:00:30,710
I do mobile and react native and web

00:00:27,919 --> 00:00:33,410
development if you want to follow along

00:00:30,710 --> 00:00:35,989
these slides this URL at the bottom is a

00:00:33,410 --> 00:00:40,670
copy of them and I'm at Jared Forsyth on

00:00:35,989 --> 00:00:43,010
Twitter so reason I call it JavaScript

00:00:40,670 --> 00:00:44,960
flavor - Oh camel because it's it's a

00:00:43,010 --> 00:00:48,469
layer on top of oak camel which is this

00:00:44,960 --> 00:00:50,300
powerful well typed very strong and

00:00:48,469 --> 00:00:52,100
secure language it's been around for 20

00:00:50,300 --> 00:00:55,850
years but it's been kind of a small

00:00:52,100 --> 00:01:00,859
community it has a lot of inputs from

00:00:55,850 --> 00:01:02,719
academia and and less emphasis on kind

00:01:00,859 --> 00:01:04,580
of being accessible to the broader

00:01:02,719 --> 00:01:06,500
community so we're we're trying to bring

00:01:04,580 --> 00:01:10,460
it out and make it accessible for all of

00:01:06,500 --> 00:01:16,729
you to get in on this goodness so to

00:01:10,460 --> 00:01:18,830
start out why reason now the the quote

00:01:16,729 --> 00:01:21,470
that I like to fall back on is that we

00:01:18,830 --> 00:01:23,810
want to we want people to be able to use

00:01:21,470 --> 00:01:26,210
this awesome language at work and not

00:01:23,810 --> 00:01:27,770
just in their free time a lot of times

00:01:26,210 --> 00:01:29,810
you know where we're at work we're

00:01:27,770 --> 00:01:31,729
JavaScript developers we were getting

00:01:29,810 --> 00:01:32,990
bogged down and it's like oh I know what

00:01:31,729 --> 00:01:35,119
I'm gonna do tonight I'm gonna break out

00:01:32,990 --> 00:01:37,670
Elm like I'm gonna I'm gonna relax I'm

00:01:35,119 --> 00:01:42,259
gonna get some like really nice typed

00:01:37,670 --> 00:01:43,790
code but then you oftentimes you can't

00:01:42,259 --> 00:01:45,530
bring it to work and it work you're

00:01:43,790 --> 00:01:47,810
you're bogged down so that the goal of

00:01:45,530 --> 00:01:50,540
this is to make it so that everybody can

00:01:47,810 --> 00:01:52,159
can use this at their day job and in

00:01:50,540 --> 00:01:54,790
order to deliver on that I'm gonna focus

00:01:52,159 --> 00:01:57,590
on two things adoption and maintenance

00:01:54,790 --> 00:02:01,159
so in other words make it easy to get

00:01:57,590 --> 00:02:03,259
started and easy to keep going now these

00:02:01,159 --> 00:02:07,479
two things can sometimes be in conflict

00:02:03,259 --> 00:02:10,070
actually with with JavaScript we know it

00:02:07,479 --> 00:02:12,500
it's really easy to get started you know

00:02:10,070 --> 00:02:15,470
you just open the console and start

00:02:12,500 --> 00:02:16,850
banging away but then in in our jobs if

00:02:15,470 --> 00:02:18,140
you're working on a large code base if

00:02:16,850 --> 00:02:20,900
you're working with a lot of people it

00:02:18,140 --> 00:02:22,250
can get much harder to maintain much

00:02:20,900 --> 00:02:25,820
harder to develop than some of these

00:02:22,250 --> 00:02:28,370
other languages and several years ago I

00:02:25,820 --> 00:02:30,709
was working on a large

00:02:28,370 --> 00:02:32,720
application written in angular when I

00:02:30,709 --> 00:02:34,459
started out with angular I was really

00:02:32,720 --> 00:02:36,680
excited about it because it was so easy

00:02:34,459 --> 00:02:38,330
to start right you've got your HTML page

00:02:36,680 --> 00:02:41,480
and maybe you're doing jQuery or you're

00:02:38,330 --> 00:02:42,860
doing backbone at the time and suddenly

00:02:41,480 --> 00:02:44,870
you put in a script tag you add an

00:02:42,860 --> 00:02:46,370
attribute to your Dom element and you're

00:02:44,870 --> 00:02:48,950
off and running like you can get a form

00:02:46,370 --> 00:02:51,230
going in like 45 seconds and that was

00:02:48,950 --> 00:02:53,870
really cool so much easier than the

00:02:51,230 --> 00:02:55,910
current state of the art but then as I

00:02:53,870 --> 00:02:58,129
said I was working on this large angular

00:02:55,910 --> 00:02:58,610
application many thousands of lines of

00:02:58,129 --> 00:03:01,819
code

00:02:58,610 --> 00:03:03,920
many other developers and it actually

00:03:01,819 --> 00:03:05,510
really bogged me down I was getting

00:03:03,920 --> 00:03:07,040
really down about it because any time I

00:03:05,510 --> 00:03:08,269
wanted to add a feature anytime I wanted

00:03:07,040 --> 00:03:11,360
to

00:03:08,269 --> 00:03:12,799
fix a bug I would I would go into the

00:03:11,360 --> 00:03:15,110
code base and it's like okay so here's

00:03:12,799 --> 00:03:17,239
here's the bug here's where the problem

00:03:15,110 --> 00:03:18,799
is and then I have to read through like

00:03:17,239 --> 00:03:21,349
several thousand lines of code to make

00:03:18,799 --> 00:03:23,720
sure that nobody else was mutating this

00:03:21,349 --> 00:03:25,340
data like because the the way that the

00:03:23,720 --> 00:03:27,920
code had grown it angular didn't provide

00:03:25,340 --> 00:03:32,180
the structure to make it maintainable in

00:03:27,920 --> 00:03:34,609
the long run and as I was saying

00:03:32,180 --> 00:03:37,880
JavaScript started out so easy to

00:03:34,609 --> 00:03:40,760
develop but then over the past couple of

00:03:37,880 --> 00:03:46,480
years Java scripts gotten a little bit

00:03:40,760 --> 00:03:50,359
more difficult I love this quote so

00:03:46,480 --> 00:03:52,340
somehow we we went from you write some

00:03:50,359 --> 00:03:55,910
JavaScript in the console you drop it in

00:03:52,340 --> 00:03:58,040
index KS put the script tag in your HTML

00:03:55,910 --> 00:04:00,410
and you're off and running but these

00:03:58,040 --> 00:04:03,590
days you know you you install node you

00:04:00,410 --> 00:04:07,099
configure Babel you install react web

00:04:03,590 --> 00:04:09,079
pack all of these things together to

00:04:07,099 --> 00:04:11,389
finally get your app into production and

00:04:09,079 --> 00:04:13,609
these changes weren't made so that it

00:04:11,389 --> 00:04:15,109
would be easier to start clearly they

00:04:13,609 --> 00:04:16,430
were made because people writing large

00:04:15,109 --> 00:04:17,930
web apps in production they're like

00:04:16,430 --> 00:04:20,030
actually this is really hard to maintain

00:04:17,930 --> 00:04:22,220
let's add some tools let's add some

00:04:20,030 --> 00:04:24,260
configuration let's add some things so

00:04:22,220 --> 00:04:26,479
that we can so the maintenance gets

00:04:24,260 --> 00:04:30,770
easier but along the way we've we kind

00:04:26,479 --> 00:04:32,900
of really made add optional order and so

00:04:30,770 --> 00:04:34,820
we get JavaScript fatigue and so to

00:04:32,900 --> 00:04:36,020
combat that there was create react app

00:04:34,820 --> 00:04:38,090
there were various boiler plates that

00:04:36,020 --> 00:04:40,750
sprang up and so it's always kind of a

00:04:38,090 --> 00:04:41,810
fine line you're trying to balance on

00:04:40,750 --> 00:04:44,930
but

00:04:41,810 --> 00:04:46,850
Queen adoption and maintenance and I

00:04:44,930 --> 00:04:48,050
like I like visual things so here's I

00:04:46,850 --> 00:04:49,970
kind of tried to put a bunch of

00:04:48,050 --> 00:04:52,280
languages up on a chart now this

00:04:49,970 --> 00:04:55,550
disclaimer this is all fake I made this

00:04:52,280 --> 00:04:56,870
up I I gave this talk a couple days ago

00:04:55,550 --> 00:04:59,900
and people got mad that their favorite

00:04:56,870 --> 00:05:01,760
language wasn't on there but we have

00:04:59,900 --> 00:05:04,880
JavaScript in the bottom right corner so

00:05:01,760 --> 00:05:06,290
very easy to adopt and I'm gonna call

00:05:04,880 --> 00:05:08,510
that the baseline of ease of maintenance

00:05:06,290 --> 00:05:10,550
right it's it's easier to maintain that

00:05:08,510 --> 00:05:14,090
assembly yes but that's not we're

00:05:10,550 --> 00:05:16,010
talking about es6 kind of with with all

00:05:14,090 --> 00:05:18,110
the features that we added with let and

00:05:16,010 --> 00:05:20,300
constant arrow functions it made it

00:05:18,110 --> 00:05:21,770
harder to get started but it made it

00:05:20,300 --> 00:05:24,500
easier to work on large projects and

00:05:21,770 --> 00:05:25,880
then if you add flow or typescript yet

00:05:24,500 --> 00:05:27,440
again the the barrier to entry is a

00:05:25,880 --> 00:05:28,820
little bit higher but then you can have

00:05:27,440 --> 00:05:32,000
more confidence in your code in the wild

00:05:28,820 --> 00:05:34,669
and then Haskell and Oh camel are kind

00:05:32,000 --> 00:05:36,680
of up here on the like really powerful

00:05:34,669 --> 00:05:39,380
give you a lot of security and structure

00:05:36,680 --> 00:05:42,470
and incredibly powerful tools sometimes

00:05:39,380 --> 00:05:45,290
to maintain your code but learning it is

00:05:42,470 --> 00:05:47,479
really really hard I'm getting into that

00:05:45,290 --> 00:05:50,180
especially for you if you're coming from

00:05:47,479 --> 00:05:53,090
JavaScript from Java from Python any of

00:05:50,180 --> 00:05:55,130
these the documentation is not there the

00:05:53,090 --> 00:05:58,280
tooling is really hard to set up in many

00:05:55,130 --> 00:06:00,740
cases and so elm has kind of taken Hass

00:05:58,280 --> 00:06:02,630
Haskell and said let's let's make this

00:06:00,740 --> 00:06:05,169
easier to adopt let's cut down the

00:06:02,630 --> 00:06:07,669
feature set a little bit actually and in

00:06:05,169 --> 00:06:09,560
in the meantime making it easier to

00:06:07,669 --> 00:06:12,889
maintain as well so alum is like we will

00:06:09,560 --> 00:06:15,320
focus very specifically on building web

00:06:12,889 --> 00:06:17,510
UIs we're gonna make the best possible

00:06:15,320 --> 00:06:20,090
experience easy so much easier to adopt

00:06:17,510 --> 00:06:22,220
then then the current well-typed

00:06:20,090 --> 00:06:24,110
languages and also easy to maintain in

00:06:22,220 --> 00:06:26,330
the long run and then reason is coming

00:06:24,110 --> 00:06:29,389
from the other direction where we we

00:06:26,330 --> 00:06:32,330
want to push maximum on adoption make it

00:06:29,389 --> 00:06:34,850
as easy as possible to come to reason

00:06:32,330 --> 00:06:36,560
with your existing JavaScript code base

00:06:34,850 --> 00:06:38,810
and then we compromise on

00:06:36,560 --> 00:06:40,340
maintainability a little bit more alum

00:06:38,810 --> 00:06:43,240
for example doesn't have runtime

00:06:40,340 --> 00:06:46,970
exceptions as part of the language we do

00:06:43,240 --> 00:06:48,320
too and it it merges better with

00:06:46,970 --> 00:06:50,090
JavaScript from that perspective but

00:06:48,320 --> 00:06:51,950
then you know suddenly there's more

00:06:50,090 --> 00:06:53,850
stuff to think about when you're

00:06:51,950 --> 00:06:57,150
maintaining

00:06:53,850 --> 00:06:59,940
so the things that we're doing to ease

00:06:57,150 --> 00:07:01,170
adoption I'm gonna talk about syntax I'm

00:06:59,940 --> 00:07:04,170
gonna talk about tools I'm gonna talk

00:07:01,170 --> 00:07:06,300
about JavaScript Interop syntax is

00:07:04,170 --> 00:07:08,970
actually really funny because everybody

00:07:06,300 --> 00:07:12,990
has an opinion about you know my syntax

00:07:08,970 --> 00:07:13,890
is best pretty much and over the past

00:07:12,990 --> 00:07:16,980
couple of months we've been making some

00:07:13,890 --> 00:07:21,240
changes to the reason syntax moving it

00:07:16,980 --> 00:07:23,970
away from the ML style Elm Haskell Oh

00:07:21,240 --> 00:07:26,190
camel and moving up more towards C style

00:07:23,970 --> 00:07:27,900
so JavaScript Java that kind of thing

00:07:26,190 --> 00:07:30,750
and all these people are coming in

00:07:27,900 --> 00:07:33,780
saying no no no stop doing that well

00:07:30,750 --> 00:07:34,980
you're making it worse also syntax

00:07:33,780 --> 00:07:37,740
doesn't matter why are you focusing on

00:07:34,980 --> 00:07:39,450
this and it's it's funny cuz you can't

00:07:37,740 --> 00:07:42,480
have both it can't be you're doing it

00:07:39,450 --> 00:07:44,420
wrong and it doesn't matter um and I

00:07:42,480 --> 00:07:47,760
think personally actually it does matter

00:07:44,420 --> 00:07:49,590
and changwu who's one of the leads on

00:07:47,760 --> 00:07:52,920
this project said something I really

00:07:49,590 --> 00:07:54,600
like and the point is for to allow

00:07:52,920 --> 00:07:55,860
others to convince their bosses without

00:07:54,600 --> 00:07:59,730
getting blocked on the little things

00:07:55,860 --> 00:08:01,650
like syntax like documentation because

00:07:59,730 --> 00:08:02,760
it turns out if you're if you're coming

00:08:01,650 --> 00:08:04,770
to your team and you're saying hey

00:08:02,760 --> 00:08:06,240
here's this new thing by the way I'm

00:08:04,770 --> 00:08:07,290
gonna have to spend half an hour before

00:08:06,240 --> 00:08:09,870
you can even read it

00:08:07,290 --> 00:08:11,700
and also there's types and also there's

00:08:09,870 --> 00:08:14,430
immutability is just so much more

00:08:11,700 --> 00:08:15,570
difficult then to say hey the syntax is

00:08:14,430 --> 00:08:19,680
pretty much the same we can forget about

00:08:15,570 --> 00:08:23,370
that let's focus on the good stuff so

00:08:19,680 --> 00:08:25,800
here's kind of a visual for you of how

00:08:23,370 --> 00:08:28,170
we've moved this syntax over the past

00:08:25,800 --> 00:08:30,750
year and a half or so on the left is oh

00:08:28,170 --> 00:08:32,300
camel and you'll see that function

00:08:30,750 --> 00:08:36,240
application the way you call a function

00:08:32,300 --> 00:08:38,400
there's no kind of syntax involved it's

00:08:36,240 --> 00:08:42,960
just the function name argument one

00:08:38,400 --> 00:08:45,540
argument two spaces in between and there

00:08:42,960 --> 00:08:48,510
aren't any curly braces block scope is

00:08:45,540 --> 00:08:50,580
kind of defined via some actually kind

00:08:48,510 --> 00:08:52,470
of complex rules that are hard to look

00:08:50,580 --> 00:08:53,580
at in my opinion and so the the middle

00:08:52,470 --> 00:08:56,460
one was the first version of reason

00:08:53,580 --> 00:08:57,810
syntax where we added curly braces so

00:08:56,460 --> 00:08:58,980
that it's easier to tell okay what is

00:08:57,810 --> 00:09:01,320
the scope what's inside this function

00:08:58,980 --> 00:09:04,050
and then on the far right we added

00:09:01,320 --> 00:09:05,250
parentheses and then the parentheses

00:09:04,050 --> 00:09:07,260
were what people were getting stuck on

00:09:05,250 --> 00:09:07,620
there like no like it's so much cleaner

00:09:07,260 --> 00:09:10,770
it's

00:09:07,620 --> 00:09:11,970
much clearer that you're doing currying

00:09:10,770 --> 00:09:14,430
if you don't have these weird

00:09:11,970 --> 00:09:16,830
parentheses in the way and I was talking

00:09:14,430 --> 00:09:18,720
about a friend who really likes Lisp

00:09:16,830 --> 00:09:19,770
syntax and he was like I love

00:09:18,720 --> 00:09:23,520
parentheses but they're in the wrong

00:09:19,770 --> 00:09:28,529
place you put them on the outside so you

00:09:23,520 --> 00:09:31,440
can't please everyone but my my I'm

00:09:28,529 --> 00:09:34,620
confident that this will make it much

00:09:31,440 --> 00:09:36,930
easier to get in to reason coming from

00:09:34,620 --> 00:09:39,180
JavaScript and there was a speaker down

00:09:36,930 --> 00:09:40,890
in Sydney Australia who was talking

00:09:39,180 --> 00:09:43,440
about how she and her team had

00:09:40,890 --> 00:09:45,839
integrated reason into production and I

00:09:43,440 --> 00:09:48,660
loved it when she said it almost wasn't

00:09:45,839 --> 00:09:50,850
like learning a new language it was just

00:09:48,660 --> 00:09:53,460
we already have basically JavaScript and

00:09:50,850 --> 00:09:56,100
then a couple of new rules some new help

00:09:53,460 --> 00:09:57,720
from the compiler some new assistance to

00:09:56,100 --> 00:10:01,080
make sure that you're writing stuff that

00:09:57,720 --> 00:10:03,630
will be maintainable in long run the

00:10:01,080 --> 00:10:05,640
second thing is tooling we wanted to

00:10:03,630 --> 00:10:07,230
stick with the JavaScript ecosystem as

00:10:05,640 --> 00:10:09,990
much as possible so package management

00:10:07,230 --> 00:10:11,820
is NPM if you're gonna bundle your

00:10:09,990 --> 00:10:15,360
JavaScript feel free to use webpack

00:10:11,820 --> 00:10:17,330
roll-up if you're onto the new es6

00:10:15,360 --> 00:10:19,650
module imports and you're running Safari

00:10:17,330 --> 00:10:22,200
you'd only have to bundle you just do

00:10:19,650 --> 00:10:23,490
the import thing and it works and then

00:10:22,200 --> 00:10:24,060
formatting if you're already used to

00:10:23,490 --> 00:10:26,580
prettier

00:10:24,060 --> 00:10:28,589
we've got reformat which was actually

00:10:26,580 --> 00:10:32,010
the inspiration for prettier and so that

00:10:28,589 --> 00:10:34,020
gets rid of all of your linting nitpicks

00:10:32,010 --> 00:10:35,279
on oh you put the comma in the wrong

00:10:34,020 --> 00:10:36,990
place

00:10:35,279 --> 00:10:39,690
it just formats everything in a

00:10:36,990 --> 00:10:41,490
canonical style and these next three

00:10:39,690 --> 00:10:45,570
linting transpiling boilerplate you

00:10:41,490 --> 00:10:48,000
don't need it we in going into this we

00:10:45,570 --> 00:10:50,790
wanted to make it as simple as possible

00:10:48,000 --> 00:10:52,440
just baked everything in that has been

00:10:50,790 --> 00:10:54,690
established in the JavaScript community

00:10:52,440 --> 00:10:56,040
over the past several years and there's

00:10:54,690 --> 00:10:57,630
been all these boiler plates and all

00:10:56,040 --> 00:10:59,760
these new tools that have come out and

00:10:57,630 --> 00:11:02,160
we're consolidating it so you you don't

00:10:59,760 --> 00:11:04,230
even have to have a create react app you

00:11:02,160 --> 00:11:09,270
don't have to eject it's just there and

00:11:04,230 --> 00:11:12,500
it's simple and it works so JavaScript

00:11:09,270 --> 00:11:14,190
Interop is is the other thing that is

00:11:12,500 --> 00:11:16,170
kind of that there are a lot of

00:11:14,190 --> 00:11:18,230
perspectives on that if you look around

00:11:16,170 --> 00:11:21,300
at compile to JavaScript languages and

00:11:18,230 --> 00:11:21,600
the goal from reasons perspective is to

00:11:21,300 --> 00:11:24,569
make it

00:11:21,600 --> 00:11:26,759
painless as possible to take your

00:11:24,569 --> 00:11:30,000
existing JavaScript add-in reason a

00:11:26,759 --> 00:11:33,180
little bit at the time and I tried to

00:11:30,000 --> 00:11:36,060
graph the the spectrum of perspectives

00:11:33,180 --> 00:11:39,480
on this and with with elm on the far

00:11:36,060 --> 00:11:42,050
side where Elms philosophy is kind of

00:11:39,480 --> 00:11:44,730
keep JavaScript at arm's length

00:11:42,050 --> 00:11:48,899
javascript is dangerous and it has all

00:11:44,730 --> 00:11:51,300
these bugs and so it's best to you know

00:11:48,899 --> 00:11:53,790
not get too close to it so that you

00:11:51,300 --> 00:11:55,319
protect your code so if you want to call

00:11:53,790 --> 00:11:57,600
a javascript function or call it

00:11:55,319 --> 00:11:58,740
javascript library from elm you have to

00:11:57,600 --> 00:12:00,870
set up kind of a message passing

00:11:58,740 --> 00:12:03,630
protocol and there's serialization a

00:12:00,870 --> 00:12:04,709
destabilization and if javascript

00:12:03,630 --> 00:12:06,600
returns something that's in the wrong

00:12:04,709 --> 00:12:10,170
shape it stops at the door it doesn't

00:12:06,600 --> 00:12:11,970
infect your code and the Elm ecosystem

00:12:10,170 --> 00:12:15,089
they have their own package management

00:12:11,970 --> 00:12:16,920
they they don't mesh with NPM because

00:12:15,089 --> 00:12:19,259
NPM has all these crazy packages that

00:12:16,920 --> 00:12:21,600
are frequently very broken and you kind

00:12:19,259 --> 00:12:24,600
of want to stay away from that closure

00:12:21,600 --> 00:12:26,759
script then has easier JavaScript

00:12:24,600 --> 00:12:31,019
Interop syntactically but again there's

00:12:26,759 --> 00:12:33,750
they're also not tied to the NPM

00:12:31,019 --> 00:12:36,660
ecosystem as much and they use kind of

00:12:33,750 --> 00:12:38,370
the Java package management so then

00:12:36,660 --> 00:12:41,880
reason has both of those we have the

00:12:38,370 --> 00:12:44,730
nice syntax for easily integrating with

00:12:41,880 --> 00:12:48,839
JavaScript and if you want to include an

00:12:44,730 --> 00:12:50,730
NPM module it's quite easy now the the

00:12:48,839 --> 00:12:52,829
closest side to JavaScript is with flow

00:12:50,730 --> 00:12:54,620
and typescript where it's like it's it's

00:12:52,829 --> 00:12:57,290
really pretty much JavaScript semantics

00:12:54,620 --> 00:13:01,829
so you don't even have different value

00:12:57,290 --> 00:13:03,120
runtime representations and but then you

00:13:01,829 --> 00:13:05,459
get all the baggage that JavaScript has

00:13:03,120 --> 00:13:07,589
where it's like Oh sometimes there's

00:13:05,459 --> 00:13:09,329
unsound types because flow and

00:13:07,589 --> 00:13:12,269
typescript have to accommodate current

00:13:09,329 --> 00:13:14,209
JavaScript idioms so there's some

00:13:12,269 --> 00:13:17,370
examples of what it looks like to use

00:13:14,209 --> 00:13:19,380
javascript in reason um and you might be

00:13:17,370 --> 00:13:22,079
looking this and say actually that's

00:13:19,380 --> 00:13:24,209
completely JavaScript and it is this is

00:13:22,079 --> 00:13:26,009
a multi-line string where I just dumped

00:13:24,209 --> 00:13:29,269
in a snippet of code that I copied from

00:13:26,009 --> 00:13:32,069
the documentation of the Web Audio API

00:13:29,269 --> 00:13:34,199
as I was working on this project where I

00:13:32,069 --> 00:13:35,670
wanted to make a beep I wanted to make

00:13:34,199 --> 00:13:37,110
some noises

00:13:35,670 --> 00:13:38,430
the Web Audio API is cool so I was

00:13:37,110 --> 00:13:40,830
looking up in the documentation playing

00:13:38,430 --> 00:13:42,060
around the repple and then I had code

00:13:40,830 --> 00:13:43,890
that was working in JavaScript and I

00:13:42,060 --> 00:13:46,020
didn't want to take the time to

00:13:43,890 --> 00:13:47,790
translate it into my language to figure

00:13:46,020 --> 00:13:48,750
out the types to make it all work well I

00:13:47,790 --> 00:13:50,130
had something that worked

00:13:48,750 --> 00:13:53,100
I just want to dump it in and keep going

00:13:50,130 --> 00:13:55,650
and that's what I love about this raaah

00:13:53,100 --> 00:13:57,360
javascript support we're definitely it's

00:13:55,650 --> 00:13:58,830
dangerous and I'll tell you nine times

00:13:57,360 --> 00:14:00,570
out of 10 that I've used this there's

00:13:58,830 --> 00:14:03,570
been like a syntax error or a type error

00:14:00,570 --> 00:14:06,930
in the JavaScript I put in there which

00:14:03,570 --> 00:14:08,520
you get what you pay for but this is

00:14:06,930 --> 00:14:09,660
great for starting out when you're just

00:14:08,520 --> 00:14:13,200
learning and you want to keep going you

00:14:09,660 --> 00:14:15,000
want to get a win rajah the script can

00:14:13,200 --> 00:14:17,040
also be typed you can also pass in

00:14:15,000 --> 00:14:20,220
arguments to these functions you can

00:14:17,040 --> 00:14:22,050
then get return values so there's a lot

00:14:20,220 --> 00:14:24,270
of flexibility here but again this is

00:14:22,050 --> 00:14:26,250
more power than you actually want in

00:14:24,270 --> 00:14:28,589
production you want safety you want

00:14:26,250 --> 00:14:32,190
structure and so for that there's the

00:14:28,589 --> 00:14:34,140
externals API where you say from this

00:14:32,190 --> 00:14:35,820
module this is an example me integrating

00:14:34,140 --> 00:14:39,150
with firebase and I said there's this

00:14:35,820 --> 00:14:41,790
firebase NPM module and here's how you

00:14:39,150 --> 00:14:42,810
get out the authenticated user and there

00:14:41,790 --> 00:14:44,940
are a couple of steps there are a couple

00:14:42,810 --> 00:14:47,010
of types that I declare and then at the

00:14:44,940 --> 00:14:51,900
bottom I show the JavaScript that Buckle

00:14:47,010 --> 00:14:53,580
script compiles it into quite cleanly so

00:14:51,900 --> 00:14:55,350
the basic idea is have an easy mode to

00:14:53,580 --> 00:14:57,029
get started to make the Interop as

00:14:55,350 --> 00:14:59,010
smooth as possible if you get stuck just

00:14:57,029 --> 00:15:00,390
dump in some JavaScript and then later

00:14:59,010 --> 00:15:02,459
on you can go clean it up you can make

00:15:00,390 --> 00:15:05,610
it rigorous you can translate the logic

00:15:02,459 --> 00:15:09,260
into reason and then just use externals

00:15:05,610 --> 00:15:12,180
for any npm modules you're working with

00:15:09,260 --> 00:15:13,980
so if it's really easy to up adopt it

00:15:12,180 --> 00:15:16,170
still doesn't do you any good if the

00:15:13,980 --> 00:15:17,160
language doesn't end up having the

00:15:16,170 --> 00:15:19,620
supports that you need for maintenance

00:15:17,160 --> 00:15:22,200
right so the second part is make it easy

00:15:19,620 --> 00:15:24,240
to maintain I'm gonna talk about several

00:15:22,200 --> 00:15:25,470
things that oh camel kind of the the

00:15:24,240 --> 00:15:27,570
structure that we're building on gives

00:15:25,470 --> 00:15:30,029
us for free and it's very powerful very

00:15:27,570 --> 00:15:36,000
well developed starting with the type

00:15:30,029 --> 00:15:37,980
system so there there are just so many

00:15:36,000 --> 00:15:40,400
awesome things that you get by having a

00:15:37,980 --> 00:15:43,290
good type system at your disposal um

00:15:40,400 --> 00:15:47,380
quick to get an idea of of who's here

00:15:43,290 --> 00:15:50,140
who would love to be to use

00:15:47,380 --> 00:15:51,700
like a statically typed tight statically

00:15:50,140 --> 00:15:55,720
checked type system at work or our

00:15:51,700 --> 00:15:56,980
already cool all right this is better

00:15:55,720 --> 00:16:00,370
than then it would have been in last

00:15:56,980 --> 00:16:04,810
year who who's gonna need a lot of

00:16:00,370 --> 00:16:08,170
convincing to use types in your in your

00:16:04,810 --> 00:16:09,640
JavaScript or in your Wow okay I can

00:16:08,170 --> 00:16:12,460
almost skip this slide but it's good

00:16:09,640 --> 00:16:15,910
stuff so types give you free

00:16:12,460 --> 00:16:17,260
documentation we're at the top this is

00:16:15,910 --> 00:16:19,180
like the JavaScript doctor you might

00:16:17,260 --> 00:16:21,550
write and then in the middle is flow

00:16:19,180 --> 00:16:23,710
annotations you could give at the bottom

00:16:21,550 --> 00:16:27,840
is really cool because I didn't write

00:16:23,710 --> 00:16:30,820
those types those were filled in by

00:16:27,840 --> 00:16:32,860
reasons type inference and said oh I

00:16:30,820 --> 00:16:34,870
know what these types are and then vs

00:16:32,860 --> 00:16:37,750
code has this fun feature where it'll

00:16:34,870 --> 00:16:38,740
just kind of add add that line above

00:16:37,750 --> 00:16:41,710
each of your top-level

00:16:38,740 --> 00:16:42,880
declarations so this this will never get

00:16:41,710 --> 00:16:46,090
stale and you don't have to spend the

00:16:42,880 --> 00:16:49,560
time maintaining it for for people that

00:16:46,090 --> 00:16:52,000
are not so excited about types

00:16:49,560 --> 00:16:54,700
frequently it comes from experience in

00:16:52,000 --> 00:16:56,020
Java and C++ where it's like oh I spend

00:16:54,700 --> 00:16:58,000
so much time just messing with these

00:16:56,020 --> 00:17:01,990
types I want to get on and write some

00:16:58,000 --> 00:17:04,630
code and using reason using elm where

00:17:01,990 --> 00:17:07,780
it's almost completely inferred it

00:17:04,630 --> 00:17:09,970
doesn't even get in your way I saw this

00:17:07,780 --> 00:17:12,220
great quote about unit tests where unit

00:17:09,970 --> 00:17:14,560
tests can cover the things you can think

00:17:12,220 --> 00:17:16,660
of now if you're using generative

00:17:14,560 --> 00:17:17,890
testing as was explained earlier it's a

00:17:16,660 --> 00:17:19,750
little bit broader but it still only

00:17:17,890 --> 00:17:21,880
tests the functions that you can figure

00:17:19,750 --> 00:17:24,940
out how to write a test for whereas

00:17:21,880 --> 00:17:27,220
types cover everything even the things

00:17:24,940 --> 00:17:29,230
you forgot about and in turn types have

00:17:27,220 --> 00:17:31,090
a smaller surface area right they they

00:17:29,230 --> 00:17:32,710
can't test all of the things that you

00:17:31,090 --> 00:17:35,050
can test with unit tests but it's so

00:17:32,710 --> 00:17:41,260
nice to have that just have your back

00:17:35,050 --> 00:17:42,880
and then immutability gives you so many

00:17:41,260 --> 00:17:46,360
more guarantees about your code makes it

00:17:42,880 --> 00:17:48,670
easier to basically sleep well at night

00:17:46,360 --> 00:17:51,730
there's less spooky action at a distance

00:17:48,670 --> 00:17:54,070
because in many cases it's just ruled

00:17:51,730 --> 00:17:55,180
out right if you if you get an object

00:17:54,070 --> 00:17:56,350
you don't have to worry about somebody

00:17:55,180 --> 00:18:00,070
else changing it because it's impossible

00:17:56,350 --> 00:18:01,360
to modify and then you can reason about

00:18:00,070 --> 00:18:03,580
how a value changes over

00:18:01,360 --> 00:18:04,750
my example from the angular code base

00:18:03,580 --> 00:18:06,340
where everything was mutable and

00:18:04,750 --> 00:18:08,710
everything mutated everything else the

00:18:06,340 --> 00:18:10,630
problem was I didn't know how we got

00:18:08,710 --> 00:18:12,100
here you know I jump into the chrome dev

00:18:10,630 --> 00:18:14,290
tools it's like okay this is this is the

00:18:12,100 --> 00:18:17,560
current value how in the world did that

00:18:14,290 --> 00:18:20,500
happen if you have immutability it's so

00:18:17,560 --> 00:18:22,660
much easier to trace it down but the

00:18:20,500 --> 00:18:26,440
thing where reason sets itself apart

00:18:22,660 --> 00:18:28,900
from Elm from Haskell is that there is

00:18:26,440 --> 00:18:30,880
mute ability if you need it

00:18:28,900 --> 00:18:32,590
and this can happen if you are in a

00:18:30,880 --> 00:18:33,940
tight loop if you have you know your

00:18:32,590 --> 00:18:36,580
rating over tens of thousands of things

00:18:33,940 --> 00:18:40,450
and you want to just mutate you just

00:18:36,580 --> 00:18:41,830
want to you know make an array instead

00:18:40,450 --> 00:18:45,400
of using a linked list that has the

00:18:41,830 --> 00:18:46,810
immutable properties and sometimes code

00:18:45,400 --> 00:18:49,870
is easier to read and write if you're

00:18:46,810 --> 00:18:51,790
coming from an imperative background so

00:18:49,870 --> 00:18:54,640
that that can be nice for for onboarding

00:18:51,790 --> 00:18:58,450
as well and the other thing is that

00:18:54,640 --> 00:18:59,830
reason is multi-platform and I think

00:18:58,450 --> 00:19:02,530
this this will get a lot more attractive

00:18:59,830 --> 00:19:04,660
in the near future you may be thinking

00:19:02,530 --> 00:19:06,370
that javascript is multi-platform right

00:19:04,660 --> 00:19:09,190
you know we've got no js' you can make a

00:19:06,370 --> 00:19:12,460
server we've got you can make javascript

00:19:09,190 --> 00:19:17,620
fly a drone for you so javascript is

00:19:12,460 --> 00:19:19,450
everywhere but it's not fast it it

00:19:17,620 --> 00:19:20,710
doesn't necessarily get the speed that

00:19:19,450 --> 00:19:24,460
you need especially if you're running a

00:19:20,710 --> 00:19:26,200
large server and so there there are many

00:19:24,460 --> 00:19:27,880
companies that have started out with

00:19:26,200 --> 00:19:29,080
javascript it's like oh yeah we got the

00:19:27,880 --> 00:19:31,300
same language on the back in the front

00:19:29,080 --> 00:19:33,390
it's awesome and then the day comes when

00:19:31,300 --> 00:19:35,470
you have to turn to your team and say

00:19:33,390 --> 00:19:37,570
we're gonna have to rewrite it and go

00:19:35,470 --> 00:19:39,790
we're gonna have to rewrite it in rust

00:19:37,570 --> 00:19:41,700
or closure or something that will give

00:19:39,790 --> 00:19:46,930
us better performance characteristics

00:19:41,700 --> 00:19:48,040
but if you start with reason then then

00:19:46,930 --> 00:19:49,900
what you're doing is you say oK we've

00:19:48,040 --> 00:19:52,390
been compiling this to JavaScript a node

00:19:49,900 --> 00:19:53,800
let's compile the native we're gonna

00:19:52,390 --> 00:19:55,420
have to change the libraries we use

00:19:53,800 --> 00:19:57,430
right we can't use NPM modules if we're

00:19:55,420 --> 00:19:59,410
if we're compiling to native but at

00:19:57,430 --> 00:20:01,090
least you keep the same language on the

00:19:59,410 --> 00:20:03,370
front and the back you can have types

00:20:01,090 --> 00:20:05,680
that make sure that your rest endpoints

00:20:03,370 --> 00:20:09,240
will never return unexpected data

00:20:05,680 --> 00:20:11,050
because it's checked all the way around

00:20:09,240 --> 00:20:13,300
and the final thing that I'm really

00:20:11,050 --> 00:20:14,320
excited about with reasons compilation

00:20:13,300 --> 00:20:16,960
is

00:20:14,320 --> 00:20:18,370
the the compiler takes advantage of the

00:20:16,960 --> 00:20:22,450
types that you get and the immutability

00:20:18,370 --> 00:20:25,030
and it cuts out a lot of work here I've

00:20:22,450 --> 00:20:27,880
got some some reason code on the left so

00:20:25,030 --> 00:20:30,520
the output JavaScript on the right and

00:20:27,880 --> 00:20:32,800
if you look at the result line it

00:20:30,520 --> 00:20:34,600
seriously because there's it's calling

00:20:32,800 --> 00:20:38,860
function do something complex but on the

00:20:34,600 --> 00:20:40,630
right it's just the constant 14 so

00:20:38,860 --> 00:20:41,680
epochal script went in and said oh this

00:20:40,630 --> 00:20:43,840
function doesn't do anything interesting

00:20:41,680 --> 00:20:46,030
and it's only used once let's inline it

00:20:43,840 --> 00:20:48,520
add to doesn't do anything interesting

00:20:46,030 --> 00:20:51,430
let's inline it twice also plus two I

00:20:48,520 --> 00:20:53,370
can do that so it's just 14.2 string

00:20:51,430 --> 00:20:55,890
instead of making several function calls

00:20:53,370 --> 00:20:59,350
in the bottom I think is even more fun

00:20:55,890 --> 00:21:01,720
because we we have a value it's a string

00:20:59,350 --> 00:21:03,180
we put it inside of an object then we

00:21:01,720 --> 00:21:06,250
get it out of the object and the

00:21:03,180 --> 00:21:07,780
compiler sees that and says it can't

00:21:06,250 --> 00:21:09,460
have changed because it's immutable

00:21:07,780 --> 00:21:13,180
let's just grab it from the beginning

00:21:09,460 --> 00:21:15,550
and this is a simple example but I've

00:21:13,180 --> 00:21:18,040
seen it in the the JavaScript that I've

00:21:15,550 --> 00:21:20,620
output where Puckle script has taken a

00:21:18,040 --> 00:21:24,550
bunch of shortcuts that will really give

00:21:20,620 --> 00:21:27,130
me performance in long run so

00:21:24,550 --> 00:21:29,380
essentially reason has the structure it

00:21:27,130 --> 00:21:31,300
has the safeguards and tooling to keep

00:21:29,380 --> 00:21:33,850
your code friendly in the long run but

00:21:31,300 --> 00:21:38,070
it has flexibility if you need it right

00:21:33,850 --> 00:21:38,070
it has mutability if you need the speed

00:21:39,420 --> 00:21:43,480
people come up to me and say ok reason

00:21:41,830 --> 00:21:45,130
is awesome I want to use it I've got a

00:21:43,480 --> 00:21:46,590
team of 15 people we've got this large

00:21:45,130 --> 00:21:51,370
JavaScript app how do I get started

00:21:46,590 --> 00:21:54,730
moving it over and for the past many

00:21:51,370 --> 00:21:56,260
months I've said hold off because this

00:21:54,730 --> 00:21:59,080
is a this is a young project there's a

00:21:56,260 --> 00:22:00,760
lot of churn we've changed the syntax a

00:21:59,080 --> 00:22:02,830
lot in the past several months we've

00:22:00,760 --> 00:22:05,560
changed the build tooling a lot added

00:22:02,830 --> 00:22:07,360
features trying to make it stable change

00:22:05,560 --> 00:22:09,840
the editor integration which is really

00:22:07,360 --> 00:22:13,960
cool now but has been flaky for a while

00:22:09,840 --> 00:22:15,730
but now they're they're several teams

00:22:13,960 --> 00:22:18,130
that are shipping react in production

00:22:15,730 --> 00:22:20,260
you know there there are react native

00:22:18,130 --> 00:22:22,570
apps running with reason in the App

00:22:20,260 --> 00:22:26,500
Store there are websites built on react

00:22:22,570 --> 00:22:27,730
there are server-side tools running in

00:22:26,500 --> 00:22:32,770
reason

00:22:27,730 --> 00:22:34,450
um but if you're a large team so for

00:22:32,770 --> 00:22:37,180
example I worked at Kahn Academy we've

00:22:34,450 --> 00:22:39,160
got fifty or sixty developers I'm gonna

00:22:37,180 --> 00:22:41,560
hold off on bringing in reason for at

00:22:39,160 --> 00:22:43,810
least another year because it there's

00:22:41,560 --> 00:22:48,580
still some churn it's still on the early

00:22:43,810 --> 00:22:49,930
edge of adoption today or tomorrow we're

00:22:48,580 --> 00:22:51,910
shipping the new syntax so it'll be

00:22:49,930 --> 00:22:53,680
easier to teach and we're working on

00:22:51,910 --> 00:22:56,440
building the documentation and all the

00:22:53,680 --> 00:22:58,180
tools that you'll need but but it's

00:22:56,440 --> 00:23:00,070
still kind of in the earlier side if

00:22:58,180 --> 00:23:02,140
you're familiar with rust and that

00:23:00,070 --> 00:23:04,480
language is progression I like to

00:23:02,140 --> 00:23:06,160
compare reason to rust two or three

00:23:04,480 --> 00:23:08,530
years ago that was when I got interested

00:23:06,160 --> 00:23:09,640
in it and it was really cool a really

00:23:08,530 --> 00:23:11,350
fun language but there was some weird

00:23:09,640 --> 00:23:15,430
there were like four different types of

00:23:11,350 --> 00:23:17,260
pointer and the documentation was kind

00:23:15,430 --> 00:23:18,310
of struggling some places and there

00:23:17,260 --> 00:23:20,680
wasn't really a lot of community

00:23:18,310 --> 00:23:22,450
resources not very many libraries but

00:23:20,680 --> 00:23:23,800
now rust is something that you can be

00:23:22,450 --> 00:23:25,690
confident like there's gonna be good

00:23:23,800 --> 00:23:27,370
libraries for most of the things you

00:23:25,690 --> 00:23:29,290
want to do the syntax is well-oiled

00:23:27,370 --> 00:23:31,320
they've put a lot of effort into making

00:23:29,290 --> 00:23:34,420
it accessible and easy to adopt and

00:23:31,320 --> 00:23:36,910
that's where I hope to have reason in

00:23:34,420 --> 00:23:39,130
the next two years so what are the

00:23:36,910 --> 00:23:41,260
things that's left we need to solidify

00:23:39,130 --> 00:23:45,430
the standard library this is kind of a

00:23:41,260 --> 00:23:47,710
funny thing Oh camel has like five

00:23:45,430 --> 00:23:48,970
different standard libraries which means

00:23:47,710 --> 00:23:53,110
it's actually not all that standard

00:23:48,970 --> 00:23:54,670
right so we we want to bake in a library

00:23:53,110 --> 00:23:56,740
to the compiler make it so that

00:23:54,670 --> 00:23:57,940
everyone's using the same thing there's

00:23:56,740 --> 00:24:00,040
a lot of community work to be done

00:23:57,940 --> 00:24:02,350
bindings to popular JavaScript packages

00:24:00,040 --> 00:24:04,240
and building up the community packages

00:24:02,350 --> 00:24:05,650
so that there's an easy way to get

00:24:04,240 --> 00:24:07,000
started writing a server easy ways to

00:24:05,650 --> 00:24:09,250
get started making games and all that

00:24:07,000 --> 00:24:14,380
and then there's the blog post the

00:24:09,250 --> 00:24:15,520
tutorials and braise documentation so if

00:24:14,380 --> 00:24:17,620
you're excited about this if you're

00:24:15,520 --> 00:24:20,230
convinced that this is a language to

00:24:17,620 --> 00:24:22,350
invest in please come join us and thank

00:24:20,230 --> 00:24:22,350
you

00:24:30,880 --> 00:24:32,940

YouTube URL: https://www.youtube.com/watch?v=lN78ystnVw4


