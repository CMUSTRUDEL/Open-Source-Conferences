Title: ReactiveConf 2017 - Rogelio Guzman: Jest as a Platform
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Main stage talk

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,040 --> 00:00:08,639
[Music]

00:00:15,130 --> 00:00:20,470
hi everyone my name is Roja Leo I'm part

00:00:18,490 --> 00:00:24,160
of the Jets core team and I work at

00:00:20,470 --> 00:00:26,349
docker as a front-end engineer today

00:00:24,160 --> 00:00:28,990
we're here to talk about just us a

00:00:26,349 --> 00:00:31,869
platform but what does that mean let's

00:00:28,990 --> 00:00:35,620
break that statement apart let's start

00:00:31,869 --> 00:00:37,930
by talking about what is just just is a

00:00:35,620 --> 00:00:39,840
javascript testing solution which

00:00:37,930 --> 00:00:42,340
focuses from being easy to setup

00:00:39,840 --> 00:00:46,360
providing us with is sent feedback and

00:00:42,340 --> 00:00:48,880
working out of the box now what do we

00:00:46,360 --> 00:00:51,580
mean by platform by that we mean

00:00:48,880 --> 00:00:54,040
something that is extensible that worked

00:00:51,580 --> 00:00:56,820
with your existing tooling and that

00:00:54,040 --> 00:00:59,380
allows you to build on top of

00:00:56,820 --> 00:01:02,140
so to understand what just as a platform

00:00:59,380 --> 00:01:05,369
is we first need to understand what just

00:01:02,140 --> 00:01:08,710
is strongest at which is testing I

00:01:05,369 --> 00:01:10,720
really like testing but for some reason

00:01:08,710 --> 00:01:13,240
I find myself not writing tests a lot of

00:01:10,720 --> 00:01:15,520
the time so how is it that if I really

00:01:13,240 --> 00:01:17,860
like something I still don't do it as

00:01:15,520 --> 00:01:20,049
much as I should a lot of food balls

00:01:17,860 --> 00:01:22,060
have enough width to the overhead that

00:01:20,049 --> 00:01:23,619
comes when you're writing a test you

00:01:22,060 --> 00:01:25,840
need to start thinking about all the

00:01:23,619 --> 00:01:27,399
tools that are surrounding it and how to

00:01:25,840 --> 00:01:30,039
stitch them together so that you have a

00:01:27,399 --> 00:01:31,840
good set up which sometimes makes me

00:01:30,039 --> 00:01:37,569
think that I might just like the idea of

00:01:31,840 --> 00:01:39,159
testing so a docker we were having this

00:01:37,569 --> 00:01:41,799
problem where we were not writing enough

00:01:39,159 --> 00:01:44,139
tests and this was mainly because our

00:01:41,799 --> 00:01:45,939
test suit was too long to run which

00:01:44,139 --> 00:01:48,069
meant that our iteration speed was so

00:01:45,939 --> 00:01:49,950
surrealist slow so one day I was

00:01:48,069 --> 00:01:52,569
chatting with one of my teammates to

00:01:49,950 --> 00:01:54,909
better understand why what why this was

00:01:52,569 --> 00:01:57,100
happening and the reality is that if the

00:01:54,909 --> 00:01:59,020
tools are not working in your favor is

00:01:57,100 --> 00:02:01,119
really hard to write tests and if you

00:01:59,020 --> 00:02:02,829
don't have an environment that makes it

00:02:01,119 --> 00:02:05,289
easy to do so then you end up not

00:02:02,829 --> 00:02:07,630
writing them and at that point of docker

00:02:05,289 --> 00:02:09,640
we were using a combination of tools

00:02:07,630 --> 00:02:11,980
that were not providing us with a

00:02:09,640 --> 00:02:14,020
cohesive experience and a lot of food

00:02:11,980 --> 00:02:16,959
was not the tools fault on the contrary

00:02:14,020 --> 00:02:19,390
they were all great tools but we just

00:02:16,959 --> 00:02:20,110
never took the time to optimize how they

00:02:19,390 --> 00:02:22,360
work together

00:02:20,110 --> 00:02:26,170
which meant that we ended up with these

00:02:22,360 --> 00:02:27,940
really slow testing solution that's what

00:02:26,170 --> 00:02:30,460
we started to adopt just

00:02:27,940 --> 00:02:33,010
and surprisingly the transition was

00:02:30,460 --> 00:02:35,770
fairly simple we removed a lot of

00:02:33,010 --> 00:02:37,270
dependencies but most importantly it

00:02:35,770 --> 00:02:39,580
meant that every time that we hired

00:02:37,270 --> 00:02:41,890
someone new they will only have to worry

00:02:39,580 --> 00:02:45,400
about this single test dependency making

00:02:41,890 --> 00:02:47,350
our ramp up process way easier so after

00:02:45,400 --> 00:02:50,260
we migrator a test adjust they started

00:02:47,350 --> 00:02:52,600
running in a six of the time and running

00:02:50,260 --> 00:02:55,030
a single test went from taking over five

00:02:52,600 --> 00:02:56,590
seconds to being almost instant this

00:02:55,030 --> 00:02:58,540
means that our feedback loop was way

00:02:56,590 --> 00:03:00,970
tighter and we were able to write more

00:02:58,540 --> 00:03:04,210
tests last but not least he provided us

00:03:00,970 --> 00:03:05,410
with a better development experience so

00:03:04,210 --> 00:03:07,870
let's see what it takes to set up just

00:03:05,410 --> 00:03:09,190
by the way this lights for these talk

00:03:07,870 --> 00:03:11,080
are gonna be available in this github

00:03:09,190 --> 00:03:14,890
repo so you can use it as a reference

00:03:11,080 --> 00:03:16,510
later for the rest of the talk we're

00:03:14,890 --> 00:03:19,240
gonna be using this small application

00:03:16,510 --> 00:03:20,500
called emoji cinema basically it's a

00:03:19,240 --> 00:03:22,030
type ahead where you can type the name

00:03:20,500 --> 00:03:24,550
of a movie and you will get back its

00:03:22,030 --> 00:03:27,100
emoji representation for example if you

00:03:24,550 --> 00:03:30,940
type frozen you'll get a snowflake and a

00:03:27,100 --> 00:03:34,300
dress if you type Finding Nemo you'll

00:03:30,940 --> 00:03:37,239
get a lens and a fish so let's see how

00:03:34,300 --> 00:03:39,400
this application works it has this movie

00:03:37,239 --> 00:03:42,220
list component which takes in a query

00:03:39,400 --> 00:03:43,930
and renders a list of movies and if we

00:03:42,220 --> 00:03:46,300
go inside that movie list component

00:03:43,930 --> 00:03:49,120
we'll see that it's calling this search

00:03:46,300 --> 00:03:52,330
movies function which also takes in a

00:03:49,120 --> 00:03:54,430
query and returns an array of movies for

00:03:52,330 --> 00:03:56,290
example if you pass the letter F it will

00:03:54,430 --> 00:04:00,550
return you all the movies containing the

00:03:56,290 --> 00:04:02,709
letter F now let's take a look at how

00:04:00,550 --> 00:04:06,970
this search movies function is

00:04:02,709 --> 00:04:09,910
implemented it has a title sorry takes

00:04:06,970 --> 00:04:11,709
in a query and filters to only return

00:04:09,910 --> 00:04:14,380
the movies that match that given title

00:04:11,709 --> 00:04:16,440
and this is how our emoji map looks it

00:04:14,380 --> 00:04:19,709
has the title and the representation of

00:04:16,440 --> 00:04:22,900
the emoji representation for each movie

00:04:19,709 --> 00:04:26,650
and that's how our project structure

00:04:22,900 --> 00:04:31,650
would look so let's see what it takes to

00:04:26,650 --> 00:04:34,210
add Jes to our emoji cinema application

00:04:31,650 --> 00:04:36,010
here's our package that Jason and the

00:04:34,210 --> 00:04:37,750
only thing that we need to do is to add

00:04:36,010 --> 00:04:37,960
just as a dependency and we're good to

00:04:37,750 --> 00:04:40,309
go

00:04:37,960 --> 00:04:42,659
that's it

00:04:40,309 --> 00:04:45,899
so here we have our search movies

00:04:42,659 --> 00:04:48,089
function so let's go ahead and write and

00:04:45,899 --> 00:04:53,189
create a test file for it we'll call it

00:04:48,089 --> 00:04:54,599
search movies test is now let's start

00:04:53,189 --> 00:04:57,539
just in watch mode let's see what

00:04:54,599 --> 00:05:00,119
happens we can see that it found our

00:04:57,539 --> 00:05:01,919
test file but it told us there are no

00:05:00,119 --> 00:05:03,749
tests in it so let's start writing one

00:05:01,919 --> 00:05:08,969
it returns the movies that match that

00:05:03,749 --> 00:05:12,869
query and it expects search movies of f2

00:05:08,969 --> 00:05:14,639
equal something but I'm not sure what

00:05:12,869 --> 00:05:16,499
that something is so let's just do what

00:05:14,639 --> 00:05:22,279
we always do right we'll just come in

00:05:16,499 --> 00:05:22,279
this out and we'll just console.log it

00:05:23,330 --> 00:05:28,020
if we say that yes we'll pick up our

00:05:25,949 --> 00:05:30,059
changes and we'll see that our consoles

00:05:28,020 --> 00:05:33,930
log statement was there so we now we can

00:05:30,059 --> 00:05:35,729
just copy over to her test fowl and as

00:05:33,930 --> 00:05:37,499
we start saving it you'll see that just

00:05:35,729 --> 00:05:42,179
keeps picking up the changes and

00:05:37,499 --> 00:05:45,809
rewriting our tests and if we start

00:05:42,179 --> 00:05:48,959
making changes to the expectation just

00:05:45,809 --> 00:05:52,999
will again pick up the changes and give

00:05:48,959 --> 00:05:55,860
us a pretty print a diff or the FA error

00:05:52,999 --> 00:05:57,479
so just has a lot more but in the

00:05:55,860 --> 00:05:58,649
interest of time and because we are

00:05:57,479 --> 00:06:00,449
going to be talking about Jess as a

00:05:58,649 --> 00:06:02,849
platform we're not going to be able to

00:06:00,449 --> 00:06:04,050
cover all of it if you're interested I

00:06:02,849 --> 00:06:06,409
highly encourage you to go to its

00:06:04,050 --> 00:06:12,149
website for more information

00:06:06,409 --> 00:06:17,219
so what did we get with just we got an

00:06:12,149 --> 00:06:22,529
immersive watch mode we got tests that

00:06:17,219 --> 00:06:27,209
run really fast even at a scale we got

00:06:22,529 --> 00:06:29,039
great user experience we got a deep gift

00:06:27,209 --> 00:06:33,809
integration that will only run to test

00:06:29,039 --> 00:06:38,360
based on your git status and we got all

00:06:33,809 --> 00:06:38,360
of this with zero initial configuration

00:06:40,540 --> 00:06:46,640
so now that we all know about just let's

00:06:44,540 --> 00:06:51,170
start talking about the platform aspect

00:06:46,640 --> 00:06:53,840
of it and for these we can think about

00:06:51,170 --> 00:06:56,480
it from two perspectives the first one

00:06:53,840 --> 00:06:58,790
is to be able to cherry-pick specific

00:06:56,480 --> 00:07:00,830
features of jest and use them as

00:06:58,790 --> 00:07:03,200
standalone packages in your application

00:07:00,830 --> 00:07:05,360
and the second one which we'll talk more

00:07:03,200 --> 00:07:07,850
about later is to be able to put your

00:07:05,360 --> 00:07:13,250
tooling on top of just and leverage its

00:07:07,850 --> 00:07:15,080
features and infrastructure so let's

00:07:13,250 --> 00:07:18,440
start by talking about cherry-picking a

00:07:15,080 --> 00:07:20,000
feature of just up until now we've been

00:07:18,440 --> 00:07:23,120
talking about just as this single

00:07:20,000 --> 00:07:25,220
package but if we zoom into it will

00:07:23,120 --> 00:07:29,000
realize that it's composed by several

00:07:25,220 --> 00:07:30,770
independent packages which each of them

00:07:29,000 --> 00:07:33,110
allows us to charge people to

00:07:30,770 --> 00:07:34,690
cherry-pick a small feature of just so

00:07:33,110 --> 00:07:38,330
let's take a look at a couple of them

00:07:34,690 --> 00:07:40,010
well start with justif remember when our

00:07:38,330 --> 00:07:43,190
test failed and it just gave us these

00:07:40,010 --> 00:07:45,560
pre-printed if well these was powered by

00:07:43,190 --> 00:07:46,910
this small package called justif which

00:07:45,560 --> 00:07:49,490
you can independently use in your

00:07:46,910 --> 00:07:50,900
application regardless if you're using

00:07:49,490 --> 00:07:53,440
it for a testing purposes or anything

00:07:50,900 --> 00:07:56,480
else you basically just require it and

00:07:53,440 --> 00:07:58,160
then call this diff function with two

00:07:56,480 --> 00:08:01,070
objects and it will give you the diff

00:07:58,160 --> 00:08:03,160
between them this worked with deeply

00:08:01,070 --> 00:08:07,520
nested objects and any other

00:08:03,160 --> 00:08:09,560
serializable value now let's take a look

00:08:07,520 --> 00:08:09,920
at just a volley date I really like this

00:08:09,560 --> 00:08:12,560
one

00:08:09,920 --> 00:08:15,740
because it works for anything that needs

00:08:12,560 --> 00:08:17,780
to validate a configuration this is what

00:08:15,740 --> 00:08:20,750
just uses for validating all of their

00:08:17,780 --> 00:08:23,450
command line arguments so for example

00:08:20,750 --> 00:08:25,460
here we have a super basic configuration

00:08:23,450 --> 00:08:27,740
where it says that watch equals true and

00:08:25,460 --> 00:08:29,540
if we want to validate it the only thing

00:08:27,740 --> 00:08:32,060
that we need to do is to provide it with

00:08:29,540 --> 00:08:34,849
an example config and just validate

00:08:32,060 --> 00:08:37,250
we'll do the rest so if we change the

00:08:34,849 --> 00:08:39,770
value of watch it will give you the

00:08:37,250 --> 00:08:41,960
appropriate validation error without us

00:08:39,770 --> 00:08:44,930
doing anything and it's robust enough

00:08:41,960 --> 00:08:47,690
that it will allow us to insert links to

00:08:44,930 --> 00:08:52,400
our documentation for example or we can

00:08:47,690 --> 00:08:53,690
even like deprecated values of our

00:08:52,400 --> 00:08:57,759
configuration in this case we're

00:08:53,690 --> 00:08:57,759
deprecating watch instead of super watch

00:08:57,790 --> 00:09:02,120
and last but not least I think the

00:09:00,920 --> 00:09:05,660
package that I like the most is just

00:09:02,120 --> 00:09:08,180
worker this gives you all the power of

00:09:05,660 --> 00:09:09,709
parallelization without any of the

00:09:08,180 --> 00:09:11,810
complexities that come with it

00:09:09,709 --> 00:09:15,129
so what does this mean that's just a

00:09:11,810 --> 00:09:18,199
simple example this case we have this

00:09:15,129 --> 00:09:20,269
module Ronge ayahs that knows how to run

00:09:18,199 --> 00:09:22,670
a test file as you can see this is a

00:09:20,269 --> 00:09:25,970
super oversimplification of what just is

00:09:22,670 --> 00:09:28,730
doing well we have this module that

00:09:25,970 --> 00:09:30,319
receives a test file and we have these

00:09:28,730 --> 00:09:32,990
test files in this case like search

00:09:30,319 --> 00:09:35,959
movies test ideas and we want to run

00:09:32,990 --> 00:09:38,870
them in parallel well this is exactly

00:09:35,959 --> 00:09:41,720
what just worker will do for us it will

00:09:38,870 --> 00:09:44,990
grab them and behind the scenes it will

00:09:41,720 --> 00:09:48,319
spin up independent node processes and

00:09:44,990 --> 00:09:51,500
it will call these run test file method

00:09:48,319 --> 00:09:53,860
for each of those files and at the end I

00:09:51,500 --> 00:09:58,360
don't know it will print out the results

00:09:53,860 --> 00:10:01,670
so how do we use this just worker module

00:09:58,360 --> 00:10:03,980
first of all we require it and then we

00:10:01,670 --> 00:10:06,009
need to provide it with a pass through

00:10:03,980 --> 00:10:08,000
this node module that is going to be

00:10:06,009 --> 00:10:09,800
instantiating in an independent node

00:10:08,000 --> 00:10:11,689
process and we tell it with method which

00:10:09,800 --> 00:10:15,019
methods are going to be exposed in this

00:10:11,689 --> 00:10:16,310
case run test file and then we just call

00:10:15,019 --> 00:10:19,639
it the number of times that we need it

00:10:16,310 --> 00:10:21,560
and behind the scenes just worker will

00:10:19,639 --> 00:10:24,800
take care of or of all the orchestration

00:10:21,560 --> 00:10:29,660
and making sure that it spin-ups all the

00:10:24,800 --> 00:10:31,670
independent node processes so that's how

00:10:29,660 --> 00:10:35,089
you cherry pick a specific feature of

00:10:31,670 --> 00:10:38,209
just now let's take a look at putting

00:10:35,089 --> 00:10:39,589
your tool on top of just this is great

00:10:38,209 --> 00:10:43,850
because it brings a lot of the features

00:10:39,589 --> 00:10:45,439
that just give to your tool so to better

00:10:43,850 --> 00:10:49,100
understand this let's take a look at the

00:10:45,439 --> 00:10:52,910
lifecycle off a test run it happens in

00:10:49,100 --> 00:10:55,850
three steps first of all just finds your

00:10:52,910 --> 00:10:58,670
test files then it runs your tests and

00:10:55,850 --> 00:11:00,259
at the end is report the results and as

00:10:58,670 --> 00:11:02,509
you can see a lot of the heavy lifting

00:11:00,259 --> 00:11:05,089
it's happening when just is either

00:11:02,509 --> 00:11:06,230
finding the test files or reporting the

00:11:05,089 --> 00:11:08,930
test results

00:11:06,230 --> 00:11:11,660
so imagine if we could swap that little

00:11:08,930 --> 00:11:12,380
part also known as the runner for our

00:11:11,660 --> 00:11:14,510
own tool

00:11:12,380 --> 00:11:19,130
this means that Jess would do all the

00:11:14,510 --> 00:11:20,960
fancy work for us so up until now we've

00:11:19,130 --> 00:11:23,630
been talking about justice platform and

00:11:20,960 --> 00:11:26,300
we introduced this concept of the

00:11:23,630 --> 00:11:27,890
runners and just runners but how does

00:11:26,300 --> 00:11:29,750
this look in practice I'm sure that at

00:11:27,890 --> 00:11:31,970
this point a lot of you are thinking

00:11:29,750 --> 00:11:34,220
like sure just it's nice but we have

00:11:31,970 --> 00:11:35,990
these like at work we have this mocha

00:11:34,220 --> 00:11:39,170
codebase and we cannot just migrate it

00:11:35,990 --> 00:11:41,510
to just and mocha is actually a great

00:11:39,170 --> 00:11:44,570
example of something that could leverage

00:11:41,510 --> 00:11:47,720
just so imagine if we could keep mocha

00:11:44,570 --> 00:11:51,320
as our test framework and use just for

00:11:47,720 --> 00:11:53,000
the rest and this is great because it

00:11:51,320 --> 00:11:57,140
allows us to migrate code bases without

00:11:53,000 --> 00:11:58,070
changing almost any code so let's take a

00:11:57,140 --> 00:12:03,200
look at how this looks

00:11:58,070 --> 00:12:06,320
it's still pretty abstract here we have

00:12:03,200 --> 00:12:08,830
our same emoji cinema application but in

00:12:06,320 --> 00:12:12,290
this case is using mocha instead of just

00:12:08,830 --> 00:12:14,570
so in order to are to add just an hour

00:12:12,290 --> 00:12:18,260
bokeh runner we simply add them as a

00:12:14,570 --> 00:12:24,020
dependency and then we tell just to use

00:12:18,260 --> 00:12:26,360
that given runner so here we have our

00:12:24,020 --> 00:12:28,250
same search movies test file but in this

00:12:26,360 --> 00:12:33,380
case is using the assert library to make

00:12:28,250 --> 00:12:34,940
it work with mocha first we're gonna

00:12:33,380 --> 00:12:39,800
start mocha to make sure that everything

00:12:34,940 --> 00:12:44,200
is working and now we're gonna go ahead

00:12:39,800 --> 00:12:44,200
and start just in watch mode

00:12:46,950 --> 00:12:53,190
as you can see it picked up the file and

00:12:49,650 --> 00:12:56,520
executed that book a test and if we make

00:12:53,190 --> 00:12:58,860
changes Jess will report the appropriate

00:12:56,520 --> 00:13:00,690
result and it will pick up the changes

00:12:58,860 --> 00:13:03,000
with the watch mode it even works with

00:13:00,690 --> 00:13:05,370
code coverage because it's leveraging

00:13:03,000 --> 00:13:07,050
the coverage reporting that just gives

00:13:05,370 --> 00:13:11,610
us so it works out of the box also with

00:13:07,050 --> 00:13:13,920
code coverage so we just saw how we can

00:13:11,610 --> 00:13:16,800
completely swap the test framework and

00:13:13,920 --> 00:13:18,150
keep just for the rest but the cool

00:13:16,800 --> 00:13:20,400
thing here is that we can swap it for

00:13:18,150 --> 00:13:22,050
way more than that and for this we're

00:13:20,400 --> 00:13:25,500
gonna need to start thinking of just

00:13:22,050 --> 00:13:29,310
less s a testing platform and more s a

00:13:25,500 --> 00:13:32,010
tooling platform so let's use iya Slynt

00:13:29,310 --> 00:13:35,220
for this example it's a great tool that

00:13:32,010 --> 00:13:38,010
we all use but it could also leverage

00:13:35,220 --> 00:13:44,280
some of just features specifically the

00:13:38,010 --> 00:13:48,300
watch mode and parallelization Airbnb

00:13:44,280 --> 00:13:51,720
also started using this so let's see

00:13:48,300 --> 00:13:54,690
what it takes to set up just with the

00:13:51,720 --> 00:13:58,110
affluent so this is gonna be the same as

00:13:54,690 --> 00:14:00,780
what we need for our Boca Runner where

00:13:58,110 --> 00:14:03,000
we can add just an aria Flint runner as

00:14:00,780 --> 00:14:06,660
a dependency and then we're gonna tell

00:14:03,000 --> 00:14:09,480
just to use this given runner here we're

00:14:06,660 --> 00:14:10,980
also telling it to use a dis display

00:14:09,480 --> 00:14:13,860
name that is going to give us a nice

00:14:10,980 --> 00:14:15,150
identifier when we run our tests and

00:14:13,860 --> 00:14:16,770
we're also going to tell it to look at

00:14:15,150 --> 00:14:22,230
all the JavaScript files are not only

00:14:16,770 --> 00:14:27,000
the test files so if we start just in

00:14:22,230 --> 00:14:28,980
watch mode will see that it found all of

00:14:27,000 --> 00:14:31,590
our test files and reported the es Flint

00:14:28,980 --> 00:14:33,930
Earth and as we make changes

00:14:31,590 --> 00:14:36,720
des will pick it up and use that Runner

00:14:33,930 --> 00:14:39,720
and report the es lien errors and we can

00:14:36,720 --> 00:14:42,300
even use the filtering mechanism that

00:14:39,720 --> 00:14:48,600
just provides to only run a splint on

00:14:42,300 --> 00:14:53,430
that given like one file so if we could

00:14:48,600 --> 00:14:55,020
use just runners for mocha and for es

00:14:53,430 --> 00:14:57,900
lint it probably means that we can use

00:14:55,020 --> 00:15:00,420
it for way more than that for example we

00:14:57,900 --> 00:15:03,370
could use it to run Python tests

00:15:00,420 --> 00:15:05,880
here's an example of just running Python

00:15:03,370 --> 00:15:05,880
tests

00:15:13,260 --> 00:15:18,990
so we've been talking about different

00:15:15,920 --> 00:15:20,520
just runners but it seems about time

00:15:18,990 --> 00:15:23,010
that we start writing our own just

00:15:20,520 --> 00:15:27,960
runner in this case we're gonna write a

00:15:23,010 --> 00:15:32,190
Blade Runner so imagine that we have

00:15:27,960 --> 00:15:35,640
this company policy that says that every

00:15:32,190 --> 00:15:38,040
file needs to have these two emojis and

00:15:35,640 --> 00:15:40,650
if it doesn't have them then it will

00:15:38,040 --> 00:15:45,600
fail and if it has them then it will

00:15:40,650 --> 00:15:47,370
pass so how do we write such a thing for

00:15:45,600 --> 00:15:50,910
these let's take a look again at the

00:15:47,370 --> 00:15:56,040
life cycle of a test run specifically at

00:15:50,910 --> 00:16:00,240
the runner part first just gives a list

00:15:56,040 --> 00:16:02,360
of files to the runner and then in this

00:16:00,240 --> 00:16:04,950
case Blade Runner will spin up

00:16:02,360 --> 00:16:07,530
independent processes for each file on

00:16:04,950 --> 00:16:09,810
each of them it's gonna check for the

00:16:07,530 --> 00:16:14,280
presence of the emoji and then it's

00:16:09,810 --> 00:16:17,850
gonna report back the results so this

00:16:14,280 --> 00:16:20,940
happens mainly in two parts the first

00:16:17,850 --> 00:16:23,820
one which is the entry file this is what

00:16:20,940 --> 00:16:25,740
just is gonna be talking to and the

00:16:23,820 --> 00:16:27,870
second one is gonna be a worker file

00:16:25,740 --> 00:16:30,810
which we're gonna have in a run j/s file

00:16:27,870 --> 00:16:32,700
and it's gonna get instantiated once per

00:16:30,810 --> 00:16:35,400
file and it's gonna be responsible of

00:16:32,700 --> 00:16:39,030
running the test for that given file it

00:16:35,400 --> 00:16:42,420
has a domain of a runner and as you can

00:16:39,030 --> 00:16:44,070
imagine there's a lot of interesting

00:16:42,420 --> 00:16:46,740
stuff that needs to happen in between

00:16:44,070 --> 00:16:49,080
these two parts for example handling

00:16:46,740 --> 00:16:51,090
test interruption or make or like

00:16:49,080 --> 00:16:53,940
keeping just up to date which with the

00:16:51,090 --> 00:16:55,550
status of each test file or speeding up

00:16:53,940 --> 00:16:58,650
the correct number of workers and

00:16:55,550 --> 00:17:02,220
cleaning them up afterwards also

00:16:58,650 --> 00:17:04,440
reporting the test results to just so I

00:17:02,220 --> 00:17:06,630
created this small module called create

00:17:04,440 --> 00:17:10,050
chess runner which basically works

00:17:06,630 --> 00:17:12,360
pretty similar to just worker where we

00:17:10,050 --> 00:17:15,090
provide a path to a node module and

00:17:12,360 --> 00:17:18,000
behind the scenes create Jeff's Runner

00:17:15,090 --> 00:17:19,950
will take care of paralyzing it speeding

00:17:18,000 --> 00:17:23,160
up the workers and orchestrating all of

00:17:19,950 --> 00:17:27,110
it for us so let's go ahead and

00:17:23,160 --> 00:17:27,110
implement our Blade Runner

00:17:27,570 --> 00:17:31,990
we're gonna start with our entry file

00:17:29,920 --> 00:17:35,410
remember this is what just is gonna be

00:17:31,990 --> 00:17:37,840
talking to the only thing that we need

00:17:35,410 --> 00:17:40,030
to do is we are gonna require create

00:17:37,840 --> 00:17:42,210
Jeff's Runner and then we're gonna call

00:17:40,030 --> 00:17:45,700
it with the pass to our run file

00:17:42,210 --> 00:17:47,170
remember this is a file that is gonna

00:17:45,700 --> 00:17:52,090
get exit like that it's gonna getting

00:17:47,170 --> 00:17:54,640
potentiated once per test file and if we

00:17:52,090 --> 00:17:56,770
take a look at our run file it's a

00:17:54,640 --> 00:17:59,650
function though among other things it

00:17:56,770 --> 00:18:03,970
will receive a path to the test file

00:17:59,650 --> 00:18:05,770
that we're running and then on it we're

00:18:03,970 --> 00:18:08,110
simply going to check for the contents

00:18:05,770 --> 00:18:11,080
of that file we're gonna check if it

00:18:08,110 --> 00:18:14,190
includes those two emojis and then we're

00:18:11,080 --> 00:18:16,780
gonna return either pass or fail and

00:18:14,190 --> 00:18:19,540
create create Jeff's Runner also has

00:18:16,780 --> 00:18:21,010
this pass and fail function which is the

00:18:19,540 --> 00:18:22,540
only thing that they do is normalize the

00:18:21,010 --> 00:18:26,650
data to the format that just is

00:18:22,540 --> 00:18:32,620
expecting so now that we have our Runner

00:18:26,650 --> 00:18:38,350
let's go ahead and use it we'll start

00:18:32,620 --> 00:18:39,910
just in watch mode and in this case

00:18:38,350 --> 00:18:43,090
we're also going to tell it to look only

00:18:39,910 --> 00:18:45,760
at the search movies files so you can

00:18:43,090 --> 00:18:47,710
see it found our two files and as we

00:18:45,760 --> 00:18:51,870
start making changes on them and adding

00:18:47,710 --> 00:18:51,870
those two emojis they start to pass

00:18:56,909 --> 00:19:05,320
so that was Blade Runner and up until

00:19:02,230 --> 00:19:08,139
now we've been looking at this three

00:19:05,320 --> 00:19:11,590
different runners and each of them look

00:19:08,139 --> 00:19:13,749
as completely independent projects but

00:19:11,590 --> 00:19:16,779
for them we're always modifying the same

00:19:13,749 --> 00:19:18,490
package adjacent which makes it hard to

00:19:16,779 --> 00:19:24,249
have them in our code base at the same

00:19:18,490 --> 00:19:28,059
time for this just allows us to move

00:19:24,249 --> 00:19:31,690
these configurations out of the package

00:19:28,059 --> 00:19:36,039
JSON and into config configuration files

00:19:31,690 --> 00:19:40,360
for example for mocha we're gonna move

00:19:36,039 --> 00:19:42,070
it to a just mocha config yes four es

00:19:40,360 --> 00:19:45,970
Flint runner we're gonna move it to a

00:19:42,070 --> 00:19:48,190
just es lint comfy KS and for a Blade

00:19:45,970 --> 00:19:50,879
Runner we're gonna move it to a just

00:19:48,190 --> 00:19:53,740
blade config yes

00:19:50,879 --> 00:19:57,039
so now that we have them in independent

00:19:53,740 --> 00:19:59,289
config files it means that we can use

00:19:57,039 --> 00:20:02,559
them all together and the cool thing

00:19:59,289 --> 00:20:05,590
here is the just allows us to load them

00:20:02,559 --> 00:20:08,649
all up concurrently using a single

00:20:05,590 --> 00:20:14,169
instance of just let's take a look at

00:20:08,649 --> 00:20:15,850
how this look how this works so we'll go

00:20:14,169 --> 00:20:17,710
ahead and start just in watch mode and

00:20:15,850 --> 00:20:19,749
we're gonna tell it to look at different

00:20:17,710 --> 00:20:24,480
projects in this case all the ones that

00:20:19,749 --> 00:20:27,309
have just that something convict is and

00:20:24,480 --> 00:20:28,960
as you can see it founded three projects

00:20:27,309 --> 00:20:32,350
and as we make changes in one of the

00:20:28,960 --> 00:20:35,249
files only the appropriate one will

00:20:32,350 --> 00:20:35,249
report the correct earth

00:20:45,100 --> 00:20:50,980
so what's next as you can imagine this

00:20:48,070 --> 00:20:55,960
is just the beginning of just runners

00:20:50,980 --> 00:20:58,720
and also of just as a platform the

00:20:55,960 --> 00:21:01,809
applications here are way wider than

00:20:58,720 --> 00:21:03,460
what I showed and this is an open area

00:21:01,809 --> 00:21:09,779
of research that I'm really excited

00:21:03,460 --> 00:21:09,779
about that's it thanks for everything

00:21:19,740 --> 00:21:25,990
right here oh good good so thank you

00:21:25,390 --> 00:21:29,950
very much

00:21:25,990 --> 00:21:31,720
let's go further questions ended a bit

00:21:29,950 --> 00:21:33,940
sooner so is it the backstay sorry for

00:21:31,720 --> 00:21:36,970
that yeah good so let's go for the

00:21:33,940 --> 00:21:43,150
questions question number one how is it

00:21:36,970 --> 00:21:49,720
different from docker sorry in a lot of

00:21:43,150 --> 00:21:53,500
ways yeah would you like to share more

00:21:49,720 --> 00:21:57,340
specific colleagues so they're really

00:21:53,500 --> 00:21:58,810
different so docker those of you they're

00:21:57,340 --> 00:22:01,720
not familiar with is this container

00:21:58,810 --> 00:22:05,110
runtime that allows you to create things

00:22:01,720 --> 00:22:07,210
in a container to run things in an

00:22:05,110 --> 00:22:08,440
isolated environment and to create like

00:22:07,210 --> 00:22:11,230
reproducible environments for your

00:22:08,440 --> 00:22:13,750
application welljust is more of a test

00:22:11,230 --> 00:22:16,450
runner or a test framework or now a test

00:22:13,750 --> 00:22:17,860
platform for some reason the next

00:22:16,450 --> 00:22:19,830
question is so what's the emoji

00:22:17,860 --> 00:22:23,260
representation of the movie hostel oh

00:22:19,830 --> 00:22:26,920
I'm not gonna go there I think that's a

00:22:23,260 --> 00:22:29,320
very smart decision you say it six times

00:22:26,920 --> 00:22:31,660
faster compared to what what was the

00:22:29,320 --> 00:22:33,790
previous set up right so before that we

00:22:31,660 --> 00:22:37,780
were using some in-house wiring off a

00:22:33,790 --> 00:22:40,000
lot of tools and so that was super

00:22:37,780 --> 00:22:42,130
specific like it was something that we

00:22:40,000 --> 00:22:44,350
wired off together are you seeing karma

00:22:42,130 --> 00:22:46,960
and mocha and sin on but they were all

00:22:44,350 --> 00:22:48,760
great tools but our setup that we had

00:22:46,960 --> 00:22:51,010
was fairly bad just because how we wired

00:22:48,760 --> 00:22:53,680
up to because of how we wired up

00:22:51,010 --> 00:22:55,690
together the next one how is just

00:22:53,680 --> 00:22:56,950
getting along with angularjs and its own

00:22:55,690 --> 00:23:01,870
dependency injection

00:22:56,950 --> 00:23:05,170
oh I'm not super familiar with that so

00:23:01,870 --> 00:23:06,400
we can sync up downstairs yeah to be

00:23:05,170 --> 00:23:08,170
honest I'm not super familiar to answer

00:23:06,400 --> 00:23:10,450
that question but just tries to be a

00:23:08,170 --> 00:23:12,880
Cygnus takus possible then just be at a

00:23:10,450 --> 00:23:15,670
JavaScript layer rather than attached to

00:23:12,880 --> 00:23:20,200
any framework the next one why not ends

00:23:15,670 --> 00:23:22,570
in but just so enzyme can be used with

00:23:20,200 --> 00:23:25,120
just an enzyme is released an amazing

00:23:22,570 --> 00:23:27,370
library for testing your reactor

00:23:25,120 --> 00:23:28,870
components which can be used with just

00:23:27,370 --> 00:23:31,180
which is just something

00:23:28,870 --> 00:23:33,160
that runs your tests and executes them

00:23:31,180 --> 00:23:35,350
but it can more than happily be used

00:23:33,160 --> 00:23:40,390
with enzyme can you have multiple

00:23:35,350 --> 00:23:42,430
runners yes I guess that was before the

00:23:40,390 --> 00:23:44,710
last slide where we showed there

00:23:42,430 --> 00:23:46,470
multiple runners at the same time it's a

00:23:44,710 --> 00:23:48,460
better web peg integration coming soon

00:23:46,470 --> 00:23:50,020
right so that's the part that I'm really

00:23:48,460 --> 00:23:51,760
excited about like what are all these

00:23:50,020 --> 00:23:54,520
crazy things that can be used as a

00:23:51,760 --> 00:23:55,900
runner and I think webpack sounds

00:23:54,520 --> 00:24:00,190
interesting but like what are all those

00:23:55,900 --> 00:24:04,000
sinks were what a runner could be an

00:24:00,190 --> 00:24:08,890
interesting solution for why should I

00:24:04,000 --> 00:24:11,170
use just over mocha oh I think they're

00:24:08,890 --> 00:24:12,850
trying to solve different things and I

00:24:11,170 --> 00:24:15,880
don't think that you should just use

00:24:12,850 --> 00:24:17,470
just over mocha or vice versa and I

00:24:15,880 --> 00:24:20,110
think my answer here would be fairly

00:24:17,470 --> 00:24:22,690
biased but I think just tries to solve

00:24:20,110 --> 00:24:24,100
more array like platform level and again

00:24:22,690 --> 00:24:29,320
here we showed how you could still use

00:24:24,100 --> 00:24:35,770
mocha unjust and ya can use karma as a

00:24:29,320 --> 00:24:39,370
runner mmm good question yeah I'm not

00:24:35,770 --> 00:24:42,360
sure anything is it possible to create

00:24:39,370 --> 00:24:45,610
été test with it or is it just for units

00:24:42,360 --> 00:24:47,470
so end to end test like if you're using

00:24:45,610 --> 00:24:48,970
something like night watch I think that

00:24:47,470 --> 00:24:50,920
it will be also something interesting to

00:24:48,970 --> 00:24:52,420
have eventually like as a runner well

00:24:50,920 --> 00:24:55,480
you would leverage all of these watch

00:24:52,420 --> 00:24:55,870
mode and you can still run night watch

00:24:55,480 --> 00:24:57,940
tests

00:24:55,870 --> 00:24:59,740
they'll be fairly interesting where the

00:24:57,940 --> 00:25:04,390
current shortcomings of just as a

00:24:59,740 --> 00:25:06,429
platform I think that it's still a

00:25:04,390 --> 00:25:09,280
fairly new it's a super new thing which

00:25:06,429 --> 00:25:10,600
means that a lot of the things have and

00:25:09,280 --> 00:25:12,970
a lot of the ways where it needs to

00:25:10,600 --> 00:25:16,390
mature are still not well-defined and

00:25:12,970 --> 00:25:18,130
it's only like as the committee gets

00:25:16,390 --> 00:25:19,840
more involved and this starts to mature

00:25:18,130 --> 00:25:23,260
that will realize like what are the

00:25:19,840 --> 00:25:25,179
shortcomings right now for example it

00:25:23,260 --> 00:25:27,700
has some really tight coupling with like

00:25:25,179 --> 00:25:29,290
you're just like we I want to one

00:25:27,700 --> 00:25:32,250
mapping off like a test fit to a test

00:25:29,290 --> 00:25:34,510
file and there's a lot of things that

00:25:32,250 --> 00:25:36,220
Jess needs to improve to be like better

00:25:34,510 --> 00:25:38,620
provide all of this and that should just

00:25:36,220 --> 00:25:41,980
happen over time so we have time for two

00:25:38,620 --> 00:25:42,849
more questions number one what apps do

00:25:41,980 --> 00:25:46,359
you use

00:25:42,849 --> 00:25:51,129
just for at docker we use it for all of

00:25:46,359 --> 00:25:52,570
our front-end applications which two of

00:25:51,129 --> 00:25:53,949
them are entered on the enterprise side

00:25:52,570 --> 00:25:57,009
and two of them are in there like

00:25:53,949 --> 00:25:58,779
software as a service side and why

00:25:57,009 --> 00:26:03,549
should you use just when walk I can also

00:25:58,779 --> 00:26:05,289
run on washed modes so just it's not

00:26:03,549 --> 00:26:08,199
that you have to use just again the so

00:26:05,289 --> 00:26:08,829
just gives you a lot of or tries to give

00:26:08,199 --> 00:26:12,159
you a lot of like they're

00:26:08,829 --> 00:26:16,119
parallelization and a lot of I watch

00:26:12,159 --> 00:26:17,739
more to like filter and be able to so

00:26:16,119 --> 00:26:19,569
it's it's a matter of it's not a

00:26:17,739 --> 00:26:22,449
one-to-one like you should use one over

00:26:19,569 --> 00:26:23,679
the other one great cool Raquel you're

00:26:22,449 --> 00:26:27,899
thank you very much for your time and

00:26:23,679 --> 00:26:27,899
please give it up for him thank you

00:26:34,240 --> 00:26:36,300

YouTube URL: https://www.youtube.com/watch?v=NtjyeojAOBs


