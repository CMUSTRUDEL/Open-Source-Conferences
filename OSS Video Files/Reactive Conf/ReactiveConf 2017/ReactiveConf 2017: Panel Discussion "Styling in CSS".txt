Title: ReactiveConf 2017: Panel Discussion "Styling in CSS"
Publication date: 2017-11-20
Playlist: ReactiveConf 2017
Description: 
	Javi Velasco
Richard Feldman
Oleg Slobodskoi
Sarah Drasner
Robin Frischmann
Gerard Sans
Andrey Sitnik

Discovery stage

https://reactiveconf.com/
25th - 27th October 2017, Bratislava, Slovakia
Captions: 
	00:00:02,500 --> 00:00:08,639
[Music]

00:00:14,570 --> 00:00:23,630
well hello everyone how are you doing

00:00:18,460 --> 00:00:25,820
great I mean the conference is fantastic

00:00:23,630 --> 00:00:29,779
I don't know if you agree with me but

00:00:25,820 --> 00:00:33,200
I've I love you know the big screen on

00:00:29,779 --> 00:00:35,420
the main stage the food the coffee I

00:00:33,200 --> 00:00:37,579
mean there are so many things great

00:00:35,420 --> 00:00:41,630
things about this conference well now we

00:00:37,579 --> 00:00:44,780
are going to talk about CSS and we have

00:00:41,630 --> 00:00:49,100
this panelist and we are really honored

00:00:44,780 --> 00:00:53,590
to have them today and I'm going to

00:00:49,100 --> 00:00:56,540
start asking you for a little intro and

00:00:53,590 --> 00:01:00,350
then maybe you can you can tell me

00:00:56,540 --> 00:01:02,690
something about CSS that you have been

00:01:00,350 --> 00:01:06,079
exploring or maybe experimenting

00:01:02,690 --> 00:01:11,450
recently how about that you want to

00:01:06,079 --> 00:01:13,369
start sure hi I'm Richard Feldman so I'm

00:01:11,450 --> 00:01:15,200
the maintainer of LM CSS which is sort

00:01:13,369 --> 00:01:18,259
of CSS and L I'm giving a lightning talk

00:01:15,200 --> 00:01:20,530
on that a little bit later today my talk

00:01:18,259 --> 00:01:23,060
tomorrow is called CSS as byte code

00:01:20,530 --> 00:01:26,510
which is sort of like an even crazier

00:01:23,060 --> 00:01:28,460
thing than that sort of reimagining CSS

00:01:26,510 --> 00:01:30,620
and saying what if we just compiled to

00:01:28,460 --> 00:01:35,530
CSS and didn't even think in terms of

00:01:30,620 --> 00:01:37,640
CSS semantics so I guess most of my

00:01:35,530 --> 00:01:40,150
relationship with sort of the nuts and

00:01:37,640 --> 00:01:43,010
bolts of CSS has come through LM CSS and

00:01:40,150 --> 00:01:44,690
working on making it so that at build

00:01:43,010 --> 00:01:46,520
time it validates as much as possible

00:01:44,690 --> 00:01:49,850
about your CSS code so that it generates

00:01:46,520 --> 00:01:51,920
valid CSS so I had a lot of experience

00:01:49,850 --> 00:01:57,799
diving into corners of the CSS spec

00:01:51,920 --> 00:02:00,470
doing that cool my name is Sarah I work

00:01:57,799 --> 00:02:03,110
for a staff writer for CSS tricks so if

00:02:00,470 --> 00:02:05,090
you ever like google flexbox and how to

00:02:03,110 --> 00:02:07,970
work with it you probably have landed on

00:02:05,090 --> 00:02:09,709
our site I think like next to that page

00:02:07,970 --> 00:02:11,390
for me it's like you visited this too

00:02:09,709 --> 00:02:16,129
many times no you should commit this to

00:02:11,390 --> 00:02:18,560
memory I also wrote a book called SVG

00:02:16,129 --> 00:02:20,780
animations for O'Reilly and I'm a senior

00:02:18,560 --> 00:02:23,599
cloud developer advocate for Microsoft

00:02:20,780 --> 00:02:26,360
which means that I actually work a lot

00:02:23,599 --> 00:02:28,540
as a developer advocate for things like

00:02:26,360 --> 00:02:32,690
or lists and stuff with Asher

00:02:28,540 --> 00:02:35,330
technologies hi everyone my name is

00:02:32,690 --> 00:02:37,520
Andre CJ i'm creator of post CSS and

00:02:35,330 --> 00:02:40,480
like recent things that i found in CSS

00:02:37,520 --> 00:02:42,680
that they plan to rename color icon

00:02:40,480 --> 00:02:46,700
function to change the colors color

00:02:42,680 --> 00:02:49,700
function to color mode because I think

00:02:46,700 --> 00:02:53,920
Safari they still the name the implement

00:02:49,700 --> 00:02:58,250
already a color function it's taken

00:02:53,920 --> 00:03:01,220
so one thing we we have a new guest so

00:02:58,250 --> 00:03:03,260
he was an originally a plan to

00:03:01,220 --> 00:03:05,209
participate but we thought that he was a

00:03:03,260 --> 00:03:08,630
really key you know

00:03:05,209 --> 00:03:11,530
panelist to be here today so he was kind

00:03:08,630 --> 00:03:15,920
to join us thank you

00:03:11,530 --> 00:03:20,000
everyone my name is Oleg and a couple of

00:03:15,920 --> 00:03:24,230
years ago in 2014 I wrote a library as

00:03:20,000 --> 00:03:27,110
an experiment which is called JSS and so

00:03:24,230 --> 00:03:31,220
since then I'm like trying to convince

00:03:27,110 --> 00:03:34,100
people to use CSS in JavaScript and I

00:03:31,220 --> 00:03:37,190
failed all the time so today at 5 p.m. I

00:03:34,100 --> 00:03:42,830
tried to make it right and actually

00:03:37,190 --> 00:03:45,650
explain it hi everybody I am Holly

00:03:42,830 --> 00:03:47,540
Alaska I am the author of library called

00:03:45,650 --> 00:03:50,330
react to books which is a material

00:03:47,540 --> 00:03:53,870
design UI kit it was implemented

00:03:50,330 --> 00:03:55,880
initially using CSS modules but that's

00:03:53,870 --> 00:03:59,330
why I've been struggling for almost two

00:03:55,880 --> 00:04:01,519
years basically as a consumer of all of

00:03:59,330 --> 00:04:03,410
these libraries on how can I build

00:04:01,519 --> 00:04:05,900
components that are really customizable

00:04:03,410 --> 00:04:13,220
so and basically experience with that

00:04:05,900 --> 00:04:16,190
kind of of mess and I'm Robin and just

00:04:13,220 --> 00:04:19,850
like oh like I'm also trying to convince

00:04:16,190 --> 00:04:25,190
people to use CSS in chess and yeah I

00:04:19,850 --> 00:04:28,550
think that's it ok so maybe that's

00:04:25,190 --> 00:04:31,970
probably a good topic to start with so

00:04:28,550 --> 00:04:36,140
we have seen a lot of new libraries

00:04:31,970 --> 00:04:38,249
focused on using CSS in and then you put

00:04:36,140 --> 00:04:41,099
you know JavaScript or

00:04:38,249 --> 00:04:44,099
Elm or other languages and this is a

00:04:41,099 --> 00:04:48,859
this is excited exciting a movement from

00:04:44,099 --> 00:04:53,699
what is more like the static approach so

00:04:48,859 --> 00:05:02,969
let's let's start saying our CSS files

00:04:53,699 --> 00:05:10,860
that maybe was too much someone wants to

00:05:02,969 --> 00:05:13,829
take that statement basically what is

00:05:10,860 --> 00:05:16,860
bad or good is not up to us to decide

00:05:13,829 --> 00:05:19,019
it's highly dependent on what do you do

00:05:16,860 --> 00:05:20,969
how many people are working with it what

00:05:19,019 --> 00:05:24,779
problems do you have in order to keep it

00:05:20,969 --> 00:05:27,409
running updated you know so by by

00:05:24,779 --> 00:05:32,909
default it's not bad

00:05:27,409 --> 00:05:38,009
okay interesting any anyone wants to

00:05:32,909 --> 00:05:44,129
jump on the no more CSS files or like

00:05:38,009 --> 00:05:48,599
against it that I don't use as files in

00:05:44,129 --> 00:05:51,209
my project I dot J's files but I found a

00:05:48,599 --> 00:05:55,110
very good solution like the end of the

00:05:51,209 --> 00:05:58,199
CSS yes yes what it's called emotions

00:05:55,110 --> 00:06:00,629
yes and it has extract static mode that

00:05:58,199 --> 00:06:02,639
like if you have a JavaScript file they

00:06:00,629 --> 00:06:06,869
use a babel plugin to extract these

00:06:02,639 --> 00:06:08,999
styles put a static CSS file and then

00:06:06,869 --> 00:06:11,099
you have a full power of both techniques

00:06:08,999 --> 00:06:13,349
especially with custom properties you

00:06:11,099 --> 00:06:16,169
have a dynamic properties and you have

00:06:13,349 --> 00:06:18,569
of course processes plugins and you have

00:06:16,169 --> 00:06:23,849
static CSS that can be used in browser

00:06:18,569 --> 00:06:25,199
immediately without compilation so I've

00:06:23,849 --> 00:06:27,329
been talking to a lot of people about

00:06:25,199 --> 00:06:28,529
this because we've been kind of trying

00:06:27,329 --> 00:06:31,889
to decide what direction

00:06:28,529 --> 00:06:33,779
LM CSS should go in and something that

00:06:31,889 --> 00:06:36,509
has been sort of surprising to me is

00:06:33,779 --> 00:06:38,429
trying to nail down like what are your

00:06:36,509 --> 00:06:41,639
projects constraints if you're like I

00:06:38,429 --> 00:06:45,779
must use CSS files and I haven't really

00:06:41,639 --> 00:06:47,789
found a good example of that yet other

00:06:45,779 --> 00:06:49,589
than maybe you need to target devices

00:06:47,789 --> 00:06:51,250
where javascript is disabled which i

00:06:49,589 --> 00:06:53,710
guess okay fair enough

00:06:51,250 --> 00:06:55,960
but really it's like okay so if you need

00:06:53,710 --> 00:06:58,390
to optimize for initial page load time

00:06:55,960 --> 00:07:00,490
then you probably want to use something

00:06:58,390 --> 00:07:03,010
that's like CSS and j/s or CSS an elm

00:07:00,490 --> 00:07:04,870
because that lets you do critical CSS

00:07:03,010 --> 00:07:07,090
and that's like the best way to get the

00:07:04,870 --> 00:07:09,550
fastest initial page load and if you

00:07:07,090 --> 00:07:10,870
need to optimize for download size

00:07:09,550 --> 00:07:13,660
across multiple visits

00:07:10,870 --> 00:07:15,430
well the jas is gonna be cached the same

00:07:13,660 --> 00:07:17,530
way the CSS is gonna be cached like the

00:07:15,430 --> 00:07:19,150
static assets and probably if you're

00:07:17,530 --> 00:07:20,950
changing the j/s you're also changing

00:07:19,150 --> 00:07:22,480
the CSS and vice versa so having them in

00:07:20,950 --> 00:07:24,640
a separate file is not necessarily a big

00:07:22,480 --> 00:07:26,980
win so it seems pretty hard to narrow

00:07:24,640 --> 00:07:29,560
down like what is it getting you that

00:07:26,980 --> 00:07:31,810
you couldn't already have by doing it at

00:07:29,560 --> 00:07:33,370
run time I haven't really heard a good

00:07:31,810 --> 00:07:34,720
answer to that so far maybe somebody's

00:07:33,370 --> 00:07:38,320
got a really compelling use case that I

00:07:34,720 --> 00:07:41,950
haven't heard of though okay we have a

00:07:38,320 --> 00:07:44,860
pro what about performance if you doing

00:07:41,950 --> 00:07:46,480
this in the run time you anyway there's

00:07:44,860 --> 00:07:48,670
two questions first performance because

00:07:46,480 --> 00:07:51,760
if you don't have a server-side render

00:07:48,670 --> 00:07:54,010
you have an empty page but if you do a

00:07:51,760 --> 00:07:57,580
service render there is a good idea that

00:07:54,010 --> 00:08:00,910
all the all things about programming is

00:07:57,580 --> 00:08:03,460
to keep technology simple this is a our

00:08:00,910 --> 00:08:05,290
main goal and so if you need a

00:08:03,460 --> 00:08:07,390
server-side render a lot of techniques

00:08:05,290 --> 00:08:14,110
just to have the same power as you have

00:08:07,390 --> 00:08:17,470
in CSS files why is this complexity so

00:08:14,110 --> 00:08:19,300
from my perspective if you need

00:08:17,470 --> 00:08:21,730
server-side rendering to optimize for

00:08:19,300 --> 00:08:24,490
performance then like okay that's fine

00:08:21,730 --> 00:08:26,680
in terms of like complexity I mean so I

00:08:24,490 --> 00:08:29,169
might like someone who's an old

00:08:26,680 --> 00:08:31,990
programmer I mean I might turn that

00:08:29,169 --> 00:08:33,700
around and say like if we want to if we

00:08:31,990 --> 00:08:35,050
want to say why are these things so

00:08:33,700 --> 00:08:37,120
complex you might even go further and

00:08:35,050 --> 00:08:41,950
ask the question that might talk

00:08:37,120 --> 00:08:43,870
tomorrow we'll ask which is why CSS so

00:08:41,950 --> 00:08:45,310
yeah I mean I agree it's like it's an

00:08:43,870 --> 00:08:47,140
important question to ask like you know

00:08:45,310 --> 00:08:48,730
it's not not just performance

00:08:47,140 --> 00:08:50,410
considerations but also like what's the

00:08:48,730 --> 00:08:51,850
developer experience like but I think

00:08:50,410 --> 00:08:53,800
that we have a lot of tools for

00:08:51,850 --> 00:08:55,510
compiling to these things at whatever

00:08:53,800 --> 00:08:57,490
different levels to improve developer

00:08:55,510 --> 00:08:59,140
experience and I think it's it's fine to

00:08:57,490 --> 00:09:01,060
say if if server-side rendering seems

00:08:59,140 --> 00:09:02,350
like a bridge too far right now then

00:09:01,060 --> 00:09:03,310
like how can we make that easier to

00:09:02,350 --> 00:09:05,199
actually make the developer experience

00:09:03,310 --> 00:09:08,720
better there

00:09:05,199 --> 00:09:10,970
very good so I I was thinking as well

00:09:08,720 --> 00:09:14,420
when I was preparing kind of the topics

00:09:10,970 --> 00:09:17,629
for the panel and how how do you deal

00:09:14,420 --> 00:09:20,779
with you know different backgrounds like

00:09:17,629 --> 00:09:24,410
designers for example when you move to a

00:09:20,779 --> 00:09:28,420
more like developer environment like CSS

00:09:24,410 --> 00:09:31,939
in jjs is that a barrier for for this

00:09:28,420 --> 00:09:39,920
you know designers in the team or what's

00:09:31,939 --> 00:09:43,519
your experience in this so actually if

00:09:39,920 --> 00:09:46,310
you maybe heard my talk before we kind

00:09:43,519 --> 00:09:49,730
of had this exact problem in a project

00:09:46,310 --> 00:09:51,620
and I was working with designers who

00:09:49,730 --> 00:09:55,610
have not been very familiar with

00:09:51,620 --> 00:09:59,120
JavaScript and as we used CSS and J's

00:09:55,610 --> 00:10:01,639
this kind of got a problem in the end

00:09:59,120 --> 00:10:03,980
because they wanted to also help with

00:10:01,639 --> 00:10:07,550
the styling and they felt like

00:10:03,980 --> 00:10:12,259
uncomfortable to do this in JavaScript

00:10:07,550 --> 00:10:14,889
actually and a nice thing that we kind

00:10:12,259 --> 00:10:18,350
of came up with was to split our

00:10:14,889 --> 00:10:20,509
components into like those pure visual

00:10:18,350 --> 00:10:23,209
presence of presentational components

00:10:20,509 --> 00:10:27,199
and those more logical container

00:10:23,209 --> 00:10:29,209
components because in the end with those

00:10:27,199 --> 00:10:32,089
presentational components it's really

00:10:29,209 --> 00:10:35,209
all about your styling and the markup

00:10:32,089 --> 00:10:39,680
and this is much more simpler to learn

00:10:35,209 --> 00:10:42,470
and to get into and like two weeks after

00:10:39,680 --> 00:10:45,560
we kind of explore this the designers

00:10:42,470 --> 00:10:47,660
were actually able to kind of write

00:10:45,560 --> 00:10:50,959
their own presentational components and

00:10:47,660 --> 00:10:52,639
I think this was kind of a really good

00:10:50,959 --> 00:10:55,309
solution in the end because we could

00:10:52,639 --> 00:10:58,550
move much more faster than having like

00:10:55,309 --> 00:11:00,620
the sketch files that export some CSS

00:10:58,550 --> 00:11:02,149
and I have to put it in their components

00:11:00,620 --> 00:11:07,519
but now they could just write the

00:11:02,149 --> 00:11:10,670
components at the first hand yeah I more

00:11:07,519 --> 00:11:14,689
or less agree in the same point of view

00:11:10,670 --> 00:11:18,120
but until now when I was asked about

00:11:14,689 --> 00:11:21,480
how can a designer deal with the CSS

00:11:18,120 --> 00:11:24,180
India's I just answered that they must

00:11:21,480 --> 00:11:26,579
learn JavaScript that's I mean that's

00:11:24,180 --> 00:11:28,680
the only way to go it depends a lot on

00:11:26,579 --> 00:11:32,430
the context for example in my case I

00:11:28,680 --> 00:11:35,850
never worked with designers that write

00:11:32,430 --> 00:11:38,790
HTML and CSS before usually their role

00:11:35,850 --> 00:11:40,740
is just to give me like a PSD or a

00:11:38,790 --> 00:11:42,540
sketch file or whatever and then I write

00:11:40,740 --> 00:11:44,309
the whole code that this is not really

00:11:42,540 --> 00:11:46,920
an issue in the companies I've been

00:11:44,309 --> 00:11:49,759
working with but it is true that in the

00:11:46,920 --> 00:11:52,589
States for example it's a very regular

00:11:49,759 --> 00:11:58,050
position to be a designer that is

00:11:52,589 --> 00:12:00,420
actually writing HTML and CSS and I I'm

00:11:58,050 --> 00:12:03,569
not completely sure if this separation

00:12:00,420 --> 00:12:05,759
between presentational and container

00:12:03,569 --> 00:12:07,470
components is actually good enough

00:12:05,759 --> 00:12:09,420
because at the end they are gonna have

00:12:07,470 --> 00:12:11,670
to write some kind of logic internally

00:12:09,420 --> 00:12:13,529
to decide how the component is going to

00:12:11,670 --> 00:12:16,769
render in the end so I think that this

00:12:13,529 --> 00:12:20,730
is definitely an issue and they have to

00:12:16,769 --> 00:12:24,839
step back into just the design role more

00:12:20,730 --> 00:12:33,569
pure let's say like that or move a step

00:12:24,839 --> 00:12:35,430
forward developing apps so a couple

00:12:33,569 --> 00:12:37,589
years back I worked at a giant company

00:12:35,430 --> 00:12:40,559
where I refactored their entire code

00:12:37,589 --> 00:12:42,540
base like the component level of the

00:12:40,559 --> 00:12:46,699
codebase not you know everything but the

00:12:42,540 --> 00:12:51,449
front end and what I ended up finding

00:12:46,699 --> 00:12:54,029
was that for CSS and jeaious and those

00:12:51,449 --> 00:12:56,459
kind of solutions they're very possible

00:12:54,029 --> 00:12:58,350
for that kind of workflow but the

00:12:56,459 --> 00:12:59,879
maintainability is not something that we

00:12:58,350 --> 00:13:01,860
talk about a lot we talk a lot about

00:12:59,879 --> 00:13:03,449
writing the code and we don't talk a lot

00:13:01,860 --> 00:13:06,179
about refactoring the code once it's

00:13:03,449 --> 00:13:09,569
already there so that's the primary

00:13:06,179 --> 00:13:11,429
difference in the why I don't think that

00:13:09,569 --> 00:13:13,679
designers who are not interested in

00:13:11,429 --> 00:13:16,379
maintaining a large code base should be

00:13:13,679 --> 00:13:18,779
working with the CSS for something and

00:13:16,379 --> 00:13:22,350
again this is at scale this is not for

00:13:18,779 --> 00:13:23,250
tiny sites but because there's a certain

00:13:22,350 --> 00:13:24,360
way that we're thinking about those

00:13:23,250 --> 00:13:26,100
components in the way that they're

00:13:24,360 --> 00:13:27,120
served and the way that everything is

00:13:26,100 --> 00:13:30,660
inherited

00:13:27,120 --> 00:13:32,760
developers that over time if a designer

00:13:30,660 --> 00:13:34,920
is making something just fit and just

00:13:32,760 --> 00:13:37,410
look a certain way it might render okay

00:13:34,920 --> 00:13:39,570
on the page but you really do need to

00:13:37,410 --> 00:13:40,980
have that idea of like what happens when

00:13:39,570 --> 00:13:43,080
this changes down the line because

00:13:40,980 --> 00:13:44,460
design changes it just will like every

00:13:43,080 --> 00:13:46,290
two years you're gonna have to rewrite

00:13:44,460 --> 00:13:47,279
all of your Styles because somebody's

00:13:46,290 --> 00:13:48,360
gonna come in and they're the new

00:13:47,279 --> 00:13:51,540
designer and they want to change

00:13:48,360 --> 00:13:53,550
everything so I I think the problem

00:13:51,540 --> 00:13:55,440
isn't necessarily in the tooling but

00:13:53,550 --> 00:13:58,890
it's in the fact that we're not talking

00:13:55,440 --> 00:14:00,660
you know because CSS nsj is so new we're

00:13:58,890 --> 00:14:03,210
not talking about it in a responsible

00:14:00,660 --> 00:14:05,220
maintainable manner with that keeping an

00:14:03,210 --> 00:14:07,140
eye on the future and so I think as long

00:14:05,220 --> 00:14:09,720
as that's part of the conversation it's

00:14:07,140 --> 00:14:12,690
okay so that's that that actually like

00:14:09,720 --> 00:14:16,589
makes it lean towards maybe not handing

00:14:12,690 --> 00:14:19,500
it to designers to do we we have also

00:14:16,589 --> 00:14:29,700
seen sorry I just want to jump in and

00:14:19,500 --> 00:14:32,070
the moderator now I just want to not

00:14:29,700 --> 00:14:34,200
lose the thread so I wanted to add that

00:14:32,070 --> 00:14:38,339
we have seen some interesting projects

00:14:34,200 --> 00:14:42,390
like sketch react and I think that helps

00:14:38,339 --> 00:14:44,940
to welcome less developers like less

00:14:42,390 --> 00:14:46,560
oriented developers like designers when

00:14:44,940 --> 00:14:49,080
they have this tooling that can help

00:14:46,560 --> 00:14:50,660
them that could be something that can

00:14:49,080 --> 00:14:55,080
help in this process

00:14:50,660 --> 00:14:58,050
let's wanted to say that to continue on

00:14:55,080 --> 00:15:01,709
on what Sarah said is I think at a

00:14:58,050 --> 00:15:05,850
certain complexity of an application CSS

00:15:01,709 --> 00:15:08,610
is not something simple it's an actual

00:15:05,850 --> 00:15:12,930
engineering work you have to do at a

00:15:08,610 --> 00:15:15,720
certain level not always so it's there

00:15:12,930 --> 00:15:19,440
is no clear you know line between

00:15:15,720 --> 00:15:21,510
something the designer can easily do the

00:15:19,440 --> 00:15:24,540
CSS and then you need an actually

00:15:21,510 --> 00:15:29,130
engineering team to work on CSS it's

00:15:24,540 --> 00:15:31,020
very very different but yeah just to

00:15:29,130 --> 00:15:33,209
follow up on that and also the earlier

00:15:31,020 --> 00:15:36,030
comments about like sometimes maybe

00:15:33,209 --> 00:15:38,880
you're faced with this choice of either

00:15:36,030 --> 00:15:40,030
helping designers to adopt this paradigm

00:15:38,880 --> 00:15:41,650
or to say well

00:15:40,030 --> 00:15:44,620
we just get further away from it and

00:15:41,650 --> 00:15:46,960
we'll draw a thicker line so like it

00:15:44,620 --> 00:15:48,160
where I work in no red ink we have like

00:15:46,960 --> 00:15:49,510
a very collaborative relationship

00:15:48,160 --> 00:15:51,370
between engineers and designers there's

00:15:49,510 --> 00:15:53,290
a lot of like back-and-forth them a lot

00:15:51,370 --> 00:15:55,180
of like hey I know you designed it this

00:15:53,290 --> 00:15:57,550
way but if we do it slightly differently

00:15:55,180 --> 00:15:59,680
it'll save me like two weeks what do you

00:15:57,550 --> 00:16:03,670
think is that is that a thing and so I

00:15:59,680 --> 00:16:05,110
think having more collaboration is an

00:16:03,670 --> 00:16:06,460
important question not just for a

00:16:05,110 --> 00:16:08,500
maintainability perspective but also

00:16:06,460 --> 00:16:10,180
from like what does that mean in terms

00:16:08,500 --> 00:16:11,680
of your technologies so like we're an

00:16:10,180 --> 00:16:13,660
elm shop we have like 200 thousand lines

00:16:11,680 --> 00:16:15,520
of code in production our designers

00:16:13,660 --> 00:16:16,900
write elm and like a lot of people are

00:16:15,520 --> 00:16:18,730
like what that's that's crazy if it's

00:16:16,900 --> 00:16:21,790
like oh no we just like we help them

00:16:18,730 --> 00:16:23,320
learn it so they they're you know using

00:16:21,790 --> 00:16:25,960
CSS and elm the same way as somebody

00:16:23,320 --> 00:16:27,820
might use CSS and j/s and to be honest

00:16:25,960 --> 00:16:30,760
like for my money I think CSS is harder

00:16:27,820 --> 00:16:31,990
than Jas or elm so you know the fact

00:16:30,760 --> 00:16:33,970
that they've already mastered the

00:16:31,990 --> 00:16:35,230
hardest thing I think it's like not much

00:16:33,970 --> 00:16:38,440
of a stretch to say that they would be

00:16:35,230 --> 00:16:40,450
able to learn the easier things - yeah

00:16:38,440 --> 00:16:42,250
there's also an interesting trend that

00:16:40,450 --> 00:16:45,610
we have seen in JavaScript which is the

00:16:42,250 --> 00:16:49,000
improvement of the tooling and I look at

00:16:45,610 --> 00:16:51,910
flow and typescript and I think that

00:16:49,000 --> 00:16:54,100
this can also be applied in this you

00:16:51,910 --> 00:16:57,190
know these libraries so you can get you

00:16:54,100 --> 00:17:02,710
know more intelligent documentation you

00:16:57,190 --> 00:17:04,750
can browse these styles and maybe be

00:17:02,710 --> 00:17:13,480
able to maintain this in the long term

00:17:04,750 --> 00:17:16,240
which it's not so easy with CSS styling

00:17:13,480 --> 00:17:19,180
the clinton for CSS and they found that

00:17:16,240 --> 00:17:21,310
we could create a much more smarter tool

00:17:19,180 --> 00:17:24,579
if we will understand cooperation

00:17:21,310 --> 00:17:27,010
between the CSS and HTML and like this

00:17:24,579 --> 00:17:29,230
is suppose a limit if you have only CSS

00:17:27,010 --> 00:17:31,930
files and this first set has fast is

00:17:29,230 --> 00:17:34,270
doesn't have a connection to javascript

00:17:31,930 --> 00:17:36,480
to templates in this case you can't

00:17:34,270 --> 00:17:40,360
create a really smart tool for example

00:17:36,480 --> 00:17:42,400
to test that the color will always be

00:17:40,360 --> 00:17:44,680
accessible because they don't know the

00:17:42,400 --> 00:17:47,380
inherited background of this for this

00:17:44,680 --> 00:17:49,360
color and like this is why i will like

00:17:47,380 --> 00:17:51,010
the idea of combining this we

00:17:49,360 --> 00:17:52,830
technologists together because we don't

00:17:51,010 --> 00:17:55,140
know

00:17:52,830 --> 00:17:56,580
what's going on where this time will be

00:17:55,140 --> 00:18:00,120
applied and like what with this

00:17:56,580 --> 00:18:03,930
relationship users part of the page yeah

00:18:00,120 --> 00:18:07,380
that's that's really exciting some some

00:18:03,930 --> 00:18:09,690
things that we can maybe take from from

00:18:07,380 --> 00:18:12,540
the audience so let's let's look at

00:18:09,690 --> 00:18:15,300
these questions so at the top we have

00:18:12,540 --> 00:18:18,030
the whole how do you share components

00:18:15,300 --> 00:18:21,330
with the styling between multiple

00:18:18,030 --> 00:18:24,540
projects without strong coupling to

00:18:21,330 --> 00:18:27,330
specific CSS in gs library so you have

00:18:24,540 --> 00:18:31,200
any experience in your projects how to

00:18:27,330 --> 00:18:37,560
approach that how many of you are

00:18:31,200 --> 00:18:40,080
familiar with the views well when you're

00:18:37,560 --> 00:18:42,810
using view what's nice is it's kind of

00:18:40,080 --> 00:18:45,180
you know each component like the style

00:18:42,810 --> 00:18:47,280
kind of lives with that you know

00:18:45,180 --> 00:18:50,910
solution and it's not coupled with any

00:18:47,280 --> 00:18:53,070
CSS and J's library it is just all of it

00:18:50,910 --> 00:18:55,200
is JavaScript that is kind of part of

00:18:53,070 --> 00:18:57,510
you so that's kind of nice because

00:18:55,200 --> 00:19:00,030
you're not making an opinionated you

00:18:57,510 --> 00:19:01,800
know idea towards a certain library and

00:19:00,030 --> 00:19:04,560
then changing your mind later you can

00:19:01,800 --> 00:19:08,010
always add another CSS nsj solution if

00:19:04,560 --> 00:19:10,680
you'd like but I think for me as working

00:19:08,010 --> 00:19:12,990
as a contractor working on view projects

00:19:10,680 --> 00:19:15,120
being able to just switch components

00:19:12,990 --> 00:19:17,640
from place to place and having all those

00:19:15,120 --> 00:19:19,710
Styles be co-located with all of that

00:19:17,640 --> 00:19:24,410
kind of template logic has been really

00:19:19,710 --> 00:19:27,900
nice across different different projects

00:19:24,410 --> 00:19:30,960
yeah I am I think struggling with this

00:19:27,900 --> 00:19:32,460
for a long time because I I wanted to

00:19:30,960 --> 00:19:34,800
write components that can be actually

00:19:32,460 --> 00:19:40,050
used with different styling libraries

00:19:34,800 --> 00:19:43,080
and it's not easy at all but the the way

00:19:40,050 --> 00:19:48,930
to go or the best way to go I found so

00:19:43,080 --> 00:19:50,730
far is to go a level higher I go to for

00:19:48,930 --> 00:19:53,250
a higher abstraction so instead of

00:19:50,730 --> 00:19:56,220
rendering to react elements you can

00:19:53,250 --> 00:19:57,990
design a component to render to style

00:19:56,220 --> 00:19:59,970
components not the library but

00:19:57,990 --> 00:20:02,760
components that are going to render to

00:19:59,970 --> 00:20:06,120
just one node with Styles already

00:20:02,760 --> 00:20:09,270
bundled so that way you can actually

00:20:06,120 --> 00:20:11,190
describe how is the rendering of your

00:20:09,270 --> 00:20:14,190
component how the probes are passed

00:20:11,190 --> 00:20:17,280
around these elements and then you can

00:20:14,190 --> 00:20:20,310
later provide all of those primitives

00:20:17,280 --> 00:20:22,410
using whatever library you need it's a

00:20:20,310 --> 00:20:26,070
it's not easy because at the end you

00:20:22,410 --> 00:20:28,080
have to to describe very with a lot of

00:20:26,070 --> 00:20:31,200
precision how is the communication

00:20:28,080 --> 00:20:37,080
between those nodes but it's actually

00:20:31,200 --> 00:20:39,330
about the abstraction I think this

00:20:37,080 --> 00:20:42,510
brings us another topic that I was

00:20:39,330 --> 00:20:46,620
thinking before this panel which is what

00:20:42,510 --> 00:20:51,660
happened to a shadow DOM I mean not not

00:20:46,620 --> 00:20:55,050
many people is there you want to talk

00:20:51,660 --> 00:20:56,910
about that would love to know that we

00:20:55,050 --> 00:20:59,220
are waiting like four five years now and

00:20:56,910 --> 00:21:01,920
we invented all these senses in jails to

00:20:59,220 --> 00:21:06,240
mostly fix things with shadow Dom could

00:21:01,920 --> 00:21:08,670
fix but I'm really afraid of Houdini

00:21:06,240 --> 00:21:10,200
status Houdini project status I think it

00:21:08,670 --> 00:21:13,530
could be it becomes the same problem

00:21:10,200 --> 00:21:15,930
like the same five years I think and

00:21:13,530 --> 00:21:17,870
there is no result but like Houdini is

00:21:15,930 --> 00:21:26,100
so amazing can like it will be more

00:21:17,870 --> 00:21:28,170
bigger or like those false eye I thought

00:21:26,100 --> 00:21:30,510
there was an interesting so Mark

00:21:28,170 --> 00:21:33,540
Dalgleish I'm probably mispronouncing

00:21:30,510 --> 00:21:35,340
his last name apologies I wrote an

00:21:33,540 --> 00:21:38,400
interesting article about like local

00:21:35,340 --> 00:21:39,450
versus global styles and not to put

00:21:38,400 --> 00:21:40,860
words in his mouth but kind of my

00:21:39,450 --> 00:21:42,870
takeaway from that was sort of like just

00:21:40,860 --> 00:21:45,210
don't use selectors just don't do it

00:21:42,870 --> 00:21:47,190
just just have like classes for

00:21:45,210 --> 00:21:52,620
everything and that's it and like one

00:21:47,190 --> 00:21:54,570
class per per style per element and so

00:21:52,620 --> 00:21:55,920
far as long as I've been like trying to

00:21:54,570 --> 00:21:57,900
write things in this style it seemed

00:21:55,920 --> 00:22:00,210
like yeah this is pretty great and you

00:21:57,900 --> 00:22:02,700
end up doing more inheritance manually a

00:22:00,210 --> 00:22:04,740
little bit but I've been pretty fine

00:22:02,700 --> 00:22:06,600
with that so at this point I'm like I

00:22:04,740 --> 00:22:07,950
don't know whatever happens is a shadow

00:22:06,600 --> 00:22:10,290
Dom like I don't know if I'd actually

00:22:07,950 --> 00:22:11,970
use it at this point I think like maybe

00:22:10,290 --> 00:22:13,890
we've discovered something that's even

00:22:11,970 --> 00:22:16,050
nicer than what that had promised which

00:22:13,890 --> 00:22:18,070
we can implement using the technology of

00:22:16,050 --> 00:22:21,790
right now

00:22:18,070 --> 00:22:23,260
I also like the death of shadow DOM is a

00:22:21,790 --> 00:22:26,170
good example that community sometimes

00:22:23,260 --> 00:22:28,450
could create a solution like right now

00:22:26,170 --> 00:22:30,760
in JavaScript in CSS we completely

00:22:28,450 --> 00:22:32,320
believe in browser developers we want a

00:22:30,760 --> 00:22:34,810
specification we don't want to do

00:22:32,320 --> 00:22:36,220
anything we don't want to decide and I

00:22:34,810 --> 00:22:38,260
think this is a problem because I can

00:22:36,220 --> 00:22:40,780
with all these examples with shadow Dom

00:22:38,260 --> 00:22:43,660
which showed that we could make a sense

00:22:40,780 --> 00:22:46,110
right without w3c or

00:22:43,660 --> 00:22:51,520
big organization with experiments with

00:22:46,110 --> 00:22:53,380
choices with yeah I actually think that

00:22:51,520 --> 00:22:55,930
you're a really good example of

00:22:53,380 --> 00:22:58,150
something that browsers specification

00:22:55,930 --> 00:23:00,160
can be pushed forward by developers

00:22:58,150 --> 00:23:02,230
inventing new solutions like for

00:23:00,160 --> 00:23:05,650
instance things like autoprefixer and

00:23:02,230 --> 00:23:09,040
post CSS you know developers creating

00:23:05,650 --> 00:23:10,720
tools that go beyond what the spec

00:23:09,040 --> 00:23:13,120
allows and then the browser vendors

00:23:10,720 --> 00:23:14,890
having to keep up with developers and

00:23:13,120 --> 00:23:16,840
saying okay well people clearly don't

00:23:14,890 --> 00:23:18,880
want these vendor prefixes anymore let's

00:23:16,840 --> 00:23:20,470
strip them out and we'll add at supports

00:23:18,880 --> 00:23:22,210
instead or something you know I think

00:23:20,470 --> 00:23:24,070
that the like custom properties is a

00:23:22,210 --> 00:23:26,350
really good example of that that wasn't

00:23:24,070 --> 00:23:29,140
even gonna be in the spec at all until

00:23:26,350 --> 00:23:30,940
things like sass and less and post CSS

00:23:29,140 --> 00:23:33,400
started offering them and the browser

00:23:30,940 --> 00:23:35,140
vendors said okay I guess everybody

00:23:33,400 --> 00:23:37,420
needs this like we need to start

00:23:35,140 --> 00:23:39,430
supporting it so I think not being

00:23:37,420 --> 00:23:42,190
beholden to the spec and thinking beyond

00:23:39,430 --> 00:23:47,380
it is actually how we can push those

00:23:42,190 --> 00:23:52,090
browser specifications forward very good

00:23:47,380 --> 00:23:56,250
any any other comments and these okay so

00:23:52,090 --> 00:23:58,660
let's let's see what else we have here

00:23:56,250 --> 00:24:01,780
so another question what are the pros

00:23:58,660 --> 00:24:05,880
and cons using CSS in JavaScript instead

00:24:01,780 --> 00:24:09,040
of technologies like sass or less I

00:24:05,880 --> 00:24:10,990
think the most important when we talk

00:24:09,040 --> 00:24:13,690
about it is to understand that there is

00:24:10,990 --> 00:24:15,730
no one citizen J's like for my

00:24:13,690 --> 00:24:18,670
perspective of use with runtime and

00:24:15,730 --> 00:24:21,640
Static Styles also there is a different

00:24:18,670 --> 00:24:24,580
syntaxes like for example CSS index and

00:24:21,640 --> 00:24:26,710
J's syntax and they are not like it

00:24:24,580 --> 00:24:29,980
could be a different parts of it for

00:24:26,710 --> 00:24:31,410
example there is a project I don't

00:24:29,980 --> 00:24:33,810
remember the name so it's

00:24:31,410 --> 00:24:36,000
it's completely static styles written in

00:24:33,810 --> 00:24:39,060
JavaScript right in JavaScript and it's

00:24:36,000 --> 00:24:41,040
compiled to CSS without any one time so

00:24:39,060 --> 00:24:42,600
the first thing to tell about the

00:24:41,040 --> 00:24:46,110
question is understand what we are

00:24:42,600 --> 00:24:50,280
talking about what exactly solution so

00:24:46,110 --> 00:24:54,840
then we can rephrase this maybe so what

00:24:50,280 --> 00:24:57,240
do you see that the new runtime approach

00:24:54,840 --> 00:25:00,780
can bring to the table that was not

00:24:57,240 --> 00:25:05,250
possible with the static or you know

00:25:00,780 --> 00:25:07,920
built time CSS so I'm very familiar with

00:25:05,250 --> 00:25:09,120
this because until very I guess okay

00:25:07,920 --> 00:25:11,670
technically it's still today

00:25:09,120 --> 00:25:14,280
LM CSS did both like it was like you can

00:25:11,670 --> 00:25:16,110
use it to write style sheets in elm

00:25:14,280 --> 00:25:19,770
it'll compile to its CSS file or you can

00:25:16,110 --> 00:25:22,650
use the same code to compile to like Jas

00:25:19,770 --> 00:25:24,180
and do it at runtime and now we're

00:25:22,650 --> 00:25:25,620
trying to centralize actually because a

00:25:24,180 --> 00:25:27,780
lot of these sharing questions of like

00:25:25,620 --> 00:25:29,430
hey this library author decided to do it

00:25:27,780 --> 00:25:32,370
as a CSS file this one decided to do it

00:25:29,430 --> 00:25:34,230
at runtime we want to like pick one and

00:25:32,370 --> 00:25:37,560
go with it for the sake of the the

00:25:34,230 --> 00:25:39,510
sharing so what we were moving towards

00:25:37,560 --> 00:25:41,220
is just doing it all at runtime so we're

00:25:39,510 --> 00:25:42,780
familiar with these trade-offs so that I

00:25:41,220 --> 00:25:45,300
guess the the main things that you lose

00:25:42,780 --> 00:25:47,130
if you're doing it at runtime is you no

00:25:45,300 --> 00:25:49,200
longer have like a pipeline of

00:25:47,130 --> 00:25:51,300
verification so for example previously

00:25:49,200 --> 00:25:53,310
we could do stuff like okay if you have

00:25:51,300 --> 00:25:55,230
a color value where any of the numbers

00:25:53,310 --> 00:25:57,120
are over 255 you can you can get an

00:25:55,230 --> 00:25:59,250
error at Build time now that's an error

00:25:57,120 --> 00:26:01,260
that you can at best get at runtime and

00:25:59,250 --> 00:26:02,880
there's extra you know runtime

00:26:01,260 --> 00:26:05,220
performance overhead associated with

00:26:02,880 --> 00:26:07,830
doing all those checks at runtime also

00:26:05,220 --> 00:26:09,780
things like so autoprefixer is something

00:26:07,830 --> 00:26:13,350
that you can potentially do at runtime

00:26:09,780 --> 00:26:14,580
but again it's more expensive so so all

00:26:13,350 --> 00:26:16,020
of those like transformations and things

00:26:14,580 --> 00:26:18,870
like that something that's different

00:26:16,020 --> 00:26:21,690
between element I guess CSS and Jas is

00:26:18,870 --> 00:26:23,310
that we can get a lot of verification at

00:26:21,690 --> 00:26:26,040
build time anyway because Elm has a

00:26:23,310 --> 00:26:27,990
compiler like in a type checker so like

00:26:26,040 --> 00:26:30,270
we can do things like if you type O and

00:26:27,990 --> 00:26:31,770
say like display instead of display like

00:26:30,270 --> 00:26:33,210
you'll get an error at Build time anyway

00:26:31,770 --> 00:26:35,880
even though it's compiling to stuff at

00:26:33,210 --> 00:26:38,250
runtime and then the final benefit of

00:26:35,880 --> 00:26:40,290
doing it at runtime is that you can

00:26:38,250 --> 00:26:41,970
actually use the same language in the

00:26:40,290 --> 00:26:44,080
same system to make your styles vary

00:26:41,970 --> 00:26:45,700
based on applications

00:26:44,080 --> 00:26:47,619
so if you're doing an animation that's

00:26:45,700 --> 00:26:50,049
dynamic based on user input or something

00:26:47,619 --> 00:26:51,609
like that that's not knowable at Build

00:26:50,049 --> 00:26:53,289
time so you you have to be able to

00:26:51,609 --> 00:26:55,840
specify your animations and things like

00:26:53,289 --> 00:26:58,779
that either at Build time statically

00:26:55,840 --> 00:27:01,149
like using hard-coded values or use a

00:26:58,779 --> 00:27:06,249
different system for you know specifying

00:27:01,149 --> 00:27:08,649
those values at runtime just wanted to

00:27:06,249 --> 00:27:11,200
say mostly the same it's state driven

00:27:08,649 --> 00:27:14,379
styles and animations is what you cannot

00:27:11,200 --> 00:27:16,269
do static static a preprocessor CSS you

00:27:14,379 --> 00:27:24,609
just can't and also one interesting

00:27:16,269 --> 00:27:27,489
topic is well I have to specify what

00:27:24,609 --> 00:27:29,440
kind of animations right there is sort

00:27:27,489 --> 00:27:32,019
of animations which are static like if

00:27:29,440 --> 00:27:33,820
you use keyframes those animations are

00:27:32,019 --> 00:27:36,099
predefined you know when it starts you

00:27:33,820 --> 00:27:37,929
know how it looks like and you know when

00:27:36,099 --> 00:27:39,639
it ends but if you want to have an

00:27:37,929 --> 00:27:41,799
experience like you have an mobile

00:27:39,639 --> 00:27:44,529
phones with you know really reactive

00:27:41,799 --> 00:27:45,909
animations you can do this really fast

00:27:44,529 --> 00:27:46,869
yeah I think I think it's really

00:27:45,909 --> 00:27:48,580
important to make the distinction

00:27:46,869 --> 00:27:49,989
between spring based and game based

00:27:48,580 --> 00:27:51,609
animations which is where you give

00:27:49,989 --> 00:27:53,619
something mass in physics and send it on

00:27:51,609 --> 00:27:55,239
its way which is more interrupt about an

00:27:53,619 --> 00:27:56,950
omission like the kinds that you see on

00:27:55,239 --> 00:27:58,899
native which is what you're talking

00:27:56,950 --> 00:28:02,049
about you can't do that statically

00:27:58,899 --> 00:28:04,839
absolutely sequential animation which a

00:28:02,049 --> 00:28:07,210
lot of things are also based on that

00:28:04,839 --> 00:28:09,460
absolutely you can do statically and

00:28:07,210 --> 00:28:12,549
those are more useful for actually more

00:28:09,460 --> 00:28:14,320
complex animations so things like if you

00:28:12,549 --> 00:28:16,029
need a bunch of to choreograph a bunch

00:28:14,320 --> 00:28:17,979
of things happening at once in a

00:28:16,029 --> 00:28:20,169
cohesive manner like somebody walking

00:28:17,979 --> 00:28:22,779
across the stage drinking water you know

00:28:20,169 --> 00:28:24,789
or like a menu opening or 17,000 things

00:28:22,779 --> 00:28:27,219
happen and you know they collapse and

00:28:24,789 --> 00:28:28,960
move together that would work better as

00:28:27,219 --> 00:28:31,719
a sequential animation than an interrupt

00:28:28,960 --> 00:28:40,539
Abul animation so you're not totally

00:28:31,719 --> 00:28:42,489
wrong but don't forget that any dynamic

00:28:40,539 --> 00:28:47,200
values could be implemented by custom

00:28:42,489 --> 00:28:49,490
properties so it's called just in CSS

00:28:47,200 --> 00:28:52,399
customized custom properties actually

00:28:49,490 --> 00:28:54,529
are like probably the only living CSS

00:28:52,399 --> 00:28:57,100
property where you can actually have

00:28:54,529 --> 00:29:00,500
JavaScript and CSS work in tandem so

00:28:57,100 --> 00:29:04,700
unfortunately not like totally stable in

00:29:00,500 --> 00:29:08,090
edge yet but we're getting there I think

00:29:04,700 --> 00:29:12,140
he wants to yeah just you go back to

00:29:08,090 --> 00:29:16,460
this why it's cool to be on the wrong

00:29:12,140 --> 00:29:19,789
time actually is that nowadays our user

00:29:16,460 --> 00:29:23,690
interfaces really react to the user

00:29:19,789 --> 00:29:27,740
interaction a lot and being able to use

00:29:23,690 --> 00:29:31,639
the state to couple the styling we are

00:29:27,740 --> 00:29:34,340
kind of able to get rid of this thinking

00:29:31,639 --> 00:29:36,710
about styles in time it makes it much

00:29:34,340 --> 00:29:38,539
more easier to think about styling in

00:29:36,710 --> 00:29:44,750
time because we actually have two state

00:29:38,539 --> 00:29:47,450
to generate a style and this again makes

00:29:44,750 --> 00:29:51,799
it a lot more predictable to write our

00:29:47,450 --> 00:29:54,830
user interfaces I wanted to add also

00:29:51,799 --> 00:29:56,990
that for this specific scenario where

00:29:54,830 --> 00:29:59,720
you are providing a component for to

00:29:56,990 --> 00:30:01,159
someone else for someone else if you

00:29:59,720 --> 00:30:02,720
want to use the stuff like custom

00:30:01,159 --> 00:30:05,600
properties which are not supported by

00:30:02,720 --> 00:30:08,210
any browser and the huge problem that

00:30:05,600 --> 00:30:10,490
you have is that all these

00:30:08,210 --> 00:30:13,580
pre-processing should happen in the

00:30:10,490 --> 00:30:16,580
client in the guy that is at the end

00:30:13,580 --> 00:30:18,500
using consuming the library so for react

00:30:16,580 --> 00:30:20,750
to what's for example I decided to go

00:30:18,500 --> 00:30:22,730
for CSS modules at first because I

00:30:20,750 --> 00:30:24,889
wanted to bring this kind of shadow Dom

00:30:22,730 --> 00:30:28,429
like encapsulating components so they

00:30:24,889 --> 00:30:32,090
can be really easily modified without

00:30:28,429 --> 00:30:35,360
defining up denning or or or a strategy

00:30:32,090 --> 00:30:37,700
to modify styles so the problem was that

00:30:35,360 --> 00:30:39,649
if you want to use the library you have

00:30:37,700 --> 00:30:41,600
to install web pack and then you have to

00:30:39,649 --> 00:30:43,610
configure pause ESS and then you have to

00:30:41,600 --> 00:30:45,320
add these specific plugins but you have

00:30:43,610 --> 00:30:48,620
to change the configuration because it's

00:30:45,320 --> 00:30:51,409
not going it's not going to add to go to

00:30:48,620 --> 00:30:53,570
node modules folder for example and some

00:30:51,409 --> 00:30:56,240
really messy configuration and that

00:30:53,570 --> 00:30:58,340
should happen I mean people don't want

00:30:56,240 --> 00:30:59,399
that people just want to in MPM install

00:30:58,340 --> 00:31:01,739
the library

00:30:59,399 --> 00:31:05,129
for the component and go for that in my

00:31:01,739 --> 00:31:08,129
experience there is a better way to to

00:31:05,129 --> 00:31:11,429
put a component to NPM is just the use

00:31:08,129 --> 00:31:14,609
of a PAC compile everything and like

00:31:11,429 --> 00:31:16,859
step loader it put a CSS inside

00:31:14,609 --> 00:31:21,450
JavaScript and when component will be a

00:31:16,859 --> 00:31:23,969
render CSS will be like inserted in the

00:31:21,450 --> 00:31:26,519
Dom so you don't need to use processes

00:31:23,969 --> 00:31:28,409
completely wrong way to put to send a

00:31:26,519 --> 00:31:31,169
component or user the best way is to

00:31:28,409 --> 00:31:33,210
have a one single bundle in your NPM

00:31:31,169 --> 00:31:35,969
package everything is bundled in you

00:31:33,210 --> 00:31:42,690
just requires this JavaScript and it's

00:31:35,969 --> 00:31:47,940
do the rest okay so we we are using

00:31:42,690 --> 00:31:49,889
sometimes CSS variables for different

00:31:47,940 --> 00:31:53,389
scenarios and I think maybe one is

00:31:49,889 --> 00:31:56,070
theming what's your experience in using

00:31:53,389 --> 00:31:59,129
CSS variables for theming is that a good

00:31:56,070 --> 00:32:01,799
option you think what's what's how you

00:31:59,129 --> 00:32:03,719
do theming and would go with the same

00:32:01,799 --> 00:32:05,009
the same thing again at the end you

00:32:03,719 --> 00:32:08,279
would define it like for example a

00:32:05,009 --> 00:32:10,529
primary color for the whole thing so the

00:32:08,279 --> 00:32:13,320
consumer is responsible from telling you

00:32:10,529 --> 00:32:16,109
what's going to be that color so in the

00:32:13,320 --> 00:32:17,729
case if you are using custom properties

00:32:16,109 --> 00:32:20,820
for example of this processing should

00:32:17,729 --> 00:32:25,349
happen in some way in in the building

00:32:20,820 --> 00:32:28,320
time so my solution at the end was to

00:32:25,349 --> 00:32:30,809
provide like a CLI like a different

00:32:28,320 --> 00:32:33,450
package that allows you to give like a

00:32:30,809 --> 00:32:36,359
JSON with those Deming configuration

00:32:33,450 --> 00:32:38,219
variables so you end up generating all

00:32:36,359 --> 00:32:40,799
that CSS that you can later it include

00:32:38,219 --> 00:32:43,109
traditionally so you are keeping some

00:32:40,799 --> 00:32:46,139
good parts like for example scoping the

00:32:43,109 --> 00:32:48,570
class names and also you are you have

00:32:46,139 --> 00:32:50,339
the ability of programmatically telling

00:32:48,570 --> 00:32:52,859
what are the values that you want to get

00:32:50,339 --> 00:32:55,649
in the final CSS but still it's

00:32:52,859 --> 00:32:58,379
something that it should happen so as I

00:32:55,649 --> 00:33:00,570
said as you are going to try to reduce

00:32:58,379 --> 00:33:03,239
the friction as much as much as possible

00:33:00,570 --> 00:33:05,190
but something should happen you have to

00:33:03,239 --> 00:33:08,669
tap a way to do that instead of

00:33:05,190 --> 00:33:11,070
generating that dynamically so if we

00:33:08,669 --> 00:33:12,780
have custom properties in every browser

00:33:11,070 --> 00:33:15,120
that you will

00:33:12,780 --> 00:33:18,060
be a problem at all but that's not the

00:33:15,120 --> 00:33:21,120
case I think nowadays the way to do that

00:33:18,060 --> 00:33:22,470
view would be to create a it's kind of

00:33:21,120 --> 00:33:23,850
similar to a react higher-order

00:33:22,470 --> 00:33:26,880
components but we have a thing called

00:33:23,850 --> 00:33:28,410
slots so you can have a component that

00:33:26,880 --> 00:33:31,260
has a lot of the styling logic that's

00:33:28,410 --> 00:33:34,020
scoped but then you add a slot where you

00:33:31,260 --> 00:33:35,850
can dynamically generate or change out

00:33:34,020 --> 00:33:40,640
the content so that allows you to do

00:33:35,850 --> 00:33:44,850
styling and theming pretty easily also

00:33:40,640 --> 00:33:50,580
any other any other tips on the theming

00:33:44,850 --> 00:33:52,620
now okay let's pick another question how

00:33:50,580 --> 00:33:58,410
would you handle third-party libraries

00:33:52,620 --> 00:34:02,640
that does not use CSS in J's I'm not

00:33:58,410 --> 00:34:06,150
sure about this I think I should I

00:34:02,640 --> 00:34:08,790
should take it so there is a real

00:34:06,150 --> 00:34:12,330
problem with always CSS NGS ecosystem

00:34:08,790 --> 00:34:13,830
and it's about publishing if you publish

00:34:12,330 --> 00:34:17,429
something to NPM and you want other

00:34:13,830 --> 00:34:20,520
people to use it it should be usable

00:34:17,429 --> 00:34:22,560
without forcing people to install the

00:34:20,520 --> 00:34:26,669
library you used to produce these styles

00:34:22,560 --> 00:34:29,960
and this is a real real problem so right

00:34:26,669 --> 00:34:33,540
now I don't want to spoil my my talk but

00:34:29,960 --> 00:34:35,429
this is something we're trying to solve

00:34:33,540 --> 00:34:38,790
right now we're working on it and

00:34:35,429 --> 00:34:40,440
instead well it's a new standard and we

00:34:38,790 --> 00:34:43,460
are working on a specification which

00:34:40,440 --> 00:34:46,710
allows you to produce something that is

00:34:43,460 --> 00:34:49,320
highly performant or and reusable so you

00:34:46,710 --> 00:34:52,380
publish to NPM not CSS and not

00:34:49,320 --> 00:34:54,870
components but something that is way

00:34:52,380 --> 00:34:58,460
built up built on top of CSS and it's

00:34:54,870 --> 00:35:01,890
easy to parse it small and very fast

00:34:58,460 --> 00:35:04,110
worth noting that this is not a problem

00:35:01,890 --> 00:35:06,780
that's unique to CSS and J's it's really

00:35:04,110 --> 00:35:08,460
just a consistency problem it's like you

00:35:06,780 --> 00:35:09,870
could also phrase the question how would

00:35:08,460 --> 00:35:12,720
you handle a third-party library that

00:35:09,870 --> 00:35:14,550
doesn't use CSS files like you know it's

00:35:12,720 --> 00:35:15,840
just a question of like if they're using

00:35:14,550 --> 00:35:17,760
exactly the same thing that you're using

00:35:15,840 --> 00:35:18,600
no problem if they're using something

00:35:17,760 --> 00:35:19,560
different than you're using you're

00:35:18,600 --> 00:35:21,240
saying what are you talking about now I

00:35:19,560 --> 00:35:23,760
have to introduce something to my build

00:35:21,240 --> 00:35:24,839
process to use your CSS files how could

00:35:23,760 --> 00:35:26,489
you do that to me

00:35:24,839 --> 00:35:28,049
and it's really just a matter of likely

00:35:26,489 --> 00:35:30,059
I've they're doing what I'm doing that

00:35:28,049 --> 00:35:31,799
it's convenient and if not then yeah

00:35:30,059 --> 00:35:35,039
there's there's gonna be friction and

00:35:31,799 --> 00:35:36,450
hopefully we end up with some good

00:35:35,039 --> 00:35:42,239
solution of these problems but I don't I

00:35:36,450 --> 00:35:45,890
don't think we do at this moment okay I

00:35:42,239 --> 00:35:49,339
think the next question is is similar so

00:35:45,890 --> 00:35:51,839
when you have to work with external

00:35:49,339 --> 00:35:54,539
style guides and then you have to

00:35:51,839 --> 00:35:57,150
integrate this with your you know your

00:35:54,539 --> 00:35:59,309
pipeline which may be using CSS in

00:35:57,150 --> 00:36:01,559
JavaScript how you deal with this

00:35:59,309 --> 00:36:06,180
problem which is very close to the

00:36:01,559 --> 00:36:08,430
previous question it's exactly the same

00:36:06,180 --> 00:36:10,950
it's the format video we are working on

00:36:08,430 --> 00:36:13,140
it's exactly allowing you to publish

00:36:10,950 --> 00:36:14,999
with one library and use this impact

00:36:13,140 --> 00:36:17,549
package with another library it

00:36:14,999 --> 00:36:19,680
decouples finally you know the

00:36:17,549 --> 00:36:25,499
components and the library styling

00:36:19,680 --> 00:36:27,930
library used to produce it okay let's

00:36:25,499 --> 00:36:31,979
pick let's pick some other questions

00:36:27,930 --> 00:36:35,670
that I have prepared there's a lot of

00:36:31,979 --> 00:36:38,460
talks around changing the topic about

00:36:35,670 --> 00:36:42,029
CSS great like what's your experience

00:36:38,460 --> 00:37:01,710
with this new CSS great which is a hot

00:36:42,029 --> 00:37:05,539
the new hotness its power okay yeah

00:37:01,710 --> 00:37:10,920
actually I have not used seasons create

00:37:05,539 --> 00:37:12,539
up until today because first of all it's

00:37:10,920 --> 00:37:14,700
still not supported in the older

00:37:12,539 --> 00:37:17,819
browsers this is one reason and this is

00:37:14,700 --> 00:37:20,519
like a problem every time a new CSS none

00:37:17,819 --> 00:37:23,719
of its release that it first needs to be

00:37:20,519 --> 00:37:26,900
implemented in a browser and also I

00:37:23,719 --> 00:37:31,430
really don't see anything that I

00:37:26,900 --> 00:37:31,430
couldn't already build with Flex box

00:37:32,890 --> 00:37:38,260
I can't tell about - link of sets has

00:37:36,850 --> 00:37:41,110
grids we already have four tools without

00:37:38,260 --> 00:37:43,870
their usage assesses grids

00:37:41,110 --> 00:37:46,300
I just miss a way to use grids right now

00:37:43,870 --> 00:37:50,110
with another Explorer after professor

00:37:46,300 --> 00:37:54,850
cut cut can add a mass prefixes

00:37:50,110 --> 00:37:57,400
but unfortunately the properties list

00:37:54,850 --> 00:38:00,910
supported is very limited so it will be

00:37:57,400 --> 00:38:02,710
a very very limited part of the grid but

00:38:00,910 --> 00:38:06,670
if you want it's not a problem just add

00:38:02,710 --> 00:38:13,720
a grid to options but I found a good

00:38:06,670 --> 00:38:18,880
good plugin it's called put CSS grid

00:38:13,720 --> 00:38:22,510
I should prepared so I will tweet it in

00:38:18,880 --> 00:38:25,570
processes account its plugin that could

00:38:22,510 --> 00:38:28,000
combine all properties to one property

00:38:25,570 --> 00:38:30,550
do you remember the like crazy a grid

00:38:28,000 --> 00:38:34,540
template property when you were draw the

00:38:30,550 --> 00:38:36,490
whole layout with a heart the same but

00:38:34,540 --> 00:38:38,650
with more properties with the limits

00:38:36,490 --> 00:38:41,320
with the sizes and that time I was

00:38:38,650 --> 00:38:44,920
convinced to acquit because it's a very

00:38:41,320 --> 00:38:47,380
readable way to describe layout right

00:38:44,920 --> 00:38:49,840
now like when you have a flexbox or

00:38:47,380 --> 00:38:52,660
position or but float you have different

00:38:49,840 --> 00:38:54,390
rules and you need combines it do you

00:38:52,660 --> 00:38:59,170
remember when somebody asked you to

00:38:54,390 --> 00:39:01,840
debug CSS in just no way like because it

00:38:59,170 --> 00:39:04,090
you need to understand so so many lines

00:39:01,840 --> 00:39:06,400
of code compared to JavaScript with this

00:39:04,090 --> 00:39:08,560
plugin everything is like visible

00:39:06,400 --> 00:39:14,640
readable and this is my favorite part of

00:39:08,560 --> 00:39:14,640
grid but I don't use it production okay

00:39:16,950 --> 00:39:25,990
well that's all of CSS great Stan ok so

00:39:23,410 --> 00:39:29,530
I have I have here some other nodes but

00:39:25,990 --> 00:39:33,160
maybe we can take another question let's

00:39:29,530 --> 00:39:36,720
look at what we have here okay we are

00:39:33,160 --> 00:39:40,780
talking a lot about CSS in DJ yes but is

00:39:36,720 --> 00:39:43,090
HTML in Jay as a sure future thinking

00:39:40,780 --> 00:39:45,280
about web components and HTML template

00:39:43,090 --> 00:39:47,400
advancements so what you have to say

00:39:45,280 --> 00:39:47,400
about

00:39:50,720 --> 00:39:57,480
so hTML is the hypertext markup language

00:39:54,450 --> 00:39:59,670
and the Dom is like the structure that

00:39:57,480 --> 00:40:03,480
the webpage uses to represent the

00:39:59,670 --> 00:40:05,160
elements and nodes so HTML and J's I

00:40:03,480 --> 00:40:07,770
guess an example of that would be JSX

00:40:05,160 --> 00:40:10,350
that's like using the hypertext markup

00:40:07,770 --> 00:40:14,040
language you know in a javascript file

00:40:10,350 --> 00:40:15,660
is that the future I don't know is it

00:40:14,040 --> 00:40:17,430
even the present necessarily like it's

00:40:15,660 --> 00:40:19,350
it's certainly a common thing like a

00:40:17,430 --> 00:40:21,090
popular thing but I mean again coming

00:40:19,350 --> 00:40:22,800
from Elm like we don't have that we've

00:40:21,090 --> 00:40:24,480
never had that you just you just call

00:40:22,800 --> 00:40:26,790
normal elm functions to describe your

00:40:24,480 --> 00:40:27,990
DOM and that's been totally fine there's

00:40:26,790 --> 00:40:29,430
also like hyper script helpers like

00:40:27,990 --> 00:40:31,260
virtual hyper scripts stuff like that

00:40:29,430 --> 00:40:34,920
there's just plenty of people who are

00:40:31,260 --> 00:40:44,820
not using HTML in j/s today so is it a

00:40:34,920 --> 00:40:47,810
sure future I don't think so ok so I

00:40:44,820 --> 00:40:52,050
have another have another topic which is

00:40:47,810 --> 00:40:53,280
global versus local styling so what you

00:40:52,050 --> 00:40:56,280
have to say about it

00:40:53,280 --> 00:41:00,450
there's a lot of recommendations going

00:40:56,280 --> 00:41:03,690
into more local styling it's very trendy

00:41:00,450 --> 00:41:04,860
topic but a lot of people saw that you

00:41:03,690 --> 00:41:06,930
know the good example that we are

00:41:04,860 --> 00:41:09,360
syncing the threads not in the like real

00:41:06,930 --> 00:41:11,610
results if we are talking about the

00:41:09,360 --> 00:41:14,370
global or local by some reason people

00:41:11,610 --> 00:41:17,420
forgot about inherit properties as for

00:41:14,370 --> 00:41:21,030
example somebody could put for example

00:41:17,420 --> 00:41:23,160
star and then box-sizing border box you

00:41:21,030 --> 00:41:25,110
can use some components from the NPM and

00:41:23,160 --> 00:41:26,940
it's broke every single or your styles

00:41:25,110 --> 00:41:30,270
could broke everything by inherit

00:41:26,940 --> 00:41:32,820
properties and fortunately there is a

00:41:30,270 --> 00:41:36,270
solution but we should force edge team

00:41:32,820 --> 00:41:39,780
to implement it it's called do you have

00:41:36,270 --> 00:41:43,680
a edge team here no it called all

00:41:39,780 --> 00:41:46,470
property and it has a few values for

00:41:43,680 --> 00:41:49,200
example all initial so if you have a

00:41:46,470 --> 00:41:51,390
component you just write all initial and

00:41:49,200 --> 00:41:54,210
it is like clean all inherited

00:41:51,390 --> 00:41:56,550
properties I think this is a good idea

00:41:54,210 --> 00:41:58,500
that a lot of people forgot when they

00:41:56,550 --> 00:41:59,160
talk about global versus local we call

00:41:58,500 --> 00:42:00,870
it

00:41:59,160 --> 00:42:06,270
a little set of course we have a plugin

00:42:00,870 --> 00:42:10,290
for for CSS anyone has experience with

00:42:06,270 --> 00:42:12,510
that approach I think that you should

00:42:10,290 --> 00:42:16,230
avoid global styles as as much as

00:42:12,510 --> 00:42:18,120
possible of course I mean by default to

00:42:16,230 --> 00:42:20,490
defying a class name for example that

00:42:18,120 --> 00:42:23,850
obviously global and that's probably one

00:42:20,490 --> 00:42:27,300
of the of the reasons why CSS in GIS and

00:42:23,850 --> 00:42:29,870
local scoping is so popular so but but

00:42:27,300 --> 00:42:33,330
that doesn't mean that you can't write

00:42:29,870 --> 00:42:36,570
global CSS as well like example with the

00:42:33,330 --> 00:42:40,410
box icing thing or also that you can

00:42:36,570 --> 00:42:44,370
charge it from a local style something

00:42:40,410 --> 00:42:46,680
global as a child that sometimes we go

00:42:44,370 --> 00:42:50,100
to the extreme where we just want to

00:42:46,680 --> 00:42:52,650
have like every single selector locale

00:42:50,100 --> 00:42:55,230
but this is not necessarily good but

00:42:52,650 --> 00:42:59,190
definitely I would go I would try to do

00:42:55,230 --> 00:43:01,500
as much local styling as possible always

00:42:59,190 --> 00:43:05,580
like always you have skip side effects

00:43:01,500 --> 00:43:07,320
and stuff like that I have some

00:43:05,580 --> 00:43:09,840
production experience with this so I'm

00:43:07,320 --> 00:43:12,240
not using inside of the entire

00:43:09,840 --> 00:43:17,160
application any global styles at all and

00:43:12,240 --> 00:43:19,460
I'm really good really happy pretty

00:43:17,160 --> 00:43:22,590
happy and nothing breaks or works and

00:43:19,460 --> 00:43:28,130
the way I do it is we have a plug-in for

00:43:22,590 --> 00:43:28,130
JSS which is called and JSS isolate and

00:43:28,310 --> 00:43:37,590
it is doing some magic things try it out

00:43:33,710 --> 00:43:41,910
so I don't rely on any global styling I

00:43:37,590 --> 00:43:46,830
mostly don't rely on cascading and I too

00:43:41,910 --> 00:43:56,580
are quite complex application it's not

00:43:46,830 --> 00:44:00,690
CSS as basically yes the components for

00:43:56,580 --> 00:44:01,830
this giant thing a few years back and we

00:44:00,690 --> 00:44:02,830
had been working on this project for

00:44:01,830 --> 00:44:05,260
nine

00:44:02,830 --> 00:44:09,130
something like that and it was just a

00:44:05,260 --> 00:44:12,220
giant undertaking two days before we

00:44:09,130 --> 00:44:14,980
were going to launch the an order came

00:44:12,220 --> 00:44:17,200
down from really high like a board CEO

00:44:14,980 --> 00:44:21,190
level that they wanted to change our

00:44:17,200 --> 00:44:23,140
brand color and we actually had that

00:44:21,190 --> 00:44:26,020
brand color defined globally so I

00:44:23,140 --> 00:44:28,690
changed one thing in one line of code

00:44:26,020 --> 00:44:31,210
and not only was that changed but any

00:44:28,690 --> 00:44:34,260
tertiary colors that were affected were

00:44:31,210 --> 00:44:36,820
also affected and also were the

00:44:34,260 --> 00:44:39,580
accessibility was still you know because

00:44:36,820 --> 00:44:41,710
we had testing for that was still you

00:44:39,580 --> 00:44:44,710
know standardized and everything was ago

00:44:41,710 --> 00:44:47,530
so it didn't delay our launch at all so

00:44:44,710 --> 00:44:50,230
I guess the the moral of the story is is

00:44:47,530 --> 00:44:51,430
kind of that I think keeping things

00:44:50,230 --> 00:44:55,360
local whenever possible

00:44:51,430 --> 00:44:57,190
absolutely but styling is a lot about

00:44:55,360 --> 00:44:59,410
keeping the design of the site

00:44:57,190 --> 00:45:02,980
consistent and you shouldn't put the

00:44:59,410 --> 00:45:04,840
tooling above that concept there are

00:45:02,980 --> 00:45:06,580
things like line height that if you know

00:45:04,840 --> 00:45:08,710
designers change you don't want to have

00:45:06,580 --> 00:45:10,390
to go it back into 30 components and go

00:45:08,710 --> 00:45:12,790
change that line height again that's a

00:45:10,390 --> 00:45:14,800
nightmare so thinking about these things

00:45:12,790 --> 00:45:16,510
with a strong eye again I'm gonna say

00:45:14,800 --> 00:45:18,580
again like towards maintenance towards

00:45:16,510 --> 00:45:21,730
refactoring towards being able to move

00:45:18,580 --> 00:45:25,450
quickly when things pivot or change and

00:45:21,730 --> 00:45:27,820
again it's for a larger code base is

00:45:25,450 --> 00:45:29,920
really good I think being able to get

00:45:27,820 --> 00:45:32,890
capsulate locally is super awesome but

00:45:29,920 --> 00:45:34,630
thinking like with your mind about what

00:45:32,890 --> 00:45:37,480
you might need to change in the future

00:45:34,630 --> 00:45:41,500
very quickly is also really good

00:45:37,480 --> 00:45:44,500
practice well actually that's sorry

00:45:41,500 --> 00:45:45,790
actually that's that's something that

00:45:44,500 --> 00:45:47,860
came up

00:45:45,790 --> 00:45:51,460
I'm coming more from an angular

00:45:47,860 --> 00:45:53,830
background so we are looking at shadow

00:45:51,460 --> 00:45:56,440
Dom components and there's this a

00:45:53,830 --> 00:46:00,100
scenario where you have to or you want

00:45:56,440 --> 00:46:04,030
to style some inner component and then

00:46:00,100 --> 00:46:06,370
you find yourself it is kind of the

00:46:04,030 --> 00:46:08,800
atria like okay I want to break the

00:46:06,370 --> 00:46:13,690
insulation and then there's this like

00:46:08,800 --> 00:46:16,300
evil deep selector that you look at it

00:46:13,690 --> 00:46:20,920
and think okay maybe I can use it

00:46:16,300 --> 00:46:23,800
tell anyone like the important it is

00:46:20,920 --> 00:46:26,620
like okay this is the important for

00:46:23,800 --> 00:46:29,440
shadowdog like a colet's let's use this

00:46:26,620 --> 00:46:33,040
change the color globally and tomorrow

00:46:29,440 --> 00:46:34,930
will be another day what do you think

00:46:33,040 --> 00:46:37,660
when you are trying to insulate

00:46:34,930 --> 00:46:40,930
everything and then it just kicks you

00:46:37,660 --> 00:46:45,090
you know it slaps you in the face like

00:46:40,930 --> 00:46:49,780
what will be your tip or best practice

00:46:45,090 --> 00:46:51,760
so I think if if a team like to Sarah's

00:46:49,780 --> 00:46:53,200
point about like maintainability and

00:46:51,760 --> 00:46:55,930
thinking about like how are you gonna

00:46:53,200 --> 00:46:58,270
scale things like if the team agrees on

00:46:55,930 --> 00:46:59,950
a set of practices and they're

00:46:58,270 --> 00:47:04,360
sufficiently easy to follow which is

00:46:59,950 --> 00:47:06,370
important then then you can solve some

00:47:04,360 --> 00:47:09,460
of these things in a variety of

00:47:06,370 --> 00:47:10,720
different ways so Sarah's story it's we

00:47:09,460 --> 00:47:12,280
haven't had something quite like that

00:47:10,720 --> 00:47:14,320
happened but we have been like thinking

00:47:12,280 --> 00:47:16,480
about it but the way we've been doing it

00:47:14,320 --> 00:47:18,130
is with we just have rule on our team

00:47:16,480 --> 00:47:20,320
which is that you're never allowed to

00:47:18,130 --> 00:47:22,120
hard-code colors they all have to come

00:47:20,320 --> 00:47:24,430
from a constants file that's like shared

00:47:22,120 --> 00:47:26,020
across so like again we do CSS and elm

00:47:24,430 --> 00:47:27,550
so we just have like a file that's got

00:47:26,020 --> 00:47:30,310
like okay here's all the colors for our

00:47:27,550 --> 00:47:31,720
theme and you can reference something

00:47:30,310 --> 00:47:32,860
from that file or add something new to

00:47:31,720 --> 00:47:35,440
that file if there's something missing

00:47:32,860 --> 00:47:36,760
in a new design but you can never just

00:47:35,440 --> 00:47:38,470
hard code a color in the middle of there

00:47:36,760 --> 00:47:40,030
because otherwise yeah if we needed to

00:47:38,470 --> 00:47:41,950
change one what if it didn't quite get

00:47:40,030 --> 00:47:43,330
changes all the places so cascading is

00:47:41,950 --> 00:47:46,240
one way to do this and code sharing is

00:47:43,330 --> 00:47:48,550
another and I think when you when you

00:47:46,240 --> 00:47:50,620
end up with questions like he's like hey

00:47:48,550 --> 00:47:52,510
what if it would be really convenient to

00:47:50,620 --> 00:47:54,040
just like just write one selector that

00:47:52,510 --> 00:47:55,620
just reaches in there it'll be fine

00:47:54,040 --> 00:47:58,660
it'll never come back to bite us later

00:47:55,620 --> 00:48:00,340
if you can have sufficiently easy

00:47:58,660 --> 00:48:01,690
processes to answer questions like this

00:48:00,340 --> 00:48:04,090
around code sharing and things like that

00:48:01,690 --> 00:48:06,730
hopefully you can design a system for

00:48:04,090 --> 00:48:08,140
collaboration where the the drive to do

00:48:06,730 --> 00:48:09,580
that goes down enough that you're just

00:48:08,140 --> 00:48:10,930
like you know what it's not actually

00:48:09,580 --> 00:48:13,000
that much more work to do it this way so

00:48:10,930 --> 00:48:16,450
I'm just gonna do it the nice way the

00:48:13,000 --> 00:48:20,410
maintainable way I think that if you are

00:48:16,450 --> 00:48:23,020
in a need where you have to it should be

00:48:20,410 --> 00:48:25,960
possible to customize some small aspects

00:48:23,020 --> 00:48:28,210
in a very complex component you

00:48:25,960 --> 00:48:30,060
definitely should keep all the Styles

00:48:28,210 --> 00:48:32,070
lovely so how can you access

00:48:30,060 --> 00:48:35,250
that right so the problem in my opinion

00:48:32,070 --> 00:48:37,920
is that you are trying to use CSS

00:48:35,250 --> 00:48:39,840
selectors so you have to charge that

00:48:37,920 --> 00:48:42,180
something and in that scenario you have

00:48:39,840 --> 00:48:44,580
to deal with a priority of the selector

00:48:42,180 --> 00:48:47,340
so you end up writing that important

00:48:44,580 --> 00:48:49,080
flag at the end you are screwing up for

00:48:47,340 --> 00:48:52,080
the rest of the component life probably

00:48:49,080 --> 00:48:54,680
so I think that you are supposed to

00:48:52,080 --> 00:48:59,670
define a way or a hatch scape or

00:48:54,680 --> 00:49:03,180
something to allow this overrides and in

00:48:59,670 --> 00:49:06,210
case you're using local scope Styles

00:49:03,180 --> 00:49:08,820
what you can do is to simply define like

00:49:06,210 --> 00:49:12,030
an object or something referring to each

00:49:08,820 --> 00:49:15,630
node so instead of writing a selector

00:49:12,030 --> 00:49:17,700
and some piece of CSS so the element

00:49:15,630 --> 00:49:21,120
gets selected at the end what you can do

00:49:17,700 --> 00:49:22,950
is to give a declarative way of telling

00:49:21,120 --> 00:49:25,140
I want to apply to this specific node

00:49:22,950 --> 00:49:27,300
these styles but that should be

00:49:25,140 --> 00:49:29,310
implemented in some way in a liar over

00:49:27,300 --> 00:49:30,840
the component that's a solution I've

00:49:29,310 --> 00:49:32,760
been working on so far and I think that

00:49:30,840 --> 00:49:35,640
some people are using something similar

00:49:32,760 --> 00:49:37,560
like telling my component is composed by

00:49:35,640 --> 00:49:39,870
these two elements this is element a

00:49:37,560 --> 00:49:42,150
this is element D so if you want to add

00:49:39,870 --> 00:49:44,040
some other rights using CSS in JSU just

00:49:42,150 --> 00:49:46,470
pass an object telling for this a

00:49:44,040 --> 00:49:48,510
component for this a element I have to

00:49:46,470 --> 00:49:52,740
add I want to add this override so you

00:49:48,510 --> 00:49:56,760
explicitly said that AB trying time so

00:49:52,740 --> 00:49:59,670
you just remove the select a point I

00:49:56,760 --> 00:50:02,010
think that selectors as they are it's

00:49:59,670 --> 00:50:05,250
actually a problem because you have to

00:50:02,010 --> 00:50:07,290
keep in mind what your targeting is

00:50:05,250 --> 00:50:10,080
going to be evaluated against the hold

00:50:07,290 --> 00:50:12,810
on right so sometimes you can write a

00:50:10,080 --> 00:50:15,270
selector that you are not aware of in

00:50:12,810 --> 00:50:17,460
the long term and at the end you add the

00:50:15,270 --> 00:50:19,020
same thing in all the place so it gets

00:50:17,460 --> 00:50:21,300
affected on the same thing what you are

00:50:19,020 --> 00:50:24,120
going to change a complex component even

00:50:21,300 --> 00:50:27,390
if it's scoped maybe you change that

00:50:24,120 --> 00:50:30,840
local scope in as well maybe you have a

00:50:27,390 --> 00:50:32,340
scope scope style for a div element like

00:50:30,840 --> 00:50:34,080
in the shadow Dom but then suddenly you

00:50:32,340 --> 00:50:38,190
want to change that tip to a section and

00:50:34,080 --> 00:50:40,140
there you're screwed so to catch up on

00:50:38,190 --> 00:50:41,999
these selectors were not designed for

00:50:40,140 --> 00:50:43,559
the components age

00:50:41,999 --> 00:50:46,019
were designed for documents in order to

00:50:43,559 --> 00:50:47,669
target any element on the document and

00:50:46,019 --> 00:50:50,069
they are really smart about it you can

00:50:47,669 --> 00:50:52,769
do a lot of things and you know its

00:50:50,069 --> 00:50:55,259
first on fine but it's not maintainable

00:50:52,769 --> 00:50:58,319
if you start something complex and you

00:50:55,259 --> 00:51:00,389
can break you can write something inside

00:50:58,319 --> 00:51:02,609
one of the components something that

00:51:00,389 --> 00:51:04,469
targets another component to all other

00:51:02,609 --> 00:51:10,369
comprehends and you know breaks

00:51:04,469 --> 00:51:13,169
everything it shouldn't be possible okay

00:51:10,369 --> 00:51:16,829
we are kind of in the wrapped wrap-up

00:51:13,169 --> 00:51:20,489
time so I'm gonna ask you each of you to

00:51:16,829 --> 00:51:22,589
give you no wrap-up statement may be

00:51:20,489 --> 00:51:24,599
something that you want the people to

00:51:22,589 --> 00:51:29,639
know about you want to give some

00:51:24,599 --> 00:51:32,569
reference yeah it's your chance it's

00:51:29,639 --> 00:51:34,709
some project you're working on yeah sure

00:51:32,569 --> 00:51:36,509
so I don't know how many own programmers

00:51:34,709 --> 00:51:38,069
we got in the audience but for those who

00:51:36,509 --> 00:51:42,749
have not gotten into Elm that's a

00:51:38,069 --> 00:51:44,279
prerequisite for using Elm CSS but but

00:51:42,749 --> 00:51:47,309
if you want to check it out we're doing

00:51:44,279 --> 00:51:50,099
a free workshop workshop on Friday I'm

00:51:47,309 --> 00:51:51,779
posting it I think we're at like 70

00:51:50,099 --> 00:51:52,919
people signed up but we're it's capped

00:51:51,779 --> 00:51:55,469
at 80 so I think there might still be

00:51:52,919 --> 00:51:57,659
some room also writing a book element

00:51:55,469 --> 00:51:59,639
action for manning publications and I

00:51:57,659 --> 00:52:02,399
did a two-day front-end masters workshop

00:51:59,639 --> 00:52:04,379
on Elm so lots of ways to get started if

00:52:02,399 --> 00:52:07,769
you want to get into this LM CSS thing

00:52:04,379 --> 00:52:10,469
or if you check out my talk tomorrow the

00:52:07,769 --> 00:52:15,719
next evolutionary leap beyond that so

00:52:10,469 --> 00:52:17,699
check it out I'm just gonna touch on

00:52:15,719 --> 00:52:19,469
something as the closing note that I'd

00:52:17,699 --> 00:52:21,659
been talking to Richard about yesterday

00:52:19,469 --> 00:52:23,699
which is that anxiety

00:52:21,659 --> 00:52:25,079
I think it's developers since there are

00:52:23,699 --> 00:52:26,429
so many tools and there's so many

00:52:25,079 --> 00:52:28,919
different ways of working and there's

00:52:26,429 --> 00:52:30,659
like such a JavaScript is really a

00:52:28,919 --> 00:52:33,149
buffet right now what ends up happening

00:52:30,659 --> 00:52:34,739
is people get this like anxiety but

00:52:33,149 --> 00:52:36,149
they're not using the right tools they

00:52:34,739 --> 00:52:38,429
should go use this other tool they

00:52:36,149 --> 00:52:40,019
should write CSS like this other person

00:52:38,429 --> 00:52:42,569
the next week they gotta write it like

00:52:40,019 --> 00:52:46,499
somebody else or you know JavaScript for

00:52:42,569 --> 00:52:48,959
that matter I think really the key core

00:52:46,499 --> 00:52:51,599
thing is to write something that makes

00:52:48,959 --> 00:52:53,999
sense for your team and just keeping in

00:52:51,599 --> 00:52:55,350
mind you know how things are gonna scale

00:52:53,999 --> 00:52:57,240
in the future how are you

00:52:55,350 --> 00:52:59,640
maintain things in the future and to not

00:52:57,240 --> 00:53:01,140
worry too much that you're doing it like

00:52:59,640 --> 00:53:03,120
every single other person in the

00:53:01,140 --> 00:53:05,820
industry because that's just a road to

00:53:03,120 --> 00:53:08,520
madness so I guess if I have a closing

00:53:05,820 --> 00:53:15,540
note it's um relax and try to find the

00:53:08,520 --> 00:53:18,090
simplest path I'd really like the new

00:53:15,540 --> 00:53:19,890
idea of styling CSS but unfortunately I

00:53:18,090 --> 00:53:22,860
did not see a really smart plug-ins like

00:53:19,890 --> 00:53:25,710
sterling this very basis they have a few

00:53:22,860 --> 00:53:28,560
smart plugins but not enough so if you

00:53:25,710 --> 00:53:30,750
want to make some good open source to

00:53:28,560 --> 00:53:33,300
become like popular and be on this stage

00:53:30,750 --> 00:53:35,580
it's a good way to like it's very easy

00:53:33,300 --> 00:53:38,160
just have free space for everyone it's

00:53:35,580 --> 00:53:41,850
just having a idea implement some good

00:53:38,160 --> 00:53:44,940
winters so let's make our CSS more

00:53:41,850 --> 00:53:48,030
maintainable by a good very smart

00:53:44,940 --> 00:53:50,310
linters so if you have created idea and

00:53:48,030 --> 00:53:52,910
write a plugin for Stallions it will be

00:53:50,310 --> 00:53:55,770
very nice for example like free idea

00:53:52,910 --> 00:53:58,680
slow properties like calculate the

00:53:55,770 --> 00:54:01,800
slowness of your CSS like box ad or

00:53:58,680 --> 00:54:06,660
Samsung or click compatible compatible

00:54:01,800 --> 00:54:11,250
plugins or something else my final note

00:54:06,660 --> 00:54:14,970
would be 23 yes and yes it's not a new

00:54:11,250 --> 00:54:17,940
language it's just the SS and JavaScript

00:54:14,970 --> 00:54:19,860
is just constraints automation it gives

00:54:17,940 --> 00:54:22,140
you something that you can use in order

00:54:19,860 --> 00:54:27,180
to write styles which don't break other

00:54:22,140 --> 00:54:30,300
people's code that's it yeah I would say

00:54:27,180 --> 00:54:32,940
that there is no perfect solution Wow

00:54:30,300 --> 00:54:35,100
so it depends a lot on your context I

00:54:32,940 --> 00:54:36,890
mean CSS in GIS might not be like the

00:54:35,100 --> 00:54:39,780
perfect solution for every use case

00:54:36,890 --> 00:54:41,670
particularly using CSS modules in an

00:54:39,780 --> 00:54:43,440
internal project and I'm very happy with

00:54:41,670 --> 00:54:45,330
that because I don't have to expose

00:54:43,440 --> 00:54:47,970
those components to anybody else so I

00:54:45,330 --> 00:54:50,700
have full control of the building pipe

00:54:47,970 --> 00:54:52,620
and everything so it doesn't mean that

00:54:50,700 --> 00:54:55,020
there is a perfect solution or whatever

00:54:52,620 --> 00:54:57,750
but you have to think about that AB

00:54:55,020 --> 00:54:59,700
something different as we did with react

00:54:57,750 --> 00:55:01,620
we are generating all the HTML on

00:54:59,700 --> 00:55:03,480
forgetting about that in class names or

00:55:01,620 --> 00:55:05,550
changing Dom notes or whatever is

00:55:03,480 --> 00:55:07,860
automatically handled for us right so we

00:55:05,550 --> 00:55:08,610
can do exactly the same thing with CSS

00:55:07,860 --> 00:55:11,640
in J yes

00:55:08,610 --> 00:55:13,770
because at the end the view is not just

00:55:11,640 --> 00:55:15,060
HTML and we are saying that a component

00:55:13,770 --> 00:55:18,060
is a function of the state that

00:55:15,060 --> 00:55:20,160
generates the view but CSS it's outside

00:55:18,060 --> 00:55:22,620
that work for react for it and in

00:55:20,160 --> 00:55:24,900
particular so it totally makes sense to

00:55:22,620 --> 00:55:27,780
do the same thing with CSS that we are

00:55:24,900 --> 00:55:31,110
doing actually with HTML so just get the

00:55:27,780 --> 00:55:33,510
concept and try out different solutions

00:55:31,110 --> 00:55:37,800
and find the one that Suites the best

00:55:33,510 --> 00:55:41,640
for your case all right first of all I

00:55:37,800 --> 00:55:44,160
was waiting all the time to get this one

00:55:41,640 --> 00:55:48,330
question about the atomic CSS actually

00:55:44,160 --> 00:55:51,240
it's okay whoever asked this just to let

00:55:48,330 --> 00:55:55,170
you know you can check out my project

00:55:51,240 --> 00:55:57,870
Fila because it's actually again

00:55:55,170 --> 00:56:00,810
generating atomic CSS in the end but you

00:55:57,870 --> 00:56:02,880
can still have like this better

00:56:00,810 --> 00:56:06,810
developer experience in writing your

00:56:02,880 --> 00:56:10,440
style just as an object and I have the

00:56:06,810 --> 00:56:13,140
final sort I maybe would say that you

00:56:10,440 --> 00:56:15,390
should take everything we actually tell

00:56:13,140 --> 00:56:19,110
you just as an inspiration because

00:56:15,390 --> 00:56:22,980
that's only what we have experienced

00:56:19,110 --> 00:56:26,250
that worked for us and that you can kind

00:56:22,980 --> 00:56:29,760
of shouldn't listen to us but explore

00:56:26,250 --> 00:56:33,180
yourself and just yeah you know use what

00:56:29,760 --> 00:56:37,340
works for you well that's a that's a

00:56:33,180 --> 00:56:37,340
good ending like don't listen to us

00:56:37,380 --> 00:56:44,040
but yeah that was an interesting panel I

00:56:41,320 --> 00:56:47,680
think we covered quite a lot of topics

00:56:44,040 --> 00:56:49,810
most of the popular ones and probably we

00:56:47,680 --> 00:56:52,270
can keep the conversation going after

00:56:49,810 --> 00:56:54,850
the panel I'm sure you will be able to

00:56:52,270 --> 00:56:57,490
reach any of the panelists and ask any

00:56:54,850 --> 00:57:01,090
more detailed questions that maybe are

00:56:57,490 --> 00:57:03,880
you know traveling you but I think that

00:57:01,090 --> 00:57:06,900
we did they did a great a great job so

00:57:03,880 --> 00:57:10,900
if we can give them a round of applause

00:57:06,900 --> 00:57:10,900
[Applause]

00:57:16,220 --> 00:57:18,280

YouTube URL: https://www.youtube.com/watch?v=NvhWRpf6irQ


