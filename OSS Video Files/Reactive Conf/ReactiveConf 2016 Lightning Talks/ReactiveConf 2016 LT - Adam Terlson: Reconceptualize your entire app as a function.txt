Title: ReactiveConf 2016 LT - Adam Terlson: Reconceptualize your entire app as a function
Publication date: 2016-11-24
Playlist: ReactiveConf 2016 Lightning Talks
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

For inspiration, look at one of the most-starred Lightning Talks proposals for ReactiveConf 2016.

---
Adam Terlson: Reconceptualize your entire app as a function

I will articulate what I have come to find to be a superior approach to building React applications — treating them as functions, not templates.
I will introduce how to:
- Separate the application you’re building and the platform its on from the components you write (Hey, that’s this one! Read on!).
- Inject state into your application, and what a “container” aka “connected” aka “smart” component really is.
- Implement more complex features by leveraging Higher Order Components and a compose function — it’s awesome.
- Make your application UI understandable by looking at a single file, not dozens.
- Make your codebase flat without sacrificing grokability.

https://gist.github.com/adamterlson/7997795e4735f5c4a495c8dabd4c368a

---

Do you see yourself on the ReactiveConf stage? Do you want to become the next #ReactJS superstar? If you think you have a great idea everybody in the community should know about, join Lightning Talks, and share the spotlight with the best React experts at ReactiveConf next year!

All you need to do to become a part of them is to submit your proposal to Gist and leave the rest to the community.

The ten most-starred proposals will join our line-up, and the top three ones will get a free ReactiveConf ticket with an invitation to an exclusive dinner with our speakers and VIP guests.

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, it’s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,550 --> 00:00:09,139
I'm going to try and introduce you to a

00:00:06,770 --> 00:00:11,180
new mental model for your entire react

00:00:09,139 --> 00:00:14,690
application as a function in only five

00:00:11,180 --> 00:00:16,460
minutes so no big deal there in order to

00:00:14,690 --> 00:00:19,279
do so I need to establish some sort of

00:00:16,460 --> 00:00:21,169
connection I'm from Minnesota it's right

00:00:19,279 --> 00:00:23,090
there I work for this company here's a

00:00:21,169 --> 00:00:28,790
picture of my dog I actually don't have

00:00:23,090 --> 00:00:30,230
a dog but hey done deus ex is the best

00:00:28,790 --> 00:00:32,689
template language in the world raise

00:00:30,230 --> 00:00:34,070
your hands yeah all of you who raised

00:00:32,689 --> 00:00:36,050
your hands you're probably not thinking

00:00:34,070 --> 00:00:40,250
in functions it's the best javascript

00:00:36,050 --> 00:00:42,769
extension in the world RAL so I want you

00:00:40,250 --> 00:00:44,989
to think that your entire UI your your

00:00:42,769 --> 00:00:47,449
your your features your routing

00:00:44,989 --> 00:00:50,390
everything is a product of a series of

00:00:47,449 --> 00:00:54,379
function in vocations with some props

00:00:50,390 --> 00:00:55,820
your app is what is returned and not

00:00:54,379 --> 00:00:58,280
what is actually invoking these

00:00:55,820 --> 00:01:00,890
functions so to demonstrate what I mean

00:00:58,280 --> 00:01:03,980
in the next four minutes I'm going to

00:01:00,890 --> 00:01:06,680
build my lovely application that you see

00:01:03,980 --> 00:01:09,110
here now this is probably a typical way

00:01:06,680 --> 00:01:11,510
that one might build this feature and

00:01:09,110 --> 00:01:14,390
react you have these sort of

00:01:11,510 --> 00:01:16,880
application-specific presentation

00:01:14,390 --> 00:01:18,650
components or dumb components right and

00:01:16,880 --> 00:01:20,300
then you have something like send

00:01:18,650 --> 00:01:24,080
message at the top which you are

00:01:20,300 --> 00:01:26,240
connecting with react redox using redox

00:01:24,080 --> 00:01:29,030
it's all well and good it definitely

00:01:26,240 --> 00:01:32,750
works but I'm going to introduce you to

00:01:29,030 --> 00:01:34,310
this different approach and what you can

00:01:32,750 --> 00:01:36,860
do is you can look at if you look at

00:01:34,310 --> 00:01:40,670
just the green layer your entire you I

00:01:36,860 --> 00:01:42,980
could conceptually be rendered as as a

00:01:40,670 --> 00:01:45,170
pure function a single pure function

00:01:42,980 --> 00:01:48,050
could render your entire application UI

00:01:45,170 --> 00:01:50,360
but it would do nothing all right so

00:01:48,050 --> 00:01:53,270
that's that's the base layer there then

00:01:50,360 --> 00:01:55,900
you build up vertically the vertical

00:01:53,270 --> 00:01:58,760
layers are higher order components I

00:01:55,900 --> 00:02:00,880
want to talk about extract abstraction

00:01:58,760 --> 00:02:04,940
so when we have third party dependencies

00:02:00,880 --> 00:02:07,070
we we almost always 'extract them and

00:02:04,940 --> 00:02:09,080
then we refer to those abstractions

00:02:07,070 --> 00:02:10,970
rather than the base dependency right

00:02:09,080 --> 00:02:13,010
why do we do this we do it for code

00:02:10,970 --> 00:02:14,950
reuse we do it to hide complexity add

00:02:13,010 --> 00:02:17,780
functionality merge two things together

00:02:14,950 --> 00:02:20,900
add enforced usage

00:02:17,780 --> 00:02:23,209
right but react provided components are

00:02:20,900 --> 00:02:26,000
a third-party dependency why do we not

00:02:23,209 --> 00:02:27,709
do this though when you build these

00:02:26,000 --> 00:02:31,160
abstractions you're basically creating

00:02:27,709 --> 00:02:34,310
your own type of HTML you're building a

00:02:31,160 --> 00:02:37,700
suite of application agnostic Lego

00:02:34,310 --> 00:02:41,180
blocks as was mentioned before that are

00:02:37,700 --> 00:02:43,340
semantic they're not actually the

00:02:41,180 --> 00:02:46,100
description of your app they're like

00:02:43,340 --> 00:02:48,730
HTML right so they don't know about the

00:02:46,100 --> 00:02:52,940
app that your building or your company

00:02:48,730 --> 00:02:54,980
so don't use low-level HTML and react

00:02:52,940 --> 00:02:57,130
native components everywhere once you

00:02:54,980 --> 00:03:00,440
build these abstractions leverage them

00:02:57,130 --> 00:03:01,970
though a quick warning there will be

00:03:00,440 --> 00:03:05,239
bright colors and I'm going very quickly

00:03:01,970 --> 00:03:07,069
so step one presentational components

00:03:05,239 --> 00:03:09,920
it's the low-level thing here so we're

00:03:07,069 --> 00:03:12,890
going to build this text input it's very

00:03:09,920 --> 00:03:15,230
straightforward so we're importing the

00:03:12,890 --> 00:03:17,780
the react native text input and we're

00:03:15,230 --> 00:03:20,300
exporting our own right so this is a

00:03:17,780 --> 00:03:21,950
very straightforward rap next we get

00:03:20,300 --> 00:03:23,420
some additional requirements we need to

00:03:21,950 --> 00:03:26,209
add a placeholder we're going to add

00:03:23,420 --> 00:03:29,480
some styles now just as was mentioned

00:03:26,209 --> 00:03:32,030
previously now you refer to this text

00:03:29,480 --> 00:03:34,400
input component that you've written and

00:03:32,030 --> 00:03:36,590
never refer to the base react native

00:03:34,400 --> 00:03:39,190
text input again this is your

00:03:36,590 --> 00:03:41,209
abstraction layer that you get to own

00:03:39,190 --> 00:03:42,920
step 2 we're going to add some

00:03:41,209 --> 00:03:44,840
functionality via higher-order

00:03:42,920 --> 00:03:46,700
components quick note about higher-order

00:03:44,840 --> 00:03:49,040
components it's simply a function that

00:03:46,700 --> 00:03:52,340
takes a react component and returns a

00:03:49,040 --> 00:03:54,350
new component hoc s are composable and

00:03:52,340 --> 00:03:56,600
i'll show you an example of this but the

00:03:54,350 --> 00:03:58,850
best thing about them is that they allow

00:03:56,600 --> 00:04:02,769
for a separation between functionality

00:03:58,850 --> 00:04:05,180
and presentation so one of the core

00:04:02,769 --> 00:04:07,280
features of a higher order component is

00:04:05,180 --> 00:04:09,320
that they do prop manipulation so an

00:04:07,280 --> 00:04:11,630
example of this is react redux is

00:04:09,320 --> 00:04:14,840
connect function as I mentioned though

00:04:11,630 --> 00:04:17,510
I'm going to build this particular text

00:04:14,840 --> 00:04:19,310
input message stack though looking again

00:04:17,510 --> 00:04:21,380
at the load level we have our text input

00:04:19,310 --> 00:04:23,479
component which you saw before it has

00:04:21,380 --> 00:04:26,870
placeholder value and on changes props

00:04:23,479 --> 00:04:29,210
being taken in that's our API so now

00:04:26,870 --> 00:04:30,650
let's build connect though connect is

00:04:29,210 --> 00:04:32,240
going to take in a

00:04:30,650 --> 00:04:33,800
ponent that's called rap component and

00:04:32,240 --> 00:04:35,919
return it this is a higher-order

00:04:33,800 --> 00:04:37,940
component example which does nothing

00:04:35,919 --> 00:04:40,460
next we're going to take in two

00:04:37,940 --> 00:04:42,530
arguments one state props one dispatch

00:04:40,460 --> 00:04:44,600
props and these are functions which we

00:04:42,530 --> 00:04:47,360
will invoke with the store state and

00:04:44,600 --> 00:04:49,490
stored dispatch and then spread the

00:04:47,360 --> 00:04:52,520
returned props back onto our wrapped

00:04:49,490 --> 00:04:54,889
component this actually works as a

00:04:52,520 --> 00:04:58,190
replacement for react redux is connect

00:04:54,889 --> 00:05:00,229
function and it's like six lines the one

00:04:58,190 --> 00:05:02,630
thing that's missing though is that it's

00:05:00,229 --> 00:05:04,970
not actually subscribing it won't

00:05:02,630 --> 00:05:07,600
rear-ender when state changes so we can

00:05:04,970 --> 00:05:10,760
hook into our life cycle events here and

00:05:07,600 --> 00:05:16,750
our wrapped component will then get rear

00:05:10,760 --> 00:05:20,240
entered anytime anything changes so

00:05:16,750 --> 00:05:22,370
adding adding on keyboard event you can

00:05:20,240 --> 00:05:25,970
you can basically write your own react

00:05:22,370 --> 00:05:28,280
to connect function here's an example of

00:05:25,970 --> 00:05:29,389
now using more than one higher-order

00:05:28,280 --> 00:05:30,530
component and then you have keyboard

00:05:29,389 --> 00:05:34,180
events and you can actually write

00:05:30,530 --> 00:05:34,180

YouTube URL: https://www.youtube.com/watch?v=5rtbSYl70ak


