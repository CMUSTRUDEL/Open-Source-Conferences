Title: ReactiveConf 2019 - Sean Larkin & Johannes Ewald: Secret Tips to Improve Your Webpack Configuration
Publication date: 2019-11-04
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Millennium stage
Captions: 
	00:00:02,240 --> 00:00:11,320
[Music]

00:00:13,840 --> 00:00:23,899
your hobby tour the guns of all my

00:00:18,920 --> 00:00:27,649
finest sleep can lease cos a gone wrong

00:00:23,899 --> 00:00:29,989
stage sorry sorry okay good point good

00:00:27,649 --> 00:00:35,420
point thank you

00:00:29,989 --> 00:00:37,820
oh do you know that character could

00:00:35,420 --> 00:00:41,810
couldn't talk killer chick good check

00:00:37,820 --> 00:00:43,850
yes the famous character like in a TV

00:00:41,810 --> 00:00:47,750
show for children and also in Germany I

00:00:43,850 --> 00:00:50,390
really love that character so I'm

00:00:47,750 --> 00:00:53,510
Johannes I founded a company called P

00:00:50,390 --> 00:00:56,930
recon we are based in Augsburg that's in

00:00:53,510 --> 00:01:00,620
Germany and my name is Sean Larkin I

00:00:56,930 --> 00:01:03,820
work at Microsoft on Microsoft edge but

00:01:00,620 --> 00:01:05,899
you may know us as to maintain errs who

00:01:03,820 --> 00:01:09,170
maintain an open source project called

00:01:05,899 --> 00:01:12,110
web pack who here actually uses web pack

00:01:09,170 --> 00:01:12,560
with the raise of hands so everyone okay

00:01:12,110 --> 00:01:18,020
cool

00:01:12,560 --> 00:01:23,360
just making sure don't checking so today

00:01:18,020 --> 00:01:25,850
we're gonna talk about Oh secret tips to

00:01:23,360 --> 00:01:30,229
improve your web pack config so this

00:01:25,850 --> 00:01:32,720
isn't the average deep dive on how web

00:01:30,229 --> 00:01:34,820
pack works under the hood or the things

00:01:32,720 --> 00:01:37,510
you know you need to know to make your

00:01:34,820 --> 00:01:43,420
own plugins this is even more secret

00:01:37,510 --> 00:01:43,420
these tips to make your web pack config

00:01:44,770 --> 00:01:52,840
so tip number one did you know that you

00:01:50,110 --> 00:01:58,030
don't even need a wet pack config to get

00:01:52,840 --> 00:02:01,240
started it's true so all of the

00:01:58,030 --> 00:02:04,420
configuration you see here is actually

00:02:01,240 --> 00:02:08,080
what web pack does by default the entry

00:02:04,420 --> 00:02:09,910
property output what we resolve how much

00:02:08,080 --> 00:02:12,220
like what the file name is where the

00:02:09,910 --> 00:02:13,989
destination is going to be all of this

00:02:12,220 --> 00:02:15,700
we built in under the hood

00:02:13,989 --> 00:02:18,640
starting with web pack four and up and

00:02:15,700 --> 00:02:21,010
the goal was that you should be able to

00:02:18,640 --> 00:02:22,930
start using webpack for the first time

00:02:21,010 --> 00:02:25,989
without ever having to worry about

00:02:22,930 --> 00:02:28,269
configuring anything who are we to

00:02:25,989 --> 00:02:32,260
decide you know who are we to decide

00:02:28,269 --> 00:02:34,000
whether or not you know you should get

00:02:32,260 --> 00:02:40,060
started because the barrier entry is too

00:02:34,000 --> 00:02:41,739
high so and although there are some

00:02:40,060 --> 00:02:44,590
things that we recommend you do

00:02:41,739 --> 00:02:46,599
configure or set like production and

00:02:44,590 --> 00:02:48,040
development mode you can still actually

00:02:46,599 --> 00:02:54,040
do these things through command line

00:02:48,040 --> 00:02:57,070
flags you can use your development mode

00:02:54,040 --> 00:02:59,380
production or none but we don't

00:02:57,070 --> 00:03:03,570
recommend that very very specific

00:02:59,380 --> 00:03:08,019
scenarios so but all these can be flags

00:03:03,570 --> 00:03:11,470
and you just have to run web pack with a

00:03:08,019 --> 00:03:15,239
with a specified mode or you can add it

00:03:11,470 --> 00:03:18,489
to the config okay write that one down

00:03:15,239 --> 00:03:20,530
so our next tip is that you can actually

00:03:18,489 --> 00:03:23,109
use typescript in your web pack config

00:03:20,530 --> 00:03:25,480
this is a feature a lot of people don't

00:03:23,109 --> 00:03:27,670
know and I'm really happy to show it to

00:03:25,480 --> 00:03:29,530
you so if you want to use typescript in

00:03:27,670 --> 00:03:31,630
your web pack conflict the first thing

00:03:29,530 --> 00:03:35,040
is you do is that you rename your web

00:03:31,630 --> 00:03:38,200
pack conflict is two epic conflict TS

00:03:35,040 --> 00:03:40,750
then you of course install the types and

00:03:38,200 --> 00:03:44,290
you also need to install TS node which

00:03:40,750 --> 00:03:48,100
is necessary to execute typescript with

00:03:44,290 --> 00:03:50,650
node and then you create a variable

00:03:48,100 --> 00:03:53,849
using the web pack dot configuration

00:03:50,650 --> 00:03:57,540
type and it looks like this

00:03:53,849 --> 00:03:59,430
and the what you also need to do since

00:03:57,540 --> 00:04:02,969
we are using Eggman script modules you

00:03:59,430 --> 00:04:05,340
also need to add the es module Interop

00:04:02,969 --> 00:04:08,099
flat but you probably already have that

00:04:05,340 --> 00:04:10,319
almost all typescript convicts I have

00:04:08,099 --> 00:04:12,870
seen have this flag on it should

00:04:10,319 --> 00:04:16,829
probably defaults yeah

00:04:12,870 --> 00:04:19,400
do you know anybody Microsoft no okay

00:04:16,829 --> 00:04:21,419
we'll find out Brian you hear that and

00:04:19,400 --> 00:04:22,349
the cool thing is that you get

00:04:21,419 --> 00:04:24,509
intellisense

00:04:22,349 --> 00:04:27,389
so you don't need to guess the

00:04:24,509 --> 00:04:28,740
configurations anymore your editor will

00:04:27,389 --> 00:04:30,630
show it to you so you're saying it'll

00:04:28,740 --> 00:04:31,500
validate you config before you even run

00:04:30,630 --> 00:04:34,500
your bill yes

00:04:31,500 --> 00:04:37,770
there's mistake output path is not an

00:04:34,500 --> 00:04:39,090
array it should be a string and will

00:04:37,770 --> 00:04:40,229
tell you that so I never have to

00:04:39,090 --> 00:04:43,440
remember any of it

00:04:40,229 --> 00:04:45,599
just rely on the types yeah okay so how

00:04:43,440 --> 00:04:47,910
does it work it's actually a map xci

00:04:45,599 --> 00:04:52,320
feature so it doesn't work if you use

00:04:47,910 --> 00:04:55,190
the node that pack API and a backseat I

00:04:52,320 --> 00:04:57,930
use is a module it's called interpret

00:04:55,190 --> 00:05:01,220
which maintains the dictionary of file

00:04:57,930 --> 00:05:04,409
extensions and associated module loaders

00:05:01,220 --> 00:05:06,599
so that's why it's searching for TS note

00:05:04,409 --> 00:05:09,570
in your note modules and this is also

00:05:06,599 --> 00:05:12,680
the reason that why you can also use

00:05:09,570 --> 00:05:15,360
Babel to transpile your backpack config

00:05:12,680 --> 00:05:18,659
so if you rename your web pack country

00:05:15,360 --> 00:05:21,240
to web by config dot Babel yes and you

00:05:18,659 --> 00:05:23,220
also make sure that a Babel config is in

00:05:21,240 --> 00:05:25,500
your project directory it will also

00:05:23,220 --> 00:05:26,880
compile your backpack config so you

00:05:25,500 --> 00:05:30,889
thing you could do with CoffeeScript

00:05:26,880 --> 00:05:39,930
also yeah you can if you want you okay

00:05:30,889 --> 00:05:43,889
just curious don't do that so the next

00:05:39,930 --> 00:05:47,340
tip did you know that instead of just an

00:05:43,889 --> 00:05:49,889
object web pack can you can return a

00:05:47,340 --> 00:05:52,770
function that returns an object but why

00:05:49,889 --> 00:05:54,599
why do we care about this so much let's

00:05:52,770 --> 00:05:56,430
see what it looks like so instead of

00:05:54,599 --> 00:05:59,430
just exporting an object with a bunch of

00:05:56,430 --> 00:06:00,719
types or properties you're instead gonna

00:05:59,430 --> 00:06:03,090
have a function that returns an object

00:06:00,719 --> 00:06:05,910
and this is super super important I

00:06:03,090 --> 00:06:09,300
think that every web pack configuration

00:06:05,910 --> 00:06:12,360
should use this feature who has

00:06:09,300 --> 00:06:14,370
different development environments like

00:06:12,360 --> 00:06:16,350
everybody you have a production mode in

00:06:14,370 --> 00:06:18,930
development right of course you do and

00:06:16,350 --> 00:06:21,690
we even try to enforce it with webpack

00:06:18,930 --> 00:06:23,220
so why is this so useful is because it

00:06:21,690 --> 00:06:25,230
allows you to pass in different

00:06:23,220 --> 00:06:27,540
environment variables from the command

00:06:25,230 --> 00:06:32,370
line you can actually use inside your

00:06:27,540 --> 00:06:35,010
configuration as variables themselves so

00:06:32,370 --> 00:06:38,370
take when you actually pass these flags

00:06:35,010 --> 00:06:40,050
in using - EMV you'll see the argument

00:06:38,370 --> 00:06:42,720
that is in the function that returns the

00:06:40,050 --> 00:06:45,360
config actually now has these properties

00:06:42,720 --> 00:06:46,860
available now if you if you're going to

00:06:45,360 --> 00:06:49,140
use this or have multiple types or

00:06:46,860 --> 00:06:51,330
different different types they're going

00:06:49,140 --> 00:06:52,770
to be assigned to - these flags we

00:06:51,330 --> 00:06:54,690
recommend that you default it to an

00:06:52,770 --> 00:06:59,340
empty object just so that your config

00:06:54,690 --> 00:07:01,710
doesn't throw but you can see here we

00:06:59,340 --> 00:07:03,660
can pull flags like mode or debug like

00:07:01,710 --> 00:07:08,480
we saw in the example before and then we

00:07:03,660 --> 00:07:08,480
just assign them to configuration values

00:07:09,110 --> 00:07:14,460
and we also recommend to always use

00:07:12,090 --> 00:07:16,680
default values so that the configuration

00:07:14,460 --> 00:07:19,850
always works if you don't provide any of

00:07:16,680 --> 00:07:22,169
these configuration flags exactly and

00:07:19,850 --> 00:07:26,430
this feature is called environment

00:07:22,169 --> 00:07:28,860
options so the next tip is the multi

00:07:26,430 --> 00:07:31,350
compiler mode oh that sounds fancy that

00:07:28,860 --> 00:07:34,770
sounds really crazy in fact it's really

00:07:31,350 --> 00:07:37,200
easy to turn on the multi compiler mode

00:07:34,770 --> 00:07:39,630
all you need to do is to return an array

00:07:37,200 --> 00:07:41,820
of configurations and this is really

00:07:39,630 --> 00:07:44,070
really useful if you're building an

00:07:41,820 --> 00:07:46,890
isomorphic JavaScript app where you need

00:07:44,070 --> 00:07:49,410
to transpile your bundle for the browser

00:07:46,890 --> 00:07:52,830
and also for node in this example you

00:07:49,410 --> 00:07:55,620
see we have different targets one is web

00:07:52,830 --> 00:07:57,270
and one is node and it can also name the

00:07:55,620 --> 00:08:00,800
different compilations and it will show

00:07:57,270 --> 00:08:02,640
in the output different child

00:08:00,800 --> 00:08:04,169
compilations we call them child

00:08:02,640 --> 00:08:06,480
compilations so this would be really

00:08:04,169 --> 00:08:08,880
cool for electron apps - which also have

00:08:06,480 --> 00:08:11,340
a main and a renderer right yeah perfect

00:08:08,880 --> 00:08:14,010
yeah so what exactly is this multi

00:08:11,340 --> 00:08:16,919
compiler mode when you're using the

00:08:14,010 --> 00:08:19,680
multi compiler mode BacPac builds each

00:08:16,919 --> 00:08:22,130
config concurrently in the same Pro

00:08:19,680 --> 00:08:25,080
while reusing the file system cache and

00:08:22,130 --> 00:08:27,090
I want to highlight concurrently and in

00:08:25,080 --> 00:08:29,520
the same process because it's not in

00:08:27,090 --> 00:08:31,860
parallel yes web pack uses a single

00:08:29,520 --> 00:08:35,779
threaded architecture behind the scenes

00:08:31,860 --> 00:08:38,550
and this is why you will still see like

00:08:35,779 --> 00:08:42,180
significant longer build times when

00:08:38,550 --> 00:08:44,850
you're building multiple projects so it

00:08:42,180 --> 00:08:47,490
does not execute each build in parallel

00:08:44,850 --> 00:08:49,500
but it will reuse some of the the things

00:08:47,490 --> 00:08:51,300
like for instance the file system cache

00:08:49,500 --> 00:08:53,089
but there's got to be a solution for

00:08:51,300 --> 00:08:56,310
this right yeah yeah

00:08:53,089 --> 00:08:59,220
do you know Laval Chuvalo who you knows

00:08:56,310 --> 00:09:01,320
who trivago is wow that's awesome in

00:08:59,220 --> 00:09:03,990
Europe typography is web packs number

00:09:01,320 --> 00:09:05,130
one sponsor so just for a moment can we

00:09:03,990 --> 00:09:10,170
please just give him a round of applause

00:09:05,130 --> 00:09:13,890
for making wet back possible oh thank

00:09:10,170 --> 00:09:15,450
you but thanks to the work that they've

00:09:13,890 --> 00:09:16,740
done they've created parallel web pack

00:09:15,450 --> 00:09:19,980
and why don't you describe parallel web

00:09:16,740 --> 00:09:22,890
pack is so parallel web app ex-prince

00:09:19,980 --> 00:09:25,170
ups several processes to build each

00:09:22,890 --> 00:09:29,670
configuration and different processes so

00:09:25,170 --> 00:09:32,310
it's it's real it's in parallel and yeah

00:09:29,670 --> 00:09:34,350
that's it so if I want to even have like

00:09:32,310 --> 00:09:36,360
let's say a bunch of smaller

00:09:34,350 --> 00:09:39,570
applications that I wanted to build I

00:09:36,360 --> 00:09:41,490
could have a multi you know many items

00:09:39,570 --> 00:09:46,620
in an array of configs and build them in

00:09:41,490 --> 00:09:48,779
parallel and stea yeah perfect chasing

00:09:46,620 --> 00:09:52,860
web pack on fake async web pack configs

00:09:48,779 --> 00:09:56,790
who's here to next j/s maybe if you okay

00:09:52,860 --> 00:09:59,670
or next so this feature is actually

00:09:56,790 --> 00:10:02,339
thanks to these library frameworks that

00:09:59,670 --> 00:10:05,190
abstract on top of reactant view so an

00:10:02,339 --> 00:10:07,440
async web pack config is where you're

00:10:05,190 --> 00:10:09,180
actually able to pass an async function

00:10:07,440 --> 00:10:11,400
as the function that returns the config

00:10:09,180 --> 00:10:13,260
object and this is super powerful

00:10:11,400 --> 00:10:15,630
especially for times when you are

00:10:13,260 --> 00:10:18,329
waiting on some sort of async process

00:10:15,630 --> 00:10:21,899
let's say a database connection or like

00:10:18,329 --> 00:10:29,630
an API call but for example what would

00:10:21,899 --> 00:10:35,750
show up oh now listen up

00:10:29,630 --> 00:10:37,190
time for a quiz is this valid in your

00:10:35,750 --> 00:10:40,190
configuration with this throw an error

00:10:37,190 --> 00:10:44,959
with this actually work so just say it

00:10:40,190 --> 00:10:47,800
out loud who thinks it would work chase

00:10:44,959 --> 00:10:53,000
five people who thinks it's invalid

00:10:47,800 --> 00:10:54,529
majority of people okay it's valid it's

00:10:53,000 --> 00:10:58,699
valid you can do this

00:10:54,529 --> 00:11:00,920
oh yeah the six people all right I'll

00:10:58,699 --> 00:11:02,959
give you a Red Bull later okay you get

00:11:00,920 --> 00:11:04,790
free beer in the evening for that yeah

00:11:02,959 --> 00:11:10,069
free beer at somebody's party there you

00:11:04,790 --> 00:11:12,680
go but we'll have there's still another

00:11:10,069 --> 00:11:16,519
time to redeem yourself here so is this

00:11:12,680 --> 00:11:18,949
the following actually valid raise your

00:11:16,519 --> 00:11:20,470
hand for yes this is following valid

00:11:18,949 --> 00:11:22,940
raise your hand for now

00:11:20,470 --> 00:11:28,579
quema I think the answer is no from

00:11:22,940 --> 00:11:30,199
people the answer is no you cannot

00:11:28,579 --> 00:11:34,009
actually return this you want talk about

00:11:30,199 --> 00:11:36,529
why yeah it makes actually no sense

00:11:34,009 --> 00:11:41,389
because the output path needs so we are

00:11:36,529 --> 00:11:44,959
best we're writing a lot of files and a

00:11:41,389 --> 00:11:51,769
single stream doesn't make sense so yeah

00:11:44,959 --> 00:11:54,170
exactly so the next tip is when maybe

00:11:51,769 --> 00:11:55,880
you know that situation you're you're

00:11:54,170 --> 00:11:58,339
working on your backpack configuration

00:11:55,880 --> 00:11:59,660
and you're changing like the

00:11:58,339 --> 00:12:01,399
configuration you're changing the

00:11:59,660 --> 00:12:05,120
loaders you're installing new modules

00:12:01,399 --> 00:12:07,069
and then you don't see anything happen

00:12:05,120 --> 00:12:09,829
and you ask yourself what's wrong and

00:12:07,069 --> 00:12:12,829
then you remind yourself ah right I have

00:12:09,829 --> 00:12:16,040
to restart the webpack process yes

00:12:12,829 --> 00:12:18,139
hater unfortunately like it's not really

00:12:16,040 --> 00:12:22,459
easy because backpack can't really like

00:12:18,139 --> 00:12:25,310
reload itself because the webpack watch

00:12:22,459 --> 00:12:28,689
mode is designed for watching the source

00:12:25,310 --> 00:12:31,519
files not the actual configuration files

00:12:28,689 --> 00:12:34,040
but you can do that with another module

00:12:31,519 --> 00:12:39,839
it's really popular it's called node Mon

00:12:34,040 --> 00:12:43,089
and it restarts the process once

00:12:39,839 --> 00:12:47,800
some specific files have changed so you

00:12:43,089 --> 00:12:51,579
use note 1 - - exact and you give the

00:12:47,800 --> 00:12:54,550
command that should be executed and you

00:12:51,579 --> 00:12:57,070
also should add a watch configuration

00:12:54,550 --> 00:12:59,079
and you only should watch the rest I

00:12:57,070 --> 00:13:01,000
went back and fake just a config

00:12:59,079 --> 00:13:03,550
because we only want to restart that you

00:13:01,000 --> 00:13:05,500
can also watch the packets chasing if

00:13:03,550 --> 00:13:08,589
you want to restart when you install a

00:13:05,500 --> 00:13:11,709
new module but yeah this is a locked

00:13:08,589 --> 00:13:13,300
file or lock files yeah yep oh yeah the

00:13:11,709 --> 00:13:17,500
locked files even better right more

00:13:13,300 --> 00:13:19,630
deterministic yeah so this is one tip

00:13:17,500 --> 00:13:23,140
use note mom use no Mon give it a try

00:13:19,630 --> 00:13:25,930
let us know what you think all right

00:13:23,140 --> 00:13:28,029
number seven use require dot resolve so

00:13:25,930 --> 00:13:29,170
what is the difference does anybody know

00:13:28,029 --> 00:13:36,519
the difference between require doubt

00:13:29,170 --> 00:13:37,810
resolve and its path dot resolve no why

00:13:36,519 --> 00:13:41,260
don't we take a look at a configuration

00:13:37,810 --> 00:13:42,970
so oftentimes when we are referring to

00:13:41,260 --> 00:13:44,079
different paths or files in a web pack

00:13:42,970 --> 00:13:46,390
config or

00:13:44,079 --> 00:13:48,699
either gonna pass an absolute path or

00:13:46,390 --> 00:13:50,440
relative path but web pack is actually

00:13:48,699 --> 00:13:52,839
really conservative about throwing

00:13:50,440 --> 00:13:54,910
errors in these situations this file may

00:13:52,839 --> 00:13:57,190
not exist on your file system yet it may

00:13:54,910 --> 00:13:59,199
appear later you know as you're doing

00:13:57,190 --> 00:14:00,640
development and web pack will kick in

00:13:59,199 --> 00:14:04,000
and make the assumption that you want to

00:14:00,640 --> 00:14:06,579
a lien say that you've just made a

00:14:04,000 --> 00:14:08,620
mistake right this is a you you know

00:14:06,579 --> 00:14:10,690
missed a character or you forgot to

00:14:08,620 --> 00:14:12,339
write something and you may see a bug

00:14:10,690 --> 00:14:13,779
and you pull your hair out not realizing

00:14:12,339 --> 00:14:16,120
what it was until you came back to your

00:14:13,779 --> 00:14:18,279
config and saw it so what we recommend

00:14:16,120 --> 00:14:20,740
you do is actually use required not

00:14:18,279 --> 00:14:22,839
resolved what this does is it validates

00:14:20,740 --> 00:14:25,690
the existence of this path and make sure

00:14:22,839 --> 00:14:26,769
it's valid before actually executing and

00:14:25,690 --> 00:14:30,790
being used in your web pack

00:14:26,769 --> 00:14:33,970
configuration the next tip is used

00:14:30,790 --> 00:14:35,949
filter dot filter boolean and this might

00:14:33,970 --> 00:14:38,649
seem like a hack if you haven't seen it

00:14:35,949 --> 00:14:41,320
before and Sean doesn't like it but I do

00:14:38,649 --> 00:14:44,199
like it though I recommend it to do that

00:14:41,320 --> 00:14:46,990
try it out so the idea is you have a

00:14:44,199 --> 00:14:49,029
specific configuration and for instance

00:14:46,990 --> 00:14:51,550
this style order and it's really cool to

00:14:49,029 --> 00:14:52,950
use in development but it's not really

00:14:51,550 --> 00:14:56,970
good to use in production

00:14:52,950 --> 00:15:01,139
so you somehow need to add a flag or

00:14:56,970 --> 00:15:03,930
like a ternary ternary statement in

00:15:01,139 --> 00:15:06,959
ternary expression so what you can do is

00:15:03,930 --> 00:15:10,769
that you do this is def ampersand

00:15:06,959 --> 00:15:14,010
ampersand and then use dot filter

00:15:10,769 --> 00:15:16,470
boolean to filter the array and if you

00:15:14,010 --> 00:15:19,139
do that dot filter boolean removes all

00:15:16,470 --> 00:15:21,720
the 4c values from an array so this is

00:15:19,139 --> 00:15:26,160
the configuration is still very readable

00:15:21,720 --> 00:15:29,220
and but in the end only the values that

00:15:26,160 --> 00:15:31,380
are truthly and up in the array or ring

00:15:29,220 --> 00:15:34,529
and this also works of course with the

00:15:31,380 --> 00:15:38,430
plugins and I think it's really useful

00:15:34,529 --> 00:15:40,829
but in general it's also or 1kv that you

00:15:38,430 --> 00:15:43,079
should know is that just because the

00:15:40,829 --> 00:15:45,300
backpack configuration takes any code

00:15:43,079 --> 00:15:48,600
doesn't mean you should put a lot of

00:15:45,300 --> 00:15:51,810
code in it that's right and that leads

00:15:48,600 --> 00:15:54,480
to the next part of the question so tip

00:15:51,810 --> 00:15:55,699
number nine avoid logic inside your web

00:15:54,480 --> 00:15:58,920
pack and fix

00:15:55,699 --> 00:16:01,529
especially unnecessary logic and one of

00:15:58,920 --> 00:16:04,649
the anecdotes that I like to make is you

00:16:01,529 --> 00:16:05,850
wouldn't treat I mean why not hold your

00:16:04,649 --> 00:16:08,160
configuration and your build

00:16:05,850 --> 00:16:09,779
infrastructure to the same standard that

00:16:08,160 --> 00:16:13,339
you hold your every day code that you

00:16:09,779 --> 00:16:15,360
write so unnecessary abstractions or

00:16:13,339 --> 00:16:17,690
additional logic that doesn't need to be

00:16:15,360 --> 00:16:20,490
there why not use composition and

00:16:17,690 --> 00:16:22,260
modularization instead so instead of

00:16:20,490 --> 00:16:25,170
having logic inside your configuration

00:16:22,260 --> 00:16:27,660
like this I like to recommend that you

00:16:25,170 --> 00:16:30,269
instead compose the configurations using

00:16:27,660 --> 00:16:32,279
tools like web pack merge web pack verge

00:16:30,269 --> 00:16:34,440
is an object to sign that's friendly for

00:16:32,279 --> 00:16:37,040
web pack configs and allows her a safe

00:16:34,440 --> 00:16:39,720
merging of things like your rules and

00:16:37,040 --> 00:16:42,120
rules loaders in addition to plugins and

00:16:39,720 --> 00:16:43,920
respects their orders but the too long

00:16:42,120 --> 00:16:46,410
didn't read version is instead of having

00:16:43,920 --> 00:16:48,510
logic in a single config have a

00:16:46,410 --> 00:16:50,160
development configuration a production

00:16:48,510 --> 00:16:53,160
configuration and compose them together

00:16:50,160 --> 00:16:54,600
with a base this way you know exactly

00:16:53,160 --> 00:16:56,600
what you need for the specific

00:16:54,600 --> 00:16:58,910
environment without having to look at a

00:16:56,600 --> 00:17:04,470
1,000 line web pack code or

00:16:58,910 --> 00:17:06,780
configuration so our next tip is use

00:17:04,470 --> 00:17:08,730
module rules one of

00:17:06,780 --> 00:17:12,810
who of you has heard of the one off

00:17:08,730 --> 00:17:15,780
condition I see one person no three

00:17:12,810 --> 00:17:18,720
three three years so it's not really

00:17:15,780 --> 00:17:20,970
popular but I think it would help a lot

00:17:18,720 --> 00:17:23,339
of epic configurations to avoid a

00:17:20,970 --> 00:17:25,589
specific mistake I see very often

00:17:23,339 --> 00:17:28,860
absolutely so what does the one-off

00:17:25,589 --> 00:17:33,480
option do and in order to explain that

00:17:28,860 --> 00:17:35,820
you need to know how how loaders are

00:17:33,480 --> 00:17:38,820
executed so three important things to

00:17:35,820 --> 00:17:43,530
remember about loaders the order of

00:17:38,820 --> 00:17:45,870
rules is important of course and loaders

00:17:43,530 --> 00:17:48,750
are executed from bottom to top and from

00:17:45,870 --> 00:17:51,740
right to left this is sometimes people

00:17:48,750 --> 00:17:56,010
think it's unintuitive leaky abstraction

00:17:51,740 --> 00:18:01,020
abstraction and this is really important

00:17:56,010 --> 00:18:04,260
every rule that matches gets applied so

00:18:01,020 --> 00:18:05,880
I would say time for a little quiz again

00:18:04,260 --> 00:18:10,530
don't be frightened

00:18:05,880 --> 00:18:13,350
it's an easy quiz so given this rules

00:18:10,530 --> 00:18:20,820
config what loaders would be executed on

00:18:13,350 --> 00:18:26,580
a j/s module in which order B a a b c c

00:18:20,820 --> 00:18:34,350
b a or none who's that's one what okay

00:18:26,580 --> 00:18:41,840
no one - how about three oh so they were

00:18:34,350 --> 00:18:44,820
listening nice talk none okay good

00:18:41,840 --> 00:18:50,250
congratulations you are correct yeah

00:18:44,820 --> 00:18:52,500
number three so explain why yep so

00:18:50,250 --> 00:18:54,540
already said every stop every module

00:18:52,500 --> 00:18:56,850
then right so every rule that matches

00:18:54,540 --> 00:18:59,430
gets applied and I see this error very

00:18:56,850 --> 00:19:02,490
very often because people think oh the

00:18:59,430 --> 00:19:06,750
first rule matched and then it ignores

00:19:02,490 --> 00:19:09,330
the rest yeah right so that's the

00:19:06,750 --> 00:19:13,110
correct answer so what you can do is you

00:19:09,330 --> 00:19:16,290
can use the one off condition and

00:19:13,110 --> 00:19:18,420
now the answer would be just a debate B

00:19:16,290 --> 00:19:20,790
loader and then the a loader because it

00:19:18,420 --> 00:19:28,200
pays out after the first rule that

00:19:20,790 --> 00:19:31,110
matched number eleven so when you're

00:19:28,200 --> 00:19:32,550
actually using loaders and rules there's

00:19:31,110 --> 00:19:34,650
a specific pattern that we think is

00:19:32,550 --> 00:19:37,740
super successful so when you use when

00:19:34,650 --> 00:19:41,310
you're testing to match files you want

00:19:37,740 --> 00:19:44,640
to use extensions and then you want to

00:19:41,310 --> 00:19:46,710
use include for absolute paths so show

00:19:44,640 --> 00:19:50,430
the example here when you're actually

00:19:46,710 --> 00:19:52,980
trying to match against your source code

00:19:50,430 --> 00:19:55,200
what we do and I mean yo.hannes and

00:19:52,980 --> 00:19:57,180
myself both do this we try to do it at

00:19:55,200 --> 00:19:59,280
Microsoft all the time is that when you

00:19:57,180 --> 00:20:01,710
have a project we try to automatically

00:19:59,280 --> 00:20:03,660
assume that the only sources that you're

00:20:01,710 --> 00:20:05,430
going to be filtering through or

00:20:03,660 --> 00:20:07,770
transpiling with loaders is going to be

00:20:05,430 --> 00:20:09,450
in your source directory right but then

00:20:07,770 --> 00:20:10,740
let's say if you want to branch out more

00:20:09,450 --> 00:20:14,550
right like let's say there's a special

00:20:10,740 --> 00:20:18,060
module that you know can be transpiled

00:20:14,550 --> 00:20:20,900
into more optimized code right like for

00:20:18,060 --> 00:20:25,080
example async await compiler trans piles

00:20:20,900 --> 00:20:27,510
282 lines of code for one async away you

00:20:25,080 --> 00:20:29,700
wouldn't want to transpile that down

00:20:27,510 --> 00:20:32,670
since almost every browser supports that

00:20:29,700 --> 00:20:35,280
today so what we could do is we could go

00:20:32,670 --> 00:20:37,950
in and not only can we test against

00:20:35,280 --> 00:20:40,770
specific files but we can also include

00:20:37,950 --> 00:20:43,290
and add them to specific directories or

00:20:40,770 --> 00:20:46,320
modules that we're looking for so the

00:20:43,290 --> 00:20:49,920
pro tip is to always use include instead

00:20:46,320 --> 00:20:56,820
of exclude yes and this is theory of the

00:20:49,920 --> 00:20:59,280
example John mentioned so let's get to

00:20:56,820 --> 00:21:03,060
the last tip and there are actually two

00:20:59,280 --> 00:21:04,950
parts there is yeah so I call it with

00:21:03,060 --> 00:21:07,170
this snappy title how to apply different

00:21:04,950 --> 00:21:10,860
loaders on the same module a part one

00:21:07,170 --> 00:21:14,100
sorry I didn't found a title it's not

00:21:10,860 --> 00:21:15,690
really catchy but it's okay it's a

00:21:14,100 --> 00:21:22,070
really really cool epic feature and I

00:21:15,690 --> 00:21:22,070
think almost no one knows so listen up

00:21:22,610 --> 00:21:25,680
suppose you want to use the react as

00:21:25,260 --> 00:21:28,530
which

00:21:25,680 --> 00:21:33,060
order if you don't know that loader it

00:21:28,530 --> 00:21:35,730
turns an SVG like this into a react

00:21:33,060 --> 00:21:39,210
component the functional react component

00:21:35,730 --> 00:21:42,720
and then you can import that component

00:21:39,210 --> 00:21:45,270
and from another component and just

00:21:42,720 --> 00:21:49,260
render it it's really cool but there's a

00:21:45,270 --> 00:21:52,560
problem for sad suppose you also want to

00:21:49,260 --> 00:21:54,990
use that SVG in a CSS file and now web

00:21:52,560 --> 00:21:57,750
pack doesn't know should it be a react

00:21:54,990 --> 00:22:01,370
component or should it be a file maybe

00:21:57,750 --> 00:22:03,570
you actually also run into this problem

00:22:01,370 --> 00:22:05,070
they'll probably throw an error if we

00:22:03,570 --> 00:22:07,350
just had that one loaded right yeah yeah

00:22:05,070 --> 00:22:10,560
so it this would throw an error because

00:22:07,350 --> 00:22:14,880
you can't import a react component into

00:22:10,560 --> 00:22:19,020
a CSS file so one possible solution is

00:22:14,880 --> 00:22:22,770
that you could add a query parameter to

00:22:19,020 --> 00:22:25,650
the through the URL what yes it looks

00:22:22,770 --> 00:22:28,650
odd but actually this what this is a

00:22:25,650 --> 00:22:30,990
valid ACMA script module because all the

00:22:28,650 --> 00:22:34,920
ACMA script modules use URL so you are

00:22:30,990 --> 00:22:38,370
allowed to put a a query parameter so

00:22:34,920 --> 00:22:41,190
and if you can configure your web pack

00:22:38,370 --> 00:22:44,040
like this you use the one-off rule so we

00:22:41,190 --> 00:22:46,890
bail out when the first rule matches and

00:22:44,040 --> 00:22:49,890
then you specify the resource query

00:22:46,890 --> 00:22:54,180
which says if this resource query is

00:22:49,890 --> 00:22:59,610
present please use the react SVG loader

00:22:54,180 --> 00:23:01,740
if not use the second rule oh okay you

00:22:59,610 --> 00:23:05,310
if you want to import it as a component

00:23:01,740 --> 00:23:07,650
you put a question mark and if you just

00:23:05,310 --> 00:23:10,260
want to import it don't use the question

00:23:07,650 --> 00:23:12,090
mark like this even I want to show you

00:23:10,260 --> 00:23:13,680
that configuration because I think it's

00:23:12,090 --> 00:23:15,150
really useful but there's even a better

00:23:13,680 --> 00:23:16,830
solution to it and I was going to say

00:23:15,150 --> 00:23:19,800
that query that resource query makes me

00:23:16,830 --> 00:23:22,500
feel sick yeah it looks ugly I have yes

00:23:19,800 --> 00:23:25,560
ik can we do something different so part

00:23:22,500 --> 00:23:28,710
two there is a feature that is called

00:23:25,560 --> 00:23:30,720
issuer so we refer to issuer we're

00:23:28,710 --> 00:23:33,450
talking about the file in which the

00:23:30,720 --> 00:23:36,270
module was imported from so in this

00:23:33,450 --> 00:23:39,330
specific case we can actually filter

00:23:36,270 --> 00:23:41,010
what loaders apply to what based on your

00:23:39,330 --> 00:23:44,309
issuer so in this case we can say

00:23:41,010 --> 00:23:47,900
anytime somebody imports an SVG into a

00:23:44,309 --> 00:23:51,720
JSX file apply the react SVG loader

00:23:47,900 --> 00:23:54,660
anytime that you are importing an SUV or

00:23:51,720 --> 00:23:56,990
a SVG file is being treated as a

00:23:54,660 --> 00:24:00,660
dependency or imported into a CSS file

00:23:56,990 --> 00:24:03,809
use the issue or CSS and use the file

00:24:00,660 --> 00:24:06,870
loader so this I mean in my opinion it's

00:24:03,809 --> 00:24:09,690
way cleaner the word issuer is kind of

00:24:06,870 --> 00:24:11,429
different but I think once you

00:24:09,690 --> 00:24:12,990
understand that it's what's issuing the

00:24:11,429 --> 00:24:15,270
request for the module I think that's

00:24:12,990 --> 00:24:18,900
how I remember it but yeah so now you

00:24:15,270 --> 00:24:21,570
can have both usages no resource queries

00:24:18,900 --> 00:24:24,540
and you have this kind of flexibility

00:24:21,570 --> 00:24:27,660
which is excellent the funny thing is

00:24:24,540 --> 00:24:30,950
that you can also you could also import

00:24:27,660 --> 00:24:34,050
a JSON file into a sass file with that

00:24:30,950 --> 00:24:36,960
with that approach you just need to turn

00:24:34,050 --> 00:24:39,270
that JSON file into valid SAS code but

00:24:36,960 --> 00:24:42,360
it would technically it would work so

00:24:39,270 --> 00:24:45,150
you can you can create rules to import

00:24:42,360 --> 00:24:47,250
one module into another and use

00:24:45,150 --> 00:24:49,620
different rules based on the file

00:24:47,250 --> 00:24:58,470
extension yes the new design system JSON

00:24:49,620 --> 00:25:01,429
in SPSS so to do a short that to do a

00:24:58,470 --> 00:25:04,890
short recap forget what's on to say yeah

00:25:01,429 --> 00:25:08,400
so you don't need a web pack convict we

00:25:04,890 --> 00:25:10,440
have a good good default there's

00:25:08,400 --> 00:25:14,790
typescript support for the for the

00:25:10,440 --> 00:25:19,380
configuration you can use functions as a

00:25:14,790 --> 00:25:22,860
configuration to pass in and parameters

00:25:19,380 --> 00:25:24,929
there's multi compiler mode you can do a

00:25:22,860 --> 00:25:29,360
single app pack convicts if you really

00:25:24,929 --> 00:25:33,660
want you to go crazy go crazy you can is

00:25:29,360 --> 00:25:37,679
Note one to restart web pack used to

00:25:33,660 --> 00:25:42,960
require resolved for early errors use

00:25:37,679 --> 00:25:47,090
filter boolean avoid config logic please

00:25:42,960 --> 00:25:50,309
use these new module rules one off

00:25:47,090 --> 00:25:52,559
his test for file extension thank you

00:25:50,309 --> 00:25:54,720
yes include for absolute paths and

00:25:52,559 --> 00:25:56,759
always use include to make always

00:25:54,720 --> 00:26:00,869
include to make sure that you don't

00:25:56,759 --> 00:26:03,929
execute loaders on on node modules yes

00:26:00,869 --> 00:26:05,820
and if you want to apply different

00:26:03,929 --> 00:26:08,999
loaders on the same module you can use

00:26:05,820 --> 00:26:14,340
the resource query condition and use the

00:26:08,999 --> 00:26:18,059
issue your condition oh but yeah since

00:26:14,340 --> 00:26:20,879
we have time there's one more really

00:26:18,059 --> 00:26:23,190
exciting tip that only you guys are

00:26:20,879 --> 00:26:25,440
gonna find out for the first time and

00:26:23,190 --> 00:26:30,749
that is everything that we just talked

00:26:25,440 --> 00:26:32,309
about today is in our documentation but

00:26:30,749 --> 00:26:34,289
we know that you don't read the

00:26:32,309 --> 00:26:38,159
documentation so it was secret for you

00:26:34,289 --> 00:26:41,369
so it is a secret for you and so if you

00:26:38,159 --> 00:26:43,710
ever feel nervous or overwhelmed with

00:26:41,369 --> 00:26:46,859
these tips and you want to learn more or

00:26:43,710 --> 00:26:54,629
reference them wet package is org and

00:26:46,859 --> 00:26:57,029
you can find in their documentation but

00:26:54,629 --> 00:26:59,399
thank you thank you do we have time for

00:26:57,029 --> 00:27:01,619
questions already no I just want to

00:26:59,399 --> 00:27:03,720
mention if you want to look up any of

00:27:01,619 --> 00:27:06,299
these tips you can go to this repository

00:27:03,720 --> 00:27:09,379
and you see example configurations and

00:27:06,299 --> 00:27:13,499
yeah thank you and thank you very much

00:27:09,379 --> 00:27:15,600
that was Shawn Larkin and Johannes a

00:27:13,499 --> 00:27:17,700
volt we do have a few questions guys for

00:27:15,600 --> 00:27:20,070
you Oh what are the biggest challenges

00:27:17,700 --> 00:27:24,359
going forward for what back these

00:27:20,070 --> 00:27:26,580
challenges I think why don't you give

00:27:24,359 --> 00:27:27,929
you you give one sentence and I'll give

00:27:26,580 --> 00:27:29,399
one sentence okay what I think my

00:27:27,929 --> 00:27:32,210
challenge yeah I think the biggest

00:27:29,399 --> 00:27:35,639
challenge is that the like the official

00:27:32,210 --> 00:27:38,070
specifications currently change so

00:27:35,639 --> 00:27:40,559
there's a specification an official at

00:27:38,070 --> 00:27:45,509
specification to import HTML modules

00:27:40,559 --> 00:27:47,399
into JavaScript and also CSS modules and

00:27:45,509 --> 00:27:50,399
this is currently like there's a lot of

00:27:47,399 --> 00:27:53,399
changing and we want to get this right

00:27:50,399 --> 00:27:57,049
but soon somewhere in the future we will

00:27:53,399 --> 00:27:58,750
support native HTML and CSS modules

00:27:57,049 --> 00:28:01,539
exactly right

00:27:58,750 --> 00:28:03,070
one of wet packs goals is that you could

00:28:01,539 --> 00:28:05,710
maybe not use a bundle or during your

00:28:03,070 --> 00:28:08,260
development environment and the code

00:28:05,710 --> 00:28:09,940
that you wrote still works right that's

00:28:08,260 --> 00:28:12,760
not only just a good development

00:28:09,940 --> 00:28:14,320
practice but it's it could offer other

00:28:12,760 --> 00:28:16,179
benefits that people want to see right

00:28:14,320 --> 00:28:18,880
and so for that to happen we have to

00:28:16,179 --> 00:28:21,400
adhere to the specs that exist today for

00:28:18,880 --> 00:28:24,100
modules and so with all this kind of

00:28:21,400 --> 00:28:25,780
churn that is happening now it does

00:28:24,100 --> 00:28:27,460
become a challenge for us because then

00:28:25,780 --> 00:28:30,490
we have to be really careful of the

00:28:27,460 --> 00:28:31,600
experiments that we show I think we can

00:28:30,490 --> 00:28:32,470
just go to the next question that was

00:28:31,600 --> 00:28:34,210
good I like that

00:28:32,470 --> 00:28:38,500
alright so why does wet pack not called

00:28:34,210 --> 00:28:41,919
a filter boolean by default there would

00:28:38,500 --> 00:28:45,039
be I mean you can talk about yeah since

00:28:41,919 --> 00:28:48,010
I think it's a good idea not Shawn yeah

00:28:45,039 --> 00:28:50,200
so the backpack will actually complain

00:28:48,010 --> 00:28:52,690
about if you have a for C value in the

00:28:50,200 --> 00:28:55,299
in the array so it's it validates the

00:28:52,690 --> 00:28:58,600
configuration and if it just removes it

00:28:55,299 --> 00:29:02,289
I think it's kind of magic that you

00:28:58,600 --> 00:29:04,419
don't always expect yeah suppose we have

00:29:02,289 --> 00:29:06,280
you have done a mistake and then it just

00:29:04,419 --> 00:29:07,870
removes the conflict without saying

00:29:06,280 --> 00:29:11,020
something I don't think this would be a

00:29:07,870 --> 00:29:12,549
good idea so yeah I mean maybe that's a

00:29:11,020 --> 00:29:14,530
feature that you could propose by

00:29:12,549 --> 00:29:15,030
turning on a flag why not like that's a

00:29:14,530 --> 00:29:17,559
good idea

00:29:15,030 --> 00:29:20,880
the next question is for ya next

00:29:17,559 --> 00:29:25,330
question is final my kind of question

00:29:20,880 --> 00:29:28,320
beautiful shoes grow it out just grow it

00:29:25,330 --> 00:29:32,830
out and you know brush it once a day

00:29:28,320 --> 00:29:35,169
what about tree shaking imported NPM

00:29:32,830 --> 00:29:37,270
packages as long as you're using a crow

00:29:35,169 --> 00:29:40,030
script modules web packs default and

00:29:37,270 --> 00:29:41,289
production mode is to tree shape so as

00:29:40,030 --> 00:29:44,950
long as you're only using a piece of

00:29:41,289 --> 00:29:46,539
that module it's it's only going to like

00:29:44,950 --> 00:29:49,000
automatically by default without you

00:29:46,539 --> 00:29:50,530
having to do anything special it will

00:29:49,000 --> 00:29:52,780
automatically tree shake that what is

00:29:50,530 --> 00:29:54,850
that which is not used you should

00:29:52,780 --> 00:29:57,309
mention that the problem is that library

00:29:54,850 --> 00:29:58,120
offers on NPM need to do something

00:29:57,309 --> 00:30:00,909
specific

00:29:58,120 --> 00:30:02,679
oh they need to add a special flag in

00:30:00,909 --> 00:30:06,429
the package space and a side effect

00:30:02,679 --> 00:30:09,520
false flag because the problem is if the

00:30:06,429 --> 00:30:11,140
author doesn't opt in and like if the

00:30:09,520 --> 00:30:12,460
author doesn't tell us that it's

00:30:11,140 --> 00:30:14,590
side-effect free we

00:30:12,460 --> 00:30:16,720
country shake because we would

00:30:14,590 --> 00:30:19,990
regressively we would remove code

00:30:16,720 --> 00:30:21,640
correct yeah yeah if you want to see a

00:30:19,990 --> 00:30:24,310
great example of a library that does

00:30:21,640 --> 00:30:27,940
this today correctly take a look at lo -

00:30:24,310 --> 00:30:29,440
es is it is a great option alright when

00:30:27,940 --> 00:30:32,170
would you consider wet bag the wrong

00:30:29,440 --> 00:30:34,720
tool for the job when do you consider

00:30:32,170 --> 00:30:37,540
the wrong tool for the job yeah I mean

00:30:34,720 --> 00:30:41,200
so one of our goals of web pack is that

00:30:37,540 --> 00:30:45,130
we wanted it to be as much as you want

00:30:41,200 --> 00:30:47,230
from it right so I think that it's meant

00:30:45,130 --> 00:30:49,300
to be able to scale to huge teams but we

00:30:47,230 --> 00:30:51,400
also have a goal to try and make it as

00:30:49,300 --> 00:30:52,930
easy to use as possible for getting

00:30:51,400 --> 00:30:54,880
started with even a small project so

00:30:52,930 --> 00:30:57,130
it's like I mean at the end of the day

00:30:54,880 --> 00:31:01,000
web packs popular because it is so

00:30:57,130 --> 00:31:02,290
flexible and configurable but it's also

00:31:01,000 --> 00:31:04,540
complained about because it's so

00:31:02,290 --> 00:31:05,980
flexible and configurable so I think

00:31:04,540 --> 00:31:09,190
it's really up to you

00:31:05,980 --> 00:31:11,890
and or your team or your company when

00:31:09,190 --> 00:31:13,570
you know to decide when it's you know

00:31:11,890 --> 00:31:15,040
you're using it for the wrong job that

00:31:13,570 --> 00:31:17,440
is very specific yeah go ahead

00:31:15,040 --> 00:31:20,170
I also wanted to add that web pack is

00:31:17,440 --> 00:31:22,330
not a generic task runner right if you

00:31:20,170 --> 00:31:25,300
have the requirement if you want to kick

00:31:22,330 --> 00:31:28,150
up a specific task when a file changes

00:31:25,300 --> 00:31:29,950
sometimes it's still better to use gulp

00:31:28,150 --> 00:31:31,360
or grunt because that's the right --true

00:31:29,950 --> 00:31:33,940
for that job yeah if you're just writing

00:31:31,360 --> 00:31:36,220
tasks use NPM tasks or if you're just

00:31:33,940 --> 00:31:38,520
transpiling CSS that's a good example

00:31:36,220 --> 00:31:40,990
where it'd be you know for the wrong job

00:31:38,520 --> 00:31:43,180
all right guys the last two questions

00:31:40,990 --> 00:31:45,430
okay what PEC versus roll-up what are

00:31:43,180 --> 00:31:48,070
the benefits of using wet pack instead

00:31:45,430 --> 00:31:49,870
of raw of web pack is more rigid in

00:31:48,070 --> 00:31:53,230
terms of being aligned to the

00:31:49,870 --> 00:31:55,300
specification that like that's that's

00:31:53,230 --> 00:31:59,050
one benefit right so like if they're

00:31:55,300 --> 00:32:00,850
like any any type of code that the

00:31:59,050 --> 00:32:03,760
module spec supports web pack supports

00:32:00,850 --> 00:32:05,680
it at the cost of latter node you roll

00:32:03,760 --> 00:32:08,170
up cut some corners and it's like 2%

00:32:05,680 --> 00:32:10,000
smaller right I would say the main

00:32:08,170 --> 00:32:12,940
benefit of web pack has the ecosystem

00:32:10,000 --> 00:32:14,140
and you know you should almost always

00:32:12,940 --> 00:32:16,720
use it when you're writing a web

00:32:14,140 --> 00:32:18,340
application but there's huge amounts of

00:32:16,720 --> 00:32:20,650
benefit for using roll-up to bundle

00:32:18,340 --> 00:32:23,200
libraries web pack itself we don't

00:32:20,650 --> 00:32:24,999
recommend you create or package a

00:32:23,200 --> 00:32:28,209
library using webpack but

00:32:24,999 --> 00:32:30,219
me you you bundle your application that

00:32:28,209 --> 00:32:32,349
consumes a library but this will get

00:32:30,219 --> 00:32:33,869
better with a pack five it will get way

00:32:32,349 --> 00:32:36,639
better with microfiber

00:32:33,869 --> 00:32:39,459
stay tuned or just go out and try the

00:32:36,639 --> 00:32:41,379
beta last question will it be possible

00:32:39,459 --> 00:32:45,429
in the future to use more types of entry

00:32:41,379 --> 00:32:48,069
points I'm sorry will be possible in

00:32:45,429 --> 00:32:54,699
future two moves use more types of entry

00:32:48,069 --> 00:32:57,309
points this issue is as all this

00:32:54,699 --> 00:32:59,679
backpack obviously it's it's one of the

00:32:57,309 --> 00:33:02,699
oldest issues the problem is that it's

00:32:59,679 --> 00:33:05,229
technically it's really challenging and

00:33:02,699 --> 00:33:07,929
not make a lot of assumptions Yeah right

00:33:05,229 --> 00:33:10,149
like webpack is not only just enough a

00:33:07,929 --> 00:33:12,519
bundler for the web it's also for node

00:33:10,149 --> 00:33:14,139
it's for electron apps it's for so like

00:33:12,519 --> 00:33:15,819
how could we support those features

00:33:14,139 --> 00:33:18,069
there have to be just really careful

00:33:15,819 --> 00:33:20,799
about the defaults otherwise you end up

00:33:18,069 --> 00:33:23,019
with a very generic tool that has a lot

00:33:20,799 --> 00:33:25,149
more overhead and debt involved in it

00:33:23,019 --> 00:33:27,009
where features might not always work the

00:33:25,149 --> 00:33:29,829
way that you expect them to but if

00:33:27,009 --> 00:33:32,889
you're interested in we are planning to

00:33:29,829 --> 00:33:36,069
add negatives to support for HTML and

00:33:32,889 --> 00:33:39,549
CSS and I expect that we will probably

00:33:36,069 --> 00:33:41,769
do that once we have that but yeah web

00:33:39,549 --> 00:33:43,929
pack 5 just add a new module type

00:33:41,769 --> 00:33:45,309
experimental called asset so instead of

00:33:43,929 --> 00:33:47,139
having to use things like file loader

00:33:45,309 --> 00:33:48,459
you're going to actually be able to just

00:33:47,139 --> 00:33:51,339
turn on an experiment that will

00:33:48,459 --> 00:33:53,499
automatically support assets as a module

00:33:51,339 --> 00:33:57,219
type so we're going in that same

00:33:53,499 --> 00:33:59,289
direction for HTML and CSS great there

00:33:57,219 --> 00:34:01,419
are many other questions but we didn't

00:33:59,289 --> 00:34:03,489
find it right now I mean this is what

00:34:01,419 --> 00:34:05,289
you get when you makes a couple of

00:34:03,489 --> 00:34:12,490
Maestro and a paramedic together we get

00:34:05,289 --> 00:34:16,599
a web back thank you for laughing you

00:34:12,490 --> 00:34:19,329
can talk to them once again at the chat

00:34:16,599 --> 00:34:22,569
zone at 5:30 to discover chain discovery

00:34:19,329 --> 00:34:25,119
stage today so with that in mind thank

00:34:22,569 --> 00:34:27,549
you so much again it's a show Larkin and

00:34:25,119 --> 00:34:27,950
Johannes a belt thank you my bad you

00:34:27,549 --> 00:34:32,200
thank you

00:34:27,950 --> 00:34:32,200
much so good boy

00:34:33,050 --> 00:34:36,199

YouTube URL: https://www.youtube.com/watch?v=J3GqBkw6ebk


