Title: ReactiveConf 2019 - Liz Krane: Kicking Bugs and Logging Names: Errors in JavaScript Error Reporting
Publication date: 2019-10-30
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Millennium stage
-------------------------------------------------------------------
How can we extract the most value from our front-end JavaScript errors, especially when users often don’t report them?

We’ll learn about the evolution of the browser’s global error event handler and how to work around its limitations — cross-browser idiosyncrasies, stack traces as unwieldy strings, minified code, and other fun stuff that we really look forward to dealing with! We’ll also look at libraries to make JavaScript stack traces more useful, along with other techniques for making our bugs a little less buggy.
Captions: 
	00:00:02,750 --> 00:00:11,850
[Music]

00:00:16,279 --> 00:00:21,330
Wow that was a very exciting start thank

00:00:20,189 --> 00:00:23,609
you for the kind introduction

00:00:21,330 --> 00:00:27,810
hey I'm Liz it's super excited to be

00:00:23,609 --> 00:00:30,689
here a little bit about myself first I'm

00:00:27,810 --> 00:00:32,399
a developer advocate at century I have

00:00:30,689 --> 00:00:34,140
the pleasure of working with an amazing

00:00:32,399 --> 00:00:36,930
team of people who are building a tool

00:00:34,140 --> 00:00:39,239
to report errors across a bunch of

00:00:36,930 --> 00:00:42,510
different SDKs we're an open source

00:00:39,239 --> 00:00:45,120
product obviously won't have time to

00:00:42,510 --> 00:00:46,829
talk about all of these today I don't

00:00:45,120 --> 00:00:48,719
know very much about all of these yet

00:00:46,829 --> 00:00:51,120
because I come from the strange land

00:00:48,719 --> 00:00:54,140
known as web development so I'm just

00:00:51,120 --> 00:00:54,140
going to be talking about JavaScript

00:00:54,710 --> 00:00:58,920
since this is a JavaScript audience I'm

00:00:56,940 --> 00:01:00,750
sure you can relate to me when I say

00:00:58,920 --> 00:01:06,119
that JavaScript sometimes makes me want

00:01:00,750 --> 00:01:09,299
to throw things sometimes literally I'm

00:01:06,119 --> 00:01:11,460
I got curious about how this works like

00:01:09,299 --> 00:01:13,890
once we generate errors in our code how

00:01:11,460 --> 00:01:16,020
do we then put it somewhere where it

00:01:13,890 --> 00:01:18,000
becomes useful to us for example all of

00:01:16,020 --> 00:01:20,180
our modern-day error reporting tools

00:01:18,000 --> 00:01:22,530
that really make our lives easier

00:01:20,180 --> 00:01:25,170
instead of taking it for granted I

00:01:22,530 --> 00:01:27,060
wanted to figure out some of the history

00:01:25,170 --> 00:01:31,229
leading up to this and how did we get to

00:01:27,060 --> 00:01:33,840
where we are today specifically how did

00:01:31,229 --> 00:01:35,729
JavaScript evolve to the point where we

00:01:33,840 --> 00:01:37,350
can you know we can make use of its

00:01:35,729 --> 00:01:40,229
features to do this because it didn't

00:01:37,350 --> 00:01:42,720
used to be possible now in order to

00:01:40,229 --> 00:01:45,090
learn some of this I got to indulge in

00:01:42,720 --> 00:01:48,720
my favorite hobby which is reading old

00:01:45,090 --> 00:01:50,579
books specifically old tech technical

00:01:48,720 --> 00:01:52,170
manuals it's the best section of the

00:01:50,579 --> 00:01:55,350
library I highly recommend taking a look

00:01:52,170 --> 00:01:56,850
at that now I'm gonna start with a few

00:01:55,350 --> 00:01:58,469
quotes from some of my favorite old

00:01:56,850 --> 00:02:01,259
books that I found in learning about

00:01:58,469 --> 00:02:04,340
this so the first one here

00:02:01,259 --> 00:02:06,930
lorelei me is web workshop from 1996

00:02:04,340 --> 00:02:10,259
does anyone hear quickscope hands

00:02:06,930 --> 00:02:13,050
actually can anyone remember Netscape

00:02:10,259 --> 00:02:14,040
Navigator 2 anyone used that you're

00:02:13,050 --> 00:02:19,140
programming JavaScript

00:02:14,040 --> 00:02:21,359
90 yes I want to talk to you after so in

00:02:19,140 --> 00:02:28,049
those days the way we program JavaScript

00:02:21,359 --> 00:02:29,340
was by using alert dialogues and it's

00:02:28,049 --> 00:02:32,970
not really the best way to do JavaScript

00:02:29,340 --> 00:02:34,739
is it in Laura's book she outlines two

00:02:32,970 --> 00:02:37,829
techniques for debugging JavaScript at

00:02:34,739 --> 00:02:39,900
that time the first is to use those

00:02:37,829 --> 00:02:42,540
alerts window dot alert and she says

00:02:39,900 --> 00:02:44,280
basically just sprinkle it through your

00:02:42,540 --> 00:02:47,310
code so every time you do something in

00:02:44,280 --> 00:02:49,319
your program change variable alert run a

00:02:47,310 --> 00:02:51,090
function alert and then once you figure

00:02:49,319 --> 00:02:52,639
out how you know to solve all your bugs

00:02:51,090 --> 00:02:55,200
you go back and delete all the alerts

00:02:52,639 --> 00:02:56,639
okay there is a slightly better way that

00:02:55,200 --> 00:02:59,609
she recommended which is tease window

00:02:56,639 --> 00:03:01,530
dot open and then write to that window

00:02:59,609 --> 00:03:03,209
all the debugging information so then

00:03:01,530 --> 00:03:05,489
you have something that looks more like

00:03:03,209 --> 00:03:07,859
this not that much better than an alert

00:03:05,489 --> 00:03:11,239
but people are very creative with

00:03:07,859 --> 00:03:13,620
finding solutions to this early on in

00:03:11,239 --> 00:03:15,810
1997 which I've surprised that this

00:03:13,620 --> 00:03:18,239
happened so early we had a JavaScript

00:03:15,810 --> 00:03:20,669
debugger in that scape this is the

00:03:18,239 --> 00:03:23,370
official manual and you can see that

00:03:20,669 --> 00:03:25,769
they actually had breakpoints and a

00:03:23,370 --> 00:03:28,409
bunch of other cool features if we skip

00:03:25,769 --> 00:03:29,819
ahead just a little bit I mostly just

00:03:28,409 --> 00:03:33,090
wanted an excuse to show that cover of

00:03:29,819 --> 00:03:34,859
this book because this guy is amazing I

00:03:33,090 --> 00:03:38,879
really feel like he's looking like deep

00:03:34,859 --> 00:03:40,319
into my soul when I look at this now his

00:03:38,879 --> 00:03:41,940
book outlines some ways that the

00:03:40,319 --> 00:03:44,340
debugger evolved over time this was

00:03:41,940 --> 00:03:46,169
published in 2000 and you can see some

00:03:44,340 --> 00:03:47,750
of the ways that got better definitely a

00:03:46,169 --> 00:03:50,069
little bit closer to what we have today

00:03:47,750 --> 00:03:52,290
you could actually see the call stack

00:03:50,069 --> 00:03:53,849
you had breakpoints in a visual way so

00:03:52,290 --> 00:03:55,979
you could actually click on the line

00:03:53,849 --> 00:03:57,409
numbers the way we do today and then see

00:03:55,979 --> 00:03:58,859
a list of your breakpoints on the side

00:03:57,409 --> 00:04:00,329
fun fact

00:03:58,859 --> 00:04:02,370
that's a total tangent but I couldn't

00:04:00,329 --> 00:04:05,930
help myself how many of you are familiar

00:04:02,370 --> 00:04:12,269
with the origin of the term breakpoints

00:04:05,930 --> 00:04:16,320
anybody mm-hmm maybe I saw one hand of

00:04:12,269 --> 00:04:18,539
it I see one okay one hand so if we go

00:04:16,320 --> 00:04:20,099
back to the 1940s and 50s which I've

00:04:18,539 --> 00:04:22,019
heard a lot about thanks to my dad he

00:04:20,099 --> 00:04:24,570
actually used to work at IBM in the

00:04:22,019 --> 00:04:28,380
early days of like mainframe computers a

00:04:24,570 --> 00:04:30,240
little bit before that the enak computer

00:04:28,380 --> 00:04:33,390
was programmed you can see all the

00:04:30,240 --> 00:04:35,490
cables and one of the first programmers

00:04:33,390 --> 00:04:38,070
who worked on it was this woman standing

00:04:35,490 --> 00:04:40,110
in the front Betty whole Burton she was

00:04:38,070 --> 00:04:42,000
one of the six first programmers of that

00:04:40,110 --> 00:04:45,150
computer and she's credited with

00:04:42,000 --> 00:04:47,070
inventing breakpoints or I guess at

00:04:45,150 --> 00:04:49,920
least coining the term breakpoints and

00:04:47,070 --> 00:04:52,680
she says in an article and interview

00:04:49,920 --> 00:04:54,210
with her that the reason we call it that

00:04:52,680 --> 00:04:57,120
there's and she started calling at that

00:04:54,210 --> 00:04:58,830
was because we pull those wires out to

00:04:57,120 --> 00:05:00,450
stop our program and then see what's

00:04:58,830 --> 00:05:03,480
happened and that's how debugging worked

00:05:00,450 --> 00:05:06,960
in the 40s and in doing so you literally

00:05:03,480 --> 00:05:09,720
broke the point of contact and then

00:05:06,960 --> 00:05:12,090
that's there you go a breakpoint so fast

00:05:09,720 --> 00:05:13,560
forward again to 1997 here where we left

00:05:12,090 --> 00:05:16,050
off of their JavaScript history

00:05:13,560 --> 00:05:20,490
I found another interesting article this

00:05:16,050 --> 00:05:22,950
time posted 1997 by Microsoft I found

00:05:20,490 --> 00:05:25,410
very interesting they recommended to

00:05:22,950 --> 00:05:29,670
avoid having users see the default error

00:05:25,410 --> 00:05:32,700
dialog they say you should use window

00:05:29,670 --> 00:05:34,350
dot on error to trap the alerts and

00:05:32,700 --> 00:05:36,060
display your own message instead of the

00:05:34,350 --> 00:05:38,520
error so that way your users won't

00:05:36,060 --> 00:05:40,620
really get to see under the hood of your

00:05:38,520 --> 00:05:44,040
application so this is the code that

00:05:40,620 --> 00:05:46,500
they recommended you copy/paste alert

00:05:44,040 --> 00:05:48,780
error handled return true to avoid

00:05:46,500 --> 00:05:50,790
default behavior and then set that to

00:05:48,780 --> 00:05:52,800
window dot on a hair so we had that

00:05:50,790 --> 00:05:56,510
error handler at least as far back as

00:05:52,800 --> 00:05:59,100
1997 almost as old as JavaScript itself

00:05:56,510 --> 00:06:00,870
this is what it looked like so imagine

00:05:59,100 --> 00:06:02,520
you're using an application the early

00:06:00,870 --> 00:06:04,740
days with the web you click a button

00:06:02,520 --> 00:06:07,590
maybe you're submitting a form and then

00:06:04,740 --> 00:06:09,840
you see this and then this and then this

00:06:07,590 --> 00:06:11,700
and then this and you're like oh great

00:06:09,840 --> 00:06:13,140
this developer really knows what they're

00:06:11,700 --> 00:06:14,880
doing because I don't see any error

00:06:13,140 --> 00:06:18,600
messages I just know that everything's

00:06:14,880 --> 00:06:19,470
under control great mmm apparently that

00:06:18,600 --> 00:06:21,660
was how you did it

00:06:19,470 --> 00:06:24,030
what's scary to me though is if you fast

00:06:21,660 --> 00:06:26,040
forward all the way to 2011 as you can

00:06:24,030 --> 00:06:27,270
see in this a reilly book i'm going to

00:06:26,040 --> 00:06:31,400
show another quote from this one which

00:06:27,270 --> 00:06:34,110
is one of my favorites so they recommend

00:06:31,400 --> 00:06:37,050
another usage for window Dominator but

00:06:34,110 --> 00:06:39,330
they say that the on error handler is

00:06:37,050 --> 00:06:40,590
just a holdover from the early days of

00:06:39,330 --> 00:06:43,470
JavaScript back

00:06:40,590 --> 00:06:47,190
we didn't have try-catch and quote it is

00:06:43,470 --> 00:06:48,840
rarely used in modern code that made me

00:06:47,190 --> 00:06:50,790
very sad but maybe just because I work

00:06:48,840 --> 00:06:52,710
at century and I'm looking at JavaScript

00:06:50,790 --> 00:06:54,600
stuff I feel like the window Donaire is

00:06:52,710 --> 00:06:56,580
used all the time it's actually the

00:06:54,600 --> 00:06:58,260
backbone of our reporting tool and all

00:06:56,580 --> 00:07:01,590
the other ones that work on front-end

00:06:58,260 --> 00:07:03,600
JavaScript so why in the world did this

00:07:01,590 --> 00:07:05,160
book say it wasn't used why weren't

00:07:03,600 --> 00:07:07,490
people using it because I'm thinking

00:07:05,160 --> 00:07:10,500
this seems like one of the most useful

00:07:07,490 --> 00:07:13,220
global error handling you know event

00:07:10,500 --> 00:07:15,750
handling functions the reason is because

00:07:13,220 --> 00:07:20,010
they only had three parameters available

00:07:15,750 --> 00:07:22,980
up back then so you had your message URL

00:07:20,010 --> 00:07:26,220
the file and the line number so you get

00:07:22,980 --> 00:07:29,090
these alert dialog boxes you see the URL

00:07:26,220 --> 00:07:30,900
the line number and the message the

00:07:29,090 --> 00:07:33,750
important thing that's missing here

00:07:30,900 --> 00:07:36,000
though you'll notice is where's the

00:07:33,750 --> 00:07:38,400
stack trace I take this for granted

00:07:36,000 --> 00:07:40,260
anytime I'm working on a website that

00:07:38,400 --> 00:07:42,450
was have that console open my browser

00:07:40,260 --> 00:07:44,010
and I get to see this stuff with every

00:07:42,450 --> 00:07:45,960
single error just see exactly what

00:07:44,010 --> 00:07:47,160
happened and when and the entire call

00:07:45,960 --> 00:07:50,100
stack and I can actually click through

00:07:47,160 --> 00:07:54,450
and see everything but you couldn't do

00:07:50,100 --> 00:07:55,470
that in the late 90s now it wasn't until

00:07:54,450 --> 00:07:57,540
00:07:55,470 --> 00:07:59,550
three years later after people were

00:07:57,540 --> 00:08:02,640
using javascript with all this crazy

00:07:59,550 --> 00:08:04,710
who's crazy workarounds this was when

00:08:02,640 --> 00:08:08,460
they finally introduced try-catch into

00:08:04,710 --> 00:08:11,220
the Eknath script standard so you got

00:08:08,460 --> 00:08:12,690
your try-catch imagine we're running a

00:08:11,220 --> 00:08:15,840
function let's say it called break

00:08:12,690 --> 00:08:17,730
everything and in an ideal world when

00:08:15,840 --> 00:08:19,380
something like this goes wrong we want

00:08:17,730 --> 00:08:21,450
to be able to send this to some sort of

00:08:19,380 --> 00:08:23,370
centralized air reporting tool so we can

00:08:21,450 --> 00:08:25,770
actually see what's going on and we want

00:08:23,370 --> 00:08:27,630
to capture that error object which

00:08:25,770 --> 00:08:29,700
includes the stack trace and then send

00:08:27,630 --> 00:08:33,990
that whole thing right instead of say

00:08:29,700 --> 00:08:35,520
just the line number problem is since at

00:08:33,990 --> 00:08:37,880
the time you couldn't get that error

00:08:35,520 --> 00:08:40,350
object from the window an error handler

00:08:37,880 --> 00:08:42,000
you had to use try-catch for everything

00:08:40,350 --> 00:08:44,130
and there's a lot of different places

00:08:42,000 --> 00:08:46,050
you could have errors it doesn't make

00:08:44,130 --> 00:08:47,640
sense to just try catch once for your

00:08:46,050 --> 00:08:50,040
entire program especially since

00:08:47,640 --> 00:08:51,450
javascript is asynchronous there's a lot

00:08:50,040 --> 00:08:53,580
of different places need to worry about

00:08:51,450 --> 00:08:53,770
this never mind that try catch wouldn't

00:08:53,580 --> 00:08:56,740
work

00:08:53,770 --> 00:08:58,959
with asynchronous code back then so you

00:08:56,740 --> 00:09:02,140
had to basically just try catch all the

00:08:58,959 --> 00:09:05,770
things and your code didn't look so

00:09:02,140 --> 00:09:08,500
great it's a lot of extra typing so the

00:09:05,770 --> 00:09:11,680
other big problem even if you did try

00:09:08,500 --> 00:09:15,130
catch all your stuff was how in the late

00:09:11,680 --> 00:09:17,970
90s would you actually send the error to

00:09:15,130 --> 00:09:20,890
somewhere how do you how do you send

00:09:17,970 --> 00:09:22,839
requests behind the scenes to the user

00:09:20,890 --> 00:09:24,790
it doesn't have to worry about doesn't

00:09:22,839 --> 00:09:26,200
have to refresh the page every time they

00:09:24,790 --> 00:09:28,270
do something that might cause an error

00:09:26,200 --> 00:09:30,550
which is literally every interaction

00:09:28,270 --> 00:09:33,580
with the webpage back then of course we

00:09:30,550 --> 00:09:35,649
used forms right you want to send

00:09:33,580 --> 00:09:38,230
information you have to go refresh the

00:09:35,649 --> 00:09:41,800
entire page and it's not really the best

00:09:38,230 --> 00:09:44,740
way to handle errors now I thought it

00:09:41,800 --> 00:09:47,800
was really interesting when I first read

00:09:44,740 --> 00:09:50,350
about debugging the 1940s I thought wow

00:09:47,800 --> 00:09:52,959
they had it really really rough like how

00:09:50,350 --> 00:09:56,589
in I can't imagine debugging my program

00:09:52,959 --> 00:09:59,110
by walking around a room visit with my

00:09:56,589 --> 00:10:01,209
physical body like moving through space

00:09:59,110 --> 00:10:03,790
and like pulling wires and looking at

00:10:01,209 --> 00:10:05,829
things I mean I guess I would get more

00:10:03,790 --> 00:10:07,390
exercise than I do these days but seems

00:10:05,829 --> 00:10:10,589
pretty difficult but on the other hand

00:10:07,390 --> 00:10:13,360
they also had it easier than we do

00:10:10,589 --> 00:10:16,170
because all of their code ran on one

00:10:13,360 --> 00:10:18,190
machine they don't have to worry about

00:10:16,170 --> 00:10:21,550
potentially millions of different

00:10:18,190 --> 00:10:22,930
clients running their code on other

00:10:21,550 --> 00:10:25,000
machines that you have no control over

00:10:22,930 --> 00:10:28,540
that you can't see inside so we have all

00:10:25,000 --> 00:10:31,000
these black boxes to worry about now and

00:10:28,540 --> 00:10:33,370
as far as sending information to all of

00:10:31,000 --> 00:10:35,079
those different machines or so from all

00:10:33,370 --> 00:10:38,170
those different machines to central

00:10:35,079 --> 00:10:40,450
place where we can see at least some of

00:10:38,170 --> 00:10:42,640
what's going on in them we needed

00:10:40,450 --> 00:10:46,570
another technology that was being formed

00:10:42,640 --> 00:10:48,579
as early as 1996 but took quite a few

00:10:46,570 --> 00:10:51,100
years roughly oh 10 years to really

00:10:48,579 --> 00:10:53,709
catch on and you can see some evidence

00:10:51,100 --> 00:10:56,230
of when that became mainstream from

00:10:53,709 --> 00:10:58,770
articles like this in 2005 from The Wall

00:10:56,230 --> 00:11:02,500
Street Journal talking about things like

00:10:58,770 --> 00:11:05,020
Ajax the programming technologies that's

00:11:02,500 --> 00:11:07,300
the buzz of Silicon Valley oh my god

00:11:05,020 --> 00:11:10,300
ajax what's this new invention

00:11:07,300 --> 00:11:12,459
Rooker's Ajax is wasn't anything new and

00:11:10,300 --> 00:11:14,860
there was just you know a convenient

00:11:12,459 --> 00:11:16,899
acronym was actually coined by a Jesse

00:11:14,860 --> 00:11:18,850
James Garrett in 2005 when he was

00:11:16,899 --> 00:11:21,640
outlining what people were already doing

00:11:18,850 --> 00:11:24,029
at the time one example you may or may

00:11:21,640 --> 00:11:27,010
not remember is Google Suggest back in

00:11:24,029 --> 00:11:28,360
2004 people wrote all these blog posts

00:11:27,010 --> 00:11:30,550
saying oh my god this is the most

00:11:28,360 --> 00:11:33,370
amazing thing I've ever seen you can

00:11:30,550 --> 00:11:36,070
type into this box and the stuff appears

00:11:33,370 --> 00:11:38,260
in real-time showing you how many people

00:11:36,070 --> 00:11:40,660
search for each of these related terms

00:11:38,260 --> 00:11:43,540
and like you know autocomplete it was

00:11:40,660 --> 00:11:45,760
amazing that was things to eat Jack's

00:11:43,540 --> 00:11:47,800
now it actually wasn't standardized by

00:11:45,760 --> 00:11:50,320
the w3c until 2006

00:11:47,800 --> 00:11:51,880
so you'll see general trend on the web

00:11:50,320 --> 00:11:53,860
anytime we have to deal with standards

00:11:51,880 --> 00:11:55,480
across lots of different people involved

00:11:53,860 --> 00:11:57,640
in developing these things and

00:11:55,480 --> 00:12:01,269
experimenting it takes a few years for

00:11:57,640 --> 00:12:04,420
the standards to catch up now another

00:12:01,269 --> 00:12:05,950
tricky one that made our reporting a

00:12:04,420 --> 00:12:07,060
little bit more difficult and something

00:12:05,950 --> 00:12:10,870
you definitely have to keep in mind is

00:12:07,060 --> 00:12:12,040
the same origin policy I'm sure you're

00:12:10,870 --> 00:12:13,870
all familiar with this and have to deal

00:12:12,040 --> 00:12:15,279
with that every day I know when I was

00:12:13,870 --> 00:12:16,660
starting out in web development this was

00:12:15,279 --> 00:12:18,700
a big headache because I also didn't

00:12:16,660 --> 00:12:20,079
totally understand it but as a quick

00:12:18,700 --> 00:12:22,270
recap

00:12:20,079 --> 00:12:24,070
imagine that you're pulling a

00:12:22,270 --> 00:12:26,170
third-party script to say from a CDN

00:12:24,070 --> 00:12:27,700
which is very common today and you're

00:12:26,170 --> 00:12:29,470
using window dot on air to get

00:12:27,700 --> 00:12:33,910
information about errors that went wrong

00:12:29,470 --> 00:12:37,600
in your application but you're gonna see

00:12:33,910 --> 00:12:39,930
messages like this no stack trace new

00:12:37,600 --> 00:12:43,720
line number nothing helpful at all

00:12:39,930 --> 00:12:46,300
now the same-origin policy is as old as

00:12:43,720 --> 00:12:48,700
netscape navigator 2.0 and javascript

00:12:46,300 --> 00:12:50,920
itself it's a fundamental tenant of the

00:12:48,700 --> 00:12:53,339
Internet it just says that a web browser

00:12:50,920 --> 00:12:56,079
can permit scripts from two web sites to

00:12:53,339 --> 00:12:58,410
communicate only if they have the same

00:12:56,079 --> 00:13:01,329
origin like the same domain for example

00:12:58,410 --> 00:13:04,600
there's some great slides these are kind

00:13:01,329 --> 00:13:10,149
of old from I think Stanford's web

00:13:04,600 --> 00:13:12,310
security team basically just showing if

00:13:10,149 --> 00:13:13,720
you have two windows open without the

00:13:12,310 --> 00:13:16,540
same origin policy you would be able to

00:13:13,720 --> 00:13:19,510
just go from one like Cohn code evil

00:13:16,540 --> 00:13:20,840
website com - somebody's Bank website if

00:13:19,510 --> 00:13:24,080
that was also open and just

00:13:20,840 --> 00:13:27,650
literally do you like dot innerhtml grab

00:13:24,080 --> 00:13:29,810
their bank account information so it's

00:13:27,650 --> 00:13:32,870
good that we can't do that on the other

00:13:29,810 --> 00:13:34,820
hand there's even more danger that's

00:13:32,870 --> 00:13:37,250
less obvious that I found pretty

00:13:34,820 --> 00:13:40,910
interesting this is also from 13 years

00:13:37,250 --> 00:13:42,830
ago about letting error handlers give

00:13:40,910 --> 00:13:44,330
clues about what users are doing that

00:13:42,830 --> 00:13:47,480
are unintended so even if you can't run

00:13:44,330 --> 00:13:48,650
scripts on somebody else's domain even

00:13:47,480 --> 00:13:50,920
just being able to see their error

00:13:48,650 --> 00:13:53,540
messages can be a security vulnerability

00:13:50,920 --> 00:13:56,390
so this example that he's pointing to

00:13:53,540 --> 00:13:59,540
here looks like this if you include a

00:13:56,390 --> 00:14:01,910
website for example Gmail you'll get an

00:13:59,540 --> 00:14:02,900
error message by trying to do this but

00:14:01,910 --> 00:14:05,690
the interesting thing is if you're

00:14:02,900 --> 00:14:10,430
logged in you'll see some error on line

00:14:05,690 --> 00:14:12,710
8 this was his example and if you're not

00:14:10,430 --> 00:14:14,930
logged in you'll see the arrow on line 3

00:14:12,710 --> 00:14:17,480
and people could exploit that to find

00:14:14,930 --> 00:14:19,700
out you know which which services a user

00:14:17,480 --> 00:14:21,520
was logged into at the time and use that

00:14:19,700 --> 00:14:25,430
to make a more targeted attack on them

00:14:21,520 --> 00:14:28,960
so it's tricky security is very tricky

00:14:25,430 --> 00:14:31,190
how do we protect users while also

00:14:28,960 --> 00:14:33,220
having the flexibility to be able to

00:14:31,190 --> 00:14:36,290
understand what's going on in our code

00:14:33,220 --> 00:14:38,330
the solution for now it's also a bit

00:14:36,290 --> 00:14:41,600
messy but cross-origin resource sharing

00:14:38,330 --> 00:14:44,780
you may also know it as cores here's a

00:14:41,600 --> 00:14:48,590
standard first solidified in 2014 here

00:14:44,780 --> 00:14:51,920
and it's just a mechanism to allow us to

00:14:48,590 --> 00:14:54,080
say which domains can share information

00:14:51,920 --> 00:14:55,370
which other domains and there's only two

00:14:54,080 --> 00:14:57,920
steps you have to do to get your

00:14:55,370 --> 00:14:59,090
third-party scripts to work with this so

00:14:57,920 --> 00:15:02,620
that you can actually see your error

00:14:59,090 --> 00:15:06,410
messages in full detail first step is

00:15:02,620 --> 00:15:09,140
set this lovely header it's best name

00:15:06,410 --> 00:15:11,330
ever access control allow origin rolls

00:15:09,140 --> 00:15:13,630
off the tongue in this example it's just

00:15:11,330 --> 00:15:18,110
set to an asterisk meaning any domain

00:15:13,630 --> 00:15:19,490
and then on your client-side code in

00:15:18,110 --> 00:15:22,130
your script tags you just have to

00:15:19,490 --> 00:15:25,670
include this attribute cross-origin the

00:15:22,130 --> 00:15:28,070
default value is anonymous and there you

00:15:25,670 --> 00:15:31,400
go it'll transform this not so useful

00:15:28,070 --> 00:15:34,200
script error message into your full

00:15:31,400 --> 00:15:37,800
stack trace yeah okay so now

00:15:34,200 --> 00:15:40,649
we're able to get that error object so

00:15:37,800 --> 00:15:43,230
using try-catch for now we're able to

00:15:40,649 --> 00:15:44,610
use Ajax to send it to the reporting

00:15:43,230 --> 00:15:47,570
tool in the background so it doesn't

00:15:44,610 --> 00:15:50,579
affect the users experience too much and

00:15:47,570 --> 00:15:52,290
we're able to then do something cool on

00:15:50,579 --> 00:15:55,940
the other side with our reporting tool

00:15:52,290 --> 00:15:59,430
if we want to but the problem is again

00:15:55,940 --> 00:16:03,089
window dot on error only gives you a few

00:15:59,430 --> 00:16:05,040
things like just the line number of

00:16:03,089 --> 00:16:06,870
course at some point we started writing

00:16:05,040 --> 00:16:08,490
a lot more JavaScript code than we used

00:16:06,870 --> 00:16:11,430
to and using it in ways it wasn't

00:16:08,490 --> 00:16:12,690
intended to be used so if you were to

00:16:11,430 --> 00:16:16,040
use this in your error reporting tool

00:16:12,690 --> 00:16:20,010
back then you would see error on line 1

00:16:16,040 --> 00:16:21,990
for literally everything this is line 1

00:16:20,010 --> 00:16:24,899
your entire application is line 1

00:16:21,990 --> 00:16:27,060
because your code is minified not so

00:16:24,899 --> 00:16:29,339
useful you can use source maps to get

00:16:27,060 --> 00:16:30,810
around this of course and that's a topic

00:16:29,339 --> 00:16:33,510
for another day it's a lot to say about

00:16:30,810 --> 00:16:36,120
that but the interesting thing to me was

00:16:33,510 --> 00:16:39,300
how this on error handler evolved over

00:16:36,120 --> 00:16:42,290
time we can look back this is a commit

00:16:39,300 --> 00:16:46,230
from 2012 you can see all this history

00:16:42,290 --> 00:16:48,209
backlogs and the what Wiig github this

00:16:46,230 --> 00:16:49,920
is HTML where they're documenting

00:16:48,209 --> 00:16:53,160
everything that you can use with the DOM

00:16:49,920 --> 00:16:57,240
and somebody suggested the brilliant

00:16:53,160 --> 00:16:58,800
idea of adding a column argument so at

00:16:57,240 --> 00:17:00,660
least that way you can see the line

00:16:58,800 --> 00:17:01,980
number which is your whole program but

00:17:00,660 --> 00:17:04,500
at least with a column number you can

00:17:01,980 --> 00:17:08,010
identify where exactly something went

00:17:04,500 --> 00:17:08,400
wrong now even more importantly than

00:17:08,010 --> 00:17:10,620
that

00:17:08,400 --> 00:17:13,740
there's a course the idea of getting the

00:17:10,620 --> 00:17:16,319
stack trace so up until now there was

00:17:13,740 --> 00:17:20,309
still no way to get that stack trace

00:17:16,319 --> 00:17:22,919
using window Danaher so what I find

00:17:20,309 --> 00:17:25,470
interesting about this is this issue was

00:17:22,919 --> 00:17:28,169
open 13 years ago and there was closed

00:17:25,470 --> 00:17:31,320
six years ago it took a little while but

00:17:28,169 --> 00:17:32,820
it finally here in 2013 you can see they

00:17:31,320 --> 00:17:36,630
added that argument the error object

00:17:32,820 --> 00:17:39,299
itself to the on error handler which is

00:17:36,630 --> 00:17:44,700
funny that it took so many years for on

00:17:39,299 --> 00:17:48,700
error to give you the error just

00:17:44,700 --> 00:17:50,529
now now we got those last two parameters

00:17:48,700 --> 00:17:52,149
so not just the message URL and line

00:17:50,529 --> 00:17:54,820
number but also the column number and

00:17:52,149 --> 00:17:57,820
that wonderful error object so if you

00:17:54,820 --> 00:17:59,889
take a look at can I use right now you

00:17:57,820 --> 00:18:01,840
can see getting that stack trace the

00:17:59,889 --> 00:18:04,179
stack property on the error object it's

00:18:01,840 --> 00:18:07,179
really well supported so we're good

00:18:04,179 --> 00:18:08,860
problem solved right then there's this

00:18:07,179 --> 00:18:12,490
little note at the bottom

00:18:08,860 --> 00:18:14,470
this feature is non-standard and should

00:18:12,490 --> 00:18:18,519
not be used without careful

00:18:14,470 --> 00:18:19,539
consideration oh why is that I actually

00:18:18,519 --> 00:18:21,899
didn't know that I thought it was

00:18:19,539 --> 00:18:26,559
standard because I see it everywhere

00:18:21,899 --> 00:18:31,860
well if we were to try this what would

00:18:26,559 --> 00:18:31,860
we get back you actually shout it out

00:18:34,200 --> 00:18:39,399
yeah so it actually just gives you a

00:18:37,240 --> 00:18:40,899
string I thought I was gonna be an

00:18:39,399 --> 00:18:42,340
object or at the very least an array

00:18:40,899 --> 00:18:45,159
right because a stack trace is like a

00:18:42,340 --> 00:18:46,149
list of things but no it's just a giant

00:18:45,159 --> 00:18:49,629
blob of characters

00:18:46,149 --> 00:18:51,399
I actually I could I could not figure

00:18:49,629 --> 00:18:55,240
out why I've done a lot of digging in

00:18:51,399 --> 00:18:58,210
here I still don't know why it's just a

00:18:55,240 --> 00:18:59,919
string because back to 1997 when he had

00:18:58,210 --> 00:19:02,049
the debugger running in Netscape

00:18:59,919 --> 00:19:04,509
Navigator there's our call stack it

00:19:02,049 --> 00:19:06,700
sorry that clearly we could get that

00:19:04,509 --> 00:19:10,029
information we have the browser has it

00:19:06,700 --> 00:19:12,820
somewhere huh and if you're using node

00:19:10,029 --> 00:19:16,509
you can get access to that it's a lot

00:19:12,820 --> 00:19:17,440
easier but on the front end but but you

00:19:16,509 --> 00:19:21,309
know how it goes the front-end

00:19:17,440 --> 00:19:24,700
JavaScript reporting now because it's a

00:19:21,309 --> 00:19:26,499
string it's readable obviously with

00:19:24,700 --> 00:19:29,259
formatting but this is what it looks

00:19:26,499 --> 00:19:31,749
like in chrome and then this is what it

00:19:29,259 --> 00:19:32,889
looks like in Firefox a a little bit

00:19:31,749 --> 00:19:34,240
different and then this is what it looks

00:19:32,889 --> 00:19:36,070
like in Safari

00:19:34,240 --> 00:19:37,980
you'll know it has this global keyword

00:19:36,070 --> 00:19:41,019
at the end that neither the others have

00:19:37,980 --> 00:19:43,480
so I guess the solution is well we just

00:19:41,019 --> 00:19:45,960
have to parse all of these everything

00:19:43,480 --> 00:19:49,659
from each browser differently

00:19:45,960 --> 00:19:52,389
this is where we are today in 2019 that

00:19:49,659 --> 00:19:57,040
unfortunately is the answer everybody

00:19:52,389 --> 00:20:00,190
thank you okay bye regular expressions

00:19:57,040 --> 00:20:01,510
yay this is this is how we do it this is

00:20:00,190 --> 00:20:03,280
still how we do it

00:20:01,510 --> 00:20:07,300
luckily of course there's libraries that

00:20:03,280 --> 00:20:10,000
handle this for you so we've got tres

00:20:07,300 --> 00:20:11,590
kit which is actually a really nice

00:20:10,000 --> 00:20:14,320
open-source one this is the one that we

00:20:11,590 --> 00:20:17,910
use at century we just pulled that into

00:20:14,320 --> 00:20:21,160
our repo and one person Aaron team

00:20:17,910 --> 00:20:23,110
single-handedly rewrote it to get it to

00:20:21,160 --> 00:20:25,000
do only the parts that we needed but

00:20:23,110 --> 00:20:27,250
it's still it's a really good tool it's

00:20:25,000 --> 00:20:29,920
been around a while another one that has

00:20:27,250 --> 00:20:31,930
more features on half of it and as still

00:20:29,920 --> 00:20:34,960
being used and updated today is

00:20:31,930 --> 00:20:38,590
stacktrace j/s so definite recommend

00:20:34,960 --> 00:20:41,350
checking out both of those obviously you

00:20:38,590 --> 00:20:43,060
could roll your own parsing or we can

00:20:41,350 --> 00:20:44,500
write you can write read regular

00:20:43,060 --> 00:20:47,230
expressions so you're good to go

00:20:44,500 --> 00:20:50,740
but it's obviously nice to not reinvent

00:20:47,230 --> 00:20:52,180
the wheel and another layer on top of

00:20:50,740 --> 00:20:54,340
that of course are then all of these

00:20:52,180 --> 00:20:56,350
error reporting tools that we have so

00:20:54,340 --> 00:20:57,850
this is just one example of how you

00:20:56,350 --> 00:20:59,860
would do this with century it

00:20:57,850 --> 00:21:01,780
instruments your code in a very nice way

00:20:59,860 --> 00:21:04,390
and then you know also has in addition

00:21:01,780 --> 00:21:05,980
to parsing those stack traces and a

00:21:04,390 --> 00:21:08,620
bunch of other things like giving you

00:21:05,980 --> 00:21:10,840
nice UI all of the error reporting tools

00:21:08,620 --> 00:21:12,340
out there today basically do the same

00:21:10,840 --> 00:21:15,310
thing and they all work like this you

00:21:12,340 --> 00:21:17,230
import the library you initialize it in

00:21:15,310 --> 00:21:20,020
some way in our case you give a unique

00:21:17,230 --> 00:21:21,580
identifier the data source name and then

00:21:20,020 --> 00:21:24,490
anywhere in your code if you're throwing

00:21:21,580 --> 00:21:27,640
an error behind the scenes it's already

00:21:24,490 --> 00:21:29,320
capturing that and sending it to century

00:21:27,640 --> 00:21:31,150
so you can or if you're running it

00:21:29,320 --> 00:21:33,370
locally since it's open source you can

00:21:31,150 --> 00:21:36,640
handle out yourself and just get it and

00:21:33,370 --> 00:21:38,740
then you get this nice UI so there's a

00:21:36,640 --> 00:21:42,370
lot of tools that do this today it's

00:21:38,740 --> 00:21:44,040
pretty nice but a lot a lot had to

00:21:42,370 --> 00:21:47,470
happen before we could even get here

00:21:44,040 --> 00:21:52,180
unfortunately and I don't really see

00:21:47,470 --> 00:21:54,550
this changing too much too soon I think

00:21:52,180 --> 00:21:57,310
we really need that dot stack property

00:21:54,550 --> 00:21:59,920
to be standardized so hopefully that's

00:21:57,310 --> 00:22:04,330
on the way I don't know how long it'll

00:21:59,920 --> 00:22:06,600
take maybe another few years but that's

00:22:04,330 --> 00:22:08,950
where I'm here so JavaScript errors

00:22:06,600 --> 00:22:10,169
they're not so great but we found ways

00:22:08,950 --> 00:22:12,899
to work around them

00:22:10,169 --> 00:22:14,519
and hopefully in the future we'll have

00:22:12,899 --> 00:22:16,289
even better tools they've had a pretty

00:22:14,519 --> 00:22:18,179
good track record so far if people

00:22:16,289 --> 00:22:20,549
coming up with creative solutions to all

00:22:18,179 --> 00:22:21,749
of our limitations in JavaScript even

00:22:20,549 --> 00:22:24,210
though we have a lot more tools

00:22:21,749 --> 00:22:26,489
available to us with other you know

00:22:24,210 --> 00:22:28,289
server-side tools but front end stern

00:22:26,489 --> 00:22:30,179
catch-up it's definitely something I

00:22:28,289 --> 00:22:30,950
mean as you all know the reason we're

00:22:30,179 --> 00:22:33,029
all here

00:22:30,950 --> 00:22:34,409
definitely can't be ignored there's a

00:22:33,029 --> 00:22:37,230
lot of innovation happening in this

00:22:34,409 --> 00:22:39,539
space so I just wanted to say really

00:22:37,230 --> 00:22:41,879
quick thank you to some of my teammates

00:22:39,539 --> 00:22:44,879
who worked on our JavaScript SDK helped

00:22:41,879 --> 00:22:49,859
me understand it giving me some feedback

00:22:44,879 --> 00:22:51,809
on my research and just being really

00:22:49,859 --> 00:22:53,429
cool people to work with so if you're

00:22:51,809 --> 00:22:55,320
interested in learning more about some

00:22:53,429 --> 00:22:58,559
of these tools here's a few links to get

00:22:55,320 --> 00:23:00,210
you started and thank you very much I'm

00:22:58,559 --> 00:23:02,429
more than happy to speak with any of you

00:23:00,210 --> 00:23:04,820
later you can find me on the internet at

00:23:02,429 --> 00:23:08,179
learning nerd on Twitter github and

00:23:04,820 --> 00:23:08,179

YouTube URL: https://www.youtube.com/watch?v=8BNss47R6Yk


