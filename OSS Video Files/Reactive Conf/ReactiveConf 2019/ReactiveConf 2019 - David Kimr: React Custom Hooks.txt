Title: ReactiveConf 2019 - David Kimr: React Custom Hooks
Publication date: 2019-11-01
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
The new way of coding React components using a pure functional style. The speech compares the coding style of React components using 1) Javascript classes and 2) pure functional style with hooks. Some advanced concepts of using custom hooks and developer and code performance are presented. The speech is for React practitioners (i.e hardcore ? ).
Captions: 
	00:00:02,720 --> 00:00:11,850
[Music]

00:00:14,610 --> 00:00:21,700
okay let's go in show some of my context

00:00:18,220 --> 00:00:24,910
I am chief technology officer for

00:00:21,700 --> 00:00:27,040
unicorn and we have over two hundred two

00:00:24,910 --> 00:00:29,410
thousand five hundred people and Merida

00:00:27,040 --> 00:00:30,730
half of them are developers so yeah we

00:00:29,410 --> 00:00:32,529
really know what we are talking about

00:00:30,730 --> 00:00:35,920
when we are talking react because we are

00:00:32,529 --> 00:00:38,800
using react since version 0.1 it was

00:00:35,920 --> 00:00:40,989
2013 when defeat first which reacted and

00:00:38,800 --> 00:00:42,670
we have in Nakano plication framework

00:00:40,989 --> 00:00:43,930
which is a full-stack framework based on

00:00:42,670 --> 00:00:46,270
react on the front-end and user

00:00:43,930 --> 00:00:48,609
interface side there's five years of

00:00:46,270 --> 00:00:52,469
development behind it and currently over

00:00:48,609 --> 00:00:56,920
thousand components in react so and

00:00:52,469 --> 00:01:00,190
actually last year I did speak on react

00:00:56,920 --> 00:01:03,039
context and I was amazed by the feedback

00:01:00,190 --> 00:01:05,260
I got from you guys because most of the

00:01:03,039 --> 00:01:07,390
feedback was actually it's nice that

00:01:05,260 --> 00:01:10,930
somebody on reactive conference still

00:01:07,390 --> 00:01:12,820
talked pure react well we will continue

00:01:10,930 --> 00:01:15,280
this year again and let's take

00:01:12,820 --> 00:01:17,290
standardized react topic and it's react

00:01:15,280 --> 00:01:19,450
custom hooks assure I marked the

00:01:17,290 --> 00:01:23,680
presentation with free Charice but don't

00:01:19,450 --> 00:01:25,689
be afraid we will start mild but as the

00:01:23,680 --> 00:01:26,970
presentation goes on Weaver end up in a

00:01:25,689 --> 00:01:30,909
pure vindaloo

00:01:26,970 --> 00:01:33,520
ok so let's remember some history how do

00:01:30,909 --> 00:01:35,649
react component was created in the TAS

00:01:33,520 --> 00:01:39,399
when the major version of red was the

00:01:35,649 --> 00:01:41,439
zero was by five years the component

00:01:39,399 --> 00:01:43,930
were created by an object there was a

00:01:41,439 --> 00:01:46,210
function of factory quartet create class

00:01:43,930 --> 00:01:47,890
and you called it factory with an object

00:01:46,210 --> 00:01:49,540
and it was created in a component for

00:01:47,890 --> 00:01:52,810
you and there was all the state and

00:01:49,540 --> 00:01:56,140
profs etcetera inside with react 50

00:01:52,810 --> 00:01:56,820
version 15 the class syntax came into

00:01:56,140 --> 00:01:59,500
react

00:01:56,820 --> 00:02:01,119
and there are a lot of reasoning why

00:01:59,500 --> 00:02:05,500
classes are good for components and

00:02:01,119 --> 00:02:08,380
cetera but how the time went on another

00:02:05,500 --> 00:02:11,260
function component jumped in first they

00:02:08,380 --> 00:02:17,370
were purely prop oriented stateless and

00:02:11,260 --> 00:02:21,340
with react 17 s or 8 16 point is its

00:02:17,370 --> 00:02:23,530
created as a neurologic called hooks

00:02:21,340 --> 00:02:26,500
which allows us to do functional

00:02:23,530 --> 00:02:28,209
programming and react with all the

00:02:26,500 --> 00:02:31,900
things we know and like on react like

00:02:28,209 --> 00:02:37,180
drop state share full state shirts a

00:02:31,900 --> 00:02:39,370
tasteful logic etc so the reuse of State

00:02:37,180 --> 00:02:40,720
for logic in the past time was done were

00:02:39,370 --> 00:02:42,760
several things like first one were

00:02:40,720 --> 00:02:45,400
mix-ins you know mix-ins were great for

00:02:42,760 --> 00:02:47,560
some reasons but they are quite purely

00:02:45,400 --> 00:02:50,170
implemented there was a lot of overhead

00:02:47,560 --> 00:02:52,840
by using machines in the performance and

00:02:50,170 --> 00:02:54,610
the code dependencies very frequent as

00:02:52,840 --> 00:02:56,739
well so they are replicated at the

00:02:54,610 --> 00:02:58,450
moment then the class here who came in

00:02:56,739 --> 00:03:00,280
and so you try to share you're here

00:02:58,450 --> 00:03:04,720
stateful logic bar the inheritance of

00:03:00,280 --> 00:03:07,049
classes but for my opinion class syntax

00:03:04,720 --> 00:03:09,430
in JavaScript is something quite awkward

00:03:07,049 --> 00:03:12,760
actually it doesn't act as a real class

00:03:09,430 --> 00:03:14,019
in class oriented languages it's somehow

00:03:12,760 --> 00:03:17,709
like it but there are slightly

00:03:14,019 --> 00:03:19,810
differences and there are some weak

00:03:17,709 --> 00:03:21,790
overhead over the syntax show sugar I

00:03:19,810 --> 00:03:23,970
think that functional programming is

00:03:21,790 --> 00:03:26,680
more natural for JavaScript and

00:03:23,970 --> 00:03:28,660
fortunately react authors think the same

00:03:26,680 --> 00:03:31,060
so they came with functional components

00:03:28,660 --> 00:03:34,239
for the canvas I wanted all the

00:03:31,060 --> 00:03:37,389
components and other but the reactor

00:03:34,239 --> 00:03:38,459
hooks are and this this sentence comes

00:03:37,389 --> 00:03:42,160
from a react

00:03:38,459 --> 00:03:45,010
official read documentation it's a pure

00:03:42,160 --> 00:03:49,690
thing the basic thing how to share a

00:03:45,010 --> 00:03:52,150
state flow logic in react so let's look

00:03:49,690 --> 00:03:54,069
at hooks looks allow you to share

00:03:52,150 --> 00:03:57,430
stateful using logic and effects will

00:03:54,069 --> 00:03:59,410
come right to it and this functional

00:03:57,430 --> 00:04:01,359
component without adding any new

00:03:59,410 --> 00:04:02,859
components into a component here here

00:04:01,359 --> 00:04:04,510
because you can share some some

00:04:02,859 --> 00:04:06,190
functions for example for by

00:04:04,510 --> 00:04:08,380
higher-order components but then your

00:04:06,190 --> 00:04:10,269
component tree becomes quite deep and

00:04:08,380 --> 00:04:12,519
address a lot of artificial components

00:04:10,269 --> 00:04:15,370
in the tree which really don't render

00:04:12,519 --> 00:04:17,680
they are just there to add some logic or

00:04:15,370 --> 00:04:19,510
add something to your final components

00:04:17,680 --> 00:04:22,479
visual render so hooks it can be used

00:04:19,510 --> 00:04:25,599
for many things how this could be used

00:04:22,479 --> 00:04:28,090
but they don't add any artificial

00:04:25,599 --> 00:04:30,099
components into the tree all features

00:04:28,090 --> 00:04:32,020
that are nice in react are there so you

00:04:30,099 --> 00:04:34,650
can snooze props you can stay it you can

00:04:32,020 --> 00:04:38,280
use life cycle it will come to that

00:04:34,650 --> 00:04:40,830
and actually something changed and the

00:04:38,280 --> 00:04:42,900
basic particle of how components are

00:04:40,830 --> 00:04:44,760
rendered because the traditional

00:04:42,900 --> 00:04:47,460
lifecycle of edges in class components

00:04:44,760 --> 00:04:50,340
does a lot of computing before actually

00:04:47,460 --> 00:04:52,830
calls your logic so it depends if the

00:04:50,340 --> 00:04:54,479
component is mounted if it's updated if

00:04:52,830 --> 00:04:57,139
probes are changed and there's a lot of

00:04:54,479 --> 00:04:59,760
computation behind which is done before

00:04:57,139 --> 00:05:02,550
actually your component it won't confirm

00:04:59,760 --> 00:05:04,139
an update or something is reached which

00:05:02,550 --> 00:05:06,810
functional component is different I

00:05:04,139 --> 00:05:09,060
react simply used the speed of

00:05:06,810 --> 00:05:12,360
JavaScript because JavaScript now is

00:05:09,060 --> 00:05:14,370
incredibly fast so what if we can just

00:05:12,360 --> 00:05:17,580
run the function component because it's

00:05:14,370 --> 00:05:20,220
a function anytime during to comes and

00:05:17,580 --> 00:05:23,310
let JavaScript do this work so let's do

00:05:20,220 --> 00:05:25,229
it fast and if you want to optimize if

00:05:23,310 --> 00:05:27,660
you want to decide if you do something

00:05:25,229 --> 00:05:30,419
on certain circumstances let you do it

00:05:27,660 --> 00:05:32,910
in your code in your control so react

00:05:30,419 --> 00:05:37,289
doesn't do this anymore for you in in

00:05:32,910 --> 00:05:40,260
those functional components so this is

00:05:37,289 --> 00:05:42,300
something which is proven from many

00:05:40,260 --> 00:05:45,270
tests that is quite fast and it's even

00:05:42,300 --> 00:05:47,280
faster that order all these ifs and em

00:05:45,270 --> 00:05:50,430
conditions before calling your vacation

00:05:47,280 --> 00:05:52,050
logic the only problem is that

00:05:50,430 --> 00:05:54,510
JavaScript fast

00:05:52,050 --> 00:05:57,690
but whenever JavaScript comes to some a

00:05:54,510 --> 00:06:02,490
ps2 to some browser a PS it's not so

00:05:57,690 --> 00:06:05,010
fast as it used to be just tournament I

00:06:02,490 --> 00:06:06,570
will start my timer because we have to

00:06:05,010 --> 00:06:10,110
finish on time

00:06:06,570 --> 00:06:11,940
so hooks are another way how to mix how

00:06:10,110 --> 00:06:14,639
to do make sense and to share logic and

00:06:11,940 --> 00:06:17,370
from my opinion they're done well so

00:06:14,639 --> 00:06:19,740
let's just go quickly through the

00:06:17,370 --> 00:06:21,930
built-in hooks to explain them because

00:06:19,740 --> 00:06:23,550
we do need all of them in our custom

00:06:21,930 --> 00:06:26,070
hooks you but third here on the podium

00:06:23,550 --> 00:06:28,470
and actually if you want to open your

00:06:26,070 --> 00:06:30,930
laptop's and follow me with the coding I

00:06:28,470 --> 00:06:32,190
encourage students to do so and at the

00:06:30,930 --> 00:06:34,560
end I even

00:06:32,190 --> 00:06:36,810
give you the URL github where you can

00:06:34,560 --> 00:06:38,880
download all the code and you can try to

00:06:36,810 --> 00:06:40,950
do custom hook by yourself

00:06:38,880 --> 00:06:44,430
so there are free basic rules you stayed

00:06:40,950 --> 00:06:47,520
for stateful stateful components use

00:06:44,430 --> 00:06:49,770
effect which is just one book one

00:06:47,520 --> 00:06:51,480
component which replaces most of the

00:06:49,770 --> 00:06:53,670
lifecycle functions which are in class

00:06:51,480 --> 00:06:55,920
components and there's of course use

00:06:53,670 --> 00:06:58,380
context for contest components so still

00:06:55,920 --> 00:06:59,880
components the state of the component

00:06:58,380 --> 00:07:04,050
and the render of the component depends

00:06:59,880 --> 00:07:06,810
on prop state and context how do you

00:07:04,050 --> 00:07:09,930
state works basically in the function

00:07:06,810 --> 00:07:12,000
you call the do you state hook the hook

00:07:09,930 --> 00:07:14,490
returns you two things it returns you to

00:07:12,000 --> 00:07:16,890
the variable which contains the current

00:07:14,490 --> 00:07:20,040
state and returns you function which you

00:07:16,890 --> 00:07:24,170
can use to update a state and that's it

00:07:20,040 --> 00:07:26,730
actually this is called anytime the

00:07:24,170 --> 00:07:29,190
component is rendered and why does it

00:07:26,730 --> 00:07:30,960
work well some a magic behind with the

00:07:29,190 --> 00:07:33,210
hooks with react so first time when the

00:07:30,960 --> 00:07:36,630
component is mounted react detects that

00:07:33,210 --> 00:07:39,060
this hook is still not not in scope and

00:07:36,630 --> 00:07:42,300
creates a new one for you and the next

00:07:39,060 --> 00:07:44,130
time it comes to call it only reuses the

00:07:42,300 --> 00:07:47,550
the already created object which is

00:07:44,130 --> 00:07:49,140
behind the hook so as I told you you are

00:07:47,550 --> 00:07:52,250
running the functions again again but

00:07:49,140 --> 00:07:55,860
they are blazing fast and internal logic

00:07:52,250 --> 00:07:59,010
explains or or does everything behind so

00:07:55,860 --> 00:08:00,570
this hook actually will survive and the

00:07:59,010 --> 00:08:01,950
state of which is stored in the wood

00:08:00,570 --> 00:08:05,940
will survive the whole fly so I've

00:08:01,950 --> 00:08:07,650
called the component and hooks heavily

00:08:05,940 --> 00:08:09,300
depends on JavaScript closures and all

00:08:07,650 --> 00:08:11,150
the syntax depends on Java JavaScript

00:08:09,300 --> 00:08:14,850
spoilers so if you want to use the hook

00:08:11,150 --> 00:08:17,070
you basically use its return values so

00:08:14,850 --> 00:08:17,550
the state which is light like here the

00:08:17,070 --> 00:08:20,160
name

00:08:17,550 --> 00:08:22,620
you simply render by using this variable

00:08:20,160 --> 00:08:24,600
if you want to set the state you just

00:08:22,620 --> 00:08:27,780
simply use this dysfunction return by

00:08:24,600 --> 00:08:30,000
the hook to setting the state well there

00:08:27,780 --> 00:08:32,159
are some things with it some old habits

00:08:30,000 --> 00:08:33,630
you use to optimize your court in class

00:08:32,159 --> 00:08:36,630
component doesn't work anymore because

00:08:33,630 --> 00:08:38,789
for example this function is recreated

00:08:36,630 --> 00:08:42,539
every time renders comes to the

00:08:38,789 --> 00:08:45,660
component but it doesn't matter anymore

00:08:42,539 --> 00:08:49,740
because the JavaScript compiler is so

00:08:45,660 --> 00:08:52,770
clever and so fast that this goes for no

00:08:49,740 --> 00:08:54,780
penalty so there's no reason why to put

00:08:52,770 --> 00:08:57,300
this function out of the scope of the

00:08:54,780 --> 00:08:59,850
hook and to pass all the parameters to

00:08:57,300 --> 00:09:01,860
it and get written value it's so fast

00:08:59,850 --> 00:09:05,130
that you can create it in the scope and

00:09:01,860 --> 00:09:08,010
let JavaScript and JavaScript engine do

00:09:05,130 --> 00:09:10,320
its work and then use the nice syntax

00:09:08,010 --> 00:09:11,880
that you can directly call the set set

00:09:10,320 --> 00:09:15,540
name without passing it anywhere else

00:09:11,880 --> 00:09:18,330
and so this is important there are a

00:09:15,540 --> 00:09:20,910
thing which which comes with this that

00:09:18,330 --> 00:09:22,709
in class components because usually

00:09:20,910 --> 00:09:26,100
state is an object and is updated as a

00:09:22,709 --> 00:09:28,230
rule object you usually store not just a

00:09:26,100 --> 00:09:30,510
pure state but you derive some other

00:09:28,230 --> 00:09:32,430
other variables and some other values

00:09:30,510 --> 00:09:34,140
from the state and store them as well

00:09:32,430 --> 00:09:36,750
because it's cheap and you don't need to

00:09:34,140 --> 00:09:39,060
recalculate with this approach we say

00:09:36,750 --> 00:09:40,350
recalculate is cheaper than storing so

00:09:39,060 --> 00:09:43,020
if the state is derived

00:09:40,350 --> 00:09:45,089
recalculate it anytime and if it's

00:09:43,020 --> 00:09:46,740
costly if you need to optimize there are

00:09:45,089 --> 00:09:48,720
some other hooks that you like use my

00:09:46,740 --> 00:09:52,650
more used callback which you can use to

00:09:48,720 --> 00:09:55,680
optimize this and they of course you say

00:09:52,650 --> 00:09:58,260
hook for some more complex states now

00:09:55,680 --> 00:10:00,150
let's go to use effect you know you need

00:09:58,260 --> 00:10:02,640
basically those two hooks for creating

00:10:00,150 --> 00:10:05,459
our custom ook the used effect replaces

00:10:02,640 --> 00:10:08,660
most of the lifecycle methods that were

00:10:05,459 --> 00:10:12,870
in the class components use effect is

00:10:08,660 --> 00:10:15,420
something which is called immediately

00:10:12,870 --> 00:10:17,490
after but a synchronously the render

00:10:15,420 --> 00:10:19,470
function finishes in function component

00:10:17,490 --> 00:10:21,570
the render function is basically the

00:10:19,470 --> 00:10:24,060
body of the function function component

00:10:21,570 --> 00:10:27,240
but is think it's always after and

00:10:24,060 --> 00:10:30,000
always a synchronous so usually render

00:10:27,240 --> 00:10:32,400
goes even the reconciliation of the of

00:10:30,000 --> 00:10:35,880
the dorm of the browser is before your

00:10:32,400 --> 00:10:39,270
use effect who grants and the function

00:10:35,880 --> 00:10:40,800
which is inside the hook actually does

00:10:39,270 --> 00:10:43,890
some effect because what do you do on

00:10:40,800 --> 00:10:46,650
your component it update or component it

00:10:43,890 --> 00:10:48,270
mount you have to do something which is

00:10:46,650 --> 00:10:50,420
not directly involved in the renderer

00:10:48,270 --> 00:10:53,649
which is not directly involved with

00:10:50,420 --> 00:10:56,860
translating your j/6 code into in

00:10:53,649 --> 00:10:59,470
- browser browser dome so you probably

00:10:56,860 --> 00:11:01,869
call some even handlers you call some

00:10:59,470 --> 00:11:04,029
api's you call external functions on

00:11:01,869 --> 00:11:07,449
something like it and a lot of other

00:11:04,029 --> 00:11:10,209
schools are stateful so you initialize

00:11:07,449 --> 00:11:13,600
them on on the component inbound and you

00:11:10,209 --> 00:11:16,540
want to uninitialized just drag them on

00:11:13,600 --> 00:11:19,779
component will unmount so exactly that

00:11:16,540 --> 00:11:22,449
you can do this use effect and the

00:11:19,779 --> 00:11:24,339
cleanup function is a return value of

00:11:22,449 --> 00:11:26,170
your function which actually decides to

00:11:24,339 --> 00:11:28,059
effect we will come to this later when

00:11:26,170 --> 00:11:31,720
we look really look so I will explain

00:11:28,059 --> 00:11:33,579
and for rare cases when this is not fast

00:11:31,720 --> 00:11:35,829
enough because this is usually so fast

00:11:33,579 --> 00:11:37,600
that even though a signal processing of

00:11:35,829 --> 00:11:39,309
the hook doesn't matter and there will

00:11:37,600 --> 00:11:41,410
be no no problems with your code

00:11:39,309 --> 00:11:43,480
actually it will the user interface will

00:11:41,410 --> 00:11:45,910
feel more responsive than if you do it

00:11:43,480 --> 00:11:48,220
synchronously but for rare occasions

00:11:45,910 --> 00:11:51,220
where there will be some unwanted visual

00:11:48,220 --> 00:11:56,319
effects you might use you slapped effect

00:11:51,220 --> 00:11:59,829
which which runs synchronously H it runs

00:11:56,319 --> 00:12:02,709
after the virtual Dom of react is is

00:11:59,829 --> 00:12:05,410
reconciliate it but before the browser

00:12:02,709 --> 00:12:07,600
gnome is painted so still in this is

00:12:05,410 --> 00:12:09,939
this in the synchronous way from your

00:12:07,600 --> 00:12:13,600
code from render before it updates the

00:12:09,939 --> 00:12:16,329
screen but I suggest that you don't use

00:12:13,600 --> 00:12:18,040
this only if you really need to so

00:12:16,329 --> 00:12:19,689
Starbase use effect and if it's not

00:12:18,040 --> 00:12:21,819
enough that you can switch to use layout

00:12:19,689 --> 00:12:23,350
the fact is it has exactly the same in

00:12:21,819 --> 00:12:27,069
the phrase so the refactoring is cheap

00:12:23,350 --> 00:12:28,720
and takes nothing but there are some

00:12:27,069 --> 00:12:30,759
rules for hooks which have to have to

00:12:28,720 --> 00:12:33,519
follow if you want to develop them the

00:12:30,759 --> 00:12:35,559
first one and that you can call hooks

00:12:33,519 --> 00:12:37,779
only on top levels we can call them

00:12:35,559 --> 00:12:42,160
directly from functional components or

00:12:37,779 --> 00:12:46,629
you can call them from custom hooks we

00:12:42,160 --> 00:12:49,480
will show this why because reacts

00:12:46,629 --> 00:12:51,549
depends heavily on the order of the

00:12:49,480 --> 00:12:52,990
calling of the hook actually when you

00:12:51,549 --> 00:12:55,839
are creating and when you are entering

00:12:52,990 --> 00:12:57,809
components you are not calling direct

00:12:55,839 --> 00:13:00,759
the render is not called directly

00:12:57,809 --> 00:13:02,589
because your gs6 code translates into

00:13:00,759 --> 00:13:04,179
react create element function and this

00:13:02,589 --> 00:13:06,040
react create element function does the

00:13:04,179 --> 00:13:07,510
machine behind so it tracks where you

00:13:06,040 --> 00:13:09,670
are in the tree and

00:13:07,510 --> 00:13:12,639
the mainstays the second tree of hook

00:13:09,670 --> 00:13:14,199
States next to it so it's extremely

00:13:12,639 --> 00:13:16,060
important that hooks are called in the

00:13:14,199 --> 00:13:18,760
same order and the components in the

00:13:16,060 --> 00:13:20,649
trees are rendered and that's why you

00:13:18,760 --> 00:13:22,360
can't call them in conditions you can't

00:13:20,649 --> 00:13:24,010
call them in loops you can't call them

00:13:22,360 --> 00:13:26,380
in callbacks or a nested functions

00:13:24,010 --> 00:13:29,649
because in all these increment and sees

00:13:26,380 --> 00:13:31,120
there's a danger that the order of

00:13:29,649 --> 00:13:33,250
calling the hooks will be different than

00:13:31,120 --> 00:13:35,740
the order of rendering of components so

00:13:33,250 --> 00:13:37,930
we can call them only at top level so

00:13:35,740 --> 00:13:39,699
what if I want to do some optimization

00:13:37,930 --> 00:13:42,130
and what if I don't want to call the

00:13:39,699 --> 00:13:44,170
call all the time simply move the

00:13:42,130 --> 00:13:46,360
condition or the loop inside your hook

00:13:44,170 --> 00:13:48,190
because the calling of the function is

00:13:46,360 --> 00:13:50,440
cheap I explained to you so it doesn't

00:13:48,190 --> 00:13:52,300
matter you call the function when you

00:13:50,440 --> 00:13:54,100
return quickly and you don't do your

00:13:52,300 --> 00:13:57,550
heavy computation it doesn't matter and

00:13:54,100 --> 00:14:00,490
will be fast okay so and I strongly

00:13:57,550 --> 00:14:02,290
encourage you to use use linter and

00:14:00,490 --> 00:14:04,420
there's a nice plugin called

00:14:02,290 --> 00:14:06,370
eslint plugin react hooks directly from

00:14:04,420 --> 00:14:09,519
facebook we shall help you to follow

00:14:06,370 --> 00:14:11,290
these rules in your code there are like

00:14:09,519 --> 00:14:12,760
10 built-in hooks you will not explain

00:14:11,290 --> 00:14:14,470
them all we don't need them all at the

00:14:12,760 --> 00:14:16,630
moment I expect you know it's free

00:14:14,470 --> 00:14:19,449
Chili's speech so I expect you never

00:14:16,630 --> 00:14:21,880
know them already but we will show how

00:14:19,449 --> 00:14:23,170
to create some custom hooks for us so

00:14:21,880 --> 00:14:25,600
what is custom look

00:14:23,170 --> 00:14:27,990
custom wood is the way how you can share

00:14:25,600 --> 00:14:30,519
our logic or some effects actually

00:14:27,990 --> 00:14:33,880
effect is called because usually it was

00:14:30,519 --> 00:14:35,560
it was called side effect but not all

00:14:33,880 --> 00:14:38,800
effects are side effects because side

00:14:35,560 --> 00:14:41,110
effects is somehow unwanted our effects

00:14:38,800 --> 00:14:44,620
are wanted so they're simplified and I

00:14:41,110 --> 00:14:47,829
am for use effect so your hoop can do

00:14:44,620 --> 00:14:51,240
custom effects or can share stateful

00:14:47,829 --> 00:14:53,380
music logic can store stage for logic

00:14:51,240 --> 00:14:56,170
for your components and you can reuse

00:14:53,380 --> 00:14:57,970
them between components the convention

00:14:56,170 --> 00:15:01,120
is that your hooks should start with the

00:14:57,970 --> 00:15:02,740
divert use it's not necessary but it's a

00:15:01,120 --> 00:15:04,829
good convention and I'll enter again

00:15:02,740 --> 00:15:08,290
well we'll check it

00:15:04,829 --> 00:15:10,779
your who have to follow the roots of

00:15:08,290 --> 00:15:12,670
hooks and otherwise it's just normal

00:15:10,779 --> 00:15:15,130
JavaScript function

00:15:12,670 --> 00:15:17,200
actually there's one exception the

00:15:15,130 --> 00:15:18,730
custom hook should some finalist

00:15:17,200 --> 00:15:23,170
somewhere call some built-in hook

00:15:18,730 --> 00:15:25,360
otherwise it's not a hook yeah so it

00:15:23,170 --> 00:15:27,660
will work it will work but it will just

00:15:25,360 --> 00:15:31,570
just commandeer a street function

00:15:27,660 --> 00:15:34,630
without any without any connection to to

00:15:31,570 --> 00:15:37,480
react internal processing so usually the

00:15:34,630 --> 00:15:39,670
custom hook calls you state all use

00:15:37,480 --> 00:15:42,250
effect or some other hook to do the

00:15:39,670 --> 00:15:45,790
final the final step in your logic and

00:15:42,250 --> 00:15:48,459
your custom who can expose any an

00:15:45,790 --> 00:15:50,220
interface to component which which takes

00:15:48,459 --> 00:15:53,350
the hook and which is hooked and

00:15:50,220 --> 00:15:55,360
interface exposed through its return

00:15:53,350 --> 00:15:57,700
value so you can return object you can

00:15:55,360 --> 00:15:59,709
return primitive you can rate return

00:15:57,700 --> 00:16:01,209
function or set of functions it's

00:15:59,709 --> 00:16:03,610
completely up to you

00:16:01,209 --> 00:16:07,600
and everything is allowed which is

00:16:03,610 --> 00:16:09,279
allowed in JavaScript and from my

00:16:07,600 --> 00:16:11,079
experience and from the experience of

00:16:09,279 --> 00:16:14,140
rewriting our code base to the next

00:16:11,079 --> 00:16:16,240
level of react hoops can be custom hooks

00:16:14,140 --> 00:16:19,440
can be used for most cases where make

00:16:16,240 --> 00:16:22,120
sense or our components were used before

00:16:19,440 --> 00:16:25,660
so let's start our custom look at the

00:16:22,120 --> 00:16:28,360
moment perfect we will take something

00:16:25,660 --> 00:16:31,839
which everyone else stands you know in

00:16:28,360 --> 00:16:34,180
most of graphical frameworks like

00:16:31,839 --> 00:16:35,800
material design or bootstrap there are

00:16:34,180 --> 00:16:40,029
some pattern of screen size or screen

00:16:35,800 --> 00:16:43,240
factor because it's of course it can be

00:16:40,029 --> 00:16:44,829
responsive by pixel but it's extremely

00:16:43,240 --> 00:16:47,529
difficult for graphic graphic designer

00:16:44,829 --> 00:16:49,930
to design and prepare such user

00:16:47,529 --> 00:16:52,480
interface so they usually stick with

00:16:49,930 --> 00:16:54,940
like four or five doing sizes and they

00:16:52,480 --> 00:16:57,250
prepare your your wife wireframes and

00:16:54,940 --> 00:17:01,570
they prepare your mock-ups for those

00:16:57,250 --> 00:17:04,329
five sizes and you then when you write a

00:17:01,570 --> 00:17:06,400
code you are available when your screen

00:17:04,329 --> 00:17:07,929
size changes from something like this to

00:17:06,400 --> 00:17:12,459
something like this it's changed from

00:17:07,929 --> 00:17:15,610
Excel to s or XS and you render your

00:17:12,459 --> 00:17:18,490
whole component tree and render it

00:17:15,610 --> 00:17:21,189
differently responses mostly you can

00:17:18,490 --> 00:17:23,589
stay just with Maria query and just use

00:17:21,189 --> 00:17:24,900
your CSS to render component what what

00:17:23,589 --> 00:17:26,640
if it's not enough

00:17:24,900 --> 00:17:29,550
there are many cases when you want to

00:17:26,640 --> 00:17:31,470
render completely different content on

00:17:29,550 --> 00:17:34,140
your small screen size then honor

00:17:31,470 --> 00:17:37,290
exhaust in size simply because the excel

00:17:34,140 --> 00:17:39,300
content has no sense on the small screen

00:17:37,290 --> 00:17:41,130
there are even some technical reasons

00:17:39,300 --> 00:17:44,730
for example we have a chart library

00:17:41,130 --> 00:17:46,950
which is using SVG and SVG by default

00:17:44,730 --> 00:17:49,500
it's not very responsive so if you want

00:17:46,950 --> 00:17:51,090
to have responsive charts done by SVG

00:17:49,500 --> 00:17:53,340
you have to recalculate anytime you

00:17:51,090 --> 00:17:54,990
resize or you change your screen size so

00:17:53,340 --> 00:17:57,630
when you do something like this and run

00:17:54,990 --> 00:18:00,750
the same code on your on your tablet or

00:17:57,630 --> 00:18:02,940
on your phone you have to basically

00:18:00,750 --> 00:18:05,730
render the component and render it

00:18:02,940 --> 00:18:08,100
differently so you need something some

00:18:05,730 --> 00:18:12,570
look which will tell your screen size

00:18:08,100 --> 00:18:15,150
sensitive component that it needs to be

00:18:12,570 --> 00:18:17,490
rendered and there's new screen size so

00:18:15,150 --> 00:18:19,830
you don't use bootstrap screen sizes and

00:18:17,490 --> 00:18:24,929
boot scrap names so we have screen size

00:18:19,830 --> 00:18:27,020
from XS as to excel the there's a basic

00:18:24,929 --> 00:18:29,280
helper function which will check

00:18:27,020 --> 00:18:32,070
depending on the element by default by

00:18:29,280 --> 00:18:33,780
the browser window was the screen Sun

00:18:32,070 --> 00:18:36,420
actually is and will return you to

00:18:33,780 --> 00:18:39,750
string containing this XSS or some

00:18:36,420 --> 00:18:44,220
fingers something else and we don't

00:18:39,750 --> 00:18:46,740
implement something some Mook which a

00:18:44,220 --> 00:18:51,120
screen size sensitive component can take

00:18:46,740 --> 00:18:53,940
and which will tell her any time the

00:18:51,120 --> 00:18:56,240
screen factor changes so let's start

00:18:53,940 --> 00:18:59,700
with first I put knife implementation

00:18:56,240 --> 00:19:02,490
our hoop will need use plate because it

00:18:59,700 --> 00:19:05,520
has to store somewhere that now it's XS

00:19:02,490 --> 00:19:09,450
and until the screen doesn't change more

00:19:05,520 --> 00:19:11,610
than then I don't know 500 pixels it

00:19:09,450 --> 00:19:14,160
still XS and then it's s and then it's M

00:19:11,610 --> 00:19:15,720
so we storage the state wherever because

00:19:14,160 --> 00:19:19,230
this is react

00:19:15,720 --> 00:19:21,660
we need to use effect because we need to

00:19:19,230 --> 00:19:24,840
tell the component by some effect that

00:19:21,660 --> 00:19:27,450
the screen size changed and trigger it

00:19:24,840 --> 00:19:32,070
by changing the state trigger to

00:19:27,450 --> 00:19:35,040
re-render and so this is it we use the

00:19:32,070 --> 00:19:38,290
screen size here the the you state here

00:19:35,040 --> 00:19:40,419
and I'll use effect

00:19:38,290 --> 00:19:43,840
has a helper function actually this is

00:19:40,419 --> 00:19:48,270
this is the even listener which we which

00:19:43,840 --> 00:19:52,000
will be put to the event in the browser

00:19:48,270 --> 00:19:54,460
in the effect function at even listener

00:19:52,000 --> 00:19:56,559
for resize and as here are on mobile

00:19:54,460 --> 00:19:58,870
phones we probably know that when you

00:19:56,559 --> 00:20:01,900
have your mobile phone and you change

00:19:58,870 --> 00:20:04,150
the orientation not resize not resize

00:20:01,900 --> 00:20:05,500
it's not triggered but orientation

00:20:04,150 --> 00:20:07,660
change is triggered so you have to

00:20:05,500 --> 00:20:09,549
actually put to event listeners on to

00:20:07,660 --> 00:20:13,210
events if you want to if you want to

00:20:09,549 --> 00:20:16,750
switch and we have some good nice clear

00:20:13,210 --> 00:20:18,910
function here which will unmount the

00:20:16,750 --> 00:20:23,770
listeners when the hoop is cleaned

00:20:18,910 --> 00:20:26,160
because this is necessary otherwise we

00:20:23,770 --> 00:20:29,290
will end up with many listeners and

00:20:26,160 --> 00:20:31,450
memory in the browser and we will return

00:20:29,290 --> 00:20:34,059
simply the strength contained in the

00:20:31,450 --> 00:20:36,190
screen size from the hook okay

00:20:34,059 --> 00:20:38,440
let's use it in our components so we

00:20:36,190 --> 00:20:40,150
have component called box here it's a

00:20:38,440 --> 00:20:44,049
simple one because we have no time for

00:20:40,150 --> 00:20:47,049
creating SVG charts here on the stage it

00:20:44,049 --> 00:20:49,290
simply takes takes the screen size by

00:20:47,049 --> 00:20:52,990
the hook it's over here and it runs

00:20:49,290 --> 00:20:57,520
renders a box which will contain the

00:20:52,990 --> 00:21:00,610
string of the screen size and to make it

00:20:57,520 --> 00:21:02,020
work we and to to show how it works we

00:21:00,610 --> 00:21:04,390
create a helper function which will

00:21:02,020 --> 00:21:06,610
generate thousands of boxes and we

00:21:04,390 --> 00:21:08,110
create our app is simple if which takes

00:21:06,610 --> 00:21:10,630
these thousands of boxes and surrenders

00:21:08,110 --> 00:21:14,049
well this is the result and we were

00:21:10,630 --> 00:21:16,590
surprised it takes eight point seven

00:21:14,049 --> 00:21:21,610
seconds to render so what we did wrong

00:21:16,590 --> 00:21:23,350
we did our effect you know read it our

00:21:21,610 --> 00:21:25,600
cleanup function so everything should

00:21:23,350 --> 00:21:27,520
work but it doesn't obviously because

00:21:25,600 --> 00:21:32,470
8:47 it's terrible

00:21:27,520 --> 00:21:35,770
well I told you that effect by default

00:21:32,470 --> 00:21:37,660
are called after the render is done but

00:21:35,770 --> 00:21:39,880
before the effect is done it's always

00:21:37,660 --> 00:21:42,400
clean up so your cleanup function is

00:21:39,880 --> 00:21:45,370
called before your effect is done again

00:21:42,400 --> 00:21:48,850
so what we actually created it's anytime

00:21:45,370 --> 00:21:53,210
componentry renders it will rim

00:21:48,850 --> 00:21:56,480
even listeners from the browser like to

00:21:53,210 --> 00:21:58,280
thousands of them and it will at NU mm

00:21:56,480 --> 00:21:59,930
even listeners to the browser and I told

00:21:58,280 --> 00:22:03,710
you JavaScript is blazing fast but

00:21:59,930 --> 00:22:05,840
browser APIs are not so this is the

00:22:03,710 --> 00:22:08,600
bottleneck this is something which which

00:22:05,840 --> 00:22:11,420
takes a lot of time so how we can help

00:22:08,600 --> 00:22:14,990
with this this is the state you know

00:22:11,420 --> 00:22:18,260
here you clean up and here you mounted

00:22:14,990 --> 00:22:21,170
again so there are some optimizations I

00:22:18,260 --> 00:22:22,730
choose another hook which is use context

00:22:21,170 --> 00:22:24,800
by the way if you understand context

00:22:22,730 --> 00:22:27,920
there's my speech from last year on

00:22:24,800 --> 00:22:29,330
YouTube and you can watch it so you

00:22:27,920 --> 00:22:31,460
don't do some improvements you will

00:22:29,330 --> 00:22:33,260
create a context which will which will

00:22:31,460 --> 00:22:34,910
take the screen sense and will propagate

00:22:33,260 --> 00:22:38,030
to components which are sensitive to

00:22:34,910 --> 00:22:40,490
screen size we have to rename our

00:22:38,030 --> 00:22:42,530
original hook because now it will be

00:22:40,490 --> 00:22:44,540
used just by the context provider which

00:22:42,530 --> 00:22:46,820
is will be one component somewhere on

00:22:44,540 --> 00:22:49,340
top of your hair here on the application

00:22:46,820 --> 00:22:51,110
level I choose to get clean skies and

00:22:49,340 --> 00:22:55,010
not very proud on the name what you know

00:22:51,110 --> 00:22:57,980
no time to think about it and we were a

00:22:55,010 --> 00:23:00,070
render the screen size contest provider

00:22:57,980 --> 00:23:03,410
and put the screen size in the values so

00:23:00,070 --> 00:23:06,580
develop this will propagate the screen

00:23:03,410 --> 00:23:09,500
size change to all to all components

00:23:06,580 --> 00:23:12,500
which are ever and which have our screen

00:23:09,500 --> 00:23:16,210
size hook and our speed side so now just

00:23:12,500 --> 00:23:19,150
cause the use context screen for this

00:23:16,210 --> 00:23:21,590
actually we could emerge this but I

00:23:19,150 --> 00:23:25,160
wanted to keep my code clean and I

00:23:21,590 --> 00:23:27,800
wanted to keep the box implementation

00:23:25,160 --> 00:23:31,760
application information and untaxed so

00:23:27,800 --> 00:23:33,950
with this change now it looks different

00:23:31,760 --> 00:23:37,000
you see that the code is atlases exactly

00:23:33,950 --> 00:23:40,970
the same in renders exactly the same and

00:23:37,000 --> 00:23:44,390
it for its 16 points 3 milliseconds to

00:23:40,970 --> 00:23:45,500
render 4,000 boxes so it's two

00:23:44,390 --> 00:23:49,100
magnitudes faster

00:23:45,500 --> 00:23:50,690
yeah so I think we are done it's ok we

00:23:49,100 --> 00:23:52,910
can we can get this implementation

00:23:50,690 --> 00:23:54,710
actually could go in faster because

00:23:52,910 --> 00:23:57,110
there are ways how to call the hook the

00:23:54,710 --> 00:23:58,280
use effect only on the component bound

00:23:57,110 --> 00:24:00,230
and cleanup

00:23:58,280 --> 00:24:01,910
only when you are mounting the component

00:24:00,230 --> 00:24:02,239
so if you leave the straight from the

00:24:01,910 --> 00:24:04,849
who

00:24:02,239 --> 00:24:06,949
at something like user f for storing the

00:24:04,849 --> 00:24:10,699
value of the screen size we can even

00:24:06,949 --> 00:24:12,289
avoid this even listeners which are

00:24:10,699 --> 00:24:14,589
unregistered and registered when the

00:24:12,289 --> 00:24:17,779
screen size changes from s to M and etc

00:24:14,589 --> 00:24:19,729
but this optimization actually doesn't

00:24:17,779 --> 00:24:22,149
make sense because it adds like three

00:24:19,729 --> 00:24:26,719
milliseconds who cares

00:24:22,149 --> 00:24:29,299
so what about custom hooks what we can

00:24:26,719 --> 00:24:31,759
use the for them for for everything

00:24:29,299 --> 00:24:35,419
actually there are many customs already

00:24:31,759 --> 00:24:37,369
ready on on github there's an example of

00:24:35,419 --> 00:24:39,049
a nice repository of hooks you can go

00:24:37,369 --> 00:24:42,499
through it and you can you can check

00:24:39,049 --> 00:24:44,569
them and you can either use them or you

00:24:42,499 --> 00:24:45,889
can be just inspired because I don't

00:24:44,569 --> 00:24:48,469
think we should be afraid of our own

00:24:45,889 --> 00:24:51,919
coding and just compose applications

00:24:48,469 --> 00:24:54,589
from colt who did someone else because

00:24:51,919 --> 00:24:56,899
most of those are up 200 lines of code

00:24:54,589 --> 00:24:59,119
so there if you understand here you have

00:24:56,899 --> 00:25:01,279
the row if you understand closures and

00:24:59,119 --> 00:25:03,949
building books the code is perfectly

00:25:01,279 --> 00:25:05,839
understandable and you can consider if

00:25:03,949 --> 00:25:08,359
it does exactly what you need to or you

00:25:05,839 --> 00:25:10,969
just you know create your custom MOOC

00:25:08,359 --> 00:25:12,829
with five hundred fifty fifty lines of

00:25:10,969 --> 00:25:14,659
code which does something more precise

00:25:12,829 --> 00:25:18,739
for what you need so I really encourage

00:25:14,659 --> 00:25:20,929
you to not just reuse but think study

00:25:18,739 --> 00:25:23,839
the code and create your own whenever it

00:25:20,929 --> 00:25:25,639
makes sense and by the way you can check

00:25:23,839 --> 00:25:27,439
our u5 library which is open source as

00:25:25,639 --> 00:25:28,099
well which next generation has a valid

00:25:27,439 --> 00:25:31,479
based on hooks

00:25:28,099 --> 00:25:33,829
so they are like hundred hooks there and

00:25:31,479 --> 00:25:37,539
like two hundred of components you can

00:25:33,829 --> 00:25:40,639
reuse directly and some conclusions

00:25:37,539 --> 00:25:42,589
though hooks are very effective way how

00:25:40,639 --> 00:25:45,439
to shell stateful logic and effect

00:25:42,589 --> 00:25:47,509
between function components so if you

00:25:45,439 --> 00:25:49,069
are predict the new code base you can

00:25:47,509 --> 00:25:51,649
create it purely functional without

00:25:49,069 --> 00:25:54,739
classes and everything will work and you

00:25:51,649 --> 00:25:56,959
will come to no obstacles so you can use

00:25:54,739 --> 00:25:59,869
just hooks and don't bother with classes

00:25:56,959 --> 00:26:00,529
they function components are usually

00:25:59,869 --> 00:26:02,209
faster

00:26:00,529 --> 00:26:04,609
sometimes much faster than cost

00:26:02,209 --> 00:26:07,209
components there are better testable you

00:26:04,609 --> 00:26:09,859
have not no time to prove it here but

00:26:07,209 --> 00:26:11,870
you can you can find a lot of articles

00:26:09,859 --> 00:26:14,210
about it on the Internet

00:26:11,870 --> 00:26:16,190
and from my point of view functional

00:26:14,210 --> 00:26:18,380
programming is much more native for

00:26:16,190 --> 00:26:21,890
JavaScript and class component and opie

00:26:18,380 --> 00:26:25,010
so so this is another good reason for it

00:26:21,890 --> 00:26:27,260
but still in react class components are

00:26:25,010 --> 00:26:29,480
first class so you can use either

00:26:27,260 --> 00:26:31,610
function components or class components

00:26:29,480 --> 00:26:33,770
you can combine them together you can

00:26:31,610 --> 00:26:35,630
render a class component from function

00:26:33,770 --> 00:26:37,970
component and function component from

00:26:35,630 --> 00:26:40,010
class component everything will work and

00:26:37,970 --> 00:26:41,930
there will be no problem so if you are

00:26:40,010 --> 00:26:44,510
adding hooks to your existing code base

00:26:41,930 --> 00:26:46,490
don't be afraid you can create new new

00:26:44,510 --> 00:26:48,740
components with hooks and you can stay

00:26:46,490 --> 00:26:52,370
with stick with your old ones and mix

00:26:48,740 --> 00:26:55,910
them together and if you want to share

00:26:52,370 --> 00:26:59,150
my later exercise there's a there's a

00:26:55,910 --> 00:27:01,460
github on if you just look for unicorn

00:26:59,150 --> 00:27:03,140
on github you will find it and the whole

00:27:01,460 --> 00:27:04,700
code and the whole working repository is

00:27:03,140 --> 00:27:06,820
there so you can download and you can

00:27:04,700 --> 00:27:10,280
apply this for your first custom hook

00:27:06,820 --> 00:27:12,890
okay so if you are a developer you can

00:27:10,280 --> 00:27:15,350
avoid hook so I encourage you strongly

00:27:12,890 --> 00:27:17,160
to to become master hooks and that's all

00:27:15,350 --> 00:27:22,820
for me thank you guys

00:27:17,160 --> 00:27:27,030
[Applause]

00:27:22,820 --> 00:27:27,030

YouTube URL: https://www.youtube.com/watch?v=wZ6CoUOBuyQ


