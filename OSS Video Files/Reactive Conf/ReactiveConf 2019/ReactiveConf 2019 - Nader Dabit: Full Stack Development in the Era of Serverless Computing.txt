Title: ReactiveConf 2019 - Nader Dabit: Full Stack Development in the Era of Serverless Computing
Publication date: 2019-10-30
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Real-time & Offline-ready Serverless GraphQL with AppSync

Building your own real-world, secure & scalable GraphQL API is a lot of work. With AppSync, robust GraphQL APIs including schema, resolvers, and data sources are created & configured automatically and instantly through either the AWS Amplify CLI or the AppSync console, abstracting away much of the complexity traditionally involved with setting up a new GraphQL backend.

In this talk, I’ll demonstrate and discuss the more interesting and powerful functionality that AppSync offers and do so in a way that developers will walk away with a confident understanding of how AppSync works and can be extended to help them in their day to day.

We’ll also create a real AppSync API & connect to a React application in a demo to demonstrate what we discussed in the talk in a live coding exercise, showing how to create queries, mutations & subscriptions directly from a client-side application.
Captions: 
	00:00:02,720 --> 00:00:11,850
[Music]

00:00:13,420 --> 00:00:17,750
thank you for coming to my talk thank

00:00:16,430 --> 00:00:19,340
you for coming to this stage this stage

00:00:17,750 --> 00:00:21,439
don't tell anybody but this is the

00:00:19,340 --> 00:00:23,180
actual better stage so come back and

00:00:21,439 --> 00:00:25,400
hang out over here later you might see

00:00:23,180 --> 00:00:27,050
me around my talk is going to be titled

00:00:25,400 --> 00:00:28,910
full stack development in the era of

00:00:27,050 --> 00:00:30,320
several is computing and I'm gonna be

00:00:28,910 --> 00:00:32,150
doing something today that I've never

00:00:30,320 --> 00:00:33,559
actually done before and I've been

00:00:32,150 --> 00:00:35,570
working pretty hard on an open source

00:00:33,559 --> 00:00:37,040
project for the last few months and I

00:00:35,570 --> 00:00:38,540
think right here at the end of the day

00:00:37,040 --> 00:00:40,400
at the end of this talk we're gonna go

00:00:38,540 --> 00:00:42,199
ahead and release that and we're gonna

00:00:40,400 --> 00:00:45,379
go ahead and publish that live on stage

00:00:42,199 --> 00:00:47,360
so I'm pretty excited about that so my

00:00:45,379 --> 00:00:49,760
name is nat Ord Abbott I'm a mobile and

00:00:47,360 --> 00:00:51,500
web developer really been specializing

00:00:49,760 --> 00:00:53,900
in cross-platform development for the

00:00:51,500 --> 00:00:55,820
last couple of years mainly really

00:00:53,900 --> 00:00:57,559
focused with react native so if you've

00:00:55,820 --> 00:00:59,119
ever listened to react native radio up a

00:00:57,559 --> 00:01:01,159
host of that podcast for a couple of

00:00:59,119 --> 00:01:03,769
years I'm very active in the react

00:01:01,159 --> 00:01:05,479
Native community and more so kind of

00:01:03,769 --> 00:01:07,640
like pivoting now towards full stack

00:01:05,479 --> 00:01:09,110
development with cloud computing but I'm

00:01:07,640 --> 00:01:11,659
still doing a lot in the cross-platform

00:01:09,110 --> 00:01:14,299
world world you can follow me on Twitter

00:01:11,659 --> 00:01:17,330
dev to medium github everywhere on

00:01:14,299 --> 00:01:19,070
social media I'm at dabit 3 so I've

00:01:17,330 --> 00:01:20,990
written a couple of books the book that

00:01:19,070 --> 00:01:23,150
I've working on right now it's called

00:01:20,990 --> 00:01:24,440
full stack serverless touches on a lot

00:01:23,150 --> 00:01:26,750
of the topics that we're gonna be

00:01:24,440 --> 00:01:30,290
covering today it really focuses mainly

00:01:26,750 --> 00:01:31,940
on the combination of a client a

00:01:30,290 --> 00:01:34,130
front-end it doesn't have to be react

00:01:31,940 --> 00:01:36,740
I'm using react in the book but it's

00:01:34,130 --> 00:01:38,600
kind of more around the building of full

00:01:36,740 --> 00:01:40,909
stack applications levering the cloud

00:01:38,600 --> 00:01:43,280
leveraging the cloud using some of the

00:01:40,909 --> 00:01:46,070
more modern tooling and I using graph QL

00:01:43,280 --> 00:01:49,010
and in my book I'm using Apple and AWS

00:01:46,070 --> 00:01:51,380
and AWS amplify on the team that I work

00:01:49,010 --> 00:01:54,110
on is the AWS climate technologies team

00:01:51,380 --> 00:01:56,290
when people think of Amazon has on Web

00:01:54,110 --> 00:01:58,909
Services they typically think of

00:01:56,290 --> 00:02:00,860
backends they think of ec2 instances

00:01:58,909 --> 00:02:02,810
storage they don't really think of

00:02:00,860 --> 00:02:05,780
front-end development but the entire

00:02:02,810 --> 00:02:07,700
team that I work on were always entirely

00:02:05,780 --> 00:02:09,560
focused on actually building for

00:02:07,700 --> 00:02:11,030
front-end developers we talked to

00:02:09,560 --> 00:02:13,099
funding developers we are front-end

00:02:11,030 --> 00:02:14,900
developers we live and breathe the

00:02:13,099 --> 00:02:17,690
front-end ecosystem so everything that

00:02:14,900 --> 00:02:19,730
we do is really focused around improving

00:02:17,690 --> 00:02:21,200
the developer experience and really what

00:02:19,730 --> 00:02:23,299
we're trying to do is kind of enable the

00:02:21,200 --> 00:02:25,360
next generation of developers to start

00:02:23,299 --> 00:02:26,740
leveraging the cloud because in the

00:02:25,360 --> 00:02:29,080
the big cloud computing has been a

00:02:26,740 --> 00:02:30,520
little inaccessible because it's just

00:02:29,080 --> 00:02:32,890
really hard to get kind of get started

00:02:30,520 --> 00:02:36,100
unless you're already familiar with it

00:02:32,890 --> 00:02:37,840
so just on my personal note something

00:02:36,100 --> 00:02:39,520
that's really served me well as being a

00:02:37,840 --> 00:02:41,710
futurist and this may sound stupid

00:02:39,520 --> 00:02:44,590
animate you may think it's cool whatever

00:02:41,710 --> 00:02:46,420
but really the idea of being a futurist

00:02:44,590 --> 00:02:48,190
is less about predicting the future and

00:02:46,420 --> 00:02:49,000
I think it's more about listening to

00:02:48,190 --> 00:02:51,340
what's going on

00:02:49,000 --> 00:02:53,800
observing the present and really trying

00:02:51,340 --> 00:02:56,080
to see what's going to be happening over

00:02:53,800 --> 00:02:57,459
the next couple of years and being at

00:02:56,080 --> 00:02:59,620
the right place at the right time so you

00:02:57,459 --> 00:03:01,150
can ride these waves when innovation

00:02:59,620 --> 00:03:02,770
happens you want to be on the forefront

00:03:01,150 --> 00:03:05,020
of that innovation so when the

00:03:02,770 --> 00:03:07,150
innovation starts cresting you are in

00:03:05,020 --> 00:03:09,130
that arena already maybe you're

00:03:07,150 --> 00:03:10,660
specializing in that thing already so

00:03:09,130 --> 00:03:12,250
you can kind of like gain the benefit

00:03:10,660 --> 00:03:16,300
from that and maybe reach back and help

00:03:12,250 --> 00:03:18,880
others as well so the definition of my

00:03:16,300 --> 00:03:20,620
talk is kind of along these lines and

00:03:18,880 --> 00:03:22,239
this is the answer or the question I

00:03:20,620 --> 00:03:24,190
want to answer today is what does

00:03:22,239 --> 00:03:26,110
full-stack mean in the era of several s

00:03:24,190 --> 00:03:29,110
computing and we're gonna look at why I

00:03:26,110 --> 00:03:31,959
use the word era in just a moment and to

00:03:29,110 --> 00:03:33,910
start this off I really like this quote

00:03:31,959 --> 00:03:36,310
from Bill Gates I choose a lazy person

00:03:33,910 --> 00:03:37,989
to do a hard job because a lazy person

00:03:36,310 --> 00:03:40,150
will find an easy way to do it

00:03:37,989 --> 00:03:42,730
I don't think he means lazy in the sense

00:03:40,150 --> 00:03:45,430
of sitting at home sleeping late

00:03:42,730 --> 00:03:48,670
watching Spongebob and not going to work

00:03:45,430 --> 00:03:50,290
I think what he means is lazy in the

00:03:48,670 --> 00:03:51,489
sense that I'm not gonna do something if

00:03:50,290 --> 00:03:52,840
someone else has already done it or

00:03:51,489 --> 00:03:56,739
maybe I'm gonna find some abstraction

00:03:52,840 --> 00:03:59,470
that makes this thing the end goal more

00:03:56,739 --> 00:04:02,260
easy to accomplish versus reinventing

00:03:59,470 --> 00:04:04,540
the wheel or just being efficient with

00:04:02,260 --> 00:04:06,489
with things in general I think it's kind

00:04:04,540 --> 00:04:08,830
of in my opinion where where he's what

00:04:06,489 --> 00:04:10,480
he's saying there and this kind of

00:04:08,830 --> 00:04:13,290
starts off in our world with

00:04:10,480 --> 00:04:15,610
abstractions and there are two main

00:04:13,290 --> 00:04:17,200
parts of this talk front end and back

00:04:15,610 --> 00:04:19,359
end so look let's look at the front end

00:04:17,200 --> 00:04:22,030
abstractions and see what's happened

00:04:19,359 --> 00:04:23,590
over the last couple of years so if

00:04:22,030 --> 00:04:25,330
you're new into front-end development

00:04:23,590 --> 00:04:26,680
you may not have known this but back in

00:04:25,330 --> 00:04:28,930
the day you could actually get a pretty

00:04:26,680 --> 00:04:31,750
good job as a friendly developer knowing

00:04:28,930 --> 00:04:33,640
the basics of HTML CSS and maybe jQuery

00:04:31,750 --> 00:04:35,620
maybe you didn't even know jQuery you

00:04:33,640 --> 00:04:37,750
just knew JavaScript and you knew how to

00:04:35,620 --> 00:04:39,220
manipulate the Dom using JavaScript and

00:04:37,750 --> 00:04:41,200
you could get

00:04:39,220 --> 00:04:45,100
with not really much more knowledge than

00:04:41,200 --> 00:04:48,280
that but today it's not the same world

00:04:45,100 --> 00:04:50,530
that we live in is it and the complexity

00:04:48,280 --> 00:04:52,390
on the front end is gaining momentum

00:04:50,530 --> 00:04:54,640
right we're getting good abstractions

00:04:52,390 --> 00:04:57,610
but as these abstractions come people

00:04:54,640 --> 00:04:59,620
are introducing new problems to solve

00:04:57,610 --> 00:05:01,090
and therefore we need to have ways to

00:04:59,620 --> 00:05:02,350
solve them so therefore people are gonna

00:05:01,090 --> 00:05:04,450
build things for us to solve these

00:05:02,350 --> 00:05:06,640
problems and therefore tooling and new

00:05:04,450 --> 00:05:08,950
things come out so what we what we end

00:05:06,640 --> 00:05:10,510
up with is all of this stuff that we

00:05:08,950 --> 00:05:11,920
think that we need to know and that we

00:05:10,510 --> 00:05:13,330
may need to know some of this stuff to

00:05:11,920 --> 00:05:15,700
get a job these days right

00:05:13,330 --> 00:05:20,380
so the complexity on the front end is

00:05:15,700 --> 00:05:23,650
moving much more faster to being more

00:05:20,380 --> 00:05:24,970
complex lately and people when they used

00:05:23,650 --> 00:05:26,530
to think of front-end developers they

00:05:24,970 --> 00:05:28,870
used to think of front-end developers as

00:05:26,530 --> 00:05:30,250
kind of like not that serious developers

00:05:28,870 --> 00:05:32,650
but now we're being taken more seriously

00:05:30,250 --> 00:05:36,070
because anyone kind of coming into this

00:05:32,650 --> 00:05:37,930
ecosystem must be taken seriously and

00:05:36,070 --> 00:05:40,870
really the reasons I think a lot of this

00:05:37,930 --> 00:05:42,850
really comes down to or these you know

00:05:40,870 --> 00:05:45,100
main areas here so single page

00:05:42,850 --> 00:05:47,530
applications make us structure our

00:05:45,100 --> 00:05:49,540
applications in different ways our data

00:05:47,530 --> 00:05:51,660
is becoming more complex and we're

00:05:49,540 --> 00:05:54,490
having to deal with a lot more data

00:05:51,660 --> 00:05:56,710
microservices make the fetching of data

00:05:54,490 --> 00:05:58,360
a little more complex we're dealing with

00:05:56,710 --> 00:05:59,919
multiple targets we don't really only

00:05:58,360 --> 00:06:01,840
want to ship to a single device these

00:05:59,919 --> 00:06:04,540
days we have all these new devices that

00:06:01,840 --> 00:06:07,300
we're working with and then the the user

00:06:04,540 --> 00:06:09,400
expectations that people get from you

00:06:07,300 --> 00:06:11,560
know being used to maybe using some of

00:06:09,400 --> 00:06:13,720
the more modern applications you want

00:06:11,560 --> 00:06:16,300
your application to meet those needs so

00:06:13,720 --> 00:06:18,280
you end up trying to have an application

00:06:16,300 --> 00:06:20,380
that you know kind of does all these

00:06:18,280 --> 00:06:23,740
things and leads to your users

00:06:20,380 --> 00:06:25,000
expectations so where are some of the

00:06:23,740 --> 00:06:26,560
abstractions that we're seeing that are

00:06:25,000 --> 00:06:28,690
kind of making this a little bit easier

00:06:26,560 --> 00:06:30,730
there's a bunch out there but what we're

00:06:28,690 --> 00:06:34,180
seeing things like manage graph QL like

00:06:30,730 --> 00:06:37,720
asura and eight base style components or

00:06:34,180 --> 00:06:40,720
emotion for CSS and GIS and it's kind of

00:06:37,720 --> 00:06:42,640
like a hybrid of CSS and CSS and yes you

00:06:40,720 --> 00:06:45,430
know the next Jaxx with gatsby react

00:06:42,640 --> 00:06:46,870
native for cross-platform so as things

00:06:45,430 --> 00:06:48,160
become more complex we're seeing

00:06:46,870 --> 00:06:50,940
abstractions that kind of make these

00:06:48,160 --> 00:06:53,850
easier now what about the backend

00:06:50,940 --> 00:06:57,360
who here is a considers themself a

00:06:53,850 --> 00:06:58,470
back-end developer okay so that's kind

00:06:57,360 --> 00:06:59,910
of what I assumed with this conference

00:06:58,470 --> 00:07:01,830
because I'm a front-end developer I

00:06:59,910 --> 00:07:03,360
assumed that this was a front-end

00:07:01,830 --> 00:07:05,760
conference and that's kind of what you

00:07:03,360 --> 00:07:07,830
know this that just told me so let's

00:07:05,760 --> 00:07:09,870
talk about the backend and this is just

00:07:07,830 --> 00:07:11,970
a quick overview of maybe a similar

00:07:09,870 --> 00:07:14,970
timeframe of ten years or twenty years

00:07:11,970 --> 00:07:16,980
or so so a long time ago when you built

00:07:14,970 --> 00:07:18,540
an application and you needed to host it

00:07:16,980 --> 00:07:20,130
somewhere you may have had it on

00:07:18,540 --> 00:07:22,290
premises you may have had your server in

00:07:20,130 --> 00:07:23,850
your home or in your office if the

00:07:22,290 --> 00:07:25,680
internet went out or if there was a

00:07:23,850 --> 00:07:27,030
storm and the power went out there was

00:07:25,680 --> 00:07:29,220
all these different variables that were

00:07:27,030 --> 00:07:31,590
up to you know the gods I guess you

00:07:29,220 --> 00:07:33,030
could say that to you know whether or

00:07:31,590 --> 00:07:34,800
not your application was gonna stay up

00:07:33,030 --> 00:07:36,840
and that was kind of you know where you

00:07:34,800 --> 00:07:38,400
were at at that point and then we had

00:07:36,840 --> 00:07:40,050
cloud computing that started coming

00:07:38,400 --> 00:07:43,680
along and the cloud computing could be

00:07:40,050 --> 00:07:45,180
you know mentioned as AWS and Microsoft

00:07:43,680 --> 00:07:46,980
and all these things but it's also all

00:07:45,180 --> 00:07:48,510
these hosting services right because

00:07:46,980 --> 00:07:50,280
you're kind of moving your

00:07:48,510 --> 00:07:51,720
infrastructure into these hosting

00:07:50,280 --> 00:07:54,330
services and they're kind of taking care

00:07:51,720 --> 00:07:56,520
of most most of the dealing with the

00:07:54,330 --> 00:07:57,900
scaling I'm sorry office going but

00:07:56,520 --> 00:08:00,960
dealing with the hardware and dealing

00:07:57,900 --> 00:08:02,760
with the hardware maintenance and then

00:08:00,960 --> 00:08:04,170
we had several lists so server list has

00:08:02,760 --> 00:08:05,910
been kind of this new thing over the

00:08:04,170 --> 00:08:08,190
last five or so years and we're gonna

00:08:05,910 --> 00:08:10,080
dive pretty deep into this and the main

00:08:08,190 --> 00:08:12,840
advantage that turbo Ellis brings to the

00:08:10,080 --> 00:08:15,060
table over cloud is that instead of

00:08:12,840 --> 00:08:18,000
having to not only deal with keeping

00:08:15,060 --> 00:08:21,300
your you know servers up and running and

00:08:18,000 --> 00:08:23,190
keeping everything working you now also

00:08:21,300 --> 00:08:25,260
don't have to deal with scaling or

00:08:23,190 --> 00:08:27,030
patching or maintaining your servers at

00:08:25,260 --> 00:08:29,910
all you're just given invitations

00:08:27,030 --> 00:08:31,830
functions that you can run and then once

00:08:29,910 --> 00:08:33,390
that functions done being run you don't

00:08:31,830 --> 00:08:34,770
have to worry about dealing with it you

00:08:33,390 --> 00:08:37,289
also don't have to worry about scaling

00:08:34,770 --> 00:08:39,150
this so if you end up with one user or a

00:08:37,289 --> 00:08:41,310
million users the several list functions

00:08:39,150 --> 00:08:44,280
will scale for you you're also starting

00:08:41,310 --> 00:08:46,260
to pay for computing time versus

00:08:44,280 --> 00:08:48,500
competing power so when you're dealing

00:08:46,260 --> 00:08:51,030
with the basic cloud infrastructure

00:08:48,500 --> 00:08:53,130
managing your own instances of ec2 maybe

00:08:51,030 --> 00:08:55,050
you might be paying for that server

00:08:53,130 --> 00:08:56,280
regardless if someone's using it when

00:08:55,050 --> 00:08:58,020
you start moving into the service

00:08:56,280 --> 00:09:00,240
paradigm you're now paying for the

00:08:58,020 --> 00:09:01,830
actual usage so this means you can start

00:09:00,240 --> 00:09:03,000
building a lot and more things without

00:09:01,830 --> 00:09:04,740
spending a lot of money out of your

00:09:03,000 --> 00:09:06,240
pocket once you get users

00:09:04,740 --> 00:09:09,270
then you start paying which is you know

00:09:06,240 --> 00:09:11,160
a better problem to have so what comes

00:09:09,270 --> 00:09:13,760
next after service and this is what

00:09:11,160 --> 00:09:15,779
really interests me because I think

00:09:13,760 --> 00:09:17,820
we're starting to see this happen

00:09:15,779 --> 00:09:19,500
already and I don't really know what

00:09:17,820 --> 00:09:21,660
exactly it is I'm just gonna give you my

00:09:19,500 --> 00:09:23,459
opinion of what it is so let's talk

00:09:21,660 --> 00:09:25,770
about the definition of what services

00:09:23,459 --> 00:09:27,180
and a little more depth what I really am

00:09:25,770 --> 00:09:30,779
interested in sometimes is these

00:09:27,180 --> 00:09:34,040
scientific and you know papers that come

00:09:30,779 --> 00:09:36,750
out from different you know colleges and

00:09:34,040 --> 00:09:39,060
all of these different really academic

00:09:36,750 --> 00:09:40,620
research done on several lists and cloud

00:09:39,060 --> 00:09:42,630
computing in general a really

00:09:40,620 --> 00:09:44,550
interesting one that came out was cloud

00:09:42,630 --> 00:09:47,610
computing simplified a Berkeley view on

00:09:44,550 --> 00:09:50,010
service computing and the gist of what

00:09:47,610 --> 00:09:51,959
this paper said is this while cloud

00:09:50,010 --> 00:09:53,940
functions package that's functions as a

00:09:51,959 --> 00:09:56,190
service offerings so functions as a

00:09:53,940 --> 00:09:57,750
service would be service functions while

00:09:56,190 --> 00:09:59,550
these represent the core of several is

00:09:57,750 --> 00:10:02,670
computing cloud platforms are also

00:09:59,550 --> 00:10:04,770
specialized service free also provides

00:10:02,670 --> 00:10:06,750
specialized service frameworks that

00:10:04,770 --> 00:10:09,829
cater to specific application

00:10:06,750 --> 00:10:12,029
requirements as backends as a service so

00:10:09,829 --> 00:10:13,920
basically what they're saying put simply

00:10:12,029 --> 00:10:16,560
serverless computing is equal to

00:10:13,920 --> 00:10:19,980
functions as a service and backends as a

00:10:16,560 --> 00:10:21,990
service so this is a mutation of the old

00:10:19,980 --> 00:10:24,000
definition of service where several

00:10:21,990 --> 00:10:25,290
issues to mean service functions now

00:10:24,000 --> 00:10:27,750
they're starting to group other things

00:10:25,290 --> 00:10:29,520
into this into this paradigm so what

00:10:27,750 --> 00:10:31,410
they're saying now is okay not only are

00:10:29,520 --> 00:10:33,060
we talking about service functions we're

00:10:31,410 --> 00:10:37,170
talking about kind of managed services

00:10:33,060 --> 00:10:38,370
or backends of the service so I went to

00:10:37,170 --> 00:10:40,170
the end of the paper and they have a

00:10:38,370 --> 00:10:41,610
predictions area so these are the

00:10:40,170 --> 00:10:43,800
predictions that they have at the end of

00:10:41,610 --> 00:10:45,149
the paper pretty interesting they think

00:10:43,800 --> 00:10:47,399
and then in the future you're gonna see

00:10:45,149 --> 00:10:50,880
more backend as a service storage off

00:10:47,399 --> 00:10:53,029
offerings server list becomes simpler

00:10:50,880 --> 00:10:55,620
even more simple than it is today

00:10:53,029 --> 00:10:57,300
serverless ultimately becomes cheaper

00:10:55,620 --> 00:10:59,279
than server full which is super

00:10:57,300 --> 00:11:01,020
interesting in my opinion which would

00:10:59,279 --> 00:11:04,940
really change a lot of things than the

00:11:01,020 --> 00:11:08,430
in the world I think of what it is today

00:11:04,940 --> 00:11:10,260
servo server full computing becomes less

00:11:08,430 --> 00:11:10,740
important relatively which makes a lot

00:11:10,260 --> 00:11:12,779
of sense

00:11:10,740 --> 00:11:15,390
but the most important point was that

00:11:12,779 --> 00:11:17,370
they came at the end was this serverless

00:11:15,390 --> 00:11:18,570
computing becomes the default computing

00:11:17,370 --> 00:11:20,940
paradigm of the cloud air

00:11:18,570 --> 00:11:23,040
so we're moving to to where service is

00:11:20,940 --> 00:11:24,390
going to be the default versus something

00:11:23,040 --> 00:11:25,110
else being the default which is pretty

00:11:24,390 --> 00:11:27,330
interesting to me

00:11:25,110 --> 00:11:29,790
another definition comes from Ben Keogh

00:11:27,330 --> 00:11:32,190
and instead of saying serverless is a

00:11:29,790 --> 00:11:35,700
thing he says service is more of a

00:11:32,190 --> 00:11:38,310
spectrum or a variance and Ben Kehoe is

00:11:35,700 --> 00:11:40,800
a engineering a lead leader or manager

00:11:38,310 --> 00:11:43,200
at iRobot and they make the Roomba robot

00:11:40,800 --> 00:11:46,350
and he's running a server list

00:11:43,200 --> 00:11:48,750
infrastructure there and to be more

00:11:46,350 --> 00:11:51,540
servile as he says that you have to be

00:11:48,750 --> 00:11:52,860
more server service full and I'll talk

00:11:51,540 --> 00:11:55,380
about what that means in just a moment

00:11:52,860 --> 00:11:57,570
and using functions as a service a

00:11:55,380 --> 00:11:59,880
tighter correspondence between resources

00:11:57,570 --> 00:12:02,520
use and resources built again going back

00:11:59,880 --> 00:12:04,920
to paying for a compute time versus

00:12:02,520 --> 00:12:07,800
compute power and then smaller and more

00:12:04,920 --> 00:12:10,790
abstracted control plane so what is

00:12:07,800 --> 00:12:13,050
service full mean so service full means

00:12:10,790 --> 00:12:14,520
this this is kind of what I've put

00:12:13,050 --> 00:12:16,590
together based on some of the research

00:12:14,520 --> 00:12:19,170
that I've done so what is the service

00:12:16,590 --> 00:12:21,270
full service service full service has no

00:12:19,170 --> 00:12:24,330
server operations it scales seamlessly

00:12:21,270 --> 00:12:26,640
no need to manage up Tom and variable

00:12:24,330 --> 00:12:28,290
expense versus picnics fixed expense so

00:12:26,640 --> 00:12:29,550
we're kind of inheriting these four

00:12:28,290 --> 00:12:31,050
properties from serverless

00:12:29,550 --> 00:12:33,740
but we're adding a couple of new ones

00:12:31,050 --> 00:12:36,570
we're also saying that a service full

00:12:33,740 --> 00:12:38,760
service to be considered service full

00:12:36,570 --> 00:12:40,710
also it needs to be essentially codeless

00:12:38,760 --> 00:12:41,940
so codeless in the sense that we don't

00:12:40,710 --> 00:12:43,110
have to deal with the code not that

00:12:41,940 --> 00:12:43,710
there isn't any code running in the

00:12:43,110 --> 00:12:45,300
background

00:12:43,710 --> 00:12:47,940
we're just interacting with these api's

00:12:45,300 --> 00:12:49,740
and then also this service will assume

00:12:47,940 --> 00:12:52,350
responsibility prefer providing a

00:12:49,740 --> 00:12:53,700
defined set of services so that means

00:12:52,350 --> 00:12:54,900
we're kind of taking you know what

00:12:53,700 --> 00:12:57,060
they're giving us and we're just using

00:12:54,900 --> 00:13:00,750
what they're offering and these are a

00:12:57,060 --> 00:13:03,060
few examples alt 0 is really great for

00:13:00,750 --> 00:13:06,180
managed authentication I'll go Lea is

00:13:03,060 --> 00:13:08,430
really great for search cloud in area

00:13:06,180 --> 00:13:10,620
for storage you have recognition for

00:13:08,430 --> 00:13:11,970
machine learning and net low fee and app

00:13:10,620 --> 00:13:14,040
sync you have all these things coming

00:13:11,970 --> 00:13:15,540
out there hundreds or even thousands of

00:13:14,040 --> 00:13:19,110
these right and you're seeing more and

00:13:15,540 --> 00:13:20,550
more of these so how does graph QL fit

00:13:19,110 --> 00:13:24,410
into this because I think it really does

00:13:20,550 --> 00:13:26,550
play a very important role well as the

00:13:24,410 --> 00:13:28,470
the end goal of what I think is

00:13:26,550 --> 00:13:29,880
happening with all this server several

00:13:28,470 --> 00:13:31,950
is competing is it's making everything

00:13:29,880 --> 00:13:34,140
more efficient it's

00:13:31,950 --> 00:13:36,750
making us be able to build things

00:13:34,140 --> 00:13:38,670
quicker our developer velocity is moving

00:13:36,750 --> 00:13:42,000
faster we're able to experiment more

00:13:38,670 --> 00:13:44,190
often and without as many drawbacks so

00:13:42,000 --> 00:13:47,100
if we know that we're not gonna pay for

00:13:44,190 --> 00:13:48,300
this actual computing power we know that

00:13:47,100 --> 00:13:49,770
we can build something really quickly

00:13:48,300 --> 00:13:51,900
and we know that that's not gonna cost

00:13:49,770 --> 00:13:53,850
us a lot of money why not try building

00:13:51,900 --> 00:13:55,590
this thing out in the next couple of

00:13:53,850 --> 00:13:57,660
days and just seeing if it works because

00:13:55,590 --> 00:13:59,730
our investment is continually going down

00:13:57,660 --> 00:14:03,030
even if this thing fails were able to at

00:13:59,730 --> 00:14:04,650
least try it out so on that idea of

00:14:03,030 --> 00:14:07,050
developer velocity I think graph QL

00:14:04,650 --> 00:14:09,750
brings that developer velocity to the

00:14:07,050 --> 00:14:11,550
table as well with building your own

00:14:09,750 --> 00:14:12,930
graph QL server though you're losing

00:14:11,550 --> 00:14:15,150
some of that velocity because it's

00:14:12,930 --> 00:14:17,820
actually not easy to implement a graph

00:14:15,150 --> 00:14:19,620
QL server with the proper authentication

00:14:17,820 --> 00:14:21,050
and authorization rules and all of the

00:14:19,620 --> 00:14:23,400
stuff that goes along with that right

00:14:21,050 --> 00:14:26,310
but anyway so let's talk about graph QL

00:14:23,400 --> 00:14:27,960
and why this is the case so a typical

00:14:26,310 --> 00:14:29,250
micro service architecture might look

00:14:27,960 --> 00:14:30,690
something like this you might be

00:14:29,250 --> 00:14:31,920
interacting directly with the micro

00:14:30,690 --> 00:14:33,960
service or you might have some type of

00:14:31,920 --> 00:14:36,450
API gateway where you have that single

00:14:33,960 --> 00:14:38,730
API endpoint and you're interacting

00:14:36,450 --> 00:14:41,880
through that API gateway with graph QL

00:14:38,730 --> 00:14:44,280
you have a similar end goal right but

00:14:41,880 --> 00:14:47,370
instead of just having all these random

00:14:44,280 --> 00:14:49,110
you know implementations of the API you

00:14:47,370 --> 00:14:51,660
now have a unified way of interacting

00:14:49,110 --> 00:14:54,180
with that data so no matter what happens

00:14:51,660 --> 00:14:56,520
after the request goes through when you

00:14:54,180 --> 00:14:58,920
query data you send that query from the

00:14:56,520 --> 00:15:00,810
client the exact same way in regardless

00:14:58,920 --> 00:15:02,310
of the actual implementation details on

00:15:00,810 --> 00:15:03,810
the server you're still going to be

00:15:02,310 --> 00:15:05,280
getting the data back the same way on

00:15:03,810 --> 00:15:06,960
the client so you don't have to worry

00:15:05,280 --> 00:15:09,480
about any of the implementation details

00:15:06,960 --> 00:15:12,360
on the back end you're given all this

00:15:09,480 --> 00:15:13,950
also in a menu so with graph QL you have

00:15:12,360 --> 00:15:15,660
introspection you can see all the

00:15:13,950 --> 00:15:17,130
different operations available you can

00:15:15,660 --> 00:15:18,930
see all the data that's available you

00:15:17,130 --> 00:15:21,090
know exactly the data that's coming back

00:15:18,930 --> 00:15:23,220
it makes for much much better user

00:15:21,090 --> 00:15:24,990
experience once once it's actually there

00:15:23,220 --> 00:15:26,220
right but getting there I think is the

00:15:24,990 --> 00:15:27,720
hard part and that's that's another

00:15:26,220 --> 00:15:31,470
thing that I want to kind of talk about

00:15:27,720 --> 00:15:33,570
a little more and this brings what I

00:15:31,470 --> 00:15:35,790
call schema centric development the

00:15:33,570 --> 00:15:37,860
unified data graph the front in the

00:15:35,790 --> 00:15:39,930
backend end up being closer and more in

00:15:37,860 --> 00:15:42,330
sync you end up having type safety

00:15:39,930 --> 00:15:45,660
throughout you have simple access to

00:15:42,330 --> 00:15:46,950
data per client so you can also be

00:15:45,660 --> 00:15:49,080
thinking about this in the sense that

00:15:46,950 --> 00:15:51,330
you're gonna be needing this same data

00:15:49,080 --> 00:15:52,740
from your mobile device from the desktop

00:15:51,330 --> 00:15:55,440
device and maybe from your Apple watch

00:15:52,740 --> 00:15:57,060
but you don't want to be bringing the

00:15:55,440 --> 00:15:58,170
same data down on these different

00:15:57,060 --> 00:16:00,150
devices you're gonna need different

00:15:58,170 --> 00:16:00,770
types of data graph QL is perfect for

00:16:00,150 --> 00:16:03,360
that

00:16:00,770 --> 00:16:05,370
consistent API to micro-services lambda

00:16:03,360 --> 00:16:07,830
functions and databases so you end up

00:16:05,370 --> 00:16:09,240
using graph QL as an API gateway to all

00:16:07,830 --> 00:16:10,350
these other micro services that are

00:16:09,240 --> 00:16:12,330
still there you're not getting rid of

00:16:10,350 --> 00:16:15,300
them you're just actually putting them

00:16:12,330 --> 00:16:17,340
in front of graph QL so full stack

00:16:15,300 --> 00:16:19,710
several lists this is something that I

00:16:17,340 --> 00:16:22,620
really am really interested in I think

00:16:19,710 --> 00:16:25,140
that I'm gonna be giving you my spiel of

00:16:22,620 --> 00:16:27,420
what it is so full stack server list has

00:16:25,140 --> 00:16:30,870
the following characteristics having an

00:16:27,420 --> 00:16:33,180
intentional use of managed services you

00:16:30,870 --> 00:16:34,440
choose a managed service because you

00:16:33,180 --> 00:16:36,690
don't want to rewrite something that

00:16:34,440 --> 00:16:38,580
someone else has done right so you you

00:16:36,690 --> 00:16:39,870
have a feature you first look to see if

00:16:38,580 --> 00:16:41,190
there's some type of managed service

00:16:39,870 --> 00:16:44,340
that can accomplish that goal

00:16:41,190 --> 00:16:46,410
no ok next we go and we fund and we

00:16:44,340 --> 00:16:48,930
build our own function that does the

00:16:46,410 --> 00:16:51,510
thing that we want it to do even better

00:16:48,930 --> 00:16:53,820
if we have some custom client SDKs that

00:16:51,510 --> 00:16:57,750
make our API interactions easier so we

00:16:53,820 --> 00:16:59,400
don't want to have a lot of I guess

00:16:57,750 --> 00:17:00,810
custom code that we're creating to

00:16:59,400 --> 00:17:02,610
interact with all these different api's

00:17:00,810 --> 00:17:04,260
if you're using something like Apollo

00:17:02,610 --> 00:17:06,660
for example this kind of falls into that

00:17:04,260 --> 00:17:09,270
category where we have this custom SDK

00:17:06,660 --> 00:17:10,740
for graph QL and we're able to use this

00:17:09,270 --> 00:17:13,110
for all the different operations that

00:17:10,740 --> 00:17:15,060
we'd like to use and then graph QL as

00:17:13,110 --> 00:17:17,640
the main data source is up in a part and

00:17:15,060 --> 00:17:19,410
port of this important part of this so

00:17:17,640 --> 00:17:20,820
what are some assumptions and

00:17:19,410 --> 00:17:23,610
acknowledgments around full stack

00:17:20,820 --> 00:17:25,200
several us well you assume that code is

00:17:23,610 --> 00:17:27,030
a liability in the least code that you

00:17:25,200 --> 00:17:28,650
can write the better so anytime that you

00:17:27,030 --> 00:17:31,350
can get away with not writing code you

00:17:28,650 --> 00:17:32,880
do it the front-end skillset continues

00:17:31,350 --> 00:17:34,140
to become increasingly valuable and I

00:17:32,880 --> 00:17:35,720
think we're gonna continue to see this

00:17:34,140 --> 00:17:39,120
in the future we've already seen the

00:17:35,720 --> 00:17:42,900
skyrocketing you know value of front-end

00:17:39,120 --> 00:17:44,640
developers the skyrocketing money that

00:17:42,900 --> 00:17:46,110
people are getting paid these days to be

00:17:44,640 --> 00:17:47,730
a front-end developer I think that's not

00:17:46,110 --> 00:17:50,280
going to stop and it's going to continue

00:17:47,730 --> 00:17:51,900
going up deliberate focus on not

00:17:50,280 --> 00:17:53,190
reinventing the wheel so if someone else

00:17:51,900 --> 00:17:55,200
has done it we're going to use what

00:17:53,190 --> 00:17:58,830
they've done to save our time to save us

00:17:55,200 --> 00:17:59,550
some time and with our increased value

00:17:58,830 --> 00:18:01,890
as developer

00:17:59,550 --> 00:18:03,240
the least time that we spent right doing

00:18:01,890 --> 00:18:04,800
something anyway the better because

00:18:03,240 --> 00:18:07,680
we're gonna be saving time and therefore

00:18:04,800 --> 00:18:09,390
money and then what really interests me

00:18:07,680 --> 00:18:11,490
is the definition of front-end back-end

00:18:09,390 --> 00:18:14,160
DevOps full-stack all this starts to

00:18:11,490 --> 00:18:15,450
blur because as a front-end developer if

00:18:14,160 --> 00:18:17,250
you understand how to work with these

00:18:15,450 --> 00:18:19,680
api's you're able to do all these things

00:18:17,250 --> 00:18:21,930
that these other people used to do but

00:18:19,680 --> 00:18:23,370
you don't maybe need them anymore to do

00:18:21,930 --> 00:18:24,930
all this other stuff maybe you still

00:18:23,370 --> 00:18:26,550
need them to do certain things but for

00:18:24,930 --> 00:18:28,500
the most part you don't need someone

00:18:26,550 --> 00:18:29,910
creating all of these creepy eyes on the

00:18:28,500 --> 00:18:33,120
back end because you can spin those up

00:18:29,910 --> 00:18:34,110
with some type of managed database you

00:18:33,120 --> 00:18:35,520
don't need someone to create your

00:18:34,110 --> 00:18:36,540
authentication on the backend because

00:18:35,520 --> 00:18:38,760
you're gonna use an authentication

00:18:36,540 --> 00:18:40,710
service and all these other things that

00:18:38,760 --> 00:18:42,410
kind of go into that and then the devops

00:18:40,710 --> 00:18:44,850
part with server list kind of goes away

00:18:42,410 --> 00:18:46,980
so what are the benefits well the

00:18:44,850 --> 00:18:48,300
benefits might be you know pretty

00:18:46,980 --> 00:18:49,830
straightforward I may have gone over

00:18:48,300 --> 00:18:51,450
some of these already but what we're

00:18:49,830 --> 00:18:53,430
seeing now is front-end developers that

00:18:51,450 --> 00:18:55,260
used to be labeled as front-end

00:18:53,430 --> 00:18:56,670
developers are now being called full

00:18:55,260 --> 00:18:58,590
stack developers or they're at least

00:18:56,670 --> 00:19:00,150
moving up the stack they're able to do

00:18:58,590 --> 00:19:03,000
things that back-end developers only

00:19:00,150 --> 00:19:04,770
exclusively used to do the developer

00:19:03,000 --> 00:19:08,370
velocity developer efficiency starts

00:19:04,770 --> 00:19:10,370
increasing you have decreased complexity

00:19:08,370 --> 00:19:13,080
because you have ultimately less code

00:19:10,370 --> 00:19:15,030
more secure more reliable more scalable

00:19:13,080 --> 00:19:17,010
why would this be more secure and more

00:19:15,030 --> 00:19:18,990
reliable well think about it if you are

00:19:17,010 --> 00:19:20,490
a front-end developer and you want to

00:19:18,990 --> 00:19:21,840
create an authentication service and

00:19:20,490 --> 00:19:24,420
you've never done this before you spend

00:19:21,840 --> 00:19:25,440
three weeks doing it you know do you

00:19:24,420 --> 00:19:26,670
think you've done a better job than

00:19:25,440 --> 00:19:29,040
someone who's worked on an

00:19:26,670 --> 00:19:31,140
authentication service for 12 years or

00:19:29,040 --> 00:19:33,840
five years or even two years that person

00:19:31,140 --> 00:19:35,670
and that team has iterated and solved

00:19:33,840 --> 00:19:37,260
all these problems unknown unknowns that

00:19:35,670 --> 00:19:38,610
you might not even know about so of

00:19:37,260 --> 00:19:40,320
course in my opinion that's gonna be

00:19:38,610 --> 00:19:42,360
more secure than spinning something up

00:19:40,320 --> 00:19:45,480
yourself so how can we get into this

00:19:42,360 --> 00:19:47,280
well I'm gonna talk about some tools

00:19:45,480 --> 00:19:49,470
that are out there and kind of demo some

00:19:47,280 --> 00:19:51,810
stuff that I'm working on so the

00:19:49,470 --> 00:19:54,240
combination of these four things equals

00:19:51,810 --> 00:19:55,800
full stack server lists so a web and

00:19:54,240 --> 00:19:57,960
mobile framework or web or mobile

00:19:55,800 --> 00:20:00,480
framework and you as a web or fundin

00:19:57,960 --> 00:20:03,030
developer utilized service functions

00:20:00,480 --> 00:20:05,130
graph QL and managed services to build

00:20:03,030 --> 00:20:07,530
your applications so what are some tools

00:20:05,130 --> 00:20:09,600
out there so for managed services off

00:20:07,530 --> 00:20:12,540
zero cloud in area algo Lea and metla

00:20:09,600 --> 00:20:13,300
Phi server let's graph QL more options

00:20:12,540 --> 00:20:15,780
coming out

00:20:13,300 --> 00:20:19,210
basse recently came out really nice

00:20:15,780 --> 00:20:21,220
mr.akash buddy B has a an adapter and a

00:20:19,210 --> 00:20:23,500
pink as what we work on several is

00:20:21,220 --> 00:20:25,390
functions netwo fine now do I even have

00:20:23,500 --> 00:20:27,400
to go into this list there dozens of

00:20:25,390 --> 00:20:29,410
them out there in fact every week or

00:20:27,400 --> 00:20:32,530
every month I see a new provider coming

00:20:29,410 --> 00:20:36,190
out with a abstraction over serverless

00:20:32,530 --> 00:20:37,210
functions now what do I work on the team

00:20:36,190 --> 00:20:39,520
that I work on we're building a

00:20:37,210 --> 00:20:42,430
framework especially for this so we call

00:20:39,520 --> 00:20:43,990
this AWS amplifi has the four things

00:20:42,430 --> 00:20:45,670
that I have listed here we have a

00:20:43,990 --> 00:20:47,830
command line that creates manage

00:20:45,670 --> 00:20:49,930
services we have a client that connects

00:20:47,830 --> 00:20:51,700
to the services we have hosting provider

00:20:49,930 --> 00:20:53,020
for CI and CD and then we have a tool

00:20:51,700 --> 00:20:56,650
chain for doing things like graph QL

00:20:53,020 --> 00:20:58,720
cogent what are some of the things that

00:20:56,650 --> 00:21:01,030
you can do well authentication graph QL

00:20:58,720 --> 00:21:04,390
api's several us functions and api's

00:21:01,030 --> 00:21:05,770
storage AI machine-learning hosting AR

00:21:04,390 --> 00:21:07,150
and vr I have a bunch of stuff not

00:21:05,770 --> 00:21:09,340
listed here but you can go check it out

00:21:07,150 --> 00:21:11,200
on our website we also have framework

00:21:09,340 --> 00:21:12,970
specific components for all of the major

00:21:11,200 --> 00:21:16,540
front-end library's react react native

00:21:12,970 --> 00:21:18,160
View angular ionic and what's my

00:21:16,540 --> 00:21:20,850
favorite thing about what we're working

00:21:18,160 --> 00:21:23,710
on is this graph QL transform library

00:21:20,850 --> 00:21:26,500
and this is essentially an STL over

00:21:23,710 --> 00:21:28,060
regular graph QL schema that allows you

00:21:26,500 --> 00:21:30,040
to decorate your schema and add

00:21:28,060 --> 00:21:31,780
additional features and with these

00:21:30,040 --> 00:21:33,190
features and what ends up happening

00:21:31,780 --> 00:21:36,070
under the hood is we create those

00:21:33,190 --> 00:21:37,450
resolvers for you and then you can then

00:21:36,070 --> 00:21:39,570
modify your resolvers with your own

00:21:37,450 --> 00:21:44,500
business logic so if you need a database

00:21:39,570 --> 00:21:46,810
schema subscriptions resolvers for a

00:21:44,500 --> 00:21:49,630
crud app and you you wanted to make it a

00:21:46,810 --> 00:21:52,900
to-do app instead of writing create read

00:21:49,630 --> 00:21:54,760
update delete to do operations the

00:21:52,900 --> 00:21:56,650
resolvers the database having all that

00:21:54,760 --> 00:21:58,570
created you can just create a to-do type

00:21:56,650 --> 00:22:00,280
decorate it with the add model will

00:21:58,570 --> 00:22:02,860
deploy the database will create all that

00:22:00,280 --> 00:22:05,260
schema you can then just modify that to

00:22:02,860 --> 00:22:06,580
you know work on your app we have all

00:22:05,260 --> 00:22:08,230
these other ones all for adding

00:22:06,580 --> 00:22:09,940
authorization rules connection for

00:22:08,230 --> 00:22:12,520
adding data relationships one-to-many

00:22:09,940 --> 00:22:16,270
many-to-many all this other stuff as

00:22:12,520 --> 00:22:18,400
well so what about a several for the

00:22:16,270 --> 00:22:20,170
server list backends yeah I think this

00:22:18,400 --> 00:22:21,940
is basically the the stuff I kind of

00:22:20,170 --> 00:22:23,740
went over already what you end up with

00:22:21,940 --> 00:22:26,640
when you use the graft well transform

00:22:23,740 --> 00:22:28,650
you have authorization rules on your API

00:22:26,640 --> 00:22:31,380
you end up with your database and all

00:22:28,650 --> 00:22:33,420
this other stuff and to get started with

00:22:31,380 --> 00:22:35,730
this you just run amplify a net amplify

00:22:33,420 --> 00:22:37,920
add off and then you choose graph QL and

00:22:35,730 --> 00:22:40,080
you're kind of ready to go now for the

00:22:37,920 --> 00:22:43,350
demos so what I want to demo first

00:22:40,080 --> 00:22:46,080
is I want to show you can we build a

00:22:43,350 --> 00:22:49,230
confidence app for the reactive conf in

00:22:46,080 --> 00:22:51,780
the next two minutes yeah two minutes

00:22:49,230 --> 00:22:53,370
why not so what I created was confidence

00:22:51,780 --> 00:22:56,360
app in a box and this is an

00:22:53,370 --> 00:22:59,370
implementation of full stack serverless

00:22:56,360 --> 00:23:02,430
what we have here is the react native

00:22:59,370 --> 00:23:07,040
app that you get out of the box once you

00:23:02,430 --> 00:23:10,400
create a new go ahead and see if I can

00:23:07,040 --> 00:23:10,400
refresh this

00:23:23,540 --> 00:23:27,480
all right there we go so conference up

00:23:25,980 --> 00:23:28,800
in the box yeah I created this open

00:23:27,480 --> 00:23:31,350
source project if you want to create a

00:23:28,800 --> 00:23:33,570
conference app you clone it run amplify

00:23:31,350 --> 00:23:35,130
a net and then you can DUP populate the

00:23:33,570 --> 00:23:37,590
database so this is what the boilerplate

00:23:35,130 --> 00:23:40,170
comes out to let's create the app for

00:23:37,590 --> 00:23:45,180
this conference so what I want to do is

00:23:40,170 --> 00:23:48,300
first go ahead and open up some text

00:23:45,180 --> 00:23:55,020
editor and what we're gonna do is I'm

00:23:48,300 --> 00:23:56,400
gonna go ahead and get the information

00:23:55,020 --> 00:23:59,010
that we're going to need for this

00:23:56,400 --> 00:24:01,320
conference so first of all we need to

00:23:59,010 --> 00:24:03,570
get some conference speakers so what I

00:24:01,320 --> 00:24:04,830
want to do is populate the database so

00:24:03,570 --> 00:24:07,740
to do that I'm going to go into the

00:24:04,830 --> 00:24:10,050
amplify console and what we're going to

00:24:07,740 --> 00:24:12,450
do is create a couple of talks so the

00:24:10,050 --> 00:24:22,740
first talk I'm going to create is going

00:24:12,450 --> 00:24:34,200
to be guest this talk and then I'll go

00:24:22,740 --> 00:24:36,360
ahead and create this talk here I think

00:24:34,200 --> 00:24:39,540
two talks is enough let's go ahead and

00:24:36,360 --> 00:24:41,970
refresh all right we see that we have

00:24:39,540 --> 00:24:43,290
our speaker's there populated we can

00:24:41,970 --> 00:24:45,540
drill down we can see the information

00:24:43,290 --> 00:24:46,980
that we populated this with next let's

00:24:45,540 --> 00:24:48,360
go ahead and theme this because this

00:24:46,980 --> 00:24:51,060
doesn't really look like the reactive

00:24:48,360 --> 00:24:55,170
color scheme so what we want to do is

00:24:51,060 --> 00:24:56,910
set a base primary and light primary

00:24:55,170 --> 00:24:58,950
colors so I'm going to go into the theme

00:24:56,910 --> 00:25:02,490
I'll go ahead and update that I'll

00:24:58,950 --> 00:25:06,140
update the highlight color and we're

00:25:02,490 --> 00:25:10,260
going to do is then update the logo over

00:25:06,140 --> 00:25:12,420
yeah okay cool things what we're gonna

00:25:10,260 --> 00:25:15,240
do for the logo is we're going to use

00:25:12,420 --> 00:25:18,690
this reactive logo so let's go ahead and

00:25:15,240 --> 00:25:20,340
refresh that and now we have a reactive

00:25:18,690 --> 00:25:21,750
comp app well that looks very similar

00:25:20,340 --> 00:25:23,150
actually because the color scheme is

00:25:21,750 --> 00:25:25,290
similar but now you see we have green

00:25:23,150 --> 00:25:28,410
let's go ahead and add a comment though

00:25:25,290 --> 00:25:29,880
because maybe we want to troll somebody

00:25:28,410 --> 00:25:32,130
and tell them that their talk is not

00:25:29,880 --> 00:25:35,220
good so what you can do is you can

00:25:32,130 --> 00:25:36,900
create a comment and this will be gone

00:25:35,220 --> 00:25:39,240
well this will be done through graphical

00:25:36,900 --> 00:25:40,830
subscriptions so we'll come through in

00:25:39,240 --> 00:25:49,860
real time so let's go ahead and list

00:25:40,830 --> 00:25:51,320
talks first and we get the talk ID for

00:25:49,860 --> 00:25:54,320
the talk we want to create a comment for

00:25:51,320 --> 00:26:00,390
so now we'll go ahead and get the

00:25:54,320 --> 00:26:07,740
mutation for creating a comments and

00:26:00,390 --> 00:26:13,740
I'll take this talk ID and I'll put it

00:26:07,740 --> 00:26:16,380
here and then you see that the talk came

00:26:13,740 --> 00:26:18,600
in in real time we have our you know

00:26:16,380 --> 00:26:21,330
comments coming through all this was

00:26:18,600 --> 00:26:24,870
deployed within about five minutes using

00:26:21,330 --> 00:26:26,100
the full stack front-end and back-end so

00:26:24,870 --> 00:26:27,720
that's one thing I'm working on the next

00:26:26,100 --> 00:26:30,510
thing I want to show off is something

00:26:27,720 --> 00:26:34,530
I'm that I am releasing today so this is

00:26:30,510 --> 00:26:36,150
the jam stack CMS and I'm gonna go ahead

00:26:34,530 --> 00:26:42,270
and pull my slide deck back up so I can

00:26:36,150 --> 00:26:47,790
kind of give you an overview as you can

00:26:42,270 --> 00:26:53,190
see I speak in a bunch of conferences so

00:26:47,790 --> 00:26:55,860
where were we oh yeah so conference up

00:26:53,190 --> 00:26:57,450
in a box so one last thing I've worked

00:26:55,860 --> 00:26:58,530
with over 30 conferences with that I've

00:26:57,450 --> 00:27:00,000
only been out it's only about for about

00:26:58,530 --> 00:27:01,830
six months I've worked with three

00:27:00,000 --> 00:27:04,230
independent consultants for that that

00:27:01,830 --> 00:27:07,560
have sold their app reskin there for

00:27:04,230 --> 00:27:09,360
$50,000 total and the average hourly

00:27:07,560 --> 00:27:11,010
rate was one thousand and five hundred

00:27:09,360 --> 00:27:12,510
dollars because they all they did was

00:27:11,010 --> 00:27:13,860
like download this app and resell it for

00:27:12,510 --> 00:27:17,550
like fifteen to twenty thousand dollars

00:27:13,860 --> 00:27:19,920
pretty cool so based on the my pricing

00:27:17,550 --> 00:27:21,810
that the 30 conferences that I've worked

00:27:19,920 --> 00:27:23,250
with it's around half a million dollars

00:27:21,810 --> 00:27:24,870
in value that I've got that people have

00:27:23,250 --> 00:27:26,940
gotten from it so far and it's

00:27:24,870 --> 00:27:29,970
completely freed open source and then

00:27:26,940 --> 00:27:34,020
today I'm introducing this the gem stack

00:27:29,970 --> 00:27:37,140
CMS jam stacks CMS is a full-stack CMS

00:27:34,020 --> 00:27:38,790
built with Gatsby on the front end it's

00:27:37,140 --> 00:27:40,710
built with several s technologies on the

00:27:38,790 --> 00:27:42,660
back end and you can deploy to any

00:27:40,710 --> 00:27:45,420
hosting provider net laugh i amplify

00:27:42,660 --> 00:27:47,550
console with a single click using web

00:27:45,420 --> 00:27:48,600
hooks this is kind of an overview of

00:27:47,550 --> 00:27:49,260
what it looks like

00:27:48,600 --> 00:27:51,660
and

00:27:49,260 --> 00:27:56,340
let's go ahead and kind of take a look

00:27:51,660 --> 00:27:58,260
at how it works real quick so this is

00:27:56,340 --> 00:28:01,260
the this is kind of a running version of

00:27:58,260 --> 00:28:03,929
a full stack so CMS thing that I've

00:28:01,260 --> 00:28:05,640
deployed recently this is essentially

00:28:03,929 --> 00:28:06,960
you know my opinion it's like a modern

00:28:05,640 --> 00:28:08,880
version of WordPress because when you

00:28:06,960 --> 00:28:10,620
think of WordPress WordPress has the

00:28:08,880 --> 00:28:12,900
database the authentication the

00:28:10,620 --> 00:28:15,179
front-end the everything all kind of

00:28:12,900 --> 00:28:16,440
bundled into one this is the same thing

00:28:15,179 --> 00:28:19,530
but kind of built with modern

00:28:16,440 --> 00:28:23,100
technologies you can create posts you

00:28:19,530 --> 00:28:25,380
can create pages and the admin panel you

00:28:23,100 --> 00:28:26,880
can kind of see all the posts that

00:28:25,380 --> 00:28:28,980
you've created you can unpublish

00:28:26,880 --> 00:28:32,100
directly from the admin panel you can

00:28:28,980 --> 00:28:34,320
create a new post using the the WYSIWYG

00:28:32,100 --> 00:28:38,220
editor you can actually create new web

00:28:34,320 --> 00:28:39,690
pages as well and once you have you know

00:28:38,220 --> 00:28:42,210
figured out where you want everything to

00:28:39,690 --> 00:28:43,230
go you just go ahead and click Save or

00:28:42,210 --> 00:28:45,210
publish and then we'll go ahead and

00:28:43,230 --> 00:28:47,190
publish there's also a settings where

00:28:45,210 --> 00:28:49,590
you can change the theme that you'd like

00:28:47,190 --> 00:28:52,049
to be working with so maybe we want to

00:28:49,590 --> 00:28:53,730
have this reactive comp theme we can set

00:28:52,049 --> 00:28:55,230
that and then once we're ready to kick

00:28:53,730 --> 00:28:57,540
off a new build we can actually just

00:28:55,230 --> 00:29:00,630
click deploy and this will deploy a new

00:28:57,540 --> 00:29:02,549
version of our app into our hosting

00:29:00,630 --> 00:29:05,070
provider and for me I'm using amplify

00:29:02,549 --> 00:29:10,010
console so if I go here look at Jam SEC

00:29:05,070 --> 00:29:14,910
CMS I'll give this a second I come back

00:29:10,010 --> 00:29:17,070
and it's still not building yet there we

00:29:14,910 --> 00:29:19,049
go so now we see that we've kicked off a

00:29:17,070 --> 00:29:22,080
new build we did that directly from the

00:29:19,049 --> 00:29:23,640
front end the the thing that's happening

00:29:22,080 --> 00:29:26,250
is we're building and deploying those

00:29:23,640 --> 00:29:27,630
static assets so when people access this

00:29:26,250 --> 00:29:29,880
site and they're not an admin they just

00:29:27,630 --> 00:29:32,520
see the blog okay so that's it I'm sure

00:29:29,880 --> 00:29:34,350
I'm a little bit over on time we'll go

00:29:32,520 --> 00:29:36,360
ahead and wrap this up if you want to

00:29:34,350 --> 00:29:38,760
follow Jam stack CMS oh you know what I

00:29:36,360 --> 00:29:40,080
said I was going to release this lava

00:29:38,760 --> 00:29:46,559
land stage let's go ahead and do that so

00:29:40,080 --> 00:29:50,210
my go to settings and my github repo jam

00:29:46,559 --> 00:29:50,210
stack CMS make public

00:29:52,989 --> 00:29:59,929
first time I've ever done that so go if

00:29:57,499 --> 00:30:02,269
you if you're watching this go star this

00:29:59,929 --> 00:30:04,969
and and like brag about it and all that

00:30:02,269 --> 00:30:06,769
stuff until all your friends okay cool

00:30:04,969 --> 00:30:09,320
yeah so thank you for listening to my

00:30:06,769 --> 00:30:12,100
talk I'm gonna skip my last few slides

00:30:09,320 --> 00:30:15,720
but thank you for listening my talk

00:30:12,100 --> 00:30:20,559
[Applause]

00:30:15,720 --> 00:30:20,559

YouTube URL: https://www.youtube.com/watch?v=BodZo4rvy18


