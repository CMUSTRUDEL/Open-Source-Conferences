Title: ReactiveConf 2019 - Liran Tal: StrangerDanger: Finding Security Vulnerabilities Before They Find You
Publication date: 2019-10-31
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
Open-source modules on the NPM ecosystem are undoubtedly awesome. However, they also represent an undeniable and massive risk. You’re introducing someone else’s code into your system, often with little or no scrutiny. The wrong package can introduce severe vulnerabilities into your application, exposing your application and your user’s data. This talk will use a sample application, Goof, which uses various vulnerable dependencies, which we will exploit as an attacker would. For each issue, we’ll explain why it happened, show its impact, and – most importantly – see how to avoid or fix it.

I believe the Stranger Danger talk would fit really well on the Security track, and I can add more of my own input and flavor to it from my workaround open source security with the work I’m doing in the Node.js Security WG too.

With all, that’s been happening in the security field and that has been affecting javascript developers, whether they are on the frontend or backend, I believe the security talk would be awesome as it includes a lot of live hacking too.
Captions: 
	00:00:02,720 --> 00:00:11,850
[Music]

00:00:15,900 --> 00:00:20,590
right so let's talk about open source

00:00:18,910 --> 00:00:22,180
security today and you know how we can

00:00:20,590 --> 00:00:24,910
find security vulnerabilities before

00:00:22,180 --> 00:00:30,550
they find you are the short introduction

00:00:24,910 --> 00:00:33,160
for myself oh look at that there we go

00:00:30,550 --> 00:00:34,720
so my name is Ron I'm a developer

00:00:33,160 --> 00:00:36,430
advocate at sneaked where we build

00:00:34,720 --> 00:00:38,110
developer friendly security tooling to

00:00:36,430 --> 00:00:39,760
help developers find and fix security

00:00:38,110 --> 00:00:40,960
issues you know when they use open

00:00:39,760 --> 00:00:43,600
source to build their software

00:00:40,960 --> 00:00:45,729
their products also involved in a range

00:00:43,600 --> 00:00:48,670
of other activities related to node and

00:00:45,729 --> 00:00:50,379
security so one of those is being part

00:00:48,670 --> 00:00:52,629
of the node security working group

00:00:50,379 --> 00:00:54,580
trying to help the ecosystem the NPM

00:00:52,629 --> 00:00:56,199
ecosystem and node as a whole to be more

00:00:54,580 --> 00:00:58,000
secure if you want to get involved in

00:00:56,199 --> 00:00:59,530
any of these just ping me on Twitter or

00:00:58,000 --> 00:01:01,540
you know shoot me an email catch me

00:00:59,530 --> 00:01:04,600
after this talk I'll be happy to guide

00:01:01,540 --> 00:01:07,510
you in and tell you more about it so I

00:01:04,600 --> 00:01:09,040
think today kind of open source has been

00:01:07,510 --> 00:01:11,500
you know booming and you know it's been

00:01:09,040 --> 00:01:13,420
everywhere and the impact that it has as

00:01:11,500 --> 00:01:14,920
open source software taking over the

00:01:13,420 --> 00:01:17,109
world you know the impact it had on

00:01:14,920 --> 00:01:19,390
modern software development is you know

00:01:17,109 --> 00:01:21,100
enormous and I think we're also seeing

00:01:19,390 --> 00:01:22,960
that you know this as a testament of

00:01:21,100 --> 00:01:25,030
that you know the whole rise and

00:01:22,960 --> 00:01:26,920
increase of software packages so this

00:01:25,030 --> 00:01:28,270
has been now make no mistakes and p.m.

00:01:26,920 --> 00:01:30,969
is probably the largest open source

00:01:28,270 --> 00:01:33,189
registry for for open source packages

00:01:30,969 --> 00:01:35,289
but make no mistakes in terms of this is

00:01:33,189 --> 00:01:36,909
also impacting you know Java Ruby NuGet

00:01:35,289 --> 00:01:38,590
everything you know is just booming and

00:01:36,909 --> 00:01:40,960
this is you know amazing that we have

00:01:38,590 --> 00:01:46,229
all of this you know just last year in

00:01:40,960 --> 00:01:49,960
2018 NPM added you know more than 2,200

00:01:46,229 --> 00:01:53,710
20050 sorry to 50k packages to the

00:01:49,960 --> 00:01:55,869
registry now around June earlier this

00:01:53,710 --> 00:01:58,179
year more than 1 million packages have

00:01:55,869 --> 00:02:00,850
made it you know into this open source

00:01:58,179 --> 00:02:02,259
package open source registry on NPM so

00:02:00,850 --> 00:02:03,670
we're seeing this you know going on and

00:02:02,259 --> 00:02:05,020
on and you know probably don't need to

00:02:03,670 --> 00:02:07,119
stand here and tell you datas we're all

00:02:05,020 --> 00:02:09,990
kind of you know waiting for NPM install

00:02:07,119 --> 00:02:12,490
to finish while we do day to day coding

00:02:09,990 --> 00:02:14,230
but you know as we're using open source

00:02:12,490 --> 00:02:15,700
a lot you know how the question on you

00:02:14,230 --> 00:02:17,260
know which kind of dependencies which

00:02:15,700 --> 00:02:19,750
kind of software libraries that we're

00:02:17,260 --> 00:02:21,310
using is it's very important you know

00:02:19,750 --> 00:02:22,599
how much do we know about them how much

00:02:21,310 --> 00:02:24,819
do we know about the package that we're

00:02:22,599 --> 00:02:25,330
adding it's security practices you know

00:02:24,819 --> 00:02:27,220
whoever

00:02:25,330 --> 00:02:29,290
wrote it do they have any security

00:02:27,220 --> 00:02:31,630
knowledge you know when they coded it

00:02:29,290 --> 00:02:33,880
what kind of indirect dependencies does

00:02:31,630 --> 00:02:35,650
this package brings in and you know

00:02:33,880 --> 00:02:37,990
those maintainer and what have they have

00:02:35,650 --> 00:02:40,150
done in terms of you know checking for

00:02:37,990 --> 00:02:41,110
security issues in your code bases and

00:02:40,150 --> 00:02:42,640
that's a lot you know checking for

00:02:41,110 --> 00:02:44,380
security is a whole mouth is a mouthful

00:02:42,640 --> 00:02:46,060
thing in terms of it could be secure

00:02:44,380 --> 00:02:48,490
coding reviews and so many other things

00:02:46,060 --> 00:02:50,440
as well so I've been reading a lot of

00:02:48,490 --> 00:02:51,940
those you know academic research papers

00:02:50,440 --> 00:02:53,890
this is one of them that had been

00:02:51,940 --> 00:02:56,680
recently you know just last just this

00:02:53,890 --> 00:02:58,210
year published really interesting kind

00:02:56,680 --> 00:03:01,120
of tries to take on the behavior and

00:02:58,210 --> 00:03:03,610
characteristics of software language

00:03:01,120 --> 00:03:05,500
based software registries so it actually

00:03:03,610 --> 00:03:07,330
compared NPM and pie-pie which is the

00:03:05,500 --> 00:03:09,100
Python package registry in terms in

00:03:07,330 --> 00:03:11,860
terms of you know different things that

00:03:09,100 --> 00:03:13,360
you know might be important to figure

00:03:11,860 --> 00:03:18,310
out you know one of the findings that it

00:03:13,360 --> 00:03:20,230
had is it found you know that 61% of the

00:03:18,310 --> 00:03:23,290
packages on NPM could be considered

00:03:20,230 --> 00:03:24,850
abandoned now granted abandon these kind

00:03:23,290 --> 00:03:26,709
of loose terms in terms of you know we

00:03:24,850 --> 00:03:29,020
can probably you know if we got around

00:03:26,709 --> 00:03:30,880
we can probably interpret that in a

00:03:29,020 --> 00:03:33,370
different way for the sake of the study

00:03:30,880 --> 00:03:36,040
you know they decided that abandoned

00:03:33,370 --> 00:03:37,900
packages would be those that have not

00:03:36,040 --> 00:03:40,510
had a release for the last twelve months

00:03:37,900 --> 00:03:41,769
so no committee or publishing an actual

00:03:40,510 --> 00:03:43,870
release in the last year would be

00:03:41,769 --> 00:03:45,370
considered abandoned and again this

00:03:43,870 --> 00:03:47,800
could be counter-argument in terms of

00:03:45,370 --> 00:03:49,780
maybe the package just had to be reached

00:03:47,800 --> 00:03:52,570
maturity you know has happened we'd open

00:03:49,780 --> 00:03:54,430
source as well except you know just last

00:03:52,570 --> 00:03:56,620
year we had the case of events from the

00:03:54,430 --> 00:03:59,260
events from incident in November 2018

00:03:56,620 --> 00:04:01,420
had actually proved that you know we are

00:03:59,260 --> 00:04:02,500
not that secure in the ecosystem it's

00:04:01,420 --> 00:04:04,510
probably one of the most sophisticated

00:04:02,500 --> 00:04:07,019
attacks in my opinion that we've seen

00:04:04,510 --> 00:04:09,310
happening on NPM there's a whole

00:04:07,019 --> 00:04:10,480
plethora of chain of events that

00:04:09,310 --> 00:04:12,850
happened you know you can read all about

00:04:10,480 --> 00:04:15,310
that later but generally speaking

00:04:12,850 --> 00:04:18,010
someone was able to socially engineer

00:04:15,310 --> 00:04:19,979
their way into event stream which is

00:04:18,010 --> 00:04:22,660
usually used as an indirect package

00:04:19,979 --> 00:04:23,440
existed on the registry for eight years

00:04:22,660 --> 00:04:25,270
at that point

00:04:23,440 --> 00:04:26,710
so definitely mature did not have a

00:04:25,270 --> 00:04:28,990
release in the last two or three years

00:04:26,710 --> 00:04:31,510
so I'd reached this kind of abandoned

00:04:28,990 --> 00:04:33,520
package state but someone still was able

00:04:31,510 --> 00:04:34,110
to gain publish access and in inject

00:04:33,520 --> 00:04:36,700
malicious

00:04:34,110 --> 00:04:38,420
package that they had control of you

00:04:36,700 --> 00:04:40,700
know gain the whole lot of

00:04:38,420 --> 00:04:42,950
access permissions to the package itself

00:04:40,700 --> 00:04:45,170
for the project itself so I will not go

00:04:42,950 --> 00:04:47,210
into this Chris laksana Donna an

00:04:45,170 --> 00:04:49,460
interesting talk on this as well earlier

00:04:47,210 --> 00:04:52,760
and you can find all of that after this

00:04:49,460 --> 00:04:54,980
but that is one example and another

00:04:52,760 --> 00:04:58,250
interesting insight that that study had

00:04:54,980 --> 00:05:00,650
proven is it had shown that when we

00:04:58,250 --> 00:05:03,410
install an NPM package on average we

00:05:00,650 --> 00:05:05,870
would pull in four levels deep of NPM

00:05:03,410 --> 00:05:07,190
dependencies that's already like a bit

00:05:05,870 --> 00:05:08,540
you know frightening and you know

00:05:07,190 --> 00:05:10,190
alarming in terms of we need to

00:05:08,540 --> 00:05:11,900
understand exactly what we're pulling in

00:05:10,190 --> 00:05:13,550
because if we're average I'm bringing in

00:05:11,900 --> 00:05:15,230
you know four levels dips of dependency

00:05:13,550 --> 00:05:19,100
it's not enough to just understand that

00:05:15,230 --> 00:05:22,070
direct package that I'm adding in so

00:05:19,100 --> 00:05:24,920
let's do a mental exercise we usually

00:05:22,070 --> 00:05:26,480
have this you know mental picture of the

00:05:24,920 --> 00:05:28,970
software that right you know the code

00:05:26,480 --> 00:05:30,590
that were writing the the the product

00:05:28,970 --> 00:05:31,850
that you're building and shipping out it

00:05:30,590 --> 00:05:32,960
looks kind of like this right this is

00:05:31,850 --> 00:05:34,370
the application you're building this

00:05:32,960 --> 00:05:35,540
whole thing you're thinking about it as

00:05:34,370 --> 00:05:39,560
a wholesome thing that you would be

00:05:35,540 --> 00:05:42,710
pushing as your end product except the

00:05:39,560 --> 00:05:44,330
reality however is it's very different

00:05:42,710 --> 00:05:47,150
the code that we actually write is

00:05:44,330 --> 00:05:49,490
usually around you know less than 10% of

00:05:47,150 --> 00:05:50,360
what we're using and deploying out so

00:05:49,490 --> 00:05:51,860
we're using a lot of open-source

00:05:50,360 --> 00:05:53,870
software which is amazing it's a great

00:05:51,860 --> 00:05:55,880
productivity boost but at the same time

00:05:53,870 --> 00:05:57,590
need to be a word that we are actually

00:05:55,880 --> 00:06:01,280
shipping a lot of other people's codes

00:05:57,590 --> 00:06:03,710
right strangers codes and I think that

00:06:01,280 --> 00:06:05,240
probably it is going to be word to code

00:06:03,710 --> 00:06:06,980
you know to write to build products

00:06:05,240 --> 00:06:09,980
without open source software so that has

00:06:06,980 --> 00:06:11,540
already made it the default and it is

00:06:09,980 --> 00:06:12,950
interesting to see how that really

00:06:11,540 --> 00:06:15,800
shapes so at stake we have a lot of

00:06:12,950 --> 00:06:17,480
access to you know user data which we

00:06:15,800 --> 00:06:19,160
actually track just your package JSON

00:06:17,480 --> 00:06:20,090
your package manifest or lock files to

00:06:19,160 --> 00:06:22,220
figure out where you have security

00:06:20,090 --> 00:06:24,440
vulnerabilities an interesting insight

00:06:22,220 --> 00:06:27,200
is that 78% of the vulnerabilities that

00:06:24,440 --> 00:06:29,720
we will find actually happen on indirect

00:06:27,200 --> 00:06:31,430
dependencies so it is amazing if you are

00:06:29,720 --> 00:06:33,350
very conscious you know as a developer

00:06:31,430 --> 00:06:35,840
and you're tracking change logs and

00:06:33,350 --> 00:06:37,670
security advisories for like angular or

00:06:35,840 --> 00:06:39,080
react or Express or FASTA fire whatever

00:06:37,670 --> 00:06:42,050
you want it's amazing

00:06:39,080 --> 00:06:43,820
but 78% of the vulnerabilities of their

00:06:42,050 --> 00:06:45,590
own vulnerabilities that we'll find in

00:06:43,820 --> 00:06:47,480
your project they will happen on those

00:06:45,590 --> 00:06:50,450
in direct dependencies being pulled in

00:06:47,480 --> 00:06:52,310
by those you know usually I want to say

00:06:50,450 --> 00:06:54,230
few but it's JavaScript so maybe a 10

00:06:52,310 --> 00:06:57,650
those are 20 of those direct dependences

00:06:54,230 --> 00:06:59,990
and you know what can go wrong with an

00:06:57,650 --> 00:07:01,820
indirect dependency right just having

00:06:59,990 --> 00:07:04,970
that on on on installed on your machine

00:07:01,820 --> 00:07:06,200
so there's there's a couple of thoughts

00:07:04,970 --> 00:07:08,150
that have been here today and you know

00:07:06,200 --> 00:07:10,420
I've actually done a whole talk on all

00:07:08,150 --> 00:07:12,530
those other cases that could happen with

00:07:10,420 --> 00:07:15,230
indirect dependencies or you know just

00:07:12,530 --> 00:07:17,840
general malicious packages that exist so

00:07:15,230 --> 00:07:19,130
there is this whole timeline here and I

00:07:17,840 --> 00:07:24,140
want to focus just on something called

00:07:19,130 --> 00:07:26,300
get cookies get cookies is as its name

00:07:24,140 --> 00:07:28,130
pretty much implies a library to help

00:07:26,300 --> 00:07:32,510
you manage cookie data you know parse it

00:07:28,130 --> 00:07:34,730
manage it in several ways or does it so

00:07:32,510 --> 00:07:37,280
in fact it is actually nothing less than

00:07:34,730 --> 00:07:39,680
a command and control infrastructure

00:07:37,280 --> 00:07:43,100
that allows remote attackers to execute

00:07:39,680 --> 00:07:45,500
JavaScript code on your machine it does

00:07:43,100 --> 00:07:47,690
this by injecting these 40 lines of code

00:07:45,500 --> 00:07:49,370
and I've actually given you like just

00:07:47,690 --> 00:07:51,680
the primary 20 lines of code or that

00:07:49,370 --> 00:07:53,600
when you install it it adds all of that

00:07:51,680 --> 00:07:58,040
and as you can see there's like a whole

00:07:53,600 --> 00:08:00,670
switch case with just three cases reset

00:07:58,040 --> 00:08:03,860
the buffer load data into the buffer

00:08:00,670 --> 00:08:05,360
execute a buffer so just by having this

00:08:03,860 --> 00:08:07,490
installed and using this in a web

00:08:05,360 --> 00:08:09,620
application like Express or something

00:08:07,490 --> 00:08:11,570
like that you would give someone else

00:08:09,620 --> 00:08:14,030
the ability to inject JavaScript code

00:08:11,570 --> 00:08:18,140
entry into your application and very

00:08:14,030 --> 00:08:20,780
easily as well through HTTP headers so

00:08:18,140 --> 00:08:24,170
to do all of that get cookies did not

00:08:20,780 --> 00:08:25,970
exist by itself the malicious attacker

00:08:24,170 --> 00:08:28,760
behind this actually created this whole

00:08:25,970 --> 00:08:31,070
pyramid of dependencies all of which are

00:08:28,760 --> 00:08:33,310
make no mistakes part of this malicious

00:08:31,070 --> 00:08:37,490
scheme to hide get cookies inside them

00:08:33,310 --> 00:08:39,590
but still three packages on NPM with a

00:08:37,490 --> 00:08:41,390
million packages existing as well you

00:08:39,590 --> 00:08:43,520
know nobody would know about it so we

00:08:41,390 --> 00:08:46,510
need to have a vessel to transform all

00:08:43,520 --> 00:08:50,300
of these things so mail parts are a very

00:08:46,510 --> 00:08:53,180
very popular package for a mail parsing

00:08:50,300 --> 00:08:55,760
for NPM had actually been compromised at

00:08:53,180 --> 00:08:59,300
one point to include as a dependency

00:08:55,760 --> 00:09:00,740
this kind of tree from well parse the

00:08:59,300 --> 00:09:03,820
gain is about half a million downloads a

00:09:00,740 --> 00:09:06,520
month so this is actually pretty

00:09:03,820 --> 00:09:08,690
impactful

00:09:06,520 --> 00:09:10,220
so vulnerabilities happen all the time

00:09:08,690 --> 00:09:13,130
right these are just examples of them

00:09:10,220 --> 00:09:17,510
and Sequoia is probably a well-known and

00:09:13,130 --> 00:09:19,130
popular over em for SQL rm4 for node has

00:09:17,510 --> 00:09:20,450
actually had a lot of SQL injection so

00:09:19,130 --> 00:09:22,910
while you're thinking you're using you

00:09:20,450 --> 00:09:25,580
know RMS as you know part of it is also

00:09:22,910 --> 00:09:27,470
to mitigate SQL injection attacks it had

00:09:25,580 --> 00:09:29,660
actually had a couple of those happening

00:09:27,470 --> 00:09:33,140
just recently the recent one I think is

00:09:29,660 --> 00:09:35,420
from August 2019 unless there was

00:09:33,140 --> 00:09:37,760
something else that was happening in the

00:09:35,420 --> 00:09:39,410
last two months but still like this is

00:09:37,760 --> 00:09:40,790
something that the sting security team

00:09:39,410 --> 00:09:42,860
found out worked in responsible

00:09:40,790 --> 00:09:45,290
disclosure with the maintainer and you

00:09:42,860 --> 00:09:47,930
know managed out of fix of course if no

00:09:45,290 --> 00:09:49,730
one would be checking for for

00:09:47,930 --> 00:09:51,410
dependencies and vulnerabilities that

00:09:49,730 --> 00:09:52,820
you have inside them you would miss all

00:09:51,410 --> 00:09:54,440
of these things so all these kind of

00:09:52,820 --> 00:09:56,500
secure injections that happen that are

00:09:54,440 --> 00:09:58,820
happening now I'm talking a lot about

00:09:56,500 --> 00:10:00,830
dependency vulnerabilities and I'm sure

00:09:58,820 --> 00:10:03,140
a lot of you're just wondering how does

00:10:00,830 --> 00:10:04,460
it how does my application you know the

00:10:03,140 --> 00:10:06,920
thing that I'm building on a front-end

00:10:04,460 --> 00:10:08,570
or in a back-end is impacted by a

00:10:06,920 --> 00:10:10,990
dependency that I'm using because I'm

00:10:08,570 --> 00:10:13,250
not always using the same things and

00:10:10,990 --> 00:10:15,350
maybe I'm not using the same vulnerable

00:10:13,250 --> 00:10:17,600
function maybe that path has not been

00:10:15,350 --> 00:10:21,740
taken so maybe it's not that bad to

00:10:17,600 --> 00:10:28,790
worry about vulnerabilities so let's

00:10:21,740 --> 00:10:31,730
move on to some hands-on stuff so I've

00:10:28,790 --> 00:10:34,640
got this up here all in Crystal you can

00:10:31,730 --> 00:10:37,250
see it as well it's a general to do up

00:10:34,640 --> 00:10:39,440
it's built with node it has no view it

00:10:37,250 --> 00:10:40,520
has no angular it has no react it is a

00:10:39,440 --> 00:10:42,920
very simple vanilla JavaScript

00:10:40,520 --> 00:10:47,440
application and it has these to-do lists

00:10:42,920 --> 00:10:49,580
like I can add a lot of things into it

00:10:47,440 --> 00:10:52,190
one of the things that I can do as well

00:10:49,580 --> 00:10:55,580
is use markdown so to use markdown I can

00:10:52,190 --> 00:10:57,260
use a package called marked it is pretty

00:10:55,580 --> 00:10:58,340
popular I'm pretty sure some of you if

00:10:57,260 --> 00:10:59,750
you've done work town you've heard about

00:10:58,340 --> 00:11:02,570
it or at least considered it as an

00:10:59,750 --> 00:11:05,570
option Marty's downloaded a couple of

00:11:02,570 --> 00:11:09,650
million times a month I scan my app I

00:11:05,570 --> 00:11:11,930
see that marked has a couple of owner

00:11:09,650 --> 00:11:13,660
abilities more than a couple one of

00:11:11,930 --> 00:11:16,070
which is a cross-site scripting

00:11:13,660 --> 00:11:19,160
vulnerability how does that happen in an

00:11:16,070 --> 00:11:20,510
app how does how is Mark actually

00:11:19,160 --> 00:11:22,940
introducing this vulnerability to this

00:11:20,510 --> 00:11:30,770
application so as I'm doing Morgan I can

00:11:22,940 --> 00:11:35,390
do things like hope I'm getting that

00:11:30,770 --> 00:11:38,660
well like this which is a valid link in

00:11:35,390 --> 00:11:41,570
markdown but then again as I'm you know

00:11:38,660 --> 00:11:43,160
pushing this hat on myself with the

00:11:41,570 --> 00:11:50,260
security minded person maybe I would go

00:11:43,160 --> 00:11:53,270
and try some other things like like this

00:11:50,260 --> 00:11:57,470
this doesn't work because marked has a

00:11:53,270 --> 00:12:04,190
way to sanitize strings so if we pull in

00:11:57,470 --> 00:12:05,660
our app code considered I'm using mark

00:12:04,190 --> 00:12:08,210
you can see that it's part of my app and

00:12:05,660 --> 00:12:10,910
I'm actually needing to opt in to

00:12:08,210 --> 00:12:14,510
security by saying sanitized true which

00:12:10,910 --> 00:12:16,490
is weird by itself in terms of I need to

00:12:14,510 --> 00:12:18,530
be you know to have this knowledge of

00:12:16,490 --> 00:12:20,450
security to be security minded person or

00:12:18,530 --> 00:12:22,820
you know read through the readme enough

00:12:20,450 --> 00:12:25,130
to find this disclaimer that says that

00:12:22,820 --> 00:12:27,200
you know if I do not add this my app is

00:12:25,130 --> 00:12:29,540
already vulnerable by default to XSS so

00:12:27,200 --> 00:12:32,180
I added this and that's why you know

00:12:29,540 --> 00:12:35,240
this has been sanitized and if I wanted

00:12:32,180 --> 00:12:36,680
to go ahead and try to work around it

00:12:35,240 --> 00:12:39,950
maybe I could do some other things like

00:12:36,680 --> 00:12:43,960
maybe I could go ahead and implant see

00:12:39,950 --> 00:12:47,390
how sanitization works with marked and

00:12:43,960 --> 00:12:48,650
which might work around so one of the

00:12:47,390 --> 00:12:49,700
things that we can do and I can tell you

00:12:48,650 --> 00:12:51,170
in advance we don't need to go into

00:12:49,700 --> 00:12:53,990
market source code it's open source

00:12:51,170 --> 00:12:55,430
everyone can see it but I can go in and

00:12:53,990 --> 00:12:57,440
see that marked actually looking for

00:12:55,430 --> 00:12:58,760
these kind of strings and tries to you

00:12:57,440 --> 00:13:00,350
know if it will if it looks like this

00:12:58,760 --> 00:13:01,580
it's probably malicious it will strip it

00:13:00,350 --> 00:13:04,130
out and that's why it kind of breaks

00:13:01,580 --> 00:13:05,660
like that I can go ahead and change :

00:13:04,130 --> 00:13:07,520
with something that's called an HTML

00:13:05,660 --> 00:13:09,710
entity so the browser will go ahead and

00:13:07,520 --> 00:13:13,340
change that into a colon afterwards so I

00:13:09,710 --> 00:13:19,370
can do something like this I can change

00:13:13,340 --> 00:13:21,520
this as well and interestingly enough it

00:13:19,370 --> 00:13:23,960
breaks differently this time

00:13:21,520 --> 00:13:25,790
so still the trouble of going into the

00:13:23,960 --> 00:13:26,900
mark source code and seeing at this

00:13:25,790 --> 00:13:29,600
version of marked how it actually

00:13:26,900 --> 00:13:31,880
handles stripping of malicious data but

00:13:29,600 --> 00:13:33,080
I can tell you that it's actually

00:13:31,880 --> 00:13:34,940
looking for that so the maintainer

00:13:33,080 --> 00:13:36,140
cliff has been very conscious enough in

00:13:34,940 --> 00:13:37,760
terms of understanding all these

00:13:36,140 --> 00:13:40,520
different attack vectors that may happen

00:13:37,760 --> 00:13:42,110
in applications and it has a simple

00:13:40,520 --> 00:13:44,330
regex right it's trying to look if this

00:13:42,110 --> 00:13:46,730
is a regex Aria if this is a pattern

00:13:44,330 --> 00:13:48,490
like an HTML entity that would be

00:13:46,730 --> 00:13:50,420
inserted and of course strips it out

00:13:48,490 --> 00:13:53,450
except something interesting is

00:13:50,420 --> 00:13:56,300
happening which is the way that browser

00:13:53,450 --> 00:13:58,760
works and that interoperability with how

00:13:56,300 --> 00:14:00,770
marked is actually doing the stuff so if

00:13:58,760 --> 00:14:04,640
I would go in and add a valid JavaScript

00:14:00,770 --> 00:14:07,160
keyword like literally the word this bit

00:14:04,640 --> 00:14:10,670
confusing JavaScript I know or I could

00:14:07,160 --> 00:14:14,960
just add something like document as well

00:14:10,670 --> 00:14:17,720
volley javascript keyword - I would go

00:14:14,960 --> 00:14:19,910
ahead and introduce an XSS into my

00:14:17,720 --> 00:14:21,950
application so things that you know

00:14:19,910 --> 00:14:23,990
maybe QA teams maybe developers we will

00:14:21,950 --> 00:14:25,490
miss but those vulnerabilities actually

00:14:23,990 --> 00:14:27,680
lurk in those code bases of those

00:14:25,490 --> 00:14:30,020
indirect dependencies and this is

00:14:27,680 --> 00:14:35,680
happening because when I'm doing

00:14:30,020 --> 00:14:38,120
something like that this passes marked

00:14:35,680 --> 00:14:40,610
regex else because this is not the

00:14:38,120 --> 00:14:43,940
string that it's trying to find so this

00:14:40,610 --> 00:14:45,260
is okay but the browser at this point it

00:14:43,940 --> 00:14:48,950
understand yet something is happening

00:14:45,260 --> 00:14:51,410
here and maybe someone wanted actually

00:14:48,950 --> 00:14:54,440
to finish that HTML entity as a

00:14:51,410 --> 00:14:56,540
semicolon or so to say and the rest of

00:14:54,440 --> 00:14:58,970
the up the rest of the statement is just

00:14:56,540 --> 00:15:00,650
for the JavaScript getting executed this

00:14:58,970 --> 00:15:03,770
is marked getting downloaded millions

00:15:00,650 --> 00:15:05,690
times of month a month and or a week and

00:15:03,770 --> 00:15:06,800
if you're not doing anything to mitigate

00:15:05,690 --> 00:15:09,590
against those vulnerabilities do you

00:15:06,800 --> 00:15:14,720
just work in let's take a let's take a

00:15:09,590 --> 00:15:18,460
look at something else I have this about

00:15:14,720 --> 00:15:22,670
page here as well not this one

00:15:18,460 --> 00:15:25,460
this one just showing you and about

00:15:22,670 --> 00:15:29,990
information nothing really complicated I

00:15:25,460 --> 00:15:33,940
am using that's Jas to do it it's a

00:15:29,990 --> 00:15:36,560
library from LinkedIn to do template

00:15:33,940 --> 00:15:38,630
templating on the server-side so for

00:15:36,560 --> 00:15:40,190
node.js applications it has this if

00:15:38,630 --> 00:15:42,070
condition were if I'm adding a device

00:15:40,190 --> 00:15:44,420
which is the desktop it will make it

00:15:42,070 --> 00:15:46,579
medium sized and if not it will make it

00:15:44,420 --> 00:15:50,389
big as in the fonts here so

00:15:46,579 --> 00:15:53,119
can go in and add this query parameter

00:15:50,389 --> 00:15:54,860
you know if it's desktop if it's mobile

00:15:53,119 --> 00:16:01,850
it's going to present it a bit

00:15:54,860 --> 00:16:04,670
differently there we go so it looks like

00:16:01,850 --> 00:16:06,139
it's functioning just well except that

00:16:04,670 --> 00:16:08,600
has a vulnerability as well in the way

00:16:06,139 --> 00:16:11,540
that it works so let's go ahead and take

00:16:08,600 --> 00:16:19,480
that into a command line up to see how

00:16:11,540 --> 00:16:19,480
this actually shows us a vulnerability

00:16:20,110 --> 00:16:25,399
so justr will create what we've done in

00:16:22,489 --> 00:16:36,589
the browser go go ahead and do it like

00:16:25,399 --> 00:16:39,379
that we're gonna run a request you can

00:16:36,589 --> 00:16:41,059
see that it had worked just fine there's

00:16:39,379 --> 00:16:44,959
some debug information everything is

00:16:41,059 --> 00:16:47,119
returning as we expect except there's a

00:16:44,959 --> 00:16:48,679
code injection in dust and the way that

00:16:47,119 --> 00:16:51,860
it manifests is actually pretty

00:16:48,679 --> 00:16:55,129
interesting it is again using another

00:16:51,860 --> 00:16:57,410
different kind of vector to go ahead and

00:16:55,129 --> 00:17:00,290
and introduce some strings that we may

00:16:57,410 --> 00:17:02,869
not be handling correctly so that's by

00:17:00,290 --> 00:17:08,059
itself is actually pretty secure in

00:17:02,869 --> 00:17:10,269
terms of it has this escape HTML

00:17:08,059 --> 00:17:10,269
function

00:17:15,290 --> 00:17:19,400
that would go ahead and try to see if

00:17:17,510 --> 00:17:21,470
something is a string and then if it is

00:17:19,400 --> 00:17:24,020
it will test it for specific characters

00:17:21,470 --> 00:17:27,020
that it has and if it is you know trying

00:17:24,020 --> 00:17:28,669
someone is trying to like close it with

00:17:27,020 --> 00:17:31,010
a with a single quote with a double

00:17:28,669 --> 00:17:32,660
quote kind of escape statement then some

00:17:31,010 --> 00:17:34,340
fit then it will go ahead and try to you

00:17:32,660 --> 00:17:36,320
know replace it with our identity ml and

00:17:34,340 --> 00:17:39,169
it is so it will be safe in the correct

00:17:36,320 --> 00:17:40,910
context the problem with this code is

00:17:39,169 --> 00:17:43,610
that it's only handling something if

00:17:40,910 --> 00:17:46,760
it's a string how could we introduce a

00:17:43,610 --> 00:17:48,710
string into something that is you know

00:17:46,760 --> 00:17:52,190
not a string that would not go through

00:17:48,710 --> 00:17:54,830
this whole path of of sanitization that

00:17:52,190 --> 00:17:59,870
happens here this has to do something

00:17:54,830 --> 00:18:02,240
with with how dust works as well as HTTP

00:17:59,870 --> 00:18:05,090
works so I could go ahead and provide

00:18:02,240 --> 00:18:07,790
maybe an array I could go ahead and add

00:18:05,090 --> 00:18:10,520
something like that double brackets or I

00:18:07,790 --> 00:18:12,080
can the device equals something and

00:18:10,520 --> 00:18:13,790
device akuel something again and this

00:18:12,080 --> 00:18:15,350
would be interpreted as a string as an

00:18:13,790 --> 00:18:17,720
array when it comes to my node of web

00:18:15,350 --> 00:18:19,820
application so if we try to replicate

00:18:17,720 --> 00:18:25,929
the same thing it will look something

00:18:19,820 --> 00:18:31,400
like that now mobile is to escape those

00:18:25,929 --> 00:18:34,580
so now mobile on the writer is an array

00:18:31,400 --> 00:18:36,559
it is array of strings that comes in and

00:18:34,580 --> 00:18:39,100
this does not go into net sanitization

00:18:36,559 --> 00:18:40,970
that we've seen it will escape HTML

00:18:39,100 --> 00:18:44,960
something interesting else that we

00:18:40,970 --> 00:18:46,880
should probably understand is that has

00:18:44,960 --> 00:18:48,470
these helpers as we've seen before with

00:18:46,880 --> 00:18:50,540
the template itself which has a

00:18:48,470 --> 00:18:51,860
condition if the condition of device

00:18:50,540 --> 00:18:54,049
equals mobile desktop it will do

00:18:51,860 --> 00:18:57,620
something so here these conditions are

00:18:54,049 --> 00:18:59,660
being evaluated right on the server side

00:18:57,620 --> 00:19:03,830
with evil which is generally how

00:18:59,660 --> 00:19:05,360
template engine might work and if you

00:19:03,830 --> 00:19:06,559
remember it looks something like this so

00:19:05,360 --> 00:19:07,850
this is the if condition that makes

00:19:06,559 --> 00:19:12,230
things possible this is how you do

00:19:07,850 --> 00:19:14,929
conditional statements and logic as a

00:19:12,230 --> 00:19:18,220
template string so if you wanted also to

00:19:14,929 --> 00:19:21,390
understand how dot actually manifests to

00:19:18,220 --> 00:19:29,010
me push this a bit up

00:19:21,390 --> 00:19:36,840
so everyone can see it so let's remember

00:19:29,010 --> 00:19:38,400
how that looks like so divorce statement

00:19:36,840 --> 00:19:41,130
it's a very simple one looks like that

00:19:38,400 --> 00:19:42,809
right we're just evaluating real-time

00:19:41,130 --> 00:19:44,790
javascript code will have to write

00:19:42,809 --> 00:19:50,340
putting any statement but I can also do

00:19:44,790 --> 00:19:54,780
something like this I can also call a

00:19:50,340 --> 00:19:56,610
function right as part of my of my

00:19:54,780 --> 00:19:58,860
expression that is being waited to be

00:19:56,610 --> 00:20:00,660
evaluated there and then I'm running a

00:19:58,860 --> 00:20:02,100
function right and running a function

00:20:00,660 --> 00:20:05,490
call invoking a function on the server

00:20:02,100 --> 00:20:07,049
side to do something with evil so I

00:20:05,490 --> 00:20:11,850
could do something very similar with

00:20:07,049 --> 00:20:14,640
dust itself as well as we've seen before

00:20:11,850 --> 00:20:17,130
I have this mobile request but now that

00:20:14,640 --> 00:20:19,380
I know that when I'm adding the bracket

00:20:17,130 --> 00:20:22,350
statement this does not go through this

00:20:19,380 --> 00:20:29,040
if statement that we've seen before with

00:20:22,350 --> 00:20:31,230
dust because now type of string the type

00:20:29,040 --> 00:20:32,580
of S is not a string it's an array and

00:20:31,230 --> 00:20:34,530
the first element of the array would be

00:20:32,580 --> 00:20:39,720
the string that we have so I can do

00:20:34,530 --> 00:20:41,309
something like this close it at a

00:20:39,720 --> 00:20:43,950
console log hopefully did not miss

00:20:41,309 --> 00:20:45,630
anything I'll show you here on the left

00:20:43,950 --> 00:20:47,700
that on the server side I actually just

00:20:45,630 --> 00:20:51,059
went if run a console log as well

00:20:47,700 --> 00:20:53,100
printing one some actually injected code

00:20:51,059 --> 00:20:54,960
JavaScript code into the app now this is

00:20:53,100 --> 00:20:56,370
a very simple example you can always

00:20:54,960 --> 00:20:58,950
think of it of how you can take that

00:20:56,370 --> 00:21:00,390
forward like requiring a process child

00:20:58,950 --> 00:21:02,250
process you know executing script

00:21:00,390 --> 00:21:04,140
whatever you want to do there but just

00:21:02,250 --> 00:21:06,059
by that we have just by using that for

00:21:04,140 --> 00:21:07,620
using an introducing vulnerabilities

00:21:06,059 --> 00:21:14,150
specifically a high vulnerability of

00:21:07,620 --> 00:21:17,580
code injection into our applications so

00:21:14,150 --> 00:21:19,980
let's get back to this one after we've

00:21:17,580 --> 00:21:21,059
seen how this is happening I think the

00:21:19,980 --> 00:21:22,290
Quechan security is probably a

00:21:21,059 --> 00:21:23,910
challenging thing and I know as

00:21:22,290 --> 00:21:25,980
developers we may not exactly know how

00:21:23,910 --> 00:21:27,799
to write secure code so many challenges

00:21:25,980 --> 00:21:30,390
happening around this for example

00:21:27,799 --> 00:21:32,250
delivering software has actually

00:21:30,390 --> 00:21:34,830
increased right everyone are adopting or

00:21:32,250 --> 00:21:35,190
trying to mature into a CIC the kind of

00:21:34,830 --> 00:21:37,320
frost

00:21:35,190 --> 00:21:39,180
says where we build software and ship it

00:21:37,320 --> 00:21:41,160
very early right we wanna give volume

00:21:39,180 --> 00:21:42,480
hourly to our customers you know it's

00:21:41,160 --> 00:21:43,980
fun to build something and see it a

00:21:42,480 --> 00:21:46,920
minute later deployed in production and

00:21:43,980 --> 00:21:48,720
users are using it except it means that

00:21:46,920 --> 00:21:51,020
we also need to use the proper security

00:21:48,720 --> 00:21:52,680
tooling and the proper security

00:21:51,020 --> 00:21:54,060
responsibilities when we were deploying

00:21:52,680 --> 00:21:56,690
stuff because when we started doing a

00:21:54,060 --> 00:21:58,500
lot of these very early very often

00:21:56,690 --> 00:22:00,840
commits and you know deploys to

00:21:58,500 --> 00:22:03,180
production we may miss on security

00:22:00,840 --> 00:22:05,520
processes that we should have done that

00:22:03,180 --> 00:22:07,500
traditionally in traditional security

00:22:05,520 --> 00:22:09,180
companies or just generally traditional

00:22:07,500 --> 00:22:11,520
software company security has been

00:22:09,180 --> 00:22:13,290
something that sad to say but you know

00:22:11,520 --> 00:22:14,790
kind of an afterthought or is something

00:22:13,290 --> 00:22:16,350
of a cycle of every quarter or something

00:22:14,790 --> 00:22:18,480
like that where there's a check but that

00:22:16,350 --> 00:22:20,880
doesn't scale anymore with DevOps since

00:22:18,480 --> 00:22:22,650
the ice it is another thing is that no

00:22:20,880 --> 00:22:24,660
one really teaches application security

00:22:22,650 --> 00:22:26,640
to anyone like this is a list for

00:22:24,660 --> 00:22:28,650
example of I'm sure you're aware of some

00:22:26,640 --> 00:22:31,020
of the names of this top to an us our

00:22:28,650 --> 00:22:32,700
computer science schools and I filter

00:22:31,020 --> 00:22:36,660
this list for all of those that actually

00:22:32,700 --> 00:22:39,930
require in the curriculum a software

00:22:36,660 --> 00:22:41,850
security course that's right I want each

00:22:39,930 --> 00:22:45,260
application security by default we have

00:22:41,850 --> 00:22:47,340
to somehow understand this concern and

00:22:45,260 --> 00:22:48,960
maintainer is of open source so how do

00:22:47,340 --> 00:22:51,690
they understand security how do they

00:22:48,960 --> 00:22:53,640
understand what best practices to do how

00:22:51,690 --> 00:22:56,280
to follow that because it is something

00:22:53,640 --> 00:22:57,660
of a void as well and if you would

00:22:56,280 --> 00:22:59,130
consider different projects you would

00:22:57,660 --> 00:23:00,720
see that sometimes the variation of

00:22:59,130 --> 00:23:02,910
security is very very big it's very

00:23:00,720 --> 00:23:04,140
large in terms of you know understand

00:23:02,910 --> 00:23:06,000
that this person had gone on someone

00:23:04,140 --> 00:23:07,200
under under some security practices and

00:23:06,000 --> 00:23:10,560
knowledge and something else is

00:23:07,200 --> 00:23:12,420
completely missing something actually

00:23:10,560 --> 00:23:14,730
recent recently actually happened that

00:23:12,420 --> 00:23:16,290
was really interesting to just share

00:23:14,730 --> 00:23:18,420
with you here on this context and

00:23:16,290 --> 00:23:20,130
there's a there was a vulnerability

00:23:18,420 --> 00:23:23,600
raised for one of the open-source

00:23:20,130 --> 00:23:25,920
project called HTTP a proxy agent

00:23:23,600 --> 00:23:28,170
someone opened an issue said that you

00:23:25,920 --> 00:23:30,480
know there was a vulnerability affecting

00:23:28,170 --> 00:23:33,180
it and actually requiring or we know

00:23:30,480 --> 00:23:35,760
asking politely at least the main

00:23:33,180 --> 00:23:37,140
terrorists to release the fix for it now

00:23:35,760 --> 00:23:38,880
this is also really important how do

00:23:37,140 --> 00:23:40,950
maintainer is understand how to release

00:23:38,880 --> 00:23:44,610
fixes security fixes because it's so

00:23:40,950 --> 00:23:47,040
much affect the consumer behavior when

00:23:44,610 --> 00:23:49,760
you do we as users consume software and

00:23:47,040 --> 00:23:52,080
the thing is that that that

00:23:49,760 --> 00:23:54,360
that maintainer released it as a major

00:23:52,080 --> 00:23:56,550
change so it bumped from you know the

00:23:54,360 --> 00:23:58,590
version of 2.2 was vulnerable then the

00:23:56,550 --> 00:24:00,660
security fix was released as a tree as a

00:23:58,590 --> 00:24:03,240
major version that usually means that

00:24:00,660 --> 00:24:06,030
the developers will be less likely to

00:24:03,240 --> 00:24:07,590
run this upgrade very fast because maybe

00:24:06,030 --> 00:24:09,900
there's a breaking change maybe

00:24:07,590 --> 00:24:11,730
something happened that will take a lot

00:24:09,900 --> 00:24:14,340
of more processors to just upgrade to

00:24:11,730 --> 00:24:15,480
that version so we need to understand

00:24:14,340 --> 00:24:18,060
and be conscious in terms of the

00:24:15,480 --> 00:24:20,340
maintainer best practices of how to

00:24:18,060 --> 00:24:23,790
manage this open source thing you know

00:24:20,340 --> 00:24:26,210
the lifecycle everything around it here

00:24:23,790 --> 00:24:28,620
a couple of those more than a couple

00:24:26,210 --> 00:24:30,600
enabling 2fa is an important part you do

00:24:28,620 --> 00:24:32,550
not get compromised if you're running a

00:24:30,600 --> 00:24:35,160
very important project having a

00:24:32,550 --> 00:24:37,140
responsible disclosure policy is really

00:24:35,160 --> 00:24:39,030
really significant in terms of you

00:24:37,140 --> 00:24:41,250
communicate a very strong statement in

00:24:39,030 --> 00:24:43,740
terms of you being committed to security

00:24:41,250 --> 00:24:46,590
for your project scanning often and

00:24:43,740 --> 00:24:48,750
fixing vulnerabilities in your projects

00:24:46,590 --> 00:24:50,760
and dependencies is something you should

00:24:48,750 --> 00:24:52,950
do and never delay it and of course

00:24:50,760 --> 00:24:56,250
releasing 3-d fixes as a non major try

00:24:52,950 --> 00:24:58,170
not to do that to do that and you know

00:24:56,250 --> 00:24:58,880
not to redo that as a major version

00:24:58,170 --> 00:25:01,860
sorry

00:24:58,880 --> 00:25:03,960
so attackers are targeting open source

00:25:01,860 --> 00:25:06,180
software because of course finding a

00:25:03,960 --> 00:25:07,620
vulnerability and trying to target all

00:25:06,180 --> 00:25:09,510
of express or react triangular

00:25:07,620 --> 00:25:10,830
applications would mean finding many

00:25:09,510 --> 00:25:13,230
victims you know we do not need to put a

00:25:10,830 --> 00:25:16,080
special hoody no run in the dark and try

00:25:13,230 --> 00:25:18,690
to find that zero-day actually open and

00:25:16,080 --> 00:25:20,010
public vulnerabilities are very low

00:25:18,690 --> 00:25:22,920
hanging fruit for hackers and anyone

00:25:20,010 --> 00:25:24,450
else trying to target developers but

00:25:22,920 --> 00:25:26,250
what if security was you know a bit

00:25:24,450 --> 00:25:28,440
easier was a bit more developer-friendly

00:25:26,250 --> 00:25:30,060
what if it was actionable so we wouldn't

00:25:28,440 --> 00:25:32,760
just be understanding of what is

00:25:30,060 --> 00:25:33,990
happening with vulnerabilities in our

00:25:32,760 --> 00:25:36,830
project but we would actually be able

00:25:33,990 --> 00:25:39,650
and empowered as developer to fix them

00:25:36,830 --> 00:25:41,490
one of those things is maybe adding a

00:25:39,650 --> 00:25:43,040
tooling that will help you do these

00:25:41,490 --> 00:25:45,360
things right one of the things of

00:25:43,040 --> 00:25:47,160
mitigating security vulnerabilities is

00:25:45,360 --> 00:25:48,600
maybe the fact that you do not just

00:25:47,160 --> 00:25:50,910
update to the latest version of

00:25:48,600 --> 00:25:52,680
something but the tooling is smart

00:25:50,910 --> 00:25:55,020
enough to go ahead and do it in a

00:25:52,680 --> 00:25:57,120
several minor way so even if a fixed

00:25:55,020 --> 00:25:59,880
exists existing like a three point X

00:25:57,120 --> 00:26:01,890
version you would actually and as well

00:25:59,880 --> 00:26:03,010
as like a two point three version and

00:26:01,890 --> 00:26:04,720
you're using two point two

00:26:03,010 --> 00:26:06,160
the tooling will actually upgrade you to

00:26:04,720 --> 00:26:08,440
that two point trees like having that

00:26:06,160 --> 00:26:12,730
minor or patch version instead of just

00:26:08,440 --> 00:26:14,200
jumping up to the latest version what

00:26:12,730 --> 00:26:16,150
are you using snake or Reno NPM

00:26:14,200 --> 00:26:17,770
auditorio watch dependency check there

00:26:16,150 --> 00:26:19,060
are many options whatever you're using

00:26:17,770 --> 00:26:21,640
whatever works for you that's that's

00:26:19,060 --> 00:26:23,740
great but make sure that you're using

00:26:21,640 --> 00:26:25,180
that really well and that this is part

00:26:23,740 --> 00:26:27,970
of everything this is part of your STI

00:26:25,180 --> 00:26:29,590
TD processors if someone is adding a new

00:26:27,970 --> 00:26:31,900
developer or existing develop or add a

00:26:29,590 --> 00:26:34,240
new package to your project and maybe

00:26:31,900 --> 00:26:36,130
that package has a vulnerability that

00:26:34,240 --> 00:26:38,680
build fails because it has been tested

00:26:36,130 --> 00:26:41,530
at that point you know it's not too far

00:26:38,680 --> 00:26:43,360
- ahead of time that just changing now

00:26:41,530 --> 00:26:47,350
that dependency would incur a cost for

00:26:43,360 --> 00:26:48,670
your team so I've got a lot of things of

00:26:47,350 --> 00:26:49,300
other stuff I would really like to talk

00:26:48,670 --> 00:26:51,010
to you about

00:26:49,300 --> 00:26:52,780
but for now you know use the open-source

00:26:51,010 --> 00:26:53,700
but use it responsibly and thank you

00:26:52,780 --> 00:26:55,900
very much

00:26:53,700 --> 00:27:00,109
[Applause]

00:26:55,900 --> 00:27:00,109

YouTube URL: https://www.youtube.com/watch?v=ensQEPBHOO0


