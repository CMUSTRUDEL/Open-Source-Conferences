Title: ReactiveConf 2019 - Richard Feldman: Predicting the Future of the Web
Publication date: 2019-10-31
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Millennium stage
-------------------------------------------------------------------
The Web has changed a lot since its beginning as a platform for static articles. At first, Web applications did not exist. Then they began to appear in the form of servers generating HTML on the fly. PHP was huge, then fell by the wayside as JS rose. Flash came and went. Today, the Web has become the biggest application delivery platform in history and based on its past, the one thing we can be certain of is that more changes are yet to come.

What, specifically, might those changes be? What differences might the Web of 2020 have to the the Web of 2019? What about the Web of 2025? What would the impact be on Web developers? In this talk, Richard draws on his 12 years of professional Web development experience, and history of being an early adopter of technologies like React in 2013 and Elm in 2014, to make and justify some concrete predictions about the future of the Web in both 2020 and 2025.
Captions: 
	00:00:01,930 --> 00:00:07,240
[Music]

00:00:15,930 --> 00:00:20,619
all right welcome everyone this is

00:00:18,820 --> 00:00:22,330
printing the future of web development

00:00:20,619 --> 00:00:24,280
I'm Richard Feldman let start with a

00:00:22,330 --> 00:00:26,200
question never gotten to choose your

00:00:24,280 --> 00:00:28,240
stack at work like your greenfield

00:00:26,200 --> 00:00:29,320
project totally up to you or maybe the

00:00:28,240 --> 00:00:31,180
team that you're working on you get to

00:00:29,320 --> 00:00:34,270
pick what front-end stack you're working

00:00:31,180 --> 00:00:35,649
with okay yeah me too so I've also been

00:00:34,270 --> 00:00:37,120
that position the first time I was in

00:00:35,649 --> 00:00:39,760
that position was all the way back in

00:00:37,120 --> 00:00:41,620
2006 this is the first web app that I'd

00:00:39,760 --> 00:00:44,410
ever worked on and there were four of us

00:00:41,620 --> 00:00:46,060
was a start-up and at the time the thing

00:00:44,410 --> 00:00:47,890
that was big in web apps this is where

00:00:46,060 --> 00:00:50,440
the dawn of web apps was the lamp stack

00:00:47,890 --> 00:00:52,960
anyone ever remember the lamp stack okay

00:00:50,440 --> 00:00:55,210
yeah Linux Apache my sequel and then the

00:00:52,960 --> 00:00:57,309
P was overloaded to be PHP Perl and

00:00:55,210 --> 00:00:58,960
Python and the reason that P was so

00:00:57,309 --> 00:01:00,730
important was because basically we did

00:00:58,960 --> 00:01:02,649
all of the rendering on the server we

00:01:00,730 --> 00:01:04,030
would generate HTML on the fly and then

00:01:02,649 --> 00:01:06,070
send it to the browser on every page

00:01:04,030 --> 00:01:07,869
flow and so this is our first time

00:01:06,070 --> 00:01:10,179
building a web app and like okay what do

00:01:07,869 --> 00:01:11,530
we do well one way you can choose your

00:01:10,179 --> 00:01:13,630
text stack is there's there's an old

00:01:11,530 --> 00:01:15,670
saying goes choose boring technology

00:01:13,630 --> 00:01:18,700
essentially try to pick something that

00:01:15,670 --> 00:01:21,069
is mature and established and used by a

00:01:18,700 --> 00:01:22,990
lot of people so here's one example of a

00:01:21,069 --> 00:01:24,340
2006 boring technology this is what we

00:01:22,990 --> 00:01:26,799
ended up going with it was the the

00:01:24,340 --> 00:01:29,289
number one biggest library ecosystem at

00:01:26,799 --> 00:01:31,209
the time it was the most mature option

00:01:29,289 --> 00:01:32,859
the lamp stack by considerable margin I

00:01:31,209 --> 00:01:34,719
was used by successful companies

00:01:32,859 --> 00:01:38,109
including the social networking giant of

00:01:34,719 --> 00:01:39,880
the day LiveJournal and so we chose this

00:01:38,109 --> 00:01:42,009
technology using this methodology and

00:01:39,880 --> 00:01:44,520
this is how we ended up building our

00:01:42,009 --> 00:01:48,669
entire startup on Pearl

00:01:44,520 --> 00:01:52,060
so since 2006 pearls popularity has not

00:01:48,669 --> 00:01:54,249
been the best this is the Google Trends

00:01:52,060 --> 00:01:56,349
for like pearl searches since 2006 and

00:01:54,249 --> 00:01:58,119
kind of a lesson here is that you know

00:01:56,349 --> 00:02:00,399
just choosing boring technology is not a

00:01:58,119 --> 00:02:01,959
guarantee of safety this doesn't mean

00:02:00,399 --> 00:02:03,219
that everything's gonna be okay as long

00:02:01,959 --> 00:02:05,319
as you just do what everyone else is

00:02:03,219 --> 00:02:06,849
doing right now you kind of have to look

00:02:05,319 --> 00:02:08,319
towards the future and try to figure out

00:02:06,849 --> 00:02:09,970
like well how are things going to go in

00:02:08,319 --> 00:02:11,200
the future no the lesson here is that

00:02:09,970 --> 00:02:12,880
it's not necessarily a problem that

00:02:11,200 --> 00:02:14,650
pearl declined in popularity the problem

00:02:12,880 --> 00:02:16,210
is that if we were trying to hire right

00:02:14,650 --> 00:02:17,530
now there's not a lot of people who want

00:02:16,210 --> 00:02:19,140
to do pearl development these days

00:02:17,530 --> 00:02:20,700
there's not a lot of egos

00:02:19,140 --> 00:02:22,530
support compared to what they used to be

00:02:20,700 --> 00:02:24,390
back then so it's not necessarily a

00:02:22,530 --> 00:02:25,410
problem if something is small but it is

00:02:24,390 --> 00:02:26,880
a problem that people are losing

00:02:25,410 --> 00:02:29,370
interest in the technology and just

00:02:26,880 --> 00:02:30,900
don't really want to use it anymore so

00:02:29,370 --> 00:02:32,640
any technology that we choose no matter

00:02:30,900 --> 00:02:35,160
how popular how main screen how much

00:02:32,640 --> 00:02:37,080
traction it's got today is still making

00:02:35,160 --> 00:02:39,060
a bet on the future there's no safe

00:02:37,080 --> 00:02:40,290
option here it's just a matter of what

00:02:39,060 --> 00:02:42,360
do we think is going to happen

00:02:40,290 --> 00:02:43,980
the real question I think is any

00:02:42,360 --> 00:02:45,510
technology choice we're making today are

00:02:43,980 --> 00:02:49,170
we still gonna be happy with that in

00:02:45,510 --> 00:02:50,880
5-10 years so predicting is safer than

00:02:49,170 --> 00:02:51,870
following blindly like following the

00:02:50,880 --> 00:02:53,970
herd and just trying to do what

00:02:51,870 --> 00:02:55,980
everybody else is doing is not as safe

00:02:53,970 --> 00:02:57,300
of that I think as trying to predict

00:02:55,980 --> 00:02:59,720
like what actually is going to happen in

00:02:57,300 --> 00:03:01,410
the future and then follow that instead

00:02:59,720 --> 00:03:03,300
so I'm gonna be making some predictions

00:03:01,410 --> 00:03:04,380
today some concrete predictions I'm

00:03:03,300 --> 00:03:05,519
gonna make some predictions about what I

00:03:04,380 --> 00:03:07,620
think is going to be true about web

00:03:05,519 --> 00:03:09,930
development at the end of 2020 and then

00:03:07,620 --> 00:03:11,400
also at the end of 2025 so I'm gonna

00:03:09,930 --> 00:03:14,370
break this down into four areas one is

00:03:11,400 --> 00:03:17,250
typescript two is web assembly packages

00:03:14,370 --> 00:03:18,420
and finally compiled to j/s landscape so

00:03:17,250 --> 00:03:21,060
let's start with typescript

00:03:18,420 --> 00:03:21,780
more like hype scripts am i right I mean

00:03:21,060 --> 00:03:23,670
come on

00:03:21,780 --> 00:03:25,380
we saw Matthews talk yesterday about

00:03:23,670 --> 00:03:26,790
this this graph of like tight scripts

00:03:25,380 --> 00:03:28,620
you know Google Trends like the opposite

00:03:26,790 --> 00:03:30,269
of pearls it's like really taking off a

00:03:28,620 --> 00:03:31,350
lot of people are talking about it I'm

00:03:30,269 --> 00:03:32,549
not even gonna bother explaining what it

00:03:31,350 --> 00:03:34,890
is because you've probably all heard of

00:03:32,549 --> 00:03:36,390
it he also drew the comparison of

00:03:34,890 --> 00:03:37,350
typescript and CoffeeScript like a lot

00:03:36,390 --> 00:03:38,730
of people have said like well as

00:03:37,350 --> 00:03:40,560
typescript just gonna turn out like

00:03:38,730 --> 00:03:41,760
CoffeeScript what what is in the future

00:03:40,560 --> 00:03:43,709
for typescript you know there's

00:03:41,760 --> 00:03:45,060
everybody's talking about it now but are

00:03:43,709 --> 00:03:46,590
they still gonna be talking about it and

00:03:45,060 --> 00:03:48,060
using it in a few years or is it gonna

00:03:46,590 --> 00:03:50,430
end up tapering off the way the

00:03:48,060 --> 00:03:52,110
CoffeeScript did well two things to note

00:03:50,430 --> 00:03:54,090
about this one is that obviously

00:03:52,110 --> 00:03:55,560
typescript has already grown way beyond

00:03:54,090 --> 00:03:56,970
what CoffeeScript did in terms of

00:03:55,560 --> 00:03:58,980
interests if google searches are any

00:03:56,970 --> 00:04:00,390
indication and secondly that it's trend

00:03:58,980 --> 00:04:01,560
is still going upwards so we haven't

00:04:00,390 --> 00:04:03,090
really seen any indication the

00:04:01,560 --> 00:04:05,190
typescript is slowing down so what do we

00:04:03,090 --> 00:04:06,780
think it's actually gonna do well

00:04:05,190 --> 00:04:07,920
obviously frameworks are all on board I

00:04:06,780 --> 00:04:09,630
mean this was certainly not true of

00:04:07,920 --> 00:04:11,100
CoffeeScript um like no matter what you

00:04:09,630 --> 00:04:12,450
Carolee throw a stone without hitting

00:04:11,100 --> 00:04:14,100
some framework that's either got

00:04:12,450 --> 00:04:16,890
first-class type script support or is

00:04:14,100 --> 00:04:17,940
working on adding it already but despite

00:04:16,890 --> 00:04:19,350
this the fact that there are so many

00:04:17,940 --> 00:04:20,729
people in the ecosystem getting on board

00:04:19,350 --> 00:04:22,590
not a hundred percent of people are on

00:04:20,729 --> 00:04:24,479
board there are some things that people

00:04:22,590 --> 00:04:25,860
don't like about typescript for example

00:04:24,479 --> 00:04:28,740
I saw one tweet that was complaining

00:04:25,860 --> 00:04:29,789
about having to deal with this type I'm

00:04:28,740 --> 00:04:31,200
not going to read this whole thing out

00:04:29,789 --> 00:04:32,700
because I have a limited amount of time

00:04:31,200 --> 00:04:34,410
to give this talk

00:04:32,700 --> 00:04:36,480
but obviously like encountering this on

00:04:34,410 --> 00:04:39,120
a daily basis is not super pleasant this

00:04:36,480 --> 00:04:41,460
is kind of a really verbose like kind of

00:04:39,120 --> 00:04:42,960
difficult to understand thing there's

00:04:41,460 --> 00:04:44,520
probably some Java programmers for now

00:04:42,960 --> 00:04:46,260
looking on me like you all made fun of

00:04:44,520 --> 00:04:50,430
us with our abstract singleton Factory

00:04:46,260 --> 00:04:51,720
proxy bean who's laughing now David

00:04:50,430 --> 00:04:53,580
Nolan yesterday said that you know maybe

00:04:51,720 --> 00:04:55,140
typescript is kind of like enterprise

00:04:53,580 --> 00:04:57,750
JavaScript and I think there's some

00:04:55,140 --> 00:04:59,310
truth to that another thing that people

00:04:57,750 --> 00:05:00,660
say they don't necessarily like about

00:04:59,310 --> 00:05:02,790
typescript is that although it gives you

00:05:00,660 --> 00:05:04,680
like more type-checking and some degree

00:05:02,790 --> 00:05:06,780
of type safety by design the type system

00:05:04,680 --> 00:05:08,070
is unsound and it can let things slip

00:05:06,780 --> 00:05:10,500
through to give you a false sense of

00:05:08,070 --> 00:05:12,570
security one notable example this being

00:05:10,500 --> 00:05:14,070
any which is essentially means oh this

00:05:12,570 --> 00:05:15,870
type it might be anything who knows

00:05:14,070 --> 00:05:18,620
we're just gonna find out which appears

00:05:15,870 --> 00:05:20,700
four times in this type signature alone

00:05:18,620 --> 00:05:22,080
so definitely some things to like about

00:05:20,700 --> 00:05:24,090
typescript but I think the most

00:05:22,080 --> 00:05:25,440
important factor to try and predict what

00:05:24,090 --> 00:05:28,170
what is the future of typescript

00:05:25,440 --> 00:05:30,840
is looking at how it's impacting teams I

00:05:28,170 --> 00:05:32,700
hear a lot of teams saying we are trying

00:05:30,840 --> 00:05:34,650
typescript or we have used typescript

00:05:32,700 --> 00:05:37,350
where we are using typescript I hear

00:05:34,650 --> 00:05:38,760
almost no teams saying we tried

00:05:37,350 --> 00:05:40,380
typescript and then we went back to

00:05:38,760 --> 00:05:41,550
JavaScript actually I haven't heard of

00:05:40,380 --> 00:05:43,470
any I just want to get well actually

00:05:41,550 --> 00:05:45,030
like after this talk so I'm gonna say

00:05:43,470 --> 00:05:46,320
yeah it could theoretically happen but

00:05:45,030 --> 00:05:48,270
personally I actually have not heard of

00:05:46,320 --> 00:05:50,700
a single team I'm sure somebody has that

00:05:48,270 --> 00:05:52,080
went typescript and then went back so

00:05:50,700 --> 00:05:53,340
it's basically a ratchet like people

00:05:52,080 --> 00:05:54,870
switch to it and then they don't switch

00:05:53,340 --> 00:05:56,790
back and that means that it's going to

00:05:54,870 --> 00:05:58,560
continue have to have more and more

00:05:56,790 --> 00:06:01,170
growth as long as that's true that's a

00:05:58,560 --> 00:06:02,610
really powerful force multiplier so

00:06:01,170 --> 00:06:04,260
essentially I mean there's a lot of

00:06:02,610 --> 00:06:06,090
truth I think to this tweet like you

00:06:04,260 --> 00:06:08,850
know maybe if an individual on a team is

00:06:06,090 --> 00:06:10,470
like I don't like typescript but if the

00:06:08,850 --> 00:06:11,880
whole team ends up adopting typescript

00:06:10,470 --> 00:06:12,840
anyway because that's what the team lead

00:06:11,880 --> 00:06:14,190
says we're going with that so the

00:06:12,840 --> 00:06:15,330
technical decision is or maybe the

00:06:14,190 --> 00:06:17,180
department says we're going with that

00:06:15,330 --> 00:06:19,530
and so every team has to get on board

00:06:17,180 --> 00:06:20,760
whether or not individuals like it is

00:06:19,530 --> 00:06:22,530
that doesn't necessarily mean that

00:06:20,760 --> 00:06:24,810
that's gonna change the fact that the

00:06:22,530 --> 00:06:26,760
whole team adopted it so based on this I

00:06:24,810 --> 00:06:28,650
think typescript popularity is like just

00:06:26,760 --> 00:06:30,150
getting started I actually think that

00:06:28,650 --> 00:06:31,800
well I'm gonna go on record and say I

00:06:30,150 --> 00:06:33,270
predict the typescript ends up basically

00:06:31,800 --> 00:06:35,190
taking over the Jas world I'll be

00:06:33,270 --> 00:06:36,900
specific about what I mean about that so

00:06:35,190 --> 00:06:39,120
I think by the end of 2020 I think that

00:06:36,900 --> 00:06:40,860
for commercial projects is going to be

00:06:39,120 --> 00:06:42,660
the most common choice that the teams

00:06:40,860 --> 00:06:44,190
make for a new project like if they're

00:06:42,660 --> 00:06:45,450
in that situation making a green field

00:06:44,190 --> 00:06:46,509
choice they're gonna go typescript

00:06:45,450 --> 00:06:48,729
rather than Java

00:06:46,509 --> 00:06:50,440
and I think by the end of 2025 there

00:06:48,729 --> 00:06:51,820
will be more people on a daily basis

00:06:50,440 --> 00:06:53,500
writing tight script than JavaScript

00:06:51,820 --> 00:06:54,639
without type script we'll see if I'm

00:06:53,500 --> 00:06:55,259
right but I think that's where things

00:06:54,639 --> 00:06:59,470
are headed

00:06:55,259 --> 00:07:00,970
part 2 webassembly Lynne Clark is one of

00:06:59,470 --> 00:07:01,930
the great explainers of our time and

00:07:00,970 --> 00:07:03,490
she's done a great job explaining

00:07:01,930 --> 00:07:05,590
webassembly so I'm not gonna go into

00:07:03,490 --> 00:07:06,970
super much depth on that instead I'm

00:07:05,590 --> 00:07:09,820
going to oversimplify what webassembly

00:07:06,970 --> 00:07:11,680
is as it's a way to run almost machine

00:07:09,820 --> 00:07:12,850
code in the browser and the upshot of

00:07:11,680 --> 00:07:14,830
this is that essentially it lets you

00:07:12,850 --> 00:07:17,320
build applications that can run much

00:07:14,830 --> 00:07:18,639
faster than JavaScript now one possible

00:07:17,320 --> 00:07:20,740
use for web assembly is you can use it

00:07:18,639 --> 00:07:22,539
to improve the perfec system JavaScript

00:07:20,740 --> 00:07:24,250
apps and libraries and stuff so one

00:07:22,539 --> 00:07:25,780
example that Lynne gave was you could

00:07:24,250 --> 00:07:27,460
use this to make the react reconciler

00:07:25,780 --> 00:07:29,110
faster just speed up that one part of

00:07:27,460 --> 00:07:30,550
the library I think that's interesting

00:07:29,110 --> 00:07:32,020
but at the end of the day I don't

00:07:30,550 --> 00:07:33,639
personally think that's like how web

00:07:32,020 --> 00:07:34,870
assembly is gonna get used the most or

00:07:33,639 --> 00:07:36,280
the biggest impact that it's gonna have

00:07:34,870 --> 00:07:38,320
and the main reason I think that is I

00:07:36,280 --> 00:07:40,180
think the the existing status quo of

00:07:38,320 --> 00:07:42,610
JavaScript performance is pretty widely

00:07:40,180 --> 00:07:43,960
accepted as like fine the reason I

00:07:42,610 --> 00:07:45,789
believe this is in part that I'm on the

00:07:43,960 --> 00:07:47,289
Elm core team and a few years ago we had

00:07:45,789 --> 00:07:49,060
like a really exciting release or so we

00:07:47,289 --> 00:07:50,289
thought that was like hey look look look

00:07:49,060 --> 00:07:52,090
how much faster we made Ellen like now

00:07:50,289 --> 00:07:53,740
like renders faster than like react and

00:07:52,090 --> 00:07:55,000
angular and view and ember like all

00:07:53,740 --> 00:07:56,380
these things look at look how great

00:07:55,000 --> 00:07:59,139
these numbers are and people are like

00:07:56,380 --> 00:08:00,550
okay but like you know like it's fat all

00:07:59,139 --> 00:08:02,590
the other things are fast enough so

00:08:00,550 --> 00:08:04,360
whatever I mean good job but you know I

00:08:02,590 --> 00:08:06,280
think people are pretty okay with the

00:08:04,360 --> 00:08:07,990
status quo and so if the pitch of web

00:08:06,280 --> 00:08:09,729
assembly is it's like use the same

00:08:07,990 --> 00:08:11,080
technologies but there'll be a bit

00:08:09,729 --> 00:08:13,060
faster I don't think that's gonna be

00:08:11,080 --> 00:08:15,070
enough I think it's much more

00:08:13,060 --> 00:08:16,270
interesting for companies like Sigma and

00:08:15,070 --> 00:08:18,159
they wrote a blog post actually about

00:08:16,270 --> 00:08:19,990
how big a deal for web assembly was for

00:08:18,159 --> 00:08:21,639
them so fig was a company that makes

00:08:19,990 --> 00:08:23,139
graphics editing software like their

00:08:21,639 --> 00:08:25,090
competitors or things like Photoshop and

00:08:23,139 --> 00:08:27,570
sketch and they're making a really

00:08:25,090 --> 00:08:30,970
really serious like heavyweight app and

00:08:27,570 --> 00:08:33,130
this application is all built in C++

00:08:30,970 --> 00:08:35,469
like they did not build this Photoshop

00:08:33,130 --> 00:08:37,630
competitor using HTML CSS JavaScript

00:08:35,469 --> 00:08:39,400
Ableton with C++ that's what their team

00:08:37,630 --> 00:08:41,860
looks like if you're going to work at

00:08:39,400 --> 00:08:43,599
figma on this product you're writing C++

00:08:41,860 --> 00:08:45,370
all day so essentially what they've

00:08:43,599 --> 00:08:47,290
built is is a native application that

00:08:45,370 --> 00:08:48,430
happens to be distributed in the browser

00:08:47,290 --> 00:08:49,750
they're not really using web

00:08:48,430 --> 00:08:50,290
technologies if they attended this

00:08:49,750 --> 00:08:51,970
conference

00:08:50,290 --> 00:08:53,680
most of what we talked about would not

00:08:51,970 --> 00:08:55,839
necessarily be a much used to anyone

00:08:53,680 --> 00:08:59,050
building this thing in the actual

00:08:55,839 --> 00:08:59,590
application so essentially I think that

00:08:59,050 --> 00:09:00,820
the main

00:08:59,590 --> 00:09:02,020
thing that webassembly is going to do in

00:09:00,820 --> 00:09:03,790
the future is it's going to allow

00:09:02,020 --> 00:09:05,830
browsers to compete with app stores and

00:09:03,790 --> 00:09:06,850
installers like the reason that figma

00:09:05,830 --> 00:09:08,890
chooses to build their thing in the

00:09:06,850 --> 00:09:10,450
browser I assume is the fact that in

00:09:08,890 --> 00:09:12,580
order of people to use it they can just

00:09:10,450 --> 00:09:13,900
go to a URL and immediately they're

00:09:12,580 --> 00:09:15,070
using it they don't have to install it

00:09:13,900 --> 00:09:16,660
they don't have to accept permissions

00:09:15,070 --> 00:09:18,040
they don't have to go to an app store

00:09:16,660 --> 00:09:19,450
none of that stuff it's very low

00:09:18,040 --> 00:09:21,280
commitment a very easy way to get in

00:09:19,450 --> 00:09:22,120
also it is a great sharing story if

00:09:21,280 --> 00:09:23,140
you're like in the middle of editing

00:09:22,120 --> 00:09:24,790
something and you want to send someone

00:09:23,140 --> 00:09:26,380
else a link to be like exactly on the

00:09:24,790 --> 00:09:27,880
same page as you are and like they can

00:09:26,380 --> 00:09:29,530
just bring it up in their browser that's

00:09:27,880 --> 00:09:31,270
also really easy in browsers so there's

00:09:29,530 --> 00:09:33,100
a lot of good reasons that people might

00:09:31,270 --> 00:09:35,260
want to distribute what is fundamentally

00:09:33,100 --> 00:09:38,140
a native app in the browser instead of

00:09:35,260 --> 00:09:39,460
using an app store or an installer now

00:09:38,140 --> 00:09:40,900
another thing that's true about native

00:09:39,460 --> 00:09:42,640
apps is they tend to be pretty big in

00:09:40,900 --> 00:09:44,080
size like multi megabyte downloads are

00:09:42,640 --> 00:09:46,000
kind of a normal thing for native apps

00:09:44,080 --> 00:09:47,290
like yeah photo shops like pretty big of

00:09:46,000 --> 00:09:50,020
course you know that's what people

00:09:47,290 --> 00:09:51,370
expect not so much for with apps we hear

00:09:50,020 --> 00:09:52,840
about like the bloat crisis and we're

00:09:51,370 --> 00:09:54,820
talking about like kilobytes and if your

00:09:52,840 --> 00:09:57,100
if your payload is multiple megabytes

00:09:54,820 --> 00:09:58,000
it's like what are you even doing but

00:09:57,100 --> 00:10:00,370
again this is the thing where I think

00:09:58,000 --> 00:10:03,070
that people you know tolerate this like

00:10:00,370 --> 00:10:04,690
the status quo another experience we had

00:10:03,070 --> 00:10:07,690
on the ell team was like releasing this

00:10:04,690 --> 00:10:10,030
thing where Elms packaged like a bundled

00:10:07,690 --> 00:10:11,020
up size got really small thanks to like

00:10:10,030 --> 00:10:12,880
some really aggressive dead code

00:10:11,020 --> 00:10:14,560
elimination and this is like not just

00:10:12,880 --> 00:10:16,570
the the baseline size that's like across

00:10:14,560 --> 00:10:18,280
the entire app so we had this real-world

00:10:16,570 --> 00:10:19,390
app which is basically a bigger version

00:10:18,280 --> 00:10:21,010
of to do MVC so they have

00:10:19,390 --> 00:10:22,930
implementations and react and angular

00:10:21,010 --> 00:10:25,120
and view and all these things and the

00:10:22,930 --> 00:10:26,890
Elm one after this new release went down

00:10:25,120 --> 00:10:28,990
all the way down to 29 kilobytes for the

00:10:26,890 --> 00:10:31,960
entire 4,000 line of code single page

00:10:28,990 --> 00:10:33,280
app and react itself is like 35

00:10:31,960 --> 00:10:34,600
kilobytes were like this is amazing look

00:10:33,280 --> 00:10:36,010
how tiny this is everyone's talking

00:10:34,600 --> 00:10:37,720
about this bloat crisis right it's a

00:10:36,010 --> 00:10:40,090
really big deal and people are like good

00:10:37,720 --> 00:10:42,100
job you know that's that's you know well

00:10:40,090 --> 00:10:43,600
done but but the other day people put up

00:10:42,100 --> 00:10:44,800
with the multi megabyte downloads I mean

00:10:43,600 --> 00:10:46,300
I know like there's a lot of talk about

00:10:44,800 --> 00:10:47,680
this stuff but there's way more talk

00:10:46,300 --> 00:10:49,870
than action and we all kind of know that

00:10:47,680 --> 00:10:51,160
this is true so I don't see any reason

00:10:49,870 --> 00:10:52,930
why this should be different for native

00:10:51,160 --> 00:10:55,810
apps like if people are willing to wait

00:10:52,930 --> 00:10:56,950
for multi megabyte Photoshop download I

00:10:55,810 --> 00:10:59,140
think they'll be willing to wait for

00:10:56,950 --> 00:11:00,310
that in the browser to okay so a

00:10:59,140 --> 00:11:02,740
reasonable question at this point is

00:11:00,310 --> 00:11:04,210
it's like okay so if this is a whole new

00:11:02,740 --> 00:11:05,800
way of doing things is this gonna

00:11:04,210 --> 00:11:07,690
replace the way that things are done now

00:11:05,800 --> 00:11:09,610
is everybody gonna be writing C++ or

00:11:07,690 --> 00:11:11,410
rust in the future instead of HTML CSS

00:11:09,610 --> 00:11:13,300
and JavaScript

00:11:11,410 --> 00:11:16,089
is this the end of HTML and CSS and

00:11:13,300 --> 00:11:18,550
JavaScript I don't think so no I think

00:11:16,089 --> 00:11:20,980
that basically this works for so many

00:11:18,550 --> 00:11:23,050
companies making so much money I don't

00:11:20,980 --> 00:11:24,699
see why people would change just because

00:11:23,050 --> 00:11:26,170
there is another option I mean they're

00:11:24,699 --> 00:11:27,670
actually as we'll talk about later there

00:11:26,170 --> 00:11:29,529
already are plenty of other options to

00:11:27,670 --> 00:11:31,269
HTML CSS and JavaScript and they're

00:11:29,529 --> 00:11:32,500
still the most popular by far

00:11:31,269 --> 00:11:34,480
I don't think web assemblies gonna

00:11:32,500 --> 00:11:35,920
change that I really think the main

00:11:34,480 --> 00:11:37,959
impact of web assembly is gonna be that

00:11:35,920 --> 00:11:39,730
the definition of what is a web app gets

00:11:37,959 --> 00:11:41,170
bigger because it starts to encompass

00:11:39,730 --> 00:11:43,149
this additional thing that just was not

00:11:41,170 --> 00:11:45,610
popular back in 2006 when we were in the

00:11:43,149 --> 00:11:46,959
lamp stack this idea of a native

00:11:45,610 --> 00:11:49,269
application distributed through the

00:11:46,959 --> 00:11:51,069
browser one particularly compelling

00:11:49,269 --> 00:11:52,600
example this I think is games like

00:11:51,069 --> 00:11:55,569
imagine rendering this scene where

00:11:52,600 --> 00:11:57,550
people can walk around in CSS this was

00:11:55,569 --> 00:11:59,410
not happening I mean yeah you need these

00:11:57,550 --> 00:12:00,910
like really low-level high performance

00:11:59,410 --> 00:12:03,220
technologies if you want to ship a game

00:12:00,910 --> 00:12:04,870
in the browser that's only a thing

00:12:03,220 --> 00:12:06,519
that's become recently viable like a

00:12:04,870 --> 00:12:07,720
plausible thing that you can do but it

00:12:06,519 --> 00:12:09,310
actually is a plausible thing that you

00:12:07,720 --> 00:12:10,329
can do now and I think there's gonna be

00:12:09,310 --> 00:12:11,620
companies they're gonna be taking

00:12:10,329 --> 00:12:14,529
advantage of that and start distributing

00:12:11,620 --> 00:12:15,670
their games through the browser first so

00:12:14,529 --> 00:12:17,560
prediction number two I think

00:12:15,670 --> 00:12:19,810
webassembly is going to expand the web

00:12:17,560 --> 00:12:20,829
app pie by the other 20/20 honestly I

00:12:19,810 --> 00:12:22,180
don't think it's gonna make much of a

00:12:20,829 --> 00:12:23,319
noticeable difference I think the people

00:12:22,180 --> 00:12:25,029
who are working on these projects are

00:12:23,319 --> 00:12:27,459
gonna be starting to work on them around

00:12:25,029 --> 00:12:28,899
now but I think by the end of 2025 will

00:12:27,459 --> 00:12:30,819
start to see okay there actually is a

00:12:28,899 --> 00:12:32,470
new neesh of like heavyweight web apps

00:12:30,819 --> 00:12:35,110
that are basically native apps

00:12:32,470 --> 00:12:37,810
distributed in the browser okay

00:12:35,110 --> 00:12:40,660
part three packages how many people

00:12:37,810 --> 00:12:44,380
recognize this logo shout it out what is

00:12:40,660 --> 00:12:46,120
it Bower yes so this was a competing

00:12:44,380 --> 00:12:48,550
package manager to NPM they both

00:12:46,120 --> 00:12:51,519
coexisted for a while and these days NPM

00:12:48,550 --> 00:12:53,470
won pretty convincingly and now Bower

00:12:51,519 --> 00:12:55,660
usage is sort of dwindled off like even

00:12:53,470 --> 00:12:57,430
more so than perl so a reasonable

00:12:55,660 --> 00:12:59,139
question to ask is like okay that that

00:12:57,430 --> 00:13:00,639
happened to Bower could that also happen

00:12:59,139 --> 00:13:03,250
to NPM is there going to be something

00:13:00,639 --> 00:13:07,420
that replaces NPM in the future anyone

00:13:03,250 --> 00:13:10,600
recognized this logo no but interesting

00:13:07,420 --> 00:13:13,329
this is entropic so there was a talk

00:13:10,600 --> 00:13:15,730
given earlier this year this was at JS

00:13:13,329 --> 00:13:19,000
conf Europe at the economics of open

00:13:15,730 --> 00:13:20,319
source by CJ Silverio and I don't want

00:13:19,000 --> 00:13:21,790
to steal her thunder you should watch

00:13:20,319 --> 00:13:22,809
the talk and listen to the points that

00:13:21,790 --> 00:13:24,790
she's making but essentially she

00:13:22,809 --> 00:13:26,440
introduces entropic which is an ultra

00:13:24,790 --> 00:13:28,150
package manager' it's a bunch of people

00:13:26,440 --> 00:13:29,800
who worked at NPM and went on for

00:13:28,150 --> 00:13:31,450
various reasons that she explains on the

00:13:29,800 --> 00:13:34,750
talk to build a competing package

00:13:31,450 --> 00:13:37,510
manager also we've seen competing CLI is

00:13:34,750 --> 00:13:39,610
like yarn is another way to you access

00:13:37,510 --> 00:13:41,170
the NPM ecosystem and now we're also

00:13:39,610 --> 00:13:42,700
starting to see competing backends like

00:13:41,170 --> 00:13:46,360
github package registry instead of like

00:13:42,700 --> 00:13:48,460
the NPM server ecosystem now worth

00:13:46,360 --> 00:13:50,260
noting that I mean yarn is a CLI which

00:13:48,460 --> 00:13:51,490
access is the same server hardware and

00:13:50,260 --> 00:13:53,230
can have package registry is sort of the

00:13:51,490 --> 00:13:54,850
opposite I mean it actually on their

00:13:53,230 --> 00:13:57,670
website they talk about he use the

00:13:54,850 --> 00:14:00,100
normal NPM CLI to access this ecosystem

00:13:57,670 --> 00:14:02,380
just point it to a different URL rather

00:14:00,100 --> 00:14:04,180
than NPM servers and so reasonable

00:14:02,380 --> 00:14:06,850
questions are like okay are these signs

00:14:04,180 --> 00:14:08,080
of NPM you know going away and I think

00:14:06,850 --> 00:14:10,270
at the end of the day the fundamental

00:14:08,080 --> 00:14:12,160
idea of NPM is the real thing that

00:14:10,270 --> 00:14:13,780
people are making bets on whether or not

00:14:12,160 --> 00:14:15,250
it's yarn or something else I mean

00:14:13,780 --> 00:14:17,290
really people are into the network

00:14:15,250 --> 00:14:19,720
effects of NPM by which I mean the

00:14:17,290 --> 00:14:21,220
package.json file that says here are all

00:14:19,720 --> 00:14:22,480
my dependencies and they all have their

00:14:21,220 --> 00:14:24,400
dependencies specified in that way

00:14:22,480 --> 00:14:25,960
whether it's NPM servers a github

00:14:24,400 --> 00:14:27,550
servers or something else I think the

00:14:25,960 --> 00:14:29,170
important thing the valuable thing the

00:14:27,550 --> 00:14:30,730
thing that people can reasonably

00:14:29,170 --> 00:14:32,620
continue to bet on is that that

00:14:30,730 --> 00:14:34,480
ecosystem exists and all the network

00:14:32,620 --> 00:14:35,920
effects continue to persist

00:14:34,480 --> 00:14:38,370
I think they'll persist through

00:14:35,920 --> 00:14:40,120
continued problems so we saw recently

00:14:38,370 --> 00:14:41,710
not recently at this point a couple

00:14:40,120 --> 00:14:43,540
years ago I'm left pad where someone

00:14:41,710 --> 00:14:45,640
unpublished a package and broke a lot of

00:14:43,540 --> 00:14:47,020
people's workflows they closed that off

00:14:45,640 --> 00:14:49,210
and said you can't unpublished packages

00:14:47,020 --> 00:14:50,560
anymore that's all done earlier today

00:14:49,210 --> 00:14:52,360
Chris talked about event stream like a

00:14:50,560 --> 00:14:54,010
malicious packet or someone successfully

00:14:52,360 --> 00:14:55,390
managed to get up a whole ahold of a

00:14:54,010 --> 00:14:58,780
package that was used by a lot of people

00:14:55,390 --> 00:15:00,730
and publish a malicious release so uh

00:14:58,780 --> 00:15:02,440
hello Alain wrote a really detailed

00:15:00,730 --> 00:15:04,510
write-up of the event stream incident

00:15:02,440 --> 00:15:05,530
it's on his blog and one of the things

00:15:04,510 --> 00:15:07,750
that he talks about is basically like

00:15:05,530 --> 00:15:08,920
there was no like one root cause where

00:15:07,750 --> 00:15:10,870
you can just close this off and it's

00:15:08,920 --> 00:15:12,610
fixed like there was with left Pat this

00:15:10,870 --> 00:15:14,260
is kind of a more systemic issue and

00:15:12,610 --> 00:15:14,740
it's like not really going away anytime

00:15:14,260 --> 00:15:16,510
soon

00:15:14,740 --> 00:15:18,460
this vulnerability is still there and is

00:15:16,510 --> 00:15:20,200
gonna be there for the foreseeable

00:15:18,460 --> 00:15:23,590
future and something that neither of

00:15:20,200 --> 00:15:25,090
those touched on is this so if I were to

00:15:23,590 --> 00:15:27,040
install front-end dependencies by

00:15:25,090 --> 00:15:29,470
running a bash script like this what's

00:15:27,040 --> 00:15:30,610
the difference between that NPM install

00:15:29,470 --> 00:15:32,440
which is the way that most people

00:15:30,610 --> 00:15:34,780
install fronting dependencies

00:15:32,440 --> 00:15:36,550
well one difference is that when I run

00:15:34,780 --> 00:15:37,990
bash install that Sh it execute

00:15:36,550 --> 00:15:40,330
arbitrary code on your machine

00:15:37,990 --> 00:15:42,339
which is a security concern whereas when

00:15:40,330 --> 00:15:43,630
you run npm install' in an execute

00:15:42,339 --> 00:15:45,250
arbitrary code on your machine from

00:15:43,630 --> 00:15:47,080
thousands and thousands of packages this

00:15:45,250 --> 00:15:49,360
is infinitely worse than running a bash

00:15:47,080 --> 00:15:50,529
script to like do install that essays

00:15:49,360 --> 00:15:51,850
because it's all of your dependencies

00:15:50,529 --> 00:15:53,740
and all their dependencies dependencies

00:15:51,850 --> 00:15:55,450
you might be thinking what do you mean

00:15:53,740 --> 00:15:56,560
I'm executing arbitrary code well

00:15:55,450 --> 00:15:58,089
there's this thing called a post install

00:15:56,560 --> 00:15:59,980
hook that any package can put in a

00:15:58,089 --> 00:16:01,720
package JSON and it will just execute

00:15:59,980 --> 00:16:03,880
arbitrary nodejs code which is to say

00:16:01,720 --> 00:16:06,310
arbitrary code on your machine every

00:16:03,880 --> 00:16:07,570
time that package gets installed so if

00:16:06,310 --> 00:16:09,580
that's a virus then cool you just got a

00:16:07,570 --> 00:16:10,990
virus and I think the main reason that

00:16:09,580 --> 00:16:12,700
this hasn't happened yet is just that it

00:16:10,990 --> 00:16:15,310
hasn't happened yet like we haven't had

00:16:12,700 --> 00:16:17,800
like the outbreak of the the NPM virus

00:16:15,310 --> 00:16:19,930
that someone spreads by using this this

00:16:17,800 --> 00:16:21,580
has been this close since 2016 NPM wrote

00:16:19,930 --> 00:16:22,660
a whole blog post about like hey this is

00:16:21,580 --> 00:16:25,240
the thing that can happen to you and

00:16:22,660 --> 00:16:27,310
they post it at the end of this blog

00:16:25,240 --> 00:16:28,660
post like if you want to disable this

00:16:27,310 --> 00:16:30,190
behavior and make it so that post

00:16:28,660 --> 00:16:32,500
install scripts and pre install scripts

00:16:30,190 --> 00:16:34,720
don't run run this command npm config

00:16:32,500 --> 00:16:36,940
set ignores scripts true and then by

00:16:34,720 --> 00:16:38,140
default they just won't run anymore if

00:16:36,940 --> 00:16:39,370
you ask me this probably ought to be the

00:16:38,140 --> 00:16:41,260
default I've had this enabled for

00:16:39,370 --> 00:16:42,790
several years now and although it's less

00:16:41,260 --> 00:16:44,140
convenient there are various organ AMA

00:16:42,790 --> 00:16:45,220
kish OU's with it I still think it's

00:16:44,140 --> 00:16:47,410
better than being vulnerable to this

00:16:45,220 --> 00:16:49,630
virus if you take nothing else away from

00:16:47,410 --> 00:16:51,399
this talk please go home and run this

00:16:49,630 --> 00:16:52,959
command so that if there ever is a virus

00:16:51,399 --> 00:16:54,790
outbreak you are not affected by it

00:16:52,959 --> 00:16:57,100
because I think this is going to happen

00:16:54,790 --> 00:16:58,420
III don't see why it wouldn't happen now

00:16:57,100 --> 00:16:59,620
that there's like blood in the water and

00:16:58,420 --> 00:17:01,089
people have said oh you actually can

00:16:59,620 --> 00:17:04,270
publish malicious packages like event

00:17:01,089 --> 00:17:06,250
stream interesting okay so in conclusion

00:17:04,270 --> 00:17:08,380
though do I think that NPM is going to

00:17:06,250 --> 00:17:09,910
go the way of Bower I don't think so

00:17:08,380 --> 00:17:11,770
I think NPM is here to stay I think it's

00:17:09,910 --> 00:17:13,059
it might have financial troubles github

00:17:11,770 --> 00:17:14,740
will probably bail it out by saying

00:17:13,059 --> 00:17:16,270
here's that here's alternate servers if

00:17:14,740 --> 00:17:17,740
it has more viruses and things like that

00:17:16,270 --> 00:17:19,329
I think that it will survive because of

00:17:17,740 --> 00:17:20,740
those really strong network effects but

00:17:19,329 --> 00:17:22,510
I mean I still wish the entropic folks

00:17:20,740 --> 00:17:25,000
all the best of luck but if I'm making a

00:17:22,510 --> 00:17:27,040
prediction I think that NPM ends up

00:17:25,000 --> 00:17:28,660
surviving whatever further problems come

00:17:27,040 --> 00:17:30,460
its way or at least the ecosystem does

00:17:28,660 --> 00:17:31,870
so I think by the end of 2020 I think

00:17:30,460 --> 00:17:33,610
there will be at least one more security

00:17:31,870 --> 00:17:35,410
incident I think that that seems like a

00:17:33,610 --> 00:17:37,030
fairly safe prediction and by the end of

00:17:35,410 --> 00:17:38,650
2025 I think there actually will have

00:17:37,030 --> 00:17:40,510
been a virus outbreak where someone's

00:17:38,650 --> 00:17:42,910
successfully distributed a virus through

00:17:40,510 --> 00:17:44,770
an NPM package and it will affect a lot

00:17:42,910 --> 00:17:46,419
of people's machines but not those of us

00:17:44,770 --> 00:17:49,840
who have run this again please run this

00:17:46,419 --> 00:17:51,160
and don't don't be a victim of this okay

00:17:49,840 --> 00:17:51,830
which brings me to the final section

00:17:51,160 --> 00:17:54,529
compiled

00:17:51,830 --> 00:17:55,460
- Jas so back in the day if you didn't

00:17:54,529 --> 00:17:57,289
want to write javascript in the browser

00:17:55,460 --> 00:17:59,090
like 2006 error you could write Java

00:17:57,289 --> 00:18:00,769
applets which was awful

00:17:59,090 --> 00:18:02,240
or you could write flash which was a

00:18:00,769 --> 00:18:04,279
thing until it stopped being a thing

00:18:02,240 --> 00:18:06,320
these days the most popular ways to

00:18:04,279 --> 00:18:08,659
compile to j/s is to actually compile a

00:18:06,320 --> 00:18:11,000
J's dialect to j s so we talked about

00:18:08,659 --> 00:18:13,130
CoffeeScript is also dart Babel is like

00:18:11,000 --> 00:18:16,159
compiled future js2 current J's

00:18:13,130 --> 00:18:18,440
typescript compile very slight superset

00:18:16,159 --> 00:18:20,360
of just to j s and spells which is like

00:18:18,440 --> 00:18:22,669
trying to compile to more compact J s

00:18:20,360 --> 00:18:24,260
than some of the alternatives all these

00:18:22,669 --> 00:18:26,480
fundamentally are basically the same

00:18:24,260 --> 00:18:28,580
upsides and same downsides as JavaScript

00:18:26,480 --> 00:18:29,840
I mean they are JavaScript dialects any

00:18:28,580 --> 00:18:31,340
number of them could have the tag line

00:18:29,840 --> 00:18:33,019
it's just JavaScript and people be like

00:18:31,340 --> 00:18:33,950
okay that's pretty much true even

00:18:33,019 --> 00:18:36,289
CoffeeScript had that tag line

00:18:33,950 --> 00:18:37,909
typescript certainly does but there are

00:18:36,289 --> 00:18:39,409
other options which are not JavaScript

00:18:37,909 --> 00:18:40,820
dialects which actually have pretty

00:18:39,409 --> 00:18:42,350
different upsides and downsides of

00:18:40,820 --> 00:18:43,610
JavaScript we've heard about a couple of

00:18:42,350 --> 00:18:45,710
them David Nolan talked about closure

00:18:43,610 --> 00:18:47,809
script yesterday we heard about reason

00:18:45,710 --> 00:18:49,700
ml from brian phelps and i'm here

00:18:47,809 --> 00:18:50,960
representing the Elm core team all of

00:18:49,700 --> 00:18:53,000
these are going to have sort of

00:18:50,960 --> 00:18:54,500
fundamentally different experience than

00:18:53,000 --> 00:18:55,549
writing JavaScript it feels like writing

00:18:54,500 --> 00:18:57,130
a different programming language because

00:18:55,549 --> 00:18:59,059
it is a different programming language

00:18:57,130 --> 00:19:01,940
one thing that's different about these

00:18:59,059 --> 00:19:03,889
that's from from my experience is that

00:19:01,940 --> 00:19:06,200
using ejs alterative is actually cheat

00:19:03,889 --> 00:19:07,549
code for hiring good people I actually

00:19:06,200 --> 00:19:08,929
don't know how we hired anyone at no

00:19:07,549 --> 00:19:10,580
ridic before we started using Elm

00:19:08,929 --> 00:19:12,200
because pretty much everybody who

00:19:10,580 --> 00:19:14,240
applies these days which is a lot of

00:19:12,200 --> 00:19:15,919
people like we hired a head of talent

00:19:14,240 --> 00:19:17,330
and she commented I have never seen an

00:19:15,919 --> 00:19:19,549
inbound pipeline this strong in my

00:19:17,330 --> 00:19:20,779
entire career all the cover letters say

00:19:19,549 --> 00:19:23,000
Elliman them because the number of

00:19:20,779 --> 00:19:24,919
people who want to use elm is a lot

00:19:23,000 --> 00:19:26,000
bigger than the proportion of companies

00:19:24,919 --> 00:19:27,649
that have taken the plunge and are

00:19:26,000 --> 00:19:29,419
willing to actually use it and then hire

00:19:27,649 --> 00:19:31,190
for it something there's a misperception

00:19:29,419 --> 00:19:32,779
commonly like intuitively you might

00:19:31,190 --> 00:19:34,279
think Oh it'll be hard to hire people

00:19:32,779 --> 00:19:35,269
how will we possibly hire people I admit

00:19:34,279 --> 00:19:39,289
I don't know how we hired anyone before

00:19:35,269 --> 00:19:40,760
Elm because it was way way harder so if

00:19:39,289 --> 00:19:41,960
you're wondering like you know why might

00:19:40,760 --> 00:19:43,159
I use something like this I can

00:19:41,960 --> 00:19:44,539
certainly speak to my experience with

00:19:43,159 --> 00:19:46,130
Elm I mean I talked about like okay it

00:19:44,539 --> 00:19:47,779
renders fast in the top j/s frameworks

00:19:46,130 --> 00:19:50,809
emits smaller bundles on top J's

00:19:47,779 --> 00:19:52,789
frameworks also know runtime exceptions

00:19:50,809 --> 00:19:54,950
like it almost never crashes in practice

00:19:52,789 --> 00:19:57,049
this is like our error logs this is a

00:19:54,950 --> 00:19:59,179
JavaScript errors we've had like 60,000

00:19:57,049 --> 00:20:01,429
plus since we started using element 2015

00:19:59,179 --> 00:20:03,169
Elm ones it's not zero it's just zero

00:20:01,429 --> 00:20:04,880
pixels like if I were to zoom all the

00:20:03,169 --> 00:20:05,490
way and you could see like it has

00:20:04,880 --> 00:20:07,440
happened

00:20:05,490 --> 00:20:08,580
not never not literally never but I mean

00:20:07,440 --> 00:20:10,110
this is obviously not something we're

00:20:08,580 --> 00:20:11,700
thinking about generally speaking if it

00:20:10,110 --> 00:20:13,520
compiles it just works and then doesn't

00:20:11,700 --> 00:20:15,300
crash it's pretty great

00:20:13,520 --> 00:20:16,710
also this is a completely separate

00:20:15,300 --> 00:20:18,210
package ecosystem so all the stuff I

00:20:16,710 --> 00:20:19,679
just said about NPM doesn't apply to

00:20:18,210 --> 00:20:22,530
Ellen projects like we have our own

00:20:19,679 --> 00:20:23,940
package ecosystem it doesn't have posted

00:20:22,530 --> 00:20:27,020
so hooks for free it's all hooks it's

00:20:23,940 --> 00:20:29,220
it's really fast and it's really nice

00:20:27,020 --> 00:20:30,720
another thing is the error messages this

00:20:29,220 --> 00:20:32,460
is like a really common thing that

00:20:30,720 --> 00:20:33,900
people praise about Elms so this is from

00:20:32,460 --> 00:20:36,179
the most recent release of M which was

00:20:33,900 --> 00:20:38,700
last Monday if you get a syntax error

00:20:36,179 --> 00:20:40,140
now it reports it like this hey I was

00:20:38,700 --> 00:20:41,670
parsing an import until I got stuck here

00:20:40,140 --> 00:20:43,170
this is maybe if you tried to use

00:20:41,670 --> 00:20:44,850
JavaScript syntax for imports rather

00:20:43,170 --> 00:20:46,800
than Elm syntax because it's a different

00:20:44,850 --> 00:20:48,210
programming language and says hey I was

00:20:46,800 --> 00:20:49,620
expecting to see a module name next like

00:20:48,210 --> 00:20:51,030
in these examples it shows like multiple

00:20:49,620 --> 00:20:53,040
code examples of like how to do it

00:20:51,030 --> 00:20:54,270
properly and then it's like okay and you

00:20:53,040 --> 00:20:56,520
know they all start with capital letters

00:20:54,270 --> 00:20:58,050
and by the way go ahead and read this

00:20:56,520 --> 00:21:00,870
link if you want to learn more about it

00:20:58,050 --> 00:21:02,100
like this is a pretty I just picked this

00:21:00,870 --> 00:21:04,170
one kind of at random but there's so

00:21:02,100 --> 00:21:05,910
many examples of this we're like day to

00:21:04,170 --> 00:21:07,380
day writing Elm code like I just get

00:21:05,910 --> 00:21:09,270
this level of help from the compiler

00:21:07,380 --> 00:21:10,350
just feels really nice like I got I

00:21:09,270 --> 00:21:13,080
don't know I don't know how to describe

00:21:10,350 --> 00:21:15,210
it the best way that I found to describe

00:21:13,080 --> 00:21:17,490
the experiences maybe by contrasting it

00:21:15,210 --> 00:21:19,470
with my experiences whenever I find

00:21:17,490 --> 00:21:20,580
myself back in the JSE Co system like

00:21:19,470 --> 00:21:22,559
come on I'm maintaining one of my node

00:21:20,580 --> 00:21:25,250
CL eyes or something like just imagine

00:21:22,559 --> 00:21:30,690
if in your life building web you eyes

00:21:25,250 --> 00:21:32,280
like things normally worked like I I

00:21:30,690 --> 00:21:33,929
don't know how else to say it but like I

00:21:32,280 --> 00:21:35,400
mean normally when I'm writing

00:21:33,929 --> 00:21:37,170
JavaScript code like I'm installing a

00:21:35,400 --> 00:21:38,280
package I'm like this didn't work with

00:21:37,170 --> 00:21:39,210
it why didn't this work with this thing

00:21:38,280 --> 00:21:40,440
like in Elm

00:21:39,210 --> 00:21:42,420
I just install packages Nate and they

00:21:40,440 --> 00:21:43,650
normally just work ok whatever and then

00:21:42,420 --> 00:21:45,210
I'm like going to upgrade a package I'm

00:21:43,650 --> 00:21:46,740
like wait wait this used to work but now

00:21:45,210 --> 00:21:48,780
it it stopped working like what's what's

00:21:46,740 --> 00:21:50,730
going on I'm like googling stuff and now

00:21:48,780 --> 00:21:51,929
I'm like ok ok fine and then I go back

00:21:50,730 --> 00:21:54,350
to Elm and I'm like how everything works

00:21:51,929 --> 00:21:56,460
again nice ok cool

00:21:54,350 --> 00:21:58,200
everything is like this like it compiles

00:21:56,460 --> 00:22:00,270
and it normally just works like IIIi

00:21:58,200 --> 00:22:01,650
haven't been able to express this

00:22:00,270 --> 00:22:04,230
feeling in any other way just then like

00:22:01,650 --> 00:22:06,000
whenever I go back I'm just like am i

00:22:04,230 --> 00:22:07,950
dumb like what how come I can't get

00:22:06,000 --> 00:22:09,090
anything to work anymore but in Elma

00:22:07,950 --> 00:22:10,890
it's just normal not a hundred percent

00:22:09,090 --> 00:22:11,820
of time but normally things work out

00:22:10,890 --> 00:22:13,080
pretty well and if that sounds

00:22:11,820 --> 00:22:16,380
interesting you should check out the Elm

00:22:13,080 --> 00:22:17,970
website and learn more but I also know

00:22:16,380 --> 00:22:18,990
from experience giving elm talks and

00:22:17,970 --> 00:22:20,309
stuff that a

00:22:18,990 --> 00:22:21,929
pretty small percentage of people in the

00:22:20,309 --> 00:22:23,610
audience will actually go and do that

00:22:21,929 --> 00:22:25,260
probably an even smaller percentage will

00:22:23,610 --> 00:22:27,179
actually run the NPM config command but

00:22:25,260 --> 00:22:29,940
I'm being realistic here if I'm making

00:22:27,179 --> 00:22:32,580
predictions about the future I know that

00:22:29,940 --> 00:22:34,830
you know this is a not JavaScript thing

00:22:32,580 --> 00:22:36,300
and JavaScript rules the web and I think

00:22:34,830 --> 00:22:37,890
that will continue like at the end of

00:22:36,300 --> 00:22:40,830
the day I really do think that the next

00:22:37,890 --> 00:22:42,270
big thing in the web is typescript it's

00:22:40,830 --> 00:22:43,350
not going to be Elm I don't think

00:22:42,270 --> 00:22:46,170
Ellen's going to take over the world I

00:22:43,350 --> 00:22:48,240
think typescript well this graph will

00:22:46,170 --> 00:22:49,860
continue but that doesn't mean that I

00:22:48,240 --> 00:22:51,780
necessarily am going to be getting on

00:22:49,860 --> 00:22:53,850
this train like to me I'm like yeah I

00:22:51,780 --> 00:22:55,170
think Elm is much nicer I have no

00:22:53,850 --> 00:22:56,880
interest in that and there are a lot of

00:22:55,170 --> 00:22:58,890
people who feel the same way just not as

00:22:56,880 --> 00:23:00,150
many as feel that you know types good as

00:22:58,890 --> 00:23:01,500
well if they're gonna go with and that's

00:23:00,150 --> 00:23:03,179
fine I mean really at the end of the day

00:23:01,500 --> 00:23:04,980
again the point of this is not to win

00:23:03,179 --> 00:23:06,990
popularity contests like pearl had won

00:23:04,980 --> 00:23:08,970
the popularity contest the point is to

00:23:06,990 --> 00:23:10,470
find a technology that you're happy with

00:23:08,970 --> 00:23:12,690
and that you continue to be happy with

00:23:10,470 --> 00:23:14,130
over the next 5-10 years etc I've been

00:23:12,690 --> 00:23:15,600
using elm for about five years and I

00:23:14,130 --> 00:23:17,580
definitely see myself using it for the

00:23:15,600 --> 00:23:18,840
next five years it's something that I'm

00:23:17,580 --> 00:23:20,730
happy with and that I think is going to

00:23:18,840 --> 00:23:22,500
continue to age well so my final

00:23:20,730 --> 00:23:24,000
prediction is that I think that Jo saw

00:23:22,500 --> 00:23:25,590
alternatives same niche but that they

00:23:24,000 --> 00:23:26,850
aged well I think a lot of people who

00:23:25,590 --> 00:23:28,860
were betting on these technologies today

00:23:26,850 --> 00:23:31,500
are going to continue to be happy with

00:23:28,860 --> 00:23:32,790
those bets so certainly with Elm so by

00:23:31,500 --> 00:23:34,050
the end of 2020 I think they'll still be

00:23:32,790 --> 00:23:35,280
growing we actually add for Ellen

00:23:34,050 --> 00:23:36,150
conferences this year fairly a lot of

00:23:35,280 --> 00:23:38,910
people I talked to who didn't know that

00:23:36,150 --> 00:23:40,350
but yeah I'm still growing but not as

00:23:38,910 --> 00:23:41,760
fast as typescript typescript is taking

00:23:40,350 --> 00:23:44,460
over the world which Elm is not and

00:23:41,760 --> 00:23:45,630
that's fine by the end of 2025 I think

00:23:44,460 --> 00:23:47,340
that they will have aged well although

00:23:45,630 --> 00:23:48,960
of course typescript will have continued

00:23:47,340 --> 00:23:51,950
to grow and will at that point still be

00:23:48,960 --> 00:23:54,360
more popular all right so to summarize

00:23:51,950 --> 00:23:55,980
it started out by talking about the

00:23:54,360 --> 00:23:57,210
passive I'll just choose boring

00:23:55,980 --> 00:23:59,910
technology and everything will be fine

00:23:57,210 --> 00:24:01,559
not necessarily a lot of times it's more

00:23:59,910 --> 00:24:02,940
about correctly predicting which

00:24:01,559 --> 00:24:04,790
technology's end up being something that

00:24:02,940 --> 00:24:06,929
you're happy with over the long haul

00:24:04,790 --> 00:24:08,640
talked about predicting is safer than

00:24:06,929 --> 00:24:10,050
following blindly which can lead you

00:24:08,640 --> 00:24:12,150
into the same kind of situation we would

00:24:10,050 --> 00:24:13,860
have been in with pearl made a few

00:24:12,150 --> 00:24:16,530
predictions about typescript webassembly

00:24:13,860 --> 00:24:18,000
the web ecosystem and compiled ejs I

00:24:16,530 --> 00:24:19,860
predict the tape script is going to take

00:24:18,000 --> 00:24:21,600
over the jas world web assembly is going

00:24:19,860 --> 00:24:23,490
to expand the web app pi rather than

00:24:21,600 --> 00:24:24,929
replacing things I think NPM is going to

00:24:23,490 --> 00:24:26,790
continue to have problems but ultimately

00:24:24,929 --> 00:24:28,530
it's going to survive them and finally I

00:24:26,790 --> 00:24:29,880
think that the j/s alternatives like Elm

00:24:28,530 --> 00:24:31,740
closure script reason ml I think they're

00:24:29,880 --> 00:24:33,090
gonna stay nice in terms of popularity

00:24:31,740 --> 00:24:35,130
that they're gonna age well and they're

00:24:33,090 --> 00:24:37,170
a good thing to bet on so what will I do

00:24:35,130 --> 00:24:38,520
personally well I think I made pretty

00:24:37,170 --> 00:24:40,350
clear could you keep using yelling

00:24:38,520 --> 00:24:47,429
because I think it will continue to age

00:24:40,350 --> 00:24:50,940
well thanks very much Richard

00:24:47,429 --> 00:24:53,429
Feldman you have so much energy thank

00:24:50,940 --> 00:24:54,900
you so much this was a great talk to

00:24:53,429 --> 00:24:57,240
have as the last minute we have some

00:24:54,900 --> 00:24:59,850
questions do you expect AI and machine

00:24:57,240 --> 00:25:00,630
learning to make leaps in popularity and

00:24:59,850 --> 00:25:02,300
development

00:25:00,630 --> 00:25:04,559
what about pure robotics and automation

00:25:02,300 --> 00:25:06,690
that's a great question so as far as

00:25:04,559 --> 00:25:08,820
popularity goes I think that AI and Mel

00:25:06,690 --> 00:25:10,980
and I like already are trending that way

00:25:08,820 --> 00:25:12,990
I think there's probably more to come

00:25:10,980 --> 00:25:14,280
but I also think that if I were to

00:25:12,990 --> 00:25:15,690
compare it to typescript I think

00:25:14,280 --> 00:25:17,010
typescript is underhyped

00:25:15,690 --> 00:25:19,200
relative to how far I think it's gonna

00:25:17,010 --> 00:25:20,400
go I think AI and m/l are overhyped

00:25:19,200 --> 00:25:21,750
relative to how far I think they're

00:25:20,400 --> 00:25:23,040
gonna go I think the number of

00:25:21,750 --> 00:25:24,720
applications the number of ways that

00:25:23,040 --> 00:25:27,300
they're gonna be transformative at least

00:25:24,720 --> 00:25:28,530
in the next decade is is not like Ron

00:25:27,300 --> 00:25:29,790
could be like singularity we're here

00:25:28,530 --> 00:25:31,320
everyone's thinking their way through

00:25:29,790 --> 00:25:34,140
every problem and the machines just like

00:25:31,320 --> 00:25:35,250
you know connect with our brains I don't

00:25:34,140 --> 00:25:37,920
think we're gonna get there in the next

00:25:35,250 --> 00:25:40,050
like decade maybe eventually but I don't

00:25:37,920 --> 00:25:41,610
think anytime soon more more than that I

00:25:40,050 --> 00:25:43,260
think if you look at the demos of today

00:25:41,610 --> 00:25:45,030
of like what AI ml are doing I think

00:25:43,260 --> 00:25:46,440
it's gonna be variations on that like

00:25:45,030 --> 00:25:48,000
incremental improvements on that not

00:25:46,440 --> 00:25:50,100
really like earth-shattering stuff like

00:25:48,000 --> 00:25:52,410
a lot of people are predicting in

00:25:50,100 --> 00:25:54,960
european-wide alum is not as popular as

00:25:52,410 --> 00:25:56,850
react what is it missing to become more

00:25:54,960 --> 00:25:58,500
popular yeah a number one reason that

00:25:56,850 --> 00:26:00,270
Elm is not as popular as react is that

00:25:58,500 --> 00:26:01,620
Elm is not JavaScript I mean that's

00:26:00,270 --> 00:26:03,030
literally it like if you're building

00:26:01,620 --> 00:26:04,830
anything that is not JavaScript its

00:26:03,030 --> 00:26:06,750
popularity is going to be infinitesimal

00:26:04,830 --> 00:26:08,340
compared to JavaScript like the the

00:26:06,750 --> 00:26:10,950
cultural momentum behind javascript is

00:26:08,340 --> 00:26:12,630
just absolutely massive any programming

00:26:10,950 --> 00:26:14,010
language that is not a JavaScript

00:26:12,630 --> 00:26:15,900
dialect where the learning curve

00:26:14,010 --> 00:26:18,809
compared to JavaScript is like anything

00:26:15,900 --> 00:26:20,220
significant is gonna be really big and I

00:26:18,809 --> 00:26:22,500
think that's that's basically going to

00:26:20,220 --> 00:26:24,450
mean that I'm willing to go on record

00:26:22,500 --> 00:26:26,070
and say I don't think that anything that

00:26:24,450 --> 00:26:28,170
is not a JavaScript dialect in the next

00:26:26,070 --> 00:26:29,429
10 years is going to get anywhere near

00:26:28,170 --> 00:26:30,929
the popularity of anything that is

00:26:29,429 --> 00:26:33,750
fundamentally JavaScript I think that's

00:26:30,929 --> 00:26:35,190
just how strong the momentum is so again

00:26:33,750 --> 00:26:36,870
but I think that's fine like you also

00:26:35,190 --> 00:26:38,429
need to be significantly different from

00:26:36,870 --> 00:26:40,559
JavaScript if you have any hope of being

00:26:38,429 --> 00:26:43,140
significantly better than JavaScript and

00:26:40,559 --> 00:26:45,010
like I think the delta between my j/s

00:26:43,140 --> 00:26:46,510
experience and my Elm experience is

00:26:45,010 --> 00:26:48,310
as big as it is because it's different

00:26:46,510 --> 00:26:51,370
and that also is why it's not ever going

00:26:48,310 --> 00:26:53,230
to be as popular all right our AB scale

00:26:51,370 --> 00:26:55,210
to millions of customers and performance

00:26:53,230 --> 00:26:59,200
is critical and doesn't support coats

00:26:55,210 --> 00:27:01,180
pudding though yeah and is it is a deal

00:26:59,200 --> 00:27:02,350
breaker for our team solution well looky

00:27:01,180 --> 00:27:04,150
boy that was yeah sure

00:27:02,350 --> 00:27:05,350
yeah so that's a great point um please

00:27:04,150 --> 00:27:06,940
get in touch with me because basically

00:27:05,350 --> 00:27:08,800
the the steps that we wanted to take

00:27:06,940 --> 00:27:10,270
we're like cool first let's make the

00:27:08,800 --> 00:27:12,100
bundle size is really small with code

00:27:10,270 --> 00:27:13,780
slimming and then we'll look at what are

00:27:12,100 --> 00:27:15,880
people's remaining problems like in

00:27:13,780 --> 00:27:18,580
practice like hey I have this elm app

00:27:15,880 --> 00:27:19,540
and it's too big because of X and what

00:27:18,580 --> 00:27:20,950
we've heard from people were actually

00:27:19,540 --> 00:27:22,090
building L maps as they're like actually

00:27:20,950 --> 00:27:23,740
they're not too big anymore we don't

00:27:22,090 --> 00:27:25,420
really want to go up to all the trouble

00:27:23,740 --> 00:27:26,830
of code splitting so never mind

00:27:25,420 --> 00:27:29,230
but if that's you and you're like hey

00:27:26,830 --> 00:27:31,030
even if like it were just like 29

00:27:29,230 --> 00:27:32,500
kilobytes that's too big for me or like

00:27:31,030 --> 00:27:33,940
you know I'm gonna have a million lines

00:27:32,500 --> 00:27:36,820
of code and it's gonna be you know

00:27:33,940 --> 00:27:38,500
however much X that size please come

00:27:36,820 --> 00:27:40,390
talk to me because we're trying to build

00:27:38,500 --> 00:27:42,190
features based on like people's actual

00:27:40,390 --> 00:27:43,960
needs and use cases rather than just

00:27:42,190 --> 00:27:45,250
like Oh code splitting we should like

00:27:43,960 --> 00:27:46,420
check that off because everyone's doing

00:27:45,250 --> 00:27:48,490
it like we want to actually solve the

00:27:46,420 --> 00:27:50,140
problem of page load times and bundle

00:27:48,490 --> 00:27:52,600
sizes rather than just like checking

00:27:50,140 --> 00:27:53,620
features off a list yeah come talk to me

00:27:52,600 --> 00:27:55,660
all right

00:27:53,620 --> 00:27:57,880
last question on this stage for you do

00:27:55,660 --> 00:27:59,950
you think ECMAScript will continue to be

00:27:57,880 --> 00:28:00,700
the dumb and jaea standard yeah so

00:27:59,950 --> 00:28:01,300
that's that's a really interesting

00:28:00,700 --> 00:28:02,740
question

00:28:01,300 --> 00:28:04,150
I'm guessing where this is coming from

00:28:02,740 --> 00:28:05,620
is like so there's ACMA script which is

00:28:04,150 --> 00:28:07,060
like hey this is how java ships would be

00:28:05,620 --> 00:28:08,520
and then there's typescript which is

00:28:07,060 --> 00:28:10,570
kind of like becoming the default

00:28:08,520 --> 00:28:12,490
compiler if i'm right if my prediction

00:28:10,570 --> 00:28:14,950
is right and it ends up taking up taking

00:28:12,490 --> 00:28:16,720
over what happens if typescript says hey

00:28:14,950 --> 00:28:18,490
you know what like ACMA script disagrees

00:28:16,720 --> 00:28:19,780
with us and we don't care we're gonna

00:28:18,490 --> 00:28:21,520
keep doing things the typescript way

00:28:19,780 --> 00:28:22,870
this is certainly not what happened to

00:28:21,520 --> 00:28:24,400
CoffeeScript like CoffeeScript you know

00:28:22,870 --> 00:28:25,390
the ACMA script ended up adopting some

00:28:24,400 --> 00:28:27,550
of copies to have stuff and then

00:28:25,390 --> 00:28:30,520
replaced it so yeah I think it's a

00:28:27,550 --> 00:28:32,740
totally valid question I think that III

00:28:30,520 --> 00:28:34,060
don't have super high confidence in like

00:28:32,740 --> 00:28:35,290
whether or not it will continue to be

00:28:34,060 --> 00:28:36,850
the dominant jazz standard I think if

00:28:35,290 --> 00:28:38,980
it's not it will be specifically because

00:28:36,850 --> 00:28:40,150
ACMA script and typescript clash and

00:28:38,980 --> 00:28:43,540
typescript said hey look we're not gonna

00:28:40,150 --> 00:28:46,840
change but I think it's probably more

00:28:43,540 --> 00:28:48,640
likely than not that if ACMA script did

00:28:46,840 --> 00:28:51,850
clash with typescript in some way where

00:28:48,640 --> 00:28:53,680
ty script was like yeah you know we're

00:28:51,850 --> 00:28:55,390
just we disagree about what's right here

00:28:53,680 --> 00:28:57,310
I think typescript would eventually cave

00:28:55,390 --> 00:28:58,560
I think that's more likely I think it's

00:28:57,310 --> 00:28:59,670
pretty plausible that

00:28:58,560 --> 00:29:01,470
one thing I've heard people talk about

00:28:59,670 --> 00:29:03,090
is maybe Agri script will come up with a

00:29:01,470 --> 00:29:05,100
standard that says hey this is what

00:29:03,090 --> 00:29:06,420
types JavaScript is and it'll probably

00:29:05,100 --> 00:29:08,010
be very close to type scrip but maybe

00:29:06,420 --> 00:29:09,360
there'll be some differences I wouldn't

00:29:08,010 --> 00:29:10,650
be surprised if typescript said okay

00:29:09,360 --> 00:29:12,750
fine we'll just like get on board and

00:29:10,650 --> 00:29:15,090
now typescript becomes the the dominant

00:29:12,750 --> 00:29:16,620
compiler of the x-men script type system

00:29:15,090 --> 00:29:17,940
so I think it's more like think they're

00:29:16,620 --> 00:29:19,650
not but I want to be honest that I don't

00:29:17,940 --> 00:29:21,900
have a super high level of confidence in

00:29:19,650 --> 00:29:24,330
that one way or the other all right

00:29:21,900 --> 00:29:26,600
thank you so much everyone is Richard

00:29:24,330 --> 00:29:26,600
bellman

00:29:26,920 --> 00:29:30,079

YouTube URL: https://www.youtube.com/watch?v=okrB3aJtUaw


