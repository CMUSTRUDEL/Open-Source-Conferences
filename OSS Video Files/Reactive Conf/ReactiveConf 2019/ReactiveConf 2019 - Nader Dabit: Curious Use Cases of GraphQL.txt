Title: ReactiveConf 2019 - Nader Dabit: Curious Use Cases of GraphQL
Publication date: 2019-10-30
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Millennium stage
-------------------------------------------------------------------
As GraphQL moves into the mainstream, the tooling & ecosystem has grown and has made it possible to do much more with GraphQL than using it as just a data layer. In this talk, I’ll show how developers are using GraphQL as an API gateway to accomplish things that you may have never thought possible.

More details:

When we think of GraphQL at the resolver level, we typically associate some type of database as the resolver data source, but in practice a resolver is simply a function. What this means is that we can do much more with our GraphQL APIs & our resolvers than we ever thought possible, including things like taking existing REST APIs & transforming them into GraphQL APIs (http resolvers), passing the query to Lambda or serverless functions for processing & returning the response via a GraphQL query (for things like AI & ML), geospatial & time-based queries (passing the query to Elasticsearch), & even VR & AR apps (passing in user location / app info & using the subscription to transmit image assets). In this talk, I’ll walk through what this looks like in theory & in practice, demoing 4 different applications that implement this functionality & showing the code that make the magic happen.
Captions: 
	00:00:02,750 --> 00:00:11,850
[Music]

00:00:16,680 --> 00:00:21,730
so hello first of all thank you for

00:00:19,930 --> 00:00:24,040
having me I'm really excited to be in

00:00:21,730 --> 00:00:25,540
Prague one of my favorite cities in the

00:00:24,040 --> 00:00:27,400
world actually I was here a couple of

00:00:25,540 --> 00:00:29,140
years ago and this time I'm getting a

00:00:27,400 --> 00:00:31,630
stay a couple of extra days and explore

00:00:29,140 --> 00:00:33,160
so I'm really excited about that but I

00:00:31,630 --> 00:00:34,750
want to jump straight into my talk

00:00:33,160 --> 00:00:37,420
because I have a lot to cover this talk

00:00:34,750 --> 00:00:39,129
is talk it's really like formed around

00:00:37,420 --> 00:00:41,170
graph QL but in reality what I'm gonna

00:00:39,129 --> 00:00:43,420
be showing is a combination of graph QL

00:00:41,170 --> 00:00:45,129
and front-end technologies so kind of

00:00:43,420 --> 00:00:47,799
mainly what I'm using is react but the

00:00:45,129 --> 00:00:49,390
ideas can apply to any platform there's

00:00:47,799 --> 00:00:52,479
three main ideas I want to drive home

00:00:49,390 --> 00:00:55,659
one of those is around API gateway and

00:00:52,479 --> 00:00:57,640
graph QL is adds an API gateway so

00:00:55,659 --> 00:01:00,250
essentially instead of thinking of graph

00:00:57,640 --> 00:01:02,500
QL as a way that just interact with your

00:01:00,250 --> 00:01:04,420
data sources instead thinking of graph

00:01:02,500 --> 00:01:06,640
QL as a way to interact with any service

00:01:04,420 --> 00:01:08,770
or any microt service or any function

00:01:06,640 --> 00:01:11,799
anything that's outside of the core of

00:01:08,770 --> 00:01:13,000
your application also developer velocity

00:01:11,799 --> 00:01:15,369
a lot of the things I'm going to show

00:01:13,000 --> 00:01:17,620
today are kind of focused really on

00:01:15,369 --> 00:01:19,540
rapid development rapid iteration

00:01:17,620 --> 00:01:21,940
prototyping experimenting and

00:01:19,540 --> 00:01:26,410
essentially just developer velocity and

00:01:21,940 --> 00:01:28,510
developer experience and then finally

00:01:26,410 --> 00:01:29,860
the future of graph QL the things that

00:01:28,510 --> 00:01:31,540
I'm gonna be shown today I think are

00:01:29,860 --> 00:01:34,180
really where we're headed in this

00:01:31,540 --> 00:01:37,060
community and if you really have watched

00:01:34,180 --> 00:01:38,410
and seen some of the blog posts and

00:01:37,060 --> 00:01:40,120
talks that I've done I'm really

00:01:38,410 --> 00:01:41,710
interested in the future I'm really

00:01:40,120 --> 00:01:43,870
interested in futurism and where things

00:01:41,710 --> 00:01:45,820
are going and trying to ride the wave

00:01:43,870 --> 00:01:48,310
and kind of be where the next thing is

00:01:45,820 --> 00:01:51,330
as its cresting and that way we can

00:01:48,310 --> 00:01:54,400
benefit from you know that experience so

00:01:51,330 --> 00:01:57,100
welcome to my talk this is curious cases

00:01:54,400 --> 00:01:58,620
of graph QL my name is Nader dabit you

00:01:57,100 --> 00:02:01,570
can follow me on Twitter and github

00:01:58,620 --> 00:02:04,090
medium and dev dot too with dabit 3 i'll

00:02:01,570 --> 00:02:06,580
follow you back web and mobile developer

00:02:04,090 --> 00:02:08,200
and author and a podcaster my two books

00:02:06,580 --> 00:02:09,310
are react native in action and full

00:02:08,200 --> 00:02:10,959
stack server lists

00:02:09,310 --> 00:02:13,209
full stack server lists from O'Reilly

00:02:10,959 --> 00:02:14,319
publications goes along with a lot of

00:02:13,209 --> 00:02:19,090
the stuff I'm going to be talking about

00:02:14,319 --> 00:02:21,190
today and this is the layout of my talk

00:02:19,090 --> 00:02:23,500
so we have an introduction to modern AWS

00:02:21,190 --> 00:02:25,210
tech I'm going to build an API in five

00:02:23,500 --> 00:02:28,410
minutes an API that include

00:02:25,210 --> 00:02:31,420
authentication authorization database

00:02:28,410 --> 00:02:33,670
data connections relationships between

00:02:31,420 --> 00:02:35,440
the data and we're gonna test it out all

00:02:33,670 --> 00:02:37,330
within five minutes and then demo

00:02:35,440 --> 00:02:39,340
overload I have a lot of demos to show

00:02:37,330 --> 00:02:42,160
so we're gonna jump right in there I

00:02:39,340 --> 00:02:44,950
work for AWS on the client technologies

00:02:42,160 --> 00:02:48,160
team and the two technologies that work

00:02:44,950 --> 00:02:51,310
most closely with or AWS amplify and AWS

00:02:48,160 --> 00:02:53,140
app sync AWS app sync is a managed graph

00:02:51,310 --> 00:02:55,030
QL service so you can think of this

00:02:53,140 --> 00:02:57,550
essentially is something like firebase

00:02:55,030 --> 00:02:59,290
but for graph QL and we have a lot of

00:02:57,550 --> 00:03:01,360
different features kind of built into it

00:02:59,290 --> 00:03:03,100
one of the main ones that people really

00:03:01,360 --> 00:03:05,110
enjoy is that we have enterprise

00:03:03,100 --> 00:03:06,850
security and authorization baked in

00:03:05,110 --> 00:03:09,970
something we've really thought about a

00:03:06,850 --> 00:03:11,620
long term and then there's amplify

00:03:09,970 --> 00:03:13,720
amplify is a couple of things

00:03:11,620 --> 00:03:15,160
it's a command-line interface it's a

00:03:13,720 --> 00:03:16,870
client library that allows you to

00:03:15,160 --> 00:03:19,120
interact with services that you've

00:03:16,870 --> 00:03:20,650
created from the command line a toolkit

00:03:19,120 --> 00:03:23,770
that allows you to do things like graph

00:03:20,650 --> 00:03:26,260
QL code generation and we have framework

00:03:23,770 --> 00:03:29,320
specific components for react view react

00:03:26,260 --> 00:03:31,570
native angular and ionic and what I'm

00:03:29,320 --> 00:03:32,830
going to demo today for this API that

00:03:31,570 --> 00:03:35,320
we're going to build in five minutes is

00:03:32,830 --> 00:03:37,900
the graph QL transform library which is

00:03:35,320 --> 00:03:40,540
an STL over your graph QL schema that

00:03:37,900 --> 00:03:42,280
allows you to add decorators or

00:03:40,540 --> 00:03:44,680
directives to your schema and build out

00:03:42,280 --> 00:03:46,420
a more complex application than writing

00:03:44,680 --> 00:03:48,100
all this manually a lot of the

00:03:46,420 --> 00:03:51,010
applications that we write today fall

00:03:48,100 --> 00:03:53,110
into the lines of crud list operate list

00:03:51,010 --> 00:03:55,750
applications so if you have a to-do app

00:03:53,110 --> 00:03:57,640
you might have a base to do type but you

00:03:55,750 --> 00:04:00,430
need a way to create read update delete

00:03:57,640 --> 00:04:02,830
and list these to do's you also might

00:04:00,430 --> 00:04:05,980
need some type of data source to go

00:04:02,830 --> 00:04:08,110
along with this base type and you need a

00:04:05,980 --> 00:04:09,430
way to connect the operations to the

00:04:08,110 --> 00:04:12,280
data source so you need graph QL

00:04:09,430 --> 00:04:14,650
resolvers we have directives that can do

00:04:12,280 --> 00:04:17,260
things like generate all this for you at

00:04:14,650 --> 00:04:18,880
model will generate the database all of

00:04:17,260 --> 00:04:21,430
the different resolvers and the schema

00:04:18,880 --> 00:04:23,080
for you from a base type auth will let

00:04:21,430 --> 00:04:25,270
you configure authorization rules

00:04:23,080 --> 00:04:27,400
directly on your schema connection

00:04:25,270 --> 00:04:28,450
allows you to model relationships those

00:04:27,400 --> 00:04:30,940
are the three that I'm going to cover

00:04:28,450 --> 00:04:32,680
today so the challenge that I have for

00:04:30,940 --> 00:04:34,810
myself is I want to build a conference

00:04:32,680 --> 00:04:37,240
API for reactive comp in five minutes

00:04:34,810 --> 00:04:39,370
that means we did a schema resolvers a

00:04:37,240 --> 00:04:41,050
database authorization

00:04:39,370 --> 00:04:42,910
and we want to model relationships

00:04:41,050 --> 00:04:45,460
between the data we want to actually

00:04:42,910 --> 00:04:50,680
test this out also locally so we'll get

00:04:45,460 --> 00:04:53,650
started here I'm starting off with an

00:04:50,680 --> 00:04:58,020
amplified project and what I'm gonna do

00:04:53,650 --> 00:04:58,020
is I'm gonna go ahead and add the API

00:04:58,169 --> 00:05:05,919
can everyone see that pretty good so to

00:05:03,790 --> 00:05:08,320
add an API you can run amplify add and

00:05:05,919 --> 00:05:09,400
then API and we can choose between graph

00:05:08,320 --> 00:05:12,250
QL and rest

00:05:09,400 --> 00:05:14,229
I'll give the API a name or I'll just

00:05:12,250 --> 00:05:16,270
take the default I can choose the

00:05:14,229 --> 00:05:17,950
authorization type for the API so if

00:05:16,270 --> 00:05:19,720
you'd like to bring auth0 you can you

00:05:17,950 --> 00:05:21,669
choose something like open ID connect if

00:05:19,720 --> 00:05:24,040
you want to use a managed authorization

00:05:21,669 --> 00:05:25,720
service or authentication service amazon

00:05:24,040 --> 00:05:27,610
kognito user pulls is what I'm gonna go

00:05:25,720 --> 00:05:29,950
with because that's a managed service

00:05:27,610 --> 00:05:31,419
that we work with we can then configure

00:05:29,950 --> 00:05:33,580
some advanced settings which I'm not

00:05:31,419 --> 00:05:35,530
going to do now if we have a graph QL

00:05:33,580 --> 00:05:36,940
schema that we can reference I can go

00:05:35,530 --> 00:05:38,830
ahead and choose that here but since I

00:05:36,940 --> 00:05:40,840
don't I'm gonna go ahead and ask for a

00:05:38,830 --> 00:05:42,280
guided schema creation which will

00:05:40,840 --> 00:05:44,380
essentially just give us three boiler

00:05:42,280 --> 00:05:45,970
plates that we can work with and the boy

00:05:44,380 --> 00:05:47,610
the boiler plates that we can start with

00:05:45,970 --> 00:05:51,220
or a single object with fields

00:05:47,610 --> 00:05:52,870
one-to-many relationships or a schema

00:05:51,220 --> 00:05:55,919
that has authorization rules kind of

00:05:52,870 --> 00:05:57,940
baked in for us to eat to reference but

00:05:55,919 --> 00:05:59,800
it doesn't really matter because we're

00:05:57,940 --> 00:06:01,240
gonna be starting from scratch so I'm

00:05:59,800 --> 00:06:05,950
gonna go ahead and choose yes and we're

00:06:01,240 --> 00:06:09,389
gonna go ahead and edit this schema and

00:06:05,950 --> 00:06:13,539
what we get started off with is a basic

00:06:09,389 --> 00:06:15,010
type of to do and we don't really want

00:06:13,539 --> 00:06:16,930
this we want to conference up so I'm

00:06:15,010 --> 00:06:17,979
gonna go ahead and delete this and we're

00:06:16,930 --> 00:06:21,370
gonna go ahead and start over from

00:06:17,979 --> 00:06:23,590
scratch so we want to talk type we want

00:06:21,370 --> 00:06:26,169
the talk to have an ID a talk name and

00:06:23,590 --> 00:06:28,120
to talk to summary speaker bio etc and

00:06:26,169 --> 00:06:31,150
then we want to have a way to have

00:06:28,120 --> 00:06:32,650
people comment on the talk so we want to

00:06:31,150 --> 00:06:33,880
be able to have communication while the

00:06:32,650 --> 00:06:35,800
talk is going on people can ask

00:06:33,880 --> 00:06:37,479
questions with each other and then maybe

00:06:35,800 --> 00:06:38,830
when the talk is over the speaker can

00:06:37,479 --> 00:06:41,710
then you know go back and look at the

00:06:38,830 --> 00:06:44,950
comments and maybe respond now we need

00:06:41,710 --> 00:06:47,950
to model a relationship so what I'm

00:06:44,950 --> 00:06:50,110
gonna do here is add a comments field to

00:06:47,950 --> 00:06:52,180
the talk and you'll notice that we have

00:06:50,110 --> 00:06:53,470
these two directives now on talk at

00:06:52,180 --> 00:06:55,720
model will

00:06:53,470 --> 00:06:58,060
about all of the resolver all of the

00:06:55,720 --> 00:07:00,310
resolver code all of the different other

00:06:58,060 --> 00:07:01,660
operations we can then modify those with

00:07:00,310 --> 00:07:04,120
our own business logic if we'd like to

00:07:01,660 --> 00:07:06,130
add connection will allow us to define a

00:07:04,120 --> 00:07:08,050
relationship between two types so I

00:07:06,130 --> 00:07:10,660
needed to find a relationship between

00:07:08,050 --> 00:07:13,750
the talk in the comment so therefore we

00:07:10,660 --> 00:07:15,850
have a comment type on the talk comments

00:07:13,750 --> 00:07:18,010
field on the talk and in a talk field on

00:07:15,850 --> 00:07:19,570
the comment finally we want to be able

00:07:18,010 --> 00:07:20,800
to add some authorization rules because

00:07:19,570 --> 00:07:23,440
we don't want everyone to be able to

00:07:20,800 --> 00:07:25,540
create a talk we only want admins to be

00:07:23,440 --> 00:07:27,880
able to create a talk therefore we can

00:07:25,540 --> 00:07:29,350
now use the at auth directive which will

00:07:27,880 --> 00:07:32,080
allow us to go ahead and scaffold out

00:07:29,350 --> 00:07:34,450
some boilerplate resolvers that will

00:07:32,080 --> 00:07:36,910
allow only people that are signed it and

00:07:34,450 --> 00:07:39,760
as an administrator to be able to create

00:07:36,910 --> 00:07:41,440
read or update talks but anyone will be

00:07:39,760 --> 00:07:43,510
able to read the talk because we've set

00:07:41,440 --> 00:07:46,630
query roles to null so we don't want any

00:07:43,510 --> 00:07:49,570
roles on queries finally the comment is

00:07:46,630 --> 00:07:51,520
very similar in the sense that we want

00:07:49,570 --> 00:07:52,540
to have some authorization rules but our

00:07:51,520 --> 00:07:54,610
rules are going to be a little different

00:07:52,540 --> 00:07:56,620
here we want to allow anyone to be able

00:07:54,610 --> 00:07:58,930
to create a comment but only the owner

00:07:56,620 --> 00:08:01,690
of the comment to be able to update or

00:07:58,930 --> 00:08:03,520
delete this comment so we're done now

00:08:01,690 --> 00:08:05,470
our schema is ready to go we can now

00:08:03,520 --> 00:08:08,140
test this out so I'm going to go ahead

00:08:05,470 --> 00:08:10,450
and jump back to the command line and

00:08:08,140 --> 00:08:12,310
from here we can now mock all of this

00:08:10,450 --> 00:08:14,820
locally we don't have to deploy anything

00:08:12,310 --> 00:08:18,970
all we need to do is run amplify mock

00:08:14,820 --> 00:08:23,080
and this will go ahead and mock our

00:08:18,970 --> 00:08:24,580
entire application for us what it's

00:08:23,080 --> 00:08:26,560
going to do is introspect our schema and

00:08:24,580 --> 00:08:28,479
see that we need two data sources two

00:08:26,560 --> 00:08:30,550
databases it's going to go ahead and

00:08:28,479 --> 00:08:32,169
create those two tables locally so we

00:08:30,550 --> 00:08:34,690
have a talk table in a comments table

00:08:32,169 --> 00:08:36,460
now created its then run gonna run graph

00:08:34,690 --> 00:08:38,680
QL code generation and we're going to be

00:08:36,460 --> 00:08:40,810
given the graph QL code locally that we

00:08:38,680 --> 00:08:45,280
can use to interact and we're gonna run

00:08:40,810 --> 00:08:47,050
an HTTP endpoint now on our localhost so

00:08:45,280 --> 00:08:49,150
we can go ahead and click this and this

00:08:47,050 --> 00:08:51,730
is our graphical Explorer thanks a big

00:08:49,150 --> 00:08:54,160
big thanks to Sean Grove of one graph

00:08:51,730 --> 00:08:56,560
for helping us inter integrate this nice

00:08:54,160 --> 00:08:57,970
UX on the left-hand side so what we want

00:08:56,560 --> 00:09:00,010
to do now is we want to go ahead and

00:08:57,970 --> 00:09:02,680
update our off and we want to make sure

00:09:00,010 --> 00:09:04,030
that the user that signed in is just a

00:09:02,680 --> 00:09:05,890
regular user because we want to test

00:09:04,030 --> 00:09:07,329
that authorization rule so we're gonna

00:09:05,890 --> 00:09:12,569
add a new mutation for

00:09:07,329 --> 00:09:12,569
creating a talk will give a speaker bio

00:09:17,939 --> 00:09:25,749
and we'll just do some some basic data

00:09:22,389 --> 00:09:28,660
here we want to go ahead and create this

00:09:25,749 --> 00:09:30,129
talk and we'll notice that we're

00:09:28,660 --> 00:09:31,839
unauthorized to do this because we're

00:09:30,129 --> 00:09:33,819
not logged in as an admin so we can go

00:09:31,839 --> 00:09:37,059
ahead and update and simulate an admin

00:09:33,819 --> 00:09:40,179
user by passing in an admin as the group

00:09:37,059 --> 00:09:42,309
and generating a new token and now we'll

00:09:40,179 --> 00:09:44,049
be able to create this mutation the next

00:09:42,309 --> 00:09:47,769
thing we want to do is take this talk ID

00:09:44,049 --> 00:09:50,049
and create a comment on the talk and the

00:09:47,769 --> 00:09:52,059
comment that we want to create is going

00:09:50,049 --> 00:09:54,040
to be basically you know just someone

00:09:52,059 --> 00:09:56,110
that's in the audience creating a

00:09:54,040 --> 00:09:59,619
comment on the talk so I can go ahead to

00:09:56,110 --> 00:10:02,799
create comments I can pass in the ID of

00:09:59,619 --> 00:10:06,489
the of the talk and I can create a

00:10:02,799 --> 00:10:09,579
message and then I can go ahead and

00:10:06,489 --> 00:10:12,309
actually return not only the message and

00:10:09,579 --> 00:10:13,959
the ID but I can return created by

00:10:12,309 --> 00:10:15,879
because we're gonna actually read the

00:10:13,959 --> 00:10:18,040
user information off of the token and

00:10:15,879 --> 00:10:19,600
store that in the database so next I

00:10:18,040 --> 00:10:23,619
want to go ahead and sign out and sign

00:10:19,600 --> 00:10:25,089
in is a audience attendee and now I'm

00:10:23,619 --> 00:10:27,610
signed in as someone else and I want to

00:10:25,089 --> 00:10:32,919
go ahead and create this comment on the

00:10:27,610 --> 00:10:34,989
talk so we've created our comment on the

00:10:32,919 --> 00:10:37,480
talk we've created our talk let's go

00:10:34,989 --> 00:10:39,579
ahead and now query you for all of us so

00:10:37,480 --> 00:10:42,489
we can now do the list talks query that

00:10:39,579 --> 00:10:43,839
will return our items and you'll now

00:10:42,489 --> 00:10:47,589
notice that there is a relationship

00:10:43,839 --> 00:10:49,540
between the talks and the comments so we

00:10:47,589 --> 00:10:52,449
can drill down and get the comments that

00:10:49,540 --> 00:10:54,910
relate to this talk and we can return

00:10:52,449 --> 00:10:57,160
those items as well so I'll go ahead and

00:10:54,910 --> 00:10:59,290
return the ID the message and who

00:10:57,160 --> 00:11:01,779
created it so I'll go ahead and run this

00:10:59,290 --> 00:11:03,549
query now we'll see that not only do we

00:11:01,779 --> 00:11:06,279
get the information about the talks back

00:11:03,549 --> 00:11:08,379
we also get the array nested comments

00:11:06,279 --> 00:11:09,850
once we're ready to deploy this we go

00:11:08,379 --> 00:11:11,829
back to our command line and then run

00:11:09,850 --> 00:11:13,029
amplify push I'm not gonna worry about

00:11:11,829 --> 00:11:15,699
that because we don't have time for that

00:11:13,029 --> 00:11:18,839
but I just wanted to show that so next

00:11:15,699 --> 00:11:18,839
we're gonna go ahead yes

00:11:19,590 --> 00:11:23,760
thank you next we're going to go ahead

00:11:21,900 --> 00:11:27,840
and do some demos so the first demo I

00:11:23,760 --> 00:11:29,790
want to talk about is real Tom SMS and

00:11:27,840 --> 00:11:31,830
markdown these are the curious cases of

00:11:29,790 --> 00:11:33,780
graph QL if you haven't noticed a lot of

00:11:31,830 --> 00:11:36,900
the name of this what if you get SMS

00:11:33,780 --> 00:11:38,490
text message to grab markdown and do

00:11:36,900 --> 00:11:38,880
something with it so I've created an app

00:11:38,490 --> 00:11:40,500
for that

00:11:38,880 --> 00:11:41,820
and it's specially good for this

00:11:40,500 --> 00:11:44,280
conference because you can now text

00:11:41,820 --> 00:11:46,140
message comments about this talk to me

00:11:44,280 --> 00:11:47,520
and by the end of the talk I'll go back

00:11:46,140 --> 00:11:48,870
and reference these comments if I have

00:11:47,520 --> 00:11:52,650
time and answer any questions I'm

00:11:48,870 --> 00:11:55,290
bypassing the native conference speaker

00:11:52,650 --> 00:11:56,640
discussion thing right so let's go ahead

00:11:55,290 --> 00:11:59,160
and take a look so if you want to

00:11:56,640 --> 00:12:01,470
comment you can go ahead and text the

00:11:59,160 --> 00:12:06,240
message two plus one nine one zero two

00:12:01,470 --> 00:12:09,690
four nine six seven six five and this is

00:12:06,240 --> 00:12:10,800
going to go ahead and create you know a

00:12:09,690 --> 00:12:12,150
new message we're gonna go ahead and

00:12:10,800 --> 00:12:14,100
view that user interface in just a

00:12:12,150 --> 00:12:18,570
second now let's look at how we built

00:12:14,100 --> 00:12:21,540
this we well I basically took the idea

00:12:18,570 --> 00:12:23,640
of using graph QL mutations and having a

00:12:21,540 --> 00:12:25,620
screen that listens for these new

00:12:23,640 --> 00:12:27,150
messages coming in and real-time and

00:12:25,620 --> 00:12:28,350
displays them on the screen that's what

00:12:27,150 --> 00:12:28,620
I wanted to happen so how could I do

00:12:28,350 --> 00:12:31,260
that

00:12:28,620 --> 00:12:33,720
I used a service that you can create

00:12:31,260 --> 00:12:35,240
phone numbers with Amazon pinpoint you

00:12:33,720 --> 00:12:37,920
could also use something like Twilio

00:12:35,240 --> 00:12:39,900
once a message comes in we send the

00:12:37,920 --> 00:12:42,210
message to a lambda function the lambda

00:12:39,900 --> 00:12:44,220
function creates a graph QL mutation the

00:12:42,210 --> 00:12:47,490
client listening to that subscription

00:12:44,220 --> 00:12:49,740
will then get that data so I defined the

00:12:47,490 --> 00:12:51,810
data basically like this I needed an

00:12:49,740 --> 00:12:53,970
origination number and a message body

00:12:51,810 --> 00:12:56,280
the origination number just tells us who

00:12:53,970 --> 00:12:59,220
sent the message the message body is the

00:12:56,280 --> 00:13:01,860
markdown second I created the graticule

00:12:59,220 --> 00:13:03,900
schema graph QL schema only needs an

00:13:01,860 --> 00:13:07,020
origination number a message body and an

00:13:03,900 --> 00:13:09,060
ID and then finally the lambda function

00:13:07,020 --> 00:13:11,070
looks something like this we take the

00:13:09,060 --> 00:13:13,710
message off of the data and we parse it

00:13:11,070 --> 00:13:15,660
we then get the origination number and

00:13:13,710 --> 00:13:19,080
the message body off of that data and we

00:13:15,660 --> 00:13:21,060
create a really raw HTTP request usually

00:13:19,080 --> 00:13:24,870
something like Axios and here I'm

00:13:21,060 --> 00:13:27,600
passing in the URL the API key and the

00:13:24,870 --> 00:13:30,690
information that is the actual variables

00:13:27,600 --> 00:13:31,930
for the message and let's go ahead and

00:13:30,690 --> 00:13:34,960
demo this and

00:13:31,930 --> 00:13:36,610
curious if anyone else is curious enough

00:13:34,960 --> 00:13:40,540
to send messages here so let's go ahead

00:13:36,610 --> 00:13:41,800
and take a look and if anyone wants to

00:13:40,540 --> 00:13:43,390
create a message I'll go back and check

00:13:41,800 --> 00:13:46,690
this out but looks like we have one

00:13:43,390 --> 00:13:48,790
message from someone saying hello world

00:13:46,690 --> 00:13:50,290
that's pretty cool if you want to send

00:13:48,790 --> 00:13:51,040
an image anything like that go ahead

00:13:50,290 --> 00:13:53,800
check it out

00:13:51,040 --> 00:13:56,649
now next we're going to go ahead and do

00:13:53,800 --> 00:13:59,589
another demo and I think what I need for

00:13:56,649 --> 00:14:01,570
this demo let's go ahead and take a look

00:13:59,589 --> 00:14:04,720
yes I'm gonna need an audience member as

00:14:01,570 --> 00:14:07,180
a you know someone that volunteers so

00:14:04,720 --> 00:14:11,080
who wants to volunteer to come up and be

00:14:07,180 --> 00:14:14,260
part of this presentation yeah okay come

00:14:11,080 --> 00:14:16,570
on so what we're gonna do is graph QL

00:14:14,260 --> 00:14:18,510
image recognition we're gonna take an

00:14:16,570 --> 00:14:21,160
image run it through a graph QL

00:14:18,510 --> 00:14:22,660
operation - and a machine learning

00:14:21,160 --> 00:14:24,040
service get information about that and

00:14:22,660 --> 00:14:27,180
return that in the response for the

00:14:24,040 --> 00:14:29,080
graph QL hey come on hey I'm mater

00:14:27,180 --> 00:14:30,810
thank you Michael let's give Michael

00:14:29,080 --> 00:14:33,910
like a little bit of round of applause

00:14:30,810 --> 00:14:35,770
so the the way that this is going to

00:14:33,910 --> 00:14:37,150
work is we're gonna take an image it's

00:14:35,770 --> 00:14:38,320
going to be a picture from us we're

00:14:37,150 --> 00:14:41,700
gonna send it and store it in an image

00:14:38,320 --> 00:14:44,140
service that's gonna kick off a new

00:14:41,700 --> 00:14:46,089
mutation or actually it's gonna send an

00:14:44,140 --> 00:14:48,070
operation to a machine learning service

00:14:46,089 --> 00:14:49,360
with the image information that will

00:14:48,070 --> 00:14:51,520
give us the data and that's gonna be

00:14:49,360 --> 00:14:53,650
returned back in JSON so that's kind of

00:14:51,520 --> 00:14:55,060
how that looks we're gonna skip over the

00:14:53,650 --> 00:14:57,700
functionality cuz we want to jump into

00:14:55,060 --> 00:14:59,730
this demo and when I come back I'll kind

00:14:57,700 --> 00:15:01,690
of walk through how this all works so

00:14:59,730 --> 00:15:03,400
come on let's go and take a picture you

00:15:01,690 --> 00:15:05,260
can come right here what we're gonna do

00:15:03,400 --> 00:15:10,690
is we can either toggle the camera or we

00:15:05,260 --> 00:15:12,010
can actually yeah there we go all right

00:15:10,690 --> 00:15:13,930
so we take the picture now we're gonna

00:15:12,010 --> 00:15:15,190
give this a little bit of Tom this is

00:15:13,930 --> 00:15:18,070
going to upload the image it's gonna

00:15:15,190 --> 00:15:19,750
then you know get the image information

00:15:18,070 --> 00:15:22,779
run it through the image recognition

00:15:19,750 --> 00:15:24,160
service respond in a lambda function

00:15:22,779 --> 00:15:26,320
graph to a mutation and we're gonna get

00:15:24,160 --> 00:15:27,459
that back here so here's where you want

00:15:26,320 --> 00:15:29,290
to check out the info so we have two

00:15:27,459 --> 00:15:31,720
people yeah you can go ahead thank you

00:15:29,290 --> 00:15:33,520
we have two people one is estimated at

00:15:31,720 --> 00:15:37,079
thirty one is estimated at forty seven

00:15:33,520 --> 00:15:39,459
I'm the 30 year old we're both smiling

00:15:37,079 --> 00:15:41,260
neither one of us have glasses on we

00:15:39,459 --> 00:15:41,740
both have our mouths open that's pretty

00:15:41,260 --> 00:15:44,320
interesting

00:15:41,740 --> 00:15:45,610
yeah and our emotions are angry and

00:15:44,320 --> 00:15:49,300
disgusted

00:15:45,610 --> 00:15:53,170
and discuss it and disgusted and

00:15:49,300 --> 00:15:56,950
confused so yeah I'm not sure what

00:15:53,170 --> 00:15:59,560
that's all about but yeah thanks for the

00:15:56,950 --> 00:16:01,870
volunteer so let's look at the function

00:15:59,560 --> 00:16:03,880
that did that we basically have two

00:16:01,870 --> 00:16:06,940
types of images that you can upload one

00:16:03,880 --> 00:16:09,490
of a person one of not a person if we

00:16:06,940 --> 00:16:11,320
send a type of labels that means we're

00:16:09,490 --> 00:16:13,450
sending something that's not a person so

00:16:11,320 --> 00:16:15,279
when a kind of image lunar recognizes

00:16:13,450 --> 00:16:16,690
like a general image maybe we want to

00:16:15,279 --> 00:16:19,480
say oh there's a TV in this image

00:16:16,690 --> 00:16:21,579
there's maybe a car if there's a person

00:16:19,480 --> 00:16:23,680
we want to then recognize labels on

00:16:21,579 --> 00:16:26,019
their faces so we check to see if the

00:16:23,680 --> 00:16:28,570
type is labels or not we set some

00:16:26,019 --> 00:16:30,399
attributes we create a new params object

00:16:28,570 --> 00:16:33,130
with the image information which is

00:16:30,399 --> 00:16:35,290
basically the URL of that image we then

00:16:33,130 --> 00:16:37,269
call the recognition service which is a

00:16:35,290 --> 00:16:38,860
machine learning service and there are a

00:16:37,269 --> 00:16:40,510
bunch of them out there this is a WSB

00:16:38,860 --> 00:16:42,339
you don't have to use AWS there are

00:16:40,510 --> 00:16:45,100
others out there we call it detect

00:16:42,339 --> 00:16:48,010
labels or detect faces passing in that

00:16:45,100 --> 00:16:49,899
data it returns some JSON we string a

00:16:48,010 --> 00:16:51,790
file that send it back and then we

00:16:49,899 --> 00:16:54,279
display that on the screen so that's

00:16:51,790 --> 00:16:56,860
kind of how that works all right so the

00:16:54,279 --> 00:16:59,920
next thing we want to go over is

00:16:56,860 --> 00:17:03,040
real-time music collaboration how can we

00:16:59,920 --> 00:17:04,870
build a step sequencer that allows

00:17:03,040 --> 00:17:06,970
people to collaborate together and

00:17:04,870 --> 00:17:11,230
create music so let's see how that's

00:17:06,970 --> 00:17:13,299
done first I needed a base project to

00:17:11,230 --> 00:17:14,919
start with because I cannot understand

00:17:13,299 --> 00:17:16,870
how to build this from scratch I needed

00:17:14,919 --> 00:17:18,910
somewhere to start with I then make it

00:17:16,870 --> 00:17:22,360
cloud enabled so what I found was the

00:17:18,910 --> 00:17:24,819
trap Lord 9000 the trap Lord 9000 was

00:17:22,360 --> 00:17:26,860
created by Ken wheeler and a big shout

00:17:24,819 --> 00:17:29,200
out to him for creating this I saw him

00:17:26,860 --> 00:17:31,390
give a talk in New York I basically took

00:17:29,200 --> 00:17:33,669
his project and then made it cloud

00:17:31,390 --> 00:17:35,980
enabled and what happens here is that

00:17:33,669 --> 00:17:40,660
step sequencer you have an array of

00:17:35,980 --> 00:17:44,049
different values that represent a slice

00:17:40,660 --> 00:17:46,900
in the sequence so as we go from 0 0 0 0

00:17:44,049 --> 00:17:49,120
0 if there's a 1 that means the sound

00:17:46,900 --> 00:17:51,040
gets played if it's a 0 that means that

00:17:49,120 --> 00:17:53,260
sound doesn't get played so all we need

00:17:51,040 --> 00:17:55,510
to do is just take this data allow you

00:17:53,260 --> 00:17:58,210
to mutate it locally and then send a

00:17:55,510 --> 00:17:58,460
mutation up to your graph QL API any of

00:17:58,210 --> 00:18:00,500
the

00:17:58,460 --> 00:18:02,300
clients listening to this can then take

00:18:00,500 --> 00:18:04,580
that new data as it comes through in a

00:18:02,300 --> 00:18:06,140
graphical subscription run an update and

00:18:04,580 --> 00:18:08,420
then therefore you have people

00:18:06,140 --> 00:18:11,150
collaborating so the way I built this

00:18:08,420 --> 00:18:14,570
was I created a drum machine type with

00:18:11,150 --> 00:18:16,010
an ID a client ID a beats in a name the

00:18:14,570 --> 00:18:17,930
thing that might stand out here is we

00:18:16,010 --> 00:18:20,200
have a client ID the reason we do that

00:18:17,930 --> 00:18:22,280
is because we don't want to listen to

00:18:20,200 --> 00:18:24,740
subscriptions changes that we made

00:18:22,280 --> 00:18:26,360
ourselves so if we made the change we

00:18:24,740 --> 00:18:29,540
discard the data because we've done an

00:18:26,360 --> 00:18:31,520
optimistic update if someone else has

00:18:29,540 --> 00:18:35,630
made that change then we refresh our own

00:18:31,520 --> 00:18:37,340
client application so the demo for this

00:18:35,630 --> 00:18:39,230
looks something like this

00:18:37,340 --> 00:18:41,030
I have a website that I created for this

00:18:39,230 --> 00:18:43,610
demo actually it's called height beats

00:18:41,030 --> 00:18:43,820
def if you'd like to play along go for

00:18:43,610 --> 00:18:45,110
it

00:18:43,820 --> 00:18:47,930
I'm gonna create a new drum machine

00:18:45,110 --> 00:18:51,470
called reactive and then we're gonna go

00:18:47,930 --> 00:18:53,180
ahead and see if we can work on this

00:18:51,470 --> 00:18:55,820
together so we have this reactive beat

00:18:53,180 --> 00:18:58,310
box I'm gonna now open a new beat box in

00:18:55,820 --> 00:19:01,100
another window and what we're gonna do

00:18:58,310 --> 00:19:03,590
is once this machine loads we're gonna

00:19:01,100 --> 00:19:04,850
go ahead and set some steps here and

00:19:03,590 --> 00:19:09,500
we're gonna see that they come through

00:19:04,850 --> 00:19:10,760
in real time over here and then I'm

00:19:09,500 --> 00:19:13,820
gonna go in here and play the step

00:19:10,760 --> 00:19:16,220
sequence here and then over here I can

00:19:13,820 --> 00:19:17,510
still make the updates and they'll start

00:19:16,220 --> 00:19:20,000
coming through so let's see if we can

00:19:17,510 --> 00:19:21,430
create some good beats I'm not like a DJ

00:19:20,000 --> 00:19:24,830
or nothing like that but you know I'll

00:19:21,430 --> 00:19:26,030
do a little something okay now some

00:19:24,830 --> 00:19:27,700
people have started stepping I don't

00:19:26,030 --> 00:19:30,470
have to do any more work okay cool

00:19:27,700 --> 00:19:31,730
so yeah this can get a little rowdy when

00:19:30,470 --> 00:19:33,500
you have a bunch of people doing it but

00:19:31,730 --> 00:19:35,990
yeah we have some some beats being made

00:19:33,500 --> 00:19:37,790
now and it's all coming through in real

00:19:35,990 --> 00:19:40,850
time and I don't have to really do any

00:19:37,790 --> 00:19:44,120
more work from here so that's that's

00:19:40,850 --> 00:19:44,960
height beats I have two more demos so

00:19:44,120 --> 00:19:47,450
let's see if we can get through these

00:19:44,960 --> 00:19:50,120
what about graph QL infrastructure is

00:19:47,450 --> 00:19:53,090
code if you saw the way that we did that

00:19:50,120 --> 00:19:56,900
schema decoration using that graph QL

00:19:53,090 --> 00:19:58,190
those directives that create databases

00:19:56,900 --> 00:20:00,650
they create schema they do all this

00:19:58,190 --> 00:20:02,390
other stuff that graph you all you know

00:20:00,650 --> 00:20:04,160
you wouldn't think would do that this

00:20:02,390 --> 00:20:05,750
kind of opens the door for many other

00:20:04,160 --> 00:20:07,250
things because what if you have a

00:20:05,750 --> 00:20:09,710
reproducible back-end that you would

00:20:07,250 --> 00:20:12,230
like to create theoretically you could

00:20:09,710 --> 00:20:14,179
take a schema decorate that

00:20:12,230 --> 00:20:16,970
want to be that application back-end and

00:20:14,179 --> 00:20:19,190
share it amongst your peers open-source

00:20:16,970 --> 00:20:21,460
it whatever people could then use that

00:20:19,190 --> 00:20:23,299
to kind of have a base to start with

00:20:21,460 --> 00:20:24,710
infrastructures code is something that

00:20:23,299 --> 00:20:27,650
isn't really that familiar to most

00:20:24,710 --> 00:20:28,130
front-end developers and it isn't to me

00:20:27,650 --> 00:20:30,590
either

00:20:28,130 --> 00:20:31,640
the cool thing about what we work on and

00:20:30,590 --> 00:20:33,980
I think what you're going to see other

00:20:31,640 --> 00:20:36,380
people doing as well outside of AWS is

00:20:33,980 --> 00:20:38,570
as you create your application from the

00:20:36,380 --> 00:20:40,340
command line so you saw us earlier run

00:20:38,570 --> 00:20:42,770
amplify in it we're actually creating

00:20:40,340 --> 00:20:45,260
graph QL and infrastructure as code for

00:20:42,770 --> 00:20:47,360
you in a folder that's called amplify

00:20:45,260 --> 00:20:49,040
you can then share that amplify folder

00:20:47,360 --> 00:20:51,830
and redeploy your application to

00:20:49,040 --> 00:20:56,150
anywhere for anyone and you have kind of

00:20:51,830 --> 00:20:57,830
a reap you have a upper reproducible

00:20:56,150 --> 00:21:00,679
version of your back-end that can be

00:20:57,830 --> 00:21:02,059
shared among other people so the the

00:21:00,679 --> 00:21:04,490
experiment that I had a few months ago

00:21:02,059 --> 00:21:06,140
was what if I wanted to create a

00:21:04,490 --> 00:21:07,760
conference app that people could reuse

00:21:06,140 --> 00:21:08,929
over and over I go to a lot of

00:21:07,760 --> 00:21:11,059
conferences I've talked to a lot of

00:21:08,929 --> 00:21:12,980
organizers one thing that they keep on

00:21:11,059 --> 00:21:13,610
doing is they keep creating apps over

00:21:12,980 --> 00:21:15,710
and over and over

00:21:13,610 --> 00:21:17,480
they cost anywhere between ten to fifty

00:21:15,710 --> 00:21:19,640
thousand dollars to build but they all

00:21:17,480 --> 00:21:20,929
do the exact same thing I felt like this

00:21:19,640 --> 00:21:23,179
was a pretty good candidate for a

00:21:20,929 --> 00:21:25,160
reproducible app that we could then take

00:21:23,179 --> 00:21:27,200
this idea of full stack server lists and

00:21:25,160 --> 00:21:29,059
kind of put it together so what I

00:21:27,200 --> 00:21:32,809
created was conference app in a box

00:21:29,059 --> 00:21:36,080
conference app in a box is open source

00:21:32,809 --> 00:21:37,610
that we have around 30 conferences that

00:21:36,080 --> 00:21:39,650
I've personally worked with that I've

00:21:37,610 --> 00:21:41,679
used this I've worked through three

00:21:39,650 --> 00:21:44,690
independent consultants that have

00:21:41,679 --> 00:21:46,730
averaged around $1,000 an hour because

00:21:44,690 --> 00:21:47,540
they charge their clients like 15 20

00:21:46,730 --> 00:21:49,970
thousand dollars

00:21:47,540 --> 00:21:52,340
it only takes them like 5 to 10 hours to

00:21:49,970 --> 00:21:55,490
deploy which is great that's the whole

00:21:52,340 --> 00:21:57,049
idea here is being efficient so around

00:21:55,490 --> 00:21:58,220
half a million dollars of known value

00:21:57,049 --> 00:21:59,540
and this isn't even something I've

00:21:58,220 --> 00:22:01,190
really tried to push it's just something

00:21:59,540 --> 00:22:03,290
out put out there people have really

00:22:01,190 --> 00:22:05,510
found it interesting and it's basically

00:22:03,290 --> 00:22:07,010
a conference app that you can build and

00:22:05,510 --> 00:22:09,320
get up and running within theme in just

00:22:07,010 --> 00:22:11,630
a couple of seconds a couple of not

00:22:09,320 --> 00:22:13,880
seconds ok let's let's be real probably

00:22:11,630 --> 00:22:15,890
a couple of hours maybe to get to get

00:22:13,880 --> 00:22:18,080
where you wouldn't want to be so to

00:22:15,890 --> 00:22:20,150
build this I created a schema with a

00:22:18,080 --> 00:22:23,179
talk and a comment the exact same

00:22:20,150 --> 00:22:25,580
application that we built earlier and to

00:22:23,179 --> 00:22:26,340
create this amplify and it added the API

00:22:25,580 --> 00:22:28,470
and then

00:22:26,340 --> 00:22:29,820
I deployed the back end this is the

00:22:28,470 --> 00:22:32,250
infrastructure as code that you're left

00:22:29,820 --> 00:22:35,070
with it's a back end folder that you can

00:22:32,250 --> 00:22:36,480
then take and update and then you know

00:22:35,070 --> 00:22:38,850
deploy again you can share this with

00:22:36,480 --> 00:22:40,770
other people or you can package this up

00:22:38,850 --> 00:22:43,710
with the front end and what you are left

00:22:40,770 --> 00:22:45,779
with is the docker version or like you

00:22:43,710 --> 00:22:46,919
know of mobile development you know or

00:22:45,779 --> 00:22:48,270
whatever you would call it I don't

00:22:46,919 --> 00:22:50,929
really know what to call it I call it

00:22:48,270 --> 00:22:53,159
full stack serverless it's reproducible

00:22:50,929 --> 00:22:55,320
applications that contain both the front

00:22:53,159 --> 00:22:57,679
and a back end so what does this app

00:22:55,320 --> 00:23:02,279
look like well it looks something like

00:22:57,679 --> 00:23:05,190
this this is a app that I put together

00:23:02,279 --> 00:23:08,340
in my last talk actually a few hours ago

00:23:05,190 --> 00:23:10,380
took about five minutes and what we have

00:23:08,340 --> 00:23:12,360
here is like a couple of talks listed

00:23:10,380 --> 00:23:14,909
you can go in and drill down and view

00:23:12,360 --> 00:23:18,000
talk information you can then create

00:23:14,909 --> 00:23:19,710
comments on the talk and I want to demo

00:23:18,000 --> 00:23:22,080
the comment portion of this but you can

00:23:19,710 --> 00:23:24,120
just create a comment the comments come

00:23:22,080 --> 00:23:25,950
through in real time and pretty decent

00:23:24,120 --> 00:23:27,990
user interface if you'd like to theme it

00:23:25,950 --> 00:23:29,820
we have a theme file that you need to

00:23:27,990 --> 00:23:32,850
change maybe seven variables and from

00:23:29,820 --> 00:23:36,149
there you're ready to go with a custom

00:23:32,850 --> 00:23:38,549
version of this that's conference app in

00:23:36,149 --> 00:23:40,500
a box and then my last demo is something

00:23:38,549 --> 00:23:45,929
that I released to the public a few

00:23:40,500 --> 00:23:48,659
hours ago Jam stack CMS jam stack CMS is

00:23:45,929 --> 00:23:50,850
a full stack content management system

00:23:48,659 --> 00:23:52,919
built with serverless technologies it

00:23:50,850 --> 00:23:55,289
has Gatsby on the front end it has

00:23:52,919 --> 00:23:56,700
several aesthetic on the back end if you

00:23:55,289 --> 00:23:58,649
think about WordPress and the reason

00:23:56,700 --> 00:24:01,380
that it became so successful and so

00:23:58,649 --> 00:24:03,210
popular in my opinion is that it had

00:24:01,380 --> 00:24:04,740
everything encompassed into one package

00:24:03,210 --> 00:24:06,510
and you didn't have to be an expert web

00:24:04,740 --> 00:24:08,159
developer to get a website up and

00:24:06,510 --> 00:24:10,169
running you could just go and deploy

00:24:08,159 --> 00:24:11,970
this thing you end up with some pretty

00:24:10,169 --> 00:24:13,770
sophisticated authentication and

00:24:11,970 --> 00:24:15,210
authorization rules you have a database

00:24:13,770 --> 00:24:17,010
you have a front-end you have everything

00:24:15,210 --> 00:24:19,620
kind of built out for you and then you

00:24:17,010 --> 00:24:21,630
can theme it and you got a lot done in a

00:24:19,620 --> 00:24:22,950
short amount of time it's how I got into

00:24:21,630 --> 00:24:25,289
the web development and I'm sure a lot

00:24:22,950 --> 00:24:27,539
of other people as well I think we can

00:24:25,289 --> 00:24:29,190
do better now WordPress is still amazing

00:24:27,539 --> 00:24:31,260
but we're working with things like

00:24:29,190 --> 00:24:33,240
server rendered applications we want to

00:24:31,260 --> 00:24:35,580
use graph QL we want to be able to maybe

00:24:33,240 --> 00:24:38,480
iterate quit more quickly so the jam

00:24:35,580 --> 00:24:40,370
stack CMS is my you know take it that

00:24:38,480 --> 00:24:43,910
and let's take a look at what this looks

00:24:40,370 --> 00:24:46,970
like in practice so this is kind of like

00:24:43,910 --> 00:24:49,520
a deployment of the jam stack CMS that I

00:24:46,970 --> 00:24:51,710
have right here from here you can kind

00:24:49,520 --> 00:24:53,870
of create pages in three different ways

00:24:51,710 --> 00:24:55,760
you can create a blog post from the

00:24:53,870 --> 00:24:57,919
admin panel you can create a web page

00:24:55,760 --> 00:25:01,309
from the admin panel or you can hard

00:24:57,919 --> 00:25:03,530
code your own components locally just

00:25:01,309 --> 00:25:06,380
like you can with any gatsby site if you

00:25:03,530 --> 00:25:08,150
want to take a look and edit an existing

00:25:06,380 --> 00:25:10,220
post you can just click Edit if you're

00:25:08,150 --> 00:25:11,720
logged in as an admin here you're given

00:25:10,220 --> 00:25:14,120
the WYSIWYG editor and you can publish

00:25:11,720 --> 00:25:15,710
and unpublish if you're an admin you'll

00:25:14,120 --> 00:25:17,840
also have access to this admin panel

00:25:15,710 --> 00:25:19,549
where you can publish unpublished

00:25:17,840 --> 00:25:21,860
existing articles you can create a new

00:25:19,549 --> 00:25:23,870
post you can view all the different

00:25:21,860 --> 00:25:26,510
images that you have available to you

00:25:23,870 --> 00:25:29,000
that you've uploaded securely or you can

00:25:26,510 --> 00:25:30,710
create a new web page drag stuff around

00:25:29,000 --> 00:25:32,990
and then when you're ready to go you

00:25:30,710 --> 00:25:34,490
just save and publish and then we have

00:25:32,990 --> 00:25:35,929
the settings area which is pretty cool

00:25:34,490 --> 00:25:37,790
because here you can theme it a little

00:25:35,929 --> 00:25:39,950
bit let's say we want to create a

00:25:37,790 --> 00:25:41,809
reactive theme we want to great create a

00:25:39,950 --> 00:25:43,040
border we want to change this up a

00:25:41,809 --> 00:25:45,140
little bit so maybe we want to change

00:25:43,040 --> 00:25:46,940
the title of our site when we're ready

00:25:45,140 --> 00:25:49,940
to deploy this because it's Gatsby the

00:25:46,940 --> 00:25:51,169
only people seeing this admin or us the

00:25:49,940 --> 00:25:52,730
people that are actually viewing the

00:25:51,169 --> 00:25:54,830
site or not seeing this they're seeing

00:25:52,730 --> 00:25:56,390
this static version of this so to deploy

00:25:54,830 --> 00:25:58,490
a new static version we can just click

00:25:56,390 --> 00:26:01,309
the deploy button this kicks off a new

00:25:58,490 --> 00:26:03,200
build this is triggering a web hook to

00:26:01,309 --> 00:26:04,610
either net lafay or amplify console or

00:26:03,200 --> 00:26:06,500
whatever other hosting service you're

00:26:04,610 --> 00:26:08,840
using and then if I go to amplify

00:26:06,500 --> 00:26:10,850
console give it a couple of seconds I

00:26:08,840 --> 00:26:12,740
see now that we have a new build that

00:26:10,850 --> 00:26:14,270
started running the new bill was

00:26:12,740 --> 00:26:14,690
triggered by that web hook that I just

00:26:14,270 --> 00:26:19,040
ran

00:26:14,690 --> 00:26:22,010
so that is full stack server list that

00:26:19,040 --> 00:26:24,080
was my demonstration of that the idea to

00:26:22,010 --> 00:26:26,480
deploy these apps is you clone them and

00:26:24,080 --> 00:26:28,100
if using AWS you run amplify init

00:26:26,480 --> 00:26:30,320
amplify push and then you're ready to

00:26:28,100 --> 00:26:32,510
roll if you'd like to see the code for

00:26:30,320 --> 00:26:35,059
all of these applications github.com

00:26:32,510 --> 00:26:36,710
slash debit 3 slash curious cases of

00:26:35,059 --> 00:26:39,710
graph QL you can also to go to

00:26:36,710 --> 00:26:41,660
github.com slash jam stack CMS and Star

00:26:39,710 --> 00:26:44,990
Jam stack CMS I would really appreciate

00:26:41,660 --> 00:26:46,940
that yeah thanks for the unsplash talent

00:26:44,990 --> 00:26:49,190
creators jens johnson kareem andhra

00:26:46,940 --> 00:26:51,460
christian spies and edwin andre and

00:26:49,190 --> 00:26:54,740
that's it for me thank you

00:26:51,460 --> 00:26:56,850
[Applause]

00:26:54,740 --> 00:27:00,659
thank you so much

00:26:56,850 --> 00:27:03,360
Nader Debbie I have three questions for

00:27:00,659 --> 00:27:06,389
you here at least so there is a hype

00:27:03,360 --> 00:27:08,730
about resolver first implementation over

00:27:06,389 --> 00:27:12,360
schema first what do you think about

00:27:08,730 --> 00:27:13,860
this I think that it just depends on the

00:27:12,360 --> 00:27:15,210
person building the application I really

00:27:13,860 --> 00:27:17,100
don't think one is better than the other

00:27:15,210 --> 00:27:19,200
I think a lot of people get very

00:27:17,100 --> 00:27:20,580
opinionated about stuff when in the end

00:27:19,200 --> 00:27:22,259
goal is that we just want to create

00:27:20,580 --> 00:27:23,970
things we want to build things we want

00:27:22,259 --> 00:27:26,759
to actually get things done if you can

00:27:23,970 --> 00:27:28,320
get things done in a way that is like

00:27:26,759 --> 00:27:30,269
going against the way that the current

00:27:28,320 --> 00:27:31,710
person that is really hyping up

00:27:30,269 --> 00:27:33,990
something that they created themselves

00:27:31,710 --> 00:27:36,269
maybe it's talking about then I wouldn't

00:27:33,990 --> 00:27:38,999
listen too much to them I think that

00:27:36,269 --> 00:27:41,100
both both ways of doing things are good

00:27:38,999 --> 00:27:42,860
I don't really see any reason that I

00:27:41,100 --> 00:27:46,049
would not continue with schema first

00:27:42,860 --> 00:27:47,669
graphic you all development what happens

00:27:46,049 --> 00:27:50,909
if you want to change your data type

00:27:47,669 --> 00:27:52,980
model any kind of migration support yes

00:27:50,909 --> 00:27:56,220
so you can continually migrate and

00:27:52,980 --> 00:27:57,809
change your your schema and as you as

00:27:56,220 --> 00:27:59,399
you change your schema you can deploy

00:27:57,809 --> 00:28:01,320
new versions or revert back to old

00:27:59,399 --> 00:28:04,679
versions with versioning that's built in

00:28:01,320 --> 00:28:08,249
and last question for today can you run

00:28:04,679 --> 00:28:11,840
both rest and graph QL at the same time

00:28:08,249 --> 00:28:11,840

YouTube URL: https://www.youtube.com/watch?v=BLmoce4tjMc


