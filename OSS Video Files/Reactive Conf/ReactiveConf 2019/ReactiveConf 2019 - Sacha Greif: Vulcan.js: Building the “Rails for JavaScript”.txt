Title: ReactiveConf 2019 - Sacha Greif: Vulcan.js: Building the “Rails for JavaScript”
Publication date: 2019-10-31
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
We all love the modern JavaScript stack, but why does it sometimes feel like it takes us weeks to achieve what Rails developers can do in one afternoon? In this talk, I’ll use my own experience building Vulcan.js –a full-stack GraphQL JavaScript framework– to explore what a modern “Rails for JavaScript” would look like, and seek out the path to reclaiming our lost productivity.
Captions: 
	00:00:02,720 --> 00:00:11,850
[Music]

00:00:15,840 --> 00:00:25,810
okay hi everybody so move fast and break

00:00:22,360 --> 00:00:29,050
things doesn't anybody know which

00:00:25,810 --> 00:00:32,020
company's moto that this is anybody you

00:00:29,050 --> 00:00:34,710
want to yell out the answer Facebook

00:00:32,020 --> 00:00:37,840
yeah you've seen this social network

00:00:34,710 --> 00:00:38,800
yeah Facebook it's kind of a weird model

00:00:37,840 --> 00:00:42,640
when you think about it

00:00:38,800 --> 00:00:45,309
right like only a company like Facebook

00:00:42,640 --> 00:00:47,140
could ever adopt something like this as

00:00:45,309 --> 00:00:48,729
their slogan if you think about it it

00:00:47,140 --> 00:00:53,280
would make a terrible slogan for like a

00:00:48,729 --> 00:00:57,519
moving company it wouldn't be very good

00:00:53,280 --> 00:00:59,949
but these days even Facebook is moving

00:00:57,519 --> 00:01:02,949
away from that slogan and they're trying

00:00:59,949 --> 00:01:05,950
to be more grown-up do things more like

00:01:02,949 --> 00:01:09,490
by the book but I want to go back in

00:01:05,950 --> 00:01:11,890
time today and ask why they adopted that

00:01:09,490 --> 00:01:15,280
slogan in the first place

00:01:11,890 --> 00:01:17,770
and I think it's because they were

00:01:15,280 --> 00:01:20,560
trying to encourage this kind of what I

00:01:17,770 --> 00:01:25,810
would call the hacker approach to

00:01:20,560 --> 00:01:27,189
software so what I mean by that is you

00:01:25,810 --> 00:01:29,289
can't have two ways of approaching

00:01:27,189 --> 00:01:31,060
problems you have this hacker way where

00:01:29,289 --> 00:01:34,630
you want to move fast and break things

00:01:31,060 --> 00:01:37,119
where you're focused more on the short

00:01:34,630 --> 00:01:40,630
term on getting results even if it means

00:01:37,119 --> 00:01:43,170
you know making a few sacrifices and a

00:01:40,630 --> 00:01:47,200
hacker might be more of a generalist

00:01:43,170 --> 00:01:49,090
like myself so I've learned lots of

00:01:47,200 --> 00:01:50,530
little bits and pieces basically

00:01:49,090 --> 00:01:54,369
whatever I needed to learn to get the

00:01:50,530 --> 00:01:57,549
job done and the downside of this which

00:01:54,369 --> 00:01:59,619
I sometimes feel myself is having

00:01:57,549 --> 00:02:04,149
scaling issues not being able to deal

00:01:59,619 --> 00:02:05,679
with larger scale projects and then on

00:02:04,149 --> 00:02:09,250
the other end of the spectrum you have

00:02:05,679 --> 00:02:12,520
the engineers they think about the long

00:02:09,250 --> 00:02:16,840
term they want to do things you know by

00:02:12,520 --> 00:02:18,880
the book follow best practices they

00:02:16,840 --> 00:02:22,180
specialized in you know back-end

00:02:18,880 --> 00:02:24,099
front-end DevOps and then the downside

00:02:22,180 --> 00:02:25,810
of this approach is sometimes you fall

00:02:24,099 --> 00:02:29,140
prey to premature

00:02:25,810 --> 00:02:29,440
optimization you know you spend so much

00:02:29,140 --> 00:02:31,870
time

00:02:29,440 --> 00:02:34,060
agonizing over which database to pick

00:02:31,870 --> 00:02:36,220
that you never actually launched the

00:02:34,060 --> 00:02:39,849
project and I'm sure we all know a

00:02:36,220 --> 00:02:42,880
couple people like that so at this point

00:02:39,849 --> 00:02:44,739
you guys are probably thinking wait but

00:02:42,880 --> 00:02:46,860
I know hackers who are great at long

00:02:44,739 --> 00:02:49,510
term thinking I know engineers who are

00:02:46,860 --> 00:02:52,950
great at getting things done and that's

00:02:49,510 --> 00:02:57,099
true I definitely agree so these are

00:02:52,950 --> 00:02:59,410
pretty broad generalizations but I think

00:02:57,099 --> 00:03:02,049
it can be useful just as a thought

00:02:59,410 --> 00:03:04,660
experiment right as a framing device to

00:03:02,049 --> 00:03:09,430
think about how we approach software and

00:03:04,660 --> 00:03:11,920
I think you can use the same framing for

00:03:09,430 --> 00:03:14,410
technologies so you have like hacker

00:03:11,920 --> 00:03:16,239
technologies like jQuery WordPress which

00:03:14,410 --> 00:03:19,870
you can get started with pretty easily

00:03:16,239 --> 00:03:21,970
but maybe I don't don't do so well on

00:03:19,870 --> 00:03:23,739
large complex projects and then on the

00:03:21,970 --> 00:03:26,980
other end of the spectrum typescript

00:03:23,739 --> 00:03:28,360
graph QL things were especially if

00:03:26,980 --> 00:03:30,160
you're a beginner the benefits are not

00:03:28,360 --> 00:03:32,620
like obvious right away

00:03:30,160 --> 00:03:34,209
but the more you use them the more you

00:03:32,620 --> 00:03:37,750
understand that they help you write more

00:03:34,209 --> 00:03:41,319
robust code and kind of make everything

00:03:37,750 --> 00:03:43,450
more predictable and now the reason I

00:03:41,319 --> 00:03:47,170
mention all this is because I have this

00:03:43,450 --> 00:03:48,959
theory that explains all the issues

00:03:47,170 --> 00:03:51,959
we've all had for the past couple years

00:03:48,959 --> 00:03:54,579
and my theory is that javascript is

00:03:51,959 --> 00:03:58,870
slowly moving from one side of the

00:03:54,579 --> 00:04:02,470
spectrum to the other it's growing up

00:03:58,870 --> 00:04:04,690
basically it's maturing and also getting

00:04:02,470 --> 00:04:08,889
more complex so any JavaScript

00:04:04,690 --> 00:04:13,930
developers in the room okay one or two

00:04:08,889 --> 00:04:15,459
okay so I think this is might be the

00:04:13,930 --> 00:04:19,030
reason why we have this idea of

00:04:15,459 --> 00:04:21,549
JavaScript fatigue this is a three year

00:04:19,030 --> 00:04:23,410
old article I think it's kind of still

00:04:21,549 --> 00:04:25,330
relevant right about how learning

00:04:23,410 --> 00:04:28,750
JavaScript is so complex because there's

00:04:25,330 --> 00:04:32,020
so many moving parts in fact this

00:04:28,750 --> 00:04:35,229
article and this phenomenon of fatigue

00:04:32,020 --> 00:04:38,890
is the reason why I launched this

00:04:35,229 --> 00:04:39,520
project the state of JavaScript which is

00:04:38,890 --> 00:04:42,009
an

00:04:39,520 --> 00:04:44,669
survey of JavaScript trends maybe some

00:04:42,009 --> 00:04:49,840
of you have seen it before or even

00:04:44,669 --> 00:04:51,729
participated in it cool but even knowing

00:04:49,840 --> 00:04:55,690
those trends even you know knowing which

00:04:51,729 --> 00:04:57,970
technologies are popular or not it's

00:04:55,690 --> 00:05:02,919
still a lot of work to build JavaScript

00:04:57,970 --> 00:05:04,659
apps the reason is simple or one of the

00:05:02,919 --> 00:05:06,849
reason at least is because there's two

00:05:04,659 --> 00:05:08,970
completely different environments to

00:05:06,849 --> 00:05:13,330
consider right the server and the client

00:05:08,970 --> 00:05:15,580
and each of these environments has its

00:05:13,330 --> 00:05:18,669
own like boxes its own little bricks

00:05:15,580 --> 00:05:21,190
that you need to put together so if we

00:05:18,669 --> 00:05:24,610
were building like a sample hypothetical

00:05:21,190 --> 00:05:28,509
a modern JavaScript app what would we

00:05:24,610 --> 00:05:35,349
need well we might use Apollo for data

00:05:28,509 --> 00:05:38,379
loading Redux maybe web pack react maybe

00:05:35,349 --> 00:05:40,569
material UI as a UI library that's

00:05:38,379 --> 00:05:42,669
already quite a few things and that's

00:05:40,569 --> 00:05:46,000
just the client right then on the server

00:05:42,669 --> 00:05:50,219
you need a way to store your data you

00:05:46,000 --> 00:05:52,419
need an API layer some routing of

00:05:50,219 --> 00:05:55,469
server-side rendering and probably a way

00:05:52,419 --> 00:05:59,110
to deploy and this is just one way to

00:05:55,469 --> 00:06:01,000
solve that equation right but you can

00:05:59,110 --> 00:06:04,930
already see there's lots of different

00:06:01,000 --> 00:06:06,639
little bricks and the thing is there's

00:06:04,930 --> 00:06:08,979
not a ton of overlap between say

00:06:06,639 --> 00:06:11,889
learning how Apolo works and

00:06:08,979 --> 00:06:14,680
understanding web pack every time it's a

00:06:11,889 --> 00:06:16,120
new thing you need to learn and then

00:06:14,680 --> 00:06:18,580
that's not even like half the battle

00:06:16,120 --> 00:06:21,090
because after you understand each brick

00:06:18,580 --> 00:06:24,090
you need to figure out the plumbing

00:06:21,090 --> 00:06:27,789
between them and that's a lot of work

00:06:24,090 --> 00:06:29,620
like let's just say a polo and react if

00:06:27,789 --> 00:06:32,349
you need to send some Apollo

00:06:29,620 --> 00:06:34,930
data to your react components these days

00:06:32,349 --> 00:06:37,150
you can use hooks but before that it

00:06:34,930 --> 00:06:40,599
used to be render props and before that

00:06:37,150 --> 00:06:43,180
higher-order components so every time

00:06:40,599 --> 00:06:46,560
things change you need to relearn new

00:06:43,180 --> 00:06:49,960
API as new patterns if you look at

00:06:46,560 --> 00:06:51,639
sequel to graph QL how to get your

00:06:49,960 --> 00:06:53,240
database data into your graphical API

00:06:51,639 --> 00:06:56,660
there's like let

00:06:53,240 --> 00:07:00,350
entire products to take care of that

00:06:56,660 --> 00:07:03,050
this morning or we had been G from

00:07:00,350 --> 00:07:06,410
post-grad file and post-grad file is

00:07:03,050 --> 00:07:07,730
like a really great tool but it only

00:07:06,410 --> 00:07:09,200
helps you on the backend right it

00:07:07,730 --> 00:07:12,350
doesn't really have an opinion on what

00:07:09,200 --> 00:07:14,120
goes on on the front end so we're in

00:07:12,350 --> 00:07:18,350
this situation where we have this really

00:07:14,120 --> 00:07:20,450
flexible and performance tools but it

00:07:18,350 --> 00:07:23,030
just like increases the level of

00:07:20,450 --> 00:07:25,130
complexity and I wonder if sometimes if

00:07:23,030 --> 00:07:26,660
we're not in that situation where we're

00:07:25,130 --> 00:07:32,390
so used to it that we don't really know

00:07:26,660 --> 00:07:34,490
this how hard things can be and that's

00:07:32,390 --> 00:07:38,330
exactly what I'm going to talk about

00:07:34,490 --> 00:07:41,060
today basically I want to talk about my

00:07:38,330 --> 00:07:44,570
quest for a better way of doing things

00:07:41,060 --> 00:07:47,750
for a more unified way of doing things

00:07:44,570 --> 00:07:53,050
and the way I like to describe it is a

00:07:47,750 --> 00:07:56,390
quest for the Holy rails of JavaScript

00:07:53,050 --> 00:07:59,300
so when I talk about rails of course I

00:07:56,390 --> 00:08:00,800
mean Ruby on Rails but this talk will

00:07:59,300 --> 00:08:03,140
not actually have anything to do with

00:08:00,800 --> 00:08:04,970
Ruby on Rails so if there are any

00:08:03,140 --> 00:08:10,760
disappointed we also developers in the

00:08:04,970 --> 00:08:12,680
audience I apologize so what I mean what

00:08:10,760 --> 00:08:14,780
I'm interested in in reels is more like

00:08:12,680 --> 00:08:17,020
the philosophy right so there's this

00:08:14,780 --> 00:08:21,080
document called the rails doctrine

00:08:17,020 --> 00:08:22,880
written by DHH and these are a few of

00:08:21,080 --> 00:08:25,820
the principles so optimized for

00:08:22,880 --> 00:08:29,300
programmer happiness convention over

00:08:25,820 --> 00:08:31,790
configuration and the menu is omakase

00:08:29,300 --> 00:08:34,160
which is a japanese word that means like

00:08:31,790 --> 00:08:37,430
leave it up to the chef to decide what

00:08:34,160 --> 00:08:40,039
you eat and if I were to write the

00:08:37,430 --> 00:08:42,370
JavaScript doctrine well I don't know

00:08:40,039 --> 00:08:45,770
how well these would fit the current

00:08:42,370 --> 00:08:48,430
ecosystem right instead of optimized for

00:08:45,770 --> 00:08:51,530
programmer happiness it's more

00:08:48,430 --> 00:08:54,250
programmers can take it right yeah

00:08:51,530 --> 00:08:56,240
they're big boys they'll figure it out

00:08:54,250 --> 00:08:59,120
and instead of convention over

00:08:56,240 --> 00:09:01,910
configuration its configure all the

00:08:59,120 --> 00:09:03,830
things we keep getting more control over

00:09:01,910 --> 00:09:05,430
what we can do which is great but it's

00:09:03,830 --> 00:09:07,770
also more work

00:09:05,430 --> 00:09:10,850
and then it's not the menu is omakase

00:09:07,770 --> 00:09:16,620
its have it your way

00:09:10,850 --> 00:09:17,940
that the Burger King doctrine so another

00:09:16,620 --> 00:09:22,140
thing I really like from that document

00:09:17,940 --> 00:09:24,270
is this reals mission is to swing its

00:09:22,140 --> 00:09:26,839
machete at the thick and ever-growing

00:09:24,270 --> 00:09:29,820
jungle of recurring decisions that face

00:09:26,839 --> 00:09:35,750
developers and I think javascript right

00:09:29,820 --> 00:09:38,550
now could use a few machete swings so

00:09:35,750 --> 00:09:40,920
I'm not the only one who is thinking

00:09:38,550 --> 00:09:42,480
about this topic you have you know

00:09:40,920 --> 00:09:44,490
people like Nick Rock one of the

00:09:42,480 --> 00:09:46,350
creators of graph QL saying that the

00:09:44,490 --> 00:09:50,700
biggest gap in the ecosystem is a rails

00:09:46,350 --> 00:09:53,160
for graph QL system someone here saying

00:09:50,700 --> 00:09:56,490
that Knox Jas is like Ruby on Rails for

00:09:53,160 --> 00:10:01,529
JavaScript finally so there's people

00:09:56,490 --> 00:10:05,000
thinking about this topic so before we

00:10:01,529 --> 00:10:08,370
move on a little bit more about me I

00:10:05,000 --> 00:10:11,550
live in Kyoto Japan as you can probably

00:10:08,370 --> 00:10:14,209
tell I'm not from there originally and I

00:10:11,550 --> 00:10:16,589
moved there about seven years ago and

00:10:14,209 --> 00:10:21,120
when I moved there I decided to use that

00:10:16,589 --> 00:10:22,500
as a chance for a fresh start and by

00:10:21,120 --> 00:10:25,230
that I mean I learned you know new

00:10:22,500 --> 00:10:27,060
things started new projects and one of

00:10:25,230 --> 00:10:30,330
those things I learned was this pretty

00:10:27,060 --> 00:10:32,520
cool framework called meteor J's so

00:10:30,330 --> 00:10:36,570
anybody here has heard of that before or

00:10:32,520 --> 00:10:39,690
used it maybe okay a few people so I

00:10:36,570 --> 00:10:41,700
really liked meteor in fact I liked it

00:10:39,690 --> 00:10:42,839
so much that I ended up writing a book

00:10:41,700 --> 00:10:47,550
about it

00:10:42,839 --> 00:10:50,430
discover meteor and the reason I like

00:10:47,550 --> 00:10:53,610
meteor so much is that it really gave

00:10:50,430 --> 00:10:56,190
you a lot out of the box so meteor was a

00:10:53,610 --> 00:10:58,650
full-stack framework client-server and

00:10:56,190 --> 00:11:01,430
it kind of already gave you all these

00:10:58,650 --> 00:11:04,740
little bricks that just work together so

00:11:01,430 --> 00:11:07,050
for example mini is kind of an

00:11:04,740 --> 00:11:12,560
emulation of MongoDB that runs in the

00:11:07,050 --> 00:11:16,380
client meteor has its own account system

00:11:12,560 --> 00:11:19,140
it has its own like deployment service

00:11:16,380 --> 00:11:20,190
and all these things just work together

00:11:19,140 --> 00:11:22,649
they're made to work together

00:11:20,190 --> 00:11:25,260
out-of-the-box so there's no plumbing

00:11:22,649 --> 00:11:28,860
layer it's it's like you don't even need

00:11:25,260 --> 00:11:30,870
to take care of that so that's a huge

00:11:28,860 --> 00:11:33,810
time-saver and then the other thing that

00:11:30,870 --> 00:11:36,420
I really like is neither is full stack

00:11:33,810 --> 00:11:38,790
so it's all JavaScript but it's not just

00:11:36,420 --> 00:11:40,260
having like two code bases like a

00:11:38,790 --> 00:11:43,110
back-end on the front-end it's actually

00:11:40,260 --> 00:11:45,510
a single unified code base where you can

00:11:43,110 --> 00:11:47,550
share code between both environments so

00:11:45,510 --> 00:11:50,760
you can share component code for

00:11:47,550 --> 00:11:54,660
server-side rendering models helpers and

00:11:50,760 --> 00:11:57,209
even have the same API on both sides and

00:11:54,660 --> 00:12:02,940
I find that to be a really elegant way

00:11:57,209 --> 00:12:04,110
of solving this complexity issue now at

00:12:02,940 --> 00:12:06,750
this point you might be wondering well

00:12:04,110 --> 00:12:10,350
if meteor is so great why aren't we all

00:12:06,750 --> 00:12:13,260
using it and there are a few reasons

00:12:10,350 --> 00:12:16,709
some of them are like technical and some

00:12:13,260 --> 00:12:19,200
of them are also more business like so

00:12:16,709 --> 00:12:22,769
meteor the company behind meteor also

00:12:19,200 --> 00:12:24,660
created a polo and I think what's

00:12:22,769 --> 00:12:28,290
interesting is in many ways a polo is

00:12:24,660 --> 00:12:30,890
almost the opposite of meteor so going

00:12:28,290 --> 00:12:34,649
back to my hacker versus engineers idea

00:12:30,890 --> 00:12:37,829
meteor is very much a hacker technology

00:12:34,649 --> 00:12:42,089
in the sense that it's a very generalist

00:12:37,829 --> 00:12:45,149
it does a lot it's very easy to learn it

00:12:42,089 --> 00:12:48,959
makes you very productive but it does

00:12:45,149 --> 00:12:53,279
suffer from scaling issues and you know

00:12:48,959 --> 00:12:55,079
it's also I think the beginning was a

00:12:53,279 --> 00:12:58,470
bit closed off so you paid the price for

00:12:55,079 --> 00:13:00,269
that convenience some times and now a

00:12:58,470 --> 00:13:02,670
polo on the other hand is very focused

00:13:00,269 --> 00:13:06,779
on one use case like that the graph QL

00:13:02,670 --> 00:13:08,459
stack but it's also kind of hard to

00:13:06,779 --> 00:13:10,829
learn I feel like there's a lot of

00:13:08,459 --> 00:13:13,860
things to know lots of things needs to

00:13:10,829 --> 00:13:15,990
be done manually and so it's really more

00:13:13,860 --> 00:13:21,029
focused towards engineers and the

00:13:15,990 --> 00:13:23,459
enterprise market so because of that I

00:13:21,029 --> 00:13:25,079
feel like the company slowly pivoted

00:13:23,459 --> 00:13:28,640
away from meteor and more towards

00:13:25,079 --> 00:13:30,899
dislike engineer side of things and I

00:13:28,640 --> 00:13:32,940
kind of think that meteor didn't quite

00:13:30,899 --> 00:13:36,899
fall fill its full

00:13:32,940 --> 00:13:39,720
and for that reason I decided to throw

00:13:36,899 --> 00:13:42,240
my own hat into the ring and come up

00:13:39,720 --> 00:13:43,380
with my own JavaScript framework because

00:13:42,240 --> 00:13:50,540
you know we don't have enough of those

00:13:43,380 --> 00:13:50,540
already and so I call it volcan Jas and

00:13:51,230 --> 00:13:55,830
I'm going to talk a little bit about how

00:13:53,459 --> 00:13:58,130
it works so first of all the main thing

00:13:55,830 --> 00:14:00,930
to know is that it's still using meteor

00:13:58,130 --> 00:14:05,550
underneath so it's kind of built on top

00:14:00,930 --> 00:14:09,029
or around meteor but the big difference

00:14:05,550 --> 00:14:12,330
is we really tried to instead of relying

00:14:09,029 --> 00:14:13,890
on the you know a meteors own way of

00:14:12,330 --> 00:14:16,770
doing things we try to be much more

00:14:13,890 --> 00:14:19,200
mainstream and open to things like

00:14:16,770 --> 00:14:24,720
Apollo graph QL which are much more

00:14:19,200 --> 00:14:26,339
standard also react as you can see but

00:14:24,720 --> 00:14:29,130
then we're still leveraging meteor for

00:14:26,339 --> 00:14:32,010
accounts the database the bundling

00:14:29,130 --> 00:14:33,839
system and basically the architecture

00:14:32,010 --> 00:14:35,970
that lets you have this really good

00:14:33,839 --> 00:14:42,380
productivity and really elegant way of

00:14:35,970 --> 00:14:45,060
sharing code and what this lets us do is

00:14:42,380 --> 00:14:47,700
based a lot of the way things work

00:14:45,060 --> 00:14:50,880
around models so just like you know in

00:14:47,700 --> 00:14:53,730
rails or laravel or whatever you have

00:14:50,880 --> 00:14:55,230
your models which we can use to do a lot

00:14:53,730 --> 00:14:59,339
of things so on the server we can

00:14:55,230 --> 00:15:03,020
actually generate your entire graph QL

00:14:59,339 --> 00:15:06,830
API based on those JavaScript models

00:15:03,020 --> 00:15:11,220
which again is very similar to things

00:15:06,830 --> 00:15:14,190
like post profile which does that too

00:15:11,220 --> 00:15:16,950
and even Facebook internally uses that

00:15:14,190 --> 00:15:19,950
same pattern of having like a PHP in

00:15:16,950 --> 00:15:22,140
that case schema or model and generating

00:15:19,950 --> 00:15:22,980
their graph QL code instead of having to

00:15:22,140 --> 00:15:26,310
write it by hand

00:15:22,980 --> 00:15:30,240
and because Vulcan is full stack and we

00:15:26,310 --> 00:15:32,670
have that knowledge of what the API is

00:15:30,240 --> 00:15:34,740
going to look like we can do a lot of

00:15:32,670 --> 00:15:38,250
cool things for you on the client so we

00:15:34,740 --> 00:15:41,339
can help make data loading easier forms

00:15:38,250 --> 00:15:43,770
can be automatically generated and even

00:15:41,339 --> 00:15:46,230
other components like data tables can

00:15:43,770 --> 00:15:48,690
just work out of the box and

00:15:46,230 --> 00:15:52,110
know how to load sort and filter the

00:15:48,690 --> 00:15:59,520
data for you so let's talk a little bit

00:15:52,110 --> 00:16:02,160
about the schema generation part so if

00:15:59,520 --> 00:16:04,320
you didn't have volcán i well and you

00:16:02,160 --> 00:16:06,210
wanted to write a graphical api here's

00:16:04,320 --> 00:16:09,990
what you would have to do right you have

00:16:06,210 --> 00:16:13,710
to write your type type movie the field

00:16:09,990 --> 00:16:17,220
and so on you will have to write some

00:16:13,710 --> 00:16:19,320
query types so this is basically saying

00:16:17,220 --> 00:16:22,610
that you can ask for a single movie or a

00:16:19,320 --> 00:16:25,740
list of movies each of these query has

00:16:22,610 --> 00:16:28,830
arguments in the form of an input type

00:16:25,740 --> 00:16:33,210
and it returns something which also

00:16:28,830 --> 00:16:35,670
needs its own output type and then if

00:16:33,210 --> 00:16:38,840
you want to declare mutations because

00:16:35,670 --> 00:16:42,660
you want to be able to modify your data

00:16:38,840 --> 00:16:44,880
these also need their own types which

00:16:42,660 --> 00:16:47,430
you know adds up to a lot of boilerplate

00:16:44,880 --> 00:16:49,650
code you need to write out by hand and

00:16:47,430 --> 00:16:51,140
that's only in the graph QL part right

00:16:49,650 --> 00:16:53,730
after that you need to write your

00:16:51,140 --> 00:16:55,680
resolver functions which are basically

00:16:53,730 --> 00:16:58,170
the functions that listen to the graph

00:16:55,680 --> 00:17:03,060
QL query and then tell your server what

00:16:58,170 --> 00:17:05,490
to do and how to get related data and of

00:17:03,060 --> 00:17:07,470
course that's like the key part of your

00:17:05,490 --> 00:17:10,590
back-end and that you need to worry

00:17:07,470 --> 00:17:12,570
about security performance a lot of

00:17:10,590 --> 00:17:16,290
these things which are definitely not

00:17:12,570 --> 00:17:19,190
easy so the Vulcan approach is to just

00:17:16,290 --> 00:17:23,130
generate all that for you and generate a

00:17:19,190 --> 00:17:26,550
basic default crud API and as you can

00:17:23,130 --> 00:17:30,570
see you specify a JavaScript schema very

00:17:26,550 --> 00:17:33,030
similar to say Mongoose and you have

00:17:30,570 --> 00:17:35,220
these few of volcán specific fields like

00:17:33,030 --> 00:17:39,180
can read can create can update which

00:17:35,220 --> 00:17:41,730
tells the server how to handle security

00:17:39,180 --> 00:17:44,580
basically how to restrict your content

00:17:41,730 --> 00:17:48,990
to which user groups and from that you

00:17:44,580 --> 00:17:50,700
get your entire graph QL API now a

00:17:48,990 --> 00:17:54,960
question I often get when I explain this

00:17:50,700 --> 00:17:57,739
concept is well this means your API is

00:17:54,960 --> 00:18:00,739
tied one to one to your database

00:17:57,739 --> 00:18:03,899
but we have a way around that which is

00:18:00,739 --> 00:18:05,539
computed fields or or virtual fields in

00:18:03,899 --> 00:18:10,139
other words fields that exist in your

00:18:05,539 --> 00:18:11,489
API but not your database so if you want

00:18:10,139 --> 00:18:15,719
to do that for example you want to

00:18:11,489 --> 00:18:17,909
transform like a date into a human

00:18:15,719 --> 00:18:20,219
readable timestamp like two hours ago or

00:18:17,909 --> 00:18:22,969
something or ten minutes ago now you can

00:18:20,219 --> 00:18:26,039
very simply just add this resolve as

00:18:22,969 --> 00:18:30,479
property and you will get your created

00:18:26,039 --> 00:18:32,759
at ago field in the API so this idea of

00:18:30,479 --> 00:18:34,499
having the schema as the central source

00:18:32,759 --> 00:18:37,079
of proof and then generating everything

00:18:34,499 --> 00:18:39,899
from that is very powerful first of all

00:18:37,079 --> 00:18:42,109
it saves a ton of time but the other big

00:18:39,899 --> 00:18:45,089
advantage is when you change your schema

00:18:42,109 --> 00:18:49,679
the API gets updated automatically

00:18:45,089 --> 00:18:53,940
things won't get out of sync another

00:18:49,679 --> 00:18:56,759
thing we can do is simplify forms so

00:18:53,940 --> 00:18:59,669
let's say you wanted to hand code a form

00:18:56,759 --> 00:19:03,779
to edit movie that's a you might be you

00:18:59,669 --> 00:19:06,149
know building like IMDB or something so

00:19:03,779 --> 00:19:07,379
first you need to load that movie in in

00:19:06,149 --> 00:19:11,249
the browser right because you need to

00:19:07,379 --> 00:19:13,019
see what data you're editing then you

00:19:11,249 --> 00:19:15,450
need to generate the form with the form

00:19:13,019 --> 00:19:18,570
components the inputs checkboxes

00:19:15,450 --> 00:19:22,219
whatever you need to handle that form

00:19:18,570 --> 00:19:25,679
state as the user edits the data and

00:19:22,219 --> 00:19:28,379
finally you need to submit that state

00:19:25,679 --> 00:19:30,450
back to the server to update the data in

00:19:28,379 --> 00:19:32,700
your database now what's cool about

00:19:30,450 --> 00:19:34,320
Vulcan is we have all those building

00:19:32,700 --> 00:19:37,349
blocks already that we can just put

00:19:34,320 --> 00:19:40,919
together for you so we can load atoms

00:19:37,349 --> 00:19:44,609
using that single movie query we saw

00:19:40,919 --> 00:19:47,999
earlier we can generate the form based

00:19:44,609 --> 00:19:50,219
on the model because we know what fields

00:19:47,999 --> 00:19:53,690
are necessary right we know what fields

00:19:50,219 --> 00:19:56,190
are in the model so why not reuse that

00:19:53,690 --> 00:19:58,499
Vulcan will provide like a pre-made

00:19:56,190 --> 00:20:00,959
react component to handle all the state

00:19:58,499 --> 00:20:03,029
and then kind of generate the form for

00:20:00,959 --> 00:20:07,859
you and finally once you're ready to

00:20:03,029 --> 00:20:09,779
submit we have our updates mutation and

00:20:07,859 --> 00:20:10,950
again because Vulcan handles all of this

00:20:09,779 --> 00:20:14,010
because it's

00:20:10,950 --> 00:20:15,900
of a server and the clients framework we

00:20:14,010 --> 00:20:20,010
can make sure that everything works in

00:20:15,900 --> 00:20:23,370
sync together so this is basically all

00:20:20,010 --> 00:20:25,140
it takes to write a form in Vulcan you

00:20:23,370 --> 00:20:27,840
specify the collection in other words

00:20:25,140 --> 00:20:29,940
the model in this case movies and then

00:20:27,840 --> 00:20:34,470
the ID of the document you want to edit

00:20:29,940 --> 00:20:38,910
and you get a form so who here likes to

00:20:34,470 --> 00:20:43,170
code forms anybody yeah one person over

00:20:38,910 --> 00:20:44,940
there yeah it's not a fun thing and in

00:20:43,170 --> 00:20:47,390
my opinion the less time you spend on it

00:20:44,940 --> 00:20:47,390
the better

00:20:47,720 --> 00:20:54,210
so as my day job I work for this company

00:20:52,050 --> 00:20:58,530
in Japan you can think of it as like

00:20:54,210 --> 00:21:00,420
Airbnb for the Japanese market and we

00:20:58,530 --> 00:21:03,390
use Vulcan to build this so we are using

00:21:00,420 --> 00:21:07,080
it in production what's pretty cool is

00:21:03,390 --> 00:21:08,990
that it's actually a great example for

00:21:07,080 --> 00:21:11,670
Vulcan because if you think about Airbnb

00:21:08,990 --> 00:21:14,730
there's nothing that crazy going on

00:21:11,670 --> 00:21:18,960
right it's a lot of forms lots of data

00:21:14,730 --> 00:21:21,150
lists tables and so Vulcan is really

00:21:18,960 --> 00:21:23,160
tailor-made for these very repetitive

00:21:21,150 --> 00:21:27,570
tasks and the goal is really to make

00:21:23,160 --> 00:21:30,690
developers more productive so here's an

00:21:27,570 --> 00:21:33,500
example of the that form system I was

00:21:30,690 --> 00:21:36,480
talking about in this case more complex

00:21:33,500 --> 00:21:38,220
form to edit a listing and all this is

00:21:36,480 --> 00:21:42,660
dynamically generated from the schema

00:21:38,220 --> 00:21:48,720
you can have custom image upload form

00:21:42,660 --> 00:21:51,420
inputs you can do a lot you can also

00:21:48,720 --> 00:21:53,610
have data tables which again are

00:21:51,420 --> 00:21:56,790
generated for you the data loading is

00:21:53,610 --> 00:22:01,370
handled pagination filtering sorting

00:21:56,790 --> 00:22:01,370
that's all handled based on the model so

00:22:01,700 --> 00:22:06,720
if you are interested and you would like

00:22:05,370 --> 00:22:10,530
to get started there's a tutorial

00:22:06,720 --> 00:22:13,740
tutorial you can do what's cool is the

00:22:10,530 --> 00:22:15,630
tutorial itself is a Vulcan app so the

00:22:13,740 --> 00:22:17,970
way it works is as you go through the

00:22:15,630 --> 00:22:20,520
steps here on the left to unlock the

00:22:17,970 --> 00:22:23,100
next step you actually modify the code

00:22:20,520 --> 00:22:24,900
base itself and that takes you through

00:22:23,100 --> 00:22:27,780
building a small

00:22:24,900 --> 00:22:29,400
movie list up here on the right so it

00:22:27,780 --> 00:22:31,620
takes about an hour maybe an hour and a

00:22:29,400 --> 00:22:35,900
half and it's a pretty good way to get

00:22:31,620 --> 00:22:35,900
an overview of everything Vulcan can do

00:22:36,140 --> 00:22:45,900
so in conclusion well I guess my main

00:22:42,600 --> 00:22:49,170
takeaway for this talk besides you know

00:22:45,900 --> 00:22:50,880
you should use Vulcan is this idea that

00:22:49,170 --> 00:22:53,220
we don't have to settle for the way

00:22:50,880 --> 00:22:56,700
things are currently we're you cannot

00:22:53,220 --> 00:22:59,100
have to pick between either do things

00:22:56,700 --> 00:23:00,480
that the hacker way with where you're

00:22:59,100 --> 00:23:03,180
gaining a lot of productivity but you

00:23:00,480 --> 00:23:06,150
have suboptimal tools or the engineer

00:23:03,180 --> 00:23:08,270
way where you get a lot of control and

00:23:06,150 --> 00:23:11,010
really cutting-edge tools but you lose

00:23:08,270 --> 00:23:12,840
productivity in the process I really

00:23:11,010 --> 00:23:16,110
think the next wave of the JavaScript

00:23:12,840 --> 00:23:20,610
ecosystem is going to be tools like next

00:23:16,110 --> 00:23:23,160
Jas Gatsby Vulcan next we try to combine

00:23:20,610 --> 00:23:25,310
those two and I cannot erase that divide

00:23:23,160 --> 00:23:28,050
altogether

00:23:25,310 --> 00:23:31,080
so yeah we will see if the next couple

00:23:28,050 --> 00:23:33,150
years uh prove me right or not but all I

00:23:31,080 --> 00:23:36,440
can say is hopefully 10 years from now

00:23:33,150 --> 00:23:39,270
when people ask about Ruby on Rails

00:23:36,440 --> 00:23:42,140
people say Oh Ruby on Rails it was a

00:23:39,270 --> 00:23:43,960
little bit like Vulcan GS but for Ruby

00:23:42,140 --> 00:23:45,730
thank you very much

00:23:43,960 --> 00:23:49,940
[Applause]

00:23:45,730 --> 00:23:49,940

YouTube URL: https://www.youtube.com/watch?v=iOUFkFQQW5w


