Title: ReactiveConf 2019 - Yuki Li: “Breaking Out of Box”
Publication date: 2019-10-31
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Millennium stage
-------------------------------------------------------------------
“Breaking Out of Box” or Writing a Wasm-based Gameboy Emulator in Rust for Frontend-Developers

Everyone wants to put us in a box, but today we’re going to break out – no webpack, no v8, none of the dizzying 1,000 levels of magic and abstraction that we alternatively enjoy and wrestle with day to day. Instead, we’ll take a journey to simpler times with a gameboy emulator, where every line of code we write maps to an exact cycle count on a known CPU.

We’ll simultaneously learn about this newfangled language called “Rust,” and how it allows us to express the low-level designs of this ancient CPU while sussing out high-level, zero-cost abstractions for our modern code. We’ll compile a web-assembly (“wasm”) binary to run in the browser to explore interop between Rust, wasm, and JavaScript, and see what a full toolchain looks like.

Finally, our journey near its end, we’ll reflect on why we would care about stories about low-level CPU programming; what we lose and gain from JavaScript’s wonderful abstractions, and most importantly, what it all means to us as engineers.
Captions: 
	00:00:02,720 --> 00:00:11,850
[Music]

00:00:15,299 --> 00:00:22,869
hello everyone my name is Yuki and today

00:00:19,720 --> 00:00:25,599
I'm very excited to be here this is my

00:00:22,869 --> 00:00:31,289
very first major talk in front of such a

00:00:25,599 --> 00:00:31,289
big and amazing audience thank you

00:00:31,680 --> 00:00:39,220
so I am very nervous and I figure out

00:00:36,070 --> 00:00:43,559
maybe instead of me do your introduction

00:00:39,220 --> 00:00:47,830
I'll have someone else do it for me so I

00:00:43,559 --> 00:00:49,860
made this little program here is our

00:00:47,830 --> 00:00:52,690
hearing today Yuki

00:00:49,860 --> 00:00:56,799
she just arrived in Prague a few days

00:00:52,690 --> 00:00:58,839
ago and she really likes beer so she was

00:00:56,799 --> 00:01:02,379
looking forward to the Czech beer praha

00:00:58,839 --> 00:01:05,799
hum of Pokemon caution dangerous amount

00:01:02,379 --> 00:01:08,140
of Czech beer ahead but today you know

00:01:05,799 --> 00:01:11,170
is a day of her talk so she needs to

00:01:08,140 --> 00:01:17,049
pass the beer place and go find the

00:01:11,170 --> 00:01:19,539
conference hall there we go wow this is

00:01:17,049 --> 00:01:20,770
an amazing conference hall oh no all the

00:01:19,539 --> 00:01:23,380
audience is already waiting

00:01:20,770 --> 00:01:25,899
go go go Yuki hurry up you need to find

00:01:23,380 --> 00:01:28,840
your stage go go go go go

00:01:25,899 --> 00:01:29,500
hurry up hurry okay there we are there

00:01:28,840 --> 00:01:35,109
she is

00:01:29,500 --> 00:01:37,899
Here I am so today I want to talk about

00:01:35,109 --> 00:01:44,560
my journey building a Gameboy emulator

00:01:37,899 --> 00:01:46,390
in reason in rust and webassembly so

00:01:44,560 --> 00:01:50,170
first a little bit background around me

00:01:46,390 --> 00:01:53,079
I studied a CS in university but not the

00:01:50,170 --> 00:01:55,210
CS as computer science i studied

00:01:53,079 --> 00:01:58,509
cognitive science with the

00:01:55,210 --> 00:02:00,310
specialization in HCI but i still the

00:01:58,509 --> 00:02:02,920
program i played around different

00:02:00,310 --> 00:02:05,340
languages and have been working as a

00:02:02,920 --> 00:02:08,710
full-time engineer for about a year now

00:02:05,340 --> 00:02:11,410
but still there are some traditional

00:02:08,710 --> 00:02:16,210
computer science ideas that is very

00:02:11,410 --> 00:02:18,490
fresh to me so a lot of things that

00:02:16,210 --> 00:02:21,580
might feel natural and obvious to you

00:02:18,490 --> 00:02:24,700
are some complex and mysterious problems

00:02:21,580 --> 00:02:26,319
for me for example

00:02:24,700 --> 00:02:28,390
while I was playing around with

00:02:26,319 --> 00:02:31,660
different languages I realized

00:02:28,390 --> 00:02:37,420
everything eventually compiles to one

00:02:31,660 --> 00:02:40,480
and zeros and Iran on a computer hmm but

00:02:37,420 --> 00:02:45,040
wait a minute what do we really mean

00:02:40,480 --> 00:02:47,950
when we say compile and what are we

00:02:45,040 --> 00:02:51,040
referring to when we say a program is

00:02:47,950 --> 00:02:54,670
running on a computer does a program has

00:02:51,040 --> 00:02:56,349
legs or something and all those small

00:02:54,670 --> 00:03:01,060
questions started to point to this

00:02:56,349 --> 00:03:04,600
bigger question what is programming what

00:03:01,060 --> 00:03:06,970
is a computer so this is actually a very

00:03:04,600 --> 00:03:09,580
scary question to add to ask for me

00:03:06,970 --> 00:03:13,390
because a computer is just a black box

00:03:09,580 --> 00:03:15,700
it is some kind of magic for me but if I

00:03:13,390 --> 00:03:19,180
have those questions stuck in my head

00:03:15,700 --> 00:03:22,150
and I cannot get rid of them maybe I

00:03:19,180 --> 00:03:24,489
should conquer my fear and the way I

00:03:22,150 --> 00:03:30,940
conquer my fear is by doing something

00:03:24,489 --> 00:03:34,560
bold like building one but our modern

00:03:30,940 --> 00:03:39,959
computer like Mac is very very complex

00:03:34,560 --> 00:03:44,440
what about something small and simple a

00:03:39,959 --> 00:03:47,890
game boy it holds some memory and has a

00:03:44,440 --> 00:03:53,650
display screen button please sound it is

00:03:47,890 --> 00:03:57,880
a literate computer so my adventure with

00:03:53,650 --> 00:03:59,799
gameboy emulator starts and today we

00:03:57,880 --> 00:04:03,519
will be following four steps to go

00:03:59,799 --> 00:04:05,950
through our story first we will try to

00:04:03,519 --> 00:04:09,430
figure out what is this thing we're

00:04:05,950 --> 00:04:11,470
trying to emulate for then we will

00:04:09,430 --> 00:04:15,910
choose the tools that can help us to

00:04:11,470 --> 00:04:17,950
actually build this emulator step 3

00:04:15,910 --> 00:04:20,489
we will go dive into a little bit detail

00:04:17,950 --> 00:04:24,130
on how we actually implement this thing

00:04:20,489 --> 00:04:26,919
finally we will do a brief reflection on

00:04:24,130 --> 00:04:29,070
why do we care about how a computer

00:04:26,919 --> 00:04:29,070
works

00:04:30,510 --> 00:04:38,870
so first thing first my goal is to build

00:04:34,950 --> 00:04:43,950
like Emily a emulator for Gameboy

00:04:38,870 --> 00:04:46,560
emulates for a small simple computer so

00:04:43,950 --> 00:04:48,960
what is a computer and by the way when I

00:04:46,560 --> 00:04:51,840
say computer here I'm referring to those

00:04:48,960 --> 00:04:55,740
very simple computer based on 8-bit unit

00:04:51,840 --> 00:04:59,430
process so every simple computer is at

00:04:55,740 --> 00:05:03,150
least composed from three things first

00:04:59,430 --> 00:05:04,800
memory unit which is a storage area that

00:05:03,150 --> 00:05:09,780
holding some value we will be using

00:05:04,800 --> 00:05:12,840
later on the process IO represents four

00:05:09,780 --> 00:05:15,210
inputs and outputs so some example for

00:05:12,840 --> 00:05:18,510
input can be a button output can be

00:05:15,210 --> 00:05:22,670
screen display or sound and most

00:05:18,510 --> 00:05:28,010
importantly CPU central processing unit

00:05:22,670 --> 00:05:32,070
this is the core the brain of a computer

00:05:28,010 --> 00:05:34,230
cool that's the basic now let's pick the

00:05:32,070 --> 00:05:37,080
tools that can help us build this

00:05:34,230 --> 00:05:40,800
emulator and this is actually a very

00:05:37,080 --> 00:05:43,800
important section because depend on what

00:05:40,800 --> 00:05:48,930
tools we choose the way we approach a

00:05:43,800 --> 00:05:52,860
problem will be different first tool web

00:05:48,930 --> 00:05:56,220
assembly also known as wisdom web

00:05:52,860 --> 00:05:59,490
assembly is a new browser language it is

00:05:56,220 --> 00:06:05,160
a binary instruction formats for stack

00:05:59,490 --> 00:06:08,250
based virtual machine this is how it

00:06:05,160 --> 00:06:11,760
looks like this is an example of web

00:06:08,250 --> 00:06:14,640
assembly file in hexadecimal display so

00:06:11,760 --> 00:06:17,450
it is basically a big array of binary

00:06:14,640 --> 00:06:20,340
data that is generated from a compiler

00:06:17,450 --> 00:06:25,620
so we can run languages other than Java

00:06:20,340 --> 00:06:28,800
scripts on the browser web assembly it

00:06:25,620 --> 00:06:31,170
is a very performance language and this

00:06:28,800 --> 00:06:34,620
is making it a very very powerful tool

00:06:31,170 --> 00:06:37,880
for my emulator projects let me show you

00:06:34,620 --> 00:06:37,880
a quick demo here

00:06:40,630 --> 00:06:47,870
so what I'm trying to do here is to

00:06:44,570 --> 00:06:50,780
scroll the Nintendo logo on a gameboy on

00:06:47,870 --> 00:06:54,290
the right side is the actual Gameboy and

00:06:50,780 --> 00:06:59,390
on the left side is the emulated game

00:06:54,290 --> 00:07:01,790
wait let's see what happens okay on the

00:06:59,390 --> 00:07:05,590
left my logo is coming down doing great

00:07:01,790 --> 00:07:10,790
and on the right Wow

00:07:05,590 --> 00:07:13,070
it scrolled so smoothly and this is the

00:07:10,790 --> 00:07:16,760
speed my emulator should have been

00:07:13,070 --> 00:07:20,630
scrolling the logo so my emulator is

00:07:16,760 --> 00:07:23,720
running very very slow or actually it is

00:07:20,630 --> 00:07:26,780
not running slow it is just doing a lot

00:07:23,720 --> 00:07:30,410
of a lot of stuff so in an actual

00:07:26,780 --> 00:07:33,980
Gameboy the way we render a screen is by

00:07:30,410 --> 00:07:36,910
join a pixels one by one and inside of

00:07:33,980 --> 00:07:40,400
the little screen there are in total

00:07:36,910 --> 00:07:43,850
23,000 pixels and that's what I'm trying

00:07:40,400 --> 00:07:46,640
to do emulator to within that past 10

00:07:43,850 --> 00:07:48,770
seconds my emulator has it already be

00:07:46,640 --> 00:07:52,100
joined a screen many many times and

00:07:48,770 --> 00:07:55,070
every time I draw and needs to go

00:07:52,100 --> 00:07:58,520
through this huge loop trying to get the

00:07:55,070 --> 00:08:03,350
image data of that 23,000 pixels

00:07:58,520 --> 00:08:06,800
one by one so as you can see performance

00:08:03,350 --> 00:08:08,960
is a very crucial issue here even little

00:08:06,800 --> 00:08:14,410
performance improvements can help me a

00:08:08,960 --> 00:08:19,010
lot so going back to our web assembly

00:08:14,410 --> 00:08:21,530
again it is a performance language so

00:08:19,010 --> 00:08:24,440
compared to JavaScript where buttons

00:08:21,530 --> 00:08:28,550
assembly is more efficient mainly for

00:08:24,440 --> 00:08:33,280
three reasons first the file size is

00:08:28,550 --> 00:08:36,680
small so the browser can load it quicker

00:08:33,280 --> 00:08:40,400
second the web assembly code is

00:08:36,680 --> 00:08:42,560
relatively close to the machine code so

00:08:40,400 --> 00:08:45,740
the browser only needs to decode it

00:08:42,560 --> 00:08:48,530
instead of parsing it you can think of

00:08:45,740 --> 00:08:50,690
it as you can finally you finally don't

00:08:48,530 --> 00:08:52,100
need an interpreter between your code

00:08:50,690 --> 00:08:53,930
and the computer

00:08:52,100 --> 00:08:59,260
so the communication speed is much

00:08:53,930 --> 00:09:03,290
faster finally streaming completion

00:08:59,260 --> 00:09:05,960
usually in JavaScript the browser can

00:09:03,290 --> 00:09:09,320
only compile the file after it finishes

00:09:05,960 --> 00:09:11,930
downloading a file but with web assembly

00:09:09,320 --> 00:09:14,660
the browser can compile while

00:09:11,930 --> 00:09:19,790
downloading the file so there's also

00:09:14,660 --> 00:09:23,240
some time saved here so when we talk

00:09:19,790 --> 00:09:26,720
about web a web language we usually

00:09:23,240 --> 00:09:29,630
think about JavaScript and as a new

00:09:26,720 --> 00:09:33,860
browser language it webassembly ever

00:09:29,630 --> 00:09:36,560
replace JavaScript we need to keep in

00:09:33,860 --> 00:09:39,440
mind that a language ecosystem like

00:09:36,560 --> 00:09:42,290
libraries is as important as the

00:09:39,440 --> 00:09:46,850
language itself webassembly de beauté

00:09:42,290 --> 00:09:48,980
only around 20 2015 so compared to the

00:09:46,850 --> 00:09:52,010
wildly established JavaScript community

00:09:48,980 --> 00:09:55,400
and ecosystem webassembly

00:09:52,010 --> 00:09:58,670
is still very small at crunch stage

00:09:55,400 --> 00:10:00,970
instead of replacing javascript it is

00:09:58,670 --> 00:10:07,340
something would work very well together

00:10:00,970 --> 00:10:11,570
with Java scripts on the browser alright

00:10:07,340 --> 00:10:14,780
our second tool rust so we talked about

00:10:11,570 --> 00:10:18,410
web assembly it is a binary format file

00:10:14,780 --> 00:10:22,160
and it is very rare that we would like

00:10:18,410 --> 00:10:24,170
hen writes out the web assembly file in

00:10:22,160 --> 00:10:26,360
most of the case we will get a web

00:10:24,170 --> 00:10:28,900
assembly file by writing our code in

00:10:26,360 --> 00:10:34,820
another language and compile into them

00:10:28,900 --> 00:10:37,460
Russ is one of those trusts it is listed

00:10:34,820 --> 00:10:40,490
as the most loved language on a stack

00:10:37,460 --> 00:10:43,160
overflow survey for two years but most

00:10:40,490 --> 00:10:46,550
importantly the reason I pick the rust

00:10:43,160 --> 00:10:51,350
is because it is a statically typed

00:10:46,550 --> 00:10:53,420
language this allows this means the rust

00:10:51,350 --> 00:10:58,040
will give me certain kinds of guarantee

00:10:53,420 --> 00:10:59,990
that I needed rust is also a low lower

00:10:58,040 --> 00:11:02,840
level language that would allow me to

00:10:59,990 --> 00:11:05,810
tweet a little bit let me explain a

00:11:02,840 --> 00:11:08,889
little bit more by what I mean

00:11:05,810 --> 00:11:12,230
rust is a statically typed language

00:11:08,889 --> 00:11:15,319
which means the computer would always

00:11:12,230 --> 00:11:18,379
make sure that your variable is used in

00:11:15,319 --> 00:11:21,889
a consistent way so for example a

00:11:18,379 --> 00:11:24,920
boolean can always only be a boolean

00:11:21,889 --> 00:11:29,660
it can never be accidentally added to a

00:11:24,920 --> 00:11:31,670
number like in JavaScript so if you have

00:11:29,660 --> 00:11:33,800
experience with a statically typed

00:11:31,670 --> 00:11:35,660
language before then the rest type

00:11:33,800 --> 00:11:39,800
system should feel natural and intuitive

00:11:35,660 --> 00:11:42,050
for you but if you're diving in from a

00:11:39,800 --> 00:11:45,439
dynamically typed language like

00:11:42,050 --> 00:11:48,649
JavaScript then you can think of Russ

00:11:45,439 --> 00:11:54,199
type system something like you finally

00:11:48,649 --> 00:11:56,629
got a seat belt in your car there's some

00:11:54,199 --> 00:11:58,930
extra steps you need to take you will be

00:11:56,629 --> 00:12:01,730
keyboarding more defining the types and

00:11:58,930 --> 00:12:05,059
your movement will be kind of restricted

00:12:01,730 --> 00:12:08,029
from here because you need to make sure

00:12:05,059 --> 00:12:11,269
that your your variable type is in sync

00:12:08,029 --> 00:12:14,240
across the entire project otherwise Russ

00:12:11,269 --> 00:12:16,069
would not even compile for you there's

00:12:14,240 --> 00:12:18,350
nothing like oh let me make a small

00:12:16,069 --> 00:12:20,480
change here just to test out and see the

00:12:18,350 --> 00:12:24,339
results I will come back and fix all the

00:12:20,480 --> 00:12:28,370
other stuff later no you cannot do that

00:12:24,339 --> 00:12:33,800
this can be inconvenient sometimes but

00:12:28,370 --> 00:12:35,839
in return we get more safety rust and

00:12:33,800 --> 00:12:39,410
make sure that we are passing around

00:12:35,839 --> 00:12:43,699
corrected data and handling all the

00:12:39,410 --> 00:12:46,910
possible logic branches this is the kind

00:12:43,699 --> 00:12:50,269
of safety I wanted exactly for my

00:12:46,910 --> 00:12:52,490
emulator projects so after working on

00:12:50,269 --> 00:12:56,089
emulator project for about five months

00:12:52,490 --> 00:13:00,259
now I have eight thousand lines of rust

00:12:56,089 --> 00:13:03,620
code this is not a huge codebase but it

00:13:00,259 --> 00:13:06,709
is huge enough that it's beyond my

00:13:03,620 --> 00:13:08,899
ability of keeping track of every single

00:13:06,709 --> 00:13:10,100
line what they are doing that I wrote

00:13:08,899 --> 00:13:12,829
five months ago

00:13:10,100 --> 00:13:15,740
so it is very likely that I can

00:13:12,829 --> 00:13:17,899
accidentally pass a number to a function

00:13:15,740 --> 00:13:18,630
where I should have passed the string to

00:13:17,899 --> 00:13:20,519
it

00:13:18,630 --> 00:13:23,160
and then my emulator starts acting

00:13:20,519 --> 00:13:25,829
weirdly I will spend hours and hours

00:13:23,160 --> 00:13:29,759
trying to debug like what's happening

00:13:25,829 --> 00:13:32,850
and Russ can prevent me from making such

00:13:29,759 --> 00:13:38,490
a mistake and so saving me hours and

00:13:32,850 --> 00:13:40,529
hours debugging time oh so why who do we

00:13:38,490 --> 00:13:47,160
care about handling all the logical

00:13:40,529 --> 00:13:50,639
branches because users are terrible they

00:13:47,160 --> 00:13:52,709
are unpredictable I need to protect my

00:13:50,639 --> 00:13:57,480
little precious Gameboy emulator from

00:13:52,709 --> 00:14:00,149
them and rust can help me predict all

00:13:57,480 --> 00:14:03,209
the possible states my Gameboy emulator

00:14:00,149 --> 00:14:06,690
you can end up being as a result of all

00:14:03,209 --> 00:14:09,360
those kind of weird user input so I can

00:14:06,690 --> 00:14:11,970
handle them now instead of waiting until

00:14:09,360 --> 00:14:16,579
much later someone actually breaks my

00:14:11,970 --> 00:14:19,680
code cool

00:14:16,579 --> 00:14:22,170
now we covered the basics we got our

00:14:19,680 --> 00:14:26,670
tools let's dive deeper into the

00:14:22,170 --> 00:14:28,649
implementation details so in the

00:14:26,670 --> 00:14:31,439
previous chapter we talked about

00:14:28,649 --> 00:14:38,189
computer so now we all know what a

00:14:31,439 --> 00:14:41,579
computer is right but not quite we're

00:14:38,189 --> 00:14:44,670
missing a lot of details knowing a thing

00:14:41,579 --> 00:14:47,339
in theory and actually implementing a

00:14:44,670 --> 00:14:50,610
thing in practice are two totally

00:14:47,339 --> 00:14:52,949
different stories it would force us to

00:14:50,610 --> 00:14:56,189
think about all those little but

00:14:52,949 --> 00:14:59,029
important details about how a computer

00:14:56,189 --> 00:15:04,079
actually works

00:14:59,029 --> 00:15:07,620
let's take Tetris as an example in order

00:15:04,079 --> 00:15:09,720
to play a Tetris game on a gameboy we

00:15:07,620 --> 00:15:13,889
need to feed the Gameboy some tetris

00:15:09,720 --> 00:15:16,319
game file data and this is an example of

00:15:13,889 --> 00:15:20,490
a tetris game that i wrote a while ago

00:15:16,319 --> 00:15:23,550
using a language called reason can

00:15:20,490 --> 00:15:28,680
anyone tell me where is the function

00:15:23,550 --> 00:15:30,960
we're trying to draw a game board yes

00:15:28,680 --> 00:15:36,149
right there in the middle

00:15:30,960 --> 00:15:38,640
on line 43 but this is a file for human

00:15:36,149 --> 00:15:43,260
this is not something a computer is

00:15:38,640 --> 00:15:47,670
looking at instead this is the one

00:15:43,260 --> 00:15:50,760
computer is looking at now can anyone

00:15:47,670 --> 00:15:54,240
tell me where is the function we're

00:15:50,760 --> 00:16:00,209
trying to draw the game board yes I

00:15:54,240 --> 00:16:02,490
heard the answer we don't know but you

00:16:00,209 --> 00:16:03,899
know maybe computer is a little bit

00:16:02,490 --> 00:16:08,070
smarter than last day they are much

00:16:03,899 --> 00:16:13,200
smarter they sure know computer also

00:16:08,070 --> 00:16:16,830
doesn't know so I used to fantasize

00:16:13,200 --> 00:16:19,470
about how smart a computer is but

00:16:16,830 --> 00:16:22,740
actually it turned out they are very

00:16:19,470 --> 00:16:25,380
very dumb they have no idea about all

00:16:22,740 --> 00:16:28,230
the objects variable functions we are

00:16:25,380 --> 00:16:31,560
talking about we are the smart ones who

00:16:28,230 --> 00:16:34,529
understand those abstract concept what

00:16:31,560 --> 00:16:37,800
was actually happening was we were

00:16:34,529 --> 00:16:40,920
breaking down our logics into very small

00:16:37,800 --> 00:16:45,240
simple unit so the computer can

00:16:40,920 --> 00:16:49,650
understand what to do and those small

00:16:45,240 --> 00:16:52,380
simple unit is up code up codes are

00:16:49,650 --> 00:16:56,070
machine language instruction usually

00:16:52,380 --> 00:16:59,339
represented by 8 or 16 bits of data in

00:16:56,070 --> 00:17:03,450
the original Gameboy and there are in

00:16:59,339 --> 00:17:07,110
total only 500 up codes about have 500

00:17:03,450 --> 00:17:11,939
ACOs and that's all the vocabulary a

00:17:07,110 --> 00:17:15,540
computer can understand so going back to

00:17:11,939 --> 00:17:22,199
our treacherous example what was exactly

00:17:15,540 --> 00:17:26,819
happening there so here what you can see

00:17:22,199 --> 00:17:29,190
is on the top is my code of emulating

00:17:26,819 --> 00:17:33,059
the game boy and on the bottom is a

00:17:29,190 --> 00:17:36,390
Tetris game file so in every computer

00:17:33,059 --> 00:17:39,270
there's a thing called PC program

00:17:36,390 --> 00:17:41,880
counter and it is basically indicating

00:17:39,270 --> 00:17:44,740
that where are we focusing on right now

00:17:41,880 --> 00:17:47,380
inside of this big memory big

00:17:44,740 --> 00:17:49,630
ray of memory data it can point to the

00:17:47,380 --> 00:17:52,000
very beginning of the file it can point

00:17:49,630 --> 00:17:54,750
to the very end of the file or it

00:17:52,000 --> 00:17:58,980
actually can point to anywhere in a file

00:17:54,750 --> 00:18:01,960
so in the computer would try to identify

00:17:58,980 --> 00:18:04,179
try to read a memory data where our PC

00:18:01,960 --> 00:18:09,220
is pointing to you and identify which

00:18:04,179 --> 00:18:11,830
opcode it is so for example here if our

00:18:09,220 --> 00:18:15,880
PC now our PC is pointing to this memory

00:18:11,830 --> 00:18:20,620
data a4 so in our program we'll look for

00:18:15,880 --> 00:18:24,880
a for alright there it is

00:18:20,620 --> 00:18:26,890
so this is the a4 opcode I'm not gonna

00:18:24,880 --> 00:18:29,410
dive deep into what this OP code is

00:18:26,890 --> 00:18:31,660
doing but basically it is just like

00:18:29,410 --> 00:18:34,240
reading some memory doing some like

00:18:31,660 --> 00:18:36,640
manipulating memory data and then saying

00:18:34,240 --> 00:18:39,940
after you are done move the PC to the

00:18:36,640 --> 00:18:43,380
next place and as you can see this is

00:18:39,940 --> 00:18:47,800
only two lines of code the opcode

00:18:43,380 --> 00:18:50,170
instruction is very very simple so what

00:18:47,800 --> 00:18:53,590
was actually happening when we load a

00:18:50,170 --> 00:18:55,960
citrus file on a Game Boy is our

00:18:53,590 --> 00:18:59,050
computer wouldn't read wherever the PC

00:18:55,960 --> 00:19:03,010
is pointing to identify which opcode it

00:18:59,050 --> 00:19:06,040
is execute the instruction then move our

00:19:03,010 --> 00:19:11,500
PC identify opcode execute instruction

00:19:06,040 --> 00:19:15,000
then move PC and extra extra so just to

00:19:11,500 --> 00:19:17,950
show you that I'm not making this up

00:19:15,000 --> 00:19:23,590
here's the tetris game running on my

00:19:17,950 --> 00:19:28,420
gameboy emulator so I can play at Type A

00:19:23,590 --> 00:19:30,820
level 0 let me try to finish a line

00:19:28,420 --> 00:19:35,970
that's on the stage and I can't change

00:19:30,820 --> 00:19:41,190
the shape I can speed up again go left

00:19:35,970 --> 00:19:41,190
boom yay I got scores

00:19:43,120 --> 00:19:48,680
so what was happening everything here

00:19:46,550 --> 00:19:52,220
what was happening was just fun

00:19:48,680 --> 00:19:54,410
fundamentally speaking identify identify

00:19:52,220 --> 00:19:57,680
which opcode it is execute the

00:19:54,410 --> 00:20:04,640
instruction move PC RIA memory identify

00:19:57,680 --> 00:20:09,500
opcode execute instruction so computer

00:20:04,640 --> 00:20:12,620
it is not a black box it is just made up

00:20:09,500 --> 00:20:18,920
from many many small things that its

00:20:12,620 --> 00:20:23,810
following its own super simple rules all

00:20:18,920 --> 00:20:25,820
right now we're finally in our step 4 so

00:20:23,810 --> 00:20:28,330
it has been about 5 months since I

00:20:25,820 --> 00:20:31,130
started this Gameboy emulator projects

00:20:28,330 --> 00:20:33,890
I've learned this performance and

00:20:31,130 --> 00:20:37,040
secured with a new browser language web

00:20:33,890 --> 00:20:39,320
assembly I have write some statically

00:20:37,040 --> 00:20:43,190
typed lower level language code and rust

00:20:39,320 --> 00:20:46,280
and I have open a lot of computer black

00:20:43,190 --> 00:20:48,470
boxes like up codes which we talked

00:20:46,280 --> 00:20:50,810
about and a bunch of other stuff we

00:20:48,470 --> 00:20:55,670
didn't talk about like CPU video timer

00:20:50,810 --> 00:20:59,240
they're all very interesting topics but

00:20:55,670 --> 00:21:00,920
let me pause here and ask a question a

00:20:59,240 --> 00:21:04,700
lot of you might have been wondering

00:21:00,920 --> 00:21:09,110
right now why would I care how a

00:21:04,700 --> 00:21:11,300
computer works maybe this is something

00:21:09,110 --> 00:21:15,590
can help you answer interview questions

00:21:11,300 --> 00:21:17,930
better or maybe it is something that may

00:21:15,590 --> 00:21:20,390
make you look smart you know you can

00:21:17,930 --> 00:21:25,790
have a talk on the stage and everyone

00:21:20,390 --> 00:21:30,740
think you are smart but in reality none

00:21:25,790 --> 00:21:35,450
of these matters what really matters is

00:21:30,740 --> 00:21:37,820
about breaking out of the box I hated it

00:21:35,450 --> 00:21:41,450
when people started to label me as a

00:21:37,820 --> 00:21:44,600
front-end engineer and I hated it even

00:21:41,450 --> 00:21:47,300
more when I started to constrain myself

00:21:44,600 --> 00:21:50,840
inside of the front-end engineer label I

00:21:47,300 --> 00:21:53,049
was telling myself that all those lower

00:21:50,840 --> 00:21:55,840
level stuff the back-end stuff

00:21:53,049 --> 00:21:58,029
- complicated that smart people think I

00:21:55,840 --> 00:22:02,649
should live inside on my little

00:21:58,029 --> 00:22:07,830
JavaScript HTML and CSS world I hated

00:22:02,649 --> 00:22:11,440
that I feel so powerless and constrained

00:22:07,830 --> 00:22:14,470
but now after working on this project

00:22:11,440 --> 00:22:17,799
after implementing a gameboy emulator I

00:22:14,470 --> 00:22:20,619
feel much more powerful I was able to

00:22:17,799 --> 00:22:23,289
grow as an engineer in the way that I

00:22:20,619 --> 00:22:25,690
would have never been able to if I was

00:22:23,289 --> 00:22:30,429
just working on some day-to-day work

00:22:25,690 --> 00:22:32,919
stuff add some concrete example now I am

00:22:30,429 --> 00:22:36,700
more aware of different kind of edge

00:22:32,919 --> 00:22:39,489
cases this is mainly due to the rust

00:22:36,700 --> 00:22:43,059
type system forcing me to handle all

00:22:39,489 --> 00:22:45,909
those weird edge cases so now it's kind

00:22:43,059 --> 00:22:52,239
of a habit for me to go look after for

00:22:45,909 --> 00:22:54,970
them also I am more fearless diving into

00:22:52,239 --> 00:22:58,720
unknowns either it's a bug a new code

00:22:54,970 --> 00:23:01,899
base or new tech stack because I have

00:22:58,720 --> 00:23:04,929
already be battling with unknowns for

00:23:01,899 --> 00:23:08,200
months those one and zero and computer

00:23:04,929 --> 00:23:14,169
fundamental unknowns what the worst can

00:23:08,200 --> 00:23:17,619
be and most importantly I realized that

00:23:14,169 --> 00:23:20,499
the way I learned started to change so

00:23:17,619 --> 00:23:23,109
before I was learning in a way that

00:23:20,499 --> 00:23:27,669
trying to find a pattern of given an

00:23:23,109 --> 00:23:30,220
input what relying of a code output B so

00:23:27,669 --> 00:23:35,080
I was copy pasting a solution from Stack

00:23:30,220 --> 00:23:38,799
Overflow but now I ask more why and how

00:23:35,080 --> 00:23:42,249
questions because I realized we are not

00:23:38,799 --> 00:23:44,739
working inside of a box either it is a

00:23:42,249 --> 00:23:47,559
language like JavaScript or framework

00:23:44,739 --> 00:23:52,239
like reacts or any other cool stuff like

00:23:47,559 --> 00:23:56,200
web hack CDN HTTP it is just another

00:23:52,239 --> 00:23:59,830
layer of service we're enjoying so it is

00:23:56,200 --> 00:24:05,049
a tool it is not the world we are living

00:23:59,830 --> 00:24:06,230
inside of so it seems to me in order to

00:24:05,049 --> 00:24:09,200
grow you know

00:24:06,230 --> 00:24:11,809
girl as opinionated thoughtful and a

00:24:09,200 --> 00:24:14,870
powerful engineer we need to keep

00:24:11,809 --> 00:24:18,320
learning new tools so we can execute and

00:24:14,870 --> 00:24:21,110
learn more efficiently we need to keep

00:24:18,320 --> 00:24:23,530
learning new programming philosophy so

00:24:21,110 --> 00:24:26,840
we can be aware of alternative solutions

00:24:23,530 --> 00:24:30,740
compare trade-offs so to come up with

00:24:26,840 --> 00:24:35,000
better better decisions and write better

00:24:30,740 --> 00:24:37,160
code and maybe we need to understand

00:24:35,000 --> 00:24:39,740
some understanding on the computer

00:24:37,160 --> 00:24:43,990
fundamentals so we would not be afraid

00:24:39,740 --> 00:24:49,730
of learning unknowns and driving deep

00:24:43,990 --> 00:24:53,390
and maybe the way we expose ourselves to

00:24:49,730 --> 00:24:57,130
all those new learnings are buying doing

00:24:53,390 --> 00:25:00,140
some crazy and fun stuff for example

00:24:57,130 --> 00:25:03,230
maybe one day you will be giving a talk

00:25:00,140 --> 00:25:06,650
at a conference and you decided to do

00:25:03,230 --> 00:25:09,200
something fun you decided that you will

00:25:06,650 --> 00:25:12,440
make your talk slide from a hacked

00:25:09,200 --> 00:25:15,940
pokemons file that is running on a Game

00:25:12,440 --> 00:25:19,340
Boy emulator so the very initial

00:25:15,940 --> 00:25:22,549
introductory program I showed you it was

00:25:19,340 --> 00:25:26,870
a hacked party mo file running on a Game

00:25:22,549 --> 00:25:30,020
Boy emulator but it was not the Game Boy

00:25:26,870 --> 00:25:33,380
emulator I wrote it was somebody else

00:25:30,020 --> 00:25:39,049
emulator let me show you how it looks

00:25:33,380 --> 00:25:41,299
like on my emulator forgive me for doing

00:25:39,049 --> 00:25:44,360
this I just really wanted to show a live

00:25:41,299 --> 00:25:46,750
demo instead of a video recording so I'm

00:25:44,360 --> 00:25:52,940
editing the file make sure it's

00:25:46,750 --> 00:25:55,900
recompiling building called screen re

00:25:52,940 --> 00:25:58,580
render there wheel

00:25:55,900 --> 00:26:02,030
alright reason cool

00:25:58,580 --> 00:26:04,669
wow there's somewhere just background

00:26:02,030 --> 00:26:06,830
stuff going on you will see you

00:26:04,669 --> 00:26:08,750
eventually some logo there and the

00:26:06,830 --> 00:26:13,280
monster will start fighting each other

00:26:08,750 --> 00:26:15,799
but something's off like the layers is a

00:26:13,280 --> 00:26:18,680
little bit off and there will have some

00:26:15,799 --> 00:26:22,730
like random stuff showing a background

00:26:18,680 --> 00:26:26,660
so this is the real state of today how

00:26:22,730 --> 00:26:30,680
my gameboy emulator looks like this is

00:26:26,660 --> 00:26:39,290
very far from perfect but still I think

00:26:30,680 --> 00:26:42,830
this is very cool we are we are running

00:26:39,290 --> 00:26:47,000
a Game Boy emulator on a browser that is

00:26:42,830 --> 00:26:50,150
running a hack sparta mo file which is

00:26:47,000 --> 00:26:53,570
about to build a Game Boy emulator with

00:26:50,150 --> 00:26:57,980
rust that would compile into webOS Emily

00:26:53,570 --> 00:27:02,440
which will be running on a browser but

00:26:57,980 --> 00:27:05,390
anyways this is a to be continued story

00:27:02,440 --> 00:27:07,910
so if anyone is interested you can

00:27:05,390 --> 00:27:09,950
follow me on Twitter or github I just

00:27:07,910 --> 00:27:11,840
open source to my emulator project last

00:27:09,950 --> 00:27:14,250
night thank you

00:27:11,840 --> 00:27:18,460
[Applause]

00:27:14,250 --> 00:27:18,460

YouTube URL: https://www.youtube.com/watch?v=zVpD5whyjPw


