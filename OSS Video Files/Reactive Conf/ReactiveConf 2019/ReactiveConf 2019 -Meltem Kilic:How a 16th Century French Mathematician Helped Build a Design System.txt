Title: ReactiveConf 2019 -Meltem Kilic:How a 16th Century French Mathematician Helped Build a Design System
Publication date: 2019-10-30
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Discovery stage
-------------------------------------------------------------------
When you’re building a component library or a design system, you’d want to visualize how the growing number of components look in their different states and variations. One way to achieve this would be writing every possible variation of the component by hand. This is a manual process, harder to maintain and means a lot of lines of code. What do we all have in common as developers? We hate all those 3 things.
In this talk, you’ll find out how you can automate your component variation rendering process and improve your workflow by applying the Cartesian Component concept. The code will be presented in React but the concept is applicable to the components written in other frameworks as well
Captions: 
	00:00:02,720 --> 00:00:11,850
[Music]

00:00:14,309 --> 00:00:20,020
so hi I'm very excited to be here at the

00:00:18,369 --> 00:00:22,810
reactive cost stage

00:00:20,020 --> 00:00:25,810
my name is Melton and today I'm here to

00:00:22,810 --> 00:00:29,860
talk to you about how a sixteenth

00:00:25,810 --> 00:00:32,800
century mathematician helped me and

00:00:29,860 --> 00:00:35,110
other awesome folks back in Toronto to

00:00:32,800 --> 00:00:38,830
build a design system for a large

00:00:35,110 --> 00:00:43,000
e-commerce platform so a little bit

00:00:38,830 --> 00:00:47,350
about me I live and work in Toronto

00:00:43,000 --> 00:00:50,110
Canada at a frenetic consultancy called

00:00:47,350 --> 00:00:52,269
wrangle i/o and it's funny if you go to

00:00:50,110 --> 00:00:54,640
the website like wrangle dot IO I'm on

00:00:52,269 --> 00:00:56,350
the main page and it's like so random

00:00:54,640 --> 00:01:00,159
but I was like it's kind of it kind of

00:00:56,350 --> 00:01:03,159
works out for my about slide and I'm

00:01:00,159 --> 00:01:05,770
originally from Ankara Turkey even

00:01:03,159 --> 00:01:08,650
though that picture is from Istanbul I

00:01:05,770 --> 00:01:11,590
couldn't find my a picture of me as an

00:01:08,650 --> 00:01:14,619
adult in Ankara so I just put it there

00:01:11,590 --> 00:01:17,289
yeah I'm from Turkey originally and you

00:01:14,619 --> 00:01:23,320
can find me on Twitter at a trilingual

00:01:17,289 --> 00:01:26,109
mill yeah so before so my talk is kind

00:01:23,320 --> 00:01:29,020
of like in two sections in the first

00:01:26,109 --> 00:01:31,659
part I'd like to briefly touch on design

00:01:29,020 --> 00:01:35,740
systems and then in the second part I

00:01:31,659 --> 00:01:38,619
will talk about how this 16th century

00:01:35,740 --> 00:01:41,560
French mathematician helped me and some

00:01:38,619 --> 00:01:43,539
other people build a design system and

00:01:41,560 --> 00:01:47,109
first of all I'd like to get a lay off

00:01:43,539 --> 00:01:51,969
the land anyone heard of Design Systems

00:01:47,109 --> 00:01:54,090
before ok actually not a lot of people

00:01:51,969 --> 00:01:56,590
so that's good so it's not gonna be like

00:01:54,090 --> 00:01:58,869
everyone already knows this that like

00:01:56,590 --> 00:02:02,829
I'm just like repeating what everyone

00:01:58,869 --> 00:02:05,350
knows cool yeah then it the second part

00:02:02,829 --> 00:02:10,539
will make more sense once we kind of

00:02:05,350 --> 00:02:13,930
like cover what a design system is so in

00:02:10,539 --> 00:02:15,370
a nutshell design system is an

00:02:13,930 --> 00:02:17,760
systematic approach to product

00:02:15,370 --> 00:02:22,330
development so it includes tools

00:02:17,760 --> 00:02:25,360
guidelines shared principles and code

00:02:22,330 --> 00:02:28,960
that enables teams to work

00:02:25,360 --> 00:02:31,360
more efficiently and you'll consistent

00:02:28,960 --> 00:02:34,930
products in collaboration rather than in

00:02:31,360 --> 00:02:37,870
silos and we can call it as a single

00:02:34,930 --> 00:02:41,560
source of truth for all of the product

00:02:37,870 --> 00:02:43,600
teams on their brand so what you might

00:02:41,560 --> 00:02:46,450
be wondering like why we need a design

00:02:43,600 --> 00:02:51,010
system why we like is the set problem

00:02:46,450 --> 00:02:53,890
so for brands like Google or github or

00:02:51,010 --> 00:02:56,400
like Airbnb that have different products

00:02:53,890 --> 00:02:59,110
and they have different product teams

00:02:56,400 --> 00:03:02,860
actually a lot of the things that these

00:02:59,110 --> 00:03:07,090
product teams design or develop ends up

00:03:02,860 --> 00:03:09,760
being similar pieces for example the the

00:03:07,090 --> 00:03:12,700
spacing scale the typography scale or

00:03:09,760 --> 00:03:16,360
the JavaScript components the front-end

00:03:12,700 --> 00:03:18,720
components out there using when when

00:03:16,360 --> 00:03:22,420
they there are lots of product teams

00:03:18,720 --> 00:03:26,709
it's just better to have a dedicated

00:03:22,420 --> 00:03:29,020
team that is responsible to think about

00:03:26,709 --> 00:03:31,780
build and design all these reusable

00:03:29,020 --> 00:03:34,690
pieces so that product teams can

00:03:31,780 --> 00:03:37,810
actually focus on their the challenges

00:03:34,690 --> 00:03:40,360
that are specific to those products so

00:03:37,810 --> 00:03:44,970
in that kind of a scale of a brand

00:03:40,360 --> 00:03:48,340
design system actually helps these teams

00:03:44,970 --> 00:03:51,700
to build more consistent products and be

00:03:48,340 --> 00:03:54,580
more in sync other than them kind of

00:03:51,700 --> 00:03:59,410
like maybe copying and pasting some CSS

00:03:54,580 --> 00:04:02,140
from one code base to another so talking

00:03:59,410 --> 00:04:05,890
about Google I put some examples of like

00:04:02,140 --> 00:04:08,799
existing design systems available out

00:04:05,890 --> 00:04:11,080
there material design is by Google and I

00:04:08,799 --> 00:04:13,810
guess like a lot of prominent front end

00:04:11,080 --> 00:04:16,600
developers I know this like I once built

00:04:13,810 --> 00:04:19,090
like a side project using it so there is

00:04:16,600 --> 00:04:22,930
github which has primer shop for his

00:04:19,090 --> 00:04:25,510
Polaris Carbon by IBM and also there are

00:04:22,930 --> 00:04:28,570
other design systems by other players

00:04:25,510 --> 00:04:30,640
and they have a few kind of like do a

00:04:28,570 --> 00:04:32,260
quick Google search they have like

00:04:30,640 --> 00:04:34,650
really good like blog posts where they

00:04:32,260 --> 00:04:37,030
talk about their journey about like

00:04:34,650 --> 00:04:38,810
building scaling maintaining a design

00:04:37,030 --> 00:04:41,300
system and

00:04:38,810 --> 00:04:44,750
also how you can see how kind of

00:04:41,300 --> 00:04:47,090
different their design systems are just

00:04:44,750 --> 00:04:52,310
based on back there needs of like their

00:04:47,090 --> 00:04:56,390
products and their brand so design

00:04:52,310 --> 00:04:59,840
system has different parts to it so this

00:04:56,390 --> 00:05:01,400
one is more the design system project I

00:04:59,840 --> 00:05:04,580
worked on we have this kind of structure

00:05:01,400 --> 00:05:06,950
so I'm gonna kind of cover this one but

00:05:04,580 --> 00:05:10,940
it might like change slightly but at the

00:05:06,950 --> 00:05:12,590
same time pretty much similar I find so

00:05:10,940 --> 00:05:15,020
it has design language design kit

00:05:12,590 --> 00:05:19,070
component RB dual percent box and

00:05:15,020 --> 00:05:23,570
documentation so design language is

00:05:19,070 --> 00:05:25,760
basically visual the visual design of a

00:05:23,570 --> 00:05:29,710
digital product so it defines

00:05:25,760 --> 00:05:35,560
characteristics like typography colors

00:05:29,710 --> 00:05:39,290
spacing all those all those design

00:05:35,560 --> 00:05:43,430
guidelines that designers basically used

00:05:39,290 --> 00:05:46,390
to design different products and it is

00:05:43,430 --> 00:05:50,000
represented as design tokens in the code

00:05:46,390 --> 00:05:52,580
it is also maintained as design tokens

00:05:50,000 --> 00:05:55,160
in the code because in a design system

00:05:52,580 --> 00:05:59,290
you always want to keep the design and

00:05:55,160 --> 00:06:04,610
the code in sync the design kit is where

00:05:59,290 --> 00:06:09,610
the the symbols or components for

00:06:04,610 --> 00:06:12,500
designers to use live and they can build

00:06:09,610 --> 00:06:17,300
experiences or prototype experiences

00:06:12,500 --> 00:06:19,880
using these available symbols in the

00:06:17,300 --> 00:06:23,660
design kit and it is design kit always

00:06:19,880 --> 00:06:26,180
needs to be kept in sync with component

00:06:23,660 --> 00:06:28,310
library and there's some sort of a

00:06:26,180 --> 00:06:31,130
mapping in-between even though not maybe

00:06:28,310 --> 00:06:32,780
want to one but it's kind of like you

00:06:31,130 --> 00:06:34,310
have your button component in the

00:06:32,780 --> 00:06:37,250
component library you have your button

00:06:34,310 --> 00:06:40,670
symbol and the design tool that you you

00:06:37,250 --> 00:06:42,530
use component libraries where you have

00:06:40,670 --> 00:06:47,150
JavaScript your JavaScript components

00:06:42,530 --> 00:06:49,040
they're version controlled and they are

00:06:47,150 --> 00:06:51,950
basically the building blocks of your

00:06:49,040 --> 00:06:54,200
your applications different product team

00:06:51,950 --> 00:06:56,510
can use these components to build bigger

00:06:54,200 --> 00:06:59,690
bigger applications and products and

00:06:56,510 --> 00:07:02,860
they will present boxes where you where

00:06:59,690 --> 00:07:06,920
the components live and where you

00:07:02,860 --> 00:07:09,410
visualize test your components without

00:07:06,920 --> 00:07:13,910
having to run an entire application so

00:07:09,410 --> 00:07:16,970
you basically have your components in in

00:07:13,910 --> 00:07:20,480
isolation and last but mostly not least

00:07:16,970 --> 00:07:24,880
documentation site is where the end user

00:07:20,480 --> 00:07:27,950
of the design system goes so all the

00:07:24,880 --> 00:07:31,090
your components like component code all

00:07:27,950 --> 00:07:33,710
the there and design considerations you

00:07:31,090 --> 00:07:35,930
you come up with when you'll think the

00:07:33,710 --> 00:07:38,060
design system lives there also all the

00:07:35,930 --> 00:07:39,940
design language like the guidelines and

00:07:38,060 --> 00:07:45,230
rules they all live in the documentation

00:07:39,940 --> 00:07:48,080
site yeah so this was like a quick

00:07:45,230 --> 00:07:52,210
overview to design systems and the

00:07:48,080 --> 00:07:54,860
second part of my talk is about how to

00:07:52,210 --> 00:07:57,790
deal with component variation rendering

00:07:54,860 --> 00:07:59,750
when as a design system developer

00:07:57,790 --> 00:08:04,060
developing all these different

00:07:59,750 --> 00:08:09,680
components and how actually this

00:08:04,060 --> 00:08:11,720
mathematician helped automating that so

00:08:09,680 --> 00:08:13,220
yeah when you're building you're a

00:08:11,720 --> 00:08:14,960
developer in a design system project

00:08:13,220 --> 00:08:16,430
this can be also a component Larbi

00:08:14,960 --> 00:08:18,950
actually doesn't have to be necessarily

00:08:16,430 --> 00:08:22,510
design system so you have like different

00:08:18,950 --> 00:08:24,950
components you have like buttons input

00:08:22,510 --> 00:08:27,080
checkboxes like labels like all these

00:08:24,950 --> 00:08:28,910
components that you need to build and

00:08:27,080 --> 00:08:31,820
then you have different variations for

00:08:28,910 --> 00:08:34,790
these components so here I picked a

00:08:31,820 --> 00:08:37,970
button component from the design system

00:08:34,790 --> 00:08:42,170
that I worked in and as you can see we

00:08:37,970 --> 00:08:43,430
have like 12 different instance of this

00:08:42,170 --> 00:08:45,590
button

00:08:43,430 --> 00:08:48,500
combined with like variations of

00:08:45,590 --> 00:08:50,420
different properties so we have like at

00:08:48,500 --> 00:08:53,870
the theme to this button there are like

00:08:50,420 --> 00:08:56,660
three themes and then it can take in an

00:08:53,870 --> 00:09:00,770
icon optionally and then it can be like

00:08:56,660 --> 00:09:03,650
a slightly small button and this is just

00:09:00,770 --> 00:09:06,710
like kind of three properties and then

00:09:03,650 --> 00:09:10,950
they take in different values

00:09:06,710 --> 00:09:13,520
so if I were to like right I want I if I

00:09:10,950 --> 00:09:16,440
were to like render these components

00:09:13,520 --> 00:09:19,710
normally what I would do let's say I'm

00:09:16,440 --> 00:09:21,720
using react as my front-end framework I

00:09:19,710 --> 00:09:25,850
would basically just write this

00:09:21,720 --> 00:09:30,270
component an instance of the components

00:09:25,850 --> 00:09:32,880
defining the its props and the these

00:09:30,270 --> 00:09:34,890
props take in different valleys and I

00:09:32,880 --> 00:09:38,160
would come up with like combinations of

00:09:34,890 --> 00:09:40,920
it so that I can have I can see all

00:09:38,160 --> 00:09:42,900
these like variations rendered so we

00:09:40,920 --> 00:09:45,360
have the the variant prop corresponds to

00:09:42,900 --> 00:09:48,330
this team of the button so we have

00:09:45,360 --> 00:09:51,630
primary secondary and transactional and

00:09:48,330 --> 00:09:56,760
then as I mentioned earlier it can take

00:09:51,630 --> 00:09:58,680
in and I can optionally or it can not

00:09:56,760 --> 00:10:00,960
take an icon and it can be a small

00:09:58,680 --> 00:10:05,190
button or it can be a small button with

00:10:00,960 --> 00:10:08,640
an icon and this is valid for all the

00:10:05,190 --> 00:10:11,550
three different teams of the the button

00:10:08,640 --> 00:10:14,130
so as you can see I have just like three

00:10:11,550 --> 00:10:17,100
props and then one of them takes like

00:10:14,130 --> 00:10:19,770
three values the two other takes and two

00:10:17,100 --> 00:10:22,320
values and I already have a lot of code

00:10:19,770 --> 00:10:24,150
I need to like write the instance of the

00:10:22,320 --> 00:10:26,880
component once for all of these

00:10:24,150 --> 00:10:29,220
combinations and I kind of need to think

00:10:26,880 --> 00:10:31,650
about oh okay like did I include all the

00:10:29,220 --> 00:10:36,690
use cases all the like combinations that

00:10:31,650 --> 00:10:38,910
can happen and like as developers we

00:10:36,690 --> 00:10:41,130
usually like don't like to write lots of

00:10:38,910 --> 00:10:42,870
code like this we want to wherever we

00:10:41,130 --> 00:10:48,690
can like we want to actually automate

00:10:42,870 --> 00:10:50,760
things and just make things easier so

00:10:48,690 --> 00:10:55,290
here actually ona decoct

00:10:50,760 --> 00:10:57,270
helps us with his the concept that he

00:10:55,290 --> 00:11:01,620
developed back in the 16th century

00:10:57,270 --> 00:11:06,420
called Cartesian product so in a

00:11:01,620 --> 00:11:09,840
nutshell given two sets with elements

00:11:06,420 --> 00:11:13,500
Cartesian components will include every

00:11:09,840 --> 00:11:16,440
possible combination of the elements in

00:11:13,500 --> 00:11:18,780
these two sets so here we have set a we

00:11:16,440 --> 00:11:19,570
have cat and a dog and then in the set B

00:11:18,780 --> 00:11:21,610
we have chicken

00:11:19,570 --> 00:11:24,520
milk and when we make the Cartesian

00:11:21,610 --> 00:11:26,200
product or cross product then we have

00:11:24,520 --> 00:11:30,040
all the possible combinations between

00:11:26,200 --> 00:11:32,680
these elements which are a dog in the

00:11:30,040 --> 00:11:35,680
kitchen a cat in the milk a dog in a

00:11:32,680 --> 00:11:41,260
milk and a cat in a chicken so we can

00:11:35,680 --> 00:11:44,380
actually leverage this for our component

00:11:41,260 --> 00:11:46,450
and its property prop values so let's

00:11:44,380 --> 00:11:48,570
say for the button components I have the

00:11:46,450 --> 00:11:50,830
variant prop and I have the icon prop

00:11:48,570 --> 00:11:53,500
variant prop can take in three values

00:11:50,830 --> 00:11:55,690
and icon can't take in two values and

00:11:53,500 --> 00:12:00,820
then when I make the partition product

00:11:55,690 --> 00:12:03,340
of these two properties two props I get

00:12:00,820 --> 00:12:08,800
six different combinations of of them

00:12:03,340 --> 00:12:12,310
and using this I can actually create a

00:12:08,800 --> 00:12:16,270
component that can render a given

00:12:12,310 --> 00:12:21,610
component with its with the combination

00:12:16,270 --> 00:12:24,570
of its different prop bellies so four

00:12:21,610 --> 00:12:29,410
button component it looks like this I

00:12:24,570 --> 00:12:33,910
have my Cartesian components and then I

00:12:29,410 --> 00:12:37,960
pass in the button I pass in children if

00:12:33,910 --> 00:12:43,270
there is any and then I pass in the prop

00:12:37,960 --> 00:12:45,130
values in an array and also I have a

00:12:43,270 --> 00:12:47,820
container prop here that Cartesian

00:12:45,130 --> 00:12:53,110
component takes in and it's this one is

00:12:47,820 --> 00:12:57,250
used to display a list of the the values

00:12:53,110 --> 00:13:01,960
that correspond to the prop for every

00:12:57,250 --> 00:13:04,690
instance which you're gonna see here so

00:13:01,960 --> 00:13:08,080
this is basically I'm doing the same

00:13:04,690 --> 00:13:12,700
thing as I compared to what I showed

00:13:08,080 --> 00:13:14,800
earlier and I have just that list it is

00:13:12,700 --> 00:13:17,410
just for convenience it's there so I can

00:13:14,800 --> 00:13:20,290
see like every instance which prop

00:13:17,410 --> 00:13:25,890
Valley takes in but as you can see this

00:13:20,290 --> 00:13:28,030
is like way cleaner than writing the

00:13:25,890 --> 00:13:30,940
every instance of the components

00:13:28,030 --> 00:13:33,550
manually and also let's say like I want

00:13:30,940 --> 00:13:35,830
to change a name of a prop or a value

00:13:33,550 --> 00:13:38,350
can just go and change it over here once

00:13:35,830 --> 00:13:40,750
and then it's gonna get reflected versus

00:13:38,350 --> 00:13:42,850
in the other case I had to do that for

00:13:40,750 --> 00:13:50,860
every instance which is really

00:13:42,850 --> 00:13:53,920
error-prone also what if I want to add a

00:13:50,860 --> 00:13:56,350
new prop so I want to actually display

00:13:53,920 --> 00:13:59,610
this component given that there's an

00:13:56,350 --> 00:14:02,680
another prop and it's got some other

00:13:59,610 --> 00:14:05,920
values so I just add that to the

00:14:02,680 --> 00:14:07,990
Cartesian components and I define the

00:14:05,920 --> 00:14:10,750
values that this prop needs to take in

00:14:07,990 --> 00:14:13,930
in an array and then Cartesian

00:14:10,750 --> 00:14:17,680
components is gonna render the

00:14:13,930 --> 00:14:19,180
components in combination this prop of

00:14:17,680 --> 00:14:21,399
this component in combination with other

00:14:19,180 --> 00:14:25,360
props and I can see how it looks and

00:14:21,399 --> 00:14:28,089
this is really like when you're building

00:14:25,360 --> 00:14:30,190
a component library this is really

00:14:28,089 --> 00:14:33,070
important because yeah you want to make

00:14:30,190 --> 00:14:34,870
sure that all these combinations your

00:14:33,070 --> 00:14:40,360
component looks right in all these

00:14:34,870 --> 00:14:43,120
combinations and this is the component

00:14:40,360 --> 00:14:46,980
API so I've just what I showed was how

00:14:43,120 --> 00:14:51,520
to use the Cartesian component and here

00:14:46,980 --> 00:14:55,120
we can see the the component API so we

00:14:51,520 --> 00:14:58,110
have a container a component and we

00:14:55,120 --> 00:15:01,089
restructure the rest of the props and

00:14:58,110 --> 00:15:03,700
then here this is how we get the

00:15:01,089 --> 00:15:06,510
combinations of the the prop

00:15:03,700 --> 00:15:09,940
combinations using Cartesian product

00:15:06,510 --> 00:15:13,450
function that takes in the props and I'm

00:15:09,940 --> 00:15:15,010
not gonna go detail into this part but

00:15:13,450 --> 00:15:19,329
if you're curious all i've included a

00:15:15,010 --> 00:15:22,600
link at the end yeah so there's kind of

00:15:19,329 --> 00:15:24,760
a piece of logic here to make these

00:15:22,600 --> 00:15:28,209
combinations available to the Cartesian

00:15:24,760 --> 00:15:32,589
component so it can render the component

00:15:28,209 --> 00:15:35,890
with these combinations so here we map

00:15:32,589 --> 00:15:37,750
over these combinations and then we

00:15:35,890 --> 00:15:40,779
render if there's a container we render

00:15:37,750 --> 00:15:44,560
that if there's children we render that

00:15:40,779 --> 00:15:47,110
and then we render an instance of the

00:15:44,560 --> 00:15:52,450
component for every possible combination

00:15:47,110 --> 00:15:54,839
of these prop values other than

00:15:52,450 --> 00:15:57,279
component variation rendering where

00:15:54,839 --> 00:15:59,740
Cartesian component was useful for us in

00:15:57,279 --> 00:16:04,300
testing as part of building this design

00:15:59,740 --> 00:16:09,160
system so we've used use it in a in a

00:16:04,300 --> 00:16:12,130
similar manner in terms of getting our

00:16:09,160 --> 00:16:15,310
snapshot tests done and it helped us

00:16:12,130 --> 00:16:17,829
just the burden of like writing these

00:16:15,310 --> 00:16:20,230
tests like one by one we could just

00:16:17,829 --> 00:16:25,120
leverage Cartesian component to get our

00:16:20,230 --> 00:16:28,329
snapshot test for our components and we

00:16:25,120 --> 00:16:31,690
also use it for accessibility testing so

00:16:28,329 --> 00:16:34,899
X ability was an important part of our

00:16:31,690 --> 00:16:37,740
design system our components and again

00:16:34,899 --> 00:16:41,320
Cartesian component was useful for us

00:16:37,740 --> 00:16:47,579
when we were writing our accessibility

00:16:41,320 --> 00:16:50,320
tests for our components yeah so as a

00:16:47,579 --> 00:16:54,279
user of the Cartesian component in this

00:16:50,320 --> 00:16:56,500
project I really liked it because even

00:16:54,279 --> 00:16:58,600
though like writing every component for

00:16:56,500 --> 00:17:01,510
example meant that we had to write a

00:16:58,600 --> 00:17:05,380
Cartesian component for it but it just

00:17:01,510 --> 00:17:09,490
made our life as developers way easier

00:17:05,380 --> 00:17:11,319
it improved our workflow gave us the

00:17:09,490 --> 00:17:14,410
chance together in an instant feedback

00:17:11,319 --> 00:17:17,020
when building these components to see if

00:17:14,410 --> 00:17:19,569
anything was broken or not if everything

00:17:17,020 --> 00:17:21,189
looked good and it's also pretty

00:17:19,569 --> 00:17:24,280
lightweight so it's just a react

00:17:21,189 --> 00:17:26,110
component or a component that you can

00:17:24,280 --> 00:17:29,169
write in other frameworks as well so it

00:17:26,110 --> 00:17:31,090
doesn't require any extra setup and

00:17:29,169 --> 00:17:35,230
installing any NPM packages or anything

00:17:31,090 --> 00:17:38,260
like that and yeah it it just helped

00:17:35,230 --> 00:17:39,490
seeing all these when you have all these

00:17:38,260 --> 00:17:42,100
like components with different

00:17:39,490 --> 00:17:45,220
variations to see when you're developing

00:17:42,100 --> 00:17:46,630
that if you get the styling right if you

00:17:45,220 --> 00:17:50,049
get the responsibility right and

00:17:46,630 --> 00:17:52,840
everything so I find it really cool and

00:17:50,049 --> 00:17:54,910
I'm hoping that this kind of like that

00:17:52,840 --> 00:17:56,679
because it combines this Cartesian

00:17:54,910 --> 00:17:58,400
product concept with component ization

00:17:56,679 --> 00:18:00,679
concept

00:17:58,400 --> 00:18:02,600
and if you're chuckling with a similar

00:18:00,679 --> 00:18:05,150
problem maybe in a design system or a

00:18:02,600 --> 00:18:07,400
component library or maybe another

00:18:05,150 --> 00:18:09,909
problem that might make use of this kind

00:18:07,400 --> 00:18:13,059
of an approach I'm hoping that maybe

00:18:09,909 --> 00:18:17,630
this is something you're gonna remember

00:18:13,059 --> 00:18:21,230
when you walk out of here so I've

00:18:17,630 --> 00:18:24,860
included some links here so the first

00:18:21,230 --> 00:18:26,929
one is a blog post about what a design

00:18:24,860 --> 00:18:29,090
system is by a couple of my colleagues

00:18:26,929 --> 00:18:31,789
at wrangle that I worked with together

00:18:29,090 --> 00:18:34,100
in this project and then the second one

00:18:31,789 --> 00:18:37,490
is the Cartesian component API is

00:18:34,100 --> 00:18:39,230
available there the third one is again

00:18:37,490 --> 00:18:42,320
one of my colleagues at wrangle when I

00:18:39,230 --> 00:18:44,179
shared this with him he really liked the

00:18:42,320 --> 00:18:48,250
idea so he just came up with the viewers

00:18:44,179 --> 00:18:50,690
of it and if you you want to see it

00:18:48,250 --> 00:18:52,399
seeded this Cartesian component a

00:18:50,690 --> 00:18:55,429
different framework you can check that

00:18:52,399 --> 00:18:58,039
out and also the last one is the

00:18:55,429 --> 00:19:01,789
implementation of getting the Cartesian

00:18:58,039 --> 00:19:05,720
product of component props and that's

00:19:01,789 --> 00:19:07,549
all i've got for you here is the link to

00:19:05,720 --> 00:19:09,970
the slide deck and you can again find me

00:19:07,549 --> 00:19:13,170
on twitter at charlie angle mel and

00:19:09,970 --> 00:19:14,690
thanks for coming and listening

00:19:13,170 --> 00:19:19,529
[Applause]

00:19:14,690 --> 00:19:19,529

YouTube URL: https://www.youtube.com/watch?v=EmfJWJiEqDE


