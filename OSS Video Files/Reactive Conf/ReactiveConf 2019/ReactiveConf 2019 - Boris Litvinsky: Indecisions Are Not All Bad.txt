Title: ReactiveConf 2019 - Boris Litvinsky: Indecisions Are Not All Bad
Publication date: 2019-10-30
Playlist: ReactiveConf 2019
Description: 
	Oct 30 - Nov 1, 2019
Prague, Czech Republic
https://reactiveconf.com/
Millennium stage
-------------------------------------------------------------------
All our software is a bundle of decisions. But despite the fact that some decisions can have a long-lasting, crippling effect on our app, we make most of them based on guesses.
But what if the best decision is indecision? What if you could postpone most of your decision until you gather enough facts in order to make the optimal one?
In this talk, we will learn why deferring decisions can result in a much better, simpler code base. Weâ€™ll see examples of decisions we think we have to take on day 1 of the project, yet, can (and should) be postponed and see how practices like Spikes and the right design of your application will allow that to happen.
Captions: 
	00:00:04,530 --> 00:00:08,379
[Music]

00:00:16,140 --> 00:00:23,050
hi everybody my name is Boris and I'm

00:00:19,720 --> 00:00:26,500
tech lead at Wix and today I start by

00:00:23,050 --> 00:00:28,900
telling you a story so a few years back

00:00:26,500 --> 00:00:31,419
my team started working on a first

00:00:28,900 --> 00:00:35,290
project that used the react after a few

00:00:31,419 --> 00:00:38,350
years of doing angular and just like

00:00:35,290 --> 00:00:41,579
many of react developers even to this

00:00:38,350 --> 00:00:45,969
day we were faced with this crucial

00:00:41,579 --> 00:00:47,980
destiny changing altering dilemma of

00:00:45,969 --> 00:00:51,399
which state management libraries should

00:00:47,980 --> 00:00:58,120
we'll be using and of course the obvious

00:00:51,399 --> 00:01:01,059
options were Redux and Mobius and so we

00:00:58,120 --> 00:01:03,219
began our journey for the answer by

00:01:01,059 --> 00:01:06,580
gathering the whole team and having a

00:01:03,219 --> 00:01:08,530
discussion but we quickly discovered

00:01:06,580 --> 00:01:11,080
that basically none of us had any

00:01:08,530 --> 00:01:12,820
experience with react let alone one of

00:01:11,080 --> 00:01:15,130
those libraries and so what we decided

00:01:12,820 --> 00:01:17,829
to do is basically spread out do our

00:01:15,130 --> 00:01:22,450
individual researches and then reconvene

00:01:17,829 --> 00:01:24,400
in order to make the actual decision but

00:01:22,450 --> 00:01:27,189
then we remember that we actually worked

00:01:24,400 --> 00:01:31,210
at Wiggs full of super talented genius

00:01:27,189 --> 00:01:33,250
people and many of whom actually had the

00:01:31,210 --> 00:01:35,590
experience we were lacking right they

00:01:33,250 --> 00:01:38,680
did work with react and so we decided to

00:01:35,590 --> 00:01:43,030
do is like gather a council that will

00:01:38,680 --> 00:01:44,770
actually help us make the decision the

00:01:43,030 --> 00:01:47,409
problem was that we actually ended up

00:01:44,770 --> 00:01:50,049
with so many many opinions and so many

00:01:47,409 --> 00:01:52,960
so much data that we really had a hard

00:01:50,049 --> 00:01:54,880
time wrapping our heads around that and

00:01:52,960 --> 00:01:57,070
so what we ended up doing is actually

00:01:54,880 --> 00:02:00,280
creating a decision matrix that will

00:01:57,070 --> 00:02:04,030
help us make the decision the problem

00:02:00,280 --> 00:02:07,450
was that this whole debacle took us took

00:02:04,030 --> 00:02:09,490
two and a half weeks right and all the

00:02:07,450 --> 00:02:15,010
while we haven't written a single line

00:02:09,490 --> 00:02:17,560
of code and why well because in our mind

00:02:15,010 --> 00:02:19,900
this decision was so critical that it

00:02:17,560 --> 00:02:23,640
had to be made right there and then like

00:02:19,900 --> 00:02:25,690
we we've seen no way for us to build a

00:02:23,640 --> 00:02:27,040
reactor plication without

00:02:25,690 --> 00:02:29,010
state management library right because

00:02:27,040 --> 00:02:33,340
this is what everybody was talking about

00:02:29,010 --> 00:02:36,160
and the way we saw it is that if we were

00:02:33,340 --> 00:02:37,780
of gotten that wrong we would be stuck

00:02:36,160 --> 00:02:42,850
and be paying for this mistake forever

00:02:37,780 --> 00:02:45,370
and ever and we were wrong because to

00:02:42,850 --> 00:02:48,310
this day after more than a dozen of

00:02:45,370 --> 00:02:50,920
react based applications of various

00:02:48,310 --> 00:02:53,260
complexities that application is the

00:02:50,920 --> 00:02:58,900
only one that uses any state management

00:02:53,260 --> 00:03:01,720
library because you know humans when

00:02:58,900 --> 00:03:04,090
faced with a decision to be made usually

00:03:01,720 --> 00:03:06,430
we see only two outcomes right two

00:03:04,090 --> 00:03:10,960
categories of outcome we are either

00:03:06,430 --> 00:03:12,490
getting it right or getting it wrong but

00:03:10,960 --> 00:03:14,560
the problem is that the stress of

00:03:12,490 --> 00:03:16,330
getting it wrong actually blinds us from

00:03:14,560 --> 00:03:18,250
the fact that we usually are missing

00:03:16,330 --> 00:03:20,650
crucial pieces of information to make

00:03:18,250 --> 00:03:24,250
that decision okay

00:03:20,650 --> 00:03:26,710
just guesses and so today I'm here to

00:03:24,250 --> 00:03:28,810
tell you that in cases where you don't

00:03:26,710 --> 00:03:30,430
know where the decision you're making is

00:03:28,810 --> 00:03:33,040
right or wrong there is a third option

00:03:30,430 --> 00:03:34,810
and the third option is to postpone the

00:03:33,040 --> 00:03:37,930
decision as long as you can in order to

00:03:34,810 --> 00:03:39,910
gain more information otherwise that

00:03:37,930 --> 00:03:43,390
decision can have crippling implications

00:03:39,910 --> 00:03:45,630
on your project so let's start by

00:03:43,390 --> 00:03:50,440
talking about why we should be

00:03:45,630 --> 00:03:52,239
postponing our decisions so usually when

00:03:50,440 --> 00:03:53,980
you start working on a project or an

00:03:52,239 --> 00:03:55,750
application right you usually have some

00:03:53,980 --> 00:03:59,470
sort of architectural review a design

00:03:55,750 --> 00:04:02,980
review with your teammates and question

00:03:59,470 --> 00:04:04,750
is why right and I think that the reason

00:04:02,980 --> 00:04:06,850
is rooted in this definition by Martin

00:04:04,750 --> 00:04:08,830
Fowler of what architecture really is

00:04:06,850 --> 00:04:10,900
and he basically defines that

00:04:08,830 --> 00:04:14,580
architecture are decisions that we

00:04:10,900 --> 00:04:17,669
wished we would gotten right early on

00:04:14,580 --> 00:04:20,859
and why is that important why because

00:04:17,669 --> 00:04:23,650
decisions made early on are harder to

00:04:20,859 --> 00:04:25,810
revert and they serve as the foundation

00:04:23,650 --> 00:04:28,570
for the rest of the application we're

00:04:25,810 --> 00:04:30,970
going to build so the conclusion here is

00:04:28,570 --> 00:04:34,510
actually that the more decisions we make

00:04:30,970 --> 00:04:38,440
early on the the bigger the impact they

00:04:34,510 --> 00:04:39,970
will have on our code and yet you know

00:04:38,440 --> 00:04:42,610
whenever we start any kind of

00:04:39,970 --> 00:04:44,560
application we usually start by

00:04:42,610 --> 00:04:46,660
stressing ourselves with tons of

00:04:44,560 --> 00:04:49,480
decisions to be made which framework to

00:04:46,660 --> 00:04:50,410
use should we use CSS in GS or SAS which

00:04:49,480 --> 00:04:53,170
database

00:04:50,410 --> 00:04:55,420
how many node modules will we have and

00:04:53,170 --> 00:04:58,770
so on and so forth but the question is

00:04:55,420 --> 00:05:01,120
are all those questions

00:04:58,770 --> 00:05:04,650
architectural right should all of them

00:05:01,120 --> 00:05:07,180
be made at the beginning of the project

00:05:04,650 --> 00:05:10,180
because the truth is like the decisions

00:05:07,180 --> 00:05:12,370
we make at the beginning are usually not

00:05:10,180 --> 00:05:15,370
based on facts right there most of them

00:05:12,370 --> 00:05:17,110
are guesses so what are they based on

00:05:15,370 --> 00:05:18,670
well they can be based on various things

00:05:17,110 --> 00:05:22,000
right if for example can be based on

00:05:18,670 --> 00:05:24,130
hype so I've seen some talk I've read

00:05:22,000 --> 00:05:26,650
some blogs some tweets about this cool

00:05:24,130 --> 00:05:31,710
new thing and now I'm super eager to use

00:05:26,650 --> 00:05:34,960
it they can be based on biases perhaps

00:05:31,710 --> 00:05:36,820
in past I've tried some approach or some

00:05:34,960 --> 00:05:39,340
tech and it ended up being a disaster

00:05:36,820 --> 00:05:40,750
and now I'm completely against using it

00:05:39,340 --> 00:05:43,750
ever again

00:05:40,750 --> 00:05:47,470
it can also be based on you know an own

00:05:43,750 --> 00:05:48,970
ego how many of you have been part of

00:05:47,470 --> 00:05:50,650
discussions where somebody actually

00:05:48,970 --> 00:05:53,950
treated it as a competition and all they

00:05:50,650 --> 00:05:58,330
wanted to do is win it doesn't matter if

00:05:53,950 --> 00:06:00,790
they were right or wrong no the other

00:05:58,330 --> 00:06:03,370
reason is that I think one if there is

00:06:00,790 --> 00:06:07,330
one thing front-end developers love to

00:06:03,370 --> 00:06:11,650
do is NPM installing stuff right this is

00:06:07,330 --> 00:06:13,180
basically worms our heart a because it

00:06:11,650 --> 00:06:15,280
gives us the bragging rights right we

00:06:13,180 --> 00:06:18,970
like telling our friends that we got to

00:06:15,280 --> 00:06:21,790
use this new thing but most importantly

00:06:18,970 --> 00:06:23,710
I think we love the feeling of instantly

00:06:21,790 --> 00:06:25,990
solving a problem right you're faced

00:06:23,710 --> 00:06:27,850
with some issue in your code you npm

00:06:25,990 --> 00:06:32,169
install some package boom the problem is

00:06:27,850 --> 00:06:34,690
solved and you're a hero for a day but

00:06:32,169 --> 00:06:36,580
what about the performance penalty what

00:06:34,690 --> 00:06:39,280
about the onboarding that is now way

00:06:36,580 --> 00:06:41,200
more complex and most importantly how

00:06:39,280 --> 00:06:43,570
can you be sure that this thing you just

00:06:41,200 --> 00:06:45,850
installed at the beginning of the

00:06:43,570 --> 00:06:49,150
project is actually the right tool for

00:06:45,850 --> 00:06:51,370
the job and one of the reasons that it

00:06:49,150 --> 00:06:52,630
can be a wrong tool for the job is this

00:06:51,370 --> 00:06:54,700
thing

00:06:52,630 --> 00:06:56,380
this is called the hype cycle right you

00:06:54,700 --> 00:06:58,780
can look it up in Wikipedia and

00:06:56,380 --> 00:07:01,780
basically this graph describes various

00:06:58,780 --> 00:07:04,420
stages of hype that each technology goes

00:07:01,780 --> 00:07:06,520
through right so first the technology is

00:07:04,420 --> 00:07:09,340
being erected right it comes into

00:07:06,520 --> 00:07:11,830
existence and then it's being discovered

00:07:09,340 --> 00:07:14,950
by early adopters right some influencers

00:07:11,830 --> 00:07:18,490
who basically start blogging and giving

00:07:14,950 --> 00:07:19,930
talks and doing demos and all that kind

00:07:18,490 --> 00:07:21,730
of stuff and basically getting more and

00:07:19,930 --> 00:07:25,030
more people on the bank on the highway

00:07:21,730 --> 00:07:29,620
again sailing like it's the best thing

00:07:25,030 --> 00:07:32,170
ever but then as time goes by

00:07:29,620 --> 00:07:37,240
maybe critical issues are discovered

00:07:32,170 --> 00:07:39,700
right maybe I don't know maybe doesn't

00:07:37,240 --> 00:07:41,620
deliver on its promise and then people

00:07:39,700 --> 00:07:44,110
basically abandon the technology and

00:07:41,620 --> 00:07:46,060
while it dwells in this speed of this

00:07:44,110 --> 00:07:48,670
illusion maybe it's being improved maybe

00:07:46,060 --> 00:07:50,620
it's being discovered by new audiences

00:07:48,670 --> 00:07:53,110
who actually find more suitable use

00:07:50,620 --> 00:07:56,430
cases for it and only then after all

00:07:53,110 --> 00:07:59,770
that time does it actually become useful

00:07:56,430 --> 00:08:01,510
so the conclusion is the more we

00:07:59,770 --> 00:08:03,280
postpone and adoption of a technology

00:08:01,510 --> 00:08:05,260
the higher the chance that we're

00:08:03,280 --> 00:08:10,260
actually picking a right solution for

00:08:05,260 --> 00:08:12,310
our problem you know unfortunately

00:08:10,260 --> 00:08:15,400
requirements change right this is the

00:08:12,310 --> 00:08:20,280
unfortunate reality of our existence as

00:08:15,400 --> 00:08:23,200
developers the problem here is that our

00:08:20,280 --> 00:08:26,110
the code we write or architectural

00:08:23,200 --> 00:08:29,710
design is should actually be optimized

00:08:26,110 --> 00:08:33,100
for those requirements so the more we

00:08:29,710 --> 00:08:34,930
delay decisions the more basically we

00:08:33,100 --> 00:08:37,420
will give time for those requirements to

00:08:34,930 --> 00:08:39,520
stabilize and the higher the chance that

00:08:37,420 --> 00:08:43,750
actually our code will be better suited

00:08:39,520 --> 00:08:47,710
to support them so giving our an ability

00:08:43,750 --> 00:08:49,210
to predict the future and given the fact

00:08:47,710 --> 00:08:51,040
that we really don't know whether the

00:08:49,210 --> 00:08:54,640
decision we're making is right or wrong

00:08:51,040 --> 00:08:57,490
in our code our best option in those

00:08:54,640 --> 00:08:59,200
cases is basically no decision right

00:08:57,490 --> 00:09:01,660
this is the best decision we can make

00:08:59,200 --> 00:09:03,430
because then we will basically allow

00:09:01,660 --> 00:09:05,170
ourselves to gain more information

00:09:03,430 --> 00:09:07,029
before we actually make it

00:09:05,170 --> 00:09:10,119
and as long as you don't make those

00:09:07,029 --> 00:09:14,019
decisions after an optimal date this

00:09:10,119 --> 00:09:17,589
will be your safest option so next let's

00:09:14,019 --> 00:09:20,739
talk about some things you can defer so

00:09:17,589 --> 00:09:22,540
let's start at a very beginning right at

00:09:20,739 --> 00:09:25,419
the beginning of your feature somebody

00:09:22,540 --> 00:09:27,879
approaches you and they in the sq how

00:09:25,419 --> 00:09:29,470
long was this will this thing take right

00:09:27,879 --> 00:09:32,619
and what do you usually do

00:09:29,470 --> 00:09:34,779
Sammis I you just give out a random

00:09:32,619 --> 00:09:38,769
number right you just I feel like three

00:09:34,779 --> 00:09:40,419
maybe four I don't know that's cool

00:09:38,769 --> 00:09:43,059
right you get people off your back but

00:09:40,419 --> 00:09:46,329
the problem is that those estimations

00:09:43,059 --> 00:09:49,720
are fake right and fake this thing fake

00:09:46,329 --> 00:09:53,319
estimations lead to fake deadlines and

00:09:49,720 --> 00:09:56,589
fake deadlines lead to late delivery

00:09:53,319 --> 00:09:57,939
which then leads to suffering so we

00:09:56,589 --> 00:10:00,549
should try to base

00:09:57,939 --> 00:10:03,489
those estimations on some facts right

00:10:00,549 --> 00:10:06,540
and not guesses and we will talk about

00:10:03,489 --> 00:10:09,699
some things we could do to improve that

00:10:06,540 --> 00:10:11,499
I love this quote by Dan abre Abramov

00:10:09,699 --> 00:10:13,779
he's talking about state management

00:10:11,499 --> 00:10:15,669
libraries no you know you don't go

00:10:13,779 --> 00:10:17,619
buying glasses before you had trouble

00:10:15,669 --> 00:10:19,389
reading or I don't know before you

00:10:17,619 --> 00:10:23,470
started waving at random people on the

00:10:19,389 --> 00:10:25,749
street same goes for any kind of library

00:10:23,470 --> 00:10:28,360
right before you npm install something

00:10:25,749 --> 00:10:31,660
you should first encounter in need that

00:10:28,360 --> 00:10:33,730
library potentially solves right and

00:10:31,660 --> 00:10:35,799
even afterwards you should see if there

00:10:33,730 --> 00:10:38,529
is a simple solution with young within

00:10:35,799 --> 00:10:40,869
your code and then you should also ask

00:10:38,529 --> 00:10:43,389
whether or not it's an actual issue or

00:10:40,869 --> 00:10:45,999
design problem right because in our case

00:10:43,389 --> 00:10:48,220
whenever we thought that we for reaching

00:10:45,999 --> 00:10:50,860
for a state management library it was

00:10:48,220 --> 00:10:53,079
actually a design issue and using simple

00:10:50,860 --> 00:10:55,600
techniques like lifting States or using

00:10:53,079 --> 00:10:58,779
tools provided by react like context

00:10:55,600 --> 00:11:00,879
usually solve the problem for us and I

00:10:58,779 --> 00:11:09,069
think today it's even more so because of

00:11:00,879 --> 00:11:12,220
hooks no I think many of us for for

00:11:09,069 --> 00:11:14,049
better for worse our library developers

00:11:12,220 --> 00:11:16,720
at heart right are open source

00:11:14,049 --> 00:11:18,730
developers in art and that's awesome but

00:11:16,720 --> 00:11:21,130
I think on our date today

00:11:18,730 --> 00:11:25,810
lives this basically manifests in our

00:11:21,130 --> 00:11:29,589
love for creating super generic Swiss

00:11:25,810 --> 00:11:31,930
knives one-size-fit-all abstractions

00:11:29,589 --> 00:11:34,959
right if maybe react component or just

00:11:31,930 --> 00:11:39,070
functions right that should solve world

00:11:34,959 --> 00:11:41,139
hunger and so on and most importantly

00:11:39,070 --> 00:11:45,070
keep our code dry right without

00:11:41,139 --> 00:11:47,560
repetitions but if you create those

00:11:45,070 --> 00:11:48,699
abstractions prematurely how can you

00:11:47,560 --> 00:11:52,089
even be sure that you're actually

00:11:48,699 --> 00:11:54,699
covering all the use cases how do you

00:11:52,089 --> 00:11:56,470
know if there are other people on your

00:11:54,699 --> 00:12:00,240
team that are facing the same problem

00:11:56,470 --> 00:12:02,740
are you solving their problem okay and

00:12:00,240 --> 00:12:05,500
are there maybe there are competing

00:12:02,740 --> 00:12:07,630
solutions in your code already that you

00:12:05,500 --> 00:12:10,060
can use all of the questions that you

00:12:07,630 --> 00:12:12,399
should be asking before creating any

00:12:10,060 --> 00:12:15,639
kind of abstraction right you should

00:12:12,399 --> 00:12:17,290
first understand the use cases it needs

00:12:15,639 --> 00:12:19,089
to handle right you should understand

00:12:17,290 --> 00:12:22,899
how the code is being used before

00:12:19,089 --> 00:12:24,459
wrapping it in a nice abstraction one of

00:12:22,899 --> 00:12:26,290
the rules that I like to follow is

00:12:24,459 --> 00:12:27,670
something called the rule of three which

00:12:26,290 --> 00:12:30,399
basically states that you should wait

00:12:27,670 --> 00:12:32,139
for a third copy of the code in order to

00:12:30,399 --> 00:12:37,420
have a better understanding of the use

00:12:32,139 --> 00:12:40,709
cases and the API one of the biggest

00:12:37,420 --> 00:12:43,930
fears that I have is to see my code

00:12:40,709 --> 00:12:46,510
deteriorate into something called a big

00:12:43,930 --> 00:12:48,730
ball of mud right which basically means

00:12:46,510 --> 00:12:51,750
that my whole app is just a big pile of

00:12:48,730 --> 00:12:54,490
crap of tightly coupled code

00:12:51,750 --> 00:12:59,560
unpredictable code and I think that this

00:12:54,490 --> 00:13:02,829
fear actually leads us into reaching for

00:12:59,560 --> 00:13:05,139
like heavy guns and heavy tools namely

00:13:02,829 --> 00:13:07,649
immediately breaking our application

00:13:05,139 --> 00:13:10,990
into ton of know tons of node modules

00:13:07,649 --> 00:13:14,350
breaking it into micro services or or

00:13:10,990 --> 00:13:16,480
micro front-ends and this like this has

00:13:14,350 --> 00:13:17,800
a lot of benefits right because what

00:13:16,480 --> 00:13:20,199
this creates is basically this

00:13:17,800 --> 00:13:23,110
impenetrable wall between various parts

00:13:20,199 --> 00:13:25,240
of our applications or our application

00:13:23,110 --> 00:13:28,520
that actually allows us to control how

00:13:25,240 --> 00:13:31,850
each part interacts with another

00:13:28,520 --> 00:13:35,750
this also comes at the cost right namely

00:13:31,850 --> 00:13:36,470
that now integration testing is a

00:13:35,750 --> 00:13:39,590
nightmare

00:13:36,470 --> 00:13:42,770
the deployment of our application is

00:13:39,590 --> 00:13:46,070
super hard and the ownership of each

00:13:42,770 --> 00:13:48,440
part becomes super vague right but most

00:13:46,070 --> 00:13:50,870
importantly is how can you even know

00:13:48,440 --> 00:13:52,670
that the the boundaries that you have

00:13:50,870 --> 00:13:55,580
created in your code at the beginning

00:13:52,670 --> 00:13:58,000
are actually correct so we should wait

00:13:55,580 --> 00:14:00,410
to gain more understanding about

00:13:58,000 --> 00:14:03,140
organizational and business domain in

00:14:00,410 --> 00:14:05,720
before we create hard abstractions

00:14:03,140 --> 00:14:07,670
because hard boundaries because

00:14:05,720 --> 00:14:10,220
otherwise it will be super hard for us

00:14:07,670 --> 00:14:16,280
to evolve them and change them when

00:14:10,220 --> 00:14:18,170
things actually change so the problem

00:14:16,280 --> 00:14:21,380
with deferring decisions is that it

00:14:18,170 --> 00:14:23,930
introduces uncertainty right and in

00:14:21,380 --> 00:14:26,870
certainty introduces stress and what

00:14:23,930 --> 00:14:29,960
will be super helpful is if we could

00:14:26,870 --> 00:14:31,550
turn the postpone of postponing of

00:14:29,960 --> 00:14:35,480
decisions into a like an actual process

00:14:31,550 --> 00:14:37,010
a process that will help us a understand

00:14:35,480 --> 00:14:40,610
whether or not we should be deferring a

00:14:37,010 --> 00:14:41,990
certain decision then define when will

00:14:40,610 --> 00:14:45,230
that decision be made and hopefully

00:14:41,990 --> 00:14:47,480
allow us to revert it if something went

00:14:45,230 --> 00:14:50,810
wrong and I'd like to show you one of

00:14:47,480 --> 00:14:53,900
the processes you could be using it's

00:14:50,810 --> 00:14:57,590
called real options it's a concept

00:14:53,900 --> 00:14:59,600
ported to software from finances and

00:14:57,590 --> 00:15:02,510
basically it's defined as follows it's

00:14:59,600 --> 00:15:05,780
the right but not the obligation to take

00:15:02,510 --> 00:15:08,930
some action prior to expiration now this

00:15:05,780 --> 00:15:11,020
sounds like a huge mouthful so let's see

00:15:08,930 --> 00:15:13,520
an example from our day to day lives

00:15:11,020 --> 00:15:15,860
I've recently visited Japan which was

00:15:13,520 --> 00:15:18,500
unfortunately hit by a large typhoon and

00:15:15,860 --> 00:15:20,300
what was really useful is that I've

00:15:18,500 --> 00:15:23,510
booked some of the hotels with free

00:15:20,300 --> 00:15:25,640
cancellation option so basically what

00:15:23,510 --> 00:15:27,770
I've done is basically I've paid extra

00:15:25,640 --> 00:15:30,500
in order to create an option for myself

00:15:27,770 --> 00:15:33,560
to decide at a later date where whether

00:15:30,500 --> 00:15:35,540
I'm going or not now if I were to cancel

00:15:33,560 --> 00:15:38,270
it prior to the defined date I'm

00:15:35,540 --> 00:15:40,190
basically losing nothing and if I'm

00:15:38,270 --> 00:15:41,220
basically simply will simply not show up

00:15:40,190 --> 00:15:45,480
I will lose the

00:15:41,220 --> 00:15:48,089
booking fee a more technical example for

00:15:45,480 --> 00:15:51,350
real options is feature toggles of

00:15:48,089 --> 00:15:53,790
feature killers a be testing systems

00:15:51,350 --> 00:15:56,370
basically what they allow me is to

00:15:53,790 --> 00:15:59,639
deploy my code to production and decide

00:15:56,370 --> 00:16:03,209
later whether or not my code will run in

00:15:59,639 --> 00:16:05,730
production who are the population that

00:16:03,209 --> 00:16:08,009
will be exposed to that code and it will

00:16:05,730 --> 00:16:09,839
also allow me to turn that code off in

00:16:08,009 --> 00:16:14,879
case something goes wrong and do it

00:16:09,839 --> 00:16:18,420
remotely now Chris Matt a guy who

00:16:14,879 --> 00:16:20,910
defined invented basic real options goes

00:16:18,420 --> 00:16:23,610
on to define them using three key

00:16:20,910 --> 00:16:26,850
principles the first principle is that

00:16:23,610 --> 00:16:28,860
every option has a value okay and that

00:16:26,850 --> 00:16:32,339
makes sense right the fact that I can

00:16:28,860 --> 00:16:34,310
decide something later on has a value

00:16:32,339 --> 00:16:36,600
for me right and that value is

00:16:34,310 --> 00:16:39,300
determined by the amount of uncertainty

00:16:36,600 --> 00:16:42,959
and of course the cost of creating the

00:16:39,300 --> 00:16:47,670
adoption the second principle is that

00:16:42,959 --> 00:16:49,949
every option expires right so if I will

00:16:47,670 --> 00:16:51,990
basically delay my decision too much a

00:16:49,949 --> 00:16:54,750
certain option will become unavailable

00:16:51,990 --> 00:16:56,790
to me and I cannot utilize it and a

00:16:54,750 --> 00:16:58,740
farrago a principle states that you

00:16:56,790 --> 00:17:02,579
should never commit early unless you

00:16:58,740 --> 00:17:06,780
know why so what real options basically

00:17:02,579 --> 00:17:09,150
give us is reduce stress when the length

00:17:06,780 --> 00:17:11,100
decision because first of all instead of

00:17:09,150 --> 00:17:14,520
just saying I will postpone it

00:17:11,100 --> 00:17:17,010
indefinitely we are forced to define a

00:17:14,520 --> 00:17:19,079
condition when the decision will be made

00:17:17,010 --> 00:17:21,360
now this condition can be anything right

00:17:19,079 --> 00:17:24,689
it can be a date or perhaps a discovery

00:17:21,360 --> 00:17:26,760
of a missing part of information it also

00:17:24,689 --> 00:17:28,319
forces me to think whether or not I

00:17:26,760 --> 00:17:31,429
should be delaying the decision right

00:17:28,319 --> 00:17:33,750
because if the value of an option is low

00:17:31,429 --> 00:17:37,409
perhaps because it's easily reversible

00:17:33,750 --> 00:17:39,210
or the decision is very low impact there

00:17:37,409 --> 00:17:40,770
is no point in me deferring the decision

00:17:39,210 --> 00:17:44,850
right I can just make it right there and

00:17:40,770 --> 00:17:49,110
then and most importantly I think it

00:17:44,850 --> 00:17:50,789
forces us to gain and keep seeking for

00:17:49,110 --> 00:17:53,480
more information before the decision is

00:17:50,789 --> 00:17:53,480
actually made

00:17:53,820 --> 00:17:58,899
so now let's see some things that we can

00:17:57,099 --> 00:18:04,149
do in our code in order to create

00:17:58,899 --> 00:18:05,889
options for ourselves Gleb had an

00:18:04,149 --> 00:18:08,019
awesome talk about testing and I'd like

00:18:05,889 --> 00:18:12,070
to reiterate how testing how important

00:18:08,019 --> 00:18:13,749
testing is so I will talk about TDD and

00:18:12,070 --> 00:18:15,789
test-driven development which is

00:18:13,749 --> 00:18:18,580
basically a software development process

00:18:15,789 --> 00:18:21,489
that states that you should first write

00:18:18,580 --> 00:18:24,279
the test and only then write the code

00:18:21,489 --> 00:18:26,710
that will make that test pass and when

00:18:24,279 --> 00:18:28,599
you do that you should make no

00:18:26,710 --> 00:18:31,330
assumptions about the code and write the

00:18:28,599 --> 00:18:34,059
minimal and the simplest code that will

00:18:31,330 --> 00:18:37,149
make the test pass now what that gives

00:18:34,059 --> 00:18:39,340
me is basically it forces me to make no

00:18:37,149 --> 00:18:42,220
assumptions about the code about the

00:18:39,340 --> 00:18:44,049
implementation and it also prevents me

00:18:42,220 --> 00:18:48,909
from over-engineering right based on

00:18:44,049 --> 00:18:51,309
gases and once the test passes I now

00:18:48,909 --> 00:18:53,679
have a safety net that basically allows

00:18:51,309 --> 00:18:55,929
me to revert my decision and to change

00:18:53,679 --> 00:18:58,299
my mind if I choose to do so but I will

00:18:55,929 --> 00:19:02,830
know for a fact that my unit or the host

00:18:58,299 --> 00:19:05,769
system still functions the next thing is

00:19:02,830 --> 00:19:08,200
spike now spike is basically a

00:19:05,769 --> 00:19:11,649
potentially throwaway code that we are

00:19:08,200 --> 00:19:14,669
writing in order to explore a potential

00:19:11,649 --> 00:19:17,710
solution to a problem we're facing right

00:19:14,669 --> 00:19:19,960
and what that gives us is basically it

00:19:17,710 --> 00:19:21,729
allows us to gain more knowledge about

00:19:19,960 --> 00:19:25,179
the technical and the business domain

00:19:21,729 --> 00:19:26,859
and that comes really useful when we are

00:19:25,179 --> 00:19:28,359
forced to give it when we are forced to

00:19:26,859 --> 00:19:31,239
give estimations right because now

00:19:28,359 --> 00:19:33,669
instead of just guessing stuff we can

00:19:31,239 --> 00:19:36,070
sketch some code and gain more knowledge

00:19:33,669 --> 00:19:38,559
and then give away accurate and more

00:19:36,070 --> 00:19:41,830
accurate estimates right this is also

00:19:38,559 --> 00:19:43,840
super useful when you're thinking of

00:19:41,830 --> 00:19:47,019
adopting a technology right because now

00:19:43,840 --> 00:19:50,259
you have a concrete problem and you can

00:19:47,019 --> 00:19:53,080
take that technology and write and try

00:19:50,259 --> 00:19:54,609
to solve that problem with the

00:19:53,080 --> 00:19:56,739
technology right instead of just playing

00:19:54,609 --> 00:19:59,229
with it in the code sandbox for example

00:19:56,739 --> 00:20:04,710
now this sounds like a little bit of a

00:19:59,229 --> 00:20:06,220
waste but it pays off really quickly so

00:20:04,710 --> 00:20:08,680
boundaries

00:20:06,220 --> 00:20:12,040
are important right I think we all agree

00:20:08,680 --> 00:20:14,770
right but the problem is that we've

00:20:12,040 --> 00:20:16,960
discussed that if we'll just split

00:20:14,770 --> 00:20:19,930
things immediately into node modules and

00:20:16,960 --> 00:20:22,360
those boundaries are incorrect it will

00:20:19,930 --> 00:20:25,300
be practically impossible or very very

00:20:22,360 --> 00:20:29,290
costly for you to basically change those

00:20:25,300 --> 00:20:31,390
boundaries later right so a concept of

00:20:29,290 --> 00:20:33,940
modular monolith actually comes really

00:20:31,390 --> 00:20:36,100
handy okay and it's basically defined as

00:20:33,940 --> 00:20:38,830
follows right basically the idea is that

00:20:36,100 --> 00:20:41,470
your whole project is basically one big

00:20:38,830 --> 00:20:44,470
code base right it's one one code

00:20:41,470 --> 00:20:47,680
project that is basically divided into

00:20:44,470 --> 00:20:50,770
folders again not mod node modules just

00:20:47,680 --> 00:20:52,960
folders each folder is the business unit

00:20:50,770 --> 00:20:55,530
right one that handles building for

00:20:52,960 --> 00:20:59,680
example one that handles users orders

00:20:55,530 --> 00:21:02,620
whatever it may be and each folder has a

00:20:59,680 --> 00:21:04,600
file that defines its public API right

00:21:02,620 --> 00:21:06,580
think about I don't know any index.js

00:21:04,600 --> 00:21:08,740
that basically exports all the public

00:21:06,580 --> 00:21:11,890
functions that we want to allow other

00:21:08,740 --> 00:21:15,640
parts other components to be using right

00:21:11,890 --> 00:21:17,500
now this is still one code project so

00:21:15,640 --> 00:21:18,610
basically other folders can import

00:21:17,500 --> 00:21:20,740
whatever they like

00:21:18,610 --> 00:21:23,040
so this is where tooling comes in handy

00:21:20,740 --> 00:21:26,200
because you can use stuff like linters

00:21:23,040 --> 00:21:28,030
custom rules to enforce that basically

00:21:26,200 --> 00:21:32,140
the public API which component is the

00:21:28,030 --> 00:21:34,270
only thing being used okay so what that

00:21:32,140 --> 00:21:36,220
gives us is basically it gives us the

00:21:34,270 --> 00:21:40,930
same boundaries but it allows us to

00:21:36,220 --> 00:21:43,750
evolve them easily so responding

00:21:40,930 --> 00:21:45,610
decisions is useful but like everything

00:21:43,750 --> 00:21:49,660
in life it comes at the cost and we need

00:21:45,610 --> 00:21:52,150
to be aware of those costs so as we

00:21:49,660 --> 00:21:55,560
discussed earlier if you postpone a

00:21:52,150 --> 00:21:59,230
decision for too long you may lose

00:21:55,560 --> 00:22:01,720
viable options right why viable

00:21:59,230 --> 00:22:04,210
solutions one of them perhaps may be an

00:22:01,720 --> 00:22:07,840
optimal answer to your question so we

00:22:04,210 --> 00:22:10,390
need to be really careful if you're part

00:22:07,840 --> 00:22:12,880
of it of a team that makes the decisions

00:22:10,390 --> 00:22:16,150
right and you're postponing something it

00:22:12,880 --> 00:22:19,370
can not only affect your team but it can

00:22:16,150 --> 00:22:22,279
also get other teams that depend on you

00:22:19,370 --> 00:22:23,990
get stuck right for example if you're

00:22:22,279 --> 00:22:26,600
creating some something that should be

00:22:23,990 --> 00:22:30,799
consumed by others and you need to be

00:22:26,600 --> 00:22:33,499
really aware of that as well now in

00:22:30,799 --> 00:22:35,600
order to be able to postpone decisions

00:22:33,499 --> 00:22:37,639
and create options that means that our

00:22:35,600 --> 00:22:40,190
code needs to be flexible and easily

00:22:37,639 --> 00:22:42,379
changeable and that unfortunately

00:22:40,190 --> 00:22:44,840
usually means that it becomes way more

00:22:42,379 --> 00:22:47,419
complex okay and you need to be thinking

00:22:44,840 --> 00:22:48,350
whether or not it's a cost you're

00:22:47,419 --> 00:22:55,129
willing to pay

00:22:48,350 --> 00:22:56,509
and finally it's stressful okay and if

00:22:55,129 --> 00:22:58,639
you are this postponing too many

00:22:56,509 --> 00:23:00,740
decisions it may cause you to make rash

00:22:58,639 --> 00:23:04,039
decisions just to get rid of the

00:23:00,740 --> 00:23:06,980
headache right to make real suboptimal

00:23:04,039 --> 00:23:09,169
decisions so here are a couple of

00:23:06,980 --> 00:23:11,539
takeaways that I'd like to leave you

00:23:09,169 --> 00:23:13,490
with you should never commit early

00:23:11,539 --> 00:23:15,350
unless you know why you should always

00:23:13,490 --> 00:23:17,749
ask yourself whether you have enough

00:23:15,350 --> 00:23:20,659
information to make the decision right

00:23:17,749 --> 00:23:23,029
there and then and if you will choose to

00:23:20,659 --> 00:23:24,919
postpone this your decision you need to

00:23:23,029 --> 00:23:27,919
create options for yourself using stuff

00:23:24,919 --> 00:23:31,460
for example like modular monolith or

00:23:27,919 --> 00:23:34,730
testing which is also great and of

00:23:31,460 --> 00:23:35,659
course be aware of the costs and think

00:23:34,730 --> 00:23:38,059
of them constantly

00:23:35,659 --> 00:23:41,049
that's it happy procrastinating people

00:23:38,059 --> 00:23:41,049
thank you

00:23:43,500 --> 00:23:47,909
borÃ¥s Levinsky thank you so much and we

00:23:46,320 --> 00:23:49,889
have some questions for you Boris you've

00:23:47,909 --> 00:23:54,240
said that you like them so it's a good

00:23:49,889 --> 00:23:57,539
thing do you use microcurrent it what do

00:23:54,240 --> 00:23:59,820
you think about this hi I think just

00:23:57,539 --> 00:24:00,450
like everything it's a tool for specific

00:23:59,820 --> 00:24:02,580
tasks

00:24:00,450 --> 00:24:05,580
they're super costly we use them on

00:24:02,580 --> 00:24:08,549
several products but basically it comes

00:24:05,580 --> 00:24:10,580
super handy if you want to have a one

00:24:08,549 --> 00:24:12,899
app and have different teams be

00:24:10,580 --> 00:24:14,669
basically owners of different part of

00:24:12,899 --> 00:24:17,190
that app and have them move quickly this

00:24:14,669 --> 00:24:19,679
is what we use it for so imagine an app

00:24:17,190 --> 00:24:21,120
a team responsible for a certain page

00:24:19,679 --> 00:24:22,950
and they want to deploy that page

00:24:21,120 --> 00:24:25,500
independently without basically

00:24:22,950 --> 00:24:27,960
deploying the whole app so this has come

00:24:25,500 --> 00:24:30,049
super handy we're using it again it's a

00:24:27,960 --> 00:24:33,299
it's a solution for a particular problem

00:24:30,049 --> 00:24:35,370
okay that's all there is for to it what

00:24:33,299 --> 00:24:38,850
kind of services do you use for feature

00:24:35,370 --> 00:24:42,870
Tuggle is yes so we have basically our

00:24:38,850 --> 00:24:46,409
own system called cold Petri it's open

00:24:42,870 --> 00:24:49,620
source weeks get up with slash Petri I

00:24:46,409 --> 00:24:52,649
will tweet out the link it's it's it's

00:24:49,620 --> 00:24:54,299
feature it's again it's you can a be

00:24:52,649 --> 00:24:56,850
test stuff you can just use it for

00:24:54,299 --> 00:24:59,370
feature toggles super awesome use it

00:24:56,850 --> 00:25:01,889
open source you're welcome

00:24:59,370 --> 00:25:06,649
and the last question are using cannery

00:25:01,889 --> 00:25:10,679
testing for decision-making yes

00:25:06,649 --> 00:25:13,259
sometimes mostly our products do it it's

00:25:10,679 --> 00:25:15,779
an effective tool and yeah like we we do

00:25:13,259 --> 00:25:17,490
use them occasionally and then I have a

00:25:15,779 --> 00:25:20,009
question Rick and Morty which one is

00:25:17,490 --> 00:25:21,690
your spirit animal both of them of

00:25:20,009 --> 00:25:24,000
course both of them you can't

00:25:21,690 --> 00:25:25,320
discriminate come on see it doesn't make

00:25:24,000 --> 00:25:27,710
a decision he's gonna make a different

00:25:25,320 --> 00:25:29,909
decision about this later I think never

00:25:27,710 --> 00:25:31,409
alright this was pure Boris Levinsky

00:25:29,909 --> 00:25:34,080
thank you so much if you have more

00:25:31,409 --> 00:25:35,350
questions for him please make sure you

00:25:34,080 --> 00:25:38,520
catch him

00:25:35,350 --> 00:25:38,520

YouTube URL: https://www.youtube.com/watch?v=AY_AoXN246o


