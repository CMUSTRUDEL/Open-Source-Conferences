Title: Reactive Online Meetup|Micro-frontends
Publication date: 2020-07-23
Playlist: Reactive Online Meetups
Description: 
	STAY TUNED FOR NEXT EDITION!

𝗦𝗣𝗘𝗔𝗞𝗘𝗥𝗦
#devtalk - LUCA MEZZALIRA - Scaling your projects with Micro-frontends
#devtalk - MANFRED STEYER - The Micro-frontend Revolution: Using Webpack 5 Module Federation with Angular
host - Andrej Skok - Vacuumlabs team
--------------------

𝗟𝗨𝗖𝗔 𝗠𝗘𝗭𝗭𝗔𝗟𝗜𝗥𝗔
#devatalk

𝗧𝗔𝗟𝗞
Scaling your projects with Micro-frontends

𝗧𝗔𝗟𝗞 𝗔𝗕𝗦𝗧𝗥𝗔𝗖𝗧
Micro-frontends are a new architectural trend in the development of front-end applications. This architectural style can provide tremendous benefits to your projects and organization, offering a level of decoupling never seen before in single-page applications or universal architectures. That said, micro-frontends need to be explored in practice. Luckily there are already a few companies using them at scale.
Drawing on his work at DAZN, Luca Mezzalira explains how to implement micro-frontends, enabling you to scale up a project with tens of developers without reducing the throughput.

𝗕𝗜𝗢
Luca is VP of Architecture at DAZN, Google Developer Expert, and London JavaScript Community Manager.

--------------------
𝗠𝗔𝗡𝗙𝗥𝗘𝗗 𝗦𝗧𝗘𝗬𝗘𝗥
#devtalk

𝗧𝗔𝗟𝗞
The Micro-frontend Revolution: Using Webpack 5 Module Federation with Angular

𝗧𝗔𝗟𝗞 𝗔𝗕𝗦𝗧𝗥𝗔𝗖𝗧
The implementation of micro frontends has so far been anything but easy. Since common frameworks and build tools did not even know this idea, you had to dig into the bag of tricks. Module Federation offered by Webpack 5 initiates a crucial change of direction here. It allows you to load separately compiled applications at runtime and to share libraries between them.
In this session, you will learn how you can use this mechanism to create micro frontends with Angular. In addition to the happy day scenarios, we also discuss pitfalls and approaches to avoid them. Furthermore, we take a look at possible alternatives. At the end of the session, you have an overview of the topic and know how you can use Module Federation in your projects and what the consequences are.

𝗕𝗜𝗢
Trainer, consultant, and programming architect with focus on Angular. Google Developer Expert (GDE) and Trusted Collaborator in the Angular team who writes for O'Reilly, the German Java Magazine, and windows.developer. Regularly speaks at conferences and provides workshops at https://www.angulararchitects.io/.
--------------------
Captions: 
	00:00:05,759 --> 00:00:11,120
hi everyone

00:00:08,000 --> 00:00:13,599
welcome on our eighth reactive meetup

00:00:11,120 --> 00:00:15,360
for it people that's something like

00:00:13,599 --> 00:00:18,320
anniversary edition

00:00:15,360 --> 00:00:19,840
at least in binary i'm really excited

00:00:18,320 --> 00:00:21,760
that you made the decision

00:00:19,840 --> 00:00:23,359
and join us

00:00:21,760 --> 00:00:26,000
[Music]

00:00:23,359 --> 00:00:28,840
because we are going to do a deep dive

00:00:26,000 --> 00:00:32,399
into the topic of microfrontends

00:00:28,840 --> 00:00:33,360
uh today you can look forward to two

00:00:32,399 --> 00:00:35,920
death talks so

00:00:33,360 --> 00:00:38,320
no meta talking today just uh two

00:00:35,920 --> 00:00:39,280
developers talking about micro frontends

00:00:38,320 --> 00:00:41,440
architecture

00:00:39,280 --> 00:00:43,120
the first death talk will be done by

00:00:41,440 --> 00:00:45,840
luca mezalera

00:00:43,120 --> 00:00:48,239
and he will be talking about how to

00:00:45,840 --> 00:00:49,360
scale your projects with microfrontend

00:00:48,239 --> 00:00:52,640
uh

00:00:49,360 --> 00:00:56,239
approach and the second their talk

00:00:52,640 --> 00:00:58,559
will be done by manfred stoya

00:00:56,239 --> 00:00:59,520
and it will be about the micro frontends

00:00:58,559 --> 00:01:02,480
revolution

00:00:59,520 --> 00:01:04,159
with uh webpack five module federation

00:01:02,480 --> 00:01:06,560
with angular

00:01:04,159 --> 00:01:07,280
so really looking forward to both of the

00:01:06,560 --> 00:01:10,640
topics

00:01:07,280 --> 00:01:13,119
as they seem really exciting uh just to

00:01:10,640 --> 00:01:16,080
introduce myself my name is andy

00:01:13,119 --> 00:01:17,119
uh or andres officially i'm from a

00:01:16,080 --> 00:01:19,520
vacuum labs

00:01:17,119 --> 00:01:22,720
which is a company that stays behind the

00:01:19,520 --> 00:01:26,640
original reactive conf from 2015.

00:01:22,720 --> 00:01:29,439
uh other than that we focus on providing

00:01:26,640 --> 00:01:31,439
flexible and reliable software engineers

00:01:29,439 --> 00:01:34,640
to clients all over the world

00:01:31,439 --> 00:01:36,000
from la to tokyo and we help them build

00:01:34,640 --> 00:01:38,079
various fintech

00:01:36,000 --> 00:01:39,520
blockchain projects or online

00:01:38,079 --> 00:01:42,880
marketplaces

00:01:39,520 --> 00:01:46,240
of course before we start there are

00:01:42,880 --> 00:01:48,720
some notes from organizers and

00:01:46,240 --> 00:01:50,880
more specifically two of them uh first

00:01:48,720 --> 00:01:54,000
is that we have a slack channel

00:01:50,880 --> 00:01:56,560
on reactiveonlinemeetups.like.com

00:01:54,000 --> 00:01:59,040
which is quite active there is a channel

00:01:56,560 --> 00:02:01,840
for each of the online meetups so

00:01:59,040 --> 00:02:03,119
feel free to join and in case you have

00:02:01,840 --> 00:02:05,759
any questions

00:02:03,119 --> 00:02:07,280
there are speakers there i am there and

00:02:05,759 --> 00:02:10,319
also a lot of other people

00:02:07,280 --> 00:02:14,000
so we can discuss various issues there

00:02:10,319 --> 00:02:17,200
so feel free to join and the second

00:02:14,000 --> 00:02:20,800
uh is that there will be a

00:02:17,200 --> 00:02:23,920
q a uh for each of the

00:02:20,800 --> 00:02:24,640
of the talks uh we will get to all the

00:02:23,920 --> 00:02:28,000
questions

00:02:24,640 --> 00:02:30,160
uh which you write into the q a sections

00:02:28,000 --> 00:02:32,080
section on the on this on your zoom

00:02:30,160 --> 00:02:35,280
windows after the talks so

00:02:32,080 --> 00:02:36,720
feel free to ask uh we'll try to answer

00:02:35,280 --> 00:02:39,840
everything uh

00:02:36,720 --> 00:02:43,040
uh as good as possible

00:02:39,840 --> 00:02:46,080
uh so again

00:02:43,040 --> 00:02:47,680
welcome everyone and uh let's uh let's

00:02:46,080 --> 00:02:50,239
proceed to the talks

00:02:47,680 --> 00:02:52,800
uh luca will be speaking first hi luca

00:02:50,239 --> 00:02:52,800
how are you

00:02:53,760 --> 00:03:00,720
hello very well how are you

00:02:57,360 --> 00:03:03,040
oh also also great uh so

00:03:00,720 --> 00:03:04,080
we are really really happy to have you

00:03:03,040 --> 00:03:05,280
here with us

00:03:04,080 --> 00:03:08,319
[Music]

00:03:05,280 --> 00:03:11,599
today evening at least in europe evening

00:03:08,319 --> 00:03:13,519
uh so so let's proceed with your talk uh

00:03:11,599 --> 00:03:15,920
i'm really looking forward uh

00:03:13,519 --> 00:03:16,640
micro frontends is something which is on

00:03:15,920 --> 00:03:19,920
my project

00:03:16,640 --> 00:03:22,480
at least is being mentioned uh

00:03:19,920 --> 00:03:23,760
during the last half a year uh maybe

00:03:22,480 --> 00:03:26,480
thousand times

00:03:23,760 --> 00:03:27,599
uh i i have heard some arguments for it

00:03:26,480 --> 00:03:29,840
some against

00:03:27,599 --> 00:03:30,879
nobody knows how to do it properly and

00:03:29,840 --> 00:03:32,799
where to start

00:03:30,879 --> 00:03:34,400
so really great and really looking

00:03:32,799 --> 00:03:37,680
forward uh

00:03:34,400 --> 00:03:40,080
so please enlighten me you can start

00:03:37,680 --> 00:03:43,120
sharing your screen and i will do my

00:03:40,080 --> 00:03:45,120
best the stage is yours

00:03:43,120 --> 00:03:46,720
thank you very much thank you let me

00:03:45,120 --> 00:03:49,760
know if you can see that

00:03:46,720 --> 00:03:53,599
i can see you can proceed

00:03:49,760 --> 00:03:54,159
thank you thank you okay so welcome

00:03:53,599 --> 00:03:57,200
everyone

00:03:54,159 --> 00:03:58,799
uh and thanks for spending uh some time

00:03:57,200 --> 00:04:00,319
with us tonight

00:03:58,799 --> 00:04:02,400
i think it's great that there are so

00:04:00,319 --> 00:04:05,439
many people interested in the topic

00:04:02,400 --> 00:04:08,080
um so uh let's start with

00:04:05,439 --> 00:04:09,680
uh who am i my name is luca i'm a vice

00:04:08,080 --> 00:04:12,879
president of architecture

00:04:09,680 --> 00:04:15,519
for a company called the zone it's a ott

00:04:12,879 --> 00:04:16,160
platform think about netflix but for

00:04:15,519 --> 00:04:18,000
sport

00:04:16,160 --> 00:04:19,359
live sports mainly we're available in

00:04:18,000 --> 00:04:23,440
nine countries and

00:04:19,359 --> 00:04:25,360
about to release our platform in uh 220

00:04:23,440 --> 00:04:26,720
so it'd be quite a lot of fun in the

00:04:25,360 --> 00:04:28,400
next few months for me

00:04:26,720 --> 00:04:30,560
i'm a google developer expert on web

00:04:28,400 --> 00:04:31,759
technologies and i'm running the london

00:04:30,560 --> 00:04:35,440
javascript community

00:04:31,759 --> 00:04:37,840
um in the uk

00:04:35,440 --> 00:04:39,759
so what we are going to talk about we

00:04:37,840 --> 00:04:42,000
are going to talk about how to scale

00:04:39,759 --> 00:04:43,040
uh our front-end application with

00:04:42,000 --> 00:04:45,440
microphone tents

00:04:43,040 --> 00:04:47,360
and basically i would like to uh share

00:04:45,440 --> 00:04:49,280
with you the insight that i

00:04:47,360 --> 00:04:51,759
learned from the trenches in the past

00:04:49,280 --> 00:04:55,040
three years working for my organization

00:04:51,759 --> 00:04:58,000
um usually when you start any project

00:04:55,040 --> 00:04:59,520
uh either a startup or a new project uh

00:04:58,000 --> 00:05:00,479
the first thing that you try to do is

00:04:59,520 --> 00:05:03,280
validate the

00:05:00,479 --> 00:05:04,240
uh the business idea so you want to to

00:05:03,280 --> 00:05:06,880
understand if

00:05:04,240 --> 00:05:08,320
your uh your project your idea would uh

00:05:06,880 --> 00:05:10,880
succeed and uh

00:05:08,320 --> 00:05:11,840
you want to gain uh insights directly

00:05:10,880 --> 00:05:13,919
from from

00:05:11,840 --> 00:05:15,280
your users to your potential users and

00:05:13,919 --> 00:05:18,000
therefore um

00:05:15,280 --> 00:05:18,720
you need to uh to try to get uh hit the

00:05:18,000 --> 00:05:21,120
ground as

00:05:18,720 --> 00:05:21,919
as soon as possible there is a one

00:05:21,120 --> 00:05:25,039
famous

00:05:21,919 --> 00:05:27,840
sentence that if your first attempt uh

00:05:25,039 --> 00:05:29,600
um is not as ugly as you expect it means

00:05:27,840 --> 00:05:31,360
that you are launching too late

00:05:29,600 --> 00:05:33,199
and i fully agree with that so usually

00:05:31,360 --> 00:05:34,800
on on the technical part

00:05:33,199 --> 00:05:37,039
um what you are trying to do is

00:05:34,800 --> 00:05:38,320
simplifying as much as possible because

00:05:37,039 --> 00:05:40,080
the first part is validating the

00:05:38,320 --> 00:05:42,160
business idea

00:05:40,080 --> 00:05:44,880
and therefore uh on the technical part

00:05:42,160 --> 00:05:47,440
usually not always but usually you start

00:05:44,880 --> 00:05:48,720
picking a type of database it could be

00:05:47,440 --> 00:05:51,120
sql nosql

00:05:48,720 --> 00:05:52,720
uh whatever you you prefer uh you go

00:05:51,120 --> 00:05:54,960
ahead and you design

00:05:52,720 --> 00:05:55,840
a monolith apis that uh with your

00:05:54,960 --> 00:05:59,199
favorite language

00:05:55,840 --> 00:06:01,680
node c sharp java whatever uh and

00:05:59,199 --> 00:06:03,280
um and then uh you end up creating uh

00:06:01,680 --> 00:06:06,560
either a single page application

00:06:03,280 --> 00:06:08,880
for for uh the sake of the discussion um

00:06:06,560 --> 00:06:10,080
the interesting part of this is that uh

00:06:08,880 --> 00:06:13,360
as you can imagine

00:06:10,080 --> 00:06:16,400
uh starting to to uh put together these

00:06:13,360 --> 00:06:19,280
um it would allow your team to

00:06:16,400 --> 00:06:20,240
focus mainly on the business logic and

00:06:19,280 --> 00:06:22,800
less on

00:06:20,240 --> 00:06:24,960
all the rest that could be either the

00:06:22,800 --> 00:06:26,400
cicd pipeline because you define once

00:06:24,960 --> 00:06:29,039
everything will be there

00:06:26,400 --> 00:06:31,039
you may or may not have infrastructure

00:06:29,039 --> 00:06:34,080
as code uh depends how you use

00:06:31,039 --> 00:06:34,720
your setup on-prem not on-prem and cloud

00:06:34,080 --> 00:06:36,800
native

00:06:34,720 --> 00:06:38,639
really depends but on on the front-end

00:06:36,800 --> 00:06:40,080
side you tend to use uh

00:06:38,639 --> 00:06:41,600
server-side rendering on single-page

00:06:40,080 --> 00:06:42,479
application it really depends what are

00:06:41,600 --> 00:06:44,880
your goals

00:06:42,479 --> 00:06:45,840
for for that specific feature uh sorry

00:06:44,880 --> 00:06:48,880
for that specific

00:06:45,840 --> 00:06:49,680
project and therefore is a a really

00:06:48,880 --> 00:06:51,360
important that

00:06:49,680 --> 00:06:53,120
that you start very light and then you

00:06:51,360 --> 00:06:56,639
start to uh let's say

00:06:53,120 --> 00:06:59,280
um create more complexity when and if

00:06:56,639 --> 00:07:02,479
the project will start to uh to have

00:06:59,280 --> 00:07:04,080
traction uh with your users and

00:07:02,479 --> 00:07:05,759
let's assume that is exactly what is

00:07:04,080 --> 00:07:06,400
happening so your project is get

00:07:05,759 --> 00:07:07,599
interaction

00:07:06,400 --> 00:07:10,000
there are more and more users

00:07:07,599 --> 00:07:11,199
interesting to to use your maybe sas

00:07:10,000 --> 00:07:12,800
platform

00:07:11,199 --> 00:07:14,800
and what happens usually is something

00:07:12,800 --> 00:07:17,840
like that so you start

00:07:14,800 --> 00:07:20,000
you have a clear way to um

00:07:17,840 --> 00:07:20,960
scale your backend so you start to say

00:07:20,000 --> 00:07:23,360
okay so perfect

00:07:20,960 --> 00:07:24,319
uh so we start to have uh all our

00:07:23,360 --> 00:07:27,039
services that are

00:07:24,319 --> 00:07:30,000
um up running and we want to scale them

00:07:27,039 --> 00:07:31,599
we know exactly which api

00:07:30,000 --> 00:07:33,520
which traffic we have for every single

00:07:31,599 --> 00:07:36,000
api we know how to scale

00:07:33,520 --> 00:07:36,800
these apis uh and this because of

00:07:36,000 --> 00:07:39,280
monitoring that

00:07:36,800 --> 00:07:41,360
obviously you put in place right uh and

00:07:39,280 --> 00:07:42,960
and you start to to basically kill the

00:07:41,360 --> 00:07:44,800
monolith on the back end

00:07:42,960 --> 00:07:47,440
creating the first microservice and

00:07:44,800 --> 00:07:50,400
having something in front of of uh

00:07:47,440 --> 00:07:51,759
as entry point like an api gateway or a

00:07:50,400 --> 00:07:53,280
back end for front and it doesn't matter

00:07:51,759 --> 00:07:54,240
at this stage but something that would

00:07:53,280 --> 00:07:56,479
allow you to

00:07:54,240 --> 00:07:57,520
redirect and shape the traffic towards

00:07:56,479 --> 00:08:00,080
one microservice

00:07:57,520 --> 00:08:00,560
and the monolith until you are ready uh

00:08:00,080 --> 00:08:03,120
to

00:08:00,560 --> 00:08:04,800
um to have all the microservices

00:08:03,120 --> 00:08:08,000
available inside your

00:08:04,800 --> 00:08:09,680
uh infrastructure the interesting bit of

00:08:08,000 --> 00:08:10,479
this this approach is the fact that you

00:08:09,680 --> 00:08:12,639
start to

00:08:10,479 --> 00:08:14,639
alternatively create value for your

00:08:12,639 --> 00:08:16,319
users so you start to have

00:08:14,639 --> 00:08:18,240
your existing monolith that is

00:08:16,319 --> 00:08:20,080
collaborating with the brand new

00:08:18,240 --> 00:08:21,440
microservice and microservices has

00:08:20,080 --> 00:08:24,319
amazing characteristics

00:08:21,440 --> 00:08:26,000
because a you have some teams that uh

00:08:24,319 --> 00:08:27,759
you can start to shape the the structure

00:08:26,000 --> 00:08:29,199
of your organization around these

00:08:27,759 --> 00:08:31,919
microservices maybe

00:08:29,199 --> 00:08:33,279
following some domain-driven design um

00:08:31,919 --> 00:08:36,159
suggestion and maybe

00:08:33,279 --> 00:08:37,599
following uh uh dividing your your

00:08:36,159 --> 00:08:40,560
application in multiple

00:08:37,599 --> 00:08:42,080
domains so i don't know um in the domain

00:08:40,560 --> 00:08:43,519
design usually you can have like core

00:08:42,080 --> 00:08:45,279
domain that is basically

00:08:43,519 --> 00:08:46,560
the reason why the application is up and

00:08:45,279 --> 00:08:48,320
running um

00:08:46,560 --> 00:08:50,160
and you have like the supporting domain

00:08:48,320 --> 00:08:52,160
that are supporting domain that are

00:08:50,160 --> 00:08:53,600
helping the core domain to succeed

00:08:52,160 --> 00:08:55,519
and then you have generic domain like

00:08:53,600 --> 00:08:57,600
for instance if you think about netflix

00:08:55,519 --> 00:08:58,720
uh an example of generic domain is the

00:08:57,600 --> 00:09:01,120
payment it's

00:08:58,720 --> 00:09:02,080
that's not any any uh let's say uh

00:09:01,120 --> 00:09:03,920
competitive uh

00:09:02,080 --> 00:09:05,839
competitive advantage advantage to

00:09:03,920 --> 00:09:08,000
netflix but is needed because otherwise

00:09:05,839 --> 00:09:10,000
you cannot subscribe

00:09:08,000 --> 00:09:12,160
supporting domain could be the search

00:09:10,000 --> 00:09:15,200
option in netflix if it's down

00:09:12,160 --> 00:09:18,480
and you don't notice that it's fine um

00:09:15,200 --> 00:09:20,560
as long you are capable to uh let's say

00:09:18,480 --> 00:09:22,399
browse the the catalog and play some

00:09:20,560 --> 00:09:24,480
content you're fine and that is

00:09:22,399 --> 00:09:25,839
exactly the core domain of netflix so

00:09:24,480 --> 00:09:28,080
they are create they have created a

00:09:25,839 --> 00:09:31,360
platform that allows you in any device

00:09:28,080 --> 00:09:33,920
to uh watch some some content at any

00:09:31,360 --> 00:09:34,959
given point of the day uh because

00:09:33,920 --> 00:09:36,720
everything is a

00:09:34,959 --> 00:09:38,560
video on demand and you can watch when

00:09:36,720 --> 00:09:41,040
you want instead of

00:09:38,560 --> 00:09:42,560
go on a linear channel when when it's

00:09:41,040 --> 00:09:45,440
needed

00:09:42,560 --> 00:09:46,080
but what happens on the front end front

00:09:45,440 --> 00:09:49,040
end is

00:09:46,080 --> 00:09:50,000
usually in my experience we try to keep

00:09:49,040 --> 00:09:51,440
to extend

00:09:50,000 --> 00:09:53,680
the amount of developers working on the

00:09:51,440 --> 00:09:56,399
same code base but we try to maintain

00:09:53,680 --> 00:09:57,839
exactly the same code base that we

00:09:56,399 --> 00:09:59,440
that we started in in the first

00:09:57,839 --> 00:10:02,959
iteration that is

00:09:59,440 --> 00:10:06,320
not let's say usually wrong

00:10:02,959 --> 00:10:08,399
but it could lead to some bad practices

00:10:06,320 --> 00:10:09,360
one for instance that they can come up

00:10:08,399 --> 00:10:11,920
with is

00:10:09,360 --> 00:10:12,800
maybe we started this uh the the design

00:10:11,920 --> 00:10:15,600
on on the left

00:10:12,800 --> 00:10:16,160
um or this slide uh i don't know two

00:10:15,600 --> 00:10:18,320
years

00:10:16,160 --> 00:10:19,200
ago and when we started to do that what

00:10:18,320 --> 00:10:21,600
happens is that we

00:10:19,200 --> 00:10:23,519
have some assumptions and we take some

00:10:21,600 --> 00:10:26,720
some best practices at the time

00:10:23,519 --> 00:10:27,839
but in two years the um technology

00:10:26,720 --> 00:10:29,600
changes completely

00:10:27,839 --> 00:10:31,360
and also our assumption the business is

00:10:29,600 --> 00:10:34,800
changing completely we are talking about

00:10:31,360 --> 00:10:37,600
two dynamic entities that are evolving

00:10:34,800 --> 00:10:38,800
every day and and therefore maintaining

00:10:37,600 --> 00:10:42,240
the same code base

00:10:38,800 --> 00:10:43,920
it may or may not be a good call

00:10:42,240 --> 00:10:45,680
and therefore you need to figure out if

00:10:43,920 --> 00:10:47,760
there are better ways to do that

00:10:45,680 --> 00:10:49,519
one way is for instance rewriting

00:10:47,760 --> 00:10:51,839
completely from scratch the application

00:10:49,519 --> 00:10:53,600
but if you think about that you start to

00:10:51,839 --> 00:10:53,920
have quite a few challenges in front of

00:10:53,600 --> 00:10:55,760
you

00:10:53,920 --> 00:10:57,760
how do you sell to your business that

00:10:55,760 --> 00:10:59,360
you need i don't know eight months for

00:10:57,760 --> 00:11:00,640
rewriting everything you cannot add any

00:10:59,360 --> 00:11:01,839
future because all the developers are

00:11:00,640 --> 00:11:04,399
working on that

00:11:01,839 --> 00:11:06,320
those are kind of challenges that we

00:11:04,399 --> 00:11:07,920
faced for for several years

00:11:06,320 --> 00:11:09,680
and obviously you need to find the right

00:11:07,920 --> 00:11:11,200
trade-off between

00:11:09,680 --> 00:11:13,519
enhancing the architecture and the

00:11:11,200 --> 00:11:14,079
technology and delivering value for your

00:11:13,519 --> 00:11:15,760
users

00:11:14,079 --> 00:11:17,839
and your organization because that is

00:11:15,760 --> 00:11:21,200
always a trade-off

00:11:17,839 --> 00:11:23,760
so starting from this point and that

00:11:21,200 --> 00:11:24,959
was exactly the point where i was a few

00:11:23,760 --> 00:11:27,920
years ago

00:11:24,959 --> 00:11:30,000
i start to ask myself can i have can i

00:11:27,920 --> 00:11:32,959
see a way that i can apply

00:11:30,000 --> 00:11:33,920
the micro services principles to the

00:11:32,959 --> 00:11:37,120
front end

00:11:33,920 --> 00:11:40,240
why that because micro services is

00:11:37,120 --> 00:11:42,640
a well-known architecture pattern that

00:11:40,240 --> 00:11:43,920
is leveraging certain principle like the

00:11:42,640 --> 00:11:46,240
independent deployment

00:11:43,920 --> 00:11:48,320
independent technology agnosticism uh

00:11:46,240 --> 00:11:49,760
around around the microservices

00:11:48,320 --> 00:11:51,360
uh the fact that every team is

00:11:49,760 --> 00:11:52,079
independent you structure the team in a

00:11:51,360 --> 00:11:54,480
certain way

00:11:52,079 --> 00:11:55,360
so you are scaling your organization as

00:11:54,480 --> 00:11:58,000
well your

00:11:55,360 --> 00:11:59,600
architecture organically but on the

00:11:58,000 --> 00:12:02,639
front end we didn't have

00:11:59,600 --> 00:12:04,959
many solutions up to now so

00:12:02,639 --> 00:12:07,360
uh three years ago obviously there

00:12:04,959 --> 00:12:09,040
wasn't the name microphone 10 but

00:12:07,360 --> 00:12:10,480
what what they came up with it was

00:12:09,040 --> 00:12:13,360
something like that

00:12:10,480 --> 00:12:14,639
that basically i was starting to slice

00:12:13,360 --> 00:12:17,519
my application

00:12:14,639 --> 00:12:18,079
uh and my platform in multiple uh let's

00:12:17,519 --> 00:12:20,720
say

00:12:18,079 --> 00:12:22,639
vertical slice how i call them that

00:12:20,720 --> 00:12:25,279
would allow me to

00:12:22,639 --> 00:12:26,079
let's say create a unique domain

00:12:25,279 --> 00:12:27,360
end-to-end

00:12:26,079 --> 00:12:29,440
from front-end back-end and

00:12:27,360 --> 00:12:32,480
infrastructure and create

00:12:29,440 --> 00:12:35,200
uh the possibility to my teams to

00:12:32,480 --> 00:12:36,079
have freedom inside this domain and that

00:12:35,200 --> 00:12:38,000
is basically

00:12:36,079 --> 00:12:39,279
how usually i think about about

00:12:38,000 --> 00:12:42,320
microsoft

00:12:39,279 --> 00:12:45,839
so let's try to to find uh um

00:12:42,320 --> 00:12:48,320
a description on on uh how

00:12:45,839 --> 00:12:48,880
how we can define microphone dance so uh

00:12:48,320 --> 00:12:50,880
obviously

00:12:48,880 --> 00:12:52,639
at the time uh there weren't many

00:12:50,880 --> 00:12:56,000
literature around microphone fans

00:12:52,639 --> 00:12:57,360
and we need to find a way to define them

00:12:56,000 --> 00:12:59,120
in my opinion if you think about

00:12:57,360 --> 00:13:00,560
characteristics of microphone dance we

00:12:59,120 --> 00:13:02,560
can say that microphone 10 is a

00:13:00,560 --> 00:13:04,480
representation of a business subdomain

00:13:02,560 --> 00:13:05,600
that is coming from uh domain driven

00:13:04,480 --> 00:13:07,040
design uh

00:13:05,600 --> 00:13:09,279
and if you're thinking oh but the main

00:13:07,040 --> 00:13:09,839
dream design is a clickball backhand yes

00:13:09,279 --> 00:13:12,000
but

00:13:09,839 --> 00:13:13,200
part of it can be applicable on software

00:13:12,000 --> 00:13:16,000
engineering in general

00:13:13,200 --> 00:13:17,360
therefore uh i think is uh um let's say

00:13:16,000 --> 00:13:19,920
limitative if we think

00:13:17,360 --> 00:13:21,600
just of the main different design on one

00:13:19,920 --> 00:13:23,839
area of an application

00:13:21,600 --> 00:13:26,000
they allow independent implementation so

00:13:23,839 --> 00:13:27,279
the possibility to independently deploy

00:13:26,000 --> 00:13:30,480
specific artifacts

00:13:27,279 --> 00:13:33,839
with same or different technology and

00:13:30,480 --> 00:13:34,320
they should avoid the sharing logic

00:13:33,839 --> 00:13:36,160
because

00:13:34,320 --> 00:13:38,560
if we want to maintain independence

00:13:36,160 --> 00:13:40,800
usually the sharing part has to be

00:13:38,560 --> 00:13:42,160
uh let's say well thought uh you can do

00:13:40,800 --> 00:13:44,320
that on microphone tense as well

00:13:42,160 --> 00:13:46,320
but you need to properly thought pros

00:13:44,320 --> 00:13:48,800
and cons of that choice

00:13:46,320 --> 00:13:50,560
and and finally they're owned by a

00:13:48,800 --> 00:13:52,320
single team now

00:13:50,560 --> 00:13:53,760
why i put emphasis on on the ownership

00:13:52,320 --> 00:13:56,639
part one thing that i

00:13:53,760 --> 00:13:57,199
often see failing in projects is when

00:13:56,639 --> 00:14:00,079
there is

00:13:57,199 --> 00:14:00,480
no clarity on ownership who is owning

00:14:00,079 --> 00:14:02,320
what

00:14:00,480 --> 00:14:03,920
and it's not for for a blaming culture

00:14:02,320 --> 00:14:05,199
at all it's just because if you have

00:14:03,920 --> 00:14:08,399
someone responsible

00:14:05,199 --> 00:14:08,800
then that person or that team can take

00:14:08,399 --> 00:14:11,040
over

00:14:08,800 --> 00:14:12,560
and and and take the decisions because

00:14:11,040 --> 00:14:14,000
when you have too many ads in the room

00:14:12,560 --> 00:14:16,800
that are trying to to

00:14:14,000 --> 00:14:18,160
shape uh let's say the future or of a

00:14:16,800 --> 00:14:20,320
specific

00:14:18,160 --> 00:14:22,720
functionality you risk that you you

00:14:20,320 --> 00:14:24,480
don't find the uh the the quorum and the

00:14:22,720 --> 00:14:26,320
agreement across all the people

00:14:24,480 --> 00:14:27,760
so having someone is responsible for

00:14:26,320 --> 00:14:30,560
that can be uh

00:14:27,760 --> 00:14:32,480
uh the the way how uh you can speed up

00:14:30,560 --> 00:14:33,760
the discussion

00:14:32,480 --> 00:14:35,519
that doesn't mean that you need to have

00:14:33,760 --> 00:14:36,399
a dictatorship this is not what i'm

00:14:35,519 --> 00:14:37,360
saying is

00:14:36,399 --> 00:14:39,680
you need to have someone that is

00:14:37,360 --> 00:14:42,720
responsible for the life cycle of

00:14:39,680 --> 00:14:44,560
a specific artifact so creation and also

00:14:42,720 --> 00:14:45,440
dismissal of that because sometimes you

00:14:44,560 --> 00:14:46,880
need to dismiss

00:14:45,440 --> 00:14:48,560
certain part of your application and you

00:14:46,880 --> 00:14:52,720
need to have someone that think

00:14:48,560 --> 00:14:55,920
um how to to do that end-to-end

00:14:52,720 --> 00:14:56,800
so um usually what i i discover with

00:14:55,920 --> 00:14:59,920
microphone tense

00:14:56,800 --> 00:15:02,240
is that um you need to take certain

00:14:59,920 --> 00:15:02,959
decisions and i came up with this mental

00:15:02,240 --> 00:15:05,040
model

00:15:02,959 --> 00:15:06,639
solution that i call uh the microphone

00:15:05,040 --> 00:15:10,399
tense decisions framework

00:15:06,639 --> 00:15:13,360
that allows you to uh go for from

00:15:10,399 --> 00:15:14,959
through four stages and identify which

00:15:13,360 --> 00:15:17,199
architectural microphone tension

00:15:14,959 --> 00:15:18,079
you should pick for your specific

00:15:17,199 --> 00:15:21,279
project

00:15:18,079 --> 00:15:21,920
and that is um in my opinion um very

00:15:21,279 --> 00:15:24,720
helpful

00:15:21,920 --> 00:15:26,240
because often i see uh people that are

00:15:24,720 --> 00:15:27,440
comparing microphone tense or

00:15:26,240 --> 00:15:28,320
associating microphone tends to

00:15:27,440 --> 00:15:31,519
components

00:15:28,320 --> 00:15:34,720
or start to say oh but i can

00:15:31,519 --> 00:15:36,560
use uh microphone tense for me is just

00:15:34,720 --> 00:15:38,079
taking multiple components put together

00:15:36,560 --> 00:15:38,880
stitching together in a view and that's

00:15:38,079 --> 00:15:41,040
it

00:15:38,880 --> 00:15:42,959
slightly more complicated than that and

00:15:41,040 --> 00:15:44,720
let's see what i'm i'm talking about so

00:15:42,959 --> 00:15:46,639
the first stage of of the microphone

00:15:44,720 --> 00:15:48,240
decision framework is identify your

00:15:46,639 --> 00:15:50,720
microphone dance and

00:15:48,240 --> 00:15:51,759
how you identify the microphone pants is

00:15:50,720 --> 00:15:53,440
basically

00:15:51,759 --> 00:15:55,279
shaping the way how you structure your

00:15:53,440 --> 00:15:58,240
teams how your communication

00:15:55,279 --> 00:15:59,680
flow works inside your teams as well as

00:15:58,240 --> 00:16:02,639
how you're going to

00:15:59,680 --> 00:16:04,000
um define your technology choices that's

00:16:02,639 --> 00:16:07,360
very very important because

00:16:04,000 --> 00:16:09,199
um that the first decision is basically

00:16:07,360 --> 00:16:10,959
already shaping quite a few and

00:16:09,199 --> 00:16:12,959
filtering out quite a few options

00:16:10,959 --> 00:16:14,800
for you first one is identifying

00:16:12,959 --> 00:16:16,160
microphone 10. so as you can see in this

00:16:14,800 --> 00:16:18,000
one you can have what they call the

00:16:16,160 --> 00:16:18,480
horizontal split so multiple microphone

00:16:18,000 --> 00:16:21,759
bands

00:16:18,480 --> 00:16:22,399
in the same view or you can have uh

00:16:21,759 --> 00:16:24,160
let's say

00:16:22,399 --> 00:16:25,759
microphone tents that are a

00:16:24,160 --> 00:16:27,600
representation of of a

00:16:25,759 --> 00:16:29,759
single page application if you want or

00:16:27,600 --> 00:16:31,519
vertical slice of the the application

00:16:29,759 --> 00:16:33,759
because they represent a business domain

00:16:31,519 --> 00:16:36,000
but the thing that that characterized

00:16:33,759 --> 00:16:36,880
a microphone then over a component is

00:16:36,000 --> 00:16:38,720
with microphone tens

00:16:36,880 --> 00:16:40,399
you are trying to solve a business

00:16:38,720 --> 00:16:41,360
problem you're not trying to solve a

00:16:40,399 --> 00:16:42,720
technical problem

00:16:41,360 --> 00:16:44,800
and that's very very important because

00:16:42,720 --> 00:16:45,279
when you start to get your head around

00:16:44,800 --> 00:16:46,880
that

00:16:45,279 --> 00:16:48,839
you will start to understand the

00:16:46,880 --> 00:16:50,240
difference between microphone 10 and

00:16:48,839 --> 00:16:52,160
components

00:16:50,240 --> 00:16:53,680
so you can pick the vertical one so

00:16:52,160 --> 00:16:55,519
assigning multiple teams that are

00:16:53,680 --> 00:16:57,680
compositing a specific view

00:16:55,519 --> 00:16:59,440
and then you can have like instead one

00:16:57,680 --> 00:17:00,160
thing that is responsible for a vertical

00:16:59,440 --> 00:17:03,120
that could be

00:17:00,160 --> 00:17:03,759
either a single page or a single page

00:17:03,120 --> 00:17:07,280
application

00:17:03,759 --> 00:17:09,919
so both both kind the second

00:17:07,280 --> 00:17:11,760
and third decision you need to do is how

00:17:09,919 --> 00:17:13,600
you want to compose your microphone 10

00:17:11,760 --> 00:17:15,280
so you pick you want horizontal or

00:17:13,600 --> 00:17:16,799
vertical and then you say you need to

00:17:15,280 --> 00:17:18,640
understand how you want to compose them

00:17:16,799 --> 00:17:20,160
you want to compose them at client side

00:17:18,640 --> 00:17:21,919
you want to compose them at

00:17:20,160 --> 00:17:23,679
cdn level we want to compose at the

00:17:21,919 --> 00:17:25,760
origin side so server side

00:17:23,679 --> 00:17:27,199
and the other thing is how you route

00:17:25,760 --> 00:17:28,319
your microphone that so what where is

00:17:27,199 --> 00:17:30,320
the logic that says

00:17:28,319 --> 00:17:31,600
okay now i'm moving from this view to

00:17:30,320 --> 00:17:33,919
another view

00:17:31,600 --> 00:17:35,120
uh so let's start with the first one

00:17:33,919 --> 00:17:38,160
composition on

00:17:35,120 --> 00:17:40,400
uh a client side so the one on the

00:17:38,160 --> 00:17:41,679
right on the left of this of this slide

00:17:40,400 --> 00:17:43,360
so you can see that you can have kind of

00:17:41,679 --> 00:17:44,640
client-side composition so you can have

00:17:43,360 --> 00:17:46,400
multiple microphone tests that are

00:17:44,640 --> 00:17:48,080
living on origin could be either an

00:17:46,400 --> 00:17:49,039
application server that these service

00:17:48,080 --> 00:17:52,880
static files

00:17:49,039 --> 00:17:55,760
or in the most simple way it could be

00:17:52,880 --> 00:17:57,760
done on a s3 bucket or anything that

00:17:55,760 --> 00:17:59,280
allows you to store some static file

00:17:57,760 --> 00:18:00,880
and then maybe you have a cdn in front

00:17:59,280 --> 00:18:03,360
of it in order to

00:18:00,880 --> 00:18:04,320
create some um let's say replication

00:18:03,360 --> 00:18:05,840
across the the

00:18:04,320 --> 00:18:07,440
different point of presence that cdn

00:18:05,840 --> 00:18:10,160
network can have uh

00:18:07,440 --> 00:18:10,880
and and just have an orchestrator on the

00:18:10,160 --> 00:18:13,919
front end

00:18:10,880 --> 00:18:15,360
that is just retrieving for uh and

00:18:13,919 --> 00:18:17,200
and composing your microphone tents

00:18:15,360 --> 00:18:20,240
either they are a

00:18:17,200 --> 00:18:20,799
vertical split or horizontal space in

00:18:20,240 --> 00:18:23,039
that case

00:18:20,799 --> 00:18:24,480
where you're out you usually route at

00:18:23,039 --> 00:18:27,919
the client side level

00:18:24,480 --> 00:18:29,679
or or the origins or the origin level it

00:18:27,919 --> 00:18:31,600
really depends how you want to compose

00:18:29,679 --> 00:18:34,160
them uh second

00:18:31,600 --> 00:18:34,880
second way is uh edge side composition

00:18:34,160 --> 00:18:37,679
there is

00:18:34,880 --> 00:18:38,559
um edge side include that is a markup

00:18:37,679 --> 00:18:41,760
language um

00:18:38,559 --> 00:18:44,000
it's not let's say um probably uh

00:18:41,760 --> 00:18:44,880
super known like html but uh it's

00:18:44,000 --> 00:18:46,400
similar to it

00:18:44,880 --> 00:18:48,559
uh as a markup language that you can

00:18:46,400 --> 00:18:51,039
leverage at the cdn level or

00:18:48,559 --> 00:18:52,559
in specific um let's say reverse proxy

00:18:51,039 --> 00:18:53,280
like like varnish you can do that as

00:18:52,559 --> 00:18:56,160
well

00:18:53,280 --> 00:18:58,240
uh the interesting part is that you

00:18:56,160 --> 00:19:00,000
don't have to scale your origin

00:18:58,240 --> 00:19:01,919
uh you have like static files that are

00:19:00,000 --> 00:19:02,960
picked up by origin level and you

00:19:01,919 --> 00:19:04,720
describe your

00:19:02,960 --> 00:19:06,559
your composition of page so in this case

00:19:04,720 --> 00:19:08,160
for instance you normally have

00:19:06,559 --> 00:19:10,320
more and horizontal split so you have

00:19:08,160 --> 00:19:11,919
multiple components and you describe

00:19:10,320 --> 00:19:13,520
multiple sorry microphone tense and you

00:19:11,919 --> 00:19:15,039
describe how

00:19:13,520 --> 00:19:16,960
those microphone bands are stitched

00:19:15,039 --> 00:19:18,799
together in the view through this markup

00:19:16,960 --> 00:19:20,880
language what the cdn does

00:19:18,799 --> 00:19:22,000
is why pretend that you request a page

00:19:20,880 --> 00:19:24,480
it's the reading

00:19:22,000 --> 00:19:25,440
the is parsing the markup language and

00:19:24,480 --> 00:19:27,360
substituting

00:19:25,440 --> 00:19:28,559
every markup language with a specific

00:19:27,360 --> 00:19:30,160
microphone with a concrete

00:19:28,559 --> 00:19:33,360
implementation of a microphone depth

00:19:30,160 --> 00:19:33,919
that is a way and the routing um on edge

00:19:33,360 --> 00:19:36,160
side

00:19:33,919 --> 00:19:37,360
edge side composition is happening on

00:19:36,160 --> 00:19:39,840
the edge

00:19:37,360 --> 00:19:40,960
the final way that probably is the the

00:19:39,840 --> 00:19:44,240
one that you have

00:19:40,960 --> 00:19:46,240
uh the most controlled way uh and is

00:19:44,240 --> 00:19:47,360
when you do composition and routing at

00:19:46,240 --> 00:19:48,960
origin level

00:19:47,360 --> 00:19:50,559
that's a very very interesting one

00:19:48,960 --> 00:19:53,120
because basically uh

00:19:50,559 --> 00:19:54,320
you can um you can do either horizontal

00:19:53,120 --> 00:19:56,320
or vertical split but

00:19:54,320 --> 00:19:57,760
usually when you do server side

00:19:56,320 --> 00:20:00,000
composition you do

00:19:57,760 --> 00:20:00,960
a horizontal split so you have multiple

00:20:00,000 --> 00:20:04,000
pieces that are

00:20:00,960 --> 00:20:07,440
stitched together at runtime um

00:20:04,000 --> 00:20:08,080
or are pre let's say stitch together and

00:20:07,440 --> 00:20:10,480
then

00:20:08,080 --> 00:20:11,679
compose and store at the cdn level so

00:20:10,480 --> 00:20:13,360
there are different

00:20:11,679 --> 00:20:14,960
let's say flavor of this implementation

00:20:13,360 --> 00:20:16,880
you can see for instance

00:20:14,960 --> 00:20:18,080
open components is one flavor that is

00:20:16,880 --> 00:20:20,080
composing everything

00:20:18,080 --> 00:20:22,159
and you have this runtime agent that are

00:20:20,080 --> 00:20:23,280
composing and showing everything on the

00:20:22,159 --> 00:20:26,159
cdn because they're

00:20:23,280 --> 00:20:26,640
very static and is used by a sky scanner

00:20:26,159 --> 00:20:28,559
or

00:20:26,640 --> 00:20:30,000
opentable but there are other

00:20:28,559 --> 00:20:31,840
implementations that instead are

00:20:30,000 --> 00:20:34,400
stitching everything together at runtime

00:20:31,840 --> 00:20:37,039
they're using the cdna with the

00:20:34,400 --> 00:20:37,919
lower ttl and therefore they are just

00:20:37,039 --> 00:20:40,320
absorbing

00:20:37,919 --> 00:20:41,520
that the high traffic at the cdn level

00:20:40,320 --> 00:20:43,360
but there are some calls that are

00:20:41,520 --> 00:20:44,960
happening and heating origin

00:20:43,360 --> 00:20:46,720
at runtime and at that stage what's

00:20:44,960 --> 00:20:48,640
happening in application server

00:20:46,720 --> 00:20:49,840
is composing different parts different

00:20:48,640 --> 00:20:51,520
microphones together

00:20:49,840 --> 00:20:53,039
and they compose the final view and they

00:20:51,520 --> 00:20:56,320
serve everything to

00:20:53,039 --> 00:20:58,640
uh the the the clients and and

00:20:56,320 --> 00:20:59,440
there is no right or wrong here there

00:20:58,640 --> 00:21:01,600
are let's say

00:20:59,440 --> 00:21:03,440
different let's say solution for

00:21:01,600 --> 00:21:05,440
different um

00:21:03,440 --> 00:21:06,480
challenges and context that you operate

00:21:05,440 --> 00:21:08,240
so don't

00:21:06,480 --> 00:21:09,520
be fooled and think oh this is the right

00:21:08,240 --> 00:21:12,159
one this is the wrong one

00:21:09,520 --> 00:21:12,880
the context define what is the best

00:21:12,159 --> 00:21:14,400
trade-off

00:21:12,880 --> 00:21:16,240
because there isn't perfect option

00:21:14,400 --> 00:21:19,039
either in architecture

00:21:16,240 --> 00:21:20,400
for uh picking up the the best trade-off

00:21:19,039 --> 00:21:22,000
of your architecture

00:21:20,400 --> 00:21:23,840
the last thing that you need to bear in

00:21:22,000 --> 00:21:25,919
mind in the um

00:21:23,840 --> 00:21:27,520
uh microsoft test decisions framework is

00:21:25,919 --> 00:21:30,000
how you are going to communicate

00:21:27,520 --> 00:21:31,600
so usually uh you have when you have

00:21:30,000 --> 00:21:32,080
multiple microphone tanks in the same

00:21:31,600 --> 00:21:33,919
view

00:21:32,080 --> 00:21:35,120
you need to figure out the way uh

00:21:33,919 --> 00:21:36,080
because sooner rather than later you

00:21:35,120 --> 00:21:38,720
need to do that

00:21:36,080 --> 00:21:39,520
how the microphones are composed are

00:21:38,720 --> 00:21:41,679
communicating

00:21:39,520 --> 00:21:43,520
in the same view could be that for

00:21:41,679 --> 00:21:46,400
instance you use an event emitter

00:21:43,520 --> 00:21:48,000
so you inject an event emitter from the

00:21:46,400 --> 00:21:48,799
host application that is containing

00:21:48,000 --> 00:21:50,880
everything

00:21:48,799 --> 00:21:52,000
and you you inject this event into

00:21:50,880 --> 00:21:53,360
instance in every

00:21:52,000 --> 00:21:55,679
single microphone pan so they can

00:21:53,360 --> 00:21:57,440
communicate for events or either you can

00:21:55,679 --> 00:22:00,159
use what they call the custom events

00:21:57,440 --> 00:22:02,240
these uh available standard javascript

00:22:00,159 --> 00:22:05,120
apis that you can

00:22:02,240 --> 00:22:05,919
use for communicating between between

00:22:05,120 --> 00:22:07,520
components

00:22:05,919 --> 00:22:09,440
in that case you don't inject anything

00:22:07,520 --> 00:22:11,600
you rely on the fact that there is

00:22:09,440 --> 00:22:13,039
you listen for any event that is

00:22:11,600 --> 00:22:15,120
happening in the window object

00:22:13,039 --> 00:22:16,240
and you do window dot add even listener

00:22:15,120 --> 00:22:18,480
to a custom event

00:22:16,240 --> 00:22:20,000
and uh the microphone 10 basically that

00:22:18,480 --> 00:22:23,360
is interested in a specific event

00:22:20,000 --> 00:22:24,880
will uh um call the callback that is

00:22:23,360 --> 00:22:25,679
associated with that specific event

00:22:24,880 --> 00:22:28,960
inside

00:22:25,679 --> 00:22:29,919
your your logic uh the this is like when

00:22:28,960 --> 00:22:31,360
you have multiple

00:22:29,919 --> 00:22:33,280
microphone times in the same view when

00:22:31,360 --> 00:22:35,360
you don't have that that situation

00:22:33,280 --> 00:22:36,799
or when you want to communicate across

00:22:35,360 --> 00:22:39,760
views you can use

00:22:36,799 --> 00:22:41,360
either uh the web storage like um

00:22:39,760 --> 00:22:44,159
session storage or local storage

00:22:41,360 --> 00:22:45,440
or you can use query strings uh or even

00:22:44,159 --> 00:22:47,440
a back-end api

00:22:45,440 --> 00:22:48,799
a classic example that you can find is

00:22:47,440 --> 00:22:50,799
for instance

00:22:48,799 --> 00:22:51,919
you have like an e-commerce with all the

00:22:50,799 --> 00:22:53,600
catalog

00:22:51,919 --> 00:22:55,039
and with all the products the user click

00:22:53,600 --> 00:22:57,280
uh a specific

00:22:55,039 --> 00:22:58,720
element and you pass in query string the

00:22:57,280 --> 00:22:59,280
specific id of the element that was

00:22:58,720 --> 00:23:02,400
clicked

00:22:59,280 --> 00:23:04,559
from there the uh new microphone 10 is

00:23:02,400 --> 00:23:06,080
uh retrieving from query string id and

00:23:04,559 --> 00:23:07,520
requesting to the back end

00:23:06,080 --> 00:23:09,200
all the information that is needed in

00:23:07,520 --> 00:23:09,919
order to populate the microphone so

00:23:09,200 --> 00:23:12,880
those are

00:23:09,919 --> 00:23:14,159
different ways how you can communicate

00:23:12,880 --> 00:23:16,159
in different situations

00:23:14,159 --> 00:23:17,440
but again when you nail those four

00:23:16,159 --> 00:23:19,840
decision

00:23:17,440 --> 00:23:22,080
you basically filter out all the

00:23:19,840 --> 00:23:23,600
complexity and all the other things and

00:23:22,080 --> 00:23:26,640
how you do you are doing

00:23:23,600 --> 00:23:28,720
uh for instance uh your designs how you

00:23:26,640 --> 00:23:30,799
design your design system how you define

00:23:28,720 --> 00:23:32,240
your design system how you define the

00:23:30,799 --> 00:23:35,280
communication across teams

00:23:32,240 --> 00:23:38,320
how you define uh the different

00:23:35,280 --> 00:23:41,520
aspects of building an application are

00:23:38,320 --> 00:23:42,000
um let's say more are clearer more clear

00:23:41,520 --> 00:23:44,159
in your

00:23:42,000 --> 00:23:46,159
mind and also your organization because

00:23:44,159 --> 00:23:46,640
those four key decisions will drive a

00:23:46,159 --> 00:23:48,720
lot

00:23:46,640 --> 00:23:50,320
we'll just create a nice canvas that

00:23:48,720 --> 00:23:53,200
will allow you to

00:23:50,320 --> 00:23:54,640
go and iterate through in order to fill

00:23:53,200 --> 00:23:56,480
up all the other

00:23:54,640 --> 00:23:59,440
technical decision and organizational

00:23:56,480 --> 00:23:59,440
decision that you need to make

00:23:59,520 --> 00:24:03,039
there are many companies that are using

00:24:01,200 --> 00:24:05,279
microphone tense currently i just want

00:24:03,039 --> 00:24:06,000
to highlight a few approaches that you

00:24:05,279 --> 00:24:07,840
can have

00:24:06,000 --> 00:24:09,360
like for instance in the zone that is

00:24:07,840 --> 00:24:10,880
the company i'm working for we are using

00:24:09,360 --> 00:24:12,159
a custom implementation we are going to

00:24:10,880 --> 00:24:14,880
see in a moment this

00:24:12,159 --> 00:24:16,799
um opentable is using open component

00:24:14,880 --> 00:24:18,559
it's open source so if you look for open

00:24:16,799 --> 00:24:21,039
component you can find a lot there

00:24:18,559 --> 00:24:22,320
zalando is calling is you before was

00:24:21,039 --> 00:24:25,600
using the mosaic

00:24:22,320 --> 00:24:27,360
uh and especially taylor js that was an

00:24:25,600 --> 00:24:29,440
open source framer that they released

00:24:27,360 --> 00:24:30,640
they're not using that anymore uh

00:24:29,440 --> 00:24:33,440
currently in their

00:24:30,640 --> 00:24:34,640
website they are discussing about this

00:24:33,440 --> 00:24:35,360
interface framework that is the

00:24:34,640 --> 00:24:39,200
evolution

00:24:35,360 --> 00:24:41,279
of mosaic 9 and

00:24:39,200 --> 00:24:42,720
and taylor.js it's not open source in

00:24:41,279 --> 00:24:44,880
this case they

00:24:42,720 --> 00:24:47,600
they made certain different decisions i

00:24:44,880 --> 00:24:50,480
think taylor.js is um

00:24:47,600 --> 00:24:51,760
very open and is not working for with a

00:24:50,480 --> 00:24:54,880
specific framework and work

00:24:51,760 --> 00:24:55,840
with any ui framework uh in interface

00:24:54,880 --> 00:24:58,400
framework is that they

00:24:55,840 --> 00:25:00,720
they took an opinionated way using

00:24:58,400 --> 00:25:03,919
graphql and react components

00:25:00,720 --> 00:25:05,600
for react sorry for uh creating their

00:25:03,919 --> 00:25:07,360
their microphone

00:25:05,600 --> 00:25:08,960
ikea for their catalog they're using

00:25:07,360 --> 00:25:12,159
edge side include that is uh

00:25:08,960 --> 00:25:14,400
the cdn approached where and they're

00:25:12,159 --> 00:25:16,080
using that in combination with another

00:25:14,400 --> 00:25:16,640
technique that is called client-side

00:25:16,080 --> 00:25:18,799
include

00:25:16,640 --> 00:25:20,000
where there is a transclusion between

00:25:18,799 --> 00:25:21,919
elements so there is a

00:25:20,000 --> 00:25:23,760
placeholder that is substitute uh

00:25:21,919 --> 00:25:24,799
substitute with real comp with the real

00:25:23,760 --> 00:25:26,720
microphone fans

00:25:24,799 --> 00:25:27,840
uh that is another interesting approach

00:25:26,720 --> 00:25:30,320
and finally

00:25:27,840 --> 00:25:31,760
spotify on the desktop application only

00:25:30,320 --> 00:25:34,880
is using iframes

00:25:31,760 --> 00:25:35,520
uh and and that is a composition of

00:25:34,880 --> 00:25:37,440
multiple

00:25:35,520 --> 00:25:39,760
uh iframes inside the same view they

00:25:37,440 --> 00:25:42,799
move the way of using iframes on web

00:25:39,760 --> 00:25:44,480
for uh clear problems that could happen

00:25:42,799 --> 00:25:46,320
uh when you have iframes so if you have

00:25:44,480 --> 00:25:47,600
like five different as if you have the

00:25:46,320 --> 00:25:49,279
same framework or different

00:25:47,600 --> 00:25:51,440
let's say libraries you cannot share

00:25:49,279 --> 00:25:52,400
them across iframes so you need to

00:25:51,440 --> 00:25:56,159
reload them

00:25:52,400 --> 00:25:58,159
so for web it wasn't for a b2c um

00:25:56,159 --> 00:25:59,840
let's say application the wisest choice

00:25:58,159 --> 00:26:00,400
either for desktop makes sense because

00:25:59,840 --> 00:26:03,440
everything is

00:26:00,400 --> 00:26:05,600
is inside your package also for b2b

00:26:03,440 --> 00:26:07,120
application there is a sub that is using

00:26:05,600 --> 00:26:09,039
iframes in their

00:26:07,120 --> 00:26:10,159
microphone dance framework called luigi

00:26:09,039 --> 00:26:11,919
framework

00:26:10,159 --> 00:26:13,600
and there they are using that because in

00:26:11,919 --> 00:26:15,440
reality iframes are solving

00:26:13,600 --> 00:26:16,640
quite a few uh problems like memory

00:26:15,440 --> 00:26:19,200
issues and other things

00:26:16,640 --> 00:26:19,919
and if you use wisely in a b2b

00:26:19,200 --> 00:26:21,440
environment where

00:26:19,919 --> 00:26:23,679
you can control for instance think about

00:26:21,440 --> 00:26:25,679
sub they can control the browser that

00:26:23,679 --> 00:26:27,520
are used by the user they can control

00:26:25,679 --> 00:26:29,919
how many users are are using that

00:26:27,520 --> 00:26:33,120
specific b2b application so it's

00:26:29,919 --> 00:26:34,000
a very uh let's say self-contained and

00:26:33,120 --> 00:26:37,120
isolated

00:26:34,000 --> 00:26:38,559
use case where iframes may work without

00:26:37,120 --> 00:26:40,720
too many uh burden

00:26:38,559 --> 00:26:42,640
obviously if they need to use if they

00:26:40,720 --> 00:26:46,640
are let's say go was having

00:26:42,640 --> 00:26:48,960
a full seo and a b2b a b2c application

00:26:46,640 --> 00:26:50,880
probably i would say it's not the wisest

00:26:48,960 --> 00:26:54,320
choice ever but in certain occasion

00:26:50,880 --> 00:26:55,039
may max make sense so what we have done

00:26:54,320 --> 00:26:57,279
in the zone

00:26:55,039 --> 00:26:58,320
um the zone if you don't know what it is

00:26:57,279 --> 00:26:59,919
is a

00:26:58,320 --> 00:27:01,520
multi-device experience is an ott

00:26:59,919 --> 00:27:03,840
platform think about netflix

00:27:01,520 --> 00:27:05,600
but for sports we are currently

00:27:03,840 --> 00:27:08,720
targeting on on the front end

00:27:05,600 --> 00:27:12,080
roughly 40 different devices between uh

00:27:08,720 --> 00:27:16,159
sato boxes console uh web mobile

00:27:12,080 --> 00:27:18,720
and smart tvs so quite a few on uh

00:27:16,159 --> 00:27:20,320
mobile we're using native languages so

00:27:18,720 --> 00:27:23,679
kotlin for android and

00:27:20,320 --> 00:27:25,200
and swift for ios same for apple tv

00:27:23,679 --> 00:27:26,799
but for all the other devices we're

00:27:25,200 --> 00:27:30,080
using html5 and

00:27:26,799 --> 00:27:30,720
and javascript so there our microphone

00:27:30,080 --> 00:27:32,640
that's our

00:27:30,720 --> 00:27:34,559
application helped a lot especially for

00:27:32,640 --> 00:27:37,919
tvs when you have like a very

00:27:34,559 --> 00:27:38,720
low power uh device that uh is usually

00:27:37,919 --> 00:27:40,480
is pretty old

00:27:38,720 --> 00:27:41,840
because the penetration of tvs usually

00:27:40,480 --> 00:27:43,279
you deal with devices that are i don't

00:27:41,840 --> 00:27:46,720
know from

00:27:43,279 --> 00:27:48,799
at four five years old if not ten years

00:27:46,720 --> 00:27:50,240
old so that that kind of devices

00:27:48,799 --> 00:27:52,240
power wise they're not let's say a

00:27:50,240 --> 00:27:54,399
macbook pro with the quad cores so

00:27:52,240 --> 00:27:56,559
uh the memory footprint is very is very

00:27:54,399 --> 00:27:58,880
small so usually using

00:27:56,559 --> 00:28:01,600
a wide architectural choices would help

00:27:58,880 --> 00:28:04,080
to have better performances

00:28:01,600 --> 00:28:05,919
um what we have done in the zone uh i

00:28:04,080 --> 00:28:06,399
remember when i when i joined it was uh

00:28:05,919 --> 00:28:07,919
uh

00:28:06,399 --> 00:28:09,840
four uh five years ago we started the

00:28:07,919 --> 00:28:11,279
project four years aft uh sorry one year

00:28:09,840 --> 00:28:14,480
after i joined the zone

00:28:11,279 --> 00:28:16,720
uh and uh uh what happened uh is i was

00:28:14,480 --> 00:28:18,640
the second person in the tech department

00:28:16,720 --> 00:28:19,840
and the cto one day came to me and said

00:28:18,640 --> 00:28:22,000
listen luca bear in mind

00:28:19,840 --> 00:28:23,919
we want to grow this company very

00:28:22,000 --> 00:28:25,120
quickly with hundreds of developers

00:28:23,919 --> 00:28:26,799
and that was the second person so

00:28:25,120 --> 00:28:27,279
imagine that the difficulties on

00:28:26,799 --> 00:28:29,440
thinking

00:28:27,279 --> 00:28:31,200
how i can create something that would

00:28:29,440 --> 00:28:32,240
allow us to scale not only on the

00:28:31,200 --> 00:28:35,120
technical side

00:28:32,240 --> 00:28:35,520
but also on on the communication flow

00:28:35,120 --> 00:28:38,320
and

00:28:35,520 --> 00:28:40,240
uh it was right so we moved from roughly

00:28:38,320 --> 00:28:44,640
50 people in uh

00:28:40,240 --> 00:28:45,840
2015 uh to over 3 000 in uh 2020 so in

00:28:44,640 --> 00:28:47,840
five years we move from

00:28:45,840 --> 00:28:49,440
we have this blitz scaling growth

00:28:47,840 --> 00:28:49,840
obviously not all of them are engineers

00:28:49,440 --> 00:28:52,480
we have

00:28:49,840 --> 00:28:54,480
roughly 400 people uh in uh in the

00:28:52,480 --> 00:28:54,880
engineering department but still quite a

00:28:54,480 --> 00:28:57,600
lot

00:28:54,880 --> 00:28:58,399
moving from this small amount to all

00:28:57,600 --> 00:29:02,240
these people

00:28:58,399 --> 00:29:03,919
internal developers um so

00:29:02,240 --> 00:29:05,760
what what i did in order to start this

00:29:03,919 --> 00:29:07,760
this project to kick off this project i

00:29:05,760 --> 00:29:09,279
i started with data so first thing i

00:29:07,760 --> 00:29:12,720
started to understand

00:29:09,279 --> 00:29:13,520
really how our users were um using our

00:29:12,720 --> 00:29:15,679
application

00:29:13,520 --> 00:29:17,279
what i discovered is that there were

00:29:15,679 --> 00:29:19,279
some interesting patterns

00:29:17,279 --> 00:29:20,960
i i just checked usually uh google

00:29:19,279 --> 00:29:21,760
google analytics in that case of what we

00:29:20,960 --> 00:29:23,760
were what we

00:29:21,760 --> 00:29:25,200
we are using for for this kind of data

00:29:23,760 --> 00:29:26,080
and engage with the product team in

00:29:25,200 --> 00:29:28,159
order to understand

00:29:26,080 --> 00:29:29,679
that the user flows and looking at the

00:29:28,159 --> 00:29:31,039
data especially i

00:29:29,679 --> 00:29:32,960
was quite surprised so the first

00:29:31,039 --> 00:29:35,120
characteristic we i discovered that

00:29:32,960 --> 00:29:37,279
um the user we had like millions of

00:29:35,120 --> 00:29:39,360
users per day that hit the landing page

00:29:37,279 --> 00:29:40,720
but they don't they part of them they

00:29:39,360 --> 00:29:42,399
didn't move forward

00:29:40,720 --> 00:29:43,919
so it means that on landing page they

00:29:42,399 --> 00:29:44,640
load like the entire single page

00:29:43,919 --> 00:29:46,559
application

00:29:44,640 --> 00:29:48,159
with the sdk for for payment the credit

00:29:46,559 --> 00:29:50,320
card everything and then

00:29:48,159 --> 00:29:51,360
after loading uh the landing page they

00:29:50,320 --> 00:29:54,159
just leave

00:29:51,360 --> 00:29:55,279
the website not a proper nice experience

00:29:54,159 --> 00:29:56,000
if you think about the single page

00:29:55,279 --> 00:29:59,360
application

00:29:56,000 --> 00:30:00,799
then we have uh another let's say 70

00:29:59,360 --> 00:30:02,880
that move forward and they go to the

00:30:00,799 --> 00:30:03,760
authentication phase but also there

00:30:02,880 --> 00:30:05,600
there was a drop

00:30:03,760 --> 00:30:07,279
and what i noticed is that there was a

00:30:05,600 --> 00:30:10,320
pattern in our case where

00:30:07,279 --> 00:30:11,600
the user was uh let's say click on the

00:30:10,320 --> 00:30:14,080
sign up process

00:30:11,600 --> 00:30:15,600
and in the sign up process they started

00:30:14,080 --> 00:30:17,120
to understand that uh

00:30:15,600 --> 00:30:18,399
the different payment methods they

00:30:17,120 --> 00:30:20,159
didn't find the payment method that they

00:30:18,399 --> 00:30:22,320
wanted and they basically

00:30:20,159 --> 00:30:23,679
create a partial user so they just have

00:30:22,320 --> 00:30:25,279
a partial sign up

00:30:23,679 --> 00:30:26,240
um but they didn't subscribe to the

00:30:25,279 --> 00:30:26,960
event and then they dropped the

00:30:26,240 --> 00:30:29,039
application

00:30:26,960 --> 00:30:30,799
so up to now we already seen two use

00:30:29,039 --> 00:30:32,480
cases user that wants to go

00:30:30,799 --> 00:30:34,240
on landing page only to understand what

00:30:32,480 --> 00:30:36,559
the product is and live

00:30:34,240 --> 00:30:38,159
users that are interested on the project

00:30:36,559 --> 00:30:39,600
and they start to engage with the sign

00:30:38,159 --> 00:30:40,960
up but they didn't find what they were

00:30:39,600 --> 00:30:42,640
looking for on premium methods

00:30:40,960 --> 00:30:44,559
and they leave and finally we have the

00:30:42,640 --> 00:30:45,440
third type of user that finalize the

00:30:44,559 --> 00:30:47,279
signup funnel

00:30:45,440 --> 00:30:48,960
they go on the discovery and so they

00:30:47,279 --> 00:30:51,279
subscribe and they go to the catalog

00:30:48,960 --> 00:30:52,640
page and what we notice is when you are

00:30:51,279 --> 00:30:55,120
in the catalog page

00:30:52,640 --> 00:30:56,480
not many users left that area so they

00:30:55,120 --> 00:30:58,320
remain inside

00:30:56,480 --> 00:31:00,399
the catalog for watching content and

00:30:58,320 --> 00:31:02,399
that was across all the devices

00:31:00,399 --> 00:31:04,000
very very interesting pattern so

00:31:02,399 --> 00:31:06,000
basically what we discover is that

00:31:04,000 --> 00:31:07,840
when you are an existing user and you

00:31:06,000 --> 00:31:10,679
sign in in another device

00:31:07,840 --> 00:31:12,399
you remain in the authenticated area for

00:31:10,679 --> 00:31:15,039
99 of the time

00:31:12,399 --> 00:31:16,720
you don't leave that and that means

00:31:15,039 --> 00:31:17,279
before with the single page application

00:31:16,720 --> 00:31:19,200
we were

00:31:17,279 --> 00:31:20,320
downloading all the sdk and all the

00:31:19,200 --> 00:31:22,240
other burden that

00:31:20,320 --> 00:31:23,360
we're not using really on the

00:31:22,240 --> 00:31:25,360
authentication

00:31:23,360 --> 00:31:27,120
on the authenticated area so that was

00:31:25,360 --> 00:31:28,640
very interesting and discovery the

00:31:27,120 --> 00:31:31,279
pattern on how our users

00:31:28,640 --> 00:31:32,159
were using was very very interesting

00:31:31,279 --> 00:31:34,720
then i was

00:31:32,159 --> 00:31:36,399
able to map those domains uh and

00:31:34,720 --> 00:31:37,200
microphone dance towards our back end

00:31:36,399 --> 00:31:38,480
but that is

00:31:37,200 --> 00:31:40,240
another story that we're not going to

00:31:38,480 --> 00:31:40,960
cover uh today but it's it's a very

00:31:40,240 --> 00:31:43,279
interesting

00:31:40,960 --> 00:31:45,360
approach understanding how uh to to

00:31:43,279 --> 00:31:48,640
let's say describe your context

00:31:45,360 --> 00:31:52,000
and your domains following user

00:31:48,640 --> 00:31:54,080
in say user user flows

00:31:52,000 --> 00:31:56,240
um then we have a customer support in my

00:31:54,080 --> 00:31:58,320
account so every single box that you see

00:31:56,240 --> 00:31:59,919
here is a microphone 10 for us

00:31:58,320 --> 00:32:02,080
and we needed something to work straight

00:31:59,919 --> 00:32:03,919
everything so how we can migrate from

00:32:02,080 --> 00:32:05,760
landing page to authentication

00:32:03,919 --> 00:32:07,039
what we created is like a tiny layer

00:32:05,760 --> 00:32:09,519
called bootstrap that is

00:32:07,039 --> 00:32:10,640
available for the entire user session on

00:32:09,519 --> 00:32:11,519
any device that we use in this

00:32:10,640 --> 00:32:13,919
architecture

00:32:11,519 --> 00:32:15,200
so basically you you type the zone.com

00:32:13,919 --> 00:32:16,399
you load the bootstrap and then the

00:32:15,200 --> 00:32:17,919
bootstrap does

00:32:16,399 --> 00:32:19,440
a certain magic that we are going to

00:32:17,919 --> 00:32:21,120
discover in the next few slides

00:32:19,440 --> 00:32:22,880
and then is loading a specific

00:32:21,120 --> 00:32:24,320
microphone 10 based on some logic that

00:32:22,880 --> 00:32:25,760
is baked inside the bootstrap

00:32:24,320 --> 00:32:27,600
obviously there is logic that is coming

00:32:25,760 --> 00:32:30,159
out from the back end but in this case

00:32:27,600 --> 00:32:31,760
the bootstrap has some logic that uh

00:32:30,159 --> 00:32:35,039
allows us to route

00:32:31,760 --> 00:32:36,640
across multiple microphone depth

00:32:35,039 --> 00:32:37,919
so let's define what the microphone 10

00:32:36,640 --> 00:32:38,480
is for us so a microphone then

00:32:37,919 --> 00:32:40,480
represents

00:32:38,480 --> 00:32:41,679
a business subdomain as i described

00:32:40,480 --> 00:32:42,799
before in in the description of

00:32:41,679 --> 00:32:44,480
microphone time

00:32:42,799 --> 00:32:46,799
is technology and framework agnostic

00:32:44,480 --> 00:32:48,960
what it means is we can use

00:32:46,799 --> 00:32:50,159
any technology that we want for every

00:32:48,960 --> 00:32:51,840
microphone then

00:32:50,159 --> 00:32:53,039
and they give you and i can tell you

00:32:51,840 --> 00:32:53,600
that it doesn't mean that we need to

00:32:53,039 --> 00:32:55,440
have

00:32:53,600 --> 00:32:56,799
multiple framework in the same

00:32:55,440 --> 00:32:59,840
application in fact

00:32:56,799 --> 00:33:01,440
um in our case funny enough i provided

00:32:59,840 --> 00:33:02,240
this this possibility to go with any

00:33:01,440 --> 00:33:04,159
technology

00:33:02,240 --> 00:33:06,559
everything picked the same combination

00:33:04,159 --> 00:33:08,880
so react and mobx in our case

00:33:06,559 --> 00:33:11,440
but the funny part is we were able to

00:33:08,880 --> 00:33:15,200
update certain part of the application

00:33:11,440 --> 00:33:18,159
with new um let's say framework

00:33:15,200 --> 00:33:18,559
versions uh faster than others and no

00:33:18,159 --> 00:33:20,880
one

00:33:18,559 --> 00:33:22,399
has to coordinate all the effort to make

00:33:20,880 --> 00:33:24,799
sure that all the features

00:33:22,399 --> 00:33:25,440
were up and running in all the different

00:33:24,799 --> 00:33:27,519
uh

00:33:25,440 --> 00:33:29,039
devices because as you can imagine when

00:33:27,519 --> 00:33:31,519
you have just web is one thing

00:33:29,039 --> 00:33:32,799
but the effort of having uh these on

00:33:31,519 --> 00:33:36,399
multiple devices could be

00:33:32,799 --> 00:33:38,720
quite big um and then um

00:33:36,399 --> 00:33:40,159
we we have microphotos autonomous so we

00:33:38,720 --> 00:33:42,960
can deploy independently

00:33:40,159 --> 00:33:44,080
every microphone 10 is owned by a team

00:33:42,960 --> 00:33:46,640
and can share components

00:33:44,080 --> 00:33:48,320
inside the microphone band itself uh

00:33:46,640 --> 00:33:50,480
they have their own independence

00:33:48,320 --> 00:33:52,080
built-in system so the company provides

00:33:50,480 --> 00:33:54,880
some tools for doing that but

00:33:52,080 --> 00:33:56,720
what is written inside the building

00:33:54,880 --> 00:33:58,159
pipeline is done by the the developers

00:33:56,720 --> 00:33:59,600
that are owning my frontend

00:33:58,159 --> 00:34:00,960
we always load we have a relation

00:33:59,600 --> 00:34:03,039
between booster by microphone and this

00:34:00,960 --> 00:34:04,880
one to one so one microphone 10

00:34:03,039 --> 00:34:06,640
per time is loaded and we don't have

00:34:04,880 --> 00:34:09,280
multiple microphones so that

00:34:06,640 --> 00:34:10,639
fade out the complexity of uh css

00:34:09,280 --> 00:34:12,800
clashing or

00:34:10,639 --> 00:34:14,480
uh dependency clashing and other stuff

00:34:12,800 --> 00:34:16,159
so it's everything fade out

00:34:14,480 --> 00:34:18,079
and the ownership is one teamwork

00:34:16,159 --> 00:34:19,679
microphone

00:34:18,079 --> 00:34:22,000
technically speaking our microphone 10

00:34:19,679 --> 00:34:24,879
has an entry point an html page

00:34:22,000 --> 00:34:27,040
and we have then a business logic uh

00:34:24,879 --> 00:34:28,240
javascript file a vendor javascript file

00:34:27,040 --> 00:34:31,200
and some css

00:34:28,240 --> 00:34:33,520
why an html page because what we can do

00:34:31,200 --> 00:34:36,639
in our system is we can decide

00:34:33,520 --> 00:34:38,240
at compile time if we want to serve a

00:34:36,639 --> 00:34:40,960
side render

00:34:38,240 --> 00:34:41,919
part of the skeleton of the ui and

00:34:40,960 --> 00:34:44,159
therefore

00:34:41,919 --> 00:34:46,000
being able to display the content

00:34:44,159 --> 00:34:48,079
immediately to the user meanwhile we are

00:34:46,000 --> 00:34:50,159
loading the javascript file in css that

00:34:48,079 --> 00:34:50,639
is a nice feature because especially on

00:34:50,159 --> 00:34:52,399
tv

00:34:50,639 --> 00:34:54,079
it provides a very snappy experience for

00:34:52,399 --> 00:34:57,599
the users because we can

00:34:54,079 --> 00:34:59,200
immediately start to let's say render

00:34:57,599 --> 00:35:01,520
something mean while we are loading

00:34:59,200 --> 00:35:02,240
a specific content bootstrap is

00:35:01,520 --> 00:35:05,359
responsible

00:35:02,240 --> 00:35:07,119
for to four key uh actions so the

00:35:05,359 --> 00:35:08,800
application startup that is common for

00:35:07,119 --> 00:35:11,119
all the microphone then so understanding

00:35:08,800 --> 00:35:12,720
which country the user is which device

00:35:11,119 --> 00:35:14,400
uh the configuration for that specific

00:35:12,720 --> 00:35:17,440
device and country and so on

00:35:14,400 --> 00:35:20,320
input out of operation for the uh device

00:35:17,440 --> 00:35:20,800
so basically every tv may or may not

00:35:20,320 --> 00:35:23,920
have

00:35:20,800 --> 00:35:27,200
local storage available and therefore we

00:35:23,920 --> 00:35:28,720
can let's say have different uh ways to

00:35:27,200 --> 00:35:29,359
interact with opera the input of the

00:35:28,720 --> 00:35:30,880
operation

00:35:29,359 --> 00:35:32,560
so we in the bootstrap we have this

00:35:30,880 --> 00:35:34,240
logic that is wrapped per

00:35:32,560 --> 00:35:35,839
device but the microphones are

00:35:34,240 --> 00:35:36,640
completely unaware so the booster what

00:35:35,839 --> 00:35:38,640
exposes

00:35:36,640 --> 00:35:40,880
an api for every microphone tends to

00:35:38,640 --> 00:35:42,640
write and retrieve information from

00:35:40,880 --> 00:35:44,240
the persistent layer that we have in

00:35:42,640 --> 00:35:45,680
every device we can

00:35:44,240 --> 00:35:47,359
the booster is responsible also for

00:35:45,680 --> 00:35:48,320
route between microphone 10 so decide

00:35:47,359 --> 00:35:50,400
that in a specific

00:35:48,320 --> 00:35:52,079
route it will load one microphone or

00:35:50,400 --> 00:35:53,839
another one and also sharing

00:35:52,079 --> 00:35:55,760
configuration big classic

00:35:53,839 --> 00:35:57,520
when someone is not authenticated and is

00:35:55,760 --> 00:36:00,079
going to the in the

00:35:57,520 --> 00:36:00,880
in microphone time can authenticate the

00:36:00,079 --> 00:36:03,440
microphone 10

00:36:00,880 --> 00:36:05,119
is responsible for consuming the api for

00:36:03,440 --> 00:36:08,160
retrieving a jwt token

00:36:05,119 --> 00:36:08,880
and then pass this restore this this jwt

00:36:08,160 --> 00:36:10,560
token

00:36:08,880 --> 00:36:12,720
inside the local storage through the

00:36:10,560 --> 00:36:14,320
bootstrap and bootstrap will load at

00:36:12,720 --> 00:36:15,839
that stage a new microphone tank this is

00:36:14,320 --> 00:36:18,079
the authenticating microphone fan

00:36:15,839 --> 00:36:19,760
so retrieving the uh the new microphone

00:36:18,079 --> 00:36:20,240
then is retrieving immediately the jwt

00:36:19,760 --> 00:36:22,800
token

00:36:20,240 --> 00:36:24,079
and make sure that the bluetooth is gwt

00:36:22,800 --> 00:36:25,359
token is still valid but

00:36:24,079 --> 00:36:26,800
always through the bootstrap so the

00:36:25,359 --> 00:36:29,040
bootstrap is facilitating this

00:36:26,800 --> 00:36:31,359
communication

00:36:29,040 --> 00:36:32,800
uh the bootstrap is nothing more than a

00:36:31,359 --> 00:36:33,680
javascript vanilla javascript

00:36:32,800 --> 00:36:37,119
implementation

00:36:33,680 --> 00:36:38,000
very light and um and basically is

00:36:37,119 --> 00:36:40,480
embedded inside

00:36:38,000 --> 00:36:42,240
the initial index html that is

00:36:40,480 --> 00:36:44,240
downloaded when you type the zoom.com or

00:36:42,240 --> 00:36:47,119
you open the application

00:36:44,240 --> 00:36:48,079
uh how we mount a microphone 10 so the

00:36:47,119 --> 00:36:50,560
logic is

00:36:48,079 --> 00:36:51,280
in our case we said that we have an html

00:36:50,560 --> 00:36:53,680
entry point

00:36:51,280 --> 00:36:54,800
and html is basically xml with a

00:36:53,680 --> 00:36:57,920
specific schema

00:36:54,800 --> 00:36:58,400
so what we do is the most basic thing we

00:36:57,920 --> 00:37:01,280
have

00:36:58,400 --> 00:37:03,680
a nice html uh that can be parsed so the

00:37:01,280 --> 00:37:06,160
bootstrap knows the url of that html

00:37:03,680 --> 00:37:08,320
it parses the uh the html and they start

00:37:06,160 --> 00:37:12,079
to append inside itself

00:37:08,320 --> 00:37:14,079
the different markup language

00:37:12,079 --> 00:37:16,000
so you start to add if there are any

00:37:14,079 --> 00:37:17,760
server-side rendered

00:37:16,000 --> 00:37:19,119
nodes it's going to add in the body if

00:37:17,760 --> 00:37:20,960
there are css

00:37:19,119 --> 00:37:22,640
and and script are going to append

00:37:20,960 --> 00:37:24,640
inside the the body on the head

00:37:22,640 --> 00:37:25,680
depends where they are inside the entry

00:37:24,640 --> 00:37:28,160
point of the html

00:37:25,680 --> 00:37:29,280
but that is a very standard way not

00:37:28,160 --> 00:37:32,320
opinionated at all

00:37:29,280 --> 00:37:34,320
that allows us to use the best breed

00:37:32,320 --> 00:37:36,400
uh possible on on the javascript

00:37:34,320 --> 00:37:37,440
community it doesn't force us to build

00:37:36,400 --> 00:37:40,640
every time there is

00:37:37,440 --> 00:37:42,480
a new framework that is coming out or um

00:37:40,640 --> 00:37:44,720
integrating with a third party company

00:37:42,480 --> 00:37:45,280
we can do that in a very simple way

00:37:44,720 --> 00:37:46,560
because

00:37:45,280 --> 00:37:48,560
everything is a standard everything is

00:37:46,560 --> 00:37:49,520
vanilla we don't do magic here it's

00:37:48,560 --> 00:37:52,560
literally

00:37:49,520 --> 00:37:54,160
parsing an html or xml file

00:37:52,560 --> 00:37:56,160
and appending the nodes inside the

00:37:54,160 --> 00:37:58,160
bootstrap and when we want to unload we

00:37:56,160 --> 00:38:01,520
just remove all the nodes

00:37:58,160 --> 00:38:03,680
we call an endpoint sorry um some um

00:38:01,520 --> 00:38:04,640
callbacks that are available as you can

00:38:03,680 --> 00:38:06,160
see here

00:38:04,640 --> 00:38:07,760
we create an object called the zone

00:38:06,160 --> 00:38:09,200
object and inside there you have life

00:38:07,760 --> 00:38:10,560
cycle events that are called

00:38:09,200 --> 00:38:12,240
on every microphone 10 so when the

00:38:10,560 --> 00:38:13,839
booster notice that everything is loaded

00:38:12,240 --> 00:38:16,000
it's not defined that's the microphone

00:38:13,839 --> 00:38:18,079
then and if you needed to do something

00:38:16,000 --> 00:38:19,760
the microphone will act upon that

00:38:18,079 --> 00:38:21,280
and the same way when the bootstrap is

00:38:19,760 --> 00:38:23,119
saying oh now it's time that you

00:38:21,280 --> 00:38:24,560
uh unload the microphone tense what is

00:38:23,119 --> 00:38:25,839
happening is communicating that to the

00:38:24,560 --> 00:38:26,800
microphone 10 the microphone attendees

00:38:25,839 --> 00:38:28,480
are moving all the

00:38:26,800 --> 00:38:30,400
pointer to listener and everything and

00:38:28,480 --> 00:38:31,440
then we unload the microphone 10 we load

00:38:30,400 --> 00:38:34,480
the new one

00:38:31,440 --> 00:38:36,560
um that is how we are

00:38:34,480 --> 00:38:37,760
dealing with uh with microphone tense

00:38:36,560 --> 00:38:40,640
currently we have

00:38:37,760 --> 00:38:42,160
um six microphone tanks we are heading

00:38:40,640 --> 00:38:44,640
towards seven and eight

00:38:42,160 --> 00:38:46,079
uh very soon but again it's a limited

00:38:44,640 --> 00:38:48,400
amount of microphones that we have

00:38:46,079 --> 00:38:49,280
and we can map then and scale our teams

00:38:48,400 --> 00:38:50,960
or horizontally

00:38:49,280 --> 00:38:52,320
in this in this way we have also

00:38:50,960 --> 00:38:54,880
components

00:38:52,320 --> 00:38:56,720
because there are certain things that

00:38:54,880 --> 00:38:59,760
are fairly complex in our application

00:38:56,720 --> 00:39:01,599
um consider that we have an otp platform

00:38:59,760 --> 00:39:03,760
one of the most complex thing we have is

00:39:01,599 --> 00:39:05,200
the video player

00:39:03,760 --> 00:39:07,200
the video player we have a dedicated

00:39:05,200 --> 00:39:08,000
team roughly 10 people that are taking

00:39:07,200 --> 00:39:09,680
care about

00:39:08,000 --> 00:39:11,040
um all the video player for all the

00:39:09,680 --> 00:39:13,599
devices and

00:39:11,040 --> 00:39:14,160
trust me when i say it's not easy like i

00:39:13,599 --> 00:39:15,839
take

00:39:14,160 --> 00:39:18,400
one open source video player sticking a

00:39:15,839 --> 00:39:20,480
page done it's way more complex because

00:39:18,400 --> 00:39:21,839
dealing with live uh content is a

00:39:20,480 --> 00:39:22,560
completely different beast than video on

00:39:21,839 --> 00:39:24,079
demand

00:39:22,560 --> 00:39:25,599
so the optimization the heuristics

00:39:24,079 --> 00:39:26,880
behind the player has to change

00:39:25,599 --> 00:39:28,880
and we have this team that is looking

00:39:26,880 --> 00:39:31,280
after these things

00:39:28,880 --> 00:39:32,560
uh what the video player for instance is

00:39:31,280 --> 00:39:35,599
a component

00:39:32,560 --> 00:39:38,640
uh that has uh let's say um

00:39:35,599 --> 00:39:40,640
a store inside an npm private repository

00:39:38,640 --> 00:39:42,560
and is used in currently uh two

00:39:40,640 --> 00:39:44,880
microphone fans uh

00:39:42,560 --> 00:39:46,800
they are it's like normal life cycle of

00:39:44,880 --> 00:39:47,119
a components library so the microphone

00:39:46,800 --> 00:39:50,800
is

00:39:47,119 --> 00:39:53,280
loading the loading delay the the

00:39:50,800 --> 00:39:55,119
latest version up to now we always work

00:39:53,280 --> 00:39:56,000
with components that load at compile

00:39:55,119 --> 00:39:58,320
time so

00:39:56,000 --> 00:39:59,680
development time uh and now we are

00:39:58,320 --> 00:40:02,720
looking at uh

00:39:59,680 --> 00:40:06,000
loading at um at the runtime

00:40:02,720 --> 00:40:07,680
with um some twists on how what

00:40:06,000 --> 00:40:09,119
you can load for instance what we are

00:40:07,680 --> 00:40:12,240
going to allow is

00:40:09,119 --> 00:40:16,160
um in semver uh samvers

00:40:12,240 --> 00:40:17,680
um spec we are allowing minor bug fixing

00:40:16,160 --> 00:40:19,359
to be loaded at the runtime and publish

00:40:17,680 --> 00:40:20,000
without any problem but when there is a

00:40:19,359 --> 00:40:22,720
major

00:40:20,000 --> 00:40:23,599
uh fix we we need to change the code on

00:40:22,720 --> 00:40:26,240
the microphone

00:40:23,599 --> 00:40:27,839
in order to bump up the version that is

00:40:26,240 --> 00:40:29,520
needed because for us that might

00:40:27,839 --> 00:40:31,200
for the for us that specific component

00:40:29,520 --> 00:40:34,079
is a key component and

00:40:31,200 --> 00:40:35,119
it has to be battle tested uh so we

00:40:34,079 --> 00:40:37,599
cannot really

00:40:35,119 --> 00:40:39,359
afford to have an issue on the video

00:40:37,599 --> 00:40:41,200
player so that is a trick that we put

00:40:39,359 --> 00:40:44,079
together in order to manage that

00:40:41,200 --> 00:40:45,760
um every component is your own by a

00:40:44,079 --> 00:40:47,280
specific team

00:40:45,760 --> 00:40:49,200
and can be shared across microphone

00:40:47,280 --> 00:40:50,319
dance now one of the questions usually i

00:40:49,200 --> 00:40:52,400
have at this point is

00:40:50,319 --> 00:40:54,000
uh okay how do you handle the design

00:40:52,400 --> 00:40:55,359
system with uh

00:40:54,000 --> 00:40:57,760
if you have just one component at the

00:40:55,359 --> 00:40:59,040
moment so the design system is composed

00:40:57,760 --> 00:41:02,720
usually by design tokens

00:40:59,040 --> 00:41:03,760
and uh components and what we do is we

00:41:02,720 --> 00:41:05,599
stop at the design

00:41:03,760 --> 00:41:06,800
um at the design tokens level so we

00:41:05,599 --> 00:41:10,560
define uh

00:41:06,800 --> 00:41:12,640
the um the font size and the colors

00:41:10,560 --> 00:41:14,720
and uh fonts type family and so on

00:41:12,640 --> 00:41:16,400
support all these things coming

00:41:14,720 --> 00:41:17,760
chrome on across the application and

00:41:16,400 --> 00:41:18,560
then every microphone then is

00:41:17,760 --> 00:41:20,480
implementing

00:41:18,560 --> 00:41:22,240
their own we are currently looking how

00:41:20,480 --> 00:41:23,839
we can extend this concept to components

00:41:22,240 --> 00:41:25,040
but the problem we have is because we

00:41:23,839 --> 00:41:28,240
don't have only

00:41:25,040 --> 00:41:30,079
uh let's say one uh unique we don't have

00:41:28,240 --> 00:41:31,680
only web but we have also tvs

00:41:30,079 --> 00:41:34,240
it's limited the amount of things that

00:41:31,680 --> 00:41:35,040
we can pick so we tried web components

00:41:34,240 --> 00:41:36,800
for instance

00:41:35,040 --> 00:41:38,880
and are not supported also with

00:41:36,800 --> 00:41:41,599
polyfills on many tv devices

00:41:38,880 --> 00:41:42,319
and therefore we need to uh look on

00:41:41,599 --> 00:41:44,800
building

00:41:42,319 --> 00:41:46,240
custom libraries per framework so in

00:41:44,800 --> 00:41:47,680
this case mainly react

00:41:46,240 --> 00:41:49,440
but that is something that we are

00:41:47,680 --> 00:41:50,400
currently iterating trying to understand

00:41:49,440 --> 00:41:52,319
and play this

00:41:50,400 --> 00:41:53,839
this game on understanding what is

00:41:52,319 --> 00:41:56,720
feasible what can go wrong

00:41:53,839 --> 00:41:57,760
how we can design a decent governance

00:41:56,720 --> 00:42:00,480
around that but

00:41:57,760 --> 00:42:02,319
yes the application is um as some

00:42:00,480 --> 00:42:04,640
components are duplicated and

00:42:02,319 --> 00:42:05,839
yes uh not many to be honest if you look

00:42:04,640 --> 00:42:08,960
at our interface

00:42:05,839 --> 00:42:11,680
um and yes the application has some

00:42:08,960 --> 00:42:12,880
consistency up to a certain level so

00:42:11,680 --> 00:42:14,400
those are the things that we are

00:42:12,880 --> 00:42:15,760
currently doing

00:42:14,400 --> 00:42:17,440
there is another interesting thing that

00:42:15,760 --> 00:42:19,119
we introduced with this approach

00:42:17,440 --> 00:42:20,960
we introduced canary releases on

00:42:19,119 --> 00:42:22,800
front-end and basically we have uh

00:42:20,960 --> 00:42:24,400
currently a lambda the edge is a land a

00:42:22,800 --> 00:42:27,520
computation layer made with

00:42:24,400 --> 00:42:29,200
lambda uh serverless lambda on aws layer

00:42:27,520 --> 00:42:32,079
that are running on the closest

00:42:29,200 --> 00:42:33,280
uh origin uh from a point the presence

00:42:32,079 --> 00:42:36,000
of a cdn

00:42:33,280 --> 00:42:36,560
um obsidian point on presence so cloud

00:42:36,000 --> 00:42:40,000
front and

00:42:36,560 --> 00:42:42,480
and the closest point of presence will

00:42:40,000 --> 00:42:44,079
call a specific origin closest origin

00:42:42,480 --> 00:42:47,200
from that point of presence

00:42:44,079 --> 00:42:48,960
and we'll run some code on that and that

00:42:47,200 --> 00:42:52,240
code basically is a node.js

00:42:48,960 --> 00:42:54,319
uh application that um that is basically

00:42:52,240 --> 00:42:56,000
uh shaping the traffic towards a new

00:42:54,319 --> 00:42:58,319
version of a microphone fans and we use

00:42:56,000 --> 00:43:00,319
the same way for killing the monolith

00:42:58,319 --> 00:43:01,839
so we had for a certain period of time

00:43:00,319 --> 00:43:03,599
the single page application that was

00:43:01,839 --> 00:43:06,000
running alongside the microphone tens

00:43:03,599 --> 00:43:07,599
and we start to alternatively adding new

00:43:06,000 --> 00:43:08,720
functionalities and everything and we're

00:43:07,599 --> 00:43:11,119
shaping the traffic

00:43:08,720 --> 00:43:12,400
based on the country the browser and the

00:43:11,119 --> 00:43:14,079
traffic that we want to have

00:43:12,400 --> 00:43:15,680
and everything was shaped at the

00:43:14,079 --> 00:43:16,880
infrastructure layer so for the

00:43:15,680 --> 00:43:19,119
microphone tense

00:43:16,880 --> 00:43:20,400
the development wasn't custom for that

00:43:19,119 --> 00:43:22,480
specific feature it was normal

00:43:20,400 --> 00:43:24,480
development slowly but study we were

00:43:22,480 --> 00:43:26,640
basically killing the microphone 10

00:43:24,480 --> 00:43:27,920
using the strangle pattern that is very

00:43:26,640 --> 00:43:30,800
well known in microservices

00:43:27,920 --> 00:43:32,800
but applied on on the uh frontal and at

00:43:30,800 --> 00:43:35,599
the bottom of this slide you can find

00:43:32,800 --> 00:43:37,359
uh a link that i describe even better uh

00:43:35,599 --> 00:43:40,480
the process around that

00:43:37,359 --> 00:43:42,000
conscious of the time try to wrap up uh

00:43:40,480 --> 00:43:43,760
interesting enough one of the things

00:43:42,000 --> 00:43:47,040
that uh we achieved with that

00:43:43,760 --> 00:43:48,720
is um one day i came uh um

00:43:47,040 --> 00:43:50,720
i arrived in the office and i have like

00:43:48,720 --> 00:43:52,480
five new teams that started to work

00:43:50,720 --> 00:43:54,000
on the front end we started to onboard

00:43:52,480 --> 00:43:55,680
them it was very quick because we

00:43:54,000 --> 00:43:56,800
explained architecture we but we provide

00:43:55,680 --> 00:43:59,520
them the freedom

00:43:56,800 --> 00:43:59,920
to really leverage their best uh let's

00:43:59,520 --> 00:44:03,200
say

00:43:59,920 --> 00:44:04,640
uh technology decisions and

00:44:03,200 --> 00:44:07,119
what they know better and they're

00:44:04,640 --> 00:44:10,000
falling in after two weeks roughly

00:44:07,119 --> 00:44:11,359
uh one week uh more or less um they

00:44:10,000 --> 00:44:12,079
started to create value so they started

00:44:11,359 --> 00:44:15,119
to ship

00:44:12,079 --> 00:44:16,720
incremental value to um our microphone

00:44:15,119 --> 00:44:17,200
that's and that for me was a big win

00:44:16,720 --> 00:44:19,760
because

00:44:17,200 --> 00:44:20,400
it means that we we were able to really

00:44:19,760 --> 00:44:22,400
create

00:44:20,400 --> 00:44:23,760
something that wasn't too opinionated

00:44:22,400 --> 00:44:26,000
and and very standard

00:44:23,760 --> 00:44:27,760
allow everyone to start to chip in and

00:44:26,000 --> 00:44:29,520
and contribute

00:44:27,760 --> 00:44:31,599
another interesting thing is we scale

00:44:29,520 --> 00:44:33,680
like from two people as described before

00:44:31,599 --> 00:44:35,839
to over 400 distributed

00:44:33,680 --> 00:44:36,720
in four deaf centers working on the same

00:44:35,839 --> 00:44:38,560
platform obviously

00:44:36,720 --> 00:44:40,560
we are talking here about front and back

00:44:38,560 --> 00:44:41,520
end developers as well as qas and and

00:44:40,560 --> 00:44:43,280
scrum master

00:44:41,520 --> 00:44:45,200
however is a great achievement because

00:44:43,280 --> 00:44:47,119
we move the front and the back end

00:44:45,200 --> 00:44:49,040
uh of on our application to micro

00:44:47,119 --> 00:44:52,319
services and microphone tents

00:44:49,040 --> 00:44:53,839
um allowing let's say every and shaping

00:44:52,319 --> 00:44:56,000
also the communication flows

00:44:53,839 --> 00:44:57,760
uh based on the architecture that is a

00:44:56,000 --> 00:45:00,160
really really interesting thing if

00:44:57,760 --> 00:45:00,960
i know that i i stress a lot during this

00:45:00,160 --> 00:45:02,480
presentation

00:45:00,960 --> 00:45:04,400
the communication flow with architecture

00:45:02,480 --> 00:45:06,160
because i truly believe uh that

00:45:04,400 --> 00:45:08,720
you cannot design an architecture

00:45:06,160 --> 00:45:10,079
without thinking how organization out

00:45:08,720 --> 00:45:12,319
the organizational impact

00:45:10,079 --> 00:45:13,359
of your architecture so you really need

00:45:12,319 --> 00:45:15,119
when you design to

00:45:13,359 --> 00:45:17,599
an architecture to think about the

00:45:15,119 --> 00:45:18,160
communication flows across all the teams

00:45:17,599 --> 00:45:19,839
because

00:45:18,160 --> 00:45:21,920
you can create the best application that

00:45:19,839 --> 00:45:23,839
maybe fit the context but maybe

00:45:21,920 --> 00:45:25,280
it cannot be implemented due to some

00:45:23,839 --> 00:45:27,280
constraints uh that you have

00:45:25,280 --> 00:45:29,520
inside the organization so please think

00:45:27,280 --> 00:45:31,359
very wisely about that

00:45:29,520 --> 00:45:33,680
finally in the last two years we didn't

00:45:31,359 --> 00:45:36,319
have any s1 incident in the platform

00:45:33,680 --> 00:45:36,880
i'm very proud of that because uh our

00:45:36,319 --> 00:45:40,319
let's say

00:45:36,880 --> 00:45:42,160
um platform that

00:45:40,319 --> 00:45:43,680
was released four years ago and since

00:45:42,160 --> 00:45:44,560
then we always doubled every year the

00:45:43,680 --> 00:45:46,480
amount of users

00:45:44,560 --> 00:45:48,560
and obviously when you move from ten

00:45:46,480 --> 00:45:49,920
thousand to twenty thousand is one thing

00:45:48,560 --> 00:45:51,280
when you move from one million to to

00:45:49,920 --> 00:45:52,880
venus is completely different beast

00:45:51,280 --> 00:45:53,359
obviously we have way more uses than

00:45:52,880 --> 00:45:56,079
that

00:45:53,359 --> 00:45:56,640
and as you can imagine uh being able to

00:45:56,079 --> 00:45:59,280
risk

00:45:56,640 --> 00:46:00,480
and have atomic deployment and shaping

00:45:59,280 --> 00:46:03,119
the traffic on

00:46:00,480 --> 00:46:04,000
redirecting traffic towards a part of

00:46:03,119 --> 00:46:06,240
our user base

00:46:04,000 --> 00:46:07,599
was really really helpful for uh for

00:46:06,240 --> 00:46:11,040
this um

00:46:07,599 --> 00:46:13,440
development uh that said i'm open to

00:46:11,040 --> 00:46:14,160
a q a and thank you very much for your

00:46:13,440 --> 00:46:16,800
time

00:46:14,160 --> 00:46:18,160
uh if i won't be able to answer your all

00:46:16,800 --> 00:46:19,760
your question you can find me on the

00:46:18,160 --> 00:46:22,079
slack channel that i think

00:46:19,760 --> 00:46:23,040
by now will be in the chat as well as

00:46:22,079 --> 00:46:25,040
you can uh

00:46:23,040 --> 00:46:26,079
contact me directly and you can follow

00:46:25,040 --> 00:46:29,119
me on my

00:46:26,079 --> 00:46:31,680
uh blog post uh sorry a blog where there

00:46:29,119 --> 00:46:34,240
are quite a few posts around microphone

00:46:31,680 --> 00:46:34,240
thank you very much

00:46:35,599 --> 00:46:39,200
thank you luca thank you very much for

00:46:37,760 --> 00:46:41,760
your talk it was uh

00:46:39,200 --> 00:46:42,560
very inspiring we had a lot of questions

00:46:41,760 --> 00:46:45,839
here

00:46:42,560 --> 00:46:49,040
uh and before the the second uh

00:46:45,839 --> 00:46:52,240
second talk uh so so i will not forget

00:46:49,040 --> 00:46:53,520
uh i suggest for for all the viewers uh

00:46:52,240 --> 00:46:56,079
to have a drinking game

00:46:53,520 --> 00:46:57,119
every time the word micro frontends is

00:46:56,079 --> 00:47:00,319
mentioned

00:46:57,119 --> 00:47:03,520
or for someone who would not

00:47:00,319 --> 00:47:04,400
be able uh to endure this i suggest to

00:47:03,520 --> 00:47:06,880
have a push-up

00:47:04,400 --> 00:47:09,200
every time someone says micro frontends

00:47:06,880 --> 00:47:11,760
uh that would be a really great exercise

00:47:09,200 --> 00:47:12,400
uh so the questions there there is a lot

00:47:11,760 --> 00:47:15,520
of them

00:47:12,400 --> 00:47:19,040
and uh i started to put a likes on some

00:47:15,520 --> 00:47:21,839
of them so it's a little bit biased uh

00:47:19,040 --> 00:47:24,000
as i look at it uh but i will try to go

00:47:21,839 --> 00:47:27,440
for from the most liked to the least

00:47:24,000 --> 00:47:30,319
liked uh so first of all

00:47:27,440 --> 00:47:32,559
uh hi luca how do you share libraries

00:47:30,319 --> 00:47:36,079
between micro frontends like react

00:47:32,559 --> 00:47:36,720
angular or vue so mostly the the base

00:47:36,079 --> 00:47:40,559
framework

00:47:36,720 --> 00:47:43,119
uh rendering framework okay so

00:47:40,559 --> 00:47:44,240
when they are a share component usually

00:47:43,119 --> 00:47:46,480
you tend to

00:47:44,240 --> 00:47:48,240
to use web components if you can that

00:47:46,480 --> 00:47:50,559
could be a good practice

00:47:48,240 --> 00:47:52,240
um if it's the design system i was

00:47:50,559 --> 00:47:54,880
talking with another company

00:47:52,240 --> 00:47:55,839
pretty large uh probably larger than us

00:47:54,880 --> 00:47:57,280
um

00:47:55,839 --> 00:47:58,720
where they were telling me that

00:47:57,280 --> 00:47:59,680
currently for the design system are

00:47:58,720 --> 00:48:03,119
creating

00:47:59,680 --> 00:48:06,240
one library per framework my

00:48:03,119 --> 00:48:07,760
uh experience although is uh telling me

00:48:06,240 --> 00:48:10,960
that for instance um

00:48:07,760 --> 00:48:13,280
you tend to not have an

00:48:10,960 --> 00:48:15,280
a platform or an application that is

00:48:13,280 --> 00:48:15,520
composed by multiple frameworks so when

00:48:15,280 --> 00:48:16,960
you

00:48:15,520 --> 00:48:18,079
despite it you can do that with

00:48:16,960 --> 00:48:19,359
microphone tests it doesn't mean that

00:48:18,079 --> 00:48:21,040
you have to do that

00:48:19,359 --> 00:48:22,960
so there are certain situations where

00:48:21,040 --> 00:48:26,000
you can use multiple frameworks

00:48:22,960 --> 00:48:28,880
successfully and usually is uh through

00:48:26,000 --> 00:48:30,079
um when you have a legacy application or

00:48:28,880 --> 00:48:31,520
maybe this is written with an old

00:48:30,079 --> 00:48:33,280
version of react or whatever and you

00:48:31,520 --> 00:48:34,800
want to migrate to a new one

00:48:33,280 --> 00:48:37,280
or a completely different framework that

00:48:34,800 --> 00:48:39,200
is one thing that you uh you can use

00:48:37,280 --> 00:48:40,720
different frameworks but in general

00:48:39,200 --> 00:48:42,319
the best practices you have in a single

00:48:40,720 --> 00:48:43,440
page application should be applicable on

00:48:42,319 --> 00:48:45,680
my contents as well

00:48:43,440 --> 00:48:46,880
in the next talk manfred will tell you

00:48:45,680 --> 00:48:49,520
another technique

00:48:46,880 --> 00:48:50,800
uh and i don't want to spoil that uh for

00:48:49,520 --> 00:48:53,760
for for sharing

00:48:50,800 --> 00:48:54,400
uh uh code across multiple microphone

00:48:53,760 --> 00:48:56,960
tents

00:48:54,400 --> 00:48:57,599
uh but i leave to to to manfred uh uh

00:48:56,960 --> 00:48:58,800
this uh

00:48:57,599 --> 00:49:00,839
answering the second part of this

00:48:58,800 --> 00:49:04,079
question yeah sure

00:49:00,839 --> 00:49:06,160
thanks obviously uh we will

00:49:04,079 --> 00:49:08,480
get back to this question if it will be

00:49:06,160 --> 00:49:10,960
left unanswered by the next doll

00:49:08,480 --> 00:49:12,880
uh chris is asking what is the advantage

00:49:10,960 --> 00:49:16,880
with the micro frontends over

00:49:12,880 --> 00:49:19,359
root based code splitting i think maybe

00:49:16,880 --> 00:49:20,000
yeah yeah yeah go on go on yeah that's a

00:49:19,359 --> 00:49:23,040
good question

00:49:20,000 --> 00:49:25,839
uh i think um code splitting is uh

00:49:23,040 --> 00:49:28,400
um just one way to manage that but you

00:49:25,839 --> 00:49:30,240
have a centralized way usually that you

00:49:28,400 --> 00:49:31,040
describe how you want to split your code

00:49:30,240 --> 00:49:33,359
and everything

00:49:31,040 --> 00:49:34,559
microfountains if leveraged properly you

00:49:33,359 --> 00:49:37,839
can really

00:49:34,559 --> 00:49:38,480
uh create let's say a custom domain that

00:49:37,839 --> 00:49:41,599
can go

00:49:38,480 --> 00:49:43,119
at a different um a different speed for

00:49:41,599 --> 00:49:44,960
instance one thing that i notice is

00:49:43,119 --> 00:49:46,720
we don't have to coordinate when a

00:49:44,960 --> 00:49:48,160
specific microphone is going

00:49:46,720 --> 00:49:49,839
live or there is a new version on

00:49:48,160 --> 00:49:51,760
anything it's literally

00:49:49,839 --> 00:49:53,760
it cannot break anything it's

00:49:51,760 --> 00:49:55,359
self-contained and you can deploy

00:49:53,760 --> 00:49:56,480
completely independently without any

00:49:55,359 --> 00:49:57,359
problem you don't have to coordinate

00:49:56,480 --> 00:50:00,880
with other teams

00:49:57,359 --> 00:50:02,960
you can do everything that is uh that um

00:50:00,880 --> 00:50:04,079
you want and also the other nice thing

00:50:02,960 --> 00:50:06,800
is for instance one

00:50:04,079 --> 00:50:08,640
one example uh we wanted to try quickly

00:50:06,800 --> 00:50:10,480
in certain landing pages that is the

00:50:08,640 --> 00:50:12,400
smallest let's say microphone that we

00:50:10,480 --> 00:50:15,040
have um

00:50:12,400 --> 00:50:16,000
to when when react hooks came up uh and

00:50:15,040 --> 00:50:18,000
we wanted to try

00:50:16,000 --> 00:50:19,680
meanwhile they were in beta so we tried

00:50:18,000 --> 00:50:21,280
to do that and we tried in production

00:50:19,680 --> 00:50:22,000
straight away no one was involved in

00:50:21,280 --> 00:50:24,000
that the

00:50:22,000 --> 00:50:25,680
the interesting bit is the team

00:50:24,000 --> 00:50:27,599
responsible for that part

00:50:25,680 --> 00:50:29,520
right with one specific mic with one

00:50:27,599 --> 00:50:31,440
specific um

00:50:29,520 --> 00:50:32,800
landing page they try to shape the

00:50:31,440 --> 00:50:33,599
traffic that they gather some

00:50:32,800 --> 00:50:35,599
information

00:50:33,599 --> 00:50:37,359
and they feed back through the community

00:50:35,599 --> 00:50:39,440
practice our our other teams

00:50:37,359 --> 00:50:41,359
and that is a nice way that you can also

00:50:39,440 --> 00:50:43,359
innovate using microphone dance

00:50:41,359 --> 00:50:45,040
and and usually the fact that you can

00:50:43,359 --> 00:50:47,200
structure everything in a way that

00:50:45,040 --> 00:50:48,319
the reason that centralized way to

00:50:47,200 --> 00:50:50,559
manage everything

00:50:48,319 --> 00:50:52,480
allows you to really run independently

00:50:50,559 --> 00:50:53,680
obviously it's impossible to not have

00:50:52,480 --> 00:50:55,920
any coordination

00:50:53,680 --> 00:50:57,760
at all between microphone dance but the

00:50:55,920 --> 00:51:00,319
the goal is minimizing

00:50:57,760 --> 00:51:01,839
these uh communication flow in order to

00:51:00,319 --> 00:51:04,960
have a very

00:51:01,839 --> 00:51:07,520
sp fast communication across teams

00:51:04,960 --> 00:51:08,400
especially when they are distributed uh

00:51:07,520 --> 00:51:10,880
and uh

00:51:08,400 --> 00:51:11,839
just uh to to keep on with the

00:51:10,880 --> 00:51:14,160
conversation

00:51:11,839 --> 00:51:14,960
uh i will be some devil's advocate here

00:51:14,160 --> 00:51:18,640
uh that

00:51:14,960 --> 00:51:21,200
uh some a lot of independence uh usually

00:51:18,640 --> 00:51:22,000
it can backfire and it can mean that the

00:51:21,200 --> 00:51:25,200
themes will be

00:51:22,000 --> 00:51:26,960
sync quite hard for example they will

00:51:25,200 --> 00:51:29,040
include the different versions of the

00:51:26,960 --> 00:51:32,000
same library so you will end up

00:51:29,040 --> 00:51:34,319
uh the user on their journey through the

00:51:32,000 --> 00:51:36,880
application will load the same library

00:51:34,319 --> 00:51:37,760
uh five times with in five different

00:51:36,880 --> 00:51:40,240
versions

00:51:37,760 --> 00:51:41,760
uh so so so uh with your mobile internet

00:51:40,240 --> 00:51:43,680
for example like that can be

00:51:41,760 --> 00:51:45,040
so that that can be that can put a lot

00:51:43,680 --> 00:51:48,000
of pressure uh

00:51:45,040 --> 00:51:50,000
on data usage uh or else also the

00:51:48,000 --> 00:51:51,920
parsing of the javascript is non-trivial

00:51:50,000 --> 00:51:53,680
on mobile devices low-power devices for

00:51:51,920 --> 00:51:57,599
example on certain markets

00:51:53,680 --> 00:52:00,000
so how are you how how would you manage

00:51:57,599 --> 00:52:00,720
this this duplication because from my

00:52:00,000 --> 00:52:02,960
point of view

00:52:00,720 --> 00:52:03,839
this puts a lot of pressure on the

00:52:02,960 --> 00:52:06,160
communication

00:52:03,839 --> 00:52:07,920
of the teams uh that uh the keeping it

00:52:06,160 --> 00:52:09,839
independent things like

00:52:07,920 --> 00:52:11,119
okay yes this is something which i

00:52:09,839 --> 00:52:14,400
wanted to have

00:52:11,119 --> 00:52:15,920
but if from my point of view uh overuse

00:52:14,400 --> 00:52:18,160
of someone who is not using

00:52:15,920 --> 00:52:20,720
microfrontence it seems like something

00:52:18,160 --> 00:52:24,079
which can be hardly achieved

00:52:20,720 --> 00:52:25,760
um i don't think is hardly to achieve

00:52:24,079 --> 00:52:26,480
because uh if you think about that we

00:52:25,760 --> 00:52:28,079
were using

00:52:26,480 --> 00:52:30,079
when we so there are several ways that

00:52:28,079 --> 00:52:32,880
you can enhance this part so

00:52:30,079 --> 00:52:34,079
it depends a which microphone tense um

00:52:32,880 --> 00:52:36,400
implementation you would

00:52:34,079 --> 00:52:38,000
you would uh go for so as i explained in

00:52:36,400 --> 00:52:39,119
my talk you can have like an horizontal

00:52:38,000 --> 00:52:40,559
split so in that case you can have

00:52:39,119 --> 00:52:42,880
hundreds of microphones you can end up

00:52:40,559 --> 00:52:44,480
having hundreds of microphones in our

00:52:42,880 --> 00:52:44,960
version that you have like vertical

00:52:44,480 --> 00:52:47,040
split

00:52:44,960 --> 00:52:48,800
it's uh easy because we have like six

00:52:47,040 --> 00:52:49,359
seven microphone pants so it's very easy

00:52:48,800 --> 00:52:52,720
to manage

00:52:49,359 --> 00:52:54,480
uh that kind of complexity um although

00:52:52,720 --> 00:52:56,240
there is one thing that you need to do

00:52:54,480 --> 00:52:58,079
to bear in mind there are ways

00:52:56,240 --> 00:52:59,359
that frameworks are allowing you to

00:52:58,079 --> 00:53:01,520
share um

00:52:59,359 --> 00:53:02,720
let's say libraries without any problem

00:53:01,520 --> 00:53:04,720
um for instance

00:53:02,720 --> 00:53:05,839
manfred again will speak about one of

00:53:04,720 --> 00:53:07,440
the techniques probably

00:53:05,839 --> 00:53:09,040
around that but another one is single

00:53:07,440 --> 00:53:10,720
spa that allows you to

00:53:09,040 --> 00:53:12,240
share the library across all the

00:53:10,720 --> 00:53:15,680
different microphone fans

00:53:12,240 --> 00:53:18,000
uh and and this is totally doable

00:53:15,680 --> 00:53:18,800
um if you think about that we do on on

00:53:18,000 --> 00:53:20,480
uh um

00:53:18,800 --> 00:53:22,319
single page application without too many

00:53:20,480 --> 00:53:22,880
problems that's why we have tech leaders

00:53:22,319 --> 00:53:24,800
and uh

00:53:22,880 --> 00:53:26,160
and let's say architects that are

00:53:24,800 --> 00:53:28,640
helping on this

00:53:26,160 --> 00:53:29,440
but furthermore i would say there are

00:53:28,640 --> 00:53:32,079
interesting

00:53:29,440 --> 00:53:34,160
uh options that you can run in your ci

00:53:32,079 --> 00:53:34,559
for instance uh there is this concept on

00:53:34,160 --> 00:53:36,960
um

00:53:34,559 --> 00:53:38,160
evolutionary architecture around the

00:53:36,960 --> 00:53:40,480
fitness functions

00:53:38,160 --> 00:53:41,680
where you can run some architectural

00:53:40,480 --> 00:53:43,599
principles

00:53:41,680 --> 00:53:45,520
automatically inside your ci so you can

00:53:43,599 --> 00:53:46,960
inspect your package json

00:53:45,520 --> 00:53:48,640
and when you start to see that you have

00:53:46,960 --> 00:53:51,040
multiple libraries that are

00:53:48,640 --> 00:53:52,400
for instance developed with not the

00:53:51,040 --> 00:53:54,160
right version that you expect

00:53:52,400 --> 00:53:56,079
or different version or multiple

00:53:54,160 --> 00:53:57,680
libraries loaded inside the package

00:53:56,079 --> 00:54:00,400
you can prevent that the artifact is

00:53:57,680 --> 00:54:03,920
built so you you can you don't have only

00:54:00,400 --> 00:54:06,000
let's say human beings uh let's say

00:54:03,920 --> 00:54:09,280
uh for enforcing certain rules you can

00:54:06,000 --> 00:54:11,920
do that also the ci level

00:54:09,280 --> 00:54:12,720
yeah so pretty much enforce uh

00:54:11,920 --> 00:54:15,599
everything you

00:54:12,720 --> 00:54:16,400
you you want to avoid and force it in

00:54:15,599 --> 00:54:18,640
some ci

00:54:16,400 --> 00:54:20,480
or some some some stuff you can use you

00:54:18,640 --> 00:54:21,119
can do also with coordination it really

00:54:20,480 --> 00:54:23,920
depends

00:54:21,119 --> 00:54:25,599
uh the the way how to do that usually we

00:54:23,920 --> 00:54:27,440
use a combination for instance

00:54:25,599 --> 00:54:28,960
when it's needed in our case for

00:54:27,440 --> 00:54:30,880
instance we just we make a conscious

00:54:28,960 --> 00:54:34,720
decision where we don't share

00:54:30,880 --> 00:54:38,000
um the ui framework so um

00:54:34,720 --> 00:54:41,440
because studying how are our user

00:54:38,000 --> 00:54:45,040
flows we notice that um let's say it's

00:54:41,440 --> 00:54:45,520
a 30 case more every time across all

00:54:45,040 --> 00:54:46,720
different

00:54:45,520 --> 00:54:48,799
bumps when you when you change

00:54:46,720 --> 00:54:51,040
microphone 10 and when you are in

00:54:48,799 --> 00:54:52,640
you don't you don't move from there so

00:54:51,040 --> 00:54:54,079
it really affected really tiny

00:54:52,640 --> 00:54:56,079
proportion of our users

00:54:54,079 --> 00:54:58,079
the other interesting bit is our use

00:54:56,079 --> 00:54:59,680
case is very specific

00:54:58,079 --> 00:55:01,520
on mobile browser for instance we don't

00:54:59,680 --> 00:55:02,960
allow users to watch any content

00:55:01,520 --> 00:55:04,960
not because it's not doable but because

00:55:02,960 --> 00:55:07,040
the experience and the quality that you

00:55:04,960 --> 00:55:10,240
can have with the native technologies

00:55:07,040 --> 00:55:10,960
on mobile is by far greater than uh what

00:55:10,240 --> 00:55:13,440
you can have on

00:55:10,960 --> 00:55:15,200
inside the browser so therefore for us

00:55:13,440 --> 00:55:16,319
we are trying to redirect our users when

00:55:15,200 --> 00:55:17,119
they are authenticated to the

00:55:16,319 --> 00:55:19,520
application

00:55:17,119 --> 00:55:20,640
and not having a mobile experience so

00:55:19,520 --> 00:55:24,160
also that case

00:55:20,640 --> 00:55:27,040
is uh um helping us on achieving what we

00:55:24,160 --> 00:55:28,160
uh or taking this decision and again

00:55:27,040 --> 00:55:30,079
context often

00:55:28,160 --> 00:55:32,319
drives those kind of decisions it's not

00:55:30,079 --> 00:55:34,960
uh all but the zone is doing that way

00:55:32,319 --> 00:55:35,520
but uh what a stupid decision you need

00:55:34,960 --> 00:55:37,280
to understand

00:55:35,520 --> 00:55:38,799
why we are taking that decision and then

00:55:37,280 --> 00:55:40,960
there are strong reasons

00:55:38,799 --> 00:55:42,640
looking at data that are uh that are

00:55:40,960 --> 00:55:44,000
allowing us to do this but in other

00:55:42,640 --> 00:55:44,880
situations probably you cannot do that

00:55:44,000 --> 00:55:46,559
and they agree with you

00:55:44,880 --> 00:55:48,640
you need to enforce that could be either

00:55:46,559 --> 00:55:51,680
at the framework level or it could be

00:55:48,640 --> 00:55:52,400
at the ci level understood thank you

00:55:51,680 --> 00:55:54,400
very much so

00:55:52,400 --> 00:55:56,480
let's go for the next question which is

00:55:54,400 --> 00:55:58,720
that i always hear a lot of pushback on

00:55:56,480 --> 00:56:01,839
iframes mostly around security

00:55:58,720 --> 00:56:03,280
is that still the case yes unfortunately

00:56:01,839 --> 00:56:06,559
they didn't evolve too much

00:56:03,280 --> 00:56:08,559
uh there are uh some uh um currently

00:56:06,559 --> 00:56:09,839
there is a proposal around uh what they

00:56:08,559 --> 00:56:12,720
call the realms

00:56:09,839 --> 00:56:14,240
uh at the tc39 that potentially could

00:56:12,720 --> 00:56:15,359
replace that they are creating a sort of

00:56:14,240 --> 00:56:17,520
sandbox

00:56:15,359 --> 00:56:19,359
like an iframe but without all the

00:56:17,520 --> 00:56:20,480
burden and issues that the iphones are

00:56:19,359 --> 00:56:23,520
bringing together

00:56:20,480 --> 00:56:24,240
um iframes uh i think in certain

00:56:23,520 --> 00:56:26,160
occasions

00:56:24,240 --> 00:56:27,359
may work if you think about uh for

00:56:26,160 --> 00:56:29,200
instance the example

00:56:27,359 --> 00:56:31,040
that i brought up like spotify on

00:56:29,200 --> 00:56:34,720
desktop that case

00:56:31,040 --> 00:56:36,640
you are loading from your hard drive so

00:56:34,720 --> 00:56:38,400
it doesn't provide too much burden but

00:56:36,640 --> 00:56:38,799
it provides a lot of isolation around

00:56:38,400 --> 00:56:42,079
around

00:56:38,799 --> 00:56:43,760
the uh the system so

00:56:42,079 --> 00:56:45,119
and also is supplemented with native

00:56:43,760 --> 00:56:46,319
code when you go when you need to go

00:56:45,119 --> 00:56:49,280
native because obviously

00:56:46,319 --> 00:56:50,640
all the ui is a web application but

00:56:49,280 --> 00:56:53,760
everything that is low level

00:56:50,640 --> 00:56:57,760
is done at the uh objective c

00:56:53,760 --> 00:57:00,079
or swift level so they they can have

00:56:57,760 --> 00:57:01,040
the best of both worlds so in that case

00:57:00,079 --> 00:57:04,559
i would say that

00:57:01,040 --> 00:57:07,119
is a a good way to approach that part

00:57:04,559 --> 00:57:08,880
thank you next question here you

00:57:07,119 --> 00:57:09,520
mentioned why microfront and per one

00:57:08,880 --> 00:57:11,680
team

00:57:09,520 --> 00:57:12,720
and it sounds like the micro frontends

00:57:11,680 --> 00:57:14,799
are quite big

00:57:12,720 --> 00:57:16,799
so i'm wondering how many teams do you

00:57:14,799 --> 00:57:18,319
have at dezon and how many members

00:57:16,799 --> 00:57:21,359
approximately each team has

00:57:18,319 --> 00:57:25,680
okay yes so in the zone what we have

00:57:21,359 --> 00:57:29,119
is uh let me count so we have

00:57:25,680 --> 00:57:32,559
one two so we have six

00:57:29,119 --> 00:57:35,119
uh roughly uh

00:57:32,559 --> 00:57:36,799
ten twelve front-end teams that are

00:57:35,119 --> 00:57:39,839
working on this architecture

00:57:36,799 --> 00:57:41,839
for tvs all the tvs plus web plus we

00:57:39,839 --> 00:57:44,880
have then uh

00:57:41,839 --> 00:57:47,920
every team is composed by uh

00:57:44,880 --> 00:57:49,839
four to six uh developers uh more four

00:57:47,920 --> 00:57:51,200
than than six and then you have qa scrum

00:57:49,839 --> 00:57:54,079
master embedded

00:57:51,200 --> 00:57:54,960
um and we have quite a few distributed

00:57:54,079 --> 00:57:57,119
across different

00:57:54,960 --> 00:57:58,480
dev centers every time centers has his

00:57:57,119 --> 00:58:00,640
own um

00:57:58,480 --> 00:58:01,760
uh sub domain business sub domain that's

00:58:00,640 --> 00:58:03,040
taking over so

00:58:01,760 --> 00:58:04,799
all the acquisition attention for

00:58:03,040 --> 00:58:06,960
instance is in amsterdam and

00:58:04,799 --> 00:58:08,720
uh front and back end so they can

00:58:06,960 --> 00:58:10,880
collaborate in the same

00:58:08,720 --> 00:58:12,319
uh in the same location so when we

00:58:10,880 --> 00:58:14,480
structure the architecture we

00:58:12,319 --> 00:58:15,680
restructure the organization in order to

00:58:14,480 --> 00:58:20,000
achieve a very

00:58:15,680 --> 00:58:20,000
uh frictionless communication flow

00:58:21,040 --> 00:58:26,559
hopefully answered pretty clear uh

00:58:24,160 --> 00:58:28,079
next question i'm sorry maybe i didn't

00:58:26,559 --> 00:58:30,960
notice but there are any

00:58:28,079 --> 00:58:31,359
are there any cons to micro front ends

00:58:30,960 --> 00:58:33,599
oh

00:58:31,359 --> 00:58:34,720
the first one that i would say is uh

00:58:33,599 --> 00:58:37,359
complexity

00:58:34,720 --> 00:58:38,640
uh that are brought at several level

00:58:37,359 --> 00:58:41,680
organizational level

00:58:38,640 --> 00:58:44,480
uh ci level uh and uh

00:58:41,680 --> 00:58:45,920
um also they could be performance level

00:58:44,480 --> 00:58:48,720
if you don't pay attention

00:58:45,920 --> 00:58:50,240
so there is an intrinsic um let's say

00:58:48,720 --> 00:58:51,839
effort and investment that you need to

00:58:50,240 --> 00:58:55,119
do when you do microphone deaths

00:58:51,839 --> 00:58:58,270
because as as for microservices uh

00:58:55,119 --> 00:58:59,760
you simplify the um

00:58:58,270 --> 00:59:01,760
[Music]

00:58:59,760 --> 00:59:03,359
cognitive load for every single team

00:59:01,760 --> 00:59:04,640
that is loaded that has just in their

00:59:03,359 --> 00:59:06,720
head a tiny bit

00:59:04,640 --> 00:59:08,480
of of the business logic but at the same

00:59:06,720 --> 00:59:10,160
time you're adding complexity on

00:59:08,480 --> 00:59:11,920
orchestrating all the infrastructure

00:59:10,160 --> 00:59:14,480
across multiple teams and

00:59:11,920 --> 00:59:16,799
you have um you can end up there are a

00:59:14,480 --> 00:59:19,920
lot of horror stories around there

00:59:16,799 --> 00:59:22,880
or microservices on the uh big bolo mod

00:59:19,920 --> 00:59:24,240
and the same thing could happen on on

00:59:22,880 --> 00:59:27,599
microphone that's if you don't

00:59:24,240 --> 00:59:30,640
invest constantly not only on on the

00:59:27,599 --> 00:59:32,319
um let's say features but also on the

00:59:30,640 --> 00:59:33,119
maintenance and the developer experience

00:59:32,319 --> 00:59:35,680
the ci

00:59:33,119 --> 00:59:37,359
and so on so forth uh for creating this

00:59:35,680 --> 00:59:38,960
also the communication logic

00:59:37,359 --> 00:59:41,119
um and the consolidated communication

00:59:38,960 --> 00:59:43,200
flow are important because of the ci

00:59:41,119 --> 00:59:45,040
the developer experience how you can

00:59:43,200 --> 00:59:46,400
create a smooth experience for

00:59:45,040 --> 00:59:48,880
creating new microphone pants especially

00:59:46,400 --> 00:59:51,359
when you go in on a horizontal split

00:59:48,880 --> 00:59:53,440
uh those kind of things you cannot

00:59:51,359 --> 00:59:56,240
really take all microphone 10 thinking

00:59:53,440 --> 00:59:57,119
oh i do the first investment i prepare

00:59:56,240 --> 00:59:58,960
all the ci

00:59:57,119 --> 01:00:01,359
and i will not touch again because no

00:59:58,960 --> 01:00:02,960
one noticed no one knows how to do that

01:00:01,359 --> 01:00:05,359
that's something that i experienced in

01:00:02,960 --> 01:00:06,559
the past in a single page application

01:00:05,359 --> 01:00:08,640
with microphone dance you need to

01:00:06,559 --> 01:00:11,200
constantly invest on that therefore

01:00:08,640 --> 01:00:12,799
that for me is the if your your company

01:00:11,200 --> 01:00:16,160
is not ready to invest in that

01:00:12,799 --> 01:00:19,040
and give space to the developers to

01:00:16,160 --> 01:00:19,520
nail and improve their um let's say

01:00:19,040 --> 01:00:22,400
tools

01:00:19,520 --> 01:00:24,400
and and ci uh don't even start with that

01:00:22,400 --> 01:00:25,599
because

01:00:24,400 --> 01:00:27,760
to a certain extent if you want

01:00:25,599 --> 01:00:29,920
expensive but it's paying back

01:00:27,760 --> 01:00:30,799
because they're you are they're risking

01:00:29,920 --> 01:00:33,760
a lot the

01:00:30,799 --> 01:00:36,640
um the deployment and the development of

01:00:33,760 --> 01:00:36,640
your your code

01:00:38,079 --> 01:00:42,640
thanks thanks a lot and uh we will i

01:00:40,799 --> 01:00:43,520
will just ask the one last question but

01:00:42,640 --> 01:00:46,799
they are

01:00:43,520 --> 01:00:50,079
six more uh maybe uh the

01:00:46,799 --> 01:00:52,160
the someone we can wait to

01:00:50,079 --> 01:00:53,200
till after the next talk whether some of

01:00:52,160 --> 01:00:56,480
the questions will be

01:00:53,200 --> 01:00:57,040
unanswered or uh if you if you if you

01:00:56,480 --> 01:00:59,680
can

01:00:57,040 --> 01:01:02,000
you can stay and type the answers for

01:00:59,680 --> 01:01:04,720
for some of the questions they may be

01:01:02,000 --> 01:01:05,599
maybe trivial some of them and the rest

01:01:04,720 --> 01:01:08,319
of the folks

01:01:05,599 --> 01:01:10,240
i would kindly ask you to continue in

01:01:08,319 --> 01:01:13,359
the select channel like this can be a

01:01:10,240 --> 01:01:15,920
pretty uh pretty interesting discussion

01:01:13,359 --> 01:01:17,520
also between the attendees so feel free

01:01:15,920 --> 01:01:20,319
to continue on slack

01:01:17,520 --> 01:01:20,960
so and the last question here is uh hi

01:01:20,319 --> 01:01:22,720
luca

01:01:20,960 --> 01:01:24,799
how doesn't bootstrap layer handle

01:01:22,720 --> 01:01:25,119
handles unloading of the micro front end

01:01:24,799 --> 01:01:28,240
and

01:01:25,119 --> 01:01:31,200
cleaning up the dom from exact notes uh

01:01:28,240 --> 01:01:31,920
for microfront and being unloaded yeah

01:01:31,200 --> 01:01:34,640
we

01:01:31,920 --> 01:01:35,760
uh we don't do magic there uh we just do

01:01:34,640 --> 01:01:38,400
a very simple

01:01:35,760 --> 01:01:38,799
uh and and if you want dumb way to do

01:01:38,400 --> 01:01:40,880
that

01:01:38,799 --> 01:01:42,640
you just label them and we just have

01:01:40,880 --> 01:01:44,400
every dom element that we say

01:01:42,640 --> 01:01:46,319
oh you need to append this you need to

01:01:44,400 --> 01:01:47,760
and avoid that because sometimes

01:01:46,319 --> 01:01:49,520
as you can imagine because you have an

01:01:47,760 --> 01:01:51,839
entry point in the developer experience

01:01:49,520 --> 01:01:53,040
and html page it's easy to test because

01:01:51,839 --> 01:01:53,760
it's like creating a single page

01:01:53,040 --> 01:01:55,520
application

01:01:53,760 --> 01:01:57,119
that for me was another goal that i

01:01:55,520 --> 01:01:59,359
wanted to have i don't want to

01:01:57,119 --> 01:02:00,640
change the way how a front-end developer

01:01:59,359 --> 01:02:02,720
uh is

01:02:00,640 --> 01:02:05,200
used to work so in this case what you

01:02:02,720 --> 01:02:06,160
can do is uh also faking the bootstrap

01:02:05,200 --> 01:02:09,599
and in

01:02:06,160 --> 01:02:10,960
injecting certain specific configuration

01:02:09,599 --> 01:02:12,400
when you are testing and that and we

01:02:10,960 --> 01:02:14,319
created this layer that allowed

01:02:12,400 --> 01:02:15,839
this tool that allows us to to do that

01:02:14,319 --> 01:02:18,640
but in general what we do is

01:02:15,839 --> 01:02:19,440
literally uh we we have all the labels

01:02:18,640 --> 01:02:22,160
around the the

01:02:19,440 --> 01:02:22,960
the tags and we just add and remove what

01:02:22,160 --> 01:02:25,520
is tagged

01:02:22,960 --> 01:02:27,039
basically inside the dom um and the

01:02:25,520 --> 01:02:29,920
other interesting bit is

01:02:27,039 --> 01:02:31,839
uh we are asking that's why we have the

01:02:29,920 --> 01:02:32,720
lifecycle methods uh that i described

01:02:31,839 --> 01:02:34,319
before in the bootstrap

01:02:32,720 --> 01:02:36,640
we do a callback on that and we

01:02:34,319 --> 01:02:38,319
notifying the um

01:02:36,640 --> 01:02:40,000
the microphone is about to be unloaded

01:02:38,319 --> 01:02:40,640
because he has to do his part he has to

01:02:40,000 --> 01:02:43,920
remove

01:02:40,640 --> 01:02:45,359
uh certain things uh like listeners or

01:02:43,920 --> 01:02:47,119
elements inside the dom

01:02:45,359 --> 01:02:48,400
in order to make sure that everything is

01:02:47,119 --> 01:02:51,280
clean and it is not

01:02:48,400 --> 01:02:52,079
uh let's say using too many resources

01:02:51,280 --> 01:02:54,799
because especially

01:02:52,079 --> 01:02:56,079
on on web you notice less that problem

01:02:54,799 --> 01:02:57,760
but on tv could be

01:02:56,079 --> 01:02:59,599
uh very problematic because when you

01:02:57,760 --> 01:03:02,720
have like a limited amount of resources

01:02:59,599 --> 01:03:03,599
uh every byte counts and that's why we

01:03:02,720 --> 01:03:06,880
we had to do

01:03:03,599 --> 01:03:10,319
a in this way yep

01:03:06,880 --> 01:03:12,559
thanks a lot thanks a lot uh

01:03:10,319 --> 01:03:14,319
so just to wrap up thank you thank you

01:03:12,559 --> 01:03:15,440
luca for your time uh for staying

01:03:14,319 --> 01:03:18,559
productive ua

01:03:15,440 --> 01:03:20,799
uh really a lot of questions there uh

01:03:18,559 --> 01:03:22,799
from from people so this would never

01:03:20,799 --> 01:03:26,640
stop so i have to stop it now

01:03:22,799 --> 01:03:29,440
yeah i will jump to your

01:03:26,640 --> 01:03:31,200
to your book sometimes in the future for

01:03:29,440 --> 01:03:32,799
sure uh as i see that

01:03:31,200 --> 01:03:34,799
there is one it can be yeah it's not

01:03:32,799 --> 01:03:35,280
finished yet i'm writing right now i'm

01:03:34,799 --> 01:03:38,640
uh

01:03:35,280 --> 01:03:39,359
almost uh uh 70 complete i'm finalizing

01:03:38,640 --> 01:03:41,680
this week

01:03:39,359 --> 01:03:43,520
another chapter so i hopefully by the

01:03:41,680 --> 01:03:44,400
end of the year is ready and then i will

01:03:43,520 --> 01:03:47,599
be

01:03:44,400 --> 01:03:50,319
available on o'reilly website and

01:03:47,599 --> 01:03:50,960
amazon the next week next year yeah so

01:03:50,319 --> 01:03:52,400
so we are

01:03:50,960 --> 01:03:54,640
really looking forward to really thank

01:03:52,400 --> 01:03:58,319
you for that uh

01:03:54,640 --> 01:04:02,000
so thanks again and we will continue

01:03:58,319 --> 01:04:06,079
with manfred manfred are you here hello

01:04:02,000 --> 01:04:09,280
yeah hi hi uh very nice background

01:04:06,079 --> 01:04:09,920
uh so i see you are you know i talk a

01:04:09,280 --> 01:04:12,960
lot about

01:04:09,920 --> 01:04:15,280
enterprise software so here we have them

01:04:12,960 --> 01:04:16,319
oh yeah enterprise applications they are

01:04:15,280 --> 01:04:18,960
my favorite

01:04:16,319 --> 01:04:19,920
so yeah we are really looking forward so

01:04:18,960 --> 01:04:23,200
already

01:04:19,920 --> 01:04:25,280
uh luca forwarded some questions to you

01:04:23,200 --> 01:04:26,240
so there is some extra pressure for you

01:04:25,280 --> 01:04:28,400
answer it

01:04:26,240 --> 01:04:30,400
answering it because he will be long

01:04:28,400 --> 01:04:32,960
gone

01:04:30,400 --> 01:04:33,760
of course so really looking forward to

01:04:32,960 --> 01:04:36,079
your talk

01:04:33,760 --> 01:04:37,359
and stage is yours share your screen and

01:04:36,079 --> 01:04:41,839
go for it

01:04:37,359 --> 01:04:41,839
okay cool

01:04:42,160 --> 01:04:47,119
so first of all thanks for having me

01:04:44,640 --> 01:04:50,640
it's a pleasure to talk here about

01:04:47,119 --> 01:04:53,440
one of my current favorite topics namely

01:04:50,640 --> 01:04:56,160
the micro front and revolution as i call

01:04:53,440 --> 01:04:56,799
it with module federation and i'm doing

01:04:56,160 --> 01:04:59,280
this

01:04:56,799 --> 01:05:00,000
with an example written in angular but

01:04:59,280 --> 01:05:02,799
anyway

01:05:00,000 --> 01:05:05,760
it would also work with other uh single

01:05:02,799 --> 01:05:09,440
page application frameworks like few

01:05:05,760 --> 01:05:10,240
rect and so on and i want to start with

01:05:09,440 --> 01:05:13,760
a question

01:05:10,240 --> 01:05:15,039
do you remember this woman perhaps you

01:05:13,760 --> 01:05:17,200
remember her

01:05:15,039 --> 01:05:18,640
she was one of the heroes of my

01:05:17,200 --> 01:05:23,839
childhood

01:05:18,640 --> 01:05:23,839
i give you a tiny hint it is

01:05:24,480 --> 01:05:30,720
yeah she was from knight rider she was

01:05:28,079 --> 01:05:32,319
bunny and she was the engineer on the

01:05:30,720 --> 01:05:36,400
night rider

01:05:32,319 --> 01:05:39,920
she was there one man or one woman

01:05:36,400 --> 01:05:42,720
show uh dealing with engineering on this

01:05:39,920 --> 01:05:45,359
team she was the electrical engineer

01:05:42,720 --> 01:05:47,119
and she was the computer scientist and

01:05:45,359 --> 01:05:49,359
she helped the knight rather team

01:05:47,119 --> 01:05:51,119
to accomplish their goals with nice

01:05:49,359 --> 01:05:54,559
gadgets

01:05:51,119 --> 01:05:57,920
and i really liked her

01:05:54,559 --> 01:06:01,039
she inspired me to

01:05:57,920 --> 01:06:01,760
tell my parents that i need a computer i

01:06:01,039 --> 01:06:05,039
told them

01:06:01,760 --> 01:06:06,240
yeah you know it might be beneficial for

01:06:05,039 --> 01:06:09,520
school

01:06:06,240 --> 01:06:11,760
which was not totally wrong but

01:06:09,520 --> 01:06:12,720
it was also not totally the truth but

01:06:11,760 --> 01:06:15,280
nevertheless

01:06:12,720 --> 01:06:16,640
i got the computer and so i started

01:06:15,280 --> 01:06:20,480
programming back then

01:06:16,640 --> 01:06:23,280
so somehow she inspired my whole career

01:06:20,480 --> 01:06:25,599
but when thinking back about bonnie one

01:06:23,280 --> 01:06:26,559
thing comes in mind that is very funny

01:06:25,599 --> 01:06:29,280
somehow

01:06:26,559 --> 01:06:30,799
namely as mentioned before she was a

01:06:29,280 --> 01:06:33,520
one-woman shoe

01:06:30,799 --> 01:06:35,039
and this does not work nowadays because

01:06:33,520 --> 01:06:38,079
nowadays we know

01:06:35,039 --> 01:06:41,119
that computer science and so also

01:06:38,079 --> 01:06:43,440
software engineering is a team sport

01:06:41,119 --> 01:06:44,480
that means we need a lot of people to

01:06:43,440 --> 01:06:47,200
coordinate

01:06:44,480 --> 01:06:48,960
and coordinating people is hard enough

01:06:47,200 --> 01:06:51,680
but i tell you one thing

01:06:48,960 --> 01:06:52,720
what's harder than coordinating people

01:06:51,680 --> 01:06:55,680
in one team

01:06:52,720 --> 01:06:57,200
is coordinating several teams if you

01:06:55,680 --> 01:06:59,720
have several teams

01:06:57,200 --> 01:07:01,119
then you need to establish more

01:06:59,720 --> 01:07:04,079
communication

01:07:01,119 --> 01:07:06,960
and you have to deal about more stuff so

01:07:04,079 --> 01:07:09,359
this is very complicated if you ask me

01:07:06,960 --> 01:07:11,200
but more and more companies see

01:07:09,359 --> 01:07:13,440
themselves in this position

01:07:11,200 --> 01:07:14,559
and so the big question is how to deal

01:07:13,440 --> 01:07:17,520
with this

01:07:14,559 --> 01:07:18,000
and the answer is quite simple i think

01:07:17,520 --> 01:07:21,039
luke

01:07:18,000 --> 01:07:23,200
has very nicely explained it before

01:07:21,039 --> 01:07:25,440
the answer is not to write a big

01:07:23,200 --> 01:07:28,880
monolith like a flight system

01:07:25,440 --> 01:07:32,319
which can do anything like

01:07:28,880 --> 01:07:35,359
cooking coffee or booking flights

01:07:32,319 --> 01:07:37,839
or doing my invoices

01:07:35,359 --> 01:07:40,559
no instead of this big system we are

01:07:37,839 --> 01:07:43,839
writing several tiny systems

01:07:40,559 --> 01:07:45,200
the idea is quite old it's almost about

01:07:43,839 --> 01:07:47,680
20 years old

01:07:45,200 --> 01:07:48,559
perhaps it's even older but about 20

01:07:47,680 --> 01:07:51,920
years ago

01:07:48,559 --> 01:07:54,720
it was described by domain-driven design

01:07:51,920 --> 01:07:55,599
this idea was rediscovered several years

01:07:54,720 --> 01:07:59,200
ago

01:07:55,599 --> 01:08:02,000
when people began to write microservices

01:07:59,200 --> 01:08:02,640
so in this case they would write not a

01:08:02,000 --> 01:08:05,599
flight

01:08:02,640 --> 01:08:08,240
application but the booking service and

01:08:05,599 --> 01:08:09,119
the check-in service and the luggage

01:08:08,240 --> 01:08:12,160
service

01:08:09,119 --> 01:08:15,359
and the boarding service and with terms

01:08:12,160 --> 01:08:17,920
of domain-driven design those services

01:08:15,359 --> 01:08:19,040
would be called the sub-domains a

01:08:17,920 --> 01:08:21,679
sub-domain

01:08:19,040 --> 01:08:22,640
is something that exists out there in

01:08:21,679 --> 01:08:25,920
the real world

01:08:22,640 --> 01:08:28,799
in your very business and the sub domain

01:08:25,920 --> 01:08:30,480
should know as less as possible about

01:08:28,799 --> 01:08:33,279
the other subdomains

01:08:30,480 --> 01:08:35,040
because if they know as little as

01:08:33,279 --> 01:08:37,440
possible about the others

01:08:35,040 --> 01:08:38,640
then they are really decoupled and

01:08:37,440 --> 01:08:41,359
decoupling means

01:08:38,640 --> 01:08:43,520
you can change something here without

01:08:41,359 --> 01:08:46,319
affecting something there

01:08:43,520 --> 01:08:47,920
i think we all know this very situation

01:08:46,319 --> 01:08:50,400
it's a ugly situation

01:08:47,920 --> 01:08:51,440
you fix a bug here or you add the dyna

01:08:50,400 --> 01:08:53,359
feature here

01:08:51,440 --> 01:08:55,679
everything works but there you break

01:08:53,359 --> 01:08:58,319
something we don't like to have

01:08:55,679 --> 01:09:00,080
this very situation when going with

01:08:58,319 --> 01:09:03,040
microservices as luke

01:09:00,080 --> 01:09:05,359
has mentioned before you can assign one

01:09:03,040 --> 01:09:07,679
theme to each of those services

01:09:05,359 --> 01:09:09,600
so they don't need to coordinate much

01:09:07,679 --> 01:09:13,040
with others

01:09:09,600 --> 01:09:14,719
and of course as we had micro services

01:09:13,040 --> 01:09:18,080
people started wondering

01:09:14,719 --> 01:09:20,960
how to put this idea into the front end

01:09:18,080 --> 01:09:21,839
and this was when micro frondants were

01:09:20,960 --> 01:09:24,719
born

01:09:21,839 --> 01:09:25,600
basically microfrondants go with the

01:09:24,719 --> 01:09:28,560
same idea

01:09:25,600 --> 01:09:29,920
it is about subdividing a big front end

01:09:28,560 --> 01:09:32,480
into tiny

01:09:29,920 --> 01:09:33,199
isolated parts parts that don't know

01:09:32,480 --> 01:09:36,719
much about

01:09:33,199 --> 01:09:39,279
each other so the big question is

01:09:36,719 --> 01:09:40,239
how to implement microfrontence and

01:09:39,279 --> 01:09:43,679
honestly

01:09:40,239 --> 01:09:46,719
there is a huge amount of possibilities

01:09:43,679 --> 01:09:49,359
but there was not this one and only

01:09:46,719 --> 01:09:51,920
solution this turnkey solution

01:09:49,359 --> 01:09:54,560
you had to deal with the dome you had to

01:09:51,920 --> 01:09:55,920
do dome manipulations some people dealt

01:09:54,560 --> 01:09:59,840
with iframes

01:09:55,920 --> 01:10:02,080
some people used big web components but

01:09:59,840 --> 01:10:04,400
this was not that funny

01:10:02,080 --> 01:10:05,760
and so the good message is that webpack

01:10:04,400 --> 01:10:08,679
5 will bring

01:10:05,760 --> 01:10:09,920
a nice turnkey solution for building

01:10:08,679 --> 01:10:12,960
microfrondens

01:10:09,920 --> 01:10:15,520
it's called module federation basically

01:10:12,960 --> 01:10:17,840
module federation allows you to load

01:10:15,520 --> 01:10:20,960
parts of another application

01:10:17,840 --> 01:10:21,360
into your application at rundown that

01:10:20,960 --> 01:10:24,400
means

01:10:21,360 --> 01:10:24,880
your application does not know the other

01:10:24,400 --> 01:10:27,840
parts

01:10:24,880 --> 01:10:28,640
upfront when compiling them it only

01:10:27,840 --> 01:10:31,199
knows it

01:10:28,640 --> 01:10:32,080
when it is loaded at run time and this

01:10:31,199 --> 01:10:36,000
is exactly

01:10:32,080 --> 01:10:38,239
what we need for microfront

01:10:36,000 --> 01:10:39,120
so in this talk i will show you two

01:10:38,239 --> 01:10:41,360
things

01:10:39,120 --> 01:10:43,440
first of all i want to show you how to

01:10:41,360 --> 01:10:47,040
use module federation

01:10:43,440 --> 01:10:49,520
it is easier than you might imagine

01:10:47,040 --> 01:10:50,080
and then i will give you a possible road

01:10:49,520 --> 01:10:53,199
map

01:10:50,080 --> 01:10:56,400
there is not an official road map but

01:10:53,199 --> 01:10:59,840
i will look into my crystals here

01:10:56,400 --> 01:11:02,480
and i will tell you what i'm seeing

01:10:59,840 --> 01:11:03,679
but first of all let me introduce myself

01:11:02,480 --> 01:11:06,159
i am manfred

01:11:03,679 --> 01:11:06,880
i'm a trainer and consultant for angular

01:11:06,159 --> 01:11:09,520
i'm doing

01:11:06,880 --> 01:11:11,679
a lot of angular consultancy and

01:11:09,520 --> 01:11:14,400
workshops nowadays

01:11:11,679 --> 01:11:15,280
in these times i'm doing those workshops

01:11:14,400 --> 01:11:18,080
remotely

01:11:15,280 --> 01:11:19,440
which really works well for instance the

01:11:18,080 --> 01:11:22,320
next workshop

01:11:19,440 --> 01:11:25,360
takes place next week and besides this

01:11:22,320 --> 01:11:28,719
i'm connected to the angular community

01:11:25,360 --> 01:11:31,040
am a google developer expert for angular

01:11:28,719 --> 01:11:32,320
and i'm a trusted collaborator in the

01:11:31,040 --> 01:11:35,520
angulard

01:11:32,320 --> 01:11:37,679
perhaps i might tell you a little story

01:11:35,520 --> 01:11:40,719
about the term collaborator

01:11:37,679 --> 01:11:41,600
because the thing is we in the german

01:11:40,719 --> 01:11:44,640
language

01:11:41,600 --> 01:11:45,199
also have the term collaborator and it

01:11:44,640 --> 01:11:48,719
means

01:11:45,199 --> 01:11:52,400
exactly the same as in english but

01:11:48,719 --> 01:11:53,760
always in a negative sense collaborating

01:11:52,400 --> 01:11:56,640
in german means

01:11:53,760 --> 01:11:57,679
teaming up with other people to destroy

01:11:56,640 --> 01:12:00,800
something

01:11:57,679 --> 01:12:02,159
and well if you look at my first pull

01:12:00,800 --> 01:12:04,560
requests

01:12:02,159 --> 01:12:05,760
it was more of the german meaning of

01:12:04,560 --> 01:12:08,239
collaborator

01:12:05,760 --> 01:12:09,679
meanwhile hopefully i have reached the

01:12:08,239 --> 01:12:11,840
english meeting

01:12:09,679 --> 01:12:13,600
saying this i'm doing a lot of stuff in

01:12:11,840 --> 01:12:15,920
the german speaking area

01:12:13,600 --> 01:12:17,280
and i'm always happy when i can work

01:12:15,920 --> 01:12:20,719
with companies

01:12:17,280 --> 01:12:23,600
uh that are based in other countries

01:12:20,719 --> 01:12:24,560
nowadays it's very easy because now we

01:12:23,600 --> 01:12:27,840
do everything

01:12:24,560 --> 01:12:31,040
remotely okay so much about me

01:12:27,840 --> 01:12:32,320
so let's get started with webpack five

01:12:31,040 --> 01:12:35,600
module federation

01:12:32,320 --> 01:12:40,880
what is this about and i'm always saying

01:12:35,600 --> 01:12:44,800
well module federation is like the 1980s

01:12:40,880 --> 01:12:47,679
you cannot understand it if you have not

01:12:44,800 --> 01:12:49,280
experienced them and so let's start with

01:12:47,679 --> 01:12:51,679
the demonstration

01:12:49,280 --> 01:12:54,560
in this demonstration i have a little

01:12:51,679 --> 01:12:57,360
application here i'm calling it my shell

01:12:54,560 --> 01:12:58,719
because it is capable of loading other

01:12:57,360 --> 01:13:00,960
microphones

01:12:58,719 --> 01:13:02,000
for instance when clicking here i'm

01:13:00,960 --> 01:13:04,560
loading this

01:13:02,000 --> 01:13:06,000
red dashed micro front end it's really a

01:13:04,560 --> 01:13:08,640
separate application

01:13:06,000 --> 01:13:09,679
it can really run in standalone mode

01:13:08,640 --> 01:13:11,679
like here

01:13:09,679 --> 01:13:12,880
it means you can develop it

01:13:11,679 --> 01:13:15,920
independently

01:13:12,880 --> 01:13:17,040
you can test it independently you can

01:13:15,920 --> 01:13:19,520
deploy it

01:13:17,040 --> 01:13:21,600
independently and then it's deployed

01:13:19,520 --> 01:13:23,199
this shell be loads the newest version

01:13:21,600 --> 01:13:26,400
or a configured version

01:13:23,199 --> 01:13:29,199
into its working area

01:13:26,400 --> 01:13:29,920
and when you look at this at runtime it

01:13:29,199 --> 01:13:32,960
looks a bit

01:13:29,920 --> 01:13:35,280
like let's say lazy loading so let's

01:13:32,960 --> 01:13:36,159
open the network tab here let's increase

01:13:35,280 --> 01:13:39,199
the size

01:13:36,159 --> 01:13:42,320
and let's click on flights so

01:13:39,199 --> 01:13:43,360
as you see here a chunk is loaded a

01:13:42,320 --> 01:13:48,640
chunk with the

01:13:43,360 --> 01:13:52,040
very self explaining name 798

01:13:48,640 --> 01:13:55,600
and as you see there it is very tiny

01:13:52,040 --> 01:13:58,239
3.1 case this is literally

01:13:55,600 --> 01:14:00,400
nothing and this clearly shows that i'm

01:13:58,239 --> 01:14:03,520
not reloading angular or

01:14:00,400 --> 01:14:06,880
any other library or framework i'm just

01:14:03,520 --> 01:14:09,280
loading what i need to display this

01:14:06,880 --> 01:14:11,760
tiny microphone then i just load the

01:14:09,280 --> 01:14:14,320
code for this microphone

01:14:11,760 --> 01:14:16,159
and this micro front end is sharing

01:14:14,320 --> 01:14:19,760
libraries with the shell

01:14:16,159 --> 01:14:20,719
the shell is providing let's say angular

01:14:19,760 --> 01:14:24,400
itself and

01:14:20,719 --> 01:14:26,000
other libraries like bootstrap for

01:14:24,400 --> 01:14:28,960
instance

01:14:26,000 --> 01:14:30,960
the microphone then to just picks it up

01:14:28,960 --> 01:14:33,840
so perhaps you're saying oh yeah

01:14:30,960 --> 01:14:36,159
manfred this is nothing new because what

01:14:33,840 --> 01:14:38,960
you're doing there is lazy loading no

01:14:36,159 --> 01:14:40,159
it's more than lazy loading because if

01:14:38,960 --> 01:14:42,560
you closely

01:14:40,159 --> 01:14:44,640
look at this location here it is

01:14:42,560 --> 01:14:48,719
localhost 5000

01:14:44,640 --> 01:14:50,719
and if you look there it is localhost

01:14:48,719 --> 01:14:53,280
3000 so that means

01:14:50,719 --> 01:14:55,679
this microfrontend comes from a

01:14:53,280 --> 01:14:59,040
completely different origin

01:14:55,679 --> 01:15:00,159
the shell application does not know it

01:14:59,040 --> 01:15:03,120
up front

01:15:00,159 --> 01:15:04,320
it only knows it when it loads it during

01:15:03,120 --> 01:15:06,800
random

01:15:04,320 --> 01:15:07,600
and this is what module federation

01:15:06,800 --> 01:15:11,440
allows you

01:15:07,600 --> 01:15:12,320
to do so in order to understand module

01:15:11,440 --> 01:15:14,560
federation

01:15:12,320 --> 01:15:16,640
we have to answer this very question

01:15:14,560 --> 01:15:19,920
here how is it possible

01:15:16,640 --> 01:15:23,679
to load separately compiled code at

01:15:19,920 --> 01:15:26,239
runtime perhaps you are saying now well

01:15:23,679 --> 01:15:26,880
that cannot be that difficult because

01:15:26,239 --> 01:15:29,440
you know

01:15:26,880 --> 01:15:31,360
we have this import statement this

01:15:29,440 --> 01:15:34,480
dynamic inboard which came with

01:15:31,360 --> 01:15:37,760
ecmascript 2017 and even before

01:15:34,480 --> 01:15:40,480
we had require amd require and

01:15:37,760 --> 01:15:43,120
node require so it cannot be that

01:15:40,480 --> 01:15:45,840
difficult to use those mechanisms

01:15:43,120 --> 01:15:47,120
to point to another origin and to load

01:15:45,840 --> 01:15:50,320
something from them

01:15:47,120 --> 01:15:53,600
but the thing is when using backpack

01:15:50,320 --> 01:15:57,360
and so when using the angular cli this

01:15:53,600 --> 01:15:58,880
star's network webpack does not allow

01:15:57,360 --> 01:16:01,920
for this by default

01:15:58,880 --> 01:16:04,960
because web back assumes that everything

01:16:01,920 --> 01:16:05,840
is known at compiler map back is

01:16:04,960 --> 01:16:08,320
compiling

01:16:05,840 --> 01:16:09,679
everything and then it is doing some

01:16:08,320 --> 01:16:12,640
optimizations

01:16:09,679 --> 01:16:14,800
and after that it splits everything into

01:16:12,640 --> 01:16:17,199
bundles that can be lazy loaded

01:16:14,800 --> 01:16:20,159
but before splitting everything needs to

01:16:17,199 --> 01:16:22,960
be compiled and optimized together

01:16:20,159 --> 01:16:25,679
and that's why things like this did not

01:16:22,960 --> 01:16:28,159
work in the past

01:16:25,679 --> 01:16:30,640
module federation which will arrive with

01:16:28,159 --> 01:16:34,080
webpack 5 will change this

01:16:30,640 --> 01:16:37,520
and this will work too easy it is

01:16:34,080 --> 01:16:40,640
really too easy to be true because

01:16:37,520 --> 01:16:43,840
everything you need at first is a shell

01:16:40,640 --> 01:16:47,040
which is also called the host with the

01:16:43,840 --> 01:16:49,280
general terms module federation is using

01:16:47,040 --> 01:16:51,280
and you need another project which i

01:16:49,280 --> 01:16:53,360
would call the micro front end

01:16:51,280 --> 01:16:56,480
module federation is using the more

01:16:53,360 --> 01:16:59,440
general term remote

01:16:56,480 --> 01:17:00,239
and then the shell gets a mapping a url

01:16:59,440 --> 01:17:03,840
mapping

01:17:00,239 --> 01:17:06,800
for instance it maps the url mfe1

01:17:03,840 --> 01:17:08,000
which stands for micro front and one in

01:17:06,800 --> 01:17:11,840
this case yes

01:17:08,000 --> 01:17:15,520
i know i'm very creative and here mfe1

01:17:11,840 --> 01:17:19,280
is a link to mfe1

01:17:15,520 --> 01:17:22,560
that means it is used to define an elias

01:17:19,280 --> 01:17:26,080
here it is a non-elias i'm saying hey

01:17:22,560 --> 01:17:28,640
when i'm starting an url with mfe1

01:17:26,080 --> 01:17:31,239
i'm referring to something over there

01:17:28,640 --> 01:17:35,440
something over there that's also called

01:17:31,239 --> 01:17:36,320
mfe1 over there this does not have to be

01:17:35,440 --> 01:17:39,360
the case

01:17:36,320 --> 01:17:41,520
perhaps it is called mfe1 here and

01:17:39,360 --> 01:17:43,040
something different over there like

01:17:41,520 --> 01:17:46,000
manfred which is a

01:17:43,040 --> 01:17:48,480
very good idea please always call your

01:17:46,000 --> 01:17:50,480
micro frontends manfred or batman

01:17:48,480 --> 01:17:52,320
or something like this your colleagues

01:17:50,480 --> 01:17:55,440
will have you okay

01:17:52,320 --> 01:17:58,000
here i'm just defining a url

01:17:55,440 --> 01:17:59,120
i'm not defining where this micro front

01:17:58,000 --> 01:18:02,400
end is located

01:17:59,120 --> 01:18:04,880
this comes later in some seconds

01:18:02,400 --> 01:18:06,239
then within this micro front end within

01:18:04,880 --> 01:18:09,600
this remote

01:18:06,239 --> 01:18:12,800
i can expose parts of the front end

01:18:09,600 --> 01:18:13,520
i can say hey i want to expose this very

01:18:12,800 --> 01:18:17,199
file

01:18:13,520 --> 01:18:18,640
under the name cmb using this i can

01:18:17,199 --> 01:18:21,199
expose components

01:18:18,640 --> 01:18:23,440
in angular i could also expose ng

01:18:21,199 --> 01:18:26,400
modules with subroutes

01:18:23,440 --> 01:18:27,840
literally i can expose everything and

01:18:26,400 --> 01:18:30,719
then i guarantee you

01:18:27,840 --> 01:18:31,600
something beautiful is happening then i

01:18:30,719 --> 01:18:34,960
can do an

01:18:31,600 --> 01:18:37,760
import within the shell and this inboard

01:18:34,960 --> 01:18:40,239
is not now pointing not pointing to

01:18:37,760 --> 01:18:42,560
something that exists within the shell

01:18:40,239 --> 01:18:45,120
but to something that exists over there

01:18:42,560 --> 01:18:48,159
here i'm pointing to mfe1

01:18:45,120 --> 01:18:51,280
and mfe1 is pointing to this microphone

01:18:48,159 --> 01:18:54,400
and do this remote which is published

01:18:51,280 --> 01:18:55,440
to another location and over there i'm

01:18:54,400 --> 01:18:58,800
grabbing

01:18:55,440 --> 01:19:02,640
what's called cmb and i'm using it

01:18:58,800 --> 01:19:02,640
it's really as easy as that

01:19:02,880 --> 01:19:08,960
so perhaps you're wondering how to get

01:19:05,040 --> 01:19:11,920
the url from the micro front end and

01:19:08,960 --> 01:19:14,960
there are several possibilities for this

01:19:11,920 --> 01:19:16,640
the easiest possibility to get the url

01:19:14,960 --> 01:19:19,199
of the micro front end

01:19:16,640 --> 01:19:19,920
is to compile the micro front end in a

01:19:19,199 --> 01:19:23,040
way

01:19:19,920 --> 01:19:24,080
so that webpack also spits out a remote

01:19:23,040 --> 01:19:27,040
entry point

01:19:24,080 --> 01:19:28,480
a remote entry point is just a tiny

01:19:27,040 --> 01:19:31,440
javascript file

01:19:28,480 --> 01:19:34,640
just several bytes and then you load

01:19:31,440 --> 01:19:37,760
this tiny javascript file into the shell

01:19:34,640 --> 01:19:38,480
and this tiny javascript file now tells

01:19:37,760 --> 01:19:42,239
the shell

01:19:38,480 --> 01:19:44,080
where to find mfe1 of course you can

01:19:42,239 --> 01:19:47,199
also do this dynamically

01:19:44,080 --> 01:19:48,320
you can uh create a dynamic scriptdeck

01:19:47,199 --> 01:19:50,880
and meanwhile

01:19:48,320 --> 01:19:52,320
you can also put the location of the

01:19:50,880 --> 01:19:54,640
remote entry point

01:19:52,320 --> 01:19:55,600
into the backpack configuration of the

01:19:54,640 --> 01:19:58,400
shell

01:19:55,600 --> 01:19:59,679
also as you will see in one of the next

01:19:58,400 --> 01:20:02,719
demonstrations

01:19:59,679 --> 01:20:06,239
you can define everything dynamically

01:20:02,719 --> 01:20:09,520
you can run some setup procedures when

01:20:06,239 --> 01:20:12,159
uh initializing the shell and those

01:20:09,520 --> 01:20:14,800
setup procedures can tell the shell well

01:20:12,159 --> 01:20:16,400
i know under this location we can find

01:20:14,800 --> 01:20:18,639
this micro front end

01:20:16,400 --> 01:20:20,960
and under that location we can find

01:20:18,639 --> 01:20:23,600
another microphone

01:20:20,960 --> 01:20:26,400
saying this there are a lot of

01:20:23,600 --> 01:20:28,960
possibilities for defining the url

01:20:26,400 --> 01:20:32,159
there are more static possibilities and

01:20:28,960 --> 01:20:34,560
of course dynamic ones

01:20:32,159 --> 01:20:36,960
another question you might come up with

01:20:34,560 --> 01:20:39,679
is how to share libraries

01:20:36,960 --> 01:20:40,800
because we don't want to load angular

01:20:39,679 --> 01:20:44,159
five times

01:20:40,800 --> 01:20:46,400
if we have five microfrondens we don't

01:20:44,159 --> 01:20:49,600
want to load rack 10 dimes

01:20:46,400 --> 01:20:50,639
if we have 10 microphones so how to deal

01:20:49,600 --> 01:20:53,679
with this

01:20:50,639 --> 01:20:55,440
well actually this is also quite easy

01:20:53,679 --> 01:20:58,719
with micro front ends and

01:20:55,440 --> 01:21:01,199
especially with module federation

01:20:58,719 --> 01:21:02,800
everything you need in the configuration

01:21:01,199 --> 01:21:05,120
is a shared array

01:21:02,800 --> 01:21:05,920
it does not need to be an array it can

01:21:05,120 --> 01:21:08,960
also be

01:21:05,920 --> 01:21:09,920
a more advanced data structure but the

01:21:08,960 --> 01:21:12,719
easiest

01:21:09,920 --> 01:21:15,040
way to get started is to use an array

01:21:12,719 --> 01:21:17,199
and if you are pointing to a specific

01:21:15,040 --> 01:21:19,760
library here on the shelf

01:21:17,199 --> 01:21:21,520
if you are pointing to the same library

01:21:19,760 --> 01:21:24,960
within the micro front end

01:21:21,520 --> 01:21:28,080
this library will be shared that means

01:21:24,960 --> 01:21:28,880
the shell loads it the micro then does

01:21:28,080 --> 01:21:31,760
not load it

01:21:28,880 --> 01:21:34,159
the microphone then checks at runtime

01:21:31,760 --> 01:21:37,199
does the shell already have it

01:21:34,159 --> 01:21:38,320
does the shell share it with me and if

01:21:37,199 --> 01:21:40,960
this is the case

01:21:38,320 --> 01:21:43,679
it is just reusing angular core from the

01:21:40,960 --> 01:21:46,639
shell if this is not the case

01:21:43,679 --> 01:21:49,280
the microfrondent can fall back to load

01:21:46,639 --> 01:21:52,239
its own version of angular code

01:21:49,280 --> 01:21:53,600
that's why all those shared libraries

01:21:52,239 --> 01:21:56,719
are put in

01:21:53,600 --> 01:21:58,800
bundles of their own so that they can be

01:21:56,719 --> 01:22:02,239
loaded on demand if the shell

01:21:58,800 --> 01:22:02,239
decides to not share them

01:22:03,199 --> 01:22:10,080
and if you ask me this is very nice

01:22:06,400 --> 01:22:12,400
but conflicting shared libraries is also

01:22:10,080 --> 01:22:13,360
one of the biggest challenges in the

01:22:12,400 --> 01:22:16,719
area

01:22:13,360 --> 01:22:17,920
of microfrontend this does not only

01:22:16,719 --> 01:22:21,600
belong to

01:22:17,920 --> 01:22:24,400
a module federation this is a big

01:22:21,600 --> 01:22:26,880
challenge with each and every strategy

01:22:24,400 --> 01:22:29,679
you are going with

01:22:26,880 --> 01:22:30,000
there are several ways to deal with it

01:22:29,679 --> 01:22:32,239
one

01:22:30,000 --> 01:22:33,600
option could be to reuse the wrong

01:22:32,239 --> 01:22:37,040
version anyway

01:22:33,600 --> 01:22:40,000
like the australian know this big bird

01:22:37,040 --> 01:22:41,840
who is putting his head into the sand

01:22:40,000 --> 01:22:44,960
until the danger is over

01:22:41,840 --> 01:22:45,840
this happens here you re-use the library

01:22:44,960 --> 01:22:48,000
anyway

01:22:45,840 --> 01:22:49,760
even though the shell shears the wrong

01:22:48,000 --> 01:22:52,880
version

01:22:49,760 --> 01:22:54,320
let's be tough option would be to load

01:22:52,880 --> 01:22:57,920
your own version

01:22:54,320 --> 01:23:00,960
so the shell is sharing angular 9

01:22:57,920 --> 01:23:02,639
you need angular then and so you'll need

01:23:00,960 --> 01:23:06,080
you need to load your own angular

01:23:02,639 --> 01:23:09,360
version which is 10 in this case

01:23:06,080 --> 01:23:12,480
and honestly both might be bad both

01:23:09,360 --> 01:23:16,639
is nice but both might be bad

01:23:12,480 --> 01:23:20,639
if it comes to a tiny library like rxjs

01:23:16,639 --> 01:23:23,520
or do some http gi and this might be

01:23:20,639 --> 01:23:25,679
occasion but when it comes to your

01:23:23,520 --> 01:23:26,800
leading framework to your leading

01:23:25,679 --> 01:23:30,080
library

01:23:26,800 --> 01:23:33,440
none of those options is perfect both

01:23:30,080 --> 01:23:37,199
options will cause some damage i

01:23:33,440 --> 01:23:39,440
suppose and so you might to prevent

01:23:37,199 --> 01:23:42,000
these situations with conventions

01:23:39,440 --> 01:23:43,120
with contracts or even with a mono

01:23:42,000 --> 01:23:46,840
repository

01:23:43,120 --> 01:23:50,159
yes monorepos and micro frontends fit

01:23:46,840 --> 01:23:52,560
together microfrontends by the book

01:23:50,159 --> 01:23:54,000
are always done with several

01:23:52,560 --> 01:23:56,400
repositories

01:23:54,000 --> 01:23:58,719
but there is really a sweet spot if you

01:23:56,400 --> 01:24:02,400
try to combine those ideas

01:23:58,719 --> 01:24:05,520
of having monorepos and separately

01:24:02,400 --> 01:24:08,159
compilable and deployable micro front

01:24:05,520 --> 01:24:11,520
ends but this is a whole different story

01:24:08,159 --> 01:24:14,080
and i will not tell the story today

01:24:11,520 --> 01:24:16,320
of course integration testing can help

01:24:14,080 --> 01:24:18,880
to make sure that everything that

01:24:16,320 --> 01:24:19,840
meets at run time can work seamlessly

01:24:18,880 --> 01:24:23,600
together

01:24:19,840 --> 01:24:26,320
and another idea seems to be very clever

01:24:23,600 --> 01:24:27,280
before deploying your micro front end

01:24:26,320 --> 01:24:29,840
you could

01:24:27,280 --> 01:24:31,280
compare your versions the versions of

01:24:29,840 --> 01:24:33,840
your micro front lens

01:24:31,280 --> 01:24:35,679
and the shared version of the currently

01:24:33,840 --> 01:24:38,000
deployed autobots

01:24:35,679 --> 01:24:40,960
of the currently deployed shell of the

01:24:38,000 --> 01:24:44,159
currently deployed other microfrontends

01:24:40,960 --> 01:24:49,360
so you can check if it is safe to deploy

01:24:44,159 --> 01:24:49,360
this very version of your micro from it

01:24:50,159 --> 01:24:54,639
okay let me show you and demonstration

01:24:53,280 --> 01:24:57,760
for this

01:24:54,639 --> 01:25:00,400
in this demonstration i will dig a bit

01:24:57,760 --> 01:25:02,080
into the source code the source code of

01:25:00,400 --> 01:25:05,679
this application

01:25:02,080 --> 01:25:10,080
and for this

01:25:05,679 --> 01:25:10,080
let's start studio code

01:25:10,880 --> 01:25:18,480
and here let's open

01:25:14,239 --> 01:25:20,719
my routing configuration app.routesds

01:25:18,480 --> 01:25:24,800
from machine

01:25:20,719 --> 01:25:25,600
so as you see here everything my shell

01:25:24,800 --> 01:25:29,520
is doing

01:25:25,600 --> 01:25:32,719
is lazy loading it is doing lazy loading

01:25:29,520 --> 01:25:34,719
using this route with low children and

01:25:32,719 --> 01:25:39,679
using a dynamic import an

01:25:34,719 --> 01:25:42,560
ecmascript 2017 based dynamic import

01:25:39,679 --> 01:25:44,960
does not know at all that this url is

01:25:42,560 --> 01:25:46,560
mapped to another remote to another

01:25:44,960 --> 01:25:48,719
microphone and so

01:25:46,560 --> 01:25:50,239
from angular's perspective from the

01:25:48,719 --> 01:25:53,120
shell's perspective

01:25:50,239 --> 01:25:55,199
everything is like all the time we have

01:25:53,120 --> 01:25:58,320
just traditional angular here

01:25:55,199 --> 01:26:00,880
loading another module on demand but

01:25:58,320 --> 01:26:01,520
underneath the covers that back make

01:26:00,880 --> 01:26:04,880
sure

01:26:01,520 --> 01:26:06,880
that every time this url is requested

01:26:04,880 --> 01:26:08,800
we are fetching something from over

01:26:06,880 --> 01:26:11,840
there from this separately

01:26:08,800 --> 01:26:12,480
deployed microphone and to make this

01:26:11,840 --> 01:26:15,600
happen

01:26:12,480 --> 01:26:17,679
we need a backpack configuration here we

01:26:15,600 --> 01:26:18,480
see the webpack configuration of the

01:26:17,679 --> 01:26:21,600
shell

01:26:18,480 --> 01:26:24,400
it's a typical webpack configuration

01:26:21,600 --> 01:26:26,960
everything we need to add is this the

01:26:24,400 --> 01:26:29,920
module federation plugin

01:26:26,960 --> 01:26:30,639
it is telling the shell well i'm mapping

01:26:29,920 --> 01:26:34,000
the path

01:26:30,639 --> 01:26:38,000
mfe1 to something that's also called

01:26:34,000 --> 01:26:40,719
mfe1 over there in the newest version of

01:26:38,000 --> 01:26:41,760
module federation you can also define

01:26:40,719 --> 01:26:45,280
here the buff

01:26:41,760 --> 01:26:46,239
i'm doing this at runtime and then i'm

01:26:45,280 --> 01:26:48,239
saying hey

01:26:46,239 --> 01:26:49,520
i'm sharing those libraries with the

01:26:48,239 --> 01:26:52,960
microfrontend

01:26:49,520 --> 01:26:55,679
it does not bring its own i'm sharing it

01:26:52,960 --> 01:26:57,679
this needs to be done for the shell when

01:26:55,679 --> 01:27:00,159
it comes to the micro front end

01:26:57,679 --> 01:27:02,320
i'm also using the module federation

01:27:00,159 --> 01:27:05,320
plugin it's the same plugin

01:27:02,320 --> 01:27:06,480
i'm assigning a name to this uh

01:27:05,320 --> 01:27:09,920
microfrontend

01:27:06,480 --> 01:27:12,000
mfe1 i am defining the name of the

01:27:09,920 --> 01:27:15,040
remote entry point

01:27:12,000 --> 01:27:17,600
and i am exposing stuff for the shell

01:27:15,040 --> 01:27:20,080
from the honda honda app component and

01:27:17,600 --> 01:27:23,760
honda on the honda flights module

01:27:20,080 --> 01:27:27,679
is what i'm exposing and i'm exposing it

01:27:23,760 --> 01:27:29,760
under those pretty names i'm also

01:27:27,679 --> 01:27:30,719
saying hey i want to share stuff with

01:27:29,760 --> 01:27:33,280
the shell so

01:27:30,719 --> 01:27:34,080
if the shell is offering those libraries

01:27:33,280 --> 01:27:38,639
i'm just

01:27:34,080 --> 01:27:40,960
grabbing them i'm not loading my own

01:27:38,639 --> 01:27:41,920
of course this is very natural if you

01:27:40,960 --> 01:27:44,719
are using

01:27:41,920 --> 01:27:46,000
react or if you're using view for

01:27:44,719 --> 01:27:48,960
angular developers

01:27:46,000 --> 01:27:50,560
using webpack configurations is not

01:27:48,960 --> 01:27:53,920
usual

01:27:50,560 --> 01:27:55,199
anymore it was usual back then i think

01:27:53,920 --> 01:27:58,000
four years ago

01:27:55,199 --> 01:27:59,920
but meanwhile we have the angular cli

01:27:58,000 --> 01:28:01,920
which is creating this webpack

01:27:59,920 --> 01:28:05,199
configuration for us

01:28:01,920 --> 01:28:07,840
and uh so in the end we

01:28:05,199 --> 01:28:08,719
have to find a way to tell the angular

01:28:07,840 --> 01:28:11,600
cli

01:28:08,719 --> 01:28:13,040
to do what it is doing all the time and

01:28:11,600 --> 01:28:16,000
in addition to it

01:28:13,040 --> 01:28:17,360
it needs to squeeze this configuration

01:28:16,000 --> 01:28:20,159
into its very own

01:28:17,360 --> 01:28:21,199
backpack configuration for this i have

01:28:20,159 --> 01:28:25,600
some ideas

01:28:21,199 --> 01:28:28,800
i will talk about it in some minutes

01:28:25,600 --> 01:28:32,080
okay so everything we are doing is

01:28:28,800 --> 01:28:35,440
to use this module federation plugin

01:28:32,080 --> 01:28:37,120
to point to a remote or to define a

01:28:35,440 --> 01:28:39,600
remote exposing

01:28:37,120 --> 01:28:39,600
things

01:28:40,239 --> 01:28:44,639
and now everything we need to do within

01:28:43,520 --> 01:28:48,639
the shell

01:28:44,639 --> 01:28:51,520
is i think it was the wrong index html

01:28:48,639 --> 01:28:53,600
let's take the right one everything we

01:28:51,520 --> 01:28:56,480
need to do within the shell

01:28:53,600 --> 01:28:57,280
is to reference this remote and rip on

01:28:56,480 --> 01:29:00,320
it

01:28:57,280 --> 01:29:02,560
this can be done statically like here by

01:29:00,320 --> 01:29:04,880
introducing a static scrap deck of

01:29:02,560 --> 01:29:08,840
course we can create a dynamic

01:29:04,880 --> 01:29:11,840
scrap attack and there

01:29:08,840 --> 01:29:11,840
is

01:29:13,600 --> 01:29:21,199
a thing called dynamic marginal

01:29:17,560 --> 01:29:23,840
federation where i'm using

01:29:21,199 --> 01:29:24,480
in some seconds okay and this is

01:29:23,840 --> 01:29:27,280
everything

01:29:24,480 --> 01:29:27,679
you need to get started with this kind

01:29:27,280 --> 01:29:32,400
of

01:29:27,679 --> 01:29:35,120
mutual federation saying this

01:29:32,400 --> 01:29:36,000
there is another flavor of martial

01:29:35,120 --> 01:29:38,000
federation

01:29:36,000 --> 01:29:39,280
i am calling it dynamic module

01:29:38,000 --> 01:29:41,840
federation

01:29:39,280 --> 01:29:43,360
in the classic flavor in the classical

01:29:41,840 --> 01:29:45,920
flavor which is

01:29:43,360 --> 01:29:46,960
very nice to get started with module

01:29:45,920 --> 01:29:49,520
federation

01:29:46,960 --> 01:29:51,600
you define the remotes directly within

01:29:49,520 --> 01:29:53,840
the shells configuration

01:29:51,600 --> 01:29:54,719
when you go with dynamic module

01:29:53,840 --> 01:29:57,679
federation

01:29:54,719 --> 01:30:00,000
you don't do this in this case you don't

01:29:57,679 --> 01:30:01,199
know your remotes your micro front ends

01:30:00,000 --> 01:30:03,440
up front

01:30:01,199 --> 01:30:05,360
perhaps you are calling some service

01:30:03,440 --> 01:30:08,400
then the application is starting

01:30:05,360 --> 01:30:10,719
and the service tells you well today

01:30:08,400 --> 01:30:14,320
we have this micro front end over there

01:30:10,719 --> 01:30:14,320
and this micro front and here

01:30:14,400 --> 01:30:17,840
instead of mapping your micro front ends

01:30:16,880 --> 01:30:20,880
up front

01:30:17,840 --> 01:30:22,880
you are just using a helper function i'm

01:30:20,880 --> 01:30:25,520
calling this helper function load

01:30:22,880 --> 01:30:27,520
remote module saying this this is a

01:30:25,520 --> 01:30:30,000
handwritten helper function

01:30:27,520 --> 01:30:30,960
it is dealing with the webpack runtime

01:30:30,000 --> 01:30:34,320
api

01:30:30,960 --> 01:30:38,159
this webpack runtime api is

01:30:34,320 --> 01:30:39,120
not that pretty if you ask me it's a low

01:30:38,159 --> 01:30:42,400
level api

01:30:39,120 --> 01:30:43,440
and so you will very likely end up with

01:30:42,400 --> 01:30:45,760
wrapping it

01:30:43,440 --> 01:30:46,719
into something that can be used nicely

01:30:45,760 --> 01:30:49,760
like this

01:30:46,719 --> 01:30:51,920
load remote module helper function but

01:30:49,760 --> 01:30:53,040
if you look at the aquaman's of load

01:30:51,920 --> 01:30:56,000
remote module

01:30:53,040 --> 01:30:57,600
you see what we have defined before in a

01:30:56,000 --> 01:31:00,239
static manner

01:30:57,600 --> 01:31:00,880
you see it is pointing to a remote entry

01:31:00,239 --> 01:31:04,080
point

01:31:00,880 --> 01:31:05,920
it is pointing to the name which has

01:31:04,080 --> 01:31:10,239
been assigned over there

01:31:05,920 --> 01:31:12,800
and it is pointing to the exposed file

01:31:10,239 --> 01:31:15,280
but now it is dynamic that means you can

01:31:12,800 --> 01:31:19,520
get all this data at runtime

01:31:15,280 --> 01:31:19,520
from a lookup service for instance

01:31:19,760 --> 01:31:23,600
and for this i have another

01:31:21,199 --> 01:31:27,520
demonstration for you

01:31:23,600 --> 01:31:28,960
so let me switch windows the blue screen

01:31:27,520 --> 01:31:30,159
is the screen with the second

01:31:28,960 --> 01:31:32,960
demonstration

01:31:30,159 --> 01:31:34,560
very important so that i'm not getting

01:31:32,960 --> 01:31:37,760
confused

01:31:34,560 --> 01:31:40,960
everything is starting so let's

01:31:37,760 --> 01:31:40,960
reload this

01:31:41,440 --> 01:31:44,719
and here we go so what i'm having here

01:31:44,159 --> 01:31:47,360
does

01:31:44,719 --> 01:31:48,480
nothing have to do with uh

01:31:47,360 --> 01:31:52,159
microfrontends

01:31:48,480 --> 01:31:53,600
this is just just a plug-in based

01:31:52,159 --> 01:31:57,520
workflow design

01:31:53,600 --> 01:32:00,880
that means i can add some workflow tasks

01:31:57,520 --> 01:32:03,440
to this page and the best of this is

01:32:00,880 --> 01:32:05,360
the workflow designer does not know

01:32:03,440 --> 01:32:08,239
those tasks upfront

01:32:05,360 --> 01:32:10,080
it is informed about those tasks by a

01:32:08,239 --> 01:32:12,800
configuration service

01:32:10,080 --> 01:32:14,320
when starting up the application this

01:32:12,800 --> 01:32:17,199
configuration service

01:32:14,320 --> 01:32:18,159
informs my plugin based workflow

01:32:17,199 --> 01:32:21,840
designer

01:32:18,159 --> 01:32:25,520
where to find which action for instance

01:32:21,840 --> 01:32:28,400
is download action here can be found

01:32:25,520 --> 01:32:29,280
under this location within this micro

01:32:28,400 --> 01:32:32,480
front end

01:32:29,280 --> 01:32:35,679
and it is exposed under this name the

01:32:32,480 --> 01:32:37,440
upload action can be also found within

01:32:35,679 --> 01:32:39,360
the same micro front end

01:32:37,440 --> 01:32:42,239
at the same location but it's called

01:32:39,360 --> 01:32:44,480
upload the analyze action

01:32:42,239 --> 01:32:46,880
can be found on another location here

01:32:44,480 --> 01:32:49,040
you see it is three thousand one and not

01:32:46,880 --> 01:32:50,800
three thousand within another micro

01:32:49,040 --> 01:32:54,159
front end and one more time

01:32:50,800 --> 01:32:56,480
it is exposed under another name

01:32:54,159 --> 01:32:58,320
so everything i need to do here is to

01:32:56,480 --> 01:33:01,440
take this lookup data

01:32:58,320 --> 01:33:03,520
and put it into this helper function i

01:33:01,440 --> 01:33:06,840
have shown you before and well

01:33:03,520 --> 01:33:08,639
then i'm getting the component from over

01:33:06,840 --> 01:33:12,239
there

01:33:08,639 --> 01:33:14,400
nice isn't it of course as mentioned

01:33:12,239 --> 01:33:15,920
this does not have to do much with

01:33:14,400 --> 01:33:18,800
microphone lens but this

01:33:15,920 --> 01:33:20,960
is the same mechanism and it clearly

01:33:18,800 --> 01:33:24,080
shows that you can load everything

01:33:20,960 --> 01:33:26,800
workflow tasks or full microfrondens

01:33:24,080 --> 01:33:29,600
at runtime without the needs to know

01:33:26,800 --> 01:33:29,600
them upfront

01:33:32,320 --> 01:33:37,120
okay cool so perhaps you're saying now

01:33:35,679 --> 01:33:39,840
well i like this

01:33:37,120 --> 01:33:40,960
when can i have this and now i have to

01:33:39,840 --> 01:33:43,920
say well

01:33:40,960 --> 01:33:45,040
please be patient because we are talking

01:33:43,920 --> 01:33:48,719
about something

01:33:45,040 --> 01:33:51,760
that is beta currently it is in beta

01:33:48,719 --> 01:33:52,639
so the thing is backpack 5 is currently

01:33:51,760 --> 01:33:54,719
in beta

01:33:52,639 --> 01:33:56,239
and there is not an official release

01:33:54,719 --> 01:34:00,000
date i know of

01:33:56,239 --> 01:34:01,280
but uh rumor says it will be released in

01:34:00,000 --> 01:34:05,280
late summer

01:34:01,280 --> 01:34:06,080
perhaps in early fall and if this is the

01:34:05,280 --> 01:34:09,840
case

01:34:06,080 --> 01:34:12,719
it comes early enough to be incorporated

01:34:09,840 --> 01:34:15,120
into the next version of the cli you

01:34:12,719 --> 01:34:16,239
cannot really use it nowadays with

01:34:15,120 --> 01:34:19,280
angular

01:34:16,239 --> 01:34:21,600
because to make uh it work

01:34:19,280 --> 01:34:22,960
with angular i needed to batch the

01:34:21,600 --> 01:34:25,679
angular cli

01:34:22,960 --> 01:34:28,239
that means in my examples here i'm using

01:34:25,679 --> 01:34:30,639
a patched version of the angular cli

01:34:28,239 --> 01:34:32,560
obviously this is not a good idea for

01:34:30,639 --> 01:34:36,080
production ready software so

01:34:32,560 --> 01:34:37,760
don't try it at home and also we need to

01:34:36,080 --> 01:34:39,199
deal with this custom backpack

01:34:37,760 --> 01:34:42,320
configuration and

01:34:39,199 --> 01:34:43,360
angular developers don't do things like

01:34:42,320 --> 01:34:47,600
this nowadays

01:34:43,360 --> 01:34:51,040
because we have the angular cli

01:34:47,600 --> 01:34:55,760
and the cli cannot incorporate it before

01:34:51,040 --> 01:34:58,560
version 11 which is due in fall 2020.

01:34:55,760 --> 01:34:59,520
in the last years it was late november i

01:34:58,560 --> 01:35:02,400
guess

01:34:59,520 --> 01:35:03,760
so there is a chance a very good chance

01:35:02,400 --> 01:35:06,719
that webpack 5

01:35:03,760 --> 01:35:08,159
comes early enough to be incorporated

01:35:06,719 --> 01:35:10,960
into version 11

01:35:08,159 --> 01:35:12,400
and then everything is fine well

01:35:10,960 --> 01:35:14,880
everything we need then

01:35:12,400 --> 01:35:16,880
is to find a way to squeeze this tiny

01:35:14,880 --> 01:35:20,159
module federation config

01:35:16,880 --> 01:35:23,760
into angular spec huge webpack

01:35:20,159 --> 01:35:24,560
configuration and for this there are

01:35:23,760 --> 01:35:27,360
solutions

01:35:24,560 --> 01:35:29,679
available already today for this you can

01:35:27,360 --> 01:35:32,800
go with custom builders

01:35:29,679 --> 01:35:35,360
custom builder is just extending the cli

01:35:32,800 --> 01:35:36,159
it is teaching the cli new tricks for

01:35:35,360 --> 01:35:38,480
building

01:35:36,159 --> 01:35:41,840
and one of those is a builder i have

01:35:38,480 --> 01:35:43,119
written it's called anshi x build plus

01:35:41,840 --> 01:35:46,560
ngx build plus

01:35:43,119 --> 01:35:48,960
allows you for instance to merge a tiny

01:35:46,560 --> 01:35:51,280
partial backpack configuration

01:35:48,960 --> 01:35:52,719
it could be a backpack configuration

01:35:51,280 --> 01:35:56,560
with a module

01:35:52,719 --> 01:35:58,000
federation config into the big bad back

01:35:56,560 --> 01:36:01,280
configuration of

01:35:58,000 --> 01:36:02,400
angular yeah and then you are on the

01:36:01,280 --> 01:36:07,760
safe side

01:36:02,400 --> 01:36:10,560
and you can use this cool stuff here

01:36:07,760 --> 01:36:12,800
well saying this if you really like this

01:36:10,560 --> 01:36:14,000
topic i have this free ebook you can

01:36:12,800 --> 01:36:17,520
check it out

01:36:14,000 --> 01:36:19,600
uh under my website angular architect co

01:36:17,520 --> 01:36:20,320
slash book you can just download it

01:36:19,600 --> 01:36:22,719
there

01:36:20,320 --> 01:36:24,639
you find a lot of material about

01:36:22,719 --> 01:36:28,400
microfrontence india

01:36:24,639 --> 01:36:31,520
also material about alternatives to

01:36:28,400 --> 01:36:34,000
module federation and it also tells you

01:36:31,520 --> 01:36:37,600
a lot about domain-driven design

01:36:34,000 --> 01:36:40,639
which is the methodological basis of

01:36:37,600 --> 01:36:43,760
micro front ends as luka told you

01:36:40,639 --> 01:36:44,639
in the last session so if you like this

01:36:43,760 --> 01:36:47,360
topic

01:36:44,639 --> 01:36:48,320
check it out if you like this talk also

01:36:47,360 --> 01:36:51,040
check it out

01:36:48,320 --> 01:36:52,159
and if you did not like this doc check

01:36:51,040 --> 01:36:54,320
it out anyway

01:36:52,159 --> 01:36:55,199
perhaps i'm writing better than i'm

01:36:54,320 --> 01:36:58,719
speaking

01:36:55,199 --> 01:36:59,600
who knows okay let me come to a

01:36:58,719 --> 01:37:02,080
conclusion

01:36:59,600 --> 01:37:03,440
what did we see today well we have seen

01:37:02,080 --> 01:37:06,880
the main purpose

01:37:03,440 --> 01:37:09,840
of using micro front dance is k themes

01:37:06,880 --> 01:37:10,400
please never ever forget this it is not

01:37:09,840 --> 01:37:13,600
about

01:37:10,400 --> 01:37:16,000
fancy technology it is not about mixing

01:37:13,600 --> 01:37:16,960
and matching different frontends yeah

01:37:16,000 --> 01:37:19,520
that's possible

01:37:16,960 --> 01:37:20,639
but the main purpose is scaling things

01:37:19,520 --> 01:37:23,040
and you know

01:37:20,639 --> 01:37:23,920
a good friend of mine told me teams is

01:37:23,040 --> 01:37:26,719
bro

01:37:23,920 --> 01:37:27,600
which means you need to have more than

01:37:26,719 --> 01:37:31,280
one

01:37:27,600 --> 01:37:31,840
to reach this goal if you have just one

01:37:31,280 --> 01:37:35,119
team

01:37:31,840 --> 01:37:37,440
then this does not make sense and

01:37:35,119 --> 01:37:40,159
it is also about decoupling you want to

01:37:37,440 --> 01:37:42,000
have loosely coupled parts of your

01:37:40,159 --> 01:37:44,960
overall software system

01:37:42,000 --> 01:37:46,000
they less than know about each other the

01:37:44,960 --> 01:37:47,920
better it is

01:37:46,000 --> 01:37:50,320
because if they don't know much about

01:37:47,920 --> 01:37:54,000
each other you can change one part

01:37:50,320 --> 01:37:56,800
within uh influencing another

01:37:54,000 --> 01:37:58,719
module federation allows you to import

01:37:56,800 --> 01:38:00,960
from another application

01:37:58,719 --> 01:38:03,199
from an application that has been

01:38:00,960 --> 01:38:06,800
developed by another dean

01:38:03,199 --> 01:38:10,320
deployed independently over there

01:38:06,800 --> 01:38:13,119
it also allows you to share libraries

01:38:10,320 --> 01:38:14,400
and you somehow have to take care of

01:38:13,119 --> 01:38:17,360
conflicts

01:38:14,400 --> 01:38:18,639
perhaps one of the strategies of module

01:38:17,360 --> 01:38:20,880
federation fits

01:38:18,639 --> 01:38:23,520
or you have to introduce your own

01:38:20,880 --> 01:38:26,400
tooling or your own conventions

01:38:23,520 --> 01:38:27,280
also as mentioned before using a micro

01:38:26,400 --> 01:38:30,639
front end

01:38:27,280 --> 01:38:33,600
no a mono repository can help here

01:38:30,639 --> 01:38:34,560
because it forces you into using just

01:38:33,600 --> 01:38:37,360
one version

01:38:34,560 --> 01:38:38,159
of all the libraries or at least it can

01:38:37,360 --> 01:38:42,080
force you

01:38:38,159 --> 01:38:44,960
into this and there is a last thing

01:38:42,080 --> 01:38:45,760
i want you to remember all the time if

01:38:44,960 --> 01:38:48,960
you forget

01:38:45,760 --> 01:38:50,719
everything please please remember this

01:38:48,960 --> 01:38:53,920
one thing all the time

01:38:50,719 --> 01:38:58,320
please try to be a big like bunny

01:38:53,920 --> 01:39:02,560
because bonnie was always thinking first

01:38:58,320 --> 01:39:04,239
in opposites to her counterparts to the

01:39:02,560 --> 01:39:06,719
other star of this tv show

01:39:04,239 --> 01:39:08,800
he was always hitting first and then

01:39:06,719 --> 01:39:11,119
perhaps he was thinking but bonnie

01:39:08,800 --> 01:39:12,000
was always thinking first she was the

01:39:11,119 --> 01:39:14,639
engineer on the

01:39:12,000 --> 01:39:16,480
dean and what do i mean with this well i

01:39:14,639 --> 01:39:18,960
mean with this first of all

01:39:16,480 --> 01:39:19,920
evaluate whether you need micro front

01:39:18,960 --> 01:39:22,239
ends

01:39:19,920 --> 01:39:23,199
if you have several themes if you need

01:39:22,239 --> 01:39:25,520
to scale

01:39:23,199 --> 01:39:26,480
then micro fondants might be a good

01:39:25,520 --> 01:39:29,920
solution

01:39:26,480 --> 01:39:32,560
if you don't have serial themes don't go

01:39:29,920 --> 01:39:34,639
with all the overhead of microfront ends

01:39:32,560 --> 01:39:35,440
it is complicated you have to deal with

01:39:34,639 --> 01:39:39,199
versions

01:39:35,440 --> 01:39:41,360
in this case go with a majestic monolith

01:39:39,199 --> 01:39:42,320
i like this dorm than my chastic

01:39:41,360 --> 01:39:45,520
monolith

01:39:42,320 --> 01:39:47,840
you know the micro service people

01:39:45,520 --> 01:39:49,840
always are always claiming that a

01:39:47,840 --> 01:39:52,639
monolith is something that's bad

01:39:49,840 --> 01:39:54,320
you are a bad guy a bad person if you

01:39:52,639 --> 01:39:57,119
are building a monolith

01:39:54,320 --> 01:39:59,520
and some other people coined that or

01:39:57,119 --> 01:40:00,000
majestic monolith for this reason they

01:39:59,520 --> 01:40:03,119
say

01:40:00,000 --> 01:40:04,560
no and monoliths does not needs to be

01:40:03,119 --> 01:40:07,119
something that's ugly

01:40:04,560 --> 01:40:09,040
something that's dirty if you take care

01:40:07,119 --> 01:40:10,159
about it if you have a proper

01:40:09,040 --> 01:40:12,320
architecture

01:40:10,159 --> 01:40:13,360
if you take care that this architecture

01:40:12,320 --> 01:40:15,679
is met

01:40:13,360 --> 01:40:17,760
then it can be something beautiful

01:40:15,679 --> 01:40:19,679
something might just

01:40:17,760 --> 01:40:21,280
if you have several things if you need

01:40:19,679 --> 01:40:24,000
to scale as mentioned

01:40:21,280 --> 01:40:26,400
please consider module federation it is

01:40:24,000 --> 01:40:30,960
a very attractive solution

01:40:26,400 --> 01:40:34,159
for building microfrondens nowadays

01:40:30,960 --> 01:40:37,440
okay here you have my contact data you

01:40:34,159 --> 01:40:40,560
also find all my material on my blog

01:40:37,440 --> 01:40:41,280
and if you like follow me on twitter so

01:40:40,560 --> 01:40:45,280
that we

01:40:41,280 --> 01:40:48,840
can keep contact so thanks for having me

01:40:45,280 --> 01:40:51,440
and i think now we have a q and a

01:40:48,840 --> 01:40:54,320
session

01:40:51,440 --> 01:40:54,719
thank you a lot manfred uh very nicely

01:40:54,320 --> 01:40:58,320
said

01:40:54,719 --> 01:40:59,280
uh very nice presentation a couple of

01:40:58,320 --> 01:41:02,880
questions appeared

01:40:59,280 --> 01:41:05,280
here uh so we will try to answer them

01:41:02,880 --> 01:41:08,480
and go through all of them

01:41:05,280 --> 01:41:10,560
so the first one from chris

01:41:08,480 --> 01:41:12,239
do you still have one build with one

01:41:10,560 --> 01:41:13,360
webpack config that needs to be

01:41:12,239 --> 01:41:18,960
redeployed when

01:41:13,360 --> 01:41:21,280
micro front ends are updated

01:41:18,960 --> 01:41:22,400
uh i'm not sure if i got this can you

01:41:21,280 --> 01:41:25,119
repeat it

01:41:22,400 --> 01:41:25,679
do you still have one build with one

01:41:25,119 --> 01:41:28,800
webpack

01:41:25,679 --> 01:41:32,560
config that needs to be redeployed

01:41:28,800 --> 01:41:35,840
when micro front ends are updated

01:41:32,560 --> 01:41:38,320
no no no you can uh you can

01:41:35,840 --> 01:41:39,520
uh updates the micro frontends in

01:41:38,320 --> 01:41:42,480
isolation

01:41:39,520 --> 01:41:44,800
they uh don't need to be within the same

01:41:42,480 --> 01:41:48,000
repository you can even put them

01:41:44,800 --> 01:41:49,280
into separate repository that that is

01:41:48,000 --> 01:41:51,520
what is normally done

01:41:49,280 --> 01:41:53,760
when you are doing what i am calling

01:41:51,520 --> 01:41:56,560
micro frontends by the book

01:41:53,760 --> 01:41:57,760
and in this case just update it and

01:41:56,560 --> 01:42:00,400
redeploy it

01:41:57,760 --> 01:42:02,800
and somehow you have to make sure that

01:42:00,400 --> 01:42:04,960
everything works when it is meeting each

01:42:02,800 --> 01:42:06,800
other at drunk

01:42:04,960 --> 01:42:08,560
yeah that's what i thought that

01:42:06,800 --> 01:42:12,000
basically that's the point that you

01:42:08,560 --> 01:42:12,880
do not have to do this and to redeploy

01:42:12,000 --> 01:42:14,639
every time that

01:42:12,880 --> 01:42:17,040
one of the micro micro front ends

01:42:14,639 --> 01:42:19,600
changes next question

01:42:17,040 --> 01:42:21,520
here is uh very interesting from my

01:42:19,600 --> 01:42:23,280
point of view hi manfred can we make

01:42:21,520 --> 01:42:24,320
library sharing in more complex

01:42:23,280 --> 01:42:26,800
configuration

01:42:24,320 --> 01:42:27,360
for example shell is loading micro front

01:42:26,800 --> 01:42:30,000
end one

01:42:27,360 --> 01:42:32,560
which is loading micro front and two and

01:42:30,000 --> 01:42:33,280
probably etc etc so is this somehow

01:42:32,560 --> 01:42:35,840
possible

01:42:33,280 --> 01:42:37,040
uh or how to do that yeah yeah that

01:42:35,840 --> 01:42:40,000
works totally

01:42:37,040 --> 01:42:41,920
so for the sake of simplicity i had

01:42:40,000 --> 01:42:44,400
those two rolls in my

01:42:41,920 --> 01:42:46,159
presentation had the shell which was

01:42:44,400 --> 01:42:48,880
also called

01:42:46,159 --> 01:42:50,800
a host and they had their micro front

01:42:48,880 --> 01:42:54,400
end which was called the remote

01:42:50,800 --> 01:42:57,520
but the whole truth is that one

01:42:54,400 --> 01:42:59,920
application can be both at the same time

01:42:57,520 --> 01:43:01,040
it can be a host and a remote at the

01:42:59,920 --> 01:43:04,880
same time

01:43:01,040 --> 01:43:04,880
so this is totally possible

01:43:05,119 --> 01:43:10,480
great answered and answered and

01:43:08,480 --> 01:43:12,560
the next two questions i will couple

01:43:10,480 --> 01:43:14,560
them because they seem really similar

01:43:12,560 --> 01:43:16,719
the one of them is do you need to keep

01:43:14,560 --> 01:43:18,560
share libraries at the same version

01:43:16,719 --> 01:43:21,280
this is the first one and the second one

01:43:18,560 --> 01:43:23,440
is with webpack federation can different

01:43:21,280 --> 01:43:26,320
micro frontends load different

01:43:23,440 --> 01:43:28,159
in brackets breaking versions of angular

01:43:26,320 --> 01:43:29,040
and deliver the needed version of

01:43:28,159 --> 01:43:32,560
angular

01:43:29,040 --> 01:43:33,920
so somehow solve the conflicts of the

01:43:32,560 --> 01:43:36,639
versions here

01:43:33,920 --> 01:43:37,119
yeah so this is a very nice question

01:43:36,639 --> 01:43:39,840
because

01:43:37,119 --> 01:43:41,840
it clearly shows one thing when it comes

01:43:39,840 --> 01:43:45,440
to micro front ends

01:43:41,840 --> 01:43:48,000
it is about trade-offs and there are two

01:43:45,440 --> 01:43:48,800
things you cannot accomplish at the same

01:43:48,000 --> 01:43:51,520
time

01:43:48,800 --> 01:43:52,080
one thing is the full isolation which

01:43:51,520 --> 01:43:54,719
means

01:43:52,080 --> 01:43:56,960
one micro front end can come with

01:43:54,719 --> 01:43:57,520
angular 5 and the other one with angular

01:43:56,960 --> 01:44:00,560
01:43:57,520 --> 01:44:03,360
and the next one with angular 10 and

01:44:00,560 --> 01:44:04,719
lightweight bundles you cannot have both

01:44:03,360 --> 01:44:08,320
of them

01:44:04,719 --> 01:44:11,360
um of course you can find ways

01:44:08,320 --> 01:44:13,199
to bundle your angular version into your

01:44:11,360 --> 01:44:16,000
application bundle

01:44:13,199 --> 01:44:17,199
and uh in this case you cannot reuse

01:44:16,000 --> 01:44:20,880
angular

01:44:17,199 --> 01:44:23,199
and this can uh be made

01:44:20,880 --> 01:44:25,360
working make working but you have to

01:44:23,199 --> 01:44:27,840
take care about specific things

01:44:25,360 --> 01:44:28,800
the easiest way to use module federation

01:44:27,840 --> 01:44:31,440
is just to have

01:44:28,800 --> 01:44:33,360
one version of angular because in this

01:44:31,440 --> 01:44:35,840
case you can also use

01:44:33,360 --> 01:44:36,960
angular and the angular router for the

01:44:35,840 --> 01:44:40,080
shell

01:44:36,960 --> 01:44:43,520
but i have also seen uh applications

01:44:40,080 --> 01:44:45,199
where each and every bundle had its own

01:44:43,520 --> 01:44:47,679
version of angular and this

01:44:45,199 --> 01:44:48,320
is easier than you think to accomplish

01:44:47,679 --> 01:44:50,320
because

01:44:48,320 --> 01:44:51,840
in this case you have a shell which is

01:44:50,320 --> 01:44:55,119
pure ecmascript

01:44:51,840 --> 01:44:57,280
and this shell is just loading this

01:44:55,119 --> 01:44:58,719
angular application at run time with the

01:44:57,280 --> 01:45:00,719
dynamic scriptdeck

01:44:58,719 --> 01:45:02,320
and then it is loading that angular

01:45:00,719 --> 01:45:04,480
version at runtime

01:45:02,320 --> 01:45:06,320
and when compiling with webpack

01:45:04,480 --> 01:45:10,159
everything also the libraries

01:45:06,320 --> 01:45:12,000
are hidden behind accusa so angular here

01:45:10,159 --> 01:45:14,159
does not see angular there

01:45:12,000 --> 01:45:16,400
and everything the shell needs to do and

01:45:14,159 --> 01:45:19,920
i think this is also what luca is doing

01:45:16,400 --> 01:45:22,639
uh is to show and hide the dynamically

01:45:19,920 --> 01:45:25,119
loaded single page applications

01:45:22,639 --> 01:45:26,800
and the first this could also work with

01:45:25,119 --> 01:45:28,800
module federation but

01:45:26,800 --> 01:45:30,320
you don't need module federation for

01:45:28,800 --> 01:45:32,960
this very specific

01:45:30,320 --> 01:45:33,520
implementation yeah thank you for

01:45:32,960 --> 01:45:36,239
answers

01:45:33,520 --> 01:45:36,719
it completely makes sense i will mark

01:45:36,239 --> 01:45:40,320
both

01:45:36,719 --> 01:45:43,119
and answered and the last question

01:45:40,320 --> 01:45:45,360
is that when you configure routes

01:45:43,119 --> 01:45:47,840
dynamically does this mean that

01:45:45,360 --> 01:45:49,040
first load of page is calling all micro

01:45:47,840 --> 01:45:52,480
frontlines to get

01:45:49,040 --> 01:45:55,440
all routes um

01:45:52,480 --> 01:45:58,000
it does not mean that no so with module

01:45:55,440 --> 01:46:01,199
federation we are doing

01:45:58,000 --> 01:46:03,679
we are doing lazy loading it's more than

01:46:01,199 --> 01:46:06,159
traditional lazy loading because it's

01:46:03,679 --> 01:46:08,719
it's lazy loading of things we don't

01:46:06,159 --> 01:46:11,520
know during the compilation time

01:46:08,719 --> 01:46:13,840
uh everything we need to load up front

01:46:11,520 --> 01:46:14,480
in the very simple scenario i've shown

01:46:13,840 --> 01:46:17,679
you

01:46:14,480 --> 01:46:20,239
at first is to load the

01:46:17,679 --> 01:46:22,239
remote entry point which is just a tiny

01:46:20,239 --> 01:46:25,040
file with several bytes

01:46:22,239 --> 01:46:26,239
telling the shell about where to find

01:46:25,040 --> 01:46:28,400
the micro front ends

01:46:26,239 --> 01:46:30,560
when we need them when we go with

01:46:28,400 --> 01:46:33,360
dynamic module federation

01:46:30,560 --> 01:46:34,000
we don't even do lo or don't even have

01:46:33,360 --> 01:46:37,360
to load

01:46:34,000 --> 01:46:39,520
the remote entry points up front in this

01:46:37,360 --> 01:46:40,480
case we know the location of the remote

01:46:39,520 --> 01:46:43,679
entry point

01:46:40,480 --> 01:46:47,040
and we load it on the mod

01:46:43,679 --> 01:46:50,239
yeah so pretty much lazy loaded

01:46:47,040 --> 01:46:51,760
in in the normal terminology yep great

01:46:50,239 --> 01:46:55,040
answers the question

01:46:51,760 --> 01:46:56,400
so that that's all from our audience uh

01:46:55,040 --> 01:46:58,719
thank you manfred thank you for your

01:46:56,400 --> 01:47:01,199
presentation it was really great uh

01:46:58,719 --> 01:47:02,880
like it inspired me to to do some more

01:47:01,199 --> 01:47:06,080
research about the topic

01:47:02,880 --> 01:47:08,480
and about the angular in itself

01:47:06,080 --> 01:47:09,119
because it's going into really interest

01:47:08,480 --> 01:47:12,239
interesting

01:47:09,119 --> 01:47:14,800
direction uh we will all keep our eyes

01:47:12,239 --> 01:47:15,679
on the on on the evolution of the

01:47:14,800 --> 01:47:19,360
webpack

01:47:15,679 --> 01:47:22,800
five uh vita conversion uh

01:47:19,360 --> 01:47:26,000
whether whether it will be out or

01:47:22,800 --> 01:47:29,199
until the end of the summer or

01:47:26,000 --> 01:47:33,040
some something some around the time

01:47:29,199 --> 01:47:36,400
so fingers crossed uh

01:47:33,040 --> 01:47:38,000
thank you once again also for the q and

01:47:36,400 --> 01:47:39,280
a's and your answers

01:47:38,000 --> 01:47:41,199
uh maybe there will be some more

01:47:39,280 --> 01:47:44,159
questions on slack uh later

01:47:41,199 --> 01:47:44,639
during the day so if you can answer that

01:47:44,159 --> 01:47:46,560
uh

01:47:44,639 --> 01:47:48,000
as well if something appears so it would

01:47:46,560 --> 01:47:51,280
be much appreciated

01:47:48,000 --> 01:47:52,320
and thanks one again enjoy the rest of

01:47:51,280 --> 01:47:56,480
the evening

01:47:52,320 --> 01:47:58,480
thank you bye for the rest of you

01:47:56,480 --> 01:48:00,320
and the rest of our all audience thank

01:47:58,480 --> 01:48:04,320
you for staying with us

01:48:00,320 --> 01:48:07,600
and uh luca and manfred uh this evening

01:48:04,320 --> 01:48:10,639
it was great i i hope you all enjoyed it

01:48:07,600 --> 01:48:12,719
as i did uh so

01:48:10,639 --> 01:48:13,760
if you have any more questions just join

01:48:12,719 --> 01:48:17,440
the slack and

01:48:13,760 --> 01:48:19,040
ask there uh or keep discussion there

01:48:17,440 --> 01:48:20,880
i think that this is the really hot

01:48:19,040 --> 01:48:22,320
topic right now uh with a lot of

01:48:20,880 --> 01:48:25,280
opinions going on

01:48:22,320 --> 01:48:26,320
a lot of people having uh some

01:48:25,280 --> 01:48:29,920
experience with

01:48:26,320 --> 01:48:32,960
it uh so so so so let's go through this

01:48:29,920 --> 01:48:34,960
highly dynamic phase of implementing or

01:48:32,960 --> 01:48:37,440
starting with implementation of micro

01:48:34,960 --> 01:48:40,800
frontlines and shared experiences so we

01:48:37,440 --> 01:48:44,080
do not all make the same mistakes uh

01:48:40,800 --> 01:48:45,280
and that's it uh and after and of of

01:48:44,080 --> 01:48:48,159
this uh

01:48:45,280 --> 01:48:49,440
of this of this uh webinar there will be

01:48:48,159 --> 01:48:52,960
a feedback form

01:48:49,440 --> 01:48:55,360
on slack so feel free to

01:48:52,960 --> 01:48:58,080
give us the feedback uh maybe some

01:48:55,360 --> 01:49:01,280
topics which you want to hear more about

01:48:58,080 --> 01:49:03,360
so everything uh you have to tell us

01:49:01,280 --> 01:49:04,320
is it will be much appreciated that we

01:49:03,360 --> 01:49:06,560
will try to

01:49:04,320 --> 01:49:07,920
do our best to implement this in our

01:49:06,560 --> 01:49:10,159
next meetups

01:49:07,920 --> 01:49:11,520
so thank you for joining us talk to you

01:49:10,159 --> 01:49:15,599
on slack and see you

01:49:11,520 --> 01:49:17,840
sometimes uh in the future stay tuned

01:49:15,599 --> 01:49:18,800
on our social networks we will keep you

01:49:17,840 --> 01:49:21,119
informed

01:49:18,800 --> 01:49:29,840
enjoy the rest of the evening and

01:49:21,119 --> 01:49:29,840
goodbye everyone

01:50:28,080 --> 01:50:30,159

YouTube URL: https://www.youtube.com/watch?v=m9MI7JSg82c


