Title: Reactive Online Meetup | Gil Tayar #1
Publication date: 2020-05-29
Playlist: Reactive Online Meetups
Description: 
	𝗧𝗔𝗟𝗞:
These microservices are made for testing, and testing is what we’ll do…

𝗔𝗕𝗦𝗧𝗥𝗔𝗖𝗧:
…one of these days these tests are gonna help a lot for you!
But to do that, you need to write those tests. Which is what we’ll do: write tests for microservices, and understand the best strategy for testing them, the techniques used, and the correct mix of unit, integration, and end to end tests.

𝗚𝗜𝗟’𝘀 𝗕𝗜𝗢:
From the olden days of DOS, to the contemporary world of Software Testing, Gil was, is, and always will be, a software developer. He has in the past co-founded WebCollage, survived the bubble collapse of 2000, and worked on various big cloudy projects at Wix.
His current passion is figuring out how to test software, a passion which he has turned into his main job as Evangelist and Senior Architect at Applitools. He has religiously tested all his software, from the early days as a junior software developer to the current days at Applitools, where he develops tests for software that tests software, which is almost one meta layer too many for him.
Captions: 
	00:00:22,480 --> 00:00:26,860
hello everyone my name is Christina and

00:00:25,480 --> 00:00:28,960
I would like to welcome you to our

00:00:26,860 --> 00:00:33,400
online meet I'm very happy that you

00:00:28,960 --> 00:00:36,130
joined us today first let me tell you

00:00:33,400 --> 00:00:39,070
one very important thing I hope that you

00:00:36,130 --> 00:00:52,570
and your families are safe and sound and

00:00:39,070 --> 00:00:55,870
you are me so I hope that you are all

00:00:52,570 --> 00:00:57,880
making all the necessary precautions to

00:00:55,870 --> 00:01:02,740
make this situation pass as quickly as

00:00:57,880 --> 00:01:05,920
possible before I will give a stage to

00:01:02,740 --> 00:01:08,619
Jill I would like to say you two very

00:01:05,920 --> 00:01:10,270
important things the first one is if you

00:01:08,619 --> 00:01:12,369
have any questions please write them

00:01:10,270 --> 00:01:15,580
into our live chat we will go through

00:01:12,369 --> 00:01:18,130
them after after the talk and the second

00:01:15,580 --> 00:01:22,270
one is that even though we are having an

00:01:18,130 --> 00:01:24,160
online event we wanted to you to have

00:01:22,270 --> 00:01:26,590
the same advantage of attending an

00:01:24,160 --> 00:01:29,500
offline meter so we have created a

00:01:26,590 --> 00:01:31,960
slight group in which you can continue

00:01:29,500 --> 00:01:33,970
in discussion ask questions and being

00:01:31,960 --> 00:01:36,039
that with the community and the speaker

00:01:33,970 --> 00:01:38,920
will send the link to this like

00:01:36,039 --> 00:01:43,030
community in a few moments so please

00:01:38,920 --> 00:01:46,240
feel free to join it and also drive the

00:01:43,030 --> 00:01:49,090
discussion there so this all from my

00:01:46,240 --> 00:01:54,179
side now I would like to give a word to

00:01:49,090 --> 00:01:57,069
Jill who will create one thing about

00:01:54,179 --> 00:02:03,880
micro-services investing so Jill the

00:01:57,069 --> 00:02:06,819
stage is yours thank you okay hi

00:02:03,880 --> 00:02:08,970
everybody from my home and I'm hoping

00:02:06,819 --> 00:02:12,760
everybody is staying safe at their house

00:02:08,970 --> 00:02:15,520
because I am at home one my hair isn't

00:02:12,760 --> 00:02:18,700
getting any shorter so excuse me for the

00:02:15,520 --> 00:02:22,000
appearance and if my cat suddenly comes

00:02:18,700 --> 00:02:25,650
walking over will excuse her and there's

00:02:22,000 --> 00:02:28,750
nothing we can do because cats anyway

00:02:25,650 --> 00:02:30,170
this is the original song these boots

00:02:28,750 --> 00:02:32,090
were made for walking in

00:02:30,170 --> 00:02:34,280
that's just what they'll do one of these

00:02:32,090 --> 00:02:37,160
days these boots are gonna walk all over

00:02:34,280 --> 00:02:41,060
you I took the liberty of changing the

00:02:37,160 --> 00:02:43,550
lyrics a bit these microservices are

00:02:41,060 --> 00:02:46,250
made for testing and that is just what

00:02:43,550 --> 00:02:49,370
we'll do one of these days these tests

00:02:46,250 --> 00:02:51,530
are gonna help a lot to you and this is

00:02:49,370 --> 00:02:53,900
exactly about that about how to test

00:02:51,530 --> 00:02:56,569
micro-services and not only will we talk

00:02:53,900 --> 00:03:00,560
about testing micro-services I will live

00:02:56,569 --> 00:03:03,200
code a test for micro-services on stage

00:03:00,560 --> 00:03:05,180
and people love live coding and I've

00:03:03,200 --> 00:03:10,850
always asked myself why and I think the

00:03:05,180 --> 00:03:14,239
answer is it's like the arena in the

00:03:10,850 --> 00:03:16,910
gladiators in Rome people really want

00:03:14,239 --> 00:03:19,459
the lion to eat the collaborator so

00:03:16,910 --> 00:03:20,950
people really wanted me and during the

00:03:19,459 --> 00:03:23,630
live coding to you know fail

00:03:20,950 --> 00:03:26,480
spectacularly I hope I hope it'll be

00:03:23,630 --> 00:03:28,250
good we'll see we have a link to the

00:03:26,480 --> 00:03:30,739
github repo and to this presentation

00:03:28,250 --> 00:03:33,110
here you will get it in the last slide

00:03:30,739 --> 00:03:37,190
and it's on youtube so you can look

00:03:33,110 --> 00:03:38,390
whenever you want feel free to take the

00:03:37,190 --> 00:03:40,760
github repo with the qiyamah pro

00:03:38,390 --> 00:03:45,470
includes all the code we will be seeing

00:03:40,760 --> 00:03:46,760
in this talk ok little bit about me I go

00:03:45,470 --> 00:03:50,540
back all the way back to the eighties

00:03:46,760 --> 00:03:52,850
and reeled I did the startup thing and

00:03:50,540 --> 00:03:55,579
you know founding a start-up and being

00:03:52,850 --> 00:03:55,850
the CTO and all that didn't really like

00:03:55,579 --> 00:03:58,010
it

00:03:55,850 --> 00:04:00,170
it was interesting cool but didn't

00:03:58,010 --> 00:04:02,239
really like it it seems that I I am a

00:04:00,170 --> 00:04:04,430
developer I was a developer and probably

00:04:02,239 --> 00:04:07,250
will be a developer till the day I die

00:04:04,430 --> 00:04:09,650
I love testing code testing the code I

00:04:07,250 --> 00:04:12,620
write it's my passion I've been doing it

00:04:09,650 --> 00:04:15,680
since about the year 2000 even a little

00:04:12,620 --> 00:04:18,049
earlier and because I love testing I am

00:04:15,680 --> 00:04:20,329
currently a developer relations and an

00:04:18,049 --> 00:04:22,460
architect software architect that

00:04:20,329 --> 00:04:24,500
applitools what we do is we deliver

00:04:22,460 --> 00:04:27,680
visual testing tools so if you're a

00:04:24,500 --> 00:04:29,539
front-end developer and you want to test

00:04:27,680 --> 00:04:31,340
not only how your application functions

00:04:29,539 --> 00:04:33,919
which is you know what things like

00:04:31,340 --> 00:04:35,810
selenium and Cypress are but also how

00:04:33,919 --> 00:04:40,190
they look like that they look the same

00:04:35,810 --> 00:04:40,980
as they should then go see our apples

00:04:40,190 --> 00:04:43,880
calm

00:04:40,980 --> 00:04:47,010
and check it out or you can contact me

00:04:43,880 --> 00:04:49,710
okay so I'm not going to talk about

00:04:47,010 --> 00:04:51,300
water micro-services but just a baseline

00:04:49,710 --> 00:04:52,860
just so we understand what we're talking

00:04:51,300 --> 00:04:55,230
about there are a lot of talks about

00:04:52,860 --> 00:04:58,440
micro services online but here are the

00:04:55,230 --> 00:05:00,960
basics first of all do web apps just

00:04:58,440 --> 00:05:02,550
like regular you know front and facing

00:05:00,960 --> 00:05:04,770
web apps but they're back and facing

00:05:02,550 --> 00:05:06,780
they only work on back and a micro

00:05:04,770 --> 00:05:09,240
service architectures and architecture

00:05:06,780 --> 00:05:11,510
were instead of one big app one big web

00:05:09,240 --> 00:05:16,290
app you're taking that one big ever and

00:05:11,510 --> 00:05:18,030
making it into a lot of of web small web

00:05:16,290 --> 00:05:21,930
apps and they all communicate with each

00:05:18,030 --> 00:05:25,190
other how do they communicate either via

00:05:21,930 --> 00:05:27,630
HTTP so if i wanna i want to call

00:05:25,190 --> 00:05:30,390
something from one web app to another i

00:05:27,630 --> 00:05:34,890
do an HTTP and sent over json or a graph

00:05:30,390 --> 00:05:37,140
QL query or put put a message in a

00:05:34,890 --> 00:05:39,870
message here the other operator puts in

00:05:37,140 --> 00:05:41,220
another message in such etc the most

00:05:39,870 --> 00:05:43,530
important thing about micro services

00:05:41,220 --> 00:05:47,460
that they are independent so each micro

00:05:43,530 --> 00:05:49,830
service is a four has its own code does

00:05:47,460 --> 00:05:52,530
not share code with others can be

00:05:49,830 --> 00:05:54,720
deployed separately and the most

00:05:52,530 --> 00:05:56,700
important thing for us tested separately

00:05:54,720 --> 00:05:58,020
and that's the most important thing so

00:05:56,700 --> 00:05:59,760
it's compiled built and deployed

00:05:58,020 --> 00:06:02,190
separately and that is its most big

00:05:59,760 --> 00:06:06,450
advantage why because if you have a

00:06:02,190 --> 00:06:08,730
large large product with lots of teams

00:06:06,450 --> 00:06:10,380
each team can be responsible for a set

00:06:08,730 --> 00:06:12,030
of micro services and they can do

00:06:10,380 --> 00:06:14,970
whatever they want there they don't have

00:06:12,030 --> 00:06:17,790
to synchronize with other teams because

00:06:14,970 --> 00:06:19,650
they can compile build and deploy their

00:06:17,790 --> 00:06:22,500
micro services independent of their

00:06:19,650 --> 00:06:24,000
other teams but unfortunately that comes

00:06:22,500 --> 00:06:26,370
with a price because they are not

00:06:24,000 --> 00:06:27,900
allowed they have to be independent they

00:06:26,370 --> 00:06:29,790
are not allowed to share data with other

00:06:27,900 --> 00:06:35,670
services that creates a lot of

00:06:29,790 --> 00:06:38,130
complications I don't know so a good

00:06:35,670 --> 00:06:39,510
example is what I but I'm working on on

00:06:38,130 --> 00:06:41,940
the alpha tools it's called the Apple

00:06:39,510 --> 00:06:45,270
tools visual grid and the idea is and

00:06:41,940 --> 00:06:47,940
just a quick idea is when instead of

00:06:45,270 --> 00:06:50,370
taking a screenshot of the app like PNG

00:06:47,940 --> 00:06:54,210
what we do is we take the Dom snapshot

00:06:50,370 --> 00:06:56,729
we take the HTML the CSS the SVG's

00:06:54,210 --> 00:07:01,080
the Fonz whatever upload them to the

00:06:56,729 --> 00:07:02,460
visual grid and then recreate the page

00:07:01,080 --> 00:07:04,199
and they have lots of live like

00:07:02,460 --> 00:07:06,830
thousands and thousands of browsers

00:07:04,199 --> 00:07:09,690
Chrome Firefox Safari ie whatever

00:07:06,830 --> 00:07:12,389
recreate them in all those browsers take

00:07:09,690 --> 00:07:14,880
the screenshots and then push them to

00:07:12,389 --> 00:07:17,099
our server where they can be dipped and

00:07:14,880 --> 00:07:19,169
checked and managed and all that so we

00:07:17,099 --> 00:07:21,210
can paralyze instead of taking one

00:07:19,169 --> 00:07:22,830
screenshot we can paralyze and take like

00:07:21,210 --> 00:07:25,800
ten screenshots and different browser

00:07:22,830 --> 00:07:26,490
configurations all at the same time how

00:07:25,800 --> 00:07:28,849
does this work

00:07:26,490 --> 00:07:32,009
our SDK instead of taking a screenshot

00:07:28,849 --> 00:07:36,750
takes all the Dom snapshot services the

00:07:32,009 --> 00:07:38,070
HTML the CSS etcetera and puts them to

00:07:36,750 --> 00:07:41,099
our snapshot server where they are

00:07:38,070 --> 00:07:43,800
stored in the cloud then it posts a

00:07:41,099 --> 00:07:45,960
render job to the rendering Ava please

00:07:43,800 --> 00:07:51,240
render the snapshot that I just sent you

00:07:45,960 --> 00:07:54,840
in chrome 1024 or in Firefox 1024 1280

00:07:51,240 --> 00:07:56,639
or whatever the rendering API that is a

00:07:54,840 --> 00:07:57,990
micro service and the snapshot server is

00:07:56,639 --> 00:08:00,990
also a micro service and they are

00:07:57,990 --> 00:08:05,759
totally independent uploads submitted

00:08:00,990 --> 00:08:07,889
job - a job queue and the workers each

00:08:05,759 --> 00:08:09,870
we have workers for each browser a

00:08:07,889 --> 00:08:13,830
chrome or core a firefox worker an IE

00:08:09,870 --> 00:08:16,919
worker etc Safari worker takes the jobs

00:08:13,830 --> 00:08:19,139
from the job queue and sends them over

00:08:16,919 --> 00:08:21,479
navigates to a certain URL in the

00:08:19,139 --> 00:08:24,180
headless chrome so the worker includes

00:08:21,479 --> 00:08:28,919
both of our code and the Chrome browser

00:08:24,180 --> 00:08:31,469
itself in headless mode that the URL is

00:08:28,919 --> 00:08:33,539
a URL to the snapshot server to get and

00:08:31,469 --> 00:08:35,610
recreate the page the central server

00:08:33,539 --> 00:08:38,250
generates the HTML that is used to

00:08:35,610 --> 00:08:40,169
recreate the page once we have that page

00:08:38,250 --> 00:08:43,140
in the browser we just take a screenshot

00:08:40,169 --> 00:08:44,640
and boom we're done then the important

00:08:43,140 --> 00:08:46,589
thing is not understanding the dividual

00:08:44,640 --> 00:08:49,589
grid it's understanding that here we

00:08:46,589 --> 00:08:51,149
have four separate microservices and in

00:08:49,589 --> 00:08:53,190
the case of Chrome and Firefox we have a

00:08:51,149 --> 00:08:55,589
lot of instances of those micro-services

00:08:53,190 --> 00:08:59,579
and each one is compiled built and

00:08:55,589 --> 00:09:01,230
deployed and tested independently of one

00:08:59,579 --> 00:09:03,180
another and the most important thing for

00:09:01,230 --> 00:09:06,839
us is that they are tested independently

00:09:03,180 --> 00:09:08,120
and that they aren't huge each one of

00:09:06,839 --> 00:09:11,010
these

00:09:08,120 --> 00:09:13,740
micro-services is doing one task and one

00:09:11,010 --> 00:09:18,029
pass only so there are not huge in terms

00:09:13,740 --> 00:09:20,580
of amount of code okay with understood

00:09:18,029 --> 00:09:22,890
microservices let's talk about tests why

00:09:20,580 --> 00:09:27,870
do we write tests and we have two

00:09:22,890 --> 00:09:29,820
answers why is because we have two and

00:09:27,870 --> 00:09:31,560
because we don't like doing manual

00:09:29,820 --> 00:09:33,089
testing so every time we change

00:09:31,560 --> 00:09:36,930
something we don't want a manual test it

00:09:33,089 --> 00:09:38,850
but why do we test at all and my answer

00:09:36,930 --> 00:09:41,700
is and I'm sorry for people who saw my

00:09:38,850 --> 00:09:47,160
talk at reactive con this is like a very

00:09:41,700 --> 00:09:50,640
quick summary of them my my my my my

00:09:47,160 --> 00:09:50,790
point of view on on why is what I call

00:09:50,640 --> 00:09:53,370
it

00:09:50,790 --> 00:09:56,910
echo program so what is echo program or

00:09:53,370 --> 00:10:00,240
phobia it's it's fear of my code okay I

00:09:56,910 --> 00:10:02,459
know that I fear my code my own with the

00:10:00,240 --> 00:10:05,880
code that I write I fear it and why do I

00:10:02,459 --> 00:10:07,529
fear it well when we add code we always

00:10:05,880 --> 00:10:09,899
think of it as a Lego thing that you

00:10:07,529 --> 00:10:12,300
just add but we all know the reality the

00:10:09,899 --> 00:10:14,100
reality is once we add code everything

00:10:12,300 --> 00:10:16,290
breaks or a lot of stuff breaks or

00:10:14,100 --> 00:10:18,570
sometimes doesn't break it all but we

00:10:16,290 --> 00:10:21,720
don't know so every time we add some

00:10:18,570 --> 00:10:22,529
code to our application we feared adding

00:10:21,720 --> 00:10:25,080
that code

00:10:22,529 --> 00:10:27,270
removing cool supposed to be the easiest

00:10:25,080 --> 00:10:30,270
thing possible and nobody is using that

00:10:27,270 --> 00:10:32,339
CSS fool right we've seen that a lot but

00:10:30,270 --> 00:10:35,400
we all know what happens a lot of times

00:10:32,339 --> 00:10:39,300
when we remove code yes it was used for

00:10:35,400 --> 00:10:41,160
something and refactoring we all want to

00:10:39,300 --> 00:10:42,600
refactor but we're really really

00:10:41,160 --> 00:10:44,520
frightening because we know how well

00:10:42,600 --> 00:10:46,580
that were factoring starts but we never

00:10:44,520 --> 00:10:50,130
know how it ends just like this for TPD

00:10:46,580 --> 00:10:52,320
it knew it knew how it starts it didn't

00:10:50,130 --> 00:10:54,930
know how it ends so and it doesn't

00:10:52,320 --> 00:10:57,810
really matter if if our code is really

00:10:54,930 --> 00:11:00,690
really nice or it's really ugly in

00:10:57,810 --> 00:11:02,220
spaghetti we fear changing it it doesn't

00:11:00,690 --> 00:11:05,339
really matter because adding we're

00:11:02,220 --> 00:11:08,670
moving or in factoring code is a change

00:11:05,339 --> 00:11:11,550
and that change breaks stuff we can't

00:11:08,670 --> 00:11:15,660
avoid it unless we're total geniuses and

00:11:11,550 --> 00:11:17,430
nobody is and testing is what abolishing

00:11:15,660 --> 00:11:19,670
stops every programmer phobia it's like

00:11:17,430 --> 00:11:21,710
the pill that you take to

00:11:19,670 --> 00:11:25,370
move that fear of your own code because

00:11:21,710 --> 00:11:29,330
you write your tests okay add your code

00:11:25,370 --> 00:11:32,720
run your tests they run perfect we're

00:11:29,330 --> 00:11:38,390
good we can deploy they don't run we fix

00:11:32,720 --> 00:11:40,400
the bug and then deploy okay so we

00:11:38,390 --> 00:11:43,400
talked about micro services we talked

00:11:40,400 --> 00:11:43,910
about testing let's talk let's let's do

00:11:43,400 --> 00:11:46,490
stuff

00:11:43,910 --> 00:11:48,980
let's live code in micro service and I

00:11:46,490 --> 00:11:53,800
chose a really simple micro service I

00:11:48,980 --> 00:11:53,800
meant there's some some people

00:11:55,060 --> 00:11:59,900
developers and we're building this

00:11:57,140 --> 00:12:02,420
building application where you have

00:11:59,900 --> 00:12:04,880
tenants of the building you know people

00:12:02,420 --> 00:12:08,270
live there and they have to pay rent and

00:12:04,880 --> 00:12:10,130
all that stuff so it's the micro service

00:12:08,270 --> 00:12:12,560
I'm talking about a very simple it has a

00:12:10,130 --> 00:12:15,170
crud interface to the tenants database

00:12:12,560 --> 00:12:18,950
we're using post question C Postgres and

00:12:15,170 --> 00:12:21,290
you can add stuff it's it has an API a

00:12:18,950 --> 00:12:24,170
REST API where you can have a tenant

00:12:21,290 --> 00:12:24,710
delete a tenant update a tenant list all

00:12:24,170 --> 00:12:28,190
times

00:12:24,710 --> 00:12:30,350
classic crud okay we're gonna live a

00:12:28,190 --> 00:12:31,970
test not the micro service itself the

00:12:30,350 --> 00:12:37,520
micro service itself is written but

00:12:31,970 --> 00:12:39,710
let's look look at it okay okay this is

00:12:37,520 --> 00:12:41,780
the code and it's as I said it's in the

00:12:39,710 --> 00:12:44,050
detail repo you have you have the link

00:12:41,780 --> 00:12:46,880
and we'll put it in the comments later I

00:12:44,050 --> 00:12:49,130
like to separate my source and my tests

00:12:46,880 --> 00:12:49,850
some people like them together just a

00:12:49,130 --> 00:12:51,800
matter of opinion

00:12:49,850 --> 00:12:54,440
let's start with a docker file because a

00:12:51,800 --> 00:12:56,630
micro service is usually really served

00:12:54,440 --> 00:12:59,930
by talker I don't want to get into

00:12:56,630 --> 00:13:02,570
darker it's a whole thing but in the end

00:12:59,930 --> 00:13:05,060
what is important is that the entry

00:13:02,570 --> 00:13:07,040
point of the application is run micro

00:13:05,060 --> 00:13:11,660
services are made for testing ok so it's

00:13:07,040 --> 00:13:14,470
this one ok ok so let's look at the app

00:13:11,660 --> 00:13:17,000
sorry no it's this one it's this one

00:13:14,470 --> 00:13:19,550
let's look at the main this is the main

00:13:17,000 --> 00:13:23,690
this is what is running what it does is

00:13:19,550 --> 00:13:26,120
it calls create app to create an app if

00:13:23,690 --> 00:13:29,750
it was if I was using Express then I

00:13:26,120 --> 00:13:31,570
would be creating an Express app but I'm

00:13:29,750 --> 00:13:33,700
using faster five because

00:13:31,570 --> 00:13:36,520
Festa Phi's much better and support us

00:13:33,700 --> 00:13:41,260
promises natively so please stop using

00:13:36,520 --> 00:13:43,180
express you specify so create I will

00:13:41,260 --> 00:13:45,130
create that app it's not yet listening

00:13:43,180 --> 00:13:46,930
on a port it's just creating that out

00:13:45,130 --> 00:13:49,360
and we'll talk later about why we're

00:13:46,930 --> 00:13:52,420
doing that then we're taking the port

00:13:49,360 --> 00:13:53,950
okay and listening on it but notice two

00:13:52,420 --> 00:13:56,680
things when we were creating the app

00:13:53,950 --> 00:13:59,080
we're sending it the parameters the

00:13:56,680 --> 00:14:02,230
parameters in a regular micro services

00:13:59,080 --> 00:14:05,170
mostly sent via environment variables

00:14:02,230 --> 00:14:07,480
there are other ways so what this this

00:14:05,170 --> 00:14:09,760
code does it just takes the environment

00:14:07,480 --> 00:14:11,860
variables and sends them to create app

00:14:09,760 --> 00:14:15,840
and if you're sick of create app creator

00:14:11,860 --> 00:14:18,190
is devoid of any thoughts about

00:14:15,840 --> 00:14:20,800
environment variables or whatever and

00:14:18,190 --> 00:14:22,840
that is very important for testing later

00:14:20,800 --> 00:14:26,770
and then we listen and notice that we

00:14:22,840 --> 00:14:28,420
listen not in the create app what am I

00:14:26,770 --> 00:14:31,330
going on about that create up because

00:14:28,420 --> 00:14:35,530
that create app that is what we mostly

00:14:31,330 --> 00:14:39,160
test we don't want to run a process or

00:14:35,530 --> 00:14:41,050
run a darker instance to to test it

00:14:39,160 --> 00:14:43,330
because that's heavy and that's very

00:14:41,050 --> 00:14:46,180
difficult to debug what we want is just

00:14:43,330 --> 00:14:50,260
to get the app you know listen on it and

00:14:46,180 --> 00:14:53,530
boom we have a running app so this is we

00:14:50,260 --> 00:14:56,290
won't be we mostly won't be testing this

00:14:53,530 --> 00:14:58,840
functions well we will be testing is the

00:14:56,290 --> 00:15:01,570
Creator create app is an SRC and it's

00:14:58,840 --> 00:15:03,760
our remain Andrew point and it's getting

00:15:01,570 --> 00:15:07,330
the database connection string as we saw

00:15:03,760 --> 00:15:09,340
earlier when it's running in a micro in

00:15:07,330 --> 00:15:10,930
a in and docker container it will get it

00:15:09,340 --> 00:15:15,520
from the environment variable because

00:15:10,930 --> 00:15:17,320
here because this right but because but

00:15:15,520 --> 00:15:19,810
if we want to send another database

00:15:17,320 --> 00:15:22,480
connection string that's one you create

00:15:19,810 --> 00:15:27,400
a faster fire application we connect the

00:15:22,480 --> 00:15:30,880
database okay and then we define routes

00:15:27,400 --> 00:15:35,200
slash returns a health track API tenants

00:15:30,880 --> 00:15:37,030
gets the list of tenants etc etc I want

00:15:35,200 --> 00:15:39,130
to talk about that retry because again

00:15:37,030 --> 00:15:40,900
that's important for testability why do

00:15:39,130 --> 00:15:43,960
we need to retry a connection to

00:15:40,900 --> 00:15:45,440
database in production that database is

00:15:43,960 --> 00:15:49,560
always there

00:15:45,440 --> 00:15:51,660
true but not in the tests in the tests

00:15:49,560 --> 00:15:54,870
sometimes the application runs quicker

00:15:51,660 --> 00:15:56,579
than the the database so that were when

00:15:54,870 --> 00:15:58,680
we're running the tests and running both

00:15:56,579 --> 00:16:01,290
of them that I have the database the app

00:15:58,680 --> 00:16:03,060
isn't ready that was ready and you wants

00:16:01,290 --> 00:16:06,240
to connect but the database isn't ready

00:16:03,060 --> 00:16:08,370
so we really try another example of

00:16:06,240 --> 00:16:11,430
where things have to be testable we

00:16:08,370 --> 00:16:14,519
change the application is likely to be

00:16:11,430 --> 00:16:17,730
testable okay oh and we run using the a

00:16:14,519 --> 00:16:22,890
wonderful PHY from seed resorts or

00:16:17,730 --> 00:16:24,990
awesome say okay so we're listing we're

00:16:22,890 --> 00:16:27,570
using a simple query

00:16:24,990 --> 00:16:29,700
okay first name last name from 10 hands

00:16:27,570 --> 00:16:34,800
and we're transforming it into the first

00:16:29,700 --> 00:16:38,089
name in like in camel case using SQL

00:16:34,800 --> 00:16:40,860
objects returning an array of tenants

00:16:38,089 --> 00:16:42,930
let's talk about adding a tenant we you

00:16:40,860 --> 00:16:46,230
know we're posting when we're posting a

00:16:42,930 --> 00:16:50,550
tent with an ID then we insert it into

00:16:46,230 --> 00:16:52,800
the database and basically that's the

00:16:50,550 --> 00:16:55,440
app it's not that difficult

00:16:52,800 --> 00:16:57,360
okay and we connect the database with

00:16:55,440 --> 00:17:01,829
selfic oh it's just post Chris code I'm

00:16:57,360 --> 00:17:02,790
using the regular Postgres client but

00:17:01,829 --> 00:17:05,309
not something else

00:17:02,790 --> 00:17:07,860
I'm exported the database schema why am

00:17:05,309 --> 00:17:10,020
i exporting the database schema if I'm

00:17:07,860 --> 00:17:15,900
not even creating the database it's the

00:17:10,020 --> 00:17:18,059
DBAs work to create that table right in

00:17:15,900 --> 00:17:20,939
the database and again the answer is

00:17:18,059 --> 00:17:23,250
testability in the test I need to create

00:17:20,939 --> 00:17:25,559
the database schema at that table I

00:17:23,250 --> 00:17:27,480
don't want it to be in the test code I

00:17:25,559 --> 00:17:29,760
wanted to be close to the production

00:17:27,480 --> 00:17:31,500
code so I put it here even though it's

00:17:29,760 --> 00:17:34,350
not really necessary so another

00:17:31,500 --> 00:17:35,850
testability issue notice the interesting

00:17:34,350 --> 00:17:37,890
thing this has nothing to do with

00:17:35,850 --> 00:17:41,460
microservices we're testing I'm using

00:17:37,890 --> 00:17:45,150
the new capability of nodejs to use

00:17:41,460 --> 00:17:46,980
import and export native import/export

00:17:45,150 --> 00:17:49,230
I'm not transpiling anything this is

00:17:46,980 --> 00:17:52,740
pure JavaScript and it's a replacement

00:17:49,230 --> 00:17:56,840
for common J's for require in no js' I'm

00:17:52,740 --> 00:18:01,130
a huge fan of no TS modules

00:17:56,840 --> 00:18:04,940
didn't talk about that so I decided to

00:18:01,130 --> 00:18:07,100
convert from common J's to node

00:18:04,940 --> 00:18:10,690
yes modules I wanted to convert this

00:18:07,100 --> 00:18:15,110
application and it's working whoo okay

00:18:10,690 --> 00:18:18,470
so that is the app very very simple app

00:18:15,110 --> 00:18:21,350
notice things that the testability one

00:18:18,470 --> 00:18:23,060
I'm separating and separating the

00:18:21,350 --> 00:18:24,920
running and the getting of the

00:18:23,060 --> 00:18:28,490
environment variables and the listening

00:18:24,920 --> 00:18:30,620
from the main core of the app - I'm

00:18:28,490 --> 00:18:32,810
retrying to connect the database because

00:18:30,620 --> 00:18:36,520
in tests I don't know which is going on

00:18:32,810 --> 00:18:36,520
which goes up first and three

00:18:39,040 --> 00:18:45,560
okay so let's see if I showed everything

00:18:42,980 --> 00:18:47,350
REST API need some addition using SQL

00:18:45,560 --> 00:18:50,810
the which are connected to is a

00:18:47,350 --> 00:18:53,150
separation of up and running app and

00:18:50,810 --> 00:18:56,690
configuration as and Barbara and those

00:18:53,150 --> 00:19:01,910
two are testing related yay I've shown

00:18:56,690 --> 00:19:03,710
everything so what will we be writing we

00:19:01,910 --> 00:19:05,690
will be writing unit tests integration

00:19:03,710 --> 00:19:08,120
tests and Englund those are the types of

00:19:05,690 --> 00:19:10,160
tests with the writing but no we won't

00:19:08,120 --> 00:19:12,050
be writing unit tests there are tons of

00:19:10,160 --> 00:19:14,030
information about writing unit tennis

00:19:12,050 --> 00:19:15,950
everybody when they start talking about

00:19:14,030 --> 00:19:18,890
unit tests they start with unit tests

00:19:15,950 --> 00:19:22,310
like add you know everybody just takes a

00:19:18,890 --> 00:19:25,280
unit a function like an and tests it for

00:19:22,310 --> 00:19:26,930
all the various use cases I don't want

00:19:25,280 --> 00:19:29,450
to talk about that we will talk about

00:19:26,930 --> 00:19:31,580
how much tests we need and everything in

00:19:29,450 --> 00:19:33,760
the end but let's what's more not for

00:19:31,580 --> 00:19:36,350
now because the most important thing is

00:19:33,760 --> 00:19:38,870
integration does how do I compare you

00:19:36,350 --> 00:19:41,990
guys to work first of all around the

00:19:38,870 --> 00:19:43,970
ship our server are way back okay then

00:19:41,990 --> 00:19:46,970
we run all the services it depends on

00:19:43,970 --> 00:19:49,310
the database the message queue whatever

00:19:46,970 --> 00:19:51,560
and how will we do that we will be using

00:19:49,310 --> 00:19:53,510
docker compose docker compose can run a

00:19:51,560 --> 00:19:55,820
lot of docker containers so if I'm using

00:19:53,510 --> 00:19:57,650
Redis and Postgres and a message queue

00:19:55,820 --> 00:19:59,570
and everything I can put them in one

00:19:57,650 --> 00:20:02,300
docker compose file and just run that

00:19:59,570 --> 00:20:04,130
boom and this is wonderful it changed

00:20:02,300 --> 00:20:07,450
the whole way we think of integration

00:20:04,130 --> 00:20:11,620
tests in no js' and other languages

00:20:07,450 --> 00:20:14,170
and now we've done the setup now for

00:20:11,620 --> 00:20:17,230
each test what we do we do we aged we do

00:20:14,170 --> 00:20:18,960
an HTTP call to the Stu web app okay to

00:20:17,230 --> 00:20:22,390
test let's say I want to split

00:20:18,960 --> 00:20:24,880
attendance so HTTP for an and then I

00:20:22,390 --> 00:20:28,090
HTTP for lists to check that the list of

00:20:24,880 --> 00:20:29,920
tenants has added that tenon and check

00:20:28,090 --> 00:20:32,680
that it works correctly in the end we

00:20:29,920 --> 00:20:37,950
tear down the server and docker

00:20:32,680 --> 00:20:37,950
containers and that's basically how

00:20:38,100 --> 00:20:42,000
that's an example

00:20:42,800 --> 00:20:45,930
[Music]

00:20:51,690 --> 00:21:04,000
all my enjoying desperate here ok so

00:20:59,700 --> 00:21:07,450
first of all I use a library I built

00:21:04,000 --> 00:21:09,820
back in the days called docker compose

00:21:07,450 --> 00:21:14,860
mocha it has nothing to do with moco but

00:21:09,820 --> 00:21:17,680
anyway bad name which what it does is it

00:21:14,860 --> 00:21:20,230
gets a the name of a docker compose file

00:21:17,680 --> 00:21:22,720
in this case this docker compose file

00:21:20,230 --> 00:21:25,600
which has just one container in it the

00:21:22,720 --> 00:21:27,460
Postgres container ok and the various

00:21:25,600 --> 00:21:31,570
environment variables that the Postgres

00:21:27,460 --> 00:21:33,700
container means and runs it and in the

00:21:31,570 --> 00:21:37,590
before runs the dog the dinner and the

00:21:33,700 --> 00:21:39,910
after kills the dog this is very cool

00:21:37,590 --> 00:21:42,220
not only that it has this cool effect

00:21:39,910 --> 00:21:45,490
where and the next time you run it maybe

00:21:42,220 --> 00:21:47,350
there are like rogue containers from

00:21:45,490 --> 00:21:50,260
from previous run so it kills them all

00:21:47,350 --> 00:21:51,400
so anyway that's that's what i run

00:21:50,260 --> 00:21:55,090
others

00:21:51,400 --> 00:21:58,240
first of all and before I prepare the

00:21:55,090 --> 00:22:00,310
database which is create schema and in

00:21:58,240 --> 00:22:02,350
the before age I reset the database

00:22:00,310 --> 00:22:04,950
which is clean all the rows from the

00:22:02,350 --> 00:22:07,810
tennis table well you'll see them and

00:22:04,950 --> 00:22:12,400
then it'll before I set up the app what

00:22:07,810 --> 00:22:17,140
does set up at means there we go said

00:22:12,400 --> 00:22:18,290
about I get the the address of Postgres

00:22:17,140 --> 00:22:20,810
from

00:22:18,290 --> 00:22:23,930
Campos it's not a specific every time

00:22:20,810 --> 00:22:29,510
the dr. Campos runs I get a separate

00:22:23,930 --> 00:22:31,880
address it's not a specific address why

00:22:29,510 --> 00:22:33,290
because I may have multiple tests

00:22:31,880 --> 00:22:35,660
running and I don't want them like

00:22:33,290 --> 00:22:40,010
interfering with one another so every

00:22:35,660 --> 00:22:42,250
port is random then I create the app and

00:22:40,010 --> 00:22:46,460
give it the connection string it means

00:22:42,250 --> 00:22:49,700
for for Postgres see I've just created

00:22:46,460 --> 00:22:53,480
the app using a function call and then I

00:22:49,700 --> 00:22:55,880
listen on what port port 0 what is port

00:22:53,480 --> 00:22:56,930
0 it means get me a for random port I

00:22:55,880 --> 00:22:59,360
don't hear what it is

00:22:56,930 --> 00:23:02,060
again all tests micro Service Desk

00:22:59,360 --> 00:23:03,680
should use random ports because if you

00:23:02,060 --> 00:23:05,120
want to run them in parallel and you

00:23:03,680 --> 00:23:06,980
will want to run them in parallel

00:23:05,120 --> 00:23:10,970
certain time you don't want them

00:23:06,980 --> 00:23:13,670
interfering so that's the setup and then

00:23:10,970 --> 00:23:15,770
let's look at the test let's see it

00:23:13,670 --> 00:23:18,620
should return cat after it is ours this

00:23:15,770 --> 00:23:21,290
is a test of test adding a tenant so we

00:23:18,620 --> 00:23:27,020
you know create a tenant with a with a

00:23:21,290 --> 00:23:30,140
random ID using and then we had a tenant

00:23:27,020 --> 00:23:32,990
I'm using my nice library HTTP commands

00:23:30,140 --> 00:23:35,240
which is a very very very very ill

00:23:32,990 --> 00:23:39,140
artist very small rapper above note

00:23:35,240 --> 00:23:42,890
finch and what it does is in this case

00:23:39,140 --> 00:23:45,770
it uses this URL fetches a JSON and

00:23:42,890 --> 00:23:48,650
posts this JSON to it so this will

00:23:45,770 --> 00:23:54,160
basically add a tenant notice the base

00:23:48,650 --> 00:23:57,110
URL here the base URL I get the address

00:23:54,160 --> 00:23:59,180
from the app instance I created earlier

00:23:57,110 --> 00:24:01,850
an app instance that surfer dog masters

00:23:59,180 --> 00:24:04,970
but port so this is the port that was

00:24:01,850 --> 00:24:08,300
created randomly by the setup app if you

00:24:04,970 --> 00:24:11,450
remember our ok and then I just you know

00:24:08,300 --> 00:24:14,120
post it that adds a tenant and then had

00:24:11,450 --> 00:24:18,340
to check I fetched the list of tenants

00:24:14,120 --> 00:24:22,250
and boom I check that it's equal to

00:24:18,340 --> 00:24:26,340
let's run just this test it thorough me

00:24:22,250 --> 00:24:29,250
and I do in the environs

00:24:26,340 --> 00:24:31,289
I don't want her in all this smoke

00:24:29,250 --> 00:24:41,309
repents see it's running the dollar

00:24:31,289 --> 00:24:44,159
compose and boom we pass okay now we've

00:24:41,309 --> 00:24:46,380
shown the example let's live code and

00:24:44,159 --> 00:24:52,710
integration there so this is the part

00:24:46,380 --> 00:24:54,840
with the lion okay delete a user okay

00:24:52,710 --> 00:24:57,059
this is this is what I'm gonna miss how

00:24:54,840 --> 00:24:58,980
do we believe in user first of all let's

00:24:57,059 --> 00:25:06,510
see how much time do I look first of all

00:24:58,980 --> 00:25:10,970
I create three users okay okay and then

00:25:06,510 --> 00:25:10,970
after a while right the coding aside I

00:25:12,820 --> 00:25:22,200
[Music]

00:25:16,159 --> 00:25:27,090
base recurrence is the tenants and then

00:25:22,200 --> 00:25:30,270
check the only tenants are the last ones

00:25:27,090 --> 00:25:39,590
are oh wait really create the fake that

00:25:30,270 --> 00:25:43,649
and believe the first an end and perfect

00:25:39,590 --> 00:25:47,250
but notice we have created we have added

00:25:43,649 --> 00:25:49,649
and we have list and it's really really

00:25:47,250 --> 00:25:51,720
not nice that I have to write this whole

00:25:49,649 --> 00:25:54,240
thing so let's do some refactoring

00:25:51,720 --> 00:25:58,200
because Visual Studio code is really

00:25:54,240 --> 00:25:58,980
cool about this so we take all this we

00:25:58,200 --> 00:26:01,890
command

00:25:58,980 --> 00:26:07,500
got it and I say instructor function

00:26:01,890 --> 00:26:10,350
boom yay

00:26:07,500 --> 00:26:15,200
now the base URL here is a function so

00:26:10,350 --> 00:26:15,200
I'm gonna you know munch it a little bit

00:26:15,380 --> 00:26:28,529
and I have a tenant here and let's do

00:26:19,169 --> 00:26:31,649
the same for list function this tenant

00:26:28,529 --> 00:26:33,320
remember your your test code is almost

00:26:31,649 --> 00:26:44,720
as important as your

00:26:33,320 --> 00:26:48,370
can go keep it nice and clean by the way

00:26:44,720 --> 00:26:48,370
why twice base URL function

00:26:51,700 --> 00:26:57,950
[Music]

00:26:54,649 --> 00:27:02,809
why is base URL a function because I

00:26:57,950 --> 00:27:05,990
don't know beforehand what the what the

00:27:02,809 --> 00:27:09,169
port is so I can only calculate it

00:27:05,990 --> 00:27:17,320
lazily it can be a Const address I can

00:27:09,169 --> 00:27:17,320
calculate it okay let's let's do it like

00:27:20,210 --> 00:27:26,319
[Music]

00:27:26,620 --> 00:27:59,500
okay this tenants all as long as we're

00:27:52,220 --> 00:27:59,500
here next to the update extract function

00:28:01,250 --> 00:28:04,440
[Music]

00:28:05,500 --> 00:28:15,350
singing it sucks the ring Wow code is

00:28:12,950 --> 00:28:17,090
much nicer look at it I can even remove

00:28:15,350 --> 00:28:20,200
the comment sighs I'm not

00:28:17,090 --> 00:28:20,200
[Music]

00:28:22,299 --> 00:28:42,770
URL okay it has actually when you're

00:28:40,010 --> 00:28:45,740
testing write clean code and is very

00:28:42,770 --> 00:28:47,600
very important so let's create three

00:28:45,740 --> 00:29:07,910
timings so let's first of all T the

00:28:47,600 --> 00:29:10,880
penance constants are a weight and a

00:29:07,910 --> 00:29:14,440
good friend of mine who is very much

00:29:10,880 --> 00:29:16,669
into micro-service testing needs also a

00:29:14,440 --> 00:29:19,820
consultant so if you wanted if you're a

00:29:16,669 --> 00:29:21,230
company wants to go into dive deep in is

00:29:19,820 --> 00:29:24,020
microservices fasting and need to

00:29:21,230 --> 00:29:26,179
consult them on that go talk to him he

00:29:24,020 --> 00:29:31,130
is wonderful and we have like similar

00:29:26,179 --> 00:29:36,770
views on okay so we have the Tenon's now

00:29:31,130 --> 00:29:45,919
we create weights you around see how

00:29:36,770 --> 00:29:47,530
makes me great and we've created three

00:29:45,919 --> 00:29:51,860
dummies

00:29:47,530 --> 00:29:53,929
perfect but I know I don't like this why

00:29:51,860 --> 00:29:57,380
why are we doing it it's eerily we're

00:29:53,929 --> 00:30:02,410
not yes it is so easy to do it using

00:29:57,380 --> 00:30:08,260
promised at all and do it in parallel

00:30:02,410 --> 00:30:08,260
whoo that makes our testing so much

00:30:12,760 --> 00:30:22,410
[Music]

00:30:18,680 --> 00:30:24,480
there we go if you're asking or the way

00:30:22,410 --> 00:30:27,570
you know Auto indents and everything I'm

00:30:24,480 --> 00:30:30,570
using career and the career so it just

00:30:27,570 --> 00:30:32,220
you know makes it prettier every time I

00:30:30,570 --> 00:30:34,770
don't need to indent it myself this is

00:30:32,220 --> 00:30:36,960
great but we can do better because

00:30:34,770 --> 00:30:40,170
looking going through the penance so and

00:30:36,960 --> 00:30:41,490
we have the cannon Terry so let's do

00:30:40,170 --> 00:30:46,430
this

00:30:41,490 --> 00:30:49,619
we mouth and we say on each payment

00:30:46,430 --> 00:30:49,619
[Music]

00:30:52,890 --> 00:30:56,469
[Music]

00:31:03,710 --> 00:31:06,910
[Music]

00:31:08,300 --> 00:31:18,660
wonderful it's so easy to paralyze stuff

00:31:12,480 --> 00:31:21,930
it's magic ok so now we delete the first

00:31:18,660 --> 00:31:25,010
time how do we delete and then we do we

00:31:21,930 --> 00:31:29,550
take HTTP comment and we fetch base

00:31:25,010 --> 00:31:49,530
vectorization we post updates on body

00:31:29,550 --> 00:31:51,000
but the API is and we post whatever it

00:31:49,530 --> 00:31:52,410
doesn't care what it would it hasn't the

00:31:51,000 --> 00:31:57,300
body so we're posting like a regular

00:31:52,410 --> 00:32:19,260
nothing and but we don't want to post so

00:31:57,300 --> 00:32:20,880
we expect and we expect but let's not do

00:32:19,260 --> 00:32:25,850
equal that list because we don't know

00:32:20,880 --> 00:32:28,159
what order we're getting in so to have

00:32:25,850 --> 00:32:33,100
which members we won't want the pennant

00:32:28,159 --> 00:32:36,110
from the first from the second but in

00:32:33,100 --> 00:32:39,289
zero index it's the first so we take the

00:32:36,110 --> 00:32:41,090
second and the third as an area so we

00:32:39,289 --> 00:32:44,240
wanted to have member and because we

00:32:41,090 --> 00:32:46,279
want this is this is Thai we want the

00:32:44,240 --> 00:32:48,950
equality could be equality because we're

00:32:46,279 --> 00:32:52,309
comparing objects so we wanted to check

00:32:48,950 --> 00:32:54,009
out the whole game so that's it so we

00:32:52,309 --> 00:32:57,980
added dependents

00:32:54,009 --> 00:32:59,840
we deleted the tenants and then we list

00:32:57,980 --> 00:33:03,460
the tenants and expect them to be only

00:32:59,840 --> 00:33:21,350
these last two so nice

00:33:03,460 --> 00:33:23,830
will this work no it didn't work

00:33:21,350 --> 00:33:26,360
good the lion hate me but it just

00:33:23,830 --> 00:33:33,860
tickling oh of course

00:33:26,360 --> 00:33:39,590
base you're okay that's right lion I

00:33:33,860 --> 00:33:42,769
fear you not yay the test pass notice

00:33:39,590 --> 00:33:45,379
the 47 milliseconds that yes

00:33:42,769 --> 00:33:47,929
running the darker took some time and

00:33:45,379 --> 00:33:50,690
that's the set of time but the test

00:33:47,929 --> 00:34:10,639
itself ran really really quickly but

00:33:50,690 --> 00:34:13,700
still we're running the test of delete a

00:34:10,639 --> 00:34:15,889
hundred times that is including deleting

00:34:13,700 --> 00:34:18,440
all the rules look how fast that is that

00:34:15,889 --> 00:34:22,250
is crazy fast most of the tests are

00:34:18,440 --> 00:34:25,579
running under 40 milliseconds okay like

00:34:22,250 --> 00:34:27,409
half of them so you can run hundreds of

00:34:25,579 --> 00:34:30,579
tests and have these tests pass in

00:34:27,409 --> 00:34:32,750
seconds so don't be afraid of

00:34:30,579 --> 00:34:34,280
integrationists you don't need to go all

00:34:32,750 --> 00:34:36,829
the way into unit that's because you

00:34:34,280 --> 00:34:39,909
need things to be fast integration test

00:34:36,829 --> 00:34:39,909
a really fast

00:34:40,020 --> 00:34:46,940
[Music]

00:34:41,599 --> 00:35:05,220
yay we have just finished but because

00:34:46,940 --> 00:35:35,030
okay because I want to be nice yeah but

00:35:05,220 --> 00:35:44,190
I don't owe all of this okay in unit and

00:35:35,030 --> 00:35:53,460
everything okay just a sec yay all the

00:35:44,190 --> 00:35:56,099
integrations has passed so yes okay so

00:35:53,460 --> 00:35:58,560
we saw the composed by animal we saw how

00:35:56,099 --> 00:36:00,869
to set up the DB we saw the Apple tools

00:35:58,560 --> 00:36:02,790
docker compose mocha feel free it is

00:36:00,869 --> 00:36:04,470
open source you can use it get address

00:36:02,790 --> 00:36:07,710
for service because we don't know what

00:36:04,470 --> 00:36:09,570
the Postgres server address is because

00:36:07,710 --> 00:36:12,060
we want to make it random every time we

00:36:09,570 --> 00:36:14,550
run so we get the actress from docker

00:36:12,060 --> 00:36:16,410
prepare the database we didn't see that

00:36:14,550 --> 00:36:18,560
not very important reset the database

00:36:16,410 --> 00:36:21,000
just deletes all the rows in the table

00:36:18,560 --> 00:36:25,859
because I want each test to start fresh

00:36:21,000 --> 00:36:28,680
and then setup app and that's nice

00:36:25,859 --> 00:36:31,050
because remember that micro service

00:36:28,680 --> 00:36:33,630
where we create the app the nice thing

00:36:31,050 --> 00:36:35,670
about that is if we have a test of an

00:36:33,630 --> 00:36:37,260
either micro service and it wants to use

00:36:35,670 --> 00:36:39,210
this micro service it doesn't need to

00:36:37,260 --> 00:36:42,270
get it as a docker container it can just

00:36:39,210 --> 00:36:44,670
declare a dependency on it and just

00:36:42,270 --> 00:36:46,710
create the app itself make it listen and

00:36:44,670 --> 00:36:49,440
that makes the two micro service testing

00:36:46,710 --> 00:36:50,309
really easy because you can just require

00:36:49,440 --> 00:36:53,279
the two

00:36:50,309 --> 00:36:54,900
the dots boom you have a like mostly

00:36:53,279 --> 00:36:58,949
end-to-end test without running

00:36:54,900 --> 00:37:02,930
doctrinal okay and we saw how fast this

00:36:58,949 --> 00:37:06,420
by running tests multiple times perfect

00:37:02,930 --> 00:37:13,079
up like loading an end-to-end we're on

00:37:06,420 --> 00:37:14,819
it okay now why would he do that to him

00:37:13,079 --> 00:37:16,949
what did it mean end-to-end it's just

00:37:14,819 --> 00:37:18,509
one micro service and the answer is this

00:37:16,949 --> 00:37:22,380
is what we call the little end-to-end

00:37:18,509 --> 00:37:24,420
test we've tested the end but we haven't

00:37:22,380 --> 00:37:26,939
tested it inside a docker container and

00:37:24,420 --> 00:37:29,309
you know we didn't test the run code and

00:37:26,939 --> 00:37:31,680
the environment variables and all that

00:37:29,309 --> 00:37:33,569
glue code yes we know that most of it

00:37:31,680 --> 00:37:35,309
runs but how do we know that it runs on

00:37:33,569 --> 00:37:36,869
a docker container you don't need to run

00:37:35,309 --> 00:37:38,819
all of this you can just think one of

00:37:36,869 --> 00:37:46,319
the integration tests and see if it

00:37:38,819 --> 00:37:49,680
works in the docker container okay okay

00:37:46,319 --> 00:37:52,859
so we'll do the add test it's the

00:37:49,680 --> 00:37:55,229
simplest and it tests whether we test

00:37:52,859 --> 00:37:57,019
first of all we need to run what we need

00:37:55,229 --> 00:38:00,150
to build about her

00:37:57,019 --> 00:38:02,069
our daughter container so the docker

00:38:00,150 --> 00:38:04,199
container is built and now look at the

00:38:02,069 --> 00:38:06,749
docker compose the engine test is using

00:38:04,199 --> 00:38:09,839
it's running Postgres but it's also

00:38:06,749 --> 00:38:11,819
running our app itself see this is the

00:38:09,839 --> 00:38:14,519
name of the image that we've just

00:38:11,819 --> 00:38:17,759
created guilty r / - services are made

00:38:14,519 --> 00:38:20,489
for testing and in setting Li in the

00:38:17,759 --> 00:38:23,880
darker the Postgres connection string

00:38:20,489 --> 00:38:26,449
has an environment variable okay so that

00:38:23,880 --> 00:38:29,999
when the docker container runs this code

00:38:26,449 --> 00:38:32,869
we get the environment variable and the

00:38:29,999 --> 00:38:40,709
app gets the connection string perfect

00:38:32,869 --> 00:38:46,309
okay now what do we need to do here one

00:38:40,709 --> 00:38:46,309
a dependent this tenant

00:38:51,990 --> 00:39:00,370
but we have this we have those but there

00:38:56,050 --> 00:39:02,890
in in there here our not there here in

00:39:00,370 --> 00:39:05,890
the integration tests so what do we do

00:39:02,890 --> 00:39:08,650
look they're perfect they get a base URL

00:39:05,890 --> 00:39:12,250
and everything so what do we do we

00:39:08,650 --> 00:39:17,890
Visual Studio code refactor it and move

00:39:12,250 --> 00:39:38,920
it creates a new file just really cool

00:39:17,890 --> 00:39:46,800
there we go here it is called delete and

00:39:38,920 --> 00:39:49,390
that's really bad and look what it did

00:39:46,800 --> 00:39:50,200
if you require that I don't mean it's

00:39:49,390 --> 00:39:52,390
fine

00:39:50,200 --> 00:39:54,610
but it in order whatever I wanted to

00:39:52,390 --> 00:39:58,120
important and copied everything I need

00:39:54,610 --> 00:40:02,530
here add it here

00:39:58,120 --> 00:40:05,560
whew this is amazing I need a yes

00:40:02,530 --> 00:40:09,820
because in node.js modules I have to add

00:40:05,560 --> 00:40:11,890
them and the extension and then I move

00:40:09,820 --> 00:40:14,380
it to Commons because I wanted also an

00:40:11,890 --> 00:40:16,300
end to end and you know rewrites

00:40:14,380 --> 00:40:22,510
everything but it rewrites it badly

00:40:16,300 --> 00:40:26,820
because no jail Oh perfectly okay and oh

00:40:22,510 --> 00:40:26,820
now I can do the end I will

00:40:29,220 --> 00:40:33,000
[Music]

00:40:40,080 --> 00:40:54,240
[Music]

00:40:45,150 --> 00:40:56,839
Oh at a tenant so we await its URL well

00:40:54,240 --> 00:40:56,839
what is the

00:40:59,509 --> 00:41:03,499
it's my regular tact

00:41:03,660 --> 00:41:06,990
[Music]

00:41:05,779 --> 00:41:40,859
perfect

00:41:06,990 --> 00:41:43,230
oh and now we need the beta okay first

00:41:40,859 --> 00:42:12,390
of all remember the app is running in

00:41:43,230 --> 00:42:15,930
dr. Campos so I need to ask service get

00:42:12,390 --> 00:42:22,380
address for service for service and it

00:42:15,930 --> 00:42:25,019
means the N name and the name in the

00:42:22,380 --> 00:42:28,140
docker compose that app and the port it

00:42:25,019 --> 00:42:32,430
explosives we say so now I get the

00:42:28,140 --> 00:42:40,580
apparatus that's just the IP and the

00:42:32,430 --> 00:42:46,390
port the base URL is the dollar

00:42:40,580 --> 00:42:46,390
[Music]

00:42:47,510 --> 00:42:57,380
and we have a test we have a gun and we

00:42:52,770 --> 00:42:57,380
got the base URL we add an end we list

00:42:57,890 --> 00:43:05,970
and let's it's not only so we can just

00:43:01,080 --> 00:43:15,480
only that and MP on wrong to smoke lion

00:43:05,970 --> 00:43:18,120
lion where are you yes it passed by the

00:43:15,480 --> 00:43:21,450
way is it passing this thanks for

00:43:18,120 --> 00:43:23,700
something okay so that it fails by the

00:43:21,450 --> 00:43:27,000
way every time I run when it passes the

00:43:23,700 --> 00:43:30,060
first time I check I make it fail just

00:43:27,000 --> 00:43:32,940
see that it's not passing always perfect

00:43:30,060 --> 00:43:49,860
it failed as it should

00:43:32,940 --> 00:43:52,320
now we can run all the oh but here I'm

00:43:49,860 --> 00:44:36,990
in the test I'm also checking the press

00:43:52,320 --> 00:44:40,220
ok yes show we showed previously oh oh

00:44:36,990 --> 00:44:44,040
we use it we're not using no parent is

00:44:40,220 --> 00:44:46,650
ok testing strategy we've seen how to

00:44:44,040 --> 00:44:49,290
live code we've seen it's not actually

00:44:46,650 --> 00:44:51,420
very difficult if you have the correct

00:44:49,290 --> 00:44:52,820
pieces of the puzzle which are darker

00:44:51,420 --> 00:44:57,080
compose or

00:44:52,820 --> 00:44:59,330
to run the services like Postgres if we

00:44:57,080 --> 00:45:01,160
separate you know the the taking of the

00:44:59,330 --> 00:45:03,020
configuration from the run from the

00:45:01,160 --> 00:45:05,990
creating of the app and the listening

00:45:03,020 --> 00:45:09,280
and then you just HTTP and track HTTP

00:45:05,990 --> 00:45:12,200
and HTTPS right it is that simple

00:45:09,280 --> 00:45:14,660
unless micro service is a difficult one

00:45:12,200 --> 00:45:16,580
to test like lots of queues and lots of

00:45:14,660 --> 00:45:18,950
things but that's ok that's not

00:45:16,580 --> 00:45:21,350
accidental complexity that is a real

00:45:18,950 --> 00:45:23,510
complexity and there's nothing we can do

00:45:21,350 --> 00:45:27,290
but in terms of accidental comfortless

00:45:23,510 --> 00:45:28,940
be there is not a lot okay and why is

00:45:27,290 --> 00:45:30,650
this different from monolith testing

00:45:28,940 --> 00:45:32,450
from testing a huge app with like

00:45:30,650 --> 00:45:34,760
hundreds of thousands of lines of code

00:45:32,450 --> 00:45:37,760
and the answer is because a micro

00:45:34,760 --> 00:45:41,480
service is small integration tests do a

00:45:37,760 --> 00:45:44,300
great job okay they run fast or easy to

00:45:41,480 --> 00:45:46,880
do there's not a lot so no really need

00:45:44,300 --> 00:45:49,220
for a lot of unit tests okay you don't

00:45:46,880 --> 00:45:51,080
need to mark everything into lots of

00:45:49,220 --> 00:45:53,540
universe because your integration tests

00:45:51,080 --> 00:45:56,360
are very quick very easy to write code

00:45:53,540 --> 00:45:59,090
is simple not a lot of data itself and

00:45:56,360 --> 00:46:01,130
if the test fails it's usually fairly

00:45:59,090 --> 00:46:02,720
easy to see why if you're doing a

00:46:01,130 --> 00:46:04,160
monolith and you're doing integration

00:46:02,720 --> 00:46:06,320
tests where you're taking a lot of the

00:46:04,160 --> 00:46:08,630
application together it's very difficult

00:46:06,320 --> 00:46:10,220
to test very difficult to setup and very

00:46:08,630 --> 00:46:12,530
difficult to see where the buggy when

00:46:10,220 --> 00:46:15,170
the test fails but in micro services

00:46:12,530 --> 00:46:16,040
because they're very small everything is

00:46:15,170 --> 00:46:18,890
perfect

00:46:16,040 --> 00:46:21,860
what about unit tests throw all of them

00:46:18,890 --> 00:46:24,470
away no no no no no you have to sort of

00:46:21,860 --> 00:46:26,420
wonderful and use them for mostly pure

00:46:24,470 --> 00:46:29,750
logic like you know functions that you

00:46:26,420 --> 00:46:30,620
know input algorithm output use them for

00:46:29,750 --> 00:46:33,800
that

00:46:30,620 --> 00:46:35,750
there's SQL row two thing is is perfect

00:46:33,800 --> 00:46:37,820
it's great for those many permutations

00:46:35,750 --> 00:46:38,810
where if a lot a lot of permutations you

00:46:37,820 --> 00:46:41,180
don't want to check them all in

00:46:38,810 --> 00:46:44,150
integration test so you take that logic

00:46:41,180 --> 00:46:46,760
you tease out the logic make it into a

00:46:44,150 --> 00:46:49,790
unit that is easily testable and tested

00:46:46,760 --> 00:46:51,980
as a unit is just don't do the test

00:46:49,790 --> 00:46:53,690
all units any function I write I write

00:46:51,980 --> 00:46:55,280
it as a you and I write a unit test for

00:46:53,690 --> 00:46:57,890
that you don't need that integration

00:46:55,280 --> 00:47:00,530
tests are what is therefore usually unit

00:46:57,890 --> 00:47:02,810
testing to test what are really testable

00:47:00,530 --> 00:47:04,660
units things that are mostly independent

00:47:02,810 --> 00:47:07,990
as humans

00:47:04,660 --> 00:47:10,299
make sense to test and how do I try

00:47:07,990 --> 00:47:15,190
write this well we have a very easy

00:47:10,299 --> 00:47:17,650
I had a belittles we qualify ensure that

00:47:15,190 --> 00:47:20,079
me and my team write tests and the

00:47:17,650 --> 00:47:22,690
answer is very easy never run the micro

00:47:20,079 --> 00:47:24,339
service locally if you write code you

00:47:22,690 --> 00:47:26,680
want to tell you want to check that the

00:47:24,339 --> 00:47:29,140
code you write is bad you can't run the

00:47:26,680 --> 00:47:30,940
micro service and use postman to HTTP

00:47:29,140 --> 00:47:32,170
things and check that it works you are

00:47:30,940 --> 00:47:34,839
not allowed to do that

00:47:32,170 --> 00:47:36,880
okay that's rule number one never run

00:47:34,839 --> 00:47:39,460
your monitor service locally so how do

00:47:36,880 --> 00:47:41,799
you check that your code works is it you

00:47:39,460 --> 00:47:43,240
read a test so everything you write if

00:47:41,799 --> 00:47:45,700
you really want to check that it works

00:47:43,240 --> 00:47:48,430
you write a test and those tests remain

00:47:45,700 --> 00:47:50,920
forever and that is how we make sure

00:47:48,430 --> 00:47:53,589
that we write tests for our micro

00:47:50,920 --> 00:47:54,760
services and it's a pretty good way you

00:47:53,589 --> 00:47:56,589
don't want to write tests you want to

00:47:54,760 --> 00:48:00,660
deploy straight to production fine by us

00:47:56,589 --> 00:48:02,950
but it's on you and it never happens

00:48:00,660 --> 00:48:04,450
okay what is the right mixture of unit

00:48:02,950 --> 00:48:06,220
integration and claim there are a lot of

00:48:04,450 --> 00:48:08,740
schools there's the pyramid school which

00:48:06,220 --> 00:48:10,619
is a lot of unit tests this is true for

00:48:08,740 --> 00:48:12,700
monolith apps I think further

00:48:10,619 --> 00:48:14,920
microservices this is less true as we

00:48:12,700 --> 00:48:17,470
talked about so not a lot of unit tests

00:48:14,920 --> 00:48:18,760
only make sense a lot of integration

00:48:17,470 --> 00:48:20,890
tests like we've seen they're really

00:48:18,760 --> 00:48:24,279
fast and very easy to write and very

00:48:20,890 --> 00:48:26,559
very few into and small adventists the

00:48:24,279 --> 00:48:29,559
right mixture is and we said a lot of

00:48:26,559 --> 00:48:31,660
integrations but if you can do a unit

00:48:29,559 --> 00:48:33,460
tease out unit code that can be tested

00:48:31,660 --> 00:48:37,690
separately without a lot of mock so with

00:48:33,460 --> 00:48:39,640
zero month do that an end-to-end small

00:48:37,690 --> 00:48:41,740
and blended test just a micro service as

00:48:39,640 --> 00:48:43,690
a docker container just to make sure

00:48:41,740 --> 00:48:48,849
that the docker image works over one or

00:48:43,690 --> 00:48:51,250
two and and there are scenarios that

00:48:48,849 --> 00:48:53,589
can't be integration testing some really

00:48:51,250 --> 00:48:56,079
weird ones we have those at Apple to do

00:48:53,589 --> 00:48:58,420
in Atlanta and don't forget to write a

00:48:56,079 --> 00:49:01,029
big end-to-end and test all the micro

00:48:58,420 --> 00:49:03,130
services together but that is a subject

00:49:01,029 --> 00:49:05,140
of a really separate talk with is it's a

00:49:03,130 --> 00:49:10,029
whole separate subject how do we do that

00:49:05,140 --> 00:49:11,559
or do we need it at all what about you

00:49:10,029 --> 00:49:12,210
know a lot of people write micro

00:49:11,559 --> 00:49:14,730
services

00:49:12,210 --> 00:49:17,130
control our calls to service calls to a

00:49:14,730 --> 00:49:18,990
dowel you know that access layer or it's

00:49:17,130 --> 00:49:21,570
called a store or repository in some

00:49:18,990 --> 00:49:23,339
places I'm not a huge fan because micro

00:49:21,570 --> 00:49:27,720
services are small I can meet all those

00:49:23,339 --> 00:49:30,930
layers so sometimes you do okay I have

00:49:27,720 --> 00:49:35,670
some where the store the data access is

00:49:30,930 --> 00:49:38,430
very hairy so I have those and what I do

00:49:35,670 --> 00:49:40,650
is I test the store separately as a

00:49:38,430 --> 00:49:42,540
separate thing because it's complex

00:49:40,650 --> 00:49:44,790
logic this is a good example of not

00:49:42,540 --> 00:49:46,800
testing the whole integration test not

00:49:44,790 --> 00:49:48,330
testing the whole micro-service not only

00:49:46,800 --> 00:49:51,570
don't wanna live it but the spore

00:49:48,330 --> 00:49:54,300
separately so I'm not sure you can hear

00:49:51,570 --> 00:49:57,599
that I'm pretty sure you can but if you

00:49:54,300 --> 00:49:59,369
can this is very an old song these boots

00:49:57,599 --> 00:50:04,099
were made for walking and that's just

00:49:59,369 --> 00:50:04,099
what they'll do one of these days

00:50:05,810 --> 00:50:10,290
micro-services remember made for testing

00:50:08,369 --> 00:50:12,450
and that's what you should do because

00:50:10,290 --> 00:50:15,869
one of these days these tests are gonna

00:50:12,450 --> 00:50:19,080
help a lot for you and I always always

00:50:15,869 --> 00:50:20,520
always finished testing talks I don't

00:50:19,080 --> 00:50:22,740
have just testing talks but if it's a

00:50:20,520 --> 00:50:24,930
testing talk I always finish with the

00:50:22,740 --> 00:50:28,140
litany of fear like Frank Herbert's

00:50:24,930 --> 00:50:30,869
young usually I make everybody go you

00:50:28,140 --> 00:50:33,930
know stand up and recite it with me in

00:50:30,869 --> 00:50:36,000
this case tough so I won't recite it

00:50:33,930 --> 00:50:39,200
myself so please listen

00:50:36,000 --> 00:50:41,700
I must not fear fear is the mind killer

00:50:39,200 --> 00:50:44,810
fear is the little death that brings

00:50:41,700 --> 00:50:47,580
total obliteration I will test my

00:50:44,810 --> 00:50:49,619
microservices I will permit them to pass

00:50:47,580 --> 00:50:52,260
over and through me and when they have

00:50:49,619 --> 00:50:54,750
gone past I will turn the inner eye to

00:50:52,260 --> 00:50:58,890
see their path where the fear is gone

00:50:54,750 --> 00:51:07,349
there will be nothing only my tests will

00:50:58,890 --> 00:51:10,859
remain thank you very much ok questions

00:51:07,349 --> 00:51:13,410
this is questions time yes thank you

00:51:10,859 --> 00:51:16,980
very much Jill for the presentation was

00:51:13,410 --> 00:51:19,320
really impressive thank you I can say

00:51:16,980 --> 00:51:24,539
that there are no questions right now in

00:51:19,320 --> 00:51:27,660
the chat where anyone has any questions

00:51:24,539 --> 00:51:29,729
anything comes to your mind just feel

00:51:27,660 --> 00:51:33,509
free to join the selection when I was

00:51:29,729 --> 00:51:36,509
mentioning before we all are available

00:51:33,509 --> 00:51:39,809
there so you can talk to Joe there as

00:51:36,509 --> 00:51:43,469
well it is already on the screen you can

00:51:39,809 --> 00:51:46,890
see the link there so feel free to join

00:51:43,469 --> 00:51:50,579
it and we will be also mentioning their

00:51:46,890 --> 00:51:53,279
ever next meetups so you will stay tuned

00:51:50,579 --> 00:51:59,099
and also we will be sending their a

00:51:53,279 --> 00:52:01,890
feedback form so post questions like or

00:51:59,099 --> 00:52:03,959
ante if you have any question just feel

00:52:01,890 --> 00:52:06,289
free to type it into the chat and we can

00:52:03,959 --> 00:52:09,959
go through it right now I can see a

00:52:06,289 --> 00:52:15,449
question there in the chat so I'm just

00:52:09,959 --> 00:52:17,279
answering and Tom each yeah and I will

00:52:15,449 --> 00:52:20,729
just finish so that there will be a

00:52:17,279 --> 00:52:23,519
feedback form posted intersectional so

00:52:20,729 --> 00:52:27,359
if you can fill it in it will be great

00:52:23,519 --> 00:52:29,699
and we will now wait for anta if he has

00:52:27,359 --> 00:52:33,569
any question right now or if he

00:52:29,699 --> 00:52:41,429
continues in the in the discussion on

00:52:33,569 --> 00:52:45,049
slack so feel free if anyone has any

00:52:41,429 --> 00:52:49,049
other questions just type them in and

00:52:45,049 --> 00:52:51,319
Jill can answer them I believe yeah I'm

00:52:49,049 --> 00:52:51,319
here

00:53:03,420 --> 00:53:14,290
yeah no questions coming right now I'll

00:53:12,310 --> 00:53:18,730
be in the slag channel for an hour yeah

00:53:14,290 --> 00:53:21,390
I think we can end it here right now

00:53:18,730 --> 00:53:24,700
so thank you very much you once again

00:53:21,390 --> 00:53:28,080
for this awesome presentation it was

00:53:24,700 --> 00:53:31,030
really perfect to have you here and

00:53:28,080 --> 00:53:36,060
thanks everyone for joining once again

00:53:31,030 --> 00:53:40,159
and see you hopefully soon bye

00:53:36,060 --> 00:53:40,159
[Music]

00:53:48,650 --> 00:53:50,710

YouTube URL: https://www.youtube.com/watch?v=NJZefiPUoUw


