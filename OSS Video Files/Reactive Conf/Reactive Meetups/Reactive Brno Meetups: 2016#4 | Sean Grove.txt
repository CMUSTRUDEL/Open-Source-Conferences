Title: Reactive Brno Meetups: 2016#4 | Sean Grove
Publication date: 2016-11-18
Playlist: Reactive Meetups
Description: 
	Topic: The Reason for OCaml

Reason(ml) is a new developer experience built by the same people behind React. While its OCaml roots given it unprecedented range - from unikernel servers booting in 50 ms to native ARM64 apps to performant JS targets - Facebook has invested heavily in shaping a friendlier, javascript-like syntax, providing deep editor integrations, and crafting thoughtful build tooling for a very impressive developer experience. We'll take a look at whether Reason has the potential to be as easy as JavaScript, as delightful as Elm, and as powerful as native.

==

Sean has been convinced there are better ways to develop applications across the stack for years. So heâ€™s built time-traveling debuggers, interface builders, layout tools, and graphic design tools in his quest to explore the space! You can meet Sean, the founder of Bushido and specialist in neuroscience, artificial intelligence, and applications of social models.
Captions: 
	00:00:00,170 --> 00:00:04,770
everybody can hear me looks like it

00:00:02,490 --> 00:00:07,770
should be okay thank you very much for

00:00:04,770 --> 00:00:09,630
having me I appreciate it all right so

00:00:07,770 --> 00:00:14,190
how many of you guys wash the live

00:00:09,630 --> 00:00:17,190
stream from reactive cough awesome let

00:00:14,190 --> 00:00:19,949
me take until you get the same talk

00:00:17,190 --> 00:00:21,539
again what others are coping is reactive

00:00:19,949 --> 00:00:23,279
coffee is just huge right it's like

00:00:21,539 --> 00:00:25,529
seven or eight hundred people and it's

00:00:23,279 --> 00:00:27,900
an amazing event but I also really like

00:00:25,529 --> 00:00:30,090
kind of the smaller events like this so

00:00:27,900 --> 00:00:32,579
because we can have a slightly more

00:00:30,090 --> 00:00:34,739
interactive approach so what I would

00:00:32,579 --> 00:00:38,129
encourage is as I'm going through this

00:00:34,739 --> 00:00:40,890
slide if there's anything questions pop

00:00:38,129 --> 00:00:43,230
up feel free to ask so I would say just

00:00:40,890 --> 00:00:44,910
wait for about five minutes and then

00:00:43,230 --> 00:00:47,329
from there just anytime you have a

00:00:44,910 --> 00:00:51,570
question I raise your hand and ask that

00:00:47,329 --> 00:00:54,210
sound good awesome alright already we

00:00:51,570 --> 00:00:57,210
have like audience participation I'm

00:00:54,210 --> 00:01:01,109
excited alright cool how many of you

00:00:57,210 --> 00:01:03,899
guys have heard of reason oh very few

00:01:01,109 --> 00:01:07,170
people like goodness how many people

00:01:03,899 --> 00:01:08,520
have heard of Oh camera all right few

00:01:07,170 --> 00:01:10,680
more hands of those that raise your

00:01:08,520 --> 00:01:17,430
hands how when you have built anything

00:01:10,680 --> 00:01:21,630
you know careful okay sorry this if

00:01:17,430 --> 00:01:27,360
sharp F sharp is closed it's maybe not

00:01:21,630 --> 00:01:30,689
doesn't count but yes it's a noun is

00:01:27,360 --> 00:01:33,119
also very similar you see why they are

00:01:30,689 --> 00:01:35,909
not quite the same thing but maybe at

00:01:33,119 --> 00:01:39,000
the end ask me about the comparisons

00:01:35,909 --> 00:01:41,700
between F sharp and elm and n reason we

00:01:39,000 --> 00:01:43,090
have to go over them yes a part of the

00:01:41,700 --> 00:01:45,789
challenge with okay

00:01:43,090 --> 00:01:47,890
killer is that it's a lot of people in

00:01:45,789 --> 00:01:49,420
the US have never heard of it some

00:01:47,890 --> 00:01:50,920
people in Europe have because of the

00:01:49,420 --> 00:01:52,600
University and so they have a lot of

00:01:50,920 --> 00:01:54,009
very bad memories about it whether

00:01:52,600 --> 00:01:57,340
they're writing some sort of you know

00:01:54,009 --> 00:01:58,750
tree searching out wortham thinking when

00:01:57,340 --> 00:02:02,740
my am going to use this language for

00:01:58,750 --> 00:02:05,709
real so reason it is a bit of a rethink

00:02:02,740 --> 00:02:07,719
of that so it is entirely based on o

00:02:05,709 --> 00:02:09,280
camel and it's build not as a new

00:02:07,719 --> 00:02:12,160
language but as they developer

00:02:09,280 --> 00:02:16,329
experience it's built by the same people

00:02:12,160 --> 00:02:17,920
as the ones who built react and the idea

00:02:16,329 --> 00:02:20,170
is that we're going to take a camel

00:02:17,920 --> 00:02:23,019
we're not making a new language what

00:02:20,170 --> 00:02:25,810
we're going to do is make a new syntax

00:02:23,019 --> 00:02:28,420
port that is entirely compatible the old

00:02:25,810 --> 00:02:31,030
one and we're going to have deep deep

00:02:28,420 --> 00:02:33,549
editor integration and a blessed a stack

00:02:31,030 --> 00:02:35,260
of tools one of the big challenges with

00:02:33,549 --> 00:02:36,790
getting started with any language is

00:02:35,260 --> 00:02:39,819
going to be whether or not the tools are

00:02:36,790 --> 00:02:41,860
kind of robust or not and so reason

00:02:39,819 --> 00:02:45,310
really goes out of its way to make sure

00:02:41,860 --> 00:02:47,200
that the tools work very nicely so first

00:02:45,310 --> 00:02:49,120
I want to give you guys a quick demo I

00:02:47,200 --> 00:02:51,609
forgot this latest here so there could

00:02:49,120 --> 00:02:53,350
be some problem with this but how many

00:02:51,609 --> 00:02:55,630
you guys have heard of a pacman complete

00:02:53,350 --> 00:02:58,630
language before what about a

00:02:55,630 --> 00:03:00,489
turing-complete language alright cool so

00:02:58,630 --> 00:03:02,470
we all know terrible anguish it's like

00:03:00,489 --> 00:03:03,430
that's not a very high bar there are a

00:03:02,470 --> 00:03:05,530
lot of languages that are

00:03:03,430 --> 00:03:09,190
turing-complete but not particularly

00:03:05,530 --> 00:03:10,390
nice to use so pac-man any language is

00:03:09,190 --> 00:03:11,950
says that your language

00:03:10,390 --> 00:03:15,520
particularly interesting unless you can

00:03:11,950 --> 00:03:19,300
implement background in it so I don't

00:03:15,520 --> 00:03:26,520
have a pacman specifically let me see if

00:03:19,300 --> 00:03:26,520
I can find another example

00:03:28,569 --> 00:03:30,599
Oh

00:03:43,430 --> 00:03:45,489
Oh

00:03:50,900 --> 00:03:56,120
it was called app so I'm not gonna be

00:03:52,579 --> 00:03:59,079
able find a girl all right may have one

00:03:56,120 --> 00:03:59,079
of the basic funding

00:04:02,590 --> 00:04:06,269
x javascript

00:04:10,220 --> 00:04:14,980
sorry come on I don't have to go for you

00:04:15,190 --> 00:04:19,820
I mean so I can I can build it again I

00:04:18,019 --> 00:04:24,050
just one way with you guys watch you

00:04:19,820 --> 00:04:26,470
build it cool so one of the things i

00:04:24,050 --> 00:04:29,300
think about with programming is I

00:04:26,470 --> 00:04:31,040
inherently like programming as part of

00:04:29,300 --> 00:04:32,600
the reason i think i became a programmer

00:04:31,040 --> 00:04:34,640
right so you get lucky doing what you

00:04:32,600 --> 00:04:37,520
like but there are times when actually i

00:04:34,640 --> 00:04:39,680
find i don't like it and so I kind of

00:04:37,520 --> 00:04:41,690
start sit down and think about what when

00:04:39,680 --> 00:04:43,370
I'm not enjoying it what is it that I'm

00:04:41,690 --> 00:04:45,550
gonna enjoy why is it like what what's

00:04:43,370 --> 00:04:48,950
the difference between those two things

00:04:45,550 --> 00:04:50,720
and I think so I actually my my

00:04:48,950 --> 00:04:52,850
full-time job is ninety-five percent

00:04:50,720 --> 00:04:55,940
closure and we've introduced as coke a

00:04:52,850 --> 00:04:57,800
maligned reason bit by bit and I i love

00:04:55,940 --> 00:04:59,570
closures an amazing language raise your

00:04:57,800 --> 00:05:03,650
hand if you've used or are familiar with

00:04:59,570 --> 00:05:06,110
pleasure Wow all right I have some

00:05:03,650 --> 00:05:07,490
speakers introgression it but it's a

00:05:06,110 --> 00:05:09,680
very cool language as a dynamic list

00:05:07,490 --> 00:05:12,410
from the JDM it compiles down to two

00:05:09,680 --> 00:05:15,830
JavaScript but it is very easy for

00:05:12,410 --> 00:05:17,540
example for Neil's to rampage through

00:05:15,830 --> 00:05:19,100
your application to cause crashes to

00:05:17,540 --> 00:05:20,840
call all kinds of exceptions so you get

00:05:19,100 --> 00:05:23,060
kind of the undefined is not a function

00:05:20,840 --> 00:05:24,950
and that is definitely one of the times

00:05:23,060 --> 00:05:26,600
when I'm thinking this is not very fun I

00:05:24,950 --> 00:05:28,880
just beefed up trying to book debug

00:05:26,600 --> 00:05:30,070
those on the other hand if you guys have

00:05:28,880 --> 00:05:33,820
worked with languages like Haskell

00:05:30,070 --> 00:05:37,460
anyone with fastball oh there we go so I

00:05:33,820 --> 00:05:39,380
like casco a lot but all sometimes I

00:05:37,460 --> 00:05:41,930
feel like static languages like they're

00:05:39,380 --> 00:05:43,400
like the haters in the rap game right it

00:05:41,930 --> 00:05:45,290
is like waiting for you to fail so they

00:05:43,400 --> 00:05:46,640
can point it out and like maybe nothing

00:05:45,290 --> 00:05:48,960
to help you there just like now you did

00:05:46,640 --> 00:05:50,490
that wrong if that wrong all right

00:05:48,960 --> 00:05:52,110
I think that's what I know it's

00:05:50,490 --> 00:05:54,270
definitely better than it pointed up on

00:05:52,110 --> 00:05:56,039
developing it on compiling it but I

00:05:54,270 --> 00:05:58,560
really wish like it was just kind of

00:05:56,039 --> 00:05:59,669
helping me along the way and so reason

00:05:58,560 --> 00:06:02,310
kind of tries to be this kind of

00:05:59,669 --> 00:06:03,750
Goldilocks language where you know where

00:06:02,310 --> 00:06:06,120
is it maybe some of the languages you

00:06:03,750 --> 00:06:07,440
could imagine it's like a parent right

00:06:06,120 --> 00:06:10,139
the language is like a parent watching

00:06:07,440 --> 00:06:11,940
good children and as the child is about

00:06:10,139 --> 00:06:13,860
to wash off walk off a cliff you're like

00:06:11,940 --> 00:06:16,319
well that's all right you know I'm sure

00:06:13,860 --> 00:06:17,550
the child is what is doing and also as I

00:06:16,319 --> 00:06:19,110
do I don't want to walk off cliff I once

00:06:17,550 --> 00:06:21,000
I don't think pilots tell me hey by the

00:06:19,110 --> 00:06:23,880
way you made a silly mistake here and

00:06:21,000 --> 00:06:25,500
help me out and but on the other side I

00:06:23,880 --> 00:06:27,090
don't want it to be overly restrictive

00:06:25,500 --> 00:06:29,370
and I don't want to kind of be that

00:06:27,090 --> 00:06:32,400
hater so reason falls in the middle I

00:06:29,370 --> 00:06:35,130
think it does a great job of it does try

00:06:32,400 --> 00:06:36,360
to block you but it just tried to make

00:06:35,130 --> 00:06:37,650
sure that you're aware of the box that

00:06:36,360 --> 00:06:40,500
you're introducing as you're developing

00:06:37,650 --> 00:06:42,630
and it's very nice that it's it really

00:06:40,500 --> 00:06:45,300
encourages a functional style but it

00:06:42,630 --> 00:06:46,530
doesn't demand it this is really nice in

00:06:45,300 --> 00:06:49,889
particular one if you're trying to

00:06:46,530 --> 00:06:52,620
interact with kind of mutable things at

00:06:49,889 --> 00:06:56,039
the edges so reacts does a very power

00:06:52,620 --> 00:06:58,710
has a very similar approach where the

00:06:56,039 --> 00:07:00,479
Dom itself is very very beautiful but to

00:06:58,710 --> 00:07:03,090
react does a great job of presenting a

00:07:00,479 --> 00:07:05,820
functional interface into that and for

00:07:03,090 --> 00:07:08,880
those of you that are very perceptive

00:07:05,820 --> 00:07:11,789
you can see I've highlighted really very

00:07:08,880 --> 00:07:13,169
fun there and so subconsciously is

00:07:11,789 --> 00:07:14,789
already by me you guys are already am

00:07:13,169 --> 00:07:18,630
excited mighty states your kind of

00:07:14,789 --> 00:07:20,880
feeling it that's that's why one thing I

00:07:18,630 --> 00:07:22,770
kind of like I alike in reason to like

00:07:20,880 --> 00:07:25,650
this robotic pair buddy and this goes

00:07:22,770 --> 00:07:27,539
back to the accommodation of a really

00:07:25,650 --> 00:07:30,180
really cool language and tooling that o

00:07:27,539 --> 00:07:31,880
camel house and the incredible amount of

00:07:30,180 --> 00:07:33,630
investment that Facebook is put into

00:07:31,880 --> 00:07:35,130
making sure that this actually

00:07:33,630 --> 00:07:37,729
integrates with your editor and what not

00:07:35,130 --> 00:07:40,039
to give you an example

00:07:37,729 --> 00:07:44,479
let's say this for example we are trying

00:07:40,039 --> 00:07:46,789
to implement a is odd function right and

00:07:44,479 --> 00:07:49,550
we want to say we're going to pattern

00:07:46,789 --> 00:07:51,199
match so kendall has great panic

00:07:49,550 --> 00:07:53,240
matching some reason has great pattern

00:07:51,199 --> 00:07:55,460
matching so give it a number we're going

00:07:53,240 --> 00:07:57,949
to switch off of that and say true or

00:07:55,460 --> 00:08:00,740
false and this one is a little bit hard

00:07:57,949 --> 00:08:03,319
to exhaustively enumerate every single

00:08:00,740 --> 00:08:05,089
case manually and so it's going to

00:08:03,319 --> 00:08:07,520
happen is you know if it's zero it's

00:08:05,089 --> 00:08:10,490
false if it's one is true it's too it's

00:08:07,520 --> 00:08:12,949
false and we get safe and as soon as we

00:08:10,490 --> 00:08:15,830
hit safe reason is that you tell us hey

00:08:12,949 --> 00:08:17,870
by the way just a warning I found a case

00:08:15,830 --> 00:08:20,180
where this actually is going to crush

00:08:17,870 --> 00:08:22,879
like if someone passes three in here

00:08:20,180 --> 00:08:25,789
this will crush you do not handle this

00:08:22,879 --> 00:08:27,649
case and that's really really nice in

00:08:25,789 --> 00:08:29,990
this case this is probably not a great

00:08:27,649 --> 00:08:32,419
way to implement is off but there are

00:08:29,990 --> 00:08:34,070
more realistic scenarios let's say for

00:08:32,419 --> 00:08:35,839
example we have a type of animal and

00:08:34,070 --> 00:08:36,979
like we want to make sure like the one

00:08:35,839 --> 00:08:40,070
oreo function is going to pet this

00:08:36,979 --> 00:08:42,709
animal and all this does is returning an

00:08:40,070 --> 00:08:44,720
empty object so you know we have a cat

00:08:42,709 --> 00:08:46,069
we have a dog with a bird someone comes

00:08:44,720 --> 00:08:48,860
in you know we're ready to that animal

00:08:46,069 --> 00:08:52,459
weed and we we've been drinking a little

00:08:48,860 --> 00:08:55,459
bit because we're in check and regularly

00:08:52,459 --> 00:08:56,839
forgotten about birds right as soon as

00:08:55,459 --> 00:08:59,870
we hit same is going to say hey by the

00:08:56,839 --> 00:09:02,779
way right like you didn't handle this

00:08:59,870 --> 00:09:05,389
case and this is I mean this is

00:09:02,779 --> 00:09:07,279
incredibly friendly incredibly nice but

00:09:05,389 --> 00:09:08,720
whether this is very very important is

00:09:07,279 --> 00:09:10,220
not when they're right next to each

00:09:08,720 --> 00:09:12,620
other but when you have a type

00:09:10,220 --> 00:09:13,970
definition somewhere far away and you

00:09:12,620 --> 00:09:16,759
know Janice from accounting

00:09:13,970 --> 00:09:19,610
and edits and adds a type and updates a

00:09:16,759 --> 00:09:21,319
few is different functions but it hits

00:09:19,610 --> 00:09:23,660
safe and it's like all right we're going

00:09:21,319 --> 00:09:26,720
to send this to production and what you

00:09:23,660 --> 00:09:28,759
want is everywhere your code that use

00:09:26,720 --> 00:09:30,199
that type you want exhaustive testing

00:09:28,759 --> 00:09:32,629
right you want to make sure that

00:09:30,199 --> 00:09:35,660
everywhere that this is going to to be

00:09:32,629 --> 00:09:37,100
be handled even if you do nothing you at

00:09:35,660 --> 00:09:38,990
least want to know that the compiler has

00:09:37,100 --> 00:09:41,180
checked for you and so this is really

00:09:38,990 --> 00:09:42,860
nice in particular as your your code

00:09:41,180 --> 00:09:44,569
base grows that everything is kind of

00:09:42,860 --> 00:09:46,040
taking care for you as soon as you hit

00:09:44,569 --> 00:09:50,209
safe it's beautiful you don't throw in

00:09:46,040 --> 00:09:51,949
tests it also has other things like it

00:09:50,209 --> 00:09:53,990
will actually do this is lovely kind of

00:09:51,949 --> 00:09:56,540
type checking for you so we have an

00:09:53,990 --> 00:09:58,459
animal we have a sound and we're gonna

00:09:56,540 --> 00:10:00,079
write that kind of very similar function

00:09:58,459 --> 00:10:02,959
where in this case we're going to return

00:10:00,079 --> 00:10:04,279
a sound that this out on the mix and in

00:10:02,959 --> 00:10:07,100
this case we've handled all the cases

00:10:04,279 --> 00:10:10,519
right for cats going to burn or know

00:10:07,100 --> 00:10:13,930
what does the cats do here yeah yeah

00:10:10,519 --> 00:10:13,930
whatever it's happy was it do

00:10:19,339 --> 00:10:24,720
and a dog dog pants oh yeah so we have

00:10:23,489 --> 00:10:27,899
these two types right where we have

00:10:24,720 --> 00:10:30,359
enumerated the sound but for a bird

00:10:27,899 --> 00:10:32,069
we've actually returned a stream and as

00:10:30,359 --> 00:10:33,419
soon as we hit save it's going to say

00:10:32,069 --> 00:10:35,939
hey one of these things is not like the

00:10:33,419 --> 00:10:38,119
other all right like whatever function

00:10:35,939 --> 00:10:41,160
is given our return value from this

00:10:38,119 --> 00:10:42,959
probably expects an enumerated sound not

00:10:41,160 --> 00:10:44,790
a string and it's going to say that tell

00:10:42,959 --> 00:10:46,439
us by the way this isn't like that and

00:10:44,790 --> 00:10:50,359
based off of the wave redness you

00:10:46,439 --> 00:10:50,359
probably meant one of these other things

00:10:50,480 --> 00:10:56,489
another thing that is really dangerous

00:10:52,559 --> 00:10:58,649
in particular with code is the default

00:10:56,489 --> 00:11:00,359
case or bits of code where you've

00:10:58,649 --> 00:11:02,009
written it to handle a case maybe a

00:11:00,359 --> 00:11:04,350
month ago or someone else wrote it and

00:11:02,009 --> 00:11:06,059
you're pretty sure during your

00:11:04,350 --> 00:11:08,939
refactoring that you don't need it

00:11:06,059 --> 00:11:10,679
anymore but you're not totally sure you

00:11:08,939 --> 00:11:12,629
don't want to be the one that removes it

00:11:10,679 --> 00:11:15,029
it causes a crash at runtime or a bug

00:11:12,629 --> 00:11:17,429
and so what happens is your code kind of

00:11:15,029 --> 00:11:19,350
develops these growths all over rights

00:11:17,429 --> 00:11:21,509
we're like I want is a little bit afraid

00:11:19,350 --> 00:11:24,389
to to operate on it in case you hit an

00:11:21,509 --> 00:11:26,459
artery and production and so it's really

00:11:24,389 --> 00:11:28,319
nice to have this compiler that says as

00:11:26,459 --> 00:11:31,499
soon as you hit save it's like look I've

00:11:28,319 --> 00:11:33,929
checked you do not need this code in

00:11:31,499 --> 00:11:35,369
fact I require that you delete this code

00:11:33,929 --> 00:11:37,559
like you really don't need it just

00:11:35,369 --> 00:11:38,939
commented out so this case that manages

00:11:37,559 --> 00:11:41,009
to give you a very simplified example

00:11:38,939 --> 00:11:43,439
you know if we're searching for example

00:11:41,009 --> 00:11:46,739
over a boolean all right how many cases

00:11:43,439 --> 00:11:49,679
do we have we have two so we have a fall

00:11:46,739 --> 00:11:52,679
are true and a false and the underscore

00:11:49,679 --> 00:11:55,019
and reason it just means or else just

00:11:52,679 --> 00:11:57,089
the default case right and in this case

00:11:55,019 --> 00:11:59,160
the mod is going to be like I mean what

00:11:57,089 --> 00:12:00,689
one other case do you want here right

00:11:59,160 --> 00:12:02,879
like you have to you have false you're

00:12:00,689 --> 00:12:04,510
good and so it's going to tell you it'll

00:12:02,879 --> 00:12:06,610
give you warnings wherever you have

00:12:04,510 --> 00:12:09,130
and it can prove that nothing can get to

00:12:06,610 --> 00:12:11,830
that code so what that means is the more

00:12:09,130 --> 00:12:12,880
you culture can remove the better you're

00:12:11,830 --> 00:12:16,360
going to be able to iterate on your

00:12:12,880 --> 00:12:18,880
product one of the challenges with dead

00:12:16,360 --> 00:12:21,520
code is it looks initially kind of

00:12:18,880 --> 00:12:23,170
innocent but as it grows especially if

00:12:21,520 --> 00:12:24,430
someone else is left it there you kind

00:12:23,170 --> 00:12:27,010
of expect oh it must be here for a

00:12:24,430 --> 00:12:29,020
reason so I can't take it I can't take

00:12:27,010 --> 00:12:30,640
it away and so your code grows and grows

00:12:29,020 --> 00:12:31,990
and grows and so it's a lovely to have

00:12:30,640 --> 00:12:35,820
this ability to say we don't need it

00:12:31,990 --> 00:12:39,640
anymore in fact reason goes pretty far

00:12:35,820 --> 00:12:41,050
in helping you so for example let's say

00:12:39,640 --> 00:12:42,850
that's that same function that we're

00:12:41,050 --> 00:12:45,070
writing beforehand we're going to switch

00:12:42,850 --> 00:12:47,070
it over bullion's right we're going we

00:12:45,070 --> 00:12:50,340
have either a true case or false case

00:12:47,070 --> 00:12:55,000
but we can also write that as it is this

00:12:50,340 --> 00:12:57,880
then or else this or in JavaScript you

00:12:55,000 --> 00:13:00,310
also have the ternary right so there are

00:12:57,880 --> 00:13:03,790
three possible ways to express what is

00:13:00,310 --> 00:13:06,910
the same AST and in reason that's

00:13:03,790 --> 00:13:09,040
actually not possible if you don't write

00:13:06,910 --> 00:13:11,260
it the way it expects as soon as you hit

00:13:09,040 --> 00:13:13,600
save it's going to parse it up ast and

00:13:11,260 --> 00:13:16,090
it's going to reprint it in exactly the

00:13:13,600 --> 00:13:18,280
same way that is always ready so kind of

00:13:16,090 --> 00:13:20,290
you can imagine that with a lot of

00:13:18,280 --> 00:13:24,010
companies you check in your code style

00:13:20,290 --> 00:13:25,720
guide right in a cumin document and text

00:13:24,010 --> 00:13:27,160
and I kind of feel like that's just

00:13:25,720 --> 00:13:29,680
there so you can blame someone when they

00:13:27,160 --> 00:13:32,050
don't actually do it I what you want is

00:13:29,680 --> 00:13:33,760
like say don't put that in the editor so

00:13:32,050 --> 00:13:36,040
that as soon as I could say it fixes it

00:13:33,760 --> 00:13:37,780
for me and that's what reason does so

00:13:36,040 --> 00:13:39,520
every editor integration has this thing

00:13:37,780 --> 00:13:42,190
where it will actually go in and say

00:13:39,520 --> 00:13:45,190
there is one canonical printing of the

00:13:42,190 --> 00:13:46,900
AST so there are no arguments as you can

00:13:45,190 --> 00:13:47,810
have about it and there are a lot of

00:13:46,900 --> 00:13:51,860
other benefits and

00:13:47,810 --> 00:13:54,290
coming coming out of that you own that

00:13:51,860 --> 00:13:56,450
it really cares about errors so we had

00:13:54,290 --> 00:13:59,570
an album mentioned here how many people

00:13:56,450 --> 00:14:02,600
have a hex on Elm all rights to people

00:13:59,570 --> 00:14:04,490
so not only is really really cool any

00:14:02,600 --> 00:14:06,950
particular I think Ellen can take a lot

00:14:04,490 --> 00:14:08,779
of credit for saying developer

00:14:06,950 --> 00:14:11,300
experience for most of the tools is

00:14:08,779 --> 00:14:13,010
really using terrible right now and we

00:14:11,300 --> 00:14:14,839
can do a lot better so they're famous

00:14:13,010 --> 00:14:17,510
for going out of their way to provide

00:14:14,839 --> 00:14:19,220
great error messages as the reason has

00:14:17,510 --> 00:14:20,810
taken a lot of inspiration from this and

00:14:19,220 --> 00:14:24,740
they give you an example of what that

00:14:20,810 --> 00:14:27,460
looks like here is a there were in the

00:14:24,740 --> 00:14:30,920
old style that says you know online aids

00:14:27,460 --> 00:14:32,540
character 5 to 16 that this expression

00:14:30,920 --> 00:14:35,540
had a text string but an expression of

00:14:32,540 --> 00:14:37,370
type boolean was expected and to be

00:14:35,540 --> 00:14:39,410
honest like you can work with that

00:14:37,370 --> 00:14:41,750
that's not particularly pleasant right

00:14:39,410 --> 00:14:43,820
like you don't have the context gotta

00:14:41,750 --> 00:14:45,710
load up in your head and so this goes

00:14:43,820 --> 00:14:47,690
out of his way to actually print your

00:14:45,710 --> 00:14:49,430
code to highlight it it's kind of like

00:14:47,690 --> 00:14:52,190
Microsoft Word rights like hey we can

00:14:49,430 --> 00:14:55,610
help you out here and it says by the way

00:14:52,190 --> 00:14:57,290
this is a stream we expect it and it

00:14:55,610 --> 00:15:01,400
should have been boolean and here's

00:14:57,290 --> 00:15:03,500
exactly where it happened an actual

00:15:01,400 --> 00:15:05,270
ghost a little bit further words say a

00:15:03,500 --> 00:15:07,250
lot of times there are warnings and

00:15:05,270 --> 00:15:09,950
you're not totally sure what the warning

00:15:07,250 --> 00:15:11,510
means or why is important so in this

00:15:09,950 --> 00:15:14,990
case it says for example that this

00:15:11,510 --> 00:15:17,300
optional argument cannot be erased but

00:15:14,990 --> 00:15:19,490
what the better errors do is say here's

00:15:17,300 --> 00:15:20,870
the optional argument here's an

00:15:19,490 --> 00:15:22,850
explanation of what this actually means

00:15:20,870 --> 00:15:25,130
and why it's important and here's how we

00:15:22,850 --> 00:15:26,420
might write it instead so the idea is

00:15:25,130 --> 00:15:28,580
after going through and you're using

00:15:26,420 --> 00:15:30,500
this language it's helping you it's like

00:15:28,580 --> 00:15:32,850
having this experience person right next

00:15:30,500 --> 00:15:35,310
to a lot of the times as I've learned

00:15:32,850 --> 00:15:36,690
language or new library I have liked the

00:15:35,310 --> 00:15:38,610
experience he was like banging my head

00:15:36,690 --> 00:15:40,620
against the wall for two days for

00:15:38,610 --> 00:15:42,000
something I know that if someone who's

00:15:40,620 --> 00:15:43,980
experienced was sitting next to me it

00:15:42,000 --> 00:15:46,290
would be five minutes it's a just don't

00:15:43,980 --> 00:15:47,910
do that do this you're done and that's

00:15:46,290 --> 00:15:49,410
what we want to actually encode inside

00:15:47,910 --> 00:15:51,209
of your editor inside of the language

00:15:49,410 --> 00:15:53,069
inside of the compiler so that you can

00:15:51,209 --> 00:15:54,449
get up and running and be efficient and

00:15:53,069 --> 00:15:56,819
as your scale on you can hire more

00:15:54,449 --> 00:16:02,009
people and a very pleasant time working

00:15:56,819 --> 00:16:03,300
together so reason also has some pretty

00:16:02,009 --> 00:16:05,339
amazing rage so I just had to talked

00:16:03,300 --> 00:16:08,310
about the the properties of the language

00:16:05,339 --> 00:16:11,759
in the tooling itself but the compiler

00:16:08,310 --> 00:16:15,769
is incredibly impressive so they give an

00:16:11,759 --> 00:16:19,019
example of how far and like two was

00:16:15,769 --> 00:16:20,250
esoteric targets reason can apply to how

00:16:19,019 --> 00:16:23,339
many you guys have heard of uniforms

00:16:20,250 --> 00:16:26,850
before Wow all right so you know girls

00:16:23,339 --> 00:16:29,940
are super cool I just the blow your mind

00:16:26,850 --> 00:16:32,550
is kind of cool right so the idea is

00:16:29,940 --> 00:16:35,190
right now whenever you develop your

00:16:32,550 --> 00:16:38,699
application so just get a sense like how

00:16:35,190 --> 00:16:46,800
many you guys program a note ok so got a

00:16:38,699 --> 00:16:49,439
few I mean Python ok java ok so quite a

00:16:46,800 --> 00:16:51,420
few of good languages what a lot of

00:16:49,439 --> 00:16:53,220
problem is going to be that whenever i

00:16:51,420 --> 00:16:56,550
deploy it we also kind of a lot of my

00:16:53,220 --> 00:16:58,529
way to shave off code right it's always

00:16:56,550 --> 00:17:01,800
better to delete code that you add code

00:16:58,529 --> 00:17:03,720
is we can in fact I one of my favorite

00:17:01,800 --> 00:17:08,699
sayings is that deleted code is debug

00:17:03,720 --> 00:17:10,020
code right looks like we go really far

00:17:08,699 --> 00:17:11,939
out are always like you know make sure

00:17:10,020 --> 00:17:14,189
that we have a small surface area it's

00:17:11,939 --> 00:17:16,060
efficient as possible right we're really

00:17:14,189 --> 00:17:19,010
hard and is our tea

00:17:16,060 --> 00:17:21,800
handcrafted application and then we take

00:17:19,010 --> 00:17:25,220
that and we bring in 15 million lines of

00:17:21,800 --> 00:17:27,440
memory unsafe and type on safe code

00:17:25,220 --> 00:17:29,480
called the linux kernel and we just slot

00:17:27,440 --> 00:17:31,510
them together and we're like I'm sure

00:17:29,480 --> 00:17:33,950
nothing nothing can go wrong here right

00:17:31,510 --> 00:17:36,320
and one of the arguments did files in

00:17:33,950 --> 00:17:37,490
here is the welcome the odish curl has

00:17:36,320 --> 00:17:39,560
been around for a long time it doesn't

00:17:37,490 --> 00:17:41,510
really matter if you're not using the

00:17:39,560 --> 00:17:45,620
code right like it's okay that is there

00:17:41,510 --> 00:17:47,830
who cares and to this I would say if you

00:17:45,620 --> 00:17:50,210
guys have heard of the venom

00:17:47,830 --> 00:17:53,510
vulnerability that was also earlier this

00:17:50,210 --> 00:17:55,960
year so the venerable Nura building was

00:17:53,510 --> 00:17:59,450
a vulnerability and the Xen hypervisor

00:17:55,960 --> 00:18:01,640
that allowed for someone in the cloud to

00:17:59,450 --> 00:18:04,610
actually escalate and break out a

00:18:01,640 --> 00:18:08,270
hypervisor and the way it did that was

00:18:04,610 --> 00:18:10,910
it operated on the device driver for a

00:18:08,270 --> 00:18:13,400
virtual floppy disk program in the cloud

00:18:10,910 --> 00:18:17,150
how many of you guys are using foggy

00:18:13,400 --> 00:18:18,620
disks in the cloud right then yeah so it

00:18:17,150 --> 00:18:21,290
actually doesn't matter that it's there

00:18:18,620 --> 00:18:23,300
right if they had to lead at that code

00:18:21,290 --> 00:18:25,730
that would have been much better if you

00:18:23,300 --> 00:18:27,080
guys have ever used Rackspace part of

00:18:25,730 --> 00:18:28,760
the mission it goes down all the time

00:18:27,080 --> 00:18:30,890
because they have the patch stuff all

00:18:28,760 --> 00:18:32,630
the time and I do a rolling restart of

00:18:30,890 --> 00:18:34,670
everything and what we really want to

00:18:32,630 --> 00:18:37,370
say we want that same kind of attitude

00:18:34,670 --> 00:18:39,380
of I only want the code that is in my

00:18:37,370 --> 00:18:41,300
application that I like I don't want

00:18:39,380 --> 00:18:44,030
anything else I have worked very very

00:18:41,300 --> 00:18:45,350
hard to shape my application and then

00:18:44,030 --> 00:18:49,640
what the same done for the environment

00:18:45,350 --> 00:18:50,960
and operating system that runs on so you

00:18:49,640 --> 00:18:52,790
know kernels are effectively this idea

00:18:50,960 --> 00:18:54,800
where we are going to throw out the

00:18:52,790 --> 00:18:56,750
operating system entirely and there are

00:18:54,800 --> 00:18:58,790
a few caveats with that as you might

00:18:56,750 --> 00:19:02,000
expect but you can have some benefits as

00:18:58,790 --> 00:19:03,410
well so reason has done a great job is

00:19:02,000 --> 00:19:05,510
actually I would say the leader of

00:19:03,410 --> 00:19:06,920
pinyon kernels and this is

00:19:05,510 --> 00:19:08,390
because of a group of Cambridge that has

00:19:06,920 --> 00:19:10,700
been working for the past seven or eight

00:19:08,390 --> 00:19:14,960
years to rebuild everything in ocala

00:19:10,700 --> 00:19:17,030
that means tcp/ip TLS data storage kind

00:19:14,960 --> 00:19:19,100
of this stuff that you wouldn't dream of

00:19:17,030 --> 00:19:21,500
rebuilding in the latest kernel but

00:19:19,100 --> 00:19:22,820
lovely some people of dominant and using

00:19:21,500 --> 00:19:24,770
the okay I'll kind of compiler chain

00:19:22,820 --> 00:19:26,630
what we can do is say all right my

00:19:24,770 --> 00:19:31,490
application uses network so i need to

00:19:26,630 --> 00:19:34,280
pull in the tcp step and i use SSL or

00:19:31,490 --> 00:19:35,840
TLS i'm going to pull that I don't use a

00:19:34,280 --> 00:19:38,570
floppy disk driver so I'm not going to

00:19:35,840 --> 00:19:40,670
go that it and what happens is your

00:19:38,570 --> 00:19:43,370
application is then compiled down into a

00:19:40,670 --> 00:19:45,230
virtual machine so there is no operating

00:19:43,370 --> 00:19:47,770
system everything is implemented in this

00:19:45,230 --> 00:19:50,690
memory safe and typesafe language and

00:19:47,770 --> 00:19:54,260
the size of this kind of artifact is

00:19:50,690 --> 00:19:56,390
going to be somewhere between maybe

00:19:54,260 --> 00:20:00,080
hundreds of kilobytes to low tens of

00:19:56,390 --> 00:20:02,420
megabytes and this is crazy this means

00:20:00,080 --> 00:20:03,350
that there's no operating system we're

00:20:02,420 --> 00:20:05,570
going to look directing on the

00:20:03,350 --> 00:20:08,150
hypervisor and this leads to some crazy

00:20:05,570 --> 00:20:10,610
crazy numbers right not only does that

00:20:08,150 --> 00:20:13,550
mean that your surface area for security

00:20:10,610 --> 00:20:15,740
is vastly reduced but it also means that

00:20:13,550 --> 00:20:18,650
now you like the entire way that we

00:20:15,740 --> 00:20:21,050
deploy applications is changed it's so

00:20:18,650 --> 00:20:22,610
small that literally oh yes good job

00:20:21,050 --> 00:20:24,620
good job remembering that we can ask

00:20:22,610 --> 00:20:26,770
questions how can you connect to them

00:20:24,620 --> 00:20:29,830
the Sheep to the virtual machine

00:20:26,770 --> 00:20:33,580
file system whatever because if you were

00:20:29,830 --> 00:20:36,910
using with us you can ssh there and you

00:20:33,580 --> 00:20:38,380
see so the question is given the like

00:20:36,910 --> 00:20:40,270
the improvements with Linux would be the

00:20:38,380 --> 00:20:42,250
ssh into it you can kind of look and

00:20:40,270 --> 00:20:45,490
poke around you can do that with this

00:20:42,250 --> 00:20:47,620
you can expose say for example by custom

00:20:45,490 --> 00:20:49,120
ripple or something like that but you

00:20:47,620 --> 00:20:53,380
actually don't have a file system unless

00:20:49,120 --> 00:20:55,480
you explicitly compile it in how

00:20:53,380 --> 00:20:59,050
actually gets to an interesting idea of

00:20:55,480 --> 00:21:04,300
repost in just a second though so these

00:20:59,050 --> 00:21:06,250
what happens is literally every every

00:21:04,300 --> 00:21:08,100
artifact that we deploy is so small that

00:21:06,250 --> 00:21:09,820
we can check it into a git repository

00:21:08,100 --> 00:21:12,370
cigna Madison you have a git repository

00:21:09,820 --> 00:21:13,960
of all of your code and whatever your

00:21:12,370 --> 00:21:15,070
deploy you have another good repository

00:21:13,960 --> 00:21:16,810
that you take that virtual machine and

00:21:15,070 --> 00:21:19,030
you check it in so you don't have an

00:21:16,810 --> 00:21:21,040
audit log of every single server that

00:21:19,030 --> 00:21:23,140
has ever been deployed so if an error

00:21:21,040 --> 00:21:26,290
comes up you literally can check that

00:21:23,140 --> 00:21:28,510
version out run it locally take us eight

00:21:26,290 --> 00:21:30,820
and then run up so your repro cases

00:21:28,510 --> 00:21:32,680
become trivial now can little comment

00:21:30,820 --> 00:21:34,300
repro them locally and then you can hook

00:21:32,680 --> 00:21:36,070
up something like gdb or something like

00:21:34,300 --> 00:21:38,380
that to actually see how did this ever

00:21:36,070 --> 00:21:39,910
happen so the kinds of debug feeling

00:21:38,380 --> 00:21:45,130
that you can build here are totally new

00:21:39,910 --> 00:21:47,140
and very very nice not only that but

00:21:45,130 --> 00:21:50,140
these themes are so small that they

00:21:47,140 --> 00:21:52,690
actually boot up in 50 milliseconds like

00:21:50,140 --> 00:21:55,930
this this is I mean how fast can you get

00:21:52,690 --> 00:21:59,530
a Linux VM to boot up right a couple of

00:21:55,930 --> 00:22:02,560
seconds is usually pretty good but with

00:21:59,530 --> 00:22:05,500
just universe by default I have a

00:22:02,560 --> 00:22:07,840
uniform family fact by default we're

00:22:05,500 --> 00:22:09,310
booting up in 50 milliseconds and it has

00:22:07,840 --> 00:22:11,020
some pretty crazy implications for how

00:22:09,310 --> 00:22:13,000
actually deployment works not only for

00:22:11,020 --> 00:22:16,990
our audit log but how actual deployment

00:22:13,000 --> 00:22:17,850
works so 50 milliseconds is less time

00:22:16,990 --> 00:22:20,730
than it takes

00:22:17,850 --> 00:22:22,500
time out the initial tcp connection so

00:22:20,730 --> 00:22:26,000
you can imagine we have literally no

00:22:22,500 --> 00:22:30,179
servers running we are serverless to say

00:22:26,000 --> 00:22:32,250
we have a load balancer in front of it

00:22:30,179 --> 00:22:34,500
whenever a new connection comes in for

00:22:32,250 --> 00:22:36,990
application we can literally block that

00:22:34,500 --> 00:22:39,780
connection reach shop boot up another vm

00:22:36,990 --> 00:22:41,820
just for this one connection we connect

00:22:39,780 --> 00:22:43,559
them and as soon as that connection as

00:22:41,820 --> 00:22:46,890
soon as that request is done we kill the

00:22:43,559 --> 00:22:48,870
view so n free so imagine you're getting

00:22:46,890 --> 00:22:50,010
kind of the hub of death from reddit or

00:22:48,870 --> 00:22:52,080
hacker news or something like that

00:22:50,010 --> 00:22:54,600
literally every tension that comes in

00:22:52,080 --> 00:22:56,190
will spin up another vm habits request

00:22:54,600 --> 00:22:58,860
satisfied and they killed immediately

00:22:56,190 --> 00:23:01,020
afterward you can run the long-running

00:22:58,860 --> 00:23:02,820
services like traditional if you like

00:23:01,020 --> 00:23:04,679
but now this means that actually we have

00:23:02,820 --> 00:23:06,929
totally new ways of doing this you can

00:23:04,679 --> 00:23:08,549
imagine what a updates to a service

00:23:06,929 --> 00:23:10,500
would look like would literally be

00:23:08,549 --> 00:23:12,750
swapping out the uniform that's going to

00:23:10,500 --> 00:23:14,490
be booted and now many connection comes

00:23:12,750 --> 00:23:16,830
in gets that so you have this like

00:23:14,490 --> 00:23:18,450
lovely rolling updates where everyone

00:23:16,830 --> 00:23:20,400
has the old code is until their

00:23:18,450 --> 00:23:23,669
connection is finished and all the new

00:23:20,400 --> 00:23:28,919
people get the new code how do you guys

00:23:23,669 --> 00:23:31,559
have use lambda on in WS so lambda has I

00:23:28,919 --> 00:23:34,289
have heard if you warm up a function

00:23:31,559 --> 00:23:36,179
only 40 milliseconds of overhead

00:23:34,289 --> 00:23:38,039
whatever you call your function I mean

00:23:36,179 --> 00:23:40,799
if its cold it can be up to 10 seconds

00:23:38,039 --> 00:23:42,900
but if you're just wanted this one

00:23:40,799 --> 00:23:45,390
function and it's hot and it's loaded

00:23:42,900 --> 00:23:45,840
evening AWS has magically decided that

00:23:45,390 --> 00:23:47,940
it's going

00:23:45,840 --> 00:23:50,640
optimize it the only pay a 40

00:23:47,940 --> 00:23:52,350
millisecond overhead in 50 milliseconds

00:23:50,640 --> 00:23:54,600
reason with the entire operating system

00:23:52,350 --> 00:23:56,909
and the entire application so literally

00:23:54,600 --> 00:24:00,299
everyone gets their own instant sofas

00:23:56,909 --> 00:24:02,850
and right now they're like 50

00:24:00,299 --> 00:24:04,110
milliseconds is kind of the default with

00:24:02,850 --> 00:24:05,850
a little bit of work you get down to 20

00:24:04,110 --> 00:24:07,350
milliseconds and there's some work being

00:24:05,850 --> 00:24:09,299
done actually right over in Bratislava

00:24:07,350 --> 00:24:11,760
that should get it down to five to ten

00:24:09,299 --> 00:24:13,200
milliseconds I don't even want to do

00:24:11,760 --> 00:24:14,850
with five to ten millisecond boot time

00:24:13,200 --> 00:24:20,429
but i'm sure some will figure out

00:24:14,850 --> 00:24:21,990
something cool all right but you know

00:24:20,429 --> 00:24:23,549
we're talking about beach where reason

00:24:21,990 --> 00:24:24,899
go down to these super crazy you know

00:24:23,549 --> 00:24:26,669
kernels but if you're running

00:24:24,899 --> 00:24:28,559
traditional you notifications you can do

00:24:26,669 --> 00:24:30,690
the same thing but we take your reason

00:24:28,559 --> 00:24:33,450
code with you can bottle down to run on

00:24:30,690 --> 00:24:36,419
unix or windows or desktop or wherever

00:24:33,450 --> 00:24:37,610
you like there's actually not a whole

00:24:36,419 --> 00:24:39,690
lot to say here right like this is

00:24:37,610 --> 00:24:41,340
basically your traditional occupations

00:24:39,690 --> 00:24:45,390
reasons got recovered there it's no

00:24:41,340 --> 00:24:48,630
problem but it has a fantastic

00:24:45,390 --> 00:24:51,000
JavaScript story as well it's pretty

00:24:48,630 --> 00:24:54,120
crazy so there are one of the bad

00:24:51,000 --> 00:24:55,710
problems about o camel is there are two

00:24:54,120 --> 00:24:58,320
of everything and that includes the

00:24:55,710 --> 00:24:59,610
JavaScript compiler but they're the one

00:24:58,320 --> 00:25:01,409
thats actually gaining momentum recently

00:24:59,610 --> 00:25:05,460
is called bubble script anyone heard of

00:25:01,409 --> 00:25:08,250
buckle script oh cool I can introduce

00:25:05,460 --> 00:25:11,760
you guys to cool stuff sabaku script is

00:25:08,250 --> 00:25:14,460
a saddle Bloomberg New York and their

00:25:11,760 --> 00:25:16,200
goal is that the JavaScript that is

00:25:14,460 --> 00:25:18,539
compiled from reason should look like

00:25:16,200 --> 00:25:19,919
what you would write by hand right we

00:25:18,539 --> 00:25:21,450
want to integrate with everything in the

00:25:19,919 --> 00:25:23,309
MPN world we want to agree with all of

00:25:21,450 --> 00:25:24,490
the Charles with it already exists and

00:25:23,309 --> 00:25:25,780
we wanna make sure

00:25:24,490 --> 00:25:28,150
everyone feels comfortable with the

00:25:25,780 --> 00:25:30,250
output so it's okay sit on these two

00:25:28,150 --> 00:25:32,410
things right so smooth integration so we

00:25:30,250 --> 00:25:34,840
need to be able to use all the EPM and I

00:25:32,410 --> 00:25:37,150
think code and it is very very serious

00:25:34,840 --> 00:25:41,550
about clean code so i may give you a

00:25:37,150 --> 00:25:44,200
quick test so one of these two is

00:25:41,550 --> 00:25:47,670
written by a human and one of them is

00:25:44,200 --> 00:25:51,190
written by a compiler this one is

00:25:47,670 --> 00:25:54,940
bashing on a hashmap and this one is

00:25:51,190 --> 00:25:56,620
bash or is a express web server so how

00:25:54,940 --> 00:25:59,650
many people think this one is written by

00:25:56,620 --> 00:26:02,110
a computer and how many people think

00:25:59,650 --> 00:26:04,330
this one is written by a computer all

00:26:02,110 --> 00:26:06,309
right well I mean it both are written by

00:26:04,330 --> 00:26:07,660
a computer you guys had to think about

00:26:06,309 --> 00:26:09,940
it you guys have to think about it

00:26:07,660 --> 00:26:12,160
that's a point so just to give you an

00:26:09,940 --> 00:26:15,340
example this is what the reason code

00:26:12,160 --> 00:26:17,530
looks like the equivalent this is what

00:26:15,340 --> 00:26:19,179
the implement for the HTTP server looks

00:26:17,530 --> 00:26:20,290
like so if your foreign language

00:26:19,179 --> 00:26:22,000
javascript to view culture with

00:26:20,290 --> 00:26:23,500
JavaScript getting start with the reason

00:26:22,000 --> 00:26:25,030
is really straightforward and then you

00:26:23,500 --> 00:26:26,950
get to compile write down and use all

00:26:25,030 --> 00:26:28,960
those libraries so all of the benefits

00:26:26,950 --> 00:26:32,260
that we saw previously where we're not

00:26:28,960 --> 00:26:34,630
we're missing cases or we have the wrong

00:26:32,260 --> 00:26:37,600
types as soon as we hit save it's going

00:26:34,630 --> 00:26:39,100
to save us but we still we don't have to

00:26:37,600 --> 00:26:43,510
give up all Java scripts that we were

00:26:39,100 --> 00:26:46,300
used to and like this compiler is super

00:26:43,510 --> 00:26:47,679
serious about performance dominating

00:26:46,300 --> 00:26:49,600
performance of the JavaScript that it

00:26:47,679 --> 00:26:51,910
generates but also of its own

00:26:49,600 --> 00:26:55,390
performance so here's a like a quick

00:26:51,910 --> 00:26:58,390
timing though between they just type

00:26:55,390 --> 00:27:01,030
script accent Oh camel buckle script in

00:26:58,390 --> 00:27:03,550
this case vocal script actually finishes

00:27:01,030 --> 00:27:06,610
compiling before typescript has booted

00:27:03,550 --> 00:27:08,830
up right before it even started I o

00:27:06,610 --> 00:27:11,110
camel has this weird and sometimes

00:27:08,830 --> 00:27:12,730
worrying obsession about performance all

00:27:11,110 --> 00:27:15,910
the way from its to link to the code

00:27:12,730 --> 00:27:17,590
that it generates and it's not something

00:27:15,910 --> 00:27:20,200
that I want to focus all the time but

00:27:17,590 --> 00:27:22,179
it's you know like Daniel before him but

00:27:20,200 --> 00:27:26,259
it says that someone is and so I

00:27:22,179 --> 00:27:30,399
from all done that but it actually can

00:27:26,259 --> 00:27:31,809
go down to arm 64 so arm 64 is what's

00:27:30,399 --> 00:27:34,029
going to be on your iPhone or your

00:27:31,809 --> 00:27:36,369
Android so it can actually compile

00:27:34,029 --> 00:27:37,570
native applications we don't have to go

00:27:36,369 --> 00:27:39,309
through Ajit's you don't have to go

00:27:37,570 --> 00:27:43,149
through a JavaScript engine we compile

00:27:39,309 --> 00:27:44,740
down to negative arm 64 and get to

00:27:43,149 --> 00:27:47,049
interact with all of the libraries

00:27:44,740 --> 00:27:51,249
available in the system so in this case

00:27:47,049 --> 00:27:53,499
this is porn walk the guy behind reacts

00:27:51,249 --> 00:27:57,249
and also behind reason so he's actually

00:27:53,499 --> 00:27:59,499
imported a okay application over the

00:27:57,249 --> 00:28:01,960
reason and compile at it down to run on

00:27:59,499 --> 00:28:05,860
iOS are you guys are familiar with

00:28:01,960 --> 00:28:07,029
flexbox yeah a little bit all right so

00:28:05,860 --> 00:28:09,960
there's actually a javascript

00:28:07,029 --> 00:28:13,299
implementation from facebook of xbox

00:28:09,960 --> 00:28:15,580
what's happened now is jordan has ported

00:28:13,299 --> 00:28:17,980
that from javascript over to reason so

00:28:15,580 --> 00:28:20,200
that means that we can now take that

00:28:17,980 --> 00:28:24,730
flexbox implementation compile the domes

00:28:20,200 --> 00:28:27,429
to desktop to browser to iOS to Android

00:28:24,730 --> 00:28:29,789
to Eun across if you need of such box

00:28:27,429 --> 00:28:32,470
and five milliseconds you can do that

00:28:29,789 --> 00:28:34,360
and so like actually he took this

00:28:32,470 --> 00:28:37,860
algorithm then we doing the layouts

00:28:34,360 --> 00:28:40,869
natively on iOS using the same flexbox

00:28:37,860 --> 00:28:44,320
and there's no like the performance

00:28:40,869 --> 00:28:45,970
overhead our penalty is is incredibly

00:28:44,320 --> 00:28:49,269
slight because of that again de

00:28:45,970 --> 00:28:53,139
worrisome focus that Oklahoma has our on

00:28:49,269 --> 00:28:55,240
performance not like that but if you

00:28:53,139 --> 00:28:57,100
guys can put on raspberry PI's so this

00:28:55,240 --> 00:28:57,490
is ruinous the demo that I was going to

00:28:57,100 --> 00:29:00,160
show you

00:28:57,490 --> 00:29:03,760
and after a drink after the talk i will

00:29:00,160 --> 00:29:05,320
show you if you would like we can take

00:29:03,760 --> 00:29:08,200
that opengl application which is a

00:29:05,320 --> 00:29:11,140
negative desktop application we can

00:29:08,200 --> 00:29:13,450
compile it down to javascript that looks

00:29:11,140 --> 00:29:15,880
like handwritten JavaScript and we can

00:29:13,450 --> 00:29:18,580
also compiled l2r 64 to run on Raspberry

00:29:15,880 --> 00:29:20,140
Pi and in raspberry PI's embedded

00:29:18,580 --> 00:29:21,850
devices they get faster and faster every

00:29:20,140 --> 00:29:23,670
year but these are fairly

00:29:21,850 --> 00:29:26,559
resource-limited allocate our

00:29:23,670 --> 00:29:28,929
environment and so that's where having

00:29:26,559 --> 00:29:30,940
this kind of fanatical devotion to

00:29:28,929 --> 00:29:34,300
performance comes in handy it's very

00:29:30,940 --> 00:29:36,670
very nice so basically we have this

00:29:34,300 --> 00:29:38,740
crazy reach like where we can basically

00:29:36,670 --> 00:29:40,150
take reason and go almost anywhere there

00:29:38,740 --> 00:29:42,760
are few places we can't go but almost

00:29:40,150 --> 00:29:46,720
anywhere and we have a great language

00:29:42,760 --> 00:29:49,000
with lots and lots of tooling and it's

00:29:46,720 --> 00:29:52,720
lisa kahn why these weird cases where

00:29:49,000 --> 00:29:54,040
reason is very well suited for both

00:29:52,720 --> 00:29:55,720
systems of a programming because

00:29:54,040 --> 00:29:58,059
remember we have uniforms we're

00:29:55,720 --> 00:30:00,580
literally the lowest levels are written

00:29:58,059 --> 00:30:02,650
in ochem right tcp stacks hardware

00:30:00,580 --> 00:30:05,440
drivers everything is pure Ocala laundry

00:30:02,650 --> 00:30:07,480
which is the same as reason but it is

00:30:05,440 --> 00:30:09,520
expressive enough and erect and can

00:30:07,480 --> 00:30:13,300
erect easily with JavaScript and you

00:30:09,520 --> 00:30:15,340
eyes build native applications and we

00:30:13,300 --> 00:30:17,350
have its statically compiled which means

00:30:15,340 --> 00:30:19,510
there's no that we run to run

00:30:17,350 --> 00:30:22,120
through so we pay a much much lower

00:30:19,510 --> 00:30:25,450
overhead for both in memory and in start

00:30:22,120 --> 00:30:27,820
of time and we are always sure that if

00:30:25,450 --> 00:30:29,830
our application runs well now it will

00:30:27,820 --> 00:30:32,070
run well on the future right we're not

00:30:29,830 --> 00:30:35,980
going to accidentally trigger some fiat

00:30:32,070 --> 00:30:38,710
and javascript because we used the array

00:30:35,980 --> 00:30:40,770
string operator rather than adults

00:30:38,710 --> 00:30:42,570
operator you guys are familiar with

00:30:40,770 --> 00:30:44,640
this reacts actually suffered from this

00:30:42,570 --> 00:30:48,440
from quite a while where we actually

00:30:44,640 --> 00:30:51,570
compile down to code that would have a

00:30:48,440 --> 00:30:54,000
object and it would access a property by

00:30:51,570 --> 00:30:56,160
the Open bracket stream character name

00:30:54,000 --> 00:30:59,160
in the closing bracket and in Chrome

00:30:56,160 --> 00:31:01,200
this causes a huge deal right this is

00:30:59,160 --> 00:31:04,290
boring versus if you just did object

00:31:01,200 --> 00:31:04,860
thought property min and this is not

00:31:04,290 --> 00:31:08,010
something that you would necessarily

00:31:04,860 --> 00:31:09,990
expect to happen it's very very easy in

00:31:08,010 --> 00:31:12,090
with Egypt I'm Jets are just amazing

00:31:09,990 --> 00:31:14,370
they're great I'm glad we have them plus

00:31:12,090 --> 00:31:15,960
they are double-edged sword where it's

00:31:14,370 --> 00:31:17,730
very easy to accidentally trip into a

00:31:15,960 --> 00:31:19,020
deal and now your application is slow

00:31:17,730 --> 00:31:20,610
and then I'm going to go back to

00:31:19,020 --> 00:31:24,390
Daniel's talk to figure out what the

00:31:20,610 --> 00:31:27,810
hell is having so i would say in

00:31:24,390 --> 00:31:30,000
conclusion that with reason we have

00:31:27,810 --> 00:31:33,840
great semantics a very functional

00:31:30,000 --> 00:31:35,400
language that has crazy beach we can

00:31:33,840 --> 00:31:37,350
kind of go anywhere with this language

00:31:35,400 --> 00:31:40,080
now we're no longer relegated to one

00:31:37,350 --> 00:31:41,940
platform or say when the challenges with

00:31:40,080 --> 00:31:43,980
javascript would be you basically have a

00:31:41,940 --> 00:31:45,600
lowest common denominator approach where

00:31:43,980 --> 00:31:47,280
you can go to lots of platforms but

00:31:45,600 --> 00:31:48,690
you're always going through Egypt you're

00:31:47,280 --> 00:31:50,880
always going to be second-class citizen

00:31:48,690 --> 00:31:53,370
with reason we go anywhere and we're

00:31:50,880 --> 00:31:56,040
first class citizen annoying us but it

00:31:53,370 --> 00:31:57,990
has an absurd developer experience where

00:31:56,040 --> 00:32:00,510
the tooling is right the bill tooling is

00:31:57,990 --> 00:32:05,160
great performance is great we have a

00:32:00,510 --> 00:32:06,840
wonderful kind of ecosystem set up so if

00:32:05,160 --> 00:32:09,150
you are a JavaScript developer I would

00:32:06,840 --> 00:32:11,100
kind of pitch it to you as if you

00:32:09,150 --> 00:32:15,480
imagine you have flow or typescript and

00:32:11,100 --> 00:32:19,110
babble babble script ain't tellin on a

00:32:15,480 --> 00:32:20,970
huge JavaScript person so if you measure

00:32:19,110 --> 00:32:24,570
the flow and bowel were integrated from

00:32:20,970 --> 00:32:29,220
the beginning into a language that took

00:32:24,570 --> 00:32:32,370
more than two weeks to design and had

00:32:29,220 --> 00:32:33,900
great editor integration

00:32:32,370 --> 00:32:37,890
go anywhere so that's basically the

00:32:33,900 --> 00:32:40,260
pitch for reason so there is this

00:32:37,890 --> 00:32:42,930
question if reason it which is no camel

00:32:40,260 --> 00:32:47,250
is so great like where has it been o

00:32:42,930 --> 00:32:51,600
camel is actually more than 20 years old

00:32:47,250 --> 00:32:53,370
it got started shortly after me and I

00:32:51,600 --> 00:32:56,610
would actually argue that there's this

00:32:53,370 --> 00:32:59,190
great graph here that kind of shows one

00:32:56,610 --> 00:33:02,070
of the dangers in technology right we're

00:32:59,190 --> 00:33:04,710
okay I'll spend most of its time over in

00:33:02,070 --> 00:33:07,410
the innovator kind of techies space

00:33:04,710 --> 00:33:10,350
there are probably more people that have

00:33:07,410 --> 00:33:13,740
PhDs in alchemical than people using

00:33:10,350 --> 00:33:15,720
it's an industry which has some benefits

00:33:13,740 --> 00:33:17,400
right but you know it's not necessarily

00:33:15,720 --> 00:33:19,559
something you can take from academia

00:33:17,400 --> 00:33:21,630
just start using there are some

00:33:19,559 --> 00:33:23,640
companies so Jane Street for example is

00:33:21,630 --> 00:33:25,200
a company out in New York that does

00:33:23,640 --> 00:33:27,510
financial trading with different

00:33:25,200 --> 00:33:30,179
financial services and so they care very

00:33:27,510 --> 00:33:32,880
very much about performance and about

00:33:30,179 --> 00:33:35,520
correctness and so they are kind of

00:33:32,880 --> 00:33:37,110
willing to pay the cost that comes with

00:33:35,520 --> 00:33:39,330
using a bleeding edge technology do you

00:33:37,110 --> 00:33:41,250
think gives them these benefits so they

00:33:39,330 --> 00:33:43,230
built a lot of the libraries a lot of

00:33:41,250 --> 00:33:44,550
kind of the standard library and the

00:33:43,230 --> 00:33:47,460
tooling around it so they can actually

00:33:44,550 --> 00:33:48,870
use it but you know their job is not

00:33:47,460 --> 00:33:51,000
necessarily to make it accessible to

00:33:48,870 --> 00:33:52,290
everyone and so there's this big gap

00:33:51,000 --> 00:33:54,179
between the people who are willing to

00:33:52,290 --> 00:33:55,800
pay a bit extra in the beginning and

00:33:54,179 --> 00:33:57,750
people just need to get the job done

00:33:55,800 --> 00:33:59,250
right people who want to get youse

00:33:57,750 --> 00:34:01,920
better technologies it will want to use

00:33:59,250 --> 00:34:03,330
better tools that don't want to have to

00:34:01,920 --> 00:34:05,160
kind of build out a bunch of Metro

00:34:03,330 --> 00:34:07,890
tooling and documentation and breathe

00:34:05,160 --> 00:34:10,169
horse and one up right if you use reacts

00:34:07,890 --> 00:34:11,520
now is get to get going it just works

00:34:10,169 --> 00:34:14,550
there's a ton of stuff that's really

00:34:11,520 --> 00:34:16,290
nice if you use react right when it was

00:34:14,550 --> 00:34:17,720
launched then you would probably have a

00:34:16,290 --> 00:34:19,820
much harder time right there's much

00:34:17,720 --> 00:34:22,040
documentation of it so there's this

00:34:19,820 --> 00:34:23,690
danger where you have these kind of

00:34:22,040 --> 00:34:25,159
early adopters and then you have like

00:34:23,690 --> 00:34:26,659
the early majority the people who are

00:34:25,159 --> 00:34:29,000
like pragmatic would want to do a little

00:34:26,659 --> 00:34:31,580
bit better and I gap right there that's

00:34:29,000 --> 00:34:33,560
where cool tech goes to die all right

00:34:31,580 --> 00:34:35,899
there's lots of cool text that you know

00:34:33,560 --> 00:34:37,790
someone wrote and it had a great kind of

00:34:35,899 --> 00:34:39,710
initial by with amongst a small group of

00:34:37,790 --> 00:34:40,940
people but I couldn't actually get to

00:34:39,710 --> 00:34:43,010
the point where was usable what most

00:34:40,940 --> 00:34:44,599
people so raise your hand if you've used

00:34:43,010 --> 00:34:46,460
some tech that seemed like it was going

00:34:44,599 --> 00:34:49,000
to be really cool but you just couldn't

00:34:46,460 --> 00:34:51,349
figure out how to use it in day-to-day

00:34:49,000 --> 00:34:53,629
yeah so quite a few people right I guess

00:34:51,349 --> 00:34:56,510
it's a challenge and it always feels

00:34:53,629 --> 00:34:58,520
very sad to me right it's it feels sad

00:34:56,510 --> 00:35:00,410
whenever I have to compromise and use

00:34:58,520 --> 00:35:01,970
this thing that I know is probably not

00:35:00,410 --> 00:35:03,650
as good but I have to get something done

00:35:01,970 --> 00:35:05,480
this week for this month or whatever and

00:35:03,650 --> 00:35:07,340
so I don't have time to actually use the

00:35:05,480 --> 00:35:09,170
thing I want to use so okay well that's

00:35:07,340 --> 00:35:11,599
kind of in stuck right there but luckily

00:35:09,170 --> 00:35:13,609
facebook has been investing massive

00:35:11,599 --> 00:35:15,290
resources into it all right this is all

00:35:13,609 --> 00:35:18,470
the editor and aggression and syntax

00:35:15,290 --> 00:35:21,260
tooling and the libraries and the just

00:35:18,470 --> 00:35:22,790
everything and so hopefully with that

00:35:21,260 --> 00:35:25,640
push it will get over to the other side

00:35:22,790 --> 00:35:27,650
and actually be usable by the early

00:35:25,640 --> 00:35:30,470
pragmatist because as I've seen region

00:35:27,650 --> 00:35:31,849
has a ton of great benefits the question

00:35:30,470 --> 00:35:35,810
is only whether it's actually usable or

00:35:31,849 --> 00:35:37,700
not there are some challenges with the

00:35:35,810 --> 00:35:38,900
ochem own particular and some of the

00:35:37,700 --> 00:35:41,180
reasons why I think it wouldn't

00:35:38,900 --> 00:35:43,730
particularly or it wasn't particularly

00:35:41,180 --> 00:35:47,780
successful one of them is because of

00:35:43,730 --> 00:35:50,210
camels match for systems programming a

00:35:47,780 --> 00:35:52,160
lot of time systems programmers are not

00:35:50,210 --> 00:35:56,210
particularly enthused by front-end

00:35:52,160 --> 00:35:57,740
programming and may not realize that

00:35:56,210 --> 00:36:00,140
like this isn't actually insanely

00:35:57,740 --> 00:36:02,000
complex domain requires real engineering

00:36:00,140 --> 00:36:03,470
discipline but you really want to have

00:36:02,000 --> 00:36:05,930
tools that are that help you maintain

00:36:03,470 --> 00:36:08,630
the complexity of user interfaces in

00:36:05,930 --> 00:36:13,580
front and applications but that was

00:36:08,630 --> 00:36:16,760
actually focus of ocala before to other

00:36:13,580 --> 00:36:18,050
things so there are a number of projects

00:36:16,760 --> 00:36:21,710
that are actually really cool again

00:36:18,050 --> 00:36:24,859
focusing on Julie so r ejs is this crazy

00:36:21,710 --> 00:36:26,660
idea that if we are going to interact

00:36:24,859 --> 00:36:29,030
with the existing world if we're going

00:36:26,660 --> 00:36:30,140
to port it over yes actually I see some

00:36:29,030 --> 00:36:31,970
of you chuckling there's going to be a

00:36:30,140 --> 00:36:34,070
problem one of the biggest dangers of

00:36:31,970 --> 00:36:36,740
reason is that everything starts with

00:36:34,070 --> 00:36:38,839
three we're probably going to have to

00:36:36,740 --> 00:36:41,540
forbid that at some point like we even

00:36:38,839 --> 00:36:45,410
have really acts like yeah it's going to

00:36:41,540 --> 00:36:48,470
go but like Regis is this really cool

00:36:45,410 --> 00:36:50,740
tool where if we're if we want to port

00:36:48,470 --> 00:36:53,030
some existing JavaScript application or

00:36:50,740 --> 00:36:55,220
components or library over to reason so

00:36:53,030 --> 00:36:58,640
we get all these benefits for example

00:36:55,220 --> 00:37:02,180
the JavaScript crs CSS flexbox layouts

00:36:58,640 --> 00:37:03,589
library we don't actually want to have

00:37:02,180 --> 00:37:05,119
to say all right here's a line of

00:37:03,589 --> 00:37:07,250
JavaScript code and i'll write our line

00:37:05,119 --> 00:37:09,650
of recent coach and that's also kind is

00:37:07,250 --> 00:37:11,359
very very tedious so what we get is does

00:37:09,650 --> 00:37:14,030
is actually parsley as your javascript

00:37:11,359 --> 00:37:16,550
creating a st and then prints out reason

00:37:14,030 --> 00:37:18,410
it's not going to run but it will

00:37:16,550 --> 00:37:19,700
actually get you started with this idea

00:37:18,410 --> 00:37:21,260
of like you need to go through and

00:37:19,700 --> 00:37:23,180
annotate all the types and you don't

00:37:21,260 --> 00:37:25,310
have to do that all that mechanical on

00:37:23,180 --> 00:37:26,839
interesting work so it's really the idea

00:37:25,310 --> 00:37:28,880
is we're going to jumpstart as much as

00:37:26,839 --> 00:37:33,050
possible getting stuff onto the reason

00:37:28,880 --> 00:37:35,450
Morgan so the relay out which is that

00:37:33,050 --> 00:37:37,130
flexbox implementation was originally

00:37:35,450 --> 00:37:39,740
written by hand about i think twenty

00:37:37,130 --> 00:37:41,900
percent of the way and then Jordan

00:37:39,740 --> 00:37:44,150
actually used 3gs to bring the rest of

00:37:41,900 --> 00:37:47,450
it over and was able to save a lot of

00:37:44,150 --> 00:37:49,700
time from that we got re react every

00:37:47,450 --> 00:37:51,920
rock jas findings we have great still

00:37:49,700 --> 00:37:55,849
toiling the bill chillin is kind of

00:37:51,920 --> 00:37:58,339
insane this comes from rebel is the

00:37:55,849 --> 00:38:02,030
recent bill tool it is based off of

00:37:58,339 --> 00:38:02,630
Jenga which comes from Jane Street which

00:38:02,030 --> 00:38:04,220
is that fine

00:38:02,630 --> 00:38:07,609
services company has permission before

00:38:04,220 --> 00:38:09,859
and this is like if you had the king of

00:38:07,609 --> 00:38:12,470
NSYNC engineers you lock them in the

00:38:09,859 --> 00:38:14,539
room and they went crazy and rid wrote a

00:38:12,470 --> 00:38:16,279
build tool so this actually will keep

00:38:14,539 --> 00:38:18,650
track of your dependency graph as you're

00:38:16,279 --> 00:38:20,990
compiling and whenever you change the

00:38:18,650 --> 00:38:23,180
file will only recompile the minimum

00:38:20,990 --> 00:38:27,289
changes so it's like react but for your

00:38:23,180 --> 00:38:29,329
compiler it's fantastic if particular if

00:38:27,289 --> 00:38:31,339
you worked as a system like Xcode or

00:38:29,329 --> 00:38:33,619
Android or something like that it is so

00:38:31,339 --> 00:38:35,900
nice to have a very very intelligent

00:38:33,619 --> 00:38:40,250
system that is simply meant to be

00:38:35,900 --> 00:38:41,630
productive for developers so happy to

00:38:40,250 --> 00:38:42,920
answer some questions about trade-offs

00:38:41,630 --> 00:38:45,170
some of them I can kind of speak to

00:38:42,920 --> 00:38:51,349
would be for example trade-offs with

00:38:45,170 --> 00:38:53,329
reason and flow closure scriptorium you

00:38:51,349 --> 00:38:55,819
know but I think it's important to talk

00:38:53,329 --> 00:38:58,369
about all of the bad sides of a language

00:38:55,819 --> 00:39:00,200
and I've basically been a hype man so

00:38:58,369 --> 00:39:01,880
tonight so far so I'm having to talk

00:39:00,200 --> 00:39:04,279
about any of the trade houses you're

00:39:01,880 --> 00:39:06,500
going to see as well and do a little bit

00:39:04,279 --> 00:39:08,960
of a comparison between for example Java

00:39:06,500 --> 00:39:10,579
scripts and flow which is a great typing

00:39:08,960 --> 00:39:14,480
system and reason and see what that this

00:39:10,579 --> 00:39:15,980
trade-off there is there are some other

00:39:14,480 --> 00:39:17,839
stuff that if you are interested I'm

00:39:15,980 --> 00:39:19,250
having to talk about so a reason I mean

00:39:17,839 --> 00:39:22,099
there's just crazy amount of sub sorry

00:39:19,250 --> 00:39:24,890
but friesen actually has because

00:39:22,099 --> 00:39:26,359
whenever you hit save in your editor it

00:39:24,890 --> 00:39:28,849
is going to rewrite everything right

00:39:26,359 --> 00:39:31,009
that means that there is one canonical

00:39:28,849 --> 00:39:33,650
representation from AST to what you see

00:39:31,009 --> 00:39:36,289
on your screen but you can write your

00:39:33,650 --> 00:39:38,269
own printer so if you are like me and

00:39:36,289 --> 00:39:39,890
you're like closures in facts you can

00:39:38,269 --> 00:39:41,569
write that printer and as soon as you

00:39:39,890 --> 00:39:43,819
hit save it's going to save it back to

00:39:41,569 --> 00:39:44,809
that standard ast and your coworker is

00:39:43,819 --> 00:39:46,609
going to open up and they're going to

00:39:44,809 --> 00:39:48,470
see from the reason syntax or in the F

00:39:46,609 --> 00:39:50,690
sharp seen text on the elm syntax

00:39:48,470 --> 00:39:53,089
however you would like to see it we're

00:39:50,690 --> 00:39:54,500
going to see realize that this doesn't

00:39:53,089 --> 00:39:57,170
mean that you have to give up for

00:39:54,500 --> 00:39:58,910
example your ability to space like to

00:39:57,170 --> 00:40:00,970
place every single character I want this

00:39:58,910 --> 00:40:04,030
character right here I want

00:40:00,970 --> 00:40:06,130
right here it doesn't work like it must

00:40:04,030 --> 00:40:09,390
be programmatically specifiable or it

00:40:06,130 --> 00:40:12,040
doesn't actually work with reason

00:40:09,390 --> 00:40:15,220
there's some pretty crazy stuff and I'm

00:40:12,040 --> 00:40:17,109
here like algebra affect hours so if

00:40:15,220 --> 00:40:20,590
you're familiar with the way L handles

00:40:17,109 --> 00:40:22,180
effects that's a monadic system o camel

00:40:20,590 --> 00:40:23,650
algebraic effects systems are going to

00:40:22,180 --> 00:40:25,510
allow for some kind of cooling that is

00:40:23,650 --> 00:40:29,710
going to be mind-blowing if you imagine

00:40:25,510 --> 00:40:32,349
for example being able to the replay

00:40:29,710 --> 00:40:35,410
system without or all of your apps are

00:40:32,349 --> 00:40:37,840
automatically replayable imagine that

00:40:35,410 --> 00:40:39,910
but for all of your reason apps and you

00:40:37,840 --> 00:40:43,810
don't have to try at all it just works

00:40:39,910 --> 00:40:46,660
automatically space-time is a allocation

00:40:43,810 --> 00:40:48,790
tracker so if you have worked on mobile

00:40:46,660 --> 00:40:50,890
you know kind of how restricted of a

00:40:48,790 --> 00:40:52,510
platform it is there are times where

00:40:50,890 --> 00:40:55,030
you're pushing memory and you're not

00:40:52,510 --> 00:40:56,950
really sure why space line has built in

00:40:55,030 --> 00:40:58,510
and it will actually show you it will

00:40:56,950 --> 00:41:00,369
show you kind of graph over time of

00:40:58,510 --> 00:41:01,930
allocations and will show you if you

00:41:00,369 --> 00:41:04,420
click on it it will actually show you

00:41:01,930 --> 00:41:06,250
the line of code that is responsible for

00:41:04,420 --> 00:41:08,230
that memory usage so as you're going

00:41:06,250 --> 00:41:11,349
through you try and understand in the

00:41:08,230 --> 00:41:13,330
browser in native olive oil as this is

00:41:11,349 --> 00:41:15,280
using memory you're trying to understand

00:41:13,330 --> 00:41:19,119
why this will actually take you to that

00:41:15,280 --> 00:41:20,770
exact code one score is happening and

00:41:19,119 --> 00:41:22,630
one of the coolest one is super

00:41:20,770 --> 00:41:24,130
aggressive dead code elimination here's

00:41:22,630 --> 00:41:26,740
all familiar with chi shape or tree

00:41:24,130 --> 00:41:29,740
shaking or dead code elimination right

00:41:26,740 --> 00:41:32,740
since awesome idea it hasn't actually

00:41:29,740 --> 00:41:34,990
been super like well pursued I would say

00:41:32,740 --> 00:41:37,180
by the vast majority of compilers the

00:41:34,990 --> 00:41:39,880
google poetry compiler for javascript it

00:41:37,180 --> 00:41:41,890
does a great job of it 40 camel if we

00:41:39,880 --> 00:41:44,170
were to combine the standard or the

00:41:41,890 --> 00:41:45,319
appropriate center library and dead code

00:41:44,170 --> 00:41:48,199
elimination

00:41:45,319 --> 00:41:49,640
coming with it and unicorns where I said

00:41:48,199 --> 00:41:51,229
you know pearls were previously hundreds

00:41:49,640 --> 00:41:53,779
of kilobytes that would get them down

00:41:51,229 --> 00:41:55,640
into the kilobytes wrench right so we're

00:41:53,779 --> 00:41:57,199
no longer like our entire p.m. our

00:41:55,640 --> 00:41:59,660
entire operating system our entire

00:41:57,199 --> 00:42:02,930
application is booting in five to ten

00:41:59,660 --> 00:42:07,430
milliseconds and takes kilobytes of

00:42:02,930 --> 00:42:09,229
space so if you guys are at all

00:42:07,430 --> 00:42:10,940
interested we're actually having a

00:42:09,229 --> 00:42:12,440
distributed kind of hacking events I'm

00:42:10,940 --> 00:42:14,269
hoping maybe we'll find some local

00:42:12,440 --> 00:42:17,059
spaces so there's some in Vienna you'll

00:42:14,269 --> 00:42:19,880
have some in Bruno there is a weekend

00:42:17,059 --> 00:42:22,309
hackathon just just a fun friendly

00:42:19,880 --> 00:42:24,709
packing events at reason Cup you can go

00:42:22,309 --> 00:42:27,199
to any like TV or go to the reason cup

00:42:24,709 --> 00:42:28,279
in sign up and the idea is just if

00:42:27,199 --> 00:42:30,199
you're at all interested you want to

00:42:28,279 --> 00:42:32,359
kind of actually built something that

00:42:30,199 --> 00:42:35,509
might be interesting and sign up and

00:42:32,359 --> 00:42:37,609
we'll work on it all right i should give

00:42:35,509 --> 00:42:40,059
thanks to have a couple of people so

00:42:37,609 --> 00:42:43,039
this has been an Avery they actually are

00:42:40,059 --> 00:42:45,729
responsible for rig witness so every

00:42:43,039 --> 00:42:48,469
witness is that's a little math game or

00:42:45,729 --> 00:42:51,979
amazing and they actually now have it

00:42:48,469 --> 00:42:55,729
running on native so with opengl on the

00:42:51,979 --> 00:42:58,239
web with WebGL and on mobile with opengl

00:42:55,729 --> 00:43:00,559
yes yeah is that you don't have to

00:42:58,239 --> 00:43:02,719
change your logic to take your coat and

00:43:00,559 --> 00:43:04,640
yes you can optimize it for each

00:43:02,719 --> 00:43:09,619
individual platform so you can kind of

00:43:04,640 --> 00:43:12,279
the best of both worlds also Sanders and

00:43:09,619 --> 00:43:15,349
Daniel they review to talk and I

00:43:12,279 --> 00:43:18,199
mentioned that idea of going from a st

00:43:15,349 --> 00:43:19,519
to a printed representation of that that

00:43:18,199 --> 00:43:21,890
means that we can do crazy things where

00:43:19,519 --> 00:43:24,049
j sx is actually built into the default

00:43:21,890 --> 00:43:27,349
printer so if you're working with a

00:43:24,049 --> 00:43:29,059
designer and they're used to HTML

00:43:27,349 --> 00:43:31,670
they're going to be actually somewhat

00:43:29,059 --> 00:43:33,199
comfortable with reason right it's

00:43:31,670 --> 00:43:35,210
actually far more possible i think a lot

00:43:33,199 --> 00:43:38,599
of us were very skeptical

00:43:35,210 --> 00:43:39,800
not the ID of jsx initially but working

00:43:38,599 --> 00:43:42,020
with a number of designers which is

00:43:39,800 --> 00:43:43,609
actually kind of resulted with them are

00:43:42,020 --> 00:43:45,650
resonated with them and it has been

00:43:43,609 --> 00:43:48,080
great so it's wonderful to actually have

00:43:45,650 --> 00:43:50,690
that inside of the language having other

00:43:48,080 --> 00:43:52,070
things like for example graph ql syntax

00:43:50,690 --> 00:43:54,170
built into the language to all the type

00:43:52,070 --> 00:43:56,780
checking is another thing that senators

00:43:54,170 --> 00:44:05,720
has been working on so thank you very

00:43:56,780 --> 00:44:07,040
much alternatively if there are no

00:44:05,720 --> 00:44:09,200
questions I can just drop the mic and

00:44:07,040 --> 00:44:16,450
walk off the stage that's more

00:44:09,200 --> 00:44:16,450
appropriate any questions real life

00:44:17,530 --> 00:44:23,330
there are some I don't there are some

00:44:20,990 --> 00:44:25,190
that you are likely using that you are

00:44:23,330 --> 00:44:30,740
not aware of that we can't talk about

00:44:25,190 --> 00:44:32,150
quite yet but they are you very soon so

00:44:30,740 --> 00:44:34,369
actually can show you a few kind of cool

00:44:32,150 --> 00:44:36,140
things this is the reason or the REE

00:44:34,369 --> 00:44:39,589
witness app just doing the rendering

00:44:36,140 --> 00:44:41,660
WebGL reason code I can show you guys if

00:44:39,589 --> 00:44:43,130
you like the editor integration kind of

00:44:41,660 --> 00:44:47,089
what that looks like I guess we get

00:44:43,130 --> 00:44:50,859
state hopefully again anyway I will

00:44:47,089 --> 00:44:50,859
Steve I've changed a lot of stuff

00:45:00,000 --> 00:45:06,180
alright is unreadable a little bit

00:45:02,370 --> 00:45:09,060
bigger it was good okay cool so these

00:45:06,180 --> 00:45:10,380
are just the examples from before really

00:45:09,060 --> 00:45:11,490
hoping that this works but I didn't

00:45:10,380 --> 00:45:14,790
check this right before the talk so

00:45:11,490 --> 00:45:17,220
we'll see if not me me afterward so I'm

00:45:14,790 --> 00:45:19,080
gonna hit save all right as soon as I

00:45:17,220 --> 00:45:21,840
did save you see it's highlighted there

00:45:19,080 --> 00:45:26,640
I jumped through and it says by the way

00:45:21,840 --> 00:45:30,000
you're missing the case free if you like

00:45:26,640 --> 00:45:32,310
it's kind of a fun game you can play I'd

00:45:30,000 --> 00:45:35,220
save in a slide by the way you're

00:45:32,310 --> 00:45:37,200
missing for no so if you have too much

00:45:35,220 --> 00:45:38,550
time and you can compete with the

00:45:37,200 --> 00:45:42,420
copilot see which should be guys is

00:45:38,550 --> 00:45:43,800
tight at first one of my favorite course

00:45:42,420 --> 00:45:46,350
is actually you know working with

00:45:43,800 --> 00:45:47,580
designers data keying was actually

00:45:46,350 --> 00:45:49,620
co-founder Daniel appear for the

00:45:47,580 --> 00:45:52,230
precursor up he did a fantastic job of

00:45:49,620 --> 00:45:55,080
the design on that working enclosure he

00:45:52,230 --> 00:45:57,300
did the permutation of reason Capcom as

00:45:55,080 --> 00:45:59,970
well and he did rethink up actually in

00:45:57,300 --> 00:46:02,190
reason so reason is written so reason

00:45:59,970 --> 00:46:03,900
Capcom is written in reason with react

00:46:02,190 --> 00:46:05,760
and react motion bindings and that was

00:46:03,900 --> 00:46:08,310
all done by danny who was primarily a

00:46:05,760 --> 00:46:10,770
designer and he was very happy with the

00:46:08,310 --> 00:46:13,170
experience but he calls it kind of iron

00:46:10,770 --> 00:46:16,650
fisted hipster realism it's very very

00:46:13,170 --> 00:46:18,390
cutting edge but you don't and you could

00:46:16,650 --> 00:46:20,190
do all this cool stuff but it always

00:46:18,390 --> 00:46:22,710
demands that you serialize the same way

00:46:20,190 --> 00:46:25,470
that you handle your errors but it's

00:46:22,710 --> 00:46:28,860
going to help you learn along the way so

00:46:25,470 --> 00:46:31,230
here's that's more sophisticated example

00:46:28,860 --> 00:46:39,500
more real-world example since I can save

00:46:31,230 --> 00:46:39,500
you missed bird see here

00:46:39,589 --> 00:46:44,989
and this is an emacs but Jordan ages of

00:46:43,099 --> 00:46:48,170
them user and I don't recall them I

00:46:44,989 --> 00:46:52,640
think terrible but I don't have been

00:46:48,170 --> 00:46:55,609
musical by this and Adam is also another

00:46:52,640 --> 00:46:56,690
first-class citizen so they really care

00:46:55,609 --> 00:46:59,599
about this should work for these

00:46:56,690 --> 00:47:02,239
particular editors and vs code as well

00:46:59,599 --> 00:47:05,059
there's a contributor visit a great job

00:47:02,239 --> 00:47:06,529
of building that out so soon as i hit

00:47:05,059 --> 00:47:08,089
save on this one is going to say by the

00:47:06,529 --> 00:47:10,940
way one of these things is not like the

00:47:08,089 --> 00:47:18,130
other you probably shouldn't be

00:47:10,940 --> 00:47:21,920
returning it question oh yes please

00:47:18,130 --> 00:47:24,920
30-sept i know the dates that sound as a

00:47:21,920 --> 00:47:29,900
result because i can imagine you devil

00:47:24,920 --> 00:47:33,160
holding the rope and Burke what a world

00:47:29,900 --> 00:47:33,160
will be returning sound

00:47:35,960 --> 00:47:38,950
I know misty

00:47:39,440 --> 00:47:45,940
oh yes okay yeah so you can see down

00:47:42,740 --> 00:47:48,230
here it says that so the question is

00:47:45,940 --> 00:47:49,910
your returning sound which you didn't

00:47:48,230 --> 00:47:52,310
actually tell it that you want her to

00:47:49,910 --> 00:47:54,350
sound right so how does it know so just

00:47:52,310 --> 00:47:57,170
to prove that it does know or the best

00:47:54,350 --> 00:47:59,060
is making a guess anyway I said aliyeva

00:47:57,170 --> 00:48:01,700
type string oh they expected to sound

00:47:59,060 --> 00:48:05,060
and okay well like I said goes out of

00:48:01,700 --> 00:48:07,490
its way to not kind of the abrasive so

00:48:05,060 --> 00:48:09,740
if you've ever used Java the type system

00:48:07,490 --> 00:48:11,750
has given type systems of that name

00:48:09,740 --> 00:48:13,700
where you work so hard to type

00:48:11,750 --> 00:48:15,800
everything in order to tell this very

00:48:13,700 --> 00:48:17,600
very thick compiler what the types are

00:48:15,800 --> 00:48:20,900
and you get very little benefit out of

00:48:17,600 --> 00:48:22,490
it o camel comes from the ML family of

00:48:20,900 --> 00:48:25,490
languages and the idea is that there's a

00:48:22,490 --> 00:48:27,530
ton of type inference that's you know is

00:48:25,490 --> 00:48:29,180
these first two cases are returning to

00:48:27,530 --> 00:48:31,220
sound the third one must also be

00:48:29,180 --> 00:48:32,870
returning a sound and this doesn't make

00:48:31,220 --> 00:48:35,420
sense that you return either sound or

00:48:32,870 --> 00:48:38,210
straight unless you specifically specify

00:48:35,420 --> 00:48:43,010
that if we wanted to we could say for

00:48:38,210 --> 00:48:45,170
example that this returns a string and

00:48:43,010 --> 00:48:46,640
now it says well actually then this one

00:48:45,170 --> 00:48:49,010
is wrong if you really wanted a stream

00:48:46,640 --> 00:48:52,250
that this was wrong but if I say that I

00:48:49,010 --> 00:48:53,450
want to sound and this one is wrong but

00:48:52,250 --> 00:48:55,820
you know it does a really good job of

00:48:53,450 --> 00:48:58,300
guessing what you actually wanted along

00:48:55,820 --> 00:49:00,590
the way so it's just kind of like I

00:48:58,300 --> 00:49:02,570
sometimes wonder you know it's like I'm

00:49:00,590 --> 00:49:04,130
kind of sort of drunk I mean I don't

00:49:02,570 --> 00:49:05,750
mind this analogy because I don't code

00:49:04,130 --> 00:49:07,010
drunk but I feel like I'm drunk

00:49:05,750 --> 00:49:10,520
sometimes when I look at my code like

00:49:07,010 --> 00:49:12,950
I'm us a good drunk like right this but

00:49:10,520 --> 00:49:14,780
it's like someone who's doesn't doesn't

00:49:12,950 --> 00:49:16,670
detonate the driver which is like hey

00:49:14,780 --> 00:49:18,710
buddy you probably meant something else

00:49:16,670 --> 00:49:19,940
time helping you out along the way so

00:49:18,710 --> 00:49:26,000
goes on its way to help you with this

00:49:19,940 --> 00:49:28,430
stuff so if you delete the for example a

00:49:26,000 --> 00:49:33,380
second case of the switch it would go

00:49:28,430 --> 00:49:38,270
with the salt or stream sound but if you

00:49:33,380 --> 00:49:39,380
switch them around extreme right but the

00:49:38,270 --> 00:49:41,690
point is it says what if you're

00:49:39,380 --> 00:49:44,450
inconsistent and says you must have been

00:49:41,690 --> 00:49:48,430
one of these two things which please

00:49:44,450 --> 00:49:48,430
clarify before you go any further

00:49:52,780 --> 00:50:00,640
alright so this is there's some other

00:49:58,330 --> 00:50:01,630
kind of cool stuff here so how do you

00:50:00,640 --> 00:50:04,900
guys are feeling with the spread

00:50:01,630 --> 00:50:06,580
operator in JavaScript so is this cool

00:50:04,900 --> 00:50:08,050
idea that we're going to take an object

00:50:06,580 --> 00:50:09,550
and we're going to we just want to

00:50:08,050 --> 00:50:10,600
change some of the fields right this is

00:50:09,550 --> 00:50:12,310
really common in functional programming

00:50:10,600 --> 00:50:13,930
where we don't want to mutate the

00:50:12,310 --> 00:50:16,150
original one we want to return a new one

00:50:13,930 --> 00:50:19,030
but based off the old one so in this

00:50:16,150 --> 00:50:20,740
case we're going to fight of cats the

00:50:19,030 --> 00:50:23,230
only type or the only fields inside of

00:50:20,740 --> 00:50:24,760
this type is a field called lives that's

00:50:23,230 --> 00:50:27,160
just an integer keeping track of how

00:50:24,760 --> 00:50:29,470
many lives this cat has what we're going

00:50:27,160 --> 00:50:31,090
to do is we're gonna write up a function

00:50:29,470 --> 00:50:32,830
is going to peek inside of this box and

00:50:31,090 --> 00:50:35,050
depending on whether lean onto cat

00:50:32,830 --> 00:50:37,630
survives I was looking at it we're going

00:50:35,050 --> 00:50:39,970
to return the same cat if it does

00:50:37,630 --> 00:50:41,890
survive and if it doesn't survive then

00:50:39,970 --> 00:50:44,680
we're going to return the same cat but

00:50:41,890 --> 00:50:47,410
with the lives decremented one fuel T as

00:50:44,680 --> 00:50:49,450
soon as I hit save it's going to say no

00:50:47,410 --> 00:50:55,050
errors which is just that you really

00:50:49,450 --> 00:50:55,050
should say there oh here we go

00:50:57,270 --> 00:51:03,900
my needs to spread operator here so uh I

00:51:01,560 --> 00:51:06,270
don't and I using spreader operators

00:51:03,900 --> 00:51:07,800
they don't know but little if you

00:51:06,270 --> 00:51:10,830
imagine use your imagination if you will

00:51:07,800 --> 00:51:12,750
what happens actually if we use a spread

00:51:10,830 --> 00:51:14,220
operator and all we're doing is changing

00:51:12,750 --> 00:51:16,380
a field that was in there we're not

00:51:14,220 --> 00:51:18,360
adding any new fields it will say you

00:51:16,380 --> 00:51:19,770
don't need this spread operator which is

00:51:18,360 --> 00:51:21,060
why it's not in there anymore it

00:51:19,770 --> 00:51:23,880
actually removed it for me and I don't

00:51:21,060 --> 00:51:25,230
know how to get it back but this is

00:51:23,880 --> 00:51:28,020
really nice so if you imagine for

00:51:25,230 --> 00:51:30,180
example that you had some type you are

00:51:28,020 --> 00:51:31,740
using a throat your codebase you are

00:51:30,180 --> 00:51:33,840
adding in moving fields as you felt

00:51:31,740 --> 00:51:35,820
appropriate and then we change the type

00:51:33,840 --> 00:51:37,170
when you remove some field this is that

00:51:35,820 --> 00:51:38,370
going to tell you everywhere inside of

00:51:37,170 --> 00:51:40,290
your code base where you're now doing

00:51:38,370 --> 00:51:42,300
something unnecessary where you're

00:51:40,290 --> 00:51:43,950
saying all right take this whole objects

00:51:42,300 --> 00:51:45,480
with these fields and given these new

00:51:43,950 --> 00:51:49,070
fields when you might as well just be

00:51:45,480 --> 00:51:49,070
returning an entirely new object

00:51:51,500 --> 00:51:59,000
this is so this is still from my last

00:51:57,050 --> 00:52:00,200
name which is why this is stuff but i'll

00:51:59,000 --> 00:52:01,790
do a little bit of a lie they want to

00:52:00,200 --> 00:52:04,040
see if this will actually work so we're

00:52:01,790 --> 00:52:05,030
going to rewrite this function we're

00:52:04,040 --> 00:52:06,830
going to say that we're going to pick

00:52:05,030 --> 00:52:09,710
inside of this cat or pig inside this

00:52:06,830 --> 00:52:12,950
box and depending on this random boolean

00:52:09,710 --> 00:52:17,450
that we get back if it's true then we

00:52:12,950 --> 00:52:21,130
want to stay will return this cat's else

00:52:17,450 --> 00:52:21,130
will turn his cat

00:52:23,700 --> 00:52:26,750
see if I can get it

00:52:29,509 --> 00:52:35,949
Jack let me see if I can just rewind

00:52:31,899 --> 00:52:35,949
fingers crossed it's goes far enough

00:52:36,369 --> 00:52:40,189
this is the other reason that I like

00:52:38,539 --> 00:52:43,279
smaller venues as you can mess up more

00:52:40,189 --> 00:52:44,630
and it's not quite as embarrassing it's

00:52:43,279 --> 00:52:49,989
still embarrassing buy stuff as

00:52:44,630 --> 00:52:53,899
embarrassing alright cool so we're here

00:52:49,989 --> 00:52:56,539
so I'm gonna turn that off alright cool

00:52:53,899 --> 00:52:58,489
so this is the example that I was going

00:52:56,539 --> 00:53:00,499
to show you earlier so you can see I'm

00:52:58,489 --> 00:53:02,809
spreading the existing cats and I'm

00:53:00,499 --> 00:53:05,299
replacing the lightest field and it says

00:53:02,809 --> 00:53:06,769
all the refuse are already explicitly

00:53:05,299 --> 00:53:13,669
enumerated you don't need to do that

00:53:06,769 --> 00:53:16,239
what are you doing okay I'll go a little

00:53:13,669 --> 00:53:16,239
bit further back

00:53:20,690 --> 00:53:29,510
come I guess this is how it's done okay

00:53:25,300 --> 00:53:30,859
so you save this this is the case where

00:53:29,510 --> 00:53:33,560
it says by the way you handled all of

00:53:30,859 --> 00:53:36,079
the edge cases you don't need his third

00:53:33,560 --> 00:53:38,750
case as soon as I delete this and I get

00:53:36,079 --> 00:53:40,550
save it revised it into exactly the way

00:53:38,750 --> 00:53:42,349
that our company says is tell this is

00:53:40,550 --> 00:53:43,609
how we write it right in imagine when

00:53:42,349 --> 00:53:45,650
every goes to a new language not really

00:53:43,609 --> 00:53:46,970
sure was a ETO medic you'll never really

00:53:45,650 --> 00:53:51,079
have to worry too much here it's going

00:53:46,970 --> 00:53:54,829
to tell you exactly what's idiomatic all

00:53:51,079 --> 00:53:57,970
right I think how either other I just

00:53:54,829 --> 00:53:57,970
show you kind of how far this goes

00:54:00,470 --> 00:54:03,890
so let's say for example I'm not really

00:54:02,359 --> 00:54:06,290
sure about the precedents of this thing

00:54:03,890 --> 00:54:16,300
I'm going to say well it's cat lives

00:54:06,290 --> 00:54:16,300
like 10-1 so catalyze plus ads

00:54:18,990 --> 00:54:23,880
just save you can see see how I have

00:54:22,260 --> 00:54:25,500
these outside for entities around here

00:54:23,880 --> 00:54:27,000
because I want to make sure like I'm

00:54:25,500 --> 00:54:29,340
grouping all the order of operations

00:54:27,000 --> 00:54:30,630
correctly and I'm not sure how it's

00:54:29,340 --> 00:54:32,910
actually done in this language as soon

00:54:30,630 --> 00:54:34,470
as i hit save so you don't need them and

00:54:32,910 --> 00:54:36,119
actually rewrite it and exactly the way

00:54:34,470 --> 00:54:37,500
they would expect so again it's just

00:54:36,119 --> 00:54:41,210
like this robotic everybody that's there

00:54:37,500 --> 00:54:48,900
to help you out so those are my demos

00:54:41,210 --> 00:54:52,619
for now any other questions at all how

00:54:48,900 --> 00:54:57,390
is it right test I would argue compared

00:54:52,619 --> 00:54:59,610
to what in particular well so the reason

00:54:57,390 --> 00:55:01,080
is before compared to was is if you

00:54:59,610 --> 00:55:04,200
compare it for example to JavaScript

00:55:01,080 --> 00:55:06,180
then there's this really nice property

00:55:04,200 --> 00:55:07,950
where it's testing it as soon as you can

00:55:06,180 --> 00:55:09,630
save everywhere right whether you're

00:55:07,950 --> 00:55:12,150
handling an edge case whether it's going

00:55:09,630 --> 00:55:14,610
to crash because the type is right so in

00:55:12,150 --> 00:55:16,890
effect by writing this you get a ton of

00:55:14,610 --> 00:55:18,270
tests out of the box and a lot of the

00:55:16,890 --> 00:55:20,970
tests that we rights for example in one

00:55:18,270 --> 00:55:23,280
of these dynamic languages are actually

00:55:20,970 --> 00:55:25,200
trying to reproduce very inaccurate so

00:55:23,280 --> 00:55:26,400
you're very approximately all the tests

00:55:25,200 --> 00:55:28,470
that we get 40 falls in writing these

00:55:26,400 --> 00:55:30,180
languages and initiative that you can

00:55:28,470 --> 00:55:32,430
just write normal tests just like you

00:55:30,180 --> 00:55:35,490
would so integration tests are very nice

00:55:32,430 --> 00:55:38,520
and that kind of thing now let's see

00:55:35,490 --> 00:55:40,670
that I really hate how the adware screen

00:55:38,520 --> 00:55:44,220
with the brackets because of love there

00:55:40,670 --> 00:55:46,380
in the back and I need the theater every

00:55:44,220 --> 00:55:50,160
time I'd save to actually put them there

00:55:46,380 --> 00:55:52,170
if I forgot so I would refer you back to

00:55:50,160 --> 00:55:54,970
Danny's comment about the iron-fisted

00:55:52,170 --> 00:55:56,980
hipster realism as reasons

00:55:54,970 --> 00:55:58,780
is that if you want to syntax you can't

00:55:56,980 --> 00:56:00,430
have it if you feel that that is

00:55:58,780 --> 00:56:02,410
sufficiently important the way you do

00:56:00,430 --> 00:56:04,780
that is you represented as a printer of

00:56:02,410 --> 00:56:06,760
the AST and you can see how everything

00:56:04,780 --> 00:56:08,350
you can so again i'm a closure person

00:56:06,760 --> 00:56:12,430
i'm a list person so i really like

00:56:08,350 --> 00:56:14,590
parentheses everywhere right and so you

00:56:12,430 --> 00:56:16,570
can have it but then it is that you

00:56:14,590 --> 00:56:18,580
cannot have a representation of the

00:56:16,570 --> 00:56:20,590
printer that isn't a programmatic

00:56:18,580 --> 00:56:24,610
one-to-one transformation of the AST and

00:56:20,590 --> 00:56:25,960
vice versa a printed representation must

00:56:24,610 --> 00:56:28,210
always have a canonical representation

00:56:25,960 --> 00:56:30,370
in the st and though this means that

00:56:28,210 --> 00:56:32,430
we're kind of like this let a thousand

00:56:30,370 --> 00:56:35,320
syntax is blooming phase where

00:56:32,430 --> 00:56:38,260
previously the semantics of the language

00:56:35,320 --> 00:56:39,970
or man imagine that we're going to

00:56:38,260 --> 00:56:41,560
introduce new semantics for asynchronous

00:56:39,970 --> 00:56:43,300
stuff generators or something like that

00:56:41,560 --> 00:56:45,670
this typically requires that we

00:56:43,300 --> 00:56:46,780
introduce new syntax as well that

00:56:45,670 --> 00:56:48,250
challenge there is that those have been

00:56:46,780 --> 00:56:49,660
so coupled together that we haven't

00:56:48,250 --> 00:56:51,490
realized that their kind of sort of

00:56:49,660 --> 00:56:54,910
separate concerns you want to be able to

00:56:51,490 --> 00:56:58,240
represent semantics in the language so

00:56:54,910 --> 00:56:59,560
rather in the AST but the printed

00:56:58,240 --> 00:57:00,730
representation the way that humans

00:56:59,560 --> 00:57:03,340
interact with them is separate from that

00:57:00,730 --> 00:57:05,800
and this means that people have been

00:57:03,340 --> 00:57:08,110
very hesitant to introduce new features

00:57:05,800 --> 00:57:10,000
or new syntax because once the syntax is

00:57:08,110 --> 00:57:11,620
in there it's in there forever right you

00:57:10,000 --> 00:57:13,030
guys you look at something sup in

00:57:11,620 --> 00:57:15,070
javascript right because it's been there

00:57:13,030 --> 00:57:16,330
for a very long period of time and the

00:57:15,070 --> 00:57:18,220
idea is if everything starts at this

00:57:16,330 --> 00:57:20,080
program at it from the beginning if we

00:57:18,220 --> 00:57:21,910
say that you know we love you as a

00:57:20,080 --> 00:57:23,230
person but if you want but those

00:57:21,910 --> 00:57:26,230
princesses rather you better write a

00:57:23,230 --> 00:57:28,120
function then that means such the

00:57:26,230 --> 00:57:30,580
language designers can actually iterate

00:57:28,120 --> 00:57:32,500
on that super quickly so what are some

00:57:30,580 --> 00:57:33,970
syntax changes that's just amount of

00:57:32,500 --> 00:57:38,710
change in the printer and we get used in

00:57:33,970 --> 00:57:41,730
tax everywhere any questions from the f

00:57:38,710 --> 00:57:46,080
sharp people about how it might compare

00:57:41,730 --> 00:57:46,080
all right good question

00:57:46,760 --> 00:57:52,349
so next rope is going to be so f sharp

00:57:49,980 --> 00:57:54,240
is kind of like it for those of you who

00:57:52,349 --> 00:57:56,670
are familiar with it so language are

00:57:54,240 --> 00:58:00,930
from the ml family so same family is

00:57:56,670 --> 00:58:03,210
kind of reason o camel Haskell the

00:58:00,930 --> 00:58:06,660
family that kind of inspired Elm to some

00:58:03,210 --> 00:58:09,089
degree but it is rewritten or is written

00:58:06,660 --> 00:58:11,400
by Google people who are very pragmatic

00:58:09,089 --> 00:58:15,119
they want to actually get stuff done at

00:58:11,400 --> 00:58:16,950
Microsoft and they want to get rid of a

00:58:15,119 --> 00:58:19,470
lot of the baggage so that means the

00:58:16,950 --> 00:58:21,450
tooling for F sharp is fantastic it's

00:58:19,470 --> 00:58:24,930
able to interact with is fantastic this

00:58:21,450 --> 00:58:27,390
crazy huge runtime library on the dome

00:58:24,930 --> 00:58:28,380
heads a runtime library the big

00:58:27,390 --> 00:58:32,010
difference is that you're going to see

00:58:28,380 --> 00:58:36,119
is that reason can compile places that

00:58:32,010 --> 00:58:38,160
are sharp can't F sharp has rape tooling

00:58:36,119 --> 00:58:40,770
in particular things like Thai providers

00:58:38,160 --> 00:58:42,000
so for those of you are aware f sharp

00:58:40,770 --> 00:58:44,369
typewriters are just like the coolest

00:58:42,000 --> 00:58:47,130
thing in the world we're literally at

00:58:44,369 --> 00:58:49,859
compile time you can say I want you to

00:58:47,130 --> 00:58:51,570
pull in this csv file or i should get

00:58:49,859 --> 00:58:54,390
into my database and list all of the

00:58:51,570 --> 00:58:57,150
tables and tell me if any of my code is

00:58:54,390 --> 00:58:58,080
going to break the database all right if

00:58:57,150 --> 00:58:59,550
there's a field that I'm referencing

00:58:58,080 --> 00:59:02,250
that is in there when there's this type

00:58:59,550 --> 00:59:04,160
or whatever and this is just it's like a

00:59:02,250 --> 00:59:07,410
one security blanket skills so much

00:59:04,160 --> 00:59:08,970
reason doesn't have this because of okay

00:59:07,410 --> 00:59:10,440
I'm all doesn't have it so there are

00:59:08,970 --> 00:59:12,450
definitely to be some trade-offs that

00:59:10,440 --> 00:59:14,070
should get there but overall if you are

00:59:12,450 --> 00:59:16,560
comfortable and F sharp and you're going

00:59:14,070 --> 00:59:18,420
to be very comfortable in a recent

00:59:16,560 --> 00:59:20,460
particular because of the editor tooling

00:59:18,420 --> 00:59:24,570
that helps bring it closer to what you

00:59:20,460 --> 00:59:27,109
get in visual studio yeah so I basically

00:59:24,570 --> 00:59:27,109
put it like that

00:59:27,859 --> 00:59:41,960
because I question be there the reason

00:59:38,569 --> 00:59:45,860
to polish their EE he said you are over

00:59:41,960 --> 00:59:49,910
person so we will take a cougar

00:59:45,860 --> 00:59:51,800
reason so the question is you know would

00:59:49,910 --> 00:59:53,780
you pick closure for the ball closure

00:59:51,800 --> 00:59:56,450
script over reason and I think it

00:59:53,780 --> 00:59:58,670
definitely depends on the team and the

00:59:56,450 --> 01:00:01,310
project at this point I tend to write my

00:59:58,670 --> 01:00:03,500
new stuff and reason if I can get away

01:00:01,310 --> 01:00:06,920
with it in particular because as a

01:00:03,500 --> 01:00:10,120
project grows it's really nice that dis

01:00:06,920 --> 01:00:12,980
compilers looking out for you closure is

01:00:10,120 --> 01:00:16,220
fantastic for a rebel experience where

01:00:12,980 --> 01:00:18,170
you know we may or may not actually have

01:00:16,220 --> 01:00:20,270
a rebel running in production we're from

01:00:18,170 --> 01:00:22,100
next I can connect to my running like

01:00:20,270 --> 01:00:24,440
production process and start evaluating

01:00:22,100 --> 01:00:27,200
stuff and changing code and so the bug

01:00:24,440 --> 01:00:30,500
ever comes up I have an instant repro

01:00:27,200 --> 01:00:31,490
case that's really nice ideally we

01:00:30,500 --> 01:00:33,290
wouldn't have that bug in the first

01:00:31,490 --> 01:00:35,000
place though and so that's kind of like

01:00:33,290 --> 01:00:36,410
where I like that reason comes in and

01:00:35,000 --> 01:00:37,610
helps out a lot with that but I would

01:00:36,410 --> 01:00:39,500
have I would definitely encourage I mean

01:00:37,610 --> 01:00:41,990
they're both worth learning and both

01:00:39,500 --> 01:00:44,380
worth checking out it's going to be

01:00:41,990 --> 01:00:46,910
easier probably to get into a reason

01:00:44,380 --> 01:00:48,170
because of the tooling but it's going to

01:00:46,910 --> 01:00:50,510
be easier to get enclosures regrets

01:00:48,170 --> 01:00:52,490
because it's so freaking it's like the

01:00:50,510 --> 01:00:55,430
hideous language just like whatever you

01:00:52,490 --> 01:00:58,580
want man school I think you want to take

01:00:55,430 --> 01:01:00,830
something give me do something hard a

01:00:58,580 --> 01:01:03,700
great question over here about l ike how

01:01:00,830 --> 01:01:03,700
it compares down

01:01:04,720 --> 01:01:10,220
so one of the big differences that you

01:01:07,339 --> 01:01:12,319
can see there are these the nail

01:01:10,220 --> 01:01:14,900
actually has this great ability to

01:01:12,319 --> 01:01:17,420
guarantee you that you will have no

01:01:14,900 --> 01:01:18,829
runtime errors this is because of the

01:01:17,420 --> 01:01:20,839
way is when a degree feck system works

01:01:18,829 --> 01:01:24,230
and what not it requires a lot of

01:01:20,839 --> 01:01:26,029
upfront investment in the way you design

01:01:24,230 --> 01:01:28,420
your code and what you're allowed to do

01:01:26,029 --> 01:01:30,589
but it has this great payoff at the end

01:01:28,420 --> 01:01:32,239
so reason is going to be a little bit

01:01:30,589 --> 01:01:35,779
less safe than that at least until the

01:01:32,239 --> 01:01:38,059
algebraic effects Heather's come out the

01:01:35,779 --> 01:01:39,950
other thing is that dome is only for the

01:01:38,059 --> 01:01:42,019
client side right now but it does that

01:01:39,950 --> 01:01:43,519
really really well right because if you

01:01:42,019 --> 01:01:45,529
focus on a particular domain you can

01:01:43,519 --> 01:01:47,779
really kind of optimized for so I'm is

01:01:45,529 --> 01:01:49,369
really worth learning in fact if you

01:01:47,779 --> 01:01:54,019
learn one one of the other one will be

01:01:49,369 --> 01:01:56,259
fairly trivial just as an example this

01:01:54,019 --> 01:02:00,079
is the j sx intex this is actually

01:01:56,259 --> 01:02:02,539
literal recently code so you can see

01:02:00,079 --> 01:02:04,460
kind of why daddy system for boundary

01:02:02,539 --> 01:02:08,329
with this you can write enclosure script

01:02:04,460 --> 01:02:11,180
you can write in HTML it's cool job is

01:02:08,329 --> 01:02:16,170
it maybe this will be the topic yeah I

01:02:11,180 --> 01:02:21,369
knew about Brian O'Connell

01:02:16,170 --> 01:02:30,849
hypervisor i read about same project air

01:02:21,369 --> 01:02:34,480
land on them so they can put media even

01:02:30,849 --> 01:02:36,369
faster than 20 millisecond oh so the

01:02:34,480 --> 01:02:38,560
question is okay I was not the only

01:02:36,369 --> 01:02:41,290
unicorn if we go back to that super

01:02:38,560 --> 01:02:43,270
optimized server representation there

01:02:41,290 --> 01:02:47,230
are also other projects like Bron Bron

01:02:43,270 --> 01:02:49,240
which is someone very smart recognize

01:02:47,230 --> 01:02:52,210
that we can take the net PSD st runtime

01:02:49,240 --> 01:02:54,250
i believe and use that to actually wrap

01:02:52,210 --> 01:02:56,200
up existing applications like engine X

01:02:54,250 --> 01:02:58,300
and whatnot and provide you so that your

01:02:56,200 --> 01:03:00,820
entire vm is just this one unicorn that

01:02:58,300 --> 01:03:03,310
you google there are also other projects

01:03:00,820 --> 01:03:06,640
like for example her laying on zen that

01:03:03,310 --> 01:03:09,700
aim to provide a internal approach for

01:03:06,640 --> 01:03:11,820
hurling i don't know how fast they can

01:03:09,700 --> 01:03:15,849
boot up in there my matter is quite fast

01:03:11,820 --> 01:03:17,590
and Erling has very cool properties so

01:03:15,849 --> 01:03:24,089
this is a really cool project and others

01:03:17,590 --> 01:03:24,089
all right let's go outside

01:03:24,100 --> 01:03:36,190
I don't know if they're easy well let me

01:03:33,730 --> 01:03:38,230
ask you let me ask you to say the

01:03:36,190 --> 01:03:41,380
sentence in front of everyone that you

01:03:38,230 --> 01:03:43,000
don't like using o camel you mine which

01:03:41,380 --> 01:03:48,900
one very loudly saying that you don't

01:03:43,000 --> 01:03:54,310
like using o camera I can't hear you one

01:03:48,900 --> 01:03:55,990
please please say yes ok so don't I

01:03:54,310 --> 01:03:57,430
using o camel and I want to heard that

01:03:55,990 --> 01:04:04,440
they thought yeah that sounds reasonable

01:03:57,430 --> 01:04:07,300
right reason do you like using reason

01:04:04,440 --> 01:04:11,520
turns nobody wants to say I don't like

01:04:07,300 --> 01:04:13,960
using reason right that's actually why

01:04:11,520 --> 01:04:15,670
that is actually I mentioned the first

01:04:13,960 --> 01:04:17,230
danger of reason is everyone starting

01:04:15,670 --> 01:04:19,480
reading right with the project I think

01:04:17,230 --> 01:04:21,970
the second danger is there are so many

01:04:19,480 --> 01:04:24,220
bad like dad jokes writes his reason

01:04:21,970 --> 01:04:26,620
easier to reason about just I can see a

01:04:24,220 --> 01:04:28,570
lot of really bad puns for years so

01:04:26,620 --> 01:04:32,860
hopefully there's going to be some way

01:04:28,570 --> 01:04:35,670
to quickly weed those out cool thank you

01:04:32,860 --> 01:04:35,670

YouTube URL: https://www.youtube.com/watch?v=Ej4HU6gmnls


