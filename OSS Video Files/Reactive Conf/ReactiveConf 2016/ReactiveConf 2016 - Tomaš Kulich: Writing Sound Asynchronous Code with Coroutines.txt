Title: ReactiveConf 2016 - Tomaš Kulich: Writing Sound Asynchronous Code with Coroutines
Publication date: 2016-11-23
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Tomaš Kulich: Writing Sound Asynchronous Code with Coroutines

abstrakt

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, it’s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,480 --> 00:00:12,580
the hi everyone this will be a rather

00:00:08,470 --> 00:00:15,549
technical stuff no Lego here so please

00:00:12,580 --> 00:00:18,449
fasten your seatbelts let me start with

00:00:15,549 --> 00:00:20,470
short recap of how we wrote a

00:00:18,449 --> 00:00:22,689
synchronous code in JavaScript in the

00:00:20,470 --> 00:00:24,880
past and how we do it today so

00:00:22,689 --> 00:00:27,519
historically at the beginning there were

00:00:24,880 --> 00:00:30,339
whole bags and you probably all know

00:00:27,519 --> 00:00:33,280
this pattern it's really understand so

00:00:30,339 --> 00:00:34,870
he recalls a function we give it some

00:00:33,280 --> 00:00:38,199
argument and typically the last argument

00:00:34,870 --> 00:00:40,420
with so-called callback function now

00:00:38,199 --> 00:00:43,239
this function fetch data can take some

00:00:40,420 --> 00:00:46,030
time to actually compute the response

00:00:43,239 --> 00:00:48,219
cloth and after its time it may be wild

00:00:46,030 --> 00:00:50,980
may be a longer time when the cold egg

00:00:48,219 --> 00:00:53,949
is called with the corresponding data or

00:00:50,980 --> 00:00:57,039
error if there was a problem during the

00:00:53,949 --> 00:00:59,410
computation so this was the very first

00:00:57,039 --> 00:01:02,379
thing it was introduced in JavaScript

00:00:59,410 --> 00:01:04,570
and it's extremely simple I mean

00:01:02,379 --> 00:01:07,500
conceptually simple but writing code

00:01:04,570 --> 00:01:13,150
with callbacks is actually not so simple

00:01:07,500 --> 00:01:15,010
this is some taste of how the code with

00:01:13,150 --> 00:01:18,610
callbacks may look like it's not very

00:01:15,010 --> 00:01:21,480
nice first it's really hard to execute

00:01:18,610 --> 00:01:26,140
one thing after another after another

00:01:21,480 --> 00:01:29,200
and it's even more complicated to do

00:01:26,140 --> 00:01:33,550
error handling properly so this was land

00:01:29,200 --> 00:01:37,540
where the term callback hell originated

00:01:33,550 --> 00:01:39,700
from and it was no good then promises

00:01:37,540 --> 00:01:42,970
came and promises was really great and

00:01:39,700 --> 00:01:44,740
the whole code look much nicer with

00:01:42,970 --> 00:01:48,220
promises this is the same code you saw

00:01:44,740 --> 00:01:50,200
before functionally but still is not

00:01:48,220 --> 00:01:54,370
ideal there is a lot of syntactic

00:01:50,200 --> 00:01:57,400
clutter here oops sorry we have this

00:01:54,370 --> 00:02:01,830
dance everywhere a lot of parentheses

00:01:57,400 --> 00:02:06,730
pull off lambda functions everywhere so

00:02:01,830 --> 00:02:08,349
finally async await came you can see a

00:02:06,730 --> 00:02:11,709
single raid as some kind of syntactic

00:02:08,349 --> 00:02:14,769
sugar compromises and this make the code

00:02:11,709 --> 00:02:16,350
look really nice this is the same code

00:02:14,769 --> 00:02:19,290
you see before and you

00:02:16,350 --> 00:02:21,060
before and if you don't know what async

00:02:19,290 --> 00:02:22,860
await exactly does you don't have to

00:02:21,060 --> 00:02:25,590
bother with visit this moment we'll get

00:02:22,860 --> 00:02:27,150
to it the few minutes but for now just

00:02:25,590 --> 00:02:30,720
notice that the code is significantly

00:02:27,150 --> 00:02:33,990
shorter it's much more fun to write and

00:02:30,720 --> 00:02:36,260
read so yeah you might think that we

00:02:33,990 --> 00:02:40,500
found the Holy Grail right this is it

00:02:36,260 --> 00:02:45,140
code looks perfect so quest over but

00:02:40,500 --> 00:02:48,660
actually not everyone likes promises

00:02:45,140 --> 00:02:53,130
these are some project from JavaScript

00:02:48,660 --> 00:02:55,200
world those are not like end user

00:02:53,130 --> 00:02:57,510
project but libraries which allows

00:02:55,200 --> 00:03:01,290
end-user to write a synchronous code and

00:02:57,510 --> 00:03:04,320
none of these uses promises usually they

00:03:01,290 --> 00:03:10,410
use generators with some home build

00:03:04,320 --> 00:03:14,730
stuff it's not just this Ridge Hickey

00:03:10,410 --> 00:03:18,300
when he introduced CSP caressing into

00:03:14,730 --> 00:03:21,360
closure he said roughly that async await

00:03:18,300 --> 00:03:24,960
is a really nice sugar but we should put

00:03:21,360 --> 00:03:28,080
it on a better cake by which he mean

00:03:24,960 --> 00:03:31,230
promises so we so what's wrong about

00:03:28,080 --> 00:03:33,240
promises and facing away then why people

00:03:31,230 --> 00:03:35,460
build another stuff if we already held

00:03:33,240 --> 00:03:39,590
something in the stander and so on so

00:03:35,460 --> 00:03:42,720
what you will see today I introduce aqua

00:03:39,590 --> 00:03:45,870
will the oculus yet another curtain

00:03:42,720 --> 00:03:49,260
library which I wrote in his library for

00:03:45,870 --> 00:03:51,320
doing a synchronous stuff and I will

00:03:49,260 --> 00:03:53,550
show it to you how the a covert and

00:03:51,320 --> 00:03:56,310
simultaneously I will illustrate was the

00:03:53,550 --> 00:03:58,170
problem with promises so what would you

00:03:56,310 --> 00:04:03,870
cannot do it promises or you cannot do

00:03:58,170 --> 00:04:09,690
it nicely so let me start with some very

00:04:03,870 --> 00:04:15,060
simple a cigarette code okay here i

00:04:09,690 --> 00:04:17,970
create function invoice pay and finally

00:04:15,060 --> 00:04:21,150
in do business i call all these

00:04:17,970 --> 00:04:25,020
functions here so let's have a look what

00:04:21,150 --> 00:04:26,880
invoice does the first line here it

00:04:25,020 --> 00:04:30,240
awaits some promise what does it mean to

00:04:26,880 --> 00:04:32,759
away the promise this means i want to

00:04:30,240 --> 00:04:36,270
stop the execution here at this line and

00:04:32,759 --> 00:04:39,690
wait until the promise is fulfilled but

00:04:36,270 --> 00:04:43,979
in this case happens after approximately

00:04:39,690 --> 00:04:50,250
100 milliseconds now when this promise

00:04:43,979 --> 00:04:53,430
fulfills I can gather the original value

00:04:50,250 --> 00:04:55,800
from the promise like this but it's of

00:04:53,430 --> 00:04:58,800
no views here because I'm just awaiting

00:04:55,800 --> 00:05:02,099
delay so I'll delete it but this in

00:04:58,800 --> 00:05:05,759
textbook good work and after 100

00:05:02,099 --> 00:05:08,490
milliseconds the code the execution is

00:05:05,759 --> 00:05:10,590
resumed and it runs until next away is

00:05:08,490 --> 00:05:12,539
found in this case there is no next away

00:05:10,590 --> 00:05:14,940
the whole function ends and this means

00:05:12,539 --> 00:05:18,300
that undefined is returned as a patron

00:05:14,940 --> 00:05:21,840
value it's important to note that that

00:05:18,300 --> 00:05:23,669
the fact that the execution is paused

00:05:21,840 --> 00:05:26,520
here it doesn't affect the whole notes

00:05:23,669 --> 00:05:28,830
even though the machinery is still

00:05:26,520 --> 00:05:32,750
running the even boob is not freeze so

00:05:28,830 --> 00:05:36,180
for example if in case of a web server

00:05:32,750 --> 00:05:37,740
then we can have one execution we

00:05:36,180 --> 00:05:40,080
disposed here but still the web server

00:05:37,740 --> 00:05:43,259
is responsive and can handle other

00:05:40,080 --> 00:05:45,750
requests and it can even do another

00:05:43,259 --> 00:05:47,460
chunks of works by processing the

00:05:45,750 --> 00:05:52,830
current request it's just this execution

00:05:47,460 --> 00:05:55,500
which is post here finally since we

00:05:52,830 --> 00:05:57,509
awaited some promise here we don't know

00:05:55,500 --> 00:05:59,789
when this function will end it can be

00:05:57,509 --> 00:06:01,800
immediately or it can be in a few aisles

00:05:59,789 --> 00:06:04,740
so it doesn't make sense for this

00:06:01,800 --> 00:06:07,169
function invoice to return standard

00:06:04,740 --> 00:06:10,909
JavaScript value since we are everything

00:06:07,169 --> 00:06:13,319
something the return will will happen

00:06:10,909 --> 00:06:16,590
sometime in the past and therefore we

00:06:13,319 --> 00:06:18,590
hope to return promise and that's

00:06:16,590 --> 00:06:21,599
exactly what this asing is telling us a

00:06:18,590 --> 00:06:25,889
sinc function is just a single nickel

00:06:21,599 --> 00:06:27,930
for function returning promise so that's

00:06:25,889 --> 00:06:30,750
pretty much it about a single why do you

00:06:27,930 --> 00:06:32,580
have to know if you like promises but

00:06:30,750 --> 00:06:35,280
you don't know the syntax you definitely

00:06:32,580 --> 00:06:38,400
should start using it is is really step

00:06:35,280 --> 00:06:42,270
forward and of course it's not supported

00:06:38,400 --> 00:06:43,770
now by almost nobody but table and

00:06:42,270 --> 00:06:46,500
transpile it so

00:06:43,770 --> 00:06:48,840
no problem with it okay so there's a

00:06:46,500 --> 00:06:51,599
function invoice pay is doing roughly

00:06:48,840 --> 00:06:53,460
the same stuff finally do business just

00:06:51,599 --> 00:06:55,949
a way its first invoice and then pay

00:06:53,460 --> 00:06:57,780
which means first all the stuff from

00:06:55,949 --> 00:07:00,060
invoicing this is done and then when

00:06:57,780 --> 00:07:04,740
this is finished all the stuff from pay

00:07:00,060 --> 00:07:10,190
is done okay so that's about it let me

00:07:04,740 --> 00:07:12,930
run this for you okay no surprises here

00:07:10,190 --> 00:07:16,289
now let me show you how would the same

00:07:12,930 --> 00:07:18,780
code look like with the alcohol so we

00:07:16,289 --> 00:07:23,819
have to do first few tweaks here so

00:07:18,780 --> 00:07:26,669
first I have to replace a sinc function

00:07:23,819 --> 00:07:30,509
with function generator generate

00:07:26,669 --> 00:07:35,490
function which is this strange function

00:07:30,509 --> 00:07:37,560
Starla plural ok so we have generated

00:07:35,490 --> 00:07:40,380
functions everywhere now instead of

00:07:37,560 --> 00:07:42,780
awaiting promise I have to yield promise

00:07:40,380 --> 00:07:47,520
yield is a special keyboard which you

00:07:42,780 --> 00:07:50,130
can use inside generating functions so

00:07:47,520 --> 00:07:52,409
in the second rule instead of Kuwait I

00:07:50,130 --> 00:07:55,500
believe everything and the third rule

00:07:52,409 --> 00:07:59,340
when I'm yielding a generator I have to

00:07:55,500 --> 00:08:02,639
run the generator first dry run invoice

00:07:59,340 --> 00:08:06,659
I run pay and then finally I run the

00:08:02,639 --> 00:08:15,750
whole stuff then let's see if I get it

00:08:06,659 --> 00:08:21,630
right on still awaiting yield and I have

00:08:15,750 --> 00:08:24,240
to import run from somewhere it's

00:08:21,630 --> 00:08:28,130
running okay so this does the same stuff

00:08:24,240 --> 00:08:31,650
is the code with a single wait before we

00:08:28,130 --> 00:08:33,779
just do some substitutions and we have

00:08:31,650 --> 00:08:35,789
to run everything so whatwhat's point of

00:08:33,779 --> 00:08:40,260
using it right if I just have to write

00:08:35,789 --> 00:08:44,610
more to have the same result let me show

00:08:40,260 --> 00:08:47,040
you another example i modified it a

00:08:44,610 --> 00:08:50,060
little bit i throw away all delays

00:08:47,040 --> 00:08:57,950
because i don't need it now

00:08:50,060 --> 00:09:00,020
function pay throws an error now next

00:08:57,950 --> 00:09:03,290
thing I deliberately forgot to put a

00:09:00,020 --> 00:09:05,720
weight here and do business function so

00:09:03,290 --> 00:09:08,029
I just call the pay but I'm not awaiting

00:09:05,720 --> 00:09:10,250
the reason the finally the whole do

00:09:08,029 --> 00:09:12,080
business is encapsulated in a try-catch

00:09:10,250 --> 00:09:14,120
block so I'm trying to catch the error

00:09:12,080 --> 00:09:16,430
now what do you think will happen

00:09:14,120 --> 00:09:21,740
without run this what I will see on my

00:09:16,430 --> 00:09:25,900
screen i will give you few more vials of

00:09:21,740 --> 00:09:25,900
awkward silence to think about this

00:09:38,040 --> 00:09:45,449
okay everyone ready with their guesses

00:09:41,300 --> 00:09:49,170
okay so let's see what do we have that's

00:09:45,449 --> 00:09:52,860
it I hope at least some people are

00:09:49,170 --> 00:09:55,440
surprised by now I come on where is my

00:09:52,860 --> 00:09:58,519
error right I throw in a row I catch it

00:09:55,440 --> 00:10:02,339
it should be somewhere but it's not the

00:09:58,519 --> 00:10:04,550
error is completely silent and yeah the

00:10:02,339 --> 00:10:08,519
problem is i forgot to put a weight here

00:10:04,550 --> 00:10:10,410
by not awaiting the promise i created so

00:10:08,519 --> 00:10:12,389
called dangling promise and then going

00:10:10,410 --> 00:10:14,790
promise is a really dangerous thing

00:10:12,389 --> 00:10:17,250
because no one really cares when

00:10:14,790 --> 00:10:20,339
dangling promise ends and what errors it

00:10:17,250 --> 00:10:28,199
may produce it's just it's just there it

00:10:20,339 --> 00:10:31,190
lives in the matrix so yeah this is a

00:10:28,199 --> 00:10:33,959
this problem imagine papers doing some

00:10:31,190 --> 00:10:35,459
important stuff not just from anger but

00:10:33,959 --> 00:10:38,360
doing some I don't know some payments

00:10:35,459 --> 00:10:41,940
for example an imaging will go happen if

00:10:38,360 --> 00:10:46,290
this pay will fail in one execution out

00:10:41,940 --> 00:10:50,850
of 1000 there will be nowhere your code

00:10:46,290 --> 00:10:57,029
will just from time to time pale it will

00:10:50,850 --> 00:10:59,010
give you hell to debug this now let me

00:10:57,029 --> 00:11:02,910
show you the similar code with the

00:10:59,010 --> 00:11:07,199
alcohol so I have generated functions

00:11:02,910 --> 00:11:12,300
here and here troll he'll drown in voice

00:11:07,199 --> 00:11:14,130
but I forget to yield from pay and here

00:11:12,300 --> 00:11:16,470
is how I catch errors in the echo so we

00:11:14,130 --> 00:11:21,720
have to attach attach error handlers

00:11:16,470 --> 00:11:24,329
like this and when I run it yes I can

00:11:21,720 --> 00:11:27,180
catch the error it is much more decent

00:11:24,329 --> 00:11:28,709
behavior than promises give us and back

00:11:27,180 --> 00:11:30,660
to the promise code you can say that is

00:11:28,709 --> 00:11:32,939
my problem that I forgot to put a weight

00:11:30,660 --> 00:11:36,180
here but not so easy to get a weight

00:11:32,939 --> 00:11:38,550
right because a we are in JavaScript we

00:11:36,180 --> 00:11:40,800
don't have types we don't know exactly

00:11:38,550 --> 00:11:43,500
what to a weight and whatnot so it's

00:11:40,800 --> 00:11:47,689
easy to program await somewhere even if

00:11:43,500 --> 00:11:50,630
you use some type system then still be

00:11:47,689 --> 00:11:53,060
sometimes it's completely valid just too

00:11:50,630 --> 00:11:55,700
struck the promise assign it to some

00:11:53,060 --> 00:11:58,460
variable and then a weight it on some

00:11:55,700 --> 00:12:01,100
other place this completely fine please

00:11:58,460 --> 00:12:05,060
have you run things in parallel with a

00:12:01,100 --> 00:12:07,700
single wait so you have to do this from

00:12:05,060 --> 00:12:14,420
time to time so it's far from easy to

00:12:07,700 --> 00:12:17,210
get all the weights right now about the

00:12:14,420 --> 00:12:21,910
yeah cool example how does it this work

00:12:17,210 --> 00:12:24,410
exactly what the semantics of it so

00:12:21,910 --> 00:12:26,780
Polyakov is organized on the concept of

00:12:24,410 --> 00:12:31,310
coral teens you can imagine quarantine

00:12:26,780 --> 00:12:33,470
is some kind of process it's not real OS

00:12:31,310 --> 00:12:36,140
process but you can think about it wait

00:12:33,470 --> 00:12:38,090
the curtain is created when I call

00:12:36,140 --> 00:12:40,850
around something so in this case I run

00:12:38,090 --> 00:12:46,820
invoice run pay and run do business we

00:12:40,850 --> 00:12:49,070
have three coroutines here and those

00:12:46,820 --> 00:12:53,210
curtains are organized in parent-child

00:12:49,070 --> 00:12:56,420
relationship when the curtain is born it

00:12:53,210 --> 00:12:59,230
immediately identifies who is its parent

00:12:56,420 --> 00:13:01,400
and make relationship in this case

00:12:59,230 --> 00:13:04,310
invoice and pay you know that do

00:13:01,400 --> 00:13:06,590
business is their parent and the rule

00:13:04,310 --> 00:13:08,960
number one of vehicle is that the parent

00:13:06,590 --> 00:13:12,500
always take care of I'll handle errors

00:13:08,960 --> 00:13:15,200
of their children so in this case if

00:13:12,500 --> 00:13:19,730
paid produces an error and doesn't

00:13:15,200 --> 00:13:21,350
handle it myself the error is propagated

00:13:19,730 --> 00:13:23,540
to do business school routine and it's

00:13:21,350 --> 00:13:26,420
the business Burke is do business

00:13:23,540 --> 00:13:31,040
business to actually catch the error in

00:13:26,420 --> 00:13:33,080
hand late somehow so it is not numb rule

00:13:31,040 --> 00:13:35,570
number one from your library it works

00:13:33,080 --> 00:13:38,060
here it works in more complicated cases

00:13:35,570 --> 00:13:41,390
here on the left I added some more

00:13:38,060 --> 00:13:45,920
so-called logic so I have some like this

00:13:41,390 --> 00:13:50,570
check which I check we reject which a

00:13:45,920 --> 00:13:55,139
call here in a and in the same story if

00:13:50,570 --> 00:13:58,529
transfer protein produces an arrow

00:13:55,139 --> 00:14:01,470
it's next around it is it's pay and if

00:13:58,529 --> 00:14:04,589
pay does not handle oops this error the

00:14:01,470 --> 00:14:13,169
error is propagated the grandparent do

00:14:04,589 --> 00:14:16,139
business go routine so it's about it now

00:14:13,169 --> 00:14:19,470
rule number two of the echo is that the

00:14:16,139 --> 00:14:22,649
parent crew team cannot end until all

00:14:19,470 --> 00:14:24,899
its children have ended it makes sense

00:14:22,649 --> 00:14:26,759
because the parent has to take care of

00:14:24,899 --> 00:14:29,999
unhandled errors so it can't end

00:14:26,759 --> 00:14:35,100
prematurely let me illustrate this for

00:14:29,999 --> 00:14:39,119
you on to other examples so first async

00:14:35,100 --> 00:14:42,059
await example in this case I modify pay

00:14:39,119 --> 00:14:44,249
now it does not throw an error but it

00:14:42,059 --> 00:14:48,989
takes a really long time to complete it

00:14:44,249 --> 00:14:53,220
take five seconds to complete finally

00:14:48,989 --> 00:14:55,709
main function just just logs when you

00:14:53,220 --> 00:15:00,809
think it the whole business started and

00:14:55,709 --> 00:15:03,629
ended and yeah that versus before I

00:15:00,809 --> 00:15:08,819
forgot to put away here like I'm

00:15:03,629 --> 00:15:11,819
creating penguin cronies and what do we

00:15:08,819 --> 00:15:15,149
got okay so business ends or at least we

00:15:11,819 --> 00:15:18,799
think so advan link process is still

00:15:15,149 --> 00:15:21,660
running they're doing some side effects

00:15:18,799 --> 00:15:24,449
but we don't know about it yeah we think

00:15:21,660 --> 00:15:25,889
the business ends almost instantly it's

00:15:24,449 --> 00:15:32,419
just something we promised out there

00:15:25,889 --> 00:15:36,529
which still is doing its job the same

00:15:32,419 --> 00:15:41,419
people but with co routines once again

00:15:36,529 --> 00:15:47,129
long-running promise orgatron yield and

00:15:41,419 --> 00:15:50,189
main that is before i run this and you

00:15:47,129 --> 00:15:53,609
can see it politely ends all its

00:15:50,189 --> 00:15:57,389
children only now the business has ended

00:15:53,609 --> 00:16:04,949
when all it's spawned coroutines have

00:15:57,389 --> 00:16:09,829
ended so this is it and what we did

00:16:04,949 --> 00:16:09,829
until now we basically solve to

00:16:09,840 --> 00:16:16,480
two panes which you can have it with

00:16:13,180 --> 00:16:19,690
standard promises it's dangling from

00:16:16,480 --> 00:16:22,630
this problem and just you straight to

00:16:19,690 --> 00:16:27,100
how great this is let me show you some

00:16:22,630 --> 00:16:31,140
more real-world example express is

00:16:27,100 --> 00:16:34,480
really popular DOJ's back framework and

00:16:31,140 --> 00:16:36,580
with a little extra boilerplate which

00:16:34,480 --> 00:16:39,850
you can find in the alcohols express

00:16:36,580 --> 00:16:43,600
helpers are you can use coroutines as

00:16:39,850 --> 00:16:47,110
Express request handlers so in this case

00:16:43,600 --> 00:16:49,870
I wrote a very simple middle layer you

00:16:47,110 --> 00:16:54,550
can notice it'sit's cruel teen so that's

00:16:49,870 --> 00:16:56,860
cool what this request handler does this

00:16:54,550 --> 00:16:59,200
middle where does is that first it open

00:16:56,860 --> 00:17:03,190
transaction I mean database transaction

00:16:59,200 --> 00:17:05,380
by this I remember it then I yield next

00:17:03,190 --> 00:17:07,570
by yielding next I'm saying whoever

00:17:05,380 --> 00:17:10,390
wants to deal with this request next

00:17:07,570 --> 00:17:13,810
please now take your time all the other

00:17:10,390 --> 00:17:16,900
middle wires and Rick wit and Lars now

00:17:13,810 --> 00:17:22,690
it's your turn your job and finally well

00:17:16,900 --> 00:17:24,730
learn all these guys finish its I'm in

00:17:22,690 --> 00:17:28,320
charge one more time and I have nothing

00:17:24,730 --> 00:17:28,320
to say and I will commit the transaction

00:17:28,680 --> 00:17:37,390
so this is like version 1 of transaction

00:17:33,310 --> 00:17:41,580
acquire but we can do better this is

00:17:37,390 --> 00:17:45,610
similar stuff but I'm running this in

00:17:41,580 --> 00:17:48,250
run catch block and if any error happens

00:17:45,610 --> 00:17:50,290
during the execution I will explicitly

00:17:48,250 --> 00:17:54,420
roll back the transaction rather than

00:17:50,290 --> 00:17:57,190
let it timeout eventually some time now

00:17:54,420 --> 00:18:01,750
let me stress one more time how great

00:17:57,190 --> 00:18:04,750
this is we commit the transaction but

00:18:01,750 --> 00:18:08,320
only after all spawned coroutines you

00:18:04,750 --> 00:18:10,810
look from or not have completed so there

00:18:08,320 --> 00:18:15,460
is for sure no dangling work in progress

00:18:10,810 --> 00:18:17,440
and also if any curtains spawned during

00:18:15,460 --> 00:18:19,820
this process yielded from or not produce

00:18:17,440 --> 00:18:31,570
any error transaction is for

00:18:19,820 --> 00:18:34,700
sure all back so that's cool finally

00:18:31,570 --> 00:18:37,490
this explicit parent-child relationship

00:18:34,700 --> 00:18:40,100
between coroutines give us a possibility

00:18:37,490 --> 00:18:42,950
to build another amazing stuff on on

00:18:40,100 --> 00:18:47,120
that so let me tell you about this first

00:18:42,950 --> 00:18:50,120
we have a context context is something

00:18:47,120 --> 00:18:53,150
like zones in dark do know it by the

00:18:50,120 --> 00:18:55,100
chance I I copied the thing from that so

00:18:53,150 --> 00:18:59,120
let me explain what is that what will it

00:18:55,100 --> 00:19:02,120
does each color teen is associated with

00:18:59,120 --> 00:19:05,870
the context map that's simple es6 map

00:19:02,120 --> 00:19:08,270
object and the curtain can write the

00:19:05,870 --> 00:19:10,610
context and read from it the cool thing

00:19:08,270 --> 00:19:12,920
is that if the value which I'm trying to

00:19:10,610 --> 00:19:15,830
read is not found in current cruelty in

00:19:12,920 --> 00:19:18,440
context the breed is escalated to the

00:19:15,830 --> 00:19:21,590
parent grandparent and so on so for

00:19:18,440 --> 00:19:24,200
example if this guy says that you know

00:19:21,590 --> 00:19:27,080
hello equals world in its context and

00:19:24,200 --> 00:19:33,290
this guy tries to get hello it gets

00:19:27,080 --> 00:19:37,220
parole this is how context Berg how can

00:19:33,290 --> 00:19:40,250
you put these tools let me revise my

00:19:37,220 --> 00:19:44,860
expression to wear one more time not

00:19:40,250 --> 00:19:48,650
this one this shitty but the second one

00:19:44,860 --> 00:19:52,640
here after i create the transaction to

00:19:48,650 --> 00:20:01,490
be probably a good idea to put it to

00:19:52,640 --> 00:20:04,220
context like this by putting it to

00:20:01,490 --> 00:20:06,470
context i make it accessible for anyone

00:20:04,220 --> 00:20:10,400
who is interested in handling of the

00:20:06,470 --> 00:20:12,680
current request and it does not conflict

00:20:10,400 --> 00:20:16,310
with other transactions opened in other

00:20:12,680 --> 00:20:18,410
context is of other requests and when i

00:20:16,310 --> 00:20:22,550
do this i can write simple helper

00:20:18,410 --> 00:20:29,000
function get transaction and all this

00:20:22,550 --> 00:20:32,169
has to do is get the transaction from

00:20:29,000 --> 00:20:35,919
the context and

00:20:32,169 --> 00:20:39,700
procuring now anyone calls this function

00:20:35,919 --> 00:20:45,730
will get the current open transaction

00:20:39,700 --> 00:20:48,359
with it needs to have yeah that's about

00:20:45,730 --> 00:20:54,399
context can be a messaging system

00:20:48,359 --> 00:20:56,440
similar to put CSP yes i use CSP for

00:20:54,399 --> 00:20:59,559
some time may i notice i don't like

00:20:56,440 --> 00:21:01,960
every piece of the library well i don't

00:20:59,559 --> 00:21:03,909
like most I don't use it I don't need it

00:21:01,960 --> 00:21:07,809
so I point the only small subset of CSP

00:21:03,909 --> 00:21:10,869
I really use and like so you can create

00:21:07,809 --> 00:21:12,669
some channels you can boost messages to

00:21:10,869 --> 00:21:14,769
channel this pushes are always non

00:21:12,669 --> 00:21:17,289
blocking and then you can yield messages

00:21:14,769 --> 00:21:21,070
from channels and this yield can be

00:21:17,289 --> 00:21:23,590
blocking and yeah this is great great

00:21:21,070 --> 00:21:25,179
mechanism for synchronizes for

00:21:23,590 --> 00:21:28,379
synchronizing multiple color teens it's

00:21:25,179 --> 00:21:32,649
it's really handy and thanks to whoever

00:21:28,379 --> 00:21:38,590
created CSP context and finally how it

00:21:32,649 --> 00:21:41,859
all plays very nicely promises so one

00:21:38,590 --> 00:21:44,739
more demonstration this is how I write

00:21:41,859 --> 00:21:48,730
my database next is very simple query

00:21:44,739 --> 00:21:50,529
builder and makes returns when we insert

00:21:48,730 --> 00:21:52,659
something to the database drinkin or

00:21:50,529 --> 00:21:54,909
some promise like object so i can simply

00:21:52,659 --> 00:21:57,700
yield it and it will play nice with

00:21:54,909 --> 00:22:00,820
micro routine and it's not only this but

00:21:57,700 --> 00:22:03,820
it works also another way around so the

00:22:00,820 --> 00:22:06,989
whole crew teen is promised like object

00:22:03,820 --> 00:22:09,639
so for example when motor test return

00:22:06,989 --> 00:22:12,129
the function i put to motor test we're

00:22:09,639 --> 00:22:14,499
in returns sankar routine what I can

00:22:12,129 --> 00:22:17,919
understand that it has to wait until all

00:22:14,499 --> 00:22:22,149
the stuff is done it once again in this

00:22:17,919 --> 00:22:25,299
test it completes only after all

00:22:22,149 --> 00:22:27,970
quarantines which i created gilded frame

00:22:25,299 --> 00:22:30,639
or not lending and you know if any of

00:22:27,970 --> 00:22:35,379
these current is produced any error the

00:22:30,639 --> 00:22:40,899
test will be Marcus sale so it's really

00:22:35,379 --> 00:22:42,879
easy to use this and finally there are

00:22:40,899 --> 00:22:44,799
few features i would like to implement

00:22:42,879 --> 00:22:45,610
in the next future especially if you

00:22:44,799 --> 00:22:53,049
guys will like

00:22:45,610 --> 00:22:56,170
is oh there is this concept of

00:22:53,049 --> 00:22:59,590
termination what does it mean imagine

00:22:56,170 --> 00:23:02,799
you created some long running process

00:22:59,590 --> 00:23:04,360
promises and santa Society you realized

00:23:02,799 --> 00:23:08,590
you are not interested in the answer

00:23:04,360 --> 00:23:10,510
anymore yeah you do some computations

00:23:08,590 --> 00:23:12,160
and suddenly for example some time out

00:23:10,510 --> 00:23:14,230
is reached so okay I don't need this

00:23:12,160 --> 00:23:16,270
result I have to do some some other

00:23:14,230 --> 00:23:19,210
stuff so what we can do with promises in

00:23:16,270 --> 00:23:24,010
such case and the answer is not very

00:23:19,210 --> 00:23:26,140
much of course you can fulfill or reject

00:23:24,010 --> 00:23:29,730
the main promise we are waiting for but

00:23:26,140 --> 00:23:33,640
what about what about these guys here

00:23:29,730 --> 00:23:35,470
they are still running eating your CPU

00:23:33,640 --> 00:23:41,350
and doing some side effects you might

00:23:35,470 --> 00:23:45,880
not be interested in anymore and that's

00:23:41,350 --> 00:23:47,860
not good once again with the akal thanks

00:23:45,880 --> 00:23:50,549
to explicit parent-child relationship

00:23:47,860 --> 00:23:52,900
with between routines we can easily

00:23:50,549 --> 00:23:55,770
terminate all the crew team three

00:23:52,900 --> 00:23:59,830
instantly so it's much more cleaner than

00:23:55,770 --> 00:24:03,970
some funky patched termination of

00:23:59,830 --> 00:24:07,929
promises so that's about it there are

00:24:03,970 --> 00:24:09,190
few other many few other features i

00:24:07,929 --> 00:24:10,870
would like to implement i think they are

00:24:09,190 --> 00:24:13,330
really cool but I don't want to

00:24:10,870 --> 00:24:15,250
overwhelm you say so but I will be

00:24:13,330 --> 00:24:18,760
really excited to chat about this drink

00:24:15,250 --> 00:24:22,510
later I would be really ready to give me

00:24:18,760 --> 00:24:24,940
some constructive feedback oh you can

00:24:22,510 --> 00:24:29,110
find the hole you call here on github or

00:24:24,940 --> 00:24:32,140
you can allow me on NPM the whole thing

00:24:29,110 --> 00:24:35,890
is in alpha stage we are using it on

00:24:32,140 --> 00:24:38,940
some projects but I don't know probably

00:24:35,890 --> 00:24:43,960
I wouldn't use it in production on some

00:24:38,940 --> 00:24:46,990
or bigger project now so so you do this

00:24:43,960 --> 00:24:49,210
with care but hopefully we'll get to the

00:24:46,990 --> 00:24:51,730
point soon when the whole thing will be

00:24:49,210 --> 00:24:55,120
stable and the API won't change and all

00:24:51,730 --> 00:24:58,270
that stuff finally this is meant mostly

00:24:55,120 --> 00:24:58,930
for server usage you can use it in

00:24:58,270 --> 00:25:02,710
client

00:24:58,930 --> 00:25:06,850
as well I'm not sure if the edit value'

00:25:02,710 --> 00:25:10,330
on client is it's so big but if you use

00:25:06,850 --> 00:25:13,630
a views asynchronous stuff a lot on

00:25:10,330 --> 00:25:17,200
clients and if you find your code

00:25:13,630 --> 00:25:20,140
long-promised chains then probably this

00:25:17,200 --> 00:25:21,610
is also a good fit for you okay that's

00:25:20,140 --> 00:25:25,470
about it thank you for your attention

00:25:21,610 --> 00:25:25,470
and questions

00:25:46,620 --> 00:25:51,930
por ke IRA not just trading the forget

00:25:49,770 --> 00:25:55,230
the wait we don't forget run absolutely

00:25:51,930 --> 00:25:58,550
not the key differences if you forget to

00:25:55,230 --> 00:26:03,140
run thing it does it doesn't do anything

00:25:58,550 --> 00:26:08,430
it just is the same thing as if I right

00:26:03,140 --> 00:26:10,500
let me see okay if i right also block

00:26:08,430 --> 00:26:13,380
yeah it also doesn't do anything because

00:26:10,500 --> 00:26:15,270
I didn't execute the function and I

00:26:13,380 --> 00:26:19,470
probably discover really really quickly

00:26:15,270 --> 00:26:22,110
ha ok it's out there haha ok I mean if

00:26:19,470 --> 00:26:23,850
you type console dot log and semicolon

00:26:22,110 --> 00:26:25,860
and no parentheses you don't call the

00:26:23,850 --> 00:26:27,510
function you are not doing anything and

00:26:25,860 --> 00:26:30,270
you will discover pretty quickly that

00:26:27,510 --> 00:26:32,820
you are not doing anything the problem

00:26:30,270 --> 00:26:36,350
with forgetting a wait is that the

00:26:32,820 --> 00:26:39,890
promise is still doing the work and

00:26:36,350 --> 00:26:42,270
irritatingly often it happens that you

00:26:39,890 --> 00:26:45,870
won't discover the problem because the

00:26:42,270 --> 00:26:49,530
bird will complete will finish until you

00:26:45,870 --> 00:26:52,260
need it to be finished on the contrary

00:26:49,530 --> 00:26:55,860
very forget to run something it will do

00:26:52,260 --> 00:26:59,040
nothing it will be just like if you just

00:26:55,860 --> 00:27:01,500
type some function without executing it

00:26:59,040 --> 00:27:12,740
so definitely not we will debug this

00:27:01,500 --> 00:27:12,740
much more quicker but

00:27:15,660 --> 00:27:40,110
provides cool what happened there Oh

00:27:21,680 --> 00:27:43,620
fire okay okay all the difference

00:27:40,110 --> 00:27:46,350
between yield and await that is two

00:27:43,620 --> 00:27:49,110
different keywords away it is used for a

00:27:46,350 --> 00:27:52,200
single wait staff and you this more

00:27:49,110 --> 00:27:55,710
general concept use with generators but

00:27:52,200 --> 00:27:57,900
actually I think that a sink away it is

00:27:55,710 --> 00:28:01,490
implemented using also the generator

00:27:57,900 --> 00:28:01,490
stuff so I think that a way it uses

00:28:01,970 --> 00:28:08,430
everybody uses a yield on the background

00:28:05,820 --> 00:28:14,850
or at least in some people transplanting

00:28:08,430 --> 00:28:17,400
you will find it is it so I think of it

00:28:14,850 --> 00:28:21,480
are not syntax for sugar for promises

00:28:17,400 --> 00:28:23,700
but rather for run generator easily yes

00:28:21,480 --> 00:28:26,340
yes it's true it is how you look at it

00:28:23,700 --> 00:28:28,500
you can okay as a complete brand new

00:28:26,340 --> 00:28:30,630
staff or or syntax sugar to promises I

00:28:28,500 --> 00:28:33,840
just say it so its syntax sugar for

00:28:30,630 --> 00:28:36,690
promises because the behavior behavior

00:28:33,840 --> 00:28:38,820
you get from async await is really

00:28:36,690 --> 00:28:42,660
similar to what you get from promises if

00:28:38,820 --> 00:28:45,150
you rip out all my examples with async

00:28:42,660 --> 00:28:50,250
await to the promised land standard

00:28:45,150 --> 00:28:54,930
promised land all the failures I was

00:28:50,250 --> 00:28:56,910
illustrating would be the same so there

00:28:54,930 --> 00:28:59,490
is no no significant difference between

00:28:56,910 --> 00:29:02,160
this is just with the async await the

00:28:59,490 --> 00:29:04,080
code looks nicer that's why but I say

00:29:02,160 --> 00:29:05,490
it's some syntactic sugar but yeah you

00:29:04,080 --> 00:29:12,780
are right there is a more fundamental

00:29:05,490 --> 00:29:14,430
stuff in the background oh don't you

00:29:12,780 --> 00:29:18,600
think a single bed is too impressive

00:29:14,430 --> 00:29:20,910
approach also what about record hell yes

00:29:18,600 --> 00:29:24,120
essing effing to is imperative approach

00:29:20,910 --> 00:29:27,660
and I think it's good in some cases I

00:29:24,120 --> 00:29:28,760
don't think everything has to be one

00:29:27,660 --> 00:29:31,070
hundred percent

00:29:28,760 --> 00:29:32,660
all the time I mean don't get me wrong I

00:29:31,070 --> 00:29:36,410
really like love the functional

00:29:32,660 --> 00:29:40,970
programming but there is limits but it

00:29:36,410 --> 00:29:42,290
should be using and when not so once

00:29:40,970 --> 00:29:45,200
again we did you forget run I already

00:29:42,290 --> 00:29:46,670
said this but once again the most

00:29:45,200 --> 00:29:49,310
important thing if you forget run

00:29:46,670 --> 00:29:52,310
nothing will happen if you forget to run

00:29:49,310 --> 00:29:57,680
pay none of your payments will be

00:29:52,310 --> 00:30:00,560
executed ok so you debug this quite

00:29:57,680 --> 00:30:03,470
quickly if you forgot to run pay nope

00:30:00,560 --> 00:30:05,450
Evansville will happen at all on the

00:30:03,470 --> 00:30:11,420
contrary if you forget to a way to pay

00:30:05,450 --> 00:30:13,430
then 99 pays out of 100 can complete

00:30:11,420 --> 00:30:16,850
properly on time and without any errors

00:30:13,430 --> 00:30:20,650
and the one percent which does not will

00:30:16,850 --> 00:30:23,090
give you hell to leave me in there oh

00:30:20,650 --> 00:30:25,730
all the difference between this and call

00:30:23,090 --> 00:30:31,760
gecko is another cool called curtain

00:30:25,730 --> 00:30:34,130
library but I think cool basically

00:30:31,760 --> 00:30:36,380
follows on on writing guessing her stuff

00:30:34,130 --> 00:30:39,590
with co routines but without the school

00:30:36,380 --> 00:30:42,290
parent child relationship stuff so for

00:30:39,590 --> 00:30:43,490
example you can never think oh I don't

00:30:42,290 --> 00:30:46,370
think you will be ever able to terminate

00:30:43,490 --> 00:30:50,330
kruton with all its children as you can

00:30:46,370 --> 00:30:52,910
do it now I think who was especially

00:30:50,330 --> 00:30:55,700
cooling old times when there was no

00:30:52,910 --> 00:31:00,680
async await because allow it allows you

00:30:55,700 --> 00:31:09,680
to write nice coat with those tools you

00:31:00,680 --> 00:31:11,240
have at the time the narrator's put off

00:31:09,680 --> 00:31:14,450
a lot developers do you think they

00:31:11,240 --> 00:31:22,610
actually table is level pepper a

00:31:14,450 --> 00:31:27,260
learning curve well I don't know I think

00:31:22,610 --> 00:31:31,040
this is pretty subjective think promises

00:31:27,260 --> 00:31:34,720
are extremely hard to understand for for

00:31:31,040 --> 00:31:37,280
standard people who you just iron ore

00:31:34,720 --> 00:31:40,700
for people who are new to programming so

00:31:37,280 --> 00:31:42,680
a promises are hard now if you don't

00:31:40,700 --> 00:31:46,250
want to use raw promises you have to

00:31:42,680 --> 00:31:50,320
was either a single aid or generators in

00:31:46,250 --> 00:31:53,750
the ohm and this is just I'm just

00:31:50,320 --> 00:31:55,580
swapping the keyboards here so I don't

00:31:53,750 --> 00:31:59,630
think that what the Eccles brings is

00:31:55,580 --> 00:32:01,760
some some kind of extra don't understand

00:31:59,630 --> 00:32:04,630
the boiler boiler plate if you don't go

00:32:01,760 --> 00:32:07,340
with the echo you will probably go with

00:32:04,630 --> 00:32:10,190
with async await but it's just as

00:32:07,340 --> 00:32:14,870
complex as this and has those dangling

00:32:10,190 --> 00:32:17,060
issues I demonstrated to you is it

00:32:14,870 --> 00:32:19,190
possible to visualize the data flow yes

00:32:17,060 --> 00:32:23,990
exactly this is something I want to work

00:32:19,190 --> 00:32:26,210
on even noticed one of my what one of

00:32:23,990 --> 00:32:27,920
items my to-do list is to give you

00:32:26,210 --> 00:32:30,920
better stack traces and better debug

00:32:27,920 --> 00:32:33,830
info with this explicit parent-child co

00:32:30,920 --> 00:32:36,230
routines system you can have really

00:32:33,830 --> 00:32:37,490
really powerful insight into what's

00:32:36,230 --> 00:32:40,250
happening in your code because it

00:32:37,490 --> 00:32:42,940
exactly know who called vodka routine

00:32:40,250 --> 00:32:48,620
and with what arguments it was spawned

00:32:42,940 --> 00:32:50,360
so when something is broken you can you

00:32:48,620 --> 00:32:52,220
can have much more information about it

00:32:50,360 --> 00:32:55,310
than than just the just plain stack

00:32:52,220 --> 00:32:57,640
trace and yeah I'm thinking about many

00:32:55,310 --> 00:33:01,220
things here may be able to some

00:32:57,640 --> 00:33:04,880
processor in browser debugging tool for

00:33:01,220 --> 00:33:09,280
this we'll see but yeah it's not there

00:33:04,880 --> 00:33:09,280
now but definitely it's on my to-do list

00:33:09,400 --> 00:33:15,320
while observables instead of promises

00:33:11,840 --> 00:33:17,930
this is rather broad question what kind

00:33:15,320 --> 00:33:21,860
of observables yeah you can use erics

00:33:17,930 --> 00:33:25,670
and that's completely different land or

00:33:21,860 --> 00:33:27,830
exists it's a broad topic so if you like

00:33:25,670 --> 00:33:30,440
this time of programming doing pitching

00:33:27,830 --> 00:33:33,380
callbacks and listening to streams and

00:33:30,440 --> 00:33:36,380
so on for sure that that's a one-way how

00:33:33,380 --> 00:33:44,030
you can do this this is more about doing

00:33:36,380 --> 00:33:47,650
a code which feels like standard Java or

00:33:44,030 --> 00:33:51,170
Python code do this do this wait this

00:33:47,650 --> 00:33:53,420
then wait for this then wait for this

00:33:51,170 --> 00:33:55,879
and then continue it with this stuff I

00:33:53,420 --> 00:33:58,929
think for example that attaching

00:33:55,879 --> 00:34:02,899
listeners on streams is conceptually

00:33:58,929 --> 00:34:07,429
hard think it's easy when you are

00:34:02,899 --> 00:34:09,919
looking at some hello world example but

00:34:07,429 --> 00:34:13,970
when you go into more stream hell it's

00:34:09,919 --> 00:34:17,509
it's far more complicated to do to

00:34:13,970 --> 00:34:32,599
mentally grasp all the complexity in

00:34:17,509 --> 00:34:37,309
there oh yeah try run catch error don't

00:34:32,599 --> 00:34:40,450
know I don't understand this definitely

00:34:37,309 --> 00:34:44,000
you cannot do the proposed syntax and

00:34:40,450 --> 00:34:47,409
yeah I would be like if you can use

00:34:44,000 --> 00:34:50,659
standard try catch block with this and

00:34:47,409 --> 00:34:54,109
not this awkward don't catch something

00:34:50,659 --> 00:34:59,150
but I don't think there is a nice way

00:34:54,109 --> 00:35:00,670
how to do this if you some someone

00:34:59,150 --> 00:35:03,700
[Music]

00:35:00,670 --> 00:35:06,559
create something system huh but but yeah

00:35:03,700 --> 00:35:08,240
without transpiring the code with some

00:35:06,559 --> 00:35:11,509
Babel plotting of course with baby plug

00:35:08,240 --> 00:35:14,089
in everything is possible but this is

00:35:11,509 --> 00:35:16,640
for now just the library it does not

00:35:14,089 --> 00:35:19,309
force you to transpile your code in any

00:35:16,640 --> 00:35:22,220
way before running apart from standard

00:35:19,309 --> 00:35:25,220
stuff and I think this try-catch would

00:35:22,220 --> 00:35:31,099
need some pre-processing which I would

00:35:25,220 --> 00:35:34,700
like to avoid Oh remove already I think

00:35:31,099 --> 00:35:36,769
that's all yeah okay so it's a good

00:35:34,700 --> 00:35:39,160
round of applause thank you very much

00:35:36,769 --> 00:35:39,160

YouTube URL: https://www.youtube.com/watch?v=gZz-1OaMpqg


