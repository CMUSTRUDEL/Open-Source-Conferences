Title: ReactiveConf 2016 LT - Peter Perešíni: Reducing Redux Boilerplate
Publication date: 2016-11-25
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

For inspiration, look at one of the most-starred Lightning Talks proposals for ReactiveConf 2016.

---

Peter Perešíni: Reducing Redux Boilerplate

Redux is a predictable state container for Javascript (and React) that is becoming more and more popular.

In this lightning talk, I will show you that while Redux is great, it contains too much boilerplate for small-to-medium sized applications.
To alleviate this problem, I will demonstrate how to keep Redux but customize it and bend it so that you can keep most of its useful properties and, at the same time, reduce the boilerplate.

Hopefully, this will show that you should not take Redux out-of-the-box, but rather think about how to customize it to fit your project.


---

Do you see yourself on the ReactiveConf stage? Do you want to become the next #ReactJS superstar? If you think you have a great idea everybody in the community should know about, join Lightning Talks, and share the spotlight with the best React experts at ReactiveConf next year!

All you need to do to become a part of them is to submit your proposal to Gist and leave the rest to the community.

The ten most-starred proposals will join our line-up, and the top three ones will get a free ReactiveConf ticket with an invitation to an exclusive dinner with our speakers and VIP guests.

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, 

it’s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing 

amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, 

RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,830 --> 00:00:08,370
thank you so today I'm going to tell you

00:00:06,870 --> 00:00:10,770
something about how to reduce a great

00:00:08,370 --> 00:00:14,460
expert on a plate so who knows but who

00:00:10,770 --> 00:00:15,840
knows I Jackson cool for those of you

00:00:14,460 --> 00:00:18,060
who don't know whether it exists it

00:00:15,840 --> 00:00:20,820
exists a predictable state container for

00:00:18,060 --> 00:00:22,400
java applications and to tell you a bit

00:00:20,820 --> 00:00:25,109
more about it i will show you an example

00:00:22,400 --> 00:00:27,900
example is a simple counter which can

00:00:25,109 --> 00:00:30,449
increment or decrement x value now this

00:00:27,900 --> 00:00:32,580
is how additionally a redux code looks

00:00:30,449 --> 00:00:35,699
like it consists of files and

00:00:32,580 --> 00:00:39,000
directories we have actions if we have

00:00:35,699 --> 00:00:41,339
reduced serves and we have some

00:00:39,000 --> 00:00:44,460
constants which glue together these

00:00:41,339 --> 00:00:47,100
files so what's wrong with this well

00:00:44,460 --> 00:00:48,780
first of all I don't like this

00:00:47,100 --> 00:00:51,479
redundancy that I have these constants

00:00:48,780 --> 00:00:53,339
which glue my files together the second

00:00:51,479 --> 00:00:56,670
problem which is much more important is

00:00:53,339 --> 00:00:58,470
that my logic is split across these two

00:00:56,670 --> 00:01:00,330
files actions and reduce ourselves and

00:00:58,470 --> 00:01:03,330
now this is bad because in action I

00:01:00,330 --> 00:01:05,970
already know what to do so why I need to

00:01:03,330 --> 00:01:08,820
look at another file to see what the

00:01:05,970 --> 00:01:11,430
reaction is actually doing finally I

00:01:08,820 --> 00:01:13,700
don't really like this imperative style

00:01:11,430 --> 00:01:17,670
of reducing because this can lead to box

00:01:13,700 --> 00:01:20,910
so what can we do well we should compare

00:01:17,670 --> 00:01:23,010
attacks because it's awesome but we can

00:01:20,910 --> 00:01:25,590
abuse it a bit so let me show you how we

00:01:23,010 --> 00:01:28,020
can do it first of all let's start with

00:01:25,590 --> 00:01:30,060
our relax example what I really want to

00:01:28,020 --> 00:01:31,880
do is I want to move this radio sir from

00:01:30,060 --> 00:01:35,730
the right side to the left side so I

00:01:31,880 --> 00:01:38,220
just add a reducer to the actions and

00:01:35,730 --> 00:01:41,130
now what i can do is i can simply

00:01:38,220 --> 00:01:42,930
replace the the road abuser with rivers

00:01:41,130 --> 00:01:47,790
simple calling the action to the reducer

00:01:42,930 --> 00:01:49,530
and that's it after i did this the the

00:01:47,790 --> 00:01:52,950
interesting thing is now i don't need

00:01:49,530 --> 00:01:54,570
actually this constant and actually i

00:01:52,950 --> 00:01:58,920
don't even need the action got to type

00:01:54,570 --> 00:02:01,440
so yeah this is not necessary are but we

00:01:58,920 --> 00:02:03,690
will keep it because all the redox

00:02:01,440 --> 00:02:06,090
middleware actually expects actions to

00:02:03,690 --> 00:02:10,670
have type and so we can actually stick

00:02:06,090 --> 00:02:15,080
it we stick something important there ah

00:02:10,670 --> 00:02:17,480
the user readable the the action

00:02:15,080 --> 00:02:20,330
what it is dying in a in a much more

00:02:17,480 --> 00:02:23,990
friendly way than then the stranger we

00:02:20,330 --> 00:02:26,210
had there before so now I remove the

00:02:23,990 --> 00:02:29,930
constants what I can do more with this

00:02:26,210 --> 00:02:31,550
approach well usually when I want to

00:02:29,930 --> 00:02:34,010
reduce something I don't want to reduce

00:02:31,550 --> 00:02:36,500
it in in the road state I want to reduce

00:02:34,010 --> 00:02:39,290
it somewhere down in some sub States so

00:02:36,500 --> 00:02:42,620
what I can do is I can attach path to

00:02:39,290 --> 00:02:45,650
the actions and now simply I can change

00:02:42,620 --> 00:02:47,500
my reducer to you some are some function

00:02:45,650 --> 00:02:51,920
which can update deep in the state

00:02:47,500 --> 00:02:55,190
according to the user and this is quite

00:02:51,920 --> 00:02:57,610
cool because you can ask well what if I

00:02:55,190 --> 00:03:00,920
have more counters I can store them in

00:02:57,610 --> 00:03:03,500
into pacifist 8 and b and now i can

00:03:00,920 --> 00:03:07,240
simply go out my actions according to

00:03:03,500 --> 00:03:12,560
the e I ID I you just change the path

00:03:07,240 --> 00:03:14,900
similarly if I have more counters I can

00:03:12,560 --> 00:03:17,660
actually create something which is an

00:03:14,900 --> 00:03:22,850
action factory which takes a path at

00:03:17,660 --> 00:03:25,519
which it should work and returns actions

00:03:22,850 --> 00:03:28,880
which will perform the reducing on this

00:03:25,519 --> 00:03:31,519
path and so by doing this I can have

00:03:28,880 --> 00:03:34,190
counters which work not only on a

00:03:31,519 --> 00:03:38,510
specific ideas but on arbitrary paths

00:03:34,190 --> 00:03:42,830
inside my state and so this is the whole

00:03:38,510 --> 00:03:44,810
idea I was trying to sell it today what

00:03:42,830 --> 00:03:47,450
did we gain well first of all we kept

00:03:44,810 --> 00:03:50,150
the Ducks are in all of its middle

00:03:47,450 --> 00:03:52,040
layers second of all we reduced a lot of

00:03:50,150 --> 00:03:55,280
boilerplate which is inherent to relax

00:03:52,040 --> 00:03:58,310
and most importantly we collocated the

00:03:55,280 --> 00:04:01,580
code which was spread across actions and

00:03:58,310 --> 00:04:04,820
reducers but logically it belongs to a

00:04:01,580 --> 00:04:07,670
single entity of course we did lose

00:04:04,820 --> 00:04:11,810
something with this goose say our eyes

00:04:07,670 --> 00:04:13,670
ability of the actions now ah this is

00:04:11,810 --> 00:04:17,140
not such a big deal most of the middle

00:04:13,670 --> 00:04:20,180
of sVU's actually can handle this

00:04:17,140 --> 00:04:24,229
gracefully so if you don't really need

00:04:20,180 --> 00:04:26,900
perfect a timetable you can still

00:04:24,229 --> 00:04:28,040
attached some functions to actions and

00:04:26,900 --> 00:04:32,000
it works

00:04:28,040 --> 00:04:34,100
and so to sum up redox is cool but it's

00:04:32,000 --> 00:04:36,710
not the Holy Grail you can bend it to

00:04:34,100 --> 00:04:38,450
your needs and you should evaluate what

00:04:36,710 --> 00:04:40,790
what are your wins and losses on a

00:04:38,450 --> 00:04:43,750
project and just choose the architecture

00:04:40,790 --> 00:04:43,750

YouTube URL: https://www.youtube.com/watch?v=BaBq48tvPB8


