Title: ReactiveConf 2016 - Ryan J. Salva: Debugging in Production: A Preview of CodePush vNext
Publication date: 2016-11-23
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Ryan J. Salva: Building Universal Windows Apps with React Native

abstrakt

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, itâ€™s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,759 --> 00:00:11,030
hello everybody so everyone feeling good

00:00:07,429 --> 00:00:12,679
after lunch yeah solid two thumbs up all

00:00:11,030 --> 00:00:14,330
right well uh first big round of

00:00:12,679 --> 00:00:16,880
applause everyone for the organizers

00:00:14,330 --> 00:00:20,029
this has been a fantastic conference I

00:00:16,880 --> 00:00:23,480
cannot tell you as a representative of

00:00:20,029 --> 00:00:25,940
Microsoft i am just elated excited to be

00:00:23,480 --> 00:00:28,160
here so uh as brent was saying my name's

00:00:25,940 --> 00:00:30,470
ryan j salva i am a product manager at

00:00:28,160 --> 00:00:32,170
microsoft my team is responsible for

00:00:30,470 --> 00:00:34,820
building mobile development tools

00:00:32,170 --> 00:00:37,100
specifically for react native so we're

00:00:34,820 --> 00:00:39,319
the team that owns tools like code push

00:00:37,100 --> 00:00:41,809
or the vs code extension for react

00:00:39,319 --> 00:00:44,089
native development and i know that on

00:00:41,809 --> 00:00:45,260
all of your kind of agendas for the day

00:00:44,089 --> 00:00:47,600
it said that i was gonna be talking

00:00:45,260 --> 00:00:49,429
about windows development I've got a big

00:00:47,600 --> 00:00:52,039
surprise for you I'm not gonna talk

00:00:49,429 --> 00:00:53,120
about windows development instead I'm

00:00:52,039 --> 00:00:54,979
actually gonna be talking you guys a

00:00:53,120 --> 00:00:57,859
little bit about debugging and

00:00:54,979 --> 00:00:59,839
production today this is really really

00:00:57,859 --> 00:01:03,909
exciting stuff that's coming out just

00:00:59,839 --> 00:01:07,850
here at the tail end of 2016 and so I

00:01:03,909 --> 00:01:09,560
kind of when I think about these kinds

00:01:07,850 --> 00:01:11,840
of these kinds of concepts I find it's

00:01:09,560 --> 00:01:13,790
really really important to start simple

00:01:11,840 --> 00:01:15,920
so I'm gonna start with some really

00:01:13,790 --> 00:01:17,630
basic fundamental concepts that we're

00:01:15,920 --> 00:01:19,580
all familiar with and then we're going

00:01:17,630 --> 00:01:23,180
to kind of get rolling get more complex

00:01:19,580 --> 00:01:26,000
as we go along because Nick I'm in this

00:01:23,180 --> 00:01:27,740
because I love building tools I love

00:01:26,000 --> 00:01:29,900
enabling other people to create and

00:01:27,740 --> 00:01:31,940
sometimes I know that it's really fun to

00:01:29,900 --> 00:01:34,430
peek underneath the hood and see how the

00:01:31,940 --> 00:01:36,890
tools that we use every day actually

00:01:34,430 --> 00:01:38,600
kind of shape our workflows and shape

00:01:36,890 --> 00:01:42,320
the way that we create and it makes us

00:01:38,600 --> 00:01:43,940
better developers overall so here's what

00:01:42,320 --> 00:01:45,710
we're gonna do we're going to start just

00:01:43,940 --> 00:01:48,500
by taking a look at what we already know

00:01:45,710 --> 00:01:51,500
the basic react workflow right so you've

00:01:48,500 --> 00:01:54,500
got some source files you punch them

00:01:51,500 --> 00:01:56,480
into web pack webpack spits out a kind

00:01:54,500 --> 00:01:59,840
of a min ified file it then ends up

00:01:56,480 --> 00:02:02,450
running in v8 or chakra as the case may

00:01:59,840 --> 00:02:05,270
be which then communicates with the Dom

00:02:02,450 --> 00:02:08,330
via the virtual Dom right so that's all

00:02:05,270 --> 00:02:11,209
in react for react native the process is

00:02:08,330 --> 00:02:13,010
almost exactly the same the the nouns

00:02:11,209 --> 00:02:14,689
are just a little bit different all

00:02:13,010 --> 00:02:17,690
right so let's see here yeah here we are

00:02:14,689 --> 00:02:19,970
so instead of just having

00:02:17,690 --> 00:02:23,240
native UI and said having a Dom we have

00:02:19,970 --> 00:02:26,150
native UI instead of having a v8 we've

00:02:23,240 --> 00:02:29,360
got the JSC instead of having web pack

00:02:26,150 --> 00:02:30,920
we've got the packager and only

00:02:29,360 --> 00:02:33,170
difference here is that over here on the

00:02:30,920 --> 00:02:35,360
far side instead of having just index j

00:02:33,170 --> 00:02:38,390
sx we've got one for iOS and one for j

00:02:35,360 --> 00:02:40,880
sx now when we're ready to start

00:02:38,390 --> 00:02:42,230
debugging with this guy some funny

00:02:40,880 --> 00:02:44,150
things happen that wouldn't normally

00:02:42,230 --> 00:02:47,210
happen in a normal kind of react

00:02:44,150 --> 00:02:49,670
web-based workflow so first that

00:02:47,210 --> 00:02:51,650
debugger right he's got to attach over

00:02:49,670 --> 00:02:53,480
to the running instance but a funny

00:02:51,650 --> 00:02:56,570
thing happens here when it tries to

00:02:53,480 --> 00:02:59,660
connect to the JSC that guy just totally

00:02:56,570 --> 00:03:00,890
denies them smacks him down flat because

00:02:59,660 --> 00:03:02,990
the thing is that the Android platform

00:03:00,890 --> 00:03:06,020
at least the Android platform does not

00:03:02,990 --> 00:03:10,400
allow the JSC to run in debug mode and

00:03:06,020 --> 00:03:13,970
so instead we got to find something else

00:03:10,400 --> 00:03:17,150
to to run that javascript in that is

00:03:13,970 --> 00:03:20,390
capable of operating in debug mode well

00:03:17,150 --> 00:03:22,310
luckily JavaScript runs everywhere

00:03:20,390 --> 00:03:25,370
there's all sorts of places that you can

00:03:22,310 --> 00:03:28,790
run JavaScript the most obvious one well

00:03:25,370 --> 00:03:31,400
then click on over here we just need

00:03:28,790 --> 00:03:33,530
something hey you know what chrome runs

00:03:31,400 --> 00:03:35,239
java script from the great place to run

00:03:33,530 --> 00:03:37,550
javascript not only does it provide good

00:03:35,239 --> 00:03:39,739
development tools but it's also got one

00:03:37,550 --> 00:03:42,800
of the fastest JavaScript engines on the

00:03:39,739 --> 00:03:45,050
planet right so what we'll end up doing

00:03:42,800 --> 00:03:47,360
is when you start up that react native

00:03:45,050 --> 00:03:49,120
app and you connect to the debugger a

00:03:47,360 --> 00:03:51,650
funny things going to happen here that

00:03:49,120 --> 00:03:54,560
bundle that is normally operating in the

00:03:51,650 --> 00:03:58,519
JSC it's going to be moved over into

00:03:54,560 --> 00:04:02,269
chrome right so at this point the JSC is

00:03:58,519 --> 00:04:04,760
effectively moot it's it's out of the

00:04:02,269 --> 00:04:06,050
equation entirely all of the JavaScript

00:04:04,760 --> 00:04:08,570
for your react native app is now

00:04:06,050 --> 00:04:11,030
actually running in chrome during debug

00:04:08,570 --> 00:04:13,459
mode so what happens here is that your

00:04:11,030 --> 00:04:15,350
native UI communicates with the packager

00:04:13,459 --> 00:04:17,209
which is essentially at this point a

00:04:15,350 --> 00:04:19,880
WebSocket server that's relaying

00:04:17,209 --> 00:04:22,400
messages back and forth between the

00:04:19,880 --> 00:04:25,789
native UI and chrome where all of your

00:04:22,400 --> 00:04:27,420
javascript is running then as you're

00:04:25,789 --> 00:04:29,800
debugging

00:04:27,420 --> 00:04:32,770
communication happens in between chrome

00:04:29,800 --> 00:04:35,170
and the packager finally to kind of

00:04:32,770 --> 00:04:36,880
output any of the kind of resulting

00:04:35,170 --> 00:04:39,820
changes that you make during debug

00:04:36,880 --> 00:04:42,010
debugging back out to the native UI so

00:04:39,820 --> 00:04:44,080
we've essentially removed the JSC

00:04:42,010 --> 00:04:46,120
entirely from the equation by doing this

00:04:44,080 --> 00:04:48,940
little magic trick where we move that

00:04:46,120 --> 00:04:52,030
bundle from one location to another now

00:04:48,940 --> 00:04:53,800
a cool thing is available to us here the

00:04:52,030 --> 00:04:55,540
thing is is that Chrome's not the only

00:04:53,800 --> 00:04:58,330
thing in the world that can actually run

00:04:55,540 --> 00:05:01,030
JavaScript a node also does a fantastic

00:04:58,330 --> 00:05:04,570
job of running JavaScript right and so

00:05:01,030 --> 00:05:06,820
this is actually what we do inside of vs

00:05:04,570 --> 00:05:09,280
code when we are establishing a debug

00:05:06,820 --> 00:05:11,560
session rather than run JavaScript in

00:05:09,280 --> 00:05:16,080
chrome instead we choose to run it in

00:05:11,560 --> 00:05:16,080
node so real kind of quick exit here

00:05:16,650 --> 00:05:23,350
I'll head on over to vs code here where

00:05:21,370 --> 00:05:25,870
I've got a debug session already set up

00:05:23,350 --> 00:05:29,230
and a couple of things that I want to

00:05:25,870 --> 00:05:32,080
point out here Oh see Liam get this open

00:05:29,230 --> 00:05:34,590
here we've already started up the react

00:05:32,080 --> 00:05:36,790
packager right here it started up

00:05:34,590 --> 00:05:40,660
apparently my computer wants my password

00:05:36,790 --> 00:05:43,660
nobody look alright so we've already

00:05:40,660 --> 00:05:46,180
started up the packager and here over in

00:05:43,660 --> 00:05:48,910
our simulator we've got an instance of a

00:05:46,180 --> 00:05:50,470
super super simple react application up

00:05:48,910 --> 00:05:54,190
and running just a with a quick little

00:05:50,470 --> 00:05:55,750
timer and from here all of my javascript

00:05:54,190 --> 00:05:58,030
is running a note in the background and

00:05:55,750 --> 00:06:00,910
you'll see that i'll see if i can get

00:05:58,030 --> 00:06:04,630
this guy down I've got a breakpoint set

00:06:00,910 --> 00:06:07,570
right here and if I come over here and

00:06:04,630 --> 00:06:10,990
hit add I'll instantly hit that break

00:06:07,570 --> 00:06:13,060
point so remember hear the magic trick

00:06:10,990 --> 00:06:14,800
that's happening is that javascript is

00:06:13,060 --> 00:06:17,410
not running in my simulator it's not

00:06:14,800 --> 00:06:19,510
running on the jse at all it's running a

00:06:17,410 --> 00:06:22,000
node that's going to be really important

00:06:19,510 --> 00:06:24,970
as we kind of start piling on the

00:06:22,000 --> 00:06:28,840
complexity here right okay go ahead on

00:06:24,970 --> 00:06:36,180
back to our deck here keep going through

00:06:28,840 --> 00:06:36,180
this all right

00:06:37,520 --> 00:06:48,349
those emotions there we go node alright

00:06:44,539 --> 00:06:50,900
so you may be asking yourself we can

00:06:48,349 --> 00:06:54,949
perform this magic trick that moves that

00:06:50,900 --> 00:06:57,289
bundle from the JSC into Chrome or into

00:06:54,949 --> 00:06:58,729
node is that bundle portable yes of

00:06:57,289 --> 00:07:01,580
course it is we can move it in all sorts

00:06:58,729 --> 00:07:03,770
of different places in fact what are the

00:07:01,580 --> 00:07:06,470
big ones here I bet it could run in the

00:07:03,770 --> 00:07:08,449
cloud in fact yes this is exactly what

00:07:06,470 --> 00:07:11,180
code push does what it essentially does

00:07:08,449 --> 00:07:14,000
is it takes that bundle and moves it out

00:07:11,180 --> 00:07:17,229
of the jse or everywhere and it kind of

00:07:14,000 --> 00:07:20,449
temporarily stores it up in the cloud so

00:07:17,229 --> 00:07:22,520
instead of just having a bundle which is

00:07:20,449 --> 00:07:24,409
there statically packaged with our app

00:07:22,520 --> 00:07:26,509
initially what it's going to do is it's

00:07:24,409 --> 00:07:29,180
going to move those bundles from the

00:07:26,509 --> 00:07:32,000
cloud whenever it finds a new version an

00:07:29,180 --> 00:07:33,860
updated version and bring them down into

00:07:32,000 --> 00:07:36,440
the JSC and now all of a sudden you've

00:07:33,860 --> 00:07:38,569
got a new updated app this is how code

00:07:36,440 --> 00:07:41,659
push is operated for the last year or so

00:07:38,569 --> 00:07:43,729
that it's been available what does that

00:07:41,659 --> 00:07:46,460
give you well there's several different

00:07:43,729 --> 00:07:49,759
benefits here namely you get to publish

00:07:46,460 --> 00:07:51,740
your apps faster resulting in fewer

00:07:49,759 --> 00:07:53,990
complaints from your customers because

00:07:51,740 --> 00:07:56,479
in the end you get to fix those bugs

00:07:53,990 --> 00:07:59,120
when they show up you get to deploy

00:07:56,479 --> 00:08:01,729
updates to your app as needed on demand

00:07:59,120 --> 00:08:03,380
and you can incrementally roll out new

00:08:01,729 --> 00:08:06,710
features so you're delivering value to

00:08:03,380 --> 00:08:09,259
your customers more often so this is a

00:08:06,710 --> 00:08:10,669
tremendous benefit compared to native

00:08:09,259 --> 00:08:13,190
applications where you've got to go

00:08:10,669 --> 00:08:15,949
through the native app store every time

00:08:13,190 --> 00:08:21,020
you want to deliver new new features new

00:08:15,949 --> 00:08:23,810
bug fixes and updated code but is there

00:08:21,020 --> 00:08:26,090
a problem here well like clearly there

00:08:23,810 --> 00:08:27,919
is a problem here so we talked a little

00:08:26,090 --> 00:08:30,080
bit earlier about you know kind of

00:08:27,919 --> 00:08:32,390
debugging and and kind of walking

00:08:30,080 --> 00:08:35,779
through our code the thing is is that

00:08:32,390 --> 00:08:38,899
every time we push out a new code push

00:08:35,779 --> 00:08:42,529
deployment we're delivering new source

00:08:38,899 --> 00:08:47,000
code and that bundle right there that

00:08:42,529 --> 00:08:49,670
bundle it's minified its inscrutable it

00:08:47,000 --> 00:08:50,779
is completely unreadable and when it

00:08:49,670 --> 00:08:53,360
comes to stack

00:08:50,779 --> 00:08:55,999
races because that guy it's it's just

00:08:53,360 --> 00:08:58,189
compiled code right and so anytime you

00:08:55,999 --> 00:09:00,439
get an error you don't have the same

00:08:58,189 --> 00:09:02,149
kind of benefit that you have with

00:09:00,439 --> 00:09:03,980
something like crashlytics or hockey app

00:09:02,149 --> 00:09:06,079
where you've got a symbols file that it

00:09:03,980 --> 00:09:08,470
can decode that for you what we need is

00:09:06,079 --> 00:09:12,259
some way to symbolic eight our

00:09:08,470 --> 00:09:14,959
JavaScript bundle well fortunately

00:09:12,259 --> 00:09:16,879
there's an answer for that this uh this

00:09:14,959 --> 00:09:19,249
kind of diagram that I gave you earlier

00:09:16,879 --> 00:09:20,689
was maybe only half of the truth when we

00:09:19,249 --> 00:09:22,430
moved all of those files into the

00:09:20,689 --> 00:09:24,889
packager and it spit out our bundle

00:09:22,430 --> 00:09:27,709
there's another file that it gave us it

00:09:24,889 --> 00:09:30,470
also gave us these source maps right

00:09:27,709 --> 00:09:34,100
this is a familiar concept too many of

00:09:30,470 --> 00:09:36,860
us now source maps they're basically

00:09:34,100 --> 00:09:40,279
your secret decoder ring that gives you

00:09:36,860 --> 00:09:42,860
a quick mapping in between your compiled

00:09:40,279 --> 00:09:45,499
code compiled and minified code and your

00:09:42,860 --> 00:09:46,730
original source code it's they're

00:09:45,499 --> 00:09:50,089
written in this kind of format that's

00:09:46,730 --> 00:09:52,189
called base64 vlq stands for variable

00:09:50,089 --> 00:09:53,839
length quality and essentially what it

00:09:52,189 --> 00:09:57,529
does is it makes them mapping between

00:09:53,839 --> 00:10:00,769
these four digit characters the caaa

00:09:57,529 --> 00:10:02,750
here right your source file is filled

00:10:00,769 --> 00:10:07,990
with all of these things in each one of

00:10:02,750 --> 00:10:11,959
them maps to a number and those in turn

00:10:07,990 --> 00:10:13,370
map to a location in your source code so

00:10:11,959 --> 00:10:15,920
that first number that's the minified

00:10:13,370 --> 00:10:19,250
column number second one that's the

00:10:15,920 --> 00:10:22,459
original file name third one that's the

00:10:19,250 --> 00:10:24,350
original file row and last one is of

00:10:22,459 --> 00:10:26,360
course the original file column a

00:10:24,350 --> 00:10:28,040
interesting kind of point of interest

00:10:26,360 --> 00:10:30,199
here you'll notice that there's only a

00:10:28,040 --> 00:10:32,420
min ified column number there there's no

00:10:30,199 --> 00:10:34,519
minified row number the way that it

00:10:32,420 --> 00:10:38,120
actually works is the row is built off

00:10:34,519 --> 00:10:39,589
of the last comma that was in the file

00:10:38,120 --> 00:10:42,800
so all you've got is one long

00:10:39,589 --> 00:10:45,290
concatenated single line row and each

00:10:42,800 --> 00:10:49,040
one is built off of the one that comes

00:10:45,290 --> 00:10:52,360
before it right so in fact we can take a

00:10:49,040 --> 00:10:57,050
look at that let's scoot on over here to

00:10:52,360 --> 00:11:01,240
Chrome do we see this guy nope we're

00:10:57,050 --> 00:11:01,240
going to exit out of this mode

00:11:06,450 --> 00:11:13,870
boom so you see here I've actually got a

00:11:10,420 --> 00:11:18,190
source map file load it in the chrome

00:11:13,870 --> 00:11:19,780
and you'll see see if I can grab one of

00:11:18,190 --> 00:11:22,420
these you'll see all of these little

00:11:19,780 --> 00:11:25,420
four five six digit numbers so all of

00:11:22,420 --> 00:11:28,600
those are included in your bundle and

00:11:25,420 --> 00:11:31,330
ultimately those map back to a source

00:11:28,600 --> 00:11:33,250
map which then Maps back to your

00:11:31,330 --> 00:11:37,630
original file these are the key that you

00:11:33,250 --> 00:11:39,190
need in order to connect that coat that

00:11:37,630 --> 00:11:41,020
error that bug that came in your

00:11:39,190 --> 00:11:43,270
deployed app back to your original

00:11:41,020 --> 00:11:46,890
source code so that you can figure out

00:11:43,270 --> 00:11:49,030
what went wrong in your deployed code so

00:11:46,890 --> 00:11:51,450
how do we make sense of this what do we

00:11:49,030 --> 00:11:51,450
do with this

00:11:58,339 --> 00:12:05,749
what we want to do here is we want to

00:12:01,040 --> 00:12:08,509
take that original source map and we

00:12:05,749 --> 00:12:11,509
want to get it up into the cloud with

00:12:08,509 --> 00:12:14,360
all of our code push deployments right

00:12:11,509 --> 00:12:16,910
so if we are able to pair that source

00:12:14,360 --> 00:12:19,550
map with a code push bundle that's in

00:12:16,910 --> 00:12:22,009
the cloud and that eventually then gets

00:12:19,550 --> 00:12:24,860
deployed out to all of your customers

00:12:22,009 --> 00:12:27,769
all of your end users we now have the

00:12:24,860 --> 00:12:30,559
key that we need to decode all of the

00:12:27,769 --> 00:12:32,809
errors that we see in our crashlytics or

00:12:30,559 --> 00:12:35,540
hockey up or whatever our kind of

00:12:32,809 --> 00:12:37,279
reporting system is this is really

00:12:35,540 --> 00:12:40,339
important so let's let's actually see

00:12:37,279 --> 00:12:42,709
how this works in practice I've got two

00:12:40,339 --> 00:12:46,069
things working against me today one is

00:12:42,709 --> 00:12:48,050
that I'm jet-lagged to all hell and two

00:12:46,069 --> 00:12:50,240
is that this depends upon an internet

00:12:48,050 --> 00:12:54,889
connection so let's see how this works

00:12:50,240 --> 00:12:57,319
out shall we alright so the first thing

00:12:54,889 --> 00:13:00,829
that needs to happen is out of Xcode we

00:12:57,319 --> 00:13:02,059
need a release version of our bill so

00:13:00,829 --> 00:13:05,120
it's going to do a quick little build

00:13:02,059 --> 00:13:06,949
right there that is eventually going to

00:13:05,120 --> 00:13:09,920
replace the applet is right there so

00:13:06,949 --> 00:13:22,540
while that is building I'm going to come

00:13:09,920 --> 00:13:22,540
over here and let's find terminal window

00:13:24,309 --> 00:13:37,649
done boom we're right here main Dutch a

00:13:33,319 --> 00:13:39,389
yes I'm going to start

00:13:37,649 --> 00:13:43,499
King some changes to this but not save

00:13:39,389 --> 00:13:45,660
it okay good so we got that guy up and I

00:13:43,499 --> 00:13:47,579
am going to just to prove that we've

00:13:45,660 --> 00:13:49,199
actually pushed a new code push version

00:13:47,579 --> 00:14:00,119
up i'm going to change the background

00:13:49,199 --> 00:14:07,800
color of this guy all right so now we're

00:14:00,119 --> 00:14:11,660
going to push a deployment this is where

00:14:07,800 --> 00:14:14,670
the internet gods have to be kind to us

00:14:11,660 --> 00:14:17,720
we are going to not only need to push

00:14:14,670 --> 00:14:20,249
that guy up but also download it again

00:14:17,720 --> 00:14:22,910
so again what I've done here is I've

00:14:20,249 --> 00:14:26,519
taken a nap I've deployed it to my

00:14:22,910 --> 00:14:28,649
simulator then I'm making some

00:14:26,519 --> 00:14:31,470
modifications in my editor pushing all

00:14:28,649 --> 00:14:32,790
of that up to the cloud and then what

00:14:31,470 --> 00:14:35,189
I'm going to do is I'm going to suck

00:14:32,790 --> 00:14:38,040
down the new version into my simulator

00:14:35,189 --> 00:14:39,839
so now the code that is in my simulator

00:14:38,040 --> 00:14:43,740
is no longer the same code that I

00:14:39,839 --> 00:14:46,939
initially deployed with make sense all

00:14:43,740 --> 00:14:50,370
right cool it looks like it got up there

00:14:46,939 --> 00:14:55,920
let's try to pull down the new version

00:14:50,370 --> 00:15:03,959
oh good we've got a new version here

00:14:55,920 --> 00:15:06,300
we're going to install it well that is

00:15:03,959 --> 00:15:07,949
doing its thing okay good so we just

00:15:06,300 --> 00:15:10,170
changed color so we can see that we've

00:15:07,949 --> 00:15:14,429
got new code in there now the trick is

00:15:10,170 --> 00:15:16,649
that we need to find out what the what

00:15:14,429 --> 00:15:18,420
the source map is for that when we get a

00:15:16,649 --> 00:15:20,939
crash so here's what I'm going to do

00:15:18,420 --> 00:15:22,559
here these are all the steps you'd have

00:15:20,939 --> 00:15:25,759
to manually take in order to do this

00:15:22,559 --> 00:15:25,759
yourself i'm going to start a log

00:15:29,899 --> 00:15:36,329
alright cool so we got a log running

00:15:32,009 --> 00:15:43,049
here i'm going to force a crash on this

00:15:36,329 --> 00:15:45,260
guy yes thank you x good the important

00:15:43,049 --> 00:15:50,660
thing that came out of that crash

00:15:45,260 --> 00:15:52,910
is this right here what you're looking

00:15:50,660 --> 00:15:56,120
at here is the stack trace the

00:15:52,910 --> 00:15:59,360
javascript bundled stack trace for that

00:15:56,120 --> 00:16:03,920
error so i'm going to take that guy over

00:15:59,360 --> 00:16:08,680
into my project and i'm going to save it

00:16:03,920 --> 00:16:08,680
in a JSON file called stack trace JSON

00:16:12,220 --> 00:16:21,370
we gotta do a little something here to

00:16:14,750 --> 00:16:29,870
make it json friendly ah that's all good

00:16:21,370 --> 00:16:32,240
replace all you guys tired of looking at

00:16:29,870 --> 00:16:35,120
code you want more cats and probably

00:16:32,240 --> 00:16:36,740
make more cats at them alright so now

00:16:35,120 --> 00:16:39,110
we've got the stack trace but we also

00:16:36,740 --> 00:16:41,150
need that original source map that was

00:16:39,110 --> 00:16:44,240
in there right we need that that bundle

00:16:41,150 --> 00:16:47,750
so we're actually going to grab that

00:16:44,240 --> 00:16:50,060
here from chrome this is the same bundle

00:16:47,750 --> 00:16:51,620
if you will that was deployed in that

00:16:50,060 --> 00:16:53,750
code push this is the exact same bundle

00:16:51,620 --> 00:16:56,980
that was uploaded to code push and is

00:16:53,750 --> 00:17:00,550
now living on my mission on my simulator

00:16:56,980 --> 00:17:04,970
this one takes a couple seconds to load

00:17:00,550 --> 00:17:08,990
buhl so now we've got the bundle we've

00:17:04,970 --> 00:17:12,620
got the stack trace for our for our

00:17:08,990 --> 00:17:27,490
crash i'm going to bring this guy back

00:17:12,620 --> 00:17:31,070
over here into oops wrong one into map

00:17:27,490 --> 00:17:33,170
save and now that I've got all the

00:17:31,070 --> 00:17:35,390
components I've got the stack trace I've

00:17:33,170 --> 00:17:39,530
got the original bundle I've got the the

00:17:35,390 --> 00:17:43,580
source map from here I can use my secret

00:17:39,530 --> 00:17:45,860
decoder ring which is this quick little

00:17:43,580 --> 00:17:49,370
file here that essentially goes back and

00:17:45,860 --> 00:17:51,380
pairs up all of those base64 VL cubes

00:17:49,370 --> 00:17:55,340
against the source code and i'm going to

00:17:51,380 --> 00:17:59,900
run that as a node script so node map

00:17:55,340 --> 00:18:02,390
j/s and here we go here you'll see our

00:17:59,900 --> 00:18:04,400
stack trace for this guy this is telling

00:18:02,390 --> 00:18:08,120
us you know what happened at each line

00:18:04,400 --> 00:18:10,760
now it require 97 dot J yes there is an

00:18:08,120 --> 00:18:15,410
error on line 1 column 0 and so on down

00:18:10,760 --> 00:18:18,050
the line now that was a lot of work to

00:18:15,410 --> 00:18:22,070
find out what our error was if you

00:18:18,050 --> 00:18:24,140
actually wanted to kind of get all the

00:18:22,070 --> 00:18:27,590
stack traces via Google Analytics or

00:18:24,140 --> 00:18:30,260
whatever and you got those those stack

00:18:27,590 --> 00:18:33,020
traces you would have to have saved the

00:18:30,260 --> 00:18:35,030
source map for all of your deployments

00:18:33,020 --> 00:18:36,650
all of your files this is not a problem

00:18:35,030 --> 00:18:39,260
that's unique to code push its unique to

00:18:36,650 --> 00:18:41,750
any react native app to actually do the

00:18:39,260 --> 00:18:44,330
debugging to figure out where the errors

00:18:41,750 --> 00:18:47,210
are in production is a huge pain in the

00:18:44,330 --> 00:18:51,440
derriere pardon my french is it bad

00:18:47,210 --> 00:18:55,630
French so not even a pity laugh no all

00:18:51,440 --> 00:18:59,330
right cool so that's a lot of work

00:18:55,630 --> 00:19:04,210
that's a lot of work how can we sidestep

00:18:59,330 --> 00:19:04,210
that how can we make that easier well

00:19:04,660 --> 00:19:16,580
this is where I want to introduce you

00:19:09,770 --> 00:19:18,670
guys to code push the next so code push

00:19:16,580 --> 00:19:21,530
has been around for about a year now and

00:19:18,670 --> 00:19:23,750
what we've worked very hard to kind of

00:19:21,530 --> 00:19:27,020
make it more reliable make it more

00:19:23,750 --> 00:19:29,000
stable make kind of the internet or make

00:19:27,020 --> 00:19:30,880
the connection speeds faster throughout

00:19:29,000 --> 00:19:33,200
the globe with more data centers in

00:19:30,880 --> 00:19:37,850
terms of future growth there hasn't been

00:19:33,200 --> 00:19:40,130
quite as much later on this year in 2016

00:19:37,850 --> 00:19:41,990
in the first part of 2017 we're going to

00:19:40,130 --> 00:19:43,820
be introducing the next version of code

00:19:41,990 --> 00:19:47,150
push and for this we're actually

00:19:43,820 --> 00:19:49,370
marrying it up with hockey app hockey

00:19:47,150 --> 00:19:51,830
app many of you may already know and use

00:19:49,370 --> 00:19:53,960
it essentially provides not only beta

00:19:51,830 --> 00:19:56,180
distribution for your app but also crash

00:19:53,960 --> 00:19:58,370
reporting but historically speaking it's

00:19:56,180 --> 00:20:02,920
only provided that crash reporting for

00:19:58,370 --> 00:20:05,090
native iOS and native Android apps so

00:20:02,920 --> 00:20:08,840
later on this year we're going to be

00:20:05,090 --> 00:20:10,520
providing the next evolution of code

00:20:08,840 --> 00:20:11,330
push and Hawk yep which essentially

00:20:10,520 --> 00:20:13,610
embed

00:20:11,330 --> 00:20:16,340
those source map files with all of your

00:20:13,610 --> 00:20:19,130
code push deployments so what you end up

00:20:16,340 --> 00:20:22,010
getting is not just kind of on demand

00:20:19,130 --> 00:20:24,350
deployment of your code anytime anywhere

00:20:22,010 --> 00:20:25,850
anyhow you want to but you also get an

00:20:24,350 --> 00:20:28,340
error reporting system that helps you

00:20:25,850 --> 00:20:31,610
better understand what's happening to

00:20:28,340 --> 00:20:33,860
your app in production how you can

00:20:31,610 --> 00:20:37,190
actually kind of tie those deployments

00:20:33,860 --> 00:20:39,140
back to bugs back to users on devices

00:20:37,190 --> 00:20:42,710
and hopefully improve the overall

00:20:39,140 --> 00:20:45,530
quality of your app so today I'm

00:20:42,710 --> 00:20:49,550
announcing a private beta of code push V

00:20:45,530 --> 00:20:53,750
next I encourage all of you to apply to

00:20:49,550 --> 00:20:58,490
it there's a URL right here AKA ms whack

00:20:53,750 --> 00:21:01,760
code push v next please visit sign up i

00:20:58,490 --> 00:21:03,800
would love to have you and to use it to

00:21:01,760 --> 00:21:05,960
share with us your stories and to be

00:21:03,800 --> 00:21:07,940
among some of the very first people to

00:21:05,960 --> 00:21:11,000
give us feedback on it so that when we

00:21:07,940 --> 00:21:13,940
bring it public it's as awesome as it

00:21:11,000 --> 00:21:15,650
possibly can be alright so that's all

00:21:13,940 --> 00:21:17,300
that I've got for you today in order to

00:21:15,650 --> 00:21:19,610
see the product yourself you'll have to

00:21:17,300 --> 00:21:22,690
sign up from here I would love to take

00:21:19,610 --> 00:21:22,690
questions and talk to you guys

00:21:31,810 --> 00:21:39,710
why do I use Mac hahahahaha I mean time

00:21:36,850 --> 00:21:43,520
945 votes that's impressive sweet

00:21:39,710 --> 00:21:46,190
knocking down uh so I use parallels on

00:21:43,520 --> 00:21:48,560
my mac i use Mac because I need to be

00:21:46,190 --> 00:21:51,770
able to build for iOS that's why I use

00:21:48,560 --> 00:21:53,960
him back so in fact those of you that

00:21:51,770 --> 00:21:55,970
want to I've got an entire blog post

00:21:53,960 --> 00:22:01,100
about it you were welcome to visit me at

00:21:55,970 --> 00:22:04,760
space cat rocks or ryan j celcom uh what

00:22:01,100 --> 00:22:08,150
does proxy mode equals on main so that's

00:22:04,760 --> 00:22:10,580
not a that's the I'll call that pseudo

00:22:08,150 --> 00:22:13,120
code that is not actually what is in the

00:22:10,580 --> 00:22:17,630
code what that really means is just that

00:22:13,120 --> 00:22:20,180
your react native app is running in kind

00:22:17,630 --> 00:22:22,790
of a virtual proxy mode that skips over

00:22:20,180 --> 00:22:25,850
the JSC and moves the bundle over to

00:22:22,790 --> 00:22:28,430
Chrome or node or whatever the kind of

00:22:25,850 --> 00:22:32,090
the running instance is of your node

00:22:28,430 --> 00:22:34,580
server um I love some window stickers

00:22:32,090 --> 00:22:37,610
for my mac do I have some didn't bring

00:22:34,580 --> 00:22:39,260
any window sticker sorry guys uh so will

00:22:37,610 --> 00:22:41,840
it work on the windows machine yes

00:22:39,260 --> 00:22:45,740
absolutely it's completely platform

00:22:41,840 --> 00:22:48,440
agnostic I know that I know that I'm

00:22:45,740 --> 00:22:51,110
running a Mac but both the CLI and the

00:22:48,440 --> 00:22:52,550
service itself will run on a mac how

00:22:51,110 --> 00:22:54,920
many applications written with react

00:22:52,550 --> 00:22:57,110
native Microsoft has in production I'm

00:22:54,920 --> 00:23:01,010
going to assume by this that what you

00:22:57,110 --> 00:23:05,720
mean is apps Microsoft apps that

00:23:01,010 --> 00:23:08,450
consumers use ah not many today today

00:23:05,720 --> 00:23:11,540
our focus is primarily on building tools

00:23:08,450 --> 00:23:14,750
to enable developers frankly you guys as

00:23:11,540 --> 00:23:17,840
a community are moving so fast so fast

00:23:14,750 --> 00:23:20,000
that it's hard to keep up and the

00:23:17,840 --> 00:23:22,100
stability of the platform isn't yet at a

00:23:20,000 --> 00:23:25,940
place where we think that we can put

00:23:22,100 --> 00:23:28,940
something like Skype or outlook on on

00:23:25,940 --> 00:23:30,320
react native it's our teams just aren't

00:23:28,940 --> 00:23:33,770
able to keep up with the stability of it

00:23:30,320 --> 00:23:36,290
in the pace of it I can tell you that

00:23:33,770 --> 00:23:38,210
there are a number of teams some of the

00:23:36,290 --> 00:23:40,100
names I've already mentioned that are

00:23:38,210 --> 00:23:40,340
starting to build with react native but

00:23:40,100 --> 00:23:43,490
they

00:23:40,340 --> 00:23:46,130
have their apps in production yet App

00:23:43,490 --> 00:23:47,630
Store approval process is okay with

00:23:46,130 --> 00:23:51,200
upgrading source code from the cloud

00:23:47,630 --> 00:23:54,200
whenever yes I've got another version of

00:23:51,200 --> 00:23:56,830
this deck that actually has a snippet

00:23:54,200 --> 00:24:00,350
from the Apple terms and conditions and

00:23:56,830 --> 00:24:02,330
they very explicitly allow I forget what

00:24:00,350 --> 00:24:04,400
they're they're phrase for it is but

00:24:02,330 --> 00:24:06,620
it's some unmanaged code i think is the

00:24:04,400 --> 00:24:09,110
phrase they use so any code that is not

00:24:06,620 --> 00:24:11,929
managed code can be updated dynamically

00:24:09,110 --> 00:24:16,429
fortunately any javascript whether it

00:24:11,929 --> 00:24:19,580
runs kind of then the JSC or in a web

00:24:16,429 --> 00:24:21,890
view or the like is all fair game and so

00:24:19,580 --> 00:24:23,899
code push is one hundred percent above

00:24:21,890 --> 00:24:25,789
board we have thousands of apps and

00:24:23,899 --> 00:24:28,820
deployment that are using code push

00:24:25,789 --> 00:24:29,779
today from developers like you in fact

00:24:28,820 --> 00:24:32,450
i'm sure if you turn to your neighbor

00:24:29,779 --> 00:24:34,220
some of them already have it does this

00:24:32,450 --> 00:24:37,279
architecture provide ability to remote

00:24:34,220 --> 00:24:41,600
debug the production app know what this

00:24:37,279 --> 00:24:45,200
allows is essentially host analysis of

00:24:41,600 --> 00:24:48,500
the app we do have a product that aims

00:24:45,200 --> 00:24:51,980
at production debugging it's from the

00:24:48,500 --> 00:24:56,120
guys over at glimpse a G I think it's GL

00:24:51,980 --> 00:25:00,830
I MPSC but that is aimed today at

00:24:56,120 --> 00:25:03,289
asp.net applications and not at react

00:25:00,830 --> 00:25:06,169
native applications there are I'm in

00:25:03,289 --> 00:25:07,789
talks right now with that team to kind

00:25:06,169 --> 00:25:09,590
of borrow some of their same concepts

00:25:07,789 --> 00:25:12,620
and move it over to react native within

00:25:09,590 --> 00:25:14,000
my team why do I use chroma not Internet

00:25:12,620 --> 00:25:17,270
Explorer because there is no internet

00:25:14,000 --> 00:25:21,289
explorer on a Mac really guys it is 2016

00:25:17,270 --> 00:25:23,350
I uh let's see here do I use typescript

00:25:21,289 --> 00:25:25,970
with react at Microsoft yes absolutely

00:25:23,350 --> 00:25:27,860
in fact some of the aforementioned teams

00:25:25,970 --> 00:25:30,140
that are building large-scale laps with

00:25:27,860 --> 00:25:33,320
react native are using typescript with

00:25:30,140 --> 00:25:35,120
it we are doing a lot of active

00:25:33,320 --> 00:25:36,950
development right now to improve the

00:25:35,120 --> 00:25:39,890
typescript experience with react native

00:25:36,950 --> 00:25:43,250
in fact my team just updated all of the

00:25:39,890 --> 00:25:45,169
react native Taipings that essentially

00:25:43,250 --> 00:25:47,120
provide kind of the better intellisense

00:25:45,169 --> 00:25:49,309
experience and better kind of in editor

00:25:47,120 --> 00:25:52,370
experience working with typescript and

00:25:49,309 --> 00:25:53,690
react native that was a one-time manual

00:25:52,370 --> 00:25:56,169
update that we did of all the

00:25:53,690 --> 00:25:58,220
things we are presently working on

00:25:56,169 --> 00:26:01,159
borrowing some code from the guys over

00:25:58,220 --> 00:26:03,980
at irelia to dynamically update the

00:26:01,159 --> 00:26:06,399
Taipings for react native using a tool

00:26:03,980 --> 00:26:08,840
that they built for their framework

00:26:06,399 --> 00:26:12,549
looks like a harsh debugging process do

00:26:08,840 --> 00:26:14,480
you have tools for that at Microsoft uh

00:26:12,549 --> 00:26:17,149
depends upon what you mean by harsh

00:26:14,480 --> 00:26:18,710
debugging process which part of it I'd

00:26:17,149 --> 00:26:20,600
like to point out that all of that

00:26:18,710 --> 00:26:22,279
middle part where I where I came up like

00:26:20,600 --> 00:26:25,009
showing how much of a pain in the

00:26:22,279 --> 00:26:27,200
derriere it was to kind of get to your

00:26:25,009 --> 00:26:28,549
source maps that's the problem that

00:26:27,200 --> 00:26:29,929
we're solving that's the problem we're

00:26:28,549 --> 00:26:32,509
trying to solve you should not have to

00:26:29,929 --> 00:26:35,090
do any of that copy and paste to connect

00:26:32,509 --> 00:26:37,580
your source file with your source map

00:26:35,090 --> 00:26:39,679
with your bundle all of that should be

00:26:37,580 --> 00:26:41,720
taken care of for you by the tools and

00:26:39,679 --> 00:26:45,769
this is what what we intend to deliver

00:26:41,720 --> 00:26:48,259
with code push be next uh what do I

00:26:45,769 --> 00:26:50,330
think about century so century is doing

00:26:48,259 --> 00:26:52,700
some cool stuff oh they're actually

00:26:50,330 --> 00:26:54,710
really thinking along the same lines as

00:26:52,700 --> 00:26:56,450
we are right now they had a release that

00:26:54,710 --> 00:26:59,600
came out only I don't know maybe about

00:26:56,450 --> 00:27:01,279
two weeks ago that starts to do some of

00:26:59,600 --> 00:27:03,649
the same stuff that we intend to release

00:27:01,279 --> 00:27:05,600
this later this year and it's in the

00:27:03,649 --> 00:27:09,200
private beta the difference is that

00:27:05,600 --> 00:27:12,289
today they do not have managed code

00:27:09,200 --> 00:27:15,440
stack traces and that is something that

00:27:12,289 --> 00:27:18,470
is available within ours uh does it work

00:27:15,440 --> 00:27:19,730
in Windows Phone uh you know what the

00:27:18,470 --> 00:27:22,070
number of people that are using Windows

00:27:19,730 --> 00:27:24,970
Phone is relatively small and so we have

00:27:22,070 --> 00:27:27,350
not yet made an effort to support it

00:27:24,970 --> 00:27:31,220
applause for that really that's kind of

00:27:27,350 --> 00:27:33,200
low that's low all right oh let's see

00:27:31,220 --> 00:27:34,490
here what's the current state of react

00:27:33,200 --> 00:27:38,000
native on universal Windows platform

00:27:34,490 --> 00:27:40,970
when is it ready for production so that

00:27:38,000 --> 00:27:43,340
that one's an excellent question so the

00:27:40,970 --> 00:27:45,649
community that that really stood up and

00:27:43,340 --> 00:27:48,409
contributed to the universal Windows

00:27:45,649 --> 00:27:50,240
platform on react native was a

00:27:48,409 --> 00:27:51,799
relatively small community all said and

00:27:50,240 --> 00:27:56,330
done the vast majority of the heavy

00:27:51,799 --> 00:27:58,039
lifting was done by about maybe six to

00:27:56,330 --> 00:27:59,529
ten developer something like that I

00:27:58,039 --> 00:28:02,990
think this is maybe even less than that

00:27:59,529 --> 00:28:04,820
so they are currently in a place where

00:28:02,990 --> 00:28:07,070
they are looking at other areas to

00:28:04,820 --> 00:28:09,889
invest and so for the universe

00:28:07,070 --> 00:28:11,000
Windows platform to evolve on react

00:28:09,889 --> 00:28:13,159
native it's going to really take

00:28:11,000 --> 00:28:15,860
community support from folks like you

00:28:13,159 --> 00:28:18,080
who want to see it we've got it to a

00:28:15,860 --> 00:28:21,169
place right now where it's fairly stable

00:28:18,080 --> 00:28:23,990
it's just not very complete and so if

00:28:21,169 --> 00:28:26,240
you want to expand that and you want to

00:28:23,990 --> 00:28:27,649
do more with Windows I encourage you

00:28:26,240 --> 00:28:29,750
guys to contribute we are actively

00:28:27,649 --> 00:28:32,090
accepting pull requests right this is

00:28:29,750 --> 00:28:34,159
our last question last question I better

00:28:32,090 --> 00:28:36,289
be a good one that all right so remote

00:28:34,159 --> 00:28:39,700
code execution how can I be sure that

00:28:36,289 --> 00:28:43,009
bundle from cloud is actually mine ah so

00:28:39,700 --> 00:28:46,639
there is an API key that is associated

00:28:43,009 --> 00:28:48,950
with every app the documentation for the

00:28:46,639 --> 00:28:50,980
security model is online i encourage you

00:28:48,950 --> 00:28:54,679
to go check it out at code push tools

00:28:50,980 --> 00:28:56,840
but long story short we've got a lot of

00:28:54,679 --> 00:29:00,139
customers who are very very security

00:28:56,840 --> 00:29:02,840
conscious about their apps in production

00:29:00,139 --> 00:29:05,960
and so this thing is locked down like a

00:29:02,840 --> 00:29:08,169
mofo so awesome right thank you guys so

00:29:05,960 --> 00:29:08,169

YouTube URL: https://www.youtube.com/watch?v=OmuOWbsQLmc


