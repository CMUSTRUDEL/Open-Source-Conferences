Title: ReactiveConf 2016 - Leland Richardson: Bridging the Gap: How to use React Native...
Publication date: 2016-11-24
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Leland Richardson: Bridging the Gap: How to use React Native in existing large native code bases

React Native does a lot out of the box, but also provides very powerful abstraction layers that can enable you to get React Native to work for your use case, even if it's not supported out of the box. The bridge, Native Modules, and Native Components are a big part of this. When integrating with large existing native code bases, this becomes more and more important.

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, itâ€™s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:05,029 --> 00:00:10,580
thanks for coming uh my name is Leland

00:00:07,790 --> 00:00:12,349
Richardson I work at Airbnb I work on

00:00:10,580 --> 00:00:16,970
react native I've been working on react

00:00:12,349 --> 00:00:18,470
native for about eight months now and if

00:00:16,970 --> 00:00:21,410
you've used that Airbnb after you've

00:00:18,470 --> 00:00:22,910
likely used some react native it's not

00:00:21,410 --> 00:00:26,449
completely built and react native only

00:00:22,910 --> 00:00:29,449
partly and the learnings that we found

00:00:26,449 --> 00:00:31,069
is that there's there's a high cost to

00:00:29,449 --> 00:00:34,010
integrating react native into an

00:00:31,069 --> 00:00:36,260
existing app but the payoff is really

00:00:34,010 --> 00:00:39,200
high so I'm gonna talk to you today

00:00:36,260 --> 00:00:42,650
about what what some of those learnings

00:00:39,200 --> 00:00:53,180
are maybe help you use react native in

00:00:42,650 --> 00:00:56,420
your app alright this this happened

00:00:53,180 --> 00:01:00,110
about two years ago recom react native

00:00:56,420 --> 00:01:01,640
was an Alex and that was a really

00:01:00,110 --> 00:01:05,329
exciting moment if you're anything like

00:01:01,640 --> 00:01:08,810
me maybe your reaction was something

00:01:05,329 --> 00:01:10,310
like this brag native you know felt sort

00:01:08,810 --> 00:01:15,050
of revolutionary I wanted to play with

00:01:10,310 --> 00:01:16,340
it right away and so I did and it was it

00:01:15,050 --> 00:01:18,760
was really great it was easy to get

00:01:16,340 --> 00:01:23,300
started right all I have to do is

00:01:18,760 --> 00:01:26,479
install the react native CLI and NPM or

00:01:23,300 --> 00:01:28,130
react native an it drive my new project

00:01:26,479 --> 00:01:30,320
and I'm off to the races right it sort

00:01:28,130 --> 00:01:34,670
of starts a template kind of like create

00:01:30,320 --> 00:01:38,090
react app if if you've heard of that but

00:01:34,670 --> 00:01:39,500
this actually this works great if you're

00:01:38,090 --> 00:01:41,510
starting fresh right you're starting

00:01:39,500 --> 00:01:43,460
with a new app but I can't really do

00:01:41,510 --> 00:01:47,510
this with like Airbnb

00:01:43,460 --> 00:01:51,229
app right I can't like CD into you know

00:01:47,510 --> 00:01:54,770
Airbnb app and and react native in it

00:01:51,229 --> 00:01:57,170
that that won't work so it's just the

00:01:54,770 --> 00:01:59,299
first if kind of one like many things

00:01:57,170 --> 00:02:03,920
that that are just not going to work out

00:01:59,299 --> 00:02:05,630
of the box for you so for the purpose of

00:02:03,920 --> 00:02:09,409
this talk I'm gonna talk about a

00:02:05,630 --> 00:02:11,930
brownfield versus greenfield so a

00:02:09,409 --> 00:02:13,730
greenfield app is kind of the react

00:02:11,930 --> 00:02:16,300
native an it approach right we're

00:02:13,730 --> 00:02:19,150
starting fresh we can use whatever

00:02:16,300 --> 00:02:20,710
there's no lines of code written it's

00:02:19,150 --> 00:02:22,690
probably going to be maybe completely

00:02:20,710 --> 00:02:26,350
and react native if you're if you're

00:02:22,690 --> 00:02:28,330
starting at this point like that and a

00:02:26,350 --> 00:02:30,940
brownfield app is like everything else

00:02:28,330 --> 00:02:34,480
right we're starting with an existing

00:02:30,940 --> 00:02:35,740
app and how does that work so we're

00:02:34,480 --> 00:02:38,020
going to talk about kind of all the

00:02:35,740 --> 00:02:43,000
things that that being a brownfield

00:02:38,020 --> 00:02:44,650
react native that means so for one it

00:02:43,000 --> 00:02:47,040
means you already have a lot of existing

00:02:44,650 --> 00:02:50,680
infrastructure right brownfield apps

00:02:47,040 --> 00:02:53,050
that they have things like localization

00:02:50,680 --> 00:02:56,380
frameworks already built in data

00:02:53,050 --> 00:03:00,760
fetching crash logging UI patterns

00:02:56,380 --> 00:03:03,250
navigation lots of global app state like

00:03:00,760 --> 00:03:05,140
maybe the current logged in user things

00:03:03,250 --> 00:03:06,730
like that a lot of stuff that relies on

00:03:05,140 --> 00:03:09,460
that and so you have to you have to get

00:03:06,730 --> 00:03:12,490
to that somehow there's a lot of

00:03:09,460 --> 00:03:14,440
existing code right you have presumably

00:03:12,490 --> 00:03:17,560
an app at this point so it's literally

00:03:14,440 --> 00:03:20,920
the entire app and you're just adding

00:03:17,560 --> 00:03:23,530
reg native on top of that so you have to

00:03:20,920 --> 00:03:26,530
work with that and then perhaps most

00:03:23,530 --> 00:03:29,890
importantly there may be existing native

00:03:26,530 --> 00:03:32,320
teams that that actually built the app

00:03:29,890 --> 00:03:35,800
right and there's a high probability

00:03:32,320 --> 00:03:38,050
that that these engineers maybe they

00:03:35,800 --> 00:03:41,320
don't they don't know or even don't like

00:03:38,050 --> 00:03:44,770
JavaScript or react there's a high

00:03:41,320 --> 00:03:46,450
probability that the engineers working

00:03:44,770 --> 00:03:49,000
on iOS have an entirely different

00:03:46,450 --> 00:03:51,820
workflow then the engineers working on

00:03:49,000 --> 00:03:55,270
Android right they've they've different

00:03:51,820 --> 00:03:58,440
meetings different teams different

00:03:55,270 --> 00:04:01,060
conventions all of these things and

00:03:58,440 --> 00:04:03,660
actually one of the more important

00:04:01,060 --> 00:04:07,090
differences is that that they probably

00:04:03,660 --> 00:04:10,510
exists in separate repositories right

00:04:07,090 --> 00:04:13,570
it's not typical for an app for an iOS

00:04:10,510 --> 00:04:16,780
and Android app to start off in sort of

00:04:13,570 --> 00:04:18,609
a mono repo structure right so that kind

00:04:16,780 --> 00:04:23,850
of brings us to our first really big

00:04:18,609 --> 00:04:25,930
problem the multi repo problem right so

00:04:23,850 --> 00:04:28,060
Airbnb when we started using react

00:04:25,930 --> 00:04:29,889
native we we had separate iOS and

00:04:28,060 --> 00:04:33,369
Android code

00:04:29,889 --> 00:04:37,299
most companies do and so they look

00:04:33,369 --> 00:04:39,369
something like this and um a big value

00:04:37,299 --> 00:04:40,689
proposition of react native is that you

00:04:39,369 --> 00:04:45,219
can write code and it will be

00:04:40,689 --> 00:04:47,649
out-of-the-box cross-platform so where

00:04:45,219 --> 00:04:51,159
do we write our react native code which

00:04:47,649 --> 00:04:53,199
repository do we choose the kind of only

00:04:51,159 --> 00:04:56,139
obvious choice remaining is is to

00:04:53,199 --> 00:05:00,729
actually create a new repository and put

00:04:56,139 --> 00:05:03,610
your react native code there right so

00:05:00,729 --> 00:05:05,949
when we have three repositories the the

00:05:03,610 --> 00:05:07,979
first two were already existing and they

00:05:05,949 --> 00:05:11,079
probably have like kind of an existing

00:05:07,979 --> 00:05:13,300
continuous integration set up right

00:05:11,079 --> 00:05:16,449
you've got build scripts you've got unit

00:05:13,300 --> 00:05:18,639
tests and integration tests all these

00:05:16,449 --> 00:05:21,999
things and and now all of a sudden we're

00:05:18,639 --> 00:05:24,689
writing application code in an entirely

00:05:21,999 --> 00:05:27,489
separate repo and we have to figure out

00:05:24,689 --> 00:05:29,699
if we broke something right we have to

00:05:27,489 --> 00:05:32,759
figure out if our code actually worked

00:05:29,699 --> 00:05:36,339
and so how did how does this workflow

00:05:32,759 --> 00:05:40,899
like work how do we how do we make this

00:05:36,339 --> 00:05:43,419
be like a safe thing the the main thing

00:05:40,899 --> 00:05:45,249
in here is that we're we're maybe only

00:05:43,419 --> 00:05:47,619
evaluating react native at this point

00:05:45,249 --> 00:05:49,479
right like maybe not everyone sold on

00:05:47,619 --> 00:05:53,860
the idea and so we want to try it out

00:05:49,479 --> 00:05:57,429
and we can't we can't get it's

00:05:53,860 --> 00:05:58,869
unreasonable to ask for us to merge the

00:05:57,429 --> 00:06:00,639
repos together just to try out a new

00:05:58,869 --> 00:06:05,079
technology that's it's kind of a

00:06:00,639 --> 00:06:07,089
ridiculous proposition so we're going

00:06:05,079 --> 00:06:10,779
down this kind of more difficult path

00:06:07,089 --> 00:06:13,509
but but some way that will work so when

00:06:10,779 --> 00:06:16,599
we're writing when we're writing code we

00:06:13,509 --> 00:06:18,639
put up a PR for our react native you

00:06:16,599 --> 00:06:23,499
know we change change some JavaScript

00:06:18,639 --> 00:06:26,050
file it's a small diff we're ready to go

00:06:23,499 --> 00:06:26,709
we want to merge it in the master so we

00:06:26,050 --> 00:06:30,300
go ahead

00:06:26,709 --> 00:06:34,179
version in the master and at this point

00:06:30,300 --> 00:06:37,509
we're gonna start running our new repos

00:06:34,179 --> 00:06:40,889
CI script and and this is actually where

00:06:37,509 --> 00:06:40,889
it gets tricky and kind of involved

00:06:41,409 --> 00:06:48,590
we're gonna do a couple things here and

00:06:43,759 --> 00:06:50,360
in this in this build script first thing

00:06:48,590 --> 00:06:53,229
we're gonna do we're gonna start we're

00:06:50,360 --> 00:06:56,240
gonna clone the iOS and the Android repo

00:06:53,229 --> 00:06:57,229
locally on the CI server right we're

00:06:56,240 --> 00:07:00,800
going to put them in some temporary

00:06:57,229 --> 00:07:04,249
directory and then we're gonna build the

00:07:00,800 --> 00:07:06,289
the react native code and if we have any

00:07:04,249 --> 00:07:07,580
sort of JavaScript unit tests or

00:07:06,289 --> 00:07:12,409
anything like that we'll go ahead and

00:07:07,580 --> 00:07:14,029
run those maybe some linting and at that

00:07:12,409 --> 00:07:16,400
point if everything looks good we have a

00:07:14,029 --> 00:07:19,729
new sort of JavaScript bundle that we

00:07:16,400 --> 00:07:21,590
can use and we're gonna shove that into

00:07:19,729 --> 00:07:24,529
the iOS and Android repos that we cloned

00:07:21,590 --> 00:07:28,009
locally and we're gonna run all of those

00:07:24,529 --> 00:07:30,740
tests and that's gonna take a long time

00:07:28,009 --> 00:07:33,680
but it'll be worth it you you got to get

00:07:30,740 --> 00:07:35,870
that green building right and so once

00:07:33,680 --> 00:07:41,150
that build turns green we're actually

00:07:35,870 --> 00:07:46,099
gonna commit and push you to master of

00:07:41,150 --> 00:07:50,089
both iOS and Android repos now you might

00:07:46,099 --> 00:07:54,050
be looking at us and saying whoa are we

00:07:50,089 --> 00:07:56,569
really gonna do all that it it's kind of

00:07:54,050 --> 00:07:59,629
a it's a scary situation but it's sort

00:07:56,569 --> 00:08:01,879
of one of the things that I found that

00:07:59,629 --> 00:08:05,360
has the the path of least friction right

00:08:01,879 --> 00:08:07,969
we we want to make sure that we can we

00:08:05,360 --> 00:08:10,520
can integrate with those existing native

00:08:07,969 --> 00:08:14,930
teams or those existing code bases and

00:08:10,520 --> 00:08:17,839
start trying out react native and we we

00:08:14,930 --> 00:08:21,439
don't need to remember to build files we

00:08:17,839 --> 00:08:23,839
don't need to like do that when we merge

00:08:21,439 --> 00:08:27,949
our PR or anything like that there's

00:08:23,839 --> 00:08:30,289
less chance of conflicts from multiple

00:08:27,949 --> 00:08:33,800
PRS getting getting merged and having

00:08:30,289 --> 00:08:36,860
having the build files kind of clobber

00:08:33,800 --> 00:08:39,380
each other and then perhaps the most

00:08:36,860 --> 00:08:41,360
important thing is it doesn't change the

00:08:39,380 --> 00:08:44,300
workflow of anyone else working on on

00:08:41,360 --> 00:08:46,540
the native repos so iOS and Android they

00:08:44,300 --> 00:08:49,170
don't they don't have to install NPM

00:08:46,540 --> 00:08:51,480
they don't have to run the

00:08:49,170 --> 00:08:52,950
packager when they run the app there

00:08:51,480 --> 00:08:56,790
they're running the app kind of similar

00:08:52,950 --> 00:09:00,000
to how how a user would run it it's just

00:08:56,790 --> 00:09:02,399
gonna use the local build file so those

00:09:00,000 --> 00:09:06,779
are kind of the benefits there's a lot

00:09:02,399 --> 00:09:08,670
of issues though so there's a big time

00:09:06,779 --> 00:09:11,160
delay between merging something in the

00:09:08,670 --> 00:09:13,949
master of the react native repo and and

00:09:11,160 --> 00:09:17,579
actually getting the build artifact into

00:09:13,949 --> 00:09:20,790
the iOS and Android repos so so that

00:09:17,579 --> 00:09:23,639
produces sort of some inconsistencies we

00:09:20,790 --> 00:09:24,870
lose atomicity right so if we have if we

00:09:23,639 --> 00:09:28,769
have a change that that's maybe

00:09:24,870 --> 00:09:31,010
dependent on another change that needs

00:09:28,769 --> 00:09:33,180
to happen in the iOS or Android repo

00:09:31,010 --> 00:09:35,220
then at that point it's kind of like a

00:09:33,180 --> 00:09:36,750
race condition we have to figure out how

00:09:35,220 --> 00:09:40,529
to merge them together and that can get

00:09:36,750 --> 00:09:43,380
really nasty we also all of the native

00:09:40,529 --> 00:09:45,209
dependencies that that we're using for

00:09:43,380 --> 00:09:47,279
react native any any third-party

00:09:45,209 --> 00:09:48,300
libraries or anything like that we

00:09:47,279 --> 00:09:51,839
actually have to have them in three

00:09:48,300 --> 00:09:55,470
places now which can be a pain with with

00:09:51,839 --> 00:09:57,600
upgrading and things like that and then

00:09:55,470 --> 00:10:00,630
our actual build files are checked in

00:09:57,600 --> 00:10:02,300
the version control and you know we

00:10:00,630 --> 00:10:04,709
don't you don't really like to do that

00:10:02,300 --> 00:10:07,110
and then also a high frequency of

00:10:04,709 --> 00:10:11,490
commits can result in in a lot of big

00:10:07,110 --> 00:10:13,470
delays and that this makes

00:10:11,490 --> 00:10:14,910
cherry-picking kind of a really

00:10:13,470 --> 00:10:17,160
difficult process if you need to

00:10:14,910 --> 00:10:20,670
cherry-pick something into a branch you

00:10:17,160 --> 00:10:22,680
have to kind of do that manually because

00:10:20,670 --> 00:10:25,920
you need to actually run run the build

00:10:22,680 --> 00:10:29,010
script but that all sounds pretty close

00:10:25,920 --> 00:10:31,829
to awful and so eventually if you try

00:10:29,010 --> 00:10:35,069
react native and and you're convinced

00:10:31,829 --> 00:10:36,829
that it's a good way forward for your

00:10:35,069 --> 00:10:42,300
team then then you can do it we didn't

00:10:36,829 --> 00:10:46,050
invent ala date into mono repo and mono

00:10:42,300 --> 00:10:48,360
reboots have a lot of advantages so we

00:10:46,050 --> 00:10:51,630
get that atomicity right we can we can

00:10:48,360 --> 00:10:53,339
make PRS and changes that that affect

00:10:51,630 --> 00:10:56,220
all three code bases at the same time

00:10:53,339 --> 00:10:58,680
and have dependencies and be able to

00:10:56,220 --> 00:11:00,829
make those breaking changes without much

00:10:58,680 --> 00:11:00,829
effort

00:11:01,100 --> 00:11:05,300
there's one source of truth for which

00:11:02,780 --> 00:11:07,160
native dependencies you're on so we just

00:11:05,300 --> 00:11:11,620
need to install those third-party

00:11:07,160 --> 00:11:15,860
libraries once and all of the actual

00:11:11,620 --> 00:11:18,200
react native bundle files those are all

00:11:15,860 --> 00:11:20,180
built at Build time which which makes

00:11:18,200 --> 00:11:23,420
sense so that just becomes part of your

00:11:20,180 --> 00:11:26,810
your build pipeline and you never have

00:11:23,420 --> 00:11:31,460
any issues with with inconsistencies or

00:11:26,810 --> 00:11:33,740
merge conflicts so I guess it's worth

00:11:31,460 --> 00:11:35,240
pointing out that the one potential

00:11:33,740 --> 00:11:38,390
issue with the mono repo approach is

00:11:35,240 --> 00:11:40,310
that there's a lot of additional strain

00:11:38,390 --> 00:11:42,410
that's placed on your infrastructure at

00:11:40,310 --> 00:11:44,270
that point because you have a much

00:11:42,410 --> 00:11:46,160
larger repo a lot more people committing

00:11:44,270 --> 00:11:48,350
to the same repo

00:11:46,160 --> 00:11:50,240
but that's worth mentioning but this is

00:11:48,350 --> 00:11:56,780
definitely definitely the best way

00:11:50,240 --> 00:11:58,790
forward so the next big problem that you

00:11:56,780 --> 00:12:01,580
might run into especially in in a

00:11:58,790 --> 00:12:05,060
brownfield app I'll call the navigation

00:12:01,580 --> 00:12:09,140
problem navigation is has proven to be a

00:12:05,060 --> 00:12:11,900
difficult thing for react native if

00:12:09,140 --> 00:12:14,840
we're going out we're looking for what

00:12:11,900 --> 00:12:17,780
navigation library works best for us it

00:12:14,840 --> 00:12:20,600
can be kind of daunting all right so the

00:12:17,780 --> 00:12:25,340
react native core itself has has three

00:12:20,600 --> 00:12:27,890
sort of options here and the recommended

00:12:25,340 --> 00:12:32,360
one is got experimental attach to end of

00:12:27,890 --> 00:12:35,120
it then maybe you go and look for

00:12:32,360 --> 00:12:38,630
third-party solutions and there's

00:12:35,120 --> 00:12:40,880
there's a number of them a lot of them

00:12:38,630 --> 00:12:42,500
maybe just extend the built-in ones a

00:12:40,880 --> 00:12:44,650
lot of them are their entire own

00:12:42,500 --> 00:12:50,810
solutions some of them are even Forks

00:12:44,650 --> 00:12:53,150
it's it's a lot to choose from and then

00:12:50,810 --> 00:12:56,450
and then we end up looking at them and

00:12:53,150 --> 00:13:00,730
actually no no none of them really

00:12:56,450 --> 00:13:00,730
solved the brownfield use cases

00:13:00,990 --> 00:13:04,620
so what what are the brownfield

00:13:03,090 --> 00:13:08,490
use-cases what's different about

00:13:04,620 --> 00:13:11,580
brownfield perhaps one thing is that we

00:13:08,490 --> 00:13:14,040
have native screens already existing

00:13:11,580 --> 00:13:15,900
right and so we need to be able to add

00:13:14,040 --> 00:13:19,350
new react native screens and be able to

00:13:15,900 --> 00:13:20,760
navigate into them and back out and all

00:13:19,350 --> 00:13:24,060
kinds of in-between without the user

00:13:20,760 --> 00:13:26,460
knowing that that anything has changed

00:13:24,060 --> 00:13:30,000
right we don't want react native to look

00:13:26,460 --> 00:13:31,800
like something different and so one

00:13:30,000 --> 00:13:34,250
example of where this breaks down when

00:13:31,800 --> 00:13:37,350
we're using javascript based navigation

00:13:34,250 --> 00:13:40,020
it is this example where you're

00:13:37,350 --> 00:13:43,800
navigating from a native screen on iOS

00:13:40,020 --> 00:13:45,600
to a react native one and what happens

00:13:43,800 --> 00:13:47,670
if you look carefully wouldn't when we

00:13:45,600 --> 00:13:49,830
make the first transition the navigation

00:13:47,670 --> 00:13:52,500
bar is actually going to get pushed off

00:13:49,830 --> 00:13:55,050
the screen right so we're we're pushing

00:13:52,500 --> 00:13:59,460
a whole new navigation bar onto the

00:13:55,050 --> 00:14:02,850
screen but this isn't actually how the

00:13:59,460 --> 00:14:05,280
the iOS nav bar worked and so the rest

00:14:02,850 --> 00:14:07,080
of our app probably doesn't look like

00:14:05,280 --> 00:14:09,480
that and so the user will notice that

00:14:07,080 --> 00:14:10,800
something's a little bit weird and what

00:14:09,480 --> 00:14:14,220
we expect is something a little more

00:14:10,800 --> 00:14:17,790
like this right where where the actual

00:14:14,220 --> 00:14:21,330
navigation bar persists across screen

00:14:17,790 --> 00:14:24,000
transitions and things like the title

00:14:21,330 --> 00:14:26,520
and the icons and various aspects of the

00:14:24,000 --> 00:14:29,340
navigation bar just just change fluidly

00:14:26,520 --> 00:14:32,670
during that transition that's impossible

00:14:29,340 --> 00:14:35,190
to do completely in JavaScript because

00:14:32,670 --> 00:14:36,750
in react native we have that react

00:14:35,190 --> 00:14:40,730
native environment and we can't render

00:14:36,750 --> 00:14:43,530
outside of it and so that that nav bar

00:14:40,730 --> 00:14:48,480
can't be rendered with react native at

00:14:43,530 --> 00:14:51,570
that point so what do we do when nothing

00:14:48,480 --> 00:14:56,790
solves our problems we go ahead and

00:14:51,570 --> 00:14:58,050
create another one so we we built the

00:14:56,790 --> 00:15:02,240
navigator

00:14:58,050 --> 00:15:05,490
it's not open source but it will be I'm

00:15:02,240 --> 00:15:07,230
working on it I was hoping to have it

00:15:05,490 --> 00:15:09,139
done by today's talk but that didn't

00:15:07,230 --> 00:15:10,790
exactly happen so

00:15:09,139 --> 00:15:12,859
I'm gonna I'm gonna walk through a

00:15:10,790 --> 00:15:15,259
little bit about it and why it's

00:15:12,859 --> 00:15:18,619
different and and what the API might

00:15:15,259 --> 00:15:21,170
look like the the first kind of

00:15:18,619 --> 00:15:23,509
fundamental difference here is that

00:15:21,170 --> 00:15:26,540
we're we're treating screens is kind of

00:15:23,509 --> 00:15:28,100
the fundamental unit react native by

00:15:26,540 --> 00:15:31,669
default kind of exists as the whole

00:15:28,100 --> 00:15:33,619
application inside one root view well

00:15:31,669 --> 00:15:37,220
we're we're changing is we have a new

00:15:33,619 --> 00:15:39,559
root view for every screen right and

00:15:37,220 --> 00:15:41,689
what we actually do is we attach that

00:15:39,559 --> 00:15:43,579
root view and kind of associate it with

00:15:41,689 --> 00:15:47,029
in the case of iOS the view controller

00:15:43,579 --> 00:15:50,509
and in the case of Android either an

00:15:47,029 --> 00:15:53,119
activity or a fragment and what this

00:15:50,509 --> 00:15:56,299
does is this really aligns us with the

00:15:53,119 --> 00:15:58,329
platform the platform's expect screens

00:15:56,299 --> 00:16:00,739
to be these fundamental units and

00:15:58,329 --> 00:16:03,109
there's a lot of things that that you're

00:16:00,739 --> 00:16:06,980
kind of going against the grain that

00:16:03,109 --> 00:16:09,619
that require hacks to work around that

00:16:06,980 --> 00:16:14,329
when you do this just kind of follow

00:16:09,619 --> 00:16:17,119
away so what does this look like in

00:16:14,329 --> 00:16:21,259
JavaScript we we import the Navigator

00:16:17,119 --> 00:16:23,299
and we have a registration mechanism

00:16:21,259 --> 00:16:26,029
similar to registered currently

00:16:23,299 --> 00:16:30,350
registering your app we register a

00:16:26,029 --> 00:16:33,919
screen and have a have a thunk to the

00:16:30,350 --> 00:16:35,929
the screen component and there's there's

00:16:33,919 --> 00:16:38,989
kind of like a URL looking thing that's

00:16:35,929 --> 00:16:44,540
really just a key to identify that

00:16:38,989 --> 00:16:48,079
screen in the app now there's there's a

00:16:44,540 --> 00:16:51,619
a fairly large kind of API but the the

00:16:48,079 --> 00:16:54,889
core of it is this we're able to push

00:16:51,619 --> 00:16:57,379
and present new screen at any editing

00:16:54,889 --> 00:16:59,809
point and that that requires that that

00:16:57,379 --> 00:17:03,889
URL or key of the screen we want to go

00:16:59,809 --> 00:17:05,929
to and then we can pass in any any

00:17:03,889 --> 00:17:08,230
number of props as the the second

00:17:05,929 --> 00:17:10,610
argument that will go to that screen and

00:17:08,230 --> 00:17:14,139
there's a third argument for options

00:17:10,610 --> 00:17:17,089
that you would rarely end up using

00:17:14,139 --> 00:17:20,889
what's interesting is both push and

00:17:17,089 --> 00:17:23,739
present here actually return a promise

00:17:20,889 --> 00:17:26,549
and it's a promise that resolves when

00:17:23,739 --> 00:17:30,759
the screen you pushed or presented its

00:17:26,549 --> 00:17:32,649
dismissed or pop right and that that

00:17:30,759 --> 00:17:36,039
ends up being useful for integration

00:17:32,649 --> 00:17:38,730
with with native apps but especially

00:17:36,039 --> 00:17:42,220
with Android Android has a concept of

00:17:38,730 --> 00:17:44,049
starting an activity for a result and so

00:17:42,220 --> 00:17:46,210
we're able to start a native flow in

00:17:44,049 --> 00:17:48,730
this case as well as a react native flow

00:17:46,210 --> 00:17:53,049
and get a result back a common example

00:17:48,730 --> 00:17:55,059
of that might be logging in to having a

00:17:53,049 --> 00:17:56,980
presenting a login screen to a user and

00:17:55,059 --> 00:18:01,179
then returning if they actually logged

00:17:56,980 --> 00:18:03,789
in or not and then popper dismiss

00:18:01,179 --> 00:18:10,119
actually just popper dismissed the

00:18:03,789 --> 00:18:15,249
current screen so a quick example kind

00:18:10,119 --> 00:18:17,499
of demonstration of this action the

00:18:15,249 --> 00:18:20,019
navigation bar here is being rendered

00:18:17,499 --> 00:18:22,570
completely natively and you can see that

00:18:20,019 --> 00:18:27,549
that it I can take both modes of

00:18:22,570 --> 00:18:29,409
transparency or solid colors and and the

00:18:27,549 --> 00:18:31,539
animations that are happening here the

00:18:29,409 --> 00:18:33,519
easing curves of these transitions are

00:18:31,539 --> 00:18:35,649
all using the platform to do that

00:18:33,519 --> 00:18:37,779
animation so they will they will match

00:18:35,649 --> 00:18:43,779
identically to the for the rest of your

00:18:37,779 --> 00:18:45,759
app and so what the user expects and an

00:18:43,779 --> 00:18:48,700
interesting property of the the API that

00:18:45,759 --> 00:18:50,559
we took here is that the navigation bar

00:18:48,700 --> 00:18:53,379
is actually configurable in the render

00:18:50,559 --> 00:18:55,929
pass what that allows us to do is have

00:18:53,379 --> 00:18:58,779
the styling of the navigation bar

00:18:55,929 --> 00:19:01,720
actually configured by a component at

00:18:58,779 --> 00:19:03,999
any any level of depth in the render

00:19:01,720 --> 00:19:05,470
tree and the Senate this has some

00:19:03,999 --> 00:19:08,529
interesting properties if you have if

00:19:05,470 --> 00:19:10,109
you have components that that render a

00:19:08,529 --> 00:19:12,700
certain type of thing where you know

00:19:10,109 --> 00:19:14,259
what the navigation bar should look like

00:19:12,700 --> 00:19:18,399
then you can go ahead and configure it

00:19:14,259 --> 00:19:20,590
there and then the the API that's

00:19:18,399 --> 00:19:22,840
exposed to the consumer of that

00:19:20,590 --> 00:19:26,789
component they don't need to worry about

00:19:22,840 --> 00:19:26,789
about configuring the navigation bar

00:19:26,850 --> 00:19:32,320
so the way we're able to do this

00:19:30,119 --> 00:19:33,270
configuration of the nav bar in the

00:19:32,320 --> 00:19:35,610
render path

00:19:33,270 --> 00:19:37,350
as this with this special component that

00:19:35,610 --> 00:19:40,130
we've created called navigator config

00:19:37,350 --> 00:19:42,900
and you can render any number of these

00:19:40,130 --> 00:19:46,380
and they they will resolve with some

00:19:42,900 --> 00:19:48,750
deterministic kind of resolution but

00:19:46,380 --> 00:19:51,330
it's a declarative component that you

00:19:48,750 --> 00:19:54,360
pass props in these props can be a

00:19:51,330 --> 00:19:56,880
function of you know props and state in

00:19:54,360 --> 00:19:59,490
your component and there's also various

00:19:56,880 --> 00:20:04,530
callbacks that are that are useful like

00:19:59,490 --> 00:20:08,610
like on up here in addition in addition

00:20:04,530 --> 00:20:11,100
to that we we also handle scrolling in a

00:20:08,610 --> 00:20:14,460
special way here we we have a way of

00:20:11,100 --> 00:20:17,130
identifying a scroll view as kind of the

00:20:14,460 --> 00:20:20,150
screens main scroll view and it's a

00:20:17,130 --> 00:20:22,680
typical pattern to have navigation bars

00:20:20,150 --> 00:20:25,920
kind of behave differently or at least

00:20:22,680 --> 00:20:28,320
listen to the the scroll position and

00:20:25,920 --> 00:20:31,590
change their appearance as a result and

00:20:28,320 --> 00:20:34,350
actually in our case the it's different

00:20:31,590 --> 00:20:36,470
for each platform on Android we we push

00:20:34,350 --> 00:20:39,530
the screen of the nav bar off the screen

00:20:36,470 --> 00:20:42,720
kind of like a shy nav bar approach and

00:20:39,530 --> 00:20:47,420
in iOS we keep it on the screen but we

00:20:42,720 --> 00:20:52,710
can transition from from transparency to

00:20:47,420 --> 00:20:55,470
to being opaque and this is kind of an

00:20:52,710 --> 00:20:58,770
example of this is a trimmed-down

00:20:55,470 --> 00:21:00,330
version of what that screen would kind

00:20:58,770 --> 00:21:02,220
of look like in terms of our our

00:21:00,330 --> 00:21:04,260
components here you can see we have this

00:21:02,220 --> 00:21:05,940
scroll scene component and this

00:21:04,260 --> 00:21:08,040
editorial mark key components which are

00:21:05,940 --> 00:21:13,080
kind of this special components here

00:21:08,040 --> 00:21:16,380
that editorial marquee it had been it

00:21:13,080 --> 00:21:20,340
had been rendered in a way where it had

00:21:16,380 --> 00:21:21,990
this navigator config set and that

00:21:20,340 --> 00:21:23,970
configured the nav bar and then this

00:21:21,990 --> 00:21:28,530
scroll scene is something that would

00:21:23,970 --> 00:21:30,870
except it's just a wrapper around a

00:21:28,530 --> 00:21:33,330
normal scroll view but we ended up

00:21:30,870 --> 00:21:36,290
passing in a context property here which

00:21:33,330 --> 00:21:39,540
it the underlying implementation then

00:21:36,290 --> 00:21:42,930
knows how to attach that scroll view to

00:21:39,540 --> 00:21:44,790
the nav bar of that screen and that

00:21:42,930 --> 00:21:46,410
navigator config component is actually

00:21:44,790 --> 00:21:48,600
just a

00:21:46,410 --> 00:21:51,090
it doesn't render anything at least not

00:21:48,600 --> 00:21:53,900
in the react sense what it does is it's

00:21:51,090 --> 00:21:56,460
it's just a sort of state machine that

00:21:53,900 --> 00:21:58,650
handles component amount component will

00:21:56,460 --> 00:22:01,500
receive products and then there's sort

00:21:58,650 --> 00:22:03,030
of this state transition function where

00:22:01,500 --> 00:22:06,630
we can tell if the props have changed

00:22:03,030 --> 00:22:09,480
and then we end up setting the bar type

00:22:06,630 --> 00:22:13,410
for for that screen or setting other

00:22:09,480 --> 00:22:16,950
properties another thing that we're able

00:22:13,410 --> 00:22:19,620
to do is shared element transitions this

00:22:16,950 --> 00:22:22,260
has become a common pattern in mobile

00:22:19,620 --> 00:22:27,480
apps that is pretty difficult to do in

00:22:22,260 --> 00:22:29,220
react native it's possible but what's

00:22:27,480 --> 00:22:31,290
not possible is doing shared element

00:22:29,220 --> 00:22:33,600
transitions from a native screen to a

00:22:31,290 --> 00:22:37,710
react native screen or vice versa and

00:22:33,600 --> 00:22:38,970
that's that's what we're able to do and

00:22:37,710 --> 00:22:43,590
I'll show you a little bit about what

00:22:38,970 --> 00:22:46,710
the API for this looks like so in this

00:22:43,590 --> 00:22:48,270
example we we have kind of choose two

00:22:46,710 --> 00:22:49,770
screens right we have the screen that

00:22:48,270 --> 00:22:53,550
we're coming from in the screen screen

00:22:49,770 --> 00:22:57,180
that we're going to and on the first

00:22:53,550 --> 00:22:59,040
screen we have some number of these sort

00:22:57,180 --> 00:23:00,720
of special shared element components

00:22:59,040 --> 00:23:03,750
which don't actually render anything

00:23:00,720 --> 00:23:05,250
they just sort of annotate other views

00:23:03,750 --> 00:23:10,170
right and so in this case it's wrapped

00:23:05,250 --> 00:23:12,870
around this image and we assign it and

00:23:10,170 --> 00:23:16,020
an ID of sorts right and so in the next

00:23:12,870 --> 00:23:19,290
screen we expect there to be a similar

00:23:16,020 --> 00:23:22,770
shared element with the same ID and then

00:23:19,290 --> 00:23:24,420
and then the the library ends up kind of

00:23:22,770 --> 00:23:28,410
scanning the view hierarchies of both

00:23:24,420 --> 00:23:30,420
screens and finding the matches but then

00:23:28,410 --> 00:23:32,820
what happens and this is a little bit

00:23:30,420 --> 00:23:35,700
important is we have this transition

00:23:32,820 --> 00:23:37,620
group a shared element group where when

00:23:35,700 --> 00:23:39,870
when we're making the navigation we

00:23:37,620 --> 00:23:41,190
actually want to specify where the

00:23:39,870 --> 00:23:43,950
navigation came from because we might

00:23:41,190 --> 00:23:46,020
have several points or several images on

00:23:43,950 --> 00:23:47,970
the page that that like could be shared

00:23:46,020 --> 00:23:49,670
elements but we don't want those we want

00:23:47,970 --> 00:23:53,030
the one that the user interacted with

00:23:49,670 --> 00:23:56,370
and so when we do the navigation dot

00:23:53,030 --> 00:23:59,870
navigated out push we pass in that

00:23:56,370 --> 00:23:59,870
transition ideas an option

00:24:01,530 --> 00:24:10,000
so what are the advantages here of this

00:24:05,559 --> 00:24:11,980
type of brownfield navigation one it's

00:24:10,000 --> 00:24:15,490
it's really really easy to transition to

00:24:11,980 --> 00:24:18,130
and from native or react native views

00:24:15,490 --> 00:24:21,669
right native native flows just get a

00:24:18,130 --> 00:24:23,650
similar URL type structure and we can

00:24:21,669 --> 00:24:26,200
push we can push native views just like

00:24:23,650 --> 00:24:27,789
we push react native views and we can

00:24:26,200 --> 00:24:31,330
easily push react native views from

00:24:27,789 --> 00:24:34,450
native an interesting side effect of

00:24:31,330 --> 00:24:37,299
this is that we can navigate deeply into

00:24:34,450 --> 00:24:40,150
our app and use react native live reload

00:24:37,299 --> 00:24:41,770
and our navigation state isn't lost

00:24:40,150 --> 00:24:43,960
we're actually just refreshing the

00:24:41,770 --> 00:24:46,960
JavaScript runtime but the navigation

00:24:43,960 --> 00:24:49,150
state lives natively so we ended up just

00:24:46,960 --> 00:24:51,750
refreshing that page and that provides

00:24:49,150 --> 00:24:54,580
like a much better developer experience

00:24:51,750 --> 00:24:57,210
the other thing is it transitions are

00:24:54,580 --> 00:25:00,280
performant but by default we're using

00:24:57,210 --> 00:25:03,150
everything entirely native here there's

00:25:00,280 --> 00:25:07,480
no no JavaScript driving this animation

00:25:03,150 --> 00:25:09,220
so we we don't have to worry about react

00:25:07,480 --> 00:25:12,059
kind of blocking the JavaScript thread

00:25:09,220 --> 00:25:15,010
well while this transition is happening

00:25:12,059 --> 00:25:16,929
and also configuring the navigation bar

00:25:15,010 --> 00:25:19,390
in the render path I think is it is a

00:25:16,929 --> 00:25:22,150
huge win a lot of times we want to set a

00:25:19,390 --> 00:25:24,070
title based on some props that we have

00:25:22,150 --> 00:25:26,049
or we want to conditionally render

00:25:24,070 --> 00:25:27,429
something that that might change like

00:25:26,049 --> 00:25:29,770
the buttons that are available in the

00:25:27,429 --> 00:25:32,049
navigation bar and things like that and

00:25:29,770 --> 00:25:34,299
having it as something that's

00:25:32,049 --> 00:25:36,549
configurable in the render path just

00:25:34,299 --> 00:25:40,380
makes for a really consistent and and

00:25:36,549 --> 00:25:42,280
like understandable react native API and

00:25:40,380 --> 00:25:44,320
and we aligned with the platform

00:25:42,280 --> 00:25:46,960
conventions here there's things like the

00:25:44,320 --> 00:25:48,909
Android back button that just worked by

00:25:46,960 --> 00:25:52,809
default we don't have a single line of

00:25:48,909 --> 00:25:55,059
code in our app handling like weird back

00:25:52,809 --> 00:25:59,650
button issues with react native it just

00:25:55,059 --> 00:26:02,140
works so there are maybe a couple of

00:25:59,650 --> 00:26:05,110
disadvantages that are worth mentioning

00:26:02,140 --> 00:26:06,640
one the navigation bar is not in react

00:26:05,110 --> 00:26:07,750
right it's not a react component so it

00:26:06,640 --> 00:26:10,870
sort of assumes that you already have a

00:26:07,750 --> 00:26:12,509
navigation bar that you're using and

00:26:10,870 --> 00:26:15,239
then also screen props are

00:26:12,509 --> 00:26:16,979
are serialized in deserialized so you

00:26:15,239 --> 00:26:19,049
pay a small serialization penalty in

00:26:16,979 --> 00:26:23,039
that case and you can't pass functions

00:26:19,049 --> 00:26:25,349
across um also navigation state is

00:26:23,039 --> 00:26:28,409
native it lives natively you can't

00:26:25,349 --> 00:26:30,509
really query it in your app hasn't

00:26:28,409 --> 00:26:32,789
really been an issue for us it's worth

00:26:30,509 --> 00:26:35,279
pointing out that the that these two are

00:26:32,789 --> 00:26:38,159
actually requirements for us we couldn't

00:26:35,279 --> 00:26:41,099
have it any other way and it's also

00:26:38,159 --> 00:26:42,629
worth pointing out that I'm gonna try

00:26:41,099 --> 00:26:47,909
and solve the first two issues before

00:26:42,629 --> 00:26:48,989
open sourcing it I'm not a time here but

00:26:47,909 --> 00:26:51,779
I'm gonna I'm gonna run through these

00:26:48,989 --> 00:26:53,219
last slides pretty quickly some

00:26:51,779 --> 00:26:55,859
additional challenges that we have type

00:26:53,219 --> 00:26:58,049
safety native engineers kind of expect

00:26:55,859 --> 00:27:01,259
the type safe language and and working

00:26:58,049 --> 00:27:04,109
with this can be can be a concern for a

00:27:01,259 --> 00:27:05,639
lot of them educating people about react

00:27:04,109 --> 00:27:08,819
native that haven't used it before

00:27:05,639 --> 00:27:12,479
there's definitely a cost there be

00:27:08,819 --> 00:27:14,039
prepared to write native modules there

00:27:12,479 --> 00:27:15,690
they're necessary if you're if you're

00:27:14,039 --> 00:27:18,949
integrating with an existing app you're

00:27:15,690 --> 00:27:22,609
gonna you're gonna need to write

00:27:18,949 --> 00:27:25,859
communication layers that handle things

00:27:22,609 --> 00:27:27,659
also it I found that it's hard to get

00:27:25,859 --> 00:27:31,259
people to actually develop this

00:27:27,659 --> 00:27:34,440
cross-platform mindset we we actually

00:27:31,259 --> 00:27:36,029
want an engineer's to be developing with

00:27:34,440 --> 00:27:38,309
both the Android and iOS simulator

00:27:36,029 --> 00:27:44,429
running at the same time on that that's

00:27:38,309 --> 00:27:50,279
sometimes hard so the payoff really we

00:27:44,429 --> 00:27:52,859
get one feature and one engineer and we

00:27:50,279 --> 00:27:56,399
can implement it in three platforms that

00:27:52,859 --> 00:28:02,879
is really really powerful can't be can't

00:27:56,399 --> 00:28:04,739
be understated a code push is something

00:28:02,879 --> 00:28:07,139
that that's incredibly valuable to us

00:28:04,739 --> 00:28:09,959
can can get to the point where we're

00:28:07,139 --> 00:28:13,319
continuously deploying the react native

00:28:09,959 --> 00:28:15,079
portion of our app which is incredibly

00:28:13,319 --> 00:28:17,489
valuable in a big productivity boost

00:28:15,079 --> 00:28:22,039
live reload another big productivity

00:28:17,489 --> 00:28:24,569
boost react itself is is really really

00:28:22,039 --> 00:28:26,569
it is kind of like a benefit in and of

00:28:24,569 --> 00:28:28,859
itself right react is something that I

00:28:26,569 --> 00:28:31,739
think at least a lot of people here are

00:28:28,859 --> 00:28:34,049
kind of bought into the the UI paradigm

00:28:31,739 --> 00:28:37,229
that it brings and and how that scales

00:28:34,049 --> 00:28:40,679
the large apps we're able to share code

00:28:37,229 --> 00:28:42,539
and just to finish up I kind of wanted

00:28:40,679 --> 00:28:44,190
to give you know sort of some some brief

00:28:42,539 --> 00:28:48,089
understanding of a where react native

00:28:44,190 --> 00:28:50,819
sort of stands today at Airbnb and I ran

00:28:48,089 --> 00:28:54,359
some scripts this morning we have 107

00:28:50,819 --> 00:28:58,409
registered screens in the app built with

00:28:54,359 --> 00:29:04,679
react native that's roughly 415 react

00:28:58,409 --> 00:29:07,259
components and all of that is built with

00:29:04,679 --> 00:29:09,119
about 71 thousand lines of code of

00:29:07,259 --> 00:29:10,679
JavaScript and that that's excluding

00:29:09,119 --> 00:29:12,899
comments and blanks and stuff like that

00:29:10,679 --> 00:29:16,109
if you compare that to the Android app

00:29:12,899 --> 00:29:20,099
our Android app has around 271 thousand

00:29:16,109 --> 00:29:24,839
lines of Java and another 200,000 lines

00:29:20,099 --> 00:29:27,469
of XML prepared to the iOS app we have

00:29:24,839 --> 00:29:33,149
about 300 thousand lines of Swift and

00:29:27,469 --> 00:29:35,309
164 thousand lines of objective-c so it

00:29:33,149 --> 00:29:36,989
seems like maybe if you were trying to

00:29:35,309 --> 00:29:39,359
put it somewhere or like react native

00:29:36,989 --> 00:29:40,979
kind of stands right now is you know

00:29:39,359 --> 00:29:52,229
maybe somewhere between 10 and 15% of

00:29:40,979 --> 00:29:54,749
the app thank you awesome thank you

00:29:52,229 --> 00:29:59,789
let's look at the only 88 that means

00:29:54,749 --> 00:30:01,679
something's working okay we we actually

00:29:59,789 --> 00:30:03,269
talked backstage we were wondering what

00:30:01,679 --> 00:30:07,409
the top question would be and this is

00:30:03,269 --> 00:30:10,349
what I thought it would be so the the

00:30:07,409 --> 00:30:11,929
parts of the app parts of the Airbnb app

00:30:10,349 --> 00:30:14,549
that are that are built in react native

00:30:11,929 --> 00:30:18,629
some of them I can't tell you about but

00:30:14,549 --> 00:30:22,349
you you you may find out later in

00:30:18,629 --> 00:30:25,919
November and there there are various

00:30:22,349 --> 00:30:28,349
parts of the user flow there's like if

00:30:25,919 --> 00:30:31,589
you alter reservation if you post

00:30:28,349 --> 00:30:33,450
reviews parts of the host app things

00:30:31,589 --> 00:30:35,970
like that but I should emphasize it's

00:30:33,450 --> 00:30:38,580
still a small part of the app

00:30:35,970 --> 00:30:41,279
and the bulk of that code that I was

00:30:38,580 --> 00:30:48,779
talking about is is still yet to be

00:30:41,279 --> 00:30:50,159
released features why that sounds a

00:30:48,779 --> 00:30:53,220
little bit high but it is really really

00:30:50,159 --> 00:30:57,389
high I think it's I think we just got it

00:30:53,220 --> 00:30:59,250
under a hundred megabytes it's it's

00:30:57,389 --> 00:31:02,220
really big one of the reasons it's

00:30:59,250 --> 00:31:05,179
really big is because of our Swift usage

00:31:02,220 --> 00:31:09,240
and and Swift had some unexpected

00:31:05,179 --> 00:31:12,350
effects on binary size I think a lot of

00:31:09,240 --> 00:31:15,629
them are related to the usage of structs

00:31:12,350 --> 00:31:17,789
and we're like really currently

00:31:15,629 --> 00:31:20,190
investigating that issue when we started

00:31:17,789 --> 00:31:24,090
adopting Swift the size of our app

00:31:20,190 --> 00:31:25,799
skyrocketed and yeah still still under

00:31:24,090 --> 00:31:27,600
investigation

00:31:25,799 --> 00:31:30,210
how successful is the adoption of react

00:31:27,600 --> 00:31:31,860
native air BnB been but you share any

00:31:30,210 --> 00:31:36,360
metrics or anecdotes about productivity

00:31:31,860 --> 00:31:37,830
etcetera yeah this is the the

00:31:36,360 --> 00:31:41,009
productivity thing it's like hard to

00:31:37,830 --> 00:31:43,980
measure there there's kind of like some

00:31:41,009 --> 00:31:46,950
guttural sort of feelings but I I feel

00:31:43,980 --> 00:31:48,990
like it was from an infrastructure level

00:31:46,950 --> 00:31:52,139
it was it was really difficult to get

00:31:48,990 --> 00:31:54,029
react native into a stable place and

00:31:52,139 --> 00:31:57,029
there's still a lot of things that we're

00:31:54,029 --> 00:32:00,539
working on from the building products

00:31:57,029 --> 00:32:03,299
level beyond beyond like the

00:32:00,539 --> 00:32:05,700
infrastructure side we I think we found

00:32:03,299 --> 00:32:08,340
it to be incredibly productive we're

00:32:05,700 --> 00:32:10,529
able to write cross-platform code we

00:32:08,340 --> 00:32:13,649
write the feature once and it works on

00:32:10,529 --> 00:32:16,110
both iOS and Android we've had some

00:32:13,649 --> 00:32:19,110
fairly complicated features get out the

00:32:16,110 --> 00:32:23,549
door and in like a week so we've been

00:32:19,110 --> 00:32:26,490
pretty pleased you use code push depends

00:32:23,549 --> 00:32:28,350
what you mean by use it we don't

00:32:26,490 --> 00:32:30,149
currently use it as much as we'd like to

00:32:28,350 --> 00:32:33,090
and a big part of that is because we

00:32:30,149 --> 00:32:36,000
need we need to build up confidence in

00:32:33,090 --> 00:32:38,960
our ability to code push without without

00:32:36,000 --> 00:32:41,970
shipping bugs basically to production

00:32:38,960 --> 00:32:46,259
and so currently I'm working on building

00:32:41,970 --> 00:32:47,700
out our end-to-end testing on on react

00:32:46,259 --> 00:32:48,540
native and the rest of the mobile apps

00:32:47,700 --> 00:32:52,430
so that we can do

00:32:48,540 --> 00:32:54,360
this in a way where we have confidence

00:32:52,430 --> 00:32:57,750
well everything you switch to react

00:32:54,360 --> 00:33:02,610
native entirely over time still an open

00:32:57,750 --> 00:33:04,590
question I I don't that it's it's

00:33:02,610 --> 00:33:06,810
possible but it's like it's it's really

00:33:04,590 --> 00:33:08,250
far away right like you saw we're like

00:33:06,810 --> 00:33:12,270
maybe at 10%

00:33:08,250 --> 00:33:15,150
it's growing very quickly I think that

00:33:12,270 --> 00:33:18,390
we're we're incrementally trying like

00:33:15,150 --> 00:33:20,610
more and more difficult features and I

00:33:18,390 --> 00:33:23,790
would say that right now there there's

00:33:20,610 --> 00:33:25,800
maybe almost nothing that we don't think

00:33:23,790 --> 00:33:28,110
that we could we could safely do and

00:33:25,800 --> 00:33:31,260
react native in the app but ultimately

00:33:28,110 --> 00:33:33,480
it's it's our engineers choice and and

00:33:31,260 --> 00:33:35,340
we're still kind of building up support

00:33:33,480 --> 00:33:41,310
for it and interest in training new

00:33:35,340 --> 00:33:43,950
people what do you think about native

00:33:41,310 --> 00:33:47,880
scripts I I don't know a whole lot about

00:33:43,950 --> 00:33:51,140
it we evaluated other technologies when

00:33:47,880 --> 00:33:53,400
we started working on react native but

00:33:51,140 --> 00:33:56,100
ultimately react native was kind of the

00:33:53,400 --> 00:34:00,210
only one that made sense for us we just

00:33:56,100 --> 00:34:02,610
have a lot of built in react experience

00:34:00,210 --> 00:34:07,010
we had the most sort of support for it

00:34:02,610 --> 00:34:09,770
and just seems like the right choice

00:34:07,010 --> 00:34:14,820
took time for one last question

00:34:09,770 --> 00:34:17,669
okay why not merge all repos into a

00:34:14,820 --> 00:34:20,100
single one with different folders what

00:34:17,669 --> 00:34:23,669
that's what we did I mean that's that's

00:34:20,100 --> 00:34:24,720
a mono repo the the idea was is that

00:34:23,669 --> 00:34:28,350
that was a big ask

00:34:24,720 --> 00:34:29,730
early on we we started off with the

00:34:28,350 --> 00:34:31,679
understanding that react native was an

00:34:29,730 --> 00:34:34,260
experimental technology was something

00:34:31,679 --> 00:34:38,730
we're evaluating and you you can't

00:34:34,260 --> 00:34:42,240
really ask like to merge you know to two

00:34:38,730 --> 00:34:44,460
of our largest like repos was with many

00:34:42,240 --> 00:34:46,260
dozens of of engineers working on it

00:34:44,460 --> 00:34:47,880
just to try out a new technology and so

00:34:46,260 --> 00:34:51,330
this was the best compromise that we

00:34:47,880 --> 00:34:53,070
came up with and the last one I just

00:34:51,330 --> 00:34:55,530
love it you know that's understand as

00:34:53,070 --> 00:34:58,800
well so uh did you book your stay with

00:34:55,530 --> 00:34:59,870
Airbnb trace lava I certainly would have

00:34:58,800 --> 00:35:02,450
but

00:34:59,870 --> 00:35:06,650
vacuum labs was kind enough to put me up

00:35:02,450 --> 00:35:07,760
here free of charge and yeah they've

00:35:06,650 --> 00:35:10,580
been really great hosts to this

00:35:07,760 --> 00:35:14,230
conference though also thank you to them

00:35:10,580 --> 00:35:14,230

YouTube URL: https://www.youtube.com/watch?v=npwa3ZmG9VQ


