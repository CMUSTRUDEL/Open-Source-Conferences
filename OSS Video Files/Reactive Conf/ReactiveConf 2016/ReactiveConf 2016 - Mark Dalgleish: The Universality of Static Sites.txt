Title: ReactiveConf 2016 - Mark Dalgleish: The Universality of Static Sites
Publication date: 2016-11-24
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Mark Dalgleish: The Universality of Static Sites

React played a pivotal role in the widespread emergence of universal/isomorphic apps, rendering on both the server and client. However, many applications continue to render purely on the client, and for good reason—running a React server in production doesn't come without significant challenges. Typically we find ourselves having to choose between these two competing approaches, but there's a lesser-known third option—using React to pre-render our sites at build time, whether partially or fully. In this talk we'll cover why you'd want to do this in the first place, and how modern tooling can help us achieve it.

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, it’s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,720 --> 00:00:09,940
cool so as you all heard my name is Mark

00:00:07,269 --> 00:00:11,680
dog leash and I'm I'm here all the way

00:00:09,940 --> 00:00:13,330
from Melbourne Australia

00:00:11,680 --> 00:00:17,020
I believe my three-year-old daughter Eva

00:00:13,330 --> 00:00:21,820
is watching on the livestream so I Eva I

00:00:17,020 --> 00:00:24,669
miss you as I'm sure you're all aware my

00:00:21,820 --> 00:00:26,859
I'm a big fan of react for a number of

00:00:24,669 --> 00:00:28,599
reasons there are lots of great reasons

00:00:26,859 --> 00:00:30,550
to love react but the number one reason

00:00:28,599 --> 00:00:32,920
I got into it in the first place and I

00:00:30,550 --> 00:00:35,290
remain a big fan is the fact that react

00:00:32,920 --> 00:00:37,120
does universal rendering we can render

00:00:35,290 --> 00:00:40,300
on both the client and the server this

00:00:37,120 --> 00:00:42,400
is this is huge for me so as to

00:00:40,300 --> 00:00:44,560
front-end developers now thanks to react

00:00:42,400 --> 00:00:47,620
in the world coming after it we have a

00:00:44,560 --> 00:00:49,630
choice we can either serve a render or

00:00:47,620 --> 00:00:53,650
client render and this is a big decision

00:00:49,630 --> 00:00:54,880
for a lot of us but I'm here today to

00:00:53,650 --> 00:00:56,710
talk to you about what I think is a

00:00:54,880 --> 00:00:59,650
really important but less well-known

00:00:56,710 --> 00:01:02,320
third option and that's the idea of

00:00:59,650 --> 00:01:04,869
bringing Universal rendering to the

00:01:02,320 --> 00:01:06,790
world of static sites these two worlds

00:01:04,869 --> 00:01:09,190
can coexist and I think the results are

00:01:06,790 --> 00:01:10,870
really interesting as you'll see but to

00:01:09,190 --> 00:01:12,520
put all of this in its proper context

00:01:10,870 --> 00:01:14,890
I'm gonna go back to the start of my

00:01:12,520 --> 00:01:17,550
journey on working in this space and

00:01:14,890 --> 00:01:19,960
tell you how I got to where I am today

00:01:17,550 --> 00:01:22,000
I've spent the last two years of my life

00:01:19,960 --> 00:01:24,729
working at a company called seek in

00:01:22,000 --> 00:01:26,470
Melbourne Australia and seekers is the

00:01:24,729 --> 00:01:28,300
leading job site there and in New

00:01:26,470 --> 00:01:29,830
Zealand as well basically if you're in

00:01:28,300 --> 00:01:33,280
Australia and you're looking for a job

00:01:29,830 --> 00:01:34,659
odds are you're looking on seek this is

00:01:33,280 --> 00:01:36,820
the project that I've been working on

00:01:34,659 --> 00:01:39,310
and it's it's a complete rebuild of the

00:01:36,820 --> 00:01:41,860
core search experience using react

00:01:39,310 --> 00:01:43,960
server-side rendering to get all the

00:01:41,860 --> 00:01:46,110
best benefits of client and server

00:01:43,960 --> 00:01:48,909
rendering in one application

00:01:46,110 --> 00:01:50,530
now it's seek we were already big fans

00:01:48,909 --> 00:01:52,450
of client-side rendering a lot of our

00:01:50,530 --> 00:01:55,440
projects already had made the migration

00:01:52,450 --> 00:01:57,970
towards rendering purely on the client

00:01:55,440 --> 00:01:59,260
and there are a number of really obvious

00:01:57,970 --> 00:02:00,760
benefits to this that I'm sure you're

00:01:59,260 --> 00:02:03,490
all familiar with the number one though

00:02:00,760 --> 00:02:05,710
has to be that app like user experience

00:02:03,490 --> 00:02:07,420
the fact that once that applications

00:02:05,710 --> 00:02:09,220
booted up you had a level of

00:02:07,420 --> 00:02:10,720
interactivity that we just did not get

00:02:09,220 --> 00:02:13,150
with our server ended applications

00:02:10,720 --> 00:02:14,709
before and this was a big differentiator

00:02:13,150 --> 00:02:16,040
between us and our competitors and I'm

00:02:14,709 --> 00:02:18,470
sure that's true of many of

00:02:16,040 --> 00:02:20,360
but the benefits carried over into the

00:02:18,470 --> 00:02:21,590
development world as well of course and

00:02:20,360 --> 00:02:23,270
this definitely helped it gain traction

00:02:21,590 --> 00:02:25,430
with us the fact that we had a

00:02:23,270 --> 00:02:27,560
simplified architecture of a static site

00:02:25,430 --> 00:02:29,720
talking to api's which meant simplified

00:02:27,560 --> 00:02:31,490
deployments and that also translated

00:02:29,720 --> 00:02:33,470
into simplified operations as well

00:02:31,490 --> 00:02:36,230
running these things was just so much

00:02:33,470 --> 00:02:37,970
easier than it was before and for many

00:02:36,230 --> 00:02:39,590
of us and it was definitely the case at

00:02:37,970 --> 00:02:41,630
sea this was the beginning of us

00:02:39,590 --> 00:02:44,150
breaking down these mono lists that we

00:02:41,630 --> 00:02:45,710
had where we had front-end code backing

00:02:44,150 --> 00:02:48,140
code all tangled together in the one

00:02:45,710 --> 00:02:51,110
project now we had a really nice clean

00:02:48,140 --> 00:02:53,180
separation static site talking to api's

00:02:51,110 --> 00:02:55,220
it was like building a desktop app or a

00:02:53,180 --> 00:02:58,610
native application but on the web and it

00:02:55,220 --> 00:03:00,470
felt really really great unfortunately

00:02:58,610 --> 00:03:03,200
this approach had and continues to have

00:03:00,470 --> 00:03:05,420
a fatal flaw and that's the that

00:03:03,200 --> 00:03:06,740
first-time user experience of of hitting

00:03:05,420 --> 00:03:08,750
a website that's rendered on the clone

00:03:06,740 --> 00:03:10,160
odds are you'll see absolutely nothing

00:03:08,750 --> 00:03:12,260
for a second and then you'll see a

00:03:10,160 --> 00:03:14,690
loading indicator and finally you'll see

00:03:12,260 --> 00:03:18,920
some data really not a great experience

00:03:14,690 --> 00:03:21,620
for our users into react of course so

00:03:18,920 --> 00:03:24,350
reiax helped change the landscape in

00:03:21,620 --> 00:03:26,240
this in this regard most notably because

00:03:24,350 --> 00:03:27,530
you could take an application and you

00:03:26,240 --> 00:03:30,590
could render that application to a

00:03:27,530 --> 00:03:34,430
string this was huge and something that

00:03:30,590 --> 00:03:36,680
at Seek we really paid attention to the

00:03:34,430 --> 00:03:38,000
number one thing that changed when we

00:03:36,680 --> 00:03:38,990
started working with it is suddenly we

00:03:38,000 --> 00:03:41,150
were talking about progressive

00:03:38,990 --> 00:03:42,920
enhancement again it was something that

00:03:41,150 --> 00:03:45,050
we had stopped talking about once we

00:03:42,920 --> 00:03:47,120
move towards single page apps suddenly

00:03:45,050 --> 00:03:49,430
relevant again search engine

00:03:47,120 --> 00:03:51,110
optimization was the the entire reason

00:03:49,430 --> 00:03:53,090
we got on board in the first place and

00:03:51,110 --> 00:03:55,370
the benefits there were immense both in

00:03:53,090 --> 00:03:56,990
terms of arguing search engines but also

00:03:55,370 --> 00:03:59,840
testing that you're targeting search

00:03:56,990 --> 00:04:01,490
engines correctly but finally and I

00:03:59,840 --> 00:04:03,380
think most importantly for me a benefit

00:04:01,490 --> 00:04:06,140
that you continue to see day after day

00:04:03,380 --> 00:04:08,600
as a regular user is that first time

00:04:06,140 --> 00:04:10,310
load experience we heard Guillermo talk

00:04:08,600 --> 00:04:12,260
about this yesterday and it's definitely

00:04:10,310 --> 00:04:14,480
true for us that that final level of

00:04:12,260 --> 00:04:17,030
Polish and your application is that when

00:04:14,480 --> 00:04:19,640
a request hits your server the user sees

00:04:17,030 --> 00:04:21,830
usable readable content as soon as

00:04:19,640 --> 00:04:24,710
possible not a blank screen not a

00:04:21,830 --> 00:04:26,630
loading indicator now of course many

00:04:24,710 --> 00:04:29,120
weeks passes we work on this new project

00:04:26,630 --> 00:04:29,420
and and the realities of working on a

00:04:29,120 --> 00:04:32,990
real

00:04:29,420 --> 00:04:34,220
start to seven components are everywhere

00:04:32,990 --> 00:04:36,050
that's what happens in a reactor

00:04:34,220 --> 00:04:37,850
plication and obviously we think that's

00:04:36,050 --> 00:04:39,200
a good thing and in our case the the

00:04:37,850 --> 00:04:41,420
components were universal they were

00:04:39,200 --> 00:04:44,690
designed to render on the server first

00:04:41,420 --> 00:04:46,160
and eventually run on the client and who

00:04:44,690 --> 00:04:47,450
knows how long that period of time is

00:04:46,160 --> 00:04:50,570
going to be that was built into their

00:04:47,450 --> 00:04:52,460
design so as a team we all looked at

00:04:50,570 --> 00:04:53,720
each other and we said well we've got so

00:04:52,460 --> 00:04:55,370
many of these starting to build up we

00:04:53,720 --> 00:04:57,830
should really start to think about open

00:04:55,370 --> 00:04:59,480
sourcing some of them for me the natural

00:04:57,830 --> 00:05:01,850
next step and this is thinking about how

00:04:59,480 --> 00:05:04,340
we demonstrate the universal nature of

00:05:01,850 --> 00:05:06,560
our components and I wanted to put them

00:05:04,340 --> 00:05:07,610
up on github pages let's let as we

00:05:06,560 --> 00:05:10,010
always do with our open source

00:05:07,610 --> 00:05:11,600
components that have a demo let's put it

00:05:10,010 --> 00:05:13,490
up on github pages where people can see

00:05:11,600 --> 00:05:15,200
it but there was a slight problem with

00:05:13,490 --> 00:05:18,140
this approach and that's the fact that

00:05:15,200 --> 00:05:20,300
github pages is static all you can do

00:05:18,140 --> 00:05:22,070
there is upload static files and serve

00:05:20,300 --> 00:05:24,380
them directly there is no dynamic server

00:05:22,070 --> 00:05:27,250
component your node server rendering is

00:05:24,380 --> 00:05:29,260
not gonna run in this environment so I

00:05:27,250 --> 00:05:32,780
thought long and hard about this problem

00:05:29,260 --> 00:05:34,640
not too long what we came up with was

00:05:32,780 --> 00:05:37,580
the idea of rendering our components to

00:05:34,640 --> 00:05:40,250
HTML at Build time without a dynamic

00:05:37,580 --> 00:05:42,830
server and this is where web pack for us

00:05:40,250 --> 00:05:44,750
continued to pay off it's incredibly

00:05:42,830 --> 00:05:47,900
powerful tool as I'm sure you're all

00:05:44,750 --> 00:05:49,700
aware or more specifically the web pack

00:05:47,900 --> 00:05:52,940
plug-in system gave us the power we

00:05:49,700 --> 00:05:54,350
needed to solve this problem because web

00:05:52,940 --> 00:05:56,390
pack plugins in this case most

00:05:54,350 --> 00:05:58,310
particularly they have access to every

00:05:56,390 --> 00:05:59,840
generated asset so every file that's

00:05:58,310 --> 00:06:02,540
coming out of your web pack compilation

00:05:59,840 --> 00:06:03,650
your plugins have access to that but

00:06:02,540 --> 00:06:05,510
they also have the ability to create

00:06:03,650 --> 00:06:07,580
additional files many of the most common

00:06:05,510 --> 00:06:10,100
plugins do this for example the extract

00:06:07,580 --> 00:06:12,230
text plug-in that generates CSS that is

00:06:10,100 --> 00:06:14,450
reading your source code and generating

00:06:12,230 --> 00:06:16,490
extra CSS files as a result that's the

00:06:14,450 --> 00:06:19,400
kind of power we needed in this case and

00:06:16,490 --> 00:06:21,500
that led to the creation of somewhat

00:06:19,400 --> 00:06:24,790
hacky but definitely workable solution

00:06:21,500 --> 00:06:26,990
called react to HTML web pack plug-in

00:06:24,790 --> 00:06:29,210
and it would basically look like this in

00:06:26,990 --> 00:06:30,830
your core bundle typically you don't

00:06:29,210 --> 00:06:32,720
export anything unless you're building a

00:06:30,830 --> 00:06:34,160
library but in this case the idea is

00:06:32,720 --> 00:06:35,930
that you would export your react

00:06:34,160 --> 00:06:37,710
component so here we've got a simple

00:06:35,930 --> 00:06:39,510
hello world app

00:06:37,710 --> 00:06:40,980
component and we're exporting that from

00:06:39,510 --> 00:06:44,790
out from our bundle that we're passing

00:06:40,980 --> 00:06:46,320
into web pack in our web pack config we

00:06:44,790 --> 00:06:48,570
can create a new instance of our react

00:06:46,320 --> 00:06:51,600
to HTML plug-in saying that we want to

00:06:48,570 --> 00:06:53,550
create an index.html file we want to use

00:06:51,600 --> 00:06:56,280
the component exported from component

00:06:53,550 --> 00:06:57,690
j/s from that that generated asset and

00:06:56,280 --> 00:06:59,310
we also want to provide a template for

00:06:57,690 --> 00:07:02,190
the HTML that surrounds that actual

00:06:59,310 --> 00:07:03,660
email that came out of that component so

00:07:02,190 --> 00:07:05,370
I'm sure for a crowd like this you want

00:07:03,660 --> 00:07:07,490
to know what's going on under the hood

00:07:05,370 --> 00:07:10,320
here what how does this even work well

00:07:07,490 --> 00:07:12,570
web pack plugins are basically just

00:07:10,320 --> 00:07:15,000
classes and they have an apply method on

00:07:12,570 --> 00:07:17,370
the prototype chain that accepts the

00:07:15,000 --> 00:07:19,080
compiler and is able to act on that so

00:07:17,370 --> 00:07:21,360
in this case we're hooking into the Amit

00:07:19,080 --> 00:07:23,310
lifecycle event which is when web pack

00:07:21,360 --> 00:07:25,320
is just about to output files to the

00:07:23,310 --> 00:07:27,510
file system here you have access to the

00:07:25,320 --> 00:07:29,190
compilation and that allows you to do

00:07:27,510 --> 00:07:30,780
things like this you can have access to

00:07:29,190 --> 00:07:32,550
the assets in a couple of different ways

00:07:30,780 --> 00:07:35,490
and once you've got a handle on that

00:07:32,550 --> 00:07:37,620
asset you can call the dot source method

00:07:35,490 --> 00:07:41,220
on that and get access to the raw source

00:07:37,620 --> 00:07:43,080
code of that generated asset so now we

00:07:41,220 --> 00:07:44,910
have access to the compiled code that's

00:07:43,080 --> 00:07:46,080
coming out of web pack let's run through

00:07:44,910 --> 00:07:47,850
Babel or anything like that

00:07:46,080 --> 00:07:50,130
all of that's already done for you you

00:07:47,850 --> 00:07:51,990
have access to the resulting code that

00:07:50,130 --> 00:07:54,180
you would typically then execute what

00:07:51,990 --> 00:07:55,950
can we do with that well the obvious

00:07:54,180 --> 00:07:57,810
answer might seem to be that we just

00:07:55,950 --> 00:07:59,940
simply eval it we have a big string of

00:07:57,810 --> 00:08:01,380
code let's eval but there's a there's a

00:07:59,940 --> 00:08:03,480
bit of a problem with this approach and

00:08:01,380 --> 00:08:05,490
that's the fact that eval doesn't

00:08:03,480 --> 00:08:07,560
understand node modules evals been

00:08:05,490 --> 00:08:10,410
around quite a long time much longer

00:08:07,560 --> 00:08:12,030
than node this is going to trip us up if

00:08:10,410 --> 00:08:14,280
we try to do this so what's the way

00:08:12,030 --> 00:08:15,780
forward here well when I saw this

00:08:14,280 --> 00:08:17,280
problem I actually learned about

00:08:15,780 --> 00:08:19,470
something that's been in node for a long

00:08:17,280 --> 00:08:20,880
time and I had no idea which is the VM

00:08:19,470 --> 00:08:22,590
module this is built right in

00:08:20,880 --> 00:08:24,390
and one of the things that's on the VM

00:08:22,590 --> 00:08:27,450
module is this script constructor and

00:08:24,390 --> 00:08:29,790
this constructor is basically evil on

00:08:27,450 --> 00:08:31,320
steroids because what you can do is you

00:08:29,790 --> 00:08:32,910
can create a new instance of it passing

00:08:31,320 --> 00:08:34,500
in the string of code but most

00:08:32,910 --> 00:08:36,090
importantly on that last line you can

00:08:34,500 --> 00:08:38,280
see that you can run the script in a

00:08:36,090 --> 00:08:40,410
context that you define you pass in an

00:08:38,280 --> 00:08:42,860
object and say this is the global

00:08:40,410 --> 00:08:45,540
context in which the script is running

00:08:42,860 --> 00:08:47,820
so what that means is that you have the

00:08:45,540 --> 00:08:49,950
power to create a node like environment

00:08:47,820 --> 00:08:51,200
for this string of code to running you

00:08:49,950 --> 00:08:52,820
can create a brand new

00:08:51,200 --> 00:08:54,800
global object and pass it in you can

00:08:52,820 --> 00:08:56,930
create an exports and a module exports

00:08:54,800 --> 00:08:59,150
you can even pass in your own require

00:08:56,930 --> 00:09:00,650
that acts the way you want it to work so

00:08:59,150 --> 00:09:02,570
in this case we're using a really great

00:09:00,650 --> 00:09:04,340
open source library called require like

00:09:02,570 --> 00:09:08,300
where we can pass in the name of the

00:09:04,340 --> 00:09:11,450
file which is the root of the require

00:09:08,300 --> 00:09:13,160
call and then again in that last line we

00:09:11,450 --> 00:09:16,250
can pass this context in when we execute

00:09:13,160 --> 00:09:18,290
the script that's all a bit tricky and

00:09:16,250 --> 00:09:20,090
error-prone luckily there's a great

00:09:18,290 --> 00:09:23,470
package on NPM called eval which does

00:09:20,090 --> 00:09:26,150
all this for you so that's what we use

00:09:23,470 --> 00:09:27,980
so when you bring in this eval package

00:09:26,150 --> 00:09:29,960
you can now evaluate the source code

00:09:27,980 --> 00:09:31,580
that's been generated by a web pack and

00:09:29,960 --> 00:09:35,060
we now have a handle on whatever was

00:09:31,580 --> 00:09:37,280
exported from that from that module so

00:09:35,060 --> 00:09:40,310
in our case what's being exported is a

00:09:37,280 --> 00:09:41,930
react component with that component we

00:09:40,310 --> 00:09:43,610
can now pass it to react up create

00:09:41,930 --> 00:09:45,230
element and get a handle on the react

00:09:43,610 --> 00:09:47,900
element which we can then render to a

00:09:45,230 --> 00:09:50,510
string resulting in the final HTML that

00:09:47,900 --> 00:09:52,010
we want to render to a file so web pack

00:09:50,510 --> 00:09:54,080
of course gives us the necessary hooks

00:09:52,010 --> 00:09:56,830
to then create a new asset and set that

00:09:54,080 --> 00:09:59,810
as the source code and write it to disk

00:09:56,830 --> 00:10:01,310
but what we found of course is that that

00:09:59,810 --> 00:10:03,020
this experiment only scratched the

00:10:01,310 --> 00:10:07,130
surface rendering only a single

00:10:03,020 --> 00:10:09,080
component just wasn't enough what if we

00:10:07,130 --> 00:10:11,540
wanted to render multiple routes it's

00:10:09,080 --> 00:10:13,010
very very common for us even on github

00:10:11,540 --> 00:10:15,830
pages to want to have multi-page

00:10:13,010 --> 00:10:17,150
websites but acting as a single page app

00:10:15,830 --> 00:10:19,490
and navigating between routes and

00:10:17,150 --> 00:10:22,250
showing what a real react application

00:10:19,490 --> 00:10:23,930
looks like but if we're going to go in

00:10:22,250 --> 00:10:27,350
this direction how do we decouple

00:10:23,930 --> 00:10:29,590
ourselves from react router if we if we

00:10:27,350 --> 00:10:32,000
created a react router to HTML plug-in

00:10:29,590 --> 00:10:33,380
one of the earliest problems we would

00:10:32,000 --> 00:10:36,380
have faced is the fact that the reactor

00:10:33,380 --> 00:10:37,760
router API kept changing and we couldn't

00:10:36,380 --> 00:10:40,280
couple ourselves to any particular

00:10:37,760 --> 00:10:41,390
version so we needed to avoid that but

00:10:40,280 --> 00:10:43,130
if we're going to continue down this

00:10:41,390 --> 00:10:45,290
path how do we do couple ourselves from

00:10:43,130 --> 00:10:47,240
react entirely what's so specific about

00:10:45,290 --> 00:10:48,710
react in this problem because

00:10:47,240 --> 00:10:52,940
essentially we're just trying to render

00:10:48,710 --> 00:10:54,590
an application to HTML really what we're

00:10:52,940 --> 00:10:57,370
trying to do is generalize the API from

00:10:54,590 --> 00:10:59,480
this where you export a react component

00:10:57,370 --> 00:11:02,150
towards a more general solution where

00:10:59,480 --> 00:11:04,310
you export a render function which has a

00:11:02,150 --> 00:11:06,770
much simpler contract of

00:11:04,310 --> 00:11:08,600
HTML string weather synchronously or

00:11:06,770 --> 00:11:10,790
asynchronously depending on your use

00:11:08,600 --> 00:11:13,100
case so here we've basically got the

00:11:10,790 --> 00:11:15,080
same behavior but we have more control

00:11:13,100 --> 00:11:17,030
over it because in that render function

00:11:15,080 --> 00:11:19,940
we're the ones deciding to render a

00:11:17,030 --> 00:11:21,830
react app to a string which means that

00:11:19,940 --> 00:11:23,810
it already you can see that if you

00:11:21,830 --> 00:11:25,880
wanted to render two static markup

00:11:23,810 --> 00:11:28,270
because it wasn't a single page app you

00:11:25,880 --> 00:11:30,680
have the power to easily swap that out

00:11:28,270 --> 00:11:32,510
that led to the creation of a much

00:11:30,680 --> 00:11:34,490
better plugin which is static site

00:11:32,510 --> 00:11:35,570
generator web pack plug-in I'm sure a

00:11:34,490 --> 00:11:39,260
few of you have probably seen this

00:11:35,570 --> 00:11:41,350
before the idea being that we should be

00:11:39,260 --> 00:11:44,750
able to compile a render function and

00:11:41,350 --> 00:11:46,250
execute it at Build time but most

00:11:44,750 --> 00:11:49,040
importantly we want to do it with the

00:11:46,250 --> 00:11:50,540
full power of web pack web pack gives

00:11:49,040 --> 00:11:53,270
you all the tools you need to build a

00:11:50,540 --> 00:11:54,860
really really rich application and what

00:11:53,270 --> 00:11:58,640
we wanted to do is bring that to the

00:11:54,860 --> 00:12:00,740
world of static sites now this render

00:11:58,640 --> 00:12:03,350
function needs a bit more information

00:12:00,740 --> 00:12:05,510
passed into it to be useful so the built

00:12:03,350 --> 00:12:07,850
in property that gets passed you is the

00:12:05,510 --> 00:12:09,230
path in this case we're not using it for

00:12:07,850 --> 00:12:10,760
anything yet so let's do that let's

00:12:09,230 --> 00:12:13,790
flesh that out into a bit more of a

00:12:10,760 --> 00:12:14,690
realistic application so now what we're

00:12:13,790 --> 00:12:16,460
going to do is we're going to pull in

00:12:14,690 --> 00:12:19,100
the server router from reactor router

00:12:16,460 --> 00:12:20,960
and now we've got this path we can pass

00:12:19,100 --> 00:12:22,760
into it with the location prop and

00:12:20,960 --> 00:12:24,860
you've basically got what you typically

00:12:22,760 --> 00:12:28,160
have on a node server running in your

00:12:24,860 --> 00:12:29,810
build step if you want to add Redux to

00:12:28,160 --> 00:12:31,820
your to your application it's that it's

00:12:29,810 --> 00:12:33,350
the same kind of process on every render

00:12:31,820 --> 00:12:35,450
we're going to create a new instance of

00:12:33,350 --> 00:12:37,070
our store we're gonna pass that store to

00:12:35,450 --> 00:12:40,880
the provider component that wraps our

00:12:37,070 --> 00:12:42,620
server router that wraps our app if you

00:12:40,880 --> 00:12:44,360
want to fetch data we can asynchronously

00:12:42,620 --> 00:12:46,640
do that here we're returning a promise

00:12:44,360 --> 00:12:48,410
from our render function and only when

00:12:46,640 --> 00:12:50,420
we've finished resolving all the

00:12:48,410 --> 00:12:53,240
promises for fetching data will we then

00:12:50,420 --> 00:12:55,160
attempt to render that file to HTML this

00:12:53,240 --> 00:12:56,600
fetch data function of course can be

00:12:55,160 --> 00:12:58,400
written however you want so if you want

00:12:56,600 --> 00:13:00,230
to use a library like redial which is

00:12:58,400 --> 00:13:02,120
designed for solving this problem you

00:13:00,230 --> 00:13:04,010
can do that so here we're triggering the

00:13:02,120 --> 00:13:07,590
fetch lifecycle hook that we've defined

00:13:04,010 --> 00:13:09,330
on all of our route level components

00:13:07,590 --> 00:13:12,330
the important thing to note here is that

00:13:09,330 --> 00:13:14,580
all Universal libraries can now be used

00:13:12,330 --> 00:13:16,860
at Build time any JavaScript library

00:13:14,580 --> 00:13:18,360
that you've seen or used that's designed

00:13:16,860 --> 00:13:20,460
to work in both the server and client

00:13:18,360 --> 00:13:23,220
environment can now be brought forward

00:13:20,460 --> 00:13:26,550
to the build time compilation step of

00:13:23,220 --> 00:13:29,220
your web pack build because if you think

00:13:26,550 --> 00:13:30,930
about what the job of a node server

00:13:29,220 --> 00:13:33,990
rendering a react app is it's all about

00:13:30,930 --> 00:13:36,870
converting URLs to HTML documents that's

00:13:33,990 --> 00:13:38,880
really all it's doing for you so we're

00:13:36,870 --> 00:13:43,350
bringing that server rendering workflow

00:13:38,880 --> 00:13:44,490
earlier into your build step instead now

00:13:43,350 --> 00:13:46,020
if you hook this into your web pack

00:13:44,490 --> 00:13:48,210
configure it looks something like this

00:13:46,020 --> 00:13:49,560
similar to before we're we creating a

00:13:48,210 --> 00:13:51,420
new instance of the plug-in and we're

00:13:49,560 --> 00:13:52,710
telling it that we want to reference the

00:13:51,420 --> 00:13:54,630
render bundle that we've defined

00:13:52,710 --> 00:13:56,700
elsewhere in our config but most

00:13:54,630 --> 00:13:58,860
importantly in that last argument there

00:13:56,700 --> 00:14:00,420
we're passing an array of paths that we

00:13:58,860 --> 00:14:02,279
want to render so in this case you can

00:14:00,420 --> 00:14:04,680
see that we're attempting to render a

00:14:02,279 --> 00:14:07,589
blog it's a very common use case of

00:14:04,680 --> 00:14:09,120
course now your render function is going

00:14:07,589 --> 00:14:11,339
to be called with each and every one of

00:14:09,120 --> 00:14:13,950
those paths that you've passed in but

00:14:11,339 --> 00:14:15,510
most importantly an index.html file is

00:14:13,950 --> 00:14:17,550
going to be generated for each and every

00:14:15,510 --> 00:14:19,260
path which makes for a nice simple

00:14:17,550 --> 00:14:21,870
deployment to a lot of static site

00:14:19,260 --> 00:14:27,000
hosting where the index.html file is

00:14:21,870 --> 00:14:28,680
automatically resolved for a path now it

00:14:27,000 --> 00:14:31,020
became apparent to us very quickly that

00:14:28,680 --> 00:14:34,500
we'd stumbled on a very important new

00:14:31,020 --> 00:14:37,140
pattern an initial problem that we had

00:14:34,500 --> 00:14:38,760
early on as we were rebuilding the UI is

00:14:37,140 --> 00:14:41,190
that we had to report some of our new

00:14:38,760 --> 00:14:43,050
react code to our legacy platform which

00:14:41,190 --> 00:14:46,530
still had some time left to hang around

00:14:43,050 --> 00:14:49,320
in production we leverage the really

00:14:46,530 --> 00:14:51,600
great open source autosuggest component

00:14:49,320 --> 00:14:54,180
but by mission Marasco who was actually

00:14:51,600 --> 00:14:55,770
working for us at the time and we needed

00:14:54,180 --> 00:14:58,350
to add it to the home page of our

00:14:55,770 --> 00:15:01,080
classic site highlighted there on on the

00:14:58,350 --> 00:15:05,040
screen and we'd built this to work

00:15:01,080 --> 00:15:07,410
across both of our projects now the

00:15:05,040 --> 00:15:11,160
problem is that that classic site was

00:15:07,410 --> 00:15:13,680
not a node server rendered app it was a

00:15:11,160 --> 00:15:15,660
classic dotnet app using very old

00:15:13,680 --> 00:15:17,840
technology and so that meant that if we

00:15:15,660 --> 00:15:20,450
weren't careful our form would in

00:15:17,840 --> 00:15:22,730
said look something like this right you

00:15:20,450 --> 00:15:24,080
would load the page up everything dotnet

00:15:22,730 --> 00:15:25,940
did would have been rendered and

00:15:24,080 --> 00:15:27,340
everything reacted would be waiting

00:15:25,940 --> 00:15:31,090
until the JavaScript loaded and

00:15:27,340 --> 00:15:33,980
obviously this was unacceptable for us

00:15:31,090 --> 00:15:36,380
but how could we also avoid the

00:15:33,980 --> 00:15:38,330
complexity of server rendering the last

00:15:36,380 --> 00:15:40,730
thing we wanted to do was introduce a

00:15:38,330 --> 00:15:42,770
much more complex node server based

00:15:40,730 --> 00:15:44,630
rendering architecture hooked into our

00:15:42,770 --> 00:15:47,660
legacy site we didn't want to go there

00:15:44,630 --> 00:15:49,310
so again we thought some more about this

00:15:47,660 --> 00:15:51,170
problem this one seemed actually a

00:15:49,310 --> 00:15:53,720
little bit more tricky to us how are we

00:15:51,170 --> 00:15:55,730
going to solve this and that's when a

00:15:53,720 --> 00:15:58,460
light bulb went off for me because the

00:15:55,730 --> 00:15:59,660
form element is the same for every user

00:15:58,460 --> 00:16:02,000
that's something we noticed very quickly

00:15:59,660 --> 00:16:03,380
and that meant that we could statically

00:16:02,000 --> 00:16:05,180
render and all the work that had been

00:16:03,380 --> 00:16:07,310
put into the static site generator

00:16:05,180 --> 00:16:10,130
plug-in could be applied in this new use

00:16:07,310 --> 00:16:12,920
case so what we did is we built the form

00:16:10,130 --> 00:16:14,600
as a standalone react component and then

00:16:12,920 --> 00:16:16,340
we rendered that form with static site

00:16:14,600 --> 00:16:19,790
generator webpack plugin just static

00:16:16,340 --> 00:16:21,410
HTML static JavaScript static CSS then

00:16:19,790 --> 00:16:24,440
we uploaded those static assets to s3

00:16:21,410 --> 00:16:26,210
and then in our classic application we

00:16:24,440 --> 00:16:28,750
would dynamically inject those static

00:16:26,210 --> 00:16:31,070
assets into the site at runtime

00:16:28,750 --> 00:16:32,990
essentially what we've done is we had

00:16:31,070 --> 00:16:36,050
got all the power of server rendered

00:16:32,990 --> 00:16:40,430
react - the server all the work had been

00:16:36,050 --> 00:16:42,320
done at Build time now this pattern

00:16:40,430 --> 00:16:43,570
continued to pay off for us in

00:16:42,320 --> 00:16:45,950
unexpected ways

00:16:43,570 --> 00:16:49,640
because what began life as a tool for

00:16:45,950 --> 00:16:52,100
simple static demo sites evolved into

00:16:49,640 --> 00:16:53,270
the basis of our living style guide this

00:16:52,100 --> 00:16:55,670
is something that we were just getting

00:16:53,270 --> 00:16:57,770
started with and this is what it looks

00:16:55,670 --> 00:16:59,300
like the style guide was all about

00:16:57,770 --> 00:17:01,460
showing off all the components and

00:16:59,300 --> 00:17:03,470
styles that are available to you working

00:17:01,460 --> 00:17:05,810
in this ecosystem explaining the

00:17:03,470 --> 00:17:07,400
thinking behind them and this is

00:17:05,810 --> 00:17:09,740
something that we thought was was really

00:17:07,400 --> 00:17:12,440
really important that it also showed off

00:17:09,740 --> 00:17:14,570
how it worked in a real application so

00:17:12,440 --> 00:17:16,370
what you had in that example there was

00:17:14,570 --> 00:17:18,980
that we had a complete static site

00:17:16,370 --> 00:17:21,080
demonstrating its usage the static site

00:17:18,980 --> 00:17:23,330
consumed the style guide in a way that a

00:17:21,080 --> 00:17:26,000
standard web pack based app would

00:17:23,330 --> 00:17:27,530
consume it which which serves is a great

00:17:26,000 --> 00:17:30,710
way to iterate on the style guide as

00:17:27,530 --> 00:17:31,280
well but it was built with a standard

00:17:30,710 --> 00:17:33,380
unit

00:17:31,280 --> 00:17:35,950
so cool so it was a static site built

00:17:33,380 --> 00:17:38,930
the way we build our server ended ups

00:17:35,950 --> 00:17:41,240
it was built with reacts with react

00:17:38,930 --> 00:17:43,310
router read off without a fetching CSS

00:17:41,240 --> 00:17:47,330
modules and the style guide of course

00:17:43,310 --> 00:17:50,690
consuming itself so even for our

00:17:47,330 --> 00:17:52,790
simplest pages we could now use the

00:17:50,690 --> 00:17:54,890
standard toolset across the board with

00:17:52,790 --> 00:17:56,960
the full power of web pack to generate

00:17:54,890 --> 00:17:59,990
static sites as well as server ended

00:17:56,960 --> 00:18:01,310
applications so even with wildly

00:17:59,990 --> 00:18:03,380
different constraints where some

00:18:01,310 --> 00:18:06,050
applications didn't need to be server

00:18:03,380 --> 00:18:07,880
rendered while others did suddenly

00:18:06,050 --> 00:18:10,840
different projects didn't have to feel

00:18:07,880 --> 00:18:13,280
like different worlds from each other

00:18:10,840 --> 00:18:15,050
now more weeks pass of course in our

00:18:13,280 --> 00:18:16,220
application has started to become a

00:18:15,050 --> 00:18:18,620
reality and we're shipping it to

00:18:16,220 --> 00:18:21,580
production and as always happens at some

00:18:18,620 --> 00:18:23,540
point we had our first minor outage

00:18:21,580 --> 00:18:26,960
luckily it wasn't for too long we

00:18:23,540 --> 00:18:29,270
recovered okay but our react servers

00:18:26,960 --> 00:18:31,670
were down while the api's that we

00:18:29,270 --> 00:18:34,280
consumed was still up now we thought

00:18:31,670 --> 00:18:37,970
about this problem some more and what we

00:18:34,280 --> 00:18:39,440
realized is that the application could

00:18:37,970 --> 00:18:42,730
still theoretically work if it was

00:18:39,440 --> 00:18:45,080
client-side only our api's was still up

00:18:42,730 --> 00:18:46,550
the way we approached the solution to

00:18:45,080 --> 00:18:48,860
this is that with every build of our

00:18:46,550 --> 00:18:50,870
application we would first server build

00:18:48,860 --> 00:18:52,460
then client build which is what we'd

00:18:50,870 --> 00:18:54,410
been doing up into that point but we

00:18:52,460 --> 00:18:58,400
introduced a third step which was a

00:18:54,410 --> 00:19:00,320
static fallback build what we had now

00:18:58,400 --> 00:19:02,690
was a static a separate static

00:19:00,320 --> 00:19:04,280
deployment in case of emergency if

00:19:02,690 --> 00:19:05,890
anything went wrong and we would

00:19:04,280 --> 00:19:08,750
typically have served up an error page

00:19:05,890 --> 00:19:11,600
let's serve up a a pure static

00:19:08,750 --> 00:19:13,940
application instead so while our server

00:19:11,600 --> 00:19:16,760
might on a good day return HTML like

00:19:13,940 --> 00:19:19,190
this on a bad day we just return that

00:19:16,760 --> 00:19:21,200
instead with the full client-side bundle

00:19:19,190 --> 00:19:23,810
intact ready to go talking to the api's

00:19:21,200 --> 00:19:25,310
that are still working here what we had

00:19:23,810 --> 00:19:28,340
here essentially was the world's most

00:19:25,310 --> 00:19:30,830
useful 503 error page much better than a

00:19:28,340 --> 00:19:32,540
sad face or some cute animation we

00:19:30,830 --> 00:19:34,970
actually had a useable application that

00:19:32,540 --> 00:19:38,600
our users might not even notice anything

00:19:34,970 --> 00:19:40,130
had gone wrong but the initial container

00:19:38,600 --> 00:19:41,870
doesn't have to be blank that was just

00:19:40,130 --> 00:19:43,190
something we did for simplicity there

00:19:41,870 --> 00:19:44,060
are a lot of other things you can do

00:19:43,190 --> 00:19:46,190
here

00:19:44,060 --> 00:19:48,200
a really good example this is a project

00:19:46,190 --> 00:19:50,810
called colorable colorable by Brent

00:19:48,200 --> 00:19:52,010
Jackson which is up on github it's doing

00:19:50,810 --> 00:19:54,350
something I'm pretty passionate about

00:19:52,010 --> 00:19:55,700
which is validating the the contrast

00:19:54,350 --> 00:19:58,310
ratio between foreground and background

00:19:55,700 --> 00:20:00,440
text back the background colors to make

00:19:58,310 --> 00:20:02,120
sure that your site is accessible it

00:20:00,440 --> 00:20:03,440
tells you the the rating that you get as

00:20:02,120 --> 00:20:05,570
well as the ratio and it allows you to

00:20:03,440 --> 00:20:07,040
provide your own colors now this is the

00:20:05,570 --> 00:20:08,630
pre-rendered view that comes out of

00:20:07,040 --> 00:20:10,850
github pages is actually using the

00:20:08,630 --> 00:20:12,620
technologies we're talking about so this

00:20:10,850 --> 00:20:14,660
is what you see immediately when you hit

00:20:12,620 --> 00:20:17,210
that page but if you've if you've

00:20:14,660 --> 00:20:18,500
provided overrated colors different

00:20:17,210 --> 00:20:20,000
values that you see at the bottom there

00:20:18,500 --> 00:20:21,890
what's going to happen is when the

00:20:20,000 --> 00:20:23,570
client-side JavaScript kicks in you're

00:20:21,890 --> 00:20:25,490
suddenly going to get this view the

00:20:23,570 --> 00:20:26,720
client rendered view so some of the text

00:20:25,490 --> 00:20:29,060
might change some of the colors might

00:20:26,720 --> 00:20:30,920
change the form values will update but

00:20:29,060 --> 00:20:33,680
you've got to see something usable right

00:20:30,920 --> 00:20:36,020
off the bat essentially this is your

00:20:33,680 --> 00:20:37,700
loading screen much better than a blank

00:20:36,020 --> 00:20:40,610
page or a spinner I'm sure you would

00:20:37,700 --> 00:20:42,380
agree we've seen a similar approach

00:20:40,610 --> 00:20:43,910
coming out of the progressive web app

00:20:42,380 --> 00:20:47,120
community with service workers and

00:20:43,910 --> 00:20:49,130
application shell architectures there's

00:20:47,120 --> 00:20:51,020
also a really good article about this on

00:20:49,130 --> 00:20:54,020
site point with the approach called

00:20:51,020 --> 00:20:55,580
skeleton screens and really all these

00:20:54,020 --> 00:20:56,960
things are about making sure that we

00:20:55,580 --> 00:20:59,180
render as much as possible

00:20:56,960 --> 00:21:01,100
as early as possible even ahead of time

00:20:59,180 --> 00:21:04,910
to make sure we get usable content to

00:21:01,100 --> 00:21:07,880
the users as fast as possible even when

00:21:04,910 --> 00:21:09,860
we seemingly have nothing to render the

00:21:07,880 --> 00:21:10,850
classic case of this is what Facebook

00:21:09,860 --> 00:21:13,340
have been doing with their newsfeed

00:21:10,850 --> 00:21:15,680
where instead of showing your blank page

00:21:13,340 --> 00:21:16,790
or showing you a loading indicator even

00:21:15,680 --> 00:21:18,830
though they have to fetch some data

00:21:16,790 --> 00:21:21,260
they're going to show you a silhouette

00:21:18,830 --> 00:21:22,640
of a newsfeed to help you get get a

00:21:21,260 --> 00:21:24,410
sense of the content that you're about

00:21:22,640 --> 00:21:26,480
to see and improve that perceived

00:21:24,410 --> 00:21:28,640
performance so when eventually the

00:21:26,480 --> 00:21:30,350
content loads it feels much much

00:21:28,640 --> 00:21:32,480
snappier but if we go back and we look

00:21:30,350 --> 00:21:34,370
at that screenshot again you'll see that

00:21:32,480 --> 00:21:36,500
there's nothing here that's unique to

00:21:34,370 --> 00:21:38,360
any particular user you could serve this

00:21:36,500 --> 00:21:41,690
up as the initial render for everyone

00:21:38,360 --> 00:21:43,730
who visits this page what we're doing

00:21:41,690 --> 00:21:45,500
here is with a few simple tricks were

00:21:43,730 --> 00:21:47,870
drastically improving the perceived

00:21:45,500 --> 00:21:51,050
performance of our applications bringing

00:21:47,870 --> 00:21:53,200
forward useable content as as far as we

00:21:51,050 --> 00:21:55,580
can

00:21:53,200 --> 00:21:57,170
what's great about the solution up to

00:21:55,580 --> 00:21:59,480
this point is that we it had been built

00:21:57,170 --> 00:22:02,360
with a low level uh opinionated plugin

00:21:59,480 --> 00:22:04,640
by design and of course this allows us

00:22:02,360 --> 00:22:07,880
to layer opinionated tooling on top

00:22:04,640 --> 00:22:09,050
however we like the best example of this

00:22:07,880 --> 00:22:11,360
I've seen in the open-source community

00:22:09,050 --> 00:22:13,610
is a really fantastic project called

00:22:11,360 --> 00:22:15,440
Gatsby by Carl Matthews it's more of

00:22:13,610 --> 00:22:17,330
your traditional static site generator

00:22:15,440 --> 00:22:19,580
and it looks something like this the

00:22:17,330 --> 00:22:21,050
authoring experience is definitely

00:22:19,580 --> 00:22:23,210
something that those of us in the react

00:22:21,050 --> 00:22:24,740
community would find very familiar on

00:22:23,210 --> 00:22:26,750
the left there what you can see is

00:22:24,740 --> 00:22:28,670
editing markdown like you would expect

00:22:26,750 --> 00:22:31,010
from a static site generator but as you

00:22:28,670 --> 00:22:33,530
hit save it's updating live on that

00:22:31,010 --> 00:22:34,640
right hand side in the browser so every

00:22:33,530 --> 00:22:36,590
time you hit save you got the hot

00:22:34,640 --> 00:22:38,810
reloading all the benefits that we we

00:22:36,590 --> 00:22:40,520
strive for our react applications on a

00:22:38,810 --> 00:22:44,030
static site on a blog or something

00:22:40,520 --> 00:22:46,820
similar to that so this is built with

00:22:44,030 --> 00:22:48,920
web pack with react with reactor router

00:22:46,820 --> 00:22:51,650
and with static site generator web pack

00:22:48,920 --> 00:22:53,300
plug-in so again it's all the power of a

00:22:51,650 --> 00:22:55,040
full server rendered application that we

00:22:53,300 --> 00:22:57,590
typically expect but it's generating a

00:22:55,040 --> 00:22:58,670
static site it's a fluid client-side

00:22:57,590 --> 00:23:01,550
application where you can quickly

00:22:58,670 --> 00:23:03,050
navigate between routes it's not moving

00:23:01,550 --> 00:23:04,910
between documents like you would

00:23:03,050 --> 00:23:08,150
typically do on on ER on a blog that we

00:23:04,910 --> 00:23:09,800
would expect but the best part of it is

00:23:08,150 --> 00:23:11,720
that gatsby users remain blissfully

00:23:09,800 --> 00:23:13,430
unaware of the fact that these are the

00:23:11,720 --> 00:23:14,720
technologies behind it to them it's just

00:23:13,430 --> 00:23:17,750
a simple static site generator

00:23:14,720 --> 00:23:19,310
generating HTML and they don't have to

00:23:17,750 --> 00:23:24,620
deal with all the complexities behind

00:23:19,310 --> 00:23:26,180
this now what started off as a niche

00:23:24,620 --> 00:23:28,370
problem or what we thought was a niche

00:23:26,180 --> 00:23:30,110
problem which is taking react components

00:23:28,370 --> 00:23:32,270
and rendering them so that we can put

00:23:30,110 --> 00:23:33,620
them on github pages this is not a

00:23:32,270 --> 00:23:36,290
problem that many of us would have to

00:23:33,620 --> 00:23:38,600
solve instead what we found is that we'd

00:23:36,290 --> 00:23:40,310
stumbled on a widely applicable solution

00:23:38,600 --> 00:23:44,750
that continued to pay off for us in ways

00:23:40,310 --> 00:23:46,880
that we had never anticipated ultimately

00:23:44,750 --> 00:23:48,950
the point that I want to make here is

00:23:46,880 --> 00:23:51,950
that Universal rendering needn't only be

00:23:48,950 --> 00:23:53,540
relevant to a select few there are a lot

00:23:51,950 --> 00:23:55,280
of us in this room that don't feel the

00:23:53,540 --> 00:23:57,230
need to serve render our applications

00:23:55,280 --> 00:23:59,150
but there's still plenty of room for us

00:23:57,230 --> 00:24:00,770
to fit universal rendering into our

00:23:59,150 --> 00:24:03,620
workflows in ways that I've showed you

00:24:00,770 --> 00:24:05,360
today because now as front-end

00:24:03,620 --> 00:24:06,290
developers we have a slightly different

00:24:05,360 --> 00:24:08,660
choice

00:24:06,290 --> 00:24:11,450
we can serve a render we can client

00:24:08,660 --> 00:24:14,420
render or we can statically create

00:24:11,450 --> 00:24:17,480
pre-render our applications to HTML or I

00:24:14,420 --> 00:24:18,920
think most interestingly we can create a

00:24:17,480 --> 00:24:20,810
unique combination of all three

00:24:18,920 --> 00:24:24,320
approaches to suit our particular use

00:24:20,810 --> 00:24:26,120
cases at the end of the day the reason

00:24:24,320 --> 00:24:27,950
I'm here to talk to you is because I

00:24:26,120 --> 00:24:30,860
want to change the way we think about

00:24:27,950 --> 00:24:33,230
static sites for a lot of us myself

00:24:30,860 --> 00:24:34,850
included we think about dynamic server

00:24:33,230 --> 00:24:36,500
rendered applications and static sites

00:24:34,850 --> 00:24:38,330
as being completely different things

00:24:36,500 --> 00:24:39,890
 or sharing very little in the way

00:24:38,330 --> 00:24:41,570
that we think about them the way that we

00:24:39,890 --> 00:24:43,820
build them the user experiences that we

00:24:41,570 --> 00:24:45,560
expect from them that does not have to

00:24:43,820 --> 00:24:47,270
be the case thanks to modern tooling and

00:24:45,560 --> 00:24:50,660
hopefully it's something that you'll

00:24:47,270 --> 00:24:53,510
think very long and hard about trying

00:24:50,660 --> 00:24:55,310
out in your own applications if you have

00:24:53,510 --> 00:24:57,320
any questions about this I'd love to

00:24:55,310 --> 00:24:59,180
answer them of course but other than

00:24:57,320 --> 00:25:01,600
that that's it for me thank you so much

00:24:59,180 --> 00:25:01,600
for listening

00:25:09,190 --> 00:25:13,100
all right that's hard for me to read

00:25:11,690 --> 00:25:15,530
okay

00:25:13,100 --> 00:25:18,290
this seems like a lot of complexity for

00:25:15,530 --> 00:25:22,100
a benefit that maybe doesn't have many

00:25:18,290 --> 00:25:24,200
real-world use cases I'm not sure if I

00:25:22,100 --> 00:25:26,420
agree with the the premise that this

00:25:24,200 --> 00:25:27,470
doesn't have many real-world use cases I

00:25:26,420 --> 00:25:29,030
mean one of the things I tried to

00:25:27,470 --> 00:25:32,450
present was that there was a

00:25:29,030 --> 00:25:34,100
surprisingly wide variety of real-world

00:25:32,450 --> 00:25:35,960
use cases that we could actually solve

00:25:34,100 --> 00:25:38,180
with this approach and it is just

00:25:35,960 --> 00:25:40,310
scratching the surface of it I agree

00:25:38,180 --> 00:25:42,350
that there is some complexity to it but

00:25:40,310 --> 00:25:45,070
it's it shares complexity with webpack I

00:25:42,350 --> 00:25:47,390
would argue if you're using webpack

00:25:45,070 --> 00:25:49,490
that's where the bulk of your complexity

00:25:47,390 --> 00:25:53,540
is not in this final static rendering

00:25:49,490 --> 00:25:55,070
step so I think if webpack is is too

00:25:53,540 --> 00:25:56,750
complex for you that's a problem that

00:25:55,070 --> 00:25:59,270
many people are already trying to solve

00:25:56,750 --> 00:26:01,610
and I think that's worth solving gatsby

00:25:59,270 --> 00:26:03,290
is a really good example of trying to

00:26:01,610 --> 00:26:07,550
solve this particular problem of

00:26:03,290 --> 00:26:08,510
rendering a static site so again if this

00:26:07,550 --> 00:26:10,640
is something that you think that it's

00:26:08,510 --> 00:26:13,190
too complex I would really recommend

00:26:10,640 --> 00:26:15,230
looking into ways to simplify that and

00:26:13,190 --> 00:26:18,440
open sourcing it for the people to share

00:26:15,230 --> 00:26:20,240
like what we've seen with gatsby what do

00:26:18,440 --> 00:26:22,480
you think about next is server-side

00:26:20,240 --> 00:26:25,250
rendering approach I think it's awesome

00:26:22,480 --> 00:26:27,490
next is is really really good and I

00:26:25,250 --> 00:26:30,230
think I think for a lot of use cases

00:26:27,490 --> 00:26:32,300
where you you really just want to follow

00:26:30,230 --> 00:26:34,760
the conventions and have something that

00:26:32,300 --> 00:26:37,070
does all the work for you next jeaious

00:26:34,760 --> 00:26:38,270
is a really good candidate for that it's

00:26:37,070 --> 00:26:41,780
something that I really want to check

00:26:38,270 --> 00:26:43,790
out for myself what about dynamic path

00:26:41,780 --> 00:26:46,610
definition and webpack plug-in

00:26:43,790 --> 00:26:48,200
configuration well I mean it's dynamic

00:26:46,610 --> 00:26:49,940
it can be dynamic in the sense that it's

00:26:48,200 --> 00:26:51,290
JavaScript generating that array because

00:26:49,940 --> 00:26:54,050
your your web pack config is a

00:26:51,290 --> 00:26:57,200
JavaScript file at the end of the day

00:26:54,050 --> 00:26:58,430
you have to resolve it to a static set

00:26:57,200 --> 00:27:01,310
of cars that you're going to render so

00:26:58,430 --> 00:27:03,110
that your build can actually finish so I

00:27:01,310 --> 00:27:07,850
would say that you can have dynamic

00:27:03,110 --> 00:27:09,320
paths but it if you need to mix

00:27:07,850 --> 00:27:12,260
approaches like if you actually need

00:27:09,320 --> 00:27:13,700
something dynamic in production like

00:27:12,260 --> 00:27:17,480
I've said there are ways in which you

00:27:13,700 --> 00:27:18,720
can mix a classic static site approach

00:27:17,480 --> 00:27:20,789
with a server render to pro

00:27:18,720 --> 00:27:22,049
and have the best of both world so for

00:27:20,789 --> 00:27:24,210
example if you have a server rendered

00:27:22,049 --> 00:27:26,730
application in our example we had a

00:27:24,210 --> 00:27:30,210
dotnet application but even if it was

00:27:26,730 --> 00:27:32,190
using node and react on the server you

00:27:30,210 --> 00:27:34,260
could potentially find opportunities to

00:27:32,190 --> 00:27:37,950
statically render things to HTML and

00:27:34,260 --> 00:27:39,179
read them from disk at runtime so yeah

00:27:37,950 --> 00:27:42,929
there's a few approaches that you could

00:27:39,179 --> 00:27:46,010
take to deal with this how does this

00:27:42,929 --> 00:27:50,700
affect the size of the resulting bundles

00:27:46,010 --> 00:27:52,230
it has no effect beyond again beyond

00:27:50,700 --> 00:27:53,520
what you would typically find with web

00:27:52,230 --> 00:27:56,580
packs so if you want to do bundle

00:27:53,520 --> 00:27:59,280
splitting you can do that it's

00:27:56,580 --> 00:28:01,409
completely on you really again all this

00:27:59,280 --> 00:28:03,960
is doing is just bringing forward that

00:28:01,409 --> 00:28:07,799
step of rendering to HTML to build time

00:28:03,960 --> 00:28:11,549
rather than at runtime on the server how

00:28:07,799 --> 00:28:14,580
can we add transitions between pages yes

00:28:11,549 --> 00:28:16,380
so that this is a problem I feel like a

00:28:14,580 --> 00:28:18,809
lot of my answers are going to be very

00:28:16,380 --> 00:28:21,210
similar here transitions between pages

00:28:18,809 --> 00:28:22,950
is something that if you can if you can

00:28:21,210 --> 00:28:25,919
do that on a server rendered application

00:28:22,950 --> 00:28:27,299
you can do it with a static site again

00:28:25,919 --> 00:28:30,030
it's just bringing forward that that

00:28:27,299 --> 00:28:32,309
that rendering to HTML into your build

00:28:30,030 --> 00:28:33,720
step rather than at runtime so you can

00:28:32,309 --> 00:28:35,820
use your react router in your static

00:28:33,720 --> 00:28:37,230
site which I've done and react router

00:28:35,820 --> 00:28:39,659
has ways in which you can transition

00:28:37,230 --> 00:28:41,250
between pages all of those methods that

00:28:39,659 --> 00:28:43,559
you typically use you can now bring to

00:28:41,250 --> 00:28:45,900
your static sites so again one of the

00:28:43,559 --> 00:28:48,330
big messages of this talk is that all

00:28:45,900 --> 00:28:50,730
that power that you typically associate

00:28:48,330 --> 00:28:52,740
with a server rendered reactor can can

00:28:50,730 --> 00:28:56,250
come to your your static site including

00:28:52,740 --> 00:28:58,200
transitions between pages have you

00:28:56,250 --> 00:29:00,419
thought of incrementally rendering

00:28:58,200 --> 00:29:02,280
static sites ie for large blog you might

00:29:00,419 --> 00:29:04,860
want to avoid rear-ending pages which

00:29:02,280 --> 00:29:06,570
didn't change no this isn't something

00:29:04,860 --> 00:29:08,789
I've really thought about I'm sure you

00:29:06,570 --> 00:29:11,909
can do it but I haven't had to deal with

00:29:08,789 --> 00:29:13,409
this um how about code splitting and

00:29:11,909 --> 00:29:15,200
making the app a progressive web app

00:29:13,409 --> 00:29:18,860
that's a great idea

00:29:15,200 --> 00:29:22,799
sure you can do it I haven't done it

00:29:18,860 --> 00:29:25,289
what about context in eShop user can add

00:29:22,799 --> 00:29:27,780
items into basket and HTML will change

00:29:25,289 --> 00:29:32,480
if I want static generator I can use

00:29:27,780 --> 00:29:32,480
Jekyll alright thanks for that so

00:29:34,670 --> 00:29:38,550
yeah again I'm gonna a broken record a

00:29:37,200 --> 00:29:40,500
little bit but anything you can do in a

00:29:38,550 --> 00:29:42,210
typical server rendered app you can do

00:29:40,500 --> 00:29:44,040
in your in your client side up one of

00:29:42,210 --> 00:29:46,680
the things that we do that we've done at

00:29:44,040 --> 00:29:49,080
seek is that we realize that some of the

00:29:46,680 --> 00:29:50,850
content we actually didn't want a server

00:29:49,080 --> 00:29:53,190
render we wanted to defer some of it to

00:29:50,850 --> 00:29:55,290
the client anything anything user

00:29:53,190 --> 00:29:57,000
specific we deferred to the client

00:29:55,290 --> 00:29:58,950
so there's API calls that happen on the

00:29:57,000 --> 00:30:00,900
server and then we have API calls that

00:29:58,950 --> 00:30:03,470
only happen on the client and we use

00:30:00,900 --> 00:30:07,470
redial to manage those lifecycle hooks

00:30:03,470 --> 00:30:09,480
so so what you can do for an example

00:30:07,470 --> 00:30:12,000
like this is that you could server you

00:30:09,480 --> 00:30:14,360
could statically render all the content

00:30:12,000 --> 00:30:16,650
that everyone saves and something like a

00:30:14,360 --> 00:30:19,740
shopping cart that's unique to each user

00:30:16,650 --> 00:30:21,330
you could not render that in your in

00:30:19,740 --> 00:30:26,330
your build step and defer that to the

00:30:21,330 --> 00:30:29,130
client the do the other assets

00:30:26,330 --> 00:30:31,680
automatically injected into the HTML CSS

00:30:29,130 --> 00:30:33,960
J is like an HTML web pack plug-in I

00:30:31,680 --> 00:30:37,350
know they're not automatically injected

00:30:33,960 --> 00:30:39,390
that's on on you to manage that yeah you

00:30:37,350 --> 00:30:42,330
have full control over the HTML coming

00:30:39,390 --> 00:30:43,950
out the web pack stats for that for the

00:30:42,330 --> 00:30:45,630
bill that passed into your render plugin

00:30:43,950 --> 00:30:47,850
so you have access to all the

00:30:45,630 --> 00:30:49,380
information that you need but there's

00:30:47,850 --> 00:30:50,940
definitely still room to make this a

00:30:49,380 --> 00:30:53,720
little easier so if that's something you

00:30:50,940 --> 00:30:55,920
care about please talk to me after this

00:30:53,720 --> 00:30:58,650
do you still have server-side rendering

00:30:55,920 --> 00:31:00,960
and these pages are used as fallback yes

00:30:58,650 --> 00:31:03,600
so sir we do want dynamic server-side

00:31:00,960 --> 00:31:06,090
rendering for SEO for that initial

00:31:03,600 --> 00:31:07,730
performance so if you're looking at it

00:31:06,090 --> 00:31:10,650
through a magnifying glass

00:31:07,730 --> 00:31:13,260
eventually that the losing out on the

00:31:10,650 --> 00:31:15,180
server-side rendering is a bit of a drop

00:31:13,260 --> 00:31:17,580
in the quality of the application from

00:31:15,180 --> 00:31:19,680
our point of view but the way we see it

00:31:17,580 --> 00:31:22,710
is that the static site is a massive

00:31:19,680 --> 00:31:25,200
improvement over over a standard error

00:31:22,710 --> 00:31:26,580
page if something went wrong so so

00:31:25,200 --> 00:31:30,660
that's why we sort of manage these two

00:31:26,580 --> 00:31:32,520
approaches at the same time Wow

00:31:30,660 --> 00:31:33,990
what do you think about the 15 kilo

00:31:32,520 --> 00:31:39,300
webpack plugin how does it compare to

00:31:33,990 --> 00:31:40,590
yours yeah I I wish I'd known about this

00:31:39,300 --> 00:31:42,000
plug-in before I gave this talk because

00:31:40,590 --> 00:31:45,420
it pretty much invalidates everything I

00:31:42,000 --> 00:31:47,100
said not true are you aware of any taken

00:31:45,420 --> 00:31:56,610
that enables progressive server-side

00:31:47,100 --> 00:31:57,960
rendering using react what I yeah yeah

00:31:56,610 --> 00:32:00,570
rendered to string on a node server

00:31:57,960 --> 00:32:02,730
unless I misunderstand the question I

00:32:00,570 --> 00:32:06,200
think that's all the questions so that's

00:32:02,730 --> 00:32:06,200

YouTube URL: https://www.youtube.com/watch?v=ovIrOMBbWrc


