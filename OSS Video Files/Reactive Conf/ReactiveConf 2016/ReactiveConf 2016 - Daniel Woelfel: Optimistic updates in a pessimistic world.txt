Title: ReactiveConf 2016 - Daniel Woelfel: Optimistic updates in a pessimistic world
Publication date: 2016-11-24
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Daniel Woelfel: Optimistic updates in a pessimistic world

-

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, itâ€™s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,180 --> 00:00:10,240
I'm talking about up the optimistic

00:00:06,490 --> 00:00:16,090
updates so things I've done in the past

00:00:10,240 --> 00:00:17,980
he mentioned circle CI and the front end

00:00:16,090 --> 00:00:21,250
for circle which is a continuous

00:00:17,980 --> 00:00:23,230
delivery platform that's built in

00:00:21,250 --> 00:00:24,970
cloture script in ohm and here's the

00:00:23,230 --> 00:00:27,910
link if you want to check it out

00:00:24,970 --> 00:00:29,910
encourage everyone if you're working on

00:00:27,910 --> 00:00:33,460
a front-end and you have the opportunity

00:00:29,910 --> 00:00:36,970
open source it it's a it makes for a

00:00:33,460 --> 00:00:38,770
great recruiting pipeline helps out

00:00:36,970 --> 00:00:42,760
other people in the community community

00:00:38,770 --> 00:00:45,940
learn how to write applications so

00:00:42,760 --> 00:00:48,820
everyone benefits also was the

00:00:45,940 --> 00:00:51,270
co-founder at precursor which was a

00:00:48,820 --> 00:00:54,219
collaborative prototyping application

00:00:51,270 --> 00:00:56,350
used a lot of the things that I'll be

00:00:54,219 --> 00:00:59,469
talking about in his talk and currently

00:00:56,350 --> 00:01:02,500
at Facebook working on a team that was

00:00:59,469 --> 00:01:05,019
built after Facebook acquired with AI

00:01:02,500 --> 00:01:08,409
which is a natural language for

00:01:05,019 --> 00:01:09,700
developers let's do a quick plug if

00:01:08,409 --> 00:01:11,979
you're building BOTS we have this

00:01:09,700 --> 00:01:13,240
wonderful thing called bot engine you

00:01:11,979 --> 00:01:16,440
can imagine if you're dealing with like

00:01:13,240 --> 00:01:20,229
natural language there's lots of complex

00:01:16,440 --> 00:01:22,060
stuff involved so with handles that for

00:01:20,229 --> 00:01:26,140
you gives you a nice simple declarative

00:01:22,060 --> 00:01:28,510
interface for building BOTS okay so

00:01:26,140 --> 00:01:30,909
we'll start with a definition what are

00:01:28,510 --> 00:01:33,159
optimistic updates so an optimistic

00:01:30,909 --> 00:01:35,770
update is when the client predicts the

00:01:33,159 --> 00:01:38,380
result of a transaction and then applies

00:01:35,770 --> 00:01:41,530
it before the result comes back from the

00:01:38,380 --> 00:01:44,770
server so it's called optimistic because

00:01:41,530 --> 00:01:47,079
the client has to have a fairly rosy

00:01:44,770 --> 00:01:49,240
outlook on life if it's if it's going to

00:01:47,079 --> 00:01:51,939
assume the server returns what it

00:01:49,240 --> 00:01:56,159
expects so I can kind of give a quick

00:01:51,939 --> 00:01:58,560
example I've made this little demo map

00:01:56,159 --> 00:02:04,450
so we're gonna write a comments

00:01:58,560 --> 00:02:07,600
hello reactive submit it and we're gonna

00:02:04,450 --> 00:02:09,549
hold up the request here we're not going

00:02:07,600 --> 00:02:11,950
to submit it yet to the server but we

00:02:09,549 --> 00:02:15,730
see that we have the comment already

00:02:11,950 --> 00:02:20,440
displayed not just in that Gaia

00:02:15,730 --> 00:02:21,900
go back to the talk okay so the first

00:02:20,440 --> 00:02:24,400
thing we need when we're building

00:02:21,900 --> 00:02:26,920
optimistic updates is we need some way

00:02:24,400 --> 00:02:29,290
for the client to predict the result

00:02:26,920 --> 00:02:31,840
that the server is going to return but

00:02:29,290 --> 00:02:37,510
as to implement some version of the

00:02:31,840 --> 00:02:41,770
server logic so here's a very simple

00:02:37,510 --> 00:02:44,410
approach I pulled this out of some early

00:02:41,770 --> 00:02:49,570
reactive documentation simplified it a

00:02:44,410 --> 00:02:54,030
bit but you can see it gets the comments

00:02:49,570 --> 00:02:56,830
out of the state adds the new comment

00:02:54,030 --> 00:02:58,990
immediately renders and then it's in

00:02:56,830 --> 00:02:59,700
stuff to the server handles errors that

00:02:58,990 --> 00:03:02,890
kind of thing

00:02:59,700 --> 00:03:07,390
okay so seems like this should work it's

00:03:02,890 --> 00:03:09,400
very simple what could go wrong so here

00:03:07,390 --> 00:03:11,800
we have the danger of mixing your

00:03:09,400 --> 00:03:13,600
optimistic state with with your valid

00:03:11,800 --> 00:03:16,150
state so I'll just show you in the demo

00:03:13,600 --> 00:03:17,730
where we're gonna hit the error is when

00:03:16,150 --> 00:03:21,190
we get when we get to the error handling

00:03:17,730 --> 00:03:25,770
so let's go back all right so I'm

00:03:21,190 --> 00:03:25,770
already comment an unimportant

00:03:25,950 --> 00:03:36,010
comments add that and then I'm and

00:03:30,640 --> 00:03:40,090
express my love for Bratislava then de

00:03:36,010 --> 00:03:43,290
da okay so for some some odd reason our

00:03:40,090 --> 00:03:47,349
server may be the load balancers are off

00:03:43,290 --> 00:03:52,180
its inte my I love Bratislava requests

00:03:47,349 --> 00:03:55,239
first and then it succeeds alright now

00:03:52,180 --> 00:03:59,920
for some other reason we don't know why

00:03:55,239 --> 00:04:02,350
the server isn't gonna be able to put

00:03:59,920 --> 00:04:06,040
this next comment into the database so

00:04:02,350 --> 00:04:08,620
it's gonna fail oh no I lost my idle of

00:04:06,040 --> 00:04:09,220
Bratislava comment I don't I can't I

00:04:08,620 --> 00:04:10,299
can't

00:04:09,220 --> 00:04:12,430
to have people have brought us lava

00:04:10,299 --> 00:04:17,620
aren't gonna know that I love them

00:04:12,430 --> 00:04:20,049
so what happened here before that

00:04:17,620 --> 00:04:22,750
comment was posted the only comment in

00:04:20,049 --> 00:04:26,680
the state was this hello reactive Tom

00:04:22,750 --> 00:04:29,919
comment and then when we reset it back

00:04:26,680 --> 00:04:33,010
to the state before it hadn't it hadn't

00:04:29,919 --> 00:04:34,690
learned about the viola brought us a lot

00:04:33,010 --> 00:04:37,720
of comment and it just wiped everything

00:04:34,690 --> 00:04:41,590
up but we need a solution that that

00:04:37,720 --> 00:04:43,120
doesn't mix the state it doesn't lets

00:04:41,590 --> 00:04:45,100
you keep track of which state is which

00:04:43,120 --> 00:04:52,390
pieces are good and which pieces need to

00:04:45,100 --> 00:04:53,440
be rolled back okay there's a couple of

00:04:52,390 --> 00:04:56,020
properties that we're gonna want to hear

00:04:53,440 --> 00:04:58,450
we want to be able to combine the

00:04:56,020 --> 00:05:01,720
optimistic state and the real state at

00:04:58,450 --> 00:05:03,520
render time and we also want to keep

00:05:01,720 --> 00:05:05,950
this as far up the stack as possible we

00:05:03,520 --> 00:05:07,840
don't want to have to deal with it like

00:05:05,950 --> 00:05:09,639
in every single component combining all

00:05:07,840 --> 00:05:11,110
the states or else we're gonna end up

00:05:09,639 --> 00:05:13,030
with bugs it's a lot of stuff to keep

00:05:11,110 --> 00:05:15,400
track of we're also going to want to

00:05:13,030 --> 00:05:17,260
keep track of each transaction so we can

00:05:15,400 --> 00:05:20,110
roll back just that specific transaction

00:05:17,260 --> 00:05:22,990
right we saw that in the logs we had

00:05:20,110 --> 00:05:24,580
those two requests we rolled back one

00:05:22,990 --> 00:05:26,979
requests and we accidentally rolled back

00:05:24,580 --> 00:05:28,479
both so we don't want to do that and

00:05:26,979 --> 00:05:31,260
then it's also going to be come in very

00:05:28,479 --> 00:05:34,390
handy for when we want to show the user

00:05:31,260 --> 00:05:36,250
this is the piece that hasn't saved yet

00:05:34,390 --> 00:05:38,340
you know we'll be able to track down

00:05:36,250 --> 00:05:42,910
that just that one little piece

00:05:38,340 --> 00:05:47,550
okay so look at how real a does it this

00:05:42,910 --> 00:05:50,379
is a very nice simple interface for

00:05:47,550 --> 00:05:52,479
optimistically updating your state so

00:05:50,379 --> 00:05:55,090
you have these mutations you pass some

00:05:52,479 --> 00:05:59,349
parameters that goes to the server the

00:05:55,090 --> 00:06:02,650
server makes a request and then returns

00:05:59,349 --> 00:06:05,020
the result of some query so what we're

00:06:02,650 --> 00:06:08,319
doing is we're just saying I bet I can

00:06:05,020 --> 00:06:11,919
guess the result of that query in this

00:06:08,319 --> 00:06:13,780
example we're liking a comment so we

00:06:11,919 --> 00:06:16,840
know that the comments count is gonna go

00:06:13,780 --> 00:06:18,970
up by one and we can just return that

00:06:16,840 --> 00:06:21,220
immediately this is really nice

00:06:18,970 --> 00:06:23,199
it abstracts a lot of stuff for you you

00:06:21,220 --> 00:06:27,220
only have to implement a very simple

00:06:23,199 --> 00:06:30,490
interface but it does require a lot of

00:06:27,220 --> 00:06:32,319
work you have to do it in every every

00:06:30,490 --> 00:06:35,349
step of the way so let's let's try to

00:06:32,319 --> 00:06:40,120
think of of a better way so we were

00:06:35,349 --> 00:06:41,349
talking about transaction logs and being

00:06:40,120 --> 00:06:44,380
able to roll back this sounds like

00:06:41,349 --> 00:06:46,719
features from our database so well

00:06:44,380 --> 00:06:50,259
implement a full database acceptance you

00:06:46,719 --> 00:06:52,210
don't have to someone else has so data

00:06:50,259 --> 00:06:54,060
script it's an immutable in-memory

00:06:52,210 --> 00:06:57,190
database that lives in the browser

00:06:54,060 --> 00:07:00,430
there's a kind of a server-side version

00:06:57,190 --> 00:07:02,139
called the atomic same API on the client

00:07:00,430 --> 00:07:05,009
and the server and if you were here last

00:07:02,139 --> 00:07:07,360
year Nikita you have a really great talk

00:07:05,009 --> 00:07:09,400
describing to atomic and I mean sorry

00:07:07,360 --> 00:07:12,190
describing data script and what it means

00:07:09,400 --> 00:07:13,750
and there's a link there I'll share the

00:07:12,190 --> 00:07:16,509
slides later so you can watch it it's

00:07:13,750 --> 00:07:19,539
very good ok so there's some features

00:07:16,509 --> 00:07:21,520
that the data script has that come in

00:07:19,539 --> 00:07:24,009
very handy when you're doing optimistic

00:07:21,520 --> 00:07:25,180
updates it has most of the things so we

00:07:24,009 --> 00:07:27,940
will be able to see this at a very low

00:07:25,180 --> 00:07:30,069
level how all this works so the first

00:07:27,940 --> 00:07:32,259
thing is that the database is an

00:07:30,069 --> 00:07:34,509
immutable value but this is great you're

00:07:32,259 --> 00:07:36,729
working and react you like values like

00:07:34,509 --> 00:07:39,310
passing state to components here you

00:07:36,729 --> 00:07:42,340
have one value you pass it in it renders

00:07:39,310 --> 00:07:43,900
you can't change that value you don't

00:07:42,340 --> 00:07:46,810
have to worry about getting an

00:07:43,900 --> 00:07:50,919
inconsistency it has a log of

00:07:46,810 --> 00:07:51,460
transactions which we saw you need to

00:07:50,919 --> 00:07:53,440
roll

00:07:51,460 --> 00:07:57,130
back just the very specific changes that

00:07:53,440 --> 00:08:00,940
cause you problems and one really nice

00:07:57,130 --> 00:08:02,370
feature is that it takes when you add

00:08:00,940 --> 00:08:04,569
new transactions it takes that

00:08:02,370 --> 00:08:07,240
transaction tips it with the state and

00:08:04,569 --> 00:08:09,610
gives you back just the changes that you

00:08:07,240 --> 00:08:15,130
made so if we look here we have a

00:08:09,610 --> 00:08:16,870
transaction we're just putting us we're

00:08:15,130 --> 00:08:21,190
drawing this is a sketching application

00:08:16,870 --> 00:08:22,930
we're adding a square so it gives us two

00:08:21,190 --> 00:08:25,270
fields remove isn't interesting now and

00:08:22,930 --> 00:08:31,210
it does what you would expect but when

00:08:25,270 --> 00:08:33,669
we change the exposition it doesn't have

00:08:31,210 --> 00:08:35,800
all of the extra fields down here and we

00:08:33,669 --> 00:08:39,430
have two things we have a remove and we

00:08:35,800 --> 00:08:40,659
have an add so it went from 20 to 100 we

00:08:39,430 --> 00:08:42,760
can tell that and if we want to reverse

00:08:40,659 --> 00:08:45,520
that we know we just swapped the two

00:08:42,760 --> 00:08:48,670
fields if we wanted to go back we could

00:08:45,520 --> 00:08:51,790
apply that apply that that diff to the

00:08:48,670 --> 00:08:53,110
data and get back to our before I show

00:08:51,790 --> 00:08:54,550
me the point I'm talking about data

00:08:53,110 --> 00:08:57,220
strip because it's like a nice concrete

00:08:54,550 --> 00:08:58,480
thing that you can go look up later but

00:08:57,220 --> 00:09:01,060
this doesn't really have to be data

00:08:58,480 --> 00:09:02,529
Script it's there's just the ideas with

00:09:01,060 --> 00:09:04,930
the mutable value the log of

00:09:02,529 --> 00:09:06,160
transactions the disk calculated for you

00:09:04,930 --> 00:09:11,560
immediately I mean they could be

00:09:06,160 --> 00:09:13,890
implemented by a normal JavaScript thing

00:09:11,560 --> 00:09:16,600
Dayna script is already kind of like a

00:09:13,890 --> 00:09:18,100
immutable j/s on steroids so you're

00:09:16,600 --> 00:09:20,050
familiar with the mutable jsut have a

00:09:18,100 --> 00:09:22,390
lot of the concepts I mean it's missing

00:09:20,050 --> 00:09:24,570
the log in the diffs but it does have a

00:09:22,390 --> 00:09:27,510
mutable value which is very important

00:09:24,570 --> 00:09:30,220
okay so another big problem

00:09:27,510 --> 00:09:33,220
our goal well if you remember earlier

00:09:30,220 --> 00:09:35,589
was to predict what the server is going

00:09:33,220 --> 00:09:38,860
to return all right the client has to

00:09:35,589 --> 00:09:41,890
predict but how do you predict an ID all

00:09:38,860 --> 00:09:44,110
right that's going to the database the

00:09:41,890 --> 00:09:47,800
database is the only one who can assign

00:09:44,110 --> 00:09:52,360
IDs so there are a couple of approaches

00:09:47,800 --> 00:09:56,020
so the first is temporary IDs and this

00:09:52,360 --> 00:09:58,329
is where you make a make an ID that only

00:09:56,020 --> 00:10:02,310
the client knows about it sends it to

00:09:58,329 --> 00:10:04,830
the server the server finds a REAL ID

00:10:02,310 --> 00:10:07,050
returns it back to the client

00:10:04,830 --> 00:10:09,210
and the client update updates that ID in

00:10:07,050 --> 00:10:13,260
his store but the problem you have is

00:10:09,210 --> 00:10:15,870
that these IDs they kind of infect your

00:10:13,260 --> 00:10:18,990
entire code base you know there if you

00:10:15,870 --> 00:10:21,450
have two objects that reference each

00:10:18,990 --> 00:10:26,160
other some dependency or relationship

00:10:21,450 --> 00:10:27,720
those two IDs I mean those those places

00:10:26,160 --> 00:10:31,080
in the code will have to also do this

00:10:27,720 --> 00:10:33,450
translation and then not only does it

00:10:31,080 --> 00:10:34,590
affect your whole front end it can't be

00:10:33,450 --> 00:10:35,760
it can't be fine if you're thinking

00:10:34,590 --> 00:10:38,190
about it from the beginning but it

00:10:35,760 --> 00:10:39,960
causes a lot of bugs if you're adding it

00:10:38,190 --> 00:10:42,630
afterwards after you've already built

00:10:39,960 --> 00:10:46,920
your app it also infects the server

00:10:42,630 --> 00:10:48,330
though so I'll show you a scenario where

00:10:46,920 --> 00:10:50,880
you do end up with some synchronization

00:10:48,330 --> 00:10:54,000
problems so in this is an area a client

00:10:50,880 --> 00:10:57,140
is creating in a new comment it's got a

00:10:54,000 --> 00:10:59,970
temporary ID it goes to the server

00:10:57,140 --> 00:11:02,700
creates a new ID and it sends that back

00:10:59,970 --> 00:11:06,480
and sins to the comment to all the new

00:11:02,700 --> 00:11:08,280
clients though in this ordering the temp

00:11:06,480 --> 00:11:09,870
ID hasn't got back to the original

00:11:08,280 --> 00:11:13,130
client yet so it doesn't know the real

00:11:09,870 --> 00:11:17,670
ID the other client edits the comment

00:11:13,130 --> 00:11:21,570
bends it down the pipe the server gets

00:11:17,670 --> 00:11:23,040
it to the original client before the

00:11:21,570 --> 00:11:25,380
temp ID gets there now it doesn't know

00:11:23,040 --> 00:11:27,690
what to do with this comment it has an

00:11:25,380 --> 00:11:29,850
ID one it doesn't know what ID one is

00:11:27,690 --> 00:11:34,170
yet it's gonna find that out a little

00:11:29,850 --> 00:11:35,580
bit later so you want you in the up

00:11:34,170 --> 00:11:37,170
having to do is just keep track of these

00:11:35,580 --> 00:11:39,270
temp IDs on the server and send the

00:11:37,170 --> 00:11:41,910
translation layer down every time

00:11:39,270 --> 00:11:45,480
so it gets very complex a much better

00:11:41,910 --> 00:11:48,210
approach is to build client generated

00:11:45,480 --> 00:11:49,890
idea IDs this is where the client builds

00:11:48,210 --> 00:11:52,140
a stable ID that gets stored in the

00:11:49,890 --> 00:11:55,410
database and that's what you use to look

00:11:52,140 --> 00:11:57,540
things up it's much easier to reason

00:11:55,410 --> 00:12:01,320
about you don't have to do any of this

00:11:57,540 --> 00:12:04,020
Tim PI D resolution the only problem is

00:12:01,320 --> 00:12:06,780
that if you're using a browser below

00:12:04,020 --> 00:12:08,130
like ie 11 there's there's no way that

00:12:06,780 --> 00:12:12,120
generates secure

00:12:08,130 --> 00:12:14,790
alright good random numbers and so an

00:12:12,120 --> 00:12:17,850
attacker can guess your ID send his own

00:12:14,790 --> 00:12:21,839
update overwrite your data

00:12:17,850 --> 00:12:25,139
and then you know or make you write on

00:12:21,839 --> 00:12:27,209
his data steal your update but it's all

00:12:25,139 --> 00:12:33,389
solved if you if you generate random IDs

00:12:27,209 --> 00:12:37,110
with this crypto API okay and then the

00:12:33,389 --> 00:12:40,230
last is concurrent updates if you have

00:12:37,110 --> 00:12:41,970
two updates that have dependent

00:12:40,230 --> 00:12:45,209
transactions like one update relies on

00:12:41,970 --> 00:12:47,850
the other and you send them both off and

00:12:45,209 --> 00:12:50,130
they both get to the server in parallel

00:12:47,850 --> 00:12:52,430
maybe the first one fails how does the

00:12:50,130 --> 00:12:54,480
second one know what he needs to update

00:12:52,430 --> 00:12:57,600
so you end up with this kind of a

00:12:54,480 --> 00:12:59,790
cascading error so there's other

00:12:57,600 --> 00:13:02,519
solutions but I think the best way to

00:12:59,790 --> 00:13:04,350
solve this is to have a nice queue on

00:13:02,519 --> 00:13:08,160
the front end it's in one request at a

00:13:04,350 --> 00:13:09,949
time you batch up the requests to keep

00:13:08,160 --> 00:13:13,440
things fast you send them all in one

00:13:09,949 --> 00:13:16,110
payload and this allows the client to

00:13:13,440 --> 00:13:20,399
handle the errors before it sends the

00:13:16,110 --> 00:13:21,660
next request okay so the main points we

00:13:20,399 --> 00:13:23,689
need to keep the optimistic state

00:13:21,660 --> 00:13:26,279
separate so that allows us to rollback

00:13:23,689 --> 00:13:30,149
prevents the problem where we delete our

00:13:26,279 --> 00:13:33,269
comment we need to think carefully about

00:13:30,149 --> 00:13:35,490
how we create new IDs or new objects and

00:13:33,269 --> 00:13:37,670
how we assign IDs and then we need to

00:13:35,490 --> 00:13:42,209
keep track of defendant transactions

00:13:37,670 --> 00:13:45,449
okay so what else does this get for if

00:13:42,209 --> 00:13:48,480
we have a good abstraction here and our

00:13:45,449 --> 00:13:50,370
are key go over some of the how these

00:13:48,480 --> 00:13:52,860
things fit in and like the real world in

00:13:50,370 --> 00:13:55,380
a second it should have some some

00:13:52,860 --> 00:14:01,459
applications beyond your original goal

00:13:55,380 --> 00:14:04,639
so I'll do some demos but this is a

00:14:01,459 --> 00:14:07,420
precursor it's a collaborative

00:14:04,639 --> 00:14:11,740
prototyping yeah

00:14:07,420 --> 00:14:17,740
hopefully you'll be able to see what I

00:14:11,740 --> 00:14:23,370
draw it's a collaborative prototyping

00:14:17,740 --> 00:14:27,310
app and I'll just show you another quick

00:14:23,370 --> 00:14:30,010
demo so you can see how I can edit these

00:14:27,310 --> 00:14:31,960
things as as they're going I'll have to

00:14:30,010 --> 00:14:35,500
wait for the server to come back I've

00:14:31,960 --> 00:14:39,190
written this beautiful feature that

00:14:35,500 --> 00:14:41,350
disables lists so every time I send a

00:14:39,190 --> 00:14:44,110
update that's you know it's gonna wait

00:14:41,350 --> 00:14:46,570
so I can't edit this until it comes back

00:14:44,110 --> 00:14:48,520
it's very frustrating because I I can't

00:14:46,570 --> 00:14:51,640
really work like this every time I want

00:14:48,520 --> 00:14:54,220
to change something I have to wait and

00:14:51,640 --> 00:14:55,780
it's just impossible to work with so

00:14:54,220 --> 00:14:57,340
this this is this is where optimistic

00:14:55,780 --> 00:14:58,630
updates come in really handy of course

00:14:57,340 --> 00:15:00,840
they're nice in every application right

00:14:58,630 --> 00:15:07,720
you don't want to watch spinners forever

00:15:00,840 --> 00:15:11,440
they'll turn that back off okay we also

00:15:07,720 --> 00:15:14,740
have instant replay so I have a document

00:15:11,440 --> 00:15:19,210
here but since we have a log of our

00:15:14,740 --> 00:15:21,670
transactions and we know the client

00:15:19,210 --> 00:15:23,290
knows how to apply those transactions

00:15:21,670 --> 00:15:24,730
that was part of what it had to do to

00:15:23,290 --> 00:15:26,830
build these optimistic updates it had to

00:15:24,730 --> 00:15:30,930
take a transaction then apply it to its

00:15:26,830 --> 00:15:36,970
state we can just run that in Reverse or

00:15:30,930 --> 00:15:39,190
run that again so replay goes true and I

00:15:36,970 --> 00:15:40,600
guys you can see exactly how I built

00:15:39,190 --> 00:15:43,600
this and now you have like a new feature

00:15:40,600 --> 00:15:46,590
that came out of out of this thing you

00:15:43,600 --> 00:15:46,590
weren't even trying to achieve

00:15:47,900 --> 00:16:04,620
it also gives you a multiplayer so if we

00:15:52,280 --> 00:16:07,110
happy this so from I'm over here I can

00:16:04,620 --> 00:16:10,170
take as you I'll do it on the bottom and

00:16:07,110 --> 00:16:13,860
then you can see it on this side so if

00:16:10,170 --> 00:16:15,870
I'm sketching over here the other client

00:16:13,860 --> 00:16:17,910
can see my work because I'm just taking

00:16:15,870 --> 00:16:22,260
his transactions and passing them over

00:16:17,910 --> 00:16:23,840
and so we can everyone can collaborate

00:16:22,260 --> 00:16:27,180
everyone can see everyone else's state

00:16:23,840 --> 00:16:29,760
but it adds this new feature that you it

00:16:27,180 --> 00:16:31,320
wasn't really specific to optimistic

00:16:29,760 --> 00:16:34,320
updates it just came out of the fact

00:16:31,320 --> 00:16:35,970
that we have this transaction log we

00:16:34,320 --> 00:16:38,370
know how to apply the transactions and

00:16:35,970 --> 00:16:42,810
the same transactions on the client and

00:16:38,370 --> 00:16:48,150
the server we can do local only edits so

00:16:42,810 --> 00:16:49,440
this is where you don't bend any data to

00:16:48,150 --> 00:16:52,230
the server you just keep it on the

00:16:49,440 --> 00:16:55,910
client so I've made this like private

00:16:52,230 --> 00:16:59,360
document that only one person can edit

00:16:55,910 --> 00:17:03,540
so now if I try to scribble on him and

00:16:59,360 --> 00:17:06,390
vandalize it I get a notification it's

00:17:03,540 --> 00:17:09,180
read-only you can't mess with it and I

00:17:06,390 --> 00:17:11,130
can still see my crap that I scribbled

00:17:09,180 --> 00:17:13,220
on it but as soon as i refresh it'll go

00:17:11,130 --> 00:17:13,220
away

00:17:14,430 --> 00:17:24,439
it's gone forever so the last couple of

00:17:22,170 --> 00:17:27,990
things right I have these transactions

00:17:24,439 --> 00:17:32,309
to remember from the previous slide we

00:17:27,990 --> 00:17:35,670
had these the stiff it is added and

00:17:32,309 --> 00:17:42,230
removed so you can also let's just do a

00:17:35,670 --> 00:17:46,980
new one though

00:17:42,230 --> 00:17:49,590
well scribble a little bit more and

00:17:46,980 --> 00:17:51,660
we'll make this guy so when I undo

00:17:49,590 --> 00:17:53,820
something all I'm doing is applying the

00:17:51,660 --> 00:17:55,860
reverse transaction I don't have to

00:17:53,820 --> 00:17:58,350
worry about messing up the state because

00:17:55,860 --> 00:18:01,530
you know it's just one level down but I

00:17:58,350 --> 00:18:02,940
can just keep doing this undo thing

00:18:01,530 --> 00:18:07,770
forever kind of like if you're familiar

00:18:02,940 --> 00:18:10,200
with Emacs the undo it's an infinite log

00:18:07,770 --> 00:18:11,730
of all the transactions even counsel in

00:18:10,200 --> 00:18:14,870
do as a transaction which is why I can

00:18:11,730 --> 00:18:14,870
undo my undo s--

00:18:15,580 --> 00:18:22,920
what was last one Oh better airs right

00:18:18,820 --> 00:18:28,690
so if I disable syncing to the server I

00:18:22,920 --> 00:18:33,610
implemented this other nice feature all

00:18:28,690 --> 00:18:38,610
of my features are breaking me up if I

00:18:33,610 --> 00:18:40,840
draw something right because it had that

00:18:38,610 --> 00:18:43,930
it's lost its connection to the server

00:18:40,840 --> 00:18:46,660
in this scenario but since it has those

00:18:43,930 --> 00:18:49,690
transactions it can look up which

00:18:46,660 --> 00:18:51,220
entities on the page are affected it can

00:18:49,690 --> 00:18:55,450
highlight them and say hey your edits to

00:18:51,220 --> 00:18:57,100
these entities weren't saved do you want

00:18:55,450 --> 00:19:03,250
to retry so then if I turn the sync back

00:18:57,100 --> 00:19:05,500
on now I get my entities there on the

00:19:03,250 --> 00:19:07,030
server I didn't lose any work and you

00:19:05,500 --> 00:19:14,230
can see how this this could be applied

00:19:07,030 --> 00:19:16,300
to to offline mode so and it's just

00:19:14,230 --> 00:19:18,910
extending the latency longer and longer

00:19:16,300 --> 00:19:22,620
it's a lot harder because as you extend

00:19:18,910 --> 00:19:29,500
the latency you you end up with

00:19:22,620 --> 00:19:35,440
potential for a lot more conflicts so

00:19:29,500 --> 00:19:43,260
one last thing the precursor we've open

00:19:35,440 --> 00:19:43,260
sourced it today so you can go thanks

00:19:43,310 --> 00:19:49,520
so you can go to github I think there's

00:19:47,480 --> 00:19:52,280
also a blog post on the precursor app

00:19:49,520 --> 00:19:54,460
calm slash blog and I'm explains you

00:19:52,280 --> 00:19:57,590
know what we were trying to do with it

00:19:54,460 --> 00:19:59,770
though if people wanted to see kind of

00:19:57,590 --> 00:20:03,770
how this stuff is built see it in action

00:19:59,770 --> 00:20:06,670
a lot of the things I talked about I

00:20:03,770 --> 00:20:10,370
didn't know until after I built it so

00:20:06,670 --> 00:20:17,990
it's it's a little hack together but the

00:20:10,370 --> 00:20:23,540
main ideas are there ok that's it great

00:20:17,990 --> 00:20:25,910
thank you very much so have quite some

00:20:23,540 --> 00:20:37,790
time for it for questions remember one

00:20:25,910 --> 00:20:42,230
stickers uh sure let's say yes ok PHP to

00:20:37,790 --> 00:20:44,780
react ratio I have no idea okay so rum

00:20:42,230 --> 00:20:47,990
compared to ohm so precursor is built-in

00:20:44,780 --> 00:20:50,030
ohm and David Nolan is here now he's the

00:20:47,990 --> 00:20:53,750
author of them and ohm next is very

00:20:50,030 --> 00:20:55,730
interesting circle is upgrading their

00:20:53,750 --> 00:20:58,180
front into ohm necks I think that's

00:20:55,730 --> 00:21:00,950
gonna solve a lot of their problems I

00:20:58,180 --> 00:21:04,820
have the problem it solves is you have

00:21:00,950 --> 00:21:07,820
this data in one format that makes sense

00:21:04,820 --> 00:21:09,770
to you it makes sense to your API but

00:21:07,820 --> 00:21:11,840
the data when you render it you need in

00:21:09,770 --> 00:21:13,730
some like tree shape and it's hard to

00:21:11,840 --> 00:21:16,700
coerce the data into the shape if you

00:21:13,730 --> 00:21:18,680
look at the circle code base it does a

00:21:16,700 --> 00:21:19,910
whole lot of work to get things in the

00:21:18,680 --> 00:21:23,660
right shape so that it renders

00:21:19,910 --> 00:21:27,530
efficiently and I think ohm neck solves

00:21:23,660 --> 00:21:31,100
a lot of those problems however I kind

00:21:27,530 --> 00:21:37,460
of prefer rum because it's it's much

00:21:31,100 --> 00:21:40,070
easier to write your own code that

00:21:37,460 --> 00:21:41,810
integrates with it so if you I'm a fan

00:21:40,070 --> 00:21:46,060
of data script I used a difficult in my

00:21:41,810 --> 00:21:46,060
projects outside of Facebook

00:21:46,350 --> 00:21:52,919
and it makes it very easy to integrate

00:21:49,169 --> 00:21:54,419
data script into into the app to write

00:21:52,919 --> 00:21:58,320
your own custom mix-ins it has a very

00:21:54,419 --> 00:21:59,820
very good way of composing mix-ins I

00:21:58,320 --> 00:22:02,429
don't know if anyone here has tried

00:21:59,820 --> 00:22:03,929
mix-ins they're being deprecated because

00:22:02,429 --> 00:22:06,210
they they didn't work very well

00:22:03,929 --> 00:22:09,509
they don't compose at all if you have to

00:22:06,210 --> 00:22:11,460
mix ins that have the same operate on

00:22:09,509 --> 00:22:13,740
the same lifecycle method I think if

00:22:11,460 --> 00:22:16,710
there was an error and so now they've

00:22:13,740 --> 00:22:18,299
gone to using higher-order components so

00:22:16,710 --> 00:22:21,210
if you look at rum rum has an excellent

00:22:18,299 --> 00:22:23,090
way of dealing with mix-ins it's there

00:22:21,210 --> 00:22:29,549
all composable you take a state you

00:22:23,090 --> 00:22:35,429
return an updated state in your

00:22:29,549 --> 00:22:37,049
experience right so ideally everything

00:22:35,429 --> 00:22:38,669
is off to physically updated you have it

00:22:37,049 --> 00:22:42,419
at the top level anything you put in

00:22:38,669 --> 00:22:42,779
your database is done maybe that's a bad

00:22:42,419 --> 00:22:46,830
idea

00:22:42,779 --> 00:22:48,350
but it enables a lot of stuff when you

00:22:46,830 --> 00:22:50,250
do that you don't have to worry about

00:22:48,350 --> 00:22:51,870
optimistic updates you don't think about

00:22:50,250 --> 00:22:56,039
them it just happens for you

00:22:51,870 --> 00:22:57,480
automatically can you use stale script

00:22:56,039 --> 00:23:01,039
on the front end if you use a different

00:22:57,480 --> 00:23:01,039
database on the back end

00:23:01,879 --> 00:23:07,620
yeah you should I mean it's not as nice

00:23:05,909 --> 00:23:13,139
you you have to write a bunch of

00:23:07,620 --> 00:23:15,090
translation okay often say you don't you

00:23:13,139 --> 00:23:17,519
you don't get all the bits but yes it's

00:23:15,090 --> 00:23:21,210
very useful there are some there's a

00:23:17,519 --> 00:23:29,730
JavaScript library called yes egg I

00:23:21,210 --> 00:23:31,580
think and it does a lot of what data

00:23:29,730 --> 00:23:34,159
script does it's kind of inspired by it

00:23:31,580 --> 00:23:36,539
by Brandon bloom he was one of the

00:23:34,159 --> 00:23:39,240
people that also worked on the circle

00:23:36,539 --> 00:23:42,850
front-end

00:23:39,240 --> 00:23:46,090
JSE G though I look at that if you're

00:23:42,850 --> 00:23:48,190
looking for something in JavaScript it's

00:23:46,090 --> 00:23:50,770
uh I haven't used it myself

00:23:48,190 --> 00:23:52,390
but I think Brandon's pretty happy with

00:23:50,770 --> 00:23:57,460
it and it looks like it there's a lot of

00:23:52,390 --> 00:24:02,440
the right things right any conflicts so

00:23:57,460 --> 00:24:06,610
a lot of its going to be application

00:24:02,440 --> 00:24:10,210
dependent if you're there are some nice

00:24:06,610 --> 00:24:13,270
data structures that that you can use to

00:24:10,210 --> 00:24:16,090
solve this so if you if you know of a CR

00:24:13,270 --> 00:24:18,010
DTS it's a data structure where you can

00:24:16,090 --> 00:24:19,990
apply updates in any order and as long

00:24:18,010 --> 00:24:22,200
as it gets all the updates you end up

00:24:19,990 --> 00:24:27,669
with the same state at the end so this

00:24:22,200 --> 00:24:28,750
is what like google docs runs on so if

00:24:27,669 --> 00:24:31,000
you have that you don't have to worry

00:24:28,750 --> 00:24:33,820
about conflicts you can't have conflicts

00:24:31,000 --> 00:24:35,679
some of the ideas in here are necessary

00:24:33,820 --> 00:24:38,649
but you still you still want to have a

00:24:35,679 --> 00:24:41,020
separation between your local only state

00:24:38,649 --> 00:24:42,700
and your your real estate so that you

00:24:41,020 --> 00:24:45,549
can show the user you know this stuff

00:24:42,700 --> 00:24:47,669
isn't safe don't don't close the browser

00:24:45,549 --> 00:24:50,380
that kind of thing

00:24:47,669 --> 00:24:54,220
just graph QL yes if you're using real

00:24:50,380 --> 00:24:55,990
light it makes it a lot easier I don't

00:24:54,220 --> 00:24:58,659
know if there's anything specific in

00:24:55,990 --> 00:25:01,419
graph QL that would make it easier but I

00:24:58,659 --> 00:25:02,679
mean the relay has facilities for

00:25:01,419 --> 00:25:05,409
applying the updates you won't get

00:25:02,679 --> 00:25:07,630
conflicts I can't guarantee that I'm not

00:25:05,409 --> 00:25:12,490
sure the internals of relay that much

00:25:07,630 --> 00:25:16,860
but it works fairly well ok what

00:25:12,490 --> 00:25:16,860
Facebook uses for publish/subscribe

00:25:20,640 --> 00:25:26,200
so I guess I can talk about this because

00:25:24,630 --> 00:25:28,450
the things I know about

00:25:26,200 --> 00:25:31,030
publish/subscribe I know from looking at

00:25:28,450 --> 00:25:34,480
the browser so it's just basically a

00:25:31,030 --> 00:25:37,360
nation long pulling HTTP requests on the

00:25:34,480 --> 00:25:39,760
browser side from what I've seen yeah

00:25:37,360 --> 00:25:42,960
that I can you know I'm not sure what

00:25:39,760 --> 00:25:42,960
I'm allowed to talk about what I'm not

00:25:44,850 --> 00:25:55,720
the next one so when is it not suitable

00:25:49,180 --> 00:25:59,140
I don't know I'm sure there's there are

00:25:55,720 --> 00:26:01,030
things where I can't think of one off

00:25:59,140 --> 00:26:03,160
the top of my head but I'm sure there

00:26:01,030 --> 00:26:05,800
are cases you would just have to handle

00:26:03,160 --> 00:26:08,410
those with a separate piece of State and

00:26:05,800 --> 00:26:18,670
not use your normal database

00:26:08,410 --> 00:26:21,280
oh so this this is not this this can be

00:26:18,670 --> 00:26:26,680
a problem if you have this is the

00:26:21,280 --> 00:26:28,870
problem is how do you ensure that on the

00:26:26,680 --> 00:26:33,990
clients will be on the same order on the

00:26:28,870 --> 00:26:36,400
clients will be the same I guess you

00:26:33,990 --> 00:26:37,960
can't always if you can design your

00:26:36,400 --> 00:26:42,210
application so that order doesn't matter

00:26:37,960 --> 00:26:45,940
that's important that helps you can have

00:26:42,210 --> 00:26:49,420
check sums on the data so that you you

00:26:45,940 --> 00:26:51,940
you can check that everything came in

00:26:49,420 --> 00:26:55,500
the right order if it didn't go back to

00:26:51,940 --> 00:26:59,020
the server do a full refresh

00:26:55,500 --> 00:27:00,460
and let's do one last and then we're

00:26:59,020 --> 00:27:05,820
gonna be out of town and I would have

00:27:00,460 --> 00:27:09,490
questions well yeah uh so I think

00:27:05,820 --> 00:27:11,140
precursor itself is fairly fast

00:27:09,490 --> 00:27:13,750
I mean it's doing a lot of stuff it's

00:27:11,140 --> 00:27:22,810
sending you know every single mouse move

00:27:13,750 --> 00:27:25,510
is going going to the other browser and

00:27:22,810 --> 00:27:26,830
it doesn't it doesn't feel that sluggish

00:27:25,510 --> 00:27:32,230
right because I've got a lot I got a lot

00:27:26,830 --> 00:27:36,280
of data going in here and it it's fairly

00:27:32,230 --> 00:27:38,350
fast so if you're on a very low powered

00:27:36,280 --> 00:27:40,060
machine I wouldn't I wouldn't recommend

00:27:38,350 --> 00:27:42,970
it but otherwise it works really well

00:27:40,060 --> 00:27:45,120
awesome thank you very much Daniel thank

00:27:42,970 --> 00:27:45,120

YouTube URL: https://www.youtube.com/watch?v=cgJyI1BKmHQ


