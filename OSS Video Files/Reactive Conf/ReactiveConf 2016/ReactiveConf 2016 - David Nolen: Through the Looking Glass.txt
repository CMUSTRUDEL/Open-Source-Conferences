Title: ReactiveConf 2016 - David Nolen: Through the Looking Glass
Publication date: 2016-11-24
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

David Nolen: Through the Looking Glass

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, itâ€™s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,820 --> 00:00:11,540
hi I'm David Nolan this talk was still

00:00:09,290 --> 00:00:13,010
not announced because I kind of didn't

00:00:11,540 --> 00:00:16,309
really know how to talk about until

00:00:13,010 --> 00:00:17,840
today because actually I'm well known in

00:00:16,309 --> 00:00:19,910
the closure world but whenever I come to

00:00:17,840 --> 00:00:22,130
JavaScript conferences I feel like I

00:00:19,910 --> 00:00:23,720
always need to change things a bit to

00:00:22,130 --> 00:00:26,509
make it more relevant to a JIP

00:00:23,720 --> 00:00:28,130
JavaScript audience but so this talk is

00:00:26,509 --> 00:00:29,359
going to be there's gonna be a little

00:00:28,130 --> 00:00:31,009
bit of interesting history from the

00:00:29,359 --> 00:00:32,390
early days of reactor I think a lot of

00:00:31,009 --> 00:00:33,980
people won't know I'm not going to

00:00:32,390 --> 00:00:35,960
assume you know who I am and it will

00:00:33,980 --> 00:00:38,180
help explain why I've been involved with

00:00:35,960 --> 00:00:41,870
react as a user of it and why people

00:00:38,180 --> 00:00:42,800
sort of associate react with myself but

00:00:41,870 --> 00:00:45,050
then I'm also going to talk a bit about

00:00:42,800 --> 00:00:47,360
closure script and how close your script

00:00:45,050 --> 00:00:50,539
in many ways is sort of like a parallel

00:00:47,360 --> 00:00:52,399
universe to the react ecosystem we don't

00:00:50,539 --> 00:00:55,160
have that much interest in in sort of

00:00:52,399 --> 00:00:56,930
JavaScript as a big thing but actually

00:00:55,160 --> 00:00:58,550
we share a lot of the same principles

00:00:56,930 --> 00:01:00,739
and sort of philosophy you find in the

00:00:58,550 --> 00:01:02,390
react world I'm going to talk a lot

00:01:00,739 --> 00:01:04,670
don't get worried I'm not going to show

00:01:02,390 --> 00:01:06,170
much closure code up until the very end

00:01:04,670 --> 00:01:07,340
and even when I do you don't need to

00:01:06,170 --> 00:01:10,790
know closure to understand what I'm

00:01:07,340 --> 00:01:12,500
saying but I hope by seeing what happens

00:01:10,790 --> 00:01:14,960
in the sort of this parallel universe to

00:01:12,500 --> 00:01:17,869
the react ecosystem maybe you get some

00:01:14,960 --> 00:01:21,530
ideas and you know maybe decide to give

00:01:17,869 --> 00:01:22,670
closure script a shot so I'm a software

00:01:21,530 --> 00:01:25,340
engineer at a company called cognitive

00:01:22,670 --> 00:01:26,900
context as a software consultancy we're

00:01:25,340 --> 00:01:29,540
the stewards of closure and closure

00:01:26,900 --> 00:01:31,460
script closure is a functional dynamic

00:01:29,540 --> 00:01:33,680
list that targets the Java Virtual

00:01:31,460 --> 00:01:36,860
Machine and closure script is basically

00:01:33,680 --> 00:01:39,020
closure that compiles to JavaScript I'm

00:01:36,860 --> 00:01:41,600
the lead developer of clojurescript and

00:01:39,020 --> 00:01:44,299
closure script works largely because um

00:01:41,600 --> 00:01:45,250
a lot of the technical techniques that

00:01:44,299 --> 00:01:48,320
were out there were sort of

00:01:45,250 --> 00:01:50,290
revolutionized in the JVM hot spot a lot

00:01:48,320 --> 00:01:52,610
of those ideas ended up making it into

00:01:50,290 --> 00:01:54,560
JavaScript virtual machines which are

00:01:52,610 --> 00:01:56,630
very sophisticated now I'm also work on

00:01:54,560 --> 00:01:58,310
something called de Tomic a de Tomic is

00:01:56,630 --> 00:01:59,899
an immutable relational database like I

00:01:58,310 --> 00:02:01,549
can't really say that much about it but

00:01:59,899 --> 00:02:04,280
if you imagine that you can make a full

00:02:01,549 --> 00:02:05,960
stack redux application redux all the

00:02:04,280 --> 00:02:08,050
way into the cloud I mean that's the

00:02:05,960 --> 00:02:11,210
kind of thing that the atomic support um

00:02:08,050 --> 00:02:13,940
check it out all right so I've been

00:02:11,210 --> 00:02:16,040
doing JavaScript since 2005 I remember

00:02:13,940 --> 00:02:16,569
before jQuery was really a thing I

00:02:16,040 --> 00:02:18,999
remember

00:02:16,569 --> 00:02:22,049
before console.log I remember when JSON

00:02:18,999 --> 00:02:24,939
parsing was eval um you know dark days

00:02:22,049 --> 00:02:26,290
things have come a long way I worked at

00:02:24,939 --> 00:02:29,499
the New York Times in JavaScript rails

00:02:26,290 --> 00:02:31,989
developer for about from 2010 to 2014 I

00:02:29,499 --> 00:02:33,250
was there when when backbone and

00:02:31,989 --> 00:02:35,170
underscore really popular

00:02:33,250 --> 00:02:37,150
Jeremie ashkenaz who created backbone

00:02:35,170 --> 00:02:40,750
underscore and CoffeeScript we were on

00:02:37,150 --> 00:02:42,099
the same team there so it was really fun

00:02:40,750 --> 00:02:44,739
we work on some interesting projects um

00:02:42,099 --> 00:02:46,269
but of course you know I was wondering

00:02:44,739 --> 00:02:48,280
as somebody who liked closure and

00:02:46,269 --> 00:02:50,079
functional programming if there was ever

00:02:48,280 --> 00:02:54,069
going to be something better than

00:02:50,079 --> 00:02:55,870
traditional object-oriented MVC um so my

00:02:54,069 --> 00:02:58,359
friend Brandon Bloom did this in

00:02:55,870 --> 00:02:59,859
December or November of 2013 he was like

00:02:58,359 --> 00:03:02,560
check out this thing that Facebook

00:02:59,859 --> 00:03:03,790
released called react like most people I

00:03:02,560 --> 00:03:05,709
was extremely skeptical

00:03:03,790 --> 00:03:07,000
there were xml literals in a javascript

00:03:05,709 --> 00:03:09,480
file and i said this is going to fail

00:03:07,000 --> 00:03:11,829
who wants to use this thing um but

00:03:09,480 --> 00:03:14,379
lesson with many great conversations we

00:03:11,829 --> 00:03:16,810
had a great conversation over a cup of

00:03:14,379 --> 00:03:19,120
coffee with brandon bloom and pete hunt

00:03:16,810 --> 00:03:20,500
from facebook on november 2013

00:03:19,120 --> 00:03:22,629
you know reacted only been about for

00:03:20,500 --> 00:03:26,019
about whatever four or five months um

00:03:22,629 --> 00:03:28,030
and i had it had an interesting exchange

00:03:26,019 --> 00:03:29,829
so this is you can see this is from hope

00:03:28,030 --> 00:03:32,739
well maybe you can see it but says

00:03:29,829 --> 00:03:35,139
December 2nd 2013 I was interacting with

00:03:32,739 --> 00:03:37,329
Jordan of Balkh who is the you know

00:03:35,139 --> 00:03:40,000
original designer and creator of react

00:03:37,329 --> 00:03:42,849
and he had said in passing oh yeah at

00:03:40,000 --> 00:03:44,650
Facebook you know we had this case where

00:03:42,849 --> 00:03:46,180
they're in the comment section of a

00:03:44,650 --> 00:03:48,400
react app that we were building we had a

00:03:46,180 --> 00:03:50,049
performance problem and we used an

00:03:48,400 --> 00:03:52,389
identity check because we use persistent

00:03:50,049 --> 00:03:54,819
data structures so it was because Jordan

00:03:52,389 --> 00:03:58,239
walk had said this but I wanted to drill

00:03:54,819 --> 00:03:59,680
into Pete hunts brain do you think

00:03:58,239 --> 00:04:03,280
immutable data structures can make react

00:03:59,680 --> 00:04:05,229
faster it was like I don't know and so I

00:04:03,280 --> 00:04:07,449
wrote the most popular blog post I've

00:04:05,229 --> 00:04:09,909
ever written I had more views on this

00:04:07,449 --> 00:04:11,469
article then then all the any posts I've

00:04:09,909 --> 00:04:13,180
ever done combined and this is the

00:04:11,469 --> 00:04:15,759
future of JavaScript MVC frameworks

00:04:13,180 --> 00:04:17,199
where I basically showed that I could

00:04:15,759 --> 00:04:18,729
take closure script which is a compile

00:04:17,199 --> 00:04:20,530
to JavaScript programming language I

00:04:18,729 --> 00:04:22,539
could take immutable data structures to

00:04:20,530 --> 00:04:25,060
things which sound like they should not

00:04:22,539 --> 00:04:27,490
make anything faster right I could

00:04:25,060 --> 00:04:29,349
combine it with react and I could be at

00:04:27,490 --> 00:04:30,159
least three times faster than plain

00:04:29,349 --> 00:04:32,289
react

00:04:30,159 --> 00:04:34,659
and I had nice little flame graphs in

00:04:32,289 --> 00:04:36,580
fact you could open up my thing in

00:04:34,659 --> 00:04:38,469
chrome and record the flame graph

00:04:36,580 --> 00:04:40,139
yourself and said and prove that you

00:04:38,469 --> 00:04:43,119
know not making this up

00:04:40,139 --> 00:04:44,889
reactors faster with the mutability and

00:04:43,119 --> 00:04:48,429
I showed the typical backbone

00:04:44,889 --> 00:04:50,259
application you know totally losing out

00:04:48,429 --> 00:04:51,729
here big and you know this helps

00:04:50,259 --> 00:04:53,619
kick-start I think was with some people

00:04:51,729 --> 00:04:55,599
in the jobs community community to take

00:04:53,619 --> 00:04:57,909
a second look react and to start

00:04:55,599 --> 00:05:00,489
thinking about immutability two weeks

00:04:57,909 --> 00:05:02,559
after I wrote this post I showed that

00:05:00,489 --> 00:05:05,050
without changing anything in my to do VM

00:05:02,559 --> 00:05:06,069
BC implementation which was faster with

00:05:05,050 --> 00:05:06,610
closure script and immutable data

00:05:06,069 --> 00:05:08,979
structures

00:05:06,610 --> 00:05:10,749
I could write 13 lines of code and get

00:05:08,979 --> 00:05:12,999
full time travel without changing

00:05:10,749 --> 00:05:14,740
anything else on my program just because

00:05:12,999 --> 00:05:17,259
I used immutable data structures and I

00:05:14,740 --> 00:05:18,399
use single app state back in 3 years ago

00:05:17,259 --> 00:05:20,409
this is almost three years ago when I

00:05:18,399 --> 00:05:22,599
talked to people single app state is the

00:05:20,409 --> 00:05:24,369
way to do do front-end um you know

00:05:22,599 --> 00:05:27,519
people would just laugh at me they did

00:05:24,369 --> 00:05:28,869
not take this seriously it's okay so now

00:05:27,519 --> 00:05:29,829
you get a sense there's some little bit

00:05:28,869 --> 00:05:31,569
of history you might not have known

00:05:29,829 --> 00:05:33,729
about about my early interactions of the

00:05:31,569 --> 00:05:36,639
react team but now let's go through the

00:05:33,729 --> 00:05:39,069
looking-glass and let's see how how we

00:05:36,639 --> 00:05:41,289
see sort of the problem of UI

00:05:39,069 --> 00:05:44,559
programming from through sort of closure

00:05:41,289 --> 00:05:46,329
or closure scripts classes so enclosure

00:05:44,559 --> 00:05:48,129
enclosure script immutability is just a

00:05:46,329 --> 00:05:50,379
language feature we don't want this to

00:05:48,129 --> 00:05:52,119
be a separate library there's a lot of

00:05:50,379 --> 00:05:53,439
benefits here you get an ecosystem

00:05:52,119 --> 00:05:55,059
oriented around immutable data

00:05:53,439 --> 00:05:58,979
structures and you can plug these things

00:05:55,059 --> 00:06:00,789
together they just work um I think a

00:05:58,979 --> 00:06:02,800
Richard Feldman when he was talking

00:06:00,789 --> 00:06:03,969
about Elm there's a lot of benefits when

00:06:02,800 --> 00:06:05,679
you when you have a language and you

00:06:03,969 --> 00:06:07,269
have better semantics and you really

00:06:05,679 --> 00:06:09,309
have the language sort of enforce the

00:06:07,269 --> 00:06:11,409
best practices you actually can build a

00:06:09,309 --> 00:06:15,069
really powerful ecosystem around these

00:06:11,409 --> 00:06:16,749
values so in our in our viewpoint once

00:06:15,069 --> 00:06:18,669
you go immutable you really can't go

00:06:16,749 --> 00:06:20,649
back it just leads towards simpler

00:06:18,669 --> 00:06:22,689
programs um the other thing that we take

00:06:20,649 --> 00:06:23,800
really seriously that's actually hard to

00:06:22,689 --> 00:06:25,179
replicate in JavaScript though people

00:06:23,800 --> 00:06:27,429
have tried you have things like react

00:06:25,179 --> 00:06:29,139
hot loader but one of the core values in

00:06:27,429 --> 00:06:32,919
the closure and the closure script

00:06:29,139 --> 00:06:34,329
ecosystem is live coding so because we

00:06:32,919 --> 00:06:36,249
always thought you should you should

00:06:34,329 --> 00:06:37,749
program around single app state single

00:06:36,249 --> 00:06:39,369
app state and then you should program

00:06:37,749 --> 00:06:40,899
with pure functions all these things

00:06:39,369 --> 00:06:42,490
that you hear about which is great it's

00:06:40,899 --> 00:06:43,810
great that that this is becoming a

00:06:42,490 --> 00:06:45,910
mainstream idea we

00:06:43,810 --> 00:06:47,590
we knew this for quite some time if you

00:06:45,910 --> 00:06:49,150
do this then doing interactive

00:06:47,590 --> 00:06:50,380
programming is orders of magnitude

00:06:49,150 --> 00:06:52,840
simpler to do

00:06:50,380 --> 00:06:54,310
um so fig wheel is basically anybody

00:06:52,840 --> 00:06:57,580
that uses closed curve uses big wheel

00:06:54,310 --> 00:06:59,260
and fig wheel just works in a way that's

00:06:57,580 --> 00:07:00,970
completely scales whether you're whether

00:06:59,260 --> 00:07:02,740
you're writing hello world or whether

00:07:00,970 --> 00:07:04,180
you have an app with its fifty thousand

00:07:02,740 --> 00:07:07,360
lines of closed your script big wheel

00:07:04,180 --> 00:07:08,560
just works because all the libraries use

00:07:07,360 --> 00:07:11,169
the right patterns everything is

00:07:08,560 --> 00:07:13,600
functional state is not is not present

00:07:11,169 --> 00:07:15,639
in multiple places just to give a quick

00:07:13,600 --> 00:07:17,260
demo of this because it's quite cool if

00:07:15,639 --> 00:07:19,630
you've never tried close your script um

00:07:17,260 --> 00:07:21,820
so here I just have Adam open here I

00:07:19,630 --> 00:07:24,010
have a ripple and here I have flappy

00:07:21,820 --> 00:07:26,200
bird um so this is just this not my code

00:07:24,010 --> 00:07:28,780
this is just the demo that Bruce Hellman

00:07:26,200 --> 00:07:30,250
made I mean here this repple that I have

00:07:28,780 --> 00:07:33,280
in the terminal this is actually

00:07:30,250 --> 00:07:35,200
connected directly into Chrome right so

00:07:33,280 --> 00:07:37,720
I can I can see those functions there

00:07:35,200 --> 00:07:40,240
this is this is actually talking to

00:07:37,720 --> 00:07:42,400
chrome over a WebSocket from a process

00:07:40,240 --> 00:07:44,110
running on my command line and then I'm

00:07:42,400 --> 00:07:46,540
you know getting feedback here it's

00:07:44,110 --> 00:07:51,340
printing out um in my source file I can

00:07:46,540 --> 00:07:53,470
you know change this save it boom I died

00:07:51,340 --> 00:07:55,390
because right I can I can like live edit

00:07:53,470 --> 00:07:57,280
this and this is not a toy this is a toy

00:07:55,390 --> 00:07:59,470
application but this is actually how

00:07:57,280 --> 00:08:01,150
close your script does this is how they

00:07:59,470 --> 00:08:02,919
work they don't wait they don't refresh

00:08:01,150 --> 00:08:04,240
right you don't want to blow away the

00:08:02,919 --> 00:08:06,460
app state because you want to change a

00:08:04,240 --> 00:08:08,080
style you want to change the view why

00:08:06,460 --> 00:08:10,240
should you have to start over

00:08:08,080 --> 00:08:12,370
just because you want to change one

00:08:10,240 --> 00:08:14,289
incremental part of your application so

00:08:12,370 --> 00:08:16,840
we believe that live programming really

00:08:14,289 --> 00:08:18,900
um helps people be more productive and

00:08:16,840 --> 00:08:24,789
be more agile as they try to write um

00:08:18,900 --> 00:08:26,200
write try to solder problems okay so the

00:08:24,789 --> 00:08:27,340
mutable data structures interactive

00:08:26,200 --> 00:08:29,380
program the other thing we're really

00:08:27,340 --> 00:08:31,210
serious about is production so it's

00:08:29,380 --> 00:08:33,280
interactive programming that's awesome

00:08:31,210 --> 00:08:35,229
that's cool for dead um but as you as

00:08:33,280 --> 00:08:37,150
you know in the JavaScript world people

00:08:35,229 --> 00:08:38,620
really want web pack to work great

00:08:37,150 --> 00:08:40,659
people really want Babel to work great

00:08:38,620 --> 00:08:43,270
the final bill that you're going to send

00:08:40,659 --> 00:08:44,410
to a client really matters so we we've

00:08:43,270 --> 00:08:46,060
invested in something called Google

00:08:44,410 --> 00:08:48,240
closure which sadly because Google

00:08:46,060 --> 00:08:50,440
doesn't really advertise it too much um

00:08:48,240 --> 00:08:53,380
does a lot of the things that people

00:08:50,440 --> 00:08:55,959
want web pack to do today for five years

00:08:53,380 --> 00:08:56,560
Google closure has had um dead code

00:08:55,959 --> 00:08:58,450
elimination

00:08:56,560 --> 00:09:00,670
right dead code elimination that can

00:08:58,450 --> 00:09:03,010
actually follow the entire function call

00:09:00,670 --> 00:09:05,380
graph and say you you loaded a library

00:09:03,010 --> 00:09:08,350
with 1000 functions in it and you used

00:09:05,380 --> 00:09:09,760
one function we can eliminate 999

00:09:08,350 --> 00:09:11,590
functions and just keep the one that you

00:09:09,760 --> 00:09:13,839
actually use when close your script

00:09:11,590 --> 00:09:15,310
programmers make a build we Google

00:09:13,839 --> 00:09:18,130
closure actually eliminates everything

00:09:15,310 --> 00:09:19,779
down to the function level except except

00:09:18,130 --> 00:09:21,460
for the stuff they actually need um it

00:09:19,779 --> 00:09:23,230
does also for five years had advanced

00:09:21,460 --> 00:09:25,180
code splitting and the code spitting is

00:09:23,230 --> 00:09:26,500
not this sort of like at the module

00:09:25,180 --> 00:09:28,510
level people talk about doing code

00:09:26,500 --> 00:09:30,370
splits at the module level but Google

00:09:28,510 --> 00:09:32,140
closure can say okay you want these

00:09:30,370 --> 00:09:34,089
things these different libraries to be

00:09:32,140 --> 00:09:35,620
in the module then it will actually look

00:09:34,089 --> 00:09:37,779
at all your dependencies and say in

00:09:35,620 --> 00:09:40,000
these dependencies you only use a couple

00:09:37,779 --> 00:09:41,230
functions we can eliminate those modules

00:09:40,000 --> 00:09:43,180
and just move the functions that you

00:09:41,230 --> 00:09:45,250
need onto the locations where they

00:09:43,180 --> 00:09:47,110
belong again this is something that's

00:09:45,250 --> 00:09:48,339
just been there sitting there I mean I

00:09:47,110 --> 00:09:50,860
think it will be very hard to replicate

00:09:48,339 --> 00:09:52,839
actually because the way that Google

00:09:50,860 --> 00:09:55,540
closure works it really requires you to

00:09:52,839 --> 00:09:57,040
program in a much more static way so

00:09:55,540 --> 00:09:58,510
they at production time you can get this

00:09:57,040 --> 00:10:00,370
benefit it's actually a little bit

00:09:58,510 --> 00:10:02,080
annoying but it's a the reason closure

00:10:00,370 --> 00:10:04,210
script programmers don't care is we

00:10:02,080 --> 00:10:06,880
generate the correct JavaScript for you

00:10:04,210 --> 00:10:08,650
it would be tedious except we do the

00:10:06,880 --> 00:10:11,650
write right thing and then you benefit

00:10:08,650 --> 00:10:13,630
from Google closure and then finally a

00:10:11,650 --> 00:10:16,630
closure script again it's a pair it's

00:10:13,630 --> 00:10:18,610
parallel to react we there there really

00:10:16,630 --> 00:10:20,680
are no other JavaScript libraries um

00:10:18,610 --> 00:10:22,780
that are in use there are no other

00:10:20,680 --> 00:10:24,820
frameworks in use because in the closure

00:10:22,780 --> 00:10:27,880
script world we don't see react as a

00:10:24,820 --> 00:10:30,430
library at all right quote it for

00:10:27,880 --> 00:10:32,410
closure Java it's a platform right it

00:10:30,430 --> 00:10:34,000
gets us it gets us into many places

00:10:32,410 --> 00:10:36,280
where we want to go we can interact with

00:10:34,000 --> 00:10:38,560
very sophisticated libraries for the

00:10:36,280 --> 00:10:40,150
backend react allows us to do the same

00:10:38,560 --> 00:10:41,709
thing in the front-end except we can

00:10:40,150 --> 00:10:43,630
reach all the places where we wanna go

00:10:41,709 --> 00:10:45,190
if we want a target iOS you want to

00:10:43,630 --> 00:10:48,040
target Android if you want to target

00:10:45,190 --> 00:10:51,160
desktop browsers we now have one thing

00:10:48,040 --> 00:10:53,529
on the target right this is why we enter

00:10:51,160 --> 00:10:55,360
general rule we don't care about faster

00:10:53,529 --> 00:10:57,430
virtual Dom libraries or what have you

00:10:55,360 --> 00:10:59,050
if you if it doesn't allow us to reach

00:10:57,430 --> 00:11:00,640
the targets that we want to reach it

00:10:59,050 --> 00:11:03,760
really doesn't matter we we we have a

00:11:00,640 --> 00:11:05,830
much more holistic view of why reactives

00:11:03,760 --> 00:11:08,230
is valuable this is sort of giving a

00:11:05,830 --> 00:11:09,769
sense we think about reacting in quite a

00:11:08,230 --> 00:11:12,739
different way than I think that

00:11:09,769 --> 00:11:13,759
javascript developer does um there are

00:11:12,739 --> 00:11:15,470
other things that we're interested in

00:11:13,759 --> 00:11:18,110
but you hear you hear at night and I

00:11:15,470 --> 00:11:19,610
feel like this stuff it's it this stuff

00:11:18,110 --> 00:11:21,769
feels like how react felt three years

00:11:19,610 --> 00:11:24,529
ago to me whether you're talking about

00:11:21,769 --> 00:11:25,670
graph QL or Falkor de Tomic I'm not

00:11:24,529 --> 00:11:27,350
going to spend too much time on this but

00:11:25,670 --> 00:11:28,429
I think that these things absolutely

00:11:27,350 --> 00:11:31,429
need to be paid attention to

00:11:28,429 --> 00:11:33,769
um I think there's so much complexity

00:11:31,429 --> 00:11:35,540
right now between how you build a UI and

00:11:33,769 --> 00:11:37,790
how you write the backend and how you

00:11:35,540 --> 00:11:40,670
populate the UI and I think graph QL

00:11:37,790 --> 00:11:42,709
Falkor I'm have extremely good ideas I

00:11:40,670 --> 00:11:44,119
constantly talk about that if your

00:11:42,709 --> 00:11:45,649
JavaScript developer you should look at

00:11:44,119 --> 00:11:47,569
these things you should assess them um

00:11:45,649 --> 00:11:49,489
that I also work on the atomic and some

00:11:47,569 --> 00:11:50,929
of it biased here but I think the atomic

00:11:49,489 --> 00:11:54,049
because of the way it works is actually

00:11:50,929 --> 00:11:56,149
also an extremely good fit for doing UI

00:11:54,049 --> 00:11:57,980
work because in many ways it's very

00:11:56,149 --> 00:11:59,689
similar to graph QL you write graph like

00:11:57,980 --> 00:12:01,670
queries and I think it's a really good

00:11:59,689 --> 00:12:05,299
fit for having to write different kinds

00:12:01,670 --> 00:12:05,899
of clients all right so so you think

00:12:05,299 --> 00:12:07,040
okay

00:12:05,899 --> 00:12:09,079
Clojure script has made some interesting

00:12:07,040 --> 00:12:10,999
choices and actually there's a obviously

00:12:09,079 --> 00:12:13,699
a kind of synergy here and has this led

00:12:10,999 --> 00:12:15,199
to a huge success and I would say no

00:12:13,699 --> 00:12:17,059
we've experienced I would say moderate

00:12:15,199 --> 00:12:19,009
amounts of success I was at Euro closure

00:12:17,059 --> 00:12:21,920
in the same venue the the big European

00:12:19,009 --> 00:12:23,449
closure conference was here on Tuesday

00:12:21,920 --> 00:12:25,069
and Wednesday and it's about half the

00:12:23,449 --> 00:12:26,899
size or a third of the size of this

00:12:25,069 --> 00:12:28,939
audience it's a much much smaller

00:12:26,899 --> 00:12:30,649
community but I think that the nice

00:12:28,939 --> 00:12:32,569
thing about the community is that we

00:12:30,649 --> 00:12:34,519
found a way to be sustainable on its

00:12:32,569 --> 00:12:36,740
because we do care what's happening

00:12:34,519 --> 00:12:39,529
outside of our little world oh this is a

00:12:36,740 --> 00:12:41,509
slide from Simon painting Jones who's

00:12:39,529 --> 00:12:43,160
the sort of lead developer of the

00:12:41,509 --> 00:12:44,990
Glasgow Haskell compiler it's the most

00:12:43,160 --> 00:12:46,490
popular haskell compiler and he talks

00:12:44,990 --> 00:12:48,529
he's talking about his language designer

00:12:46,490 --> 00:12:50,809
how he's completely befuddled that

00:12:48,529 --> 00:12:53,419
Haskell somehow avoided this right this

00:12:50,809 --> 00:12:55,879
this graph is just as relevant for the

00:12:53,419 --> 00:12:57,110
typical compile the JavaScript language

00:12:55,879 --> 00:12:58,610
like I remember there used to be this

00:12:57,110 --> 00:12:59,869
website called all Jas and they're like

00:12:58,610 --> 00:13:01,970
thousands of compile to JavaScript

00:12:59,869 --> 00:13:03,529
languages and all of them probably had

00:13:01,970 --> 00:13:06,589
one user the person that created it

00:13:03,529 --> 00:13:08,869
right it really takes a lot more to

00:13:06,589 --> 00:13:11,869
convince people to a user of technology

00:13:08,869 --> 00:13:13,999
and a lot of that boils down to you have

00:13:11,869 --> 00:13:16,040
to really care about what's happening in

00:13:13,999 --> 00:13:17,899
the wider ecosystem on you all set to do

00:13:16,040 --> 00:13:20,029
a good job communicating but you're not

00:13:17,899 --> 00:13:23,210
anti anything we're not anti JavaScript

00:13:20,029 --> 00:13:25,460
in fact we're only succeeding because

00:13:23,210 --> 00:13:26,360
of technologies like react and these

00:13:25,460 --> 00:13:30,320
other interesting ideas that are

00:13:26,360 --> 00:13:31,610
happening like graph QL nagpur but but

00:13:30,320 --> 00:13:32,840
we also have you know when we do set

00:13:31,610 --> 00:13:34,550
ourselves apart from the JavaScript

00:13:32,840 --> 00:13:37,010
community this is I just told this there

00:13:34,550 --> 00:13:38,510
was like a was it like fatigue about

00:13:37,010 --> 00:13:41,420
JavaScript fatigue right this is this is

00:13:38,510 --> 00:13:43,610
a constant topic these days but this is

00:13:41,420 --> 00:13:45,560
a this is a funny slide right javascript

00:13:43,610 --> 00:13:48,320
has a there's an embarrassment of riches

00:13:45,560 --> 00:13:50,510
with respect to options so many so many

00:13:48,320 --> 00:13:51,920
options right you can you can you know

00:13:50,510 --> 00:13:53,900
everything is a module everything is a

00:13:51,920 --> 00:13:56,960
microt module everything is a plug-in I

00:13:53,900 --> 00:13:58,820
mean there's these really tiny there's a

00:13:56,960 --> 00:14:01,040
sort of emphasis on tiny architecture um

00:13:58,820 --> 00:14:02,900
at the same time I think the thing that

00:14:01,040 --> 00:14:04,340
we need you need to think about when you

00:14:02,900 --> 00:14:05,810
when you when you see this and not

00:14:04,340 --> 00:14:08,360
everything about doing it this way is

00:14:05,810 --> 00:14:11,210
bad but you know I I hear people talk

00:14:08,360 --> 00:14:13,940
about um you know do all these little

00:14:11,210 --> 00:14:15,650
things actually fit together are you

00:14:13,940 --> 00:14:18,020
fighting the way that these think things

00:14:15,650 --> 00:14:20,060
fit together are these things related in

00:14:18,020 --> 00:14:22,850
ways that are not actually desirable um

00:14:20,060 --> 00:14:27,410
and in closure our approach is that we

00:14:22,850 --> 00:14:29,360
think software is is really it can be

00:14:27,410 --> 00:14:31,070
too complicated we want our process to

00:14:29,360 --> 00:14:32,540
be simpler we want to use simpler

00:14:31,070 --> 00:14:34,550
methodologies that doesn't mean we're

00:14:32,540 --> 00:14:36,560
giving up on expressiveness right we

00:14:34,550 --> 00:14:39,290
want people to be very expressive but I

00:14:36,560 --> 00:14:40,940
think we can do it with less at the same

00:14:39,290 --> 00:14:43,670
time there are some interesting ufo-like

00:14:40,940 --> 00:14:45,560
bits inside closure enclosure script and

00:14:43,670 --> 00:14:47,150
I'll show one of these really sort of

00:14:45,560 --> 00:14:48,740
advanced things at the end of the talk

00:14:47,150 --> 00:14:51,170
which I think it'll be pretty easy to

00:14:48,740 --> 00:14:52,520
understand um but at the same time you

00:14:51,170 --> 00:14:53,960
know we have to convince people right

00:14:52,520 --> 00:14:55,850
but to convince people that we do have a

00:14:53,960 --> 00:14:59,600
UFO and not a piece of junk in the

00:14:55,850 --> 00:15:01,820
backyard so what one way one way to

00:14:59,600 --> 00:15:03,350
understand you know what how we think

00:15:01,820 --> 00:15:05,150
about software act because I can't talk

00:15:03,350 --> 00:15:07,880
about every aspect of the closure

00:15:05,150 --> 00:15:08,930
philosophy is I but my boss is rich icky

00:15:07,880 --> 00:15:10,280
the creative closure

00:15:08,930 --> 00:15:12,080
I really recommend seeing this talk

00:15:10,280 --> 00:15:14,300
simple made easy it is not it's not

00:15:12,080 --> 00:15:16,250
actually a closure talk it's just rich

00:15:14,300 --> 00:15:18,560
icky sort of outlining its philosophy

00:15:16,250 --> 00:15:20,480
about software and I think for me when I

00:15:18,560 --> 00:15:23,300
saw it it was really eye-opening and it

00:15:20,480 --> 00:15:25,970
sort of reminded me how much I like

00:15:23,300 --> 00:15:28,580
closure and how closure really embodies

00:15:25,970 --> 00:15:31,610
this notion of simplicity and trying to

00:15:28,580 --> 00:15:33,200
remove accidental complicit complexity

00:15:31,610 --> 00:15:34,380
image systems if you've never watched

00:15:33,200 --> 00:15:37,950
this talk Tyler

00:15:34,380 --> 00:15:39,510
ah simplifying it I mean simplifying is

00:15:37,950 --> 00:15:40,770
not about being small and this is I

00:15:39,510 --> 00:15:42,270
think something that really the

00:15:40,770 --> 00:15:44,580
JavaScript community could benefit from

00:15:42,270 --> 00:15:46,800
simple has nothing to do with the size

00:15:44,580 --> 00:15:48,450
of the thing right so when I talk about

00:15:46,800 --> 00:15:51,000
advance compilation that I can take a

00:15:48,450 --> 00:15:53,010
library with 1,000 functions and I have

00:15:51,000 --> 00:15:55,230
the technology to move one thing into my

00:15:53,010 --> 00:15:57,000
bill that's simple even though it took a

00:15:55,230 --> 00:15:57,450
very complicated algorithm to make that

00:15:57,000 --> 00:15:59,850
work

00:15:57,450 --> 00:16:01,470
that's simplicity right not that you

00:15:59,850 --> 00:16:03,450
have little libraries nobody cared this

00:16:01,470 --> 00:16:06,210
is not this is not what you care about

00:16:03,450 --> 00:16:08,820
right you care about oh I want one thing

00:16:06,210 --> 00:16:12,210
automate picking out that one thing for

00:16:08,820 --> 00:16:13,320
me so so thinking about simplicity in a

00:16:12,210 --> 00:16:16,740
deeper way I think is extremely

00:16:13,320 --> 00:16:18,720
important um unfortunately fortunately I

00:16:16,740 --> 00:16:20,220
think that this is some people are

00:16:18,720 --> 00:16:21,630
beginning to understand what we have to

00:16:20,220 --> 00:16:24,600
offer there was a really great talk I

00:16:21,630 --> 00:16:27,420
was here on Monday at react Vienna and

00:16:24,600 --> 00:16:29,550
was co-sponsored meetup like react

00:16:27,420 --> 00:16:31,320
Vienna and reacts yes and the Vienna

00:16:29,550 --> 00:16:32,880
closure was really great um I gave a

00:16:31,320 --> 00:16:34,350
talk on close respect and the second

00:16:32,880 --> 00:16:36,780
talk was really inspiring to me because

00:16:34,350 --> 00:16:38,550
you know I don't expect to convert many

00:16:36,780 --> 00:16:40,410
of you to closure script that's really

00:16:38,550 --> 00:16:42,630
besides the point it's really just to

00:16:40,410 --> 00:16:44,460
share some interesting ideas but it was

00:16:42,630 --> 00:16:46,620
really exciting to hear somebody talk

00:16:44,460 --> 00:16:49,350
about how they'd been like myself been

00:16:46,620 --> 00:16:51,480
doing JavaScript since 2005 they've seen

00:16:49,350 --> 00:16:52,860
all the various transitions and you know

00:16:51,480 --> 00:16:54,660
they had ended up into place or making a

00:16:52,860 --> 00:16:56,130
new product and it's based on next

00:16:54,660 --> 00:16:58,470
journal they're making a product and it

00:16:56,130 --> 00:17:00,060
was built on a redux immutable Jas and

00:16:58,470 --> 00:17:01,170
they're using webpack when using babel

00:17:00,060 --> 00:17:03,510
everything that everybody's doing and

00:17:01,170 --> 00:17:04,770
you know he was on stage and saying i've

00:17:03,510 --> 00:17:06,630
been doing this for so long and it's

00:17:04,770 --> 00:17:08,790
never been as complicated as as it is

00:17:06,630 --> 00:17:11,130
today and talking about you know

00:17:08,790 --> 00:17:13,440
spending a week just trying to get build

00:17:11,130 --> 00:17:14,760
working right why why am I doing this

00:17:13,440 --> 00:17:16,890
why are these little things that

00:17:14,760 --> 00:17:18,090
supposedly are modular they're not

00:17:16,890 --> 00:17:20,700
really actually delivering on that

00:17:18,090 --> 00:17:22,290
promise and it was cool to see that he

00:17:20,700 --> 00:17:24,570
had tried down which is which is awesome

00:17:22,290 --> 00:17:26,400
and he loved them and he was shocked how

00:17:24,570 --> 00:17:28,680
much simpler things were in the EM world

00:17:26,400 --> 00:17:30,510
and then for various reasons he actually

00:17:28,680 --> 00:17:31,620
gave closure a try and he was not a

00:17:30,510 --> 00:17:33,030
sorry clojurescript

00:17:31,620 --> 00:17:34,230
he was not a closure programmer or

00:17:33,030 --> 00:17:36,720
closure script programmer he just said

00:17:34,230 --> 00:17:37,980
let me just see how hard it'll be to

00:17:36,720 --> 00:17:40,680
transition or application of closure

00:17:37,980 --> 00:17:42,840
script um and he was like this is a

00:17:40,680 --> 00:17:44,400
parallel universe oh my god all the

00:17:42,840 --> 00:17:46,090
things I learned about immutable j/s all

00:17:44,400 --> 00:17:47,529
the things about single app state and

00:17:46,090 --> 00:17:49,419
matching and all this stuff everybody

00:17:47,529 --> 00:17:51,820
including script already understands it

00:17:49,419 --> 00:17:54,130
right the exact same philosophy that

00:17:51,820 --> 00:17:55,690
syntax different lots of parentheses but

00:17:54,130 --> 00:17:57,190
there's no difference on how we think

00:17:55,690 --> 00:17:59,260
software should be written no

00:17:57,190 --> 00:18:01,059
significant difference and so he a

00:17:59,260 --> 00:18:02,950
transitions application and he's been

00:18:01,059 --> 00:18:05,169
really excited um it allows him to

00:18:02,950 --> 00:18:06,970
narrow his attention but actually

00:18:05,169 --> 00:18:09,909
solving the problem and that's cool it's

00:18:06,970 --> 00:18:12,309
cool to hear that people are seeing what

00:18:09,909 --> 00:18:13,929
we believe to be true okay so I'm not

00:18:12,309 --> 00:18:16,360
going to talk any more about that if

00:18:13,929 --> 00:18:17,230
you're interested in hearing about more

00:18:16,360 --> 00:18:18,580
about Clojure script from the

00:18:17,230 --> 00:18:20,440
perspective of somebody who really like

00:18:18,580 --> 00:18:22,179
JavaScript or likes JavaScript or

00:18:20,440 --> 00:18:23,890
actually would like to use closure

00:18:22,179 --> 00:18:25,240
script and JavaScript together oh this

00:18:23,890 --> 00:18:27,070
is a great talk Clojure script for

00:18:25,240 --> 00:18:28,419
skeptics by Derek Sager it's probably

00:18:27,070 --> 00:18:30,279
one of the most popular talks has ever

00:18:28,419 --> 00:18:33,130
been given because it really is trying

00:18:30,279 --> 00:18:34,600
to get you explain why close your script

00:18:33,130 --> 00:18:37,270
if you're already doing JavaScript it's

00:18:34,600 --> 00:18:39,010
cool I recommend it um so again we're

00:18:37,270 --> 00:18:40,899
not anti JavaScript I mean people often

00:18:39,010 --> 00:18:43,870
get this impression it's just not true

00:18:40,899 --> 00:18:44,980
um we're actually I had to change my

00:18:43,870 --> 00:18:46,740
talk because I've been going to

00:18:44,980 --> 00:18:49,270
JavaScript conferences since 2012

00:18:46,740 --> 00:18:51,700
talking about immutability and close

00:18:49,270 --> 00:18:53,559
your script and various things um and it

00:18:51,700 --> 00:18:54,880
was amazing like like you know I'm at

00:18:53,559 --> 00:18:56,590
this conference and people talk about

00:18:54,880 --> 00:18:58,210
immutability and they're talking about

00:18:56,590 --> 00:19:00,399
you know single app saying and all the

00:18:58,210 --> 00:19:02,770
things that I think are true um and I

00:19:00,399 --> 00:19:05,020
was amazing to me as this time literally

00:19:02,770 --> 00:19:09,279
every code example on the screen is es

00:19:05,020 --> 00:19:10,779
es um six equus 2015-2016 whatever

00:19:09,279 --> 00:19:12,760
you want to call it uh and that really

00:19:10,779 --> 00:19:14,169
blew me away and that's for me it was a

00:19:12,760 --> 00:19:15,490
significant change it's been about a

00:19:14,169 --> 00:19:17,470
year since I've been at another

00:19:15,490 --> 00:19:18,940
JavaScript conference so I realized I

00:19:17,470 --> 00:19:21,190
should talk about this a bit because we

00:19:18,940 --> 00:19:23,020
do actually care about this and I

00:19:21,190 --> 00:19:24,669
started a project with Maria Geller

00:19:23,020 --> 00:19:26,710
who's pictured here on the left about a

00:19:24,669 --> 00:19:28,360
year ago google Summer of Code I knew

00:19:26,710 --> 00:19:31,360
that we would have to have a story for

00:19:28,360 --> 00:19:33,850
integrating with common j/s AMD required

00:19:31,360 --> 00:19:36,159
j/s all these various module formats and

00:19:33,850 --> 00:19:38,289
es2016 and I wanted to get the ball

00:19:36,159 --> 00:19:40,090
rolling and so Maria Geller we worked

00:19:38,289 --> 00:19:42,130
over summer to get basically an alpha

00:19:40,090 --> 00:19:43,960
quality thing you know has continued

00:19:42,130 --> 00:19:45,820
this work you it's appearing beautyrx on

00:19:43,960 --> 00:19:48,789
the on the right and so we we actually

00:19:45,820 --> 00:19:53,169
do take integration very seriously it's

00:19:48,789 --> 00:19:55,399
I saw a talk on on Tuesday where it was

00:19:53,169 --> 00:19:57,679
a person talking about

00:19:55,399 --> 00:19:59,029
how they had a rails back in and they

00:19:57,679 --> 00:20:01,460
wanted to do closure scrip from the

00:19:59,029 --> 00:20:03,019
front end and the truth is is that the

00:20:01,460 --> 00:20:04,549
back end people are doing friend and

00:20:03,019 --> 00:20:06,049
work and some they also friend of work

00:20:04,549 --> 00:20:08,659
people doing stuff but they have

00:20:06,049 --> 00:20:10,820
designers and designers know CSS and

00:20:08,659 --> 00:20:12,979
they know JavaScript and to be honest

00:20:10,820 --> 00:20:15,649
there's so much literature on react now

00:20:12,979 --> 00:20:18,229
and a designer can easily you know read

00:20:15,649 --> 00:20:19,669
spend a couple days on react write some

00:20:18,229 --> 00:20:21,649
stateful and stateless components some

00:20:19,669 --> 00:20:24,080
functional components they're able to do

00:20:21,649 --> 00:20:25,429
this um and so you know I heard from

00:20:24,080 --> 00:20:27,200
them and this was a validation that

00:20:25,429 --> 00:20:29,299
we're on the right track here's we want

00:20:27,200 --> 00:20:31,639
people to be able to write to integrate

00:20:29,299 --> 00:20:33,619
es6 and JSX

00:20:31,639 --> 00:20:35,749
and so this is this is alpha quality

00:20:33,619 --> 00:20:37,669
thing so I'm demoing it but it works but

00:20:35,749 --> 00:20:39,259
we would like this to improve and if you

00:20:37,669 --> 00:20:40,879
if you're excited about this we're all

00:20:39,259 --> 00:20:43,070
definitely looking for help but here is

00:20:40,879 --> 00:20:45,529
an es6 file this is a you know some

00:20:43,070 --> 00:20:48,679
react component as a class we export it

00:20:45,529 --> 00:20:50,989
and here I have some closure code and

00:20:48,679 --> 00:20:53,690
here at the top you can see I can just

00:20:50,989 --> 00:20:55,039
load it right the the compiler will

00:20:53,690 --> 00:20:56,960
actually compile all these things

00:20:55,039 --> 00:20:58,369
together and create one build and

00:20:56,960 --> 00:21:00,559
actually the cool thing about this is

00:20:58,369 --> 00:21:04,089
that dead code elimination and all that

00:21:00,559 --> 00:21:06,710
stuff that works on that will work on on

00:21:04,089 --> 00:21:10,399
this file this this will get compiled

00:21:06,710 --> 00:21:12,289
into something that supports advanced

00:21:10,399 --> 00:21:14,419
compilation so there's other benefits

00:21:12,289 --> 00:21:18,649
here as well so we are very serious

00:21:14,419 --> 00:21:21,399
about JavaScript Interop that you know

00:21:18,649 --> 00:21:23,719
follows modern best practices okay so

00:21:21,399 --> 00:21:24,769
enough about that so now I want it I

00:21:23,719 --> 00:21:26,539
want to end with a little bit of a

00:21:24,769 --> 00:21:28,219
spaceship thing so this is you know it's

00:21:26,539 --> 00:21:30,109
cool to talk about hopefully you get

00:21:28,219 --> 00:21:31,999
some sense of why closure script is cool

00:21:30,109 --> 00:21:33,559
and why we love react in the react

00:21:31,999 --> 00:21:37,849
ecosystem but here I want to talk about

00:21:33,559 --> 00:21:39,109
a spaceship thing so you know at cognate

00:21:37,849 --> 00:21:40,820
X we actually think there's a lot more

00:21:39,109 --> 00:21:42,169
mileage to dynamic programming languages

00:21:40,820 --> 00:21:43,879
even though we think you know there's

00:21:42,169 --> 00:21:45,409
nothing wrong with typing or any of

00:21:43,879 --> 00:21:48,499
these projects whether it's Elm Reason

00:21:45,409 --> 00:21:51,349
flow the truth is people like these

00:21:48,499 --> 00:21:53,960
languages because the types give you a

00:21:51,349 --> 00:21:56,330
type of software specification right the

00:21:53,960 --> 00:21:58,190
reason people like types is you document

00:21:56,330 --> 00:21:59,389
what the thing does what it returns and

00:21:58,190 --> 00:22:01,039
then when I sit down to write your

00:21:59,389 --> 00:22:03,589
program I can look at the types the

00:22:01,039 --> 00:22:05,419
types help me understand the meaning of

00:22:03,589 --> 00:22:07,339
the program this is extremely important

00:22:05,419 --> 00:22:09,170
the hardest part about software is like

00:22:07,339 --> 00:22:10,670
what the hell does any of this stuff

00:22:09,170 --> 00:22:12,710
right so anything that helps us

00:22:10,670 --> 00:22:14,900
understand this is a good thing so you

00:22:12,710 --> 00:22:17,210
you know docstrings documentation and

00:22:14,900 --> 00:22:19,760
types right you want all this stuff on

00:22:17,210 --> 00:22:22,370
so spec comes to this problem with a

00:22:19,760 --> 00:22:23,690
slightly different hat right it says yes

00:22:22,370 --> 00:22:25,850
you want to do this type of

00:22:23,690 --> 00:22:28,940
specification but wouldn't it be awesome

00:22:25,850 --> 00:22:30,830
if your specification did way more for

00:22:28,940 --> 00:22:32,690
example if it could generate example

00:22:30,830 --> 00:22:35,150
data right if you could actually use

00:22:32,690 --> 00:22:37,100
your specification to create examples or

00:22:35,150 --> 00:22:38,870
if you could use your specification to

00:22:37,100 --> 00:22:41,120
automatically test the software is

00:22:38,870 --> 00:22:43,760
correct without writing the test because

00:22:41,120 --> 00:22:45,620
the spec tells us how to test the

00:22:43,760 --> 00:22:49,160
function and that's really powerful

00:22:45,620 --> 00:22:53,720
so I'm gonna demo this alright oops

00:22:49,160 --> 00:22:56,090
I mean that slide here we go so here is

00:22:53,720 --> 00:22:57,620
I I did a spec talk and it's gonna be a

00:22:56,090 --> 00:22:59,810
little bit different this spec talk is

00:22:57,620 --> 00:23:02,360
going to be much more nted around I

00:22:59,810 --> 00:23:04,850
think a UI audience so here imagine I

00:23:02,360 --> 00:23:06,440
want to specify my app state right so

00:23:04,850 --> 00:23:08,000
one thing I like about JavaScript and I

00:23:06,440 --> 00:23:09,830
think we're JavaScript and closure and

00:23:08,000 --> 00:23:11,150
closure bar you are very aligned is when

00:23:09,830 --> 00:23:13,100
I fell in love with JavaScript what I

00:23:11,150 --> 00:23:14,900
liked about it was like I can write some

00:23:13,100 --> 00:23:16,580
objects I can write some arrays I got

00:23:14,900 --> 00:23:20,090
some strings I got some numbers it's

00:23:16,580 --> 00:23:22,340
just some generic information right even

00:23:20,090 --> 00:23:24,380
if you do type stuff right when you do a

00:23:22,340 --> 00:23:25,820
typed program you still often have to

00:23:24,380 --> 00:23:29,030
communicate between parts of your system

00:23:25,820 --> 00:23:31,310
through generic information JSON some

00:23:29,030 --> 00:23:32,270
generic interchange format which doesn't

00:23:31,310 --> 00:23:34,910
actually have that much information

00:23:32,270 --> 00:23:37,490
about the semantics of what actually

00:23:34,910 --> 00:23:39,320
going to happen at each end point so the

00:23:37,490 --> 00:23:41,020
truth is is that most systems are like

00:23:39,320 --> 00:23:44,120
this mode systems have to exchange

00:23:41,020 --> 00:23:46,100
generic information not not very not

00:23:44,120 --> 00:23:48,670
very type specific information I'm in

00:23:46,100 --> 00:23:51,530
closure we'd like this simple approach

00:23:48,670 --> 00:23:54,050
just program with generic data now the

00:23:51,530 --> 00:23:57,080
problem with as everybody knows right

00:23:54,050 --> 00:23:59,690
with JSON is that when you get a huge

00:23:57,080 --> 00:24:01,670
payload from the server what is in there

00:23:59,690 --> 00:24:03,830
right the only way you can know is to

00:24:01,670 --> 00:24:05,960
read the docs and the docs might not be

00:24:03,830 --> 00:24:08,120
true there is no way to know what's in

00:24:05,960 --> 00:24:09,500
the structure of the thing right no but

00:24:08,120 --> 00:24:11,120
and as far as I can tell people have

00:24:09,500 --> 00:24:13,160
done like JSON schema and whatever what

00:24:11,120 --> 00:24:15,830
have you right but they only want to

00:24:13,160 --> 00:24:18,260
work on one part of the problem right so

00:24:15,830 --> 00:24:20,450
they're only talking about specking the

00:24:18,260 --> 00:24:22,419
wire but we believe that we actually

00:24:20,450 --> 00:24:24,249
want this capability all

00:24:22,419 --> 00:24:25,720
like all throughout a program doesn't

00:24:24,249 --> 00:24:26,980
matter what you're doing whether you're

00:24:25,720 --> 00:24:28,899
writing your program whether you're

00:24:26,980 --> 00:24:30,850
talking to remote service you want to be

00:24:28,899 --> 00:24:33,009
able to talk about specification in an

00:24:30,850 --> 00:24:35,049
expressive way so imagine I'm building

00:24:33,009 --> 00:24:37,179
an app state so here there's going to be

00:24:35,049 --> 00:24:40,779
a task there's going to be a task and

00:24:37,179 --> 00:24:42,609
we're going to have a property in there

00:24:40,779 --> 00:24:44,950
called completed I'm going to shoot to

00:24:42,609 --> 00:24:47,769
do MVC just to keep this simple um a

00:24:44,950 --> 00:24:49,179
task will also have a title ignore this

00:24:47,769 --> 00:24:51,999
for now that this part will make sense

00:24:49,179 --> 00:24:55,600
here in a second what is a task a task

00:24:51,999 --> 00:24:57,850
is simply a map or an object you would

00:24:55,600 --> 00:25:00,159
say in JavaScript with a title property

00:24:57,850 --> 00:25:02,109
and a completed property that's all that

00:25:00,159 --> 00:25:03,669
it is and they better be

00:25:02,109 --> 00:25:06,009
they better be the completed better be a

00:25:03,669 --> 00:25:08,289
boolean and title better be a string and

00:25:06,009 --> 00:25:11,169
then here I can ask the question you

00:25:08,289 --> 00:25:13,450
know check this map this untyped map

00:25:11,169 --> 00:25:17,019
there's no type right just a map or just

00:25:13,450 --> 00:25:19,119
an object is this a valid task and this

00:25:17,019 --> 00:25:20,859
should return false because 1 is not

00:25:19,119 --> 00:25:24,820
true or false right this does not

00:25:20,859 --> 00:25:27,519
satisfy the specification here we should

00:25:24,820 --> 00:25:31,059
get true because completed respects

00:25:27,519 --> 00:25:33,460
discussed the spec and then what's

00:25:31,059 --> 00:25:35,619
really cool is that you know we want to

00:25:33,460 --> 00:25:37,509
know why spec the spec failed so when I

00:25:35,619 --> 00:25:38,919
get when I get something from the server

00:25:37,509 --> 00:25:40,840
and something went wrong and something

00:25:38,919 --> 00:25:42,489
is not in the right place you have to

00:25:40,840 --> 00:25:44,409
like you know dive into it and spend

00:25:42,489 --> 00:25:45,879
hours just figuring out where do we go

00:25:44,409 --> 00:25:48,340
wrong inside of the structure of the

00:25:45,879 --> 00:25:50,019
thing um spec is completely fully

00:25:48,340 --> 00:25:53,320
recursive and it will give you the path

00:25:50,019 --> 00:25:54,940
into the failure so here I can say you

00:25:53,320 --> 00:25:58,090
know explain to me why this doesn't work

00:25:54,940 --> 00:26:01,720
and it says this value 1 the value 1

00:25:58,090 --> 00:26:03,429
inside of this map doesn't satisfy the

00:26:01,720 --> 00:26:05,859
completed predicate because it's not a

00:26:03,429 --> 00:26:08,619
boolean this is exactly what you want to

00:26:05,859 --> 00:26:10,570
see um and this is it this actually can

00:26:08,619 --> 00:26:12,820
be given out to you as data and we hope

00:26:10,570 --> 00:26:15,070
that people will take this capability

00:26:12,820 --> 00:26:18,820
which is runtime capability to explain

00:26:15,070 --> 00:26:20,259
errors and do Elm like error reporting

00:26:18,820 --> 00:26:22,149
which would be really really awesome

00:26:20,259 --> 00:26:24,039
so it doesn't matter how big your dig

00:26:22,149 --> 00:26:26,529
your responses or your data structure is

00:26:24,039 --> 00:26:28,210
you would get a precise location and say

00:26:26,529 --> 00:26:30,129
right here is where you did the wrong

00:26:28,210 --> 00:26:31,929
thing you got a number you expected a

00:26:30,129 --> 00:26:35,109
date okay

00:26:31,929 --> 00:26:36,310
so the way that spec works is it's

00:26:35,109 --> 00:26:37,450
basically

00:26:36,310 --> 00:26:39,280
based on the theory of regular

00:26:37,450 --> 00:26:40,720
expressions as programmers you probably

00:26:39,280 --> 00:26:43,660
think regular expressions that means

00:26:40,720 --> 00:26:45,160
strings and we say no we know that the

00:26:43,660 --> 00:26:46,480
theory of vertical expressions is super

00:26:45,160 --> 00:26:48,610
powerful all you have to do is add

00:26:46,480 --> 00:26:50,920
recursion and basically you get the same

00:26:48,610 --> 00:26:53,380
power as context-free grammars right

00:26:50,920 --> 00:26:55,120
that's what you get if you add recursion

00:26:53,380 --> 00:26:56,950
to the theory of regular expression so

00:26:55,120 --> 00:26:58,750
here we can say let's let's let's

00:26:56,950 --> 00:27:00,820
support the idea of star same way you

00:26:58,750 --> 00:27:03,190
would have to say star for matching in a

00:27:00,820 --> 00:27:06,430
regular expression here I say - duze a

00:27:03,190 --> 00:27:10,210
to do list is just a sequence of tasks

00:27:06,430 --> 00:27:12,490
okay then here I say is this valid you

00:27:10,210 --> 00:27:14,860
know here is this a valid sequence

00:27:12,490 --> 00:27:17,850
introduced there's a string in here it

00:27:14,860 --> 00:27:21,010
doesn't make any sense and we'll say no

00:27:17,850 --> 00:27:23,590
explain why this isn't right again bar

00:27:21,010 --> 00:27:27,070
fails a specification it's not a map

00:27:23,590 --> 00:27:30,010
right I'm here if I fix this

00:27:27,070 --> 00:27:31,810
of course that will work now where it

00:27:30,010 --> 00:27:32,950
gets really cool as you spent all this

00:27:31,810 --> 00:27:34,840
time like this is the thing I don't like

00:27:32,950 --> 00:27:36,160
about typing if you do all this typing

00:27:34,840 --> 00:27:38,050
and you're typing you're actually typing

00:27:36,160 --> 00:27:39,250
to get the types there you want to know

00:27:38,050 --> 00:27:40,960
that you're that you're getting a lot of

00:27:39,250 --> 00:27:42,910
mileage out of this work that you have

00:27:40,960 --> 00:27:44,530
to do in spec we think it's really

00:27:42,910 --> 00:27:46,390
important that this is the case here I

00:27:44,530 --> 00:27:49,780
can say now that I've specified the

00:27:46,390 --> 00:27:51,430
specification generate some examples

00:27:49,780 --> 00:27:54,760
give me some examples of what this

00:27:51,430 --> 00:27:57,300
should look like and so here you see

00:27:54,760 --> 00:28:00,190
that it's able to produce on the fly

00:27:57,300 --> 00:28:02,260
something that matches that spec imagine

00:28:00,190 --> 00:28:04,810
if all the functions that you had write

00:28:02,260 --> 00:28:06,850
that people are writing imagine they all

00:28:04,810 --> 00:28:08,470
had specs and instead of like being like

00:28:06,850 --> 00:28:11,830
what the helmet was to build to get this

00:28:08,470 --> 00:28:17,050
thing to run you can just make

00:28:11,830 --> 00:28:19,270
it we can make it for you so here's

00:28:17,050 --> 00:28:20,560
here's filter so like so imagine we want

00:28:19,270 --> 00:28:21,970
to we want to we want to inspect the

00:28:20,560 --> 00:28:23,770
entire app state so the app state will

00:28:21,970 --> 00:28:25,990
have filter and they'll have app state

00:28:23,770 --> 00:28:28,060
in there so app state the app state the

00:28:25,990 --> 00:28:30,790
single atom will be the active filter

00:28:28,060 --> 00:28:33,580
end up to do is list and here I can go

00:28:30,790 --> 00:28:35,260
show me this let's do this again cuz

00:28:33,580 --> 00:28:37,060
that's a bit empty so this is an app

00:28:35,260 --> 00:28:39,760
state so I could just feed this into a

00:28:37,060 --> 00:28:41,500
react binding for a closer script right

00:28:39,760 --> 00:28:42,850
there's a filter and there's Alyssa -

00:28:41,500 --> 00:28:45,760
duze and that's pretty sweet

00:28:42,850 --> 00:28:47,410
um I'm going to show one thing and I'm

00:28:45,760 --> 00:28:49,230
not this is not something you should do

00:28:47,410 --> 00:28:51,059
I'm just showing this because I want to

00:28:49,230 --> 00:28:53,130
you have a nice simple example you can

00:28:51,059 --> 00:28:55,440
understand so what I want to do in this

00:28:53,130 --> 00:28:58,980
app state I want valid app states to the

00:28:55,440 --> 00:29:00,929
only the case where the filter matches

00:28:58,980 --> 00:29:02,940
the contents of to do so if the filter

00:29:00,929 --> 00:29:04,440
says active there better not be need to

00:29:02,940 --> 00:29:06,750
do is that are completed that the filter

00:29:04,440 --> 00:29:09,090
says completed there better not be any

00:29:06,750 --> 00:29:10,200
in there that are not completed of

00:29:09,090 --> 00:29:12,630
course this is not something you want to

00:29:10,200 --> 00:29:14,850
do in a real list application but the

00:29:12,630 --> 00:29:16,679
truth is in your app states you have

00:29:14,850 --> 00:29:18,809
cases where you have in variants where

00:29:16,679 --> 00:29:20,880
some state is here and then there's

00:29:18,809 --> 00:29:22,770
other state that better be this way

00:29:20,880 --> 00:29:24,870
there's a invariant that should be

00:29:22,770 --> 00:29:26,220
maintained and I guarantee most of most

00:29:24,870 --> 00:29:27,390
of the people that are doing this if

00:29:26,220 --> 00:29:29,340
you're doing this in your programs you

00:29:27,390 --> 00:29:31,860
do this in an extremely ad-hoc way and

00:29:29,340 --> 00:29:33,690
so spec gives you a discipline way to do

00:29:31,860 --> 00:29:36,240
this so here I'm going to say valid app

00:29:33,690 --> 00:29:38,040
state and I'm gonna say the only valid

00:29:36,240 --> 00:29:39,840
app states are ones where if the app

00:29:38,040 --> 00:29:41,700
state is completed there better only be

00:29:39,840 --> 00:29:44,520
completed things if it's active there's

00:29:41,700 --> 00:29:46,380
only not completed things on and the

00:29:44,520 --> 00:29:48,929
only case that it's not one of those two

00:29:46,380 --> 00:29:52,020
is that the filter is all no other

00:29:48,929 --> 00:29:53,520
states are valid so down here I'm going

00:29:52,020 --> 00:29:57,350
to make a dummy app state which is

00:29:53,520 --> 00:30:00,720
invalid because here it says completed

00:29:57,350 --> 00:30:02,190
false right and it's in here so this

00:30:00,720 --> 00:30:05,429
can't be valid so I'm going to evaluate

00:30:02,190 --> 00:30:12,059
that I'm going to say check it it says

00:30:05,429 --> 00:30:13,110
no if I switch this to true boomba work

00:30:12,059 --> 00:30:15,780
all right

00:30:13,110 --> 00:30:17,580
so let's now let's not see the leaf

00:30:15,780 --> 00:30:20,250
strip the less trivial example and then

00:30:17,580 --> 00:30:21,510
it'll be done okay so I'm going to write

00:30:20,250 --> 00:30:23,040
a function it's going to take an app

00:30:21,510 --> 00:30:24,660
state and it's going to produce a new

00:30:23,040 --> 00:30:25,860
app state what does this function do it

00:30:24,660 --> 00:30:27,690
takes an app state it's called the

00:30:25,860 --> 00:30:29,610
functions called apply filter it takes

00:30:27,690 --> 00:30:31,650
an app State it applies the filter and

00:30:29,610 --> 00:30:34,080
the thing that comes out the other side

00:30:31,650 --> 00:30:35,520
of it better be right so I've written a

00:30:34,080 --> 00:30:36,780
function which has a bug here I've

00:30:35,520 --> 00:30:38,580
written a function that has a bug and

00:30:36,780 --> 00:30:40,620
I'm not I'm not going to write any test

00:30:38,580 --> 00:30:43,350
because I wrote a spec and because we

00:30:40,620 --> 00:30:46,260
can generate data I can get closure spec

00:30:43,350 --> 00:30:49,260
to show me the smallest app state that

00:30:46,260 --> 00:30:52,850
proves this function is broken so here I

00:30:49,260 --> 00:30:55,919
can go check you know apply filter and

00:30:52,850 --> 00:30:59,610
we can scroll back up and here it says

00:30:55,919 --> 00:31:01,230
right here this is the smallest argument

00:30:59,610 --> 00:31:02,659
that it could find so it's not just a

00:31:01,230 --> 00:31:04,849
gigantic app say it's the small

00:31:02,659 --> 00:31:08,330
this smallest apps ain't they can find

00:31:04,849 --> 00:31:15,859
that doesn't satisfy the thing so let's

00:31:08,330 --> 00:31:19,489
just copy and paste this up it down here

00:31:15,859 --> 00:31:21,919
and let's apply it and we know this is

00:31:19,489 --> 00:31:24,379
wrong because the filter is active and

00:31:21,919 --> 00:31:27,649
this is completed right that's not right

00:31:24,379 --> 00:31:29,840
so this is awesome I when you're doing

00:31:27,649 --> 00:31:31,399
testing and something goes wrong what do

00:31:29,840 --> 00:31:33,950
you do the next eight hours your life is

00:31:31,399 --> 00:31:35,929
finding minimal cases the smallest thing

00:31:33,950 --> 00:31:37,220
that causes your program to break and

00:31:35,929 --> 00:31:40,460
I've shown you that we can we can

00:31:37,220 --> 00:31:42,799
determine this for you automatically so

00:31:40,460 --> 00:31:44,029
hopefully you're some interest this is

00:31:42,799 --> 00:31:45,979
there's nothing about this that's

00:31:44,029 --> 00:31:47,359
specific to closure right this is idea

00:31:45,979 --> 00:31:49,279
you can if you're inspired you could

00:31:47,359 --> 00:31:50,509
walk walk home today and make this for

00:31:49,279 --> 00:31:52,789
JavaScript I think this is a very

00:31:50,509 --> 00:31:56,139
powerful way to talk about programs and

00:31:52,789 --> 00:32:00,979
describe programs so that's all I had so

00:31:56,139 --> 00:32:03,159
thank you very much well amazing thank

00:32:00,979 --> 00:32:03,159
you

00:32:03,610 --> 00:32:11,360
[Applause]

00:32:06,210 --> 00:32:14,999
let's have a look at the questions um

00:32:11,360 --> 00:32:17,850
okay okay okay yeah so first question

00:32:14,999 --> 00:32:21,269
what level expectation of a do you need

00:32:17,850 --> 00:32:23,490
I actually own next is actually design

00:32:21,269 --> 00:32:25,830
after doing this stuff for about ten

00:32:23,490 --> 00:32:26,940
years so I don't actually recommend it

00:32:25,830 --> 00:32:29,039
that much if you're just getting started

00:32:26,940 --> 00:32:32,009
out there's a framework called reagent

00:32:29,039 --> 00:32:32,999
um which is very much like Redux so if

00:32:32,009 --> 00:32:35,279
you're familiar and you're comfortable

00:32:32,999 --> 00:32:36,809
Redux and you don't really want any more

00:32:35,279 --> 00:32:38,759
help than that or maybe you're not

00:32:36,809 --> 00:32:42,419
convinced that relay or Falkor is a good

00:32:38,759 --> 00:32:44,249
idea yet um ohm ohm next which is really

00:32:42,419 --> 00:32:46,619
what we're working on now really assumes

00:32:44,249 --> 00:32:48,899
that you understand why relay and Falkor

00:32:46,619 --> 00:32:51,450
are a good idea and that's actually a

00:32:48,899 --> 00:32:52,830
lot to understand so I would say if you

00:32:51,450 --> 00:32:54,600
just want to play around with culture

00:32:52,830 --> 00:32:56,999
script and you want to have fun don't

00:32:54,600 --> 00:32:58,710
look at home try reagent it's very easy

00:32:56,999 --> 00:33:02,399
it's very simple to get into tons of

00:32:58,710 --> 00:33:04,740
examples great community uh so should I

00:33:02,399 --> 00:33:06,809
start with clojurescript or elm why I

00:33:04,740 --> 00:33:09,240
mean I think Richard gave a great talk

00:33:06,809 --> 00:33:11,279
about about elm yesterday I think you

00:33:09,240 --> 00:33:13,649
should try both I mean they're both fun

00:33:11,279 --> 00:33:16,049
I mean what I'm trying to convince you

00:33:13,649 --> 00:33:17,879
to do is just to try it and maybe you

00:33:16,049 --> 00:33:19,679
decide you want to use it but even

00:33:17,879 --> 00:33:21,749
better would be if you got some ideas I

00:33:19,679 --> 00:33:23,549
mean my talk was about how I constantly

00:33:21,749 --> 00:33:25,379
come back to the JavaScript community to

00:33:23,549 --> 00:33:26,970
get ideas and I think we can all do

00:33:25,379 --> 00:33:28,639
better collectively if we're trading

00:33:26,970 --> 00:33:33,600
ideas so I think you should try them all

00:33:28,639 --> 00:33:40,919
okay um the autocompletes

00:33:33,600 --> 00:33:42,809
last year what um I'm not going to

00:33:40,919 --> 00:33:45,269
answer that one okay

00:33:42,809 --> 00:33:46,769
what do you think about reason um I

00:33:45,269 --> 00:33:49,080
actually haven't had time to look at

00:33:46,769 --> 00:33:51,389
reason I'm sad sadly I missed most of

00:33:49,080 --> 00:33:53,639
the talks um because I'm working on this

00:33:51,389 --> 00:33:54,929
one so I will have to look at reason but

00:33:53,639 --> 00:33:56,909
I did get to talk some people working on

00:33:54,929 --> 00:33:58,889
reason the reason sounds cool I mean

00:33:56,909 --> 00:34:00,360
Jordan is obviously a very smart guy he

00:33:58,889 --> 00:34:04,559
created react I mean if he's working on

00:34:00,360 --> 00:34:05,610
something I'm paying attention oh what's

00:34:04,559 --> 00:34:07,830
the easiest way to start with

00:34:05,610 --> 00:34:10,049
clojurescript so fig wheel big wheel

00:34:07,830 --> 00:34:14,040
it's you you know you can go if you use

00:34:10,049 --> 00:34:15,790
OS 10 brew install a line line big wheel

00:34:14,040 --> 00:34:20,710
new or whatever and boom

00:34:15,790 --> 00:34:22,540
you have a fig wheel project I see speck

00:34:20,710 --> 00:34:25,600
as an often way to get static type fish

00:34:22,540 --> 00:34:28,150
benefits I hope that I explained why

00:34:25,600 --> 00:34:30,970
this is not like a static type system so

00:34:28,150 --> 00:34:36,250
I'm not going to answer that one oh that

00:34:30,970 --> 00:34:37,300
it ok cool thank you awesome thank you

00:34:36,250 --> 00:34:40,519
very much

00:34:37,300 --> 00:34:40,519

YouTube URL: https://www.youtube.com/watch?v=lkh4hjyHdWA


