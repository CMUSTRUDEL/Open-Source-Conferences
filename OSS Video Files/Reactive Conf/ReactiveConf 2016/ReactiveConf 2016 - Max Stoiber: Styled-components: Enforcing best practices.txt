Title: ReactiveConf 2016 - Max Stoiber: Styled-components: Enforcing best practices
Publication date: 2016-11-23
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Max Stoiber: Styled-components: Enforcing best practices

Building user interfaces on the web is hard, because the web, and thus CSS, was inherently made for documents. Because UIs fundamentally are not documents, we've seen a mindset shift towards building them as component-based system â€“ we are now in the component age. The rise of JavaScript frameworks like React, Ember and recently Angular 2, the effort of the W3C to standardize a web-native component system, pattern libraries and styleguides being considered 'the right way to build web applications' and many other things have illuminated this revolution. With that, and a few more things, in mind, Glen Maddern (CSS Modules creator) and I sat down and started thinking about styling in this new era. We took the best of CSS and the web to build a new way to style react applications. Let's talk about what we thought about and why we arrived where we did â€“ ðŸ’… styled-components.

---

Have you heard about ReactiveConf? According to tech superstars such as David Nolen, Richard Feldman, or Brent Vatne, itâ€™s the best conference on web and mobile app development! It focuses on all things React and beyond and takes place annually in Bratislava, Slovakia.

In 2016, more than 700 attendees from all over the world spent three days in Bratislava getting inspired, sharing amazing new ideas, and meeting more than 30 awesome speakers from companies such as Google, Cognitect, NoRedInk, RethinkDB, Airbnb, Microsoft, Facebook, and the list could go on forever.

If you want to be part of the next event, get your tickets now at https://reactiveconf.com, and React with us!
Captions: 
	00:00:04,580 --> 00:00:09,260
my name's max I come from beautiful

00:00:07,370 --> 00:00:11,540
Vienna Austria which actually is like

00:00:09,260 --> 00:00:12,530
around the corner from here so what you

00:00:11,540 --> 00:00:15,740
see in the background there

00:00:12,530 --> 00:00:17,000
that's Vienna you can follow me on

00:00:15,740 --> 00:00:18,710
Twitter if you have any questions

00:00:17,000 --> 00:00:19,880
comments or feedback after the talk just

00:00:18,710 --> 00:00:23,480
see me on Twitter and I'll answer them

00:00:19,880 --> 00:00:26,420
whenever I work as an open source

00:00:23,480 --> 00:00:28,280
developer I think no signal we're a

00:00:26,420 --> 00:00:32,480
full-stack JavaScript agency from

00:00:28,280 --> 00:00:36,140
Australia now before you get confused

00:00:32,480 --> 00:00:40,120
here I am from Austria all right Austria

00:00:36,140 --> 00:00:43,760
and Australia are two separate countries

00:00:40,120 --> 00:00:45,110
they are not the same thing okay if you

00:00:43,760 --> 00:00:48,590
come to me and ask me about kangaroos

00:00:45,110 --> 00:00:50,239
I'm going to punch you in the face so I

00:00:48,590 --> 00:00:53,300
work for think Miller which is an agency

00:00:50,239 --> 00:00:54,950
based in Sydney we do lots of nodejs on

00:00:53,300 --> 00:00:56,989
the back end and tons and tons of react

00:00:54,950 --> 00:01:00,649
and react native on the front end and

00:00:56,989 --> 00:01:02,390
the mobile as an open source developer

00:01:00,649 --> 00:01:03,770
I'm in saying quite a few open source

00:01:02,390 --> 00:01:05,899
projects some of which you might have

00:01:03,770 --> 00:01:07,700
further the most famous one is react

00:01:05,899 --> 00:01:10,749
boilerplate which just two days ago

00:01:07,700 --> 00:01:13,490
crossed to 10,000 star mark on github

00:01:10,749 --> 00:01:16,219
it's one of the most popular reacts

00:01:13,490 --> 00:01:18,139
elekid's friendly and github I also

00:01:16,219 --> 00:01:19,929
maintain Keystone JS which is our

00:01:18,139 --> 00:01:22,399
node.js content management system and

00:01:19,929 --> 00:01:24,529
elemental go I would use our react

00:01:22,399 --> 00:01:28,399
component library that we built to build

00:01:24,529 --> 00:01:30,259
the Keystone web interface now before

00:01:28,399 --> 00:01:32,959
that question comes up in the Q&A

00:01:30,259 --> 00:01:34,819
I have stickers okay if you want

00:01:32,959 --> 00:01:38,479
stickers come find me afterwards and you

00:01:34,819 --> 00:01:44,270
can have some all right yeah thank you

00:01:38,479 --> 00:01:45,979
see that yeah we are now for the past

00:01:44,270 --> 00:01:49,310
few years have been in what I like to

00:01:45,979 --> 00:01:51,799
call the component age right we have

00:01:49,310 --> 00:01:54,349
this emergence of a new pattern of

00:01:51,799 --> 00:01:57,319
building complex user interfaces right

00:01:54,349 --> 00:01:59,569
the web and CSS and everything would

00:01:57,319 --> 00:02:01,579
sort of inherently made for documents

00:01:59,569 --> 00:02:03,859
right it was meant for scientific papers

00:02:01,579 --> 00:02:05,749
to be in exchange which isn't like the

00:02:03,859 --> 00:02:08,750
perfect model to build user interfaces

00:02:05,749 --> 00:02:10,970
in right so we discover that we can

00:02:08,750 --> 00:02:13,400
build components and then we can compose

00:02:10,970 --> 00:02:15,140
these components together and can build

00:02:13,400 --> 00:02:16,260
really complex user interface it's much

00:02:15,140 --> 00:02:18,760
more easily

00:02:16,260 --> 00:02:20,530
you can see this in like you know not

00:02:18,760 --> 00:02:22,930
only in the popularity of react and

00:02:20,530 --> 00:02:25,300
frameworks like ember and angular 2 but

00:02:22,930 --> 00:02:28,210
also in the emergence of things like FEM

00:02:25,300 --> 00:02:29,860
and suit CSS and you know style guides

00:02:28,210 --> 00:02:31,270
being a thing and pattern libraries all

00:02:29,860 --> 00:02:34,560
of these things just point to what

00:02:31,270 --> 00:02:38,140
everybody loves components right as

00:02:34,560 --> 00:02:39,940
we've started building these component

00:02:38,140 --> 00:02:41,740
based systems we've discovered some best

00:02:39,940 --> 00:02:45,730
practices when working with them to make

00:02:41,740 --> 00:02:47,590
our lives easier the first best practice

00:02:45,730 --> 00:02:49,330
that I think everybody agrees on is that

00:02:47,590 --> 00:02:51,370
you want to have focused components

00:02:49,330 --> 00:02:53,980
right small focused components that do

00:02:51,370 --> 00:02:56,080
one thing and do it really well like a

00:02:53,980 --> 00:02:57,730
button component for example that's just

00:02:56,080 --> 00:03:00,250
a button the button component isn't a

00:02:57,730 --> 00:03:02,740
header a filter a sidebar and main area

00:03:00,250 --> 00:03:04,300
and the button it's just a button and no

00:03:02,740 --> 00:03:06,790
matter where you put it it's still just

00:03:04,300 --> 00:03:08,500
a button right that's really really nice

00:03:06,790 --> 00:03:10,750
to work with as a developer because you

00:03:08,500 --> 00:03:12,370
know you just build those tiny Lego

00:03:10,750 --> 00:03:14,110
blocks like it was said yesterday in a

00:03:12,370 --> 00:03:15,220
lightning talk and then you just put

00:03:14,110 --> 00:03:19,390
them together and they're all going to

00:03:15,220 --> 00:03:21,400
be perfectly fine now because we have

00:03:19,390 --> 00:03:23,280
this these completely focused and small

00:03:21,400 --> 00:03:26,650
components we want them to be

00:03:23,280 --> 00:03:29,709
independent as well right if I change

00:03:26,650 --> 00:03:31,630
something on the button I'm the styling

00:03:29,709 --> 00:03:33,850
or the behavior I don't want that to

00:03:31,630 --> 00:03:35,800
affect anything else right just because

00:03:33,850 --> 00:03:37,630
I set the background color of my button

00:03:35,800 --> 00:03:39,820
to red instead of green doesn't mean

00:03:37,630 --> 00:03:41,470
that the header is now two screens wide

00:03:39,820 --> 00:03:42,160
instead of 1 screen wide right doesn't

00:03:41,470 --> 00:03:43,930
make any sense

00:03:42,160 --> 00:03:45,459
component should be completely small

00:03:43,930 --> 00:03:47,680
focused independent and do their own

00:03:45,459 --> 00:03:51,130
thing and do it really really well right

00:03:47,680 --> 00:03:53,200
and then the last pattern that we've

00:03:51,130 --> 00:03:55,870
sort of discovered is that it's really

00:03:53,200 --> 00:03:58,030
good to split smart and dumb components

00:03:55,870 --> 00:03:59,410
or stateful and stateless components or

00:03:58,030 --> 00:04:02,830
containers and components whatever you

00:03:59,410 --> 00:04:04,900
want to call them right smart components

00:04:02,830 --> 00:04:07,030
are components to care about how things

00:04:04,900 --> 00:04:08,709
work right so you have some smart

00:04:07,030 --> 00:04:10,390
components that sort of handle data

00:04:08,709 --> 00:04:11,920
right they get some data or maybe they

00:04:10,390 --> 00:04:13,090
even fetch some data and then they

00:04:11,920 --> 00:04:15,340
format it and render some other

00:04:13,090 --> 00:04:17,380
components based on that but they don't

00:04:15,340 --> 00:04:19,180
actually have any styling or anything

00:04:17,380 --> 00:04:20,380
they just care about formatting data and

00:04:19,180 --> 00:04:22,930
then rendering some other components

00:04:20,380 --> 00:04:24,370
some components or stateless components

00:04:22,930 --> 00:04:26,320
our components that just care about

00:04:24,370 --> 00:04:27,880
styling right they don't care about any

00:04:26,320 --> 00:04:29,430
dates that you just pass in some text

00:04:27,880 --> 00:04:31,870
and it works perfectly fine

00:04:29,430 --> 00:04:34,510
why is that a nice pattern to work with

00:04:31,870 --> 00:04:35,740
well the thing is now you're back and

00:04:34,510 --> 00:04:39,130
develop I could come to you and can say

00:04:35,740 --> 00:04:41,500
hey so we needed to rework the entire

00:04:39,130 --> 00:04:43,690
API because we realized that we could do

00:04:41,500 --> 00:04:45,640
the caching so much better and you're

00:04:43,690 --> 00:04:47,650
like okay and then you just fetch the

00:04:45,640 --> 00:04:49,720
new data going through your content or

00:04:47,650 --> 00:04:51,310
into your smart component just change

00:04:49,720 --> 00:04:52,480
the formatting slightly but if you still

00:04:51,310 --> 00:04:54,010
render the same components out

00:04:52,480 --> 00:04:55,150
everything's going to work perfectly

00:04:54,010 --> 00:04:57,460
fine and everything's going to look

00:04:55,150 --> 00:04:58,720
perfectly fine as well on the other hand

00:04:57,460 --> 00:05:01,060
if your designer comes to you and says

00:04:58,720 --> 00:05:01,510
hey we just reached in the entire

00:05:01,060 --> 00:05:03,160
interface

00:05:01,510 --> 00:05:04,870
everything looks entirely different now

00:05:03,160 --> 00:05:06,610
it's still the exact same behavior but

00:05:04,870 --> 00:05:08,320
you know we now have red instead of

00:05:06,610 --> 00:05:10,780
green as a background you're like well

00:05:08,320 --> 00:05:12,250
okay I just go into my components edit

00:05:10,780 --> 00:05:13,570
the styling a little bit you don't need

00:05:12,250 --> 00:05:14,980
to worry about any data fetching any

00:05:13,570 --> 00:05:16,480
data management nothing you just go and

00:05:14,980 --> 00:05:18,010
change the styling of your components

00:05:16,480 --> 00:05:19,870
and since you render out the same

00:05:18,010 --> 00:05:21,340
component anyway the behavior is going

00:05:19,870 --> 00:05:23,470
to stay the exact same it's just going

00:05:21,340 --> 00:05:25,300
to look slightly different so it is

00:05:23,470 --> 00:05:27,070
really nice for code reuse in your code

00:05:25,300 --> 00:05:28,630
page right and you can sort of take

00:05:27,070 --> 00:05:30,340
these small components compose them

00:05:28,630 --> 00:05:32,650
together it's really really maintainable

00:05:30,340 --> 00:05:34,270
because you can build these tiny

00:05:32,650 --> 00:05:35,950
components really really well you can

00:05:34,270 --> 00:05:37,690
spend a lot of time making them as good

00:05:35,950 --> 00:05:39,970
as they can be and work in all of these

00:05:37,690 --> 00:05:41,140
contexts that you need and then you just

00:05:39,970 --> 00:05:45,640
put them wherever and they work

00:05:41,140 --> 00:05:48,130
perfectly fine so what about styling

00:05:45,640 --> 00:05:49,600
right as we started building these

00:05:48,130 --> 00:05:52,980
complexes using two phases with

00:05:49,600 --> 00:05:55,900
components we sort of noticed that CSS

00:05:52,980 --> 00:05:59,110
wasn't quite made for components right

00:05:55,900 --> 00:06:00,520
it was made for documents so we've also

00:05:59,110 --> 00:06:03,640
discovered some best practices around

00:06:00,520 --> 00:06:05,680
styling right the first of which is that

00:06:03,640 --> 00:06:08,830
every class you have should only be used

00:06:05,680 --> 00:06:11,680
once elÃ­as might sound a bit weird right

00:06:08,830 --> 00:06:14,260
but if you have a button class that you

00:06:11,680 --> 00:06:16,600
assign on the button component right if

00:06:14,260 --> 00:06:18,700
you change the styles inside that button

00:06:16,600 --> 00:06:19,390
class that should only affect the button

00:06:18,700 --> 00:06:20,680
and nothing else

00:06:19,390 --> 00:06:23,680
right there pies into the other thing

00:06:20,680 --> 00:06:25,960
from it all you want every class to just

00:06:23,680 --> 00:06:29,680
affect that one component and nothing

00:06:25,960 --> 00:06:31,600
else right that allows us to use

00:06:29,680 --> 00:06:34,330
components as a styling construct

00:06:31,600 --> 00:06:36,100
instead of CSS right we can take

00:06:34,330 --> 00:06:39,190
advantage of the full power of

00:06:36,100 --> 00:06:41,380
JavaScript and of react to style our

00:06:39,190 --> 00:06:44,980
user interfaces

00:06:41,380 --> 00:06:47,810
Michael Chan at Chang plastic on Twitter

00:06:44,980 --> 00:06:50,540
wrote a great article about this topic

00:06:47,810 --> 00:06:53,570
called style components and yes is

00:06:50,540 --> 00:06:56,570
caught in their brain says if you're

00:06:53,570 --> 00:06:59,150
writing react you have access to a more

00:06:56,570 --> 00:07:04,340
powerful styling construct than CSS

00:06:59,150 --> 00:07:05,870
class name you have components and I

00:07:04,340 --> 00:07:07,580
think that's very much the crux of

00:07:05,870 --> 00:07:09,710
inline styles that's why we want to put

00:07:07,580 --> 00:07:11,930
our Styles in our JavaScript files right

00:07:09,710 --> 00:07:14,930
that's why we have this power we have

00:07:11,930 --> 00:07:17,570
JavaScript to style our really complex

00:07:14,930 --> 00:07:19,790
user applications but we're stuck with

00:07:17,570 --> 00:07:21,470
trying to somehow integrate logic into a

00:07:19,790 --> 00:07:23,540
language that wasn't made for it right

00:07:21,470 --> 00:07:24,980
it doesn't work very well instead let's

00:07:23,540 --> 00:07:26,960
leverage these components that we have

00:07:24,980 --> 00:07:32,270
composing together to build really big

00:07:26,960 --> 00:07:34,130
complex user interfaces I just talked

00:07:32,270 --> 00:07:35,900
about all these best practices that

00:07:34,130 --> 00:07:38,630
we've sort of discovered as in you know

00:07:35,900 --> 00:07:40,820
as a collective for building component

00:07:38,630 --> 00:07:42,500
based systems now the thing is best

00:07:40,820 --> 00:07:45,290
practices are very good in fine right

00:07:42,500 --> 00:07:46,610
but how do you enforce best practices

00:07:45,290 --> 00:07:48,650
right this practices that aren't

00:07:46,610 --> 00:07:50,630
enforced don't really help you much

00:07:48,650 --> 00:07:52,190
because while you might follow them some

00:07:50,630 --> 00:07:53,750
people in your team might be a bit lazy

00:07:52,190 --> 00:07:55,760
and suddenly you know they build a big

00:07:53,750 --> 00:07:57,680
big smart component that has some

00:07:55,760 --> 00:07:58,850
styling and suddenly you don't really

00:07:57,680 --> 00:08:01,640
know what's going on and you've weird

00:07:58,850 --> 00:08:02,840
bugs in your code now code review sort

00:08:01,640 --> 00:08:04,580
of help with that right you can do

00:08:02,840 --> 00:08:06,590
really extensive code reviews really

00:08:04,580 --> 00:08:10,010
make sure your code base states you know

00:08:06,590 --> 00:08:12,560
clean and sane but the problem is humans

00:08:10,010 --> 00:08:13,010
make errors right I make errors all the

00:08:12,560 --> 00:08:15,620
time

00:08:13,010 --> 00:08:18,380
it just happens right every bug you've

00:08:15,620 --> 00:08:20,420
ever had the chances that that was there

00:08:18,380 --> 00:08:22,610
because the human made it pretty high

00:08:20,420 --> 00:08:26,360
right that's just a thing that happens

00:08:22,610 --> 00:08:28,610
so instead of relying on humans to do

00:08:26,360 --> 00:08:30,080
all of these this stuff for us right

00:08:28,610 --> 00:08:32,090
instead of relying on humans to follow

00:08:30,080 --> 00:08:35,810
all of these best practices why don't we

00:08:32,090 --> 00:08:37,340
enforce them what do I mean by that how

00:08:35,810 --> 00:08:40,730
can you enforce these best practices

00:08:37,340 --> 00:08:43,160
well as it turns out Asylum library's a

00:08:40,730 --> 00:08:44,660
great way to do that and ID sign might

00:08:43,160 --> 00:08:47,030
sound a bit bonkers but that's kind of

00:08:44,660 --> 00:08:48,140
the basic idea of why we made style

00:08:47,030 --> 00:08:50,450
components

00:08:48,140 --> 00:08:54,050
it's a-you know sighing library we

00:08:50,450 --> 00:08:57,170
released recently um we being lent madam

00:08:54,050 --> 00:08:58,970
and I and again is foremost alia and I

00:08:57,170 --> 00:09:01,220
met him when I was down there on a

00:08:58,970 --> 00:09:03,200
holiday and I've been thinking about the

00:09:01,220 --> 00:09:05,240
CSS thing the styling thing for a long

00:09:03,200 --> 00:09:06,410
long time right because Nick Groff who

00:09:05,240 --> 00:09:08,450
is also in the audience somewhere is a

00:09:06,410 --> 00:09:10,940
good friend of mine who also lives in

00:09:08,450 --> 00:09:12,589
Vienna he may tell a very famous that

00:09:10,940 --> 00:09:14,420
parts of component library anak

00:09:12,589 --> 00:09:15,800
elementary you I I spilled tons of react

00:09:14,420 --> 00:09:17,570
apps that all needed some sort of

00:09:15,800 --> 00:09:19,339
styling and there was no solution that

00:09:17,570 --> 00:09:21,950
sort of satisfied all the needs right

00:09:19,339 --> 00:09:23,690
because while we had some good solutions

00:09:21,950 --> 00:09:25,640
for apps right we had some good

00:09:23,690 --> 00:09:27,350
solutions for building applications in

00:09:25,640 --> 00:09:29,420
react we didn't really have any good

00:09:27,350 --> 00:09:31,820
solution for building fema ball third

00:09:29,420 --> 00:09:33,350
party component libraries right we it

00:09:31,820 --> 00:09:35,089
was really hard we tried to mangle

00:09:33,350 --> 00:09:36,500
things together every component level

00:09:35,089 --> 00:09:38,810
was Lux like different everything had

00:09:36,500 --> 00:09:40,940
there everybody had their own ideas we

00:09:38,810 --> 00:09:42,079
tried tons of stuff for elementary I

00:09:40,940 --> 00:09:43,790
write we tried all the different

00:09:42,079 --> 00:09:45,950
libraries you can think of everything

00:09:43,790 --> 00:09:50,540
was sort of a bit painful and we wanted

00:09:45,950 --> 00:09:53,449
to change that so what we did is we

00:09:50,540 --> 00:09:58,040
remove the mapping between styles and

00:09:53,449 --> 00:09:59,570
components what does that mean remove

00:09:58,040 --> 00:10:01,490
the mapping between stars and components

00:09:59,570 --> 00:10:03,560
well if you think about any styling

00:10:01,490 --> 00:10:05,839
method you've ever used write in CSS for

00:10:03,560 --> 00:10:08,180
example you have class names so you have

00:10:05,839 --> 00:10:10,579
a styling fragment some code to style

00:10:08,180 --> 00:10:12,199
something then if a class name and you

00:10:10,579 --> 00:10:13,490
take that class name and assign it to a

00:10:12,199 --> 00:10:16,820
Dom node right you say something like

00:10:13,490 --> 00:10:19,100
div lastname equals class name that's

00:10:16,820 --> 00:10:20,480
mapping if you use inline styles you

00:10:19,100 --> 00:10:22,610
have some sort of variable right you say

00:10:20,480 --> 00:10:24,800
div class name equals style is thought

00:10:22,610 --> 00:10:26,570
whatever right there's always this

00:10:24,800 --> 00:10:29,600
mapping going on between styles and

00:10:26,570 --> 00:10:31,610
components well we just remove that

00:10:29,600 --> 00:10:33,320
mapping but because we want to have

00:10:31,610 --> 00:10:35,990
single-use classes anyway and we want to

00:10:33,320 --> 00:10:37,430
have small focus components so why do we

00:10:35,990 --> 00:10:40,000
have that mapping we don't want to reuse

00:10:37,430 --> 00:10:43,850
the Stars anyway so let's get rid of it

00:10:40,000 --> 00:10:49,579
what does that look like well it looks

00:10:43,850 --> 00:10:50,209
like this now before you call me crazy

00:10:49,579 --> 00:10:52,160
all right

00:10:50,209 --> 00:10:53,930
let's talk about this the first thing we

00:10:52,160 --> 00:10:55,940
do here is we import style from styled

00:10:53,930 --> 00:10:59,209
components nothing fancy going on and

00:10:55,940 --> 00:11:00,780
then we say this constable notice the

00:10:59,209 --> 00:11:05,850
upper case T up there

00:11:00,780 --> 00:11:07,860
equals style h1 style thought h1 we call

00:11:05,850 --> 00:11:09,780
that function and when we call it with

00:11:07,860 --> 00:11:12,090
our Styles what happens is that it

00:11:09,780 --> 00:11:15,150
returns a react component that renders

00:11:12,090 --> 00:11:16,950
an h1 tag into the HTML so this type of

00:11:15,150 --> 00:11:18,900
variable up there is now a react

00:11:16,950 --> 00:11:20,400
component that you can use in your jsx

00:11:18,900 --> 00:11:23,220
just like any other react component

00:11:20,400 --> 00:11:25,920
right so after this style college one

00:11:23,220 --> 00:11:28,710
function call we do this weird backtick

00:11:25,920 --> 00:11:31,470
thing right and pass in some styles that

00:11:28,710 --> 00:11:33,270
is weird acting thing is an es6 feature

00:11:31,470 --> 00:11:35,070
right that was recently added to

00:11:33,270 --> 00:11:38,190
language by the new ECMO script standard

00:11:35,070 --> 00:11:39,480
it's called a tag template literal I'm

00:11:38,190 --> 00:11:40,620
sure you've heard of tablet literals

00:11:39,480 --> 00:11:42,720
right just calling strings with

00:11:40,620 --> 00:11:44,460
backticks but now you can also call call

00:11:42,720 --> 00:11:45,120
functions with backticks which looks

00:11:44,460 --> 00:11:47,130
like that

00:11:45,120 --> 00:11:48,300
now this isn't some sort of custom

00:11:47,130 --> 00:11:49,680
feature we've added with some great

00:11:48,300 --> 00:11:51,540
that'll transform it's just JavaScript

00:11:49,680 --> 00:11:53,310
right I didn't know that future when

00:11:51,540 --> 00:11:56,390
clang showed me his first idea I was

00:11:53,310 --> 00:11:59,040
like what is that that looks so weird

00:11:56,390 --> 00:12:02,130
but actually it's really really nice to

00:11:59,040 --> 00:12:03,390
work with and it enables us to have some

00:12:02,130 --> 00:12:05,550
great features which I'll get to very

00:12:03,390 --> 00:12:07,110
soon now the other part is we just have

00:12:05,550 --> 00:12:09,480
a wrapper component which renders an

00:12:07,110 --> 00:12:10,920
HTML section we also passed some styles

00:12:09,480 --> 00:12:12,780
in there right and those styles will be

00:12:10,920 --> 00:12:14,910
applied to the react component now we

00:12:12,780 --> 00:12:16,589
take that type length of wrapper and we

00:12:14,910 --> 00:12:19,260
render them in our j6 like any other

00:12:16,589 --> 00:12:21,240
react component here we wrap our title

00:12:19,260 --> 00:12:23,610
in our wrapper and say hello world this

00:12:21,240 --> 00:12:24,570
is my first style component well if you

00:12:23,610 --> 00:12:26,700
look at this in a browser

00:12:24,570 --> 00:12:28,560
it's a wrapper with a background color

00:12:26,700 --> 00:12:30,630
and a title which is centered on the

00:12:28,560 --> 00:12:32,400
page and as a red color right the stars

00:12:30,630 --> 00:12:35,970
are just applied and we've used it like

00:12:32,400 --> 00:12:37,200
any other react component not something

00:12:35,970 --> 00:12:39,570
you want you might have noticed that

00:12:37,200 --> 00:12:41,940
slightly different to any other CSS in

00:12:39,570 --> 00:12:46,860
J's library is that you write actual CSS

00:12:41,940 --> 00:12:49,170
when you make styled components why was

00:12:46,860 --> 00:12:52,320
why is that important well as it turns

00:12:49,170 --> 00:12:55,130
out CSS it's very powerful for styling

00:12:52,320 --> 00:12:57,960
things right it was made for styling

00:12:55,130 --> 00:13:00,150
some people seem to kind of have missed

00:12:57,960 --> 00:13:03,089
the point of that because they try to

00:13:00,150 --> 00:13:05,339
mangle CSS syntax into JavaScript

00:13:03,089 --> 00:13:06,930
objects and if this doesn't work right

00:13:05,339 --> 00:13:08,730
you have to remember to quote everything

00:13:06,930 --> 00:13:10,709
if you remember to do double quotes in

00:13:08,730 --> 00:13:12,209
content the media queries are really

00:13:10,709 --> 00:13:14,610
hard like everything is just the pain

00:13:12,209 --> 00:13:17,579
with a language made for style

00:13:14,610 --> 00:13:19,889
let's use it so start component since

00:13:17,579 --> 00:13:23,459
it's just CSS right we can do for

00:13:19,889 --> 00:13:25,019
everything with those components so in

00:13:23,459 --> 00:13:27,089
this case I'm creating a color changer

00:13:25,019 --> 00:13:30,059
component which has a background color

00:13:27,089 --> 00:13:31,980
of the pilot normally and it every h2 in

00:13:30,059 --> 00:13:34,079
that component will have a color of pale

00:13:31,980 --> 00:13:36,059
violet red right just CSS with some

00:13:34,079 --> 00:13:37,860
nesting and then we have a media query

00:13:36,059 --> 00:13:39,929
well guess what since it's just CSS

00:13:37,860 --> 00:13:41,459
media queries are a thing right we don't

00:13:39,929 --> 00:13:43,350
need to use any JavaScript to change the

00:13:41,459 --> 00:13:45,720
styles of our components we can just use

00:13:43,350 --> 00:13:49,110
media queries well and if we're over a

00:13:45,720 --> 00:13:51,299
width of 875 pixels the background of

00:13:49,110 --> 00:13:53,429
our box will turn to medium see green

00:13:51,299 --> 00:13:55,350
and the color of the h2 to papaya with

00:13:53,429 --> 00:13:58,049
instead well as that looked like in a

00:13:55,350 --> 00:14:00,660
browser well you know it's a book and

00:13:58,049 --> 00:14:04,049
when you start resizing it what happens

00:14:00,660 --> 00:14:07,589
is it turns see green and then when you

00:14:04,049 --> 00:14:10,649
resize it factors what it turns the pile

00:14:07,589 --> 00:14:13,129
whip again right it's just media queries

00:14:10,649 --> 00:14:16,199
it's nothing fancy it's just see it says

00:14:13,129 --> 00:14:18,329
now in react we have this thing called

00:14:16,199 --> 00:14:21,239
props right and sometimes you want to

00:14:18,329 --> 00:14:22,410
adapt components based on props the for

00:14:21,239 --> 00:14:24,899
example imagine you have a button

00:14:22,410 --> 00:14:26,489
component right and you want to have a

00:14:24,899 --> 00:14:28,290
primary button component right you want

00:14:26,489 --> 00:14:29,939
to be able to save button primary that

00:14:28,290 --> 00:14:32,040
should look more important right it

00:14:29,939 --> 00:14:34,619
should look bigger or more important or

00:14:32,040 --> 00:14:36,660
full of color right how do you do this

00:14:34,619 --> 00:14:38,399
with a styled component how do you how

00:14:36,660 --> 00:14:40,799
what and where do properties even go

00:14:38,399 --> 00:14:42,839
well what you can do here is you can

00:14:40,799 --> 00:14:45,569
pass as a function as an interpolation

00:14:42,839 --> 00:14:46,769
and into that function we will pass in

00:14:45,569 --> 00:14:49,079
the properties that are passed to the

00:14:46,769 --> 00:14:50,429
components meaning you can react to the

00:14:49,079 --> 00:14:52,739
properties that are passed into the

00:14:50,429 --> 00:14:55,169
component and change the styling based

00:14:52,739 --> 00:14:56,579
on them so in this example here what

00:14:55,169 --> 00:14:58,799
happens is that we have a background and

00:14:56,579 --> 00:15:00,449
if props the primary is set to true the

00:14:58,799 --> 00:15:03,629
background will repeal violet red if

00:15:00,449 --> 00:15:05,100
props or primary said to white so if

00:15:03,629 --> 00:15:06,809
props or primary certified props the

00:15:05,100 --> 00:15:08,669
primary set to false the background will

00:15:06,809 --> 00:15:10,199
be white and the color is the exact

00:15:08,669 --> 00:15:12,360
other way around if props are primary

00:15:10,199 --> 00:15:14,369
set it's white if it's not set if

00:15:12,360 --> 00:15:15,899
they're violet red now again we use this

00:15:14,369 --> 00:15:17,910
like any other react component right we

00:15:15,899 --> 00:15:19,889
say button Hudson takes or we seize we

00:15:17,910 --> 00:15:21,600
say button primary and pass in some text

00:15:19,889 --> 00:15:23,669
and what does that look like in a

00:15:21,600 --> 00:15:25,529
browser well it just looks like two

00:15:23,669 --> 00:15:29,420
buttons one of them is no more than one

00:15:25,529 --> 00:15:33,870
of them is primary right nothing fancy

00:15:29,420 --> 00:15:36,660
now because we realized that we kind of

00:15:33,870 --> 00:15:38,250
both needed styling third party

00:15:36,660 --> 00:15:39,570
component libraries right we've been

00:15:38,250 --> 00:15:41,250
building them for a long time they're

00:15:39,570 --> 00:15:43,530
very useful but it's sort of hard to

00:15:41,250 --> 00:15:46,410
style them so style components are

00:15:43,530 --> 00:15:48,270
steaming built into a system right you

00:15:46,410 --> 00:15:49,470
no longer have to use some weird other

00:15:48,270 --> 00:15:51,060
way of styling your third-party

00:15:49,470 --> 00:15:52,950
components you just sell them like any

00:15:51,060 --> 00:15:54,990
other component right in your attire at

00:15:52,950 --> 00:15:57,240
all it's just the same what does that

00:15:54,990 --> 00:15:58,740
look like well we export this team

00:15:57,240 --> 00:16:01,170
provide a component that you can import

00:15:58,740 --> 00:16:02,430
in your code and you can set them some

00:16:01,170 --> 00:16:03,120
theme and you can do whatever you want

00:16:02,430 --> 00:16:04,890
in there right

00:16:03,120 --> 00:16:07,110
in this case we just set the primary

00:16:04,890 --> 00:16:08,670
color to pale violet red and then we

00:16:07,110 --> 00:16:10,440
just wrap some part of our app in the

00:16:08,670 --> 00:16:12,780
theme provider passing in the theme and

00:16:10,440 --> 00:16:15,900
now our components can react to that

00:16:12,780 --> 00:16:18,360
theme how we check the seam from the

00:16:15,900 --> 00:16:20,190
crops so if you pass the function you

00:16:18,360 --> 00:16:22,320
can go prop so theme and you have access

00:16:20,190 --> 00:16:24,270
to the entire theme so the button can

00:16:22,320 --> 00:16:26,100
now react to the theme and change its

00:16:24,270 --> 00:16:28,680
colors its styling based on what the

00:16:26,100 --> 00:16:30,090
theme is somewhere high up in a code but

00:16:28,680 --> 00:16:32,490
you don't have to pass in any properties

00:16:30,090 --> 00:16:33,990
or anything it just reacts it right you

00:16:32,490 --> 00:16:35,520
can have two different things if we have

00:16:33,990 --> 00:16:36,990
a red theme and a blue theme because we

00:16:35,520 --> 00:16:38,550
have different sections of our site all

00:16:36,990 --> 00:16:40,680
we have to do is we have to wrap them in

00:16:38,550 --> 00:16:42,930
a theme provider and buttons inside the

00:16:40,680 --> 00:16:44,730
red theme theme provider will be red and

00:16:42,930 --> 00:16:46,620
buttons inside the blue theme theme

00:16:44,730 --> 00:16:49,800
provider will be blue but who would have

00:16:46,620 --> 00:16:51,300
guessed this works as many levels down

00:16:49,800 --> 00:16:53,490
as you want these are really simple

00:16:51,300 --> 00:16:54,870
examples right plate works really really

00:16:53,490 --> 00:16:56,580
deep treats down but it doesn't matter

00:16:54,870 --> 00:16:58,260
how many react components are in between

00:16:56,580 --> 00:17:02,270
your theme provider and your component

00:16:58,260 --> 00:17:02,270
the component will always get the theme

00:17:02,420 --> 00:17:06,450
so now you can build your component

00:17:05,100 --> 00:17:08,160
libraries we start components and you

00:17:06,450 --> 00:17:09,360
can build your apps with star components

00:17:08,160 --> 00:17:13,320
right you can build your web apps with

00:17:09,360 --> 00:17:15,240
star components but you might also want

00:17:13,320 --> 00:17:18,090
to build an app an actual react native

00:17:15,240 --> 00:17:20,790
app for your you know for your products

00:17:18,090 --> 00:17:23,370
so style components is full react native

00:17:20,790 --> 00:17:25,170
support as well the only difference is

00:17:23,370 --> 00:17:28,170
that you import style from style

00:17:25,170 --> 00:17:29,850
- component slash native right and then

00:17:28,170 --> 00:17:32,010
you get access to the react native

00:17:29,850 --> 00:17:33,870
primitives - you can't say style diff

00:17:32,010 --> 00:17:35,820
but you just save style dot view which

00:17:33,870 --> 00:17:37,920
is the react native equivalent of the

00:17:35,820 --> 00:17:39,690
diff kind of right and just passing some

00:17:37,920 --> 00:17:41,550
cells so in this case we say the

00:17:39,690 --> 00:17:42,419
background should be papaya whip and it

00:17:41,550 --> 00:17:45,539
to the line and just

00:17:42,419 --> 00:17:47,609
by all it items in the center and then

00:17:45,539 --> 00:17:50,129
below that we have river title which is

00:17:47,609 --> 00:17:51,840
just style text right another react

00:17:50,129 --> 00:17:52,289
native primitive for text who would have

00:17:51,840 --> 00:17:53,639
guessed

00:17:52,289 --> 00:17:55,529
are you passing some stars you know

00:17:53,639 --> 00:17:57,869
making a pig setting the colors will

00:17:55,529 --> 00:17:59,249
violet red and making it bold and then

00:17:57,869 --> 00:18:01,379
you just render them like any other

00:17:59,249 --> 00:18:01,679
react component right we've seen it

00:18:01,379 --> 00:18:04,590
already

00:18:01,679 --> 00:18:07,139
it's just react and then well guess what

00:18:04,590 --> 00:18:08,700
it just look it just works this is what

00:18:07,139 --> 00:18:10,739
it looks like there's an actual

00:18:08,700 --> 00:18:12,720
screenshot from my phone when when we

00:18:10,739 --> 00:18:14,820
first built this and I tried it I was

00:18:12,720 --> 00:18:19,710
like holy cow this actually works I was

00:18:14,820 --> 00:18:22,009
pretty surprised um now what we do here

00:18:19,710 --> 00:18:25,369
with styled components is we kind of put

00:18:22,009 --> 00:18:27,899
CSS in strings in JavaScript right

00:18:25,369 --> 00:18:30,210
there's two big things you lose when you

00:18:27,899 --> 00:18:32,369
do that one of them is syntax

00:18:30,210 --> 00:18:34,739
highlighting right if it's a string in

00:18:32,369 --> 00:18:36,480
JavaScript how do you how do you add to

00:18:34,739 --> 00:18:38,759
know that its syntax highlighting well

00:18:36,480 --> 00:18:41,309
because I built it it's actually built

00:18:38,759 --> 00:18:42,659
into Adam if you use language Babel to

00:18:41,309 --> 00:18:45,179
style components will be correctly

00:18:42,659 --> 00:18:47,009
syntax highlighted already we've we've

00:18:45,179 --> 00:18:48,299
added support for sublime text the PR

00:18:47,009 --> 00:18:50,369
way we've merged sometime within the

00:18:48,299 --> 00:18:51,720
next two days and released and we're

00:18:50,369 --> 00:18:54,179
going to add support for webstorm and

00:18:51,720 --> 00:18:56,340
all the other IDs next the syntax

00:18:54,179 --> 00:18:59,429
highlighting is taken care of but what

00:18:56,340 --> 00:19:01,859
about linting well I just spent the past

00:18:59,429 --> 00:19:04,590
two weeks working on a child components

00:19:01,859 --> 00:19:07,919
integration for styling so as of today

00:19:04,590 --> 00:19:09,989
you can actually run styling on styled

00:19:07,919 --> 00:19:11,820
components CSS so what we see here is

00:19:09,989 --> 00:19:13,470
some really poor CSS totally wrong

00:19:11,820 --> 00:19:16,080
indentation spaces where they shouldn't

00:19:13,470 --> 00:19:18,239
be and you just run styling on your J's

00:19:16,080 --> 00:19:20,970
files and styling correctly since the

00:19:18,239 --> 00:19:22,409
CSS says hey you messed up you can fix

00:19:20,970 --> 00:19:24,480
your CSS you can go in and fix

00:19:22,409 --> 00:19:27,149
annotation fix all the empty spaces you

00:19:24,480 --> 00:19:28,649
know just make your CSS look good run

00:19:27,149 --> 00:19:31,379
styling again it's not going to complain

00:19:28,649 --> 00:19:33,149
anymore right but suddenly you have

00:19:31,379 --> 00:19:35,009
linting and you have syntax highlighting

00:19:33,149 --> 00:19:37,379
and what else you need from CSS not much

00:19:35,009 --> 00:19:39,720
right because you have JavaScript now if

00:19:37,379 --> 00:19:41,700
you say well you know what about mixing

00:19:39,720 --> 00:19:43,169
well you have JavaScript just make a

00:19:41,700 --> 00:19:46,730
mixin you know just make it a variable

00:19:43,169 --> 00:19:46,730
everything else just works

00:19:47,830 --> 00:19:51,760
now that's all very nice to know right

00:19:50,110 --> 00:19:53,860
but can you actually use this right now

00:19:51,760 --> 00:19:55,600
well as you might have guessed you just

00:19:53,860 --> 00:19:58,180
run npm install start components and use

00:19:55,600 --> 00:19:59,230
this right now or actually wait that's

00:19:58,180 --> 00:20:01,180
the only thing anymore right

00:19:59,230 --> 00:20:03,040
it's yarn add style components I'm sorry

00:20:01,180 --> 00:20:06,190
yarn add start component and you can use

00:20:03,040 --> 00:20:08,170
this right now we're also in github so

00:20:06,190 --> 00:20:09,550
if you go to github.com slash style -

00:20:08,170 --> 00:20:11,230
components that start like the -

00:20:09,550 --> 00:20:13,330
components you will see the full source

00:20:11,230 --> 00:20:15,280
you'll see everything give us a star try

00:20:13,330 --> 00:20:16,360
it out submit issue submit pull requests

00:20:15,280 --> 00:20:18,640
let us know what you like and what you

00:20:16,360 --> 00:20:20,440
dislike reactants groans thank you very

00:20:18,640 --> 00:20:22,860
much enjoy the remaining day of the

00:20:20,440 --> 00:20:22,860
conference

00:20:27,110 --> 00:20:33,539
great thank you very much let's look at

00:20:29,429 --> 00:20:35,179
the the questions slide out if

00:20:33,539 --> 00:20:37,320
somebody's asked if there's stickers

00:20:35,179 --> 00:20:40,440
right I'm gonna punch you in the face

00:20:37,320 --> 00:20:43,679
I have stickers all I'll actually see

00:20:40,440 --> 00:20:46,169
it's not even stickers is it possible to

00:20:43,679 --> 00:20:49,380
avoid 2d piratey of components in big

00:20:46,169 --> 00:20:51,090
applications in this case it's very hard

00:20:49,380 --> 00:20:54,690
to follow the data flow through

00:20:51,090 --> 00:20:56,159
components so the thing is right you

00:20:54,690 --> 00:20:57,330
might think well we start components

00:20:56,159 --> 00:20:58,950
this will have all of these tiny

00:20:57,330 --> 00:21:01,890
components that just do one thing right

00:20:58,950 --> 00:21:03,450
that's a lot of components but in

00:21:01,890 --> 00:21:04,890
reality it's not different from what

00:21:03,450 --> 00:21:07,650
you're doing already except if just

00:21:04,890 --> 00:21:10,230
writing diff cars name equals spike what

00:21:07,650 --> 00:21:11,909
a header you just write hello and it's

00:21:10,230 --> 00:21:14,190
the exact same thing right there's no

00:21:11,909 --> 00:21:16,380
there's no data flow that needs to be

00:21:14,190 --> 00:21:17,760
sort of seen through style components is

00:21:16,380 --> 00:21:19,440
all just the same as it was before

00:21:17,760 --> 00:21:21,720
right because you take those small

00:21:19,440 --> 00:21:24,179
components and you compose them to get

00:21:21,720 --> 00:21:25,830
into bigger ones right and it's just if

00:21:24,179 --> 00:21:26,909
you use Redux for example it's really

00:21:25,830 --> 00:21:28,230
easy to follow right there's no

00:21:26,909 --> 00:21:32,970
difference to any other method of

00:21:28,230 --> 00:21:36,470
styling what are the best practices for

00:21:32,970 --> 00:21:41,250
passing global styles to components

00:21:36,470 --> 00:21:43,020
that's an interesting question um when I

00:21:41,250 --> 00:21:44,640
talk to people about CSS engineers and

00:21:43,020 --> 00:21:46,020
this isn't necessarily related to start

00:21:44,640 --> 00:21:48,240
components right when I talk to people

00:21:46,020 --> 00:21:50,190
about CSS and J's the question I get

00:21:48,240 --> 00:21:51,289
asked most documents but what about

00:21:50,190 --> 00:21:53,190
global styles

00:21:51,289 --> 00:21:54,750
take a moment and think about what

00:21:53,190 --> 00:21:57,179
global styles you have in your

00:21:54,750 --> 00:21:58,650
application the best use case is

00:21:57,179 --> 00:22:00,419
probably something like a reset right

00:21:58,650 --> 00:22:02,850
you probably use something like reset

00:22:00,419 --> 00:22:04,799
the CSS or normalize the CSS so sanitize

00:22:02,850 --> 00:22:06,630
some sort of CSS reset to normalize

00:22:04,799 --> 00:22:08,760
across browsers filing right you can

00:22:06,630 --> 00:22:11,490
still have them I mean start components

00:22:08,760 --> 00:22:13,409
not like no you can't use resets no II

00:22:11,490 --> 00:22:16,380
just use a reset right just drop it into

00:22:13,409 --> 00:22:17,940
it you know now the other color Styles

00:22:16,380 --> 00:22:20,610
you may say you have is something like

00:22:17,940 --> 00:22:22,350
lower typography right I've heard from a

00:22:20,610 --> 00:22:23,520
lot of people that they say well okay

00:22:22,350 --> 00:22:24,840
that's nice and all you know inline

00:22:23,520 --> 00:22:28,110
Styles it sounds like a great idea but

00:22:24,840 --> 00:22:31,080
one of our global typography instead of

00:22:28,110 --> 00:22:34,110
having global typography have components

00:22:31,080 --> 00:22:36,240
right that's the whole point you don't

00:22:34,110 --> 00:22:37,860
want to have any double stars right just

00:22:36,240 --> 00:22:38,870
half components use components your

00:22:37,860 --> 00:22:40,340
advantage bill

00:22:38,870 --> 00:22:42,020
heading component build a paragraph

00:22:40,340 --> 00:22:44,000
component build those components and

00:22:42,020 --> 00:22:45,590
compose them together so no matter where

00:22:44,000 --> 00:22:48,920
in the app you look everything looks the

00:22:45,590 --> 00:22:50,300
same right that being said I realize

00:22:48,920 --> 00:22:52,190
that some people do need global stars

00:22:50,300 --> 00:22:53,720
sometimes so start components as an

00:22:52,190 --> 00:22:56,690
injectable helper that you can just

00:22:53,720 --> 00:23:00,080
import and injectable CSS in Tom works

00:22:56,690 --> 00:23:02,570
perfectly fine how do you handle zero

00:23:00,080 --> 00:23:05,330
elements in inline styles so that's a

00:23:02,570 --> 00:23:08,330
question that's very good style

00:23:05,330 --> 00:23:11,150
components is not inline stars right we

00:23:08,330 --> 00:23:13,010
inject actual CSS into the Dom so all

00:23:11,150 --> 00:23:14,900
your ups you do selectors all your suit

00:23:13,010 --> 00:23:15,500
elements they work because it's just CSS

00:23:14,900 --> 00:23:17,150
right

00:23:15,500 --> 00:23:19,220
you can just say and hover or aunt

00:23:17,150 --> 00:23:21,620
checked or aunt anything right it's not

00:23:19,220 --> 00:23:23,000
inline Styles it's actual CSS right

00:23:21,620 --> 00:23:24,770
that's why you can write media queries

00:23:23,000 --> 00:23:27,170
and nesting and everything it's csa it's

00:23:24,770 --> 00:23:29,960
not some weird thing that pretends to be

00:23:27,170 --> 00:23:33,500
CSS it's just CSS right that's it that's

00:23:29,960 --> 00:23:35,030
the whole point our vendor prefix is

00:23:33,500 --> 00:23:36,740
handled we ought to prefix all of your

00:23:35,030 --> 00:23:38,929
stuff um you don't need to worry about

00:23:36,740 --> 00:23:41,330
it I guess that's a good answer

00:23:38,929 --> 00:23:42,710
if you want to know how it works out of

00:23:41,330 --> 00:23:45,440
the hood just go to the repo and take a

00:23:42,710 --> 00:23:48,080
look at it what about performance and

00:23:45,440 --> 00:23:52,940
Dom sighs how does it compare to actual

00:23:48,080 --> 00:23:54,290
CSS I look like at the second part of

00:23:52,940 --> 00:23:57,470
the question but I on to the first one

00:23:54,290 --> 00:23:59,570
so the thing about stock components is

00:23:57,470 --> 00:24:01,040
that for every component you create for

00:23:59,570 --> 00:24:02,540
every small component you create you

00:24:01,040 --> 00:24:04,010
kind of wrap another component around it

00:24:02,540 --> 00:24:07,370
right it's like a higher-order component

00:24:04,010 --> 00:24:08,690
and at first I thought you know I'm not

00:24:07,370 --> 00:24:09,950
sure this is a good approach right I

00:24:08,690 --> 00:24:12,200
didn't actually kind of want to have

00:24:09,950 --> 00:24:14,179
wrapper components in my styling library

00:24:12,200 --> 00:24:16,070
I just I just wanted to have components

00:24:14,179 --> 00:24:18,559
but as it turns out it doesn't make any

00:24:16,070 --> 00:24:20,929
difference anyway right I weave I have

00:24:18,559 --> 00:24:23,780
two replications in production now and

00:24:20,929 --> 00:24:26,090
Jen is build I think one or two I know

00:24:23,780 --> 00:24:27,380
and about a dozen people so I've come up

00:24:26,090 --> 00:24:29,150
to me in the last week and said hey max

00:24:27,380 --> 00:24:30,950
great work on style components we've

00:24:29,150 --> 00:24:32,780
switched everything over to it I'm like

00:24:30,950 --> 00:24:34,070
okay but nobody's running to any

00:24:32,780 --> 00:24:36,170
performance issues and in fact we have a

00:24:34,070 --> 00:24:39,260
PR open that will make performance

00:24:36,170 --> 00:24:41,000
better like 10x which is you know it's

00:24:39,260 --> 00:24:42,620
10x isn't very much because we're

00:24:41,000 --> 00:24:44,600
already really fast and then being ten

00:24:42,620 --> 00:24:46,070
times faster isn't very useful but it's

00:24:44,600 --> 00:24:47,810
going to be released probably today when

00:24:46,070 --> 00:24:50,690
I merge the PR so it's going to be even

00:24:47,810 --> 00:24:52,620
faster how is it compared to actual CSS

00:24:50,690 --> 00:24:54,150
it is actual CSS so

00:24:52,620 --> 00:24:57,080
doesn't compare it's the same thing

00:24:54,150 --> 00:24:59,280
except pull located and isolated

00:24:57,080 --> 00:25:02,130
intellij highlighting here we're gonna

00:24:59,280 --> 00:25:04,530
add that eventually I don't know how

00:25:02,130 --> 00:25:05,760
IntelliJ syntax highlighting works if

00:25:04,530 --> 00:25:07,290
somebody here is done this before please

00:25:05,760 --> 00:25:10,620
come to me and talk to me because it's

00:25:07,290 --> 00:25:12,059
really hot it's actually like adding

00:25:10,620 --> 00:25:13,770
syntax highlighting was probably one of

00:25:12,059 --> 00:25:15,390
the hardest parts of building star

00:25:13,770 --> 00:25:17,670
components because it's a pain in the

00:25:15,390 --> 00:25:20,490
ass sorry it's a pain right it's really

00:25:17,670 --> 00:25:21,720
really really tedious to do I didn't do

00:25:20,490 --> 00:25:23,940
it because I couldn't get it done right

00:25:21,720 --> 00:25:25,950
I would have taken me two weeks to do it

00:25:23,940 --> 00:25:27,960
for accent but thankfully the add some

00:25:25,950 --> 00:25:29,040
language bubble maintained I was like

00:25:27,960 --> 00:25:30,870
yeah sure that sounds like a good idea

00:25:29,040 --> 00:25:33,300
I'll just add it and not somebody else

00:25:30,870 --> 00:25:35,550
is a bit of a PR for supplying and now

00:25:33,300 --> 00:25:37,800
we have that TM language code if we can

00:25:35,550 --> 00:25:39,660
just use that in IntelliJ that's perfect

00:25:37,800 --> 00:25:40,980
right we can use it in webstorm we just

00:25:39,660 --> 00:25:42,870
need to figure out how to actually do it

00:25:40,980 --> 00:25:46,080
which I'm going to do next week so yeah

00:25:42,870 --> 00:25:48,600
working on that are you writing tests

00:25:46,080 --> 00:25:52,770
for your CSS now that's a very good

00:25:48,600 --> 00:25:55,500
question actually um I am NOT in the

00:25:52,770 --> 00:25:57,540
sense that I test what can polish look

00:25:55,500 --> 00:26:00,870
like in unit tests what I do do is

00:25:57,540 --> 00:26:02,730
visual regression tests right um and I

00:26:00,870 --> 00:26:04,980
don't think CSS is necessarily something

00:26:02,730 --> 00:26:06,750
you can do it test it's something we

00:26:04,980 --> 00:26:07,980
want to try to make work we're not sure

00:26:06,750 --> 00:26:09,059
if we're going to get it done right

00:26:07,980 --> 00:26:10,740
we're not sure if that's the thing you

00:26:09,059 --> 00:26:12,990
can actually do but we want to try doing

00:26:10,740 --> 00:26:14,670
it and but other than that just use

00:26:12,990 --> 00:26:16,440
visual regression tests then it's just

00:26:14,670 --> 00:26:17,330
the same as any other CSS right it's not

00:26:16,440 --> 00:26:19,380
different

00:26:17,330 --> 00:26:21,360
that's it work the server-side rendering

00:26:19,380 --> 00:26:23,880
yes it works with server-side rendering

00:26:21,360 --> 00:26:25,980
the one tiny favorite at the moment is

00:26:23,880 --> 00:26:27,809
that you with there's no way to extract

00:26:25,980 --> 00:26:29,610
the style so you cannot kind of extract

00:26:27,809 --> 00:26:32,070
a separate style sheet which is on

00:26:29,610 --> 00:26:34,500
probably this week or next week I will

00:26:32,070 --> 00:26:36,179
start building and a probably barber

00:26:34,500 --> 00:26:37,470
transform that takes a look a CSS and

00:26:36,179 --> 00:26:39,059
puts it into separate stylesheet

00:26:37,470 --> 00:26:42,650
so this works right now but it's going

00:26:39,059 --> 00:26:42,650
to get much better very very very soon

00:26:42,980 --> 00:26:47,760
are you sure this new syntax has real

00:26:45,870 --> 00:26:51,179
advantages against use your components

00:26:47,760 --> 00:26:53,429
with style prop inside thing about the

00:26:51,179 --> 00:26:56,520
Sal prop right if you use the style prop

00:26:53,429 --> 00:26:58,020
its inline Styles right that means you

00:26:56,520 --> 00:26:59,340
don't have any hover you don't have any

00:26:58,020 --> 00:27:00,720
checked selectors you don't have any

00:26:59,340 --> 00:27:02,670
media queries you don't very next thing

00:27:00,720 --> 00:27:04,410
you have nothing right all you have is

00:27:02,670 --> 00:27:06,029
simple properties you can't actually

00:27:04,410 --> 00:27:07,679
start your application like like well

00:27:06,029 --> 00:27:09,269
you can but it's really really tedious

00:27:07,679 --> 00:27:15,029
we have a language that's made for

00:27:09,269 --> 00:27:17,340
styling let's use it right what is the

00:27:15,029 --> 00:27:20,849
best practice to support theming in an

00:27:17,340 --> 00:27:22,259
app using styled components that is

00:27:20,849 --> 00:27:25,679
actually a very very interesting

00:27:22,259 --> 00:27:27,239
question um because we're still

00:27:25,679 --> 00:27:29,099
discovering best practices around that

00:27:27,239 --> 00:27:31,049
thing right we've built this theme

00:27:29,099 --> 00:27:32,279
provider and there's currently a huge

00:27:31,049 --> 00:27:34,379
discussion going on so if you're into

00:27:32,279 --> 00:27:36,749
theming go to the start component area

00:27:34,379 --> 00:27:39,479
look at the PRS there's API called RFC

00:27:36,749 --> 00:27:42,269
theming I think um we're we're sort of

00:27:39,479 --> 00:27:43,799
discussing we have global theming but

00:27:42,269 --> 00:27:45,989
you kind of want to have component

00:27:43,799 --> 00:27:47,519
levels being as well it's a really weird

00:27:45,989 --> 00:27:49,289
concept I to be able to have and wrap my

00:27:47,519 --> 00:27:50,609
head around that get and plane is sort

00:27:49,289 --> 00:27:52,679
of like we really really we need these

00:27:50,609 --> 00:27:54,450
installed components so I'm going to

00:27:52,679 --> 00:27:55,769
take a look at it I want it we know what

00:27:54,450 --> 00:27:57,749
happens so if you're interested in

00:27:55,769 --> 00:28:01,739
theming just go look at that PR and they

00:27:57,749 --> 00:28:03,389
start component repo why does the

00:28:01,739 --> 00:28:05,519
implementation return a component and

00:28:03,389 --> 00:28:06,960
not higher-order component why is it not

00:28:05,519 --> 00:28:09,659
a higher-order component well it

00:28:06,960 --> 00:28:11,070
actually it's a higher component um the

00:28:09,659 --> 00:28:12,989
reason we didn't make it the higher

00:28:11,070 --> 00:28:14,219
component in the react Redux sense where

00:28:12,989 --> 00:28:17,339
you wrap your component in just a

00:28:14,219 --> 00:28:20,580
function is no actually you can do that

00:28:17,339 --> 00:28:22,769
sorry yeah you can actually do that so

00:28:20,580 --> 00:28:24,899
you can call salt as a function and just

00:28:22,769 --> 00:28:26,940
passing your component and what happens

00:28:24,899 --> 00:28:28,830
is start components will inject your CSS

00:28:26,940 --> 00:28:30,539
fragment well sorry I should say you

00:28:28,830 --> 00:28:31,820
can't both styles and styled like a

00:28:30,539 --> 00:28:34,440
normal function so you go style

00:28:31,820 --> 00:28:35,820
parenthesis my component parenthesis

00:28:34,440 --> 00:28:37,499
closed and any go with the backticks and

00:28:35,820 --> 00:28:38,999
it passing some styles and what style

00:28:37,499 --> 00:28:41,669
components will do is it will take that

00:28:38,999 --> 00:28:43,710
CSS inject it into the Dom and then pass

00:28:41,669 --> 00:28:45,509
your class name into your component that

00:28:43,710 --> 00:28:46,619
you can then assign on to your Dom nodes

00:28:45,509 --> 00:28:48,359
for it to work if you have a more

00:28:46,619 --> 00:28:50,779
complex compiler right so that totally

00:28:48,359 --> 00:28:50,779
works too

00:28:51,750 --> 00:28:56,399
so that yes that works this question the

00:28:54,510 --> 00:28:58,230
next person can use style / decorate

00:28:56,399 --> 00:29:01,260
custom components directly eg style my

00:28:58,230 --> 00:29:02,730
component yes that probably works that's

00:29:01,260 --> 00:29:05,640
actually the exact API this is what it

00:29:02,730 --> 00:29:08,730
looks like what about using any

00:29:05,640 --> 00:29:09,179
preprocessors that's an interesting

00:29:08,730 --> 00:29:14,940
question

00:29:09,179 --> 00:29:16,860
and who in here would like to use a CSS

00:29:14,940 --> 00:29:21,140
preprocessor with styled components when

00:29:16,860 --> 00:29:21,140
you're thinking well what about sass

00:29:21,470 --> 00:29:25,590
like three people that's good that's

00:29:24,480 --> 00:29:28,950
good so I kind of put the point across

00:29:25,590 --> 00:29:30,570
and the thing is you'll need a CSS

00:29:28,950 --> 00:29:32,130
preprocessor because you have JavaScript

00:29:30,570 --> 00:29:33,899
right you can just interpolate that

00:29:32,130 --> 00:29:36,389
variables in fact you can have logic

00:29:33,899 --> 00:29:38,429
contrary to things like size so less you

00:29:36,389 --> 00:29:40,889
can have actual logic if you have really

00:29:38,429 --> 00:29:42,929
complex queries that work right you can

00:29:40,889 --> 00:29:44,700
in a Java Script say hey if the browser

00:29:42,929 --> 00:29:46,769
has that user agent string and the

00:29:44,700 --> 00:29:48,480
device is smaller than that and my user

00:29:46,769 --> 00:29:49,860
has a slow connection show these stars

00:29:48,480 --> 00:29:51,210
if that knots the case show shows them

00:29:49,860 --> 00:29:53,100
other stars right things that aren't

00:29:51,210 --> 00:29:55,200
possible in any preprocessor right it's

00:29:53,100 --> 00:29:56,700
charlatans right it's JavaScript let's

00:29:55,200 --> 00:29:58,710
take advantage of star JavaScript

00:29:56,700 --> 00:30:00,269
instead of trying to mangle logic into

00:29:58,710 --> 00:30:03,090
into the language that wasn't made for

00:30:00,269 --> 00:30:05,450
it all right that's my time thank you

00:30:03,090 --> 00:30:05,450

YouTube URL: https://www.youtube.com/watch?v=jaqDA7Btm3c


