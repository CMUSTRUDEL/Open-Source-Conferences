Title: ReactiveConf 2016 - Richard Feldman: Elm and React in production
Publication date: 2016-11-25
Playlist: ReactiveConf 2016
Description: 
	https://reactiveconf.com 

Meet those driving the change! World-renowned mobile and web innovators got together for three days in one town.

ReactiveConf, October 26 - 28 2016, Bratislava, Slovakia

---

Richard Feldman: Elm and React in production

At NoRedInk, we've been heavily using Elm and React side-by-side in production for over a year. After 35,000 lines of Elm code and about the same for React, we've learned a lot about how well these powerful technologies coexist in a code base that's been battle-tested by students who have used it to answer over a billion questions. This talk will be a deep dive into Elm and React from a production perspectiveâ€”what's familiar, what's different, and how they can work together. We'll start with initial adoption, continue on to shipping new features, and progress all the way through maintenance and scaling. We'll also look at the nontechnical impact of each: hiring, onboarding, and managing technical debt. Come see how two of the most revolutionary front end technologies on the planet can work together!
Captions: 
	00:00:04,600 --> 00:00:09,670
so this is Elmen reacts in production

00:00:07,330 --> 00:00:11,500
I'm Richard Feldman so this right here

00:00:09,670 --> 00:00:13,840
is the Apollo bridge right here in

00:00:11,500 --> 00:00:15,549
Bratislava it's about ten years old

00:00:13,840 --> 00:00:18,880
which in bridge years is not very many

00:00:15,549 --> 00:00:20,740
it's a relatively young bridge um but in

00:00:18,880 --> 00:00:22,090
software years that's a lot right a 10

00:00:20,740 --> 00:00:23,500
year old application you're still

00:00:22,090 --> 00:00:27,250
maintaining that same thing that's

00:00:23,500 --> 00:00:28,660
pretty long time um and I think the

00:00:27,250 --> 00:00:30,580
reason for the difference there has to

00:00:28,660 --> 00:00:32,500
do with the fact that software things

00:00:30,580 --> 00:00:34,570
tend to change a lot more right projects

00:00:32,500 --> 00:00:36,760
get canceled they get redesigned they

00:00:34,570 --> 00:00:38,110
get rewritten fact you got a 10-year old

00:00:36,760 --> 00:00:40,180
project probably you're getting people

00:00:38,110 --> 00:00:43,360
asking you why have you not rewritten it

00:00:40,180 --> 00:00:44,559
in the latest and greatest thing yet but

00:00:43,360 --> 00:00:48,100
sometimes every once in a while

00:00:44,559 --> 00:00:54,100
something unusual happens project

00:00:48,100 --> 00:00:55,750
succeeds now have to maintain it how

00:00:54,100 --> 00:00:58,300
many people have had this experience I'm

00:00:55,750 --> 00:01:00,489
you've ended up maintaining a software

00:00:58,300 --> 00:01:02,350
project way longer than you anticipated

00:01:00,489 --> 00:01:05,800
when you set out to start work you got

00:01:02,350 --> 00:01:08,080
it yeah me too ah a pretty common

00:01:05,800 --> 00:01:09,460
experience I think and when you do this

00:01:08,080 --> 00:01:12,640
you end up asking yourself this question

00:01:09,460 --> 00:01:15,430
when things sort of go unexpectedly why

00:01:12,640 --> 00:01:16,810
did that happen what's what what

00:01:15,430 --> 00:01:19,509
happened there that's a bug there's a

00:01:16,810 --> 00:01:21,670
some sort of unexpected behavior going

00:01:19,509 --> 00:01:23,259
on and ideally as you've been growing

00:01:21,670 --> 00:01:25,780
the project you've been doing a good job

00:01:23,259 --> 00:01:27,549
keeping things simple and maintainable

00:01:25,780 --> 00:01:29,439
right but doing a good job keeping

00:01:27,549 --> 00:01:31,329
things organized and you can sort of

00:01:29,439 --> 00:01:33,850
trace back and figure out why that

00:01:31,329 --> 00:01:36,070
unexpected thing happened and fix it but

00:01:33,850 --> 00:01:38,049
mmm all too often we end up with

00:01:36,070 --> 00:01:40,509
something slightly different right we've

00:01:38,049 --> 00:01:42,070
all been there mom but nobody wants to

00:01:40,509 --> 00:01:43,720
get there right nobody sets out at the

00:01:42,070 --> 00:01:45,520
beginning of a software project thinking

00:01:43,720 --> 00:01:47,350
you know someday this project will

00:01:45,520 --> 00:01:50,439
succeed and I will maintain it as a

00:01:47,350 --> 00:01:52,659
gigantic mess no one thinks that right

00:01:50,439 --> 00:01:54,790
now what we all want to end up with is

00:01:52,659 --> 00:01:56,740
if the project succeeds it ends up nice

00:01:54,790 --> 00:01:58,840
and maintainable so how does this happen

00:01:56,740 --> 00:02:01,149
how do we end up in this unintended

00:01:58,840 --> 00:02:02,920
place well for my money it has to do

00:02:01,149 --> 00:02:04,659
with the individual decisions we make

00:02:02,920 --> 00:02:06,159
along the way we don't know if the

00:02:04,659 --> 00:02:07,840
project's going to succeed we're just

00:02:06,159 --> 00:02:09,930
kind of taking it one step at a time and

00:02:07,840 --> 00:02:12,520
we sort of tend to reach for the most

00:02:09,930 --> 00:02:13,780
convenient thing we got this cable in

00:02:12,520 --> 00:02:15,310
our hand we got to plug it in somewhere

00:02:13,780 --> 00:02:17,050
like oh just whatever I'll just do that

00:02:15,310 --> 00:02:17,850
the most convenient one which is right

00:02:17,050 --> 00:02:19,950
there and then you

00:02:17,850 --> 00:02:22,500
uh which is the most communal that that

00:02:19,950 --> 00:02:24,360
one's next most and sure enough sooner

00:02:22,500 --> 00:02:26,040
or later you end up with a big mess even

00:02:24,360 --> 00:02:27,960
though each of your individual decisions

00:02:26,040 --> 00:02:29,330
along the way we're just pretty harmless

00:02:27,960 --> 00:02:32,220
you're just doing the convenient thing

00:02:29,330 --> 00:02:33,630
but I think that taking the convenience

00:02:32,220 --> 00:02:36,120
route each step of the way

00:02:33,630 --> 00:02:38,130
ends up with a big mess unintended Lee I

00:02:36,120 --> 00:02:40,050
think you have to sort of insist on

00:02:38,130 --> 00:02:42,330
simplicity each step of the way

00:02:40,050 --> 00:02:44,940
if you want to end up with a nice

00:02:42,330 --> 00:02:46,200
maintainable project if it succeeds and

00:02:44,940 --> 00:02:48,720
you end up finding yourself in a

00:02:46,200 --> 00:02:50,130
position to maintain it but this is what

00:02:48,720 --> 00:02:52,260
appealed to me about react when I first

00:02:50,130 --> 00:02:54,420
found out about it back in 2013 this

00:02:52,260 --> 00:02:56,610
idea of simplicity and in particular the

00:02:54,420 --> 00:02:59,090
simplicity of the render function is

00:02:56,610 --> 00:03:01,770
this really simple yet powerful idea of

00:02:59,090 --> 00:03:03,900
passing some state to a function and

00:03:01,770 --> 00:03:05,970
just having it return a description of

00:03:03,900 --> 00:03:07,830
how you want the Dom to look as opposed

00:03:05,970 --> 00:03:10,680
to doing all this wiring within the Dom

00:03:07,830 --> 00:03:12,660
talking back and forth between things to

00:03:10,680 --> 00:03:14,610
weigh data binding much simpler to just

00:03:12,660 --> 00:03:17,460
say here is the state and then here is

00:03:14,610 --> 00:03:19,890
how I want the Dom to look I was not the

00:03:17,460 --> 00:03:21,600
only one back in 2013 who thought this

00:03:19,890 --> 00:03:24,270
was a good idea but we were definitely

00:03:21,600 --> 00:03:26,430
in the minority in fact we were in such

00:03:24,270 --> 00:03:28,320
a small minority that after react was

00:03:26,430 --> 00:03:30,090
announced it got so much blowback from

00:03:28,320 --> 00:03:31,350
the community that Pete hunt went on

00:03:30,090 --> 00:03:34,230
this speaking tour called rethinking

00:03:31,350 --> 00:03:36,330
best practices and rethinking best

00:03:34,230 --> 00:03:38,520
practices was not originally intended to

00:03:36,330 --> 00:03:40,140
be a compliment as he describes in the

00:03:38,520 --> 00:03:41,970
talk this was actually based on a tweet

00:03:40,140 --> 00:03:44,010
of someone criticizing Facebook saying

00:03:41,970 --> 00:03:45,750
Oh Facebook rethinking best practices

00:03:44,010 --> 00:03:48,030
thrown everything out the window which

00:03:45,750 --> 00:03:49,980
you know to be fair I mean this was

00:03:48,030 --> 00:03:52,050
pretty far afield right when it came out

00:03:49,980 --> 00:03:56,730
you look at that slide of the background

00:03:52,050 --> 00:03:59,010
it says meat react aka the V in MVC MVC

00:03:56,730 --> 00:04:01,200
short for a model-view-controller so

00:03:59,010 --> 00:04:03,510
some of you may remember that this used

00:04:01,200 --> 00:04:06,090
to be the dominant paradigm I mean the

00:04:03,510 --> 00:04:08,460
absolute best practice back in 2013 this

00:04:06,090 --> 00:04:10,530
is what everybody was doing but react

00:04:08,460 --> 00:04:11,880
was not react said you know what I don't

00:04:10,530 --> 00:04:14,070
care what everybody else is doing we

00:04:11,880 --> 00:04:15,600
think we found something better and he

00:04:14,070 --> 00:04:17,220
did a really good job articulating this

00:04:15,600 --> 00:04:19,560
I think he said we found that there are

00:04:17,220 --> 00:04:22,109
certain best practices that deserve to

00:04:19,560 --> 00:04:23,880
be challenged really resonated with me I

00:04:22,109 --> 00:04:25,560
think this is true and I think this is

00:04:23,880 --> 00:04:27,360
especially true in the service of

00:04:25,560 --> 00:04:29,010
simplicity of trying to find a simpler

00:04:27,360 --> 00:04:29,790
way to do the same thing we've been

00:04:29,010 --> 00:04:32,310
doing

00:04:29,790 --> 00:04:34,290
so I work for a company called no red

00:04:32,310 --> 00:04:37,260
ink we make grammar and writing software

00:04:34,290 --> 00:04:38,550
for English teachers and back in 2013 we

00:04:37,260 --> 00:04:41,100
first decided we were going to give

00:04:38,550 --> 00:04:43,080
react a try the way that we did that was

00:04:41,100 --> 00:04:43,740
just by saying let's ship something

00:04:43,080 --> 00:04:46,620
small

00:04:43,740 --> 00:04:49,950
just get one small thing and take it all

00:04:46,620 --> 00:04:52,290
the way into production we just picked

00:04:49,950 --> 00:04:53,940
one page put one small part of one page

00:04:52,290 --> 00:04:55,650
and said we're just going to take this

00:04:53,940 --> 00:04:57,330
one feature implement it and react on

00:04:55,650 --> 00:04:57,930
this one page and get that all the way

00:04:57,330 --> 00:04:59,910
into production

00:04:57,930 --> 00:05:01,770
not a whole rewrite just saying yeah

00:04:59,910 --> 00:05:03,390
just that one thing all the way into

00:05:01,770 --> 00:05:05,430
production and the production part I

00:05:03,390 --> 00:05:06,780
think is really important because when

00:05:05,430 --> 00:05:08,070
you're building toy apps there are all

00:05:06,780 --> 00:05:10,350
these things you can just sort of forget

00:05:08,070 --> 00:05:11,940
about but they're important questions to

00:05:10,350 --> 00:05:13,170
be asking yourself things like how are

00:05:11,940 --> 00:05:14,580
we going to build this how are we going

00:05:13,170 --> 00:05:16,950
to test it how are we going to deploy it

00:05:14,580 --> 00:05:18,570
how is it going to fit into our process

00:05:16,950 --> 00:05:20,940
of creating software and getting it to

00:05:18,570 --> 00:05:22,470
our users and without asking these

00:05:20,940 --> 00:05:24,330
questions there's just sort of always

00:05:22,470 --> 00:05:26,400
this invisible barrier between you and

00:05:24,330 --> 00:05:28,350
the idea of using this new technology in

00:05:26,400 --> 00:05:29,760
production but once you've actually

00:05:28,350 --> 00:05:32,160
gotten a small thing into production

00:05:29,760 --> 00:05:34,110
like we did then these questions go away

00:05:32,160 --> 00:05:35,460
they've already been answered and from

00:05:34,110 --> 00:05:36,930
there you can take this small a little

00:05:35,460 --> 00:05:39,090
bit of react you've got in production

00:05:36,930 --> 00:05:40,950
and expand it and say oh well now it's

00:05:39,090 --> 00:05:42,210
not such a big deal to say we want to do

00:05:40,950 --> 00:05:44,490
this on our next feature just do a

00:05:42,210 --> 00:05:46,680
little bit more a little bit more until

00:05:44,490 --> 00:05:48,510
eventually after about a year we went

00:05:46,680 --> 00:05:50,190
from having just introduced react a

00:05:48,510 --> 00:05:53,370
little bit do it be only the dominant

00:05:50,190 --> 00:05:54,690
paradigm of our front end in 2014 and it

00:05:53,370 --> 00:05:57,450
was all just from that little seed we

00:05:54,690 --> 00:05:58,980
planted back in 2013 and things

00:05:57,450 --> 00:06:01,110
definitely got simpler when we when we

00:05:58,980 --> 00:06:02,910
started using react our code got nicer

00:06:01,110 --> 00:06:07,020
things were easier to maintain life was

00:06:02,910 --> 00:06:08,670
just better but sometimes as much as you

00:06:07,020 --> 00:06:10,140
try to aim for simplicity you get

00:06:08,670 --> 00:06:11,820
complexity just sort of creeping in from

00:06:10,140 --> 00:06:13,770
business requirements right this is not

00:06:11,820 --> 00:06:15,600
to do with the technology choices we've

00:06:13,770 --> 00:06:16,710
made this is just complexity that comes

00:06:15,600 --> 00:06:19,680
from the fact that we're building

00:06:16,710 --> 00:06:21,090
something that needs to be complex so as

00:06:19,680 --> 00:06:24,780
an example of this this is our

00:06:21,090 --> 00:06:26,970
assignment form so this is back in 2014

00:06:24,780 --> 00:06:29,730
this was how it looked this is all in

00:06:26,970 --> 00:06:31,650
react so we have tabs component up here

00:06:29,730 --> 00:06:33,180
across the top got assignment name some

00:06:31,650 --> 00:06:35,580
questions you can scramble the question

00:06:33,180 --> 00:06:36,720
order points got some potentially many

00:06:35,580 --> 00:06:37,860
different classes here we got a

00:06:36,720 --> 00:06:39,570
component for selecting specific

00:06:37,860 --> 00:06:41,550
students within a class to give the

00:06:39,570 --> 00:06:43,230
assignment to got a due date you can

00:06:41,550 --> 00:06:45,420
have some options here then you got

00:06:43,230 --> 00:06:47,100
big accordion component down here that's

00:06:45,420 --> 00:06:50,190
got all sorts of different options you

00:06:47,100 --> 00:06:51,570
can select with with different topics to

00:06:50,190 --> 00:06:53,940
select and all sorts of different

00:06:51,570 --> 00:06:55,650
variations just a lot of stuff going on

00:06:53,940 --> 00:06:58,740
here but the stuff that's going on here

00:06:55,650 --> 00:07:01,110
is not complex because we've done a poor

00:06:58,740 --> 00:07:02,460
job limp in implementing it it's just

00:07:01,110 --> 00:07:05,730
complex because the business

00:07:02,460 --> 00:07:08,580
requirements are complex so in order to

00:07:05,730 --> 00:07:09,930
maximize maintainability we've found

00:07:08,580 --> 00:07:12,420
that there are just sort of certain

00:07:09,930 --> 00:07:13,950
things that you can follow that lead to

00:07:12,420 --> 00:07:16,230
things maintaining as much simplicity

00:07:13,950 --> 00:07:17,940
and as much maintainability as possible

00:07:16,230 --> 00:07:19,170
as the code base grows and these are

00:07:17,940 --> 00:07:20,730
some things that you've probably been

00:07:19,170 --> 00:07:22,140
hearing throughout the community these

00:07:20,730 --> 00:07:24,630
probably won't come as too much of a

00:07:22,140 --> 00:07:26,100
surprise I'm instead of using mutable

00:07:24,630 --> 00:07:29,070
objects a lot of things just prefer

00:07:26,100 --> 00:07:30,450
immutable data it's just sort of less to

00:07:29,070 --> 00:07:31,830
worry about when you're just handing

00:07:30,450 --> 00:07:33,570
data from function to function and

00:07:31,830 --> 00:07:34,800
you're not able to mutate it or not

00:07:33,570 --> 00:07:36,390
worry about that the function that

00:07:34,800 --> 00:07:39,270
you're giving it to is going to mess

00:07:36,390 --> 00:07:42,030
with it creates a sort of smaller web of

00:07:39,270 --> 00:07:43,680
dependencies I'm also avoiding stateful

00:07:42,030 --> 00:07:45,480
components in favor of stateless

00:07:43,680 --> 00:07:47,040
components going back to that idea of

00:07:45,480 --> 00:07:48,780
the render function itself being

00:07:47,040 --> 00:07:51,510
incredibly simple a stateless component

00:07:48,780 --> 00:07:53,190
just boils it down to that function it

00:07:51,510 --> 00:07:56,340
doesn't have this sort of coupling or

00:07:53,190 --> 00:07:59,700
the co-locating of State along with the

00:07:56,340 --> 00:08:01,620
the UI logic and finally avoiding

00:07:59,700 --> 00:08:03,870
imperative side-effects and instead

00:08:01,620 --> 00:08:05,190
preferring declarative pure functions

00:08:03,870 --> 00:08:06,510
like we've heard that you should always

00:08:05,190 --> 00:08:07,620
use pure functions in your render

00:08:06,510 --> 00:08:09,750
function you should always use them in

00:08:07,620 --> 00:08:11,190
reducers I'm really just in general the

00:08:09,750 --> 00:08:12,690
more pure functions you can do the

00:08:11,190 --> 00:08:14,300
simpler your application is going to be

00:08:12,690 --> 00:08:17,370
the easier it's going to be to maintain

00:08:14,300 --> 00:08:18,930
then of course with these best practices

00:08:17,370 --> 00:08:20,130
these these ideas that will sort of make

00:08:18,930 --> 00:08:22,920
life easier you've got to ask the

00:08:20,130 --> 00:08:25,350
question how easy is it to stick to this

00:08:22,920 --> 00:08:27,330
because we're human right I mean nobody

00:08:25,350 --> 00:08:28,800
wants to end up with a code base it's

00:08:27,330 --> 00:08:31,140
difficult to maintain and yet we very

00:08:28,800 --> 00:08:33,419
frequently do and the reason for that is

00:08:31,140 --> 00:08:35,040
that when one of these is sort of right

00:08:33,419 --> 00:08:37,650
at hand it's the most convenient thing

00:08:35,040 --> 00:08:39,479
you say yes I know I want to be mostly

00:08:37,650 --> 00:08:40,770
immutable but just this once I'm going

00:08:39,479 --> 00:08:43,140
to mutate something and then move on I

00:08:40,770 --> 00:08:44,280
want a tight deadline and then you know

00:08:43,140 --> 00:08:46,590
one thing leads to another and

00:08:44,280 --> 00:08:48,390
eventually that one decision ends up

00:08:46,590 --> 00:08:50,700
biting you later there's this really

00:08:48,390 --> 00:08:52,320
really interesting question of um can we

00:08:50,700 --> 00:08:54,000
do better than just sort of telling

00:08:52,320 --> 00:08:56,550
ourselves not to do this then using

00:08:54,000 --> 00:08:57,059
discipline to avoid using these things

00:08:56,550 --> 00:08:58,289
that are in

00:08:57,059 --> 00:09:00,179
our tool box and just say well let's

00:08:58,289 --> 00:09:02,009
just pretend that they aren't like what

00:09:00,179 --> 00:09:03,779
if we just didn't have imperative side

00:09:02,009 --> 00:09:05,279
effects what if we didn't have stateful

00:09:03,779 --> 00:09:08,009
components what if we didn't have

00:09:05,279 --> 00:09:09,959
mutable objects what if our toolbox was

00:09:08,009 --> 00:09:12,449
just the simple things mutable data

00:09:09,959 --> 00:09:13,919
stateless components and declarative

00:09:12,449 --> 00:09:16,139
pure functions and that was all we had

00:09:13,919 --> 00:09:18,059
to work with that swill box sounds

00:09:16,139 --> 00:09:19,529
appealing you might understand why we

00:09:18,059 --> 00:09:21,239
might be interested in Elm because this

00:09:19,529 --> 00:09:23,399
is exactly the toolbox you have an L

00:09:21,239 --> 00:09:26,969
just immutable data pure functions

00:09:23,399 --> 00:09:28,499
rendering things that's it though Elm is

00:09:26,969 --> 00:09:29,879
a functional programming language if you

00:09:28,499 --> 00:09:32,369
haven't heard of it I compile the

00:09:29,879 --> 00:09:35,609
JavaScript and it has a very overt focus

00:09:32,369 --> 00:09:38,029
on simplicity to the point where Elm

00:09:35,609 --> 00:09:40,379
does not have a component system at all

00:09:38,029 --> 00:09:42,149
if you search through the guide and look

00:09:40,379 --> 00:09:43,799
for the word component the only place

00:09:42,149 --> 00:09:45,419
you'll find it is explaining by the way

00:09:43,799 --> 00:09:47,099
you might be used to a component system

00:09:45,419 --> 00:09:49,439
here's why we don't have one and here's

00:09:47,099 --> 00:09:52,229
how you do things instead no component

00:09:49,439 --> 00:09:53,459
system at all you might be saying wait a

00:09:52,229 --> 00:09:55,169
minute like how can you just have

00:09:53,459 --> 00:09:56,669
functions all the way and no components

00:09:55,169 --> 00:09:58,079
like that's that's bizarre that's not

00:09:56,669 --> 00:09:59,609
how anyone does it like if you throw a

00:09:58,079 --> 00:10:01,529
rock you will hit a JavaScript framework

00:09:59,609 --> 00:10:04,469
that has a component system it's just

00:10:01,529 --> 00:10:06,539
it's everywhere right um and to that I

00:10:04,469 --> 00:10:08,489
would like to refer back to our good

00:10:06,539 --> 00:10:09,839
friend Pete hunt and say you know what I

00:10:08,489 --> 00:10:11,669
think that there are certain best

00:10:09,839 --> 00:10:13,619
practices that deserve to be challenged

00:10:11,669 --> 00:10:16,979
and in particular they deserve to be

00:10:13,619 --> 00:10:19,679
challenged in the name of simplicity so

00:10:16,979 --> 00:10:21,299
how did this go this this switching to

00:10:19,679 --> 00:10:24,479
Elm just trying it out and then

00:10:21,299 --> 00:10:26,159
implementing something well let's let's

00:10:24,479 --> 00:10:28,649
take a look at this is our assignment

00:10:26,159 --> 00:10:30,719
form from 2014 this is our assignment

00:10:28,649 --> 00:10:33,689
form today this is what we have in

00:10:30,719 --> 00:10:35,099
production right now um it's it's grown

00:10:33,689 --> 00:10:36,659
over the years because again that the

00:10:35,099 --> 00:10:38,129
business requirements have changed we've

00:10:36,659 --> 00:10:39,959
tried to make it seem a little bit less

00:10:38,129 --> 00:10:42,689
intimidating by sort of using this

00:10:39,959 --> 00:10:44,279
perfect progressive reveal but there's

00:10:42,689 --> 00:10:45,689
actually quite a lot to be revealed

00:10:44,279 --> 00:10:46,919
right so we have a bunch of different

00:10:45,689 --> 00:10:48,719
students here there's some form

00:10:46,919 --> 00:10:50,339
validation going on as I check and

00:10:48,719 --> 00:10:52,349
uncheck things bunch of different types

00:10:50,339 --> 00:10:54,719
of practices and quizzes and things that

00:10:52,349 --> 00:10:57,089
we can give to users um if I click this

00:10:54,719 --> 00:10:58,919
button BAM this this pops out we've got

00:10:57,089 --> 00:11:00,689
a whole bunch of topics you can select

00:10:58,919 --> 00:11:02,579
you can see we've got these accordions

00:11:00,689 --> 00:11:04,049
right here like before as I check these

00:11:02,579 --> 00:11:05,729
it's gonna actually be syncing with the

00:11:04,049 --> 00:11:08,610
UI in the background there's just a

00:11:05,729 --> 00:11:11,579
whole lot of stuff going on here okay

00:11:08,610 --> 00:11:14,519
so this is more complex it's sort of

00:11:11,579 --> 00:11:16,170
unavoidably more complex due to the

00:11:14,519 --> 00:11:18,720
business requirements having gotten more

00:11:16,170 --> 00:11:21,269
complex but what if I told you that

00:11:18,720 --> 00:11:23,850
between comparing this assignment form

00:11:21,269 --> 00:11:25,410
to this much simpler one in terms of

00:11:23,850 --> 00:11:27,299
business requirements this one

00:11:25,410 --> 00:11:30,869
implements it and reacts this one

00:11:27,299 --> 00:11:33,869
implemented in Elm that of the two this

00:11:30,869 --> 00:11:35,369
one's easier to maintain we actually

00:11:33,869 --> 00:11:36,809
used to be afraid of maintaining this

00:11:35,369 --> 00:11:38,429
like every time we'd release some new

00:11:36,809 --> 00:11:40,230
content it'd be like somebody's got to

00:11:38,429 --> 00:11:42,269
go mess with the assignment for about no

00:11:40,230 --> 00:11:45,299
divs I don't know not me I mean it was

00:11:42,269 --> 00:11:47,459
it was really tough to maintain it but

00:11:45,299 --> 00:11:49,589
this Elm based one this is not something

00:11:47,459 --> 00:11:51,149
people were afraid of anyone feels free

00:11:49,589 --> 00:11:52,980
to maintain it usually just join the

00:11:51,149 --> 00:11:54,989
team we have no compulsion about saying

00:11:52,980 --> 00:11:57,119
any new team member can go in and edit

00:11:54,989 --> 00:11:59,759
this thing because Elm has this

00:11:57,119 --> 00:12:01,470
intentional focus on simplicity and of

00:11:59,759 --> 00:12:03,360
course I would be remiss if I didn't

00:12:01,470 --> 00:12:05,100
mention it also has a fantastic compiler

00:12:03,360 --> 00:12:07,439
that's incredibly helpful I'll talk a

00:12:05,100 --> 00:12:10,799
little bit more about that later though

00:12:07,439 --> 00:12:12,839
how did it go went incredibly well we

00:12:10,799 --> 00:12:14,160
now have 50,000 lines of elam code in

00:12:12,839 --> 00:12:15,660
production we've been using it more and

00:12:14,160 --> 00:12:17,699
more we planted that small seed and just

00:12:15,660 --> 00:12:19,079
kept growing it and growing it we've now

00:12:17,699 --> 00:12:22,259
been using it for over one and a half

00:12:19,079 --> 00:12:23,819
years in production and something that

00:12:22,259 --> 00:12:25,559
you may have heard me say before we've

00:12:23,819 --> 00:12:27,540
we've got this error logging service

00:12:25,559 --> 00:12:29,399
that tells us every time we get a

00:12:27,540 --> 00:12:31,259
runtime exception so we've been getting

00:12:29,399 --> 00:12:33,209
runtime exceptions for a very long time

00:12:31,259 --> 00:12:35,639
we've been you know ever since I joined

00:12:33,209 --> 00:12:37,079
the company you know react JavaScript

00:12:35,639 --> 00:12:38,579
anything in there has been throwing lots

00:12:37,079 --> 00:12:40,739
of runtime exceptions and we logged them

00:12:38,579 --> 00:12:43,199
every time we get one in production our

00:12:40,739 --> 00:12:45,179
elm code is 50,000 lines that we've been

00:12:43,199 --> 00:12:46,860
using the one and a half years the total

00:12:45,179 --> 00:12:48,720
number of runtime exceptions we've

00:12:46,860 --> 00:12:51,350
gotten from our elm code in that entire

00:12:48,720 --> 00:12:53,339
period of time is zero

00:12:51,350 --> 00:12:54,689
that might sound like a preposterous

00:12:53,339 --> 00:12:56,819
claim if you've never heard me make it

00:12:54,689 --> 00:12:58,410
before but I've been making it over a

00:12:56,819 --> 00:13:00,089
year now because it still has it

00:12:58,410 --> 00:13:01,829
happened yet we're still waiting for the

00:13:00,089 --> 00:13:03,600
first case where we actually find our

00:13:01,829 --> 00:13:05,220
elm code crashing something in

00:13:03,600 --> 00:13:06,959
production does not say it's impossible

00:13:05,220 --> 00:13:08,069
right I mean obviously you can just like

00:13:06,959 --> 00:13:09,179
write something that recursive

00:13:08,069 --> 00:13:10,889
indefinitely you can blow the stack I

00:13:09,179 --> 00:13:13,110
mean there's plenty of ways you can get

00:13:10,889 --> 00:13:15,569
an own program to crash but the point is

00:13:13,110 --> 00:13:17,730
it's surprisingly difficult to do it by

00:13:15,569 --> 00:13:19,199
accident right I mean if you actually

00:13:17,730 --> 00:13:21,029
care about what you're deploying the

00:13:19,199 --> 00:13:22,320
compiler just says such a good job of

00:13:21,029 --> 00:13:24,290
finding these things ahead of time

00:13:22,320 --> 00:13:26,610
that it just hasn't happened to us yet

00:13:24,290 --> 00:13:28,160
though in addition to making our code

00:13:26,610 --> 00:13:30,600
more maintainable through simplicity

00:13:28,160 --> 00:13:32,670
through the compiler it's also made our

00:13:30,600 --> 00:13:34,740
code more reliable we're able to deliver

00:13:32,670 --> 00:13:37,980
a better experience to our end users

00:13:34,740 --> 00:13:39,360
because of this we did this exactly the

00:13:37,980 --> 00:13:41,069
same way as we did with react

00:13:39,360 --> 00:13:42,899
we just started by saying hey let's ship

00:13:41,069 --> 00:13:45,300
something small just one small part of

00:13:42,899 --> 00:13:47,040
one page get it all the way into

00:13:45,300 --> 00:13:48,209
production get all those questions

00:13:47,040 --> 00:13:50,040
answered how we're going to build it how

00:13:48,209 --> 00:13:51,600
we're going to test it all that once

00:13:50,040 --> 00:13:55,980
you've got something small in production

00:13:51,600 --> 00:13:57,660
a lot of unknowns go away so 2013 we

00:13:55,980 --> 00:13:59,940
started off with a little bit of react

00:13:57,660 --> 00:14:02,550
2014 react sort of took over our front

00:13:59,940 --> 00:14:05,160
end in 2015 we introduced just a little

00:14:02,550 --> 00:14:07,889
bit of elm to that mix at this point we

00:14:05,160 --> 00:14:09,360
now have react in elm co-existing so

00:14:07,889 --> 00:14:12,269
let's talk about that for a little bit

00:14:09,360 --> 00:14:13,920
so you can sort of add a dash of elm to

00:14:12,269 --> 00:14:14,399
any given page we talked about that

00:14:13,920 --> 00:14:17,069
earlier

00:14:14,399 --> 00:14:20,579
here's one of the examples of that so

00:14:17,069 --> 00:14:22,380
we've got here our home page and almost

00:14:20,579 --> 00:14:25,980
everything you see here is just plain

00:14:22,380 --> 00:14:29,160
old static HTML and CSS one exception

00:14:25,980 --> 00:14:30,600
the login button here so this is ellen

00:14:29,160 --> 00:14:32,310
code right here this thing that just

00:14:30,600 --> 00:14:34,470
popped out it's this is all just done in

00:14:32,310 --> 00:14:36,180
elem so I can try this it's like gonna

00:14:34,470 --> 00:14:39,149
validate it's gonna give me a networker

00:14:36,180 --> 00:14:41,040
because I turned off the Wi-Fi but all

00:14:39,149 --> 00:14:43,319
of this stuff is just a tiny little

00:14:41,040 --> 00:14:46,110
embedded elm application right there in

00:14:43,319 --> 00:14:47,490
that one little div that's all it takes

00:14:46,110 --> 00:14:49,709
you're thinking about getting element

00:14:47,490 --> 00:14:51,540
direction do it like this just pick

00:14:49,709 --> 00:14:53,190
something really small something really

00:14:51,540 --> 00:14:54,360
low-risk where if you try it out and you

00:14:53,190 --> 00:14:56,069
decide you don't like it you can just

00:14:54,360 --> 00:14:57,930
say okay well we'll just rewrite it and

00:14:56,069 --> 00:14:59,779
what we're using before no problem

00:14:57,930 --> 00:15:01,889
that's all it takes

00:14:59,779 --> 00:15:03,839
if you're wondering in particular how to

00:15:01,889 --> 00:15:05,519
do this with react there's this great

00:15:03,839 --> 00:15:07,800
blog post called how to use element work

00:15:05,519 --> 00:15:10,019
and it's titled that because this is

00:15:07,800 --> 00:15:11,639
sort of the most common way that we hear

00:15:10,019 --> 00:15:13,769
people successfully starting to use

00:15:11,639 --> 00:15:15,689
element work is introducing it

00:15:13,769 --> 00:15:18,120
incrementally like this and that's at

00:15:15,689 --> 00:15:19,259
Elm Lang toric slash blog just scroll

00:15:18,120 --> 00:15:22,259
down a little bit there's that blog post

00:15:19,259 --> 00:15:23,970
and the way that it explains to do this

00:15:22,259 --> 00:15:26,100
is it gives the example of how to embed

00:15:23,970 --> 00:15:28,139
an elm application inside a react

00:15:26,100 --> 00:15:30,209
component it's all it takes just adding

00:15:28,139 --> 00:15:31,740
a little dash of elm you can also go the

00:15:30,209 --> 00:15:34,139
other way around and add a dash of

00:15:31,740 --> 00:15:35,339
JavaScript to an existing elm page so

00:15:34,139 --> 00:15:36,040
this would be some case where you need

00:15:35,339 --> 00:15:38,110
to let

00:15:36,040 --> 00:15:40,810
Everage the the much larger JavaScript

00:15:38,110 --> 00:15:43,240
ecosystem or the react ecosystem so one

00:15:40,810 --> 00:15:45,610
amusing example of this is talked about

00:15:43,240 --> 00:15:47,110
this 2014 assignment forum built and

00:15:45,610 --> 00:15:48,790
react we didn't build the whole thing

00:15:47,110 --> 00:15:50,920
and react this little date time picker

00:15:48,790 --> 00:15:52,690
right here this is actually jQuery

00:15:50,920 --> 00:15:54,250
because we couldn't find something that

00:15:52,690 --> 00:15:56,139
had both the date and the time that had

00:15:54,250 --> 00:15:57,790
like the UX that we wanted anywhere

00:15:56,139 --> 00:15:59,860
except for this jQuery date picker

00:15:57,790 --> 00:16:01,779
fortunately react lets you interrupt

00:15:59,860 --> 00:16:02,709
with arbitrary JavaScript stuff and so

00:16:01,779 --> 00:16:06,040
we were able to do that

00:16:02,709 --> 00:16:08,110
turns out Elm also lets you do that and

00:16:06,040 --> 00:16:10,660
this whole page is not actually an Elm

00:16:08,110 --> 00:16:13,810
because we still have that same jQuery

00:16:10,660 --> 00:16:15,069
date/time picker and the the assignment

00:16:13,810 --> 00:16:16,209
form that we're using today we still

00:16:15,069 --> 00:16:19,480
have that found a better one that we

00:16:16,209 --> 00:16:21,190
like better so you have that escape

00:16:19,480 --> 00:16:22,509
hatch and react and you also have it in

00:16:21,190 --> 00:16:25,660
Elm so Alan lets you do JavaScript

00:16:22,509 --> 00:16:28,180
Interop and you know as we like to say

00:16:25,660 --> 00:16:29,889
any page that's 99% Elm and 1%

00:16:28,180 --> 00:16:31,240
JavaScript totally happy to maintain

00:16:29,889 --> 00:16:36,190
that because whenever anything crashes

00:16:31,240 --> 00:16:38,470
you know exactly where to look so hiring

00:16:36,190 --> 00:16:39,880
is a is a good question it's a question

00:16:38,470 --> 00:16:41,380
that I get asked a lot actually

00:16:39,880 --> 00:16:43,569
earlier on at the conference somebody

00:16:41,380 --> 00:16:45,160
came up to me and and said hey so I

00:16:43,569 --> 00:16:46,990
heard you guys use element reduction a

00:16:45,160 --> 00:16:49,180
lot but I'm how do you hire people like

00:16:46,990 --> 00:16:50,680
how do you hire elm developers and the

00:16:49,180 --> 00:16:52,899
answer is first of all that we don't

00:16:50,680 --> 00:16:54,040
require any elm knowledge coming in we

00:16:52,899 --> 00:16:57,459
just you know if you don't know it we

00:16:54,040 --> 00:16:59,709
just teach you but as to the question of

00:16:57,459 --> 00:17:02,829
you know how do you find people so this

00:16:59,709 --> 00:17:04,780
is a visualization of our our hiring

00:17:02,829 --> 00:17:06,549
pipeline before we started using element

00:17:04,780 --> 00:17:07,929
and telling people about it and since we

00:17:06,549 --> 00:17:09,699
started using element and telling people

00:17:07,929 --> 00:17:12,939
that we use ailment reduction it's gone

00:17:09,699 --> 00:17:14,709
from this to this um we have gotten

00:17:12,939 --> 00:17:16,870
flooded with applications I mean

00:17:14,709 --> 00:17:19,390
seriously like I I have to tell you this

00:17:16,870 --> 00:17:20,919
story so I was practicing this talk for

00:17:19,390 --> 00:17:22,540
one of my co-workers and I had like a

00:17:20,919 --> 00:17:24,130
much more toned-down version this

00:17:22,540 --> 00:17:25,780
visualization he was like no no that's

00:17:24,130 --> 00:17:28,329
not enough it's they're not gonna get it

00:17:25,780 --> 00:17:31,390
like 3 gorges dam that's the only like

00:17:28,329 --> 00:17:33,580
appropriate metaphor for what's happened

00:17:31,390 --> 00:17:35,320
I mean seriously like good programmers

00:17:33,580 --> 00:17:37,720
want to use awesome technology right

00:17:35,320 --> 00:17:39,850
that's kind of makes sense Elmas awesome

00:17:37,720 --> 00:17:41,919
technology I can't remember the last

00:17:39,850 --> 00:17:43,540
time I did an interview where the

00:17:41,919 --> 00:17:46,090
candidate didn't bring up wanting to use

00:17:43,540 --> 00:17:48,010
Elm as the reason they applied like it's

00:17:46,090 --> 00:17:48,240
just incredible what it's done for our

00:17:48,010 --> 00:17:49,830
high

00:17:48,240 --> 00:17:52,980
process it's almost impossible to

00:17:49,830 --> 00:17:54,630
overstate um so the idea of how do you

00:17:52,980 --> 00:17:55,920
how do you manage to hire people Mike I

00:17:54,630 --> 00:17:57,390
don't remember how we managed to hire

00:17:55,920 --> 00:17:59,250
anyone before Elm

00:17:57,390 --> 00:18:01,679
because it was incredibly difficult and

00:17:59,250 --> 00:18:02,730
now it's much easier this might be a

00:18:01,679 --> 00:18:05,520
good time to mention by the way we're

00:18:02,730 --> 00:18:06,809
hiring we do hire remote people you

00:18:05,520 --> 00:18:08,429
don't have to know Elm on day one

00:18:06,809 --> 00:18:10,740
totally not a problem and we hired

00:18:08,429 --> 00:18:13,290
several people in Europe so uh no remote

00:18:10,740 --> 00:18:15,150
from Europe is totally cool so um

00:18:13,290 --> 00:18:16,350
onboarding is something you might be

00:18:15,150 --> 00:18:18,120
wondering about since I'm saying that

00:18:16,350 --> 00:18:19,080
we're onboarding people to Elm if they

00:18:18,120 --> 00:18:20,550
don't already know Elm

00:18:19,080 --> 00:18:22,860
I actually I'm able to compare our

00:18:20,550 --> 00:18:24,960
onboarding experience from react and elm

00:18:22,860 --> 00:18:27,179
because as early adopters have react

00:18:24,960 --> 00:18:28,950
back in 2013 we're also familiar with

00:18:27,179 --> 00:18:31,260
what it's like to try and get someone

00:18:28,950 --> 00:18:33,360
from zero react knowledge to learning

00:18:31,260 --> 00:18:35,520
react in addition to getting from zero

00:18:33,360 --> 00:18:38,520
Elm knowledge and to being able to

00:18:35,520 --> 00:18:40,410
contribute on the Elm side um granted

00:18:38,520 --> 00:18:41,970
like this day and age obviously more new

00:18:40,410 --> 00:18:44,460
hires already know react on Elm that's

00:18:41,970 --> 00:18:46,500
just sort of a given something that

00:18:44,460 --> 00:18:47,940
might be surprising though is the amount

00:18:46,500 --> 00:18:49,500
of time that it takes someone to get

00:18:47,940 --> 00:18:51,390
productive if they don't know either

00:18:49,500 --> 00:18:53,760
them pretty much the same between the

00:18:51,390 --> 00:18:55,679
two um and that that might sound like

00:18:53,760 --> 00:18:57,450
strange and particularly because Elm is

00:18:55,679 --> 00:18:58,620
a totally different language like react

00:18:57,450 --> 00:19:00,240
you still write JavaScript so if you

00:18:58,620 --> 00:19:02,730
already know JavaScript you have a huge

00:19:00,240 --> 00:19:04,410
leg up Elm different language obviously

00:19:02,730 --> 00:19:06,600
more to learn so how could it be that

00:19:04,410 --> 00:19:08,700
someone going from zero knowledge in

00:19:06,600 --> 00:19:10,679
that particular area to being able to be

00:19:08,700 --> 00:19:12,929
a production contributor is about the

00:19:10,679 --> 00:19:14,880
same for reacting Elm the answer is just

00:19:12,929 --> 00:19:16,740
that Elms compiler aids beginner

00:19:14,880 --> 00:19:19,530
learning a lot let me give you an

00:19:16,740 --> 00:19:21,660
example of this let's say I wrote this

00:19:19,530 --> 00:19:23,850
elm code if string dot length user dot

00:19:21,660 --> 00:19:25,410
last name then so this is calling the

00:19:23,850 --> 00:19:27,120
string dot length function on user dot

00:19:25,410 --> 00:19:29,520
last name to get back the length of that

00:19:27,120 --> 00:19:30,840
of that string and this is actually

00:19:29,520 --> 00:19:32,670
going to be an error let's take a look

00:19:30,840 --> 00:19:34,260
at what the compiler tells us as type

00:19:32,670 --> 00:19:36,120
mismatch this condition does not

00:19:34,260 --> 00:19:36,720
evaluate to a boolean value true or

00:19:36,120 --> 00:19:38,790
false

00:19:36,720 --> 00:19:40,320
a little red squiggly underline under

00:19:38,790 --> 00:19:42,059
the offending condition got the line

00:19:40,320 --> 00:19:43,980
number on the side there you've given me

00:19:42,059 --> 00:19:46,440
a condition with this type int but I

00:19:43,980 --> 00:19:48,390
need it to be bool hint element does not

00:19:46,440 --> 00:19:49,530
have truthiness such that instance

00:19:48,390 --> 00:19:51,330
strings and lists are automatically

00:19:49,530 --> 00:19:53,280
converted to boolean do that conversion

00:19:51,330 --> 00:19:54,630
explicitly so not only does it tell you

00:19:53,280 --> 00:19:55,950
about the problem and where it is and

00:19:54,630 --> 00:19:57,840
give you about as much detail as you

00:19:55,950 --> 00:19:59,520
could want on it but it even has hints

00:19:57,840 --> 00:20:01,910
for common beginner mistakes like this

00:19:59,520 --> 00:20:03,320
right so it's sort of a built

00:20:01,910 --> 00:20:05,360
in teaching aid into the language

00:20:03,320 --> 00:20:07,130
obviously we don't just turn people

00:20:05,360 --> 00:20:08,330
loose and say just go bang your head to

00:20:07,130 --> 00:20:10,070
get some compiler errors and then you'll

00:20:08,330 --> 00:20:12,590
know Elm that would be a little

00:20:10,070 --> 00:20:15,440
unrealistic but it definitely definitely

00:20:12,590 --> 00:20:16,760
helps give you one more example let's

00:20:15,440 --> 00:20:18,740
say I wrote this code this would be

00:20:16,760 --> 00:20:21,470
totally valid JavaScript code first name

00:20:18,740 --> 00:20:23,630
plus space plus last name but it's not

00:20:21,470 --> 00:20:25,130
valid elm code I'm not going to tell you

00:20:23,630 --> 00:20:26,450
why I'm just going to show you the error

00:20:25,130 --> 00:20:28,910
message let's see if you can learn it

00:20:26,450 --> 00:20:31,370
height mismatch the left argument of

00:20:28,910 --> 00:20:32,570
plus is causing a type mismatch plus is

00:20:31,370 --> 00:20:34,190
expecting the left argument to be a

00:20:32,570 --> 00:20:36,530
number but the left argument is a string

00:20:34,190 --> 00:20:38,180
hint to append strings in elm you need

00:20:36,530 --> 00:20:40,340
to use the plus plus operator not plus

00:20:38,180 --> 00:20:41,600
well you all just learned something from

00:20:40,340 --> 00:20:43,130
elm and I didn't even have to teach it

00:20:41,600 --> 00:20:45,410
to you I just read out loud what the

00:20:43,130 --> 00:20:47,000
compiler would have told you so this is

00:20:45,410 --> 00:20:48,860
why our onboarding experience with elm

00:20:47,000 --> 00:20:50,450
is able to be about comparable to the

00:20:48,860 --> 00:20:51,980
onboarding experience we had getting

00:20:50,450 --> 00:20:53,210
people to learn react from scratch even

00:20:51,980 --> 00:20:55,580
though it's a totally different language

00:20:53,210 --> 00:20:57,380
this compiler is just unbelievably

00:20:55,580 --> 00:20:59,570
helpful by the way if you're wondering

00:20:57,380 --> 00:21:01,700
whether having this level of compiler

00:20:59,570 --> 00:21:04,490
support makes our lives easier from the

00:21:01,700 --> 00:21:08,090
maintainability perspective oh man yes

00:21:04,490 --> 00:21:11,660
it is unbelievably nice I I really never

00:21:08,090 --> 00:21:13,010
want to go back so uh from the technical

00:21:11,660 --> 00:21:15,860
debt perspective this has some

00:21:13,010 --> 00:21:17,420
implications so there's this sort of

00:21:15,860 --> 00:21:19,190
saying if it compiles it usually just

00:21:17,420 --> 00:21:21,050
works and this is something that people

00:21:19,190 --> 00:21:23,930
have had this sort of shared experience

00:21:21,050 --> 00:21:26,540
around in Elm if if your code compiles

00:21:23,930 --> 00:21:27,890
usually it just works now that's nice

00:21:26,540 --> 00:21:29,840
when you're building new stuff but it's

00:21:27,890 --> 00:21:32,060
incredibly nice when you're refactoring

00:21:29,840 --> 00:21:33,890
it means that we end up refactoring way

00:21:32,060 --> 00:21:35,960
way more often than we used to way more

00:21:33,890 --> 00:21:37,190
commits that are looking like this this

00:21:35,960 --> 00:21:40,190
is an Elmer e factor that we had

00:21:37,190 --> 00:21:42,560
recently and the reason that it's it's

00:21:40,190 --> 00:21:45,290
so much easier to refactor is just that

00:21:42,560 --> 00:21:46,910
when you refactor our react code we used

00:21:45,290 --> 00:21:48,830
to have this experience where we would

00:21:46,910 --> 00:21:50,870
change a bunch of stuff and then a bunch

00:21:48,830 --> 00:21:52,730
of stuff would break and also all but a

00:21:50,870 --> 00:21:53,690
bunch of our tests would break we'd have

00:21:52,730 --> 00:21:55,220
to go rewrite the test and then

00:21:53,690 --> 00:21:57,380
hopefully we're covering as much as we

00:21:55,220 --> 00:21:58,670
were before bin maybe not and then we

00:21:57,380 --> 00:22:00,530
get it into production and maybe we

00:21:58,670 --> 00:22:02,480
would we would crash we would have some

00:22:00,530 --> 00:22:04,490
bug that cropped up some regression and

00:22:02,480 --> 00:22:06,980
be like ah no I mean the refactor yeah

00:22:04,490 --> 00:22:09,170
the code is nicer but it's it's a bummer

00:22:06,980 --> 00:22:10,670
that we introduced that regression but

00:22:09,170 --> 00:22:12,350
without code we just don't really have

00:22:10,670 --> 00:22:13,900
that happen very often like when you

00:22:12,350 --> 00:22:15,400
change stuff in elm code

00:22:13,900 --> 00:22:16,960
matter how big the codebase is no matter

00:22:15,400 --> 00:22:18,880
how many files it's spanning the

00:22:16,960 --> 00:22:19,900
compiler looks at all of them regardless

00:22:18,880 --> 00:22:21,100
of whether or not you have tests

00:22:19,900 --> 00:22:22,300
covering those things the compiler is

00:22:21,100 --> 00:22:23,920
going to tell you if you hook things up

00:22:22,300 --> 00:22:25,900
wrong if they no longer fit together

00:22:23,920 --> 00:22:27,880
it's going to let you know which means

00:22:25,900 --> 00:22:29,830
that if you had this experience if it

00:22:27,880 --> 00:22:31,840
compiles it usually just works you feel

00:22:29,830 --> 00:22:33,520
this incredible freedom to refactor it's

00:22:31,840 --> 00:22:35,170
no longer a scary proposition it's

00:22:33,520 --> 00:22:36,880
something you can just do and just be

00:22:35,170 --> 00:22:39,010
like oh yeah that'll probably just work

00:22:36,880 --> 00:22:40,330
out again now you know this story one of

00:22:39,010 --> 00:22:42,310
my co-workers who works on the ops team

00:22:40,330 --> 00:22:43,960
he knows a little bit of alum but like

00:22:42,310 --> 00:22:46,330
just enough to be dangerous as it were

00:22:43,960 --> 00:22:48,070
um he told me that he actually feels

00:22:46,330 --> 00:22:49,690
comfortable making pull requests against

00:22:48,070 --> 00:22:51,160
our Ellen codebase to introduce reef

00:22:49,690 --> 00:22:52,270
actors when he comes across things that

00:22:51,160 --> 00:22:54,160
he thinks could be a little bit cleaner

00:22:52,270 --> 00:22:56,920
because even though he doesn't know elm

00:22:54,160 --> 00:22:59,350
very well bio who's got his back right I

00:22:56,920 --> 00:23:01,030
mean he's confident that if it compiles

00:22:59,350 --> 00:23:02,770
he's not going to introduce a regression

00:23:01,030 --> 00:23:06,220
even though unlike the rest of us he's

00:23:02,770 --> 00:23:08,590
not working on Elm every day um this

00:23:06,220 --> 00:23:10,390
also impacts new features so it is

00:23:08,590 --> 00:23:12,430
definitely the case that if I'm building

00:23:10,390 --> 00:23:14,140
a new feature from scratch like react

00:23:12,430 --> 00:23:15,940
will get me something on the screen that

00:23:14,140 --> 00:23:17,620
works that I can try out in less time

00:23:15,940 --> 00:23:19,540
and the reason for that is stateful

00:23:17,620 --> 00:23:20,740
components right so if I want to have a

00:23:19,540 --> 00:23:23,020
date picker and I want to introduce that

00:23:20,740 --> 00:23:24,730
to my application in react I can have a

00:23:23,020 --> 00:23:26,200
safe full component date picker and I

00:23:24,730 --> 00:23:27,370
can just drop it in in one place and

00:23:26,200 --> 00:23:29,230
it's just going to work that's it that's

00:23:27,370 --> 00:23:31,150
the end of the story but because Ellen

00:23:29,230 --> 00:23:33,070
doesn't have that I now have to actually

00:23:31,150 --> 00:23:34,600
say okay over here I want to introduce

00:23:33,070 --> 00:23:36,280
that to the rendering part of my app and

00:23:34,600 --> 00:23:37,660
over here I want to introduce the state

00:23:36,280 --> 00:23:39,700
management that goes with that it's sort

00:23:37,660 --> 00:23:41,050
of two different steps instead of the

00:23:39,700 --> 00:23:42,820
one step where you just drop it in and

00:23:41,050 --> 00:23:44,350
it just works but that means that it's

00:23:42,820 --> 00:23:47,230
less time to get something rendering and

00:23:44,350 --> 00:23:49,210
react then it would be an elm but what

00:23:47,230 --> 00:23:51,640
we found is that it takes less time to

00:23:49,210 --> 00:23:53,440
go from zero to shipping the feature in

00:23:51,640 --> 00:23:55,870
elm and the reason for that is that

00:23:53,440 --> 00:23:58,000
although maintainability has a lot to do

00:23:55,870 --> 00:23:59,830
with fixing bugs and making your code

00:23:58,000 --> 00:24:01,960
cleaner and finding edge cases and stuff

00:23:59,830 --> 00:24:03,220
like that you still do some of that on

00:24:01,960 --> 00:24:05,440
the way to the first time you're getting

00:24:03,220 --> 00:24:06,580
something into production like the first

00:24:05,440 --> 00:24:07,900
time you get something up on the screen

00:24:06,580 --> 00:24:09,910
you're like great this is pretty good

00:24:07,900 --> 00:24:11,140
but that's not necessarily what you're

00:24:09,910 --> 00:24:12,880
going to get when you take it through a

00:24:11,140 --> 00:24:14,800
full QA pass when you try and really

00:24:12,880 --> 00:24:17,050
push its limits and find out where

00:24:14,800 --> 00:24:18,940
things are going to break um because elm

00:24:17,050 --> 00:24:21,460
gives us this additional layer of of

00:24:18,940 --> 00:24:23,320
help uh from the compiler as we're going

00:24:21,460 --> 00:24:24,580
from start to finish we end up getting

00:24:23,320 --> 00:24:26,750
so much help that it more than

00:24:24,580 --> 00:24:28,070
compensates for the amount of additional

00:24:26,750 --> 00:24:29,990
time it takes us to set things up

00:24:28,070 --> 00:24:32,330
because we don't have staple components

00:24:29,990 --> 00:24:34,580
though it's a net cost savings if you

00:24:32,330 --> 00:24:36,080
consider the time from zero to getting

00:24:34,580 --> 00:24:37,550
something into production which our

00:24:36,080 --> 00:24:41,180
money is the metric that we care the

00:24:37,550 --> 00:24:43,280
most about um community okay so the

00:24:41,180 --> 00:24:45,290
react community is huge the old

00:24:43,280 --> 00:24:47,090
community is much smaller but I do

00:24:45,290 --> 00:24:48,410
remember a time when the react community

00:24:47,090 --> 00:24:50,000
was small right when we first got into

00:24:48,410 --> 00:24:51,470
react people were saying the same things

00:24:50,000 --> 00:24:53,030
about the react community that we were

00:24:51,470 --> 00:24:55,640
about Elm they say well how can you

00:24:53,030 --> 00:24:57,740
abandon this huge ecosystem of MVC stuff

00:24:55,640 --> 00:24:58,970
like how can you you know blaze this new

00:24:57,740 --> 00:25:00,110
trail he said well you know we think

00:24:58,970 --> 00:25:01,730
it's worth it we think it's a nicer

00:25:00,110 --> 00:25:04,010
system and the community grew over time

00:25:01,730 --> 00:25:05,630
and now the react community is huge the

00:25:04,010 --> 00:25:08,390
only community much smaller but it is

00:25:05,630 --> 00:25:10,400
growing pretty quickly this is a Matt

00:25:08,390 --> 00:25:12,740
did this visualization of Elm github

00:25:10,400 --> 00:25:14,510
repos created by month so yeah there's a

00:25:12,740 --> 00:25:16,670
lot of momentum to this thing still not

00:25:14,510 --> 00:25:19,370
big still not as big as react you know

00:25:16,670 --> 00:25:21,680
but but growing pretty quickly there's a

00:25:19,370 --> 00:25:23,720
ton of meetups happening they like to do

00:25:21,680 --> 00:25:25,640
little variations on the Elm logo -

00:25:23,720 --> 00:25:28,520
pretty sweet I'm a fan of quite a few of

00:25:25,640 --> 00:25:30,830
these and we also recently had the first

00:25:28,520 --> 00:25:33,440
ever Elm conference back at and

00:25:30,830 --> 00:25:34,850
collocated was strangely so yeah small

00:25:33,440 --> 00:25:38,360
community but definitely growing quickly

00:25:34,850 --> 00:25:40,640
and there were about 230 people at Elm

00:25:38,360 --> 00:25:41,990
conf and it was exciting to just see

00:25:40,640 --> 00:25:44,960
everyone coming together and just sort

00:25:41,990 --> 00:25:47,840
of being a part of this growing thing so

00:25:44,960 --> 00:25:49,700
all things considered we we started off

00:25:47,840 --> 00:25:52,010
with just introducing a little bit of

00:25:49,700 --> 00:25:54,440
react and then we sort of grew that and

00:25:52,010 --> 00:25:56,300
expanded it and and had it going from

00:25:54,440 --> 00:25:58,640
being in production to being the

00:25:56,300 --> 00:26:00,230
dominant paradigm of our front-end and

00:25:58,640 --> 00:26:02,090
we introduced a little bit of elm a year

00:26:00,230 --> 00:26:03,680
later and then now we've actually gotten

00:26:02,090 --> 00:26:05,240
all the way to the point that Elm has

00:26:03,680 --> 00:26:06,440
become the dominant paradigm in our

00:26:05,240 --> 00:26:08,480
front-end and actually most of our

00:26:06,440 --> 00:26:11,600
front-end code is now in Elm and react

00:26:08,480 --> 00:26:13,640
has become legacy code for us though

00:26:11,600 --> 00:26:15,110
would we do it all again we go through

00:26:13,640 --> 00:26:16,820
all that stuff just introducing things

00:26:15,110 --> 00:26:18,830
incrementally growing it and growing it

00:26:16,820 --> 00:26:21,740
yeah absolutely

00:26:18,830 --> 00:26:23,930
they've been a fantastic experience so

00:26:21,740 --> 00:26:25,520
if you want to learn more a couple

00:26:23,930 --> 00:26:27,440
resources to recommend Elm weekly is

00:26:25,520 --> 00:26:28,490
just sort of a weekly mailer just tells

00:26:27,440 --> 00:26:31,070
you what's been going on in the Elm

00:26:28,490 --> 00:26:32,660
community Elm Tallinn podcasts just

00:26:31,070 --> 00:26:35,450
started up this is a podcast dedicated

00:26:32,660 --> 00:26:37,400
to Elm there's a guide for getting

00:26:35,450 --> 00:26:37,610
started guide elm lang org check that

00:26:37,400 --> 00:26:40,310
out

00:26:37,610 --> 00:26:41,450
slack amazing slack channel like

00:26:40,310 --> 00:26:43,850
to help especially in the beginners

00:26:41,450 --> 00:26:45,170
channel super friendly people shameless

00:26:43,850 --> 00:26:46,880
plug I have to mention I'm writing a

00:26:45,170 --> 00:26:48,320
book element action from Bandung

00:26:46,880 --> 00:26:49,790
publications available for early access

00:26:48,320 --> 00:26:52,120
I believe they have a discount code for

00:26:49,790 --> 00:26:54,830
this conference so please check that out

00:26:52,120 --> 00:26:56,030
so if you're considering Elm View if

00:26:54,830 --> 00:26:58,490
you're thinking about it sounds

00:26:56,030 --> 00:27:00,860
interesting but I haven't quite gotten

00:26:58,490 --> 00:27:03,470
the the ability to get it going yet what

00:27:00,860 --> 00:27:06,140
I would suggest is chip something small

00:27:03,470 --> 00:27:08,630
and get it all the way into production

00:27:06,140 --> 00:27:15,400
then you can see whether you like it or

00:27:08,630 --> 00:27:15,400
not thanks very much thank you a trade

00:27:17,440 --> 00:27:24,470
awesome so let's go three questions it's

00:27:22,040 --> 00:27:26,270
just we have a quite a few of them so

00:27:24,470 --> 00:27:29,300
let's see how many we can fit into five

00:27:26,270 --> 00:27:31,190
minutes how can you optimize immutable

00:27:29,300 --> 00:27:33,710
data structures to be performing a low

00:27:31,190 --> 00:27:37,610
Marik low CP environments like mobile

00:27:33,710 --> 00:27:39,170
phones or IOT that's a combustion that's

00:27:37,610 --> 00:27:40,940
a good question for somebody who's a

00:27:39,170 --> 00:27:41,720
compiler author which I totally have not

00:27:40,940 --> 00:27:43,340
um

00:27:41,720 --> 00:27:46,040
I don't know how to optimize those what

00:27:43,340 --> 00:27:47,870
I can say is so if you look on the Elm

00:27:46,040 --> 00:27:50,240
website there's a blog post called

00:27:47,870 --> 00:27:52,070
blazing fast HTML round two and it's got

00:27:50,240 --> 00:27:55,100
benchmarks of LM against like react

00:27:52,070 --> 00:27:57,500
ember angular a bunch of popular

00:27:55,100 --> 00:27:59,780
frameworks and Elm is outperforming all

00:27:57,500 --> 00:28:01,640
of them in render performance on top of

00:27:59,780 --> 00:28:03,530
which in that benchmark L most severely

00:28:01,640 --> 00:28:05,090
handicapped because it's doing lots of

00:28:03,530 --> 00:28:06,260
performance optimizations that Evan

00:28:05,090 --> 00:28:06,830
thought would be cheating to show in

00:28:06,260 --> 00:28:10,640
there

00:28:06,830 --> 00:28:12,860
so basically TLDR Elm is quite fast I'm

00:28:10,640 --> 00:28:15,650
sure you can probably do even better

00:28:12,860 --> 00:28:17,900
than that if you're optimizing stuff for

00:28:15,650 --> 00:28:21,260
low CPU environments but if you think

00:28:17,900 --> 00:28:24,050
that things like reax ember angular are

00:28:21,260 --> 00:28:25,810
fast enough for your purposes then good

00:28:24,050 --> 00:28:30,860
news Elm is going to be even faster

00:28:25,810 --> 00:28:33,370
should I learn Elm or reason Elm that

00:28:30,860 --> 00:28:33,370
was fast

00:28:35,970 --> 00:28:42,580
I'm gonna continue with why hahaha

00:28:39,220 --> 00:28:44,770
um I prefer guys I don't know reason I I

00:28:42,580 --> 00:28:46,450
really can't speak to that I you know

00:28:44,770 --> 00:28:47,770
had I used both of them that I could

00:28:46,450 --> 00:28:50,170
probably say something intelligent about

00:28:47,770 --> 00:28:52,180
it but I used elm I'm extremely happy

00:28:50,170 --> 00:28:53,710
with it um I'm sort of aware of the

00:28:52,180 --> 00:28:55,690
characteristics of reason and it doesn't

00:28:53,710 --> 00:28:58,150
seem like it has anything to offer me

00:28:55,690 --> 00:28:59,590
maybe if I wanted to use it on the

00:28:58,150 --> 00:29:02,590
server side like gizelle does not have

00:28:59,590 --> 00:29:04,810
server side yet and probably won't for

00:29:02,590 --> 00:29:05,920
quite a while so if I wanted to have the

00:29:04,810 --> 00:29:07,270
same language on the client on the

00:29:05,920 --> 00:29:09,250
server that would be something that

00:29:07,270 --> 00:29:10,720
would appeal to me about it but as far

00:29:09,250 --> 00:29:12,100
as running language goes I mean I don't

00:29:10,720 --> 00:29:14,620
know doesn't doesn't really seem like I

00:29:12,100 --> 00:29:16,360
have anything to gain from switching to

00:29:14,620 --> 00:29:18,100
it so so continuing at the question

00:29:16,360 --> 00:29:20,350
what's the worst part of Elm for you ah

00:29:18,100 --> 00:29:21,810
yeah so that ties right into it um the

00:29:20,350 --> 00:29:24,820
fact that I can't use a lot the server

00:29:21,810 --> 00:29:26,200
so I mean I say that in jest like I

00:29:24,820 --> 00:29:27,760
would really love to use Elm on a server

00:29:26,200 --> 00:29:30,310
like and I'm excited for the day that I

00:29:27,760 --> 00:29:32,080
can but that does mean that like if so I

00:29:30,310 --> 00:29:34,660
used to have an application where I was

00:29:32,080 --> 00:29:36,550
writing note on the server and and j/s

00:29:34,660 --> 00:29:37,750
in the browser and so you know just

00:29:36,550 --> 00:29:39,670
having the same language in both places

00:29:37,750 --> 00:29:42,580
was pretty nice and if you choose Elam

00:29:39,670 --> 00:29:44,680
you just can't have that and so I guess

00:29:42,580 --> 00:29:46,690
I would throw in one other like extra

00:29:44,680 --> 00:29:47,800
worst part about element it like that's

00:29:46,690 --> 00:29:49,960
that's the thing that I like the least

00:29:47,800 --> 00:29:51,940
but the other thing that is sort of like

00:29:49,960 --> 00:29:53,500
the hardest part is just like the

00:29:51,940 --> 00:29:56,020
learning curve right so it's a different

00:29:53,500 --> 00:29:58,870
language and and that means that like if

00:29:56,020 --> 00:30:00,490
I'm trying to get somebody to like you

00:29:58,870 --> 00:30:02,230
know work at Noureddine core or talk

00:30:00,490 --> 00:30:03,430
about elm with me if they don't already

00:30:02,230 --> 00:30:05,620
know it then I sort of have like a

00:30:03,430 --> 00:30:07,360
significant bridge to cross before I can

00:30:05,620 --> 00:30:08,410
like have intelligent conversations with

00:30:07,360 --> 00:30:10,390
them and I'm still sort of like

00:30:08,410 --> 00:30:11,890
struggling to figure out how to you know

00:30:10,390 --> 00:30:13,180
communicate more effectively when we

00:30:11,890 --> 00:30:16,540
don't necessarily have all the same

00:30:13,180 --> 00:30:19,120
shared jargon what about dead code

00:30:16,540 --> 00:30:21,520
elimination and code splitting it out so

00:30:19,120 --> 00:30:23,550
that is sort of going to be the focus of

00:30:21,520 --> 00:30:26,110
the next release of Elms of it there's a

00:30:23,550 --> 00:30:28,540
0.18 is about to drop in like probably

00:30:26,110 --> 00:30:30,310
less than a month on the release after

00:30:28,540 --> 00:30:32,830
that is is looking into all that stuff

00:30:30,310 --> 00:30:34,540
so right now we basically just like use

00:30:32,830 --> 00:30:37,180
webpack and just sort of like do web

00:30:34,540 --> 00:30:38,920
pack related stuff and like there's no

00:30:37,180 --> 00:30:40,930
elm specific like dead code elimination

00:30:38,920 --> 00:30:42,550
or code splitting but it seems like

00:30:40,930 --> 00:30:44,380
there's a big opportunity to get into

00:30:42,550 --> 00:30:45,799
those things and so it's sort of like

00:30:44,380 --> 00:30:49,369
under active investing

00:30:45,799 --> 00:30:51,110
but TLDR is not a thing yet like in pure

00:30:49,369 --> 00:30:53,210
elm and so if you require those things

00:30:51,110 --> 00:30:55,309
then honestly you know like I wouldn't

00:30:53,210 --> 00:30:56,779
recommend using elm yet but I would

00:30:55,309 --> 00:30:58,759
definitely keep an eye out for that

00:30:56,779 --> 00:31:00,769
release because I expect that you know

00:30:58,759 --> 00:31:04,820
based on past releases that it'll be

00:31:00,769 --> 00:31:07,399
nice when it does exist what uh uh one

00:31:04,820 --> 00:31:08,960
is Elmo point eighteen going to be

00:31:07,399 --> 00:31:12,529
released how many more iterations out

00:31:08,960 --> 00:31:14,299
till version 1.0 gets launched so 18 I'm

00:31:12,529 --> 00:31:15,470
guessing is gonna be released in

00:31:14,299 --> 00:31:17,659
probably the next couple of weeks so

00:31:15,470 --> 00:31:19,070
less than a month I don't know for sure

00:31:17,659 --> 00:31:21,859
because it's all just sort of like you

00:31:19,070 --> 00:31:24,409
know when it's done right as far as how

00:31:21,859 --> 00:31:25,700
many more iterations until 1.0 so I've

00:31:24,409 --> 00:31:27,769
talked about this with Evan the the

00:31:25,700 --> 00:31:29,929
creator of elm and basically what what

00:31:27,769 --> 00:31:31,789
he said is sort of like 1.0 should be a

00:31:29,929 --> 00:31:33,440
really boring release and really you

00:31:31,789 --> 00:31:34,700
want to cut 1.0 when you're saying like

00:31:33,440 --> 00:31:36,289
we haven't changed anything in a while

00:31:34,700 --> 00:31:38,509
so why don't we just announce that we're

00:31:36,289 --> 00:31:39,980
stable now but you know Elam is still

00:31:38,509 --> 00:31:42,289
changing it's still sort of like

00:31:39,980 --> 00:31:44,450
evolving and you know the last three

00:31:42,289 --> 00:31:45,950
feet releases have removed features on

00:31:44,450 --> 00:31:47,929
purpose to try and make it even simpler

00:31:45,950 --> 00:31:49,249
and as long as that's sort of happening

00:31:47,929 --> 00:31:50,749
on a regular basis it seems like it

00:31:49,249 --> 00:31:52,759
would be you know like a little bit

00:31:50,749 --> 00:31:54,289
disingenuous to say oh we're at one

00:31:52,759 --> 00:31:55,909
point oh you can trust everything now it

00:31:54,289 --> 00:31:57,649
should be more of a like okay things

00:31:55,909 --> 00:32:01,309
have been stable for a while now let's

00:31:57,649 --> 00:32:02,869
call it 1.0 okay so tasse answers what

00:32:01,309 --> 00:32:05,450
about a beckon compatibility can I use

00:32:02,869 --> 00:32:08,600
Elm to build notes EG expert sap yeah

00:32:05,450 --> 00:32:10,100
not yet so I mean in as much as Elm can

00:32:08,600 --> 00:32:12,049
interoperate with JavaScript like if you

00:32:10,100 --> 00:32:14,299
want you could run Elm on the server and

00:32:12,049 --> 00:32:16,039
just only put business logic in elm but

00:32:14,299 --> 00:32:18,769
then like do interrupt for like database

00:32:16,039 --> 00:32:20,269
and HTTP and like everything but that

00:32:18,769 --> 00:32:23,389
sounds like a lot more work it's worse

00:32:20,269 --> 00:32:26,359
to be honest so yeah basic answer is not

00:32:23,389 --> 00:32:29,859
yet and with that answer thank you very

00:32:26,359 --> 00:32:29,859
much really appreciated

00:32:30,390 --> 00:32:32,450

YouTube URL: https://www.youtube.com/watch?v=3FNKaGm3gk0


