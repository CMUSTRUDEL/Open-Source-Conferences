Title: Victory.js - A powerful data visualization library for ReactJS - Colin Megill
Publication date: 2015-11-16
Playlist: ReactiveConf 2015
Description: 
	We tried swapped out D3's DOM model in favor of React. The result? Love at first iteration. Building a data visualization library as React components means that you can reclaim your SVG as declarative markup, NPM install visualizations directly into your project (can't do that with bl.ocks!), fork them, remix them and file issues against them. It also meant completely rethinking how animations are done, since D3's animation model relies on its DOM model. Come learn the API, and what it means for the future of interactive data visualization.

Colin Megill
Founder of Seattle based startup pol.is, Senior Front End Developer at Formidable Labs. He has architected and built client side applications for some of the largest brands in the world. Teaches in a series of in depth talks on ReactJS given at Facebook Seattle. Colin's primary focus is UI design, product design and information architecture.
Captions: 
	00:00:08,260 --> 00:00:13,549
welcome back from lunch everyone

00:00:10,809 --> 00:00:18,680
my name is Colin McGill

00:00:13,549 --> 00:00:21,560
I am from formidable in Seattle and I am

00:00:18,680 --> 00:00:23,510
here in Slovakia

00:00:21,560 --> 00:00:26,390
thanks to reactive comp they reached out

00:00:23,510 --> 00:00:32,000
and invited us out and made it happen on

00:00:26,390 --> 00:00:35,920
a month or so so I'm pleased to be here

00:00:32,000 --> 00:00:38,810
I would like to dedicate this talk to

00:00:35,920 --> 00:00:41,150
three people that have most inspired my

00:00:38,810 --> 00:00:43,370
career and if you know these guys you'll

00:00:41,150 --> 00:00:45,440
see why throughout the talk one of them

00:00:43,370 --> 00:00:47,930
is bread Victor the other is Mike

00:00:45,440 --> 00:00:51,500
Bostock and the other is Shan Carter who

00:00:47,930 --> 00:00:53,239
did graphics to the New York Times so

00:00:51,500 --> 00:00:56,149
I'm going to give you a quick overview

00:00:53,239 --> 00:00:57,890
of what we're gonna be talking about in

00:00:56,149 --> 00:00:59,450
the next thirty minutes and then we're

00:00:57,890 --> 00:01:00,800
gonna dive into demos and I'm going to

00:00:59,450 --> 00:01:02,090
show you and then we're going to talk

00:01:00,800 --> 00:01:03,770
about the motivations and the reasons

00:01:02,090 --> 00:01:07,790
why and what this gets us and what's

00:01:03,770 --> 00:01:11,179
next so this was the most dangerous

00:01:07,790 --> 00:01:14,719
looking idea I could find I had an idea

00:01:11,179 --> 00:01:19,009
back in May and the idea was well you

00:01:14,719 --> 00:01:25,279
know if you just if you just use react

00:01:19,009 --> 00:01:27,799
for the for the data layer and the Dom

00:01:25,279 --> 00:01:32,319
layer you really only need d3s math and

00:01:27,799 --> 00:01:34,729
you can ditch all the rest of it and I

00:01:32,319 --> 00:01:36,020
started talking to some people and the

00:01:34,729 --> 00:01:37,700
question was what would you need to do

00:01:36,020 --> 00:01:44,959
to make that work I just need to rewrite

00:01:37,700 --> 00:01:46,939
d3 so that's what we've done that's what

00:01:44,959 --> 00:01:51,770
I'm here to talk about today and not all

00:01:46,939 --> 00:01:53,840
of it is done we've we've taken a number

00:01:51,770 --> 00:01:55,549
of strides down the path what I'm

00:01:53,840 --> 00:01:58,990
showing you today is pretty unstable so

00:01:55,549 --> 00:02:02,630
if you use it it's it's at your own risk

00:01:58,990 --> 00:02:04,669
but we've made advancements in the

00:02:02,630 --> 00:02:06,560
methodology enough that we can we know

00:02:04,669 --> 00:02:11,480
where we're going now and we're really

00:02:06,560 --> 00:02:14,210
excited about it so generally this is a

00:02:11,480 --> 00:02:17,710
very exciting idea to me because this is

00:02:14,210 --> 00:02:22,069
full circle what we've seen in

00:02:17,710 --> 00:02:24,170
the d3 ecosystem is a functional

00:02:22,069 --> 00:02:25,850
paradigm where every time the data

00:02:24,170 --> 00:02:26,959
changes you can read eight recompute

00:02:25,850 --> 00:02:29,390
Styles just like you can within

00:02:26,959 --> 00:02:32,920
lifestyles and react you can bind data

00:02:29,390 --> 00:02:36,650
you can remove add things to the DOM and

00:02:32,920 --> 00:02:39,170
d3 was a big inspiration and so now why

00:02:36,650 --> 00:02:41,390
shouldn't react which has implemented

00:02:39,170 --> 00:02:44,690
many of these ideas come back around and

00:02:41,390 --> 00:02:50,440
inspire d3 and change some of the some

00:02:44,690 --> 00:02:54,620
of the core of d3 so to make this work

00:02:50,440 --> 00:02:56,959
select all select data enter exit update

00:02:54,620 --> 00:02:58,730
everything that deals with data binding

00:02:56,959 --> 00:03:01,640
everything that deals with keeping the

00:02:58,730 --> 00:03:04,160
SVG current and everything that deals

00:03:01,640 --> 00:03:06,470
with touching the Dom goes away kind of

00:03:04,160 --> 00:03:10,280
like jQuery d3 replicated a lot of that

00:03:06,470 --> 00:03:13,550
Dom manipulation to code in a functional

00:03:10,280 --> 00:03:16,400
way and there were some rewrites needed

00:03:13,550 --> 00:03:20,989
so transition access and brush rely on

00:03:16,400 --> 00:03:23,269
these underlying API is that d3 exposes

00:03:20,989 --> 00:03:24,500
to interact with the Dom so those needed

00:03:23,269 --> 00:03:26,239
to be rewritten we've gotten

00:03:24,500 --> 00:03:29,590
transitioned and access those are done

00:03:26,239 --> 00:03:29,590
brushes still in progress

00:03:30,190 --> 00:03:38,720
d3 really pioneered interactive data

00:03:36,019 --> 00:03:39,920
visualization on the web it brought it

00:03:38,720 --> 00:03:42,980
and made it accessible how many people

00:03:39,920 --> 00:03:51,530
in the room have used d3 yeah that's

00:03:42,980 --> 00:03:54,530
probably probably 75% or more so the the

00:03:51,530 --> 00:03:58,010
legacy of d3 I think is multifaceted I

00:03:54,530 --> 00:04:01,130
think in one one way it inspired

00:03:58,010 --> 00:04:02,720
Sebastien in an interview I believe that

00:04:01,130 --> 00:04:04,910
maybe it was react Europe talked about

00:04:02,720 --> 00:04:10,370
being inspired by d3 and having worked a

00:04:04,910 --> 00:04:13,220
lot with d3 and I felt when I saw inline

00:04:10,370 --> 00:04:14,690
Styles and some of you know me from work

00:04:13,220 --> 00:04:16,609
with radium this is what I'm showing

00:04:14,690 --> 00:04:18,500
today is the next six months of

00:04:16,609 --> 00:04:20,870
open-source work from the same team that

00:04:18,500 --> 00:04:23,090
built radium and this is what we've done

00:04:20,870 --> 00:04:27,140
after that so do you have anybody to use

00:04:23,090 --> 00:04:29,770
radium awesome yeah 25 percent or so

00:04:27,140 --> 00:04:29,770
okay cool so

00:04:30,020 --> 00:04:39,050
so the the d3 has a number of advantages

00:04:37,069 --> 00:04:40,130
and one of the biggest legacies that I

00:04:39,050 --> 00:04:41,660
think will be enduring is that it

00:04:40,130 --> 00:04:42,800
brought academic layout algorithms on to

00:04:41,660 --> 00:04:45,349
the client things like Barnes had

00:04:42,800 --> 00:04:47,509
approximation implementations of force

00:04:45,349 --> 00:04:49,400
based constraints these are things that

00:04:47,509 --> 00:04:53,539
this is math that will stay and this is

00:04:49,400 --> 00:04:56,810
math that Victor ejs uses but the Dom

00:04:53,539 --> 00:04:59,090
model is not so we're going right to

00:04:56,810 --> 00:05:00,729
demos because I had I had the

00:04:59,090 --> 00:05:04,419
opportunity to do a dry run of this

00:05:00,729 --> 00:05:06,770
before I came here and the feedback was

00:05:04,419 --> 00:05:09,020
hey it would have been awesome if you

00:05:06,770 --> 00:05:10,940
just showed us all that at the front so

00:05:09,020 --> 00:05:13,789
I'm gonna walk you through the code from

00:05:10,940 --> 00:05:17,570
the beginning and show you what it means

00:05:13,789 --> 00:05:20,330
and then we will talk about the

00:05:17,570 --> 00:05:21,830
motivations so again this is updated two

00:05:20,330 --> 00:05:23,090
hours ago two hours ago an hour ago an

00:05:21,830 --> 00:05:24,650
hour ago this is under very active

00:05:23,090 --> 00:05:27,020
development by the team so you'll need

00:05:24,650 --> 00:05:28,099
to if you're going to install it you'll

00:05:27,020 --> 00:05:29,930
need to get on a pretty fast moving

00:05:28,099 --> 00:05:31,039
train I'm gonna be please excuse me I'm

00:05:29,930 --> 00:05:35,530
gonna be going back and forth between

00:05:31,039 --> 00:05:35,530
the presentation and a number of demos

00:05:36,310 --> 00:05:48,250
okay so here we go okay so this does not

00:05:46,310 --> 00:05:51,229
look like d3 this is a react component

00:05:48,250 --> 00:05:55,280
this is the most minimal implementation

00:05:51,229 --> 00:05:58,729
I could think of of it's a pie chart you

00:05:55,280 --> 00:06:03,469
instantiate it using a component I am if

00:05:58,729 --> 00:06:06,110
anyone here has high charts PTSD I'm

00:06:03,469 --> 00:06:08,810
intentionally trying to provoke you

00:06:06,110 --> 00:06:09,590
because obviously if you've seen things

00:06:08,810 --> 00:06:12,050
like this in the data visualization

00:06:09,590 --> 00:06:15,919
ecosystem they're usually not flexible

00:06:12,050 --> 00:06:17,300
they are usually declarative there's a

00:06:15,919 --> 00:06:19,340
whole bunch of code underneath of this

00:06:17,300 --> 00:06:21,199
that's a black box and such is not the

00:06:19,340 --> 00:06:26,960
case with react we can manipulate things

00:06:21,199 --> 00:06:29,180
with props and we can we can have full

00:06:26,960 --> 00:06:33,349
control over the data visualization even

00:06:29,180 --> 00:06:35,630
though we're going to back here the

00:06:33,349 --> 00:06:38,270
other one we can have full control over

00:06:35,630 --> 00:06:41,110
the data visualization even though we

00:06:38,270 --> 00:06:43,070
have high-level control of the API so

00:06:41,110 --> 00:06:45,350
where did this come from you can

00:06:43,070 --> 00:06:48,140
here we imported victory pie from

00:06:45,350 --> 00:06:52,900
victory pie well because it's a react

00:06:48,140 --> 00:06:56,600
component it's also a an NPM installable

00:06:52,900 --> 00:06:59,570
library which is different from the

00:06:56,600 --> 00:07:02,390
interactive data visualization system to

00:06:59,570 --> 00:07:03,920
date it's been held in justice mostly

00:07:02,390 --> 00:07:05,510
which are don't have a lot of the

00:07:03,920 --> 00:07:06,680
infrastructure that repos do and I'll

00:07:05,510 --> 00:07:10,760
talk a little bit more about that as we

00:07:06,680 --> 00:07:16,330
go on so this is the source I'm going to

00:07:10,760 --> 00:07:16,330
zoom in and show you just briefly that

00:07:16,840 --> 00:07:23,510
if you're familiar with d3 you know that

00:07:20,630 --> 00:07:25,280
d3 you don't have control over your SVG

00:07:23,510 --> 00:07:26,570
in a declarative way like this you have

00:07:25,280 --> 00:07:28,430
to run it through a chain of functions

00:07:26,570 --> 00:07:30,500
in victory that's no longer true you

00:07:28,430 --> 00:07:31,970
have your SVG back and one of the great

00:07:30,500 --> 00:07:33,590
advantages of this and actually this was

00:07:31,970 --> 00:07:35,750
the motivation behind the whole project

00:07:33,590 --> 00:07:37,400
was that it would make it more

00:07:35,750 --> 00:07:39,890
accessible for designers to get involved

00:07:37,400 --> 00:07:42,200
designers and people who are tasked with

00:07:39,890 --> 00:07:44,390
making charts that then need to become

00:07:42,200 --> 00:07:46,250
interactive typically we have to rip out

00:07:44,390 --> 00:07:47,840
a black box with high charts and then

00:07:46,250 --> 00:07:49,910
implement something customisable and

00:07:47,840 --> 00:07:51,620
that's the pain so if we can have a high

00:07:49,910 --> 00:07:55,300
level API and low level customization

00:07:51,620 --> 00:07:55,300
then we have the best of both worlds so

00:07:56,260 --> 00:08:01,940
we are really obsessed with dev UX and

00:07:59,260 --> 00:08:03,950
I'm going to walk you through this is

00:08:01,940 --> 00:08:05,630
the bread victor part I know that talk

00:08:03,950 --> 00:08:11,300
buy bread Victor inventing on principle

00:08:05,630 --> 00:08:12,980
was really purposed around finding your

00:08:11,300 --> 00:08:16,040
own principle but his principle was

00:08:12,980 --> 00:08:17,660
really really good so this is this is

00:08:16,040 --> 00:08:21,880
his principle but it's a really good

00:08:17,660 --> 00:08:25,150
principle so in this case this is

00:08:21,880 --> 00:08:27,790
component playground so this

00:08:25,150 --> 00:08:34,520
visualization has all of the

00:08:27,790 --> 00:08:37,160
infrastructure of a fully interactive

00:08:34,520 --> 00:08:39,169
Doc's ecosystem so designers when

00:08:37,160 --> 00:08:45,340
they're prototyping interactive data

00:08:39,169 --> 00:08:45,340
visualizations can play and generally

00:08:46,180 --> 00:08:51,050
manipulate the props of interactive data

00:08:48,470 --> 00:08:52,400
visualizations at the top level and then

00:08:51,050 --> 00:08:53,960
copy this and paste this into their

00:08:52,400 --> 00:08:55,720
project so for instance if we copy this

00:08:53,960 --> 00:09:01,209
out of here

00:08:55,720 --> 00:09:03,399
and paste this into here it's still

00:09:01,209 --> 00:09:05,259
rendering with default data it has a

00:09:03,399 --> 00:09:09,180
default prop inside for data if it's not

00:09:05,259 --> 00:09:09,180
overwritten and then go back to our demo

00:09:09,660 --> 00:09:15,399
you can see that that we just

00:09:12,149 --> 00:09:19,540
manipulated the code in our in in

00:09:15,399 --> 00:09:24,720
context and then we we pasted it into

00:09:19,540 --> 00:09:24,720
our project afterwards so

00:09:30,140 --> 00:09:33,980
all of these examples you can build them

00:09:32,030 --> 00:09:35,810
they are at that link on the lower right

00:09:33,980 --> 00:09:37,190
and to get this to this presentation if

00:09:35,810 --> 00:09:39,320
you don't want to type that in you can

00:09:37,190 --> 00:09:42,290
use the short link in the upper right so

00:09:39,320 --> 00:09:43,370
you can find find all of this source as

00:09:42,290 --> 00:09:44,840
well so I'm going to go through it

00:09:43,370 --> 00:09:49,880
pretty quickly since this is a 30 minute

00:09:44,840 --> 00:09:53,240
so victory pie - NPM I'm sorry victory -

00:09:49,880 --> 00:09:57,170
PI NPM you have access to NPM installing

00:09:53,240 --> 00:10:02,300
every every component victory PI repo

00:09:57,170 --> 00:10:05,270
means that you have all of the all of

00:10:02,300 --> 00:10:09,760
the infrastructure around it and then of

00:10:05,270 --> 00:10:16,700
course there is victory PI native

00:10:09,760 --> 00:10:18,730
because in this case and I'm sorry I

00:10:16,700 --> 00:10:23,270
can't demo it on an iPhone today but

00:10:18,730 --> 00:10:25,430
with the same API group shaped text you

00:10:23,270 --> 00:10:27,170
can use react art for react native to do

00:10:25,430 --> 00:10:30,020
interactive data visualizations with the

00:10:27,170 --> 00:10:32,510
same API on native and that's been a

00:10:30,020 --> 00:10:34,580
real challenge to date is to do

00:10:32,510 --> 00:10:36,380
interactive data visualization not in a

00:10:34,580 --> 00:10:38,960
webview in native but in native native

00:10:36,380 --> 00:10:49,250
the libraries for iOS or not nearly as

00:10:38,960 --> 00:10:52,370
fully fleshed out as the ones for 43 so

00:10:49,250 --> 00:10:55,210
the next example that I'm going to show

00:10:52,370 --> 00:10:55,210
you of this API

00:11:01,450 --> 00:11:04,110
all right

00:11:05,330 --> 00:11:11,240
the next example I'm going to show you

00:11:06,710 --> 00:11:15,470
this API is a slightly more complex

00:11:11,240 --> 00:11:18,380
composition example where multiple of

00:11:15,470 --> 00:11:21,380
these little primitives are composed

00:11:18,380 --> 00:11:24,820
into a higher level of a higher level

00:11:21,380 --> 00:11:32,240
data visualization API so in this case

00:11:24,820 --> 00:11:38,210
I'll show you the code for this so we

00:11:32,240 --> 00:11:40,310
have an SVG and we instantiate an axis

00:11:38,210 --> 00:11:41,960
component we instantiate an axis

00:11:40,310 --> 00:11:44,090
component we have Stan she ate an axis

00:11:41,960 --> 00:11:46,900
component right that's left bottom and

00:11:44,090 --> 00:11:51,200
right and then we instantiate a line and

00:11:46,900 --> 00:11:54,710
we instantiate another line and the

00:11:51,200 --> 00:11:57,410
lines take in functions because victory

00:11:54,710 --> 00:11:58,670
line as a component can take in a series

00:11:57,410 --> 00:12:00,080
of points and interpolate over them or

00:11:58,670 --> 00:12:02,870
it can take in a function and draw the

00:12:00,080 --> 00:12:04,730
function plot the function so each one

00:12:02,870 --> 00:12:09,550
of these components can be composed with

00:12:04,730 --> 00:12:12,500
the others to provide a an interface for

00:12:09,550 --> 00:12:15,320
building up data interactive data

00:12:12,500 --> 00:12:17,600
visualizations in a declarative way one

00:12:15,320 --> 00:12:20,690
of the further advantages of this is

00:12:17,600 --> 00:12:22,790
this implies a way of managing state in

00:12:20,690 --> 00:12:26,300
a way that we have not had in the d3

00:12:22,790 --> 00:12:29,750
ecosystem and so now all of those all of

00:12:26,300 --> 00:12:31,340
that aside I'm going to I'll come back

00:12:29,750 --> 00:12:33,620
to short at the end as a last demo

00:12:31,340 --> 00:12:37,070
because there's a lot to it I'm going to

00:12:33,620 --> 00:12:39,710
talk about the reasons why this why what

00:12:37,070 --> 00:12:42,410
I've just shown you is a step forward

00:12:39,710 --> 00:12:44,390
why it's different why it how it

00:12:42,410 --> 00:12:46,880
compares to the d3 ecosystem for data

00:12:44,390 --> 00:12:50,780
visualizations as its as its existed to

00:12:46,880 --> 00:12:52,160
date so first and the original

00:12:50,780 --> 00:12:54,790
motivation is that this is much more

00:12:52,160 --> 00:12:57,680
accessible to designers designers are

00:12:54,790 --> 00:13:00,290
inextricably involved in the data

00:12:57,680 --> 00:13:03,080
visualization creation process they can

00:13:00,290 --> 00:13:04,190
copy and paste out of interactive

00:13:03,080 --> 00:13:07,360
documentation and write into their

00:13:04,190 --> 00:13:09,110
projects not only that but be

00:13:07,360 --> 00:13:12,290
interactive Docs that I just showed you

00:13:09,110 --> 00:13:14,180
have a scope and you can pass fetch into

00:13:12,290 --> 00:13:17,840
the scope which means that will soon

00:13:14,180 --> 00:13:19,160
allow people to fetch their own data out

00:13:17,840 --> 00:13:21,350
of a gist so for instance

00:13:19,160 --> 00:13:23,149
take it just put it onto a rug yet take

00:13:21,350 --> 00:13:25,940
that and put that into fetch to take the

00:13:23,149 --> 00:13:28,850
URL and put it into a fetch poly film in

00:13:25,940 --> 00:13:31,009
the interactive Doc's fetch your data

00:13:28,850 --> 00:13:33,170
into the treemap interactive

00:13:31,009 --> 00:13:35,209
documentation and load it in the browser

00:13:33,170 --> 00:13:37,009
and then play around with the colors and

00:13:35,209 --> 00:13:38,660
you can hand that to you can hand some

00:13:37,009 --> 00:13:41,149
code to a designer and allow them to

00:13:38,660 --> 00:13:43,100
manipulate the interactive data

00:13:41,149 --> 00:13:45,560
visualization in place and that's that's

00:13:43,100 --> 00:13:48,800
an advantage that it's making it much

00:13:45,560 --> 00:13:51,800
more declarative for them but but unlike

00:13:48,800 --> 00:13:53,209
previous iterations of declarative data

00:13:51,800 --> 00:13:54,589
visualization frameworks and I can't

00:13:53,209 --> 00:13:56,149
emphasize this enough this has been

00:13:54,589 --> 00:13:58,550
something that has been tried over and

00:13:56,149 --> 00:14:00,500
over again well we'll just wrap d3 and

00:13:58,550 --> 00:14:02,660
we'll put in a config object and then

00:14:00,500 --> 00:14:04,100
the config object will configure d3 and

00:14:02,660 --> 00:14:06,050
d3 will run and put some stuff on to the

00:14:04,100 --> 00:14:08,240
page that's not what this is this is

00:14:06,050 --> 00:14:10,699
this does not sacrifice low-level

00:14:08,240 --> 00:14:14,089
control you still have all of the access

00:14:10,699 --> 00:14:15,529
to your styles and running styles as

00:14:14,089 --> 00:14:17,389
functions because you can pass them in

00:14:15,529 --> 00:14:20,449
at the top level and have them executed

00:14:17,389 --> 00:14:22,370
in the in the context down below in the

00:14:20,449 --> 00:14:26,889
as they're put on to an element with

00:14:22,370 --> 00:14:32,389
radium the next advantage is that SVG is

00:14:26,889 --> 00:14:33,560
markup loops are explicit so previously

00:14:32,389 --> 00:14:36,139
in d3

00:14:33,560 --> 00:14:38,000
you would have no dot append circle dot

00:14:36,139 --> 00:14:41,990
a tribute in victory

00:14:38,000 --> 00:14:44,689
you just have circle radius 4.5 right

00:14:41,990 --> 00:14:48,470
you don't have to construct you can see

00:14:44,689 --> 00:14:50,449
above node and below text see below text

00:14:48,470 --> 00:14:51,769
it's just SVG again you don't have to

00:14:50,449 --> 00:14:53,800
pass the SVG through a chain of

00:14:51,769 --> 00:14:56,209
functions and that that syntax made it

00:14:53,800 --> 00:14:57,829
inaccessible to designers and it was

00:14:56,209 --> 00:15:00,649
very difficult for us to get our

00:14:57,829 --> 00:15:02,329
designers to think inside of this

00:15:00,649 --> 00:15:06,889
chaining method of methodology but this

00:15:02,329 --> 00:15:09,740
is a this is a flatter kind of of syntax

00:15:06,889 --> 00:15:12,170
because it's just simply SVG the next

00:15:09,740 --> 00:15:13,910
thing is that data iteration iteration

00:15:12,170 --> 00:15:15,529
and data binding in d3 has always been a

00:15:13,910 --> 00:15:16,970
little bit confusing actually the API

00:15:15,529 --> 00:15:19,370
even though I've been using it for years

00:15:16,970 --> 00:15:23,779
always still still I have to wrap my

00:15:19,370 --> 00:15:27,439
head around the enter and data and in D

00:15:23,779 --> 00:15:30,610
it's rain victory it simply takes some

00:15:27,439 --> 00:15:30,610
take an array and

00:15:31,390 --> 00:15:37,870
map over it and instantiate some SVG

00:15:34,510 --> 00:15:43,089
that's it so dot data and dot enter

00:15:37,870 --> 00:15:45,420
become a map over an array that returns

00:15:43,089 --> 00:15:48,399
some SVG that gets put under the dom

00:15:45,420 --> 00:15:50,019
nothing more to it what why that's

00:15:48,399 --> 00:15:51,820
possible of course is that react is

00:15:50,019 --> 00:15:56,070
keeping track of the component lifecycle

00:15:51,820 --> 00:15:56,070
and all of the data binding that d3 was

00:15:56,670 --> 00:16:04,839
composability is something that d3 had

00:16:00,490 --> 00:16:07,240
it was a you could take a bit of SVG

00:16:04,839 --> 00:16:11,980
that was constructed in chaining and put

00:16:07,240 --> 00:16:14,680
it into the into your JS file and it

00:16:11,980 --> 00:16:16,420
would you would be composing the data

00:16:14,680 --> 00:16:18,850
visualization out of these change

00:16:16,420 --> 00:16:23,940
functions but I think that there's a

00:16:18,850 --> 00:16:27,910
nice Lego like web component II kind of

00:16:23,940 --> 00:16:30,339
syntax in victory in that you have react

00:16:27,910 --> 00:16:33,519
components which are able to be stacked

00:16:30,339 --> 00:16:34,810
on linearly and you can pass props into

00:16:33,519 --> 00:16:36,399
them and you can manage the state from a

00:16:34,810 --> 00:16:38,649
parent component and that's that's

00:16:36,399 --> 00:16:42,610
something that we've used already to

00:16:38,649 --> 00:16:45,550
great effect of course you also because

00:16:42,610 --> 00:16:47,170
it's react get radium and you can use

00:16:45,550 --> 00:16:49,089
your Styles as data and you can swap out

00:16:47,170 --> 00:16:51,279
themes for data visualizations as

00:16:49,089 --> 00:16:53,290
objects and pass those around

00:16:51,279 --> 00:16:58,209
asynchronously whatever you would do

00:16:53,290 --> 00:17:00,160
with an object and also there's a

00:16:58,209 --> 00:17:01,540
top-level API that we're exposing we're

00:17:00,160 --> 00:17:05,530
working on the syntax for this right now

00:17:01,540 --> 00:17:07,900
but basically you can pass in anyone

00:17:05,530 --> 00:17:09,819
well okay if you've used d3 you've seen

00:17:07,900 --> 00:17:12,790
the lambda syntax where you do

00:17:09,819 --> 00:17:14,530
attr or you do dot style and then you

00:17:12,790 --> 00:17:16,270
pass in an anonymous function and that

00:17:14,530 --> 00:17:18,790
that's called with every instance of the

00:17:16,270 --> 00:17:20,410
data so you don't lose that power with

00:17:18,790 --> 00:17:21,910
this because we're this is a little bit

00:17:20,410 --> 00:17:23,829
of magic this is one of the little bits

00:17:21,910 --> 00:17:24,760
of magic at the in the API for victory

00:17:23,829 --> 00:17:25,900
that when you're writing a victory

00:17:24,760 --> 00:17:28,209
component will have to take into account

00:17:25,900 --> 00:17:29,799
but you'll have to execute the Styles in

00:17:28,209 --> 00:17:31,360
the context by passing in this type

00:17:29,799 --> 00:17:32,770
props to them and that's something that

00:17:31,360 --> 00:17:33,730
will be documented later on so you have

00:17:32,770 --> 00:17:35,520
to worry too much about it but basically

00:17:33,730 --> 00:17:40,990
you have all of the expressive power of

00:17:35,520 --> 00:17:42,940
using the logic of j/s with styles that

00:17:40,990 --> 00:17:44,200
you did with d3 you don't lose

00:17:42,940 --> 00:17:45,640
composability and you don't lose

00:17:44,200 --> 00:17:49,330
functional styles

00:17:45,640 --> 00:17:52,210
in d3 state management was kind of a

00:17:49,330 --> 00:17:55,810
punt because there was this isn't

00:17:52,210 --> 00:17:57,580
necessarily bad it's simply a statement

00:17:55,810 --> 00:17:59,710
that well you're gonna do it in your app

00:17:57,580 --> 00:18:01,560
how you're going to do it so I'm not

00:17:59,710 --> 00:18:06,570
going to spend a bunch of time on it and

00:18:01,560 --> 00:18:15,430
nothing makes it really nothing makes it

00:18:06,570 --> 00:18:19,060
really so I'll see how do you say this

00:18:15,430 --> 00:18:22,120
is mutating the data popping children on

00:18:19,060 --> 00:18:26,940
and off of the original data structure

00:18:22,120 --> 00:18:26,940
to manage state as things change and the

00:18:26,970 --> 00:18:33,370
the place that we can go with react of

00:18:31,540 --> 00:18:34,840
course is to make everything a component

00:18:33,370 --> 00:18:36,730
and when we make everything a component

00:18:34,840 --> 00:18:38,590
we can manage state within the component

00:18:36,730 --> 00:18:40,450
so we can say that the tree and this is

00:18:38,590 --> 00:18:45,180
taken from a tree example we can open

00:18:40,450 --> 00:18:45,180
and close nodes on a tree and have a

00:18:46,800 --> 00:18:56,170
have a way of using the react component

00:18:52,480 --> 00:18:57,910
lifecycle where the state is managed by

00:18:56,170 --> 00:19:00,220
the component rather than managed in a

00:18:57,910 --> 00:19:01,840
random place in the app or just outside

00:19:00,220 --> 00:19:03,670
of data visualization means it means we

00:19:01,840 --> 00:19:06,070
can publish we can share code and

00:19:03,670 --> 00:19:08,170
publish components that have state in

00:19:06,070 --> 00:19:11,380
them we can publish a collapsible tree

00:19:08,170 --> 00:19:13,960
to NPM and that collapsible tree is

00:19:11,380 --> 00:19:17,770
reusable by other developers or anyone

00:19:13,960 --> 00:19:23,140
and the because it has a prop space

00:19:17,770 --> 00:19:24,880
syntax and it's a it's not going to leak

00:19:23,140 --> 00:19:27,730
into the rest of the code where this

00:19:24,880 --> 00:19:29,170
might mutate your data the next thing

00:19:27,730 --> 00:19:31,740
that you get is that you get repo

00:19:29,170 --> 00:19:35,140
infrastructure previously in d3

00:19:31,740 --> 00:19:37,420
there was a emphasis there has been

00:19:35,140 --> 00:19:39,850
there is an emphasis on gist and I think

00:19:37,420 --> 00:19:41,500
that repos are a much better abstraction

00:19:39,850 --> 00:19:43,690
for data visualizations because every

00:19:41,500 --> 00:19:46,540
issue every data visualization has

00:19:43,690 --> 00:19:49,420
issues has you can fork it you can file

00:19:46,540 --> 00:19:51,220
PRS against it and that means that data

00:19:49,420 --> 00:19:54,400
visualizations can be improved and added

00:19:51,220 --> 00:19:57,040
to there is a wonderful example of I

00:19:54,400 --> 00:19:58,110
think the problem in the gist ecosystem

00:19:57,040 --> 00:20:02,220
in that

00:19:58,110 --> 00:20:03,929
when someone adds a feature they

00:20:02,220 --> 00:20:06,149
effectively add a feature as a gist and

00:20:03,929 --> 00:20:07,769
then that doesn't get found there's a

00:20:06,149 --> 00:20:09,600
discovery problem in just because they

00:20:07,769 --> 00:20:12,299
just proliferate so there isn't a

00:20:09,600 --> 00:20:15,899
centralization of all of the data

00:20:12,299 --> 00:20:18,330
visualization features for line charts

00:20:15,899 --> 00:20:20,970
say there's a very interesting feature

00:20:18,330 --> 00:20:27,500
in one of the components where you have

00:20:20,970 --> 00:20:27,500
Voronoi in back of a I'll show you

00:20:34,480 --> 00:20:40,330
so this is a very interesting feature

00:20:36,070 --> 00:20:43,000
it's very it's very very smooth and the

00:20:40,330 --> 00:20:48,460
reason that the hover is so smooth is

00:20:43,000 --> 00:20:52,480
that this is backed by a brunet that is

00:20:48,460 --> 00:20:55,300
capturing the hover events so this is a

00:20:52,480 --> 00:20:58,030
feature that will not be captured in

00:20:55,300 --> 00:21:00,310
almost any other line graph but it's an

00:20:58,030 --> 00:21:02,080
excellent feature for hovering glitchy

00:21:00,310 --> 00:21:03,490
hovering over lines is something that

00:21:02,080 --> 00:21:06,850
plagues almost every interactive data

00:21:03,490 --> 00:21:09,340
visualization so why wouldn't we want to

00:21:06,850 --> 00:21:10,840
have that as an option on a line graph

00:21:09,340 --> 00:21:13,000
that we could just simply turn on or off

00:21:10,840 --> 00:21:15,730
smooth smooth hovering it's a it's a

00:21:13,000 --> 00:21:18,760
nice feature and if we have repose and

00:21:15,730 --> 00:21:20,680
and er's then we can improve the data

00:21:18,760 --> 00:21:23,350
visualization ecosystem collectively and

00:21:20,680 --> 00:21:25,030
that's something that is is lacking now

00:21:23,350 --> 00:21:34,090
I think in the in the ecosystem as a

00:21:25,030 --> 00:21:36,340
whole so the other thing that you get is

00:21:34,090 --> 00:21:40,570
you get build you get infrastructure and

00:21:36,340 --> 00:21:42,640
you get dissed you have lint files tests

00:21:40,570 --> 00:21:43,900
you have Travis you have babel and

00:21:42,640 --> 00:21:45,400
webpack hot reloading while you're

00:21:43,900 --> 00:21:46,600
building data visualizations while

00:21:45,400 --> 00:21:47,830
you're building these components you

00:21:46,600 --> 00:21:49,510
have a package that JSON with explicit

00:21:47,830 --> 00:21:51,190
dependencies readme and Docs

00:21:49,510 --> 00:21:53,350
you've minified disk which means you can

00:21:51,190 --> 00:21:55,780
simply see you can CDN a pie graph and

00:21:53,350 --> 00:21:57,750
pull it into your react app that's

00:21:55,780 --> 00:22:00,970
something that has been you haven't had

00:21:57,750 --> 00:22:02,530
so there was a problem with this which

00:22:00,970 --> 00:22:04,960
is that if you instantiate hundreds of

00:22:02,530 --> 00:22:07,090
components victory dash line victory -

00:22:04,960 --> 00:22:09,370
tree victory - tree map victory - cord

00:22:07,090 --> 00:22:11,230
victory - force on and on and on you end

00:22:09,370 --> 00:22:12,700
up with hundreds of components we'll

00:22:11,230 --> 00:22:14,650
have hundreds of components have all of

00:22:12,700 --> 00:22:18,970
that build infrastructure that's not

00:22:14,650 --> 00:22:21,550
that's not dry so one of the things that

00:22:18,970 --> 00:22:24,580
formidable has endeavored to solve is

00:22:21,550 --> 00:22:26,980
and this is something that soon you'll

00:22:24,580 --> 00:22:28,480
be able to soon you'll be able to use

00:22:26,980 --> 00:22:30,100
again all three of these things are

00:22:28,480 --> 00:22:33,040
under active development ecology which

00:22:30,100 --> 00:22:35,530
is those interactive Docs builder which

00:22:33,040 --> 00:22:38,020
is the solution to having hundreds of

00:22:35,530 --> 00:22:40,830
repos with with infrastructure and

00:22:38,020 --> 00:22:46,140
victory which is the data visualization

00:22:40,830 --> 00:22:46,140
library here builder is a a

00:22:46,560 --> 00:22:53,100
way of managing NPM scripts at a meta

00:22:50,760 --> 00:22:54,510
level so that you are abstracting your

00:22:53,100 --> 00:22:56,730
web pack config and your test

00:22:54,510 --> 00:23:00,150
infrastructure and your lint files into

00:22:56,730 --> 00:23:03,360
a kind of archetype we call it that then

00:23:00,150 --> 00:23:04,590
is applied through a CLI tool to all of

00:23:03,360 --> 00:23:07,010
these components and so if you are

00:23:04,590 --> 00:23:09,750
producing for instance at your company a

00:23:07,010 --> 00:23:10,890
UI library and the UI library has

00:23:09,750 --> 00:23:12,900
hundreds and hundreds of components

00:23:10,890 --> 00:23:14,430
you're going to have a problem in terms

00:23:12,900 --> 00:23:16,020
of build and test infrastructure on

00:23:14,430 --> 00:23:17,130
those if you want to change your es lint

00:23:16,020 --> 00:23:17,610
config you have to go do it in all of

00:23:17,130 --> 00:23:19,950
the files

00:23:17,610 --> 00:23:21,300
so having abstracting that into one file

00:23:19,950 --> 00:23:24,050
and then interacting with them through a

00:23:21,300 --> 00:23:30,240
CLI becomes desirable and that ecosystem

00:23:24,050 --> 00:23:32,760
benefits so victory animation is a is up

00:23:30,240 --> 00:23:35,450
on NPM and NPM is another huge advantage

00:23:32,760 --> 00:23:40,340
you can't npm install a gist and so

00:23:35,450 --> 00:23:42,900
having letting the letting future

00:23:40,340 --> 00:23:46,380
programmers on your project know hey I

00:23:42,900 --> 00:23:47,850
went out to this gist and I copied a

00:23:46,380 --> 00:23:49,410
bunch of code and I hacked it up so that

00:23:47,850 --> 00:23:51,270
it would work in my project and here's

00:23:49,410 --> 00:23:55,170
the pasted link in the code back to that

00:23:51,270 --> 00:23:57,630
gist is not nearly as helpful as I rely

00:23:55,170 --> 00:24:00,240
on this version of this tree map and

00:23:57,630 --> 00:24:01,920
it's install through NPM it's in the

00:24:00,240 --> 00:24:02,550
package of JSON that dependency is

00:24:01,920 --> 00:24:07,560
versioned

00:24:02,550 --> 00:24:09,540
and i'm going to i'm going to pin it if

00:24:07,560 --> 00:24:12,570
I need to it has it itself has

00:24:09,540 --> 00:24:14,940
dependencies that can be pinned the

00:24:12,570 --> 00:24:16,260
interactive Doc's themselves are a an

00:24:14,940 --> 00:24:18,150
advantage

00:24:16,260 --> 00:24:19,770
I'm going to show you if I have time in

00:24:18,150 --> 00:24:22,020
just a second I'm going to show you the

00:24:19,770 --> 00:24:24,210
how to get ecology going on your own

00:24:22,020 --> 00:24:25,730
project but ecology is where those

00:24:24,210 --> 00:24:32,310
interactive Doc's with the side by side

00:24:25,730 --> 00:24:35,580
editing in browser the react native is

00:24:32,310 --> 00:24:38,280
the last benefit and and that is that is

00:24:35,580 --> 00:24:39,990
the 11 that is the 11 reasons why why

00:24:38,280 --> 00:24:42,210
this is helpful there are a whole bunch

00:24:39,990 --> 00:24:43,650
of in the works and I could have filled

00:24:42,210 --> 00:24:47,430
filled in I left the open dot because

00:24:43,650 --> 00:24:49,200
it's just gonna keep going I think I've

00:24:47,430 --> 00:24:50,730
one thing to say about my experience

00:24:49,200 --> 00:24:53,430
with react over the past 10 months or so

00:24:50,730 --> 00:24:55,890
I think that if you zoom back and look

00:24:53,430 --> 00:24:57,840
at front-end as a as a whole the reason

00:24:55,890 --> 00:24:59,670
that we're doing we're able to do what

00:24:57,840 --> 00:25:00,090
we're doing with victory is because this

00:24:59,670 --> 00:25:01,470
is just

00:25:00,090 --> 00:25:03,090
we're building on top of functions on

00:25:01,470 --> 00:25:04,559
top of functions and this I think that

00:25:03,090 --> 00:25:06,270
we saw a lot of inflated expectations

00:25:04,559 --> 00:25:07,710
with what previous frameworks were going

00:25:06,270 --> 00:25:09,419
to be able to deliver and in what time

00:25:07,710 --> 00:25:10,919
and how they would work but a lot of

00:25:09,419 --> 00:25:12,270
them just hit the bat and move the bat

00:25:10,919 --> 00:25:14,309
around and had different compromising

00:25:12,270 --> 00:25:15,929
and I think that I think that the slope

00:25:14,309 --> 00:25:17,220
of enlightenment I think this is if you

00:25:15,929 --> 00:25:18,690
look at if you zoom back and look at the

00:25:17,220 --> 00:25:19,919
front-end architecture and ecosystem I

00:25:18,690 --> 00:25:22,200
think this is the slope of enlightenment

00:25:19,919 --> 00:25:24,600
this is this is the this is after the

00:25:22,200 --> 00:25:28,230
bad so that's that's my that's my take

00:25:24,600 --> 00:25:30,840
on it anyway but I this was built by

00:25:28,230 --> 00:25:32,970
formidable I build with formidable you'd

00:25:30,840 --> 00:25:34,890
like to work on this work with us work

00:25:32,970 --> 00:25:36,090
on any of this come talk to me find me

00:25:34,890 --> 00:25:39,470
around the conference I'll be here for

00:25:36,090 --> 00:25:42,990
to the rest of today and tomorrow and

00:25:39,470 --> 00:25:44,340
with that I'm going to take a couple

00:25:42,990 --> 00:25:46,710
questions I just want to show you one

00:25:44,340 --> 00:26:00,299
last one last thing of this which is

00:25:46,710 --> 00:26:04,260
that be ok here we go so so chart is a

00:26:00,299 --> 00:26:09,799
component of components and you can use

00:26:04,260 --> 00:26:15,240
chart to basically take care of the

00:26:09,799 --> 00:26:18,179
scatter line bar the the problems in

00:26:15,240 --> 00:26:19,649
data visualization that are repeating

00:26:18,179 --> 00:26:21,630
themselves on a daily basis and you

00:26:19,649 --> 00:26:24,529
don't want to have to create custom

00:26:21,630 --> 00:26:27,120
solutions every time but the other

00:26:24,529 --> 00:26:29,210
benefit of it is that if you look at the

00:26:27,120 --> 00:26:32,340
demos for this this is in demos for

00:26:29,210 --> 00:26:34,140
victory - chart there's also a number of

00:26:32,340 --> 00:26:38,880
wonderful examples of how to compose

00:26:34,140 --> 00:26:42,840
victory blocks together to victory

00:26:38,880 --> 00:26:45,630
components together to create

00:26:42,840 --> 00:26:50,010
interactive data visualizations so ok

00:26:45,630 --> 00:26:52,320
the right and ok I will stop there

00:26:50,010 --> 00:26:53,700
that was a there's a basically three

00:26:52,320 --> 00:26:55,140
independent things that I wanted to talk

00:26:53,700 --> 00:26:56,490
to you about and I got through it we

00:26:55,140 --> 00:26:58,799
have 54 seconds sorry

00:26:56,490 --> 00:27:00,929
so I'll take like a couple questions

00:26:58,799 --> 00:27:03,000
really quick if there are any and any

00:27:00,929 --> 00:27:09,059
you're going to flip the screen up and

00:27:03,000 --> 00:27:12,179
we all answer the ones at the top ok how

00:27:09,059 --> 00:27:13,820
do you handle interactivity like events

00:27:12,179 --> 00:27:19,539
great question so

00:27:13,820 --> 00:27:19,539
great so III mousemove is going to be a

00:27:21,220 --> 00:27:29,570
if you want to add a click handler that

00:27:26,539 --> 00:27:32,659
click handler will have to be put in as

00:27:29,570 --> 00:27:34,190
a prop so it's handled at the top level

00:27:32,659 --> 00:27:36,950
and any anything that you want to apply

00:27:34,190 --> 00:27:40,759
an event to you'll have to you'll have

00:27:36,950 --> 00:27:43,820
to probably right now okay like right

00:27:40,759 --> 00:27:47,330
now or later right now you would have to

00:27:43,820 --> 00:27:48,710
fork it right as soon the the API will

00:27:47,330 --> 00:27:51,739
expand enough that we'll have handled

00:27:48,710 --> 00:27:54,409
this but basically the the more custom

00:27:51,739 --> 00:27:56,359
that you need it the easier it will be

00:27:54,409 --> 00:27:57,440
to simply the easier it will be for you

00:27:56,359 --> 00:27:59,749
to simply fork it but then you're

00:27:57,440 --> 00:28:02,989
starting from an existing project and

00:27:59,749 --> 00:28:05,179
repo so let's see the next thing how

00:28:02,989 --> 00:28:08,539
does wrapping d3 inside of react effect

00:28:05,179 --> 00:28:10,809
okay performance great so we profiled

00:28:08,539 --> 00:28:13,519
react animation and we profiled this and

00:28:10,809 --> 00:28:14,989
we ran a bunch of functions we profiled

00:28:13,519 --> 00:28:18,279
all the functions we profiled the DOM

00:28:14,989 --> 00:28:22,099
and the bottleneck was all together now

00:28:18,279 --> 00:28:24,109
yeah the Dom yeah so yeah so the adding

00:28:22,099 --> 00:28:28,009
a bunch of adding a bunch of stuff on

00:28:24,109 --> 00:28:33,919
top yes it does affect things done you

00:28:28,009 --> 00:28:36,529
can finish your sentence okay so let's

00:28:33,919 --> 00:28:37,970
see how is wrapping burns performance

00:28:36,529 --> 00:28:40,090
the bottleneck is not react the

00:28:37,970 --> 00:28:43,659
bottlenecks is the DOM

00:28:40,090 --> 00:28:43,659
fantastic thank you so much

00:28:45,870 --> 00:28:47,930

YouTube URL: https://www.youtube.com/watch?v=n8TwLWsR40Y


