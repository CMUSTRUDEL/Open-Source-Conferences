Title: Form Validation made simple with React | Marcelka Hrda | Reactive 2015
Publication date: 2017-06-29
Playlist: ReactiveConf 2015
Description: 
	Creating validated forms is usually a troublesome experience. Most libraries used for building forms are complex and difficult to customize. As React plays nicely with functional approach, it can be easily used to create library for creating forms that is: a) simple and easy to understand b) customizable and extensible c) providing top user experience. I will present such library for building validated forms.

Marcelka is a Quantum Physicist turned React developer. Studied at Caltech. One of the founders of VacuumLabs
Captions: 
	00:00:06,290 --> 00:00:15,420
hello everyone I believe that most of

00:00:11,610 --> 00:00:18,930
you have already done something on forms

00:00:15,420 --> 00:00:22,140
or form validations and if you have

00:00:18,930 --> 00:00:24,930
tried to achieve top-level user

00:00:22,140 --> 00:00:28,410
experience I believe that you will agree

00:00:24,930 --> 00:00:30,810
with me that it's really hard I work in

00:00:28,410 --> 00:00:34,050
vacuum labs as a software developer I

00:00:30,810 --> 00:00:36,120
work on single page applications which

00:00:34,050 --> 00:00:40,140
means a lot of client-side code out of

00:00:36,120 --> 00:00:44,429
react and recently we realized with my

00:00:40,140 --> 00:00:47,579
colleagues that we can use react to do

00:00:44,429 --> 00:00:50,429
validations very nicely we can achieve

00:00:47,579 --> 00:00:54,359
great user experience and it doesn't

00:00:50,429 --> 00:00:57,859
cost us tons of code I'd like to share

00:00:54,359 --> 00:01:00,899
these findings with you in this talk

00:00:57,859 --> 00:01:03,989
first I will start with an example that

00:01:00,899 --> 00:01:06,000
I borrowed from baking J's if you don't

00:01:03,989 --> 00:01:09,079
know that's a reactive functional

00:01:06,000 --> 00:01:12,180
streaming library for JavaScript and

00:01:09,079 --> 00:01:17,009
they have a tutorial on how to make nice

00:01:12,180 --> 00:01:18,719
forms so they start with a very simple

00:01:17,009 --> 00:01:22,189
form that has two fields and the

00:01:18,719 --> 00:01:25,890
register button now what do we mean by

00:01:22,189 --> 00:01:28,140
great user experience first we would

00:01:25,890 --> 00:01:28,880
like to display the validity as soon as

00:01:28,140 --> 00:01:31,680
possible

00:01:28,880 --> 00:01:35,359
however not while the user is still

00:01:31,680 --> 00:01:38,399
typing because that's irritating and

00:01:35,359 --> 00:01:40,740
only after the field was touched already

00:01:38,399 --> 00:01:42,659
because it's kind of unfair I opened the

00:01:40,740 --> 00:01:44,399
form and there are already some errors I

00:01:42,659 --> 00:01:49,799
have I didn't have a chance to do

00:01:44,399 --> 00:01:51,509
something about it so that's it next we

00:01:49,799 --> 00:01:54,899
want to handle async validations

00:01:51,509 --> 00:01:56,520
properly this means that if I send a

00:01:54,899 --> 00:01:58,530
request to a server to validate

00:01:56,520 --> 00:02:01,530
something and the response isn't back

00:01:58,530 --> 00:02:05,429
yet I want to show that the validation

00:02:01,530 --> 00:02:07,920
is in progress and we want the register

00:02:05,429 --> 00:02:12,590
button to reflect the validity of the

00:02:07,920 --> 00:02:16,019
form so when the guys from baking JS

00:02:12,590 --> 00:02:17,760
tutorial took a requirement similar to

00:02:16,019 --> 00:02:22,060
this

00:02:17,760 --> 00:02:25,840
analyzed the form states and the evens

00:02:22,060 --> 00:02:28,590
that may happen when user interacts with

00:02:25,840 --> 00:02:32,080
the form they ended up with the diagram

00:02:28,590 --> 00:02:34,540
that is here which in my opinion is

00:02:32,080 --> 00:02:35,440
quite complicated and big for a simple

00:02:34,540 --> 00:02:40,120
form like that

00:02:35,440 --> 00:02:43,600
now if you imagine that in real life you

00:02:40,120 --> 00:02:46,090
are supposed to do much bigger forms

00:02:43,600 --> 00:02:50,620
that are more complex then if you would

00:02:46,090 --> 00:02:52,870
like to achieve top user experience as I

00:02:50,620 --> 00:02:56,050
was talking about before

00:02:52,870 --> 00:03:01,660
you'd end up feeling like this I I

00:02:56,050 --> 00:03:05,680
suppose now what is usually done is

00:03:01,660 --> 00:03:08,020
compromising on the user experience the

00:03:05,680 --> 00:03:12,070
forms are not so fancy and they are not

00:03:08,020 --> 00:03:16,959
so they don't respond so well to what

00:03:12,070 --> 00:03:19,690
you are doing but with react this can

00:03:16,959 --> 00:03:23,290
this can be differently we can achieve

00:03:19,690 --> 00:03:27,910
great user experience and the code can

00:03:23,290 --> 00:03:30,880
be still nice simple and functional we

00:03:27,910 --> 00:03:33,040
wrote a validation library that does

00:03:30,880 --> 00:03:37,420
this that helps you do validation nicely

00:03:33,040 --> 00:03:39,340
it's on github it's here it's there is

00:03:37,420 --> 00:03:41,110
still some polishing going on but it's

00:03:39,340 --> 00:03:43,900
pretty much ready we are already using

00:03:41,110 --> 00:03:46,360
in it our in our projects you are free

00:03:43,900 --> 00:03:49,329
to use it it's open-source and now I

00:03:46,360 --> 00:03:51,430
would like to show you the library how

00:03:49,329 --> 00:03:55,590
it works and what you can get by using

00:03:51,430 --> 00:03:59,890
it first let's look at the requirement

00:03:55,590 --> 00:04:02,079
once again there are some more so as I

00:03:59,890 --> 00:04:04,060
said before we would like to display the

00:04:02,079 --> 00:04:07,180
validation result as soon as possible

00:04:04,060 --> 00:04:09,370
but not wild user is typing and only

00:04:07,180 --> 00:04:11,170
after the field was touched and this

00:04:09,370 --> 00:04:15,370
means we would like to start the

00:04:11,170 --> 00:04:17,140
validation right away even if you don't

00:04:15,370 --> 00:04:19,120
want to display it right away

00:04:17,140 --> 00:04:22,600
we would like to have it prepared so

00:04:19,120 --> 00:04:25,120
it's there when we need it then we would

00:04:22,600 --> 00:04:26,380
like to handle async validations when

00:04:25,120 --> 00:04:29,900
they are in progress we'd like to

00:04:26,380 --> 00:04:32,270
indicate it then we'd like some

00:04:29,900 --> 00:04:35,449
button or other UI elements to reflect

00:04:32,270 --> 00:04:38,090
the validity of the form and lastly we'd

00:04:35,449 --> 00:04:41,600
like to validate multiple related fields

00:04:38,090 --> 00:04:45,020
this is often not easy to achieve with

00:04:41,600 --> 00:04:47,960
form validation libraries also would

00:04:45,020 --> 00:04:52,100
like to of course we would like to avoid

00:04:47,960 --> 00:04:54,919
common bugs such as race conditions when

00:04:52,100 --> 00:04:56,810
you send when you type quickly and you

00:04:54,919 --> 00:04:58,250
send many requests to server and the

00:04:56,810 --> 00:05:00,710
validation responses come in different

00:04:58,250 --> 00:05:03,440
order you might end up with the wrong

00:05:00,710 --> 00:05:06,500
validation result so this is something

00:05:03,440 --> 00:05:09,590
we also want to handle now let's look at

00:05:06,500 --> 00:05:12,820
the code this is how the validation is

00:05:09,590 --> 00:05:17,930
used this is a piece of a render method

00:05:12,820 --> 00:05:20,330
here if you want the validation to

00:05:17,930 --> 00:05:22,789
happen you need to include a validation

00:05:20,330 --> 00:05:25,039
component within the render method of

00:05:22,789 --> 00:05:29,720
your form such as this one this is

00:05:25,039 --> 00:05:33,080
validation for username and this

00:05:29,720 --> 00:05:35,990
validation contains a set of rules this

00:05:33,080 --> 00:05:37,849
is one of the rules we have a value that

00:05:35,990 --> 00:05:40,130
we are validating and we want this value

00:05:37,849 --> 00:05:44,330
to have length of at least six

00:05:40,130 --> 00:05:49,400
characters and this value is got here

00:05:44,330 --> 00:05:51,729
from the state apart from the rules the

00:05:49,400 --> 00:05:54,680
validation component also contains a

00:05:51,729 --> 00:05:57,110
handler which you are supposed to

00:05:54,680 --> 00:05:59,330
provide and this handler is called

00:05:57,110 --> 00:06:02,690
whenever the validation library has

00:05:59,330 --> 00:06:05,000
something to tell you for example you

00:06:02,690 --> 00:06:09,860
see here it can give you a validation

00:06:05,000 --> 00:06:14,330
result and it can tell you to show or by

00:06:09,860 --> 00:06:16,430
hi to the validation this handler will

00:06:14,330 --> 00:06:18,979
typically look something like take the

00:06:16,430 --> 00:06:21,169
validation result and save it to the

00:06:18,979 --> 00:06:23,870
state of the component or dispatch it

00:06:21,169 --> 00:06:26,539
and save it to your upstate or something

00:06:23,870 --> 00:06:29,479
like this but we are flexible on this

00:06:26,539 --> 00:06:37,880
you can use it as you like in your

00:06:29,479 --> 00:06:41,210
application now last thing maybe you're

00:06:37,880 --> 00:06:43,220
interested in one thing how we are

00:06:41,210 --> 00:06:45,800
really validating the you

00:06:43,220 --> 00:06:49,010
name input because the validation

00:06:45,800 --> 00:06:52,040
doesn't really contain any input they

00:06:49,010 --> 00:06:54,350
are linked via the component state when

00:06:52,040 --> 00:06:56,870
I type into the input the unchanged

00:06:54,350 --> 00:06:59,630
method saves the input value to the

00:06:56,870 --> 00:07:03,650
state here and then the validation

00:06:59,630 --> 00:07:05,720
component extracts the value from the

00:07:03,650 --> 00:07:09,260
state and validates it so they are

00:07:05,720 --> 00:07:13,550
linked via component State let us now

00:07:09,260 --> 00:07:16,150
look at an example I made a simple form

00:07:13,550 --> 00:07:23,930
here email password and repeat password

00:07:16,150 --> 00:07:33,220
so let us type in something invalid well

00:07:23,930 --> 00:07:38,720
what did I expect right to innovate okay

00:07:33,220 --> 00:07:41,560
now let us enter some password hmm too

00:07:38,720 --> 00:07:44,180
short I was lazy

00:07:41,560 --> 00:07:47,960
now it should come to contain at least

00:07:44,180 --> 00:07:50,320
one digit okay and it's valid now I

00:07:47,960 --> 00:07:54,770
repeat the password

00:07:50,320 --> 00:07:55,580
it doesn't match so now it's good now

00:07:54,770 --> 00:07:57,770
the form is valid

00:07:55,580 --> 00:08:01,810
note that the register button was

00:07:57,770 --> 00:08:05,840
enabled only after all the fields were

00:08:01,810 --> 00:08:09,380
valid if I delete piece of this then is

00:08:05,840 --> 00:08:14,990
disabled if I edit back it's enabled

00:08:09,380 --> 00:08:18,770
again okay now I reload it to get it

00:08:14,990 --> 00:08:21,460
fresh again and so you can see how it

00:08:18,770 --> 00:08:25,190
works behind the scenes I made

00:08:21,460 --> 00:08:28,010
validation for this email input special

00:08:25,190 --> 00:08:30,410
the validation handler whenever it is

00:08:28,010 --> 00:08:33,349
called it locks the arguments with which

00:08:30,410 --> 00:08:36,740
it was called here we can see that it

00:08:33,349 --> 00:08:41,599
has been already called once and we have

00:08:36,740 --> 00:08:43,969
been told that the input isn't valid the

00:08:41,599 --> 00:08:46,339
value there isn't valid because the

00:08:43,969 --> 00:08:48,350
field is required however we do not show

00:08:46,339 --> 00:08:50,420
the validation because it was not

00:08:48,350 --> 00:08:55,940
touched yet the user didn't change the

00:08:50,420 --> 00:09:00,790
field so far let us start typing

00:08:55,940 --> 00:09:03,590
okay now I entered two letters it goes

00:09:00,790 --> 00:09:07,160
bottom to top this was the second

00:09:03,590 --> 00:09:09,440
argument so I got empty validation

00:09:07,160 --> 00:09:14,270
result which means that we don't know

00:09:09,440 --> 00:09:16,040
yet whether it's valid or not and I was

00:09:14,270 --> 00:09:20,840
told to hide the validation because the

00:09:16,040 --> 00:09:22,760
user is typing then I got this message

00:09:20,840 --> 00:09:25,340
is not a valid email because the

00:09:22,760 --> 00:09:29,540
validation finished again I type type

00:09:25,340 --> 00:09:31,730
the second letter here I got show

00:09:29,540 --> 00:09:35,990
validation to be false again because I

00:09:31,730 --> 00:09:40,070
was typing again invalid email and

00:09:35,990 --> 00:09:43,250
lastly after I stopped typing I was told

00:09:40,070 --> 00:09:46,370
to show the validation now so that you

00:09:43,250 --> 00:09:49,340
can observe this more closely I can slow

00:09:46,370 --> 00:09:52,460
down the time a little bit this is the

00:09:49,340 --> 00:09:55,250
typing paste this is this says how long

00:09:52,460 --> 00:09:56,540
I have to stop typing for so that the

00:09:55,250 --> 00:09:59,270
validation will appear

00:09:56,540 --> 00:10:02,690
I can change it for example to 10

00:09:59,270 --> 00:10:05,060
seconds now the validation will appear

00:10:02,690 --> 00:10:09,110
only after I stopped typing for 10

00:10:05,060 --> 00:10:12,170
seconds also I have this second option

00:10:09,110 --> 00:10:14,870
here which says I have an async

00:10:12,170 --> 00:10:19,190
validation on this email and this is the

00:10:14,870 --> 00:10:21,040
duration of the a single agent so set it

00:10:19,190 --> 00:10:26,410
per second

00:10:21,040 --> 00:10:26,410
now I start typing

00:10:28,670 --> 00:10:36,110
and the validation isn't here because

00:10:33,190 --> 00:10:38,630
I'm still kind of typing for the next 10

00:10:36,110 --> 00:10:42,680
seconds but in fact it is in progress

00:10:38,630 --> 00:10:47,779
and it's going to be performed and now

00:10:42,680 --> 00:10:49,160
after two seconds it was here so even if

00:10:47,779 --> 00:10:51,860
it takes 12 seconds

00:10:49,160 --> 00:10:55,880
it was started right after I stopped

00:10:51,860 --> 00:11:01,000
typing and then it was ready as fast as

00:10:55,880 --> 00:11:01,000
it could be okay

00:11:01,180 --> 00:11:10,970
now we'll just go back here if you're

00:11:05,660 --> 00:11:14,480
interested the email validations were

00:11:10,970 --> 00:11:16,339
like this here first there was it was

00:11:14,480 --> 00:11:18,680
checked whether it's empty or not then

00:11:16,339 --> 00:11:20,810
whether it's an email and lastly when

00:11:18,680 --> 00:11:24,260
these two sync validations were

00:11:20,810 --> 00:11:26,450
completed there was this long validation

00:11:24,260 --> 00:11:31,010
it's a mocked validation that takes the

00:11:26,450 --> 00:11:34,010
time provided note that if you order the

00:11:31,010 --> 00:11:37,399
rules like year it will be efficient

00:11:34,010 --> 00:11:39,410
because when you put the sync

00:11:37,399 --> 00:11:41,510
validations in the front the async

00:11:39,410 --> 00:11:46,820
validations want to be even cold so you

00:11:41,510 --> 00:11:50,750
can save server resources this way now

00:11:46,820 --> 00:11:54,920
I'd like to sum up the key features that

00:11:50,750 --> 00:11:57,170
this validation library has first you

00:11:54,920 --> 00:11:59,449
are completely in charge of how the

00:11:57,170 --> 00:12:01,880
error is displayed when it is displayed

00:11:59,449 --> 00:12:08,810
where is the well is it displayed and so

00:12:01,880 --> 00:12:11,060
on what it means for example here this

00:12:08,810 --> 00:12:13,490
handler this is the function that is

00:12:11,060 --> 00:12:15,320
called by the validation library it only

00:12:13,490 --> 00:12:17,120
gives you data it only gives you the

00:12:15,320 --> 00:12:19,699
validation result and whether to show

00:12:17,120 --> 00:12:23,269
the validation or not but it isn't

00:12:19,699 --> 00:12:26,720
opinionated on how you show it I can do

00:12:23,269 --> 00:12:28,579
it as I want here I use a class name

00:12:26,720 --> 00:12:31,490
that reflects the input validity and

00:12:28,579 --> 00:12:33,980
also I'm showing a message here note

00:12:31,490 --> 00:12:37,850
that the error message can be translated

00:12:33,980 --> 00:12:39,829
or modified or you can add something to

00:12:37,850 --> 00:12:41,600
it it's up to you we are very flexible

00:12:39,829 --> 00:12:46,589
on this

00:12:41,600 --> 00:12:48,720
also even though the validation library

00:12:46,589 --> 00:12:52,649
sends you this show validation feel

00:12:48,720 --> 00:12:55,529
value you can override it or you can use

00:12:52,649 --> 00:12:59,420
it and add something to it for example

00:12:55,529 --> 00:13:01,949
here we force Show validation on blur

00:12:59,420 --> 00:13:07,470
that's an additional feature I can show

00:13:01,949 --> 00:13:10,199
it in the example let us now set this to

00:13:07,470 --> 00:13:12,149
five seconds that means the validation

00:13:10,199 --> 00:13:14,639
will appear after five seconds if I stop

00:13:12,149 --> 00:13:15,480
typing and let's say this is zero it's

00:13:14,639 --> 00:13:24,329
fast now

00:13:15,480 --> 00:13:27,120
now I'll type something and I have to

00:13:24,329 --> 00:13:33,180
wait for five seconds because I stopped

00:13:27,120 --> 00:13:36,779
typing and if I do something like this

00:13:33,180 --> 00:13:41,600
I change focus I get the validation

00:13:36,779 --> 00:13:49,250
message instantly because of this here

00:13:41,600 --> 00:13:56,750
now you say this will be ten seconds

00:13:49,250 --> 00:14:00,029
then I start typing I change the focus

00:13:56,750 --> 00:14:02,370
the validation is still in progress it

00:14:00,029 --> 00:14:04,230
takes ten seconds so now we have to show

00:14:02,370 --> 00:14:06,269
that it's still in progress but it

00:14:04,230 --> 00:14:12,420
appeared right after I change the focus

00:14:06,269 --> 00:14:14,910
and it's valid okay the second important

00:14:12,420 --> 00:14:20,160
feature is that the validation isn't

00:14:14,910 --> 00:14:22,769
coupled with the Dom the validation

00:14:20,160 --> 00:14:28,470
component is here the input is here they

00:14:22,769 --> 00:14:31,620
are linked only via this state they are

00:14:28,470 --> 00:14:33,449
not linked directly and this is perfect

00:14:31,620 --> 00:14:37,649
because it doesn't have to be a simple

00:14:33,449 --> 00:14:40,679
input like this it can be real good

00:14:37,649 --> 00:14:42,990
shrub input or any other input or any

00:14:40,679 --> 00:14:45,240
other user component anything you want

00:14:42,990 --> 00:14:48,480
you just need to make sure that you save

00:14:45,240 --> 00:14:53,209
the value to the state therefore it's

00:14:48,480 --> 00:14:54,840
flexible on what UI components you use a

00:14:53,209 --> 00:14:57,150
nice in

00:14:54,840 --> 00:15:00,240
location of this is that we got multiple

00:14:57,150 --> 00:15:03,240
fields validations you just need to

00:15:00,240 --> 00:15:09,000
write a rule that takes two values like

00:15:03,240 --> 00:15:12,120
here or more values as you like now you

00:15:09,000 --> 00:15:14,610
might wonder how do you write a rule

00:15:12,120 --> 00:15:18,330
such as this one it looks to be a

00:15:14,610 --> 00:15:23,940
component but it's not in fact it is a

00:15:18,330 --> 00:15:26,790
simple function and for example for the

00:15:23,940 --> 00:15:29,760
our same case it looks like this it just

00:15:26,790 --> 00:15:33,720
compares the value 1 and value 2 and

00:15:29,760 --> 00:15:37,860
returns true or false if you want an

00:15:33,720 --> 00:15:39,510
async validation the rule looks very

00:15:37,860 --> 00:15:44,460
similar to this one you just need to

00:15:39,510 --> 00:15:49,620
return a promise with this as the value

00:15:44,460 --> 00:15:52,650
it will resolve to and since these are

00:15:49,620 --> 00:15:57,750
functions you can reuse them reuse them

00:15:52,650 --> 00:15:59,790
on your server as well ok that's it it's

00:15:57,750 --> 00:16:03,920
great thank you for your attention

00:15:59,790 --> 00:16:03,920
and I'm looking forward to the questions

00:16:13,399 --> 00:16:18,890
let's look at the question part fully

00:16:21,620 --> 00:16:36,240
change it for D questions hmm fantastic

00:16:33,209 --> 00:16:39,000
okay so let's do the old-school way like

00:16:36,240 --> 00:16:42,329
you know remember this from school

00:16:39,000 --> 00:16:53,510
okay one two fantastic there's a

00:16:42,329 --> 00:16:53,510
microphone somewhere Susy okay cool so

00:16:57,500 --> 00:17:03,390
hi thanks you had this example with the

00:17:01,380 --> 00:17:05,669
validation checking if two fields are

00:17:03,390 --> 00:17:08,220
the same and I'm wondering where this

00:17:05,669 --> 00:17:18,089
validation should go to both of the

00:17:08,220 --> 00:17:20,819
components or just so as I said it is

00:17:18,089 --> 00:17:23,250
not coupled with this input it is

00:17:20,819 --> 00:17:27,049
separate so you just need to put it

00:17:23,250 --> 00:17:31,020
anywhere in the render method and then

00:17:27,049 --> 00:17:34,169
the handler of that validation should

00:17:31,020 --> 00:17:37,200
set the result somewhere to your state

00:17:34,169 --> 00:17:39,210
that again up to you where you save it

00:17:37,200 --> 00:17:40,650
and then you can display it where you

00:17:39,210 --> 00:17:43,890
want you can display it next to both

00:17:40,650 --> 00:17:45,990
fields or next to one field or on some

00:17:43,890 --> 00:17:49,799
completely other place within the

00:17:45,990 --> 00:17:54,419
application the validation is

00:17:49,799 --> 00:17:55,970
independent from the inputs so okay

00:17:54,419 --> 00:18:01,650
thanks

00:17:55,970 --> 00:18:04,380
okay next question bear so I think a few

00:18:01,650 --> 00:18:07,350
people have had a go at form validation

00:18:04,380 --> 00:18:08,820
libraries for use with react and so have

00:18:07,350 --> 00:18:10,140
you had a chance to have a look at any

00:18:08,820 --> 00:18:11,850
of the others and can you give us a

00:18:10,140 --> 00:18:14,160
picture of what the lands the landscape

00:18:11,850 --> 00:18:15,600
looks like so I think my question here

00:18:14,160 --> 00:18:17,780
is quite similar to the second one up

00:18:15,600 --> 00:18:17,780
there

00:18:22,590 --> 00:18:28,230
the second one the pharmacy what just

00:18:26,650 --> 00:18:30,340
generally what an other form

00:18:28,230 --> 00:18:32,080
revalidation libraries for react looked

00:18:30,340 --> 00:18:35,680
like or what is the general story for

00:18:32,080 --> 00:18:38,560
form validation look like yeah we have

00:18:35,680 --> 00:18:40,410
researched before we have started

00:18:38,560 --> 00:18:43,690
working on this we have researched other

00:18:40,410 --> 00:18:48,070
validation libraries in the react or and

00:18:43,690 --> 00:18:51,150
before it even not in the react and each

00:18:48,070 --> 00:18:54,730
time we started investigated

00:18:51,150 --> 00:18:59,050
investigating it more deeply we weren't

00:18:54,730 --> 00:19:03,070
satisfied in the end and we realized

00:18:59,050 --> 00:19:05,770
that it is quite simple to to write such

00:19:03,070 --> 00:19:07,870
a library because we are reusing many

00:19:05,770 --> 00:19:12,310
features we are using streams from our

00:19:07,870 --> 00:19:15,880
ideas we are using react for this we are

00:19:12,310 --> 00:19:19,740
using validator just to validate to

00:19:15,880 --> 00:19:23,950
actually implement the rules and the

00:19:19,740 --> 00:19:29,500
core of the library has 150 lines I

00:19:23,950 --> 00:19:33,100
guess so it wasn't very much work and it

00:19:29,500 --> 00:19:35,980
gives us what we want and I'm not I

00:19:33,100 --> 00:19:39,640
don't personally know pharmacy maybe one

00:19:35,980 --> 00:19:42,010
of my colleagues does we have I haven't

00:19:39,640 --> 00:19:46,720
personally investigated most of these

00:19:42,010 --> 00:19:50,890
libraries ok ok we could go for

00:19:46,720 --> 00:19:52,600
questions from the with the mics ok we

00:19:50,890 --> 00:20:02,950
can go for the questions from from the

00:19:52,600 --> 00:20:04,690
sliders site so it's the first one the

00:20:02,950 --> 00:20:11,170
first one is when do we write our data

00:20:04,690 --> 00:20:15,400
to the store well we have this handler

00:20:11,170 --> 00:20:19,300
here and you can dispatch the value here

00:20:15,400 --> 00:20:23,800
and you will get to your upstate in that

00:20:19,300 --> 00:20:26,050
way that's it you are free to do what

00:20:23,800 --> 00:20:29,700
you want with the validation data so you

00:20:26,050 --> 00:20:29,700
can dispatch it

00:20:31,200 --> 00:20:38,799
and whether you should put their

00:20:34,990 --> 00:20:44,740
innovative values or no that's again up

00:20:38,799 --> 00:20:50,490
to you we are you can do it both ways as

00:20:44,740 --> 00:20:50,490
you like let's do two more questions

00:20:53,940 --> 00:20:59,880
what are the advantages of using react

00:20:56,530 --> 00:21:03,700
syntax well

00:20:59,880 --> 00:21:07,950
this validate here that is react

00:21:03,700 --> 00:21:09,780
component that's because we are using

00:21:07,950 --> 00:21:12,669
component wheel mount and unmount

00:21:09,780 --> 00:21:16,390
lifecycle methods for creating and

00:21:12,669 --> 00:21:18,730
destroying the streams and that's why we

00:21:16,390 --> 00:21:20,559
need to include at least some of this

00:21:18,730 --> 00:21:23,490
within the render method or it's

00:21:20,559 --> 00:21:27,159
pleasant this way to use it this way and

00:21:23,490 --> 00:21:29,590
since it is here also the rules it makes

00:21:27,159 --> 00:21:31,360
sense to put them here with the react

00:21:29,590 --> 00:21:35,370
syntax but it's up to you you could

00:21:31,360 --> 00:21:35,370
write them as functions if you want

00:21:40,169 --> 00:21:48,100
which one you want to choose they're all

00:21:44,110 --> 00:21:51,340
oh they're all number five okay I'll ask

00:21:48,100 --> 00:21:54,610
answer first the last one multiple

00:21:51,340 --> 00:21:56,530
fields at once yes that's exactly as I

00:21:54,610 --> 00:22:00,190
showed you here you can write a

00:21:56,530 --> 00:22:02,530
validation for example and today it is

00:22:00,190 --> 00:22:06,400
after the beginning date you will

00:22:02,530 --> 00:22:09,700
provide an today the beginning date and

00:22:06,400 --> 00:22:11,440
then the function the the body of the

00:22:09,700 --> 00:22:16,030
function it will check whether this is

00:22:11,440 --> 00:22:19,090
true and return the result like here and

00:22:16,030 --> 00:22:24,570
then you need to include this snippet of

00:22:19,090 --> 00:22:26,919
code did you change the slides please

00:22:24,570 --> 00:22:32,230
hello oh sorry sorry

00:22:26,919 --> 00:22:37,179
oh that's much better okay okay so you

00:22:32,230 --> 00:22:40,690
need to you just put one value here the

00:22:37,179 --> 00:22:43,550
start day the end date here and the

00:22:40,690 --> 00:22:47,179
function will be something as I said

00:22:43,550 --> 00:22:50,780
the dates are in correct order and you

00:22:47,179 --> 00:22:53,240
write the body of the function and this

00:22:50,780 --> 00:23:00,340
snippet of code needs to go somewhere in

00:22:53,240 --> 00:23:04,160
the render method and then you put some

00:23:00,340 --> 00:23:06,670
when you can display the validation in a

00:23:04,160 --> 00:23:10,550
way you like

00:23:06,670 --> 00:23:17,120
because inserting the validation piece

00:23:10,550 --> 00:23:20,030
of code here will make you it will cause

00:23:17,120 --> 00:23:21,950
that you will be notified when there is

00:23:20,030 --> 00:23:23,780
some validation result so you can then

00:23:21,950 --> 00:23:24,260
take the result and displayed as you

00:23:23,780 --> 00:23:27,470
like

00:23:24,260 --> 00:23:30,640
oh great thank you so much that was

00:23:27,470 --> 00:23:30,640

YouTube URL: https://www.youtube.com/watch?v=FqscLiODo5c


