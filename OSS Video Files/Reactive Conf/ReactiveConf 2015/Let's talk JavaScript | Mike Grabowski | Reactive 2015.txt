Title: Let's talk JavaScript | Mike Grabowski | Reactive 2015
Publication date: 2017-06-29
Playlist: ReactiveConf 2015
Description: 
	"The web is evolving out of the browser. With the rise of React Native for iOS, and the recently open sourced Android version, universal javascript is now about fully featured experiences across web, mobile devices and soon, it will be also about smart watches, TVs and beyond. 
Device fragmentation is about to explode and the need for write-once and run-everywhere is stronger than ever. The ability to maintain a single codebase of components and logic is currently a convenience but soon will be a necessity to keep up with the plethora of devices that our services will be accessed through. 
This talk explores these concepts and discusses the foundations of a developing a device-agnostic platform. By checking out various patterns and deployment techniques we are going to see how you can power all your devices by Javascript with confidence. Yes, even your washing machine!"

Mike is a Full-Stack Developer at Man+Moon bringing real-time experience to thousands of people with a help of Javascript.
Captions: 
	00:00:09,100 --> 00:00:14,299
hey guys so um I'd like to tell you

00:00:12,020 --> 00:00:16,820
today a little bit about functional you

00:00:14,299 --> 00:00:18,529
I some of you probably know it's a joke

00:00:16,820 --> 00:00:22,730
because you know the real talk is about

00:00:18,529 --> 00:00:24,590
JavaScript so let me introduce myself am

00:00:22,730 --> 00:00:27,439
I gonna work a company called melon moon

00:00:24,590 --> 00:00:31,099
um we kind of like ride multi-platform

00:00:27,439 --> 00:00:33,920
real time lapse in JavaScript my Twitter

00:00:31,099 --> 00:00:35,870
github handle is in the bottom right

00:00:33,920 --> 00:00:37,579
corner and if there is a like any native

00:00:35,870 --> 00:00:39,110
speakers in the audience that could kind

00:00:37,579 --> 00:00:43,579
of like help me with spelling this

00:00:39,110 --> 00:00:45,800
properly I'd appreciate kiss um yeah so

00:00:43,579 --> 00:00:47,960
I work with Daniel who was here on stage

00:00:45,800 --> 00:00:50,510
yesterday on that project called ashta

00:00:47,960 --> 00:00:55,489
right it's a def stock for developing

00:00:50,510 --> 00:00:57,199
reactors apps thank you thank you yes so

00:00:55,489 --> 00:00:59,449
it's like we recently added read acts

00:00:57,199 --> 00:01:01,370
and universal data structures um

00:00:59,449 --> 00:01:03,409
basically as you can see from the slide

00:01:01,370 --> 00:01:06,590
maybe we have just fixed the internal

00:01:03,409 --> 00:01:08,390
which is cool so you know basically I

00:01:06,590 --> 00:01:10,909
think users quite like it because of the

00:01:08,390 --> 00:01:12,740
number of stars obviously and I'm this I

00:01:10,909 --> 00:01:17,689
mean it's probably a fake but I still

00:01:12,740 --> 00:01:19,729
looks cool so okay today we're gonna

00:01:17,689 --> 00:01:21,530
basically talk about javascript and only

00:01:19,729 --> 00:01:23,869
javascript because you know the problem

00:01:21,530 --> 00:01:25,520
with deaths like today's today is they

00:01:23,869 --> 00:01:27,790
are highly opinionated meaning that you

00:01:25,520 --> 00:01:30,409
have to somehow I agree with the

00:01:27,790 --> 00:01:31,759
outdoors on certain set of features and

00:01:30,409 --> 00:01:34,969
patterns in order to take full advantage

00:01:31,759 --> 00:01:37,009
of what they has to offer so our goal

00:01:34,969 --> 00:01:39,710
today is to kind of get us to reflect

00:01:37,009 --> 00:01:41,750
how do we work with JavaScript and how

00:01:39,710 --> 00:01:43,899
do we develop reactor has applications

00:01:41,750 --> 00:01:47,600
so that we can target multiple platforms

00:01:43,899 --> 00:01:50,149
with a minimum effort and you know

00:01:47,600 --> 00:01:51,890
before we kind of move on that's a geo

00:01:50,149 --> 00:01:55,219
smiley by the way and in one of his

00:01:51,890 --> 00:01:56,450
books called JavaScript patterns the I

00:01:55,219 --> 00:01:59,149
strongly recommend reading if you

00:01:56,450 --> 00:02:00,859
haven't yet he said patterns are not

00:01:59,149 --> 00:02:02,149
supposed to just capture principles of

00:02:00,859 --> 00:02:04,250
strategies they need to capture

00:02:02,149 --> 00:02:06,770
solutions and I think that's super

00:02:04,250 --> 00:02:07,969
important nowadays because we tend to

00:02:06,770 --> 00:02:09,860
write a lot of abstractions for

00:02:07,969 --> 00:02:11,780
sometimes just for the sake of writing

00:02:09,860 --> 00:02:14,270
so we should kind of like nail down all

00:02:11,780 --> 00:02:17,840
the cases we have to handle before we

00:02:14,270 --> 00:02:19,430
will carry on to the next slides so now

00:02:17,840 --> 00:02:21,280
let's kind of like step back and think

00:02:19,430 --> 00:02:23,170
how we used to ride

00:02:21,280 --> 00:02:25,660
like mobile and web applications a

00:02:23,170 --> 00:02:27,730
couple of years ago before really react

00:02:25,660 --> 00:02:30,190
native we've been kind of like always

00:02:27,730 --> 00:02:32,800
building these applications separately

00:02:30,190 --> 00:02:34,690
in independent code bases so that we've

00:02:32,800 --> 00:02:37,720
been always kind of like writing Java

00:02:34,690 --> 00:02:40,420
for android objective-c or swift for iOS

00:02:37,720 --> 00:02:41,830
and obviously JS for a web and you know

00:02:40,420 --> 00:02:44,530
what we have noticed is that there is a

00:02:41,830 --> 00:02:46,150
like a lot of a lot of problems that we

00:02:44,530 --> 00:02:47,680
are dealing with we've been kind of like

00:02:46,150 --> 00:02:50,080
solving twice like fetching data

00:02:47,680 --> 00:02:51,850
validation all this kind of like crucial

00:02:50,080 --> 00:02:53,530
to our application look and feel

00:02:51,850 --> 00:02:55,510
features we've been solving multiple

00:02:53,530 --> 00:02:57,250
times on different platforms and if you

00:02:55,510 --> 00:02:59,860
will take a look what features are kind

00:02:57,250 --> 00:03:02,410
of like duplicated the rest can quite a

00:02:59,860 --> 00:03:04,570
lot of things to to and that's sure

00:03:02,410 --> 00:03:06,430
things like fetching data syncing user

00:03:04,570 --> 00:03:07,540
actions you know caching data locally

00:03:06,430 --> 00:03:09,459
all these things like we've been

00:03:07,540 --> 00:03:11,019
building multiple times and it's

00:03:09,459 --> 00:03:13,269
sometimes hard to get them right

00:03:11,019 --> 00:03:18,040
properly once never mind getting them

00:03:13,269 --> 00:03:20,350
right twice or three times so we kind of

00:03:18,040 --> 00:03:22,180
like have not only a bigger application

00:03:20,350 --> 00:03:23,739
to maintain and develop but also the

00:03:22,180 --> 00:03:26,290
costs you know of the entire development

00:03:23,739 --> 00:03:28,630
are twice or triple what they should and

00:03:26,290 --> 00:03:30,610
could be actually and what you ideally

00:03:28,630 --> 00:03:33,100
want is the kind of like guarantee that

00:03:30,610 --> 00:03:35,200
the application behaves consistently on

00:03:33,100 --> 00:03:37,540
different devices providing the same

00:03:35,200 --> 00:03:39,820
user experience and you know because we

00:03:37,540 --> 00:03:42,549
have the same set of because we have

00:03:39,820 --> 00:03:44,290
like different sense of engine different

00:03:42,549 --> 00:03:47,260
teams of Engineers when working on this

00:03:44,290 --> 00:03:49,299
application you know when they come to

00:03:47,260 --> 00:03:51,010
our thumb like edge cases or some

00:03:49,299 --> 00:03:52,359
problems they may have implement them

00:03:51,010 --> 00:03:54,690
differently which will cause some

00:03:52,359 --> 00:03:57,010
inconsistencies between these platforms

00:03:54,690 --> 00:03:58,359
and you know then react native came in

00:03:57,010 --> 00:04:00,190
and change the world basically by

00:03:58,359 --> 00:04:02,620
integrating iOS and Android into the

00:04:00,190 --> 00:04:06,130
same code so now we are now kind of able

00:04:02,620 --> 00:04:07,720
to share interfaces logic all that stuff

00:04:06,130 --> 00:04:10,359
between iOS and Android which is cool

00:04:07,720 --> 00:04:12,430
and that's the approach we also took in

00:04:10,359 --> 00:04:14,290
ashta for a couple of months because if

00:04:12,430 --> 00:04:15,850
you were following our development we

00:04:14,290 --> 00:04:18,310
used to have h the web and Esther

00:04:15,850 --> 00:04:20,019
negative two separate projects and we

00:04:18,310 --> 00:04:22,960
just basically copied and pasted all the

00:04:20,019 --> 00:04:24,520
stuff to a new project and you know if

00:04:22,960 --> 00:04:26,979
there is like a bug in react code

00:04:24,520 --> 00:04:28,810
everything is super simple because it's

00:04:26,979 --> 00:04:30,700
JavaScript and all you have to do is

00:04:28,810 --> 00:04:33,190
kind of answer a couple of questions

00:04:30,700 --> 00:04:34,590
like who wants the code basically

00:04:33,190 --> 00:04:36,000
because you don't know who

00:04:34,590 --> 00:04:37,740
created the code who is the outdoor

00:04:36,000 --> 00:04:40,460
weather you should kind of like fix it

00:04:37,740 --> 00:04:42,780
locally or push it to another repository

00:04:40,460 --> 00:04:44,880
does it break on other platforms we are

00:04:42,780 --> 00:04:47,250
not sure because you know you only a

00:04:44,880 --> 00:04:49,110
specific part of the app was it already

00:04:47,250 --> 00:04:51,270
fixed somewhere or is it a regression

00:04:49,110 --> 00:04:52,890
and you know these questions just add up

00:04:51,270 --> 00:04:54,810
as you keep product development and you

00:04:52,890 --> 00:05:00,810
know by the end of the day all you want

00:04:54,810 --> 00:05:02,970
to say is what so all right so we kind

00:05:00,810 --> 00:05:06,390
of like seen already two different takes

00:05:02,970 --> 00:05:08,070
on product development and what we are

00:05:06,390 --> 00:05:09,630
going to do now is we're gonna explore

00:05:08,070 --> 00:05:11,910
the third one which I personally like

00:05:09,630 --> 00:05:13,320
calling a stack of tomorrow but to be

00:05:11,910 --> 00:05:15,690
fair you know it's not really a stack of

00:05:13,320 --> 00:05:17,910
tomorrow it's actually a stack of today

00:05:15,690 --> 00:05:20,580
because you know the principles and

00:05:17,910 --> 00:05:21,960
decor patterns turns out there were they

00:05:20,580 --> 00:05:24,150
were already implemented by other

00:05:21,960 --> 00:05:26,520
companies like Facebook Dropbox Google a

00:05:24,150 --> 00:05:28,470
couple of years ago you know it's just

00:05:26,520 --> 00:05:29,940
thanks to the proper tooling now this is

00:05:28,470 --> 00:05:31,650
kind of like easy for us now to do

00:05:29,940 --> 00:05:33,210
because there is a J's there is very

00:05:31,650 --> 00:05:34,650
agnate if we don't have to handle like

00:05:33,210 --> 00:05:36,540
low level c code between these platforms

00:05:34,650 --> 00:05:39,240
because you know Jaya's is just easier

00:05:36,540 --> 00:05:40,680
to maintain in this specific case and

00:05:39,240 --> 00:05:42,660
we've been successfully able to

00:05:40,680 --> 00:05:44,430
integrate it into a couple of months ago

00:05:42,660 --> 00:05:46,710
and it's already available life for you

00:05:44,430 --> 00:05:48,210
to try out I mean we are still learning

00:05:46,710 --> 00:05:50,220
our edge cases and kind of like

00:05:48,210 --> 00:05:51,690
rewriting all this stuff but um we think

00:05:50,220 --> 00:05:53,760
it's kind of like stable enough so we

00:05:51,690 --> 00:05:56,970
did update to read me so I can recommend

00:05:53,760 --> 00:05:59,490
you trying this out so what are the

00:05:56,970 --> 00:06:01,200
problems we're gonna solve today well

00:05:59,490 --> 00:06:02,850
the first one is the code application as

00:06:01,200 --> 00:06:05,160
we have already seen it doesn't matter

00:06:02,850 --> 00:06:06,900
whether you're writing like this code

00:06:05,160 --> 00:06:08,640
again from scratch reinventing the wheel

00:06:06,900 --> 00:06:10,920
or just kind of like copying and pasting

00:06:08,640 --> 00:06:11,940
these things it just doesn't matter you

00:06:10,920 --> 00:06:13,230
know it's something you will fail

00:06:11,940 --> 00:06:16,200
shortly Edward when these

00:06:13,230 --> 00:06:17,880
inconsistencies are introduced the

00:06:16,200 --> 00:06:19,530
second one is lack of portability

00:06:17,880 --> 00:06:21,690
because by having the placated called

00:06:19,530 --> 00:06:23,370
logic you increase the effort of my

00:06:21,690 --> 00:06:25,950
attaining all these things and if there

00:06:23,370 --> 00:06:27,840
will be like an idea to target another

00:06:25,950 --> 00:06:29,340
platform like that stop it will be super

00:06:27,840 --> 00:06:32,610
hard for you because there is no clear

00:06:29,340 --> 00:06:34,350
way of writing these things they are

00:06:32,610 --> 00:06:36,210
also hard to maintain we seen these

00:06:34,350 --> 00:06:37,710
questions like who owns the code who

00:06:36,210 --> 00:06:40,220
were to push our tweaks this is quite

00:06:37,710 --> 00:06:42,120
tricky to do on their daily basis and

00:06:40,220 --> 00:06:45,060
the last thing is unresponsive

00:06:42,120 --> 00:06:46,500
development because you know we need to

00:06:45,060 --> 00:06:48,220
make sure the quality is marrying up

00:06:46,500 --> 00:06:49,870
separate projects we need to

00:06:48,220 --> 00:06:51,520
you know communicate the same ideas

00:06:49,870 --> 00:06:54,340
multiple times it just doesn't work

00:06:51,520 --> 00:06:56,140
because you know developing application

00:06:54,340 --> 00:06:57,610
for multiple platforms should be

00:06:56,140 --> 00:06:59,170
something fun and should be something

00:06:57,610 --> 00:07:01,360
you're excited about not just pissed off

00:06:59,170 --> 00:07:03,460
with the edge cases you know so that's

00:07:01,360 --> 00:07:05,650
why you have to have like a really good

00:07:03,460 --> 00:07:07,000
way of doing these things and we're

00:07:05,650 --> 00:07:09,250
going to see how we can approach this

00:07:07,000 --> 00:07:11,470
problem so what are we going to do about

00:07:09,250 --> 00:07:13,870
the code application you know we've been

00:07:11,470 --> 00:07:16,030
thinking with Ruth Daniel inertia for a

00:07:13,870 --> 00:07:18,430
couple of weeks how we can solve this

00:07:16,030 --> 00:07:20,260
problem and you know it turns out it's

00:07:18,430 --> 00:07:23,110
been already solved it's been already

00:07:20,260 --> 00:07:25,930
solved with C++ libraries shared between

00:07:23,110 --> 00:07:27,160
iOS adroit or desktop clients that's

00:07:25,930 --> 00:07:30,100
something group for example Microsoft

00:07:27,160 --> 00:07:31,870
was doing on dropbox so kind of like why

00:07:30,100 --> 00:07:35,050
not just apply these things again to our

00:07:31,870 --> 00:07:36,610
use case as you remember that's the two

00:07:35,050 --> 00:07:39,070
core basis stuff we've been discussing

00:07:36,610 --> 00:07:41,320
in the previous section and what we can

00:07:39,070 --> 00:07:44,380
do with it well we can start treating

00:07:41,320 --> 00:07:46,960
our applications like iOS Android web

00:07:44,380 --> 00:07:49,360
and desktop as first-class citizens and

00:07:46,960 --> 00:07:52,060
just revamp the code structure to a

00:07:49,360 --> 00:07:53,800
single color base and I'm you're

00:07:52,060 --> 00:07:55,090
probably just like you're probably

00:07:53,800 --> 00:07:56,620
thinking that you know this doesn't

00:07:55,090 --> 00:07:58,240
solve the problem but complicates things

00:07:56,620 --> 00:07:59,680
because you know there's gonna be a

00:07:58,240 --> 00:08:01,960
single code base a lot of you know edge

00:07:59,680 --> 00:08:03,490
cases and things to handle but with a

00:08:01,960 --> 00:08:06,820
proper tooling and proper organization

00:08:03,490 --> 00:08:08,800
this is quite easy to do so starting

00:08:06,820 --> 00:08:11,020
from now on our application logic is

00:08:08,800 --> 00:08:13,000
going to live in a single place and we

00:08:11,020 --> 00:08:15,550
gonna call it core and you know there

00:08:13,000 --> 00:08:18,400
are these two things called platforms

00:08:15,550 --> 00:08:20,290
react native and react and the platforms

00:08:18,400 --> 00:08:23,050
like an independent platform specific

00:08:20,290 --> 00:08:25,150
code located in our project they do not

00:08:23,050 --> 00:08:26,979
interact with each other we just reuse

00:08:25,150 --> 00:08:28,960
the application logic we have done and

00:08:26,979 --> 00:08:31,120
not even all of them because it's up to

00:08:28,960 --> 00:08:33,400
them what set of tools package managers

00:08:31,120 --> 00:08:34,630
you know and kind of like reducers

00:08:33,400 --> 00:08:37,330
they're gonna use and what's going to

00:08:34,630 --> 00:08:38,530
work best in their case so just to

00:08:37,330 --> 00:08:40,390
follow the slides they can have

00:08:38,530 --> 00:08:42,520
platform-specific logic custom

00:08:40,390 --> 00:08:46,350
components web only dev tools for

00:08:42,520 --> 00:08:49,240
example or some other API is and stuff

00:08:46,350 --> 00:08:52,150
and you know speaking structure wise

00:08:49,240 --> 00:08:54,310
this is how it can look like in real

00:08:52,150 --> 00:08:56,320
life there's like a package.json and a

00:08:54,310 --> 00:08:58,959
couple of high-level settings like for a

00:08:56,320 --> 00:09:01,110
little bubble there is the place where

00:08:58,959 --> 00:09:03,269
the curl lives like you lose and some UI

00:09:01,110 --> 00:09:05,519
there's also the folder platforms with

00:09:03,269 --> 00:09:07,890
web and mobile where your target is

00:09:05,519 --> 00:09:10,019
going to have their code and you know

00:09:07,890 --> 00:09:11,339
you may be probably wondering what are

00:09:10,019 --> 00:09:13,920
we going to use for these a two-layer

00:09:11,339 --> 00:09:16,200
and we've been kind of like trying to

00:09:13,920 --> 00:09:18,630
figure out the best way to do this it's

00:09:16,200 --> 00:09:21,029
not going to be anything functionally

00:09:18,630 --> 00:09:23,820
reactive at this time yet but we are

00:09:21,029 --> 00:09:25,170
going to go with red ox and this is the

00:09:23,820 --> 00:09:29,040
quote from yesterday by the way from

00:09:25,170 --> 00:09:31,320
twitter which is quite cool and somebody

00:09:29,040 --> 00:09:32,940
created a really really cool starter

00:09:31,320 --> 00:09:35,130
project which is called soundcloud and

00:09:32,940 --> 00:09:37,019
it's written in react native and he said

00:09:35,130 --> 00:09:38,880
like having read access the data layer

00:09:37,019 --> 00:09:41,430
it takes no effort to switch the view

00:09:38,880 --> 00:09:43,500
layer from don't to react native and you

00:09:41,430 --> 00:09:45,480
know it's actually quite true because if

00:09:43,500 --> 00:09:47,940
you will take a look how we how we done

00:09:45,480 --> 00:09:49,769
this in our project it's actually pretty

00:09:47,940 --> 00:09:52,860
simple all you have to do is you have to

00:09:49,769 --> 00:09:55,050
import the core configure cursed or

00:09:52,860 --> 00:09:57,060
function from your core and just kind of

00:09:55,050 --> 00:09:59,130
like call it when you are configuring

00:09:57,060 --> 00:10:01,290
your platform store and you are probably

00:09:59,130 --> 00:10:04,079
like why do we why do we call a function

00:10:01,290 --> 00:10:06,510
in this case well what if I told you it

00:10:04,079 --> 00:10:08,640
can accept some sorts of arguments like

00:10:06,510 --> 00:10:11,370
in this case as you can see you can pass

00:10:08,640 --> 00:10:13,380
it a platform-specific reducer or some

00:10:11,370 --> 00:10:15,209
dependencies we will see why the next

00:10:13,380 --> 00:10:17,130
slide little worse pretty

00:10:15,209 --> 00:10:18,930
straightforward I mean this kind of code

00:10:17,130 --> 00:10:20,850
is pretty likely probably to change and

00:10:18,930 --> 00:10:22,470
it's highly kind of like open yet it so

00:10:20,850 --> 00:10:24,630
if there are some other people that

00:10:22,470 --> 00:10:27,570
prefer more functional approaches or

00:10:24,630 --> 00:10:31,320
other stuff they can kind of like figure

00:10:27,570 --> 00:10:33,449
this out so as per the platform specific

00:10:31,320 --> 00:10:35,190
ap is this is a simple action creator

00:10:33,449 --> 00:10:37,949
from red ox which is called dragon and

00:10:35,190 --> 00:10:39,990
it returns a function we are using an

00:10:37,949 --> 00:10:41,699
edge tab a middleware called inject

00:10:39,990 --> 00:10:43,589
dependencies that Daniel was talking

00:10:41,699 --> 00:10:46,110
about yesterday and basically what it

00:10:43,589 --> 00:10:47,970
does it allows you to use it allows you

00:10:46,110 --> 00:10:50,310
to inject some services without

00:10:47,970 --> 00:10:52,470
requiring them so we can ride your

00:10:50,310 --> 00:10:54,329
actions in a cross-platform manner and

00:10:52,470 --> 00:10:56,339
then you can kind of define what fetch

00:10:54,329 --> 00:10:58,560
is going to be in web and for example in

00:10:56,339 --> 00:11:00,240
react native obviously in this example

00:10:58,560 --> 00:11:02,820
this doesn't matter that much because

00:11:00,240 --> 00:11:06,149
react native night if does have fetch

00:11:02,820 --> 00:11:08,190
but for example segment I 0 for web is

00:11:06,149 --> 00:11:09,810
ok but for react native it's quite cool

00:11:08,190 --> 00:11:11,880
to use the native library because it

00:11:09,810 --> 00:11:13,880
batches requests and generally optimizes

00:11:11,880 --> 00:11:16,680
the battery life

00:11:13,880 --> 00:11:19,320
the second thing is lack of portability

00:11:16,680 --> 00:11:21,300
you know in a smaller team like like my

00:11:19,320 --> 00:11:23,580
own it usually all starts with a farm

00:11:21,300 --> 00:11:26,400
with a single platform first approach

00:11:23,580 --> 00:11:27,930
approach like Android first or something

00:11:26,400 --> 00:11:30,960
like that and then we are in more

00:11:27,930 --> 00:11:32,220
targets as we grow or release MVP and

00:11:30,960 --> 00:11:33,960
you know this is important to keep in

00:11:32,220 --> 00:11:36,060
mind that you know the way we write our

00:11:33,960 --> 00:11:37,980
software should be future proof and

00:11:36,060 --> 00:11:41,010
allow adding new platforms with minimum

00:11:37,980 --> 00:11:42,870
effort so let's check it out and see how

00:11:41,010 --> 00:11:46,320
we can do this in this universal code

00:11:42,870 --> 00:11:48,960
base so here's here's the here's the

00:11:46,320 --> 00:11:50,130
diagram we've seen as you can see there

00:11:48,960 --> 00:11:53,280
is the application current these

00:11:50,130 --> 00:11:54,870
platforms so say we want to create a

00:11:53,280 --> 00:11:57,510
desktop app because we have just

00:11:54,870 --> 00:11:59,430
discovered electron or react native for

00:11:57,510 --> 00:12:01,980
serializing finally is finally in stable

00:11:59,430 --> 00:12:04,230
version on a side note there were a

00:12:01,980 --> 00:12:08,220
couple of questions how the reactant if

00:12:04,230 --> 00:12:10,770
TV OS development is going i have to say

00:12:08,220 --> 00:12:12,240
we are almost there but um you know if

00:12:10,770 --> 00:12:16,380
you will have any questions just kind of

00:12:12,240 --> 00:12:18,180
ask me later so it's kind of done I mean

00:12:16,380 --> 00:12:20,160
since all these platforms are kind of

00:12:18,180 --> 00:12:22,740
like independent from each other adding

00:12:20,160 --> 00:12:25,170
one it's just a matter of kind of this

00:12:22,740 --> 00:12:28,590
just clone install and start your

00:12:25,170 --> 00:12:30,270
project so the consensus is that you

00:12:28,590 --> 00:12:32,760
know it takes just seconds to reading a

00:12:30,270 --> 00:12:40,020
new target or an hour if you are using

00:12:32,760 --> 00:12:41,910
NPM free bottom so you know it serves on

00:12:40,020 --> 00:12:43,530
like there was somebody who said like

00:12:41,910 --> 00:12:45,690
your project is just a collection of

00:12:43,530 --> 00:12:48,510
stand-alone you I applications and

00:12:45,690 --> 00:12:51,750
nothing more and you know I have to

00:12:48,510 --> 00:12:57,330
agree with this a lot probably because

00:12:51,750 --> 00:13:00,270
it was me who said that bottom so okay

00:12:57,330 --> 00:13:02,130
I'm you know 25 minutes let's say for

00:13:00,270 --> 00:13:04,230
the talk is not enough actually to

00:13:02,130 --> 00:13:05,880
describe all these things because you

00:13:04,230 --> 00:13:08,760
know talking about code can take like

00:13:05,880 --> 00:13:11,190
days and weeks and I was thinking for a

00:13:08,760 --> 00:13:14,610
couple of days which should be the next

00:13:11,190 --> 00:13:16,590
topic we are going to talk about and I

00:13:14,610 --> 00:13:19,140
have discovered that really really cool

00:13:16,590 --> 00:13:20,850
article on medium by sarah cooper titled

00:13:19,140 --> 00:13:23,010
tent weeks to appear smart during

00:13:20,850 --> 00:13:26,349
meetings and you know guess what was the

00:13:23,010 --> 00:13:30,499
top highlight will this scale

00:13:26,349 --> 00:13:32,899
so that's gonna be another thing we're

00:13:30,499 --> 00:13:34,609
gonna discover it's actually a pretty

00:13:32,899 --> 00:13:36,439
good question because you know a single

00:13:34,609 --> 00:13:38,779
code base lots of platforms lots of

00:13:36,439 --> 00:13:42,169
dependencies this is something that can

00:13:38,779 --> 00:13:43,279
get messed pretty quickly and um you

00:13:42,169 --> 00:13:46,099
know this is this stuff is actually

00:13:43,279 --> 00:13:48,289
highly open yet because it's kind of

00:13:46,099 --> 00:13:50,509
like our specific use case so if you

00:13:48,289 --> 00:13:52,699
will find like some of these things are

00:13:50,509 --> 00:13:54,109
not applicable to you you can kind of

00:13:52,699 --> 00:13:56,029
like check out a sh ty because up to

00:13:54,109 --> 00:13:58,459
this point all these things are in ashta

00:13:56,029 --> 00:14:00,079
the rest of this thing's is going out to

00:13:58,459 --> 00:14:03,379
be in the project I'm going to share

00:14:00,079 --> 00:14:04,789
with you after the end of this talk so

00:14:03,379 --> 00:14:07,279
there is seems to be like two big issues

00:14:04,789 --> 00:14:09,589
with single code base actually at least

00:14:07,279 --> 00:14:11,269
in our use case the first one is

00:14:09,589 --> 00:14:12,919
dependency mass because you know like

00:14:11,269 --> 00:14:15,049
two three or four platforms England

00:14:12,919 --> 00:14:17,989
rapid like some people don't even get

00:14:15,049 --> 00:14:19,939
that and and he continues integration

00:14:17,989 --> 00:14:24,229
because test needs to be fast yet they

00:14:19,939 --> 00:14:25,789
need to cover all our platforms and the

00:14:24,229 --> 00:14:28,309
first approach that can work for you

00:14:25,789 --> 00:14:30,529
would be to have all dependencies in a

00:14:28,309 --> 00:14:32,779
single package Jason and this is good

00:14:30,529 --> 00:14:35,209
for like slow apps or applications that

00:14:32,779 --> 00:14:37,069
demonstrate use cases like 2000 BC and

00:14:35,209 --> 00:14:39,529
this is the approach that we have in

00:14:37,069 --> 00:14:41,239
Ashton but you know there are cases

00:14:39,529 --> 00:14:43,159
where it doesn't make sense like when

00:14:41,239 --> 00:14:44,689
you have five platforms you are growing

00:14:43,159 --> 00:14:47,509
you say you are planning to support

00:14:44,689 --> 00:14:50,659
other platforms there is no like reason

00:14:47,509 --> 00:14:54,229
to ship for example react router and

00:14:50,659 --> 00:14:57,019
react native side menu actually um so

00:14:54,229 --> 00:14:58,759
let's say them and I don't I don't know

00:14:57,019 --> 00:15:02,989
if anyone knows what's the result of

00:14:58,759 --> 00:15:05,209
this operation anyone couldn't tell me

00:15:02,989 --> 00:15:06,859
because because I can so I'm I was going

00:15:05,209 --> 00:15:08,179
to ask you because you know these are

00:15:06,859 --> 00:15:10,069
the sort of the confusion you're gonna

00:15:08,179 --> 00:15:13,599
get when you kind of like mix all these

00:15:10,069 --> 00:15:15,709
things up and you are like what so

00:15:13,599 --> 00:15:17,989
dependency ms you know the key problems

00:15:15,709 --> 00:15:20,269
we have here are too much it's shipped

00:15:17,989 --> 00:15:22,039
which is pretty like this I mean it's

00:15:20,269 --> 00:15:24,379
quite crucial to optimize our build

00:15:22,039 --> 00:15:26,929
times and deployment signs especially as

00:15:24,379 --> 00:15:29,059
our code bases grow and you know if

00:15:26,929 --> 00:15:31,549
Dropbox or Google having a single coded

00:15:29,059 --> 00:15:32,629
code base we're deploying everything

00:15:31,549 --> 00:15:35,899
everywhere it would have been an

00:15:32,629 --> 00:15:37,549
overkill it's super hard actually it's a

00:15:35,899 --> 00:15:38,910
reason about because you know imagine

00:15:37,549 --> 00:15:40,920
upgrading dependencies

00:15:38,910 --> 00:15:42,390
you can tell what things has changed

00:15:40,920 --> 00:15:44,520
because you don't know what platforms

00:15:42,390 --> 00:15:47,610
are using world and this is kind of like

00:15:44,520 --> 00:15:49,680
something I was you know accidentally

00:15:47,610 --> 00:15:52,200
discovered this yesterday with a couple

00:15:49,680 --> 00:15:54,210
of friends while having a beer because

00:15:52,200 --> 00:15:56,040
they were like they were like telling me

00:15:54,210 --> 00:15:58,080
that you know the NPM ecosystem is super

00:15:56,040 --> 00:15:59,850
hearts warcraft because you have so many

00:15:58,080 --> 00:16:02,880
dependencies that they change a lot and

00:15:59,850 --> 00:16:04,590
he was like yeah we've upgraded like 25

00:16:02,880 --> 00:16:06,960
dependencies because we were not doing

00:16:04,590 --> 00:16:10,140
this for half a year and he was like we

00:16:06,960 --> 00:16:12,030
had like maybe 50 use cases or something

00:16:10,140 --> 00:16:13,830
like that and they still were unable to

00:16:12,030 --> 00:16:15,090
cover all the edge cases because of some

00:16:13,830 --> 00:16:17,280
things because you know you usually

00:16:15,090 --> 00:16:18,570
think like okay does the dependency it

00:16:17,280 --> 00:16:21,300
surely work so I'm going to keep

00:16:18,570 --> 00:16:23,640
focusing on my logic so you can't be

00:16:21,300 --> 00:16:27,270
sure that you know some upgrades won't

00:16:23,640 --> 00:16:29,040
break your app so as I said these are

00:16:27,270 --> 00:16:31,290
the tricky upgrades bomb actually and we

00:16:29,040 --> 00:16:34,440
have bad you developer experience

00:16:31,290 --> 00:16:36,390
because you know when we are kind of

00:16:34,440 --> 00:16:38,610
installing the code we have like five

00:16:36,390 --> 00:16:40,380
teams for example and let's say my team

00:16:38,610 --> 00:16:42,900
is going to are gonna web because we

00:16:40,380 --> 00:16:45,090
have like okay my thing is going to work

00:16:42,900 --> 00:16:48,120
on iOS because we have max for instance

00:16:45,090 --> 00:16:50,040
but another team is going to work on web

00:16:48,120 --> 00:16:51,480
because they have windows and if we

00:16:50,040 --> 00:16:54,840
require to install all the platforms

00:16:51,480 --> 00:16:56,400
they will fail because you know mobile

00:16:54,840 --> 00:16:58,530
for example download some iOS

00:16:56,400 --> 00:17:01,500
dependencies which obviously doesn't

00:16:58,530 --> 00:17:03,810
work because of cocoa pods so what we

00:17:01,500 --> 00:17:06,090
can do is you know as we have set our

00:17:03,810 --> 00:17:08,940
platforms are first-class citizens so

00:17:06,090 --> 00:17:10,830
what we can do is we can use the best

00:17:08,940 --> 00:17:13,140
things they are equipped with and

00:17:10,830 --> 00:17:15,570
declare their dependencies in a clear

00:17:13,140 --> 00:17:18,750
declarative way so how we can do this

00:17:15,570 --> 00:17:22,350
well we can use NPM on both platforms

00:17:18,750 --> 00:17:24,300
for JS sort of stuff we can use cocoa

00:17:22,350 --> 00:17:26,850
pods on mobile obviously for native

00:17:24,300 --> 00:17:28,980
dependencies and for example web bug on

00:17:26,850 --> 00:17:32,610
web to handle sample processing and

00:17:28,980 --> 00:17:34,860
stuff and you know speaking structure

00:17:32,610 --> 00:17:36,630
wise these are just and other files in

00:17:34,860 --> 00:17:38,100
your platforms so we can easily

00:17:36,630 --> 00:17:40,260
integrate that this is kind of like

00:17:38,100 --> 00:17:42,270
clean and super explicit if you ever

00:17:40,260 --> 00:17:45,210
gonna have a require from your platform

00:17:42,270 --> 00:17:47,070
you are sure where to look for it you

00:17:45,210 --> 00:17:48,570
know the trade of is that in some cases

00:17:47,070 --> 00:17:51,030
you may end up having the same

00:17:48,570 --> 00:17:52,590
dependency in all these free packages

00:17:51,030 --> 00:17:55,260
like mobile web at the core

00:17:52,590 --> 00:17:57,720
let's say red X for example and this is

00:17:55,260 --> 00:18:00,659
this is like this is true actually but

00:17:57,720 --> 00:18:02,370
since they can coexist like I think it's

00:18:00,659 --> 00:18:04,049
worth you know doing this given the

00:18:02,370 --> 00:18:08,580
mates and ability and other gains you

00:18:04,049 --> 00:18:11,070
get because of this structure so that's

00:18:08,580 --> 00:18:14,220
solved now it's time for the continuous

00:18:11,070 --> 00:18:17,240
integration by the way how many of you

00:18:14,220 --> 00:18:21,779
guys kind of like use some sort of

00:18:17,240 --> 00:18:25,380
continuous integration tools oh pretty

00:18:21,779 --> 00:18:27,480
cool keep it up so yeah so we are

00:18:25,380 --> 00:18:29,490
probably kind of aware of how does the

00:18:27,480 --> 00:18:33,059
typical comet lifecycle looks like but

00:18:29,490 --> 00:18:34,980
I'm you know just check it out so first

00:18:33,059 --> 00:18:38,100
thing we do is after we commit our

00:18:34,980 --> 00:18:39,960
changes we're on test and you know in

00:18:38,100 --> 00:18:42,480
real life like if you have a couple of

00:18:39,960 --> 00:18:44,820
platforms it may take like a couple of

00:18:42,480 --> 00:18:47,789
minutes 15 minutes for example and if

00:18:44,820 --> 00:18:51,929
they fail well they have to run again

00:18:47,789 --> 00:18:54,149
and you just wasted like 15 minutes so

00:18:51,929 --> 00:18:56,580
okay after all things pass there is the

00:18:54,149 --> 00:19:00,270
build process and after all if all

00:18:56,580 --> 00:19:03,179
succeeds we are shipping the stuff so we

00:19:00,270 --> 00:19:04,950
have just wasted 15 minutes you know

00:19:03,179 --> 00:19:06,990
probably not an issue because we usually

00:19:04,950 --> 00:19:10,049
check out facebook or twitter so um

00:19:06,990 --> 00:19:12,179
that's a good thing but um you know

00:19:10,049 --> 00:19:14,600
let's let's think why did this happen

00:19:12,179 --> 00:19:17,730
actually because you know it turns out

00:19:14,600 --> 00:19:20,549
because of the fact that we have all the

00:19:17,730 --> 00:19:22,919
platforms in a single code base we have

00:19:20,549 --> 00:19:24,559
to run the unit tests and integration

00:19:22,919 --> 00:19:27,090
tests of all of them at the same time

00:19:24,559 --> 00:19:28,649
just sometimes pointless because if you

00:19:27,090 --> 00:19:30,210
change web or if you change mobile

00:19:28,649 --> 00:19:33,659
what's the point of running testing web

00:19:30,210 --> 00:19:34,770
and you know it turns out this is again

00:19:33,659 --> 00:19:36,510
not a new think this is actually

00:19:34,770 --> 00:19:38,940
something that people were doing for a

00:19:36,510 --> 00:19:40,950
couple of years there is for example a

00:19:38,940 --> 00:19:44,190
quote from somebody from facebook from

00:19:40,950 --> 00:19:45,840
the fa conference and they said we want

00:19:44,190 --> 00:19:47,730
our developers to get feedback as

00:19:45,840 --> 00:19:50,370
quickly as possible by running minimum

00:19:47,730 --> 00:19:52,830
amount of tests required and no I think

00:19:50,370 --> 00:19:54,720
we have to agree with this because you

00:19:52,830 --> 00:19:57,779
know waiting for tests to pass is a bad

00:19:54,720 --> 00:19:59,460
thing you know writing tests should be

00:19:57,779 --> 00:20:01,799
fun because you are kind of like show

00:19:59,460 --> 00:20:04,500
about the platform about the behavior of

00:20:01,799 --> 00:20:06,240
your code and if you are going your

00:20:04,500 --> 00:20:09,630
developers wait for like

00:20:06,240 --> 00:20:11,280
half an hour for the tests pass trying

00:20:09,630 --> 00:20:13,050
to get them to working test driven

00:20:11,280 --> 00:20:16,380
development manner is going to be hardly

00:20:13,050 --> 00:20:18,929
doable so what we are ideally looking

00:20:16,380 --> 00:20:22,290
for is the way to trigger our platform

00:20:18,929 --> 00:20:25,830
tasks based on the changes we were done

00:20:22,290 --> 00:20:29,100
so say for example if I don't know if we

00:20:25,830 --> 00:20:30,960
change web we only run tests in web if

00:20:29,100 --> 00:20:33,080
we change mobile we just know about but

00:20:30,960 --> 00:20:35,340
if we change color we test all of them

00:20:33,080 --> 00:20:37,290
and you know since they are completely

00:20:35,340 --> 00:20:40,380
independent from each other this is

00:20:37,290 --> 00:20:44,690
quite easy to do this is actually am a

00:20:40,380 --> 00:20:47,280
code snippet that we have in our project

00:20:44,690 --> 00:20:50,190
these are like helper scripts you can

00:20:47,280 --> 00:20:52,650
use to run some tasks they are written

00:20:50,190 --> 00:20:56,580
in shell jas so I hope they work on

00:20:52,650 --> 00:20:58,940
windows as well and there is that test

00:20:56,580 --> 00:21:02,580
diff script that basically runs

00:20:58,940 --> 00:21:04,830
something we'll see next and this is how

00:21:02,580 --> 00:21:07,770
it looks like basically we get diff from

00:21:04,830 --> 00:21:09,510
the github hash from the commit hash we

00:21:07,770 --> 00:21:12,270
extract folder names from it we

00:21:09,510 --> 00:21:15,320
duplicate this and as a result we get an

00:21:12,270 --> 00:21:18,450
array of for example core web or desktop

00:21:15,320 --> 00:21:20,100
so we know what to run and then we just

00:21:18,450 --> 00:21:23,760
kind of like it's right over these

00:21:20,100 --> 00:21:25,290
folders and we run comment in path so

00:21:23,760 --> 00:21:28,230
it's quite flexible you can write your

00:21:25,290 --> 00:21:31,640
own kind of helpers on top of that you

00:21:28,230 --> 00:21:35,280
can use NPM test or whatever you want

00:21:31,640 --> 00:21:37,500
well so you know like can we do better

00:21:35,280 --> 00:21:39,210
than that case you know there are still

00:21:37,500 --> 00:21:40,950
a lot of things we need to kind of work

00:21:39,210 --> 00:21:42,900
out like like you know these

00:21:40,950 --> 00:21:45,090
dependencies like separate packages are

00:21:42,900 --> 00:21:46,890
quite weird ideally what we would like

00:21:45,090 --> 00:21:50,250
to is the way to structure all the

00:21:46,890 --> 00:21:52,350
things in a good way well the first

00:21:50,250 --> 00:21:54,150
thing the biggest one is probably react

00:21:52,350 --> 00:21:56,220
native doesn't ship with react because

00:21:54,150 --> 00:21:57,780
you know if you are like following react

00:21:56,220 --> 00:21:59,850
native development you probably are

00:21:57,780 --> 00:22:02,730
aware that you know react native uses

00:21:59,850 --> 00:22:05,490
rendered copy which is currently 0 point

00:22:02,730 --> 00:22:08,040
14 and if you want to use zero point 14

00:22:05,490 --> 00:22:09,900
you can't because you know there are two

00:22:08,040 --> 00:22:11,820
different versions in your code base so

00:22:09,900 --> 00:22:14,160
if react native starts depending on

00:22:11,820 --> 00:22:17,040
react from NPM we can now not only

00:22:14,160 --> 00:22:19,470
optimize the way we reuse components but

00:22:17,040 --> 00:22:20,280
we can also for example change the way

00:22:19,470 --> 00:22:21,900
we declare

00:22:20,280 --> 00:22:24,090
dependencies for summary of native

00:22:21,900 --> 00:22:26,160
components so they work in a better way

00:22:24,090 --> 00:22:29,360
as well as the sum cross-platform web

00:22:26,160 --> 00:22:32,340
versions they're going to work as well

00:22:29,360 --> 00:22:34,710
another one is that web pack works with

00:22:32,340 --> 00:22:37,290
react native you know if you'll take a

00:22:34,710 --> 00:22:39,150
look at the first ten issues I guess

00:22:37,290 --> 00:22:41,250
from the react native rapper you will

00:22:39,150 --> 00:22:43,830
see there was there was a long talk

00:22:41,250 --> 00:22:46,140
about why to use react packager over web

00:22:43,830 --> 00:22:48,270
pack and you know people from facebook

00:22:46,140 --> 00:22:50,610
were like we wanted the process to be

00:22:48,270 --> 00:22:53,550
fast and kind of optimized for the you

00:22:50,610 --> 00:22:55,260
know mobile development but it turns out

00:22:53,550 --> 00:22:58,080
there are a couple of features of web

00:22:55,260 --> 00:22:59,550
pack you'd like to still have and you

00:22:58,080 --> 00:23:02,420
know there is a project called react

00:22:59,550 --> 00:23:04,770
native web baguette server I guess

00:23:02,420 --> 00:23:07,260
unfortunately it has a couple of issues

00:23:04,770 --> 00:23:09,270
so if you're gonna use it sometimes you

00:23:07,260 --> 00:23:11,460
may have problems with upgrading but

00:23:09,270 --> 00:23:12,900
generally I would like more work to be

00:23:11,460 --> 00:23:14,580
putting this project because you know

00:23:12,900 --> 00:23:16,710
then you can reuse your kind of

00:23:14,580 --> 00:23:19,500
configuration between web and mobile and

00:23:16,710 --> 00:23:21,390
for example like react package or and

00:23:19,500 --> 00:23:24,150
watch man basically don't support

00:23:21,390 --> 00:23:26,010
symlinks so npm link doesn't work and

00:23:24,150 --> 00:23:27,810
other things so it'll be actually quite

00:23:26,010 --> 00:23:29,520
cool to use like webpack resolve a yes

00:23:27,810 --> 00:23:34,650
and you know problem solved if you don't

00:23:29,520 --> 00:23:37,050
like relative related requires next

00:23:34,650 --> 00:23:39,150
thing is cross-platform styles this is

00:23:37,050 --> 00:23:41,190
quite huge actually because when we were

00:23:39,150 --> 00:23:44,700
developing applications for web and

00:23:41,190 --> 00:23:46,530
mobile we didn't have that many you know

00:23:44,700 --> 00:23:50,100
problems with were using components

00:23:46,530 --> 00:23:51,900
because it turns out like okay iOS and

00:23:50,100 --> 00:23:53,700
Android are quite similar but if you'll

00:23:51,900 --> 00:23:55,380
take a look at the web it's completely

00:23:53,700 --> 00:23:57,720
different what you can reuse our like

00:23:55,380 --> 00:24:00,360
styles some constants like colors or

00:23:57,720 --> 00:24:02,700
maybe like small components like to do

00:24:00,360 --> 00:24:04,080
impart something like that so generally

00:24:02,700 --> 00:24:06,420
it would be quite cool to share these

00:24:04,080 --> 00:24:08,370
styles there is the project called react

00:24:06,420 --> 00:24:11,340
native web that tends to kind of like

00:24:08,370 --> 00:24:12,840
have cross platform style sheets and

00:24:11,340 --> 00:24:15,330
other components from react negative

00:24:12,840 --> 00:24:17,550
that work is actually in web which is

00:24:15,330 --> 00:24:19,530
quite cool because you know the problem

00:24:17,550 --> 00:24:21,870
currently is if you'll take a look at

00:24:19,530 --> 00:24:24,780
any I inline Styles library out there

00:24:21,870 --> 00:24:26,610
like radium for example they all are

00:24:24,780 --> 00:24:28,140
similar but they have still different

00:24:26,610 --> 00:24:29,910
syntax than style sheets from react

00:24:28,140 --> 00:24:33,420
native because react native style sheets

00:24:29,910 --> 00:24:34,050
are camelcase and some of the styles are

00:24:33,420 --> 00:24:35,700
not support

00:24:34,050 --> 00:24:37,590
and you know if you pass too much to

00:24:35,700 --> 00:24:39,960
your components they gonna you're gonna

00:24:37,590 --> 00:24:42,120
end up with a red screen of that that's

00:24:39,960 --> 00:24:44,220
so that's not something that could be

00:24:42,120 --> 00:24:47,970
improved in order to ride our apps in a

00:24:44,220 --> 00:24:49,560
better way and you know as the last

00:24:47,970 --> 00:24:51,240
thing you implement that in production

00:24:49,560 --> 00:24:54,780
and give us the feedback and we can kind

00:24:51,240 --> 00:24:58,380
of keep DJ s we're up and going so these

00:24:54,780 --> 00:25:00,690
are the links you can kind of save them

00:24:58,380 --> 00:25:02,880
or visit if you want to check it out

00:25:00,690 --> 00:25:04,980
also like try to post them somewhere

00:25:02,880 --> 00:25:06,960
maybe on Twitter the first one is the 1i

00:25:04,980 --> 00:25:08,520
was specifically talking about regarding

00:25:06,960 --> 00:25:10,590
the way we test apps and the way we

00:25:08,520 --> 00:25:12,870
develop apps the second one is eshte

00:25:10,590 --> 00:25:15,300
this is the project work on full time

00:25:12,870 --> 00:25:18,390
with Daniel it's like a web dev stock

00:25:15,300 --> 00:25:20,130
that has 19 as well and that's something

00:25:18,390 --> 00:25:22,050
we put all the things that work for us

00:25:20,130 --> 00:25:25,430
in production and then we kind of see

00:25:22,050 --> 00:25:28,440
how it's how it works for the community

00:25:25,430 --> 00:25:38,610
so thank you very much for listening me

00:25:28,440 --> 00:25:45,150
in the morning right we have time for

00:25:38,610 --> 00:25:49,470
two three questions yeah where is the

00:25:45,150 --> 00:25:51,360
one about jQuery Vashta other some

00:25:49,470 --> 00:25:53,790
production used examples build with veg

00:25:51,360 --> 00:25:57,420
that we can overview to God idea how it

00:25:53,790 --> 00:26:00,030
looks work feels well I can speak for

00:25:57,420 --> 00:26:01,980
Daniel but if you ask me we are actually

00:26:00,030 --> 00:26:03,570
launching a product called push for

00:26:01,980 --> 00:26:05,670
champagne which is a product you can

00:26:03,570 --> 00:26:07,230
like click on order champagne we are

00:26:05,670 --> 00:26:09,330
launching in London next week and we are

00:26:07,230 --> 00:26:10,770
waiting for upper review I left a couple

00:26:09,330 --> 00:26:12,030
of backdoors in the app so if you'd like

00:26:10,770 --> 00:26:15,240
to check it out with me just kind of

00:26:12,030 --> 00:26:17,430
like drop me a line so in two weeks

00:26:15,240 --> 00:26:21,420
there's gonna be a full universal app

00:26:17,430 --> 00:26:23,400
with um web desktop mobile an android

00:26:21,420 --> 00:26:24,690
version so you can kind of like then we

00:26:23,400 --> 00:26:29,490
can kind of then I can show you the

00:26:24,690 --> 00:26:32,700
links and we can see it out um can I

00:26:29,490 --> 00:26:35,130
write my own platform for like 40 vs for

00:26:32,700 --> 00:26:37,200
Ashton yeah of course I mean as long as

00:26:35,130 --> 00:26:39,690
TV OS works in a good way that you can

00:26:37,200 --> 00:26:41,070
kind of get it from the NPM then you

00:26:39,690 --> 00:26:43,710
shouldn't be a problem because you know

00:26:41,070 --> 00:26:46,500
as I said it's all about having these

00:26:43,710 --> 00:26:47,760
folders in your platform or source so we

00:26:46,500 --> 00:26:50,760
can create a new folder

00:26:47,760 --> 00:26:56,300
TV OS and kind of just do what you want

00:26:50,760 --> 00:26:56,300
to do is a step production ready well

00:26:56,510 --> 00:27:01,380
yeah I think so I mean we are building

00:26:59,250 --> 00:27:07,740
some production apps with it so it

00:27:01,380 --> 00:27:11,460
should be working fine Bob yeah one more

00:27:07,740 --> 00:27:14,100
of the sash the universal around on

00:27:11,460 --> 00:27:16,470
Windows or do I need mac now it does run

00:27:14,100 --> 00:27:19,260
on windows it might be just a case of

00:27:16,470 --> 00:27:21,480
you know the scripts because it's quite

00:27:19,260 --> 00:27:22,950
hard to get right free or for common

00:27:21,480 --> 00:27:25,200
lines and windows so if you would like

00:27:22,950 --> 00:27:26,910
to help us with that then sure but apart

00:27:25,200 --> 00:27:29,330
from that it's just you know Jas so you

00:27:26,910 --> 00:27:32,330
should be fine cool great thank you Mike

00:27:29,330 --> 00:27:32,330

YouTube URL: https://www.youtube.com/watch?v=Clhyr3DRU_U


