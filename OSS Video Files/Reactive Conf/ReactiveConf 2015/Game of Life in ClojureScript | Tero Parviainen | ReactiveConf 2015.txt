Title: Game of Life in ClojureScript | Tero Parviainen | ReactiveConf 2015
Publication date: 2017-06-29
Playlist: ReactiveConf 2015
Description: 
	I created this video with the YouTube Video Editor (https://www.youtube.com/editor)
Captions: 
	00:00:04,950 --> 00:00:10,420
so hi I'm Tara I'm going to do some

00:00:08,769 --> 00:00:13,510
closure script programming for your

00:00:10,420 --> 00:00:15,100
entertainment which is Game of Life so

00:00:13,510 --> 00:00:18,550
I'll begin by defining the state of the

00:00:15,100 --> 00:00:22,090
application which is an atom which is

00:00:18,550 --> 00:00:24,760
which holds the set of cells that is

00:00:22,090 --> 00:00:28,539
currently alive and here is one such set

00:00:24,760 --> 00:00:31,270
and then I'll define a UI for this which

00:00:28,539 --> 00:00:34,660
is a react component called great and

00:00:31,270 --> 00:00:38,469
that renders an SVG element that has

00:00:34,660 --> 00:00:41,609
some sort of size width and height and

00:00:38,469 --> 00:00:44,109
it has a coordinate origin in the middle

00:00:41,609 --> 00:00:47,620
so that zero is it at the middle of this

00:00:44,109 --> 00:00:49,989
thing and then I'll render this to the

00:00:47,620 --> 00:00:52,809
screen by calling the render for the

00:00:49,989 --> 00:00:55,109
grid and putting it in the body of the

00:00:52,809 --> 00:00:56,859
current document and there we see that

00:00:55,109 --> 00:00:59,829
and then I'll actually put this

00:00:56,859 --> 00:01:03,039
life-form itself into this grid by

00:00:59,829 --> 00:01:06,909
taking all the X&Y of the cells that are

00:01:03,039 --> 00:01:09,520
currently in the state and create a SVG

00:01:06,909 --> 00:01:11,620
rectangle for each one of those and they

00:01:09,520 --> 00:01:15,600
also have some sort of width and height

00:01:11,620 --> 00:01:21,910
as well as an x and y based on their

00:01:15,600 --> 00:01:24,340
coordinates x and y and there we see the

00:01:21,910 --> 00:01:26,710
life form and now we can actually talk

00:01:24,340 --> 00:01:29,290
about how to make it come alive so this

00:01:26,710 --> 00:01:31,060
will be all about defining the next

00:01:29,290 --> 00:01:33,130
generation of this life form based on

00:01:31,060 --> 00:01:35,890
the previous generation so we'll make a

00:01:33,130 --> 00:01:37,900
pure function call next population that

00:01:35,890 --> 00:01:40,060
takes a population and returns the next

00:01:37,900 --> 00:01:42,850
generation of it and that's going to be

00:01:40,060 --> 00:01:44,770
based on the looking at the neighbors of

00:01:42,850 --> 00:01:46,570
the cells that are currently alive so we

00:01:44,770 --> 00:01:48,909
need a little helper function called

00:01:46,570 --> 00:01:51,159
neighbors that actually takes a cell and

00:01:48,909 --> 00:01:54,190
returns the set of coordinates all

00:01:51,159 --> 00:01:56,740
around that cell in all directions so

00:01:54,190 --> 00:01:58,230
look at the deltas of x to the left to

00:01:56,740 --> 00:02:01,120
the senator hun to the right of the

00:01:58,230 --> 00:02:04,300
original and do the same for the y

00:02:01,120 --> 00:02:07,390
coordinates and we want to skip the case

00:02:04,300 --> 00:02:09,399
where both at the deltas are actually 0

00:02:07,390 --> 00:02:12,519
because that's going to be the original

00:02:09,399 --> 00:02:15,219
cell but for everything else we come up

00:02:12,519 --> 00:02:17,290
with these new coordinates based on the

00:02:15,219 --> 00:02:20,110
x and y and the Delta

00:02:17,290 --> 00:02:23,469
so that's a collection of cells around a

00:02:20,110 --> 00:02:26,439
given cell and this will not use to make

00:02:23,469 --> 00:02:30,430
our new population so we actually get

00:02:26,439 --> 00:02:34,049
all the neighbors of all the cells that

00:02:30,430 --> 00:02:37,629
are currently alive by mapping this over

00:02:34,049 --> 00:02:40,239
dysfunction over the population and then

00:02:37,629 --> 00:02:43,120
we'll count how many times each neighbor

00:02:40,239 --> 00:02:48,129
is in there by using the frequencies

00:02:43,120 --> 00:02:50,889
function and then this is what we base

00:02:48,129 --> 00:02:53,139
our next population on so we'll look at

00:02:50,889 --> 00:02:56,470
the cells and the counts that are

00:02:53,139 --> 00:03:02,730
currently in that neighbor count value

00:02:56,470 --> 00:03:06,700
and we are interested in the ones that

00:03:02,730 --> 00:03:09,579
either are there three times or are

00:03:06,700 --> 00:03:14,889
there twice if they were also in the

00:03:09,579 --> 00:03:17,919
previous population and this will be our

00:03:14,889 --> 00:03:22,030
new population and we'll put that in a

00:03:17,919 --> 00:03:26,229
set as well so if I got this right I can

00:03:22,030 --> 00:03:30,959
apply this to our state now and come up

00:03:26,229 --> 00:03:30,959
with the next population there we go

00:03:36,300 --> 00:03:39,780
and we can make this happen

00:03:37,520 --> 00:03:42,300
automatically if we start a process of

00:03:39,780 --> 00:03:44,940
evolution so we start a loop an

00:03:42,300 --> 00:03:49,680
asynchronous loop which waits for say

00:03:44,940 --> 00:03:53,490
100 milliseconds swaps the states to the

00:03:49,680 --> 00:03:57,060
next one and then recurse so it's an

00:03:53,490 --> 00:03:59,070
infinite asynchronous loop or a process

00:03:57,060 --> 00:04:03,620
of evolution which we can start from the

00:03:59,070 --> 00:04:06,240
ripple there we go and if we make our

00:04:03,620 --> 00:04:10,790
primordial soup a little bit more

00:04:06,240 --> 00:04:10,790
interesting we can see how that works

00:04:11,120 --> 00:04:21,350
whoops stare there you go that's life in

00:04:18,840 --> 00:04:21,350
closer stick

00:04:30,880 --> 00:04:34,430
and if I still have some seconds I'll

00:04:33,050 --> 00:04:37,340
mention what I used so this is closure

00:04:34,430 --> 00:04:40,760
script the reagent wrapper for for react

00:04:37,340 --> 00:04:42,350
the freak wheel auto reloader to the

00:04:40,760 --> 00:04:45,020
chorus link library for the asynchronous

00:04:42,350 --> 00:04:47,000
stuff and the algorithm itself for this

00:04:45,020 --> 00:04:51,550
life implementation is by Christophe

00:04:47,000 --> 00:04:51,550

YouTube URL: https://www.youtube.com/watch?v=dxLRQ0aKTOQ


