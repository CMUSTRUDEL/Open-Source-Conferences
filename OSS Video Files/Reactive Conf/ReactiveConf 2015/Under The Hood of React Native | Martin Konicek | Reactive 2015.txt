Title: Under The Hood of React Native | Martin Konicek | Reactive 2015
Publication date: 2017-06-29
Playlist: ReactiveConf 2015
Description: 
	Learn how Facebook uses React Native and how we run the open source project.

Works on React Native, specifically the Android part, at Facebook London. I am very excited to see what we'll build together now that React Native is open source on iOS and Android.
Captions: 
	00:00:04,540 --> 00:00:10,090
so yeah hi everyone I'm Martin Kony

00:00:07,210 --> 00:00:12,039
chick as you probably know I'm from the

00:00:10,090 --> 00:00:14,439
Czech Republic I'm super excited to be

00:00:12,039 --> 00:00:17,590
here because I come from a town just two

00:00:14,439 --> 00:00:20,430
hours away from Bratislava and I work on

00:00:17,590 --> 00:00:23,740
react native at Facebook based in London

00:00:20,430 --> 00:00:25,570
we have a team that works mostly on

00:00:23,740 --> 00:00:27,610
native native stuff in London and then

00:00:25,570 --> 00:00:30,970
the JavaScript people who work on

00:00:27,610 --> 00:00:33,039
JavaScript are based in California so

00:00:30,970 --> 00:00:36,640
yeah with that let's get let's get

00:00:33,039 --> 00:00:38,620
started what I will be talking about so

00:00:36,640 --> 00:00:41,319
I have some very quick intro to react

00:00:38,620 --> 00:00:43,749
native because brent already covered all

00:00:41,319 --> 00:00:45,749
of the like most of that and I think

00:00:43,749 --> 00:00:48,969
many of you already tried react native

00:00:45,749 --> 00:00:51,190
then I will be talking about how we

00:00:48,969 --> 00:00:54,519
built the ads manager which was the

00:00:51,190 --> 00:00:56,979
first app built for both Android and iOS

00:00:54,519 --> 00:00:58,959
using react native that we that we

00:00:56,979 --> 00:01:01,389
launched then I will talk about

00:00:58,959 --> 00:01:02,589
architecture of react native because I

00:01:01,389 --> 00:01:04,449
thought this might be interesting to you

00:01:02,589 --> 00:01:08,110
it's a bit of an advanced topic and

00:01:04,449 --> 00:01:11,830
finally open source so as you probably

00:01:08,110 --> 00:01:14,020
know react native lets you build native

00:01:11,830 --> 00:01:17,050
apps with react right it gives you full

00:01:14,020 --> 00:01:20,110
access to native views on Android and

00:01:17,050 --> 00:01:21,750
iOS and ap eyes as well if you're

00:01:20,110 --> 00:01:25,750
building for the web you're probably

00:01:21,750 --> 00:01:28,330
used to this amazing experience where

00:01:25,750 --> 00:01:31,720
you can just reload reload your page and

00:01:28,330 --> 00:01:36,130
instantly see your changes I mean I have

00:01:31,720 --> 00:01:37,720
a lot of different backgrounds like

00:01:36,130 --> 00:01:40,480
native and retouched and this is just

00:01:37,720 --> 00:01:42,940
amazing like this is unheard of right

00:01:40,480 --> 00:01:44,710
just waiting for your apps to compile so

00:01:42,940 --> 00:01:47,470
yeah how does this work on the under the

00:01:44,710 --> 00:01:49,090
hood there is a packager it's a it's a

00:01:47,470 --> 00:01:52,450
local development server that's that's

00:01:49,090 --> 00:01:54,940
running on your on your laptop and then

00:01:52,450 --> 00:01:57,790
this serves all the JavaScript needed to

00:01:54,940 --> 00:01:59,830
run your app so it returns a bundle

00:01:57,790 --> 00:02:02,200
which contains to react your application

00:01:59,830 --> 00:02:04,600
code everything and it can do that very

00:02:02,200 --> 00:02:06,909
quickly on a small change so you make a

00:02:04,600 --> 00:02:08,500
request and if only one file changed

00:02:06,909 --> 00:02:09,789
everything is cached and it returns you

00:02:08,500 --> 00:02:13,030
the new bundle very quickly and

00:02:09,789 --> 00:02:16,359
refreshes your UI a big thing for me

00:02:13,030 --> 00:02:18,280
personally about react native our API is

00:02:16,359 --> 00:02:20,860
consistent across platforms

00:02:18,280 --> 00:02:23,650
so I don't know how many of you can

00:02:20,860 --> 00:02:26,740
build apps for both Android and iOS

00:02:23,650 --> 00:02:28,810
native in Objective C I can't do it it's

00:02:26,740 --> 00:02:30,880
too much work to learn all of that react

00:02:28,810 --> 00:02:33,310
native you only need to learn once how

00:02:30,880 --> 00:02:35,290
to how to make network requests or how

00:02:33,310 --> 00:02:36,910
to write something to disk right the

00:02:35,290 --> 00:02:39,640
same thing same thing with with layout

00:02:36,910 --> 00:02:42,400
layout is done using flexbox as you

00:02:39,640 --> 00:02:44,890
probably know it's also a model that

00:02:42,400 --> 00:02:47,230
you're already familiar with from the

00:02:44,890 --> 00:02:49,240
web and I really like it I like it

00:02:47,230 --> 00:02:53,500
better than the Android one but don't

00:02:49,240 --> 00:02:55,600
tell anyone what you might not know is

00:02:53,500 --> 00:02:57,970
that this the Android implementation

00:02:55,600 --> 00:02:59,800
recently became much faster thanks to

00:02:57,970 --> 00:03:02,770
this pool request from Lucas Roca who

00:02:59,800 --> 00:03:05,260
made it about 50% faster on Android so

00:03:02,770 --> 00:03:07,239
the layout engine right the the engine

00:03:05,260 --> 00:03:09,100
that computes the positions of the of

00:03:07,239 --> 00:03:10,480
the views on the screen and that was on

00:03:09,100 --> 00:03:13,810
top of another pool request that he made

00:03:10,480 --> 00:03:16,780
before that already made it 60% faster

00:03:13,810 --> 00:03:20,530
than that so it was very cool we were

00:03:16,780 --> 00:03:23,470
very happy at that he did this there is

00:03:20,530 --> 00:03:25,690
one more sand Royd specific optimization

00:03:23,470 --> 00:03:30,310
to do layout so can you tell the

00:03:25,690 --> 00:03:33,700
difference between these two pictures ok

00:03:30,310 --> 00:03:35,080
there there is no difference but they

00:03:33,700 --> 00:03:37,140
look the same but under the under the

00:03:35,080 --> 00:03:39,670
hood there is a difference because

00:03:37,140 --> 00:03:41,769
because we've removed some views we've

00:03:39,670 --> 00:03:43,989
removed some Android views so before

00:03:41,769 --> 00:03:46,090
this optimization it looked like this

00:03:43,989 --> 00:03:48,040
there are the reviews that are only used

00:03:46,090 --> 00:03:51,549
for layout but don't have any color or

00:03:48,040 --> 00:03:53,620
shadow or anything like that so you

00:03:51,549 --> 00:03:55,030
declare them in JavaScript right in JSX

00:03:53,620 --> 00:03:58,299
you declare review but in native it

00:03:55,030 --> 00:04:00,130
doesn't actually exist because it's it's

00:03:58,299 --> 00:04:01,570
not its it doesn't need to exist and

00:04:00,130 --> 00:04:04,150
this way androids can save time

00:04:01,570 --> 00:04:06,970
traversing your real Harker's here view

00:04:04,150 --> 00:04:09,700
hierarchy so this means the UI will be

00:04:06,970 --> 00:04:12,250
more performant now when we know a bit

00:04:09,700 --> 00:04:15,160
basic stuff about react native let's

00:04:12,250 --> 00:04:17,790
look at how we built the first app that

00:04:15,160 --> 00:04:20,260
shipped on both platforms with it and

00:04:17,790 --> 00:04:24,910
that's the ads manager so this is how

00:04:20,260 --> 00:04:29,080
this is how it looks on iOS and this is

00:04:24,910 --> 00:04:30,520
how it looks on Android so it does feel

00:04:29,080 --> 00:04:33,009
really native

00:04:30,520 --> 00:04:36,069
I encourage you to try it just download

00:04:33,009 --> 00:04:37,449
it from the App Store or Play Store the

00:04:36,069 --> 00:04:39,220
only thing is you need to have Facebook

00:04:37,449 --> 00:04:41,319
ads to be able to see anything in the

00:04:39,220 --> 00:04:43,240
app but if you want you can just come to

00:04:41,319 --> 00:04:43,870
me afterwards and you can try the app on

00:04:43,240 --> 00:04:45,520
my phone

00:04:43,870 --> 00:04:48,759
I don't have an iPhone but I have an

00:04:45,520 --> 00:04:52,270
Android phone with me so what did the ad

00:04:48,759 --> 00:04:53,590
manager team realize when they when they

00:04:52,270 --> 00:04:55,330
built this when they were the first

00:04:53,590 --> 00:04:56,490
client of our team building an app on

00:04:55,330 --> 00:04:59,110
the top of recognition

00:04:56,490 --> 00:05:01,300
so it took they first build it on iOS

00:04:59,110 --> 00:05:03,610
without thinking about Android very much

00:05:01,300 --> 00:05:05,349
and then they realized it only took

00:05:03,610 --> 00:05:08,819
three months to build the Android

00:05:05,349 --> 00:05:11,319
version afterwards which was pretty good

00:05:08,819 --> 00:05:12,729
the for me the biggest thing is that

00:05:11,319 --> 00:05:14,740
they were the same team of people so

00:05:12,729 --> 00:05:17,139
they didn't have like dedicated I mean

00:05:14,740 --> 00:05:19,120
we were helping them that the the react

00:05:17,139 --> 00:05:20,949
native team was helping them but they

00:05:19,120 --> 00:05:23,770
were the same team of people mostly

00:05:20,949 --> 00:05:25,630
JavaScript developers with some iOS some

00:05:23,770 --> 00:05:27,069
Android people just built this whole app

00:05:25,630 --> 00:05:28,479
mostly like it's all written in

00:05:27,069 --> 00:05:31,090
JavaScript with something with some

00:05:28,479 --> 00:05:34,539
native modules and it also turned out

00:05:31,090 --> 00:05:36,580
they shared a lot of the code even

00:05:34,539 --> 00:05:38,800
though it wasn't the explicit goal it

00:05:36,580 --> 00:05:39,819
just it just happened that a lot of the

00:05:38,800 --> 00:05:42,580
code can be shared and I'll talk about

00:05:39,819 --> 00:05:46,419
it more so this is how the as manager

00:05:42,580 --> 00:05:49,029
team felt about it I asked them and this

00:05:46,419 --> 00:05:50,620
is this is it playing yeah cool so this

00:05:49,029 --> 00:05:53,130
is this is how they felt after X

00:05:50,620 --> 00:05:56,050
relationships up on both platforms and

00:05:53,130 --> 00:06:00,009
this is how I personally felt it was

00:05:56,050 --> 00:06:02,020
something between these two yeah so

00:06:00,009 --> 00:06:03,819
anyway like code sharing a code sharing

00:06:02,020 --> 00:06:06,159
sounds like a pretty good idea right it

00:06:03,819 --> 00:06:10,479
saves you time so so how do you do that

00:06:06,159 --> 00:06:13,659
so let's take a look at this at this

00:06:10,479 --> 00:06:17,770
simple example so this is the app on iOS

00:06:13,659 --> 00:06:21,729
and Android and you can see that the

00:06:17,770 --> 00:06:23,110
screen add this this specific screen

00:06:21,729 --> 00:06:25,659
happens to look the same on both the

00:06:23,110 --> 00:06:27,909
designers wanted the same so we share

00:06:25,659 --> 00:06:29,710
all of the UI code and we share all of

00:06:27,909 --> 00:06:32,830
the all of the caching and data fetching

00:06:29,710 --> 00:06:34,330
logic how is it done we just have one

00:06:32,830 --> 00:06:36,069
JavaScript file which defines this

00:06:34,330 --> 00:06:38,680
screen and if you want to make some

00:06:36,069 --> 00:06:40,630
small platform-specific changes inside

00:06:38,680 --> 00:06:41,680
this file you can still do that by

00:06:40,630 --> 00:06:44,860
checking on which part

00:06:41,680 --> 00:06:46,919
you're running on another way to split

00:06:44,860 --> 00:06:49,289
the code pi platforms of JavaScript

00:06:46,919 --> 00:06:52,210
behaving differently on Android and iOS

00:06:49,289 --> 00:06:55,780
I'll show it here so imagine you have a

00:06:52,210 --> 00:06:59,380
you have example like this where they're

00:06:55,780 --> 00:07:01,600
just earth dirty scrollview right and on

00:06:59,380 --> 00:07:03,820
iOS it looks like this it bounces

00:07:01,600 --> 00:07:05,949
because it is the native iOS scroll view

00:07:03,820 --> 00:07:09,009
and it has this nice boot to refresh

00:07:05,949 --> 00:07:11,620
activity indicator at the top and on

00:07:09,009 --> 00:07:13,660
Android it's the same scroll view with

00:07:11,620 --> 00:07:16,690
the same contents but doesn't bounce

00:07:13,660 --> 00:07:19,630
because it's Android and it has this

00:07:16,690 --> 00:07:21,880
native Android pull-to-refresh so that's

00:07:19,630 --> 00:07:23,949
cool how do we do that

00:07:21,880 --> 00:07:26,440
well imagine this is just simplified

00:07:23,949 --> 00:07:29,830
example we write a file that has an iOS

00:07:26,440 --> 00:07:31,660
the GS extension right and then we say

00:07:29,830 --> 00:07:33,430
that above the scroll view please PLEASE

00:07:31,660 --> 00:07:36,160
render this activity indicator if we are

00:07:33,430 --> 00:07:37,810
refreshing so implementation here

00:07:36,160 --> 00:07:41,110
doesn't matter but it's an Iowa specific

00:07:37,810 --> 00:07:43,090
implementation and on Android we have a

00:07:41,110 --> 00:07:45,190
different implementation but with the

00:07:43,090 --> 00:07:48,610
same API it's still called refreshable

00:07:45,190 --> 00:07:50,590
scroll view right so it's put it like

00:07:48,610 --> 00:07:54,580
this by platform and then somewhere else

00:07:50,590 --> 00:07:56,289
in our app we can just do this right we

00:07:54,580 --> 00:07:58,870
can we can have one JavaScript file we

00:07:56,289 --> 00:08:00,639
just we just renders this and it will do

00:07:58,870 --> 00:08:02,110
the right thing it will only render one

00:08:00,639 --> 00:08:08,070
or the other based on based on the

00:08:02,110 --> 00:08:10,090
platform so how does it work you

00:08:08,070 --> 00:08:11,169
remember the package here I showed in

00:08:10,090 --> 00:08:13,900
the beginning that's the local dev

00:08:11,169 --> 00:08:16,960
server running running on your laptop so

00:08:13,900 --> 00:08:20,949
an android phone tells hey I'm Android

00:08:16,960 --> 00:08:23,289
and I and iPhone says I'm iOS and the

00:08:20,949 --> 00:08:25,330
packager based on that returns

00:08:23,289 --> 00:08:27,940
JavaScript files but it also returns

00:08:25,330 --> 00:08:31,180
I mean written is a big bundle made out

00:08:27,940 --> 00:08:33,430
of JavaScript files or iOS the J's files

00:08:31,180 --> 00:08:37,000
and or Android the J's files to the

00:08:33,430 --> 00:08:38,260
correct device okay so yeah this is

00:08:37,000 --> 00:08:41,349
pretty simple

00:08:38,260 --> 00:08:42,880
now let's a little bit deeper let's look

00:08:41,349 --> 00:08:45,160
at architecture because people often

00:08:42,880 --> 00:08:47,170
talk about hey it's all async and

00:08:45,160 --> 00:08:47,920
they're like different threads so what

00:08:47,170 --> 00:08:51,459
does this all mean

00:08:47,920 --> 00:08:52,750
I'll try to explain it I will be talking

00:08:51,459 --> 00:08:52,970
more about Android because that's what

00:08:52,750 --> 00:08:54,709
I'm

00:08:52,970 --> 00:08:57,410
familiar with but a colleague of mine

00:08:54,709 --> 00:08:59,509
tell you if you go to this Twitter you

00:08:57,410 --> 00:09:03,500
can find he wrote a blog post for iOS

00:08:59,509 --> 00:09:05,000
and architecture is very similar so at

00:09:03,500 --> 00:09:08,480
the core of react native is this thing

00:09:05,000 --> 00:09:10,879
we call bridge so you have you have

00:09:08,480 --> 00:09:12,230
native code right on one side and you

00:09:10,879 --> 00:09:15,050
have your JavaScript code running on the

00:09:12,230 --> 00:09:19,430
other side and it runs in a JavaScript

00:09:15,050 --> 00:09:21,620
VM so on iOS this VM is already on the

00:09:19,430 --> 00:09:24,470
system but on Android we package it

00:09:21,620 --> 00:09:26,300
inside your app which means the hello

00:09:24,470 --> 00:09:28,819
world app on Android is about three and

00:09:26,300 --> 00:09:30,769
half megabytes right and then what this

00:09:28,819 --> 00:09:34,970
bridge lets you do it lets native talk

00:09:30,769 --> 00:09:36,250
to Jas and the other way round is that

00:09:34,970 --> 00:09:38,839
clear

00:09:36,250 --> 00:09:41,120
right so let's zoom in a little bit into

00:09:38,839 --> 00:09:42,620
this so we have native on one side the

00:09:41,120 --> 00:09:44,930
JavaScript running running in the

00:09:42,620 --> 00:09:46,519
virtual machine on the other side so

00:09:44,930 --> 00:09:50,000
this is the same picture just zoomed in

00:09:46,519 --> 00:09:51,800
and the bridge is all about calling

00:09:50,000 --> 00:09:54,009
calling each other right calling from

00:09:51,800 --> 00:09:57,050
Java to J's and coming from J's to Java

00:09:54,009 --> 00:09:58,759
so how does this work let's say we have

00:09:57,050 --> 00:10:01,639
some JavaScript code and we want to call

00:09:58,759 --> 00:10:03,529
it it always starts in native native

00:10:01,639 --> 00:10:06,860
decides hey let's let's call some code

00:10:03,529 --> 00:10:09,019
so native says I want to run this

00:10:06,860 --> 00:10:10,519
application you opened yet that decides

00:10:09,019 --> 00:10:11,930
you it that's the entry point that

00:10:10,519 --> 00:10:15,199
decides I want to run your application

00:10:11,930 --> 00:10:18,259
so now it sends this call across the C++

00:10:15,199 --> 00:10:20,089
bridge which is serialized right and

00:10:18,259 --> 00:10:21,920
it's a custom protocol that basically

00:10:20,089 --> 00:10:24,829
says I want to call a precious tree

00:10:21,920 --> 00:10:27,259
around application that gets unpacked on

00:10:24,829 --> 00:10:28,670
the other side and this is what will run

00:10:27,259 --> 00:10:31,220
in JavaScript at registry run

00:10:28,670 --> 00:10:34,660
application this means to a bunch this

00:10:31,220 --> 00:10:38,269
leads to a bunch of calls in JavaScript

00:10:34,660 --> 00:10:41,029
which can be calls back into into native

00:10:38,269 --> 00:10:44,959
write so UI manager create view is a

00:10:41,029 --> 00:10:48,050
JavaScript call that will lead to a

00:10:44,959 --> 00:10:49,879
native call which means that for that a

00:10:48,050 --> 00:10:55,160
view and a text view will get created

00:10:49,879 --> 00:10:56,389
back in native write so this is what it

00:10:55,160 --> 00:10:57,529
this is what it looks like right it's

00:10:56,389 --> 00:10:59,930
native decides to run an application

00:10:57,529 --> 00:11:02,480
then asks the JSA what do you want to do

00:10:59,930 --> 00:11:03,920
and then Jas returns I want to have some

00:11:02,480 --> 00:11:05,939
views and I want to have some text views

00:11:03,920 --> 00:11:08,849
on the screen

00:11:05,939 --> 00:11:11,279
and and it's all patched the important

00:11:08,849 --> 00:11:14,129
thing is there is there is not one arrow

00:11:11,279 --> 00:11:15,899
per call back to native but there is you

00:11:14,129 --> 00:11:18,689
can see that there are two calls to

00:11:15,899 --> 00:11:22,019
create view but only one one arrow going

00:11:18,689 --> 00:11:23,339
back which means with wait for

00:11:22,019 --> 00:11:25,679
everything to finish and then send it

00:11:23,339 --> 00:11:27,959
send it all back to native can anyone

00:11:25,679 --> 00:11:32,149
see any like this advantage of this of

00:11:27,959 --> 00:11:32,149
this approach related to performance

00:11:34,519 --> 00:11:41,699
yeah so it's very it's very subtle so

00:11:39,139 --> 00:11:44,549
it's very subtle but it's about batching

00:11:41,699 --> 00:11:46,199
right because imagine the Jas is just

00:11:44,549 --> 00:11:48,749
doing a lot of work like something

00:11:46,199 --> 00:11:50,459
computationally expensive and it decides

00:11:48,749 --> 00:11:52,109
like I want to render some UI I want to

00:11:50,459 --> 00:11:54,599
send 10 Network requests to these

00:11:52,109 --> 00:11:55,979
different different domains and I want

00:11:54,599 --> 00:11:58,259
to write to disk and do all these other

00:11:55,979 --> 00:12:01,409
things and then we all send that as a

00:11:58,259 --> 00:12:03,839
big batch donate it that why would you

00:12:01,409 --> 00:12:06,229
do that right it you can also do you can

00:12:03,839 --> 00:12:08,609
also say hey I can render these views in

00:12:06,229 --> 00:12:10,049
native meanwhile I'm still running to

00:12:08,609 --> 00:12:11,639
JavaScript so we are looking into that

00:12:10,049 --> 00:12:13,109
we call it D batching the bridge and

00:12:11,639 --> 00:12:15,479
basically means like sending the

00:12:13,109 --> 00:12:19,769
commands back to native even if you are

00:12:15,479 --> 00:12:21,899
not done yet to get like faster files

00:12:19,769 --> 00:12:23,399
faster TTI time to time to interact

00:12:21,899 --> 00:12:27,449
basically the user can do something

00:12:23,399 --> 00:12:29,309
something quicker yep cool so let's look

00:12:27,449 --> 00:12:30,959
at the threading model I talked about

00:12:29,309 --> 00:12:32,519
some asing stuff like this stuff is

00:12:30,959 --> 00:12:36,659
happening asynchronously so what does it

00:12:32,519 --> 00:12:40,439
actually mean so you have three frets at

00:12:36,659 --> 00:12:42,629
least in in Java in iOS it's similar to

00:12:40,439 --> 00:12:44,220
this so you have the main fret the UI

00:12:42,629 --> 00:12:46,169
thread it's the same as you have in

00:12:44,220 --> 00:12:48,149
browser or the same as you have in

00:12:46,169 --> 00:12:51,569
native iOS or Android up it's just the

00:12:48,149 --> 00:12:52,709
main threat which would exist in an evil

00:12:51,569 --> 00:12:55,739
app and then we have two additional

00:12:52,709 --> 00:12:57,389
threats the J's fret and the native

00:12:55,739 --> 00:12:58,499
module threat where we run the native

00:12:57,389 --> 00:13:01,139
native operations

00:12:58,499 --> 00:13:03,779
so now let's imagine that a touch event

00:13:01,139 --> 00:13:05,279
comes in it always starts in native so

00:13:03,779 --> 00:13:06,599
if you want to ask yourself like hey

00:13:05,279 --> 00:13:08,639
what does actually happen if I call

00:13:06,599 --> 00:13:12,379
render in my application or if I call

00:13:08,639 --> 00:13:15,149
set state you should ask the question

00:13:12,379 --> 00:13:16,620
what even started this because someone

00:13:15,149 --> 00:13:19,890
probably tapped the screen right so

00:13:16,620 --> 00:13:22,200
say the person using your app tap the

00:13:19,890 --> 00:13:24,570
screen there is a touch event in native

00:13:22,200 --> 00:13:27,540
that's that's what would always happen

00:13:24,570 --> 00:13:32,970
the same thing as in browser but what we

00:13:27,540 --> 00:13:36,000
do is we send this to DJs Fred and this

00:13:32,970 --> 00:13:37,260
thing will now go across the bridge this

00:13:36,000 --> 00:13:41,400
is what you saw in the previous slides

00:13:37,260 --> 00:13:43,230
so it will go to C++ to the VM it will

00:13:41,400 --> 00:13:45,210
go it will go across the bridge and it

00:13:43,230 --> 00:13:47,370
will run your application code which

00:13:45,210 --> 00:13:50,040
will say for example set state and that

00:13:47,370 --> 00:13:52,020
will call render in reacts right so this

00:13:50,040 --> 00:13:53,460
is where all the JavaScript runs but

00:13:52,020 --> 00:13:55,740
while this is happening you can see that

00:13:53,460 --> 00:13:56,970
the main thread is separate as Brent was

00:13:55,740 --> 00:13:58,950
talking about it so you can like

00:13:56,970 --> 00:14:03,570
continue scrolling for example in Europe

00:13:58,950 --> 00:14:05,760
at the same time this thing then goes

00:14:03,570 --> 00:14:07,350
back to native modules and says like hey

00:14:05,760 --> 00:14:09,600
they already are here are all these

00:14:07,350 --> 00:14:12,420
commands that we want to do that's what

00:14:09,600 --> 00:14:16,470
you saw in the previous slide and this

00:14:12,420 --> 00:14:18,210
thing also recomputes layout so unlike

00:14:16,470 --> 00:14:20,640
Android which it has layout in the main

00:14:18,210 --> 00:14:22,620
thread we do the layout on a separate

00:14:20,640 --> 00:14:24,330
thread which also saves some some work

00:14:22,620 --> 00:14:28,830
for the for the main application thread

00:14:24,330 --> 00:14:31,410
and we compute like okay so react from

00:14:28,830 --> 00:14:33,990
j/s tells us this view should be green

00:14:31,410 --> 00:14:37,020
this one should be the size should be

00:14:33,990 --> 00:14:39,570
200 so we recompute the layout using CSS

00:14:37,020 --> 00:14:41,400
layout and then we finally update the UI

00:14:39,570 --> 00:14:45,960
on the main thread because that's that's

00:14:41,400 --> 00:14:48,090
what you always have to do cool the all

00:14:45,960 --> 00:14:52,590
of this can happen at 60 frames per

00:14:48,090 --> 00:14:55,050
second ideally so imagine imagine this

00:14:52,590 --> 00:14:56,910
where we have an animation that's that's

00:14:55,050 --> 00:15:00,750
driven by JavaScript using the animated

00:14:56,910 --> 00:15:03,930
API so there's there is a timer event

00:15:00,750 --> 00:15:06,540
kicking in native every frame and then

00:15:03,930 --> 00:15:07,890
going to JavaScript and then JavaScript

00:15:06,540 --> 00:15:14,400
computes positions and then it's going

00:15:07,890 --> 00:15:16,800
back to native so this whole thing

00:15:14,400 --> 00:15:18,570
basically like can go back and forth

00:15:16,800 --> 00:15:22,230
like this six different 60 times a

00:15:18,570 --> 00:15:26,010
second and if it doesn't we might want

00:15:22,230 --> 00:15:28,650
to introduce some API to off load off

00:15:26,010 --> 00:15:29,170
load applications offload animations

00:15:28,650 --> 00:15:31,329
into

00:15:29,170 --> 00:15:32,980
into native so it all happens on one

00:15:31,329 --> 00:15:36,399
fret and we don't have to go back and

00:15:32,980 --> 00:15:40,690
forth like this another big thing about

00:15:36,399 --> 00:15:43,089
about like API of an internals of 3x

00:15:40,690 --> 00:15:46,060
native is the modularity so what this

00:15:43,089 --> 00:15:48,870
means basically is react native the code

00:15:46,060 --> 00:15:52,570
base is just confused compute and come

00:15:48,870 --> 00:15:52,959
it's composed of I think I think some

00:15:52,570 --> 00:16:10,060
water

00:15:52,959 --> 00:16:12,779
it's neat you yeah that's better so the

00:16:10,060 --> 00:16:19,839
react native code base is composed of

00:16:12,779 --> 00:16:22,779
small modules and and view managers

00:16:19,839 --> 00:16:25,209
which I'll explain here so let's say

00:16:22,779 --> 00:16:27,190
there is a module called dialogue which

00:16:25,209 --> 00:16:30,639
you can just call from GS like this and

00:16:27,190 --> 00:16:34,810
this translates into a native call into

00:16:30,639 --> 00:16:36,490
a dialogue module right and the this you

00:16:34,810 --> 00:16:39,070
can have your own modules for for

00:16:36,490 --> 00:16:40,690
anything like this which I will show in

00:16:39,070 --> 00:16:42,459
a second so this is this is basically

00:16:40,690 --> 00:16:44,709
how the translation goes from Jas

00:16:42,459 --> 00:16:46,660
internet into native same thing with

00:16:44,709 --> 00:16:50,350
views let's say you have a view or a

00:16:46,660 --> 00:16:52,540
switch that you declare in your JSX this

00:16:50,350 --> 00:16:55,510
gets translated to native like this

00:16:52,540 --> 00:16:58,510
using an abstraction called view

00:16:55,510 --> 00:17:00,940
managers and the reason I'm talking

00:16:58,510 --> 00:17:03,790
about this the coolest thing is that you

00:17:00,940 --> 00:17:06,610
can simply define your own right so

00:17:03,790 --> 00:17:09,040
there is a view manager that map's text

00:17:06,610 --> 00:17:11,380
to text view there is a view manager

00:17:09,040 --> 00:17:14,770
that Maps JavaScript switch into Android

00:17:11,380 --> 00:17:16,510
switch and what we ship with react

00:17:14,770 --> 00:17:19,059
native what you get in every Android app

00:17:16,510 --> 00:17:21,640
is just a list of all these modules and

00:17:19,059 --> 00:17:24,250
views where you can see okay there is

00:17:21,640 --> 00:17:26,319
storage there is network support there

00:17:24,250 --> 00:17:28,510
is a scroll view there's their images

00:17:26,319 --> 00:17:31,360
stuff like that and if something is

00:17:28,510 --> 00:17:33,130
missing well you can very simply go and

00:17:31,360 --> 00:17:36,190
implement your own like we did here in

00:17:33,130 --> 00:17:38,409
the maps package so then you go into

00:17:36,190 --> 00:17:40,450
your application main entry point which

00:17:38,409 --> 00:17:42,700
is the main activity and you just say

00:17:40,450 --> 00:17:42,940
besides this main react package which is

00:17:42,700 --> 00:17:44,950
the

00:17:42,940 --> 00:17:47,440
fold I want to also have my my maps

00:17:44,950 --> 00:17:49,960
package where you implement a view

00:17:47,440 --> 00:17:51,880
manager for maps so this is all public

00:17:49,960 --> 00:17:54,970
API and it's just like composed out of

00:17:51,880 --> 00:17:58,000
small small bricks or pieces that you

00:17:54,970 --> 00:17:59,980
can that you can add as you want and my

00:17:58,000 --> 00:18:02,140
favorite part about this is that you can

00:17:59,980 --> 00:18:08,770
then take this Maps package that you've

00:18:02,140 --> 00:18:10,870
just written and and ship it to NPM so

00:18:08,770 --> 00:18:13,510
other people can easily use it in their

00:18:10,870 --> 00:18:15,250
apps as well and there's this cool

00:18:13,510 --> 00:18:18,700
website called react parts so if you

00:18:15,250 --> 00:18:20,290
publish on a any native modules you can

00:18:18,700 --> 00:18:22,390
just register them there there and then

00:18:20,290 --> 00:18:24,190
you can make it easily searchable for

00:18:22,390 --> 00:18:26,020
other people this is actually something

00:18:24,190 --> 00:18:29,740
I'm working on right now I wish I had

00:18:26,020 --> 00:18:31,960
time to do live coding but I will ship

00:18:29,740 --> 00:18:33,550
that sometime after after this week so

00:18:31,960 --> 00:18:36,370
stay tuned for our base I want to

00:18:33,550 --> 00:18:39,510
basically make it easy for people to to

00:18:36,370 --> 00:18:41,500
write and consume these modules right so

00:18:39,510 --> 00:18:43,390
yeah because we don't want to put like

00:18:41,500 --> 00:18:44,830
everything everything into the core so

00:18:43,390 --> 00:18:47,080
if your an idea are like oh I think this

00:18:44,830 --> 00:18:48,790
feature should be into the core this

00:18:47,080 --> 00:18:50,830
feature should be available to other

00:18:48,790 --> 00:18:53,080
people then it should be very easy to

00:18:50,830 --> 00:18:55,030
publish it and the and should be easy

00:18:53,080 --> 00:18:58,570
for other people to use it which brings

00:18:55,030 --> 00:19:01,840
me to other topic which is open source

00:18:58,570 --> 00:19:04,450
so talking about code sharing and stuff

00:19:01,840 --> 00:19:06,910
like that so how do we how do we run the

00:19:04,450 --> 00:19:10,630
open source project at Facebook so if

00:19:06,910 --> 00:19:12,540
you go to our github github repo one

00:19:10,630 --> 00:19:16,060
things you will notice that we have now

00:19:12,540 --> 00:19:17,350
360 contributors as of sometimes last

00:19:16,060 --> 00:19:19,150
week which is which is for me personally

00:19:17,350 --> 00:19:21,240
mind-blowing so these are the people

00:19:19,150 --> 00:19:23,470
that committed codes to react native and

00:19:21,240 --> 00:19:25,000
you've probably also noticed that we do

00:19:23,470 --> 00:19:28,450
these releases right there is going to

00:19:25,000 --> 00:19:31,120
be 0:14 coming out soon so we do

00:19:28,450 --> 00:19:32,410
releases of react native to NPM how do

00:19:31,120 --> 00:19:34,840
we do that

00:19:32,410 --> 00:19:36,820
well we always have these release notes

00:19:34,840 --> 00:19:39,850
that there is a there is this very very

00:19:36,820 --> 00:19:44,200
kind guy called Jim PETA who writes

00:19:39,850 --> 00:19:45,850
these release notes for us and yeah how

00:19:44,200 --> 00:19:49,300
do we actually do that so we do

00:19:45,850 --> 00:19:51,190
development on master right we do we do

00:19:49,300 --> 00:19:53,230
two weeks of development internally at

00:19:51,190 --> 00:19:55,000
Facebook and during this time we are

00:19:53,230 --> 00:19:56,250
using that code so we are always using

00:19:55,000 --> 00:19:57,600
master

00:19:56,250 --> 00:19:59,310
like internally at Facebook when we

00:19:57,600 --> 00:20:01,830
build as manager we don't use releases

00:19:59,310 --> 00:20:03,360
we just use we just use master which is

00:20:01,830 --> 00:20:05,700
also good for you because we discover

00:20:03,360 --> 00:20:08,250
bugs we discover more about more bugs

00:20:05,700 --> 00:20:10,710
this way right but for you what we do is

00:20:08,250 --> 00:20:12,330
we do a branch cut for PR for people in

00:20:10,710 --> 00:20:16,260
the community we do parent branch cut

00:20:12,330 --> 00:20:18,540
and then we have this code which is

00:20:16,260 --> 00:20:21,630
frozen but as the development continues

00:20:18,540 --> 00:20:24,210
we cherry-pick small bug fixes that we

00:20:21,630 --> 00:20:25,710
find out that we found find out about or

00:20:24,210 --> 00:20:27,900
we cherry pick small features in the

00:20:25,710 --> 00:20:30,630
release branch and then we finally ship

00:20:27,900 --> 00:20:32,460
it to NPM and then this all repeats

00:20:30,630 --> 00:20:34,740
right then after two weeks we cut a new

00:20:32,460 --> 00:20:37,890
release branch so in this in this

00:20:34,740 --> 00:20:40,950
picture the blue one would be zero zero

00:20:37,890 --> 00:20:44,790
14 at this point and then then next week

00:20:40,950 --> 00:20:47,700
is already going to be 0 15 and so on if

00:20:44,790 --> 00:20:50,870
you look at the github page you will

00:20:47,700 --> 00:20:53,820
notice that there are these commits that

00:20:50,870 --> 00:20:56,160
we push from the Facebook repo and they

00:20:53,820 --> 00:20:58,770
look a bit weird right what are all

00:20:56,160 --> 00:21:00,300
these weird differential revision and

00:20:58,770 --> 00:21:03,330
what is the sync ID what is this all

00:21:00,300 --> 00:21:06,150
about and it's pushed by some github but

00:21:03,330 --> 00:21:08,250
what does what does this mean so I will

00:21:06,150 --> 00:21:11,850
explain that so internally at Facebook

00:21:08,250 --> 00:21:14,760
we store the code in mercurial mercurial

00:21:11,850 --> 00:21:17,040
so we don't develop on github but we

00:21:14,760 --> 00:21:19,170
have this code internally and the most

00:21:17,040 --> 00:21:21,240
interesting part for you to look at is

00:21:19,170 --> 00:21:23,640
this react native github folder that we

00:21:21,240 --> 00:21:25,560
have this is a simplified layout of our

00:21:23,640 --> 00:21:27,420
of our code base we have react native

00:21:25,560 --> 00:21:29,520
github folder there that's what you see

00:21:27,420 --> 00:21:31,350
in github but we also have some Facebook

00:21:29,520 --> 00:21:33,930
specific extensions like reporting

00:21:31,350 --> 00:21:36,690
crashes to our back-end and there is of

00:21:33,930 --> 00:21:38,610
course like the ads manager so this all

00:21:36,690 --> 00:21:40,950
lives in a single in a big single repo

00:21:38,610 --> 00:21:43,560
and every minute when we make changes to

00:21:40,950 --> 00:21:47,910
this folder we push them to github right

00:21:43,560 --> 00:21:51,290
so how it looks we make changes using

00:21:47,910 --> 00:21:54,540
using this system called fabricator and

00:21:51,290 --> 00:21:57,060
what fabricator does is is basically

00:21:54,540 --> 00:21:58,530
something like pull requests it's an

00:21:57,060 --> 00:22:01,260
internal system where you send when you

00:21:58,530 --> 00:22:04,170
send your changes and we run tests on

00:22:01,260 --> 00:22:05,940
them so it's it's a bit like Travis the

00:22:04,170 --> 00:22:09,090
most interesting part here at the bottom

00:22:05,940 --> 00:22:09,720
are the tests so so that the CI system

00:22:09,090 --> 00:22:11,490
runs

00:22:09,720 --> 00:22:15,149
on New York on your code before it

00:22:11,490 --> 00:22:16,590
actually gets committed and one person

00:22:15,149 --> 00:22:19,139
at least one person has to review your

00:22:16,590 --> 00:22:22,320
code and accept it in order for you to

00:22:19,139 --> 00:22:25,950
commit it and once you commit it to the

00:22:22,320 --> 00:22:27,809
internal Facebook codebase then we we

00:22:25,950 --> 00:22:29,490
only take the subset of the files that

00:22:27,809 --> 00:22:31,080
are open source and we push them to

00:22:29,490 --> 00:22:33,299
github and this is this is what you see

00:22:31,080 --> 00:22:35,100
in the commit and the differential

00:22:33,299 --> 00:22:38,539
revision is the number of that of the

00:22:35,100 --> 00:22:41,159
diff that you that you saw in this slide

00:22:38,539 --> 00:22:43,799
so basically this thing gets synced to

00:22:41,159 --> 00:22:45,419
get help like this okay that's very cool

00:22:43,799 --> 00:22:47,850
so that's one way right we go from

00:22:45,419 --> 00:22:50,519
internal code base to github how do we

00:22:47,850 --> 00:22:52,529
go the other way this is what I found on

00:22:50,519 --> 00:22:55,230
Twitter was called what happens if

00:22:52,529 --> 00:22:59,639
someone sends you a pull request so

00:22:55,230 --> 00:23:03,120
that's apparently what happens yeah it's

00:22:59,639 --> 00:23:04,139
good it's cute so what happens when

00:23:03,120 --> 00:23:07,399
someone sends you have to request

00:23:04,139 --> 00:23:10,980
actually so poor request looks like this

00:23:07,399 --> 00:23:12,690
this one was very cool because it it was

00:23:10,980 --> 00:23:15,090
the most commented on Pro request it was

00:23:12,690 --> 00:23:17,100
changing some core functionality in

00:23:15,090 --> 00:23:19,919
react native and finally we merged it so

00:23:17,100 --> 00:23:21,419
super happy about that what happens

00:23:19,919 --> 00:23:24,480
someone says this per request and we

00:23:21,419 --> 00:23:26,759
have this bot that goes and like looks

00:23:24,480 --> 00:23:28,590
at the files in the per request and

00:23:26,759 --> 00:23:31,049
tries to find people who are most likely

00:23:28,590 --> 00:23:33,779
to have to have knowledge of the

00:23:31,049 --> 00:23:36,480
codebase in the specific part of the

00:23:33,779 --> 00:23:39,000
codebase right so it mentions them here

00:23:36,480 --> 00:23:41,039
so get they get notified then once we

00:23:39,000 --> 00:23:43,529
find once we do the code review everyone

00:23:41,039 --> 00:23:45,960
is happy with the pro request what do we

00:23:43,529 --> 00:23:47,370
do we don't merge it on github because

00:23:45,960 --> 00:23:50,480
we need to get this code into the

00:23:47,370 --> 00:23:53,639
Facebook codebase so we say ship it and

00:23:50,480 --> 00:23:56,940
then this bot comes in and commands and

00:23:53,639 --> 00:24:01,289
what what does this link lead to well it

00:23:56,940 --> 00:24:05,789
leads to a diff so what it does it

00:24:01,289 --> 00:24:08,009
creates a diff in in fabricator which

00:24:05,789 --> 00:24:09,870
has exactly the same changes and why do

00:24:08,009 --> 00:24:14,179
we do this well the most important part

00:24:09,870 --> 00:24:17,179
on this on the screenshot are the tests

00:24:14,179 --> 00:24:19,830
so we have to see that the pull request

00:24:17,179 --> 00:24:20,340
doesn't break the as manager for example

00:24:19,830 --> 00:24:22,380
right

00:24:20,340 --> 00:24:24,750
there's closed source code and we have

00:24:22,380 --> 00:24:27,030
to make sure that everything works with

00:24:24,750 --> 00:24:28,350
this pull request but when it does and

00:24:27,030 --> 00:24:29,910
when we see that everything is good we

00:24:28,350 --> 00:24:31,920
merge it into Facebook code base and

00:24:29,910 --> 00:24:35,070
then it goes out to github the same way

00:24:31,920 --> 00:24:38,460
and import important thing about this is

00:24:35,070 --> 00:24:41,490
that the alter stays the same so you get

00:24:38,460 --> 00:24:45,170
attribution the files on github will

00:24:41,490 --> 00:24:47,550
blame to you because your requests and

00:24:45,170 --> 00:24:50,190
we were very help out happy about this

00:24:47,550 --> 00:24:54,060
one I was super happy that we finally

00:24:50,190 --> 00:24:56,640
merged it cool so just to just to sum it

00:24:54,060 --> 00:24:58,890
up for requests go from get up through

00:24:56,640 --> 00:25:03,750
Facebook repo creatives and then go back

00:24:58,890 --> 00:25:08,820
to get up cool okay so talking about pro

00:25:03,750 --> 00:25:11,190
requests how you can help us if you are

00:25:08,820 --> 00:25:12,750
looking for something like where's where

00:25:11,190 --> 00:25:16,050
should I get started we have this label

00:25:12,750 --> 00:25:17,460
for issues called good first task so we

00:25:16,050 --> 00:25:19,530
put this label on things that we think

00:25:17,460 --> 00:25:21,660
are like well-defined and and you can

00:25:19,530 --> 00:25:23,130
just go and do them so that's what you

00:25:21,660 --> 00:25:26,160
can do how you can get started with pull

00:25:23,130 --> 00:25:29,130
requests another thing is there are

00:25:26,160 --> 00:25:32,280
issues there there are too many too many

00:25:29,130 --> 00:25:34,440
open issues right now and one a reason

00:25:32,280 --> 00:25:35,040
is that a lot of the issues are really

00:25:34,440 --> 00:25:37,890
questions

00:25:35,040 --> 00:25:41,070
right and we unfortunately have no way

00:25:37,890 --> 00:25:43,020
of putting a banner on github saying

00:25:41,070 --> 00:25:45,900
saying like hey please if you want to

00:25:43,020 --> 00:25:49,230
ask a question go to stack overflow

00:25:45,900 --> 00:25:51,450
so Stack Overflow is like so much better

00:25:49,230 --> 00:25:54,180
platform for questions and then github

00:25:51,450 --> 00:25:55,920
issues right so you can you can help us

00:25:54,180 --> 00:25:57,350
by by going there you can help us by

00:25:55,920 --> 00:25:59,670
answering questions there if you want

00:25:57,350 --> 00:26:02,670
another thing that we realized recently

00:25:59,670 --> 00:26:05,580
is github issues don't allow you to

00:26:02,670 --> 00:26:09,150
prioritize in a good way to so we came

00:26:05,580 --> 00:26:10,440
up with this idea of we are start we

00:26:09,150 --> 00:26:13,440
started using this website called

00:26:10,440 --> 00:26:14,610
product pains where you can vote on the

00:26:13,440 --> 00:26:16,170
things that are the most important

00:26:14,610 --> 00:26:19,770
because we want to work on the most

00:26:16,170 --> 00:26:21,720
important things so and or or you can

00:26:19,770 --> 00:26:23,190
see things that you are important then

00:26:21,720 --> 00:26:25,710
you can pick pick them up and work on

00:26:23,190 --> 00:26:28,560
them so the most important most vote

00:26:25,710 --> 00:26:30,660
high voted one right now is is Android

00:26:28,560 --> 00:26:33,830
feature parity which means open sourcing

00:26:30,660 --> 00:26:35,659
more views and modules for Android

00:26:33,830 --> 00:26:36,890
so yeah I want to work on that as well

00:26:35,659 --> 00:26:39,440
when I'm back from vacation

00:26:36,890 --> 00:26:42,320
another thing is documentation it needs

00:26:39,440 --> 00:26:44,120
it needs love this is an example I

00:26:42,320 --> 00:26:46,610
discovered through Twitter that these

00:26:44,120 --> 00:26:48,130
were this is a documentation of how do

00:26:46,610 --> 00:26:50,210
you run your app on an Android device

00:26:48,130 --> 00:26:54,080
these were all the points where people

00:26:50,210 --> 00:26:55,940
got stuck so documentation needs love

00:26:54,080 --> 00:26:58,909
and especially if you've never used

00:26:55,940 --> 00:27:01,669
Android please go there and either tweet

00:26:58,909 --> 00:27:03,110
at us or send pull requests improving

00:27:01,669 --> 00:27:04,580
the documentation that there will be

00:27:03,110 --> 00:27:06,830
they will be amazing because this saves

00:27:04,580 --> 00:27:10,280
so much time for everyone right so the

00:27:06,830 --> 00:27:12,650
new version is like much improved okay

00:27:10,280 --> 00:27:15,110
that's all I have for now it was a short

00:27:12,650 --> 00:27:16,340
talk thank you all very much and when I

00:27:15,110 --> 00:27:18,650
say thank you I really want to say

00:27:16,340 --> 00:27:20,929
thanks to the community because this is

00:27:18,650 --> 00:27:22,880
a community project and I've never been

00:27:20,929 --> 00:27:25,940
part of a more exciting project and and

00:27:22,880 --> 00:27:28,120
more exciting community so thank you

00:27:25,940 --> 00:27:28,120
guys

00:27:35,429 --> 00:27:40,289
mama Joyce so we've got time for two

00:27:38,609 --> 00:27:44,909
three questions to answer

00:27:40,289 --> 00:27:46,830
cool so okay this is the what is

00:27:44,909 --> 00:27:48,869
preventing the core team from replacing

00:27:46,830 --> 00:27:50,820
packager bye bye

00:27:48,869 --> 00:27:53,580
oh yeah that's I think one of the most

00:27:50,820 --> 00:27:56,179
common questions I think he should like

00:27:53,580 --> 00:27:58,729
there's a long discussion about this on

00:27:56,179 --> 00:28:01,320
on one of the github issues right and

00:27:58,729 --> 00:28:04,859
I'm John who wrote most of the packager

00:28:01,320 --> 00:28:06,979
has been commenting on that you should

00:28:04,859 --> 00:28:10,950
really ask him but I think the reason he

00:28:06,979 --> 00:28:14,940
the main reason was performance that's

00:28:10,950 --> 00:28:16,919
but I didn't write a packager but you

00:28:14,940 --> 00:28:18,749
can find out the issue or you can tweet

00:28:16,919 --> 00:28:20,969
at me I'll send you to issue word this

00:28:18,749 --> 00:28:26,149
is this is all all being discussed with

00:28:20,969 --> 00:28:26,149
Amjad okay should I do the next one

00:28:26,460 --> 00:28:34,859
do you have any idea how do you plan

00:28:30,509 --> 00:28:37,349
Windows Phone support not yet it was

00:28:34,859 --> 00:28:40,259
easy okay do you have any idea how I can

00:28:37,349 --> 00:28:45,359
use react native in languages which are

00:28:40,259 --> 00:28:46,950
not jails but compile - Jas yeah I

00:28:45,359 --> 00:28:51,690
haven't actually looked into that but

00:28:46,950 --> 00:28:54,029
you can probably add you could you could

00:28:51,690 --> 00:28:56,489
hack - packager - because the packager

00:28:54,029 --> 00:29:01,049
already does transformations right it

00:28:56,489 --> 00:29:04,139
uses babel to transform es2015 into into

00:29:01,049 --> 00:29:05,789
the old JavaScript so you could do

00:29:04,139 --> 00:29:08,580
something similar I think I think it

00:29:05,789 --> 00:29:09,989
should be possible but what if I would

00:29:08,580 --> 00:29:11,519
have to look into that don't know like

00:29:09,989 --> 00:29:14,179
can't tell you exactly go into these

00:29:11,519 --> 00:29:17,729
steps but yeah I think it should work

00:29:14,179 --> 00:29:21,059
should I do more if you want - yeah I

00:29:17,729 --> 00:29:25,289
don't know how much time one or two more

00:29:21,059 --> 00:29:28,200
questions are good okay do you focus on

00:29:25,289 --> 00:29:30,509
platform per day yeah I want to focus on

00:29:28,200 --> 00:29:34,229
that when I'm I'll go on vacation this

00:29:30,509 --> 00:29:36,119
week and then I'll focus on that and

00:29:34,229 --> 00:29:38,820
more people from the team hopefully will

00:29:36,119 --> 00:29:41,129
focus on that as well so we have all

00:29:38,820 --> 00:29:42,659
these views internally and and you just

00:29:41,129 --> 00:29:44,399
need to like clean up the api's make

00:29:42,659 --> 00:29:47,489
sure it works very well and an open

00:29:44,399 --> 00:29:49,050
source name why are you not using it

00:29:47,489 --> 00:29:51,960
flow I don't know good for

00:29:49,050 --> 00:29:54,090
I should I should look into it okay I'll

00:29:51,960 --> 00:29:56,750
look into that and one last one the

00:29:54,090 --> 00:30:00,290
first one any best practice in handling

00:29:56,750 --> 00:30:05,580
differences in screen side screen sizes

00:30:00,290 --> 00:30:09,690
hmm it's a good question I mean you can

00:30:05,580 --> 00:30:15,180
make your layouts I mean you can just

00:30:09,690 --> 00:30:16,620
use your like flexbox to to make just to

00:30:15,180 --> 00:30:17,550
stretch things across the screen and

00:30:16,620 --> 00:30:19,890
stuff like that I don't know if that

00:30:17,550 --> 00:30:21,240
answers the question who asked that come

00:30:19,890 --> 00:30:21,690
to me and we'll talk about it after the

00:30:21,240 --> 00:30:26,480
talk

00:30:21,690 --> 00:30:26,480

YouTube URL: https://www.youtube.com/watch?v=8N4f4h6SThc


