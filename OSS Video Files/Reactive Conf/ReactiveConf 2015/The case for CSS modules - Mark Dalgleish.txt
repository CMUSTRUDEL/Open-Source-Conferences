Title: The case for CSS modules - Mark Dalgleish
Publication date: 2017-06-29
Playlist: ReactiveConf 2015
Description: 
	With the push towards writing CSS in JavaScript within the React community, CSS Modules have suddenly emerged as a surprisingly popular alternative that still allow us to maintain our connection with the CSS community. 

Do we have to give up writing CSS in JavaScript? Are we clinging to the past, or do CSS Modules offer a new way forward for the entire web community? In this talk we'll examine both the history and potential future of CSS Modules, and hopefully inspire the next generation of styling in React.

Mark Dalgleish is the co-creator of CSS Modules, lead organiser of MelbJS and progressive enhancement enthusiast.
Captions: 
	00:00:10,780 --> 00:00:16,939
all right let me grab this move around

00:00:14,690 --> 00:00:18,920
sorry about the noise so as you heard my

00:00:16,939 --> 00:00:20,930
name is Mark Douglas and yes I'm from

00:00:18,920 --> 00:00:23,570
Melbourne Australia so if I pass out on

00:00:20,930 --> 00:00:25,730
the stage I apologize in advance I had a

00:00:23,570 --> 00:00:28,220
very long trip to get here and so I'm

00:00:25,730 --> 00:00:30,140
here today to talk to you about the case

00:00:28,220 --> 00:00:32,419
for CSS modules or I guess more

00:00:30,140 --> 00:00:34,670
importantly where it came from

00:00:32,419 --> 00:00:37,460
and what it means for the world of CSS

00:00:34,670 --> 00:00:39,230
and front-end programming and and more

00:00:37,460 --> 00:00:40,790
importantly for for such a smart crowd

00:00:39,230 --> 00:00:44,269
as this you know where can we together

00:00:40,790 --> 00:00:46,339
take it in the future so to really put

00:00:44,269 --> 00:00:48,229
it in its proper context I really want

00:00:46,339 --> 00:00:51,019
to take a step back to the beginning for

00:00:48,229 --> 00:00:53,299
me the beginning of my career for me it

00:00:51,019 --> 00:00:55,220
started with this book now this is from

00:00:53,299 --> 00:00:56,780
what I understand not a classic book it

00:00:55,220 --> 00:01:00,739
was just a random book I picked up off a

00:00:56,780 --> 00:01:02,720
shelf in 99 at the time I wasn't into

00:01:00,739 --> 00:01:04,460
programming really at all I dabbled but

00:01:02,720 --> 00:01:07,100
for me I was really interested in the

00:01:04,460 --> 00:01:10,670
web and the the obvious place to start

00:01:07,100 --> 00:01:13,040
for me was HTML there was a chapter in

00:01:10,670 --> 00:01:15,800
there chapter 13 it was very small that

00:01:13,040 --> 00:01:18,140
introduced CSS I won't read this out but

00:01:15,800 --> 00:01:20,120
the summary really is that they were

00:01:18,140 --> 00:01:21,770
saying that CSS wasn't quite ready for

00:01:20,120 --> 00:01:23,990
primetime but it was really going to

00:01:21,770 --> 00:01:26,900
change things so you know CSS has come a

00:01:23,990 --> 00:01:28,850
long way since then for me I really fell

00:01:26,900 --> 00:01:30,980
in love with CSS around the time I saw

00:01:28,850 --> 00:01:33,590
this project called CSS Zen garden which

00:01:30,980 --> 00:01:35,720
is around to this day and it really

00:01:33,590 --> 00:01:37,730
proved out the the the real idea behind

00:01:35,720 --> 00:01:39,770
CSS which was separating your

00:01:37,730 --> 00:01:42,980
presentation from your semantic markup

00:01:39,770 --> 00:01:44,810
because given a document with semantic

00:01:42,980 --> 00:01:46,370
tags in it you were free to kind of

00:01:44,810 --> 00:01:49,700
change up the way it looked purely by

00:01:46,370 --> 00:01:52,070
changing the CSS in in a world of you

00:01:49,700 --> 00:01:53,990
know table based layouts this was a real

00:01:52,070 --> 00:01:56,060
game changer and it really changed the

00:01:53,990 --> 00:01:59,659
way we think about structuring our our

00:01:56,060 --> 00:02:01,880
websites but that that design pattern

00:01:59,659 --> 00:02:03,080
really highlights a big difference

00:02:01,880 --> 00:02:06,110
between two different ways of working

00:02:03,080 --> 00:02:07,640
which is documents and web apps I'm sure

00:02:06,110 --> 00:02:10,429
most of us in this room are now working

00:02:07,640 --> 00:02:12,560
in the web app space when you work with

00:02:10,429 --> 00:02:14,959
documents the model pioneered by things

00:02:12,560 --> 00:02:18,319
like CSS is in garden and maybe don't

00:02:14,959 --> 00:02:20,030
make as much sense documents have a very

00:02:18,319 --> 00:02:22,400
different way of thinking when you want

00:02:20,030 --> 00:02:24,019
to style the way a document looks think

00:02:22,400 --> 00:02:25,939
globally makes sense you want to be able

00:02:24,019 --> 00:02:29,140
to change every header on the page every

00:02:25,939 --> 00:02:31,250
paragraph every bullet list and so on

00:02:29,140 --> 00:02:33,709
but when it comes to building single

00:02:31,250 --> 00:02:35,780
page apps with CSS you you've got this

00:02:33,709 --> 00:02:38,150
big contrast between the global scope

00:02:35,780 --> 00:02:40,129
the the true nature of CSS and what it

00:02:38,150 --> 00:02:42,530
was designed to solve versus the

00:02:40,129 --> 00:02:43,909
maintenance of a big complex application

00:02:42,530 --> 00:02:45,769
I'm sure we've all been there

00:02:43,909 --> 00:02:47,450
over the years we've seen a lot of

00:02:45,769 --> 00:02:49,579
different approaches come out of the CSS

00:02:47,450 --> 00:02:51,620
community to try and solve this the one

00:02:49,579 --> 00:02:55,129
that really kicked it off was oo CSS but

00:02:51,620 --> 00:02:57,170
we've we've also seen smacks been suit

00:02:55,129 --> 00:02:58,220
and now of course in the react community

00:02:57,170 --> 00:03:01,849
more controversially

00:02:58,220 --> 00:03:05,239
inline styles the big one I think that

00:03:01,849 --> 00:03:06,829
has the most usage in production is been

00:03:05,239 --> 00:03:08,629
block element modifier and it's

00:03:06,829 --> 00:03:10,040
ultimately just a naming convention it's

00:03:08,629 --> 00:03:12,260
it's just putting restrictions on

00:03:10,040 --> 00:03:14,209
yourself so that when you style the page

00:03:12,260 --> 00:03:17,450
you're trying to scope your your

00:03:14,209 --> 00:03:19,280
selectors down to a single class with a

00:03:17,450 --> 00:03:21,349
strict naming convention that tells you

00:03:19,280 --> 00:03:23,510
you're targeting a specific block or

00:03:21,349 --> 00:03:25,099
section of the page elements within it

00:03:23,510 --> 00:03:27,199
and then modifies for the different

00:03:25,099 --> 00:03:29,959
states that they're in and when you use

00:03:27,199 --> 00:03:32,329
that in in a bunch of HTML like this and

00:03:29,959 --> 00:03:33,919
things got quite noisy and I know for a

00:03:32,329 --> 00:03:35,569
lot of people this is where it ended

00:03:33,919 --> 00:03:38,150
they couldn't get past the aesthetic

00:03:35,569 --> 00:03:39,919
aesthetics of it but this came with a

00:03:38,150 --> 00:03:41,540
lot of benefits because it really

00:03:39,919 --> 00:03:44,690
brought some missing structure to our

00:03:41,540 --> 00:03:46,250
CSS and code bases weren't just

00:03:44,690 --> 00:03:48,859
degrading over time but they actually

00:03:46,250 --> 00:03:51,470
became maintainable actually able to be

00:03:48,859 --> 00:03:53,389
refactored which I'm sure many of us

00:03:51,470 --> 00:03:55,220
have experienced the older style of CSS

00:03:53,389 --> 00:03:57,739
was basically impossible to refactor it

00:03:55,220 --> 00:04:00,019
without breaking something and we're now

00:03:57,739 --> 00:04:02,690
well and truly within the age of

00:04:00,019 --> 00:04:05,060
components we've got web components come

00:04:02,690 --> 00:04:07,159
into browsers now polymer is poly

00:04:05,060 --> 00:04:09,290
filling that and angular has it's

00:04:07,159 --> 00:04:11,120
directives but given this crowd I think

00:04:09,290 --> 00:04:13,639
it doesn't really take much explanation

00:04:11,120 --> 00:04:15,199
to say that react is really making a big

00:04:13,639 --> 00:04:17,720
impact in this space right now

00:04:15,199 --> 00:04:19,579
reactors all about components all the

00:04:17,720 --> 00:04:22,729
way down your entire app as a component

00:04:19,579 --> 00:04:25,190
and we don't have special types of

00:04:22,729 --> 00:04:28,460
components like controllers and and so

00:04:25,190 --> 00:04:30,080
on they're all just components to us but

00:04:28,460 --> 00:04:31,430
interestingly enough you know components

00:04:30,080 --> 00:04:32,810
are nothing new they weren't invented

00:04:31,430 --> 00:04:34,130
and react they certainly weren't

00:04:32,810 --> 00:04:35,720
invented on the web but from the

00:04:34,130 --> 00:04:37,850
earliest days of the web we

00:04:35,720 --> 00:04:40,040
a bunch of built-in components of course

00:04:37,850 --> 00:04:42,230
we've got things like select boxes which

00:04:40,040 --> 00:04:43,790
give you a lot of rich interactivity

00:04:42,230 --> 00:04:45,860
with a simple tag you just drop it in

00:04:43,790 --> 00:04:47,780
the page and there's a lot of a lot of

00:04:45,860 --> 00:04:50,570
behavior you get for free

00:04:47,780 --> 00:04:52,460
the html5 date picker is another example

00:04:50,570 --> 00:04:55,610
which varies depending on the platform

00:04:52,460 --> 00:04:57,230
you're on you get a lot of stuff for

00:04:55,610 --> 00:04:59,480
free with these tags and a very very

00:04:57,230 --> 00:05:02,150
simple usage of them just dropping a tag

00:04:59,480 --> 00:05:03,440
in but for the purposes of this talk I

00:05:02,150 --> 00:05:05,660
really want to highlight the fact that

00:05:03,440 --> 00:05:07,610
with when you use these things CSS and

00:05:05,660 --> 00:05:09,770
images are private to the component

00:05:07,610 --> 00:05:11,720
they're completely abstract away from

00:05:09,770 --> 00:05:13,400
you and the implementation details are

00:05:11,720 --> 00:05:15,440
just not important to you you just

00:05:13,400 --> 00:05:18,890
describe that you want a date picker you

00:05:15,440 --> 00:05:20,590
want a select box that of course was not

00:05:18,890 --> 00:05:23,150
true if you use third-party components

00:05:20,590 --> 00:05:26,090
I'm gonna take the canonical example of

00:05:23,150 --> 00:05:27,620
the jQuery UI date picker you know you

00:05:26,090 --> 00:05:30,169
just want a simple date picker and

00:05:27,620 --> 00:05:33,440
you've got over a dozen files lots of

00:05:30,169 --> 00:05:35,240
images CSS JavaScript and you've got to

00:05:33,440 --> 00:05:37,130
navigate this maze of files and figure

00:05:35,240 --> 00:05:39,230
out how to integrate it into your page I

00:05:37,130 --> 00:05:40,850
mean it wasn't too difficult but you

00:05:39,230 --> 00:05:44,090
were really confronted with with all of

00:05:40,850 --> 00:05:46,130
this implementation detail and our tools

00:05:44,090 --> 00:05:48,169
reflected this mindset you know over the

00:05:46,130 --> 00:05:52,010
years we really held on to this notion

00:05:48,169 --> 00:05:55,610
of treating our asset types differently

00:05:52,010 --> 00:05:57,770
in their own little silos gulp is a

00:05:55,610 --> 00:05:59,979
really popular front-end build tool but

00:05:57,770 --> 00:06:01,940
really it encourages this mindset by

00:05:59,979 --> 00:06:04,580
forcing you to think about your asset

00:06:01,940 --> 00:06:07,010
types as a series of disparate streams

00:06:04,580 --> 00:06:09,650
it's very common for you to have a

00:06:07,010 --> 00:06:11,930
JavaScript build task that might run it

00:06:09,650 --> 00:06:14,450
through browserify and uglify and so on

00:06:11,930 --> 00:06:16,640
you have your CSS task that's only

00:06:14,450 --> 00:06:19,250
thinking about you CSS your images and

00:06:16,640 --> 00:06:22,280
so on and when you look at a tool like

00:06:19,250 --> 00:06:24,020
sass for example and this again is is

00:06:22,280 --> 00:06:26,060
something that's purely focused on only

00:06:24,020 --> 00:06:29,060
one asset type it's thinking about your

00:06:26,060 --> 00:06:31,220
CSS and you know big complex

00:06:29,060 --> 00:06:33,440
applications have trees of CSS that

00:06:31,220 --> 00:06:35,810
depend on other smaller CSS files and so

00:06:33,440 --> 00:06:37,610
what that ends up creating in your

00:06:35,810 --> 00:06:40,930
project is something like this in index

00:06:37,610 --> 00:06:43,280
S CSS which is just a wall of imports

00:06:40,930 --> 00:06:45,050
pulling in all the smaller files and

00:06:43,280 --> 00:06:47,070
then you have a big tree of CSS but no

00:06:45,050 --> 00:06:49,260
other asset types

00:06:47,070 --> 00:06:51,810
so then what is what is talling like it

00:06:49,260 --> 00:06:54,240
look like in the component age in the

00:06:51,810 --> 00:06:56,220
react community the de facto standard at

00:06:54,240 --> 00:06:59,190
the moment for built all seems to be

00:06:56,220 --> 00:07:00,630
webpack and that that first time you

00:06:59,190 --> 00:07:02,010
really get your head around webpack it

00:07:00,630 --> 00:07:03,800
completely changes the way you think

00:07:02,010 --> 00:07:05,940
about structuring your applications

00:07:03,800 --> 00:07:09,960
because what webpack does it makes you

00:07:05,940 --> 00:07:11,430
think about that single dependency tree

00:07:09,960 --> 00:07:14,010
starting right at the root of your

00:07:11,430 --> 00:07:15,930
index.js file and traversing all the way

00:07:14,010 --> 00:07:18,510
through your different asset types so

00:07:15,930 --> 00:07:20,729
with with reacted it it's very common

00:07:18,510 --> 00:07:23,940
when it's used with webpack to make the

00:07:20,729 --> 00:07:26,160
first line of a component the require

00:07:23,940 --> 00:07:28,139
call to bring in the required CSS file

00:07:26,160 --> 00:07:30,120
to make the component that we're

00:07:28,139 --> 00:07:31,740
exporting actually work so you will see

00:07:30,120 --> 00:07:33,360
here we've got class names starting with

00:07:31,740 --> 00:07:35,840
my component in order to make that work

00:07:33,360 --> 00:07:38,520
we need to pull in its related CSS file

00:07:35,840 --> 00:07:40,770
for the first time the relationship

00:07:38,520 --> 00:07:42,630
between this component and the CSS it's

00:07:40,770 --> 00:07:45,419
needed that's needed to render it

00:07:42,630 --> 00:07:48,419
correctly is is right there in the code

00:07:45,419 --> 00:07:50,070
rather than in your head that makes that

00:07:48,419 --> 00:07:52,080
that does wonders for maintainability

00:07:50,070 --> 00:07:56,010
and really helps the code base scale

00:07:52,080 --> 00:07:58,080
really really well well at the same time

00:07:56,010 --> 00:07:59,580
you maintain that simple interface that

00:07:58,080 --> 00:08:01,800
we experience with the built-in

00:07:59,580 --> 00:08:04,530
components where if you want to use this

00:08:01,800 --> 00:08:06,120
component you just import it you know in

00:08:04,530 --> 00:08:07,919
JavaScript with the react flavor that we

00:08:06,120 --> 00:08:09,690
have here and you can just export it

00:08:07,919 --> 00:08:11,550
render it out and you don't have to

00:08:09,690 --> 00:08:13,800
worry about the internals and the fact

00:08:11,550 --> 00:08:16,740
that it might use a bunch of CSS files

00:08:13,800 --> 00:08:18,960
or one or none or lots of images or

00:08:16,740 --> 00:08:20,550
fonts we don't really have to care when

00:08:18,960 --> 00:08:24,419
we actually want to import it and render

00:08:20,550 --> 00:08:27,330
it now I work at a company in in

00:08:24,419 --> 00:08:28,680
Australia called seek which which the

00:08:27,330 --> 00:08:31,979
number one job site they're they're a

00:08:28,680 --> 00:08:36,089
household name and I nearly fell off the

00:08:31,979 --> 00:08:39,860
stage okay there's a big big piece

00:08:36,089 --> 00:08:42,959
missing here okay I'll be careful and

00:08:39,860 --> 00:08:45,120
now we we were very interested in react

00:08:42,959 --> 00:08:47,100
not because we could jump on a bandwagon

00:08:45,120 --> 00:08:49,940
because it was actually solving some

00:08:47,100 --> 00:08:53,100
real problems for us we wanted to have

00:08:49,940 --> 00:08:54,839
rich progressive single page apps we

00:08:53,100 --> 00:08:57,000
wanted to have all the benefits of a

00:08:54,839 --> 00:08:59,780
single page app where it felt fluid like

00:08:57,000 --> 00:09:01,670
a native application but it had that

00:08:59,780 --> 00:09:04,670
solid foundation of a server rendered

00:09:01,670 --> 00:09:07,310
app where it's completely crawlable you

00:09:04,670 --> 00:09:08,600
could you could view source and see all

00:09:07,310 --> 00:09:09,470
the content you could see on the screen

00:09:08,600 --> 00:09:11,630
was right there

00:09:09,470 --> 00:09:13,490
it meant performance was much better

00:09:11,630 --> 00:09:15,170
because the first thing you see is not a

00:09:13,490 --> 00:09:17,270
loading indicator it's the actual jobs

00:09:15,170 --> 00:09:19,310
you were searching for its overall

00:09:17,270 --> 00:09:22,190
something that really opened up some

00:09:19,310 --> 00:09:24,110
amazing new doors for us and so we we

00:09:22,190 --> 00:09:27,020
started working on this at a at a work

00:09:24,110 --> 00:09:28,430
hackathon and for us there were some

00:09:27,020 --> 00:09:31,220
really important requirements to make

00:09:28,430 --> 00:09:33,020
that work we needed server rendered CSS

00:09:31,220 --> 00:09:35,240
which meant our CSS couldn't depend on

00:09:33,020 --> 00:09:38,260
on on any anything running in the

00:09:35,240 --> 00:09:41,450
browser like JavaScript affecting styles

00:09:38,260 --> 00:09:44,540
for that we needed hover focus and

00:09:41,450 --> 00:09:46,220
active so that the page actually came to

00:09:44,540 --> 00:09:48,710
life immediately it there wasn't a delay

00:09:46,220 --> 00:09:50,180
before it became interactive media

00:09:48,710 --> 00:09:51,770
queries of course are really important

00:09:50,180 --> 00:09:53,480
for this because if you you render the

00:09:51,770 --> 00:09:55,940
page on your phone it needs to look

00:09:53,480 --> 00:09:57,920
correct right off the bat we want to

00:09:55,940 --> 00:09:59,540
have CSS animation there so that when

00:09:57,920 --> 00:10:02,810
things were loading we could have nice

00:09:59,540 --> 00:10:05,570
fluid loading indicators and more

00:10:02,810 --> 00:10:07,040
interestingly perhaps controversially we

00:10:05,570 --> 00:10:09,140
wanted to at least have the option to

00:10:07,040 --> 00:10:10,580
have pseudo classes for non j/s

00:10:09,140 --> 00:10:12,260
interactions

00:10:10,580 --> 00:10:14,150
now I'm sure quite a few of you are

00:10:12,260 --> 00:10:16,010
wondering what exactly I mean by that

00:10:14,150 --> 00:10:19,220
and so I prepared a little demonstration

00:10:16,010 --> 00:10:20,930
here I have this little cartoon rocket

00:10:19,220 --> 00:10:23,089
sitting on the moon I'm just going to

00:10:20,930 --> 00:10:24,410
click it and you'll see it launches and

00:10:23,089 --> 00:10:27,290
we've got a few things moving at

00:10:24,410 --> 00:10:29,390
different speeds now that's not terribly

00:10:27,290 --> 00:10:31,400
exciting except for the fact that that

00:10:29,390 --> 00:10:33,830
required no JavaScript that was just a

00:10:31,400 --> 00:10:35,270
big checkbox hack and if you're

00:10:33,830 --> 00:10:36,890
unfamiliar with checkbox hacks let me

00:10:35,270 --> 00:10:41,810
just click the check box again and

00:10:36,890 --> 00:10:44,120
reverse it so that rocket was actually a

00:10:41,810 --> 00:10:46,730
label for a check box and if you know

00:10:44,120 --> 00:10:49,490
anything about HTML you know that

00:10:46,730 --> 00:10:51,530
clicking a label also changes the value

00:10:49,490 --> 00:10:52,910
of the check box and so when you play

00:10:51,530 --> 00:10:54,410
with this technique what you can do is

00:10:52,910 --> 00:10:56,960
you know more practically you can make

00:10:54,410 --> 00:10:59,270
it so that your menu on mobile is hidden

00:10:56,960 --> 00:11:01,310
off-screen and when you click the little

00:10:59,270 --> 00:11:02,990
hamburger menu icon what you're actually

00:11:01,310 --> 00:11:05,390
doing is clicking on a label for a

00:11:02,990 --> 00:11:07,250
checkbox that changes that makes that

00:11:05,390 --> 00:11:08,870
second rule apply which is getting rid

00:11:07,250 --> 00:11:11,120
of the transform you can transition from

00:11:08,870 --> 00:11:13,040
one state to another now this is really

00:11:11,120 --> 00:11:13,340
important for those primary interactions

00:11:13,040 --> 00:11:15,140
something

00:11:13,340 --> 00:11:16,880
like a menu where you don't want it you

00:11:15,140 --> 00:11:18,950
don't want to block users from opening

00:11:16,880 --> 00:11:21,020
the menu until four hundred kilobytes of

00:11:18,950 --> 00:11:22,670
JavaScript downloads and it makes a lot

00:11:21,020 --> 00:11:24,680
more sense to just make it a standard

00:11:22,670 --> 00:11:26,330
part of the styling and that's something

00:11:24,680 --> 00:11:27,980
that we definitely wanted to leverage

00:11:26,330 --> 00:11:32,180
for the primary interactions in our app

00:11:27,980 --> 00:11:34,880
so interesting enough for us this was in

00:11:32,180 --> 00:11:36,650
late 2014 and something else really

00:11:34,880 --> 00:11:38,030
important happened at this time there

00:11:36,650 --> 00:11:41,540
was a presentation from Christopher

00:11:38,030 --> 00:11:43,550
Christopher shadow from Facebook and he

00:11:41,540 --> 00:11:45,500
said that CSS has fundamental flaws at

00:11:43,550 --> 00:11:48,590
scale that can be solved by writing

00:11:45,500 --> 00:11:50,630
styles in JavaScript this is the the

00:11:48,590 --> 00:11:52,220
most memorable slide from that talk

00:11:50,630 --> 00:11:55,160
which which ran through the problems

00:11:52,220 --> 00:11:57,800
with CSS at scale and this this one

00:11:55,160 --> 00:11:59,680
slide caused a Cambrian explosion much

00:11:57,800 --> 00:12:02,270
like we saw with flux implementations

00:11:59,680 --> 00:12:04,430
lots of people trying to solve the

00:12:02,270 --> 00:12:05,600
problem of CSS at scale and by

00:12:04,430 --> 00:12:08,240
addressing these points in particular

00:12:05,600 --> 00:12:10,430
and I'm certainly one of those people

00:12:08,240 --> 00:12:13,340
that that really had to reevaluate what

00:12:10,430 --> 00:12:14,720
we were doing with CSS and this I was

00:12:13,340 --> 00:12:19,490
really excited about the future that

00:12:14,720 --> 00:12:20,510
this opened up McKellar Bertolli hope I

00:12:19,490 --> 00:12:22,880
said that right who I believe is

00:12:20,510 --> 00:12:24,680
watching on the stream now he created a

00:12:22,880 --> 00:12:27,500
really great project called CSS in

00:12:24,680 --> 00:12:28,820
jeaious that runs through all of the

00:12:27,500 --> 00:12:30,410
different projects that people have

00:12:28,820 --> 00:12:32,720
submitted to him that are attacking

00:12:30,410 --> 00:12:34,430
these exact problems and you can go have

00:12:32,720 --> 00:12:36,200
a look now that there's this is just the

00:12:34,430 --> 00:12:38,060
top of a very long table all the

00:12:36,200 --> 00:12:40,760
different projects their versions the

00:12:38,060 --> 00:12:42,740
different features that they have it's

00:12:40,760 --> 00:12:44,540
worth noting that that more X's doesn't

00:12:42,740 --> 00:12:48,290
mean it's better it's just there's

00:12:44,540 --> 00:12:51,100
trade-offs here now for me the the

00:12:48,290 --> 00:12:53,630
library that really inspired me early on

00:12:51,100 --> 00:12:55,340
was react style by andre pop who i

00:12:53,630 --> 00:12:59,810
believe is in this room can you raise

00:12:55,340 --> 00:13:00,740
your hand yeah yeah I thank you I didn't

00:12:59,810 --> 00:13:03,590
know he was gonna be here so that's

00:13:00,740 --> 00:13:06,410
really cool so react style was the first

00:13:03,590 --> 00:13:09,140
CSS and J's library that I kind of had a

00:13:06,410 --> 00:13:10,970
close look at and I run Mel bas in

00:13:09,140 --> 00:13:12,440
Melbourne and I actually got one of one

00:13:10,970 --> 00:13:14,480
of our regulars to give a talk on react

00:13:12,440 --> 00:13:15,950
style and when this was brand new and

00:13:14,480 --> 00:13:18,140
and there was a lot of buzz in the

00:13:15,950 --> 00:13:20,150
effort for this approach and so

00:13:18,140 --> 00:13:22,580
basically the idea I mean it's a it's

00:13:20,150 --> 00:13:23,930
kind of old news now but the idea is

00:13:22,580 --> 00:13:25,640
that you would build up your stylesheet

00:13:23,930 --> 00:13:26,480
in JavaScript and then you could just

00:13:25,640 --> 00:13:29,389
attach it in

00:13:26,480 --> 00:13:32,600
to the elements in in a very familiar

00:13:29,389 --> 00:13:34,639
fashion but for me what what really sold

00:13:32,600 --> 00:13:36,560
me on it is that you could do server

00:13:34,639 --> 00:13:38,420
rented CSS because it came with a web

00:13:36,560 --> 00:13:41,449
pack plug-in to extract those styles and

00:13:38,420 --> 00:13:42,769
generate CSS files that was really

00:13:41,449 --> 00:13:44,120
exciting to me because it meant it was

00:13:42,769 --> 00:13:46,070
going some way to addressing these

00:13:44,120 --> 00:13:47,240
problems that I'd raised with you know

00:13:46,070 --> 00:13:50,690
for us we're really important in our

00:13:47,240 --> 00:13:53,060
project but there was again some

00:13:50,690 --> 00:13:54,889
trade-offs with this approach it didn't

00:13:53,060 --> 00:13:57,290
have media query support it does now but

00:13:54,889 --> 00:13:59,870
at the time it didn't didn't have any

00:13:57,290 --> 00:14:02,839
CSS animations which was going to cause

00:13:59,870 --> 00:14:05,930
trouble for us but most importantly as

00:14:02,839 --> 00:14:07,730
you saw with my crazy rocket example we

00:14:05,930 --> 00:14:09,980
needed to do classes and unfortunately

00:14:07,730 --> 00:14:11,510
react style made a choice of not

00:14:09,980 --> 00:14:13,670
supporting these and this was actually a

00:14:11,510 --> 00:14:15,589
common thread if you really want to go

00:14:13,670 --> 00:14:17,480
all in on inline styles it makes sense

00:14:15,589 --> 00:14:18,860
to not support pseudo classes so there

00:14:17,480 --> 00:14:21,829
was there's a bit of a challenge for us

00:14:18,860 --> 00:14:22,970
in adopting these approaches and yet

00:14:21,829 --> 00:14:24,470
you know when we looked at these things

00:14:22,970 --> 00:14:25,970
and we really thought about what they

00:14:24,470 --> 00:14:27,290
were solving what they were doing for us

00:14:25,970 --> 00:14:29,360
particularly the long term

00:14:27,290 --> 00:14:31,639
maintainability of a project and we

00:14:29,360 --> 00:14:33,620
couldn't help but want it like it didn't

00:14:31,639 --> 00:14:35,180
solve all of our problems but there was

00:14:33,620 --> 00:14:39,529
just something to it right like it made

00:14:35,180 --> 00:14:40,910
a lot of sense so for us we found

00:14:39,529 --> 00:14:42,199
ourselves kind of caught between these

00:14:40,910 --> 00:14:44,870
two worlds and we were asking ourselves

00:14:42,199 --> 00:14:46,910
how do we embrace the inline style

00:14:44,870 --> 00:14:49,880
mindset even though we're stuck in this

00:14:46,910 --> 00:14:53,029
battled world of regular CSS we don't

00:14:49,880 --> 00:14:54,199
have CSS when you clarify so for us the

00:14:53,029 --> 00:14:56,120
answer lay in something I've already

00:14:54,199 --> 00:14:59,360
touched on which has been block element

00:14:56,120 --> 00:15:01,699
modifier so the idea for us was was

00:14:59,360 --> 00:15:03,680
really to recognize that that the

00:15:01,699 --> 00:15:06,560
abstraction in Bend the block is really

00:15:03,680 --> 00:15:08,060
the same as a component it's really the

00:15:06,560 --> 00:15:09,680
same thing and that means these two

00:15:08,060 --> 00:15:10,750
approaches really go well together

00:15:09,680 --> 00:15:13,519
nicely

00:15:10,750 --> 00:15:15,110
so for us we followed a very strict rule

00:15:13,519 --> 00:15:17,660
which was that we would never use a

00:15:15,110 --> 00:15:20,269
block outside a component of the same

00:15:17,660 --> 00:15:23,060
name so what that meant is you for any

00:15:20,269 --> 00:15:24,709
given CSS file in the our application

00:15:23,060 --> 00:15:26,240
you would see right next to it is the

00:15:24,709 --> 00:15:28,130
JavaScript for it with the same file

00:15:26,240 --> 00:15:30,019
name and that formed a component

00:15:28,130 --> 00:15:32,449
boundary so that was our react component

00:15:30,019 --> 00:15:33,800
held together with webpack and I'm sure

00:15:32,449 --> 00:15:35,510
it goes without saying that this of

00:15:33,800 --> 00:15:37,220
course scales nicely into a tree

00:15:35,510 --> 00:15:39,290
structure that forms the basis of your

00:15:37,220 --> 00:15:40,170
whole application but it's it's it's

00:15:39,290 --> 00:15:42,089
fractal all

00:15:40,170 --> 00:15:44,279
you've got CSS files for each component

00:15:42,089 --> 00:15:45,570
all the way through your application and

00:15:44,279 --> 00:15:47,579
if you drill down to the file system

00:15:45,570 --> 00:15:49,320
again you can see that you've got this

00:15:47,579 --> 00:15:51,149
repetition in name you've got the same

00:15:49,320 --> 00:15:52,769
you got the component directory and

00:15:51,149 --> 00:15:55,050
inside you've got its JavaScript and

00:15:52,769 --> 00:15:58,350
it's matching CSS file any images it

00:15:55,050 --> 00:16:01,230
needs a scope there and you look into

00:15:58,350 --> 00:16:03,540
that CSS file and all you'll see a rules

00:16:01,230 --> 00:16:05,279
of the same name everything's prefixed

00:16:03,540 --> 00:16:07,829
with that exact same component name and

00:16:05,279 --> 00:16:10,949
this makes maintainability much much

00:16:07,829 --> 00:16:12,360
better but for us one thing that's

00:16:10,949 --> 00:16:14,310
really interesting about this approach

00:16:12,360 --> 00:16:17,100
is we found that it plays really nicely

00:16:14,310 --> 00:16:19,110
with the CSS ecosystem with a lot of

00:16:17,100 --> 00:16:20,339
these CSS and JavaScript approaches they

00:16:19,110 --> 00:16:22,019
were having to kind of reinvent the

00:16:20,339 --> 00:16:23,699
wheel in a lot of ways but for us

00:16:22,019 --> 00:16:25,079
because we were using webpack and we

00:16:23,699 --> 00:16:27,120
were using loaders we could just chain

00:16:25,079 --> 00:16:28,860
them together here you can see you know

00:16:27,120 --> 00:16:31,380
CSS loader is right in the middle of

00:16:28,860 --> 00:16:33,000
less loader and autoprefixer loader so

00:16:31,380 --> 00:16:35,250
we could use pre processors we could

00:16:33,000 --> 00:16:38,160
auto prefix our classes for cross

00:16:35,250 --> 00:16:40,139
browser compatibility we could plug it

00:16:38,160 --> 00:16:42,630
in to talk like linting tools and

00:16:40,139 --> 00:16:44,279
whatever else you want to use for us

00:16:42,630 --> 00:16:46,290
that was a real productivity boost and

00:16:44,279 --> 00:16:47,490
it meant that we could bet more safely

00:16:46,290 --> 00:16:51,000
on this approach in the long term

00:16:47,490 --> 00:16:56,010
whereas whereas CSS and JavaScript was

00:16:51,000 --> 00:16:58,560
still very much unknown territory this

00:16:56,010 --> 00:17:00,180
made it very easy for us to get people

00:16:58,560 --> 00:17:02,160
on board internally because you look at

00:17:00,180 --> 00:17:04,919
this and it just felt like regular old

00:17:02,160 --> 00:17:08,010
CSS and you were getting the this crazy

00:17:04,919 --> 00:17:09,360
boost in maintainability but it didn't

00:17:08,010 --> 00:17:12,660
feel like something really really

00:17:09,360 --> 00:17:14,459
different and I wrote about our approach

00:17:12,660 --> 00:17:16,199
in a blog post called block element

00:17:14,459 --> 00:17:18,150
modifying your JavaScript components I

00:17:16,199 --> 00:17:20,160
was really excited about this approach

00:17:18,150 --> 00:17:21,660
and I really wanted to share it with the

00:17:20,160 --> 00:17:24,230
world and I thought this is where we

00:17:21,660 --> 00:17:26,699
were gonna stay for quite a while

00:17:24,230 --> 00:17:30,360
but something interesting happened on

00:17:26,699 --> 00:17:33,780
the side a new feature landed in web

00:17:30,360 --> 00:17:35,760
pack CSS loader called local scope and

00:17:33,780 --> 00:17:39,480
basically what local scope did was

00:17:35,760 --> 00:17:41,850
change everything so if you look at the

00:17:39,480 --> 00:17:44,850
top of that file we had earlier where

00:17:41,850 --> 00:17:46,860
you would require a CSS file that's very

00:17:44,850 --> 00:17:49,309
uncommon in node land right to just

00:17:46,860 --> 00:17:52,049
require something as a pure side-effect

00:17:49,309 --> 00:17:53,450
instead with with local scope you could

00:17:52,049 --> 00:17:56,149
actually import styles

00:17:53,450 --> 00:17:57,620
CSS file now the first reaction you

00:17:56,149 --> 00:18:00,440
might have looking at that second line

00:17:57,620 --> 00:18:02,480
is what is that Styles thing of Le way

00:18:00,440 --> 00:18:05,000
to you know if I'm importing something

00:18:02,480 --> 00:18:07,549
from a CSS file like what is it is it

00:18:05,000 --> 00:18:10,370
the contents of the file it's a bit

00:18:07,549 --> 00:18:13,789
strange so to to make sense of that line

00:18:10,370 --> 00:18:17,210
we're first going to look at the CSS so

00:18:13,789 --> 00:18:19,669
this new syntax was introduced you you

00:18:17,210 --> 00:18:21,620
wrap this colon local around a selector

00:18:19,669 --> 00:18:24,649
so here we've got a header and a footer

00:18:21,620 --> 00:18:28,279
class and that had some interesting

00:18:24,649 --> 00:18:30,110
effects on on the CSS so what that meant

00:18:28,279 --> 00:18:32,899
is that when you imported that Styles

00:18:30,110 --> 00:18:34,760
object from the CSS file you now had an

00:18:32,899 --> 00:18:36,799
object with references to the header and

00:18:34,760 --> 00:18:38,690
the footer so you can see now in our div

00:18:36,799 --> 00:18:42,200
we're attaching classes for Styles

00:18:38,690 --> 00:18:43,730
header and styles dot footer it's very

00:18:42,200 --> 00:18:45,590
it's much more explicit now the

00:18:43,730 --> 00:18:46,789
relationship between the classes that

00:18:45,590 --> 00:18:49,490
we're getting from that file and how

00:18:46,789 --> 00:18:52,580
they how they relate to the Dom in our

00:18:49,490 --> 00:18:54,380
react component to make a bit more sense

00:18:52,580 --> 00:18:56,269
out of this if you look at what came out

00:18:54,380 --> 00:18:59,179
the other end when you compile the CSS

00:18:56,269 --> 00:19:01,460
what started as these locally scoped you

00:18:59,179 --> 00:19:06,230
know human readable classes turned into

00:19:01,460 --> 00:19:07,760
globally unique hashes the big thing to

00:19:06,230 --> 00:19:10,010
realize with this now is that we have no

00:19:07,760 --> 00:19:11,299
more naming collisions you're free to

00:19:10,010 --> 00:19:13,130
call things whatever you want you can

00:19:11,299 --> 00:19:13,970
have twelve header classes in your app

00:19:13,130 --> 00:19:16,850
and as long as they're in different

00:19:13,970 --> 00:19:18,139
files you're okay just like when we work

00:19:16,850 --> 00:19:20,029
in JavaScript and you don't have to

00:19:18,139 --> 00:19:22,700
worry about clashing variable names in

00:19:20,029 --> 00:19:25,850
your modules it was much much easier for

00:19:22,700 --> 00:19:27,860
us to manage and that stars object all

00:19:25,850 --> 00:19:29,510
it did was map that human readable name

00:19:27,860 --> 00:19:31,880
that you provided to the globally unique

00:19:29,510 --> 00:19:33,830
hash so when you say that this div has a

00:19:31,880 --> 00:19:35,600
class of Styles dot header what you're

00:19:33,830 --> 00:19:36,710
actually saying is its class is that

00:19:35,600 --> 00:19:39,980
thing there which I'm not going to

00:19:36,710 --> 00:19:41,389
attempt to read out now if for some

00:19:39,980 --> 00:19:42,799
reason you know particularly in

00:19:41,389 --> 00:19:44,269
development you want to have nice and

00:19:42,799 --> 00:19:46,070
names for these classes it was

00:19:44,269 --> 00:19:47,809
completely configurable so you could

00:19:46,070 --> 00:19:50,090
tell CSS loader that you want the local

00:19:47,809 --> 00:19:52,519
identify name to be the name of the file

00:19:50,090 --> 00:19:53,960
two underscores and then the name of the

00:19:52,519 --> 00:19:55,639
local so effectively what you're doing

00:19:53,960 --> 00:19:57,710
here is you're getting that that Ben

00:19:55,639 --> 00:19:59,450
notation for free out of your build

00:19:57,710 --> 00:20:01,850
system and was it was much much easier

00:19:59,450 --> 00:20:06,139
to maintain much easier to look at as

00:20:01,850 --> 00:20:07,130
well now it's seek we were already sort

00:20:06,139 --> 00:20:09,679
of working with this Ben

00:20:07,130 --> 00:20:12,020
style locally scoping everything to the

00:20:09,679 --> 00:20:14,270
component as I talked about before so as

00:20:12,020 --> 00:20:16,700
soon as we saw this feature we couldn't

00:20:14,270 --> 00:20:18,919
help but go all-in and it really didn't

00:20:16,700 --> 00:20:20,990
take long for us to port the entire code

00:20:18,919 --> 00:20:24,679
base over to using local scope it was a

00:20:20,990 --> 00:20:26,780
natural fit but what that resulted is in

00:20:24,679 --> 00:20:29,240
is something really interesting and we

00:20:26,780 --> 00:20:30,740
had basically any file any CSS file in

00:20:29,240 --> 00:20:32,929
the application that you looked at would

00:20:30,740 --> 00:20:35,450
just be a wall of local everything local

00:20:32,929 --> 00:20:37,600
local local all the way down eventually

00:20:35,450 --> 00:20:40,070
you'd come to the very odd exception

00:20:37,600 --> 00:20:42,830
like in the in the case of react when we

00:20:40,070 --> 00:20:44,510
were using CSS transition group what you

00:20:42,830 --> 00:20:46,429
would do with CSS transition group is

00:20:44,510 --> 00:20:47,780
styled the classes that introduced

00:20:46,429 --> 00:20:50,450
differently in those classes are

00:20:47,780 --> 00:20:52,730
globally scoped so we wouldn't localize

00:20:50,450 --> 00:20:55,490
those but that was really the exception

00:20:52,730 --> 00:20:57,260
now we looked at that and a natural

00:20:55,490 --> 00:21:00,110
question started to come out given you

00:20:57,260 --> 00:21:01,340
know the sheer number of these local

00:21:00,110 --> 00:21:04,370
selectors throughout our app we said

00:21:01,340 --> 00:21:05,950
what what if locally scoped CSS was the

00:21:04,370 --> 00:21:07,940
default you know you look at any other

00:21:05,950 --> 00:21:10,130
tool that we were working with you know

00:21:07,940 --> 00:21:11,720
JavaScript if you wanted something to be

00:21:10,130 --> 00:21:13,970
global you had to go out of your way to

00:21:11,720 --> 00:21:15,559
put it on window it was not something

00:21:13,970 --> 00:21:17,120
that happened by accident you you very

00:21:15,559 --> 00:21:20,000
much had to go out of your way to

00:21:17,120 --> 00:21:22,520
globalize something why is our CSS any

00:21:20,000 --> 00:21:24,049
different so what we did is we opened up

00:21:22,520 --> 00:21:26,240
a new tab in our editor and we

00:21:24,049 --> 00:21:28,250
experimented just with the API we said

00:21:26,240 --> 00:21:30,559
what if what if we could transform this

00:21:28,250 --> 00:21:33,679
automatically what if we could drop all

00:21:30,559 --> 00:21:34,970
of that local all that noise around all

00:21:33,679 --> 00:21:38,120
of the selectors and just write the

00:21:34,970 --> 00:21:41,210
classes you know if we needed to have a

00:21:38,120 --> 00:21:42,590
global class in in that odd exception we

00:21:41,210 --> 00:21:45,260
flipped the model around we said what if

00:21:42,590 --> 00:21:46,970
we had : global so in this case we're

00:21:45,260 --> 00:21:49,070
saying our locally scoped panel class

00:21:46,970 --> 00:21:52,100
nested inside it is a global class

00:21:49,070 --> 00:21:54,049
called transition active enter and this

00:21:52,100 --> 00:21:56,360
worked amazingly well for us because in

00:21:54,049 --> 00:21:59,870
our app we only had global styles in the

00:21:56,360 --> 00:22:01,909
normalized CSS and in these transition

00:21:59,870 --> 00:22:03,919
classes and that was it everything else

00:22:01,909 --> 00:22:05,960
was locally scoped and so with this

00:22:03,919 --> 00:22:09,020
simple change this would make things a

00:22:05,960 --> 00:22:11,150
lot better for our code base so luckily

00:22:09,020 --> 00:22:12,530
there's a really fantastic tool I'm sure

00:22:11,150 --> 00:22:15,440
a lot of you are familiar with it called

00:22:12,530 --> 00:22:18,409
post CSS and they call themselves a post

00:22:15,440 --> 00:22:19,700
processor but basically basically it's a

00:22:18,409 --> 00:22:20,450
preprocessor that you can write plug-ins

00:22:19,700 --> 00:22:22,970
for

00:22:20,450 --> 00:22:25,909
in JavaScript and so with with very

00:22:22,970 --> 00:22:27,830
little code and not a lot of time we

00:22:25,909 --> 00:22:30,379
created this simple plugin called post

00:22:27,830 --> 00:22:32,570
CSS local scope and its job was just to

00:22:30,379 --> 00:22:34,519
make that transformation that we talked

00:22:32,570 --> 00:22:37,700
about earlier which is turning dot class

00:22:34,519 --> 00:22:40,399
into : local class and of course it also

00:22:37,700 --> 00:22:43,429
had room for : global so it would if it

00:22:40,399 --> 00:22:45,109
saw a global notation around a class it

00:22:43,429 --> 00:22:48,580
would leave that untouched it wouldn't

00:22:45,109 --> 00:22:48,580
it would leave that as a global class

00:22:48,730 --> 00:22:55,519
this work that we put into this this

00:22:51,789 --> 00:22:57,980
this little project and all the thinking

00:22:55,519 --> 00:23:00,850
behind it I wrote up about it in another

00:22:57,980 --> 00:23:03,109
blog post called the end of global CSS

00:23:00,850 --> 00:23:05,869
now I was really surprised to see that

00:23:03,109 --> 00:23:08,389
this this blog post really took off and

00:23:05,869 --> 00:23:11,629
got a lot of people talking about it but

00:23:08,389 --> 00:23:13,369
for me most importantly it got the

00:23:11,629 --> 00:23:15,859
attention of Tobias copper's who created

00:23:13,369 --> 00:23:18,559
web pack he reached out to me on Twitter

00:23:15,859 --> 00:23:22,249
and said I hope it's ok if I integrate

00:23:18,559 --> 00:23:24,049
post CSS local scope into the CSS loader

00:23:22,249 --> 00:23:27,769
and of course what am I going to say to

00:23:24,049 --> 00:23:29,659
that it's a definite yes so shortly

00:23:27,769 --> 00:23:31,759
after that we got an experimental

00:23:29,659 --> 00:23:32,960
feature in CSS loader called module mode

00:23:31,759 --> 00:23:35,320
you just all you had to do was add

00:23:32,960 --> 00:23:38,029
question mark module to your CSS loader

00:23:35,320 --> 00:23:42,830
and you would get start to get this

00:23:38,029 --> 00:23:45,200
built in in my blog post another thing I

00:23:42,830 --> 00:23:47,059
sort of raised as an idea for the future

00:23:45,200 --> 00:23:48,649
I said that we could start generating

00:23:47,059 --> 00:23:51,080
shared classes between components

00:23:48,649 --> 00:23:52,850
automatically treating style reuse as an

00:23:51,080 --> 00:23:55,609
optimization at compile time

00:23:52,850 --> 00:23:57,379
and what I meant by that is if you look

00:23:55,609 --> 00:23:59,210
at that Styles object that you employed

00:23:57,379 --> 00:24:01,399
there's this one-to-one mapping if you

00:23:59,210 --> 00:24:04,850
say Stars dot foo is actually mapped to

00:24:01,399 --> 00:24:06,409
this global my component foo your

00:24:04,850 --> 00:24:07,840
component actually doesn't really care

00:24:06,409 --> 00:24:10,340
about the implementation of that class

00:24:07,840 --> 00:24:12,679
so you could just as easily swap this

00:24:10,340 --> 00:24:14,899
out for a many to one you've got this

00:24:12,679 --> 00:24:16,909
you've got this one style name that

00:24:14,899 --> 00:24:19,279
actually maps to three classes or it

00:24:16,909 --> 00:24:21,080
could be as many as you want and so that

00:24:19,279 --> 00:24:22,909
creates a lot of interesting room to

00:24:21,080 --> 00:24:26,059
kind of reflect your CSS without even

00:24:22,909 --> 00:24:29,480
touching your markup at all

00:24:26,059 --> 00:24:31,070
Tobias copper's is a machine he he takes

00:24:29,480 --> 00:24:32,610
these ideas these threads and just

00:24:31,070 --> 00:24:35,130
builds entire new features

00:24:32,610 --> 00:24:36,900
every night and so to my excitement we

00:24:35,130 --> 00:24:40,710
had this new feature composition that

00:24:36,900 --> 00:24:42,030
came out basically within a few days so

00:24:40,710 --> 00:24:43,440
what you would do is you would take this

00:24:42,030 --> 00:24:45,330
class and if you wanted to say it was

00:24:43,440 --> 00:24:46,860
actually made up of other classes you

00:24:45,330 --> 00:24:49,799
would just say that it composes the

00:24:46,860 --> 00:24:52,679
heading class from typography dot CSS it

00:24:49,799 --> 00:24:54,390
composes the box clasp from layout and

00:24:52,679 --> 00:24:55,590
then when you use this class in your app

00:24:54,390 --> 00:24:57,210
it's actually going to be made up of

00:24:55,590 --> 00:25:00,990
three classes the original class you

00:24:57,210 --> 00:25:02,100
defined and the two your composing so if

00:25:00,990 --> 00:25:04,290
you look at those files they're just

00:25:02,100 --> 00:25:07,080
regular CSS again with no special syntax

00:25:04,290 --> 00:25:08,280
you just write dot heading dot box the

00:25:07,080 --> 00:25:10,559
kind of classes that in a typical

00:25:08,280 --> 00:25:12,650
application are way too generic and

00:25:10,559 --> 00:25:15,900
would cause a lot of issues with CSS

00:25:12,650 --> 00:25:19,130
written with this special module syntax

00:25:15,900 --> 00:25:21,000
we completely sidestep those issues so

00:25:19,130 --> 00:25:23,010
again when you look at that Styles

00:25:21,000 --> 00:25:24,600
object it's really just three classes

00:25:23,010 --> 00:25:29,250
mapped to a single name that you insert

00:25:24,600 --> 00:25:31,350
into your into your document as we were

00:25:29,250 --> 00:25:32,940
working on on these features I reached

00:25:31,350 --> 00:25:34,380
back out to Tobias and get her and I

00:25:32,940 --> 00:25:36,330
said to him have you thought about

00:25:34,380 --> 00:25:37,799
writing a standard for CSS modules that

00:25:36,330 --> 00:25:40,380
others could implement what you're doing

00:25:37,799 --> 00:25:43,770
could totally fix the eCos CSS ecosystem

00:25:40,380 --> 00:25:45,750
if it's widely adopted and again not

00:25:43,770 --> 00:25:48,660
long after we had this conversation a

00:25:45,750 --> 00:25:51,720
new organization fired up on github a

00:25:48,660 --> 00:25:54,120
new repo where the big readme describing

00:25:51,720 --> 00:25:55,940
what CSS modules are in the hope that we

00:25:54,120 --> 00:25:58,620
can start to kind of get this beyond

00:25:55,940 --> 00:26:01,710
just being a feature hidden within web

00:25:58,620 --> 00:26:03,929
pack basically so I created the CSS

00:26:01,710 --> 00:26:11,400
modules logo first as a joke but it kind

00:26:03,929 --> 00:26:13,770
of stuck and it's no longer marked as

00:26:11,400 --> 00:26:15,299
experimental we also added an S to the

00:26:13,770 --> 00:26:18,450
end of the option once we formalized the

00:26:15,299 --> 00:26:21,540
name so now you have CSS loaders modules

00:26:18,450 --> 00:26:23,190
mode and you get this built in so a lot

00:26:21,540 --> 00:26:25,140
of you are going to be using CSS loader

00:26:23,190 --> 00:26:26,730
right now so you already if you're not

00:26:25,140 --> 00:26:28,530
already you already have CSS modules

00:26:26,730 --> 00:26:31,530
built in and you can just turn it on as

00:26:28,530 --> 00:26:33,780
easy as AK there's a bunch of us working

00:26:31,530 --> 00:26:36,240
on it and it's not just Tobias and it's

00:26:33,780 --> 00:26:38,340
not just me really what we're trying to

00:26:36,240 --> 00:26:40,500
do is is make this into a real thing

00:26:38,340 --> 00:26:42,900
that's not just built into web pack not

00:26:40,500 --> 00:26:44,760
just for react and this is just trying

00:26:42,900 --> 00:26:45,680
to fix the some of the fundamental

00:26:44,760 --> 00:26:48,230
problems we have with

00:26:45,680 --> 00:26:49,460
ss and we're still not entirely sure

00:26:48,230 --> 00:26:52,370
where we're going with this which is

00:26:49,460 --> 00:26:53,930
pretty exciting to me so yeah we've got

00:26:52,370 --> 00:26:57,110
it in webpack as I said but we've also

00:26:53,930 --> 00:26:59,030
got it working in browserify JSP M as

00:26:57,110 --> 00:27:01,250
well but there's a big world out there

00:26:59,030 --> 00:27:03,530
not just within the JavaScript community

00:27:01,250 --> 00:27:05,390
of course but people use CSS everywhere

00:27:03,530 --> 00:27:08,030
and so if you feel that your build tool

00:27:05,390 --> 00:27:10,160
is missing or your language or the

00:27:08,030 --> 00:27:12,590
environment that you work in I really

00:27:10,160 --> 00:27:14,720
would encourage you to look at how you

00:27:12,590 --> 00:27:16,750
could contribute to our efforts it would

00:27:14,720 --> 00:27:19,040
be really great to get CSS modules

00:27:16,750 --> 00:27:20,480
making CSS more maintainable for

00:27:19,040 --> 00:27:25,670
everybody not just the people in this

00:27:20,480 --> 00:27:27,230
room now Michael Jackson said this on

00:27:25,670 --> 00:27:28,850
Twitter very recently he said I'm really

00:27:27,230 --> 00:27:31,310
encouraged by the work on CSS modules

00:27:28,850 --> 00:27:34,220
there are only fixes part of the problem

00:27:31,310 --> 00:27:35,540
and you know I agree like CSS modules is

00:27:34,220 --> 00:27:37,160
by no means finished

00:27:35,540 --> 00:27:39,980
like I said we're not entirely sure

00:27:37,160 --> 00:27:42,770
where we're going with this which which

00:27:39,980 --> 00:27:44,330
I like but you know there's some there's

00:27:42,770 --> 00:27:45,740
some big things that are missing one

00:27:44,330 --> 00:27:47,900
thing that's actually about to land in

00:27:45,740 --> 00:27:50,540
CSS modules 1.0 is a feature we're

00:27:47,900 --> 00:27:52,970
calling values written by glen madden on

00:27:50,540 --> 00:27:54,950
the CSS modules team a friend of mine

00:27:52,970 --> 00:27:56,990
from melbourne as well and basically

00:27:54,950 --> 00:27:58,610
valleys let you define these these

00:27:56,990 --> 00:28:01,070
simple valleys that you can just plug

00:27:58,610 --> 00:28:02,750
into your CSS that's not new in the

00:28:01,070 --> 00:28:03,920
world of pre processes but but what's

00:28:02,750 --> 00:28:06,590
really great about them is that they

00:28:03,920 --> 00:28:08,870
work work really well with CSS modules

00:28:06,590 --> 00:28:10,610
in general so what you can do is for

00:28:08,870 --> 00:28:12,790
examples you can build a breakpoints or

00:28:10,610 --> 00:28:15,260
CSS file and you can define the values

00:28:12,790 --> 00:28:17,060
right there give them nice meaningful

00:28:15,260 --> 00:28:20,060
names you can import these into other

00:28:17,060 --> 00:28:22,610
CSS files or into your JavaScript so if

00:28:20,060 --> 00:28:24,350
you look at this component here what

00:28:22,610 --> 00:28:26,150
it's doing is it's importing a value

00:28:24,350 --> 00:28:28,490
from breakpoints or CSS and then it's

00:28:26,150 --> 00:28:30,200
plugging it into a media query so

00:28:28,490 --> 00:28:32,480
standardizing media queries across your

00:28:30,200 --> 00:28:35,500
files is now something that just is part

00:28:32,480 --> 00:28:37,790
of CSS if you're using CSS modules and

00:28:35,500 --> 00:28:40,730
the other big problem intimately that

00:28:37,790 --> 00:28:43,330
the harder problem one that's keeping me

00:28:40,730 --> 00:28:45,650
up at night it basically is theming

00:28:43,330 --> 00:28:47,990
there's there's two problems with

00:28:45,650 --> 00:28:50,300
theming the first one is around

00:28:47,990 --> 00:28:51,740
overriding styles but I actually think

00:28:50,300 --> 00:28:53,540
this is the problem that's kind of

00:28:51,740 --> 00:28:55,790
already got some good solutions out

00:28:53,540 --> 00:28:58,190
there some of you may already be

00:28:55,790 --> 00:28:58,890
familiar with a pretty small project of

00:28:58,190 --> 00:29:01,200
mine called

00:28:58,890 --> 00:29:02,850
fimA ball and the idea with with this

00:29:01,200 --> 00:29:05,670
project is to try and make it so that

00:29:02,850 --> 00:29:07,320
styles are just props to components if

00:29:05,670 --> 00:29:08,940
you if you import a third party

00:29:07,320 --> 00:29:11,340
component and you want to override its

00:29:08,940 --> 00:29:13,080
styles with your own in the olden days

00:29:11,340 --> 00:29:15,300
what you would do is just write a bunch

00:29:13,080 --> 00:29:16,800
of global CSS with bang important

00:29:15,300 --> 00:29:18,630
everywhere to try and override their

00:29:16,800 --> 00:29:20,430
stuff we're trying to make this a bit

00:29:18,630 --> 00:29:22,740
more of a first-class part of components

00:29:20,430 --> 00:29:24,930
so especially those of you who are

00:29:22,740 --> 00:29:26,130
component authors maybe pay close

00:29:24,930 --> 00:29:27,890
attention to this because I'd like to

00:29:26,130 --> 00:29:30,210
get some more support on this approach

00:29:27,890 --> 00:29:32,160
the idea is that with your component

00:29:30,210 --> 00:29:33,990
like I said you just pass in a theme as

00:29:32,160 --> 00:29:35,970
a prop and you can completely customize

00:29:33,990 --> 00:29:38,100
the way it looks so as a real-world

00:29:35,970 --> 00:29:39,540
example here we've created a theme for

00:29:38,100 --> 00:29:41,250
this component and we've just defined

00:29:39,540 --> 00:29:44,130
some classes that will be part of its

00:29:41,250 --> 00:29:45,240
public API and then the inside of your

00:29:44,130 --> 00:29:47,190
react component where you're rendering

00:29:45,240 --> 00:29:49,650
it you can import the theme from your

00:29:47,190 --> 00:29:51,090
CSS file so it's a CSS module and then

00:29:49,650 --> 00:29:52,980
here we've got kind of this first-class

00:29:51,090 --> 00:29:54,780
CSS module we're passing the object

00:29:52,980 --> 00:29:56,460
right down into the component and the

00:29:54,780 --> 00:29:59,460
component can use that instead of its

00:29:56,460 --> 00:30:00,960
default now component authors are going

00:29:59,460 --> 00:30:02,310
to look at this and say like yeah that's

00:30:00,960 --> 00:30:05,130
great but the world doesn't revolve

00:30:02,310 --> 00:30:07,200
around CSS modules there's a lot of

00:30:05,130 --> 00:30:08,790
different approaches out there and I

00:30:07,200 --> 00:30:10,320
completely agree the last thing I want

00:30:08,790 --> 00:30:13,080
to do is create some kind of like

00:30:10,320 --> 00:30:15,570
monoculture around CSS modules so what I

00:30:13,080 --> 00:30:17,070
did with with react fema ball was make

00:30:15,570 --> 00:30:18,750
it so that it kind of worked with as

00:30:17,070 --> 00:30:21,270
many different approaches as possible

00:30:18,750 --> 00:30:24,150
here you see using it with Radium we're

00:30:21,270 --> 00:30:25,800
creating a style sheet in Radium we're

00:30:24,150 --> 00:30:27,480
wrapping that component with radium's

00:30:25,800 --> 00:30:30,180
decorator and then we're passing in the

00:30:27,480 --> 00:30:32,520
theme and this this works great you've

00:30:30,180 --> 00:30:33,810
also got support for jss another great

00:30:32,520 --> 00:30:36,120
project in this space

00:30:33,810 --> 00:30:37,530
here we're building up a JSS style sheet

00:30:36,120 --> 00:30:39,750
attaching it to the dom and then we're

00:30:37,530 --> 00:30:41,760
handing it the sheets classes down into

00:30:39,750 --> 00:30:43,500
the component that works as well

00:30:41,760 --> 00:30:47,010
we've got inline Styles if you just

00:30:43,500 --> 00:30:48,600
write a standard object literal there's

00:30:47,010 --> 00:30:49,980
nothing fancy going on here but you can

00:30:48,600 --> 00:30:53,100
just pass that right in and it when it

00:30:49,980 --> 00:30:54,660
works fine what's really interesting is

00:30:53,100 --> 00:30:57,240
that after I came out with react theme

00:30:54,660 --> 00:31:00,840
of all this pattern actually landed in

00:30:57,240 --> 00:31:04,170
react not so much the working across the

00:31:00,840 --> 00:31:06,180
different styles of CSS that are out in

00:31:04,170 --> 00:31:09,060
the wild but that this idea of like a

00:31:06,180 --> 00:31:11,830
first-class CSS module it so it's it's

00:31:09,060 --> 00:31:14,950
already there in react Oh 14

00:31:11,830 --> 00:31:17,710
so basically what happens now is when

00:31:14,950 --> 00:31:18,970
you use the transition group what where

00:31:17,710 --> 00:31:20,740
previously you would provide a

00:31:18,970 --> 00:31:22,090
transition name and it was just a string

00:31:20,740 --> 00:31:24,280
that would be prefixed to these global

00:31:22,090 --> 00:31:27,190
classes now what you can do is you can

00:31:24,280 --> 00:31:29,800
pass in an object that map's these inter

00:31:27,190 --> 00:31:32,050
interactive leave and so on you map them

00:31:29,800 --> 00:31:33,550
to global classes so a common use case

00:31:32,050 --> 00:31:35,560
would be something like this where you

00:31:33,550 --> 00:31:38,200
might have some BEM style classes in the

00:31:35,560 --> 00:31:40,270
global scope and you're saying to reiax

00:31:38,200 --> 00:31:43,420
transition group that you want to map to

00:31:40,270 --> 00:31:45,370
these global classes you've defined but

00:31:43,420 --> 00:31:47,350
that looks very familiar doesn't it I

00:31:45,370 --> 00:31:50,320
mean essentially that is what we get

00:31:47,350 --> 00:31:52,810
from a CSS module so that allows a

00:31:50,320 --> 00:31:55,330
really interesting pattern it means that

00:31:52,810 --> 00:31:56,740
you can define your transitions in a

00:31:55,330 --> 00:31:59,380
simple file like this and you can just

00:31:56,740 --> 00:32:01,330
call them don't enter don't Interactive

00:31:59,380 --> 00:32:03,550
and so on you don't have to come up with

00:32:01,330 --> 00:32:05,290
some new name for it in the global scope

00:32:03,550 --> 00:32:06,850
and then what you can do is you can

00:32:05,290 --> 00:32:08,770
import the styles from that transition

00:32:06,850 --> 00:32:10,450
file and you can pass it down as the

00:32:08,770 --> 00:32:12,400
transition name essentially this the

00:32:10,450 --> 00:32:16,270
same pattern that we've seen in really

00:32:12,400 --> 00:32:18,220
mobile but this is in reactor core the

00:32:16,270 --> 00:32:20,230
other problem with theming and it's the

00:32:18,220 --> 00:32:22,630
big problem with theming that's caused a

00:32:20,230 --> 00:32:24,160
lot of debate is how you override theme

00:32:22,630 --> 00:32:27,370
variables if you think about something

00:32:24,160 --> 00:32:29,140
like bootstrap where you know the way

00:32:27,370 --> 00:32:31,120
you work with it typically is you

00:32:29,140 --> 00:32:34,000
override the built-in variables in their

00:32:31,120 --> 00:32:36,580
preprocessor it's it's a very roundabout

00:32:34,000 --> 00:32:38,890
way to achieve what's very natural in

00:32:36,580 --> 00:32:40,960
JavaScript because essentially what we

00:32:38,890 --> 00:32:43,060
what you kind of want is function to

00:32:40,960 --> 00:32:44,320
have functions in your CSS you want you

00:32:43,060 --> 00:32:46,780
want to be able to import someone's

00:32:44,320 --> 00:32:48,580
theme which is a function pass it in

00:32:46,780 --> 00:32:52,450
some overrides and out the other end

00:32:48,580 --> 00:32:55,420
come some CSS now if you think earlier

00:32:52,450 --> 00:32:57,550
to you know our desire for CSS in

00:32:55,420 --> 00:32:59,170
JavaScript one of the big reasons we

00:32:57,550 --> 00:33:01,540
were attracted to it is because it just

00:32:59,170 --> 00:33:03,220
simplifies a lot of things javascript is

00:33:01,540 --> 00:33:05,710
just a better program programming

00:33:03,220 --> 00:33:08,350
language than any preprocessor it's much

00:33:05,710 --> 00:33:09,940
more widely supported it has a great

00:33:08,350 --> 00:33:12,790
package manager behind it in the form of

00:33:09,940 --> 00:33:16,180
NPM you know we really want to leverage

00:33:12,790 --> 00:33:20,410
this ecosystem so one thing I've been

00:33:16,180 --> 00:33:22,120
experimenting with wildly is is is

00:33:20,410 --> 00:33:24,520
something I really want to share with

00:33:22,120 --> 00:33:25,270
you today it's definitely not a complete

00:33:24,520 --> 00:33:26,680
idea

00:33:25,270 --> 00:33:27,940
and but that's sort of the idea I kind

00:33:26,680 --> 00:33:31,300
of want to get some feedback on it and

00:33:27,940 --> 00:33:33,130
get get some input before I continue I

00:33:31,300 --> 00:33:34,930
really wanted to add a disclaimer here

00:33:33,130 --> 00:33:36,910
the views expressed in this presentation

00:33:34,930 --> 00:33:40,600
I'm not necessarily the views of the CSS

00:33:36,910 --> 00:33:45,400
modules team this is the source of much

00:33:40,600 --> 00:33:47,710
debate so CSS modules in JavaScript

00:33:45,400 --> 00:33:49,540
that's kind of the idea that I'm playing

00:33:47,710 --> 00:33:51,370
with it seems to contradict the whole

00:33:49,540 --> 00:33:54,820
point of CSS modules but I don't know

00:33:51,370 --> 00:33:56,860
it's interesting to me because if you

00:33:54,820 --> 00:33:58,780
look at the way you use loaders in web

00:33:56,860 --> 00:34:01,150
pack you know you can just chain them

00:33:58,780 --> 00:34:04,780
together quite simply you might have a

00:34:01,150 --> 00:34:06,970
preprocessor before the CSS loader but

00:34:04,780 --> 00:34:09,700
if the preprocessor is transforming you

00:34:06,970 --> 00:34:11,140
know one file type into another what's

00:34:09,700 --> 00:34:13,450
to say that you can't have some other

00:34:11,140 --> 00:34:17,680
loader in there that takes in JavaScript

00:34:13,450 --> 00:34:20,530
and outputs CSS now the point I want to

00:34:17,680 --> 00:34:22,390
make today to try and inspire hopefully

00:34:20,530 --> 00:34:25,450
a few of you is that CSS modules I think

00:34:22,390 --> 00:34:28,690
make a great compilation target why is

00:34:25,450 --> 00:34:30,760
that if you if you compile something

00:34:28,690 --> 00:34:32,410
into a CSS module what you get is

00:34:30,760 --> 00:34:34,480
first-class web pack support you can

00:34:32,410 --> 00:34:36,460
just plug into all the other tools out

00:34:34,480 --> 00:34:38,380
there and which means you get local

00:34:36,460 --> 00:34:40,270
scoping for free your CSS in JavaScript

00:34:38,380 --> 00:34:41,800
solution doesn't have to worry about

00:34:40,270 --> 00:34:45,310
this problem at all it's a solved

00:34:41,800 --> 00:34:47,650
problem you can extract a CSS file with

00:34:45,310 --> 00:34:49,480
standard tooling again this is something

00:34:47,650 --> 00:34:51,300
that we're already doing in web pack we

00:34:49,480 --> 00:34:53,170
don't have to reinvent the wheel and

00:34:51,300 --> 00:34:54,760
more importantly I think for people

00:34:53,170 --> 00:34:56,920
working on these new projects especially

00:34:54,760 --> 00:34:59,020
those of us who don't have a whole lot

00:34:56,920 --> 00:35:00,490
of free time to do this stuff and really

00:34:59,020 --> 00:35:04,360
what you want to do is you want to focus

00:35:00,490 --> 00:35:05,170
on the API not the tooling so luckily

00:35:04,360 --> 00:35:08,140
for us

00:35:05,170 --> 00:35:09,940
Andrae pop again has inspired me with

00:35:08,140 --> 00:35:12,730
his open-source work he created a really

00:35:09,940 --> 00:35:13,960
great project called styling and it's

00:35:12,730 --> 00:35:16,720
probably the thing that really got me

00:35:13,960 --> 00:35:18,220
thinking about this this solution so the

00:35:16,720 --> 00:35:20,890
idea of styling is that rather than

00:35:18,220 --> 00:35:22,060
writing a CSS file you know we're

00:35:20,890 --> 00:35:23,500
typically if you wanted more

00:35:22,060 --> 00:35:26,050
functionality you might write a sass

00:35:23,500 --> 00:35:28,270
file instead of reaching for sass just

00:35:26,050 --> 00:35:30,010
reach for plain old JavaScript in this

00:35:28,270 --> 00:35:32,110
case we're importing this styling

00:35:30,010 --> 00:35:34,600
library we're importing a color library

00:35:32,110 --> 00:35:36,100
that we pulled off NPM we've got primary

00:35:34,600 --> 00:35:37,990
colors you know here we got values right

00:35:36,100 --> 00:35:38,980
we can just import values from other

00:35:37,990 --> 00:35:41,050
JavaScript files

00:35:38,980 --> 00:35:43,210
and then we export these named styles

00:35:41,050 --> 00:35:45,190
wrapping them with this styling function

00:35:43,210 --> 00:35:46,869
call and it's just JavaScript you can do

00:35:45,190 --> 00:35:49,480
anything javascript can do but I think

00:35:46,869 --> 00:35:50,680
more importantly you know the the social

00:35:49,480 --> 00:35:52,300
factor around javascript is really

00:35:50,680 --> 00:35:54,400
important all of the functionality on

00:35:52,300 --> 00:35:56,800
NPM is available to you and anything

00:35:54,400 --> 00:35:58,390
that you do to solve these CSS related

00:35:56,800 --> 00:35:59,740
problems you can just wrap it up in a

00:35:58,390 --> 00:36:02,920
function and publish it it's really

00:35:59,740 --> 00:36:06,670
great and configuring it is nice and

00:36:02,920 --> 00:36:08,650
easy in your web pack configuration when

00:36:06,670 --> 00:36:10,810
you wire up the loader for any file in

00:36:08,650 --> 00:36:13,359
this case that ends in dot style J s

00:36:10,810 --> 00:36:15,670
you're saying that it first needs to run

00:36:13,359 --> 00:36:17,350
through babel before going through

00:36:15,670 --> 00:36:21,010
styling and then after that it needs to

00:36:17,350 --> 00:36:22,930
go through CSS loader in style loader my

00:36:21,010 --> 00:36:24,609
I threw my hat in the ring to try and

00:36:22,930 --> 00:36:28,090
get my head around this problem I

00:36:24,609 --> 00:36:30,400
created a very small loader called JSS

00:36:28,090 --> 00:36:32,380
loader it's not production ready it's

00:36:30,400 --> 00:36:34,720
very much an experiment but I just

00:36:32,380 --> 00:36:36,580
wanted to test the waters in this space

00:36:34,720 --> 00:36:38,619
and this is kind of what it looks like

00:36:36,580 --> 00:36:40,840
so it's very much inspired by styling as

00:36:38,619 --> 00:36:42,670
well what you do is you can you know

00:36:40,840 --> 00:36:45,090
again you can import values from other

00:36:42,670 --> 00:36:46,900
files here we're importing a function

00:36:45,090 --> 00:36:49,150
breakpoints as a function

00:36:46,900 --> 00:36:51,640
it's like mixin so here we're using the

00:36:49,150 --> 00:36:53,980
object spread notation to say that this

00:36:51,640 --> 00:36:56,140
selector inside it also has a large

00:36:53,980 --> 00:37:00,430
screen break point worth a different

00:36:56,140 --> 00:37:02,830
padding value now in this case wiring up

00:37:00,430 --> 00:37:05,560
is even simpler and but that is a source

00:37:02,830 --> 00:37:07,810
of its limitation so I will warned about

00:37:05,560 --> 00:37:09,880
that the loader's here we've got star

00:37:07,810 --> 00:37:11,830
loader but that comes after CSS loader

00:37:09,880 --> 00:37:13,810
with modules mode but more importantly

00:37:11,830 --> 00:37:16,420
before that it runs through jss loader

00:37:13,810 --> 00:37:19,080
and it's as simple as that and the great

00:37:16,420 --> 00:37:21,310
thing that's using something like jss

00:37:19,080 --> 00:37:22,990
again it fits in with this idea of

00:37:21,310 --> 00:37:25,900
trying not to reinvent too many wheels

00:37:22,990 --> 00:37:26,950
and jss is a really great tool it's

00:37:25,900 --> 00:37:28,060
really good at what it does it's

00:37:26,950 --> 00:37:30,430
basically if you think of it as a

00:37:28,060 --> 00:37:32,170
preprocessor for CSS made with

00:37:30,430 --> 00:37:33,820
JavaScript there's already a plug-in

00:37:32,170 --> 00:37:36,700
ecosystem around it to do things like

00:37:33,820 --> 00:37:38,980
nested selectors and extends automatic

00:37:36,700 --> 00:37:40,900
pixel values camelcase sorting of props

00:37:38,980 --> 00:37:44,109
that sort of thing and if you want to

00:37:40,900 --> 00:37:46,119
make more plugins you just plug into jss

00:37:44,109 --> 00:37:50,080
rather than in some weird thing I invent

00:37:46,119 --> 00:37:51,580
it which is really cool the big concern

00:37:50,080 --> 00:37:52,490
for me and this is where a lot of the

00:37:51,580 --> 00:37:53,780
debate comes in

00:37:52,490 --> 00:37:56,390
is how does this affect the

00:37:53,780 --> 00:37:57,710
approachability of CSS modules the

00:37:56,390 --> 00:38:00,080
interesting thing about working in the

00:37:57,710 --> 00:38:02,930
open-source space is that our main

00:38:00,080 --> 00:38:05,480
concern is not just creating the best

00:38:02,930 --> 00:38:08,119
thing possible because if no one uses it

00:38:05,480 --> 00:38:10,250
it's not that interesting really for us

00:38:08,119 --> 00:38:12,860
it's really important that we that we

00:38:10,250 --> 00:38:14,660
raise the quality of CSS across the

00:38:12,860 --> 00:38:16,490
board try and get everybody thinking

00:38:14,660 --> 00:38:18,830
about writing CSS in this modular

00:38:16,490 --> 00:38:20,480
fashion thinking about component driven

00:38:18,830 --> 00:38:22,160
design and I think there's there's a

00:38:20,480 --> 00:38:23,510
real risk that the further you kind of

00:38:22,160 --> 00:38:25,190
go in the deep end with some of these

00:38:23,510 --> 00:38:28,520
approaches the more you're gonna just

00:38:25,190 --> 00:38:31,130
lose the wider web community so there's

00:38:28,520 --> 00:38:32,840
a real balancing act here for me you

00:38:31,130 --> 00:38:34,640
know and the rest of the CSS team you

00:38:32,840 --> 00:38:36,800
know what a CSS modules team what what

00:38:34,640 --> 00:38:39,080
what do you do at these decision points

00:38:36,800 --> 00:38:41,420
it's it's really not easy we want to

00:38:39,080 --> 00:38:42,950
make CSS as powerful as possible but we

00:38:41,420 --> 00:38:45,770
don't want to break the language or make

00:38:42,950 --> 00:38:47,240
it into something too esoteric and this

00:38:45,770 --> 00:38:48,920
is where your input is going to be

00:38:47,240 --> 00:38:50,119
really important if you want to talk to

00:38:48,920 --> 00:38:51,500
me about this during the conference or

00:38:50,119 --> 00:38:54,260
on Twitter afterwards I'd love to talk

00:38:51,500 --> 00:38:57,230
to you about it but more importantly I

00:38:54,260 --> 00:38:59,690
want you to experiment with us I think

00:38:57,230 --> 00:39:01,340
there's a lot of room to to try some new

00:38:59,690 --> 00:39:04,880
things in this space to try to improve

00:39:01,340 --> 00:39:07,420
CSS maybe to make CSS modules a common

00:39:04,880 --> 00:39:09,859
compilation target for CSS in jeaious

00:39:07,420 --> 00:39:11,990
it's definitely something that we don't

00:39:09,859 --> 00:39:13,750
know where we're going and people like

00:39:11,990 --> 00:39:16,280
you are going to help drive the future

00:39:13,750 --> 00:39:19,700
it's it's also we're stressing that that

00:39:16,280 --> 00:39:22,010
you know CSS modules my addition to to

00:39:19,700 --> 00:39:23,630
really kicking that off was relatively

00:39:22,010 --> 00:39:26,270
minor was a small amount of pretty

00:39:23,630 --> 00:39:27,920
crappy code I've since improved it but

00:39:26,270 --> 00:39:30,140
the point is that it started off with a

00:39:27,920 --> 00:39:31,940
very simple decision to improve the

00:39:30,140 --> 00:39:33,740
interface for developers focusing on

00:39:31,940 --> 00:39:37,730
that developer experience and the rest

00:39:33,740 --> 00:39:40,280
will come I want to end by saying that

00:39:37,730 --> 00:39:41,810
the community around react is really

00:39:40,280 --> 00:39:43,730
really impressive

00:39:41,810 --> 00:39:45,800
and when I say react of course I'm being

00:39:43,730 --> 00:39:46,970
I'm be a bit more inclusive it's not

00:39:45,800 --> 00:39:48,650
just react there's a lot of great

00:39:46,970 --> 00:39:51,470
libraries out there in languages Elm

00:39:48,650 --> 00:39:55,520
cycle jeaious some really great work

00:39:51,470 --> 00:39:57,260
happening and in the CSS community in

00:39:55,520 --> 00:39:59,450
particular there's just a lot of people

00:39:57,260 --> 00:40:01,340
trying different things it seems like

00:39:59,450 --> 00:40:04,369
when it comes to flux we've largely

00:40:01,340 --> 00:40:05,720
landed on redux by the sounds of it but

00:40:04,369 --> 00:40:08,030
CSS by no means

00:40:05,720 --> 00:40:09,710
sort of ended up in that space I think

00:40:08,030 --> 00:40:12,650
since this modules is the closest we've

00:40:09,710 --> 00:40:14,930
got to to a consensus I hear a lot of

00:40:12,650 --> 00:40:17,030
people using CSS modules but I don't

00:40:14,930 --> 00:40:18,349
think we're finished and it's really

00:40:17,030 --> 00:40:21,770
exciting that so many people care about

00:40:18,349 --> 00:40:23,359
this problem that's it for me thank you

00:40:21,770 --> 00:40:25,580
so much for having me it's really a

00:40:23,359 --> 00:40:28,119
pleasure being here thank you so much

00:40:25,580 --> 00:40:28,119
for seeing so much

00:40:43,440 --> 00:40:48,160
so we have time to go roughly through

00:40:45,790 --> 00:40:50,349
four or five six printed questions in a

00:40:48,160 --> 00:40:52,900
timely manner okay we're gonna go for it

00:40:50,349 --> 00:40:55,270
for lunch I'm gonna skip the troll

00:40:52,900 --> 00:40:59,609
question I mean what do i what do I say

00:40:55,270 --> 00:41:02,650
to that I thank you Andre

00:40:59,609 --> 00:41:04,869
yeah so you yeah Andre was a proponent

00:41:02,650 --> 00:41:07,540
of CSS modules for was is is his

00:41:04,869 --> 00:41:09,849
question is about the wall-e hit about

00:41:07,540 --> 00:41:12,010
the lack of constant sharing hopefully

00:41:09,849 --> 00:41:15,400
values in CSS modules addresses this

00:41:12,010 --> 00:41:17,710
problem using freestyle freestyle is

00:41:15,400 --> 00:41:21,579
great I had a look at it as a result of

00:41:17,710 --> 00:41:23,170
your tweet and I'm actually I think it's

00:41:21,579 --> 00:41:24,970
the first thing that I've seen that

00:41:23,170 --> 00:41:27,069
really makes me think about it as an

00:41:24,970 --> 00:41:29,770
alternative for me in my project to CSS

00:41:27,069 --> 00:41:32,380
modules it's killer feature is that it

00:41:29,770 --> 00:41:34,809
can render the CSS for just the things

00:41:32,380 --> 00:41:36,430
you see on screen whereas something like

00:41:34,809 --> 00:41:38,349
CSS modules you kind of have to just

00:41:36,430 --> 00:41:40,990
bring in a bundle of all styles in the

00:41:38,349 --> 00:41:43,960
app so I think we're still trying to

00:41:40,990 --> 00:41:45,609
address these problems but by all means

00:41:43,960 --> 00:41:47,440
use what works best for you

00:41:45,609 --> 00:41:52,359
and I'm not here to sell you on CSS

00:41:47,440 --> 00:41:54,849
modules yeah I kind of answered the

00:41:52,359 --> 00:41:56,589
second one as well so values and CSS

00:41:54,849 --> 00:41:59,859
modules coming in 1.0 so keep an eye out

00:41:56,589 --> 00:42:02,130
for that talking about CSS and J's how

00:41:59,859 --> 00:42:05,740
to manage selecting of parents siblings

00:42:02,130 --> 00:42:07,839
since we can't rely on CSS now well I

00:42:05,740 --> 00:42:10,299
think the design patterns in something

00:42:07,839 --> 00:42:13,450
like Ben it's all about kind of trying

00:42:10,299 --> 00:42:16,000
to minimize this sort of stuff we do do

00:42:13,450 --> 00:42:18,040
very simple nesting in our applications

00:42:16,000 --> 00:42:20,530
but the really good thing about CSS

00:42:18,040 --> 00:42:23,140
modules is that is that it scopes it to

00:42:20,530 --> 00:42:24,760
the one file so when we do nesting it's

00:42:23,140 --> 00:42:26,740
only nesting within the rules of a

00:42:24,760 --> 00:42:29,049
single file we definitely don't nest

00:42:26,740 --> 00:42:31,089
across component boundaries in the CSS

00:42:29,049 --> 00:42:33,099
if you want a component to look

00:42:31,089 --> 00:42:34,960
different depending on its context and

00:42:33,099 --> 00:42:37,750
we make that a prop of the react

00:42:34,960 --> 00:42:39,849
component so if a component can be in

00:42:37,750 --> 00:42:42,579
like a primary or secondary mode if it's

00:42:39,849 --> 00:42:44,980
a button for example you know you don't

00:42:42,579 --> 00:42:46,809
make that depend on whether it's in you

00:42:44,980 --> 00:42:49,030
know a certain parent you make that a

00:42:46,809 --> 00:42:50,530
prop of the component and that leads to

00:42:49,030 --> 00:42:54,640
much more maintainable code much more

00:42:50,530 --> 00:42:57,250
testable code doesn't local scope

00:42:54,640 --> 00:42:59,349
feature bind you to CSS bind your CSS to

00:42:57,250 --> 00:43:01,329
web pack forever and this is exactly

00:42:59,349 --> 00:43:03,849
exactly the line of thought that led to

00:43:01,329 --> 00:43:06,549
CSS modules being extracted from web

00:43:03,849 --> 00:43:09,970
pack and my feeling is that as much as I

00:43:06,549 --> 00:43:12,790
love using webpack you know CSS modules

00:43:09,970 --> 00:43:14,980
the the idea in it was was much greater

00:43:12,790 --> 00:43:16,450
I think than any one tool and really

00:43:14,980 --> 00:43:19,359
deserve to be something that you could

00:43:16,450 --> 00:43:20,380
use anywhere so like I said you know we

00:43:19,359 --> 00:43:22,869
need the help with the community to

00:43:20,380 --> 00:43:24,400
continue this effort but we don't want a

00:43:22,869 --> 00:43:26,380
couple you to a web pack we want you two

00:43:24,400 --> 00:43:30,430
to have modular CSS and no matter where

00:43:26,380 --> 00:43:38,410
you are I guess I'll answer one more I'm

00:43:30,430 --> 00:43:40,119
gonna pick the best one let's see yeah

00:43:38,410 --> 00:43:42,780
okay that's a good question Andre pops

00:43:40,119 --> 00:43:44,589
one so as far as I know

00:43:42,780 --> 00:43:46,480
composers can result in

00:43:44,589 --> 00:43:48,700
non-deterministic style overrides how to

00:43:46,480 --> 00:43:51,520
solve that and that's a really good

00:43:48,700 --> 00:43:53,770
question and it's something that that is

00:43:51,520 --> 00:43:56,470
probably one of the the areas that we

00:43:53,770 --> 00:43:58,240
need a bit more tooling around the idea

00:43:56,470 --> 00:44:00,099
that we're floating at the moment just

00:43:58,240 --> 00:44:02,430
to clarify the problem when you're

00:44:00,099 --> 00:44:04,450
composing multiple classes into one

00:44:02,430 --> 00:44:06,549
imagine that you're composing five

00:44:04,450 --> 00:44:08,829
classes and for all you know like two of

00:44:06,549 --> 00:44:10,809
them might actually be defining a rule

00:44:08,829 --> 00:44:13,750
for the same property and so now you've

00:44:10,809 --> 00:44:15,940
got this this situation where the the

00:44:13,750 --> 00:44:17,920
rule that wins is kind of determined by

00:44:15,940 --> 00:44:19,720
the the source order which is completely

00:44:17,920 --> 00:44:21,280
abstracted from you right when you when

00:44:19,720 --> 00:44:22,780
use a tool like web pack you can't say

00:44:21,280 --> 00:44:25,900
that this class should be in the file

00:44:22,780 --> 00:44:27,520
before that one so that's kind of one of

00:44:25,900 --> 00:44:30,010
those things that you can't I'm not sure

00:44:27,520 --> 00:44:31,210
how you solve that the the the idea that

00:44:30,010 --> 00:44:33,160
we're working at the moment is it's

00:44:31,210 --> 00:44:34,990
going to be like in some sort of linting

00:44:33,160 --> 00:44:36,880
tool perhaps that'll warn you and say

00:44:34,990 --> 00:44:39,940
like hey you just shouldn't do this it's

00:44:36,880 --> 00:44:41,260
actually a bad idea but you know that

00:44:39,940 --> 00:44:41,680
that still has to come so in the

00:44:41,260 --> 00:44:44,770
meantime

00:44:41,680 --> 00:44:47,319
tread carefully and hopefully we'll have

00:44:44,770 --> 00:44:48,940
a better answer for that soon that's it

00:44:47,319 --> 00:44:52,450
so I'm gonna be around the conference of

00:44:48,940 --> 00:44:54,819
course so please I'm alone in a foreign

00:44:52,450 --> 00:44:56,350
city come talk to me I'd love to talk to

00:44:54,819 --> 00:44:58,030
you even if I look

00:44:56,350 --> 00:45:00,310
like I don't want have you bothered I do

00:44:58,030 --> 00:45:03,120
so come talk to me thank you very much

00:45:00,310 --> 00:45:03,120
thank you Mark

00:45:06,180 --> 00:45:08,240

YouTube URL: https://www.youtube.com/watch?v=zR1lOuyQEt8


