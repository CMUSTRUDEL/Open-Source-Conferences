Title: Cycle.js and functional reactive user interfaces | Andre Staltz | Reactive 2015
Publication date: 2017-06-29
Playlist: ReactiveConf 2015
Description: 
	React's future is going to be more functional, and less OOP. What if that future is already reality? How would it look like? React's foundations are reactive rendering and UI as a pure function of state. These two foundations are reactive programming and functional programming, yet React has a lot of concepts from imperative programming. In this talk we will discover how Cycle.js is purely reactive and functional, and why it's an interesting alternative to React.

Andre is a user interface engineer at Futurice, with extensive knowledge in reactive programming.
Captions: 
	00:00:04,530 --> 00:00:11,040
hi so my name is andreas thoughts and

00:00:08,550 --> 00:00:12,750
I'm originally from Brazil but I'm

00:00:11,040 --> 00:00:14,879
living in Finland working there as a

00:00:12,750 --> 00:00:18,140
programmer in this company called future

00:00:14,879 --> 00:00:21,470
ice and for about a year I've been

00:00:18,140 --> 00:00:24,450
involved a lot with reactive programming

00:00:21,470 --> 00:00:26,850
so I wrote this introduction to reactive

00:00:24,450 --> 00:00:29,370
programming last year and it went quite

00:00:26,850 --> 00:00:31,500
viral you know there's like six thousand

00:00:29,370 --> 00:00:34,559
stars on this gist right now so maybe

00:00:31,500 --> 00:00:37,620
some of you here have read it maybe cool

00:00:34,559 --> 00:00:39,989
yeah and since then I've been building

00:00:37,620 --> 00:00:43,440
open-source tools related to reactive

00:00:39,989 --> 00:00:44,579
programming and the virtual Dom so we're

00:00:43,440 --> 00:00:46,320
about to approach the end of this

00:00:44,579 --> 00:00:50,059
conference so let's talk about what

00:00:46,320 --> 00:00:53,159
comes next so about the future of react

00:00:50,059 --> 00:00:54,929
so react is about functional programming

00:00:53,159 --> 00:00:56,129
no surprise here right we've been

00:00:54,929 --> 00:00:58,019
talking about this whole to hope

00:00:56,129 --> 00:00:59,729
conference but not just us you know also

00:00:58,019 --> 00:01:02,690
Sebastian mark Page say that you know

00:00:59,729 --> 00:01:05,309
the green leafy guy that runs react or

00:01:02,690 --> 00:01:07,440
so Sebastian said I think that the

00:01:05,309 --> 00:01:09,180
functional programming paradigm is in

00:01:07,440 --> 00:01:12,000
general what react has opened up to a

00:01:09,180 --> 00:01:13,530
wider audience we gradually introduced

00:01:12,000 --> 00:01:16,710
functional programming to people with a

00:01:13,530 --> 00:01:18,960
pregnant pragmatic view and we see

00:01:16,710 --> 00:01:21,299
ourselves moving towards less side

00:01:18,960 --> 00:01:23,490
effects and a more declarative style in

00:01:21,299 --> 00:01:25,500
the future react and when we do that

00:01:23,490 --> 00:01:26,850
some concepts of classes don't make

00:01:25,500 --> 00:01:29,520
sense we need to start thinking about

00:01:26,850 --> 00:01:31,350
what goes beyond classes and how we how

00:01:29,520 --> 00:01:36,210
can we express cloud components without

00:01:31,350 --> 00:01:38,520
using classes and yet react looks like

00:01:36,210 --> 00:01:41,969
this and literally I mean it looks like

00:01:38,520 --> 00:01:45,270
the Biscay word so object-oriented

00:01:41,969 --> 00:01:47,280
programming and classes and if you've

00:01:45,270 --> 00:01:50,070
ever done a little bit of Haskell or El

00:01:47,280 --> 00:01:53,820
Morro Kamel react doesn't look anything

00:01:50,070 --> 00:01:56,909
like functional programming but still

00:01:53,820 --> 00:01:59,039
react has a solid foundation on reactive

00:01:56,909 --> 00:02:00,539
programming and that's I'm sorry

00:01:59,039 --> 00:02:03,240
functional programming yeah the idea

00:02:00,539 --> 00:02:07,350
that UI is a pure function of state

00:02:03,240 --> 00:02:10,590
right but actually that in itself is not

00:02:07,350 --> 00:02:12,599
enough because when we get new States we

00:02:10,590 --> 00:02:14,879
need to call that F function again right

00:02:12,599 --> 00:02:17,659
so that's actually where reactive

00:02:14,879 --> 00:02:20,219
programming comes in as another found

00:02:17,659 --> 00:02:22,079
instead of manually calling re-render

00:02:20,219 --> 00:02:26,370
and when you get in a new state react

00:02:22,079 --> 00:02:28,980
does that automatically for you so my

00:02:26,370 --> 00:02:32,519
question to you is what would like a

00:02:28,980 --> 00:02:36,599
truly functional and reactive react of

00:02:32,519 --> 00:02:38,189
the future look like maybe you're

00:02:36,599 --> 00:02:40,230
thinking right now about this repository

00:02:38,189 --> 00:02:42,750
called react future where core

00:02:40,230 --> 00:02:45,120
contributors are placing ideas for new

00:02:42,750 --> 00:02:48,959
api's so probably that's the functional

00:02:45,120 --> 00:02:51,900
reactive react right well not really

00:02:48,959 --> 00:02:52,950
like there's this proposal therefore for

00:02:51,900 --> 00:02:54,989
an API like this and it's still

00:02:52,950 --> 00:02:57,450
object-oriented programming in disguise

00:02:54,989 --> 00:03:00,959
you still have the notion of an instance

00:02:57,450 --> 00:03:02,549
with state with members like state and

00:03:00,959 --> 00:03:04,019
signals and that need to be passed

00:03:02,549 --> 00:03:06,180
around to these other methods so the

00:03:04,019 --> 00:03:09,810
same idea of an object with methods and

00:03:06,180 --> 00:03:11,760
State attached and that's where I come

00:03:09,810 --> 00:03:14,939
in so basically I went on the adventure

00:03:11,760 --> 00:03:17,040
of discovering what is actual functional

00:03:14,939 --> 00:03:18,810
reactive user interfaces with a virtual

00:03:17,040 --> 00:03:22,859
Dom and then I wrote this framework

00:03:18,810 --> 00:03:25,760
called psycho GS so I've been working on

00:03:22,859 --> 00:03:28,829
psycho J's for exactly a year now so

00:03:25,760 --> 00:03:32,459
November yeah so happy birthday to you

00:03:28,829 --> 00:03:34,319
yeah yeah in my quest I rewrote it

00:03:32,459 --> 00:03:34,739
multiple times so just to give you an

00:03:34,319 --> 00:03:36,449
idea

00:03:34,739 --> 00:03:38,609
each of these versions actually

00:03:36,449 --> 00:03:41,220
represents a major overhaul not like an

00:03:38,609 --> 00:03:42,780
incremental version of something and you

00:03:41,220 --> 00:03:44,250
would have imagined I've been building

00:03:42,780 --> 00:03:46,799
it for a year but actually I've been

00:03:44,250 --> 00:03:49,290
kind of like deleting it for a year so

00:03:46,799 --> 00:03:51,840
this this this chart here shows that it

00:03:49,290 --> 00:03:53,549
had 600 lines of code but sometimes I

00:03:51,840 --> 00:03:55,229
just deleted some parts when I found

00:03:53,549 --> 00:03:57,329
like a better abstraction you know a

00:03:55,229 --> 00:04:00,030
better idea and now we're down to about

00:03:57,329 --> 00:04:03,120
200 lines of code so roughly psychos

00:04:00,030 --> 00:04:08,579
like 50 to 100 times smaller than react

00:04:03,120 --> 00:04:11,189
as a framework so psycho is concise but

00:04:08,579 --> 00:04:15,139
not only is the framework concise but

00:04:11,189 --> 00:04:19,139
also apps written in psycho are smaller

00:04:15,139 --> 00:04:21,329
so this is react it's one of those basic

00:04:19,139 --> 00:04:24,150
examples you see when you go to reiax

00:04:21,329 --> 00:04:27,180
front-page we take a class and we get

00:04:24,150 --> 00:04:29,159
the initial state and we like when the

00:04:27,180 --> 00:04:31,169
component mounts we need to

00:04:29,159 --> 00:04:33,149
set the interval to call this tick

00:04:31,169 --> 00:04:35,129
method every one second then when the

00:04:33,149 --> 00:04:37,909
tick is called it does this dot set

00:04:35,129 --> 00:04:40,800
state etc and finally we get this

00:04:37,909 --> 00:04:45,629
counter saying zero and one you want to

00:04:40,800 --> 00:04:48,629
see how this is done in cycle so we

00:04:45,629 --> 00:04:52,169
start by making a main function okay and

00:04:48,629 --> 00:04:54,029
that returns an object which is contains

00:04:52,169 --> 00:04:56,279
these things called sinks that's where

00:04:54,029 --> 00:04:58,919
what we're going to return actually so

00:04:56,279 --> 00:05:00,779
the Dom sink is an observable event

00:04:58,919 --> 00:05:02,339
stream starting from the number zero and

00:05:00,779 --> 00:05:05,249
ticking every second so it gives us this

00:05:02,339 --> 00:05:08,939
zero one two and we get those numbers

00:05:05,249 --> 00:05:13,249
and we map them to a div saying like

00:05:08,939 --> 00:05:16,649
seconds elapsed and the number I and

00:05:13,249 --> 00:05:20,639
then we go and say cycle dot run this

00:05:16,649 --> 00:05:24,389
main function against a Dom driver which

00:05:20,639 --> 00:05:28,919
is mounted on this ID app element and we

00:05:24,389 --> 00:05:33,659
run it it does the same thing okay and

00:05:28,919 --> 00:05:36,059
also it's smaller in API surface so I

00:05:33,659 --> 00:05:38,550
don't know if anyone knows here exactly

00:05:36,059 --> 00:05:40,949
how many methods this react have like

00:05:38,550 --> 00:05:44,279
create class great factory renderer does

00:05:40,949 --> 00:05:46,409
anyone have a number on that maybe like

00:05:44,279 --> 00:05:49,050
15 I don't know maybe it's 15 is that a

00:05:46,409 --> 00:05:52,409
good number well psycho Jess has just

00:05:49,050 --> 00:05:54,959
one it's like psycho run and nothing

00:05:52,409 --> 00:05:56,490
else and maybe you're thinking I know

00:05:54,959 --> 00:05:58,889
you're cheating right you're not you

00:05:56,490 --> 00:06:01,439
handling mount and unmount to clear the

00:05:58,889 --> 00:06:03,300
interval but in fact actually this code

00:06:01,439 --> 00:06:05,129
here does everything the react one does

00:06:03,300 --> 00:06:08,429
nothing is missing even clearing the

00:06:05,129 --> 00:06:10,199
interval when main is unmounted oh and

00:06:08,429 --> 00:06:14,550
you know what else is also smaller with

00:06:10,199 --> 00:06:16,649
cycle J s this is the generated Dom from

00:06:14,550 --> 00:06:20,429
react and it's trashing the Dom with

00:06:16,649 --> 00:06:22,619
this data react ID nonsense and some

00:06:20,429 --> 00:06:24,599
spans that like I didn't even tell it to

00:06:22,619 --> 00:06:27,779
generate these bags right I just said

00:06:24,599 --> 00:06:31,099
like the text seconds elapsed yeah but

00:06:27,779 --> 00:06:33,659
this is what cycle just generates and

00:06:31,099 --> 00:06:35,939
also suppose you have some kind of

00:06:33,659 --> 00:06:38,909
universal JavaScript app in other words

00:06:35,939 --> 00:06:42,750
isomorphic and do you know that problem

00:06:38,909 --> 00:06:44,430
of how to mount the app client-side but

00:06:42,750 --> 00:06:46,500
to avoid the initial render on the

00:06:44,430 --> 00:06:48,690
JavaScript side and instead just use the

00:06:46,500 --> 00:06:51,350
HTML which is given by the sir server so

00:06:48,690 --> 00:06:54,750
how do you solve that in cycle of j/s

00:06:51,350 --> 00:06:58,260
well maybe like how many of you have

00:06:54,750 --> 00:06:59,730
solved this in in react okay no one feel

00:06:58,260 --> 00:07:01,830
likes okay some guys feel like raising

00:06:59,730 --> 00:07:04,290
their hands this is how you do it you

00:07:01,830 --> 00:07:05,760
take the main function and you get the

00:07:04,290 --> 00:07:08,940
Dom sink that comes out of it and you

00:07:05,760 --> 00:07:12,150
apply skip one so that's it you skip the

00:07:08,940 --> 00:07:15,060
first Dom from the JavaScript and that's

00:07:12,150 --> 00:07:19,080
it's solved I'm not cheating it actually

00:07:15,060 --> 00:07:20,910
solves the problem and another property

00:07:19,080 --> 00:07:24,419
of psycho jess is that it's apps or

00:07:20,910 --> 00:07:26,040
declarative now okay I know react claims

00:07:24,419 --> 00:07:29,060
to be declarative to and the difference

00:07:26,040 --> 00:07:31,890
with cycle J's is that we're not lying

00:07:29,060 --> 00:07:35,190
like literally everything is just var

00:07:31,890 --> 00:07:38,160
declarations so here's an example it's

00:07:35,190 --> 00:07:40,290
the counter increment or type of thing

00:07:38,160 --> 00:07:42,390
so everything is just pure functions and

00:07:40,290 --> 00:07:44,880
cost declarations there's no disk

00:07:42,390 --> 00:07:46,890
keyword there's no class and we get

00:07:44,880 --> 00:07:49,410
really nice refactoring benefits from

00:07:46,890 --> 00:07:53,250
this so you can slice the main in

00:07:49,410 --> 00:07:54,810
whatever way you wish like here we're

00:07:53,250 --> 00:07:56,840
taking the first two declarations and

00:07:54,810 --> 00:07:59,220
putting that in this intent function and

00:07:56,840 --> 00:08:00,660
then we get the other declaration of the

00:07:59,220 --> 00:08:03,030
state and we put that in the model

00:08:00,660 --> 00:08:04,800
function and then we get another the

00:08:03,030 --> 00:08:06,810
things related to view and we put in

00:08:04,800 --> 00:08:08,760
this view function and then we call main

00:08:06,810 --> 00:08:11,640
which is just a function of composition

00:08:08,760 --> 00:08:15,380
of intent model and view in that

00:08:11,640 --> 00:08:17,640
sequence I just split it in three parts

00:08:15,380 --> 00:08:20,850
but to me the most exciting thing about

00:08:17,640 --> 00:08:22,080
cycle J's is dataflow I'm just going to

00:08:20,850 --> 00:08:29,760
create a bit of suspense here because

00:08:22,080 --> 00:08:32,159
I'm gonna drink some water so every time

00:08:29,760 --> 00:08:34,110
you write a cycle J is HAP each of these

00:08:32,159 --> 00:08:36,510
observable declarations is a node in a

00:08:34,110 --> 00:08:39,510
data flow graph and the dependencies are

00:08:36,510 --> 00:08:42,419
in the declarations are arrows so you

00:08:39,510 --> 00:08:45,570
get this kind of usable circuit type of

00:08:42,419 --> 00:08:47,130
mini-map of your code improve input from

00:08:45,570 --> 00:08:50,190
the external world or sources and

00:08:47,130 --> 00:08:54,390
outputs are sinks and your app is

00:08:50,190 --> 00:08:56,430
everything in between so all of that was

00:08:54,390 --> 00:08:59,010
possible because a cycle

00:08:56,430 --> 00:09:01,920
just is entirely based on observables

00:08:59,010 --> 00:09:03,660
from rxjs now I showed you some code

00:09:01,920 --> 00:09:06,360
that you probably didn't even understand

00:09:03,660 --> 00:09:07,860
and a lot of people get scared of

00:09:06,360 --> 00:09:11,220
observable and that's totally okay

00:09:07,860 --> 00:09:14,130
because actually rxjs is quite hard to

00:09:11,220 --> 00:09:16,050
reason about I mean everyone says that

00:09:14,130 --> 00:09:20,490
react makes it easy to reason about your

00:09:16,050 --> 00:09:22,680
code but cycle does the opposite so why

00:09:20,490 --> 00:09:24,480
would I do that why would I make you

00:09:22,680 --> 00:09:27,420
like have to learn this weird stuff

00:09:24,480 --> 00:09:31,140
right so let me tell your story okay

00:09:27,420 --> 00:09:33,029
let's try to sell this just let's just

00:09:31,140 --> 00:09:35,100
pretend that we are all in the 19th

00:09:33,029 --> 00:09:37,440
century here right now okay

00:09:35,100 --> 00:09:38,910
all of us here use horses as a mean as

00:09:37,440 --> 00:09:41,070
transportation so if you're gonna go

00:09:38,910 --> 00:09:44,100
back home or to the hotel today you're

00:09:41,070 --> 00:09:45,630
gonna take it at horse so horses are

00:09:44,100 --> 00:09:47,160
pretty easy to reason about right you

00:09:45,630 --> 00:09:49,620
just get on top of them you sort of

00:09:47,160 --> 00:09:53,220
press the side and it's say let go okay

00:09:49,620 --> 00:09:55,050
go and yeah so but let's suppose that

00:09:53,220 --> 00:09:57,060
for some reason someone from the 21st

00:09:55,050 --> 00:10:00,089
century takes a time machine goes back

00:09:57,060 --> 00:10:02,520
to the past and they meet you and they

00:10:00,089 --> 00:10:04,260
say hi pleasure to meet you I am from

00:10:02,520 --> 00:10:06,620
the future hey I want to show you

00:10:04,260 --> 00:10:09,900
something and then they show you this

00:10:06,620 --> 00:10:12,360
and your first reaction is will not be

00:10:09,900 --> 00:10:14,070
like yeah yeah that's a car shut up your

00:10:12,360 --> 00:10:16,709
first reaction will be like whoa that's

00:10:14,070 --> 00:10:19,230
that's pretty cool but also like whoa

00:10:16,709 --> 00:10:21,660
that's kind of scary right maybe it's

00:10:19,230 --> 00:10:24,870
dangerous and also like whoa how the

00:10:21,660 --> 00:10:26,310
hell do you use this thing well it all

00:10:24,870 --> 00:10:27,870
starts with the initial you need to have

00:10:26,310 --> 00:10:29,490
a key and then you have the clutch and

00:10:27,870 --> 00:10:31,560
the gears but you need to keep your

00:10:29,490 --> 00:10:33,029
hands on the steering wheel but don't

00:10:31,560 --> 00:10:34,950
forget to start by releasing the

00:10:33,029 --> 00:10:37,110
handbrake and gradually release the

00:10:34,950 --> 00:10:38,670
clutch while giving gas oh by the way

00:10:37,110 --> 00:10:41,339
Americans don't know this concept

00:10:38,670 --> 00:10:43,650
because they have automatic cars but but

00:10:41,339 --> 00:10:46,490
but yeah like you know in Brazil and an

00:10:43,650 --> 00:10:51,270
era people have this stuff so what is it

00:10:46,490 --> 00:10:52,800
this is quite hard to reason about yeah

00:10:51,270 --> 00:10:54,779
so by the way you know Stu need to learn

00:10:52,800 --> 00:10:56,339
hundreds of traffic signs and driving

00:10:54,779 --> 00:10:57,720
conventions and it's not like you know

00:10:56,339 --> 00:10:59,250
that you sit on the chair for half an

00:10:57,720 --> 00:11:01,170
hour you learn it you know people take

00:10:59,250 --> 00:11:02,640
seers trainings and exams and not

00:11:01,170 --> 00:11:04,680
everyone passes like maybe you didn't

00:11:02,640 --> 00:11:09,120
pass right maybe didn't pass on this

00:11:04,680 --> 00:11:10,230
stuff and parallel parking Wow

00:11:09,120 --> 00:11:15,900
such learning curve

00:11:10,230 --> 00:11:18,360
much sleep so without any training you

00:11:15,900 --> 00:11:19,830
decide to give this car stuff some test

00:11:18,360 --> 00:11:21,780
drive so you get inside the car you put

00:11:19,830 --> 00:11:24,450
your hands on the wheel and you kick the

00:11:21,780 --> 00:11:28,320
sides of the seat as if would be a horse

00:11:24,450 --> 00:11:32,100
and nothing happens and then you say

00:11:28,320 --> 00:11:33,690
like well maybe yeah and just nothing

00:11:32,100 --> 00:11:34,380
happens so what do you do next you go to

00:11:33,690 --> 00:11:36,420
stack overflow

00:11:34,380 --> 00:11:39,180
and you put a question there saying like

00:11:36,420 --> 00:11:40,380
I got inside the car and I put my hands

00:11:39,180 --> 00:11:41,940
on the wheel and I keep the size and

00:11:40,380 --> 00:11:44,760
nothing happens how do you make this

00:11:41,940 --> 00:11:49,920
work it does not work and then you know

00:11:44,760 --> 00:11:51,960
in this moments I just go like so then

00:11:49,920 --> 00:11:54,720
you get frustrated and you quit all this

00:11:51,960 --> 00:11:56,430
car nonsense and you proudly say you

00:11:54,720 --> 00:11:58,380
know I actually love horses you know

00:11:56,430 --> 00:12:00,810
they're like friendly animals you know

00:11:58,380 --> 00:12:03,030
it's not like these machines and you can

00:12:00,810 --> 00:12:06,090
ride horses on any terrain and be the

00:12:03,030 --> 00:12:08,100
grass or rivers with stone or dirt and

00:12:06,090 --> 00:12:10,680
stuff it's not like these stupid cars

00:12:08,100 --> 00:12:13,980
that only go on asphalt fields built

00:12:10,680 --> 00:12:15,900
specifically for cars so ok you're a

00:12:13,980 --> 00:12:17,660
proud horse rider that's that's

00:12:15,900 --> 00:12:19,920
perfectly okay if you want to do that

00:12:17,660 --> 00:12:22,440
and you can actually accomplish quite a

00:12:19,920 --> 00:12:25,110
lot with just using horses you know like

00:12:22,440 --> 00:12:26,820
Genghis Khan and the Mongol Empire they

00:12:25,110 --> 00:12:27,750
conquered a whole continent was actually

00:12:26,820 --> 00:12:30,240
the biggest Empire

00:12:27,750 --> 00:12:33,510
with just using horses and bows and

00:12:30,240 --> 00:12:39,270
arrows so you can do a lot it's just

00:12:33,510 --> 00:12:41,430
horses but cars are better like they're

00:12:39,270 --> 00:12:43,230
so much better like they're faster than

00:12:41,430 --> 00:12:46,110
you know Ferraris have like hundreds of

00:12:43,230 --> 00:12:49,410
horsepower and you know have space

00:12:46,110 --> 00:12:51,480
indoors they can carry like four people

00:12:49,410 --> 00:12:54,390
or five people a lot of luggage it's

00:12:51,480 --> 00:12:56,250
like much better this of course there's

00:12:54,390 --> 00:12:57,900
cave yachts all those caves with cars

00:12:56,250 --> 00:13:00,360
you can't drive them on stones

00:12:57,900 --> 00:13:02,880
well yeah but no and it's not like only

00:13:00,360 --> 00:13:04,290
geniuses can ride cars no like you have

00:13:02,880 --> 00:13:06,180
all kinds of people driving cars young

00:13:04,290 --> 00:13:09,210
people old people my grandfather also

00:13:06,180 --> 00:13:11,430
tried cars and stuff men and women and

00:13:09,210 --> 00:13:15,960
yeah so sometimes evil people driving

00:13:11,430 --> 00:13:18,000
okay let's stop this thing so this react

00:13:15,960 --> 00:13:20,610
code here mate with the timer with your

00:13:18,000 --> 00:13:21,090
class in five minutes that's a that's a

00:13:20,610 --> 00:13:23,610
horse

00:13:21,090 --> 00:13:25,350
and this rxjs code

00:13:23,610 --> 00:13:29,670
here with one simple function that

00:13:25,350 --> 00:13:30,899
that's a car okay so how does this rx

00:13:29,670 --> 00:13:33,120
stuff work after all

00:13:30,899 --> 00:13:34,560
I'll give you a short introduction just

00:13:33,120 --> 00:13:35,910
to get us started but remember that you

00:13:34,560 --> 00:13:40,620
need to get a proper training before you

00:13:35,910 --> 00:13:42,450
start doing accidents or something Rx is

00:13:40,620 --> 00:13:44,190
basically about just one data structure

00:13:42,450 --> 00:13:46,430
which is at the heart of the whole

00:13:44,190 --> 00:13:48,870
library and that's the observable and

00:13:46,430 --> 00:13:51,990
it's a data structure that represents a

00:13:48,870 --> 00:13:54,620
sequence of events over time and you can

00:13:51,990 --> 00:13:56,790
kind of use it like you'd use a raisin

00:13:54,620 --> 00:13:58,220
underscore or lodash although Paul

00:13:56,790 --> 00:14:02,579
Taylor is not going to like me right now

00:13:58,220 --> 00:14:03,839
and I can show you let's say you have

00:14:02,579 --> 00:14:06,630
this clicks array okay

00:14:03,839 --> 00:14:09,360
and it has three events inside it don't

00:14:06,630 --> 00:14:10,800
ask me why it has mouse clicks inside it

00:14:09,360 --> 00:14:13,410
and then we want to make a dynamic

00:14:10,800 --> 00:14:16,470
counter so we first make an array of the

00:14:13,410 --> 00:14:18,600
increments just clicks mapped to the

00:14:16,470 --> 00:14:20,550
number one but I'm just gonna extract

00:14:18,600 --> 00:14:23,640
that function and give it a name just

00:14:20,550 --> 00:14:26,579
called to one so we just map each of

00:14:23,640 --> 00:14:29,130
these clicks to the number one when we

00:14:26,579 --> 00:14:32,880
run this the increments array is now 1 1

00:14:29,130 --> 00:14:35,040
1 okay then we make a counter by getting

00:14:32,880 --> 00:14:38,610
the increments array and reducing it by

00:14:35,040 --> 00:14:41,790
iterating over every 2 pairs and just

00:14:38,610 --> 00:14:46,620
adding those previous and next and then

00:14:41,790 --> 00:14:48,600
we get counter equals 3 ok so we have a

00:14:46,620 --> 00:14:50,269
problem here actually a big dope I

00:14:48,600 --> 00:14:53,370
forgot something

00:14:50,269 --> 00:14:56,720
let's go back no you have to actually

00:14:53,370 --> 00:15:08,699
watch the whole thing all over again

00:14:56,720 --> 00:15:11,940
because I kind of skip myself but the

00:15:08,699 --> 00:15:14,820
idea is let's say that now you would add

00:15:11,940 --> 00:15:18,240
another mouse event to the clicks array

00:15:14,820 --> 00:15:20,550
okay that is what I'm trying to get at

00:15:18,240 --> 00:15:23,010
what would what would happen then to the

00:15:20,550 --> 00:15:24,750
increments array and the counter that is

00:15:23,010 --> 00:15:27,449
what I'm trying to show so we make the

00:15:24,750 --> 00:15:34,079
counter there with reducing the

00:15:27,449 --> 00:15:36,660
increments and now so yep go faster so

00:15:34,079 --> 00:15:37,449
counter is now 3 so then I just decide

00:15:36,660 --> 00:15:40,290
for some reason

00:15:37,449 --> 00:15:44,679
put a new clicks in this clicks ray

00:15:40,290 --> 00:15:47,980
Mouse events and then clicks now has

00:15:44,679 --> 00:15:52,029
four mouse clicks but increments array

00:15:47,980 --> 00:15:54,910
has one woman and counter is three still

00:15:52,029 --> 00:15:56,529
three so the problem that we got is that

00:15:54,910 --> 00:15:58,419
in the beginning these three pieces of

00:15:56,529 --> 00:16:00,730
data were consistent with each other

00:15:58,419 --> 00:16:03,160
right but after the update to this

00:16:00,730 --> 00:16:05,109
clicks array increments and counter are

00:16:03,160 --> 00:16:07,480
in this red state where they're

00:16:05,109 --> 00:16:09,759
inconsistent or not up-to-date anymore

00:16:07,480 --> 00:16:12,369
with the source the clicks array so how

00:16:09,759 --> 00:16:14,439
can we solve this well here's one

00:16:12,369 --> 00:16:16,179
creative way let's suppose that the

00:16:14,439 --> 00:16:18,879
clicks array for some reason has this

00:16:16,179 --> 00:16:21,249
magical method call called add on push

00:16:18,879 --> 00:16:23,169
listener where you can give a call back

00:16:21,249 --> 00:16:26,439
to it well and it's gonna be run

00:16:23,169 --> 00:16:28,209
whenever a pushes is given to this

00:16:26,439 --> 00:16:31,419
clicks array and we're gonna need to

00:16:28,209 --> 00:16:34,749
update the increments array to have also

00:16:31,419 --> 00:16:37,869
a new number one there and now we use

00:16:34,749 --> 00:16:40,239
the two one function so if the clicks

00:16:37,869 --> 00:16:43,809
array has three mouse things then we

00:16:40,239 --> 00:16:45,489
push a new mouse event into this clicks

00:16:43,809 --> 00:16:48,160
it will automatically call that push

00:16:45,489 --> 00:16:51,100
listener and it will increment it will

00:16:48,160 --> 00:16:53,999
update the increments array so this type

00:16:51,100 --> 00:16:57,069
of approach is what we're gonna seek for

00:16:53,999 --> 00:17:00,039
so our system started like this and then

00:16:57,069 --> 00:17:02,199
when a push to the clicks happens we

00:17:00,039 --> 00:17:04,539
automatically see a push happen on the

00:17:02,199 --> 00:17:07,000
increment array which can also have a

00:17:04,539 --> 00:17:09,339
push listener to go and update the

00:17:07,000 --> 00:17:12,069
counter variable so everything stays

00:17:09,339 --> 00:17:14,169
green all the time as soon as possible

00:17:12,069 --> 00:17:17,799
and always consistent with its source

00:17:14,169 --> 00:17:19,839
data so rxjs observables are very

00:17:17,799 --> 00:17:22,449
similar to what I just showed you have

00:17:19,839 --> 00:17:24,399
the sequence of clicks over time and you

00:17:22,449 --> 00:17:26,980
make another sequence that increments

00:17:24,399 --> 00:17:28,449
but this map they're in pink it's

00:17:26,980 --> 00:17:31,570
special because it has this

00:17:28,449 --> 00:17:33,700
functionality of adding a push listener

00:17:31,570 --> 00:17:36,760
to the to the source that the clicks

00:17:33,700 --> 00:17:40,059
already so you can basically think of

00:17:36,760 --> 00:17:43,179
the map here as always map the clicks

00:17:40,059 --> 00:17:46,230
sequence to this number one not like at

00:17:43,179 --> 00:17:48,669
the moment where you call map but always

00:17:46,230 --> 00:17:50,770
so this is how it works we start by

00:17:48,669 --> 00:17:56,160
making the observable clicks

00:17:50,770 --> 00:18:00,070
and which omits events from the document

00:17:56,160 --> 00:18:02,080
when the document is clicked and as

00:18:00,070 --> 00:18:03,790
output we get this sort of object is

00:18:02,080 --> 00:18:06,040
absorbable which is really isn't like

00:18:03,790 --> 00:18:07,930
useful you can't just usually like erase

00:18:06,040 --> 00:18:09,280
it doesn't give us anything interesting

00:18:07,930 --> 00:18:11,710
so what you have to do instead is

00:18:09,280 --> 00:18:13,330
subscribe to the clicks absorbable or

00:18:11,710 --> 00:18:17,070
basically sort of add an event listener

00:18:13,330 --> 00:18:20,910
that and here we're going to sort of

00:18:17,070 --> 00:18:25,390
print those clicks to the console.log

00:18:20,910 --> 00:18:27,610
and then when I click on the document we

00:18:25,390 --> 00:18:31,180
see those messages happen on the console

00:18:27,610 --> 00:18:33,550
block so the next step is to make the

00:18:31,180 --> 00:18:38,200
increments observable we say increments

00:18:33,550 --> 00:18:43,420
equals we say increments equals the

00:18:38,200 --> 00:18:45,460
clicks mapped to the number one and this

00:18:43,420 --> 00:18:47,920
is also an observable stream and then we

00:18:45,460 --> 00:18:50,530
get the increments and we say a counter

00:18:47,920 --> 00:18:52,990
in close increments scan which is kind

00:18:50,530 --> 00:18:54,820
of like our equivalent to reduce okay

00:18:52,990 --> 00:18:58,360
it's not that much different

00:18:54,820 --> 00:19:00,190
and then we now add an event listener to

00:18:58,360 --> 00:19:02,920
the counter which will write to the

00:19:00,190 --> 00:19:04,720
console log and we will be able to see

00:19:02,920 --> 00:19:10,290
the counter evolving over time without

00:19:04,720 --> 00:19:10,290
having to update it manually like that

00:19:11,490 --> 00:19:16,390
so this means everything is updated

00:19:14,010 --> 00:19:18,670
automatically for us when using rxjs

00:19:16,390 --> 00:19:20,320
observables we completely eliminate the

00:19:18,670 --> 00:19:22,060
problem of keeping pieces of state

00:19:20,320 --> 00:19:25,750
up-to-date and consistent with each

00:19:22,060 --> 00:19:29,860
other and as a consequence you can

00:19:25,750 --> 00:19:32,890
capture the dynamic value over time and

00:19:29,860 --> 00:19:35,350
you can declare it in a var just once

00:19:32,890 --> 00:19:39,040
and you never again need to sort of set

00:19:35,350 --> 00:19:40,390
or update that value again and this

00:19:39,040 --> 00:19:42,460
means that if you want to know how a

00:19:40,390 --> 00:19:44,560
value evolves over time you don't need

00:19:42,460 --> 00:19:46,510
to sort of hunt around the code how that

00:19:44,560 --> 00:19:49,450
how does that thing work you just need

00:19:46,510 --> 00:19:51,910
to look at its declaration and this is

00:19:49,450 --> 00:19:55,720
this is the core idea in cycle Jess

00:19:51,910 --> 00:19:58,120
everything is declared just once so

00:19:55,720 --> 00:20:00,610
cycle jess is really about to sort of

00:19:58,120 --> 00:20:03,530
mother functions one is your main

00:20:00,610 --> 00:20:06,290
function and the other is the sort of

00:20:03,530 --> 00:20:07,700
sort of external world function which

00:20:06,290 --> 00:20:09,650
passes through the DOM and through the

00:20:07,700 --> 00:20:14,150
user in the cetera and it lives in the

00:20:09,650 --> 00:20:16,280
framework so the main returns an

00:20:14,150 --> 00:20:18,890
observable of the rendered virtual Dom

00:20:16,280 --> 00:20:20,990
and because it's an absorbable it's a

00:20:18,890 --> 00:20:23,900
value evolving over time so you can kind

00:20:20,990 --> 00:20:26,900
of think it as a movie of a virtual DOM

00:20:23,900 --> 00:20:28,520
and this is given to psycho J s as a

00:20:26,900 --> 00:20:32,060
framework which will display it to the

00:20:28,520 --> 00:20:34,820
user and return unobservable containing

00:20:32,060 --> 00:20:36,880
the users interaction events but

00:20:34,820 --> 00:20:39,950
remember because it's an absorbable it

00:20:36,880 --> 00:20:41,990
encapsulates all the future interaction

00:20:39,950 --> 00:20:43,730
events as the listenable event stream it

00:20:41,990 --> 00:20:46,460
doesn't mean that by the time we return

00:20:43,730 --> 00:20:47,720
this the user event is there no it's not

00:20:46,460 --> 00:20:50,530
you need to subscribe to this reference

00:20:47,720 --> 00:20:52,730
and then you won't be able to see those

00:20:50,530 --> 00:20:55,910
so this is given back to the main

00:20:52,730 --> 00:20:58,010
function and the output of one of these

00:20:55,910 --> 00:21:02,560
is the input of the other and they sort

00:20:58,010 --> 00:21:05,810
of work like in loop or as a cycle and

00:21:02,560 --> 00:21:08,570
guess how many times these two functions

00:21:05,810 --> 00:21:10,840
are called does anyone have like a good

00:21:08,570 --> 00:21:15,170
guess of how many times these are called

00:21:10,840 --> 00:21:20,690
during the execution of an app someone

00:21:15,170 --> 00:21:22,940
courageous no huh yeah so they are

00:21:20,690 --> 00:21:24,980
called just once because we declare

00:21:22,940 --> 00:21:28,640
observables just once that's the idea

00:21:24,980 --> 00:21:31,070
and your observables will actually be

00:21:28,640 --> 00:21:33,110
the program so basically this main is

00:21:31,070 --> 00:21:35,500
just returning the program and the

00:21:33,110 --> 00:21:39,620
program is this sort of observables

00:21:35,500 --> 00:21:41,510
madness so let's take psycho Jess for a

00:21:39,620 --> 00:21:43,970
spin we start by making the main

00:21:41,510 --> 00:21:48,410
function which takes sources containing

00:21:43,970 --> 00:21:51,470
user events Vitry stream is the evolving

00:21:48,410 --> 00:21:54,260
virtual Dom tree over time and it

00:21:51,470 --> 00:21:58,070
contains a div with a button saying

00:21:54,260 --> 00:22:02,630
click me and a label saying clicked zero

00:21:58,070 --> 00:22:06,920
times so we return this virtual Dom tree

00:22:02,630 --> 00:22:09,710
stream as sync to the Dom and then we

00:22:06,920 --> 00:22:12,680
just connect the main to the Dom by

00:22:09,710 --> 00:22:16,520
saying cycle don't run and then we get

00:22:12,680 --> 00:22:17,330
this output here on the Dom but as you

00:22:16,520 --> 00:22:19,570
can see it doesn't

00:22:17,330 --> 00:22:22,760
do anything we don't have event handlers

00:22:19,570 --> 00:22:25,250
so let's change this code we can get the

00:22:22,760 --> 00:22:29,120
stream of clicks by using sources dot

00:22:25,250 --> 00:22:31,640
Dom dot select the button dot events

00:22:29,120 --> 00:22:36,170
click and this is like a cycle J's API

00:22:31,640 --> 00:22:37,730
and this gives us an event observable of

00:22:36,170 --> 00:22:39,710
clicks and now you know the typical

00:22:37,730 --> 00:22:42,350
stuff we just make increments as clicks

00:22:39,710 --> 00:22:46,040
mapped to one and then we get the count

00:22:42,350 --> 00:22:48,080
stream as increments scanned and we

00:22:46,040 --> 00:22:51,320
prepend it with the number zero because

00:22:48,080 --> 00:22:53,330
the count starts as the number zero so

00:22:51,320 --> 00:22:57,440
then we change the virtual Dom stream to

00:22:53,330 --> 00:22:59,330
be the count stream mapped to so we get

00:22:57,440 --> 00:23:01,250
that number to count and we map to a

00:22:59,330 --> 00:23:06,410
virtual Dom containing that number and

00:23:01,250 --> 00:23:08,780
now it sort of works so okay we can make

00:23:06,410 --> 00:23:11,570
sort of simple programs with cycle J's

00:23:08,780 --> 00:23:14,300
but what about components ok can you

00:23:11,570 --> 00:23:17,080
organize psycho apps in small pieces and

00:23:14,300 --> 00:23:19,670
reuse them freely like you can in react

00:23:17,080 --> 00:23:23,780
well sure otherwise it wouldn't have

00:23:19,670 --> 00:23:27,050
this flight yeah obviously so think of

00:23:23,780 --> 00:23:30,020
the think about react right now as and

00:23:27,050 --> 00:23:31,700
these components as black boxes ok so

00:23:30,020 --> 00:23:34,400
ignore the internals for now and the

00:23:31,700 --> 00:23:37,760
question is what is given to a component

00:23:34,400 --> 00:23:40,940
and what comes out of a component and

00:23:37,760 --> 00:23:44,840
I'm actually asking you so anyone here

00:23:40,940 --> 00:23:45,770
knows what goes inside a component props

00:23:44,840 --> 00:23:48,200
correct

00:23:45,770 --> 00:23:50,780
obviously props are one type of input

00:23:48,200 --> 00:23:56,270
given to an a component but what comes

00:23:50,780 --> 00:23:58,670
out the virtual Dom is rendered as the

00:23:56,270 --> 00:24:00,920
output but here's the trick if

00:23:58,670 --> 00:24:03,350
components are real black boxes then

00:24:00,920 --> 00:24:05,870
there's another input which is given to

00:24:03,350 --> 00:24:08,480
almost all of the react components and

00:24:05,870 --> 00:24:13,760
this is the one which I'm interested to

00:24:08,480 --> 00:24:16,310
see if anyone has an answer No now you

00:24:13,760 --> 00:24:20,840
guys don't know basically it's user

00:24:16,310 --> 00:24:22,700
events right I mean in react these come

00:24:20,840 --> 00:24:24,350
into the component in the form of event

00:24:22,700 --> 00:24:26,840
handler callbacks right that's how a

00:24:24,350 --> 00:24:30,179
click can change something in the

00:24:26,840 --> 00:24:33,269
component so this is sort of like

00:24:30,179 --> 00:24:34,830
licit input to a component user events

00:24:33,269 --> 00:24:38,220
and you know what this is starting to

00:24:34,830 --> 00:24:41,850
look a lot like the main function in

00:24:38,220 --> 00:24:44,759
cycle it takes user events as input and

00:24:41,850 --> 00:24:47,549
it produces an evolving virtual Dom

00:24:44,759 --> 00:24:49,889
stream over time and it can also take

00:24:47,549 --> 00:24:52,499
props as input so we can take this main

00:24:49,889 --> 00:24:56,669
function and we can use it as a reusable

00:24:52,499 --> 00:24:58,830
component so this is the counter program

00:24:56,669 --> 00:25:02,700
that we wrote of some while ago so let's

00:24:58,830 --> 00:25:04,799
reuse this one okay I just improved it

00:25:02,700 --> 00:25:09,059
by also adding decrement I just added a

00:25:04,799 --> 00:25:12,779
button and another stream and yeah and

00:25:09,059 --> 00:25:15,240
that works and notice also that besides

00:25:12,779 --> 00:25:18,419
the Dom I'm also returning the value

00:25:15,240 --> 00:25:21,299
sort basically the the counter stream so

00:25:18,419 --> 00:25:23,490
because the this component needs to send

00:25:21,299 --> 00:25:25,590
back to its parent component what is the

00:25:23,490 --> 00:25:28,350
value so not just like the the span

00:25:25,590 --> 00:25:32,879
saying like clicked zero times but also

00:25:28,350 --> 00:25:34,460
that number zero one two and three so

00:25:32,879 --> 00:25:37,950
there's nothing that magical about the

00:25:34,460 --> 00:25:40,259
word main to this function so I can

00:25:37,950 --> 00:25:43,740
rename that to let's say super component

00:25:40,259 --> 00:25:46,919
and we can use that in cycle run it's

00:25:43,740 --> 00:25:51,240
just a name or in other words I could

00:25:46,919 --> 00:25:54,179
also make a main function here right and

00:25:51,240 --> 00:25:56,820
then I can call super counter inside it

00:25:54,179 --> 00:25:59,549
but there's nothing really magical about

00:25:56,820 --> 00:26:02,249
this it's just cloning the other

00:25:59,549 --> 00:26:04,139
functionality so notice now that we can

00:26:02,249 --> 00:26:06,960
insert more code here inside the main

00:26:04,139 --> 00:26:10,200
and this is how we go about making a

00:26:06,960 --> 00:26:13,980
hierarchy of components right so let's

00:26:10,200 --> 00:26:15,840
reuse our component to make a body mass

00:26:13,980 --> 00:26:17,399
index calculator and you know it takes

00:26:15,840 --> 00:26:19,679
your weight and your height so the

00:26:17,399 --> 00:26:22,139
number of clicks to this thing will be

00:26:19,679 --> 00:26:23,970
your weight in kilograms so you should

00:26:22,139 --> 00:26:28,590
wait a lot you need to click like many

00:26:23,970 --> 00:26:30,720
times yeah so we start by calling our

00:26:28,590 --> 00:26:33,990
super counter function and storing its

00:26:30,720 --> 00:26:36,629
output we just call it like lower case

00:26:33,990 --> 00:26:39,570
super counter then we make the BMI

00:26:36,629 --> 00:26:42,059
stream which is a number by taking the

00:26:39,570 --> 00:26:43,710
value from the super counter and using

00:26:42,059 --> 00:26:45,480
that as the weight map

00:26:43,710 --> 00:26:47,730
to some calculation how to calculate

00:26:45,480 --> 00:26:51,210
your body mass index then we make the

00:26:47,730 --> 00:26:53,850
virtual Dom tree stream as the BMI

00:26:51,210 --> 00:26:57,659
streamed then the number mapped to a div

00:26:53,850 --> 00:27:01,770
saying like I know yours 176 centimeters

00:26:57,659 --> 00:27:06,720
tall but how much how much do you weigh

00:27:01,770 --> 00:27:09,600
and the child virtual Dom and the result

00:27:06,720 --> 00:27:13,289
calculation there the BMI so we return

00:27:09,600 --> 00:27:18,659
now this virtual Dom tree to the Dom as

00:27:13,289 --> 00:27:20,640
a sink and when we run the app then now

00:27:18,659 --> 00:27:23,429
the number of clicks that I click here

00:27:20,640 --> 00:27:26,159
will be used as my weight to calculate

00:27:23,429 --> 00:27:29,399
the body mass index it's quite a

00:27:26,159 --> 00:27:33,120
different approach so yeah we can do

00:27:29,399 --> 00:27:35,220
components and if you notice like what

00:27:33,120 --> 00:27:36,630
uh what's up with these drivers stuff

00:27:35,220 --> 00:27:38,220
that we're making here in the main

00:27:36,630 --> 00:27:41,279
function like these are kind of like

00:27:38,220 --> 00:27:44,279
plugins okay the special thing is that

00:27:41,279 --> 00:27:46,649
the main in psycho GS is completely

00:27:44,279 --> 00:27:48,179
functional completely pure so all the

00:27:46,649 --> 00:27:51,120
side effects have to be pushed through

00:27:48,179 --> 00:27:53,640
these drivers so we have an HTTP driver

00:27:51,120 --> 00:27:56,700
and we also have a react native the

00:27:53,640 --> 00:27:58,919
driver okay and that's what allows me to

00:27:56,700 --> 00:28:00,870
do stuff like this so this is the same

00:27:58,919 --> 00:28:03,659
app running on Android with react native

00:28:00,870 --> 00:28:05,190
and in the browser so it's not exactly

00:28:03,659 --> 00:28:06,990
the same code but we have a lot of code

00:28:05,190 --> 00:28:10,980
sharing happening out over there

00:28:06,990 --> 00:28:13,950
of course that's nice but what about

00:28:10,980 --> 00:28:17,789
architecture how does the scale blue

00:28:13,950 --> 00:28:19,799
balloon what is the flux equivalent in

00:28:17,789 --> 00:28:22,770
cycle I'm trying to anticipate all the

00:28:19,799 --> 00:28:24,240
questions you're gonna give me so yeah

00:28:22,770 --> 00:28:26,370
flux is like this

00:28:24,240 --> 00:28:28,860
it's an architecture where dataflow is

00:28:26,370 --> 00:28:31,230
static it's always how always has

00:28:28,860 --> 00:28:35,279
actions always has a dispatcher in store

00:28:31,230 --> 00:28:37,260
it's fixed and it's like that but in

00:28:35,279 --> 00:28:39,570
cycle Jess this is the dataflow it's

00:28:37,260 --> 00:28:41,970
just sort of two parts it it's also

00:28:39,570 --> 00:28:44,370
unidirectional but it just has the app

00:28:41,970 --> 00:28:48,000
your main and the external world and

00:28:44,370 --> 00:28:51,059
it's like zoom and you only need to care

00:28:48,000 --> 00:28:52,620
about your main function right so it's

00:28:51,059 --> 00:28:54,149
actually not like when you're

00:28:52,620 --> 00:28:56,940
programming it's not like a psycho is

00:28:54,149 --> 00:28:57,450
just like a one-way thing but there's no

00:28:56,940 --> 00:28:59,429
rigid

00:28:57,450 --> 00:29:02,070
structure for this this is just a pure

00:28:59,429 --> 00:29:05,399
function and you only need to refactor

00:29:02,070 --> 00:29:07,679
it and we usually have three tools at

00:29:05,399 --> 00:29:10,080
our disposal we have Model View intent

00:29:07,679 --> 00:29:12,720
as a pattern to structure the main

00:29:10,080 --> 00:29:15,360
function we have nested components as we

00:29:12,720 --> 00:29:16,700
saw and we have explicit data flow

00:29:15,360 --> 00:29:20,399
graphs

00:29:16,700 --> 00:29:22,289
well first we can split the main as a

00:29:20,399 --> 00:29:23,130
three step process or we can split it as

00:29:22,289 --> 00:29:25,289
a 17

00:29:23,130 --> 00:29:27,360
step process it's just a function you

00:29:25,289 --> 00:29:30,570
can you know you can refactor it and I

00:29:27,360 --> 00:29:32,850
call these three parts as intent model

00:29:30,570 --> 00:29:35,070
and view so intent does some

00:29:32,850 --> 00:29:37,110
pre-processing of the inputs from the

00:29:35,070 --> 00:29:40,049
external world model represents the

00:29:37,110 --> 00:29:43,679
States and view creates the output like

00:29:40,049 --> 00:29:46,169
a virtual bomb and another way I've seen

00:29:43,679 --> 00:29:48,240
it is that first we listen to events

00:29:46,169 --> 00:29:51,720
coming from the external world then we

00:29:48,240 --> 00:29:54,570
process that to make some opinion of it

00:29:51,720 --> 00:29:56,880
and then we make the program express its

00:29:54,570 --> 00:29:58,799
own opinion by speaking that's one way

00:29:56,880 --> 00:30:02,580
of viewing it and this is just how we

00:29:58,799 --> 00:30:05,940
recommend organizing a component and we

00:30:02,580 --> 00:30:07,830
also saw how we can embed cycle programs

00:30:05,940 --> 00:30:09,539
inside other cycle programs so

00:30:07,830 --> 00:30:12,840
essentially we can have it like a sub

00:30:09,539 --> 00:30:15,000
main inside this bigger main and the

00:30:12,840 --> 00:30:18,299
child component can also be split into

00:30:15,000 --> 00:30:22,679
three parts as in tent model and view

00:30:18,299 --> 00:30:24,779
and when programs start to grow it's

00:30:22,679 --> 00:30:27,269
important to make it easy to have a good

00:30:24,779 --> 00:30:29,610
mental model of how your application is

00:30:27,269 --> 00:30:33,120
structured and this is how data flow

00:30:29,610 --> 00:30:35,279
graphs can help a lot so essentially

00:30:33,120 --> 00:30:37,830
these are mini-map diagrams that

00:30:35,279 --> 00:30:40,409
summarize your code and they can be

00:30:37,830 --> 00:30:42,120
built sort of automatically so this is

00:30:40,409 --> 00:30:44,610
what I was talking about when I showed

00:30:42,120 --> 00:30:47,039
this slide it's pretty straightforward

00:30:44,610 --> 00:30:49,139
to achieve the the graph on the on the

00:30:47,039 --> 00:30:51,029
left for instance look at only the

00:30:49,139 --> 00:30:54,510
action stream declaration okay the last

00:30:51,029 --> 00:30:56,519
one there we just make an arrow from the

00:30:54,510 --> 00:30:59,700
streams on the right hand side of the

00:30:56,519 --> 00:31:01,679
decoration to the left hand side that's

00:30:59,700 --> 00:31:04,139
like all the reasoning we need to do and

00:31:01,679 --> 00:31:05,360
it could be done with an ast checker or

00:31:04,139 --> 00:31:09,029
something like that

00:31:05,360 --> 00:31:11,059
so if we can continue making arrows for

00:31:09,029 --> 00:31:12,860
all of these stream declarations

00:31:11,059 --> 00:31:15,350
you can get a really large graph

00:31:12,860 --> 00:31:19,249
summarizing the actual data flow between

00:31:15,350 --> 00:31:21,019
all the parts of your app so for

00:31:19,249 --> 00:31:22,940
instance here's an interesting more

00:31:21,019 --> 00:31:26,360
advanced piece of UI built in psycho

00:31:22,940 --> 00:31:28,999
jazz it's this kind of alter complete

00:31:26,360 --> 00:31:31,519
search field which lets you use also

00:31:28,999 --> 00:31:34,669
keyboard arrows okay - kind of like an

00:31:31,519 --> 00:31:36,409
IDE s and it has some tricky logic like

00:31:34,669 --> 00:31:39,409
a lot of stuff with cancelling requests

00:31:36,409 --> 00:31:43,009
on the fly and handling click outside of

00:31:39,409 --> 00:31:45,080
the menu stuff like that when by the way

00:31:43,009 --> 00:31:47,450
this piece of UI was originally built in

00:31:45,080 --> 00:31:51,230
closure script and arm by David Nolan

00:31:47,450 --> 00:31:53,570
and I wrote it for psycho GS because

00:31:51,230 --> 00:31:55,850
David said that he didn't believe it

00:31:53,570 --> 00:31:58,369
could be done with rxjs so there you go

00:31:55,850 --> 00:32:00,350
so David if you're David Nolan if you're

00:31:58,369 --> 00:32:04,070
watching this one is dedicated specially

00:32:00,350 --> 00:32:06,919
for you and this is the code it's

00:32:04,070 --> 00:32:08,779
roughly 300 lines of code and here in

00:32:06,919 --> 00:32:10,700
sublime text you can see on the far

00:32:08,779 --> 00:32:12,139
right over there there's this mini map

00:32:10,700 --> 00:32:14,330
of the file it doesn't tell me anything

00:32:12,139 --> 00:32:16,850
interesting is like do you have a lot of

00:32:14,330 --> 00:32:21,110
code you know so what if we would have

00:32:16,850 --> 00:32:23,389
liked better minimaps right so I ran a

00:32:21,110 --> 00:32:24,919
small script to gather all the constant

00:32:23,389 --> 00:32:27,139
declarations of these streams and build

00:32:24,919 --> 00:32:29,659
all those arrows and then generate a

00:32:27,139 --> 00:32:32,389
graph and mail XML file of the data flow

00:32:29,659 --> 00:32:34,879
graph then I put in this data as this

00:32:32,389 --> 00:32:37,999
graph viewer program called yet and I

00:32:34,879 --> 00:32:39,980
got this out and it sort of does that

00:32:37,999 --> 00:32:42,950
automatically out thing for me and now I

00:32:39,980 --> 00:32:44,960
actually get a good summary of how this

00:32:42,950 --> 00:32:46,700
whole thing works and if we ever have

00:32:44,960 --> 00:32:49,190
time to analyze this you can come talk

00:32:46,700 --> 00:32:50,659
to me it actually tells some beautiful

00:32:49,190 --> 00:32:53,509
stuff about these connections it's

00:32:50,659 --> 00:32:57,080
almost like a requirements specification

00:32:53,509 --> 00:32:59,330
you could say so that was psycho Jess

00:32:57,080 --> 00:33:02,119
check out the website if you want to

00:32:59,330 --> 00:33:03,980
learn more then go learn rx yes if you

00:33:02,119 --> 00:33:06,399
want to learn because yeah and it's

00:33:03,980 --> 00:33:09,379
heavily based on functional techniques

00:33:06,399 --> 00:33:11,869
we only have constant declarations and

00:33:09,379 --> 00:33:14,659
the main is assumed to be without side

00:33:11,869 --> 00:33:16,129
effects and also we have foundation on

00:33:14,659 --> 00:33:18,259
reactive programming because everything

00:33:16,129 --> 00:33:20,809
is automatically updated by using rxjs

00:33:18,259 --> 00:33:23,240
observables there are no classes no

00:33:20,809 --> 00:33:24,350
imperative programming and in a normal

00:33:23,240 --> 00:33:28,580
cycle just app you are

00:33:24,350 --> 00:33:30,919
see any use of the this keyword so but

00:33:28,580 --> 00:33:32,929
what comes next we've seen a lot of

00:33:30,919 --> 00:33:34,610
progress in the react community about

00:33:32,929 --> 00:33:36,650
improving developer experience and

00:33:34,610 --> 00:33:38,360
that's really good because we get things

00:33:36,650 --> 00:33:40,630
like tools that make it easier to write

00:33:38,360 --> 00:33:43,690
and debug code like time traveling and

00:33:40,630 --> 00:33:47,450
hot reloading and those things are great

00:33:43,690 --> 00:33:51,230
but code is actually more often read

00:33:47,450 --> 00:33:52,760
than it is written and sort of like I

00:33:51,230 --> 00:33:55,039
want to do something about that so my

00:33:52,760 --> 00:33:58,159
goal is to make a mini maps of dataflow

00:33:55,039 --> 00:34:00,789
of your code so cycle Jess makes it

00:33:58,159 --> 00:34:04,100
feasible to do those things without like

00:34:00,789 --> 00:34:05,809
iodine or something but it doesn't have

00:34:04,100 --> 00:34:07,610
tools to like automatically produce

00:34:05,809 --> 00:34:09,919
these things yet so it would be great if

00:34:07,610 --> 00:34:12,080
we could integrate like a dataflow mini

00:34:09,919 --> 00:34:13,820
map directly into sublime text or Adam

00:34:12,080 --> 00:34:15,470
so I want to be able to see that someday

00:34:13,820 --> 00:34:19,790
and I'm gonna sort of build that

00:34:15,470 --> 00:34:22,250
hopefully if I have time this slide is

00:34:19,790 --> 00:34:24,320
actually not for you I just have to show

00:34:22,250 --> 00:34:26,419
this slide don't ask me why okay pretend

00:34:24,320 --> 00:34:28,129
you're not seeing this thank you very

00:34:26,419 --> 00:34:31,450
much for being such an awesome audience

00:34:28,129 --> 00:34:31,450
and I hope you enjoy this talk

00:34:37,190 --> 00:34:44,250
nice I anticipate a lot of questions and

00:34:42,270 --> 00:34:50,609
you have eight minutes left so again

00:34:44,250 --> 00:34:53,159
good so it's mm-hmm stop moving but what

00:34:50,609 --> 00:34:57,329
about performance oh because we did a

00:34:53,159 --> 00:35:01,200
lot of like multiple rewrites it

00:34:57,329 --> 00:35:03,630
couldn't be sort of a primary goal when

00:35:01,200 --> 00:35:06,059
I was building cycle because basically I

00:35:03,630 --> 00:35:09,960
was doing this thought of the experiment

00:35:06,059 --> 00:35:12,210
of how to get everything be rxjs so for

00:35:09,960 --> 00:35:14,880
that reason I didn't sort of focus on

00:35:12,210 --> 00:35:16,859
performance but because everything is

00:35:14,880 --> 00:35:19,680
just rxjs okay there's just like psycho

00:35:16,859 --> 00:35:22,230
run really that connects all this stuff

00:35:19,680 --> 00:35:24,990
it's about handle like dealing with

00:35:22,230 --> 00:35:28,790
performance related to rxjs and I know

00:35:24,990 --> 00:35:32,130
that Netflix is like ridiculously like

00:35:28,790 --> 00:35:34,950
loving performance and they use rxjs so

00:35:32,130 --> 00:35:36,720
it's not like a problem you know and as

00:35:34,950 --> 00:35:40,770
you can see rxjs 5 will be even more

00:35:36,720 --> 00:35:43,049
fast what's next when can we expect

00:35:40,770 --> 00:35:45,089
cycle native there is already this

00:35:43,049 --> 00:35:47,250
driver this react native cycle driver

00:35:45,089 --> 00:35:49,140
and then is already public and you can

00:35:47,250 --> 00:35:50,790
try it out it's of course experimental

00:35:49,140 --> 00:35:59,130
but I just need some more time in order

00:35:50,790 --> 00:36:00,599
to make it more solid is there I don't

00:35:59,130 --> 00:36:02,640
know you need to answer that honestly

00:36:00,599 --> 00:36:04,470
really I can I can just wave my hand

00:36:02,640 --> 00:36:06,920
here the whole day but you you need to

00:36:04,470 --> 00:36:06,920
answer that

00:36:18,469 --> 00:36:23,519
to be honest I haven't tested that so I

00:36:21,479 --> 00:36:25,859
don't know but I would expect it slower

00:36:23,519 --> 00:36:27,900
okay I can say that it's probably slower

00:36:25,859 --> 00:36:30,140
because I haven't optimized for some

00:36:27,900 --> 00:36:32,429
stuff like we are sort of Rita

00:36:30,140 --> 00:36:34,739
reattaching event listeners all the time

00:36:32,429 --> 00:36:37,170
and that's really dumb but it's an open

00:36:34,739 --> 00:36:38,759
issue that like not not an open issue as

00:36:37,170 --> 00:36:41,339
in like don't know what how to do it's

00:36:38,759 --> 00:36:44,390
just an issue and github issues that

00:36:41,339 --> 00:36:46,890
we're gonna do next which is smart

00:36:44,390 --> 00:36:49,769
handling of the event handlers to be

00:36:46,890 --> 00:36:52,109
attached and stuff like that what is the

00:36:49,769 --> 00:36:53,130
biggest app there's this app I built at

00:36:52,109 --> 00:36:55,109
work called

00:36:53,130 --> 00:36:57,749
it's like an internal app that we built

00:36:55,109 --> 00:36:59,339
it has it's a single page app with three

00:36:57,749 --> 00:37:02,309
pages and it has a bunch of like

00:36:59,339 --> 00:37:04,619
visualizations with SVG it basically

00:37:02,309 --> 00:37:06,900
summarizes all of our finances and all

00:37:04,619 --> 00:37:08,880
of our people and it's pretty cool and I

00:37:06,900 --> 00:37:11,429
actually built it with a team and the

00:37:08,880 --> 00:37:13,709
the guy that like started working with

00:37:11,429 --> 00:37:15,839
me as a co-worker he didn't know any

00:37:13,709 --> 00:37:18,229
cyclin any rxjs and he picked it up in

00:37:15,839 --> 00:37:18,229
like three days

00:37:20,359 --> 00:37:40,519
I use cycle okay well cycle uses rxjs so

00:37:38,009 --> 00:37:44,640
I can't just compare it to it all right

00:37:40,519 --> 00:37:46,739
because yeah but you could use bacon but

00:37:44,640 --> 00:37:50,119
it would basically be porting stuff

00:37:46,739 --> 00:37:52,199
because cycle run assumes that you have

00:37:50,119 --> 00:37:54,929
observables but the nice thing is that

00:37:52,199 --> 00:37:56,819
if es7 observables arrived then we can

00:37:54,929 --> 00:38:00,140
just use those and then libraries can

00:37:56,819 --> 00:38:03,539
sort of convert from and to es7

00:38:00,140 --> 00:38:05,549
observables and a library called Kaffir

00:38:03,539 --> 00:38:08,729
which is an alternative to these two

00:38:05,549 --> 00:38:16,380
also already converts from es7

00:38:08,729 --> 00:38:19,939
observables yeah so the interesting

00:38:16,380 --> 00:38:22,559
thing is that react can be used in cycle

00:38:19,939 --> 00:38:25,979
but the reason why I haven't is because

00:38:22,559 --> 00:38:28,769
if I would use react with cycle I would

00:38:25,979 --> 00:38:29,770
be using like 10% of it and I would be

00:38:28,769 --> 00:38:32,260
not using all

00:38:29,770 --> 00:38:34,900
the rest and also there's the social

00:38:32,260 --> 00:38:37,840
sort of social aspect where people think

00:38:34,900 --> 00:38:39,160
that okay psycho can use react so they

00:38:37,840 --> 00:38:40,930
just start making components with

00:38:39,160 --> 00:38:44,080
classes and this and then a good like of

00:38:40,930 --> 00:38:46,540
mine so basically since I use I would

00:38:44,080 --> 00:38:49,510
use so little of react to dawn

00:38:46,540 --> 00:38:51,430
I used virtual Dom virtual - dawn which

00:38:49,510 --> 00:38:53,710
is a bit faster than react by default

00:38:51,430 --> 00:38:55,990
but that doesn't mean that it's

00:38:53,710 --> 00:38:57,790
incompatible because basically it's the

00:38:55,990 --> 00:39:00,130
same idea as using react native like

00:38:57,790 --> 00:39:01,450
react native is react and I used that

00:39:00,130 --> 00:39:05,190
with cycle so of course you could use

00:39:01,450 --> 00:39:12,310
react in cycle but it's a matter of

00:39:05,190 --> 00:39:13,869
choice like yeah we are there's like

00:39:12,310 --> 00:39:16,840
really good progress on this and I would

00:39:13,869 --> 00:39:18,640
like to shout out to Tyler s in our

00:39:16,840 --> 00:39:20,830
community he's done a really good job on

00:39:18,640 --> 00:39:23,020
that I just haven't had time to do a lot

00:39:20,830 --> 00:39:25,630
of things relating to routing but he has

00:39:23,020 --> 00:39:27,190
done a lot of stuff so we do have a sort

00:39:25,630 --> 00:39:29,410
of small community and we do have

00:39:27,190 --> 00:39:32,490
routing solutions and pretty much now

00:39:29,410 --> 00:39:34,630
like we do have a good sort of

00:39:32,490 --> 00:39:39,850
recommendation of how to do routing and

00:39:34,630 --> 00:39:41,140
it works and I'm using it as well now

00:39:39,850 --> 00:39:43,180
the dollar signs are completely

00:39:41,140 --> 00:39:45,609
irrelevant I could remove them and it

00:39:43,180 --> 00:39:48,280
wouldn't continue working it's just not

00:39:45,609 --> 00:39:50,140
like magical stuff like angular it's

00:39:48,280 --> 00:39:53,109
really just a convention so basically

00:39:50,140 --> 00:39:55,480
instead of saying like click dollar sign

00:39:53,109 --> 00:39:56,980
I could say click stream but then you

00:39:55,480 --> 00:39:59,380
just end up saying stream stream stream

00:39:56,980 --> 00:40:01,030
stream stream stream stream all over the

00:39:59,380 --> 00:40:02,920
place and then I just came of this

00:40:01,030 --> 00:40:06,880
convention of making it shorter by

00:40:02,920 --> 00:40:08,380
saying click in dollars on JSX with

00:40:06,880 --> 00:40:10,210
cycle yes you can use that but it's

00:40:08,380 --> 00:40:13,030
really stupid idea because there's no

00:40:10,210 --> 00:40:15,790
point in using JSX and you know the Elm

00:40:13,030 --> 00:40:18,160
people they're really happy doing their

00:40:15,790 --> 00:40:20,260
HTML right like if Richard Feldman is

00:40:18,160 --> 00:40:21,010
here they're like just look at how happy

00:40:20,260 --> 00:40:23,500
they are

00:40:21,010 --> 00:40:25,780
they don't need JSX and then you know

00:40:23,500 --> 00:40:27,820
the closure script guys they use reagent

00:40:25,780 --> 00:40:31,600
and arm and no one asks them like we're

00:40:27,820 --> 00:40:34,840
zu Jews you know so like you can be

00:40:31,600 --> 00:40:37,180
super happy without it

00:40:34,840 --> 00:40:40,120
how it appears the introduction is there

00:40:37,180 --> 00:40:41,860
something like a big yes there is a big

00:40:40,120 --> 00:40:45,850
example app this app I showed and talked

00:40:41,860 --> 00:40:48,130
about our internal finances and stuff of

00:40:45,850 --> 00:40:49,450
our company its built-in in psycho and I

00:40:48,130 --> 00:40:50,890
do have the link for that it's

00:40:49,450 --> 00:40:55,090
open-source you can check it out and you

00:40:50,890 --> 00:40:55,450
can check all the stuff how do you test

00:40:55,090 --> 00:40:57,910
this

00:40:55,450 --> 00:41:00,190
that's a really good question i because

00:40:57,910 --> 00:41:01,690
i didn't like actually talked of

00:41:00,190 --> 00:41:03,130
anything about testing but it's it's

00:41:01,690 --> 00:41:05,350
really really good for testing because

00:41:03,130 --> 00:41:09,010
everything is are everything is pure

00:41:05,350 --> 00:41:10,240
function so if i could someday show how

00:41:09,010 --> 00:41:12,610
testing is it's really nice you just

00:41:10,240 --> 00:41:14,950
give inputs and you get outputs the same

00:41:12,610 --> 00:41:16,990
thing that Richard was talking about you

00:41:14,950 --> 00:41:27,370
don't need to sort of mark stuff so it's

00:41:16,990 --> 00:41:31,060
it's it's really nice and it's not that

00:41:27,370 --> 00:41:33,400
much like so basically I didn't sort of

00:41:31,060 --> 00:41:35,860
build a lot of Dom stuff I used virtual

00:41:33,400 --> 00:41:39,010
- Dom and that gives me a different

00:41:35,860 --> 00:41:41,620
patch algorithm so basically every time

00:41:39,010 --> 00:41:44,080
the virtual Dom stream emits something

00:41:41,620 --> 00:41:46,090
we subscribe to that and we do like a

00:41:44,080 --> 00:41:50,230
different patch from the previous and we

00:41:46,090 --> 00:41:52,240
yeah so and if you use reactor then it's

00:41:50,230 --> 00:41:55,180
just a matter of like subscribing to the

00:41:52,240 --> 00:42:07,180
stream and calling render that kind of

00:41:55,180 --> 00:42:10,510
stuff well yeah

00:42:07,180 --> 00:42:12,610
does anyone here like Redux okay yes you

00:42:10,510 --> 00:42:14,050
like Redux can you please change the

00:42:12,610 --> 00:42:17,260
presentation mode so I can show you a

00:42:14,050 --> 00:42:18,940
slide yeah so actually prepared the

00:42:17,260 --> 00:42:20,200
slide especially for people who to ask

00:42:18,940 --> 00:42:23,830
this type of stuff I was already

00:42:20,200 --> 00:42:26,800
predicting where's my Redux so this is

00:42:23,830 --> 00:42:30,850
the core of Redux implemented in about

00:42:26,800 --> 00:42:32,800
four lines of rxjs code okay of course

00:42:30,850 --> 00:42:35,050
it's missing missing all the nice dev

00:42:32,800 --> 00:42:37,750
tools that Dan has made in the

00:42:35,050 --> 00:42:39,610
middlewares but as a pattern there is no

00:42:37,750 --> 00:42:41,080
need to import Redux if you can just go

00:42:39,610 --> 00:42:44,020
and write a few lines of code and this

00:42:41,080 --> 00:42:46,840
is what we do in practice so yeah and as

00:42:44,020 --> 00:42:48,770
a lot of other stuff you know your life

00:42:46,840 --> 00:42:51,890
with rxjs is just about like

00:42:48,770 --> 00:42:53,780
dip dip dip dip and then it's done so as

00:42:51,890 --> 00:42:55,390
I showed you like skip one with all the

00:42:53,780 --> 00:42:59,690
complication with client-side rendering

00:42:55,390 --> 00:43:01,570
yeah we can go back to the questions

00:42:59,690 --> 00:43:15,320
thing I don't know how much time we have

00:43:01,570 --> 00:43:17,570
yeah yeah this question about

00:43:15,320 --> 00:43:19,070
visualizing all the existing logic I

00:43:17,570 --> 00:43:22,100
mean that's exactly what I said that I

00:43:19,070 --> 00:43:23,570
want to build and I know what tools to

00:43:22,100 --> 00:43:28,130
build and how to build it I need to like

00:43:23,570 --> 00:43:30,620
get an ast visitor library there are

00:43:28,130 --> 00:43:32,780
these things and then sort of get the

00:43:30,620 --> 00:43:34,930
declarations and build arrows between

00:43:32,780 --> 00:43:37,820
them and then use this library that

00:43:34,930 --> 00:43:40,480
plots graphs and automatically layouts

00:43:37,820 --> 00:43:42,890
them and somehow put that inside Adam

00:43:40,480 --> 00:43:45,980
which is really good hook for the next

00:43:42,890 --> 00:43:48,640
speaker great let's stop here great

00:43:45,980 --> 00:43:48,640

YouTube URL: https://www.youtube.com/watch?v=uNZnftSksYg


