Title: Completing the Map with Street-level Imagery
Publication date: 2018-09-22
Playlist: SotM 2018, Day 3, De Donato
Description: 
	Christopher Beddow (Mapillary), State of the Map 2018
https://2018.stateofthemap.org/2018/T064-Completing_the_Map_with_Street-level_Imagery/

Over the last 12 months Mapillary has experimented with capture tasks to see if we can turn dense image capture into map edits. The initiative is known as #CompletetheMap and works by dividing an area into a grid and encouraging image collection in each zone. As individuals collect images, they get a visual representation of their progress, showing which zones require attention. #CompletetheMap has now taken place on every continent with interesting results that we'd like to share from bike mapping in Ottawa to the Global Challenge with 28 countries represented. We'll also walk through the challenge capture process and solicit feedback on the challenges for future iterations of the tool. The images gathered from these initiatives, together with Mapillary computer vision, will enabled smarter, more efficient, user-driven mapping on OSM.
Captions: 
	00:00:00,709 --> 00:00:07,259
okay welcome to the third video setup of

00:00:04,920 --> 00:00:09,360
state of the map this morning we start

00:00:07,259 --> 00:00:12,300
with the first conference from

00:00:09,360 --> 00:00:14,490
Christopher pepper from a memory he

00:00:12,300 --> 00:00:17,420
taught us to completing the matter with

00:00:14,490 --> 00:00:22,140
this treaty level a major so thanks and

00:00:17,420 --> 00:00:25,380
it's yours good morning my name is

00:00:22,140 --> 00:00:28,380
Christopher I'm from the USA I'm here to

00:00:25,380 --> 00:00:33,329
talk about mapillary and completing the

00:00:28,380 --> 00:00:34,800
map with street-level imagery is anyone

00:00:33,329 --> 00:00:37,850
here participated in and complete the

00:00:34,800 --> 00:00:41,100
map challenge or helped organize one a

00:00:37,850 --> 00:00:42,840
few people especially some from Milan

00:00:41,100 --> 00:00:45,329
here's one of the greatest challenges

00:00:42,840 --> 00:00:47,820
we've done to tell you about what

00:00:45,329 --> 00:00:50,760
complete the map is it's a web

00:00:47,820 --> 00:00:54,030
application it made for tracking image

00:00:50,760 --> 00:00:56,550
capture campaigns it's based on a grid

00:00:54,030 --> 00:00:58,739
system that measures how many images are

00:00:56,550 --> 00:01:00,680
inside of each grid it compares it

00:00:58,739 --> 00:01:03,860
against the road distance in each grid

00:01:00,680 --> 00:01:06,720
it provides a leaderboard that helps

00:01:03,860 --> 00:01:08,930
show who is captured how many images as

00:01:06,720 --> 00:01:11,070
well as how many kilometers of road and

00:01:08,930 --> 00:01:13,680
it also just allows for general

00:01:11,070 --> 00:01:17,159
measurement of progress especially

00:01:13,680 --> 00:01:19,080
toward a set goal and like many

00:01:17,159 --> 00:01:22,100
applications in the OpenStreetMap

00:01:19,080 --> 00:01:25,439
community this was developed because of

00:01:22,100 --> 00:01:29,119
certain challenges and needs so our

00:01:25,439 --> 00:01:32,220
particular need was to help users with

00:01:29,119 --> 00:01:34,350
targeted imagery collection so they had

00:01:32,220 --> 00:01:36,930
a specific place in the world and a

00:01:34,350 --> 00:01:38,369
specific number of images or kilometers

00:01:36,930 --> 00:01:40,500
of road they wanted to cover with

00:01:38,369 --> 00:01:43,439
imagery and this helped coordinate it

00:01:40,500 --> 00:01:45,390
and also it provided a dashboard for

00:01:43,439 --> 00:01:48,479
community leaders where they could bring

00:01:45,390 --> 00:01:51,390
users together in order to see their

00:01:48,479 --> 00:01:56,549
combined collaborative progress in one

00:01:51,390 --> 00:01:59,430
area so complete the map first started

00:01:56,549 --> 00:02:02,159
with the project in Uganda we worked

00:01:59,430 --> 00:02:04,920
with Jeffrey from Uganda is Jeffrey here

00:02:02,159 --> 00:02:07,229
today see he's walking around and he's a

00:02:04,920 --> 00:02:09,989
great community community coordinator

00:02:07,229 --> 00:02:11,730
there and together with the youth

00:02:09,989 --> 00:02:13,349
mappers community in Uganda

00:02:11,730 --> 00:02:15,420
over a hundred thousand images were

00:02:13,349 --> 00:02:18,629
gathered over the course of about a

00:02:15,420 --> 00:02:21,150
month so what happened was we wanted to

00:02:18,629 --> 00:02:23,489
create some kind of leaderboard to show

00:02:21,150 --> 00:02:25,980
the progress of each user participating

00:02:23,489 --> 00:02:28,140
in this campaign and then we wanted to

00:02:25,980 --> 00:02:31,080
visualize those results as well as the

00:02:28,140 --> 00:02:34,470
change over time with images being put

00:02:31,080 --> 00:02:37,110
on the map so we threw something

00:02:34,470 --> 00:02:39,569
together it was a first experiment and

00:02:37,110 --> 00:02:41,069
the results of this are that everyone

00:02:39,569 --> 00:02:43,980
could actually see the impact they were

00:02:41,069 --> 00:02:46,760
having across the country so many people

00:02:43,980 --> 00:02:48,780
who had never met before were able to

00:02:46,760 --> 00:02:50,430
see that they were participating

00:02:48,780 --> 00:02:55,829
something bigger than just their local

00:02:50,430 --> 00:02:58,319
community but actually nationwide the

00:02:55,829 --> 00:03:01,349
second phase of this really started with

00:02:58,319 --> 00:03:04,560
Ottawa so mapillary works together with

00:03:01,349 --> 00:03:07,319
the bike Ottawa organization there are

00:03:04,560 --> 00:03:09,510
advocates for safe cycling for making

00:03:07,319 --> 00:03:13,230
sure the OpenStreetMap routing for

00:03:09,510 --> 00:03:15,120
cycling is correct and their goal was to

00:03:13,230 --> 00:03:17,790
capture images across the entire

00:03:15,120 --> 00:03:19,769
metropolitan area including Ottawa as

00:03:17,790 --> 00:03:23,850
well as the city of guests to know

00:03:19,769 --> 00:03:25,260
across the river so we created a better

00:03:23,850 --> 00:03:28,230
version of this application that

00:03:25,260 --> 00:03:30,299
combined the map and the leaderboard we

00:03:28,230 --> 00:03:33,150
implemented the first grid based system

00:03:30,299 --> 00:03:37,230
for tracking the progress red being

00:03:33,150 --> 00:03:39,030
almost no images and green being images

00:03:37,230 --> 00:03:42,510
covering almost all roads measured

00:03:39,030 --> 00:03:44,819
inside of the grid so we open sourced

00:03:42,510 --> 00:03:47,790
this application and this was really

00:03:44,819 --> 00:03:50,989
great because we got some poll requests

00:03:47,790 --> 00:03:53,579
and edits from local users in Ottawa

00:03:50,989 --> 00:03:56,700
particularly yarrow and Ottawa was very

00:03:53,579 --> 00:03:58,590
helpful with updating the way that we

00:03:56,700 --> 00:03:59,910
were measuring with the grids updating a

00:03:58,590 --> 00:04:01,889
lot of the style to make it more

00:03:59,910 --> 00:04:03,630
user-friendly and this really

00:04:01,889 --> 00:04:07,680
contributed to future development of

00:04:03,630 --> 00:04:10,560
this application and as a result from

00:04:07,680 --> 00:04:12,900
all these images collected nearly half a

00:04:10,560 --> 00:04:15,060
million of them the community was able

00:04:12,900 --> 00:04:17,549
to have a mapathon make sure their maps

00:04:15,060 --> 00:04:20,849
were up to date and later they worked on

00:04:17,549 --> 00:04:24,670
a bicycle stress map for the region to

00:04:20,849 --> 00:04:26,680
know just about bicycle safety and where

00:04:24,670 --> 00:04:29,800
the best routes were as well as where

00:04:26,680 --> 00:04:35,140
traffic from vehicles was crossing with

00:04:29,800 --> 00:04:36,850
bicycle traffic after this challenge in

00:04:35,140 --> 00:04:38,860
Ottawa we knew we had a lot of potential

00:04:36,850 --> 00:04:40,660
with this application it was especially

00:04:38,860 --> 00:04:43,840
powerful for bringing communities

00:04:40,660 --> 00:04:45,250
together on one effort so we had a few

00:04:43,840 --> 00:04:48,610
other challenges that we needed to solve

00:04:45,250 --> 00:04:50,500
and we decided to do a revamp of this so

00:04:48,610 --> 00:04:52,680
I was very lucky to have the designers

00:04:50,500 --> 00:04:55,210
at Matthew literally take some time to

00:04:52,680 --> 00:04:57,040
mock up what they think the application

00:04:55,210 --> 00:05:00,910
should look like and then be able to

00:04:57,040 --> 00:05:03,340
take a month to start developing a new

00:05:00,910 --> 00:05:05,200
and improved version so what we needed

00:05:03,340 --> 00:05:08,560
was a better way to fetch and display

00:05:05,200 --> 00:05:11,130
contributors just statistics so this

00:05:08,560 --> 00:05:13,180
resulted in actually a new API that

00:05:11,130 --> 00:05:15,820
specifically produced leaderboard

00:05:13,180 --> 00:05:18,130
statistics this made it a lot easier for

00:05:15,820 --> 00:05:21,040
us to load the challenges faster when a

00:05:18,130 --> 00:05:22,870
user load the page and made it just more

00:05:21,040 --> 00:05:25,180
organized to put all that information in

00:05:22,870 --> 00:05:27,670
one place so we can look up by one user

00:05:25,180 --> 00:05:29,980
name inside of a date range and a

00:05:27,670 --> 00:05:32,020
specific bounding box and we can get

00:05:29,980 --> 00:05:36,520
back a number of images and a number of

00:05:32,020 --> 00:05:38,890
kilometers we also made progress easier

00:05:36,520 --> 00:05:42,100
to visualize we simplified our grid

00:05:38,890 --> 00:05:44,560
system we split the color coding into

00:05:42,100 --> 00:05:47,320
five quantiles so just ranging from a

00:05:44,560 --> 00:05:49,450
dark red to a bright green and made a

00:05:47,320 --> 00:05:51,760
map key that shows approximately what

00:05:49,450 --> 00:05:55,660
percentage of coverage on the roads this

00:05:51,760 --> 00:05:58,570
represents we relied heavily on matte

00:05:55,660 --> 00:06:02,740
box je s GL to use the map luring vector

00:05:58,570 --> 00:06:05,110
tiles which have all the date and time

00:06:02,740 --> 00:06:07,570
information inside the the image tile

00:06:05,110 --> 00:06:10,540
there so with this we were able to use a

00:06:07,570 --> 00:06:12,610
time slider to make it much easier to

00:06:10,540 --> 00:06:15,070
actually see the progress of change day

00:06:12,610 --> 00:06:19,360
by day and any user can go back to the

00:06:15,070 --> 00:06:21,850
start and review that at any time we

00:06:19,360 --> 00:06:26,260
wanted to also measure exactly how

00:06:21,850 --> 00:06:28,300
complete each area of the city was so we

00:06:26,260 --> 00:06:31,560
have a new API that we came out with for

00:06:28,300 --> 00:06:34,660
this that measured distance in two ways

00:06:31,560 --> 00:06:37,060
we had a unique distance so inside of

00:06:34,660 --> 00:06:40,360
one grid we were able to

00:06:37,060 --> 00:06:43,570
know how many kilometers of imagery were

00:06:40,360 --> 00:06:45,220
uniquely present so the first person to

00:06:43,570 --> 00:06:47,650
map there gets credit for unique

00:06:45,220 --> 00:06:49,960
distances but we were also able to

00:06:47,650 --> 00:06:51,700
measure the total distance so anytime

00:06:49,960 --> 00:06:53,920
that someone had mapped the same road

00:06:51,700 --> 00:06:56,110
maybe two or three times we were able to

00:06:53,920 --> 00:06:57,960
sum that so we'd know over time how many

00:06:56,110 --> 00:07:00,400
kilometers were also added

00:06:57,960 --> 00:07:04,150
so using that unique distance we were

00:07:00,400 --> 00:07:05,830
able to divide that by the total Road

00:07:04,150 --> 00:07:08,860
distance in the grid and estimate a

00:07:05,830 --> 00:07:11,110
percentage we wanted to also reduce the

00:07:08,860 --> 00:07:13,090
server load on us each time this

00:07:11,110 --> 00:07:16,330
application was loading it was making

00:07:13,090 --> 00:07:18,400
thousands and thousands of API calls so

00:07:16,330 --> 00:07:22,990
we created a system to actually run an

00:07:18,400 --> 00:07:24,310
hourly JSON dump that would fetch all

00:07:22,990 --> 00:07:26,560
the information needed for each

00:07:24,310 --> 00:07:30,280
challenge and then make it available in

00:07:26,560 --> 00:07:32,380
actually a static file and finally we

00:07:30,280 --> 00:07:34,630
wanted to make a method for users to

00:07:32,380 --> 00:07:37,720
create their own challenges to set up

00:07:34,630 --> 00:07:39,910
their own unique grid area and make sure

00:07:37,720 --> 00:07:41,650
they could set the map area to their

00:07:39,910 --> 00:07:46,380
local community without needing

00:07:41,650 --> 00:07:46,380
extensive input from our from our team

00:07:46,410 --> 00:07:54,910
so this came out into the third phase we

00:07:50,410 --> 00:07:55,930
really tested this in Brasilia and this

00:07:54,910 --> 00:07:59,470
one turned out really well

00:07:55,930 --> 00:08:01,420
we launched this in November of 2017 we

00:07:59,470 --> 00:08:04,570
had our new layout we had better

00:08:01,420 --> 00:08:07,000
measurement of progress and we had a lot

00:08:04,570 --> 00:08:08,530
of local users who were very active in

00:08:07,000 --> 00:08:10,890
this and also promoted it to other

00:08:08,530 --> 00:08:15,330
OpenStreetMap users who became involved

00:08:10,890 --> 00:08:18,580
so as a result over 86,000 images were

00:08:15,330 --> 00:08:23,170
collected over about a month and a half

00:08:18,580 --> 00:08:26,230
and 335 kilometers of Open Street Map

00:08:23,170 --> 00:08:30,850
boys now have imagery where there was no

00:08:26,230 --> 00:08:33,070
imagery before we also made this

00:08:30,850 --> 00:08:35,380
compatible with mobile devices so the

00:08:33,070 --> 00:08:38,200
same link to the challenge can be open

00:08:35,380 --> 00:08:40,840
on a mobile device we make a more

00:08:38,200 --> 00:08:43,150
compact layout for that and using matte

00:08:40,840 --> 00:08:45,460
box we're able to have the user locate

00:08:43,150 --> 00:08:47,620
themselves so they can see where they're

00:08:45,460 --> 00:08:49,990
at this moment and know where they can

00:08:47,620 --> 00:08:51,910
go to map new roads that have

00:08:49,990 --> 00:08:54,220
been mapped yet as well as reference

00:08:51,910 --> 00:09:00,070
existing imagery so they are being

00:08:54,220 --> 00:09:04,090
redundant so our method for doing it

00:09:00,070 --> 00:09:06,460
yourself it's based on a small tool

00:09:04,090 --> 00:09:09,070
that's it's still quite a hack but it's

00:09:06,460 --> 00:09:12,220
called the grid generator and what this

00:09:09,070 --> 00:09:14,380
does is it takes input data in in three

00:09:12,220 --> 00:09:17,800
ways really you can load a custom geo

00:09:14,380 --> 00:09:21,780
JSON so for example you could load in a

00:09:17,800 --> 00:09:24,310
boundary of your own city you can also

00:09:21,780 --> 00:09:27,000
click a center point on the map and set

00:09:24,310 --> 00:09:29,380
a radius so let's say 10 kilometers and

00:09:27,000 --> 00:09:32,320
we'll create a grid around that central

00:09:29,380 --> 00:09:35,680
radius or finally you can simply click

00:09:32,320 --> 00:09:37,450
and drag to draw Square on the map then

00:09:35,680 --> 00:09:40,450
you'll also want to input either the

00:09:37,450 --> 00:09:44,050
cell size so you may want a 2 by 2

00:09:40,450 --> 00:09:45,400
kilometre squares and alternatively you

00:09:44,050 --> 00:09:47,350
can just say how many columns you want

00:09:45,400 --> 00:09:50,940
so in the image here you see we have 4

00:09:47,350 --> 00:09:53,860
columns so it'll take one of the input

00:09:50,940 --> 00:09:57,790
polygons and it'll divide that into a

00:09:53,860 --> 00:10:01,000
grid based system then it's going to hit

00:09:57,790 --> 00:10:03,040
the overpass API and what it's doing

00:10:01,000 --> 00:10:06,340
here is actually a variation of the OS

00:10:03,040 --> 00:10:09,160
mnx package by Jeff Bowen so this is a

00:10:06,340 --> 00:10:10,900
Python package and I kind of reverse

00:10:09,160 --> 00:10:13,900
engineered the way he was gathering

00:10:10,900 --> 00:10:17,080
information from overpass API made it

00:10:13,900 --> 00:10:21,010
work in JavaScript instead it's limited

00:10:17,080 --> 00:10:23,830
to much smaller areas usually a city

00:10:21,010 --> 00:10:25,750
size or smaller before it would crash so

00:10:23,830 --> 00:10:28,840
don't try to run a whole country polygon

00:10:25,750 --> 00:10:31,840
in here but then it will actually

00:10:28,840 --> 00:10:34,120
calculate exactly the distance of roads

00:10:31,840 --> 00:10:36,280
that are available inside of each grid

00:10:34,120 --> 00:10:37,630
so later we can grab the unique

00:10:36,280 --> 00:10:41,560
distances of mapillary

00:10:37,630 --> 00:10:44,590
imagery and do a simple division and get

00:10:41,560 --> 00:10:47,800
a percentage of completeness we also are

00:10:44,590 --> 00:10:50,020
able to choose the network type so you

00:10:47,800 --> 00:10:51,610
can choose driving network only but many

00:10:50,020 --> 00:10:53,650
of these mapping challenges are people

00:10:51,610 --> 00:10:56,920
who are mapping on foot people who are

00:10:53,650 --> 00:11:00,100
mapping on bicycle or maybe all three on

00:10:56,920 --> 00:11:03,620
vehicles bicycles and foot some even on

00:11:00,100 --> 00:11:04,910
boats so if we set it to all then

00:11:03,620 --> 00:11:06,440
have a lot more flexibility with how

00:11:04,910 --> 00:11:09,710
it's measuring but we can be also very

00:11:06,440 --> 00:11:12,400
specific if we want only one type of way

00:11:09,710 --> 00:11:12,400
to be measured

00:11:12,790 --> 00:11:18,640
once that grits created it just comes

00:11:15,740 --> 00:11:21,200
out in a file called grid geo JSON and

00:11:18,640 --> 00:11:23,960
it's able to be added to the directory

00:11:21,200 --> 00:11:28,370
of a challenge then the user just needs

00:11:23,960 --> 00:11:30,080
to edit a setting zjs file and here all

00:11:28,370 --> 00:11:33,020
they need to do is set a start date and

00:11:30,080 --> 00:11:35,540
an end date of the challenge this will

00:11:33,020 --> 00:11:38,870
be used by the mapillary server when it

00:11:35,540 --> 00:11:40,190
runs hourly checks on the API so it will

00:11:38,870 --> 00:11:42,410
make sure it's only grabbing inside

00:11:40,190 --> 00:11:45,200
those time windows and it already will

00:11:42,410 --> 00:11:47,029
reference this geo JSON for a bounding

00:11:45,200 --> 00:11:52,040
box to make sure that it's not gathering

00:11:47,029 --> 00:11:54,460
data outside any of those grids and once

00:11:52,040 --> 00:11:56,480
that's set up it just has to be hosted

00:11:54,460 --> 00:11:58,940
mapillary just needs to know where to

00:11:56,480 --> 00:12:03,070
look for that settings j/s and grid geo

00:11:58,940 --> 00:12:03,070
json file and you have a live challenge

00:12:08,180 --> 00:12:12,650
so one of the benefits of this is

00:12:10,360 --> 00:12:15,110
gathering this amount of imagery is

00:12:12,650 --> 00:12:19,100
something that we want to bring back to

00:12:15,110 --> 00:12:22,070
the community and something else we do

00:12:19,100 --> 00:12:23,570
is after running computer vision on all

00:12:22,070 --> 00:12:26,210
the imagery that's collected we're able

00:12:23,570 --> 00:12:28,130
to identify all the traffic signs so

00:12:26,210 --> 00:12:31,940
this includes unique signs in the u.s.

00:12:28,130 --> 00:12:34,550
in Europe Japan Australia and many other

00:12:31,940 --> 00:12:36,470
places in the world but we rely on the

00:12:34,550 --> 00:12:39,320
community as well to provide

00:12:36,470 --> 00:12:40,970
verification for these results so the

00:12:39,320 --> 00:12:42,700
users can help improve the algorithms

00:12:40,970 --> 00:12:45,530
with the math you learn a verifier game

00:12:42,700 --> 00:12:49,190
and this typically runs for specific

00:12:45,530 --> 00:12:52,070
geometries so by that I mean what you

00:12:49,190 --> 00:12:54,050
see here in the animation is 70

00:12:52,070 --> 00:12:57,560
kilometer per hour speed limit signs

00:12:54,050 --> 00:13:00,620
inside of only Denmark and in other

00:12:57,560 --> 00:13:02,540
cases a community such as Ottawa can

00:13:00,620 --> 00:13:05,450
have their traffic signs only for that

00:13:02,540 --> 00:13:07,400
that region be verified and that

00:13:05,450 --> 00:13:10,400
specifically provides support to their

00:13:07,400 --> 00:13:12,920
future projects once we've verified all

00:13:10,400 --> 00:13:15,680
these traffic signs we then have a lot

00:13:12,920 --> 00:13:18,740
better confidence in the detections

00:13:15,680 --> 00:13:21,380
accuracy and what we can do is then

00:13:18,740 --> 00:13:23,570
follow on with better precision on the

00:13:21,380 --> 00:13:26,390
positioning of these signs so these

00:13:23,570 --> 00:13:28,370
signs across several images the same

00:13:26,390 --> 00:13:30,250
sign will be merged well no it's the

00:13:28,370 --> 00:13:32,420
same sign from different angles and

00:13:30,250 --> 00:13:34,160
using computer vision again will

00:13:32,420 --> 00:13:37,580
actually position it precisely on the

00:13:34,160 --> 00:13:40,310
road so this is very reliant on machine

00:13:37,580 --> 00:13:42,380
learning so with GIS alone we found it's

00:13:40,310 --> 00:13:44,180
very difficult to actually position a

00:13:42,380 --> 00:13:47,210
sign because the images are on the road

00:13:44,180 --> 00:13:49,190
but the signs are off but the computer

00:13:47,210 --> 00:13:50,990
vision algorithm is able to know which

00:13:49,190 --> 00:13:53,930
part of the image it is and more the

00:13:50,990 --> 00:13:56,060
pixels lie in a 3d space and the result

00:13:53,930 --> 00:14:00,680
is that we have traffic tiles available

00:13:56,060 --> 00:14:03,470
in osm ID editor as well as awesome with

00:14:00,680 --> 00:14:05,690
signs and their precise positions and a

00:14:03,470 --> 00:14:09,730
far lower rate of duplicates due to

00:14:05,690 --> 00:14:09,730
community verification such as this

00:14:10,660 --> 00:14:15,830
going back to the map what we'd like to

00:14:14,120 --> 00:14:19,430
see is people using these images in

00:14:15,830 --> 00:14:21,240
OpenStreetMap so the ID editor just this

00:14:19,430 --> 00:14:23,639
past week we pushed a new

00:14:21,240 --> 00:14:25,139
by one of our engineers Matias where

00:14:23,639 --> 00:14:26,999
you're able to actually resize the

00:14:25,139 --> 00:14:29,129
viewer window this works for all

00:14:26,999 --> 00:14:32,339
street-level imagery providers on

00:14:29,129 --> 00:14:33,929
OpenStreetMap ID and with this you can

00:14:32,339 --> 00:14:36,149
get a lot more use out of the images

00:14:33,929 --> 00:14:37,619
that you're taking so before it was hard

00:14:36,149 --> 00:14:40,230
to kind of see that detail in a small

00:14:37,619 --> 00:14:43,499
area but now with that resize function

00:14:40,230 --> 00:14:45,540
you'll be able to see a larger window as

00:14:43,499 --> 00:14:46,949
well as go ahead and zoom in on

00:14:45,540 --> 00:14:49,619
different details you need without

00:14:46,949 --> 00:14:51,119
squinting too much we also have the

00:14:49,619 --> 00:14:54,720
traffic sign overlay as mentioned

00:14:51,119 --> 00:14:57,420
there's over 326 million photos

00:14:54,720 --> 00:14:59,879
worldwide that are available for using

00:14:57,420 --> 00:15:02,790
and complete the map tends to grow that

00:14:59,879 --> 00:15:06,240
by as you see several tens of thousands

00:15:02,790 --> 00:15:07,769
of images each month that it's run we

00:15:06,240 --> 00:15:11,160
also have more new features that are

00:15:07,769 --> 00:15:13,819
planned on the way 360-degree image

00:15:11,160 --> 00:15:16,079
support was just launched and jostle and

00:15:13,819 --> 00:15:18,420
one of the upcoming ones that we're

00:15:16,079 --> 00:15:20,850
working on is using placement tools

00:15:18,420 --> 00:15:23,279
inside of our viewer so this is

00:15:20,850 --> 00:15:26,189
currently available through mapillary

00:15:23,279 --> 00:15:28,139
j/s that's our open source library for

00:15:26,189 --> 00:15:29,639
image viewing and it integrates many

00:15:28,139 --> 00:15:32,879
computer vision concepts such as

00:15:29,639 --> 00:15:35,459
matching the pixels in the image to a

00:15:32,879 --> 00:15:36,929
longitude and latitude so with this we

00:15:35,459 --> 00:15:38,549
hope to make it very easy to edit an

00:15:36,929 --> 00:15:40,559
open street map by clicking on the image

00:15:38,549 --> 00:15:45,720
and getting points on the map as a

00:15:40,559 --> 00:15:48,899
result some of the highlights across the

00:15:45,720 --> 00:15:50,790
world for the challenges we've run many

00:15:48,899 --> 00:15:54,089
of these come from the global challenge

00:15:50,790 --> 00:15:57,449
we ran this spring so about one month

00:15:54,089 --> 00:15:59,730
and we had several top performers you

00:15:57,449 --> 00:16:01,499
can see in the leaderboard I think

00:15:59,730 --> 00:16:04,649
several people from this leaderboard are

00:16:01,499 --> 00:16:07,069
present at state of the map we had a lot

00:16:04,649 --> 00:16:11,459
of success in Denmark and Ukraine

00:16:07,069 --> 00:16:15,240
Washington DC in the u.s. Madera off the

00:16:11,459 --> 00:16:17,279
coast of Portugal Costa Rica in the

00:16:15,240 --> 00:16:19,829
Milan area and as well as other

00:16:17,279 --> 00:16:24,049
countries such as Myanmar Hungary Spain

00:16:19,829 --> 00:16:26,759
Scotland Canada Lithuania and many more

00:16:24,049 --> 00:16:29,339
so we've decided to run a third global

00:16:26,759 --> 00:16:32,999
challenge and this one will be taking

00:16:29,339 --> 00:16:34,620
place starting next week and if you want

00:16:32,999 --> 00:16:36,270
to nominate your city you can

00:16:34,620 --> 00:16:38,340
tweet to mapillary with the complete the

00:16:36,270 --> 00:16:41,010
map hashtag and we'll follow up with how

00:16:38,340 --> 00:16:42,900
to make sure you get fully registered so

00:16:41,010 --> 00:16:45,600
we have current participants including

00:16:42,900 --> 00:16:48,360
communities in Norway Sweden Brunei

00:16:45,600 --> 00:16:51,180
Costa Rica Colombia is becca stan and

00:16:48,360 --> 00:16:53,880
several more listed here the top three

00:16:51,180 --> 00:16:57,060
mappers in this contest will receive a

00:16:53,880 --> 00:17:00,270
gopro hero 5 black so you can see our

00:16:57,060 --> 00:17:02,250
ambassador they was located in Madera he

00:17:00,270 --> 00:17:05,750
has his GoPro here on the selfie stick

00:17:02,250 --> 00:17:07,950
and he won that from the last challenge

00:17:05,750 --> 00:17:09,780
there's no setup required for this

00:17:07,950 --> 00:17:12,030
challenge you simply have to request

00:17:09,780 --> 00:17:14,610
your city will ask you for longitude and

00:17:12,030 --> 00:17:16,260
latitude as a center point and we make

00:17:14,610 --> 00:17:18,570
everyone have the same size challenge

00:17:16,260 --> 00:17:20,100
grids in their community so we have a

00:17:18,570 --> 00:17:24,810
roughly equal area that everyone's

00:17:20,100 --> 00:17:27,980
competing in across the world so the

00:17:24,810 --> 00:17:30,180
future of this entire application is

00:17:27,980 --> 00:17:32,550
really centered around building better

00:17:30,180 --> 00:17:35,280
maps of the world so with Open Street

00:17:32,550 --> 00:17:37,890
Map we are aiming to make the best map

00:17:35,280 --> 00:17:39,420
of the world and in mapillary we're

00:17:37,890 --> 00:17:41,490
trying to make one of the best indexes

00:17:39,420 --> 00:17:44,340
of all data in the world so we hope we

00:17:41,490 --> 00:17:47,910
can bridge these two concepts you'll see

00:17:44,340 --> 00:17:49,950
here in an image just examples of our

00:17:47,910 --> 00:17:52,980
mapillary detections and many of these

00:17:49,950 --> 00:17:57,390
were developing to be instance aware the

00:17:52,980 --> 00:18:01,200
idea here is it's simpler with computer

00:17:57,390 --> 00:18:02,760
vision to know that there are a certain

00:18:01,200 --> 00:18:04,800
number of pixels in the image that are

00:18:02,760 --> 00:18:06,030
crosswalks let's say it's maybe 15

00:18:04,800 --> 00:18:08,340
percent of the pixels here

00:18:06,030 --> 00:18:09,870
it's another concept entirely to know

00:18:08,340 --> 00:18:12,360
that there are four separate crosswalks

00:18:09,870 --> 00:18:14,340
in this picture but challenges like this

00:18:12,360 --> 00:18:15,930
or the ones that we're tackling to make

00:18:14,340 --> 00:18:18,570
sure that we can turn this into usable

00:18:15,930 --> 00:18:21,210
map data so it goes beyond traffic signs

00:18:18,570 --> 00:18:23,610
it goes beyond just classification of

00:18:21,210 --> 00:18:26,880
images and really the long-term goal is

00:18:23,610 --> 00:18:29,490
to make map data that's usable and the

00:18:26,880 --> 00:18:31,500
long-term idea that we're going for is

00:18:29,490 --> 00:18:34,680
all of this to be available freely for

00:18:31,500 --> 00:18:37,620
OpenStreetMap so really what we want to

00:18:34,680 --> 00:18:39,930
do is take everything we've done in the

00:18:37,620 --> 00:18:42,480
past take everything that exists with

00:18:39,930 --> 00:18:44,760
mapping today and do it better so we

00:18:42,480 --> 00:18:45,870
want to measure the OSM edits from our

00:18:44,760 --> 00:18:47,940
imagery

00:18:45,870 --> 00:18:49,680
a better and more quantifiable way so we

00:18:47,940 --> 00:18:52,020
know the results of McLeroy campaigns

00:18:49,680 --> 00:18:54,030
that just complete the map we want to

00:18:52,020 --> 00:18:57,090
improve the tools available for using

00:18:54,030 --> 00:18:58,800
street-level imagery to edit the map we

00:18:57,090 --> 00:19:00,930
want to have better extraction of data

00:18:58,800 --> 00:19:03,930
and computer vision algorithms that we

00:19:00,930 --> 00:19:05,550
can run on this imagery and overall make

00:19:03,930 --> 00:19:07,620
it so there's better access to the

00:19:05,550 --> 00:19:09,540
machine learning generated layers that

00:19:07,620 --> 00:19:12,120
require human verification and

00:19:09,540 --> 00:19:14,610
validation in order to make better maps

00:19:12,120 --> 00:19:19,679
and improve Open Street Map going

00:19:14,610 --> 00:19:21,420
forward so thank you for coming and I'll

00:19:19,679 --> 00:19:27,929
now take any questions Thank You

00:19:21,420 --> 00:19:30,320
Christopher okay if someone has some

00:19:27,929 --> 00:19:30,320
question

00:19:42,020 --> 00:19:49,980
hello what are the other fuels you plan

00:19:45,870 --> 00:19:52,830
to detect in the future so right now we

00:19:49,980 --> 00:19:55,800
actually detect over 100 features that

00:19:52,830 --> 00:19:58,260
are not traffic signs you can see these

00:19:55,800 --> 00:20:01,260
on our website I'll bring up an example

00:19:58,260 --> 00:20:05,160
really quick but currently we're

00:20:01,260 --> 00:20:08,070
planning to expand our list only in

00:20:05,160 --> 00:20:11,700
small ways beyond these 100 because our

00:20:08,070 --> 00:20:13,350
focus is improving our ability to have

00:20:11,700 --> 00:20:15,480
detailed extractions of existing

00:20:13,350 --> 00:20:18,210
features but some of the things we've

00:20:15,480 --> 00:20:20,670
been working on our commercial logos for

00:20:18,210 --> 00:20:24,290
example in Guatemala we were helping to

00:20:20,670 --> 00:20:27,690
find Claro cell phone service logos

00:20:24,290 --> 00:20:29,900
Pepsi logos and these are indicators of

00:20:27,690 --> 00:20:32,820
where commercial businesses exist and

00:20:29,900 --> 00:20:35,250
this is in turn in support of assessing

00:20:32,820 --> 00:20:37,830
earthquake risk to economic areas in

00:20:35,250 --> 00:20:39,510
Guatemala so more commercial logos we

00:20:37,830 --> 00:20:43,170
think will be actually a something to

00:20:39,510 --> 00:20:45,140
focus on in the future and I'll just

00:20:43,170 --> 00:20:51,210
pull up the object labels here for a

00:20:45,140 --> 00:20:53,370
reference Thanks hi you have a question

00:20:51,210 --> 00:20:58,110
regarding image segmentation do you plan

00:20:53,370 --> 00:20:59,730
to open-source it and if yes when we do

00:20:58,110 --> 00:21:01,170
have plans to start open sourcing a lot

00:20:59,730 --> 00:21:04,080
of our computer vision in the future

00:21:01,170 --> 00:21:06,960
it's going to be piece by piece we don't

00:21:04,080 --> 00:21:08,580
have an exact timeline in place but it

00:21:06,960 --> 00:21:10,620
will depend on which parts we're

00:21:08,580 --> 00:21:18,210
actively working on and which parts we

00:21:10,620 --> 00:21:20,190
consider stable okay thank you hi I

00:21:18,210 --> 00:21:23,610
wondered if you've looked at using video

00:21:20,190 --> 00:21:25,620
for that rather than single images I

00:21:23,610 --> 00:21:28,560
sorry can you say again have you looked

00:21:25,620 --> 00:21:31,710
at using video like a dash cam video

00:21:28,560 --> 00:21:33,540
rather than just single images yes we

00:21:31,710 --> 00:21:36,510
actually do accept video in the

00:21:33,540 --> 00:21:38,370
mapillary uploaders especially if you're

00:21:36,510 --> 00:21:40,530
using our Python tools so we have an

00:21:38,370 --> 00:21:43,320
open source library for upload via

00:21:40,530 --> 00:21:45,270
command line but we do accept video

00:21:43,320 --> 00:21:47,340
formats and we typically break them down

00:21:45,270 --> 00:21:49,170
frame by frame and make sure they're

00:21:47,340 --> 00:21:52,110
referenced against the GPX based on

00:21:49,170 --> 00:21:53,750
timestamp and then they go on just the

00:21:52,110 --> 00:22:07,620
same as images do

00:21:53,750 --> 00:22:10,320
okay auditor question hi thanks for the

00:22:07,620 --> 00:22:12,179
great talk I want to ask what's the

00:22:10,320 --> 00:22:15,630
accuracy of the day that currently like

00:22:12,179 --> 00:22:18,899
is it already being used for delivery

00:22:15,630 --> 00:22:23,250
robots navigation or is this still kind

00:22:18,899 --> 00:22:26,549
of far off so again the last part it's

00:22:23,250 --> 00:22:29,009
being used as it is yesterday that even

00:22:26,549 --> 00:22:31,919
today being used for delivery robots

00:22:29,009 --> 00:22:35,220
navigation or car navigation or this

00:22:31,919 --> 00:22:38,850
kind of you know applications that needs

00:22:35,220 --> 00:22:39,690
really high-resolution data it's not

00:22:38,850 --> 00:22:41,070
being used

00:22:39,690 --> 00:22:45,000
I wouldn't say in production for

00:22:41,070 --> 00:22:47,639
anything like anything with autonomous

00:22:45,000 --> 00:22:50,580
driving but it's being experimented with

00:22:47,639 --> 00:22:52,169
for this purpose for sure the idea is we

00:22:50,580 --> 00:22:54,720
really have to improve our precision

00:22:52,169 --> 00:22:56,820
before it's usable for that although I

00:22:54,720 --> 00:23:05,309
think it probably can offer some of the

00:22:56,820 --> 00:23:07,080
best scalable mapping of detail okay we

00:23:05,309 --> 00:23:14,840
have just time for other two or three

00:23:07,080 --> 00:23:14,840
question is someone ever if not okay

00:23:19,550 --> 00:23:29,700
yeah in the example shown of the 70

00:23:25,560 --> 00:23:32,880
kilometer per hour science can you make

00:23:29,700 --> 00:23:36,030
the distinction between the in

00:23:32,880 --> 00:23:39,150
construction like the whites the whites

00:23:36,030 --> 00:23:42,180
were white sign and the yellow sign as

00:23:39,150 --> 00:23:44,310
you I can see a up it's it's yellow and

00:23:42,180 --> 00:23:47,160
it's white on the picture can you make

00:23:44,310 --> 00:23:50,040
this decision distinction yes it's not

00:23:47,160 --> 00:23:52,770
distinct right now it's more working on

00:23:50,040 --> 00:23:55,950
the character recognition there but it's

00:23:52,770 --> 00:23:57,620
is definitely not a big leap to actually

00:23:55,950 --> 00:23:59,550
recognize the color difference as well

00:23:57,620 --> 00:24:01,290
so the goal is of course to

00:23:59,550 --> 00:24:03,590
differentiate in far more detail in the

00:24:01,290 --> 00:24:03,590
future

00:24:12,750 --> 00:24:19,150
okay I want you to ask you about how you

00:24:17,170 --> 00:24:22,560
use the community to validate your

00:24:19,150 --> 00:24:25,150
detections by doing this you're actually

00:24:22,560 --> 00:24:27,250
just measure measuring the precision

00:24:25,150 --> 00:24:29,190
right is there a way of measuring your

00:24:27,250 --> 00:24:31,690
recall or how do you know from all the

00:24:29,190 --> 00:24:33,730
70 speed limits how many do you detect

00:24:31,690 --> 00:24:36,570
because these only measures the like the

00:24:33,730 --> 00:24:39,190
precision so we do some experiments

00:24:36,570 --> 00:24:41,080
usually with our our commercial

00:24:39,190 --> 00:24:43,510
customers which tend to be governments

00:24:41,080 --> 00:24:46,780
so an example is the state of Vermont in

00:24:43,510 --> 00:24:48,790
the u.s. they are a customer for viewing

00:24:46,780 --> 00:24:51,370
their highway imagery they have a

00:24:48,790 --> 00:24:54,190
traffic sign data set of existing data

00:24:51,370 --> 00:24:56,590
from years past so what we're doing is

00:24:54,190 --> 00:24:59,170
we're comparing what we detect against

00:24:56,590 --> 00:25:02,740
their existing data set and estimating a

00:24:59,170 --> 00:25:05,980
recall rate there so this can really

00:25:02,740 --> 00:25:09,010
vary by region by GPS and by camera

00:25:05,980 --> 00:25:10,900
quality but generally we tend to match

00:25:09,010 --> 00:25:13,540
very highly with what they have that's

00:25:10,900 --> 00:25:15,400
existing as well as show them where they

00:25:13,540 --> 00:25:17,800
have signs that don't actually exist or

00:25:15,400 --> 00:25:19,390
where they've missed signs or where

00:25:17,800 --> 00:25:22,420
there's situations such as vegetation

00:25:19,390 --> 00:25:24,370
covering the sign so it's something

00:25:22,420 --> 00:25:27,100
we're trying to investigate for a

00:25:24,370 --> 00:25:30,580
worldwide statistic but we know that we

00:25:27,100 --> 00:25:33,490
can average somewhere between 2 meters

00:25:30,580 --> 00:25:35,530
to 5 meters variation as far as

00:25:33,490 --> 00:25:37,300
positioning and then the percentage

00:25:35,530 --> 00:25:39,880
recall rate can vary but we have

00:25:37,300 --> 00:25:46,060
something around like 82 to 85 percent

00:25:39,880 --> 00:25:51,580
off of one pass data set okay just one

00:25:46,060 --> 00:25:53,340
last question if someone ever okay so

00:25:51,580 --> 00:25:56,460
thank you Chris enough representation

00:25:53,340 --> 00:25:56,460

YouTube URL: https://www.youtube.com/watch?v=g_wZ2ikcKmU


