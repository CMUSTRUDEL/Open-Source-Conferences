Title: openrouteservice - route the world dynamically
Publication date: 2018-09-22
Playlist: SotM 2018, Day 3, De Donato
Description: 
	Nils Nolde (University of Heidelberg), State of the Map 2018
https://2018.stateofthemap.org/2018/T082-openrouteservice_-_route_the_world_dynamically

Present the growing stack of openrouteservice software to the OSM audience. By presenting the unique features of ORS (entirely dynamic routing of HGV, open data response for isochrones, dynamic country border restrictions etc.), we hope to encourage broader use and engagement of our tools within the open-source, scientific and commercial community.
Captions: 
	00:00:00,000 --> 00:00:07,319
hi everyone I hope you're doing fine so

00:00:04,710 --> 00:00:10,469
open loot service how many people here

00:00:07,319 --> 00:00:12,830
know it alright

00:00:10,469 --> 00:00:15,389
that's more than I figured that's good I

00:00:12,830 --> 00:00:18,869
personally only know it since like one

00:00:15,389 --> 00:00:22,830
and a half years and back then we needed

00:00:18,869 --> 00:00:25,500
a fast routing service best API not

00:00:22,830 --> 00:00:28,970
locally hosted and we needed to compute

00:00:25,500 --> 00:00:31,470
3 million routes as fast as possible and

00:00:28,970 --> 00:00:33,329
so I found open would serve as I

00:00:31,470 --> 00:00:35,700
contacted the University and they were

00:00:33,329 --> 00:00:37,380
really kind enough to UM to give it to

00:00:35,700 --> 00:00:42,090
us back then I was working for a company

00:00:37,380 --> 00:00:45,120
and then in return I tried to program a

00:00:42,090 --> 00:00:47,340
QGIS plug-in and fast forward half a

00:00:45,120 --> 00:00:49,590
year was working for them and it's a

00:00:47,340 --> 00:00:53,120
really nice project and it's um it's a

00:00:49,590 --> 00:00:56,699
very nice team and very very skilled so

00:00:53,120 --> 00:01:00,960
a route service it started about ten

00:00:56,699 --> 00:01:03,359
years ago in fact it was 2000 2008 April

00:01:00,960 --> 00:01:04,049
so we just recently at our 10th

00:01:03,359 --> 00:01:08,460
anniversary

00:01:04,049 --> 00:01:10,710
and it's a project at the University of

00:01:08,460 --> 00:01:12,780
Heidelberg from the Highgate Institute I

00:01:10,710 --> 00:01:14,610
guess you might have seen some other

00:01:12,780 --> 00:01:18,479
talks by us we're actually seven people

00:01:14,610 --> 00:01:23,060
here and we have there was talk about

00:01:18,479 --> 00:01:25,770
the awesome API so history database and

00:01:23,060 --> 00:01:28,500
so back then it was I think it was a

00:01:25,770 --> 00:01:33,270
massive project or PhD I'm not quite

00:01:28,500 --> 00:01:35,850
sure it was by Pascal Knights he's still

00:01:33,270 --> 00:01:40,380
active for some contributor as far as

00:01:35,850 --> 00:01:44,640
I'm aware and and back then it was a

00:01:40,380 --> 00:01:49,500
Postgres solution so it was very dynamic

00:01:44,640 --> 00:01:52,740
but it was very slow so when it started

00:01:49,500 --> 00:01:55,610
growing they wanted to try something

00:01:52,740 --> 00:01:59,579
else and back then the graph of plastic

00:01:55,610 --> 00:02:01,860
was just emerging and when that was

00:01:59,579 --> 00:02:04,770
reliable and good to use

00:02:01,860 --> 00:02:07,540
they actually switched from whatever

00:02:04,770 --> 00:02:12,010
they were using before to graph up

00:02:07,540 --> 00:02:14,010
so it's like grappa it's open source but

00:02:12,010 --> 00:02:17,790
in our case it's entirely open source

00:02:14,010 --> 00:02:20,710
it's written in Java the back end and

00:02:17,790 --> 00:02:24,040
I'm not one of the core developers so I

00:02:20,710 --> 00:02:27,970
don't know Java what I'm doing am more

00:02:24,040 --> 00:02:30,760
for the client sites and programs and

00:02:27,970 --> 00:02:32,290
scripts and making use of best use of

00:02:30,760 --> 00:02:36,790
all food service coming up with new

00:02:32,290 --> 00:02:39,870
ideas it's of course entirely based on

00:02:36,790 --> 00:02:44,170
Open Street Map so currently there's no

00:02:39,870 --> 00:02:47,410
native support for any other wrote

00:02:44,170 --> 00:02:48,940
networks but we love contributions so if

00:02:47,410 --> 00:02:53,850
anyone has some time data they want to

00:02:48,940 --> 00:02:57,700
get in that please write a wrapper and

00:02:53,850 --> 00:03:00,790
it's also we have 2,500 requests for

00:02:57,700 --> 00:03:03,330
free per day for every user who wishes

00:03:00,790 --> 00:03:08,290
to subscribe and use our services

00:03:03,330 --> 00:03:11,470
actually we are heavily underutilized so

00:03:08,290 --> 00:03:13,660
if you have a nice project and you know

00:03:11,470 --> 00:03:16,090
you need more than 2,500 requests which

00:03:13,660 --> 00:03:20,800
can be a bit limiting just contact us

00:03:16,090 --> 00:03:25,709
you might get more so we have a stack of

00:03:20,800 --> 00:03:28,450
in total now it's 5 API so 5 endpoints

00:03:25,709 --> 00:03:31,900
which ranges from more classical

00:03:28,450 --> 00:03:34,690
directions right need from A to B it's

00:03:31,900 --> 00:03:38,110
not that classical it's a bit I would

00:03:34,690 --> 00:03:40,239
say well it's dynamic right that's I'd

00:03:38,110 --> 00:03:42,750
love to talk I'm gonna go into a bit

00:03:40,239 --> 00:03:47,380
more detail and show some examples later

00:03:42,750 --> 00:03:48,970
and that even though it's 2,500 requests

00:03:47,380 --> 00:03:52,030
per day for free there's also some

00:03:48,970 --> 00:03:55,540
restrictions on how you can actually

00:03:52,030 --> 00:03:58,420
query the instances so directions you

00:03:55,540 --> 00:04:00,790
can only go up to 6000 kilometers for a

00:03:58,420 --> 00:04:05,610
normal routing a normal profile of a

00:04:00,790 --> 00:04:08,110
cart and isochrones which would be the

00:04:05,610 --> 00:04:09,760
you know you have a point and you want

00:04:08,110 --> 00:04:13,570
to make an accessibility analysis around

00:04:09,760 --> 00:04:17,920
it using pedestrian 30-minute walking

00:04:13,570 --> 00:04:22,550
profile there you can go up to 100 km

00:04:17,920 --> 00:04:24,650
or 60 minutes and we also use a

00:04:22,550 --> 00:04:28,910
geocoding API which is really not part

00:04:24,650 --> 00:04:32,200
of routing so for that what you're

00:04:28,910 --> 00:04:36,620
Julian's here but we use pelea some

00:04:32,200 --> 00:04:39,350
stack so if I don't know if you're at

00:04:36,620 --> 00:04:42,730
the address interpolation talk so that's

00:04:39,350 --> 00:04:46,460
the police group very good framework and

00:04:42,730 --> 00:04:49,280
we have a magic endpoint with that you

00:04:46,460 --> 00:04:53,090
can basically query up to 50 by 50

00:04:49,280 --> 00:04:55,400
locations in one go so long request so

00:04:53,090 --> 00:04:57,170
if you combine that with from 2,500

00:04:55,400 --> 00:05:00,500
requests today you actually get five

00:04:57,170 --> 00:05:02,840
point two five million routes the

00:05:00,500 --> 00:05:05,180
disadvantage is a bit that you don't get

00:05:02,840 --> 00:05:08,240
the geometry returned so it's really a

00:05:05,180 --> 00:05:11,030
precursor for routing optimization right

00:05:08,240 --> 00:05:13,730
so you can put a optimization engine on

00:05:11,030 --> 00:05:18,980
top and solve the Traveling Salesman

00:05:13,730 --> 00:05:21,470
problem just like wounded and then we

00:05:18,980 --> 00:05:25,130
have a Pui endpoint which is really

00:05:21,470 --> 00:05:27,170
classical you give any geometry in there

00:05:25,130 --> 00:05:28,670
and you query around the geometry or

00:05:27,170 --> 00:05:31,580
within the geometry depending on the

00:05:28,670 --> 00:05:35,240
type of the geometry the OSM database

00:05:31,580 --> 00:05:39,350
for PU ice and it's also theorized osm

00:05:35,240 --> 00:05:42,170
only but you can see more on the rate

00:05:39,350 --> 00:05:48,560
limits side so if you want to check it

00:05:42,170 --> 00:05:50,660
out that's a good stop and if you do not

00:05:48,560 --> 00:05:52,430
want to use our API because your

00:05:50,660 --> 00:05:56,030
commercial and we do not want to give

00:05:52,430 --> 00:05:59,180
you more than 2500 requests a day then

00:05:56,030 --> 00:06:00,110
you can also install it locally in fact

00:05:59,180 --> 00:06:02,900
you could do it right now

00:06:00,110 --> 00:06:04,820
shouldn't take that long so you just

00:06:02,900 --> 00:06:08,270
clone it and you run it with soccer and

00:06:04,820 --> 00:06:10,970
it's a time in the process and we'll

00:06:08,270 --> 00:06:13,730
give you more by default book if you

00:06:10,970 --> 00:06:16,550
hide it back which is you know doesn't

00:06:13,730 --> 00:06:19,900
have that many applications but you can

00:06:16,550 --> 00:06:23,720
configure the it's there's an app config

00:06:19,900 --> 00:06:27,470
file where you can just disable enable

00:06:23,720 --> 00:06:29,240
services and also can provide a planet

00:06:27,470 --> 00:06:30,830
PDF if you want to

00:06:29,240 --> 00:06:33,680
but I got to tell you it's really

00:06:30,830 --> 00:06:35,750
resource intensive so if you want to

00:06:33,680 --> 00:06:38,060
root on the whole planet and you want to

00:06:35,750 --> 00:06:39,710
use all the options that we offer which

00:06:38,060 --> 00:06:42,710
is quite a bit more than a graph up a

00:06:39,710 --> 00:06:44,539
stack actually offers you should be

00:06:42,710 --> 00:06:49,039
looking at depending on the profile you

00:06:44,539 --> 00:06:51,650
using up 228 peaks of RAM then you wanna

00:06:49,039 --> 00:06:53,680
have the redundant so you double that it

00:06:51,650 --> 00:06:56,690
can be quite costly

00:06:53,680 --> 00:06:59,330
so the 128 gigabytes would be more for

00:06:56,690 --> 00:07:01,970
driving profile with all options enabled

00:06:59,330 --> 00:07:07,430
while more car like classical bigger

00:07:01,970 --> 00:07:08,720
profile while 64-bit it might be enough

00:07:07,430 --> 00:07:11,990
for a bike profile

00:07:08,720 --> 00:07:13,669
so just for bicycling oh just to get the

00:07:11,990 --> 00:07:20,479
terminology right profile and meaning

00:07:13,669 --> 00:07:24,440
mode of transport right and so the

00:07:20,479 --> 00:07:27,319
geocoding and the Pui end points they

00:07:24,440 --> 00:07:30,440
need a bit of special setup since

00:07:27,319 --> 00:07:32,560
geocoding is Taliah sec so you can have

00:07:30,440 --> 00:07:35,000
a look at that project and github and

00:07:32,560 --> 00:07:38,539
open qi service is actually something

00:07:35,000 --> 00:07:41,300
that we be out sourced so before it was

00:07:38,539 --> 00:07:44,419
part of the stack of our of the whole

00:07:41,300 --> 00:07:46,969
Java stack of open route service now we

00:07:44,419 --> 00:07:49,699
made that a small flask application that

00:07:46,969 --> 00:07:53,780
you can install separately and really

00:07:49,699 --> 00:07:58,449
run at least like Europe on a tiny

00:07:53,780 --> 00:08:00,560
machine so it's I really like that one

00:07:58,449 --> 00:08:03,530
because it doesn't need to be part of a

00:08:00,560 --> 00:08:07,130
routing server same doesn't have

00:08:03,530 --> 00:08:09,370
anything to do with routing so I'm gonna

00:08:07,130 --> 00:08:12,889
show you a bit about our architecture

00:08:09,370 --> 00:08:17,539
when we have an incoming request we'll

00:08:12,889 --> 00:08:20,180
pass our gateway which is also redundant

00:08:17,539 --> 00:08:22,849
so we have two servers that serve as a

00:08:20,180 --> 00:08:24,680
gateway and so that will decide if

00:08:22,849 --> 00:08:26,360
you're eligible so you provide an API

00:08:24,680 --> 00:08:28,849
key it checks against our database and

00:08:26,360 --> 00:08:31,099
if that API key is in the database and

00:08:28,849 --> 00:08:35,800
the request will be forwarded to our

00:08:31,099 --> 00:08:37,870
Reston's interface and that one

00:08:35,800 --> 00:08:39,610
it's basically just a setup of five

00:08:37,870 --> 00:08:41,830
different end points which is the

00:08:39,610 --> 00:08:45,970
directions metrics isochrones geocoding

00:08:41,830 --> 00:08:48,040
pies and to be fair so that the the

00:08:45,970 --> 00:08:51,029
whole routing engine itself like I said

00:08:48,040 --> 00:08:54,459
is grasshopper mm-hmm

00:08:51,029 --> 00:08:56,830
the matrix code is something that we

00:08:54,459 --> 00:08:59,560
implemented ourselves but development

00:08:56,830 --> 00:09:03,670
was really at the card so Institute of

00:08:59,560 --> 00:09:08,350
Institute of Technology so those are M

00:09:03,670 --> 00:09:11,560
people basically but we are not to be

00:09:08,350 --> 00:09:14,020
clear we're not really algorithmic guys

00:09:11,560 --> 00:09:16,839
so we're more we're really good at

00:09:14,020 --> 00:09:23,170
implementing stuff but mostly from the

00:09:16,839 --> 00:09:26,399
base research of other Institute's the

00:09:23,170 --> 00:09:30,660
isochrones api though that that is our

00:09:26,399 --> 00:09:35,290
our doing geocoding like I said that is

00:09:30,660 --> 00:09:38,080
X maps and and PU is is also something

00:09:35,290 --> 00:09:40,360
that we develop entirely that's fairly

00:09:38,080 --> 00:09:43,089
simple though so right now as I said we

00:09:40,360 --> 00:09:45,910
were heavily underutilized we have about

00:09:43,089 --> 00:09:49,480
two to three hundred thousand requests a

00:09:45,910 --> 00:09:53,860
day but our potential users of course

00:09:49,480 --> 00:09:58,149
depending on which which request to do

00:09:53,860 --> 00:10:01,959
is twenty million a day so our

00:09:58,149 --> 00:10:04,690
infrastructure is growing actually so we

00:10:01,959 --> 00:10:07,329
offer quite a few clients to talk to our

00:10:04,690 --> 00:10:11,079
API natively so we got a Python client

00:10:07,329 --> 00:10:12,550
our client a QGIS plug-in and you can

00:10:11,079 --> 00:10:15,010
also download the web app one gets up

00:10:12,550 --> 00:10:17,380
and host it yourself if you didn't see

00:10:15,010 --> 00:10:20,980
it yet go to maps open route service at

00:10:17,380 --> 00:10:25,360
heart and we also like I said we had

00:10:20,980 --> 00:10:28,089
this open qi service which is a small

00:10:25,360 --> 00:10:30,250
flask application so it can serve as a

00:10:28,089 --> 00:10:33,100
REST API on your local computer if you

00:10:30,250 --> 00:10:36,399
want or on a server and it's also fully

00:10:33,100 --> 00:10:38,290
customizable in the taco setup and it

00:10:36,399 --> 00:10:41,260
automatically creates drops and

00:10:38,290 --> 00:10:43,300
populates the post GIS tables in the

00:10:41,260 --> 00:10:45,130
background which is coming soon

00:10:43,300 --> 00:10:47,410
resultant fuel service

00:10:45,130 --> 00:10:49,540
I'm really looking forward to that so

00:10:47,410 --> 00:10:53,740
we'll basically assume it your fuel

00:10:49,540 --> 00:10:57,040
consumption on up to 600 car models and

00:10:53,740 --> 00:11:00,760
it takes the Geo JSON as input and the

00:10:57,040 --> 00:11:03,370
car model and it will estimate sort of

00:11:00,760 --> 00:11:07,830
well estimates and your fuel consumption

00:11:03,370 --> 00:11:12,130
based on an open database or car models

00:11:07,830 --> 00:11:13,930
think it's from the you something but

00:11:12,130 --> 00:11:16,450
it's it's well tested it's not the

00:11:13,930 --> 00:11:19,830
official manufacturer values right

00:11:16,450 --> 00:11:19,830
because they're not really reliable

00:11:19,870 --> 00:11:25,720
so you basically we have our base URL

00:11:22,720 --> 00:11:28,000
API dot open route service at arc then

00:11:25,720 --> 00:11:30,310
you just append to any endpoint that you

00:11:28,000 --> 00:11:34,540
want to use directions isochrones geo

00:11:30,310 --> 00:11:36,760
code and you can either curl it directly

00:11:34,540 --> 00:11:43,180
in a command line or use our Python or

00:11:36,760 --> 00:11:47,110
our client which is fairly new and now

00:11:43,180 --> 00:11:49,510
the directions API we have we have ten

00:11:47,110 --> 00:11:52,740
routing profiles which is I think more

00:11:49,510 --> 00:11:55,600
than most other routing services have

00:11:52,740 --> 00:11:58,660
which the wheelchair one is actually the

00:11:55,600 --> 00:12:00,670
one that really stands out so we're

00:11:58,660 --> 00:12:03,990
offering at least in Germany

00:12:00,670 --> 00:12:06,940
I think wheelchair routing it's just

00:12:03,990 --> 00:12:09,250
recently a project finish them with idle

00:12:06,940 --> 00:12:11,380
back to offer proper wheelchair routing

00:12:09,250 --> 00:12:17,260
that gets a height of the curbs and

00:12:11,380 --> 00:12:20,440
comply the route for routing for

00:12:17,260 --> 00:12:23,620
wheelchairs and the our performance it's

00:12:20,440 --> 00:12:25,360
it's Jason but it's recently it's also

00:12:23,620 --> 00:12:27,130
do Jason so you can know if you

00:12:25,360 --> 00:12:29,620
problematically accessing you type it

00:12:27,130 --> 00:12:33,010
directly into other applications to take

00:12:29,620 --> 00:12:35,290
to you Jason sees in code and you can

00:12:33,010 --> 00:12:37,900
also get extra information on steepness

00:12:35,290 --> 00:12:40,180
of your routes or or your route segments

00:12:37,900 --> 00:12:43,030
on surface which surface you're

00:12:40,180 --> 00:12:45,130
traveling on and also get information

00:12:43,030 --> 00:12:47,890
about always which is especially

00:12:45,130 --> 00:12:50,530
interesting for logistic companies and

00:12:47,890 --> 00:12:51,970
we have quite a few other

00:12:50,530 --> 00:12:54,400
functionalities that are a bit more

00:12:51,970 --> 00:12:55,209
hidden I'm not gonna go through all of

00:12:54,400 --> 00:12:58,179
them now because I'm

00:12:55,209 --> 00:13:01,420
running low on time but one that is

00:12:58,179 --> 00:13:03,639
really so green green and quite routine

00:13:01,420 --> 00:13:07,269
I find that quite interesting so if you

00:13:03,639 --> 00:13:10,389
want to take a walk just a hike not go

00:13:07,269 --> 00:13:12,999
from A to B but just walk around then

00:13:10,389 --> 00:13:16,420
you can get the option of green roofing

00:13:12,999 --> 00:13:18,730
and it will sort of try to pass parks

00:13:16,420 --> 00:13:23,009
and you know anything is on a way that

00:13:18,730 --> 00:13:25,740
is in osm and marked as a natural area

00:13:23,009 --> 00:13:29,230
right and we also have landmark based

00:13:25,740 --> 00:13:30,579
effect pedestrian navigation which is so

00:13:29,230 --> 00:13:32,350
those two things are only available in

00:13:30,579 --> 00:13:35,889
Germany right now so it's a proof of

00:13:32,350 --> 00:13:42,730
concept and but it will be rolled out

00:13:35,889 --> 00:13:45,009
soon for the whole world so this is a

00:13:42,730 --> 00:13:49,839
interactive no pockets pattern of

00:13:45,009 --> 00:13:54,100
Jupiter nope oh I decided to to give it

00:13:49,839 --> 00:13:56,529
a try if you I can show you that so this

00:13:54,100 --> 00:13:59,139
will really look site you can go into

00:13:56,529 --> 00:14:02,860
presentation mode and it supposed to be

00:13:59,139 --> 00:14:07,439
interactive mapping of no usage of our

00:14:02,860 --> 00:14:09,610
API right so I'm going to use Python and

00:14:07,439 --> 00:14:11,199
this whole project or the whole

00:14:09,610 --> 00:14:13,629
presentation is on github so you will

00:14:11,199 --> 00:14:16,569
see a link in the end so you can go and

00:14:13,629 --> 00:14:19,779
have a look in calmly so I'm not gonna

00:14:16,569 --> 00:14:22,480
spend any time really explaining the

00:14:19,779 --> 00:14:23,920
code I'm just gonna run it and then

00:14:22,480 --> 00:14:25,629
there's something called Python widgets

00:14:23,920 --> 00:14:29,350
you cannot see anything

00:14:25,629 --> 00:14:32,679
yeah so in this case we want to avoid

00:14:29,350 --> 00:14:34,869
features for a cycling profile right so

00:14:32,679 --> 00:14:38,529
we want to go from Heidelberg city

00:14:34,869 --> 00:14:44,559
centers somewhere up the hill and now he

00:14:38,529 --> 00:14:48,089
can avoid get it as well so on this one

00:14:44,559 --> 00:14:51,249
year there's none that says none there

00:14:48,089 --> 00:14:54,670
so that means there's no restrictions so

00:14:51,249 --> 00:14:57,579
we don't avoid anything but you can see

00:14:54,670 --> 00:14:59,589
that there are roots right here and you

00:14:57,579 --> 00:15:02,829
want to go here which is quite a lot

00:14:59,589 --> 00:15:04,689
higher so the shortest route would be

00:15:02,829 --> 00:15:06,100
right over the hill so you don't really

00:15:04,689 --> 00:15:06,800
see it I didn't put another patient

00:15:06,100 --> 00:15:10,040
profile which

00:15:06,800 --> 00:15:12,769
should have done really but this is

00:15:10,040 --> 00:15:16,069
quite steep areas here right and it's

00:15:12,769 --> 00:15:18,410
like paths that's not a road and if you

00:15:16,069 --> 00:15:19,999
want to avoid Hills you can just tell

00:15:18,410 --> 00:15:23,600
that no I don't want to go hills and

00:15:19,999 --> 00:15:25,850
then the route see um over the street

00:15:23,600 --> 00:15:32,809
which is a lot less steep

00:15:25,850 --> 00:15:36,319
for the most part and then we also can

00:15:32,809 --> 00:15:39,829
avoid countries which is sort of a

00:15:36,319 --> 00:15:41,989
unique so if you we had a case like that

00:15:39,829 --> 00:15:46,610
in my former company once so we were

00:15:41,989 --> 00:15:48,019
sort of logistics company and and we

00:15:46,610 --> 00:15:51,319
didn't want to go through Switzerland

00:15:48,019 --> 00:15:54,489
because Switzerland is no you got

00:15:51,319 --> 00:15:57,819
costumes and you got a clear then there

00:15:54,489 --> 00:16:00,829
sometimes being a bit anal about it so

00:15:57,819 --> 00:16:02,480
you can just say to avoid Switzerland so

00:16:00,829 --> 00:16:06,290
we're routing from haidle back down to

00:16:02,480 --> 00:16:08,660
Milan and it's going right through

00:16:06,290 --> 00:16:12,199
Switzerland right so if you don't want

00:16:08,660 --> 00:16:14,480
that and actually yeah you cannot see

00:16:12,199 --> 00:16:17,059
that other so this year is things what's

00:16:14,480 --> 00:16:19,610
that I'm taking on now right so this

00:16:17,059 --> 00:16:21,319
will hopefully avoid switzer then it

00:16:19,610 --> 00:16:24,199
takes some time it's very expensive to

00:16:21,319 --> 00:16:32,019
compute very expensive go take like 10

00:16:24,199 --> 00:16:35,139
seconds I guess but eventually it will

00:16:32,019 --> 00:16:39,910
avoid Switzerland and go through Austria

00:16:35,139 --> 00:16:42,889
and the logistics company is happy and

00:16:39,910 --> 00:16:48,170
I'm just gonna show quickly the route

00:16:42,889 --> 00:16:55,249
green or quiet so here it says green

00:16:48,170 --> 00:16:57,429
here it says quiet it says none okay so

00:16:55,249 --> 00:17:01,160
this is just a route again in Heidelberg

00:16:57,429 --> 00:17:04,189
and we're just walking somewhere from

00:17:01,160 --> 00:17:08,360
the western city over the neck of summer

00:17:04,189 --> 00:17:09,799
in the northern part and this will be on

00:17:08,360 --> 00:17:12,439
the main road and it's not really nice

00:17:09,799 --> 00:17:14,929
to walk on so you can just give it the

00:17:12,439 --> 00:17:17,190
option of green routing and it will try

00:17:14,929 --> 00:17:20,949
to stick more

00:17:17,190 --> 00:17:24,550
to the park up here or forests really it

00:17:20,949 --> 00:17:27,130
will take a bit longer obviously but it

00:17:24,550 --> 00:17:29,890
might be more pleasant which is a worth

00:17:27,130 --> 00:17:34,060
a lot actually there's also quiet

00:17:29,890 --> 00:17:36,730
profile which looks like it's even more

00:17:34,060 --> 00:17:41,890
sticking to the forest which is a bit

00:17:36,730 --> 00:17:44,230
surprising but you can have a look at

00:17:41,890 --> 00:17:48,100
the specifics it's documented on our own

00:17:44,230 --> 00:17:53,680
page about how those profiles affective

00:17:48,100 --> 00:17:57,880
routing behavior okay so then we got our

00:17:53,680 --> 00:17:59,860
isochrones API and that one also takes

00:17:57,880 --> 00:18:03,160
all of our profiles and it's basically

00:17:59,860 --> 00:18:05,320
creating you give it the location or

00:18:03,160 --> 00:18:07,600
multiple locations you can give up to

00:18:05,320 --> 00:18:09,460
five and ten in to build some on request

00:18:07,600 --> 00:18:13,900
so you get up to fifty isochrones if you

00:18:09,460 --> 00:18:16,480
want and you can also give in attributes

00:18:13,900 --> 00:18:19,450
so actually it's supposed to be reach

00:18:16,480 --> 00:18:22,600
ability analysis right so we returned

00:18:19,450 --> 00:18:25,090
data in this case from European global

00:18:22,600 --> 00:18:28,420
human settlement layer which has a 250

00:18:25,090 --> 00:18:34,210
by 250 meter population database full of

00:18:28,420 --> 00:18:36,250
a world and if we execute that you can

00:18:34,210 --> 00:18:38,020
see it either but this has time this has

00:18:36,250 --> 00:18:41,320
distance so you can query in both

00:18:38,020 --> 00:18:44,770
dimensions also that will take a little

00:18:41,320 --> 00:18:48,190
bit because I'm actually going for Milan

00:18:44,770 --> 00:18:54,220
Heidelberg and Berlin some random points

00:18:48,190 --> 00:18:57,370
there and requesting an hour know how

00:18:54,220 --> 00:19:00,310
much I'm requesting I think half an hour

00:18:57,370 --> 00:19:04,780
of half an hour 30 kilometers depending

00:19:00,310 --> 00:19:10,740
on the map dimension and you get

00:19:04,780 --> 00:19:13,180
actually the population back know so

00:19:10,740 --> 00:19:15,690
basically saying four and a half million

00:19:13,180 --> 00:19:18,809
people live in Berlin within

00:19:15,690 --> 00:19:25,909
and our reach and the same pretty much

00:19:18,809 --> 00:19:30,600
goes for Milan down here which has

00:19:25,909 --> 00:19:32,820
almost 7 million so some people say our

00:19:30,600 --> 00:19:36,000
isochrones are a bit lazy because there

00:19:32,820 --> 00:19:39,750
it's not done' polygons so it's

00:19:36,000 --> 00:19:42,539
basically just a shell of multiple of

00:19:39,750 --> 00:19:45,289
multiple finer grain polygons that you

00:19:42,539 --> 00:19:48,090
would get out of an iso khromov entually

00:19:45,289 --> 00:19:50,250
so if you look at also a miser Crone's

00:19:48,090 --> 00:19:52,710
they're usually a bit more detailed or a

00:19:50,250 --> 00:19:54,769
lot more detail and we're about to

00:19:52,710 --> 00:19:57,389
change that behavior to on our side

00:19:54,769 --> 00:20:01,820
because a lot of people say this is like

00:19:57,389 --> 00:20:01,820
a radius and they're sort of right

00:20:02,870 --> 00:20:09,419
geocoding API I'm not going to talk

00:20:05,850 --> 00:20:12,200
about that too long now you can have a

00:20:09,419 --> 00:20:14,879
look at the PD as documentation for that

00:20:12,200 --> 00:20:18,000
but it's very nice service it's very

00:20:14,879 --> 00:20:19,649
modular it's easy to set up and most of

00:20:18,000 --> 00:20:22,370
their extra services can be used to

00:20:19,649 --> 00:20:29,009
standalone api's which is really nice

00:20:22,370 --> 00:20:32,190
and then I'm just gonna show you a how

00:20:29,009 --> 00:20:34,980
many cities with the same name exists on

00:20:32,190 --> 00:20:38,789
a planet and here we got Heidelberg

00:20:34,980 --> 00:20:40,230
Milan and Springfield so if you ever

00:20:38,789 --> 00:20:45,389
wondered how many Springfield's they

00:20:40,230 --> 00:20:49,350
actually are let's give it a go so mono

00:20:45,389 --> 00:20:56,070
Springfield worldwide is 32 out of which

00:20:49,350 --> 00:21:01,110
26 are in the u.s. even Milan is as 14

00:20:56,070 --> 00:21:03,960
worldwide again 11 in the US happy you

00:21:01,110 --> 00:21:07,649
Niall bag would think it's most of them

00:21:03,960 --> 00:21:12,090
germ or well german-speaking countries

00:21:07,649 --> 00:21:14,840
but no half of the money yes I really

00:21:12,090 --> 00:21:14,840
find that funny

00:21:15,890 --> 00:21:21,710
so then we also have the matrix API in

00:21:18,470 --> 00:21:26,240
the Pui API points of interest API I'm

00:21:21,710 --> 00:21:29,570
not going to show any any example for

00:21:26,240 --> 00:21:31,490
the matrix API but you can create 50 50

00:21:29,570 --> 00:21:33,710
locations you don't get a geometry

00:21:31,490 --> 00:21:36,200
return but distance and duration which

00:21:33,710 --> 00:21:38,450
helps for your optimization and our Pui

00:21:36,200 --> 00:21:42,860
api is basically the open Pui service

00:21:38,450 --> 00:21:44,929
which is a micro service and you can

00:21:42,860 --> 00:21:47,150
query up to five categories or all

00:21:44,929 --> 00:21:50,570
within a single request and it's limited

00:21:47,150 --> 00:21:53,299
to I think 2008 pew is to be returned so

00:21:50,570 --> 00:21:57,049
it's quite a huge Jason that is that you

00:21:53,299 --> 00:22:02,600
go get and just that one more example

00:21:57,049 --> 00:22:05,330
right then antenna so here we just query

00:22:02,600 --> 00:22:08,990
the Pew I surround our side of the map

00:22:05,330 --> 00:22:11,540
location within one kilometer all PU

00:22:08,990 --> 00:22:17,480
eyes which actually turns out to be a

00:22:11,540 --> 00:22:21,110
long list but there's for example in ATM

00:22:17,480 --> 00:22:23,390
which I could have used last night so if

00:22:21,110 --> 00:22:25,790
X you type on notebook

00:22:23,390 --> 00:22:30,669
so there's P ATMs within a kilometer

00:22:25,790 --> 00:22:34,130
around us probably the most for today's

00:22:30,669 --> 00:22:36,799
afternoon most important one would be a

00:22:34,130 --> 00:22:39,590
swimming pool and there's far around

00:22:36,799 --> 00:22:44,059
this and I'm definitely gonna have any

00:22:39,590 --> 00:22:46,400
one of them and I think that's it I got

00:22:44,059 --> 00:22:49,220
a couple of more slides this is actually

00:22:46,400 --> 00:22:52,520
like a proper Jupiter notebook what's

00:22:49,220 --> 00:22:58,100
coming now but you can see the github

00:22:52,520 --> 00:23:03,470
link it's right here so you can download

00:22:58,100 --> 00:23:06,549
that no play around all right thank you

00:23:03,470 --> 00:23:06,549
[Music]

00:23:08,740 --> 00:23:13,900
thank you very much nice we have time

00:23:11,420 --> 00:23:13,900
for a few questions

00:23:17,200 --> 00:23:22,760
yeah so you're using different tools in

00:23:21,110 --> 00:23:25,040
the back room for different API

00:23:22,760 --> 00:23:27,740
endpoints like for example directions

00:23:25,040 --> 00:23:30,200
and metrics I was wondering how you

00:23:27,740 --> 00:23:32,720
managed to have some consistency between

00:23:30,200 --> 00:23:36,830
those two like if I complete a metrics

00:23:32,720 --> 00:23:39,320
and use one of the travel times do you

00:23:36,830 --> 00:23:41,510
have a guarantee that I'll get the same

00:23:39,320 --> 00:23:44,780
travel time with the route endpoint

00:23:41,510 --> 00:23:47,299
direction yeah it is using different

00:23:44,780 --> 00:23:49,940
algorithms so depending on what sort of

00:23:47,299 --> 00:23:54,020
requests you do if you just use a plane

00:23:49,940 --> 00:23:56,870
a to be I want to go from Heidelberg to

00:23:54,020 --> 00:24:00,410
Milano with my car request right no

00:23:56,870 --> 00:24:03,740
dynamic properties in there like vehicle

00:24:00,410 --> 00:24:05,419
dimensions or something it's using the

00:24:03,740 --> 00:24:08,900
contraction hierarchies right so it's a

00:24:05,419 --> 00:24:10,730
it's actually it's using a different

00:24:08,900 --> 00:24:14,630
algorithm and when when you're querying

00:24:10,730 --> 00:24:18,500
a matrix API which there it's using our

00:24:14,630 --> 00:24:22,190
fast from cazzo Institute of Technology

00:24:18,500 --> 00:24:24,679
and the kaupapa SEC actually allows very

00:24:22,190 --> 00:24:30,230
elegantly to own at different algorithms

00:24:24,679 --> 00:24:32,360
to its stack and that's what we did did

00:24:30,230 --> 00:24:35,419
that answer your question a bit if not

00:24:32,360 --> 00:24:37,370
come seniors so what do you think is the

00:24:35,419 --> 00:24:41,120
biggest issue with our sim data for

00:24:37,370 --> 00:24:44,150
routing biggest issue with awesome data

00:24:41,120 --> 00:24:47,270
when used for routing routing right

00:24:44,150 --> 00:24:49,760
sorry I'm always calling routing yeah

00:24:47,270 --> 00:24:54,470
for routing the biggest issue is I think

00:24:49,760 --> 00:24:57,500
that a lot of texts are not complete so

00:24:54,470 --> 00:24:59,990
especially the dynamic requests if you

00:24:57,500 --> 00:25:02,210
want to specify because I mentions in

00:24:59,990 --> 00:25:03,830
order to avoid crashing your truck into

00:25:02,210 --> 00:25:05,780
a bridge right which happens on a

00:25:03,830 --> 00:25:08,500
regular basis you would be surprised how

00:25:05,780 --> 00:25:11,510
often that happens and that is

00:25:08,500 --> 00:25:14,030
unfortunately it's not really all over

00:25:11,510 --> 00:25:14,800
the place it's very seldom actually its

00:25:14,030 --> 00:25:16,489
attack the right way

00:25:14,800 --> 00:25:20,399
[Music]

00:25:16,489 --> 00:25:24,389
also but we do account for that for the

00:25:20,399 --> 00:25:28,590
next problem which is that often nodes

00:25:24,389 --> 00:25:31,919
like a like a bridge or let's say bridge

00:25:28,590 --> 00:25:36,090
going above highway rain and the bridge

00:25:31,919 --> 00:25:39,779
has or that case node has a height

00:25:36,090 --> 00:25:41,729
property but it's irrelevant for that

00:25:39,779 --> 00:25:46,259
node for routing it's relevant for the

00:25:41,729 --> 00:25:47,669
street below so that's I mean you can't

00:25:46,259 --> 00:25:51,330
account for that right it can do some

00:25:47,669 --> 00:25:54,629
pre-processing we do that but it's not

00:25:51,330 --> 00:25:58,979
that nice so yeah it's it's amount of

00:25:54,629 --> 00:26:01,070
tags or the right tags and a few other

00:25:58,979 --> 00:26:01,070
things

00:26:04,030 --> 00:26:12,020
other questions okay so we can close

00:26:09,740 --> 00:26:14,290
here thank you again is thank you very

00:26:12,020 --> 00:26:14,290

YouTube URL: https://www.youtube.com/watch?v=flJx1rFvccE


