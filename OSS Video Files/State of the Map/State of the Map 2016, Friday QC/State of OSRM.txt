Title: State of OSRM
Publication date: 2016-10-17
Playlist: State of the Map 2016, Friday QC
Description: 
	Johan Uhle at State of the Map 2016
http://2016.stateofthemap.org/2016/state-of-osrm/

The Open Source Routing Machine (OSRM) is a popular routing engine, providing blazing fast global route-finding on OpenStreetMap. In the last 12 months, OSRM has taken big-steps towards a world-class navigation experience for car drivers. We made route duration estimates more realistic, by allowing developers to provide custom speed and turn duration data. We also dramatically shortened pre-processing times and improved turn-by-turn guidance.

In this talk we will explain these new features, highlight trade-offs we faced, and discuss the nitty-gritty of doing navigation on OpenStreetMap.
Captions: 
	00:00:00,030 --> 00:00:06,270
okay welcome back everyone I think we'll

00:00:02,669 --> 00:00:08,719
get started um I'm very good Co back for

00:00:06,270 --> 00:00:10,650
this option for these afternoon sessions

00:00:08,719 --> 00:00:12,690
the first session I'm just going to

00:00:10,650 --> 00:00:14,910
choose it it's Yohan from my box is

00:00:12,690 --> 00:00:18,029
going to talk about the state of oh s RM

00:00:14,910 --> 00:00:20,180
the OpenStreetMap routing machine there

00:00:18,029 --> 00:00:26,340
you go

00:00:20,180 --> 00:00:29,340
hey I'm Johan on the program it says the

00:00:26,340 --> 00:00:32,910
state of ORM that stands for the open

00:00:29,340 --> 00:00:34,380
source routing machine I'm from a

00:00:32,910 --> 00:00:36,630
company called map box might have heard

00:00:34,380 --> 00:00:40,350
about us we do tiles and geocoding

00:00:36,630 --> 00:00:43,200
and we do directions we sell that as a

00:00:40,350 --> 00:00:46,800
service all of our core components are

00:00:43,200 --> 00:00:51,539
open source and one of these components

00:00:46,800 --> 00:00:55,289
is OS RM which is a routing engine that

00:00:51,539 --> 00:01:00,239
routes on road networks basically from A

00:00:55,289 --> 00:01:03,840
to B the the cool thing about OS RM is

00:01:00,239 --> 00:01:07,560
that it is really it is extremely fast

00:01:03,840 --> 00:01:09,240
so I know first where you're gonna know

00:01:07,560 --> 00:01:12,000
it from is if you go to OpenStreetMap

00:01:09,240 --> 00:01:14,340
org and you want to do routing then OS

00:01:12,000 --> 00:01:16,470
RM is the standard routing engine that

00:01:14,340 --> 00:01:20,130
you get there's a verse that you can

00:01:16,470 --> 00:01:23,490
choose from as well of course we run a

00:01:20,130 --> 00:01:26,340
demo server for OS RM where it is

00:01:23,490 --> 00:01:28,860
deployed and running and you can use it

00:01:26,340 --> 00:01:31,049
for free if you want to we are running

00:01:28,860 --> 00:01:33,329
on the demo server basically the latest

00:01:31,049 --> 00:01:35,970
version of RM so it breaks fairly often

00:01:33,329 --> 00:01:39,570
because it's also our integration tests

00:01:35,970 --> 00:01:44,729
system in a way so this is what we get

00:01:39,570 --> 00:01:47,159
out of it yeah so the really cool thing

00:01:44,729 --> 00:01:48,990
about ORM why you should care about it

00:01:47,159 --> 00:01:53,220
is the fact that it's extremely fast

00:01:48,990 --> 00:01:55,740
extremely fast in routing so this is an

00:01:53,220 --> 00:02:01,259
example if you go to map project Osram

00:01:55,740 --> 00:02:04,590
org and you start pulling around on on

00:02:01,259 --> 00:02:07,140
the on the icons then yeah it will just

00:02:04,590 --> 00:02:10,110
route extremely fast we're out usually

00:02:07,140 --> 00:02:12,510
within tens of milliseconds and then

00:02:10,110 --> 00:02:13,050
there is Network latency around that as

00:02:12,510 --> 00:02:14,400
well

00:02:13,050 --> 00:02:20,010
which sometimes it might feel a bit

00:02:14,400 --> 00:02:22,890
slower the the major parts of creating

00:02:20,010 --> 00:02:25,590
these routes is that we have a

00:02:22,890 --> 00:02:29,280
pre-processing step first which can take

00:02:25,590 --> 00:02:32,070
quite a long time so it can take between

00:02:29,280 --> 00:02:34,800
eight and nine hours for car routing and

00:02:32,070 --> 00:02:37,500
it can take up to 24 hours for walk

00:02:34,800 --> 00:02:41,330
routing but in a pre-processing step we

00:02:37,500 --> 00:02:43,860
basically process the whole planet and

00:02:41,330 --> 00:02:45,840
save it in a way that we can then do

00:02:43,860 --> 00:02:51,630
these extremely fast routing requests

00:02:45,840 --> 00:02:55,470
against it so OS Ram has existed for a

00:02:51,630 --> 00:02:57,120
couple of years now and about a year ago

00:02:55,470 --> 00:02:59,940
we set out and asked ourselves like

00:02:57,120 --> 00:03:02,310
what's the next what's the next things

00:02:59,940 --> 00:03:04,950
we want to do in our Ram and we figured

00:03:02,310 --> 00:03:07,590
out ok we need to get ready for doing

00:03:04,950 --> 00:03:09,390
routing in the car other companies are

00:03:07,590 --> 00:03:11,070
already doing this you might have seen

00:03:09,390 --> 00:03:12,900
us cobbler and tell enough

00:03:11,070 --> 00:03:15,420
who are doing a great job understaffed

00:03:12,900 --> 00:03:17,330
Muse doing a great job on this we want

00:03:15,420 --> 00:03:20,280
to do a great job on this as well so

00:03:17,330 --> 00:03:25,110
yeah netbooks is just doing a me-too

00:03:20,280 --> 00:03:28,080
here as well so in-car navigation there

00:03:25,110 --> 00:03:29,730
is basically two big oh wait when we say

00:03:28,080 --> 00:03:32,459
in-car navigation what do we mean we

00:03:29,730 --> 00:03:36,630
mean something like this so being able

00:03:32,459 --> 00:03:38,790
to do routing wherever the user or the

00:03:36,630 --> 00:03:40,830
client wants to do that this can be in

00:03:38,790 --> 00:03:43,230
your app this can be on Android or this

00:03:40,830 --> 00:03:45,209
can be an iOS or this can be in an

00:03:43,230 --> 00:03:48,300
embedded system that runs for example

00:03:45,209 --> 00:03:52,470
and in the instrument cluster of your

00:03:48,300 --> 00:03:54,330
car and the routing experience should

00:03:52,470 --> 00:03:56,850
include all the things that make routing

00:03:54,330 --> 00:03:58,770
great so it should be great routes that

00:03:56,850 --> 00:04:01,590
match the real world it should include

00:03:58,770 --> 00:04:05,250
all the roads that are in the real world

00:04:01,590 --> 00:04:07,740
should include them like up-to-date it

00:04:05,250 --> 00:04:10,890
should have distances and it should have

00:04:07,740 --> 00:04:12,150
times it should announce to you voice

00:04:10,890 --> 00:04:15,739
instructions that should have text

00:04:12,150 --> 00:04:15,739
instructions that they have turn symbol

00:04:21,480 --> 00:04:23,540
you

00:07:10,520 --> 00:07:15,229
the posted speed limit could be totally

00:07:12,770 --> 00:07:17,000
different so in Berlin there's certain

00:07:15,229 --> 00:07:18,919
roads where you can go 70 kilometers per

00:07:17,000 --> 00:07:21,349
hour even though it's residential or

00:07:18,919 --> 00:07:24,440
it's actually then it's like secondary

00:07:21,349 --> 00:07:26,630
but and the same way there's a lot of

00:07:24,440 --> 00:07:30,080
highway parts of the highway where you

00:07:26,630 --> 00:07:33,949
can only go 80 because they're in the

00:07:30,080 --> 00:07:35,930
city for example so that's supposed to

00:07:33,949 --> 00:07:39,410
speed limit the posted speed limit does

00:07:35,930 --> 00:07:42,310
not always correlate with the actual

00:07:39,410 --> 00:07:45,139
speed that cars are going there is the

00:07:42,310 --> 00:07:47,659
the usual cases a lot of cars go faster

00:07:45,139 --> 00:07:49,819
than the posted speed limit so that is

00:07:47,659 --> 00:07:51,349
kind of becomes a moral question if that

00:07:49,819 --> 00:07:53,960
should be represented in a routing

00:07:51,349 --> 00:07:55,340
engine or not the other thing that is

00:07:53,960 --> 00:07:57,349
way more common is that you will never

00:07:55,340 --> 00:08:00,979
be able to achieve that speed on that

00:07:57,349 --> 00:08:03,080
route so there's always traffic on this

00:08:00,979 --> 00:08:06,650
one street in Berlin and you will never

00:08:03,080 --> 00:08:08,659
go 50 there so that's all the things

00:08:06,650 --> 00:08:10,759
that are static that means static when I

00:08:08,659 --> 00:08:13,669
say static I mean that's the things that

00:08:10,759 --> 00:08:16,430
you have one value for all of time

00:08:13,669 --> 00:08:17,719
attached to a certain segment there's a

00:08:16,430 --> 00:08:21,740
lot of things you cannot represent with

00:08:17,719 --> 00:08:23,630
this it's specifically rush hour rush

00:08:21,740 --> 00:08:26,150
hour is the thing that happens and you

00:08:23,630 --> 00:08:31,009
want to you want to model it in some way

00:08:26,150 --> 00:08:33,229
so you need dynamic values here and one

00:08:31,009 --> 00:08:36,860
way to model this is to have basically

00:08:33,229 --> 00:08:39,140
historical dynamic speed data which

00:08:36,860 --> 00:08:42,709
means that you segment at usually you

00:08:39,140 --> 00:08:44,930
segment a week a typical week into small

00:08:42,709 --> 00:08:46,310
chunks so you say every five minutes

00:08:44,930 --> 00:08:48,350
segments or ten minute segments or

00:08:46,310 --> 00:08:50,600
15-minute segments there's one speed

00:08:48,350 --> 00:08:53,450
that people can usually go there on the

00:08:50,600 --> 00:08:56,540
street and this can cooperate rush hour

00:08:53,450 --> 00:08:59,000
so you will usually see in the morning

00:08:56,540 --> 00:09:00,230
it's slower and then it goes fast again

00:08:59,000 --> 00:09:02,149
and then in the afternoon or evening

00:09:00,230 --> 00:09:06,470
there's the second rush hour and it's

00:09:02,149 --> 00:09:08,390
going to be fast slower again the thing

00:09:06,470 --> 00:09:10,209
you cannot model with these dynamic

00:09:08,390 --> 00:09:14,630
speed out of the historical speeds is

00:09:10,209 --> 00:09:18,800
things that divert from a regular week

00:09:14,630 --> 00:09:22,630
so an example here is holidays sports

00:09:18,800 --> 00:09:24,440
events weather construction work

00:09:22,630 --> 00:09:26,030
incidents accidents

00:09:24,440 --> 00:09:28,520
all of these things that don't always

00:09:26,030 --> 00:09:29,780
happen but sometimes so in that case

00:09:28,520 --> 00:09:32,330
what do you want to do is you want to

00:09:29,780 --> 00:09:33,950
have kind of a real-time speed engine

00:09:32,330 --> 00:09:37,880
that can take all of these inputs

00:09:33,950 --> 00:09:41,450
together and derive what is the current

00:09:37,880 --> 00:09:42,470
speed right there the big problem of all

00:09:41,450 --> 00:09:43,850
of these things that I'm telling you

00:09:42,470 --> 00:09:47,480
here is that most of this data is

00:09:43,850 --> 00:09:49,730
proprietary please talk to me if you

00:09:47,480 --> 00:09:56,540
want it to be open tell me your use

00:09:49,730 --> 00:09:59,390
cases I'm interested in this given that

00:09:56,540 --> 00:10:02,600
you have the speed data from whatever

00:09:59,390 --> 00:10:04,910
source that is the way how we load this

00:10:02,600 --> 00:10:07,310
into our Stremme is by having it as a

00:10:04,910 --> 00:10:10,040
CSV file that basically says from node

00:10:07,310 --> 00:10:12,470
and to node and then has a speed value

00:10:10,040 --> 00:10:14,000
attached to us and in this way you can

00:10:12,470 --> 00:10:19,550
basically cover the complete roads

00:10:14,000 --> 00:10:23,060
network in in OSM and here's one example

00:10:19,550 --> 00:10:26,180
so this is going from the map box San

00:10:23,060 --> 00:10:27,230
Francisco office to the airport and in

00:10:26,180 --> 00:10:32,290
the morning you can basically see that

00:10:27,230 --> 00:10:36,230
as a rush hour so this is the ETA the

00:10:32,290 --> 00:10:39,380
yellow or well orange the upper one the

00:10:36,230 --> 00:10:42,500
upper graph goes basically from the

00:10:39,380 --> 00:10:44,060
morning to midday and you can see how in

00:10:42,500 --> 00:10:46,190
the morning just a rush hour and the ETA

00:10:44,060 --> 00:10:48,680
is growing it takes longer to get to

00:10:46,190 --> 00:10:50,900
your destination as a comparison there's

00:10:48,680 --> 00:10:52,490
the flat blue line which is basically

00:10:50,900 --> 00:10:55,880
without traffic there's just one value

00:10:52,490 --> 00:10:57,500
it just stays the same the other thing

00:10:55,880 --> 00:10:59,810
is sometimes it's better to take the

00:10:57,500 --> 00:11:02,420
freeway than to take or go through the

00:10:59,810 --> 00:11:03,950
city so this is modeled here you take

00:11:02,420 --> 00:11:10,010
different routes at different parts of

00:11:03,950 --> 00:11:13,160
the time of the day okay so that was

00:11:10,010 --> 00:11:14,600
feeds assuming that you did all the

00:11:13,160 --> 00:11:18,800
speeds modeling correctly and it's

00:11:14,600 --> 00:11:21,020
loading fast into into hours R M you get

00:11:18,800 --> 00:11:24,080
gray DTS and you get good routes and

00:11:21,020 --> 00:11:26,570
this looks fine so users will be happy

00:11:24,080 --> 00:11:28,430
with that the next question is what else

00:11:26,570 --> 00:11:30,920
did I need of course first they need to

00:11:28,430 --> 00:11:33,140
have the routing response in there on

00:11:30,920 --> 00:11:35,000
their device in their car if they have a

00:11:33,140 --> 00:11:37,700
mobile phone and it's in their SDK it's

00:11:35,000 --> 00:11:38,280
easy you do a request if it's built into

00:11:37,700 --> 00:11:41,700
the car

00:11:38,280 --> 00:11:43,830
car needs to have connectivity to mobile

00:11:41,700 --> 00:11:46,070
to reach the servers can get the route

00:11:43,830 --> 00:11:48,450
any case you have a route response now

00:11:46,070 --> 00:11:51,660
now you have to turn it into an

00:11:48,450 --> 00:11:54,150
actionable representation for the user

00:11:51,660 --> 00:12:01,200
and this is where guidance comes into

00:11:54,150 --> 00:12:03,750
play so when we set out to think about

00:12:01,200 --> 00:12:07,550
guidance more we realized that it's like

00:12:03,750 --> 00:12:09,990
really hard to code in a car and we

00:12:07,550 --> 00:12:12,990
actually what we need is we need a tool

00:12:09,990 --> 00:12:16,170
to do basically armchair testing off of

00:12:12,990 --> 00:12:18,090
our assumptions and of our routing

00:12:16,170 --> 00:12:20,550
engine and of our response so what we

00:12:18,090 --> 00:12:22,530
built is a simulator that can run in the

00:12:20,550 --> 00:12:24,840
browser this is open source

00:12:22,530 --> 00:12:27,300
it's called guidance sim you can find it

00:12:24,840 --> 00:12:29,700
on the map box github account I'll post

00:12:27,300 --> 00:12:31,590
links in the bit in the end but the

00:12:29,700 --> 00:12:33,900
important thing is it includes all the

00:12:31,590 --> 00:12:35,730
things that you would need from a guy

00:12:33,900 --> 00:12:38,580
from a guidance experience so it

00:12:35,730 --> 00:12:40,920
includes text instructions how much time

00:12:38,580 --> 00:12:42,780
you still have it does include voice

00:12:40,920 --> 00:12:44,790
which I don't have on here right now

00:12:42,780 --> 00:12:48,930
because you never know if there's gonna

00:12:44,790 --> 00:12:50,940
be audio in a presentation and it also

00:12:48,930 --> 00:12:54,300
includes on the right basically the raw

00:12:50,940 --> 00:12:56,040
response so we can debug this way easier

00:12:54,300 --> 00:12:59,970
and you can go back and forth as well

00:12:56,040 --> 00:13:02,400
this is also sped up so when you think

00:12:59,970 --> 00:13:04,020
about response that you get back that

00:13:02,400 --> 00:13:04,589
you want to route on and do the routing

00:13:04,020 --> 00:13:08,010
form

00:13:04,589 --> 00:13:10,589
it's basically an array of objects where

00:13:08,010 --> 00:13:13,350
every object represents one moment one

00:13:10,589 --> 00:13:16,170
maneuver where the user has to make a

00:13:13,350 --> 00:13:17,700
decision so the first decision could be

00:13:16,170 --> 00:13:19,500
like an easy decision is like you should

00:13:17,700 --> 00:13:22,110
start like that would usually be the

00:13:19,500 --> 00:13:24,930
first one you should depart in whatever

00:13:22,110 --> 00:13:28,140
direction and then usually what you get

00:13:24,930 --> 00:13:31,589
is turns so turn left turn right all of

00:13:28,140 --> 00:13:34,500
these objects these step objects include

00:13:31,589 --> 00:13:38,310
a lot of data that the client can then

00:13:34,500 --> 00:13:40,170
use to build a an experience so they

00:13:38,310 --> 00:13:42,690
include what's the street name you turn

00:13:40,170 --> 00:13:43,290
on what's the destination signs that are

00:13:42,690 --> 00:13:45,480
for that

00:13:43,290 --> 00:13:47,100
what's the lane configuration what's the

00:13:45,480 --> 00:13:51,070
shape of the intersection where you turn

00:13:47,100 --> 00:13:53,350
what is the actual turn type what's the

00:13:51,070 --> 00:13:57,610
direction of that turn so all of these

00:13:53,350 --> 00:14:03,610
things are returned in the in the

00:13:57,610 --> 00:14:07,209
routing response so what we realized

00:14:03,610 --> 00:14:10,389
fairly fast is that on the left is our

00:14:07,209 --> 00:14:11,949
own our old instruction types so that

00:14:10,389 --> 00:14:15,250
the types that every of these steps

00:14:11,949 --> 00:14:17,019
could have the part continued turn

00:14:15,250 --> 00:14:20,110
roundabout and arrive and we realize

00:14:17,019 --> 00:14:22,899
this is not sufficient enough to provide

00:14:20,110 --> 00:14:26,949
a good routing experience so we added a

00:14:22,899 --> 00:14:29,740
bunch of new types the important ones

00:14:26,949 --> 00:14:32,769
here so new name and end road are ones

00:14:29,740 --> 00:14:34,870
that help with name changes and so new

00:14:32,769 --> 00:14:37,660
name helps with name changes the route

00:14:34,870 --> 00:14:39,310
that you're on stays the same one but it

00:14:37,660 --> 00:14:41,019
gets a different name now and you want

00:14:39,310 --> 00:14:43,600
to be informed about that end of the

00:14:41,019 --> 00:14:44,949
roads can be used for turns where

00:14:43,600 --> 00:14:46,420
instead of saying in two hundred meters

00:14:44,949 --> 00:14:49,630
turn right you can say at the end of the

00:14:46,420 --> 00:14:52,930
road turn right we then worked a lot on

00:14:49,630 --> 00:14:56,470
highway and motorway instructions and

00:14:52,930 --> 00:14:59,740
guidance which we introduced the fork

00:14:56,470 --> 00:15:03,459
and merge operators as well as ramp

00:14:59,740 --> 00:15:06,029
operators and Lane operators I'm gonna

00:15:03,459 --> 00:15:08,380
explain these more in a bit and

00:15:06,029 --> 00:15:09,970
roundabouts are actually really hard

00:15:08,380 --> 00:15:12,519
everyone who ever liked mapped a

00:15:09,970 --> 00:15:16,870
roundabout in osm knows that it's like

00:15:12,519 --> 00:15:19,480
it's a weird weird thing to map it's an

00:15:16,870 --> 00:15:23,649
even weirder thing to route on it's

00:15:19,480 --> 00:15:25,959
really hard so we basically introduced a

00:15:23,649 --> 00:15:28,029
rotary which is a pattern type with

00:15:25,959 --> 00:15:30,310
which is a type with you know is M

00:15:28,029 --> 00:15:31,959
already and the roundabout turn which

00:15:30,310 --> 00:15:34,480
I'll explain later again but which

00:15:31,959 --> 00:15:37,269
basically is a very we don't we don't

00:15:34,480 --> 00:15:38,440
explain we don't tell you to go into the

00:15:37,269 --> 00:15:41,529
roundabout we just tell you at the

00:15:38,440 --> 00:15:43,390
roundabout to do a turn so we added all

00:15:41,529 --> 00:15:47,290
of these new types that would give us

00:15:43,390 --> 00:15:51,339
better expressionist in the in the

00:15:47,290 --> 00:15:55,510
guidance experience as I mentioned

00:15:51,339 --> 00:16:00,850
motorways were a big big issue for us RS

00:15:55,510 --> 00:16:03,820
is really can i zoom in yes okay so this

00:16:00,850 --> 00:16:05,860
is the old way of how OS or M version

00:16:03,820 --> 00:16:07,300
would represent a ramp it would just say

00:16:05,860 --> 00:16:09,550
continue because it would look at the

00:16:07,300 --> 00:16:11,830
turn angle and say well when you go down

00:16:09,550 --> 00:16:15,220
a ramp it's just a turn 10 10 degree

00:16:11,830 --> 00:16:17,230
turn um that obviously didn't really cut

00:16:15,220 --> 00:16:20,020
it is really bad

00:16:17,230 --> 00:16:23,820
this made OS a ram version for unusable

00:16:20,020 --> 00:16:26,350
for doing any sort of like rerouting

00:16:23,820 --> 00:16:29,200
obviously this is better now we now say

00:16:26,350 --> 00:16:31,000
take the ramp in this example there's

00:16:29,200 --> 00:16:32,970
there were sadly no destinations in

00:16:31,000 --> 00:16:36,790
there so but it should say take the ramp

00:16:32,970 --> 00:16:38,400
towards I don't know where this even as

00:16:36,790 --> 00:16:42,640
towards Berlin

00:16:38,400 --> 00:16:45,880
so Rams are represented now better we

00:16:42,640 --> 00:16:49,540
added destinations as well so this big

00:16:45,880 --> 00:16:51,610
enough yes this looks better so we can

00:16:49,540 --> 00:16:53,290
now say you get on the Autobahn

00:16:51,610 --> 00:16:55,870
and you want take the ramp in the

00:16:53,290 --> 00:17:01,300
direction for example in this in this

00:16:55,870 --> 00:17:02,980
case towards Brussels and for anyone who

00:17:01,300 --> 00:17:06,760
ever map destination sign so first of

00:17:02,980 --> 00:17:10,720
all this is how they look yeah it's a

00:17:06,760 --> 00:17:14,380
destination sign it says Brussels and in

00:17:10,720 --> 00:17:17,470
this specific case it's mapped as the

00:17:14,380 --> 00:17:19,090
destination is Brussels actually in this

00:17:17,470 --> 00:17:21,580
case there's two destinations here so

00:17:19,090 --> 00:17:24,010
there's Brussels and Luke and at the

00:17:21,580 --> 00:17:26,890
moment we return all of these to the

00:17:24,010 --> 00:17:28,840
client and the client can then decide

00:17:26,890 --> 00:17:32,950
how they want to deal with this one

00:17:28,840 --> 00:17:34,120
example that we use is the text

00:17:32,950 --> 00:17:38,590
instruction so the thing that is

00:17:34,120 --> 00:17:41,920
announced as voice to the user is only

00:17:38,590 --> 00:17:43,960
the first destination so it will only be

00:17:41,920 --> 00:17:45,790
Brussels but if you have a

00:17:43,960 --> 00:17:49,560
representation on the display you could

00:17:45,790 --> 00:17:49,560
display the whole destination in sign

00:17:50,790 --> 00:17:57,100
next thing we integrated its lanes so

00:17:53,880 --> 00:17:59,320
basically when you do a turn you need to

00:17:57,100 --> 00:18:01,210
figure out which which lane you need to

00:17:59,320 --> 00:18:03,570
be on which Lane is the right one this

00:18:01,210 --> 00:18:07,930
helps tremendously when specifically

00:18:03,570 --> 00:18:11,170
routing on motorways and highways this

00:18:07,930 --> 00:18:12,700
is how lanes look so here the

00:18:11,170 --> 00:18:14,170
configuration is there's one straight

00:18:12,700 --> 00:18:15,780
there's another one straight and then

00:18:14,170 --> 00:18:19,380
there is one to the right

00:18:15,780 --> 00:18:22,890
in osm this is mapped with turn lanes

00:18:19,380 --> 00:18:27,350
turn lanes key and this one is actually

00:18:22,890 --> 00:18:31,050
mapped as non non and right

00:18:27,350 --> 00:18:33,030
the important thing maybe a difference

00:18:31,050 --> 00:18:37,230
here with destination versus lanes is

00:18:33,030 --> 00:18:39,750
destinations you do on the the way that

00:18:37,230 --> 00:18:41,400
is leading away from the route so it's

00:18:39,750 --> 00:18:44,420
basically behind the intersection that

00:18:41,400 --> 00:18:47,820
you want to do to turn on

00:18:44,420 --> 00:18:51,270
whereas lanes are on the segment that is

00:18:47,820 --> 00:18:54,030
in front of the of the intersection we

00:18:51,270 --> 00:18:57,000
combine all this into one step where we

00:18:54,030 --> 00:19:00,680
then where then the user the client can

00:18:57,000 --> 00:19:02,940
do can can build a response for the user

00:19:00,680 --> 00:19:05,280
this is an interesting case where

00:19:02,940 --> 00:19:07,410
actually the way you model it you model

00:19:05,280 --> 00:19:09,660
the data is fairly different to how we

00:19:07,410 --> 00:19:12,060
return it because the intersection

00:19:09,660 --> 00:19:13,500
itself in the turn itself is not enough

00:19:12,060 --> 00:19:15,720
to give good guidance you need to look

00:19:13,500 --> 00:19:17,490
at more segments there's also some

00:19:15,720 --> 00:19:21,930
advanced things we do there for

00:19:17,490 --> 00:19:23,700
combining lanes for combining turns so

00:19:21,930 --> 00:19:27,300
that we reduce the number of

00:19:23,700 --> 00:19:28,860
instructions that we send to the user if

00:19:27,300 --> 00:19:31,470
anyone wants to hear more about this

00:19:28,860 --> 00:19:34,740
then we can probably give an advanced

00:19:31,470 --> 00:19:39,120
talk at some point next thing

00:19:34,740 --> 00:19:40,320
roundabouts or I mentioned pretty bad we

00:19:39,120 --> 00:19:42,840
used to only say enter the roundabout

00:19:40,320 --> 00:19:45,090
and take the exit onto the street name

00:19:42,840 --> 00:19:46,560
which is like most roundabouts don't

00:19:45,090 --> 00:19:49,160
tell you the street names on big signs

00:19:46,560 --> 00:19:51,540
this is like basically impossible to use

00:19:49,160 --> 00:19:54,750
whereas now we say take the second exit

00:19:51,540 --> 00:19:56,700
which is way better still we have a lot

00:19:54,750 --> 00:19:59,010
of roundabouts you don't want to count

00:19:56,700 --> 00:20:00,960
exits especially of you they are very

00:19:59,010 --> 00:20:03,660
small so we introduced the roundabout

00:20:00,960 --> 00:20:10,110
turn which only says that the roundabout

00:20:03,660 --> 00:20:15,420
turn left which is way better one thing

00:20:10,110 --> 00:20:17,880
that is really annoying with a lot of or

00:20:15,420 --> 00:20:19,890
is it becomes easily annoying when you

00:20:17,880 --> 00:20:23,540
do guidance is that the users just

00:20:19,890 --> 00:20:25,860
bombard it with instructions that are

00:20:23,540 --> 00:20:28,170
not valid anymore the moment that

00:20:25,860 --> 00:20:29,190
actually have to do something a case

00:20:28,170 --> 00:20:30,870
here is for example

00:20:29,190 --> 00:20:33,180
doing two left turns instead of a u-turn

00:20:30,870 --> 00:20:34,710
so you get do a left turn and then

00:20:33,180 --> 00:20:37,770
immediately you get do a left turn again

00:20:34,710 --> 00:20:39,480
which means you just get constant voice

00:20:37,770 --> 00:20:41,040
feedback from your routing engine which

00:20:39,480 --> 00:20:43,980
you don't want instead it's way easier

00:20:41,040 --> 00:20:46,470
to say just make a u-turn and this is

00:20:43,980 --> 00:20:49,260
shorter and concise our goal definitely

00:20:46,470 --> 00:20:51,480
is to give the user as least

00:20:49,260 --> 00:20:57,510
instructions as possible but still guide

00:20:51,480 --> 00:21:00,660
them to the goal I already mentioned

00:20:57,510 --> 00:21:02,130
text instructions so one thing where we

00:21:00,660 --> 00:21:03,690
wear our Sriram is differing from a lot

00:21:02,130 --> 00:21:05,700
of other routing engines is that we

00:21:03,690 --> 00:21:10,380
don't actually include text instructions

00:21:05,700 --> 00:21:12,540
in the routing response which we do for

00:21:10,380 --> 00:21:16,710
the reason that we want to give the

00:21:12,540 --> 00:21:19,200
users the Xperia total control over how

00:21:16,710 --> 00:21:21,180
the actual text instructions should work

00:21:19,200 --> 00:21:22,980
how there should be compiled so it's a

00:21:21,180 --> 00:21:25,170
standalone library that you can

00:21:22,980 --> 00:21:26,670
basically put in on top of our RAM but

00:21:25,170 --> 00:21:28,140
you can also run in the client so it can

00:21:26,670 --> 00:21:32,430
run on the server or it can run on the

00:21:28,140 --> 00:21:35,850
client and in these text instructions

00:21:32,430 --> 00:21:39,300
what we do is basically defined as a big

00:21:35,850 --> 00:21:41,820
JSON object where you can define all the

00:21:39,300 --> 00:21:43,440
strings in there it's basically taking

00:21:41,820 --> 00:21:46,320
the step object and then it's a hundred

00:21:43,440 --> 00:21:47,910
lines of code that turn this into a text

00:21:46,320 --> 00:21:50,760
instruction with all the special cases

00:21:47,910 --> 00:21:52,740
that exist if you don't like a

00:21:50,760 --> 00:21:54,990
roundabout turn then you can just

00:21:52,740 --> 00:21:56,910
basically remove it and just change it

00:21:54,990 --> 00:21:59,430
to a different text instruction that

00:21:56,910 --> 00:22:02,910
fits your case better also this opens up

00:21:59,430 --> 00:22:04,500
the avenue for translations which we'll

00:22:02,910 --> 00:22:10,920
hopefully have soon because we didn't

00:22:04,500 --> 00:22:13,140
get around to it yet one last thing with

00:22:10,920 --> 00:22:15,720
everything that is guidance basically

00:22:13,140 --> 00:22:18,840
and this also applies to osm what we

00:22:15,720 --> 00:22:21,210
tries to find like general rules for the

00:22:18,840 --> 00:22:27,030
world right like we try to model the

00:22:21,210 --> 00:22:28,890
world this is where for picture great

00:22:27,030 --> 00:22:30,600
there's a link to the original video

00:22:28,890 --> 00:22:35,130
afterwards so you can watch it all the

00:22:30,600 --> 00:22:40,050
time so what we try to when you try to

00:22:35,130 --> 00:22:41,940
find us we try to find rules for the

00:22:40,050 --> 00:22:44,070
world how we can model the world

00:22:41,940 --> 00:22:45,990
and as you all know like there's

00:22:44,070 --> 00:22:48,450
different base in the world how things

00:22:45,990 --> 00:22:52,590
are mapped like local communities of OSM

00:22:48,450 --> 00:22:55,019
are different for every country and what

00:22:52,590 --> 00:22:58,889
our different well what we struggle with

00:22:55,019 --> 00:23:00,809
in providing routing on that is that we

00:22:58,889 --> 00:23:03,929
have to find generalized rules for all

00:23:00,809 --> 00:23:06,539
of these cases what we try to do now is

00:23:03,929 --> 00:23:08,309
we try to do some of these decisions but

00:23:06,539 --> 00:23:10,230
also give these decisions make them

00:23:08,309 --> 00:23:13,679
customizable so users can change them

00:23:10,230 --> 00:23:16,379
again and customize them localize them

00:23:13,679 --> 00:23:20,009
to their own user base this is where I

00:23:16,379 --> 00:23:23,519
was reminisce right now okay thanks you

00:23:20,009 --> 00:23:25,440
can try it out today go to map project

00:23:23,519 --> 00:23:27,000
or am not org you can play around with

00:23:25,440 --> 00:23:30,450
it you can see your destination signs

00:23:27,000 --> 00:23:33,149
and your lanes that you mapped if you

00:23:30,450 --> 00:23:35,070
are interested in in-car navigation OS

00:23:33,149 --> 00:23:37,039
RAM is right for you you can bring your

00:23:35,070 --> 00:23:40,580
own speeds if you run it yourself and

00:23:37,039 --> 00:23:43,590
I'm here talk to me

00:23:40,580 --> 00:23:45,139
two things more to pluck one on Sunday

00:23:43,590 --> 00:23:48,419
there's going to be sorry

00:23:45,139 --> 00:23:51,509
on Sunday there's going to be a a

00:23:48,419 --> 00:23:53,460
workshop for making our OpenStreetMap

00:23:51,509 --> 00:23:57,960
Navigation ready which is going to go

00:23:53,460 --> 00:24:00,419
into more depth with lanes and with with

00:23:57,960 --> 00:24:01,679
destinations and turn restrictions and

00:24:00,419 --> 00:24:03,750
the other thing is I would like to

00:24:01,679 --> 00:24:06,000
organize the birds of every session

00:24:03,750 --> 00:24:07,620
tomorrow if somebody's entry or people

00:24:06,000 --> 00:24:12,019
are interested in navigation let's let's

00:24:07,620 --> 00:24:12,019
do that together okay thank you

00:24:16,970 --> 00:24:21,090
all right awesome super interesting

00:24:19,290 --> 00:24:24,150
combination of some high-tech algorithms

00:24:21,090 --> 00:24:27,240
and some core user experience here any

00:24:24,150 --> 00:24:30,330
questions for Johann or os Roman general

00:24:27,240 --> 00:24:41,280
can we pause the mic around please mic

00:24:30,330 --> 00:24:46,230
men thank you how do you handle historic

00:24:41,280 --> 00:24:53,520
data with different IDs than the current

00:24:46,230 --> 00:24:59,070
OSM network has um we don't we process

00:24:53,520 --> 00:25:01,980
often enough so that the state IDs are

00:24:59,070 --> 00:25:04,140
not a problem because I was asking

00:25:01,980 --> 00:25:07,500
because if I have my own historic data

00:25:04,140 --> 00:25:09,720
set how do I know feed it to us so

00:25:07,500 --> 00:25:12,840
basically what you have to do is you

00:25:09,720 --> 00:25:14,730
have to know so when you when you get

00:25:12,840 --> 00:25:18,930
your data usually you have either

00:25:14,730 --> 00:25:20,820
already IDs to it if you like buy it

00:25:18,930 --> 00:25:22,560
from another vendor you could for

00:25:20,820 --> 00:25:24,600
example have osm IDs already in there

00:25:22,560 --> 00:25:27,020
then it's fairly easy because the IDS

00:25:24,600 --> 00:25:30,260
are already there but you're gonna have

00:25:27,020 --> 00:25:33,720
ID rot over time basically like as

00:25:30,260 --> 00:25:36,690
OpenStreetMap changes IDs notes get

00:25:33,720 --> 00:25:38,640
removed new notes are added geographies

00:25:36,690 --> 00:25:40,290
change all of these things so you're

00:25:38,640 --> 00:25:42,420
going to potentially get wrong results

00:25:40,290 --> 00:25:44,100
if you stay with the base map that you

00:25:42,420 --> 00:25:47,040
used so the extract at a certain point

00:25:44,100 --> 00:25:51,050
when the speech data was generated then

00:25:47,040 --> 00:25:54,450
it's not a problem if you want to update

00:25:51,050 --> 00:25:57,480
that data you basically need to have

00:25:54,450 --> 00:26:00,150
your speed data in a format that is geo

00:25:57,480 --> 00:26:01,470
referential so for example what you

00:26:00,150 --> 00:26:04,490
would do is you would save the

00:26:01,470 --> 00:26:06,950
geometries one format that is very

00:26:04,490 --> 00:26:09,690
widely used in industry is open alar

00:26:06,950 --> 00:26:11,880
which does which basically is like a

00:26:09,690 --> 00:26:13,410
very compressed geometry and you have to

00:26:11,880 --> 00:26:15,330
map match that to the roads network

00:26:13,410 --> 00:26:17,880
where you want to apply the speeds you

00:26:15,330 --> 00:26:21,260
would have to do this every time that

00:26:17,880 --> 00:26:21,260
you want to update your base map

00:26:23,049 --> 00:26:30,769
the new evolution takes it to record

00:26:26,989 --> 00:26:34,909
data what about real time data if you

00:26:30,769 --> 00:26:36,919
add a source of traffic jam advanced and

00:26:34,909 --> 00:26:41,089
thing like that I'm reading such a

00:26:36,919 --> 00:26:44,690
source open I have there's a session

00:26:41,089 --> 00:26:47,269
tomorrow out that do you have a way to

00:26:44,690 --> 00:26:49,519
use it for the moment or is it something

00:26:47,269 --> 00:26:52,279
you plan but you have not implemented

00:26:49,519 --> 00:26:54,859
because you have no source or data so

00:26:52,279 --> 00:26:59,149
what we don't have is we cannot directly

00:26:54,859 --> 00:27:00,079
ingest incident data excellent data what

00:26:59,149 --> 00:27:02,859
you would have to do is you would have

00:27:00,079 --> 00:27:05,299
to apply that basically before when you

00:27:02,859 --> 00:27:07,699
compile the speed data that you have and

00:27:05,299 --> 00:27:09,139
then feed that into our room afterwards

00:27:07,699 --> 00:27:13,339
so it's basically a pre-processing step

00:27:09,139 --> 00:27:16,269
to the routing itself we currently don't

00:27:13,339 --> 00:27:19,879
have any open source components on that

00:27:16,269 --> 00:27:24,579
we can share because the problem is that

00:27:19,879 --> 00:27:26,719
you have to update your your graph but

00:27:24,579 --> 00:27:32,269
it's something you are not doing

00:27:26,719 --> 00:27:35,949
real-time so do you have any idea of how

00:27:32,269 --> 00:27:41,629
to improve or a ceramic if you add such

00:27:35,949 --> 00:27:43,190
that I suppose to so our M is using an

00:27:41,629 --> 00:27:45,979
algorithm called contraction hierarchies

00:27:43,190 --> 00:27:47,389
which needs pre-processing before as I

00:27:45,979 --> 00:27:51,199
already mentioned pre-processing can

00:27:47,389 --> 00:27:54,079
take quite a long time we build a lot of

00:27:51,199 --> 00:27:57,409
ways to make pre-processing really fast

00:27:54,079 --> 00:28:00,259
and internally we are down to like

00:27:57,409 --> 00:28:02,059
single-digit minutes now for certain

00:28:00,259 --> 00:28:04,699
geographical areas where we want to be

00:28:02,059 --> 00:28:07,369
fast so this is how we speed it up and

00:28:04,699 --> 00:28:09,259
in that way like real time like what

00:28:07,369 --> 00:28:11,029
does real time mean it means that it's

00:28:09,259 --> 00:28:13,519
okay if the result is within a certain

00:28:11,029 --> 00:28:15,559
bound so you have to define what's the

00:28:13,519 --> 00:28:17,269
bound is the bound like ten minutes or

00:28:15,559 --> 00:28:19,549
is it five minutes or is it one second

00:28:17,269 --> 00:28:21,799
if it's within minutes we can deal with

00:28:19,549 --> 00:28:25,399
it by pre-processing really fast and

00:28:21,799 --> 00:28:27,139
loading it into memory fast the the

00:28:25,399 --> 00:28:30,019
downside of using attraction arrow keys

00:28:27,139 --> 00:28:32,119
is that you cannot update the graph once

00:28:30,019 --> 00:28:35,330
it's created because mathematically it

00:28:32,119 --> 00:28:37,489
will not return correct results anymore

00:28:35,330 --> 00:28:38,989
right we have time for one more short

00:28:37,489 --> 00:28:42,409
questions I'm just going to ask if the

00:28:38,989 --> 00:28:43,639
next speaker is present just a second

00:28:42,409 --> 00:28:44,659
I'm just going to check first if the

00:28:43,639 --> 00:28:46,220
next speaker is present yeah could you

00:28:44,659 --> 00:28:48,320
get yourself set up place with our

00:28:46,220 --> 00:28:51,980
technical assistance awesome perfect

00:28:48,320 --> 00:28:54,049
okay go ahead yeah the question is do we

00:28:51,980 --> 00:29:01,639
have alternative routes we have one

00:28:54,049 --> 00:29:03,159
alternative route yes sometimes okay in

00:29:01,639 --> 00:29:07,389
the interest of time I'm going to

00:29:03,159 --> 00:29:07,389

YouTube URL: https://www.youtube.com/watch?v=NzrxxVl5idQ


