Title: 2019: Broken Promises and Technical Difficulties
Publication date: 2019-09-28
Playlist: SotM 2019, Day 2, Großer Hörsaal
Description: 
	Our data model is impractical. You know that. Even OGC Simple Features are better. Changesets and versions promised easier reverting — is it simple yet? We have added a lot of features to API 0.6 over the past ten years, but should we have? Let's see what went wrong and what we can improve.

People often come to me saying, changesets with huge bounding boxes are impossible to validate. Come on. You know changesets were not meant to group edits by any criteria. Developers look at the data model and derive user experience from it — and it obviously does not work. Every instance of OSM data needs to be preprocessed, converted, filtered, layered, postprocessed and thrown away. We need to stop looking at OSM as a database and start treating it like a map.

In this talk I will highlight what's wrong with the current state of API, including both the actual REST API and the server side. Things like topology, notes, GPX traces and stuff: they were coded when the project was small, but the model starts to show its age — and few people know what to do, besides adding more mappers. How come Overpass API became the better API, and what can we learn from it?

Changesets should be abandoned by user-facing tools: let's imagine how the mapping, the validation, the undoing of changes would work if we didn't rely on changesets or actually anything API provides. Can we do something to improve data quality right now? Or can we work towards API 0.7, that would help keep the map not only the most complete, but also the most recent? Let's take a step back and imagine how OpenStreetMap should have been working, to make it more fun to work with, while keeping its versatility and simplicity.

I have been involved in a couple API 0.7 discussions, made a few tagging proposals and wrote an editor and a change rollback script. That doesn't make me an expert — there are no experts in OpenStreetMap — but it gave me some ideas on how things could be better. Maybe together we will have a clearer path towards the better OpenStreetMap.

Ilya Zverev

https://pretalx.com/sotm2019/talk/V7NUWP/
Captions: 
	00:00:07,759 --> 00:00:14,070
and this video we're gonna go from a

00:00:10,250 --> 00:00:17,460
creaky data model to

00:00:14,070 --> 00:00:22,320
to breakthrough promises and technical

00:00:17,460 --> 00:00:26,060
difficulties yeah hopefully not just

00:00:22,320 --> 00:00:26,060
about the model critique

00:00:32,180 --> 00:00:37,630
you're not having technical difficulties

00:00:34,550 --> 00:00:37,630
with the slides are you

00:00:54,640 --> 00:01:18,790
give it man like does for your cotillion

00:01:00,300 --> 00:01:24,130
so the storage hello everyone again yes

00:01:18,790 --> 00:01:26,830
there and basically all I want from

00:01:24,130 --> 00:01:30,460
opposite map now is to follow edits

00:01:26,830 --> 00:01:34,900
around me and have a means to revert

00:01:30,460 --> 00:01:37,690
them it's not it doesn't seem like a

00:01:34,900 --> 00:01:41,860
hard task to do we already as riveting

00:01:37,690 --> 00:01:44,740
tools and but it doesn't seem quite

00:01:41,860 --> 00:01:47,410
simple now like how many of you are

00:01:44,740 --> 00:01:54,630
comfortable reader team changed sense

00:01:47,410 --> 00:01:59,409
now most today's working group right

00:01:54,630 --> 00:02:03,130
so the scene is API point six ten years

00:01:59,409 --> 00:02:08,440
ago was made part of there with sort of

00:02:03,130 --> 00:02:13,030
making reverting things easy but I don't

00:02:08,440 --> 00:02:16,630
think it is very it so maybe we can

00:02:13,030 --> 00:02:19,450
somehow improve things too because we

00:02:16,630 --> 00:02:21,760
reverse really need it down not by just

00:02:19,450 --> 00:02:25,140
individual mappers but by companies

00:02:21,760 --> 00:02:27,160
because opposites map is used by so many

00:02:25,140 --> 00:02:30,130
companies and people around the world

00:02:27,160 --> 00:02:34,239
and we need to follow the math more

00:02:30,130 --> 00:02:38,590
closely so how do you do that how do we

00:02:34,239 --> 00:02:42,220
do how do we make reverbs and monitoring

00:02:38,590 --> 00:02:46,260
changes easier the first thing that

00:02:42,220 --> 00:02:50,340
comes to mind is changing our API and

00:02:46,260 --> 00:02:56,290
API is basically two things in one

00:02:50,340 --> 00:02:59,320
the first one being a data model you

00:02:56,290 --> 00:03:00,940
know notes waste relation tags that's

00:02:59,320 --> 00:03:03,430
our data model

00:03:00,940 --> 00:03:07,630
it has been there since the beginning

00:03:03,430 --> 00:03:11,050
the project I guess and people often

00:03:07,630 --> 00:03:15,730
think about what would we want for the

00:03:11,050 --> 00:03:18,970
next API like why what the reason is for

00:03:15,730 --> 00:03:24,070
a paper in seven this is not that talk I

00:03:18,970 --> 00:03:26,910
hope on some of these things like the

00:03:24,070 --> 00:03:30,100
common things that people list are

00:03:26,910 --> 00:03:32,350
pretty simple from an outsider's point

00:03:30,100 --> 00:03:35,170
of view like arias locations of ways

00:03:32,350 --> 00:03:38,290
these are things that would simplify a

00:03:35,170 --> 00:03:45,460
lot working with our data for data

00:03:38,290 --> 00:03:49,510
consumers finish these suggestions look

00:03:45,460 --> 00:03:54,100
right like we need to make our data

00:03:49,510 --> 00:03:56,950
model simpler closer to disease simple

00:03:54,100 --> 00:04:01,990
features like there are polygons while

00:03:56,950 --> 00:04:04,600
strings all self-contained it would be

00:04:01,990 --> 00:04:09,820
so simple to process them because every

00:04:04,600 --> 00:04:13,960
other tools uses simple features but

00:04:09,820 --> 00:04:17,530
that doesn't account for what we already

00:04:13,960 --> 00:04:20,049
have we don't actually need simplify

00:04:17,530 --> 00:04:23,650
because thing we do have now they

00:04:20,049 --> 00:04:26,440
already work we know how to tell closed

00:04:23,650 --> 00:04:28,900
waste from polygons we can build with

00:04:26,440 --> 00:04:31,390
polygons from data we have and thanks to

00:04:28,900 --> 00:04:35,140
your hand well we now have a single

00:04:31,390 --> 00:04:37,210
working model for multi polygons yes it

00:04:35,140 --> 00:04:40,930
takes quite a lot of memory to do that

00:04:37,210 --> 00:04:43,630
but I won't say there are things that

00:04:40,930 --> 00:04:48,730
are not possible without turning to

00:04:43,630 --> 00:04:52,480
simple features we need to think more

00:04:48,730 --> 00:04:52,990
about what we have opposite model is

00:04:52,480 --> 00:04:57,760
different

00:04:52,990 --> 00:05:00,520
we need to underline its change to make

00:04:57,760 --> 00:05:02,740
better use for what we already have like

00:05:00,520 --> 00:05:04,690
in the data model in our data model

00:05:02,740 --> 00:05:06,850
everything is connected to everything

00:05:04,690 --> 00:05:09,070
you know like nodes connected to waste

00:05:06,850 --> 00:05:10,360
everything's calculations and the whole

00:05:09,070 --> 00:05:14,710
data model

00:05:10,360 --> 00:05:18,250
this one big bowl of geodata it is hard

00:05:14,710 --> 00:05:19,409
to untangle but it allows us to do stuff

00:05:18,250 --> 00:05:28,180
better

00:05:19,409 --> 00:05:32,620
no other data model could allow so we

00:05:28,180 --> 00:05:35,830
can undo lie strain by improving our

00:05:32,620 --> 00:05:39,939
data model in ways that makes it easier

00:05:35,830 --> 00:05:43,300
to use example like enforcing references

00:05:39,939 --> 00:05:46,509
right now would have ways to trans nodes

00:05:43,300 --> 00:05:50,289
but we also can we should make notes

00:05:46,509 --> 00:05:52,949
references way so we should solve a lot

00:05:50,289 --> 00:05:55,900
of issues like incomplete downloads like

00:05:52,949 --> 00:05:59,199
conflicts from everything well what of

00:05:55,900 --> 00:06:02,469
this this is just an example of change

00:05:59,199 --> 00:06:04,870
but since we have things connected to

00:06:02,469 --> 00:06:10,990
each other why not make that connection

00:06:04,870 --> 00:06:16,240
obvious explicit and then object

00:06:10,990 --> 00:06:21,159
versions they obviously don't work like

00:06:16,240 --> 00:06:24,729
your control you must here like for

00:06:21,159 --> 00:06:28,449
example a way a part of a road can

00:06:24,729 --> 00:06:30,969
change its geometry many times between

00:06:28,449 --> 00:06:35,770
inside a single version because when a

00:06:30,969 --> 00:06:38,289
node a wave is moved the way stays the

00:06:35,770 --> 00:06:42,039
same with the same version and that

00:06:38,289 --> 00:06:45,599
makes reverting very tedious because you

00:06:42,039 --> 00:06:49,719
don't use versions for that suddenly you

00:06:45,599 --> 00:06:53,940
find yourself using timestamps and that

00:06:49,719 --> 00:06:58,779
by versions don't help anything at all

00:06:53,940 --> 00:07:01,870
so we also complete this that from the

00:06:58,779 --> 00:07:05,710
data model like make things explicit

00:07:01,870 --> 00:07:08,620
like on each geometry change increase

00:07:05,710 --> 00:07:11,259
way version number or something

00:07:08,620 --> 00:07:16,509
reference notes with complete versions

00:07:11,259 --> 00:07:18,600
concrete versions so these are examples

00:07:16,509 --> 00:07:25,490
of things that we can do too

00:07:18,600 --> 00:07:25,490
and force our specialty as day tomorrow

00:07:25,670 --> 00:07:36,210
but then nobody has yet changed it as

00:07:31,290 --> 00:07:38,880
your cylinder quite obvious reason for

00:07:36,210 --> 00:07:41,640
that because it is pretty hard

00:07:38,880 --> 00:07:44,370
it was held last time like ten years ago

00:07:41,640 --> 00:07:46,550
it wasn't just a single person who made

00:07:44,370 --> 00:07:49,770
all the work it was like a dozen people

00:07:46,550 --> 00:07:51,360
working for half a year most of them

00:07:49,770 --> 00:07:54,320
were paid to do it

00:07:51,360 --> 00:07:59,490
and this was all this big giant effort

00:07:54,320 --> 00:08:03,770
to do any favors and it won't be easier

00:07:59,490 --> 00:08:09,810
the next time it will be even harder

00:08:03,770 --> 00:08:15,300
because since because just finding

00:08:09,810 --> 00:08:18,770
people who know how to touch CGI map ID

00:08:15,300 --> 00:08:22,670
Joe some rails port or Center to G scale

00:08:18,770 --> 00:08:25,830
how to implement stuff in veins is hard

00:08:22,670 --> 00:08:28,200
when developers is not happy it will

00:08:25,830 --> 00:08:30,960
take like hundred thousand euros or

00:08:28,200 --> 00:08:36,750
special kind of money this conference is

00:08:30,960 --> 00:08:40,200
not much cheaper but then if you find

00:08:36,750 --> 00:08:43,380
developers then you have to plan all the

00:08:40,200 --> 00:08:45,660
thing and I believe most of you have the

00:08:43,380 --> 00:08:47,870
idea what to do for it people in point

00:08:45,660 --> 00:08:50,730
seven and these are different ideas

00:08:47,870 --> 00:08:55,230
making a coherent plan out of that is

00:08:50,730 --> 00:08:58,590
hard and then people who in opposition

00:08:55,230 --> 00:09:01,080
of 10-15 years ago are still there the

00:08:58,590 --> 00:09:04,380
maintain our infrastructure and the know

00:09:01,080 --> 00:09:09,440
the most important thing in engineering

00:09:04,380 --> 00:09:11,790
is that if it does work don't change it

00:09:09,440 --> 00:09:13,830
most of them are pretty content is what

00:09:11,790 --> 00:09:17,190
you have now and partly the changes

00:09:13,830 --> 00:09:20,670
through them might be quite hard so we

00:09:17,190 --> 00:09:24,660
might look for other ways look at the

00:09:20,670 --> 00:09:27,999
API not as data model but this interface

00:09:24,660 --> 00:09:31,060
in the past ten years since we have a

00:09:27,999 --> 00:09:37,230
pair zero six a lot has changed in the

00:09:31,060 --> 00:09:37,230
API we got changed at discussions mounts

00:09:37,680 --> 00:09:43,600
reductions moderation cure many other

00:09:40,870 --> 00:09:46,420
changes that was all edit result

00:09:43,600 --> 00:09:48,639
increasing API number and if you look at

00:09:46,420 --> 00:09:53,319
these things are they're built inside

00:09:48,639 --> 00:09:54,189
the API is very messy with different

00:09:53,319 --> 00:09:55,959
formats

00:09:54,189 --> 00:09:58,660
especially opposite map nodes you can

00:09:55,959 --> 00:10:02,439
ask Andy he has a lot of stories about

00:09:58,660 --> 00:10:05,410
that and that's a good thing that means

00:10:02,439 --> 00:10:08,050
that you don't have to make a new

00:10:05,410 --> 00:10:11,649
interfaces perfect to that for them to

00:10:08,050 --> 00:10:15,160
be accepted into the core we just have

00:10:11,649 --> 00:10:17,290
to make them work so what can we do to

00:10:15,160 --> 00:10:21,309
simplify reverting staff and monitoring

00:10:17,290 --> 00:10:24,249
changes pretty obvious things some of

00:10:21,309 --> 00:10:28,899
them are already there like finding

00:10:24,249 --> 00:10:31,449
deleted objects publish could do it and

00:10:28,899 --> 00:10:33,610
now we can us now to undelete a single

00:10:31,449 --> 00:10:38,139
way we'd have to make like a thousand

00:10:33,610 --> 00:10:40,689
requests to SM API for a full history it

00:10:38,139 --> 00:10:43,120
should be so it should be rest couple

00:10:40,689 --> 00:10:48,639
requests it's almost impossible to find

00:10:43,120 --> 00:10:53,139
what's been deleted now and the history

00:10:48,639 --> 00:10:56,160
should be more accessible now we get on

00:10:53,139 --> 00:11:01,209
the latest versions of everything and

00:10:56,160 --> 00:11:04,629
it's how to query the history of complex

00:11:01,209 --> 00:11:06,939
objects waste relations with for the

00:11:04,629 --> 00:11:09,009
previous states because again versions

00:11:06,939 --> 00:11:12,129
don't work there has to be time stamped

00:11:09,009 --> 00:11:15,250
and we need to get the whole tree of

00:11:12,129 --> 00:11:18,309
changes and it's hard but the data is

00:11:15,250 --> 00:11:21,009
still in the database this interfaces

00:11:18,309 --> 00:11:24,759
adjusting means to access the database

00:11:21,009 --> 00:11:27,970
of OpenStreetMap and we can get the data

00:11:24,759 --> 00:11:29,490
we can write a scale where is to get the

00:11:27,970 --> 00:11:33,160
data provide them to user

00:11:29,490 --> 00:11:34,190
it might be hard but it's doable we can

00:11:33,160 --> 00:11:36,949
get

00:11:34,190 --> 00:11:43,699
history for region we can have better

00:11:36,949 --> 00:11:45,949
history on the awesome website and there

00:11:43,699 --> 00:11:47,720
to make your voting easier because when

00:11:45,949 --> 00:11:50,389
I have history you can reward to any

00:11:47,720 --> 00:11:52,399
point of the history and partly this was

00:11:50,389 --> 00:11:56,149
mentioned in the proposal for a pipeline

00:11:52,399 --> 00:11:59,089
six that with that we can make ends

00:11:56,149 --> 00:12:01,220
point from simple reverse just passes

00:11:59,089 --> 00:12:03,490
change that number to the API and get

00:12:01,220 --> 00:12:06,980
the news in September but from it and

00:12:03,490 --> 00:12:11,290
there to make four buttons like in

00:12:06,980 --> 00:12:13,550
Wikipedia with difference and I'm doing

00:12:11,290 --> 00:12:18,290
like on the website it will be so simple

00:12:13,550 --> 00:12:21,589
and while we're at it we can also add a

00:12:18,290 --> 00:12:26,240
st. rebuttal shell with all the work

00:12:21,589 --> 00:12:30,589
which I would like very much but again

00:12:26,240 --> 00:12:34,579
that is also hard you have to know real

00:12:30,589 --> 00:12:37,790
sport you have to pass with people who

00:12:34,579 --> 00:12:42,350
watch over API and why not just know the

00:12:37,790 --> 00:12:47,149
third way don't touch real sport or API

00:12:42,350 --> 00:12:49,970
at all like thanks to nd changing it I

00:12:47,149 --> 00:12:52,759
would be much simpler in Fisher but

00:12:49,970 --> 00:12:57,160
currently if you want something done

00:12:52,759 --> 00:13:00,709
like for example downloading a large

00:12:57,160 --> 00:13:03,769
batch of data which currently pair

00:13:00,709 --> 00:13:06,410
doesn't allow you you have to make

00:13:03,769 --> 00:13:10,880
something yourself like download whole

00:13:06,410 --> 00:13:13,149
data whole planet to a server and write

00:13:10,880 --> 00:13:18,709
anything you like in a language like

00:13:13,149 --> 00:13:22,009
with all the API methods he won't like

00:13:18,709 --> 00:13:26,350
to that allows you to filter data by

00:13:22,009 --> 00:13:29,569
tags or download entire countries

00:13:26,350 --> 00:13:33,680
basically that's what Roland author of

00:13:29,569 --> 00:13:38,389
the overpass API did he have made

00:13:33,680 --> 00:13:42,199
overpass API to cover the drawbacks of

00:13:38,389 --> 00:13:44,800
Yosemite and it evolved since then now

00:13:42,199 --> 00:13:48,040
it's always big to with it

00:13:44,800 --> 00:13:51,070
somewhere language that you have to

00:13:48,040 --> 00:13:53,680
study and that can do different things

00:13:51,070 --> 00:13:58,300
and squaring like calculation statistics

00:13:53,680 --> 00:14:03,220
and producing even augmented difference

00:13:58,300 --> 00:14:05,740
files for changes inside region which

00:14:03,220 --> 00:14:10,510
almost solves the issue of change set

00:14:05,740 --> 00:14:15,250
mandatory and some tools like Accenture

00:14:10,510 --> 00:14:17,890
by really uses our paths to quell our

00:14:15,250 --> 00:14:20,649
changes because when you get janitors

00:14:17,890 --> 00:14:23,880
then you can look a change set and see

00:14:20,649 --> 00:14:27,850
with your eyes what has been changed

00:14:23,880 --> 00:14:30,339
that looks pretty well I believe me some

00:14:27,850 --> 00:14:33,820
of you have tried the same chai and it

00:14:30,339 --> 00:14:37,899
looks amazing it goes great filtering a

00:14:33,820 --> 00:14:43,200
song but still it has got its drawbacks

00:14:37,899 --> 00:14:46,720
like I sometimes get arguments

00:14:43,200 --> 00:14:50,020
complaints from my or same strict to a

00:14:46,720 --> 00:14:52,690
tool that helps users map everyday it

00:14:50,020 --> 00:14:56,520
has method suggestions and one of them

00:14:52,690 --> 00:14:59,200
is to draw something in child and

00:14:56,520 --> 00:15:00,670
announce something in come chat and the

00:14:59,200 --> 00:15:07,589
resulting changed it covers the whole

00:15:00,670 --> 00:15:11,260
world and that suggestion shows issues

00:15:07,589 --> 00:15:11,860
our changes and it gets quite a lot of

00:15:11,260 --> 00:15:18,670
complaints

00:15:11,860 --> 00:15:22,860
why does get it because we've got to

00:15:18,670 --> 00:15:26,829
data model knows waste in relations and

00:15:22,860 --> 00:15:30,880
like language sometimes defines the

00:15:26,829 --> 00:15:33,459
world view our data model defines again

00:15:30,880 --> 00:15:36,190
how you see the world like I look at the

00:15:33,459 --> 00:15:40,440
street and I see those four trees waste

00:15:36,190 --> 00:15:49,990
for roads and relations for bus roads

00:15:40,440 --> 00:15:52,690
it's the same for our tools yeah and if

00:15:49,990 --> 00:15:54,819
we had different data model like around

00:15:52,690 --> 00:15:57,129
API planned three with

00:15:54,819 --> 00:15:59,139
from segments which connected to points

00:15:57,129 --> 00:16:04,329
to ways which connected love lots of

00:15:59,139 --> 00:16:08,229
points and if we still have that erode

00:16:04,329 --> 00:16:11,259
not just a very long way but a set of

00:16:08,229 --> 00:16:13,449
segments you won't have a frustration

00:16:11,259 --> 00:16:19,989
splitting roads because they will be

00:16:13,449 --> 00:16:22,209
also played by default and I believe we

00:16:19,989 --> 00:16:24,459
won't have interpretation of tags like

00:16:22,209 --> 00:16:27,399
name and highway class they will go on

00:16:24,459 --> 00:16:30,519
relations so the roles will become not

00:16:27,399 --> 00:16:33,720
this thing with lots of attributes but a

00:16:30,519 --> 00:16:36,160
physical thing in relation to carry

00:16:33,720 --> 00:16:38,949
virtual attributes of the road and our

00:16:36,160 --> 00:16:41,199
view of the world will be different

00:16:38,949 --> 00:16:47,019
because we will split in our minds like

00:16:41,199 --> 00:16:52,119
things to physical and virtual and your

00:16:47,019 --> 00:16:54,999
tools are defined by API and in regards

00:16:52,119 --> 00:16:57,369
form winterim changes overpass is

00:16:54,999 --> 00:17:02,319
defined and or such an undefined might

00:16:57,369 --> 00:17:06,279
change set IDs like to get this big

00:17:02,319 --> 00:17:09,220
change set this just a few changes or

00:17:06,279 --> 00:17:12,879
Sanchez has to download all the changes

00:17:09,220 --> 00:17:15,850
in the world for an hour and then filter

00:17:12,879 --> 00:17:22,389
them by a number and you can see why

00:17:15,850 --> 00:17:25,839
that might be a problem so as versions

00:17:22,389 --> 00:17:29,879
change set do not help as much in

00:17:25,839 --> 00:17:32,139
monitoring interpreting change set so

00:17:29,879 --> 00:17:36,399
nobody should rely on them there are

00:17:32,139 --> 00:17:39,850
just arbitrary phase and group edits and

00:17:36,399 --> 00:17:40,690
nobody even regards change set is

00:17:39,850 --> 00:17:43,360
something meaningful

00:17:40,690 --> 00:17:46,659
some people just click Save after every

00:17:43,360 --> 00:17:49,840
edit like draw a building saved during

00:17:46,659 --> 00:17:51,549
autosave and this is also an issue for

00:17:49,840 --> 00:17:53,730
monitoring tools people complain about

00:17:51,549 --> 00:17:57,010
that

00:17:53,730 --> 00:17:59,560
when chase said don't work why don't we

00:17:57,010 --> 00:18:04,930
look at individual changes like smaller

00:17:59,560 --> 00:18:08,130
ones like we need to go to split all

00:18:04,930 --> 00:18:12,850
this to the smallest possible changes

00:18:08,130 --> 00:18:20,320
like move the load editor tag changed

00:18:12,850 --> 00:18:22,320
weight geometry and this split would

00:18:20,320 --> 00:18:25,660
allow us to do so much more because

00:18:22,320 --> 00:18:28,060
individual change like Idina tag can be

00:18:25,660 --> 00:18:32,050
easily reverted we know what was you

00:18:28,060 --> 00:18:42,370
know what is and these changes can be

00:18:32,050 --> 00:18:45,700
grouped not by arbitrary edit differs

00:18:42,370 --> 00:18:49,210
but for example we can group them by

00:18:45,700 --> 00:18:51,580
area changes in heidelberg group them by

00:18:49,210 --> 00:18:54,760
tram steps change the see yesterday in

00:18:51,580 --> 00:18:57,190
high work by user changes by frederik

00:18:54,760 --> 00:19:01,450
yesterday in hundred and by edit type

00:18:57,190 --> 00:19:08,530
like edit trees in calendar yesterday

00:19:01,450 --> 00:19:10,750
fill it and answer by grouping changes

00:19:08,530 --> 00:19:12,820
it becomes so easier to work with them

00:19:10,750 --> 00:19:14,260
it doesn't matter if a user has

00:19:12,820 --> 00:19:16,030
applauded as they have changed at the

00:19:14,260 --> 00:19:18,670
thousand buildings or thousand change

00:19:16,030 --> 00:19:21,730
that the single building each it doesn't

00:19:18,670 --> 00:19:24,540
matter they edited shell and I'm chapter

00:19:21,730 --> 00:19:27,970
and the single change set Oren to just

00:19:24,540 --> 00:19:30,220
look at individual changes and it was

00:19:27,970 --> 00:19:32,680
allow for human readable descriptions

00:19:30,220 --> 00:19:36,910
which was an experiment long ago but it

00:19:32,680 --> 00:19:41,140
did work some reason but it County human

00:19:36,910 --> 00:19:44,320
readable descriptions can be automated

00:19:41,140 --> 00:19:47,430
we don't need to rely on users to write

00:19:44,320 --> 00:19:47,430
what chinches is about

00:19:48,200 --> 00:19:57,019
like some time ago I wrote and maps me

00:19:52,369 --> 00:19:59,629
and ID's automatic change said

00:19:57,019 --> 00:20:03,289
commenting wife's me is very simple it

00:19:59,629 --> 00:20:05,299
can do it is like edit to shops updated

00:20:03,289 --> 00:20:07,429
to restaurant so change of comments

00:20:05,299 --> 00:20:10,129
described perfectly what was inside me

00:20:07,429 --> 00:20:12,559
changed said and I still was getting

00:20:10,129 --> 00:20:14,809
complaints that comments should not

00:20:12,559 --> 00:20:17,720
describe what's inside the change they

00:20:14,809 --> 00:20:19,929
should describe why a user has made this

00:20:17,720 --> 00:20:23,899
change

00:20:19,929 --> 00:20:26,139
why do you edit open street map I left

00:20:23,899 --> 00:20:29,929
this at the moment and I use it a

00:20:26,139 --> 00:20:33,440
sarcastic slide and some presentation

00:20:29,929 --> 00:20:42,669
but now I feel like they were onto

00:20:33,440 --> 00:20:45,980
something like why we can't have what

00:20:42,669 --> 00:20:52,489
using just algorithms by looking such a

00:20:45,980 --> 00:20:55,249
sir like you can group your theoretical

00:20:52,489 --> 00:20:58,850
atomic changes and see that it's not

00:20:55,249 --> 00:21:01,100
about inbox and edits doesn't notes and

00:20:58,850 --> 00:21:04,159
as some ways with these days you can

00:21:01,100 --> 00:21:06,950
have better human readable descriptions

00:21:04,159 --> 00:21:09,590
like edit to build using shell one bills

00:21:06,950 --> 00:21:12,859
against Kamchatka and change the comment

00:21:09,590 --> 00:21:16,309
why because I didn't ask or some strict

00:21:12,859 --> 00:21:18,049
ask and with these two strings you don't

00:21:16,309 --> 00:21:20,659
even have to look inside the change that

00:21:18,049 --> 00:21:23,480
you know what happened and by grouping

00:21:20,659 --> 00:21:25,100
by filtering you can have a cost of

00:21:23,480 --> 00:21:28,279
stream of changes that you can

00:21:25,100 --> 00:21:32,779
understand you don't have to put them on

00:21:28,279 --> 00:21:35,470
the map you that's what looking atomic

00:21:32,779 --> 00:21:35,470
changes can do

00:21:37,929 --> 00:21:48,530
so for this to work we need to stop

00:21:45,470 --> 00:21:50,420
considering the data model as one and

00:21:48,530 --> 00:21:52,850
all the tools we need to stop relying on

00:21:50,420 --> 00:21:56,320
things that are in the data model but

00:21:52,850 --> 00:22:01,450
don't work we can improve them via API

00:21:56,320 --> 00:22:06,040
data model the API as an interface but

00:22:01,450 --> 00:22:10,580
we need to work with the data now and

00:22:06,040 --> 00:22:13,610
for that we need to stop seeing Teresa's

00:22:10,580 --> 00:22:15,260
nodes roses ways and mascots relation

00:22:13,610 --> 00:22:19,669
but see things for what they really are

00:22:15,260 --> 00:22:22,640
like changes not as part of change sets

00:22:19,669 --> 00:22:28,160
not as versions but it's individual

00:22:22,640 --> 00:22:30,260
changes that for what we need to think

00:22:28,160 --> 00:22:32,419
beyond the data model and with that we

00:22:30,260 --> 00:22:36,100
need to make better tools that help

00:22:32,419 --> 00:22:39,190
people not just refresh the data model

00:22:36,100 --> 00:22:39,190
thank you

00:22:44,820 --> 00:22:54,630
thank you earlier sir questions

00:22:49,130 --> 00:22:56,880
beneath the vine that's coming behind

00:22:54,630 --> 00:23:00,810
you wait for the microphone and then the

00:22:56,880 --> 00:23:02,220
live stream can hear ya thanks a lot

00:23:00,810 --> 00:23:04,170
Elia that was that was great

00:23:02,220 --> 00:23:06,360
I know I loved a lot of the things the

00:23:04,170 --> 00:23:08,490
parent ID is just amazing I wish we

00:23:06,360 --> 00:23:11,880
could have that my question is a bit

00:23:08,490 --> 00:23:13,920
about the practically if you have any

00:23:11,880 --> 00:23:15,270
ideas of how one would do this arbitrary

00:23:13,920 --> 00:23:17,280
grouping I've always been uncomfortable

00:23:15,270 --> 00:23:19,170
with the idea of chains like grouping we

00:23:17,280 --> 00:23:20,310
were I worked on or some chai and this

00:23:19,170 --> 00:23:21,840
is something that always made me

00:23:20,310 --> 00:23:23,340
uncomfortable that why are we grouping

00:23:21,840 --> 00:23:26,340
by changesets it's completely arbitrary

00:23:23,340 --> 00:23:28,980
but it seemed also like the only

00:23:26,340 --> 00:23:30,960
practical way to do it because if you

00:23:28,980 --> 00:23:32,910
stored every atomic change in the

00:23:30,960 --> 00:23:35,100
database and allow the user to choose

00:23:32,910 --> 00:23:37,050
their own grouping it just became a

00:23:35,100 --> 00:23:38,910
heart it became a scale problem like

00:23:37,050 --> 00:23:42,060
what that can do we use that we can

00:23:38,910 --> 00:23:44,370
filter all these millions of changes and

00:23:42,060 --> 00:23:46,800
allow the user to do their own arbitrary

00:23:44,370 --> 00:23:48,480
cooping you have do you have any ideas

00:23:46,800 --> 00:23:51,090
of how one would actually design a

00:23:48,480 --> 00:23:55,560
back-end that would store each atomic

00:23:51,090 --> 00:23:57,150
change and then allow users to group in

00:23:55,560 --> 00:23:58,440
whatever they were way they want to

00:23:57,150 --> 00:24:00,480
group and not be forced into this

00:23:58,440 --> 00:24:06,030
arbitrary change that grouping that yeah

00:24:00,480 --> 00:24:10,080
if all right thanks for that I didn't

00:24:06,030 --> 00:24:12,720
get more celebration but I know for sure

00:24:10,080 --> 00:24:16,440
that while atomic change says sounds

00:24:12,720 --> 00:24:18,150
easier like moving things they will take

00:24:16,440 --> 00:24:22,290
a lot of storage and they will be very

00:24:18,150 --> 00:24:25,620
hard to implement because you have will

00:24:22,290 --> 00:24:28,650
have to think not in ways that are

00:24:25,620 --> 00:24:31,440
defined well that you are used to like

00:24:28,650 --> 00:24:37,170
notes you have to think what user wants

00:24:31,440 --> 00:24:40,320
not what data gives you and yeah it will

00:24:37,170 --> 00:24:43,740
take a lot of storage because we have an

00:24:40,320 --> 00:24:48,990
attention on that with openness my wish

00:24:43,740 --> 00:24:51,600
list my pulpit Rosa and well it's worked

00:24:48,990 --> 00:24:52,840
quite slow and it took a lot of space

00:24:51,600 --> 00:24:55,420
but

00:24:52,840 --> 00:24:58,810
these are technical problems technical

00:24:55,420 --> 00:25:01,450
issues are solvable it's people issues

00:24:58,810 --> 00:25:04,240
that are hard to solve and assessing our

00:25:01,450 --> 00:25:10,420
changes reversing them is more people

00:25:04,240 --> 00:25:17,220
issue very technical issue right by the

00:25:10,420 --> 00:25:20,560
microphone yep you know I was with

00:25:17,220 --> 00:25:22,800
atomic changes would have still be a way

00:25:20,560 --> 00:25:27,340
for users to indicate that several

00:25:22,800 --> 00:25:30,820
changes belong together in our unit like

00:25:27,340 --> 00:25:33,400
if you remove attack from one object and

00:25:30,820 --> 00:25:34,750
add it to another one and what you

00:25:33,400 --> 00:25:38,080
actually want to indicate that the tag

00:25:34,750 --> 00:25:45,370
moved to the other object and that is

00:25:38,080 --> 00:25:49,450
actually one operation yeah I agree that

00:25:45,370 --> 00:25:52,210
splitting changes into theoretical items

00:25:49,450 --> 00:25:56,590
is not easy because when you move a note

00:25:52,210 --> 00:25:57,610
it can result in multiple changes if I

00:25:56,590 --> 00:26:01,720
get its corrected

00:25:57,610 --> 00:26:04,120
like you can stop moving individual note

00:26:01,720 --> 00:26:06,070
like a traffic light and then change on

00:26:04,120 --> 00:26:13,570
the table one row change of another Road

00:26:06,070 --> 00:26:16,270
and also change text this may need to go

00:26:13,570 --> 00:26:20,410
in hand with other changes like version

00:26:16,270 --> 00:26:27,010
of stuff I do think about that all that

00:26:20,410 --> 00:26:29,840
deep I but well judges some experience

00:26:27,010 --> 00:26:32,240
we need to think about I don't have

00:26:29,840 --> 00:26:34,280
complete solutions if I have them then

00:26:32,240 --> 00:26:48,110
I'll just give you an oral to better

00:26:34,280 --> 00:26:51,650
divert oh yeah this guy I'm Vincent from

00:26:48,110 --> 00:26:56,059
Jason so I fully agree with everything

00:26:51,650 --> 00:26:58,070
you say but like you say the biggest

00:26:56,059 --> 00:27:01,610
program is not a technical program it's

00:26:58,070 --> 00:27:05,780
a people program the other thing is to

00:27:01,610 --> 00:27:10,640
get motivated people to do it and I

00:27:05,780 --> 00:27:13,039
think we can't be sure it will be

00:27:10,640 --> 00:27:16,490
entirely physical before we start

00:27:13,039 --> 00:27:19,190
actually coding it so did you talk about

00:27:16,490 --> 00:27:21,409
this to other people before this

00:27:19,190 --> 00:27:25,309
conference and did you find anyone

00:27:21,409 --> 00:27:31,600
motivated to stop a prototype and see if

00:27:25,309 --> 00:27:35,330
we can do something completely we don't

00:27:31,600 --> 00:27:38,030
we have some initial attempts of that

00:27:35,330 --> 00:27:41,570
like I have a tool called simple

00:27:38,030 --> 00:27:44,299
inverter which just passed number of

00:27:41,570 --> 00:27:46,990
changeset and it reverses without asking

00:27:44,299 --> 00:27:50,210
anything but it's very simple but it

00:27:46,990 --> 00:27:53,390
builds on some of the principles I'm

00:27:50,210 --> 00:27:55,340
talking about like it tries to split the

00:27:53,390 --> 00:27:57,950
change something to atomic changes and

00:27:55,340 --> 00:28:01,400
you wrote them but it's very raw it

00:27:57,950 --> 00:28:04,460
still depends on the data model I talked

00:28:01,400 --> 00:28:08,740
about this at few other conferences

00:28:04,460 --> 00:28:13,190
local ones like in Russia and stuff but

00:28:08,740 --> 00:28:18,400
yeah we would need people on board who

00:28:13,190 --> 00:28:21,260
we might be to planet or just dropped it

00:28:18,400 --> 00:28:22,760
this is the first time basic a speaking

00:28:21,260 --> 00:28:25,460
about it sorry international conference

00:28:22,760 --> 00:28:26,610
so I really hope this spark some ideas

00:28:25,460 --> 00:28:31,019
and some of you

00:28:26,610 --> 00:28:32,970
and maybe you can stop something or just

00:28:31,019 --> 00:28:35,730
contact me Vincent

00:28:32,970 --> 00:28:40,039
Quincey somebody who know some of these

00:28:35,730 --> 00:28:42,360
evolution and we can make something I

00:28:40,039 --> 00:28:51,059
think we'll just let this would be the

00:28:42,360 --> 00:28:55,370
last one down there Mike French is

00:28:51,059 --> 00:29:00,870
behind you thank you

00:28:55,370 --> 00:29:05,610
yeah sorry for that isn't it

00:29:00,870 --> 00:29:09,889
a tiny really bit misleading referring

00:29:05,610 --> 00:29:13,470
to the Wikipedia referred and if

00:29:09,889 --> 00:29:17,600
mechanism in the context frequency

00:29:13,470 --> 00:29:20,429
because the difficulty is not really

00:29:17,600 --> 00:29:21,539
reverting a change set that just

00:29:20,429 --> 00:29:24,210
happened

00:29:21,539 --> 00:29:27,389
it's reverting one which you notice

00:29:24,210 --> 00:29:28,620
offer you're down the road that it's

00:29:27,389 --> 00:29:31,950
broken

00:29:28,620 --> 00:29:34,950
and actually you have all the the

00:29:31,950 --> 00:29:36,510
related information of related changes

00:29:34,950 --> 00:29:39,330
which other people have made in the

00:29:36,510 --> 00:29:42,179
meantime and references to to the

00:29:39,330 --> 00:29:45,899
objects there which is what makes

00:29:42,179 --> 00:29:47,970
reverting really difficult in in OSF and

00:29:45,899 --> 00:29:50,130
Wikipedia that she doesn't have that

00:29:47,970 --> 00:29:53,510
because the articles themselves are

00:29:50,130 --> 00:29:56,870
largely self-contained

00:29:53,510 --> 00:30:00,330
yeah I agree the example was a bit

00:29:56,870 --> 00:30:03,149
simple things could be and unlike

00:30:00,330 --> 00:30:06,120
Wikipedia article site independence and

00:30:03,149 --> 00:30:10,230
it's easy to revert any change because

00:30:06,120 --> 00:30:14,460
the linear an opposite purpose again

00:30:10,230 --> 00:30:19,769
though intertwines massive ball of Geo

00:30:14,460 --> 00:30:23,000
data and reverting anything pulls all

00:30:19,769 --> 00:30:26,070
the data from although a system Sunday

00:30:23,000 --> 00:30:30,540
but again

00:30:26,070 --> 00:30:33,480
people who edit Wikipedia I guess I used

00:30:30,540 --> 00:30:36,630
to concept of merging like three very

00:30:33,480 --> 00:30:38,820
much when you as something or reverse

00:30:36,630 --> 00:30:42,840
something and something was added before

00:30:38,820 --> 00:30:45,720
so you just take the data from three

00:30:42,840 --> 00:30:47,910
sources and make another one and we

00:30:45,720 --> 00:30:52,679
don't have that you know posted map

00:30:47,910 --> 00:30:54,960
because we can have like the hundred way

00:30:52,679 --> 00:30:56,640
merge like it usually happens like

00:30:54,960 --> 00:30:58,860
hundred people change something and now

00:30:56,640 --> 00:31:02,610
you need to revert it and you don't know

00:30:58,860 --> 00:31:07,770
where to start but going to atomic

00:31:02,610 --> 00:31:10,970
changes means that for each change you

00:31:07,770 --> 00:31:13,710
have previous States next state and

00:31:10,970 --> 00:31:19,260
merges will be much simpler and that

00:31:13,710 --> 00:31:21,179
might help in averting it's like that

00:31:19,260 --> 00:31:23,660
that's what I use in my simple inverter

00:31:21,179 --> 00:31:28,140
it's basically a tool for favour merge

00:31:23,660 --> 00:31:31,110
all data new data and it can do really

00:31:28,140 --> 00:31:33,929
all Jamaat's if somebody edit a tag on a

00:31:31,110 --> 00:31:37,020
way and then people edit it this way

00:31:33,929 --> 00:31:42,120
around then it can just remove the tag

00:31:37,020 --> 00:31:45,240
and rivers will go quite well so we are

00:31:42,120 --> 00:31:51,000
going to atomic changes will simplify

00:31:45,240 --> 00:31:55,280
reverbs in that way I think those of

00:31:51,000 --> 00:31:55,280
cornetist successful thank you Elias

00:31:58,070 --> 00:32:00,130

YouTube URL: https://www.youtube.com/watch?v=aRcHLKbXlcM


