Title: 2019: Flexible Routing with GraphHopper
Publication date: 2019-09-28
Playlist: SotM 2019, Day 2, Großer Hörsaal
Description: 
	In this talk we try give an overview on how to use GraphHopper to provide a more flexible routing (based on weather information, road class, road width, ...) and how this could be also used for visualization purposes or data analysis.

In its first version 0.1 the open source GraphHopper routing engine was able to store just the distance and the car speed and access for every road. Since then many things have changed and improved in version 0.12 and beyond more data can be stored even without knowing Java or GraphHopper internals, but still the storage of those properties is done efficiently.

A world wide graph with some basic useful road properties like highway, toll, tunnel, bridge, ferry, width, height, surface, maxspeed and access fits into a routable graph of under 25GB, i.e. just 60% of the planet PBF. GraphHopper allows you to keep this either in memory if you need high speed or serve the graph from the hard drive (incl. cache) to keep the costs low or use your development laptop.

Developers and data analysts are enabled to store more features while preserving fast data access.  The advantage of the graph-based storage of GraphHopper over a usual database is that the road connectivity can be directly exploited. 

This is a work in progress and we'll show what is already possible to provide a more flexible routing, data analysis and in-browser visualization with Leaflet. E.g. for routing purposes so called "what if" scenarios can be done to show the impact of a bridge construction via isochrones or reachable areas and also potential problems for HGV vehicles can be outlined.

Peter Karich

https://pretalx.com/sotm2019/talk/P8AG7K/
Captions: 
	00:00:07,580 --> 00:00:10,990
welcome to my talk

00:00:15,520 --> 00:00:21,650
yeah I will talk about flexible routing

00:00:19,220 --> 00:00:24,710
in the first part of the talk and then I

00:00:21,650 --> 00:00:30,530
will come to the second part which is

00:00:24,710 --> 00:00:34,129
about data analysis with graphical I'm

00:00:30,530 --> 00:00:37,930
Peter and a physicists and problem solve

00:00:34,129 --> 00:00:43,460
and also the co-founder of Rafa poor

00:00:37,930 --> 00:00:45,920
company what we are doing as a company

00:00:43,460 --> 00:00:50,300
is to build the routing stack of the

00:00:45,920 --> 00:00:52,479
future so with lots of open source

00:00:50,300 --> 00:00:55,670
software and utilizing open data

00:00:52,479 --> 00:01:00,500
OpenStreetMap GTFS and of course also

00:00:55,670 --> 00:01:06,830
earning money and to also invest this in

00:01:00,500 --> 00:01:09,530
our software and community for people

00:01:06,830 --> 00:01:16,690
that don't know graph opera the easiest

00:01:09,530 --> 00:01:16,690
thing is to show them our website

00:01:23,299 --> 00:01:26,170
I come

00:01:35,860 --> 00:01:38,989
[Music]

00:01:44,530 --> 00:02:04,170
so here we are and let's go from

00:01:49,140 --> 00:02:04,170
Heidelberg oops I found writing back

00:02:15,599 --> 00:02:25,140
oh come on it's not starting where today

00:02:19,049 --> 00:02:26,879
and let's go back to your slide it's not

00:02:25,140 --> 00:02:29,750
a tech event if there isn't technical

00:02:26,879 --> 00:02:29,750
things that happen

00:02:36,140 --> 00:02:41,090
I think the wi-fi's

00:02:49,030 --> 00:02:56,790
so that's what I want I want to just

00:02:51,430 --> 00:03:01,930
know so going from railway station by

00:02:56,790 --> 00:03:04,180
walking to the University and you know

00:03:01,930 --> 00:03:08,380
what you can see is an elevation profile

00:03:04,180 --> 00:03:10,930
beyond left and right and Rococo is

00:03:08,380 --> 00:03:14,170
basically doing the routing so it prints

00:03:10,930 --> 00:03:17,620
the geometry the instructions elevation

00:03:14,170 --> 00:03:20,200
and everything else like the map tiles

00:03:17,620 --> 00:03:24,880
is coming from a different service so it

00:03:20,200 --> 00:03:27,190
can also pick different views for the

00:03:24,880 --> 00:03:31,410
map that's not coming from graphical and

00:03:27,190 --> 00:03:33,640
also the zero coding which converts the

00:03:31,410 --> 00:03:40,060
addresses and coordinates that's also

00:03:33,640 --> 00:03:42,990
not from graphical so really just the

00:03:40,060 --> 00:03:42,990
routing stuff

00:03:45,170 --> 00:03:51,959
and the routing engine is really an

00:03:50,010 --> 00:03:56,730
open-source project under the apache

00:03:51,959 --> 00:03:58,610
license and it's a java library but so

00:03:56,730 --> 00:04:03,680
it can be integrated in any java

00:03:58,610 --> 00:04:08,100
application and it's also web service

00:04:03,680 --> 00:04:10,950
which you can start on you so and yeah

00:04:08,100 --> 00:04:15,030
but again it's doesn't self maps or

00:04:10,950 --> 00:04:17,730
geocoding it's fast and memory efficient

00:04:15,030 --> 00:04:21,750
for what it does of course and it works

00:04:17,730 --> 00:04:24,930
with OpenStreetMap data GFS and others

00:04:21,750 --> 00:04:28,140
like TomTom or here maps and whatever

00:04:24,930 --> 00:04:30,480
and we have implemented some route we

00:04:28,140 --> 00:04:33,990
have implemented many routing algorithms

00:04:30,480 --> 00:04:36,450
like extra a-star landmarks contraction

00:04:33,990 --> 00:04:41,840
hierarchy and it works out of the box

00:04:36,450 --> 00:04:45,240
with a few travel modes like car bike

00:04:41,840 --> 00:04:51,120
walking public transit and motorcycle

00:04:45,240 --> 00:04:54,600
and so on there are many features and so

00:04:51,120 --> 00:04:58,010
what I listed it's not all there many

00:04:54,600 --> 00:05:01,530
more features that you can view on

00:04:58,010 --> 00:05:06,390
github.com slash graphical / graphic and

00:05:01,530 --> 00:05:11,430
I have selected just two new features

00:05:06,390 --> 00:05:18,539
that are specifically useful for data

00:05:11,430 --> 00:05:21,060
analysis for this talk the first new

00:05:18,539 --> 00:05:25,650
feature is the vector tiles endpoint

00:05:21,060 --> 00:05:28,830
which means that you can grab the data

00:05:25,650 --> 00:05:31,910
that is in graphic or and display it

00:05:28,830 --> 00:05:35,300
right into the browser to

00:05:31,910 --> 00:05:38,330
yeah to debug the routing algorithm or

00:05:35,300 --> 00:05:42,800
just to see what's in there or even yeah

00:05:38,330 --> 00:05:47,090
use it for other data analysis tasks and

00:05:42,800 --> 00:05:48,650
then I will show you today mm-hmm a

00:05:47,090 --> 00:05:50,450
similar feature is the shortest path

00:05:48,650 --> 00:05:57,110
tree endpoint

00:05:50,450 --> 00:06:00,950
so what's a shortest path tree its yeah

00:05:57,110 --> 00:06:03,950
the kind of the structure that you get

00:06:00,950 --> 00:06:07,730
if you explore a graph from a starting

00:06:03,950 --> 00:06:12,140
point and then the this end point will

00:06:07,730 --> 00:06:15,080
get give you the driving time from the

00:06:12,140 --> 00:06:17,360
start point to a specific node and and

00:06:15,080 --> 00:06:20,240
that for all the coordinates so you

00:06:17,360 --> 00:06:22,490
specify the start coordinate the travel

00:06:20,240 --> 00:06:25,970
mode and the time limit and you get back

00:06:22,490 --> 00:06:30,010
coordinates and in each of those cases

00:06:25,970 --> 00:06:35,060
the driving time you need from the start

00:06:30,010 --> 00:06:37,760
to the coordinate and along additionally

00:06:35,060 --> 00:06:41,590
to the driving time to each of those

00:06:37,760 --> 00:06:44,960
coordinates you will get different

00:06:41,590 --> 00:06:48,440
properties like the highway tags or the

00:06:44,960 --> 00:06:56,120
maximum speeds and so on so you can not

00:06:48,440 --> 00:06:57,830
only analyze the specific properties

00:06:56,120 --> 00:07:06,410
driving time through the coordinates but

00:06:57,830 --> 00:07:11,180
also generic properties and yeah so this

00:07:06,410 --> 00:07:17,120
is released and and latest stable

00:07:11,180 --> 00:07:22,040
release 0.13 which was released on

00:07:17,120 --> 00:07:24,440
wednesday and i really recommend to try

00:07:22,040 --> 00:07:27,740
it out so it should be relatively easy

00:07:24,440 --> 00:07:31,900
to to grab the code start it on your

00:07:27,740 --> 00:07:31,900
laptop and then play around with it

00:07:34,800 --> 00:07:45,669
now I'm coming to the part for the data

00:07:38,979 --> 00:07:49,000
analysis I've just thought about what

00:07:45,669 --> 00:07:51,759
yeah I'm really not sure if those tasks

00:07:49,000 --> 00:07:57,520
or those data analysis use cases are

00:07:51,759 --> 00:08:00,910
really useful in practice but I think it

00:07:57,520 --> 00:08:03,490
it should mainly show you that graphic

00:08:00,910 --> 00:08:10,750
was able to handle massive amount of

00:08:03,490 --> 00:08:13,180
data in a good speed and so so it can be

00:08:10,750 --> 00:08:17,020
used on a weaker computer with not so

00:08:13,180 --> 00:08:18,759
much memory and and yes some of those

00:08:17,020 --> 00:08:25,210
examples could be even useful in

00:08:18,759 --> 00:08:28,479
practice so the first one is a what-if

00:08:25,210 --> 00:08:31,539
scenario okay so that you can simulate

00:08:28,479 --> 00:08:37,060
what happens if you close bridge or shut

00:08:31,539 --> 00:08:40,810
down a tunnel or something and obviously

00:08:37,060 --> 00:08:43,779
it's really simple so so that's visual

00:08:40,810 --> 00:08:48,220
also again visualized shortest path tree

00:08:43,779 --> 00:08:51,550
and more or less red center is where the

00:08:48,220 --> 00:08:55,899
coordinates or the coordinates with the

00:08:51,550 --> 00:08:59,200
same color means you will get there in

00:08:55,899 --> 00:09:02,560
roughly at the same time so red circle

00:08:59,200 --> 00:09:08,490
in the middle is the same time like the

00:09:02,560 --> 00:09:11,950
band around the center in blue color and

00:09:08,490 --> 00:09:17,200
if you shut down the bridges then of

00:09:11,950 --> 00:09:21,450
corsica can't go up more over the river

00:09:17,200 --> 00:09:27,760
and the same can be done with motorways

00:09:21,450 --> 00:09:30,010
so you can just say hey on the top the

00:09:27,760 --> 00:09:33,430
image shows without motorways on the

00:09:30,010 --> 00:09:36,040
bottom and with motorways and again the

00:09:33,430 --> 00:09:39,610
color the same color means roughly the

00:09:36,040 --> 00:09:40,310
same driving time for those coordinates

00:09:39,610 --> 00:09:46,880
with the

00:09:40,310 --> 00:09:50,390
in color so even those arms on the left

00:09:46,880 --> 00:09:53,600
side and the bottom picture shows that's

00:09:50,390 --> 00:09:56,330
reachable in the same time like the blue

00:09:53,600 --> 00:09:58,700
on the right side and much closer to the

00:09:56,330 --> 00:10:01,610
center but as you can go on the motorway

00:09:58,700 --> 00:10:09,620
much faster then it's much more away

00:10:01,610 --> 00:10:13,940
from the center and just to to tell you

00:10:09,620 --> 00:10:18,820
about this and and now imagine you print

00:10:13,940 --> 00:10:22,520
some line between the different colors

00:10:18,820 --> 00:10:25,970
so on border of each of those color

00:10:22,520 --> 00:10:28,330
bands then those are kind of isochrone

00:10:25,970 --> 00:10:32,240
that might be familiar to you

00:10:28,330 --> 00:10:36,070
more than those directly shortest path

00:10:32,240 --> 00:10:36,070
tree on in the browser browser

00:10:37,180 --> 00:10:43,310
okay now I'm on Friday we had a routing

00:10:41,510 --> 00:10:46,910
workshop in Heidelberg and I learned

00:10:43,310 --> 00:10:51,020
about this kind of stress level for

00:10:46,910 --> 00:10:53,960
traffic that some some biking community

00:10:51,020 --> 00:10:57,740
in Ottawa used and the more thought

00:10:53,960 --> 00:11:01,670
about this the more washer that we

00:10:57,740 --> 00:11:04,400
already calculate this in our engine so

00:11:01,670 --> 00:11:08,810
kind of award dangerous things and

00:11:04,400 --> 00:11:13,580
prefer efficient bike routes and what

00:11:08,810 --> 00:11:21,910
you can already see here is is the green

00:11:13,580 --> 00:11:25,760
roads are aligned with the purple map of

00:11:21,910 --> 00:11:28,810
the forest cycle it's a Honda for a

00:11:25,760 --> 00:11:28,810
cycle map so

00:11:32,640 --> 00:11:42,890
I will just show you this in a demo so

00:11:38,610 --> 00:11:47,370
this is the Thunder forest cycle map and

00:11:42,890 --> 00:11:51,300
if we print now or overlay this with our

00:11:47,370 --> 00:11:59,090
own vector tiles you will see that the

00:11:51,300 --> 00:11:59,090
purple road is overlaid with the green

00:11:59,510 --> 00:12:06,500
with the green roads from coming from

00:12:03,270 --> 00:12:09,630
our routing engine so green means it's

00:12:06,500 --> 00:12:13,200
it's a really low stress level so

00:12:09,630 --> 00:12:16,020
without stress and yellow means it's the

00:12:13,200 --> 00:12:18,150
stress levels okay and orange is a bit

00:12:16,020 --> 00:12:20,460
more stress level and Redis the highest

00:12:18,150 --> 00:12:26,280
stress level Orland not accessible at

00:12:20,460 --> 00:12:33,020
all so again what you can see is that

00:12:26,280 --> 00:12:37,170
some of the roads also might have some

00:12:33,020 --> 00:12:40,050
yeah some some a red level this might be

00:12:37,170 --> 00:12:43,740
happen due to some elevation increase or

00:12:40,050 --> 00:12:46,940
something and what you can see on the

00:12:43,740 --> 00:12:50,370
left side is all the details that those

00:12:46,940 --> 00:12:54,320
data has so the maximum speed and also

00:12:50,370 --> 00:12:54,320
the name of course and so on

00:12:55,850 --> 00:13:03,020
so I just wanted to show you also that

00:13:00,470 --> 00:13:06,240
basically this data is coming from

00:13:03,020 --> 00:13:13,770
grasshopper with all the city names and

00:13:06,240 --> 00:13:16,410
now if you if you straw fruit data and

00:13:13,770 --> 00:13:19,400
this is coming from my local laptop so

00:13:16,410 --> 00:13:24,530
it's not it does not require internet

00:13:19,400 --> 00:13:26,710
and you can see it's pretty fast and

00:13:24,530 --> 00:13:29,830
already kind of

00:13:26,710 --> 00:13:32,520
for at least for debugging purposes it's

00:13:29,830 --> 00:13:32,520
really comfortable

00:13:44,080 --> 00:13:53,510
and the same I've done with yeah with

00:13:49,580 --> 00:13:57,260
curvy roads so some of them some people

00:13:53,510 --> 00:13:59,600
might want to avoid them like truck

00:13:57,260 --> 00:14:03,620
drivers with a long vehicle and some

00:13:59,600 --> 00:14:05,990
others like motorcyclists or Porsche

00:14:03,620 --> 00:14:10,070
drivers might want to prefer them and

00:14:05,990 --> 00:14:13,520
find them attractive and so I thought

00:14:10,070 --> 00:14:16,520
hey let's I let them and it's pretty

00:14:13,520 --> 00:14:19,550
easy to calculate a kind of a factor

00:14:16,520 --> 00:14:22,310
like comparing the beeline distance with

00:14:19,550 --> 00:14:24,740
the real distance and then if it's one

00:14:22,310 --> 00:14:27,800
than or more or less 1 then it's a

00:14:24,740 --> 00:14:32,480
straight road and if it's less than I

00:14:27,800 --> 00:14:35,990
don't know I have picked 0.6 then print

00:14:32,480 --> 00:14:40,100
them in red and so I I was able to

00:14:35,990 --> 00:14:43,880
easily highlight those curvy roads so

00:14:40,100 --> 00:14:46,940
with just calculating okay I've

00:14:43,880 --> 00:14:48,650
calculated this factor on the server

00:14:46,940 --> 00:14:51,050
side by that thing you can also do this

00:14:48,650 --> 00:14:53,120
on the client side and then just modify

00:14:51,050 --> 00:14:59,180
the render rules and you have kind of an

00:14:53,120 --> 00:15:06,110
and data analysis tool for for your road

00:14:59,180 --> 00:15:09,410
network data there was a speed limit

00:15:06,110 --> 00:15:11,390
debate in Germany so German is the eye I

00:15:09,410 --> 00:15:14,240
think it's the only developed country

00:15:11,390 --> 00:15:16,370
where some rodent have no speed limit

00:15:14,240 --> 00:15:19,010
and now the debate was hey should we

00:15:16,370 --> 00:15:21,950
introduce the default speed limit for

00:15:19,010 --> 00:15:24,380
motorways and yeah presently I would

00:15:21,950 --> 00:15:28,250
just introduce it as it doesn't have

00:15:24,380 --> 00:15:32,480
anything any meaningful disadvantages

00:15:28,250 --> 00:15:35,390
but let's prove our point so I grab the

00:15:32,480 --> 00:15:37,810
data the crash data from last year's and

00:15:35,390 --> 00:15:42,310
Germany from the

00:15:37,810 --> 00:15:45,010
starters and of course OpenStreetMap has

00:15:42,310 --> 00:15:47,769
speed limit data and now the new storage

00:15:45,010 --> 00:15:51,790
feature and grasshopper we can save the

00:15:47,769 --> 00:15:55,029
highway tags maximum speed and also feed

00:15:51,790 --> 00:15:59,980
fresh data in the graphical and with all

00:15:55,029 --> 00:16:02,769
of this I was able to come come close to

00:15:59,980 --> 00:16:06,070
some results so the highways we have

00:16:02,769 --> 00:16:08,800
lots of highways and Germany and 2/3 of

00:16:06,070 --> 00:16:12,699
the highways all without a speed limit

00:16:08,800 --> 00:16:15,480
and and the the good sign is that this

00:16:12,699 --> 00:16:19,209
is also covered from the offices sources

00:16:15,480 --> 00:16:23,079
so and now we I know I got something

00:16:19,209 --> 00:16:27,329
like 70% of deaths are on segments

00:16:23,079 --> 00:16:28,630
without speed limit so this could mean

00:16:27,329 --> 00:16:31,660
anything

00:16:28,630 --> 00:16:36,459
what you wouldn't also requires kind of

00:16:31,660 --> 00:16:38,680
a traffic density and well I had no time

00:16:36,459 --> 00:16:41,199
to do this but I know there was open

00:16:38,680 --> 00:16:46,199
data and so I pointed a journalist from

00:16:41,199 --> 00:16:49,240
Spiegel Online - yeah - this ideas and

00:16:46,199 --> 00:16:52,449
you he thanked me for the inspiration

00:16:49,240 --> 00:16:58,079
and calculated that this route through

00:16:52,449 --> 00:17:03,010
and say that we could theoretically save

00:16:58,079 --> 00:17:06,309
one about 140 people per year I wouldn't

00:17:03,010 --> 00:17:09,069
be this pessimistic I think it's more or

00:17:06,309 --> 00:17:12,040
less yeah behalf of them but it's still

00:17:09,069 --> 00:17:16,990
many of lives that you could save with

00:17:12,040 --> 00:17:18,939
just saying the default speed is I don't

00:17:16,990 --> 00:17:21,520
know what some well you all right and

00:17:18,939 --> 00:17:23,679
then and then of course also enforcing

00:17:21,520 --> 00:17:28,419
this but it's really a simple thing to

00:17:23,679 --> 00:17:35,580
do in my opinion okay just get back to

00:17:28,419 --> 00:17:38,950
share graphics and avoid politics so

00:17:35,580 --> 00:17:41,230
another use case is if you want to plan

00:17:38,950 --> 00:17:46,000
a new supermarket or a new fire station

00:17:41,230 --> 00:17:50,080
and what you want to do is to find some

00:17:46,000 --> 00:17:53,350
gaps in coverage of this new building or

00:17:50,080 --> 00:17:55,870
something and you can do this with

00:17:53,350 --> 00:18:00,040
isochrone so you initialize the

00:17:55,870 --> 00:18:03,340
isochrone calculation with many starting

00:18:00,040 --> 00:18:05,559
points and then stop until you reach I

00:18:03,340 --> 00:18:08,580
don't know 10 minutes or 15 minutes of

00:18:05,559 --> 00:18:15,780
driving or walking and then you

00:18:08,580 --> 00:18:18,400
immediately see that there are gaps so -

00:18:15,780 --> 00:18:22,240
grabbing the fire station coordinates is

00:18:18,400 --> 00:18:24,340
easy from overpass and then you're done

00:18:22,240 --> 00:18:28,360
this this multi-source isochrone is not

00:18:24,340 --> 00:18:32,050
in the open source but but later on you

00:18:28,360 --> 00:18:35,530
see you can calculate multi-source reach

00:18:32,050 --> 00:18:37,470
ability or isochrones also and I've done

00:18:35,530 --> 00:18:40,300
this in a branch of the grasshopper

00:18:37,470 --> 00:18:46,660
repository I will show you the resources

00:18:40,300 --> 00:18:51,690
later so that's I think one of them most

00:18:46,660 --> 00:18:55,420
useful use cases that I've covered and

00:18:51,690 --> 00:19:01,510
now we come to kind of the massive data

00:18:55,420 --> 00:19:03,550
scaling part so what you usually want is

00:19:01,510 --> 00:19:05,410
to find the closest restaurants in a few

00:19:03,550 --> 00:19:07,540
minutes of walking distance or something

00:19:05,410 --> 00:19:11,410
or even I don't know 10 minutes driving

00:19:07,540 --> 00:19:12,880
time and I found this to be boring I

00:19:11,410 --> 00:19:15,970
just grabbed all the restaurants in

00:19:12,880 --> 00:19:20,740
Germany and put them in grasshopper

00:19:15,970 --> 00:19:24,760
storage and then started the exploration

00:19:20,740 --> 00:19:27,610
in some some little city in Germany it's

00:19:24,760 --> 00:19:30,760
effort and explore Germany so this means

00:19:27,610 --> 00:19:35,050
9 million notes and 12 million gauges

00:19:30,760 --> 00:19:36,770
and with the help of graphical I was

00:19:35,050 --> 00:19:38,930
able to return a list

00:19:36,770 --> 00:19:42,890
of driving time sorted restaurants in

00:19:38,930 --> 00:19:47,360
under 30 seconds so those roughly 20k

00:19:42,890 --> 00:19:49,700
restaurants could be easily returned and

00:19:47,360 --> 00:19:52,070
in sorted order not only by beeline

00:19:49,700 --> 00:19:55,670
distance but it's driving time distance

00:19:52,070 --> 00:19:59,810
or whatever you have is the cost cost

00:19:55,670 --> 00:20:02,810
function now just for fun I plotted them

00:19:59,810 --> 00:20:06,830
for different cities in the histogram

00:20:02,810 --> 00:20:09,920
and what we can see in there for that

00:20:06,830 --> 00:20:12,890
the density of restaurants is not really

00:20:09,920 --> 00:20:17,840
big at the beginning the same in

00:20:12,890 --> 00:20:22,240
Heidelberg but for Berlin the density

00:20:17,840 --> 00:20:26,720
decreases first of all and oops and I

00:20:22,240 --> 00:20:30,860
think one of those Peaks is Hamburg here

00:20:26,720 --> 00:20:35,180
so which means in roughly or in the band

00:20:30,860 --> 00:20:39,890
of 118 minutes driving time you have a

00:20:35,180 --> 00:20:43,220
peak in restaurant counts around Berlin

00:20:39,890 --> 00:20:47,240
right excluding other countries at the

00:20:43,220 --> 00:20:51,290
moment so I've not really done kind of

00:20:47,240 --> 00:20:55,460
analysis what Peaks or which studies or

00:20:51,290 --> 00:20:58,640
which I don't know areas but I just

00:20:55,460 --> 00:21:02,740
showing you that's easily - yeah kind of

00:20:58,640 --> 00:21:05,540
put them all in histograms and analyze

00:21:02,740 --> 00:21:10,180
thousands of Records in in a really

00:21:05,540 --> 00:21:14,630
short time on a really weak computer and

00:21:10,180 --> 00:21:17,270
as I said already you can do this in

00:21:14,630 --> 00:21:19,730
kind of multi sauce isochrone or Marty

00:21:17,270 --> 00:21:21,710
sauce reach ability so what I've done

00:21:19,730 --> 00:21:24,770
now is to calculate a route first of all

00:21:21,710 --> 00:21:29,000
from Stuttgart to Hamburg for examples

00:21:24,770 --> 00:21:31,790
or south to north and then initialize

00:21:29,000 --> 00:21:37,310
the route as a starting point and then

00:21:31,790 --> 00:21:38,930
explore the whole graph kind of from to

00:21:37,310 --> 00:21:39,879
the west and to the east at the same

00:21:38,930 --> 00:21:43,779
time

00:21:39,879 --> 00:21:45,519
and then get back the restaurants for a

00:21:43,779 --> 00:21:47,859
specific driving time and put them in

00:21:45,519 --> 00:21:51,759
the histogram you can think about this

00:21:47,859 --> 00:21:55,599
as all the same algorithm can also be

00:21:51,759 --> 00:21:59,859
used to define the shortest path from a

00:21:55,599 --> 00:22:02,709
location to a river or yeah kind of fun

00:21:59,859 --> 00:22:04,719
river river to something so so it's

00:22:02,709 --> 00:22:07,509
really interesting what you can do with

00:22:04,719 --> 00:22:13,109
just the extra or just this reachability

00:22:07,509 --> 00:22:20,289
analysis and yeah and and also many

00:22:13,109 --> 00:22:24,190
locations now grasshopper for data

00:22:20,289 --> 00:22:27,449
analysis has advantages it's really fast

00:22:24,190 --> 00:22:31,319
it handles massive amount of data and

00:22:27,449 --> 00:22:34,239
can be even used on a weak computer and

00:22:31,319 --> 00:22:36,249
if you want to avoid loading everything

00:22:34,239 --> 00:22:39,249
into memory there's also an option for

00:22:36,249 --> 00:22:42,309
this and graphical so you don't need

00:22:39,249 --> 00:22:44,169
necessarily all the memory in memory but

00:22:42,309 --> 00:22:46,299
it will be a bit slower the

00:22:44,169 --> 00:22:48,039
disadvantages at the moment are that you

00:22:46,299 --> 00:22:54,129
have to specify certain attributes

00:22:48,039 --> 00:22:56,859
before you you you get started and and

00:22:54,129 --> 00:22:59,649
you have to put specify them so that

00:22:56,859 --> 00:23:03,039
Rafa can put this in the graph from the

00:22:59,649 --> 00:23:05,319
data source like PBF and a second

00:23:03,039 --> 00:23:09,669
disadvantage is this disadvantage is

00:23:05,319 --> 00:23:12,699
that you need driver knowledge for

00:23:09,669 --> 00:23:16,679
certain use cases too and that's

00:23:12,699 --> 00:23:19,989
hopefully that hopefully we will improve

00:23:16,679 --> 00:23:25,049
this are the resources that I spoke of

00:23:19,989 --> 00:23:27,699
so there's a branch certain trials and

00:23:25,049 --> 00:23:32,109
separate repository for the crash

00:23:27,699 --> 00:23:33,639
statistics and each status is probably

00:23:32,109 --> 00:23:37,749
also not yet known but it's really

00:23:33,639 --> 00:23:41,159
useful source for different not only of

00:23:37,749 --> 00:23:47,369
course deadly death the deadly crash

00:23:41,159 --> 00:23:50,309
also the injured injuries and so on we

00:23:47,369 --> 00:23:52,049
are looking for contributors so if you

00:23:50,309 --> 00:23:55,919
want to contribute code or these

00:23:52,049 --> 00:23:58,799
translations or just want to check out

00:23:55,919 --> 00:24:04,379
what's going on yeah come to graph over

00:23:58,799 --> 00:24:08,629
at github and also to our forum and yeah

00:24:04,379 --> 00:24:08,629
thank you thanks Peter

00:24:12,200 --> 00:24:18,580
does anybody have questions for Peter

00:24:14,500 --> 00:24:23,660
your questions can I have some edges

00:24:18,580 --> 00:24:25,760
good morning thank you great talk so I

00:24:23,660 --> 00:24:29,030
have a question to the first example you

00:24:25,760 --> 00:24:31,670
showed how difficult is to block a road

00:24:29,030 --> 00:24:35,200
who I have to make a new graph or do I

00:24:31,670 --> 00:24:39,410
change weights or how's it done

00:24:35,200 --> 00:24:44,050
you mean this this one this is done a

00:24:39,410 --> 00:24:47,480
rigorous right so you can change this

00:24:44,050 --> 00:24:49,610
yeah and yeah in the request and change

00:24:47,480 --> 00:24:51,260
it on every request differently like you

00:24:49,610 --> 00:24:52,820
want to have it and the server side

00:24:51,260 --> 00:24:55,750
needs to support this and a certain cost

00:24:52,820 --> 00:24:58,370
function but that's now easy to do and

00:24:55,750 --> 00:25:01,460
you can see this also in the branch of

00:24:58,370 --> 00:25:03,200
something trial set to capacity travel

00:25:01,460 --> 00:25:05,420
times of the other streets are a

00:25:03,200 --> 00:25:07,700
constant or are they also changing by

00:25:05,420 --> 00:25:10,280
blocking the street because usually then

00:25:07,700 --> 00:25:12,830
other speeds get more traffic what I

00:25:10,280 --> 00:25:14,810
mean so if you block one street the

00:25:12,830 --> 00:25:18,260
surrounding streets for example gets

00:25:14,810 --> 00:25:22,720
more traffic and so you have you get

00:25:18,260 --> 00:25:25,400
stuck so is this counted in somehow or

00:25:22,720 --> 00:25:29,300
you mean if you can incorporate traffic

00:25:25,400 --> 00:25:33,140
data or yeah at the end yeah yeah sure

00:25:29,300 --> 00:25:35,600
you can also do this in different kinds

00:25:33,140 --> 00:25:38,420
of ways so either with a post request

00:25:35,600 --> 00:25:41,570
and directly it changed the graph or

00:25:38,420 --> 00:25:49,220
yeah there are different ways to do this

00:25:41,570 --> 00:25:51,770
impossible hi thank you for the talk so

00:25:49,220 --> 00:25:54,110
I have regarding this memory fruit

00:25:51,770 --> 00:25:55,790
footprint you said you you can we can

00:25:54,110 --> 00:25:59,690
run this on our own

00:25:55,790 --> 00:26:02,300
yeah reason beliefs a slow machine so

00:25:59,690 --> 00:26:04,850
what does that mean I mean what what is

00:26:02,300 --> 00:26:06,710
the memory footprint and and what can we

00:26:04,850 --> 00:26:08,140
run that on the phone or something like

00:26:06,710 --> 00:26:10,670
that

00:26:08,140 --> 00:26:13,130
well of course it depends a bit on what

00:26:10,670 --> 00:26:16,160
what you want to handles but I think

00:26:13,130 --> 00:26:19,310
Germany is pretty doable in I don't know

00:26:16,160 --> 00:26:21,740
4 gigabytes of RAM if you have this on

00:26:19,310 --> 00:26:24,800
your local laptop and if you have a bit

00:26:21,740 --> 00:26:27,230
more time and I don't know I think about

00:26:24,800 --> 00:26:29,390
some rum and use a special setting then

00:26:27,230 --> 00:26:33,830
you can also do this for you

00:26:29,390 --> 00:26:36,650
Europe and have a good speed awesome

00:26:33,830 --> 00:26:41,290
area I think but the more memory have

00:26:36,650 --> 00:26:41,290
the faster we will have it the reasons

00:26:41,590 --> 00:26:48,440
ok have a question about the analysis of

00:26:44,780 --> 00:26:50,690
the traffic accidents so you presented

00:26:48,440 --> 00:26:53,240
that they were kind of 60 something

00:26:50,690 --> 00:26:56,150
roads without limit and succeed

00:26:53,240 --> 00:26:57,680
something percentage of traffic

00:26:56,150 --> 00:26:59,720
excellence that that looks like similar

00:26:57,680 --> 00:27:02,270
number so where is the the significance

00:26:59,720 --> 00:27:08,330
there that there are more accidents on

00:27:02,270 --> 00:27:11,410
on no-limit streets there was a

00:27:08,330 --> 00:27:15,860
significant difference and this but you

00:27:11,410 --> 00:27:19,040
the 5% I think it's it's a significant

00:27:15,860 --> 00:27:21,020
difference but still I think that's not

00:27:19,040 --> 00:27:22,490
really something that would say

00:27:21,020 --> 00:27:25,070
something because if there's more

00:27:22,490 --> 00:27:28,340
traffic in the segments without speed

00:27:25,070 --> 00:27:30,500
limits then you kind of trick yourself

00:27:28,340 --> 00:27:34,550
so you need traffic density and that's

00:27:30,500 --> 00:27:35,600
what the journalist mr. Schwartz thus I

00:27:34,550 --> 00:27:37,760
want it yeah

00:27:35,600 --> 00:27:39,350
all right Peter where are you gonna be

00:27:37,760 --> 00:27:42,620
today where can people find you to ask

00:27:39,350 --> 00:27:45,110
you more questions about feather do you

00:27:42,620 --> 00:27:48,640
have like are you people like coffee

00:27:45,110 --> 00:27:53,000
yeah yeah well I get coffee and I will

00:27:48,640 --> 00:27:55,010
have a black shirt on so they will find

00:27:53,000 --> 00:27:56,630
me it's right and they will contribute

00:27:55,010 --> 00:27:59,049
or find a way to contribute to your

00:27:56,630 --> 00:28:01,110
project so thank you Thanks

00:27:59,049 --> 00:28:01,110

YouTube URL: https://www.youtube.com/watch?v=-mLh72dTCus


