Title: Providing OSM realtime extracts
Publication date: 2018-09-22
Playlist: SotM 2018, Day 2, De Donato
Description: 
	Stefan Eberlein (UniversitÃ¤t Heidelberg), State of the Map 2018
https://2018.stateofthemap.org/2018/L024-Providing_OSM_realtime_extracts/

Realtime OSM is a server that serves custom OSM extracts updated in near realtime. Its users can add jobs via an easy to use interface. You can host the server yourself but it will also be hosted on the servers of HeiGIT, Heidelberg. This talk will detail the approach and obstacles encountered while developing the server and is an opportunity to chat with me about your use case or requirements. https://github.com/GIScience/OSM-realtime-update/
Captions: 
	00:00:00,030 --> 00:00:05,069
okay hi everyone I'm Stephan from

00:00:02,879 --> 00:00:06,299
Heidelberg University or more

00:00:05,069 --> 00:00:07,980
specifically from the Heidelberg

00:00:06,299 --> 00:00:09,960
Institute for geo information technology

00:00:07,980 --> 00:00:13,110
and I will show you how I can have

00:00:09,960 --> 00:00:16,710
custom OpenStreetMap extracts in almost

00:00:13,110 --> 00:00:18,330
almost real-time using a little tool I

00:00:16,710 --> 00:00:20,100
wrote for the open route service the

00:00:18,330 --> 00:00:21,150
open route service we are having at the

00:00:20,100 --> 00:00:22,680
Heidelberg Institute for information

00:00:21,150 --> 00:00:25,289
technology has been around since about

00:00:22,680 --> 00:00:26,699
10 years it's fully paced in

00:00:25,289 --> 00:00:28,980
OpenStreetMap free and open source

00:00:26,699 --> 00:00:32,880
software and offers a free API for

00:00:28,980 --> 00:00:35,160
routing and isochrones and geocoding so

00:00:32,880 --> 00:00:36,989
that's just background because over time

00:00:35,160 --> 00:00:38,910
the open road service evolved they had

00:00:36,989 --> 00:00:40,530
new requirements we all heard a lot

00:00:38,910 --> 00:00:41,370
about disaster mapping in the last days

00:00:40,530 --> 00:00:43,890
and today I think

00:00:41,370 --> 00:00:47,640
but for disaster mapping what you need

00:00:43,890 --> 00:00:51,629
for on thermals as up-to-date data and

00:00:47,640 --> 00:00:53,399
up-to-date routing graphs but the graph

00:00:51,629 --> 00:00:56,850
update and updating the data is very

00:00:53,399 --> 00:00:59,309
very slow so one solution we we applied

00:00:56,850 --> 00:01:02,039
was having individual instances for

00:00:59,309 --> 00:01:05,309
individual regions which very much

00:01:02,039 --> 00:01:07,020
speeds up graph generation so in the end

00:01:05,309 --> 00:01:09,020
it basically looks like this we can add

00:01:07,020 --> 00:01:12,420
a little little checkbox down there

00:01:09,020 --> 00:01:14,729
where I can choose the region and then

00:01:12,420 --> 00:01:16,799
just switches instances but still you

00:01:14,729 --> 00:01:19,650
need up-to-date data and this is where

00:01:16,799 --> 00:01:21,390
my little project came in which is

00:01:19,650 --> 00:01:24,900
called real time I was able to provide

00:01:21,390 --> 00:01:26,939
custom OpenStreetMap extracts so what it

00:01:24,900 --> 00:01:28,500
does is provides a little an API and a

00:01:26,939 --> 00:01:31,020
dashboard where you can basically create

00:01:28,500 --> 00:01:33,990
update tasks for extracting

00:01:31,020 --> 00:01:36,540
OpenStreetMap data the whole thing is

00:01:33,990 --> 00:01:38,369
based on a node.js server it manages all

00:01:36,540 --> 00:01:41,430
the update tasks or jobs in a SQLite

00:01:38,369 --> 00:01:43,200
database keeps them up to date and

00:01:41,430 --> 00:01:45,899
provides a low-level API where you can

00:01:43,200 --> 00:01:48,869
which can actually use from your other

00:01:45,899 --> 00:01:52,170
applications or this web front and we

00:01:48,869 --> 00:01:54,479
have seen the update strategy goes to

00:01:52,170 --> 00:01:56,579
like goes about finding and downloading

00:01:54,479 --> 00:01:58,890
the smallest view of public extract for

00:01:56,579 --> 00:02:00,240
your area of interest and crop it but if

00:01:58,890 --> 00:02:02,250
you don't want to do this we also have

00:02:00,240 --> 00:02:04,500
Planet file supports that we can

00:02:02,250 --> 00:02:05,909
actually supply plan the file and then

00:02:04,500 --> 00:02:09,509
afterwards we keep it continuously

00:02:05,909 --> 00:02:12,209
up-to-date with awesome update if you if

00:02:09,509 --> 00:02:13,230
you want access we have we are hosting a

00:02:12,209 --> 00:02:16,560
instance right now

00:02:13,230 --> 00:02:19,110
and for the next two or three days which

00:02:16,560 --> 00:02:21,480
you can just put into your web browser

00:02:19,110 --> 00:02:26,010
and have a look at it or you can send us

00:02:21,480 --> 00:02:29,790
an email at info at hi kit dot orc so

00:02:26,010 --> 00:02:32,010
this is for me I will keep this light up

00:02:29,790 --> 00:02:34,230
so you can maybe take photo if you

00:02:32,010 --> 00:02:36,510
interested and if I have one more minute

00:02:34,230 --> 00:02:39,290
or something I can still show you show

00:02:36,510 --> 00:02:41,760
you the whole the whole thing this is

00:02:39,290 --> 00:02:48,299
the web page and this our instance

00:02:41,760 --> 00:02:50,310
running I created one for Milan so you

00:02:48,299 --> 00:02:52,860
can basically have this map visualizing

00:02:50,310 --> 00:02:55,349
all your jobs and the table show you

00:02:52,860 --> 00:02:57,959
information they are s it's a bit rough

00:02:55,349 --> 00:03:01,019
right now so if you if you break it it's

00:02:57,959 --> 00:03:03,630
broke and then in the end if you want to

00:03:01,019 --> 00:03:06,660
have the data you can basically download

00:03:03,630 --> 00:03:12,420
the one for me lon and it's downloading

00:03:06,660 --> 00:03:15,200
right away ok thank you very much thank

00:03:12,420 --> 00:03:15,200

YouTube URL: https://www.youtube.com/watch?v=ywZhQY-6cdE


