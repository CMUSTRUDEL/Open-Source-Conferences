Title: What keeps you from inadvertently screwing up OpenStreetMap?
Publication date: 2016-10-20
Playlist: State of the Map 2016, Sunday QA
Description: 
	Simon Poole at State of the Map 2016
http://2016.stateofthemap.org/2016/staying-on-the-right-side-best-practices-in-editing/
Part 3/3, this follows on from https://www.youtube.com/watch?v=ZrvcVAPdaWI

Finally, Simon Poole will review editing tools. He will give an overview of some “shoulds” and “don’ts” that both consumer and developers should consider when choosing a tool and developing one. The talk will be peppered with examples of some of the more arcane stuff you need to deal with to avoid criticism for using or writing a tool that breaks stuff.
Captions: 
	00:00:00,000 --> 00:00:08,550
eating more questions please go in the

00:00:03,870 --> 00:00:11,550
other rooms if you want to talk let's go

00:00:08,550 --> 00:00:15,000
with Simon for the last talked this

00:00:11,550 --> 00:00:17,220
morning it's actually afternoon but I'm

00:00:15,000 --> 00:00:20,490
the person that got a god went to bed at

00:00:17,220 --> 00:00:23,420
4am today so please bear with me I

00:00:20,490 --> 00:00:25,859
haven't that lunch so it's morning

00:00:23,420 --> 00:00:30,750
they've her wobble around that's the

00:00:25,859 --> 00:00:33,960
office after effects of that two three

00:00:30,750 --> 00:00:36,420
weeks back somebody complained that I

00:00:33,960 --> 00:00:41,210
had messed up a whole street in German

00:00:36,420 --> 00:00:45,899
do me that siren pool has mapped

00:00:41,210 --> 00:00:48,420
complete road wrong I had the action

00:00:45,899 --> 00:00:51,210
never been done if never back there but

00:00:48,420 --> 00:00:54,210
I think it does show something we all

00:00:51,210 --> 00:00:57,930
screw up now and then and one of the

00:00:54,210 --> 00:01:00,500
questions is you know what keeps you

00:00:57,930 --> 00:01:06,479
from inadvertently messing up

00:01:00,500 --> 00:01:09,900
openstreetmap what it's not the API you

00:01:06,479 --> 00:01:12,090
know the a pie is the bit of our system

00:01:09,900 --> 00:01:14,250
which our editor interacts with where

00:01:12,090 --> 00:01:18,330
you when you're uploading data you're

00:01:14,250 --> 00:01:22,140
interacting with our API all this stuff

00:01:18,330 --> 00:01:24,450
here is what's going on when you're

00:01:22,140 --> 00:01:26,939
editing in ja znam and it suddenly dumps

00:01:24,450 --> 00:01:31,560
you into onto the bridge of the

00:01:26,939 --> 00:01:34,799
enterprise so this is stuff like you

00:01:31,560 --> 00:01:38,450
know the versions increase sequentially

00:01:34,799 --> 00:01:41,430
the object is actually there you're not

00:01:38,450 --> 00:01:44,100
deleting a node which is actually a

00:01:41,430 --> 00:01:49,170
member of a way which is still on the

00:01:44,100 --> 00:01:50,790
server and all that kind of stuff and I

00:01:49,170 --> 00:01:53,100
don't know most people don't know that

00:01:50,790 --> 00:01:56,189
but you can actually have maximum 2,000

00:01:53,100 --> 00:01:59,579
nodes in a way in OpenStreetMap so it

00:01:56,189 --> 00:02:03,090
checks that as well but it doesn't check

00:01:59,579 --> 00:02:06,990
is if the stuff that you're uploading

00:02:03,090 --> 00:02:10,259
actually has a correct geometry for

00:02:06,990 --> 00:02:12,270
example you don't have self insect

00:02:10,259 --> 00:02:16,120
intersecting ways

00:02:12,270 --> 00:02:18,400
it doesn't check for compliance with

00:02:16,120 --> 00:02:22,330
tagging schemes it has actually no idea

00:02:18,400 --> 00:02:26,260
that there are tacking schemes and it

00:02:22,330 --> 00:02:29,280
doesn't really check anything else which

00:02:26,260 --> 00:02:32,050
explains my stuff like this is possible

00:02:29,280 --> 00:02:35,530
this is from Frederick's Quality

00:02:32,050 --> 00:02:39,070
Assurance site from osm inspector these

00:02:35,530 --> 00:02:40,900
are actually ways which have duplicate

00:02:39,070 --> 00:02:44,950
nodes in them that means that they have

00:02:40,900 --> 00:02:48,910
the same node twice adjacent in that way

00:02:44,950 --> 00:02:52,630
it's not an awfully dreadful problem but

00:02:48,910 --> 00:02:54,940
it's stuff that you know you would

00:02:52,630 --> 00:02:58,420
assume the API would not accept but it

00:02:54,940 --> 00:03:00,370
does and you notice that our German

00:02:58,420 --> 00:03:02,950
friends tend to be very good about

00:03:00,370 --> 00:03:05,980
fixing this stuff I was I was a week

00:03:02,950 --> 00:03:07,720
late making this screenshot and all of

00:03:05,980 --> 00:03:13,600
them is gone the density was roughly is

00:03:07,720 --> 00:03:18,850
a similar you just don't edit that's why

00:03:13,600 --> 00:03:20,680
you never make mistakes the thing that

00:03:18,850 --> 00:03:23,440
actually stops you from doing this stuff

00:03:20,680 --> 00:03:27,300
or should stop you is your editor the

00:03:23,440 --> 00:03:32,080
tool that you use to add data to osm

00:03:27,300 --> 00:03:35,980
should avoid breaking geometry it should

00:03:32,080 --> 00:03:38,140
avoid creating these dupe nodes it

00:03:35,980 --> 00:03:40,870
should support relations this is

00:03:38,140 --> 00:03:43,900
something which I think we've got to the

00:03:40,870 --> 00:03:47,080
point now where all the more common

00:03:43,900 --> 00:03:50,950
editors actually support relations but

00:03:47,080 --> 00:03:54,070
it wasn't the case where you back it has

00:03:50,950 --> 00:03:56,500
to understand tagging schemes question

00:03:54,070 --> 00:03:58,150
are which ones and what does it mean

00:03:56,500 --> 00:04:01,840
understand tagging schemes were just

00:03:58,150 --> 00:04:04,090
editing geometry and adding tags it

00:04:01,840 --> 00:04:07,330
should interact with existing current

00:04:04,090 --> 00:04:08,890
data in a reasonable form I think I

00:04:07,330 --> 00:04:12,370
don't know most people have probably

00:04:08,890 --> 00:04:13,570
edited during a mapping party or

00:04:12,370 --> 00:04:15,190
something like that and had the

00:04:13,570 --> 00:04:19,030
experience that they're actually

00:04:15,190 --> 00:04:20,470
uploading data which conflicts with data

00:04:19,030 --> 00:04:24,580
which is already on the server because

00:04:20,470 --> 00:04:26,430
somebody else edited it and the longer

00:04:24,580 --> 00:04:29,830
you wait that we

00:04:26,430 --> 00:04:31,690
editing the data and uploading it the

00:04:29,830 --> 00:04:34,510
more conflicts you potentially get and

00:04:31,690 --> 00:04:37,210
the same goes if you are actually using

00:04:34,510 --> 00:04:43,120
out data data which is one of the issues

00:04:37,210 --> 00:04:46,600
with maps me and for example if it

00:04:43,120 --> 00:04:48,880
displays imagery which may or may not

00:04:46,600 --> 00:04:54,100
have large offsets there should be some

00:04:48,880 --> 00:04:57,190
way of adjusting that I'm just going to

00:04:54,100 --> 00:05:00,010
give an example why the tagging schemes

00:04:57,190 --> 00:05:04,710
are actually important I assume here

00:05:00,010 --> 00:05:11,880
everybody is split away whoops go back

00:05:04,710 --> 00:05:14,380
wrong button so that there's a way their

00:05:11,880 --> 00:05:17,260
gear halton straße is just away from

00:05:14,380 --> 00:05:20,530
where I live selected it want to split

00:05:17,260 --> 00:05:24,520
it it's a member of a relation and what

00:05:20,530 --> 00:05:26,440
happened is now both segments are member

00:05:24,520 --> 00:05:33,100
of that relation that's the standard way

00:05:26,440 --> 00:05:35,620
to handle the situation except if this

00:05:33,100 --> 00:05:38,460
way happens to be a member of a turn

00:05:35,620 --> 00:05:41,260
restriction if it's a turn restriction

00:05:38,460 --> 00:05:44,919
adding both segments to the relation

00:05:41,260 --> 00:05:47,320
actually breaks the turn restriction so

00:05:44,919 --> 00:05:51,870
your editor actually have the special

00:05:47,320 --> 00:05:55,090
cases and when you split a split this

00:05:51,870 --> 00:06:00,430
this way here at the pedestrian crossing

00:05:55,090 --> 00:06:03,250
and this part is no longer a member of

00:06:00,430 --> 00:06:06,070
the relation afterwards so did special

00:06:03,250 --> 00:06:07,960
code that knows okay this is a turn

00:06:06,070 --> 00:06:11,229
restriction I have to check my family

00:06:07,960 --> 00:06:14,200
from or the two element have to find out

00:06:11,229 --> 00:06:22,000
on which side is the via node and then

00:06:14,200 --> 00:06:24,729
add the stuff correctly there's a simple

00:06:22,000 --> 00:06:28,900
example most of us have probably reverse

00:06:24,729 --> 00:06:32,110
the way one day in in our editor what it

00:06:28,900 --> 00:06:34,090
isn't actually quite so simple you

00:06:32,110 --> 00:06:36,900
rearrange the nodes but you have to

00:06:34,090 --> 00:06:38,860
actually check are there non-reversible

00:06:36,900 --> 00:06:44,069
Direction dependent

00:06:38,860 --> 00:06:49,300
tags on this way for example coastline

00:06:44,069 --> 00:06:52,030
cliff or it's a city wall but only if it

00:06:49,300 --> 00:06:54,189
doesn't have the two-sided tag you can't

00:06:52,030 --> 00:06:57,250
actually reverse the direction of that

00:06:54,189 --> 00:07:00,159
way without changing the meaning city

00:06:57,250 --> 00:07:02,710
walls have a high and the lower side and

00:07:00,159 --> 00:07:09,159
if you simply reverse the way you're

00:07:02,710 --> 00:07:12,669
changing the high and the low side if

00:07:09,159 --> 00:07:14,800
you have reversible tags you have to

00:07:12,669 --> 00:07:22,300
check for all of those and turn them

00:07:14,800 --> 00:07:24,939
around and your way might be a member in

00:07:22,300 --> 00:07:27,879
a route relation it might have forward

00:07:24,939 --> 00:07:32,349
backward tags have to change those as

00:07:27,879 --> 00:07:34,180
well and things get really iffy if

00:07:32,349 --> 00:07:36,370
you're merging two ways because now and

00:07:34,180 --> 00:07:38,259
then to merge two ways you actually have

00:07:36,370 --> 00:07:41,289
to change the direction of one of them

00:07:38,259 --> 00:07:43,779
and you get all that on the previous

00:07:41,289 --> 00:07:45,430
page plus you actually have to check for

00:07:43,779 --> 00:07:50,830
both ways you have to check that the

00:07:45,430 --> 00:07:52,599
rules don't conflict and so on now

00:07:50,830 --> 00:07:56,199
people will say okay you know that's

00:07:52,599 --> 00:07:59,409
because you're you have this complicated

00:07:56,199 --> 00:08:00,759
editor you you want to edit geometry and

00:07:59,409 --> 00:08:05,979
all that and that's why you get all

00:08:00,759 --> 00:08:09,250
these complications but simple you know

00:08:05,979 --> 00:08:10,839
simple implies and I don't know what

00:08:09,250 --> 00:08:13,870
anybody in the session before where Rob

00:08:10,839 --> 00:08:16,150
was talking Rob said you know people

00:08:13,870 --> 00:08:21,250
shouldn't have to know about always aim

00:08:16,150 --> 00:08:24,270
to edit osm so you know simple implies

00:08:21,250 --> 00:08:27,279
the user doesn't have to know about osm

00:08:24,270 --> 00:08:29,889
problem is that implies the editor has

00:08:27,279 --> 00:08:34,000
to know everything about osm and that is

00:08:29,889 --> 00:08:36,459
really really hard and it's particularly

00:08:34,000 --> 00:08:39,070
hard because we have this freeform

00:08:36,459 --> 00:08:43,419
tacking schemes and nobody actually has

00:08:39,070 --> 00:08:46,959
to go and register their new fangled

00:08:43,419 --> 00:08:50,500
tacking scheme and tell editor's editor

00:08:46,959 --> 00:08:52,030
developers about it so we can never

00:08:50,500 --> 00:08:57,070
really know

00:08:52,030 --> 00:09:00,970
all of OS m and the more you go away

00:08:57,070 --> 00:09:03,040
from raw osm data with your abstractions

00:09:00,970 --> 00:09:08,620
the more difficult it gives and I offer

00:09:03,040 --> 00:09:13,030
one example ID area type there's no area

00:09:08,620 --> 00:09:16,420
type in osm so when you draw a building

00:09:13,030 --> 00:09:19,930
in ID and you actually click on this

00:09:16,420 --> 00:09:22,270
area thing it's doing something which

00:09:19,930 --> 00:09:23,740
doesn't really exist as a creating

00:09:22,270 --> 00:09:28,570
something which doesn't really exist in

00:09:23,740 --> 00:09:31,450
other ways in the osm data model ID does

00:09:28,570 --> 00:09:34,630
this quite well it maintains the

00:09:31,450 --> 00:09:38,230
integrity of the object so if you

00:09:34,630 --> 00:09:41,800
actually split it it turns it into a if

00:09:38,230 --> 00:09:44,860
you've just drawn a simple closed way it

00:09:41,800 --> 00:09:48,790
will actually turn it into a multi

00:09:44,860 --> 00:09:50,590
polygon once it's done that it can't

00:09:48,790 --> 00:09:53,830
actually simplify it anymore because you

00:09:50,590 --> 00:09:58,270
know if I'm working on it I save it I've

00:09:53,830 --> 00:10:00,430
split this way I save it and I want to

00:09:58,270 --> 00:10:03,940
do something else it can't suddenly turn

00:10:00,430 --> 00:10:06,420
back into a simple way and it's

00:10:03,940 --> 00:10:11,680
potentially confusing for other mappers

00:10:06,420 --> 00:10:14,920
so this is a building outline and row of

00:10:11,680 --> 00:10:16,690
this is actually my house I split it and

00:10:14,920 --> 00:10:21,040
you can actually see that it's turned it

00:10:16,690 --> 00:10:24,760
into a relation here with two parts this

00:10:21,040 --> 00:10:26,080
way and the other way and I t is really

00:10:24,760 --> 00:10:30,640
good about doing that because for

00:10:26,080 --> 00:10:33,700
example you can't actually unjoin this

00:10:30,640 --> 00:10:35,680
node it will complain that it's part of

00:10:33,700 --> 00:10:37,720
a relation don't know by sonny's talk

00:10:35,680 --> 00:10:40,960
starts talking about relations here it

00:10:37,720 --> 00:10:43,330
should talk about areas and it doesn't

00:10:40,960 --> 00:10:48,100
allow you to undo that so this object

00:10:43,330 --> 00:10:51,850
maintains is valid or is an object and

00:10:48,100 --> 00:10:54,160
if you go look at the data you can

00:10:51,850 --> 00:10:57,130
actually see still these two parts

00:10:54,160 --> 00:10:59,680
member of a relation and so on so that's

00:10:57,130 --> 00:11:01,900
all okay it's just very confusing if

00:10:59,680 --> 00:11:05,150
you're using potlatch or you're using

00:11:01,900 --> 00:11:08,870
jawsome you come upon this object

00:11:05,150 --> 00:11:13,280
and think why the heck did somebody turn

00:11:08,870 --> 00:11:15,290
this into a multi polygon this by the

00:11:13,280 --> 00:11:17,990
way is the sound box federer course

00:11:15,290 --> 00:11:20,930
referring to before so that's not how my

00:11:17,990 --> 00:11:26,720
the place is Matt where I'm where I live

00:11:20,930 --> 00:11:28,550
and the next thing that comes ok I'm

00:11:26,720 --> 00:11:33,070
going to really write this really really

00:11:28,550 --> 00:11:35,300
simple editor which only edits tags

00:11:33,070 --> 00:11:37,670
points of interest can be modeled in

00:11:35,300 --> 00:11:40,730
very many ways in OpenStreetMap there

00:11:37,670 --> 00:11:43,220
can be no two ways clothes ways they can

00:11:40,730 --> 00:11:45,680
be relations they can be a site relation

00:11:43,220 --> 00:11:49,640
all kinds of things multi polygon and so

00:11:45,680 --> 00:11:53,420
on individual geometries can hold

00:11:49,640 --> 00:11:55,610
multiple objects and tags can interact

00:11:53,420 --> 00:11:59,030
with geometry in fact I just showed you

00:11:55,610 --> 00:12:01,550
an example because all that means if you

00:11:59,030 --> 00:12:03,230
apply one of these tags to an object

00:12:01,550 --> 00:12:07,100
that you don't actually know which

00:12:03,230 --> 00:12:15,260
direction it is pointing in your messing

00:12:07,100 --> 00:12:19,430
data up and this is another example this

00:12:15,260 --> 00:12:22,730
is a road in Germany somewhere which is

00:12:19,430 --> 00:12:26,570
a tram line and it's a surface road at

00:12:22,730 --> 00:12:29,120
the same time an ID actually hadn't bulk

00:12:26,570 --> 00:12:31,730
in earlier versions where it would

00:12:29,120 --> 00:12:34,220
assume that there's only one main object

00:12:31,730 --> 00:12:37,310
on every geometry so if you had edited

00:12:34,220 --> 00:12:41,140
this with ID with that bulky version it

00:12:37,310 --> 00:12:44,140
would have removed one of these two

00:12:41,140 --> 00:12:44,140
objects

00:12:47,010 --> 00:12:54,480
naturally the question is okay if this

00:12:49,500 --> 00:12:57,710
is so difficult who protects you against

00:12:54,480 --> 00:13:01,200
broken editors the answer is very simple

00:12:57,710 --> 00:13:05,610
nobody there is no verification there's

00:13:01,200 --> 00:13:11,400
no validation there is not even in for

00:13:05,610 --> 00:13:15,510
more tests that you know say okay this

00:13:11,400 --> 00:13:19,500
program is not really broken and there's

00:13:15,510 --> 00:13:22,350
no they don't get blocked so if you have

00:13:19,500 --> 00:13:25,460
a broken editor you can be using it for

00:13:22,350 --> 00:13:29,820
years on end and produce broken stuff

00:13:25,460 --> 00:13:32,460
now there is one singularity in the

00:13:29,820 --> 00:13:33,780
history of openstreetmap and quickly

00:13:32,460 --> 00:13:36,060
want to show you this because this is

00:13:33,780 --> 00:13:40,250
really funny particularly for the people

00:13:36,060 --> 00:13:45,300
that say ban potlatch it's this mail

00:13:40,250 --> 00:13:47,400
from the fifth of july 2009 as some of

00:13:45,300 --> 00:13:50,130
some may have noticed chosen had a

00:13:47,400 --> 00:13:52,740
serious bug causing lat lon of nodes to

00:13:50,130 --> 00:13:55,590
be swapped when moving them and causing

00:13:52,740 --> 00:13:58,710
a chaos at some points but details look

00:13:55,590 --> 00:14:00,840
here this is the actually only case in

00:13:58,710 --> 00:14:04,050
the history of openstreetmap where

00:14:00,840 --> 00:14:06,690
editor was blocked because obviously the

00:14:04,050 --> 00:14:13,710
consequences of swapping lat long are

00:14:06,690 --> 00:14:16,140
fairly drastic so I'm coming to the end

00:14:13,710 --> 00:14:17,550
now the question is you know why can you

00:14:16,140 --> 00:14:20,160
look up all this stuff if you're a

00:14:17,550 --> 00:14:23,510
budding editor developer or if you want

00:14:20,160 --> 00:14:25,980
to choose an editor that actually works

00:14:23,510 --> 00:14:29,130
where do you go and the problem is there

00:14:25,980 --> 00:14:32,340
is no really real good place this is one

00:14:29,130 --> 00:14:35,400
reason why I'm doing this talk there's a

00:14:32,340 --> 00:14:38,430
list in the Vicki that list is actually

00:14:35,400 --> 00:14:41,790
generated was generated automatically

00:14:38,430 --> 00:14:46,410
from the descriptions of the individual

00:14:41,790 --> 00:14:48,960
programs but that's been broken for 23

00:14:46,410 --> 00:14:52,110
years so the list itself is not updated

00:14:48,960 --> 00:14:55,230
and the information in it is not really

00:14:52,110 --> 00:14:57,330
particularly relevant and it's a big to

00:14:55,230 --> 00:14:58,660
do for me to actually put something

00:14:57,330 --> 00:15:03,300
reasonable in place

00:14:58,660 --> 00:15:03,300
so at the end thank you

00:15:10,679 --> 00:15:16,800
so if you are not too angry we will take

00:15:14,619 --> 00:15:16,800
questions

00:15:28,779 --> 00:15:35,660
hi I'm a lazy programmer I don't want to

00:15:32,480 --> 00:15:39,019
mess with all these special cases it's a

00:15:35,660 --> 00:15:42,199
list of official libraries for editing

00:15:39,019 --> 00:15:44,660
who have like my spite on package for

00:15:42,199 --> 00:15:50,329
Revere single aways and doing all these

00:15:44,660 --> 00:15:53,589
checkups look this is one of the things

00:15:50,329 --> 00:15:57,470
that was originally planned for ID

00:15:53,589 --> 00:15:59,480
before it was written was that at least

00:15:57,470 --> 00:16:01,670
all the underlying stuff would be

00:15:59,480 --> 00:16:04,730
modular and you could actually build on

00:16:01,670 --> 00:16:06,410
top of it that didn't actually happen as

00:16:04,730 --> 00:16:10,399
far as I know there's been an effort

00:16:06,410 --> 00:16:14,329
underway to address that and make ID bit

00:16:10,399 --> 00:16:16,670
more modular which would be a real boon

00:16:14,329 --> 00:16:18,649
for the people writing web editors

00:16:16,670 --> 00:16:21,339
because they could base their stuff on

00:16:18,649 --> 00:16:24,079
the logic and ID and otherwise

00:16:21,339 --> 00:16:26,269
essentially boils down to the devil

00:16:24,079 --> 00:16:30,139
developers looking at the code from

00:16:26,269 --> 00:16:32,529
other people and stealing stuff which is

00:16:30,139 --> 00:16:32,529
okay

00:16:38,190 --> 00:16:47,520
I wasn't controversial enough for

00:16:41,100 --> 00:16:49,970
oh I guess we will have lunch then Thank

00:16:47,520 --> 00:16:49,970

YouTube URL: https://www.youtube.com/watch?v=3wg0P32QhO4


