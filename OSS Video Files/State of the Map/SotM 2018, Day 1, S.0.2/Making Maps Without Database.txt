Title: Making Maps Without Database
Publication date: 2018-08-13
Playlist: SotM 2018, Day 1, S.0.2
Description: 
	Thomas Skowron, State of the Map 2018
https://2018.stateofthemap.org/2018/T092-Making_Maps_Without_Database/

The first step of processing OpenStreetMap data is loading it into a PostGIS database, only to retrieve all of it later on. This talk proposes strategies and tools to generate maps without using a database, which has performance benefits as well as better control about the result.
Captions: 
	00:00:02,679 --> 00:00:07,490
well really impressed how many people

00:00:05,540 --> 00:00:09,320
show that by I thought for the first I

00:00:07,490 --> 00:00:12,259
talk I will be just with five people

00:00:09,320 --> 00:00:17,570
here so I wish I prepared a bit better

00:00:12,259 --> 00:00:21,140
but maybe will be interesting anyway so

00:00:17,570 --> 00:00:24,560
today I want to talk about rendering

00:00:21,140 --> 00:00:26,810
Maps without the use of a database I've

00:00:24,560 --> 00:00:28,460
been already talking on the German

00:00:26,810 --> 00:00:32,059
hospice conferences in the last two

00:00:28,460 --> 00:00:33,680
years about it and just I put them on or

00:00:32,059 --> 00:00:35,780
just for reference

00:00:33,680 --> 00:00:36,680
they're probably not very helpful if you

00:00:35,780 --> 00:00:40,519
don't speak German

00:00:36,680 --> 00:00:42,949
but I'll try my best to summarize what

00:00:40,519 --> 00:00:46,940
I've been doing in the last I don't know

00:00:42,949 --> 00:00:50,210
one and a half years and give some

00:00:46,940 --> 00:00:55,339
pointers where I try to head and where I

00:00:50,210 --> 00:00:57,559
look for collaboration and so on so I've

00:00:55,339 --> 00:01:00,470
been talking about when I'm talking

00:00:57,559 --> 00:01:02,269
about rendering it's it's all kind of

00:01:00,470 --> 00:01:04,879
rendering so it's not strictly related

00:01:02,269 --> 00:01:08,420
to vector tides but this has been like

00:01:04,879 --> 00:01:10,670
my main focus because I think that the

00:01:08,420 --> 00:01:14,630
best are an area where there's a lot of

00:01:10,670 --> 00:01:16,970
movement but it might actually work

00:01:14,630 --> 00:01:20,720
in a very similar fashion for bitmaps or

00:01:16,970 --> 00:01:27,740
for large rendered maps or like printing

00:01:20,720 --> 00:01:29,510
and so on because in the end I mean we

00:01:27,740 --> 00:01:31,130
all have like to say pipeline but in the

00:01:29,510 --> 00:01:32,840
end just the output format so different

00:01:31,130 --> 00:01:37,880
font either it's child or it's a large

00:01:32,840 --> 00:01:42,320
file or whatever the start of state of

00:01:37,880 --> 00:01:46,100
the art is basically always the same we

00:01:42,320 --> 00:01:49,550
have the OSM planet we're importing it

00:01:46,100 --> 00:01:51,710
into a Postgres database and then we're

00:01:49,550 --> 00:01:55,070
rendering it this is like that what

00:01:51,710 --> 00:01:58,909
nearly everyone is doing except for few

00:01:55,070 --> 00:02:00,680
exceptions and the whole awesome and

00:01:58,909 --> 00:02:02,659
powerful stuff is in Postgres because

00:02:00,680 --> 00:02:05,750
it's powered by post gears I asked like

00:02:02,659 --> 00:02:09,580
all the spatial operation we can use all

00:02:05,750 --> 00:02:14,270
the geo stuff it is well on the same

00:02:09,580 --> 00:02:16,060
side it's it's a big bottleneck because

00:02:14,270 --> 00:02:19,690
all the

00:02:16,060 --> 00:02:23,020
all the fancy stuff that is in PostGIS

00:02:19,690 --> 00:02:27,340
is not very fast and all the importing

00:02:23,020 --> 00:02:30,130
is also a big bottleneck by the way can

00:02:27,340 --> 00:02:32,340
you hear me properly or am i - it's good

00:02:30,130 --> 00:02:32,340
ok

00:02:32,400 --> 00:02:39,340
and later on when we're rendering the

00:02:37,030 --> 00:02:42,220
whole map it's again a bottleneck so

00:02:39,340 --> 00:02:43,930
either we're putting it into Postgres

00:02:42,220 --> 00:02:46,000
and it's slow or we're taking it out of

00:02:43,930 --> 00:02:48,430
Postgres and focus at surface not very

00:02:46,000 --> 00:02:51,580
fast on post piece itself is fast but

00:02:48,430 --> 00:02:53,470
not be home geospatial stuff and then we

00:02:51,580 --> 00:02:55,810
again have to pull it out through

00:02:53,470 --> 00:03:00,100
network or through socket or whatever

00:02:55,810 --> 00:03:02,530
and it's again not very efficient and

00:03:00,100 --> 00:03:04,209
basically it sucks at any scale because

00:03:02,530 --> 00:03:06,400
for small deployments it's really

00:03:04,209 --> 00:03:08,709
annoying because you have to maintain a

00:03:06,400 --> 00:03:12,610
full import setup which on small

00:03:08,709 --> 00:03:15,970
hardware is just very slow takes a lot

00:03:12,610 --> 00:03:18,780
of time you need to setup like a lot of

00:03:15,970 --> 00:03:21,160
resources for a long amount of time and

00:03:18,780 --> 00:03:25,870
philosophy um it's also not very great

00:03:21,160 --> 00:03:27,609
because and yeah the scale of postage

00:03:25,870 --> 00:03:29,380
will initiate at some point you will

00:03:27,609 --> 00:03:31,959
have to have some reach replicas or

00:03:29,380 --> 00:03:34,780
whatever to to maintain or you will have

00:03:31,959 --> 00:03:36,130
to cache aggressively and then again you

00:03:34,780 --> 00:03:39,430
don't have like some real-time rendering

00:03:36,130 --> 00:03:41,290
but more like ok I try to serve most of

00:03:39,430 --> 00:03:44,200
requests from cache in order to not slow

00:03:41,290 --> 00:03:46,600
down everything and Postgres is really

00:03:44,200 --> 00:03:49,900
awesome it has like tons of features it

00:03:46,600 --> 00:03:52,980
has full SQL as acid MVCC transaction

00:03:49,900 --> 00:03:55,930
and indices it has whole permission

00:03:52,980 --> 00:03:58,930
management it scriptable you can you can

00:03:55,930 --> 00:04:00,970
configure a failover with that but this

00:03:58,930 --> 00:04:03,190
all comes at the cost limited

00:04:00,970 --> 00:04:04,720
performance as I mentioned s operational

00:04:03,190 --> 00:04:07,450
costs you have actually to maintain the

00:04:04,720 --> 00:04:10,030
server is pretty large memory

00:04:07,450 --> 00:04:12,310
consumption and then the question we all

00:04:10,030 --> 00:04:14,889
have to ask ourselves is do we really

00:04:12,310 --> 00:04:16,600
need all of that stuff is it really

00:04:14,889 --> 00:04:20,109
necessary that we have all of these

00:04:16,600 --> 00:04:22,350
awesome things just to render a map

00:04:20,109 --> 00:04:24,030
I mean sure if you have like some

00:04:22,350 --> 00:04:26,650
enterprise-e

00:04:24,030 --> 00:04:27,070
geo information system where you want to

00:04:26,650 --> 00:04:30,070
manage

00:04:27,070 --> 00:04:32,770
hundreds of users and limit who sees

00:04:30,070 --> 00:04:34,870
what and you have like very different

00:04:32,770 --> 00:04:36,850
query twice and so on this might be

00:04:34,870 --> 00:04:39,580
actually very useful but if you're just

00:04:36,850 --> 00:04:43,270
rendering the map we probably don't need

00:04:39,580 --> 00:04:46,080
it and there have been some some

00:04:43,270 --> 00:04:52,300
attempts to improve the whole situation

00:04:46,080 --> 00:04:55,180
and again with with the tools I will be

00:04:52,300 --> 00:04:56,620
talking in a second about you have

00:04:55,180 --> 00:04:59,050
basically the same workflow until

00:04:56,620 --> 00:05:00,940
Postgres but then you're rendering two

00:04:59,050 --> 00:05:03,850
vector tiles basically so you're

00:05:00,940 --> 00:05:06,880
generating smaller or larger vector

00:05:03,850 --> 00:05:09,550
tiles depending on the use case again

00:05:06,880 --> 00:05:13,360
with the same bottlenecks but then

00:05:09,550 --> 00:05:16,810
you're putting it into the kind sorry

00:05:13,360 --> 00:05:18,640
into a client based renderer so you're

00:05:16,810 --> 00:05:24,700
basically delivering to sector Tides to

00:05:18,640 --> 00:05:27,820
two people and so for example open map

00:05:24,700 --> 00:05:30,250
tiles you can get like a set of vector

00:05:27,820 --> 00:05:34,270
tiles from them in an MB tiles container

00:05:30,250 --> 00:05:37,390
and just just serve it with a very

00:05:34,270 --> 00:05:40,270
simple server that just reads this and

00:05:37,390 --> 00:05:42,190
Betar as far and serves it but basically

00:05:40,270 --> 00:05:45,040
all the features already baked in so you

00:05:42,190 --> 00:05:47,050
can't change much after that so there's

00:05:45,040 --> 00:05:49,330
like you can you can of course style it

00:05:47,050 --> 00:05:51,700
differently but you're pretty limited to

00:05:49,330 --> 00:05:53,530
what already is there so for example if

00:05:51,700 --> 00:05:57,580
something is missing in the map that you

00:05:53,530 --> 00:05:59,590
need for example secondary roads on some

00:05:57,580 --> 00:06:01,120
specific zoom level you're out of luck

00:05:59,590 --> 00:06:02,620
you can't change that anymore you would

00:06:01,120 --> 00:06:04,450
have to have another source and then

00:06:02,620 --> 00:06:09,340
merge ties that's and so on and this

00:06:04,450 --> 00:06:12,490
doesn't really improve the situation so

00:06:09,340 --> 00:06:15,220
it's basically this thing so you only

00:06:12,490 --> 00:06:17,980
you only pull a file and and that's all

00:06:15,220 --> 00:06:19,690
and look there have been some

00:06:17,980 --> 00:06:23,920
alternative approaches that go like

00:06:19,690 --> 00:06:26,410
through full pipe one of those is for

00:06:23,920 --> 00:06:30,400
example Tippecanoe which is the software

00:06:26,410 --> 00:06:33,460
for map box and they basically take an

00:06:30,400 --> 00:06:37,060
awesome file and turn it into an MB try

00:06:33,460 --> 00:06:39,220
this vector tile set they have some

00:06:37,060 --> 00:06:40,420
pretty clever features to keep the

00:06:39,220 --> 00:06:43,300
vector tiles small

00:06:40,420 --> 00:06:47,530
because they have different mechanisms

00:06:43,300 --> 00:06:49,600
to remove peaches which would be at the

00:06:47,530 --> 00:06:52,840
same positions for example so that low

00:06:49,600 --> 00:06:54,460
zoom levels you would you wouldn't have

00:06:52,840 --> 00:06:56,850
so many points at the vector tides which

00:06:54,460 --> 00:06:59,650
is very crucial to a real-time rendering

00:06:56,850 --> 00:07:01,840
it also has a gazillion of options it's

00:06:59,650 --> 00:07:05,190
really just just look at the epic atop

00:07:01,840 --> 00:07:08,080
page the best hundreds of switches it's

00:07:05,190 --> 00:07:11,050
not very easy to understand all the time

00:07:08,080 --> 00:07:12,610
and but it's also very limited to

00:07:11,050 --> 00:07:14,500
filtering so it doesn't have all the

00:07:12,610 --> 00:07:17,110
flexibility that I've been talking

00:07:14,500 --> 00:07:19,630
before that we have in post case for

00:07:17,110 --> 00:07:26,560
example or with special libraries like

00:07:19,630 --> 00:07:27,760
Gio's so basically you can do like a for

00:07:26,560 --> 00:07:30,040
example if you want to in vector type

00:07:27,760 --> 00:07:32,200
with all the features in there it's it's

00:07:30,040 --> 00:07:33,610
a great source but if you want to have

00:07:32,200 --> 00:07:35,380
something that is more suitable to

00:07:33,610 --> 00:07:37,930
rendering it's pretty difficult because

00:07:35,380 --> 00:07:40,120
first you have to render those tiles

00:07:37,930 --> 00:07:43,930
then you have to manipulate them somehow

00:07:40,120 --> 00:07:47,290
and tooling is still not very very

00:07:43,930 --> 00:07:49,390
extensive there another software that

00:07:47,290 --> 00:07:56,620
exists is Tribeca from rich per thirst

00:07:49,390 --> 00:07:58,900
and he built a scriptable tool that

00:07:56,620 --> 00:08:03,550
works quite similar to Tippecanoe that

00:07:58,900 --> 00:08:07,540
takes and osm file and turns it into an

00:08:03,550 --> 00:08:09,820
MB tiles vector tile set and it has a

00:08:07,540 --> 00:08:12,310
lot more flexibility because it can use

00:08:09,820 --> 00:08:16,390
Lua scripting inside there so basically

00:08:12,310 --> 00:08:19,030
you can tell time maker to call a Lua

00:08:16,390 --> 00:08:20,980
script for every node for every way for

00:08:19,030 --> 00:08:25,930
every relation and manipulate it with

00:08:20,980 --> 00:08:27,310
all the newer features and but the

00:08:25,930 --> 00:08:30,130
biggest upside is also its biggest

00:08:27,310 --> 00:08:33,070
downside because it's Lua so it's pretty

00:08:30,130 --> 00:08:35,500
slow the the whole operation itself to

00:08:33,070 --> 00:08:38,190
parse the osm file and turn the vector

00:08:35,500 --> 00:08:41,020
tight is pretty fast it's super fast -

00:08:38,190 --> 00:08:43,680
quite efficient could be could be better

00:08:41,020 --> 00:08:47,350
but it's already quite efficient but

00:08:43,680 --> 00:08:48,730
this whole lower things slows it so much

00:08:47,350 --> 00:08:50,920
down but it's not really suitable for

00:08:48,730 --> 00:08:52,540
anything larger than maybe a city or

00:08:50,920 --> 00:08:53,589
like some bigger district or something

00:08:52,540 --> 00:08:58,370
like that

00:08:53,589 --> 00:09:01,550
and if we look at these things we

00:08:58,370 --> 00:09:04,370
realize why does want to need to do

00:09:01,550 --> 00:09:06,140
everything right because basically now

00:09:04,370 --> 00:09:07,580
I've been talking about time I can about

00:09:06,140 --> 00:09:09,589
Tippecanoe and they have like some

00:09:07,580 --> 00:09:11,930
upside some downsides

00:09:09,589 --> 00:09:17,410
there are also libraries that basically

00:09:11,930 --> 00:09:19,880
do very efficient osm file pausing but

00:09:17,410 --> 00:09:21,980
I'm under the impression that everyone

00:09:19,880 --> 00:09:24,470
tries to reinvent the wheel and we're

00:09:21,980 --> 00:09:27,850
not really collaborating although with

00:09:24,470 --> 00:09:31,220
generally all doing the same stuff and

00:09:27,850 --> 00:09:33,529
because in the end it's that one we

00:09:31,220 --> 00:09:38,180
convert or send data and some proper geo

00:09:33,529 --> 00:09:42,470
data format then we filter it then we

00:09:38,180 --> 00:09:45,680
transform my map data to different for

00:09:42,470 --> 00:09:48,200
example different projections not in the

00:09:45,680 --> 00:09:50,240
geographical sense but in a sense of

00:09:48,200 --> 00:09:53,510
okay we just need certain features or

00:09:50,240 --> 00:09:55,760
certain parameters or we convert units

00:09:53,510 --> 00:09:57,380
or something like that and then in the

00:09:55,760 --> 00:10:00,350
end we converted in target format like

00:09:57,380 --> 00:10:03,020
vector tires or the peptides or bigger

00:10:00,350 --> 00:10:05,750
rendered map so basically my suggestion

00:10:03,020 --> 00:10:08,930
is to embrace more of the UNIX

00:10:05,750 --> 00:10:12,200
philosophy that we concatenate tools

00:10:08,930 --> 00:10:16,430
with one another and connect them with

00:10:12,200 --> 00:10:18,650
the standard UNIX pipes so this works as

00:10:16,430 --> 00:10:22,850
following there is like some parsing

00:10:18,650 --> 00:10:24,740
tool that takes the osm file puts out a

00:10:22,850 --> 00:10:28,160
stream and now the tool takes the stream

00:10:24,740 --> 00:10:30,260
maps and reduces the data and puts out a

00:10:28,160 --> 00:10:32,650
stream that can be passed for example to

00:10:30,260 --> 00:10:32,650
a renderer

00:10:32,690 --> 00:10:37,279
but of course that sounds very easy but

00:10:34,490 --> 00:10:39,890
how can we do that how can we realize

00:10:37,279 --> 00:10:42,500
that and this is again with the UNIX

00:10:39,890 --> 00:10:44,480
philosophy each tool does one thing

00:10:42,500 --> 00:10:46,820
perfectly or one thing well and we

00:10:44,480 --> 00:10:48,829
should focus on that for that we need of

00:10:46,820 --> 00:10:52,220
course an exchange data format because

00:10:48,829 --> 00:10:56,029
we need to pass those streams from one -

00:10:52,220 --> 00:10:58,130
to another and maybe maybe let's fix the

00:10:56,029 --> 00:11:01,870
shapefiles who's for share files ah

00:10:58,130 --> 00:11:05,000
scheppers again that's not disabled

00:11:01,870 --> 00:11:06,459
having 4G is people that might be

00:11:05,000 --> 00:11:09,350
actually enough because they're

00:11:06,459 --> 00:11:11,649
regularly or normally doing like smaller

00:11:09,350 --> 00:11:14,480
data sets are they already pre reducing

00:11:11,649 --> 00:11:17,620
but for lateral larger file sets this is

00:11:14,480 --> 00:11:19,879
not an option so maybe let's do SM PBM

00:11:17,620 --> 00:11:22,339
okay not so much left and now let's not

00:11:19,879 --> 00:11:24,529
do our side PBM I sent PDF is not really

00:11:22,339 --> 00:11:28,100
geo data format I mean it has really

00:11:24,529 --> 00:11:30,019
brought us far but they all honestly

00:11:28,100 --> 00:11:33,680
this is not a super format for

00:11:30,019 --> 00:11:37,160
processing because when a program takes

00:11:33,680 --> 00:11:39,290
OSM PBA first step is okay we have to go

00:11:37,160 --> 00:11:41,720
through all this through this large file

00:11:39,290 --> 00:11:44,329
for three times just to collect like all

00:11:41,720 --> 00:11:47,120
the dependencies we need I think as of

00:11:44,329 --> 00:11:48,980
today 64 gigabyte of RAM to do it all in

00:11:47,120 --> 00:11:53,089
memory otherwise is getting even slower

00:11:48,980 --> 00:11:55,220
and it's probably yeah it's it's not the

00:11:53,089 --> 00:11:58,670
right solution we need awesome PBF is

00:11:55,220 --> 00:12:00,170
good for showing osm data for

00:11:58,670 --> 00:12:04,370
serializing awesome data but it's not

00:12:00,170 --> 00:12:07,569
good for for geo data in general and

00:12:04,370 --> 00:12:09,439
there is also one thing that we're not

00:12:07,569 --> 00:12:11,060
generally if you're rendering a map

00:12:09,439 --> 00:12:12,680
you're not only taking or some data but

00:12:11,060 --> 00:12:14,810
generally you'll also have some

00:12:12,680 --> 00:12:16,430
different data sources like natural flow

00:12:14,810 --> 00:12:18,800
to your names or whatever that are

00:12:16,430 --> 00:12:21,259
already pre processed in some narrow may

00:12:18,800 --> 00:12:24,500
be generalized or so on so we really

00:12:21,259 --> 00:12:26,959
need a super file file format which can

00:12:24,500 --> 00:12:29,290
basically have a superset of all that

00:12:26,959 --> 00:12:29,290
stuff

00:12:29,589 --> 00:12:35,529
such a file format would meet very high

00:12:32,630 --> 00:12:39,019
performance so linear writing

00:12:35,529 --> 00:12:43,189
polarizable reads it needs to be

00:12:39,019 --> 00:12:45,230
scalable so small data sets could should

00:12:43,189 --> 00:12:48,559
be working but also huge data set should

00:12:45,230 --> 00:12:50,269
work we need tagging structures so not

00:12:48,559 --> 00:12:52,100
like in shape files that we have like an

00:12:50,269 --> 00:12:54,829
attribute table and we have to decide up

00:12:52,100 --> 00:12:57,019
front okay which keys will we have but

00:12:54,829 --> 00:13:01,279
we need like some more flexible text

00:12:57,019 --> 00:13:04,550
structure with type data type data like

00:13:01,279 --> 00:13:07,639
we need integers or floats or boolean's

00:13:04,550 --> 00:13:10,339
and so on I also needs to be future

00:13:07,639 --> 00:13:13,920
proof so we've seen with other formats

00:13:10,339 --> 00:13:16,170
that yeah they're quite segments

00:13:13,920 --> 00:13:18,209
so let's look at shape file share files

00:13:16,170 --> 00:13:21,449
have a moderate performance they're not

00:13:18,209 --> 00:13:23,670
that bad binary it's actually quite ok

00:13:21,449 --> 00:13:25,679
not really scalable to geeks file limits

00:13:23,670 --> 00:13:28,980
I think some tricks to get it to four

00:13:25,679 --> 00:13:30,899
gigs they don't have a text structure

00:13:28,980 --> 00:13:32,759
they not really future-proof because

00:13:30,899 --> 00:13:36,899
nothing has changed in the last I don't

00:13:32,759 --> 00:13:39,059
know how many years GOG she has a

00:13:36,899 --> 00:13:41,459
moderate performance the problem of

00:13:39,059 --> 00:13:46,519
scalability is it's always single

00:13:41,459 --> 00:13:48,509
threaded and so it's you can't really

00:13:46,519 --> 00:13:51,359
breathe there's a stream because it

00:13:48,509 --> 00:13:53,519
always starts with a with a curly brace

00:13:51,359 --> 00:13:56,309
and ends with a curly brace so there are

00:13:53,519 --> 00:13:59,369
some tricks with this Geo Jason sack the

00:13:56,309 --> 00:14:02,369
sequence stuff but it's really more or

00:13:59,369 --> 00:14:04,139
less of a hack it hasn't a tax structure

00:14:02,369 --> 00:14:06,689
and it's trying to future-proof because

00:14:04,139 --> 00:14:10,410
you can include additional data into

00:14:06,689 --> 00:14:13,199
Intergeo jason and then there's the

00:14:10,410 --> 00:14:15,149
newest kid on the block geo package

00:14:13,199 --> 00:14:18,209
performance not really great because

00:14:15,149 --> 00:14:19,619
it's SQLite and SQLite is great for lot

00:14:18,209 --> 00:14:20,939
of stuff but it's not really great to

00:14:19,619 --> 00:14:24,029
see relies a large amount of data

00:14:20,939 --> 00:14:25,799
because you are always bottleneck it's

00:14:24,029 --> 00:14:28,350
it's always strictly single threaded and

00:14:25,799 --> 00:14:30,089
so on not really scalable of course you

00:14:28,350 --> 00:14:33,600
can have to order data sets for a bit it

00:14:30,089 --> 00:14:35,579
gets really really slow and it has it

00:14:33,600 --> 00:14:38,540
takes structure and it's kind of future

00:14:35,579 --> 00:14:44,730
briefings quite right at the beginning

00:14:38,540 --> 00:14:48,809
so if we look at a diagram with the two

00:14:44,730 --> 00:14:51,899
axis of flexibility of performance we

00:14:48,809 --> 00:14:53,040
have like kind of solutions in this area

00:14:51,899 --> 00:14:54,929
we have things that are very flexible

00:14:53,040 --> 00:15:00,869
not very fast we have things that are

00:14:54,929 --> 00:15:03,449
less flexible a bit faster but we need

00:15:00,869 --> 00:15:05,160
something over there we need something

00:15:03,449 --> 00:15:07,379
that is very flexible and has high

00:15:05,160 --> 00:15:11,939
performance so we can do actual stream

00:15:07,379 --> 00:15:14,279
data processing and I think that the

00:15:11,939 --> 00:15:17,069
existing solutions are very suitable we

00:15:14,279 --> 00:15:20,519
need something new and we need some kind

00:15:17,069 --> 00:15:22,289
of progress so we need to reiterate what

00:15:20,519 --> 00:15:25,759
such a file format would meet as it

00:15:22,289 --> 00:15:27,250
needs to be binary it needs to have

00:15:25,759 --> 00:15:29,980
blocks

00:15:27,250 --> 00:15:33,730
some kind of suitable so we can pass it

00:15:29,980 --> 00:15:35,889
to workers while while passing it has to

00:15:33,730 --> 00:15:37,569
be a single stream not multiple parts

00:15:35,889 --> 00:15:40,839
like for example shapefiles but it's

00:15:37,569 --> 00:15:43,060
really difficult to to pass it around it

00:15:40,839 --> 00:15:45,160
shouldn't be escalated because yes

00:15:43,060 --> 00:15:47,139
blight has its limitations it shouldn't

00:15:45,160 --> 00:15:53,079
be overly obscure and it should be open

00:15:47,139 --> 00:15:56,860
at extendable and after discussing

00:15:53,079 --> 00:16:01,389
several people I've came up with the

00:15:56,860 --> 00:16:03,910
solution introducing a new faith data

00:16:01,389 --> 00:16:09,310
format coach Martin it that's German for

00:16:03,910 --> 00:16:11,350
space you know the gun tool and it's but

00:16:09,310 --> 00:16:13,720
it's not something super obscure super

00:16:11,350 --> 00:16:17,740
new it's basically based on protocol

00:16:13,720 --> 00:16:21,009
buffers like the OSM PDF format and wkb

00:16:17,740 --> 00:16:25,269
which is one more binary which also used

00:16:21,009 --> 00:16:27,100
by postgis internally there is an open

00:16:25,269 --> 00:16:31,050
specification which describes how the

00:16:27,100 --> 00:16:34,809
format works and which has the whole

00:16:31,050 --> 00:16:37,750
throttle buff definition files I've

00:16:34,809 --> 00:16:40,120
written one reference implementation ago

00:16:37,750 --> 00:16:43,949
which is already connected with some

00:16:40,120 --> 00:16:43,949
tools I will show you in a second and

00:16:44,160 --> 00:16:49,120
it's around 50 percent smaller than Geo

00:16:47,620 --> 00:16:51,339
Jason but of course your mileage may

00:16:49,120 --> 00:16:53,529
vary that depends highly on the data

00:16:51,339 --> 00:16:56,649
you're using and it's still very version

00:16:53,529 --> 00:16:59,079
zero so there is one implementation it

00:16:56,649 --> 00:17:04,150
could also it can change at any corner

00:16:59,079 --> 00:17:07,569
it is very extensible so let's talk it

00:17:04,150 --> 00:17:09,309
would be great if if we meet during the

00:17:07,569 --> 00:17:11,740
conference you can you can talk to me

00:17:09,309 --> 00:17:14,559
let's see maybe we can discuss some

00:17:11,740 --> 00:17:19,929
things how to improve that or if we can

00:17:14,559 --> 00:17:21,939
extend that to you use case and but the

00:17:19,929 --> 00:17:23,650
big question is why why am i coming up

00:17:21,939 --> 00:17:28,120
with all of that what could we do with

00:17:23,650 --> 00:17:31,980
that you can already as of today and use

00:17:28,120 --> 00:17:35,399
it to use my tools which I built for

00:17:31,980 --> 00:17:39,070
ingesting osm data and to put out files

00:17:35,399 --> 00:17:41,409
vector tiles there is there are already

00:17:39,070 --> 00:17:43,389
tools which are basically

00:17:41,409 --> 00:17:47,080
spitting out this rotten comment or

00:17:43,389 --> 00:17:48,820
thing I did it and in the future we

00:17:47,080 --> 00:17:51,340
might actually interchange those tools

00:17:48,820 --> 00:17:53,590
so for example if one day Osman was

00:17:51,340 --> 00:17:57,129
supported we could theoretically use all

00:17:53,590 --> 00:18:00,879
the optimized power of osmium to take in

00:17:57,129 --> 00:18:04,059
all of osm data spit it out and Spartan

00:18:00,879 --> 00:18:05,830
format and use some other tools there

00:18:04,059 --> 00:18:07,000
and it doesn't have to be my tools my

00:18:05,830 --> 00:18:09,159
tools are just some reference

00:18:07,000 --> 00:18:12,190
implementations I am pretty sure that

00:18:09,159 --> 00:18:15,730
you people can come up with much better

00:18:12,190 --> 00:18:18,759
tools that will fancified and magically

00:18:15,730 --> 00:18:21,309
render things to your wishes and that we

00:18:18,759 --> 00:18:25,929
could interchange tools truly without

00:18:21,309 --> 00:18:29,559
using a database so what does the future

00:18:25,929 --> 00:18:33,039
bring I think greater flexibility with

00:18:29,559 --> 00:18:35,950
less programming works so we should look

00:18:33,039 --> 00:18:40,320
for example for some mapping language

00:18:35,950 --> 00:18:43,419
that does like common operations so

00:18:40,320 --> 00:18:47,350
converting for example from feet to some

00:18:43,419 --> 00:18:51,389
same amount same metric system for

00:18:47,350 --> 00:18:54,220
example or to convert data that we need

00:18:51,389 --> 00:18:58,480
to to something that is suitable for

00:18:54,220 --> 00:19:00,100
example or a vector tile renderer we

00:18:58,480 --> 00:19:01,419
could do faster processing with less

00:19:00,100 --> 00:19:02,019
hardware because we don't have this

00:19:01,419 --> 00:19:04,980
bottlenecks

00:19:02,019 --> 00:19:07,509
and we would have less points of here so

00:19:04,980 --> 00:19:11,470
they wouldn't need like a network

00:19:07,509 --> 00:19:14,860
connected database and so on there's

00:19:11,470 --> 00:19:18,370
still lots of stuff to do let's build

00:19:14,860 --> 00:19:20,259
this stuff together let's see what what

00:19:18,370 --> 00:19:22,679
the tools can do what you can do for the

00:19:20,259 --> 00:19:25,570
tools and what what your wishes are and

00:19:22,679 --> 00:19:28,240
now let's discuss what what you expect

00:19:25,570 --> 00:19:33,809
and what you would need from from such a

00:19:28,240 --> 00:19:33,809
touching ok

00:19:33,990 --> 00:19:37,339
[Applause]

00:19:39,030 --> 00:19:46,750
hello Paul Norman one of those sentient

00:19:42,730 --> 00:19:48,430
ug sequel developers one of the so just

00:19:46,750 --> 00:19:51,070
a couple of things you've mentioned Luo

00:19:48,430 --> 00:19:52,630
with regard to trial maker yeah having

00:19:51,070 --> 00:19:56,050
worked with tile makers with Wells with

00:19:52,630 --> 00:19:58,270
fluid to be to sequel u-turn now that

00:19:56,050 --> 00:20:00,970
the bottleneck is not it's not the Lua

00:19:58,270 --> 00:20:04,330
that's actually quite fast with

00:20:00,970 --> 00:20:08,080
FileMaker is that it is generating this

00:20:04,330 --> 00:20:11,200
huge in-memory set of all the vector

00:20:08,080 --> 00:20:12,460
tiles which for the planet is route

00:20:11,200 --> 00:20:16,990
means you need to have a terabyte of RAM

00:20:12,460 --> 00:20:19,180
er there about this which is yes the

00:20:16,990 --> 00:20:22,120
other thing is something common to many

00:20:19,180 --> 00:20:23,830
of these folks is that either they need

00:20:22,120 --> 00:20:26,190
some persistent database such as map

00:20:23,830 --> 00:20:29,290
with matte box carry cloud-based

00:20:26,190 --> 00:20:32,080
internal system or in the case of tile

00:20:29,290 --> 00:20:34,240
maker or Tiffany they've abandoned doing

00:20:32,080 --> 00:20:37,120
minimally update ik not only region rate

00:20:34,240 --> 00:20:40,000
everything at once yeah do you see your

00:20:37,120 --> 00:20:42,130
system going that way as well only being

00:20:40,000 --> 00:20:45,340
able to generate everything at once yeah

00:20:42,130 --> 00:20:48,790
I mean this is this is the idea I have

00:20:45,340 --> 00:20:51,250
some experimental stuff that writes all

00:20:48,790 --> 00:20:54,130
the vector tiles at once just not in

00:20:51,250 --> 00:20:55,960
memory but on this it opens like a ton

00:20:54,130 --> 00:20:57,640
of file descriptors I think tippecanoe

00:20:55,960 --> 00:20:59,800
is doing the same stuff that they open

00:20:57,640 --> 00:21:01,510
like all the files that I needed for the

00:20:59,800 --> 00:21:03,310
vector tiles and then rendering

00:21:01,510 --> 00:21:05,140
everything in one go because it's faster

00:21:03,310 --> 00:21:08,590
than just jumping in a memory all the

00:21:05,140 --> 00:21:10,900
time and the issue you mentioned Potomac

00:21:08,590 --> 00:21:12,490
and the Lua I think the biggest cost is

00:21:10,900 --> 00:21:14,920
that they're initializing this lure

00:21:12,490 --> 00:21:19,420
interpreter somehow I think this could

00:21:14,920 --> 00:21:23,200
be somehow optimized but I haven't got

00:21:19,420 --> 00:21:24,970
it to work in in a proper manner and if

00:21:23,200 --> 00:21:27,790
you don't use some scripting

00:21:24,970 --> 00:21:31,930
you're pretty limited to just very

00:21:27,790 --> 00:21:33,610
simple filtering basically so yeah but

00:21:31,930 --> 00:21:37,360
do you see what you're dealing with

00:21:33,610 --> 00:21:39,640
eventually be able to consume I'm sure

00:21:37,360 --> 00:21:42,490
I've been thinking and talking about

00:21:39,640 --> 00:21:44,200
this this is not the focus for the

00:21:42,490 --> 00:21:47,440
beginning because I want to have like a

00:21:44,200 --> 00:21:48,039
stable process and I want to understand

00:21:47,440 --> 00:21:50,379
what people

00:21:48,039 --> 00:21:52,330
need and how we could go into this way

00:21:50,379 --> 00:21:54,340
of pipeline processing of course in the

00:21:52,330 --> 00:21:55,809
future it would be great to consume mini

00:21:54,340 --> 00:21:57,729
lives but the problem with ministry

00:21:55,809 --> 00:21:59,109
lives is they're not complete you need

00:21:57,729 --> 00:22:01,359
to have like some kind of augmentative

00:21:59,109 --> 00:22:04,299
and the system and again the problem

00:22:01,359 --> 00:22:06,970
with the API of the database

00:22:04,299 --> 00:22:08,679
yeah you need a database so again the

00:22:06,970 --> 00:22:10,419
the thing I was talking about let's do

00:22:08,679 --> 00:22:12,100
it without database again we need some

00:22:10,419 --> 00:22:13,929
kind of maybe specialized database that

00:22:12,100 --> 00:22:15,309
reference the objects and so on I think

00:22:13,929 --> 00:22:18,159
that would be doable have been tools

00:22:15,309 --> 00:22:20,759
like import more soul to this XA exact

00:22:18,159 --> 00:22:22,629
stuff that they have like only

00:22:20,759 --> 00:22:25,509
additionally to the Postgres database

00:22:22,629 --> 00:22:29,229
they have like a on this flat file

00:22:25,509 --> 00:22:31,899
database that has the the element

00:22:29,229 --> 00:22:32,499
caching so they can restore it sure

00:22:31,899 --> 00:22:35,950
someday

00:22:32,499 --> 00:22:38,499
of course but first we would need some

00:22:35,950 --> 00:22:46,419
some storage format on this to make it

00:22:38,499 --> 00:22:48,700
work I guess more questions or

00:22:46,419 --> 00:22:57,609
suggestions or something completely

00:22:48,700 --> 00:22:59,799
unclear hi thanks for a talk because I

00:22:57,609 --> 00:23:03,789
mentioned you have like parse MapReduce

00:22:59,799 --> 00:23:07,359
and rendering I saw you have a golem

00:23:03,789 --> 00:23:12,609
library for for your format yeah do you

00:23:07,359 --> 00:23:14,919
have any like incorporation waves or

00:23:12,609 --> 00:23:16,899
some other my mature MapReduce framework

00:23:14,919 --> 00:23:20,289
to to load your format or interact with

00:23:16,899 --> 00:23:22,830
the format like sorry it's it's it's not

00:23:20,289 --> 00:23:25,359
your fault it's just I think to quiet

00:23:22,830 --> 00:23:26,979
probably I would just come over to you

00:23:25,359 --> 00:23:29,019
because I can't hear you properly

00:23:26,979 --> 00:23:31,979
okay yeah yeah my question is do you

00:23:29,019 --> 00:23:34,059
have any other kind of library to

00:23:31,979 --> 00:23:36,009
interact with your data format with

00:23:34,059 --> 00:23:40,269
other mature MapReduce for them who

00:23:36,009 --> 00:23:42,369
spoke either Python Scala or episode you

00:23:40,269 --> 00:23:46,889
having any benchmarking with all the

00:23:42,369 --> 00:23:49,210
other formats Thanks no I don't have

00:23:46,889 --> 00:23:54,099
another implementation I just have to go

00:23:49,210 --> 00:23:56,409
implementation for now I want to build a

00:23:54,099 --> 00:23:59,480
Python implementation because that would

00:23:56,409 --> 00:24:01,580
enable for example also opening

00:23:59,480 --> 00:24:03,290
on this Martin fights in Cuba's for

00:24:01,580 --> 00:24:07,910
example because you can pretty easily

00:24:03,290 --> 00:24:10,340
integrate Cuba's with or Python

00:24:07,910 --> 00:24:16,220
libraries into queue guess I don't have

00:24:10,340 --> 00:24:19,130
benchmarks for that it is I can show you

00:24:16,220 --> 00:24:21,890
some benchmarks of my own file format

00:24:19,130 --> 00:24:25,160
and my own library but I don't have any

00:24:21,890 --> 00:24:27,440
comparisons with with other file formats

00:24:25,160 --> 00:24:28,940
so sure we can we can patch mark this

00:24:27,440 --> 00:24:32,410
and have a look at that I think that

00:24:28,940 --> 00:24:32,410
makes sense yeah thanks

00:24:38,890 --> 00:24:40,950
you

00:24:50,060 --> 00:24:54,960
do you have in mind

00:24:52,140 --> 00:24:57,930
some process of this format I can accept

00:24:54,960 --> 00:25:02,640
a replacement or for example one area

00:24:57,930 --> 00:25:07,890
with other data yeah so you can merge

00:25:02,640 --> 00:25:11,070
yeah yeah I have a converter tool which

00:25:07,890 --> 00:25:12,960
can convert between geo Jason and my

00:25:11,070 --> 00:25:15,120
file format and could also work with

00:25:12,960 --> 00:25:20,430
others and this can also concatenate

00:25:15,120 --> 00:25:22,890
files so if you have for example I built

00:25:20,430 --> 00:25:25,680
a H button file with I think the Geo

00:25:22,890 --> 00:25:30,990
names names because then it's easier to

00:25:25,680 --> 00:25:33,270
for example render a low zoom level map

00:25:30,990 --> 00:25:35,130
because then you just take or you take I

00:25:33,270 --> 00:25:37,770
don't know natural for the for the

00:25:35,130 --> 00:25:39,270
coastlines and for the rivers and then

00:25:37,770 --> 00:25:42,810
you take geo names and then you can take

00:25:39,270 --> 00:25:45,060
osm and so on and this is kind of this

00:25:42,810 --> 00:25:46,770
is also well one thing I kept in mind

00:25:45,060 --> 00:25:51,780
because it's I think it's very important

00:25:46,770 --> 00:25:53,460
to merge different file sources yeah

00:25:51,780 --> 00:25:58,200
that's that's what we all do basically

00:25:53,460 --> 00:26:00,930
when rendering a map and yes this this

00:25:58,200 --> 00:26:02,910
is kind of possible already but of

00:26:00,930 --> 00:26:04,170
course I think this is one of the key

00:26:02,910 --> 00:26:07,590
components we should really think about

00:26:04,170 --> 00:26:10,110
and and get it integrated yeah I I've

00:26:07,590 --> 00:26:12,180
been doing already this and I think and

00:26:10,110 --> 00:26:14,100
this is a problem that a lot of other

00:26:12,180 --> 00:26:15,630
tools don't do so for example time at

00:26:14,100 --> 00:26:18,410
gets kind of difficult because you first

00:26:15,630 --> 00:26:21,540
would need to convert to us and PDF and

00:26:18,410 --> 00:26:25,590
then and then do it backwards and this

00:26:21,540 --> 00:26:31,650
is kind of pointless so yeah that's very

00:26:25,590 --> 00:26:35,340
important to me okay I think we're out

00:26:31,650 --> 00:26:38,930
of time anyway so thank you we can we

00:26:35,340 --> 00:26:42,390
can discuss up have one more minute or

00:26:38,930 --> 00:26:44,880
okay great I don't want to steal the

00:26:42,390 --> 00:26:47,400
pulse from them yet very quickly did you

00:26:44,880 --> 00:26:49,860
show us the link to you Dalila oh yeah

00:26:47,400 --> 00:26:54,870
sure I will put up the slides I hope I

00:26:49,860 --> 00:26:57,210
will upload them somewhere yeah it's

00:26:54,870 --> 00:27:03,030
basically you can you can go on to the

00:26:57,210 --> 00:27:06,240
Grand Dean github repository everything

00:27:03,030 --> 00:27:08,000
is linked from there and you can have a

00:27:06,240 --> 00:27:10,710
look and if you have any questions just

00:27:08,000 --> 00:27:14,810
just come to me at the conference or

00:27:10,710 --> 00:27:14,810
afterwards just send me an email and

00:27:16,460 --> 00:27:21,650
okay thank you very much have a nice

00:27:19,440 --> 00:27:21,650

YouTube URL: https://www.youtube.com/watch?v=1eS8wao92o8


