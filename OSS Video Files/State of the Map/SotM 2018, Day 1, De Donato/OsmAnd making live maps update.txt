Title: OsmAnd making live maps update
Publication date: 2018-09-21
Playlist: SotM 2018, Day 1, De Donato
Description: 
	Victor Shcherb (OsmAnd), State of the Map 2018
https://2018.stateofthemap.org/2018/T058-OsmAnd_making_live_maps_update/

I would like to explain what difficulties we encountered while making OsmAnd maps updated every hour / every 5 minutes.
Captions: 
	00:00:00,030 --> 00:00:07,790
thank you my name is Victor sharp and

00:00:03,259 --> 00:00:11,490
I'm a founder of Osmond project

00:00:07,790 --> 00:00:14,670
basically Osmond is a mobile application

00:00:11,490 --> 00:00:19,770
which serves for maps and navigation of

00:00:14,670 --> 00:00:22,710
line and first few words about Osmonds

00:00:19,770 --> 00:00:25,800
quickly so the project was started about

00:00:22,710 --> 00:00:29,070
80 years ago and so far it was growing

00:00:25,800 --> 00:00:32,730
steadily but so far we still have a

00:00:29,070 --> 00:00:36,030
small team working on this product it's

00:00:32,730 --> 00:00:37,950
about 10 people but we have since the

00:00:36,030 --> 00:00:40,829
first day it was an open source project

00:00:37,950 --> 00:00:43,800
by itself so we've grown a good

00:00:40,829 --> 00:00:46,920
community and so far we have a really

00:00:43,800 --> 00:00:49,590
huge number of contributors I would say

00:00:46,920 --> 00:00:52,260
only about hundred people contributed to

00:00:49,590 --> 00:00:55,230
to the code and more than ourselves and

00:00:52,260 --> 00:00:57,000
contributed to translation projects we

00:00:55,230 --> 00:00:59,760
really appreciate it and I would like to

00:00:57,000 --> 00:01:05,040
thank you everybody contributed so far

00:00:59,760 --> 00:01:10,049
and we make an application for that is

00:01:05,040 --> 00:01:12,150
used by about 1 million users today and

00:01:10,049 --> 00:01:16,920
today I will be talking about how we

00:01:12,150 --> 00:01:19,409
make our Maps live basically how do we

00:01:16,920 --> 00:01:23,189
manage life updates on a flying

00:01:19,409 --> 00:01:26,729
navigation basically on mobile devices

00:01:23,189 --> 00:01:30,900
so to understand the problem we can take

00:01:26,729 --> 00:01:34,290
for example the map of Italy or of this

00:01:30,900 --> 00:01:38,040
region Lombardi so which is around 200

00:01:34,290 --> 00:01:41,549
megabytes announcement and which takes

00:01:38,040 --> 00:01:44,280
to update just the region itself to

00:01:41,549 --> 00:01:44,729
generate the map it takes around 3-4

00:01:44,280 --> 00:01:48,360
hours

00:01:44,729 --> 00:01:50,810
so and the situation we ended up is that

00:01:48,360 --> 00:01:54,299
we generate maps only once a month

00:01:50,810 --> 00:01:56,490
and it takes us around 10 days and

00:01:54,299 --> 00:01:58,049
obviously it is quite annoying for

00:01:56,490 --> 00:01:59,939
people who are contributing to

00:01:58,049 --> 00:02:03,420
OpenStreetMap and they would like to use

00:01:59,939 --> 00:02:06,240
Osmund offline it's quite annoying to

00:02:03,420 --> 00:02:10,020
wait one month to to check their changes

00:02:06,240 --> 00:02:11,240
and redownload needless to say that we

00:02:10,020 --> 00:02:14,390
download in two hundred

00:02:11,240 --> 00:02:18,290
megabytes also cost some money and

00:02:14,390 --> 00:02:20,900
usually quite some time so we've been

00:02:18,290 --> 00:02:22,730
working quite a long time how to

00:02:20,900 --> 00:02:24,890
introduce incremental updates a main

00:02:22,730 --> 00:02:27,080
change here that we don't distribute

00:02:24,890 --> 00:02:29,930
maps by tiles we distribute the whole

00:02:27,080 --> 00:02:32,630
region and obviously we need to

00:02:29,930 --> 00:02:35,540
implement a Delta mechanism so we ended

00:02:32,630 --> 00:02:38,480
up implemented the map updates which are

00:02:35,540 --> 00:02:41,930
reasonably small and reasonably fast to

00:02:38,480 --> 00:02:45,410
download as well it's about one megabyte

00:02:41,930 --> 00:02:48,290
per counter ecoregion the whole day of

00:02:45,410 --> 00:02:51,620
changes we try to generate these updates

00:02:48,290 --> 00:02:54,380
every 10 minutes and we also managed to

00:02:51,620 --> 00:02:57,080
deliver and we strive to deliver this

00:02:54,380 --> 00:02:59,120
update every 15 minutes so it means if

00:02:57,080 --> 00:03:02,300
you make a change in OpenStreetMap site

00:02:59,120 --> 00:03:07,100
or by josma so in 15 minutes you can

00:03:02,300 --> 00:03:11,990
already see these changes in osmond

00:03:07,100 --> 00:03:14,570
project so this is about it but let's

00:03:11,990 --> 00:03:18,460
talk about how we do it and what does it

00:03:14,570 --> 00:03:21,520
mean to build that incremental update

00:03:18,460 --> 00:03:24,470
the specific here that you cannot make

00:03:21,520 --> 00:03:27,050
incremental formatter incremental update

00:03:24,470 --> 00:03:29,990
Universal that's actually the biggest

00:03:27,050 --> 00:03:32,840
struggle that you always need to target

00:03:29,990 --> 00:03:35,810
your format which your application uses

00:03:32,840 --> 00:03:39,040
so in case your application is a simple

00:03:35,810 --> 00:03:42,470
OpenStreetMap data base then you target

00:03:39,040 --> 00:03:45,410
simple tables like node wave relations

00:03:42,470 --> 00:03:47,870
and your D format is a standard or a C

00:03:45,410 --> 00:03:49,850
format but in case you are doing for

00:03:47,870 --> 00:03:52,270
example map renderings and your format

00:03:49,850 --> 00:03:56,350
is already different because you store

00:03:52,270 --> 00:04:01,010
in the different columns and your native

00:03:56,350 --> 00:04:02,810
D format would be of course GDL but

00:04:01,010 --> 00:04:05,600
unfortunately it's not provided as far

00:04:02,810 --> 00:04:09,140
as I know that's why everybody basically

00:04:05,600 --> 00:04:11,000
spends a lot of time on rebuilding this

00:04:09,140 --> 00:04:13,280
update on machine itself and then

00:04:11,000 --> 00:04:15,470
updating the database in our case it's

00:04:13,280 --> 00:04:18,380
even more complicated because our format

00:04:15,470 --> 00:04:21,470
is just a file based format binary

00:04:18,380 --> 00:04:23,690
format and we needed to build lots of

00:04:21,470 --> 00:04:25,590
things from scratch and that's what I

00:04:23,690 --> 00:04:28,530
will be explaining today what if

00:04:25,590 --> 00:04:29,870
oh geez so our binary formula consists

00:04:28,530 --> 00:04:32,820
mostly of five layers

00:04:29,870 --> 00:04:34,830
Metro drafty oh I transport an address

00:04:32,820 --> 00:04:38,160
and so far we don't support on the

00:04:34,830 --> 00:04:41,669
address updates but for each layer we

00:04:38,160 --> 00:04:44,490
had to implement a special logic so

00:04:41,669 --> 00:04:46,560
important to say that always when you

00:04:44,490 --> 00:04:47,970
think about to implement update

00:04:46,560 --> 00:04:50,100
mechanism you need to find your

00:04:47,970 --> 00:04:52,050
primitives and then think how do you

00:04:50,100 --> 00:04:55,080
update the primitives itself in

00:04:52,050 --> 00:04:58,740
OpenStreetMap the primitives node weight

00:04:55,080 --> 00:05:01,500
and relations but for almost every

00:04:58,740 --> 00:05:04,350
applications they come up with their own

00:05:01,500 --> 00:05:06,600
primitives for example for map rendering

00:05:04,350 --> 00:05:09,990
you need to have a geometric object

00:05:06,600 --> 00:05:12,540
which is polygons line and point for

00:05:09,990 --> 00:05:14,460
oten is basically the line but for

00:05:12,540 --> 00:05:16,800
example for address and pure why it's

00:05:14,460 --> 00:05:18,840
more difficulty because it's actually as

00:05:16,800 --> 00:05:21,930
a primitive search keyword and search

00:05:18,840 --> 00:05:25,410
keyword result and that means that you

00:05:21,930 --> 00:05:27,419
really need to structure it differently

00:05:25,410 --> 00:05:29,310
also to identify the changes you need to

00:05:27,419 --> 00:05:31,919
have versioning but personally not

00:05:29,310 --> 00:05:34,680
OpenStreetMap but on your primitives so

00:05:31,919 --> 00:05:37,590
in our case we could translate a G+

00:05:34,680 --> 00:05:40,770
version to our primitives but on the

00:05:37,590 --> 00:05:44,130
other hand that comes with the problems

00:05:40,770 --> 00:05:46,620
that when you change a node in the line

00:05:44,130 --> 00:05:48,660
it changes geometry but on the other

00:05:46,620 --> 00:05:51,419
hand it doesn't change any versioning on

00:05:48,660 --> 00:05:53,970
the line in OpenStreetMap because way it

00:05:51,419 --> 00:05:55,830
stays untouched and that creates a

00:05:53,970 --> 00:05:57,990
problem and that's why you need to come

00:05:55,830 --> 00:06:04,200
up with different version in mechanism

00:05:57,990 --> 00:06:06,780
in there so it was always a really

00:06:04,200 --> 00:06:09,240
certaPro CH we were trying to build

00:06:06,780 --> 00:06:11,729
those month life because we did some

00:06:09,240 --> 00:06:14,070
mistakes so we this time we did it much

00:06:11,729 --> 00:06:16,919
better and what I would say is that we

00:06:14,070 --> 00:06:19,020
what I could share which requirements we

00:06:16,919 --> 00:06:21,599
put once we started against a big

00:06:19,020 --> 00:06:25,349
refactoring so it's important that you

00:06:21,599 --> 00:06:27,840
can always regenerate the Delta divs in

00:06:25,349 --> 00:06:30,479
the past so in case something happened

00:06:27,840 --> 00:06:33,300
and you are starting delaine's updates

00:06:30,479 --> 00:06:34,890
you can not only catch up with that but

00:06:33,300 --> 00:06:35,820
you can also go in the past and to

00:06:34,890 --> 00:06:37,350
correct mistakes

00:06:35,820 --> 00:06:39,390
it sounds of course

00:06:37,350 --> 00:06:40,980
not normal that you can go in the past

00:06:39,390 --> 00:06:43,500
and fix changes but actually it

00:06:40,980 --> 00:06:46,110
simplifies your life in a

00:06:43,500 --> 00:06:49,440
troubleshooting and maintaining the

00:06:46,110 --> 00:06:51,780
whole solution another important thing

00:06:49,440 --> 00:06:53,730
is a speed it's actually very important

00:06:51,780 --> 00:06:56,700
if you cannot generate the spinach

00:06:53,730 --> 00:06:58,290
generate changes fast enough you will

00:06:56,700 --> 00:07:00,210
basically end up always trying to catch

00:06:58,290 --> 00:07:02,190
up and in one moment something goes

00:07:00,210 --> 00:07:04,410
wrong and you will never catch the live

00:07:02,190 --> 00:07:06,360
stream so it's always recommended to

00:07:04,410 --> 00:07:09,560
measure it and your speed should be at

00:07:06,360 --> 00:07:12,300
least two times a factor of two of

00:07:09,560 --> 00:07:14,520
changes stream so it means if you want

00:07:12,300 --> 00:07:16,740
to generate ten minutes updates you need

00:07:14,520 --> 00:07:18,600
to do it in five minutes at least

00:07:16,740 --> 00:07:21,300
and of course tools should be resilient

00:07:18,600 --> 00:07:23,610
and data is better to be backed up by a

00:07:21,300 --> 00:07:25,830
third party in case you end up with a

00:07:23,610 --> 00:07:28,710
corrupted data which we did this year

00:07:25,830 --> 00:07:30,870
four times it's always possible to

00:07:28,710 --> 00:07:32,520
redownload it from third party that

00:07:30,870 --> 00:07:34,740
doesn't mean that the data is not backed

00:07:32,520 --> 00:07:37,830
up it means the data could become

00:07:34,740 --> 00:07:39,870
corrupted that's why it's important to

00:07:37,830 --> 00:07:43,890
have resilient tools and think about it

00:07:39,870 --> 00:07:46,530
in advance so how we do it so the

00:07:43,890 --> 00:07:49,110
generic approach we come up with is to

00:07:46,530 --> 00:07:52,290
generate a complete target method to

00:07:49,110 --> 00:07:54,660
complete a target format we wish your

00:07:52,290 --> 00:07:57,830
application supports before and after

00:07:54,660 --> 00:08:00,150
the change possibly including all

00:07:57,830 --> 00:08:03,870
primitives changed so you shouldn't

00:08:00,150 --> 00:08:05,730
target to to include only what change

00:08:03,870 --> 00:08:07,650
but you should target to include at

00:08:05,730 --> 00:08:12,600
least what's changed but try to of

00:08:07,650 --> 00:08:14,820
course reduce the size and then the

00:08:12,600 --> 00:08:16,770
second step which is important in that

00:08:14,820 --> 00:08:18,840
case that you compare what's before and

00:08:16,770 --> 00:08:22,650
after and then generate an accurate

00:08:18,840 --> 00:08:25,050
small teeth so that basically helps to

00:08:22,650 --> 00:08:29,190
keep the diff small and always specific

00:08:25,050 --> 00:08:31,110
to application approach so once you

00:08:29,190 --> 00:08:33,780
generate a diff every ten minutes so

00:08:31,110 --> 00:08:38,039
what you end up with of course is 250

00:08:33,780 --> 00:08:40,740
gifs a day and of course thousand gifs a

00:08:38,039 --> 00:08:43,110
month if we think that for every gif we

00:08:40,740 --> 00:08:46,500
will distribute to mobile application

00:08:43,110 --> 00:08:48,600
and villain DAF is having thousand Maps

00:08:46,500 --> 00:08:49,540
on a mobile device of course it's not

00:08:48,600 --> 00:08:52,420
efficient

00:08:49,540 --> 00:08:56,949
it's and it's no-go process so what we

00:08:52,420 --> 00:08:59,649
do we combine data per day we group them

00:08:56,949 --> 00:09:02,230
per day and per month so every time the

00:08:59,649 --> 00:09:04,779
user downloads ative he always downloads

00:09:02,230 --> 00:09:07,420
all the changes done for this day so

00:09:04,779 --> 00:09:09,459
it's still relatively small size but on

00:09:07,420 --> 00:09:12,610
the other hand instead of having 250

00:09:09,459 --> 00:09:15,040
files he will have only one and the ELSA

00:09:12,610 --> 00:09:17,970
combines and by month excluding last day

00:09:15,040 --> 00:09:21,970
so what we also need to make sure that

00:09:17,970 --> 00:09:24,339
we constantly recombine files and it

00:09:21,970 --> 00:09:26,800
also adds to the speed of processing

00:09:24,339 --> 00:09:29,199
which we need to be aware of to gauge

00:09:26,800 --> 00:09:32,319
the live stream goods that we need to

00:09:29,199 --> 00:09:34,959
combine constantly by day but only once

00:09:32,319 --> 00:09:39,459
a day we need to combine all the files

00:09:34,959 --> 00:09:43,149
per month this is I'm going to the

00:09:39,459 --> 00:09:45,459
lowest technical level this is overpass

00:09:43,149 --> 00:09:49,180
where we used to retrieve our complete

00:09:45,459 --> 00:09:51,130
data so we struggled a lot with OSC

00:09:49,180 --> 00:09:53,350
format and trying to retrieve what has

00:09:51,130 --> 00:09:55,959
changed augmented and so far and we

00:09:53,350 --> 00:09:58,000
ended up with a nice tool overpass which

00:09:55,959 --> 00:10:00,790
helps us to retrieve what exactly we

00:09:58,000 --> 00:10:03,279
need it's a quite complicated query I

00:10:00,790 --> 00:10:06,100
will try to quickly explain what it does

00:10:03,279 --> 00:10:10,529
but it's extremely important that it

00:10:06,100 --> 00:10:13,750
provides enough data so what it does it

00:10:10,529 --> 00:10:16,540
scans what node waits and relationship

00:10:13,750 --> 00:10:19,630
were changed in zip is a period then it

00:10:16,540 --> 00:10:23,290
tries to retrieve all nodes for existing

00:10:19,630 --> 00:10:27,190
relations and all relations for existing

00:10:23,290 --> 00:10:30,100
nodes and then it goes from so shortly

00:10:27,190 --> 00:10:32,260
saying it goes from a bottom up and then

00:10:30,100 --> 00:10:35,100
once it's retrieved all relations it

00:10:32,260 --> 00:10:40,029
goes from relation from top to bottom

00:10:35,100 --> 00:10:41,980
it's it's very important for us to I can

00:10:40,029 --> 00:10:44,880
illustrate it with a simple example if

00:10:41,980 --> 00:10:49,569
your primitive object is a subway line

00:10:44,880 --> 00:10:52,509
so in the in that case in OpenStreetMap

00:10:49,569 --> 00:10:55,839
it's translated to such primitives as

00:10:52,509 --> 00:10:59,649
relations nodes and waist segments and

00:10:55,839 --> 00:11:01,389
of course if one node has changed the

00:10:59,649 --> 00:11:02,290
whole your primitive which you display

00:11:01,389 --> 00:11:04,870
in your application

00:11:02,290 --> 00:11:08,320
as a subway lane you need to regenerate

00:11:04,870 --> 00:11:10,120
for example the color needs to be

00:11:08,320 --> 00:11:12,459
retrieved from relation it doesn't it's

00:11:10,120 --> 00:11:15,639
not present on the node that's why we

00:11:12,459 --> 00:11:19,089
ended up having such a complex query

00:11:15,639 --> 00:11:21,850
because our primitive is not an old way

00:11:19,089 --> 00:11:24,339
or relation I think in almost all

00:11:21,850 --> 00:11:27,730
applications it's a case the primitive

00:11:24,339 --> 00:11:29,800
is something more complex and that's

00:11:27,730 --> 00:11:33,990
important that overpass provides a

00:11:29,800 --> 00:11:36,399
flexibility for us to do these things so

00:11:33,990 --> 00:11:39,160
let's switch to the topic of the tools

00:11:36,399 --> 00:11:40,990
and as I said overpasses the most

00:11:39,160 --> 00:11:43,149
important tools we are using am Ernest

00:11:40,990 --> 00:11:46,029
and it's great that it's backed up by

00:11:43,149 --> 00:11:49,089
community and is provided for us as a

00:11:46,029 --> 00:11:51,250
third party so we can always redownload

00:11:49,089 --> 00:11:53,680
if it's corrupted crushed and redownload

00:11:51,250 --> 00:11:56,199
sinks in the past it's also relatively

00:11:53,680 --> 00:11:59,259
quick to apply the changes so it's a

00:11:56,199 --> 00:12:01,240
factor of five it's relatively quick as

00:11:59,259 --> 00:12:02,980
well to retrieve the data so it becomes

00:12:01,240 --> 00:12:06,279
much slower it's a factor of three and

00:12:02,980 --> 00:12:08,079
as you see this numbers almost add up of

00:12:06,279 --> 00:12:11,800
course some things you can paralyze to

00:12:08,079 --> 00:12:13,870
run update in parallel and retrieve in

00:12:11,800 --> 00:12:16,720
parallel but still something you cannot

00:12:13,870 --> 00:12:19,569
pro make parallel and then what you need

00:12:16,720 --> 00:12:22,029
to take care is a speed of the whole

00:12:19,569 --> 00:12:24,550
generation process and because Ostman

00:12:22,029 --> 00:12:27,370
binary from-- format is only used by

00:12:24,550 --> 00:12:30,279
ausma so all the other operations are

00:12:27,370 --> 00:12:32,649
done by Osment map creator but they

00:12:30,279 --> 00:12:38,889
available and everybody could basically

00:12:32,649 --> 00:12:41,500
replicate them if he wants so now let's

00:12:38,889 --> 00:12:44,290
talk about interest in a side project

00:12:41,500 --> 00:12:46,689
for our live map updates is the nation

00:12:44,290 --> 00:12:51,329
to OpenStreetMap contributors so from

00:12:46,689 --> 00:12:54,220
the first day that was a pilot feature

00:12:51,329 --> 00:12:55,060
for the application which we publish on

00:12:54,220 --> 00:12:59,110
a google play

00:12:55,060 --> 00:13:01,959
it was always free if you download a

00:12:59,110 --> 00:13:04,360
nightly application but still from the

00:13:01,959 --> 00:13:06,639
first day we decided to some kind of

00:13:04,360 --> 00:13:10,930
split it and give it back to a community

00:13:06,639 --> 00:13:13,149
so it's not a huge amount of revenue but

00:13:10,930 --> 00:13:15,130
what we decided to do is to do something

00:13:13,149 --> 00:13:18,700
different try to thank

00:13:15,130 --> 00:13:21,850
OpenStreetMap contributors who do it who

00:13:18,700 --> 00:13:23,500
do the changes themselves and what we

00:13:21,850 --> 00:13:26,230
did what we are doing we are paying

00:13:23,500 --> 00:13:28,120
we're keeping fifty percent to Osman

00:13:26,230 --> 00:13:31,060
team and fifty percent we are

00:13:28,120 --> 00:13:33,220
distributing for all people who make the

00:13:31,060 --> 00:13:39,430
changes and subscribed with their

00:13:33,220 --> 00:13:43,150
Bitcoin address basically to get that I

00:13:39,430 --> 00:13:45,660
would call it tips but actually in a

00:13:43,150 --> 00:13:50,200
total amount we started doing it since

00:13:45,660 --> 00:13:53,320
2016 we paid out almost 23 bitcoins of

00:13:50,200 --> 00:13:54,700
course Bitcoin was different price from

00:13:53,320 --> 00:13:58,060
in 2016

00:13:54,700 --> 00:14:02,050
but we still keep doing it and we still

00:13:58,060 --> 00:14:05,770
enjoy doing it and I think we will

00:14:02,050 --> 00:14:10,420
continue doing it what I also would like

00:14:05,770 --> 00:14:12,070
to steal some to steal some time from my

00:14:10,420 --> 00:14:14,440
presentation and talk about future

00:14:12,070 --> 00:14:16,570
because I think it's even more important

00:14:14,440 --> 00:14:21,400
to talk on conference about future

00:14:16,570 --> 00:14:23,140
rather than present situation actually I

00:14:21,400 --> 00:14:27,160
would like to talk about the future of

00:14:23,140 --> 00:14:30,790
data and what does it mean data when

00:14:27,160 --> 00:14:33,130
Ottomans was started it was oh it was a

00:14:30,790 --> 00:14:35,140
first impression that it's possible to

00:14:33,130 --> 00:14:37,450
start Osman to build because there is

00:14:35,140 --> 00:14:40,300
OpenStreetMap project exist which

00:14:37,450 --> 00:14:42,700
provides data of course we can endow

00:14:40,300 --> 00:14:45,340
physican a neck problem where you don't

00:14:42,700 --> 00:14:48,250
have data you don't have projects and

00:14:45,340 --> 00:14:50,950
you if you don't have good projects that

00:14:48,250 --> 00:14:53,680
nobody contributes to the data but we

00:14:50,950 --> 00:14:56,610
need to collaborate and sense that we

00:14:53,680 --> 00:14:59,980
also need to build the tools that

00:14:56,610 --> 00:15:02,200
supports projects and data and all

00:14:59,980 --> 00:15:05,310
projects around OpenStreetMap are built

00:15:02,200 --> 00:15:07,960
on open data but obviously not all

00:15:05,310 --> 00:15:10,510
OpenStreetMap data is an Open Street Map

00:15:07,960 --> 00:15:13,750
database one of the wonderful example is

00:15:10,510 --> 00:15:16,870
a GPX tracks which of course are hosted

00:15:13,750 --> 00:15:18,430
for example by OpenStreetMap website but

00:15:16,870 --> 00:15:20,950
they don't belong to Open Street Map

00:15:18,430 --> 00:15:23,890
database and there are tons of example

00:15:20,950 --> 00:15:27,410
of data which maybe doesn't necessarily

00:15:23,890 --> 00:15:31,009
belong yet to Open Street Map project

00:15:27,410 --> 00:15:33,679
but it's really helps to build great

00:15:31,009 --> 00:15:35,239
tools around it and support as a project

00:15:33,679 --> 00:15:38,470
for example investment we use

00:15:35,239 --> 00:15:41,929
OpenStreetMap Wikipedia and Viki voyage

00:15:38,470 --> 00:15:44,449
since that year and the only looking

00:15:41,929 --> 00:15:46,999
forward to expand it because our main

00:15:44,449 --> 00:15:50,179
goal is to provide applications that

00:15:46,999 --> 00:15:52,069
uses a data but we also saying how to

00:15:50,179 --> 00:15:55,999
work on the tools that will encourage

00:15:52,069 --> 00:15:59,389
people to to contribute to basically

00:15:55,999 --> 00:16:00,859
populate the data what's important in

00:15:59,389 --> 00:16:04,339
what's interesting in OpenStreetMap

00:16:00,859 --> 00:16:07,039
projects is dance of foreman and first I

00:16:04,339 --> 00:16:08,689
when I started investigating I was

00:16:07,039 --> 00:16:11,119
thinking it's ridiculous why we cannot

00:16:08,689 --> 00:16:13,099
use one single format and I changed my

00:16:11,119 --> 00:16:16,249
opinion really over years I think

00:16:13,099 --> 00:16:18,589
actually it's beauty of having lots of

00:16:16,249 --> 00:16:20,779
format each portion of data deserves own

00:16:18,589 --> 00:16:23,809
format each shape and application

00:16:20,779 --> 00:16:26,359
deserve own derive format of course it's

00:16:23,809 --> 00:16:29,749
complex and that's what I would like to

00:16:26,359 --> 00:16:33,109
talk so each format basically has its

00:16:29,749 --> 00:16:35,419
own kind of very similar lifecycle to

00:16:33,109 --> 00:16:39,289
convert from existing format to

00:16:35,419 --> 00:16:41,059
distribute to update and in a obvious

00:16:39,289 --> 00:16:44,389
route map we're also talking about some

00:16:41,059 --> 00:16:46,729
special features like partition by B box

00:16:44,389 --> 00:16:49,189
or by countries and also support

00:16:46,729 --> 00:16:51,289
incremental updates because a stream of

00:16:49,189 --> 00:16:54,399
data which is coming is pretty

00:16:51,289 --> 00:16:59,659
significant comparing to other projects

00:16:54,399 --> 00:17:03,049
so when I'm thinking about projects and

00:16:59,659 --> 00:17:06,799
applications so I think about overpass

00:17:03,049 --> 00:17:10,939
as a great format but there is a project

00:17:06,799 --> 00:17:12,889
called overpass query engine we have OS

00:17:10,939 --> 00:17:15,110
empty PG SQL that controls that

00:17:12,889 --> 00:17:17,299
populates into a format of a post keys

00:17:15,110 --> 00:17:20,539
and then we have a products that's I

00:17:17,299 --> 00:17:23,329
using the data like map NIC we also have

00:17:20,539 --> 00:17:26,659
some scenarios it almost everybody

00:17:23,329 --> 00:17:29,509
trying to use like DM data which is

00:17:26,659 --> 00:17:32,509
stored as a pictures and any router to

00:17:29,509 --> 00:17:34,759
would like to use this so if if you want

00:17:32,509 --> 00:17:37,129
to build a project for example you would

00:17:34,759 --> 00:17:38,390
like to make something better and make

00:17:37,129 --> 00:17:40,250
use of it you

00:17:38,390 --> 00:17:43,010
first question where to take the data if

00:17:40,250 --> 00:17:46,040
it's exist and not everything belongs in

00:17:43,010 --> 00:17:49,520
the m2 OpenStreetMap we're actually I

00:17:46,040 --> 00:17:53,780
think the community is ready for other

00:17:49,520 --> 00:17:55,550
sources which we anyway have so what I

00:17:53,780 --> 00:17:58,910
would like to bring idea and start

00:17:55,550 --> 00:18:02,690
discussion is if we can progress with

00:17:58,910 --> 00:18:04,400
some kind of application network that

00:18:02,690 --> 00:18:06,650
will support that well first of all

00:18:04,400 --> 00:18:09,200
provide registry of data where you can

00:18:06,650 --> 00:18:12,230
find who is a owner of information of

00:18:09,200 --> 00:18:14,780
that database data set what is a license

00:18:12,230 --> 00:18:16,880
who is a maintainer that will support

00:18:14,780 --> 00:18:20,000
out of the box that Turin distributed

00:18:16,880 --> 00:18:23,240
downloads so in case somebody is doing

00:18:20,000 --> 00:18:27,050
great job and distributing overpass

00:18:23,240 --> 00:18:29,960
database which is 300 gigabytes you can

00:18:27,050 --> 00:18:31,610
also collaborate and help distributing

00:18:29,960 --> 00:18:34,520
the dataset because you are making use

00:18:31,610 --> 00:18:36,110
of it at least partially but that will

00:18:34,520 --> 00:18:39,560
be already a great help partitioned data

00:18:36,110 --> 00:18:42,500
by gob box so all these operations are

00:18:39,560 --> 00:18:45,860
very similar to every format we have in

00:18:42,500 --> 00:18:47,590
OpenStreetMap and I think with some kind

00:18:45,860 --> 00:18:50,600
of need to keep that beauty but also

00:18:47,590 --> 00:18:54,860
standardize the tools around the beauty

00:18:50,600 --> 00:18:57,890
of formats and that so I'm really

00:18:54,860 --> 00:19:02,240
looking forward for people to meet with

00:18:57,890 --> 00:19:04,430
people who share that idea and yeah

00:19:02,240 --> 00:19:08,950
let's let's build it together and let's

00:19:04,430 --> 00:19:08,950
see how it works thank you

00:19:14,880 --> 00:19:23,620
thank you Thank You Victor also for the

00:19:18,880 --> 00:19:26,610
last comments and suggestion and now

00:19:23,620 --> 00:19:26,610
he's open for questions

00:19:30,090 --> 00:19:38,500
yeah I have a just a curiosity but how

00:19:34,660 --> 00:19:41,500
is your business because you our company

00:19:38,500 --> 00:19:45,790
are working for a company so which are

00:19:41,500 --> 00:19:49,240
your customers yeah it's it's a

00:19:45,790 --> 00:19:51,370
difficult question of course customers

00:19:49,240 --> 00:19:52,929
is who is willing to pay and the

00:19:51,370 --> 00:19:55,809
business is working when it's

00:19:52,929 --> 00:19:58,419
sustainable so as i as i told that

00:19:55,809 --> 00:20:02,110
osmond live feature is a paid feature

00:19:58,419 --> 00:20:04,090
and i believe its first of all i think

00:20:02,110 --> 00:20:07,030
lots of people who contribute to

00:20:04,090 --> 00:20:09,250
OpenStreetMap also buy ends at Fisher

00:20:07,030 --> 00:20:12,070
and some people also around I actually

00:20:09,250 --> 00:20:13,870
getting back paid by that feature so

00:20:12,070 --> 00:20:18,250
it's kind of circulating money in the

00:20:13,870 --> 00:20:21,220
world but our customers primarily what I

00:20:18,250 --> 00:20:25,690
see it's mostly technical people and

00:20:21,220 --> 00:20:30,220
also people who don't try to avoid any

00:20:25,690 --> 00:20:32,350
kind of analytics and kind of things

00:20:30,220 --> 00:20:34,750
marketing things in the application

00:20:32,350 --> 00:20:38,230
itself because we try to be open sourced

00:20:34,750 --> 00:20:49,299
and completely free from trekkers and so

00:20:38,230 --> 00:20:53,860
on so some technical questions know was

00:20:49,299 --> 00:20:56,940
oh yes there is one because I understand

00:20:53,860 --> 00:20:59,919
that was clear but some curiosities

00:20:56,940 --> 00:21:03,610
hello thank you for the very nice

00:20:59,919 --> 00:21:07,919
application Osman what I miss for a long

00:21:03,610 --> 00:21:11,610
time is the possibility to eat it weighs

00:21:07,919 --> 00:21:14,049
like in the way you can model like for a

00:21:11,610 --> 00:21:16,890
OpenStreetMap editing feature I would

00:21:14,049 --> 00:21:18,770
also like to edit ways or at least

00:21:16,890 --> 00:21:21,110
change the text

00:21:18,770 --> 00:21:24,230
since often points of interest are met

00:21:21,110 --> 00:21:27,460
those ways and another's notes do you

00:21:24,230 --> 00:21:30,260
plan implementing this feature yeah

00:21:27,460 --> 00:21:33,020
actually is a release we are making and

00:21:30,260 --> 00:21:35,620
we have that question popped up recently

00:21:33,020 --> 00:21:38,150
and we just realized that we can make

00:21:35,620 --> 00:21:41,210
exactly what you said edit syntax of

00:21:38,150 --> 00:21:43,640
ways without creating special layers

00:21:41,210 --> 00:21:46,370
that you can really drag things around

00:21:43,640 --> 00:21:49,490
yes it's actually almost done and coming

00:21:46,370 --> 00:21:52,490
and regarding a question about complex

00:21:49,490 --> 00:21:55,640
editing it's it's very difficult because

00:21:52,490 --> 00:21:59,300
Osment which relies on offline it's not

00:21:55,640 --> 00:22:02,360
based on OpenStreetMap data itself so in

00:21:59,300 --> 00:22:04,130
that sense we cannot transform back was

00:22:02,360 --> 00:22:05,710
it transformed in our format we cannot

00:22:04,130 --> 00:22:08,510
transform it back really to

00:22:05,710 --> 00:22:11,240
OpenStreetMap data and we kind of else

00:22:08,510 --> 00:22:13,580
afraid we will do lots of mistakes when

00:22:11,240 --> 00:22:16,340
we try to upload it to OpenStreetMap so

00:22:13,580 --> 00:22:18,110
it's but regarding text editing yes

00:22:16,340 --> 00:22:27,560
that's actually coming and that that

00:22:18,110 --> 00:22:30,970
will work soon yes yes again thank you

00:22:27,560 --> 00:22:33,110
for awesome and and just a curiosity I

00:22:30,970 --> 00:22:36,110
understand that Osmund I use a

00:22:33,110 --> 00:22:39,260
proprietary data format for the maps and

00:22:36,110 --> 00:22:44,660
you told during your presentation that

00:22:39,260 --> 00:22:47,000
it is needed because different data can

00:22:44,660 --> 00:22:52,090
you tell us something a bit more why it

00:22:47,000 --> 00:22:56,390
is needed data format for maps and not

00:22:52,090 --> 00:22:59,780
for example well first of all stars of

00:22:56,390 --> 00:23:02,090
course that when you have creating an

00:22:59,780 --> 00:23:05,330
application whether existing formats

00:23:02,090 --> 00:23:07,610
useful or not and when Othman was

00:23:05,330 --> 00:23:09,830
started there was no format that could

00:23:07,610 --> 00:23:13,280
fit it actually I would say today

00:23:09,830 --> 00:23:15,380
probably is around formas but again if

00:23:13,280 --> 00:23:17,270
you are targeting specific features for

00:23:15,380 --> 00:23:19,070
example you are trying to make an

00:23:17,270 --> 00:23:21,680
application for public transport

00:23:19,070 --> 00:23:24,140
specifics then very likely even Osman

00:23:21,680 --> 00:23:25,910
format will not be helpful for you so

00:23:24,140 --> 00:23:28,970
you will end up having your own of

00:23:25,910 --> 00:23:30,920
course it could be derived format but it

00:23:28,970 --> 00:23:32,169
still will be different so I could say

00:23:30,920 --> 00:23:34,239
by Ottoman format

00:23:32,169 --> 00:23:37,600
different because we were targeting at

00:23:34,239 --> 00:23:40,029
the speed and PBF for example was very

00:23:37,600 --> 00:23:43,119
slow because it contains zip or 5m

00:23:40,029 --> 00:23:46,179
didn't exist by that time I think so

00:23:43,119 --> 00:23:48,639
it's specific needs that's a driving and

00:23:46,179 --> 00:23:51,249
I believe even if we are talking about

00:23:48,639 --> 00:23:53,980
ok mobile is separate and server-side is

00:23:51,249 --> 00:23:56,200
saying I still believe that it's better

00:23:53,980 --> 00:23:58,419
to have different formats and to create

00:23:56,200 --> 00:24:00,879
infrastructure how to convert from one

00:23:58,419 --> 00:24:03,399
format to NASA because formats are

00:24:00,879 --> 00:24:10,299
targeting at the speed and lots of other

00:24:03,399 --> 00:24:15,070
features I would say ok my question is

00:24:10,299 --> 00:24:16,960
you mentioned that that the customers

00:24:15,070 --> 00:24:19,480
for the live features are mainly mappers

00:24:16,960 --> 00:24:21,340
who want to verify their edits do you

00:24:19,480 --> 00:24:23,320
have a feeling if that's really true or

00:24:21,340 --> 00:24:27,929
is there also a group of people just

00:24:23,320 --> 00:24:30,220
normal end-users my features to have an

00:24:27,929 --> 00:24:36,070
up-to-date map to have construction

00:24:30,220 --> 00:24:38,499
mapping by the day yeah I'm asking that

00:24:36,070 --> 00:24:42,669
because that could influence the map as

00:24:38,499 --> 00:24:45,100
backward to do even more construction

00:24:42,669 --> 00:24:46,629
mapping short-term and there's a heavy

00:24:45,100 --> 00:24:46,960
discussion in Germany if this is a good

00:24:46,629 --> 00:24:50,559
idea

00:24:46,960 --> 00:24:52,840
well I truly believe maybe it's a good

00:24:50,559 --> 00:24:55,509
idea because our stream of changes is

00:24:52,840 --> 00:24:59,230
not that massive and could be improved

00:24:55,509 --> 00:25:01,269
but Elsa I cannot say that everybody is

00:24:59,230 --> 00:25:03,460
using because it saw Smurfs I think

00:25:01,269 --> 00:25:06,100
again it will be distribution between

00:25:03,460 --> 00:25:08,080
2080 but again it's my guess because we

00:25:06,100 --> 00:25:09,489
don't have exact numbers that's a

00:25:08,080 --> 00:25:12,190
challenge for us to have exact numbers

00:25:09,489 --> 00:25:14,859
but what I do feel if when we have

00:25:12,190 --> 00:25:17,669
problems with our life and it started

00:25:14,859 --> 00:25:21,039
delaying by like three or four hours and

00:25:17,669 --> 00:25:22,929
and it's a catastrophe - one day I see

00:25:21,039 --> 00:25:24,759
lots of people saying ok aging my

00:25:22,929 --> 00:25:27,309
changes I could not verify my changes

00:25:24,759 --> 00:25:29,470
how can I check and so on so and it's

00:25:27,309 --> 00:25:32,320
expectation today from some peoples that

00:25:29,470 --> 00:25:34,179
are actually in our chair is like in 30

00:25:32,320 --> 00:25:37,330
minutes I should be able to verify and

00:25:34,179 --> 00:25:39,940
one year ago if we barely could actually

00:25:37,330 --> 00:25:42,130
change it in a day but I think it's

00:25:39,940 --> 00:25:45,190
exactly what I told the chicken and egg

00:25:42,130 --> 00:25:47,020
once you have a good tool you can

00:25:45,190 --> 00:25:48,820
actually start producing motion yes if

00:25:47,020 --> 00:25:50,440
you don't have to then you're kind of

00:25:48,820 --> 00:25:51,789
lazy producing changing because you

00:25:50,440 --> 00:25:55,440
don't know how to use these changes

00:25:51,789 --> 00:25:55,440
anyway and something like that

00:25:56,130 --> 00:26:06,100
last question if any don't be shy

00:26:01,330 --> 00:26:09,840
the last question yeah we done with rank

00:26:06,100 --> 00:26:09,840

YouTube URL: https://www.youtube.com/watch?v=w0AU3ARMeok


