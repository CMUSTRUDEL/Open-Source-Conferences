Title: Democratizing the pipeline with Apache Beam and Dataflow with Tyler Akidau and Reuven Lax (Google)
Publication date: 2017-10-10
Playlist: Strata Data Conference 2017 - New York, New York
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,000 --> 00:00:03,419
hi this is Mike Henderson from strata

00:00:01,589 --> 00:00:05,730
data in New York City I'm here with

00:00:03,419 --> 00:00:07,649
Ruben and Tyler are you guys doing okay

00:00:05,730 --> 00:00:10,290
very good and you guys are with Google

00:00:07,649 --> 00:00:13,740
can you tell us a little bit what you do

00:00:10,290 --> 00:00:18,480
at Google well both of us actually work

00:00:13,740 --> 00:00:20,340
on Google's big data infrastructure this

00:00:18,480 --> 00:00:23,640
is a set of tools and infrastructures

00:00:20,340 --> 00:00:25,710
for analyzing big data and building

00:00:23,640 --> 00:00:28,410
other tools that have has been data is

00:00:25,710 --> 00:00:30,240
that an external facing product sweeter

00:00:28,410 --> 00:00:32,759
is an internal consumption thing so

00:00:30,240 --> 00:00:34,500
we're both yeah so the things that

00:00:32,759 --> 00:00:36,450
people outside Google are probably

00:00:34,500 --> 00:00:38,219
familiar with are things like Apache

00:00:36,450 --> 00:00:40,140
bean which is kind of the open source

00:00:38,219 --> 00:00:42,570
end of the project and then Google Cloud

00:00:40,140 --> 00:00:44,730
dataflow which is the you know Google

00:00:42,570 --> 00:00:47,070
you know managed service on Google cloud

00:00:44,730 --> 00:00:48,960
itself and then there are a number of

00:00:47,070 --> 00:00:50,640
internal projects that you know might

00:00:48,960 --> 00:00:52,530
have familiarity with names from papers

00:00:50,640 --> 00:00:54,570
but so talk to me a little bit about

00:00:52,530 --> 00:00:56,160
beam and flow what do they do what are

00:00:54,570 --> 00:01:00,149
their what's the intention behind them

00:00:56,160 --> 00:01:02,010
so I'll start with beam and maybe you

00:01:00,149 --> 00:01:04,080
can talk about data flow yeah so the

00:01:02,010 --> 00:01:06,930
idea that so beam is a essentially a

00:01:04,080 --> 00:01:09,150
portability framework for building big

00:01:06,930 --> 00:01:10,740
data pipelines so it's it's a set of

00:01:09,150 --> 00:01:12,810
libraries that you can use to to write a

00:01:10,740 --> 00:01:15,119
data processing pipeline in either Java

00:01:12,810 --> 00:01:16,890
or Python and then you can execute it on

00:01:15,119 --> 00:01:18,740
any supported runner so you can run it

00:01:16,890 --> 00:01:20,759
on Google Cloud dataflow which is

00:01:18,740 --> 00:01:22,830
Google's managed service or you can run

00:01:20,759 --> 00:01:24,509
it on Apache flink or Apache spark or

00:01:22,830 --> 00:01:26,100
Apache apex and a bunch of these

00:01:24,509 --> 00:01:27,330
different open source projects and when

00:01:26,100 --> 00:01:28,290
you run on the open source projects you

00:01:27,330 --> 00:01:30,119
can run on premise

00:01:28,290 --> 00:01:32,520
you can run on Amazon Cloud you can run

00:01:30,119 --> 00:01:34,740
on Google Cloud with you know Cloud Data

00:01:32,520 --> 00:01:36,930
proc or manage a manually managing your

00:01:34,740 --> 00:01:38,340
VM was whatever works so it's really

00:01:36,930 --> 00:01:40,259
this sort of meant to be this

00:01:38,340 --> 00:01:41,880
democratizing thing of you know you can

00:01:40,259 --> 00:01:43,860
you can write your pipeline once and you

00:01:41,880 --> 00:01:47,159
can run it wherever and however makes

00:01:43,860 --> 00:01:49,200
sense for you and then yeah I'll ask you

00:01:47,159 --> 00:01:50,610
first add to that it's a little more

00:01:49,200 --> 00:01:52,350
than just the portability framework it's

00:01:50,610 --> 00:01:54,689
also a programming model yeah and it's

00:01:52,350 --> 00:01:56,600
historically taken concepts that are in

00:01:54,689 --> 00:01:59,460
advance of what these other systems

00:01:56,600 --> 00:02:02,219
systems natively supported so it would

00:01:59,460 --> 00:02:05,009
allow you to do event time processing

00:02:02,219 --> 00:02:06,340
and streaming on SPARC one the forest

00:02:05,009 --> 00:02:10,239
park had such a concept

00:02:06,340 --> 00:02:12,160
Oh Google Cloud dataflow is an execution

00:02:10,239 --> 00:02:14,950
engine for Apache beam pipelines that

00:02:12,160 --> 00:02:17,800
runs fully hosted on Google's cloud

00:02:14,950 --> 00:02:21,849
platform and it's its focus on providing

00:02:17,800 --> 00:02:24,400
this seamless but no nobs experience I

00:02:21,849 --> 00:02:25,989
just write a pipeline I want run it on a

00:02:24,400 --> 00:02:28,090
massive amounts of data or a massive

00:02:25,989 --> 00:02:29,470
data stream and it just runs I don't

00:02:28,090 --> 00:02:31,330
have to worry about how many workers it

00:02:29,470 --> 00:02:33,310
runs on how much memory to give them how

00:02:31,330 --> 00:02:35,560
to split up the files so I can brush

00:02:33,310 --> 00:02:37,120
them in parallel you just throw your

00:02:35,560 --> 00:02:38,799
pipeline at the service and the service

00:02:37,120 --> 00:02:40,660
figures that out for you and that's

00:02:38,799 --> 00:02:44,739
something you guys have built for

00:02:40,660 --> 00:02:48,730
everyone to use or ok open source or no

00:02:44,739 --> 00:02:52,959
no the API the beam API is but the

00:02:48,730 --> 00:02:55,780
runner runs you know on Google's ok ok

00:02:52,959 --> 00:02:58,390
and so are there a lot of industries and

00:02:55,780 --> 00:03:01,360
different verticals using these tools

00:02:58,390 --> 00:03:04,090
right now and you seen leaders like and

00:03:01,360 --> 00:03:05,739
I don't need company names but do you

00:03:04,090 --> 00:03:08,170
see any industries that are moving

00:03:05,739 --> 00:03:11,200
quicker than others with these sort of

00:03:08,170 --> 00:03:15,489
services and they're quite a few so we

00:03:11,200 --> 00:03:17,530
have we've seen people ranging from you

00:03:15,489 --> 00:03:19,720
know your classic startups people in the

00:03:17,530 --> 00:03:23,140
tech industry to very traditional

00:03:19,720 --> 00:03:27,519
industries such as you know grocery

00:03:23,140 --> 00:03:31,230
stores car companies banks involved in

00:03:27,519 --> 00:03:34,030
beam and data flow the leaders are often

00:03:31,230 --> 00:03:35,680
the usual suspects of tech companies so

00:03:34,030 --> 00:03:38,200
one company I can mean by name is

00:03:35,680 --> 00:03:40,780
Spotify there's been a lot of publicity

00:03:38,200 --> 00:03:42,540
around Spotify using this stuff Spotify

00:03:40,780 --> 00:03:45,190
is definitely one of the leaders there

00:03:42,540 --> 00:03:47,769
so where do you think beam is gonna go

00:03:45,190 --> 00:03:50,530
in the next six to eight months is this

00:03:47,769 --> 00:03:53,530
changing quickly or is it really stable

00:03:50,530 --> 00:03:56,170
does it need to change what's the

00:03:53,530 --> 00:03:57,940
prognosis for where it's going yes

00:03:56,170 --> 00:03:59,139
changing a lot let me I'll call it a few

00:03:57,940 --> 00:04:02,500
things and if I miss anything in the

00:03:59,139 --> 00:04:03,639
roadmap Reuven can kind of add in so you

00:04:02,500 --> 00:04:05,670
know I mentioned it being this

00:04:03,639 --> 00:04:07,480
portability framework we're really just

00:04:05,670 --> 00:04:09,100
getting to the point of kind of

00:04:07,480 --> 00:04:10,660
finishing the the grand vision for that

00:04:09,100 --> 00:04:13,359
the real vision is to be able to have

00:04:10,660 --> 00:04:14,650
any SDK so currently we have Java and

00:04:13,359 --> 00:04:16,720
Python but you could imagine you could

00:04:14,650 --> 00:04:18,310
have JavaScript you could have you know

00:04:16,720 --> 00:04:24,490
Scala whatever

00:04:18,310 --> 00:04:25,780
or try and go yeah for example and you

00:04:24,490 --> 00:04:27,700
should be able to run that on any runner

00:04:25,780 --> 00:04:31,120
and so a big a big one that we're gonna

00:04:27,700 --> 00:04:32,860
have soon is we have a Python SDK most

00:04:31,120 --> 00:04:34,870
of our runners are JVM base their Java

00:04:32,860 --> 00:04:38,080
execution engines and not all of them

00:04:34,870 --> 00:04:39,250
such as flink have a Python API but

00:04:38,080 --> 00:04:41,740
we're gonna make it possible to run

00:04:39,250 --> 00:04:43,660
Python pipelines on any other runners

00:04:41,740 --> 00:04:45,190
and just sort of transparently and it

00:04:43,660 --> 00:04:46,360
won't involve any work on the runners

00:04:45,190 --> 00:04:48,340
part other than supporting the runner

00:04:46,360 --> 00:04:49,720
API doesn't involve any work on the SDK

00:04:48,340 --> 00:04:52,090
writers part except to supporting the

00:04:49,720 --> 00:04:54,910
layer there and you'll get this full you

00:04:52,090 --> 00:04:56,830
know in way you know cross section of

00:04:54,910 --> 00:04:59,290
matching things up which would be really

00:04:56,830 --> 00:05:01,060
cool kind of multi vendor or transfer

00:04:59,290 --> 00:05:02,410
what you basically means you could

00:05:01,060 --> 00:05:04,450
basically means you could mix and match

00:05:02,410 --> 00:05:05,980
any any version of the SDK with any of

00:05:04,450 --> 00:05:07,840
the runners regardless of whether that

00:05:05,980 --> 00:05:09,220
Runner itself actually natively supports

00:05:07,840 --> 00:05:13,720
the kind of language that you want to

00:05:09,220 --> 00:05:15,790
use that I can be able to write part of

00:05:13,720 --> 00:05:17,860
my pipeline in Java but then there's

00:05:15,790 --> 00:05:19,630
some maybe there's a bunch of machine

00:05:17,860 --> 00:05:21,100
learning library be machine learning

00:05:19,630 --> 00:05:23,229
libraries and Python that I want to use

00:05:21,100 --> 00:05:25,390
well I should be able to mix and match

00:05:23,229 --> 00:05:27,610
different languages and maybe even

00:05:25,390 --> 00:05:29,229
different runners maybe even part of a

00:05:27,610 --> 00:05:30,790
pipeline I won back I don't part of a

00:05:29,229 --> 00:05:32,200
Python in another back-end and they just

00:05:30,790 --> 00:05:35,289
work together seamlessly

00:05:32,200 --> 00:05:36,880
so is that are you hearing that from the

00:05:35,289 --> 00:05:38,470
market that that's what they want or is

00:05:36,880 --> 00:05:40,800
that you guys are ahead of the market

00:05:38,470 --> 00:05:43,000
and anticipating that's what they need

00:05:40,800 --> 00:05:45,580
well we absolutely know things like

00:05:43,000 --> 00:05:47,530
python is a really big language with

00:05:45,580 --> 00:05:50,200
data scientists but then there's a lot

00:05:47,530 --> 00:05:53,380
of important data processing tools that

00:05:50,200 --> 00:05:54,669
don't have Python you know you can't

00:05:53,380 --> 00:05:56,590
access their Python right so that's

00:05:54,669 --> 00:05:59,890
that's one you know very clear sort of

00:05:56,590 --> 00:06:01,210
path of this being being useful but I

00:05:59,890 --> 00:06:03,250
think there is some element of just just

00:06:01,210 --> 00:06:04,720
knowing that like people like to use the

00:06:03,250 --> 00:06:06,250
language or the you know the SDK they

00:06:04,720 --> 00:06:07,810
want and people also like to use the

00:06:06,250 --> 00:06:09,430
system that they're happy with and those

00:06:07,810 --> 00:06:11,289
two don't always match up so in

00:06:09,430 --> 00:06:13,330
providing this capability to mix and

00:06:11,289 --> 00:06:14,979
match really sort of speaks to what

00:06:13,330 --> 00:06:17,590
people like to be able to do excellent

00:06:14,979 --> 00:06:19,510
and then for the data flow is there a

00:06:17,590 --> 00:06:22,450
roadmap for where you want to see that

00:06:19,510 --> 00:06:25,450
in six to eight months or well some of

00:06:22,450 --> 00:06:26,950
it is going to be new things that making

00:06:25,450 --> 00:06:27,740
sure it works very well for new things

00:06:26,950 --> 00:06:30,229
that are added to

00:06:27,740 --> 00:06:33,889
pache evening so some of it is going to

00:06:30,229 --> 00:06:35,620
be driven by a patchy beam but you know

00:06:33,889 --> 00:06:37,849
a lot of the work on data flows is

00:06:35,620 --> 00:06:40,550
involved with making the existing stuff

00:06:37,849 --> 00:06:42,440
just work better and more smoothly

00:06:40,550 --> 00:06:44,900
so I mentioned it was known um just but

00:06:42,440 --> 00:06:46,370
you know making that even more know

00:06:44,900 --> 00:06:48,580
Dobbs that it is today

00:06:46,370 --> 00:06:50,930
you know the finding out oh you sirs

00:06:48,580 --> 00:06:52,849
still often have to tweak this parameter

00:06:50,930 --> 00:06:56,630
how can we make that parameter just Auto

00:06:52,849 --> 00:06:59,259
tuned and auto alert excellent so if we

00:06:56,630 --> 00:07:02,509
were to sit down 12 months from now

00:06:59,259 --> 00:07:05,060
Tyler what would you like to see Google

00:07:02,509 --> 00:07:07,039
doing different and Ruben what would you

00:07:05,060 --> 00:07:11,840
like to see happening different in the

00:07:07,039 --> 00:07:13,970
market so so at least with respect to

00:07:11,840 --> 00:07:15,620
the project for work on a big thing a

00:07:13,970 --> 00:07:17,720
big thing I'm looking forward to seeing

00:07:15,620 --> 00:07:20,180
is sequel support so we've talked about

00:07:17,720 --> 00:07:21,919
Java and Python but there's this huge

00:07:20,180 --> 00:07:23,569
class of users out there that don't know

00:07:21,919 --> 00:07:25,130
programming language just don't want to

00:07:23,569 --> 00:07:27,949
touch them but are really pretty fluent

00:07:25,130 --> 00:07:29,440
in sequel and so this is this is a big

00:07:27,949 --> 00:07:32,599
thing recently and a lot of these

00:07:29,440 --> 00:07:34,400
systems and beam is having the next bean

00:07:32,599 --> 00:07:36,770
release will have a some basic sequel

00:07:34,400 --> 00:07:37,729
support in it so I think in about 12

00:07:36,770 --> 00:07:40,039
months I'd like to see that we really

00:07:37,729 --> 00:07:42,919
have pervasive sequel support throughout

00:07:40,039 --> 00:07:44,690
beam and dataflow and especially in the

00:07:42,919 --> 00:07:46,580
streaming room which streaming sequel is

00:07:44,690 --> 00:07:48,110
kind of a newer thing and still in the

00:07:46,580 --> 00:07:49,759
process of being defined exactly what

00:07:48,110 --> 00:07:51,530
that means so maybe a lot of your

00:07:49,759 --> 00:07:52,940
bigquery people will move to beam I

00:07:51,530 --> 00:07:54,949
think they're actually sort of

00:07:52,940 --> 00:07:56,539
complementary areas so so bigquery is

00:07:54,949 --> 00:07:58,630
very interactive it lets you you know

00:07:56,539 --> 00:08:00,830
slice and dice stuff on the fly right

00:07:58,630 --> 00:08:02,210
especially with streaming sequel what I

00:08:00,830 --> 00:08:03,800
would like to see is when people are

00:08:02,210 --> 00:08:06,229
setting up these long-lived pipelines

00:08:03,800 --> 00:08:07,909
that are you know doing ETL type things

00:08:06,229 --> 00:08:09,860
or just doing any sort of analysis that

00:08:07,909 --> 00:08:11,479
needs to run continuously you can

00:08:09,860 --> 00:08:13,610
express that in sequel as well so that

00:08:11,479 --> 00:08:15,770
use that you currently can write a query

00:08:13,610 --> 00:08:17,990
in bigquery but get back an answer

00:08:15,770 --> 00:08:19,280
quickly you can also apply that ease to

00:08:17,990 --> 00:08:21,289
something that just sits there for a

00:08:19,280 --> 00:08:23,419
year and it's continually producing you

00:08:21,289 --> 00:08:24,620
know new results or whatever excellent

00:08:23,419 --> 00:08:26,860
and then Rubin what would you like to

00:08:24,620 --> 00:08:28,870
see different in the market in general

00:08:26,860 --> 00:08:32,289
data' world yeah so one of the things

00:08:28,870 --> 00:08:34,810
that dataflow helped pioneer was you

00:08:32,289 --> 00:08:37,390
know strong rich semantics for streaming

00:08:34,810 --> 00:08:39,279
pipelines and now you're seeing more of

00:08:37,390 --> 00:08:41,409
that in other systems now with spark

00:08:39,279 --> 00:08:43,120
structure streaming some of the stuff

00:08:41,409 --> 00:08:45,820
that Apache flink has come up with but I

00:08:43,120 --> 00:08:47,950
think in the marketplace streaming is

00:08:45,820 --> 00:08:50,440
still kind of this also run thing people

00:08:47,950 --> 00:08:52,089
think of batch and then maybe people are

00:08:50,440 --> 00:08:53,890
a little afraid of streaming or maybe

00:08:52,089 --> 00:08:55,329
they don't quite understand it or maybe

00:08:53,890 --> 00:08:58,540
some of the streaming system still

00:08:55,329 --> 00:09:00,519
haven't quite caught up I would like to

00:08:58,540 --> 00:09:01,750
see streaming sort of catch-up and I

00:09:00,519 --> 00:09:04,390
think one excellence it does it will

00:09:01,750 --> 00:09:06,579
pass a batch all too often batch

00:09:04,390 --> 00:09:07,839
pipelines are really like if I run a

00:09:06,579 --> 00:09:10,120
batch pipeline every night on the

00:09:07,839 --> 00:09:11,290
previous day's worth of logs really

00:09:10,120 --> 00:09:12,730
that's a streaming pipeline you just

00:09:11,290 --> 00:09:14,680
want to continuously process the logs

00:09:12,730 --> 00:09:16,480
but I'm doing you know in these big

00:09:14,680 --> 00:09:17,110
batches of once a day excellent that

00:09:16,480 --> 00:09:19,120
would be wonderful

00:09:17,110 --> 00:09:22,230
yes thank you gentlemen we look forward

00:09:19,120 --> 00:09:22,230
that conversation thank you

00:09:28,339 --> 00:09:30,399

YouTube URL: https://www.youtube.com/watch?v=izhz1O0DMMo


