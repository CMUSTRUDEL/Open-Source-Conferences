Title: Automating content delivery in a DevOps world - Craig Adams (Akamai Technologies)
Publication date: 2017-10-04
Playlist: O'Reilly Velocity Conference 2017 - New York, New York
Description: 
	As the industry moves to distributed systems and a DevOps model, companies must adopt DevOps in order to automate CI/CD workflows and increase deployment velocity. Craig Adams explores the traditional DevOps pipeline, addresses how to think about CDN automation, and explains how Akamai is baking automation into its CDN.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,789 --> 00:00:05,740
so let me first started talking about

00:00:03,029 --> 00:00:07,330
the challenge that every developer has

00:00:05,740 --> 00:00:09,790
in every organization

00:00:07,330 --> 00:00:11,980
it's about velocity it's about speed and

00:00:09,790 --> 00:00:14,440
there's two things that every developer

00:00:11,980 --> 00:00:16,269
wants to do the first if we're really

00:00:14,440 --> 00:00:18,850
honest is we want to get code to

00:00:16,269 --> 00:00:21,369
production quickly there's nothing more

00:00:18,850 --> 00:00:24,940
infuriating then watching your babies

00:00:21,369 --> 00:00:27,400
stay held up by someone somewhere before

00:00:24,940 --> 00:00:29,529
it actually gets pushed out live the

00:00:27,400 --> 00:00:31,150
second thing though is building

00:00:29,529 --> 00:00:33,370
high-performing code there's this

00:00:31,150 --> 00:00:35,739
question of what is code quality is it

00:00:33,370 --> 00:00:37,269
just measured in bugs or is it measured

00:00:35,739 --> 00:00:39,489
in the interactions that you typically

00:00:37,269 --> 00:00:41,469
have with your end-users one of the

00:00:39,489 --> 00:00:44,949
things that organizations typically turn

00:00:41,469 --> 00:00:47,289
to is a CDN and the benefits of a CDN is

00:00:44,949 --> 00:00:48,760
they help deliver the mobile experiences

00:00:47,289 --> 00:00:50,620
they help address the front end

00:00:48,760 --> 00:00:51,909
challenges that no matter frankly what

00:00:50,620 --> 00:00:54,219
you do on your back-end code

00:00:51,909 --> 00:00:56,469
you're not going to deliver experiences

00:00:54,219 --> 00:00:58,059
particularly in the mobile world whether

00:00:56,469 --> 00:01:00,489
it's the device or the connection that

00:00:58,059 --> 00:01:02,709
your end users are accessing today but

00:01:00,489 --> 00:01:05,620
when you introduce CDN your typical

00:01:02,709 --> 00:01:08,620
DevOps lifecycle becomes more complex

00:01:05,620 --> 00:01:09,820
for many this virtuous circle is

00:01:08,620 --> 00:01:12,190
something that everyone in the room

00:01:09,820 --> 00:01:13,090
knows for those particularly that have

00:01:12,190 --> 00:01:15,250
adopted DevOps

00:01:13,090 --> 00:01:17,860
you're building your coding your

00:01:15,250 --> 00:01:20,590
planning your testing and frankly all of

00:01:17,860 --> 00:01:22,660
it's happening concurrently now many

00:01:20,590 --> 00:01:24,510
organizations start with the CDN service

00:01:22,660 --> 00:01:27,310
and they configure through the UX

00:01:24,510 --> 00:01:29,710
whether it's Akamai or fastly or anyone

00:01:27,310 --> 00:01:32,170
out there they go through through the UX

00:01:29,710 --> 00:01:34,840
and they set up their CDN configuration

00:01:32,170 --> 00:01:36,880
the second you've done that though if

00:01:34,840 --> 00:01:39,100
you stay there and don't move further

00:01:36,880 --> 00:01:42,160
you've essentially created a bottleneck

00:01:39,100 --> 00:01:43,710
in your DevOps pipeline now when you

00:01:42,160 --> 00:01:47,920
look at pushing code to production

00:01:43,710 --> 00:01:50,440
you've created an incremental thing that

00:01:47,920 --> 00:01:51,970
doesn't respond typically the same way

00:01:50,440 --> 00:01:54,580
that your own infrastructure does and

00:01:51,970 --> 00:01:56,020
that's where we've been focused and so

00:01:54,580 --> 00:01:58,960
we've been focused on how do we build

00:01:56,020 --> 00:02:01,360
code that allows you to be faster just

00:01:58,960 --> 00:02:04,870
specifically faster of getting your code

00:02:01,360 --> 00:02:06,940
out to production quicker also faster in

00:02:04,870 --> 00:02:09,789
actually having an accomplish a purpose

00:02:06,940 --> 00:02:12,519
you know the Telegraph when they looked

00:02:09,789 --> 00:02:14,360
at using CDN services it wasn't just

00:02:12,519 --> 00:02:17,000
doing it to make it faster or more

00:02:14,360 --> 00:02:19,040
so you could download the PDF their goal

00:02:17,000 --> 00:02:22,070
was how do they increase add delivery

00:02:19,040 --> 00:02:25,580
and they did by making their site faster

00:02:22,070 --> 00:02:27,020
they get 64,000 more pounds per month as

00:02:25,580 --> 00:02:28,370
a result of just speed more ad

00:02:27,020 --> 00:02:31,220
impressions in the behavior that draws

00:02:28,370 --> 00:02:33,230
end-users commerce organizations those

00:02:31,220 --> 00:02:35,360
are selling things online the link

00:02:33,230 --> 00:02:37,250
between performance and conversion rates

00:02:35,360 --> 00:02:39,410
are well-known but again how do you

00:02:37,250 --> 00:02:41,600
automate things so I'm gonna pick a few

00:02:39,410 --> 00:02:43,400
things to walk through many of these

00:02:41,600 --> 00:02:46,010
things are unique to occupy but the meta

00:02:43,400 --> 00:02:47,600
point is that no matter what CDN you're

00:02:46,010 --> 00:02:50,450
using if you're stopping with your

00:02:47,600 --> 00:02:52,430
configuration in the UX and you're not

00:02:50,450 --> 00:02:54,050
building the deeper API integrations

00:02:52,430 --> 00:02:56,270
you're not automating your DevOps

00:02:54,050 --> 00:02:57,980
workflow just to pick a few things that

00:02:56,270 --> 00:03:01,160
we've been focused on the first is fast

00:02:57,980 --> 00:03:03,500
fallback so anytime you have a code base

00:03:01,160 --> 00:03:05,330
that you want to globally distribute to

00:03:03,500 --> 00:03:07,340
users in Japan Australia in different

00:03:05,330 --> 00:03:09,230
regions around the world question comes

00:03:07,340 --> 00:03:11,660
up how fast can you roll back and roll

00:03:09,230 --> 00:03:13,700
forward that code base we've heard from

00:03:11,660 --> 00:03:15,530
customers and people looking at the

00:03:13,700 --> 00:03:17,900
ability to get back to a known safe

00:03:15,530 --> 00:03:20,120
place so specifically to push a

00:03:17,900 --> 00:03:22,100
configuration change and then get back

00:03:20,120 --> 00:03:24,260
to a known safe place within sixty

00:03:22,100 --> 00:03:26,000
Seconds so that if you push something

00:03:24,260 --> 00:03:28,760
back you can innovate quickly knowing

00:03:26,000 --> 00:03:32,300
you can fail back quickly or purging of

00:03:28,760 --> 00:03:35,030
content whether it's through a UI an API

00:03:32,300 --> 00:03:37,910
or through a cache tag how do you get

00:03:35,030 --> 00:03:40,010
content off your network quickly so that

00:03:37,910 --> 00:03:43,070
again you can take the maximum advantage

00:03:40,010 --> 00:03:44,269
of your cloud infrastructure minimizing

00:03:43,070 --> 00:03:45,410
whatever goes back to your origin

00:03:44,269 --> 00:03:49,340
whether your origins in cloud or

00:03:45,410 --> 00:03:52,940
on-premise acure 'ti systems so there's

00:03:49,340 --> 00:03:55,190
a great benefit of CDN and tell it

00:03:52,940 --> 00:03:57,830
reduces your visibility at creating

00:03:55,190 --> 00:03:59,900
sites that are protected so how do you

00:03:57,830 --> 00:04:02,000
take data and feed it into your seam

00:03:59,900 --> 00:04:03,980
systems so that you have so the

00:04:02,000 --> 00:04:05,120
real-time insight that you need in order

00:04:03,980 --> 00:04:07,519
to make sure that your sites have love

00:04:05,120 --> 00:04:08,959
and protect it a few things we've been

00:04:07,519 --> 00:04:11,660
focused on is first how do you build

00:04:08,959 --> 00:04:13,340
api's for everything not just for your

00:04:11,660 --> 00:04:16,220
content handling rules but for things

00:04:13,340 --> 00:04:19,549
like traffic management DNS cert

00:04:16,220 --> 00:04:22,100
provisioning if you use a certain type

00:04:19,549 --> 00:04:24,260
of cert or how do you look at client

00:04:22,100 --> 00:04:26,990
signing libraries so every developer is

00:04:24,260 --> 00:04:27,700
looking at how do they move faster so

00:04:26,990 --> 00:04:29,500
how do you have

00:04:27,700 --> 00:04:31,060
the libraries that you can offer in the

00:04:29,500 --> 00:04:35,020
languages that you know whether it's

00:04:31,060 --> 00:04:37,540
Java C + P HP Python Perl Ruby etc how

00:04:35,020 --> 00:04:40,690
do you have access to these libraries so

00:04:37,540 --> 00:04:44,290
again that you can do more faster in the

00:04:40,690 --> 00:04:46,750
way that you expect we always know that

00:04:44,290 --> 00:04:49,000
no one is the only part of your

00:04:46,750 --> 00:04:51,700
infrastructure so how if you're

00:04:49,000 --> 00:04:54,010
utilizing the varnish cache at origin or

00:04:51,700 --> 00:04:56,230
you're using terraform to roll out code

00:04:54,010 --> 00:04:59,620
in your network how do you have those

00:04:56,230 --> 00:05:01,270
pieces feed again your CDN so in the

00:04:59,620 --> 00:05:03,340
case of varnish how do I have threw

00:05:01,270 --> 00:05:05,200
varnish the ability to set my content

00:05:03,340 --> 00:05:07,150
caching rules or per jewelz just simply

00:05:05,200 --> 00:05:09,550
and varnish and have that automatically

00:05:07,150 --> 00:05:11,740
propagate to the CDN or in the case of

00:05:09,550 --> 00:05:13,300
terraform is I'm pushing out core

00:05:11,740 --> 00:05:15,760
infrastructure configurations in code

00:05:13,300 --> 00:05:17,490
how do I also manage my CDN pushes and

00:05:15,760 --> 00:05:20,620
roll backs to that same infrastructure

00:05:17,490 --> 00:05:23,650
you know but that talks about how do you

00:05:20,620 --> 00:05:24,940
push things out the speed of velocity we

00:05:23,650 --> 00:05:27,460
didn't talk a little bit about the

00:05:24,940 --> 00:05:30,010
operation side of things which is a key

00:05:27,460 --> 00:05:32,410
part of ops as having visibility so that

00:05:30,010 --> 00:05:34,330
you know what's happening and if I go a

00:05:32,410 --> 00:05:36,340
step further not just visibility so you

00:05:34,330 --> 00:05:38,140
know what's happening visibility said

00:05:36,340 --> 00:05:40,270
that you can prioritize what matters

00:05:38,140 --> 00:05:42,120
you know if we're honest in this room if

00:05:40,270 --> 00:05:45,250
I said that you have three different

00:05:42,120 --> 00:05:47,980
pages on your site or application or

00:05:45,250 --> 00:05:50,140
whatever and one performed at eight

00:05:47,980 --> 00:05:53,610
seconds one performed at six seconds one

00:05:50,140 --> 00:05:56,770
performed at four seconds as developers

00:05:53,610 --> 00:05:58,270
most of us instantly would start working

00:05:56,770 --> 00:06:01,240
on the eight second page because that's

00:05:58,270 --> 00:06:02,590
the slowest and it's intuitive we take

00:06:01,240 --> 00:06:04,870
pride in our work and we want to fix

00:06:02,590 --> 00:06:07,510
things that are slow what if there was

00:06:04,870 --> 00:06:09,640
insight you could have to actually guide

00:06:07,510 --> 00:06:12,640
you to what performance actually

00:06:09,640 --> 00:06:14,440
mattered and mattered specifically which

00:06:12,640 --> 00:06:16,780
is what page performance were actually

00:06:14,440 --> 00:06:18,460
impacting and user behavior that

00:06:16,780 --> 00:06:19,930
actually was guiding downstream and in

00:06:18,460 --> 00:06:22,990
fact in the case that many of our

00:06:19,930 --> 00:06:25,110
customers find is that I'm making the

00:06:22,990 --> 00:06:28,330
example up at the six-second page

00:06:25,110 --> 00:06:31,180
reducing it to five has a bigger benefit

00:06:28,330 --> 00:06:33,790
to their business than eight second page

00:06:31,180 --> 00:06:35,820
down to four and again it's finding that

00:06:33,790 --> 00:06:38,290
correlation of what matters and

00:06:35,820 --> 00:06:40,540
prioritizing what you choose to do if

00:06:38,290 --> 00:06:41,139
we're really honest in our orgs today

00:06:40,540 --> 00:06:43,270
we're

00:06:41,139 --> 00:06:45,009
data rich in information poor we've got

00:06:43,270 --> 00:06:47,740
data sources from a million different

00:06:45,009 --> 00:06:49,810
places you ask organizations what they

00:06:47,740 --> 00:06:52,599
use to prioritize their development work

00:06:49,810 --> 00:06:54,460
and that's where things instantly start

00:06:52,599 --> 00:06:56,229
getting squishy how do you have projects

00:06:54,460 --> 00:06:58,479
where you can have conviction as well as

00:06:56,229 --> 00:07:00,520
that when you execute those projects you

00:06:58,479 --> 00:07:03,310
can go back to your organization and

00:07:00,520 --> 00:07:06,219
talk about the ROI of a technical thing

00:07:03,310 --> 00:07:10,110
that you built so often we get falls

00:07:06,219 --> 00:07:12,639
into the trap with monster backlogs and

00:07:10,110 --> 00:07:14,620
the logic we have for why we need to

00:07:12,639 --> 00:07:16,689
execute our backlogs is something like

00:07:14,620 --> 00:07:19,840
we just got to fix it it's got to get

00:07:16,689 --> 00:07:22,090
better instead of I can do this and it

00:07:19,840 --> 00:07:23,710
will help draw an extra 100,000 pounds

00:07:22,090 --> 00:07:25,180
or X amount of dollars or X amount of

00:07:23,710 --> 00:07:28,199
pageviews or as impressions for the

00:07:25,180 --> 00:07:30,819
business next you look at testing

00:07:28,199 --> 00:07:32,529
obviously tons of organizations do

00:07:30,819 --> 00:07:34,120
testing internally and there's tons of

00:07:32,529 --> 00:07:36,370
software tools that you can utilize for

00:07:34,120 --> 00:07:38,889
cloud service tools you can utilize two

00:07:36,370 --> 00:07:41,379
common challenges and testing number one

00:07:38,889 --> 00:07:43,689
there's case studies written every

00:07:41,379 --> 00:07:45,430
holiday season about organizations that

00:07:43,689 --> 00:07:48,699
thought they could scale to a particular

00:07:45,430 --> 00:07:50,229
point and in the end don't and the

00:07:48,699 --> 00:07:53,080
reason is because their testing

00:07:50,229 --> 00:07:55,659
scenarios never match their actual real

00:07:53,080 --> 00:07:57,339
end user scenarios so testing tools by

00:07:55,659 --> 00:07:59,830
definition asks you to configure

00:07:57,339 --> 00:08:02,439
something very unnatural what's your

00:07:59,830 --> 00:08:04,779
five step sequence 10 page sequence

00:08:02,439 --> 00:08:06,729
what's the latency between each page

00:08:04,779 --> 00:08:09,610
assuming that every one of your users

00:08:06,729 --> 00:08:11,589
has that same experience if you actually

00:08:09,610 --> 00:08:13,569
look at your reg real end-user data

00:08:11,589 --> 00:08:15,399
you'll typically find you'll see geo

00:08:13,569 --> 00:08:17,770
differences in how people interact in

00:08:15,399 --> 00:08:19,120
your site plain language someone from

00:08:17,770 --> 00:08:20,319
Japan coming through is going to go

00:08:19,120 --> 00:08:21,899
through a different flow than perhaps

00:08:20,319 --> 00:08:23,979
someone coming from North America

00:08:21,899 --> 00:08:26,050
obviously the latency between each of

00:08:23,979 --> 00:08:28,300
their pages is different and so how do

00:08:26,050 --> 00:08:30,639
you feed in accurate testing scenarios

00:08:28,300 --> 00:08:33,070
that actually give you accurate testing

00:08:30,639 --> 00:08:34,360
capacity and load capacity second

00:08:33,070 --> 00:08:35,979
scenario that comes with the testing is

00:08:34,360 --> 00:08:38,079
the frequency that you can do it

00:08:35,979 --> 00:08:41,019
do you have the ability to continuously

00:08:38,079 --> 00:08:43,810
test by utilizing if you're still on

00:08:41,019 --> 00:08:45,339
Prem testing behind the firewall or of

00:08:43,810 --> 00:08:46,839
course if you're on the cloud to test as

00:08:45,339 --> 00:08:48,399
you wish but again the tool that you can

00:08:46,839 --> 00:08:51,160
use the test with frequency

00:08:48,399 --> 00:08:52,959
you know we covered a lot today there's

00:08:51,160 --> 00:08:55,330
a site behind me where everyone can

00:08:52,959 --> 00:08:57,550
learn more but I hope the takeaway is so

00:08:55,330 --> 00:09:00,760
which is first we don't need to talk

00:08:57,550 --> 00:09:03,279
about the benefit of CDN of what it can

00:09:00,760 --> 00:09:05,620
do for you or your end users interacting

00:09:03,279 --> 00:09:07,450
your site the main point that I hope

00:09:05,620 --> 00:09:09,220
everyone walks with is that if you're

00:09:07,450 --> 00:09:11,529
utilizing would ever see the end you've

00:09:09,220 --> 00:09:12,700
picked and you're just configured it

00:09:11,529 --> 00:09:15,100
through the UX and you're not

00:09:12,700 --> 00:09:17,980
integrating it into your CI CD workflows

00:09:15,100 --> 00:09:20,260
you're introducing potential performance

00:09:17,980 --> 00:09:22,000
bottlenecks and whether it's Akamai or

00:09:20,260 --> 00:09:23,829
whatever provider you choose I would

00:09:22,000 --> 00:09:26,260
highly encourage everyone to look how

00:09:23,829 --> 00:09:28,029
they use the capabilities provided so

00:09:26,260 --> 00:09:30,310
that you can do more faster with higher

00:09:28,029 --> 00:09:31,350
performing sites with that thank you for

00:09:30,310 --> 00:09:36,729
your time

00:09:31,350 --> 00:09:36,729

YouTube URL: https://www.youtube.com/watch?v=jhA7Q9fvBzI


