Title: FTFY: Research advances in automatic bug repair - Claire Le Goues (Carnegie Mellon University)
Publication date: 2017-10-03
Playlist: O'Reilly Velocity Conference 2017 - New York, New York
Description: 
	Claire Le Goues shares recent advances in academic software engineering and programming languages research that aims to bring that dream to reality, using everything from metaheuristic search to program synthesis to machine learning and search over big databases of existing code to make it happen.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,170 --> 00:00:05,300
I am an assistant professor at Carnegie

00:00:02,600 --> 00:00:07,730
Mellon I study software engineering and

00:00:05,300 --> 00:00:10,340
applied program analysis and programming

00:00:07,730 --> 00:00:12,200
programming languages we seek especially

00:00:10,340 --> 00:00:14,210
to come up with useful scalable

00:00:12,200 --> 00:00:16,190
techniques to reason about an improved

00:00:14,210 --> 00:00:19,010
quality of software in the sort of real

00:00:16,190 --> 00:00:22,220
evolving systems that float around on

00:00:19,010 --> 00:00:23,630
github and that you use every day in

00:00:22,220 --> 00:00:25,730
particular today I'll be talking about

00:00:23,630 --> 00:00:27,619
some research advances from my group and

00:00:25,730 --> 00:00:29,119
I'm an automatic bug repair this is a

00:00:27,619 --> 00:00:30,920
broad area actually a number of other

00:00:29,119 --> 00:00:32,389
groups do research in it as well I'm

00:00:30,920 --> 00:00:35,089
hoping to just give you a flavor of what

00:00:32,389 --> 00:00:36,409
we're doing and maybe speak spark your

00:00:35,089 --> 00:00:39,350
interest so you're willing to come talk

00:00:36,409 --> 00:00:41,179
to me about it later the great thing

00:00:39,350 --> 00:00:43,850
about this problem is that I don't ever

00:00:41,179 --> 00:00:45,739
have to motivate it very much anybody

00:00:43,850 --> 00:00:47,899
who's ever been within 16 inches of a

00:00:45,739 --> 00:00:50,870
computer knows that bugs are a problem

00:00:47,899 --> 00:00:53,749
and in fact even the most lackadaisical

00:00:50,870 --> 00:00:55,760
of estimates put the cost of bugs in

00:00:53,749 --> 00:00:57,199
software of all varieties and in the

00:00:55,760 --> 00:01:01,879
tens of billions of dollars globally

00:00:57,199 --> 00:01:03,829
annually which is really convenient so

00:01:01,879 --> 00:01:05,359
this is the problem in source level

00:01:03,829 --> 00:01:06,500
defect repair and I just want to give

00:01:05,359 --> 00:01:08,149
you the problem domain that we're

00:01:06,500 --> 00:01:10,009
specifically targeting so you understand

00:01:08,149 --> 00:01:12,799
what these approaches are trying to do

00:01:10,009 --> 00:01:15,350
we have a program and it's doing many

00:01:12,799 --> 00:01:17,030
things correctly but it's going to be

00:01:15,350 --> 00:01:18,710
doing at least one thing incorrectly and

00:01:17,030 --> 00:01:20,780
this describes basically all programs in

00:01:18,710 --> 00:01:22,939
the world there are many ways we can

00:01:20,780 --> 00:01:25,340
attest to correct behavior versus

00:01:22,939 --> 00:01:27,109
incorrect behavior in research practice

00:01:25,340 --> 00:01:29,329
to date although I'll come back to this

00:01:27,109 --> 00:01:31,159
assumption we have used test cases as

00:01:29,329 --> 00:01:33,499
proxies for any other kind of

00:01:31,159 --> 00:01:35,960
correctness specification so when I say

00:01:33,499 --> 00:01:37,670
there's a bug to be fixed I mean there's

00:01:35,960 --> 00:01:40,060
a test or maybe there's several that's

00:01:37,670 --> 00:01:42,229
failing and we would like them to pass

00:01:40,060 --> 00:01:43,939
so in practice when I was a software

00:01:42,229 --> 00:01:46,969
engineer before I quit my job and went

00:01:43,939 --> 00:01:49,069
and got a PhD my goal was to take this

00:01:46,969 --> 00:01:51,469
bug report from a customer for example

00:01:49,069 --> 00:01:53,450
and produce a small set of changes or a

00:01:51,469 --> 00:01:56,139
patch that when applied to that input

00:01:53,450 --> 00:01:58,579
program produced a very similar program

00:01:56,139 --> 00:02:01,639
didn't break anything does all the same

00:01:58,579 --> 00:02:04,460
things as before but without that

00:02:01,639 --> 00:02:06,319
negative behavior the goal and automatic

00:02:04,460 --> 00:02:08,720
program repair research is to replace me

00:02:06,319 --> 00:02:10,369
with magic freeing up my life so I can

00:02:08,720 --> 00:02:12,019
do more interesting things raising up

00:02:10,369 --> 00:02:13,209
the level of abstraction at which I have

00:02:12,019 --> 00:02:14,709
to reason

00:02:13,209 --> 00:02:17,379
saving time and ultimately improving

00:02:14,709 --> 00:02:19,510
software quality now this is a hard

00:02:17,379 --> 00:02:21,879
problem we haven't solved it yet but

00:02:19,510 --> 00:02:24,310
software and this problem have several

00:02:21,879 --> 00:02:27,459
really important properties that we have

00:02:24,310 --> 00:02:28,359
taken advantage of to try and make some

00:02:27,459 --> 00:02:30,010
progress on it

00:02:28,359 --> 00:02:32,769
so let me give you a couple the first

00:02:30,010 --> 00:02:34,989
key observation here is that code is

00:02:32,769 --> 00:02:36,189
very repetitive and predictable there's

00:02:34,989 --> 00:02:38,099
been quite a lot of work on this

00:02:36,189 --> 00:02:40,510
actually in the last five to ten years

00:02:38,099 --> 00:02:42,370
especially from colleagues at UC Davis

00:02:40,510 --> 00:02:44,319
and elsewhere and they have found in fun

00:02:42,370 --> 00:02:46,180
facts like you'd have to write five to

00:02:44,319 --> 00:02:48,099
seven lines of code before you could

00:02:46,180 --> 00:02:50,500
reasonably expect to be writing

00:02:48,099 --> 00:02:51,909
something textually distinct with

00:02:50,500 --> 00:02:53,829
respect to all the other code that's

00:02:51,909 --> 00:02:55,930
ever been written on the Internet

00:02:53,829 --> 00:02:58,480
this is convenient and we can take

00:02:55,930 --> 00:03:01,540
advantage of it the other two secret

00:02:58,480 --> 00:03:03,069
sauces is that most bug fixing patches

00:03:01,540 --> 00:03:04,870
are fairly small and that's all we've

00:03:03,069 --> 00:03:07,120
actually really need to reason about in

00:03:04,870 --> 00:03:08,169
this problem we don't have to reason

00:03:07,120 --> 00:03:09,969
about the full correctness of the

00:03:08,169 --> 00:03:12,340
program at all and other researchers

00:03:09,969 --> 00:03:15,010
have shown that a very large proportion

00:03:12,340 --> 00:03:17,519
of bugs can be fixed or addressed by

00:03:15,010 --> 00:03:20,799
only three to five lines of code change

00:03:17,519 --> 00:03:22,540
these probably aren't the major system

00:03:20,799 --> 00:03:23,949
outage changes that our Cup require you

00:03:22,540 --> 00:03:26,139
know days and days of reasoning on your

00:03:23,949 --> 00:03:27,519
part but they are actually a very

00:03:26,139 --> 00:03:31,659
non-trivial proportion of bugs in

00:03:27,519 --> 00:03:34,120
practice and finally at its heart this

00:03:31,659 --> 00:03:35,979
is a search problem this is just

00:03:34,120 --> 00:03:37,659
fundamentally what a human is doing and

00:03:35,979 --> 00:03:40,379
what any automated technique is doing is

00:03:37,659 --> 00:03:43,479
traversing a space of candidate changes

00:03:40,379 --> 00:03:44,889
looking for one that has a desired

00:03:43,479 --> 00:03:47,409
effect so that space of course is

00:03:44,889 --> 00:03:49,599
infinite but we know a lot about how to

00:03:47,409 --> 00:03:51,310
do search so in fact that's where we

00:03:49,599 --> 00:03:54,939
started we started specifically with

00:03:51,310 --> 00:03:56,949
metaheuristic search over changes at the

00:03:54,939 --> 00:03:58,930
abstract syntax tree level of a program

00:03:56,949 --> 00:04:01,599
our first effort in the space was called

00:03:58,930 --> 00:04:02,650
gen prog it used genetic programming and

00:04:01,599 --> 00:04:05,229
we made a number of domain-specific

00:04:02,650 --> 00:04:07,540
assumptions to make that space tractable

00:04:05,229 --> 00:04:09,370
so that we could successfully find a

00:04:07,540 --> 00:04:11,819
number of patches for a number of

00:04:09,370 --> 00:04:11,819

YouTube URL: https://www.youtube.com/watch?v=TDw8ogr2-T0


