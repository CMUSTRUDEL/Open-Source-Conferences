Title: Getting the most out of service mesh, with Neeraj Poddar  (Aspen Mesh)
Publication date: 2019-07-23
Playlist: OSCON 2019 - Portland, OR
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,179 --> 00:00:04,650
why should developers care about a

00:00:02,250 --> 00:00:06,390
service mesh developers should care

00:00:04,650 --> 00:00:08,460
about a service mesh because it allows

00:00:06,390 --> 00:00:11,400
them to focus on the business logic as

00:00:08,460 --> 00:00:13,650
companies move from monolithic Arctic

00:00:11,400 --> 00:00:15,630
architectures to micro services it gives

00:00:13,650 --> 00:00:18,300
them a lot of flexibility scalability

00:00:15,630 --> 00:00:20,160
and agility but at the same time it can

00:00:18,300 --> 00:00:22,619
add a lot of burden on the developers

00:00:20,160 --> 00:00:24,600
for adding functionality related to

00:00:22,619 --> 00:00:27,300
communication between micro services and

00:00:24,600 --> 00:00:29,880
securing them the library based approach

00:00:27,300 --> 00:00:31,769
which used to work for monolith it's

00:00:29,880 --> 00:00:33,510
kind of difficult to do in micro

00:00:31,769 --> 00:00:35,610
services as you have micro services

00:00:33,510 --> 00:00:36,989
written in different languages so either

00:00:35,610 --> 00:00:39,420
you have to implement them in all in

00:00:36,989 --> 00:00:41,129
different languages or you have to keep

00:00:39,420 --> 00:00:43,469
updating them to make sure they are all

00:00:41,129 --> 00:00:45,660
consistent similarly from a security

00:00:43,469 --> 00:00:48,510
point of view if you want to enable

00:00:45,660 --> 00:00:50,190
organizational policies you cannot do

00:00:48,510 --> 00:00:51,960
that by adding an appliance in front of

00:00:50,190 --> 00:00:54,719
a micro service so you have to add that

00:00:51,960 --> 00:00:56,879
logic in your application all of that

00:00:54,719 --> 00:00:59,160
can take the time away from developers

00:00:56,879 --> 00:01:01,350
to focus on business logic this is what

00:00:59,160 --> 00:01:03,090
a service mesh provides service mesh is

00:01:01,350 --> 00:01:04,710
a common infrastructure layer that can

00:01:03,090 --> 00:01:07,260
handle the communication between the

00:01:04,710 --> 00:01:08,850
micro services and as the communication

00:01:07,260 --> 00:01:10,500
is handled by the service mesh it can

00:01:08,850 --> 00:01:12,659
allow developers to offload a lot of

00:01:10,500 --> 00:01:14,490
functionality which allows them to focus

00:01:12,659 --> 00:01:17,790
on the business logic at the same time

00:01:14,490 --> 00:01:19,950
it allows operators to create a reliable

00:01:17,790 --> 00:01:21,960
and secure environment without getting

00:01:19,950 --> 00:01:24,210
coupled with the developers so this

00:01:21,960 --> 00:01:26,759
decoupling for me is the main advantage

00:01:24,210 --> 00:01:28,729
for using a service mesh it allows

00:01:26,759 --> 00:01:31,110
developers to be successful without

00:01:28,729 --> 00:01:32,460
relying on the operators and it allows

00:01:31,110 --> 00:01:34,530
operators to be functional without

00:01:32,460 --> 00:01:36,090
relying on the developers and you

00:01:34,530 --> 00:01:37,770
mentioned offloading some of the

00:01:36,090 --> 00:01:39,360
functionalities can you offer some

00:01:37,770 --> 00:01:41,579
specific examples of what can be

00:01:39,360 --> 00:01:44,009
offloaded absolutely a service mesh

00:01:41,579 --> 00:01:45,390
provides a host of functionality that

00:01:44,009 --> 00:01:47,369
developers can offload from the

00:01:45,390 --> 00:01:49,350
applications I like to think about them

00:01:47,369 --> 00:01:51,420
in three specific categories the first

00:01:49,350 --> 00:01:54,450
one is traffic management it allows

00:01:51,420 --> 00:01:57,299
developers to do routing request routing

00:01:54,450 --> 00:01:58,799
service discovery retries and circuit

00:01:57,299 --> 00:02:00,840
braking all of which they don't have to

00:01:58,799 --> 00:02:03,329
do in the applications moving on

00:02:00,840 --> 00:02:06,090
security is the second category where

00:02:03,329 --> 00:02:08,550
they can use mutual TLS to encrypt

00:02:06,090 --> 00:02:09,950
traffic between metro services they can

00:02:08,550 --> 00:02:11,970
use authentication and authorization

00:02:09,950 --> 00:02:13,620
primitives without relying on

00:02:11,970 --> 00:02:15,360
application code again

00:02:13,620 --> 00:02:17,909
and then moving on the third category is

00:02:15,360 --> 00:02:19,830
observability service mesh out of the

00:02:17,909 --> 00:02:21,840
box gives you a lot of metrics which

00:02:19,830 --> 00:02:24,000
helps you understand what's happening in

00:02:21,840 --> 00:02:26,640
your micro services at the same time it

00:02:24,000 --> 00:02:28,709
can help you emit tracing information

00:02:26,640 --> 00:02:30,480
which gives you a nice visualization of

00:02:28,709 --> 00:02:32,579
how your micro services are related to

00:02:30,480 --> 00:02:34,049
each other so metrics are great for

00:02:32,579 --> 00:02:36,750
understanding when things go wrong

00:02:34,049 --> 00:02:38,970
tracing is great for actually fixing

00:02:36,750 --> 00:02:40,709
things so you get a whole lot of

00:02:38,970 --> 00:02:43,530
functionality all without changing a lot

00:02:40,709 --> 00:02:45,480
of your code and to developers need to

00:02:43,530 --> 00:02:46,920
update their applications to benefit

00:02:45,480 --> 00:02:49,859
from the service so that's a great

00:02:46,920 --> 00:02:51,390
question because often people think you

00:02:49,859 --> 00:02:53,310
can get most of the functionality

00:02:51,390 --> 00:02:55,200
without changing the applications and

00:02:53,310 --> 00:02:56,730
that's correct there are a few cases

00:02:55,200 --> 00:02:59,069
where you might have to update your

00:02:56,730 --> 00:03:01,140
application distribute tracing is one of

00:02:59,069 --> 00:03:04,799
those examples in which case you need to

00:03:01,140 --> 00:03:06,150
propagate incoming headers specifically

00:03:04,799 --> 00:03:08,190
the incoming tracing headers from

00:03:06,150 --> 00:03:10,470
incoming requests to outgoing requests

00:03:08,190 --> 00:03:12,480
if you don't do that what happens is you

00:03:10,470 --> 00:03:14,489
only get trace information for two hops

00:03:12,480 --> 00:03:16,200
in your micro services you really want

00:03:14,489 --> 00:03:19,169
to get understanding of your micro

00:03:16,200 --> 00:03:20,819
services in its entirety secondly when

00:03:19,169 --> 00:03:23,430
you are talking to external services

00:03:20,819 --> 00:03:25,889
sometimes you might have to change your

00:03:23,430 --> 00:03:28,319
application if you want more visibility

00:03:25,889 --> 00:03:30,599
and control over how you communicate to

00:03:28,319 --> 00:03:33,079
external services specifically you might

00:03:30,599 --> 00:03:35,400
have to talk to the service mesh

00:03:33,079 --> 00:03:37,500
unencrypted then configure the service

00:03:35,400 --> 00:03:39,239
mesh to encrypt that traffic and while

00:03:37,500 --> 00:03:42,690
the service mesh encrypts the traffic

00:03:39,239 --> 00:03:44,400
you get HTTP layer 7 metrics at the same

00:03:42,690 --> 00:03:45,840
time you get the control you want these

00:03:44,400 --> 00:03:47,819
are a few examples where you might have

00:03:45,840 --> 00:03:54,239
to update your applications for most of

00:03:47,819 --> 00:03:55,680
the other cases you don't absolutely I

00:03:54,239 --> 00:03:57,239
think there are a few application

00:03:55,680 --> 00:04:00,150
requirements that might make it

00:03:57,239 --> 00:04:01,889
difficult for applications or teams to

00:04:00,150 --> 00:04:03,629
adopt a service mesh but especially

00:04:01,889 --> 00:04:05,609
there are few cases where you might want

00:04:03,629 --> 00:04:08,730
to make sure you have configured your

00:04:05,609 --> 00:04:11,430
mesh or taken some proper measures

00:04:08,730 --> 00:04:14,280
before adopting it first of that is

00:04:11,430 --> 00:04:15,780
latency sensitive applications so if you

00:04:14,280 --> 00:04:18,329
have applications which are highly

00:04:15,780 --> 00:04:20,910
latency sensitive adding a service mesh

00:04:18,329 --> 00:04:23,099
will introduce a low single-digit

00:04:20,910 --> 00:04:25,500
milliseconds of latency so if you are

00:04:23,099 --> 00:04:27,190
not prepared to add that latency should

00:04:25,500 --> 00:04:29,540
think about different arc

00:04:27,190 --> 00:04:31,580
secondly if you have some customized

00:04:29,540 --> 00:04:33,830
load-balancing or persistence

00:04:31,580 --> 00:04:36,260
requirements where the client stores

00:04:33,830 --> 00:04:38,420
some state and then using that state it

00:04:36,260 --> 00:04:40,550
makes a request to the service in that

00:04:38,420 --> 00:04:42,500
case if you don't configure your mesh

00:04:40,550 --> 00:04:44,180
correctly the mesh will try to load

00:04:42,500 --> 00:04:46,610
balanced things again and that will

00:04:44,180 --> 00:04:49,550
screw up your routing thirdly if you

00:04:46,610 --> 00:04:51,770
have an architecture which is built on

00:04:49,550 --> 00:04:54,710
asynchronous event-driven architecture

00:04:51,770 --> 00:04:56,330
if you're using things like Kafka they

00:04:54,710 --> 00:04:58,580
already provide a lot of functionality

00:04:56,330 --> 00:05:01,010
which a mesh provides so it provides you

00:04:58,580 --> 00:05:03,500
things like reliability it provides you

00:05:01,010 --> 00:05:05,450
things like observability so in that

00:05:03,500 --> 00:05:07,970
case you have to make sure you don't

00:05:05,450 --> 00:05:09,770
break that paradigm but I have seen

00:05:07,970 --> 00:05:12,920
cases where operators want to use the

00:05:09,770 --> 00:05:14,480
mesh for securing their asynchronous

00:05:12,920 --> 00:05:16,280
architecture in the same way that they

00:05:14,480 --> 00:05:18,110
want to secure everything else so you

00:05:16,280 --> 00:05:19,580
can still use service mesh you just have

00:05:18,110 --> 00:05:21,950
to make sure that you're not breaking

00:05:19,580 --> 00:05:24,590
existing architecture right and do you

00:05:21,950 --> 00:05:26,420
have any advice for developers when they

00:05:24,590 --> 00:05:29,080
want to communicate with their ops team

00:05:26,420 --> 00:05:31,700
so that they can get the most benefit

00:05:29,080 --> 00:05:34,040
exactly so I think the key to make a

00:05:31,700 --> 00:05:36,110
service mess successful or the key to

00:05:34,040 --> 00:05:38,090
make it successful in our key in your

00:05:36,110 --> 00:05:39,940
organization is having communication

00:05:38,090 --> 00:05:42,380
between the operations and the dev team

00:05:39,940 --> 00:05:44,270
to make sure that the operations team

00:05:42,380 --> 00:05:46,700
understand what are the application

00:05:44,270 --> 00:05:48,470
requirements or if you're using a

00:05:46,700 --> 00:05:50,420
functionality in a service mesh which

00:05:48,470 --> 00:05:51,740
requires changing your applications the

00:05:50,420 --> 00:05:53,600
dev team is aware of that

00:05:51,740 --> 00:05:55,100
so I've always I have seen some

00:05:53,600 --> 00:05:57,170
scenarios where people want to

00:05:55,100 --> 00:05:58,400
distributed tracing but the application

00:05:57,170 --> 00:06:01,640
developers have not changed their

00:05:58,400 --> 00:06:03,590
applications or the operations team

00:06:01,640 --> 00:06:06,770
wants visibility into the external

00:06:03,590 --> 00:06:09,260
services but they are not they're not

00:06:06,770 --> 00:06:11,560
using HTTP so you don't get the

00:06:09,260 --> 00:06:13,730
visibility so I think if any

00:06:11,560 --> 00:06:15,470
organization wants to be successful in

00:06:13,730 --> 00:06:17,600
the micro services journey and they want

00:06:15,470 --> 00:06:19,310
to use service mesh if you understand

00:06:17,600 --> 00:06:20,840
the application requirements and if you

00:06:19,310 --> 00:06:23,120
understand the functionality that you

00:06:20,840 --> 00:06:25,000
can offload to a mesh it will be a great

00:06:23,120 --> 00:06:27,110
tool and will set you up for success

00:06:25,000 --> 00:06:29,590
thank you very much for talking with me

00:06:27,110 --> 00:06:29,590

YouTube URL: https://www.youtube.com/watch?v=YRukMJsyyu4


