Title: Quickly provisioning managed database services for DevOps scale with Brett Hesterberg (Google Cloud)
Publication date: 2018-06-18
Playlist: O'Reilly Velocity Conference 2018 - San Jose, California
Description: 
	Join us in person at the O'Reilly Velocity Conference to learn to build and manage performant, distributed, resilient, and highly available websites and applications. Learn more: https://oreil.ly/2LFc8Gw

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,000 --> 00:00:03,750
hi this is Mike Hendrickson from

00:00:01,680 --> 00:00:05,490
velocity 2018 in San Jose

00:00:03,750 --> 00:00:07,410
I'm here with Brett from Google cloud

00:00:05,490 --> 00:00:11,219
Brett how you doing doing well I'm Mike

00:00:07,410 --> 00:00:13,920
hi so you're gonna talk about managed

00:00:11,219 --> 00:00:17,640
database services what does that mean a

00:00:13,920 --> 00:00:19,859
managed database service takes the IT

00:00:17,640 --> 00:00:21,840
stack of the technology stack that's

00:00:19,859 --> 00:00:24,300
required to run a database so everything

00:00:21,840 --> 00:00:27,060
from the server itself the operating

00:00:24,300 --> 00:00:29,010
system the database of course and then

00:00:27,060 --> 00:00:31,590
more complex technologies like

00:00:29,010 --> 00:00:33,480
replication and automatic failover for

00:00:31,590 --> 00:00:36,930
high availability takes the whole stack

00:00:33,480 --> 00:00:39,989
and turns that into an API call such

00:00:36,930 --> 00:00:42,390
that a dev ops team can quickly began

00:00:39,989 --> 00:00:45,149
with an API call turn up a very simple

00:00:42,390 --> 00:00:48,270
development database or a much more

00:00:45,149 --> 00:00:50,489
complex production grade database so why

00:00:48,270 --> 00:00:52,920
would that be necessary I mean why do

00:00:50,489 --> 00:00:55,710
they want to turn one up quickly well

00:00:52,920 --> 00:00:57,329
example yeah well we've seen some of our

00:00:55,710 --> 00:00:59,280
users especially those who have

00:00:57,329 --> 00:01:02,039
dedicated DevOps team interested in is

00:00:59,280 --> 00:01:03,570
running many smaller databases and they

00:01:02,039 --> 00:01:05,760
have their own internal customers

00:01:03,570 --> 00:01:07,880
development teams who wish to start

00:01:05,760 --> 00:01:10,740
projects and want to very quickly

00:01:07,880 --> 00:01:12,659
provision a database 10 years ago that

00:01:10,740 --> 00:01:14,909
would mean someone installing a database

00:01:12,659 --> 00:01:16,650
building a server if you will today

00:01:14,909 --> 00:01:18,990
DevOps teams are very interested in that

00:01:16,650 --> 00:01:20,670
rapid turn up because their internal

00:01:18,990 --> 00:01:24,270
customers or their processes demand it

00:01:20,670 --> 00:01:26,759
as well so is this a scaling it does it

00:01:24,270 --> 00:01:28,500
help scaling happen it it helps scaling

00:01:26,759 --> 00:01:30,600
it in in two ways and I mentioned that

00:01:28,500 --> 00:01:32,610
we're seeing DevOps teams particularly

00:01:30,600 --> 00:01:34,619
interested in running many smaller

00:01:32,610 --> 00:01:36,689
databases especially when they're using

00:01:34,619 --> 00:01:38,729
open source databases like my sequel in

00:01:36,689 --> 00:01:40,860
Postgres so from a scale point of view

00:01:38,729 --> 00:01:42,810
you can think of this as the quantity of

00:01:40,860 --> 00:01:45,540
these databases running hundreds or even

00:01:42,810 --> 00:01:47,790
thousands rather than tens or 50s from

00:01:45,540 --> 00:01:50,700
days of old to be sure these teams are

00:01:47,790 --> 00:01:52,590
also dealing with scale in individual

00:01:50,700 --> 00:01:54,899
database databases that grow very large

00:01:52,590 --> 00:01:57,450
and Google Cloud has technologies like

00:01:54,899 --> 00:02:00,090
cloud spanner that allow those teams to

00:01:57,450 --> 00:02:02,610
reach scale that they couldn't do even

00:02:00,090 --> 00:02:05,430
five years ago so what kind of companies

00:02:02,610 --> 00:02:07,619
do you see you know you know Google that

00:02:05,430 --> 00:02:10,410
are doing this managed services what

00:02:07,619 --> 00:02:13,680
who's who are the likely suspects here

00:02:10,410 --> 00:02:15,599
sure we've in the past we've seen kind

00:02:13,680 --> 00:02:17,519
bunnies who are our cloud native who've

00:02:15,599 --> 00:02:20,219
really started in the cloud being most

00:02:17,519 --> 00:02:22,709
open to managed services that said we're

00:02:20,219 --> 00:02:24,659
seeing now a shift to more traditional

00:02:22,709 --> 00:02:26,819
enterprises who are taking on a DevOps

00:02:24,659 --> 00:02:28,650
model and especially for their new

00:02:26,819 --> 00:02:30,599
applications thinking about

00:02:28,650 --> 00:02:32,760
architectures that very much resemble

00:02:30,599 --> 00:02:35,489
the cloud natives as opposed to

00:02:32,760 --> 00:02:36,989
traditional IT so when you you used to

00:02:35,489 --> 00:02:39,599
an important term thinking about the

00:02:36,989 --> 00:02:41,700
architecture are people thinking about

00:02:39,599 --> 00:02:43,290
and managed database services in their

00:02:41,700 --> 00:02:46,919
architecture now when they're spinning

00:02:43,290 --> 00:02:48,659
up new projects and new new systems are

00:02:46,919 --> 00:02:50,459
they actually starting to think that way

00:02:48,659 --> 00:02:52,439
they are I think we've seen it

00:02:50,459 --> 00:02:54,599
especially paired with the notion of

00:02:52,439 --> 00:02:57,329
continuous integration and continuous

00:02:54,599 --> 00:02:59,280
development where these teams

00:02:57,329 --> 00:03:02,430
historically have struggled to do that

00:02:59,280 --> 00:03:04,139
with databases with managed database it

00:03:02,430 --> 00:03:06,419
helps them achieve some of those goals

00:03:04,139 --> 00:03:08,700
and so you can imagine especially in the

00:03:06,419 --> 00:03:11,489
architecture of certain applications

00:03:08,700 --> 00:03:13,769
I'll give one example we see this quite

00:03:11,489 --> 00:03:15,750
frequently with our SAS providers or

00:03:13,769 --> 00:03:18,329
software as a service providers they

00:03:15,750 --> 00:03:20,879
wish to deliver their end users of which

00:03:18,329 --> 00:03:23,040
there are many the same technology stack

00:03:20,879 --> 00:03:25,560
in a repeatable fashion which means they

00:03:23,040 --> 00:03:26,909
may end up attempting to manage tens of

00:03:25,560 --> 00:03:29,129
thousands or hundreds of thousands of

00:03:26,909 --> 00:03:31,079
database systems and taking on that type

00:03:29,129 --> 00:03:33,000
of architecture without a managed

00:03:31,079 --> 00:03:34,590
database service would be really

00:03:33,000 --> 00:03:36,810
cumbersome and potentially problematic

00:03:34,590 --> 00:03:39,169
is there a trend that's kind of

00:03:36,810 --> 00:03:41,849
inspiring all this is this part of

00:03:39,169 --> 00:03:44,400
transformation or what what is the

00:03:41,849 --> 00:03:46,560
impetus for making this managed database

00:03:44,400 --> 00:03:49,799
services happen I think a few trends

00:03:46,560 --> 00:03:51,870
I'll start with a shift from monolithic

00:03:49,799 --> 00:03:53,669
applications large applications which

00:03:51,870 --> 00:03:56,459
were traditionally backed by a

00:03:53,669 --> 00:03:59,069
monolithic large database we've seen

00:03:56,459 --> 00:04:01,159
those applications or that notion can go

00:03:59,069 --> 00:04:03,000
by the wayside in favor of a

00:04:01,159 --> 00:04:05,970
micro-service architecture based

00:04:03,000 --> 00:04:08,579
application Micra services are allowing

00:04:05,970 --> 00:04:11,609
users to decentralize data management

00:04:08,579 --> 00:04:13,319
meaning they are able to back each micro

00:04:11,609 --> 00:04:15,299
service to build up this application

00:04:13,319 --> 00:04:17,009
with its own individual database or

00:04:15,299 --> 00:04:19,229
storage service so you can match the

00:04:17,009 --> 00:04:21,570
micro service with exactly the right

00:04:19,229 --> 00:04:23,580
type of database I deal with customers

00:04:21,570 --> 00:04:25,680
who select cloud sequel a relational

00:04:23,580 --> 00:04:27,150
database service to back some of their

00:04:25,680 --> 00:04:28,740
micro services and

00:04:27,150 --> 00:04:30,900
other google databases like cloud

00:04:28,740 --> 00:04:32,930
spanner for example for other micro

00:04:30,900 --> 00:04:35,910
services as part of a single application

00:04:32,930 --> 00:04:38,400
we've also noticed that because cloud

00:04:35,910 --> 00:04:40,020
pricing is linear in nature which hasn't

00:04:38,400 --> 00:04:42,720
historically been true in an on-premise

00:04:40,020 --> 00:04:45,060
environment we've seen that that has

00:04:42,720 --> 00:04:48,449
essentially removed a constraint from

00:04:45,060 --> 00:04:50,490
the past where today a to CPU core

00:04:48,449 --> 00:04:52,560
database server costs exactly half as

00:04:50,490 --> 00:04:54,270
much as a for CPU database server so you

00:04:52,560 --> 00:04:56,340
can imagine these customers splitting

00:04:54,270 --> 00:04:57,840
these things ever smaller and it's not

00:04:56,340 --> 00:05:00,570
really showing up in their invoice as a

00:04:57,840 --> 00:05:02,639
cost increase like it used to all of

00:05:00,570 --> 00:05:04,289
this again gets essentially amplified

00:05:02,639 --> 00:05:06,090
when you're talking about software as a

00:05:04,289 --> 00:05:07,740
service providers you're taking this and

00:05:06,090 --> 00:05:10,440
multiplying it by the number of

00:05:07,740 --> 00:05:13,530
end-users they have so those are some of

00:05:10,440 --> 00:05:15,840
the trends leading this know like every

00:05:13,530 --> 00:05:18,030
everything that is kind of new on the

00:05:15,840 --> 00:05:21,510
market or being used more and more

00:05:18,030 --> 00:05:24,090
they're trade-offs and you know there's

00:05:21,510 --> 00:05:25,380
usually good and bad so what are the

00:05:24,090 --> 00:05:27,930
trade-offs with the manage database

00:05:25,380 --> 00:05:30,180
service yeah one trade-off that I see

00:05:27,930 --> 00:05:32,010
come up almost immediately especially

00:05:30,180 --> 00:05:35,520
with a micro services architecture which

00:05:32,010 --> 00:05:37,830
which we advocate for customers have a

00:05:35,520 --> 00:05:40,050
join problem they say ok I have built in

00:05:37,830 --> 00:05:42,150
my application with a number of micro

00:05:40,050 --> 00:05:45,090
services each of which is backed by an

00:05:42,150 --> 00:05:47,280
individual storage service now how do I

00:05:45,090 --> 00:05:49,710
run a report to see to understand usage

00:05:47,280 --> 00:05:51,539
across the application and so we we

00:05:49,710 --> 00:05:54,479
commonly advise customers to think about

00:05:51,539 --> 00:05:56,130
ways to automate the copying or movement

00:05:54,479 --> 00:05:58,380
of data from each of those storage

00:05:56,130 --> 00:06:01,289
systems to a central aggravation point

00:05:58,380 --> 00:06:03,240
to an analytics system for example where

00:06:01,289 --> 00:06:05,610
then you can report and query for

00:06:03,240 --> 00:06:08,130
example that's usually one of the kind

00:06:05,610 --> 00:06:09,360
of the first challenges that folks

00:06:08,130 --> 00:06:11,400
moving to this style of architecture

00:06:09,360 --> 00:06:14,430
will run into is that like an

00:06:11,400 --> 00:06:16,470
orchestration issue like getting the

00:06:14,430 --> 00:06:18,479
data to all come together in one place

00:06:16,470 --> 00:06:20,820
and I think you can characterize it as

00:06:18,479 --> 00:06:22,470
that in general most cloud storage

00:06:20,820 --> 00:06:24,660
services and manage database services

00:06:22,470 --> 00:06:26,760
have API is that allow you to export

00:06:24,660 --> 00:06:28,139
data and to automate some of this but

00:06:26,760 --> 00:06:29,490
there very much is initially an

00:06:28,139 --> 00:06:30,990
orchestration problem where you want to

00:06:29,490 --> 00:06:32,820
make sure you've coordinated the data

00:06:30,990 --> 00:06:35,310
collection across these things so then

00:06:32,820 --> 00:06:37,560
you can go run a report so if you look

00:06:35,310 --> 00:06:38,669
at managed database systems where you

00:06:37,560 --> 00:06:40,699
are today

00:06:38,669 --> 00:06:44,460
the trends that have kind of led us here

00:06:40,699 --> 00:06:47,159
where do you see the market in the next

00:06:44,460 --> 00:06:47,969
six months and then the market on the

00:06:47,159 --> 00:06:51,090
longer term

00:06:47,969 --> 00:06:53,279
yeah our customers continue to push us

00:06:51,090 --> 00:06:55,770
with respect to scale in terms of

00:06:53,279 --> 00:06:57,930
quantity of databases so for example if

00:06:55,770 --> 00:07:00,779
you imagine yourself trying to manage

00:06:57,930 --> 00:07:02,189
10,000 databases a managed database

00:07:00,779 --> 00:07:04,139
service today helps you do that to a

00:07:02,189 --> 00:07:05,999
certain extent but there's there's

00:07:04,139 --> 00:07:08,180
really no way you're going to go for

00:07:05,999 --> 00:07:11,370
example and size each of these databases

00:07:08,180 --> 00:07:14,279
by hand when you have 10,000 or more so

00:07:11,370 --> 00:07:16,830
we get common requests to Auto scale

00:07:14,279 --> 00:07:18,360
databases to auto tune databases I think

00:07:16,830 --> 00:07:20,430
you'll see investment will be on six

00:07:18,360 --> 00:07:23,099
month in six months rather in those

00:07:20,430 --> 00:07:24,990
areas more near-term customers are

00:07:23,099 --> 00:07:28,379
asking us to help them do things in

00:07:24,990 --> 00:07:30,659
batch let me apply a tag or a label to a

00:07:28,379 --> 00:07:32,789
group of these databases so that then my

00:07:30,659 --> 00:07:35,219
my automation can later apply a change

00:07:32,789 --> 00:07:38,789
to that particular group and thinking

00:07:35,219 --> 00:07:40,589
about how you manifest api's or UIs that

00:07:38,789 --> 00:07:42,419
allow folks to manage these things they

00:07:40,589 --> 00:07:45,629
have large groups or at scale could you

00:07:42,419 --> 00:07:48,689
ever apply intelligence to that scaling

00:07:45,629 --> 00:07:50,310
like that you know say Auto scale are we

00:07:48,689 --> 00:07:51,779
gonna get to a point where AI and

00:07:50,310 --> 00:07:54,180
machine learning and everything can help

00:07:51,779 --> 00:07:56,399
figure out what you should be scaling to

00:07:54,180 --> 00:07:59,879
well I think from Google you'll see a

00:07:56,399 --> 00:08:02,339
consistent push to bring ml and in

00:07:59,879 --> 00:08:04,289
artificial intelligence to many of its

00:08:02,339 --> 00:08:06,300
cloud products that's been a core

00:08:04,289 --> 00:08:08,310
concept for Google Cloud I don't think

00:08:06,300 --> 00:08:09,120
cloud sequel or manage databases will be

00:08:08,310 --> 00:08:12,779
any exception

00:08:09,120 --> 00:08:15,870
excellent excellent well if you were to

00:08:12,779 --> 00:08:18,569
look on the really long term do you see

00:08:15,870 --> 00:08:21,899
this is something that's shattering or

00:08:18,569 --> 00:08:23,819
just part of the fabric of what everyone

00:08:21,899 --> 00:08:25,860
has to do in the future well I have bias

00:08:23,819 --> 00:08:27,659
here but I can say that the cloud sequel

00:08:25,860 --> 00:08:30,089
team very much as excited about the

00:08:27,659 --> 00:08:32,550
notion of changing the way people use

00:08:30,089 --> 00:08:34,649
databases databases a long-lived

00:08:32,550 --> 00:08:36,659
technology it's been used in a certain

00:08:34,649 --> 00:08:38,519
way for the last 20 years we'd like to

00:08:36,659 --> 00:08:40,649
see that change very dramatically and

00:08:38,519 --> 00:08:42,779
hopefully beneficially for for end users

00:08:40,649 --> 00:08:45,660
of databases so I think it's going to be

00:08:42,779 --> 00:08:48,209
transfer made transformative but again

00:08:45,660 --> 00:08:49,949
I've got some bias excellent well right

00:08:48,209 --> 00:08:50,670
we look forward to that that journey in

00:08:49,949 --> 00:08:51,480
the next 12 months

00:08:50,670 --> 00:08:54,860
we'll see how

00:08:51,480 --> 00:08:54,860
those sounds great thank you my cue

00:09:00,690 --> 00:09:02,750

YouTube URL: https://www.youtube.com/watch?v=XKpBsIGF6tw


