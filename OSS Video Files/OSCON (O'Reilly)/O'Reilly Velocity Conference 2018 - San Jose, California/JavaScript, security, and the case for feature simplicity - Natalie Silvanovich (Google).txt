Title: JavaScript, security, and the case for feature simplicity - Natalie Silvanovich (Google)
Publication date: 2018-06-13
Playlist: O'Reilly Velocity Conference 2018 - San Jose, California
Description: 
	JavaScript engines are frequently targeted by malicious attackers, and dozens of vulnerabilities are reported in them every year. Most of these occur due to errors made while implementing well-specified features. Natalie Silvanovich discusses the link between feature complexity, developer error, and security vulnerabilities and the importance of considering implementation difficulty in design.

Join us in person at the O'Reilly Velocity Conference to learn to build and manage performant, distributed, resilient, and highly available websites and applications. Learn more: https://oreil.ly/2LFc8Gw

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,310 --> 00:00:05,300
and to start off I'm gonna give a very

00:00:03,379 --> 00:00:08,750
brief explanation of the problem I'm

00:00:05,300 --> 00:00:10,940
trying to solve so usually when you

00:00:08,750 --> 00:00:13,519
create JavaScript there's a JavaScript

00:00:10,940 --> 00:00:15,289
developer and then that developers

00:00:13,519 --> 00:00:18,980
JavaScript ends up on a website

00:00:15,289 --> 00:00:21,620
somewhere and then a user visits the

00:00:18,980 --> 00:00:24,140
website and the users browser will

00:00:21,620 --> 00:00:26,510
download the HTML and the JavaScript and

00:00:24,140 --> 00:00:29,180
then the script engine component of the

00:00:26,510 --> 00:00:30,800
browser will execute it and if anything

00:00:29,180 --> 00:00:33,200
work everything works correctly

00:00:30,800 --> 00:00:35,089
rainbows will appear and unicorns will

00:00:33,200 --> 00:00:38,210
sing and you will be executing

00:00:35,089 --> 00:00:40,489
JavaScript but what happens instead

00:00:38,210 --> 00:00:43,429
sometimes is there's a malicious

00:00:40,489 --> 00:00:46,300
JavaScript developer and this malicious

00:00:43,429 --> 00:00:48,829
developer writes JavaScript code that

00:00:46,300 --> 00:00:51,679
hits a bug in the script engine on

00:00:48,829 --> 00:00:53,629
purpose and executes native code that

00:00:51,679 --> 00:00:56,659
violates the security properties of the

00:00:53,629 --> 00:00:58,940
browser so this malicious developer

00:00:56,659 --> 00:01:00,649
writes their code and then it ends up on

00:00:58,940 --> 00:01:02,899
a website it could be a malicious

00:01:00,649 --> 00:01:04,760
website or it could be a website the

00:01:02,899 --> 00:01:07,670
this malicious person has compromised

00:01:04,760 --> 00:01:09,950
somehow and then the user visits the

00:01:07,670 --> 00:01:12,409
website the website download the

00:01:09,950 --> 00:01:15,020
JavaScript and then the script engine

00:01:12,409 --> 00:01:17,450
executes sit but this causes a memory

00:01:15,020 --> 00:01:19,159
corruption bug to be hit and then this

00:01:17,450 --> 00:01:21,170
memory corruption can be exploited in a

00:01:19,159 --> 00:01:23,840
number of ways to execute native code

00:01:21,170 --> 00:01:24,860
and access data of the JavaScript

00:01:23,840 --> 00:01:27,500
otherwise you shouldn't be able to

00:01:24,860 --> 00:01:30,950
access and then unfortunately the user

00:01:27,500 --> 00:01:32,359
gets compromised and there's a lot of

00:01:30,950 --> 00:01:34,240
different layers of security in a

00:01:32,359 --> 00:01:37,340
browser to prevent this type of attack

00:01:34,240 --> 00:01:39,409
but the first way to prevent this sort

00:01:37,340 --> 00:01:41,180
of thing is to reduce the number of

00:01:39,409 --> 00:01:45,200
memory corruption bugs in a script

00:01:41,180 --> 00:01:47,869
engine which is what I'm trying to do so

00:01:45,200 --> 00:01:50,359
I looked at all four major browsers at

00:01:47,869 --> 00:01:53,840
their JavaScript engines and looked for

00:01:50,359 --> 00:01:57,140
this type of bug and I found more than

00:01:53,840 --> 00:01:59,539
20 security bugs in various browsers and

00:01:57,140 --> 00:02:01,789
I also spend a lot of time looking at

00:01:59,539 --> 00:02:04,070
JavaScript vulnerabilities ones that

00:02:01,789 --> 00:02:06,140
were found by other researchers or ones

00:02:04,070 --> 00:02:08,750
that turned up being used maliciously in

00:02:06,140 --> 00:02:10,970
the wild and tried to figure out what

00:02:08,750 --> 00:02:13,430
features they were in and I was

00:02:10,970 --> 00:02:15,140
surprised to discover that a lot of

00:02:13,430 --> 00:02:18,940
these vulnerabilities were in just

00:02:15,140 --> 00:02:18,940

YouTube URL: https://www.youtube.com/watch?v=l2q8tfZacpQ


