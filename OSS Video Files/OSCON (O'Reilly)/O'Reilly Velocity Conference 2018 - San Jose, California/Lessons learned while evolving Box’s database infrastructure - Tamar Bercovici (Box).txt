Title: Lessons learned while evolving Boxâ€™s database infrastructure - Tamar Bercovici (Box)
Publication date: 2018-06-13
Playlist: O'Reilly Velocity Conference 2018 - San Jose, California
Description: 
	When Tamar Bercovici joined Box, the entire platform was running on a single MySQL DB host fronted by a simple pool of memcached servers. Tamar details how the team has evolved the Box database stack to handle an ever-growing query load and dataset. It now comprises hundreds of servers serving millions of queries per second over hundreds of billions of data records.

Join us in person at the O'Reilly Velocity Conference to learn to build and manage performant, distributed, resilient, and highly available websites and applications. Learn more: https://oreil.ly/2LFc8Gw

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,889 --> 00:00:06,550
so as I prep for today's talk I thought

00:00:04,720 --> 00:00:08,650
back over the past seven years and we've

00:00:06,550 --> 00:00:11,019
definitely had our shares of highs and

00:00:08,650 --> 00:00:14,170
lows you know successful deployments

00:00:11,019 --> 00:00:16,359
crazy outages and what you see here is a

00:00:14,170 --> 00:00:19,390
graph of database infrastructure

00:00:16,359 --> 00:00:21,999
happiness over time plotted between

00:00:19,390 --> 00:00:24,399
Armageddon at the bottom and Nirvana at

00:00:21,999 --> 00:00:26,259
the top now we're not gonna be able to

00:00:24,399 --> 00:00:28,179
cover all of this but I'll try to hit on

00:00:26,259 --> 00:00:30,640
some of the key points and to kick us

00:00:28,179 --> 00:00:32,680
off let's start in 2011 when we first

00:00:30,640 --> 00:00:35,920
needed to contend with scaling our

00:00:32,680 --> 00:00:37,840
database here this is what our

00:00:35,920 --> 00:00:40,330
architecture looked like at the time we

00:00:37,840 --> 00:00:41,830
had a PHP web application with a custom

00:00:40,330 --> 00:00:44,170
data access layer that managed

00:00:41,830 --> 00:00:46,510
connecting to our memcache pool and our

00:00:44,170 --> 00:00:49,270
act of my sequel host now when our

00:00:46,510 --> 00:00:51,160
market traction started to take off this

00:00:49,270 --> 00:00:53,170
began to bust at the seams our

00:00:51,160 --> 00:00:55,300
replication stream was lagging we were

00:00:53,170 --> 00:00:57,520
running out of space on disk we had to

00:00:55,300 --> 00:00:59,470
do something so after thinking long and

00:00:57,520 --> 00:01:01,030
hard and considering all of our options

00:00:59,470 --> 00:01:03,520
we ultimately decided to build a

00:01:01,030 --> 00:01:05,560
sharding layer on top of my sequel now

00:01:03,520 --> 00:01:07,179
if you want to learn more about some of

00:01:05,560 --> 00:01:09,249
the design decisions that we made and

00:01:07,179 --> 00:01:10,780
also how we were able to incremental e

00:01:09,249 --> 00:01:12,549
roll this out without impacting our

00:01:10,780 --> 00:01:15,609
customers you can check out this talk

00:01:12,549 --> 00:01:19,749
from 2003 that from 2013 that goes into

00:01:15,609 --> 00:01:21,880
more details after rolling out sharding

00:01:19,749 --> 00:01:24,039
it was pretty smooth sailing we invested

00:01:21,880 --> 00:01:26,139
in our test coverage we did some cleanup

00:01:24,039 --> 00:01:28,450
and we kicked off our next big

00:01:26,139 --> 00:01:30,759
retargeting architecting effort which

00:01:28,450 --> 00:01:32,380
was to build a service abstraction layer

00:01:30,759 --> 00:01:34,840
for our database tier which we called

00:01:32,380 --> 00:01:37,450
credence we basically took that data

00:01:34,840 --> 00:01:39,969
access layer pulled it out of our PHP

00:01:37,450 --> 00:01:42,100
web app into its own scala service which

00:01:39,969 --> 00:01:43,420
enabled us to develop in a language

00:01:42,100 --> 00:01:45,759
environment that was better suited for

00:01:43,420 --> 00:01:47,979
our needs to build a client agnostic

00:01:45,759 --> 00:01:50,770
data tier and to better manage and

00:01:47,979 --> 00:01:52,359
control our database traffic but then as

00:01:50,770 --> 00:01:54,999
you can see we have a pretty precipitous

00:01:52,359 --> 00:01:58,689
drop towards the Armageddon end of the

00:01:54,999 --> 00:02:00,219
scale after a series of bad outages we

00:01:58,689 --> 00:02:02,170
realized that we've gotten to the point

00:02:00,219 --> 00:02:05,049
where the database tier was actually the

00:02:02,170 --> 00:02:07,329
number one reason for box wide downtime

00:02:05,049 --> 00:02:09,670
which was not a great state to be in

00:02:07,329 --> 00:02:11,650
and so this kicked off an intense phase

00:02:09,670 --> 00:02:14,540
of focusing on building up the

00:02:11,650 --> 00:02:17,480
resiliency of our infrastructure

00:02:14,540 --> 00:02:18,769
now how did we get to this point you

00:02:17,480 --> 00:02:20,659
know scaling ahead of the business is

00:02:18,769 --> 00:02:23,540
actually really hard if you're working

00:02:20,659 --> 00:02:25,189
at a growing company then your load is

00:02:23,540 --> 00:02:28,939
constantly increasing your data

00:02:25,189 --> 00:02:30,260
footprint is growing your your traffic

00:02:28,939 --> 00:02:32,000
patterns are evolving you know

00:02:30,260 --> 00:02:33,980
everything is constantly changing around

00:02:32,000 --> 00:02:35,690
you and with databases in particular

00:02:33,980 --> 00:02:37,970
they have several characteristics that

00:02:35,690 --> 00:02:39,799
have kind of a cliff like performance

00:02:37,970 --> 00:02:41,540
profile so you'll have a metric that

00:02:39,799 --> 00:02:43,129
slowly gets worse and worse and worse

00:02:41,540 --> 00:02:44,840
over time and then all of a sudden it

00:02:43,129 --> 00:02:46,849
just tanks and so it's actually really

00:02:44,840 --> 00:02:48,590
hard to know how far away from the edge

00:02:46,849 --> 00:02:51,670
you are until you're basically staying

00:02:48,590 --> 00:02:51,670

YouTube URL: https://www.youtube.com/watch?v=bd0NCS9ecto


