Title: Solving business and technical complexity with CQS models with Allard Buijze (AxonIQ)
Publication date: 2017-10-18
Playlist: O'Reilly Software Architecture Conference 2017 - London, United Kingdom
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,030 --> 00:00:03,389
hi this is Mike Hendrickson from

00:00:01,380 --> 00:00:05,130
software architecture in London I'm here

00:00:03,389 --> 00:00:06,810
with our drum mac sonic Howard how you

00:00:05,130 --> 00:00:08,639
doing I'm good thank you

00:00:06,810 --> 00:00:11,670
so can you unpack a little bit about

00:00:08,639 --> 00:00:13,469
what you guys do I'm not totally aware

00:00:11,670 --> 00:00:15,450
of everything you guys do so can you let

00:00:13,469 --> 00:00:17,070
everyone know what you do yes Eric sonic

00:00:15,450 --> 00:00:19,980
is it's a company that was actually

00:00:17,070 --> 00:00:22,730
founded only three months ago and we are

00:00:19,980 --> 00:00:25,109
the backing company of a framework

00:00:22,730 --> 00:00:27,119
called excellent framework which has

00:00:25,109 --> 00:00:29,519
been around for quite a lot longer by

00:00:27,119 --> 00:00:32,279
now about seven years I think the first

00:00:29,519 --> 00:00:36,030
draft started to emerge about seven

00:00:32,279 --> 00:00:38,190
seven years ago and essentially as a

00:00:36,030 --> 00:00:41,070
company we provide the support that

00:00:38,190 --> 00:00:43,829
people need to to implement the the

00:00:41,070 --> 00:00:46,020
actual framework in a correct way and

00:00:43,829 --> 00:00:48,840
what does the framework do so the the

00:00:46,020 --> 00:00:52,379
framework so let me tell you how it

00:00:48,840 --> 00:00:55,020
started it's a bit of a weird story so I

00:00:52,379 --> 00:00:57,090
was I was a software architect at the at

00:00:55,020 --> 00:00:58,710
the time and working on different

00:00:57,090 --> 00:01:01,199
projects and I noticed that every

00:00:58,710 --> 00:01:03,059
project became very complex the

00:01:01,199 --> 00:01:04,710
complexity of the of the software would

00:01:03,059 --> 00:01:07,049
grow exponentially as you would add

00:01:04,710 --> 00:01:10,619
features which is not a desired

00:01:07,049 --> 00:01:13,530
side-effect of software and so I started

00:01:10,619 --> 00:01:15,030
investigating how how does that what was

00:01:13,530 --> 00:01:17,130
causing this right what's what's the

00:01:15,030 --> 00:01:19,290
underlying problem and I was into

00:01:17,130 --> 00:01:22,350
domain-driven design a lot at the time

00:01:19,290 --> 00:01:24,119
still one so I started experimenting and

00:01:22,350 --> 00:01:27,930
I learned about this concept called CQRS

00:01:24,119 --> 00:01:30,450
and I started an experiment on a

00:01:27,930 --> 00:01:34,409
published code on github that was very

00:01:30,450 --> 00:01:36,720
normal procedure for us to to do

00:01:34,409 --> 00:01:38,479
experiments so I was experimenting and I

00:01:36,720 --> 00:01:41,100
noticed that I was writing a lot of code

00:01:38,479 --> 00:01:42,509
just to solve a technical problem and

00:01:41,100 --> 00:01:44,280
not so much business problems so I

00:01:42,509 --> 00:01:46,439
figured everybody would have to write

00:01:44,280 --> 00:01:48,990
code like that if they were to solve any

00:01:46,439 --> 00:01:51,329
business problem the way I approached it

00:01:48,990 --> 00:01:53,280
and then a couple of months later I got

00:01:51,329 --> 00:01:55,140
a call from the French company and say

00:01:53,280 --> 00:01:57,329
they said we they were using my

00:01:55,140 --> 00:01:59,009
framework in production but I wasn't

00:01:57,329 --> 00:02:01,110
calling it a framework just yet it was

00:01:59,009 --> 00:02:03,119
just an experience for me so that's some

00:02:01,110 --> 00:02:05,640
scared me and asked them okay but what

00:02:03,119 --> 00:02:07,649
are you using it for they said well it's

00:02:05,640 --> 00:02:10,319
a medical application we're using the

00:02:07,649 --> 00:02:12,150
framework to trace the cleaning process

00:02:10,319 --> 00:02:14,909
of surgical tools

00:02:12,150 --> 00:02:17,340
new tools use in surgery so as far as I

00:02:14,909 --> 00:02:19,620
know no lives were harmed in the process

00:02:17,340 --> 00:02:22,019
of building the framework so essentially

00:02:19,620 --> 00:02:25,260
the the goal of the framework is to be

00:02:22,019 --> 00:02:28,200
able to cope with growing complexity

00:02:25,260 --> 00:02:30,569
that we have in our applications by by

00:02:28,200 --> 00:02:33,750
creating not just a single domain model

00:02:30,569 --> 00:02:35,280
that tries to to capture all all that

00:02:33,750 --> 00:02:37,769
you're doing and building a huge

00:02:35,280 --> 00:02:40,799
monolith on top of that but separating

00:02:37,769 --> 00:02:43,560
these that big model into different

00:02:40,799 --> 00:02:46,980
smaller models models that are really

00:02:43,560 --> 00:02:49,530
focused on a specific problem and a

00:02:46,980 --> 00:02:52,739
specific concept that we use is circled

00:02:49,530 --> 00:02:54,569
CQRS which says create a model that is

00:02:52,739 --> 00:02:56,579
focused on dealing with commands so with

00:02:54,569 --> 00:02:58,799
the state changes of your application by

00:02:56,579 --> 00:03:00,180
validating them and make sure that model

00:02:58,799 --> 00:03:01,709
is really good at doing that and

00:03:00,180 --> 00:03:03,750
optimize it for the non-functional

00:03:01,709 --> 00:03:06,390
requirements that you have it may be

00:03:03,750 --> 00:03:09,510
performance it may be a simple latency

00:03:06,390 --> 00:03:12,450
or maybe complexity and on the other

00:03:09,510 --> 00:03:15,950
side there's the models that serve

00:03:12,450 --> 00:03:20,579
information for the queries which are

00:03:15,950 --> 00:03:21,900
optimized to give answers in in a fast

00:03:20,579 --> 00:03:23,579
way or at least an efficient way

00:03:21,900 --> 00:03:25,440
depending on again the non-functional

00:03:23,579 --> 00:03:28,769
needs that you have there so by

00:03:25,440 --> 00:03:30,500
separating them you you can tackle the

00:03:28,769 --> 00:03:32,849
complexity in different areas making

00:03:30,500 --> 00:03:35,790
more modules but keeping them less

00:03:32,849 --> 00:03:38,549
complex so is this a tool for software

00:03:35,790 --> 00:03:41,639
architects it's so the framework is is a

00:03:38,549 --> 00:03:45,180
tool for mainly developers but we do see

00:03:41,639 --> 00:03:47,430
that architects start off with the the

00:03:45,180 --> 00:03:51,030
architectural patterns that the tool

00:03:47,430 --> 00:03:54,180
supports so the decision is often - made

00:03:51,030 --> 00:03:55,560
by architects to start using the concept

00:03:54,180 --> 00:03:58,049
that the framework supports and then

00:03:55,560 --> 00:04:00,930
it's either if it's a coding architect

00:03:58,049 --> 00:04:05,400
which which is the case in most

00:04:00,930 --> 00:04:08,549
situations he will probably find the the

00:04:05,400 --> 00:04:11,549
framework as being a way to to ease into

00:04:08,549 --> 00:04:14,370
that specific architectural style so

00:04:11,549 --> 00:04:16,889
what is the the biggest benefit of would

00:04:14,370 --> 00:04:19,139
say a architect and then a developer

00:04:16,889 --> 00:04:20,940
using a tool like this just reducing

00:04:19,139 --> 00:04:23,490
complexity or this is there more than

00:04:20,940 --> 00:04:24,330
well there is more so one one thing is

00:04:23,490 --> 00:04:26,009
reducing complain

00:04:24,330 --> 00:04:30,060
today by creating these different models

00:04:26,009 --> 00:04:33,090
and another benefit is it seeker s makes

00:04:30,060 --> 00:04:36,780
it easier to to to apply event sourcing

00:04:33,090 --> 00:04:38,400
and event sourcing is where you when

00:04:36,780 --> 00:04:39,750
there's a state change you omit an event

00:04:38,400 --> 00:04:41,430
to notify other components that

00:04:39,750 --> 00:04:43,860
something has happened write an order

00:04:41,430 --> 00:04:47,340
has been sold or an inventory item has

00:04:43,860 --> 00:04:49,199
been depleted yes so anything that's

00:04:47,340 --> 00:04:51,449
important and these are business level

00:04:49,199 --> 00:04:55,319
events right there they're not technical

00:04:51,449 --> 00:04:56,849
things and that component will need to

00:04:55,319 --> 00:04:58,440
know the current state of the inventory

00:04:56,849 --> 00:05:00,419
for example but it's also omitting those

00:04:58,440 --> 00:05:03,479
events and you can store those events

00:05:00,419 --> 00:05:06,300
and then you have a nice sort of audit

00:05:03,479 --> 00:05:08,659
trail of what is happening to to your

00:05:06,300 --> 00:05:11,129
applications vice by storing them and

00:05:08,659 --> 00:05:12,539
event sourcing is the process where you

00:05:11,129 --> 00:05:15,240
don't store the current state anymore

00:05:12,539 --> 00:05:18,509
separately but you only use that trail

00:05:15,240 --> 00:05:20,250
of events as your source of truth which

00:05:18,509 --> 00:05:22,110
makes that audit trail very reliable

00:05:20,250 --> 00:05:24,449
because your guarantee that if there is

00:05:22,110 --> 00:05:26,580
a mistake in your states that mistake is

00:05:24,449 --> 00:05:28,440
reflected in your in your state so

00:05:26,580 --> 00:05:30,930
there's nothing that can happen without

00:05:28,440 --> 00:05:32,930
leaving a trace so is this going to be

00:05:30,930 --> 00:05:36,090
ideal for continuous delivery

00:05:32,930 --> 00:05:37,680
environments as well there are some

00:05:36,090 --> 00:05:41,759
challenges in continuous delivery

00:05:37,680 --> 00:05:43,289
exactly because state changes happen all

00:05:41,759 --> 00:05:45,870
of the time and you're storing that

00:05:43,289 --> 00:05:47,430
information pretty much indefinitely so

00:05:45,870 --> 00:05:50,759
when you're deploying new versions

00:05:47,430 --> 00:05:52,379
there's always this and backwards but

00:05:50,759 --> 00:05:53,729
also forwards compatibility that you

00:05:52,379 --> 00:05:55,259
have to take into account that is a

00:05:53,729 --> 00:05:57,900
challenge and that's one of the

00:05:55,259 --> 00:06:01,710
challenges that axon will help

00:05:57,900 --> 00:06:03,690
developers to to tackle so it's it's

00:06:01,710 --> 00:06:04,620
definitely it will still be a challenge

00:06:03,690 --> 00:06:06,419
and it's still there

00:06:04,620 --> 00:06:08,190
but we're trying to make the developer

00:06:06,419 --> 00:06:10,289
life easier yeah because challenge and

00:06:08,190 --> 00:06:12,240
complexity are a very similar thing is

00:06:10,289 --> 00:06:14,610
like you know complexity can challenge

00:06:12,240 --> 00:06:17,129
an organization and a framework and a

00:06:14,610 --> 00:06:19,830
software delivery but also the challenge

00:06:17,129 --> 00:06:21,210
in keeping that going

00:06:19,830 --> 00:06:23,360
we'll be something important for

00:06:21,210 --> 00:06:26,340
everyone so if you were to fast-forward

00:06:23,360 --> 00:06:27,780
six to eight months from now what would

00:06:26,340 --> 00:06:30,900
you like to say you guys are doing

00:06:27,780 --> 00:06:32,610
better than anyone else yeah so right

00:06:30,900 --> 00:06:34,590
now we've we've got the Accident

00:06:32,610 --> 00:06:36,750
framework and the adoption of the axil

00:06:34,590 --> 00:06:39,030
framework is growing quite rapidly but

00:06:36,750 --> 00:06:40,500
now we're we're seeing problems that our

00:06:39,030 --> 00:06:42,960
customers our challenges and our

00:06:40,500 --> 00:06:44,699
customers where they start using the

00:06:42,960 --> 00:06:46,319
accident framework at a larger scale so

00:06:44,699 --> 00:06:48,900
those events are being published on a

00:06:46,319 --> 00:06:51,270
much larger scale than just in a single

00:06:48,900 --> 00:06:52,969
application so one of our customers has

00:06:51,270 --> 00:06:56,610
over eight hundred nodes communicating

00:06:52,969 --> 00:06:59,389
using events in different parts of their

00:06:56,610 --> 00:07:01,620
organizations and they have difficulties

00:06:59,389 --> 00:07:03,150
efficiently routing those events to the

00:07:01,620 --> 00:07:04,860
different components that are that are

00:07:03,150 --> 00:07:06,270
interested and there's not only events

00:07:04,860 --> 00:07:09,780
there's also the commands and the crane

00:07:06,270 --> 00:07:12,870
queries that are moving around so right

00:07:09,780 --> 00:07:15,479
now as as exonic we are focusing on I

00:07:12,870 --> 00:07:17,250
said the area in between those those

00:07:15,479 --> 00:07:20,969
applications that are being deployed and

00:07:17,250 --> 00:07:25,139
providing a messaging platform if I may

00:07:20,969 --> 00:07:26,909
call it that way to make tamai za-- the

00:07:25,139 --> 00:07:29,460
the routing of messages between these

00:07:26,909 --> 00:07:33,569
these components messaging orchestration

00:07:29,460 --> 00:07:36,000
message orchestration so maybe he is be

00:07:33,569 --> 00:07:36,509
sort of puffs up and there's no no not

00:07:36,000 --> 00:07:39,300
that again

00:07:36,509 --> 00:07:42,330
yeah we've learned our lessons from from

00:07:39,300 --> 00:07:45,029
that era but it seems that we are moving

00:07:42,330 --> 00:07:49,319
to the exact opposite of ESB right now

00:07:45,029 --> 00:07:51,539
which is dump pipes and just a message

00:07:49,319 --> 00:07:53,940
brokering just sending out a message and

00:07:51,539 --> 00:07:56,129
publishing to to any components but we

00:07:53,940 --> 00:07:58,949
see some problems with that as well it's

00:07:56,129 --> 00:08:00,150
bit oversimplified we believe that

00:07:58,949 --> 00:08:01,979
there's a middle ground

00:08:00,150 --> 00:08:04,110
someone's closer to the dumb pipes than

00:08:01,979 --> 00:08:06,690
to via to ESB but there's a middle

00:08:04,110 --> 00:08:08,610
ground where a messaging platform

00:08:06,690 --> 00:08:10,740
doesn't know about the meaning of the

00:08:08,610 --> 00:08:13,050
contents of a message but it does know

00:08:10,740 --> 00:08:14,759
the stereotype of a message so it

00:08:13,050 --> 00:08:17,099
doesn't know whether it's an event or a

00:08:14,759 --> 00:08:18,930
command or a query because the routing

00:08:17,099 --> 00:08:21,659
patterns that we see for those messages

00:08:18,930 --> 00:08:24,360
there are slightly different so you guys

00:08:21,659 --> 00:08:27,029
provide the support exonic provides the

00:08:24,360 --> 00:08:29,070
support for the axon framework what is

00:08:27,029 --> 00:08:30,570
the biggest need that you're hearing

00:08:29,070 --> 00:08:32,279
from people when they're trying to

00:08:30,570 --> 00:08:35,219
deploy and implement

00:08:32,279 --> 00:08:37,560
the framework yes so the the framework

00:08:35,219 --> 00:08:40,620
uses some some paradigms that are new to

00:08:37,560 --> 00:08:41,939
most and we noticed that but because

00:08:40,620 --> 00:08:44,209
they're new they want to do and they

00:08:41,939 --> 00:08:46,860
want to know whether they do it right

00:08:44,209 --> 00:08:48,689
because there's not many places where

00:08:46,860 --> 00:08:50,009
you can go and ask fellow developers

00:08:48,689 --> 00:08:52,410
like hey what's your experience in

00:08:50,009 --> 00:08:54,060
building a large-scale cqs based event

00:08:52,410 --> 00:08:55,819
sourced application there's not that

00:08:54,060 --> 00:08:58,290
many people that will give you an answer

00:08:55,819 --> 00:09:01,680
so they'd like to to come to us - to

00:08:58,290 --> 00:09:03,089
help them do it right and that's also

00:09:01,680 --> 00:09:04,980
because of an event sourcing you're

00:09:03,089 --> 00:09:06,720
you're storing your history and you have

00:09:04,980 --> 00:09:09,629
to live with that history forever you're

00:09:06,720 --> 00:09:13,379
dragging it with you so doing it rights

00:09:09,629 --> 00:09:15,240
well the first times is slightly more

00:09:13,379 --> 00:09:16,949
important than it used to be you're

00:09:15,240 --> 00:09:19,290
still allowed to make mistakes and

00:09:16,949 --> 00:09:22,410
there's ways to fix them but since it's

00:09:19,290 --> 00:09:24,899
so so new people just want to have

00:09:22,410 --> 00:09:27,839
confirmation that whatever design

00:09:24,899 --> 00:09:30,990
they've made is is correct for them so

00:09:27,839 --> 00:09:34,259
it's and and also because it's new

00:09:30,990 --> 00:09:36,420
people try to well they don't try they

00:09:34,259 --> 00:09:38,129
just forget everything they know I said

00:09:36,420 --> 00:09:39,839
oh this is a new world now so all the

00:09:38,129 --> 00:09:40,379
old rules that we had they don't apply

00:09:39,839 --> 00:09:42,059
anymore

00:09:40,379 --> 00:09:44,160
and now we have to learn everything

00:09:42,059 --> 00:09:46,379
again well that's not true either we

00:09:44,160 --> 00:09:47,879
still have good rules there's a lot of

00:09:46,379 --> 00:09:50,129
lessons that we've learned and a lot of

00:09:47,879 --> 00:09:52,050
practices that we have that are still

00:09:50,129 --> 00:09:54,420
very much valid even though we change a

00:09:52,050 --> 00:09:57,449
bit of the architectural style in which

00:09:54,420 --> 00:09:59,220
we we implement them so Allard if you

00:09:57,449 --> 00:10:02,850
and I sit down twelve months from now

00:09:59,220 --> 00:10:05,220
here in London next year and have the

00:10:02,850 --> 00:10:09,449
same conversation what will be different

00:10:05,220 --> 00:10:11,850
for exonic so exonic will have changed

00:10:09,449 --> 00:10:14,370
from a company that primarily provides

00:10:11,850 --> 00:10:18,180
support on on the framework to a company

00:10:14,370 --> 00:10:22,220
that provides a messaging product that

00:10:18,180 --> 00:10:25,129
allows companies to to essentially scale

00:10:22,220 --> 00:10:28,079
scale applications out dynamically

00:10:25,129 --> 00:10:30,990
without having to care much about how to

00:10:28,079 --> 00:10:33,300
implement these messaging patterns in

00:10:30,990 --> 00:10:34,649
between these these applications so we

00:10:33,300 --> 00:10:36,570
are evolving more towards a product

00:10:34,649 --> 00:10:39,180
company

00:10:36,570 --> 00:10:41,430
we're developing that software right now

00:10:39,180 --> 00:10:45,120
as we as we speak in our in our office

00:10:41,430 --> 00:10:46,680
but our means of survival at the moment

00:10:45,120 --> 00:10:48,029
is its some support

00:10:46,680 --> 00:10:51,680
excellent how do we look forward that

00:10:48,029 --> 00:10:51,680
conversation right see this year

00:10:57,529 --> 00:10:59,589

YouTube URL: https://www.youtube.com/watch?v=ZGqlxSdJFz0


