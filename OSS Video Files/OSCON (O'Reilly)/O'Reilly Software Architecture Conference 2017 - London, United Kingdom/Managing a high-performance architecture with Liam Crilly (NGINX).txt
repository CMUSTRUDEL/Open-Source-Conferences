Title: Managing a high-performance architecture with Liam Crilly (NGINX)
Publication date: 2017-10-18
Playlist: O'Reilly Software Architecture Conference 2017 - London, United Kingdom
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,030 --> 00:00:03,149
hi this is Mike Hendrickson from

00:00:01,740 --> 00:00:05,130
software architecture in London I'm here

00:00:03,149 --> 00:00:06,720
with Liam Kelly Liam how you doing great

00:00:05,130 --> 00:00:09,330
in fact it's great to be so you're with

00:00:06,720 --> 00:00:10,889
nginx and what I know of nginx is you're

00:00:09,330 --> 00:00:13,980
a high-performance web server

00:00:10,889 --> 00:00:14,910
are you a web server or what what is

00:00:13,980 --> 00:00:18,539
nginx

00:00:14,910 --> 00:00:21,660
so yes you absolutely are web server but

00:00:18,539 --> 00:00:23,400
we're a lot more than that and many of

00:00:21,660 --> 00:00:26,130
the users of nginx

00:00:23,400 --> 00:00:29,130
came to us from that web server use case

00:00:26,130 --> 00:00:32,369
so the reason that nginx was was

00:00:29,130 --> 00:00:36,030
originally envisaged and built was to

00:00:32,369 --> 00:00:38,579
provide high performance web server that

00:00:36,030 --> 00:00:40,739
could manage the amount of traffic that

00:00:38,579 --> 00:00:43,829
frankly at the time Apache couldn't

00:00:40,739 --> 00:00:45,629
manage it was a essentially you call him

00:00:43,829 --> 00:00:47,640
now DevOps engineer the guy call da

00:00:45,629 --> 00:00:49,950
course is away if he was working for

00:00:47,640 --> 00:00:53,640
rambler to argue Russians for equipment

00:00:49,950 --> 00:00:55,469
of Yahoo back in the day and the Apache

00:00:53,640 --> 00:00:57,140
web servers just we're running out of

00:00:55,469 --> 00:00:59,520
memory and they weren't handling them of

00:00:57,140 --> 00:01:00,960
concurrent connections that their growth

00:00:59,520 --> 00:01:03,530
the Internet at that time was providing

00:01:00,960 --> 00:01:06,420
so he said how to solve that problem and

00:01:03,530 --> 00:01:09,150
at the same time there was a computer

00:01:06,420 --> 00:01:12,390
science problem called the C 10k problem

00:01:09,150 --> 00:01:14,580
and that's 10,000 concurrent users on a

00:01:12,390 --> 00:01:18,119
single box single piece of hardware at

00:01:14,580 --> 00:01:20,460
that time so he Igor sent out he wrote a

00:01:18,119 --> 00:01:22,920
different type of architecture for how

00:01:20,460 --> 00:01:24,210
to build a web server and it's an

00:01:22,920 --> 00:01:26,070
event-driven architecture which is

00:01:24,210 --> 00:01:27,509
increasingly popular these days for high

00:01:26,070 --> 00:01:29,909
scale web applications it's kind of

00:01:27,509 --> 00:01:32,880
architecture you need to be looking at

00:01:29,909 --> 00:01:34,590
moving to massive transactions massive

00:01:32,880 --> 00:01:38,820
transactions massive scale hyper scale

00:01:34,590 --> 00:01:43,560
as you might call my corner and so he

00:01:38,820 --> 00:01:47,280
went and did this thing and he it worked

00:01:43,560 --> 00:01:50,130
for him inside inside Rambler and what

00:01:47,280 --> 00:01:52,229
it allowed him to do was keep the Apache

00:01:50,130 --> 00:01:54,090
servers but not crash them and he could

00:01:52,229 --> 00:01:55,049
handle all of the static access and

00:01:54,090 --> 00:01:58,500
static assets

00:01:55,049 --> 00:02:00,689
and other resources from nginx without

00:01:58,500 --> 00:02:03,030
having to put extra load on the Apache

00:02:00,689 --> 00:02:05,549
service and this evolved in evolved so

00:02:03,030 --> 00:02:06,840
lots of people know nginx from web being

00:02:05,549 --> 00:02:09,239
a high-performance web server from the

00:02:06,840 --> 00:02:11,310
absolute VR but we're also reverse proxy

00:02:09,239 --> 00:02:12,900
so we can sit in front of any web

00:02:11,310 --> 00:02:15,180
application we can sit in front of any

00:02:12,900 --> 00:02:18,150
TCP or UDP application for that matter

00:02:15,180 --> 00:02:22,019
and be a reverse proxy and a load

00:02:18,150 --> 00:02:24,150
balancer so when you scale keep nginx at

00:02:22,019 --> 00:02:26,040
the front end you bring in all the

00:02:24,150 --> 00:02:27,450
additional instances you need to run at

00:02:26,040 --> 00:02:28,890
the scale that you can scale

00:02:27,450 --> 00:02:31,680
horizontally of course that might be

00:02:28,890 --> 00:02:33,060
containers these days and nginx will

00:02:31,680 --> 00:02:36,660
measure traffic it will low balance it

00:02:33,060 --> 00:02:38,849
and it will also cache it so if you need

00:02:36,660 --> 00:02:41,519
another layer of performance on top then

00:02:38,849 --> 00:02:43,380
once we've received an asset from a

00:02:41,519 --> 00:02:44,489
back-end we can cache it locally and

00:02:43,380 --> 00:02:46,230
then the next request that comes along

00:02:44,489 --> 00:02:48,150
we just send that we don't even have to

00:02:46,230 --> 00:02:51,239
trouble the backend anymore so there are

00:02:48,150 --> 00:02:53,459
a number of elements to nginx the

00:02:51,239 --> 00:02:54,750
webserver so this is kind of the

00:02:53,459 --> 00:02:56,940
architecture of a perform high

00:02:54,750 --> 00:02:59,459
performance absolutely it is yeah okay

00:02:56,940 --> 00:03:03,180
and we've seen that the way that people

00:02:59,459 --> 00:03:06,030
build applications more and more fits

00:03:03,180 --> 00:03:08,970
the model of having a high performance

00:03:06,030 --> 00:03:12,150
reverse proxy these days in front of

00:03:08,970 --> 00:03:13,500
application so for the busiest sites on

00:03:12,150 --> 00:03:15,810
the Internet we tend to be deployed

00:03:13,500 --> 00:03:17,910
perhaps as a web server but most

00:03:15,810 --> 00:03:20,150
certainly is reverse proxy so what is

00:03:17,910 --> 00:03:22,980
the big benefit of a reverse proxy

00:03:20,150 --> 00:03:25,829
primarily you get so you get scale you

00:03:22,980 --> 00:03:28,200
get reliability you get consistency so a

00:03:25,829 --> 00:03:30,660
client the web browser the API client

00:03:28,200 --> 00:03:32,250
mobile app whatever it is it talks to

00:03:30,660 --> 00:03:35,099
one thing and one thing only in that's

00:03:32,250 --> 00:03:36,630
reverse proxy and whatever happens at

00:03:35,099 --> 00:03:41,069
the backend in terms of scale in terms

00:03:36,630 --> 00:03:44,069
of outages in terms of versions you do

00:03:41,069 --> 00:03:46,109
it upgrades all of that happens behind

00:03:44,069 --> 00:03:48,810
the scenes the client sees a very

00:03:46,109 --> 00:03:50,160
reliable a very fast front end they it's

00:03:48,810 --> 00:03:51,870
talking to it thinks it's talking to the

00:03:50,160 --> 00:03:52,739
website in fact is talking to reverse

00:03:51,870 --> 00:03:55,169
proxy that's us

00:03:52,739 --> 00:03:58,859
and then we handle the other connections

00:03:55,169 --> 00:04:00,800
back to the backend so that means the

00:03:58,859 --> 00:04:05,000
front end gets an easier job

00:04:00,800 --> 00:04:08,450
it sees a very reliable predictable web

00:04:05,000 --> 00:04:10,490
server and the backends they see no

00:04:08,450 --> 00:04:12,290
longer do they have to deal with slow

00:04:10,490 --> 00:04:13,460
clients coming in on from different

00:04:12,290 --> 00:04:15,470
countries and different network

00:04:13,460 --> 00:04:16,790
connections different latencies and the

00:04:15,470 --> 00:04:18,049
how the connection open waiting for the

00:04:16,790 --> 00:04:18,290
replace to come in and then they handle

00:04:18,049 --> 00:04:20,450
it

00:04:18,290 --> 00:04:23,810
consuming memory the whole time they see

00:04:20,450 --> 00:04:25,760
reverse proxy they see one client very

00:04:23,810 --> 00:04:27,020
well-behaved client that doesn't do

00:04:25,760 --> 00:04:29,720
anything until it's got a complete

00:04:27,020 --> 00:04:32,300
request from the client sends it cross

00:04:29,720 --> 00:04:36,500
we get response back and that means the

00:04:32,300 --> 00:04:38,300
backend apps get the best behaved the

00:04:36,500 --> 00:04:39,890
perfect client they could hope for they

00:04:38,300 --> 00:04:41,540
don't spend any time waiting for data to

00:04:39,890 --> 00:04:43,730
come in they can just deal with a

00:04:41,540 --> 00:04:46,160
request and send it back and that's the

00:04:43,730 --> 00:04:48,620
reason why you put an Internet reverse

00:04:46,160 --> 00:04:50,450
proxy in front of your your API so

00:04:48,620 --> 00:04:52,070
you're back in web servers and they can

00:04:50,450 --> 00:04:54,230
now handle more load than they could

00:04:52,070 --> 00:04:56,240
before even though you put in an extra

00:04:54,230 --> 00:04:58,220
hole that more than pays for its own

00:04:56,240 --> 00:04:58,580
handle more load but they also scale as

00:04:58,220 --> 00:05:00,170
well

00:04:58,580 --> 00:05:02,150
you can then skate it freely so you've

00:05:00,170 --> 00:05:03,860
got this for reliables single entry

00:05:02,150 --> 00:05:06,800
point in the reverse proxy and then the

00:05:03,860 --> 00:05:11,540
applications can scale either for load

00:05:06,800 --> 00:05:13,370
four spikes for or just for high ability

00:05:11,540 --> 00:05:15,320
purposes so you can change the tires

00:05:13,370 --> 00:05:17,810
where you're moving at high speeds can

00:05:15,320 --> 00:05:20,060
indeed basically yeah yeah it's lightly

00:05:17,810 --> 00:05:22,630
feeling whenever you are calling yeah

00:05:20,060 --> 00:05:25,400
and and that has played very nicely with

00:05:22,630 --> 00:05:28,400
the shift with Marc services and the

00:05:25,400 --> 00:05:31,220
shift towards containerize environments

00:05:28,400 --> 00:05:34,070
where these backends are now smaller

00:05:31,220 --> 00:05:35,360
units of deployment you know either a

00:05:34,070 --> 00:05:37,669
whole app or part of an app you know

00:05:35,360 --> 00:05:39,890
Marcus knows his environment and that

00:05:37,669 --> 00:05:43,660
means that they have inherently less

00:05:39,890 --> 00:05:45,530
capacity than your previous VM or your

00:05:43,660 --> 00:05:48,650
piece of hardware that was running your

00:05:45,530 --> 00:05:50,360
application and that means you you need

00:05:48,650 --> 00:05:51,740
more of them you need at least two every

00:05:50,360 --> 00:05:53,720
time from just the highway bility

00:05:51,740 --> 00:05:54,919
purposes but for scale you probably need

00:05:53,720 --> 00:05:58,849
more to handle the traffic

00:05:54,919 --> 00:06:02,900
than you did before so what we're seeing

00:05:58,849 --> 00:06:04,460
is that load balancing has has moved

00:06:02,900 --> 00:06:06,259
away from the edge of the network it's

00:06:04,460 --> 00:06:09,710
no longer than control of the network

00:06:06,259 --> 00:06:11,479
team that run the edge the periphery of

00:06:09,710 --> 00:06:13,159
your data center or your cloud

00:06:11,479 --> 00:06:16,939
environment it's getting closer and

00:06:13,159 --> 00:06:18,800
closer to the application and that in

00:06:16,939 --> 00:06:21,050
terms of modern software architecture is

00:06:18,800 --> 00:06:25,039
changing who cares about load balancing

00:06:21,050 --> 00:06:26,629
who does so now it's who is here yeah

00:06:25,039 --> 00:06:28,370
so you see the Nova team right there

00:06:26,629 --> 00:06:29,449
they handle the network the yeah the

00:06:28,370 --> 00:06:31,759
firewall you have the load balancer this

00:06:29,449 --> 00:06:33,199
one fails we have this one yeah yeah and

00:06:31,759 --> 00:06:34,520
you talk to us and you tell us what

00:06:33,199 --> 00:06:36,949
applications you're deploying and we'll

00:06:34,520 --> 00:06:39,110
very kindly set up some rules for you

00:06:36,949 --> 00:06:39,800
and we'll send stuff down to your you're

00:06:39,110 --> 00:06:44,330
back in service

00:06:39,800 --> 00:06:45,229
so now deploying containers I care at a

00:06:44,330 --> 00:06:47,599
container

00:06:45,229 --> 00:06:50,449
cluster level whether it's kubernetes or

00:06:47,599 --> 00:06:53,330
docker swarm or whatever else I've now

00:06:50,449 --> 00:06:56,529
got a new entry point to my network into

00:06:53,330 --> 00:07:01,339
my container network so DevOps care and

00:06:56,529 --> 00:07:03,050
developers care and that means that you

00:07:01,339 --> 00:07:05,180
can't do a cloud migration without

00:07:03,050 --> 00:07:08,000
bringing up some load balancing with you

00:07:05,180 --> 00:07:11,629
can't do a micro-services containerized

00:07:08,000 --> 00:07:13,099
environment application without making

00:07:11,629 --> 00:07:15,379
conscious decisions about how you want

00:07:13,099 --> 00:07:17,750
your load balancer so the DevOps person

00:07:15,379 --> 00:07:20,389
is the a pops that basically the people

00:07:17,750 --> 00:07:22,159
that's delivering the apps yeah as well

00:07:20,389 --> 00:07:23,689
and they're going to need that they're

00:07:22,159 --> 00:07:26,870
delivering the apps and they've got a

00:07:23,689 --> 00:07:28,069
new responsibility in the world of micro

00:07:26,870 --> 00:07:30,020
services and continuous integration

00:07:28,069 --> 00:07:32,899
continuous deployment you're doing rapid

00:07:30,020 --> 00:07:36,229
changes to smaller units so you need to

00:07:32,899 --> 00:07:38,960
also have a way of managing how you do

00:07:36,229 --> 00:07:40,909
an upgrade because that's no longer you

00:07:38,960 --> 00:07:42,589
know once every quarter or scheduled a

00:07:40,909 --> 00:07:44,990
weekend and you go do that stuff that's

00:07:42,589 --> 00:07:46,789
now happening weekly daily sometimes a

00:07:44,990 --> 00:07:49,909
bit more frequently than that and so you

00:07:46,789 --> 00:07:51,229
can't have the process in place where

00:07:49,909 --> 00:07:51,830
you have to make a request for someone

00:07:51,229 --> 00:07:55,330
to change

00:07:51,830 --> 00:07:57,220
I now now need my API

00:07:55,330 --> 00:07:59,439
pricing API nannies points these other

00:07:57,220 --> 00:08:01,150
service and wait something to do it

00:07:59,439 --> 00:08:03,430
you are in control so the devops the app

00:08:01,150 --> 00:08:05,979
hops if you like these guys need to make

00:08:03,430 --> 00:08:08,830
those decisions themselves so decisions

00:08:05,979 --> 00:08:11,229
like the I see two main things going on

00:08:08,830 --> 00:08:13,240
with Lord but companies today there's

00:08:11,229 --> 00:08:16,030
the large companies that are in a state

00:08:13,240 --> 00:08:19,000
of transformation they're trying to get

00:08:16,030 --> 00:08:21,759
from old legacy to modern delivery

00:08:19,000 --> 00:08:25,090
continuous delivery agile type things

00:08:21,759 --> 00:08:26,800
and then we see the disruptors yeah that

00:08:25,090 --> 00:08:29,289
are trying to take over their industries

00:08:26,800 --> 00:08:32,589
and trying to erode business where they

00:08:29,289 --> 00:08:34,149
can do you have solutions for both of

00:08:32,589 --> 00:08:36,760
those camps for the the large

00:08:34,149 --> 00:08:39,729
transformers and then the smaller

00:08:36,760 --> 00:08:41,320
disruptors coming in we do and this is

00:08:39,729 --> 00:08:44,589
what I love that work services is that

00:08:41,320 --> 00:08:45,940
it's so democratic and it's many things

00:08:44,589 --> 00:08:49,480
different people but why I particularly

00:08:45,940 --> 00:08:51,670
like is we have I mean I we have we have

00:08:49,480 --> 00:08:53,620
customers who have you know the old

00:08:51,670 --> 00:08:56,950
legacy model if they're as he had much

00:08:53,620 --> 00:08:59,079
maligned but yeah I really and sometimes

00:08:56,950 --> 00:09:02,260
accurately and sometimes just yet some

00:08:59,079 --> 00:09:04,390
to poke a stick at and they are solving

00:09:02,260 --> 00:09:06,339
business problems by taking out by

00:09:04,390 --> 00:09:07,990
severing the the limb that doesn't work

00:09:06,339 --> 00:09:10,720
anymore the bit that doesn't scale

00:09:07,990 --> 00:09:13,060
generally is where the value is in

00:09:10,720 --> 00:09:15,370
different work services so I able to

00:09:13,060 --> 00:09:17,680
take that piece out build the problem

00:09:15,370 --> 00:09:19,570
part as a market service and then start

00:09:17,680 --> 00:09:22,120
experimenting and start understanding

00:09:19,570 --> 00:09:25,870
that the disruptor process is if you

00:09:22,120 --> 00:09:28,779
like is absolutely viable and valid

00:09:25,870 --> 00:09:30,899
approach to a rug services project and

00:09:28,779 --> 00:09:33,250
then we see the other side which is the

00:09:30,899 --> 00:09:34,750
the startup the people without any

00:09:33,250 --> 00:09:35,980
existing infrastructure existing

00:09:34,750 --> 00:09:37,420
software existing anything digital

00:09:35,980 --> 00:09:38,980
natives and they're still natives who

00:09:37,420 --> 00:09:41,589
get to build stuff from the ground up

00:09:38,980 --> 00:09:43,060
using the current best practice tools

00:09:41,589 --> 00:09:45,490
for building a high scale level of a

00:09:43,060 --> 00:09:48,370
higher scale from day one and they're

00:09:45,490 --> 00:09:50,199
taking the mark services architecture

00:09:48,370 --> 00:09:51,970
and the devil's practices that are

00:09:50,199 --> 00:09:53,829
around that for the continuous

00:09:51,970 --> 00:09:56,470
integration and deployment and greater

00:09:53,829 --> 00:09:58,480
testing and they're they're the poster

00:09:56,470 --> 00:10:00,790
children for this for this work they are

00:09:58,480 --> 00:10:02,949
making applications that people have

00:10:00,790 --> 00:10:04,690
heard of they're writing blogs they're

00:10:02,949 --> 00:10:05,320
pushing stuff out to open source they're

00:10:04,690 --> 00:10:09,250
there

00:10:05,320 --> 00:10:11,020
a big noise and being disruptive to an

00:10:09,250 --> 00:10:12,640
extent because people then want to go oh

00:10:11,020 --> 00:10:14,560
we used to do it that way and you do it

00:10:12,640 --> 00:10:16,300
this is the way to do it and the you

00:10:14,560 --> 00:10:18,250
know the best and brightest

00:10:16,300 --> 00:10:20,350
they have tech minds in the the

00:10:18,250 --> 00:10:22,330
enterprise IT won't you want to follow

00:10:20,350 --> 00:10:24,340
this this process to it clearly works

00:10:22,330 --> 00:10:26,200
they get it and they need to apply it to

00:10:24,340 --> 00:10:28,600
a business which has existing software

00:10:26,200 --> 00:10:30,520
which has to keep running and doesn't

00:10:28,600 --> 00:10:32,080
have the resources that they can just go

00:10:30,520 --> 00:10:33,790
spin up a whole new team and say well

00:10:32,080 --> 00:10:35,920
rewrite everything that we have now but

00:10:33,790 --> 00:10:37,030
in mobile services because you try and

00:10:35,920 --> 00:10:39,640
build a business case for that doesn't

00:10:37,030 --> 00:10:41,380
really work that's where there's a

00:10:39,640 --> 00:10:43,240
middle ground there's let's take what

00:10:41,380 --> 00:10:46,540
we've got let's find the best way that

00:10:43,240 --> 00:10:48,310
we can I've got two modern practices to

00:10:46,540 --> 00:10:51,160
remove pain that we have in these these

00:10:48,310 --> 00:10:54,130
applications and I think that's I think

00:10:51,160 --> 00:10:55,900
that's where actually disruption has a

00:10:54,130 --> 00:10:57,640
net positive effect on the business and

00:10:55,900 --> 00:10:59,950
the transformation absolutely yeah yeah

00:10:57,640 --> 00:11:02,050
so Liam if you and I sit down twelve

00:10:59,950 --> 00:11:03,820
months from now here in London again

00:11:02,050 --> 00:11:05,050
next year what would you like to say

00:11:03,820 --> 00:11:06,520
changes for nginx

00:11:05,050 --> 00:11:08,650
what are you guys going to do

00:11:06,520 --> 00:11:11,800
differently or better next year

00:11:08,650 --> 00:11:13,600
so we're spreading our wings we and our

00:11:11,800 --> 00:11:17,400
user conference in Portland Oregon last

00:11:13,600 --> 00:11:20,820
month we announced several new products

00:11:17,400 --> 00:11:23,830
from top to bottom of the stack so if I

00:11:20,820 --> 00:11:26,920
start at the top there's a new flagship

00:11:23,830 --> 00:11:28,570
product will be nginx controller and it

00:11:26,920 --> 00:11:31,240
will allow customers using our

00:11:28,570 --> 00:11:33,040
commercial offering range and x+ to

00:11:31,240 --> 00:11:35,890
manage multiple instances through a web

00:11:33,040 --> 00:11:37,810
UI in an API and to perform DevOps

00:11:35,890 --> 00:11:39,700
workflows so when you're doing canary

00:11:37,810 --> 00:11:42,280
testing no deployments through green

00:11:39,700 --> 00:11:45,070
deployments be able to stage those up in

00:11:42,280 --> 00:11:47,980
the UI press the button see them Swiss

00:11:45,070 --> 00:11:50,200
Opera and then manage and track the

00:11:47,980 --> 00:11:51,850
stats to show that nothing is going red

00:11:50,200 --> 00:11:53,920
and their stuffs going red let's go back

00:11:51,850 --> 00:11:56,430
stops going green and you can shut down

00:11:53,920 --> 00:11:59,380
the old ones and so that kind of

00:11:56,430 --> 00:12:01,990
archetypal DevOps workflow whose can

00:11:59,380 --> 00:12:03,580
we're building into a rich UI for

00:12:01,990 --> 00:12:05,080
enterprise customers and to make that

00:12:03,580 --> 00:12:07,480
transition and that's controls yeah

00:12:05,080 --> 00:12:08,800
that's called controller and if we flip

00:12:07,480 --> 00:12:11,250
to the bottom end of the stack we're

00:12:08,800 --> 00:12:15,779
also building an open-source app server

00:12:11,250 --> 00:12:17,399
so this is what lives inside for example

00:12:15,779 --> 00:12:19,110
your container but on its knots it's not

00:12:17,399 --> 00:12:22,410
necessarily a container that's running

00:12:19,110 --> 00:12:23,639
your application code so you have aims

00:12:22,410 --> 00:12:25,709
at the front end doing that reverse

00:12:23,639 --> 00:12:27,839
proxy load balancing job that we talked

00:12:25,709 --> 00:12:30,870
about but passing it to another

00:12:27,839 --> 00:12:33,750
lightweight high performance contain a

00:12:30,870 --> 00:12:37,439
friendly application server that needs

00:12:33,750 --> 00:12:40,790
nothing else than it and the code so it

00:12:37,439 --> 00:12:44,100
simplifies the application stack so that

00:12:40,790 --> 00:12:47,490
our application architecture that's for

00:12:44,100 --> 00:12:49,529
mark services finds the the way that you

00:12:47,490 --> 00:12:51,779
configure install and manage the

00:12:49,529 --> 00:12:55,439
traditional application servers I'm

00:12:51,779 --> 00:12:57,329
talking the PHP it would be FP n the

00:12:55,439 --> 00:13:02,100
Python it would be J unicorn and your

00:12:57,329 --> 00:13:05,850
whiskey from Ruby you've got unicorn and

00:13:02,100 --> 00:13:07,439
rat so we are building one application

00:13:05,850 --> 00:13:09,870
server to handle all of those languages

00:13:07,439 --> 00:13:12,420
with a single piece of software which

00:13:09,870 --> 00:13:14,579
means that either you can run multiple

00:13:12,420 --> 00:13:16,379
versions multiple applications in the

00:13:14,579 --> 00:13:19,379
same container but volume of one app

00:13:16,379 --> 00:13:20,550
server or for migration purposes run

00:13:19,379 --> 00:13:23,279
different versions of the same

00:13:20,550 --> 00:13:26,129
programming language again with a single

00:13:23,279 --> 00:13:30,209
app server so we're trying to take the

00:13:26,129 --> 00:13:33,720
problem of how you build applications on

00:13:30,209 --> 00:13:35,660
a modern app server and apply what we've

00:13:33,720 --> 00:13:38,490
learnt from running engine X at the

00:13:35,660 --> 00:13:39,569
hyperscale or you know many the busiest

00:13:38,490 --> 00:13:41,939
websites on the Internet

00:13:39,569 --> 00:13:43,139
and what they need at the bottom end of

00:13:41,939 --> 00:13:46,110
the stack for actually running the code

00:13:43,139 --> 00:13:48,600
so next year you're going to see a full

00:13:46,110 --> 00:13:50,430
stack a full stack maybe not full stack

00:13:48,600 --> 00:13:52,500
for everybody therefore people need

00:13:50,430 --> 00:13:56,579
different different parts but we will

00:13:52,500 --> 00:13:57,990
have a full stack story and and a whole

00:13:56,579 --> 00:13:59,210
range of analytics on monitoring in the

00:13:57,990 --> 00:14:01,280
middle through our amplifier

00:13:59,210 --> 00:14:02,720
as well but that's the thank I spin

00:14:01,280 --> 00:14:04,370
around for a while Liam we look forward

00:14:02,720 --> 00:14:06,760
to that conversation so do I thank you

00:14:04,370 --> 00:14:06,760
thank you

00:14:12,710 --> 00:14:14,770

YouTube URL: https://www.youtube.com/watch?v=OKGCOHtfbaw


