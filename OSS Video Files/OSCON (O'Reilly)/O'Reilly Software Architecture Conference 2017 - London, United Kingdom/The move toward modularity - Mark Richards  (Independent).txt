Title: The move toward modularity - Mark Richards  (Independent)
Publication date: 2017-10-16
Playlist: O'Reilly Software Architecture Conference 2017 - London, United Kingdom
Description: 
	Business, society, and technology are changing at an ever-increasing rate, and we technologists constantly create new programming languages, frameworks, platforms, and tools to help us keep up. However, in most cases it is not enough. We must also rethink how we approach the design and architecture of software for the future.

Architectural modularity will be a cornerstone of these software applications. Mark Richards explores the history of architectural modularity, discusses current architecture patterns that support modularity, and explains why architectural modularity is so important (and necessary).

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:03,710 --> 00:00:08,910
now taking these five drivers into

00:00:06,870 --> 00:00:11,040
account agility testability

00:00:08,910 --> 00:00:14,670
deployability scalability and then

00:00:11,040 --> 00:00:18,810
finally availability let's investigate a

00:00:14,670 --> 00:00:22,109
second question in this keynote how do

00:00:18,810 --> 00:00:24,630
we move from our monolithic and tiered

00:00:22,109 --> 00:00:26,939
layered architectures over to this level

00:00:24,630 --> 00:00:30,990
of modularity such as micro-services

00:00:26,939 --> 00:00:33,480
this move from monoliths to micro

00:00:30,990 --> 00:00:36,870
services breaking these apart is exactly

00:00:33,480 --> 00:00:39,270
like a steeplechase steeplechase azar

00:00:36,870 --> 00:00:41,700
really hard and really dangerous as a

00:00:39,270 --> 00:00:43,950
matter of fact if you've never ridden a

00:00:41,700 --> 00:00:46,860
horse before which I imagine most people

00:00:43,950 --> 00:00:51,480
in this audience haven't then you will

00:00:46,860 --> 00:00:55,020
constantly fall off that horse and this

00:00:51,480 --> 00:00:57,320
is pain this is the kind of pain most

00:00:55,020 --> 00:01:00,450
companies and most teams are currently

00:00:57,320 --> 00:01:04,259
experiencing moving to micro services it

00:01:00,450 --> 00:01:06,540
is hard it is a steeplechase and you

00:01:04,259 --> 00:01:10,100
will fall off that horse and you will

00:01:06,540 --> 00:01:13,080
get hurt you know doesn't it make sense

00:01:10,100 --> 00:01:15,120
when we move from monolithic and tiered

00:01:13,080 --> 00:01:17,300
layered architectures over to a level of

00:01:15,120 --> 00:01:21,150
micro services this level of modularity

00:01:17,300 --> 00:01:24,690
doesn't it make sense to learn how to

00:01:21,150 --> 00:01:27,810
ride a horse first and once we've

00:01:24,690 --> 00:01:31,590
learned how to ride a horse then we

00:01:27,810 --> 00:01:33,180
learn how to ride a horse fast and once

00:01:31,590 --> 00:01:36,720
we've learned how to ride a horse fast

00:01:33,180 --> 00:01:40,650
then and only then do we tackle these

00:01:36,720 --> 00:01:44,580
steeple chases exactly this makes

00:01:40,650 --> 00:01:47,310
perfect sense so let's see how to apply

00:01:44,580 --> 00:01:50,610
this concept of learning how to ride a

00:01:47,310 --> 00:01:52,290
horse first with architecture what does

00:01:50,610 --> 00:01:54,030
that mean learning how to ride a horse

00:01:52,290 --> 00:01:56,490
before we end up doing a steeplechase

00:01:54,030 --> 00:01:58,140
what it means is taking our monolithic

00:01:56,490 --> 00:02:01,020
and tiered layered architectures and

00:01:58,140 --> 00:02:02,820
start to break those apart but not to

00:02:01,020 --> 00:02:05,220
the level of microservices first that's

00:02:02,820 --> 00:02:06,720
a steeplechase let's learn how to ride a

00:02:05,220 --> 00:02:09,780
horse by moving to something like

00:02:06,720 --> 00:02:11,939
service based architecture first in this

00:02:09,780 --> 00:02:13,650
architecture style you can see that

00:02:11,939 --> 00:02:15,329
we're still splitting apart the

00:02:13,650 --> 00:02:16,740
functionality but instead of having

00:02:15,329 --> 00:02:19,080
hundreds or

00:02:16,740 --> 00:02:20,610
thousands of services separately

00:02:19,080 --> 00:02:22,950
deployed units of software in our

00:02:20,610 --> 00:02:25,530
ecosystem no we only have anywhere from

00:02:22,950 --> 00:02:28,170
six to twelve all talking to the same

00:02:25,530 --> 00:02:30,000
database we don't need to distribute the

00:02:28,170 --> 00:02:31,980
database as a matter of fact we don't

00:02:30,000 --> 00:02:33,840
even need to tackle splitting up the

00:02:31,980 --> 00:02:36,860
user interface at this point either

00:02:33,840 --> 00:02:39,390
we've achieved a level of modularity

00:02:36,860 --> 00:02:42,720
therefore increasing all those drivers

00:02:39,390 --> 00:02:45,450
that we saw but learning how to ride a

00:02:42,720 --> 00:02:48,720
horse there are two advantages of this

00:02:45,450 --> 00:02:52,010
kind of architecture style first this

00:02:48,720 --> 00:02:54,780
architecture does not require DevOps

00:02:52,010 --> 00:02:57,600
kind of the operational automation

00:02:54,780 --> 00:02:59,210
required by micro services as a matter

00:02:57,600 --> 00:03:02,490
of fact it doesn't even require

00:02:59,210 --> 00:03:04,680
organizational change now this kind of

00:03:02,490 --> 00:03:07,490
architecture is deployed in the same

00:03:04,680 --> 00:03:10,650
crappy deployment pipeline you have now

00:03:07,490 --> 00:03:12,300
nothing changes in your ecosystem that

00:03:10,650 --> 00:03:15,960
is learning how to ride a horse but

00:03:12,300 --> 00:03:18,300
here's the secret sauce the secret sauce

00:03:15,960 --> 00:03:20,490
is now we can start to evolve our

00:03:18,300 --> 00:03:23,220
ecosystem we can start to play around

00:03:20,490 --> 00:03:26,460
with things like doctor or kubernetes or

00:03:23,220 --> 00:03:28,740
spring boot or ansible and if they don't

00:03:26,460 --> 00:03:30,480
work we simply pull them back out of

00:03:28,740 --> 00:03:33,600
that ecosystem and try something else

00:03:30,480 --> 00:03:37,940
it's not required but it certainly helps

00:03:33,600 --> 00:03:37,940

YouTube URL: https://www.youtube.com/watch?v=YwyKuHtrw8I


