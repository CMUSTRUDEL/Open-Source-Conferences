Title: Are microservices a security threat? - Liz Rice (Aqua Security)
Publication date: 2018-10-29
Playlist: O'Reilly Software Architecture Conference 2018 - London, United Kingdom
Description: 
	Microservices, containers, and serverless are all the rage, especially for greenfield developments. But in these environments, you donâ€™t really know which machine is running what code, so surely these trends must have security implications? Liz Rice addresses the questions you need answers to: Will your deployments be less secure or more? How do DevOps processes like CI/CD and cluster orchestration affect your security profile? And what can we all do to minimize the risk of exploits?

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,230 --> 00:00:04,700
so let's see how automation can help

00:00:02,390 --> 00:00:06,979
with the process of security patching

00:00:04,700 --> 00:00:10,280
we'll start by looking at the

00:00:06,979 --> 00:00:13,790
traditional approach where a security

00:00:10,280 --> 00:00:17,300
advisory gets published to say package

00:00:13,790 --> 00:00:21,590
such-and-such has this vulnerability in

00:00:17,300 --> 00:00:23,900
version so-and-so and the team will go

00:00:21,590 --> 00:00:26,540
through a process of identifying the

00:00:23,900 --> 00:00:28,670
affected servers and then manually

00:00:26,540 --> 00:00:32,509
applying a patch to each of the servers

00:00:28,670 --> 00:00:35,690
that that's affected so if we have

00:00:32,509 --> 00:00:38,630
thousands of containers how on earth can

00:00:35,690 --> 00:00:41,060
the same team be expected to patch those

00:00:38,630 --> 00:00:43,579
containers we've got two orders of

00:00:41,060 --> 00:00:46,840
magnitude more instances potentially of

00:00:43,579 --> 00:00:52,010
that vulnerability running in a system

00:00:46,840 --> 00:00:54,230
the answer is you simply don't you don't

00:00:52,010 --> 00:00:56,720
patch running containers

00:00:54,230 --> 00:01:01,280
it's an anti-pattern to change the code

00:00:56,720 --> 00:01:03,500
in a running container instead we need

00:01:01,280 --> 00:01:06,920
to rebuild the affected container images

00:01:03,500 --> 00:01:09,079
and have the orchestrator replaced the

00:01:06,920 --> 00:01:13,039
running containers with the updated

00:01:09,079 --> 00:01:15,289
container image version so the process

00:01:13,039 --> 00:01:18,170
looks more like this we're going to have

00:01:15,289 --> 00:01:21,170
some kind of container image scanning

00:01:18,170 --> 00:01:24,079
tool that identifies which images are

00:01:21,170 --> 00:01:26,749
affected by vulnerabilities and if we

00:01:24,079 --> 00:01:29,689
find problematic images with

00:01:26,749 --> 00:01:32,539
vulnerabilities they need to be rebuilt

00:01:29,689 --> 00:01:34,939
with the patch applied and then the

00:01:32,539 --> 00:01:36,590
orchestrator can replace the running

00:01:34,939 --> 00:01:40,039
containers with the rebuilt version

00:01:36,590 --> 00:01:41,719
automatically I mentioned image scanning

00:01:40,039 --> 00:01:43,429
there are lots of different image

00:01:41,719 --> 00:01:45,799
scanners available some of them are

00:01:43,429 --> 00:01:47,779
commercial aqua has a commercial version

00:01:45,799 --> 00:01:50,119
but we also have a free version and

00:01:47,779 --> 00:01:52,549
there are also open source tools like

00:01:50,119 --> 00:01:54,799
Clare and Angkor available so there's no

00:01:52,549 --> 00:01:58,759
excuse for not scanning your container

00:01:54,799 --> 00:02:01,520
images for vulnerabilities we can also

00:01:58,759 --> 00:02:05,060
incorporate that image scanning into our

00:02:01,520 --> 00:02:07,340
regular CI CD pipeline so that scanning

00:02:05,060 --> 00:02:11,060
happens automatically whenever you build

00:02:07,340 --> 00:02:12,860
an image can also introduce

00:02:11,060 --> 00:02:15,620
admission control at the point of

00:02:12,860 --> 00:02:18,739
deployment so that we can check whether

00:02:15,620 --> 00:02:20,500
images meet certain policies those

00:02:18,739 --> 00:02:23,270
policies can vary a lot from

00:02:20,500 --> 00:02:25,489
organization to organization but you

00:02:23,270 --> 00:02:28,280
might at least check that the image has

00:02:25,489 --> 00:02:32,030
been scanned and that the scan results

00:02:28,280 --> 00:02:37,330
didn't on earth some very serious

00:02:32,030 --> 00:02:39,790
vulnerabilities so by using automation

00:02:37,330 --> 00:02:42,620
even though we may have a lot more

00:02:39,790 --> 00:02:44,330
dependencies to manage the automated

00:02:42,620 --> 00:02:47,660
process helps us get those patches

00:02:44,330 --> 00:02:50,500
applied arguably more quickly than in a

00:02:47,660 --> 00:02:50,500

YouTube URL: https://www.youtube.com/watch?v=SOgOcazrFlg


