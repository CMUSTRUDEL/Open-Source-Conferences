Title: Potholes in the road from monolithic hell - Chris Richardson (Eventuate)
Publication date: 2018-10-29
Playlist: O'Reilly Software Architecture Conference 2018 - London, United Kingdom
Description: 
	Potholes in the road from monolithic hell: Microservices adoption anti-patterns

A typical mission-critical enterprise application is a large, complex monolith developed by large team. The velocity of software delivery is usually slow, and the team struggles to keep up with the demands of the business. Consequently, many enterprise applications are good candidates to be migrated to the microservice architecture. As you might expect, migrating to microservices requires an enterprise to tackle numerous technology-related challenges. But enterprises often encounter obstacles that have less to do with technology and more to do with strategy, process, and organization.

Chris Richarson details several anti-patterns of microservices adoption that he’s observed while working with clients around the world. You’ll learn the challenges that enterprises often face and how to overcome them as well as how to avoid the potholes when escaping monolithic hell.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,120 --> 00:00:05,900
so the first anti-pattern I want to talk

00:00:02,790 --> 00:00:08,760
about is the magic pixie dust

00:00:05,900 --> 00:00:12,330
anti-pattern and that occurs when an

00:00:08,760 --> 00:00:15,150
organization believes that microservices

00:00:12,330 --> 00:00:16,890
of this panacea just a little sprinkle

00:00:15,150 --> 00:00:20,480
of micro-services and all of your

00:00:16,890 --> 00:00:23,220
development problems will be fixed

00:00:20,480 --> 00:00:27,180
perhaps they they read an article I

00:00:23,220 --> 00:00:29,039
wrote at one point I'm not sure and on

00:00:27,180 --> 00:00:31,140
the one hand if you've written you know

00:00:29,039 --> 00:00:34,079
if your application has actually

00:00:31,140 --> 00:00:36,540
outgrown its monolithic architecture and

00:00:34,079 --> 00:00:38,340
it's in it is bloated and it is heavy

00:00:36,540 --> 00:00:40,890
weight then refactoring to a

00:00:38,340 --> 00:00:41,489
micro-service architecture makes a lot

00:00:40,890 --> 00:00:43,920
of sense

00:00:41,489 --> 00:00:46,290
and that's because micro services give

00:00:43,920 --> 00:00:48,540
you the testability and deploy ability

00:00:46,290 --> 00:00:50,070
that you need in order to do DevOps

00:00:48,540 --> 00:00:52,950
which is sort of a superset of

00:00:50,070 --> 00:00:55,320
continuous delivery and continuous

00:00:52,950 --> 00:00:58,469
deployment and it also enables

00:00:55,320 --> 00:01:01,110
autonomous to enables you to restructure

00:00:58,469 --> 00:01:04,019
your engineering organization as a set

00:01:01,110 --> 00:01:06,450
of small autonomous you know so-called

00:01:04,019 --> 00:01:08,490
to Pizza teams the idea is you have a

00:01:06,450 --> 00:01:10,859
loosely coupled architecture with with

00:01:08,490 --> 00:01:13,380
loosely coupled teams and this really is

00:01:10,859 --> 00:01:15,359
like the primary benefit of using micro

00:01:13,380 --> 00:01:17,609
services the problem you have is

00:01:15,359 --> 00:01:19,799
organizations usually have a whole lot

00:01:17,609 --> 00:01:22,920
of other problems you know their actual

00:01:19,799 --> 00:01:26,549
sort of deployment pipeline is typically

00:01:22,920 --> 00:01:28,380
slow it's often siloed with developers

00:01:26,549 --> 00:01:30,810
having the throw the code over the wall

00:01:28,380 --> 00:01:32,939
to QA who will then test it manually

00:01:30,810 --> 00:01:35,490
he will then give it to ops you will

00:01:32,939 --> 00:01:37,740
manually deploy it the applications

00:01:35,490 --> 00:01:40,520
themselves are big balls of mud often

00:01:37,740 --> 00:01:42,959
usually the code is quite smelly

00:01:40,520 --> 00:01:45,329
you know I've said to clients no you

00:01:42,959 --> 00:01:52,219
cannot have methods that are 700 lines

00:01:45,329 --> 00:01:54,689
long names change to make them anonymous

00:01:52,219 --> 00:01:56,999
and in some cases you know there's

00:01:54,689 --> 00:01:59,579
duplicate code bases right so you've got

00:01:56,999 --> 00:02:00,989
five copies of the same application and

00:01:59,579 --> 00:02:03,270
the codes just slightly divergent

00:02:00,989 --> 00:02:05,909
because at the time it just seemed like

00:02:03,270 --> 00:02:08,129
a good idea and the problem you have is

00:02:05,909 --> 00:02:09,810
if you adopt micro services with those

00:02:08,129 --> 00:02:12,299
problems you're likely to be

00:02:09,810 --> 00:02:13,370
disappointed you know it's not going to

00:02:12,299 --> 00:02:15,500
address those Pro

00:02:13,370 --> 00:02:19,580
and it could very well make them worse

00:02:15,500 --> 00:02:21,410
right so you know so it's just sort of

00:02:19,580 --> 00:02:24,080
this problem you you know in order went

00:02:21,410 --> 00:02:26,300
when you know you have software delivery

00:02:24,080 --> 00:02:29,150
problems you really want to take a

00:02:26,300 --> 00:02:31,730
critical look at why you're having it

00:02:29,150 --> 00:02:34,099
having issues and you know if you've got

00:02:31,730 --> 00:02:36,799
manual processes you need to automate

00:02:34,099 --> 00:02:39,319
you need to embrace DevOps if your code

00:02:36,799 --> 00:02:41,390
smells you need to teach the developers

00:02:39,319 --> 00:02:43,700
how to write clean code and enforce it

00:02:41,390 --> 00:02:45,680
with with static code analyzers in the

00:02:43,700 --> 00:02:47,720
deployment pipeline if you've got

00:02:45,680 --> 00:02:49,489
duplicate code bases then you need to

00:02:47,720 --> 00:02:51,709
combine them and design the appropriate

00:02:49,489 --> 00:02:54,049
extension points and then if your

00:02:51,709 --> 00:02:55,660
applications are big balls of mud and

00:02:54,049 --> 00:02:58,340
sure then they need to be react

00:02:55,660 --> 00:03:00,530
architected possibly to the micro

00:02:58,340 --> 00:03:02,390
service architecture so there's a whole

00:03:00,530 --> 00:03:05,269
host of solutions that you have to

00:03:02,390 --> 00:03:08,269
employ and micro services just solve

00:03:05,269 --> 00:03:10,720
very specific problems they're not a

00:03:08,269 --> 00:03:10,720

YouTube URL: https://www.youtube.com/watch?v=RFiOjywaELg


