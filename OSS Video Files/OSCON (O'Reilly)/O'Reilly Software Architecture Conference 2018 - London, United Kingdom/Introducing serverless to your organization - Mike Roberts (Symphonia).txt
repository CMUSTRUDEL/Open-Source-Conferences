Title: Introducing serverless to your organization - Mike Roberts (Symphonia)
Publication date: 2018-10-30
Playlist: O'Reilly Software Architecture Conference 2018 - London, United Kingdom
Description: 
	Serverless computing is a recent trend within cloud computing that embraces the use of fully managed vendor servicesâ€”products such as ephemeral functions-as-a-service platforms and externalized application components such as databases, user management, and artificial intelligence. While the primary benefit of serverless is a further progression of the cloud in general (i.e., cheaper operations and reduced time-to-market), it requires a different architectural and operational mindset from many other software design models. At the same time, the patterns and tools around serverless are still not fully mature. Because of these concerns, and others, many organizations are reticent to embrace serverless, preferring to wait for current adopters to tease out better practices and understanding.

But for those willing to embrace their adventurous side, what are good ways to start embracing these technologies? And how can the benefits of serverless be embraced safely? And most importantly, what are experiments that a company can perform that provide intrinsic value yet also provide a chance to learn?

A consultant specializing in serverless computing, Mike Roberts has come to know and work with many teams who have gone through this experience. Join Mike to explore a catalogue of ideas for trying serverless as well as a framework for evaluating their effectiveness within your organization.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,320 --> 00:00:05,870
how do we start our service journey

00:00:03,820 --> 00:00:08,090
first thing I mentioned is service is

00:00:05,870 --> 00:00:09,950
not an easy ride this is a new way of

00:00:08,090 --> 00:00:11,690
building software the constraints that

00:00:09,950 --> 00:00:13,730
we are used to the limitations that we

00:00:11,690 --> 00:00:15,769
are used to are different with service

00:00:13,730 --> 00:00:17,960
some of those go away some of them are

00:00:15,769 --> 00:00:19,279
brand-new and are not obvious and so

00:00:17,960 --> 00:00:21,619
there are gotchas that you're going to

00:00:19,279 --> 00:00:22,849
come across as you start using service

00:00:21,619 --> 00:00:25,789
and some of those have been documented

00:00:22,849 --> 00:00:27,919
now services 3-4 years old especially in

00:00:25,789 --> 00:00:29,390
the functions as a service part and

00:00:27,919 --> 00:00:31,009
we're starting to see that documented

00:00:29,390 --> 00:00:32,390
but there's no like one book that I can

00:00:31,009 --> 00:00:34,010
point you out and say go read this

00:00:32,390 --> 00:00:37,100
before you do anything so you've got to

00:00:34,010 --> 00:00:39,469
be aware of some of these concerns as

00:00:37,100 --> 00:00:41,030
you start using service the other thing

00:00:39,469 --> 00:00:42,829
to think about is that this is an

00:00:41,030 --> 00:00:44,870
iterative approach there's not probably

00:00:42,829 --> 00:00:46,579
not going to be just one experiment that

00:00:44,870 --> 00:00:48,020
you do to see whether you like service

00:00:46,579 --> 00:00:50,149
or not and if it fails and you're not

00:00:48,020 --> 00:00:52,219
never going to touch it again the great

00:00:50,149 --> 00:00:54,350
thing about service is you can try

00:00:52,219 --> 00:00:56,059
things out very quickly and very cheaply

00:00:54,350 --> 00:00:58,940
and that means that we can iterate and

00:00:56,059 --> 00:01:01,160
so what is this iteration structure well

00:00:58,940 --> 00:01:02,840
first of all you need to pick a project

00:01:01,160 --> 00:01:06,500
what is something you want to try

00:01:02,840 --> 00:01:10,189
solving with service and once you pick

00:01:06,500 --> 00:01:11,390
that project you can then prepare learn

00:01:10,189 --> 00:01:13,040
what it is that you're going to do to

00:01:11,390 --> 00:01:14,570
solve that you can actually build that

00:01:13,040 --> 00:01:16,850
thing and then finally and very

00:01:14,570 --> 00:01:18,619
importantly evaluate it how did that

00:01:16,850 --> 00:01:21,890
work did it do what you expected it to

00:01:18,619 --> 00:01:24,409
do and then finally repeat go back to

00:01:21,890 --> 00:01:26,240
the beginning and pick a new project and

00:01:24,409 --> 00:01:28,460
that's really what I want to focus on in

00:01:26,240 --> 00:01:30,439
the remainder of this talk how do we

00:01:28,460 --> 00:01:34,540
pick a project that is going to help us

00:01:30,439 --> 00:01:34,540
introduce service to our organization so

00:01:35,200 --> 00:01:40,340
as you're picking a project you need to

00:01:38,060 --> 00:01:43,670
think about sort of three competing

00:01:40,340 --> 00:01:45,439
goals or competing actions here the

00:01:43,670 --> 00:01:47,899
first one is that you want to gain

00:01:45,439 --> 00:01:51,250
benefits you actually get some value

00:01:47,899 --> 00:01:53,659
from service this is not an ivory tower

00:01:51,250 --> 00:01:55,579
resume driven development idea this is

00:01:53,659 --> 00:01:56,960
something that we want to do to try and

00:01:55,579 --> 00:01:58,670
help our companies and so actually

00:01:56,960 --> 00:02:01,610
picking a project that is going to move

00:01:58,670 --> 00:02:04,340
our company forward is important but

00:02:01,610 --> 00:02:06,200
also important is learning and there are

00:02:04,340 --> 00:02:08,690
lot there's a lot to learn here first of

00:02:06,200 --> 00:02:10,310
all what is service in our company what

00:02:08,690 --> 00:02:11,000
are all these different services that we

00:02:10,310 --> 00:02:14,090
can use

00:02:11,000 --> 00:02:17,720
how do those services interact with the

00:02:14,090 --> 00:02:19,489
applications that we've built what what

00:02:17,720 --> 00:02:20,720
do our teams like about it maybe they

00:02:19,489 --> 00:02:22,819
don't want to use service right now

00:02:20,720 --> 00:02:26,090
maybe they're super happy using a

00:02:22,819 --> 00:02:28,760
container based approach and finally

00:02:26,090 --> 00:02:30,650
there's safety and there's a number of

00:02:28,760 --> 00:02:31,910
aspects here to safety but the one I'm

00:02:30,650 --> 00:02:33,650
concerned about here when people

00:02:31,910 --> 00:02:37,220
starting to use service is how do we

00:02:33,650 --> 00:02:40,940
maintain integrity of our production

00:02:37,220 --> 00:02:43,010
systems so as you're picking a project

00:02:40,940 --> 00:02:45,560
you need to decide are you gonna dip

00:02:43,010 --> 00:02:47,569
your toe in the water or are you gonna

00:02:45,560 --> 00:02:50,930
dive down the rabbit hole in and go

00:02:47,569 --> 00:02:52,069
swimming in the servlets ocean and the

00:02:50,930 --> 00:02:53,360
good news is because this is an

00:02:52,069 --> 00:02:56,890
iterative approach you can make this

00:02:53,360 --> 00:02:56,890

YouTube URL: https://www.youtube.com/watch?v=TleCq9QGRkc


