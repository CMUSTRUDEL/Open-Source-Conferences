Title: Cultivate your personal design heuristics Rebecca Wirfs-Brock (Wirfs-Brock Associates)
Publication date: 2019-06-13
Playlist: The O'Reilly Software Architecture Conference 2019 - San Jose, CA
Description: 
	The ouroboros is a mythical serpent shaped into a circle, clinging to and devouring its tail in an endless cycle of self-destruction, self-creation, and self-renewal. Becoming a good designer of software sometimes feels like that. Cultivating and refining personal design heuristics is one way we become better software designers. Whether we’re aware of it or not, we each use heuristics that we have acquired through reading, practice, and experience.

Rebecca Wirfs-Brock explores how you can grow as a designer by becoming conscious of your heuristics. What are your go-to heuristics? How well have they worked? Do your successes or failures lead you look to discover new heuristics? While you may read others’ design advice—be it patterns or stack overflow replies, the heuristics you personally discover on your own design journey are likely to be the most important.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,869 --> 00:00:05,520
let's explore heuristics for a design

00:00:03,669 --> 00:00:08,400
problem some of you may be currently

00:00:05,520 --> 00:00:11,440
wrestling with what's the appropriate

00:00:08,400 --> 00:00:11,889
granularity for a micro service all

00:00:11,440 --> 00:00:14,650
right

00:00:11,889 --> 00:00:17,890
simple question should have some

00:00:14,650 --> 00:00:22,210
heuristics for that so Sam Newman who

00:00:17,890 --> 00:00:25,000
wrote building micro services in my

00:00:22,210 --> 00:00:27,699
opinion in Eggman and think perfectly

00:00:25,000 --> 00:00:29,710
says there should be small enough and no

00:00:27,699 --> 00:00:31,900
smaller okay hmm

00:00:29,710 --> 00:00:35,980
to me that's not a heuristic because I

00:00:31,900 --> 00:00:38,770
cannot take action with that all right

00:00:35,980 --> 00:00:42,190
on the other hand he said a lot of good

00:00:38,770 --> 00:00:49,090
things in his book is a good but Ben

00:00:42,190 --> 00:00:51,820
Morris talks about the boundaries for

00:00:49,090 --> 00:00:55,390
the size an upper bound should be a

00:00:51,820 --> 00:00:58,300
bounded context but no smaller than an

00:00:55,390 --> 00:01:00,880
aggregate so if you know domain-driven

00:00:58,300 --> 00:01:04,410
design concepts these this will have

00:01:00,880 --> 00:01:07,720
meaning to you about how to have a start

00:01:04,410 --> 00:01:11,530
another person steven toe cuffs says

00:01:07,720 --> 00:01:13,000
well instead of talking about the size

00:01:11,530 --> 00:01:15,120
i'm going to talk about the number of

00:01:13,000 --> 00:01:18,160
him i'm gonna end up with maybe a dozen

00:01:15,120 --> 00:01:19,650
twenty or thirty but more importantly he

00:01:18,160 --> 00:01:22,390
says i think that for any given

00:01:19,650 --> 00:01:25,030
interaction i should touch a limited

00:01:22,390 --> 00:01:28,030
number of those and and finally just to

00:01:25,030 --> 00:01:30,940
show you that experts don't agree judy

00:01:28,030 --> 00:01:33,700
DeHaan says well there should be the

00:01:30,940 --> 00:01:36,340
reason for structuring things around and

00:01:33,700 --> 00:01:40,690
forming a micro service should be that

00:01:36,340 --> 00:01:44,250
the data is when the data changes it it

00:01:40,690 --> 00:01:49,300
doesn't it only impacts a single service

00:01:44,250 --> 00:01:53,140
so he tends to see pretty big services

00:01:49,300 --> 00:01:57,299
the way he structures things so all

00:01:53,140 --> 00:01:59,620
right so at this point if you're new to

00:01:57,299 --> 00:02:00,940
micro services or even if you're

00:01:59,620 --> 00:02:03,640
experienced you might feel a bit

00:02:00,940 --> 00:02:06,250
confused okay if you know domain-driven

00:02:03,640 --> 00:02:09,069
design concepts you might suspect that

00:02:06,250 --> 00:02:10,929
at first cut identifying a bounded

00:02:09,069 --> 00:02:13,209
context and there are talks here about

00:02:10,929 --> 00:02:13,569
how do i identify the bounds of a

00:02:13,209 --> 00:02:16,030
bounded

00:02:13,569 --> 00:02:17,469
context but then over time maybe you're

00:02:16,030 --> 00:02:19,420
gonna split it up into smaller

00:02:17,469 --> 00:02:22,329
functionality and if you followed Nate

00:02:19,420 --> 00:02:24,219
shootas heuristics he gave some several

00:02:22,329 --> 00:02:26,560
heuristics for how you do how you might

00:02:24,219 --> 00:02:31,230
do that based on behavioral complexity

00:02:26,560 --> 00:02:36,459
or rates of change so the point is

00:02:31,230 --> 00:02:38,769
experts I guess will disagree heuristics

00:02:36,459 --> 00:02:43,719
are often in conflict with each other

00:02:38,769 --> 00:02:46,599
but that's okay competing heuristics

00:02:43,719 --> 00:02:49,150
give us options there's more than one

00:02:46,599 --> 00:02:51,609
way to architect a system and each of

00:02:49,150 --> 00:02:53,439
those heuristics makes sense under

00:02:51,609 --> 00:02:56,109
certain circumstances and if you don't

00:02:53,439 --> 00:02:59,049
have the same conditions the specific

00:02:56,109 --> 00:03:02,169
advice that some expert gives you might

00:02:59,049 --> 00:03:05,769
not be useful so what do you do choose

00:03:02,169 --> 00:03:08,260
the heuristic you choose from the best

00:03:05,769 --> 00:03:11,139
option at the time you are required to

00:03:08,260 --> 00:03:13,359
choose all right it's your judgment call

00:03:11,139 --> 00:03:15,400
and your judgment is based on your

00:03:13,359 --> 00:03:17,909
context your preference and your

00:03:15,400 --> 00:03:17,909

YouTube URL: https://www.youtube.com/watch?v=NNJd_RHgyUw


