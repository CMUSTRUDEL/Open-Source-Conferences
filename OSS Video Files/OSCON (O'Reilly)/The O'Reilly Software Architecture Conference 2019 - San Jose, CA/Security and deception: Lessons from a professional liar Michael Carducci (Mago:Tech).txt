Title: Security and deception: Lessons from a professional liar Michael Carducci (Mago:Tech)
Publication date: 2019-06-13
Playlist: The O'Reilly Software Architecture Conference 2019 - San Jose, CA
Description: 
	If it seems like humans are easy to deceive, it’s because we are. The myriad traits that make humankind so eminently exploitable are practically baked into our DNA. Too often these same traits make it into the software we build. Michael Carducci takes an entertaining look at why humans are so easy to fool and goes on to explore what we can do to overcome our weaknesses and build more secure software.

Security is everyone’s responsibility, but the burden disproportionately falls on the software developers and architects. As software engineers, you’re the last line of defense in your organization. You build the technology, and that technology is constantly scanned, probed, and tested. Building truly secure software requires going beyond mere functional requirements; it requires a complete shift in how you think about problems.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:03,320 --> 00:00:08,430
we can't even trust our senses so how do

00:00:06,779 --> 00:00:10,830
we build more secure systems how do we

00:00:08,430 --> 00:00:13,200
overcome this well step one is to care

00:00:10,830 --> 00:00:15,090
we actually have to care about security

00:00:13,200 --> 00:00:17,100
we have to care the security is every

00:00:15,090 --> 00:00:18,750
bit as important and necessary as any

00:00:17,100 --> 00:00:20,670
other metric or ility we're going to

00:00:18,750 --> 00:00:21,210
talk about deployability scalability

00:00:20,670 --> 00:00:23,369
etcetera

00:00:21,210 --> 00:00:24,990
in fact you said curiosity how many

00:00:23,369 --> 00:00:26,460
people already have security as a core

00:00:24,990 --> 00:00:27,600
part of their job like this is something

00:00:26,460 --> 00:00:29,910
you have to think about pretty much

00:00:27,600 --> 00:00:32,910
every day just show hands okay we've got

00:00:29,910 --> 00:00:34,280
some hands going up that's a trick

00:00:32,910 --> 00:00:39,270
question

00:00:34,280 --> 00:00:41,970
literally everybody's job we are all

00:00:39,270 --> 00:00:43,230
responsible we have to understand that

00:00:41,970 --> 00:00:45,600
we have to under and we have to care

00:00:43,230 --> 00:00:47,700
step 2 is we have to stop misdirecting

00:00:45,600 --> 00:00:49,800
ourselves what do I mean by that if

00:00:47,700 --> 00:00:52,590
we're focusing too much here we're

00:00:49,800 --> 00:00:54,420
missing everything over there the the

00:00:52,590 --> 00:00:56,550
flock can be inches away from our eyes

00:00:54,420 --> 00:00:58,850
but if we're so focused here we're gonna

00:00:56,550 --> 00:01:02,489
miss it let me give an example this code

00:00:58,850 --> 00:01:04,710
totally works it does exactly what it's

00:01:02,489 --> 00:01:06,830
supposed to do now I'm sure everybody in

00:01:04,710 --> 00:01:09,930
this room knows what's wrong with this

00:01:06,830 --> 00:01:11,760
there's a big flaw because not only does

00:01:09,930 --> 00:01:14,100
it do exactly what it's supposed to do

00:01:11,760 --> 00:01:17,810
it does a lot of things that it's not

00:01:14,100 --> 00:01:22,080
supposed to do and that's pretty serious

00:01:17,810 --> 00:01:24,299
what happens is we get so focused on the

00:01:22,080 --> 00:01:26,430
architecture or the functional

00:01:24,299 --> 00:01:28,979
requirements that we don't think about

00:01:26,430 --> 00:01:31,409
the security requirements and we have to

00:01:28,979 --> 00:01:32,820
make a conscious decision to do that to

00:01:31,409 --> 00:01:34,770
think about the security requirements to

00:01:32,820 --> 00:01:38,909
define them in other words we need to

00:01:34,770 --> 00:01:43,009
define both the use cases and the abuse

00:01:38,909 --> 00:01:46,439
cases step three is to keep learning I

00:01:43,009 --> 00:01:48,090
respect and admire every single person

00:01:46,439 --> 00:01:50,490
in this room and at every single

00:01:48,090 --> 00:01:51,900
conference that I speak at because

00:01:50,490 --> 00:01:54,900
you're taking time out of your schedule

00:01:51,900 --> 00:01:56,850
you're traveling to learn to push

00:01:54,900 --> 00:01:58,979
yourself to grow and this is an

00:01:56,850 --> 00:02:01,229
important thing but beyond the sessions

00:01:58,979 --> 00:02:04,079
this week there's so many resources

00:02:01,229 --> 00:02:05,880
oo-aah sorg is a fabulous resource and I

00:02:04,079 --> 00:02:08,700
hope everybody here is heard of that red

00:02:05,880 --> 00:02:10,530
team exercises are phenomenal you put on

00:02:08,700 --> 00:02:14,159
the black hat you actively try to

00:02:10,530 --> 00:02:15,629
penetrate your system try to think about

00:02:14,159 --> 00:02:17,069
things from a perspective that you never

00:02:15,629 --> 00:02:21,209
typically think of them as

00:02:17,069 --> 00:02:25,650
and one more recommendation is to

00:02:21,209 --> 00:02:27,090
balance usability and security right

00:02:25,650 --> 00:02:29,579
this is something that's been pounded

00:02:27,090 --> 00:02:34,200
into our heads over and over these years

00:02:29,579 --> 00:02:39,269
user experience user of usability better

00:02:34,200 --> 00:02:42,329
UX cleaner UI a good user experience if

00:02:39,269 --> 00:02:44,099
the user does something wrong you tell

00:02:42,329 --> 00:02:45,750
them and then you tell them you tell

00:02:44,099 --> 00:02:47,750
them exactly what they did wrong and you

00:02:45,750 --> 00:02:50,459
tell them exactly how to fix it

00:02:47,750 --> 00:02:52,049
they type in the wrong password maybe

00:02:50,459 --> 00:02:55,260
the most useful thing you can tell them

00:02:52,049 --> 00:02:58,590
is that's the wrong password the problem

00:02:55,260 --> 00:03:02,090
is to an attacker you are implicitly

00:02:58,590 --> 00:03:04,079
saying that's the correct user name if

00:03:02,090 --> 00:03:08,040
you want to see how that can be

00:03:04,079 --> 00:03:09,870
exploited look at PayPal this feature is

00:03:08,040 --> 00:03:12,060
long gone but years ago PayPal

00:03:09,870 --> 00:03:14,310
introduced a feature great feature from

00:03:12,060 --> 00:03:16,470
a user perspective type in an email

00:03:14,310 --> 00:03:18,780
address it does a look up and says oh

00:03:16,470 --> 00:03:20,639
Michael at Mago Co that's Michael

00:03:18,780 --> 00:03:24,479
carnucci you're sending money to that's

00:03:20,639 --> 00:03:26,040
great as a user I want to know that I'm

00:03:24,479 --> 00:03:27,840
actually sending money to the intended

00:03:26,040 --> 00:03:29,669
recipient and not fat fingering an email

00:03:27,840 --> 00:03:31,979
address to send my hard-earned dollars

00:03:29,669 --> 00:03:35,760
off into the digital ether never to be

00:03:31,979 --> 00:03:37,680
seen again take a data dump of email

00:03:35,760 --> 00:03:39,930
addresses and that API and you can

00:03:37,680 --> 00:03:42,419
create a very sophisticated spear

00:03:39,930 --> 00:03:45,780
phishing attack that will even fool some

00:03:42,419 --> 00:03:50,569
savvy customers maybe the most valuable

00:03:45,780 --> 00:03:50,569

YouTube URL: https://www.youtube.com/watch?v=-oQlggSWITg


