Title: Observability: Understanding production through your customers' eyes, Christine Yen (Honeycomb)
Publication date: 2019-11-06
Playlist: O'Reilly Velocity Conference 2019 - Berlin, DE
Description: 
	Observability isn’t just for ops folks, but it’s not only about engineering roles, either. It’s the lens that allows various functions all across the software lifecycle to perceive the same reality. By empowering you to ask new questions of your software, observability fuels curiosity about the world as it is, not how you expect it to be. In the end, after all, Christine Yen explains, “Nines don’t matter if your users aren’t happy.”

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,069 --> 00:00:05,990
remember when I said that we felt like

00:00:03,500 --> 00:00:07,910
we spoke different languages well we had

00:00:05,990 --> 00:00:10,990
to talk about my code my hazardous code

00:00:07,910 --> 00:00:12,769
that's when it really felt like that

00:00:10,990 --> 00:00:14,660
sorry this is something I left him for

00:00:12,769 --> 00:00:15,769
cartoon effect let me try to remember

00:00:14,660 --> 00:00:19,250
some of the words that were coming out

00:00:15,769 --> 00:00:21,230
of her mouth don't worry work safe yeah

00:00:19,250 --> 00:00:23,930
it sounded something like Christine

00:00:21,230 --> 00:00:25,220
cpu's up and throughput is down on half

00:00:23,930 --> 00:00:29,630
the notes of the consensual cluster what

00:00:25,220 --> 00:00:30,770
did you do you're all and you're all in

00:00:29,630 --> 00:00:31,730
the audience at velocity which means

00:00:30,770 --> 00:00:33,950
that you actually know what this means

00:00:31,730 --> 00:00:37,280
and you're like uh well obviously this

00:00:33,950 --> 00:00:41,350
is how you fix it at the time as a

00:00:37,280 --> 00:00:41,350
developer this is what that sounded like

00:00:42,430 --> 00:00:47,840
CPU and database right latency didn't

00:00:44,960 --> 00:00:49,579
mean anything to me as an application

00:00:47,840 --> 00:00:51,800
developer I didn't know immediately how

00:00:49,579 --> 00:00:54,560
to map that back to my code I didn't

00:00:51,800 --> 00:00:56,030
know what did you to fix it I mean it

00:00:54,560 --> 00:01:00,530
sounded bad I even but I didn't really

00:00:56,030 --> 00:01:02,030
know how bad it was but you know 2012 is

00:01:00,530 --> 00:01:03,649
in the face of ops being angry at me I

00:01:02,030 --> 00:01:04,820
was like okay okay I'll I'll use your

00:01:03,649 --> 00:01:06,650
tools and I'll get really good at

00:01:04,820 --> 00:01:09,200
scrolling through your dashboards and

00:01:06,650 --> 00:01:11,450
trying to find that one graph that that

00:01:09,200 --> 00:01:12,680
does this the same time as this graph

00:01:11,450 --> 00:01:18,409
you're actually upset about does this

00:01:12,680 --> 00:01:22,159
and maybe maybe I can be helpful we kind

00:01:18,409 --> 00:01:26,409
of limped along like this until we

00:01:22,159 --> 00:01:30,220
started wondering how we could make

00:01:26,409 --> 00:01:37,580
these graph that I was trying to use

00:01:30,220 --> 00:01:40,190
feel more natural to me and the thing

00:01:37,580 --> 00:01:43,250
that enabled this the most was

00:01:40,190 --> 00:01:45,140
introducing the terms that I cared about

00:01:43,250 --> 00:01:47,510
the terms that made sense to me that

00:01:45,140 --> 00:01:50,930
would allow me to map things back to my

00:01:47,510 --> 00:01:54,140
code things like build IDs customers

00:01:50,930 --> 00:01:56,390
endpoints because it turns out when Ops

00:01:54,140 --> 00:01:58,909
comes running to me saying Christine

00:01:56,390 --> 00:02:02,450
Christine the latest build that you

00:01:58,909 --> 00:02:05,180
shipped increased API latency by a

00:02:02,450 --> 00:02:07,790
factor of 10 for a biggest customer on

00:02:05,180 --> 00:02:11,359
the most expensive endpoint ah okay well

00:02:07,790 --> 00:02:13,290
now I start to have an idea of where my

00:02:11,359 --> 00:02:17,129
code to fix it

00:02:13,290 --> 00:02:19,739
what the impact is who and what what use

00:02:17,129 --> 00:02:21,739
case is is triggering it so that I can

00:02:19,739 --> 00:02:25,980
write a test and and and do my thing and

00:02:21,739 --> 00:02:28,230
push I better code and it was it was

00:02:25,980 --> 00:02:30,720
this realization that okay we can have

00:02:28,230 --> 00:02:34,560
one type of tool start to feel a little

00:02:30,720 --> 00:02:35,940
bit more like the other that started to

00:02:34,560 --> 00:02:38,040
enable me to peek over that boundary

00:02:35,940 --> 00:02:43,049
unit production and feel like it wasn't

00:02:38,040 --> 00:02:44,310
such a big scarier world after all it

00:02:43,049 --> 00:02:47,879
turns out I could learn to care about

00:02:44,310 --> 00:02:49,110
production I could finally figure out

00:02:47,879 --> 00:02:51,750
myself

00:02:49,110 --> 00:02:53,160
what was happening mapping it map it

00:02:51,750 --> 00:02:56,700
back to the segments of the customers I

00:02:53,160 --> 00:02:57,540
knew about and jump straight to okay

00:02:56,700 --> 00:03:00,299
great

00:02:57,540 --> 00:03:03,290
let me try to let me let me let me dig

00:03:00,299 --> 00:03:03,290

YouTube URL: https://www.youtube.com/watch?v=9CQlxWRWOc4


