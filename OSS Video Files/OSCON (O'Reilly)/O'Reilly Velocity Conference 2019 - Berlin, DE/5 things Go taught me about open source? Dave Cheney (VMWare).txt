Title: 5 things Go taught me about open source? Dave Cheney (VMWare)
Publication date: 2019-11-07
Playlist: O'Reilly Velocity Conference 2019 - Berlin, DE
Description: 
	What makes an open source project popular? What makes it successful? What gives it longevity and vibrancy? What convinces people to invest their careers in it?
Ten years ago Dave encountered Go and was smitten. So he set out, like all keen advocates, to tell the world about why Go was important to him, and thus—clearly—why it should be important to them. But it turns out that selling a language has almost nothing to do with syntax, or features, or concurrency, or simplicity.
This talk is about the unexpected things Dave learned along the way trying to convince programmers to try Go and how they might translate to the experiences that all have working in an ecosystem of open source projects.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,579 --> 00:00:06,440
moving technology from hobby to

00:00:03,710 --> 00:00:09,049
mainstream requires a functional job

00:00:06,440 --> 00:00:10,909
market early adopters those superfans

00:00:09,049 --> 00:00:12,769
people are super passionate are going to

00:00:10,909 --> 00:00:14,299
try your idea whether they have a job in

00:00:12,769 --> 00:00:16,730
it or not if they can't use it at work

00:00:14,299 --> 00:00:18,680
they'll play with it at home but for

00:00:16,730 --> 00:00:22,430
mainstream adopters they're going to

00:00:18,680 --> 00:00:24,950
take a wait-and-see attitude when I

00:00:22,430 --> 00:00:27,200
chose in 2012 to take a job where I'd be

00:00:24,950 --> 00:00:29,600
programming full-time and go I was also

00:00:27,200 --> 00:00:31,490
making another choice and that choice

00:00:29,600 --> 00:00:36,339
was that I was going to let my current

00:00:31,490 --> 00:00:38,359
skills as a system ministry to lapse

00:00:36,339 --> 00:00:40,760
choosing to invest your career in a new

00:00:38,359 --> 00:00:43,089
technology implicitly means that you're

00:00:40,760 --> 00:00:45,649
putting your current skill set on hold

00:00:43,089 --> 00:00:47,239
so if you're pitching to management to

00:00:45,649 --> 00:00:49,550
adopt a new tool or a monitoring

00:00:47,239 --> 00:00:51,859
solution or container platform for your

00:00:49,550 --> 00:00:53,179
company for the other people in your in

00:00:51,859 --> 00:00:56,690
your team in your company to come on

00:00:53,179 --> 00:00:58,519
board they have to know that the risk

00:00:56,690 --> 00:01:01,999
that you took is this is the risk that

00:00:58,519 --> 00:01:04,580
they're willing to take as well when you

00:01:01,999 --> 00:01:06,440
pitch the CEO or CTO don't care about

00:01:04,580 --> 00:01:08,150
syntax or deployment strategies or

00:01:06,440 --> 00:01:11,030
single binaries or get commits or any of

00:01:08,150 --> 00:01:12,890
that nonsense they care about how easy

00:01:11,030 --> 00:01:14,780
it will be to retrain their existing

00:01:12,890 --> 00:01:17,840
staff and how easy it will be to recruit

00:01:14,780 --> 00:01:19,670
new ones this is key when you're

00:01:17,840 --> 00:01:21,830
promoting open source projects as well

00:01:19,670 --> 00:01:23,210
as asking people to try it you ask them

00:01:21,830 --> 00:01:25,520
and potentially give up the skill sets

00:01:23,210 --> 00:01:26,660
they have at the moment it's not simply

00:01:25,520 --> 00:01:29,720
that they're inexperienced in that

00:01:26,660 --> 00:01:31,250
technology they risk getting out of date

00:01:29,720 --> 00:01:35,690
in the thing that they used to be very

00:01:31,250 --> 00:01:38,360
good at doing now forego we kind of got

00:01:35,690 --> 00:01:41,120
lucky like docker was our breakout hit

00:01:38,360 --> 00:01:46,940
and from there this floodgate of tools

00:01:41,120 --> 00:01:48,200
opened the tests rest ik Hugo Mineo the

00:01:46,940 --> 00:01:50,680
whole house she called the suite of

00:01:48,200 --> 00:01:53,120
tools and of course kubernetes

00:01:50,680 --> 00:01:54,560
now the go deployment model the

00:01:53,120 --> 00:01:56,900
performance the memory safety the

00:01:54,560 --> 00:01:59,540
lightweight concurrency bra design

00:01:56,900 --> 00:02:01,610
deliberately for this and so positioned

00:01:59,540 --> 00:02:09,679
the language perfectly for the switch to

00:02:01,610 --> 00:02:11,300
microcircuits um what of a difficult not

00:02:09,679 --> 00:02:12,950
entirely satisfying point to make

00:02:11,300 --> 00:02:14,720
because essentially what I'm saying is

00:02:12,950 --> 00:02:18,890
what if you want to be sick

00:02:14,720 --> 00:02:21,710
we'll just write a hit song but it's

00:02:18,890 --> 00:02:23,270
also an acknowledgement that in part the

00:02:21,710 --> 00:02:25,700
success is being at the right place at

00:02:23,270 --> 00:02:27,740
the right time and so knowledge meant to

00:02:25,700 --> 00:02:30,140
be successful your project needs to

00:02:27,740 --> 00:02:32,270
solve a real problem it needs to do

00:02:30,140 --> 00:02:33,590
something new simply making an

00:02:32,270 --> 00:02:39,400
open-source version of a thing that's

00:02:33,590 --> 00:02:39,400
closed isn't in itself justification

00:02:45,150 --> 00:02:47,209

YouTube URL: https://www.youtube.com/watch?v=nAaPWpahyM8


