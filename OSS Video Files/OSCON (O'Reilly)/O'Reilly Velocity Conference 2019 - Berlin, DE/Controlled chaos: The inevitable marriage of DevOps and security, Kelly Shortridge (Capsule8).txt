Title: Controlled chaos: The inevitable marriage of DevOps and security, Kelly Shortridge (Capsule8)
Publication date: 2019-11-07
Playlist: O'Reilly Velocity Conference 2019 - Berlin, DE
Description: 
	Software is eating the world, and security will be eaten as well if it doesn’t evolve. Kelly Shortridge exposes why chaos and resilience engineering represents the future of security programs—and why it catalyzes the dawn of defensive innovation. You’ll examine how adopting distributed, immutable, and ephemeral infrastructure (the “DIE” triad) can create powerful security benefits.
Finally, focusing on practical implementation, you’ll delve into the art of harnessing chaos for security and how to conduct security tests within the DIE model. Through this marriage of security and DevOps, security can transform from a frustrating cost center to a lean, mean, innovation machine that supports software delivery performance.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,760 --> 00:00:06,790
so what are the principles of this chaos

00:00:03,220 --> 00:00:09,340
security engineering first you have to

00:00:06,790 --> 00:00:11,860
expect security controls to fail and you

00:00:09,340 --> 00:00:13,629
must prepare accordingly system

00:00:11,860 --> 00:00:15,010
architecture has to be designed under

00:00:13,629 --> 00:00:17,589
the assumption that security controls

00:00:15,010 --> 00:00:18,880
have the potential for failure you also

00:00:17,589 --> 00:00:21,339
have to design your architecture

00:00:18,880 --> 00:00:23,589
assuming users will fail where failure

00:00:21,339 --> 00:00:26,769
is user behavior that doesn't adhere to

00:00:23,589 --> 00:00:28,810
secure principles the second thing is

00:00:26,769 --> 00:00:31,119
don't try to avoid security incidents

00:00:28,810 --> 00:00:33,820
instead you have to embrace your ability

00:00:31,119 --> 00:00:35,710
to respond to them security incidents

00:00:33,820 --> 00:00:37,239
aren't fully preventable they never have

00:00:35,710 --> 00:00:39,640
and I'm pretty sure they never will be

00:00:37,239 --> 00:00:41,379
the focus instead should really be on

00:00:39,640 --> 00:00:44,190
ensuring that systems are resilient

00:00:41,379 --> 00:00:46,180
enough to handle incidents gracefully I

00:00:44,190 --> 00:00:47,859
personally think it's freeing to move

00:00:46,180 --> 00:00:49,590
away from the kind of standard of

00:00:47,859 --> 00:00:52,449
perfect prevention which is impossible

00:00:49,590 --> 00:00:53,949
towards resilience instead and it's

00:00:52,449 --> 00:00:57,519
something that I've seen y'all doing on

00:00:53,949 --> 00:00:59,530
the performance side already to avoid

00:00:57,519 --> 00:01:01,570
complacency with all of this you can use

00:00:59,530 --> 00:01:03,460
game days which let you practice a

00:01:01,570 --> 00:01:05,710
potentially risky scenario in a safe

00:01:03,460 --> 00:01:07,150
environment if you don't test in a

00:01:05,710 --> 00:01:08,620
production like environment you're not

00:01:07,150 --> 00:01:10,780
really going to understand how things

00:01:08,620 --> 00:01:12,340
will work when the complexity Domino

00:01:10,780 --> 00:01:15,370
chain starts happening in your systems

00:01:12,340 --> 00:01:17,530
so game days proactively test resilience

00:01:15,370 --> 00:01:20,380
to establish confidence in your systems

00:01:17,530 --> 00:01:22,600
at scale the problem is you have to know

00:01:20,380 --> 00:01:24,520
what game days to prioritize giving your

00:01:22,600 --> 00:01:27,970
time and resource constraints this is

00:01:24,520 --> 00:01:29,530
very true for security game days too you

00:01:27,970 --> 00:01:31,330
want a prioritized security game days

00:01:29,530 --> 00:01:31,960
based on the potential impact of the

00:01:31,330 --> 00:01:33,970
business

00:01:31,960 --> 00:01:36,310
consider what's most important from your

00:01:33,970 --> 00:01:38,140
customers perspective likely it's going

00:01:36,310 --> 00:01:40,180
to be related to service disruption the

00:01:38,140 --> 00:01:41,950
leak leakage of customer credentials or

00:01:40,180 --> 00:01:45,070
sensitive data as well as compliance

00:01:41,950 --> 00:01:47,170
violations in game days for security

00:01:45,070 --> 00:01:48,700
game days the goal is really to verify

00:01:47,170 --> 00:01:51,160
that you have your monitoring alerting

00:01:48,700 --> 00:01:54,520
and response capabilities firmly in

00:01:51,160 --> 00:01:56,560
place decision trees which I've talked

00:01:54,520 --> 00:01:58,240
about before in my prior work can be

00:01:56,560 --> 00:02:00,760
valuable guides for crafting security

00:01:58,240 --> 00:02:02,230
game day scenarios so for examples start

00:02:00,760 --> 00:02:04,360
with whatever the business priority is

00:02:02,230 --> 00:02:06,250
let's say it's an s3 bucket containing

00:02:04,360 --> 00:02:08,110
sensitive customer data then you

00:02:06,250 --> 00:02:10,390
brainstorm how the attacker would most

00:02:08,110 --> 00:02:13,689
easily get to their goal of accessing

00:02:10,390 --> 00:02:14,530
and exfiltrating that data it's tempting

00:02:13,689 --> 00:02:16,420
to dream up

00:02:14,530 --> 00:02:17,709
it's scenarios that is another keynote

00:02:16,420 --> 00:02:19,870
speaker James McKeen has said before

00:02:17,709 --> 00:02:21,640
it's very unlikely that Mossad is gonna

00:02:19,870 --> 00:02:24,060
like fluctuate your data centers power

00:02:21,640 --> 00:02:26,470
supply to exfiltrate data bit by bit

00:02:24,060 --> 00:02:28,540
instead you really have to determine the

00:02:26,470 --> 00:02:29,740
least cost path attackers are going to

00:02:28,540 --> 00:02:31,540
take to get to their goal

00:02:29,740 --> 00:02:34,510
that's something more like phishing

00:02:31,540 --> 00:02:36,700
rather than zero-day exploits the least

00:02:34,510 --> 00:02:39,720
cost path is really the most sensible

00:02:36,700 --> 00:02:42,130
place to start your testing as well a

00:02:39,720 --> 00:02:43,270
guiding principle is you embed security

00:02:42,130 --> 00:02:45,130
into that the software delivery

00:02:43,270 --> 00:02:47,200
lifecycle is that your goal should

00:02:45,130 --> 00:02:49,030
always be raising the cost of attack

00:02:47,200 --> 00:02:50,980
even advanced attackers like

00:02:49,030 --> 00:02:53,800
nation-states look at what Russia did

00:02:50,980 --> 00:02:55,750
with the dnc will absolutely use easy

00:02:53,800 --> 00:02:58,000
and dumb methods like fishing in order

00:02:55,750 --> 00:03:00,069
to get to their goal force them to put

00:02:58,000 --> 00:03:01,870
in the work make them earn them

00:03:00,069 --> 00:03:04,620
compromising you don't let them get in

00:03:01,870 --> 00:03:04,620

YouTube URL: https://www.youtube.com/watch?v=zMyLvPPbWMc


