Title: The evolution and future of software architecture Mark Richards (Independent)
Publication date: 2017-04-04
Playlist: O'Reilly Software Architecture Conference 2017 - New York, New York
Description: 
	Back in the day, large-scale monolithic systems ruled the world. While these systems worked well in their time, we saw them quickly fall apart in the 2000s. But why?

Mark Richards discusses the evolution of software architecture and shows how the systems we’ve built so far won’t live up to current social, economic, and technology demands. Mark then outlines the ingredients that go into both evolutionary architecture and competitive advantage, offers a glimpse of what software architecture will look like in the future, and shares the things we software architects need to focus on and think about beyond 2017.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:02,010 --> 00:00:08,290
consider a large banking application a

00:00:05,710 --> 00:00:12,129
back-end monolithic banking application

00:00:08,290 --> 00:00:13,599
well back in the day you know everybody

00:00:12,129 --> 00:00:16,720
with gray hair always says that back in

00:00:13,599 --> 00:00:18,160
the day anyways back in the day how did

00:00:16,720 --> 00:00:19,570
we check our balance for example in

00:00:18,160 --> 00:00:21,670
these big monolithic systems they were

00:00:19,570 --> 00:00:23,109
one of three ways we could do that well

00:00:21,670 --> 00:00:25,150
the first is we can telephone the bank

00:00:23,109 --> 00:00:27,250
and say can you tell me my balance we

00:00:25,150 --> 00:00:29,230
can go to any of the hundreds of ATMs

00:00:27,250 --> 00:00:30,970
around the country put in our card and

00:00:29,230 --> 00:00:32,560
get our balance we could do real

00:00:30,970 --> 00:00:34,300
old-school and actually walk up to a

00:00:32,560 --> 00:00:35,860
teller and say can you tell me my

00:00:34,300 --> 00:00:39,579
balance there's something interesting

00:00:35,860 --> 00:00:41,680
about all three of these modes though no

00:00:39,579 --> 00:00:44,440
matter how many people wanted to check

00:00:41,680 --> 00:00:46,570
their balance at the same time then we

00:00:44,440 --> 00:00:48,730
rolling a fixed number of telephone

00:00:46,570 --> 00:00:50,770
operators a fixed number of ATMs around

00:00:48,730 --> 00:00:52,809
the country a fixed number of tellers

00:00:50,770 --> 00:00:54,670
actually accessing this system those

00:00:52,809 --> 00:00:57,550
governors were in place it's something I

00:00:54,670 --> 00:01:02,170
like to call controlled access and these

00:00:57,550 --> 00:01:03,840
systems worked very well very stable but

00:01:02,170 --> 00:01:07,780
what do we have today

00:01:03,840 --> 00:01:10,810
today we have mobile banking we have

00:01:07,780 --> 00:01:13,720
online banking as well and the problem

00:01:10,810 --> 00:01:14,860
is we no longer have that controlled

00:01:13,720 --> 00:01:16,750
access as a matter of fact it's

00:01:14,860 --> 00:01:21,520
something I like to call uncontrolled

00:01:16,750 --> 00:01:23,049
access and the systems that we had or of

00:01:21,520 --> 00:01:25,479
these banking systems for example these

00:01:23,049 --> 00:01:28,540
backend systems can't handle this kind

00:01:25,479 --> 00:01:34,890
of increased load they stress and

00:01:28,540 --> 00:01:37,750
explode how can we overcome this problem

00:01:34,890 --> 00:01:39,310
evolutionary architecture is one of

00:01:37,750 --> 00:01:40,810
those answers as a matter of fact it's

00:01:39,310 --> 00:01:43,210
something I like to call the

00:01:40,810 --> 00:01:44,649
evolutionary cauldron of architecture

00:01:43,210 --> 00:01:46,000
and there's certain ingredients as a

00:01:44,649 --> 00:01:48,399
matter of fact that go into this

00:01:46,000 --> 00:01:52,000
evolutionary cauldron the first of those

00:01:48,399 --> 00:01:53,799
is agility agility defined as having the

00:01:52,000 --> 00:01:55,899
characteristics of speed and

00:01:53,799 --> 00:01:59,409
coordination the ability to react

00:01:55,899 --> 00:02:00,909
appropriately and quickly to change it

00:01:59,409 --> 00:02:04,240
as a matter of fact companies embrace

00:02:00,909 --> 00:02:06,219
this and fail why because it's the only

00:02:04,240 --> 00:02:08,110
ingredient we focus on there's other

00:02:06,219 --> 00:02:10,150
ingredients in here so we can do things

00:02:08,110 --> 00:02:10,870
really really really fast in the wrong

00:02:10,150 --> 00:02:13,150
direction

00:02:10,870 --> 00:02:15,310
now agility has to be combined with a

00:02:13,150 --> 00:02:17,980
second evolutionary cauldron

00:02:15,310 --> 00:02:20,380
ingredient called velocity the speed of

00:02:17,980 --> 00:02:22,630
something in a given direction now we

00:02:20,380 --> 00:02:25,090
can move very quickly in the right

00:02:22,630 --> 00:02:27,130
direction there's a third there's a

00:02:25,090 --> 00:02:30,489
third ingredient and that is that of

00:02:27,130 --> 00:02:32,200
modularity having independent parts that

00:02:30,489 --> 00:02:35,130
can be connected or combined in

00:02:32,200 --> 00:02:35,130
different ways

00:02:40,900 --> 00:02:42,959

YouTube URL: https://www.youtube.com/watch?v=RrPr0m3KHaQ


