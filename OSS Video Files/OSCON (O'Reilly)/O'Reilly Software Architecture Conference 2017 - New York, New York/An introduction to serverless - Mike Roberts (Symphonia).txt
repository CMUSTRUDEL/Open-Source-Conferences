Title: An introduction to serverless - Mike Roberts (Symphonia)
Publication date: 2017-04-04
Playlist: O'Reilly Software Architecture Conference 2017 - New York, New York
Description: 
	Web services, the cloud, containers, microservices—software architecture always has a new fad, and some of them even stick around for a while. The latest buzzword is "serverless"—the idea of replacing your server applications with. . .well, what, exactly? Mike Roberts introduces the concepts behind serverless architectures to answer this question, explains how serverless compares with other cloud approaches, and provides reasons why it is worthy of some of the hype it’s currently receiving, balanced with a few warnings of some rough edges.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:01,850 --> 00:00:07,890
well service really consists of two main

00:00:05,250 --> 00:00:10,170
groups of technologies one is called

00:00:07,890 --> 00:00:15,059
back-end as a service and one is called

00:00:10,170 --> 00:00:17,220
functions of service so back-end as a

00:00:15,059 --> 00:00:18,960
service is a little bit like yet another

00:00:17,220 --> 00:00:21,210
one of those as a services it's a little

00:00:18,960 --> 00:00:24,870
bit like software as a service and those

00:00:21,210 --> 00:00:27,600
are things like github Salesforce Travis

00:00:24,870 --> 00:00:28,740
CI all of those kind of things but with

00:00:27,600 --> 00:00:31,020
back end as a service

00:00:28,740 --> 00:00:32,730
we're not outsourcing organizational

00:00:31,020 --> 00:00:35,399
processes like those other tools are

00:00:32,730 --> 00:00:40,589
we're actually outsourcing components of

00:00:35,399 --> 00:00:42,780
our application so a few examples so

00:00:40,589 --> 00:00:44,789
what I like always to bring up first is

00:00:42,780 --> 00:00:47,460
is Google firebase and Google firebase

00:00:44,789 --> 00:00:49,530
is not particularly well-known by folks

00:00:47,460 --> 00:00:51,780
like typical service flow developers

00:00:49,530 --> 00:00:53,879
like me but Google firebase is a

00:00:51,780 --> 00:00:56,190
database that is really popular with

00:00:53,879 --> 00:00:57,809
mobile developers and the reason they

00:00:56,190 --> 00:00:58,980
love it so much is because they don't

00:00:57,809 --> 00:01:00,809
have any to have to do any database

00:00:58,980 --> 00:01:02,760
administration and they don't have to

00:01:00,809 --> 00:01:04,710
write any server-side software they can

00:01:02,760 --> 00:01:07,140
have their mobile apps communicate

00:01:04,710 --> 00:01:08,910
directly with the database and firebase

00:01:07,140 --> 00:01:12,900
is really set up for that kind of world

00:01:08,910 --> 00:01:16,920
with all of its security another example

00:01:12,900 --> 00:01:19,800
is all 0 and similarly AWS Cognito and

00:01:16,920 --> 00:01:21,750
both of these are services that do user

00:01:19,800 --> 00:01:23,670
management and password management and

00:01:21,750 --> 00:01:25,200
all that kind of stuff that so many of

00:01:23,670 --> 00:01:26,850
us have written exactly the same code

00:01:25,200 --> 00:01:28,350
like 10 times in a row well the good

00:01:26,850 --> 00:01:28,800
news is we don't have to write that code

00:01:28,350 --> 00:01:31,200
anymore

00:01:28,800 --> 00:01:34,950
because we can rely on services like

00:01:31,200 --> 00:01:36,660
all-zero an AWS Cognito so these are

00:01:34,950 --> 00:01:38,640
kind of newer things and a few of you

00:01:36,660 --> 00:01:41,580
probably haven't heard of these but

00:01:38,640 --> 00:01:43,380
interestingly I also see a few of these

00:01:41,580 --> 00:01:45,210
sort of more traditional products as

00:01:43,380 --> 00:01:47,820
being service back-end as a service as

00:01:45,210 --> 00:01:50,820
well so things like dynamodb that's

00:01:47,820 --> 00:01:54,720
Amazon's key value store and also it

00:01:50,820 --> 00:01:56,190
also even Amazon s3 I actually think the

00:01:54,720 --> 00:01:59,820
vestry is being the original service

00:01:56,190 --> 00:02:02,070
product now the common theme to all of

00:01:59,820 --> 00:02:05,220
these is that they are components of our

00:02:02,070 --> 00:02:11,459
application that other people develop

00:02:05,220 --> 00:02:13,709
and operate on our behalf the other half

00:02:11,459 --> 00:02:15,360
of service is functions as a service

00:02:13,709 --> 00:02:18,930
excuse me

00:02:15,360 --> 00:02:22,200
or fats and faz is a new way of

00:02:18,930 --> 00:02:24,480
deploying server-side software oriented

00:02:22,200 --> 00:02:27,180
around deploying individual functions

00:02:24,480 --> 00:02:28,680
and operations now faz is where a lot of

00:02:27,180 --> 00:02:30,660
the hype has come from in the last year

00:02:28,680 --> 00:02:33,720
and a half but it's really just part of

00:02:30,660 --> 00:02:34,950
the overall serverless story so I mean

00:02:33,720 --> 00:02:37,740
it's pain a little bit about how

00:02:34,950 --> 00:02:39,300
functions as a service works when we

00:02:37,740 --> 00:02:41,520
traditionally deploy server-side

00:02:39,300 --> 00:02:43,500
software we start with a host instance

00:02:41,520 --> 00:02:47,490
and that's a container or a virtual

00:02:43,500 --> 00:02:52,800
machine host then we deploy an

00:02:47,490 --> 00:02:54,989
application within our host and this

00:02:52,800 --> 00:02:57,630
application is typically an operating

00:02:54,989 --> 00:03:02,280
system process and usually contains code

00:02:57,630 --> 00:03:05,100
for several different operations phase

00:03:02,280 --> 00:03:06,870
changes this type of deployment first of

00:03:05,100 --> 00:03:09,420
all we strip away the host instance and

00:03:06,870 --> 00:03:12,810
then the application process from our

00:03:09,420 --> 00:03:15,780
model and instead we focus on just the

00:03:12,810 --> 00:03:20,970
operations or functions that express our

00:03:15,780 --> 00:03:25,440
applications logic instead of a host we

00:03:20,970 --> 00:03:27,780
have a vendor faz platform and we deploy

00:03:25,440 --> 00:03:31,140
our functions to the faz platform as

00:03:27,780 --> 00:03:32,880
very very basic code units so for a code

00:03:31,140 --> 00:03:34,709
that we're writing in JavaScript or

00:03:32,880 --> 00:03:37,140
Python these are just bits of source

00:03:34,709 --> 00:03:40,230
code zipped up for code that we're

00:03:37,140 --> 00:03:41,970
writing Java or Scala or even closure we

00:03:40,230 --> 00:03:43,350
put those just in a simple jar files

00:03:41,970 --> 00:03:47,280
there's nothing more complicated that

00:03:43,350 --> 00:03:49,860
when it comes to deployment now the

00:03:47,280 --> 00:03:52,680
individual functions are not constantly

00:03:49,860 --> 00:03:54,810
active in a server process just sitting

00:03:52,680 --> 00:03:57,870
around idle waiting to run as they would

00:03:54,810 --> 00:04:01,110
be in a traditional app instead what we

00:03:57,870 --> 00:04:06,540
do is we tie each function to a specific

00:04:01,110 --> 00:04:09,450
event and when the event occurs the faz

00:04:06,540 --> 00:04:11,880
platform brings up a container for us

00:04:09,450 --> 00:04:13,140
completely on on its own we don't have

00:04:11,880 --> 00:04:16,799
to do any management that container at

00:04:13,140 --> 00:04:19,049
all and it executes our function in that

00:04:16,799 --> 00:04:23,040
container with the event with the event

00:04:19,049 --> 00:04:25,260
that happened once the function has

00:04:23,040 --> 00:04:28,040
finished executing the platform is free

00:04:25,260 --> 00:04:31,110
to tear down the container

00:04:28,040 --> 00:04:33,150
now functions of service depends

00:04:31,110 --> 00:04:35,100
significantly on the types of events

00:04:33,150 --> 00:04:38,880
that we can configure our functions to

00:04:35,100 --> 00:04:40,380
run on and surprisingly but fortunately

00:04:38,880 --> 00:04:43,470
there are a whole ton of different

00:04:40,380 --> 00:04:45,150
events that we can use when we're using

00:04:43,470 --> 00:04:47,100
this stuff and that allows us to

00:04:45,150 --> 00:04:48,600
actually develop many good the kinds of

00:04:47,100 --> 00:04:50,660
server-side programs that we would

00:04:48,600 --> 00:04:53,130
normally write but using this paradigm

00:04:50,660 --> 00:04:54,720
so let me give you some examples so

00:04:53,130 --> 00:04:56,790
first of all you can use a message bus

00:04:54,720 --> 00:04:59,820
for a message for message event-driven

00:04:56,790 --> 00:05:02,039
systems you can use a network file

00:04:59,820 --> 00:05:04,020
system or an object store like s3 for

00:05:02,039 --> 00:05:07,710
file processing and this also lets you

00:05:04,020 --> 00:05:09,750
create data pipelines you can use time

00:05:07,710 --> 00:05:11,580
as your event and that means that you

00:05:09,750 --> 00:05:14,010
can replace your chrome process and your

00:05:11,580 --> 00:05:18,780
craw nap locations using functions as a

00:05:14,010 --> 00:05:21,270
service and finally you can of course

00:05:18,780 --> 00:05:23,010
use HTTP requests as your event source

00:05:21,270 --> 00:05:26,250
so that means that you can develop web

00:05:23,010 --> 00:05:29,060
apps and web api services using

00:05:26,250 --> 00:05:29,060
functions as a service

00:05:35,000 --> 00:05:37,060

YouTube URL: https://www.youtube.com/watch?v=JLuvIO9c_h0


