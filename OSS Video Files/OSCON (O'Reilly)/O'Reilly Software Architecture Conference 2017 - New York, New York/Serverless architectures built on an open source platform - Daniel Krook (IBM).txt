Title: Serverless architectures built on an open source platform - Daniel Krook (IBM)
Publication date: 2017-04-05
Playlist: O'Reilly Software Architecture Conference 2017 - New York, New York
Description: 
	Daniel Krook explores Apache OpenWhisk on IBM Bluemix, which provides a powerful and flexible environment for deploying cloud-native applications driven by data, message, and API call events.

This keynote is sponsored by IBM Bluemix.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:01,740 --> 00:00:04,900
Thank You Bryan thank you for the warm

00:00:04,420 --> 00:00:07,210
welcome

00:00:04,900 --> 00:00:09,700
today I'm going to talk a bit about

00:00:07,210 --> 00:00:11,700
serverless architectures well do

00:00:09,700 --> 00:00:13,510
refresher on serverless architectures

00:00:11,700 --> 00:00:15,820
given that there's been so many great

00:00:13,510 --> 00:00:16,630
talks already this week about them and

00:00:15,820 --> 00:00:18,579
I'm also going to give you an

00:00:16,630 --> 00:00:23,230
introduction to the Apache open wisp

00:00:18,579 --> 00:00:24,929
project running on top of IBM bluemix so

00:00:23,230 --> 00:00:27,960
over the last few years we've seen

00:00:24,929 --> 00:00:30,489
abstractions dro on top of bare metal

00:00:27,960 --> 00:00:32,230
towards containers towards virtual

00:00:30,489 --> 00:00:34,750
machines towards containers and now

00:00:32,230 --> 00:00:37,030
functions so these are allowing

00:00:34,750 --> 00:00:39,070
developers to focus more and more on the

00:00:37,030 --> 00:00:40,960
code the business logic that's valuable

00:00:39,070 --> 00:00:43,180
to them and less on the operational

00:00:40,960 --> 00:00:44,860
concerns so we get the term server list

00:00:43,180 --> 00:00:46,840
because their point of view is shifting

00:00:44,860 --> 00:00:48,400
away from what's running their code to

00:00:46,840 --> 00:00:51,310
just focusing on their code the code

00:00:48,400 --> 00:00:54,690
itself that and the code isn't always

00:00:51,310 --> 00:00:54,690
running but we'll get back to that later

00:00:54,840 --> 00:00:59,920
so the technical capabilities of these

00:00:57,520 --> 00:01:02,140
new platforms promise to help developers

00:00:59,920 --> 00:01:05,379
build well-designed cloud native

00:01:02,140 --> 00:01:07,479
applications faster and more easily by

00:01:05,379 --> 00:01:09,090
offloading many of the operational

00:01:07,479 --> 00:01:12,189
focused concerns of the 12 factors

00:01:09,090 --> 00:01:15,130
particularly around scaling lifecycle

00:01:12,189 --> 00:01:17,469
management and concurrency which quickly

00:01:15,130 --> 00:01:22,840
get out of hand when they go all-in on

00:01:17,469 --> 00:01:26,109
micro services and there's also several

00:01:22,840 --> 00:01:27,850
new types of workloads non-http

00:01:26,109 --> 00:01:30,759
workloads that are common to micro

00:01:27,850 --> 00:01:33,249
services that are also looking for the

00:01:30,759 --> 00:01:34,959
benefits of cloud elasticity and these

00:01:33,249 --> 00:01:37,719
workloads are a good fit for

00:01:34,959 --> 00:01:41,020
event-driven architectures because these

00:01:37,719 --> 00:01:42,880
service platforms can provide a support

00:01:41,020 --> 00:01:46,740
for different protocols beside besides

00:01:42,880 --> 00:01:53,259
HTTP and they allow for asynchronous

00:01:46,740 --> 00:01:54,999
interaction models and at the business

00:01:53,259 --> 00:01:58,170
level a new cost model is emerging

00:01:54,999 --> 00:02:00,670
that's letting them tie a code execution

00:01:58,170 --> 00:02:03,009
directly to the cloud resources that

00:02:00,670 --> 00:02:04,929
they're paying for so this is where

00:02:03,009 --> 00:02:07,209
another aspect of the term service comes

00:02:04,929 --> 00:02:11,770
into play the code isn't always running

00:02:07,209 --> 00:02:14,080
while waiting for requests and so while

00:02:11,770 --> 00:02:14,920
these architectures aren't the Silver

00:02:14,080 --> 00:02:16,900
Bullet

00:02:14,920 --> 00:02:19,959
there are dragons there as Mike Roberts

00:02:16,900 --> 00:02:21,970
pointed out yesterday they do provide a

00:02:19,959 --> 00:02:26,680
new deployment option for lots of use

00:02:21,970 --> 00:02:28,330
cases so how do you actually get started

00:02:26,680 --> 00:02:31,360
to develop and deploy a serverless

00:02:28,330 --> 00:02:33,580
architecture Apache Open whisk an

00:02:31,360 --> 00:02:35,620
open-source project started by IBM about

00:02:33,580 --> 00:02:38,770
a year and a half ago and in production

00:02:35,620 --> 00:02:41,410
on IBM bluemix since December provides a

00:02:38,770 --> 00:02:44,200
platform for doing just that it's

00:02:41,410 --> 00:02:45,790
flexible its extensible and it

00:02:44,200 --> 00:02:52,510
integrates with a variety of internal

00:02:45,790 --> 00:02:55,690
and external event sources so open

00:02:52,510 --> 00:02:57,190
Wescott offers the developer that person

00:02:55,690 --> 00:02:59,769
with that serverless point of view a

00:02:57,190 --> 00:03:03,030
straightforward programming model based

00:02:59,769 --> 00:03:06,430
on packages triggers actions and rules

00:03:03,030 --> 00:03:09,130
packages provide event feeds triggers

00:03:06,430 --> 00:03:12,069
fire when those event feeds initiate an

00:03:09,130 --> 00:03:15,720
event and developers map actions or

00:03:12,069 --> 00:03:18,190
functions to those triggers using rules

00:03:15,720 --> 00:03:20,739
anyone can create a new package for

00:03:18,190 --> 00:03:23,380
others to use and developers can write

00:03:20,739 --> 00:03:26,200
their actions in any language open wisk

00:03:23,380 --> 00:03:30,730
has first-class support for JavaScript

00:03:26,200 --> 00:03:32,680
Java Python and Swift but any SDK can be

00:03:30,730 --> 00:03:36,970
packaged as a docker image and run as an

00:03:32,680 --> 00:03:39,370
action so behind the open Wisc curtain

00:03:36,970 --> 00:03:41,230
there are servers of course it's a

00:03:39,370 --> 00:03:43,200
distributed system built on top of

00:03:41,230 --> 00:03:47,410
proven cloud native open source software

00:03:43,200 --> 00:03:51,340
including nginx apache couchdb console

00:03:47,410 --> 00:03:52,810
Kafka and docker you can run the

00:03:51,340 --> 00:03:56,500
platform using vagrant on a workstation

00:03:52,810 --> 00:04:01,239
or you can deploy it on premises on top

00:03:56,500 --> 00:04:02,739
of OpenStack for example you can get

00:04:01,239 --> 00:04:04,859
started building service applications

00:04:02,739 --> 00:04:08,200
with open wisk will go into bluemix net

00:04:04,859 --> 00:04:11,280
we provide an online editor a workflow

00:04:08,200 --> 00:04:15,269
builder for doing the mapping of the

00:04:11,280 --> 00:04:15,269
triggers the actions through the rules

00:04:15,419 --> 00:04:19,720
there's debugging tools available as

00:04:17,739 --> 00:04:24,280
well as an execution cost details

00:04:19,720 --> 00:04:27,610
visible online and there's also a visual

00:04:24,280 --> 00:04:28,020
monitoring console above over and above

00:04:27,610 --> 00:04:29,940
the

00:04:28,020 --> 00:04:31,440
open-source project so you can go

00:04:29,940 --> 00:04:33,240
through your asynchronous actions and

00:04:31,440 --> 00:04:37,610
find out what the true response and

00:04:33,240 --> 00:04:37,610
requests were in the asynchronous model

00:04:40,099 --> 00:04:43,470
so if you want to start playing with

00:04:42,000 --> 00:04:45,770
deploying some surveillance

00:04:43,470 --> 00:04:47,970
architectures you can go to bluemix net

00:04:45,770 --> 00:04:51,780
and/or explore the open source project

00:04:47,970 --> 00:04:54,300
itself at open West org developers like

00:04:51,780 --> 00:04:55,979
myself are always willing to help you

00:04:54,300 --> 00:04:57,720
can meet other community members through

00:04:55,979 --> 00:05:01,380
all the open the social media channels

00:04:57,720 --> 00:05:03,300
and be sure to attend the open whist

00:05:01,380 --> 00:05:04,949
deep dive later this afternoon for a

00:05:03,300 --> 00:05:07,220
demo and some best practices for

00:05:04,949 --> 00:05:09,419
developing service architectures and

00:05:07,220 --> 00:05:11,970
I've already posted these slides on

00:05:09,419 --> 00:05:14,550
Twitter so you can download them by

00:05:11,970 --> 00:05:16,070
following me Daniel Brooke thank you

00:05:14,550 --> 00:05:20,800
very much

00:05:16,070 --> 00:05:20,800
[Applause]

00:05:25,390 --> 00:05:27,450

YouTube URL: https://www.youtube.com/watch?v=vfo4nxiR70Y


