Title: Accelerating compute with software defined hardware (FPGA's) with Bernhard Friebe (Intel)
Publication date: 2017-06-27
Playlist: Velocity 2017 - San Jose, California
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:00,000 --> 00:00:04,049
hi this is Mike Henrickson from fluent

00:00:01,920 --> 00:00:05,970
in velocity and San Jose I'm here with

00:00:04,049 --> 00:00:07,740
Baron hard from Intel Bernhard how are

00:00:05,970 --> 00:00:10,920
you doing very good how are you Mike I'm

00:00:07,740 --> 00:00:13,769
doing well so you talked about FPGAs

00:00:10,920 --> 00:00:17,640
today or Intel talked about them on the

00:00:13,769 --> 00:00:20,100
stage velocity is kind of a different

00:00:17,640 --> 00:00:22,170
cut audience what would you like those

00:00:20,100 --> 00:00:22,980
people to understand about Intel and

00:00:22,170 --> 00:00:25,710
FPGAs

00:00:22,980 --> 00:00:27,420
mm-hmm a lot of the the users here are

00:00:25,710 --> 00:00:30,150
really software developers and they may

00:00:27,420 --> 00:00:32,700
ask what's an FPGA exactly FPGA is two

00:00:30,150 --> 00:00:35,640
things field programmable gate array so

00:00:32,700 --> 00:00:38,489
it's a gate array which is a array of

00:00:35,640 --> 00:00:40,379
Hardware blocks highly interconnected

00:00:38,489 --> 00:00:42,180
with each other and these Hardware

00:00:40,379 --> 00:00:44,010
blocks are programmable and the

00:00:42,180 --> 00:00:47,789
interconnect is programmable so what you

00:00:44,010 --> 00:00:51,539
can build is a custom hardware function

00:00:47,789 --> 00:00:53,940
on the FPGA and some colleagues of for

00:00:51,539 --> 00:00:56,579
defined Hardware okay that what allows

00:00:53,940 --> 00:00:58,410
you to do is you build your custom

00:00:56,579 --> 00:01:01,079
hardware function and highly parallel

00:00:58,410 --> 00:01:03,090
highly parallel way so why would someone

00:01:01,079 --> 00:01:07,619
want to have a software-defined hardware

00:01:03,090 --> 00:01:11,189
device or system so FPGAs accelerate

00:01:07,619 --> 00:01:12,780
compute because of the massive parallel

00:01:11,189 --> 00:01:15,990
architecture they have that you can

00:01:12,780 --> 00:01:17,520
really run compute algorithms very

00:01:15,990 --> 00:01:19,140
efficiently on this parallel

00:01:17,520 --> 00:01:22,259
architecture you get much higher

00:01:19,140 --> 00:01:25,680
performance lower latency and power

00:01:22,259 --> 00:01:28,049
efficiency as an accelerator so people

00:01:25,680 --> 00:01:30,630
are put in FPGA into the data center and

00:01:28,049 --> 00:01:32,520
the cloud to accelerate specific

00:01:30,630 --> 00:01:34,619
workloads or compute and networking

00:01:32,520 --> 00:01:36,840
acceleration and can make can they scale

00:01:34,619 --> 00:01:38,340
that as well is that make scaling easier

00:01:36,840 --> 00:01:41,250
or difficult or how do you manage that

00:01:38,340 --> 00:01:43,799
that part of the FPGA usually the FPGA

00:01:41,250 --> 00:01:45,780
is attached to the CPU and the CPU is

00:01:43,799 --> 00:01:49,229
being scaled out in the data center and

00:01:45,780 --> 00:01:52,409
so does so so the do we do it with the

00:01:49,229 --> 00:01:56,159
FPGA as well now what's important there

00:01:52,409 --> 00:02:00,000
is how do you make an FPGA now usable as

00:01:56,159 --> 00:02:02,009
if it were a CPU in the data center

00:02:00,000 --> 00:02:05,280
because FPGA is programmable Hardware

00:02:02,009 --> 00:02:07,469
and the traditional design flow for FPGA

00:02:05,280 --> 00:02:09,509
is very hardware centric so is this also

00:02:07,469 --> 00:02:11,730
going to be really important

00:02:09,509 --> 00:02:13,530
because of IOT I mean to me it sounds

00:02:11,730 --> 00:02:17,129
like this is this is a play that's going

00:02:13,530 --> 00:02:19,170
to bring hardware and performance and I

00:02:17,129 --> 00:02:20,040
hope security and everything together

00:02:19,170 --> 00:02:24,150
mm-hmm

00:02:20,040 --> 00:02:27,420
well acceleration with FPGA is not only

00:02:24,150 --> 00:02:30,060
a matter in the data center in the cloud

00:02:27,420 --> 00:02:32,370
FPGA sadi being deployed all the way to

00:02:30,060 --> 00:02:34,530
the edge where it gets close and close

00:02:32,370 --> 00:02:38,609
to some of the IOT applications such as

00:02:34,530 --> 00:02:42,000
autonomous driving or security cameras

00:02:38,609 --> 00:02:44,190
and things like that so FPGA is due to

00:02:42,000 --> 00:02:46,019
their the nature and the hardware

00:02:44,190 --> 00:02:48,720
acceleration they can do they expand

00:02:46,019 --> 00:02:51,209
from edge to cloud and so how do how do

00:02:48,720 --> 00:02:53,340
people would say a devops person how do

00:02:51,209 --> 00:02:55,590
they get more information and understand

00:02:53,340 --> 00:02:58,230
how to start programming how to build

00:02:55,590 --> 00:03:00,750
with FPGAs how do they how do they get

00:02:58,230 --> 00:03:03,150
going doing that well there's different

00:03:00,750 --> 00:03:05,909
user personas let's take the cloud

00:03:03,150 --> 00:03:10,500
service provider for example how can

00:03:05,909 --> 00:03:13,620
they enable an FPGA as any other compute

00:03:10,500 --> 00:03:17,609
resource they have in their data center

00:03:13,620 --> 00:03:20,459
right and we do this by abstracting the

00:03:17,609 --> 00:03:23,099
low-level programming and management of

00:03:20,459 --> 00:03:26,310
the FPGA away through providing drivers

00:03:23,099 --> 00:03:28,430
and api's which then allows the data

00:03:26,310 --> 00:03:30,750
send the cloud service provider to use

00:03:28,430 --> 00:03:33,359
hypervisors and virtual machines to

00:03:30,750 --> 00:03:34,859
access the FPGA and then integrate this

00:03:33,359 --> 00:03:37,260
into their common orchestration

00:03:34,859 --> 00:03:39,629
frameworks so for the cloud service

00:03:37,260 --> 00:03:42,329
provider the FPGA looks like any other

00:03:39,629 --> 00:03:45,810
computer resource like a gray on or a

00:03:42,329 --> 00:03:48,180
GPU or others so it which works with any

00:03:45,810 --> 00:03:51,480
cloud provider it's going to work Google

00:03:48,180 --> 00:03:53,549
Amazon yeah Microsoft does yeah everyone

00:03:51,480 --> 00:03:56,819
and you know many of those already using

00:03:53,549 --> 00:03:58,859
FPGA that scale in their data center so

00:03:56,819 --> 00:04:01,290
what are the biggest benefits for let's

00:03:58,859 --> 00:04:03,389
say an organization that has a massive

00:04:01,290 --> 00:04:05,790
amount of data coming in and come up

00:04:03,389 --> 00:04:09,299
going out what is the advantage of net

00:04:05,790 --> 00:04:12,269
PGA because of the architecture as we

00:04:09,299 --> 00:04:15,690
discussed before and the ability to in

00:04:12,269 --> 00:04:18,719
parallel execute algorithms very

00:04:15,690 --> 00:04:20,849
efficiently on that hardware they can

00:04:18,719 --> 00:04:22,070
accelerate certain workloads very very

00:04:20,849 --> 00:04:24,920
efficiency

00:04:22,070 --> 00:04:27,740
very very efficient and and that

00:04:24,920 --> 00:04:30,320
basically allows them to offload another

00:04:27,740 --> 00:04:34,040
to compute from a general-purpose device

00:04:30,320 --> 00:04:35,780
like a CPU to the FPGA and that gives

00:04:34,040 --> 00:04:37,340
them higher performance and what they

00:04:35,780 --> 00:04:40,250
often measure and this performance said

00:04:37,340 --> 00:04:43,520
petitio they get more compute at lower

00:04:40,250 --> 00:04:45,380
power hands lower cost for the data

00:04:43,520 --> 00:04:46,570
center and higher performance doesn't

00:04:45,380 --> 00:04:48,620
mean they're going to take a hit on

00:04:46,570 --> 00:04:51,110
reliability or resilience or anything

00:04:48,620 --> 00:04:55,490
like that because it's all built into

00:04:51,110 --> 00:04:59,330
the FPGA is that well as did the FPGA

00:04:55,490 --> 00:05:02,330
itself has mechanisms and ways to

00:04:59,330 --> 00:05:04,370
protect you know and to offer a

00:05:02,330 --> 00:05:06,320
resilience like any other of the devices

00:05:04,370 --> 00:05:08,780
so that's been taken care of so is this

00:05:06,320 --> 00:05:11,200
a huge move for Intel I mean is this

00:05:08,780 --> 00:05:13,730
something that's going to revolutionize

00:05:11,200 --> 00:05:16,010
a lot of what you guys are doing

00:05:13,730 --> 00:05:20,990
absolutely right when you think about

00:05:16,010 --> 00:05:23,900
the opportunity here is as we have to

00:05:20,990 --> 00:05:25,250
compute if we create any experiences

00:05:23,900 --> 00:05:26,690
they have to kiss to create more and

00:05:25,250 --> 00:05:29,120
more data and we need more and more

00:05:26,690 --> 00:05:31,190
compute to make sense out of that data

00:05:29,120 --> 00:05:34,220
and application like a Thomas driving or

00:05:31,190 --> 00:05:36,890
AI is a big one as well

00:05:34,220 --> 00:05:39,740
we believe that FPGA is will be deployed

00:05:36,890 --> 00:05:41,960
at scale in the data centers part of the

00:05:39,740 --> 00:05:43,790
hyper scale build-out and therefore it's

00:05:41,960 --> 00:05:45,350
a huge opportunity for us this has

00:05:43,790 --> 00:05:46,940
helped with Moore's law because I know

00:05:45,350 --> 00:05:49,670
you used to build faster and faster

00:05:46,940 --> 00:05:52,310
chips every year to combat Moore's law

00:05:49,670 --> 00:05:54,310
creeping up on everyone our FPGA is

00:05:52,310 --> 00:05:56,750
going to be that for large data

00:05:54,310 --> 00:05:59,210
deployment well Moore's law is going to

00:05:56,750 --> 00:06:00,740
continue and FPGAs are always built on

00:05:59,210 --> 00:06:02,360
the latest and greatest technology

00:06:00,740 --> 00:06:04,490
because we want to drive performance of

00:06:02,360 --> 00:06:06,770
we want density we want more capability

00:06:04,490 --> 00:06:08,870
so we're following and leveraging

00:06:06,770 --> 00:06:11,210
Moore's law specifically at Intel now

00:06:08,870 --> 00:06:14,290
that we're building FPGA is on Intel a

00:06:11,210 --> 00:06:18,020
process technology but when you look at

00:06:14,290 --> 00:06:19,880
the data center or the applications what

00:06:18,020 --> 00:06:23,530
you'll find is it becomes more maheno

00:06:19,880 --> 00:06:26,570
genius you have purpose-built

00:06:23,530 --> 00:06:28,610
accelerators and processing elements in

00:06:26,570 --> 00:06:31,100
there and the combination of the two

00:06:28,610 --> 00:06:33,230
will give you that boost in compute you

00:06:31,100 --> 00:06:35,660
need to enable these new experience

00:06:33,230 --> 00:06:37,730
so what tools and resources are

00:06:35,660 --> 00:06:40,340
available for developers to learn to

00:06:37,730 --> 00:06:41,200
develop and design and deploy on your

00:06:40,340 --> 00:06:44,800
PGA's

00:06:41,200 --> 00:06:47,300
so of course we continue to provide the

00:06:44,800 --> 00:06:48,860
more Hardware centric development tools

00:06:47,300 --> 00:06:50,630
for the traditional hardware engineer

00:06:48,860 --> 00:06:52,820
but increasingly software engineers want

00:06:50,630 --> 00:06:56,210
to take advantage of the fpga fpga right

00:06:52,820 --> 00:06:58,280
and for those designers we offer what we

00:06:56,210 --> 00:07:00,830
call high-level design tools like OpenCL

00:06:58,280 --> 00:07:03,590
or high level synthesis where they can

00:07:00,830 --> 00:07:05,780
program the fpga from an environment

00:07:03,590 --> 00:07:08,680
they're very used to from c c++ for

00:07:05,780 --> 00:07:11,570
example right in addition we provide

00:07:08,680 --> 00:07:14,450
enhanced libraries not FPGA in that

00:07:11,570 --> 00:07:17,930
enable libraries such as MPL and KL DNN

00:07:14,450 --> 00:07:20,330
Dahl or DB DK which traditionally target

00:07:17,930 --> 00:07:22,820
other Intel devices and we've enhanced

00:07:20,330 --> 00:07:26,080
them now to target FPGA so that the

00:07:22,820 --> 00:07:28,910
designer can now directly target PGA and

00:07:26,080 --> 00:07:30,590
because these these libraries are also

00:07:28,910 --> 00:07:33,380
being used by the higher-level

00:07:30,590 --> 00:07:37,490
frameworks for example tend to flow cafe

00:07:33,380 --> 00:07:40,580
for AI or sparkin for data analytics it

00:07:37,490 --> 00:07:43,130
can now also a target FPGA because we

00:07:40,580 --> 00:07:45,140
have enhanced the libraries and that

00:07:43,130 --> 00:07:47,840
enables a software developer to stay in

00:07:45,140 --> 00:07:49,940
there in their environment they used to

00:07:47,840 --> 00:07:52,370
programming what is the easiest way for

00:07:49,940 --> 00:07:56,090
developer to find this information is it

00:07:52,370 --> 00:07:58,670
just Google for FPGA is an Intel or yeah

00:07:56,090 --> 00:08:01,070
will go to the web and and you'll find a

00:07:58,670 --> 00:08:03,890
lot of that on our website so bernhard

00:08:01,070 --> 00:08:07,370
if we sat down next year here in San

00:08:03,890 --> 00:08:09,380
Jose and had a discussion about your

00:08:07,370 --> 00:08:13,040
journey from where you are today we've

00:08:09,380 --> 00:08:14,960
met PGA's and where you are 12 months

00:08:13,040 --> 00:08:16,490
from now what would you say you guys

00:08:14,960 --> 00:08:20,120
have accomplished in that 12 month

00:08:16,490 --> 00:08:22,910
period where's my mission in life is to

00:08:20,120 --> 00:08:27,080
put FPGA in the software developers hand

00:08:22,910 --> 00:08:29,270
and in doing so enable FPGA benefit at

00:08:27,080 --> 00:08:33,890
scale in applications like in the data

00:08:29,270 --> 00:08:37,790
center and another side so the the tools

00:08:33,890 --> 00:08:39,680
we build here the API is the libraries

00:08:37,790 --> 00:08:43,550
who build integration into frameworks

00:08:39,680 --> 00:08:45,770
and SDKs to provide an environment where

00:08:43,550 --> 00:08:46,580
a software developer can take advantage

00:08:45,770 --> 00:08:47,990
of the FPGA

00:08:46,580 --> 00:08:51,560
in an environment they're very very

00:08:47,990 --> 00:08:53,660
familiar with that is a key mission half

00:08:51,560 --> 00:08:57,440
to enable that and we will I believe

00:08:53,660 --> 00:08:59,780
that in doing so I get much more FPGA

00:08:57,440 --> 00:09:02,270
adoption in these in these environments

00:08:59,780 --> 00:09:03,830
than than before excellent we look

00:09:02,270 --> 00:09:06,790
forward to that journey okay thank you

00:09:03,830 --> 00:09:06,790
thank you Mike

00:09:12,430 --> 00:09:14,490

YouTube URL: https://www.youtube.com/watch?v=H4kqwLgI0MU


