Title: The differences between microservices and containers with Tobias Knaup (Mesosphere)
Publication date: 2017-06-27
Playlist: Velocity 2017 - San Jose, California
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:00,030 --> 00:00:03,870
hi this is Mike Hendrickson from

00:00:01,530 --> 00:00:05,759
velocity 2017 in San Jose

00:00:03,870 --> 00:00:07,799
I'm here with Toby from Mesa sure Toby

00:00:05,759 --> 00:00:10,860
how you doing and great are you so

00:00:07,799 --> 00:00:13,320
you're the co-founder what would how did

00:00:10,860 --> 00:00:16,139
you think about founding a company like

00:00:13,320 --> 00:00:18,330
mesosphere yeah well myself and my two

00:00:16,139 --> 00:00:20,670
co-founders we were the people that were

00:00:18,330 --> 00:00:23,580
building infrastructure at Airbnb and

00:00:20,670 --> 00:00:25,680
Twitter to a large web scale company and

00:00:23,580 --> 00:00:28,109
we were using an open-source software

00:00:25,680 --> 00:00:30,359
called Apache Maysles to do that and you

00:00:28,109 --> 00:00:31,650
know it was a very powerful technology

00:00:30,359 --> 00:00:34,170
had really solved a lot of problems for

00:00:31,650 --> 00:00:36,480
us so we thought you know let's start a

00:00:34,170 --> 00:00:38,489
company around this and package it turn

00:00:36,480 --> 00:00:40,530
it into a product that many other

00:00:38,489 --> 00:00:42,719
companies can use as well as well and so

00:00:40,530 --> 00:00:45,180
containers have kind of exploded and

00:00:42,719 --> 00:00:49,200
they're really hot right now

00:00:45,180 --> 00:00:52,379
but do they present trouble or potential

00:00:49,200 --> 00:00:54,870
challenges for technology people right

00:00:52,379 --> 00:00:58,440
yeah so containers have really started

00:00:54,870 --> 00:01:00,390
on developers laptops right we have

00:00:58,440 --> 00:01:02,280
great tools for building containers on

00:01:00,390 --> 00:01:05,070
our laptops or packaging any application

00:01:02,280 --> 00:01:06,750
into a container the challenges are

00:01:05,070 --> 00:01:08,040
really when you put them in production

00:01:06,750 --> 00:01:10,409
and it's no different than any other

00:01:08,040 --> 00:01:12,360
production software you need to make

00:01:10,409 --> 00:01:14,280
sure that the platform that you're

00:01:12,360 --> 00:01:17,670
running the containers on is highly

00:01:14,280 --> 00:01:20,250
available the gut doesn't go down that

00:01:17,670 --> 00:01:22,680
you monitor things the right way that

00:01:20,250 --> 00:01:24,150
you get the right access to the logs and

00:01:22,680 --> 00:01:28,170
you have troubleshooting tools available

00:01:24,150 --> 00:01:30,119
to you so containers really change how

00:01:28,170 --> 00:01:32,369
we use these tools right a lot of the

00:01:30,119 --> 00:01:35,280
monitoring tools for example have been

00:01:32,369 --> 00:01:38,490
built prior to cloud so the very machine

00:01:35,280 --> 00:01:40,290
centric whereas containers really create

00:01:38,490 --> 00:01:42,150
this this abstraction that is more

00:01:40,290 --> 00:01:44,100
application centric so a lot of the

00:01:42,150 --> 00:01:45,479
tools don't really work that well and we

00:01:44,100 --> 00:01:48,630
need to rethink how some of these

00:01:45,479 --> 00:01:51,329
operational tools work other challenges

00:01:48,630 --> 00:01:54,119
you know containers are great for for

00:01:51,329 --> 00:01:56,310
packaging applications for running 12

00:01:54,119 --> 00:01:57,960
factor abs but these twelve factor abs

00:01:56,310 --> 00:02:00,570
the stateless 12 factor apps also need

00:01:57,960 --> 00:02:02,909
to connect to databases to backing

00:02:00,570 --> 00:02:04,619
services and so another challenge is how

00:02:02,909 --> 00:02:07,200
do you run these backing services in the

00:02:04,619 --> 00:02:08,119
container world so micro services in

00:02:07,200 --> 00:02:13,010
container

00:02:08,119 --> 00:02:15,980
are they synonymous or do people put

00:02:13,010 --> 00:02:18,140
them together artificially or they're

00:02:15,980 --> 00:02:19,220
not dependent on each other but yeah

00:02:18,140 --> 00:02:20,690
they're not they're not dependent on

00:02:19,220 --> 00:02:23,080
each other but they often get used

00:02:20,690 --> 00:02:26,150
together because containers really make

00:02:23,080 --> 00:02:28,370
micro-services very easy but you can do

00:02:26,150 --> 00:02:31,250
them independently too so a lot of folks

00:02:28,370 --> 00:02:34,010
also take you know legacy three-tier

00:02:31,250 --> 00:02:36,680
enterprise applications you know like a

00:02:34,010 --> 00:02:38,750
tomcat application server put that in a

00:02:36,680 --> 00:02:40,820
container and run it so you know they're

00:02:38,750 --> 00:02:42,380
often used together but they're not you

00:02:40,820 --> 00:02:46,459
know married together and then there's

00:02:42,380 --> 00:02:48,920
the you add in cloud and cloud native is

00:02:46,459 --> 00:02:52,130
that another piece to this larger puzzle

00:02:48,920 --> 00:02:55,040
yes a cloud native really expresses how

00:02:52,130 --> 00:02:56,870
the largest web companies have built the

00:02:55,040 --> 00:02:59,540
infrastructure and how they've optimized

00:02:56,870 --> 00:03:02,290
it for fast innovation and fast

00:02:59,540 --> 00:03:04,820
iteration so cloud native really means

00:03:02,290 --> 00:03:06,890
getting all that your software stack

00:03:04,820 --> 00:03:09,410
ready for your development teams your

00:03:06,890 --> 00:03:11,780
product teams to put out software

00:03:09,410 --> 00:03:13,310
quickly to deploy so to deploy quickly -

00:03:11,780 --> 00:03:15,380
and and this is really something that

00:03:13,310 --> 00:03:17,239
every enterprise every company any

00:03:15,380 --> 00:03:20,360
industry should care about right how can

00:03:17,239 --> 00:03:23,080
i deploy software daily until twice a

00:03:20,360 --> 00:03:25,940
year and how do I make it so a deploy is

00:03:23,080 --> 00:03:28,190
happens in seconds instead of hours how

00:03:25,940 --> 00:03:29,989
do I make it so deploys are not scary

00:03:28,190 --> 00:03:31,790
things but they're actually you know

00:03:29,989 --> 00:03:33,860
things I enjoy I want to get my code out

00:03:31,790 --> 00:03:35,330
faster because that's how I can test

00:03:33,860 --> 00:03:37,310
things with you there's fast and iterate

00:03:35,330 --> 00:03:39,799
on the product faster and so cloud

00:03:37,310 --> 00:03:41,480
native it's really a way of designing

00:03:39,799 --> 00:03:43,820
infrastructure to enable this past

00:03:41,480 --> 00:03:46,209
iteration and so what are the inherent

00:03:43,820 --> 00:03:49,519
risks when when someone is looking at

00:03:46,209 --> 00:03:52,519
delivering a cloud native app on a

00:03:49,519 --> 00:03:55,489
continuous deployment basis and then

00:03:52,519 --> 00:03:57,260
what are also the opportunities yeah so

00:03:55,489 --> 00:03:58,670
so the risks of course are you know

00:03:57,260 --> 00:04:02,209
you're making changes to your production

00:03:58,670 --> 00:04:04,540
infrastructure very often so you want to

00:04:02,209 --> 00:04:07,700
make sure that that these changes are

00:04:04,540 --> 00:04:09,470
sort of minimal and controlled and and

00:04:07,700 --> 00:04:11,840
you know container platforms like these

00:04:09,470 --> 00:04:14,269
really provide the tools and an

00:04:11,840 --> 00:04:15,200
abstraction workflows like continuous

00:04:14,269 --> 00:04:16,940
integration and continuous deployment

00:04:15,200 --> 00:04:19,400
provide the right tools so that these

00:04:16,940 --> 00:04:21,500
things are low risk so you run all the

00:04:19,400 --> 00:04:25,040
tests before things go out you

00:04:21,500 --> 00:04:26,210
do Bluegreen deployments to start you

00:04:25,040 --> 00:04:27,830
know your new version of your app in

00:04:26,210 --> 00:04:29,960
parallel to the old one so you have a

00:04:27,830 --> 00:04:32,390
way to rollback so it's really important

00:04:29,960 --> 00:04:34,310
to use these tools to kind of de risk it

00:04:32,390 --> 00:04:36,050
and the opportunities are really it

00:04:34,310 --> 00:04:38,180
encourages innovation right and

00:04:36,050 --> 00:04:40,100
encourages your developers to put things

00:04:38,180 --> 00:04:42,410
out there faster and tested with real

00:04:40,100 --> 00:04:44,810
users to get feedback from those real

00:04:42,410 --> 00:04:46,550
users earlier and that's how the big web

00:04:44,810 --> 00:04:48,770
companies like Facebook and Twitter and

00:04:46,550 --> 00:04:50,690
Airbnb are testing new features and are

00:04:48,770 --> 00:04:52,880
iterating fast well so and those big

00:04:50,690 --> 00:04:56,510
companies are also using something

00:04:52,880 --> 00:04:59,480
that's or wanting to be involved with

00:04:56,510 --> 00:05:02,380
real time and streaming data because

00:04:59,480 --> 00:05:05,540
everyone today wants to be relevant and

00:05:02,380 --> 00:05:09,050
at the moment so how did how do

00:05:05,540 --> 00:05:10,460
containers and how do micro services and

00:05:09,050 --> 00:05:14,570
everything work together and cloud

00:05:10,460 --> 00:05:17,419
native with the the need for we go up to

00:05:14,570 --> 00:05:19,850
date streaming data right so some

00:05:17,419 --> 00:05:21,740
collecting and making sense and

00:05:19,850 --> 00:05:24,050
analyzing the data it's one of the most

00:05:21,740 --> 00:05:27,229
important things that any company has to

00:05:24,050 --> 00:05:28,700
do it it's often the data in a company

00:05:27,229 --> 00:05:31,280
is the main piece of intellectual

00:05:28,700 --> 00:05:33,050
property right whether you're your

00:05:31,280 --> 00:05:36,860
search company that uses that data to

00:05:33,050 --> 00:05:38,240
show ad or you're an IOT company that's

00:05:36,860 --> 00:05:39,620
learning from all the devices in the

00:05:38,240 --> 00:05:41,780
sensors and using that to make the

00:05:39,620 --> 00:05:45,350
product better the data is really where

00:05:41,780 --> 00:05:47,450
it's at so to collect data in real time

00:05:45,350 --> 00:05:49,640
and analyze it in real time and get

00:05:47,450 --> 00:05:51,919
insights in real time you really need to

00:05:49,640 --> 00:05:53,390
run a lot of infrastructure the smack

00:05:51,919 --> 00:05:56,240
stack is a pattern that's becoming

00:05:53,390 --> 00:05:59,090
popular there stands for spark mezzos

00:05:56,240 --> 00:06:00,979
occur Cassandra and Kafka so Kafka is a

00:05:59,090 --> 00:06:03,140
message queue to ingest data in real

00:06:00,979 --> 00:06:05,450
time spark to processes Cassandra to

00:06:03,140 --> 00:06:08,900
store it acha to build applications and

00:06:05,450 --> 00:06:11,030
show that data back to the user now

00:06:08,900 --> 00:06:12,350
these are all fairly complex

00:06:11,030 --> 00:06:15,020
infrastructure pieces they're

00:06:12,350 --> 00:06:17,450
distributed systems so setting them up

00:06:15,020 --> 00:06:19,070
operating them upgrading them making

00:06:17,450 --> 00:06:21,740
them highly available all the operations

00:06:19,070 --> 00:06:23,900
around it it's pretty involved and and

00:06:21,740 --> 00:06:26,720
so if you take the traditional IT model

00:06:23,900 --> 00:06:27,830
off one app per server and training

00:06:26,720 --> 00:06:30,440
people for each one of those

00:06:27,830 --> 00:06:32,360
technologies it's very ineffective rated

00:06:30,440 --> 00:06:33,710
you have it's hard to find the talent to

00:06:32,360 --> 00:06:36,710
operate these things

00:06:33,710 --> 00:06:38,030
if you put them on into silos on

00:06:36,710 --> 00:06:39,800
different servers you're also wasting a

00:06:38,030 --> 00:06:41,330
lot of resources also a public cloud

00:06:39,800 --> 00:06:42,500
would be a better solution or public

00:06:41,330 --> 00:06:45,380
cloud would be a better solution it

00:06:42,500 --> 00:06:47,270
makes that really easy because the

00:06:45,380 --> 00:06:49,640
public cloud automates the operations of

00:06:47,270 --> 00:06:50,870
these complicated software but there

00:06:49,640 --> 00:06:52,460
could be some risks with that there are

00:06:50,870 --> 00:06:53,900
some risks exactly so if you're using

00:06:52,460 --> 00:06:56,630
them on a public cloud they're often

00:06:53,900 --> 00:06:58,490
behind proprietary API and so if you do

00:06:56,630 --> 00:07:01,280
that you end up locking yourself into

00:06:58,490 --> 00:07:02,900
one particular cloud provider and and

00:07:01,280 --> 00:07:05,810
that's a very you've got to be careful

00:07:02,900 --> 00:07:08,570
with that you know and you know a lot of

00:07:05,810 --> 00:07:11,270
CIOs and CTOs I talk to the majority of

00:07:08,570 --> 00:07:13,010
them pick a hybrid cloud model to

00:07:11,270 --> 00:07:16,220
architect and and so if you're locking

00:07:13,010 --> 00:07:18,320
yourself into one cloud at the level of

00:07:16,220 --> 00:07:20,360
the databases and the message shoes that

00:07:18,320 --> 00:07:22,130
you using that means your application is

00:07:20,360 --> 00:07:24,230
no longer portable so if you want to go

00:07:22,130 --> 00:07:25,850
to a different cloud provider because it

00:07:24,230 --> 00:07:27,830
has better performance or you want to

00:07:25,850 --> 00:07:29,450
also leverage your data center you have

00:07:27,830 --> 00:07:33,320
to be architects it's not truly portable

00:07:29,450 --> 00:07:36,230
so platforms like DCOs provides truly

00:07:33,320 --> 00:07:37,850
portable data services DCOs takes

00:07:36,230 --> 00:07:40,490
leaving open source and commercial

00:07:37,850 --> 00:07:42,620
software like Cassandra Acosta and their

00:07:40,490 --> 00:07:44,330
commercial versions and automates the

00:07:42,620 --> 00:07:46,130
operations of it the same way that a

00:07:44,330 --> 00:07:49,460
public cloud does it so it's kind of the

00:07:46,130 --> 00:07:51,290
public cloud secret sauce but it's

00:07:49,460 --> 00:07:52,610
available to you on any infrastructure

00:07:51,290 --> 00:07:54,710
whether you actually want to run it on a

00:07:52,610 --> 00:07:56,480
public cloud or on bare metal in the

00:07:54,710 --> 00:07:59,600
data and is there a public version of

00:07:56,480 --> 00:08:01,550
DCOs and a enterprise edition of DCOs or

00:07:59,600 --> 00:08:03,290
how does that work that's right so so

00:08:01,550 --> 00:08:05,900
you know we were born out of open source

00:08:03,290 --> 00:08:07,520
Apache measles and so we have an open

00:08:05,900 --> 00:08:10,070
core model there is a open source

00:08:07,520 --> 00:08:12,320
version of DCF that anybody can use and

00:08:10,070 --> 00:08:14,630
run anywhere minutes also an Enterprise

00:08:12,320 --> 00:08:17,330
version which adds more features that

00:08:14,630 --> 00:08:19,160
enterprises need to go to production and

00:08:17,330 --> 00:08:19,880
middle tier provides commercial support

00:08:19,160 --> 00:08:21,890
for that as well

00:08:19,880 --> 00:08:23,360
so Toby if you and I sit down twelve

00:08:21,890 --> 00:08:26,060
months from now and have the same

00:08:23,360 --> 00:08:28,370
conversation next year there's nine what

00:08:26,060 --> 00:08:31,970
would you like to say changes for Mesa

00:08:28,370 --> 00:08:33,580
sphere in those 12 months yeah so what

00:08:31,970 --> 00:08:37,040
makes us fear is really focused on is

00:08:33,580 --> 00:08:39,790
bringing customers a public cloud like

00:08:37,040 --> 00:08:42,500
experience on any infrastructure and

00:08:39,790 --> 00:08:45,050
with choice of workloads from an open

00:08:42,500 --> 00:08:47,450
ecosystem so what we're focused on is

00:08:45,050 --> 00:08:50,600
bringing customers more databases

00:08:47,450 --> 00:08:52,880
message queues more big data tools to DC

00:08:50,600 --> 00:08:55,760
us we really think it's a platform for

00:08:52,880 --> 00:08:57,500
running legacy apps today's apps and

00:08:55,760 --> 00:09:00,620
even tomorrow's apps

00:08:57,500 --> 00:09:02,300
so to give you an example server less or

00:09:00,620 --> 00:09:03,770
function based programming is something

00:09:02,300 --> 00:09:06,290
that's that's picking up in a lot of

00:09:03,770 --> 00:09:08,030
places and again you need to run a lot

00:09:06,290 --> 00:09:10,130
of infrastructure for that the public

00:09:08,030 --> 00:09:12,140
clouds make that really easy but what

00:09:10,130 --> 00:09:14,300
about other infrastructures and so we

00:09:12,140 --> 00:09:16,670
already have in the DCF App Store you

00:09:14,300 --> 00:09:18,920
know two products from from other

00:09:16,670 --> 00:09:20,810
vendors that allow you to do function

00:09:18,920 --> 00:09:23,870
based programming so a lot more of these

00:09:20,810 --> 00:09:26,420
things and also a lot more its

00:09:23,870 --> 00:09:27,830
investment from mesosphere to make all

00:09:26,420 --> 00:09:30,350
of this work in a hybrid cloud

00:09:27,830 --> 00:09:33,800
environment so it sounds like DCOs

00:09:30,350 --> 00:09:36,170
lets me scale up and scale out is that a

00:09:33,800 --> 00:09:38,810
fair description I think that's fair to

00:09:36,170 --> 00:09:41,240
say yeah I think one of the big

00:09:38,810 --> 00:09:44,420
advantages of a cluster manager like VCS

00:09:41,240 --> 00:09:46,580
is it's very easy to scale elastically

00:09:44,420 --> 00:09:48,680
so especially with workloads that are

00:09:46,580 --> 00:09:51,050
very spiky and everybody has those no

00:09:48,680 --> 00:09:52,880
data processing jobs we talked about

00:09:51,050 --> 00:09:54,350
streaming data you might have more data

00:09:52,880 --> 00:09:56,180
flowing in at different times of the day

00:09:54,350 --> 00:09:58,130
than other times so you need to be able

00:09:56,180 --> 00:10:01,250
to elastically scale workloads up and

00:09:58,130 --> 00:10:01,610
down and VCS really all automates that

00:10:01,250 --> 00:10:03,080
nicely

00:10:01,610 --> 00:10:06,400
excellent till we look for that

00:10:03,080 --> 00:10:06,400
conversation thank you very much

00:10:12,450 --> 00:10:14,510

YouTube URL: https://www.youtube.com/watch?v=_mSkZ3NV7bg


