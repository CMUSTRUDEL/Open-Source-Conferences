Title: Indexing code for smarter applications with Tal Weiss (OverOps)
Publication date: 2017-06-27
Playlist: Velocity 2017 - San Jose, California
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:00,089 --> 00:00:03,990
hi this is Mike Henderson from velocity

00:00:02,250 --> 00:00:05,609
and fluent in San Jose I'm here with

00:00:03,990 --> 00:00:09,540
towel from over ups how are you doing

00:00:05,609 --> 00:00:11,460
Mike good to meet you so over ops for

00:00:09,540 --> 00:00:13,860
those out there that don't know what

00:00:11,460 --> 00:00:16,529
over ops is can you give us a high level

00:00:13,860 --> 00:00:19,380
pitch what it is for sure what Rob's

00:00:16,529 --> 00:00:21,840
those coming in to win where and why

00:00:19,380 --> 00:00:23,880
their code breaks and production we've

00:00:21,840 --> 00:00:28,099
helped more than 250 companies come in

00:00:23,880 --> 00:00:30,359
like Comcast Fox Kaiser Permanente Zynga

00:00:28,099 --> 00:00:32,579
dramatically reduced the time it takes

00:00:30,359 --> 00:00:35,100
them to detect and fix critical issues

00:00:32,579 --> 00:00:36,989
in production by an order of magnitude

00:00:35,100 --> 00:00:39,239
we hope them that we hope their

00:00:36,989 --> 00:00:41,550
developers be more efficient and help

00:00:39,239 --> 00:00:43,860
them deliver better more stable reliable

00:00:41,550 --> 00:00:46,350
applications and bring them to market

00:00:43,860 --> 00:00:50,340
much faster so if companies want to be

00:00:46,350 --> 00:00:53,100
on this whole CI CD plan to continually

00:00:50,340 --> 00:00:55,469
integrate and continually deliver they

00:00:53,100 --> 00:00:57,750
need you guys at the front in production

00:00:55,469 --> 00:00:59,579
or the before production they need it in

00:00:57,750 --> 00:01:01,710
dev and then all the way through

00:00:59,579 --> 00:01:04,769
production or where are you guys most

00:01:01,710 --> 00:01:06,960
needed in an organization both staging

00:01:04,769 --> 00:01:09,540
and production here's why the whole

00:01:06,960 --> 00:01:11,760
notion behind CI CD is get better

00:01:09,540 --> 00:01:13,799
software to the market faster innovate

00:01:11,760 --> 00:01:15,840
more quickly get the cutting-edge you

00:01:13,799 --> 00:01:17,310
know in all companies today they want to

00:01:15,840 --> 00:01:19,320
digitally transform themselves and if

00:01:17,310 --> 00:01:21,119
you software powerhouses but one of the

00:01:19,320 --> 00:01:23,070
biggest things that it's preventing them

00:01:21,119 --> 00:01:24,509
from doing so is the fact that when you

00:01:23,070 --> 00:01:25,380
change things quickly when you deploy

00:01:24,509 --> 00:01:28,229
things quickly

00:01:25,380 --> 00:01:30,000
the chances of things breaking increase

00:01:28,229 --> 00:01:31,439
exponentially all right little rafts

00:01:30,000 --> 00:01:33,689
comes in gives you that security blanket

00:01:31,439 --> 00:01:36,180
that you know that if something does

00:01:33,689 --> 00:01:37,799
break in staging or production you will

00:01:36,180 --> 00:01:39,329
be the first one to know the right

00:01:37,799 --> 00:01:41,100
developer within your organization will

00:01:39,329 --> 00:01:42,899
be the right person will be the first

00:01:41,100 --> 00:01:44,490
person know and they will have all the

00:01:42,899 --> 00:01:45,840
information they will need the source

00:01:44,490 --> 00:01:47,310
code the variable state debug level

00:01:45,840 --> 00:01:48,750
awesome je viens that everything that

00:01:47,310 --> 00:01:50,700
the dopa will ever need to reproduce

00:01:48,750 --> 00:01:53,430
that issue since I'm having to spend

00:01:50,700 --> 00:01:55,409
days or weeks so that issue being

00:01:53,430 --> 00:01:58,409
undetected having customers complain

00:01:55,409 --> 00:02:00,420
about it churn and a hole fire drill

00:01:58,409 --> 00:02:02,460
reducing that time from days and weeks

00:02:00,420 --> 00:02:03,750
down to hours a minute and that is

00:02:02,460 --> 00:02:04,860
something that truly enables and

00:02:03,750 --> 00:02:07,259
empowers CI MCD

00:02:04,860 --> 00:02:09,270
okay so I get the days and weeks down to

00:02:07,259 --> 00:02:11,700
minutes and and and the speed that we

00:02:09,270 --> 00:02:12,250
can deliver our software now but what

00:02:11,700 --> 00:02:14,710
about

00:02:12,250 --> 00:02:16,750
as systems become more complex you know

00:02:14,710 --> 00:02:18,580
we're throwing in containers and

00:02:16,750 --> 00:02:20,050
microservices and we're throwing in all

00:02:18,580 --> 00:02:24,280
this stuff and we still want to deliver

00:02:20,050 --> 00:02:27,250
it on time and correct to our audience

00:02:24,280 --> 00:02:30,070
so our market our purchasers our

00:02:27,250 --> 00:02:33,150
customers so how with the complexity

00:02:30,070 --> 00:02:35,470
where does an engineering leader start

00:02:33,150 --> 00:02:37,330
that's so true it's a three dimensional

00:02:35,470 --> 00:02:40,690
problem on one hand you're expected to

00:02:37,330 --> 00:02:41,680
deliver more software keep the highest

00:02:40,690 --> 00:02:45,010
levels of reliability and functionality

00:02:41,680 --> 00:02:47,680
and scale it it's a huge test that

00:02:45,010 --> 00:02:49,360
energy manage the complexity exactly the

00:02:47,680 --> 00:02:51,220
engineering leaders need to deal with

00:02:49,360 --> 00:02:54,040
and deposit all these applications and

00:02:51,220 --> 00:02:56,500
production stick they emit tremendous

00:02:54,040 --> 00:02:59,020
amounts of data log files that have

00:02:56,500 --> 00:03:00,190
looked exactly the same like if they

00:02:59,020 --> 00:03:03,970
were coming from an application that's

00:03:00,190 --> 00:03:06,310
25 years old now just you know flooding

00:03:03,970 --> 00:03:08,080
the system with petabytes terabytes

00:03:06,310 --> 00:03:09,730
gigabytes a gigabytes of data that's

00:03:08,080 --> 00:03:11,590
unstructured complex the index and

00:03:09,730 --> 00:03:13,570
context to analyze and that's really

00:03:11,590 --> 00:03:16,690
where all rocks can help because you try

00:03:13,570 --> 00:03:18,519
instead of trying to index these massive

00:03:16,690 --> 00:03:20,440
amounts of log files or rocks actually

00:03:18,519 --> 00:03:23,140
mixes the code into DNA of their

00:03:20,440 --> 00:03:25,570
application even the data application

00:03:23,140 --> 00:03:27,940
becomes more complex distributed

00:03:25,570 --> 00:03:30,070
containerized over ops enables you to

00:03:27,940 --> 00:03:31,989
really make sense to make sense out of

00:03:30,070 --> 00:03:33,670
it so when it breaks into explicit

00:03:31,989 --> 00:03:35,709
occasion it's this code it's this

00:03:33,670 --> 00:03:37,900
variable if this can can this is what

00:03:35,709 --> 00:03:41,130
caused it so it becomes proactive

00:03:37,900 --> 00:03:43,660
applications become smarter and more

00:03:41,130 --> 00:03:47,200
proactive into you that word in telling

00:03:43,660 --> 00:03:49,840
you where when and why they broke versus

00:03:47,200 --> 00:03:51,700
you having to take data from thousands

00:03:49,840 --> 00:03:54,160
of containers log data and have your

00:03:51,700 --> 00:03:56,680
developers sift regex and parse through

00:03:54,160 --> 00:03:59,290
that manually so you have some sort of

00:03:56,680 --> 00:04:00,610
predictive like it broke here before we

00:03:59,290 --> 00:04:01,030
can tell that you're going to break

00:04:00,610 --> 00:04:03,579
again

00:04:01,030 --> 00:04:05,110
is there a predictive nature - there is

00:04:03,579 --> 00:04:06,850
see the thing is and that guy kind of

00:04:05,110 --> 00:04:08,650
alluded to that you think about if you

00:04:06,850 --> 00:04:10,720
know olaf's almost like you know in

00:04:08,650 --> 00:04:13,360
healthcare we talked about talk a lot

00:04:10,720 --> 00:04:14,799
about like biological medicine relative

00:04:13,360 --> 00:04:16,660
measures exactly the kind of analyzes

00:04:14,799 --> 00:04:18,519
your DNA and Al Jarreau that is able to

00:04:16,660 --> 00:04:20,830
kind of optimize your body we do the

00:04:18,519 --> 00:04:23,860
same thing code is the DNA of in the

00:04:20,830 --> 00:04:25,750
application we analyze we complete

00:04:23,860 --> 00:04:28,450
understand when we

00:04:25,750 --> 00:04:30,640
err why and what applications are

00:04:28,450 --> 00:04:33,910
emitting and we're able to optimize it

00:04:30,640 --> 00:04:35,200
make sense of it in real time we can

00:04:33,910 --> 00:04:37,990
sell exactly this is what's happening

00:04:35,200 --> 00:04:39,280
this is what's breaking this is why it's

00:04:37,990 --> 00:04:41,200
doing it in here's all the information

00:04:39,280 --> 00:04:43,180
that you need to know and this is how

00:04:41,200 --> 00:04:45,460
we're helping our customers become much

00:04:43,180 --> 00:04:48,070
more proactive so you can track all the

00:04:45,460 --> 00:04:50,200
dependencies and things like that that

00:04:48,070 --> 00:04:52,330
if one breaks all of them are going to

00:04:50,200 --> 00:04:54,580
break so that's you bring an insight to

00:04:52,330 --> 00:04:58,300
developers quickly but how can

00:04:54,580 --> 00:05:01,390
developers continue to develop as quick

00:04:58,300 --> 00:05:04,600
as we need as reliable as we need and

00:05:01,390 --> 00:05:07,140
there's complexes all there distributed

00:05:04,600 --> 00:05:09,370
systems are how do they continue to

00:05:07,140 --> 00:05:11,500
accelerate that even more and more and

00:05:09,370 --> 00:05:14,140
more with the use of a tool like over

00:05:11,500 --> 00:05:17,830
ups I think generally speaking it all

00:05:14,140 --> 00:05:18,940
goes to automation the only way because

00:05:17,830 --> 00:05:20,800
you're not gonna you're going to get a

00:05:18,940 --> 00:05:22,720
hundred times more software but in the

00:05:20,800 --> 00:05:24,370
reality we live in for come you say you

00:05:22,720 --> 00:05:25,810
were going to 100x you know the amount

00:05:24,370 --> 00:05:27,970
of engineers that you have that's not

00:05:25,810 --> 00:05:30,610
realistic most that companies can even

00:05:27,970 --> 00:05:33,460
like filling large either hiring backlog

00:05:30,610 --> 00:05:36,250
for engineers actually so automation how

00:05:33,460 --> 00:05:38,410
can we automate the process detecting

00:05:36,250 --> 00:05:40,990
when software breaks how can automate

00:05:38,410 --> 00:05:42,910
the process of capturing the state how

00:05:40,990 --> 00:05:45,040
can use technologies like chat box

00:05:42,910 --> 00:05:46,240
essentially to automate against the

00:05:45,040 --> 00:05:47,830
possibly which we communicate with

00:05:46,240 --> 00:05:49,660
developers something here this is what

00:05:47,830 --> 00:05:51,400
you need to know click this to see

00:05:49,660 --> 00:05:53,470
everything that you need in order to be

00:05:51,400 --> 00:05:55,180
able to reproduce an issue and how do

00:05:53,470 --> 00:05:57,370
you automate the part of verification

00:05:55,180 --> 00:05:59,229
and once that fix is actually released

00:05:57,370 --> 00:06:01,600
and shipped it never happens again and

00:05:59,229 --> 00:06:03,900
this is what over UPS does it automates

00:06:01,600 --> 00:06:07,360
the positive detection state capture

00:06:03,900 --> 00:06:09,970
reproduction routing and verification of

00:06:07,360 --> 00:06:12,610
issues as they occur in staging and

00:06:09,970 --> 00:06:15,000
production in real time and is that the

00:06:12,610 --> 00:06:17,320
future I mean it almost sounds like the

00:06:15,000 --> 00:06:21,400
software developers so need to be in a

00:06:17,320 --> 00:06:25,000
loop I mean I know they do for now but

00:06:21,400 --> 00:06:27,220
is there a future where that we're fully

00:06:25,000 --> 00:06:29,140
automated I don't know about that that's

00:06:27,220 --> 00:06:30,820
too far away for us to see but I would

00:06:29,140 --> 00:06:33,580
like to see a future where developers

00:06:30,820 --> 00:06:35,229
focus their time on writing code versus

00:06:33,580 --> 00:06:36,669
troubleshooting and debugging it I think

00:06:35,229 --> 00:06:39,010
that's the future we could all agree on

00:06:36,669 --> 00:06:39,520
as some that we want so deploying and

00:06:39,010 --> 00:06:42,699
testing

00:06:39,520 --> 00:06:45,009
could be shortened for sure and we're

00:06:42,699 --> 00:06:46,599
seeing that we're single deployment and

00:06:45,009 --> 00:06:48,250
testing those areas having

00:06:46,599 --> 00:06:50,229
revolutionised you know over the last

00:06:48,250 --> 00:06:51,759
few years and now we're taking that same

00:06:50,229 --> 00:06:53,919
level of kind of revolution into

00:06:51,759 --> 00:06:56,500
production environment where the stakes

00:06:53,919 --> 00:06:57,970
are much higher when it's on real time

00:06:56,500 --> 00:06:59,979
it's all customer-facing

00:06:57,970 --> 00:07:02,770
if we can bring those kinds of tools

00:06:59,979 --> 00:07:04,150
that we see in those earlier phases of

00:07:02,770 --> 00:07:05,949
the development process and lead them

00:07:04,150 --> 00:07:08,550
all the way to production overall smooth

00:07:05,949 --> 00:07:11,289
makes it unique it's it's ability to

00:07:08,550 --> 00:07:13,659
operate and run in these environments at

00:07:11,289 --> 00:07:15,039
very marginal performance overhead so we

00:07:13,659 --> 00:07:16,930
can run out sub-1 CPU performance

00:07:15,039 --> 00:07:19,000
overhead and environments that have

00:07:16,930 --> 00:07:20,770
thousands of nodes and processing

00:07:19,000 --> 00:07:22,750
millions in our customers process tens

00:07:20,770 --> 00:07:24,310
of billions of requests every day so

00:07:22,750 --> 00:07:26,919
we're able to bring that innovation

00:07:24,310 --> 00:07:29,319
that's so far has been confined to div

00:07:26,919 --> 00:07:30,969
and testing to now staging a full-blown

00:07:29,319 --> 00:07:32,800
production and that enables companies to

00:07:30,969 --> 00:07:34,449
know they are secure and safe and

00:07:32,800 --> 00:07:37,719
delivering better softly to the market

00:07:34,449 --> 00:07:41,740
faster so if we have this conversation

00:07:37,719 --> 00:07:44,080
next year even and what would you like

00:07:41,740 --> 00:07:46,380
to see over ops doing so twelve months

00:07:44,080 --> 00:07:48,639
from now you and I sit down in San Jose

00:07:46,380 --> 00:07:51,819
what are you going to tell me over UPS

00:07:48,639 --> 00:07:55,479
has achieved in that 12-month period so

00:07:51,819 --> 00:07:56,830
first of all that's a date very and what

00:07:55,479 --> 00:08:00,279
we will do what we'll be talking about

00:07:56,830 --> 00:08:01,539
is really three things a is just you

00:08:00,279 --> 00:08:02,919
know the first one just like we'll be

00:08:01,539 --> 00:08:04,990
adding more coverage for programming

00:08:02,919 --> 00:08:07,690
languages no language is like dotnet

00:08:04,990 --> 00:08:09,819
that we're releasing this fall language

00:08:07,690 --> 00:08:12,039
like no J's so giving more access to

00:08:09,819 --> 00:08:14,080
more developers who are tools that's the

00:08:12,039 --> 00:08:16,330
first one the second one the tool is

00:08:14,080 --> 00:08:18,090
just getting stronger or better every

00:08:16,330 --> 00:08:20,259
week every month and every quarter

00:08:18,090 --> 00:08:22,479
amazing features builder anomaly

00:08:20,259 --> 00:08:24,719
detection on distributed workflows that

00:08:22,479 --> 00:08:27,340
really go to the crux of the issues that

00:08:24,719 --> 00:08:29,020
pain developers and engineering teams

00:08:27,340 --> 00:08:30,940
that are the kind of it another cutting

00:08:29,020 --> 00:08:33,039
edge of technology and beyond that you

00:08:30,940 --> 00:08:34,450
know I think and this is something I'm

00:08:33,039 --> 00:08:36,640
just going to tease at this point and

00:08:34,450 --> 00:08:37,990
next you will be talking about is taking

00:08:36,640 --> 00:08:41,260
even one step further and saying you

00:08:37,990 --> 00:08:43,390
know it if log data to this day let's

00:08:41,260 --> 00:08:44,740
take the lifeblood of every mission

00:08:43,390 --> 00:08:49,779
critical application in the world today

00:08:44,740 --> 00:08:51,430
is 25 25 years later still plain text

00:08:49,779 --> 00:08:53,230
files are unstructured and complex the

00:08:51,430 --> 00:08:55,150
index next place the allies and our

00:08:53,230 --> 00:08:57,160
something if you don't want to be

00:08:55,150 --> 00:09:00,100
spending half your day staring app and

00:08:57,160 --> 00:09:01,480
unfortunately probably hundreds of

00:09:00,100 --> 00:09:03,850
thousand millions of Engineers worldwide

00:09:01,480 --> 00:09:06,490
ooh what can we do to essentially take

00:09:03,850 --> 00:09:09,520
the optimized data transform the unlined

00:09:06,490 --> 00:09:11,530
fabric of log data to make it 10x more

00:09:09,520 --> 00:09:13,360
cost-efficient a hundred times more

00:09:11,530 --> 00:09:15,040
intelligent and a thousand times faster

00:09:13,360 --> 00:09:16,810
so I think that's one topic that we'll

00:09:15,040 --> 00:09:18,220
be talking about here next year

00:09:16,810 --> 00:09:22,080
excellent we look forward to that

00:09:18,220 --> 00:09:22,080
conversation get to me all right Cheers

00:09:28,070 --> 00:09:30,130

YouTube URL: https://www.youtube.com/watch?v=4osoKZXzSik


