Title: Removing engineering friction: Creating an evolutionary culture - Phillip Liu (SignalFx)
Publication date: 2017-06-23
Playlist: Velocity 2017 - San Jose, California
Description: 
	Phillip Liu explores the one thing that has become a driver of ever better engineering: constant removal of friction for engineers to not only build and ship code but also understand how code is used and how it works and operates. The end result is a culture that promotes many possible ways to address given challenges and surfaces novel approaches, which may have never arisen otherwise.


Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:02,400 --> 00:00:06,040
see this is titled my slide obviously

00:00:05,080 --> 00:00:07,480
it's going to take a lot longer than

00:00:06,040 --> 00:00:09,730
five minutes to go over so I'd like to

00:00:07,480 --> 00:00:11,980
first start a conversation and then I

00:00:09,730 --> 00:00:13,660
hope hopefully shed a little bit of

00:00:11,980 --> 00:00:17,679
light about how we as signal effects

00:00:13,660 --> 00:00:20,019
perform engineering and so first of all

00:00:17,679 --> 00:00:21,550
I think I could see if I block out the

00:00:20,019 --> 00:00:24,449
light you kind of get a raise of hands

00:00:21,550 --> 00:00:27,429
how many of you who either work in an

00:00:24,449 --> 00:00:30,730
organization that provide a fads or

00:00:27,429 --> 00:00:35,440
online service or uses online service as

00:00:30,730 --> 00:00:37,750
part of work okay about maybe a third I

00:00:35,440 --> 00:00:43,149
was hoping that 99% of you will raise

00:00:37,750 --> 00:00:45,850
your arms but so it's pretty clear by

00:00:43,149 --> 00:00:48,359
now that most applications today or new

00:00:45,850 --> 00:00:51,160
application going to develop today are

00:00:48,359 --> 00:00:54,429
SAS based basically deliver over the

00:00:51,160 --> 00:00:57,670
Internet and as a result of that there's

00:00:54,429 --> 00:01:03,360
a set of expectations that comes along

00:00:57,670 --> 00:01:06,220
with it right so primarily around how

00:01:03,360 --> 00:01:08,140
customers have now come to condition

00:01:06,220 --> 00:01:10,420
themselves that hey you know if I'm

00:01:08,140 --> 00:01:14,530
using something over the Internet

00:01:10,420 --> 00:01:15,790
Six's should happen rapidly as a matter

00:01:14,530 --> 00:01:18,330
fact the conversation that we have with

00:01:15,790 --> 00:01:21,790
our customers are around well you know

00:01:18,330 --> 00:01:24,160
not when is the six not which lease the

00:01:21,790 --> 00:01:24,760
six will be delivered but can I try to

00:01:24,160 --> 00:01:26,860
fix now

00:01:24,760 --> 00:01:29,350
right so this entire production line has

00:01:26,860 --> 00:01:31,840
basically changed and as a result like

00:01:29,350 --> 00:01:34,000
engineering has basically changed so

00:01:31,840 --> 00:01:35,200
we're sort of living all of us are sort

00:01:34,000 --> 00:01:38,170
of living in the state where we have a

00:01:35,200 --> 00:01:40,390
rapid iteration of our software right in

00:01:38,170 --> 00:01:42,760
a rapid iteration has basically changed

00:01:40,390 --> 00:01:45,460
the way we think about software

00:01:42,760 --> 00:01:48,390
development we think talk a lot more

00:01:45,460 --> 00:01:51,730
about agile these days sprint planning

00:01:48,390 --> 00:01:56,860
days and weeks of when we do releases

00:01:51,730 --> 00:01:58,240
not months or years and agile is a big

00:01:56,860 --> 00:02:01,180
big thing for us the environment that we

00:01:58,240 --> 00:02:02,920
live in agile process see ICD continuous

00:02:01,180 --> 00:02:05,560
integration and deployment of code

00:02:02,920 --> 00:02:07,540
constantly going into production test

00:02:05,560 --> 00:02:08,860
automation we have to think about we

00:02:07,540 --> 00:02:11,409
think about the way we deal with test

00:02:08,860 --> 00:02:13,870
automation no longer do we have this

00:02:11,409 --> 00:02:14,680
like test planning test process instead

00:02:13,870 --> 00:02:16,060
as part of

00:02:14,680 --> 00:02:19,780
process we're talking about not only

00:02:16,060 --> 00:02:21,849
unit tests but also adding integration

00:02:19,780 --> 00:02:24,670
tests and that's important because in

00:02:21,849 --> 00:02:26,980
this high and fast iterative type of

00:02:24,670 --> 00:02:29,170
environment we also have to basically be

00:02:26,980 --> 00:02:32,069
able to make sure that the changes we

00:02:29,170 --> 00:02:35,349
make don't introduce regressions right

00:02:32,069 --> 00:02:37,000
so but some of the in order to take

00:02:35,349 --> 00:02:39,519
advantage of all this one of the biggest

00:02:37,000 --> 00:02:41,409
changes that I've seen in that we

00:02:39,519 --> 00:02:44,560
practice that signal effects is the

00:02:41,409 --> 00:02:46,780
notion of data driven development so you

00:02:44,560 --> 00:02:48,010
now have an environment we're delivering

00:02:46,780 --> 00:02:49,989
code multiple weeks you have a

00:02:48,010 --> 00:02:52,840
production system that let you introduce

00:02:49,989 --> 00:02:57,040
code if production in a matter of days

00:02:52,840 --> 00:03:00,069
and weeks but how do you know and what

00:02:57,040 --> 00:03:02,230
do you do to know that you're hitting

00:03:00,069 --> 00:03:03,849
the targets are you actually hitting the

00:03:02,230 --> 00:03:05,560
requirements because you're in this high

00:03:03,849 --> 00:03:07,750
iteration type of environment you need a

00:03:05,560 --> 00:03:11,049
constantly measure and know whether your

00:03:07,750 --> 00:03:13,750
code changes are taking effect so and as

00:03:11,049 --> 00:03:16,510
a result you know we sort of live by

00:03:13,750 --> 00:03:18,519
data we actually make changes and

00:03:16,510 --> 00:03:19,750
decisions based on the data that we

00:03:18,519 --> 00:03:23,440
observe what's happening in production

00:03:19,750 --> 00:03:25,540
so in give you some example of that so

00:03:23,440 --> 00:03:28,030
in signal effects so one of our services

00:03:25,540 --> 00:03:29,739
is indexing service one day engineers

00:03:28,030 --> 00:03:34,379
basically collecting metrics on the size

00:03:29,739 --> 00:03:37,209
of indexing q he thinks that at 280,000

00:03:34,379 --> 00:03:39,939
writes in the Q something to worry about

00:03:37,209 --> 00:03:42,099
and then so he created a chart he's

00:03:39,939 --> 00:03:44,319
looking at this constantly at some point

00:03:42,099 --> 00:03:46,840
it touched it then do much about it and

00:03:44,319 --> 00:03:49,030
then touched it again multiple times he

00:03:46,840 --> 00:03:51,699
said hey time to make a change

00:03:49,030 --> 00:03:53,709
he made necessary configuration changes

00:03:51,699 --> 00:03:55,569
pushing the production went to the CI CT

00:03:53,709 --> 00:03:57,400
process and then observed the fact that

00:03:55,569 --> 00:03:58,989
that actually worked so that now he's

00:03:57,400 --> 00:04:00,790
thinking about something else I know the

00:03:58,989 --> 00:04:03,579
piece of project actually working on so

00:04:00,790 --> 00:04:06,879
this type of environment of fine grained

00:04:03,579 --> 00:04:08,949
making fine grained changes it's part of

00:04:06,879 --> 00:04:11,009
our daily lives is basically how we

00:04:08,949 --> 00:04:13,150
actually operate is part of engineering

00:04:11,009 --> 00:04:17,109
some of the things that we do to

00:04:13,150 --> 00:04:19,840
accomplish this we know we instrument

00:04:17,109 --> 00:04:21,190
code as part of our iteration not just

00:04:19,840 --> 00:04:23,889
you know test not just immigration test

00:04:21,190 --> 00:04:27,440
love the instrumentation we continue to

00:04:23,889 --> 00:04:30,050
refine the insights that would those

00:04:27,440 --> 00:04:32,840
the chart I showed earlier talked a bit

00:04:30,050 --> 00:04:34,400
about the size of the queue now once you

00:04:32,840 --> 00:04:36,620
remove that bottleneck the next

00:04:34,400 --> 00:04:38,630
bottleneck happens to be well the rate

00:04:36,620 --> 00:04:41,180
of change that's coming into the queue

00:04:38,630 --> 00:04:43,790
so you want to continue to refine based

00:04:41,180 --> 00:04:45,830
on changes you're making your code and

00:04:43,790 --> 00:04:48,500
then now all those basically would make

00:04:45,830 --> 00:04:50,870
decisions on leaders to make decisions

00:04:48,500 --> 00:04:53,390
on how we continue on the next phase the

00:04:50,870 --> 00:04:55,310
next iteration of code some of the

00:04:53,390 --> 00:05:00,140
impacts remembering a bit out of time

00:04:55,310 --> 00:05:01,850
here as we practices you know were able

00:05:00,140 --> 00:05:03,890
to alight and we have about 20 to my

00:05:01,850 --> 00:05:07,880
engineers and signal effects we're able

00:05:03,890 --> 00:05:09,920
to generate 99.9 we have 30 plus or sub

00:05:07,880 --> 00:05:13,160
projects and fight all the time when 15

00:05:09,920 --> 00:05:15,230
plus or so our weekly releases in that

00:05:13,160 --> 00:05:16,730
we constantly measure kind of meta that

00:05:15,230 --> 00:05:19,040
we measure how well our data driven

00:05:16,730 --> 00:05:22,430
development process is working on a

00:05:19,040 --> 00:05:26,210
regular basis so I'm out of time and

00:05:22,430 --> 00:05:28,880
then where I sit now we're at booth 3 or

00:05:26,210 --> 00:05:30,380
7 I come by if you like to tell us about

00:05:28,880 --> 00:05:31,820
your experiences with this data driven

00:05:30,380 --> 00:05:35,140
approach or just learn a bit about

00:05:31,820 --> 00:05:35,140
signal effects thank you

00:05:42,409 --> 00:05:44,469

YouTube URL: https://www.youtube.com/watch?v=7pTUar25L9Q


