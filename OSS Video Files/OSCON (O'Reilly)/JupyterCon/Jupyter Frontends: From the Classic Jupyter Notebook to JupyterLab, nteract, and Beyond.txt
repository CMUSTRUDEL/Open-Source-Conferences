Title: Jupyter Frontends: From the Classic Jupyter Notebook to JupyterLab, nteract, and Beyond
Publication date: 2017-11-08
Playlist: JupyterCon
Description: 
	Kyle Kelley (Netflix), Brian Granger (Cal Poly San Luis Obispo) offer a broad look at Jupyter frontends, describing their common aspects and explaining how their differences help Jupyter reach a broader set of users. They also share ongoing challenges in building these frontends (real-time collaboration, security, rich output, different Markdown formats, etc.) as well as their ongoing work to address these questions.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,579 --> 00:00:05,900
welcome everyone it's great to be here

00:00:03,740 --> 00:00:09,070
today at the first Jupiter con

00:00:05,900 --> 00:00:11,780
conference here in New York City and I'm

00:00:09,070 --> 00:00:14,029
really thrilled to be able to talk to

00:00:11,780 --> 00:00:16,430
you today about the Jupiter note book

00:00:14,029 --> 00:00:19,550
and other front-ends Jupiter front-ends

00:00:16,430 --> 00:00:21,530
with Kyle Kelley here both Kyle and I

00:00:19,550 --> 00:00:25,550
have been working on the project for

00:00:21,530 --> 00:00:28,220
many years and it's again great to be

00:00:25,550 --> 00:00:31,670
here a quick outline of what we'll be

00:00:28,220 --> 00:00:37,340
talking about today and the focus really

00:00:31,670 --> 00:00:40,040
here is giving you a semi historical

00:00:37,340 --> 00:00:41,720
perspective of how we got to where we

00:00:40,040 --> 00:00:45,110
are with the Jupiter notebook also

00:00:41,720 --> 00:00:47,989
looking forward and in particular

00:00:45,110 --> 00:00:49,850
thinking about what are the key ideas of

00:00:47,989 --> 00:00:51,920
the Jupiter architecture as it relates

00:00:49,850 --> 00:00:54,410
to building user interfaces for

00:00:51,920 --> 00:00:56,390
interactive computing before we get

00:00:54,410 --> 00:00:57,829
started with the actual talk I wanted to

00:00:56,390 --> 00:01:00,860
mention an opportunity for you to

00:00:57,829 --> 00:01:03,590
participate in our project we have both

00:01:00,860 --> 00:01:05,449
today and tomorrow in person user

00:01:03,590 --> 00:01:08,959
testing if you keep going down this hall

00:01:05,449 --> 00:01:11,659
all the way to the end we have a number

00:01:08,959 --> 00:01:12,979
of people from the core project and also

00:01:11,659 --> 00:01:16,069
in collaboration with Bloomberg

00:01:12,979 --> 00:01:18,920
doing user experience testing we've got

00:01:16,069 --> 00:01:20,869
four different activities all day today

00:01:18,920 --> 00:01:24,499
tomorrow would love it if you would

00:01:20,869 --> 00:01:26,889
comment and help us with that and we'd

00:01:24,499 --> 00:01:28,819
love to get a diverse range of

00:01:26,889 --> 00:01:31,420
participants so if you've never used

00:01:28,819 --> 00:01:34,219
Jupiter before if you're a Jew pa'dar

00:01:31,420 --> 00:01:36,829
expert or anywhere in between

00:01:34,219 --> 00:01:38,509
would be fantastic you can either go to

00:01:36,829 --> 00:01:41,420
the bitly link down at the bottom there

00:01:38,509 --> 00:01:44,109
or just drop by even we've got four

00:01:41,420 --> 00:01:47,889
different stations and a lot of capacity

00:01:44,109 --> 00:01:50,659
so I want to begin with thinking about

00:01:47,889 --> 00:01:54,229
what do we mean by interactive computing

00:01:50,659 --> 00:01:56,329
and here's a rough take at a definition

00:01:54,229 --> 00:01:58,249
of what we mean an interactive

00:01:56,329 --> 00:01:59,899
computation is a persistent computer

00:01:58,249 --> 00:02:02,209
program that runs with a human in the

00:01:59,899 --> 00:02:04,399
loop or the primary mode of steering the

00:02:02,209 --> 00:02:06,919
program is through the human iteratively

00:02:04,399 --> 00:02:10,700
writing and running blocks of code and

00:02:06,919 --> 00:02:14,330
looking at the result many programs are

00:02:10,700 --> 00:02:17,180
interactive so Microsoft Word Excel

00:02:14,330 --> 00:02:19,850
web browsers in it in a sense there's a

00:02:17,180 --> 00:02:22,400
human-in-the-loop they're steering the

00:02:19,850 --> 00:02:25,700
course of the program the key difference

00:02:22,400 --> 00:02:27,200
in this context in the Jupiter context

00:02:25,700 --> 00:02:29,510
and data science and scientific

00:02:27,200 --> 00:02:31,430
computing is that the way that we're

00:02:29,510 --> 00:02:34,190
steering the computation is through a

00:02:31,430 --> 00:02:36,920
typing source code and handing it off to

00:02:34,190 --> 00:02:38,360
the program for for to be run and so

00:02:36,920 --> 00:02:40,850
that's very different from a program

00:02:38,360 --> 00:02:43,430
like Excel which in many ways does

00:02:40,850 --> 00:02:47,330
similar types of things that we often do

00:02:43,430 --> 00:02:51,290
in Python or R or julia but that's sort

00:02:47,330 --> 00:02:53,720
of the emphasis in this context and what

00:02:51,290 --> 00:02:56,660
this means is that interactive computing

00:02:53,720 --> 00:02:58,570
necessarily is human centered right and

00:02:56,660 --> 00:03:02,360
so when we think about user interfaces

00:02:58,570 --> 00:03:05,000
those are really the the sit between the

00:03:02,360 --> 00:03:06,950
user the human user and the computer and

00:03:05,000 --> 00:03:10,190
I'd like to break down this idea of

00:03:06,950 --> 00:03:12,170
interactive computing into sort of the

00:03:10,190 --> 00:03:14,120
different parts of it and in this

00:03:12,170 --> 00:03:16,520
context when we talk about a Jupiter

00:03:14,120 --> 00:03:19,250
front-end we're talking about the user

00:03:16,520 --> 00:03:20,900
interface so for example the Jupiter

00:03:19,250 --> 00:03:22,850
notebook would be an example of a

00:03:20,900 --> 00:03:24,620
Jupiter front-end the first thing that

00:03:22,850 --> 00:03:26,989
you need in such a front-end is the

00:03:24,620 --> 00:03:30,110
ability to some sort of user interface

00:03:26,989 --> 00:03:32,360
or UI to compose blocks of code the user

00:03:30,110 --> 00:03:34,370
needs a place to type there needs to be

00:03:32,360 --> 00:03:37,519
some sort of UI element or control or

00:03:34,370 --> 00:03:40,280
keyboard shortcut to submit the code to

00:03:37,519 --> 00:03:42,739
be run by the program the program then

00:03:40,280 --> 00:03:45,590
needs a method to run the code a method

00:03:42,739 --> 00:03:48,230
to return output back to the user there

00:03:45,590 --> 00:03:50,720
needs to be some sort of user interface

00:03:48,230 --> 00:03:52,519
to view the results and then the whole

00:03:50,720 --> 00:03:53,870
process again is iterative so there

00:03:52,519 --> 00:03:57,739
needs to be a way of repeating this

00:03:53,870 --> 00:03:59,540
whole process a great example of a user

00:03:57,739 --> 00:04:01,850
interface for interactive computing was

00:03:59,540 --> 00:04:04,160
the original ipython that Fernando

00:04:01,850 --> 00:04:08,630
talked about today in the keynote that

00:04:04,160 --> 00:04:10,190
came out in 2001 and again it provided

00:04:08,630 --> 00:04:12,709
all these fundamental building blocks

00:04:10,190 --> 00:04:14,200
for interactive computing in addition to

00:04:12,709 --> 00:04:18,229
that provided things like tab-completion

00:04:14,200 --> 00:04:21,260
extended syntax plotting integration and

00:04:18,229 --> 00:04:23,240
let's think about how the terminal is a

00:04:21,260 --> 00:04:25,310
user interface this is a little bit odd

00:04:23,240 --> 00:04:27,180
when we think about user interfaces

00:04:25,310 --> 00:04:30,000
today we're thinking about our phone

00:04:27,180 --> 00:04:32,389
were thinking about web applications but

00:04:30,000 --> 00:04:35,100
the terminal itself is a user interface

00:04:32,389 --> 00:04:37,620
so thinking back to these abstractions

00:04:35,100 --> 00:04:40,259
for interactive computing the compose

00:04:37,620 --> 00:04:45,030
step is done by just typing at the

00:04:40,259 --> 00:04:48,150
terminal the submit you press return the

00:04:45,030 --> 00:04:50,130
way ipython is implemented itself in

00:04:48,150 --> 00:04:53,490
Python looks something roughly like this

00:04:50,130 --> 00:04:56,280
the run uses pythons eval function you

00:04:53,490 --> 00:04:58,440
evaluate the code which is a string in a

00:04:56,280 --> 00:05:01,680
global and local namespace both of which

00:04:58,440 --> 00:05:03,120
are Python dictionaries the output looks

00:05:01,680 --> 00:05:05,699
something like this we're basically

00:05:03,120 --> 00:05:08,280
printing a string of output to standard

00:05:05,699 --> 00:05:09,900
out or standard error the viewing part

00:05:08,280 --> 00:05:12,289
of that you're just looking at the

00:05:09,900 --> 00:05:14,880
terminal and then the repeat part of it

00:05:12,289 --> 00:05:17,490
literally is something like a while true

00:05:14,880 --> 00:05:19,639
with a little bit of extra logic or on

00:05:17,490 --> 00:05:22,800
signal handling and things like that so

00:05:19,639 --> 00:05:25,050
again the terminal is a user interface

00:05:22,800 --> 00:05:27,479
that implements this idea of interactive

00:05:25,050 --> 00:05:29,520
computing but as we all know there's a

00:05:27,479 --> 00:05:30,840
lot of challenges to the terminal user

00:05:29,520 --> 00:05:34,800
interface so what are the challenges

00:05:30,840 --> 00:05:37,490
first there's no narrative write code

00:05:34,800 --> 00:05:39,300
without a narrative as we've learned is

00:05:37,490 --> 00:05:41,880
empty of meaning

00:05:39,300 --> 00:05:43,979
so by narrative here I mean it in a very

00:05:41,880 --> 00:05:46,020
broad sense of narrative text

00:05:43,979 --> 00:05:49,440
documentation images visualizations

00:05:46,020 --> 00:05:50,250
equations anything that gives context to

00:05:49,440 --> 00:05:54,180
the code itself

00:05:50,250 --> 00:05:56,250
there's also numb no memory and this is

00:05:54,180 --> 00:06:00,570
very wasteful and frustrating as a user

00:05:56,250 --> 00:06:02,880
if you are a user of ipython in the pre

00:06:00,570 --> 00:06:04,979
notebook days you'll remember what what

00:06:02,880 --> 00:06:07,680
your workflow looked like you'd write

00:06:04,979 --> 00:06:09,449
code an ipython but then an external

00:06:07,680 --> 00:06:12,180
file that you had imported and changed

00:06:09,449 --> 00:06:13,740
so you have to quit ipython that's

00:06:12,180 --> 00:06:16,650
really a constraint of the Python

00:06:13,740 --> 00:06:19,229
runtime itself you restart ipython and

00:06:16,650 --> 00:06:20,940
then you start hitting up arrow to cycle

00:06:19,229 --> 00:06:22,440
back through the lines of are the the

00:06:20,940 --> 00:06:25,650
blocks of code that you had previously

00:06:22,440 --> 00:06:27,630
typed and really advanced ipython users

00:06:25,650 --> 00:06:30,060
got really good at counting the number

00:06:27,630 --> 00:06:32,400
of up areas that you had to press to get

00:06:30,060 --> 00:06:35,009
to a particular line of code and that

00:06:32,400 --> 00:06:36,990
was our version previously of the user

00:06:35,009 --> 00:06:39,710
interface having memory and it was

00:06:36,990 --> 00:06:42,200
really painful there was also no Reap

00:06:39,710 --> 00:06:44,600
disability and very limited ability to

00:06:42,200 --> 00:06:46,730
communicate with others and so really no

00:06:44,600 --> 00:06:48,890
matter what you did an i python it was

00:06:46,730 --> 00:06:52,070
your own private dead end right no

00:06:48,890 --> 00:06:55,040
matter how productive you were in spite

00:06:52,070 --> 00:06:57,380
of this Python I Python numpy matplotlib

00:06:55,040 --> 00:06:59,300
the whole ecosystem was really

00:06:57,380 --> 00:07:02,030
revolutionary even long before the

00:06:59,300 --> 00:07:05,240
notebook came along and that that's sort

00:07:02,030 --> 00:07:07,370
of a separate topic outside of this I'd

00:07:05,240 --> 00:07:10,940
like to pose the following question why

00:07:07,370 --> 00:07:12,890
is the classic ipython originally and

00:07:10,940 --> 00:07:15,140
now the Jupiter notebooks so useful in

00:07:12,890 --> 00:07:17,900
this context of thinking about user

00:07:15,140 --> 00:07:20,150
interfaces for interactive computing and

00:07:17,900 --> 00:07:22,850
I'd like to propose the following the

00:07:20,150 --> 00:07:24,740
ipython Jupiter notebook maintains the

00:07:22,850 --> 00:07:27,830
full interactive computing workflow

00:07:24,740 --> 00:07:30,920
while adding these four ingredients

00:07:27,830 --> 00:07:33,680
narrative memory reproducibility and

00:07:30,920 --> 00:07:35,480
communication so here's a screenshot of

00:07:33,680 --> 00:07:39,290
the first release of the ipython

00:07:35,480 --> 00:07:41,750
notebook that came out in 2011 it was an

00:07:39,290 --> 00:07:44,330
extremely primitive piece of software

00:07:41,750 --> 00:07:45,980
compared to what we have today early

00:07:44,330 --> 00:07:48,290
users will remember that it was a couple

00:07:45,980 --> 00:07:52,070
years before you could even change

00:07:48,290 --> 00:07:54,080
directories in the web application for

00:07:52,070 --> 00:07:56,120
years you had to actually go back kill

00:07:54,080 --> 00:07:58,280
the server change directories that the

00:07:56,120 --> 00:08:00,380
terminal and restart it amazingly

00:07:58,280 --> 00:08:01,790
primitive and yet people still found it

00:08:00,380 --> 00:08:03,800
useful

00:08:01,790 --> 00:08:05,810
and so part of what we're trying to

00:08:03,800 --> 00:08:07,610
understand is why why would such a

00:08:05,810 --> 00:08:11,120
primitive piece of software by today's

00:08:07,610 --> 00:08:13,700
standards still be so useful and so here

00:08:11,120 --> 00:08:15,860
in orange you can see these elements

00:08:13,700 --> 00:08:19,430
required for interactive computing

00:08:15,860 --> 00:08:22,490
there's a place here for the user to

00:08:19,430 --> 00:08:24,440
type code to compose down in the lower

00:08:22,490 --> 00:08:26,840
left-hand corner you can see some text

00:08:24,440 --> 00:08:30,620
describing the keyboard shortcuts so

00:08:26,840 --> 00:08:32,660
shift-enter there's a rich output here

00:08:30,620 --> 00:08:34,880
and then there's the ability to repeat

00:08:32,660 --> 00:08:37,340
write you can have multiple code cells

00:08:34,880 --> 00:08:41,060
in addition to that you have these other

00:08:37,340 --> 00:08:42,550
ideas it's now a file and so instantly

00:08:41,060 --> 00:08:45,560
you have a notion of reproducibility

00:08:42,550 --> 00:08:48,080
communication and memory the user

00:08:45,560 --> 00:08:50,240
interface the file remembers what you've

00:08:48,080 --> 00:08:52,310
done in previous sessions you've got

00:08:50,240 --> 00:08:55,280
equations you have a narrative you have

00:08:52,310 --> 00:08:57,320
images and other aspects of the memory

00:08:55,280 --> 00:09:00,500
as well in the sense that now the

00:08:57,320 --> 00:09:02,930
computation the runtime the kernel as we

00:09:00,500 --> 00:09:04,820
call it is separate from the user

00:09:02,930 --> 00:09:07,040
interface and the document so you can

00:09:04,820 --> 00:09:08,540
restart the runtime without losing any

00:09:07,040 --> 00:09:10,610
of the code that you've typed that's

00:09:08,540 --> 00:09:14,300
another form of memory that was built in

00:09:10,610 --> 00:09:19,940
from the beginning so where are we with

00:09:14,300 --> 00:09:21,020
the Jupiter notebook today in 2017 first

00:09:19,940 --> 00:09:25,100
of all I want to talk a bit about

00:09:21,020 --> 00:09:29,450
successes places where the the software

00:09:25,100 --> 00:09:32,960
the community users have really just

00:09:29,450 --> 00:09:35,930
done incredibly well first of all our

00:09:32,960 --> 00:09:37,190
users we have somewhere between six to

00:09:35,930 --> 00:09:40,280
eight million users

00:09:37,190 --> 00:09:43,460
it could be more it's really difficult

00:09:40,280 --> 00:09:45,830
for us to get a solid count on this we

00:09:43,460 --> 00:09:48,230
did a user experience survey a few years

00:09:45,830 --> 00:09:50,120
ago at the time this is what our user

00:09:48,230 --> 00:09:54,740
distribution look like in terms of

00:09:50,120 --> 00:09:57,530
different backgrounds now I looked last

00:09:54,740 --> 00:10:00,890
night and a rough count is that we

00:09:57,530 --> 00:10:02,630
support over or right around 100

00:10:00,890 --> 00:10:05,000
languages so there's a hundred different

00:10:02,630 --> 00:10:08,060
kernels that have been developed I

00:10:05,000 --> 00:10:10,220
suppose there's in some cases multiple

00:10:08,060 --> 00:10:12,830
kernels for a single language so maybe

00:10:10,220 --> 00:10:17,560
the number of languages isn't quite that

00:10:12,830 --> 00:10:20,920
but many many languages and furthermore

00:10:17,560 --> 00:10:23,600
increasingly we're seeing a very very

00:10:20,920 --> 00:10:26,090
diverse and international community of

00:10:23,600 --> 00:10:30,020
users so here is the Google Analytics

00:10:26,090 --> 00:10:32,990
traffic for the main website this is

00:10:30,020 --> 00:10:36,200
just the Jupiter org website and notice

00:10:32,990 --> 00:10:40,430
the list of countries here the US is I

00:10:36,200 --> 00:10:41,720
suppose not surprisingly the where most

00:10:40,430 --> 00:10:44,800
of our users are especially

00:10:41,720 --> 00:10:49,550
traditionally but that's only at 30% now

00:10:44,800 --> 00:10:51,390
followed by China India UK Germany Japan

00:10:49,550 --> 00:10:54,120
Canada Russia

00:10:51,390 --> 00:10:56,250
France and Brazil and part of what's

00:10:54,120 --> 00:10:58,410
interesting about this is as we look at

00:10:56,250 --> 00:11:00,810
this data what we see as the

00:10:58,410 --> 00:11:04,290
international audience growing at a

00:11:00,810 --> 00:11:06,330
staggering pace I think I don't remember

00:11:04,290 --> 00:11:09,180
the exact numbers but the the percentage

00:11:06,330 --> 00:11:11,820
here represented by China in India has

00:11:09,180 --> 00:11:14,940
doubled in the last few months and so

00:11:11,820 --> 00:11:18,510
it's a really remarkable trend that

00:11:14,940 --> 00:11:20,910
we're seeing there we also have a lot of

00:11:18,510 --> 00:11:23,430
people creating amazing content in

00:11:20,910 --> 00:11:25,760
notebooks one sign of this is that

00:11:23,430 --> 00:11:29,010
github renders Jupiter notebooks

00:11:25,760 --> 00:11:30,360
Institute and for example to have a page

00:11:29,010 --> 00:11:34,380
where you can look at the trending

00:11:30,360 --> 00:11:37,050
notebooks on github and here's a plot a

00:11:34,380 --> 00:11:40,950
map plot live plot that shows the number

00:11:37,050 --> 00:11:43,170
of public notebooks on github this has

00:11:40,950 --> 00:11:45,390
been being maintained by Peter Parente

00:11:43,170 --> 00:11:48,420
and I think he tweeted last night that

00:11:45,390 --> 00:11:51,290
his current count is 1.2 million

00:11:48,420 --> 00:11:53,730
notebooks so the growth rate is

00:11:51,290 --> 00:11:56,850
absolutely spectacular in that respect

00:11:53,730 --> 00:12:01,500
as well part of what's been fun for us

00:11:56,850 --> 00:12:04,860
is all of you the amazing community of

00:12:01,500 --> 00:12:07,350
users that participates in the project

00:12:04,860 --> 00:12:10,920
in various ways and uses the jupiter

00:12:07,350 --> 00:12:13,470
notebook in ways that we never imagined

00:12:10,920 --> 00:12:15,780
honestly and so what we think about this

00:12:13,470 --> 00:12:18,300
is the emergent behaviors right that we

00:12:15,780 --> 00:12:20,580
have built a few things and all of you

00:12:18,300 --> 00:12:23,970
have gone off and built things that are

00:12:20,580 --> 00:12:28,830
truly spectacular here's just a few sort

00:12:23,970 --> 00:12:31,560
of randomly chosen things so just say a

00:12:28,830 --> 00:12:33,030
few things about this as for nando

00:12:31,560 --> 00:12:35,250
mentioned this morning a lot of people

00:12:33,030 --> 00:12:36,990
are starting to write book length book

00:12:35,250 --> 00:12:38,700
style content with Jupiter notebooks

00:12:36,990 --> 00:12:40,530
there's one example of Jake banner

00:12:38,700 --> 00:12:43,830
classes Python data science handbook

00:12:40,530 --> 00:12:45,840
there's a number of other O'Reilly books

00:12:43,830 --> 00:12:49,920
and even other publishers that are doing

00:12:45,840 --> 00:12:53,129
this gene pattern is a

00:12:49,920 --> 00:12:55,019
notebooks the system for bioinformatics

00:12:53,129 --> 00:12:57,029
and they've extended the Jupiter

00:12:55,019 --> 00:13:01,160
notebook extensively with different cell

00:12:57,029 --> 00:13:04,889
types for bioinformatics Quan econ is a

00:13:01,160 --> 00:13:07,139
curriculum in that consists of Jupiter

00:13:04,889 --> 00:13:10,249
notebooks written in Python Anna and

00:13:07,139 --> 00:13:13,259
Julia for quantitative economics we have

00:13:10,249 --> 00:13:16,290
reproducible academic publications being

00:13:13,259 --> 00:13:18,660
done in the Jupiter notebook another

00:13:16,290 --> 00:13:21,269
thing that we're really excited about is

00:13:18,660 --> 00:13:23,699
data journalism embracing the jupiter

00:13:21,269 --> 00:13:26,339
notebook there's a great team of data

00:13:23,699 --> 00:13:30,379
journalists at BuzzFeed doing this and

00:13:26,339 --> 00:13:34,109
then back to our own roots in science

00:13:30,379 --> 00:13:38,429
for example the LIGO collaboration which

00:13:34,109 --> 00:13:41,689
has in the last just over a year ago I

00:13:38,429 --> 00:13:44,579
guess announced the observation of

00:13:41,689 --> 00:13:46,679
gravitational waves due to black holes

00:13:44,579 --> 00:13:48,449
colliding they've got an open science

00:13:46,679 --> 00:13:51,209
center where they post Jupiter notebooks

00:13:48,449 --> 00:13:54,239
that fully reproduces all their data

00:13:51,209 --> 00:13:55,980
analysis going from the raw data files

00:13:54,239 --> 00:13:58,949
all the way to the publication ready

00:13:55,980 --> 00:14:01,139
files and so we're really excited to see

00:13:58,949 --> 00:14:02,269
what all of you are doing as well at

00:14:01,139 --> 00:14:05,309
this conference

00:14:02,269 --> 00:14:07,739
we've also faced challenges though and

00:14:05,309 --> 00:14:09,869
this is these challenges that we've seen

00:14:07,739 --> 00:14:12,899
over the last few years really Drive how

00:14:09,869 --> 00:14:15,239
we think about the future so first of

00:14:12,899 --> 00:14:17,189
all the Jupiter notebook that most of

00:14:15,239 --> 00:14:20,179
you are using today is built with the

00:14:17,189 --> 00:14:25,860
web technology of 2011 so at the time

00:14:20,179 --> 00:14:28,230
jquery was used everywhere the summer of

00:14:25,860 --> 00:14:29,850
2011 we actually looked at bootstrap and

00:14:28,230 --> 00:14:31,829
decided you know what this is really

00:14:29,850 --> 00:14:34,559
brand new it's too immature we probably

00:14:31,829 --> 00:14:37,980
can't use that we actually do use

00:14:34,559 --> 00:14:39,689
bootstrap in the classic notebook NPM

00:14:37,980 --> 00:14:42,889
was not being used at all for front-end

00:14:39,689 --> 00:14:45,089
development so we're using require GS

00:14:42,889 --> 00:14:48,749
one thing that's really important though

00:14:45,089 --> 00:14:50,819
is that the the Python side of the

00:14:48,749 --> 00:14:53,069
Jupiter notebook the kernel architecture

00:14:50,819 --> 00:14:56,600
the notebook server which is all written

00:14:53,069 --> 00:14:58,400
in Python all the way back to 2010

00:14:56,600 --> 00:15:01,880
it's been relatively stable we've

00:14:58,400 --> 00:15:03,920
evolved very slowly this stability of

00:15:01,880 --> 00:15:05,870
the back end and that the Jupiter

00:15:03,920 --> 00:15:08,180
architecture and network protocols that

00:15:05,870 --> 00:15:09,800
we build around that Kyle is going to

00:15:08,180 --> 00:15:11,420
talk more about there's a lot more talks

00:15:09,800 --> 00:15:14,030
about that here at the conference but

00:15:11,420 --> 00:15:17,060
the stability of that has been really

00:15:14,030 --> 00:15:19,400
important for us being able to break

00:15:17,060 --> 00:15:23,720
things on the front end in the user

00:15:19,400 --> 00:15:25,340
interface side important features with

00:15:23,720 --> 00:15:26,480
the classic notebook have become really

00:15:25,340 --> 00:15:27,980
difficult to implement

00:15:26,480 --> 00:15:31,040
for example real time collaboration

00:15:27,980 --> 00:15:32,630
similar to Google Docs has been

00:15:31,040 --> 00:15:34,400
difficult because in the classic

00:15:32,630 --> 00:15:36,910
notebook our models and views are

00:15:34,400 --> 00:15:40,220
completely welded together in a way that

00:15:36,910 --> 00:15:42,920
essentially makes this impossible in the

00:15:40,220 --> 00:15:45,410
classic notebook other very simple

00:15:42,920 --> 00:15:47,830
things like users have been asking for a

00:15:45,410 --> 00:15:50,510
long time for the ability to collapse

00:15:47,830 --> 00:15:52,280
source code to minimize it basically

00:15:50,510 --> 00:15:55,280
even things like that had become

00:15:52,280 --> 00:15:56,870
difficult because of these emergent

00:15:55,280 --> 00:15:59,390
behaviors all of you have been building

00:15:56,870 --> 00:16:02,240
things and because of that things like

00:15:59,390 --> 00:16:04,460
the Dom structure in the CSS classes in

00:16:02,240 --> 00:16:06,980
the classic Jupiter notebook have

00:16:04,460 --> 00:16:09,530
essentially become pseudo public api's

00:16:06,980 --> 00:16:11,240
which makes it really difficult when we

00:16:09,530 --> 00:16:12,800
can't break them if we change those

00:16:11,240 --> 00:16:17,450
things we break all the things that you

00:16:12,800 --> 00:16:19,850
have done and we'll be the first to

00:16:17,450 --> 00:16:22,190
admit when we wrote that code for the

00:16:19,850 --> 00:16:23,990
classic jupiter notebook we were not

00:16:22,190 --> 00:16:26,330
thinking it would ever be a public api

00:16:23,990 --> 00:16:28,250
and so we never thought about

00:16:26,330 --> 00:16:31,190
distinguishing between public and

00:16:28,250 --> 00:16:33,170
private api's and that's part of how we

00:16:31,190 --> 00:16:35,420
got into the difficult situation we're

00:16:33,170 --> 00:16:37,340
building extensions to the jupiter

00:16:35,420 --> 00:16:40,820
notebook the classic notebook it's

00:16:37,340 --> 00:16:42,650
possible but it's really painful from

00:16:40,820 --> 00:16:44,270
the maintenance perspective our code

00:16:42,650 --> 00:16:46,810
base in the classic notebook is large

00:16:44,270 --> 00:16:49,940
enough that you really start to miss

00:16:46,810 --> 00:16:52,720
static typing and that's something that

00:16:49,940 --> 00:16:54,850
we'll talk about in other talks here

00:16:52,720 --> 00:16:56,980
there's no dependency injection for

00:16:54,850 --> 00:16:58,770
runtime dependency resolution that's

00:16:56,980 --> 00:17:02,050
really important when you build a system

00:16:58,770 --> 00:17:03,520
like this where you want third parties

00:17:02,050 --> 00:17:07,750
to be able to extend the system

00:17:03,520 --> 00:17:09,760
dynamically also along the way we've

00:17:07,750 --> 00:17:13,540
discovered leaks in the foundation so

00:17:09,760 --> 00:17:16,420
for example this sort of pristine world

00:17:13,540 --> 00:17:18,670
that we imagine of having a language

00:17:16,420 --> 00:17:21,069
neutral and front-end neutral message

00:17:18,670 --> 00:17:23,500
specification and kernel protocol and

00:17:21,069 --> 00:17:25,150
notebook format we've discovered leaks

00:17:23,500 --> 00:17:29,410
in those abstractions what do we mean by

00:17:25,150 --> 00:17:33,610
that that along the way we found that

00:17:29,410 --> 00:17:36,340
there was implementation details about

00:17:33,610 --> 00:17:38,550
the classic Jupiter notebook sort of

00:17:36,340 --> 00:17:42,460
scattered throughout those abstractions

00:17:38,550 --> 00:17:45,820
one example is that a library like AI pi

00:17:42,460 --> 00:17:48,400
widgets is essentially welded to the

00:17:45,820 --> 00:17:51,520
classic Jupiter notebook implementation

00:17:48,400 --> 00:17:54,070
now it's exciting to note that with

00:17:51,520 --> 00:17:55,900
recent releases ipython widgets is no

00:17:54,070 --> 00:17:58,570
longer welded to the classic notebook

00:17:55,900 --> 00:18:02,500
and it's able to run in other front ends

00:17:58,570 --> 00:18:05,250
as well and we've also discovered and

00:18:02,500 --> 00:18:08,290
heard from our users that there's other

00:18:05,250 --> 00:18:10,210
workflows for interactive computing that

00:18:08,290 --> 00:18:12,280
take these fundamental building blocks

00:18:10,210 --> 00:18:14,440
and assemble them in different ways so

00:18:12,280 --> 00:18:16,480
an example of that would be user

00:18:14,440 --> 00:18:18,970
experience that's more like a console

00:18:16,480 --> 00:18:22,390
the QT console of Jupiter is an example

00:18:18,970 --> 00:18:25,330
of this so it looks like a terminal but

00:18:22,390 --> 00:18:28,060
it has all the rich output that Jupiter

00:18:25,330 --> 00:18:29,800
supports another example would be the

00:18:28,060 --> 00:18:32,020
type of workflow that you get in an

00:18:29,800 --> 00:18:34,570
environment like hydrogen or our studio

00:18:32,020 --> 00:18:37,000
where your source code is really just a

00:18:34,570 --> 00:18:39,070
standalone Python or our script but you

00:18:37,000 --> 00:18:42,160
can somehow select blocks of code and

00:18:39,070 --> 00:18:44,380
then run them interactively right and in

00:18:42,160 --> 00:18:46,390
the classic Jupiter notebook it's been

00:18:44,380 --> 00:18:49,480
hard from the user interface perspective

00:18:46,390 --> 00:18:51,910
to offer and build other workflows like

00:18:49,480 --> 00:18:53,800
that and another thing that's important

00:18:51,910 --> 00:18:57,400
is that these emergent behaviors that I

00:18:53,800 --> 00:18:59,650
spoke about in the successes section in

00:18:57,400 --> 00:19:01,450
this context because we weren't ready

00:18:59,650 --> 00:19:02,510
for them really become a challenge for

00:19:01,450 --> 00:19:05,150
us

00:19:02,510 --> 00:19:08,600
the ecosystem has really become an

00:19:05,150 --> 00:19:11,059
abundant fertile rich garden at the same

00:19:08,600 --> 00:19:13,309
time we've got a code base in the

00:19:11,059 --> 00:19:15,950
classic Jupiter front end that's

00:19:13,309 --> 00:19:18,620
difficult to scale or maintain to span

00:19:15,950 --> 00:19:21,590
to really robustly cover all the usage

00:19:18,620 --> 00:19:25,039
cases where people are applying that at

00:19:21,590 --> 00:19:27,950
this point I want to bring Kyle Kelly up

00:19:25,039 --> 00:19:30,980
and Kyle's gonna talk more about how

00:19:27,950 --> 00:19:33,080
Jupiter front ends are built and by way

00:19:30,980 --> 00:19:34,820
of introduction I wanted to sort of give

00:19:33,080 --> 00:19:39,169
you context so when Kyle first showed up

00:19:34,820 --> 00:19:41,649
on the project I think it was late 2013

00:19:39,169 --> 00:19:45,919
or is that about right

00:19:41,649 --> 00:19:49,190
we are 2012 2012-2013 one of the his

00:19:45,919 --> 00:19:52,640
first contributions to ipython at the

00:19:49,190 --> 00:19:56,330
time was that Randall Munroe who is the

00:19:52,640 --> 00:19:59,570
author of the xkcd comic had started to

00:19:56,330 --> 00:20:01,490
mess with having an xkcd font and Kyle

00:19:59,570 --> 00:20:04,789
reached out to him and basically

00:20:01,490 --> 00:20:08,360
convinced him will you let I PI thon be

00:20:04,789 --> 00:20:10,760
the maintainer of the xkcd font and so

00:20:08,360 --> 00:20:13,789
that actually happened so if you go to

00:20:10,760 --> 00:20:16,730
the ipython org you will find the xkcd

00:20:13,789 --> 00:20:18,649
font and because of Kyle's work we are

00:20:16,730 --> 00:20:20,510
the official maintainer of that font and

00:20:18,649 --> 00:20:24,260
a lot of other fun things has happened

00:20:20,510 --> 00:20:26,750
so in more recently a member of our

00:20:24,260 --> 00:20:29,929
community actually wrote some Jupiter

00:20:26,750 --> 00:20:34,039
notebooks that take the raw we basically

00:20:29,929 --> 00:20:36,380
have a PNG or JPEG of the handwritten

00:20:34,039 --> 00:20:39,049
characters that that Randall Andros sent

00:20:36,380 --> 00:20:40,850
to us and now there's actually Jupiter

00:20:39,049 --> 00:20:44,390
notebooks that go from that raw image

00:20:40,850 --> 00:20:46,130
all the way to the font and the goes all

00:20:44,390 --> 00:20:48,080
the way through the process with kerning

00:20:46,130 --> 00:20:51,080
and ligatures and it's quite an amazing

00:20:48,080 --> 00:20:54,020
bit of work to go from a raw image to an

00:20:51,080 --> 00:20:56,929
actual usable font like that with that I

00:20:54,020 --> 00:20:58,730
will let Kyle take it away thank you for

00:20:56,929 --> 00:21:02,210
that enter

00:20:58,730 --> 00:21:02,210
this started

00:21:05,720 --> 00:21:10,700
alright so I'm gonna change change gears

00:21:09,290 --> 00:21:12,680
a little bit and talk about that

00:21:10,700 --> 00:21:16,250
protocol and why that matters like

00:21:12,680 --> 00:21:18,170
building a front-end and my big takeaway

00:21:16,250 --> 00:21:21,050
that I want you to have is that you

00:21:18,170 --> 00:21:22,640
could build a front end for Jupiter or

00:21:21,050 --> 00:21:25,640
that you can come and contribute and

00:21:22,640 --> 00:21:27,650
work on one of the Jupiter front ends so

00:21:25,640 --> 00:21:29,960
we've got a simple cell here someone's

00:21:27,650 --> 00:21:32,210
gonna do print pay and then you know

00:21:29,960 --> 00:21:33,740
hope to get hey back and the way the

00:21:32,210 --> 00:21:35,630
protocol works it's just this JSON

00:21:33,740 --> 00:21:37,180
message and this is not the actual

00:21:35,630 --> 00:21:39,170
protocol I'm doing kind of like a

00:21:37,180 --> 00:21:40,910
simplified version to walk through

00:21:39,170 --> 00:21:43,360
basically we said we're going to do an

00:21:40,910 --> 00:21:46,520
execution we say what the code is and

00:21:43,360 --> 00:21:48,620
then the kernel responds back and says

00:21:46,520 --> 00:21:51,010
that it's busy it's executing that code

00:21:48,620 --> 00:21:53,180
it says we have a status message and

00:21:51,010 --> 00:21:54,590
then we start getting in a stream of

00:21:53,180 --> 00:21:56,480
messages that are all just coming in as

00:21:54,590 --> 00:21:59,120
JSON so we get the stream it's one

00:21:56,480 --> 00:22:00,860
standard out with this hey and then

00:21:59,120 --> 00:22:03,440
eventually were idle because it has

00:22:00,860 --> 00:22:04,910
nothing else to execute so if you notice

00:22:03,440 --> 00:22:06,710
here there's there's nothing Python

00:22:04,910 --> 00:22:08,120
specific so like when we talked about

00:22:06,710 --> 00:22:10,100
some of those implementation details

00:22:08,120 --> 00:22:11,510
details that leaked through like a lot

00:22:10,100 --> 00:22:13,280
of this stuff is really beautiful and

00:22:11,510 --> 00:22:14,720
really rich to build those other kernels

00:22:13,280 --> 00:22:17,810
and to build front ends that work with

00:22:14,720 --> 00:22:19,490
any of them right and so two types of

00:22:17,810 --> 00:22:21,170
messages that we've seen so far just

00:22:19,490 --> 00:22:22,970
execution status and a stream of

00:22:21,170 --> 00:22:26,240
standard out but that's not why most

00:22:22,970 --> 00:22:28,550
people are using the notebook today and

00:22:26,240 --> 00:22:31,550
it's it's not as simple as just this

00:22:28,550 --> 00:22:32,870
linear sequence that you're expecting so

00:22:31,550 --> 00:22:34,730
like what what happens if you have the

00:22:32,870 --> 00:22:36,140
longer computation where it's going to

00:22:34,730 --> 00:22:38,770
sleep and they're gonna get a couple

00:22:36,140 --> 00:22:38,770
different messages

00:22:39,370 --> 00:22:43,309
so for each of those right we're gonna

00:22:41,720 --> 00:22:45,649
at the status it's gonna be busy and

00:22:43,309 --> 00:22:47,210
then each of those individually ends up

00:22:45,649 --> 00:22:49,730
is standard out right then they get

00:22:47,210 --> 00:22:50,929
flushed in the same way that you do in

00:22:49,730 --> 00:22:52,250
the terminal but in this case is a

00:22:50,929 --> 00:22:57,559
little bit richer because you have

00:22:52,250 --> 00:22:59,600
context of what's what and then to get

00:22:57,559 --> 00:23:01,520
to two tables plots and other rich media

00:22:59,600 --> 00:23:04,250
right how do we get what does what does

00:23:01,520 --> 00:23:05,899
pandas giving back to us to make it so

00:23:04,250 --> 00:23:07,730
that we see this here

00:23:05,899 --> 00:23:09,260
so if we go ahead and run this code we'd

00:23:07,730 --> 00:23:11,080
send over a message from the front end

00:23:09,260 --> 00:23:14,539
saying that we have this code to run and

00:23:11,080 --> 00:23:16,370
then what we get back and we're the the

00:23:14,539 --> 00:23:18,799
true richness of the protocol itself

00:23:16,370 --> 00:23:20,779
comes back in and executes result or

00:23:18,799 --> 00:23:22,520
display data and and in there there's a

00:23:20,779 --> 00:23:25,159
field that's just data which is a

00:23:22,520 --> 00:23:28,909
mapping from mime type to some payload

00:23:25,159 --> 00:23:31,190
so whether it's text plain or it's text

00:23:28,909 --> 00:23:33,559
HTML you're you're getting that same

00:23:31,190 --> 00:23:35,029
table but if you're at the command line

00:23:33,559 --> 00:23:38,690
you're getting plain and if you're in

00:23:35,029 --> 00:23:40,700
the notebook you get HTML right so when

00:23:38,690 --> 00:23:42,649
we get that HTML payload we just go

00:23:40,700 --> 00:23:45,770
ahead and drop it down and plop it into

00:23:42,649 --> 00:23:47,000
into the output itself but it's not it's

00:23:45,770 --> 00:23:49,630
not limited to just those simple

00:23:47,000 --> 00:23:52,669
primitives we've started establishing

00:23:49,630 --> 00:23:54,980
richer primitives like geo JSON here

00:23:52,669 --> 00:23:56,750
where you literally are sending over the

00:23:54,980 --> 00:23:58,600
JSON object and then getting a leaflet

00:23:56,750 --> 00:24:03,590
map that you can work with and customize

00:23:58,600 --> 00:24:05,419
and then for altair in Vegas and a lot

00:24:03,590 --> 00:24:07,880
of other libraries for emitting Vega we

00:24:05,419 --> 00:24:09,289
can we can plot it directly in line you

00:24:07,880 --> 00:24:11,330
don't have to you don't have to install

00:24:09,289 --> 00:24:13,309
Vega at all because it's built into the

00:24:11,330 --> 00:24:15,919
notebook itself it's not in classic

00:24:13,309 --> 00:24:20,990
notebook but it's in Jupiter lab and

00:24:15,919 --> 00:24:22,970
interact and hydrogen alright so that so

00:24:20,990 --> 00:24:24,620
we had the format so the next thing that

00:24:22,970 --> 00:24:26,870
we want to do is figure out how to build

00:24:24,620 --> 00:24:29,450
a notebook document and so we witnessed

00:24:26,870 --> 00:24:31,789
how we send code the code is sent to the

00:24:29,450 --> 00:24:34,240
runt runtime and then what we receive is

00:24:31,789 --> 00:24:34,240
a front-end

00:24:37,820 --> 00:24:42,649
so how do we form a notebook and how do

00:24:40,669 --> 00:24:47,809
we associate those messages to the cells

00:24:42,649 --> 00:24:50,029
they originated from and the key to this

00:24:47,809 --> 00:24:51,799
for us is message IDs like we have this

00:24:50,029 --> 00:24:53,779
stream of messages and so we need to

00:24:51,799 --> 00:24:55,820
associate where an original message came

00:24:53,779 --> 00:24:57,440
from so we we have a message ID on the

00:24:55,820 --> 00:24:59,179
unknown one we sent and then all

00:24:57,440 --> 00:25:01,789
responses refer to of originating

00:24:59,179 --> 00:25:02,899
messages the parent so we'll do those

00:25:01,789 --> 00:25:04,759
same messages again but we're gonna

00:25:02,899 --> 00:25:07,039
stick in a new field which is the

00:25:04,759 --> 00:25:08,539
message ID right and then we're gonna

00:25:07,039 --> 00:25:10,909
initialize our state we're like okay we

00:25:08,539 --> 00:25:12,619
sent code so as we build this document

00:25:10,909 --> 00:25:14,299
as we work through this I'm gonna do it

00:25:12,619 --> 00:25:18,369
in kind of like a yamo format on the

00:25:14,299 --> 00:25:21,200
side here and so we sent with 0 0 0 1

00:25:18,369 --> 00:25:24,769
and so we got a response that was

00:25:21,200 --> 00:25:30,799
message ID 0 0 0 2 and the parent refers

00:25:24,769 --> 00:25:32,419
to that one message and so now as we get

00:25:30,799 --> 00:25:34,190
as we get that message in we knew that

00:25:32,419 --> 00:25:35,779
the status was busy for that message and

00:25:34,190 --> 00:25:37,249
we can go ahead and say that the state

00:25:35,779 --> 00:25:39,710
at least in the front end was that it

00:25:37,249 --> 00:25:42,139
was busy and then we get our first

00:25:39,710 --> 00:25:44,960
stream message in and we can stick that

00:25:42,139 --> 00:25:47,299
in as as an outputs field stick in that

00:25:44,960 --> 00:25:49,759
extreme as text and then what the name

00:25:47,299 --> 00:25:51,470
is this is really close to what the

00:25:49,759 --> 00:25:53,269
actual notebook format looks like except

00:25:51,470 --> 00:25:56,960
I'm not doing in JSON here so that you

00:25:53,269 --> 00:25:58,729
can you can read it all in one will get

00:25:56,960 --> 00:26:01,340
the status that's idle and then we've

00:25:58,729 --> 00:26:02,869
got that full final state right where

00:26:01,340 --> 00:26:06,950
we've got the code the status and the

00:26:02,869 --> 00:26:08,870
outputs themselves right and then we can

00:26:06,950 --> 00:26:10,999
go ahead and render that

00:26:08,870 --> 00:26:12,289
since it's like a pure front-end tuck I

00:26:10,999 --> 00:26:13,909
was like do I need to tell people it's

00:26:12,289 --> 00:26:16,340
like you know I'm gonna I'm gonna dry

00:26:13,909 --> 00:26:18,529
out reality is here we've got an editor

00:26:16,340 --> 00:26:20,179
that's with code NIR and then we're

00:26:18,529 --> 00:26:22,039
rendering like what the number is for

00:26:20,179 --> 00:26:24,230
the input and then we're also showing

00:26:22,039 --> 00:26:26,029
the outputs themselves right and we just

00:26:24,230 --> 00:26:29,029
we appended the Dom and create this

00:26:26,029 --> 00:26:31,610
overall it's like a work log that we're

00:26:29,029 --> 00:26:33,620
building with so so what would an entire

00:26:31,610 --> 00:26:35,990
notebook structure look like and like

00:26:33,620 --> 00:26:37,970
what what is the notebook write the

00:26:35,990 --> 00:26:39,919
notebook is this rolling work log of

00:26:37,970 --> 00:26:42,409
computations we're going through it we

00:26:39,919 --> 00:26:43,970
have this linear list of cells and we as

00:26:42,409 --> 00:26:45,649
humans get to work with an onion

00:26:43,970 --> 00:26:49,809
linearly but the way that it forms on

00:26:45,649 --> 00:26:49,809
the page is just this list of cells

00:26:50,019 --> 00:26:54,350
right so if we if we put together a

00:26:52,669 --> 00:26:55,759
whole bunch of cells all together right

00:26:54,350 --> 00:26:57,889
we can have these text fields for the

00:26:55,759 --> 00:26:59,149
markdown the code and the outputs and

00:26:57,889 --> 00:27:01,070
everything else like this is literally

00:26:59,149 --> 00:27:03,440
this is the entire notebook you could

00:27:01,070 --> 00:27:04,909
create your own Brian was like don't

00:27:03,440 --> 00:27:06,169
don't tell people we could do the format

00:27:04,909 --> 00:27:07,519
Izzie animal but look it's like the

00:27:06,169 --> 00:27:14,330
entire notebook is yeah Mel it's

00:27:07,519 --> 00:27:15,889
difficult I didn't say that okay right

00:27:14,330 --> 00:27:17,330
and so and then we can render exactly

00:27:15,889 --> 00:27:18,919
that same notebook right so we've got

00:27:17,330 --> 00:27:21,919
this one and then there's the

00:27:18,919 --> 00:27:23,299
representation of it right so just

00:27:21,919 --> 00:27:25,070
summarize the notebook right we're

00:27:23,299 --> 00:27:26,629
sending code we're just we're gonna run

00:27:25,070 --> 00:27:31,610
that code get results

00:27:26,629 --> 00:27:35,269
plot yay that's it and yeah that's the

00:27:31,610 --> 00:27:36,710
notebook so I've skimmed over this and

00:27:35,269 --> 00:27:38,059
if you want more in-depth on protocols

00:27:36,710 --> 00:27:40,190
and format there's there's at least two

00:27:38,059 --> 00:27:41,659
other talks that you should go to the

00:27:40,190 --> 00:27:43,369
Jupiter kernels protocols and the I

00:27:41,659 --> 00:27:45,799
Python reference implementation talk

00:27:43,369 --> 00:27:47,600
that was tomorrow something earlier in

00:27:45,799 --> 00:27:50,119
the morning and then the Jupiter

00:27:47,600 --> 00:27:52,129
notebook is document talk and just from

00:27:50,119 --> 00:27:56,049
structure to application and that's

00:27:52,129 --> 00:27:56,049
later later in the afternoon tomorrow

00:27:56,210 --> 00:28:01,370
and so I think what's what's important

00:27:59,840 --> 00:28:03,380
now to the protocols here is that you're

00:28:01,370 --> 00:28:06,470
not really tied in to building just a

00:28:03,380 --> 00:28:08,150
notebook right you you can build a

00:28:06,470 --> 00:28:10,309
front-end that actually will work as you

00:28:08,150 --> 00:28:12,200
can have consoles you can have like it

00:28:10,309 --> 00:28:13,670
days here for Jupiter lab you can have a

00:28:12,200 --> 00:28:15,650
full-blown notebook you can have

00:28:13,670 --> 00:28:18,080
something that's QT console style you

00:28:15,650 --> 00:28:19,670
can build really what whatever you want

00:28:18,080 --> 00:28:23,720
but with those kind of primitives

00:28:19,670 --> 00:28:26,059
underneath and then here's an example

00:28:23,720 --> 00:28:28,280
this is hydrogen this this works in line

00:28:26,059 --> 00:28:31,400
in atom you can you can select code and

00:28:28,280 --> 00:28:33,799
run it directly inside of inside of your

00:28:31,400 --> 00:28:35,210
editor and iterate with it you're not

00:28:33,799 --> 00:28:36,470
getting a notebook at the end but for a

00:28:35,210 --> 00:28:37,760
lot of people this is literally what

00:28:36,470 --> 00:28:39,230
they want because they only want to work

00:28:37,760 --> 00:28:41,690
with a script they don't want to work

00:28:39,230 --> 00:28:43,220
with a notebook I end up doing a lot of

00:28:41,690 --> 00:28:47,390
experimentation here because I just want

00:28:43,220 --> 00:28:49,280
to scratch this and like I was saying

00:28:47,390 --> 00:28:52,540
about kind of experimentation

00:28:49,280 --> 00:28:52,540
I was this loading

00:28:54,170 --> 00:28:58,340
we go

00:28:56,000 --> 00:28:59,810
so hydrogen introduced a watch

00:28:58,340 --> 00:29:03,800
expressions concept where they're

00:28:59,810 --> 00:29:05,600
storing the outputs instead of instead

00:29:03,800 --> 00:29:08,600
of creating a cell it's effectively

00:29:05,600 --> 00:29:10,250
every time you run code it reruns this

00:29:08,600 --> 00:29:11,900
little section of code and then stores

00:29:10,250 --> 00:29:13,580
the output and then you can scroll

00:29:11,900 --> 00:29:15,200
through that output to see how it

00:29:13,580 --> 00:29:16,700
changed so you can kind of play with a

00:29:15,200 --> 00:29:19,640
parameter and go through it this is what

00:29:16,700 --> 00:29:21,020
they call watch expressions when I first

00:29:19,640 --> 00:29:22,820
saw this I was like oh this is silly you

00:29:21,020 --> 00:29:24,500
should like build it with widgets and

00:29:22,820 --> 00:29:26,000
everything else and then I was like oh

00:29:24,500 --> 00:29:27,560
this is simple like I don't I don't have

00:29:26,000 --> 00:29:29,570
to do much I can literally work in any

00:29:27,560 --> 00:29:32,740
language I get I get this and it's just

00:29:29,570 --> 00:29:32,740
because of the Jupiter protocol

00:29:35,950 --> 00:29:43,360
and then interact itself is another

00:29:39,790 --> 00:29:46,210
front-end it's it's built upon electron

00:29:43,360 --> 00:29:48,310
and it's really just a classic notebook

00:29:46,210 --> 00:29:49,920
stripped down trying to be as minimal as

00:29:48,310 --> 00:29:52,600
possible trying to reach an audience of

00:29:49,920 --> 00:29:54,040
primarily analysts and people that just

00:29:52,600 --> 00:29:55,690
generally kind of want this like simpler

00:29:54,040 --> 00:29:57,940
UI to work with it and just work with

00:29:55,690 --> 00:29:59,680
the files themselves and some level it's

00:29:57,940 --> 00:30:01,720
not any different than the Jupiter

00:29:59,680 --> 00:30:06,730
notebook it's an opinionated stance on

00:30:01,720 --> 00:30:08,200
how to build it and then one other thing

00:30:06,730 --> 00:30:11,410
that I'm gonna skip to the end here is

00:30:08,200 --> 00:30:14,650
we're running out is rodeo and so this

00:30:11,410 --> 00:30:16,720
is similar to Jupiter lab but it's as a

00:30:14,650 --> 00:30:19,360
as a desktop app and they have their own

00:30:16,720 --> 00:30:20,950
kind of way of showing plots and tables

00:30:19,360 --> 00:30:22,630
and everything else kind of in line so

00:30:20,950 --> 00:30:24,760
it's it's like they built in our studio

00:30:22,630 --> 00:30:26,890
about on top of the Jupiter protocols

00:30:24,760 --> 00:30:28,770
and they had no involvement from us they

00:30:26,890 --> 00:30:33,670
were able to just build it themselves so

00:30:28,770 --> 00:30:35,230
anything I said you can build it too so

00:30:33,670 --> 00:30:36,490
if you want some more in-depth talks on

00:30:35,230 --> 00:30:38,410
alternative front-ends

00:30:36,490 --> 00:30:40,720
kaggle built their own kind of front end

00:30:38,410 --> 00:30:42,640
they call they call it kernels for how

00:30:40,720 --> 00:30:44,440
they interact with their notebooks it's

00:30:42,640 --> 00:30:46,150
got a good sharing platform and then the

00:30:44,440 --> 00:30:49,860
jupiter lap talk if you stick around in

00:30:46,150 --> 00:30:49,860
this room that'll be here as well

00:30:52,020 --> 00:30:54,860
and that's it

00:31:00,070 --> 00:31:07,790
mandatory quick I still live here

00:31:05,059 --> 00:31:11,510
Kyle forgot to mention he's also giving

00:31:07,790 --> 00:31:15,950
another talk today at 2:40 I think it's

00:31:11,510 --> 00:31:18,740
on his work at Netflix supporting users

00:31:15,950 --> 00:31:22,420
there who are doing a lot of work with

00:31:18,740 --> 00:31:25,850
notebooks so check out that puck as well

00:31:22,420 --> 00:31:28,179
so we have questions we got about three

00:31:25,850 --> 00:31:28,179
minutes

00:31:38,170 --> 00:31:41,339
[Music]

00:31:45,820 --> 00:31:53,350
that's her be happy to talk about that

00:31:48,330 --> 00:31:55,210
so what so the question was have have we

00:31:53,350 --> 00:31:56,679
thought about using like a patchy arrow

00:31:55,210 --> 00:31:58,299
in the front end there's a data

00:31:56,679 --> 00:32:00,879
interchange format as well as what what

00:31:58,299 --> 00:32:02,979
we're going to show on the outputs so

00:32:00,879 --> 00:32:04,179
arrow itself is in binary and if you're

00:32:02,979 --> 00:32:05,859
used to working with your images you

00:32:04,179 --> 00:32:08,739
might know that they're base64 encoded

00:32:05,859 --> 00:32:11,169
images that end up in the notebook and

00:32:08,739 --> 00:32:12,999
so one possible option is that one could

00:32:11,169 --> 00:32:14,470
just send that over it's like a base64

00:32:12,999 --> 00:32:17,229
encoded blob and they'd end up in the

00:32:14,470 --> 00:32:19,690
notebook but it would get really big my

00:32:17,229 --> 00:32:21,340
hope so what we didn't cover on the

00:32:19,690 --> 00:32:23,349
protocols is that there's actually like

00:32:21,340 --> 00:32:24,940
a binary section of the protocol that we

00:32:23,349 --> 00:32:26,169
could that we could put stuff through

00:32:24,940 --> 00:32:28,690
and I'm really hoping that maybe we can

00:32:26,169 --> 00:32:30,340
have a data protocol there or at least a

00:32:28,690 --> 00:32:33,369
way for us to kind of like pass data

00:32:30,340 --> 00:32:35,080
around or where we might stage data

00:32:33,369 --> 00:32:36,999
locally where it wouldn't be part of the

00:32:35,080 --> 00:32:39,519
notebook document but no we acknowledge

00:32:36,999 --> 00:32:41,679
it especially to work between different

00:32:39,519 --> 00:32:44,580
kernels but no no active work what I'm

00:32:41,679 --> 00:32:44,580
really interested in it

00:32:51,980 --> 00:32:56,600
so the question was do the alternative

00:32:54,559 --> 00:32:58,190
do the other front-end support like the

00:32:56,600 --> 00:33:02,240
ipython widgets and other third-party

00:32:58,190 --> 00:33:06,880
pieces so Jupiter lab dies yeah that's

00:33:02,240 --> 00:33:09,799
about it I can come in a little more so

00:33:06,880 --> 00:33:13,760
the the widgets team has worked been

00:33:09,799 --> 00:33:17,510
working really hard to document their

00:33:13,760 --> 00:33:19,580
own message specification in terms of

00:33:17,510 --> 00:33:23,210
you know they they send JSON messages

00:33:19,580 --> 00:33:25,669
over the channels that we've set up and

00:33:23,210 --> 00:33:27,500
the the challenges traditionally there

00:33:25,669 --> 00:33:30,500
was no real documentation about the

00:33:27,500 --> 00:33:32,240
format of those messages and that made

00:33:30,500 --> 00:33:34,130
it really difficult for other front-ends

00:33:32,240 --> 00:33:35,659
to implement that that part of the

00:33:34,130 --> 00:33:38,149
message spec so they have been

00:33:35,659 --> 00:33:39,860
definitely working on that it's a work

00:33:38,149 --> 00:33:40,940
in progress or hope though is that we'll

00:33:39,860 --> 00:33:43,610
get to the point where there's a

00:33:40,940 --> 00:33:46,039
standardized message specification for

00:33:43,610 --> 00:33:48,889
both front ends and for kernels to

00:33:46,039 --> 00:33:51,019
implement widgets is the other thing

00:33:48,889 --> 00:33:52,880
that I've run into in production is as

00:33:51,019 --> 00:33:54,919
the the widgets change especially on the

00:33:52,880 --> 00:33:57,350
front end side not all the kernels have

00:33:54,919 --> 00:33:59,600
and so like the our kernel had support

00:33:57,350 --> 00:34:01,610
for it and as soon as widgets put out a

00:33:59,600 --> 00:34:03,980
new release the our kernel was broken

00:34:01,610 --> 00:34:05,419
for us I was like okay we need to revert

00:34:03,980 --> 00:34:07,490
this and just not support widgets then

00:34:05,419 --> 00:34:10,899
at that point but we really want that to

00:34:07,490 --> 00:34:10,899
stabilize as much as possible

00:34:13,810 --> 00:34:19,960
ha question was how are these messages

00:34:16,330 --> 00:34:21,490
consumed on the client-side so in the on

00:34:19,960 --> 00:34:25,240
all the web front-ends they come on over

00:34:21,490 --> 00:34:28,140
WebSockets on at least on interact and

00:34:25,240 --> 00:34:30,700
hydrogen that goes directly over 0 mq

00:34:28,140 --> 00:34:31,960
and then the jupiter lab app is actually

00:34:30,700 --> 00:34:38,400
spinning up a notebook server so that

00:34:31,960 --> 00:34:38,400
one's over WebSockets two questions back

00:35:03,770 --> 00:35:08,540
so the question is is asking about the

00:35:06,410 --> 00:35:11,720
so-called comm channel that we have the

00:35:08,540 --> 00:35:15,619
comm channel it's basically a namespaced

00:35:11,720 --> 00:35:19,190
way for third parties to send messages

00:35:15,619 --> 00:35:21,380
over our network protocol and the

00:35:19,190 --> 00:35:23,360
question is do we view that third

00:35:21,380 --> 00:35:27,290
parties using the comm channel as sort

00:35:23,360 --> 00:35:29,690
of sort of undesired or or an embraced

00:35:27,290 --> 00:35:33,140
way of extending the platform and I

00:35:29,690 --> 00:35:36,830
would say in general we that's exactly

00:35:33,140 --> 00:35:39,770
what it's for is for extensibility with

00:35:36,830 --> 00:35:42,680
one caveat and that is that our hope and

00:35:39,770 --> 00:35:46,130
our vision is that everyone using that

00:35:42,680 --> 00:35:48,470
would define a JSON schema so that other

00:35:46,130 --> 00:35:50,840
people know precisely what is being sent

00:35:48,470 --> 00:35:52,910
over the channel but that I think is our

00:35:50,840 --> 00:35:55,790
and your and your own fellow engineers

00:35:52,910 --> 00:35:59,119
when eventually you break yourself yes

00:35:55,790 --> 00:36:01,369
so you basically version JSON schema is

00:35:59,119 --> 00:36:04,220
something that we are thinking a lot

00:36:01,369 --> 00:36:05,840
about across the entire code base and

00:36:04,220 --> 00:36:07,850
then and then I would say another thing

00:36:05,840 --> 00:36:10,820
and why you want to try to get a

00:36:07,850 --> 00:36:12,770
document I did and like once you start

00:36:10,820 --> 00:36:14,450
working on comms maybe you prototype

00:36:12,770 --> 00:36:17,720
something we should try to bring those

00:36:14,450 --> 00:36:19,369
more into like the main pieces like you

00:36:17,720 --> 00:36:22,460
know if it's something that's uniquely

00:36:19,369 --> 00:36:24,080
useful like I think there are like 12

00:36:22,460 --> 00:36:27,410
different implementations of custom

00:36:24,080 --> 00:36:30,140
spark UI for your front ends and like I

00:36:27,410 --> 00:36:31,820
would like more of those to merge as

00:36:30,140 --> 00:36:33,170
much as possible like you know they can

00:36:31,820 --> 00:36:34,250
they can be diverse however they want

00:36:33,170 --> 00:36:36,109
but at the very least like the

00:36:34,250 --> 00:36:38,770
out-of-the-box experience and Jupiters

00:36:36,109 --> 00:36:38,770
to be much better

00:36:48,120 --> 00:36:52,500
so the question here is how much work is

00:36:50,370 --> 00:36:57,660
involved to migrate classic notebook

00:36:52,500 --> 00:37:00,600
extensions to Jupiter lab it really

00:36:57,660 --> 00:37:02,580
depends on what it is in some cases it's

00:37:00,600 --> 00:37:04,860
not bad at all in other cases it would

00:37:02,580 --> 00:37:06,630
be a huge amount of work if you want to

00:37:04,860 --> 00:37:07,920
come to our Jupiter lab talk right after

00:37:06,630 --> 00:37:10,920
this you can learn a bit more about

00:37:07,920 --> 00:37:12,570
about that stuff and we're available for

00:37:10,920 --> 00:37:15,480
questions not answered there there are

00:37:12,570 --> 00:37:18,920
Sprint's on Saturday in which you can

00:37:15,480 --> 00:37:18,920
sprint exactly on that problem

00:37:59,240 --> 00:38:04,190
yeah so the question is do we are we

00:38:02,450 --> 00:38:06,609
shifting our thinking towards the

00:38:04,190 --> 00:38:10,240
Jupiter architecture being the standard

00:38:06,609 --> 00:38:14,330
and the Jupiter like the Jupiter

00:38:10,240 --> 00:38:16,280
official front ends being one amongst

00:38:14,330 --> 00:38:18,440
many implementations or sort of how are

00:38:16,280 --> 00:38:21,170
we balancing that I think our

00:38:18,440 --> 00:38:23,180
perspective is that our user community

00:38:21,170 --> 00:38:27,109
is big enough and growing fast enough

00:38:23,180 --> 00:38:29,570
that there's no way we are sort of core

00:38:27,109 --> 00:38:31,670
jupiter developer team can support all

00:38:29,570 --> 00:38:34,880
of those users in all those usage cases

00:38:31,670 --> 00:38:38,119
it is not possible and so our our goal

00:38:34,880 --> 00:38:40,070
is to build the platform in a way that

00:38:38,119 --> 00:38:42,440
all of you and other people can build

00:38:40,070 --> 00:38:45,020
things for all those different usage

00:38:42,440 --> 00:38:47,119
cases and at the same time balance that

00:38:45,020 --> 00:38:49,900
with us maintaining a core experience

00:38:47,119 --> 00:38:53,270
that serves a decent number of users

00:38:49,900 --> 00:38:55,490
that sort of the traditional users of

00:38:53,270 --> 00:38:58,310
Jupiter really are sort of in the

00:38:55,490 --> 00:39:00,770
classic scientific computing research

00:38:58,310 --> 00:39:03,380
data science machine learning type of

00:39:00,770 --> 00:39:05,810
space Kyle I think has a great

00:39:03,380 --> 00:39:08,359
perspective on this at Netflix as he

00:39:05,810 --> 00:39:09,550
supports a very wide range of users so I

00:39:08,359 --> 00:39:14,390
don't know if you want to add to that

00:39:09,550 --> 00:39:17,570
yeah I'm definitely noticing like we we

00:39:14,390 --> 00:39:19,640
have to support multiple front ends like

00:39:17,570 --> 00:39:20,690
there are people that use notebooks kind

00:39:19,640 --> 00:39:22,550
of as templates where they've

00:39:20,690 --> 00:39:24,770
effectively written out a query that

00:39:22,550 --> 00:39:26,060
they're going to use and it's kind of

00:39:24,770 --> 00:39:28,550
like a dashboard but they really need to

00:39:26,060 --> 00:39:30,290
change it and they want to like fork

00:39:28,550 --> 00:39:31,849
over from it but if they see too much

00:39:30,290 --> 00:39:33,530
going on on the screen they're just

00:39:31,849 --> 00:39:36,410
they're gonna like I'm not I'm not using

00:39:33,530 --> 00:39:37,790
this tool like like I'm gonna go to my

00:39:36,410 --> 00:39:41,150
you know whatever I want to be or be in

00:39:37,790 --> 00:39:43,339
tableau or whatever else so that's yeah

00:39:41,150 --> 00:39:46,780
yeah so we actually and unlike we deploy

00:39:43,339 --> 00:39:46,780
multiple friends now so

00:39:47,530 --> 00:39:53,630
thank were out of time please come up

00:39:52,220 --> 00:39:57,740
afterwards we can answer more questions

00:39:53,630 --> 00:40:00,830
we also have a Jupiter booth in the

00:39:57,740 --> 00:40:03,800
sponsored pavilion there it's at the far

00:40:00,830 --> 00:40:06,380
end so please drop by to chat with Kyle

00:40:03,800 --> 00:40:09,780
myself or other Jupiter developers and

00:40:06,380 --> 00:40:14,669
with that I think we'll finish

00:40:09,780 --> 00:40:14,669

YouTube URL: https://www.youtube.com/watch?v=YKmJvHjTGAM


