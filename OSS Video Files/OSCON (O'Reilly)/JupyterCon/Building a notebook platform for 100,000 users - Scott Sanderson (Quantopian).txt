Title: Building a notebook platform for 100,000 users - Scott Sanderson (Quantopian)
Publication date: 2017-09-22
Playlist: JupyterCon
Description: 
	Scott Sanderson describes the architecture of the Quantopian Research Platform, a Jupyter Notebook deployment serving a community of over 100,000 users, explaining how, using standard extension mechanisms, it provides robust storage and retrieval of hundreds of gigabytes of notebooks, integrates notebooks into an existing web application, and enables sharing notebooks between users.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,579 --> 00:00:07,609
my name is Scott Sanderson and the title

00:00:04,520 --> 00:00:10,639
of this talk is hosting notebooks for a

00:00:07,609 --> 00:00:12,830
hundred thousand users you can find me

00:00:10,639 --> 00:00:14,930
online at these various places on s

00:00:12,830 --> 00:00:18,590
Anderson on github Scott P Sanderson on

00:00:14,930 --> 00:00:20,720
Twitter the slides will be posted to a

00:00:18,590 --> 00:00:21,950
sinner since Jupiter con 2017 but if you

00:00:20,720 --> 00:00:24,230
go there right now you're gonna get an

00:00:21,950 --> 00:00:27,320
empty github repo so don't try to follow

00:00:24,230 --> 00:00:30,050
along with the talk and I work for a

00:00:27,320 --> 00:00:33,350
quanto peon so a little bit about quanto

00:00:30,050 --> 00:00:35,750
peon quanto peon is a platform where

00:00:33,350 --> 00:00:38,480
people can come together as community

00:00:35,750 --> 00:00:40,550
and write algorithmic trading strategies

00:00:38,480 --> 00:00:42,710
and python in the browser so we provide

00:00:40,550 --> 00:00:44,690
a host of research platform and a

00:00:42,710 --> 00:00:46,489
back-testing api and all sorts of

00:00:44,690 --> 00:00:47,960
different kinds of datasets for people

00:00:46,489 --> 00:00:51,680
to write tests and develop training

00:00:47,960 --> 00:00:53,660
algorithms so the outline for this talk

00:00:51,680 --> 00:00:55,520
we're actually gonna start with a demo

00:00:53,660 --> 00:00:56,780
of the thing that we're gonna be talking

00:00:55,520 --> 00:00:58,100
about buildings we have a sense of sort

00:00:56,780 --> 00:01:00,020
of what we're trying to get to and what

00:00:58,100 --> 00:01:01,250
the goal is

00:01:00,020 --> 00:01:03,140
then we're gonna sort of take a step

00:01:01,250 --> 00:01:05,449
back and talk about sort of what the

00:01:03,140 --> 00:01:07,060
goals and challenges were of the project

00:01:05,449 --> 00:01:11,020
that I'm gonna be talking about today

00:01:07,060 --> 00:01:15,590
and then we're gonna talk about the

00:01:11,020 --> 00:01:17,479
different ways that quanto pian extends

00:01:15,590 --> 00:01:18,740
or modifies or otherwise sort of mucks

00:01:17,479 --> 00:01:20,209
with the standard behavior of the

00:01:18,740 --> 00:01:22,249
jupiter notebook in order in order to

00:01:20,209 --> 00:01:23,509
support the kinds of workloads and the

00:01:22,249 --> 00:01:25,670
kind of use cases that we're interested

00:01:23,509 --> 00:01:27,499
in so in particular a couple things

00:01:25,670 --> 00:01:29,630
we're gonna look at is how quanto being

00:01:27,499 --> 00:01:31,759
manages user identity for its jupiter

00:01:29,630 --> 00:01:34,789
notebook deployment how we deal with

00:01:31,759 --> 00:01:36,829
notebook storage dealing with

00:01:34,789 --> 00:01:37,939
potentially multiple jupiter hubs in

00:01:36,829 --> 00:01:40,700
order to scale out to the number of

00:01:37,939 --> 00:01:43,700
users we want to support and finally how

00:01:40,700 --> 00:01:47,599
we allow users to share notebooks with

00:01:43,700 --> 00:01:49,639
one another so start off we're gonna do

00:01:47,599 --> 00:01:51,979
demo so this is the quanto peon website

00:01:49,639 --> 00:01:53,659
so if you just type in quanto ping com

00:01:51,979 --> 00:01:55,849
you're logged in you'll get dropped here

00:01:53,659 --> 00:01:57,109
which is the community page and this is

00:01:55,849 --> 00:01:58,369
a place where people can share and

00:01:57,109 --> 00:01:59,409
discuss and talk about the training

00:01:58,369 --> 00:02:02,299
algorithms they've written

00:01:59,409 --> 00:02:03,499
if you switch over to algorithms this

00:02:02,299 --> 00:02:05,810
sort of takes you to the place where you

00:02:03,499 --> 00:02:10,340
actually work on the logic for your

00:02:05,810 --> 00:02:12,410
training strategies this is what the

00:02:10,340 --> 00:02:14,660
this is so this is what sort of quanto

00:02:12,410 --> 00:02:16,370
peein looked like or

00:02:14,660 --> 00:02:17,660
is what all of quanto peon development

00:02:16,370 --> 00:02:20,030
looked like at the start of this project

00:02:17,660 --> 00:02:21,320
so we had this IDE it's built on code

00:02:20,030 --> 00:02:23,930
mirror which is the same text editor

00:02:21,320 --> 00:02:25,820
that Jupiter is built on top of and you

00:02:23,930 --> 00:02:26,960
can write sort of the logic for your

00:02:25,820 --> 00:02:28,850
trading strategy on the left-hand side

00:02:26,960 --> 00:02:29,840
and then you can set some parameters for

00:02:28,850 --> 00:02:31,760
it on the right hand side and you can

00:02:29,840 --> 00:02:33,500
run back to us so this is sort of the

00:02:31,760 --> 00:02:34,850
simplest possible hello world algorithm

00:02:33,500 --> 00:02:36,650
so we have an initialized function that

00:02:34,850 --> 00:02:38,030
doesn't do anything and then we have a

00:02:36,650 --> 00:02:39,380
handle data function that's going to get

00:02:38,030 --> 00:02:40,940
called once every minute so this

00:02:39,380 --> 00:02:44,270
algorithm just gonna order a share of

00:02:40,940 --> 00:02:45,850
Apple every minute and if I hit run back

00:02:44,270 --> 00:02:48,110
to store Bill algorithm and the

00:02:45,850 --> 00:02:50,510
conference Wi-Fi gods are being kind to

00:02:48,110 --> 00:02:52,700
me we may see some progress here

00:02:50,510 --> 00:02:56,090
eventually but I'm not gonna hold that

00:02:52,700 --> 00:02:59,200
up for too long at some point we may

00:02:56,090 --> 00:03:02,720
eventually see things happen anyway so

00:02:59,200 --> 00:03:04,010
circa sort of early to 2014 this was

00:03:02,720 --> 00:03:05,150
kind of the state of the platform we had

00:03:04,010 --> 00:03:07,160
this place where you could come and

00:03:05,150 --> 00:03:08,660
write the logic of a trading strategy so

00:03:07,160 --> 00:03:10,940
if you had a trading strategy in mind

00:03:08,660 --> 00:03:16,760
this was sort of a really good place to

00:03:10,940 --> 00:03:20,120
come and read your back test so the the

00:03:16,760 --> 00:03:22,430
problem with that is most of the time

00:03:20,120 --> 00:03:24,560
that you are do you want to spend

00:03:22,430 --> 00:03:26,090
developing a trading strategy isn't

00:03:24,560 --> 00:03:28,070
writing the logic for your trading

00:03:26,090 --> 00:03:29,840
strategy right the hard part of writing

00:03:28,070 --> 00:03:32,360
an algorithm isn't writing the algorithm

00:03:29,840 --> 00:03:33,740
it's researching the ideas behind the

00:03:32,360 --> 00:03:35,120
algorithm right it's looking through

00:03:33,740 --> 00:03:36,709
data visualizing data trying to

00:03:35,120 --> 00:03:38,900
understand patterns and trends and data

00:03:36,709 --> 00:03:40,250
and trying to develop some thesis about

00:03:38,900 --> 00:03:41,660
how the market works that you can then

00:03:40,250 --> 00:03:43,100
exploit in a trading algorithm and

00:03:41,660 --> 00:03:44,720
that's sort of where most of the

00:03:43,100 --> 00:03:46,730
interesting novel work happens and then

00:03:44,720 --> 00:03:48,110
when you finally have an idea that you

00:03:46,730 --> 00:03:50,150
think is validated that you want to test

00:03:48,110 --> 00:03:52,010
at that point you want to take it and

00:03:50,150 --> 00:03:53,209
actually put it inside a trading

00:03:52,010 --> 00:03:55,640
algorithm so what we found you know

00:03:53,209 --> 00:03:56,510
circa early 2014 is that we had users

00:03:55,640 --> 00:03:58,310
that were giving us these kind of

00:03:56,510 --> 00:03:59,840
strange feature requests so things like

00:03:58,310 --> 00:04:02,300
I want my trading our rhythm team to be

00:03:59,840 --> 00:04:05,930
able to plot data or I want my trading

00:04:02,300 --> 00:04:08,300
algorithm to be able to like stop and

00:04:05,930 --> 00:04:10,100
let me inspect all the values so that I

00:04:08,300 --> 00:04:11,660
can like do an interactive analysis from

00:04:10,100 --> 00:04:12,800
inside my algorithm and you know

00:04:11,660 --> 00:04:14,120
initially we were like that's that's

00:04:12,800 --> 00:04:15,530
kind of strange that's not sort of what

00:04:14,120 --> 00:04:17,690
the point of an online trading algorithm

00:04:15,530 --> 00:04:20,450
was and what we eventually realized was

00:04:17,690 --> 00:04:21,980
that you know people what they wanted

00:04:20,450 --> 00:04:24,140
was Jupiter they wanted some way to

00:04:21,980 --> 00:04:26,419
interactively explore the data that was

00:04:24,140 --> 00:04:28,130
available on the platform so they wanted

00:04:26,419 --> 00:04:28,310
people to explore and visualize data you

00:04:28,130 --> 00:04:30,260
know

00:04:28,310 --> 00:04:31,580
test their hypotheses analyze the

00:04:30,260 --> 00:04:33,410
results of their back tests all these

00:04:31,580 --> 00:04:35,300
things that we sort of think of as you

00:04:33,410 --> 00:04:36,410
know interactive data science tasks

00:04:35,300 --> 00:04:39,020
which are the things that Jupiter is a

00:04:36,410 --> 00:04:41,510
really great environment for and so what

00:04:39,020 --> 00:04:45,710
we wanted to do was somehow integrate

00:04:41,510 --> 00:04:47,270
Jupiter to the platform so we wanted to

00:04:45,710 --> 00:04:48,470
so a couple of the interesting

00:04:47,270 --> 00:04:50,180
challenges that we had as a result of

00:04:48,470 --> 00:04:51,950
that is we already had this large

00:04:50,180 --> 00:04:54,230
website that was built around this IDE

00:04:51,950 --> 00:04:56,270
so we needed to somehow take Jupiter and

00:04:54,230 --> 00:04:59,300
embed it or make it a part of that

00:04:56,270 --> 00:05:01,370
existing application we wanted to

00:04:59,300 --> 00:05:03,560
support our pretty large user base so

00:05:01,370 --> 00:05:05,240
quanto P and I think has north of I

00:05:03,560 --> 00:05:07,070
don't know what our last announced

00:05:05,240 --> 00:05:12,110
number but somewhere on the order of

00:05:07,070 --> 00:05:14,240
like 120,000 registered users and so

00:05:12,110 --> 00:05:15,500
that's that's quite a large you know

00:05:14,240 --> 00:05:17,419
notebook deployment and we wanted to be

00:05:15,500 --> 00:05:18,740
able to allow all of those people or at

00:05:17,419 --> 00:05:20,240
least you know the subset of those

00:05:18,740 --> 00:05:22,280
people who are online and any given time

00:05:20,240 --> 00:05:23,810
to do their analyses and the kinds of

00:05:22,280 --> 00:05:25,400
analyses they want to do are pretty

00:05:23,810 --> 00:05:26,540
pretty resource intensive so that was

00:05:25,400 --> 00:05:29,000
gonna be sort of interesting challenge

00:05:26,540 --> 00:05:31,250
for us and then another important goal

00:05:29,000 --> 00:05:33,110
for us was that a big part of quanto

00:05:31,250 --> 00:05:34,669
pian is is the community aspect of it

00:05:33,110 --> 00:05:36,590
right that you can share and talk about

00:05:34,669 --> 00:05:38,240
and discuss your algorithms and you know

00:05:36,590 --> 00:05:41,270
trade ideas with people and so we wanted

00:05:38,240 --> 00:05:43,190
to have some robust support for sharing

00:05:41,270 --> 00:05:47,330
and using the notebook to interact with

00:05:43,190 --> 00:05:48,470
other quanto peein users right so just

00:05:47,330 --> 00:05:51,020
to sort of repeat some of the things i

00:05:48,470 --> 00:05:52,580
just talked about so financial analyses

00:05:51,020 --> 00:05:55,460
generally are pretty RAM and CPU

00:05:52,580 --> 00:05:57,440
intensive so this trying to scale to

00:05:55,460 --> 00:05:58,550
support the kinds of workloads we wanted

00:05:57,440 --> 00:05:59,840
to support for the number of numbers of

00:05:58,550 --> 00:06:01,520
users who support was gonna be a pretty

00:05:59,840 --> 00:06:02,630
big challenge and it pretty much

00:06:01,520 --> 00:06:05,180
mandates that we have to be somehow

00:06:02,630 --> 00:06:08,060
spreading users across some you know

00:06:05,180 --> 00:06:09,650
reasonably large number of servers we

00:06:08,060 --> 00:06:11,300
also you know we're a website that's up

00:06:09,650 --> 00:06:13,130
24 hours a day we're not you know a

00:06:11,300 --> 00:06:14,389
small research lab where we can take the

00:06:13,130 --> 00:06:15,950
server down for an hour when everyone's

00:06:14,389 --> 00:06:18,590
at lunch we want to be able to basically

00:06:15,950 --> 00:06:20,150
be up all the time so you know if you're

00:06:18,590 --> 00:06:21,530
a quanto peon user and one of those

00:06:20,150 --> 00:06:24,200
servers fails you shouldn't lose your

00:06:21,530 --> 00:06:25,970
work or you shouldn't have to you know

00:06:24,200 --> 00:06:28,970
wait for 10 minutes when we deploy an

00:06:25,970 --> 00:06:30,260
upgrade or you're also a random stranger

00:06:28,970 --> 00:06:32,930
around the internet to us so you

00:06:30,260 --> 00:06:34,639
shouldn't be able to say take down the

00:06:32,930 --> 00:06:35,840
resources that another user is using or

00:06:34,639 --> 00:06:37,400
you shouldn't be able to intercept their

00:06:35,840 --> 00:06:38,960
work so we need to make sure that users

00:06:37,400 --> 00:06:41,850
are somehow isolated from one another in

00:06:38,960 --> 00:06:45,090
this way and then so

00:06:41,850 --> 00:06:46,470
those two things are sort of kind of you

00:06:45,090 --> 00:06:49,830
know standard challenges for scaling any

00:06:46,470 --> 00:06:51,330
kind of service and the easiest way to

00:06:49,830 --> 00:06:53,460
scale some web service if you have sort

00:06:51,330 --> 00:06:55,260
of a standard you know HTTP server is

00:06:53,460 --> 00:06:57,480
you make everything stateless and you

00:06:55,260 --> 00:06:59,610
just say you know here's my server it

00:06:57,480 --> 00:07:01,110
does a thing and I don't care which

00:06:59,610 --> 00:07:02,490
server my request goes to I'm just gonna

00:07:01,110 --> 00:07:03,930
make as many of those servers as I need

00:07:02,490 --> 00:07:05,910
to service the load that you have and

00:07:03,930 --> 00:07:07,860
that works great as long as your

00:07:05,910 --> 00:07:10,200
requests are stateless right that I

00:07:07,860 --> 00:07:12,210
don't care which server I'm talking to

00:07:10,200 --> 00:07:14,160
at any given time and that's not the

00:07:12,210 --> 00:07:15,810
case for Jupiter because Jupiter is sort

00:07:14,160 --> 00:07:18,060
of inherently about maintaining these

00:07:15,810 --> 00:07:19,860
persistent processes that we talk to for

00:07:18,060 --> 00:07:21,720
extended periods of time and maintaining

00:07:19,860 --> 00:07:23,820
these notebook documents that we author

00:07:21,720 --> 00:07:25,860
and share and collaborate on and edit

00:07:23,820 --> 00:07:28,140
over time so state is sort of

00:07:25,860 --> 00:07:29,460
inextricably bound up in the kinds of

00:07:28,140 --> 00:07:31,470
work that we want to do with Jupiter and

00:07:29,460 --> 00:07:33,390
so that sort of gives us some unique

00:07:31,470 --> 00:07:36,090
challenges for trying to scale this

00:07:33,390 --> 00:07:38,310
problem in a way that we might want to

00:07:36,090 --> 00:07:40,950
scale other kinds of web services I mean

00:07:38,310 --> 00:07:41,940
just another aspect of state that we

00:07:40,950 --> 00:07:43,770
might not normally think about is that

00:07:41,940 --> 00:07:45,270
user identity there's no other sort of

00:07:43,770 --> 00:07:47,730
form of state that we we care about in

00:07:45,270 --> 00:07:48,780
this system you know on a UNIX server on

00:07:47,730 --> 00:07:50,340
a traditional server you might have a

00:07:48,780 --> 00:07:51,660
login to that server where you can SSH

00:07:50,340 --> 00:07:53,460
to that or you can somehow log into the

00:07:51,660 --> 00:07:55,680
box we don't really want to give UNIX

00:07:53,460 --> 00:07:57,270
logins to 100,000 users so we need some

00:07:55,680 --> 00:07:58,650
way of managing a persistent identity

00:07:57,270 --> 00:08:00,030
and that also goes back to things like

00:07:58,650 --> 00:08:01,230
maintaining your notebooks and

00:08:00,030 --> 00:08:02,430
associating those notebooks with a

00:08:01,230 --> 00:08:06,210
particularly with a persistent user

00:08:02,430 --> 00:08:08,160
identity so with that sort of background

00:08:06,210 --> 00:08:10,200
in mind I'm gonna do a like a super

00:08:08,160 --> 00:08:12,810
quick introduction to the architecture

00:08:10,200 --> 00:08:14,160
of the Jupiter notebook and then to

00:08:12,810 --> 00:08:16,410
Jupiter hub which is a multi-user

00:08:14,160 --> 00:08:17,730
notebook server if you're interested in

00:08:16,410 --> 00:08:20,070
that in more detail there's going to be

00:08:17,730 --> 00:08:21,870
a talk from men and a bunch of other

00:08:20,070 --> 00:08:24,060
folks this afternoon sort of going in

00:08:21,870 --> 00:08:25,410
depths about Jupiter hub this is just

00:08:24,060 --> 00:08:26,220
gonna be sort enough to get you up to

00:08:25,410 --> 00:08:29,820
speed for the things we're going to talk

00:08:26,220 --> 00:08:31,020
about so this is the single user Jupiter

00:08:29,820 --> 00:08:32,180
notebook server so this is the the

00:08:31,020 --> 00:08:34,290
process that comes up when you type

00:08:32,180 --> 00:08:35,820
Jupiter in notebook this slide is

00:08:34,290 --> 00:08:39,840
shamelessly stolen from Carol owings

00:08:35,820 --> 00:08:42,240
talk from hot or Jupiter days Atlanta I

00:08:39,840 --> 00:08:44,340
think so basically the Jupiter notebook

00:08:42,240 --> 00:08:45,360
is a server you talk to it with a

00:08:44,340 --> 00:08:49,200
browser the same way you talk to most

00:08:45,360 --> 00:08:50,940
websites and that server connects to the

00:08:49,200 --> 00:08:53,280
browser via WebSocket so you can send

00:08:50,940 --> 00:08:54,660
messages back and forth and then when

00:08:53,280 --> 00:08:55,360
you open up a notebook the server

00:08:54,660 --> 00:08:57,220
creates a

00:08:55,360 --> 00:08:59,230
colonel which is a process that has some

00:08:57,220 --> 00:09:01,209
running interpreter and it associates

00:08:59,230 --> 00:09:02,709
that with that associates that colonel

00:09:01,209 --> 00:09:04,990
with your notebook so you're sending

00:09:02,709 --> 00:09:07,930
messages which are things like snippets

00:09:04,990 --> 00:09:10,209
of JSON or you know the code that you

00:09:07,930 --> 00:09:12,339
want to execute or commands going to and

00:09:10,209 --> 00:09:13,480
from a widget and the notebook server's

00:09:12,339 --> 00:09:15,279
responsibility essentially to route

00:09:13,480 --> 00:09:17,230
those messages to the appropriate kernel

00:09:15,279 --> 00:09:19,240
let that kernel respond to them and then

00:09:17,230 --> 00:09:20,529
route them the messages back to you so

00:09:19,240 --> 00:09:23,440
we can think of this whole sort of

00:09:20,529 --> 00:09:24,519
single thing as one single Muser server

00:09:23,440 --> 00:09:25,750
and one important thing about this is

00:09:24,519 --> 00:09:27,490
that the server doesn't really have a

00:09:25,750 --> 00:09:30,310
notion of a user it has a notion of

00:09:27,490 --> 00:09:31,570
authentication so I I might have to know

00:09:30,310 --> 00:09:32,800
some secret or note have some

00:09:31,570 --> 00:09:34,480
information in order to log into this

00:09:32,800 --> 00:09:36,250
server but this server has no notion

00:09:34,480 --> 00:09:38,050
that I'm Scott and that I have

00:09:36,250 --> 00:09:42,820
particular login credentials associated

00:09:38,050 --> 00:09:44,649
with Scott so the project that solves

00:09:42,820 --> 00:09:45,820
that problem is Jupiter hub so the

00:09:44,649 --> 00:09:48,070
Jupiter hub is this project that

00:09:45,820 --> 00:09:50,740
essentially tries to aggregate lots of

00:09:48,070 --> 00:09:53,860
little Jupiter clusters so it's

00:09:50,740 --> 00:09:56,709
primarily composed of three pieces so it

00:09:53,860 --> 00:09:59,140
has some notion of who users are and how

00:09:56,709 --> 00:10:01,120
they authenticate it has a notion of

00:09:59,140 --> 00:10:03,970
spawning those single user servers for

00:10:01,120 --> 00:10:05,769
those users so if I Scott try to connect

00:10:03,970 --> 00:10:08,199
to the hub the hub says yes you're Scott

00:10:05,769 --> 00:10:10,029
I've authenticated with you and then it

00:10:08,199 --> 00:10:10,959
will create a server for me if I don't

00:10:10,029 --> 00:10:12,519
already have one and then it will

00:10:10,959 --> 00:10:16,000
persistently route my connections to and

00:10:12,519 --> 00:10:17,560
from that server and then you know it

00:10:16,000 --> 00:10:18,730
can route me back and forth or in it and

00:10:17,560 --> 00:10:20,980
the important thing is that it provides

00:10:18,730 --> 00:10:22,630
this sort of single entry point so the

00:10:20,980 --> 00:10:23,980
browser when you're using the Jupiter

00:10:22,630 --> 00:10:25,269
hub doesn't talk to the individual

00:10:23,980 --> 00:10:27,279
notebook servers directly it talks to a

00:10:25,269 --> 00:10:28,690
proxy that sits in front of those

00:10:27,279 --> 00:10:29,769
servers and the hub's responsibility

00:10:28,690 --> 00:10:31,750
essentially to manage the configuration

00:10:29,769 --> 00:10:33,610
of that proxy by making sure that users

00:10:31,750 --> 00:10:35,730
are authenticated and that that proxy

00:10:33,610 --> 00:10:37,839
knows how to route people around so

00:10:35,730 --> 00:10:40,570
here's just sort of another diagram of

00:10:37,839 --> 00:10:42,279
that so we've got various humans drawn

00:10:40,570 --> 00:10:44,529
in xkc style they're all talking to the

00:10:42,279 --> 00:10:46,839
configurable HTTP proxy

00:10:44,529 --> 00:10:49,390
we have various notebook servers you

00:10:46,839 --> 00:10:51,820
often sort of one for each user that

00:10:49,390 --> 00:10:53,339
we're talking to and the proxy knows how

00:10:51,820 --> 00:10:57,100
to route messages back and forth between

00:10:53,339 --> 00:10:59,769
users and those servers and then there's

00:10:57,100 --> 00:11:01,899
a centralized hub that manages a couple

00:10:59,769 --> 00:11:06,399
pieces of state about those users and

00:11:01,899 --> 00:11:08,529
manages authentication of those users so

00:11:06,399 --> 00:11:09,220
it sounds like sort of at the start of

00:11:08,529 --> 00:11:10,509
like the hub

00:11:09,220 --> 00:11:11,500
solves a lot of the problems that we're

00:11:10,509 --> 00:11:13,540
interested in right it has some notion

00:11:11,500 --> 00:11:15,970
of user identity it has some notion of

00:11:13,540 --> 00:11:16,810
spawning all these different servers and

00:11:15,970 --> 00:11:18,790
maybe you know we could think about

00:11:16,810 --> 00:11:22,480
spawning those servers across different

00:11:18,790 --> 00:11:23,889
machines and it it sort of gives us this

00:11:22,480 --> 00:11:24,790
single point of entry which is an

00:11:23,889 --> 00:11:26,230
important thing for us we don't want

00:11:24,790 --> 00:11:29,560
each individual user to have to go to a

00:11:26,230 --> 00:11:31,629
different URL or something like that so

00:11:29,560 --> 00:11:32,949
we let's sort of look at some of the

00:11:31,629 --> 00:11:34,569
case studies for those kinds of problems

00:11:32,949 --> 00:11:39,220
we're gonna talk we wanted to solve so

00:11:34,569 --> 00:11:40,629
the first one is user identity so the

00:11:39,220 --> 00:11:42,250
default jupiter' hub architecture

00:11:40,629 --> 00:11:44,620
authenticates via unix username and

00:11:42,250 --> 00:11:46,350
password so that's bad news for us

00:11:44,620 --> 00:11:49,920
because we said we don't want to give

00:11:46,350 --> 00:11:51,819
all of our users you know a unix login

00:11:49,920 --> 00:11:53,620
we do have some good news which is that

00:11:51,819 --> 00:11:54,939
we do already have a login system right

00:11:53,620 --> 00:11:56,560
the quantou peein already has some

00:11:54,939 --> 00:11:58,180
notion of who you are so what we really

00:11:56,560 --> 00:12:01,029
need to be able to do is somehow get

00:11:58,180 --> 00:12:02,649
that information to the jupiter hub and

00:12:01,029 --> 00:12:04,180
so even better news for us is that the

00:12:02,649 --> 00:12:07,420
jupiter hub authentication mechanism is

00:12:04,180 --> 00:12:08,980
pluggable right so jupiter hub defines

00:12:07,420 --> 00:12:12,040
this interface which is an authenticator

00:12:08,980 --> 00:12:14,350
so you can as an administrator or as a

00:12:12,040 --> 00:12:14,980
you know consumer of jupiter hubs api as

00:12:14,350 --> 00:12:17,019
you can

00:12:14,980 --> 00:12:19,540
subclass this Authenticator class and

00:12:17,019 --> 00:12:20,829
the simplest possible version of that is

00:12:19,540 --> 00:12:23,170
you have just have to implement this

00:12:20,829 --> 00:12:24,309
authenticate method which takes some

00:12:23,170 --> 00:12:26,860
information about the current request

00:12:24,309 --> 00:12:28,600
that's being made in particular we often

00:12:26,860 --> 00:12:30,850
have like a username and a password and

00:12:28,600 --> 00:12:31,809
so this is sort of a the simplest

00:12:30,850 --> 00:12:33,160
possible implementation of an

00:12:31,809 --> 00:12:35,019
authenticated which just takes a

00:12:33,160 --> 00:12:37,269
dictionary from username to password and

00:12:35,019 --> 00:12:39,220
when a user tries to log in it checks if

00:12:37,269 --> 00:12:40,930
that username is in the dictionary and

00:12:39,220 --> 00:12:44,439
it matches the password and if so it

00:12:40,930 --> 00:12:46,449
logs them in so what we want to do is

00:12:44,439 --> 00:12:48,670
have some Authenticator implementation

00:12:46,449 --> 00:12:50,290
that knows about quanto peein it knows

00:12:48,670 --> 00:12:52,689
about users sort of quanto peein

00:12:50,290 --> 00:12:54,040
identifies identities and there's a

00:12:52,689 --> 00:12:56,339
fairly common and well established

00:12:54,040 --> 00:12:57,759
protocol for having one website

00:12:56,339 --> 00:13:00,240
authenticate or provide information

00:12:57,759 --> 00:13:03,910
about another about its users which is a

00:13:00,240 --> 00:13:07,689
or who's open authentication or omni

00:13:03,910 --> 00:13:09,459
authentication so we can just make one

00:13:07,689 --> 00:13:12,370
topi on an OAuth provider and then use

00:13:09,459 --> 00:13:14,410
OAuth to identify or to authenticate our

00:13:12,370 --> 00:13:16,480
user so the Authenticator is a little

00:13:14,410 --> 00:13:18,160
bit more complex than this dictionary

00:13:16,480 --> 00:13:20,500
often you know this this fits on a slide

00:13:18,160 --> 00:13:21,759
the Authenticator is maybe two or three

00:13:20,500 --> 00:13:23,090
hundred lines of Python but it's still

00:13:21,759 --> 00:13:25,460
relatively

00:13:23,090 --> 00:13:28,160
compact so basically the way that oweth

00:13:25,460 --> 00:13:29,390
works is when you come to quanto p and

00:13:28,160 --> 00:13:31,490
you try to log into the research

00:13:29,390 --> 00:13:33,770
environment you actually get redirected

00:13:31,490 --> 00:13:36,200
to a quanto peon URL so your browser

00:13:33,770 --> 00:13:38,450
goes away from research goes to some

00:13:36,200 --> 00:13:40,070
quanto peon page and the important thing

00:13:38,450 --> 00:13:41,900
is the the reason that it's a quantum

00:13:40,070 --> 00:13:43,400
page is important is that you're already

00:13:41,900 --> 00:13:45,560
authenticated with quant opening you

00:13:43,400 --> 00:13:47,150
have cookies that the the quanto keen

00:13:45,560 --> 00:13:49,910
front-end can use to verify that you are

00:13:47,150 --> 00:13:53,860
who you claim to be and if that succeeds

00:13:49,910 --> 00:13:55,250
then the front-end redirects you back to

00:13:53,860 --> 00:13:56,600
yeah so

00:13:55,250 --> 00:13:58,220
authorized ensures that were logging the

00:13:56,600 --> 00:13:59,720
quanto peon and then it redirects us

00:13:58,220 --> 00:14:01,520
back to the hub with some additional

00:13:59,720 --> 00:14:04,400
information that we can then use to talk

00:14:01,520 --> 00:14:06,530
to the front-end again to ask who you

00:14:04,400 --> 00:14:08,630
are so the front-end redirects you to

00:14:06,530 --> 00:14:10,430
this OAuth callback the OAuth callback

00:14:08,630 --> 00:14:12,350
sends the information back to the

00:14:10,430 --> 00:14:14,720
front-end front-end responds with an

00:14:12,350 --> 00:14:16,040
access token then we send that access

00:14:14,720 --> 00:14:17,480
token back to the front-end

00:14:16,040 --> 00:14:20,900
so auth is kind of that's complicated

00:14:17,480 --> 00:14:22,940
back-and-forth dance we finally send

00:14:20,900 --> 00:14:25,780
that to the API and the API says yes you

00:14:22,940 --> 00:14:28,790
were in fact Scott and then all's good

00:14:25,780 --> 00:14:30,860
some sort of reflections on that API so

00:14:28,790 --> 00:14:33,290
ooofff this kind of feels like overkill

00:14:30,860 --> 00:14:35,060
for this use case right it's like I got

00:14:33,290 --> 00:14:36,830
a token and I exchanged that token for a

00:14:35,060 --> 00:14:38,960
code and then I exchanged that token for

00:14:36,830 --> 00:14:41,060
a resource ID and then finally I used

00:14:38,960 --> 00:14:42,620
that resource ID to log in so if we were

00:14:41,060 --> 00:14:44,780
like designing an authenticated mission

00:14:42,620 --> 00:14:47,030
mechanism from scratch probably this is

00:14:44,780 --> 00:14:48,350
what we would use but ooofff the sort of

00:14:47,030 --> 00:14:50,270
so pervasive and so well supported

00:14:48,350 --> 00:14:52,520
across various different projects that

00:14:50,270 --> 00:14:54,050
it's still a nice standard to use and it

00:14:52,520 --> 00:14:55,700
means that you can do something very

00:14:54,050 --> 00:14:57,710
similar to what we did and authenticate

00:14:55,700 --> 00:14:58,940
with github user names or with Google

00:14:57,710 --> 00:15:00,920
usernames or Facebook usernames

00:14:58,940 --> 00:15:02,600
basically any site that you ever see on

00:15:00,920 --> 00:15:04,010
the internet that authenticates that

00:15:02,600 --> 00:15:05,750
allows you to authenticate via some

00:15:04,010 --> 00:15:07,910
other login is using this protocol so

00:15:05,750 --> 00:15:10,339
even though it's a little bit clunky for

00:15:07,910 --> 00:15:13,160
this case it's nice to use this sort of

00:15:10,339 --> 00:15:15,170
well supported protocol so yeah off the

00:15:13,160 --> 00:15:16,310
standard wildly available and there's

00:15:15,170 --> 00:15:19,100
lots of good open-source libraries for

00:15:16,310 --> 00:15:20,660
doing it another problem this is

00:15:19,100 --> 00:15:22,850
probably the kind of the thorniest

00:15:20,660 --> 00:15:24,380
problem that we thought we were gonna

00:15:22,850 --> 00:15:28,700
have to do with initially is is notebook

00:15:24,380 --> 00:15:30,290
storage right so the the standard

00:15:28,700 --> 00:15:31,459
Jupiter notebook interface provides this

00:15:30,290 --> 00:15:32,690
sort of file system interface for

00:15:31,459 --> 00:15:34,940
storing notebooks right so I have this

00:15:32,690 --> 00:15:36,350
browser and I can navigate up and down

00:15:34,940 --> 00:15:38,810
into in the

00:15:36,350 --> 00:15:40,100
hierarchy of directories and it sort of

00:15:38,810 --> 00:15:42,890
presents the illusion that I'm

00:15:40,100 --> 00:15:45,860
interacting with a filesystem and in

00:15:42,890 --> 00:15:47,330
fact in in use sort of the standard

00:15:45,860 --> 00:15:49,760
Jupiter notebook implementation that's a

00:15:47,330 --> 00:15:52,760
pretty transparent pass-through to the

00:15:49,760 --> 00:15:54,200
file system but even though it's it's

00:15:52,760 --> 00:15:55,930
just sort of passing those operations

00:15:54,200 --> 00:15:57,980
through the file system it actually

00:15:55,930 --> 00:16:01,730
abstracts those operations behind this

00:15:57,980 --> 00:16:05,060
thing called the contents API and so the

00:16:01,730 --> 00:16:06,440
contents api essentially implements you

00:16:05,060 --> 00:16:08,810
know all the operations that you'd want

00:16:06,440 --> 00:16:11,120
to do on file so saving and deleting and

00:16:08,810 --> 00:16:13,880
loading them and translates them into

00:16:11,120 --> 00:16:15,500
HTTP verb so in the browser you know we

00:16:13,880 --> 00:16:17,180
can click on a notebook and open it or

00:16:15,500 --> 00:16:18,890
we can delete it or we can save it and

00:16:17,180 --> 00:16:20,570
what the browser is gonna do is

00:16:18,890 --> 00:16:22,040
translate that into an HTTP request so

00:16:20,570 --> 00:16:23,300
when you load a notebook you make a get

00:16:22,040 --> 00:16:24,530
request when you save a notebook you

00:16:23,300 --> 00:16:27,350
make a post request when you delete a

00:16:24,530 --> 00:16:28,430
notebook you make a delete request and

00:16:27,350 --> 00:16:29,330
then there's a couple extra endpoints

00:16:28,430 --> 00:16:30,920
for doing things like saving and

00:16:29,330 --> 00:16:32,870
restoring check points so I python or

00:16:30,920 --> 00:16:34,640
jupiter has this notion of i'm gonna

00:16:32,870 --> 00:16:36,200
save sort of a provisional copy of my

00:16:34,640 --> 00:16:40,040
notebook that i can restore to at a

00:16:36,200 --> 00:16:41,780
later date and the contents API works

00:16:40,040 --> 00:16:43,760
with these sort of abstract identities

00:16:41,780 --> 00:16:46,310
that are representations of notebooks or

00:16:43,760 --> 00:16:47,720
files which we call models and you can

00:16:46,310 --> 00:16:51,200
see that you know this contains things

00:16:47,720 --> 00:16:53,000
like your path and the name and the mime

00:16:51,200 --> 00:16:54,860
types like what kind of data you carry

00:16:53,000 --> 00:16:57,260
when you were created when you were

00:16:54,860 --> 00:17:00,320
destroyed and then this content field

00:16:57,260 --> 00:17:03,020
which contains sort of the meat of the

00:17:00,320 --> 00:17:05,540
stuffs we have metadata which is various

00:17:03,020 --> 00:17:07,700
kinds of extensions use metadata to to

00:17:05,540 --> 00:17:09,650
put extra information in the notebook

00:17:07,700 --> 00:17:11,030
and then finally we have cells which is

00:17:09,650 --> 00:17:15,320
sort of the piece of JSON that we tend

00:17:11,030 --> 00:17:18,740
to think of as the notebook itself so

00:17:15,320 --> 00:17:20,000
the the notebook API is sort of or the

00:17:18,740 --> 00:17:22,790
the Jupiter notebook sterber the

00:17:20,000 --> 00:17:25,730
standard server implements this HTTP API

00:17:22,790 --> 00:17:27,290
and it implements it by dispatching to a

00:17:25,730 --> 00:17:29,570
Python API which is called a contents

00:17:27,290 --> 00:17:31,490
manager and the default implementation

00:17:29,570 --> 00:17:33,290
is called file contents manager and it

00:17:31,490 --> 00:17:35,090
does more or less what you'd expect so

00:17:33,290 --> 00:17:36,350
if you say save a notebook that writes

00:17:35,090 --> 00:17:37,760
the notebook to a file system if you say

00:17:36,350 --> 00:17:38,780
delete a notebook it deletes the

00:17:37,760 --> 00:17:40,010
notebook from the file system and you

00:17:38,780 --> 00:17:44,150
say loaded it reads it from the file

00:17:40,010 --> 00:17:45,860
system so the but you know like the

00:17:44,150 --> 00:17:47,900
Authenticator in Jupiter hub the

00:17:45,860 --> 00:17:50,330
contents manager class is configurable

00:17:47,900 --> 00:17:52,460
so I can come and write my own implement

00:17:50,330 --> 00:17:54,230
of the contents manager and as long as I

00:17:52,460 --> 00:17:56,870
have implemented the interface correctly

00:17:54,230 --> 00:17:58,429
I can sort of transparently change out

00:17:56,870 --> 00:17:59,630
what it means to store a notebook or

00:17:58,429 --> 00:18:01,100
what it means to load a notebook or what

00:17:59,630 --> 00:18:03,019
it means to delete a notebook without

00:18:01,100 --> 00:18:04,789
the user interface without without sort

00:18:03,019 --> 00:18:08,360
of the user's experience of the

00:18:04,789 --> 00:18:09,710
application ever changing so the sort of

00:18:08,360 --> 00:18:11,720
a minimal complete definition with

00:18:09,710 --> 00:18:12,860
contents manager is you know six or

00:18:11,720 --> 00:18:14,240
seven methods so it's a little more

00:18:12,860 --> 00:18:15,559
complex than authenticator but not a

00:18:14,240 --> 00:18:18,049
whole lot more complex so we have to be

00:18:15,559 --> 00:18:20,659
able to get things save things delete

00:18:18,049 --> 00:18:22,010
things rename things check if files and

00:18:20,659 --> 00:18:27,769
directories exist and we have to be able

00:18:22,010 --> 00:18:29,690
to know if things are hidden and so we

00:18:27,769 --> 00:18:32,210
looked at that and we said well you know

00:18:29,690 --> 00:18:35,120
maintaining state is a really hard

00:18:32,210 --> 00:18:37,639
problem and you know trying to have this

00:18:35,120 --> 00:18:39,649
fleet of servers with you know notebooks

00:18:37,639 --> 00:18:41,149
all living on the file system sounds

00:18:39,649 --> 00:18:42,889
like a nightmare especially if like a

00:18:41,149 --> 00:18:44,929
server fails we have to back them up or

00:18:42,889 --> 00:18:46,130
we have to try to recover them you know

00:18:44,929 --> 00:18:48,110
there's things like NFS that we could

00:18:46,130 --> 00:18:49,399
use to mount Network file systems but

00:18:48,110 --> 00:18:50,750
then we have to have some sort of

00:18:49,399 --> 00:18:53,510
permissioning system for managing all

00:18:50,750 --> 00:18:54,830
those things in general sort of state is

00:18:53,510 --> 00:18:57,169
this really thorny problem when you're

00:18:54,830 --> 00:18:58,760
trying to scale system but there are

00:18:57,169 --> 00:19:01,370
applications that we've been using for

00:18:58,760 --> 00:19:02,929
you know 50 60 years that are really

00:19:01,370 --> 00:19:06,139
really good at managing state and

00:19:02,929 --> 00:19:08,330
they're called databases so what we did

00:19:06,139 --> 00:19:09,080
is we said okay we've got databases we

00:19:08,330 --> 00:19:10,610
can't we know we know how to use

00:19:09,080 --> 00:19:12,590
databases databases are really good at

00:19:10,610 --> 00:19:15,620
managing state instead of managing the

00:19:12,590 --> 00:19:16,669
state of our notebooks on our servers on

00:19:15,620 --> 00:19:18,230
our notebook servers we're gonna

00:19:16,669 --> 00:19:19,460
delegate that problem to someone else

00:19:18,230 --> 00:19:22,519
who's better at managing state than we

00:19:19,460 --> 00:19:24,080
are and so we wrote a this library

00:19:22,519 --> 00:19:26,029
called PG contents which is a drop-in

00:19:24,080 --> 00:19:29,000
replacement for the standard file system

00:19:26,029 --> 00:19:30,889
based contents API except that it stores

00:19:29,000 --> 00:19:34,340
notebooks in PostgreSQL instead of on

00:19:30,889 --> 00:19:38,840
the filesystem so I'm gonna do a brief

00:19:34,340 --> 00:19:40,760
mini demo of PG contents so I can figure

00:19:38,840 --> 00:19:43,070
out how to get out of here there we go

00:19:40,760 --> 00:19:47,090
so here I've got a Jupiter notebook

00:19:43,070 --> 00:19:48,409
server running and you know for all the

00:19:47,090 --> 00:19:50,570
world this looks like a normal Jupiter

00:19:48,409 --> 00:19:53,419
notebook server I can open up cells I

00:19:50,570 --> 00:19:56,299
can execute cells I can you know modify

00:19:53,419 --> 00:19:57,799
cells and you know as a user this is

00:19:56,299 --> 00:20:00,200
this is just like a normal Jupiter

00:19:57,799 --> 00:20:02,480
notebook session you know and I can have

00:20:00,200 --> 00:20:03,680
directories and I can rename those

00:20:02,480 --> 00:20:05,420
directories and move things

00:20:03,680 --> 00:20:06,710
and do all the sort of file system e

00:20:05,420 --> 00:20:15,200
things that I like to do is a jupiter

00:20:06,710 --> 00:20:16,730
notebook user however oops sorry if we

00:20:15,200 --> 00:20:19,250
look at how I started that notebook

00:20:16,730 --> 00:20:21,430
session we pointed it at this fancy

00:20:19,250 --> 00:20:23,770
config file and if I do

00:20:21,430 --> 00:20:27,410
[Music]

00:20:23,770 --> 00:20:28,910
Emacs on that file then we can see that

00:20:27,410 --> 00:20:30,080
that config file is actually telling the

00:20:28,910 --> 00:20:31,700
Jupiter notebook to use a different

00:20:30,080 --> 00:20:32,420
contents manager than it would normally

00:20:31,700 --> 00:20:34,880
use

00:20:32,420 --> 00:20:37,070
so we're saying from PG contents import

00:20:34,880 --> 00:20:38,180
Postgres contents manager and then we're

00:20:37,070 --> 00:20:39,980
telling the notebook app that it should

00:20:38,180 --> 00:20:41,690
use that as its contents manager class

00:20:39,980 --> 00:20:43,610
instead of a normal file system contents

00:20:41,690 --> 00:20:45,020
manager and then we have to tell it a

00:20:43,610 --> 00:20:46,870
bunch of extra information so we have to

00:20:45,020 --> 00:20:49,100
give it a URL to connect to a database

00:20:46,870 --> 00:20:50,840
and we can give it some things like a

00:20:49,100 --> 00:20:52,040
user ID so another challenge that we

00:20:50,840 --> 00:20:53,780
have is we want to store things on a

00:20:52,040 --> 00:20:55,160
file system multiple users might have

00:20:53,780 --> 00:20:56,750
the same database or might have the same

00:20:55,160 --> 00:20:58,490
notebook with the same name we need to

00:20:56,750 --> 00:21:00,280
somehow namespace those so we can give

00:20:58,490 --> 00:21:03,110
each user their own unique namespace of

00:21:00,280 --> 00:21:04,730
files and then if we're storing things

00:21:03,110 --> 00:21:05,900
in a database we probably want to do

00:21:04,730 --> 00:21:07,610
things like make sure that there's some

00:21:05,900 --> 00:21:08,840
maximum size that we can put on those

00:21:07,610 --> 00:21:11,630
files so that a user doesn't try to

00:21:08,840 --> 00:21:14,060
insert like a 5,000 gigabyte file into

00:21:11,630 --> 00:21:15,230
the database and there's there's some

00:21:14,060 --> 00:21:16,790
other options that I can do in here as

00:21:15,230 --> 00:21:18,710
well so we can do things like adding

00:21:16,790 --> 00:21:20,240
configuration to encrypt notebooks at

00:21:18,710 --> 00:21:21,320
rest in the database for example is an

00:21:20,240 --> 00:21:25,640
important thing for us for maintaining

00:21:21,320 --> 00:21:27,980
the security of those databases so I

00:21:25,640 --> 00:21:29,360
restart that and then we can take a look

00:21:27,980 --> 00:21:31,640
at that database that we're pointing at

00:21:29,360 --> 00:21:35,120
so down here I'm just in a post-grad

00:21:31,640 --> 00:21:42,070
repple so if I do you know from PG 10

00:21:35,120 --> 00:21:48,710
stop files import sorry import select

00:21:42,070 --> 00:21:50,300
star from PG contents right so we say

00:21:48,710 --> 00:21:52,070
this is this is a file so it's got an ID

00:21:50,300 --> 00:21:54,290
it's got a name it's got a parent name

00:21:52,070 --> 00:21:55,790
and then it's got some content which is

00:21:54,290 --> 00:21:57,140
this giant binary string which is a

00:21:55,790 --> 00:21:59,720
postcards byte a column which is

00:21:57,140 --> 00:22:01,430
basically just arbitrary binary blobs it

00:21:59,720 --> 00:22:02,690
sounds it early sort of sounds a little

00:22:01,430 --> 00:22:04,190
bit strange to be storing these like

00:22:02,690 --> 00:22:04,910
giant blobs of binary data in a

00:22:04,190 --> 00:22:06,620
relational database

00:22:04,910 --> 00:22:08,180
Postgres is actually really really good

00:22:06,620 --> 00:22:09,950
at storing this kind of data because it

00:22:08,180 --> 00:22:12,230
has this system called toast which is

00:22:09,950 --> 00:22:14,540
the large something something large

00:22:12,230 --> 00:22:16,250
object storage storage system and

00:22:14,540 --> 00:22:17,539
basically what it means is that Postgres

00:22:16,250 --> 00:22:19,340
doesn't actually store this giant

00:22:17,539 --> 00:22:20,779
binary data inline in the tuple in the

00:22:19,340 --> 00:22:22,129
database it stores it out in a separate

00:22:20,779 --> 00:22:26,059
storage location and then just maintains

00:22:22,129 --> 00:22:27,350
a pointer to it so like we I sort of

00:22:26,059 --> 00:22:28,609
worked on this and like implemented this

00:22:27,350 --> 00:22:29,690
as an initial implementation it thought

00:22:28,609 --> 00:22:30,769
like okay well after a place with

00:22:29,690 --> 00:22:32,929
something real eventually and then we're

00:22:30,769 --> 00:22:36,859
like this just works so it's been it's

00:22:32,929 --> 00:22:38,509
been great for us but and I can do you

00:22:36,859 --> 00:22:40,070
know add a couple more of those so we

00:22:38,509 --> 00:22:42,919
can see also things like we can preserve

00:22:40,070 --> 00:22:44,419
the apparent structure and we can query

00:22:42,919 --> 00:22:50,899
for things in the directory and all that

00:22:44,419 --> 00:22:52,190
sort of thing so that's PG contents so a

00:22:50,899 --> 00:22:54,139
couple features of that that we just

00:22:52,190 --> 00:22:56,029
went over so it's fully API compatible

00:22:54,139 --> 00:22:57,590
with the default contents manager the

00:22:56,029 --> 00:22:59,929
way that we test PG contents is we

00:22:57,590 --> 00:23:01,609
actually import the test suite from the

00:22:59,929 --> 00:23:03,710
built in from the original notebook and

00:23:01,609 --> 00:23:04,879
subclass it and make it use our contents

00:23:03,710 --> 00:23:06,080
manager instead of the file contents

00:23:04,879 --> 00:23:07,999
manager and then verify that it passes

00:23:06,080 --> 00:23:10,279
the exact same test suite which is a

00:23:07,999 --> 00:23:11,509
really cool way I think of testing that

00:23:10,279 --> 00:23:12,799
something is a drop-in replacement for

00:23:11,509 --> 00:23:15,159
it is to say if I'm a drop-in

00:23:12,799 --> 00:23:17,389
replacement I should pass your test feed

00:23:15,159 --> 00:23:19,970
it allows us to have separate namespaces

00:23:17,389 --> 00:23:21,289
per user it allows us to do multiple

00:23:19,970 --> 00:23:24,529
check points per notebooks and one of

00:23:21,289 --> 00:23:25,909
the things the default content manager

00:23:24,529 --> 00:23:27,559
doesn't do is it only gives you one

00:23:25,909 --> 00:23:28,879
check point for notebooks OPG contents

00:23:27,559 --> 00:23:30,049
actually maintains the history of all

00:23:28,879 --> 00:23:32,659
your notebooks and you can revert back

00:23:30,049 --> 00:23:34,970
to arbitrary different states it has a

00:23:32,659 --> 00:23:36,559
configurable maximum file size and it

00:23:34,970 --> 00:23:38,269
has optional encryption at rest for

00:23:36,559 --> 00:23:40,249
notebooks via that cryptography package

00:23:38,269 --> 00:23:43,039
oh and it also has the ability to

00:23:40,249 --> 00:23:44,210
actually combine file systems and

00:23:43,039 --> 00:23:45,649
Postgres via this thing called a hybrid

00:23:44,210 --> 00:23:46,940
contents manager so I can have a

00:23:45,649 --> 00:23:47,509
directory that's mostly managed by

00:23:46,940 --> 00:23:49,039
postgrads

00:23:47,509 --> 00:23:51,340
except this one subdirectory that I

00:23:49,039 --> 00:23:54,169
actually want to be on the file system

00:23:51,340 --> 00:23:57,769
so some vanity metrics cuz everyone

00:23:54,169 --> 00:24:00,200
loves Manatee metrics so we added this

00:23:57,769 --> 00:24:02,450
you know four or five years into the

00:24:00,200 --> 00:24:04,399
site's existence so not all of those

00:24:02,450 --> 00:24:06,139
hundred thousand registered users are

00:24:04,399 --> 00:24:08,029
actually you know have stuck around for

00:24:06,139 --> 00:24:09,919
the entire lifetime so we've got about

00:24:08,029 --> 00:24:12,139
sixty five thousand users have created a

00:24:09,919 --> 00:24:14,330
notebook we've got about two hundred

00:24:12,139 --> 00:24:15,830
twenty thousand total notebooks we've

00:24:14,330 --> 00:24:18,019
got about three hundred ten thousand

00:24:15,830 --> 00:24:19,700
total checkpoints what about four

00:24:18,019 --> 00:24:20,989
hundred fifty gigabytes of notebooks

00:24:19,700 --> 00:24:22,309
stored in that database so like I said

00:24:20,989 --> 00:24:24,580
post grow is doing a really good job

00:24:22,309 --> 00:24:27,769
just storing all this binary data for us

00:24:24,580 --> 00:24:29,690
so some scaling issues there actually

00:24:27,769 --> 00:24:31,290
have been surprisingly few I've been

00:24:29,690 --> 00:24:33,630
generally very impressed with post

00:24:31,290 --> 00:24:35,160
ability to handle this workload the most

00:24:33,630 --> 00:24:36,870
significant issue we ran into was

00:24:35,160 --> 00:24:38,850
running out of database connections so

00:24:36,870 --> 00:24:40,500
each each open connection that you have

00:24:38,850 --> 00:24:42,270
to a Postgres database consume some ram

00:24:40,500 --> 00:24:43,920
in the database and if you have you know

00:24:42,270 --> 00:24:45,750
hundreds or thousands of those open at a

00:24:43,920 --> 00:24:48,420
given time the database starts to

00:24:45,750 --> 00:24:50,310
complain there's already really good

00:24:48,420 --> 00:24:52,800
robust tooling for this so PG bouncer

00:24:50,310 --> 00:24:54,090
lets you sort of transparently pool

00:24:52,800 --> 00:24:56,340
connections because they're generally

00:24:54,090 --> 00:24:58,200
not all in use at once so basically nope

00:24:56,340 --> 00:24:59,490
what clients connect a PG bouncer PG

00:24:58,200 --> 00:25:01,110
bouncer maintains a pool of connections

00:24:59,490 --> 00:25:02,400
and then it sort of muxes all the

00:25:01,110 --> 00:25:04,940
different connections back and forth to

00:25:02,400 --> 00:25:04,940
the actual database

00:25:05,070 --> 00:25:10,230
so that's PG contents so that one thing

00:25:08,760 --> 00:25:12,570
that's nice about that right is that PG

00:25:10,230 --> 00:25:13,680
contents solves one of the really thorny

00:25:12,570 --> 00:25:15,540
problems for us which is how are we

00:25:13,680 --> 00:25:18,000
going to manage the file system state of

00:25:15,540 --> 00:25:20,010
all of these notebooks right so users

00:25:18,000 --> 00:25:21,750
have all this stuff they might expect

00:25:20,010 --> 00:25:23,580
them to be on the file system and one of

00:25:21,750 --> 00:25:26,490
the things that would be entailed by

00:25:23,580 --> 00:25:28,080
that is that if I if I as a user come to

00:25:26,490 --> 00:25:29,640
quanto pian and then I go away and then

00:25:28,080 --> 00:25:30,810
I come back a week later if we were

00:25:29,640 --> 00:25:31,920
storing stuff on the filesystem we

00:25:30,810 --> 00:25:33,090
either have to be synchronizing

00:25:31,920 --> 00:25:35,040
notebooks across all of our different

00:25:33,090 --> 00:25:36,930
servers which then becomes hard if we

00:25:35,040 --> 00:25:39,150
have an outage or if a server goes down

00:25:36,930 --> 00:25:41,100
or we the hardware failure or we have to

00:25:39,150 --> 00:25:43,680
be persistently routing the same users

00:25:41,100 --> 00:25:45,120
to the same hubs which then means like

00:25:43,680 --> 00:25:46,290
it's hard for us to do rolling restarts

00:25:45,120 --> 00:25:48,210
it's hard for us to migrate people

00:25:46,290 --> 00:25:50,340
there's all kinds of problems that come

00:25:48,210 --> 00:25:52,470
out if we have to keep people on the

00:25:50,340 --> 00:25:53,970
same server at the same time but one of

00:25:52,470 --> 00:25:55,800
the nice things about not having

00:25:53,970 --> 00:25:57,000
persistent state on the server that we

00:25:55,800 --> 00:25:58,950
care about anymore is we can sort of

00:25:57,000 --> 00:26:00,630
route people around to different service

00:25:58,950 --> 00:26:02,430
however we want now within a given

00:26:00,630 --> 00:26:03,420
notebook session like your connections

00:26:02,430 --> 00:26:04,620
are obviously going to a persistent

00:26:03,420 --> 00:26:06,750
kernel because you have a process

00:26:04,620 --> 00:26:08,250
running that you're talking to but you

00:26:06,750 --> 00:26:09,600
know if you you're working on a notebook

00:26:08,250 --> 00:26:11,250
and you leave and you come back a day

00:26:09,600 --> 00:26:12,300
later I can route you to a different

00:26:11,250 --> 00:26:14,760
server and you're gonna be none the

00:26:12,300 --> 00:26:16,830
wiser and so one of the things that that

00:26:14,760 --> 00:26:20,100
makes us really want to be able to do is

00:26:16,830 --> 00:26:22,170
run multiple hubs right because the hub

00:26:20,100 --> 00:26:24,810
has the ability to sort of be one single

00:26:22,170 --> 00:26:27,060
point of entry and then fan-out to

00:26:24,810 --> 00:26:28,650
servers or to notebook servers that are

00:26:27,060 --> 00:26:29,880
maybe running on different servers but

00:26:28,650 --> 00:26:32,130
that still gives you a single point of

00:26:29,880 --> 00:26:33,120
failure if that hub node goes down and

00:26:32,130 --> 00:26:34,560
so one of the things we wanted to be

00:26:33,120 --> 00:26:36,270
able to do is say you know we're not

00:26:34,560 --> 00:26:38,370
gonna worry about trying to make that

00:26:36,270 --> 00:26:40,230
node triply redundant and super duper

00:26:38,370 --> 00:26:42,510
robust we're gonna say you know servers

00:26:40,230 --> 00:26:44,220
should be expendable that server dies it

00:26:42,510 --> 00:26:47,580
dies we're gonna be like

00:26:44,220 --> 00:26:48,990
was a Drago and Rocky haver is just that

00:26:47,580 --> 00:26:51,570
dies whatever we're gonna throw it away

00:26:48,990 --> 00:26:52,799
and make anyone so what that means is

00:26:51,570 --> 00:26:54,780
that we want to be able to have multiple

00:26:52,799 --> 00:26:59,580
Jupiter hub instance we want to route

00:26:54,780 --> 00:27:01,530
people to those those hubs so I'm gonna

00:26:59,580 --> 00:27:03,419
claim that the Jupiter projects that

00:27:01,530 --> 00:27:07,230
they've involved in time are a tower of

00:27:03,419 --> 00:27:08,880
increasingly elaborate lies and what I

00:27:07,230 --> 00:27:10,289
mean by that is that all of the Jupiter

00:27:08,880 --> 00:27:12,240
projects in some sense sort of present

00:27:10,289 --> 00:27:13,320
the illusion of talking directly to a

00:27:12,240 --> 00:27:15,059
colonel

00:27:13,320 --> 00:27:17,490
and they add more and more layers of

00:27:15,059 --> 00:27:19,140
indirection as they go so you know in

00:27:17,490 --> 00:27:21,900
the beginning there was just ipython and

00:27:19,140 --> 00:27:24,299
ipython mostly didn't lie to you right

00:27:21,900 --> 00:27:25,830
you you're talking to a colonel the

00:27:24,299 --> 00:27:27,150
colonel you know there's no like message

00:27:25,830 --> 00:27:28,320
passing you just your process you're

00:27:27,150 --> 00:27:29,600
talking to it over standard in it's

00:27:28,320 --> 00:27:32,490
giving you answers over standard out

00:27:29,600 --> 00:27:34,530
Colonel is nice and then we move to the

00:27:32,490 --> 00:27:35,760
Jupiter console and now suddenly there's

00:27:34,530 --> 00:27:38,580
a layer of interaction so we can sort of

00:27:35,760 --> 00:27:40,679
spawn kernels asynchronously and then we

00:27:38,580 --> 00:27:41,520
can connect to them via a terminal and

00:27:40,679 --> 00:27:43,169
that means that I can do things like

00:27:41,520 --> 00:27:44,640
connect multiple terminals to the same

00:27:43,169 --> 00:27:46,919
kernel and have them sort of share state

00:27:44,640 --> 00:27:48,600
or I can you know connect to a terminal

00:27:46,919 --> 00:27:49,799
or to a kernel and then detach from it

00:27:48,600 --> 00:27:52,909
for a while and then come back to it

00:27:49,799 --> 00:27:55,260
later I think the kernel lifetime is

00:27:52,909 --> 00:27:58,500
made separate from the lifetime of my

00:27:55,260 --> 00:27:59,640
interactive session and what's nice

00:27:58,500 --> 00:28:00,840
about the console is that for the most

00:27:59,640 --> 00:28:02,130
part when you're using it it presents

00:28:00,840 --> 00:28:03,390
the illusion to us that we're just

00:28:02,130 --> 00:28:05,340
talking to a kernel it's just a normal

00:28:03,390 --> 00:28:06,659
ipython shell but behind the scenes it's

00:28:05,340 --> 00:28:07,950
lying to us and it's you know saying

00:28:06,659 --> 00:28:09,059
you're talking to a kernel it's actually

00:28:07,950 --> 00:28:10,980
you're talking to a terminal who's

00:28:09,059 --> 00:28:12,030
sending messages to a kernel and just

00:28:10,980 --> 00:28:14,760
were writing those messages back and

00:28:12,030 --> 00:28:16,559
forth then we come to the Jupiter

00:28:14,760 --> 00:28:17,669
notebook so the Jupiter notebook you

00:28:16,559 --> 00:28:19,049
know is adding more layers of

00:28:17,669 --> 00:28:20,370
indirection between us and the kernel so

00:28:19,049 --> 00:28:22,230
now as a user we're talking to a browser

00:28:20,370 --> 00:28:23,850
just talking to a server which is

00:28:22,230 --> 00:28:25,530
routing those messages to the kernel and

00:28:23,850 --> 00:28:26,760
now I might have multiple kernels and

00:28:25,530 --> 00:28:28,650
multiple notebooks and it's sort of

00:28:26,760 --> 00:28:30,150
routing messages back and forth and

00:28:28,650 --> 00:28:31,380
making sure that all all the notebooks

00:28:30,150 --> 00:28:32,490
and all the kernels line up and all the

00:28:31,380 --> 00:28:34,919
messages don't get crossed so we're

00:28:32,490 --> 00:28:37,110
getting sort of increasingly far away or

00:28:34,919 --> 00:28:41,010
increasingly many hops between the user

00:28:37,110 --> 00:28:42,630
and the Colonel Jupiter hub adds another

00:28:41,010 --> 00:28:45,360
layer to this so now we don't just have

00:28:42,630 --> 00:28:48,270
you know many notebooks and many kernels

00:28:45,360 --> 00:28:49,740
we have that whole box taken and

00:28:48,270 --> 00:28:51,990
replicated many times again so now we

00:28:49,740 --> 00:28:53,850
have many users using many browsers all

00:28:51,990 --> 00:28:55,289
talking to one proxy and then that proxy

00:28:53,850 --> 00:28:57,040
is routing those messages to servers

00:28:55,289 --> 00:28:58,810
servers are writing those messages to

00:28:57,040 --> 00:29:00,100
colonels and all those messages make it

00:28:58,810 --> 00:29:04,900
all the way sort of back and forth along

00:29:00,100 --> 00:29:06,550
this hop as many times as we want so I

00:29:04,900 --> 00:29:07,600
claim that you know for this quanto

00:29:06,550 --> 00:29:09,880
being project what we really wanted was

00:29:07,600 --> 00:29:13,450
the illusion of having a single jupiter

00:29:09,880 --> 00:29:14,980
hub but with multiple real hubs

00:29:13,450 --> 00:29:15,820
another thing we also wanted that we

00:29:14,980 --> 00:29:17,800
talked about is we wanted to somehow

00:29:15,820 --> 00:29:19,900
embed the hub in another web page where

00:29:17,800 --> 00:29:21,220
we don't want users to go to some other

00:29:19,900 --> 00:29:22,420
web page to do their research thing and

00:29:21,220 --> 00:29:23,620
then come back to quanto peein to do

00:29:22,420 --> 00:29:27,460
quanto peon things we want it to feel

00:29:23,620 --> 00:29:28,750
like one large integrated project and so

00:29:27,460 --> 00:29:30,490
I claim that we can sort of kill two

00:29:28,750 --> 00:29:34,750
birds in one stone by rendering the hub

00:29:30,490 --> 00:29:36,490
in an iframe so this is sort of what the

00:29:34,750 --> 00:29:37,720
the multi hub picture looks like so now

00:29:36,490 --> 00:29:40,210
we have users talking to browsers

00:29:37,720 --> 00:29:43,660
talking to quanto peon and then quanto

00:29:40,210 --> 00:29:46,900
peon is rendering a little sub web page

00:29:43,660 --> 00:29:48,010
inside of itself which is a Jupiter hub

00:29:46,900 --> 00:29:49,420
instance which is then routing me to a

00:29:48,010 --> 00:29:50,950
server which is writing me to kernel and

00:29:49,420 --> 00:29:54,210
again we're sort of going all the way

00:29:50,950 --> 00:29:57,100
back up the tree so to pop back out to

00:29:54,210 --> 00:30:00,700
quanto peon again we'll see if I can

00:29:57,100 --> 00:30:03,900
actually get to research this may this

00:30:00,700 --> 00:30:03,900
connection may be dead that

00:30:08,380 --> 00:30:19,330
we're gonna move on fruit maybe ha ha

00:30:14,190 --> 00:30:21,120
maybe notebooks with lots of images are

00:30:19,330 --> 00:30:23,650
not a good choice for conference Wi-Fi

00:30:21,120 --> 00:30:24,820
anyway if we wait long enough I promise

00:30:23,650 --> 00:30:27,160
you a notebook would show up here

00:30:24,820 --> 00:30:28,840
eventually so the only point I want to

00:30:27,160 --> 00:30:30,490
make here is that basically everything

00:30:28,840 --> 00:30:32,980
below this black line is actually an

00:30:30,490 --> 00:30:33,940
iframe living inside of the main quanto

00:30:32,980 --> 00:30:36,160
peon website and then everything above

00:30:33,940 --> 00:30:38,140
this black line is the quanto peon

00:30:36,160 --> 00:30:40,270
website so we're basically embedding the

00:30:38,140 --> 00:30:41,530
hub directly into a page and one of the

00:30:40,270 --> 00:30:45,549
things that that means is that when we

00:30:41,530 --> 00:30:47,140
ask when we go to load this page the the

00:30:45,549 --> 00:30:48,549
top-level application can say all right

00:30:47,140 --> 00:30:49,809
which hub am I going to route this user

00:30:48,549 --> 00:30:51,580
to and I can make sure that I route you

00:30:49,809 --> 00:30:56,770
persistently to the right hub if you

00:30:51,580 --> 00:30:58,059
come back multiple times um so here's

00:30:56,770 --> 00:30:59,950
kind of what that process looks like so

00:30:58,059 --> 00:31:02,950
you're a user you're in the browser you

00:30:59,950 --> 00:31:05,049
go to quanto peon slash research qf is

00:31:02,950 --> 00:31:08,380
the quanto peon front end so qf sends

00:31:05,049 --> 00:31:10,210
you asks a request of this service that

00:31:08,380 --> 00:31:11,650
we call discovery to say hey is this

00:31:10,210 --> 00:31:13,659
user already associated with some

00:31:11,650 --> 00:31:15,280
running jupiter hub so it's just gonna

00:31:13,659 --> 00:31:17,110
sort of make our regular sequel query to

00:31:15,280 --> 00:31:19,120
figure that information out and the

00:31:17,110 --> 00:31:22,030
database might say yeah that users on

00:31:19,120 --> 00:31:23,919
hub server 3 right so the database sends

00:31:22,030 --> 00:31:27,580
that back to discovery discovery sends

00:31:23,919 --> 00:31:29,350
that back to qf & qf sends a web page

00:31:27,580 --> 00:31:30,460
back to the browser that says I want to

00:31:29,350 --> 00:31:32,770
I want you to render the quanto beam

00:31:30,460 --> 00:31:34,480
front end and then inside of that I want

00:31:32,770 --> 00:31:35,740
you to render you know hub server 3

00:31:34,480 --> 00:31:37,659
quanto p.m. com

00:31:35,740 --> 00:31:39,429
and now if I load that multiple times

00:31:37,659 --> 00:31:41,169
this database can make sure that I get

00:31:39,429 --> 00:31:42,340
sent to the same hub as long as that hub

00:31:41,169 --> 00:31:43,750
is still running and it can keep track

00:31:42,340 --> 00:31:45,640
of the fact that that hub might go away

00:31:43,750 --> 00:31:49,260
in which case when I make this request

00:31:45,640 --> 00:31:49,260
it will allocate me to a new running hub

00:31:49,650 --> 00:31:53,260
so just sort of some implementation

00:31:51,880 --> 00:31:55,090
notes about this the discovery routing

00:31:53,260 --> 00:31:56,740
logic is super duper simple you know

00:31:55,090 --> 00:31:58,240
there's probably fancy items you could

00:31:56,740 --> 00:32:00,010
try to do to like route people based on

00:31:58,240 --> 00:32:01,900
their expected workloads or based on the

00:32:00,010 --> 00:32:03,370
resource usage on the server we don't do

00:32:01,900 --> 00:32:04,450
any of that we just say we're gonna put

00:32:03,370 --> 00:32:07,630
you on the hub with the least allocated

00:32:04,450 --> 00:32:09,970
users right now one cool thing that we

00:32:07,630 --> 00:32:12,309
can do is we can subclass the the

00:32:09,970 --> 00:32:14,230
Jupiter hub built in application class

00:32:12,309 --> 00:32:16,900
to do things like add additional logic

00:32:14,230 --> 00:32:19,179
when we initialize so when when our

00:32:16,900 --> 00:32:20,980
subclass starts up it does whatever it

00:32:19,179 --> 00:32:22,100
would have done and then it registers

00:32:20,980 --> 00:32:24,169
itself would this Discoverer

00:32:22,100 --> 00:32:27,320
servus and then it schedules a periodic

00:32:24,169 --> 00:32:28,880
callback to say every second just send a

00:32:27,320 --> 00:32:31,039
ping to that service saying I am still

00:32:28,880 --> 00:32:32,570
alive and that service is monitoring all

00:32:31,039 --> 00:32:34,070
those hubs and saying alright if any of

00:32:32,570 --> 00:32:35,360
them haven't sent a ping in enough

00:32:34,070 --> 00:32:36,770
amount of time I'm gonna stop routing

00:32:35,360 --> 00:32:38,600
users there and if it goes even longer

00:32:36,770 --> 00:32:40,100
I'm gonna mark all those sessions as

00:32:38,600 --> 00:32:43,490
dead and we reallocate people to

00:32:40,100 --> 00:32:45,289
different places so that's what this

00:32:43,490 --> 00:32:47,840
heartbeating logic looks like also the

00:32:45,289 --> 00:32:49,160
server's know themselves that if they

00:32:47,840 --> 00:32:50,090
fail heartbeats too many times that this

00:32:49,160 --> 00:32:51,230
you just take themselves out of

00:32:50,090 --> 00:32:53,179
commission because they can't talk to

00:32:51,230 --> 00:32:54,530
the to the outside world so they can say

00:32:53,179 --> 00:32:56,390
alright if I've failed too many

00:32:54,530 --> 00:33:01,130
consecutive heartbeats I'm just gonna

00:32:56,390 --> 00:33:03,470
bail out and gracefully shut down so

00:33:01,130 --> 00:33:04,789
that's multiple hubs one last thing that

00:33:03,470 --> 00:33:07,820
I wanted to talk about is sharing

00:33:04,789 --> 00:33:09,679
notebooks so quanto peon you know we

00:33:07,820 --> 00:33:10,460
talked a lot about you know research and

00:33:09,679 --> 00:33:12,470
talking a lot about developing

00:33:10,460 --> 00:33:13,850
algorithms but quanto being kind of

00:33:12,470 --> 00:33:15,289
first and foremost has always been a

00:33:13,850 --> 00:33:18,049
community of authors and researchers

00:33:15,289 --> 00:33:19,700
where people can you know share and talk

00:33:18,049 --> 00:33:20,299
about the different things that they're

00:33:19,700 --> 00:33:22,370
working on

00:33:20,299 --> 00:33:23,690
so users need to be able to share and

00:33:22,370 --> 00:33:25,010
discuss the findings that they're doing

00:33:23,690 --> 00:33:26,299
in research and we talked at the start

00:33:25,010 --> 00:33:28,190
of this talk about the fact that you

00:33:26,299 --> 00:33:29,419
know you know 90% of the work that you

00:33:28,190 --> 00:33:30,590
do that's sort of interesting is

00:33:29,419 --> 00:33:31,850
actually not in the developing of the

00:33:30,590 --> 00:33:34,130
algorithms is in the research that goes

00:33:31,850 --> 00:33:35,929
into the algorithms and so what that

00:33:34,130 --> 00:33:38,120
means is that we need some format to be

00:33:35,929 --> 00:33:40,640
able to convey our sort of research

00:33:38,120 --> 00:33:42,289
findings to other users and that's like

00:33:40,640 --> 00:33:43,580
the bread and butter use case for

00:33:42,289 --> 00:33:45,710
notebooks where I want to do some

00:33:43,580 --> 00:33:47,419
interactive analysis plot it add some

00:33:45,710 --> 00:33:48,919
prose to it add some context to it build

00:33:47,419 --> 00:33:50,059
a narrative around it and share it with

00:33:48,919 --> 00:33:51,470
other people in a way that they can

00:33:50,059 --> 00:33:53,299
understand and sort of incorporate into

00:33:51,470 --> 00:33:55,039
their work so notebooks are this sort of

00:33:53,299 --> 00:33:56,419
ideal format for sharing the kind of

00:33:55,039 --> 00:33:59,960
exploratory research that we want people

00:33:56,419 --> 00:34:02,450
to do and so the way that we do sharing

00:33:59,960 --> 00:34:04,280
and cloning is we use two more extension

00:34:02,450 --> 00:34:08,090
mechanisms that the notebook provides

00:34:04,280 --> 00:34:10,700
which are NB extensions and server

00:34:08,090 --> 00:34:12,290
extensions so MB extensions are

00:34:10,700 --> 00:34:14,330
additional pieces of code that you can

00:34:12,290 --> 00:34:15,710
add to the UI of the notebook and server

00:34:14,330 --> 00:34:17,510
extensions are different or additional

00:34:15,710 --> 00:34:21,020
pieces of code that you can add to the

00:34:17,510 --> 00:34:22,580
back end of the notebook so this is the

00:34:21,020 --> 00:34:24,429
sharing NBD extension essentially just

00:34:22,580 --> 00:34:26,990
adds a little share button to each cell

00:34:24,429 --> 00:34:29,300
and then what it does is when you click

00:34:26,990 --> 00:34:31,429
that button it marks that cell as what

00:34:29,300 --> 00:34:32,960
we call a showcase cell and that's

00:34:31,429 --> 00:34:35,720
basically gets rendered as a preview as

00:34:32,960 --> 00:34:37,310
a user if you try to go clone a notebook

00:34:35,720 --> 00:34:39,860
because often you have sort of one nice

00:34:37,310 --> 00:34:41,600
concluding or sell or one sort of nice

00:34:39,860 --> 00:34:43,640
image that you want to show as a preview

00:34:41,600 --> 00:34:44,690
of your of your notebook and you know

00:34:43,640 --> 00:34:46,250
get people to say alright is this

00:34:44,690 --> 00:34:48,710
interesting is this a notebook that I

00:34:46,250 --> 00:34:50,419
want to click on and explore so it adds

00:34:48,710 --> 00:34:53,179
that to the metadata of the notebook and

00:34:50,419 --> 00:34:55,370
then sends a post with the notebook down

00:34:53,179 --> 00:34:56,419
to the server which is where the server

00:34:55,370 --> 00:34:58,580
extension comes in so the server

00:34:56,419 --> 00:35:00,980
extension adds a new request Handler to

00:34:58,580 --> 00:35:02,690
deal with those posts and that that

00:35:00,980 --> 00:35:05,540
handler essentially receives a post that

00:35:02,690 --> 00:35:07,790
says hey you know user x1 it's wants to

00:35:05,540 --> 00:35:09,710
share this notebook and the request

00:35:07,790 --> 00:35:12,080
Handler does two things so it uses NBD

00:35:09,710 --> 00:35:13,910
convert which is a library that comes as

00:35:12,080 --> 00:35:16,520
part of you know the jupiter ecosystem

00:35:13,910 --> 00:35:17,870
to convert the notebook into HTML so we

00:35:16,520 --> 00:35:20,630
can show people previews of the

00:35:17,870 --> 00:35:22,820
notebooks and then it uploads the HTML

00:35:20,630 --> 00:35:25,340
and the data a and B file to s3 and then

00:35:22,820 --> 00:35:26,630
the forums know how to sort of look in

00:35:25,340 --> 00:35:28,550
s3 for the right places for the

00:35:26,630 --> 00:35:30,080
notebooks and show them to people and

00:35:28,550 --> 00:35:31,610
show them previews it can use that the

00:35:30,080 --> 00:35:34,190
showcase cell to show them all thumbnail

00:35:31,610 --> 00:35:36,260
preview and then they can look at the

00:35:34,190 --> 00:35:37,730
full HTML to get the HTML preview and

00:35:36,260 --> 00:35:39,110
then finally they can actually clone the

00:35:37,730 --> 00:35:40,580
notebook and get a copy of the notebook

00:35:39,110 --> 00:35:41,870
that they can run and modify an edit on

00:35:40,580 --> 00:35:45,890
their own machine they're on their own

00:35:41,870 --> 00:35:48,140
virtual machine so some notes on sharing

00:35:45,890 --> 00:35:50,270
the ND extension and server extension

00:35:48,140 --> 00:35:52,400
combo like make it really easy to add

00:35:50,270 --> 00:35:53,720
arbitrary power arbitrarily powerful

00:35:52,400 --> 00:35:56,120
functionality to the notebook right so

00:35:53,720 --> 00:35:57,380
we can basically you know theoretically

00:35:56,120 --> 00:35:59,120
you could just rewrite the whole thing

00:35:57,380 --> 00:36:00,770
as an ND extension or a server extension

00:35:59,120 --> 00:36:02,120
at some point it starts it stops being

00:36:00,770 --> 00:36:03,620
worthwhile if you're just deleting the

00:36:02,120 --> 00:36:05,930
whole thing and adding it as an

00:36:03,620 --> 00:36:07,820
extension but you can sort of add as

00:36:05,930 --> 00:36:09,290
much logic as you want to into the

00:36:07,820 --> 00:36:11,630
notebook and then have the corresponding

00:36:09,290 --> 00:36:13,850
back-end logic to make it work

00:36:11,630 --> 00:36:15,230
generally speaking the server side API

00:36:13,850 --> 00:36:17,140
is so sort of the pieces that are on the

00:36:15,230 --> 00:36:19,190
Python side are more robust and stable

00:36:17,140 --> 00:36:22,160
and if you've heard a bunch maybe about

00:36:19,190 --> 00:36:23,360
Jupiter lab this week that's part of the

00:36:22,160 --> 00:36:24,440
motivation behind that project is to

00:36:23,360 --> 00:36:26,060
kind of stabilize and add more

00:36:24,440 --> 00:36:29,750
well-defined api's for building these

00:36:26,060 --> 00:36:31,010
front-end extensions so to wrap up

00:36:29,750 --> 00:36:33,560
because I think I've only got about one

00:36:31,010 --> 00:36:34,820
or two minutes left so Jupiter

00:36:33,560 --> 00:36:37,360
applications are these like really

00:36:34,820 --> 00:36:39,920
amazingly extensible and customizable

00:36:37,360 --> 00:36:41,690
things where we talked about swapping

00:36:39,920 --> 00:36:44,000
out the storage mechanism for notebooks

00:36:41,690 --> 00:36:45,320
we talked about adding mechanisms for

00:36:44,000 --> 00:36:46,820
for sharing notebooks we talked about

00:36:45,320 --> 00:36:48,560
swapping out the authentication

00:36:46,820 --> 00:36:50,300
mechanism for Jupiter hub

00:36:48,560 --> 00:36:51,500
and there's you know a whole laundry

00:36:50,300 --> 00:36:53,330
list of other extensions that I didn't

00:36:51,500 --> 00:36:55,160
have time to talk about so adding tools

00:36:53,330 --> 00:36:56,540
for monitoring memory usage we have a

00:36:55,160 --> 00:36:58,460
library called cue grid that gives you

00:36:56,540 --> 00:37:01,310
an attractive interactive scrollable

00:36:58,460 --> 00:37:03,500
data frame widget we've added custom

00:37:01,310 --> 00:37:04,850
completions we've reworked the kernel

00:37:03,500 --> 00:37:07,700
restart logic to deal with some

00:37:04,850 --> 00:37:10,670
particularity zuv the way that we manage

00:37:07,700 --> 00:37:12,800
nope or manage user isolation we've

00:37:10,670 --> 00:37:15,740
subclass the docker spawner to add more

00:37:12,800 --> 00:37:17,780
custom rate-limiting and and resource

00:37:15,740 --> 00:37:20,750
limiting stuff the list sort of goes on

00:37:17,780 --> 00:37:22,070
and on another conclusion is that state

00:37:20,750 --> 00:37:23,870
is the enemy of robustness and

00:37:22,070 --> 00:37:25,490
scalability right lots of problems

00:37:23,870 --> 00:37:26,600
become way way easier if we don't have

00:37:25,490 --> 00:37:27,890
to worry about state or if we can at

00:37:26,600 --> 00:37:29,870
least delegate state to someone who's

00:37:27,890 --> 00:37:31,310
better at it than we are right so we can

00:37:29,870 --> 00:37:33,980
we can make our lives a lot easier

00:37:31,310 --> 00:37:35,210
scaling the the hub by not storing state

00:37:33,980 --> 00:37:36,500
on the file system and instead storing

00:37:35,210 --> 00:37:39,830
in a database and databases are really

00:37:36,500 --> 00:37:40,720
good at State and then finally Jupiter

00:37:39,830 --> 00:37:42,980
is built on a throne of lies

00:37:40,720 --> 00:37:44,720
by which I mean appropriate use of

00:37:42,980 --> 00:37:46,670
indirection allows us to compose complex

00:37:44,720 --> 00:37:49,130
applications from single parts right so

00:37:46,670 --> 00:37:50,030
we can provide the illusion of a simple

00:37:49,130 --> 00:37:51,500
system that you're just talking to

00:37:50,030 --> 00:37:53,180
directly while having sort of

00:37:51,500 --> 00:37:56,080
arbitrarily many hops between there as

00:37:53,180 --> 00:37:58,370
long as we we get the abstractions right

00:37:56,080 --> 00:37:59,750
a couple special thanks so I want to

00:37:58,370 --> 00:38:01,220
thank various members the ipython and

00:37:59,750 --> 00:38:02,930
Jupiter team without whom none of this

00:38:01,220 --> 00:38:05,180
work would have been possible so Brian

00:38:02,930 --> 00:38:07,400
Ranger Carol willing Cal Kelly and Regan

00:38:05,180 --> 00:38:09,350
Kelly hole why Python Jupiter team and

00:38:07,400 --> 00:38:10,760
then some quanto peon folks so David

00:38:09,350 --> 00:38:13,610
Michael it's Karin Rubin

00:38:10,760 --> 00:38:14,900
Tim Shaw Verve is in the audience and

00:38:13,610 --> 00:38:17,990
the whole quanto pian engineering team

00:38:14,900 --> 00:38:19,700
and with that I think I am just about

00:38:17,990 --> 00:38:23,150
out of time I don't know how am i doing

00:38:19,700 --> 00:38:34,210
on time all right I've got time for one

00:38:23,150 --> 00:38:34,210
or two questions before yeah you yep yep

00:38:37,529 --> 00:38:45,669
yeah so we have so the permissions

00:38:43,390 --> 00:38:46,660
aren't necessarily enforced in the file

00:38:45,669 --> 00:38:48,939
system except the fact that their

00:38:46,660 --> 00:38:51,099
namespace by user IDs right so each each

00:38:48,939 --> 00:38:53,079
user's notebook server basically only

00:38:51,099 --> 00:38:54,579
can see the the files that are

00:38:53,079 --> 00:38:56,229
associated with its user ID because part

00:38:54,579 --> 00:38:59,140
of the contents manager construction

00:38:56,229 --> 00:39:00,549
says which users files am i managing we

00:38:59,140 --> 00:39:01,900
could actually even go step further with

00:39:00,549 --> 00:39:03,160
that so Postgres has a notion of real

00:39:01,900 --> 00:39:06,219
level permissioning where you can say

00:39:03,160 --> 00:39:08,679
things like rows that match some sequel

00:39:06,219 --> 00:39:10,689
query can only be monitored by certain

00:39:08,679 --> 00:39:11,650
certain post-grad users that would mean

00:39:10,689 --> 00:39:13,989
that we'd have to create a post-grad

00:39:11,650 --> 00:39:15,489
user per quanto peon user which is why

00:39:13,989 --> 00:39:17,529
we haven't gone down that road yet but

00:39:15,489 --> 00:39:18,579
if we got sort of very very concerned

00:39:17,529 --> 00:39:20,199
about that then that's the thing we

00:39:18,579 --> 00:39:22,089
could do we also can enforce some

00:39:20,199 --> 00:39:23,349
amounts of security by the fact that we

00:39:22,089 --> 00:39:24,910
encrypt the notebooks at rest and each

00:39:23,349 --> 00:39:26,559
user I user actually gets a different

00:39:24,910 --> 00:39:29,799
encryption key so even if you could

00:39:26,559 --> 00:39:31,150
somehow you know hack the notebook so

00:39:29,799 --> 00:39:32,589
that you could query for other people's

00:39:31,150 --> 00:39:34,299
files they'd be useless gibberish for

00:39:32,589 --> 00:39:44,229
you unless you could figure out their

00:39:34,299 --> 00:39:45,579
encryption key like say like so the our

00:39:44,229 --> 00:39:48,189
our sharing model is basis for like

00:39:45,579 --> 00:39:50,049
published clone so I I can take a

00:39:48,189 --> 00:39:51,249
notebook and publish it out to the

00:39:50,049 --> 00:39:53,229
community and that a community member

00:39:51,249 --> 00:39:55,029
can come and take that notebook and

00:39:53,229 --> 00:39:56,589
clone it back to themselves there isn't

00:39:55,029 --> 00:39:58,269
a notion of like collaborative sharing

00:39:56,589 --> 00:40:00,489
where like myself and a small number of

00:39:58,269 --> 00:40:02,380
co-workers say arc of collaborators are

00:40:00,489 --> 00:40:04,299
working on a specific set of of

00:40:02,380 --> 00:40:05,259
notebooks that's sharing is kind of an

00:40:04,299 --> 00:40:06,459
overloaded term and that's something

00:40:05,259 --> 00:40:07,719
we'd like to support in the future but

00:40:06,459 --> 00:40:13,119
we don't have any kind of system for

00:40:07,719 --> 00:40:16,209
that right now how much of this is open

00:40:13,119 --> 00:40:18,519
source and where can I learn more yeah

00:40:16,209 --> 00:40:23,169
so PG contents is open source

00:40:18,519 --> 00:40:25,719
it's quantonium comm / PG contents the

00:40:23,169 --> 00:40:28,979
authentication stuff o Authenticator is

00:40:25,719 --> 00:40:31,719
already open source and part of Jupiter

00:40:28,979 --> 00:40:33,189
most of the like libraries and systems

00:40:31,719 --> 00:40:35,319
that quanto peen is built on top of our

00:40:33,189 --> 00:40:38,739
open source so zip line is our open

00:40:35,319 --> 00:40:40,539
source back-testing framework trying to

00:40:38,739 --> 00:40:42,729
think what other technologies I talked

00:40:40,539 --> 00:40:45,069
about today the sharing stuff is kind of

00:40:42,729 --> 00:40:47,740
inexplicably tied up with our system so

00:40:45,069 --> 00:40:49,529
that piece is not open source

00:40:47,740 --> 00:40:55,559
[Music]

00:40:49,529 --> 00:40:55,559
if I pop back to the huh

00:40:56,650 --> 00:40:59,829
the discovery layer is not open source

00:40:58,029 --> 00:41:04,179
but that application is like pretty

00:40:59,829 --> 00:41:05,529
trivial it's like users and servers and

00:41:04,179 --> 00:41:06,849
there's like a relation between users

00:41:05,529 --> 00:41:09,519
and servers and it's like a key value

00:41:06,849 --> 00:41:11,559
mapping so that one's you know a pretty

00:41:09,519 --> 00:41:12,969
standard credit on application we

00:41:11,559 --> 00:41:14,859
probably could open source that if lots

00:41:12,969 --> 00:41:19,180
of people were interested in it I think

00:41:14,859 --> 00:41:23,630
we'll stop there as thanks Scott

00:41:19,180 --> 00:41:23,630

YouTube URL: https://www.youtube.com/watch?v=TtsbspKHJGo


