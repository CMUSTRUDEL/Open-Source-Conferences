Title: Managing a 1,000+ Student JupyterHub without Losing Your Sanity
Publication date: 2017-11-08
Playlist: JupyterCon
Description: 
	Ryan Lovett (Department of Statistics, UC Berkeley), Yuvi Panda (Data Science Education Program (UC Berkeley) 

The UC Berkeley Data Science Education program uses Jupyter notebooks on a JupyterHub. Ryan Lovett and Yuvi Panda outline the DevOps principles that keep the largest reported educational hub (with 1,000+ users) stable and performant while enabling all the features instructors and students require.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,670 --> 00:00:06,160
I'm right love it I'm with the

00:00:03,620 --> 00:00:08,510
Department of Statistics at UC Berkeley

00:00:06,160 --> 00:00:13,580
also with the data science education

00:00:08,510 --> 00:00:17,810
program there dscp and with me is UV

00:00:13,580 --> 00:00:19,999
panda also from dscp also from the

00:00:17,810 --> 00:00:26,929
berkeley institute for data science also

00:00:19,999 --> 00:00:28,310
with project jupiter and we've also in

00:00:26,929 --> 00:00:31,220
addition to UV myself we've had the

00:00:28,310 --> 00:00:33,590
support of student teams which have been

00:00:31,220 --> 00:00:36,140
largely composed of these great

00:00:33,590 --> 00:00:39,559
undergrads and some of them are now

00:00:36,140 --> 00:00:43,910
master students i also want to give a

00:00:39,559 --> 00:00:45,649
plug to Cal's blueprint student team who

00:00:43,910 --> 00:00:50,000
helped us out and they develop software

00:00:45,649 --> 00:00:54,230
pro bono for nonprofits and promote

00:00:50,000 --> 00:00:56,929
technology for social good all right so

00:00:54,230 --> 00:01:00,440
what is the dscp the data science

00:00:56,929 --> 00:01:02,239
education program formerly it is quote

00:01:00,440 --> 00:01:03,890
an interdisciplinary curriculum that

00:01:02,239 --> 00:01:06,140
provides a foundation for Berkeley

00:01:03,890 --> 00:01:09,320
undergrads of all majors to engage

00:01:06,140 --> 00:01:12,050
capably and critically with data so in

00:01:09,320 --> 00:01:15,200
essence we have this foundational data

00:01:12,050 --> 00:01:17,840
science course called data 8 and it

00:01:15,200 --> 00:01:22,790
teaches core concepts in both computing

00:01:17,840 --> 00:01:25,750
and statistics and we also have a set of

00:01:22,790 --> 00:01:28,040
connector courses which span the

00:01:25,750 --> 00:01:32,110
humanities and social and physical

00:01:28,040 --> 00:01:36,410
sciences we have these are the eight

00:01:32,110 --> 00:01:38,330
courses we have this semester students

00:01:36,410 --> 00:01:43,160
can enroll in just the foundational

00:01:38,330 --> 00:01:45,500
course or they can also and also enroll

00:01:43,160 --> 00:01:47,600
in the connector course is to apply the

00:01:45,500 --> 00:01:51,680
what they've learned the core skills in

00:01:47,600 --> 00:01:53,360
their area of interest the students come

00:01:51,680 --> 00:01:57,350
from all over campus from disparate

00:01:53,360 --> 00:01:59,000
academic units the last bit of data we

00:01:57,350 --> 00:02:02,620
have on it is that the students come

00:01:59,000 --> 00:02:04,580
from 60 different majors across campus

00:02:02,620 --> 00:02:07,040
they have different computing

00:02:04,580 --> 00:02:09,410
backgrounds some of them don't have

00:02:07,040 --> 00:02:13,400
don't have any computing experience any

00:02:09,410 --> 00:02:14,830
statistics experience half the students

00:02:13,400 --> 00:02:17,490
are in their first year

00:02:14,830 --> 00:02:21,750
we we don't we don't assume any

00:02:17,490 --> 00:02:24,700
experience with computing or statistics

00:02:21,750 --> 00:02:27,460
briefly about our infrastructure the

00:02:24,700 --> 00:02:29,050
faculty decided I think for obvious

00:02:27,460 --> 00:02:31,720
reasons for having the students use

00:02:29,050 --> 00:02:34,660
Jupiter notebooks as the best way to

00:02:31,720 --> 00:02:37,780
engage students with the material we

00:02:34,660 --> 00:02:41,980
chose Jupiter hub because we didn't want

00:02:37,780 --> 00:02:43,930
students again many of them first year

00:02:41,980 --> 00:02:48,370
many without program experience have to

00:02:43,930 --> 00:02:51,540
fight with software installation on

00:02:48,370 --> 00:02:54,490
their own device in later courses

00:02:51,540 --> 00:02:58,240
they'll get that experience it is a

00:02:54,490 --> 00:03:01,930
valuable skill to have it can be

00:02:58,240 --> 00:03:05,980
important but here we wanted to lower

00:03:01,930 --> 00:03:07,840
the barrier we wanted to make sure that

00:03:05,980 --> 00:03:10,959
all they really needed to have was a web

00:03:07,840 --> 00:03:14,200
browser to get started we also wanted

00:03:10,959 --> 00:03:16,930
everyone including the faculty the

00:03:14,200 --> 00:03:19,630
graduate student assistants to have an

00:03:16,930 --> 00:03:22,800
identical reproducible environment with

00:03:19,630 --> 00:03:27,580
the same libraries the same data sets

00:03:22,800 --> 00:03:29,470
the same version of everything if the

00:03:27,580 --> 00:03:32,920
students were to install the software on

00:03:29,470 --> 00:03:35,560
their own device their environments

00:03:32,920 --> 00:03:37,480
could differ depending upon what work

00:03:35,560 --> 00:03:41,100
flavor workflow they were using to do

00:03:37,480 --> 00:03:44,530
that when they chose to install it and

00:03:41,100 --> 00:03:45,610
gungeon bade and Vanita swami are in the

00:03:44,530 --> 00:03:49,060
back of the room there they're gonna be

00:03:45,610 --> 00:03:50,140
giving a talk today at 5:00 I think and

00:03:49,060 --> 00:03:53,320
I'm gonna go into much greater detail

00:03:50,140 --> 00:03:58,510
about how the notebooks were used in the

00:03:53,320 --> 00:04:00,550
program so a fully hosted Jupiter a

00:03:58,510 --> 00:04:03,910
Jupiter environment enables us to make

00:04:00,550 --> 00:04:06,459
sure that everyone has the same seamless

00:04:03,910 --> 00:04:10,030
starting point we started out using

00:04:06,459 --> 00:04:11,760
docker swarm and we use that for a few

00:04:10,030 --> 00:04:15,040
semesters it was based on just hammocks

00:04:11,760 --> 00:04:18,570
docker swarm deployment which I think a

00:04:15,040 --> 00:04:22,479
lot of people are using we switched over

00:04:18,570 --> 00:04:26,910
in our spring semester in January to

00:04:22,479 --> 00:04:26,910
using kubernetes and cube spawner

00:04:26,980 --> 00:04:34,480
so this this is the context of our

00:04:31,030 --> 00:04:38,500
sanity the size of the program is

00:04:34,480 --> 00:04:41,260
growing rapidly enrollments are shooting

00:04:38,500 --> 00:04:43,300
up we started out with about a hundred

00:04:41,260 --> 00:04:46,360
or so 80 to 100 students in the first

00:04:43,300 --> 00:04:49,770
semester we taught it went to 500 and it

00:04:46,360 --> 00:04:52,600
was there for a couple semesters 700

00:04:49,770 --> 00:04:55,600
last semester and last enrollment I saw

00:04:52,600 --> 00:04:57,160
was somewhere like 950 or something like

00:04:55,600 --> 00:05:01,690
that and that's for the foundational

00:04:57,160 --> 00:05:06,190
course we also have a few hundred in the

00:05:01,690 --> 00:05:13,630
connector courses which are I think at

00:05:06,190 --> 00:05:17,470
you know full capacity so if we were to

00:05:13,630 --> 00:05:21,250
scale the number of infrastructure

00:05:17,470 --> 00:05:26,050
problems at you know at the same rate of

00:05:21,250 --> 00:05:30,450
the enrollment we go we'd go insane and

00:05:26,050 --> 00:05:30,450
the student experience would be very bad

00:05:31,470 --> 00:05:36,430
this was going to be sort of a moment

00:05:33,910 --> 00:05:38,320
where I paused and you know showed the

00:05:36,430 --> 00:05:42,930
size of the students in the course but

00:05:38,320 --> 00:05:42,930
Fernando sort of stole my thunder and

00:05:42,990 --> 00:05:46,630
you know like him I was going to talk

00:05:45,370 --> 00:05:51,480
about how this is the largest lecture

00:05:46,630 --> 00:05:53,590
room on campus it's standing room only

00:05:51,480 --> 00:06:00,730
probably not just because those chairs

00:05:53,590 --> 00:06:03,370
are really uncomfortable so when faced

00:06:00,730 --> 00:06:06,730
with these growing enrollments when a

00:06:03,370 --> 00:06:08,590
thousand fresh faced caffeinated

00:06:06,730 --> 00:06:12,310
students show up and they need a

00:06:08,590 --> 00:06:17,530
functioning Jupiter notebook how do we

00:06:12,310 --> 00:06:20,230
deal with it and what have we learned so

00:06:17,530 --> 00:06:24,580
as as we've iterated on our deployment

00:06:20,230 --> 00:06:28,090
for the past couple years now we've come

00:06:24,580 --> 00:06:32,230
to follow a set of principles that make

00:06:28,090 --> 00:06:36,310
our deployments work in a reasonably

00:06:32,230 --> 00:06:40,540
sane way they're undoubtedly followed by

00:06:36,310 --> 00:06:42,670
those in industry already there

00:06:40,540 --> 00:06:45,490
not you know they're not new they're

00:06:42,670 --> 00:06:49,260
they're relatively new to us or perhaps

00:06:45,490 --> 00:06:52,780
new to me and maybe by sharing these

00:06:49,260 --> 00:06:55,660
this experience with you if you're in

00:06:52,780 --> 00:07:01,720
higher ed say well it'll help you in

00:06:55,660 --> 00:07:04,030
your deployment so first reduce human

00:07:01,720 --> 00:07:05,890
maintenance so yeah the number of

00:07:04,030 --> 00:07:08,080
students is going up at least for a

00:07:05,890 --> 00:07:12,070
while the size of our infrastructure

00:07:08,080 --> 00:07:14,710
team remains the same so this is quite

00:07:12,070 --> 00:07:18,010
smart of us right to maintain our sanity

00:07:14,710 --> 00:07:21,550
we just reduce our involvement we reduce

00:07:18,010 --> 00:07:22,360
our artwork that's that's not entirely

00:07:21,550 --> 00:07:25,120
it

00:07:22,360 --> 00:07:28,600
so all elaborates and and then provide

00:07:25,120 --> 00:07:32,200
an example so infrastructure shouldn't

00:07:28,600 --> 00:07:33,820
bottleneck anti gatekeeping we don't

00:07:32,200 --> 00:07:36,730
want to be in the way we don't want to

00:07:33,820 --> 00:07:40,420
be that extra step between bread and

00:07:36,730 --> 00:07:44,230
toast if an instructor sends an email an

00:07:40,420 --> 00:07:46,060
hour before course and says please get

00:07:44,230 --> 00:07:48,780
this additional Python library installed

00:07:46,060 --> 00:07:52,690
or please make this data set available

00:07:48,780 --> 00:07:57,010
in the best scenario we're not the

00:07:52,690 --> 00:07:59,950
holdup they shouldn't need to initiate

00:07:57,010 --> 00:08:04,650
that process by sending us an email at

00:07:59,950 --> 00:08:04,650
the last minute to specific individuals

00:08:04,920 --> 00:08:11,560
anyone can deploy so this comes down to

00:08:09,070 --> 00:08:13,330
treating administrative users like the

00:08:11,560 --> 00:08:15,990
faculty like the graduate student

00:08:13,330 --> 00:08:19,080
assistants like our student teams

00:08:15,990 --> 00:08:23,340
treating them as equal an infrastructure

00:08:19,080 --> 00:08:28,630
this means we trust everybody to operate

00:08:23,340 --> 00:08:31,380
the tools to deploy if you decide to

00:08:28,630 --> 00:08:35,590
adhere to this philosophy where

00:08:31,380 --> 00:08:38,849
everybody is equal that the you know

00:08:35,590 --> 00:08:40,930
propeller cap wearing head

00:08:38,849 --> 00:08:43,599
infrastructure staff that we're not the

00:08:40,930 --> 00:08:46,660
gatekeeper to some sort of release

00:08:43,599 --> 00:08:49,510
perfection release Nirvana then you're

00:08:46,660 --> 00:08:52,500
basically forced to use better tools to

00:08:49,510 --> 00:08:52,500
reduce the chance of error

00:08:53,720 --> 00:09:00,050
so this is obvious Otto you know

00:08:56,450 --> 00:09:02,840
computers are automating machines what

00:09:00,050 --> 00:09:04,730
does it really mean it means reduce the

00:09:02,840 --> 00:09:07,540
human involvement in initiating or

00:09:04,730 --> 00:09:10,970
controlling the workflows having people

00:09:07,540 --> 00:09:14,630
initiate processes manually it's just

00:09:10,970 --> 00:09:18,290
it's just error-prone and and it also

00:09:14,630 --> 00:09:20,270
requires more training it means that we

00:09:18,290 --> 00:09:23,870
shouldn't have you know one-off scripts

00:09:20,270 --> 00:09:25,400
one-off say ansible tasks or something

00:09:23,870 --> 00:09:27,140
in our back pocket where we have to

00:09:25,400 --> 00:09:30,950
manually take them out in bootstrap

00:09:27,140 --> 00:09:34,460
something and build on top of tools that

00:09:30,950 --> 00:09:36,290
already exists don't reinvent whenever

00:09:34,460 --> 00:09:39,560
possible don't write custom things if

00:09:36,290 --> 00:09:41,390
it's not necessary so that you're not

00:09:39,560 --> 00:09:46,760
giving yourself more things to fix and

00:09:41,390 --> 00:09:48,650
maintain so this is this is an example

00:09:46,760 --> 00:09:51,260
of an old way in which we used to do

00:09:48,650 --> 00:09:55,160
something which is what I just described

00:09:51,260 --> 00:09:59,060
where an instructor or a graduate

00:09:55,160 --> 00:10:01,730
student assistant would want us to alter

00:09:59,060 --> 00:10:04,880
our deployment in some way at an

00:10:01,730 --> 00:10:07,790
additional library upgrade a library at

00:10:04,880 --> 00:10:12,020
a data set so they they would email us

00:10:07,790 --> 00:10:14,570
and we would do a kind of sanity build

00:10:12,020 --> 00:10:20,840
say of a new docker image that we were

00:10:14,570 --> 00:10:23,840
gonna roll out we would go to put it in

00:10:20,840 --> 00:10:27,470
our docker file in our in our git repo

00:10:23,840 --> 00:10:31,540
and then that would kick off the sort of

00:10:27,470 --> 00:10:35,150
manual process by us it would be like

00:10:31,540 --> 00:10:38,410
taking bringing down that new you know

00:10:35,150 --> 00:10:41,110
commit into our bootstraps server

00:10:38,410 --> 00:10:45,610
building the docker image getting the

00:10:41,110 --> 00:10:54,740
image hash adding it to our helm config

00:10:45,610 --> 00:10:57,590
and installing the the new charts and so

00:10:54,740 --> 00:11:01,250
it's a very manual process it requires

00:10:57,590 --> 00:11:03,490
us to do these very specific tasks the

00:11:01,250 --> 00:11:08,770
new way of doing things

00:11:03,490 --> 00:11:10,510
is that the academic the instructor or

00:11:08,770 --> 00:11:13,899
the graduate student assistant can go

00:11:10,510 --> 00:11:19,149
ahead and edit the docker file directly

00:11:13,899 --> 00:11:20,920
yeah on github and that issues a pull

00:11:19,149 --> 00:11:25,720
request or they would issue a pull

00:11:20,920 --> 00:11:29,470
request to that and a Travis process

00:11:25,720 --> 00:11:32,230
would then go ahead and build the image

00:11:29,470 --> 00:11:38,890
and then if everything worked okay would

00:11:32,230 --> 00:11:41,529
send us a request to merge and instead

00:11:38,890 --> 00:11:43,500
of this sort of long drawn-out CLI

00:11:41,529 --> 00:11:47,170
process we would literally hit a button

00:11:43,500 --> 00:11:49,390
to to accept that merge and then that

00:11:47,170 --> 00:11:51,310
goes ahead and it starts another Travis

00:11:49,390 --> 00:11:57,339
process which is integrated with our

00:11:51,310 --> 00:12:00,399
helm another button push and so they're

00:11:57,339 --> 00:12:05,110
still there's still room for improvement

00:12:00,399 --> 00:12:08,260
in this but compared to the old way

00:12:05,110 --> 00:12:11,070
where we were bottle necking for the

00:12:08,260 --> 00:12:14,140
instructors by taking advantage of

00:12:11,070 --> 00:12:16,570
existing tools to automate we're no

00:12:14,140 --> 00:12:21,420
longer as much of the gatekeepers as we

00:12:16,570 --> 00:12:26,410
used to be reproducibility and

00:12:21,420 --> 00:12:29,170
complexity so these are there's a very

00:12:26,410 --> 00:12:31,600
tall stack of things here it's it

00:12:29,170 --> 00:12:32,770
involves things in the user environment

00:12:31,600 --> 00:12:36,550
and the server environment it's not

00:12:32,770 --> 00:12:41,440
linear like this various components are

00:12:36,550 --> 00:12:43,540
connected in more than one way in the

00:12:41,440 --> 00:12:45,270
user environment for example there will

00:12:43,540 --> 00:12:50,880
be a handful of domain-specific

00:12:45,270 --> 00:12:53,920
libraries you know geo PI or PI cortex

00:12:50,880 --> 00:12:57,190
and those will depend upon common open

00:12:53,920 --> 00:13:01,000
source Python libraries those depend on

00:12:57,190 --> 00:13:05,589
core Python libraries they sit alongside

00:13:01,000 --> 00:13:10,480
Jupiter and Jupiter hub libraries and

00:13:05,589 --> 00:13:14,350
the Elda and they all are put into a

00:13:10,480 --> 00:13:16,420
container that is authorized by a

00:13:14,350 --> 00:13:19,450
Jupiter hub authenticator

00:13:16,420 --> 00:13:22,959
to be spawned by keep spawner on top of

00:13:19,450 --> 00:13:24,430
kubernetes which sits on top of a cloud

00:13:22,959 --> 00:13:27,010
engine and that's the thing that

00:13:24,430 --> 00:13:32,440
actually creates the bm's and the other

00:13:27,010 --> 00:13:35,800
things and these don't all have the same

00:13:32,440 --> 00:13:40,959
release cycle they don't coordinate with

00:13:35,800 --> 00:13:44,050
one another so this complexity will

00:13:40,959 --> 00:13:46,810
affect your deployment if you are not

00:13:44,050 --> 00:13:55,089
pervasively specifying the versions of

00:13:46,810 --> 00:13:59,110
everything so this this picture makes me

00:13:55,089 --> 00:14:00,760
unreasonably happy I don't know why so

00:13:59,110 --> 00:14:02,680
by the time something happens in the

00:14:00,760 --> 00:14:06,850
middle of the term that requires you to

00:14:02,680 --> 00:14:09,760
redeploy or to add on to something or to

00:14:06,850 --> 00:14:14,500
scale something up it is most likely the

00:14:09,760 --> 00:14:16,779
case that something in that Jenga you

00:14:14,500 --> 00:14:20,410
know tower of things that something in

00:14:16,779 --> 00:14:23,050
that has changed and probably for that

00:14:20,410 --> 00:14:27,459
one component it's that changes for the

00:14:23,050 --> 00:14:30,220
better but your stack won't work in

00:14:27,459 --> 00:14:33,459
exactly the same way and something could

00:14:30,220 --> 00:14:36,279
break and if so you will have to go back

00:14:33,459 --> 00:14:37,920
in time and try to figure out what

00:14:36,279 --> 00:14:41,529
version of everything you are running

00:14:37,920 --> 00:14:43,899
when everything was working so from the

00:14:41,529 --> 00:14:46,860
beginning wherever possible specify the

00:14:43,899 --> 00:14:50,260
version of each component you're using

00:14:46,860 --> 00:14:53,949
in your docker file in your pip

00:14:50,260 --> 00:14:55,779
requirements file in your ansible tasks

00:14:53,949 --> 00:14:58,180
whatever it is that you're using if

00:14:55,779 --> 00:15:01,690
you're happily using the master branch

00:14:58,180 --> 00:15:03,910
of something then then go ahead and get

00:15:01,690 --> 00:15:08,350
the git hash associated with the latest

00:15:03,910 --> 00:15:11,740
commit you can tag your docker images

00:15:08,350 --> 00:15:17,050
with the hashes of the repositories that

00:15:11,740 --> 00:15:20,529
generated them so when when every hash

00:15:17,050 --> 00:15:23,800
and version tag are specified it becomes

00:15:20,529 --> 00:15:26,410
much easier to redeploy there's no

00:15:23,800 --> 00:15:29,440
mystery no wondering why something that

00:15:26,410 --> 00:15:30,620
used to build six weeks ago two weeks

00:15:29,440 --> 00:15:36,080
ago

00:15:30,620 --> 00:15:38,540
that it doesn't build anymore so as an

00:15:36,080 --> 00:15:42,620
example the last week of the spring

00:15:38,540 --> 00:15:44,630
semester it was dead week at Berkeley

00:15:42,620 --> 00:15:48,020
which means it was the week before

00:15:44,630 --> 00:15:50,240
finals so there wasn't any there wasn't

00:15:48,020 --> 00:15:53,120
any lectures they were the students were

00:15:50,240 --> 00:15:57,950
all studying and much to our surprise

00:15:53,120 --> 00:16:02,750
our hub serving 700 plus students it was

00:15:57,950 --> 00:16:06,620
gone and it wasn't running anymore and

00:16:02,750 --> 00:16:09,650
all of our VMs had gotten shut down and

00:16:06,620 --> 00:16:11,660
the Jupiter hub was was went away and

00:16:09,650 --> 00:16:17,290
it's because a cloud bill didn't get

00:16:11,660 --> 00:16:17,290
paid or more precisely our grant ran out

00:16:18,100 --> 00:16:24,740
but but because all of our tooling

00:16:21,140 --> 00:16:29,180
relied on the on the attentiveness the

00:16:24,740 --> 00:16:31,130
attentiveness to versioning and honestly

00:16:29,180 --> 00:16:34,130
because our cloud vendor did delete our

00:16:31,130 --> 00:16:37,460
data once the account was reactivated

00:16:34,130 --> 00:16:39,980
nearly everything came back online the

00:16:37,460 --> 00:16:42,650
way it was without having to be without

00:16:39,980 --> 00:16:44,540
having to be orchestrated by hand the

00:16:42,650 --> 00:16:48,560
docker image hashes were embedded in our

00:16:44,540 --> 00:16:50,570
helm config the library versions and

00:16:48,560 --> 00:16:53,510
hashes were when our container

00:16:50,570 --> 00:16:56,450
specification so while we came back up

00:16:53,510 --> 00:17:03,730
on completely different notes it

00:16:56,450 --> 00:17:05,959
produced the same hub all right so

00:17:03,730 --> 00:17:08,150
observability so for these items I won't

00:17:05,959 --> 00:17:10,850
go I won't go into too much detail not

00:17:08,150 --> 00:17:13,699
because we hadn't not because they're

00:17:10,850 --> 00:17:15,170
not important but we hadn't embraced

00:17:13,699 --> 00:17:17,360
them in the past as much as we could

00:17:15,170 --> 00:17:20,510
have I guess many of our incident

00:17:17,360 --> 00:17:25,250
reports include action items of improved

00:17:20,510 --> 00:17:28,820
monitoring but we do have some nice

00:17:25,250 --> 00:17:30,680
things in place for this semester we

00:17:28,820 --> 00:17:34,630
were able to take advantage of our

00:17:30,680 --> 00:17:38,300
container providers memory analytics so

00:17:34,630 --> 00:17:40,160
before we sort of embarked on this in

00:17:38,300 --> 00:17:42,020
the program we had talked to faculty and

00:17:40,160 --> 00:17:43,160
we found out what the homeworks were

00:17:42,020 --> 00:17:46,340
going to be like the lab

00:17:43,160 --> 00:17:49,670
the projects to get a sense of what

00:17:46,340 --> 00:17:52,070
resources they would need and based on

00:17:49,670 --> 00:17:54,560
that early feedback we can serve release

00:17:52,070 --> 00:17:57,890
conservatively set an estimate of two

00:17:54,560 --> 00:18:03,020
gigabyte memory limit for the the

00:17:57,890 --> 00:18:04,820
student servers and that set our VM

00:18:03,020 --> 00:18:08,210
packing so we knew how many students

00:18:04,820 --> 00:18:10,130
could fit on a node which determined how

00:18:08,210 --> 00:18:17,810
many nodes we would need at max capacity

00:18:10,130 --> 00:18:20,360
and after some time had passed in the

00:18:17,810 --> 00:18:21,920
semester maybe month in there so we took

00:18:20,360 --> 00:18:25,520
a look at these analytics and we saw

00:18:21,920 --> 00:18:29,930
that most students never hits one

00:18:25,520 --> 00:18:32,870
gigabyte of memory and and even those

00:18:29,930 --> 00:18:34,760
who did who did hit one gig they would

00:18:32,870 --> 00:18:37,610
immediately go on to hit two gigabytes

00:18:34,760 --> 00:18:42,280
of memory so the students were basically

00:18:37,610 --> 00:18:44,960
writing runaway runaway tasks so because

00:18:42,280 --> 00:18:46,970
of these metrics we were able to reset

00:18:44,960 --> 00:18:49,310
the memory limit from two gigs down to

00:18:46,970 --> 00:18:51,740
one which meant that we could fit twice

00:18:49,310 --> 00:18:56,930
as many students on a node and half and

00:18:51,740 --> 00:19:02,450
have our our VM costs which worked until

00:18:56,930 --> 00:19:04,790
the last week of class so minor things

00:19:02,450 --> 00:19:07,390
like login counts from the hub we'd go

00:19:04,790 --> 00:19:10,400
to our capacity planning and budgeting

00:19:07,390 --> 00:19:13,580
for this fall we recently monitored some

00:19:10,400 --> 00:19:16,640
IO under load testing and saw that the

00:19:13,580 --> 00:19:20,000
file server VM we chose wasn't sized

00:19:16,640 --> 00:19:23,660
appropriately and was throttling well

00:19:20,000 --> 00:19:25,600
below what would have been acceptable in

00:19:23,660 --> 00:19:27,590
general the logs have been useful in

00:19:25,600 --> 00:19:32,500
contributing to our incident reports

00:19:27,590 --> 00:19:32,500
knowing what component failed and when

00:19:34,090 --> 00:19:41,120
so our incident reports whenever we had

00:19:38,000 --> 00:19:44,750
an outage of of any length or a service

00:19:41,120 --> 00:19:47,240
degradation we forced ourselves or at

00:19:44,750 --> 00:19:50,770
least I had to force myself to write an

00:19:47,240 --> 00:19:53,900
incident reports it wasn't and

00:19:50,770 --> 00:19:55,360
truthfully still isn't my first instinct

00:19:53,900 --> 00:19:57,560
to do this immediately

00:19:55,360 --> 00:19:59,600
when dealing with a problem which this

00:19:57,560 --> 00:20:03,020
is which is the sort of wave goodbye to

00:19:59,600 --> 00:20:06,080
the problem in the rearview mirror to

00:20:03,020 --> 00:20:08,660
that troublesome thing you know you're

00:20:06,080 --> 00:20:10,820
you're you know in a chat session a

00:20:08,660 --> 00:20:13,550
slack Channel and you're saying well

00:20:10,820 --> 00:20:16,430
done everybody I'm glad we recovered the

00:20:13,550 --> 00:20:19,010
event is over and my first instinct is

00:20:16,430 --> 00:20:22,220
not to immediately revisit that trauma

00:20:19,010 --> 00:20:24,980
and document everything but it is good

00:20:22,220 --> 00:20:27,620
hygiene and it's produced some some very

00:20:24,980 --> 00:20:30,200
good things our incident reports are

00:20:27,620 --> 00:20:33,140
fairly straightforward there's a summary

00:20:30,200 --> 00:20:37,280
of the incident timeline conclusion

00:20:33,140 --> 00:20:40,160
action items this doesn't mean you take

00:20:37,280 --> 00:20:44,300
action right away but at least it is

00:20:40,160 --> 00:20:47,750
documented and the reports focused us

00:20:44,300 --> 00:20:50,420
force us to reflect and remember all of

00:20:47,750 --> 00:20:53,540
the details and the the reports are

00:20:50,420 --> 00:20:56,960
actually online they're open in our git

00:20:53,540 --> 00:21:00,380
repo the reports are blameless so we can

00:20:56,960 --> 00:21:03,430
focus on thoroughly analyzing the event

00:21:00,380 --> 00:21:05,780
we don't want anybody to be discouraged

00:21:03,430 --> 00:21:10,340
from reporting all the relevant details

00:21:05,780 --> 00:21:11,990
and most of these incidents led to

00:21:10,340 --> 00:21:15,500
either direct improvements in our

00:21:11,990 --> 00:21:22,820
deployment or it led to issues being

00:21:15,500 --> 00:21:24,230
filed and fixed upstream and with with

00:21:22,820 --> 00:21:26,930
coupon or actually we're cheating a bit

00:21:24,230 --> 00:21:29,200
there because UV is the is the owner of

00:21:26,930 --> 00:21:29,200
that

00:21:31,200 --> 00:21:37,029
generalization so being a good

00:21:35,200 --> 00:21:38,859
open-source citizen means that if we

00:21:37,029 --> 00:21:42,009
think that we have hit a bug we

00:21:38,859 --> 00:21:44,080
investigate sometimes they're the root

00:21:42,009 --> 00:21:47,049
cause of our issue is not something that

00:21:44,080 --> 00:21:49,359
we've done it's not something in our in

00:21:47,049 --> 00:21:52,659
our helm config or in our notebook

00:21:49,359 --> 00:21:57,039
extensions it's something upstream and

00:21:52,659 --> 00:21:59,889
if if we find it and if we report it

00:21:57,039 --> 00:22:02,590
source in the patch that means we can

00:21:59,889 --> 00:22:06,759
fix it for everybody else which includes

00:22:02,590 --> 00:22:09,039
us from the future it means we're not

00:22:06,759 --> 00:22:13,690
carrying around a box of patches we're

00:22:09,039 --> 00:22:15,940
not using a fork it means that others

00:22:13,690 --> 00:22:18,039
who use the same tools that we're using

00:22:15,940 --> 00:22:22,929
are more likely to stick with them

00:22:18,039 --> 00:22:24,489
because they're more reliable and it

00:22:22,929 --> 00:22:27,029
means that the bugs become even more

00:22:24,489 --> 00:22:27,029
shallower

00:22:28,139 --> 00:22:35,619
so if our deployment is reproducible if

00:22:32,470 --> 00:22:39,820
we have observed it in production found

00:22:35,619 --> 00:22:41,289
bugs reported them fix them then it can

00:22:39,820 --> 00:22:43,659
be generalized and made to work for

00:22:41,289 --> 00:22:46,749
others and we what we hope to do is

00:22:43,659 --> 00:22:48,730
create an open-source product of which

00:22:46,749 --> 00:22:52,960
Berkeley just happens to be the first

00:22:48,730 --> 00:22:56,139
user of it's not something specific to

00:22:52,960 --> 00:22:58,029
Berkeley it's not a kind of you know

00:22:56,139 --> 00:23:02,799
specialized snowflake that can only

00:22:58,029 --> 00:23:05,559
exist on our campus or on on our VMs as

00:23:02,799 --> 00:23:07,720
a kind of test that this does work we

00:23:05,559 --> 00:23:11,019
have redeployed on different cloud

00:23:07,720 --> 00:23:13,950
providers we've also deployed on bare

00:23:11,019 --> 00:23:16,179
metal cluster for our business school

00:23:13,950 --> 00:23:23,499
most recently for the summer version of

00:23:16,179 --> 00:23:24,369
the course and along the way the

00:23:23,499 --> 00:23:28,269
deployment has been thoroughly

00:23:24,369 --> 00:23:31,960
documented by Chris hold graph by UV by

00:23:28,269 --> 00:23:34,749
Carol willing and a number of people who

00:23:31,960 --> 00:23:38,619
have gone through the process who have

00:23:34,749 --> 00:23:41,470
found and reported issues or sent us PRS

00:23:38,619 --> 00:23:46,780
for use cases we didn't account

00:23:41,470 --> 00:23:50,980
for and I've gone back to peruse this

00:23:46,780 --> 00:23:53,590
when I needed UV demoed this actually

00:23:50,980 --> 00:23:56,110
yesterday and walked a roomful of people

00:23:53,590 --> 00:24:01,539
through creating a kubernetes cluster

00:23:56,110 --> 00:24:04,030
and then deploying jupiter hub on top so

00:24:01,539 --> 00:24:06,700
if you're if you're interested in

00:24:04,030 --> 00:24:08,080
learning more about our deployments we'd

00:24:06,700 --> 00:24:10,419
be happy to get in touch with you if

00:24:08,080 --> 00:24:13,240
you're interested in taking the

00:24:10,419 --> 00:24:16,450
infrastructure for a spin we love to

00:24:13,240 --> 00:24:18,640
hear your feedback as I mentioned

00:24:16,450 --> 00:24:21,580
Gunjan and Vanita are giving a talk

00:24:18,640 --> 00:24:24,190
later today in part about how notebooks

00:24:21,580 --> 00:24:28,330
are used in the course about the various

00:24:24,190 --> 00:24:34,440
tools that the instructors and grad

00:24:28,330 --> 00:24:42,739
students are using any questions

00:24:34,440 --> 00:24:42,739
[Applause]

00:24:42,850 --> 00:24:47,810
we have a good 15 minutes for questions

00:24:45,320 --> 00:24:53,090
so bring them on and if you can repeat

00:24:47,810 --> 00:24:56,060
questions for audio that's helpful you V

00:24:53,090 --> 00:25:39,800
if you want to come up there's a mic for

00:24:56,060 --> 00:25:42,500
you a bit of the talk yeah so the the

00:25:39,800 --> 00:25:44,690
the user servers are started by

00:25:42,500 --> 00:25:46,460
kubernetes and once they're running they

00:25:44,690 --> 00:25:50,720
they'll just continue to run regardless

00:25:46,460 --> 00:25:53,090
of when we've done the updates if the

00:25:50,720 --> 00:25:54,830
student or instructor would have shut

00:25:53,090 --> 00:25:55,970
down their server and an update had

00:25:54,830 --> 00:26:00,350
happened behind the scenes and they

00:25:55,970 --> 00:26:03,440
would get the new changes the we provide

00:26:00,350 --> 00:26:06,320
the the base set of libraries after

00:26:03,440 --> 00:26:08,870
having talked to the the instructor for

00:26:06,320 --> 00:26:11,210
the foundational course and all the all

00:26:08,870 --> 00:26:14,660
the other instructors we provide a base

00:26:11,210 --> 00:26:16,310
set of libraries and sometimes they do

00:26:14,660 --> 00:26:18,590
require updating throughout the semester

00:26:16,310 --> 00:26:23,150
so as this as I described in that

00:26:18,590 --> 00:26:26,330
process there's this workflow and we can

00:26:23,150 --> 00:26:29,840
initiate a push of that image you know

00:26:26,330 --> 00:26:32,360
to all the nodes and once that happens

00:26:29,840 --> 00:26:33,770
then anytime somebody new starts up a

00:26:32,360 --> 00:26:36,650
server then they'll they'll get that new

00:26:33,770 --> 00:26:41,270
environment within the single user

00:26:36,650 --> 00:26:43,010
environment anybody can install whatever

00:26:41,270 --> 00:26:47,440
they want so they have full permission

00:26:43,010 --> 00:26:50,110
they can pip install something they can

00:26:47,440 --> 00:26:53,409
you know they can install whatever they

00:26:50,110 --> 00:26:55,929
want if they shut that down and start it

00:26:53,409 --> 00:26:59,649
up again then by default they won't see

00:26:55,929 --> 00:27:02,049
those changes it'll be whatever we've

00:26:59,649 --> 00:27:04,750
decided from the pedagogical point of

00:27:02,049 --> 00:27:07,980
view to provide everybody and in

00:27:04,750 --> 00:27:11,320
addition we done the color so every hard

00:27:07,980 --> 00:27:12,750
people who haven't used the the notebook

00:27:11,320 --> 00:27:15,039
for like an hour they'll get shut down

00:27:12,750 --> 00:27:16,870
so for normal students like if you know

00:27:15,039 --> 00:27:18,549
if they upgraded like a new library at

00:27:16,870 --> 00:27:20,169
best like they'll see it when they go to

00:27:18,549 --> 00:27:22,389
sleep and they wake up because they're

00:27:20,169 --> 00:27:31,990
part of died and then when they come up

00:27:22,389 --> 00:27:34,570
they'll come up with a new image yeah so

00:27:31,990 --> 00:27:36,549
the the foundational course and

00:27:34,570 --> 00:27:39,659
connector courses share the same hub so

00:27:36,549 --> 00:27:42,730
they do have they do show the same image

00:27:39,659 --> 00:27:46,120
there are we what we'd like to do is

00:27:42,730 --> 00:27:48,759
well what I'd like to do is to provide

00:27:46,120 --> 00:27:50,440
you know custom images to to various

00:27:48,759 --> 00:27:52,509
courses and you know that that's

00:27:50,440 --> 00:27:53,649
possible that's that's on the roadmap of

00:27:52,509 --> 00:27:55,419
things we're thinking about but they all

00:27:53,649 --> 00:27:58,690
share the same image mostly because the

00:27:55,419 --> 00:28:00,399
core concepts are the same some of the

00:27:58,690 --> 00:28:02,879
connector courses do have specialized

00:28:00,399 --> 00:28:05,519
things we haven't run into a case where

00:28:02,879 --> 00:28:10,590
one thing is incompatible with another

00:28:05,519 --> 00:28:10,590
we have one kernel we're using Python 3

00:28:16,510 --> 00:28:23,169
we use a Google Authenticator so that's

00:28:19,240 --> 00:28:25,929
part of the the formal Authenticator

00:28:23,169 --> 00:28:27,460
package we use that because Berkeley is

00:28:25,929 --> 00:28:29,230
integrated into the Google Apps domain

00:28:27,460 --> 00:28:32,100
when the students come in they get a

00:28:29,230 --> 00:28:34,960
gmail account

00:28:32,100 --> 00:28:36,480
it's Berkeley branded yeah yeah by

00:28:34,960 --> 00:28:39,220
Google

00:28:36,480 --> 00:28:44,020
exactly yeah so they you do the

00:28:39,220 --> 00:28:46,000
authentication you get back a username

00:28:44,020 --> 00:28:49,630
which is essentially the part of the

00:28:46,000 --> 00:28:51,309
email address before they ask and you

00:28:49,630 --> 00:28:53,980
can use it if you haven't have a hosted

00:28:51,309 --> 00:28:55,929
domain you can use that as well we could

00:28:53,980 --> 00:28:57,160
have chosen something like github

00:28:55,929 --> 00:28:58,360
Authenticator but that would have

00:28:57,160 --> 00:29:01,590
required that we asked all of our

00:28:58,360 --> 00:29:01,590
students a great github accounts

00:29:14,039 --> 00:29:19,870
sure do you want to yeah became so odd

00:29:18,340 --> 00:29:21,220
repositories public so you can take a

00:29:19,870 --> 00:29:24,580
look at it and I think we'll put up a

00:29:21,220 --> 00:29:26,590
URL later so what we do is when PR comes

00:29:24,580 --> 00:29:28,690
in we just build the darker image and

00:29:26,590 --> 00:29:31,240
then we run a very simple test which

00:29:28,690 --> 00:29:33,909
just checks if like you know if you can

00:29:31,240 --> 00:29:35,380
start the container and like run the

00:29:33,909 --> 00:29:38,919
Jupiter hub single user process inside

00:29:35,380 --> 00:29:40,570
it and then when we merge it we build

00:29:38,919 --> 00:29:44,140
the image again but this time we also

00:29:40,570 --> 00:29:47,590
push it to docker hub in our case right

00:29:44,140 --> 00:29:50,559
now and then and then what we do is we

00:29:47,590 --> 00:29:53,260
have encrypted SSH keys for our

00:29:50,559 --> 00:29:56,080
communities master in Travis so just

00:29:53,260 --> 00:29:58,600
basically SSH as in and then does the

00:29:56,080 --> 00:30:00,730
deployment and then does like basically

00:29:58,600 --> 00:30:02,890
like waits till the hub pod is available

00:30:00,730 --> 00:30:06,789
again and then that's it so it's like

00:30:02,890 --> 00:30:08,409
fairly simple Python script that does

00:30:06,789 --> 00:30:09,610
like almost all of this we want to add

00:30:08,409 --> 00:30:11,830
more testing or other things we want to

00:30:09,610 --> 00:30:14,380
do is whenever people add a new library

00:30:11,830 --> 00:30:15,909
we want them to add a test for it this

00:30:14,380 --> 00:30:17,890
is just this one Python file where

00:30:15,909 --> 00:30:20,080
you're like yeah do an import and then

00:30:17,890 --> 00:30:22,179
do like the simplest possible thing that

00:30:20,080 --> 00:30:23,620
will let you have some confidence that

00:30:22,179 --> 00:30:24,880
this is going to work so that you know

00:30:23,620 --> 00:30:27,580
when someone else changes a different

00:30:24,880 --> 00:30:29,559
library six months down the line it's

00:30:27,580 --> 00:30:31,539
not gonna break it but we haven't done

00:30:29,559 --> 00:30:33,850
that yet but we'll hopefully likes class

00:30:31,539 --> 00:30:35,200
started like what yesterday so we were

00:30:33,850 --> 00:30:38,049
like okay let's get this out of the way

00:30:35,200 --> 00:30:39,610
first and then we'll probably do process

00:30:38,049 --> 00:30:42,340
the provements next semester cuz you

00:30:39,610 --> 00:30:43,659
know that's how that works but we'll

00:30:42,340 --> 00:30:46,260
probably put up the you we're on a while

00:30:43,659 --> 00:30:46,260
and you can go see it

00:30:58,650 --> 00:31:06,870
so we use a the virtual end and it's

00:31:02,890 --> 00:31:09,730
owned by the same user that that the the

00:31:06,870 --> 00:31:18,160
notebook is running inside the so they

00:31:09,730 --> 00:31:19,600
have they can write to that area right

00:31:18,160 --> 00:31:22,179
they can't apt-get install something

00:31:19,600 --> 00:31:25,480
they could you know download a source

00:31:22,179 --> 00:31:28,270
package and I don't think we yeah I

00:31:25,480 --> 00:31:32,760
don't think we ship a compiler but yeah

00:31:28,270 --> 00:31:32,760
I think that person's been waiting

00:31:43,480 --> 00:31:51,670
yeah in fact I've done that for testing

00:31:46,630 --> 00:31:54,460
various things but if we sort of permit

00:31:51,670 --> 00:31:55,930
that to override the installed

00:31:54,460 --> 00:31:58,990
environment then they can get into

00:31:55,930 --> 00:32:00,730
trouble so by default it actually you

00:31:58,990 --> 00:32:08,200
know gets wiped whenever their server

00:32:00,730 --> 00:32:11,320
goes away oh gosh

00:32:08,200 --> 00:32:12,850
it's about three gigs right now but at

00:32:11,320 --> 00:32:31,660
the end of last semester it was around

00:32:12,850 --> 00:32:34,210
eight so we did a bunch of trimming so I

00:32:31,660 --> 00:32:36,610
actually don't know about the Wi-Fi on

00:32:34,210 --> 00:32:39,910
on campus I we hadn't heard of any

00:32:36,610 --> 00:32:41,740
problems I did you know the the

00:32:39,910 --> 00:32:43,930
connectivity they didn't get back to us

00:32:41,740 --> 00:32:47,200
but as we've seen in that conference you

00:32:43,930 --> 00:32:50,190
know it can be an issue the HTTP proxy

00:32:47,200 --> 00:32:52,870
so you visas been doing a lot of

00:32:50,190 --> 00:32:54,310
improvements along with men with the

00:32:52,870 --> 00:32:56,680
proxy stuff you want to talk about that

00:32:54,310 --> 00:32:59,800
yeah so we actually ran completely

00:32:56,680 --> 00:33:01,990
hacked together terrible replacement for

00:32:59,800 --> 00:33:04,600
CHP called n CHP which was based on

00:33:01,990 --> 00:33:05,920
nginx but we are not doing that the

00:33:04,600 --> 00:33:08,200
semester the semester is running just

00:33:05,920 --> 00:33:10,330
running CHP but me and men have been

00:33:08,200 --> 00:33:11,680
working on soju / of 0.8 is in beta now

00:33:10,330 --> 00:33:14,350
it'll probably release in a while so

00:33:11,680 --> 00:33:15,850
we're actually running superb 0.8 on the

00:33:14,350 --> 00:33:19,450
current release that lets you use

00:33:15,850 --> 00:33:20,620
arbitrary proxies not just CHP so for

00:33:19,450 --> 00:33:22,810
cube spawner we have a version that's

00:33:20,620 --> 00:33:25,180
coming up that lets you run like using

00:33:22,810 --> 00:33:27,430
cubed this is native HTTP routing layer

00:33:25,180 --> 00:33:30,490
so you can have like 20 versions of the

00:33:27,430 --> 00:33:32,860
proxy and deal with that but for CHP we

00:33:30,490 --> 00:33:35,650
did a bunch of stress tests and CHP you

00:33:32,860 --> 00:33:38,290
is fine until like three thousand four

00:33:35,650 --> 00:33:40,630
thousand concurrent users the bottleneck

00:33:38,290 --> 00:33:44,440
is elsewhere so we haven't really run

00:33:40,630 --> 00:33:48,060
into a bottleneck with CHP so far so in

00:33:44,440 --> 00:33:48,060
testing it's it's held up pretty well

00:33:53,160 --> 00:33:57,630
yeah so we for one in one of the

00:33:56,280 --> 00:34:00,930
connector courses they did need some

00:33:57,630 --> 00:34:04,680
data and I think it was on the order of

00:34:00,930 --> 00:34:11,909
a few hundred Meg's it was some fMRI

00:34:04,680 --> 00:34:13,860
brain imaging data and if I recall we

00:34:11,909 --> 00:34:16,290
what we did there was we attached it to

00:34:13,860 --> 00:34:20,580
a read-only volume that was separate

00:34:16,290 --> 00:34:22,080
from the user containers and so it would

00:34:20,580 --> 00:34:30,990
get attached to everybody's he wouldn't

00:34:22,080 --> 00:34:32,700
take up the the image basically it's not

00:34:30,990 --> 00:34:37,500
included as part of the core image we

00:34:32,700 --> 00:34:41,000
would attach that volume later as when

00:34:37,500 --> 00:34:41,000
there's a server was coming up

00:34:54,520 --> 00:35:03,800
so I'm like IT Berkeley I'm in the

00:34:59,090 --> 00:35:06,530
Statistics Department UV UV is obviously

00:35:03,800 --> 00:35:12,080
he's a core jupiter member the other

00:35:06,530 --> 00:35:16,190
folks are our students and very bright

00:35:12,080 --> 00:35:18,890
students but students you know and I

00:35:16,190 --> 00:35:23,290
think I think there's a total of maybe

00:35:18,890 --> 00:35:26,270
five or six I think that's about right

00:35:23,290 --> 00:35:28,170
all of those students are here in the

00:35:26,270 --> 00:35:35,499
conference

00:35:28,170 --> 00:35:35,499
[Applause]

00:35:44,260 --> 00:35:52,190
yeah so I think this we're using the the

00:35:47,870 --> 00:35:54,710
Postgres right where and the follow-up

00:35:52,190 --> 00:35:56,390
was so this is not like what the

00:35:54,710 --> 00:35:57,770
previous speaker in this room was using

00:35:56,390 --> 00:35:59,750
for the we're not using the contents

00:35:57,770 --> 00:36:03,580
manager or using it for the Jupiter hub

00:35:59,750 --> 00:36:03,580
database itself what was the second part

00:36:08,830 --> 00:36:14,150
we don't have no multiple Jupiter hubs

00:36:11,570 --> 00:36:16,090
because it's running on kubernetes if

00:36:14,150 --> 00:36:18,110
something did happen to that hub pod

00:36:16,090 --> 00:36:20,420
kubernetes would ensure that another one

00:36:18,110 --> 00:36:20,870
would start up yeah and just to add on

00:36:20,420 --> 00:36:24,290
to that

00:36:20,870 --> 00:36:27,200
so one of the so I also there's a talk

00:36:24,290 --> 00:36:28,970
at 4p 4:10 where we talk about superhub

00:36:27,200 --> 00:36:30,530
we're ripping this up again but one of

00:36:28,970 --> 00:36:32,570
the core principles of communities is

00:36:30,530 --> 00:36:34,760
this like buzz phrase called like cattle

00:36:32,570 --> 00:36:37,910
not pets so you don't have a concept of

00:36:34,760 --> 00:36:39,440
a main node all nodes are equal and so

00:36:37,910 --> 00:36:41,750
it's just like oh yeah run this hub

00:36:39,440 --> 00:36:43,460
process on some node or more like make

00:36:41,750 --> 00:36:45,170
sure there is at least one hub process

00:36:43,460 --> 00:36:46,640
running in this cluster so if the hub

00:36:45,170 --> 00:36:48,650
process goes down because the node dies

00:36:46,640 --> 00:36:50,510
or like the processor error humaneness

00:36:48,650 --> 00:36:51,560
will immediately notice and then be like

00:36:50,510 --> 00:36:54,080
okay I'm just gonna start this up

00:36:51,560 --> 00:36:59,630
somewhere else and then make sure that

00:36:54,080 --> 00:37:01,520
that just works there might be I mean

00:36:59,630 --> 00:37:03,320
like usually we haven't really run into

00:37:01,520 --> 00:37:05,900
a delay that like like like people

00:37:03,320 --> 00:37:06,920
notice but also the design of this whole

00:37:05,900 --> 00:37:09,470
thing is set up in such a way that if

00:37:06,920 --> 00:37:11,300
the hub dies then new users cannot log

00:37:09,470 --> 00:37:13,160
in but people who are already logged and

00:37:11,300 --> 00:37:14,720
don't see any disruption that's also

00:37:13,160 --> 00:37:17,270
what allows us to actually do deploys

00:37:14,720 --> 00:37:19,220
during class because while we are doing

00:37:17,270 --> 00:37:20,330
the deploy for a few seconds new users

00:37:19,220 --> 00:37:22,190
can't log in but people are already

00:37:20,330 --> 00:37:23,810
logged and can still see it so even if

00:37:22,190 --> 00:37:26,180
there's a delay it just means it's a

00:37:23,810 --> 00:37:27,680
delay for new people getting in and that

00:37:26,180 --> 00:37:29,950
seems acceptable so far nobody's

00:37:27,680 --> 00:37:29,950
complained

00:37:37,050 --> 00:37:41,080
right yeah but

00:37:39,220 --> 00:37:43,450
so we basically give it enough resources

00:37:41,080 --> 00:37:46,060
so that it doesn't go down and in Super

00:37:43,450 --> 00:37:47,710
Hub 0.8 we paid like contributor history

00:37:46,060 --> 00:37:51,640
proxy is no longer a single proxy you

00:37:47,710 --> 00:37:53,980
can run traffic or or any community's

00:37:51,640 --> 00:37:56,140
ingress compatible layer and like we've

00:37:53,980 --> 00:37:57,580
had good success of the traffic and so

00:37:56,140 --> 00:37:59,260
you can basically run like ten instance

00:37:57,580 --> 00:38:00,850
of it and so if one goes down that's

00:37:59,260 --> 00:38:02,770
fine he'll just like route to a

00:38:00,850 --> 00:38:04,600
different one and everything okay so

00:38:02,770 --> 00:38:07,030
yeah CSV was the single point of failure

00:38:04,600 --> 00:38:25,960
but it is as of 0.8 that would no longer

00:38:07,030 --> 00:38:28,690
be the case yeah that's just part of

00:38:25,960 --> 00:38:30,400
jeepers hub you can give it any SQL

00:38:28,690 --> 00:38:31,780
alchemy compatible thing for last

00:38:30,400 --> 00:38:34,120
semester actually we're just using SQL

00:38:31,780 --> 00:38:37,450
like the reason we are not using it this

00:38:34,120 --> 00:38:40,020
time is just to be like safer than sorry

00:38:37,450 --> 00:38:40,020
yeah

00:38:50,200 --> 00:38:56,240
yeah so the zero to Jupiter hub that the

00:38:53,600 --> 00:38:58,730
URL that was up yesterday earlier is a

00:38:56,240 --> 00:39:00,800
package yeah this one it's basically a

00:38:58,730 --> 00:39:03,680
package plus surrounding Docs that you

00:39:00,800 --> 00:39:08,900
can deploy on communities I haven't used

00:39:03,680 --> 00:39:10,190
Rancher so I'm not sure yeah yeah the it

00:39:08,900 --> 00:39:13,820
basically uses the Helen chart which is

00:39:10,190 --> 00:39:17,170
which provides all of that for you yeah

00:39:13,820 --> 00:39:17,170
that's the URL there

00:39:20,540 --> 00:39:26,810
it supports anything from 1.5 up I think

00:39:23,860 --> 00:39:30,830
or rather that's what we test on we test

00:39:26,810 --> 00:39:32,870
on 1.6 and 1.7 works as well but there

00:39:30,830 --> 00:39:34,520
shouldn't be any blockers that have it

00:39:32,870 --> 00:39:38,350
stopped working on we had it running on

00:39:34,520 --> 00:39:38,350
a 1.2 cluster up to a few months ago

00:39:54,840 --> 00:40:02,350
so we've we just put in place crow fauna

00:39:58,440 --> 00:40:06,609
we before you know we would look at the

00:40:02,350 --> 00:40:10,960
number of containers running the number

00:40:06,609 --> 00:40:17,800
of pods the i/o has been you know after

00:40:10,960 --> 00:40:21,369
some testing the i/o came up for a brief

00:40:17,800 --> 00:40:27,220
period we were using stats D and logging

00:40:21,369 --> 00:40:31,000
to data dog and I think we've switched

00:40:27,220 --> 00:40:33,130
away from that kind of thinking using

00:40:31,000 --> 00:40:36,210
Prometheus now which is like the very

00:40:33,130 --> 00:40:36,210
popular thing with Cuban it is

00:40:39,150 --> 00:40:43,699

YouTube URL: https://www.youtube.com/watch?v=ivswAxysfTk


