Title: Building a powerful data science IDE for R, Python, and SQL using JupyterLab - Ali Marami
Publication date: 2017-09-22
Playlist: JupyterCon
Description: 
	JupyterLab provides a robust foundation for building flexible computational environments. Ali Marami explains how R-Brain leveraged the JupyterLab extension architecture to build a powerful IDE for data scientists, one of the few tools in the market that evenly supports R and Python in data science and includes features such as IntelliSense, debugging, and environment and data view.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,599 --> 00:00:09,129
thank you very much for attending our

00:00:05,310 --> 00:00:12,340
presentation today today I'm going to

00:00:09,129 --> 00:00:17,439
talk about the IDE that actually we

00:00:12,340 --> 00:00:21,300
built on top of Jupiter lab I will

00:00:17,439 --> 00:00:25,419
actually not go through the details of

00:00:21,300 --> 00:00:27,160
technical issues it's a possible subject

00:00:25,419 --> 00:00:30,250
that we can discuss in like half an hour

00:00:27,160 --> 00:00:34,030
but we'd be more than happy to answer

00:00:30,250 --> 00:00:36,970
your questions after the session or you

00:00:34,030 --> 00:00:42,520
can reach me out I will share my contact

00:00:36,970 --> 00:00:45,100
with you any time starting about myself

00:00:42,520 --> 00:00:49,329
my name is alamelu me I am one of the

00:00:45,100 --> 00:00:51,040
founders of our brain I'm one of the one

00:00:49,329 --> 00:00:53,440
of those guys that actually shifted from

00:00:51,040 --> 00:00:55,720
pureeing journey to data science my

00:00:53,440 --> 00:00:58,989
undergrad is electrical engineering but

00:00:55,720 --> 00:01:03,970
eventually I ended up to PhD in finance

00:00:58,989 --> 00:01:08,710
to just modeling but I don't regret that

00:01:03,970 --> 00:01:11,800
I'm really happy about my shift about

00:01:08,710 --> 00:01:15,400
our brain itself our mission is to build

00:01:11,800 --> 00:01:17,280
an advanced IDE just for data scientists

00:01:15,400 --> 00:01:19,750
we see a lot of tools in the market

00:01:17,280 --> 00:01:22,210
supporting software developer a huge

00:01:19,750 --> 00:01:25,780
actually improvement we observe in

00:01:22,210 --> 00:01:29,760
recent years in this field but still we

00:01:25,780 --> 00:01:32,020
see that actually an IDE built for

00:01:29,760 --> 00:01:34,000
particularly data says supporting

00:01:32,020 --> 00:01:36,610
multiple language is something that is

00:01:34,000 --> 00:01:39,070
already missed in the market so this is

00:01:36,610 --> 00:01:40,750
our mission to build something on top of

00:01:39,070 --> 00:01:44,229
Jupiter lab supporting open source

00:01:40,750 --> 00:01:47,170
languages our products are it's we have

00:01:44,229 --> 00:01:50,049
a data science platform it's available

00:01:47,170 --> 00:01:52,390
on public cloud you can easily go open a

00:01:50,049 --> 00:01:55,150
copy in its subscription base you can

00:01:52,390 --> 00:01:58,540
use and run your model share your model

00:01:55,150 --> 00:02:00,250
scale in and scale out and also we have

00:01:58,540 --> 00:02:01,689
a private cloud service you can actually

00:02:00,250 --> 00:02:03,610
implement the same service on your

00:02:01,689 --> 00:02:06,850
private cloud and also we have on

00:02:03,610 --> 00:02:08,950
premises version that's its IT people

00:02:06,850 --> 00:02:13,239
love it because it's really easy to

00:02:08,950 --> 00:02:14,770
install and also scale we have also

00:02:13,239 --> 00:02:16,870
separate services for

00:02:14,770 --> 00:02:18,700
you want to integrate this idea in your

00:02:16,870 --> 00:02:20,920
platform in your data science platform

00:02:18,700 --> 00:02:23,380
for example we are actually happy to

00:02:20,920 --> 00:02:25,450
help you out and if you are willing to

00:02:23,380 --> 00:02:29,020
develop any special journal for any

00:02:25,450 --> 00:02:33,880
particular languages or services in your

00:02:29,020 --> 00:02:37,000
firm also we can support you so talking

00:02:33,880 --> 00:02:40,620
about data science IDE so what are the

00:02:37,000 --> 00:02:43,420
main elements of a data science IDE so

00:02:40,620 --> 00:02:46,630
definitely is an IDE it should have

00:02:43,420 --> 00:02:48,670
language support protocols and it should

00:02:46,630 --> 00:02:51,160
actually have some services content

00:02:48,670 --> 00:02:53,590
assistance syntax coloring autocomplete

00:02:51,160 --> 00:02:56,560
that actually we are expecting and we

00:02:53,590 --> 00:02:59,290
know that because of the because data is

00:02:56,560 --> 00:03:03,070
involved in data science IDE those

00:02:59,290 --> 00:03:05,580
particular services become a little bit

00:03:03,070 --> 00:03:09,820
more complicated as just an ID for

00:03:05,580 --> 00:03:12,610
developed software development we expect

00:03:09,820 --> 00:03:15,250
something that is supports are and

00:03:12,610 --> 00:03:18,760
Python or scholar those actually most

00:03:15,250 --> 00:03:20,590
popular languages in the market we see

00:03:18,760 --> 00:03:24,250
that there is actually separate echo

00:03:20,590 --> 00:03:26,860
system for R and Python in terms of ID

00:03:24,250 --> 00:03:30,070
and tools but we see a lot of overlap

00:03:26,860 --> 00:03:32,860
and see that people data science say

00:03:30,070 --> 00:03:36,060
foolish like now actually stood to know

00:03:32,860 --> 00:03:38,410
both of them and it's really it's really

00:03:36,060 --> 00:03:41,080
definitely helpful that they don't need

00:03:38,410 --> 00:03:43,690
to change the tool when they switch

00:03:41,080 --> 00:03:45,250
between languages for example data

00:03:43,690 --> 00:03:48,400
environment views and other elements

00:03:45,250 --> 00:03:51,090
that's really helpful to have it on in

00:03:48,400 --> 00:03:54,400
the IDE import/export of the data

00:03:51,090 --> 00:03:58,870
debugger is really an important issue we

00:03:54,400 --> 00:04:01,420
see that now the algorithm codes are

00:03:58,870 --> 00:04:04,300
getting more complicated in this domain

00:04:01,420 --> 00:04:06,970
and definitely advanced to such debugger

00:04:04,300 --> 00:04:08,440
helps them the data set is out to to

00:04:06,970 --> 00:04:10,810
have actually more efficient development

00:04:08,440 --> 00:04:13,989
and of course more importantly should

00:04:10,810 --> 00:04:16,090
have support notebook we cannot leave as

00:04:13,989 --> 00:04:20,680
a data scientist without notebook

00:04:16,090 --> 00:04:24,310
anymore for district Jupiter lab is a

00:04:20,680 --> 00:04:26,500
perfect choice because it's a an

00:04:24,310 --> 00:04:27,370
integrated computational environment so

00:04:26,500 --> 00:04:29,770
I

00:04:27,370 --> 00:04:31,780
you just attended in intersession of

00:04:29,770 --> 00:04:34,120
Jupiter lap before today stuck I don't

00:04:31,780 --> 00:04:36,880
go through to the details of Jupiter lab

00:04:34,120 --> 00:04:38,710
itself but you know that actually it's

00:04:36,880 --> 00:04:43,360
good at the feature parity with the

00:04:38,710 --> 00:04:45,160
commercial on notebooks say 99.9% it has

00:04:43,360 --> 00:04:46,840
flexible layout which is amazing that

00:04:45,160 --> 00:04:49,840
you can set up your environment as you

00:04:46,840 --> 00:04:54,810
wish it's extensible through api's and

00:04:49,840 --> 00:04:57,760
it's a fantastic choice so in July just

00:04:54,810 --> 00:05:01,180
five months after we started to develop

00:04:57,760 --> 00:05:04,210
our own IDE in with Anna base another

00:05:01,180 --> 00:05:07,210
tool when we just engage during Jupiter

00:05:04,210 --> 00:05:10,419
project then we switch to this world

00:05:07,210 --> 00:05:12,790
because of this reason and it's really

00:05:10,419 --> 00:05:16,810
hard to be reluctant to these fantastic

00:05:12,790 --> 00:05:19,000
creatures but we had also challenges the

00:05:16,810 --> 00:05:21,669
Jupiter lab as I mentioned before about

00:05:19,000 --> 00:05:25,120
the elements those elements

00:05:21,669 --> 00:05:27,729
many of them are missed in Jupiter lab

00:05:25,120 --> 00:05:29,800
so we started to develop things on top

00:05:27,729 --> 00:05:33,460
of that and and these are the challenges

00:05:29,800 --> 00:05:37,150
that we face and try to to resolve so

00:05:33,460 --> 00:05:40,630
one thing was you know that Jupiter lab

00:05:37,150 --> 00:05:43,630
was out of the box comes from code meter

00:05:40,630 --> 00:05:45,610
editor it's a very nice editor but city

00:05:43,630 --> 00:05:49,479
flags for extra features that we are

00:05:45,610 --> 00:05:53,020
looking for and we found at the same

00:05:49,479 --> 00:05:55,960
time we were lucky that Morocco was

00:05:53,020 --> 00:05:58,210
actually released which is the heart of

00:05:55,960 --> 00:06:02,139
they they actually separated out as an

00:05:58,210 --> 00:06:04,660
API of BS code which could be used in

00:06:02,139 --> 00:06:06,940
another platform like ours we just learn

00:06:04,660 --> 00:06:08,650
about that and found it a real good

00:06:06,940 --> 00:06:11,820
choice to be integrated in our platform

00:06:08,650 --> 00:06:14,940
so to be replaced by code Miller to

00:06:11,820 --> 00:06:18,370
bring us extra service and of course

00:06:14,940 --> 00:06:22,090
Monaco is much lighter and and faster

00:06:18,370 --> 00:06:26,289
when it comes to to issue of performance

00:06:22,090 --> 00:06:32,440
so to resolve this issue to replace the

00:06:26,289 --> 00:06:34,780
Monaco editor with code mirror we just

00:06:32,440 --> 00:06:37,690
submitted a pull request and we decided

00:06:34,780 --> 00:06:40,200
to go really a high level we just

00:06:37,690 --> 00:06:42,540
abstracted the editor

00:06:40,200 --> 00:06:45,480
element inside Jupiter lab enabling

00:06:42,540 --> 00:06:47,760
people to use their own IDE we submitted

00:06:45,480 --> 00:06:50,430
that pull request and we got fantastic

00:06:47,760 --> 00:06:54,120
support from Jupiter lab we the core

00:06:50,430 --> 00:06:56,160
developers we work together and now we

00:06:54,120 --> 00:06:59,340
have actually Monaco editor as part of

00:06:56,160 --> 00:07:03,120
our editor which is a which is

00:06:59,340 --> 00:07:06,210
significant improvement and we as I

00:07:03,120 --> 00:07:08,130
mentioned users expect to have a nice

00:07:06,210 --> 00:07:10,680
support for our and Python in the

00:07:08,130 --> 00:07:14,940
scholar their languages so did kernels

00:07:10,680 --> 00:07:17,370
are available for just adding these

00:07:14,940 --> 00:07:20,760
features ipython is really mature and

00:07:17,370 --> 00:07:22,860
fantastic kernel that's you you know

00:07:20,760 --> 00:07:25,050
better than me actually we didn't know

00:07:22,860 --> 00:07:28,200
they didn't need to do that much on top

00:07:25,050 --> 00:07:30,870
of that though we just added some some

00:07:28,200 --> 00:07:33,090
extra features that I will discuss but I

00:07:30,870 --> 00:07:36,140
our kernel was pretty challenging for us

00:07:33,090 --> 00:07:39,420
because when it came to just a real

00:07:36,140 --> 00:07:42,440
kernel that helps users to have like

00:07:39,420 --> 00:07:45,000
real-time streaming a city in a city out

00:07:42,440 --> 00:07:48,470
HTML rendering different HTML output

00:07:45,000 --> 00:07:54,210
shiny support our markdown or debugging

00:07:48,470 --> 00:07:56,340
ir kernel probably is able to handle

00:07:54,210 --> 00:07:58,530
that but with a lot of effort direction

00:07:56,340 --> 00:08:00,330
you need to put on that so we resolved

00:07:58,530 --> 00:08:03,000
that issue by developing our channel

00:08:00,330 --> 00:08:05,730
from scratch so we develop our own our

00:08:03,000 --> 00:08:07,980
kernel to be able to support our extra

00:08:05,730 --> 00:08:14,240
features that actually are available in

00:08:07,980 --> 00:08:17,490
our IDE for data and environment view

00:08:14,240 --> 00:08:20,340
for our because we develop that kernel

00:08:17,490 --> 00:08:22,620
in-house we didn't have a that was part

00:08:20,340 --> 00:08:27,150
of the structure that we started from

00:08:22,620 --> 00:08:29,220
the beginning but for for Python so the

00:08:27,150 --> 00:08:32,520
kernel protocol extension which is

00:08:29,220 --> 00:08:34,229
called comm couldn't handle some

00:08:32,520 --> 00:08:36,240
communication that we were expecting

00:08:34,229 --> 00:08:39,060
especially for debugging when we were in

00:08:36,240 --> 00:08:41,880
the pause mode it was actually we could

00:08:39,060 --> 00:08:46,140
lose the state and couldn't have

00:08:41,880 --> 00:08:50,820
actually communication to serve the

00:08:46,140 --> 00:08:53,490
debugging and food for the user so what

00:08:50,820 --> 00:08:58,920
we actually resolved

00:08:53,490 --> 00:09:01,290
issue by adding like the messages

00:08:58,920 --> 00:09:04,320
separate message channels for

00:09:01,290 --> 00:09:08,880
environment view for data viewer for

00:09:04,320 --> 00:09:12,240
debugging and also we for opening the

00:09:08,880 --> 00:09:15,600
non-local packages this services

00:09:12,240 --> 00:09:19,170
particularly for our and also we develop

00:09:15,600 --> 00:09:22,860
a front-end comp per kernel to to

00:09:19,170 --> 00:09:27,089
actually to make this communication in

00:09:22,860 --> 00:09:30,209
two direction and also we change the way

00:09:27,089 --> 00:09:32,370
that actually caramel request a process

00:09:30,209 --> 00:09:35,850
to enable handling of comm messages

00:09:32,370 --> 00:09:39,300
again mainly to be able to handle our

00:09:35,850 --> 00:09:42,510
debugging process for Python so those

00:09:39,300 --> 00:09:46,230
actually are built on top of I pi kernel

00:09:42,510 --> 00:09:47,880
so ipython kernel that means actually we

00:09:46,230 --> 00:09:49,770
didn't change anything at that I

00:09:47,880 --> 00:09:51,930
particular and all services that you

00:09:49,770 --> 00:09:53,580
expect from ipython still you have it

00:09:51,930 --> 00:09:57,180
but on top of that you have this

00:09:53,580 --> 00:09:59,100
services that explained before and it is

00:09:57,180 --> 00:10:02,880
also some extension on Jupiter lab so

00:09:59,100 --> 00:10:06,180
those words mainly be the infrastructure

00:10:02,880 --> 00:10:08,700
part or server side of the IDE that we

00:10:06,180 --> 00:10:11,250
built but now it's time to bring over

00:10:08,700 --> 00:10:13,740
those services to to the users so we

00:10:11,250 --> 00:10:15,980
started to explain Jupiter lab itself so

00:10:13,740 --> 00:10:19,050
we develop an environment widget

00:10:15,980 --> 00:10:22,680
dataview the visual debugger with calls

00:10:19,050 --> 00:10:24,750
like for shiny and markdown monica

00:10:22,680 --> 00:10:27,870
editor integration and explained before

00:10:24,750 --> 00:10:30,720
we also hooked up the language support

00:10:27,870 --> 00:10:33,420
for circle the LSP standard that for

00:10:30,720 --> 00:10:35,300
example providing the language support

00:10:33,420 --> 00:10:39,089
for Python was pretty straightforward

00:10:35,300 --> 00:10:42,839
but the LSP for R is developed in-house

00:10:39,089 --> 00:10:45,990
again so we have we made some changes in

00:10:42,839 --> 00:10:48,000
indication of the global kernel because

00:10:45,990 --> 00:10:50,310
now we have several languages with

00:10:48,000 --> 00:10:52,649
different services so user needs to be

00:10:50,310 --> 00:10:54,750
aware what is the global state of the

00:10:52,649 --> 00:10:59,880
tournament that I will show you and we

00:10:54,750 --> 00:11:02,339
also develop a sickle kernel for make

00:10:59,880 --> 00:11:04,380
actually the communication to data

00:11:02,339 --> 00:11:07,160
server it much easier for user we know

00:11:04,380 --> 00:11:10,730
that you are able to to run

00:11:07,160 --> 00:11:13,670
sickle script inside Python inside right

00:11:10,730 --> 00:11:15,860
through different packages but that the

00:11:13,670 --> 00:11:18,139
problem is the continent system

00:11:15,860 --> 00:11:20,720
sometimes coming in to understand the

00:11:18,139 --> 00:11:22,910
structure of your data or having a view

00:11:20,720 --> 00:11:24,649
of the schema of your database and see

00:11:22,910 --> 00:11:26,300
actually which table or your feed which

00:11:24,649 --> 00:11:29,509
view you would like to use those are

00:11:26,300 --> 00:11:32,420
challenging that we try to resolve by in

00:11:29,509 --> 00:11:36,529
by by introducing a separate channel for

00:11:32,420 --> 00:11:39,850
that alright so I stopped talking and

00:11:36,529 --> 00:11:39,850
switch to demo

00:11:51,270 --> 00:11:58,450
all right so this is just the outcome of

00:11:55,270 --> 00:12:02,680
the Ambu convert of one of the notebooks

00:11:58,450 --> 00:12:06,570
that's that's developed and run in with

00:12:02,680 --> 00:12:09,580
our own Arcana you see that different

00:12:06,570 --> 00:12:12,490
HTML output and rendering of data

00:12:09,580 --> 00:12:14,250
actually it's already there and these

00:12:12,490 --> 00:12:17,530
are actually native codes so without

00:12:14,250 --> 00:12:19,720
engaging any particular coding or adding

00:12:17,530 --> 00:12:22,030
any script this is exactly the same

00:12:19,720 --> 00:12:25,570
feeling that you run the same library or

00:12:22,030 --> 00:12:27,900
script in other tools you can simply see

00:12:25,570 --> 00:12:32,010
that it actually gets rendered here and

00:12:27,900 --> 00:12:34,660
all type of the leaflet map or even 3d

00:12:32,010 --> 00:12:37,150
graph things everything actually we now

00:12:34,660 --> 00:12:39,610
support that people when they actually

00:12:37,150 --> 00:12:43,120
develop a notebook they they are

00:12:39,610 --> 00:12:45,540
actually able to just to to run it right

00:12:43,120 --> 00:12:57,010
away without any extra of work needed

00:12:45,540 --> 00:13:01,260
and going back to our ID itself so here

00:12:57,010 --> 00:13:04,750
is Jupiter lab now you are familiar with

00:13:01,260 --> 00:13:07,600
the drawing hand side you see actually a

00:13:04,750 --> 00:13:11,020
couple of tabs that you don't see in

00:13:07,600 --> 00:13:14,680
standard Jupiter lab this place actually

00:13:11,020 --> 00:13:17,710
is the environment view the College tag

00:13:14,680 --> 00:13:20,170
for debugger and just separate view

00:13:17,710 --> 00:13:22,810
force for controlling the breakpoints

00:13:20,170 --> 00:13:25,150
this is actually the beach' that

00:13:22,810 --> 00:13:27,690
explained we added two support for extra

00:13:25,150 --> 00:13:34,380
services that explained before and just

00:13:27,690 --> 00:13:38,470
give an example for like running a

00:13:34,380 --> 00:13:41,200
simple loop in our you see that you we

00:13:38,470 --> 00:13:43,600
have the online streaming where as in

00:13:41,200 --> 00:13:45,910
like in IR corner for example everything

00:13:43,600 --> 00:13:48,880
actually is process and just send it out

00:13:45,910 --> 00:13:50,950
as a batch this is just one example of

00:13:48,880 --> 00:13:54,160
the limitation that we we've been faced

00:13:50,950 --> 00:13:57,520
so as the example that I show you this

00:13:54,160 --> 00:14:00,550
just C natively you can write your any

00:13:57,520 --> 00:14:02,350
type of the outcome you expecting or for

00:14:00,550 --> 00:14:04,430
example that the Archaean at hand is

00:14:02,350 --> 00:14:07,250
that and on the right hand side

00:14:04,430 --> 00:14:09,200
you see that the the environment view

00:14:07,250 --> 00:14:15,020
and data frames actually gets updated

00:14:09,200 --> 00:14:16,850
right away so that's exactly the same

00:14:15,020 --> 00:14:19,970
thing for Python we have the same

00:14:16,850 --> 00:14:22,760
support I will show you later

00:14:19,970 --> 00:14:26,570
coming back to to our editor side and

00:14:22,760 --> 00:14:29,420
also the content assistance side inside

00:14:26,570 --> 00:14:31,490
your notebook as I mentioned before like

00:14:29,420 --> 00:14:33,050
for example when I start to plus

00:14:31,490 --> 00:14:35,660
something the content I since I actually

00:14:33,050 --> 00:14:41,709
just started to come in and like when

00:14:35,660 --> 00:14:44,899
and define a data frame here

00:14:41,709 --> 00:14:46,820
it's just shows on the environment view

00:14:44,899 --> 00:14:49,820
we can go through just navigate through

00:14:46,820 --> 00:14:51,770
your data frame also double click on

00:14:49,820 --> 00:14:57,770
your data frame you can go through and

00:14:51,770 --> 00:14:59,779
just filter map and even you are able to

00:14:57,770 --> 00:15:01,760
define some particular condition for

00:14:59,779 --> 00:15:04,760
example you are looking for those with 8

00:15:01,760 --> 00:15:07,970
and you are able to just export them as

00:15:04,760 --> 00:15:10,550
a flat file right away to your workspace

00:15:07,970 --> 00:15:13,970
to be used for your further processes

00:15:10,550 --> 00:15:15,890
for examples so we we try to make the

00:15:13,970 --> 00:15:18,950
environment you know the beauty of

00:15:15,890 --> 00:15:21,650
Jupiter lab is actually its minimal

00:15:18,950 --> 00:15:23,630
style that everything is there but it's

00:15:21,650 --> 00:15:26,330
not crowded so you have a very nice

00:15:23,630 --> 00:15:29,240
access to different tools without

00:15:26,330 --> 00:15:31,310
confusing to you know a complicated menu

00:15:29,240 --> 00:15:34,130
structure a thousand world keywords

00:15:31,310 --> 00:15:36,950
these things and this is this is we

00:15:34,130 --> 00:15:40,580
actually we try to keep the same minimal

00:15:36,950 --> 00:15:44,420
soil inside Jupiter lab it was a kind of

00:15:40,580 --> 00:15:49,279
challenging to provide a nice user chase

00:15:44,420 --> 00:15:51,650
user user experience interface so but we

00:15:49,279 --> 00:15:54,410
still we're working on that definitely

00:15:51,650 --> 00:15:56,990
we we appreciate your feedback for

00:15:54,410 --> 00:16:01,850
improvement but we try to keep the goal

00:15:56,990 --> 00:16:04,250
of simplicity in this environment same

00:16:01,850 --> 00:16:07,550
thing when you define any library that

00:16:04,250 --> 00:16:10,579
already installed for example it's it's

00:16:07,550 --> 00:16:13,040
gets index it's just brings you over to

00:16:10,579 --> 00:16:15,740
your console you are able to just to

00:16:13,040 --> 00:16:18,200
install any kind of packages that you

00:16:15,740 --> 00:16:20,540
would like same thing that actually are

00:16:18,200 --> 00:16:25,640
the index for example if I go and

00:16:20,540 --> 00:16:27,320
install sorry and and start the console

00:16:25,640 --> 00:16:30,080
here for example you can install any

00:16:27,320 --> 00:16:31,850
packages for example a PC you see - they

00:16:30,080 --> 00:16:34,280
actually the index coming in and help

00:16:31,850 --> 00:16:42,040
you ask to just install what you would

00:16:34,280 --> 00:16:46,370
like to use so that's about running your

00:16:42,040 --> 00:16:48,410
notebook and also in the just talking

00:16:46,370 --> 00:16:51,980
about our if you would like to run a

00:16:48,410 --> 00:16:53,690
shiny app for example also we as I

00:16:51,980 --> 00:16:55,790
mentioned before we do the support for

00:16:53,690 --> 00:17:01,670
that so this is an example of shiny app

00:16:55,790 --> 00:17:03,740
so you can simply run your shiny app or

00:17:01,670 --> 00:17:06,160
I need to just turn off the other

00:17:03,740 --> 00:17:06,160
kernels

00:17:21,490 --> 00:17:28,610
so you see that you're able now to run

00:17:24,320 --> 00:17:33,710
your shiny as you do in other ideas

00:17:28,610 --> 00:17:37,760
without any problem and also going to

00:17:33,710 --> 00:17:41,810
the to debugger then which I'm sure that

00:17:37,760 --> 00:17:45,230
many of you are interested in just

00:17:41,810 --> 00:17:49,910
before that by the way we also support

00:17:45,230 --> 00:17:52,940
the markdown you can actually run

00:17:49,910 --> 00:17:54,590
markdown file you when you just do the

00:17:52,940 --> 00:18:00,170
rendering the outcome actually is

00:17:54,590 --> 00:18:02,060
generated and if you can see that HTML

00:18:00,170 --> 00:18:04,280
outcome is there and you can drag it and

00:18:02,060 --> 00:18:05,600
drop it any where that you would like

00:18:04,280 --> 00:18:08,570
you see that the outcome is already

00:18:05,600 --> 00:18:11,120
generated you can just work on your

00:18:08,570 --> 00:18:15,320
markdown fight side by side in

00:18:11,120 --> 00:18:18,080
differentiation and also it's not only

00:18:15,320 --> 00:18:21,830
for mark down inside your editor you are

00:18:18,080 --> 00:18:24,290
also able to run inline rendering just

00:18:21,830 --> 00:18:26,990
you need to trigger this inline and when

00:18:24,290 --> 00:18:30,200
you click this you see that you see the

00:18:26,990 --> 00:18:34,700
outcome inside your editor so you can

00:18:30,200 --> 00:18:36,380
save the space if you see the console

00:18:34,700 --> 00:18:38,210
you want to see the outcome in the

00:18:36,380 --> 00:18:40,070
console but if you want to see the

00:18:38,210 --> 00:18:42,980
outcome right away inside your editor

00:18:40,070 --> 00:18:45,080
you can trick the inline it's not just

00:18:42,980 --> 00:18:47,510
for markdown for any other it will show

00:18:45,080 --> 00:18:51,770
you you can actually use that so or so

00:18:47,510 --> 00:18:54,980
going back to the debugger and python

00:18:51,770 --> 00:19:03,310
file so here is actually an example of

00:18:54,980 --> 00:19:07,610
python file let's just when we execute a

00:19:03,310 --> 00:19:09,940
python script of what happened I think I

00:19:07,610 --> 00:19:09,940
have

00:19:23,600 --> 00:19:27,990
just a simple graph I just generated

00:19:25,980 --> 00:19:31,410
here so as I mentioned before you have

00:19:27,990 --> 00:19:33,870
the same service here if you just select

00:19:31,410 --> 00:19:36,900
the section that you would like and turn

00:19:33,870 --> 00:19:38,730
in line rendering we can see the result

00:19:36,900 --> 00:19:40,770
inside your editor as I mentioned so

00:19:38,730 --> 00:19:43,970
it's the same service for any other

00:19:40,770 --> 00:19:47,900
editors that you would like to use so

00:19:43,970 --> 00:19:50,309
any other kind of services like

00:19:47,900 --> 00:19:53,220
commenting on commenting we have

00:19:50,309 --> 00:19:55,890
actually by leveraging monarchical

00:19:53,220 --> 00:19:57,720
services we have a nice actually context

00:19:55,890 --> 00:20:00,000
menu that actually helps you out to

00:19:57,720 --> 00:20:05,190
comment on comment format your documents

00:20:00,000 --> 00:20:10,860
you can use that also and just the

00:20:05,190 --> 00:20:21,090
example of debugger let's close them

00:20:10,860 --> 00:20:25,290
it's a little bit crowded here so when I

00:20:21,090 --> 00:20:29,340
run these scripts I have actually a

00:20:25,290 --> 00:20:33,150
function already process there so like

00:20:29,340 --> 00:20:36,710
when I just run my function just one to

00:20:33,150 --> 00:20:40,200
ten and if I set a breakpoint here and

00:20:36,710 --> 00:20:41,820
call back my function it hits the

00:20:40,200 --> 00:20:43,440
breakpoint and that's the place that

00:20:41,820 --> 00:20:44,970
you're able to do and start your

00:20:43,440 --> 00:20:49,350
debugging so here is that you can

00:20:44,970 --> 00:20:55,890
actually step in in multiple states step

00:20:49,350 --> 00:20:59,250
out or even you are actually are able to

00:20:55,890 --> 00:21:02,660
go step by step and see the outcome like

00:20:59,250 --> 00:21:07,230
1 2 3 it just follows you and show you

00:21:02,660 --> 00:21:08,700
exactly inside your editor and anytime

00:21:07,230 --> 00:21:11,270
that you can actually finish your

00:21:08,700 --> 00:21:14,790
process and stop the process right away

00:21:11,270 --> 00:21:15,990
so by the way anytime inside your editor

00:21:14,790 --> 00:21:17,760
you are able to see the global

00:21:15,990 --> 00:21:19,830
environment as well as the local

00:21:17,760 --> 00:21:22,710
environment that's a very helpful tool

00:21:19,830 --> 00:21:24,840
when you face any problem in your code

00:21:22,710 --> 00:21:26,790
of course that actually you can go

00:21:24,840 --> 00:21:32,840
through the same service actually is

00:21:26,790 --> 00:21:36,360
available for our so before that let's

00:21:32,840 --> 00:21:39,750
process this service so

00:21:36,360 --> 00:21:42,299
function I have just generate a series

00:21:39,750 --> 00:21:46,460
of code and inside my debugger by I'm

00:21:42,299 --> 00:21:56,549
able to set up my my breakpoint and

00:21:46,460 --> 00:21:58,650
calling my function it's it's a

00:21:56,549 --> 00:22:01,320
breakpoint again and that's again I'm

00:21:58,650 --> 00:22:03,990
able to just do step in and step out

00:22:01,320 --> 00:22:07,440
what is actually we did extra for for

00:22:03,990 --> 00:22:11,070
our debugger is we can you can actually

00:22:07,440 --> 00:22:14,700
add breakpoint inside the packages also

00:22:11,070 --> 00:22:16,950
so if you would like to to call any

00:22:14,700 --> 00:22:19,530
other packages and you wonder what's

00:22:16,950 --> 00:22:21,870
going on inside the process you are able

00:22:19,530 --> 00:22:24,360
to set the breakpoint now inside those

00:22:21,870 --> 00:22:27,570
packages and you don't see the message

00:22:24,360 --> 00:22:30,450
of source is not available because of

00:22:27,570 --> 00:22:33,450
the binary installation for example we

00:22:30,450 --> 00:22:36,299
actually you have here a transparent

00:22:33,450 --> 00:22:40,799
exposure of your our code that you are

00:22:36,299 --> 00:22:43,770
able to go through any any level of I

00:22:40,799 --> 00:22:46,440
would say stages of calling libraries of

00:22:43,770 --> 00:22:51,620
libraries and set breakpoints and do and

00:22:46,440 --> 00:22:51,620
the debugging even at the package level

00:22:56,960 --> 00:23:04,470
when you have actually CSV file also

00:23:01,110 --> 00:23:07,950
it's it's good to mention that I discuss

00:23:04,470 --> 00:23:10,470
about import and exporting data this

00:23:07,950 --> 00:23:12,600
part we also try to make it simple for

00:23:10,470 --> 00:23:15,570
user as much as possible

00:23:12,600 --> 00:23:17,880
here for example when you open up a CSV

00:23:15,570 --> 00:23:21,450
file and you have the active channel

00:23:17,880 --> 00:23:23,820
here it's my are console you can simply

00:23:21,450 --> 00:23:26,340
just bring it over as a data frame in

00:23:23,820 --> 00:23:28,470
your environment so you call the CSV

00:23:26,340 --> 00:23:31,220
file you open up and now it's part of

00:23:28,470 --> 00:23:34,110
your kernel and you can work with that

00:23:31,220 --> 00:23:37,590
so it's the same thing when I have the

00:23:34,110 --> 00:23:42,150
CSV file here let's again just to close

00:23:37,590 --> 00:23:43,710
these things and I change my state to

00:23:42,150 --> 00:23:45,720
this kind of by the way you see that

00:23:43,710 --> 00:23:47,970
when I switch my focus on different

00:23:45,720 --> 00:23:50,220
console you see the environment changes

00:23:47,970 --> 00:23:54,240
just working through

00:23:50,220 --> 00:23:57,720
by step with you so when I have the CSV

00:23:54,240 --> 00:24:00,030
file just let open it up and do it

00:23:57,720 --> 00:24:04,440
actually the import now it goes to as a

00:24:00,030 --> 00:24:05,820
panda data frame inside my Python car

00:24:04,440 --> 00:24:09,120
now that I can actually work with that

00:24:05,820 --> 00:24:11,580
so it's really easy now just to see your

00:24:09,120 --> 00:24:13,289
CSV file flat why go through and bring

00:24:11,580 --> 00:24:15,360
it over to environment start to work on

00:24:13,289 --> 00:24:18,659
that and it's actually spy directional

00:24:15,360 --> 00:24:21,780
so when it turns out to be a data frame

00:24:18,659 --> 00:24:23,789
with any iteration and filtering that

00:24:21,780 --> 00:24:26,370
you apply you can export it again as a

00:24:23,789 --> 00:24:31,289
flat file and use it so we are going to

00:24:26,370 --> 00:24:33,659
to support also other formats like

00:24:31,289 --> 00:24:36,059
feather for example which is a very nice

00:24:33,659 --> 00:24:37,950
tool for for communication and

00:24:36,059 --> 00:24:40,190
transporting data between environment

00:24:37,950 --> 00:24:42,600
this is for example as additional

00:24:40,190 --> 00:24:45,240
services that we are going to add for

00:24:42,600 --> 00:24:47,070
import and export data but the

00:24:45,240 --> 00:24:49,590
infrastructure is there and again as I

00:24:47,070 --> 00:24:52,590
mentioned before we just try to make it

00:24:49,590 --> 00:24:59,130
really simple and easy to use for our

00:24:52,590 --> 00:25:05,510
data scientists and as I mentioned

00:24:59,130 --> 00:25:11,700
before we also have a sickle kernel that

00:25:05,510 --> 00:25:13,140
is built for helping out data scientists

00:25:11,700 --> 00:25:15,510
to have an easy communication with

00:25:13,140 --> 00:25:17,610
databases they can run the script and

00:25:15,510 --> 00:25:19,620
then after that mean is mature and is

00:25:17,610 --> 00:25:22,140
ready as part of your code you can

00:25:19,620 --> 00:25:25,500
simply copy and implement it in your in

00:25:22,140 --> 00:25:28,440
the body of your Python or our code you

00:25:25,500 --> 00:25:31,230
simply just define your your channel as

00:25:28,440 --> 00:25:33,240
a sickle kernel and when you run to

00:25:31,230 --> 00:25:35,760
connect these are actually the different

00:25:33,240 --> 00:25:38,190
type of connection that we support so

00:25:35,760 --> 00:25:41,340
you define your for example if you want

00:25:38,190 --> 00:25:43,770
to run MySQL for example you enter your

00:25:41,340 --> 00:25:49,980
URL credentials and get access and

00:25:43,770 --> 00:25:52,409
you're ready to go so or you if you have

00:25:49,980 --> 00:25:57,450
already created a connection you can

00:25:52,409 --> 00:25:59,669
simply say connect to and make your

00:25:57,450 --> 00:26:03,440
connection already saved and encrypted

00:25:59,669 --> 00:26:06,139
the credential there by the way and you

00:26:03,440 --> 00:26:08,659
your connection and the environment now

00:26:06,139 --> 00:26:10,730
is changed to schema view so you have

00:26:08,659 --> 00:26:12,529
the tables there you are able to

00:26:10,730 --> 00:26:15,049
navigate through your tables you see the

00:26:12,529 --> 00:26:17,480
columns and again in the same

00:26:15,049 --> 00:26:19,639
environment this is that you have our

00:26:17,480 --> 00:26:21,649
you have Python you have sickle you

00:26:19,639 --> 00:26:24,440
don't need to change your image or your

00:26:21,649 --> 00:26:27,769
tool for just having access to different

00:26:24,440 --> 00:26:29,990
environment and also same again when you

00:26:27,769 --> 00:26:32,419
pull your data you can export you that

00:26:29,990 --> 00:26:35,570
CSV file or any other flat file that you

00:26:32,419 --> 00:26:42,950
would like to use for for your work you

00:26:35,570 --> 00:26:45,590
can run any sickle script like for

00:26:42,950 --> 00:26:47,659
example here content and system coming

00:26:45,590 --> 00:26:49,340
in help you out to give to select the

00:26:47,659 --> 00:26:53,269
table that you would like for example

00:26:49,340 --> 00:26:55,250
you select empty car and again here you

00:26:53,269 --> 00:26:56,990
can it helps you out to select the

00:26:55,250 --> 00:26:58,960
column that you're looking for these are

00:26:56,990 --> 00:27:01,909
the services that I mentioned that are

00:26:58,960 --> 00:27:03,590
it's it's hard to implement as part of

00:27:01,909 --> 00:27:07,309
for example an script that is running

00:27:03,590 --> 00:27:09,980
inside Python or R for example so here

00:27:07,309 --> 00:27:13,399
you choose display and also you say by

00:27:09,980 --> 00:27:15,879
these two for example and you run your

00:27:13,399 --> 00:27:24,259
code and see the outcome right away and

00:27:15,879 --> 00:27:27,470
you can use the view magic and send it

00:27:24,259 --> 00:27:28,850
as a view here and for just two extra

00:27:27,470 --> 00:27:31,279
filtering that you would like or

00:27:28,850 --> 00:27:35,899
navigate through or export it as a CSV

00:27:31,279 --> 00:27:39,950
file for example same thing also goes in

00:27:35,899 --> 00:27:43,639
opposite way here if you have your for

00:27:39,950 --> 00:27:46,250
example a CSV file that you would like

00:27:43,639 --> 00:27:49,129
to bring it as a table inside your

00:27:46,250 --> 00:27:52,639
server same thing you just select on it

00:27:49,129 --> 00:27:57,580
and as it goes and to create a table

00:27:52,639 --> 00:27:57,580
based on your CSV file so

00:28:02,269 --> 00:28:13,409
that's all about pretty brief about the

00:28:07,049 --> 00:28:18,090
sickle server also we have like about 10

00:28:13,409 --> 00:28:25,649
minutes I can actually answer any

00:28:18,090 --> 00:28:49,470
question things I went I think a little

00:28:25,649 --> 00:28:51,120
bit fast I think so I'm not actually

00:28:49,470 --> 00:28:52,679
about 100 hundred but to answer

00:28:51,120 --> 00:28:55,169
hundred-percent about that I'm not

00:28:52,679 --> 00:28:56,700
actually in this particular case but I

00:28:55,169 --> 00:28:59,460
can check it out but what I know

00:28:56,700 --> 00:29:02,519
actually is possible I can check it out

00:28:59,460 --> 00:29:07,529
for you sure here I show my contacts by

00:29:02,519 --> 00:29:13,789
the way that you can reach me send an

00:29:07,529 --> 00:29:13,789
email I can IR will answer it sure yes

00:29:15,379 --> 00:29:21,840
yes some part of it actually just be

00:29:19,710 --> 00:29:26,159
contributed like the editor abstraction

00:29:21,840 --> 00:29:28,019
even Monaco we have actually pull

00:29:26,159 --> 00:29:31,289
requests for that by the discussion

00:29:28,019 --> 00:29:33,029
whether going to be as actually as part

00:29:31,289 --> 00:29:36,029
of the Jupiter or as another extension

00:29:33,029 --> 00:29:38,429
for example Monaco itself is also some

00:29:36,029 --> 00:29:40,639
issues for just to be sheet as a package

00:29:38,429 --> 00:29:44,370
it's a long discussion that we have with

00:29:40,639 --> 00:29:47,519
with core developer of Jupiter lab at

00:29:44,370 --> 00:29:50,909
that stage those actual contribution was

00:29:47,519 --> 00:29:54,299
really helpful to integrate that but we

00:29:50,909 --> 00:29:57,090
are in the process of making open-source

00:29:54,299 --> 00:29:59,360
but at the end is just about the

00:29:57,090 --> 00:30:02,129
business model that we are following and

00:29:59,360 --> 00:30:05,519
finding a way to support to the

00:30:02,129 --> 00:30:09,230
community but our interests our goal is

00:30:05,519 --> 00:30:09,230
just making all of them open-source

00:30:09,789 --> 00:30:17,019
oh that one actually could be a good

00:30:14,859 --> 00:30:18,700
candidate it's much easier than the

00:30:17,019 --> 00:30:38,109
others if it's your interest I would say

00:30:18,700 --> 00:30:40,600
yes yeah yeah yeah sure yes on any

00:30:38,109 --> 00:30:44,879
Jupiter notebook you mean it's standard

00:30:40,600 --> 00:30:49,149
yes but it's actually we used JVM to

00:30:44,879 --> 00:30:52,059
support our kernel our own our channel

00:30:49,149 --> 00:30:54,609
so you need actually to have the JVM but

00:30:52,059 --> 00:30:56,349
yeah it's actually standard is you're

00:30:54,609 --> 00:30:58,989
going to be hooked as you can register

00:30:56,349 --> 00:31:09,700
you as a standard channel for your

00:30:58,989 --> 00:31:17,019
notebook yes yes I have on our seed you

00:31:09,700 --> 00:31:20,289
go here actually it's a deep comparison

00:31:17,019 --> 00:31:24,159
to our studio our CD is a great tool

00:31:20,289 --> 00:31:28,149
it's definitely if in particular for our

00:31:24,159 --> 00:31:31,509
I don't understa mate what actually is

00:31:28,149 --> 00:31:34,059
built in our studio I myself I learnt

00:31:31,509 --> 00:31:37,149
are with our studio it's really

00:31:34,059 --> 00:31:40,720
appreciated but what I can tell that all

00:31:37,149 --> 00:31:43,379
services that are said you support now

00:31:40,720 --> 00:31:45,629
is available in our tool some

00:31:43,379 --> 00:31:48,249
particularly you is for example a

00:31:45,629 --> 00:31:50,979
visualization of packages for example is

00:31:48,249 --> 00:31:52,840
not in our tool it is in our studio for

00:31:50,979 --> 00:31:54,909
example the reason that actually we

00:31:52,840 --> 00:31:56,830
didn't go that far because our goal is

00:31:54,909 --> 00:31:59,229
to make it a multiple language those

00:31:56,830 --> 00:32:02,169
package view for example is something

00:31:59,229 --> 00:32:05,409
that is particularly our and we would

00:32:02,169 --> 00:32:08,489
have several tabs or icons for different

00:32:05,409 --> 00:32:11,049
services but what I can tell you is that

00:32:08,489 --> 00:32:13,899
for coming to the language support

00:32:11,049 --> 00:32:16,269
continents and supporting shiny markdown

00:32:13,899 --> 00:32:18,820
those services actually all of them are

00:32:16,269 --> 00:32:22,509
available in our tool and the main

00:32:18,820 --> 00:32:23,360
advantage of right this is the tool that

00:32:22,509 --> 00:32:25,940
we call it a

00:32:23,360 --> 00:32:28,220
our brain is you have other languages

00:32:25,940 --> 00:32:30,640
that you can actually use compared to

00:32:28,220 --> 00:32:30,640
our CEO

00:32:40,650 --> 00:32:51,130
we ve started V exactly we didn't want

00:32:47,230 --> 00:32:54,100
to invent a wheel for example by

00:32:51,130 --> 00:32:56,460
developing our channel we work a lot on

00:32:54,100 --> 00:32:59,590
IR camera at the beginning and

00:32:56,460 --> 00:33:03,510
eventually we found out the thing that

00:32:59,590 --> 00:33:07,120
we need to add on top of IR kernel is

00:33:03,510 --> 00:33:09,660
eventually is more than that when we

00:33:07,120 --> 00:33:13,780
start to develop something from scratch

00:33:09,660 --> 00:33:16,780
especially for IR kernel is really

00:33:13,780 --> 00:33:18,940
developing our itself and our is not

00:33:16,780 --> 00:33:20,980
something that beat for kind these kind

00:33:18,940 --> 00:33:22,720
of services that we expected from the

00:33:20,980 --> 00:33:26,310
beginning like for example our s video

00:33:22,720 --> 00:33:29,140
itself as far as I remember it's the

00:33:26,310 --> 00:33:32,800
services built something with the C++

00:33:29,140 --> 00:33:35,050
for example so that's it we use JVM in

00:33:32,800 --> 00:33:37,900
our service and decided to develop

00:33:35,050 --> 00:33:42,190
something from scratch for in particular

00:33:37,900 --> 00:33:44,470
for the HTML rendering and and a CD on

00:33:42,190 --> 00:33:46,450
the CD out and the third one inch which

00:33:44,470 --> 00:33:55,540
was the most important one was the for

00:33:46,450 --> 00:33:58,330
servicing of debugger this our kernel is

00:33:55,540 --> 00:34:02,920
as something that we hope that's going

00:33:58,330 --> 00:34:06,670
to be actually something that we be a

00:34:02,920 --> 00:34:10,240
good choice for being open source and be

00:34:06,670 --> 00:34:13,240
published and we we really believe that

00:34:10,240 --> 00:34:17,429
it feels a lot of gap between Jupiter

00:34:13,240 --> 00:34:21,100
and our not Jupiter sorry between our

00:34:17,429 --> 00:34:25,810
ecosystem and Jupiter that are using

00:34:21,100 --> 00:34:27,580
Python only it fills the gap so we we

00:34:25,810 --> 00:34:30,399
cannot imagine at the moment any

00:34:27,580 --> 00:34:32,409
services that we can you can actually

00:34:30,399 --> 00:34:34,330
use in our studio for example as to

00:34:32,409 --> 00:34:36,879
which is the main tool for our that you

00:34:34,330 --> 00:34:48,330
are not able to to handle it through our

00:34:36,879 --> 00:34:48,330
own kernel yes yes

00:34:52,200 --> 00:35:00,519
no it said just just several succession

00:34:55,509 --> 00:35:03,190
I PI widget as we support that but it's

00:35:00,519 --> 00:35:07,239
not used for that particular purpose now

00:35:03,190 --> 00:35:10,420
it's completely separate server but we

00:35:07,239 --> 00:35:13,959
built an extra extra comm channel on top

00:35:10,420 --> 00:35:17,319
of ipython kernel to be able to serve

00:35:13,959 --> 00:35:19,450
that data view because we didn't want to

00:35:17,319 --> 00:35:23,859
make it like for example when you have a

00:35:19,450 --> 00:35:25,959
large data frame with high number of

00:35:23,859 --> 00:35:29,559
columns for example especially it

00:35:25,959 --> 00:35:32,289
happens in largely they said in in deep

00:35:29,559 --> 00:35:35,289
learning you have like 50,000 of rows of

00:35:32,289 --> 00:35:37,539
part of that that is going before ever

00:35:35,289 --> 00:35:40,390
to start a process of put the kernel on

00:35:37,539 --> 00:35:42,459
the other actually paused position to

00:35:40,390 --> 00:35:45,190
rendered outcome so that's actually we

00:35:42,459 --> 00:35:47,289
decided to have a separate channel to

00:35:45,190 --> 00:35:49,509
avoid any disk and of conflict between

00:35:47,289 --> 00:35:52,920
the process and the rendering of the

00:35:49,509 --> 00:35:52,920
outcome in the data view for example

00:36:05,970 --> 00:36:11,410
as I mentioned before the service is

00:36:09,040 --> 00:36:14,290
available on public cloud it's we

00:36:11,410 --> 00:36:16,690
appreciate your your feedback is free

00:36:14,290 --> 00:36:19,570
you just use your email address you can

00:36:16,690 --> 00:36:23,470
open up I account I use and let us know

00:36:19,570 --> 00:36:25,330
how do you feel and any any bugs issues

00:36:23,470 --> 00:36:29,080
we really appreciate your feedback and

00:36:25,330 --> 00:36:31,660
also we are working closely continuously

00:36:29,080 --> 00:36:33,910
and closely with Jupiter lab core

00:36:31,660 --> 00:36:36,520
developers to provide these extra

00:36:33,910 --> 00:36:38,560
services available to the community as

00:36:36,520 --> 00:36:42,869
soon as possible this is our goal and

00:36:38,560 --> 00:36:47,410
you're still working on it and of course

00:36:42,869 --> 00:36:49,750
before that any kind of improvement is

00:36:47,410 --> 00:36:51,880
needed as vo we are actually still

00:36:49,750 --> 00:36:54,700
supporting that and working on it to

00:36:51,880 --> 00:36:59,080
make it really a fantastic tool for data

00:36:54,700 --> 00:37:01,599
science Jupiter lab is a beautiful gem I

00:36:59,080 --> 00:37:04,869
would say it's a big responsibility to

00:37:01,599 --> 00:37:09,339
work in this you know precious part and

00:37:04,869 --> 00:37:11,530
we try to just add extra value on top of

00:37:09,339 --> 00:37:13,150
that it's a big responsibility but we

00:37:11,530 --> 00:37:16,030
are happy that we have a good support

00:37:13,150 --> 00:37:20,680
from Jupiter lab core developer and we

00:37:16,030 --> 00:37:23,369
really appreciate that all right thanks

00:37:20,680 --> 00:37:23,369

YouTube URL: https://www.youtube.com/watch?v=blGGZBKAE5g


