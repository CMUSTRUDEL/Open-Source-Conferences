Title: Overcoming traditional data analytics performance bottlenecks - Mike Strickland (Intel)
Publication date: 2017-10-20
Playlist: O'Reilly Velocity Conference 2017 - London, UK
Description: 
	Overcoming traditional data analytics performance bottlenecks with inline acceleration

A new approach to data analytics acceleration is delivering benchmarked performance increases of 3X to 10X+ at the system level for traditional relational and NoSQL databases.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,900 --> 00:00:06,730
good morning I'd like to spend the next

00:00:04,570 --> 00:00:09,910
five minutes sharing with you an insight

00:00:06,730 --> 00:00:12,490
on how we can get significant data

00:00:09,910 --> 00:00:15,670
analytics acceleration with inline

00:00:12,490 --> 00:00:17,650
acceleration and so I'm going to talk a

00:00:15,670 --> 00:00:20,230
little bit about a few different types

00:00:17,650 --> 00:00:22,990
of data store approaches and how we can

00:00:20,230 --> 00:00:24,880
get that acceleration starting out with

00:00:22,990 --> 00:00:26,980
the overall of course we want to be able

00:00:24,880 --> 00:00:28,960
to put this accelerator underneath the

00:00:26,980 --> 00:00:31,150
framework so that you don't even need to

00:00:28,960 --> 00:00:33,579
know what's going on at the accelerator

00:00:31,150 --> 00:00:35,739
level so you see here a picture of a low

00:00:33,579 --> 00:00:37,930
profile PCI Express card available early

00:00:35,739 --> 00:00:40,719
this next year which is very good for

00:00:37,930 --> 00:00:42,489
inline acceleration so in terms of

00:00:40,719 --> 00:00:44,380
inline acceleration on the edge of the

00:00:42,489 --> 00:00:46,750
card our networking connections so you

00:00:44,380 --> 00:00:49,180
can offload networking types of

00:00:46,750 --> 00:00:52,809
workloads and as well this card can be

00:00:49,180 --> 00:00:56,350
used to accelerate data access so on the

00:00:52,809 --> 00:00:58,030
DMA streams from SSDs the accelerator

00:00:56,350 --> 00:01:00,010
card can intercept their streams and do

00:00:58,030 --> 00:01:02,590
some acceleration so I'm going to share

00:01:00,010 --> 00:01:04,180
with you a few examples on how we can

00:01:02,590 --> 00:01:09,249
use a card like this one to get

00:01:04,180 --> 00:01:11,560
significant acceleration so so as I said

00:01:09,249 --> 00:01:14,319
this accelerator is programmable and

00:01:11,560 --> 00:01:15,999
it's actually been used for decades in

00:01:14,319 --> 00:01:19,209
communications equipment for base

00:01:15,999 --> 00:01:21,670
stations switches so you can data stream

00:01:19,209 --> 00:01:25,029
right into the accelerator you can take

00:01:21,670 --> 00:01:28,090
traffic off of PCI Express storage

00:01:25,029 --> 00:01:30,429
controllers and now that you have

00:01:28,090 --> 00:01:32,109
control of that data stream you can do

00:01:30,429 --> 00:01:34,749
things like filtering compression

00:01:32,109 --> 00:01:38,259
encryption completely offloading the CPU

00:01:34,749 --> 00:01:40,240
from those tasks so you might wonder ok

00:01:38,259 --> 00:01:42,249
for from my data analytics how much time

00:01:40,240 --> 00:01:45,069
am I really spending doing these types

00:01:42,249 --> 00:01:48,579
of functions and so I have a quote here

00:01:45,069 --> 00:01:52,840
from one of our partners Reni AK and for

00:01:48,579 --> 00:01:54,929
Cassandra this partner observes that 75%

00:01:52,840 --> 00:01:57,969
of your CPU cycles are doing these

00:01:54,929 --> 00:02:01,209
system and i/o functions so think about

00:01:57,969 --> 00:02:03,479
3 out of 4 CPU cycles processing data

00:02:01,209 --> 00:02:07,450
access or processing network traffic

00:02:03,479 --> 00:02:10,569
copying data and the opportunity here is

00:02:07,450 --> 00:02:12,459
to have the FPGA to this in line you may

00:02:10,569 --> 00:02:14,409
have heard the term lookaside which is

00:02:12,459 --> 00:02:15,700
the idea of putting an accelerator in a

00:02:14,409 --> 00:02:18,459
PCI Express slot

00:02:15,700 --> 00:02:20,170
having a copy data from Zeon memory to

00:02:18,459 --> 00:02:22,840
the accelerator memory and then back to

00:02:20,170 --> 00:02:25,900
the Zeon memory and that adds latency

00:02:22,840 --> 00:02:28,209
that chews up CPU cycles so the idea

00:02:25,900 --> 00:02:30,640
here is the how the accelerator take

00:02:28,209 --> 00:02:34,030
this traffic directly and completely

00:02:30,640 --> 00:02:37,600
offload the CPU so you can imagine that

00:02:34,030 --> 00:02:39,580
if in a workload like Cassandra 75% of

00:02:37,600 --> 00:02:43,420
the CPU cycles are doing these types of

00:02:39,580 --> 00:02:45,519
system and i/o traffic well if you can

00:02:43,420 --> 00:02:47,830
offload that you could get a 4x

00:02:45,519 --> 00:02:49,690
acceleration and this is exactly what

00:02:47,830 --> 00:02:52,030
this partner is showing for instance on

00:02:49,690 --> 00:02:55,239
a cassandra stress test for X

00:02:52,030 --> 00:02:57,010
acceleration on the cql reads for

00:02:55,239 --> 00:02:58,180
instance for Cassandra they're handled

00:02:57,010 --> 00:03:00,549
completely by this program we'll

00:02:58,180 --> 00:03:02,410
accelerator so the networking traffic

00:03:00,549 --> 00:03:06,130
comes into the accelerator parse the

00:03:02,410 --> 00:03:08,019
protocol figure out the request hash and

00:03:06,130 --> 00:03:10,209
index to build pull the data and then

00:03:08,019 --> 00:03:13,989
send it back out kind of like a proxy to

00:03:10,209 --> 00:03:16,510
your Cassandra application server and so

00:03:13,989 --> 00:03:19,930
that and also better compression will

00:03:16,510 --> 00:03:22,810
give you a pretty good result using

00:03:19,930 --> 00:03:24,609
another example we have a partner who

00:03:22,810 --> 00:03:26,980
does traditional relational database

00:03:24,609 --> 00:03:29,650
acceleration so in this case here it's

00:03:26,980 --> 00:03:32,320
all about storage and being able to

00:03:29,650 --> 00:03:33,970
offload storage processing and what they

00:03:32,320 --> 00:03:36,310
do is they figure they've figured out

00:03:33,970 --> 00:03:39,940
how to plug in to a storage engine on

00:03:36,310 --> 00:03:42,910
open source databases like Postgres or

00:03:39,940 --> 00:03:44,680
maria DB and so you don't have to change

00:03:42,910 --> 00:03:45,670
anything on the application you don't

00:03:44,680 --> 00:03:47,950
need to know anything about this

00:03:45,670 --> 00:03:50,799
accelerator card but now you can start

00:03:47,950 --> 00:03:53,019
doing inserts at ten times faster rate

00:03:50,799 --> 00:03:55,720
than you could do before so for a

00:03:53,019 --> 00:03:58,440
real-time data analytics this is very

00:03:55,720 --> 00:04:00,940
very compelling as well on traditional

00:03:58,440 --> 00:04:03,190
relational database data warehousing

00:04:00,940 --> 00:04:06,280
types of workloads between two to three

00:04:03,190 --> 00:04:11,079
X acceleration for benchmarks like TP

00:04:06,280 --> 00:04:12,370
cts or TP CH and so as well because of

00:04:11,079 --> 00:04:14,590
the compression you can save on your

00:04:12,370 --> 00:04:17,739
storage that you need to run the

00:04:14,590 --> 00:04:19,750
database on so for very compelling

00:04:17,739 --> 00:04:22,960
functionality and again all of this in

00:04:19,750 --> 00:04:25,229
line on the data going to the storage

00:04:22,960 --> 00:04:27,010
even on some of the sequel commands

00:04:25,229 --> 00:04:29,529
doing some of the filtering of the

00:04:27,010 --> 00:04:32,259
traffic so a very significant off

00:04:29,529 --> 00:04:34,899
load again just by plugging plugging in

00:04:32,259 --> 00:04:35,949
this low-profile PCI Express card so I

00:04:34,899 --> 00:04:37,929
just wanted to kind of bring your

00:04:35,949 --> 00:04:39,309
attention to this over the next couple

00:04:37,929 --> 00:04:41,289
of quarters you'll be seeing a lot of

00:04:39,309 --> 00:04:44,949
benchmarks published on this type of

00:04:41,289 --> 00:04:46,809
approach and it and it really is the

00:04:44,949 --> 00:04:50,109
only way to get this type of significant

00:04:46,809 --> 00:04:52,089
acceleration so hopefully I've shared

00:04:50,109 --> 00:04:53,349
this insight with you and it'll be

00:04:52,089 --> 00:04:54,939
something interested in following over

00:04:53,349 --> 00:04:56,260
the next couple of quarters thank you

00:04:54,939 --> 00:05:00,350
very much

00:04:56,260 --> 00:05:00,350
[Applause]

00:05:05,380 --> 00:05:07,440

YouTube URL: https://www.youtube.com/watch?v=-ss1TCFXDeY


