Title: From puzzles to products, Jessica Kerr (Atomist)
Publication date: 2019-06-12
Playlist: O'Reilly Velocity Conference 2019 - San Jose, CA
Description: 
	A career in programming progresses from solving well-defined problems to defining problems to determining which to solve. What is the “right” way to do software? It depends on what kind of program we’re talking about. Jess Kerr draws lines that resolve some arguments about types, tests, and correctness.

Jess argues that most programming careers aren’t about writing software; they’re about changing it. With this distinction, she’ll share some things about reuse, delivery, quality, and how to grow as a programmer.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:02,810 --> 00:00:08,180
so let's look at some of the obstacles

00:00:04,730 --> 00:00:09,889
to change one of the obstacles are the

00:00:08,180 --> 00:00:12,049
fun obstacles to look at are the

00:00:09,889 --> 00:00:13,940
internal ones right we get obsessed

00:00:12,049 --> 00:00:16,100
about code quality oh we don't have

00:00:13,940 --> 00:00:18,500
enough tests oh we have too many tests

00:00:16,100 --> 00:00:20,870
oh the architecture we should be on this

00:00:18,500 --> 00:00:22,280
new framework it's always tempting to

00:00:20,870 --> 00:00:24,830
focus here because that's what our team

00:00:22,280 --> 00:00:28,670
has control over we can build puzzles

00:00:24,830 --> 00:00:30,530
out of that that's too easy the

00:00:28,670 --> 00:00:32,989
meaningful changes that we make are

00:00:30,530 --> 00:00:35,660
change the interface right they change

00:00:32,989 --> 00:00:37,609
the UI or they change the API or they

00:00:35,660 --> 00:00:40,100
add features something that affects the

00:00:37,609 --> 00:00:42,469
outside world the biggest obstacles to

00:00:40,100 --> 00:00:44,480
change are not internal ok they are

00:00:42,469 --> 00:00:48,199
everything outside your team everything

00:00:44,480 --> 00:00:49,850
that expects you to stay the same so the

00:00:48,199 --> 00:00:51,769
we're not just talking to customer

00:00:49,850 --> 00:00:53,449
service the billing system calls in and

00:00:51,769 --> 00:00:57,949
and and Owen it reaches in and it's

00:00:53,449 --> 00:01:00,229
reports touch our internal database the

00:00:57,949 --> 00:01:01,879
the field apps out in the stores they're

00:01:00,229 --> 00:01:04,190
depending on provisioning continuing to

00:01:01,879 --> 00:01:06,080
work the same if I want to change my

00:01:04,190 --> 00:01:07,939
provisioning system in a useful way and

00:01:06,080 --> 00:01:10,670
make it more useful I have to involve

00:01:07,939 --> 00:01:12,200
them fortunately internally there's

00:01:10,670 --> 00:01:14,780
people involved in this and hopefully I

00:01:12,200 --> 00:01:16,549
can I can call them but if I want to

00:01:14,780 --> 00:01:19,789
accomplish something in this system I

00:01:16,549 --> 00:01:23,450
can't just change code my job is not

00:01:19,789 --> 00:01:27,140
just designing code code is a detail the

00:01:23,450 --> 00:01:29,090
point is to design change not just in

00:01:27,140 --> 00:01:31,039
the software but in the system as a

00:01:29,090 --> 00:01:34,579
whole and that's a lot more to think

00:01:31,039 --> 00:01:37,729
about than goodness we have teams we not

00:01:34,579 --> 00:01:39,259
only need to decide where we go next but

00:01:37,729 --> 00:01:41,390
we need to design a route for the whole

00:01:39,259 --> 00:01:43,070
system to get there so we get into

00:01:41,390 --> 00:01:48,020
future Flags backwards compatibility

00:01:43,070 --> 00:01:50,030
deprecation data migrations all kinds of

00:01:48,020 --> 00:01:52,929
these complications that make your code

00:01:50,030 --> 00:01:55,520
look really ugly but here's the thing

00:01:52,929 --> 00:01:57,530
when you've realized that our objective

00:01:55,520 --> 00:02:00,679
is designing change not designing code

00:01:57,530 --> 00:02:03,170
they're not ugly anymore all those if

00:02:00,679 --> 00:02:05,509
statements all those deprecated methods

00:02:03,170 --> 00:02:07,460
that are waiting for us to update the

00:02:05,509 --> 00:02:09,229
documentation and go practice internal

00:02:07,460 --> 00:02:10,970
advocacy and get people to use the new

00:02:09,229 --> 00:02:13,099
feel features and upgrade to the new off

00:02:10,970 --> 00:02:16,010
so we can improve the security all of

00:02:13,099 --> 00:02:19,849
that code is expressing move

00:02:16,010 --> 00:02:21,950
and that's beautiful I want a system

00:02:19,849 --> 00:02:24,409
that tells me about its history and

00:02:21,950 --> 00:02:26,930
doesn't hide it if we're not on the

00:02:24,409 --> 00:02:28,310
latest target architecture well in a

00:02:26,930 --> 00:02:31,700
couple years we'll get a new CIO and

00:02:28,310 --> 00:02:33,530
it'll all change anyway we're not going

00:02:31,700 --> 00:02:36,620
to be at the target all the time because

00:02:33,530 --> 00:02:39,769
there's no end state it's a matter of

00:02:36,620 --> 00:02:41,930
where are we going and that's wonderful

00:02:39,769 --> 00:02:43,129
and then you also have to be able to

00:02:41,930 --> 00:02:45,230
measure its effect so you need

00:02:43,129 --> 00:02:47,480
observability you need to be able to

00:02:45,230 --> 00:02:49,579
inject bits of code inside your system

00:02:47,480 --> 00:02:51,650
that tell you who's still using the old

00:02:49,579 --> 00:02:53,629
feature how many people are using the

00:02:51,650 --> 00:02:55,790
new feature and is it still useful to

00:02:53,629 --> 00:03:02,109
them all of this is part of designing

00:02:55,790 --> 00:03:02,109

YouTube URL: https://www.youtube.com/watch?v=ilyLxczuHiY


