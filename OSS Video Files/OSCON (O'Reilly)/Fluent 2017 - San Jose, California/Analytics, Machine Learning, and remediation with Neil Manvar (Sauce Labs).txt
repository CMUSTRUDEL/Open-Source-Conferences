Title: Analytics, Machine Learning, and remediation with Neil Manvar (Sauce Labs)
Publication date: 2017-06-27
Playlist: Fluent 2017 - San Jose, California
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:00,000 --> 00:00:03,810
hi this is Mike Hendrickson from

00:00:01,740 --> 00:00:05,640
velocity in fluent in San Jose I'm here

00:00:03,810 --> 00:00:06,720
with Neil from sauce wise you know how

00:00:05,640 --> 00:00:09,480
you doing great

00:00:06,720 --> 00:00:10,920
are you doing good so sauce limes what

00:00:09,480 --> 00:00:12,000
have you guys been up to the last couple

00:00:10,920 --> 00:00:13,080
years I think it's been a while since

00:00:12,000 --> 00:00:15,360
we've talked yep

00:00:13,080 --> 00:00:17,250
and so what's new with you guys yeah

00:00:15,360 --> 00:00:20,100
what we're trying to do now is move into

00:00:17,250 --> 00:00:22,470
analytics and remediation such that when

00:00:20,100 --> 00:00:24,689
a test fails or something is going on

00:00:22,470 --> 00:00:27,449
we're mediating and figuring out what

00:00:24,689 --> 00:00:29,429
happened is as quick and as efficient as

00:00:27,449 --> 00:00:33,030
possible so let's say you know you run a

00:00:29,429 --> 00:00:35,370
test and something fails and we want to

00:00:33,030 --> 00:00:37,520
reduce that time to investigate and then

00:00:35,370 --> 00:00:39,840
debug so that you know what broke and

00:00:37,520 --> 00:00:42,120
also pull from the history of what's

00:00:39,840 --> 00:00:43,710
been going on as well as introducing

00:00:42,120 --> 00:00:45,660
possibly some machine learning or some

00:00:43,710 --> 00:00:48,120
intelligent mechanisms in place to

00:00:45,660 --> 00:00:50,489
assist with this process so are you guys

00:00:48,120 --> 00:00:53,640
in your remediation is this for live

00:00:50,489 --> 00:00:55,379
systems or is this for in you know in

00:00:53,640 --> 00:00:57,510
production not in production but in

00:00:55,379 --> 00:00:59,789
development yeah which way are you

00:00:57,510 --> 00:01:01,590
testing in this process good question so

00:00:59,789 --> 00:01:03,480
you want to test early and often as

00:01:01,590 --> 00:01:05,610
possible but this is typically used

00:01:03,480 --> 00:01:07,530
before you deploy to production to

00:01:05,610 --> 00:01:09,330
certify that all your functionality is

00:01:07,530 --> 00:01:10,530
working and your code is quality code

00:01:09,330 --> 00:01:12,540
meaning that it works in all the

00:01:10,530 --> 00:01:14,310
different browsers so typically works as

00:01:12,540 --> 00:01:16,110
a developer makes a change the

00:01:14,310 --> 00:01:18,150
continuous integration systems detect

00:01:16,110 --> 00:01:19,710
that and then kick off the test

00:01:18,150 --> 00:01:21,270
automation framework which would run

00:01:19,710 --> 00:01:23,549
tests against sauce labs against all the

00:01:21,270 --> 00:01:26,310
various browsers that your consumers or

00:01:23,549 --> 00:01:29,630
customers are using your app in so as

00:01:26,310 --> 00:01:32,130
early as possible and usually post our

00:01:29,630 --> 00:01:34,170
pre-production deployment and so do you

00:01:32,130 --> 00:01:36,420
guys also think about testing in real

00:01:34,170 --> 00:01:38,130
time I mean is that some automated

00:01:36,420 --> 00:01:39,689
testing in real time is that something

00:01:38,130 --> 00:01:42,990
you guys are going to be doing this well

00:01:39,689 --> 00:01:44,820
or yeah so really it's however your

00:01:42,990 --> 00:01:47,790
pipeline is designed as well as you know

00:01:44,820 --> 00:01:49,380
the maturity of the organization so some

00:01:47,790 --> 00:01:52,140
of our customers are some of the

00:01:49,380 --> 00:01:53,670
industries using us for even post

00:01:52,140 --> 00:01:55,740
production deployment to make sure that

00:01:53,670 --> 00:01:58,070
their systems are up and running and to

00:01:55,740 --> 00:02:00,270
end because what happens is you're

00:01:58,070 --> 00:02:02,509
running the test which opens the browser

00:02:00,270 --> 00:02:04,259
and it's simulating the exact

00:02:02,509 --> 00:02:05,909
interactions that the user would have

00:02:04,259 --> 00:02:07,829
opening the browser going to a URL

00:02:05,909 --> 00:02:09,989
clicking on and out and verifying

00:02:07,829 --> 00:02:11,489
something comes up so you can run that

00:02:09,989 --> 00:02:13,200
post production deployment or

00:02:11,489 --> 00:02:14,910
pre-production deployment and

00:02:13,200 --> 00:02:16,319
the more tests you do the better

00:02:14,910 --> 00:02:18,900
especially in an automated fashion

00:02:16,319 --> 00:02:20,340
that's really the advantage of automated

00:02:18,900 --> 00:02:22,170
testing is you can run it on the fly at

00:02:20,340 --> 00:02:23,970
any given moment well the advantage of

00:02:22,170 --> 00:02:26,430
automated testing so how does how does a

00:02:23,970 --> 00:02:28,319
company go to automated testing let's

00:02:26,430 --> 00:02:30,780
say they're they're doing some sort of

00:02:28,319 --> 00:02:33,510
manual testing now and how do they get

00:02:30,780 --> 00:02:35,220
flip that switch to get from what

00:02:33,510 --> 00:02:37,350
they're doing out to automated testing

00:02:35,220 --> 00:02:39,660
yeah so the first thing is you have to

00:02:37,350 --> 00:02:41,940
have some expertise or some knowledge

00:02:39,660 --> 00:02:44,010
there the other piece I would say is

00:02:41,940 --> 00:02:45,900
moving straight from manual to automated

00:02:44,010 --> 00:02:47,550
testing really have automation in mind

00:02:45,900 --> 00:02:50,190
and take a step back and think about it

00:02:47,550 --> 00:02:51,840
automated tests are much different than

00:02:50,190 --> 00:02:53,670
manual tests especially functional

00:02:51,840 --> 00:02:55,769
testing for example in manual testing

00:02:53,670 --> 00:02:58,920
you would pop open the browser launch it

00:02:55,769 --> 00:03:00,570
do login do a bunch of actions and then

00:02:58,920 --> 00:03:02,550
maybe move on to the next test case in

00:03:00,570 --> 00:03:04,200
the next test case the automated testing

00:03:02,550 --> 00:03:07,230
is very different you want to have short

00:03:04,200 --> 00:03:09,060
to think atomic and autonomous tests in

00:03:07,230 --> 00:03:10,860
order to do that you guys have to have a

00:03:09,060 --> 00:03:13,230
test data management strategy you have

00:03:10,860 --> 00:03:15,900
API in place so you can set up the count

00:03:13,230 --> 00:03:17,910
or test in the desire state and test

00:03:15,900 --> 00:03:19,769
exactly what you want and that's what I

00:03:17,910 --> 00:03:21,390
mean by atomic test and make it such

00:03:19,769 --> 00:03:22,920
that you can run these tests massively

00:03:21,390 --> 00:03:24,510
in parallel and that's what I mean by

00:03:22,920 --> 00:03:26,459
autonomous test that is self-governing

00:03:24,510 --> 00:03:28,769
and that's really where you're going to

00:03:26,459 --> 00:03:31,890
get the true fruits from automated

00:03:28,769 --> 00:03:34,650
testing so just the autonomous testing

00:03:31,890 --> 00:03:38,160
does it look at an app and decide

00:03:34,650 --> 00:03:41,519
everything it needs to test or do you

00:03:38,160 --> 00:03:43,980
leave things out I mean it is just smart

00:03:41,519 --> 00:03:46,680
enough to know that it needs to test all

00:03:43,980 --> 00:03:48,720
the difficult things and all the simple

00:03:46,680 --> 00:03:51,450
things or yeah how do you decide good

00:03:48,720 --> 00:03:53,730
questions so I would say in a utopic

00:03:51,450 --> 00:03:55,500
world you'd want to run all your tests

00:03:53,730 --> 00:03:56,670
as early as possible on the fly and

00:03:55,500 --> 00:03:58,110
that's assuming that you have the

00:03:56,670 --> 00:03:59,670
bandwidth to do it so let's say if you

00:03:58,110 --> 00:04:01,470
have a thousand tests you want to run

00:03:59,670 --> 00:04:02,970
all thousand of them in parallel and if

00:04:01,470 --> 00:04:06,060
it only takes you you know thirty

00:04:02,970 --> 00:04:07,320
seconds a minute do it because it that

00:04:06,060 --> 00:04:08,820
might be the same time it takes you to

00:04:07,320 --> 00:04:11,489
run a hundred tests in parallel so

00:04:08,820 --> 00:04:13,620
really it's about running as many unique

00:04:11,489 --> 00:04:16,200
as you can as early in the process to

00:04:13,620 --> 00:04:18,000
get your developers feedback that they

00:04:16,200 --> 00:04:19,739
need that they're on the right track not

00:04:18,000 --> 00:04:21,479
breaking any functionality as well as

00:04:19,739 --> 00:04:24,000
have the pipelines organize such that

00:04:21,479 --> 00:04:26,000
they can run the tests or issue a pull

00:04:24,000 --> 00:04:28,550
request when that would kick off the

00:04:26,000 --> 00:04:31,310
they can get feedback before they merge

00:04:28,550 --> 00:04:33,200
it into master or the main pipeline

00:04:31,310 --> 00:04:34,820
picks it up so don't punish the

00:04:33,200 --> 00:04:36,350
developer for writing back code but

00:04:34,820 --> 00:04:38,900
instead given the feedback that's what

00:04:36,350 --> 00:04:41,360
developers want so what do you see as

00:04:38,900 --> 00:04:44,090
one of the most common pitfalls when

00:04:41,360 --> 00:04:46,670
someone is new to automated testing and

00:04:44,090 --> 00:04:49,430
they're doing something that probably is

00:04:46,670 --> 00:04:51,020
not optimal what is that normal kind of

00:04:49,430 --> 00:04:53,690
pitfall of things that are done it

00:04:51,020 --> 00:04:56,240
probably should be left to the

00:04:53,690 --> 00:04:58,130
automation or the autonomous yeah so

00:04:56,240 --> 00:05:01,270
anything that you're repeating as well

00:04:58,130 --> 00:05:05,840
as easily suited for automation so

00:05:01,270 --> 00:05:07,430
things like getting to a specific place

00:05:05,840 --> 00:05:08,720
in the form and clicking submit and

00:05:07,430 --> 00:05:09,919
verifying an error happens we're

00:05:08,720 --> 00:05:11,330
verifying that the form is submitted

00:05:09,919 --> 00:05:12,890
that would be a good candidate for

00:05:11,330 --> 00:05:15,260
automation but something that's outside

00:05:12,890 --> 00:05:17,660
the scope of selenium or the automation

00:05:15,260 --> 00:05:19,640
protocols is typically better suited for

00:05:17,660 --> 00:05:20,870
manual testing and they're all you know

00:05:19,640 --> 00:05:23,030
there's a balance you want to automate

00:05:20,870 --> 00:05:25,310
as much as you possible so that you

00:05:23,030 --> 00:05:26,720
focus your manual or exploratory testing

00:05:25,310 --> 00:05:29,990
on specific things that cannot be

00:05:26,720 --> 00:05:31,490
automated or not suited and that way you

00:05:29,990 --> 00:05:33,800
can depend on your automation to get a

00:05:31,490 --> 00:05:36,320
certain amount or in theory hopefully

00:05:33,800 --> 00:05:37,669
100 percent confidence and decrease the

00:05:36,320 --> 00:05:39,830
amount of manual testing you do to

00:05:37,669 --> 00:05:42,500
iterate often and get that code to

00:05:39,830 --> 00:05:45,470
production so there's a lot of talk

00:05:42,500 --> 00:05:47,930
about artificial intelligence AI yeah is

00:05:45,470 --> 00:05:49,910
testing going there to I mean is is art

00:05:47,930 --> 00:05:52,610
is AI going to tell us what we should be

00:05:49,910 --> 00:05:54,410
testing in the future and what you know

00:05:52,610 --> 00:05:57,140
what you might want to look at instead

00:05:54,410 --> 00:05:59,960
of doing it manually absolutely so I

00:05:57,140 --> 00:06:02,800
would imagine this as you know you take

00:05:59,960 --> 00:06:05,150
the analytics from what your users are

00:06:02,800 --> 00:06:06,919
using your application what flows

00:06:05,150 --> 00:06:08,840
they're taking as well as what are the

00:06:06,919 --> 00:06:11,150
critical paths you know for example the

00:06:08,840 --> 00:06:12,770
about Us page might not be as important

00:06:11,150 --> 00:06:14,270
at the checkout page right you want to

00:06:12,770 --> 00:06:17,200
make sure that you can take their money

00:06:14,270 --> 00:06:19,760
as well as give them a product but I

00:06:17,200 --> 00:06:20,930
believe that there will be definitely

00:06:19,760 --> 00:06:23,960
machine learning and artificial

00:06:20,930 --> 00:06:25,310
intelligence to assist with that and the

00:06:23,960 --> 00:06:27,380
data is already that we just have to

00:06:25,310 --> 00:06:31,130
make sense of it for for example there's

00:06:27,380 --> 00:06:32,479
already a lot of instrumentation in the

00:06:31,130 --> 00:06:34,280
current apps that we're seeing in

00:06:32,479 --> 00:06:38,120
production today whether they're mobile

00:06:34,280 --> 00:06:39,470
or web in the what pass are being hit as

00:06:38,120 --> 00:06:41,480
well as what are the

00:06:39,470 --> 00:06:44,000
the more common patterns and such I

00:06:41,480 --> 00:06:45,800
could see that autonomous and automated

00:06:44,000 --> 00:06:48,710
testing being one of the things that we

00:06:45,800 --> 00:06:51,290
almost get humans out of the loop on to

00:06:48,710 --> 00:06:53,600
some degree but I think there's still

00:06:51,290 --> 00:06:56,090
that judgment that needs to be made but

00:06:53,600 --> 00:06:58,280
so if you look really far forward in the

00:06:56,090 --> 00:07:01,490
future where would you like to see sauce

00:06:58,280 --> 00:07:03,740
labs be and far forward to me is 12

00:07:01,490 --> 00:07:05,840
months isn't because a lot changes in

00:07:03,740 --> 00:07:08,030
that quick eternally so what would you

00:07:05,840 --> 00:07:10,160
like to see next year if you sat down

00:07:08,030 --> 00:07:11,900
and had this conversation would you like

00:07:10,160 --> 00:07:15,830
to say sauce labs is doing and your

00:07:11,900 --> 00:07:18,950
partners are doing yeah I would like to

00:07:15,830 --> 00:07:20,990
see sauce have all the information that

00:07:18,950 --> 00:07:22,840
the browser has as well as be able to

00:07:20,990 --> 00:07:26,270
predict things such as like memory leak

00:07:22,840 --> 00:07:28,010
CPU usage figure out the last ten times

00:07:26,270 --> 00:07:30,920
that you ran this test this err didn't

00:07:28,010 --> 00:07:32,900
happen or this portion of the test was

00:07:30,920 --> 00:07:35,450
this short this time it's ten times as

00:07:32,900 --> 00:07:37,880
long so and they had to JIT JavaScript

00:07:35,450 --> 00:07:39,500
error so probably the problem is with

00:07:37,880 --> 00:07:42,050
this part of the test or this part of

00:07:39,500 --> 00:07:45,530
the application so that you can drill

00:07:42,050 --> 00:07:48,020
down go to the problem area as soon as

00:07:45,530 --> 00:07:51,020
possible and go about fixing it so

00:07:48,020 --> 00:07:53,860
really surfacing more information to

00:07:51,020 --> 00:07:56,690
make you more efficient as well as

00:07:53,860 --> 00:07:59,210
certify your code and drill down into

00:07:56,690 --> 00:08:01,760
the into the areas that are going to

00:07:59,210 --> 00:08:04,070
cause problems and the more effectively

00:08:01,760 --> 00:08:05,870
you can remediate is going to be the

00:08:04,070 --> 00:08:07,820
more the more code getting out to

00:08:05,870 --> 00:08:10,430
production as well as the quality and

00:08:07,820 --> 00:08:12,800
the uptime spiking we can effective

00:08:10,430 --> 00:08:15,260
correct exactly so really I think it's

00:08:12,800 --> 00:08:17,120
give developers the feedback in the

00:08:15,260 --> 00:08:21,950
information they need and surface as

00:08:17,120 --> 00:08:25,730
much as we can as well as do effective

00:08:21,950 --> 00:08:28,280
machine learning and use our technology

00:08:25,730 --> 00:08:30,590
to our advantage to make the developers

00:08:28,280 --> 00:08:32,150
life easier or the testers life easier

00:08:30,590 --> 00:08:35,110
excellent well we look forward that

00:08:32,150 --> 00:08:35,110
conversation thank you thank you

00:08:41,030 --> 00:08:43,090

YouTube URL: https://www.youtube.com/watch?v=ZQT0n7TtUKo


