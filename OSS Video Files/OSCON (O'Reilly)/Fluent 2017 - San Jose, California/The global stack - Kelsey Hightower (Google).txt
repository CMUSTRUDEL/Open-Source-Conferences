Title: The global stack - Kelsey Hightower (Google)
Publication date: 2017-06-22
Playlist: Fluent 2017 - San Jose, California
Description: 
	Kelsey Hightower introduces the global stack and outlines the challenges facing full stack developers now that the target of their efforts must include computers that can go from 0 to 60 in under 3 seconds.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Google: http://plus.google.com/+oreillymedia
Captions: 
	00:00:00,970 --> 00:00:04,759
so now we have to think about how do we

00:00:03,379 --> 00:00:06,650
actually deal with this because the

00:00:04,759 --> 00:00:08,599
biggest problem in this world is how do

00:00:06,650 --> 00:00:10,549
you implement all the security policies

00:00:08,599 --> 00:00:12,139
and rate-limiting across all of these

00:00:10,549 --> 00:00:14,269
languages across all the devices that

00:00:12,139 --> 00:00:16,250
the deployed on it just doesn't happen

00:00:14,269 --> 00:00:18,620
we talked about it and one talks about

00:00:16,250 --> 00:00:20,210
the bad part though the bad part is and

00:00:18,620 --> 00:00:22,670
the truth is you cannot successfully

00:00:20,210 --> 00:00:23,720
find libraries that do a good job with

00:00:22,670 --> 00:00:26,660
all the things you need to do in

00:00:23,720 --> 00:00:29,200
production in all of those languages so

00:00:26,660 --> 00:00:32,149
we're going to talk about is sto and

00:00:29,200 --> 00:00:33,859
what if your attempts to do is figure

00:00:32,149 --> 00:00:36,469
out this next step so it feels pretty

00:00:33,859 --> 00:00:38,300
new the technology is built on comes

00:00:36,469 --> 00:00:40,460
from with the ride-sharing company they

00:00:38,300 --> 00:00:42,260
have a tool called envoy and Envoy

00:00:40,460 --> 00:00:44,300
attempts to implement all of these

00:00:42,260 --> 00:00:46,339
production ready things into a single

00:00:44,300 --> 00:00:49,219
application server that can run

00:00:46,339 --> 00:00:51,019
alongside your application so what I'm

00:00:49,219 --> 00:00:54,289
going to do is try to demo this please

00:00:51,019 --> 00:00:56,149
demo gods be on my side and we're going

00:00:54,289 --> 00:00:59,089
to try to step through what it's like in

00:00:56,149 --> 00:01:03,079
this world now what I am going to do is

00:00:59,089 --> 00:01:04,670
get rid of this thing so I'm going to do

00:01:03,079 --> 00:01:06,710
is say show you guys a little bit what

00:01:04,670 --> 00:01:08,300
the world looks like for some people so

00:01:06,710 --> 00:01:09,830
most people are running things that

00:01:08,300 --> 00:01:12,020
cluster managers and maybe using a

00:01:09,830 --> 00:01:14,270
platform as a service and it has a bunch

00:01:12,020 --> 00:01:15,590
of nodes on them now the goal is that we

00:01:14,270 --> 00:01:17,720
want to be efficient as possible with

00:01:15,590 --> 00:01:19,370
these nodes so what we'll use the

00:01:17,720 --> 00:01:20,840
scheduler to schedule our things onto

00:01:19,370 --> 00:01:21,350
them so we're going to do that really

00:01:20,840 --> 00:01:22,760
quickly

00:01:21,350 --> 00:01:26,180
so I'm going to make sure that I don't

00:01:22,760 --> 00:01:28,460
have anything running so just going to

00:01:26,180 --> 00:01:29,870
look at v1 so we don't have anything

00:01:28,460 --> 00:01:31,610
deploy so I want to quickly deploy our

00:01:29,870 --> 00:01:32,660
application this is what most people are

00:01:31,610 --> 00:01:37,070
doing this is pretty straightforward

00:01:32,660 --> 00:01:39,020
stuff so what I'm doing here is I'm

00:01:37,070 --> 00:01:41,780
going to be deploying my might set of

00:01:39,020 --> 00:01:43,250
micro services using kubernetes alright

00:01:41,780 --> 00:01:45,740
so what we're going to do is deploy our

00:01:43,250 --> 00:01:50,060
back in we'll start with my back-end

00:01:45,740 --> 00:01:54,050
call bar v1 will also do its other peer

00:01:50,060 --> 00:01:55,280
call foo and we'll also do the front end

00:01:54,050 --> 00:01:58,790
okay so I'm going to have these three

00:01:55,280 --> 00:02:00,350
pieces running all right so once those

00:01:58,790 --> 00:02:03,320
are in place we'll see that they'll spin

00:02:00,350 --> 00:02:04,909
up pretty quickly in my cluster so at

00:02:03,320 --> 00:02:06,710
this point this is where most people

00:02:04,909 --> 00:02:09,950
stop what about security

00:02:06,710 --> 00:02:12,080
good luck what about visibility no

00:02:09,950 --> 00:02:14,030
metrics no monitoring you have nothing

00:02:12,080 --> 00:02:15,620
so instead of going back

00:02:14,030 --> 00:02:17,360
making everyone learn how to implement

00:02:15,620 --> 00:02:19,850
this across all the languages deployed

00:02:17,360 --> 00:02:23,240
here we're going to adopt this idea of

00:02:19,850 --> 00:02:25,010
the sidecar now the key here is you want

00:02:23,240 --> 00:02:27,650
to add all of this policy without having

00:02:25,010 --> 00:02:28,880
the dev teams have to rewrite any of the

00:02:27,650 --> 00:02:30,530
applications because you get better

00:02:28,880 --> 00:02:33,620
things to do than attempt to implement

00:02:30,530 --> 00:02:35,900
these things so we're going to do is add

00:02:33,620 --> 00:02:38,030
the sidecar on the fly so of course we

00:02:35,900 --> 00:02:39,050
have to have SEO installed so going to

00:02:38,030 --> 00:02:41,420
show you everything in the

00:02:39,050 --> 00:02:43,160
infrastructure so if co has integration

00:02:41,420 --> 00:02:45,110
with things like Zipkin for application

00:02:43,160 --> 00:02:46,880
tracing service graph to show you how

00:02:45,110 --> 00:02:48,920
your dependencies match up together and

00:02:46,880 --> 00:02:50,720
go final to show you what your metrics

00:02:48,920 --> 00:02:53,000
are so let's go ahead and get this

00:02:50,720 --> 00:02:54,530
application with a sidecar in place so

00:02:53,000 --> 00:02:57,080
what we'll do again it will say cuz util

00:02:54,530 --> 00:03:00,560
apply and then what we'll do is we'll

00:02:57,080 --> 00:03:05,330
have if to you do the work of injecting

00:03:00,560 --> 00:03:08,060
the sidecar so cube inject and then

00:03:05,330 --> 00:03:14,360
we'll give it the deployment again so

00:03:08,060 --> 00:03:22,489
we'll do bar v1 and then we'll do foo

00:03:14,360 --> 00:03:25,280
and then we'll do the front end so at

00:03:22,489 --> 00:03:28,430
this point we should now have our

00:03:25,280 --> 00:03:30,680
application set up now you'll notice

00:03:28,430 --> 00:03:33,400
that the count went from 1 to 1 to 2 of

00:03:30,680 --> 00:03:36,530
2 so we're injecting this sidecar

00:03:33,400 --> 00:03:38,750
directly in the application side by side

00:03:36,530 --> 00:03:41,650
no code rewrites and no touching the

00:03:38,750 --> 00:03:41,650
existing application

00:03:47,740 --> 00:03:49,800

YouTube URL: https://www.youtube.com/watch?v=jlLJvC-Dxrc


