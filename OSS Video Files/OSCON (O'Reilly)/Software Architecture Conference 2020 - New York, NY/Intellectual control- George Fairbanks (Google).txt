Title: Intellectual control- George Fairbanks (Google)
Publication date: 2020-02-26
Playlist: Software Architecture Conference 2020 - New York, NY
Description: 
	Login to O'Reilly Online Learning to watch the full keynote: https://learning.oreilly.com/videos/oreilly-software-architecture/0636920333777 



In the early days of software engineering, Edsger Dijkstra warned us not to let the size and complexity of our programs cause us to lose “intellectual control” due to the limited nature of our minds. To George Fairbanks’s knowledge, Dijkstra never defined precisely what intellectual control was. Our software today is staggeringly larger than the programs of the 1960s, so does that mean we have it under our intellectual control or did we find ways to make progress without Dijkstra’s high standards?

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:02,689 --> 00:00:07,889
so I need to introduce that vocabulary

00:00:05,549 --> 00:00:09,990
of intellectual control here the idea

00:00:07,889 --> 00:00:12,630
with intellectual control as Dykstra was

00:00:09,990 --> 00:00:15,269
talking about it is before you run the

00:00:12,630 --> 00:00:17,640
code do you have good confidence it's

00:00:15,269 --> 00:00:19,169
gonna do what you expect now thanks for

00:00:17,640 --> 00:00:21,929
what the Matt was a mathematician by

00:00:19,169 --> 00:00:23,819
training and so he held the standard to

00:00:21,929 --> 00:00:26,669
say we should be proving our code to be

00:00:23,819 --> 00:00:29,579
correct very few of us do that today

00:00:26,669 --> 00:00:31,949
although if you are in your IDE and it

00:00:29,579 --> 00:00:33,930
says this variable might be null and it

00:00:31,949 --> 00:00:35,610
looks like your dereferencing it believe

00:00:33,930 --> 00:00:37,380
it or not that's actually the same proof

00:00:35,610 --> 00:00:40,080
infrastructure that's demonstrating that

00:00:37,380 --> 00:00:43,200
that's going on but he introduced this

00:00:40,080 --> 00:00:44,910
idea of structured programming probably

00:00:43,200 --> 00:00:46,440
most famous for the fact that you no

00:00:44,910 --> 00:00:48,900
longer have go-to statements in your

00:00:46,440 --> 00:00:50,610
code but the idea was far bigger than

00:00:48,900 --> 00:00:52,950
this it was that we can structure our

00:00:50,610 --> 00:00:55,470
code in such a way that makes it easy or

00:00:52,950 --> 00:00:57,870
harder to reason through it and have

00:00:55,470 --> 00:00:59,640
confidence in what it does so really

00:00:57,870 --> 00:01:01,710
beyond the proofs there's all kinds of

00:00:59,640 --> 00:01:03,870
things that we do today or don't do

00:01:01,710 --> 00:01:05,700
today that can give us more or less

00:01:03,870 --> 00:01:07,829
confidence I would include things like

00:01:05,700 --> 00:01:10,109
having a really strong type system

00:01:07,829 --> 00:01:12,270
instead of being string Li typed if

00:01:10,109 --> 00:01:14,100
you're familiar with that structuring

00:01:12,270 --> 00:01:15,450
your code so it has consistency using

00:01:14,100 --> 00:01:19,619
abstract data types

00:01:15,450 --> 00:01:22,170
designed by contract and so forth so let

00:01:19,619 --> 00:01:24,869
me contrast intellectual control with

00:01:22,170 --> 00:01:28,020
statistical control now with statistical

00:01:24,869 --> 00:01:30,090
control you run the code once or many

00:01:28,020 --> 00:01:32,100
times and because you've run it in

00:01:30,090 --> 00:01:33,840
representative cases you give yourself

00:01:32,100 --> 00:01:38,579
confidence yeah I ran it it does what I

00:01:33,840 --> 00:01:40,409
expect it to do okay so with these two

00:01:38,579 --> 00:01:41,909
things I think you can see these are two

00:01:40,409 --> 00:01:43,889
different ways of getting to the same

00:01:41,909 --> 00:01:46,979
answer which is you know I'm building

00:01:43,889 --> 00:01:48,929
code that does what I expect and because

00:01:46,979 --> 00:01:50,789
you guys have been kind enough to all

00:01:48,929 --> 00:01:53,100
come here I feel like I should say

00:01:50,789 --> 00:01:57,920
something a bit radical and a bit edgy

00:01:53,100 --> 00:01:57,920
that disturbs you so so here it is I

00:01:58,159 --> 00:02:05,729
worry that our reliance on testing has

00:02:03,119 --> 00:02:09,920
numbed us to the fact that we're doing

00:02:05,729 --> 00:02:09,920

YouTube URL: https://www.youtube.com/watch?v=cQZr2K6fM8w


