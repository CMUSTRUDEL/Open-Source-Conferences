Title: Architecture.Next: Invalidating old axioms Mark Richards (Self-employed)
Publication date: 2020-02-26
Playlist: Software Architecture Conference 2020 - New York, NY
Description: 
	Login to O'Reilly Online Learning to watch the full keynote: https://learning.oreilly.com/videos/oreilly-software-architecture/0636920333777

Software architecture has always been full of axioms—rules for creating solutions for business problems. However, in today’s fast-paced world full of change, software architecture is in a constant state of dynamic equilibrium, consequently invalidating many of the axioms software architects live by. Mark Richards challenges some of the tried-and-true axioms in software architecture and shows you how to manage the ever-changing state of software architecture.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:02,020 --> 00:00:17,380
I wonder how many axioms and software

00:00:09,250 --> 00:00:19,090
architecture are still valid today let's

00:00:17,380 --> 00:00:21,400
take a look at some of these axioms as a

00:00:19,090 --> 00:00:23,830
matter of fact software architecture is

00:00:21,400 --> 00:00:25,900
a separate activity from software

00:00:23,830 --> 00:00:31,090
development ladies and gentlemen today

00:00:25,900 --> 00:00:33,250
this is an in valid axiom it may seem

00:00:31,090 --> 00:00:34,810
self-evidently true that software

00:00:33,250 --> 00:00:37,060
architecture is in fact a separate

00:00:34,810 --> 00:00:39,640
activity most actually take a look at

00:00:37,060 --> 00:00:40,960
this axiom because if we take a look at

00:00:39,640 --> 00:00:42,910
software architecture and software

00:00:40,960 --> 00:00:45,340
developments what is the software

00:00:42,910 --> 00:00:47,110
architect do the activities within

00:00:45,340 --> 00:00:47,920
software architecture do and seem

00:00:47,110 --> 00:00:49,960
different

00:00:47,920 --> 00:00:53,500
the first activity of software architect

00:00:49,960 --> 00:00:54,700
does is to analyze business drivers with

00:00:53,500 --> 00:00:56,920
the business to define those

00:00:54,700 --> 00:00:59,860
architecture characteristics that are

00:00:56,920 --> 00:01:01,719
important to the business and then based

00:00:59,860 --> 00:01:03,910
on these architecture characteristics

00:01:01,719 --> 00:01:06,520
choose the appropriate architecture

00:01:03,910 --> 00:01:09,670
style for that particular problem or

00:01:06,520 --> 00:01:11,799
system and finally to define those

00:01:09,670 --> 00:01:14,020
components those building blocks of the

00:01:11,799 --> 00:01:17,229
architecture these are common activities

00:01:14,020 --> 00:01:20,499
of a software architect now these

00:01:17,229 --> 00:01:22,420
activities usually create artifacts and

00:01:20,499 --> 00:01:24,789
architecture decisions which are handed

00:01:22,420 --> 00:01:26,799
over to software developers software

00:01:24,789 --> 00:01:29,469
developers do in fact have an entirely

00:01:26,799 --> 00:01:31,450
different set of activities what is the

00:01:29,469 --> 00:01:33,700
software development do software

00:01:31,450 --> 00:01:37,299
developer will take the components those

00:01:33,700 --> 00:01:39,999
building blocks defines and by the

00:01:37,299 --> 00:01:43,840
architect and decide how should those be

00:01:39,999 --> 00:01:47,200
implemented secondly may be screen

00:01:43,840 --> 00:01:51,880
design mock-ups and screen flow and also

00:01:47,200 --> 00:01:55,149
of course writing software ladies and

00:01:51,880 --> 00:02:00,459
gentlemen this model of software

00:01:55,149 --> 00:02:03,249
architecture will not work today these

00:02:00,459 --> 00:02:05,609
are not two separate activities and as a

00:02:03,249 --> 00:02:08,619
matter of fact the issue is this

00:02:05,609 --> 00:02:11,290
unidirectional line right here as a

00:02:08,619 --> 00:02:12,850
matter of fact there's really not a grey

00:02:11,290 --> 00:02:14,740
line that separates software

00:02:12,850 --> 00:02:15,860
architecture from software development

00:02:14,740 --> 00:02:17,510
it's not even a

00:02:15,860 --> 00:02:20,420
solid line ladies and gentlemen it

00:02:17,510 --> 00:02:23,300
happens to be unfortunately a chasm that

00:02:20,420 --> 00:02:26,210
is separating software architecture from

00:02:23,300 --> 00:02:28,700
software developments now amazingly

00:02:26,210 --> 00:02:31,370
enough some of the decisions an

00:02:28,700 --> 00:02:32,810
architect makes magically get over to

00:02:31,370 --> 00:02:36,620
the development team I don't know how

00:02:32,810 --> 00:02:39,020
this happens because so many decisions

00:02:36,620 --> 00:02:41,000
and architect makes never reach the

00:02:39,020 --> 00:02:42,770
development team they fall straight into

00:02:41,000 --> 00:02:46,250
this chasm as a matter of fact - even

00:02:42,770 --> 00:02:49,010
worse decisions development teams make

00:02:46,250 --> 00:02:51,709
that change our architectural assertions

00:02:49,010 --> 00:02:54,140
and assumptions never make it to us the

00:02:51,709 --> 00:03:00,980
software architect they end up folks in

00:02:54,140 --> 00:03:03,980
this chasm today in order to make

00:03:00,980 --> 00:03:07,180
software architecture work folks we have

00:03:03,980 --> 00:03:10,280
to bridge and fill in this chasm between

00:03:07,180 --> 00:03:12,230
these two activities and create a

00:03:10,280 --> 00:03:14,750
bi-directional collaborative

00:03:12,230 --> 00:03:16,910
relationship between software architects

00:03:14,750 --> 00:03:21,130
and software developers where they are

00:03:16,910 --> 00:03:21,130

YouTube URL: https://www.youtube.com/watch?v=8xSSX0Jeibo


