Title: Critical Path-driven Development - Jaana B. Dogan (Google)
Publication date: 2018-10-03
Playlist: O'Reilly Velocity Conference 2018 - New York, New York
Description: 
	Scaling large systems and teams is hard. In the recent decade, we finally might have found a critical tool that causes us to believe this doesn’t have to be the case. Jaana Dogan explains why Google teaches its tracing tools to “Nooglers” and how it helps them learn about Google-scale systems end to end without getting lost in the world’s largest systems company’s enormous code base.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,179 --> 00:00:03,840
I've been thinking for a while that hey

00:00:01,949 --> 00:00:05,460
maybe this this concept this way of

00:00:03,840 --> 00:00:06,990
thinking deserves its own paradigm I

00:00:05,460 --> 00:00:09,059
mean I just came up with this name which

00:00:06,990 --> 00:00:10,950
is terrible and we're a mouthful I call

00:00:09,059 --> 00:00:13,639
it critical path driven development or

00:00:10,950 --> 00:00:17,130
cpdt now what I'm open for suggestions

00:00:13,639 --> 00:00:18,930
so the the goal here is like what it

00:00:17,130 --> 00:00:21,240
means is the availability of the

00:00:18,930 --> 00:00:23,880
underlying services ordinate processes

00:00:21,240 --> 00:00:26,279
is not the goal the availability of the

00:00:23,880 --> 00:00:29,970
those critical paths that users are

00:00:26,279 --> 00:00:31,859
engaging with is the goal just like New

00:00:29,970 --> 00:00:33,860
York example I care about walking from

00:00:31,859 --> 00:00:36,870
Central Park to Times Square

00:00:33,860 --> 00:00:39,239
being able to I think think and see your

00:00:36,870 --> 00:00:43,500
architectures from this perspective is

00:00:39,239 --> 00:00:46,289
is is extremely different than anything

00:00:43,500 --> 00:00:48,030
we do right now as an industry but is

00:00:46,289 --> 00:00:50,670
we've also learned over tunnel is

00:00:48,030 --> 00:00:53,370
actually very useful some of our

00:00:50,670 --> 00:00:55,739
engineering principles are around some

00:00:53,370 --> 00:00:57,899
of these concepts for example we try to

00:00:55,739 --> 00:00:59,760
discover critical paths automatically

00:00:57,899 --> 00:01:01,829
the next thing we want to do is like we

00:00:59,760 --> 00:01:03,840
want to make them reliable and we want

00:01:01,829 --> 00:01:06,000
to optimize them make them fast it's a

00:01:03,840 --> 00:01:07,200
big part of the user experience and we

00:01:06,000 --> 00:01:09,510
want to make them debuggable

00:01:07,200 --> 00:01:11,070
you know if it's if you're on call if

00:01:09,510 --> 00:01:12,600
you're unfortunately it's the middle of

00:01:11,070 --> 00:01:15,450
the night or something I want you to be

00:01:12,600 --> 00:01:18,390
able to see everything and to end and

00:01:15,450 --> 00:01:20,340
give you as much as data so even if

00:01:18,390 --> 00:01:23,210
you're not familiar with the system you

00:01:20,340 --> 00:01:26,729
should be able to do something about it

00:01:23,210 --> 00:01:28,320
so cool how we get there I would say

00:01:26,729 --> 00:01:30,450
that like there are two main emerging

00:01:28,320 --> 00:01:33,180
technologies in the industry nowadays we

00:01:30,450 --> 00:01:35,280
actually hear them in the context of

00:01:33,180 --> 00:01:37,200
observability the first one is event

00:01:35,280 --> 00:01:39,509
collection the second one is distributed

00:01:37,200 --> 00:01:41,689
tracing views distributed traces at

00:01:39,509 --> 00:01:43,920
Google but these are very similar tools

00:01:41,689 --> 00:01:47,399
Facebook is for example use an event

00:01:43,920 --> 00:01:48,720
collection and I want to ask a question

00:01:47,399 --> 00:01:51,659
do you know the golden rule of like

00:01:48,720 --> 00:01:53,790
exploring cows cows effect relationships

00:01:51,659 --> 00:01:55,740
it's this ability to you know ask keep

00:01:53,790 --> 00:01:57,960
asking why I did why this happens why

00:01:55,740 --> 00:01:59,729
that happens and like you keep asking

00:01:57,960 --> 00:02:03,060
until you figure out the route cows and

00:01:59,729 --> 00:02:05,700
I think traces and events sort of like a

00:02:03,060 --> 00:02:08,340
tool to do the same thing with your

00:02:05,700 --> 00:02:10,200
systems you just keep asking and it's it

00:02:08,340 --> 00:02:13,560
allows you to go deeper in your stack

00:02:10,200 --> 00:02:16,020
and find the actual route cows

00:02:13,560 --> 00:02:17,130
and this is what a distributive trace

00:02:16,020 --> 00:02:20,280
looks like by the way if you haven't

00:02:17,130 --> 00:02:23,270
seen one it's it's a HTTP endpoint it

00:02:20,280 --> 00:02:25,709
tells you the latency the flow the exact

00:02:23,270 --> 00:02:27,209
components along the way so you can look

00:02:25,709 --> 00:02:30,390
at these rods to learn about you know

00:02:27,209 --> 00:02:32,730
the life of a request and as well as we

00:02:30,390 --> 00:02:34,260
can use the data coming from our

00:02:32,730 --> 00:02:38,250
production to debug issues that is

00:02:34,260 --> 00:02:39,690
affecting our users so our stack

00:02:38,250 --> 00:02:41,160
nowadays it's just like you know a full

00:02:39,690 --> 00:02:43,140
of different layers and it's getting

00:02:41,160 --> 00:02:44,640
more complex over time I would like to

00:02:43,140 --> 00:02:46,260
say that like these concepts and tools

00:02:44,640 --> 00:02:47,850
around it it's actually a teaching tool

00:02:46,260 --> 00:02:49,830
you don't need to learn about the

00:02:47,850 --> 00:02:51,989
implementation details of entire stack

00:02:49,830 --> 00:02:54,720
you may have actually a lot of more

00:02:51,989 --> 00:02:57,090
control about about our processes and

00:02:54,720 --> 00:02:59,220
what goes into that because we sort of

00:02:57,090 --> 00:03:01,769
control but anything underneath it is

00:02:59,220 --> 00:03:04,260
usually a black box for most of us and

00:03:01,769 --> 00:03:06,209
if your infrastructure was providing

00:03:04,260 --> 00:03:08,989
some sort of visibility to you from the

00:03:06,209 --> 00:03:11,100
lower layers it actually revolutionize

00:03:08,989 --> 00:03:13,530
you know our industry because it's

00:03:11,100 --> 00:03:15,930
becoming easier to you know be an expert

00:03:13,530 --> 00:03:17,880
or maybe the definition of vision expert

00:03:15,930 --> 00:03:19,799
may change imagine for example

00:03:17,880 --> 00:03:21,900
kubernetes was able to you know provide

00:03:19,799 --> 00:03:24,209
you some like significant events along

00:03:21,900 --> 00:03:26,190
the user request then you don't have to

00:03:24,209 --> 00:03:27,600
learn about any communities internals

00:03:26,190 --> 00:03:29,030
that much you don't have to read it to

00:03:27,600 --> 00:03:30,209
you know the source code or

00:03:29,030 --> 00:03:31,860
documentation

00:03:30,209 --> 00:03:33,299
what do you basically can do is take

00:03:31,860 --> 00:03:36,680
take a look at your traces and

00:03:33,299 --> 00:03:36,680
understand what is going on

00:03:43,069 --> 00:03:45,129

YouTube URL: https://www.youtube.com/watch?v=N0CrLKZpLls


