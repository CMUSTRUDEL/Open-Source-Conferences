Title: Test Measure Iterate - Balancing “Good Enough” & “Perfect” (Sponsored by NS1) - Kris Beevers
Publication date: 2018-10-02
Playlist: O'Reilly Velocity Conference 2018 - New York, New York
Description: 
	In critical path services such as DNS, stability is imperative above all else. Kris Beevers will touch on the tradeoffs between risk and velocity faced by any high growth, critical path technology business.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,060 --> 00:00:08,189
hey everybody morning welcome I'm Chris

00:00:05,060 --> 00:00:11,610
Maceo it ns1 and and if you don't know

00:00:08,189 --> 00:00:14,309
ns1 well we're a provider at critical

00:00:11,610 --> 00:00:15,420
path DNS and traffic management tech and

00:00:14,309 --> 00:00:16,800
services for some of the biggest

00:00:15,420 --> 00:00:18,449
properties in the world and for the

00:00:16,800 --> 00:00:20,970
purposes of this very short talk what

00:00:18,449 --> 00:00:24,300
that means is we don't get to make big

00:00:20,970 --> 00:00:26,250
mistakes but still we need to move

00:00:24,300 --> 00:00:28,080
really quickly and developing our

00:00:26,250 --> 00:00:29,460
technology we're growing business

00:00:28,080 --> 00:00:31,470
there's evolving demands and our

00:00:29,460 --> 00:00:33,230
technology we want to solve big new

00:00:31,470 --> 00:00:35,640
problems for our customers there's a

00:00:33,230 --> 00:00:37,920
rapidly shifting threat environment you

00:00:35,640 --> 00:00:39,030
all just heard about from Loran so I'm

00:00:37,920 --> 00:00:40,890
just gonna take a couple minutes today

00:00:39,030 --> 00:00:43,079
to talk about some very basic things

00:00:40,890 --> 00:00:46,010
that we have learned over the last few

00:00:43,079 --> 00:00:47,879
years about how to keep moving fast in

00:00:46,010 --> 00:00:51,149
iterating on our technology without

00:00:47,879 --> 00:00:53,070
breaking everything I'm going to start

00:00:51,149 --> 00:00:54,660
with a very contrived example imagine

00:00:53,070 --> 00:00:58,469
you're at the red dot and you're trying

00:00:54,660 --> 00:01:00,629
to go to the yellow star and you don't

00:00:58,469 --> 00:01:03,059
have a map you don't have a compass the

00:01:00,629 --> 00:01:05,159
only thing you've got with you is a GPS

00:01:03,059 --> 00:01:06,270
unit it's kind of a crappy one so

00:01:05,159 --> 00:01:08,790
imagine a case where it's really

00:01:06,270 --> 00:01:11,159
expensive or risky for some reason to

00:01:08,790 --> 00:01:12,930
make use of your GPS unit maybe takes a

00:01:11,159 --> 00:01:14,400
lot of time to get a fix on your

00:01:12,930 --> 00:01:16,049
location or you a very limited battery

00:01:14,400 --> 00:01:17,520
life or if you stopped you long to get a

00:01:16,049 --> 00:01:19,650
fix you get eaten by a bear something

00:01:17,520 --> 00:01:20,939
like that you think you're heading in

00:01:19,650 --> 00:01:23,580
roughly the right direction and so the

00:01:20,939 --> 00:01:25,770
question then is how often can you stop

00:01:23,580 --> 00:01:28,650
and check your GPS location if you go

00:01:25,770 --> 00:01:31,890
too far in the wrong direction it's

00:01:28,650 --> 00:01:33,390
costly to make a course correction so

00:01:31,890 --> 00:01:35,009
now you need to think about how do you

00:01:33,390 --> 00:01:37,290
balance the cost and the risk of using

00:01:35,009 --> 00:01:42,060
your GPS with making progress in the

00:01:37,290 --> 00:01:43,740
direction you're headed so with an

00:01:42,060 --> 00:01:45,780
expensive to use GPS you'll go quite a

00:01:43,740 --> 00:01:47,280
ways before you realize that you do need

00:01:45,780 --> 00:01:49,290
to make a course correction we're headed

00:01:47,280 --> 00:01:52,200
in exactly the right direction and

00:01:49,290 --> 00:01:54,240
you'll probably over correct or under

00:01:52,200 --> 00:01:55,740
correct this will repeat for a while

00:01:54,240 --> 00:01:57,210
eventually get to where you're going but

00:01:55,740 --> 00:01:59,369
this is a pretty inefficient way to get

00:01:57,210 --> 00:02:01,409
there because of the cost and the risk

00:01:59,369 --> 00:02:04,890
of making use your GPS so what if using

00:02:01,409 --> 00:02:07,170
your GPS was cheaper or less risky well

00:02:04,890 --> 00:02:09,179
you'd probably use it more frequently

00:02:07,170 --> 00:02:10,530
you'd probably follow a slightly more

00:02:09,179 --> 00:02:12,750
efficient path to your goal and this is

00:02:10,530 --> 00:02:15,930
a super contrived example

00:02:12,750 --> 00:02:17,550
in our world I think of the analogy of

00:02:15,930 --> 00:02:19,140
like using your GPS is sort of like

00:02:17,550 --> 00:02:21,570
shipping a new iteration of your product

00:02:19,140 --> 00:02:25,200
or a new release of a big component or

00:02:21,570 --> 00:02:27,510
service in your system the direction you

00:02:25,200 --> 00:02:29,430
are headed or your plan needs to be

00:02:27,510 --> 00:02:31,440
tested against the real world often

00:02:29,430 --> 00:02:33,959
enough this is a basic idea we've all

00:02:31,440 --> 00:02:35,340
heard a thousand times about product

00:02:33,959 --> 00:02:38,190
iteration to find what we call product

00:02:35,340 --> 00:02:39,330
market fit in other words you don't want

00:02:38,190 --> 00:02:40,800
to build build build build build without

00:02:39,330 --> 00:02:43,830
creating some kind of a real-world

00:02:40,800 --> 00:02:45,630
feedback loop for your technology if you

00:02:43,830 --> 00:02:47,340
do then by the time you put your product

00:02:45,630 --> 00:02:49,410
in the market you'll need to make some

00:02:47,340 --> 00:02:51,360
huge investment to course-correct

00:02:49,410 --> 00:02:53,640
because your plan probably wasn't right

00:02:51,360 --> 00:02:56,220
from the start and product iterations at

00:02:53,640 --> 00:02:57,360
the core most successful companies but

00:02:56,220 --> 00:02:59,790
we don't often think about product

00:02:57,360 --> 00:03:02,430
iteration as a tool for risk management

00:02:59,790 --> 00:03:04,320
or introducing safety into our systems

00:03:02,430 --> 00:03:06,540
one things we found it honest one is

00:03:04,320 --> 00:03:10,890
that rapid iteration is a powerful tool

00:03:06,540 --> 00:03:12,150
for managing risk okay so so iteration

00:03:10,890 --> 00:03:14,280
is about more than just finding product

00:03:12,150 --> 00:03:15,959
market fit the way we think about this

00:03:14,280 --> 00:03:18,600
is that more granular iteration of our

00:03:15,959 --> 00:03:19,950
technology reduces the scope of the

00:03:18,600 --> 00:03:22,290
potential failures that we are

00:03:19,950 --> 00:03:24,239
introducing before we find those

00:03:22,290 --> 00:03:25,470
failures or uncover them in other words

00:03:24,239 --> 00:03:27,180
the quicker your code hits the real

00:03:25,470 --> 00:03:28,739
world the faster you find the issues and

00:03:27,180 --> 00:03:34,440
the fewer issues pile up and between

00:03:28,739 --> 00:03:36,180
each discovery okay so one of the most

00:03:34,440 --> 00:03:37,739
important lessons we've learned is to

00:03:36,180 --> 00:03:39,360
build our technology iteratively and to

00:03:37,739 --> 00:03:41,280
do that it becomes critical to make

00:03:39,360 --> 00:03:43,220
rapid iteration cheap to reduce the

00:03:41,280 --> 00:03:45,630
costs and the risks of using our GPS

00:03:43,220 --> 00:03:47,130
none of this is a surprise there's a lot

00:03:45,630 --> 00:03:49,709
of straightforward ways that we can

00:03:47,130 --> 00:03:51,780
invest that enable us to move faster and

00:03:49,709 --> 00:03:53,730
break fewer things in our own big

00:03:51,780 --> 00:03:55,709
distributed systems at ns1 we found that

00:03:53,730 --> 00:03:58,320
things like gradual rollouts of our code

00:03:55,709 --> 00:04:00,060
across our big global network or well

00:03:58,320 --> 00:04:02,549
considered functional and integration

00:04:00,060 --> 00:04:04,049
testing suite sortie testing or really

00:04:02,549 --> 00:04:06,150
understanding that understanding the

00:04:04,049 --> 00:04:08,250
narrowest possible sets of KPIs that we

00:04:06,150 --> 00:04:10,620
should be observing for anomalies and

00:04:08,250 --> 00:04:12,120
alerting upon those are all simple

00:04:10,620 --> 00:04:15,690
investments that we can make to be able

00:04:12,120 --> 00:04:17,250
to iterate more quickly safely one

00:04:15,690 --> 00:04:19,320
interesting thing that we think about is

00:04:17,250 --> 00:04:21,180
how do we decide how to make investments

00:04:19,320 --> 00:04:23,729
in those different areas there's always

00:04:21,180 --> 00:04:25,380
more tests to write there's always more

00:04:23,729 --> 00:04:26,520
metrics for us to gather more automation

00:04:25,380 --> 00:04:28,979
for us to build

00:04:26,520 --> 00:04:30,840
see I CD so sort of obviously we need to

00:04:28,979 --> 00:04:33,050
focus our risk management efforts and

00:04:30,840 --> 00:04:35,370
investments where they matter the most a

00:04:33,050 --> 00:04:38,220
tennis one one of the ways that we think

00:04:35,370 --> 00:04:39,720
about this is by looking at a couple

00:04:38,220 --> 00:04:42,449
factors across their systems and

00:04:39,720 --> 00:04:44,729
services first what does it cost us if a

00:04:42,449 --> 00:04:46,530
component fails what does it cost our

00:04:44,729 --> 00:04:48,270
business in terms of SLA credits or

00:04:46,530 --> 00:04:50,669
goodwill or reputation or operational

00:04:48,270 --> 00:04:53,550
overhead and on and on and also how

00:04:50,669 --> 00:04:55,650
quickly is each component in our system

00:04:53,550 --> 00:04:57,750
changing how rapidly we're developing on

00:04:55,650 --> 00:04:59,610
it and it turns out that the cross

00:04:57,750 --> 00:05:01,500
product of these two factors cost of

00:04:59,610 --> 00:05:04,080
failure and change velocity informs

00:05:01,500 --> 00:05:06,389
where we should invest and testing and

00:05:04,080 --> 00:05:08,419
observability and otherwise mitigating

00:05:06,389 --> 00:05:12,000
risk so that we can iterate faster

00:05:08,419 --> 00:05:13,409
here's a really simple illustration of a

00:05:12,000 --> 00:05:15,630
system with a few components different

00:05:13,409 --> 00:05:17,819
columns in these charts here the second

00:05:15,630 --> 00:05:20,039
component the teal one is one that we

00:05:17,819 --> 00:05:21,630
really do not want to fail it's a high

00:05:20,039 --> 00:05:24,449
cost of failure maybe it's something

00:05:21,630 --> 00:05:27,360
like for us a 10s one our DNS systems or

00:05:24,449 --> 00:05:29,009
software and you see it may not change

00:05:27,360 --> 00:05:30,330
quite as quickly as some of the other

00:05:29,009 --> 00:05:31,800
components in the system but it's not

00:05:30,330 --> 00:05:33,360
like it's standing still or stagnant

00:05:31,800 --> 00:05:35,430
either and so when you take the cross

00:05:33,360 --> 00:05:37,289
product of these things we find that

00:05:35,430 --> 00:05:39,000
it's super important in that particular

00:05:37,289 --> 00:05:41,070
component to invest really aggressively

00:05:39,000 --> 00:05:43,229
and functional testing and monitoring

00:05:41,070 --> 00:05:45,449
and alerting and other risk mitigations

00:05:43,229 --> 00:05:48,840
in that particular area this is a pretty

00:05:45,449 --> 00:05:50,669
intuitive idea but for us if you think

00:05:48,840 --> 00:05:52,740
about it well it might suck if you can't

00:05:50,669 --> 00:05:56,280
for example go sign up for a new account

00:05:52,740 --> 00:05:58,139
in our systems that's a pretty low risk

00:05:56,280 --> 00:06:01,440
piece of our platform compared to what

00:05:58,139 --> 00:06:03,360
happens if our DNS systems fail and if

00:06:01,440 --> 00:06:04,979
that happens I end up not getting to

00:06:03,360 --> 00:06:07,080
hang out with all of you and and and

00:06:04,979 --> 00:06:08,880
having to go explain myself on CNBC and

00:06:07,080 --> 00:06:12,569
you know knock on wood that hasn't had

00:06:08,880 --> 00:06:16,259
to happen yet so just recapping two big

00:06:12,569 --> 00:06:17,969
takeaways first rapid iteration on

00:06:16,259 --> 00:06:20,090
technologies a way to manage risk not

00:06:17,969 --> 00:06:23,460
just to find product market fit and

00:06:20,090 --> 00:06:25,409
second making investments in de-risking

00:06:23,460 --> 00:06:28,020
that faster iteration for a component or

00:06:25,409 --> 00:06:31,280
a system should really align with the

00:06:28,020 --> 00:06:34,620
quantity of the risk around a component

00:06:31,280 --> 00:06:36,539
if any of this is interesting to you we

00:06:34,620 --> 00:06:38,430
went through it super quickly these guys

00:06:36,539 --> 00:06:40,080
Shannon and James from our team will be

00:06:38,430 --> 00:06:41,849
talking about how we rebuilt

00:06:40,080 --> 00:06:44,460
the highest risk piece of our platform

00:06:41,849 --> 00:06:47,250
our DNS server from scratch tomorrow

00:06:44,460 --> 00:06:49,259
here at velocities ago see how some of

00:06:47,250 --> 00:06:51,659
these ideas get applied in practice in a

00:06:49,259 --> 00:06:53,490
in a real mission-critical way and

00:06:51,659 --> 00:06:57,839
that's it thanks everybody

00:06:53,490 --> 00:06:57,839
[Applause]

00:07:02,689 --> 00:07:04,749

YouTube URL: https://www.youtube.com/watch?v=yPaHT8qHh70


