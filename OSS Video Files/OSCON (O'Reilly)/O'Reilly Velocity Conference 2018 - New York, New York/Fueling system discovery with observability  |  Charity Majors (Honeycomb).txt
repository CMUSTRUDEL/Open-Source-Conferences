Title: Fueling system discovery with observability  |  Charity Majors (Honeycomb)
Publication date: 2018-10-08
Playlist: O'Reilly Velocity Conference 2018 - New York, New York
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,000 --> 00:00:03,629
I'm Roger megalith here at velocity New

00:00:02,340 --> 00:00:05,940
York 2018

00:00:03,629 --> 00:00:08,160
I'm here with charity majors the CEO and

00:00:05,940 --> 00:00:11,519
founder of honeycomb welcome thank you

00:00:08,160 --> 00:00:13,019
so my first question is observability

00:00:11,519 --> 00:00:15,719
and how does that relate to monitoring

00:00:13,019 --> 00:00:19,830
that's a great question I think of it as

00:00:15,719 --> 00:00:21,600
the second coming Wow great answer the

00:00:19,830 --> 00:00:23,369
monitoring is something that you know

00:00:21,600 --> 00:00:26,310
I'm an ops engineer I've been an

00:00:23,369 --> 00:00:28,349
operation stepping on causes of 17 in

00:00:26,310 --> 00:00:30,449
monitoring we have like 20 history 20

00:00:28,349 --> 00:00:32,189
years of rich history of how to monitor

00:00:30,449 --> 00:00:33,649
systems you know it's one piece of

00:00:32,189 --> 00:00:35,190
software sitting here hanging out

00:00:33,649 --> 00:00:37,200
looking at another piece of software

00:00:35,190 --> 00:00:38,600
just checking it Mike how's it going all

00:00:37,200 --> 00:00:42,870
the time

00:00:38,600 --> 00:00:44,399
observability is has a lot of best

00:00:42,870 --> 00:00:46,500
practices that are diametrically opposed

00:00:44,399 --> 00:00:48,920
even though the goal is the same which

00:00:46,500 --> 00:00:51,690
is reliable understandable software

00:00:48,920 --> 00:00:53,670
observability is much more about getting

00:00:51,690 --> 00:00:55,260
inside the software's heads and making

00:00:53,670 --> 00:01:00,030
it explain itself back to you so it's a

00:00:55,260 --> 00:01:02,820
perspective shift it's also composed of

00:01:00,030 --> 00:01:04,799
a different level of primitives and by

00:01:02,820 --> 00:01:06,299
that I mean with monitoring you kind of

00:01:04,799 --> 00:01:07,260
have to predict in advance what

00:01:06,299 --> 00:01:09,060
questions you're going to want to ask

00:01:07,260 --> 00:01:11,130
when you ask them a lot what's your

00:01:09,060 --> 00:01:12,840
status with observability you're

00:01:11,130 --> 00:01:15,750
gathering the details that let you ask

00:01:12,840 --> 00:01:16,530
any question whether you could predict

00:01:15,750 --> 00:01:19,290
them or not

00:01:16,530 --> 00:01:20,880
which is important because our systems

00:01:19,290 --> 00:01:23,369
are becoming less a collection of known

00:01:20,880 --> 00:01:24,650
unknowns and more a bunch of unknown

00:01:23,369 --> 00:01:26,670
unknowns that we couldn't have predicted

00:01:24,650 --> 00:01:29,220
well that brings up the next question

00:01:26,670 --> 00:01:32,159
rum how complicated modern systems are

00:01:29,220 --> 00:01:36,560
and how does observe the observability

00:01:32,159 --> 00:01:36,560
help you manage only if you want

00:01:37,369 --> 00:01:42,540
observability helps you because like I

00:01:39,840 --> 00:01:43,829
said with unknown unknowns which is

00:01:42,540 --> 00:01:45,509
really what you get with distributed

00:01:43,829 --> 00:01:47,430
systems is this infinitely long tail of

00:01:45,509 --> 00:01:49,799
things that almost never happened so at

00:01:47,430 --> 00:01:51,780
that one time they do write or it's an

00:01:49,799 --> 00:01:53,970
intersection of five impossible events

00:01:51,780 --> 00:01:56,509
at once right which happens one in a

00:01:53,970 --> 00:01:59,040
billion times which is a lot actually

00:01:56,509 --> 00:02:00,509
and observability helps you because if

00:01:59,040 --> 00:02:03,990
you've got other to detail at the right

00:02:00,509 --> 00:02:06,060
level you're equipped to explore like

00:02:03,990 --> 00:02:06,530
it's it's less answering questions in

00:02:06,060 --> 00:02:08,630
fact in

00:02:06,530 --> 00:02:10,670
or it's a matter of exploring their

00:02:08,630 --> 00:02:12,470
systems monitoring is very much biased

00:02:10,670 --> 00:02:14,830
towards alerts towards actionable alerts

00:02:12,470 --> 00:02:17,030
every alert must have an action right

00:02:14,830 --> 00:02:19,490
observability is about questions that

00:02:17,030 --> 00:02:21,140
may or may not be problems to write

00:02:19,490 --> 00:02:24,140
observability is about how you decide

00:02:21,140 --> 00:02:25,850
what to build is it is it worth building

00:02:24,140 --> 00:02:28,040
this how many efficiency gains will I

00:02:25,850 --> 00:02:30,230
reap and then about ensuring the entire

00:02:28,040 --> 00:02:31,280
pipeline in the process of shipping that

00:02:30,230 --> 00:02:33,650
software so that you can check yourself

00:02:31,280 --> 00:02:36,530
at every interval does it look right is

00:02:33,650 --> 00:02:38,090
there anything weird going on right you

00:02:36,530 --> 00:02:41,780
know if you're familiar with the famous

00:02:38,090 --> 00:02:43,850
statistician to key John Tukey he really

00:02:41,780 --> 00:02:47,570
folks as an exploration as an important

00:02:43,850 --> 00:02:48,530
topic so yes and that's really what

00:02:47,570 --> 00:02:51,050
matters the most

00:02:48,530 --> 00:02:53,120
so in your case how do events and

00:02:51,050 --> 00:02:56,840
tracing work to help improve

00:02:53,120 --> 00:02:59,330
observability yeah another question well

00:02:56,840 --> 00:03:01,880
I feel like tracing and an events are

00:02:59,330 --> 00:03:02,239
kind of there are two sides of the same

00:03:01,880 --> 00:03:03,890
coin

00:03:02,239 --> 00:03:05,810
you know we've built the monitoring

00:03:03,890 --> 00:03:07,819
house on a cast it's been built out of

00:03:05,810 --> 00:03:09,500
brains of sand that are metrics right

00:03:07,819 --> 00:03:11,120
and the metrics are there's weird little

00:03:09,500 --> 00:03:13,430
data type where you've stripped away all

00:03:11,120 --> 00:03:15,049
the context of what's happening and

00:03:13,430 --> 00:03:16,640
you've added a few back in his tags but

00:03:15,049 --> 00:03:20,239
it's really just this one number right

00:03:16,640 --> 00:03:21,920
and that's not very powerful because

00:03:20,239 --> 00:03:23,329
they're all disconnected this is why we

00:03:21,920 --> 00:03:25,130
all have eight different tools we're

00:03:23,329 --> 00:03:26,690
like trying to match you know what

00:03:25,130 --> 00:03:27,650
happened because this spike you know and

00:03:26,690 --> 00:03:29,930
this tool over here though let's just

00:03:27,650 --> 00:03:31,459
dig into it that's really inefficient

00:03:29,930 --> 00:03:33,470
and effective and in fact if you

00:03:31,459 --> 00:03:35,269
structure your data as a wide structured

00:03:33,470 --> 00:03:36,560
event then you're packing all that

00:03:35,269 --> 00:03:37,910
context together saying all these things

00:03:36,560 --> 00:03:39,170
happen at once all these things were

00:03:37,910 --> 00:03:41,090
true at once you can always derive

00:03:39,170 --> 00:03:43,370
metrics from events you can never direct

00:03:41,090 --> 00:03:45,200
arrive events from the metrics and

00:03:43,370 --> 00:03:46,880
that's important because tracing has

00:03:45,200 --> 00:03:48,820
become a really big deal lately because

00:03:46,880 --> 00:03:51,290
tracing is a way of visualizing data

00:03:48,820 --> 00:03:53,269
like a waterfall instead of like you

00:03:51,290 --> 00:03:55,190
know we think of it as as a horizontal

00:03:53,269 --> 00:03:57,980
offense versus you know vertical events

00:03:55,190 --> 00:03:59,180
in vertical insert our traces and people

00:03:57,980 --> 00:04:00,560
have been building these products that

00:03:59,180 --> 00:04:02,660
that's put them out into different tools

00:04:00,560 --> 00:04:03,739
but doesn't help with to a proliferation

00:04:02,660 --> 00:04:05,720
at all

00:04:03,739 --> 00:04:07,880
it's now I have another problem right

00:04:05,720 --> 00:04:09,350
they should just be patient just have

00:04:07,880 --> 00:04:10,800
one event from which you can derive all

00:04:09,350 --> 00:04:13,950
these sources of truth including

00:04:10,800 --> 00:04:15,570
because traces help you visualize where

00:04:13,950 --> 00:04:16,830
in the system your problem is and if

00:04:15,570 --> 00:04:18,510
you've knit them together into one

00:04:16,830 --> 00:04:20,790
system you can do this really powerful

00:04:18,510 --> 00:04:22,260
thing which is all your slicing guys and

00:04:20,790 --> 00:04:24,000
your exploring trying to find where the

00:04:22,260 --> 00:04:25,950
problem is oh you thought you found it

00:04:24,000 --> 00:04:27,870
it's not an example of it cool trace it

00:04:25,950 --> 00:04:29,400
right and then once you've traced it you

00:04:27,870 --> 00:04:31,830
found where and the trace the problem is

00:04:29,400 --> 00:04:33,810
zoom back out and say what other of it

00:04:31,830 --> 00:04:35,310
who else is affected by this being able

00:04:33,810 --> 00:04:38,160
to flip back and forth like that is

00:04:35,310 --> 00:04:41,010
transformative for engineers okay so the

00:04:38,160 --> 00:04:43,920
notion of software ownership and what is

00:04:41,010 --> 00:04:45,660
the sense of business value around so

00:04:43,920 --> 00:04:47,550
the software ownership to me I thought

00:04:45,660 --> 00:04:49,950
about this a lot and I think you

00:04:47,550 --> 00:04:51,660
couldn't boil it down to the same

00:04:49,950 --> 00:04:54,120
engineer has the ability and the power

00:04:51,660 --> 00:04:56,010
to write the code deploy the code and

00:04:54,120 --> 00:04:57,780
roll back the code and debug the code in

00:04:56,010 --> 00:04:59,130
production if you're missing any one of

00:04:57,780 --> 00:05:01,050
those three elements you don't have

00:04:59,130 --> 00:05:02,840
software ownership it's important

00:05:01,050 --> 00:05:05,700
because it creates this really tight

00:05:02,840 --> 00:05:07,890
virtuous feedback loop this wonderful

00:05:05,700 --> 00:05:10,290
cycle of the people who who have the

00:05:07,890 --> 00:05:11,940
most context are looking at the problem

00:05:10,290 --> 00:05:13,530
and there are empowered to fix the

00:05:11,940 --> 00:05:14,880
problem and then there are power to

00:05:13,530 --> 00:05:16,620
build more things that that are better

00:05:14,880 --> 00:05:17,970
right and I feel like this is what we

00:05:16,620 --> 00:05:19,770
had in there in the beginning

00:05:17,970 --> 00:05:21,090
back in the beginning of software you

00:05:19,770 --> 00:05:22,350
know you had the state person writing

00:05:21,090 --> 00:05:24,270
the code the person consuming the code

00:05:22,350 --> 00:05:26,070
were locked together and this very tight

00:05:24,270 --> 00:05:27,660
you know feedback loop and and because

00:05:26,070 --> 00:05:28,830
he's got so much more complex we've

00:05:27,660 --> 00:05:30,660
separated open all these different roles

00:05:28,830 --> 00:05:32,760
this build pipeline and everything which

00:05:30,660 --> 00:05:34,620
has been good for scaling but has been

00:05:32,760 --> 00:05:36,480
bad for ownership is bad for

00:05:34,620 --> 00:05:37,950
accountability has been bad because if

00:05:36,480 --> 00:05:39,240
you have a different set of people who

00:05:37,950 --> 00:05:41,160
are looking at the problems and trying

00:05:39,240 --> 00:05:43,590
to understand them and explain them then

00:05:41,160 --> 00:05:45,060
you do who created the problems you're

00:05:43,590 --> 00:05:46,980
just gonna have a really long time to

00:05:45,060 --> 00:05:48,900
recovery mm-hmm this sounds like kind of

00:05:46,980 --> 00:05:50,400
a microservices architecture actually oh

00:05:48,900 --> 00:05:52,710
right that's the tipping point right

00:05:50,400 --> 00:05:55,110
makes that even more we're talking about

00:05:52,710 --> 00:05:56,370
complex systems right and like so for so

00:05:55,110 --> 00:05:57,660
many people this is a tipping point

00:05:56,370 --> 00:05:59,370
where there are old tools their own

00:05:57,660 --> 00:06:01,290
processes their old processes just no

00:05:59,370 --> 00:06:02,669
longer work anymore you know and they

00:06:01,290 --> 00:06:04,650
start throwing bodies at the problem

00:06:02,669 --> 00:06:06,180
because it just did like we've we've

00:06:04,650 --> 00:06:08,850
built software for the past 20 years

00:06:06,180 --> 00:06:10,410
through this process of you build a

00:06:08,850 --> 00:06:12,120
system you look at it you try and

00:06:10,410 --> 00:06:13,169
predict how it's gonna fail you write a

00:06:12,120 --> 00:06:15,570
bunch of monitoring checks and you

00:06:13,169 --> 00:06:18,360
monitor for it but like that only works

00:06:15,570 --> 00:06:18,630
when you can obsess Amole fails and

00:06:18,360 --> 00:06:21,240
pretty

00:06:18,630 --> 00:06:22,920
always right so I've heard you say that

00:06:21,240 --> 00:06:24,600
there's no such thing as a system that's

00:06:22,920 --> 00:06:27,090
not fail oh yeah well that doesn't sound

00:06:24,600 --> 00:06:30,780
very optimistic I think it's true very

00:06:27,090 --> 00:06:32,640
sunny you know what do you mean by that

00:06:30,780 --> 00:06:34,230
I mean I think you're absolutely right

00:06:32,640 --> 00:06:35,760
if you have a dashboard full of green

00:06:34,230 --> 00:06:36,720
you know everything's fine all it means

00:06:35,760 --> 00:06:38,760
is that your tools aren't good enough

00:06:36,720 --> 00:06:40,770
right or it means that you didn't

00:06:38,760 --> 00:06:44,670
predict the failures and so you're not

00:06:40,770 --> 00:06:46,670
catching them we live our lives at aging

00:06:44,670 --> 00:06:50,010
right our body is failing all the time

00:06:46,670 --> 00:06:51,720
so are our systems they're this constant

00:06:50,010 --> 00:06:53,160
state of graceful degradation we hope

00:06:51,720 --> 00:06:54,660
that's the optimal case right

00:06:53,160 --> 00:06:56,700
the pessimal case is something who's

00:06:54,660 --> 00:06:58,200
feeling really hard right now if I had

00:06:56,700 --> 00:07:01,470
cancer in my eye and it's gonna fall out

00:06:58,200 --> 00:07:03,480
and month the optimistic case is that

00:07:01,470 --> 00:07:06,390
I'm gonna lows and I'm a slow decline

00:07:03,480 --> 00:07:08,520
right and I find just as we shouldn't

00:07:06,390 --> 00:07:10,530
paralyzed by that in life we shouldn't

00:07:08,520 --> 00:07:12,840
be paralyzed by that in our systems we

00:07:10,530 --> 00:07:14,190
should embrace this we should develop a

00:07:12,840 --> 00:07:16,320
sense of humor about it we should

00:07:14,190 --> 00:07:18,390
instead of building instead of focusing

00:07:16,320 --> 00:07:19,860
all of our engineering energy on this

00:07:18,390 --> 00:07:22,620
idea our systems can be up and running

00:07:19,860 --> 00:07:25,230
and perfect we should take some of that

00:07:22,620 --> 00:07:27,060
energy and devote it to handling

00:07:25,230 --> 00:07:29,330
graceful failure embracing it learning

00:07:27,060 --> 00:07:31,380
from it detecting it more sooner

00:07:29,330 --> 00:07:33,570
understanding what school failures we

00:07:31,380 --> 00:07:35,160
can live with and you know keeping an

00:07:33,570 --> 00:07:37,590
eye on them so that if it does misstep

00:07:35,160 --> 00:07:40,770
metastasize or whatever we catch it

00:07:37,590 --> 00:07:42,990
quickly I feel like for most of our

00:07:40,770 --> 00:07:45,150
history in the industry we have cloned

00:07:42,990 --> 00:07:47,460
to this idea of uptime this is it right

00:07:45,150 --> 00:07:48,870
so we build these staging environments

00:07:47,460 --> 00:07:52,830
where we can ship code first and flush

00:07:48,870 --> 00:07:54,240
out all the bugs doesn't work but but

00:07:52,830 --> 00:07:57,600
we're but we're sending all of that

00:07:54,240 --> 00:07:59,190
energy to to this staging area which is

00:07:57,600 --> 00:08:02,100
never going to be the same as production

00:07:59,190 --> 00:08:04,020
it's actually impossible instead like

00:08:02,100 --> 00:08:05,940
taking over very limited engineering

00:08:04,020 --> 00:08:08,400
cycles and moving them over to building

00:08:05,940 --> 00:08:10,590
guardrails to make the sister system

00:08:08,400 --> 00:08:11,940
easier to operate to democratizing

00:08:10,590 --> 00:08:14,010
access to the system to making it so

00:08:11,940 --> 00:08:15,780
that every engineer knows how to deploy

00:08:14,010 --> 00:08:16,620
code and get the system back to a known

00:08:15,780 --> 00:08:19,800
good state

00:08:16,620 --> 00:08:22,230
before raising the flag for help making

00:08:19,800 --> 00:08:24,540
it like deployed systems deployed truly

00:08:22,230 --> 00:08:25,710
is like the most under invested part of

00:08:24,540 --> 00:08:26,820
all software engineering for every

00:08:25,710 --> 00:08:28,820
company I've ever seen

00:08:26,820 --> 00:08:31,170
like and that makes no sense because

00:08:28,820 --> 00:08:32,850
where do most problems start it's well

00:08:31,170 --> 00:08:35,460
we need when we inject change into a

00:08:32,850 --> 00:08:37,320
system right and yet we're all still

00:08:35,460 --> 00:08:37,860
using these shitty like Capistrano

00:08:37,320 --> 00:08:39,450
scripts

00:08:37,860 --> 00:08:41,220
you know we should be investing real

00:08:39,450 --> 00:08:43,350
engineering cycles into understanding

00:08:41,220 --> 00:08:47,100
that our appetite for risk as a company

00:08:43,350 --> 00:08:48,630
are you know to what we learned from the

00:08:47,100 --> 00:08:51,510
DevOps the Douro report was that

00:08:48,630 --> 00:08:54,690
velocity and and lack of errors are not

00:08:51,510 --> 00:08:56,700
opposing they they reinforce each other

00:08:54,690 --> 00:08:58,920
the faster you are at a few problems you

00:08:56,700 --> 00:09:01,050
have and so we should be spending our

00:08:58,920 --> 00:09:03,330
engineering cycles not just second tier

00:09:01,050 --> 00:09:04,740
but like put your best engineer on your

00:09:03,330 --> 00:09:06,540
deploy problems for a while

00:09:04,740 --> 00:09:08,400
builds in software you can be proud of

00:09:06,540 --> 00:09:10,860
open-source it so that it gets more eyes

00:09:08,400 --> 00:09:12,900
on it invest in observability for every

00:09:10,860 --> 00:09:15,270
you know from the minute that you write

00:09:12,900 --> 00:09:16,620
code and you commit it until it's

00:09:15,270 --> 00:09:18,840
decommissioned you should be able to

00:09:16,620 --> 00:09:21,270
understand it and explain anything that

00:09:18,840 --> 00:09:24,870
happens when that code meets real users

00:09:21,270 --> 00:09:26,580
real production data real networks real

00:09:24,870 --> 00:09:28,770
other services because there's no

00:09:26,580 --> 00:09:31,020
substitute well it's a really

00:09:28,770 --> 00:09:32,160
interesting perspective whole that

00:09:31,020 --> 00:09:34,200
sounds like a very polite way of saying

00:09:32,160 --> 00:09:36,300
oh my god that sounds it's terrifying

00:09:34,200 --> 00:09:38,970
this is the opposite it was an

00:09:36,300 --> 00:09:41,340
interesting perspective on this whole

00:09:38,970 --> 00:09:43,230
issue of taking care of systems I think

00:09:41,340 --> 00:09:46,970
a more realistic one than most people

00:09:43,230 --> 00:09:46,970

YouTube URL: https://www.youtube.com/watch?v=M2IHEmObc2k


