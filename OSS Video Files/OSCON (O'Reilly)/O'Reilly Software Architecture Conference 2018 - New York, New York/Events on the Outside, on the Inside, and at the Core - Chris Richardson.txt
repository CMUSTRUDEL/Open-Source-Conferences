Title: Events on the Outside, on the Inside, and at the Core - Chris Richardson
Publication date: 2018-02-28
Playlist: O'Reilly Software Architecture Conference 2018 - New York, New York
Description: 
	Join us in person at the O'Reilly Software Architecture Conference to learn the tools, techniques, and leadership skills needed in the evolving discipline of software architecture. Learn more: https://oreil.ly/2NNTQQK

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,000 --> 00:00:05,279
first let's just talk about events on

00:00:02,370 --> 00:00:07,589
the outside events is a mechanism that

00:00:05,279 --> 00:00:10,260
enables separate applications to

00:00:07,589 --> 00:00:11,570
collaborate so for imagine you know

00:00:10,260 --> 00:00:15,540
you're working on an e-commerce

00:00:11,570 --> 00:00:18,090
application it could emit various events

00:00:15,540 --> 00:00:21,000
like the order was created the Ottawa

00:00:18,090 --> 00:00:23,760
ship these events represent state

00:00:21,000 --> 00:00:26,550
changes yes you know there's a business

00:00:23,760 --> 00:00:29,099
object that has either been created or

00:00:26,550 --> 00:00:31,830
has had it stayed updated there were

00:00:29,099 --> 00:00:35,010
also events that occur due to the

00:00:31,830 --> 00:00:37,920
passing of time an invoice was not paid

00:00:35,010 --> 00:00:40,649
by its due date so it has become overdue

00:00:37,920 --> 00:00:42,510
so that's another trigger for events so

00:00:40,649 --> 00:00:45,510
you have this idea that an application

00:00:42,510 --> 00:00:47,910
is just emitting these events because of

00:00:45,510 --> 00:00:51,270
state changes or the passage of time and

00:00:47,910 --> 00:00:53,460
then other applications can consume them

00:00:51,270 --> 00:00:55,980
so if you think about an order created

00:00:53,460 --> 00:00:58,680
event that could just be consumed by

00:00:55,980 --> 00:01:01,649
what a notification application that

00:00:58,680 --> 00:01:05,580
send some form of notification to a user

00:01:01,649 --> 00:01:08,250
text message email mobile notification

00:01:05,580 --> 00:01:11,189
and so on the events could also be

00:01:08,250 --> 00:01:13,500
consumed by a separate application so an

00:01:11,189 --> 00:01:15,930
order created event could be consumed by

00:01:13,500 --> 00:01:18,299
the fulfillment application that's

00:01:15,930 --> 00:01:20,130
responsible for actually putting

00:01:18,299 --> 00:01:22,610
together the physical order and then

00:01:20,130 --> 00:01:25,860
causing it to be shipped to the customer

00:01:22,610 --> 00:01:28,790
events could also be consumed by a

00:01:25,860 --> 00:01:31,560
monitoring system a great way of

00:01:28,790 --> 00:01:34,799
figuring out whether your application is

00:01:31,560 --> 00:01:36,900
working correctly is by analyzing the

00:01:34,799 --> 00:01:39,299
stream of a business events that are

00:01:36,900 --> 00:01:42,060
coming out of it and making sure that

00:01:39,299 --> 00:01:44,670
the pattern of events is normal if you

00:01:42,060 --> 00:01:47,460
see us unexpected drop-off in order

00:01:44,670 --> 00:01:49,470
created events well maybe that's worthy

00:01:47,460 --> 00:01:51,450
of investigation maybe there's something

00:01:49,470 --> 00:01:54,299
preventing users from actually

00:01:51,450 --> 00:01:57,600
completing the checkout process perhaps

00:01:54,299 --> 00:02:02,340
the checkout button was became invisible

00:01:57,600 --> 00:02:03,750
because of a CSS error for example so

00:02:02,340 --> 00:02:05,490
anyway so that that's events

00:02:03,750 --> 00:02:08,250
applications omit them

00:02:05,490 --> 00:02:10,319
other applications consume them so it's

00:02:08,250 --> 00:02:11,630
a way of enabling applications to

00:02:10,319 --> 00:02:13,850
collaborate

00:02:11,630 --> 00:02:16,310
and what's interesting about this is

00:02:13,850 --> 00:02:19,550
that it implements the open-closed

00:02:16,310 --> 00:02:21,950
principle for at for applications so

00:02:19,550 --> 00:02:24,410
it's a way of extending an application

00:02:21,950 --> 00:02:26,300
without actually modifying it so

00:02:24,410 --> 00:02:28,520
something to think about when you're you

00:02:26,300 --> 00:02:31,370
know today we're creating applications

00:02:28,520 --> 00:02:33,500
that will become legacy a few years from

00:02:31,370 --> 00:02:35,990
now so if you haven't out if you write

00:02:33,500 --> 00:02:38,570
your application to emit a stream of

00:02:35,990 --> 00:02:41,330
events it makes it possible for future

00:02:38,570 --> 00:02:45,670
developers to implement new features by

00:02:41,330 --> 00:02:45,670
consuming that event stream

00:02:51,370 --> 00:02:53,430

YouTube URL: https://www.youtube.com/watch?v=S4PgeMgu7X0


