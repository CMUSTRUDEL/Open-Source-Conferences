Title: Turning Request-response on its Head - Cornelia Davis (Pivotal)
Publication date: 2018-02-27
Playlist: O'Reilly Software Architecture Conference 2018 - New York, New York
Description: 
	Join us in person at the O'Reilly Software Architecture Conference to learn the tools, techniques, and leadership skills needed in the evolving discipline of software architecture. Learn more: https://oreil.ly/2NNTQQK

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,000 --> 00:00:07,770
I say that the at the core of the

00:00:05,040 --> 00:00:09,929
functional programming model for our

00:00:07,770 --> 00:00:12,990
distributed systems are events and

00:00:09,929 --> 00:00:16,400
functions and let's see what the

00:00:12,990 --> 00:00:19,410
patterns are around events and functions

00:00:16,400 --> 00:00:22,230
now remember looking first at the

00:00:19,410 --> 00:00:25,289
network being unreliable what we've done

00:00:22,230 --> 00:00:27,660
in the past was we used retries just

00:00:25,289 --> 00:00:31,820
talked about those but instead of

00:00:27,660 --> 00:00:37,010
retries what if we use events and

00:00:31,820 --> 00:00:39,390
promises now this the work on promises I

00:00:37,010 --> 00:00:42,450
did a little bit of research to look

00:00:39,390 --> 00:00:44,040
back at the history of promises a couple

00:00:42,450 --> 00:00:46,230
of months ago I was looking at this and

00:00:44,040 --> 00:00:48,600
ironically I found that it was my

00:00:46,230 --> 00:00:50,460
actually my advisor at Indiana

00:00:48,600 --> 00:00:53,399
University that wrote the first paper on

00:00:50,460 --> 00:00:56,730
promises that stan Freedman studied

00:00:53,399 --> 00:00:59,789
programming languages at IU for a long

00:00:56,730 --> 00:01:01,109
long time but promises you can really

00:00:59,789 --> 00:01:03,449
think of those as just the event

00:01:01,109 --> 00:01:07,080
handlers the so this is the stuff that I

00:01:03,449 --> 00:01:10,710
promised to do if and when I need to so

00:01:07,080 --> 00:01:14,430
that's one way of looking at it now of

00:01:10,710 --> 00:01:16,680
course those clients the thing that was

00:01:14,430 --> 00:01:19,799
a client that was doing the retry or

00:01:16,680 --> 00:01:22,140
that service that has the promise built

00:01:19,799 --> 00:01:25,200
into it where the event is is triggering

00:01:22,140 --> 00:01:27,659
that are themselves acting as services

00:01:25,200 --> 00:01:31,170
so the client is the service so let's

00:01:27,659 --> 00:01:34,439
keep that in mind as well now if we move

00:01:31,170 --> 00:01:37,439
on to looking at latency definitely not

00:01:34,439 --> 00:01:39,630
being 0 and bandwidth absolutely being

00:01:37,439 --> 00:01:42,780
limited what have we done in the past

00:01:39,630 --> 00:01:44,939
well like I stalk tabat a layer we had

00:01:42,780 --> 00:01:48,390
caches and we had to deal with cache

00:01:44,939 --> 00:01:53,130
expert so now instead of dealing with

00:01:48,390 --> 00:01:55,280
cache expert what if I think of my data

00:01:53,130 --> 00:01:58,979
stores my local data stores as a

00:01:55,280 --> 00:02:02,700
materialized view and what is it that's

00:01:58,979 --> 00:02:06,240
feeding that materialized view well it's

00:02:02,700 --> 00:02:09,569
events now if we take those two things

00:02:06,240 --> 00:02:12,660
and we put them together we've got the

00:02:09,569 --> 00:02:13,920
materialized view and we've got an event

00:02:12,660 --> 00:02:15,930
processing

00:02:13,920 --> 00:02:18,870
we've got that promise we've got that

00:02:15,930 --> 00:02:21,720
event processing code look what happens

00:02:18,870 --> 00:02:25,200
here we could actually pull those things

00:02:21,720 --> 00:02:28,590
apart we can take the code that is

00:02:25,200 --> 00:02:31,680
processing the events and separate it

00:02:28,590 --> 00:02:34,080
from the code that's servicing giving

00:02:31,680 --> 00:02:37,560
you access to the data that's in that

00:02:34,080 --> 00:02:44,069
materialized view look what we've just

00:02:37,560 --> 00:02:46,560
done we just derived CQRS and this is

00:02:44,069 --> 00:02:49,500
the way that I'd like to look at CQRS I

00:02:46,560 --> 00:02:52,140
find in many cases we start with CQRS

00:02:49,500 --> 00:02:54,720
and we say hey we're going to separate

00:02:52,140 --> 00:02:56,550
the command and the query but I actually

00:02:54,720 --> 00:02:58,830
am one of these people that likes to

00:02:56,550 --> 00:03:02,400
kind of come from first principles I

00:02:58,830 --> 00:03:04,680
want to derive that and looking at it

00:03:02,400 --> 00:03:07,200
this way allows me to see why we're

00:03:04,680 --> 00:03:09,230
doing secure us and what the value of it

00:03:07,200 --> 00:03:09,230
is

00:03:15,900 --> 00:03:17,959

YouTube URL: https://www.youtube.com/watch?v=st4y0LeyX6k


