Title: Ike Nassi (TidalScale) interviewed at O'Reilly Software Architecture Conference NY 2018
Publication date: 2018-03-13
Playlist: O'Reilly Software Architecture Conference 2018 - New York, New York
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,030 --> 00:00:03,600
hi this is Mike Henderson I'm software

00:00:01,860 --> 00:00:05,790
architecture in New York I'm here with

00:00:03,600 --> 00:00:08,460
Mike from title scale

00:00:05,790 --> 00:00:11,670
so title scale interesting name can you

00:00:08,460 --> 00:00:13,590
tell me what you do sure sure well we we

00:00:11,670 --> 00:00:16,199
appeal to two classes of customers one

00:00:13,590 --> 00:00:18,210
is application developers and one is

00:00:16,199 --> 00:00:21,510
people who want to optimize data centers

00:00:18,210 --> 00:00:24,150
it might be cloud based or premise and

00:00:21,510 --> 00:00:26,460
we do that in a very unique way the

00:00:24,150 --> 00:00:29,760
application developers have access to a

00:00:26,460 --> 00:00:32,489
virtual machine of a size that they

00:00:29,760 --> 00:00:34,829
define so today most software developers

00:00:32,489 --> 00:00:36,600
is defining their software in terms of

00:00:34,829 --> 00:00:38,730
the hardware that they want they have to

00:00:36,600 --> 00:00:39,480
run it on it the title scale it's just

00:00:38,730 --> 00:00:42,030
the opposite

00:00:39,480 --> 00:00:44,360
they define their virtual hardware of a

00:00:42,030 --> 00:00:46,980
size needed to run their software and

00:00:44,360 --> 00:00:49,770
would you like to how they do that yes

00:00:46,980 --> 00:00:53,250
so if I'm NASA and I'm running a massive

00:00:49,770 --> 00:00:56,660
software system it is title scale saying

00:00:53,250 --> 00:00:59,910
I need a massive architecture and soft

00:00:56,660 --> 00:01:02,219
one title scale says is if you're

00:00:59,910 --> 00:01:03,870
running a massive job you create the

00:01:02,219 --> 00:01:05,939
virtual server that's large enough to

00:01:03,870 --> 00:01:08,010
run that job and we do it in five

00:01:05,939 --> 00:01:10,439
minutes so you can scale to any size for

00:01:08,010 --> 00:01:11,610
any size brush much any size yeah and

00:01:10,439 --> 00:01:14,880
the way we do let me tell you how we do

00:01:11,610 --> 00:01:19,290
that okay what we do is we take a bunch

00:01:14,880 --> 00:01:21,479
of commodity inexpensive servers we glue

00:01:19,290 --> 00:01:23,900
them together and boot up a single

00:01:21,479 --> 00:01:27,150
virtual machine on that virtual machine

00:01:23,900 --> 00:01:30,990
we can run a standard operating system

00:01:27,150 --> 00:01:33,030
we Santos will be RedHat Ubuntu FreeBSD

00:01:30,990 --> 00:01:34,829
they have windows up and running in the

00:01:33,030 --> 00:01:37,470
lab you run whatever you want and

00:01:34,829 --> 00:01:39,329
because we can do that you don't modify

00:01:37,470 --> 00:01:41,700
the operating system at all and you

00:01:39,329 --> 00:01:43,140
don't modify the application at all so

00:01:41,700 --> 00:01:45,810
it's a hundred percent bit 4-bit

00:01:43,140 --> 00:01:48,689
compatible why because we look like

00:01:45,810 --> 00:01:49,860
hardware the operating system doesn't

00:01:48,689 --> 00:01:52,439
know that it's running on a virtual

00:01:49,860 --> 00:01:54,600
machine but it's a virtual machine like

00:01:52,439 --> 00:01:57,180
you've never seen it could be 20 servers

00:01:54,600 --> 00:01:59,850
15 terabytes of memory form two cores

00:01:57,180 --> 00:02:01,710
it's big so you're like virtual machines

00:01:59,850 --> 00:02:03,799
just in time where virtual machines

00:02:01,710 --> 00:02:06,159
just-in-time dynamically adaptive

00:02:03,799 --> 00:02:09,610
automatically or manually

00:02:06,159 --> 00:02:15,130
okay PMS has a service it's it's it's

00:02:09,610 --> 00:02:16,900
it's AVM it's not VMs it's one via so

00:02:15,130 --> 00:02:19,660
you're every application every

00:02:16,900 --> 00:02:23,050
organization if I'm one Enterprise and I

00:02:19,660 --> 00:02:25,480
want to spin up I just one virtual

00:02:23,050 --> 00:02:27,430
machine and you have to worry about

00:02:25,480 --> 00:02:29,380
distributing the data you have to worry

00:02:27,430 --> 00:02:32,800
about distributing the computation you

00:02:29,380 --> 00:02:36,730
dynamically we dynamically that's

00:02:32,800 --> 00:02:39,580
exactly right we we do this in a very

00:02:36,730 --> 00:02:42,730
unique way because what we want to do is

00:02:39,580 --> 00:02:45,069
keep all the processors and all the

00:02:42,730 --> 00:02:47,110
memory needed by those processors in the

00:02:45,069 --> 00:02:49,299
same place at the same time that might

00:02:47,110 --> 00:02:51,459
change over time but any given instant

00:02:49,299 --> 00:02:53,170
of time if we can put everything

00:02:51,459 --> 00:02:56,590
together that needs to be together

00:02:53,170 --> 00:02:58,930
we have zero latency we have zero

00:02:56,590 --> 00:03:02,500
overhead and things run at machine speed

00:02:58,930 --> 00:03:04,599
and so our job using artificial

00:03:02,500 --> 00:03:06,130
intelligence techniques is to make sure

00:03:04,599 --> 00:03:09,730
the processors and the memory are

00:03:06,130 --> 00:03:12,760
co-located sounds like a great tool for

00:03:09,730 --> 00:03:15,450
someone who wants to prototype a new

00:03:12,760 --> 00:03:18,220
part of new part of their business or

00:03:15,450 --> 00:03:22,420
scale and not know what size they need

00:03:18,220 --> 00:03:24,760
to scale to exactly that's exactly right

00:03:22,420 --> 00:03:27,310
you you build the size of the virtual

00:03:24,760 --> 00:03:29,350
server that you need at the time that

00:03:27,310 --> 00:03:30,910
you need it and then if your data gets

00:03:29,350 --> 00:03:33,549
bigger or your business gets more

00:03:30,910 --> 00:03:36,549
complex or whatever it is you just add

00:03:33,549 --> 00:03:38,530
more Hardware servers the machine gets

00:03:36,549 --> 00:03:40,329
bigger and you don't have to reboot and

00:03:38,530 --> 00:03:42,910
so like let's just take an instance of a

00:03:40,329 --> 00:03:45,460
retailer in December

00:03:42,910 --> 00:03:47,680
and you know two days before the holiday

00:03:45,460 --> 00:03:49,390
Christmas season and they're going crazy

00:03:47,680 --> 00:03:51,550
could they spin up a new boom

00:03:49,390 --> 00:03:53,530
not only can they they've done it I mean

00:03:51,550 --> 00:03:57,370
what we are dealing with a company that

00:03:53,530 --> 00:03:59,250
builds an in-memory columnstore sequel

00:03:57,370 --> 00:04:01,600
database for big-box retail stores

00:03:59,250 --> 00:04:03,850
that's exactly what they do so in a way

00:04:01,600 --> 00:04:06,730
load balancing goes away with this sort

00:04:03,850 --> 00:04:10,480
of service because take care of it in

00:04:06,730 --> 00:04:12,220
are you a service no we sell this hyper

00:04:10,480 --> 00:04:14,320
court where software provider we sell

00:04:12,220 --> 00:04:16,720
this hyper kernel software and it runs

00:04:14,320 --> 00:04:20,459
on your hardware or cloud hardware

00:04:16,720 --> 00:04:22,960
however you want to do or hybrid or I

00:04:20,459 --> 00:04:24,370
suppose so I don't have anybody doing

00:04:22,960 --> 00:04:25,710
that at the moment but I don't see why

00:04:24,370 --> 00:04:28,450
not

00:04:25,710 --> 00:04:30,610
so where do you see this going if we sit

00:04:28,450 --> 00:04:33,310
if we have a conversation next year here

00:04:30,610 --> 00:04:35,440
in New York where you come back home

00:04:33,310 --> 00:04:37,960
again what would you like to say you

00:04:35,440 --> 00:04:42,550
guys are doing differently next year at

00:04:37,960 --> 00:04:44,530
this time well first of all one of my

00:04:42,550 --> 00:04:46,930
friends and mentors is a guy named

00:04:44,530 --> 00:04:50,530
Gordon Bell I started working for Gordon

00:04:46,930 --> 00:04:52,890
in 1976 on what became the VAX I just

00:04:50,530 --> 00:04:55,330
published a paper with Gordon last month

00:04:52,890 --> 00:04:57,970
Gordon thinks all servers will be done

00:04:55,330 --> 00:05:00,850
this way in the future because it just

00:04:57,970 --> 00:05:03,930
makes a lot of sense okay why you have

00:05:00,850 --> 00:05:07,120
to worry about all this allocation of

00:05:03,930 --> 00:05:08,770
processes and processors and memory and

00:05:07,120 --> 00:05:12,670
footprints when that's what the

00:05:08,770 --> 00:05:15,610
operating system does so you know we

00:05:12,670 --> 00:05:17,560
just see inroads you know when I started

00:05:15,610 --> 00:05:19,150
the company I didn't know where it was

00:05:17,560 --> 00:05:20,620
all going to end up and I still don't

00:05:19,150 --> 00:05:22,540
know where it's all going to end up but

00:05:20,620 --> 00:05:25,450
I've been surprised because we mobilize

00:05:22,540 --> 00:05:28,300
all the resources the virtual resources

00:05:25,450 --> 00:05:31,270
we can move processors we can move

00:05:28,300 --> 00:05:32,050
memory we can move storage buffers with

00:05:31,270 --> 00:05:35,050
remove anything

00:05:32,050 --> 00:05:37,389
anywhere that has a great effect on our

00:05:35,050 --> 00:05:38,979
reliability because people say gee when

00:05:37,389 --> 00:05:40,960
you build a large system like this it's

00:05:38,979 --> 00:05:43,060
going to be unreliable couldn't be

00:05:40,960 --> 00:05:45,819
further from the truth because we can

00:05:43,060 --> 00:05:48,970
detect failing resources in the thing we

00:05:45,819 --> 00:05:53,050
can evacuate processors evacuate memory

00:05:48,970 --> 00:05:55,000
replace them with other other resources

00:05:53,050 --> 00:05:56,560
other physical resources without having

00:05:55,000 --> 00:06:00,069
to take the system down we have a

00:05:56,560 --> 00:06:01,870
beautiful reliability story and we've

00:06:00,069 --> 00:06:05,169
worked very hard over the last year to

00:06:01,870 --> 00:06:07,090
make it all very very easy to use so you

00:06:05,169 --> 00:06:09,190
can build one of these virtual servers

00:06:07,090 --> 00:06:12,370
in five minutes you don't have to put in

00:06:09,190 --> 00:06:15,129
a purchase order and a budget request

00:06:12,370 --> 00:06:17,440
and and you know wait six months or nine

00:06:15,129 --> 00:06:20,050
months for a budget allocation to build

00:06:17,440 --> 00:06:21,669
this huge server but frankly some of our

00:06:20,050 --> 00:06:26,469
customers can't run their applications

00:06:21,669 --> 00:06:30,099
any other way okay so this big-box store

00:06:26,469 --> 00:06:32,050
for example in the holiday season they

00:06:30,099 --> 00:06:37,330
have they're spending a huge amount of

00:06:32,050 --> 00:06:38,380
money just just and with us it's just

00:06:37,330 --> 00:06:40,630
you just have another piece of hardware

00:06:38,380 --> 00:06:42,789
so you you could be for both companies

00:06:40,630 --> 00:06:44,319
that are in their transformation or

00:06:42,789 --> 00:06:46,240
disruptors who are trying to take over

00:06:44,319 --> 00:06:47,979
the industries that want to grow but

00:06:46,240 --> 00:06:51,159
don't know how big and how quickly

00:06:47,979 --> 00:06:54,460
they're gonna get their way I mean my

00:06:51,159 --> 00:06:56,409
talk here was about containers okay well

00:06:54,460 --> 00:06:59,500
containers were great in fact our entire

00:06:56,409 --> 00:07:01,870
QA system is running containers on top

00:06:59,500 --> 00:07:04,060
of title skin so there's lots of DevOps

00:07:01,870 --> 00:07:05,710
opportunities there's lots of database

00:07:04,060 --> 00:07:09,099
opportunities I was the former chief

00:07:05,710 --> 00:07:11,169
scientist at sa P okay so I was there

00:07:09,099 --> 00:07:13,779
when sa P Hana was being created I built

00:07:11,169 --> 00:07:15,789
all the hardware for s AP HANA while I

00:07:13,779 --> 00:07:19,539
was my day job was running research at

00:07:15,789 --> 00:07:22,000
sa P but my hobby was building his large

00:07:19,539 --> 00:07:24,279
virtual machines to run Hana

00:07:22,000 --> 00:07:27,660
and we do Oracle work with the Oracle

00:07:24,279 --> 00:07:30,880
cloud running ASAP Hana we're

00:07:27,660 --> 00:07:32,280
it's a lot larger opportunity than I

00:07:30,880 --> 00:07:34,180
ever expected when I started the company

00:07:32,280 --> 00:07:35,740
we certainly look forward to that

00:07:34,180 --> 00:07:37,330
conversation next year at this time and

00:07:35,740 --> 00:07:39,480
see where you guys are take care thank

00:07:37,330 --> 00:07:39,480

YouTube URL: https://www.youtube.com/watch?v=HXLKfiZ2DPs


