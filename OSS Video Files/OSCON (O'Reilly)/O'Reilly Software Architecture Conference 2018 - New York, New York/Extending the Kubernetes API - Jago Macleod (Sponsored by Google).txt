Title: Extending the Kubernetes API - Jago Macleod (Sponsored by Google)
Publication date: 2018-02-27
Playlist: O'Reilly Software Architecture Conference 2018 - New York, New York
Description: 
	Join us in person at the O'Reilly Software Architecture Conference to learn the tools, techniques, and leadership skills needed in the evolving discipline of software architecture. Learn more: https://oreil.ly/2NNTQQK

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,990 --> 00:00:06,879
today we're going to talk about

00:00:02,649 --> 00:00:08,740
extending the kubernetes api and really

00:00:06,879 --> 00:00:12,400
why it matters to you even if you're not

00:00:08,740 --> 00:00:13,809
using kubernetes today we're going to

00:00:12,400 --> 00:00:15,219
talk about the covered entities resource

00:00:13,809 --> 00:00:17,710
model some of the properties and

00:00:15,219 --> 00:00:20,770
conventions that are in addition to the

00:00:17,710 --> 00:00:24,490
restful api extending the kubernetes api

00:00:20,770 --> 00:00:27,820
with custom resources and finally some

00:00:24,490 --> 00:00:29,980
of the industry implications of that so

00:00:27,820 --> 00:00:33,100
you've heard the pitch I assume most of

00:00:29,980 --> 00:00:35,290
you have heard of kubernetes enables

00:00:33,100 --> 00:00:36,820
efficient bin packing and orchestration

00:00:35,290 --> 00:00:40,150
of planet-scale applications and all

00:00:36,820 --> 00:00:42,880
that this is not that talk I just heard

00:00:40,150 --> 00:00:44,320
someone sigh of relief over here it's

00:00:42,880 --> 00:00:45,400
okay we're gonna move on we're gonna

00:00:44,320 --> 00:00:46,079
talk about something a little more

00:00:45,400 --> 00:00:48,610
specific

00:00:46,079 --> 00:00:50,739
so recently Brian grant wrote a paper

00:00:48,610 --> 00:00:53,020
this great paper in it he said

00:00:50,739 --> 00:00:56,350
kubernetes is not just API driven its

00:00:53,020 --> 00:01:00,370
API centric so that sounds good but what

00:00:56,350 --> 00:01:03,460
does that actually mean so here's a

00:01:00,370 --> 00:01:05,049
diagram that is a little bit extended to

00:01:03,460 --> 00:01:08,859
include some other systems but

00:01:05,049 --> 00:01:12,939
essentially users and systems like C ICD

00:01:08,859 --> 00:01:16,299
and other automation all access the same

00:01:12,939 --> 00:01:18,429
api's in the master they talk to api

00:01:16,299 --> 00:01:19,810
server which is essentially the hub of

00:01:18,429 --> 00:01:23,380
the hub and spoke model that is

00:01:19,810 --> 00:01:25,899
kubernetes and it persists data to at CD

00:01:23,380 --> 00:01:28,929
and then other systems these controllers

00:01:25,899 --> 00:01:31,990
are responsible for watching the API and

00:01:28,929 --> 00:01:34,350
taking action so the whole thing is

00:01:31,990 --> 00:01:37,539
essentially this big loop of observe

00:01:34,350 --> 00:01:40,240
diff the current status against the

00:01:37,539 --> 00:01:42,579
desired state and then continuously work

00:01:40,240 --> 00:01:45,700
to bring the system into alignment with

00:01:42,579 --> 00:01:47,529
the desired state so again the important

00:01:45,700 --> 00:01:49,959
part here is that humans and automation

00:01:47,529 --> 00:01:53,529
are all work there are multiple actors

00:01:49,959 --> 00:01:55,779
it's a world of essentially chaos the

00:01:53,529 --> 00:01:58,749
observed state is the truth there is no

00:01:55,779 --> 00:02:01,450
other truth but that the multiple actors

00:01:58,749 --> 00:02:04,299
they're assumed and supported cheerfully

00:02:01,450 --> 00:02:06,219
this is great lots of actors lots of

00:02:04,299 --> 00:02:07,659
things working against the desired state

00:02:06,219 --> 00:02:09,909
the desired state is really the only

00:02:07,659 --> 00:02:12,220
thing that matters and resources are

00:02:09,909 --> 00:02:14,180
never assumed to have a single exclusive

00:02:12,220 --> 00:02:15,980
owner now there are

00:02:14,180 --> 00:02:18,140
role-based access control there are ways

00:02:15,980 --> 00:02:20,689
to restrict access but the resource

00:02:18,140 --> 00:02:23,930
itself is not owned by a specific owner

00:02:20,689 --> 00:02:25,670
and there's no strong ordering

00:02:23,930 --> 00:02:29,000
guarantees or transactions across

00:02:25,670 --> 00:02:30,980
multiple resources this is really

00:02:29,000 --> 00:02:33,260
important it's graceful tolerance over

00:02:30,980 --> 00:02:34,430
these strong guarantees distributed

00:02:33,260 --> 00:02:37,420
system as we've learned over the years

00:02:34,430 --> 00:02:41,900
that this just is a better model and we

00:02:37,420 --> 00:02:43,939
really unapologetically assume that

00:02:41,900 --> 00:02:45,769
there are some trade-offs there's no

00:02:43,939 --> 00:02:48,250
strong ordering pessimistic locking

00:02:45,769 --> 00:02:51,260
there's no atomic transactions across

00:02:48,250 --> 00:02:53,500
resources or strict resource ownership

00:02:51,260 --> 00:02:55,790
and there's no referential integrity

00:02:53,500 --> 00:02:58,750
many folks come and try and figure out

00:02:55,790 --> 00:03:01,959
how to bolt it on and it's a bad idea so

00:02:58,750 --> 00:03:05,109
in addition to the sort of crud and

00:03:01,959 --> 00:03:09,139
watch which is a notification style

00:03:05,109 --> 00:03:11,329
watch of resources there are a whole

00:03:09,139 --> 00:03:13,909
bunch of additional behaviors that

00:03:11,329 --> 00:03:16,099
happen on every operation so for

00:03:13,909 --> 00:03:17,269
mutation here's a list this is not that

00:03:16,099 --> 00:03:19,340
talk so we're not going to go through

00:03:17,269 --> 00:03:23,090
all of them I will share slides so don't

00:03:19,340 --> 00:03:24,349
worry about taking notes so but some of

00:03:23,090 --> 00:03:25,579
these things here authentication

00:03:24,349 --> 00:03:28,849
authorization

00:03:25,579 --> 00:03:31,370
there's validation there's optimistic

00:03:28,849 --> 00:03:34,250
concurrency you can do like a check and

00:03:31,370 --> 00:03:36,739
set style precondition like if the

00:03:34,250 --> 00:03:39,409
resource version is this then do this

00:03:36,739 --> 00:03:42,470
other operation otherwise it can modify

00:03:39,409 --> 00:03:46,669
and try again on deletion there are some

00:03:42,470 --> 00:03:49,280
other things that happen and finally on

00:03:46,669 --> 00:03:50,930
get there's another list of things

00:03:49,280 --> 00:03:53,269
happen the point here is not the actual

00:03:50,930 --> 00:03:55,189
things in that list it's that if you've

00:03:53,269 --> 00:03:56,239
ever built any distributed system you

00:03:55,189 --> 00:03:57,949
know that these things are really

00:03:56,239 --> 00:04:01,009
complicated and really hard to get right

00:03:57,949 --> 00:04:03,439
and the kubernetes community has worked

00:04:01,009 --> 00:04:04,849
really hard and written really good code

00:04:03,439 --> 00:04:07,989
that should last a long time

00:04:04,849 --> 00:04:10,669
to solve many of these problems the

00:04:07,989 --> 00:04:12,979
other thing worth noting is that this is

00:04:10,669 --> 00:04:15,079
portable by design works on every major

00:04:12,979 --> 00:04:17,750
cloud provider on Prem

00:04:15,079 --> 00:04:20,269
it even works on a cluster of raspberry

00:04:17,750 --> 00:04:24,590
PI's so you write once there's no vendor

00:04:20,269 --> 00:04:27,560
lock-in when people talk about hybrid

00:04:24,590 --> 00:04:28,160
and multi cloud environments you can't

00:04:27,560 --> 00:04:31,520
bolt that

00:04:28,160 --> 00:04:33,950
later you just can't design today so now

00:04:31,520 --> 00:04:36,800
there's 50 certified kubernetes

00:04:33,950 --> 00:04:40,250
platforms and distributions it's also

00:04:36,800 --> 00:04:42,830
extensible by design and so we're gonna

00:04:40,250 --> 00:04:44,360
rip through this part custom resource

00:04:42,830 --> 00:04:49,250
definitions is what we're talking about

00:04:44,360 --> 00:04:52,010
and so you create a yeah mol file

00:04:49,250 --> 00:04:54,650
it specifies what you want to create the

00:04:52,010 --> 00:05:00,530
resource type and then a simple command

00:04:54,650 --> 00:05:02,650
line apply of a resource definition you

00:05:00,530 --> 00:05:06,620
then create an instance of that resource

00:05:02,650 --> 00:05:08,090
and then you can use the command line

00:05:06,620 --> 00:05:11,570
tool that comes with kubernetes cube

00:05:08,090 --> 00:05:13,430
control to describe and explore those

00:05:11,570 --> 00:05:16,250
types that you've created and the

00:05:13,430 --> 00:05:18,560
instances of those types so all what we

00:05:16,250 --> 00:05:20,240
saw before you get that for free when

00:05:18,560 --> 00:05:22,960
you're using custom resources in

00:05:20,240 --> 00:05:25,550
kubernetes it's portable and extensible

00:05:22,960 --> 00:05:27,740
it's been shown to be effective and

00:05:25,550 --> 00:05:30,200
other projects in this space are

00:05:27,740 --> 00:05:32,330
starting to use the kubernetes api even

00:05:30,200 --> 00:05:34,310
when it's not to do with containers at

00:05:32,330 --> 00:05:37,190
all so I want to leave you with this

00:05:34,310 --> 00:05:39,170
thought the kubernetes is really more

00:05:37,190 --> 00:05:41,990
than container orchestration

00:05:39,170 --> 00:05:43,490
it's the kubernetes resource model that

00:05:41,990 --> 00:05:45,770
it's transforming the way that systems

00:05:43,490 --> 00:05:47,960
are designed built and operated the way

00:05:45,770 --> 00:05:50,540
that people reason about distributed

00:05:47,960 --> 00:05:52,760
systems so folks that you interact with

00:05:50,540 --> 00:05:55,160
will have these expectations when they

00:05:52,760 --> 00:05:57,830
come to design their next distributed

00:05:55,160 --> 00:06:00,560
system there's also a lot of work still

00:05:57,830 --> 00:06:02,120
to do the community is active please

00:06:00,560 --> 00:06:03,860
come to the kubernetes community and

00:06:02,120 --> 00:06:06,620
figure out how you can get involved

00:06:03,860 --> 00:06:10,819
thank you

00:06:06,620 --> 00:06:10,819
[Applause]

00:06:15,880 --> 00:06:17,940

YouTube URL: https://www.youtube.com/watch?v=O79ksk4mQUU


