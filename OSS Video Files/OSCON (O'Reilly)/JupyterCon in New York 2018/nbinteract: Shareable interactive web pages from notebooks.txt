Title: nbinteract: Shareable interactive web pages from notebooks
Publication date: 2018-09-21
Playlist: JupyterCon in New York 2018
Description: 
	nbinteract: Shareable interactive web pages from notebooks
Sam Lau (UC Berkeley), Caleb Siu (UC Berkeley)

Jupyter widgets provide simple ways to add interactivity into notebooks. However, sharing these interactive notebooks is challenging since potential viewers need to open the notebook and run cells in order to interact with widgets. Although nbconvert can convert notebooks with widgets into HTML files, the widgets in the HTML files lose functionality because browsers typically donâ€™t natively run Python.

The nbinteract Python package converts a notebook with widgets into a standalone HTML page that keeps widget functionality, enabling authors to create interactive web pages using Jupyter notebooks. These web pages can either display the original Python code or hide it to only present interactive elements. When a viewer interacts with a widget, a Binder kernel runs Python code behind the scenes to display the result. Combining widgets with plotting gives authors a function-driven, flexible way to create interactions on the plotâ€™s data. Although matplotlib-based plotting is possible, interactions are laggy because images are too large to send over the network in real time. Nbinteract addresses this issue by supporting a set of plotting functions that generate Javascript-based plots. The reduced data sent through the network enables smooth, real-time interactions.

Sam Lau and Caleb Siu offer an overview of nbinteract and walk you through the steps to publish an interactive web page from a Jupyter notebook. To demonstrate how nbinteractâ€™s set of functionality is particularly useful for creating materials to teach data science, Sam and Caleb share how they have used nbinteract for the online textbook of a popular UC Berkeley data science course. They conclude by opening up the floor to discuss other possible applications and use cases for the library.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,350 --> 00:00:05,520
I may be talking today about envy

00:00:03,090 --> 00:00:09,360
interact it's a package we made to turn

00:00:05,520 --> 00:00:11,340
notebooks into interactive web pages my

00:00:09,360 --> 00:00:13,170
name is Sam I'm a recent grad from UC

00:00:11,340 --> 00:00:16,949
Berkeley and I'm headed to UCSD for a

00:00:13,170 --> 00:00:20,550
PhD in a month I'm Kaleb I'm a current

00:00:16,949 --> 00:00:21,870
senior at UC Berkeley at UC Berkeley

00:00:20,550 --> 00:00:24,510
we're both part of the data science

00:00:21,870 --> 00:00:26,340
education program we work where we work

00:00:24,510 --> 00:00:30,210
on the courses there to teach undergrads

00:00:26,340 --> 00:00:31,740
data science these courses have have

00:00:30,210 --> 00:00:35,460
text books written using Jupiter

00:00:31,740 --> 00:00:38,609
notebooks and one of the examples in our

00:00:35,460 --> 00:00:41,010
textbook we like to show that as you

00:00:38,609 --> 00:00:42,559
increase the sample size the sample

00:00:41,010 --> 00:00:45,269
looks more and more like the population

00:00:42,559 --> 00:00:46,949
to make this happen what we do is we

00:00:45,269 --> 00:00:49,079
define a Python function to take a

00:00:46,949 --> 00:00:51,269
sample and plot the distribution in the

00:00:49,079 --> 00:00:53,399
sample and we have to call that function

00:00:51,269 --> 00:00:55,909
multiple times so here you see a sample

00:00:53,399 --> 00:00:58,499
of size 10 and the users to scroll down

00:00:55,909 --> 00:01:01,709
sample of size 100 let's scroll down

00:00:58,499 --> 00:01:04,049
some more a sample of size 1,000 and so

00:01:01,709 --> 00:01:05,280
from the students perspective you kind

00:01:04,049 --> 00:01:06,869
of have to like keep in your mind the

00:01:05,280 --> 00:01:09,180
function as well as what that parameter

00:01:06,869 --> 00:01:10,590
means in that function as well as like

00:01:09,180 --> 00:01:12,030
what we're trying to do in the textbook

00:01:10,590 --> 00:01:14,610
page overall and it's kind of a lot of

00:01:12,030 --> 00:01:17,219
stuff to keep in your head it would be

00:01:14,610 --> 00:01:18,719
more ideal if we could just we could

00:01:17,219 --> 00:01:20,909
just call that function once and let the

00:01:18,719 --> 00:01:22,770
user change the sample size on their own

00:01:20,909 --> 00:01:25,799
and see what happens to that to that

00:01:22,770 --> 00:01:26,939
sample so we're looking into ways of

00:01:25,799 --> 00:01:29,609
making this happen and we came across

00:01:26,939 --> 00:01:31,829
the eye pie widgets library the iPad

00:01:29,609 --> 00:01:33,689
we're just library is a is a set of

00:01:31,829 --> 00:01:35,039
tools built by the Jupiter team they'll

00:01:33,689 --> 00:01:37,770
let you quickly create interactive

00:01:35,039 --> 00:01:39,329
content in the notebook so for example

00:01:37,770 --> 00:01:41,009
you can take it you can take the

00:01:39,329 --> 00:01:42,840
interact function from the iPad widgets

00:01:41,009 --> 00:01:44,189
library and then find some buttons let

00:01:42,840 --> 00:01:46,049
the user click on those buttons and you

00:01:44,189 --> 00:01:47,729
can get that pretty easily with maybe

00:01:46,049 --> 00:01:50,670
about two extra lines of code overall

00:01:47,729 --> 00:01:51,990
which is really sweet so we saw this and

00:01:50,670 --> 00:01:54,479
we thought great this will solve all our

00:01:51,990 --> 00:01:55,979
problems but unfortunately not because

00:01:54,479 --> 00:01:57,990
when you try to take that notebook and

00:01:55,979 --> 00:02:01,109
export it into an HTML page as we were

00:01:57,990 --> 00:02:02,759
doing all your widgets break and in fact

00:02:01,109 --> 00:02:05,249
the more we looked into this the more we

00:02:02,759 --> 00:02:07,439
realize that no one really has as far as

00:02:05,249 --> 00:02:10,020
we could tell a solution for this right

00:02:07,439 --> 00:02:11,400
now we looked at the iPad would just

00:02:10,020 --> 00:02:13,470
Docs and we noticed that all the docs

00:02:11,400 --> 00:02:14,940
are breaking - so although they had

00:02:13,470 --> 00:02:16,470
notebooks that when you open the nope

00:02:14,940 --> 00:02:18,510
and run the cells to the sliders work

00:02:16,470 --> 00:02:20,700
and the actual docks if you click on

00:02:18,510 --> 00:02:25,050
things and type things the output of the

00:02:20,700 --> 00:02:26,910
cell doesn't actually update we design a

00:02:25,050 --> 00:02:29,220
tool called env interact to kind of to

00:02:26,910 --> 00:02:31,290
get around this and the interact package

00:02:29,220 --> 00:02:33,150
contains a command-line tool that lets

00:02:31,290 --> 00:02:35,010
you take a notebook run a command on it

00:02:33,150 --> 00:02:37,980
and convert it into an HTML page you can

00:02:35,010 --> 00:02:39,600
email to your friend put online or open

00:02:37,980 --> 00:02:41,220
on your phone and then I'll load the

00:02:39,600 --> 00:02:46,170
widgets and run them as if you're in a

00:02:41,220 --> 00:02:47,880
notebook so how exactly does this

00:02:46,170 --> 00:02:49,950
ambient track command-line to work

00:02:47,880 --> 00:02:56,270
that's what well take a look right now

00:02:49,950 --> 00:03:01,020
can you hear me so let's try doing this

00:02:56,270 --> 00:03:04,160
live demos guys so this is the Doc's

00:03:01,020 --> 00:03:11,100
right now if you go to I PI widgets oh

00:03:04,160 --> 00:03:13,880
sorry that's my bed that's live demo

00:03:11,100 --> 00:03:13,880
already filling

00:03:19,390 --> 00:03:22,390
setting

00:03:32,390 --> 00:03:41,400
all right now if you go to the docks on

00:03:37,230 --> 00:03:44,220
I pi widgets right here it's live you

00:03:41,400 --> 00:03:46,319
can anybody can access it you'll notice

00:03:44,220 --> 00:03:47,790
that it looks really nice

00:03:46,319 --> 00:03:49,080
there's finding widgets there are a

00:03:47,790 --> 00:03:52,980
bunch of different widgets you can use

00:03:49,080 --> 00:03:55,860
but unfortunately they don't work so you

00:03:52,980 --> 00:03:59,750
can see this output here stays fixed at

00:03:55,860 --> 00:04:04,470
10 and if you uncheck this doesn't work

00:03:59,750 --> 00:04:07,019
nothing works and that's because they

00:04:04,470 --> 00:04:09,769
simply exported the jupiter notebook as

00:04:07,019 --> 00:04:12,900
an HTML and the interactive

00:04:09,769 --> 00:04:15,480
functionalities don't export with it so

00:04:12,900 --> 00:04:19,280
this is where ambient rack comes into

00:04:15,480 --> 00:04:21,840
play so we went out there github

00:04:19,280 --> 00:04:23,970
downloaded their docs so there's the

00:04:21,840 --> 00:04:26,370
jupiter notebook that we're just looking

00:04:23,970 --> 00:04:28,470
at in HTML form there's their notebook

00:04:26,370 --> 00:04:33,979
with all the widgets their widgets work

00:04:28,470 --> 00:04:38,060
and then we can go into our terminal

00:04:33,979 --> 00:04:40,590
alright that works and running a simple

00:04:38,060 --> 00:04:42,900
command line and be interact with a

00:04:40,590 --> 00:04:46,110
bunch of options that will go in detail

00:04:42,900 --> 00:04:48,020
later and then link to where we saved

00:04:46,110 --> 00:04:51,090
the notebook so this notebook is called

00:04:48,020 --> 00:04:53,760
using interact and so we stored it into

00:04:51,090 --> 00:04:56,910
notebooks folder so of a path there we

00:04:53,760 --> 00:05:00,060
simply run this command hope it works in

00:04:56,910 --> 00:05:03,330
a couple of seconds converted and now

00:05:00,060 --> 00:05:07,530
it's an HTML page so if we open up that

00:05:03,330 --> 00:05:10,710
HTML page refresh you'll see that

00:05:07,530 --> 00:05:13,470
instead of those being sliders there's a

00:05:10,710 --> 00:05:17,940
button that says show widgets at all the

00:05:13,470 --> 00:05:21,750
widgets and if we press this give it a

00:05:17,940 --> 00:05:24,630
little time we'll be talking about how

00:05:21,750 --> 00:05:25,880
the backend of this part works for now

00:05:24,630 --> 00:05:28,590
there's just a quick demo

00:05:25,880 --> 00:05:34,979
initializing oh here it is and we move

00:05:28,590 --> 00:05:36,770
it and it works boom everything should

00:05:34,979 --> 00:05:39,960
work

00:05:36,770 --> 00:05:42,480
and just like that with one shell

00:05:39,960 --> 00:05:45,750
command we've converted a Jupiter

00:05:42,480 --> 00:05:48,180
notebook into a working HTML page that

00:05:45,750 --> 00:05:50,780
you can now embed in your website in

00:05:48,180 --> 00:05:53,850
your textbook in whatever you want

00:05:50,780 --> 00:05:57,000
because before if you had to say share a

00:05:53,850 --> 00:05:59,820
plot or share graphs share widgets with

00:05:57,000 --> 00:06:02,640
colleagues or friends you could say send

00:05:59,820 --> 00:06:04,320
them the Jupiter notebook and then they

00:06:02,640 --> 00:06:07,380
could download the Jupiter notebook and

00:06:04,320 --> 00:06:09,450
then they could open up their terminal

00:06:07,380 --> 00:06:11,430
run it locally and then realize that

00:06:09,450 --> 00:06:13,410
they don't have the dependencies oh no

00:06:11,430 --> 00:06:15,540
they don't have so I could learn oh okay

00:06:13,410 --> 00:06:17,460
god I spend like five minutes installing

00:06:15,540 --> 00:06:20,550
that and then oh they don't have this

00:06:17,460 --> 00:06:24,440
other package whatever unlike that HTML

00:06:20,550 --> 00:06:26,700
you import it you send it it still works

00:06:24,440 --> 00:06:31,350
interactivity the output everything

00:06:26,700 --> 00:06:34,050
still working yay so that's the Renda of

00:06:31,350 --> 00:06:38,580
ymb interact is unique and why it's

00:06:34,050 --> 00:06:41,729
useful and then going back going forward

00:06:38,580 --> 00:06:44,190
we were looking into examples for our

00:06:41,729 --> 00:06:46,290
data 100 textbook or they don't 100 is

00:06:44,190 --> 00:06:48,590
the course we teach and so we're looking

00:06:46,290 --> 00:06:51,360
for examples to help students grasp say

00:06:48,590 --> 00:06:53,630
probability and specifically expected

00:06:51,360 --> 00:06:56,160
value so we can see in this example that

00:06:53,630 --> 00:07:00,960
the expected value of a dice roll

00:06:56,160 --> 00:07:02,010
converges to 3.5 what that means if you

00:07:00,960 --> 00:07:04,350
guys haven't been studying your

00:07:02,010 --> 00:07:07,140
statistics is that over the long run the

00:07:04,350 --> 00:07:10,260
average of a dice roll is the value 3.5

00:07:07,140 --> 00:07:13,200
so as you see on the x-axis as the

00:07:10,260 --> 00:07:16,710
number of rows increase write the value

00:07:13,200 --> 00:07:18,960
so it slowly stabilizes to 3.5 it might

00:07:16,710 --> 00:07:21,660
start off at like six and then four and

00:07:18,960 --> 00:07:23,490
then whatever but as you increase the

00:07:21,660 --> 00:07:26,610
number of rows you can see on the y-axis

00:07:23,490 --> 00:07:29,700
which is the average value that slowly

00:07:26,610 --> 00:07:32,310
becomes 325 so we want students to be

00:07:29,700 --> 00:07:35,010
able to play with this and run this and

00:07:32,310 --> 00:07:36,990
hopefully professors can also generate

00:07:35,010 --> 00:07:40,229
examples like this to have students

00:07:36,990 --> 00:07:43,979
learn and this is a really great like

00:07:40,229 --> 00:07:46,620
animation it's move it's nice but we

00:07:43,979 --> 00:07:48,620
found that it took around 300 lines of

00:07:46,620 --> 00:07:50,630
d3 Java scripts

00:07:48,620 --> 00:07:53,390
which is of course not what people

00:07:50,630 --> 00:07:55,790
really want to write to get one example

00:07:53,390 --> 00:07:58,400
across especially professors who might

00:07:55,790 --> 00:08:00,590
not be well-versed in d3 JavaScript's

00:07:58,400 --> 00:08:02,690
you know and then we looked into the

00:08:00,590 --> 00:08:04,670
code a little more found that there's

00:08:02,690 --> 00:08:09,260
actually only ten lines of logic in this

00:08:04,670 --> 00:08:11,330
and 290 lines of callbacks and all this

00:08:09,260 --> 00:08:14,840
stuff but actually only 10 lines of

00:08:11,330 --> 00:08:18,170
logic right so instead of writing 300

00:08:14,840 --> 00:08:21,280
lines and 10 lines of logic how about we

00:08:18,170 --> 00:08:24,950
write 10 eyes of Python and then use

00:08:21,280 --> 00:08:27,140
interacts to make this graph and then

00:08:24,950 --> 00:08:29,780
use MV use our iPad word just to make

00:08:27,140 --> 00:08:32,690
this graph and then use NB interact

00:08:29,780 --> 00:08:35,330
convert to an HTML and voila we have the

00:08:32,690 --> 00:08:37,580
same thing or similar it doesn't look

00:08:35,330 --> 00:08:40,100
quite as nice as JavaScript but we have

00:08:37,580 --> 00:08:41,570
a similar concept so let me show that to

00:08:40,100 --> 00:08:49,960
you right now

00:08:41,570 --> 00:08:52,970
live demo part 2 all right so here we

00:08:49,960 --> 00:08:56,750
have hopefully what will be a similar

00:08:52,970 --> 00:09:00,020
example we have our imports we have our

00:08:56,750 --> 00:09:02,570
rows which are the dice row and then

00:09:00,020 --> 00:09:04,460
averages which calculates the average of

00:09:02,570 --> 00:09:09,920
the diced row summit at that particular

00:09:04,460 --> 00:09:12,800
point and the x-axis becomes a static

00:09:09,920 --> 00:09:15,500
array of 1 to say 200 and then the

00:09:12,800 --> 00:09:18,020
y-values are the averages right and then

00:09:15,500 --> 00:09:22,900
we can just use matplotlib a convenient

00:09:18,020 --> 00:09:27,050
PRT plot and pass an x and y values and

00:09:22,900 --> 00:09:29,030
boom and then lastly widgets will just

00:09:27,050 --> 00:09:32,590
import it from them i pi widgets right

00:09:29,030 --> 00:09:35,630
and then the interact function call that

00:09:32,590 --> 00:09:39,800
and we have something similar we can

00:09:35,630 --> 00:09:42,470
click this move it over and similarly we

00:09:39,800 --> 00:09:45,080
can see that as the number of Dicers

00:09:42,470 --> 00:09:48,590
increases on the x axis the valley

00:09:45,080 --> 00:09:50,150
slowly converges now you might also have

00:09:48,590 --> 00:09:55,400
noticed that there's a comment in each

00:09:50,150 --> 00:09:58,580
of these cells that NBI : hide in and

00:09:55,400 --> 00:10:00,710
that stands for hide input so many times

00:09:58,580 --> 00:10:01,560
when you're embedding in notebook in

00:10:00,710 --> 00:10:03,960
HTML

00:10:01,560 --> 00:10:06,240
you might not necessarily want all this

00:10:03,960 --> 00:10:08,279
code if you have a lot of imports you

00:10:06,240 --> 00:10:10,440
might not want people to just see all

00:10:08,279 --> 00:10:12,029
your imports and be overwhelmed so in

00:10:10,440 --> 00:10:15,330
this case we're demoing something where

00:10:12,029 --> 00:10:17,670
all of the three cells are hidden the

00:10:15,330 --> 00:10:20,610
input at least but the output still

00:10:17,670 --> 00:10:22,950
shows alternatively you could do hide

00:10:20,610 --> 00:10:24,390
out which would hide the output but that

00:10:22,950 --> 00:10:27,839
kind of ruins the point of this demo if

00:10:24,390 --> 00:10:33,300
you can't see the graph so let's go

00:10:27,839 --> 00:10:37,830
ahead save and then go back to our

00:10:33,300 --> 00:10:38,400
terminal okay and you might notice if

00:10:37,830 --> 00:10:41,940
you look

00:10:38,400 --> 00:10:44,550
the command line we ran was much longer

00:10:41,940 --> 00:10:46,440
I had all these functions etc but this

00:10:44,550 --> 00:10:49,110
time all we need to do is call and be

00:10:46,440 --> 00:10:51,540
interact and then link it to the path of

00:10:49,110 --> 00:10:53,520
this notebook so when you set up and be

00:10:51,540 --> 00:10:55,500
interact you can run a command that lets

00:10:53,520 --> 00:10:57,930
you save all your settings and in the

00:10:55,500 --> 00:11:00,750
future all you really need to do is call

00:10:57,930 --> 00:11:03,480
MB interact pass it the path and it will

00:11:00,750 --> 00:11:08,839
do exactly what I just showed you five

00:11:03,480 --> 00:11:12,839
minutes ago convert that go here and

00:11:08,839 --> 00:11:22,170
refresh just in case and there she lies

00:11:12,839 --> 00:11:25,560
all right and it moves so similar to the

00:11:22,170 --> 00:11:28,470
notebook we've managed to recreate the

00:11:25,560 --> 00:11:31,500
example that we previously saw took 300

00:11:28,470 --> 00:11:33,210
lines of code here it took don't count

00:11:31,500 --> 00:11:37,860
the imports it took five lines of code

00:11:33,210 --> 00:11:39,750
maybe four and that's kind of the nice

00:11:37,860 --> 00:11:41,820
part about being able to use interactive

00:11:39,750 --> 00:11:44,280
functions with gbeary notebook and then

00:11:41,820 --> 00:11:46,680
being able to convert them to HTML using

00:11:44,280 --> 00:11:50,930
MB interact allows you to create

00:11:46,680 --> 00:11:50,930
examples like this with null our work

00:11:56,250 --> 00:12:00,639
so to use the command line tool you will

00:11:59,350 --> 00:12:03,399
have to run pip install it in the

00:12:00,639 --> 00:12:05,110
interact and then run in the interact -

00:12:03,399 --> 00:12:06,759
s with your binary spec which I'm going

00:12:05,110 --> 00:12:08,259
to explain on the next slide and then

00:12:06,759 --> 00:12:10,269
pass in a list of notebooks you want to

00:12:08,259 --> 00:12:12,759
run for example if I have a notebook

00:12:10,269 --> 00:12:14,560
called hello da I PI and E and I want to

00:12:12,759 --> 00:12:16,750
use the bind respect associated with the

00:12:14,560 --> 00:12:19,120
data 100 text book I can run in the

00:12:16,750 --> 00:12:20,769
interact as the binding spiked years100

00:12:19,120 --> 00:12:22,569
slash textbook and then the notebook

00:12:20,769 --> 00:12:25,180
that I want to convert hello that I PI

00:12:22,569 --> 00:12:27,339
in be a scaled I just mentioned if

00:12:25,180 --> 00:12:29,230
you're going to M be in a interact in it

00:12:27,339 --> 00:12:31,480
in the root of your of your project

00:12:29,230 --> 00:12:33,160
folder you can skip the - s flag and

00:12:31,480 --> 00:12:37,630
just run and the interact with notebook

00:12:33,160 --> 00:12:39,850
you want to convert that spec flag we

00:12:37,630 --> 00:12:42,100
need because of the way I PI widgets

00:12:39,850 --> 00:12:44,470
works in conjunction with the library

00:12:42,100 --> 00:12:46,870
that we've developed when you run up

00:12:44,470 --> 00:12:47,949
when you create a I PI widgets what

00:12:46,870 --> 00:12:49,779
happens normally is that when you

00:12:47,949 --> 00:12:51,430
interact with that slider it calls a

00:12:49,779 --> 00:12:53,589
Python function that you've defined or a

00:12:51,430 --> 00:12:55,990
library has defined what happens

00:12:53,589 --> 00:12:58,000
normally is that you're in local

00:12:55,990 --> 00:12:59,980
notebook server will run that code and

00:12:58,000 --> 00:13:02,500
then give the output back to you so you

00:12:59,980 --> 00:13:04,689
see that output in your notebook to make

00:13:02,500 --> 00:13:07,329
em be interactive work publicly for for

00:13:04,689 --> 00:13:08,980
static HTML pages what we do is replaced

00:13:07,329 --> 00:13:11,620
a nope local notebook server with a

00:13:08,980 --> 00:13:13,120
binder server instead so when you when

00:13:11,620 --> 00:13:15,850
you click that slider and drag it around

00:13:13,120 --> 00:13:18,250
and runs Python code on a binder server

00:13:15,850 --> 00:13:19,810
instead of your local notebook the

00:13:18,250 --> 00:13:21,910
binding server then takes the output and

00:13:19,810 --> 00:13:23,199
gives it back to you the user and that's

00:13:21,910 --> 00:13:25,630
why the that's why you can take those

00:13:23,199 --> 00:13:27,490
HTML pages and run them either locally

00:13:25,630 --> 00:13:30,720
on your computer or hosted online on

00:13:27,490 --> 00:13:33,100
github pages or or anywhere you like

00:13:30,720 --> 00:13:34,660
live on your server nice configuration

00:13:33,100 --> 00:13:36,639
just like your local computer needs some

00:13:34,660 --> 00:13:38,800
configuration so you have to tell it

00:13:36,639 --> 00:13:41,439
which packages to install other things

00:13:38,800 --> 00:13:43,870
you want to run and so to do that you

00:13:41,439 --> 00:13:45,490
have to create a binder spec the easiest

00:13:43,870 --> 00:13:47,410
way to create a binder spec is to create

00:13:45,490 --> 00:13:49,600
a github repo and then put a requirement

00:13:47,410 --> 00:13:52,240
start txt file in the root of your repo

00:13:49,600 --> 00:13:53,709
that lets finder that lets finder read

00:13:52,240 --> 00:13:56,680
your requirements and it installed in

00:13:53,709 --> 00:13:58,360
before runs your code so to get started

00:13:56,680 --> 00:14:01,620
with the nd interact command-line tool

00:13:58,360 --> 00:14:03,760
you'll see on pip install MB interacts

00:14:01,620 --> 00:14:05,820
created github repo contained in

00:14:03,760 --> 00:14:08,440
notebooks you want to convert

00:14:05,820 --> 00:14:10,210
run in the interact in it in the route

00:14:08,440 --> 00:14:13,120
of the repo you just have to do this

00:14:10,210 --> 00:14:14,740
once per repo so that you have a

00:14:13,120 --> 00:14:16,840
requirement start txt file for new

00:14:14,740 --> 00:14:18,330
packages and you can have simpler and

00:14:16,840 --> 00:14:20,950
the interact commands down the road

00:14:18,330 --> 00:14:22,690
finally you can just run and be interact

00:14:20,950 --> 00:14:24,640
through that I PI and E or any notebook

00:14:22,690 --> 00:14:26,680
file you want and they'll convert it to

00:14:24,640 --> 00:14:27,940
HTML you can do that you can do at last

00:14:26,680 --> 00:14:30,040
you command multiple times on different

00:14:27,940 --> 00:14:31,870
notebooks you want to create or you can

00:14:30,040 --> 00:14:35,770
rerun it on old notebooks to read to

00:14:31,870 --> 00:14:37,060
update the HTML files so the

00:14:35,770 --> 00:14:40,540
command-line tool allows you to generate

00:14:37,060 --> 00:14:42,670
interactive web pages from notebooks the

00:14:40,540 --> 00:14:44,710
ME interact package also has a Python

00:14:42,670 --> 00:14:47,980
interface that has plotting functions

00:14:44,710 --> 00:14:51,220
for smooth interactions so why do we

00:14:47,980 --> 00:14:52,810
need plotting functions when we have

00:14:51,220 --> 00:14:54,640
something really great like mat plot

00:14:52,810 --> 00:14:57,700
live like do we really need another

00:14:54,640 --> 00:14:59,860
graphing library so the reason behind

00:14:57,700 --> 00:15:03,010
this is I don't have you noticed in the

00:14:59,860 --> 00:15:05,620
earlier demo but matplotlib is kind of

00:15:03,010 --> 00:15:07,600
slow especially for interactions it's

00:15:05,620 --> 00:15:10,600
very fast if you're trying to do like a

00:15:07,600 --> 00:15:14,230
any other plot like just one plot no

00:15:10,600 --> 00:15:17,290
changes but as you can see when you have

00:15:14,230 --> 00:15:20,530
an interactive graph matplotlib has some

00:15:17,290 --> 00:15:23,110
mech and that's because the library

00:15:20,530 --> 00:15:25,480
generates a new image whenever the

00:15:23,110 --> 00:15:28,810
parameters are changed so in this case

00:15:25,480 --> 00:15:31,330
when we link it with I PI widgets it

00:15:28,810 --> 00:15:33,970
generates new calls and new images for

00:15:31,330 --> 00:15:37,150
every change in that slider so when

00:15:33,970 --> 00:15:40,690
somebody slides it from say X is 1 to

00:15:37,150 --> 00:15:42,940
1000 here then it's going to generate a

00:15:40,690 --> 00:15:45,040
huge amount of images as you quickly

00:15:42,940 --> 00:15:47,350
move your mouse drag it from one to a

00:15:45,040 --> 00:15:49,090
thousand and that's not very ideal

00:15:47,350 --> 00:15:51,160
because when you look at this graph it's

00:15:49,090 --> 00:15:54,760
not very it's not very complex you just

00:15:51,160 --> 00:15:56,080
have on the x-axis like one two any

00:15:54,760 --> 00:15:57,880
value you set it to you and that's just

00:15:56,080 --> 00:16:00,160
an exponential function it's not a

00:15:57,880 --> 00:16:02,740
complicated graph it's just that when

00:16:00,160 --> 00:16:06,070
you add interactions to matplotlib you

00:16:02,740 --> 00:16:09,070
run into some problems specifically how

00:16:06,070 --> 00:16:11,680
smooth it is and that's why we made

00:16:09,070 --> 00:16:14,230
several plotting functions in the NB

00:16:11,680 --> 00:16:15,910
interact Python package where you can

00:16:14,230 --> 00:16:18,760
just import and be interact

00:16:15,910 --> 00:16:21,209
say as NBI and then do similar call

00:16:18,760 --> 00:16:23,350
like you were doing with matplotlib and

00:16:21,209 --> 00:16:25,930
we're going on and talk about some of

00:16:23,350 --> 00:16:29,050
these functionalities of ambient track

00:16:25,930 --> 00:16:31,690
plotting so for example let's say we

00:16:29,050 --> 00:16:35,050
wanted to make this static graph we

00:16:31,690 --> 00:16:37,420
would have our X values which is numbers

00:16:35,050 --> 00:16:39,250
from 0 to 9 and then Y values where you

00:16:37,420 --> 00:16:42,220
plug in 2 eggs in the Yi squared right

00:16:39,250 --> 00:16:44,709
and then you would call poto plot on

00:16:42,220 --> 00:16:48,010
your x values and your y votes that's

00:16:44,709 --> 00:16:50,649
what we're all used to my plot live easy

00:16:48,010 --> 00:16:54,850
nice and simple say we wanted to use

00:16:50,649 --> 00:16:58,720
MBI dot line how do we do this well

00:16:54,850 --> 00:17:01,120
MBI that line is unique in that it can

00:16:58,720 --> 00:17:03,790
handle both static data and also

00:17:01,120 --> 00:17:08,770
functions so right now we're going to

00:17:03,790 --> 00:17:11,049
change our XML into a function that just

00:17:08,770 --> 00:17:13,839
returns what a expose was before now it

00:17:11,049 --> 00:17:16,209
returns numpy our range 10 before it was

00:17:13,839 --> 00:17:19,569
number that range 10 not not too hard

00:17:16,209 --> 00:17:22,329
okay now we're gonna change our Y valves

00:17:19,569 --> 00:17:25,230
so MPI dot line is unique in that it

00:17:22,329 --> 00:17:28,510
passes in the output of the X mouse into

00:17:25,230 --> 00:17:31,750
the Y vows so as you see here Y vows

00:17:28,510 --> 00:17:35,500
takes in a parameter X s and then it

00:17:31,750 --> 00:17:39,429
returns X s squared so it expects XS to

00:17:35,500 --> 00:17:41,890
be and inputs of X values this is done

00:17:39,429 --> 00:17:43,690
by default because oftentimes the Y

00:17:41,890 --> 00:17:47,320
values are simply a transformation of

00:17:43,690 --> 00:17:50,380
the X values and we get our graph like

00:17:47,320 --> 00:17:53,530
this it looks pretty much the same as

00:17:50,380 --> 00:17:57,220
the graph before not a different color

00:17:53,530 --> 00:17:59,860
scheme sure and then now say we want to

00:17:57,220 --> 00:18:03,040
add interactivity say we want to be able

00:17:59,860 --> 00:18:04,660
to change the width of the x-axis like

00:18:03,040 --> 00:18:08,700
we're trying to do originally in that

00:18:04,660 --> 00:18:11,740
matplotlib graph we would proceed by

00:18:08,700 --> 00:18:14,140
passing in a parameter to the X balance

00:18:11,740 --> 00:18:16,450
function which now takes in the

00:18:14,140 --> 00:18:18,760
parameter N and it will now return

00:18:16,450 --> 00:18:21,280
arrays up to the number N and similarly

00:18:18,760 --> 00:18:23,380
in the NBI dot line function you must

00:18:21,280 --> 00:18:27,100
specify which parameter you're passing

00:18:23,380 --> 00:18:31,070
in so here you have N equals 1 comma 10

00:18:27,100 --> 00:18:33,440
and 1 comma 10 represents the balance

00:18:31,070 --> 00:18:36,019
of your interaction so here you can see

00:18:33,440 --> 00:18:38,630
with this slider that it ranges from one

00:18:36,019 --> 00:18:41,659
to ten and even better the interaction

00:18:38,630 --> 00:18:45,080
the interactivity is very smooth much

00:18:41,659 --> 00:18:47,169
faster than matplotlib saying we want to

00:18:45,080 --> 00:18:50,149
add interaction to the y-axis as well

00:18:47,169 --> 00:18:53,269
maybe you want to raise the power to

00:18:50,149 --> 00:18:56,149
anything we choose we can pass in a new

00:18:53,269 --> 00:18:58,850
parameter into the Y function now takes

00:18:56,149 --> 00:19:00,919
into the parameter power similar we also

00:18:58,850 --> 00:19:03,620
need to put power into our MBI dot line

00:19:00,919 --> 00:19:05,269
function so that it knows which function

00:19:03,620 --> 00:19:08,480
which try to perform interaction on and

00:19:05,269 --> 00:19:10,250
generate the right widgets so here we

00:19:08,480 --> 00:19:11,870
can see what happens when we have two

00:19:10,250 --> 00:19:16,700
parameters being changed you get two

00:19:11,870 --> 00:19:22,159
sliding widgets right it looks nice

00:19:16,700 --> 00:19:25,100
looks very good so we also have various

00:19:22,159 --> 00:19:29,960
plotting functions like MBI histograms

00:19:25,100 --> 00:19:32,629
bar graphs scatter scatter plot not too

00:19:29,960 --> 00:19:35,210
much more for now and our graphs are

00:19:32,629 --> 00:19:36,889
built off of BQ plot which is maintained

00:19:35,210 --> 00:19:38,809
by Bloomberg you don't have to worry too

00:19:36,889 --> 00:19:40,730
much about that and being tracked it's

00:19:38,809 --> 00:19:43,759
basically a wrapper around that and the

00:19:40,730 --> 00:19:46,730
reason it's much smoother is that BQ

00:19:43,759 --> 00:19:49,129
plot represents graphs as a widgets so

00:19:46,730 --> 00:19:51,620
rather than an image so it does not

00:19:49,129 --> 00:19:54,259
necessarily have to generate a new image

00:19:51,620 --> 00:19:56,570
every time so kind of the big takeaway

00:19:54,259 --> 00:19:59,299
from MB interact plotting versus

00:19:56,570 --> 00:20:02,120
matplotlib is that if you look back at

00:19:59,299 --> 00:20:05,600
this graph it takes in MPI functions

00:20:02,120 --> 00:20:07,879
taken functions rather than static data

00:20:05,600 --> 00:20:09,919
it can take in static data but it also

00:20:07,879 --> 00:20:12,440
has the capability to take in functions

00:20:09,919 --> 00:20:16,840
which is how you would add interactivity

00:20:12,440 --> 00:20:16,840
right so

00:20:18,140 --> 00:20:22,260
so when we start this presentation I

00:20:20,490 --> 00:20:24,480
showed you guys this example that we're

00:20:22,260 --> 00:20:26,010
putting in our textbook of increasing

00:20:24,480 --> 00:20:28,080
the sample size and watching how this

00:20:26,010 --> 00:20:29,070
sample as a sample gets larger it looks

00:20:28,080 --> 00:20:33,390
more and more like the original

00:20:29,070 --> 00:20:35,700
population from which it came from using

00:20:33,390 --> 00:20:37,530
and B interact exporting and plotting we

00:20:35,700 --> 00:20:40,200
can create something like this where

00:20:37,530 --> 00:20:42,240
it's a HTML page when the user loads the

00:20:40,200 --> 00:20:44,100
widgets the user has buttons he or she

00:20:42,240 --> 00:20:48,210
can click to increase the sample size

00:20:44,100 --> 00:20:49,680
and see how the sample changes this

00:20:48,210 --> 00:20:51,120
example is live on the URL below

00:20:49,680 --> 00:20:53,010
although I think it'll probably be

00:20:51,120 --> 00:20:54,510
easier for you to just click on the

00:20:53,010 --> 00:20:56,040
links after when I when we put up the

00:20:54,510 --> 00:21:00,810
slides or just go to the documentation

00:20:56,040 --> 00:21:02,220
for this website for this package so in

00:21:00,810 --> 00:21:03,690
applying push down if you have an MB

00:21:02,220 --> 00:21:05,490
interact right now it's pretty limited

00:21:03,690 --> 00:21:08,940
because we have we're only using it in

00:21:05,490 --> 00:21:10,410
some certain limited use cases we can't

00:21:08,940 --> 00:21:13,530
use we can't make plots with multiple

00:21:10,410 --> 00:21:15,090
marks so if you have a line and points

00:21:13,530 --> 00:21:16,950
maybe multiple lines you want to plot

00:21:15,090 --> 00:21:19,440
and interact with right on MBA

00:21:16,950 --> 00:21:20,580
instructors and support that it also

00:21:19,440 --> 00:21:22,590
doesn't support subplots

00:21:20,580 --> 00:21:24,480
so you can't have one big plot with some

00:21:22,590 --> 00:21:26,340
smaller plots inside you can make you

00:21:24,480 --> 00:21:28,470
can have multiple cells with each having

00:21:26,340 --> 00:21:30,840
a plot but having multiple plots in one

00:21:28,470 --> 00:21:32,880
cell is a bit of a challenge for these

00:21:30,840 --> 00:21:34,890
for these plots you can kick out two

00:21:32,880 --> 00:21:36,780
matplotlib and get slower plot

00:21:34,890 --> 00:21:38,340
interactions but you can still get you

00:21:36,780 --> 00:21:42,450
can still make the plots and put them

00:21:38,340 --> 00:21:44,220
online so as I mentioned in the interact

00:21:42,450 --> 00:21:46,290
is used in some pretty narrow use cases

00:21:44,220 --> 00:21:48,480
right now one of the purposes of us

00:21:46,290 --> 00:21:49,590
presenting at Jupiter con is to try to

00:21:48,480 --> 00:21:52,290
get a sense of what people are

00:21:49,590 --> 00:21:53,820
interested in using this for Caleb and I

00:21:52,290 --> 00:21:55,620
are pretty much only using this to build

00:21:53,820 --> 00:21:57,780
to build the textbook for educational

00:21:55,620 --> 00:21:59,580
purposes and so all-day use cases you

00:21:57,780 --> 00:22:01,440
see right now our pretty education are

00:21:59,580 --> 00:22:04,800
pretty much centered around education

00:22:01,440 --> 00:22:07,830
focused things and one of the examples

00:22:04,800 --> 00:22:09,480
we display a large pandas dataframe by

00:22:07,830 --> 00:22:11,400
allowing the user to change what role

00:22:09,480 --> 00:22:16,320
and what column is he or she is looking

00:22:11,400 --> 00:22:18,780
at this avoids having to render tons of

00:22:16,320 --> 00:22:22,200
HTML to the user's browser in the case

00:22:18,780 --> 00:22:24,300
that we have a large data set another

00:22:22,200 --> 00:22:26,460
example we call a Python function in

00:22:24,300 --> 00:22:29,790
this case the user can type in a name

00:22:26,460 --> 00:22:31,100
and our predictor will try to guess what

00:22:29,790 --> 00:22:34,370
gender that name

00:22:31,100 --> 00:22:37,010
belongs to so in this case we type in

00:22:34,370 --> 00:22:43,220
Josephine and watch how to predict the

00:22:37,010 --> 00:22:45,140
gender of that name changes we can

00:22:43,220 --> 00:22:46,280
display interactive plot in this case

00:22:45,140 --> 00:22:48,740
we're showing the binomial distribution

00:22:46,280 --> 00:22:59,000
and how it changes as you vary n in P

00:22:48,740 --> 00:23:01,100
the parameters of that distribution you

00:22:59,000 --> 00:23:03,200
can also use and be interact to demo a

00:23:01,100 --> 00:23:05,180
library in this case we're changing a

00:23:03,200 --> 00:23:07,490
sentence from a regular from regular

00:23:05,180 --> 00:23:08,960
English to fancy English so instead of

00:23:07,490 --> 00:23:13,280
restaurant serving coffee with cream and

00:23:08,960 --> 00:23:19,940
bread we get steak house serve

00:23:13,280 --> 00:23:21,100
cappuccino snazzy shiny and butter so we

00:23:19,940 --> 00:23:23,630
think that it could be used for

00:23:21,100 --> 00:23:26,060
dashboarding writing books or writing

00:23:23,630 --> 00:23:28,010
blog posts but as of right now we have a

00:23:26,060 --> 00:23:30,910
pretty narrow set of things that we

00:23:28,010 --> 00:23:32,870
think it could be useful for other

00:23:30,910 --> 00:23:34,850
projects that you might be interested in

00:23:32,870 --> 00:23:36,890
if this isn't quite fiction use case I

00:23:34,850 --> 00:23:41,180
list here it's a big table you can read

00:23:36,890 --> 00:23:42,410
it after the presentation and the entire

00:23:41,180 --> 00:23:45,380
creates interactive web pages from

00:23:42,410 --> 00:23:47,150
notebooks it takes a notebook and when

00:23:45,380 --> 00:23:48,620
you run a command line when you rent a

00:23:47,150 --> 00:23:51,550
shell command it'll convert the notebook

00:23:48,620 --> 00:23:55,910
into an HTML page you can embed anywhere

00:23:51,550 --> 00:24:00,130
here's a link to the Ducks and thanks

00:23:55,910 --> 00:24:00,130
listening to our presentation

00:24:05,120 --> 00:24:08,120
yeah

00:24:21,680 --> 00:24:25,370
yeah so the question was why not use the

00:24:23,960 --> 00:24:29,020
matplotlib built-in animation

00:24:25,370 --> 00:24:29,020
functionality is that your question

00:24:32,770 --> 00:24:38,930
right yeah so Matt Poland has inline and

00:24:37,070 --> 00:24:41,390
notebook like magic commands for Jupiter

00:24:38,930 --> 00:24:43,280
the problem is whenever you call a map

00:24:41,390 --> 00:24:46,210
table function it has to generate a new

00:24:43,280 --> 00:24:48,710
like PNG like an entirely new image

00:24:46,210 --> 00:24:50,510
unless I might be getting that wrong you

00:24:48,710 --> 00:24:53,630
seem to you seem to be you know

00:24:50,510 --> 00:24:55,520
something to say yeah but in the ways

00:24:53,630 --> 00:24:57,350
that we're using it before we were using

00:24:55,520 --> 00:24:58,820
a plug to generate images and when you

00:24:57,350 --> 00:25:00,440
interact with those when you interact

00:24:58,820 --> 00:25:01,850
with sliders each time you interact

00:25:00,440 --> 00:25:03,410
that's the Senate image over the

00:25:01,850 --> 00:25:04,730
Internet and so when you do that

00:25:03,410 --> 00:25:06,710
multiple times you just get a lot of

00:25:04,730 --> 00:25:08,420
requests that each add overhead to the

00:25:06,710 --> 00:25:11,150
image and we were nobody seems some

00:25:08,420 --> 00:25:12,830
laggy behavior I think it was also hard

00:25:11,150 --> 00:25:15,410
to get matplotlib to render differently

00:25:12,830 --> 00:25:16,790
in HTML although it's been a it's been a

00:25:15,410 --> 00:25:22,060
little while since we've worked with

00:25:16,790 --> 00:25:22,060
that yeah thanks yes one of them too

00:25:56,210 --> 00:26:01,920
ask you a question and a good point we

00:25:59,520 --> 00:26:05,610
thought about this a little bit although

00:26:01,920 --> 00:26:08,670
it becomes quite challenging because you

00:26:05,610 --> 00:26:10,200
have to I think we're originally looking

00:26:08,670 --> 00:26:11,880
at how to use this for say the

00:26:10,200 --> 00:26:14,250
demonstration of the bootstrap where

00:26:11,880 --> 00:26:15,660
you're resampling from population it

00:26:14,250 --> 00:26:18,240
becomes quite child it became quite

00:26:15,660 --> 00:26:20,490
challenging because like there's some

00:26:18,240 --> 00:26:21,929
widgets that effect one plot and some

00:26:20,490 --> 00:26:26,070
way just affect all the plots at once

00:26:21,929 --> 00:26:28,350
and we were thinking about how to best

00:26:26,070 --> 00:26:29,730
implement it but we didn't get super far

00:26:28,350 --> 00:26:32,070
because we didn't have a great use case

00:26:29,730 --> 00:26:33,780
for it maybe we can talk afterward and

00:26:32,070 --> 00:26:36,020
see what you it's to be useful to you

00:26:33,780 --> 00:26:36,020
for

00:27:01,710 --> 00:27:06,540
so in our demos we use numpy and some of

00:27:04,140 --> 00:27:08,700
the examples we have Syfy in general

00:27:06,540 --> 00:27:10,440
binders memory limits I think they just

00:27:08,700 --> 00:27:13,590
changed during this conference to about

00:27:10,440 --> 00:27:15,570
half a gig so you have about that much

00:27:13,590 --> 00:27:18,330
memory to work with the compute power is

00:27:15,570 --> 00:27:19,950
not super great either it's enough to do

00:27:18,330 --> 00:27:21,870
some small demos but not probably not

00:27:19,950 --> 00:27:24,360
enough to run to like analyze large data

00:27:21,870 --> 00:27:26,370
sets on the other hand if you take my

00:27:24,360 --> 00:27:28,560
binder and deploy it to say an internal

00:27:26,370 --> 00:27:30,120
set of computers you have or some other

00:27:28,560 --> 00:27:31,710
nodes you rent from the cloud you can

00:27:30,120 --> 00:27:34,590
potentially increase those limits and

00:27:31,710 --> 00:27:36,390
get some more compute but I think the

00:27:34,590 --> 00:27:40,610
public binary server has some pretty

00:27:36,390 --> 00:27:40,610
specific limits on what you can run

00:27:55,520 --> 00:28:01,919
yeah so when you send an IP MB file the

00:27:59,970 --> 00:28:03,750
person who runs your notebook and wants

00:28:01,919 --> 00:28:06,210
to see those widgets work has to have

00:28:03,750 --> 00:28:07,470
things installed so if you don't have if

00:28:06,210 --> 00:28:09,030
you have your notebook depends on psyche

00:28:07,470 --> 00:28:10,470
you learn and you send in you send that

00:28:09,030 --> 00:28:11,490
over to your colleague and their

00:28:10,470 --> 00:28:13,740
colleague doesn't have Psych you learn

00:28:11,490 --> 00:28:15,799
or perhaps the wrong version when the

00:28:13,740 --> 00:28:18,990
when that person runs your notebook

00:28:15,799 --> 00:28:20,880
there's gonna be problems so bind your

00:28:18,990 --> 00:28:22,410
so you can send the bind your link to

00:28:20,880 --> 00:28:24,390
your friend and that'll that'll solve a

00:28:22,410 --> 00:28:26,730
lot of issues for you especially those

00:28:24,390 --> 00:28:28,679
dependency issues it still requires some

00:28:26,730 --> 00:28:31,020
overhead on behalf of your reader to

00:28:28,679 --> 00:28:32,460
like run shift-enter run all cells like

00:28:31,020 --> 00:28:36,600
that reader needs some familiarity with

00:28:32,460 --> 00:28:38,610
Jupiter and so the benefit the benefit

00:28:36,600 --> 00:28:40,590
is small but significant especially for

00:28:38,610 --> 00:28:42,030
our use case when we have students look

00:28:40,590 --> 00:28:43,380
like clicking through many pages in a

00:28:42,030 --> 00:28:45,059
textbook we don't want the students

00:28:43,380 --> 00:28:46,350
having to open up multiple notebook tabs

00:28:45,059 --> 00:28:47,400
and run everything

00:28:46,350 --> 00:28:49,640
each time they want to see something

00:28:47,400 --> 00:28:49,640
work

00:30:04,410 --> 00:30:08,730
so there were two questions there I

00:30:07,110 --> 00:30:10,380
think I only got you a second one your

00:30:08,730 --> 00:30:13,620
second one is is it possible to cache

00:30:10,380 --> 00:30:15,600
those pictures and they get smoother the

00:30:13,620 --> 00:30:17,640
answer is probably and we haven't looked

00:30:15,600 --> 00:30:19,710
too much into it because it requires it

00:30:17,640 --> 00:30:20,820
requires some tricky JavaScript to make

00:30:19,710 --> 00:30:23,220
sure you don't run into like memory

00:30:20,820 --> 00:30:32,040
overflow issues because you repeat your

00:30:23,220 --> 00:30:35,280
first question for us so we looked into

00:30:32,040 --> 00:30:37,860
altair as like our interactive client

00:30:35,280 --> 00:30:41,660
library but if I remember correctly it

00:30:37,860 --> 00:30:45,810
didn't have a Python version that had

00:30:41,660 --> 00:30:49,680
interaction boots out for it like it

00:30:45,810 --> 00:30:51,030
does so the difference is kind of a

00:30:49,680 --> 00:30:54,210
treat the difference is a little subtle

00:30:51,030 --> 00:30:55,740
for Altair so it supports interaction

00:30:54,210 --> 00:30:57,330
within the plot so you for example you

00:30:55,740 --> 00:30:58,950
can drag and highlight some points and

00:30:57,330 --> 00:31:01,470
an ulterior plot that's built in and you

00:30:58,950 --> 00:31:02,820
don't need it back in for that as far as

00:31:01,470 --> 00:31:05,700
we know or at least the last time we

00:31:02,820 --> 00:31:07,980
checked it doesn't alter doesn't support

00:31:05,700 --> 00:31:09,630
updating the data to plot which is what

00:31:07,980 --> 00:31:11,790
we're doing here with our plots so if

00:31:09,630 --> 00:31:13,740
all you want to do is like highlight

00:31:11,790 --> 00:31:15,600
some points or zoom in on your plot then

00:31:13,740 --> 00:31:17,460
Altair is probably like exactly what you

00:31:15,600 --> 00:31:18,720
want to do on the other hand if you're

00:31:17,460 --> 00:31:20,370
trying to do stuff like we are with

00:31:18,720 --> 00:31:22,080
updating data or rerunning or

00:31:20,370 --> 00:31:24,090
regenerating some data or resampling

00:31:22,080 --> 00:31:25,080
from a distribution then you'd have to

00:31:24,090 --> 00:31:26,400
do something a little more complicated

00:31:25,080 --> 00:31:29,870
that's where it does so we're using

00:31:26,400 --> 00:31:29,870
widgets for thanks

00:31:47,340 --> 00:31:52,649
so the question was do we support more

00:31:49,559 --> 00:31:54,330
templates through MB convert so the

00:31:52,649 --> 00:31:56,639
converter for M being track uses and B

00:31:54,330 --> 00:31:58,259
convert under the hood which means that

00:31:56,639 --> 00:31:59,490
in theory you can pass in your own and

00:31:58,259 --> 00:32:01,470
become for a template and that's what

00:31:59,490 --> 00:32:02,879
we're doing in our in our package we

00:32:01,470 --> 00:32:05,129
have some options for templates you can

00:32:02,879 --> 00:32:07,169
select from and we have some more

00:32:05,129 --> 00:32:08,519
options for the NBI like directives that

00:32:07,169 --> 00:32:10,320
you put in comments for each of the

00:32:08,519 --> 00:32:12,809
Pythons l we didn't talk about them here

00:32:10,320 --> 00:32:14,070
because did be long lists so we put them

00:32:12,809 --> 00:32:21,409
in the docs and you can take a look at

00:32:14,070 --> 00:32:21,409
our docs one in them too sorry

00:32:28,850 --> 00:32:35,880
um view couplet was very nice and

00:32:33,060 --> 00:32:37,410
everything updating it felt nice and

00:32:35,880 --> 00:32:39,300
there was a lot of capabilities but

00:32:37,410 --> 00:32:42,900
unfortunately our use cases mainly

00:32:39,300 --> 00:32:45,330
thinking to make cause in like say five

00:32:42,900 --> 00:32:46,170
or six lines and then be able to plot

00:32:45,330 --> 00:32:49,290
very easily

00:32:46,170 --> 00:32:51,600
unfortunately BQ plot had many options

00:32:49,290 --> 00:32:54,540
if you look at the plot before when we

00:32:51,600 --> 00:32:56,970
were showing like multi like multi lines

00:32:54,540 --> 00:32:59,820
and like many dots we actually used hard

00:32:56,970 --> 00:33:02,670
code BQ plot but it took around say like

00:32:59,820 --> 00:33:05,400
a hundred lines and then a lot of logic

00:33:02,670 --> 00:33:08,250
embedded in it that was difficult for

00:33:05,400 --> 00:33:09,210
say most professors or instructors to

00:33:08,250 --> 00:33:12,990
call it easily

00:33:09,210 --> 00:33:15,060
so all the NBI line MBI commands are

00:33:12,990 --> 00:33:16,950
generally like one or two lines long and

00:33:15,060 --> 00:33:24,300
that kind of reduces the complexity

00:33:16,950 --> 00:33:27,570
behind the situation so you can actually

00:33:24,300 --> 00:33:30,930
specify what kind of widget you wants

00:33:27,570 --> 00:33:34,560
you can pass in your own widgets it's up

00:33:30,930 --> 00:33:36,270
to you by default I PI by default it

00:33:34,560 --> 00:33:38,460
generates based on the I PI widget

00:33:36,270 --> 00:33:43,080
defaults but you can easily pass in your

00:33:38,460 --> 00:33:45,510
own widget and that support it yeah so

00:33:43,080 --> 00:33:47,100
biggie applause another like way of

00:33:45,510 --> 00:33:48,810
customizing a plot more so we've used it

00:33:47,100 --> 00:33:50,670
we use that before developing our own

00:33:48,810 --> 00:33:51,990
plot functions when we were creating

00:33:50,670 --> 00:33:53,430
lots of examples like we're trying to

00:33:51,990 --> 00:33:54,930
play lots of examples pretty quickly and

00:33:53,430 --> 00:33:56,100
we found ourselves like copying and

00:33:54,930 --> 00:33:57,600
pasting a lot of code but for

00:33:56,100 --> 00:34:00,600
complicated stuff we can't do an

00:33:57,600 --> 00:34:05,030
ambience track yet so I we're using BQ

00:34:00,600 --> 00:34:05,030
plot for those complicated examples yeah

00:34:08,369 --> 00:34:16,950
so I couldn't hate you could you repeat

00:34:10,200 --> 00:34:19,139
that question reveal that Jas Oh like

00:34:16,950 --> 00:34:23,249
would it work in us in reveal.js slide

00:34:19,139 --> 00:34:28,639
deck we haven't tried it although my

00:34:23,249 --> 00:34:28,639
hunch is that it will work with bugs

00:34:29,299 --> 00:34:34,619
arguable you can see this thing about

00:34:30,989 --> 00:34:36,929
most software but I it will work so ME

00:34:34,619 --> 00:34:39,690
interact works on static HTML pages and

00:34:36,929 --> 00:34:41,639
if revealed that Jes doesn't do like a

00:34:39,690 --> 00:34:43,859
whole lot of fancy stuff with the layout

00:34:41,639 --> 00:34:45,149
of that page then the widget should show

00:34:43,859 --> 00:34:47,399
up when you pan to the next slide and

00:34:45,149 --> 00:34:49,619
reveal that genius but I'm not too

00:34:47,399 --> 00:34:53,179
familiar with the layout like how wavy

00:34:49,619 --> 00:34:53,179
Oh Giles just works with the layout

00:34:59,790 --> 00:35:03,480
okay after now my question is you can

00:35:01,830 --> 00:35:05,780
finance average a presentation thanks a

00:35:03,480 --> 00:35:05,780

YouTube URL: https://www.youtube.com/watch?v=jln6h-dE2-0


