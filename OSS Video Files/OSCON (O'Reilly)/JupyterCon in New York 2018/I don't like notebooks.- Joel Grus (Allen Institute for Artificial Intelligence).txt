Title: I don't like notebooks.- Joel Grus (Allen Institute for Artificial Intelligence)
Publication date: 2018-09-21
Playlist: JupyterCon in New York 2018
Description: 
	I have been using and teaching Python for many years. I wrote a best-selling book about learning data science. And here’s my confession: I don’t like notebooks. (There are dozens of us!) I’ll explain why I find notebooks difficult, show how they frustrate my preferred pedagogy, demonstrate how I prefer to work, and discuss what Jupyter could do to win me over.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,620 --> 00:00:07,169
hi everyone thanks for coming my name is

00:00:03,690 --> 00:00:08,610
Joel and I don't like notebooks so it's

00:00:07,169 --> 00:00:10,349
possible the only person like this at

00:00:08,610 --> 00:00:12,389
the conference but out in the room no

00:00:10,349 --> 00:00:13,860
all right good because out in the real

00:00:12,389 --> 00:00:15,960
world there are dozens of us a few here

00:00:13,860 --> 00:00:17,580
and so how did we end up here well I was

00:00:15,960 --> 00:00:18,900
anger about notebooks I tweeted that I

00:00:17,580 --> 00:00:20,190
wanted he would talk about how I was

00:00:18,900 --> 00:00:22,980
angry about notebooks and someone was

00:00:20,190 --> 00:00:24,630
listening and it got accepted and so you

00:00:22,980 --> 00:00:26,040
know data science luminaries thought

00:00:24,630 --> 00:00:27,450
that it sounded like an unhelpful way to

00:00:26,040 --> 00:00:31,279
spend time and I got lots of other

00:00:27,450 --> 00:00:34,230
positive feedback about it as well but

00:00:31,279 --> 00:00:35,879
here we are so what kind of person not

00:00:34,230 --> 00:00:37,320
only doesn't like notebooks but goes to

00:00:35,879 --> 00:00:39,539
a conference about notebooks to talk

00:00:37,320 --> 00:00:40,920
about how he doesn't like notebooks so

00:00:39,539 --> 00:00:42,960
I'm a research engineer at Allen's super

00:00:40,920 --> 00:00:44,399
artificial intelligence my job is Python

00:00:42,960 --> 00:00:46,050
library design and reproducible science

00:00:44,399 --> 00:00:48,329
so I've lots of thoughts on these topics

00:00:46,050 --> 00:00:49,890
I won't call myself a Python expert you

00:00:48,329 --> 00:00:51,570
should never call yourself an expert but

00:00:49,890 --> 00:00:53,789
I've been in Python for a long time and

00:00:51,570 --> 00:00:55,230
I have a lot of opinions about it

00:00:53,789 --> 00:00:56,249
I was the chief data scientist at

00:00:55,230 --> 00:00:57,839
Woollett metrics I've managed data

00:00:56,249 --> 00:00:59,190
scientists I mentor data scientists I

00:00:57,839 --> 00:01:00,629
wrote a popular book in data science so

00:00:59,190 --> 00:01:02,879
I have some thoughts about how to teach

00:01:00,629 --> 00:01:04,080
teen science as well I worked as a

00:01:02,879 --> 00:01:06,330
software engineer at Google for a couple

00:01:04,080 --> 00:01:08,760
years and I work on Allen NLP which is a

00:01:06,330 --> 00:01:10,200
very well engineered project I make live

00:01:08,760 --> 00:01:13,470
coding videos so I think a lot about how

00:01:10,200 --> 00:01:15,360
do I teach concepts using code I write a

00:01:13,470 --> 00:01:18,030
blog that's about python sometimes and I

00:01:15,360 --> 00:01:19,350
update it sometimes and I co-hosted data

00:01:18,030 --> 00:01:21,330
science podcast with Andrew muscleman

00:01:19,350 --> 00:01:22,170
called adversarial learning if you're

00:01:21,330 --> 00:01:23,610
wondering why there's no episodes

00:01:22,170 --> 00:01:26,850
recently that's my fault I need to edit

00:01:23,610 --> 00:01:28,500
them okay so that's me

00:01:26,850 --> 00:01:33,530
I'm just gonna start a timer and I

00:01:28,500 --> 00:01:37,160
didn't let me start now too fast

00:01:33,530 --> 00:01:37,160
I have a lot of slides

00:01:39,600 --> 00:01:45,970
okay okay so that's me what do I assume

00:01:43,780 --> 00:01:47,470
about you well you're at this conference

00:01:45,970 --> 00:01:49,330
so possibly you think notebooks are

00:01:47,470 --> 00:01:52,330
great and you came to the stops and

00:01:49,330 --> 00:01:54,810
maybe want me to change your mind and so

00:01:52,330 --> 00:01:57,220
let me just give you a couple caveats

00:01:54,810 --> 00:01:59,170
one is that I'm not a notebook expert

00:01:57,220 --> 00:02:00,670
I've tried very hard not to misrepresent

00:01:59,170 --> 00:02:02,770
notebooks but it's possible I may have

00:02:00,670 --> 00:02:04,240
done so in inverted ly if so I apologize

00:02:02,770 --> 00:02:05,970
but I have a lot of complaints so even

00:02:04,240 --> 00:02:08,050
if one is wrong they can't all be wrong

00:02:05,970 --> 00:02:09,670
it's also the case that I believe

00:02:08,050 --> 00:02:10,990
they're probably you know advanced

00:02:09,670 --> 00:02:12,280
add-ins that might address some of my

00:02:10,990 --> 00:02:13,630
concerns but they're obscure and I

00:02:12,280 --> 00:02:15,760
didn't know about them and so that's why

00:02:13,630 --> 00:02:18,340
they're not here and but I apologize for

00:02:15,760 --> 00:02:19,480
not knowing about them minor caveat is

00:02:18,340 --> 00:02:21,430
that there's a new product called

00:02:19,480 --> 00:02:24,010
Jupiter lab when I proposed this talk it

00:02:21,430 --> 00:02:26,320
was not yet released so I haven't used

00:02:24,010 --> 00:02:28,480
it very much it's possible it addresses

00:02:26,320 --> 00:02:31,150
some of my concerns as well it's like it

00:02:28,480 --> 00:02:32,590
doesn't address all of them okay so

00:02:31,150 --> 00:02:34,330
before I get into things I don't like

00:02:32,590 --> 00:02:35,260
about notebooks to be fair I want to

00:02:34,330 --> 00:02:38,110
talk about things I do like about

00:02:35,260 --> 00:02:40,090
notebooks so one is that I really love

00:02:38,110 --> 00:02:41,860
the literate programming model I love

00:02:40,090 --> 00:02:43,420
well-documented code and so I like the

00:02:41,860 --> 00:02:45,850
idea of mixing markdown in code I find

00:02:43,420 --> 00:02:47,950
this a very nice aesthetic and it's a

00:02:45,850 --> 00:02:49,480
great way of presenting things you know

00:02:47,950 --> 00:02:52,480
another thing I like about notebooks is

00:02:49,480 --> 00:02:53,860
that in line plots are pretty great the

00:02:52,480 --> 00:02:56,530
story around plotting and the Python

00:02:53,860 --> 00:02:59,290
console is is not a good story and so I

00:02:56,530 --> 00:03:02,310
find this pretty nice okay so those are

00:02:59,290 --> 00:03:02,310
the things I like about notebooks

00:03:02,650 --> 00:03:07,490
now let's get to the things that I don't

00:03:04,700 --> 00:03:10,250
like about notebooks okay so this is my

00:03:07,490 --> 00:03:11,930
my number one like fundamental complaint

00:03:10,250 --> 00:03:14,000
is that notebooks have tons and tons of

00:03:11,930 --> 00:03:17,600
hidden State it's easy to screw up and

00:03:14,000 --> 00:03:19,520
difficult to reason about so here's some

00:03:17,600 --> 00:03:21,590
very simple Python i define a function f

00:03:19,520 --> 00:03:24,380
takes a number X returns X plus 2

00:03:21,590 --> 00:03:26,989
I set y equals f of 2 I check is y equal

00:03:24,380 --> 00:03:29,360
4 yes it is that's true print why it's 4

00:03:26,989 --> 00:03:31,550
okay very simple nothing fancy going on

00:03:29,360 --> 00:03:34,250
here here's that same example in a

00:03:31,550 --> 00:03:38,930
notebook define F X plus 2y is f of 2 is

00:03:34,250 --> 00:03:40,040
y for false print Y y is 5 okay so

00:03:38,930 --> 00:03:41,450
you're looking at that in your thinking

00:03:40,040 --> 00:03:42,830
you know if you look at the numbers

00:03:41,450 --> 00:03:45,260
those cells weren't even executed in

00:03:42,830 --> 00:03:46,580
order so of course it doesn't work okay

00:03:45,260 --> 00:03:48,440
so let's go back and make sure that

00:03:46,580 --> 00:03:50,209
they're executed in order you know here

00:03:48,440 --> 00:03:52,280
one comes before three comes before four

00:03:50,209 --> 00:03:53,959
comes before five but still the same

00:03:52,280 --> 00:03:55,220
result and you know if you'll get the

00:03:53,959 --> 00:03:56,510
numbers it's clear that something else

00:03:55,220 --> 00:03:59,450
was wrong between those first two lines

00:03:56,510 --> 00:04:00,590
which is which is fair but you know on

00:03:59,450 --> 00:04:01,700
one hand you have this idea that no

00:04:00,590 --> 00:04:03,739
books are great for iterative

00:04:01,700 --> 00:04:05,540
development but then you also have this

00:04:03,739 --> 00:04:07,040
idea that notebooks are actually kind of

00:04:05,540 --> 00:04:08,989
dangerous unless you run each cell

00:04:07,040 --> 00:04:10,310
exactly once in order and otherwise you

00:04:08,989 --> 00:04:13,010
can't really rely and what the outputs

00:04:10,310 --> 00:04:14,360
of the cells are so there's this tension

00:04:13,010 --> 00:04:16,609
there that makes me kind of

00:04:14,360 --> 00:04:17,959
uncomfortable I guess and some of you

00:04:16,609 --> 00:04:20,209
might be thinking that my preferred you

00:04:17,959 --> 00:04:22,640
know repple also has plenty of hidden

00:04:20,209 --> 00:04:24,560
state which it does but that state was

00:04:22,640 --> 00:04:27,680
built up in a linear fashion just by

00:04:24,560 --> 00:04:30,110
running one command at a time and you

00:04:27,680 --> 00:04:31,669
know there is a history magic that I can

00:04:30,110 --> 00:04:33,020
put in a cell and see here's all the

00:04:31,669 --> 00:04:34,280
commands that have been run but

00:04:33,020 --> 00:04:36,560
reasoning about state is actually one of

00:04:34,280 --> 00:04:39,080
the hardest parts of coding and so we

00:04:36,560 --> 00:04:42,190
should make it as easy as possible not

00:04:39,080 --> 00:04:42,190
as difficult as possible

00:04:48,370 --> 00:04:53,900
so here's one more this is not

00:04:51,889 --> 00:04:58,009
photoshopped this is not me hacking the

00:04:53,900 --> 00:05:00,620
HTML one two three four in order what

00:04:58,009 --> 00:05:02,150
kind of trickery is this well I just

00:05:00,620 --> 00:05:05,090
edited the first cell and didn't execute

00:05:02,150 --> 00:05:07,039
it which I did on purpose - to be

00:05:05,090 --> 00:05:08,840
deceptive but you know you could do that

00:05:07,039 --> 00:05:11,229
by accident - and really confuse

00:05:08,840 --> 00:05:16,159
yourself as well

00:05:11,229 --> 00:05:18,560
so my next complaint is that notebooks

00:05:16,159 --> 00:05:19,849
are difficult for beginners and so you

00:05:18,560 --> 00:05:21,500
know someone comes to you and says I

00:05:19,849 --> 00:05:23,060
would like to learn Python and you say

00:05:21,500 --> 00:05:26,689
okay that's great you know create a

00:05:23,060 --> 00:05:27,759
notebook and and get going why do I

00:05:26,689 --> 00:05:29,960
think they're difficult for beginners

00:05:27,759 --> 00:05:31,639
it's because these sorts of hidden state

00:05:29,960 --> 00:05:34,909
complications that I'm talking about are

00:05:31,639 --> 00:05:36,469
not obvious so you know this is most

00:05:34,909 --> 00:05:38,300
people's experience of how code works

00:05:36,469 --> 00:05:41,150
you run a line of code run the next line

00:05:38,300 --> 00:05:42,560
of code it happens in order the ability

00:05:41,150 --> 00:05:44,210
to run code snippets an arbitrary order

00:05:42,560 --> 00:05:47,089
is actually really weird if you think

00:05:44,210 --> 00:05:48,669
about it and it's very unintuitive and

00:05:47,089 --> 00:05:50,930
if you look at beginner tutorials

00:05:48,669 --> 00:05:52,370
they're really either cavalier about or

00:05:50,930 --> 00:05:54,469
completely silent on this hidden state

00:05:52,370 --> 00:05:57,080
issue so I just did a google search and

00:05:54,469 --> 00:05:58,580
found what I could find so this is data

00:05:57,080 --> 00:06:01,339
quest Jupiter emotes Furby enters a

00:05:58,580 --> 00:06:02,870
tutorial so you know they talk about

00:06:01,339 --> 00:06:04,250
some cells and say this will work

00:06:02,870 --> 00:06:06,289
regardless of the order of the cells in

00:06:04,250 --> 00:06:07,339
your notebook which addresses the issue

00:06:06,289 --> 00:06:09,050
but you know not

00:06:07,339 --> 00:06:10,849
this is dangerous watch out be careful

00:06:09,050 --> 00:06:12,830
you know don't shoot yourself in the

00:06:10,849 --> 00:06:14,389
foot and then you know later on they say

00:06:12,830 --> 00:06:16,099
most of the time the notebook will be

00:06:14,389 --> 00:06:18,469
top to bottom but it's common to go back

00:06:16,099 --> 00:06:20,240
and make changes in this case just keep

00:06:18,469 --> 00:06:21,650
an eye on the numbers and see if you

00:06:20,240 --> 00:06:23,150
have scale output and if your notebook

00:06:21,650 --> 00:06:25,039
is you know longer than a page or you

00:06:23,150 --> 00:06:29,659
can't hold 30 numbers in your head like

00:06:25,039 --> 00:06:31,060
that then not sure so this is a Jupiter

00:06:29,659 --> 00:06:33,770
notebook tutorial the definitive guide

00:06:31,060 --> 00:06:35,020
it did not have anything about order for

00:06:33,770 --> 00:06:38,779
state it was just stated differently

00:06:35,020 --> 00:06:40,490
hidden nothing sequence nothing enough

00:06:38,779 --> 00:06:43,279
rope to hang yourself nothing so it

00:06:40,490 --> 00:06:44,569
didn't seem to mention the issue here

00:06:43,279 --> 00:06:46,009
was the comprehensive beginner's guide

00:06:44,569 --> 00:06:48,740
to Jupiter notebooks for data science

00:06:46,009 --> 00:06:51,529
and machine learning it also did not

00:06:48,740 --> 00:06:53,120
seem to address the issue so back to

00:06:51,529 --> 00:06:55,459
this example where I where I skipped

00:06:53,120 --> 00:06:56,510
cell 2 you know you people are all

00:06:55,459 --> 00:06:58,490
notebooks

00:06:56,510 --> 00:07:01,460
and so the problem here is kind of

00:06:58,490 --> 00:07:03,530
obvious to you and also this is a really

00:07:01,460 --> 00:07:05,780
simple example like it couldn't be much

00:07:03,530 --> 00:07:07,340
simpler than this for beginners who have

00:07:05,780 --> 00:07:09,920
dozens of cells and more complex code

00:07:07,340 --> 00:07:11,630
this is utterly confusing and I know

00:07:09,920 --> 00:07:15,860
this because they come to me with their

00:07:11,630 --> 00:07:17,750
problems in fact the original angry

00:07:15,860 --> 00:07:20,150
tweet that kind of launched this talk

00:07:17,750 --> 00:07:21,920
was a result of me helping someone who

00:07:20,150 --> 00:07:23,900
was new to Python and came to me and

00:07:21,920 --> 00:07:25,310
said Python makes no sense I don't

00:07:23,900 --> 00:07:26,990
understand it he doesn't behave the way

00:07:25,310 --> 00:07:28,880
a programming language should when what

00:07:26,990 --> 00:07:31,460
happened was Python worked exactly they

00:07:28,880 --> 00:07:33,830
expected it to but they'd been very

00:07:31,460 --> 00:07:35,420
loose with state and execution out of

00:07:33,830 --> 00:07:37,430
order in the notebooks and ended up in a

00:07:35,420 --> 00:07:39,200
situation that appeared to make no sense

00:07:37,430 --> 00:07:42,110
and this has happened to me multiple

00:07:39,200 --> 00:07:44,090
times and you know you might be thinking

00:07:42,110 --> 00:07:45,980
lots of B Energy's notebooks so clear it

00:07:44,090 --> 00:07:47,660
can't be that difficult and it's thought

00:07:45,980 --> 00:07:49,370
that it's insurmountably difficult it's

00:07:47,660 --> 00:07:50,840
the out of X order execution makes

00:07:49,370 --> 00:07:55,820
learning Python more confusing than it

00:07:50,840 --> 00:07:59,330
needs to be okay so my next complaint is

00:07:55,820 --> 00:08:01,430
that notebooks encourage bad habits so

00:07:59,330 --> 00:08:03,320
you've got folders full of these I've

00:08:01,430 --> 00:08:08,630
got folders full of these everyone's got

00:08:03,320 --> 00:08:10,730
folders full of these so there's this

00:08:08,630 --> 00:08:13,130
sense in the data science community

00:08:10,730 --> 00:08:14,630
which I find super unfortunate which is

00:08:13,130 --> 00:08:15,860
that data science code doesn't need to

00:08:14,630 --> 00:08:19,010
follow the rules of good software

00:08:15,860 --> 00:08:21,140
engineering and this was you know poses

00:08:19,010 --> 00:08:23,540
as a great tip although apparently this

00:08:21,140 --> 00:08:24,830
was a misrepresentation of the tip which

00:08:23,540 --> 00:08:29,720
I didn't learn until after I started a

00:08:24,830 --> 00:08:31,490
big Twitter fight over it but but if you

00:08:29,720 --> 00:08:32,419
take one thing away from my talk it

00:08:31,490 --> 00:08:33,740
should be nothing to do with notebooks

00:08:32,419 --> 00:08:35,560
it should be that data science code

00:08:33,740 --> 00:08:38,599
should follow the rules of good software

00:08:35,560 --> 00:08:39,950
engineering and so you know sometimes

00:08:38,599 --> 00:08:42,349
people will say you know I don't need to

00:08:39,950 --> 00:08:43,490
be rigorous about my engineering because

00:08:42,349 --> 00:08:45,860
I'm just experimenting

00:08:43,490 --> 00:08:47,180
okay well experimenting is doing science

00:08:45,860 --> 00:08:49,670
and to say I don't need to be rigorous

00:08:47,180 --> 00:08:51,740
because I'm doing science doesn't make

00:08:49,670 --> 00:08:53,120
much sense to me sometimes people will

00:08:51,740 --> 00:08:55,760
say I just want to see if my model works

00:08:53,120 --> 00:08:57,050
before I put it in production well and

00:08:55,760 --> 00:08:59,090
if you want to find out if it works you

00:08:57,050 --> 00:09:02,200
need to write it correctly and make sure

00:08:59,090 --> 00:09:06,170
that your code is correct

00:09:02,200 --> 00:09:08,720
so another you know line of thought here

00:09:06,170 --> 00:09:10,370
is that people will say I need to write

00:09:08,720 --> 00:09:12,350
my code as fast as possible

00:09:10,370 --> 00:09:13,790
and doing poor software engineering

00:09:12,350 --> 00:09:17,029
allows me to write my code as fast as

00:09:13,790 --> 00:09:17,720
possible I don't agree that that's even

00:09:17,029 --> 00:09:23,449
true

00:09:17,720 --> 00:09:24,709
but generally speaking trying to write

00:09:23,449 --> 00:09:26,029
your code as fast as possible is great

00:09:24,709 --> 00:09:28,069
if reading a live coding presentation

00:09:26,029 --> 00:09:29,600
perhaps but but it's not great when

00:09:28,069 --> 00:09:35,899
you're trying to do your reproducible

00:09:29,600 --> 00:09:38,509
science and rigorous work so having you

00:09:35,899 --> 00:09:41,420
know taking a broad tour of the Jupiter

00:09:38,509 --> 00:09:43,370
ecosystem I really like unfair cynical

00:09:41,420 --> 00:09:47,300
take is that a lot of things that people

00:09:43,370 --> 00:09:48,620
build are to allow people not to have to

00:09:47,300 --> 00:09:49,819
develop good habits

00:09:48,620 --> 00:09:50,990
you don't wanna develop good habits Oh

00:09:49,819 --> 00:09:53,689
blood this for you so this is just a

00:09:50,990 --> 00:09:55,790
blog post that came across my radar I

00:09:53,689 --> 00:09:57,350
think I probably saw it on Twitter it's

00:09:55,790 --> 00:09:58,939
just some random blog post but popular

00:09:57,350 --> 00:10:00,319
liked it so there must be something to

00:09:58,939 --> 00:10:02,149
it it's how to present your data science

00:10:00,319 --> 00:10:04,339
results in a jupiter notebook the right

00:10:02,149 --> 00:10:13,370
way and then it says how to import one

00:10:04,339 --> 00:10:16,459
jupiter notebook into another okay so

00:10:13,370 --> 00:10:19,399
here's someone who wrote some code some

00:10:16,459 --> 00:10:21,319
function and doesn't want their clients

00:10:19,399 --> 00:10:23,870
or decision maker to see it so they've

00:10:21,319 --> 00:10:27,350
invented a couple kinds of magic that

00:10:23,870 --> 00:10:28,759
allow this to happen so you know it

00:10:27,350 --> 00:10:30,259
turns out here's some code i wrote but i

00:10:28,759 --> 00:10:33,860
don't want my client to see is actually

00:10:30,259 --> 00:10:37,459
a solved problem they're people who do

00:10:33,860 --> 00:10:38,809
python know how to do but if you insist

00:10:37,459 --> 00:10:40,519
on putting everything in a notebook then

00:10:38,809 --> 00:10:43,879
it's not a solved problem without this

00:10:40,519 --> 00:10:45,019
kind of thing and in the comments people

00:10:43,879 --> 00:10:47,540
actually pointed this out to the author

00:10:45,019 --> 00:10:49,759
and said you should really just write

00:10:47,540 --> 00:10:52,220
modules and libraries and test them and

00:10:49,759 --> 00:10:54,259
be clean and the author kind of admitted

00:10:52,220 --> 00:10:55,970
i agree that would be better than what i

00:10:54,259 --> 00:10:57,529
proposed here but this takes into

00:10:55,970 --> 00:11:02,809
account that data scientists write bad

00:10:57,529 --> 00:11:04,309
code and yes this is hard to debug i

00:11:02,809 --> 00:11:08,540
agree with you but anyway but this blog

00:11:04,309 --> 00:11:11,809
post was called the right way okay so

00:11:08,540 --> 00:11:16,220
notebooks encourage bad habits they also

00:11:11,809 --> 00:11:18,470
discourage good habits so you know here

00:11:16,220 --> 00:11:18,649
is some code from a live demonstration i

00:11:18,470 --> 00:11:20,120
do

00:11:18,649 --> 00:11:22,549
about building a deep learning library

00:11:20,120 --> 00:11:24,830
on the left you can see that i've nicely

00:11:22,549 --> 00:11:26,269
segregated things into modules

00:11:24,830 --> 00:11:27,769
there's a lost module there's an

00:11:26,269 --> 00:11:30,709
optimizers module there's a tensor

00:11:27,769 --> 00:11:32,390
module and on the right hand side you

00:11:30,709 --> 00:11:34,730
can see that I've used classes and

00:11:32,390 --> 00:11:36,950
inheritance and I've made this code so

00:11:34,730 --> 00:11:39,410
that it's very clean and testable and

00:11:36,950 --> 00:11:42,170
reusable and this is something that I'd

00:11:39,410 --> 00:11:44,510
live code in an hour so it's hard for me

00:11:42,170 --> 00:11:50,120
to accept that it's too slow to do

00:11:44,510 --> 00:11:52,459
things this way okay so how do we make

00:11:50,120 --> 00:11:54,380
sure our code works we write tests for

00:11:52,459 --> 00:11:56,510
it how do make sure it keeps working

00:11:54,380 --> 00:12:00,890
after we make changes to it we run those

00:11:56,510 --> 00:12:02,300
tests is it important that we use that

00:12:00,890 --> 00:12:04,550
kind of discipline or writing code to do

00:12:02,300 --> 00:12:06,829
science yeah of course it is and

00:12:04,550 --> 00:12:08,779
notebooks don't easily lend themselves

00:12:06,829 --> 00:12:11,360
to the kind of rigorous unit testing

00:12:08,779 --> 00:12:14,029
that you can get when you write things

00:12:11,360 --> 00:12:15,470
in terms of libraries which is not

00:12:14,029 --> 00:12:19,339
saying it's impossible to do but it's

00:12:15,470 --> 00:12:21,470
not natural to do here's how I write

00:12:19,339 --> 00:12:23,089
code I use lots of type hints and are in

00:12:21,470 --> 00:12:24,620
my pod a type check them you probably

00:12:23,089 --> 00:12:25,579
don't write code this way in part

00:12:24,620 --> 00:12:27,140
because I haven't lecture to you about

00:12:25,579 --> 00:12:28,519
it enough

00:12:27,140 --> 00:12:30,589
if you work with me you'll be lectured

00:12:28,519 --> 00:12:32,600
about it a lot but also in part because

00:12:30,589 --> 00:12:35,060
notebooks again don't have a great story

00:12:32,600 --> 00:12:38,020
for using these type hints and checking

00:12:35,060 --> 00:12:40,760
them so that's really tough for me

00:12:38,020 --> 00:12:44,180
this is not like pining this guy stuff

00:12:40,760 --> 00:12:46,040
this is me I live this so I work on

00:12:44,180 --> 00:12:48,320
Allen LLP which is a library for deep

00:12:46,040 --> 00:12:49,430
learning researchers and we don't want

00:12:48,320 --> 00:12:51,260
people to do bad science with our

00:12:49,430 --> 00:12:52,610
library so we like test the hell out of

00:12:51,260 --> 00:12:55,700
it we were on type checking or on

00:12:52,610 --> 00:12:57,620
linting we run everything and in our

00:12:55,700 --> 00:13:00,470
tutorials we tell our users to write

00:12:57,620 --> 00:13:02,660
tests for their code as well and this is

00:13:00,470 --> 00:13:05,170
something I strongly believe that tests

00:13:02,660 --> 00:13:07,910
are so important to doing good science

00:13:05,170 --> 00:13:09,529
okay so my next complaint is that

00:13:07,910 --> 00:13:12,320
notebooks are way less helpful than my

00:13:09,529 --> 00:13:15,709
text editor and some things are more

00:13:12,320 --> 00:13:19,870
easily demonstrated so let me show you

00:13:15,709 --> 00:13:22,730
so here's I use vs code and so I define

00:13:19,870 --> 00:13:24,980
X as equals 1 2 3 and I want to insert

00:13:22,730 --> 00:13:26,570
something so I do X's and I get this

00:13:24,980 --> 00:13:31,180
autocomplete the nicely pops up and I do

00:13:26,570 --> 00:13:34,970
insert and it says ok 0 is my index now

00:13:31,180 --> 00:13:37,670
10 is objects that's fantastic so now if

00:13:34,970 --> 00:13:38,600
I go and do the same thing over in my

00:13:37,670 --> 00:13:41,690
notebook

00:13:38,600 --> 00:13:45,920
well to start with one if I do X is

00:13:41,690 --> 00:13:47,300
equals one two three and then trying to

00:13:45,920 --> 00:13:49,660
type completion nothing happens because

00:13:47,300 --> 00:13:53,150
I have to do it in different cells so

00:13:49,660 --> 00:13:54,230
okay now if I run it and I do X's I get

00:13:53,150 --> 00:13:58,060
the completes but they don't have that

00:13:54,230 --> 00:14:01,130
extra information and if I do inserts

00:13:58,060 --> 00:14:03,080
that doesn't do anything and so if I

00:14:01,130 --> 00:14:04,550
want to get help I can run that and now

00:14:03,080 --> 00:14:08,750
I get the help but it took me a couple

00:14:04,550 --> 00:14:10,280
of extra steps and now I have sort of

00:14:08,750 --> 00:14:12,320
this mark of shame that that I had to

00:14:10,280 --> 00:14:13,730
use a question mark and if I delete it

00:14:12,320 --> 00:14:14,930
then suddenly I get cells that are out

00:14:13,730 --> 00:14:15,920
of order but if I leave it there

00:14:14,930 --> 00:14:18,200
everyone knows I didn't know how to use

00:14:15,920 --> 00:14:22,760
insert so I'm sort of it in a little bit

00:14:18,200 --> 00:14:25,220
of a bind this one is just kind of silly

00:14:22,760 --> 00:14:27,980
but you know I want to compute the cost

00:14:25,220 --> 00:14:30,470
of my van pool so I'll say it has ten

00:14:27,980 --> 00:14:32,660
riders and cost equals vanpool riders

00:14:30,470 --> 00:14:36,200
times fifty ok that's reasonable enough

00:14:32,660 --> 00:14:40,610
so let's go over here and do vanpool

00:14:36,200 --> 00:14:43,070
writers equals ten that's good so now if

00:14:40,610 --> 00:14:45,200
we do cost equals van and I want to do

00:14:43,070 --> 00:14:47,360
tab completion for some reason the tab

00:14:45,200 --> 00:14:51,950
completion seems to favor all the files

00:14:47,360 --> 00:14:54,380
in the directory over and it's possible

00:14:51,950 --> 00:14:56,450
that I might want to use a file name as

00:14:54,380 --> 00:15:01,610
my variable name but it's sort of

00:14:56,450 --> 00:15:04,940
unlikely the next one which is a little

00:15:01,610 --> 00:15:08,150
bit tougher so like I said I use these

00:15:04,940 --> 00:15:10,970
type hints so from typing import list

00:15:08,150 --> 00:15:12,500
and I have some function deff F which

00:15:10,970 --> 00:15:15,650
let's take it wise which is a list of

00:15:12,500 --> 00:15:17,270
strings and it will return none and so

00:15:15,650 --> 00:15:19,340
one of the joys of using type intz is

00:15:17,270 --> 00:15:20,660
that now I can give this kind of

00:15:19,340 --> 00:15:23,000
autocomplete on this variable just

00:15:20,660 --> 00:15:25,340
because I've told my my editor this is a

00:15:23,000 --> 00:15:30,770
list so now you can give me things like

00:15:25,340 --> 00:15:34,720
that so in a notebook because you know

00:15:30,770 --> 00:15:34,720
it's you to typing import list

00:15:36,399 --> 00:15:40,339
because you have to execute yourself

00:15:38,300 --> 00:15:43,040
before you can do that as far as I can

00:15:40,339 --> 00:15:48,199
tell and I may be wrong but I can figure

00:15:43,040 --> 00:15:50,420
out we do it it is impossible to get

00:15:48,199 --> 00:15:51,440
that kind of time completion and so

00:15:50,420 --> 00:15:53,240
you're thinking okay I don't use this

00:15:51,440 --> 00:15:55,040
kind of type in which you probably don't

00:15:53,240 --> 00:15:58,579
this only I do but here's one thing that

00:15:55,040 --> 00:16:02,360
you probably do use so you know file dot

00:15:58,579 --> 00:16:05,899
txt as F F dot and now here I get

00:16:02,360 --> 00:16:08,149
autocomplete on all my nice file

00:16:05,899 --> 00:16:14,990
commands whereas if I tried you the same

00:16:08,149 --> 00:16:16,850
thing over here I got nothing so so

00:16:14,990 --> 00:16:20,060
that's just a way that my editor is a

00:16:16,850 --> 00:16:22,009
lot more helpful to me then working in a

00:16:20,060 --> 00:16:24,019
notebook is and that's kind of a small

00:16:22,009 --> 00:16:26,720
frustration but it's kind of integral to

00:16:24,019 --> 00:16:29,000
the way that I do my work so these are

00:16:26,720 --> 00:16:31,250
just slides that I have showing the same

00:16:29,000 --> 00:16:35,540
things in case it didn't work but I'll

00:16:31,250 --> 00:16:37,040
just skip past them okay so there is an

00:16:35,540 --> 00:16:38,389
extension called hinterland that I found

00:16:37,040 --> 00:16:40,880
that does some of these autocomplete

00:16:38,389 --> 00:16:42,370
type things but some of its autocomplete

00:16:40,880 --> 00:16:44,600
behavior is it is kind of questionable

00:16:42,370 --> 00:16:46,399
and it still can only autocomplete

00:16:44,600 --> 00:16:47,720
things that have been executed which

00:16:46,399 --> 00:16:49,880
means it still can't handle these type

00:16:47,720 --> 00:16:52,190
intz or the with blocks that I showed

00:16:49,880 --> 00:16:53,779
you the other thing is that my editor

00:16:52,190 --> 00:16:55,760
has it integrated linter so if I do

00:16:53,779 --> 00:16:57,800
something you know mistaken like hey I

00:16:55,760 --> 00:17:00,170
forgot to use one of my variables it

00:16:57,800 --> 00:17:01,850
will underline it and say hey by the way

00:17:00,170 --> 00:17:04,880
you forgot to use this variable you

00:17:01,850 --> 00:17:06,110
probably did something wrong I couldn't

00:17:04,880 --> 00:17:09,740
figure out a way to get that kind of

00:17:06,110 --> 00:17:11,720
feature in a notebook I did you know

00:17:09,740 --> 00:17:13,880
look is there a way that I can run some

00:17:11,720 --> 00:17:15,949
kind of linting on my notebook and you

00:17:13,880 --> 00:17:17,870
know there is one solution that I could

00:17:15,949 --> 00:17:20,089
install this and use a percent percent

00:17:17,870 --> 00:17:21,319
pepete cell magic for each cell and then

00:17:20,089 --> 00:17:24,350
there was another one where I could

00:17:21,319 --> 00:17:26,449
install PI code style magic and two

00:17:24,350 --> 00:17:27,890
percent percent pi code style for each

00:17:26,449 --> 00:17:31,669
cell and then there was another one

00:17:27,890 --> 00:17:33,140
where I could do these other things but

00:17:31,669 --> 00:17:35,450
anyway whatever it is it's a lot of

00:17:33,140 --> 00:17:38,419
friction and it didn't get me the same

00:17:35,450 --> 00:17:39,919
feature that I get in my IDE which is

00:17:38,419 --> 00:17:43,669
when it helps me you know be productive

00:17:39,919 --> 00:17:45,580
and write good code and it's possible

00:17:43,669 --> 00:17:47,960
that you know some of these things are

00:17:45,580 --> 00:17:49,850
addressed in the next generation Jupiter

00:17:47,960 --> 00:17:51,020
lab but in the version

00:17:49,850 --> 00:17:53,480
this is what happens when I tried to do

00:17:51,020 --> 00:17:57,620
tab-completion in the text editor and so

00:17:53,480 --> 00:17:59,690
it didn't do what I wanted either so

00:17:57,620 --> 00:18:03,950
many simply doesn't know books encourage

00:17:59,690 --> 00:18:06,530
bad processes so I saw this on Twitter

00:18:03,950 --> 00:18:08,299
fairly recently jupiter notebooks can

00:18:06,530 --> 00:18:10,340
now share kernels within jupiter labs

00:18:08,299 --> 00:18:13,880
makes it easy to share state between

00:18:10,340 --> 00:18:25,340
notebooks so this is fantastic

00:18:13,880 --> 00:18:27,260
and I tried very I tried very hard to

00:18:25,340 --> 00:18:30,830
think if I could come up with a non evil

00:18:27,260 --> 00:18:34,070
application of this functionality and I

00:18:30,830 --> 00:18:36,200
was not able to but you know so it may

00:18:34,070 --> 00:18:37,460
just be kind of above my paygrade cuz I

00:18:36,200 --> 00:18:39,020
have the small brain where I have to run

00:18:37,460 --> 00:18:40,309
commands in order in the console and

00:18:39,020 --> 00:18:41,990
then you know you might be a little bit

00:18:40,309 --> 00:18:43,520
more enlightened and run commands out of

00:18:41,990 --> 00:18:45,380
order in a notebook but then you need

00:18:43,520 --> 00:18:46,850
the cosmic brain to run commands an

00:18:45,380 --> 00:18:58,340
indeterminant order across multiple

00:18:46,850 --> 00:18:59,450
notebooks so you know once everyone knew

00:18:58,340 --> 00:19:01,100
that I was running this talk he started

00:18:59,450 --> 00:19:03,230
coming in with their Jupiter problems

00:19:01,100 --> 00:19:04,250
and said you don't like Jupiter you

00:19:03,230 --> 00:19:05,720
listen you must know a lot about

00:19:04,250 --> 00:19:07,340
notebooks tell me how does solve my

00:19:05,720 --> 00:19:08,600
problem so here's someone who said you

00:19:07,340 --> 00:19:10,370
know when I have a huge data set I'm

00:19:08,600 --> 00:19:12,320
used to saving time by just keeping it

00:19:10,370 --> 00:19:13,730
in memory and my notebook and then

00:19:12,320 --> 00:19:15,679
running different analyses off of it and

00:19:13,730 --> 00:19:17,780
I asked why don't you just persist the

00:19:15,679 --> 00:19:19,309
process data that seems sort of safer

00:19:17,780 --> 00:19:22,429
and more replicable than having it

00:19:19,309 --> 00:19:23,419
hanging around in memory and you seem to

00:19:22,429 --> 00:19:26,270
agree that that was a pretty good

00:19:23,419 --> 00:19:28,880
solution okay so this one I you will

00:19:26,270 --> 00:19:30,260
find probably controversial notebooks

00:19:28,880 --> 00:19:34,240
hinder reproducible and extensible

00:19:30,260 --> 00:19:36,409
science and yeah I'm serious

00:19:34,240 --> 00:19:38,030
so don't take it from me take it from

00:19:36,409 --> 00:19:39,169
Francois Shelley but don't tell them

00:19:38,030 --> 00:19:41,919
that I quoted them in this tea party

00:19:39,169 --> 00:19:44,150
doesn't agree with me about notebooks

00:19:41,919 --> 00:19:46,159
poorly factored code is bad science

00:19:44,150 --> 00:19:48,590
hinders reproducibility increases

00:19:46,159 --> 00:19:52,630
chances of an estate notebooks are a

00:19:48,590 --> 00:19:55,760
recipe for poorly factored code okay so

00:19:52,630 --> 00:19:57,020
this is an idea that my co-workers and I

00:19:55,760 --> 00:20:00,830
were kicking around at lunch fairly

00:19:57,020 --> 00:20:02,789
recently and we thought we could use a

00:20:00,830 --> 00:20:04,320
neural network to generate some

00:20:02,789 --> 00:20:07,349
and there's more to it but this was kind

00:20:04,320 --> 00:20:08,190
of at the core and so I thought you know

00:20:07,349 --> 00:20:09,570
I don't want to read them at the wheel

00:20:08,190 --> 00:20:11,429
let me find someone else who's done this

00:20:09,570 --> 00:20:13,769
and I use PI torch so I said let's find

00:20:11,429 --> 00:20:16,079
a library that does midian pi torch and

00:20:13,769 --> 00:20:18,299
so there's the first result they've got

00:20:16,079 --> 00:20:21,779
to get our repo so I'll go check it out

00:20:18,299 --> 00:20:23,339
and so you know I go there and all I see

00:20:21,779 --> 00:20:25,109
is a notebooks folder you know I was

00:20:23,339 --> 00:20:26,399
hoping there'd be a model PI R models

00:20:25,109 --> 00:20:27,929
dot Pi or something that could look at

00:20:26,399 --> 00:20:31,529
it and get a sense of how the model

00:20:27,929 --> 00:20:34,049
works but they actually have just a

00:20:31,529 --> 00:20:36,690
notebook that trains their model so you

00:20:34,049 --> 00:20:39,959
know I go there and they got a much

00:20:36,690 --> 00:20:42,329
imports is that part or 0.3 0.4 0.4 0.1

00:20:39,959 --> 00:20:45,389
I don't know I can guess based on the

00:20:42,329 --> 00:20:47,369
commit date but it doesn't say and just

00:20:45,389 --> 00:20:48,959
as an aside I went to look is there a

00:20:47,369 --> 00:20:51,119
good story around managing requirements

00:20:48,959 --> 00:20:52,949
for notebooks I couldn't find one but

00:20:51,119 --> 00:20:54,479
someone hopefully on Stack Overflow said

00:20:52,949 --> 00:20:56,339
that good libraries are written to be

00:20:54,479 --> 00:21:00,839
backwards compatible so ideally any

00:20:56,339 --> 00:21:05,069
version should do I I downloaded that

00:21:00,839 --> 00:21:07,049
answer okay so this is the code for

00:21:05,069 --> 00:21:08,309
training the model that I found so you

00:21:07,049 --> 00:21:10,709
know in one cell you got model

00:21:08,309 --> 00:21:12,719
definition in a nutshell they've got

00:21:10,709 --> 00:21:15,209
model instantiation with some hard-coded

00:21:12,719 --> 00:21:17,190
parameters then lower in that cell they

00:21:15,209 --> 00:21:19,319
got more parameters and the next cell

00:21:17,190 --> 00:21:21,089
they've got some hard-coded paths then

00:21:19,319 --> 00:21:24,899
further down there's more parameters and

00:21:21,089 --> 00:21:26,729
then finally a training loop so this

00:21:24,899 --> 00:21:27,329
code is pretty much impossible for me to

00:21:26,729 --> 00:21:28,139
use

00:21:27,329 --> 00:21:29,489
you know first started looking at

00:21:28,139 --> 00:21:31,019
notebooks manually install all the

00:21:29,489 --> 00:21:33,449
dependencies and hope that I got the

00:21:31,019 --> 00:21:35,039
right version then either I can run it

00:21:33,449 --> 00:21:37,889
the exact same way on the exact same

00:21:35,039 --> 00:21:39,269
data at the exact same paths or I can

00:21:37,889 --> 00:21:41,069
copy the notebook and try and figure out

00:21:39,269 --> 00:21:42,779
how to modify it which forces me to work

00:21:41,069 --> 00:21:44,190
in a notebook or I can do a lot of work

00:21:42,779 --> 00:21:45,839
to copy and paste the right parts into a

00:21:44,190 --> 00:21:48,749
module that can import into my own code

00:21:45,839 --> 00:21:51,719
and yes there's a tool called env

00:21:48,749 --> 00:21:53,129
converts but and that does get the code

00:21:51,719 --> 00:21:54,839
out of the notebook but it still mixes

00:21:53,129 --> 00:21:56,519
the library and the execution code I

00:21:54,839 --> 00:21:57,929
still have to go through and line by

00:21:56,519 --> 00:21:59,429
line figure out which parts I need to

00:21:57,929 --> 00:22:01,679
change it customized still no

00:21:59,429 --> 00:22:03,929
requirements or tests and still a few

00:22:01,679 --> 00:22:05,729
comments and so I want to be I want to

00:22:03,929 --> 00:22:08,039
be fair this is someone's fun project

00:22:05,729 --> 00:22:09,929
and so like good for them for sharing

00:22:08,039 --> 00:22:11,039
what they did I don't want to you know

00:22:09,929 --> 00:22:12,959
look down on them for sharing what they

00:22:11,039 --> 00:22:14,069
did I think they probably thought

00:22:12,959 --> 00:22:15,839
they're being helpful by providing

00:22:14,069 --> 00:22:16,559
notebooks but what they did was make it

00:22:15,839 --> 00:22:18,690
sort of pong

00:22:16,559 --> 00:22:20,730
but not easy for me to repeat their

00:22:18,690 --> 00:22:22,649
exact same code with their exact same

00:22:20,730 --> 00:22:24,480
data at their exact same pass and if I

00:22:22,649 --> 00:22:26,159
have all the right dependencies and

00:22:24,480 --> 00:22:28,769
making it very hard for me to build new

00:22:26,159 --> 00:22:30,570
things on top of their code and you know

00:22:28,769 --> 00:22:33,299
lots of non notebook code has these same

00:22:30,570 --> 00:22:36,929
issues but notebooks sort of implicitly

00:22:33,299 --> 00:22:41,460
encourage this workflow but you know you

00:22:36,929 --> 00:22:43,710
can imagine an alternative requirements

00:22:41,460 --> 00:22:45,720
are tax that indicates here's exactly

00:22:43,710 --> 00:22:48,629
the dependencies you need a clean

00:22:45,720 --> 00:22:50,309
parametrize Abul load data module and a

00:22:48,629 --> 00:22:52,590
clean parametrizing bill model with good

00:22:50,309 --> 00:22:54,539
documentation and unit tests you're an

00:22:52,590 --> 00:22:55,889
easy way to programmatically specify all

00:22:54,539 --> 00:22:57,960
the model parameters and so on

00:22:55,889 --> 00:22:59,730
and you know a script that replicates

00:22:57,960 --> 00:23:01,740
exactly the original result that can be

00:22:59,730 --> 00:23:04,230
tweaking obvious ways to run novel

00:23:01,740 --> 00:23:06,019
variants and and so this is what we do

00:23:04,230 --> 00:23:07,980
on my team at work this is the code for

00:23:06,019 --> 00:23:09,840
producing ELMO which is a ton of

00:23:07,980 --> 00:23:12,299
contextual word embeddings that one of

00:23:09,840 --> 00:23:14,369
my colleagues came up with and so the

00:23:12,299 --> 00:23:16,379
installation instruction says run pip

00:23:14,369 --> 00:23:18,330
install this exact thing run Python set

00:23:16,379 --> 00:23:21,029
up dot pi install and then run the test

00:23:18,330 --> 00:23:22,860
and then when you want to train your own

00:23:21,029 --> 00:23:24,570
language model here's the command to run

00:23:22,860 --> 00:23:26,399
it's very obvious where to put in your

00:23:24,570 --> 00:23:28,529
own parameters and if you want to go and

00:23:26,399 --> 00:23:29,940
start you know creating your own

00:23:28,529 --> 00:23:31,499
variations it's very easy to look at the

00:23:29,940 --> 00:23:34,679
code and make those modifications and

00:23:31,499 --> 00:23:36,090
obvious where it's completed notebooks

00:23:34,679 --> 00:23:38,249
make it hard to collaborate across media

00:23:36,090 --> 00:23:40,740
so what do I mean by this

00:23:38,249 --> 00:23:41,970
imagine PI torch slack beginner Channel

00:23:40,740 --> 00:23:43,529
I'm a beginner that's where I hang out

00:23:41,970 --> 00:23:44,789
someone asked a question I don't

00:23:43,529 --> 00:23:47,220
understand what my code it's not working

00:23:44,789 --> 00:23:49,049
I understand why it's not working so I

00:23:47,220 --> 00:23:50,399
want to help you've done something wrong

00:23:49,049 --> 00:23:51,840
let me create a really minimal

00:23:50,399 --> 00:23:54,240
reproduction that shows you exactly

00:23:51,840 --> 00:23:56,009
where you went astray so I did it I

00:23:54,240 --> 00:23:58,470
copied and pasted it and I explained it

00:23:56,009 --> 00:23:59,940
and you know you could say it probably

00:23:58,470 --> 00:24:02,039
took you a few tries to get that code

00:23:59,940 --> 00:24:04,110
exactly right I bet a notebook would

00:24:02,039 --> 00:24:06,389
have made it easier okay so I can do

00:24:04,110 --> 00:24:08,490
that so I go to a notebook and I do the

00:24:06,389 --> 00:24:10,460
same code and it works the same but now

00:24:08,490 --> 00:24:12,779
I need a copy and paste it into slack

00:24:10,460 --> 00:24:14,159
and that turned out to be more difficult

00:24:12,779 --> 00:24:16,110
than I was expecting

00:24:14,159 --> 00:24:17,399
I tried select all copy paste that got

00:24:16,110 --> 00:24:19,919
me a bunch of like headers and other

00:24:17,399 --> 00:24:21,690
stuff I tried select cells edit copy

00:24:19,919 --> 00:24:23,909
cells based which didn't seem to do

00:24:21,690 --> 00:24:26,159
anything I did select cells copy paste

00:24:23,909 --> 00:24:27,929
that got the inputs but not the outputs

00:24:26,159 --> 00:24:29,700
which made it hard to illustrate so

00:24:27,929 --> 00:24:30,580
basically I could not figure out how do

00:24:29,700 --> 00:24:32,380
I copy and paste

00:24:30,580 --> 00:24:34,929
cohdon outputs from a notebook into

00:24:32,380 --> 00:24:36,279
slack and as far as I can tell in

00:24:34,929 --> 00:24:38,460
Jupiter lab the things I tried that made

00:24:36,279 --> 00:24:40,570
other versions wouldn't work at all so

00:24:38,460 --> 00:24:41,919
you know this might seem like a

00:24:40,570 --> 00:24:44,260
frivolous complaint but I actually spend

00:24:41,919 --> 00:24:46,510
asked my job a lot of time debugging

00:24:44,260 --> 00:24:48,760
people's Python issues with slack and

00:24:46,510 --> 00:24:51,190
similarly I spend a lot of time pasting

00:24:48,760 --> 00:24:53,409
code into github issues and code reviews

00:24:51,190 --> 00:24:56,440
and so making it impossible for me to do

00:24:53,409 --> 00:24:59,409
that it's kind of a non-starter for me

00:24:56,440 --> 00:25:00,970
one other nuisance if I do kernel

00:24:59,409 --> 00:25:03,700
restart and run all it gets to this

00:25:00,970 --> 00:25:05,830
error cell and it just stops executing

00:25:03,700 --> 00:25:07,149
the error was expected and that was what

00:25:05,830 --> 00:25:09,010
I want to demonstrate but it won't run

00:25:07,149 --> 00:25:10,990
any that cells after that um so you know

00:25:09,010 --> 00:25:13,090
I went and I found this was a known

00:25:10,990 --> 00:25:15,630
issue and that I can get around this by

00:25:13,090 --> 00:25:17,980
installing the run tools extension and

00:25:15,630 --> 00:25:20,049
installing this and configuring this in

00:25:17,980 --> 00:25:21,519
doing the server but that means that

00:25:20,049 --> 00:25:22,630
anyone that I share the notebook with

00:25:21,519 --> 00:25:24,309
would have to go through all those same

00:25:22,630 --> 00:25:26,559
steps to get it to work the same way and

00:25:24,309 --> 00:25:30,700
so that makes it not really reproducible

00:25:26,559 --> 00:25:34,450
as an illustration okay notebooks make

00:25:30,700 --> 00:25:36,220
it easy to teach poorly ok so how many

00:25:34,450 --> 00:25:38,110
of you ever seen a jupiter notebook

00:25:36,220 --> 00:25:40,000
tutorial where there's not really much

00:25:38,110 --> 00:25:41,889
to the tutorial other than pressing

00:25:40,000 --> 00:25:43,389
shift in order to run one line at a time

00:25:41,889 --> 00:25:48,880
and get to the bottom and then you're

00:25:43,389 --> 00:25:50,500
done with the tutorial ok so you know I

00:25:48,880 --> 00:25:51,700
went to the official Jupiter wiki and

00:25:50,500 --> 00:25:53,620
they've got a gallery of interesting

00:25:51,700 --> 00:25:55,419
notebooks and I thought if there's a

00:25:53,620 --> 00:25:57,370
place to find a great tutorial than

00:25:55,419 --> 00:25:59,710
Jupiter surely it's the official Jupiter

00:25:57,370 --> 00:26:01,419
wiki that has a gallery interesting

00:25:59,710 --> 00:26:03,159
notebooks here's a Python tutorial let's

00:26:01,419 --> 00:26:08,860
see what is the Python tutorial that

00:26:03,159 --> 00:26:11,049
showcases the power of notebooks ok so

00:26:08,860 --> 00:26:12,460
this is what the tutorial looks like you

00:26:11,049 --> 00:26:14,139
know let's learn while while some

00:26:12,460 --> 00:26:16,179
condition algorithm executable cell

00:26:14,139 --> 00:26:19,750
break as the name says is used to break

00:26:16,179 --> 00:26:21,549
out of a loop executable cell so this is

00:26:19,750 --> 00:26:22,659
a you know shift in or shift enter or

00:26:21,549 --> 00:26:25,149
shift down or shift enter and there's

00:26:22,659 --> 00:26:26,679
really nothing going on here beyond the

00:26:25,149 --> 00:26:28,809
fact that the cells are executable you

00:26:26,679 --> 00:26:32,980
know it continues if you want to learn

00:26:28,809 --> 00:26:35,710
about if these are executable cells are

00:26:32,980 --> 00:26:37,559
they a great one are they a great way of

00:26:35,710 --> 00:26:40,809
teaching if and if-else

00:26:37,559 --> 00:26:42,090
not to me is this a great showcase of

00:26:40,809 --> 00:26:44,430
what

00:26:42,090 --> 00:26:46,530
notebooks are capable of

00:26:44,430 --> 00:26:48,480
again not to me but you know this is

00:26:46,530 --> 00:26:50,460
from the curated collection of jupiter

00:26:48,480 --> 00:26:54,450
notebooks that are notable it was an

00:26:50,460 --> 00:26:57,960
introductory tutorial so that's not to

00:26:54,450 --> 00:26:59,460
say you can't do really nice jupiter

00:26:57,960 --> 00:27:03,180
tutorials but but it feels like too

00:26:59,460 --> 00:27:04,890
often there's this notion of every cell

00:27:03,180 --> 00:27:08,910
must be runnable and that's kind of the

00:27:04,890 --> 00:27:10,230
bulk of what i'm producing the website

00:27:08,910 --> 00:27:12,330
is that notebooks make it hard for me to

00:27:10,230 --> 00:27:16,680
teach the way that i want to teach okay

00:27:12,330 --> 00:27:18,630
so this is a from a book a real book

00:27:16,680 --> 00:27:20,730
written by me it's called data science

00:27:18,630 --> 00:27:22,770
from scratch available wherever books

00:27:20,730 --> 00:27:26,970
are sold second edition being written as

00:27:22,770 --> 00:27:28,620
we speak now exactly to speak but to

00:27:26,970 --> 00:27:29,700
speak so several times people have said

00:27:28,620 --> 00:27:31,230
you should make a notebook version of

00:27:29,700 --> 00:27:33,500
your book and I said okay sure let's uh

00:27:31,230 --> 00:27:37,440
let's give it a try

00:27:33,500 --> 00:27:39,600
so you know this is the name aces

00:27:37,440 --> 00:27:41,640
chapter and Mookie's data science from

00:27:39,600 --> 00:27:43,350
scratch so talk about databases we

00:27:41,640 --> 00:27:44,970
implement a database from scratch this

00:27:43,350 --> 00:27:46,800
involves creating a fairly large class

00:27:44,970 --> 00:27:48,150
that represents the database so how do I

00:27:46,800 --> 00:27:49,650
introduce this class I say well let's

00:27:48,150 --> 00:27:52,230
introduce a table and let's introduce

00:27:49,650 --> 00:27:53,910
the first method which is insert okay

00:27:52,230 --> 00:27:57,060
now let's show some examples of how to

00:27:53,910 --> 00:27:58,680
use this insert functionality and now

00:27:57,060 --> 00:28:01,650
let's go back and talk about the next

00:27:58,680 --> 00:28:05,270
method which is update so you know I

00:28:01,650 --> 00:28:07,200
tried to point this over to notebook and

00:28:05,270 --> 00:28:09,660
when I got to the part where I was

00:28:07,200 --> 00:28:10,920
trying to find the second method I ran

00:28:09,660 --> 00:28:13,380
into a problem and the problem was that

00:28:10,920 --> 00:28:15,540
I had already defined the class and so

00:28:13,380 --> 00:28:17,880
this idea that every cell has to be

00:28:15,540 --> 00:28:21,150
executable standalone meant that I could

00:28:17,880 --> 00:28:22,680
not go back and later add new methods to

00:28:21,150 --> 00:28:25,050
that class even if that's what I wanted

00:28:22,680 --> 00:28:26,430
to do pedagogically and you know you

00:28:25,050 --> 00:28:27,690
could say your book shouldn't split the

00:28:26,430 --> 00:28:29,820
class into multiple pieces like that

00:28:27,690 --> 00:28:32,400
that's fair but the alternative is

00:28:29,820 --> 00:28:33,750
dumping pages of code at once on the

00:28:32,400 --> 00:28:34,680
reader and then referring back to it bit

00:28:33,750 --> 00:28:36,780
by bit

00:28:34,680 --> 00:28:38,370
and I personally hate books that do that

00:28:36,780 --> 00:28:42,150
and so I made a very deliberate choice

00:28:38,370 --> 00:28:43,320
not to write my book that way and I'm

00:28:42,150 --> 00:28:46,170
not the only one who wants this I found

00:28:43,320 --> 00:28:48,150
an issue people wanted to find a Python

00:28:46,170 --> 00:28:51,240
class across multiple cells so other

00:28:48,150 --> 00:28:52,890
people have desired this as well one

00:28:51,240 --> 00:28:54,600
solution is called Jupiter dynamic

00:28:52,890 --> 00:28:56,190
classes so I have to do is when you want

00:28:54,600 --> 00:28:57,810
to add the new method you just add this

00:28:56,190 --> 00:29:01,200
percent percent

00:28:57,810 --> 00:29:01,770
to dog or whatever so that's that's one

00:29:01,200 --> 00:29:04,350
solution

00:29:01,770 --> 00:29:05,520
you know another solution this was cover

00:29:04,350 --> 00:29:07,080
I would not have thought of it myself

00:29:05,520 --> 00:29:09,180
is that I define a class with one method

00:29:07,080 --> 00:29:11,400
that I redefined the class as a subclass

00:29:09,180 --> 00:29:13,340
of itself and I have the next method and

00:29:11,400 --> 00:29:16,440
then I keep doing that

00:29:13,340 --> 00:29:18,500
it's it's clever I don't think I want to

00:29:16,440 --> 00:29:20,910
do in my book but like it

00:29:18,500 --> 00:29:22,140
this was also suggested just to find the

00:29:20,910 --> 00:29:25,200
function it's kind of a bear function

00:29:22,140 --> 00:29:28,560
and then assign it to the class table

00:29:25,200 --> 00:29:29,880
updating was update so you know every

00:29:28,560 --> 00:29:32,520
one of these requires presenting

00:29:29,880 --> 00:29:34,590
unnatural code to my readers just to

00:29:32,520 --> 00:29:36,390
appease the notebook gods and I don't I

00:29:34,590 --> 00:29:38,910
don't want to present unnatural code to

00:29:36,390 --> 00:29:40,680
my readers I'm very I try to be very

00:29:38,910 --> 00:29:42,750
thoughtful about how can I best use code

00:29:40,680 --> 00:29:44,880
to illustrate these concepts and to

00:29:42,750 --> 00:29:46,500
teach and so adding in kind of cruft

00:29:44,880 --> 00:29:49,050
that's just there for the purpose of

00:29:46,500 --> 00:29:51,330
making it run in a notebook is not great

00:29:49,050 --> 00:29:52,740
for me that's a complicated example but

00:29:51,330 --> 00:29:54,510
here's a simpler example also from my

00:29:52,740 --> 00:29:56,550
book I want to motivate when you might

00:29:54,510 --> 00:29:58,380
want to use a set versus a list and so I

00:29:56,550 --> 00:30:00,180
say imagine you have a list it's stop

00:29:58,380 --> 00:30:02,970
words eight and that plus hundreds of

00:30:00,180 --> 00:30:05,160
other words plus yet and you and why you

00:30:02,970 --> 00:30:07,410
would want to convert it to a set before

00:30:05,160 --> 00:30:09,780
checking for membership now hopefully

00:30:07,410 --> 00:30:12,120
it's clear what's going on here

00:30:09,780 --> 00:30:14,250
and I personally think that this would

00:30:12,120 --> 00:30:16,110
not be improved by forcing me to define

00:30:14,250 --> 00:30:18,120
hundreds of other words as a variable

00:30:16,110 --> 00:30:20,190
and then would actually make the example

00:30:18,120 --> 00:30:21,840
less clear see there would be a short

00:30:20,190 --> 00:30:23,820
list or I just have a list of hundreds

00:30:21,840 --> 00:30:27,120
of other words for no reason so so

00:30:23,820 --> 00:30:28,830
basically my point is that it's not

00:30:27,120 --> 00:30:30,570
always the case that they aren't having

00:30:28,830 --> 00:30:33,870
every code snippet executable is the

00:30:30,570 --> 00:30:37,290
best way to communicate something but

00:30:33,870 --> 00:30:40,380
notebooks sort of force you into that

00:30:37,290 --> 00:30:43,620
format and that's what I just said okay

00:30:40,380 --> 00:30:44,930
so what do I do instead if I don't use

00:30:43,620 --> 00:30:47,850
notebooks because generally I don't use

00:30:44,930 --> 00:30:51,120
notebooks one is I make markdown

00:30:47,850 --> 00:30:53,930
tutorials and Docs so you can see they

00:30:51,120 --> 00:30:57,900
look a lot like Jupiter notebooks

00:30:53,930 --> 00:31:00,360
visually but the snippets are not

00:30:57,900 --> 00:31:02,370
executable which is fine because again

00:31:00,360 --> 00:31:03,930
here I'm showing you a function

00:31:02,370 --> 00:31:05,970
signature it shouldn't be executable

00:31:03,930 --> 00:31:08,010
anyway below I'm showing you just the

00:31:05,970 --> 00:31:09,810
constructor for a class by itself it

00:31:08,010 --> 00:31:11,570
also should not be executable anyway so

00:31:09,810 --> 00:31:14,060
this is how I write to Troy

00:31:11,570 --> 00:31:18,410
and docks and it works pretty well for

00:31:14,060 --> 00:31:22,420
me for my actual development stack I use

00:31:18,410 --> 00:31:25,760
vs code and then the ipython console and

00:31:22,420 --> 00:31:27,950
I was going to give you a demo of what

00:31:25,760 --> 00:31:29,630
that looks like just because some people

00:31:27,950 --> 00:31:33,590
don't know what that looks like and so I

00:31:29,630 --> 00:31:36,500
want to you know demonstrate logistic

00:31:33,590 --> 00:31:39,500
regression so we're gonna do logistic

00:31:36,500 --> 00:31:46,360
regression on some digits so from

00:31:39,500 --> 00:31:50,450
scikit-learn data sets import load

00:31:46,360 --> 00:31:55,790
digits and let's say digits equals load

00:31:50,450 --> 00:31:57,950
digits so now decide so I'm gonna write

00:31:55,790 --> 00:32:00,320
Python and what I'll do is I'll just run

00:31:57,950 --> 00:32:02,360
that file and when you use the run in

00:32:00,320 --> 00:32:03,650
the console it runs through and it loads

00:32:02,360 --> 00:32:07,870
all those variables into memory so now

00:32:03,650 --> 00:32:11,960
if I say digits I can inspect it and

00:32:07,870 --> 00:32:14,410
data seems to be the arrays let me take

00:32:11,960 --> 00:32:17,300
a step back what our digits this is a

00:32:14,410 --> 00:32:19,820
digit recognition data set so it's a

00:32:17,300 --> 00:32:22,490
bunch of 8x8 images of digits with what

00:32:19,820 --> 00:32:25,790
they're supposed to be so data is this

00:32:22,490 --> 00:32:27,790
length 64 array and target is the

00:32:25,790 --> 00:32:32,690
correct classes so I can pull those out

00:32:27,790 --> 00:32:36,800
data equals digits data and target

00:32:32,690 --> 00:32:39,350
equals digits target so now let's go

00:32:36,800 --> 00:32:41,120
back and run it again and data that

00:32:39,350 --> 00:32:43,760
looks good what's its shape its shape is

00:32:41,120 --> 00:32:45,050
1797 by 64 so I want to demonstrate a

00:32:43,760 --> 00:32:48,350
test and train said I'll take say the

00:32:45,050 --> 00:32:52,100
first 1500 and split it up that way so

00:32:48,350 --> 00:32:54,530
let's say my X train is data up to 1500

00:32:52,100 --> 00:32:57,980
which means that my X test will be data

00:32:54,530 --> 00:33:01,760
up to or from 1500 on similarly my Y

00:32:57,980 --> 00:33:06,620
train will be data or 19 at target up to

00:33:01,760 --> 00:33:09,740
1500 and my Y test equals target from

00:33:06,620 --> 00:33:10,280
1500 on so that's good so now I want to

00:33:09,740 --> 00:33:15,500
do a model

00:33:10,280 --> 00:33:18,650
so let's import from a scalar and linear

00:33:15,500 --> 00:33:20,650
model import logistic regression so

00:33:18,650 --> 00:33:23,600
we'll define a logistic regression model

00:33:20,650 --> 00:33:25,900
model equals logistic regression and I

00:33:23,600 --> 00:33:29,600
want to fit the model

00:33:25,900 --> 00:33:31,670
fit on x and y so that'll be X train and

00:33:29,600 --> 00:33:35,330
why train and then I want to make some

00:33:31,670 --> 00:33:39,080
prediction so I'll say predicted equals

00:33:35,330 --> 00:33:41,210
modeled up predict on X tests so let's

00:33:39,080 --> 00:33:45,830
say go back and run this again check

00:33:41,210 --> 00:33:48,380
this out and say predicted okay so those

00:33:45,830 --> 00:33:54,470
look like good predictions for what are

00:33:48,380 --> 00:33:56,540
these digits 0 to 9 and now let's do

00:33:54,470 --> 00:34:01,150
some metrics and see how good our

00:33:56,540 --> 00:34:03,850
predictions are so from a scalar and

00:34:01,150 --> 00:34:07,450
import so I want to do confusion matrix

00:34:03,850 --> 00:34:13,100
and I also want to do in accuracy score

00:34:07,450 --> 00:34:17,450
so WC m equals confusion matrix and it

00:34:13,100 --> 00:34:21,080
will Y true and Y predicted so Y true is

00:34:17,450 --> 00:34:25,460
just Y test and predicted as predicted

00:34:21,080 --> 00:34:31,220
and then a is accuracy score Y test and

00:34:25,460 --> 00:34:33,620
predicted one more time accuracy I'm

00:34:31,220 --> 00:34:35,300
sorry a is 88.8 so that's not terrible

00:34:33,620 --> 00:34:37,430
here's my confusion matrix that looks

00:34:35,300 --> 00:34:39,050
good so that's one it was a three half

00:34:37,430 --> 00:34:40,760
night predicting three and so on so

00:34:39,050 --> 00:34:45,770
let's uh let's visualize act like

00:34:40,760 --> 00:34:51,440
visualizing things so from from mat plot

00:34:45,770 --> 00:34:52,880
william import pie plot as PLT okay and

00:34:51,440 --> 00:34:58,910
I'm not that good at MATLAB so we'll see

00:34:52,880 --> 00:35:02,300
if I get this right so fig ax equals p

00:34:58,910 --> 00:35:05,660
ltd subplots and then unfortunate that's

00:35:02,300 --> 00:35:07,850
not types i don't get good types in

00:35:05,660 --> 00:35:10,370
there so ax dot not show the confusion

00:35:07,850 --> 00:35:12,530
matrix and i want to make a color bar

00:35:10,370 --> 00:35:17,240
with that so i'll do this and then i'll

00:35:12,530 --> 00:35:20,240
say fig color bar color bar and then fig

00:35:17,240 --> 00:35:25,070
dot save fig and let's call it sk

00:35:20,240 --> 00:35:29,240
learned up PNG so if i run it again

00:35:25,070 --> 00:35:31,130
let's see if it works so here's sk

00:35:29,240 --> 00:35:32,420
learned up and g so that looks pretty

00:35:31,130 --> 00:35:37,250
good but i would have liked to have done

00:35:32,420 --> 00:35:43,030
a title on it so let me go back and add

00:35:37,250 --> 00:35:43,030
a title fig that soup soup title

00:35:43,930 --> 00:35:52,850
confusion and now i can run it again and

00:35:49,480 --> 00:35:55,160
if i go here now it's got a title on it

00:35:52,850 --> 00:35:57,980
and i can proceed in that way so you're

00:35:55,160 --> 00:35:59,840
thinking this was possibly a lot more

00:35:57,980 --> 00:36:02,360
clunky and confusing than using a

00:35:59,840 --> 00:36:04,250
notebook and and possibly it was and the

00:36:02,360 --> 00:36:05,980
whole saving our plot in a different

00:36:04,250 --> 00:36:10,070
time having a look at it is not great

00:36:05,980 --> 00:36:11,450
where it's nice is okay now I want to

00:36:10,070 --> 00:36:13,280
start factoring some of this code out so

00:36:11,450 --> 00:36:17,180
I can test it and reuse it so you know

00:36:13,280 --> 00:36:21,530
let's do load data file name string as

00:36:17,180 --> 00:36:24,230
none and this will be at uple of numpy

00:36:21,530 --> 00:36:26,960
array and numpy array so I've just used

00:36:24,230 --> 00:36:29,720
some types that don't really have so I

00:36:26,960 --> 00:36:37,130
better import them important umpires in

00:36:29,720 --> 00:36:39,110
P and then from typing import tupple so

00:36:37,130 --> 00:36:43,220
that'll be good and now I'll just put

00:36:39,110 --> 00:36:46,760
all this inside a function and return

00:36:43,220 --> 00:36:48,980
data and targets ok so now I've got this

00:36:46,760 --> 00:36:52,190
inside a function of what I can do is I

00:36:48,980 --> 00:36:53,300
can go over and write a test for it so

00:36:52,190 --> 00:36:55,580
you know I want to test that load data

00:36:53,300 --> 00:37:00,530
works so I'll say data

00:36:55,580 --> 00:37:06,620
target equals load data and now I can

00:37:00,530 --> 00:37:10,190
assert that data dot shape equals 1797

00:37:06,620 --> 00:37:13,940
64 which i think is what it was and now

00:37:10,190 --> 00:37:20,900
I can run my test name data is not

00:37:13,940 --> 00:37:23,320
defined mmm so I already already broke

00:37:20,900 --> 00:37:23,320
it let's see

00:37:23,530 --> 00:37:33,370
yep do you target equals latina again so

00:37:28,240 --> 00:37:35,110
I know my just passes and so the virtue

00:37:33,370 --> 00:37:36,430
of doing this apart from being able to

00:37:35,110 --> 00:37:37,000
work in my text editor which I really

00:37:36,430 --> 00:37:39,430
appreciate

00:37:37,000 --> 00:37:40,390
is that now we can start factoring all

00:37:39,430 --> 00:37:42,040
these different pieces out into

00:37:40,390 --> 00:37:43,720
functions I can test them I can reuse

00:37:42,040 --> 00:37:47,820
them and I don't have to rewrite

00:37:43,720 --> 00:37:51,640
everything from the beginning each time

00:37:47,820 --> 00:37:53,410
so I promised that I would give you a

00:37:51,640 --> 00:37:57,130
chance to win me over so here's how you

00:37:53,410 --> 00:37:58,480
can win me over so one is the Jake plan

00:37:57,130 --> 00:38:00,460
Jupiter no votes could have a

00:37:58,480 --> 00:38:02,440
reproducibility mode where code cells

00:38:00,460 --> 00:38:03,520
are read only once executed new code

00:38:02,440 --> 00:38:05,290
cells cannot be inserted about

00:38:03,520 --> 00:38:07,360
previously executed cells and no cell

00:38:05,290 --> 00:38:11,560
can be executed until previous cells are

00:38:07,360 --> 00:38:13,180
executed so this is sort of how physical

00:38:11,560 --> 00:38:14,320
lab notebooks work when you're doing

00:38:13,180 --> 00:38:15,880
science and keeping results in a

00:38:14,320 --> 00:38:17,890
physical lab notebook you can't go back

00:38:15,880 --> 00:38:19,300
and like cross off the observations from

00:38:17,890 --> 00:38:21,490
yesterday and write new observations on

00:38:19,300 --> 00:38:23,530
top of them you have to keep going in

00:38:21,490 --> 00:38:25,240
order so something like this would

00:38:23,530 --> 00:38:26,650
alleviate a lot of my complaints but I

00:38:25,240 --> 00:38:28,390
also suspect that a lot of people would

00:38:26,650 --> 00:38:30,910
hate this workflow I could be wrong but

00:38:28,390 --> 00:38:31,990
that's my suspicion you could force

00:38:30,910 --> 00:38:33,850
people to name you notebooks that's

00:38:31,990 --> 00:38:37,510
really simple but I think it would be a

00:38:33,850 --> 00:38:40,150
good idea you could give me like I said

00:38:37,510 --> 00:38:42,400
ID a style autocomplete I really rely on

00:38:40,150 --> 00:38:43,660
it for my coding and it's very tough for

00:38:42,400 --> 00:38:45,250
me to code without it and it's the sort

00:38:43,660 --> 00:38:47,070
of thing where if you're not used to

00:38:45,250 --> 00:38:49,060
using it it can be hard to appreciate

00:38:47,070 --> 00:38:51,880
how much easier it makes your life but

00:38:49,060 --> 00:38:53,110
it makes my life a lot easier you know

00:38:51,880 --> 00:38:54,880
some kind of real type checking and

00:38:53,110 --> 00:38:56,950
linting I also rely on that a lot to

00:38:54,880 --> 00:38:59,230
write good code and so if there are a

00:38:56,950 --> 00:39:02,230
way to offer that that would be much

00:38:59,230 --> 00:39:03,760
appreciated definitely a better story

00:39:02,230 --> 00:39:05,740
around dependency management you know

00:39:03,760 --> 00:39:07,690
even on notebooks python has a huge

00:39:05,740 --> 00:39:09,310
problem with this so notebooks are not

00:39:07,690 --> 00:39:10,900
alone in this regard but if there are a

00:39:09,310 --> 00:39:12,310
way that notebooks could step up and say

00:39:10,900 --> 00:39:13,990
here's a great way to manage your

00:39:12,310 --> 00:39:16,900
dependencies that would be I think

00:39:13,990 --> 00:39:19,270
really helpful for reproducibility

00:39:16,900 --> 00:39:20,800
extensibility and things like that and

00:39:19,270 --> 00:39:22,060
then you know first-class supportive

00:39:20,800 --> 00:39:25,620
refactoring code out of notebooks into

00:39:22,060 --> 00:39:27,580
modules notebooks are good for

00:39:25,620 --> 00:39:29,680
experimenting things but like in the

00:39:27,580 --> 00:39:31,240
long run I firmly believe you want your

00:39:29,680 --> 00:39:32,020
code in modules you want unit tests on

00:39:31,240 --> 00:39:33,310
it you want to be able to reuse it

00:39:32,020 --> 00:39:35,410
between projects you want all these

00:39:33,310 --> 00:39:37,600
things and so the easier it is to get

00:39:35,410 --> 00:39:40,870
your code out and into a mode

00:39:37,600 --> 00:39:42,160
the better it is now the reality is

00:39:40,870 --> 00:39:44,320
you're not gonna provide me all these

00:39:42,160 --> 00:39:48,480
things and I'm not gonna switch

00:39:44,320 --> 00:39:51,070
notebooks but I hope that I've

00:39:48,480 --> 00:39:53,470
challenged you to think about one how

00:39:51,070 --> 00:39:55,480
your tools limit you to how to write

00:39:53,470 --> 00:39:58,120
better software three how to teach

00:39:55,480 --> 00:40:01,540
better for how to practice better

00:39:58,120 --> 00:40:04,210
science how different workflows can make

00:40:01,540 --> 00:40:07,720
your life easier and some ways you could

00:40:04,210 --> 00:40:11,710
make notebooks better so in conclusion I

00:40:07,720 --> 00:40:14,670
hope despite Jeremy's warning that this

00:40:11,710 --> 00:40:17,590
was not an unhelpful way to spend time

00:40:14,670 --> 00:40:18,760
and kono I next talked about how I don't

00:40:17,590 --> 00:40:19,750
like that slideshow program where

00:40:18,760 --> 00:40:25,540
sometimes the next slide is right

00:40:19,750 --> 00:40:29,920
sometimes the next slide is down I can't

00:40:25,540 --> 00:40:31,300
stand it and thank you all for coming so

00:40:29,920 --> 00:40:32,860
I will tweet out the slides and my

00:40:31,300 --> 00:40:35,590
twitter at Joel groups that's right

00:40:32,860 --> 00:40:38,290
there check out my book there's a new

00:40:35,590 --> 00:40:39,760
edition coming soon ish that will be

00:40:38,290 --> 00:40:42,370
updated to Python 3 and have some good

00:40:39,760 --> 00:40:44,200
stuff in it my blog is very infrequently

00:40:42,370 --> 00:40:46,300
updated but it's there I have a podcast

00:40:44,200 --> 00:40:47,170
I make live coding videos you can send

00:40:46,300 --> 00:40:49,000
me an email and tell me why I'm wrong

00:40:47,170 --> 00:40:51,250
and like everyone else on the Internet I

00:40:49,000 --> 00:40:53,350
have a SoundCloud which you can check

00:40:51,250 --> 00:40:56,710
out and see my stupid little experiments

00:40:53,350 --> 00:40:58,300
in music composition so I'm happy to

00:40:56,710 --> 00:41:10,069
take questions heckling feedback

00:40:58,300 --> 00:41:10,069
[Applause]

00:41:21,020 --> 00:41:24,410
I'll check it out

00:42:09,800 --> 00:42:15,750
no so so like I said um I feel like if

00:42:13,770 --> 00:42:17,310
you really want to explore data but you

00:42:15,750 --> 00:42:18,870
explore it in a way where I'm not going

00:42:17,310 --> 00:42:20,820
back and changing things already did but

00:42:18,870 --> 00:42:22,260
I'm appending to the end to me that

00:42:20,820 --> 00:42:23,670
makes it a much more compelling format

00:42:22,260 --> 00:42:25,320
for exploring data because I'm not going

00:42:23,670 --> 00:42:27,060
to get myself in this situation where I

00:42:25,320 --> 00:42:31,530
have inadvertently changed something I'm

00:42:27,060 --> 00:42:35,070
relying on and it's a mystery to me so

00:42:31,530 --> 00:42:38,400
that's that's one use case I also think

00:42:35,070 --> 00:42:41,210
they're great for communicating finished

00:42:38,400 --> 00:42:44,040
results like you said that if I have

00:42:41,210 --> 00:42:46,320
whether you execute them or not

00:42:44,040 --> 00:42:50,390
they're a good format for communicating

00:42:46,320 --> 00:42:50,390
so like there's this let me

00:42:50,420 --> 00:42:55,740
annotate it transformer which I don't

00:42:54,060 --> 00:43:00,420
know if you've seen this is sort of in

00:42:55,740 --> 00:43:03,270
my NOP world but basically someone took

00:43:00,420 --> 00:43:06,030
this really interesting google paper

00:43:03,270 --> 00:43:09,210
attentions all you need and made a

00:43:06,030 --> 00:43:10,410
notebook presentation of it that's a

00:43:09,210 --> 00:43:12,120
reimplementation of impact which is

00:43:10,410 --> 00:43:13,740
easier to understand but the thing is is

00:43:12,120 --> 00:43:15,360
that most people who are looking at this

00:43:13,740 --> 00:43:17,070
are not using it as an executable

00:43:15,360 --> 00:43:20,550
notebook he did that to make sure that

00:43:17,070 --> 00:43:22,170
it worked but you know this is just a

00:43:20,550 --> 00:43:23,370
markdown file that people are reading so

00:43:22,170 --> 00:43:26,040
I think this is a really nice

00:43:23,370 --> 00:43:28,350
presentation format and I think that the

00:43:26,040 --> 00:43:32,160
notebook probably enabled him to do this

00:43:28,350 --> 00:43:34,440
much better as this presentation but I

00:43:32,160 --> 00:43:36,600
think where it would go awry is if you

00:43:34,440 --> 00:43:38,310
started this is a really expensive thing

00:43:36,600 --> 00:43:40,980
to Train on multiple GPUs and it will

00:43:38,310 --> 00:43:43,620
train for a day on you know God knows

00:43:40,980 --> 00:43:45,510
how much data and so you don't need to

00:43:43,620 --> 00:43:46,890
tell people you can shift enter and run

00:43:45,510 --> 00:43:48,600
this cell and shift and run the cell

00:43:46,890 --> 00:43:52,110
it's really I'm using the code to

00:43:48,600 --> 00:43:56,090
illustrate how to do this without making

00:43:52,110 --> 00:43:56,090
it so you need to run each little piece

00:44:01,160 --> 00:44:33,540
yep so if you had to like market somehow

00:44:29,490 --> 00:44:41,670
that was transparent - it's an

00:44:33,540 --> 00:44:45,240
interesting question so there's there's

00:44:41,670 --> 00:44:49,230
I have two thoughts about that one is

00:44:45,240 --> 00:44:51,510
that it would be reasonable and possibly

00:44:49,230 --> 00:44:53,970
this is even the case that if a cell

00:44:51,510 --> 00:44:55,500
like starts off indented and it matches

00:44:53,970 --> 00:44:58,170
the annotation of the previous cell that

00:44:55,500 --> 00:44:59,910
it just continues it that that wouldn't

00:44:58,170 --> 00:45:02,549
actually address this case because the

00:44:59,910 --> 00:45:04,079
way that it's done in the book is I'm

00:45:02,549 --> 00:45:05,760
going to introduce a class and one

00:45:04,079 --> 00:45:07,380
method now I'm going to show you some

00:45:05,760 --> 00:45:08,819
instances of how to use that method and

00:45:07,380 --> 00:45:13,349
now I'm going to go back and indent

00:45:08,819 --> 00:45:15,180
again so it's almost it's almost as if

00:45:13,349 --> 00:45:16,530
you have this nonlinear thing where one

00:45:15,180 --> 00:45:18,480
thing branches off but then the

00:45:16,530 --> 00:45:20,549
execution continues down so it's it's

00:45:18,480 --> 00:45:23,130
pretty complicated I think I think it

00:45:20,549 --> 00:45:25,530
would be tricky to get it right in a way

00:45:23,130 --> 00:45:27,240
that doesn't make the notebook really

00:45:25,530 --> 00:45:29,069
hard to understand or have make it seem

00:45:27,240 --> 00:45:30,900
kind of magical but I don't know I

00:45:29,069 --> 00:45:32,280
haven't thought much of like I got to

00:45:30,900 --> 00:45:34,349
the point where I'm like this doesn't

00:45:32,280 --> 00:45:36,420
support like the flow I used in my book

00:45:34,349 --> 00:45:38,690
and I didn't get much beyond how it make

00:45:36,420 --> 00:45:38,690
that work

00:46:37,030 --> 00:46:44,840
so I agree with that and I think there's

00:46:43,010 --> 00:46:47,120
I think there's plenty of ways to use

00:46:44,840 --> 00:46:52,690
notebooks that are actually quite

00:46:47,120 --> 00:46:52,690
helpful I would say my position is more

00:46:52,930 --> 00:46:56,270
there are a lot of ways seasoned that

00:46:54,830 --> 00:46:59,120
are unhelpful and a lot of people

00:46:56,270 --> 00:47:02,750
gravitate towards those ways or build

00:46:59,120 --> 00:47:06,280
tools to help facilitate those ways and

00:47:02,750 --> 00:47:06,280
I consider that kind of dangerous

00:47:13,380 --> 00:47:18,510
there we're getting much closer to the

00:47:47,000 --> 00:48:12,740
I I think that's fair and like I said I

00:48:10,460 --> 00:48:16,190
I think that if that's the use case

00:48:12,740 --> 00:48:18,350
you're optimizing for there are things

00:48:16,190 --> 00:48:21,860
you can do that make them kind of a

00:48:18,350 --> 00:48:24,020
safer way of exploring coding and and so

00:48:21,860 --> 00:48:26,300
you know just not letting you go back

00:48:24,020 --> 00:48:29,450
and change cells you've already run that

00:48:26,300 --> 00:48:31,310
would make it not allow beginners to

00:48:29,450 --> 00:48:54,080
code with with I think a lot fewer

00:48:31,310 --> 00:48:56,260
problems for instance someone else over

00:48:54,080 --> 00:48:56,260
there

00:49:36,109 --> 00:49:40,680
so I don't I don't have a great approach

00:49:38,430 --> 00:49:45,809
I thought about this a little bit and I

00:49:40,680 --> 00:49:48,329
think my ideal would be so like on Alan

00:49:45,809 --> 00:49:50,700
Opie we use finked so you write up Docs

00:49:48,329 --> 00:49:53,430
for your classes in the Sphynx format

00:49:50,700 --> 00:49:55,619
and if you're lucky it converts them to

00:49:53,430 --> 00:49:56,849
Docs if you're unlucky it gives you a

00:49:55,619 --> 00:49:58,680
cryptic error message that you forgot to

00:49:56,849 --> 00:50:04,710
put a new line somewhere and takes you

00:49:58,680 --> 00:50:08,609
know how to figure it out and so I feel

00:50:04,710 --> 00:50:10,770
like there's a way that if you put your

00:50:08,609 --> 00:50:13,559
docstrings or your code comments and

00:50:10,770 --> 00:50:17,010
some you know markdown ish format if you

00:50:13,559 --> 00:50:19,680
will you could have a way of browsing

00:50:17,010 --> 00:50:21,240
code that would render those things

00:50:19,680 --> 00:50:23,700
nicely and give you kind of a more

00:50:21,240 --> 00:50:24,450
literate interface to your code but this

00:50:23,700 --> 00:50:28,260
is something that I've thought about

00:50:24,450 --> 00:50:31,400
very little but something like that

00:50:28,260 --> 00:50:31,400
would definitely be interesting to me

00:50:45,620 --> 00:50:55,200
so I I don't think I attended that

00:50:48,720 --> 00:50:58,680
presentation I would say that if I

00:50:55,200 --> 00:51:02,940
understand it correctly probably my

00:50:58,680 --> 00:51:04,800
biggest qualms about that is that it's

00:51:02,940 --> 00:51:06,420
running a notebook and like capturing

00:51:04,800 --> 00:51:08,040
the output of that inside a notebook and

00:51:06,420 --> 00:51:10,920
then saving the notebook

00:51:08,040 --> 00:51:13,560
to me having like the output of a

00:51:10,920 --> 00:51:16,910
process stored in a notebook doesn't

00:51:13,560 --> 00:51:19,080
feel like a super usable format whereas

00:51:16,910 --> 00:51:21,360
because then I have to do something to

00:51:19,080 --> 00:51:23,010
get it out of the notebook whereas I

00:51:21,360 --> 00:51:24,450
might want to you know run some giant

00:51:23,010 --> 00:51:26,400
MapReduce queries over the results or I

00:51:24,450 --> 00:51:29,400
might want to ingest it into some other

00:51:26,400 --> 00:51:31,260
system and so like my my initial

00:51:29,400 --> 00:51:33,570
reaction is wow that creates an extra

00:51:31,260 --> 00:51:37,170
layer of complexity at that margin and

00:51:33,570 --> 00:51:39,540
that there's something about having like

00:51:37,170 --> 00:51:42,200
I get having notebooks be sort of the

00:51:39,540 --> 00:51:44,220
source of truth about here's what I ran

00:51:42,200 --> 00:51:45,210
it feel a little bit stranger to me to

00:51:44,220 --> 00:51:47,730
have notebooks to be the source of truth

00:51:45,210 --> 00:51:50,670
about and here's the output of this

00:51:47,730 --> 00:51:53,880
process unless the output is like very

00:51:50,670 --> 00:51:55,550
small a few numbers but I didn't see

00:51:53,880 --> 00:51:59,090
that talk so I can't speak super

00:51:55,550 --> 00:51:59,090
intelligently about it

00:52:09,979 --> 00:52:15,829
so would I feel better about that which

00:52:13,940 --> 00:52:17,450
I haven't used binder very much which of

00:52:15,829 --> 00:52:18,529
my concern would that address mostly

00:52:17,450 --> 00:52:22,849
just having an environment with the

00:52:18,529 --> 00:52:24,920
right dependencies so that would help

00:52:22,849 --> 00:52:26,390
with the dependency part I would still

00:52:24,920 --> 00:52:28,160
struggle with the fact that all of the

00:52:26,390 --> 00:52:29,269
parameters for the experiment are kind

00:52:28,160 --> 00:52:31,339
of all over the place some are

00:52:29,269 --> 00:52:32,479
hard-coded in model instantiation and

00:52:31,339 --> 00:52:34,009
some are on one cell somewhere in

00:52:32,479 --> 00:52:35,450
another cell so I have to kind of hunt

00:52:34,009 --> 00:52:36,890
through the notebook to figure out okay

00:52:35,450 --> 00:52:37,970
here I need to change the path okay and

00:52:36,890 --> 00:52:39,739
this other place I need to change the

00:52:37,970 --> 00:52:40,789
number of epochs okay in this other

00:52:39,739 --> 00:52:45,499
place I need to change the number of

00:52:40,789 --> 00:52:48,470
hidden layers and so having having not a

00:52:45,499 --> 00:52:50,690
clear separation between the code and

00:52:48,470 --> 00:52:52,460
the configuration may that causes me a

00:52:50,690 --> 00:52:56,259
lot of difficulties as well and makes it

00:52:52,460 --> 00:52:56,259
much harder to build on top of it

00:53:33,120 --> 00:53:43,030
so that's a that's a fair concern and if

00:53:39,310 --> 00:53:45,610
your if your intermediate results are 12

00:53:43,030 --> 00:53:49,030
gigs of data and you probably don't want

00:53:45,610 --> 00:53:51,370
to do the workflow that I showed but are

00:53:49,030 --> 00:53:53,350
you doing are we talking about doing

00:53:51,370 --> 00:54:01,660
exploratory data analysis on 12 gig data

00:53:53,350 --> 00:54:03,690
sets interesting what it's not that it's

00:54:01,660 --> 00:54:05,860
a big data set it's a big data set to do

00:54:03,690 --> 00:54:07,750
to me it feels like a big day said to do

00:54:05,860 --> 00:54:09,880
exploratory data analysis on but but

00:54:07,750 --> 00:54:13,930
like I work in a world with pretty

00:54:09,880 --> 00:54:16,540
pretty small data so hmm anything about

00:54:13,930 --> 00:54:19,120
that that's obviously yes if you have

00:54:16,540 --> 00:54:21,760
like 12 gigs of intermediate results and

00:54:19,120 --> 00:54:24,730
you want to you know rapidly try you

00:54:21,760 --> 00:54:29,050
know 20 different things on them then

00:54:24,730 --> 00:54:31,090
you're probably stuck either in a

00:54:29,050 --> 00:54:33,060
notebook or on the repple having it in

00:54:31,090 --> 00:54:36,270
memory and trying trying things on it I

00:54:33,060 --> 00:54:39,400
don't think I have a good solution for

00:54:36,270 --> 00:54:50,590
rapidly reading gigs of data off disk

00:54:39,400 --> 00:54:55,140
with that oh so these are immutable data

00:54:50,590 --> 00:54:55,140
sets let's say the intermediate results

00:55:01,460 --> 00:55:08,820
it's fine so I think that the part where

00:55:07,740 --> 00:55:10,590
you can't go back and change the earlier

00:55:08,820 --> 00:55:12,720
results would help with that a lot still

00:55:10,590 --> 00:55:15,060
right so you know I've computed this

00:55:12,720 --> 00:55:17,070
data set now I can do various things off

00:55:15,060 --> 00:55:18,480
it in the notebook but I can't go back

00:55:17,070 --> 00:55:21,240
and like change something and depended

00:55:18,480 --> 00:55:22,980
on or change the data set itself and if

00:55:21,240 --> 00:55:25,020
you're asking what if I want to change

00:55:22,980 --> 00:55:29,130
that data set itself then I guess you

00:55:25,020 --> 00:56:00,960
would have to you know modify it in

00:55:29,130 --> 00:56:06,780
place or recreate it yeah yep that's

00:56:00,960 --> 00:56:07,420
fair and really address that all right

00:56:06,780 --> 00:56:12,070
thank you for coming

00:56:07,420 --> 00:56:12,070

YouTube URL: https://www.youtube.com/watch?v=7jiPeIFXb6U


