Title: Real-time collaboration with Jupyter notebooks using CoCalc- William Stein (SageMath, Inc)
Publication date: 2018-09-20
Playlist: JupyterCon in New York 2018
Description: 
	William Stein launched the Sage Notebook in 2006, initially motivated by a talk at Sage Days 1 about a GUI for IPython. CoCalc is a continuation of this project using more modern technology. CoCalc includes a distinct full stack implementation of both the frontend and backend parts of Jupyter, built from scratch using React, Node.js, and Kubernetes. Compatibility with Jupyter—both the published wire protocol and the general feel of UI—is a fundamental design goal.

The core goal of CoCalc is to provide easy, safe, and beginner-friendly access to all open source mathematics and data science software, including SageMath, LaTeX, R, Anaconda, and a large number of Jupyter kernels. The motivation for fully supporting multiple simultaneous people editing Jupyter notebooks is that it makes it much easier for teachers to support their students, for students to support each other, and for the people who run CoCalc to support users. The same technology used to implement real-time collaboration also provides a complete history of all modifications of the notebook. With a granularity of about two seconds, people can follow exactly how a document evolved over time. Hence, there is no longer the fear of “messing everything up,” because it is easy to go back in time. Additionally, professors can follow exactly how students solved a given problem. People can collaborate without having to learn Git or fiddle around with nbdiff.

CoCalc is primarily a whole product designed to make life easier for teachers who want to use open source data science software in teaching beginners with minimal extra effort. College professors are very busy, so CoCalc is built as a single centralized service that is hosted in Google’s cloud and run by SageMath, Inc., rather than something professors or staff have to install and run themselves. Moreover, a huge amount of software is preinstalled in the standard image that CoCalc projects use; this includes everything that anybody has ever requested since 2013 that the team could figure out how to install.

William explains how CoCalc relates to Project Jupyter and shares how he implemented real-time collaborative editing of Jupyter notebooks in CoCalc. CoCalc tackles many of the same problems as JupyterLab and JupyterHub but with very different design constraints, motivations, and results. For example, real-time collaboration has been a core feature of CoCalc since it launched in 2013, whereas classical Jupyter does not have real-time collaboration support; on the other hand, drag-and-drop and a flexible plugin architecture are central features of JupyterLab but are mostly absent in CoCalc. Another subtle difference is that in CoCalc if you close your browser while a computation is running, then open it later, all your output will be there, whereas classical Jupyter discards that output (though it displays output more quickly). Implementing real-time collaboration in a web application involves many choices and trade-offs. CoCalc has had real-time collaboration support for five years. It is optimized for what users need, the sort of documents they edit, and the choices made for how to store data, both in the long and short term.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,960 --> 00:00:06,350
so thanks a lot for coming to my talk I

00:00:04,970 --> 00:00:08,270
looked at the schedule and I wanted to

00:00:06,350 --> 00:00:13,190
go to all of the other talks at the same

00:00:08,270 --> 00:00:14,840
time like every single one of them so so

00:00:13,190 --> 00:00:18,280
what I'm going to talk about is Co calc

00:00:14,840 --> 00:00:21,650
and I'm going to focus specifically on

00:00:18,280 --> 00:00:23,780
real-time collaboration so this is the

00:00:21,650 --> 00:00:25,160
kind of overview of the talk so I'll

00:00:23,780 --> 00:00:28,610
just just give you some quick background

00:00:25,160 --> 00:00:29,869
a quick demo talk about the architecture

00:00:28,610 --> 00:00:31,610
of Co calc a little bit and then I'll

00:00:29,869 --> 00:00:33,469
focus a lot on how real-time sync works

00:00:31,610 --> 00:00:36,680
and then I'll probably be out of time

00:00:33,469 --> 00:00:38,450
but if not also say some general things

00:00:36,680 --> 00:00:41,480
about the functionality range of

00:00:38,450 --> 00:00:43,310
functionality in Co calc some issues

00:00:41,480 --> 00:00:50,630
about the culture of Co calc and we're

00:00:43,310 --> 00:00:53,510
done so just a quick bit of background I

00:00:50,630 --> 00:00:56,930
spent the last six years on this project

00:00:53,510 --> 00:00:59,239
so you can see my kind of commit history

00:00:56,930 --> 00:01:01,160
on github so I've committed a lot of

00:00:59,239 --> 00:01:03,739
code kind of frequently over the last

00:01:01,160 --> 00:01:08,600
six years specifically to the code calc

00:01:03,739 --> 00:01:11,450
github repo and Who am I so I started a

00:01:08,600 --> 00:01:14,990
project called Sage math in 2004 which

00:01:11,450 --> 00:01:17,450
is a large Python library for primarily

00:01:14,990 --> 00:01:19,130
pure mathematics research and also

00:01:17,450 --> 00:01:22,249
undergraduate mathematics related

00:01:19,130 --> 00:01:25,759
teaching it's meant to be a alternative

00:01:22,249 --> 00:01:29,600
to Mathematica maple and magma I also

00:01:25,759 --> 00:01:31,249
started scythe on which is a Python 2 C

00:01:29,600 --> 00:01:34,009
compiler and it makes it easy to write

00:01:31,249 --> 00:01:36,499
or it makes it possible to cleanly write

00:01:34,009 --> 00:01:38,119
very fast code and use it from Python

00:01:36,499 --> 00:01:41,869
and then I start something called the

00:01:38,119 --> 00:01:43,700
sage notebook in 2006 which it looks a

00:01:41,869 --> 00:01:45,859
lot like I guess what Jupiter looks like

00:01:43,700 --> 00:01:48,950
now but it was written using kind of

00:01:45,859 --> 00:01:51,590
before jQuery even existed so it was

00:01:48,950 --> 00:01:54,529
pretty tricky to write I'm a

00:01:51,590 --> 00:01:56,179
mathematician as was just mentioned so

00:01:54,529 --> 00:01:58,219
I've been at a couple of universities

00:01:56,179 --> 00:02:00,139
Harvard UCSD and University of

00:01:58,219 --> 00:02:02,090
Washington and I'm currently a full

00:02:00,139 --> 00:02:04,489
professor there that I though I'd been

00:02:02,090 --> 00:02:10,250
on leave for the last two years as the

00:02:04,489 --> 00:02:11,780
CEO sage math Inc ok so first I'll show

00:02:10,250 --> 00:02:14,450
you a quick demo of co calc I'll

00:02:11,780 --> 00:02:18,709
probably spend about ten minutes on this

00:02:14,450 --> 00:02:21,380
so I'm going to exit this page and I'm

00:02:18,709 --> 00:02:24,200
logged into Co calc right here you can

00:02:21,380 --> 00:02:26,540
see a list of my projects of course I'm

00:02:24,200 --> 00:02:28,430
a collaborator on a lot of coke aleck

00:02:26,540 --> 00:02:30,800
projects on hundreds and hundreds and

00:02:28,430 --> 00:02:32,739
hundreds of projects with each project

00:02:30,800 --> 00:02:34,970
there's a title when it was last

00:02:32,739 --> 00:02:36,580
actively used and the people that are

00:02:34,970 --> 00:02:39,020
collaborators on those projects a

00:02:36,580 --> 00:02:42,050
cookout project is just a docker

00:02:39,020 --> 00:02:46,220
container and a file system associated

00:02:42,050 --> 00:02:48,739
to it that's persistent over time so

00:02:46,220 --> 00:02:53,150
let's make a brand new project demo for

00:02:48,739 --> 00:02:55,640
Jupiter con 2018 and then I'll create

00:02:53,150 --> 00:02:57,440
the project so this is now creating a

00:02:55,640 --> 00:03:00,019
file system specifically for this

00:02:57,440 --> 00:03:02,090
project it uses ZFS under the hood so

00:03:00,019 --> 00:03:04,130
that there are snapshots of the file

00:03:02,090 --> 00:03:05,720
system every few minutes so that if you

00:03:04,130 --> 00:03:08,209
invite a collaborator and they stupidly

00:03:05,720 --> 00:03:11,390
delete everything you can revert to how

00:03:08,209 --> 00:03:13,940
it was a few minutes ago it then starts

00:03:11,390 --> 00:03:16,519
up a docker container that's pointed out

00:03:13,940 --> 00:03:19,660
the project and now let's create a

00:03:16,519 --> 00:03:23,930
couple of documents so I'll just make a

00:03:19,660 --> 00:03:27,410
sage worksheet a Jupiter notebook a la

00:03:23,930 --> 00:03:29,540
tech document a stopwatch to keep track

00:03:27,410 --> 00:03:33,590
of what's going on today start out

00:03:29,540 --> 00:03:39,500
running a terminal a command line

00:03:33,590 --> 00:03:45,070
terminal a to-do list and you can also

00:03:39,500 --> 00:03:47,540
manage a course chat with people hello

00:03:45,070 --> 00:03:48,650
they're the people you would be chatting

00:03:47,540 --> 00:03:50,510
with are the collaborators on this

00:03:48,650 --> 00:03:52,400
project since I just made the project I

00:03:50,510 --> 00:03:54,100
don't have any collaborators but if I

00:03:52,400 --> 00:03:58,489
did I would be chatting with them here

00:03:54,100 --> 00:04:00,829
and there are editors for many different

00:03:58,489 --> 00:04:02,840
document types so you can see them

00:04:00,829 --> 00:04:04,100
listed here some of these are just well

00:04:02,840 --> 00:04:06,230
it's a code in your editor with syntax

00:04:04,100 --> 00:04:07,280
highlighting code folding others that

00:04:06,230 --> 00:04:11,359
are quite sophisticated

00:04:07,280 --> 00:04:14,510
for example there's our tech so if you

00:04:11,359 --> 00:04:16,789
click there you get an ER tech file you

00:04:14,510 --> 00:04:18,470
have an editor on the left and then a

00:04:16,789 --> 00:04:20,750
preview on the right that you can switch

00:04:18,470 --> 00:04:21,859
it around however you want it uses

00:04:20,750 --> 00:04:24,830
knitter so that you can put arbitrary

00:04:21,859 --> 00:04:25,360
our code in your document and see the

00:04:24,830 --> 00:04:27,230
output

00:04:25,360 --> 00:04:29,150
okay so that's kind of a

00:04:27,230 --> 00:04:30,080
that's the sort of two-minute whirlwind

00:04:29,150 --> 00:04:32,300
tour now let's look a little more

00:04:30,080 --> 00:04:33,770
closely at some of these other documents

00:04:32,300 --> 00:04:38,930
I just created everything here is

00:04:33,770 --> 00:04:40,610
happening online on kokal comm so here

00:04:38,930 --> 00:04:42,980
are some other documents let's start

00:04:40,610 --> 00:04:45,350
with a Jupiter notebook since after all

00:04:42,980 --> 00:04:47,660
we're at Jupiter Klein so these are the

00:04:45,350 --> 00:04:51,080
Colonel's that we have pre-installed in

00:04:47,660 --> 00:04:53,300
our a bun to 18:04 environment so we

00:04:51,080 --> 00:04:56,770
support all of these test them etc and

00:04:53,300 --> 00:04:59,000
so I'll choose Python 3 anaconda 5 and

00:04:56,770 --> 00:05:00,920
there we are and then I can do some

00:04:59,000 --> 00:05:02,480
simple calculation like 2/3 plus 3

00:05:00,920 --> 00:05:05,480
halves it shift-enter

00:05:02,480 --> 00:05:07,430
it starts up the kernel there's some CPU

00:05:05,480 --> 00:05:10,610
and then you get the result by the way

00:05:07,430 --> 00:05:15,880
tried 2/3 plus 3 halves in Python 2 it's

00:05:10,610 --> 00:05:18,140
pretty fun you end up with one we have

00:05:15,880 --> 00:05:20,690
so this should look a lot like the

00:05:18,140 --> 00:05:22,040
normal Jupiter interphase the menus are

00:05:20,690 --> 00:05:22,760
pretty similar they're slightly

00:05:22,040 --> 00:05:25,220
different

00:05:22,760 --> 00:05:26,690
so for example there's a cell menu but

00:05:25,220 --> 00:05:28,700
instead of having sub menus that you

00:05:26,690 --> 00:05:30,170
have to like go to and having things pop

00:05:28,700 --> 00:05:32,840
out and you have to go over to them

00:05:30,170 --> 00:05:35,900
everything's just a single in a single

00:05:32,840 --> 00:05:39,230
menu like this so what what we did with

00:05:35,900 --> 00:05:40,520
Co calc was take Jupiter look at all the

00:05:39,230 --> 00:05:43,430
functionality and then do a complete

00:05:40,520 --> 00:05:45,590
rewrite of it using react.js so that's

00:05:43,430 --> 00:05:48,650
what you're looking at here and we did

00:05:45,590 --> 00:05:50,480
that because we wanted to fully support

00:05:48,650 --> 00:05:53,360
real-time sync properly and it's very

00:05:50,480 --> 00:06:00,680
hard to monkey patch that into the

00:05:53,360 --> 00:06:02,090
standard Jupiter implementation ok let's

00:06:00,680 --> 00:06:03,890
see a flash here example there's an

00:06:02,090 --> 00:06:06,590
assistant this is just some extra thing

00:06:03,890 --> 00:06:08,780
that we added it has like thousands of

00:06:06,590 --> 00:06:12,080
examples of code for each of the

00:06:08,780 --> 00:06:13,310
different kernels so since let's do

00:06:12,080 --> 00:06:16,610
something with graphics so it's more

00:06:13,310 --> 00:06:20,360
impressive visualization on a map plot

00:06:16,610 --> 00:06:22,490
live example contour plot so you could

00:06:20,360 --> 00:06:26,060
say insert example and then it will put

00:06:22,490 --> 00:06:28,540
it in there and evaluate it and here's

00:06:26,060 --> 00:06:28,540
the result

00:06:30,470 --> 00:06:35,480
if I click back here on the files tab

00:06:32,260 --> 00:06:37,630
you'll see I've created a lot of files

00:06:35,480 --> 00:06:40,550
just in the last few minutes

00:06:37,630 --> 00:06:42,020
there's our tech files and auxilary

00:06:40,550 --> 00:06:43,820
files associated to them there's the

00:06:42,020 --> 00:06:47,210
Jupiter notebook and there's all these

00:06:43,820 --> 00:06:48,860
other things that I created some other

00:06:47,210 --> 00:06:50,780
unique things so I'm just back in the

00:06:48,860 --> 00:06:53,030
Jupiter notebook there's this big blue

00:06:50,780 --> 00:06:55,580
button labeled time travel if you click

00:06:53,030 --> 00:06:57,890
on this it pops up another tab which is

00:06:55,580 --> 00:07:00,230
the Jupiter notebook but with a slider

00:06:57,890 --> 00:07:02,480
and what you can do is you can move the

00:07:00,230 --> 00:07:06,080
slider anywhere or just move it along

00:07:02,480 --> 00:07:08,780
and it has the complete evolution of the

00:07:06,080 --> 00:07:11,210
Jupiter notebook over time and you can

00:07:08,780 --> 00:07:13,370
also ask for a diff so tell me exactly

00:07:11,210 --> 00:07:18,080
what changed from one point in time to

00:07:13,370 --> 00:07:20,110
another and what it does is it just puts

00:07:18,080 --> 00:07:22,400
the Jupiter notebook in a differently

00:07:20,110 --> 00:07:28,730
JSON format and then shows you the diff

00:07:22,400 --> 00:07:32,930
so I'll show you a little bit more

00:07:28,730 --> 00:07:35,210
here's a sage worksheet so we can do a

00:07:32,930 --> 00:07:37,160
quick evaluation it takes it has to

00:07:35,210 --> 00:07:39,919
start up a server for sage in the

00:07:37,160 --> 00:07:41,900
background we do support doing a lot of

00:07:39,919 --> 00:07:43,910
things besides just using sage for

00:07:41,900 --> 00:07:47,180
example you can use any Jupiter kernel

00:07:43,910 --> 00:07:49,190
from within this worksheet and there's

00:07:47,180 --> 00:07:54,620
also this assistant with lots of

00:07:49,190 --> 00:07:56,090
examples and things like 3d plotting etc

00:07:54,620 --> 00:08:01,840
worked very nicely here so for example

00:07:56,090 --> 00:08:04,669
here's an implicit 3d plot and here's a

00:08:01,840 --> 00:08:06,260
here's a graph so you can see it just

00:08:04,669 --> 00:08:08,600
pops up in your browser you can move it

00:08:06,260 --> 00:08:13,220
around use this three j/s it's very fast

00:08:08,600 --> 00:08:15,110
and lightweight cetera you can do stuff

00:08:13,220 --> 00:08:18,680
with graphs vertices and edges so let's

00:08:15,110 --> 00:08:20,600
say we want to random graph just click

00:08:18,680 --> 00:08:23,510
that it makes a random graph with 15

00:08:20,600 --> 00:08:26,390
vertices and 20 edges and uses d3 to

00:08:23,510 --> 00:08:29,320
display it so this is a sage worksheet

00:08:26,390 --> 00:08:31,730
it's pretty similar to Jupiter notebooks

00:08:29,320 --> 00:08:33,260
Jupiter was sort of really getting off

00:08:31,730 --> 00:08:35,320
the ground about the same time that I

00:08:33,260 --> 00:08:37,310
started writing in sage worksheets and

00:08:35,320 --> 00:08:39,650
Jason grant and I in fact talked a lot

00:08:37,310 --> 00:08:42,650
about the design how you switch from one

00:08:39,650 --> 00:08:44,420
mode to another etc sage worksheets are

00:08:42,650 --> 00:08:45,410
neat because you have a single document

00:08:44,420 --> 00:08:47,000
instead of having a whole bunch of

00:08:45,410 --> 00:08:49,760
separate cells that are each individual

00:08:47,000 --> 00:08:51,290
editors you have one single document so

00:08:49,760 --> 00:08:53,930
you could sit there and do things like

00:08:51,290 --> 00:08:55,250
select arrange whoops

00:08:53,930 --> 00:08:57,500
you can select a range that includes

00:08:55,250 --> 00:09:00,380
part of one cell the output of another

00:08:57,500 --> 00:09:01,790
cell etc do you copy and then go to

00:09:00,380 --> 00:09:03,829
another worksheet somewhere else are the

00:09:01,790 --> 00:09:08,209
same one and then paste it so it's like

00:09:03,829 --> 00:09:13,699
a normal single document so that's a

00:09:08,209 --> 00:09:15,050
sage worksheets lot tech editor so this

00:09:13,699 --> 00:09:19,160
is similar to the arktech when I showed

00:09:15,050 --> 00:09:20,930
you but just for a normal law tech and

00:09:19,160 --> 00:09:23,480
this is meant to compete directly with

00:09:20,930 --> 00:09:25,610
share la tech except that you have your

00:09:23,480 --> 00:09:28,060
fold data in the file system right next

00:09:25,610 --> 00:09:30,500
to the law tech document you're editing

00:09:28,060 --> 00:09:32,149
it's very functional for example you can

00:09:30,500 --> 00:09:33,410
double-click on the right-hand side and

00:09:32,149 --> 00:09:35,209
it takes you to the corresponding point

00:09:33,410 --> 00:09:37,970
on the left hand side you can open

00:09:35,209 --> 00:09:41,420
multiple simultaneous views on the PDF

00:09:37,970 --> 00:09:42,560
preview if there are hyperlinks in the

00:09:41,420 --> 00:09:44,660
preview you can click on them and they

00:09:42,560 --> 00:09:47,000
work everything can be reorganized

00:09:44,660 --> 00:09:48,620
however you want so you can you know

00:09:47,000 --> 00:09:50,750
close everything just have the text and

00:09:48,620 --> 00:09:53,180
then maybe split it and have the preview

00:09:50,750 --> 00:09:55,550
on the left so and you have different

00:09:53,180 --> 00:09:57,709
types of previews and so on so it's

00:09:55,550 --> 00:09:59,300
pretty powerful if you make mistakes it

00:09:57,709 --> 00:10:02,300
shows you a nice log of the mistakes and

00:09:59,300 --> 00:10:05,360
shows them in the margin etc and you can

00:10:02,300 --> 00:10:11,510
embed if you say use package sage tech

00:10:05,360 --> 00:10:12,920
then you can embed code in here so what

00:10:11,510 --> 00:10:14,990
this will do is it will use sage to

00:10:12,920 --> 00:10:22,209
factor the year and then show the result

00:10:14,990 --> 00:10:24,920
so right ok yep see so it's now factored

00:10:22,209 --> 00:10:27,199
2018 and showing it to you so it does

00:10:24,920 --> 00:10:29,720
that just because I read this in the law

00:10:27,199 --> 00:10:31,010
tech document so people use this a lot

00:10:29,720 --> 00:10:33,050
like for example in making homework

00:10:31,010 --> 00:10:34,880
assignments they can randomize something

00:10:33,050 --> 00:10:36,350
at the top and then generate a lot tech

00:10:34,880 --> 00:10:39,050
document that gives you the homework

00:10:36,350 --> 00:10:41,199
assignment the stopwatch says that we've

00:10:39,050 --> 00:10:43,040
been doing the demo for seven minutes

00:10:41,199 --> 00:10:44,870
it's kind of handy to have a stopwatch

00:10:43,040 --> 00:10:46,910
the funny thing is it also has time

00:10:44,870 --> 00:10:49,040
travel so you can pause it start it stop

00:10:46,910 --> 00:10:50,779
it you know over time and then see I

00:10:49,040 --> 00:10:52,339
wonder how I use this stopwatch for the

00:10:50,779 --> 00:10:56,149
last couple of weeks and you can see

00:10:52,339 --> 00:10:58,160
exactly how you've used the stopwatch so

00:10:56,149 --> 00:10:58,360
and there's user specific undo here's

00:10:58,160 --> 00:10:59,740
the

00:10:58,360 --> 00:11:02,800
command line terminal let me make this

00:10:59,740 --> 00:11:05,320
bigger so you type LS these are all of

00:11:02,800 --> 00:11:08,740
our files you can do things like use vim

00:11:05,320 --> 00:11:13,450
you could say Jupiter console - - kernel

00:11:08,740 --> 00:11:18,339
equals Python - for example and you'll

00:11:13,450 --> 00:11:19,930
run Jupiter in the command line there we

00:11:18,339 --> 00:11:23,950
are and then you can do 2/3 plus three

00:11:19,930 --> 00:11:29,500
Huff's and get one mathematicians find

00:11:23,950 --> 00:11:31,240
pretty disturbing there's a to-do list I

00:11:29,500 --> 00:11:33,820
won't do much more thought this is a

00:11:31,240 --> 00:11:37,480
course management system what you do is

00:11:33,820 --> 00:11:40,990
you add students here I'll just type the

00:11:37,480 --> 00:11:42,519
name of a student and you can have a you

00:11:40,990 --> 00:11:44,500
know a couple hundred students whatever

00:11:42,519 --> 00:11:45,820
you can push out assignments to the

00:11:44,500 --> 00:11:47,140
students the students work on the

00:11:45,820 --> 00:11:48,700
assignments you collect the assignments

00:11:47,140 --> 00:11:50,440
you can have them pure grade each other

00:11:48,700 --> 00:11:51,970
you can grade the assignment and then

00:11:50,440 --> 00:11:53,019
push it back out to them so it solves

00:11:51,970 --> 00:11:55,149
the problem of distributing and

00:11:53,019 --> 00:11:56,500
collecting homework but the cool thing

00:11:55,149 --> 00:11:58,570
is while the students are working on

00:11:56,500 --> 00:11:59,800
their assignments since everything's

00:11:58,570 --> 00:12:01,510
collaborative that's the main point of

00:11:59,800 --> 00:12:02,709
the talk you have multiple people you

00:12:01,510 --> 00:12:04,540
could see their cursor as they're moving

00:12:02,709 --> 00:12:07,829
as they're working on live on the work

00:12:04,540 --> 00:12:10,420
and the very last thing for the demo is

00:12:07,829 --> 00:12:13,079
that I want to show you collaboration so

00:12:10,420 --> 00:12:16,029
I'm going to close all the tabs except

00:12:13,079 --> 00:12:21,959
the one with Jupiter and then I'm going

00:12:16,029 --> 00:12:21,959
to sign in as a different user over here

00:12:26,880 --> 00:12:32,079
although Jason are you signed in to calc

00:12:29,260 --> 00:12:34,120
can I add you as a collaborator okay no

00:12:32,079 --> 00:12:36,760
instead of me having to do things so

00:12:34,120 --> 00:12:39,040
Jason my accomplice in the audience I'll

00:12:36,760 --> 00:12:41,230
type Jason grant right here and it shows

00:12:39,040 --> 00:12:44,170
me so this is how you out of collaborate

00:12:41,230 --> 00:12:45,910
you go to settings and then you type the

00:12:44,170 --> 00:12:48,070
name of somebody it will prioritize

00:12:45,910 --> 00:12:50,230
people who you have current

00:12:48,070 --> 00:12:52,930
collaborations with or who are recently

00:12:50,230 --> 00:12:54,100
active and so Jason comes up if you want

00:12:52,930 --> 00:12:55,810
to be absolutely certain about the

00:12:54,100 --> 00:12:58,420
person you're you know adding you can

00:12:55,810 --> 00:13:00,699
put their email address in instead click

00:12:58,420 --> 00:13:02,170
his name and then invite him and what

00:13:00,699 --> 00:13:03,940
he'll discover is he now has this

00:13:02,170 --> 00:13:07,500
project in his list right Jason

00:13:03,940 --> 00:13:11,560
cool now Jason could do something like

00:13:07,500 --> 00:13:12,190
open the same Jupiter notebook we can

00:13:11,560 --> 00:13:15,069
chat on the

00:13:12,190 --> 00:13:16,750
so I can write hi Jason and notice

00:13:15,069 --> 00:13:18,790
there's a little J right here that

00:13:16,750 --> 00:13:23,529
indicates that Jason also has this

00:13:18,790 --> 00:13:24,430
document opened and let's see look he

00:13:23,529 --> 00:13:27,160
just typed right there

00:13:24,430 --> 00:13:29,290
where's his cursor and he's writing code

00:13:27,160 --> 00:13:31,990
okay so it's collaborative multiple

00:13:29,290 --> 00:13:33,250
people at once and you can look in the

00:13:31,990 --> 00:13:36,129
time travel and you'll see that certain

00:13:33,250 --> 00:13:40,689
actions were done by Jason other actions

00:13:36,129 --> 00:13:42,850
are done by me etc okay so that's the

00:13:40,689 --> 00:13:45,160
demo so hopefully now you have a pretty

00:13:42,850 --> 00:13:47,110
clear idea of what Co calc is think of

00:13:45,160 --> 00:13:51,339
it as it's kind of like Google Docs but

00:13:47,110 --> 00:13:52,540
it's for technical people like us who

00:13:51,339 --> 00:13:55,149
use Jupiter notebooks and law tech

00:13:52,540 --> 00:13:56,649
documents rather than people using you

00:13:55,149 --> 00:13:58,839
know Microsoft Excel or Microsoft Word

00:13:56,649 --> 00:14:00,220
it's competing more with thee or

00:13:58,839 --> 00:14:03,339
providing more functionality in a

00:14:00,220 --> 00:14:06,189
technical direction it's also fully

00:14:03,339 --> 00:14:07,480
integrates compute with the document so

00:14:06,189 --> 00:14:10,389
instead of really separating the two

00:14:07,480 --> 00:14:11,649
compute is really central because you

00:14:10,389 --> 00:14:13,959
know we have these term you're really

00:14:11,649 --> 00:14:21,279
using a you know a Linux machine here

00:14:13,959 --> 00:14:28,329
alright let's do X so you can see it's a

00:14:21,279 --> 00:14:30,639
Linux computer ok it's collaborative yes

00:14:28,329 --> 00:14:31,990
oh so you can type Jason can type

00:14:30,639 --> 00:14:33,939
something if you want to quickly find

00:14:31,990 --> 00:14:35,860
you out there so there's Jason typing LS

00:14:33,939 --> 00:14:46,839
I didn't do that and you can also chat

00:14:35,860 --> 00:14:55,540
on the side so hey ok alright so now

00:14:46,839 --> 00:14:57,449
let's go back to the Tuck so first the

00:14:55,540 --> 00:15:00,880
tech stack how is this thing implemented

00:14:57,449 --> 00:15:02,319
so the main so if I was going to hire

00:15:00,880 --> 00:15:04,180
somebody I'd really hope that they are

00:15:02,319 --> 00:15:06,819
really really good with the following

00:15:04,180 --> 00:15:11,110
five things basically nodejs so

00:15:06,819 --> 00:15:12,730
javascript on servers PostgreSQL doubt

00:15:11,110 --> 00:15:15,519
it's a PostgreSQL as a relational

00:15:12,730 --> 00:15:17,920
database that has really good support

00:15:15,519 --> 00:15:19,180
for push notifications so you can have a

00:15:17,920 --> 00:15:21,040
change in the database trigger a

00:15:19,180 --> 00:15:22,750
function and then it sends a message out

00:15:21,040 --> 00:15:24,390
and that's something we use critically

00:15:22,750 --> 00:15:27,000
in Co calc

00:15:24,390 --> 00:15:29,340
to support real-time functionality

00:15:27,000 --> 00:15:32,730
Python 3 we use that a lot for managing

00:15:29,340 --> 00:15:34,320
our back-end infrastructure react SoCo

00:15:32,730 --> 00:15:35,850
calc is a react application the whole

00:15:34,320 --> 00:15:39,290
front end is written in react and

00:15:35,850 --> 00:15:42,240
typescript and CoffeeScript which

00:15:39,290 --> 00:15:44,910
CoffeeScript was great in 2013 when I

00:15:42,240 --> 00:15:48,060
started cooking but typescript is

00:15:44,910 --> 00:15:50,760
clearly the way to go today and

00:15:48,060 --> 00:15:52,830
regarding ways to use code calc so one

00:15:50,760 --> 00:15:54,090
way is you can use a docker image that

00:15:52,830 --> 00:15:57,630
we provides a hundred percent free and

00:15:54,090 --> 00:15:58,830
open source if you were to type exactly

00:15:57,630 --> 00:15:59,580
what I wrote right there and wait a few

00:15:58,830 --> 00:16:01,290
minutes

00:15:59,580 --> 00:16:03,840
you would have Coe calc running on your

00:16:01,290 --> 00:16:05,670
computer and it would also have a full

00:16:03,840 --> 00:16:08,130
law tech installation there are Julia

00:16:05,670 --> 00:16:09,270
Sage etc so it's like you know it's

00:16:08,130 --> 00:16:12,480
gonna be about six or seven gigabytes

00:16:09,270 --> 00:16:14,580
with everything and you'll get something

00:16:12,480 --> 00:16:17,160
running locally it stores all its files

00:16:14,580 --> 00:16:20,370
in tilde slash Co calc on your computer

00:16:17,160 --> 00:16:22,740
and if you want to delete it and then

00:16:20,370 --> 00:16:24,510
upgrade it or you know swap it out it'll

00:16:22,740 --> 00:16:25,890
still use exactly those files so it's

00:16:24,510 --> 00:16:27,930
really easy to upgrade without losing

00:16:25,890 --> 00:16:29,280
your data and you can you know directly

00:16:27,930 --> 00:16:30,780
access all the files that are in your

00:16:29,280 --> 00:16:33,200
projects because they're just in your

00:16:30,780 --> 00:16:35,370
home directory and tilde slash code hump

00:16:33,200 --> 00:16:37,560
another way to use Co calc is via the

00:16:35,370 --> 00:16:40,260
website kokal comm which I was just

00:16:37,560 --> 00:16:43,650
demoing Co Calcott this is used a lot

00:16:40,260 --> 00:16:45,960
especially so Co calc the primary user

00:16:43,650 --> 00:16:47,220
base is students in classes and their

00:16:45,960 --> 00:16:50,040
instructors it's used a lot by

00:16:47,220 --> 00:16:51,690
professors at universities I started it

00:16:50,040 --> 00:16:53,610
in order to solve a problem I had over

00:16:51,690 --> 00:16:56,610
the years repeatedly which was I wanted

00:16:53,610 --> 00:16:58,380
to teach a course on computation related

00:16:56,610 --> 00:17:01,830
to mathematics so I wanted to cover

00:16:58,380 --> 00:17:03,960
topics like Python sage law tech are

00:17:01,830 --> 00:17:05,760
just a whole suite of different data

00:17:03,960 --> 00:17:07,530
related topics and I taught of course

00:17:05,760 --> 00:17:09,060
doing that you know year after year

00:17:07,530 --> 00:17:11,310
after year and the installation problem

00:17:09,060 --> 00:17:14,520
was really a nightmare so Cocalico

00:17:11,310 --> 00:17:16,680
solves that installation problem you can

00:17:14,520 --> 00:17:18,810
also install a CO calc directly on you

00:17:16,680 --> 00:17:21,420
know on a UNIX computer this may be

00:17:18,810 --> 00:17:25,380
painful and I'm not claiming that's easy

00:17:21,420 --> 00:17:28,110
to do it all I wish it were but it isn't

00:17:25,380 --> 00:17:29,760
okay so now you know what Co Calchas and

00:17:28,110 --> 00:17:32,610
I'm going to spend a few minutes telling

00:17:29,760 --> 00:17:34,920
you how real time sync works in Co calc

00:17:32,610 --> 00:17:37,140
I mean no claims that this is how real

00:17:34,920 --> 00:17:38,100
time sync works in any other system or

00:17:37,140 --> 00:17:40,740
that is the best process

00:17:38,100 --> 00:17:43,470
way to do it for Jupiter notebooks if

00:17:40,740 --> 00:17:45,120
anything I found that how you implement

00:17:43,470 --> 00:17:46,530
collaborative editing of documents

00:17:45,120 --> 00:17:48,030
depends an enormous amount on a whole

00:17:46,530 --> 00:17:50,760
bunch of different constraints you

00:17:48,030 --> 00:17:52,080
personally have and the environment in

00:17:50,760 --> 00:17:55,230
which you're running in this sort of

00:17:52,080 --> 00:18:00,780
documents you're editing etc okay so

00:17:55,230 --> 00:18:02,640
first in 2013 in a few days I you know

00:18:00,780 --> 00:18:03,809
wanted to have real-time sync and I

00:18:02,640 --> 00:18:05,970
thought it would be really really easy

00:18:03,809 --> 00:18:08,220
because they'd been around in Google

00:18:05,970 --> 00:18:10,020
Docs for a long time at this point and

00:18:08,220 --> 00:18:12,870
so I sat down and I looked at a lot of

00:18:10,020 --> 00:18:14,789
things and you know there was Google

00:18:12,870 --> 00:18:19,320
Wave and all that's operational

00:18:14,789 --> 00:18:20,820
transform stuff which try not well I

00:18:19,320 --> 00:18:24,270
don't want to say too much about that

00:18:20,820 --> 00:18:25,919
there was also a paper by and some talks

00:18:24,270 --> 00:18:28,980
by Neal Fraser had just went to work at

00:18:25,919 --> 00:18:30,630
Google on Google Docs on an algorithm he

00:18:28,980 --> 00:18:33,270
calls differential sync and he had also

00:18:30,630 --> 00:18:36,330
written a really cool library called

00:18:33,270 --> 00:18:38,580
diff match patch which does dipping of

00:18:36,330 --> 00:18:41,429
strings and creating patches from those

00:18:38,580 --> 00:18:42,900
diffs very efficiently in a whole bunch

00:18:41,429 --> 00:18:45,090
of different places he implemented in

00:18:42,900 --> 00:18:47,039
Python and JavaScript and in all kinds

00:18:45,090 --> 00:18:49,020
of places and it's it's really designed

00:18:47,039 --> 00:18:50,220
for doing real time collaboration it's

00:18:49,020 --> 00:18:51,600
kind of like DIF that you'd use on the

00:18:50,220 --> 00:18:53,850
command line but instead of line level

00:18:51,600 --> 00:18:55,520
it's character level so it's critical to

00:18:53,850 --> 00:18:58,890
know about if you're going to implement

00:18:55,520 --> 00:19:00,150
real-time sync even if you're going to

00:18:58,890 --> 00:19:02,280
synchronize things other than strings

00:19:00,150 --> 00:19:03,600
often complicated objects have strings

00:19:02,280 --> 00:19:06,659
in them and you have to keep track of

00:19:03,600 --> 00:19:09,270
that but I ran into so I implemented

00:19:06,659 --> 00:19:12,210
this fully ran it in production for

00:19:09,270 --> 00:19:14,490
about three years at scale and ran into

00:19:12,210 --> 00:19:17,820
every possible a miserable problem you

00:19:14,490 --> 00:19:19,500
could imagine so I only implement it for

00:19:17,820 --> 00:19:20,610
strings initially so I wanted to

00:19:19,500 --> 00:19:22,230
synchronize things like ipython

00:19:20,610 --> 00:19:25,770
notebooks arts like Jupiter notebooks

00:19:22,230 --> 00:19:27,240
and they are in structured objects so if

00:19:25,770 --> 00:19:28,860
you just try to naively synchronize them

00:19:27,240 --> 00:19:30,750
as if they're strings you ended up with

00:19:28,860 --> 00:19:33,150
merge conflicts that break the structure

00:19:30,750 --> 00:19:34,770
of being JSON and so you end up having

00:19:33,150 --> 00:19:37,890
to deal with that in a number of ways

00:19:34,770 --> 00:19:41,820
it's quite painful you can get it to

00:19:37,890 --> 00:19:44,610
work like 99% of the time once I was

00:19:41,820 --> 00:19:46,500
doing a demo and the implementation

00:19:44,610 --> 00:19:47,580
worked fine for the most part I was like

00:19:46,500 --> 00:19:49,200
hey everybody let's try to do this at

00:19:47,580 --> 00:19:51,299
once and I'm like half the class all had

00:19:49,200 --> 00:19:52,679
access to it and there were maybe 50

00:19:51,299 --> 00:19:55,350
people there so they all tried to edit

00:19:52,679 --> 00:19:57,600
something and when there was corruption

00:19:55,350 --> 00:19:58,890
at a local level in the document there

00:19:57,600 --> 00:20:00,960
was some algorithm that would fix the

00:19:58,890 --> 00:20:02,820
corruption but everybody's tried to fix

00:20:00,960 --> 00:20:04,049
the corruption simultaneously which

00:20:02,820 --> 00:20:07,290
caused the corruption to get even worse

00:20:04,049 --> 00:20:09,120
and then it blew up and then anyone who

00:20:07,290 --> 00:20:10,950
even tried to open the file with their

00:20:09,120 --> 00:20:12,480
browser would hang and there was also a

00:20:10,950 --> 00:20:13,140
notification encouraging you strongly to

00:20:12,480 --> 00:20:15,600
open the file

00:20:13,140 --> 00:20:16,799
so you basically log in to KO calc want

00:20:15,600 --> 00:20:20,100
to open this file and then have your

00:20:16,799 --> 00:20:21,390
browser hang and that wasn't good so a

00:20:20,100 --> 00:20:23,159
lot of stuff like that can happen if

00:20:21,390 --> 00:20:24,840
you're not really careful real-time sync

00:20:23,159 --> 00:20:27,510
it's like you kind of had this dynamical

00:20:24,840 --> 00:20:29,580
system that you hope it convert you hope

00:20:27,510 --> 00:20:33,870
when you iterate things converge to some

00:20:29,580 --> 00:20:35,790
point but they don't necessarily okay

00:20:33,870 --> 00:20:38,640
these are some diagrams right here from

00:20:35,790 --> 00:20:40,950
the diff sync or the differential sync

00:20:38,640 --> 00:20:42,360
paper so you can see there's the text

00:20:40,950 --> 00:20:44,130
there's a shadow of the text there's

00:20:42,360 --> 00:20:45,750
this backup shadow the server shadow

00:20:44,130 --> 00:20:47,790
there's all these like different objects

00:20:45,750 --> 00:20:49,380
you have to keep track of and there's

00:20:47,790 --> 00:20:52,710
protocols from what you do when things

00:20:49,380 --> 00:20:56,070
break and and so on so it's it's pretty

00:20:52,710 --> 00:20:59,570
tricky to implement a lot can go wrong

00:20:56,070 --> 00:21:03,000
and sorry when I touch the screen it

00:20:59,570 --> 00:21:04,590
keeps moving and there's a there's a big

00:21:03,000 --> 00:21:07,559
latency issue if you have more than like

00:21:04,590 --> 00:21:09,659
two or three users so it's kind of like

00:21:07,559 --> 00:21:12,090
it's a little bit like doing git commit

00:21:09,659 --> 00:21:15,390
git pull git push around in a circle

00:21:12,090 --> 00:21:17,520
over and over again so which is a

00:21:15,390 --> 00:21:20,760
totally I mean you could implement sync

00:21:17,520 --> 00:21:23,429
that way but I wouldn't recommend it the

00:21:20,760 --> 00:21:27,600
second implementation of sync that I did

00:21:23,429 --> 00:21:30,090
in Co calc in 2016 this is I'm going to

00:21:27,600 --> 00:21:31,830
tell you exactly how it works and that's

00:21:30,090 --> 00:21:33,590
in the next two slides the slide just

00:21:31,830 --> 00:21:36,360
has a lot of text on it but basically

00:21:33,590 --> 00:21:38,789
what I what happened was the following

00:21:36,360 --> 00:21:41,669
an undergraduate was doing a google

00:21:38,789 --> 00:21:43,530
Summer of Code project and he wanted out

00:21:41,669 --> 00:21:46,559
a slider that time-travel slider you

00:21:43,530 --> 00:21:48,149
just saw to Co calc back then we didn't

00:21:46,559 --> 00:21:49,710
have any history of editing of documents

00:21:48,149 --> 00:21:51,030
he just wanted that I guess he was a

00:21:49,710 --> 00:21:53,970
mistake prone and really wanted to know

00:21:51,030 --> 00:21:55,470
how to undo things and he ended up

00:21:53,970 --> 00:21:57,330
having to implement something I keep

00:21:55,470 --> 00:22:00,600
kept track of all the changes to a

00:21:57,330 --> 00:22:03,000
document as the document evolved and at

00:22:00,600 --> 00:22:03,610
the same time I switched I was switching

00:22:03,000 --> 00:22:05,590
Cocalico

00:22:03,610 --> 00:22:10,150
reacts or rewriting everything from

00:22:05,590 --> 00:22:11,740
jQuery and HTML to react and in react

00:22:10,150 --> 00:22:13,450
there's a very similar problem where you

00:22:11,740 --> 00:22:16,240
have to keep track of the state of a

00:22:13,450 --> 00:22:18,280
document as it evolves and there's a lot

00:22:16,240 --> 00:22:20,440
of use of diff algorithms and clever

00:22:18,280 --> 00:22:22,360
tricks to you know computing a diff of

00:22:20,440 --> 00:22:24,790
two two strings or more general

00:22:22,360 --> 00:22:26,049
structures in general can be very time

00:22:24,790 --> 00:22:28,420
consuming if you want to find like the

00:22:26,049 --> 00:22:30,040
optimal diff or the optimal way to

00:22:28,420 --> 00:22:31,929
transform one thing to another but you

00:22:30,040 --> 00:22:34,510
can always just give up after a short

00:22:31,929 --> 00:22:36,040
amount of time and then choose this

00:22:34,510 --> 00:22:40,330
choose a stupid way to convert one

00:22:36,040 --> 00:22:43,419
structure to another so so you can do

00:22:40,330 --> 00:22:45,160
really cool things by just not trying to

00:22:43,419 --> 00:22:46,660
find the best possible way to transform

00:22:45,160 --> 00:22:49,000
one structure to another just find a

00:22:46,660 --> 00:22:50,140
good one so there really there's a you

00:22:49,000 --> 00:22:52,570
know there's all these clever tricks

00:22:50,140 --> 00:22:54,669
that in programming that allow you to do

00:22:52,570 --> 00:22:58,720
things using new ideas that you'd like

00:22:54,669 --> 00:23:00,790
to do etc so in any case at the same

00:22:58,720 --> 00:23:04,120
time is that I also switched kokal to

00:23:00,790 --> 00:23:05,770
use rethink DB which is a database his

00:23:04,120 --> 00:23:07,690
main sort of central idea is push

00:23:05,770 --> 00:23:09,669
notifications what you do is you do a

00:23:07,690 --> 00:23:11,410
query you subscribe to the query and

00:23:09,669 --> 00:23:13,059
then anytime something changes it tells

00:23:11,410 --> 00:23:18,730
you what the changes which is a pretty

00:23:13,059 --> 00:23:21,280
cool feature so you're so anyways I roll

00:23:18,730 --> 00:23:22,630
this out and implemented it and it's a

00:23:21,280 --> 00:23:23,679
different way to do sync and I'm gonna

00:23:22,630 --> 00:23:27,700
tell you exactly how it works in a

00:23:23,679 --> 00:23:29,860
moment instead of differential sync but

00:23:27,700 --> 00:23:32,830
the one sentence version of how this

00:23:29,860 --> 00:23:36,130
works is the following you keep track of

00:23:32,830 --> 00:23:38,429
the changes that each user makes to the

00:23:36,130 --> 00:23:41,260
document you broadcast them around

00:23:38,429 --> 00:23:43,870
everybody gets the changes and then you

00:23:41,260 --> 00:23:46,059
put them in a in a log with a certain

00:23:43,870 --> 00:23:47,500
order and then the definition of the

00:23:46,059 --> 00:23:49,330
state of the document at a given point

00:23:47,500 --> 00:23:51,100
in time is the result of replaying the

00:23:49,330 --> 00:23:56,160
log up to that point in time it's a log

00:23:51,100 --> 00:23:58,299
structured it's a log data structure so

00:23:56,160 --> 00:24:01,120
applied to the problem of real-time sync

00:23:58,299 --> 00:24:04,240
and it works really really well for our

00:24:01,120 --> 00:24:05,679
situation so now let me tell you exactly

00:24:04,240 --> 00:24:07,990
how it works in calc so they're

00:24:05,679 --> 00:24:10,770
prerequisite is you need to have a way

00:24:07,990 --> 00:24:12,820
for a clients to agree on a synchronized

00:24:10,770 --> 00:24:15,490
consistent shared log it's just a list

00:24:12,820 --> 00:24:16,900
of timestamp and a patch so you just

00:24:15,490 --> 00:24:17,500
apply all those and that gives you the

00:24:16,900 --> 00:24:19,600
current version of the

00:24:17,500 --> 00:24:21,250
document there are various ways to do

00:24:19,600 --> 00:24:22,660
this and of course the devil is in the

00:24:21,250 --> 00:24:25,120
details to put it mildly

00:24:22,660 --> 00:24:26,470
as far as implementing this goes one is

00:24:25,120 --> 00:24:28,900
you can use one of these databases I

00:24:26,470 --> 00:24:31,210
just mentioned I did use rethink DB for

00:24:28,900 --> 00:24:33,430
a while I rewrote everything to use

00:24:31,210 --> 00:24:35,740
PostgreSQL and it's listen notify

00:24:33,430 --> 00:24:39,430
functionality because rethink DB went

00:24:35,740 --> 00:24:41,470
out of business and PostgreSQL is easily

00:24:39,430 --> 00:24:44,080
five to ten times faster so two good

00:24:41,470 --> 00:24:45,730
reasons there's also a firebase from

00:24:44,080 --> 00:24:47,410
Google they used to have something

00:24:45,730 --> 00:24:49,420
called Google's real time API and

00:24:47,410 --> 00:24:52,210
somebody implemented real time sync for

00:24:49,420 --> 00:24:54,670
Jupiter notebooks on top of that for

00:24:52,210 --> 00:24:55,900
Jupiter lab at one point in time this is

00:24:54,670 --> 00:25:00,400
a link to that although Google

00:24:55,900 --> 00:25:02,140
deprecated it so that's gone the point

00:25:00,400 --> 00:25:04,510
of the database is it allows you to

00:25:02,140 --> 00:25:06,490
provide safe long-term storage for this

00:25:04,510 --> 00:25:08,740
list of pairs a timestamp in a patch

00:25:06,490 --> 00:25:11,350
because it's really really nice that no

00:25:08,740 --> 00:25:12,910
matter what happens you have the Edit

00:25:11,350 --> 00:25:15,940
history of a document you know your file

00:25:12,910 --> 00:25:18,130
system blows up something goes wrong

00:25:15,940 --> 00:25:19,990
people somebody accidentally deletes all

00:25:18,130 --> 00:25:21,370
their work at least in the database you

00:25:19,990 --> 00:25:24,880
have this immutable log which is the

00:25:21,370 --> 00:25:26,200
history of editing the document on the

00:25:24,880 --> 00:25:28,960
other hand you can take you can approach

00:25:26,200 --> 00:25:30,580
the whole problem by just using say

00:25:28,960 --> 00:25:32,350
Primus or some other web socket layer

00:25:30,580 --> 00:25:34,870
that gives you dedicated channels for

00:25:32,350 --> 00:25:37,060
each document and you just push out a

00:25:34,870 --> 00:25:38,830
message which is hey here's the change I

00:25:37,060 --> 00:25:40,870
made it gets broadcast to everybody and

00:25:38,830 --> 00:25:42,730
assuming no packets are ever lost

00:25:40,870 --> 00:25:44,830
assuming nobody ever gets disconnected

00:25:42,730 --> 00:25:46,360
from their Wi-Fi of course those

00:25:44,830 --> 00:25:50,350
assumptions are false then this would

00:25:46,360 --> 00:25:54,520
also give you a similar log so you would

00:25:50,350 --> 00:25:56,260
have to deal with that problem and in

00:25:54,520 --> 00:25:58,300
code calc I'm currently combining both

00:25:56,260 --> 00:26:00,220
approaches so the database approach is

00:25:58,300 --> 00:26:02,650
fully implemented and has been live for

00:26:00,220 --> 00:26:04,150
a couple of years but I want to reduce

00:26:02,650 --> 00:26:07,330
the latency when you're doing real-time

00:26:04,150 --> 00:26:09,100
sync and I'm doing that via also using a

00:26:07,330 --> 00:26:11,020
WebSocket channel to distribute messages

00:26:09,100 --> 00:26:12,430
so that will give me a really fast

00:26:11,020 --> 00:26:14,080
update then I'll distribute exactly the

00:26:12,430 --> 00:26:16,330
same messages via the database that will

00:26:14,080 --> 00:26:21,340
be slower but it'll only be a backup in

00:26:16,330 --> 00:26:23,110
case of lost messages okay so here's the

00:26:21,340 --> 00:26:26,920
sync algorithm this is the most

00:26:23,110 --> 00:26:29,440
important notice the very bottom is

00:26:26,920 --> 00:26:31,030
missing but this is the most important

00:26:29,440 --> 00:26:31,480
slide in the talk if you want to

00:26:31,030 --> 00:26:34,210
understand

00:26:31,480 --> 00:26:35,500
how Co calc does real-time sync so and

00:26:34,210 --> 00:26:38,290
it's really just a review of what I just

00:26:35,500 --> 00:26:41,080
said a minute ago so there's a log of

00:26:38,290 --> 00:26:42,970
patches it's the time the user and an

00:26:41,080 --> 00:26:45,130
actual patch that you can apply to the

00:26:42,970 --> 00:26:46,690
document it's good to include the user

00:26:45,130 --> 00:26:48,760
as well I didn't mention that before and

00:26:46,690 --> 00:26:52,030
the time and the user should be unique

00:26:48,760 --> 00:26:53,260
and the state of the document at some

00:26:52,030 --> 00:26:54,880
point in time is just the result of a

00:26:53,260 --> 00:26:55,990
you just order all the patches and you

00:26:54,880 --> 00:26:57,850
just apply them you start with the empty

00:26:55,990 --> 00:26:58,840
document just keep applying patches to

00:26:57,850 --> 00:27:00,490
it and you get the current version of

00:26:58,840 --> 00:27:03,190
the document so that's the data

00:27:00,490 --> 00:27:04,510
structure that's that's all the

00:27:03,190 --> 00:27:06,670
communication that goes around the only

00:27:04,510 --> 00:27:09,370
communication between the clients is a

00:27:06,670 --> 00:27:11,020
client like your browser sends a message

00:27:09,370 --> 00:27:14,380
saying hey here's a couple of edits that

00:27:11,020 --> 00:27:16,240
I made at these points in time it sends

00:27:14,380 --> 00:27:17,740
them out and then somehow they get

00:27:16,240 --> 00:27:20,410
broadcast to all the other clients and

00:27:17,740 --> 00:27:22,270
then they get put in this log and then

00:27:20,410 --> 00:27:24,460
all the clients if everybody stops

00:27:22,270 --> 00:27:26,170
typing all the clients love exactly the

00:27:24,460 --> 00:27:27,340
same log and they'll all be looking at

00:27:26,170 --> 00:27:29,560
the document that's the result of

00:27:27,340 --> 00:27:31,420
applying all the touches in order so

00:27:29,560 --> 00:27:32,920
that's the entire algorithm I mean

00:27:31,420 --> 00:27:34,840
obviously you need to figure out how to

00:27:32,920 --> 00:27:37,300
do all the things I said there's a

00:27:34,840 --> 00:27:38,760
couple of details there but that's the

00:27:37,300 --> 00:27:41,350
that's the sort of conceptual

00:27:38,760 --> 00:27:43,390
abstraction to think about so the

00:27:41,350 --> 00:27:44,890
algorithm itself when a user connects

00:27:43,390 --> 00:27:47,230
they have to they they're going to put a

00:27:44,890 --> 00:27:48,940
timestamp on their patches so you send

00:27:47,230 --> 00:27:51,310
them a message saying here's the current

00:27:48,940 --> 00:27:52,810
time and then you can do like a standard

00:27:51,310 --> 00:27:55,180
algorithm to try to make the time a

00:27:52,810 --> 00:27:57,220
little better but it's okay if their

00:27:55,180 --> 00:27:59,470
clock is off by one half of a second or

00:27:57,220 --> 00:28:00,940
a second or even two seconds you just

00:27:59,470 --> 00:28:03,220
don't want the clock to be off by 30

00:28:00,940 --> 00:28:07,630
minutes or something ridiculous you

00:28:03,220 --> 00:28:08,920
could also assign times in the central

00:28:07,630 --> 00:28:11,650
server and then send them back but that

00:28:08,920 --> 00:28:12,880
just complicates things a little bit so

00:28:11,650 --> 00:28:14,440
what happens is user seen they're

00:28:12,880 --> 00:28:16,450
editing the document and then

00:28:14,440 --> 00:28:17,050
periodically when they pause for a

00:28:16,450 --> 00:28:19,810
second

00:28:17,050 --> 00:28:21,970
you take a diff from the current version

00:28:19,810 --> 00:28:23,560
to the version that they've now changed

00:28:21,970 --> 00:28:27,010
and then you send a message saying

00:28:23,560 --> 00:28:28,720
here's a change I made and you just like

00:28:27,010 --> 00:28:31,510
that's that's sort of the active part

00:28:28,720 --> 00:28:32,650
and then the other part is receive every

00:28:31,510 --> 00:28:35,170
once in a while you get messages coming

00:28:32,650 --> 00:28:38,770
in so you apply those you just put them

00:28:35,170 --> 00:28:40,570
into your log and then pause and then

00:28:38,770 --> 00:28:41,680
the version of the document that the

00:28:40,570 --> 00:28:42,990
user is looking at it's the result of

00:28:41,680 --> 00:28:45,330
applying all the patches

00:28:42,990 --> 00:28:47,490
there's a whole bunch of algorithms you

00:28:45,330 --> 00:28:48,960
have to figure out based on this data

00:28:47,490 --> 00:28:52,380
structure like how do you do user

00:28:48,960 --> 00:28:54,750
specific undo and redo how do you if a

00:28:52,380 --> 00:28:56,309
user like basically you're getting all

00:28:54,750 --> 00:28:58,110
these patches but they could be 30

00:28:56,309 --> 00:28:59,520
seconds ago 20 seconds ago you stick

00:28:58,110 --> 00:29:00,659
them in the log and now you have to

00:28:59,520 --> 00:29:02,070
efficiently figure out what the current

00:29:00,659 --> 00:29:07,380
version of the document is so you'll

00:29:02,070 --> 00:29:09,929
want to cache cleverly recent versions

00:29:07,380 --> 00:29:12,090
of replaying the log so there's a whole

00:29:09,929 --> 00:29:13,740
bunch of data structures and algorithms

00:29:12,090 --> 00:29:15,450
involved in doing that efficiently and

00:29:13,740 --> 00:29:17,549
lots of chances to mess things up

00:29:15,450 --> 00:29:20,159
because caching always results in bugs

00:29:17,549 --> 00:29:21,149
you have to be really careful but that's

00:29:20,159 --> 00:29:22,289
the whole algorithm at least

00:29:21,149 --> 00:29:24,059
conceptually it's easy to think about

00:29:22,289 --> 00:29:25,799
and of course it's very much inspired by

00:29:24,059 --> 00:29:29,850
like how online video games work and

00:29:25,799 --> 00:29:31,110
stuff one other thing is what if you try

00:29:29,850 --> 00:29:34,260
to apply one of these patches and it

00:29:31,110 --> 00:29:37,559
fails well in diff match patch patches

00:29:34,260 --> 00:29:39,570
always apply on a best effort basis so

00:29:37,559 --> 00:29:42,750
there's a parameter you give that's part

00:29:39,570 --> 00:29:43,980
of your algorithm and it breaks so it

00:29:42,750 --> 00:29:45,750
get a patches a whole bunch of little

00:29:43,980 --> 00:29:47,190
changes your you want to make with

00:29:45,750 --> 00:29:49,260
context and if there's not enough

00:29:47,190 --> 00:29:51,120
context given whatever parameter you

00:29:49,260 --> 00:29:53,220
have it just fails little bits of the

00:29:51,120 --> 00:29:55,409
patch it's kind of like in get word just

00:29:53,220 --> 00:29:56,580
or with what with patch where certain

00:29:55,409 --> 00:30:00,600
parts of the patch don't apply

00:29:56,580 --> 00:30:02,490
so in receive and update you try to

00:30:00,600 --> 00:30:03,870
integrate your patch into the log but if

00:30:02,490 --> 00:30:05,549
parts of the patch don't apply you just

00:30:03,870 --> 00:30:07,289
throw them away those parts and this

00:30:05,549 --> 00:30:08,940
ends up meaning that like if two people

00:30:07,289 --> 00:30:11,880
are typing simultaneously in the exact

00:30:08,940 --> 00:30:13,860
same spot somebody is going to win which

00:30:11,880 --> 00:30:17,010
one wins depends on the timestamp and

00:30:13,860 --> 00:30:18,840
how much of their patch got applied but

00:30:17,010 --> 00:30:21,510
it is once you know the timestamps it's

00:30:18,840 --> 00:30:22,950
predictable and everybody will agree on

00:30:21,510 --> 00:30:30,570
exactly the same current state of the

00:30:22,950 --> 00:30:31,440
document okay so that's it as far as

00:30:30,570 --> 00:30:33,360
what the algorithm is

00:30:31,440 --> 00:30:35,190
but then there's more problems what is a

00:30:33,360 --> 00:30:40,559
patch what kind of documents do you have

00:30:35,190 --> 00:30:45,299
and so you have to work that out and so

00:30:40,559 --> 00:30:48,330
here initially I just synchronized text

00:30:45,299 --> 00:30:50,039
documents but that's fine for editing

00:30:48,330 --> 00:30:52,620
source code and it's a markdown files

00:30:50,039 --> 00:30:54,360
where like any document is valid but if

00:30:52,620 --> 00:30:56,340
you try to synchronize ipython notebooks

00:30:54,360 --> 00:30:57,870
you end up very quickly with a corrupted

00:30:56,340 --> 00:31:03,299
and completely meaningless notebook and

00:30:57,870 --> 00:31:05,179
that's not good so um here's how here's

00:31:03,299 --> 00:31:06,390
what I did so instead I came up with

00:31:05,179 --> 00:31:08,549
something

00:31:06,390 --> 00:31:10,500
basically motivated by using Cassandra

00:31:08,549 --> 00:31:13,529
Li which is like this object database

00:31:10,500 --> 00:31:17,070
that's distributed which you define a

00:31:13,529 --> 00:31:19,559
table you say these are the primary keys

00:31:17,070 --> 00:31:23,190
for a table and each row in the table

00:31:19,559 --> 00:31:25,860
each object in the table there can be at

00:31:23,190 --> 00:31:28,770
most one with those primary keys and you

00:31:25,860 --> 00:31:32,130
can also specify things like this key

00:31:28,770 --> 00:31:35,789
its value has to be a string and when

00:31:32,130 --> 00:31:38,130
you do disks and patches to a given

00:31:35,789 --> 00:31:39,450
object you use the normal string diff

00:31:38,130 --> 00:31:40,980
match patch algorithm it's very

00:31:39,450 --> 00:31:42,779
important because imagine somebody

00:31:40,980 --> 00:31:45,210
editing a Jupiter notebook they're often

00:31:42,779 --> 00:31:46,830
editing a big input cell maybe it's you

00:31:45,210 --> 00:31:49,140
know three pages of code they're making

00:31:46,830 --> 00:31:50,700
tiny little changes just to that text so

00:31:49,140 --> 00:31:52,110
you don't want to send the entire text

00:31:50,700 --> 00:31:53,850
every time you just want to send a

00:31:52,110 --> 00:31:55,679
little patch using the diff match patch

00:31:53,850 --> 00:31:57,870
algorithm to just that little tiny piece

00:31:55,679 --> 00:31:59,690
of the cell that they're editing so you

00:31:57,870 --> 00:32:02,669
specify all that sort of stuff and then

00:31:59,690 --> 00:32:04,289
you synchronize around these objects so

00:32:02,669 --> 00:32:07,860
you make a notion of dipping and

00:32:04,289 --> 00:32:09,870
patching objects with a given list of

00:32:07,860 --> 00:32:11,010
primary keys to make that very concrete

00:32:09,870 --> 00:32:16,289
I'll show you how it works for ipython

00:32:11,010 --> 00:32:17,970
notebooks so let's see I want to zoom in

00:32:16,289 --> 00:32:24,000
a little without going to the next page

00:32:17,970 --> 00:32:25,679
OOP Stan okay there we are so here if

00:32:24,000 --> 00:32:28,200
you make a brand new blank ipython

00:32:25,679 --> 00:32:30,600
notebook what did what I do is I take

00:32:28,200 --> 00:32:33,779
the I PI MB file and I translate it into

00:32:30,600 --> 00:32:36,450
a list of objects that are sink friendly

00:32:33,779 --> 00:32:38,820
and here's a brand new blank ipython

00:32:36,450 --> 00:32:40,799
file there's a cell with empty input

00:32:38,820 --> 00:32:43,679
that's the first one and it has position

00:32:40,799 --> 00:32:45,960
0 the position is a real number and the

00:32:43,679 --> 00:32:48,570
definition of the order of the cells is

00:32:45,960 --> 00:32:50,490
just you sort the positions so if you

00:32:48,570 --> 00:32:52,559
take a cell down here and drag it to the

00:32:50,490 --> 00:32:55,230
top it just sets the position of that

00:32:52,559 --> 00:32:57,149
one cell to be you know some you know

00:32:55,230 --> 00:32:58,679
small real or negative real number and

00:32:57,149 --> 00:33:00,809
so you don't have to like do really

00:32:58,679 --> 00:33:02,279
complicated objects or operations of all

00:33:00,809 --> 00:33:04,110
these moving objects around in your data

00:33:02,279 --> 00:33:06,360
structure so you can forget about that

00:33:04,110 --> 00:33:08,880
there's also just some additional meta

00:33:06,360 --> 00:33:11,039
information and there's things like

00:33:08,880 --> 00:33:12,779
whether the Colonel's running what the

00:33:11,039 --> 00:33:13,950
colonel is etc and then there's a

00:33:12,779 --> 00:33:15,480
back-end that knows additional

00:33:13,950 --> 00:33:17,490
information that makes it possible to

00:33:15,480 --> 00:33:19,350
save this back out to disk so basically

00:33:17,490 --> 00:33:22,159
you define a bisection between or

00:33:19,350 --> 00:33:24,600
mapping between I PI and B files and

00:33:22,159 --> 00:33:27,149
some other data structure that's very

00:33:24,600 --> 00:33:29,850
sync friendly that's not a JSON file

00:33:27,149 --> 00:33:31,289
because it's really a fool's errand to

00:33:29,850 --> 00:33:32,759
try to do synchronization directly with

00:33:31,289 --> 00:33:36,210
JSON files so you do all the

00:33:32,759 --> 00:33:38,970
synchronization with a small distributed

00:33:36,210 --> 00:33:40,350
object database and then whenever the

00:33:38,970 --> 00:33:42,299
person wants to save the file to disk

00:33:40,350 --> 00:33:44,070
you just export it back out to an IP MB

00:33:42,299 --> 00:33:47,639
file so you just define converters in

00:33:44,070 --> 00:33:49,350
both directions if you type so it looks

00:33:47,639 --> 00:33:51,240
like it's two plus three I said two plus

00:33:49,350 --> 00:33:55,559
two bits two plus three and then hit

00:33:51,240 --> 00:33:58,860
enter then here's how the whoops crap go

00:33:55,559 --> 00:34:01,649
back here's how the document changes so

00:33:58,860 --> 00:34:03,299
now there's some output and the input

00:34:01,649 --> 00:34:06,929
change to two plus three from being

00:34:03,299 --> 00:34:09,210
blank and it's the output messages etc

00:34:06,929 --> 00:34:10,500
and the other parts are basically the

00:34:09,210 --> 00:34:17,040
same there's a little bit of information

00:34:10,500 --> 00:34:18,210
about memory and CPU usage okay and this

00:34:17,040 --> 00:34:21,569
is synchronized around to all the

00:34:18,210 --> 00:34:24,629
clients and if you were to make a new

00:34:21,569 --> 00:34:26,159
cell then there would be another object

00:34:24,629 --> 00:34:28,740
with type cell it'll have a different

00:34:26,159 --> 00:34:36,119
random ID and they might have its input

00:34:28,740 --> 00:34:38,040
its output et cetera okay here's some

00:34:36,119 --> 00:34:39,450
links to the source code when you get my

00:34:38,040 --> 00:34:42,450
slides which will surely be linked to

00:34:39,450 --> 00:34:43,530
from the page for the talk you can click

00:34:42,450 --> 00:34:49,079
on these if you want to look at source

00:34:43,530 --> 00:34:52,379
code and that's what I wanted to say

00:34:49,079 --> 00:34:56,040
about sync and I have four by five

00:34:52,379 --> 00:34:57,290
minutes left let me stop for a second to

00:34:56,040 --> 00:35:00,530
see if there any questions about how

00:34:57,290 --> 00:35:03,599
real-time sync works or any

00:35:00,530 --> 00:35:10,250
clarifications you might want and then I

00:35:03,599 --> 00:35:10,250
can show you a few other things yes

00:35:11,080 --> 00:35:20,090
how does the poor user pre oh oh it

00:35:17,510 --> 00:35:22,430
makes a new patch that's the undo so I

00:35:20,090 --> 00:35:24,950
mean there's a there's a lot of details

00:35:22,430 --> 00:35:26,960
there even but you just take the thing

00:35:24,950 --> 00:35:28,430
that they want to undo and then you

00:35:26,960 --> 00:35:30,590
apply it to the current state of the

00:35:28,430 --> 00:35:32,600
document to get a new version and you

00:35:30,590 --> 00:35:33,920
have to keep track of if they undo again

00:35:32,600 --> 00:35:35,270
then you have to go back and see what

00:35:33,920 --> 00:35:37,270
the last thing they did in that session

00:35:35,270 --> 00:35:40,820
is and then apply that so you just apply

00:35:37,270 --> 00:35:42,170
basically you apply the reverses of the

00:35:40,820 --> 00:35:44,180
patches of the things that they did

00:35:42,170 --> 00:35:46,430
before and figuring out the reverse of a

00:35:44,180 --> 00:35:50,330
patch well that's easy you just do a

00:35:46,430 --> 00:35:51,530
diff but no opposite order so it's

00:35:50,330 --> 00:35:53,450
better to do that than to try to figure

00:35:51,530 --> 00:35:57,110
out by some clever trick what the

00:35:53,450 --> 00:35:59,300
reverse is yes oh one other thing I

00:35:57,110 --> 00:36:01,250
should say immutable Jas which is a

00:35:59,300 --> 00:36:03,200
library from Facebook which is used a

00:36:01,250 --> 00:36:05,090
lot in react is super useful for

00:36:03,200 --> 00:36:06,830
implementing dipping and patching on

00:36:05,090 --> 00:36:14,630
arbitrary objects rather than just

00:36:06,830 --> 00:36:18,890
strings so I forgot to say that yes yes

00:36:14,630 --> 00:36:20,180
yep yep the docker when you run that one

00:36:18,890 --> 00:36:22,300
light when you type in that one line

00:36:20,180 --> 00:36:28,010
it's fully up and running and has

00:36:22,300 --> 00:36:28,940
PostgreSQL running etc yeah and but it

00:36:28,010 --> 00:36:31,100
would be great if somebody were to

00:36:28,940 --> 00:36:32,390
actually use the docker image besides me

00:36:31,100 --> 00:36:34,460
because then maybe I get some poor

00:36:32,390 --> 00:36:36,770
requests and add some other kernels and

00:36:34,460 --> 00:36:38,810
stuff like that so and I haven't one of

00:36:36,770 --> 00:36:40,760
my employees I've encouraged him to do a

00:36:38,810 --> 00:36:42,860
bunch of work on making the docker image

00:36:40,760 --> 00:36:45,760
more friendly so that's going to improve

00:36:42,860 --> 00:36:45,760
a lot in the near future

00:36:45,850 --> 00:36:57,560
any oh yes yeah yeah yep well you don't

00:36:56,090 --> 00:37:00,920
to do anything for a particular kernels

00:36:57,560 --> 00:37:02,300
yeah um let's see I guess one other

00:37:00,920 --> 00:37:05,450
thing that's sink related I shouldn't

00:37:02,300 --> 00:37:07,820
mention I did implement using classical

00:37:05,450 --> 00:37:09,470
plain vanilla Jupiter in an iframe with

00:37:07,820 --> 00:37:12,380
real-time sync that's what we had up

00:37:09,470 --> 00:37:16,790
until 2017 it's still available and you

00:37:12,380 --> 00:37:18,650
can use it it looks like well here's a

00:37:16,790 --> 00:37:20,240
slide about it looks like that so it

00:37:18,650 --> 00:37:22,880
looks well it looks like it is real it

00:37:20,240 --> 00:37:23,660
is just Jupiter what happens is it loads

00:37:22,880 --> 00:37:24,980
Jupiter

00:37:23,660 --> 00:37:26,539
the JavaScript and then at monkey

00:37:24,980 --> 00:37:27,619
patches the heck out of it to make it

00:37:26,539 --> 00:37:30,349
possible so that whenever the user

00:37:27,619 --> 00:37:32,270
changes the cell or changes anything it

00:37:30,349 --> 00:37:34,369
figured it pulls out the state of the

00:37:32,270 --> 00:37:36,349
document does it diff and then sends

00:37:34,369 --> 00:37:37,760
that diff all and then it can do the

00:37:36,349 --> 00:37:40,160
reverse operation and it doesn't on

00:37:37,760 --> 00:37:43,220
normal jupiter notebooks and it's so

00:37:40,160 --> 00:37:45,049
freakin hard to get to work reliably so

00:37:43,220 --> 00:37:46,190
I I deleted it and then had to bring it

00:37:45,049 --> 00:37:48,559
back because there were a few features

00:37:46,190 --> 00:37:49,910
of Jupiter that instructors definitely

00:37:48,559 --> 00:37:51,829
need it or desperately needed like

00:37:49,910 --> 00:37:53,510
interactive widgets so we don't have

00:37:51,829 --> 00:37:55,700
interactive widgets in our reactor II

00:37:53,510 --> 00:37:57,799
right yet though I think we will within

00:37:55,700 --> 00:37:58,940
the next two weeks because that's what

00:37:57,799 --> 00:38:01,880
I've been working on for the last few

00:37:58,940 --> 00:38:03,740
weeks okay

00:38:01,880 --> 00:38:05,390
okay since I still have a minute and a

00:38:03,740 --> 00:38:07,099
half or two minutes I'm going to show

00:38:05,390 --> 00:38:09,230
you just a bunch of pictures screenshots

00:38:07,099 --> 00:38:10,579
they mate so this is classical real time

00:38:09,230 --> 00:38:14,420
sync this is what I just showed you

00:38:10,579 --> 00:38:16,430
so the react rewrite of Jupiter you can

00:38:14,420 --> 00:38:18,319
also in a coke alec project there's a

00:38:16,430 --> 00:38:20,240
button you click it and it just pops up

00:38:18,319 --> 00:38:23,569
normal Jupiter in another tab just

00:38:20,240 --> 00:38:25,309
straight Jupiter obviously it doesn't

00:38:23,569 --> 00:38:27,829
have real-time sync but it's Jupiter and

00:38:25,309 --> 00:38:30,020
it's on the same file system in the same

00:38:27,829 --> 00:38:33,020
container stage worksheets I showed you

00:38:30,020 --> 00:38:34,400
those you can edit arbitrary code with

00:38:33,020 --> 00:38:36,410
the same like be able to split the

00:38:34,400 --> 00:38:40,180
editor and multiple points I'm working

00:38:36,410 --> 00:38:42,890
on vs code language survey protocol

00:38:40,180 --> 00:38:44,450
integration so that vs code will give

00:38:42,890 --> 00:38:45,859
you hints and so on and that's needed

00:38:44,450 --> 00:38:49,099
for lean which isn't automated they're

00:38:45,859 --> 00:38:51,710
improving our proof assistant system I'm

00:38:49,099 --> 00:38:54,020
working on supporting for math classes a

00:38:51,710 --> 00:38:56,650
lot tech editor that I showed you a

00:38:54,020 --> 00:39:00,380
command line terminal that I showed you

00:38:56,650 --> 00:39:02,420
chat rooms course management this is a

00:39:00,380 --> 00:39:05,420
course management thing with a few more

00:39:02,420 --> 00:39:07,670
students here's a bunch of examples of

00:39:05,420 --> 00:39:09,950
how R is available in code calc so you

00:39:07,670 --> 00:39:12,020
can use R with the jupiter kernel you

00:39:09,950 --> 00:39:15,079
can use R in a sage worksheet if you put

00:39:12,020 --> 00:39:16,960
% r at the top of a cell you can use R

00:39:15,079 --> 00:39:20,089
on the command line by just typing are

00:39:16,960 --> 00:39:21,700
you can edit a file that ends in R and

00:39:20,089 --> 00:39:25,670
it gives you nice syntax highlighting

00:39:21,700 --> 00:39:28,190
you can use our markdown where it puts

00:39:25,670 --> 00:39:30,319
you put the R code in the markdown file

00:39:28,190 --> 00:39:33,500
and then it renders it automatically so

00:39:30,319 --> 00:39:35,510
it runs it when you can use our tech

00:39:33,500 --> 00:39:37,460
which I showed you a minute ago so it's

00:39:35,510 --> 00:39:43,040
la tech but with our

00:39:37,460 --> 00:39:46,210
inside of it okay finally to end culture

00:39:43,040 --> 00:39:48,550
there's a bunch of people and users and

00:39:46,210 --> 00:39:51,079
finally this is my very last slide

00:39:48,550 --> 00:39:52,910
commercial versus academics so other

00:39:51,079 --> 00:39:54,680
projects I've started or been involved

00:39:52,910 --> 00:39:56,630
in like sage and Jupiter you know not

00:39:54,680 --> 00:39:59,240
for mainly not-for-profit academic

00:39:56,630 --> 00:40:01,670
projects whereas kokal cos commercial so

00:39:59,240 --> 00:40:03,910
why I had a lot of experience hosting

00:40:01,670 --> 00:40:06,260
online stuff at universities and did not

00:40:03,910 --> 00:40:09,170
well you get in a lot of trouble with

00:40:06,260 --> 00:40:12,680
your university and you get a lot of

00:40:09,170 --> 00:40:16,730
exposure so and it's a commercial

00:40:12,680 --> 00:40:17,839
project for various reasons so I'm just

00:40:16,730 --> 00:40:27,460
going to stop cuz I want to run over

00:40:17,839 --> 00:40:27,460
time so questions thank you yes

00:40:36,020 --> 00:40:41,030
so CoffeeScript I'm rewriting all of our

00:40:38,869 --> 00:40:43,460
CoffeeScript code in typescript since

00:40:41,030 --> 00:40:46,940
CoffeeScript was a really good choice in

00:40:43,460 --> 00:40:49,819
2013 2014 typescript is clearly the way

00:40:46,940 --> 00:40:51,170
to go for a large javascript code base

00:40:49,819 --> 00:40:53,380
these days so that's one thing that's

00:40:51,170 --> 00:40:55,549
being redone another thing is that

00:40:53,380 --> 00:40:56,809
sometimes our real-time sync will feel a

00:40:55,549 --> 00:40:59,059
little laggy like it might take two

00:40:56,809 --> 00:41:02,329
seconds and you want it to take 200

00:40:59,059 --> 00:41:05,630
milliseconds and I'm changing things to

00:41:02,329 --> 00:41:07,040
use a very direct WebSocket connection

00:41:05,630 --> 00:41:08,960
straight to the project rather than

00:41:07,040 --> 00:41:12,520
going through the database it'll still

00:41:08,960 --> 00:41:17,119
use the database but only as a backup

00:41:12,520 --> 00:41:18,680
yes reactant Redux are excellent we're

00:41:17,119 --> 00:41:20,780
only using them more and more react

00:41:18,680 --> 00:41:33,290
Redux typescript etc or core

00:41:20,780 --> 00:41:33,910
technologies I like react a lot yes so

00:41:33,290 --> 00:41:35,319
what is most

00:41:33,910 --> 00:41:39,960
difficult about this particular

00:41:35,319 --> 00:41:39,960
implementation of real-time sync

00:41:45,960 --> 00:41:51,069
probably the hardest thing of always

00:41:48,390 --> 00:41:53,440
coming up with a good way of dipping and

00:41:51,069 --> 00:41:55,569
patching arbitrary objects and then

00:41:53,440 --> 00:41:58,030
actually going just sitting down and

00:41:55,569 --> 00:42:00,280
implementing it fully rather than trying

00:41:58,030 --> 00:42:02,559
to fall back to just using strings which

00:42:00,280 --> 00:42:04,869
didn't work so well and it was nice to

00:42:02,559 --> 00:42:06,700
you know work Oh another another big

00:42:04,869 --> 00:42:09,819
problem is I PI and B files can be

00:42:06,700 --> 00:42:12,520
really really big stupid big so there's

00:42:09,819 --> 00:42:14,950
University of Sheffield uses R and Co

00:42:12,520 --> 00:42:16,420
calc and the first year that they use

00:42:14,950 --> 00:42:18,309
this they were off their students to

00:42:16,420 --> 00:42:19,599
make these 30 megabyte files the I plan

00:42:18,309 --> 00:42:21,880
B falls will be 30 megabytes because

00:42:19,599 --> 00:42:23,619
they have tons of big SVG images in them

00:42:21,880 --> 00:42:25,539
and we were trying to just sink those

00:42:23,619 --> 00:42:28,270
using diffing and patching as strings

00:42:25,539 --> 00:42:30,700
and it was a total nightmare so in that

00:42:28,270 --> 00:42:33,520
conversion from a PI and B file to this

00:42:30,700 --> 00:42:35,140
document database we factor out all

00:42:33,520 --> 00:42:36,819
images and other large data that's

00:42:35,140 --> 00:42:38,829
attached to the I PI and B file and

00:42:36,819 --> 00:42:41,470
serve that via HTTP in a completely

00:42:38,829 --> 00:42:44,349
different way so factoring out all large

00:42:41,470 --> 00:42:46,630
stuff is very important and serving it

00:42:44,349 --> 00:42:48,250
over a different channel you know and

00:42:46,630 --> 00:42:49,990
users like most of our students are like

00:42:48,250 --> 00:42:51,940
undergrad so you just kind of do while

00:42:49,990 --> 00:42:53,920
true print you know they make for loops

00:42:51,940 --> 00:42:55,990
that just burst a huge amount of output

00:42:53,920 --> 00:42:58,960
and that might be okay on your own

00:42:55,990 --> 00:43:00,369
computer you only hurt yourself but over

00:42:58,960 --> 00:43:02,260
the web it can be really painful because

00:43:00,369 --> 00:43:03,819
it can impact the other users to be

00:43:02,260 --> 00:43:05,260
really hard to get back into the project

00:43:03,819 --> 00:43:13,839
at all yeah it's a standard problem that

00:43:05,260 --> 00:43:17,650
that you have to deal with Jason right

00:43:13,839 --> 00:43:20,650
now what happens is right here where it

00:43:17,650 --> 00:43:22,150
writes so see right there there's a

00:43:20,650 --> 00:43:23,980
little part in the document that's

00:43:22,150 --> 00:43:25,960
output and then a message or our list of

00:43:23,980 --> 00:43:28,000
messages it just adds stuff to that so

00:43:25,960 --> 00:43:29,470
the current the back end server just

00:43:28,000 --> 00:43:34,059
sticks stuff in the output part of the

00:43:29,470 --> 00:43:35,559
table it just edits a particular entry

00:43:34,059 --> 00:43:37,299
in the document database and then

00:43:35,559 --> 00:43:39,940
everybody sees the change and renders

00:43:37,299 --> 00:43:41,829
the output so if you if there were two

00:43:39,940 --> 00:43:43,510
outputs in that cellar would been one

00:43:41,829 --> 00:43:46,440
labeled zero and another one labeled one

00:43:43,510 --> 00:43:46,440
as the keys

00:43:48,210 --> 00:43:52,930
not right now I know you're wondering

00:43:50,170 --> 00:43:54,580
about that to do coms and I I was

00:43:52,930 --> 00:43:58,630
working on that this week there will be

00:43:54,580 --> 00:44:00,670
a direct connection via web socket that

00:43:58,630 --> 00:44:01,210
proxies comes so we should talk about

00:44:00,670 --> 00:44:03,610
that later

00:44:01,210 --> 00:44:05,830
yeah so I have not implemented real-time

00:44:03,610 --> 00:44:09,580
I haven't implemented interactive

00:44:05,830 --> 00:44:12,280
widgets in this yet so that's a huge gap

00:44:09,580 --> 00:44:14,230
be missing piece of functionality so

00:44:12,280 --> 00:44:15,370
alright I'm definitely over time but if

00:44:14,230 --> 00:44:17,440
you have any other questions come and

00:44:15,370 --> 00:44:18,700
talk to me but talk to me today because

00:44:17,440 --> 00:44:23,910
I'm going to be leaving for the airport

00:44:18,700 --> 00:44:23,910

YouTube URL: https://www.youtube.com/watch?v=bjAE82dyDZ8


