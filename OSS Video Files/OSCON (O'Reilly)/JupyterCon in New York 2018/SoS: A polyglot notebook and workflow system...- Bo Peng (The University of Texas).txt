Title: SoS: A polyglot notebook and workflow system...- Bo Peng (The University of Texas)
Publication date: 2018-09-20
Playlist: JupyterCon in New York 2018
Description: 
	SoS: A polyglot notebook and workflow system for both interactive multilanguage data analysis and batch data processing
Bo Peng (The University of Texas, MD Anderson Cancer Center)

Exploratory data analysis in computationally intensive disciplines often necessitates exploiting a variety of tools implemented in different programming languages and analyzing large datasets on high-performance computing systems (e.g., computer clusters). Despite the large number of kernels that Jupyter supports and the availability of magics for executing scripts in other languages, it remains challenging to use Jupyter to develop multilanguage data analysis workflows and streamline the analysis of large amount of data on remote systems.

Bo Peng offers an overview of Script of Scripts, a Python 3-based workflow engine with a Jupyter frontend that allows the use of multiple kernels in one notebook. As a workflow engine, SoS provides an intuitive syntax for creating workflows in process-based, outcome-oriented (makefile style), and mixed styles, as well as a unified interface for executing and managing tasks on a variety of computing platforms with automatic synchronization of files among isolated filesystems. As a ployglot notebook, SoS allows the use of multiple kernels in a single Jupyter notebook. In addition to magics such as %expand and %capture to compose scripts and capture outputs from all Jupyter kernels, SoS allows exchange of variables among kernels of supported languages. Other useful features of the SoS kernel include a side panel that allows scratch execution of statements, preview of files and expressions, and line-by-line execution of statements in cells. This unique combination enables users to analyze data using multiple scripting languages in one notebook and, if needed, convert scripts to workflows to analyze large amounts of data on remote systems.

Researchers benefit from the SoS workflow system and Jupyter kernelâ€”they have the flexibility to use their preferred tools for tasks without having to worry about data flow and to perform light interactive analysis while executing heavy remote tasks simultaneous in the same notebook in a neat and organized fashion. SoS is distributed freely under a BSD license. A live Jupyter server and several Docker containers are provided for testing and running SoS easily. The SoS frontend is being ported to JupyterLab with a goal to release it with the release of JupyterLab 1.0.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,300 --> 00:00:06,080
welcome everyone thank you for coming

00:00:04,130 --> 00:00:12,050
for my talk is there going to the binder

00:00:06,080 --> 00:00:14,090
one so I think you already come here so

00:00:12,050 --> 00:00:16,640
I want to have a quick show of hands how

00:00:14,090 --> 00:00:20,869
many you have worked with more than one

00:00:16,640 --> 00:00:23,119
kernels of you right and how many of you

00:00:20,869 --> 00:00:26,689
have worked with multiple colors for one

00:00:23,119 --> 00:00:29,329
single project last far less so that

00:00:26,689 --> 00:00:31,999
means usually you stick with one kernel

00:00:29,329 --> 00:00:35,030
for one project and how many have you

00:00:31,999 --> 00:00:38,840
used a really Jupiter 200 is large data

00:00:35,030 --> 00:00:41,170
in terms of good okay there are several

00:00:38,840 --> 00:00:46,930
tools for that and have you used any

00:00:41,170 --> 00:00:49,700
workflow systems max like make galaxy a

00:00:46,930 --> 00:00:52,100
few okay that's actually less than

00:00:49,700 --> 00:00:55,790
expected because I think the small

00:00:52,100 --> 00:00:58,730
classes are very useful so my answer to

00:00:55,790 --> 00:01:00,829
all those questions are yes because I

00:00:58,730 --> 00:01:03,200
came from MD Anderson Cancer Center

00:01:00,829 --> 00:01:05,210
which is worse

00:01:03,200 --> 00:01:09,350
well the largest Cancer Center in the

00:01:05,210 --> 00:01:11,719
world and is one of the best so because

00:01:09,350 --> 00:01:14,749
of the size of an MD Anderson we

00:01:11,719 --> 00:01:16,969
generate a huge amount of data and in

00:01:14,749 --> 00:01:19,249
turn we have one of the largest

00:01:16,969 --> 00:01:22,520
biometric Department in the States

00:01:19,249 --> 00:01:25,490
and we have 15 faculty members who has

00:01:22,520 --> 00:01:27,829
been working make major contributions to

00:01:25,490 --> 00:01:31,789
many national and international project

00:01:27,829 --> 00:01:36,709
working on very good tools and we also

00:01:31,789 --> 00:01:39,770
have a twenty thirty so analysts who had

00:01:36,709 --> 00:01:43,100
worked I think last year about 400

00:01:39,770 --> 00:01:45,350
projects for more than 100 pies in our

00:01:43,100 --> 00:01:49,159
institution so basically we are dealing

00:01:45,350 --> 00:01:51,590
a lot of data here and the data usually

00:01:49,159 --> 00:01:54,409
if the data count if is from generator

00:01:51,590 --> 00:01:57,679
from you within the hospital they

00:01:54,409 --> 00:02:00,529
usually come from the labs right and the

00:01:57,679 --> 00:02:05,209
samples and the blood would go to you

00:02:00,529 --> 00:02:07,939
our sequencing core that we extract DNA

00:02:05,209 --> 00:02:10,070
and RNA s and then the data will go to

00:02:07,939 --> 00:02:11,840
our clusters we have like five classes

00:02:10,070 --> 00:02:14,670
over there and that's what we have the

00:02:11,840 --> 00:02:18,420
good large amount of storage over there

00:02:14,670 --> 00:02:21,450
and then we jump in and try to analyze

00:02:18,420 --> 00:02:24,599
the data because we are bad magicians we

00:02:21,450 --> 00:02:27,330
use many many different tools and many

00:02:24,599 --> 00:02:30,239
different platforms so that's why we

00:02:27,330 --> 00:02:32,130
usually need to move our data around say

00:02:30,239 --> 00:02:34,560
from the cluster to the recommender

00:02:32,130 --> 00:02:37,770
servers to the individual stations and

00:02:34,560 --> 00:02:41,790
sometimes to laptops and desktops and we

00:02:37,770 --> 00:02:44,700
write a lot of scripts different places

00:02:41,790 --> 00:02:47,430
in different languages because we did

00:02:44,700 --> 00:02:49,890
you for example write best groups for

00:02:47,430 --> 00:02:52,560
cluster and some other SAS we before a

00:02:49,890 --> 00:02:56,160
workstation that's just we just used

00:02:52,560 --> 00:02:59,160
deal with different scripts and that has

00:02:56,160 --> 00:03:02,130
caused many problems in terms that say

00:02:59,160 --> 00:03:05,100
it's challenging to write and manage

00:03:02,130 --> 00:03:07,830
many scripts reading different languages

00:03:05,100 --> 00:03:09,810
and for different environments there's a

00:03:07,830 --> 00:03:12,870
problem with a version control project

00:03:09,810 --> 00:03:17,700
management and the documentation and is

00:03:12,870 --> 00:03:19,440
sharing right and also after a few

00:03:17,700 --> 00:03:23,400
months when you come back you look at

00:03:19,440 --> 00:03:27,840
your projects that can be consists of

00:03:23,400 --> 00:03:29,640
several scripts and it also it can be a

00:03:27,840 --> 00:03:31,530
black box to you it's really difficult

00:03:29,640 --> 00:03:34,760
to understand what people have done in

00:03:31,530 --> 00:03:39,150
the past also we also have problems in

00:03:34,760 --> 00:03:41,310
managing data and workflows in different

00:03:39,150 --> 00:03:44,459
environments because say I develop some

00:03:41,310 --> 00:03:46,470
scripts on my laptop and there if I want

00:03:44,459 --> 00:03:48,299
to run the same script on different

00:03:46,470 --> 00:03:50,519
servers and if you do different things

00:03:48,299 --> 00:03:53,459
at least four different clusters you

00:03:50,519 --> 00:03:54,660
have different representations and

00:03:53,459 --> 00:03:56,850
things like that that's time consuming

00:03:54,660 --> 00:03:59,609
and sometimes challenging and I hope

00:03:56,850 --> 00:04:03,299
wrong so because of all those problems

00:03:59,609 --> 00:04:06,359
we have considered some options and

00:04:03,299 --> 00:04:09,180
Jupiter was really promising q2 what do

00:04:06,359 --> 00:04:11,940
we do so we are here at a Jupiter con so

00:04:09,180 --> 00:04:14,370
I don't think I did you read all the

00:04:11,940 --> 00:04:17,729
great things that Jupiter can be right

00:04:14,370 --> 00:04:18,989
but if we really want to use Jupiter for

00:04:17,729 --> 00:04:22,350
our own work

00:04:18,989 --> 00:04:24,450
there's something still missing the

00:04:22,350 --> 00:04:27,599
first thing I would say is for

00:04:24,450 --> 00:04:27,930
interactive data analysis because when

00:04:27,599 --> 00:04:30,660
you

00:04:27,930 --> 00:04:32,280
compared Jupiter I would say classical

00:04:30,660 --> 00:04:35,070
jupiter ability with the lab is doing

00:04:32,280 --> 00:04:38,910
many great things and to you for example

00:04:35,070 --> 00:04:40,770
a studio you can't you cannot round that

00:04:38,910 --> 00:04:43,320
your script are nine by nine and the

00:04:40,770 --> 00:04:46,889
inspector your variables you cannot

00:04:43,320 --> 00:04:49,050
generate a figure that shows outside a

00:04:46,889 --> 00:04:51,750
lot of books so that you see if it's the

00:04:49,050 --> 00:04:53,520
correct one like that if there's

00:04:51,750 --> 00:04:56,850
something missing about the interactive

00:04:53,520 --> 00:04:59,039
data analysis for Jupiter also Jupiter

00:04:56,850 --> 00:05:02,520
only support one kernel for one notebook

00:04:59,039 --> 00:05:04,500
that means when I have my parametric

00:05:02,520 --> 00:05:06,870
project if I need to use multiple

00:05:04,500 --> 00:05:11,780
languages and what Oh kernels I would

00:05:06,870 --> 00:05:14,610
end up with multiple notebooks that is

00:05:11,780 --> 00:05:17,370
just troublesome should at least to me

00:05:14,610 --> 00:05:19,440
so I would rather prefer having one

00:05:17,370 --> 00:05:23,449
notable call with all my analysis a unit

00:05:19,440 --> 00:05:26,400
right and the last one is I don't know

00:05:23,449 --> 00:05:28,410
should I say that because we really

00:05:26,400 --> 00:05:30,930
really want a integrate you know

00:05:28,410 --> 00:05:33,389
workflow system for Jupiter but that's

00:05:30,930 --> 00:05:36,030
unfair because Jupiter is really really

00:05:33,389 --> 00:05:39,570
good at what is designed for and asking

00:05:36,030 --> 00:05:42,900
Jupiter to do batch processing workflows

00:05:39,570 --> 00:05:47,099
it's like asking you simple to compete

00:05:42,900 --> 00:05:50,340
with microwaves in swimming but if we if

00:05:47,099 --> 00:05:52,530
we really want to use there are actually

00:05:50,340 --> 00:05:55,500
many many workflow tools I just gives

00:05:52,530 --> 00:05:58,560
those several popular ones if we really

00:05:55,500 --> 00:06:01,560
want to use them with Jupiter what that

00:05:58,560 --> 00:06:04,380
means if you think about that is that we

00:06:01,560 --> 00:06:06,990
have our scripts over here then we need

00:06:04,380 --> 00:06:10,199
to copy/paste our script to Las tools

00:06:06,990 --> 00:06:13,440
right and then those tools generally

00:06:10,199 --> 00:06:16,409
have very different syntax so we need to

00:06:13,440 --> 00:06:18,240
modify our scripts a lot and then around

00:06:16,409 --> 00:06:20,909
that and then here we change that I

00:06:18,240 --> 00:06:23,880
would need to do that again so if we do

00:06:20,909 --> 00:06:26,909
that for our daily data analysis it's

00:06:23,880 --> 00:06:29,729
very counterproductive so so that in our

00:06:26,909 --> 00:06:32,159
department Odawa actually use a workflow

00:06:29,729 --> 00:06:33,780
system for the Apache data processing

00:06:32,159 --> 00:06:38,430
that's that's a problem

00:06:33,780 --> 00:06:40,960
so that's why we divide with a sore ass

00:06:38,430 --> 00:06:45,190
and SOS has two parts for

00:06:40,960 --> 00:06:48,610
heart is called SOS notebook and usually

00:06:45,190 --> 00:06:50,770
when you have Jupiter and you say if you

00:06:48,610 --> 00:06:55,090
want to use Julia right yes you start a

00:06:50,770 --> 00:06:57,069
server you create a lot book and if you

00:06:55,090 --> 00:07:00,069
want here we work with Python you start

00:06:57,069 --> 00:07:02,440
a nano server if we want you with your

00:07:00,069 --> 00:07:06,690
quasar then you create a time a seven

00:07:02,440 --> 00:07:10,930
and an adult book what SOS does is that

00:07:06,690 --> 00:07:14,349
it's a super colonel that talk to you

00:07:10,930 --> 00:07:17,979
all those kernels so that you only need

00:07:14,349 --> 00:07:20,169
to have one notebook a server and you

00:07:17,979 --> 00:07:23,250
only have one notebook and that loadable

00:07:20,169 --> 00:07:29,050
can talk with talk to you many different

00:07:23,250 --> 00:07:31,419
kernels and we also have a as well as a

00:07:29,050 --> 00:07:35,259
workflow system the workflow system

00:07:31,419 --> 00:07:38,349
handles the past that talk to you the

00:07:35,259 --> 00:07:40,979
clusters talk to brokers and handle huge

00:07:38,349 --> 00:07:44,500
amount of data and complex workflows and

00:07:40,979 --> 00:07:48,340
with this and especially with the tight

00:07:44,500 --> 00:07:51,280
integration between the kernel and the

00:07:48,340 --> 00:07:53,470
workflow system you can do everything

00:07:51,280 --> 00:07:54,909
inside the Lord we interface so

00:07:53,470 --> 00:07:57,370
basically in that lore book and you can

00:07:54,909 --> 00:07:59,680
control your job that submit your

00:07:57,370 --> 00:08:03,550
cluster I will talk about them in

00:07:59,680 --> 00:08:10,509
details so that's gonna study the front

00:08:03,550 --> 00:08:12,580
motor book side so as I said the S word

00:08:10,509 --> 00:08:14,770
Connell is a super cannot you all

00:08:12,580 --> 00:08:17,349
Jupiter's Kano's basically it's very

00:08:14,770 --> 00:08:19,840
simple conceptually it starts and

00:08:17,349 --> 00:08:24,250
Sheridan other kernels and I call them

00:08:19,840 --> 00:08:26,380
sub channels and then when user enters

00:08:24,250 --> 00:08:29,080
some command from the lore book and it

00:08:26,380 --> 00:08:34,380
just sent the command to the zoo kernels

00:08:29,080 --> 00:08:37,120
and when the colonel finished evaluation

00:08:34,380 --> 00:08:38,589
returned the results they Azeroth come

00:08:37,120 --> 00:08:41,200
out just send the result back to the

00:08:38,589 --> 00:08:44,229
front end and during this process as

00:08:41,200 --> 00:08:46,480
well as can do something to expend the

00:08:44,229 --> 00:08:49,980
input and captured output I will show

00:08:46,480 --> 00:08:53,230
you what I mean by that say there is a

00:08:49,980 --> 00:08:54,370
complete a lot of over here is I saw a

00:08:53,230 --> 00:08:57,970
slot book

00:08:54,370 --> 00:08:59,980
and you can see that this is a lot of

00:08:57,970 --> 00:09:02,020
book that you can see the difference

00:08:59,980 --> 00:09:04,660
right away right for every quarter sale

00:09:02,020 --> 00:09:07,000
there's a drop-down box that lists all

00:09:04,660 --> 00:09:11,860
your kernels that are read about here on

00:09:07,000 --> 00:09:14,920
your server and then for if you'd snack

00:09:11,860 --> 00:09:17,170
that kernel then the nephron aside where

00:09:14,920 --> 00:09:19,570
marks will be color coded so that you

00:09:17,170 --> 00:09:23,410
know that we sell you switch kernels so

00:09:19,570 --> 00:09:29,800
that's a visual indication and the first

00:09:23,410 --> 00:09:32,380
cell is SOS so attitude tell you right

00:09:29,800 --> 00:09:35,830
now as well as is based on Python so you

00:09:32,380 --> 00:09:37,660
had input whatever python code into a

00:09:35,830 --> 00:09:39,040
source cell so that's a reassuring

00:09:37,660 --> 00:09:41,620
because that's not something alien to

00:09:39,040 --> 00:09:45,190
you and for the second a cell is a batch

00:09:41,620 --> 00:09:46,960
cell and it's just execute a command to

00:09:45,190 --> 00:09:50,680
count the number of nines from from your

00:09:46,960 --> 00:09:54,310
local file and then for the third course

00:09:50,680 --> 00:09:56,620
L is there's a it's been magic so that

00:09:54,310 --> 00:09:59,710
what our telemetry is does is that if

00:09:56,620 --> 00:10:02,530
you have that magic it treats the

00:09:59,710 --> 00:10:04,750
content of that cell as a Python a

00:10:02,530 --> 00:10:07,660
string so you know format screen write

00:10:04,750 --> 00:10:09,880
Python three point six former screen so

00:10:07,660 --> 00:10:12,130
basically if you have a variable and

00:10:09,880 --> 00:10:17,200
then you know as well as kernel you can

00:10:12,130 --> 00:10:19,750
expand that a variable in that content

00:10:17,200 --> 00:10:22,750
before it's sent sent to the under nine

00:10:19,750 --> 00:10:24,670
kernel so this is very helpful say if

00:10:22,750 --> 00:10:26,260
you have a sample name and then you have

00:10:24,670 --> 00:10:29,680
multiple kernels working on the same

00:10:26,260 --> 00:10:32,140
sample then you don't have to use that

00:10:29,680 --> 00:10:35,730
name again again you just pass a

00:10:32,140 --> 00:10:38,680
variable in all the kernels right so

00:10:35,730 --> 00:10:41,470
that's the input aside for the output

00:10:38,680 --> 00:10:43,300
you have big example over there if you

00:10:41,470 --> 00:10:45,370
run something and then you think the

00:10:43,300 --> 00:10:48,580
output is useful for a napkin or you can

00:10:45,370 --> 00:10:50,950
use the capture a magic to capture that

00:10:48,580 --> 00:10:53,260
and this example is particularly

00:10:50,950 --> 00:10:55,960
interesting because the sparker kernel

00:10:53,260 --> 00:10:59,440
is something that I I don't know what's

00:10:55,960 --> 00:11:01,960
going on it's a rdf curia but it just

00:10:59,440 --> 00:11:04,150
gave me a bunch of links and I won't

00:11:01,960 --> 00:11:05,950
even back a use of them so what I would

00:11:04,150 --> 00:11:08,300
do is just use a capture

00:11:05,950 --> 00:11:10,100
magic I will capture the result

00:11:08,300 --> 00:11:13,430
from the cat from the sub channel and

00:11:10,100 --> 00:11:16,310
then I would just use my beloved a

00:11:13,430 --> 00:11:18,950
beautiful soap module to analyze the

00:11:16,310 --> 00:11:21,890
output and then at the end I get these

00:11:18,950 --> 00:11:24,500
the URLs and then I can continue to

00:11:21,890 --> 00:11:29,420
analyze them right so that's the way you

00:11:24,500 --> 00:11:31,730
change all the kernels basically this is

00:11:29,420 --> 00:11:34,580
the standard way if we just try to work

00:11:31,730 --> 00:11:37,460
with all jupiter kernels but for the

00:11:34,580 --> 00:11:40,730
kernels that SOS understands there is a

00:11:37,460 --> 00:11:44,210
much easier way to exchange information

00:11:40,730 --> 00:11:48,350
between kernels so here actually I

00:11:44,210 --> 00:11:51,140
showed you three methods there's three

00:11:48,350 --> 00:11:53,720
magics cat and port and with and they're

00:11:51,140 --> 00:11:56,900
actually message to exchange data

00:11:53,720 --> 00:12:01,550
without magics but everything boils down

00:11:56,900 --> 00:12:03,230
to a magic called GATT so what this does

00:12:01,550 --> 00:12:05,840
is that say for example if you have a

00:12:03,230 --> 00:12:08,540
very end in SOS and then you know our

00:12:05,840 --> 00:12:11,470
kernel you say I get the variable price

00:12:08,540 --> 00:12:15,920
OS and then you do some calculation and

00:12:11,470 --> 00:12:19,850
you can pack in SOS you get the results

00:12:15,920 --> 00:12:22,010
from our this is useful in the way that

00:12:19,850 --> 00:12:24,740
I know there are certain things that can

00:12:22,010 --> 00:12:26,930
best be done in Python something best

00:12:24,740 --> 00:12:29,840
can be done you are so I don't have to

00:12:26,930 --> 00:12:31,370
choose right so we're not doing

00:12:29,840 --> 00:12:33,440
something I want to generate some random

00:12:31,370 --> 00:12:35,180
numbers I just use R to do to do the

00:12:33,440 --> 00:12:40,610
thing I don't have to think about how to

00:12:35,180 --> 00:12:43,160
do that in Python and how does how this

00:12:40,610 --> 00:12:46,490
magic words I mean like magical right so

00:12:43,160 --> 00:12:49,490
suppose you have a as well as kernel and

00:12:46,490 --> 00:12:55,310
you have our kernel suppose we have a

00:12:49,490 --> 00:12:58,280
array one two three in the passenger in

00:12:55,310 --> 00:13:01,910
the SOS kernel and then if we want to

00:12:58,280 --> 00:13:05,480
put the array into our what SOS does in

00:13:01,910 --> 00:13:08,360
this case is just it is cute some

00:13:05,480 --> 00:13:13,820
statements in our so that you have a

00:13:08,360 --> 00:13:17,420
radar and then similarly if you have a

00:13:13,820 --> 00:13:20,540
data frame in R and you want to pour

00:13:17,420 --> 00:13:22,040
that into Python what I saw us would do

00:13:20,540 --> 00:13:25,160
you because that form can be

00:13:22,040 --> 00:13:28,100
right is first it saves the data frame

00:13:25,160 --> 00:13:33,530
to a file to a temporary file and then

00:13:28,100 --> 00:13:35,810
it would in Python in SOS use another

00:13:33,530 --> 00:13:37,160
function to read a different front at

00:13:35,810 --> 00:13:43,040
the from the disk of file and then you

00:13:37,160 --> 00:13:46,000
have a data frame me SOS so what I want

00:13:43,040 --> 00:13:48,470
to say here is that we are not

00:13:46,000 --> 00:13:50,870
transferring variable in any way from

00:13:48,470 --> 00:13:53,240
one corner to the other know that that's

00:13:50,870 --> 00:13:56,870
not a case what we are actually doing is

00:13:53,240 --> 00:13:58,550
we are creating an independent variable

00:13:56,870 --> 00:14:03,770
you know non-eternal but with the same

00:13:58,550 --> 00:14:05,870
name okay and when we are trans

00:14:03,770 --> 00:14:09,080
transferring data from one color to

00:14:05,870 --> 00:14:11,870
another and you can either be done

00:14:09,080 --> 00:14:14,150
directly between sub kernels what by way

00:14:11,870 --> 00:14:18,860
of SOS depend on how the dense changes

00:14:14,150 --> 00:14:21,830
is implemented and also as i tries to

00:14:18,860 --> 00:14:24,680
you create a variable of similar types

00:14:21,830 --> 00:14:26,510
because all languages are different

00:14:24,680 --> 00:14:28,700
right you can't find a one-to-one

00:14:26,510 --> 00:14:30,440
correspondence between data types

00:14:28,700 --> 00:14:33,260
there's no way to do that

00:14:30,440 --> 00:14:37,250
so what SOS does is that for example if

00:14:33,260 --> 00:14:38,120
we want to transfer a are a and B in

00:14:37,250 --> 00:14:41,630
cube

00:14:38,120 --> 00:14:44,180
you know SOS and if you know are good

00:14:41,630 --> 00:14:47,600
enough you know that a and B I should

00:14:44,180 --> 00:14:49,880
have same type a is a ray of size 1

00:14:47,600 --> 00:14:51,920
they're the same type but when they are

00:14:49,880 --> 00:14:53,870
transferred to price out there appears

00:14:51,920 --> 00:14:55,940
different types why is the integer one

00:14:53,870 --> 00:14:59,780
the other one is at least and the

00:14:55,940 --> 00:15:02,000
similarly if you have a julia in julia

00:14:59,780 --> 00:15:04,940
if you have a character one single

00:15:02,000 --> 00:15:06,910
character and if you have a hello that's

00:15:04,940 --> 00:15:10,460
a string there are two different types

00:15:06,910 --> 00:15:12,920
when they are transferred to two SOS

00:15:10,460 --> 00:15:14,960
they appear as one single type of string

00:15:12,920 --> 00:15:18,470
because Python doesn't differentiate

00:15:14,960 --> 00:15:20,720
between one character and one stream so

00:15:18,470 --> 00:15:23,990
what have been here is that as so it

00:15:20,720 --> 00:15:27,590
tries best to do the transfer for you

00:15:23,990 --> 00:15:29,470
but it doesn't try to get a really

00:15:27,590 --> 00:15:31,610
strict one-to-one correspondence

00:15:29,470 --> 00:15:33,470
whatsoever just tried getting

00:15:31,610 --> 00:15:35,840
information over okay

00:15:33,470 --> 00:15:39,200
and right now

00:15:35,840 --> 00:15:41,360
as our supports 11 languages and we are

00:15:39,200 --> 00:15:43,610
adding support for more as that that

00:15:41,360 --> 00:15:49,130
that is the one that we supported this

00:15:43,610 --> 00:15:52,670
kind of they don't change okay and

00:15:49,130 --> 00:15:59,690
question okay then if there's no

00:15:52,670 --> 00:16:03,410
question I would just say so those are

00:15:59,690 --> 00:16:05,630
about the internal about the SOS kernel

00:16:03,410 --> 00:16:08,330
but we also have some extensions from

00:16:05,630 --> 00:16:11,900
the front end on the front an aside here

00:16:08,330 --> 00:16:12,980
I'm showing you a short card control

00:16:11,900 --> 00:16:16,550
shift enter

00:16:12,980 --> 00:16:20,240
that's a 9x9 skew ssin and what it does

00:16:16,550 --> 00:16:23,240
is that it runs the current line in a

00:16:20,240 --> 00:16:26,150
side panel so for example if I run the

00:16:23,240 --> 00:16:28,970
data equals to you the second die over

00:16:26,150 --> 00:16:31,280
there it will automatically preview the

00:16:28,970 --> 00:16:33,590
result in the side panel which is

00:16:31,280 --> 00:16:36,140
immensely useful at least to me because

00:16:33,590 --> 00:16:38,600
when I do these things right I run one

00:16:36,140 --> 00:16:41,900
night I want to know if that man has

00:16:38,600 --> 00:16:43,910
been doing what I want to do if the

00:16:41,900 --> 00:16:46,280
result is correct so in this way I have

00:16:43,910 --> 00:16:50,470
the instant feedback of the results and

00:16:46,280 --> 00:16:53,300
for and the disregard I can also run

00:16:50,470 --> 00:16:54,200
selective tags and also it works for

00:16:53,300 --> 00:16:57,310
sub-channels

00:16:54,200 --> 00:17:01,760
so basically this shortcut provides a

00:16:57,310 --> 00:17:05,750
way for you to debug your your your code

00:17:01,760 --> 00:17:08,060
your script in this in a Cell and this

00:17:05,750 --> 00:17:10,160
function has been ported to YouTube with

00:17:08,060 --> 00:17:15,470
a lab so if you would use in Jupiter lab

00:17:10,160 --> 00:17:17,780
you can assign a shortcut to a command

00:17:15,470 --> 00:17:23,209
called drawing console so that you can

00:17:17,780 --> 00:17:26,660
do you said but and so on the best slide

00:17:23,209 --> 00:17:29,810
I showed you how to use a a how the

00:17:26,660 --> 00:17:34,670
preview magic was trigger automatically

00:17:29,810 --> 00:17:37,970
by Jose Baez SOS but you can also do

00:17:34,670 --> 00:17:41,540
that explicitly for example in this one

00:17:37,970 --> 00:17:44,750
we get empty cars for our and then we

00:17:41,540 --> 00:17:47,480
preview that variable in the side panel

00:17:44,750 --> 00:17:48,950
in the setup panel you can actually sort

00:17:47,480 --> 00:17:51,350
your data frame and

00:17:48,950 --> 00:17:53,600
search your data friend so that you can

00:17:51,350 --> 00:17:57,410
play with your data before you enter

00:17:53,600 --> 00:18:00,590
your last stage of analysis and in the

00:17:57,410 --> 00:18:03,170
next example the cells are cell generate

00:18:00,590 --> 00:18:05,780
a file and the magical will just show

00:18:03,170 --> 00:18:10,700
you the file and what would it look like

00:18:05,780 --> 00:18:13,190
so the the importance of showing you the

00:18:10,700 --> 00:18:15,830
temporary temporary informations during

00:18:13,190 --> 00:18:19,480
your integrity data and analysis I think

00:18:15,830 --> 00:18:22,340
it's very important so I proposed a a

00:18:19,480 --> 00:18:24,710
poor request to dupe the lab and it's

00:18:22,340 --> 00:18:26,390
still pending so if you like this

00:18:24,710 --> 00:18:33,440
feature you can go to to the lab and I

00:18:26,390 --> 00:18:35,750
say hey I want this ok so I wouldn't go

00:18:33,440 --> 00:18:37,460
to into much details of all the magics

00:18:35,750 --> 00:18:39,500
because as well as it provides and like

00:18:37,460 --> 00:18:41,690
30 magics but there are some magic

00:18:39,500 --> 00:18:45,170
that's particularly useful I think I can

00:18:41,690 --> 00:18:47,420
show you some of them here so there is a

00:18:45,170 --> 00:18:50,270
magic code as well as save which

00:18:47,420 --> 00:18:53,570
basically convert us less notebook to

00:18:50,270 --> 00:18:56,270
HTML using some templates that we

00:18:53,570 --> 00:18:59,090
provide in this particular case the

00:18:56,270 --> 00:18:59,480
template generate a type of content for

00:18:59,090 --> 00:19:01,310
you

00:18:59,480 --> 00:19:04,520
if the Terrapin is long temper cannon is

00:19:01,310 --> 00:19:07,550
very useful and it also has a magical

00:19:04,520 --> 00:19:11,480
traditions so the revisions basically

00:19:07,550 --> 00:19:13,610
nice it'll runs the kid log command and

00:19:11,480 --> 00:19:15,740
shows other revisions of this notebook

00:19:13,610 --> 00:19:18,100
so that if you click you can go back to

00:19:15,740 --> 00:19:23,660
your previous version of notebook and

00:19:18,100 --> 00:19:26,780
also the head also has a session info

00:19:23,660 --> 00:19:28,400
magic that in that it can show you the

00:19:26,780 --> 00:19:30,230
session info for all the kernels that

00:19:28,400 --> 00:19:32,390
you start here you have used to analyze

00:19:30,230 --> 00:19:37,840
your data so that's a one single magic

00:19:32,390 --> 00:19:37,840
for all the session information ok

00:19:41,930 --> 00:19:49,740
okay I assume that the SS a load book is

00:19:45,090 --> 00:19:52,830
well received okay then that's going to

00:19:49,740 --> 00:19:55,320
the workflow part so when you think of

00:19:52,830 --> 00:19:57,180
workflow I think that it's my first

00:19:55,320 --> 00:19:59,070
impression was for flows are really

00:19:57,180 --> 00:20:02,220
wonderful things but they're hard to use

00:19:59,070 --> 00:20:05,220
there are very rigid syntax sometimes

00:20:02,220 --> 00:20:07,350
strange and sometimes a GUI and I need

00:20:05,220 --> 00:20:09,180
to there's a very steep learning curve

00:20:07,350 --> 00:20:12,320
so that's something that I try to

00:20:09,180 --> 00:20:15,450
reiterate a hard to avoid in your SLS so

00:20:12,320 --> 00:20:17,910
I'm just giving you a one slide summary

00:20:15,450 --> 00:20:20,130
of ss syntax and that's just all you

00:20:17,910 --> 00:20:22,080
that's all you did you know to you

00:20:20,130 --> 00:20:26,310
understand the SOS workflow so basically

00:20:22,080 --> 00:20:27,690
first SOS is based on Python so that's

00:20:26,310 --> 00:20:30,600
familiar with most of you

00:20:27,690 --> 00:20:32,460
I guess all for you and then as I

00:20:30,600 --> 00:20:35,040
introduce something called a script

00:20:32,460 --> 00:20:37,560
format of function calls so basically

00:20:35,040 --> 00:20:40,380
the helps you to include a large chunk

00:20:37,560 --> 00:20:42,900
of code into a Python function for

00:20:40,380 --> 00:20:46,410
example if you have our function which

00:20:42,900 --> 00:20:50,070
is divided by a so as to execute a piece

00:20:46,410 --> 00:20:53,580
of script that's the regular function

00:20:50,070 --> 00:20:56,070
formatting in Python you can write that

00:20:53,580 --> 00:20:58,230
piece of function in this format they

00:20:56,070 --> 00:21:00,510
are expanding early to and working

00:20:58,230 --> 00:21:02,430
directory and this is the code if you

00:21:00,510 --> 00:21:04,980
have expanded it you have to chew this

00:21:02,430 --> 00:21:08,130
piece will be handled as a person f3

00:21:04,980 --> 00:21:10,950
if you do not have this parameter this

00:21:08,130 --> 00:21:13,770
piece will be included as it is there's

00:21:10,950 --> 00:21:17,190
no expansion where no magic if your

00:21:13,770 --> 00:21:19,920
script has a bunch of braces there you

00:21:17,190 --> 00:21:22,440
can say it's been equal to you you can

00:21:19,920 --> 00:21:26,730
use another delimiters so that you don't

00:21:22,440 --> 00:21:30,060
have to double brace your code to to to

00:21:26,730 --> 00:21:33,300
cue you say AB string if you know what I

00:21:30,060 --> 00:21:36,060
mean so this is a convenience of

00:21:33,300 --> 00:21:40,290
formatting to include scripts in the

00:21:36,060 --> 00:21:43,140
workflow and this I'm showing you a step

00:21:40,290 --> 00:21:45,570
a workflow step and it looks like a long

00:21:43,140 --> 00:21:48,570
but that's actually everything you need

00:21:45,570 --> 00:21:51,030
to know about a source workflow so

00:21:48,570 --> 00:21:54,000
basically if you look at the print

00:21:51,030 --> 00:21:56,010
that's the mast negative 4/9

00:21:54,000 --> 00:21:58,230
the print and the massachu a nice there

00:21:56,010 --> 00:22:01,860
are the regular Python statements right

00:21:58,230 --> 00:22:05,490
the print and Ronnie a shell function

00:22:01,860 --> 00:22:07,350
all others are workflow directives say

00:22:05,490 --> 00:22:10,020
you have a header that means this is a

00:22:07,350 --> 00:22:12,180
step of workflow you have parameter

00:22:10,020 --> 00:22:14,490
means you can accept the value from

00:22:12,180 --> 00:22:18,750
command line you have an input output

00:22:14,490 --> 00:22:21,150
and depends that specifies the input and

00:22:18,750 --> 00:22:23,190
output of this tab and you can have a

00:22:21,150 --> 00:22:26,400
task which I always been later

00:22:23,190 --> 00:22:29,390
so basically as far as workflow is a

00:22:26,400 --> 00:22:34,230
mixture of Python statements and

00:22:29,390 --> 00:22:40,500
workflow directives ok so now suppose

00:22:34,230 --> 00:22:42,120
you have a load book with some inherit

00:22:40,500 --> 00:22:45,110
of data analysis in this particular

00:22:42,120 --> 00:22:49,770
example it's just like you have a file

00:22:45,110 --> 00:22:52,800
in Excel format you want to plot it in R

00:22:49,770 --> 00:22:55,260
but the problem is it's kind of

00:22:52,800 --> 00:22:58,020
difficult to read excel file from our so

00:22:55,260 --> 00:23:02,250
what I did was I use a command in bash

00:22:58,020 --> 00:23:03,930
to convert that excel file to CSV so

00:23:02,250 --> 00:23:07,860
there are currently the CSV file and

00:23:03,930 --> 00:23:12,210
plot it so this is a very basic analysis

00:23:07,860 --> 00:23:17,880
and bang in sweet kernels as well as

00:23:12,210 --> 00:23:21,570
bash and are right so if you want to

00:23:17,880 --> 00:23:23,550
convert that into a so as oh you did you

00:23:21,570 --> 00:23:25,740
do if you just compare the left hand

00:23:23,550 --> 00:23:29,850
side and right hand side all you need to

00:23:25,740 --> 00:23:33,780
do would be change the continent from R

00:23:29,850 --> 00:23:37,080
to s OS and add a name of the kernel

00:23:33,780 --> 00:23:41,700
that's our to the top so what you end up

00:23:37,080 --> 00:23:44,460
with is next days you have the three SS

00:23:41,700 --> 00:23:46,740
cells and the second Y is actually a

00:23:44,460 --> 00:23:48,420
regular Python function that's a SH

00:23:46,740 --> 00:23:50,220
function calling that script and the

00:23:48,420 --> 00:23:51,510
third one is a regular are from machine

00:23:50,220 --> 00:23:55,170
calling that swimmed with some

00:23:51,510 --> 00:23:57,750
parameters so so that you can just run

00:23:55,170 --> 00:24:00,690
your script in SOS just like that would

00:23:57,750 --> 00:24:03,270
run suppose I run functions that's also

00:24:00,690 --> 00:24:07,200
interpreted there are analysis and then

00:24:03,270 --> 00:24:11,000
the magic happens if you

00:24:07,200 --> 00:24:15,000
convert your scripts into a workflow or

00:24:11,000 --> 00:24:17,640
unity deal is adding section headers so

00:24:15,000 --> 00:24:21,000
if you have add section headers close

00:24:17,640 --> 00:24:24,600
cells and say the first one is it's a

00:24:21,000 --> 00:24:25,230
global and definition for every step do

00:24:24,600 --> 00:24:27,570
you understand

00:24:25,230 --> 00:24:30,090
and then the second step and sir that

00:24:27,570 --> 00:24:35,730
would be a port plot workflow step one

00:24:30,090 --> 00:24:40,380
two after that you can run the workflow

00:24:35,730 --> 00:24:42,780
we say SOS around magic so basically

00:24:40,380 --> 00:24:45,300
this provides you a way to run multiple

00:24:42,780 --> 00:24:47,600
cells of a lot of alright if you have a

00:24:45,300 --> 00:24:51,450
long notebook with too many things

00:24:47,600 --> 00:24:54,630
instead of drawing all from Jupiter you

00:24:51,450 --> 00:24:58,320
can say as I strong this workflow and

00:24:54,630 --> 00:25:01,470
the beauty of this is actually you can

00:24:58,320 --> 00:25:04,050
at this stage also round work flock from

00:25:01,470 --> 00:25:06,270
command nine because we also have a

00:25:04,050 --> 00:25:09,060
command-line interface so in this case

00:25:06,270 --> 00:25:11,820
you can say SOS wrong that know the book

00:25:09,060 --> 00:25:13,530
and what the name of the workflow over

00:25:11,820 --> 00:25:15,480
there and then the wolf load can be

00:25:13,530 --> 00:25:17,040
executed from the command line so

00:25:15,480 --> 00:25:25,130
basically you have changed your load

00:25:17,040 --> 00:25:28,260
book into a into your command right so

00:25:25,130 --> 00:25:30,720
there are more benefits of converting

00:25:28,260 --> 00:25:33,690
your script into a workflow and I'm

00:25:30,720 --> 00:25:37,440
showing you one let's say you can define

00:25:33,690 --> 00:25:40,470
parameters so you have your scripts

00:25:37,440 --> 00:25:43,980
written in North Pole in Jupiter that's

00:25:40,470 --> 00:25:47,220
dealing with one input right and now you

00:25:43,980 --> 00:25:49,730
can just say okay I self well I wanted

00:25:47,220 --> 00:25:53,100
to be a parameter and it's a required

00:25:49,730 --> 00:25:56,760
passing say as well as type say you need

00:25:53,100 --> 00:25:58,260
a path and then the other parameter has

00:25:56,760 --> 00:26:00,600
a devote default value

00:25:58,260 --> 00:26:02,670
and then you can just run the same

00:26:00,600 --> 00:26:06,150
workflow these are different from them

00:26:02,670 --> 00:26:12,950
so that you can apply your workflow to

00:26:06,150 --> 00:26:16,410
another in profile and then if you ever

00:26:12,950 --> 00:26:20,550
run that command again in the notebook

00:26:16,410 --> 00:26:23,220
you will see something like this

00:26:20,550 --> 00:26:26,010
plot one is Eagle Lord due to you a

00:26:23,220 --> 00:26:28,470
stable signature so that's another thing

00:26:26,010 --> 00:26:30,780
about the benefit of workflows because

00:26:28,470 --> 00:26:33,060
as far as saves the stick nature of

00:26:30,780 --> 00:26:35,130
every step basically that consists of

00:26:33,060 --> 00:26:37,740
input and output statements and some

00:26:35,130 --> 00:26:40,380
global variables so that when the step

00:26:37,740 --> 00:26:42,930
is executed again it will just be Lord

00:26:40,380 --> 00:26:45,630
that's important to our work because

00:26:42,930 --> 00:26:47,430
panchromatic data analysis can take very

00:26:45,630 --> 00:26:49,290
long time I mean if we will run a

00:26:47,430 --> 00:26:52,410
command it takes several hours even days

00:26:49,290 --> 00:26:54,180
to complete and if not AB structured

00:26:52,410 --> 00:26:56,310
lastly you don't want to do it again

00:26:54,180 --> 00:27:04,830
right for the flow further for the same

00:26:56,310 --> 00:27:07,710
files so right now I have been talking

00:27:04,830 --> 00:27:10,800
about workflows in a sense that we have

00:27:07,710 --> 00:27:14,490
a workflow that's called plot plot one

00:27:10,800 --> 00:27:17,760
and you that's that's so-called a

00:27:14,490 --> 00:27:20,940
process warrantied workflow that did you

00:27:17,760 --> 00:27:23,550
say you you define several steps that

00:27:20,940 --> 00:27:25,560
work on some input of files and then the

00:27:23,550 --> 00:27:29,150
process will be wrong not just speaking

00:27:25,560 --> 00:27:32,460
one by one to analyze your data but in

00:27:29,150 --> 00:27:34,050
many people's mind workflow is actually

00:27:32,460 --> 00:27:39,120
something else if you're familiar with

00:27:34,050 --> 00:27:41,670
make file like make and some other make

00:27:39,120 --> 00:27:43,830
style workflow systems they work in a

00:27:41,670 --> 00:27:46,500
kind of completely different ways so

00:27:43,830 --> 00:27:49,110
basically the the workflow would just

00:27:46,500 --> 00:27:51,750
specify each single step how do you go

00:27:49,110 --> 00:27:55,670
from one one target one file to another

00:27:51,750 --> 00:28:00,120
and then just specify the result and

00:27:55,670 --> 00:28:02,820
then the workflow system will just run

00:28:00,120 --> 00:28:06,090
the last three stairs to get your result

00:28:02,820 --> 00:28:10,560
you know that concept right actually

00:28:06,090 --> 00:28:12,330
SOS also supports that so we can if you

00:28:10,560 --> 00:28:15,240
compare the left-hand side and the

00:28:12,330 --> 00:28:16,950
right-hand side let's say the driver

00:28:15,240 --> 00:28:18,750
side is so-called process only the

00:28:16,950 --> 00:28:20,610
workflow the reference side is so

00:28:18,750 --> 00:28:23,160
so-called outcome warranted workflow and

00:28:20,610 --> 00:28:26,460
the major difference is here the

00:28:23,160 --> 00:28:30,210
difference that that converts tab is

00:28:26,460 --> 00:28:34,140
changing to a provide and with a pattern

00:28:30,210 --> 00:28:38,160
so basically that style says I

00:28:34,140 --> 00:28:40,710
provide a csv file from excel file

00:28:38,160 --> 00:28:43,520
import and i would run a command and

00:28:40,710 --> 00:28:47,460
then workflow is triggered by the target

00:28:43,520 --> 00:28:50,670
the - t over there a target

00:28:47,460 --> 00:28:52,770
so with this specification what happens

00:28:50,670 --> 00:28:55,200
is that as were the first try to see

00:28:52,770 --> 00:28:57,720
okay i want to generate that file so i

00:28:55,200 --> 00:29:00,780
need to run the plot step and I believe

00:28:57,720 --> 00:29:03,450
that our CSV file and if that CSV file

00:29:00,780 --> 00:29:05,190
exists then it's ok I would you run that

00:29:03,450 --> 00:29:07,799
step if that is a data file doesn't

00:29:05,190 --> 00:29:09,630
exist then you will look through all the

00:29:07,799 --> 00:29:13,380
other steps and see which step will

00:29:09,630 --> 00:29:15,600
generate a CSV file for me so in this

00:29:13,380 --> 00:29:17,850
way if I run the workflow attack of this

00:29:15,600 --> 00:29:19,500
I have the same things basically the

00:29:17,850 --> 00:29:21,750
converse that would be wrong and this

00:29:19,500 --> 00:29:25,169
Plus that would be wrong to generate the

00:29:21,750 --> 00:29:29,130
PDF file so actually a source allows

00:29:25,169 --> 00:29:32,130
very complex workflows and yeah so this

00:29:29,130 --> 00:29:38,730
just give you an example of a mega file

00:29:32,130 --> 00:29:46,770
style workflow okay I assume this is not

00:29:38,730 --> 00:29:50,400
too difficult okay anyway and in terms

00:29:46,770 --> 00:29:54,440
of handling large amount of data say for

00:29:50,400 --> 00:29:59,309
example if you have a step that's a

00:29:54,440 --> 00:30:02,429
handling a large amount of inflow file

00:29:59,309 --> 00:30:05,100
and then in this particular example I

00:30:02,429 --> 00:30:07,530
have a bunch of fat crew files I groove

00:30:05,100 --> 00:30:09,870
it by one so that the files will be

00:30:07,530 --> 00:30:12,390
processed one by one and with a

00:30:09,870 --> 00:30:15,290
parameter called concurrent as well as

00:30:12,390 --> 00:30:18,030
we're trying to run those commands

00:30:15,290 --> 00:30:20,280
concurrently running studies several

00:30:18,030 --> 00:30:22,590
processes and and handling your input

00:30:20,280 --> 00:30:25,440
all together that's another benefit

00:30:22,590 --> 00:30:29,820
compared to the general Jupiter load

00:30:25,440 --> 00:30:31,140
book platform but you may also say if I

00:30:29,820 --> 00:30:33,660
really have a large amount of data

00:30:31,140 --> 00:30:36,030
that's not enough because my workstation

00:30:33,660 --> 00:30:37,830
is not powerful enough if you give me

00:30:36,030 --> 00:30:40,169
three hundred files I did like three

00:30:37,830 --> 00:30:44,580
hundred days to process it I need to run

00:30:40,169 --> 00:30:47,260
that on a cluster so that is why we

00:30:44,580 --> 00:30:49,240
provide a mechanism called task

00:30:47,260 --> 00:30:53,169
tasks is defined here in the second

00:30:49,240 --> 00:30:55,870
example what a task task is that that

00:30:53,169 --> 00:30:59,850
basically gives assess the rest of the

00:30:55,870 --> 00:31:04,690
step is it's a it's a independent

00:30:59,850 --> 00:31:09,610
execution unit and then winter runs like

00:31:04,690 --> 00:31:13,029
this example it generates two tasks with

00:31:09,610 --> 00:31:15,250
hash tag over there and when you connect

00:31:13,029 --> 00:31:18,639
the task IDs

00:31:15,250 --> 00:31:23,110
it will show you different informations

00:31:18,639 --> 00:31:25,240
and I can the that are just shows that's

00:31:23,110 --> 00:31:27,340
cute Danka host and and stuff like that

00:31:25,240 --> 00:31:30,639
that's all the information about that

00:31:27,340 --> 00:31:33,250
particular task and if the tassel run

00:31:30,639 --> 00:31:36,010
long enough it actually will also tell

00:31:33,250 --> 00:31:42,190
you the CPU and the RAM used about that

00:31:36,010 --> 00:31:44,049
a task okay and you might say this is

00:31:42,190 --> 00:31:48,090
not useful because this is the old local

00:31:44,049 --> 00:31:50,019
host right if you have I have many

00:31:48,090 --> 00:31:51,639
individual tasks where they're still

00:31:50,019 --> 00:31:54,460
local on my workstation

00:31:51,639 --> 00:31:57,850
but the beauty of this task mechanism is

00:31:54,460 --> 00:32:00,909
that you can actually say Q I want to

00:31:57,850 --> 00:32:03,700
run the task another cluster I'm a

00:32:00,909 --> 00:32:06,730
cluster when this when you specify this

00:32:03,700 --> 00:32:09,940
parameter as far as we're first go to

00:32:06,730 --> 00:32:14,200
your configuration file and look for the

00:32:09,940 --> 00:32:16,779
definition for that cluster and then it

00:32:14,200 --> 00:32:21,789
will generate a task file that's a task

00:32:16,779 --> 00:32:25,570
and it will copy the impro file to your

00:32:21,789 --> 00:32:28,179
cluster and something magical happen

00:32:25,570 --> 00:32:32,200
here it will also translate you a task

00:32:28,179 --> 00:32:34,870
by translation I mean you see that the

00:32:32,200 --> 00:32:37,779
in profile wars on a Windows system with

00:32:34,870 --> 00:32:39,760
the past Lexy backslash and the cluster

00:32:37,779 --> 00:32:41,919
is underneath the system and with the

00:32:39,760 --> 00:32:44,710
help of their host definition file as

00:32:41,919 --> 00:32:48,429
well as knows how to translate you at my

00:32:44,710 --> 00:32:50,139
pass from one format to another and then

00:32:48,429 --> 00:32:53,970
that has will be accurate either on a

00:32:50,139 --> 00:32:57,390
cluster it will go to Islam war

00:32:53,970 --> 00:32:58,950
PBS system right and you get your result

00:32:57,390 --> 00:33:00,420
and the result will be automatically

00:32:58,950 --> 00:33:04,080
send it back to your dog hole

00:33:00,420 --> 00:33:06,690
workstation so what's happening here is

00:33:04,080 --> 00:33:11,040
that if you have this mechanism and

00:33:06,690 --> 00:33:14,580
actually we have definitions for tens of

00:33:11,040 --> 00:33:16,110
servers that host file if I want to run

00:33:14,580 --> 00:33:16,500
this particular task on different

00:33:16,110 --> 00:33:19,350
servers

00:33:16,500 --> 00:33:21,630
oh and if you do would be change the

00:33:19,350 --> 00:33:23,430
name of the host and then it has to will

00:33:21,630 --> 00:33:25,110
be going all the way even if they share

00:33:23,430 --> 00:33:29,280
they don't share the same file system

00:33:25,110 --> 00:33:38,310
and that's the way we ran around our

00:33:29,280 --> 00:33:41,250
external cats and the clusters okay but

00:33:38,310 --> 00:33:43,980
you might still say it's not that simple

00:33:41,250 --> 00:33:46,860
if you want to run certain things on one

00:33:43,980 --> 00:33:48,990
class or on the other one you need to

00:33:46,860 --> 00:33:51,300
have the commands over there rather say

00:33:48,990 --> 00:33:54,060
I want to run faster QC but if that

00:33:51,300 --> 00:33:55,110
class doesn't have the command you what

00:33:54,060 --> 00:33:58,230
has to fail

00:33:55,110 --> 00:34:02,760
that's you so the solution would be

00:33:58,230 --> 00:34:06,060
everyone knows use container and here

00:34:02,760 --> 00:34:08,550
basically you can say I want you to run

00:34:06,060 --> 00:34:10,710
their scripts you know container you

00:34:08,550 --> 00:34:13,650
specify the name of the container over

00:34:10,710 --> 00:34:17,340
there and then what SOS does would be

00:34:13,650 --> 00:34:20,490
first it will pull the container front

00:34:17,340 --> 00:34:25,620
of the hub and then it would run the

00:34:20,490 --> 00:34:28,260
script inside that container okay from

00:34:25,620 --> 00:34:30,900
the other pool you can see that and I

00:34:28,260 --> 00:34:32,430
can imagine that if you have a large

00:34:30,900 --> 00:34:34,770
amount of jobs and then if we want to

00:34:32,430 --> 00:34:41,150
submit it to a cluster then you can do

00:34:34,770 --> 00:34:45,510
the same thing nobody object that idea

00:34:41,150 --> 00:34:47,700
my ad Amin said no because they say the

00:34:45,510 --> 00:34:50,130
talker is not a safe one cluster so you

00:34:47,700 --> 00:34:51,840
can do that so that's what that's why

00:34:50,130 --> 00:34:54,000
we're working on singularity is the pole

00:34:51,840 --> 00:34:57,450
so that we can run the containers our

00:34:54,000 --> 00:34:59,190
cluster if that is done then the cluster

00:34:57,450 --> 00:35:01,530
will be something that only provides the

00:34:59,190 --> 00:35:02,910
CPU and the realm for me and I don't

00:35:01,530 --> 00:35:07,800
have the in store anything on the

00:35:02,910 --> 00:35:11,430
cluster okay so I just want to end

00:35:07,800 --> 00:35:14,280
introduction we say just a simple fake

00:35:11,430 --> 00:35:17,820
example of workflows a little complex

00:35:14,280 --> 00:35:21,240
but it executed with option D which

00:35:17,820 --> 00:35:23,820
means generate a directed acyclic graph

00:35:21,240 --> 00:35:26,760
to show me how the steps are connected

00:35:23,820 --> 00:35:30,360
and the efficient P means generate a

00:35:26,760 --> 00:35:33,840
report for for the workflow and with

00:35:30,360 --> 00:35:36,840
those parameters what we get is like

00:35:33,840 --> 00:35:39,030
this say we have several steps and one

00:35:36,840 --> 00:35:41,820
step after each other and that's that's

00:35:39,030 --> 00:35:44,760
a da G and we also generate a report

00:35:41,820 --> 00:35:47,130
showing you the command showing you how

00:35:44,760 --> 00:35:49,470
long each step take and and things like

00:35:47,130 --> 00:35:54,630
that it's a nice summary of the work of

00:35:49,470 --> 00:35:57,060
the thing that you have just done okay

00:35:54,630 --> 00:36:01,560
I think this would conclude my second

00:35:57,060 --> 00:36:05,120
part about a workflow and this actually

00:36:01,560 --> 00:36:08,550
changed the way we walk ok so basically

00:36:05,120 --> 00:36:10,590
previously we had the working

00:36:08,550 --> 00:36:12,300
environment like this we have we have to

00:36:10,590 --> 00:36:14,490
log on through many different clusters

00:36:12,300 --> 00:36:17,070
we have to write scripts that's working

00:36:14,490 --> 00:36:20,570
for each of them but right now what we

00:36:17,070 --> 00:36:23,370
did was to you have a Jupiter observer

00:36:20,570 --> 00:36:27,360
with the Jupiter observer and with the

00:36:23,370 --> 00:36:29,790
SOS Colonel over there and all we need

00:36:27,360 --> 00:36:33,540
to do would be to communicate with you

00:36:29,790 --> 00:36:36,570
would have a server and the SOS workflow

00:36:33,540 --> 00:36:41,400
engine over there would dispatch all our

00:36:36,570 --> 00:36:44,460
tasks to different clusters servers and

00:36:41,400 --> 00:36:48,110
workstations and the end of the day we

00:36:44,460 --> 00:36:51,950
have a bunch of as well as notebooks and

00:36:48,110 --> 00:36:54,810
one notebook would contain everything

00:36:51,950 --> 00:36:57,330
input/output your script and even if

00:36:54,810 --> 00:36:58,680
some swivel would be wrong cluster some

00:36:57,330 --> 00:37:01,110
of some of the scribbler would be wrong

00:36:58,680 --> 00:37:04,880
different kernels but that's everything

00:37:01,110 --> 00:37:07,830
for my data analysis that's that's

00:37:04,880 --> 00:37:10,170
something that that's a way better than

00:37:07,830 --> 00:37:17,150
having a bunch of scripts nying all over

00:37:10,170 --> 00:37:21,260
the place right I I bet you agree so I

00:37:17,150 --> 00:37:23,690
want to say in union summary we have a

00:37:21,260 --> 00:37:26,330
hoody collage notebook that allows you

00:37:23,690 --> 00:37:29,090
to use multiple kernels in one notebook

00:37:26,330 --> 00:37:31,880
and we state exchange between kernels

00:37:29,090 --> 00:37:35,750
that's also very helpful and then we

00:37:31,880 --> 00:37:37,880
have a workflow system that that can be

00:37:35,750 --> 00:37:41,120
very complex and the powerful and the

00:37:37,880 --> 00:37:44,630
combined those two together and we have

00:37:41,120 --> 00:37:47,390
a lot book that that that can be used

00:37:44,630 --> 00:37:49,760
for both inherited data analysis and

00:37:47,390 --> 00:37:52,190
patch data processing and it's

00:37:49,760 --> 00:37:54,020
reproducible because it contains

00:37:52,190 --> 00:37:57,500
everything that I have done for my

00:37:54,020 --> 00:37:59,720
project and also I can run many of the

00:37:57,500 --> 00:38:02,090
steps in containers so they're the

00:37:59,720 --> 00:38:04,910
notebook can be readily reproduced by

00:38:02,090 --> 00:38:08,750
others they don't have to rely on my

00:38:04,910 --> 00:38:11,810
working environment so with that I would

00:38:08,750 --> 00:38:14,300
like to say I saw as is licensed under a

00:38:11,810 --> 00:38:17,930
BSD license and it's being released

00:38:14,300 --> 00:38:20,900
under PAP IP it has a Jupiter lab

00:38:17,930 --> 00:38:23,390
intention you know Jupiter lab is the

00:38:20,900 --> 00:38:26,930
Abeyta kind of so we are evolving with

00:38:23,390 --> 00:38:29,630
Jupiter lab it would take hopefully it

00:38:26,930 --> 00:38:32,410
will be stabilized soon and then right

00:38:29,630 --> 00:38:36,440
now it supports 11 languages it supports

00:38:32,410 --> 00:38:39,410
three major browsers but not ads we

00:38:36,440 --> 00:38:41,060
tried didn't work and with the four

00:38:39,410 --> 00:38:44,060
major operating system we support the

00:38:41,060 --> 00:38:46,760
Jupiter lab Jupiter hub and the Jupiter

00:38:44,060 --> 00:38:49,250
and we support several tasks use

00:38:46,760 --> 00:38:52,370
including raddest q that's a simple

00:38:49,250 --> 00:38:54,380
raddest based recurring system and we

00:38:52,370 --> 00:38:58,460
support talker and we are working on

00:38:54,380 --> 00:39:00,320
singularity as of now and if won't you

00:38:58,460 --> 00:39:03,680
can tell me you can email me what you

00:39:00,320 --> 00:39:09,530
theater and I would like to thank our

00:39:03,680 --> 00:39:11,770
core developers cow has been helping me

00:39:09,530 --> 00:39:16,400
a lot on the design of the ball systems

00:39:11,770 --> 00:39:17,510
and testing and Jamar helped me a lot on

00:39:16,400 --> 00:39:20,510
the front end

00:39:17,510 --> 00:39:22,730
Henry is student for rice and he hung me

00:39:20,510 --> 00:39:26,300
on the language modules for junior and

00:39:22,730 --> 00:39:29,030
math lab and Chris is our need for the

00:39:26,300 --> 00:39:31,490
programming team and he have me D for

00:39:29,030 --> 00:39:33,770
the Jupiter hub deport deployment and

00:39:31,490 --> 00:39:35,069
there are some other people who

00:39:33,770 --> 00:39:37,289
supported our country

00:39:35,069 --> 00:39:39,920
reporter in different ways and this

00:39:37,289 --> 00:39:47,190
project is supported by multiple grants

00:39:39,920 --> 00:39:49,529
so I would say we have a knife server I

00:39:47,190 --> 00:39:52,079
would really appreciate it if you can go

00:39:49,529 --> 00:39:53,489
to our server and test all this I have

00:39:52,079 --> 00:39:55,739
all the examples over there

00:39:53,489 --> 00:39:58,349
and just send me the feedback if you

00:39:55,739 --> 00:40:00,630
like it or you or you hated I mean SOS

00:39:58,349 --> 00:40:02,400
has really changed the way we walk with

00:40:00,630 --> 00:40:04,890
clusters with the paramedic data

00:40:02,400 --> 00:40:05,969
analysis I think if you are in similar

00:40:04,890 --> 00:40:08,099
situations

00:40:05,969 --> 00:40:42,630
I think it'll also do the same to you

00:40:08,099 --> 00:40:44,249
thank you yes yes you know we'll be the

00:40:42,630 --> 00:40:47,699
negative company at the same time

00:40:44,249 --> 00:40:51,019
because in this particular example yes

00:40:47,699 --> 00:40:51,019
yes the remoter show

00:41:03,230 --> 00:41:16,470
yes that that's a really good question

00:41:12,630 --> 00:41:18,990
so though the way that type of season is

00:41:16,470 --> 00:41:21,840
the input in right now is it's actually

00:41:18,990 --> 00:41:25,440
a modernized system that's one by one to

00:41:21,840 --> 00:41:28,500
one in the in the sense that I know that

00:41:25,440 --> 00:41:31,200
how to transfer one particular type in

00:41:28,500 --> 00:41:35,040
what way to another type being a nun an

00:41:31,200 --> 00:41:36,990
anguish and say if I want to add a

00:41:35,040 --> 00:41:39,660
support for another one you can just add

00:41:36,990 --> 00:41:43,830
that it won't affect the existing

00:41:39,660 --> 00:41:45,180
systems and there's a extension system

00:41:43,830 --> 00:41:47,760
that you had you can write your own

00:41:45,180 --> 00:42:17,660
extension for SOS that add your

00:41:47,760 --> 00:42:21,870
conversion system to SOS yes because

00:42:17,660 --> 00:42:23,550
that's actually a yes/no okay so when

00:42:21,870 --> 00:42:26,880
you have the SOS a lot of over you have

00:42:23,550 --> 00:42:31,020
multiple live kernels so if you have

00:42:26,880 --> 00:42:34,050
only one as only one Python session and

00:42:31,020 --> 00:42:36,690
then if we read that data in and then

00:42:34,050 --> 00:42:38,790
all the cells belong to data session can

00:42:36,690 --> 00:42:40,800
access the data no problem you can and

00:42:38,790 --> 00:42:43,950
that is just like a regular Python

00:42:40,800 --> 00:42:45,650
notebook but SOS also allows you to

00:42:43,950 --> 00:42:49,320
create multiple

00:42:45,650 --> 00:42:52,110
taesan sessions say you can say use

00:42:49,320 --> 00:42:53,490
Python given RMSA Python wanna pass on

00:42:52,110 --> 00:42:54,840
to you and then you can transfer to

00:42:53,490 --> 00:42:57,590
price on one but a pass onto wound

00:42:54,840 --> 00:42:57,590
access their data

00:43:16,320 --> 00:43:28,990
arrow arrow right yeah yeah yes so and

00:43:26,920 --> 00:43:32,140
Elise feather is actually based on arrow

00:43:28,990 --> 00:43:34,900
so when we transfer large data like data

00:43:32,140 --> 00:43:37,180
from a given matrix we use arrow in the

00:43:34,900 --> 00:43:39,970
back end so the do the translation but

00:43:37,180 --> 00:43:42,730
in many other types that arrow doesn't

00:43:39,970 --> 00:44:00,520
support we just use our own ways to get

00:43:42,730 --> 00:44:03,010
a job done yeah that depends on type so

00:44:00,520 --> 00:44:04,390
for example for the feather for data

00:44:03,010 --> 00:44:07,000
frame which that depend on what whatever

00:44:04,390 --> 00:44:11,320
feather would do to the mission data but

00:44:07,000 --> 00:44:16,180
if it's for a regular are variable and

00:44:11,320 --> 00:44:20,080
we we transfer the our na to the Python

00:44:16,180 --> 00:44:23,400
down so do those kind of a conversion

00:44:20,080 --> 00:44:23,400
that makes most a sense

00:44:26,550 --> 00:44:32,560
so I mean sometimes we can get all the

00:44:31,090 --> 00:44:35,230
data over there because for example

00:44:32,560 --> 00:44:37,450
julia has also supported for data frame

00:44:35,230 --> 00:44:40,660
but it doesn't have the concept of low

00:44:37,450 --> 00:44:42,820
index so if we have our data frame that

00:44:40,660 --> 00:44:45,460
transfer the to julia then the row index

00:44:42,820 --> 00:44:47,710
would get lost but the bottom is the

00:44:45,460 --> 00:44:49,840
majority of the data would be already

00:44:47,710 --> 00:44:51,790
there and you can analyze and if you

00:44:49,840 --> 00:44:54,040
really want to go index you can transfer

00:44:51,790 --> 00:44:58,390
the index in another format and then you

00:44:54,040 --> 00:45:02,370
can continue your work so we just want

00:44:58,390 --> 00:45:02,370
to be practical not perfect

00:45:11,820 --> 00:45:27,070
yes and I know that part yeah that's one

00:45:24,430 --> 00:45:29,170
of the reasons we divide SOS because the

00:45:27,070 --> 00:45:31,480
multi-language support from a studio or

00:45:29,170 --> 00:45:33,700
a studio load book is quite a weak in

00:45:31,480 --> 00:45:37,360
terms of multi-language support and the

00:45:33,700 --> 00:45:39,970
bigger eggs is really good but it's more

00:45:37,360 --> 00:45:43,390
or less on the Jupiter no on the Java

00:45:39,970 --> 00:45:46,030
family of languages it doesn't support a

00:45:43,390 --> 00:45:48,160
stars and the math lab those tools that

00:45:46,030 --> 00:45:55,660
we use every day for biometric data

00:45:48,160 --> 00:45:57,460
analysis okay if there's no further

00:45:55,660 --> 00:46:00,160
questions thank you very much again for

00:45:57,460 --> 00:46:01,570
coming to my session and the please go

00:46:00,160 --> 00:46:03,070
home and we'll try and give me feedback

00:46:01,570 --> 00:46:08,320
thank you

00:46:03,070 --> 00:46:08,320

YouTube URL: https://www.youtube.com/watch?v=U75eKosFbp8


