Title: Making beautiful objects with Jupyter- M Pacer (Netflix)
Publication date: 2018-09-20
Playlist: JupyterCon in New York 2018
Description: 
	Jupyter displays a rich array of media types out of the box. M Pacer explains how to use these capabilities to their full potential, covering how to add rich displays to existing and new Python classes and how to customize the way notebooks are converted to other formats. You’ll learn what MIME types are and how to use them, explore Jupyter’s display mechanisms and protocol, and dive into nbconvert. These skills will enable you to make beautiful objects with Jupyter.

Topics include:

How to enhance the display objects and classes in the notebook
By adding metadata to any output via IPython.display
By adding custom repr methods
By using updatable displays
Libraries that enable new kinds of displays, including:
vdom: A Python library for React-like declarative layouts
display_xml: A Python library for displaying highlighted, indented XML
How to convert notebooks into custom objects using nbconvert, which allows:
Hiding prompts and code cells to show only the output figures
HTML where you can toggle whether individual code cells are visible
PDFs with support for non-Latin alphabets

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:01,949 --> 00:00:06,420
all right well thank you so as I said if

00:00:05,069 --> 00:00:08,730
you would like to have access to the

00:00:06,420 --> 00:00:09,839
slides I just made them public and they

00:00:08,730 --> 00:00:12,000
should be available with that link

00:00:09,839 --> 00:00:14,280
someone shout if you try to go to that

00:00:12,000 --> 00:00:15,780
link and it doesn't work but yeah so

00:00:14,280 --> 00:00:18,510
that'll let you follow along and later

00:00:15,780 --> 00:00:21,109
I'll later today I'll I'm going to be

00:00:18,510 --> 00:00:23,820
putting up all the content that I show

00:00:21,109 --> 00:00:26,580
so what we're going to be talking about

00:00:23,820 --> 00:00:29,460
is as in the title making beautiful

00:00:26,580 --> 00:00:32,579
objects with Jupiter so I see this as

00:00:29,460 --> 00:00:34,260
there being two fundamentally like the

00:00:32,579 --> 00:00:36,600
two fundamental kinds of beauty that

00:00:34,260 --> 00:00:38,280
Jupiter can really lend itself to that

00:00:36,600 --> 00:00:40,679
is functional beauty and aesthetic

00:00:38,280 --> 00:00:43,319
beauty these are oh I guess I don't have

00:00:40,679 --> 00:00:50,760
my speaker notes well we're doing it

00:00:43,319 --> 00:00:52,559
live so I see these as two aspects of

00:00:50,760 --> 00:00:55,379
the same sort of coin though like

00:00:52,559 --> 00:00:58,019
fundamentally if you are going to be

00:00:55,379 --> 00:01:00,089
creating good interactive computing

00:00:58,019 --> 00:01:02,609
environments if you're going to be

00:01:00,089 --> 00:01:05,729
creating good things for people to be

00:01:02,609 --> 00:01:08,490
able to enjoy in the world you're going

00:01:05,729 --> 00:01:10,590
to have to have access to both of these

00:01:08,490 --> 00:01:12,840
like functional beauty is necessary for

00:01:10,590 --> 00:01:14,640
it to work and as Carol pointed out or

00:01:12,840 --> 00:01:15,899
later today if you don't have aesthetic

00:01:14,640 --> 00:01:17,280
beauty you don't have the Wonder you

00:01:15,899 --> 00:01:19,649
don't have the things that are inspiring

00:01:17,280 --> 00:01:21,570
the dreams that move progress forward so

00:01:19,649 --> 00:01:26,219
one of the examples that I think

00:01:21,570 --> 00:01:29,700
embodies that idea most clearly is text

00:01:26,219 --> 00:01:33,119
so throughout the history of humanity

00:01:29,700 --> 00:01:35,429
text has been both super functional and

00:01:33,119 --> 00:01:39,570
super aesthetic and the challenges for

00:01:35,429 --> 00:01:42,240
both are it like in X trickable you have

00:01:39,570 --> 00:01:44,520
people you this is why we can talk or at

00:01:42,240 --> 00:01:48,689
least hear from people hundreds of years

00:01:44,520 --> 00:01:50,340
ago or at least read and this is why you

00:01:48,689 --> 00:01:52,770
still have people struggling to get

00:01:50,340 --> 00:01:55,409
fonts to work today like these are

00:01:52,770 --> 00:01:58,079
challenges and awesome opportunities so

00:01:55,409 --> 00:02:00,509
text is going to be sort of the like

00:01:58,079 --> 00:02:01,909
larger focus of everything that I'm

00:02:00,509 --> 00:02:04,139
doing here

00:02:01,909 --> 00:02:05,670
but there will be bits and pieces of

00:02:04,139 --> 00:02:08,880
other things thrown out thrown through

00:02:05,670 --> 00:02:10,349
it okay so the basic piece that we're

00:02:08,880 --> 00:02:12,629
going to start with is that we're

00:02:10,349 --> 00:02:14,879
representing objects in Python so um

00:02:12,629 --> 00:02:15,600
there's some background that I'm going

00:02:14,879 --> 00:02:17,310
to

00:02:15,600 --> 00:02:20,490
kind of assumed that you all have which

00:02:17,310 --> 00:02:22,560
is the idea that if you have a class in

00:02:20,490 --> 00:02:24,410
Python you can set what are called

00:02:22,560 --> 00:02:26,550
dunder methods for the double underscore

00:02:24,410 --> 00:02:29,640
dunder repper which gives you a way to

00:02:26,550 --> 00:02:31,410
represent the object and control that

00:02:29,640 --> 00:02:33,270
and under string which is when you

00:02:31,410 --> 00:02:34,230
transform that object to a string how

00:02:33,270 --> 00:02:35,580
does that happen

00:02:34,230 --> 00:02:38,640
these can be different from each other

00:02:35,580 --> 00:02:42,840
and really we've always had a little bit

00:02:38,640 --> 00:02:45,180
of style in there because they're ansi

00:02:42,840 --> 00:02:46,710
escape strings but we had no way to

00:02:45,180 --> 00:02:48,870
support richard types Nvidia and

00:02:46,710 --> 00:02:51,270
honestly that's why we're here

00:02:48,870 --> 00:02:52,740
is like you wouldn't be in this talk if

00:02:51,270 --> 00:02:55,740
you didn't care about more than ansi

00:02:52,740 --> 00:02:57,660
escape strings like we want richer

00:02:55,740 --> 00:02:59,850
things that's why we are in the jupiter

00:02:57,660 --> 00:03:02,460
ipython world and oh do we have those

00:02:59,850 --> 00:03:05,040
things so the way that we have those

00:03:02,460 --> 00:03:06,480
sort of baked in is through the idea of

00:03:05,040 --> 00:03:08,670
media types now you might have heard of

00:03:06,480 --> 00:03:11,160
mime types before that's the previous

00:03:08,670 --> 00:03:13,260
term um it comes from multi-purpose

00:03:11,160 --> 00:03:14,970
internet mail extensions and I don't

00:03:13,260 --> 00:03:17,070
know about you but I've not sent too

00:03:14,970 --> 00:03:20,160
many emails with attachments from

00:03:17,070 --> 00:03:21,780
Jupiter it's mostly been all of the

00:03:20,160 --> 00:03:23,610
other amazing things that Jupiter can do

00:03:21,780 --> 00:03:25,170
it makes much more sense to refer to

00:03:23,610 --> 00:03:26,760
them as media types I'm going to do my

00:03:25,170 --> 00:03:28,920
best to do that the api's haven't

00:03:26,760 --> 00:03:31,380
changed and so I still slip up very

00:03:28,920 --> 00:03:33,660
sorry about that but all these are our

00:03:31,380 --> 00:03:34,770
standard ways that we can refer to the

00:03:33,660 --> 00:03:36,450
different kinds of media that we're

00:03:34,770 --> 00:03:38,640
going to represent so they're usually

00:03:36,450 --> 00:03:40,830
structured like there is a base type so

00:03:38,640 --> 00:03:43,500
like text image and application and then

00:03:40,830 --> 00:03:45,150
subtypes um possibly with a complete

00:03:43,500 --> 00:03:46,470
tree and a suffix that gives you some

00:03:45,150 --> 00:03:49,650
more information about the structure of

00:03:46,470 --> 00:03:53,790
that subtype so like text plain is plain

00:03:49,650 --> 00:03:56,700
text an SVG plus XML image is SVG which

00:03:53,790 --> 00:04:00,300
is XML formatted V Dom v1 which is a

00:03:56,700 --> 00:04:02,790
mime which is a media type that we will

00:04:00,300 --> 00:04:05,970
be discussing plenty more of is a JSON

00:04:02,790 --> 00:04:09,210
object so we've got that how are we

00:04:05,970 --> 00:04:11,100
using them inside Jupiter so you all I'm

00:04:09,210 --> 00:04:13,680
going to assume know what cells are um

00:04:11,100 --> 00:04:15,900
so every cell you may or may not know

00:04:13,680 --> 00:04:18,180
that they can have multiple outputs and

00:04:15,900 --> 00:04:20,670
each one of those outputs can have

00:04:18,180 --> 00:04:24,450
multiple mime types and each media type

00:04:20,670 --> 00:04:25,169
a mime type it's it's going to be tricky

00:04:24,450 --> 00:04:28,260
I'm sorry

00:04:25,169 --> 00:04:29,280
each media type can itself have data and

00:04:28,260 --> 00:04:31,410
metadata attached to

00:04:29,280 --> 00:04:33,870
it but that metadata it's stored per

00:04:31,410 --> 00:04:37,440
output so you can only have like one

00:04:33,870 --> 00:04:40,860
instance of that media type per output

00:04:37,440 --> 00:04:42,750
so we're gonna have all these we're

00:04:40,860 --> 00:04:44,700
gonna have all these objects in our

00:04:42,750 --> 00:04:46,410
outputs and front-ends are going to

00:04:44,700 --> 00:04:48,090
choose amongst them which ones they're

00:04:46,410 --> 00:04:49,530
going to display the general rule is

00:04:48,090 --> 00:04:51,120
they're going to display the richest one

00:04:49,530 --> 00:04:54,720
they possibly can usually that means

00:04:51,120 --> 00:04:57,930
text HTML but sometimes you can get a

00:04:54,720 --> 00:05:00,360
bit more if you have extensions and

00:04:57,930 --> 00:05:02,370
whatnot but some front ends just won't

00:05:00,360 --> 00:05:03,840
support some media types for example the

00:05:02,370 --> 00:05:05,940
classic notebook doesn't support the be

00:05:03,840 --> 00:05:11,180
dumb media type that I had just

00:05:05,940 --> 00:05:15,750
mentioned so we this is my first

00:05:11,180 --> 00:05:17,880
diversion into a demo so we'll see how

00:05:15,750 --> 00:05:21,690
well this works cuz I didn't do this on

00:05:17,880 --> 00:05:26,100
a screen before great and I will clear

00:05:21,690 --> 00:05:28,050
the output so that it will oh and of

00:05:26,100 --> 00:05:29,760
course I have a curler that is

00:05:28,050 --> 00:05:32,690
definitely what I expected to happen

00:05:29,760 --> 00:05:32,690
right there um

00:05:32,900 --> 00:05:39,240
doo-doo-doo-doo now we're good come on

00:05:36,990 --> 00:05:43,560
come on come on come on okay

00:05:39,240 --> 00:05:45,710
yeah we're good yeah that happens to you

00:05:43,560 --> 00:05:50,330
enough and you know how to deal with it

00:05:45,710 --> 00:05:54,390
so but apparently we're not able to

00:05:50,330 --> 00:06:03,900
restart and clear output sorry all this

00:05:54,390 --> 00:06:07,729
is the problem of live demos so okay and

00:06:03,900 --> 00:06:10,050
I know that it's ipython media types so

00:06:07,729 --> 00:06:15,360
now we should have a regular old kernel

00:06:10,050 --> 00:06:16,650
and yes no outfits so the first thing

00:06:15,360 --> 00:06:18,300
that we're going to do when we're doing

00:06:16,650 --> 00:06:22,020
this and that's not gonna be legible as

00:06:18,300 --> 00:06:24,870
it is so time to do the zoom uh so we're

00:06:22,020 --> 00:06:26,760
gonna grab the ipython instance using

00:06:24,870 --> 00:06:27,780
the get ipython function and then inside

00:06:26,760 --> 00:06:29,310
that we're going to get a bunch of

00:06:27,780 --> 00:06:31,050
things called display formatters those

00:06:29,310 --> 00:06:35,250
are going to be and those are stored in

00:06:31,050 --> 00:06:37,229
a key a dictionary that's keyed by the

00:06:35,250 --> 00:06:40,289
different media types that we're going

00:06:37,229 --> 00:06:43,110
to be potentially using so these are

00:06:40,289 --> 00:06:46,890
things like text plain text HTML

00:06:43,110 --> 00:06:49,770
texe SVG XML etc and all of these are

00:06:46,890 --> 00:06:51,690
baked into ipython it expects and knows

00:06:49,770 --> 00:06:52,140
how to deal with these you can add more

00:06:51,690 --> 00:06:54,200
to it

00:06:52,140 --> 00:06:57,750
but that's all that's there by default

00:06:54,200 --> 00:07:00,300
and we're going to access those

00:06:57,750 --> 00:07:02,520
primarily through the use of reprimands

00:07:00,300 --> 00:07:04,440
so these are ways for our custom classes

00:07:02,520 --> 00:07:08,910
that we're going to be able to specify

00:07:04,440 --> 00:07:11,640
how we are creating the representations

00:07:08,910 --> 00:07:14,000
for our objects so in this case we have

00:07:11,640 --> 00:07:16,020
a our dunder repperton durst ring

00:07:14,000 --> 00:07:18,930
methods but then we also have a wrapper

00:07:16,020 --> 00:07:21,030
HTML a rep rep and g and a rep or jpg

00:07:18,930 --> 00:07:25,380
which in theory means we should have a

00:07:21,030 --> 00:07:29,490
plain text HTML a PNG and a jpg my media

00:07:25,380 --> 00:07:31,340
type when we upload this and they're all

00:07:29,490 --> 00:07:34,260
going to have slightly different content

00:07:31,340 --> 00:07:36,510
so then when we actually create this

00:07:34,260 --> 00:07:39,720
hello object oh and this is one of the

00:07:36,510 --> 00:07:41,640
things that is not gonna be available we

00:07:39,720 --> 00:07:44,130
have the ability over here to choose

00:07:41,640 --> 00:07:46,520
between these different mime types so

00:07:44,130 --> 00:07:49,530
thank Matias for having started this

00:07:46,520 --> 00:07:51,780
last year and I picked it up and so now

00:07:49,530 --> 00:07:53,010
we have the ability so by Auto we're

00:07:51,780 --> 00:07:55,290
getting whatever would be there by

00:07:53,010 --> 00:07:58,890
default so that's the richest one like I

00:07:55,290 --> 00:08:01,470
said hTML is usually the richest but if

00:07:58,890 --> 00:08:03,300
we have a PNG then it's going to display

00:08:01,470 --> 00:08:04,680
a PNG we're using that plot live under

00:08:03,300 --> 00:08:07,230
the hood to do that same thing with

00:08:04,680 --> 00:08:09,630
JPEGs so we're doing that right now by

00:08:07,230 --> 00:08:12,780
returning it but we could also display

00:08:09,630 --> 00:08:15,360
it so you may know about the display

00:08:12,780 --> 00:08:17,190
function it's built into ipython but

00:08:15,360 --> 00:08:19,950
note here that while we're displaying

00:08:17,190 --> 00:08:21,360
this thing there's no output because

00:08:19,950 --> 00:08:24,680
it's a side-effect it's not actually

00:08:21,360 --> 00:08:29,940
being returned so we have our text HTML

00:08:24,680 --> 00:08:31,830
PNG jpg just the same okay so what can

00:08:29,940 --> 00:08:34,050
you do with display well you can exclude

00:08:31,830 --> 00:08:36,510
certain or you can include particular

00:08:34,050 --> 00:08:39,540
kinds of media types so in this case

00:08:36,510 --> 00:08:42,270
we're only including the image PNG and

00:08:39,540 --> 00:08:44,400
in this case we're only exclude and

00:08:42,270 --> 00:08:47,790
we're going to be excluding everything

00:08:44,400 --> 00:08:50,070
but it's everything we're going to be

00:08:47,790 --> 00:08:54,330
keeping only the JPEG and plain because

00:08:50,070 --> 00:08:56,270
we're excluding everything else so in

00:08:54,330 --> 00:08:59,610
addition we can

00:08:56,270 --> 00:09:01,140
consider it like I do the include below

00:08:59,610 --> 00:09:03,360
because what were I'm going to show is a

00:09:01,140 --> 00:09:05,420
bit about the metadata setting so all of

00:09:03,360 --> 00:09:07,770
your like I mentioned all of your

00:09:05,420 --> 00:09:09,390
outputs can have metadata attached to

00:09:07,770 --> 00:09:11,340
them and this metadata can change how

00:09:09,390 --> 00:09:13,260
things are displayed so for example in

00:09:11,340 --> 00:09:16,290
this case we're setting the width to 200

00:09:13,260 --> 00:09:18,530
pixels on our two different are two

00:09:16,290 --> 00:09:22,500
different ways of representing an image

00:09:18,530 --> 00:09:24,180
and note that an image PNG and image

00:09:22,500 --> 00:09:27,300
JPEG they both produce the same

00:09:24,180 --> 00:09:30,150
approximate image but now what I'm doing

00:09:27,300 --> 00:09:35,420
here is I'm setting the image PNG as the

00:09:30,150 --> 00:09:38,930
key to setting the width on this on this

00:09:35,420 --> 00:09:43,080
output and so what will happen is that

00:09:38,930 --> 00:09:45,840
while we make the image PNG smaller we

00:09:43,080 --> 00:09:47,820
don't make the image JPEG smaller so if

00:09:45,840 --> 00:09:50,070
you ever need to apply metadata

00:09:47,820 --> 00:09:52,410
specifically to one media type that's

00:09:50,070 --> 00:09:55,230
how you're going to do it okay last bit

00:09:52,410 --> 00:09:57,450
here is the idea of the reprimand bundle

00:09:55,230 --> 00:09:58,920
so so far this is one of those api's

00:09:57,450 --> 00:10:02,790
whose name is going to be difficult to

00:09:58,920 --> 00:10:04,710
change so far we've been talking about a

00:10:02,790 --> 00:10:07,020
single function returning a single data

00:10:04,710 --> 00:10:08,850
type with some metadata now we're

00:10:07,020 --> 00:10:11,040
talking about one function returning the

00:10:08,850 --> 00:10:13,140
data for a bunch of mine a bunch of

00:10:11,040 --> 00:10:15,000
media types and the metadata for a bunch

00:10:13,140 --> 00:10:18,750
of media types so in this case we're

00:10:15,000 --> 00:10:20,940
going to be returning some application v

00:10:18,750 --> 00:10:22,830
dom as well as the images that we had

00:10:20,940 --> 00:10:25,200
before and we're going to win this one

00:10:22,830 --> 00:10:26,730
function be setting the width of the PNG

00:10:25,200 --> 00:10:29,580
and the jpg to be something different

00:10:26,730 --> 00:10:31,830
we're still setting the HTML and so that

00:10:29,580 --> 00:10:33,300
should be what displays by defaults and

00:10:31,830 --> 00:10:35,490
now when we look at our little Hello

00:10:33,300 --> 00:10:37,800
object we see the same thing we've been

00:10:35,490 --> 00:10:40,290
seeing but when we look at our jpg it's

00:10:37,800 --> 00:10:43,080
small with the PNG it's a little bit

00:10:40,290 --> 00:10:46,050
bigger but then when we go and try to

00:10:43,080 --> 00:10:49,080
look at application via Dom it doesn't

00:10:46,050 --> 00:10:53,340
work why is this well let's pop open

00:10:49,080 --> 00:10:54,900
interacts so like I mentioned V Dom is

00:10:53,340 --> 00:10:59,370
not supported in the classic notebook

00:10:54,900 --> 00:11:00,870
but it is supported inside the the

00:10:59,370 --> 00:11:05,630
interact interface as well as Jupiter

00:11:00,870 --> 00:11:08,430
lab and so this data is always in the

00:11:05,630 --> 00:11:09,690
it's always available to the front ends

00:11:08,430 --> 00:11:11,690
it's just a question of whether

00:11:09,690 --> 00:11:17,810
they can actually see it all right

00:11:11,690 --> 00:11:21,180
jumping back in to our presentation and

00:11:17,810 --> 00:11:24,150
so this is just a brief review of all

00:11:21,180 --> 00:11:25,440
the things I just talked about I'm not

00:11:24,150 --> 00:11:28,320
going to go into it in too much detail

00:11:25,440 --> 00:11:30,060
other than to say one piece about repre

00:11:28,320 --> 00:11:32,100
mind bundle is that it will take

00:11:30,060 --> 00:11:34,700
priority over any reprimanded that you

00:11:32,100 --> 00:11:34,700
set directly

00:11:35,210 --> 00:11:40,380
additionally the display stuff I covered

00:11:38,550 --> 00:11:42,270
all of that but the one piece that I'm

00:11:40,380 --> 00:11:44,070
mentioning here because I feel it would

00:11:42,270 --> 00:11:46,020
feel remiss if I didn't is there's also

00:11:44,070 --> 00:11:46,350
something very like repre mime bundle

00:11:46,020 --> 00:11:48,300
called

00:11:46,350 --> 00:11:51,090
ipython display that you can attach to

00:11:48,300 --> 00:11:53,660
your classes and that will create

00:11:51,090 --> 00:11:55,770
displays as side effects

00:11:53,660 --> 00:11:58,100
unfortunately this silence is all of the

00:11:55,770 --> 00:12:00,210
other wrapper methods and makes them on

00:11:58,100 --> 00:12:01,440
inaccessible and you can't really easily

00:12:00,210 --> 00:12:05,250
overwrite that without deleting the

00:12:01,440 --> 00:12:07,980
method so it's not generally an a best

00:12:05,250 --> 00:12:09,000
practice but there are certain cases for

00:12:07,980 --> 00:12:11,400
example when you need to make multiple

00:12:09,000 --> 00:12:15,390
display calls that you want to do that

00:12:11,400 --> 00:12:17,460
so we have in ipython a bunch of

00:12:15,390 --> 00:12:19,700
built-in display objects they're pretty

00:12:17,460 --> 00:12:21,930
cool I'm not going to talk about them

00:12:19,700 --> 00:12:24,690
because they take a while to go through

00:12:21,930 --> 00:12:28,410
but you can for most of them you can

00:12:24,690 --> 00:12:29,760
pass in data or a URL or a file and it's

00:12:28,410 --> 00:12:33,240
going to be able to figure out what it

00:12:29,760 --> 00:12:35,640
needs to do and display it in the

00:12:33,240 --> 00:12:37,260
appropriate form one really neat one is

00:12:35,640 --> 00:12:39,540
an iframe that allows you to embed an

00:12:37,260 --> 00:12:41,340
HTML page in an iframe in your notebook

00:12:39,540 --> 00:12:44,430
which is a really nice way to show off

00:12:41,340 --> 00:12:48,150
how generating HTML from notebooks would

00:12:44,430 --> 00:12:51,150
work but that'll be in the repo if you

00:12:48,150 --> 00:12:53,550
want to play with it okay so underlying

00:12:51,150 --> 00:12:55,500
all of this are some display messages

00:12:53,550 --> 00:12:58,080
that is how this is being communicated

00:12:55,500 --> 00:12:59,700
over the wire so there are two basic

00:12:58,080 --> 00:13:01,980
types that we've been looking at display

00:12:59,700 --> 00:13:03,210
data and execute result execute result

00:13:01,980 --> 00:13:04,470
is what's happening when we're returning

00:13:03,210 --> 00:13:06,450
something that's why we have that out

00:13:04,470 --> 00:13:07,980
there display data is occurring when we

00:13:06,450 --> 00:13:10,110
call display it's happening as a side

00:13:07,980 --> 00:13:12,089
effect there is a third type of display

00:13:10,110 --> 00:13:14,910
message show messages that are changing

00:13:12,089 --> 00:13:16,410
what we're displaying through this

00:13:14,910 --> 00:13:18,330
display mechanism that I've been talking

00:13:16,410 --> 00:13:20,120
about and that's the update display

00:13:18,330 --> 00:13:22,440
message and this happens because

00:13:20,120 --> 00:13:23,370
displays can be given a transient ID

00:13:22,440 --> 00:13:25,200
that is an ID

00:13:23,370 --> 00:13:28,050
that won't be stored to the actual

00:13:25,200 --> 00:13:31,320
notebook data structure on disk but it

00:13:28,050 --> 00:13:34,050
will be available in memory so you can

00:13:31,320 --> 00:13:36,270
keep track of that ID and then you have

00:13:34,050 --> 00:13:40,050
these messages that allow you to go back

00:13:36,270 --> 00:13:42,870
and change the content of that ID of the

00:13:40,050 --> 00:13:44,970
display associated with that ID so now

00:13:42,870 --> 00:13:46,830
jumping back out we're gonna try this

00:13:44,970 --> 00:13:49,529
we're not going to go to the previously

00:13:46,830 --> 00:13:54,450
opened one display updates is our next

00:13:49,529 --> 00:13:56,910
one so this is a fairly straightforward

00:13:54,450 --> 00:13:58,580
one there are a couple AP Ives that

00:13:56,910 --> 00:14:01,110
allow you to have access to display IDs

00:13:58,580 --> 00:14:10,370
and all of them already have their

00:14:01,110 --> 00:14:10,370
output really I am so sorry everyone

00:14:11,930 --> 00:14:20,870
well if this doesn't work again then

00:14:15,450 --> 00:14:20,870
such is life yeah we're just

00:14:28,269 --> 00:14:34,899
I should really figure out why that's

00:14:29,860 --> 00:14:37,269
happening so now we'll have a live one

00:14:34,899 --> 00:14:40,230
I'll just create a new server every time

00:14:37,269 --> 00:14:44,819
I need to do anything in the notebook oh

00:14:40,230 --> 00:14:47,709
ok or not you know I said the case maybe

00:14:44,819 --> 00:14:51,220
ok I'm quit I'm going to quit this

00:14:47,709 --> 00:14:55,600
Chrome window leave this is my best

00:14:51,220 --> 00:14:57,579
chance or I can just so I'm gonna go

00:14:55,600 --> 00:14:58,990
move on and hope that the next time I

00:14:57,579 --> 00:15:00,399
come up to this because this actually is

00:14:58,990 --> 00:15:03,819
something that I can describe decently

00:15:00,399 --> 00:15:05,999
well so there are three different API s

00:15:03,819 --> 00:15:09,610
for actually handling an update display

00:15:05,999 --> 00:15:12,490
you have a way of creating an ID on the

00:15:09,610 --> 00:15:14,559
fly by setting display ID equals true

00:15:12,490 --> 00:15:16,119
inside of a display call and then that's

00:15:14,559 --> 00:15:18,579
going to give back a display handle and

00:15:16,119 --> 00:15:21,309
then you can use that handle handle that

00:15:18,579 --> 00:15:24,819
update to apply to an object that will

00:15:21,309 --> 00:15:27,519
change the relevant that will change the

00:15:24,819 --> 00:15:29,259
relevant content we also have an update

00:15:27,519 --> 00:15:32,439
to the blaze function inside ipython

00:15:29,259 --> 00:15:35,499
display that is going to take in your

00:15:32,439 --> 00:15:37,720
object and the display ID and then

00:15:35,499 --> 00:15:39,670
finally you have the ability to use the

00:15:37,720 --> 00:15:42,699
standard display function to pass in an

00:15:39,670 --> 00:15:44,529
object along with your display ID and to

00:15:42,699 --> 00:15:45,970
tell it that update is true if you don't

00:15:44,529 --> 00:15:48,819
put a semicolon at the end of that it

00:15:45,970 --> 00:15:51,429
still returns a response so it'll be a

00:15:48,819 --> 00:15:56,319
little bit messy so that is the advised

00:15:51,429 --> 00:16:03,309
practice in those cases so diving back

00:15:56,319 --> 00:16:06,670
in so so I'm going to now hopefully be

00:16:03,309 --> 00:16:08,410
able to demonstrate the ability of V DOM

00:16:06,670 --> 00:16:09,670
and what you can do with it that you

00:16:08,410 --> 00:16:12,699
wouldn't be able to do in the classic

00:16:09,670 --> 00:16:16,389
notebook that you can do in interact and

00:16:12,699 --> 00:16:18,129
Jupiter lab so the key idea to V Dom is

00:16:16,389 --> 00:16:20,199
that it's giving you a declarative

00:16:18,129 --> 00:16:22,329
layout in Python so you might have heard

00:16:20,199 --> 00:16:23,949
of react so it makes this distinction

00:16:22,329 --> 00:16:27,100
between an imperative and declarative

00:16:23,949 --> 00:16:28,749
layout in pair like an imperative idea

00:16:27,100 --> 00:16:30,600
is I'm gonna go and I'm going to drive

00:16:28,749 --> 00:16:33,129
my car to get to the airport

00:16:30,600 --> 00:16:34,689
alternatively I can just say I want to

00:16:33,129 --> 00:16:36,100
go to the airport car and the car would

00:16:34,689 --> 00:16:37,870
drive me you'd figure out all the

00:16:36,100 --> 00:16:39,699
details I don't need all I need to do is

00:16:37,870 --> 00:16:42,070
declare what the state of the world

00:16:39,699 --> 00:16:44,320
should be so that is sort of

00:16:42,070 --> 00:16:46,930
declarative layout works and what this

00:16:44,320 --> 00:16:48,550
allows you to do is internally compute

00:16:46,930 --> 00:16:50,950
targeted updates so that you don't have

00:16:48,550 --> 00:16:53,250
to change everything like we were like

00:16:50,950 --> 00:16:55,570
we're doing in the display cases

00:16:53,250 --> 00:16:57,220
additionally this lends itself to like

00:16:55,570 --> 00:16:59,200
compositional functional paradigms

00:16:57,220 --> 00:17:01,090
because when you want to have this

00:16:59,200 --> 00:17:02,860
targeted updating you can have these

00:17:01,090 --> 00:17:06,190
compositional pieces and you only want

00:17:02,860 --> 00:17:07,780
to update those individual pieces and VM

00:17:06,190 --> 00:17:11,709
is going to be returning us to different

00:17:07,780 --> 00:17:14,110
mime types media types the application V

00:17:11,709 --> 00:17:17,500
DOM and at XHTML this means we can do

00:17:14,110 --> 00:17:20,890
some stuff in text HTML but not that we

00:17:17,500 --> 00:17:26,430
can't do everything and now for the

00:17:20,890 --> 00:17:26,430
moment of truth can I get this to work

00:17:32,880 --> 00:17:55,920
oh that's why it opened there please be

00:17:42,730 --> 00:17:59,860
done work and yes good sorry about that

00:17:55,920 --> 00:18:01,840
so we can see how we would do progress

00:17:59,860 --> 00:18:04,210
bars inside VM so the basic idea in V

00:18:01,840 --> 00:18:07,240
Dom is we've got the standard HTML

00:18:04,210 --> 00:18:09,520
elements div and style for example so

00:18:07,240 --> 00:18:12,580
one way that you would work with this we

00:18:09,520 --> 00:18:14,350
just important different style from from

00:18:12,580 --> 00:18:16,480
V DOM and in this case we're actually

00:18:14,350 --> 00:18:18,730
not creating a style element what we're

00:18:16,480 --> 00:18:22,570
doing is we're creating a style

00:18:18,730 --> 00:18:24,700
attribute inside our div and so when we

00:18:22,570 --> 00:18:28,530
run this we're going to get back that

00:18:24,700 --> 00:18:30,760
text HTML because again as I'd mentioned

00:18:28,530 --> 00:18:34,030
we're still not able to display the V

00:18:30,760 --> 00:18:36,820
Dom object but we can see something here

00:18:34,030 --> 00:18:38,830
because that text HTML has correctly

00:18:36,820 --> 00:18:42,120
interpreted all of those arguments to

00:18:38,830 --> 00:18:44,530
instead become the appropriate HTML

00:18:42,120 --> 00:18:51,430
alternatively we could actually use a

00:18:44,530 --> 00:18:54,370
style object and pass in a CSS like a

00:18:51,430 --> 00:18:55,810
selector and assign a class to our div

00:18:54,370 --> 00:18:58,420
now

00:18:55,810 --> 00:19:00,820
can't be used in the way that we used

00:18:58,420 --> 00:19:02,710
style above because class is a reserved

00:19:00,820 --> 00:19:04,660
keyword so you have to actually if you

00:19:02,710 --> 00:19:06,550
want to do something like this create a

00:19:04,660 --> 00:19:07,720
dictionary and immediately unpack it by

00:19:06,550 --> 00:19:09,490
the way did I mention that I've been

00:19:07,720 --> 00:19:11,350
using Python 3 6 and Python 3 things

00:19:09,490 --> 00:19:12,640
everywhere this is don't even try to do

00:19:11,350 --> 00:19:14,800
a lot of the stuff that I'm doing with

00:19:12,640 --> 00:19:16,780
you're not doing it in Python 3 it's a

00:19:14,800 --> 00:19:20,560
much better life anyway you'll be

00:19:16,780 --> 00:19:23,710
happier so and this will have the same

00:19:20,560 --> 00:19:26,080
effect we have got this simple little

00:19:23,710 --> 00:19:27,750
diff okay cool so we have this idea we

00:19:26,080 --> 00:19:29,950
can creative we can pass in the style

00:19:27,750 --> 00:19:31,300
that's what our box here is we're

00:19:29,950 --> 00:19:32,650
passing and width and background color

00:19:31,300 --> 00:19:34,990
because we're going to need to change

00:19:32,650 --> 00:19:37,170
those the background color lets us have

00:19:34,990 --> 00:19:39,310
like the two bars that change together

00:19:37,170 --> 00:19:40,540
and then we're gonna create a div to

00:19:39,310 --> 00:19:43,030
wrap around the divs that we're going to

00:19:40,540 --> 00:19:44,770
generate and because I have my little

00:19:43,030 --> 00:19:48,370
like toggle thing I set the width to be

00:19:44,770 --> 00:19:50,350
70% so now we have to find those and now

00:19:48,370 --> 00:19:52,870
we've got our the basis for a little

00:19:50,350 --> 00:19:54,880
progress bar and so as you can see we

00:19:52,870 --> 00:19:57,040
now have a basic progress bar in the

00:19:54,880 --> 00:20:00,390
notebook I'm using V DOM and all of this

00:19:57,040 --> 00:20:02,770
happening with standard text HTML and

00:20:00,390 --> 00:20:04,960
updates the display updates that I was

00:20:02,770 --> 00:20:07,390
just done of just mentioning so what

00:20:04,960 --> 00:20:12,520
more can we do well we have the idea of

00:20:07,390 --> 00:20:15,850
a details in summary tags from HTML so

00:20:12,520 --> 00:20:18,280
let's hide our progress let's see let's

00:20:15,850 --> 00:20:21,370
have something that we can look at when

00:20:18,280 --> 00:20:23,440
we want it but isn't going to be like

00:20:21,370 --> 00:20:24,610
interface all the time so for example

00:20:23,440 --> 00:20:26,500
that would look like this we have our

00:20:24,610 --> 00:20:28,120
high a progress bar and when we click on

00:20:26,500 --> 00:20:31,270
our little progress bar then we get back

00:20:28,120 --> 00:20:33,520
our what the progress is of course we

00:20:31,270 --> 00:20:36,220
did this statically here so what happens

00:20:33,520 --> 00:20:39,340
when we try to actually run this well we

00:20:36,220 --> 00:20:42,550
every time we're clicking on the the

00:20:39,340 --> 00:20:44,560
thing to expand it it's being updated so

00:20:42,550 --> 00:20:45,730
it's being overwritten so we never

00:20:44,560 --> 00:20:47,200
actually get to see what the progress

00:20:45,730 --> 00:20:49,630
bar is until it's done which is

00:20:47,200 --> 00:20:54,960
definitely the most useful progress bar

00:20:49,630 --> 00:20:57,520
ever so but this is where our beautiful

00:20:54,960 --> 00:21:04,750
functionality from interact comes into

00:20:57,520 --> 00:21:07,809
play so let's pop over there so

00:21:04,750 --> 00:21:12,400
we're down here with our hidden progress

00:21:07,809 --> 00:21:14,320
bar and sharing the kernel so we've got

00:21:12,400 --> 00:21:15,970
this and we can just keep closing in and

00:21:14,320 --> 00:21:17,500
opening it and that progress bar is not

00:21:15,970 --> 00:21:19,059
losing its state because all of those

00:21:17,500 --> 00:21:21,070
updates are being passed in and it's

00:21:19,059 --> 00:21:22,090
holding the internal state so that it

00:21:21,070 --> 00:21:23,740
doesn't have to overwrite everything

00:21:22,090 --> 00:21:26,559
it's only overwriting the parts that are

00:21:23,740 --> 00:21:28,270
actually changing the progress bar we

00:21:26,559 --> 00:21:31,720
want to make it a little bit fancier

00:21:28,270 --> 00:21:34,900
here we've got some nested progress bars

00:21:31,720 --> 00:21:36,610
we've got multiple things happening

00:21:34,900 --> 00:21:38,970
inside we're gonna run some code inside

00:21:36,610 --> 00:21:43,120
threads to be able to update those steps

00:21:38,970 --> 00:21:46,409
and this will work inside of interact

00:21:43,120 --> 00:21:51,610
and I'll show you what happens inside of

00:21:46,409 --> 00:21:52,929
Jupiter in just a second but yeah so I

00:21:51,610 --> 00:21:54,549
know a lot of people have been asking

00:21:52,929 --> 00:21:56,470
for these kind of things in Jupiter

00:21:54,549 --> 00:22:01,539
interfaces for a while and it's actually

00:21:56,470 --> 00:22:03,669
one of the impetuses for V Dom and we've

00:22:01,539 --> 00:22:04,990
got at least a way to approach this but

00:22:03,669 --> 00:22:07,480
note that what I had to do here is

00:22:04,990 --> 00:22:09,880
create all of the objects and then pass

00:22:07,480 --> 00:22:12,039
through all of their values because we

00:22:09,880 --> 00:22:16,690
only have one display ID for the entire

00:22:12,039 --> 00:22:21,370
output so when we do go back to the oh

00:22:16,690 --> 00:22:24,789
and I have to when we do go back to the

00:22:21,370 --> 00:22:28,510
classic notebook and I have tried to run

00:22:24,789 --> 00:22:30,340
the same progress bar not only can we

00:22:28,510 --> 00:22:32,890
not click and open this it tells us that

00:22:30,340 --> 00:22:34,390
it's done like it's done executing

00:22:32,890 --> 00:22:35,890
nothing more needs to be done because

00:22:34,390 --> 00:22:39,429
all of that's happening in threads and

00:22:35,890 --> 00:22:42,340
eventually it will allow us to pop it

00:22:39,429 --> 00:22:44,799
open after that last one completes and

00:22:42,340 --> 00:22:50,980
again not just one of the best progress

00:22:44,799 --> 00:22:54,669
bars in the world but three so those are

00:22:50,980 --> 00:22:57,280
our V Dom oh and that's what the updates

00:22:54,669 --> 00:22:58,659
updated was great so we've got some

00:22:57,280 --> 00:22:59,710
challenges of the video I have just

00:22:58,659 --> 00:23:01,179
demonstrated some pretty cool things

00:22:59,710 --> 00:23:05,020
that people have been asking for for a

00:23:01,179 --> 00:23:07,299
while and like declarative layouts are

00:23:05,020 --> 00:23:09,250
pretty awesome but you know Python

00:23:07,299 --> 00:23:11,049
syntax it poses some challenges I

00:23:09,250 --> 00:23:12,760
mentioned that we have these naming

00:23:11,049 --> 00:23:14,710
convention convention conflicts but it's

00:23:12,760 --> 00:23:17,919
also standard in HTML when you're

00:23:14,710 --> 00:23:18,509
declaring your tags you immediately put

00:23:17,919 --> 00:23:20,789
the attribute

00:23:18,509 --> 00:23:22,499
inside them after the declaration but in

00:23:20,789 --> 00:23:23,879
this case because key their keyword

00:23:22,499 --> 00:23:26,399
arguments they have to come last because

00:23:23,879 --> 00:23:28,519
all the children that are not named are

00:23:26,399 --> 00:23:30,209
going to have to come before

00:23:28,519 --> 00:23:32,039
additionally there are some things about

00:23:30,209 --> 00:23:34,799
dashes not being able to appear in

00:23:32,039 --> 00:23:37,259
expression names it's also much easier

00:23:34,799 --> 00:23:39,059
to get this kind of reactive updating in

00:23:37,259 --> 00:23:41,149
the front end it would be nice if we

00:23:39,059 --> 00:23:43,469
could have that kind of selective update

00:23:41,149 --> 00:23:45,329
being passed along on the backend and

00:23:43,469 --> 00:23:48,119
related to that we don't have any way to

00:23:45,329 --> 00:23:50,459
compose these display IDs we have one

00:23:48,119 --> 00:23:52,349
display ID per output so these are all

00:23:50,459 --> 00:23:54,409
the last few things these are things

00:23:52,349 --> 00:23:56,249
that can improve the the syntax stuff

00:23:54,409 --> 00:23:58,979
semantics that that's going to be

00:23:56,249 --> 00:24:01,289
trickier but there is a beautiful future

00:23:58,979 --> 00:24:02,969
at some point in the at some point where

00:24:01,289 --> 00:24:04,169
these things could be mixed and matched

00:24:02,969 --> 00:24:06,869
very nicely

00:24:04,169 --> 00:24:09,359
so speaking of mixing and matching very

00:24:06,869 --> 00:24:12,989
nicely then rest of this is going to be

00:24:09,359 --> 00:24:15,629
about integrating displays with external

00:24:12,989 --> 00:24:17,579
objects and I just want to see okay I

00:24:15,629 --> 00:24:21,209
don't have that much more time so so far

00:24:17,579 --> 00:24:23,789
I've been talking about functional

00:24:21,209 --> 00:24:26,789
beauty like all of these pieces of that

00:24:23,789 --> 00:24:28,709
I've been doing they focus on the way

00:24:26,789 --> 00:24:31,709
that we are using text and things like

00:24:28,709 --> 00:24:33,869
that to make stuff happen didn't really

00:24:31,709 --> 00:24:35,940
focus on aesthetics I'd say it that the

00:24:33,869 --> 00:24:36,449
idea that I was doing that is a bit of a

00:24:35,940 --> 00:24:40,019
stretch

00:24:36,449 --> 00:24:41,940
so I really want to give us a tale of

00:24:40,019 --> 00:24:44,190
two beauties and the way to do that is

00:24:41,940 --> 00:24:52,619
going to be XML or rather highlighted

00:24:44,190 --> 00:24:56,279
XML because see that's the first one so

00:24:52,619 --> 00:24:58,349
we've got XML it's an amazingly powerful

00:24:56,279 --> 00:25:00,329
structured data representation that is

00:24:58,349 --> 00:25:02,879
in plain text SVG's are based off of

00:25:00,329 --> 00:25:05,190
this RSS which is how podcasts are

00:25:02,879 --> 00:25:08,789
distributed is based off of this XML

00:25:05,190 --> 00:25:12,109
itself the Jats standard for journal

00:25:08,789 --> 00:25:14,159
articles is XML so speaking of that

00:25:12,109 --> 00:25:15,779
we're going to be using the all floss

00:25:14,159 --> 00:25:18,779
library which gives us access to all of

00:25:15,779 --> 00:25:20,519
the plus articles XML and we're going to

00:25:18,779 --> 00:25:22,319
use pigments and we're going to do that

00:25:20,519 --> 00:25:23,909
to get our XML samples and we're gonna

00:25:22,319 --> 00:25:26,249
use pigments which is a generic syntax

00:25:23,909 --> 00:25:27,779
slider highlighter inside a thing called

00:25:26,249 --> 00:25:30,509
display XML which is going to give us

00:25:27,779 --> 00:25:31,920
ipython compatible HTML highlighting

00:25:30,509 --> 00:25:35,550
that allows us to change the star

00:25:31,920 --> 00:25:36,960
everything like that and here's a tip if

00:25:35,550 --> 00:25:38,340
you're going to be using pigments and

00:25:36,960 --> 00:25:40,350
you want to have different styles on the

00:25:38,340 --> 00:25:42,600
page you should use unique classes at

00:25:40,350 --> 00:25:44,400
the top of it to be able to scope all of

00:25:42,600 --> 00:25:47,310
your styles so that they don't conflict

00:25:44,400 --> 00:25:48,540
with each other I don't want to tell you

00:25:47,310 --> 00:25:53,850
how long it took for me to figure that

00:25:48,540 --> 00:25:59,190
one out so hopefully we've got a

00:25:53,850 --> 00:26:02,610
functioning thing out of the out of the

00:25:59,190 --> 00:26:05,220
gate okay we don't have any outfits that

00:26:02,610 --> 00:26:07,440
boots somewhat well and we've got okay

00:26:05,220 --> 00:26:09,720
so we're importing our display XML we're

00:26:07,440 --> 00:26:11,220
importing all of + we're creating a

00:26:09,720 --> 00:26:12,720
corpus which is just a collection of

00:26:11,220 --> 00:26:14,310
articles and then we're going to get

00:26:12,720 --> 00:26:16,050
that first article titled that first

00:26:14,310 --> 00:26:20,070
article is taking the stem-cell debate

00:26:16,050 --> 00:26:24,150
to the public that's its DOI maybe y'all

00:26:20,070 --> 00:26:25,590
should read it I don't know the key is

00:26:24,150 --> 00:26:29,100
that we're going to be able to do this

00:26:25,590 --> 00:26:32,130
with the XML and so on the article we

00:26:29,100 --> 00:26:34,050
can get the body from it and wrap it in

00:26:32,130 --> 00:26:36,450
this XML object so now pigments is

00:26:34,050 --> 00:26:38,630
happening under the hood lexing it and

00:26:36,450 --> 00:26:41,190
then applying these styles so that now

00:26:38,630 --> 00:26:49,530
what would have been something that

00:26:41,190 --> 00:26:52,200
looked like this looks like this so the

00:26:49,530 --> 00:26:54,150
thing is that it sucks to have to write

00:26:52,200 --> 00:26:56,220
xml around all of your articles it'd be

00:26:54,150 --> 00:26:59,070
much nicer if we could just have our

00:26:56,220 --> 00:27:01,680
article right there and when we have the

00:26:59,070 --> 00:27:03,390
article there's the xml displayed so the

00:27:01,680 --> 00:27:05,040
way that we do that is we go get one of

00:27:03,390 --> 00:27:06,660
those display format or specifically the

00:27:05,040 --> 00:27:08,700
HTML form matter because that's what

00:27:06,660 --> 00:27:12,000
we're outputting from the XML object and

00:27:08,700 --> 00:27:14,100
we're saying hey assign it this function

00:27:12,000 --> 00:27:17,400
where we're going to create an XML

00:27:14,100 --> 00:27:20,130
object around the body of the article

00:27:17,400 --> 00:27:21,780
and then we have to return we can't just

00:27:20,130 --> 00:27:23,220
return that we have to return the actual

00:27:21,780 --> 00:27:25,050
representation that we're gonna pass

00:27:23,220 --> 00:27:27,300
back and so that's why it's calling the

00:27:25,050 --> 00:27:29,010
referee to ml on there and when we do

00:27:27,300 --> 00:27:30,930
this and now we try to display an

00:27:29,010 --> 00:27:38,370
article that article has the appropriate

00:27:30,930 --> 00:27:42,890
XML displays great nice simple and now

00:27:38,370 --> 00:27:42,890
I'm having difficulty there we go

00:27:46,279 --> 00:27:52,259
so I'm not gonna go into this because

00:27:49,559 --> 00:27:53,369
I'm really running low on time oh this

00:27:52,259 --> 00:28:01,979
is fun

00:27:53,369 --> 00:28:04,799
so our nope that's not fun what we want

00:28:01,979 --> 00:28:09,989
is updating XML so we've already made it

00:28:04,799 --> 00:28:14,190
so that we can render our XML here well

00:28:09,989 --> 00:28:16,289
that's good so again we're gonna be

00:28:14,190 --> 00:28:17,459
creating our starter directory we're

00:28:16,289 --> 00:28:18,719
getting our corpus we're getting the

00:28:17,459 --> 00:28:21,059
first auto format and then we're gonna

00:28:18,719 --> 00:28:22,019
get our body so we're just doing that so

00:28:21,059 --> 00:28:23,609
that we can have something to work with

00:28:22,019 --> 00:28:25,409
and now we're gonna create an empty

00:28:23,609 --> 00:28:28,789
display object this is just so that we

00:28:25,409 --> 00:28:32,700
can have something to hang out around

00:28:28,789 --> 00:28:35,190
that part of the page so now we've got

00:28:32,700 --> 00:28:38,429
nothing there and if we were to go down

00:28:35,190 --> 00:28:41,399
here and display an ID on our empty

00:28:38,429 --> 00:28:43,169
display what happens is it displays it

00:28:41,399 --> 00:28:44,940
down there and it displays it up there

00:28:43,169 --> 00:28:47,369
because they both have the same display

00:28:44,940 --> 00:28:50,369
ID and one of the nice things that we

00:28:47,369 --> 00:28:54,479
have in the display XML object is direct

00:28:50,369 --> 00:28:56,789
integration with display IDs so if we

00:28:54,479 --> 00:28:58,919
pass in as one of its initializations

00:28:56,789 --> 00:29:01,619
not just the body of this article but

00:28:58,919 --> 00:29:03,929
also the ID itself we have the ability

00:29:01,619 --> 00:29:08,399
then to update its style in place so

00:29:03,929 --> 00:29:11,219
note we just changed this empty ID we

00:29:08,399 --> 00:29:13,619
changed this one down here but more

00:29:11,219 --> 00:29:15,779
importantly now we have this rich XML

00:29:13,619 --> 00:29:19,229
thing that we got that's our little XML

00:29:15,779 --> 00:29:23,820
document and every time we rerun the

00:29:19,229 --> 00:29:26,669
style it's changing under the hood to

00:29:23,820 --> 00:29:30,570
whatever it is that we want in all of

00:29:26,669 --> 00:29:32,639
the locations so how that happens is

00:29:30,570 --> 00:29:34,379
fairly straightforward actually we're

00:29:32,639 --> 00:29:37,079
just checking if there is a display ID

00:29:34,379 --> 00:29:38,669
in the in it and then if it's there we

00:29:37,079 --> 00:29:40,619
set it to self and then we're going to

00:29:38,669 --> 00:29:43,799
update it and then inside of a property

00:29:40,619 --> 00:29:45,899
and property setter method we're going

00:29:43,799 --> 00:29:47,249
to do the exact same thing and the idea

00:29:45,899 --> 00:29:49,499
being that all of the properties that

00:29:47,249 --> 00:29:52,139
we're going to say are selectively being

00:29:49,499 --> 00:29:54,450
updated that is reactive Python objects

00:29:52,139 --> 00:29:55,250
well those are going to be the ones that

00:29:54,450 --> 00:29:57,710
we're paying

00:29:55,250 --> 00:30:01,400
attention to when trying to make this

00:29:57,710 --> 00:30:03,230
happen oh it starts now oh I all right

00:30:01,400 --> 00:30:05,780
you all you'll have to ask me questions

00:30:03,230 --> 00:30:08,960
afterwards because I'm there's so much

00:30:05,780 --> 00:30:09,560
stuff to show you so XML it's beautiful

00:30:08,960 --> 00:30:12,050
on the inside

00:30:09,560 --> 00:30:13,730
um but I really I I was showing this

00:30:12,050 --> 00:30:15,230
mixture thing but now I just need to

00:30:13,730 --> 00:30:17,120
like lean into this aesthetic stuff

00:30:15,230 --> 00:30:19,400
because you know it's fun um so yeah

00:30:17,120 --> 00:30:21,290
we're going from what looks like this to

00:30:19,400 --> 00:30:24,140
that I don't know if that's meaningful

00:30:21,290 --> 00:30:25,790
to you but it's all the punctuation that

00:30:24,140 --> 00:30:27,800
was in there aside from the angle

00:30:25,790 --> 00:30:30,380
brackets so this what I'm going to now

00:30:27,800 --> 00:30:33,530
show is inspired by I don't know how to

00:30:30,380 --> 00:30:36,140
say his name Nicholas Raju is between

00:30:33,530 --> 00:30:38,480
the words so that is all of the

00:30:36,140 --> 00:30:40,370
punctuation from Lewis Carroll's Alice's

00:30:38,480 --> 00:30:42,620
Adventures in Wonderland arranged on an

00:30:40,370 --> 00:30:44,150
Archimedean spiral and one of the really

00:30:42,620 --> 00:30:48,140
nice things about Jupiter is that you

00:30:44,150 --> 00:30:52,430
can do this and you can do it live so

00:30:48,140 --> 00:30:55,280
yes spiraling out of control yeah yeah

00:30:52,430 --> 00:30:57,020
so Oh unfortunately this is going to

00:30:55,280 --> 00:31:02,930
take a bit of time so the slowest thing

00:30:57,020 --> 00:31:04,940
in here the one the one thing that I had

00:31:02,930 --> 00:31:07,280
wanted to actually have run before I

00:31:04,940 --> 00:31:08,450
started was this because it takes a

00:31:07,280 --> 00:31:11,060
little while because what's happening

00:31:08,450 --> 00:31:15,110
under the hood is simp I is figuring out

00:31:11,060 --> 00:31:18,130
that tangent points to a polar set of

00:31:15,110 --> 00:31:21,320
polar coordinates at a specific angle

00:31:18,130 --> 00:31:25,250
repeatedly all the way around generating

00:31:21,320 --> 00:31:27,230
all of the cubic or the quadratic Bezier

00:31:25,250 --> 00:31:30,680
curves so that we're able to actually

00:31:27,230 --> 00:31:34,430
represent what's happening here as an

00:31:30,680 --> 00:31:36,980
Archimedean spiral and that's necessary

00:31:34,430 --> 00:31:39,200
if we're then going to apply the SVG

00:31:36,980 --> 00:31:41,450
styling that is going to allow us to

00:31:39,200 --> 00:31:43,940
take all of the punctuation oh we're

00:31:41,450 --> 00:31:46,460
getting these articles from the corpus

00:31:43,940 --> 00:31:47,900
again a good or spiral is done articles

00:31:46,460 --> 00:31:49,690
from the corpus again and now we're

00:31:47,900 --> 00:31:53,330
going to display them so that this is

00:31:49,690 --> 00:31:54,830
all of the articles so let's see what is

00:31:53,330 --> 00:31:59,420
the article that we just dealt with

00:31:54,830 --> 00:32:00,980
corpus 1 so previously that was the

00:31:59,420 --> 00:32:03,170
Alice in Wonderland that I'd shown you

00:32:00,980 --> 00:32:05,300
this is EGF signal propagation during C

00:32:03,170 --> 00:32:07,510
elegans vulval development mediated by

00:32:05,300 --> 00:32:10,760
ROM one rhomboid Wow

00:32:07,510 --> 00:32:15,420
Lewis Carroll is nothing on

00:32:10,760 --> 00:32:16,890
so so that's one example but hey why

00:32:15,420 --> 00:32:19,620
don't we do a bit more fun stuff so

00:32:16,890 --> 00:32:22,260
let's color code all the connectors so

00:32:19,620 --> 00:32:24,840
connectors are going to be green rappers

00:32:22,260 --> 00:32:27,110
are going to be blue I think it is and

00:32:24,840 --> 00:32:30,150
punctuation was going to be red and

00:32:27,110 --> 00:32:30,810
there we go it's the same one let's try

00:32:30,150 --> 00:32:37,620
a different one

00:32:30,810 --> 00:32:40,890
nine awesome so we've got the ability to

00:32:37,620 --> 00:32:43,500
do that um can we do more so we've got

00:32:40,890 --> 00:32:46,410
this a corpus it's a bunch of different

00:32:43,500 --> 00:32:47,880
articles so maybe for the corpus when we

00:32:46,410 --> 00:32:49,710
want to make it pretty

00:32:47,880 --> 00:32:52,140
we'd have a way to do more than just

00:32:49,710 --> 00:32:54,800
have that plain text representation we

00:32:52,140 --> 00:32:59,130
could randomly generate one of these

00:32:54,800 --> 00:33:02,520
objects and each time should be a little

00:32:59,130 --> 00:33:07,040
bit different um how are we doing yeah

00:33:02,520 --> 00:33:09,450
okay but I bet we can do better so

00:33:07,040 --> 00:33:11,970
what's happening here it's the same

00:33:09,450 --> 00:33:14,550
function under the hood but I'll see if

00:33:11,970 --> 00:33:16,680
you can catch the difference but I'm

00:33:14,550 --> 00:33:23,280
gonna mention that it previously it was

00:33:16,680 --> 00:33:24,950
a an SVG display output and now we've

00:33:23,280 --> 00:33:29,970
got oh they don't all line up

00:33:24,950 --> 00:33:33,360
but yeah so again this is all Vida under

00:33:29,970 --> 00:33:37,110
the hood that is enabling this I'm happy

00:33:33,360 --> 00:33:41,340
to show you the code but but yeah that

00:33:37,110 --> 00:33:43,830
just all happened now that person sells

00:33:41,340 --> 00:33:45,930
posters of this and they're really nice

00:33:43,830 --> 00:33:47,310
and better kerned and all of that kind

00:33:45,930 --> 00:33:50,790
of stuff but the fact that you can get

00:33:47,310 --> 00:33:52,350
this far in a few minutes is that's a

00:33:50,790 --> 00:33:55,830
lie it took a lot longer than a few

00:33:52,350 --> 00:34:00,480
minutes but once it's done it's done so

00:33:55,830 --> 00:34:02,550
yeah and with that I think I had a

00:34:00,480 --> 00:34:04,470
random slide at the end instead of a

00:34:02,550 --> 00:34:06,150
thank-you slide so instead of thank you

00:34:04,470 --> 00:34:08,180
I guess I'll say that beautiful on the

00:34:06,150 --> 00:34:08,180
inside

00:34:14,929 --> 00:34:24,450
do we have time for any questions or are

00:34:17,520 --> 00:34:26,960
we completely out one okay anyone have

00:34:24,450 --> 00:34:26,960
one question

00:34:27,379 --> 00:34:34,230
well oh yeah that'll happen if we all

00:34:32,550 --> 00:34:35,490
sit down and do I can do it while I'm

00:34:34,230 --> 00:34:37,609
standing here instead of answering a

00:34:35,490 --> 00:34:37,609
question

00:34:50,760 --> 00:34:55,360
so you don't ideally you don't need to

00:34:53,620 --> 00:34:57,690
do that because in all the cases where

00:34:55,360 --> 00:35:00,670
you could have the text/html

00:34:57,690 --> 00:35:03,820
functionality it works the problem is

00:35:00,670 --> 00:35:05,740
you can't have reactive updates without

00:35:03,820 --> 00:35:07,330
something like react and you can't have

00:35:05,740 --> 00:35:08,560
react in the notebook without a gigantic

00:35:07,330 --> 00:35:10,570
refactor that's not going to happen

00:35:08,560 --> 00:35:14,380
unless you want to do it in which case

00:35:10,570 --> 00:35:17,890
that would be awesome and then V Tom

00:35:14,380 --> 00:35:20,020
would be in the notebook so unless

00:35:17,890 --> 00:35:24,100
there's any other quick question I think

00:35:20,020 --> 00:35:27,400
that is it you can get ahold of me at M

00:35:24,100 --> 00:35:28,630
pacer at Netflix comm I'm happy to

00:35:27,400 --> 00:35:30,880
answer any questions I'm going to be at

00:35:28,630 --> 00:35:33,590
the Netflix booth and I hope you all

00:35:30,880 --> 00:35:39,949
have a beautiful night

00:35:33,590 --> 00:35:39,949

YouTube URL: https://www.youtube.com/watch?v=ApWOpEeKYVE


