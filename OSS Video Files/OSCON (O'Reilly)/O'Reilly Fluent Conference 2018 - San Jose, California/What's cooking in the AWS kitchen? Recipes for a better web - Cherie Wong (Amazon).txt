Title: What's cooking in the AWS kitchen? Recipes for a better web - Cherie Wong (Amazon)
Publication date: 2018-06-14
Playlist: O'Reilly Fluent Conference 2018 - San Jose, California
Description: 
	As a web developer, you want to create beautiful, faster, safer experiences for your customers. Cherie Wong shares common developer pain points and recipes to solve them using AWS.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:02,480 --> 00:00:07,740
everyone I'm super excited to be here so

00:00:05,339 --> 00:00:10,170
my name is Cherie Wong I work on Amazon

00:00:07,740 --> 00:00:11,190
CloudFront most of you are developers

00:00:10,170 --> 00:00:12,990
and whether you're working on

00:00:11,190 --> 00:00:14,940
progressive web applications or back-end

00:00:12,990 --> 00:00:16,379
applications there's a lot of things

00:00:14,940 --> 00:00:18,090
that you really need to consider and

00:00:16,379 --> 00:00:20,370
that you're always worried about and so

00:00:18,090 --> 00:00:21,690
this presentation is for us to kind of

00:00:20,370 --> 00:00:22,980
come to you with a few things that we've

00:00:21,690 --> 00:00:24,990
heard that our kind of common pain

00:00:22,980 --> 00:00:26,910
points and we wanted to try to figure

00:00:24,990 --> 00:00:28,740
out if there's there are recipes to just

00:00:26,910 --> 00:00:32,189
make things a lot more straightforward

00:00:28,740 --> 00:00:33,059
and a lot more performant so the three

00:00:32,189 --> 00:00:34,920
things that we wanted to talk about

00:00:33,059 --> 00:00:37,680
today are authentication and

00:00:34,920 --> 00:00:39,809
authorization of your users security and

00:00:37,680 --> 00:00:41,160
how do you get a really good user

00:00:39,809 --> 00:00:44,130
experience because you have so many

00:00:41,160 --> 00:00:45,030
different screen sizes to work with some

00:00:44,130 --> 00:00:46,620
of the things I'm going to talk about

00:00:45,030 --> 00:00:48,450
today there are many different solutions

00:00:46,620 --> 00:00:50,610
to but what we were really trying to do

00:00:48,450 --> 00:00:52,440
is figure out can we make it very

00:00:50,610 --> 00:00:54,390
straightforward and easy and because I

00:00:52,440 --> 00:00:56,850
work on a content delivery network I'm

00:00:54,390 --> 00:00:58,410
very interested in performance so a lot

00:00:56,850 --> 00:01:00,690
of these recipes are focused on how do

00:00:58,410 --> 00:01:03,360
we get a lot more code and content at

00:01:00,690 --> 00:01:05,189
the edge because we've got 117 edge

00:01:03,360 --> 00:01:07,290
locations and servers essentially in

00:01:05,189 --> 00:01:09,270
internet exchanges and carrier networks

00:01:07,290 --> 00:01:11,250
closest to your end-users and we want

00:01:09,270 --> 00:01:15,299
your end-users to have the lowest

00:01:11,250 --> 00:01:16,830
latency and the lowest response time so

00:01:15,299 --> 00:01:19,320
let's talk about authentication and

00:01:16,830 --> 00:01:20,490
authorization first there's a lot of

00:01:19,320 --> 00:01:22,680
work in thinking about how to manage

00:01:20,490 --> 00:01:25,290
your users and how to manage your salt

00:01:22,680 --> 00:01:27,119
and hash tables and so what we wanted to

00:01:25,290 --> 00:01:28,350
think about in AWS is a lot of different

00:01:27,119 --> 00:01:30,990
services that really help you with that

00:01:28,350 --> 00:01:33,689
so you can use kms or key management

00:01:30,990 --> 00:01:35,850
server for I was in your private keys

00:01:33,689 --> 00:01:37,740
you have AWS Certificate manager so you

00:01:35,850 --> 00:01:40,290
can get free SSL certificates and manage

00:01:37,740 --> 00:01:42,540
your certificates there you can have the

00:01:40,290 --> 00:01:44,880
Web Application Firewall to think about

00:01:42,540 --> 00:01:47,670
how you want to manage rogue traffic or

00:01:44,880 --> 00:01:49,409
bot traffic and kognito to authenticate

00:01:47,670 --> 00:01:52,439
your users and so this example is going

00:01:49,409 --> 00:01:55,110
to use Cognito your web application here

00:01:52,439 --> 00:01:58,020
your your user is going to an amazon

00:01:55,110 --> 00:01:59,549
Cognito sign-in page amazon Cognito

00:01:58,020 --> 00:02:04,140
authenticate your user and it sends back

00:01:59,549 --> 00:02:07,799
an encrypted JSON web token and then

00:02:04,140 --> 00:02:10,200
what what happens then your application

00:02:07,799 --> 00:02:11,879
has this JSON web token but you still

00:02:10,200 --> 00:02:14,279
need to figure out is this user going to

00:02:11,879 --> 00:02:15,910
have authorization to see the content or

00:02:14,279 --> 00:02:17,500
not and so in this exam

00:02:15,910 --> 00:02:19,240
gonna say you know there's private

00:02:17,500 --> 00:02:20,400
content and there's public content that

00:02:19,240 --> 00:02:22,780
they should see or they shouldn't see

00:02:20,400 --> 00:02:24,490
you could put that logic in your

00:02:22,780 --> 00:02:25,840
back-end application that means your

00:02:24,490 --> 00:02:27,490
request has to go all the way to your

00:02:25,840 --> 00:02:29,200
back-end application you need to decrypt

00:02:27,490 --> 00:02:31,150
your web token and you need to figure

00:02:29,200 --> 00:02:32,800
out should this user have access to it

00:02:31,150 --> 00:02:34,180
or not which means it's also handling a

00:02:32,800 --> 00:02:36,190
lot of requests that are probably

00:02:34,180 --> 00:02:38,920
invalid or that users don't have

00:02:36,190 --> 00:02:40,390
authorization to actually see so you

00:02:38,920 --> 00:02:42,490
have to scale your origin and you have

00:02:40,390 --> 00:02:44,020
to add in all this logic we're thinking

00:02:42,490 --> 00:02:45,640
do you really need to modify your

00:02:44,020 --> 00:02:48,190
application logic for something that

00:02:45,640 --> 00:02:50,080
should be relatively straightforward and

00:02:48,190 --> 00:02:52,510
so we thought about what can we do at

00:02:50,080 --> 00:02:53,980
the edge if your request comes into a

00:02:52,510 --> 00:02:55,470
content delivery network in this case

00:02:53,980 --> 00:02:58,920
Amazon CloudFront

00:02:55,470 --> 00:03:02,020
you can create a no js' function for

00:02:58,920 --> 00:03:04,930
with lambda edge and so essentially it's

00:03:02,020 --> 00:03:07,570
gonna say hey this request is actually

00:03:04,930 --> 00:03:10,180
coming in for private content I'm gonna

00:03:07,570 --> 00:03:11,860
decrypt the web token is this user

00:03:10,180 --> 00:03:14,620
actually authorized to see this content

00:03:11,860 --> 00:03:16,300
if so great send the request to your

00:03:14,620 --> 00:03:20,200
back-end application and surf the

00:03:16,300 --> 00:03:22,660
content back now if your user is not

00:03:20,200 --> 00:03:24,160
authorized to see this content not a

00:03:22,660 --> 00:03:26,080
problem at all you can use the same

00:03:24,160 --> 00:03:28,330
lambda function to actually generate a

00:03:26,080 --> 00:03:29,650
response back like an HTTP for a one

00:03:28,330 --> 00:03:31,300
you're not authorized to see this

00:03:29,650 --> 00:03:33,780
content so you don't need to put any of

00:03:31,300 --> 00:03:37,120
that logic inside your application and

00:03:33,780 --> 00:03:38,920
if it's just regular public content it

00:03:37,120 --> 00:03:40,540
the requesters lands in clapeyron and it

00:03:38,920 --> 00:03:42,970
continues going to your origin and we we

00:03:40,540 --> 00:03:44,110
cache the content we serve it back so a

00:03:42,970 --> 00:03:45,310
lot of these recipes are kind of going

00:03:44,110 --> 00:03:46,840
to have a little bit of the similar

00:03:45,310 --> 00:03:48,850
flavor of how do we just make things

00:03:46,840 --> 00:03:51,160
super easy to bring a lot of this logic

00:03:48,850 --> 00:03:54,640
and content to the edge so that's author

00:03:51,160 --> 00:03:57,250
authentication and authorization next

00:03:54,640 --> 00:03:59,080
security there's a lot of content out

00:03:57,250 --> 00:04:00,400
there people are coming in through HTTP

00:03:59,080 --> 00:04:03,250
when you really want them to come over

00:04:00,400 --> 00:04:04,600
HTTP yes you want to really tell your

00:04:03,250 --> 00:04:06,880
web application what do you want to do

00:04:04,600 --> 00:04:08,680
with cross-site scripting should you

00:04:06,880 --> 00:04:10,510
load scripts or style sheets and

00:04:08,680 --> 00:04:12,970
typically how you're going to do that is

00:04:10,510 --> 00:04:15,280
you're gonna send headers or security

00:04:12,970 --> 00:04:17,890
headers back in the response to from the

00:04:15,280 --> 00:04:20,799
web request but then you again have to

00:04:17,890 --> 00:04:24,640
modify a lot of application code and so

00:04:20,799 --> 00:04:26,710
again can we simplify that so kind of

00:04:24,640 --> 00:04:29,410
the same pattern user request comes in

00:04:26,710 --> 00:04:29,830
do we have the content if so great serve

00:04:29,410 --> 00:04:33,040
the cat

00:04:29,830 --> 00:04:35,830
content but if not then you can fetch

00:04:33,040 --> 00:04:37,270
the content and have your nodejs lambda

00:04:35,830 --> 00:04:39,760
edge function just add all these

00:04:37,270 --> 00:04:43,090
security headers in before the response

00:04:39,760 --> 00:04:45,430
goes back to your end-user and so you've

00:04:43,090 --> 00:04:46,360
added all your HSTs headers or your

00:04:45,430 --> 00:04:48,250
cross-site scripting header is

00:04:46,360 --> 00:04:53,260
everything that you want to add straight

00:04:48,250 --> 00:04:55,750
from the edge another one is user

00:04:53,260 --> 00:04:58,870
experience you've got so many different

00:04:55,750 --> 00:04:59,860
screens to deal with and so what are you

00:04:58,870 --> 00:05:02,020
going to do with all the different

00:04:59,860 --> 00:05:04,060
screen sizes and all the different sizes

00:05:02,020 --> 00:05:06,040
of images you may want to manipulate

00:05:04,060 --> 00:05:08,170
your images to actually crop it to just

00:05:06,040 --> 00:05:10,780
the part of the image that is most

00:05:08,170 --> 00:05:13,300
relevant to the for the user or the

00:05:10,780 --> 00:05:16,780
screen size you may also want it to

00:05:13,300 --> 00:05:20,380
digital watermarking and so in this

00:05:16,780 --> 00:05:23,380
situation we're gonna have user send a

00:05:20,380 --> 00:05:25,390
request for an image maybe your web

00:05:23,380 --> 00:05:28,240
application says I want this image to be

00:05:25,390 --> 00:05:30,820
100 by 100 you put the dimensions into

00:05:28,240 --> 00:05:32,350
the query string lambda edge can read

00:05:30,820 --> 00:05:33,820
all the query strings and headers as

00:05:32,350 --> 00:05:35,230
part of your request and say hey do I

00:05:33,820 --> 00:05:39,850
actually already have this object in

00:05:35,230 --> 00:05:43,090
cache great serve the content but if not

00:05:39,850 --> 00:05:44,950
I can go and fetch the object and then

00:05:43,090 --> 00:05:46,960
when the object comes back is it

00:05:44,950 --> 00:05:50,200
actually the image size and everything

00:05:46,960 --> 00:05:53,230
that we want yes so great cache it serve

00:05:50,200 --> 00:05:55,270
it but if not I can generate it you can

00:05:53,230 --> 00:05:58,480
resize your images you can add the

00:05:55,270 --> 00:06:00,070
digital watermarking you can pretty much

00:05:58,480 --> 00:06:03,040
do whatever logic you want within this

00:06:00,070 --> 00:06:06,340
nodejs function cache it and then send

00:06:03,040 --> 00:06:08,470
it back so again authentication and

00:06:06,340 --> 00:06:10,420
authorization adding all the security

00:06:08,470 --> 00:06:13,300
headers that you want and being able to

00:06:10,420 --> 00:06:15,250
manipulate your images so these were

00:06:13,300 --> 00:06:16,630
kind of the three common pain points

00:06:15,250 --> 00:06:18,430
that we've kind of heard of that we

00:06:16,630 --> 00:06:20,740
really wanted to make relatively easy

00:06:18,430 --> 00:06:22,660
and then we thought well how do we make

00:06:20,740 --> 00:06:25,180
it just a little bit more exciting and

00:06:22,660 --> 00:06:26,800
so we thought about machine learning and

00:06:25,180 --> 00:06:28,690
some of us were thinking but well how

00:06:26,800 --> 00:06:30,430
are we gonna add machine learning at the

00:06:28,690 --> 00:06:32,560
edge what are we how do we add machine

00:06:30,430 --> 00:06:34,450
learning in to live workflows and so

00:06:32,560 --> 00:06:35,040
this is a recipe I guess is fresh from

00:06:34,450 --> 00:06:37,660
the oven

00:06:35,040 --> 00:06:39,160
but the Royal Wedding everyone loves

00:06:37,660 --> 00:06:41,230
Royals everyone wants to see them get

00:06:39,160 --> 00:06:43,480
married over and over again and what

00:06:41,230 --> 00:06:45,310
skynews really wanted to do is to

00:06:43,480 --> 00:06:47,470
machine learning and not just show the

00:06:45,310 --> 00:06:49,510
content but actually be able to say hey

00:06:47,470 --> 00:06:51,760
here's everybody that's showing up and

00:06:49,510 --> 00:06:54,480
here's information on them so it was

00:06:51,760 --> 00:06:57,670
pulling a lot of this data in and and

00:06:54,480 --> 00:07:00,940
bringing that into its own progressive

00:06:57,670 --> 00:07:03,040
and interactive live stream and so how

00:07:00,940 --> 00:07:06,940
this really worked behind the scenes was

00:07:03,040 --> 00:07:09,040
we were ingesting a live stream into AWS

00:07:06,940 --> 00:07:10,360
elemental media services so you could

00:07:09,040 --> 00:07:12,130
ingest the stream it was adding the

00:07:10,360 --> 00:07:14,200
digital rights and then it was using

00:07:12,130 --> 00:07:16,660
Amazon recognition to identify every

00:07:14,200 --> 00:07:18,070
celebrity and then using a different

00:07:16,660 --> 00:07:20,860
data source called grey media just to

00:07:18,070 --> 00:07:22,120
add that data in on exactly the profile

00:07:20,860 --> 00:07:24,580
of every celebrity so that it would be

00:07:22,120 --> 00:07:26,800
able to show it on the video and on the

00:07:24,580 --> 00:07:28,570
website and then it served it securely

00:07:26,800 --> 00:07:30,100
through cloud forints as well so this

00:07:28,570 --> 00:07:31,900
was a really cool way of actually having

00:07:30,100 --> 00:07:34,330
a live work throw that was still doing

00:07:31,900 --> 00:07:39,550
as much with security at the edge as

00:07:34,330 --> 00:07:41,500
possible cool so I hope you enjoyed a

00:07:39,550 --> 00:07:43,000
few of these recipes if you do want us

00:07:41,500 --> 00:07:44,680
to think of it more I'm happy to think

00:07:43,000 --> 00:07:48,810
of it more to swing by our views at

00:07:44,680 --> 00:07:51,220
10:09 and here's a few other vlogs and

00:07:48,810 --> 00:07:52,360
other examples of recipes that we shared

00:07:51,220 --> 00:07:54,920
as well so if you have any other

00:07:52,360 --> 00:07:58,629
questions feel free to reach out Thanks

00:07:54,920 --> 00:07:58,629

YouTube URL: https://www.youtube.com/watch?v=3y_tNagGKN8


