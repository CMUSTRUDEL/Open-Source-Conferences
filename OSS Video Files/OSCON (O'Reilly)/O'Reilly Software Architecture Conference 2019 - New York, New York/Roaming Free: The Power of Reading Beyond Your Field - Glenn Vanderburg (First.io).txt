Title: Roaming Free: The Power of Reading Beyond Your Field - Glenn Vanderburg (First.io)
Publication date: 2019-02-06
Playlist: O'Reilly Software Architecture Conference 2019 - New York, New York
Description: 
	If you sometimes wish you had more time to pursue other interests, branch out from your specialty, or simply be curious, Glenn Vanderburg offers some encouragement. Glenn talks about the importance of letting your attention roam more widely, sharing real examples of how insights from other fields have inspired practitioners in the world of software.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,110 --> 00:00:05,250
now you may not have the freedom to take

00:00:03,270 --> 00:00:07,080
off and have a bunch of new experiences

00:00:05,250 --> 00:00:09,179
you know working construction for six

00:00:07,080 --> 00:00:11,790
months or backpacking through man Nepal

00:00:09,179 --> 00:00:15,540
or becoming an expert expert glassblower

00:00:11,790 --> 00:00:17,420
or whatever but reading widely gives you

00:00:15,540 --> 00:00:20,670
a way of broadening our experience

00:00:17,420 --> 00:00:22,470
vicariously from your armchair it may

00:00:20,670 --> 00:00:24,810
not be as effective as going out and

00:00:22,470 --> 00:00:27,350
doing it yourself but it's a whole lot

00:00:24,810 --> 00:00:27,350
better than nothing

00:00:27,560 --> 00:00:32,700
here's a personal example as Anil

00:00:31,170 --> 00:00:34,469
mentioned four years ago when I had a

00:00:32,700 --> 00:00:36,390
different job a little less grey hair I

00:00:34,469 --> 00:00:39,059
spoke at the first O'Reilly software

00:00:36,390 --> 00:00:40,860
architecture conference then I gave a

00:00:39,059 --> 00:00:42,780
talk explaining where software

00:00:40,860 --> 00:00:45,840
development fits on the spectrum of

00:00:42,780 --> 00:00:47,340
engineering disciplines and how even

00:00:45,840 --> 00:00:49,890
though it doesn't look much like things

00:00:47,340 --> 00:00:51,629
like civil engineering there are strong

00:00:49,890 --> 00:00:53,010
similarities with other fields like

00:00:51,629 --> 00:00:57,750
aerospace chemical and industrial

00:00:53,010 --> 00:01:00,090
engineering that talk was actually 15

00:00:57,750 --> 00:01:01,590
years in the making I had spent the

00:01:00,090 --> 00:01:03,390
first part of the 90s learning what you

00:01:01,590 --> 00:01:04,799
might call classical Software

00:01:03,390 --> 00:01:06,330
Engineering structured an

00:01:04,799 --> 00:01:10,049
object-oriented analysis and design

00:01:06,330 --> 00:01:12,450
modeling UML etc and being frustrated by

00:01:10,049 --> 00:01:14,580
it and then I spent the latter part of

00:01:12,450 --> 00:01:16,860
that decade learning about the then-new

00:01:14,580 --> 00:01:19,140
ideas of agile software development and

00:01:16,860 --> 00:01:22,470
one of the themes of agile at that time

00:01:19,140 --> 00:01:23,880
was well we tried building software the

00:01:22,470 --> 00:01:27,780
way engineers would and it didn't work

00:01:23,880 --> 00:01:30,720
so let's try something else and in the

00:01:27,780 --> 00:01:32,520
middle of that in July 2000 I stumbled

00:01:30,720 --> 00:01:34,920
upon a wonderful article by David

00:01:32,520 --> 00:01:38,240
Billington in Scientific American the

00:01:34,920 --> 00:01:40,920
revolutionary bridges of ro-bear my art

00:01:38,240 --> 00:01:43,220
there I learned that at least in some

00:01:40,920 --> 00:01:45,840
cases designing and building bridges

00:01:43,220 --> 00:01:48,570
doesn't look much like stereotypical

00:01:45,840 --> 00:01:51,600
ideas of what engineering is like it's

00:01:48,570 --> 00:01:53,430
full of iteration and experiment and

00:01:51,600 --> 00:01:57,390
trial and error and it's kind of test

00:01:53,430 --> 00:02:01,110
driven it sounded a lot like software

00:01:57,390 --> 00:02:03,750
development that led me to two related

00:02:01,110 --> 00:02:05,579
books by Henry Petroski engineers of

00:02:03,750 --> 00:02:07,170
Dreams great bridge builders and the

00:02:05,579 --> 00:02:09,330
spanning of America which features

00:02:07,170 --> 00:02:12,360
several of the beautiful bridges around

00:02:09,330 --> 00:02:13,680
Manhattan and to engineer is human the

00:02:12,360 --> 00:02:16,849
role of failure in

00:02:13,680 --> 00:02:19,799
design those books confirmed to me that

00:02:16,849 --> 00:02:21,569
real engineering is rarely as

00:02:19,799 --> 00:02:24,900
straightforward and predictable as what

00:02:21,569 --> 00:02:27,480
we've all been led to believe and from

00:02:24,900 --> 00:02:29,849
there I went on to aerospace engineering

00:02:27,480 --> 00:02:31,859
and mechanical engineering and read some

00:02:29,849 --> 00:02:34,859
of those things and the process

00:02:31,859 --> 00:02:36,510
completely changed my view on how we

00:02:34,859 --> 00:02:39,139
should strive to develop software

00:02:36,510 --> 00:02:39,139
systems

00:02:45,319 --> 00:02:47,379

YouTube URL: https://www.youtube.com/watch?v=45bNxyctJhY


