Title: Immutable infrastructure from containers to serverless with James Bottomley (IBM)
Publication date: 2019-02-12
Playlist: O'Reilly Software Architecture Conference 2019 - New York, New York
Description: 
	Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,030 --> 00:00:04,980
hi Roger McGough is here vice president

00:00:02,760 --> 00:00:07,410
of radar at O'Reilly at the software

00:00:04,980 --> 00:00:09,000
architecture conference in New York 2019

00:00:07,410 --> 00:00:11,730
I'm here with James Bottomly he's a

00:00:09,000 --> 00:00:13,469
distinguished engineer at IBM but why

00:00:11,730 --> 00:00:15,660
don't you say a little about who you are

00:00:13,469 --> 00:00:18,539
and what you're working on yes certainly

00:00:15,660 --> 00:00:20,820
so I'm a distinguished engineer at IBM

00:00:18,539 --> 00:00:23,279
Research and my main topic of research

00:00:20,820 --> 00:00:25,439
is actually the fundamentals of

00:00:23,279 --> 00:00:27,420
containers and specifically Linux

00:00:25,439 --> 00:00:30,960
containers so my background is actually

00:00:27,420 --> 00:00:33,239
as a kernel coder for a long time I was

00:00:30,960 --> 00:00:35,370
actually maintainer of several

00:00:33,239 --> 00:00:38,190
subsystems and side the Linux kernel and

00:00:35,370 --> 00:00:40,350
in 2011 I joined a container company

00:00:38,190 --> 00:00:42,210
called parallels and it was my job to

00:00:40,350 --> 00:00:43,860
get their container technology or as

00:00:42,210 --> 00:00:46,320
close an approximation as we could

00:00:43,860 --> 00:00:49,410
upstream into the Linux kernel so from

00:00:46,320 --> 00:00:51,840
2011 through to the present day I spent

00:00:49,410 --> 00:00:53,399
my time working on the containerization

00:00:51,840 --> 00:00:56,820
primitives that we actually have in the

00:00:53,399 --> 00:00:59,280
Linux kernel and which in 2013-2014

00:00:56,820 --> 00:01:00,960
enabled the docker revolution and DevOps

00:00:59,280 --> 00:01:02,340
and all the other goodness that people

00:01:00,960 --> 00:01:04,710
at this conference are actually talking

00:01:02,340 --> 00:01:07,049
about it seems to be the foundation of

00:01:04,710 --> 00:01:09,290
what it takes to make the kind of modern

00:01:07,049 --> 00:01:11,640
architectures work is that containers

00:01:09,290 --> 00:01:14,070
something you can deploy easily and

00:01:11,640 --> 00:01:15,509
everywhere yes so I was going to talk

00:01:14,070 --> 00:01:17,520
about that I had this wonderful talk

00:01:15,509 --> 00:01:19,290
lined up for this conference because I

00:01:17,520 --> 00:01:21,750
don't usually get to talk at high-level

00:01:19,290 --> 00:01:23,490
conferences being somebody who really

00:01:21,750 --> 00:01:25,229
works in the level primitives things

00:01:23,490 --> 00:01:26,790
like namespaces and see groups of what I

00:01:25,229 --> 00:01:28,710
work with and that's not really what

00:01:26,790 --> 00:01:30,180
anybody wants to hear about at an

00:01:28,710 --> 00:01:32,520
architecture conference I don't often

00:01:30,180 --> 00:01:33,869
get let out of the box to come here but

00:01:32,520 --> 00:01:36,990
I thought it would be nice to give a

00:01:33,869 --> 00:01:38,700
nice overview in architectural terms of

00:01:36,990 --> 00:01:40,590
how the infrastructure paradigms like

00:01:38,700 --> 00:01:42,570
going from physical systems to virtual

00:01:40,590 --> 00:01:44,670
systems to containers have actually

00:01:42,570 --> 00:01:48,119
driven all of the changes in the way we

00:01:44,670 --> 00:01:51,329
actually do stuff in industry today now

00:01:48,119 --> 00:01:52,979
going from having to sort of deployment

00:01:51,329 --> 00:01:55,170
systems through the sort of deployment

00:01:52,979 --> 00:01:57,360
scripts like ansible puppet chef the new

00:01:55,170 --> 00:01:59,070
stuff then trying to get on to DevOps

00:01:57,360 --> 00:02:00,930
and immutable infrastructure and

00:01:59,070 --> 00:02:02,759
everything else and as I was building up

00:02:00,930 --> 00:02:04,350
this wonderful talk about how all the

00:02:02,759 --> 00:02:04,880
infrastructure people essentially invent

00:02:04,350 --> 00:02:06,950
the power of

00:02:04,880 --> 00:02:08,810
and make them easy for the architecture

00:02:06,950 --> 00:02:10,220
people to use and consume I actually

00:02:08,810 --> 00:02:12,080
realized that we had a missing

00:02:10,220 --> 00:02:14,239
infrastructure paradigm in containers

00:02:12,080 --> 00:02:16,220
which means that a lot of the DevOps

00:02:14,239 --> 00:02:18,830
assumptions that people make use of and

00:02:16,220 --> 00:02:21,080
claim our properties of container aren't

00:02:18,830 --> 00:02:22,880
actually properties we're exporting from

00:02:21,080 --> 00:02:24,620
the underlying container technology and

00:02:22,880 --> 00:02:26,150
for some of them they're not even

00:02:24,620 --> 00:02:28,400
properties that are enforced anywhere in

00:02:26,150 --> 00:02:30,620
the ecosystem this actually leads to a

00:02:28,400 --> 00:02:32,470
somewhat interesting architectural

00:02:30,620 --> 00:02:36,160
imbalance which I also be talking about

00:02:32,470 --> 00:02:39,470
as part of the develop cycle can you

00:02:36,160 --> 00:02:41,690
express of what you're what you're

00:02:39,470 --> 00:02:43,910
talking about but maybe you can yeah

00:02:41,690 --> 00:02:46,849
sure so the DevOps cycle is based on

00:02:43,910 --> 00:02:48,950
this idea that you can precisely using

00:02:46,849 --> 00:02:50,780
container technologies you can precisely

00:02:48,950 --> 00:02:52,549
transport the environment you develop

00:02:50,780 --> 00:02:54,230
the application on into a test

00:02:52,549 --> 00:02:56,390
environment that you've constructed and

00:02:54,230 --> 00:02:58,400
then precisely transport the same thing

00:02:56,390 --> 00:03:00,230
into the cloud where it will emit its

00:02:58,400 --> 00:03:02,930
services and the precision of the

00:03:00,230 --> 00:03:05,090
transport is such that the testing you

00:03:02,930 --> 00:03:07,310
did on whatever infrastructure you had

00:03:05,090 --> 00:03:09,500
in your test suite should be as valid as

00:03:07,310 --> 00:03:11,900
if you done it on the client and this

00:03:09,500 --> 00:03:13,579
precise transport depends on something

00:03:11,900 --> 00:03:15,920
called a mutable infrastructure the idea

00:03:13,579 --> 00:03:17,510
that the infrastructural paradigms you

00:03:15,920 --> 00:03:18,950
make use of that even you don't think

00:03:17,510 --> 00:03:21,049
you're making use of in your dev test

00:03:18,950 --> 00:03:22,459
environment precisely the same as the

00:03:21,049 --> 00:03:26,810
ones you'll see when you deploy in the

00:03:22,459 --> 00:03:28,519
cloud and this infrastructural paradigm

00:03:26,810 --> 00:03:30,139
immutable infrastructure is often

00:03:28,519 --> 00:03:31,850
thought to be a property of containers

00:03:30,139 --> 00:03:33,260
and I was actually going to tout it as a

00:03:31,850 --> 00:03:35,870
property of containers and I gave my

00:03:33,260 --> 00:03:37,069
talk when I actually thought about it

00:03:35,870 --> 00:03:38,389
after writing the slides I actually

00:03:37,069 --> 00:03:40,100
thought about what I'd said and I

00:03:38,389 --> 00:03:41,720
thought you know there's nothing in

00:03:40,100 --> 00:03:43,880
contained technology that actually

00:03:41,720 --> 00:03:45,829
enforces this immutability is is this

00:03:43,880 --> 00:03:47,690
really an architectural property of

00:03:45,829 --> 00:03:50,209
anything in the system and it turns out

00:03:47,690 --> 00:03:52,340
it isn't and even worse than that it

00:03:50,209 --> 00:03:54,200
turns out that a lot of people who pay

00:03:52,340 --> 00:03:56,269
lip service to producing containers

00:03:54,200 --> 00:03:58,010
through DevOps and actually upload their

00:03:56,269 --> 00:03:59,510
work to the docker hub so I can just

00:03:58,010 --> 00:04:01,730
download it and pull through it and see

00:03:59,510 --> 00:04:03,349
what they've done have broke it violated

00:04:01,730 --> 00:04:04,880
this immutable infrastructure property

00:04:03,349 --> 00:04:07,040
they're not following any of the DevOps

00:04:04,880 --> 00:04:09,170
things and it turns out that about 60%

00:04:07,040 --> 00:04:10,580
of the containers you can get at the the

00:04:09,170 --> 00:04:12,740
docker hub are not actually

00:04:10,580 --> 00:04:14,990
DevOps compliant in this way which is an

00:04:12,740 --> 00:04:16,790
interesting statistic when you consider

00:04:14,990 --> 00:04:19,220
that we're all fired up about this

00:04:16,790 --> 00:04:21,200
DevOps revolution micro-services and the

00:04:19,220 --> 00:04:22,820
fundamental thing that underpins it is

00:04:21,200 --> 00:04:24,470
something we don't have a guarantee for

00:04:22,820 --> 00:04:27,290
in the infrastructure and in fact

00:04:24,470 --> 00:04:29,450
nothing in enforces so you're bringing

00:04:27,290 --> 00:04:32,990
up kind of two vectors of discussion I

00:04:29,450 --> 00:04:35,810
would like to talk about I'll start with

00:04:32,990 --> 00:04:37,550
the high level thing which is what do

00:04:35,810 --> 00:04:39,590
you think about micro services and

00:04:37,550 --> 00:04:42,500
what's going on in that like what is

00:04:39,590 --> 00:04:44,660
your sense of the adoption rate well so

00:04:42,500 --> 00:04:47,420
my sense of the adoption rate is that

00:04:44,660 --> 00:04:48,830
it's it depends how you can so if you if

00:04:47,420 --> 00:04:50,390
you judge the adoption rate by the

00:04:48,830 --> 00:04:53,030
number of people paying lip-service to

00:04:50,390 --> 00:04:54,470
using it it's enormous if you judge the

00:04:53,030 --> 00:04:56,750
adoption rate by the number of people

00:04:54,470 --> 00:05:00,050
actually deploying systems based on it

00:04:56,750 --> 00:05:01,460
it's not so big but the difference

00:05:00,050 --> 00:05:03,380
between the sort of the hype and the

00:05:01,460 --> 00:05:04,970
reality is always good in these sort of

00:05:03,380 --> 00:05:06,680
circumstances because it means there are

00:05:04,970 --> 00:05:09,440
lots and lots of people scrambling to

00:05:06,680 --> 00:05:10,880
try and do this and when I look at some

00:05:09,440 --> 00:05:12,950
of the paradigms I was going to talk

00:05:10,880 --> 00:05:14,690
about if you think about the way we've

00:05:12,950 --> 00:05:17,450
been going from physical systems to

00:05:14,690 --> 00:05:20,060
virtual machines to containers to micro

00:05:17,450 --> 00:05:21,830
services and sort of script-based things

00:05:20,060 --> 00:05:24,020
like open whisk in the Hamazon lamda

00:05:21,830 --> 00:05:26,510
what we've actually been doing is making

00:05:24,020 --> 00:05:28,220
our architectural components much

00:05:26,510 --> 00:05:30,320
smaller and much more trigger Abul and

00:05:28,220 --> 00:05:33,169
this seems to be a sort of constant as

00:05:30,320 --> 00:05:35,419
we go up this and the ability to put

00:05:33,169 --> 00:05:37,790
together pieces from this constant seems

00:05:35,419 --> 00:05:39,650
to be an excellent way of actually

00:05:37,790 --> 00:05:41,390
constructing in the cloud applications

00:05:39,650 --> 00:05:43,250
which have a reasonable chance of being

00:05:41,390 --> 00:05:45,230
sort of talking to the things they're

00:05:43,250 --> 00:05:47,510
supposed to talk of to being robust and

00:05:45,230 --> 00:05:49,550
actually being able to produce things

00:05:47,510 --> 00:05:52,340
that require that you didn't have to

00:05:49,550 --> 00:05:54,650
have an entire team build this 1 million

00:05:52,340 --> 00:05:56,510
line code program you just picked a grab

00:05:54,650 --> 00:05:58,940
bag of things off the internet connected

00:05:56,510 --> 00:06:00,470
them with a few HTTP REST connectors did

00:05:58,940 --> 00:06:02,630
your little script e trigger and had a

00:06:00,470 --> 00:06:04,580
front-end web page to get everybody to

00:06:02,630 --> 00:06:06,110
view it and that seems to be a very

00:06:04,580 --> 00:06:08,510
simple way of actually bringing up

00:06:06,110 --> 00:06:10,100
incredibly complex services so an IBM

00:06:08,510 --> 00:06:12,290
we're looking at doing things like this

00:06:10,100 --> 00:06:14,419
for say a I machine assisted learning if

00:06:12,290 --> 00:06:16,190
we can actually link a very simple

00:06:14,419 --> 00:06:18,350
trigger script and a sort of set of nice

00:06:16,190 --> 00:06:20,889
primitives to this we can actually get

00:06:18,350 --> 00:06:22,210
something that will actually truly bring

00:06:20,889 --> 00:06:24,400
to whatever service you were actually

00:06:22,210 --> 00:06:28,090
trying to do so in those terms I think

00:06:24,400 --> 00:06:30,370
that the trend through to micro-services

00:06:28,090 --> 00:06:32,590
is actually a trend basically I mean

00:06:30,370 --> 00:06:34,300
it's had many names so we call it micro

00:06:32,590 --> 00:06:36,580
services today it wouldn't have been

00:06:34,300 --> 00:06:38,949
incorrect you know ten years ago to have

00:06:36,580 --> 00:06:40,900
called it a mash up in some ways the

00:06:38,949 --> 00:06:42,280
same principles are exactly what we're

00:06:40,900 --> 00:06:44,319
using and the same thing and the same

00:06:42,280 --> 00:06:46,539
ideas I just I don't want to build all

00:06:44,319 --> 00:06:48,909
this stuff myself I want to take all the

00:06:46,539 --> 00:06:50,740
stuff you've put together take yourself

00:06:48,909 --> 00:06:53,229
describing endpoints and consume them

00:06:50,740 --> 00:06:54,699
very easily into something I then make

00:06:53,229 --> 00:06:57,009
ton of money on selling as a service to

00:06:54,699 --> 00:06:58,419
the consumers so yes I think micro

00:06:57,009 --> 00:06:59,800
services are a good trend and they're

00:06:58,419 --> 00:07:02,139
definitely here to stay so you brought

00:06:59,800 --> 00:07:04,000
up lambda and the other vector I want to

00:07:02,139 --> 00:07:06,250
just talk quickly about is this around

00:07:04,000 --> 00:07:09,069
serverless and that type of thing you

00:07:06,250 --> 00:07:10,449
mentioned immutable infrastructures what

00:07:09,069 --> 00:07:14,979
do you think about service and we were

00:07:10,449 --> 00:07:16,810
at I think if you so architectural II

00:07:14,979 --> 00:07:18,909
the trends going from physical to

00:07:16,810 --> 00:07:20,590
virtual so when he went from physical to

00:07:18,909 --> 00:07:22,180
virtual you tried to free yourself from

00:07:20,590 --> 00:07:24,189
some of the stuff you have to do in

00:07:22,180 --> 00:07:25,960
deploying a virtual machine like knowing

00:07:24,189 --> 00:07:28,120
what all the drivers are and you know

00:07:25,960 --> 00:07:30,279
all of the weird installation tricks you

00:07:28,120 --> 00:07:32,409
had to do now this promise didn't quite

00:07:30,279 --> 00:07:34,629
live up to it for virtual images so you

00:07:32,409 --> 00:07:37,900
probably know that a an Amazon virtual

00:07:34,629 --> 00:07:39,639
image of a my image can't necessarily be

00:07:37,900 --> 00:07:41,110
deployed in a VMware cloud because the

00:07:39,639 --> 00:07:43,419
driver differences so we have a problem

00:07:41,110 --> 00:07:45,219
there containers took that up another

00:07:43,419 --> 00:07:47,620
level they actually if you think about

00:07:45,219 --> 00:07:49,810
it with we we took the interface from

00:07:47,620 --> 00:07:52,000
being real hardware and physical systems

00:07:49,810 --> 00:07:53,919
to being the virtual hardware interface

00:07:52,000 --> 00:07:55,599
and virtual machines to becoming the

00:07:53,919 --> 00:07:57,129
syscall interface in container so

00:07:55,599 --> 00:07:58,839
everything below this is cool interface

00:07:57,129 --> 00:08:00,400
which includes the kernel and all its

00:07:58,839 --> 00:08:03,400
drivers is now stuff I don't need to

00:08:00,400 --> 00:08:05,680
know what goes on where this is what

00:08:03,400 --> 00:08:08,050
enabled this sort of the easy building

00:08:05,680 --> 00:08:09,729
of docker images serverless is taking

00:08:08,050 --> 00:08:11,529
that a stage further because now what

00:08:09,729 --> 00:08:13,569
it's trying to do is to say that the

00:08:11,529 --> 00:08:16,029
thing I want to containerize is really

00:08:13,569 --> 00:08:17,379
just this tiny script and I'll tell you

00:08:16,029 --> 00:08:19,060
what language it's written in and what

00:08:17,379 --> 00:08:20,469
platform it needs to run on but you

00:08:19,060 --> 00:08:22,870
missed the cloud service person just

00:08:20,469 --> 00:08:24,339
deploy that and my script should run and

00:08:22,870 --> 00:08:26,169
it should actually be transportable

00:08:24,339 --> 00:08:28,779
anywhere now that's the promise of

00:08:26,169 --> 00:08:29,949
service in the same way as we promise

00:08:28,779 --> 00:08:31,780
the mutable infrastructure for

00:08:29,949 --> 00:08:34,180
containers I'm not saying we'll live up

00:08:31,780 --> 00:08:36,370
but if we can realize some portion of

00:08:34,180 --> 00:08:38,440
that promise what we get out of this is

00:08:36,370 --> 00:08:40,450
true application containers instead of

00:08:38,440 --> 00:08:42,010
right at the moment doctor containers we

00:08:40,450 --> 00:08:43,750
call them application containers but

00:08:42,010 --> 00:08:45,160
they're not because they contain all of

00:08:43,750 --> 00:08:46,810
the infrastructure down from the

00:08:45,160 --> 00:08:48,600
application to the Sisko level and

00:08:46,810 --> 00:08:50,620
civilus offers us the possibility

00:08:48,600 --> 00:08:52,960
rejecting all that infrastructure and

00:08:50,620 --> 00:08:54,520
when I say ejecting I mean turning over

00:08:52,960 --> 00:08:56,320
management to that infrastructure to the

00:08:54,520 --> 00:08:58,360
cloud service provider because this is

00:08:56,320 --> 00:09:00,250
basically all about enabling people to

00:08:58,360 --> 00:09:01,840
do the things they're best at if I'm an

00:09:00,250 --> 00:09:03,640
architect building a container I'm not

00:09:01,840 --> 00:09:05,530
best at constructing operating systems

00:09:03,640 --> 00:09:07,150
and yet in every container sits a little

00:09:05,530 --> 00:09:08,890
operating system somebody has to have

00:09:07,150 --> 00:09:11,350
constructed and that when I deploy I

00:09:08,890 --> 00:09:12,970
have to manage turning that over to the

00:09:11,350 --> 00:09:15,310
client service provider as civiles

00:09:12,970 --> 00:09:16,690
promises is actually the way of truly

00:09:15,310 --> 00:09:18,820
liberating ourselves and actually

00:09:16,690 --> 00:09:21,460
bringing application containers as a

00:09:18,820 --> 00:09:23,410
proper architectural construct instead

00:09:21,460 --> 00:09:25,630
of effectively what we have today which

00:09:23,410 --> 00:09:26,500
is a mash-up so well it's kind of

00:09:25,630 --> 00:09:27,640
fascinating what you're talking about

00:09:26,500 --> 00:09:29,470
with surveillance when I think about

00:09:27,640 --> 00:09:31,570
server list it's something someone told

00:09:29,470 --> 00:09:35,110
me a long time ago computers are

00:09:31,570 --> 00:09:37,690
terrible at doing nothing yes layout so

00:09:35,110 --> 00:09:40,240
the promise of serverless in some ways

00:09:37,690 --> 00:09:41,860
there's a great productivity thing that

00:09:40,240 --> 00:09:44,470
you're describing but it also means with

00:09:41,860 --> 00:09:46,120
fast spin up is that you can actually

00:09:44,470 --> 00:09:48,160
maybe turn computers off when you don't

00:09:46,120 --> 00:09:51,010
need them but you're able to handle kind

00:09:48,160 --> 00:09:52,480
of variable loads and stuff do you think

00:09:51,010 --> 00:09:55,200
that that's something that is helping

00:09:52,480 --> 00:09:58,030
drive this or is that too far off or I

00:09:55,200 --> 00:09:59,800
think realistically the problem is the

00:09:58,030 --> 00:10:02,200
computer equivalent of Parkinson's law

00:09:59,800 --> 00:10:03,760
which is basically programming always

00:10:02,200 --> 00:10:07,030
expands to fill the capacity available

00:10:03,760 --> 00:10:08,470
to it so if you think of where what who

00:10:07,030 --> 00:10:10,150
will be running these little serverless

00:10:08,470 --> 00:10:12,700
scripts they'll be running in a cloud

00:10:10,150 --> 00:10:14,650
service environment and their job is

00:10:12,700 --> 00:10:16,150
basically the job of the hardware will

00:10:14,650 --> 00:10:18,910
be to run as many of these scripts as

00:10:16,150 --> 00:10:21,010
possible and right at the moment it

00:10:18,910 --> 00:10:23,560
looks like the industry's appetite for

00:10:21,010 --> 00:10:25,300
doing stuff with compute exceeds our

00:10:23,560 --> 00:10:27,250
capacity to actually build compute

00:10:25,300 --> 00:10:29,140
systems that's why if you look at sort

00:10:27,250 --> 00:10:31,690
of Google and Apple their specialities

00:10:29,140 --> 00:10:33,040
are filling shipping containers with

00:10:31,690 --> 00:10:34,600
computers and dropping them in the

00:10:33,040 --> 00:10:38,100
desert because they physically can't get

00:10:34,600 --> 00:10:41,130
the computing power so I think the idea

00:10:38,100 --> 00:10:42,690
civilus is just so my Newton computing

00:10:41,130 --> 00:10:45,029
power that we'd be able suddenly to

00:10:42,690 --> 00:10:46,830
switch off all these computers really

00:10:45,029 --> 00:10:49,529
weren't fly but what will happen is that

00:10:46,830 --> 00:10:52,019
it's it's a scaling problem and actually

00:10:49,529 --> 00:10:54,180
if you think about things like OpenStack

00:10:52,019 --> 00:10:55,860
that were originally designed to to

00:10:54,180 --> 00:10:57,779
build and orchestrate virtual machines

00:10:55,860 --> 00:10:59,550
they couldn't cope with the container

00:10:57,779 --> 00:11:01,470
world because they had a scaling problem

00:10:59,550 --> 00:11:03,300
it turns out that the amount of memory

00:11:01,470 --> 00:11:05,279
something like OpenStack uses to manage

00:11:03,300 --> 00:11:06,750
a virtual machine as tiny compared to

00:11:05,279 --> 00:11:08,459
the virtual machines memory footprint

00:11:06,750 --> 00:11:10,649
but it's an it's it's actually

00:11:08,459 --> 00:11:12,480
overwhelms the containers footprint so

00:11:10,649 --> 00:11:14,279
if you bring something like OpenStack to

00:11:12,480 --> 00:11:16,440
manage containers you expend most of

00:11:14,279 --> 00:11:18,720
your main memory of the system on the

00:11:16,440 --> 00:11:19,769
actual orchestration thing itself

00:11:18,720 --> 00:11:21,180
instead of the container you were

00:11:19,769 --> 00:11:22,920
supposed to be running that's why

00:11:21,180 --> 00:11:26,220
kubernetes effectively took over from

00:11:22,920 --> 00:11:28,290
OpenStack now if you look at and in fact

00:11:26,220 --> 00:11:30,089
the number of the the scaling number you

00:11:28,290 --> 00:11:31,649
went from virtual machine images to

00:11:30,089 --> 00:11:34,140
container images with somewhere between

00:11:31,649 --> 00:11:35,700
ten times and a hundred times and if you

00:11:34,140 --> 00:11:37,649
look at script las' we're trying to do

00:11:35,700 --> 00:11:40,200
the same thing again instead of wanting

00:11:37,649 --> 00:11:42,120
to run you know a hundred virtual

00:11:40,200 --> 00:11:44,160
machines on this giving way to five

00:11:42,120 --> 00:11:46,170
thousand containers will want to run

00:11:44,160 --> 00:11:47,760
fifty thousand to a hundred thousand of

00:11:46,170 --> 00:11:49,500
these little script look things so

00:11:47,760 --> 00:11:51,060
whatever we use to run them has got to

00:11:49,500 --> 00:11:52,890
be incredibly light in terms of its

00:11:51,060 --> 00:11:55,290
footprint it's got to be incredibly

00:11:52,890 --> 00:11:57,510
agile and it's got to be capable of shed

00:11:55,290 --> 00:11:59,579
Yuling you know hundreds of thousands of

00:11:57,510 --> 00:12:01,709
these things in a second and if we get

00:11:59,579 --> 00:12:03,480
that right what we'll actually be using

00:12:01,709 --> 00:12:04,980
is the same physical infrastructure and

00:12:03,480 --> 00:12:06,510
probably quite a bit more of it but

00:12:04,980 --> 00:12:08,730
they'll be whipping these things in and

00:12:06,510 --> 00:12:11,100
out as fast as they possibly can so it's

00:12:08,730 --> 00:12:12,630
like a density or density in a way

00:12:11,100 --> 00:12:15,089
that's the old question thing density of

00:12:12,630 --> 00:12:16,829
compute yeah great well this is great I

00:12:15,089 --> 00:12:18,540
wish we could continue the conversation

00:12:16,829 --> 00:12:19,800
I'll bet your talk today is going to be

00:12:18,540 --> 00:12:22,760
great but thanks a lot for your time

00:12:19,800 --> 00:12:22,760

YouTube URL: https://www.youtube.com/watch?v=wgm6RI1MdhM


