Title: Design and Architecture: Special Dumpster Fire Unit - Matt Stine (Pivotal)
Publication date: 2019-02-06
Playlist: O'Reilly Software Architecture Conference 2019 - New York, New York
Description: 
	In software engineering, design and architecture offenses are considered especially heinous. At the Oâ€™Reilly Software Architecture Conference, the dedicated detectives who investigate these vicious felonies are members of an elite squad known as the Special Dumpster Fire Unit. These are their stories.

Subscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi

Follow O'Reilly on: 
Twitter: http://twitter.com/oreillymedia
Facebook: http://facebook.com/OReilly
Instagram: https://www.instagram.com/oreillymedia
LinkedIn: https://www.linkedin.com/company-beta/8459/
Captions: 
	00:00:00,030 --> 00:00:05,609
so case two is going to be the great

00:00:02,370 --> 00:00:09,809
rewrite that is going to solve all the

00:00:05,609 --> 00:00:12,630
problems of the previous system so

00:00:09,809 --> 00:00:15,420
version 1 of this system was targeted to

00:00:12,630 --> 00:00:18,949
support seven customers so it was an

00:00:15,420 --> 00:00:22,500
internal support application that had

00:00:18,949 --> 00:00:25,769
eventually we'll say twenty to thirty

00:00:22,500 --> 00:00:28,680
potential users in terms of business

00:00:25,769 --> 00:00:31,320
units within this company and so we

00:00:28,680 --> 00:00:33,809
started with seven and there was a three

00:00:31,320 --> 00:00:36,149
year project proposal and after eight

00:00:33,809 --> 00:00:41,040
years we still weren't done with the

00:00:36,149 --> 00:00:43,469
original set of requirements the

00:00:41,040 --> 00:00:45,210
brilliant new architect in charge of

00:00:43,469 --> 00:00:48,000
this system says well we're going to do

00:00:45,210 --> 00:00:51,480
version 2 and version 2 is going to

00:00:48,000 --> 00:00:55,980
cover the original 7 plus 18 more in two

00:00:51,480 --> 00:01:02,100
years and after three and a half years

00:00:55,980 --> 00:01:04,979
two had been delivered so things were

00:01:02,100 --> 00:01:08,100
taking too long and so why not write

00:01:04,979 --> 00:01:10,470
another version of version 2 that's a

00:01:08,100 --> 00:01:12,119
little bit simpler so that we can take

00:01:10,470 --> 00:01:14,130
the five people who are yelling at us

00:01:12,119 --> 00:01:16,920
for the delays on version two and give

00:01:14,130 --> 00:01:18,960
them something to work with total

00:01:16,920 --> 00:01:23,400
program cost across all three of these

00:01:18,960 --> 00:01:25,560
was measured in eight figures so

00:01:23,400 --> 00:01:27,299
investigation so what was wrong with

00:01:25,560 --> 00:01:29,340
version one that got us in this mess in

00:01:27,299 --> 00:01:33,509
the first place well basically it turned

00:01:29,340 --> 00:01:36,540
out that the team started with one of

00:01:33,509 --> 00:01:39,270
the seven customers and based all of the

00:01:36,540 --> 00:01:41,549
abstractions on that one customer

00:01:39,270 --> 00:01:43,680
without bothering to validate well are

00:01:41,549 --> 00:01:47,130
these assumptions actually gonna be true

00:01:43,680 --> 00:01:51,689
for the other six the system mostly

00:01:47,130 --> 00:01:53,970
worked but very hard to ship and there

00:01:51,689 --> 00:01:56,460
are also many performance and

00:01:53,970 --> 00:01:59,460
operational problems primarily due to

00:01:56,460 --> 00:02:01,740
the team's lack of understanding of at

00:01:59,460 --> 00:02:05,640
the time operational characteristics of

00:02:01,740 --> 00:02:08,220
j2ee so the proposal then was well let's

00:02:05,640 --> 00:02:10,739
fix all of these problems we're going to

00:02:08,220 --> 00:02:12,930
rewrite this system using a flexible

00:02:10,739 --> 00:02:13,440
metadata driven model so rather than

00:02:12,930 --> 00:02:15,180
over

00:02:13,440 --> 00:02:18,630
fit the model we're gonna create a model

00:02:15,180 --> 00:02:20,880
that can fit anything and then we're

00:02:18,630 --> 00:02:22,350
gonna get rid of j2ee and and bring in

00:02:20,880 --> 00:02:27,420
spring because of course that's going to

00:02:22,350 --> 00:02:30,120
fix all of those other problems the more

00:02:27,420 --> 00:02:32,490
flexibility this team demonstrated to

00:02:30,120 --> 00:02:34,830
the customer base well the more

00:02:32,490 --> 00:02:37,740
flexibility the customer base wanted

00:02:34,830 --> 00:02:40,470
it's like oh it can do that can it do

00:02:37,740 --> 00:02:41,850
this - how about this and so we kind of

00:02:40,470 --> 00:02:42,930
went through those cycles for quite a

00:02:41,850 --> 00:02:45,240
while

00:02:42,930 --> 00:02:48,450
there was really no concept whatsoever

00:02:45,240 --> 00:02:50,910
of MVP so again really no incremental

00:02:48,450 --> 00:02:53,790
deliveries of this system there was this

00:02:50,910 --> 00:02:56,040
insistence on perfection I'm not going

00:02:53,790 --> 00:02:57,900
to start using the software until it

00:02:56,040 --> 00:02:59,580
does absolutely everything I want it to

00:02:57,900 --> 00:03:02,520
do in exactly the way I want to do it

00:02:59,580 --> 00:03:05,070
and because of that hey it can do this

00:03:02,520 --> 00:03:06,990
let's make it do this as well the

00:03:05,070 --> 00:03:08,700
platform had to keep shipping so the

00:03:06,990 --> 00:03:10,590
original idea was we'll finish the

00:03:08,700 --> 00:03:11,910
platform and then everything else is

00:03:10,590 --> 00:03:13,350
gonna be data driven so we won't have to

00:03:11,910 --> 00:03:17,310
write any more code yeah that didn't

00:03:13,350 --> 00:03:20,220
happen so trial first charge we'll call

00:03:17,310 --> 00:03:21,810
it architectural hubris so the primary

00:03:20,220 --> 00:03:23,400
architects of the new system believed

00:03:21,810 --> 00:03:25,820
that they could radically change the

00:03:23,400 --> 00:03:28,590
architecture from the previous delivery

00:03:25,820 --> 00:03:30,450
even though they had zero experience in

00:03:28,590 --> 00:03:32,070
the new patterns that they were using or

00:03:30,450 --> 00:03:37,200
the technology stack that they were

00:03:32,070 --> 00:03:41,000
using GUILTY second charge we have a

00:03:37,200 --> 00:03:42,959
repeat offender that ignores history so

00:03:41,000 --> 00:03:45,900
architects and engineers on this

00:03:42,959 --> 00:03:49,290
particular team either had short

00:03:45,900 --> 00:03:50,970
memories or were brand new hires and so

00:03:49,290 --> 00:03:55,100
the mistakes of history were largely

00:03:50,970 --> 00:04:00,360
ignored and in some cases repeated

00:03:55,100 --> 00:04:02,730
guilty and then the charge of absence of

00:04:00,360 --> 00:04:05,030
product thinking so this team was very

00:04:02,730 --> 00:04:07,440
much working from a project centric

00:04:05,030 --> 00:04:09,570
completion mindset we're going to be

00:04:07,440 --> 00:04:11,340
done with this we're gonna hand it over

00:04:09,570 --> 00:04:14,130
and walk away and do something else

00:04:11,340 --> 00:04:16,769
rather than a product centric continuous

00:04:14,130 --> 00:04:21,980
delivery mindset and so little was ever

00:04:16,769 --> 00:04:21,980
completed or delivered guilty

00:04:27,740 --> 00:04:29,800

YouTube URL: https://www.youtube.com/watch?v=2E-HM7I6uzQ


