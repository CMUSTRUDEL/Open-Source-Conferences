Title: OSDC 2019: Virtualisation in Docker, using KVM as Hypervisor by Kosisochukwu Anyanwu
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	There are multiple reasons one might want to run VMs inside containers. One scenario could be running VMs as part of a CI pipeline which executes all build steps inside containers. This can be useful, for example, for emulating bare-metal deployments. In this talk, I will demonstrate how to create a virtual machine inside a Docker container using KVM as the hypervisor driver, explain how the container needs to be configured in terms of privileges and discuss some of the challenges involved.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:13,220 --> 00:00:21,240
[Applause]

00:00:16,910 --> 00:00:25,500
thank you before I start I'd like to ask

00:00:21,240 --> 00:00:26,460
a few questions who works regularly with

00:00:25,500 --> 00:00:29,699
containers

00:00:26,460 --> 00:00:31,619
I guess it's everyone right cool and how

00:00:29,699 --> 00:00:35,040
about with virtual machines everyone -

00:00:31,619 --> 00:00:40,469
right and who has had to work with

00:00:35,040 --> 00:00:42,719
virtual machines in containers ok ok so

00:00:40,469 --> 00:00:45,870
I'll be talking about virtualization in

00:00:42,719 --> 00:00:48,120
Dhaka using kvms a hypervisor I will

00:00:45,870 --> 00:00:50,610
talk about the use case based on my

00:00:48,120 --> 00:00:53,250
experience working on a project how

00:00:50,610 --> 00:00:59,070
these can be achieved as well as a short

00:00:53,250 --> 00:01:02,100
demo in the end I am cozy so - cool I

00:00:59,070 --> 00:01:05,070
know you can call me cozy I'm a software

00:01:02,100 --> 00:01:08,159
engineer King Volk twitter handle is

00:01:05,070 --> 00:01:12,600
cozy Francis github username is cozy

00:01:08,159 --> 00:01:15,000
Francis and that's my email address at

00:01:12,600 --> 00:01:18,570
kinfoke we are deep stuff humanities

00:01:15,000 --> 00:01:21,479
experts I can help username is King book

00:01:18,570 --> 00:01:24,090
twitter is king book aiyo

00:01:21,479 --> 00:01:27,470
this is our email address and you can

00:01:24,090 --> 00:01:27,470
also check out our blog on our website

00:01:28,070 --> 00:01:33,869
ok I will just talk a little bit about

00:01:31,170 --> 00:01:36,390
the level of virtualization that happens

00:01:33,869 --> 00:01:38,579
in containers and virtual machines as

00:01:36,390 --> 00:01:42,990
well as on some terminologies I will be

00:01:38,579 --> 00:01:47,520
using in this presentation so in a

00:01:42,990 --> 00:01:49,290
container this is an interesting stack

00:01:47,520 --> 00:01:51,600
of containers in a container what we

00:01:49,290 --> 00:01:53,549
have is a oh s level virtualization

00:01:51,600 --> 00:01:56,130
which is also known as containerization

00:01:53,549 --> 00:01:58,860
so the virtualization level here happens

00:01:56,130 --> 00:02:01,979
in the operating system so this is more

00:01:58,860 --> 00:02:05,009
like a feature in the OS where it allows

00:02:01,979 --> 00:02:08,970
the existence of multiple isolated user

00:02:05,009 --> 00:02:10,489
space instances and for virtual machine

00:02:08,970 --> 00:02:12,330
what we have is hardware virtualization

00:02:10,489 --> 00:02:14,250
where it

00:02:12,330 --> 00:02:19,200
virtual machine has its own operating

00:02:14,250 --> 00:02:20,549
system and well we all know what docker

00:02:19,200 --> 00:02:25,980
is kind of like a wrapper around a

00:02:20,549 --> 00:02:28,409
container and for a hypervisor it is a

00:02:25,980 --> 00:02:31,620
process that creates and runs virtual

00:02:28,409 --> 00:02:34,560
machines it allows the host computer to

00:02:31,620 --> 00:02:37,140
be able to support multiple guest VMs by

00:02:34,560 --> 00:02:39,239
virtually sharing its resources so some

00:02:37,140 --> 00:02:44,180
of it includes VirtualBox VM ware and

00:02:39,239 --> 00:02:48,569
KVM that we'll be focusing on here and

00:02:44,180 --> 00:02:51,569
KBM is a virtualization module in the

00:02:48,569 --> 00:02:53,459
kernel that allows the kernel to

00:02:51,569 --> 00:02:55,739
function as a hypervisor in other words

00:02:53,459 --> 00:02:58,250
it's let you turn Linux into a

00:02:55,739 --> 00:03:02,459
hypervisor

00:02:58,250 --> 00:03:05,190
so to run KVM you need a processor that

00:03:02,459 --> 00:03:08,870
supports hardware virtualization I think

00:03:05,190 --> 00:03:14,040
virtually all processors today do that

00:03:08,870 --> 00:03:15,959
so if you want to check the prog CPU

00:03:14,040 --> 00:03:19,500
info file contains information about

00:03:15,959 --> 00:03:21,750
your processor including the number of

00:03:19,500 --> 00:03:26,010
CPUs and a bunch of other things and

00:03:21,750 --> 00:03:29,519
then this CPU Flags VMs or SVM depending

00:03:26,010 --> 00:03:34,129
on whether you use Intel or AMD they

00:03:29,519 --> 00:03:36,959
kind of it's it's time to sure that your

00:03:34,129 --> 00:03:40,139
machine supports virtualization

00:03:36,959 --> 00:03:44,430
technology so if the count of either of

00:03:40,139 --> 00:03:46,290
these flags vm x or SVM is 0 then your

00:03:44,430 --> 00:03:52,739
processor doesn't support hardware

00:03:46,290 --> 00:03:55,620
virtualization comparing containers and

00:03:52,739 --> 00:03:56,489
VMs the picture here is pretty

00:03:55,620 --> 00:03:59,069
straightforward

00:03:56,489 --> 00:04:00,959
the containers they shared the same host

00:03:59,069 --> 00:04:03,239
operating system and docker is the

00:04:00,959 --> 00:04:06,359
container software platform sitting in

00:04:03,239 --> 00:04:09,569
the middle for a virtual machine we have

00:04:06,359 --> 00:04:11,549
the hypervisor doing all of the work and

00:04:09,569 --> 00:04:16,470
all of the VMS have their own operating

00:04:11,549 --> 00:04:20,760
systems and in the end we will kind of

00:04:16,470 --> 00:04:22,860
have this whole stock kind of sitting in

00:04:20,760 --> 00:04:25,969
this whole stack that's what we will

00:04:22,860 --> 00:04:25,969
accomplish eventually

00:04:28,270 --> 00:04:34,420
but why would you want to have a virtual

00:04:31,630 --> 00:04:39,820
machine in a container what is the point

00:04:34,420 --> 00:04:41,920
what is the purpose I will give some

00:04:39,820 --> 00:04:44,830
examples or I will just share an

00:04:41,920 --> 00:04:47,830
experience that we had while working on

00:04:44,830 --> 00:04:50,440
the project so at Kean Volk we were

00:04:47,830 --> 00:04:53,260
working on a kubernetes distribution

00:04:50,440 --> 00:04:56,080
project that supports running cuban

00:04:53,260 --> 00:04:58,570
artists on bare metal machines so we

00:04:56,080 --> 00:05:02,680
wanted to make a CI pipeline to test

00:04:58,570 --> 00:05:05,050
that aspect of the project and we wanted

00:05:02,680 --> 00:05:06,970
to test it in a cheaper way because it

00:05:05,050 --> 00:05:09,550
will require us spinning up multiple

00:05:06,970 --> 00:05:12,580
virtual machines to emulate a bare metal

00:05:09,550 --> 00:05:15,340
environment so doing that on the cloud

00:05:12,580 --> 00:05:16,780
for multiple number of VMs that we

00:05:15,340 --> 00:05:18,760
wanted to keep spinning up for each test

00:05:16,780 --> 00:05:22,560
it was kind of going to be expensive in

00:05:18,760 --> 00:05:25,210
the long run and we had this very beefy

00:05:22,560 --> 00:05:30,040
server that we wanted to run everything

00:05:25,210 --> 00:05:32,320
in then we analyzed some CI tools and I

00:05:30,040 --> 00:05:33,370
don't really remember a ton of the

00:05:32,320 --> 00:05:36,610
reasons why we decided to go with

00:05:33,370 --> 00:05:39,550
conquer CI but then there was a

00:05:36,610 --> 00:05:42,910
challenge with using conquer CI it runs

00:05:39,550 --> 00:05:46,090
everything in containers so with a

00:05:42,910 --> 00:05:48,460
containerized environment we needed to

00:05:46,090 --> 00:05:50,800
be able to spin up virtual machines that

00:05:48,460 --> 00:05:55,150
would emanate temperamental environments

00:05:50,800 --> 00:05:57,370
to be able to run our tests how were we

00:05:55,150 --> 00:05:59,919
or how would we do that in the long run

00:05:57,370 --> 00:06:05,020
we decide to do some kind of proof of

00:05:59,919 --> 00:06:07,390
concept by testing this outside of the

00:06:05,020 --> 00:06:10,630
pipeline like we had a docker container

00:06:07,390 --> 00:06:13,390
and we said let's see if we can spin up

00:06:10,630 --> 00:06:15,460
a VM in tests and also like run the

00:06:13,390 --> 00:06:17,620
cluster in this and then we can bring

00:06:15,460 --> 00:06:19,690
that into the pipeline just to be able

00:06:17,620 --> 00:06:22,930
to prove that ok we can go further we

00:06:19,690 --> 00:06:25,570
using conquer CI for our test and that's

00:06:22,930 --> 00:06:27,610
one of the example case scenario that

00:06:25,570 --> 00:06:29,229
you might have another example might be

00:06:27,610 --> 00:06:30,970
that maybe your operating system runs

00:06:29,229 --> 00:06:33,160
everything in containers and you need a

00:06:30,970 --> 00:06:37,830
virtual version for example flat core

00:06:33,160 --> 00:06:42,729
Linux which is a friendly Fork of course

00:06:37,830 --> 00:06:46,300
so how can we do this I'm just going to

00:06:42,729 --> 00:06:50,020
show a brief walkthrough of how these

00:06:46,300 --> 00:06:53,919
can be done in docker and then we can

00:06:50,020 --> 00:06:59,710
see a short demo at the end alright this

00:06:53,919 --> 00:07:02,469
is a high-level architecture of what we

00:06:59,710 --> 00:07:04,960
are trying to achieve in the previous

00:07:02,469 --> 00:07:09,089
slides we had the docker container and

00:07:04,960 --> 00:07:11,800
then we had the virtual machine

00:07:09,089 --> 00:07:15,159
separately but in this case we have

00:07:11,800 --> 00:07:18,189
there everything sitting together on one

00:07:15,159 --> 00:07:22,740
infrastructure so the host OS contains

00:07:18,189 --> 00:07:25,539
KVM which is a module in kernel and it

00:07:22,740 --> 00:07:26,800
converts the host OS into a hypervisor

00:07:25,539 --> 00:07:29,080
so we have the three of them in one

00:07:26,800 --> 00:07:33,129
there and then we have the docker demon

00:07:29,080 --> 00:07:36,189
sitting on it and with the Tucker demon

00:07:33,129 --> 00:07:38,259
we have a container so I'm representing

00:07:36,189 --> 00:07:41,589
or I represented the container with

00:07:38,259 --> 00:07:45,129
dotted lines because it's going to share

00:07:41,589 --> 00:07:47,849
some processes and some devices from the

00:07:45,129 --> 00:07:50,830
host OS so it's kind of like it's

00:07:47,849 --> 00:07:52,509
holding the virtual machine but it's not

00:07:50,830 --> 00:07:54,669
fully containing it because there's

00:07:52,509 --> 00:07:57,729
still something's been passed across the

00:07:54,669 --> 00:07:59,020
PRD docker demon into the host OS I'm

00:07:57,729 --> 00:08:02,169
going to like show that in the next

00:07:59,020 --> 00:08:03,699
slides and in the container we have the

00:08:02,169 --> 00:08:05,199
virtual machine that has the guest

00:08:03,699 --> 00:08:12,639
operating system and then your

00:08:05,199 --> 00:08:17,379
applications inside so this is a sample

00:08:12,639 --> 00:08:21,219
taka file that's install the tools that

00:08:17,379 --> 00:08:23,529
we need it's based on Ubuntu so some

00:08:21,219 --> 00:08:25,689
packages might be different for other

00:08:23,529 --> 00:08:29,860
districts but this should give a general

00:08:25,689 --> 00:08:32,769
idea and for the packages we're

00:08:29,860 --> 00:08:35,110
installing a qm okay vmhd back and in

00:08:32,769 --> 00:08:38,229
this case libvirt

00:08:35,110 --> 00:08:43,510
is a toolkit for managing virtualization

00:08:38,229 --> 00:08:45,519
platforms Bridgette is provides a bridge

00:08:43,510 --> 00:08:51,100
from your network to the virtual

00:08:45,519 --> 00:08:54,440
machines then vagrant liberties

00:08:51,100 --> 00:09:00,830
if I can't plug in that adds lymphoid

00:08:54,440 --> 00:09:03,080
provider to figure on alright let's look

00:09:00,830 --> 00:09:06,710
at the contents of the startup the SH

00:09:03,080 --> 00:09:09,530
file and see what's in there in this

00:09:06,710 --> 00:09:12,110
case we need to ensure that the DEF KVM

00:09:09,530 --> 00:09:14,890
device that were passing into the world

00:09:12,110 --> 00:09:17,600
sharing from the host to the Container

00:09:14,890 --> 00:09:19,730
is giving the right group and in this

00:09:17,600 --> 00:09:22,970
case it has to be a VM to avoid problems

00:09:19,730 --> 00:09:25,010
when creating the virtual machine then

00:09:22,970 --> 00:09:27,430
we need to ensure that lip read and read

00:09:25,010 --> 00:09:31,310
lock demons are started and running

00:09:27,430 --> 00:09:35,000
rattler demon is used to manage logs

00:09:31,310 --> 00:09:40,280
from virtual machine console and we

00:09:35,000 --> 00:09:43,700
build the container and we will run the

00:09:40,280 --> 00:09:45,800
container so I'm going to explain how we

00:09:43,700 --> 00:09:48,350
can run the container with the privilege

00:09:45,800 --> 00:09:51,860
flag and also without the privilege flag

00:09:48,350 --> 00:09:55,460
and the first one I'll talk about is

00:09:51,860 --> 00:09:57,200
with the privilege flood so by default

00:09:55,460 --> 00:10:00,050
docker containers are on privileged

00:09:57,200 --> 00:10:04,070
which a lot of also know and they cannot

00:10:00,050 --> 00:10:06,920
do things like run docker demon inside

00:10:04,070 --> 00:10:08,990
of the container by default this doesn't

00:10:06,920 --> 00:10:11,600
happen this is because the container

00:10:08,990 --> 00:10:13,960
does not have access to or is not

00:10:11,600 --> 00:10:17,450
allowed to access any devices on the

00:10:13,960 --> 00:10:20,540
host machine but a privileged container

00:10:17,450 --> 00:10:23,900
is given access to all of the devices on

00:10:20,540 --> 00:10:25,940
the hosts and a bunch of configurations

00:10:23,900 --> 00:10:30,460
and stuff and it allows the container

00:10:25,940 --> 00:10:32,870
nearly as much as the same access as

00:10:30,460 --> 00:10:37,670
processes running on the host machine

00:10:32,870 --> 00:10:39,860
itself it's it's kind of like saying you

00:10:37,670 --> 00:10:41,270
have someone passing by telling the

00:10:39,860 --> 00:10:43,130
person you can come into my house and do

00:10:41,270 --> 00:10:45,860
whatever you want to do you have my bed

00:10:43,130 --> 00:10:47,540
you have my food just to us you want

00:10:45,860 --> 00:10:50,060
it's cool so the person has the same

00:10:47,540 --> 00:10:54,830
level of access as people living inside

00:10:50,060 --> 00:10:57,770
of your house then without privilege

00:10:54,830 --> 00:10:59,870
flogged you can explicitly states or

00:10:57,770 --> 00:11:04,720
limit access to some of the devices that

00:10:59,870 --> 00:11:07,279
you want it to use using a device blog

00:11:04,720 --> 00:11:12,649
in this case we are giving the container

00:11:07,279 --> 00:11:14,959
access to the KVM device and we're

00:11:12,649 --> 00:11:17,480
giving an access to the turn device um

00:11:14,959 --> 00:11:20,930
the turn device is a virtual kind of

00:11:17,480 --> 00:11:24,670
network interface that simulated network

00:11:20,930 --> 00:11:29,329
layer devices usually used with routing

00:11:24,670 --> 00:11:32,980
then C group is um is a Linux kernel

00:11:29,329 --> 00:11:36,050
feature that limits or accounts for and

00:11:32,980 --> 00:11:39,199
isolates the resource usage like the CPU

00:11:36,050 --> 00:11:43,819
memory and all of that for a collection

00:11:39,199 --> 00:11:46,519
of processes are in the net admin

00:11:43,819 --> 00:11:48,560
capability gives the container the

00:11:46,519 --> 00:11:51,470
ability to be able to perform network

00:11:48,560 --> 00:11:54,740
related operations then this is admin

00:11:51,470 --> 00:11:56,810
capability it allows the container to be

00:11:54,740 --> 00:12:00,319
able to perform a range of system

00:11:56,810 --> 00:12:06,800
administration operations like remount

00:12:00,319 --> 00:12:08,870
in the filesystem and without privilege

00:12:06,800 --> 00:12:11,089
flag we also need to remount the sis

00:12:08,870 --> 00:12:13,760
file system and practices from system

00:12:11,089 --> 00:12:15,829
because by default the read-only and the

00:12:13,760 --> 00:12:21,310
container we need to be able to rights

00:12:15,829 --> 00:12:24,050
to those file systems and I think that's

00:12:21,310 --> 00:12:26,360
pretty much some of the steps you can

00:12:24,050 --> 00:12:28,610
take and then you can do all of this and

00:12:26,360 --> 00:12:32,480
check tight support specialization and

00:12:28,610 --> 00:12:34,399
you can also spin up another VM in tv-ma

00:12:32,480 --> 00:12:40,029
one because it supports nested

00:12:34,399 --> 00:12:51,709
virtualization let's look at a short

00:12:40,029 --> 00:12:54,639
demo I will I will try to make it a

00:12:51,709 --> 00:12:54,639
little faster

00:12:59,620 --> 00:13:05,420
so it is yeah just trying to do

00:13:03,440 --> 00:13:07,940
something in an unprivileged container

00:13:05,420 --> 00:13:11,000
and people see some of the steps as to

00:13:07,940 --> 00:13:15,790
the reasons why we pre mount some of

00:13:11,000 --> 00:13:18,740
those file systems in the container and

00:13:15,790 --> 00:13:24,140
yet we can do virtualization in the

00:13:18,740 --> 00:13:29,690
container yeah get a vagrant file a

00:13:24,140 --> 00:13:34,570
night and try to bring up a virtual

00:13:29,690 --> 00:13:37,899
machine but we will encounter an error

00:13:34,570 --> 00:13:46,399
because it's trying to write into a

00:13:37,899 --> 00:13:48,010
read-only file system so let's see

00:13:46,399 --> 00:13:52,490
what's in there

00:13:48,010 --> 00:13:57,560
okay and let's remind it it's read-only

00:13:52,490 --> 00:14:03,470
sisyphus is read earlier and we rebound

00:13:57,560 --> 00:14:05,800
it and now it's readwrite so let's try

00:14:03,470 --> 00:14:10,550
to bring it up again

00:14:05,800 --> 00:14:21,589
and another it wants to write another

00:14:10,550 --> 00:14:38,029
read-only file system yeah it was right

00:14:21,589 --> 00:14:40,339
of our system and we remount it and this

00:14:38,029 --> 00:14:43,000
should work because we have everything

00:14:40,339 --> 00:14:43,000
in place now

00:14:50,090 --> 00:14:56,910
and this is the virtual machine in the

00:14:52,890 --> 00:15:05,760
container and we can just check for

00:14:56,910 --> 00:15:08,100
virtualization supporting it again so we

00:15:05,760 --> 00:15:11,070
can try to do something else but let's

00:15:08,100 --> 00:15:13,110
look at with the privileged container it

00:15:11,070 --> 00:15:16,010
doesn't have much problems this is just

00:15:13,110 --> 00:15:16,010
going to be faster

00:15:18,600 --> 00:15:21,720
[Music]

00:15:40,840 --> 00:16:04,389
[Music]

00:15:43,019 --> 00:16:14,730
and we're good so um that's the end of

00:16:04,389 --> 00:16:18,040
the short demo and move to the next part

00:16:14,730 --> 00:16:21,089
yep that is it if you have questions

00:16:18,040 --> 00:16:21,089
please ask

00:16:21,240 --> 00:16:28,090
[Applause]

00:16:29,790 --> 00:16:33,890

YouTube URL: https://www.youtube.com/watch?v=i2ynx8FdbjI


