Title: OSDC 2019: DevOps in a containerized world by Martin Alfke
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	DevOps describes the culture of communication and collaboration between IT Development and IT Operations departments. Usually this covers system setup, application deployment and all the surrounding tools like CI, metrics and alerting. A core element has always been IT automation using configuration management and CI/CD. But how do we do DevOps in a containerized world? Do we still need configuration management? Is there still collaboration possible? Or iare containers the DevOps killer? In my talk I draw a picture on responsibilities, does and donâ€™ts when it comes to developers and operations working within a container runtime platform. I want to show where we still have DevOps and where we pass responsibilities to a single department only and what kind of security borders we have at hand to work separately but with trust.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:15,440 --> 00:00:19,800
thank you and welcome

00:00:17,190 --> 00:00:21,869
I usually thought that the most

00:00:19,800 --> 00:00:24,330
difficult talks to give at conferences

00:00:21,869 --> 00:00:26,340
are either the talks after lunch when

00:00:24,330 --> 00:00:27,240
everybody is sitting there in some kind

00:00:26,340 --> 00:00:29,400
of suit coma

00:00:27,240 --> 00:00:31,320
or the very first one on the second day

00:00:29,400 --> 00:00:34,020
after the social event because usually

00:00:31,320 --> 00:00:36,800
it means people are not really attending

00:00:34,020 --> 00:00:38,969
carefully let's keep it in a simple way

00:00:36,800 --> 00:00:40,829
today I learned that it's also hard to

00:00:38,969 --> 00:00:42,600
give a talk after James because James

00:00:40,829 --> 00:00:44,879
really do does entertaining things

00:00:42,600 --> 00:00:46,649
around here and so you had the

00:00:44,879 --> 00:00:48,360
entertaining and fun part already so now

00:00:46,649 --> 00:00:50,610
it's me doing the boring stuff here so

00:00:48,360 --> 00:00:53,910
welcome to the boring stuff off yeah

00:00:50,610 --> 00:00:55,860
some recommendations some thoughts that

00:00:53,910 --> 00:00:58,829
I have on how to do DevOps in a

00:00:55,860 --> 00:01:02,670
containerized world one disclaimer

00:00:58,829 --> 00:01:05,189
upfront I will be very harsh in some of

00:01:02,670 --> 00:01:06,990
my comments and you might not be say no

00:01:05,189 --> 00:01:08,909
we're not comfortable was Martinez doing

00:01:06,990 --> 00:01:10,680
but what I want to achieve is that you

00:01:08,909 --> 00:01:12,270
start thinking on how to do this stuff

00:01:10,680 --> 00:01:15,570
and there is a reason why I put harsh

00:01:12,270 --> 00:01:17,790
words on it so Who am I my name is

00:01:15,570 --> 00:01:20,490
Martin I'm CEO and co-founder of example

00:01:17,790 --> 00:01:23,009
42 we do yes we still do lots of puppet

00:01:20,490 --> 00:01:25,920
development for customers we also help

00:01:23,009 --> 00:01:28,829
customers on their way to how to get to

00:01:25,920 --> 00:01:31,439
this DevOps thingy which tools to buy

00:01:28,829 --> 00:01:32,009
how do we build def of silos and stuff

00:01:31,439 --> 00:01:34,409
like that

00:01:32,009 --> 00:01:36,689
no never build silos we help companies

00:01:34,409 --> 00:01:38,909
finding solutions for implementing

00:01:36,689 --> 00:01:40,950
DevOps in their infrastructure we are

00:01:38,909 --> 00:01:43,439
huge fan of automation regardless what

00:01:40,950 --> 00:01:45,360
tool you use to do automation is a big

00:01:43,439 --> 00:01:49,020
thing is doing the automation at all

00:01:45,360 --> 00:01:51,780
that's the top thing you have to do so

00:01:49,020 --> 00:01:54,060
I'm going to talk about DevOps and I

00:01:51,780 --> 00:01:55,920
decided to have it in a three pattern

00:01:54,060 --> 00:01:58,020
that I say first what is it that we have

00:01:55,920 --> 00:02:00,750
in classical DevOps let's just call this

00:01:58,020 --> 00:02:03,450
heritage infrastructure for example so

00:02:00,750 --> 00:02:06,119
old legacy platforms maybe some

00:02:03,450 --> 00:02:08,580
customers will wonder what is old legacy

00:02:06,119 --> 00:02:12,450
heritage doesn't mean we still run our

00:02:08,580 --> 00:02:13,890
db2 instance on a spark based hardware

00:02:12,450 --> 00:02:16,380
for example

00:02:13,890 --> 00:02:18,870
so so some companies haven't adopted to

00:02:16,380 --> 00:02:21,540
this modern technologies of containers

00:02:18,870 --> 00:02:23,670
and container orchestration so first of

00:02:21,540 --> 00:02:26,040
all the classical DevOps then I will dig

00:02:23,670 --> 00:02:27,960
into DevOps and the container world and

00:02:26,040 --> 00:02:29,280
then DevOps in a container orchestration

00:02:27,960 --> 00:02:33,270
world and I will see what are the

00:02:29,280 --> 00:02:35,850
differences among there so the first

00:02:33,270 --> 00:02:39,000
thing is why did we have classical

00:02:35,850 --> 00:02:41,550
DevOps why do we have DevOps at all the

00:02:39,000 --> 00:02:44,100
basic thing was there was somehow a

00:02:41,550 --> 00:02:46,740
change and development from waterfall to

00:02:44,100 --> 00:02:48,780
agile development so waterfall usually

00:02:46,740 --> 00:02:50,790
means six months of planning six months

00:02:48,780 --> 00:02:52,380
of coding six months of releasing six

00:02:50,790 --> 00:02:53,970
months of fixing back and then you

00:02:52,380 --> 00:02:56,489
repeat the next two years and you have

00:02:53,970 --> 00:02:59,250
your new release ready companies learned

00:02:56,489 --> 00:03:01,500
that by doing it that way it is

00:02:59,250 --> 00:03:03,330
difficult to react fast and customer

00:03:01,500 --> 00:03:04,890
feedback for example the website is not

00:03:03,330 --> 00:03:06,540
that responsive it doesn't look that

00:03:04,890 --> 00:03:09,390
nice it's hard to read or stuff like

00:03:06,540 --> 00:03:12,330
that so development decided to go for

00:03:09,390 --> 00:03:14,850
more agile process saying we slice down

00:03:12,330 --> 00:03:17,970
the whole big thing we have to do into

00:03:14,850 --> 00:03:20,299
multiple single little components and we

00:03:17,970 --> 00:03:23,190
will release each of these little items

00:03:20,299 --> 00:03:24,959
well what was the issue by then ops were

00:03:23,190 --> 00:03:27,299
still used to having two years release

00:03:24,959 --> 00:03:29,970
cycles so they planned for new hardware

00:03:27,299 --> 00:03:32,160
for new virtual machines and everything

00:03:29,970 --> 00:03:35,430
took time this is the point where we

00:03:32,160 --> 00:03:37,650
said when we run release cycles faster

00:03:35,430 --> 00:03:39,600
we need a tighter collaboration between

00:03:37,650 --> 00:03:44,010
the application development and the

00:03:39,600 --> 00:03:46,170
operations team within that perspective

00:03:44,010 --> 00:03:48,750
we also change the mindset how we see

00:03:46,170 --> 00:03:50,640
other departments so in the past it was

00:03:48,750 --> 00:03:52,680
always a fighting there's development

00:03:50,640 --> 00:03:54,810
there's operations usually when you ask

00:03:52,680 --> 00:03:56,610
one about the other they will always

00:03:54,810 --> 00:03:58,620
tell you how these are nasty people that

00:03:56,610 --> 00:04:01,230
don't know how to do that job so the

00:03:58,620 --> 00:04:04,200
mindset shifted them saying everybody is

00:04:01,230 --> 00:04:05,700
a customer in a company so not only

00:04:04,200 --> 00:04:08,430
people from the outside paying the

00:04:05,700 --> 00:04:10,500
company but also inside the company we

00:04:08,430 --> 00:04:14,269
deal with customer press oriented

00:04:10,500 --> 00:04:17,640
development and setup of systems so

00:04:14,269 --> 00:04:20,250
product the product owners that do the

00:04:17,640 --> 00:04:21,600
yeah they have the vision on what is it

00:04:20,250 --> 00:04:24,599
that we want to have in the next release

00:04:21,600 --> 00:04:26,280
they are a customer to the development

00:04:24,599 --> 00:04:27,700
department so that's the customer that

00:04:26,280 --> 00:04:29,680
orders something and yet

00:04:27,700 --> 00:04:32,860
paid for it no at least you get paid for

00:04:29,680 --> 00:04:34,930
it as a developer the same is from ops

00:04:32,860 --> 00:04:36,790
prospective development is a customer so

00:04:34,930 --> 00:04:39,820
Development Department is asking for new

00:04:36,790 --> 00:04:42,130
hardware for new operating systems or

00:04:39,820 --> 00:04:44,500
newer releases of operating systems for

00:04:42,130 --> 00:04:47,230
newer Java versions whatsoever whatever

00:04:44,500 --> 00:04:49,480
they require to run their application so

00:04:47,230 --> 00:04:52,390
from ops perspective development is a

00:04:49,480 --> 00:04:54,190
customer for both they have the security

00:04:52,390 --> 00:04:55,690
department saying ops says we need a

00:04:54,190 --> 00:04:57,490
security scan of the platform

00:04:55,690 --> 00:05:00,640
development says we need to ensure that

00:04:57,490 --> 00:05:03,040
the planning of our new application that

00:05:00,640 --> 00:05:05,770
we already take care on security so

00:05:03,040 --> 00:05:08,350
security is a customer for both that

00:05:05,770 --> 00:05:10,480
makes it a little bit more easy to deal

00:05:08,350 --> 00:05:12,550
with each other because usually you will

00:05:10,480 --> 00:05:14,290
never fight a customer you will never

00:05:12,550 --> 00:05:16,750
blame a customer and you will never

00:05:14,290 --> 00:05:19,390
insult a customer that makes it from a

00:05:16,750 --> 00:05:24,340
cultural perspective better to deal with

00:05:19,390 --> 00:05:27,880
other departments what I really refer to

00:05:24,340 --> 00:05:31,410
as DevOps is the devops kata so who of

00:05:27,880 --> 00:05:33,940
you has done or knows about martial arts

00:05:31,410 --> 00:05:36,790
almost a couple of people

00:05:33,940 --> 00:05:39,970
okay so martial arts is something like

00:05:36,790 --> 00:05:41,650
not a Udo and usually you go to a dojo

00:05:39,970 --> 00:05:44,200
this is the training center you enter

00:05:41,650 --> 00:05:47,440
there and then you do your kata the kata

00:05:44,200 --> 00:05:50,430
is the remnant repeating and improvement

00:05:47,440 --> 00:05:53,830
of predefined movements in martial arts

00:05:50,430 --> 00:05:56,110
within DevOps we have a same pattern we

00:05:53,830 --> 00:05:58,120
have to repeat the stuff that we did we

00:05:56,110 --> 00:06:00,010
have to review it and we have to improve

00:05:58,120 --> 00:06:02,440
it permanently improving it that's the

00:06:00,010 --> 00:06:05,350
reason why I like DevOps being described

00:06:02,440 --> 00:06:07,330
as a kata the problem is in English the

00:06:05,350 --> 00:06:08,290
word culture doesn't start with K that

00:06:07,330 --> 00:06:10,090
makes it a little bit difficult

00:06:08,290 --> 00:06:11,590
explaining that to English native

00:06:10,090 --> 00:06:14,290
speaker in Germany you spell it with a

00:06:11,590 --> 00:06:16,840
capital K so the first thing was in

00:06:14,290 --> 00:06:19,330
culture within DevOps is a culture a

00:06:16,840 --> 00:06:21,850
change a mind shift change how to deal

00:06:19,330 --> 00:06:25,330
with other departments how to deal with

00:06:21,850 --> 00:06:28,140
other technologies the next thing which

00:06:25,330 --> 00:06:30,610
is highly important is doing automation

00:06:28,140 --> 00:06:32,740
whichever tool you have found is useful

00:06:30,610 --> 00:06:34,780
for you and your team members where ever

00:06:32,740 --> 00:06:37,090
do you have your level of expertise

00:06:34,780 --> 00:06:38,620
available use that tool where you are

00:06:37,090 --> 00:06:40,810
comfortable with and where you have

00:06:38,620 --> 00:06:44,110
expertise with

00:06:40,810 --> 00:06:46,840
there's another avoiding that describes

00:06:44,110 --> 00:06:49,410
never upset camps see AMS they mean to

00:06:46,840 --> 00:06:51,760
cultural automation metrics and sharing

00:06:49,410 --> 00:06:54,430
metrics and sharing is something that I

00:06:51,760 --> 00:06:56,440
put together into transparency so

00:06:54,430 --> 00:06:59,950
transparency is everything that you can

00:06:56,440 --> 00:07:02,770
visualize and you pass on these data to

00:06:59,950 --> 00:07:04,780
whoever needs the data finance wants the

00:07:02,770 --> 00:07:07,030
data to see how many transaction did we

00:07:04,780 --> 00:07:09,580
have in the last 24 hours so just

00:07:07,030 --> 00:07:11,919
provide data for them and do that in a

00:07:09,580 --> 00:07:16,360
transparent pattern ops wants to know

00:07:11,919 --> 00:07:19,240
about cluster usage network network

00:07:16,360 --> 00:07:21,490
usage so just provide the data and use

00:07:19,240 --> 00:07:24,130
them so this is what I put together

00:07:21,490 --> 00:07:26,860
metrics and sharing into the concept of

00:07:24,130 --> 00:07:28,240
transparency and based on top of that

00:07:26,860 --> 00:07:31,270
this is what I'm missing when people

00:07:28,240 --> 00:07:34,120
talk about DevOps being CMS is the

00:07:31,270 --> 00:07:36,850
agility so everybody works in an agile

00:07:34,120 --> 00:07:40,090
pattern don't do huge deployments don't

00:07:36,850 --> 00:07:42,310
do long-term planning's cut down the big

00:07:40,090 --> 00:07:45,220
thing you want to do into single little

00:07:42,310 --> 00:07:46,330
steps that you want to achieve and this

00:07:45,220 --> 00:07:48,460
is the focus

00:07:46,330 --> 00:07:50,500
I will now dig through the whole talk

00:07:48,460 --> 00:07:52,120
that I always refer to do we have

00:07:50,500 --> 00:07:53,740
something like kata also when it comes

00:07:52,120 --> 00:07:59,320
to containers and container

00:07:53,740 --> 00:08:02,140
orchestration when we do standard DevOps

00:07:59,320 --> 00:08:04,690
we usually see a pattern that people say

00:08:02,140 --> 00:08:07,539
we need a shared tooling and vironment

00:08:04,690 --> 00:08:09,970
so you don't want to have multiple and

00:08:07,539 --> 00:08:12,220
maybe different version control systems

00:08:09,970 --> 00:08:14,500
around you don't want to have hundreds

00:08:12,220 --> 00:08:16,390
of systems doing metrics one development

00:08:14,500 --> 00:08:18,669
department using Prometheus and others

00:08:16,390 --> 00:08:20,860
using elasticsearch you want to have one

00:08:18,669 --> 00:08:22,900
single tool that allows you to share the

00:08:20,860 --> 00:08:25,750
data that allows you to collaborate and

00:08:22,900 --> 00:08:28,000
it allows you to even support new

00:08:25,750 --> 00:08:29,890
employees by just going to somebody in

00:08:28,000 --> 00:08:31,270
the department even a developer when you

00:08:29,890 --> 00:08:33,640
have a new system engineer and

00:08:31,270 --> 00:08:38,080
explaining him how this good thing is

00:08:33,640 --> 00:08:40,479
working the same next thing you want to

00:08:38,080 --> 00:08:42,760
have regardless whether you're really a

00:08:40,479 --> 00:08:45,160
hardcore ops person or whether you are a

00:08:42,760 --> 00:08:48,580
developer you want to have a CI CD

00:08:45,160 --> 00:08:51,030
system we now do automation and usually

00:08:48,580 --> 00:08:54,400
that means we run infrastructure as code

00:08:51,030 --> 00:08:56,170
everything that is code must be tested

00:08:54,400 --> 00:08:58,300
we're somehow and this is where the CI

00:08:56,170 --> 00:09:03,580
system in combination with git comes in

00:08:58,300 --> 00:09:05,560
place we also have not only shared

00:09:03,580 --> 00:09:07,600
toolings and the classical DevOps

00:09:05,560 --> 00:09:10,030
approach we have shared responsibilities

00:09:07,600 --> 00:09:12,610
so maybe the hardware is not yet shared

00:09:10,030 --> 00:09:14,800
so that's basically if you have a data

00:09:12,610 --> 00:09:16,600
center somewhere while we're in Berlin

00:09:14,800 --> 00:09:18,160
here think about having a data center in

00:09:16,600 --> 00:09:20,140
life that you will not travel every day

00:09:18,160 --> 00:09:22,030
to Leipzig to do something a data center

00:09:20,140 --> 00:09:25,030
you will have remotes hands that does

00:09:22,030 --> 00:09:26,770
the real dealing with the hardware but

00:09:25,030 --> 00:09:28,780
already starting on the operating system

00:09:26,770 --> 00:09:30,340
level and maybe some fine-tuning of the

00:09:28,780 --> 00:09:32,020
operating system level is something

00:09:30,340 --> 00:09:34,330
where we collaborate with the

00:09:32,020 --> 00:09:36,790
application developers identifying what

00:09:34,330 --> 00:09:39,160
kind of city else settings do we need

00:09:36,790 --> 00:09:44,410
for this application to work properly

00:09:39,160 --> 00:09:46,150
what kind of sa Linux can we do on a

00:09:44,410 --> 00:09:47,980
system so that the application works

00:09:46,150 --> 00:09:49,630
properly and of course it's the

00:09:47,980 --> 00:09:51,010
application because usually the

00:09:49,630 --> 00:09:53,980
application gets developed by the

00:09:51,010 --> 00:09:55,990
developer and is run by the ops people

00:09:53,980 --> 00:09:58,060
but usually when the application stops

00:09:55,990 --> 00:09:59,650
working they need a developer to debug

00:09:58,060 --> 00:10:01,360
what's wrong with the application so

00:09:59,650 --> 00:10:06,420
that's what I call the shared

00:10:01,360 --> 00:10:09,040
responsibility when it comes to tooling

00:10:06,420 --> 00:10:11,380
and there's companies around and say

00:10:09,040 --> 00:10:13,690
yeah you can buy our DevOps tool chain

00:10:11,380 --> 00:10:16,240
Oh funny what's that never heard of a

00:10:13,690 --> 00:10:19,150
DevOps tool chain yeah that's something

00:10:16,240 --> 00:10:21,280
like version control that's something

00:10:19,150 --> 00:10:23,980
like automated virtual machine

00:10:21,280 --> 00:10:25,030
management whether you do VMware libvirt

00:10:23,980 --> 00:10:26,650
by yourself

00:10:25,030 --> 00:10:28,960
that's this out of scope it's just the

00:10:26,650 --> 00:10:31,900
VM management solution just try to find

00:10:28,960 --> 00:10:34,270
a solution that is automatable you do my

00:10:31,900 --> 00:10:36,760
two configuration management saying I

00:10:34,270 --> 00:10:40,200
have a base OS system that basil s

00:10:36,760 --> 00:10:42,310
system must be adopted to our security

00:10:40,200 --> 00:10:44,230
security regulations

00:10:42,310 --> 00:10:46,630
it must be configured according to the

00:10:44,230 --> 00:10:49,090
application you want to have something

00:10:46,630 --> 00:10:50,740
like secrets management you don't want

00:10:49,090 --> 00:10:53,650
to have some passwords floating around

00:10:50,740 --> 00:10:56,380
or lying underneath someone's keyboard

00:10:53,650 --> 00:10:56,800
or pinned to a monitor or something like

00:10:56,380 --> 00:10:58,690
that

00:10:56,800 --> 00:11:01,840
you want to have somewhere a place where

00:10:58,690 --> 00:11:04,060
you can securely store data inside

00:11:01,840 --> 00:11:07,630
especially when it comes to passwords

00:11:04,060 --> 00:11:08,499
certificates or tokens and last but

00:11:07,630 --> 00:11:10,599
least and this is

00:11:08,499 --> 00:11:15,489
not a misspelling you want to have

00:11:10,599 --> 00:11:17,919
something like CI CD CD yci CD CD so

00:11:15,489 --> 00:11:18,639
everybody is referring to CI CD that's

00:11:17,919 --> 00:11:20,919
not enough

00:11:18,639 --> 00:11:22,539
so CI is continuous integration which

00:11:20,919 --> 00:11:25,029
means we test the stuff that we have

00:11:22,539 --> 00:11:27,749
built that we have developed we build it

00:11:25,029 --> 00:11:30,969
and we test it the next CD is the

00:11:27,749 --> 00:11:33,669
continuous delivery which means this

00:11:30,969 --> 00:11:35,889
when we have built our artifact we just

00:11:33,669 --> 00:11:38,949
packages and we stage it somehow on a

00:11:35,889 --> 00:11:41,049
repository or an artifact system but

00:11:38,949 --> 00:11:42,519
just making it available will not deploy

00:11:41,049 --> 00:11:44,889
it in production and that's the last

00:11:42,519 --> 00:11:47,619
thing that's the last CD that's the

00:11:44,889 --> 00:11:50,019
continuous delivery of that delivered

00:11:47,619 --> 00:11:53,349
the de Canas deployment of the delivery

00:11:50,019 --> 00:11:55,119
into production systems usually people

00:11:53,349 --> 00:11:58,149
don't do this because they are afraid of

00:11:55,119 --> 00:12:00,249
breaking their platform automatically we

00:11:58,149 --> 00:12:01,959
need to find ways to identify whether

00:12:00,249 --> 00:12:08,319
the platform with a new release is still

00:12:01,959 --> 00:12:08,799
healthy or not the problem the learning

00:12:08,319 --> 00:12:12,459
curve

00:12:08,799 --> 00:12:14,919
oh how do I do we had this in the

00:12:12,459 --> 00:12:17,229
morning do i do trunk based development

00:12:14,919 --> 00:12:19,359
how many commits am i allowed to have on

00:12:17,229 --> 00:12:22,089
a feature branch my perspective you may

00:12:19,359 --> 00:12:24,309
have one only on the future branch you

00:12:22,089 --> 00:12:27,279
have to learn rebasing squashing you

00:12:24,309 --> 00:12:29,259
have to deal with merge conflicts you

00:12:27,279 --> 00:12:31,119
have to deal with multiple things which

00:12:29,259 --> 00:12:34,149
are completely new to people who never

00:12:31,119 --> 00:12:35,739
worked with get before and be sure there

00:12:34,149 --> 00:12:38,709
are many many people who have no

00:12:35,739 --> 00:12:42,369
experience with git who here says he's

00:12:38,709 --> 00:12:43,929
good at git that's just a couple of

00:12:42,369 --> 00:12:46,629
people as I mentioned so everybody was

00:12:43,929 --> 00:12:48,339
not good at get might somehow be in a

00:12:46,629 --> 00:12:51,220
situation where he says now it would be

00:12:48,339 --> 00:12:53,589
nice to be good at get so they look for

00:12:51,220 --> 00:12:55,359
maybe the gate handbook they look for

00:12:53,589 --> 00:12:57,039
other resources on the internet they

00:12:55,359 --> 00:13:00,849
google their problem and hope to find a

00:12:57,039 --> 00:13:03,129
solution the big thing that also changes

00:13:00,849 --> 00:13:05,049
when it comes to automation is that we

00:13:03,129 --> 00:13:08,409
stop doing things manually on a platform

00:13:05,049 --> 00:13:10,419
but instead talk to AP is AP is which

00:13:08,409 --> 00:13:12,639
give us functionality what is it that we

00:13:10,419 --> 00:13:15,099
want to achieve on a platform but

00:13:12,639 --> 00:13:17,319
dealing with AP is is uncommon as these

00:13:15,099 --> 00:13:19,329
two ops people so they have to take care

00:13:17,319 --> 00:13:21,549
about okay how do I get a token do I

00:13:19,329 --> 00:13:22,360
have to show a certificate which rights

00:13:21,549 --> 00:13:23,980
do I have with

00:13:22,360 --> 00:13:29,470
their token and a certificate on their

00:13:23,980 --> 00:13:32,200
specific API so it's a parody see

00:13:29,470 --> 00:13:36,149
platforms and how to work with platforms

00:13:32,200 --> 00:13:36,149
and how to do your daily business job

00:13:37,589 --> 00:13:42,399
what else can we say to heritage

00:13:41,019 --> 00:13:46,480
standard DevOps

00:13:42,399 --> 00:13:49,240
in classical environments we see it more

00:13:46,480 --> 00:13:51,040
and more companies adopting at least

00:13:49,240 --> 00:13:53,649
some companies already understood that

00:13:51,040 --> 00:13:55,360
they don't hire DevOps engineers that

00:13:53,649 --> 00:13:57,490
they don't build the DevOps silo that

00:13:55,360 --> 00:14:00,750
they don't build DevOps teams but

00:13:57,490 --> 00:14:04,690
understand ok it's a cultural change

00:14:00,750 --> 00:14:07,000
sometimes company fear that they bring

00:14:04,690 --> 00:14:09,010
this change to their teams because I say

00:14:07,000 --> 00:14:10,510
oh if we tell people they now have to

00:14:09,010 --> 00:14:12,399
work in a different way they have to

00:14:10,510 --> 00:14:15,399
think in a different way they will

00:14:12,399 --> 00:14:17,980
refuse they won't adopt and instead they

00:14:15,399 --> 00:14:19,540
will just well either leave the job but

00:14:17,980 --> 00:14:21,610
we need them because they know about the

00:14:19,540 --> 00:14:24,430
platform or they will refuse to

00:14:21,610 --> 00:14:26,410
collaborate some companies we've seen

00:14:24,430 --> 00:14:28,269
doing it in a way that they have founded

00:14:26,410 --> 00:14:30,760
startup companies where they can work in

00:14:28,269 --> 00:14:33,040
an agile devops style pattern and still

00:14:30,760 --> 00:14:35,850
do the old what is there a waterfall

00:14:33,040 --> 00:14:39,220
stuff inside their own existing company

00:14:35,850 --> 00:14:42,640
it's based on known principles so people

00:14:39,220 --> 00:14:47,230
know about this tooling and yeah we see

00:14:42,640 --> 00:14:49,620
it more and more adopting so when it

00:14:47,230 --> 00:14:52,329
comes to DevOps one thing changes

00:14:49,620 --> 00:14:54,130
dramatically not for the application

00:14:52,329 --> 00:14:55,839
developers application developers are

00:14:54,130 --> 00:14:58,120
still there to a developer application

00:14:55,839 --> 00:15:01,240
they have the field of expertise in

00:14:58,120 --> 00:15:02,529
either Ruby Java go long whatever

00:15:01,240 --> 00:15:04,510
language they have they have their

00:15:02,529 --> 00:15:06,160
expertise in that area they know how to

00:15:04,510 --> 00:15:09,600
code they know how to do backends they

00:15:06,160 --> 00:15:12,459
know how to do front ends but it differs

00:15:09,600 --> 00:15:14,949
completely from an ops perspective in

00:15:12,459 --> 00:15:17,320
the future you will not have system

00:15:14,949 --> 00:15:20,290
administrators anymore system

00:15:17,320 --> 00:15:22,660
administrators login into systems change

00:15:20,290 --> 00:15:25,720
something analyze something and log out

00:15:22,660 --> 00:15:28,209
again they do things manually when we

00:15:25,720 --> 00:15:30,370
start doing automation I prefer starting

00:15:28,209 --> 00:15:32,850
talking about infrastructure developers

00:15:30,370 --> 00:15:36,590
these are the people that provide

00:15:32,850 --> 00:15:38,420
interfaces to api's that automate

00:15:36,590 --> 00:15:40,580
the platform the people that do the

00:15:38,420 --> 00:15:42,890
configuration management the people that

00:15:40,580 --> 00:15:45,740
somehow built the let's say the secrets

00:15:42,890 --> 00:15:48,590
solution that you have around so they

00:15:45,740 --> 00:15:49,850
built developing the infrastructure and

00:15:48,590 --> 00:15:51,770
the next thing of course you want to

00:15:49,850 --> 00:15:54,530
have in a team as a security developer

00:15:51,770 --> 00:15:57,020
so a security person who knows about

00:15:54,530 --> 00:15:59,060
software development who knows about OS

00:15:57,020 --> 00:16:01,070
management and who knows about who s

00:15:59,060 --> 00:16:05,390
patching for example and about operating

00:16:01,070 --> 00:16:07,430
system security I suppose the security

00:16:05,390 --> 00:16:09,530
developer is the person that your are

00:16:07,430 --> 00:16:11,630
hard looking to find because some

00:16:09,530 --> 00:16:13,370
security people know about security but

00:16:11,630 --> 00:16:17,060
not about development and nor about

00:16:13,370 --> 00:16:19,280
operating systems okay so this is the

00:16:17,060 --> 00:16:20,750
classical DevOps this is something we

00:16:19,280 --> 00:16:24,550
already do for quite some time

00:16:20,750 --> 00:16:26,960
when did the term type of DevOps arise

00:16:24,550 --> 00:16:30,860
give me give me a guess who's who's

00:16:26,960 --> 00:16:33,730
guessing it's more than five years more

00:16:30,860 --> 00:16:36,680
than eight years more than ten years

00:16:33,730 --> 00:16:38,480
more than 20 years it's around about

00:16:36,680 --> 00:16:41,090
since ten years approximately when the

00:16:38,480 --> 00:16:42,080
term first showed up and I suppose it

00:16:41,090 --> 00:16:44,240
was somewhere in Ghent

00:16:42,080 --> 00:16:46,670
but I'm you're nodding okay it wasn't

00:16:44,240 --> 00:16:49,010
yet so that's already established and

00:16:46,670 --> 00:16:51,410
people are doing it and now we have this

00:16:49,010 --> 00:16:55,010
new thing where people start thinking

00:16:51,410 --> 00:16:57,680
about oh it's so hard to do the stuff on

00:16:55,010 --> 00:16:59,990
a real operating system can't we isolate

00:16:57,680 --> 00:17:03,770
things and this is the point where we

00:16:59,990 --> 00:17:05,990
come to containers so within containers

00:17:03,770 --> 00:17:09,770
we can say applicate due to the

00:17:05,990 --> 00:17:12,620
collaboration of developers application

00:17:09,770 --> 00:17:14,810
developers and developers infrastructure

00:17:12,620 --> 00:17:17,300
developers the application developers

00:17:14,810 --> 00:17:20,630
learned how hard it is to maintain a

00:17:17,300 --> 00:17:23,890
system in a proper state excluding its

00:17:20,630 --> 00:17:26,330
application so they made a decision on

00:17:23,890 --> 00:17:28,820
isolating the operating system from the

00:17:26,330 --> 00:17:30,740
application and placing the application

00:17:28,820 --> 00:17:32,660
just in somewhat what we might call a

00:17:30,740 --> 00:17:35,830
change route with additional things

00:17:32,660 --> 00:17:38,360
around and this is what a container is

00:17:35,830 --> 00:17:41,710
what they want to achieve is separation

00:17:38,360 --> 00:17:44,360
of concerns that they say developers

00:17:41,710 --> 00:17:46,250
application developers they develop the

00:17:44,360 --> 00:17:48,410
application and the application is

00:17:46,250 --> 00:17:50,060
stacked inside the container and you

00:17:48,410 --> 00:17:50,460
just have to spin up the container and

00:17:50,060 --> 00:17:52,830
the

00:17:50,460 --> 00:17:54,420
is working so they don't have to deal

00:17:52,830 --> 00:17:56,520
with anything underneath which is

00:17:54,420 --> 00:17:59,010
somehow an operating system or container

00:17:56,520 --> 00:18:01,530
runtime engine this is done by the

00:17:59,010 --> 00:18:03,480
infrastructure developer they build the

00:18:01,530 --> 00:18:06,150
container platform where you are able to

00:18:03,480 --> 00:18:11,310
run containers on host containers inside

00:18:06,150 --> 00:18:13,170
like a registry the thing is what

00:18:11,310 --> 00:18:15,720
application developers need to learn is

00:18:13,170 --> 00:18:18,210
they need to adopt to this modern

00:18:15,720 --> 00:18:20,390
technology they have to build into their

00:18:18,210 --> 00:18:23,250
application something like health checks

00:18:20,390 --> 00:18:26,220
metrics I want to know how long did this

00:18:23,250 --> 00:18:27,720
request take from coming inside until

00:18:26,220 --> 00:18:29,940
the other system has answered the

00:18:27,720 --> 00:18:31,590
request I want to see when I do an

00:18:29,940 --> 00:18:33,930
upgrade on a container do I

00:18:31,590 --> 00:18:35,880
somewhere have a timing regression in my

00:18:33,930 --> 00:18:38,070
application that's this of high

00:18:35,880 --> 00:18:39,660
importance no because you can't look

00:18:38,070 --> 00:18:41,160
really inside the container because

00:18:39,660 --> 00:18:43,530
usually you don't have a shell in the

00:18:41,160 --> 00:18:46,200
container so you need that the container

00:18:43,530 --> 00:18:52,190
pushes information out of the container

00:18:46,200 --> 00:18:53,880
which we usually call metrics well

00:18:52,190 --> 00:18:56,130
containers have the benefit that

00:18:53,880 --> 00:18:58,020
developers say it's so super easy to

00:18:56,130 --> 00:19:00,120
package our application it's so super

00:18:58,020 --> 00:19:03,330
easy to stage it's super easy to build a

00:19:00,120 --> 00:19:04,910
new release which fixes about yeah we

00:19:03,330 --> 00:19:07,260
want to have that on a system

00:19:04,910 --> 00:19:09,300
infrastructure developers now struggle

00:19:07,260 --> 00:19:10,980
ok but how do we run containers I

00:19:09,300 --> 00:19:12,720
usually make a joke that the developers

00:19:10,980 --> 00:19:14,880
is showing up with this laptop and tells

00:19:12,720 --> 00:19:16,680
us see my application is working on my

00:19:14,880 --> 00:19:18,360
laptop and the big question is how do we

00:19:16,680 --> 00:19:23,180
get that depth up into the data center

00:19:18,360 --> 00:19:25,020
and how do we scale that laptop so

00:19:23,180 --> 00:19:26,640
containers need somehow an

00:19:25,020 --> 00:19:27,930
infrastructure so when we have an

00:19:26,640 --> 00:19:29,430
infrastructure we still need

00:19:27,930 --> 00:19:31,110
infrastructure development which means

00:19:29,430 --> 00:19:33,990
we still have yet the need for

00:19:31,110 --> 00:19:35,340
infrastructure developers when you're

00:19:33,990 --> 00:19:38,220
doing containers you will immediately

00:19:35,340 --> 00:19:41,370
run that Software Defined Networking is

00:19:38,220 --> 00:19:43,290
used everywhere so as the N as we call

00:19:41,370 --> 00:19:46,320
it Software Defined Networking is a must

00:19:43,290 --> 00:19:48,990
you must deal with the concept of what

00:19:46,320 --> 00:19:51,630
is it that does mean you have to get rid

00:19:48,990 --> 00:19:53,610
of the sinking and classical systems

00:19:51,630 --> 00:19:55,260
that have an interface and an IP address

00:19:53,610 --> 00:19:57,960
and maybe you do bonding on the

00:19:55,260 --> 00:20:00,510
interfaces maybe you have virtual

00:19:57,960 --> 00:20:02,160
interfaces start thinking in these terms

00:20:00,510 --> 00:20:04,279
start thinking and Software Defined

00:20:02,160 --> 00:20:06,419
Networking terminology

00:20:04,279 --> 00:20:09,480
and what would you also see as

00:20:06,419 --> 00:20:11,730
containers needs orchestration so like

00:20:09,480 --> 00:20:14,759
maybe we already did in the past how do

00:20:11,730 --> 00:20:18,149
we do an upgrade on H a cluster well

00:20:14,759 --> 00:20:20,369
usually we update the passive node first

00:20:18,149 --> 00:20:22,499
then we switch over from the active to

00:20:20,369 --> 00:20:24,570
the passive node so the formerly passive

00:20:22,499 --> 00:20:26,519
node now is active we check whether

00:20:24,570 --> 00:20:29,039
everything is still working and then we

00:20:26,519 --> 00:20:30,929
can update the first cluster part with

00:20:29,039 --> 00:20:32,519
containers you don't deal inside

00:20:30,929 --> 00:20:34,200
containers but you maybe want to run

00:20:32,519 --> 00:20:36,840
containers maybe you want to run them

00:20:34,200 --> 00:20:39,059
multiple times because you say for load

00:20:36,840 --> 00:20:40,769
reasons and high availability reasons I

00:20:39,059 --> 00:20:43,169
want to have multiple containers placed

00:20:40,769 --> 00:20:46,320
behind some kind of load balancer

00:20:43,169 --> 00:20:48,269
technology so containers need an

00:20:46,320 --> 00:20:53,399
orchestration so that you know how many

00:20:48,269 --> 00:20:55,499
of these systems do I want to run the

00:20:53,399 --> 00:20:57,299
next thing I'm interested what is what

00:20:55,499 --> 00:20:59,580
is this easy thing that doing in that

00:20:57,299 --> 00:21:02,129
case is you're no longer monitoring

00:20:59,580 --> 00:21:05,429
systems you're monitoring services

00:21:02,129 --> 00:21:07,799
you're no longer interested whether one

00:21:05,429 --> 00:21:10,590
single component one single container

00:21:07,799 --> 00:21:12,059
out of ten that do the same is no longer

00:21:10,590 --> 00:21:13,710
working properly you want to know about

00:21:12,059 --> 00:21:15,179
that is no longer working properly so

00:21:13,710 --> 00:21:17,549
you can clear it down and spin it up

00:21:15,179 --> 00:21:19,590
again but you're no longer interested in

00:21:17,549 --> 00:21:20,999
in at least from the application

00:21:19,590 --> 00:21:22,889
perspective what is the hardware

00:21:20,999 --> 00:21:24,899
underneath doing that's something where

00:21:22,889 --> 00:21:27,989
the infrastructure developer want to

00:21:24,899 --> 00:21:30,239
know about how much CPU usage do I have

00:21:27,989 --> 00:21:33,659
how much saturation on the network do I

00:21:30,239 --> 00:21:35,820
have what you definitely want is

00:21:33,659 --> 00:21:38,190
something like a discovery so you want

00:21:35,820 --> 00:21:41,159
to identify how many containers are

00:21:38,190 --> 00:21:44,039
running on my dock addy instances we

00:21:41,159 --> 00:21:47,039
introduced docker for CI CDE at a

00:21:44,039 --> 00:21:49,769
customer in Berlin and first we asked

00:21:47,039 --> 00:21:52,230
security is it okay to have in the CI CD

00:21:49,769 --> 00:21:54,090
platform a docker daemon running as I

00:21:52,230 --> 00:21:56,039
mentioned us yes but don't go out of the

00:21:54,090 --> 00:21:57,509
Internet built-in internal registry and

00:21:56,039 --> 00:22:00,269
then you are allowed to run it and

00:21:57,509 --> 00:22:02,460
please run them unprivileged we had the

00:22:00,269 --> 00:22:04,919
issue with SSH and logging in as root so

00:22:02,460 --> 00:22:06,749
we were okay as long it is only on CI

00:22:04,919 --> 00:22:09,779
system then it's okay to run even

00:22:06,749 --> 00:22:11,999
unprivileged container but one only and

00:22:09,779 --> 00:22:14,669
not multiple ones so we had the okay

00:22:11,999 --> 00:22:17,320
from security and we were dealing then

00:22:14,669 --> 00:22:19,660
playing doing CI CD was docker so

00:22:17,320 --> 00:22:22,180
using an instance to spin up an instance

00:22:19,660 --> 00:22:24,850
as a docker container test the coat of

00:22:22,180 --> 00:22:26,770
our configuration management and in case

00:22:24,850 --> 00:22:28,120
that is working successfully or even if

00:22:26,770 --> 00:22:30,160
it's broken tear down the container

00:22:28,120 --> 00:22:33,100
again and deliver the result back to the

00:22:30,160 --> 00:22:36,940
merge request it took us around about

00:22:33,100 --> 00:22:39,220
one week to identify oh the registry

00:22:36,940 --> 00:22:41,650
service has issue with storage because

00:22:39,220 --> 00:22:43,480
developers were learning hey we have dr.

00:22:41,650 --> 00:22:45,820
Dee's around so we can spin up

00:22:43,480 --> 00:22:47,260
containers and developers were somehow

00:22:45,820 --> 00:22:48,760
saying that's cool that's nice let's

00:22:47,260 --> 00:22:50,950
build containers and they were building

00:22:48,760 --> 00:22:53,470
containers over and over again gigabytes

00:22:50,950 --> 00:22:55,600
of containers grow grew into registry

00:22:53,470 --> 00:22:57,880
expect something like that that will

00:22:55,600 --> 00:22:59,710
happen that when people recognize they

00:22:57,880 --> 00:23:01,990
have the possibility of using the tool

00:22:59,710 --> 00:23:03,340
they will use the tool and when they use

00:23:01,990 --> 00:23:05,890
the tool you still want to have an

00:23:03,340 --> 00:23:07,810
somehow an insight on what is it that

00:23:05,890 --> 00:23:10,330
I'm running now at the moment you have

00:23:07,810 --> 00:23:12,190
no idea because your ops is no longer or

00:23:10,330 --> 00:23:13,900
infrastructure development is no longer

00:23:12,190 --> 00:23:15,100
responsible for spinning up containers

00:23:13,900 --> 00:23:17,950
this is the end of application

00:23:15,100 --> 00:23:22,090
developers but you want to get an idea

00:23:17,950 --> 00:23:23,980
what's up in my platform I already

00:23:22,090 --> 00:23:24,490
mentioned the metrics and when saying in

00:23:23,980 --> 00:23:26,350
depth

00:23:24,490 --> 00:23:29,830
I mean system metrics and application

00:23:26,350 --> 00:23:31,780
metrics and even business logic metrics

00:23:29,830 --> 00:23:35,820
inside the application so that is what I

00:23:31,780 --> 00:23:35,820
mean was in depth metrics in this case

00:23:36,420 --> 00:23:42,430
what else do we have so the

00:23:39,760 --> 00:23:44,890
infrastructure is completely new someone

00:23:42,430 --> 00:23:46,540
who has never worked with Sdn and never

00:23:44,890 --> 00:23:48,040
worked with change routes is always

00:23:46,540 --> 00:23:49,750
thinking what the hell is going wrong

00:23:48,040 --> 00:23:52,180
here why do I have this weird looking

00:23:49,750 --> 00:23:54,820
process list when I am and I'm on the

00:23:52,180 --> 00:23:56,860
system so it's a new infrastructure and

00:23:54,820 --> 00:23:59,470
people have to adopt and have to learn

00:23:56,860 --> 00:24:03,010
about this new infrastructure you have

00:23:59,470 --> 00:24:04,750
to completely reconsider how you think

00:24:03,010 --> 00:24:10,000
about infrastructure that you're running

00:24:04,750 --> 00:24:11,860
at all you need to learn the new

00:24:10,000 --> 00:24:14,290
concepts which means when you start

00:24:11,860 --> 00:24:17,500
introducing somehow container technology

00:24:14,290 --> 00:24:19,960
into your company be sure that you need

00:24:17,500 --> 00:24:21,880
the time understanding and learning the

00:24:19,960 --> 00:24:23,860
technology underneath otherwise it would

00:24:21,880 --> 00:24:26,410
make no sense to run this afterwards

00:24:23,860 --> 00:24:29,290
somehow even in testing it would make no

00:24:26,410 --> 00:24:30,450
sense what we usually see is companies

00:24:29,290 --> 00:24:32,880
saying

00:24:30,450 --> 00:24:36,330
Department saying oh we have built a POC

00:24:32,880 --> 00:24:39,660
I usually refer to that as a proof of

00:24:36,330 --> 00:24:41,940
concept so we are able to have a system

00:24:39,660 --> 00:24:44,610
with somehow a container runtime engine

00:24:41,940 --> 00:24:47,400
and we are able to run docker containers

00:24:44,610 --> 00:24:50,610
or containers inside yeah but how did

00:24:47,400 --> 00:24:52,500
you build the system oh we logged in and

00:24:50,610 --> 00:24:55,830
changed the configuration file restart

00:24:52,500 --> 00:24:58,320
the service and we changed some

00:24:55,830 --> 00:25:00,030
parameters for docker itself we added

00:24:58,320 --> 00:25:01,860
some parameters to this city hell we

00:25:00,030 --> 00:25:03,780
disabled as a linux procore this was too

00:25:01,860 --> 00:25:05,640
hard to understand okay

00:25:03,780 --> 00:25:07,290
this still is a POC but it's not a proof

00:25:05,640 --> 00:25:09,570
of concept it's just a pile of crap

00:25:07,290 --> 00:25:11,640
because you have built it because you

00:25:09,570 --> 00:25:13,260
have built it in a manual pattern so you

00:25:11,640 --> 00:25:15,090
can say it's a POC

00:25:13,260 --> 00:25:17,460
when you can destroy the POC and

00:25:15,090 --> 00:25:19,200
automatically redeploy it again then

00:25:17,460 --> 00:25:21,930
that's a proof of concept that you can

00:25:19,200 --> 00:25:26,790
really build it maintain it and easily

00:25:21,930 --> 00:25:31,590
re instance e8 from scratch what are the

00:25:26,790 --> 00:25:36,330
benefits who's thinking about or already

00:25:31,590 --> 00:25:38,430
is in cloud that's only a very very few

00:25:36,330 --> 00:25:42,090
people okay let's ask the other way

00:25:38,430 --> 00:25:44,220
around who's considering not even doing

00:25:42,090 --> 00:25:48,720
but maybe considering moving parts of

00:25:44,220 --> 00:25:50,790
the application out into cloud not

00:25:48,720 --> 00:25:52,500
really more people okay think about a

00:25:50,790 --> 00:25:54,720
company that considers bringing

00:25:52,500 --> 00:25:58,710
applications into the cloud for example

00:25:54,720 --> 00:26:00,480
you are a company being in Frankfurt and

00:25:58,710 --> 00:26:03,210
you have your data center in Frankfurt

00:26:00,480 --> 00:26:05,070
and you have customers in Sydney so

00:26:03,210 --> 00:26:06,930
should your customer always connect to

00:26:05,070 --> 00:26:09,030
your Frankfurt based servers why not

00:26:06,930 --> 00:26:11,640
bring this front-end application near to

00:26:09,030 --> 00:26:13,320
the customer saying I'm spinning up a

00:26:11,640 --> 00:26:16,020
system in that region using cloud

00:26:13,320 --> 00:26:18,570
services the benefit when you do those

00:26:16,020 --> 00:26:20,370
containers you're very near to cloud

00:26:18,570 --> 00:26:22,350
based technology and to cloud

00:26:20,370 --> 00:26:24,600
understanding how things are working so

00:26:22,350 --> 00:26:26,370
it's more easy for you to migrate to any

00:26:24,600 --> 00:26:28,320
kind of cloud provider afterwards even

00:26:26,370 --> 00:26:31,460
if you're not some hosted kubernetes

00:26:28,320 --> 00:26:33,900
stuff just doing some cloud stuff at all

00:26:31,460 --> 00:26:36,390
the next thing is when there's issues

00:26:33,900 --> 00:26:39,210
with the application so you have latency

00:26:36,390 --> 00:26:40,539
in the application you get HTTP errors

00:26:39,210 --> 00:26:43,239
you get

00:26:40,539 --> 00:26:45,369
wrong SSL certificate error stuff like

00:26:43,239 --> 00:26:47,229
that then the application developers

00:26:45,369 --> 00:26:49,059
know for sure this must be somewhere

00:26:47,229 --> 00:26:51,789
inside the application not in the

00:26:49,059 --> 00:26:53,829
underlying operating system the same is

00:26:51,789 --> 00:26:55,629
for the infrastructure developer where

00:26:53,829 --> 00:26:57,549
the opportunity saying this is not

00:26:55,629 --> 00:26:59,409
related to the application this is fully

00:26:57,549 --> 00:27:01,959
related to the operating system some

00:26:59,409 --> 00:27:04,659
upgrades went wrong so it's more easy to

00:27:01,959 --> 00:27:06,879
identify where to dig for the problem

00:27:04,659 --> 00:27:08,199
due to these separations of concerns

00:27:06,879 --> 00:27:10,329
that we have infra develop

00:27:08,199 --> 00:27:12,039
infrastructure developer taking care on

00:27:10,329 --> 00:27:13,869
the infrastructure and application

00:27:12,039 --> 00:27:19,569
developer taking care on the application

00:27:13,869 --> 00:27:21,969
level one more one more is just people

00:27:19,569 --> 00:27:24,549
have to use it so when you do containers

00:27:21,969 --> 00:27:26,229
you can limit the container within its

00:27:24,549 --> 00:27:28,479
capabilities you can set kernel

00:27:26,229 --> 00:27:30,609
capabilities you can limit it in terms

00:27:28,479 --> 00:27:31,359
of hardware usage so you can place C

00:27:30,609 --> 00:27:33,879
groups on it

00:27:31,359 --> 00:27:35,979
how many CPUs how many gigabytes of RAM

00:27:33,879 --> 00:27:37,269
if you don't do that every container

00:27:35,979 --> 00:27:41,379
says oh that's nice

00:27:37,269 --> 00:27:43,839
64 cores 128 gigs of ram I take as much

00:27:41,379 --> 00:27:46,749
as I can then your whole system

00:27:43,839 --> 00:27:49,809
saturates and you will get underneath OS

00:27:46,749 --> 00:27:54,069
out of memory arrows and it will just ya

00:27:49,809 --> 00:27:55,989
teardown processes in a weird order and

00:27:54,069 --> 00:27:57,639
what we usually see in classical

00:27:55,989 --> 00:27:59,379
platforms the first process that gets

00:27:57,639 --> 00:28:01,329
here teardown and stopped by the kernel

00:27:59,379 --> 00:28:02,859
is of course the SSH daemon so you can't

00:28:01,329 --> 00:28:05,169
log in and see what's happening what's

00:28:02,859 --> 00:28:06,579
wrong when you limit the container and

00:28:05,169 --> 00:28:08,109
the container needs more memory it's

00:28:06,579 --> 00:28:11,769
just a container dying it's not your

00:28:08,109 --> 00:28:14,139
system dying so take care that people

00:28:11,769 --> 00:28:17,609
set policies on containers it's a real

00:28:14,139 --> 00:28:17,609
real benefit that you have in there

00:28:17,999 --> 00:28:23,349
secrets secrets are something were

00:28:20,679 --> 00:28:25,269
partly infrastructure developed

00:28:23,349 --> 00:28:26,649
developers say we need secrets

00:28:25,269 --> 00:28:28,599
management we want to have something

00:28:26,649 --> 00:28:30,729
like within the secrets management we

00:28:28,599 --> 00:28:32,969
want to have the certificates we want to

00:28:30,729 --> 00:28:36,249
have some tokens and passwords inside

00:28:32,969 --> 00:28:38,529
the application developers also need

00:28:36,249 --> 00:28:40,839
secret management for the same solution

00:28:38,529 --> 00:28:42,909
so for placing certificates passwords

00:28:40,839 --> 00:28:45,489
tokens inside so this is something that

00:28:42,909 --> 00:28:47,199
you can solve say this is a shared usage

00:28:45,489 --> 00:28:48,940
system so it's built by the

00:28:47,199 --> 00:28:52,419
infrastructure team but is used by

00:28:48,940 --> 00:28:54,430
everybody the application developer by

00:28:52,419 --> 00:28:57,220
themselves they only need their C

00:28:54,430 --> 00:29:00,100
cdcd system and then it access somehow

00:28:57,220 --> 00:29:04,330
to the container runtime engine API

00:29:00,100 --> 00:29:06,550
please buy a API the application

00:29:04,330 --> 00:29:08,400
developers will take care on building

00:29:06,550 --> 00:29:10,510
new releases deploying new releases

00:29:08,400 --> 00:29:12,520
reverting if new early releases are

00:29:10,510 --> 00:29:15,220
broken try to do that in an automated

00:29:12,520 --> 00:29:17,440
pattern think about health checks that

00:29:15,220 --> 00:29:20,590
you build into the application and using

00:29:17,440 --> 00:29:23,920
proper API calls infrastructure

00:29:20,590 --> 00:29:26,770
developer take care on scaling so how do

00:29:23,920 --> 00:29:29,410
we provide storage how do we provide

00:29:26,770 --> 00:29:30,910
performance storage to the customer

00:29:29,410 --> 00:29:34,600
which is the application development

00:29:30,910 --> 00:29:36,820
team how do we do Network this is

00:29:34,600 --> 00:29:38,800
something that are completely unrelated

00:29:36,820 --> 00:29:43,900
to the application development was this

00:29:38,800 --> 00:29:46,720
work done by the infrastructure team on

00:29:43,900 --> 00:29:48,790
the other hand application developers

00:29:46,720 --> 00:29:51,160
should mention within their containers

00:29:48,790 --> 00:29:53,680
about kernel capabilities and seat

00:29:51,160 --> 00:29:55,900
groups so they should be aware that they

00:29:53,680 --> 00:29:58,750
know when we build a container we must

00:29:55,900 --> 00:30:01,720
provide information on minimal uses of

00:29:58,750 --> 00:30:04,300
CPU minimal amount of RAM maximum amount

00:30:01,720 --> 00:30:06,640
of CPU maximum amount of RAM so that

00:30:04,300 --> 00:30:08,200
they are totally sure their container is

00:30:06,640 --> 00:30:13,270
working within these Hardware

00:30:08,200 --> 00:30:15,640
restrictions in the past what is it that

00:30:13,270 --> 00:30:17,980
we had development is throwing a new

00:30:15,640 --> 00:30:20,500
release over the fence while the release

00:30:17,980 --> 00:30:23,170
is in mid air developer shouts over to

00:30:20,500 --> 00:30:25,630
ops saying catch it take care it's a

00:30:23,170 --> 00:30:27,940
fragile they do that why are

00:30:25,630 --> 00:30:30,100
broadcasting and ops is surrounded by

00:30:27,940 --> 00:30:32,290
that fence and now everybody from ops is

00:30:30,100 --> 00:30:34,390
looking uphill where does the release

00:30:32,290 --> 00:30:36,220
fall down so we can catch it because we

00:30:34,390 --> 00:30:38,050
have to take care of reg right then we

00:30:36,220 --> 00:30:39,940
bring it into the platform and within

00:30:38,050 --> 00:30:41,830
eight hours afterwards which is of

00:30:39,940 --> 00:30:43,450
course it's Friday evening by then we

00:30:41,830 --> 00:30:45,490
get our first alerts by saying

00:30:43,450 --> 00:30:47,800
something's wrong on the platform so

00:30:45,490 --> 00:30:50,770
when you do the modern way of dealing

00:30:47,800 --> 00:30:53,230
with containers let application

00:30:50,770 --> 00:30:54,880
developers also deal with issues in the

00:30:53,230 --> 00:30:57,340
application because they know how to

00:30:54,880 --> 00:31:00,580
revert they know their code we added so

00:30:57,340 --> 00:31:02,740
often that we that we as ops people got

00:31:00,580 --> 00:31:04,720
the we're on call we received a call

00:31:02,740 --> 00:31:06,850
from the platform something is horrible

00:31:04,720 --> 00:31:08,050
broken and afterwards we needed to call

00:31:06,850 --> 00:31:10,240
developers anyway

00:31:08,050 --> 00:31:12,970
because we said this it's inside this

00:31:10,240 --> 00:31:16,510
weird PHP Perl code we can't read that

00:31:12,970 --> 00:31:18,580
so please fix the back for us so why

00:31:16,510 --> 00:31:21,100
should we have the this communication

00:31:18,580 --> 00:31:22,540
proxy an ops person being on call when

00:31:21,100 --> 00:31:28,390
the developer can do the on call

00:31:22,540 --> 00:31:30,280
directly by himself take care of tooling

00:31:28,390 --> 00:31:33,340
decisions what we usually learned at

00:31:30,280 --> 00:31:35,770
customers is there are three people no

00:31:33,340 --> 00:31:38,260
there are three teams was at least three

00:31:35,770 --> 00:31:40,930
dependent different opinions on how to

00:31:38,260 --> 00:31:43,270
use a specific tool so the first team

00:31:40,930 --> 00:31:45,640
says we have to use git for version

00:31:43,270 --> 00:31:48,190
control the second team says no no no no

00:31:45,640 --> 00:31:49,930
no we never did get and you know get as

00:31:48,190 --> 00:31:51,850
hard when it comes to access right let's

00:31:49,930 --> 00:31:53,980
do that with SVN we can make it on a

00:31:51,850 --> 00:31:56,050
directory basis providing access to it

00:31:53,980 --> 00:31:59,380
and the next one is saying I have heard

00:31:56,050 --> 00:32:01,420
of neither can't we do without at all so

00:31:59,380 --> 00:32:04,540
what I usually recommend is then each

00:32:01,420 --> 00:32:06,460
team must mention of another product

00:32:04,540 --> 00:32:07,900
three things why to use the other

00:32:06,460 --> 00:32:10,240
product they are not allowed to talk

00:32:07,900 --> 00:32:11,970
about their preferred solution but they

00:32:10,240 --> 00:32:15,280
should argue about the other preferred

00:32:11,970 --> 00:32:17,860
solution preferred by other teams it

00:32:15,280 --> 00:32:19,720
makes it easier to identify where do

00:32:17,860 --> 00:32:21,820
people have issues with understanding a

00:32:19,720 --> 00:32:24,430
technology with understanding and some

00:32:21,820 --> 00:32:26,860
other supportive application like a git

00:32:24,430 --> 00:32:31,260
lab or github enterprise or whatever you

00:32:26,860 --> 00:32:34,300
want automate your CI cdcd solution

00:32:31,260 --> 00:32:36,400
automation does not mean I have a CI

00:32:34,300 --> 00:32:39,490
cdcd and now I'm clicking in an

00:32:36,400 --> 00:32:40,090
interface to get my pipelines that's the

00:32:39,490 --> 00:32:42,490
wrong way

00:32:40,090 --> 00:32:45,100
let's not automation that's manual work

00:32:42,490 --> 00:32:47,410
we had to talk by today manual work

00:32:45,100 --> 00:32:49,780
automatically means it's a bug so

00:32:47,410 --> 00:32:52,360
instead find a solution that allows you

00:32:49,780 --> 00:32:54,640
to bring define your pipelines in a text

00:32:52,360 --> 00:32:56,860
file next to the code base so it's

00:32:54,640 --> 00:32:58,450
everything in one place we sometimes

00:32:56,860 --> 00:33:00,610
have discussions to even put the

00:32:58,450 --> 00:33:02,290
documentation of the application into

00:33:00,610 --> 00:33:04,300
the repository where the application is

00:33:02,290 --> 00:33:06,070
hosted including the pipeline so

00:33:04,300 --> 00:33:06,850
everything is in one place is just a

00:33:06,070 --> 00:33:09,670
text file

00:33:06,850 --> 00:33:11,770
hopefully it's not XML I don't like XML

00:33:09,670 --> 00:33:13,630
that's all I have to say about XML and

00:33:11,770 --> 00:33:15,460
hopefully it's just something readable

00:33:13,630 --> 00:33:17,320
and understandable and I know how my

00:33:15,460 --> 00:33:18,460
pipeline is built when I change the text

00:33:17,320 --> 00:33:20,950
file my pipeline will change

00:33:18,460 --> 00:33:21,820
automatically this is what I understand

00:33:20,950 --> 00:33:28,989
when it comes to

00:33:21,820 --> 00:33:32,739
automated CIA cdcd systems for ii-in ssh

00:33:28,989 --> 00:33:35,799
- no for en deux ssh and some commands

00:33:32,739 --> 00:33:39,429
that way yeah yeah hands of hands of

00:33:35,799 --> 00:33:41,409
platforms I usually tend to turn to name

00:33:39,429 --> 00:33:44,080
hands of platforms and explain that to

00:33:41,409 --> 00:33:47,590
people afterwards by saying when you log

00:33:44,080 --> 00:33:50,259
in into any system via SSH I will shop

00:33:47,590 --> 00:33:53,099
off your hands and that's hands off by

00:33:50,259 --> 00:33:55,899
then so you can't connect to it anymore

00:33:53,099 --> 00:33:57,909
no I won't chop off hands that's ok but

00:33:55,899 --> 00:34:00,489
consider your platform being something

00:33:57,909 --> 00:34:02,200
fragile when you log in it's broken when

00:34:00,489 --> 00:34:04,299
your login when you've logged in ok

00:34:02,200 --> 00:34:05,889
maybe with your own user without sudo

00:34:04,299 --> 00:34:08,290
permissions that's a correct you might

00:34:05,889 --> 00:34:11,200
have some less permissions to a cat's

00:34:08,290 --> 00:34:13,750
permission to view some files at that

00:34:11,200 --> 00:34:17,079
time where you do some sudo commands I

00:34:13,750 --> 00:34:19,480
expect that system to be undefined State

00:34:17,079 --> 00:34:21,730
and optimally you should tear it down

00:34:19,480 --> 00:34:24,010
and spin it up again because it's in an

00:34:21,730 --> 00:34:26,049
undefined state when you do really

00:34:24,010 --> 00:34:27,790
hands-off platforms you're sure the

00:34:26,049 --> 00:34:29,919
system is in a way how it is built

00:34:27,790 --> 00:34:31,480
automatically so the container got built

00:34:29,919 --> 00:34:33,220
and the containers just started and you

00:34:31,480 --> 00:34:34,839
don't login into the container and do

00:34:33,220 --> 00:34:39,159
some configuration afterwards in the

00:34:34,839 --> 00:34:41,230
container after it has started learn

00:34:39,159 --> 00:34:43,480
about api's learn about how to deal with

00:34:41,230 --> 00:34:46,750
api's hopefully is REST API s and what

00:34:43,480 --> 00:34:49,990
soap api's learn about api is known

00:34:46,750 --> 00:34:52,359
about how to secure ap is securing AP is

00:34:49,990 --> 00:34:54,190
with certificates certificates have a

00:34:52,359 --> 00:34:56,649
have a names a common name usually

00:34:54,190 --> 00:34:58,720
located to it based on these common

00:34:56,649 --> 00:35:01,000
names you can provide different access

00:34:58,720 --> 00:35:03,160
right levels so saying there is a

00:35:01,000 --> 00:35:04,900
certificate that just can just read some

00:35:03,160 --> 00:35:06,700
information and there's a certificate

00:35:04,900 --> 00:35:08,319
that it can even change information so

00:35:06,700 --> 00:35:10,900
am I allowed to do a get or a post

00:35:08,319 --> 00:35:13,270
request so it's so super easy to do that

00:35:10,900 --> 00:35:16,030
with REST API is based on certificates

00:35:13,270 --> 00:35:17,829
so this is your trust every certificate

00:35:16,030 --> 00:35:19,630
somehow got compromised revoke the

00:35:17,829 --> 00:35:23,619
certificate and make a new one and then

00:35:19,630 --> 00:35:25,809
you're good to go again as I already

00:35:23,619 --> 00:35:29,380
mentioned containers allow separation of

00:35:25,809 --> 00:35:32,680
concerns when building containers please

00:35:29,380 --> 00:35:34,839
go security first it's hard to implement

00:35:32,680 --> 00:35:35,650
and any kind of platform a security

00:35:34,839 --> 00:35:37,840
afterwards

00:35:35,650 --> 00:35:41,440
seen it so many times developers

00:35:37,840 --> 00:35:45,040
developing ops people deploying people

00:35:41,440 --> 00:35:47,230
QA ler do tests on the platform and then

00:35:45,040 --> 00:35:51,340
somehow security shows up and says no no

00:35:47,230 --> 00:35:53,770
no no we have cross-site vulnerabilities

00:35:51,340 --> 00:35:56,650
we have different other things there's

00:35:53,770 --> 00:35:59,020
there's some OS information and a header

00:35:56,650 --> 00:36:01,090
from your web server you have to fix

00:35:59,020 --> 00:36:03,130
that so of course we have other issues

00:36:01,090 --> 00:36:04,900
with fixing security because we first

00:36:03,130 --> 00:36:06,610
need to fix the application then we can

00:36:04,900 --> 00:36:08,470
fix the security but when you build it

00:36:06,610 --> 00:36:11,170
right from scratch that you consider the

00:36:08,470 --> 00:36:15,100
security first perspective then you're

00:36:11,170 --> 00:36:17,200
on a safe way and please when you do now

00:36:15,100 --> 00:36:19,990
as a docker related when you do a docker

00:36:17,200 --> 00:36:22,780
daemon don't give access to the docker

00:36:19,990 --> 00:36:25,180
CLI giving access to the docker CLI is

00:36:22,780 --> 00:36:27,310
like giving root SSH access to your

00:36:25,180 --> 00:36:29,380
platform you can do anything you can

00:36:27,310 --> 00:36:31,510
jump in a container you can move things

00:36:29,380 --> 00:36:34,870
in the container you can remove things

00:36:31,510 --> 00:36:37,180
you can somehow rename containers when

00:36:34,870 --> 00:36:39,430
you don't do trusted registry so I'm

00:36:37,180 --> 00:36:41,170
just downloading some Bitcoin miner and

00:36:39,430 --> 00:36:44,470
I will deploy it into our internal

00:36:41,170 --> 00:36:45,850
registry as our front-end server and yes

00:36:44,470 --> 00:36:48,220
of course the front-end application is

00:36:45,850 --> 00:36:50,080
also inside Bitcoin miner is now also

00:36:48,220 --> 00:36:54,520
running in production that's cool that's

00:36:50,080 --> 00:36:57,370
nice I like that and again we talked

00:36:54,520 --> 00:36:59,530
about cutter so when we do containers we

00:36:57,370 --> 00:37:03,070
still need the cultural change how to

00:36:59,530 --> 00:37:05,050
view platforms how to see platforms when

00:37:03,070 --> 00:37:07,810
it comes to containers there's even more

00:37:05,050 --> 00:37:10,060
need to automate the stuff don't do

00:37:07,810 --> 00:37:13,090
something manually on containers that's

00:37:10,060 --> 00:37:15,250
a complete anti-pattern you still want

00:37:13,090 --> 00:37:17,170
to have transparency and you want to

00:37:15,250 --> 00:37:20,110
deliver more transparency you want to

00:37:17,170 --> 00:37:23,170
have business values business

00:37:20,110 --> 00:37:25,810
information from your application into

00:37:23,170 --> 00:37:27,820
your time serious data so business can

00:37:25,810 --> 00:37:30,490
also reuse these information and

00:37:27,820 --> 00:37:32,500
visualize their important parts and of

00:37:30,490 --> 00:37:34,090
course you still do everything a jille

00:37:32,500 --> 00:37:36,250
and now you're also building your

00:37:34,090 --> 00:37:38,380
infrastructure in an agile pattern so

00:37:36,250 --> 00:37:40,810
the infrastructure developer also say we

00:37:38,380 --> 00:37:42,730
want to build a huge cluster ok let's

00:37:40,810 --> 00:37:44,500
start with the first node let's start

00:37:42,730 --> 00:37:47,590
with the first container and then you

00:37:44,500 --> 00:37:49,980
grow when over time and improve your

00:37:47,590 --> 00:37:52,600
platform

00:37:49,980 --> 00:37:55,810
so this brings us now to the latest

00:37:52,600 --> 00:37:58,600
thing which is container orchestration

00:37:55,810 --> 00:38:00,100
so what's the container orchestration

00:37:58,600 --> 00:38:03,070
the most simple one you can think of

00:38:00,100 --> 00:38:05,530
when you have docker is swamp it just

00:38:03,070 --> 00:38:06,910
means that you have multiple nodes where

00:38:05,530 --> 00:38:08,860
your containers can run on when you

00:38:06,910 --> 00:38:10,480
don't do that and that one node hosts

00:38:08,860 --> 00:38:12,220
all of your containers and within one

00:38:10,480 --> 00:38:14,170
node goes down all your containers are

00:38:12,220 --> 00:38:16,270
gone so instead you want to have some

00:38:14,170 --> 00:38:18,310
tooling at hand that allows you to spin

00:38:16,270 --> 00:38:20,770
up multiple containers on multiple

00:38:18,310 --> 00:38:24,700
container runtime engines throughout

00:38:20,770 --> 00:38:29,560
your infrastructure and this is managed

00:38:24,700 --> 00:38:31,870
by an container orchestration engine so

00:38:29,560 --> 00:38:33,430
what is it now that we have to do from

00:38:31,870 --> 00:38:36,130
an infrastructure developer perspective

00:38:33,430 --> 00:38:38,680
we have to maintain the clusters so it's

00:38:36,130 --> 00:38:41,050
no longer one standalone container

00:38:38,680 --> 00:38:43,540
runtime engine system now it's multiple

00:38:41,050 --> 00:38:45,700
systems of these we take care on the

00:38:43,540 --> 00:38:48,070
hardware or the virtual machines in case

00:38:45,700 --> 00:38:49,960
that we still run on premise we take

00:38:48,070 --> 00:38:52,270
care on the network so the Software

00:38:49,960 --> 00:38:54,670
Defined Networking we provide storage

00:38:52,270 --> 00:38:56,410
whether we use safe yesterday there was

00:38:54,670 --> 00:38:58,330
a talk about self and also something

00:38:56,410 --> 00:39:00,040
about cluster and what happened was

00:38:58,330 --> 00:39:02,200
luster what would not happen with self

00:39:00,040 --> 00:39:05,320
so find a solution for you that is

00:39:02,200 --> 00:39:07,560
working properly on based on on storage

00:39:05,320 --> 00:39:10,240
you will take care on ingress and egress

00:39:07,560 --> 00:39:14,080
who of you knows what ingress and egress

00:39:10,240 --> 00:39:16,300
is okay so that's common wording ingress

00:39:14,080 --> 00:39:18,910
is the traffic that gets inside somehow

00:39:16,300 --> 00:39:21,240
in a container and if it's a inbound

00:39:18,910 --> 00:39:23,320
traffic egress is the outbound traffic

00:39:21,240 --> 00:39:25,810
so you want to ensure when you have a

00:39:23,320 --> 00:39:28,450
container running it's on a definitely

00:39:25,810 --> 00:39:30,490
it's on an RFC 1918 network so private

00:39:28,450 --> 00:39:32,560
IP address not accessible from outside

00:39:30,490 --> 00:39:34,930
you have to build something that gives

00:39:32,560 --> 00:39:38,700
you an outside component access to your

00:39:34,930 --> 00:39:41,530
internal running docker system container

00:39:38,700 --> 00:39:43,870
what else will infra development to do

00:39:41,530 --> 00:39:46,510
infra development will take care that

00:39:43,870 --> 00:39:49,480
development teams receive tokens to

00:39:46,510 --> 00:39:52,090
access their namespaces maybe even

00:39:49,480 --> 00:39:55,780
namespaces which already have some cane

00:39:52,090 --> 00:39:58,570
set some text set some constraint set so

00:39:55,780 --> 00:40:01,030
for the testing department you may not

00:39:58,570 --> 00:40:02,500
exceed a certain amount of CPU you may

00:40:01,030 --> 00:40:04,210
not exceed a certain amount

00:40:02,500 --> 00:40:07,210
Ram you may not exceed a certain amount

00:40:04,210 --> 00:40:10,270
of storage just as an example and then

00:40:07,210 --> 00:40:13,690
you provide tokens so that the CIA CD

00:40:10,270 --> 00:40:17,890
system CIA CD CD system can access the

00:40:13,690 --> 00:40:19,780
namespaces properly application

00:40:17,890 --> 00:40:20,320
developer nothing handles nothing

00:40:19,780 --> 00:40:22,000
changes

00:40:20,320 --> 00:40:23,470
they still handle their application they

00:40:22,000 --> 00:40:25,150
built their application they deploy

00:40:23,470 --> 00:40:27,940
their application application have

00:40:25,150 --> 00:40:30,040
health checks inside their namespace

00:40:27,940 --> 00:40:31,990
they provide a service specifying what

00:40:30,040 --> 00:40:34,240
is the URL to check if the container is

00:40:31,990 --> 00:40:36,220
working or not and based on these

00:40:34,240 --> 00:40:38,770
results they might even build something

00:40:36,220 --> 00:40:40,750
like an automated revert process inside

00:40:38,770 --> 00:40:42,760
and they say the new application doesn't

00:40:40,750 --> 00:40:43,270
work as expected the health well is not

00:40:42,760 --> 00:40:45,580
working

00:40:43,270 --> 00:40:49,930
so let's automatically rotate back to

00:40:45,580 --> 00:40:51,420
the older version yeah they will set the

00:40:49,930 --> 00:40:53,680
hardware limits on the containers

00:40:51,420 --> 00:40:58,750
secrets is still something that you can

00:40:53,680 --> 00:41:00,610
share within this infrastructure so what

00:40:58,750 --> 00:41:03,010
is it container orchestration allows you

00:41:00,610 --> 00:41:05,470
to run multiple instances of processes

00:41:03,010 --> 00:41:07,780
amongst multiple servers so it's first

00:41:05,470 --> 00:41:09,730
done for high availability and of course

00:41:07,780 --> 00:41:11,770
for high performance that you can place

00:41:09,730 --> 00:41:13,930
multiple containers on multiple systems

00:41:11,770 --> 00:41:17,110
for load balancing purposes behind a

00:41:13,930 --> 00:41:19,360
load balancer what we had with docker

00:41:17,110 --> 00:41:21,460
CLI is now something we have when it

00:41:19,360 --> 00:41:24,460
comes to kubernetes at least with cube

00:41:21,460 --> 00:41:27,190
CTL and cube ADM just restrict access to

00:41:24,460 --> 00:41:30,160
these CLI tools because this is even

00:41:27,190 --> 00:41:33,190
weird this is like root SSH clusters

00:41:30,160 --> 00:41:34,840
like cluster SSH so that you have access

00:41:33,190 --> 00:41:37,960
to all of your cluster nodes within a

00:41:34,840 --> 00:41:39,880
single command instead at least with

00:41:37,960 --> 00:41:41,830
kubernetes you want to do role based

00:41:39,880 --> 00:41:44,200
access control you want to have groups

00:41:41,830 --> 00:41:46,780
inside that and you want to have provide

00:41:44,200 --> 00:41:49,690
tokens for each of your users so that

00:41:46,780 --> 00:41:51,400
the user is not really a person that is

00:41:49,690 --> 00:41:53,980
working with a code but it's an

00:41:51,400 --> 00:41:56,500
application user from your CI cdcd

00:41:53,980 --> 00:41:58,180
pipeline system so that this system is

00:41:56,500 --> 00:42:01,090
responsible for talking to your

00:41:58,180 --> 00:42:03,640
orchestration engine and again the same

00:42:01,090 --> 00:42:05,770
pattern when you have a rebalancing in

00:42:03,640 --> 00:42:07,390
such a platform so for example that

00:42:05,770 --> 00:42:09,610
server over there needs a hardware

00:42:07,390 --> 00:42:12,430
maintenance because it has a broken

00:42:09,610 --> 00:42:14,350
power unit you want to first remove all

00:42:12,430 --> 00:42:15,640
instances off from that server to

00:42:14,350 --> 00:42:17,770
another server

00:42:15,640 --> 00:42:20,410
not something like my life migration you

00:42:17,770 --> 00:42:21,730
will do in a VM instead the containers

00:42:20,410 --> 00:42:23,800
will be stopped over there and

00:42:21,730 --> 00:42:26,020
rescheduled somewhere else in my cluster

00:42:23,800 --> 00:42:29,050
so then I have a free node and I can do

00:42:26,020 --> 00:42:31,690
my work on and that's even worse because

00:42:29,050 --> 00:42:34,720
now things are happening automatically

00:42:31,690 --> 00:42:37,330
so tearing systems are starting systems

00:42:34,720 --> 00:42:39,130
are tearing systems down and you can't

00:42:37,330 --> 00:42:41,350
work that fast to deal with that

00:42:39,130 --> 00:42:47,140
automation in a manual way so please

00:42:41,350 --> 00:42:49,840
hands-off platforms the big question is

00:42:47,140 --> 00:42:53,110
how much ops would you still like to do

00:42:49,840 --> 00:42:57,960
at all so there are concepts like

00:42:53,110 --> 00:43:00,700
service up slurs brainless useless

00:42:57,960 --> 00:43:03,190
painless to be some positive wording on

00:43:00,700 --> 00:43:05,110
it so there there are companies that

00:43:03,190 --> 00:43:07,330
provide you with what you need to run

00:43:05,110 --> 00:43:09,430
infrastructure so infrastructure as a

00:43:07,330 --> 00:43:11,820
service so you can just say ok I'm

00:43:09,430 --> 00:43:14,920
paying that company over there to be my

00:43:11,820 --> 00:43:17,320
preferred vendor of infrastructure and I

00:43:14,920 --> 00:43:19,690
will just use their API to spin up

00:43:17,320 --> 00:43:21,400
systems configure them accordingly when

00:43:19,690 --> 00:43:24,010
it comes to containers you might get to

00:43:21,400 --> 00:43:25,780
a hostage kubernetes platform and just

00:43:24,010 --> 00:43:28,780
say I'm spinning up the container the

00:43:25,780 --> 00:43:31,120
cube of cubes ETL master and then I have

00:43:28,780 --> 00:43:34,390
my notes connected to it which take care

00:43:31,120 --> 00:43:36,790
of my payload so if you are in that

00:43:34,390 --> 00:43:39,400
pattern it's more like let's say startup

00:43:36,790 --> 00:43:41,350
mentality so startups usually don't have

00:43:39,400 --> 00:43:43,630
enough money to really fund a data

00:43:41,350 --> 00:43:46,030
center and lots of hardware so instead

00:43:43,630 --> 00:43:47,830
they say ok we have six weeks of time

00:43:46,030 --> 00:43:50,290
then the product must run on the

00:43:47,830 --> 00:43:52,000
platform and we just go to some kind of

00:43:50,290 --> 00:43:54,460
cloud vendor and have everything running

00:43:52,000 --> 00:43:56,200
there when you still have systems

00:43:54,460 --> 00:43:57,820
on-premise and they are already there

00:43:56,200 --> 00:43:59,860
why not spin up a virtual machine

00:43:57,820 --> 00:44:01,840
playing around and identifying what is

00:43:59,860 --> 00:44:03,250
it that we can do with kubernetes with a

00:44:01,840 --> 00:44:07,480
container runtime engine with a

00:44:03,250 --> 00:44:10,060
container orchestration engine and we

00:44:07,480 --> 00:44:12,730
still consider is this though something

00:44:10,060 --> 00:44:16,300
DevOps that fits into the Cata of DevOps

00:44:12,730 --> 00:44:18,160
so we haven't more changes in culture we

00:44:16,300 --> 00:44:20,200
have some isolations where we don't

00:44:18,160 --> 00:44:22,510
collaborate anymore because we say

00:44:20,200 --> 00:44:24,820
application is within the application

00:44:22,510 --> 00:44:26,680
developers infrastructures with an

00:44:24,820 --> 00:44:29,349
infrastructure developer but yet these

00:44:26,680 --> 00:44:31,420
systems have to align and work properly

00:44:29,349 --> 00:44:34,059
consider upgrading your container

00:44:31,420 --> 00:44:36,999
orchestration engine is the code that is

00:44:34,059 --> 00:44:38,650
used to manage the container run

00:44:36,999 --> 00:44:40,359
orchestration engine is it compatible

00:44:38,650 --> 00:44:42,579
with a new version of the container

00:44:40,359 --> 00:44:43,599
orchestration engine you'll have to

00:44:42,579 --> 00:44:45,369
check for that so they're still

00:44:43,599 --> 00:44:46,930
collaboration needed so we still need

00:44:45,369 --> 00:44:48,029
the culture on how to deal with other

00:44:46,930 --> 00:44:50,799
people

00:44:48,029 --> 00:44:53,199
automation even more important automate

00:44:50,799 --> 00:44:54,819
everything don't do something manual in

00:44:53,199 --> 00:44:57,759
a platform where you do container

00:44:54,819 --> 00:45:00,309
orchestration transparency is the same

00:44:57,759 --> 00:45:02,319
like running a single container runtime

00:45:00,309 --> 00:45:04,420
engine you still need to provide

00:45:02,319 --> 00:45:08,650
information and data to your different

00:45:04,420 --> 00:45:10,420
customers so business wants to know

00:45:08,650 --> 00:45:12,609
what's inside happening inside the

00:45:10,420 --> 00:45:14,559
application how many transaction haven't

00:45:12,609 --> 00:45:16,059
been processed payment transaction

00:45:14,559 --> 00:45:17,920
because that's important that is what

00:45:16,059 --> 00:45:20,079
the company makes money from so we need

00:45:17,920 --> 00:45:22,239
to know do we have pending transactions

00:45:20,079 --> 00:45:26,019
in the platform so also business

00:45:22,239 --> 00:45:27,699
transparency agility is the same so no

00:45:26,019 --> 00:45:30,009
difference at all there's one thing

00:45:27,699 --> 00:45:33,699
coming more to it where I say please

00:45:30,009 --> 00:45:35,469
consider security right from scratch so

00:45:33,699 --> 00:45:37,719
when you plan on your kubernetes cluster

00:45:35,469 --> 00:45:39,039
for example and you plan for all based

00:45:37,719 --> 00:45:43,239
access control and you plan for

00:45:39,039 --> 00:45:45,400
namespaces take care that you get first

00:45:43,239 --> 00:45:47,769
to security and that you get the okay on

00:45:45,400 --> 00:45:49,989
running a platform in that pattern they

00:45:47,769 --> 00:45:52,479
will might help you securing some how

00:45:49,989 --> 00:45:54,759
systems the infrastructure underneath so

00:45:52,479 --> 00:46:03,059
that nobody can use somehow cube a DM

00:45:54,759 --> 00:46:05,769
cube CTL command line interfaces so

00:46:03,059 --> 00:46:07,749
complex platforms it's something that

00:46:05,769 --> 00:46:09,609
will happen by itself you start with a

00:46:07,749 --> 00:46:11,640
simple platform and you look on it one

00:46:09,609 --> 00:46:14,499
year later and you say wow it's grown

00:46:11,640 --> 00:46:18,160
many new things next to it new

00:46:14,499 --> 00:46:21,039
components coming and the problem is you

00:46:18,160 --> 00:46:22,779
can manage complex things only when you

00:46:21,039 --> 00:46:25,749
split them down and they're the most

00:46:22,779 --> 00:46:27,699
simple thing you can manage and that is

00:46:25,749 --> 00:46:30,099
the challenge we're now running in

00:46:27,699 --> 00:46:32,410
something like kubernetes is a complex

00:46:30,099 --> 00:46:35,529
platform it consists of multiple plugins

00:46:32,410 --> 00:46:37,479
that are exchangeable so nowadays I

00:46:35,529 --> 00:46:39,339
suppose it's still dr. D being add or

00:46:37,479 --> 00:46:41,529
default docker runtime engine but you

00:46:39,339 --> 00:46:42,550
can replace it with cryo so it's another

00:46:41,529 --> 00:46:44,080
container runtime

00:46:42,550 --> 00:46:46,350
you want to understand what are the

00:46:44,080 --> 00:46:48,580
differences between now docker and cryo

00:46:46,350 --> 00:46:50,590
network plugins what kind of network

00:46:48,580 --> 00:46:54,040
plugin you want to use flannel reef

00:46:50,590 --> 00:46:57,220
calico something else what else is that

00:46:54,040 --> 00:46:58,990
you have some some operators that allow

00:46:57,220 --> 00:47:00,760
you to deal more easily with a platform

00:46:58,990 --> 00:47:03,940
what kind of operators do you want to

00:47:00,760 --> 00:47:06,250
use so cut everything down into the most

00:47:03,940 --> 00:47:08,560
simple to find problem because when you

00:47:06,250 --> 00:47:10,840
can manage it in a simple way that you

00:47:08,560 --> 00:47:13,240
can are able to also manage a complex

00:47:10,840 --> 00:47:17,470
platform that's the big thing you have

00:47:13,240 --> 00:47:19,630
to take care about so from my

00:47:17,470 --> 00:47:21,880
perspective when it comes to containers

00:47:19,630 --> 00:47:26,850
and a container is a containerized world

00:47:21,880 --> 00:47:30,430
DevOps is not that it's even expanding

00:47:26,850 --> 00:47:33,190
it's even more required compared to old

00:47:30,430 --> 00:47:34,900
platforms where you still say ok we do

00:47:33,190 --> 00:47:37,390
some DevOps but there are application

00:47:34,900 --> 00:47:39,820
managers that don't do DevOps they just

00:47:37,390 --> 00:47:42,160
change the some settings inside their

00:47:39,820 --> 00:47:44,590
application and they do the work as they

00:47:42,160 --> 00:47:47,859
want the problem is the steep learning

00:47:44,590 --> 00:47:49,480
curve so it's about containers itself

00:47:47,859 --> 00:47:51,220
what is a good container what is a bad

00:47:49,480 --> 00:47:53,560
container how to store a container how

00:47:51,220 --> 00:47:55,660
to sign a container it's certificates

00:47:53,560 --> 00:47:58,119
it's some for some people it's even

00:47:55,660 --> 00:47:59,410
learning gate or understanding maybe

00:47:58,119 --> 00:48:02,590
understanding kubernetes

00:47:59,410 --> 00:48:04,930
oh and the SDN of course so what is bgp

00:48:02,590 --> 00:48:07,000
by the way and how it is working what

00:48:04,930 --> 00:48:08,710
kind of network do i have now in my NERP

00:48:07,000 --> 00:48:11,440
container orchestration engine is this

00:48:08,710 --> 00:48:13,090
layer 3 or layer 5 oh what was the a 3

00:48:11,440 --> 00:48:15,940
and layer 5 by the way there was this

00:48:13,090 --> 00:48:17,050
OSI model yes I know the one thing is

00:48:15,940 --> 00:48:18,460
the hardware the other is the

00:48:17,050 --> 00:48:20,020
application and there are plenty of

00:48:18,460 --> 00:48:22,810
levels beneath but you need to be aware

00:48:20,020 --> 00:48:26,520
of that you have at least some basic

00:48:22,810 --> 00:48:29,980
knowledge on that what are the benefits

00:48:26,520 --> 00:48:31,869
when doing DevOps in general and of

00:48:29,980 --> 00:48:34,450
course also in the containerized world

00:48:31,869 --> 00:48:36,490
well there's now this buzzword bingo you

00:48:34,450 --> 00:48:39,100
can put out your papers it's time to

00:48:36,490 --> 00:48:41,140
market total cost of ownership so when

00:48:39,100 --> 00:48:42,970
you do faster deployments and you

00:48:41,140 --> 00:48:45,010
recognize the deployment is broken and

00:48:42,970 --> 00:48:46,750
you easily just revert that deployment

00:48:45,010 --> 00:48:48,550
automatically you can still make

00:48:46,750 --> 00:48:50,230
business value maybe not with a new

00:48:48,550 --> 00:48:51,910
version of the application but at least

00:48:50,230 --> 00:48:54,160
your platform is still functional

00:48:51,910 --> 00:48:55,990
customers can still buy and use your

00:48:54,160 --> 00:48:58,330
platform so that's

00:48:55,990 --> 00:49:00,430
total cost of ownership deploying new

00:48:58,330 --> 00:49:01,119
applications by this agile development

00:49:00,430 --> 00:49:03,220
method

00:49:01,119 --> 00:49:05,650
easily gives you the advantage over a

00:49:03,220 --> 00:49:07,540
competitor who doesn't do agile

00:49:05,650 --> 00:49:09,400
development who needs six months to

00:49:07,540 --> 00:49:11,920
deploy a new feature making that button

00:49:09,400 --> 00:49:15,220
blue instead of green just because

00:49:11,920 --> 00:49:18,010
people can't read it the same things

00:49:15,220 --> 00:49:22,780
like as usual automate everything and do

00:49:18,010 --> 00:49:25,330
the security first what I had in the

00:49:22,780 --> 00:49:27,190
past so let's say this way in my one of

00:49:25,330 --> 00:49:30,910
my very first it was it was my second

00:49:27,190 --> 00:49:33,940
job in IT I had someone as I was working

00:49:30,910 --> 00:49:36,610
as a consultant it was in finance area

00:49:33,940 --> 00:49:39,790
so wearing a suit and a tie every day

00:49:36,610 --> 00:49:41,950
and one of my colleagues came to me and

00:49:39,790 --> 00:49:43,990
mentioned Martin the most important

00:49:41,950 --> 00:49:47,890
principle when working with platforms is

00:49:43,990 --> 00:49:49,780
case and this is what I lack at the at

00:49:47,890 --> 00:49:51,340
the moment when I see people younger

00:49:49,780 --> 00:49:53,350
people building platforms they

00:49:51,340 --> 00:49:56,050
completely neglect the KISS principle

00:49:53,350 --> 00:49:59,110
keep it simple stupid

00:49:56,050 --> 00:50:01,480
so so easy to understand so building

00:49:59,110 --> 00:50:04,180
platforms how do they mention it as as

00:50:01,480 --> 00:50:06,340
simple as maximum possible and as

00:50:04,180 --> 00:50:09,369
complex as minimal required but this

00:50:06,340 --> 00:50:11,290
minimal requirement so build everything

00:50:09,369 --> 00:50:13,180
so that you can show it to your mother

00:50:11,290 --> 00:50:15,510
and explain it to her and she says yes I

00:50:13,180 --> 00:50:18,970
understand it that's a simple platform

00:50:15,510 --> 00:50:21,670
definitely okay when your mother is a

00:50:18,970 --> 00:50:29,800
maybe a COBOL coder everything is simple

00:50:21,670 --> 00:50:32,740
but okay some conclusions so the first

00:50:29,800 --> 00:50:34,510
thing is when we do containers DevOps is

00:50:32,740 --> 00:50:39,040
not debt is even more required than

00:50:34,510 --> 00:50:40,960
before what is it that I mention DevOps

00:50:39,040 --> 00:50:43,359
therefore basically is the culture the

00:50:40,960 --> 00:50:45,850
culture of combined communication the

00:50:43,359 --> 00:50:48,840
culture of behavior the culture of

00:50:45,850 --> 00:50:52,750
attitude the culture of listening and

00:50:48,840 --> 00:50:55,600
asking and not yelling not complaining

00:50:52,750 --> 00:50:56,950
and not insulting so but this is

00:50:55,600 --> 00:50:59,050
something that you can't do with

00:50:56,950 --> 00:51:01,450
technology there is no way that

00:50:59,050 --> 00:51:03,820
technology changes the behavior of

00:51:01,450 --> 00:51:04,930
people I haven't seen that so far so

00:51:03,820 --> 00:51:06,850
it's the problem that you have with

00:51:04,930 --> 00:51:09,570
people I found this quote from James

00:51:06,850 --> 00:51:11,580
Gustav space he is more in

00:51:09,570 --> 00:51:14,130
vine claims himself being an

00:51:11,580 --> 00:51:16,890
environmental lawyer so he's more

00:51:14,130 --> 00:51:19,620
dealing with global things that happen

00:51:16,890 --> 00:51:22,050
on earth but I really like is that he

00:51:19,620 --> 00:51:23,670
mentions he thought about just research

00:51:22,050 --> 00:51:25,440
enough and you will find a solution for

00:51:23,670 --> 00:51:28,740
the problem but he also found problems

00:51:25,440 --> 00:51:31,950
which are not solvable by engineers or

00:51:28,740 --> 00:51:34,260
as he mentioned by scientists it's the

00:51:31,950 --> 00:51:35,940
culture how people think here it says

00:51:34,260 --> 00:51:38,880
the most top environment problems

00:51:35,940 --> 00:51:40,620
selfishness greedy and apathy so when

00:51:38,880 --> 00:51:42,900
you deal with these people in a company

00:51:40,620 --> 00:51:45,390
and you want to implement DevOps forget

00:51:42,900 --> 00:51:47,490
it it's not possible you have to have

00:51:45,390 --> 00:51:50,160
motivated people then want to change

00:51:47,490 --> 00:51:53,010
something you have you need you need

00:51:50,160 --> 00:51:54,570
supportive people that are also not just

00:51:53,010 --> 00:51:56,670
looking for the next position in their

00:51:54,570 --> 00:52:00,480
job but who are eager to help and

00:51:56,670 --> 00:52:05,040
support their colleagues waiting to the

00:52:00,480 --> 00:52:07,680
photo was taken okay so classical DevOps

00:52:05,040 --> 00:52:11,760
means we do collaboration we have this

00:52:07,680 --> 00:52:14,300
ka kata we have this DevOps kata at hand

00:52:11,760 --> 00:52:17,090
so we have established a culture of

00:52:14,300 --> 00:52:20,160
communication collaboration we have

00:52:17,090 --> 00:52:22,740
share tooling in place so not everybody

00:52:20,160 --> 00:52:25,590
is doing his own thing which that we

00:52:22,740 --> 00:52:27,900
share responsibilities for tooling we

00:52:25,590 --> 00:52:31,490
have some separations of concerns but

00:52:27,900 --> 00:52:35,100
most things are done together as a team

00:52:31,490 --> 00:52:37,380
team in not in German term in German

00:52:35,100 --> 00:52:40,470
term it means toe line and remarks in

00:52:37,380 --> 00:52:44,460
English it refers to great someone else

00:52:40,470 --> 00:52:46,770
is doing the job but it really as a team

00:52:44,460 --> 00:52:48,450
collaborating team when it comes to

00:52:46,770 --> 00:52:51,410
containers the only thing you have you

00:52:48,450 --> 00:52:53,820
have already some strict research

00:52:51,410 --> 00:52:55,350
separation of responsibilities so

00:52:53,820 --> 00:52:57,180
application developers taking on

00:52:55,350 --> 00:52:59,790
applications infrastructure developer

00:52:57,180 --> 00:53:01,860
taking on infrastructure they run

00:52:59,790 --> 00:53:03,750
together on a single platform but you to

00:53:01,860 --> 00:53:05,940
that isolation level is more easy to

00:53:03,750 --> 00:53:07,500
identify where is the issue is it within

00:53:05,940 --> 00:53:09,900
the application or is it within the

00:53:07,500 --> 00:53:12,000
infrastructure you still have shared

00:53:09,900 --> 00:53:14,010
tooling and you have more like an API

00:53:12,000 --> 00:53:16,350
based collaboration infrastructure

00:53:14,010 --> 00:53:18,990
developer provide API access to

00:53:16,350 --> 00:53:20,970
application developers and the same

00:53:18,990 --> 00:53:22,350
thing happens when you run containers in

00:53:20,970 --> 00:53:24,210
a container orchestration

00:53:22,350 --> 00:53:25,950
engine you still have the strict

00:53:24,210 --> 00:53:27,540
separation you have to share tooling

00:53:25,950 --> 00:53:32,850
nothing changes it's just if you run

00:53:27,540 --> 00:53:35,040
containers on multiple hosts with that

00:53:32,850 --> 00:53:38,490
I'm finished to earlier in time I have

00:53:35,040 --> 00:53:41,700
no idea in time okay so with that thank

00:53:38,490 --> 00:53:43,680
you for being here at OCC thank you for

00:53:41,700 --> 00:53:52,860
listening to me sorry for being so

00:53:43,680 --> 00:53:54,900
boring compared to James so we still

00:53:52,860 --> 00:53:59,160
have some time for questions any

00:53:54,900 --> 00:54:02,240
questions okay I have a question who is

00:53:59,160 --> 00:54:05,640
already running containers in production

00:54:02,240 --> 00:54:09,600
around about 50% okay who would do that

00:54:05,640 --> 00:54:18,840
again that's less people than before

00:54:09,600 --> 00:54:22,470
okay no questions no questions it's the

00:54:18,840 --> 00:54:24,830
last chance Oh SDC is over soon okay one

00:54:22,470 --> 00:54:24,830
question

00:54:30,800 --> 00:54:37,050
so I will refer to two previous

00:54:33,660 --> 00:54:40,109
questions you asked how many people use

00:54:37,050 --> 00:54:43,740
cloud and then you asked how many people

00:54:40,109 --> 00:54:49,980
use containers based on the answer I

00:54:43,740 --> 00:54:51,330
guess that so many people use oh we can

00:54:49,980 --> 00:54:54,510
we can we can check that's that's quite

00:54:51,330 --> 00:54:57,600
easy okay so who's doing cloud everybody

00:54:54,510 --> 00:54:59,010
raises hands was doing cloud okay it's

00:54:57,600 --> 00:55:01,680
only oh no there's few people than

00:54:59,010 --> 00:55:03,270
before okay so that already so that

00:55:01,680 --> 00:55:04,680
means already means when people run

00:55:03,270 --> 00:55:06,240
containers we have more people running

00:55:04,680 --> 00:55:08,460
containers and running on cloud means

00:55:06,240 --> 00:55:12,600
more most people here run somehow on

00:55:08,460 --> 00:55:14,760
premise for whatever reason maybe

00:55:12,600 --> 00:55:16,260
infrastructure was already there we have

00:55:14,760 --> 00:55:19,380
customers that are not allowed to go

00:55:16,260 --> 00:55:22,920
into cloud for privacy and regulatory

00:55:19,380 --> 00:55:28,680
legal reasons for example also makes it

00:55:22,920 --> 00:55:31,130
difficult as Germany welcome okay any

00:55:28,680 --> 00:55:31,130
questions

00:55:34,250 --> 00:55:41,010
come on the last chance pass yet

00:55:37,330 --> 00:55:46,059
okay thank you very much morning you

00:55:41,010 --> 00:55:46,059
[Applause]

00:55:47,180 --> 00:55:51,270

YouTube URL: https://www.youtube.com/watch?v=qFuyVzC01bc


