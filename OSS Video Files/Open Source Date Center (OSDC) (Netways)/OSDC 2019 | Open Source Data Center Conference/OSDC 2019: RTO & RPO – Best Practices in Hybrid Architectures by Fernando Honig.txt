Title: OSDC 2019: RTO & RPO â€“ Best Practices in Hybrid Architectures by Fernando Honig
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	In this presentation we will explore best practices and how to plan a hybrid strategy. Disaster recovery according to the size of the event. We will discuss the different concepts: Availability, Backup, Recovery, RTO and RPO. How to replicate your storage, networking, databases and compute instances in the cloud, and the different type of recoveries available in a hybrid architecture. We will go from a Pilot light model to a Multi-Site Active-Active and explain cost and time to recover using these options.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,030 --> 00:00:21,510
a Sebastian said my name is Fernando

00:00:18,720 --> 00:00:28,769
Hoenig I work for a club consultancy

00:00:21,510 --> 00:00:32,690
based in the UK we do consultancy in a

00:00:28,769 --> 00:00:36,030
cloud and DevOps we are partnering with

00:00:32,690 --> 00:00:41,010
the major cloud vendors so AWS Google

00:00:36,030 --> 00:00:45,320
Cloud Alibaba cloud etc today my

00:00:41,010 --> 00:00:47,550
intention is to go with you through the

00:00:45,320 --> 00:00:50,700
journey that we are experiencing with

00:00:47,550 --> 00:00:55,920
some of our clients and and and try to

00:00:50,700 --> 00:00:58,350
see how that relates with your situation

00:00:55,920 --> 00:01:03,059
so we're going to talk a little bit

00:00:58,350 --> 00:01:06,479
about RTO RPO a few strategies a few

00:01:03,059 --> 00:01:11,549
services that one of the vendors in this

00:01:06,479 --> 00:01:13,229
case AWS provides and and ideally you're

00:01:11,549 --> 00:01:18,680
going to end up this session with some

00:01:13,229 --> 00:01:21,960
you know ideas on how to to improve your

00:01:18,680 --> 00:01:26,310
disaster recovery and I'm backup

00:01:21,960 --> 00:01:31,530
strategies you can contact me on my

00:01:26,310 --> 00:01:34,200
email or link in my twitter handle is

00:01:31,530 --> 00:01:38,520
Fran tonic all together as well so you

00:01:34,200 --> 00:01:42,240
can also contact me contact me there so

00:01:38,520 --> 00:01:46,680
the first thing is trying to understand

00:01:42,240 --> 00:01:50,250
the difference between RTL on RPO it

00:01:46,680 --> 00:01:53,509
sounds quite similar but the important

00:01:50,250 --> 00:01:56,460
here or import the importance here is

00:01:53,509 --> 00:02:02,060
understanding what one thing is time and

00:01:56,460 --> 00:02:06,450
the other thing is data right so RTO is

00:02:02,060 --> 00:02:09,509
what is the time that we think is going

00:02:06,450 --> 00:02:12,880
to be not a problem to recover our

00:02:09,509 --> 00:02:16,330
system an RPO is

00:02:12,880 --> 00:02:22,990
how much data can we lose without

00:02:16,330 --> 00:02:25,480
affecting our system two different

00:02:22,990 --> 00:02:31,180
things again

00:02:25,480 --> 00:02:34,800
RTO we need to calculate how quickly we

00:02:31,180 --> 00:02:37,930
need to recover so we have an issue and

00:02:34,800 --> 00:02:41,160
how much time is gonna take us to be

00:02:37,930 --> 00:02:45,370
back online to be serving customers or

00:02:41,160 --> 00:02:50,050
request again so we need to make sure

00:02:45,370 --> 00:02:54,670
that we have that number in mind before

00:02:50,050 --> 00:02:58,360
planning our strategy and every plan

00:02:54,670 --> 00:03:04,750
comes with money you know that right

00:02:58,360 --> 00:03:08,020
so we say an hour we say 20 minutes well

00:03:04,750 --> 00:03:10,360
it's not free right either we need to

00:03:08,020 --> 00:03:13,660
have replication in place

00:03:10,360 --> 00:03:18,570
the typical master master replication we

00:03:13,660 --> 00:03:21,610
need to have people ready to jump on and

00:03:18,570 --> 00:03:24,760
when we say people remember that humans

00:03:21,610 --> 00:03:26,800
are a slow right

00:03:24,760 --> 00:03:29,530
waking up 2 a.m. in the morning and

00:03:26,800 --> 00:03:32,890
trying to bring a system up in 15-20

00:03:29,530 --> 00:03:34,390
minutes it's not going to work you're

00:03:32,890 --> 00:03:36,310
never going to be able to recover a

00:03:34,390 --> 00:03:43,930
system in 15 minutes at 2 a.m. in the

00:03:36,310 --> 00:03:49,180
morning so automation here is key an RPO

00:03:43,930 --> 00:03:53,950
is trying to understand how many backups

00:03:49,180 --> 00:03:57,940
do we need to have in order to get the

00:03:53,950 --> 00:04:02,320
latest information or data in place so

00:03:57,940 --> 00:04:05,560
you say I want to have an RPL of four

00:04:02,320 --> 00:04:06,130
hours sure how often are you doing

00:04:05,560 --> 00:04:10,210
backups

00:04:06,130 --> 00:04:16,890
well once so once a day your RPO is

00:04:10,210 --> 00:04:19,979
never going to be four hours right so

00:04:16,890 --> 00:04:22,660
incremental backups hourly backups

00:04:19,979 --> 00:04:26,410
snapshots that is what we're going to

00:04:22,660 --> 00:04:30,850
start exploring as part of this talk

00:04:26,410 --> 00:04:34,890
so again to be clear RPO our RTO

00:04:30,850 --> 00:04:40,030
differences let's say the recovery time

00:04:34,890 --> 00:04:43,720
yeah it's going to be in an hour so my

00:04:40,030 --> 00:04:49,620
application can be unavailable up to one

00:04:43,720 --> 00:04:52,810
hour but how much data can we support

00:04:49,620 --> 00:04:57,430
you don't have to make backups every

00:04:52,810 --> 00:05:03,450
hour if you can replicate and build that

00:04:57,430 --> 00:05:07,300
data again using all the systems right

00:05:03,450 --> 00:05:14,500
so for example let's say you are running

00:05:07,300 --> 00:05:17,470
a log analytics startup and you have

00:05:14,500 --> 00:05:19,210
your logs stored somewhere and you're

00:05:17,470 --> 00:05:22,800
processing those logs in order to

00:05:19,210 --> 00:05:26,770
generate some value added information

00:05:22,800 --> 00:05:30,370
logs are still there your system is down

00:05:26,770 --> 00:05:32,800
your database is down and you need to

00:05:30,370 --> 00:05:34,420
recover from it so what you're gonna do

00:05:32,800 --> 00:05:37,180
is you're gonna recover from the last

00:05:34,420 --> 00:05:39,970
backup that is gonna happen I don't know

00:05:37,180 --> 00:05:44,350
maybe happened 11 hours and 59 minutes

00:05:39,970 --> 00:05:47,200
ago but you have their logs you still

00:05:44,350 --> 00:05:50,440
have those logs ready to process again

00:05:47,200 --> 00:05:51,070
and be up today yeah it's gonna take

00:05:50,440 --> 00:05:53,290
time

00:05:51,070 --> 00:05:56,170
yes but you're still going to be able to

00:05:53,290 --> 00:06:02,730
recover having a in this case 12 hours

00:05:56,170 --> 00:06:07,690
RPO clear so if we talk about

00:06:02,730 --> 00:06:12,460
availability concepts high availability

00:06:07,690 --> 00:06:16,090
is trying to minimize downtime for your

00:06:12,460 --> 00:06:21,370
application which means that you don't

00:06:16,090 --> 00:06:25,050
have to be online 24/7 if your customers

00:06:21,370 --> 00:06:29,290
are able to cope with a few minutes

00:06:25,050 --> 00:06:33,750
sometimes even hours of downtime don't

00:06:29,290 --> 00:06:33,750
invest too much you don't need to

00:06:33,780 --> 00:06:39,669
companies like Facebook github develop

00:06:38,040 --> 00:06:48,250
AWS

00:06:39,669 --> 00:06:51,180
they go down why you cannot try to make

00:06:48,250 --> 00:06:54,639
your data safe that's key

00:06:51,180 --> 00:07:00,159
why because you typically hold

00:06:54,639 --> 00:07:04,270
customer information and try to get your

00:07:00,159 --> 00:07:07,810
applications and data back after a major

00:07:04,270 --> 00:07:11,530
disaster how many here run a data center

00:07:07,810 --> 00:07:17,560
I'm not saying that you host in a data

00:07:11,530 --> 00:07:23,949
center you run a data center so you have

00:07:17,560 --> 00:07:27,330
a data center okay how often do you get

00:07:23,949 --> 00:07:27,330
completely down

00:07:29,069 --> 00:07:36,669
what's the building burned at some point

00:07:32,729 --> 00:07:40,029
exactly so what you need to do is you

00:07:36,669 --> 00:07:46,560
need to make sure that the minor things

00:07:40,029 --> 00:07:46,560
are not affecting you as a whole right

00:07:47,400 --> 00:07:54,460
you need to make sure that your small

00:07:50,819 --> 00:07:57,610
large and sometimes even colossal events

00:07:54,460 --> 00:08:03,940
are not affecting your applications and

00:07:57,610 --> 00:08:07,810
your customers gave a talk a few months

00:08:03,940 --> 00:08:12,219
ago around SLA only magical in five

00:08:07,810 --> 00:08:16,870
nines that everyone is looking to to

00:08:12,219 --> 00:08:18,610
achieve and sometimes you're not even

00:08:16,870 --> 00:08:23,169
possible because your vendors are not

00:08:18,610 --> 00:08:25,479
providing you that so that is when I say

00:08:23,169 --> 00:08:28,360
make sure that you are complying with

00:08:25,479 --> 00:08:31,990
what your customers want your customers

00:08:28,360 --> 00:08:34,829
want your data to be safe and the

00:08:31,990 --> 00:08:37,839
service to be available up to a degree

00:08:34,829 --> 00:08:42,550
in this case let's explore these small

00:08:37,839 --> 00:08:46,230
events so who did an instance restore

00:08:42,550 --> 00:08:48,699
are the instance and never came up

00:08:46,230 --> 00:08:53,509
every time you restore an instance it

00:08:48,699 --> 00:08:57,089
comes back how lucky you are

00:08:53,509 --> 00:09:02,100
you always did a application deployment

00:08:57,089 --> 00:09:05,720
and it went well right exactly so these

00:09:02,100 --> 00:09:08,279
are minor things but they could become

00:09:05,720 --> 00:09:12,350
large-scale if you do application

00:09:08,279 --> 00:09:17,819
deployment everywhere right all

00:09:12,350 --> 00:09:20,939
instances at the same time another thing

00:09:17,819 --> 00:09:23,339
that could happen is that you you put

00:09:20,939 --> 00:09:25,860
all your eggs in the same basket in this

00:09:23,339 --> 00:09:29,250
case the analogy is for an availability

00:09:25,860 --> 00:09:34,829
zone and we know that availability zones

00:09:29,250 --> 00:09:37,290
go down not necessarily all services but

00:09:34,829 --> 00:09:41,069
maybe we are using a particular service

00:09:37,290 --> 00:09:44,790
and that particular service goes down in

00:09:41,069 --> 00:09:46,259
a particular availability zone for the

00:09:44,790 --> 00:09:49,550
ones who are not familiar with the

00:09:46,259 --> 00:09:53,730
availability zone terminology that is a

00:09:49,550 --> 00:09:59,490
set of data centers on a cloud vendor

00:09:53,730 --> 00:10:01,819
Google Alibaba AWS another thing that

00:09:59,490 --> 00:10:05,730
could happen is that the whole region

00:10:01,819 --> 00:10:11,790
goes down so we have an alien attack and

00:10:05,730 --> 00:10:16,170
well you know a region goes down or even

00:10:11,790 --> 00:10:20,180
less dramatic you just did a terraform

00:10:16,170 --> 00:10:22,319
destroy and what I was thinking that was

00:10:20,180 --> 00:10:28,170
the development environment well

00:10:22,319 --> 00:10:31,560
actually it wasn't my variable like when

00:10:28,170 --> 00:10:36,899
I did like export equal you know didn't

00:10:31,560 --> 00:10:39,839
work so it could happen the question is

00:10:36,899 --> 00:10:45,480
how do we fix it and more importantly

00:10:39,839 --> 00:10:49,019
can we do it very quick so think about

00:10:45,480 --> 00:10:55,019
these events happening the last I know

00:10:49,019 --> 00:10:58,639
to maybe up to three years to remember

00:10:55,019 --> 00:11:04,550
do you remember when github was down

00:10:58,639 --> 00:11:10,670
because of the s3 US East one

00:11:04,550 --> 00:11:13,130
s3 issue how will you think hold on skid

00:11:10,670 --> 00:11:15,380
hub don't they have like backups and

00:11:13,130 --> 00:11:23,030
everything yeah yes they had it back up

00:11:15,380 --> 00:11:26,570
in the same region okay question is how

00:11:23,030 --> 00:11:30,050
do we fix that how we make sure that

00:11:26,570 --> 00:11:33,200
that doesn't happen again well there is

00:11:30,050 --> 00:11:36,290
a function of featuring s3 that you can

00:11:33,200 --> 00:11:40,490
replicate exactly what you have in one

00:11:36,290 --> 00:11:42,710
region to another it cost double of

00:11:40,490 --> 00:11:46,430
course because I'm having exactly the

00:11:42,710 --> 00:11:49,910
same thing in two regions but I'm

00:11:46,430 --> 00:12:00,850
covering myself in case something like

00:11:49,910 --> 00:12:03,710
this happens you know breaks it right in

00:12:00,850 --> 00:12:06,530
around I don't know two months ago or

00:12:03,710 --> 00:12:10,880
something like that IV there was one

00:12:06,530 --> 00:12:12,710
person who put a petition to make

00:12:10,880 --> 00:12:19,040
people's vote or something like that I'm

00:12:12,710 --> 00:12:22,580
not about that and is it got about five

00:12:19,040 --> 00:12:25,460
million signatures or seven million at

00:12:22,580 --> 00:12:27,830
the end but yes at some point there was

00:12:25,460 --> 00:12:30,980
so many people trying to sign this and

00:12:27,830 --> 00:12:34,580
the system went down because the

00:12:30,980 --> 00:12:39,590
petition system was unavailable why not

00:12:34,580 --> 00:12:43,160
enough I'll say infrastructure to cope

00:12:39,590 --> 00:12:45,620
with the demand they didn't know that

00:12:43,160 --> 00:12:49,190
was going to happen but also they didn't

00:12:45,620 --> 00:12:51,610
plan accordingly to make sure that if

00:12:49,190 --> 00:12:55,640
you have to support 505 thousand a

00:12:51,610 --> 00:12:58,130
second five thousand signatures a second

00:12:55,640 --> 00:13:04,730
we can cope with that no they never

00:12:58,130 --> 00:13:11,180
imagined and that is key think of what

00:13:04,730 --> 00:13:14,720
could happen if write or data and

00:13:11,180 --> 00:13:17,800
available yeah failed backups how often

00:13:14,720 --> 00:13:21,170
do you test your backups

00:13:17,800 --> 00:13:25,550
once every week raise your hands

00:13:21,170 --> 00:13:30,730
no once every month one once every

00:13:25,550 --> 00:13:39,440
quarter to once a year

00:13:30,730 --> 00:13:41,720
never yes that is not right okay so are

00:13:39,440 --> 00:13:43,250
you wasting your money you're storing

00:13:41,720 --> 00:13:44,680
things that you don't even know if it

00:13:43,250 --> 00:13:47,620
works

00:13:44,680 --> 00:13:51,110
stop wasting money

00:13:47,620 --> 00:13:54,260
do you remember kid lab and the database

00:13:51,110 --> 00:13:58,460
destruction by this young developer you

00:13:54,260 --> 00:14:02,540
don't right happen like two years or

00:13:58,460 --> 00:14:07,510
three years ago again the guy just put

00:14:02,540 --> 00:14:12,710
the wrong variable and goodbye database

00:14:07,510 --> 00:14:14,510
gillip had a backup but they were

00:14:12,710 --> 00:14:17,420
running backups every six hours

00:14:14,510 --> 00:14:25,400
oh whatever

00:14:17,420 --> 00:14:27,620
what about the last six hours lost that

00:14:25,400 --> 00:14:32,210
is what we need to think about you know

00:14:27,620 --> 00:14:35,060
that type of potential situations don't

00:14:32,210 --> 00:14:41,510
blame the developer just make sure you

00:14:35,060 --> 00:14:44,030
have the right insurances in place let's

00:14:41,510 --> 00:14:48,350
talk about that the insurances how can

00:14:44,030 --> 00:14:55,640
we plan a disaster how can we recover

00:14:48,350 --> 00:14:58,430
from that machine images this is no

00:14:55,640 --> 00:15:02,840
cloud remember that these machine images

00:14:58,430 --> 00:15:06,110
are coming from OVF with vmware so it's

00:15:02,840 --> 00:15:10,580
not that new now is like with cloud we

00:15:06,110 --> 00:15:13,550
can do fancy things but the concept is

00:15:10,580 --> 00:15:16,820
there the good thing about that is we

00:15:13,550 --> 00:15:19,280
can snapshot to another region we can

00:15:16,820 --> 00:15:25,520
copy from Europe to the US from Asia to

00:15:19,280 --> 00:15:29,180
I don't know India right we can share it

00:15:25,520 --> 00:15:30,080
across accounts or projects which means

00:15:29,180 --> 00:15:35,300
that we

00:15:30,080 --> 00:15:39,980
can have a hardened image approved by

00:15:35,300 --> 00:15:42,460
security or the IT team but that can be

00:15:39,980 --> 00:15:48,010
share across all your projects and

00:15:42,460 --> 00:15:48,010
everyone is using the same base image

00:15:49,960 --> 00:15:59,780
Antoni in my previous talk was talking

00:15:54,380 --> 00:16:06,700
about user data that we can add commands

00:15:59,780 --> 00:16:12,320
and scripts so our images can be created

00:16:06,700 --> 00:16:15,380
all the same way we can patch we can

00:16:12,320 --> 00:16:20,390
update the OS before putting in

00:16:15,380 --> 00:16:22,070
production that particular instance we

00:16:20,390 --> 00:16:24,710
don't have to go and manually run

00:16:22,070 --> 00:16:30,730
ansible bla bla bla on every single

00:16:24,710 --> 00:16:34,430
machine as soon as the instance is

00:16:30,730 --> 00:16:42,530
booting you just get your system up to

00:16:34,430 --> 00:16:46,400
date in terms of storage well again we

00:16:42,530 --> 00:16:55,670
can replicate that snapshot from one

00:16:46,400 --> 00:17:04,400
region to another right we can enable

00:16:55,670 --> 00:17:07,910
versioning with s3 or object storage you

00:17:04,400 --> 00:17:11,390
can enable versioning even you can add

00:17:07,910 --> 00:17:15,470
something like MFA delete so in order to

00:17:11,390 --> 00:17:19,209
delete something you need to be double

00:17:15,470 --> 00:17:19,209
authenticated right

00:17:24,470 --> 00:17:33,320
again you can replicate that s free

00:17:27,230 --> 00:17:39,519
bucket to another region so how these

00:17:33,320 --> 00:17:48,639
machine and snapshots work you create a

00:17:39,519 --> 00:17:53,600
snapshot from a default machine image

00:17:48,639 --> 00:17:58,460
provided by the vendor Google AWS I live

00:17:53,600 --> 00:18:01,549
up a cloud as your and then you register

00:17:58,460 --> 00:18:07,840
that in this case ami is an Amazon one

00:18:01,549 --> 00:18:11,570
and you can launch that ami you can copy

00:18:07,840 --> 00:18:15,679
to another region the same a my you can

00:18:11,570 --> 00:18:18,799
add user data and create a new version

00:18:15,679 --> 00:18:24,860
of that ami and is yours and could be

00:18:18,799 --> 00:18:29,419
private or could be public make sure you

00:18:24,860 --> 00:18:34,970
don't put any credentials in the user

00:18:29,419 --> 00:18:41,210
data or in the instance itself in terms

00:18:34,970 --> 00:18:46,490
of networking you can enable health

00:18:41,210 --> 00:18:52,129
checks on your DNS with AWS we use route

00:18:46,490 --> 00:18:54,649
53 which means that you can move from

00:18:52,129 --> 00:18:57,769
one region to another based on the

00:18:54,649 --> 00:19:01,580
health check so if the load balancer is

00:18:57,769 --> 00:19:05,750
giving you another code than 200 then

00:19:01,580 --> 00:19:10,759
you move your request from one region to

00:19:05,750 --> 00:19:13,970
another if for some reason a region gets

00:19:10,759 --> 00:19:17,899
some network degradation it's going to

00:19:13,970 --> 00:19:19,190
be more latency so the customer

00:19:17,899 --> 00:19:25,850
experience is not going to be the best

00:19:19,190 --> 00:19:28,250
you move from one region to another with

00:19:25,850 --> 00:19:30,470
load balancing you can have failover

00:19:28,250 --> 00:19:34,850
options which means that you have a load

00:19:30,470 --> 00:19:36,960
balancer you have two or three pools of

00:19:34,850 --> 00:19:40,080
instances and you can move

00:19:36,960 --> 00:19:45,090
from one pool to another based on a

00:19:40,080 --> 00:19:50,250
failover situation you can have health

00:19:45,090 --> 00:19:54,180
checks and you have the 200 400 500 code

00:19:50,250 --> 00:19:59,370
and you decide when it's a good time to

00:19:54,180 --> 00:20:05,370
move VPC is a concept of five Virtual

00:19:59,370 --> 00:20:07,710
Private Network in this case cloud which

00:20:05,370 --> 00:20:10,740
means that you can extend your data

00:20:07,710 --> 00:20:14,130
center to the cloud using something like

00:20:10,740 --> 00:20:17,520
in this case Direct Connect so you can

00:20:14,130 --> 00:20:22,920
net you connect your data center with a

00:20:17,520 --> 00:20:26,910
cloud vendor and you extend your data

00:20:22,920 --> 00:20:32,700
center footprint so in this case imagine

00:20:26,910 --> 00:20:36,990
that we have requests coming to our f5

00:20:32,700 --> 00:20:40,170
big IP load balancer we're out

00:20:36,990 --> 00:20:44,310
everything to our data center but it

00:20:40,170 --> 00:20:49,170
cost too much for just and I'm gonna put

00:20:44,310 --> 00:20:54,030
a US example from Day or Black Friday

00:20:49,170 --> 00:20:57,720
event right it cost you too much to just

00:20:54,030 --> 00:21:01,770
invest for that one week so you extend

00:20:57,720 --> 00:21:04,380
your data center using vbc and Direct

00:21:01,770 --> 00:21:07,050
Connect and you start routing some

00:21:04,380 --> 00:21:09,450
traffic onto the cloud and you use

00:21:07,050 --> 00:21:15,980
something like auto scaling to just for

00:21:09,450 --> 00:21:20,960
just that period of time with databases

00:21:15,980 --> 00:21:29,250
we have RBS which is the managed service

00:21:20,960 --> 00:21:33,240
for databases snapshot data remember

00:21:29,250 --> 00:21:37,170
that with particularly with AWS what you

00:21:33,240 --> 00:21:40,950
can do is you can have automated backups

00:21:37,170 --> 00:21:43,440
and those you can use it it's an

00:21:40,950 --> 00:21:47,990
automated way of backing up up to 14

00:21:43,440 --> 00:21:50,790
days every single day you define when

00:21:47,990 --> 00:21:52,799
but also you can do manual snapshot

00:21:50,790 --> 00:21:57,870
which means that let's say you're doing

00:21:52,799 --> 00:22:00,840
a a deployment

00:21:57,870 --> 00:22:08,070
you're changing your schema you don't

00:22:00,840 --> 00:22:10,520
want to wait for midnight to backup so

00:22:08,070 --> 00:22:13,770
you back up before changing the schema

00:22:10,520 --> 00:22:16,830
you do a deployment turn do it on a

00:22:13,770 --> 00:22:21,750
Friday do it on a Wednesday potentially

00:22:16,830 --> 00:22:25,559
and there you go you have a manual

00:22:21,750 --> 00:22:27,540
snapshot of your old schema and then you

00:22:25,559 --> 00:22:29,070
can have another manual snapshot of a

00:22:27,540 --> 00:22:31,410
new schema and if you need to rollback

00:22:29,070 --> 00:22:31,679
you need to go back and forth you can do

00:22:31,410 --> 00:22:33,419
it

00:22:31,679 --> 00:22:39,950
you can create another instance based on

00:22:33,419 --> 00:22:44,910
that snapshot combined with replicas

00:22:39,950 --> 00:22:53,610
with multi availability zone so you can

00:22:44,910 --> 00:22:58,740
have another brick replica to just hold

00:22:53,610 --> 00:23:03,120
the reads and you spread the load of

00:22:58,740 --> 00:23:04,679
your database but at some point that

00:23:03,120 --> 00:23:07,830
rate replicas could become your master

00:23:04,679 --> 00:23:11,669
you just promote that brick replica on

00:23:07,830 --> 00:23:17,750
to a master and that's it you have

00:23:11,669 --> 00:23:23,910
resiliency there with the infrastructure

00:23:17,750 --> 00:23:27,510
treat your infrastructure as code which

00:23:23,910 --> 00:23:30,090
means that use templates if you have to

00:23:27,510 --> 00:23:31,950
build dev one depth to depth reused

00:23:30,090 --> 00:23:34,490
exactly the same template just change

00:23:31,950 --> 00:23:34,490
variables

00:23:37,500 --> 00:23:45,200
make tags of your code of your

00:23:41,549 --> 00:23:50,600
infrastructure so with application code

00:23:45,200 --> 00:23:53,940
6.8 we're using infrastructure code 1.6

00:23:50,600 --> 00:23:57,720
right so then you know exactly when

00:23:53,940 --> 00:24:01,409
something fails what a what could what

00:23:57,720 --> 00:24:10,380
went wrong or what can we improve on the

00:24:01,409 --> 00:24:14,700
next release during the backup face take

00:24:10,380 --> 00:24:21,620
backups yes you're doing it you can

00:24:14,700 --> 00:24:26,880
store backups in a very low-cost system

00:24:21,620 --> 00:24:30,510
like s3 and if you're not using it you

00:24:26,880 --> 00:24:34,919
can also move it on to glacier which is

00:24:30,510 --> 00:24:43,740
the very very low and cheapest object

00:24:34,919 --> 00:24:48,659
store on AWS but this this is really

00:24:43,740 --> 00:24:54,000
important you need to understand and you

00:24:48,659 --> 00:25:02,330
need to know and document what am i you

00:24:54,000 --> 00:25:02,330
use how to restore systems from backups

00:25:03,049 --> 00:25:11,580
how to switch to a new system if a

00:25:08,539 --> 00:25:15,600
region is down if an availability zone

00:25:11,580 --> 00:25:18,059
is down how to configure your deployment

00:25:15,600 --> 00:25:21,360
because maybe endpoints are not going to

00:25:18,059 --> 00:25:30,200
be the same machine eyepiece might not

00:25:21,360 --> 00:25:39,419
be the same so you can use for files NFS

00:25:30,200 --> 00:25:45,899
SM SMB for volumes is kasi tapes the

00:25:39,419 --> 00:25:48,600
same and both you store on to s3 and

00:25:45,899 --> 00:25:52,640
based on a lifecycle rule that you

00:25:48,600 --> 00:25:52,640
define you move it onto glacier

00:25:54,410 --> 00:25:59,670
for example in this case and hybrid

00:25:57,450 --> 00:26:02,970
backup kind of strategy you have a

00:25:59,670 --> 00:26:05,700
service in 80s called AWS backup with

00:26:02,970 --> 00:26:09,240
what you do is you define how you want

00:26:05,700 --> 00:26:12,210
to interact with your own data center or

00:26:09,240 --> 00:26:18,420
on-prem so in the cloud you use

00:26:12,210 --> 00:26:20,520
something like EFS which is nfsv4 it's

00:26:18,420 --> 00:26:24,270
an elastic file system you can put it on

00:26:20,520 --> 00:26:30,780
multiple instances at the same time are

00:26:24,270 --> 00:26:34,920
the S EBS or even DynamoDB to backup

00:26:30,780 --> 00:26:37,130
automatically your your workloads on

00:26:34,920 --> 00:26:42,150
your office

00:26:37,130 --> 00:26:45,510
colocation or data center you can have

00:26:42,150 --> 00:26:48,480
something called Storage Gateway which

00:26:45,510 --> 00:26:57,720
is basically a VM that you connect in

00:26:48,480 --> 00:27:01,700
your in your VMware and basically it

00:26:57,720 --> 00:27:04,700
backs up on to AWS automatically

00:27:01,700 --> 00:27:04,700
automatically

00:27:07,160 --> 00:27:16,580
talking about restore you retrieve

00:27:12,470 --> 00:27:19,340
backups from object storage to bring up

00:27:16,580 --> 00:27:22,040
the required infrastructure in this case

00:27:19,340 --> 00:27:25,060
again using something like confirmation

00:27:22,040 --> 00:27:30,800
deployment manager resource manager or

00:27:25,060 --> 00:27:34,270
terraform you know exactly which is the

00:27:30,800 --> 00:27:36,980
ami ID that you need to use and because

00:27:34,270 --> 00:27:40,960
that particular ami is in the right

00:27:36,980 --> 00:27:44,540
region and share with the right account

00:27:40,960 --> 00:27:47,240
and you know exactly how the load

00:27:44,540 --> 00:27:50,150
balancer has to be configured and the

00:27:47,240 --> 00:27:52,550
health checks for the load balancer and

00:27:50,150 --> 00:27:55,250
you have everything automated and you

00:27:52,550 --> 00:28:01,880
treat your infrastructure as code it's

00:27:55,250 --> 00:28:04,850
not going to be a very high RTO you

00:28:01,880 --> 00:28:06,860
restore system from backup and you make

00:28:04,850 --> 00:28:11,560
sure you switch over to the new system

00:28:06,860 --> 00:28:11,560
by adjusting your DNS records

00:28:16,210 --> 00:28:25,380
bit of a strategies around recovering so

00:28:21,160 --> 00:28:25,380
we have something like a pilot light

00:28:25,590 --> 00:28:33,850
which means we will have our running

00:28:30,490 --> 00:28:37,330
system in this case we have amazon route

00:28:33,850 --> 00:28:39,040
53 and we're pointing pointing to in

00:28:37,330 --> 00:28:41,430
this case our web server which is

00:28:39,040 --> 00:28:45,640
connected to my application server and

00:28:41,430 --> 00:28:50,880
to my database the only thing in this

00:28:45,640 --> 00:28:54,930
case that we run like 24/7 is my

00:28:50,880 --> 00:28:58,270
secondary database which is a replica

00:28:54,930 --> 00:29:03,430
right it's a red replica from my master

00:28:58,270 --> 00:29:15,640
database I don't have any servers

00:29:03,430 --> 00:29:18,660
running on my SATA recovery region but

00:29:15,640 --> 00:29:18,660
when we have a problem

00:29:19,020 --> 00:29:27,220
we go and we start this we start this

00:29:22,630 --> 00:29:29,760
servers and we point my DNS on to the

00:29:27,220 --> 00:29:29,760
new system

00:29:31,830 --> 00:29:40,240
yes it will take time yes I will have

00:29:35,800 --> 00:29:42,790
downtime but I can I can tell you is

00:29:40,240 --> 00:29:46,050
going to be less than if you have to

00:29:42,790 --> 00:29:46,050
recover this

00:29:49,720 --> 00:29:58,480
it's very cost-effective yes because we

00:29:51,730 --> 00:30:00,490
don't have to run 24/7 the only thing

00:29:58,480 --> 00:30:07,150
that we need to do is we need to make

00:30:00,490 --> 00:30:09,880
sure that our OEM eyes are sync with the

00:30:07,150 --> 00:30:16,720
other region we need to ensure that we

00:30:09,880 --> 00:30:22,510
have all the software packages that we

00:30:16,720 --> 00:30:26,340
need when the instance boots and try to

00:30:22,510 --> 00:30:26,340
do it at least once a month

00:30:26,790 --> 00:30:35,200
not necessarily pointing the production

00:30:31,230 --> 00:30:43,720
DNS but at least to I prod to dot

00:30:35,200 --> 00:30:45,010
mydomain.com and see if it works so in

00:30:43,720 --> 00:30:48,370
case of a disaster

00:30:45,010 --> 00:30:50,650
we just bring up resources around the

00:30:48,370 --> 00:30:52,960
replicated core data set we scale the

00:30:50,650 --> 00:30:55,360
systems as needed to handle the current

00:30:52,960 --> 00:30:58,540
production traffic yes it's gonna be a

00:30:55,360 --> 00:31:00,100
degradation of service but at least

00:30:58,540 --> 00:31:03,510
we're gonna we're not gonna be down for

00:31:00,100 --> 00:31:03,510
hours if not days

00:31:05,910 --> 00:31:12,250
the fully working low capacity standby

00:31:08,740 --> 00:31:18,700
system is quite similar but in this case

00:31:12,250 --> 00:31:22,660
we are running this 24/7 on a small

00:31:18,700 --> 00:31:24,730
scale you might say okay in order to

00:31:22,660 --> 00:31:27,720
save money rather than having these out

00:31:24,730 --> 00:31:31,510
of scaling groups running I just put on

00:31:27,720 --> 00:31:35,380
0 and whenever I have an issue I just

00:31:31,510 --> 00:31:37,240
run in some script that modifies my out

00:31:35,380 --> 00:31:40,390
of scaling group configuration I just

00:31:37,240 --> 00:31:41,560
have one one yes it's gonna take a

00:31:40,390 --> 00:31:45,100
little bit of time but it's gonna be

00:31:41,560 --> 00:31:47,320
quite automated in this case what we do

00:31:45,100 --> 00:31:52,120
is exactly the same when we have a

00:31:47,320 --> 00:31:55,450
problem here we just reroute to my new

00:31:52,120 --> 00:31:57,970
zone and and we start adding more

00:31:55,450 --> 00:32:00,430
capacity as as we think is is needed is

00:31:57,970 --> 00:32:02,380
going to be automated due to auto

00:32:00,430 --> 00:32:05,040
scaling groups and some monitoring that

00:32:02,380 --> 00:32:05,040
we have in place

00:32:05,659 --> 00:32:12,720
advantages we can take some production

00:32:09,870 --> 00:32:15,899
traffic at any time which means that we

00:32:12,720 --> 00:32:20,130
could potentially run cannery releases

00:32:15,899 --> 00:32:26,899
on my secondary song I can just reroute

00:32:20,130 --> 00:32:31,340
a a small portion of traffic onto my dr

00:32:26,899 --> 00:32:31,340
zone or region

00:32:31,940 --> 00:32:39,899
it helps me save some money because i

00:32:36,019 --> 00:32:42,769
don't have to run a full capacity i just

00:32:39,899 --> 00:32:46,110
run a small portion of my infrastructure

00:32:42,769 --> 00:32:52,019
in terms of preparation quite similar to

00:32:46,110 --> 00:32:58,019
pilot light and the good thing is that i

00:32:52,019 --> 00:33:03,779
can continuously test this model i don't

00:32:58,019 --> 00:33:10,440
have to run or put backups to work every

00:33:03,779 --> 00:33:13,139
month or every year in case of a

00:33:10,440 --> 00:33:16,980
disaster are immediately fails over

00:33:13,139 --> 00:33:23,730
because i have a health check in my dns

00:33:16,980 --> 00:33:31,529
record it should out of scale to take

00:33:23,730 --> 00:33:36,450
all the the production load and in terms

00:33:31,529 --> 00:33:38,340
of RTO and RPO well it's gonna take some

00:33:36,450 --> 00:33:42,299
time to just get the full production

00:33:38,340 --> 00:33:44,880
load the other option is just the

00:33:42,299 --> 00:33:48,899
typical master master which in this case

00:33:44,880 --> 00:33:51,779
won't be master master because i have a

00:33:48,899 --> 00:33:57,330
great replica or in this case like a

00:33:51,779 --> 00:33:59,299
standby secondary database so make sure

00:33:57,330 --> 00:34:02,250
that when you do something like this you

00:33:59,299 --> 00:34:07,980
still need to come back from these or

00:34:02,250 --> 00:34:13,550
the region to the master DB and and that

00:34:07,980 --> 00:34:13,550
could be costly depending on the vendor

00:34:16,790 --> 00:34:22,800
but yeah in this case Vantage's is that

00:34:19,919 --> 00:34:29,270
you can switch at any time no matter

00:34:22,800 --> 00:34:32,370
which one is down you can you can scale

00:34:29,270 --> 00:34:34,260
both simultaneously so you can say okay

00:34:32,370 --> 00:34:36,360
I'm gonna put five servers here five

00:34:34,260 --> 00:34:41,970
servers there and you you don't need to

00:34:36,360 --> 00:34:45,149
run kind of ten servers in one place in

00:34:41,970 --> 00:34:48,750
case of a disaster yes five servers here

00:34:45,149 --> 00:34:52,610
are gonna be out of service but then

00:34:48,750 --> 00:34:57,690
you're gonna have ten in the other one

00:34:52,610 --> 00:35:02,540
so in a trying to recap a little bit

00:34:57,690 --> 00:35:06,000
about recovery strategies we have costly

00:35:02,540 --> 00:35:09,900
here with multi-site active active and

00:35:06,000 --> 00:35:15,420
then we go to the left yes

00:35:09,900 --> 00:35:21,960
to the left to a very low-cost but more

00:35:15,420 --> 00:35:25,320
kind of a time you know to get this up

00:35:21,960 --> 00:35:30,360
and running right so backup and restore

00:35:25,320 --> 00:35:36,270
yes you only gonna spend money putting

00:35:30,360 --> 00:35:36,840
your your snapshots in place but that's

00:35:36,270 --> 00:35:39,060
it

00:35:36,840 --> 00:35:41,160
pile up light you still going to need

00:35:39,060 --> 00:35:45,870
something running on the on the other

00:35:41,160 --> 00:35:47,970
side and then we we go up to fully

00:35:45,870 --> 00:35:56,820
working low capacity and and multi-site

00:35:47,970 --> 00:36:01,220
active active let's think about some

00:35:56,820 --> 00:36:06,770
sort of a scenario here so we have Bob

00:36:01,220 --> 00:36:09,480
so Bob is in charge of defining the best

00:36:06,770 --> 00:36:11,160
disaster recovery strategy for a hybrid

00:36:09,480 --> 00:36:14,790
architecture and heated the set up based

00:36:11,160 --> 00:36:18,000
on the following requirements so he's

00:36:14,790 --> 00:36:23,100
been told we need to have an RTO of 60

00:36:18,000 --> 00:36:26,339
minutes our backups are stored in the

00:36:23,100 --> 00:36:28,589
cloud good and are taking daily

00:36:26,339 --> 00:36:30,509
our appeal has to be less than eight

00:36:28,589 --> 00:36:32,910
hours and we need to be able to build a

00:36:30,509 --> 00:36:34,799
new environment quick and our

00:36:32,910 --> 00:36:38,719
application runs in the cloud but our

00:36:34,799 --> 00:36:46,079
database still in our local data center

00:36:38,719 --> 00:36:50,309
so our Tier one our RPO eight hours can

00:36:46,079 --> 00:36:53,430
be achieved who says yes raise your

00:36:50,309 --> 00:36:58,579
hands who says No

00:36:53,430 --> 00:37:02,519
raise your hands well we have something

00:36:58,579 --> 00:37:05,579
RTO and RPO there is no certainty they

00:37:02,519 --> 00:37:10,680
can achieve one our RTO an eight hours

00:37:05,579 --> 00:37:13,650
RPO why well because the database the

00:37:10,680 --> 00:37:21,449
backups run daily so RPO cannot be eight

00:37:13,650 --> 00:37:24,359
hours right do you know how much time

00:37:21,449 --> 00:37:30,079
will it take to build a new database and

00:37:24,359 --> 00:37:30,079
import the data from your data center

00:37:31,910 --> 00:37:42,239
how much it will take you to copy from

00:37:35,039 --> 00:37:44,069
the cloud to your on-prem database is

00:37:42,239 --> 00:37:49,769
your application code full of variables

00:37:44,069 --> 00:37:52,199
to cope with a change of endpoints is

00:37:49,769 --> 00:37:54,299
our infrastructure treated as code can

00:37:52,199 --> 00:37:58,589
you deploy a new environment within tens

00:37:54,299 --> 00:38:00,959
of minutes who says yes who can deploy a

00:37:58,589 --> 00:38:08,489
new fully production environment here in

00:38:00,959 --> 00:38:11,579
less than one hour that is the question

00:38:08,489 --> 00:38:17,160
you need to start making yourself so

00:38:11,579 --> 00:38:21,719
let's put a bit of tips here start

00:38:17,160 --> 00:38:26,309
simple you don't have to build an

00:38:21,719 --> 00:38:32,309
environment in less than an hour start

00:38:26,309 --> 00:38:34,650
with less than a day next quarter less

00:38:32,309 --> 00:38:38,789
than 4 hours next quarter less than an

00:38:34,650 --> 00:38:40,140
hour this is really important check for

00:38:38,789 --> 00:38:42,480
software licensing issues

00:38:40,140 --> 00:38:46,530
maybe you cannot run to environments at

00:38:42,480 --> 00:38:50,580
the same time it really depends on what

00:38:46,530 --> 00:38:55,620
software you're running in your in your

00:38:50,580 --> 00:38:59,880
images in your instances practice game

00:38:55,620 --> 00:39:02,790
day and that is something that companies

00:38:59,880 --> 00:39:05,730
don't like they don't like to spend time

00:39:02,790 --> 00:39:09,420
in game days and when I say game days

00:39:05,730 --> 00:39:14,580
it's not playing minecraft or for night

00:39:09,420 --> 00:39:20,130
I'm saying trying to see how you can

00:39:14,580 --> 00:39:23,390
recover from a disaster have you heard

00:39:20,130 --> 00:39:28,740
about cows monkey have you heard about

00:39:23,390 --> 00:39:32,580
conga monkey Hong Kong cows or something

00:39:28,740 --> 00:39:37,800
other so cows monkey is something that

00:39:32,580 --> 00:39:39,500
start removing instances of shutting

00:39:37,800 --> 00:39:44,010
down instances from your infrastructure

00:39:39,500 --> 00:39:46,320
randomly and with that you don't if I oh

00:39:44,010 --> 00:39:48,390
ok so if that server it goes down

00:39:46,320 --> 00:39:52,010
everything goes down oh we need to fix

00:39:48,390 --> 00:39:57,780
that you start discovering these sort of

00:39:52,010 --> 00:40:01,620
issues one routing table goes down or

00:39:57,780 --> 00:40:05,400
delete it everything is down ok we need

00:40:01,620 --> 00:40:09,860
to fix that somehow so you start making

00:40:05,400 --> 00:40:13,950
your infrastructure more resilient and

00:40:09,860 --> 00:40:18,180
unable to cope with weird things that

00:40:13,950 --> 00:40:20,100
could happen in your cloud vendor don't

00:40:18,180 --> 00:40:24,830
blame your vendor or blame yourself for

00:40:20,100 --> 00:40:24,830
not planning accordingly

00:40:26,850 --> 00:40:34,840
when you do this kind of cows

00:40:29,730 --> 00:40:38,520
engineering make sure that the system is

00:40:34,840 --> 00:40:43,540
failing the way that you expect if not

00:40:38,520 --> 00:40:49,990
make sure you do something to avoid that

00:40:43,540 --> 00:40:53,710
next time how quick you fix it doesn't

00:40:49,990 --> 00:40:56,200
matter if it was eight hours at least

00:40:53,710 --> 00:41:03,460
you know how long it will take on a real

00:40:56,200 --> 00:41:13,590
case scenario who's monitoring 100% of

00:41:03,460 --> 00:41:17,920
your infrastructure here not many and

00:41:13,590 --> 00:41:23,860
make sure you monitor everything make

00:41:17,920 --> 00:41:27,100
sure that you identify from a 500 arrow

00:41:23,860 --> 00:41:32,050
400 arrow to a 200 again how long did it

00:41:27,100 --> 00:41:35,250
take is no our on telephone system is up

00:41:32,050 --> 00:41:35,250
no it's not

00:41:37,710 --> 00:41:49,170
make sure the entire team's team knows

00:41:42,869 --> 00:41:57,059
how to recover from a disaster you need

00:41:49,170 --> 00:42:01,670
to reduce your mean time to recover you

00:41:57,059 --> 00:42:05,069
need to make sure that if Bob is on

00:42:01,670 --> 00:42:13,140
holidays you don't call him because

00:42:05,069 --> 00:42:18,000
something is down follow up on incidents

00:42:13,140 --> 00:42:19,670
to uncover root causes what happened how

00:42:18,000 --> 00:42:22,950
did it happen

00:42:19,670 --> 00:42:26,819
what's the root cause and how can we

00:42:22,950 --> 00:42:29,579
prevent it when I was managing a

00:42:26,819 --> 00:42:35,130
technical team before for every single

00:42:29,579 --> 00:42:39,119
p1 we had I said I want to know what

00:42:35,130 --> 00:42:42,510
caused and I want to have at least one

00:42:39,119 --> 00:42:43,980
item in the backlog to fix it then we

00:42:42,510 --> 00:42:49,500
can prioritize it yes that's another

00:42:43,980 --> 00:42:54,230
issue but at least we know what went

00:42:49,500 --> 00:42:54,230
wrong and how can we fix it next time

00:42:54,829 --> 00:42:59,750
start calibrating your alerting tools I

00:43:00,289 --> 00:43:08,670
hate when I received 10 messages because

00:43:05,960 --> 00:43:11,490
something is not really down is

00:43:08,670 --> 00:43:17,010
something it could go down but I still

00:43:11,490 --> 00:43:20,700
have 10,000 messages right so try to

00:43:17,010 --> 00:43:24,510
automate those alerts to potentially fix

00:43:20,700 --> 00:43:29,339
itself so self-healing is like something

00:43:24,510 --> 00:43:31,289
that we all can have at some point but

00:43:29,339 --> 00:43:33,589
we need to make sure that we are going

00:43:31,289 --> 00:43:33,589
in that direction

00:43:38,760 --> 00:43:42,780
create rum books

00:43:43,960 --> 00:43:48,579
make sure that whenever you do our

00:43:45,789 --> 00:43:50,910
deployment you have the checks how many

00:43:48,579 --> 00:43:55,539
of you are using something like Jenkins

00:43:50,910 --> 00:43:58,720
to deploy and and you love the green

00:43:55,539 --> 00:43:59,740
ticks right so this test passed tick

00:43:58,720 --> 00:44:03,369
this test passed

00:43:59,740 --> 00:44:07,349
tick well make sure that you have a run

00:44:03,369 --> 00:44:07,349
book for when you deploy your

00:44:07,380 --> 00:44:14,289
infrastructure and your code and you say

00:44:10,089 --> 00:44:25,960
ok this is good this is good this is how

00:44:14,289 --> 00:44:30,970
we do it don't take shortcuts I know for

00:44:25,960 --> 00:44:33,630
a friend that they they have two guys

00:44:30,970 --> 00:44:36,549
sitting on a room and whenever I

00:44:33,630 --> 00:44:38,589
monitoring we have a monitoring system

00:44:36,549 --> 00:44:40,539
of TV and whenever something is red

00:44:38,589 --> 00:44:44,410
these are skill and we saw the instance

00:44:40,539 --> 00:44:49,170
it goes back green amazing eight hours

00:44:44,410 --> 00:44:52,270
doing that and I say hey can we just

00:44:49,170 --> 00:44:55,240
tell your boss to you know I can do it

00:44:52,270 --> 00:44:59,230
for free I just go and just I don't mind

00:44:55,240 --> 00:45:02,529
but pour these two guys now this is when

00:44:59,230 --> 00:45:03,730
I see a green board that's it anytime is

00:45:02,529 --> 00:45:10,210
a red one

00:45:03,730 --> 00:45:16,510
restart keep going so fix the issue for

00:45:10,210 --> 00:45:22,720
good right if you don't know how to do

00:45:16,510 --> 00:45:24,640
it or you need some help my company can

00:45:22,720 --> 00:45:28,480
get up to 10% of your age of this bill

00:45:24,640 --> 00:45:34,390
in a SS credit you have a code here if

00:45:28,480 --> 00:45:39,160
not I have some cards here anyway just

00:45:34,390 --> 00:45:42,670
let me know so yes that's it

00:45:39,160 --> 00:45:47,380
I would love to have questions from you

00:45:42,670 --> 00:45:49,240
I think we still have time and if you

00:45:47,380 --> 00:45:52,420
guys love stickers

00:45:49,240 --> 00:45:55,440
I have stickers plenty of them and also

00:45:52,420 --> 00:46:04,559
have some teachers to give away so

00:45:55,440 --> 00:46:09,410
thank you very much for coming so do you

00:46:04,559 --> 00:46:09,410
have any questions to Fernando

00:46:18,750 --> 00:46:24,090
thank you do you have any special

00:46:21,590 --> 00:46:26,730
recommendations for the TTL values for

00:46:24,090 --> 00:46:29,119
DNS so one of the steps of the recovery

00:46:26,730 --> 00:46:32,250
was changing DNS to the new active zone

00:46:29,119 --> 00:46:36,180
does route 53 have anything special

00:46:32,250 --> 00:46:38,550
about it or if you have long dns details

00:46:36,180 --> 00:46:41,460
you still have to wait for that for the

00:46:38,550 --> 00:46:46,080
new region to become active or visible

00:46:41,460 --> 00:46:49,109
to the customers well the lower the TTL

00:46:46,080 --> 00:46:52,140
is the better but it always depends I

00:46:49,109 --> 00:46:54,540
mean I don't want to say yes put 60

00:46:52,140 --> 00:46:56,910
seconds and then you say you put the TTL

00:46:54,540 --> 00:47:00,780
60 seconds and my servers are taking 2

00:46:56,910 --> 00:47:01,820
minutes to come up and well it depends

00:47:00,780 --> 00:47:05,730
really

00:47:01,820 --> 00:47:10,500
the you're not gonna change that often

00:47:05,730 --> 00:47:16,290
your load balancer right so you can have

00:47:10,500 --> 00:47:19,830
like global DNS records and then within

00:47:16,290 --> 00:47:24,810
particular with with with Google you

00:47:19,830 --> 00:47:28,500
know you don't have regions or kind of

00:47:24,810 --> 00:47:32,339
the VPC is replace global thing so your

00:47:28,500 --> 00:47:34,589
load balancer is a global with AWS in

00:47:32,339 --> 00:47:39,750
particular you need to have one load

00:47:34,589 --> 00:47:42,180
balancer in each region but again for a

00:47:39,750 --> 00:47:45,300
region to go down and just never happen

00:47:42,180 --> 00:47:49,980
on AWS it has to be like a major like

00:47:45,300 --> 00:47:52,080
alien invasion event right so having

00:47:49,980 --> 00:47:55,589
multiple load balancers in multiple

00:47:52,080 --> 00:48:01,760
zones if a load balancer goes down for

00:47:55,589 --> 00:48:01,760
instance is more than enough thanks

00:48:02,050 --> 00:48:09,610
any further questions Thank You Fernando

00:48:08,260 --> 00:48:10,600
thank you very much

00:48:09,610 --> 00:48:16,340
enjoy your lunch

00:48:10,600 --> 00:48:16,340
[Applause]

00:48:18,060 --> 00:48:22,150

YouTube URL: https://www.youtube.com/watch?v=ODesUzG0DSQ


