Title: OSDC 2019: Kubernetes Custom Resources with Kubeless and Metacontroller by Michael GrÃ¼ner
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	Kubernetes offers a lot of basic resources to accomodate most application requirements but sometimes this is not enough. Kubernetes 1.7 introduced a new CustomResourceDefinition (CRD) resource to create your very own kubernetes resources. Although CRDs themselves are easy to use, they provide no way to define the actual logic behind the custom resource. For this the Metacontroller and Kubeless projects can be used, making the whole process a breeze.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:14,610 --> 00:00:19,560
[Applause]

00:00:16,430 --> 00:00:21,630
yeah hi everyone and thanks for joining

00:00:19,560 --> 00:00:23,789
them this talk this is my very first

00:00:21,630 --> 00:00:27,150
conference talk so let's see how this

00:00:23,789 --> 00:00:29,660
works out as you might have guessed from

00:00:27,150 --> 00:00:32,550
the title I will be talking today about

00:00:29,660 --> 00:00:35,219
custom resource of communities and a way

00:00:32,550 --> 00:00:37,350
to use it to expand the functionality of

00:00:35,219 --> 00:00:39,690
your kubernetes cluster but before that

00:00:37,350 --> 00:00:42,570
I would like to introduce myself and my

00:00:39,690 --> 00:00:46,829
employer I work for a company called

00:00:42,570 --> 00:00:50,010
beta informatics Aggie or short Bedok we

00:00:46,829 --> 00:00:53,300
are located in Bern Switzerland and I

00:00:50,010 --> 00:00:56,370
assume no one here has ever heard of us

00:00:53,300 --> 00:00:58,260
because we do mostly government stuff

00:00:56,370 --> 00:01:01,379
and more specifically we do government

00:00:58,260 --> 00:01:03,510
stuff with a canton of Bern but if you

00:01:01,379 --> 00:01:05,549
live in Bern well if you do your text

00:01:03,510 --> 00:01:09,450
declaration online you will be using

00:01:05,549 --> 00:01:11,880
systems developed and operated by us we

00:01:09,450 --> 00:01:17,700
also do stuff for hospitals police

00:01:11,880 --> 00:01:20,909
public transportation you name it as for

00:01:17,700 --> 00:01:23,070
me I am responsible for our Q&A this

00:01:20,909 --> 00:01:24,900
platform that means I have to do all the

00:01:23,070 --> 00:01:26,939
formal stuff regarding platform

00:01:24,900 --> 00:01:29,430
definitions I have to keep it running

00:01:26,939 --> 00:01:31,409
together with colleagues but also and

00:01:29,430 --> 00:01:35,070
more interestingly I'm responsible for

00:01:31,409 --> 00:01:37,860
also developing additional tools on and

00:01:35,070 --> 00:01:40,530
for our humanities clusters this means

00:01:37,860 --> 00:01:42,090
for example I work on deploy pipelines

00:01:40,530 --> 00:01:46,290
scripts and tools to deploy applications

00:01:42,090 --> 00:01:51,060
and stuff like this here extending cuban

00:01:46,290 --> 00:01:53,430
eaters itself so with that out of the

00:01:51,060 --> 00:01:56,369
way let's get to the technical details I

00:01:53,430 --> 00:01:58,710
will skip the customary question of who

00:01:56,369 --> 00:02:00,689
of yous using human it is because if you

00:01:58,710 --> 00:02:03,360
don't the only thing I can tell you

00:02:00,689 --> 00:02:05,770
today is use cube Anita so you can use

00:02:03,360 --> 00:02:08,140
what I will be telling you

00:02:05,770 --> 00:02:11,260
so let's get started what do we want to

00:02:08,140 --> 00:02:13,930
achieve the actual goal of the tack of

00:02:11,260 --> 00:02:17,500
the talk is to show you a way to create

00:02:13,930 --> 00:02:20,410
your very own cue bonitas resources that

00:02:17,500 --> 00:02:22,780
look like behave like and can be used

00:02:20,410 --> 00:02:26,440
like every other cue bonitas resource

00:02:22,780 --> 00:02:30,310
you know and hopefully laughs so as you

00:02:26,440 --> 00:02:32,200
can see in this small example here we

00:02:30,310 --> 00:02:33,670
have a resource type my resource I

00:02:32,200 --> 00:02:37,810
assume you have never heard of it before

00:02:33,670 --> 00:02:41,440
because it doesn't exist yet and you can

00:02:37,810 --> 00:02:45,610
just create it with cube CTL or whatever

00:02:41,440 --> 00:02:47,500
means you use to create resources you

00:02:45,610 --> 00:02:49,600
can delete it you can list that you can

00:02:47,500 --> 00:02:52,239
manipulate it whatever you have to do

00:02:49,600 --> 00:02:55,330
and want to do but why would you like to

00:02:52,239 --> 00:02:57,569
do that well the best aspect of this

00:02:55,330 --> 00:03:02,620
would be to say you can create

00:02:57,569 --> 00:03:04,239
self-service yes type of resources for

00:03:02,620 --> 00:03:07,390
your customer for your users of your

00:03:04,239 --> 00:03:09,299
cluster for example you if you want to

00:03:07,390 --> 00:03:13,600
have every user to be able to create

00:03:09,299 --> 00:03:16,900
their own object store a stress-free

00:03:13,600 --> 00:03:19,420
comfortable object store you could

00:03:16,900 --> 00:03:22,950
create custom resource that does exactly

00:03:19,420 --> 00:03:26,290
that and then you can add roads and

00:03:22,950 --> 00:03:28,120
limits whatever you need to work on this

00:03:26,290 --> 00:03:30,880
resource which behaves like every other

00:03:28,120 --> 00:03:32,650
one there are other ways to achieve

00:03:30,880 --> 00:03:35,140
similar goals which have which have

00:03:32,650 --> 00:03:38,709
disadvantages for example you could use

00:03:35,140 --> 00:03:41,109
helm to allow users to deploy their own

00:03:38,709 --> 00:03:43,600
home shot but if you would like to do

00:03:41,109 --> 00:03:45,250
this cluster right well you would have

00:03:43,600 --> 00:03:47,560
to give all your users access to a

00:03:45,250 --> 00:03:50,639
central home instance which means they

00:03:47,560 --> 00:03:55,569
can control your whole cluster which is

00:03:50,639 --> 00:04:00,819
mostly not what you want so how do we

00:03:55,569 --> 00:04:04,540
get to this goal well we need three

00:04:00,819 --> 00:04:06,700
parts the first one is a resource

00:04:04,540 --> 00:04:10,239
definition making your new resource

00:04:06,700 --> 00:04:12,700
known to queue bonitas that's it nothing

00:04:10,239 --> 00:04:14,919
more to that man some logic to do

00:04:12,700 --> 00:04:16,540
something because just having

00:04:14,919 --> 00:04:18,760
communities know about your resource

00:04:16,540 --> 00:04:19,660
it's not really useful you want to

00:04:18,760 --> 00:04:22,390
actually something

00:04:19,660 --> 00:04:24,610
happen when you create it and the last

00:04:22,390 --> 00:04:26,470
point is to make the logic and the

00:04:24,610 --> 00:04:29,140
definition will stick together and work

00:04:26,470 --> 00:04:33,130
in unison so that well you can do

00:04:29,140 --> 00:04:37,030
whatever you want so let's start with

00:04:33,130 --> 00:04:39,430
the easiest of this three parts the

00:04:37,030 --> 00:04:41,680
resource definition for that there's a

00:04:39,430 --> 00:04:45,180
native cube anita's resource that's

00:04:41,680 --> 00:04:48,850
called custom resource definition and

00:04:45,180 --> 00:04:52,300
that is used to take cuban eaters about

00:04:48,850 --> 00:04:54,810
your new resource and a resource as you

00:04:52,300 --> 00:05:01,690
hopefully know consists of three parts

00:04:54,810 --> 00:05:04,930
that's an api group a version and kind

00:05:01,690 --> 00:05:08,860
or what you normally use a name for

00:05:04,930 --> 00:05:13,450
example deployments are in the API group

00:05:08,860 --> 00:05:16,930
apps have a version of one and well have

00:05:13,450 --> 00:05:18,910
a kind of deployment so the custom

00:05:16,930 --> 00:05:22,180
resource is used to introduce these

00:05:18,910 --> 00:05:26,650
three parts to cuban eaters so in this

00:05:22,180 --> 00:05:29,140
case we create a resource definition for

00:05:26,650 --> 00:05:35,169
an API for an API group called stable my

00:05:29,140 --> 00:05:38,919
company.com that has a version one and a

00:05:35,169 --> 00:05:42,580
kind of my resource and that's actually

00:05:38,919 --> 00:05:44,800
it if you deploy this to cuban eaters

00:05:42,580 --> 00:05:48,220
you can actually start creating

00:05:44,800 --> 00:05:50,350
resources of the kind my resource it

00:05:48,220 --> 00:05:52,150
won't do you any good because nothing

00:05:50,350 --> 00:05:54,880
would happen if Cubans would just say

00:05:52,150 --> 00:05:57,690
well thanks I've created the resource

00:05:54,880 --> 00:06:01,990
but there's no logic associated to it

00:05:57,690 --> 00:06:04,270
but I'm going ahead of myself let's

00:06:01,990 --> 00:06:08,380
create a big picture and add the

00:06:04,270 --> 00:06:10,750
different pieces to it so we start small

00:06:08,380 --> 00:06:14,320
with a lot of nothing we have our custom

00:06:10,750 --> 00:06:17,500
resource definition and the API which we

00:06:14,320 --> 00:06:21,460
used to created let's get over to the

00:06:17,500 --> 00:06:24,730
next part the logic part for that we use

00:06:21,460 --> 00:06:26,680
a tool called cublas and cublas is a

00:06:24,730 --> 00:06:28,960
so-called function as a service

00:06:26,680 --> 00:06:31,240
framework if you have never heard of

00:06:28,960 --> 00:06:32,770
this term it's basically a framework

00:06:31,240 --> 00:06:33,490
where you can say well here's my code

00:06:32,770 --> 00:06:35,620
make it

00:06:33,490 --> 00:06:37,930
it's a web service that's very

00:06:35,620 --> 00:06:40,870
oversimplified description of what

00:06:37,930 --> 00:06:44,410
function as a service is but but for our

00:06:40,870 --> 00:06:48,430
case for use K that's enough so we use

00:06:44,410 --> 00:06:52,270
cublas to create our actual resource

00:06:48,430 --> 00:06:54,550
logic and form of a web service so how

00:06:52,270 --> 00:06:56,889
does it look like how do we do that well

00:06:54,550 --> 00:06:59,560
again as every single key bonitas we use

00:06:56,889 --> 00:07:02,800
the cube Anita's resource in this case a

00:06:59,560 --> 00:07:05,229
function this is a normal cube Anita's

00:07:02,800 --> 00:07:07,680
function resource header we have again

00:07:05,229 --> 00:07:11,020
an API version a kind and some metadata

00:07:07,680 --> 00:07:13,990
in addition to that we have to tell

00:07:11,020 --> 00:07:16,630
cublas what actual runtime we want our

00:07:13,990 --> 00:07:20,319
code to be executed in in this example I

00:07:16,630 --> 00:07:24,880
just used Python 2.7 but you could also

00:07:20,319 --> 00:07:27,940
use Ruby go Java and a bunch of other

00:07:24,880 --> 00:07:29,530
runtimes we have to also tell it which

00:07:27,940 --> 00:07:32,409
function to call so it knows well

00:07:29,530 --> 00:07:34,750
actually what function to call we also

00:07:32,409 --> 00:07:37,930
have to give it a checksum of this

00:07:34,750 --> 00:07:40,419
function Q plus uses this to ensure that

00:07:37,930 --> 00:07:42,699
the code it is executing is actually the

00:07:40,419 --> 00:07:46,479
code that you wanted to execute it's

00:07:42,699 --> 00:07:48,940
just a safety measure we also have to

00:07:46,479 --> 00:07:50,560
give it a content type in this case text

00:07:48,940 --> 00:07:52,240
because we inline the function you could

00:07:50,560 --> 00:07:54,520
also provide it in form of a zip file

00:07:52,240 --> 00:07:57,849
but for this example just stick with a

00:07:54,520 --> 00:08:00,460
simple one and we have to provide the

00:07:57,849 --> 00:08:02,169
actual function in this case a simple

00:08:00,460 --> 00:08:06,849
two line pious and hello world example

00:08:02,169 --> 00:08:09,340
what else did you expect the interesting

00:08:06,849 --> 00:08:12,669
part here is the parameters the

00:08:09,340 --> 00:08:16,120
parameters are provided by Q plus ven

00:08:12,669 --> 00:08:17,620
your web service is called and the most

00:08:16,120 --> 00:08:19,659
important one is the event

00:08:17,620 --> 00:08:21,819
one with a data field which actually

00:08:19,659 --> 00:08:25,300
contains parameters given to your

00:08:21,819 --> 00:08:27,880
function in JSON format which q plus

00:08:25,300 --> 00:08:30,810
then converts and whatever native data

00:08:27,880 --> 00:08:35,200
format your language has so in this case

00:08:30,810 --> 00:08:38,649
we expect our data to contain a field

00:08:35,200 --> 00:08:41,320
called world and then just print it so

00:08:38,649 --> 00:08:45,640
how does it look like well we can just

00:08:41,320 --> 00:08:47,050
use cur to test our function in this

00:08:45,640 --> 00:08:48,970
case was go to call

00:08:47,050 --> 00:08:52,480
with some json data where the world view

00:08:48,970 --> 00:08:56,010
just contains cuban eaters and well call

00:08:52,480 --> 00:08:58,000
our function in the test namespace and

00:08:56,010 --> 00:09:03,339
we get what we expect

00:08:58,000 --> 00:09:07,120
hello cuban eaters so that's our

00:09:03,339 --> 00:09:09,700
function I hope you can imagine based on

00:09:07,120 --> 00:09:11,620
this you can implement a lot of logic we

00:09:09,700 --> 00:09:14,890
said a lot of code depending on what you

00:09:11,620 --> 00:09:19,450
actually need so let's add this to our

00:09:14,890 --> 00:09:22,959
big picture so now we have the function

00:09:19,450 --> 00:09:24,760
on our right side on our left side still

00:09:22,959 --> 00:09:26,980
the API was a custom resource to finish

00:09:24,760 --> 00:09:28,750
on the rest right side or logic and form

00:09:26,980 --> 00:09:30,880
of a cube less function and a big

00:09:28,750 --> 00:09:32,920
nothing in the middle that's the actual

00:09:30,880 --> 00:09:36,160
tricky part because now we have to

00:09:32,920 --> 00:09:38,709
combine our function or logic with our

00:09:36,160 --> 00:09:40,959
custom resource definition so let's get

00:09:38,709 --> 00:09:43,750
to the last part to the magic part and

00:09:40,959 --> 00:09:46,360
as everything in the area of cloud has

00:09:43,750 --> 00:09:46,660
to be called as service let's coin the

00:09:46,360 --> 00:09:50,680
term

00:09:46,660 --> 00:09:52,959
magic as a service well by magic because

00:09:50,680 --> 00:09:55,089
I think it was a fatty Clarke correct me

00:09:52,959 --> 00:09:56,320
if I'm wrong who said every sufficient

00:09:55,089 --> 00:09:57,459
enough technology is indistinguishable

00:09:56,320 --> 00:10:01,600
from magic

00:09:57,459 --> 00:10:04,360
I think that can apply here just to give

00:10:01,600 --> 00:10:06,010
you an example the code for the stateful

00:10:04,360 --> 00:10:08,200
set the native state for said resource

00:10:06,010 --> 00:10:11,920
of cuban eaters is around 9,000 lines of

00:10:08,200 --> 00:10:15,040
code you can reimplemented full sets

00:10:11,920 --> 00:10:18,459
with meter controller with around 200

00:10:15,040 --> 00:10:21,399
lines of JavaScript they actually did

00:10:18,459 --> 00:10:26,589
that who can check the code for that on

00:10:21,399 --> 00:10:28,930
the example github repository and that's

00:10:26,589 --> 00:10:32,770
the main thing it does is it encapsulate

00:10:28,930 --> 00:10:35,290
a lot of API magic behind an easy-to-use

00:10:32,770 --> 00:10:38,740
Cuban it is native interface that we can

00:10:35,290 --> 00:10:43,329
just use and we don't have to care about

00:10:38,740 --> 00:10:47,709
all the messy details so yeah how do we

00:10:43,329 --> 00:10:49,870
do it do that again we use a Cuban it is

00:10:47,709 --> 00:10:53,260
resource everything is a Cuban it is

00:10:49,870 --> 00:10:56,680
resource the normal header as expected

00:10:53,260 --> 00:10:59,920
metadata kind kind API version and not a

00:10:56,680 --> 00:11:03,119
spec we first have to

00:10:59,920 --> 00:11:06,309
on what parent resource it has to listen

00:11:03,119 --> 00:11:07,779
this is our custom resource we just

00:11:06,309 --> 00:11:12,220
defined in this case table my

00:11:07,779 --> 00:11:14,619
company.com my resource version 1 we

00:11:12,220 --> 00:11:17,679
also have to tell at what child resource

00:11:14,619 --> 00:11:19,809
at the test to create alright what it

00:11:17,679 --> 00:11:24,999
should expect that will be created in

00:11:19,809 --> 00:11:28,149
this case I just used pots we also have

00:11:24,999 --> 00:11:30,699
to tell it and what it should do when

00:11:28,149 --> 00:11:32,499
the resource changes so for example our

00:11:30,699 --> 00:11:34,540
parent resources changes we add some

00:11:32,499 --> 00:11:36,309
configuration what happens to the child

00:11:34,540 --> 00:11:39,249
resources when some parameters change

00:11:36,309 --> 00:11:41,549
there in this case other we tell it to

00:11:39,249 --> 00:11:44,649
delete the pots and create them and you

00:11:41,549 --> 00:11:46,389
you could also say in place but which

00:11:44,649 --> 00:11:50,009
means it just updates the resource but

00:11:46,389 --> 00:11:52,959
well for pots that's not really useful

00:11:50,009 --> 00:11:56,199
you also have to tell it how to handle

00:11:52,959 --> 00:11:58,329
selectors so I have to assume you all

00:11:56,199 --> 00:12:00,309
know how a stateful set or deployment is

00:11:58,329 --> 00:12:03,309
created because where you need selectors

00:12:00,309 --> 00:12:05,019
you have to tell a deployment how to

00:12:03,309 --> 00:12:07,089
associate the pots it creates with

00:12:05,019 --> 00:12:09,999
itself it knows what it it's managed

00:12:07,089 --> 00:12:10,749
that's a selector you have to do this

00:12:09,999 --> 00:12:13,119
here too

00:12:10,749 --> 00:12:16,799
except you don't want to then you can

00:12:13,119 --> 00:12:19,660
tell meter controller to handle

00:12:16,799 --> 00:12:21,509
selectors itself and the resource you

00:12:19,660 --> 00:12:24,249
created behaves more like a job where

00:12:21,509 --> 00:12:29,410
every instance of the resource creates a

00:12:24,249 --> 00:12:31,089
new instance and lastly we have to tell

00:12:29,410 --> 00:12:34,509
it about we have to find the logic the

00:12:31,089 --> 00:12:37,119
actual web hook implementing the logic

00:12:34,509 --> 00:12:40,779
in this case in this example not really

00:12:37,119 --> 00:12:44,649
useful example we tell it well our test

00:12:40,779 --> 00:12:45,489
function and this now ties our two

00:12:44,649 --> 00:12:47,709
pieces together

00:12:45,489 --> 00:12:53,019
it connects our custom resource

00:12:47,709 --> 00:12:54,579
definition with our logic but you still

00:12:53,019 --> 00:12:55,289
have to know how these to connect

00:12:54,579 --> 00:12:58,600
together

00:12:55,289 --> 00:13:02,789
well how does the communication look

00:12:58,600 --> 00:13:06,119
like when you create a parent resource

00:13:02,789 --> 00:13:09,429
meter controller notice the set and

00:13:06,119 --> 00:13:11,829
provides your web service with coral

00:13:09,429 --> 00:13:13,510
containing the complete parent resource

00:13:11,829 --> 00:13:16,030
all data you

00:13:13,510 --> 00:13:19,750
created with cube CTL apply or whatever

00:13:16,030 --> 00:13:22,060
and a list of currently existing

00:13:19,750 --> 00:13:25,150
children or an empty list if no children

00:13:22,060 --> 00:13:27,850
currently exist that's what your

00:13:25,150 --> 00:13:31,750
function gets and that's actually all it

00:13:27,850 --> 00:13:34,510
needs to know what it has to return to

00:13:31,750 --> 00:13:37,750
later controller in the web request is

00:13:34,510 --> 00:13:40,000
firstly the status that's just to feel

00:13:37,750 --> 00:13:43,750
that you can fill with whatever you want

00:13:40,000 --> 00:13:46,810
it to be because if you think of pots

00:13:43,750 --> 00:13:49,210
and you do a cube CT I described you get

00:13:46,810 --> 00:13:51,670
a status field also so that's a way to

00:13:49,210 --> 00:13:53,710
communicate with your users and exactly

00:13:51,670 --> 00:13:55,060
that's this it's just a way to

00:13:53,710 --> 00:13:57,840
communicate boosts you users what's

00:13:55,060 --> 00:14:00,340
happening with your resource and

00:13:57,840 --> 00:14:03,130
additionally you have to return a list

00:14:00,340 --> 00:14:07,390
of children and that's the state that

00:14:03,130 --> 00:14:08,650
you want me to controller to create what

00:14:07,390 --> 00:14:11,080
happens with this list

00:14:08,650 --> 00:14:13,510
well meteor controller ensures that

00:14:11,080 --> 00:14:15,460
every resource contained in this list

00:14:13,510 --> 00:14:18,430
and not in the list of currently

00:14:15,460 --> 00:14:21,040
existing children gets created it also

00:14:18,430 --> 00:14:22,930
ensures that every child not in this

00:14:21,040 --> 00:14:25,990
list but in the list of currently

00:14:22,930 --> 00:14:29,050
existing children gets deleted and every

00:14:25,990 --> 00:14:31,180
child that differs gets updated and that

00:14:29,050 --> 00:14:33,960
actually if there is a whole magic of

00:14:31,180 --> 00:14:37,090
meter control it and chooses this whole

00:14:33,960 --> 00:14:40,660
reconciliation loop is actually done in

00:14:37,090 --> 00:14:43,780
a reliable fashion and all you have to

00:14:40,660 --> 00:14:45,910
think about is how to process the Jason

00:14:43,780 --> 00:14:49,510
that you get and how to create the Jason

00:14:45,910 --> 00:14:53,470
that meter controller needs to get know

00:14:49,510 --> 00:14:57,250
to get its work done so let's add this

00:14:53,470 --> 00:14:58,780
to our big picture now we have filled

00:14:57,250 --> 00:15:02,920
the gap in the middle we have on the

00:14:58,780 --> 00:15:05,530
right our logic on the Left our resource

00:15:02,920 --> 00:15:07,510
definition and here for 1 meter

00:15:05,530 --> 00:15:12,520
controller in the middle tying both

00:15:07,510 --> 00:15:15,310
neatly together so how does such a

00:15:12,520 --> 00:15:19,090
request a whole loop of creating

00:15:15,310 --> 00:15:22,200
resource look like now here's a picture

00:15:19,090 --> 00:15:25,600
again and let's start with our user

00:15:22,200 --> 00:15:27,250
creating a new instance of our custom

00:15:25,600 --> 00:15:29,050
resource my resource

00:15:27,250 --> 00:15:34,030
however you want to call it was a cube

00:15:29,050 --> 00:15:37,030
CTL apply on some Camel fire this gets

00:15:34,030 --> 00:15:39,520
notified by the API which in turn

00:15:37,030 --> 00:15:41,770
ensures that meteor controller gets

00:15:39,520 --> 00:15:43,690
notified because it watches on the

00:15:41,770 --> 00:15:48,550
parent resources so your custom resource

00:15:43,690 --> 00:15:52,860
type meter controller then calls your

00:15:48,550 --> 00:15:56,260
function this the Jason structure I just

00:15:52,860 --> 00:15:57,940
have shown you so it contains in the

00:15:56,260 --> 00:16:01,480
initial statement just a parent and

00:15:57,940 --> 00:16:03,700
nothing in the trade list you wrote them

00:16:01,480 --> 00:16:06,730
those whatever processing it has to do

00:16:03,700 --> 00:16:09,120
and returns a JSON structure containing

00:16:06,730 --> 00:16:11,440
the status and the list of children

00:16:09,120 --> 00:16:14,110
meter controller then uses this

00:16:11,440 --> 00:16:16,690
information to do whatever API requests

00:16:14,110 --> 00:16:20,200
are necessary to create these children

00:16:16,690 --> 00:16:24,420
which in turn result in these children

00:16:20,200 --> 00:16:28,090
being created this whole process of

00:16:24,420 --> 00:16:31,060
watching notification map request

00:16:28,090 --> 00:16:33,820
response API calls and so on continues

00:16:31,060 --> 00:16:36,850
in perpetuity every time something

00:16:33,820 --> 00:16:39,970
changes this gets econ style parameter

00:16:36,850 --> 00:16:42,570
controller so how does it look like

00:16:39,970 --> 00:16:46,420
actually in reality well let's have a

00:16:42,570 --> 00:16:48,540
demo and this is my first conference and

00:16:46,420 --> 00:16:53,950
I'm not brave enough to do a live demo i

00:16:48,540 --> 00:17:03,910
pre-recorded this so let's have a look

00:16:53,950 --> 00:17:06,610
at this so let's first list the files

00:17:03,910 --> 00:17:10,420
I'm going to use and no it's not a video

00:17:06,610 --> 00:17:12,339
it's a terminal capture so you can

00:17:10,420 --> 00:17:17,050
select and copy and paste if you want to

00:17:12,339 --> 00:17:18,970
do that so let's start with the resource

00:17:17,050 --> 00:17:22,420
I just have shown you we have a function

00:17:18,970 --> 00:17:24,610
a c rd a composite controller i also

00:17:22,420 --> 00:17:27,100
need a namespace because well everything

00:17:24,610 --> 00:17:29,500
and cuban it just needs more or less a

00:17:27,100 --> 00:17:31,120
namespace this is what I generate first

00:17:29,500 --> 00:17:35,950
and this will be our logic behind

00:17:31,120 --> 00:17:38,950
everything and then I will create the

00:17:35,950 --> 00:17:40,860
actual well instances of my custom

00:17:38,950 --> 00:17:42,720
resource what this customary

00:17:40,860 --> 00:17:46,049
source will be although I will not go

00:17:42,720 --> 00:17:47,910
into the details there is a min I or

00:17:46,049 --> 00:17:51,030
instance and if you have never heard of

00:17:47,910 --> 00:17:53,010
this software it's a small tool that

00:17:51,030 --> 00:17:56,520
allows you to create an Amazon s3

00:17:53,010 --> 00:18:00,260
compatible object store it's easy to use

00:17:56,520 --> 00:18:04,920
and a nice example to use in this case

00:18:00,260 --> 00:18:07,790
so let's get started I will show the

00:18:04,920 --> 00:18:11,160
different resources that will be created

00:18:07,790 --> 00:18:17,059
and yeah well it's the namespace nothing

00:18:11,160 --> 00:18:17,059
new here I hope let's just create this

00:18:24,840 --> 00:18:33,299
so next up is the custom resource

00:18:28,120 --> 00:18:33,299
definition this one will be a little bit

00:18:34,529 --> 00:18:41,259
so here you see again we create an

00:18:38,980 --> 00:18:45,279
object stored unstable dot my company

00:18:41,259 --> 00:18:48,070
comm version v1 alpha 1 and we call our

00:18:45,279 --> 00:18:50,320
kind object store that's the new

00:18:48,070 --> 00:18:55,330
resource type I will be introducing to

00:18:50,320 --> 00:19:01,869
Kuban eaters so let's see if this works

00:18:55,330 --> 00:19:03,909
and if you might have guessed it will so

00:19:01,869 --> 00:19:08,110
cumulus doesn't complain it just tells

00:19:03,909 --> 00:19:11,740
what I like created the new type next up

00:19:08,110 --> 00:19:13,950
I will create the function I will not

00:19:11,740 --> 00:19:19,659
show you the whole function because well

00:19:13,950 --> 00:19:24,399
describing 160 lines or so off of Ruby

00:19:19,659 --> 00:19:26,710
code won't be very fun I think you can

00:19:24,399 --> 00:19:29,679
have a look at this in all its glory and

00:19:26,710 --> 00:19:33,309
the github of this project so you can

00:19:29,679 --> 00:19:36,879
just have a look on it later I will be

00:19:33,309 --> 00:19:39,460
using Ruby here and yeah everything is

00:19:36,879 --> 00:19:41,289
here that you need and let's create it

00:19:39,460 --> 00:19:44,249
the controller the function itself will

00:19:41,289 --> 00:19:44,249
be just called controller

00:19:49,360 --> 00:19:54,340
again I assume Cuban leaders won't

00:19:51,279 --> 00:19:56,139
complain so last up and this one will be

00:19:54,340 --> 00:19:59,639
a little bit more complex and the

00:19:56,139 --> 00:20:03,129
example I used previously as the

00:19:59,639 --> 00:20:06,820
composite controller because instead of

00:20:03,129 --> 00:20:08,799
just creating one parts as children I

00:20:06,820 --> 00:20:10,960
actually need to create some more

00:20:08,799 --> 00:20:13,720
resources so let's start with the easy

00:20:10,960 --> 00:20:18,309
part we reference our parent resource

00:20:13,720 --> 00:20:20,710
and we reference the just created cublas

00:20:18,309 --> 00:20:24,009
function in the objects to our namespace

00:20:20,710 --> 00:20:26,200
and it's called controller what we also

00:20:24,009 --> 00:20:28,720
do is this time you want to handle

00:20:26,200 --> 00:20:30,279
selectors ourself so we want to say well

00:20:28,720 --> 00:20:33,340
you have to listen for these parts and

00:20:30,279 --> 00:20:36,100
these resources with these labels and we

00:20:33,340 --> 00:20:39,580
also create different types of trade

00:20:36,100 --> 00:20:41,470
resource services deployment persistent

00:20:39,580 --> 00:20:42,940
volume claims and so on that actually

00:20:41,470 --> 00:20:44,379
makes this example a little bit more

00:20:42,940 --> 00:20:45,809
complex and a little bit more longer

00:20:44,379 --> 00:20:49,710
than what I have shown you but

00:20:45,809 --> 00:20:49,710
functionally it's the same

00:20:58,960 --> 00:21:06,070
so again Cuban it is doesn't complain so

00:21:03,640 --> 00:21:07,660
now we have everything we need you have

00:21:06,070 --> 00:21:09,280
a custom resource definition we have a

00:21:07,660 --> 00:21:11,740
function we have a composite controller

00:21:09,280 --> 00:21:14,890
tying everything together so how does it

00:21:11,740 --> 00:21:16,630
look in the namespace well the and only

00:21:14,890 --> 00:21:19,780
thing is you will see other resources

00:21:16,630 --> 00:21:21,810
actually created by q + + q + creates a

00:21:19,780 --> 00:21:25,030
deployment which in turn creates a

00:21:21,810 --> 00:21:27,310
replica set apart and the service so

00:21:25,030 --> 00:21:31,210
yeah here you can see we have a function

00:21:27,310 --> 00:21:33,940
and it's running so next up let's

00:21:31,210 --> 00:21:37,500
actually use this custom resource to

00:21:33,940 --> 00:21:40,120
create an instance of an object store

00:21:37,500 --> 00:21:43,170
again I need the namespace for that so

00:21:40,120 --> 00:21:43,170
let's just create one

00:21:50,940 --> 00:21:55,769
so now comes the interesting part the

00:21:54,090 --> 00:22:02,279
customer ease was the instance of the

00:21:55,769 --> 00:22:03,779
customer resource so and you might have

00:22:02,279 --> 00:22:06,239
never seen such a resource before

00:22:03,779 --> 00:22:09,179
because well it doesn't exist anywhere

00:22:06,239 --> 00:22:12,450
else and the different fields the spec

00:22:09,179 --> 00:22:15,059
of this resource is actually not defined

00:22:12,450 --> 00:22:19,440
anywhere my code just expect that I do

00:22:15,059 --> 00:22:21,989
the right thing here but I have decided

00:22:19,440 --> 00:22:26,639
well again we need a selector I just

00:22:21,989 --> 00:22:29,039
said that and I give it an image just

00:22:26,639 --> 00:22:31,470
docker image where I wanted to use it

00:22:29,039 --> 00:22:34,080
has a base and I give it as we create

00:22:31,470 --> 00:22:35,879
something involving storage some details

00:22:34,080 --> 00:22:38,509
about the storage I wanted to use in

00:22:35,879 --> 00:22:41,070
this case a storage class and the size

00:22:38,509 --> 00:22:46,289
so based on this information I now hope

00:22:41,070 --> 00:22:52,109
that our code will create an instance of

00:22:46,289 --> 00:22:57,499
our object store that we actually can

00:22:52,109 --> 00:23:01,590
use so again it was created successfully

00:22:57,499 --> 00:23:03,779
and now let's have a look at the my

00:23:01,590 --> 00:23:06,059
project namespace we just created but we

00:23:03,779 --> 00:23:12,169
created it so it was empty just a moment

00:23:06,059 --> 00:23:16,200
before so let's see how it looks now and

00:23:12,169 --> 00:23:17,970
as you can see it now contains a little

00:23:16,200 --> 00:23:20,549
bit more than just the resource I just

00:23:17,970 --> 00:23:24,139
created it contains the deployment the

00:23:20,549 --> 00:23:29,070
servers and so on and this actually is

00:23:24,139 --> 00:23:30,869
what well the logic does and in

00:23:29,070 --> 00:23:34,859
combination with meteor controller so it

00:23:30,869 --> 00:23:39,629
handed over the parent resource which

00:23:34,859 --> 00:23:41,759
contained the 8 gigabyte for the for the

00:23:39,629 --> 00:23:44,659
persistent volume the deployment and so

00:23:41,759 --> 00:23:47,009
on and May and then returned a list of

00:23:44,659 --> 00:23:54,059
Cuba needs resources the ones you see

00:23:47,009 --> 00:23:56,249
here and to get back to our initial goal

00:23:54,059 --> 00:23:58,919
I promise that you can use your custom

00:23:56,249 --> 00:24:02,179
resource as any other resource so let's

00:23:58,919 --> 00:24:02,179
start by just listing it

00:24:03,750 --> 00:24:09,700
and what we will see now is well yes we

00:24:07,630 --> 00:24:13,890
have a resource my object store of the

00:24:09,700 --> 00:24:13,890
type object store that we just created

00:24:14,040 --> 00:24:27,370
and we can also delete it which is

00:24:20,760 --> 00:24:29,980
equally important and what we expect to

00:24:27,370 --> 00:24:31,360
see after we delete this resource is

00:24:29,980 --> 00:24:32,670
that actually the namespace will be

00:24:31,360 --> 00:24:35,410
empty again

00:24:32,670 --> 00:24:37,890
so meter controller cleans up after

00:24:35,410 --> 00:24:37,890
itself

00:24:38,100 --> 00:24:42,820
and this is actually something your code

00:24:41,230 --> 00:24:46,870
doesn't have to handle it never sees

00:24:42,820 --> 00:24:52,440
that the resource gets deleted so as you

00:24:46,870 --> 00:24:54,820
can see it behaves as expected and

00:24:52,440 --> 00:24:56,590
depending on your imagination you can do

00:24:54,820 --> 00:25:00,250
all sorts of things and all sorts of

00:24:56,590 --> 00:25:04,870
complicated stuff and that actually

00:25:00,250 --> 00:25:08,050
concludes my presentation thank you for

00:25:04,870 --> 00:25:09,880
listening I hope I was able to give you

00:25:08,050 --> 00:25:12,310
some new ideas on what to do basic unit

00:25:09,880 --> 00:25:14,170
is cluster if you want to contact me

00:25:12,310 --> 00:25:16,390
well I'm a little bit old school I have

00:25:14,170 --> 00:25:19,030
no Twitter or something like this I hope

00:25:16,390 --> 00:25:21,190
someone is still using email so please

00:25:19,030 --> 00:25:22,810
contact me or just speak to me on the

00:25:21,190 --> 00:25:25,450
conference I will be around here to

00:25:22,810 --> 00:25:28,980
tomorrow and just as a suggestion as to

00:25:25,450 --> 00:25:32,290
follow up the next talk will be about

00:25:28,980 --> 00:25:34,000
Kudo and I think this will be good will

00:25:32,290 --> 00:25:36,490
go very neatly with what I have shown

00:25:34,000 --> 00:25:39,070
you because these two projects go very

00:25:36,490 --> 00:25:41,950
neatly together so yeah I've put the

00:25:39,070 --> 00:25:44,170
links at the last slide which you can

00:25:41,950 --> 00:25:53,500
use when you get the presentation from

00:25:44,170 --> 00:25:54,220
bos TC team and yeah thank you thank you

00:25:53,500 --> 00:25:58,450
very much

00:25:54,220 --> 00:26:05,830
so you made it first talk are there any

00:25:58,450 --> 00:26:08,860
questions so what is there in the 148

00:26:05,830 --> 00:26:10,450
lines of Ruby code that is there that's

00:26:08,860 --> 00:26:15,010
the first question and the second

00:26:10,450 --> 00:26:16,930
question is what use cases for what use

00:26:15,010 --> 00:26:19,090
cases do you create your own

00:26:16,930 --> 00:26:21,970
some resource okay so can you please

00:26:19,090 --> 00:26:26,020
repeat the first question so the first

00:26:21,970 --> 00:26:28,240
in the function that you created you you

00:26:26,020 --> 00:26:32,320
told that there's 140 lines of Ruby code

00:26:28,240 --> 00:26:34,420
yeah yeah so what what was that for the

00:26:32,320 --> 00:26:37,390
the Ruby code it actually does it just

00:26:34,420 --> 00:26:42,130
creates some hashes representing the

00:26:37,390 --> 00:26:45,790
Cooper needs resources okay returning

00:26:42,130 --> 00:26:48,880
back yes I just create the data so the

00:26:45,790 --> 00:26:50,590
the Yama structures nothing more but as

00:26:48,880 --> 00:26:53,050
you can expect if you create four or

00:26:50,590 --> 00:26:55,450
five cubans resources that are quite

00:26:53,050 --> 00:26:57,430
some amount of lines but there's no no

00:26:55,450 --> 00:26:59,380
trickery in there it's just the let last

00:26:57,430 --> 00:27:01,420
statement is a return statement

00:26:59,380 --> 00:27:05,740
containing a this data structure to

00:27:01,420 --> 00:27:10,240
jason that's it and the second one is

00:27:05,740 --> 00:27:12,430
what are we using customer resources for

00:27:10,240 --> 00:27:15,250
well we created a concept of

00:27:12,430 --> 00:27:18,790
multi-tenancy based on this so we want

00:27:15,250 --> 00:27:20,830
our users to have a set of namespaces

00:27:18,790 --> 00:27:24,600
all managed by the same service account

00:27:20,830 --> 00:27:27,040
and the same tiller that was the initial

00:27:24,600 --> 00:27:29,830
use case we had to implement that this

00:27:27,040 --> 00:27:33,300
was helm wasn't we're not very satisfied

00:27:29,830 --> 00:27:36,070
with that and we then implemented it

00:27:33,300 --> 00:27:38,130
with custom resources which works far

00:27:36,070 --> 00:27:38,130
better

00:27:40,230 --> 00:27:49,390
any more questions we have run out of

00:27:43,060 --> 00:27:53,620
time a little okay so the question is

00:27:49,390 --> 00:27:55,330
already answered the next one is can you

00:27:53,620 --> 00:27:59,280
basically do the same thing as by

00:27:55,330 --> 00:28:03,610
writing your own operator limitations

00:27:59,280 --> 00:28:05,050
and operator does a little bit more than

00:28:03,610 --> 00:28:07,900
just a custom resource because an

00:28:05,050 --> 00:28:11,170
operator implements a lifecycle that

00:28:07,900 --> 00:28:13,990
belongs to the software you are

00:28:11,170 --> 00:28:15,730
deploying so that's why I said listen to

00:28:13,990 --> 00:28:16,870
the next talk the one with kudu because

00:28:15,730 --> 00:28:18,340
with Kudo

00:28:16,870 --> 00:28:20,760
from what I gathered I have to see the

00:28:18,340 --> 00:28:23,260
first the talk myself is you can create

00:28:20,760 --> 00:28:24,970
operators based on resources and you can

00:28:23,260 --> 00:28:26,620
then combine this with your own custom

00:28:24,970 --> 00:28:28,720
resources so if you have a special

00:28:26,620 --> 00:28:30,880
life's like a for example your object

00:28:28,720 --> 00:28:34,270
store you can combine this

00:28:30,880 --> 00:28:36,670
to an operator but a custom resource on

00:28:34,270 --> 00:28:40,320
it's on the way meter controller created

00:28:36,670 --> 00:28:42,700
allows it to create is a more basic type

00:28:40,320 --> 00:28:44,830
but you can use this then and an

00:28:42,700 --> 00:28:46,420
operator to create more complex systems

00:28:44,830 --> 00:28:53,410
that actually cover the lifecycle of a

00:28:46,420 --> 00:28:54,370
whole application so we have time for

00:28:53,410 --> 00:28:58,780
one final question

00:28:54,370 --> 00:29:00,060
anyone know one okay so if they said

00:28:58,780 --> 00:29:03,260
then I say thanks again

00:29:00,060 --> 00:29:03,260
[Applause]

00:29:08,260 --> 00:29:12,349

YouTube URL: https://www.youtube.com/watch?v=YOTryxu-evA


