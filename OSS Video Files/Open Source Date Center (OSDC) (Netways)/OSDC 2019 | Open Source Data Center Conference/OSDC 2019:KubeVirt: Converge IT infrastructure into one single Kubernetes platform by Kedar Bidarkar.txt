Title: OSDC 2019:KubeVirt: Converge IT infrastructure into one single Kubernetes platform by Kedar Bidarkar
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	We will dive into KubeVirt and see how we could create and manage VMs in Kubernetes In this session we will talk about what is KubeVirt and how it works on a kubernetes platform. KubeVirt allows users to create and manage virtual machines within a Kubernetes Cluster.
This session will be covering the following topics:

• KubeVirt Installation
• Basic KubeVirt objects and components
• How to deploy and manage virtual machines
• KubeVirt Storage
• KubeVirt Networking

Benefits :
Kubernetes is a well established container platform, but migrating applications/services to containers is not always easy. KubeVirt allows in such situations to migrate virtual machine based workloads to the same platform where the containers are already running, thus helping converge IT Infrastructure into one single platform, Kubernetes.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:16,220 --> 00:00:24,390
yeah hello everyone welcome to my talk

00:00:19,320 --> 00:00:26,550
my name is Kay Darby lurker I am seen a

00:00:24,390 --> 00:00:29,760
quality engineer working at Red Hat from

00:00:26,550 --> 00:00:33,140
India and today I will be talking about

00:00:29,760 --> 00:00:39,050
Qbert so who is familiar with Qbert

00:00:33,140 --> 00:00:45,539
anyone okay nice so who is familiar with

00:00:39,050 --> 00:00:48,390
kubernetes oh not many folks so let's

00:00:45,539 --> 00:00:51,329
get started so this is the agenda of my

00:00:48,390 --> 00:00:54,780
talk today so we look at why and what is

00:00:51,329 --> 00:00:57,120
Qbert then we look at the basic Qbert

00:00:54,780 --> 00:00:59,640
objects and components after that we

00:00:57,120 --> 00:01:01,890
look at the deployment and management of

00:00:59,640 --> 00:01:03,960
virtual machines and then we'll touch

00:01:01,890 --> 00:01:06,330
base upon the basics of Qbert storage

00:01:03,960 --> 00:01:10,350
and networking and finally we'll have

00:01:06,330 --> 00:01:12,990
Q&A so currently we have on-premise

00:01:10,350 --> 00:01:16,020
solutions like OpenStack overt and then

00:01:12,990 --> 00:01:19,799
we have the public cloud providers like

00:01:16,020 --> 00:01:21,990
AWS GCP Azul etcetera so when we already

00:01:19,799 --> 00:01:24,320
have these why Qbert and why VM

00:01:21,990 --> 00:01:27,990
management stuff again

00:01:24,320 --> 00:01:29,909
many new workloads are continuously

00:01:27,990 --> 00:01:31,950
moving towards containers but

00:01:29,909 --> 00:01:32,820
virtualization is here to stay for the

00:01:31,950 --> 00:01:35,670
foreseeable future

00:01:32,820 --> 00:01:38,159
because of various business reasons and

00:01:35,670 --> 00:01:40,290
technical reasons and so what would

00:01:38,159 --> 00:01:43,920
happen is both these environments would

00:01:40,290 --> 00:01:46,049
coexist for some time to come and so

00:01:43,920 --> 00:01:48,840
multiple workloads would need multiple

00:01:46,049 --> 00:01:51,030
stacks so as you can see here the VM

00:01:48,840 --> 00:01:52,979
workload would need vm stack and the

00:01:51,030 --> 00:01:56,040
container workload would need container

00:01:52,979 --> 00:01:59,040
stack but this would lead to duplication

00:01:56,040 --> 00:02:01,799
of efforts and trying to manage operate

00:01:59,040 --> 00:02:03,390
and thus increase the costs as each

00:02:01,799 --> 00:02:06,090
stack would have its own set of

00:02:03,390 --> 00:02:08,610
clustered hosts storage and network

00:02:06,090 --> 00:02:11,370
setups so rather than running multiple

00:02:08,610 --> 00:02:13,880
workloads on multiple stacks why not run

00:02:11,370 --> 00:02:16,640
multiple workloads on a single

00:02:13,880 --> 00:02:18,350
stack so using Qbert what we could do is

00:02:16,640 --> 00:02:21,020
we could run multiple workloads on a

00:02:18,350 --> 00:02:23,420
single stack so so over here we can see

00:02:21,020 --> 00:02:25,850
the VM workload is running side-by-side

00:02:23,420 --> 00:02:29,060
The Container workload on one single

00:02:25,850 --> 00:02:31,240
kubernetes cluster so here the virtual

00:02:29,060 --> 00:02:33,970
machines are running inside the

00:02:31,240 --> 00:02:37,520
kubernetes pods

00:02:33,970 --> 00:02:40,640
so with this unified infra it should be

00:02:37,520 --> 00:02:45,340
easier to manage operate and thus reduce

00:02:40,640 --> 00:02:48,290
the costs also this would help in

00:02:45,340 --> 00:02:50,630
providing a migration path where in the

00:02:48,290 --> 00:02:54,800
migration of workloads from VM to

00:02:50,630 --> 00:02:56,330
containers will be on the same infra so

00:02:54,800 --> 00:03:00,020
the virtual machines that are running on

00:02:56,330 --> 00:03:03,710
kubernetes they would be making use of

00:03:00,020 --> 00:03:07,570
this the kubernetes concepts like load

00:03:03,710 --> 00:03:11,270
balancing trolling deployments and so on

00:03:07,570 --> 00:03:13,610
so this is what we were talking and

00:03:11,270 --> 00:03:15,560
discussing about so you can see the

00:03:13,610 --> 00:03:18,440
business reasons could be the cost

00:03:15,560 --> 00:03:21,740
required to continue rise the time to

00:03:18,440 --> 00:03:25,790
market and also some applications which

00:03:21,740 --> 00:03:28,130
are already towards end-of-life then the

00:03:25,790 --> 00:03:29,810
technical reasons would be certain

00:03:28,130 --> 00:03:32,630
applications which would require custom

00:03:29,810 --> 00:03:34,070
kernel and they could of course be some

00:03:32,630 --> 00:03:39,740
applications which are very hard to

00:03:34,070 --> 00:03:45,230
containerize so now let's look at what

00:03:39,740 --> 00:03:48,080
is Q board so Q Bert is a kubernetes

00:03:45,230 --> 00:03:49,940
add-on that enables scheduling of

00:03:48,080 --> 00:03:53,300
traditional VM workloads side-by-side

00:03:49,940 --> 00:03:54,980
the container workloads on kubernetes so

00:03:53,300 --> 00:03:57,520
it makes use of custom resource

00:03:54,980 --> 00:04:00,709
definitions and a bunch of controllers

00:03:57,520 --> 00:04:04,660
so it extends the existing kubernetes

00:04:00,709 --> 00:04:07,790
cluster by providing a set of what api's

00:04:04,660 --> 00:04:11,720
so it works by running Liberty a VM

00:04:07,790 --> 00:04:16,430
inside a container so now let's take a

00:04:11,720 --> 00:04:18,230
look at Cubert installation so to get

00:04:16,430 --> 00:04:21,200
started or if you want to quickly try

00:04:18,230 --> 00:04:23,000
out Qbert you can make use of mini cube

00:04:21,200 --> 00:04:26,620
which is a single node kubernetes

00:04:23,000 --> 00:04:31,330
cluster running inside the mini qvm

00:04:26,620 --> 00:04:33,190
so as we are using here a mini qvm so we

00:04:31,330 --> 00:04:35,740
need to enable nested word on the bare

00:04:33,190 --> 00:04:38,560
metal setup and for folks who do not

00:04:35,740 --> 00:04:43,060
want to do that we could also use the

00:04:38,560 --> 00:04:46,930
emulation mode also we require the cube

00:04:43,060 --> 00:04:51,280
cuddle binary to deploy and manage the

00:04:46,930 --> 00:04:53,139
virtual machines so what we do is for

00:04:51,280 --> 00:04:55,780
installation of Qbert we make use of the

00:04:53,139 --> 00:04:58,750
cube cuddle binary and apply the release

00:04:55,780 --> 00:05:01,500
manifest of Qbert so we apply the

00:04:58,750 --> 00:05:04,210
q''-word operator which would create the

00:05:01,500 --> 00:05:06,310
Qbert namespace and Qbert custom

00:05:04,210 --> 00:05:08,680
resource definition and bunch of other

00:05:06,310 --> 00:05:11,380
stuff like clustered roll service

00:05:08,680 --> 00:05:14,110
accounts and so on after that when we

00:05:11,380 --> 00:05:16,570
applied the Qbert CR what happens is it

00:05:14,110 --> 00:05:18,760
would fetch the word component images

00:05:16,570 --> 00:05:22,330
from the container registry and it would

00:05:18,760 --> 00:05:24,820
create the word component parts inside

00:05:22,330 --> 00:05:27,039
the cube word namespace so once these

00:05:24,820 --> 00:05:29,919
what component ports are up and running

00:05:27,039 --> 00:05:33,330
we can say that the installation of

00:05:29,919 --> 00:05:33,330
Qbert is completed

00:05:39,930 --> 00:05:44,820
so what are the benefits with cuboid so

00:05:42,900 --> 00:05:46,979
it drops directly into the existing

00:05:44,820 --> 00:05:49,500
communities cluster no additional host

00:05:46,979 --> 00:05:54,690
set up is required as we can see it was

00:05:49,500 --> 00:05:56,880
simple to install also it provides a

00:05:54,690 --> 00:06:00,600
transition path wherein the VMS can make

00:05:56,880 --> 00:06:03,600
use of the kubernetes infra tools and

00:06:00,600 --> 00:06:05,580
management stuff also not all

00:06:03,600 --> 00:06:07,139
applications are easy to continue eyes

00:06:05,580 --> 00:06:09,600
there could be certain applications

00:06:07,139 --> 00:06:11,850
which are difficult to continue eyes and

00:06:09,600 --> 00:06:13,590
it is for these applications what we

00:06:11,850 --> 00:06:16,650
could do is we could make use of Qbert

00:06:13,590 --> 00:06:20,729
and deploy them on kubernetes as virtual

00:06:16,650 --> 00:06:24,300
machines so it also lowers the entry

00:06:20,729 --> 00:06:28,110
load for for the migration of

00:06:24,300 --> 00:06:30,180
applications to govern IDs so there is

00:06:28,110 --> 00:06:33,000
no need for us to continue is the

00:06:30,180 --> 00:06:37,500
applications before the migration to the

00:06:33,000 --> 00:06:39,180
kubernetes so Qbert provides not just

00:06:37,500 --> 00:06:44,270
the influx inversions but it would also

00:06:39,180 --> 00:06:46,289
provide a workflow convergence so next

00:06:44,270 --> 00:06:48,930
we are looking at the q''-word

00:06:46,289 --> 00:06:51,630
architecture so the graded components

00:06:48,930 --> 00:06:54,180
are the q''-word components and the

00:06:51,630 --> 00:06:56,159
others are the kubernetes components so

00:06:54,180 --> 00:06:58,530
one thing to note here is that Qbert

00:06:56,159 --> 00:07:03,090
supports not just the docker runtime but

00:06:58,530 --> 00:07:05,789
it also supports the cryo with run C so

00:07:03,090 --> 00:07:14,010
now we'll look more closely at the what

00:07:05,789 --> 00:07:16,440
components of Qbert so so what operator

00:07:14,010 --> 00:07:17,940
so it handles the installation removal

00:07:16,440 --> 00:07:20,729
and abolition of the q''-word

00:07:17,940 --> 00:07:22,949
application then we have the vert a P I

00:07:20,729 --> 00:07:26,870
so what API is very much similar to the

00:07:22,949 --> 00:07:29,520
cube api server so it deals with

00:07:26,870 --> 00:07:32,250
validation and defaults of virtual

00:07:29,520 --> 00:07:35,190
machines and it also acts as an entry

00:07:32,250 --> 00:07:36,630
point for all word related flows then we

00:07:35,190 --> 00:07:38,099
have the word controller which is very

00:07:36,630 --> 00:07:41,070
much similar to the controller manager

00:07:38,099 --> 00:07:42,900
from the kubernetes world so this is

00:07:41,070 --> 00:07:47,010
where all the controllers and the logic

00:07:42,900 --> 00:07:48,710
lives then we have the word handler so

00:07:47,010 --> 00:07:51,570
which is very much similar to the

00:07:48,710 --> 00:07:53,790
cubelet which is a node daemon running

00:07:51,570 --> 00:07:57,540
on each of the nodes of the

00:07:53,790 --> 00:07:59,280
when it is cluster so what handler is

00:07:57,540 --> 00:08:01,110
all about managing the VM is which are

00:07:59,280 --> 00:08:04,080
running inside the ports which are

00:08:01,110 --> 00:08:06,150
managed by the cubelet finally we have

00:08:04,080 --> 00:08:08,760
the world launch a pod or the world

00:08:06,150 --> 00:08:10,740
launch of component which provides C

00:08:08,760 --> 00:08:15,360
groups and namespaces to host the

00:08:10,740 --> 00:08:17,910
virtual machines so for every VM I

00:08:15,360 --> 00:08:20,490
object a corresponding word launch of

00:08:17,910 --> 00:08:24,870
parts sorry about launch a pod gets

00:08:20,490 --> 00:08:27,080
created in the same namespace so within

00:08:24,870 --> 00:08:29,310
this world launcher pod we will have a

00:08:27,080 --> 00:08:32,510
compute container which would have a

00:08:29,310 --> 00:08:36,180
local divert instance running inside it

00:08:32,510 --> 00:08:38,370
so now we'll take a look at the cuboid

00:08:36,180 --> 00:08:40,110
objects so there are various keyboard

00:08:38,370 --> 00:08:42,690
objects we have the virtual machine

00:08:40,110 --> 00:08:45,000
instance virtual machine then we have

00:08:42,690 --> 00:08:48,150
the virtual machine replica set similar

00:08:45,000 --> 00:08:51,090
to the pod replica sets and then we have

00:08:48,150 --> 00:08:54,210
the virtual machine presets so we'll

00:08:51,090 --> 00:08:56,760
take so we look at now the virtual

00:08:54,210 --> 00:09:00,570
machine instance object so virtual

00:08:56,760 --> 00:09:03,510
machine instance is a running VM so

00:09:00,570 --> 00:09:07,620
virtual machine instance just like the

00:09:03,510 --> 00:09:11,820
pods has its own kind so it is scheduled

00:09:07,620 --> 00:09:13,800
as a pod and it lives inside the pod so

00:09:11,820 --> 00:09:17,010
on the right hand side we have an

00:09:13,800 --> 00:09:19,020
example of a VM spec file where and we

00:09:17,010 --> 00:09:24,560
are defining various parameters and

00:09:19,020 --> 00:09:28,970
specs like the CPU memory and also the

00:09:24,560 --> 00:09:31,590
storage which is here the container disk

00:09:28,970 --> 00:09:35,100
and also the applications within vm i

00:09:31,590 --> 00:09:36,960
are exposed using the service so here is

00:09:35,100 --> 00:09:40,080
an example wherein we are exposing the

00:09:36,960 --> 00:09:41,910
port 22 which is there such port and we

00:09:40,080 --> 00:09:46,730
are making use of the cluster IP service

00:09:41,910 --> 00:09:46,730
so using that we can login into the VM I

00:09:47,450 --> 00:09:55,740
so how do I create a new VM I so what we

00:09:54,180 --> 00:09:58,350
do is we make use of the queue cutter

00:09:55,740 --> 00:10:00,360
binary and apply the VM I manifest and

00:09:58,350 --> 00:10:02,310
once we do that we'll have a world

00:10:00,360 --> 00:10:04,440
launch of POD so if you are using

00:10:02,310 --> 00:10:07,080
container disk as the volume will have

00:10:04,440 --> 00:10:07,740
to continuous running inside the word

00:10:07,080 --> 00:10:09,930
launcher

00:10:07,740 --> 00:10:11,580
part the first one would be the compute

00:10:09,930 --> 00:10:14,370
container and the second one would be

00:10:11,580 --> 00:10:17,100
the volume container disk so once these

00:10:14,370 --> 00:10:19,080
two containers are up and running we

00:10:17,100 --> 00:10:21,750
would have our VMI up and running

00:10:19,080 --> 00:10:23,400
so once the VMI is up and running we can

00:10:21,750 --> 00:10:30,960
connect to it using the word cuddle

00:10:23,400 --> 00:10:32,400
binary and use the console command so so

00:10:30,960 --> 00:10:37,050
using that we can login into the

00:10:32,400 --> 00:10:39,360
operating system so you might be

00:10:37,050 --> 00:10:42,240
wondering so if it is making use of

00:10:39,360 --> 00:10:44,550
libvirt KVM so where is my tommix ml

00:10:42,240 --> 00:10:46,350
file so where do I find the dama XML

00:10:44,550 --> 00:10:48,870
file so you would find the Dom excel

00:10:46,350 --> 00:10:51,090
file of your virtual machine inside the

00:10:48,870 --> 00:10:55,890
computer container of the word launcher

00:10:51,090 --> 00:11:01,020
pod so as you can see once we login into

00:10:55,890 --> 00:11:04,590
the so once we login into the compute

00:11:01,020 --> 00:11:06,810
container of the word launcher pod we

00:11:04,590 --> 00:11:09,090
can use the witch commands to list the

00:11:06,810 --> 00:11:11,490
virtual machine that is running and we

00:11:09,090 --> 00:11:14,250
could then navigate through the file

00:11:11,490 --> 00:11:18,930
system to locate the Dom XML file or you

00:11:14,250 --> 00:11:23,130
can just use the wedge term XML to go

00:11:18,930 --> 00:11:26,190
through your Dom XML file so that was

00:11:23,130 --> 00:11:29,970
about the VM I object so now let's look

00:11:26,190 --> 00:11:31,560
at the virtual machine object so virtual

00:11:29,970 --> 00:11:34,230
machine provides additional management

00:11:31,560 --> 00:11:37,440
capabilities to VMI inside the cluster

00:11:34,230 --> 00:11:41,850
so it provides ABI stability it also

00:11:37,440 --> 00:11:43,980
provides a way to do offline

00:11:41,850 --> 00:11:47,480
configuration changes and also manage

00:11:43,980 --> 00:11:49,470
the lifecycle of the virtual machines so

00:11:47,480 --> 00:11:53,520
on the right hand side we have an

00:11:49,470 --> 00:11:55,650
example of VM spec file so the section

00:11:53,520 --> 00:11:59,100
specific to the VM would be the template

00:11:55,650 --> 00:12:00,540
section so you may be wondering like

00:11:59,100 --> 00:12:03,870
what is the difference between a VM I

00:12:00,540 --> 00:12:06,240
and a VM object so the VM I would have

00:12:03,870 --> 00:12:09,660
just two events just create and delete

00:12:06,240 --> 00:12:16,260
but the VM would have create start/stop

00:12:09,660 --> 00:12:18,720
restart and delete so how do I create a

00:12:16,260 --> 00:12:20,340
new virtual machine so creating a new

00:12:18,720 --> 00:12:21,510
virtual machine would be very much

00:12:20,340 --> 00:12:24,810
similar to creating

00:12:21,510 --> 00:12:28,019
a VMI Soviet make use of the cubital

00:12:24,810 --> 00:12:31,260
binary and apply the VM manifest so once

00:12:28,019 --> 00:12:33,180
we do that a VM would be created but as

00:12:31,260 --> 00:12:35,040
we can know the VM is currently not in a

00:12:33,180 --> 00:12:37,470
running state so we need to make use of

00:12:35,040 --> 00:12:38,550
the word cuttle binary and start the

00:12:37,470 --> 00:12:43,800
virtual machine

00:12:38,550 --> 00:12:48,720
so once the VM is in running state we

00:12:43,800 --> 00:12:51,839
can notice that the VM is now okay so

00:12:48,720 --> 00:12:53,519
once we use the word cuttle command and

00:12:51,839 --> 00:12:55,339
start the virtual machine now you can

00:12:53,519 --> 00:12:59,880
notice that the VM is in a running state

00:12:55,339 --> 00:13:02,760
so post that point it will be very much

00:12:59,880 --> 00:13:05,399
similar to a VMI so you would have a

00:13:02,760 --> 00:13:08,430
virtual you will have a word launcher

00:13:05,399 --> 00:13:12,230
pod and then once the pod is up and

00:13:08,430 --> 00:13:12,230
running you would have the VMI

00:13:12,620 --> 00:13:19,550
so let's now discuss about the vote on

00:13:15,690 --> 00:13:19,550
the word shuttle command

00:13:29,150 --> 00:13:32,150
yeah

00:13:34,900 --> 00:13:42,220
so we can still make use of the cue

00:13:38,950 --> 00:13:43,779
cuddle binary for basic VMI operations

00:13:42,220 --> 00:13:46,360
but we would require the word cuddle

00:13:43,779 --> 00:13:48,310
binary for advanced features like

00:13:46,360 --> 00:13:51,490
accessing the serial and graphical

00:13:48,310 --> 00:13:54,400
console and then also to manage the

00:13:51,490 --> 00:13:56,650
lifecycle of the virtual machines so

00:13:54,400 --> 00:13:58,660
just like cube cuddle binary what cuddle

00:13:56,650 --> 00:14:01,210
binary is deployed and is used from the

00:13:58,660 --> 00:14:04,839
client side so these are the various

00:14:01,210 --> 00:14:07,870
word cuddle commands you can start stop

00:14:04,839 --> 00:14:09,910
restart and then if you want to access

00:14:07,870 --> 00:14:15,310
the serial or graphical console you can

00:14:09,910 --> 00:14:19,690
make use of console and VC B and C so

00:14:15,310 --> 00:14:23,710
now let's talk and discuss about Q word

00:14:19,690 --> 00:14:27,730
storage so up until now we were looking

00:14:23,710 --> 00:14:29,980
at various VM and BMI spec files which

00:14:27,730 --> 00:14:31,839
we're making use of container disk so

00:14:29,980 --> 00:14:35,650
now let's take a look at what exactly is

00:14:31,839 --> 00:14:38,589
a container disk so with container disk

00:14:35,650 --> 00:14:40,660
what we do is the VM disks are placed on

00:14:38,589 --> 00:14:42,160
container images and these container

00:14:40,660 --> 00:14:45,700
images are pushed to the container

00:14:42,160 --> 00:14:49,450
registry then what would then what we do

00:14:45,700 --> 00:14:51,400
is people these disks are then pulled

00:14:49,450 --> 00:14:53,170
from the container registry and then

00:14:51,400 --> 00:14:55,810
they reside on the local node hosting

00:14:53,170 --> 00:14:58,209
the VMS so one thing one thing to note

00:14:55,810 --> 00:15:00,910
here is that container discs are

00:14:58,209 --> 00:15:05,350
ephemeral storage and they are not

00:15:00,910 --> 00:15:07,330
suitable for persistent storage so below

00:15:05,350 --> 00:15:11,830
is an example wherein we are creating

00:15:07,330 --> 00:15:14,110
our own container disk so so what we do

00:15:11,830 --> 00:15:17,529
is we make use of the q''-word container

00:15:14,110 --> 00:15:19,480
base image and we add the Fedora cue cow

00:15:17,529 --> 00:15:23,680
to image under the slash disk directory

00:15:19,480 --> 00:15:27,160
structure so one thing to note here is

00:15:23,680 --> 00:15:31,270
that the currently supported formats for

00:15:27,160 --> 00:15:34,510
the VM disks are kyouko 2 and raw disk

00:15:31,270 --> 00:15:36,550
image format so if you have your VM disk

00:15:34,510 --> 00:15:39,490
in any other format you need to first

00:15:36,550 --> 00:15:44,500
convert it into cue cow 2 or raw disk

00:15:39,490 --> 00:15:47,020
image format so now let's look at the

00:15:44,500 --> 00:15:48,920
containerized data importer so

00:15:47,020 --> 00:15:51,520
containerized data importer

00:15:48,920 --> 00:15:54,110
is not part of the Qbert but it is a

00:15:51,520 --> 00:15:57,650
part of a sister project called the CDI

00:15:54,110 --> 00:15:58,970
which is containerized data importer so

00:15:57,650 --> 00:16:02,090
it provides persistent storage

00:15:58,970 --> 00:16:05,240
management add-on for kubernetes so its

00:16:02,090 --> 00:16:11,450
primary goal is to build a vm disks on

00:16:05,240 --> 00:16:14,000
PVCs for the Qbert VMS so this is all to

00:16:11,450 --> 00:16:17,930
deal with persistent storage for the

00:16:14,000 --> 00:16:21,350
virtual machines so we have three use

00:16:17,930 --> 00:16:26,120
cases over here for the CDI so we can

00:16:21,350 --> 00:16:29,450
import the disk images from URL to PVC

00:16:26,120 --> 00:16:32,240
by making use of HTTP or s3 as the

00:16:29,450 --> 00:16:36,020
source then we could upload the local

00:16:32,240 --> 00:16:38,900
disk image onto the PVC and you could

00:16:36,020 --> 00:16:45,080
finally also clone an entire existing

00:16:38,900 --> 00:16:50,590
PVC so CDI just like Qbert we need to

00:16:45,080 --> 00:16:53,480
install it so we need to first apply the

00:16:50,590 --> 00:16:55,970
CDI operator manifest and then the CDI

00:16:53,480 --> 00:16:58,760
operator see our manifest so once we do

00:16:55,970 --> 00:17:06,620
that we'll have some CDI ports which get

00:16:58,760 --> 00:17:11,390
created under the CDI namespace so soap

00:17:06,620 --> 00:17:14,660
until now soap until now we were looking

00:17:11,390 --> 00:17:16,850
at the VM spec files which we are making

00:17:14,660 --> 00:17:20,900
use of the container disk which was a

00:17:16,850 --> 00:17:23,720
female storage but if we need to provide

00:17:20,900 --> 00:17:26,000
persistent storage we need to make use

00:17:23,720 --> 00:17:30,470
of persistent volume claim so as you

00:17:26,000 --> 00:17:33,320
know with kubernetes the way we go about

00:17:30,470 --> 00:17:36,770
providing persistent storage is make use

00:17:33,320 --> 00:17:38,750
of persistent volume claim so with

00:17:36,770 --> 00:17:42,500
persistent storage what we do is the VM

00:17:38,750 --> 00:17:44,600
disks are placed on the PVC so the

00:17:42,500 --> 00:17:46,460
persistent volume claim request storage

00:17:44,600 --> 00:17:49,670
from the PV that is the persistent

00:17:46,460 --> 00:17:53,630
volume which can be either in filesystem

00:17:49,670 --> 00:17:55,910
mode or in a block mode so below is an

00:17:53,630 --> 00:17:58,850
example wherein we are doing two things

00:17:55,910 --> 00:18:00,320
we are first creating a PVC and then we

00:17:58,850 --> 00:18:02,240
are importing the Fedora queue counter

00:18:00,320 --> 00:18:06,970
image onto the PV

00:18:02,240 --> 00:18:11,660
see by making use of the CDI annotation

00:18:06,970 --> 00:18:13,940
so once the PVC creation and the import

00:18:11,660 --> 00:18:17,300
of Fedora code to image is completed

00:18:13,940 --> 00:18:23,870
then we could start the VM which makes

00:18:17,300 --> 00:18:27,410
use of the PVC so now let's look at the

00:18:23,870 --> 00:18:31,130
data volume so data volume is an

00:18:27,410 --> 00:18:34,190
improvement over the persistent volume

00:18:31,130 --> 00:18:36,020
claim so data volume is a custom

00:18:34,190 --> 00:18:38,240
resource which is provided by the CDI

00:18:36,020 --> 00:18:40,040
project so it provides integration

00:18:38,240 --> 00:18:42,770
between the q''-word

00:18:40,040 --> 00:18:46,030
and CDI project and it also automates

00:18:42,770 --> 00:18:50,270
both the PVC creation and importing of

00:18:46,030 --> 00:18:54,140
the vm discs onto PVC during the vm

00:18:50,270 --> 00:18:56,720
launch flow itself so the vm is not

00:18:54,140 --> 00:18:59,179
scheduled until the data volume is

00:18:56,720 --> 00:19:02,929
created and it is in a success state

00:18:59,179 --> 00:19:05,809
so here the q''-word is aware that we

00:19:02,929 --> 00:19:08,150
are not that it is not supposed to start

00:19:05,809 --> 00:19:10,880
the VM unless the data volume is in a

00:19:08,150 --> 00:19:13,490
success state so this is an example

00:19:10,880 --> 00:19:17,559
wherein we are using the data volume

00:19:13,490 --> 00:19:21,500
instead of the persistent volume claim

00:19:17,559 --> 00:19:24,140
so in this example we are making use of

00:19:21,500 --> 00:19:27,260
just one spec file and we are doing

00:19:24,140 --> 00:19:30,320
three things we are creating first a PVC

00:19:27,260 --> 00:19:34,850
then importing the Fedora queue image

00:19:30,320 --> 00:19:39,350
onto the PVC and then once the PVC

00:19:34,850 --> 00:19:41,900
creation and importing is completed and

00:19:39,350 --> 00:19:45,200
is in a success state that's when the VM

00:19:41,900 --> 00:19:48,080
would automatically launch so the

00:19:45,200 --> 00:19:51,410
advantage of data volume over PVC would

00:19:48,080 --> 00:19:54,410
be that we don't have to wait for the

00:19:51,410 --> 00:19:58,940
PVC creation and importing of the disk

00:19:54,410 --> 00:20:00,920
to complete before starting the VM so

00:19:58,940 --> 00:20:05,330
now let's take a look at cubed

00:20:00,920 --> 00:20:07,820
networking so connecting a VM to network

00:20:05,330 --> 00:20:09,980
consists of two parts so the first one

00:20:07,820 --> 00:20:12,080
would be the interfaces which is the

00:20:09,980 --> 00:20:15,350
front end and next one would be the

00:20:12,080 --> 00:20:16,940
network which is the back end part

00:20:15,350 --> 00:20:20,080
so for every interface there should be a

00:20:16,940 --> 00:20:24,830
corresponding network with the same name

00:20:20,080 --> 00:20:29,210
so on the right hand side we have an

00:20:24,830 --> 00:20:31,970
example wherein we explicitly specify

00:20:29,210 --> 00:20:34,190
the interfaces and networks so in the

00:20:31,970 --> 00:20:36,760
earlier examples of the VM spec files or

00:20:34,190 --> 00:20:39,470
the vmi spec files we have not been

00:20:36,760 --> 00:20:41,510
explicitly mentioning or making use of

00:20:39,470 --> 00:20:43,970
interfaces and networks

00:20:41,510 --> 00:20:46,070
so if interfaces and networks are

00:20:43,970 --> 00:20:52,340
omitted then the default values for

00:20:46,070 --> 00:20:55,760
those would be bridge and board so as I

00:20:52,340 --> 00:20:58,250
was mentioning that if interfaces and

00:20:55,760 --> 00:20:59,840
networks is omitted then the virtual

00:20:58,250 --> 00:21:03,020
machines are connected to the regular

00:20:59,840 --> 00:21:05,570
port network so what happens here is the

00:21:03,020 --> 00:21:09,260
virtual machine will own the ports MAC

00:21:05,570 --> 00:21:11,750
address and IP address and the port MAC

00:21:09,260 --> 00:21:15,470
address is randomized and the IP address

00:21:11,750 --> 00:21:17,660
is deleted so from the outside there

00:21:15,470 --> 00:21:22,130
would be no difference between a VM and

00:21:17,660 --> 00:21:23,990
a part so Cubert does not bring in any

00:21:22,130 --> 00:21:27,110
additional networking plugins but it

00:21:23,990 --> 00:21:31,460
makes use of various existing plugins

00:21:27,110 --> 00:21:33,530
like OBS CNI plug-in and the multi CNI

00:21:31,460 --> 00:21:40,790
plug-in and of course there could be

00:21:33,530 --> 00:21:43,310
other plugins as well so this is about

00:21:40,790 --> 00:21:45,380
the network interfaces so it describes

00:21:43,310 --> 00:21:49,040
the properties of virtual interfaces has

00:21:45,380 --> 00:21:51,080
seen inside the VM interface so it can

00:21:49,040 --> 00:21:55,070
specify various properties like models

00:21:51,080 --> 00:22:01,460
and so on so each interface should

00:21:55,070 --> 00:22:03,290
declare its type so if we omit the

00:22:01,460 --> 00:22:05,810
interfaces then by default it would be

00:22:03,290 --> 00:22:07,220
the bridge interface and then of course

00:22:05,810 --> 00:22:10,220
we have the various other interfaces

00:22:07,220 --> 00:22:15,650
types like masquerade as r io v and so

00:22:10,220 --> 00:22:18,530
on so this one is about the network

00:22:15,650 --> 00:22:20,480
types which is the back end part so each

00:22:18,530 --> 00:22:23,990
network should declare its type we have

00:22:20,480 --> 00:22:25,640
the power Moulton and Geney so the part

00:22:23,990 --> 00:22:27,320
is the default kubernetes network and

00:22:25,640 --> 00:22:28,570
multis and geni are the secondary

00:22:27,320 --> 00:22:30,370
networks

00:22:28,570 --> 00:22:37,029
are used for providing multi networking

00:22:30,370 --> 00:22:38,500
support for the VMS so below is a so so

00:22:37,029 --> 00:22:40,690
in the below example what we are doing

00:22:38,500 --> 00:22:45,220
is we are defining a network which makes

00:22:40,690 --> 00:22:47,440
use of the ouvea CNI plugin so a VMI

00:22:45,220 --> 00:22:50,409
which is making use of this network

00:22:47,440 --> 00:22:54,340
would be connecting to the open V switch

00:22:50,409 --> 00:22:56,080
bridge b r1 and VLAN 100 so on the right

00:22:54,340 --> 00:22:58,029
hand side we have an example where in

00:22:56,080 --> 00:23:01,029
the VM is connecting to two interfaces

00:22:58,029 --> 00:23:08,620
and two networks and thus it is making

00:23:01,029 --> 00:23:11,919
use of multi networking stuff so these

00:23:08,620 --> 00:23:14,409
are the various other cubed features

00:23:11,919 --> 00:23:16,750
so we also have support for the live

00:23:14,409 --> 00:23:19,389
migration wherein you can live migrate a

00:23:16,750 --> 00:23:22,419
virtual machine from one node to another

00:23:19,389 --> 00:23:24,519
node with zero downtime so this could be

00:23:22,419 --> 00:23:27,509
useful when you want to place one of the

00:23:24,519 --> 00:23:30,879
nodes under maintenance of kubernetes

00:23:27,509 --> 00:23:33,789
then we have a web UI for Cubert wherein

00:23:30,879 --> 00:23:36,240
you can manage and deal with the various

00:23:33,789 --> 00:23:39,009
cuboid objects and various entities and

00:23:36,240 --> 00:23:42,519
then finally we have the foreman cube

00:23:39,009 --> 00:23:45,220
word plugin so this plug-in is not part

00:23:42,519 --> 00:23:48,279
of the q''-word project but it is part

00:23:45,220 --> 00:23:49,720
of the foreman project I thought I will

00:23:48,279 --> 00:23:53,860
just mention it over here so what you

00:23:49,720 --> 00:23:55,539
could do is you could add cube word as a

00:23:53,860 --> 00:23:58,269
computer resource in for men and you

00:23:55,539 --> 00:24:03,149
could also launch virtual machines on

00:23:58,269 --> 00:24:06,429
cube word from the foreman side so I

00:24:03,149 --> 00:24:09,250
think so far folks who are interested

00:24:06,429 --> 00:24:09,549
collaboration we have the website cubed

00:24:09,250 --> 00:24:13,889
IO

00:24:09,549 --> 00:24:16,980
we have a wonderful user guide and then

00:24:13,889 --> 00:24:19,899
we have the key table wherein we can

00:24:16,980 --> 00:24:22,480
raise issues you can ask for feature

00:24:19,899 --> 00:24:27,929
requests and then we have the mailing

00:24:22,480 --> 00:24:27,929
list slack and IRC and then Q&A

00:24:33,369 --> 00:24:39,350
sorry my microphone wasn't ready yet

00:24:36,799 --> 00:24:41,269
thank you again thank you sorry for the

00:24:39,350 --> 00:24:45,379
sound problems or problems with the hats

00:24:41,269 --> 00:24:48,820
that I will have a yeah okay see there

00:24:45,379 --> 00:24:48,820
are any questions in the audience

00:24:50,590 --> 00:24:56,149
okay I don't think there are any I guess

00:24:54,049 --> 00:24:58,519
you will attend evening and even there

00:24:56,149 --> 00:25:00,110
as well yes yes okay so get in touch

00:24:58,519 --> 00:25:01,519
with him again and ask him your

00:25:00,110 --> 00:25:03,910
questions you didn't want to ask in the

00:25:01,519 --> 00:25:08,459
audience thank you

00:25:03,910 --> 00:25:08,459
[Applause]

00:25:09,990 --> 00:25:15,510
[Music]

00:25:13,450 --> 00:25:15,510

YouTube URL: https://www.youtube.com/watch?v=JcC9IjsiYpA


